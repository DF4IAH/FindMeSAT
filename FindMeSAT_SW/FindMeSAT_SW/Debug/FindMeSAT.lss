
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ef2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00802000  00004ef2  00004f86  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f7  00802150  00802150  000050d8  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000050d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00005134  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000888  00000000  00000000  00005178  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015ecf  00000000  00000000  00005a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006024  00000000  00000000  0001b8cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ba72  00000000  00000000  000218f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002264  00000000  00000000  0002d368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003cec0  00000000  00000000  0002f5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007acc  00000000  00000000  0006c48c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008b0  00000000  00000000  00073f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d965  00000000  00000000  00074808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__vector_11>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__vector_13>
      38:	ca c5       	rjmp	.+2964   	; 0xbce <__vector_14>
      3a:	00 00       	nop
      3c:	f5 c5       	rjmp	.+3050   	; 0xc28 <__vector_15>
      3e:	00 00       	nop
      40:	20 c6       	rjmp	.+3136   	; 0xc82 <__vector_16>
      42:	00 00       	nop
      44:	4b c6       	rjmp	.+3222   	; 0xcdc <__vector_17>
      46:	00 00       	nop
      48:	76 c6       	rjmp	.+3308   	; 0xd36 <__vector_18>
      4a:	00 00       	nop
      4c:	a1 c6       	rjmp	.+3394   	; 0xd90 <__vector_19>
      4e:	00 00       	nop
      50:	cc c6       	rjmp	.+3480   	; 0xdea <__vector_20>
      52:	00 00       	nop
      54:	f7 c6       	rjmp	.+3566   	; 0xe44 <__vector_21>
      56:	00 00       	nop
      58:	22 c7       	rjmp	.+3652   	; 0xe9e <__vector_22>
      5a:	00 00       	nop
      5c:	4d c7       	rjmp	.+3738   	; 0xef8 <__vector_23>
      5e:	00 00       	nop
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ed c2       	rjmp	.+1498   	; 0x678 <__vector_39>
      9e:	00 00       	nop
      a0:	1d c3       	rjmp	.+1594   	; 0x6dc <__vector_40>
      a2:	00 00       	nop
      a4:	4d c3       	rjmp	.+1690   	; 0x740 <__vector_41>
      a6:	00 00       	nop
      a8:	7d c3       	rjmp	.+1786   	; 0x7a4 <__vector_42>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__vector_46>
      bc:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__vector_47>
      c0:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_48>
      c4:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_49>
      c8:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__vector_50>
      cc:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__vector_51>
      d0:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_52>
      d4:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__vector_53>
      d8:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_54>
      dc:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_55>
      e0:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__vector_56>
      e4:	ba c0       	rjmp	.+372    	; 0x25a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b6 c0       	rjmp	.+364    	; 0x25a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b4 c0       	rjmp	.+360    	; 0x25a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b2 c0       	rjmp	.+356    	; 0x25a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b0 c0       	rjmp	.+352    	; 0x25a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ae c0       	rjmp	.+348    	; 0x25a <__bad_interrupt>
      fe:	00 00       	nop
     100:	ac c0       	rjmp	.+344    	; 0x25a <__bad_interrupt>
     102:	00 00       	nop
     104:	aa c0       	rjmp	.+340    	; 0x25a <__bad_interrupt>
     106:	00 00       	nop
     108:	a8 c0       	rjmp	.+336    	; 0x25a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a6 c0       	rjmp	.+332    	; 0x25a <__bad_interrupt>
     10e:	00 00       	nop
     110:	a4 c0       	rjmp	.+328    	; 0x25a <__bad_interrupt>
     112:	00 00       	nop
     114:	a2 c0       	rjmp	.+324    	; 0x25a <__bad_interrupt>
     116:	00 00       	nop
     118:	a0 c0       	rjmp	.+320    	; 0x25a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e5 c1       	rjmp	.+970    	; 0x4e8 <__vector_71>
     11e:	00 00       	nop
     120:	15 c2       	rjmp	.+1066   	; 0x54c <__vector_72>
     122:	00 00       	nop
     124:	45 c2       	rjmp	.+1162   	; 0x5b0 <__vector_73>
     126:	00 00       	nop
     128:	75 c2       	rjmp	.+1258   	; 0x614 <__vector_74>
     12a:	00 00       	nop
     12c:	96 c0       	rjmp	.+300    	; 0x25a <__bad_interrupt>
     12e:	00 00       	nop
     130:	94 c0       	rjmp	.+296    	; 0x25a <__bad_interrupt>
     132:	00 00       	nop
     134:	0e c7       	rjmp	.+3612   	; 0xf52 <__vector_77>
     136:	00 00       	nop
     138:	39 c7       	rjmp	.+3698   	; 0xfac <__vector_78>
     13a:	00 00       	nop
     13c:	64 c7       	rjmp	.+3784   	; 0x1006 <__vector_79>
     13e:	00 00       	nop
     140:	8f c7       	rjmp	.+3870   	; 0x1060 <__vector_80>
     142:	00 00       	nop
     144:	ba c7       	rjmp	.+3956   	; 0x10ba <__vector_81>
     146:	00 00       	nop
     148:	e5 c7       	rjmp	.+4042   	; 0x1114 <__vector_82>
     14a:	00 00       	nop
     14c:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_83>
     150:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__vector_84>
     154:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__vector_85>
     158:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_86>
     15c:	7e c0       	rjmp	.+252    	; 0x25a <__bad_interrupt>
     15e:	00 00       	nop
     160:	7c c0       	rjmp	.+248    	; 0x25a <__bad_interrupt>
     162:	00 00       	nop
     164:	7a c0       	rjmp	.+244    	; 0x25a <__bad_interrupt>
     166:	00 00       	nop
     168:	78 c0       	rjmp	.+240    	; 0x25a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	76 c0       	rjmp	.+236    	; 0x25a <__bad_interrupt>
     16e:	00 00       	nop
     170:	74 c0       	rjmp	.+232    	; 0x25a <__bad_interrupt>
     172:	00 00       	nop
     174:	72 c0       	rjmp	.+228    	; 0x25a <__bad_interrupt>
     176:	00 00       	nop
     178:	70 c0       	rjmp	.+224    	; 0x25a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6e c0       	rjmp	.+220    	; 0x25a <__bad_interrupt>
     17e:	00 00       	nop
     180:	6c c0       	rjmp	.+216    	; 0x25a <__bad_interrupt>
     182:	00 00       	nop
     184:	6a c0       	rjmp	.+212    	; 0x25a <__bad_interrupt>
     186:	00 00       	nop
     188:	68 c0       	rjmp	.+208    	; 0x25a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	66 c0       	rjmp	.+204    	; 0x25a <__bad_interrupt>
     18e:	00 00       	nop
     190:	64 c0       	rjmp	.+200    	; 0x25a <__bad_interrupt>
     192:	00 00       	nop
     194:	62 c0       	rjmp	.+196    	; 0x25a <__bad_interrupt>
     196:	00 00       	nop
     198:	60 c0       	rjmp	.+192    	; 0x25a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5e c0       	rjmp	.+188    	; 0x25a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5c c0       	rjmp	.+184    	; 0x25a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5a c0       	rjmp	.+180    	; 0x25a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	58 c0       	rjmp	.+176    	; 0x25a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	56 c0       	rjmp	.+172    	; 0x25a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__vector_108>
     1b4:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__vector_109>
     1b8:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__vector_110>
     1bc:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__vector_111>
     1c0:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__vector_112>
     1c4:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__vector_113>
     1c8:	48 c0       	rjmp	.+144    	; 0x25a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	46 c0       	rjmp	.+140    	; 0x25a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	44 c0       	rjmp	.+136    	; 0x25a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	42 c0       	rjmp	.+132    	; 0x25a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3c c0       	rjmp	.+120    	; 0x25a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3a c0       	rjmp	.+116    	; 0x25a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	36 c0       	rjmp	.+108    	; 0x25a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 35 14 	jmp	0x286a	; 0x286a <__vector_125>
     1f8:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__vector_126>
     1fc:	16 0f       	add	r17, r22
     1fe:	19 0f       	add	r17, r25
     200:	1c 0f       	add	r17, r28
     202:	1f 0f       	add	r17, r31
     204:	22 0f       	add	r18, r18
     206:	25 0f       	add	r18, r21
     208:	28 0f       	add	r18, r24
     20a:	67 16       	cp	r6, r23
     20c:	7a 16       	cp	r7, r26
     20e:	8d 16       	cp	r8, r29
     210:	a0 16       	cp	r10, r16
     212:	b3 16       	cp	r11, r19
     214:	c6 16       	cp	r12, r22
     216:	d9 16       	cp	r13, r25

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e5       	ldi	r29, 0x5F	; 95
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e2 ef       	ldi	r30, 0xF2	; 242
     230:	fe e4       	ldi	r31, 0x4E	; 78
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a0 35       	cpi	r26, 0x50	; 80
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	24 e2       	ldi	r18, 0x24	; 36
     244:	a0 e5       	ldi	r26, 0x50	; 80
     246:	b1 e2       	ldi	r27, 0x21	; 33
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a7 34       	cpi	r26, 0x47	; 71
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 7f 17 	call	0x2efe	; 0x2efe <main>
     256:	0c 94 77 27 	jmp	0x4eee	; 0x4eee <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
     25c:	04 c0       	rjmp	.+8      	; 0x266 <__portable_avr_delay_cycles+0xa>
     25e:	61 50       	subi	r22, 0x01	; 1
     260:	71 09       	sbc	r23, r1
     262:	81 09       	sbc	r24, r1
     264:	91 09       	sbc	r25, r1
     266:	61 15       	cp	r22, r1
     268:	71 05       	cpc	r23, r1
     26a:	81 05       	cpc	r24, r1
     26c:	91 05       	cpc	r25, r1
     26e:	b9 f7       	brne	.-18     	; 0x25e <__portable_avr_delay_cycles+0x2>
     270:	08 95       	ret

00000272 <rtc_get_time>:
     272:	80 e1       	ldi	r24, 0x10	; 16
     274:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     278:	e0 e2       	ldi	r30, 0x20	; 32
     27a:	f4 e0       	ldi	r31, 0x04	; 4
     27c:	81 81       	ldd	r24, Z+1	; 0x01
     27e:	84 fd       	sbrc	r24, 4
     280:	fd cf       	rjmp	.-6      	; 0x27c <rtc_get_time+0xa>
     282:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
     286:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     28a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     28e:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     292:	08 95       	ret

00000294 <rtc_set_callback>:
     294:	80 93 1b 24 	sts	0x241B, r24	; 0x80241b <rtc_data>
     298:	90 93 1c 24 	sts	0x241C, r25	; 0x80241c <rtc_data+0x1>
     29c:	08 95       	ret

0000029e <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
     2aa:	c0 ef       	ldi	r28, 0xF0	; 240
     2ac:	d0 e0       	ldi	r29, 0x00	; 0
     2ae:	88 81       	ld	r24, Y
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	80 ef       	ldi	r24, 0xF0	; 240
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 d5 22 	call	0x45aa	; 0x45aa <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
     2be:	88 81       	ld	r24, Y
     2c0:	84 60       	ori	r24, 0x04	; 4
     2c2:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
     2c4:	69 ee       	ldi	r22, 0xE9	; 233
     2c6:	73 e0       	ldi	r23, 0x03	; 3
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	c7 df       	rcall	.-114    	; 0x25c <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
     2ce:	88 81       	ld	r24, Y
     2d0:	88 61       	ori	r24, 0x18	; 24
     2d2:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
     2d4:	e0 ef       	ldi	r30, 0xF0	; 240
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	83 ff       	sbrs	r24, 3
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
     2de:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     2e2:	e0 e2       	ldi	r30, 0x20	; 32
     2e4:	f4 e0       	ldi	r31, 0x04	; 4
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
     2e8:	80 fd       	sbrc	r24, 0
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
     2ec:	e0 e2       	ldi	r30, 0x20	; 32
     2ee:	f4 e0       	ldi	r31, 0x04	; 4
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
     2f4:	dc 01       	movw	r26, r24
     2f6:	80 87       	std	Z+8, r24	; 0x08
     2f8:	91 87       	std	Z+9, r25	; 0x09
     2fa:	a2 87       	std	Z+10, r26	; 0x0a
     2fc:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
     2fe:	14 82       	std	Z+4, r1	; 0x04
     300:	15 82       	std	Z+5, r1	; 0x05
     302:	16 82       	std	Z+6, r1	; 0x06
     304:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     306:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
     308:	80 fd       	sbrc	r24, 0
     30a:	fd cf       	rjmp	.-6      	; 0x306 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
     30c:	e0 e2       	ldi	r30, 0x20	; 32
     30e:	f4 e0       	ldi	r31, 0x04	; 4
     310:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     316:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
     318:	80 fd       	sbrc	r24, 0
     31a:	fd cf       	rjmp	.-6      	; 0x316 <rtc_init+0x78>
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	0b b6       	in	r0, 0x3b	; 59
     32e:	0f 92       	push	r0
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ef 93       	push	r30
     34a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
     34c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
     350:	c0 91 1b 24 	lds	r28, 0x241B	; 0x80241b <rtc_data>
     354:	d0 91 1c 24 	lds	r29, 0x241C	; 0x80241c <rtc_data+0x1>
     358:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
     35a:	19 f0       	breq	.+6      	; 0x362 <__vector_11+0x40>
     35c:	8a df       	rcall	.-236    	; 0x272 <rtc_get_time>
     35e:	fe 01       	movw	r30, r28
}
     360:	19 95       	eicall
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <twi_init>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void start_twi_onboard()
{
     38c:	e0 e8       	ldi	r30, 0x80	; 128
     38e:	f6 e0       	ldi	r31, 0x06	; 6
     390:	88 e3       	ldi	r24, 0x38	; 56
     392:	80 8b       	std	Z+16, r24	; 0x10
     394:	81 8b       	std	Z+17, r24	; 0x11
     396:	e0 e4       	ldi	r30, 0x40	; 64
     398:	f6 e0       	ldi	r31, 0x06	; 6
     39a:	80 8b       	std	Z+16, r24	; 0x10
     39c:	81 8b       	std	Z+17, r24	; 0x11
     39e:	08 95       	ret

000003a0 <start_twi_lcd>:

/* TWI2 - LCD Port */
void start_twi_lcd()
{
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
     3a0:	e6 e0       	ldi	r30, 0x06	; 6
     3a2:	f0 e2       	ldi	r31, 0x20	; 32
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	84 83       	std	Z+4, r24	; 0x04
     3ae:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
     3b0:	80 87       	std	Z+8, r24	; 0x08
     3b2:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
     3b4:	41 e0       	ldi	r20, 0x01	; 1
     3b6:	bf 01       	movw	r22, r30
     3b8:	80 e8       	ldi	r24, 0x80	; 128
     3ba:	94 e0       	ldi	r25, 0x04	; 4
     3bc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
     3c0:	80 91 d7 22 	lds	r24, 0x22D7	; 0x8022d7 <twi2_m_data>
     3c4:	80 93 df 22 	sts	0x22DF, r24	; 0x8022df <g_twi2_lcd_version>
	
	if (g_twi2_lcd_version >= 0x11) {
     3c8:	81 31       	cpi	r24, 0x11	; 17
     3ca:	88 f0       	brcs	.+34     	; 0x3ee <start_twi_lcd+0x4e>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
     3cc:	e6 e0       	ldi	r30, 0x06	; 6
     3ce:	f0 e2       	ldi	r31, 0x20	; 32
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
     3d4:	80 e1       	ldi	r24, 0x10	; 16
     3d6:	80 93 d7 22 	sts	0x22D7, r24	; 0x8022d7 <twi2_m_data>
		twi2_packet.length = 1;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	80 87       	std	Z+8, r24	; 0x08
     3e0:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	bf 01       	movw	r22, r30
     3e6:	80 e8       	ldi	r24, 0x80	; 128
     3e8:	94 e0       	ldi	r25, 0x04	; 4
     3ea:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
	}
	
#if 1
	/* Show PWM in % when mode 0x20 is selected */
	if (g_twi2_lcd_version == 0x10) {
     3ee:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <g_twi2_lcd_version>
     3f2:	80 31       	cpi	r24, 0x10	; 16
     3f4:	a9 f4       	brne	.+42     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
     3f6:	e6 e0       	ldi	r30, 0x06	; 6
     3f8:	f0 e2       	ldi	r31, 0x20	; 32
     3fa:	84 e8       	ldi	r24, 0x84	; 132
     3fc:	81 83       	std	Z+1, r24	; 0x01
	twi2_m_data[0] = 1;
     3fe:	a7 ed       	ldi	r26, 0xD7	; 215
     400:	b2 e2       	ldi	r27, 0x22	; 34
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	8c 93       	st	X, r24
	twi2_m_data[1] = 128;
     406:	80 e8       	ldi	r24, 0x80	; 128
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	8c 93       	st	X, r24
	twi2_packet.length = 2;
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	80 87       	std	Z+8, r24	; 0x08
     412:	91 87       	std	Z+9, r25	; 0x09
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	bf 01       	movw	r22, r30
     418:	80 e8       	ldi	r24, 0x80	; 128
     41a:	94 e0       	ldi	r25, 0x04	; 4
     41c:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <twi_master_transfer>
     420:	08 95       	ret

00000422 <twi_start>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     422:	60 e4       	ldi	r22, 0x40	; 64
     424:	85 e0       	ldi	r24, 0x05	; 5
     426:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
#else
#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
     42a:	6a e1       	ldi	r22, 0x1A	; 26
     42c:	70 e2       	ldi	r23, 0x20	; 32
     42e:	80 ea       	ldi	r24, 0xA0	; 160
     430:	94 e0       	ldi	r25, 0x04	; 4
     432:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
     436:	e0 ea       	ldi	r30, 0xA0	; 160
     438:	f4 e0       	ldi	r31, 0x04	; 4
     43a:	81 81       	ldd	r24, Z+1	; 0x01
     43c:	88 60       	ori	r24, 0x08	; 8
     43e:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     440:	60 e4       	ldi	r22, 0x40	; 64
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
#else
#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
     448:	61 e1       	ldi	r22, 0x11	; 17
     44a:	70 e2       	ldi	r23, 0x20	; 32
     44c:	80 e8       	ldi	r24, 0x80	; 128
     44e:	94 e0       	ldi	r25, 0x04	; 4
     450:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <twi_master_init>
     454:	e0 e8       	ldi	r30, 0x80	; 128
     456:	f4 e0       	ldi	r31, 0x04	; 4
     458:	81 81       	ldd	r24, Z+1	; 0x01
     45a:	88 60       	ori	r24, 0x08	; 8
#endif
#endif

	/* Start each TWI channel devices */
	start_twi_onboard();
	start_twi_lcd();
     45c:	81 83       	std	Z+1, r24	; 0x01
     45e:	a0 cf       	rjmp	.-192    	; 0x3a0 <start_twi_lcd>
     460:	08 95       	ret

00000462 <task_twi_onboard>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void task_twi_onboard(uint32_t now, uint32_t last)
{
     462:	08 95       	ret

00000464 <task_twi_lcd>:
	
}

/* TWI2 - LCD Port */	
void task_twi_lcd(uint32_t now, uint32_t last)
{
     464:	08 95       	ret

00000466 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     466:	08 95       	ret

00000468 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     468:	81 15       	cp	r24, r1
     46a:	22 e0       	ldi	r18, 0x02	; 2
     46c:	92 07       	cpc	r25, r18
     46e:	69 f4       	brne	.+26     	; 0x48a <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     470:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <adca_enable_count>
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	98 0f       	add	r25, r24
     478:	90 93 51 21 	sts	0x2151, r25	; 0x802151 <adca_enable_count>
     47c:	81 11       	cpse	r24, r1
     47e:	14 c0       	rjmp	.+40     	; 0x4a8 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     480:	62 e0       	ldi	r22, 0x02	; 2
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <sysclk_enable_module>
     488:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     48a:	80 34       	cpi	r24, 0x40	; 64
     48c:	92 40       	sbci	r25, 0x02	; 2
     48e:	61 f4       	brne	.+24     	; 0x4a8 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     490:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <__data_end>
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	98 0f       	add	r25, r24
     498:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <__data_end>
     49c:	81 11       	cpse	r24, r1
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     4a0:	62 e0       	ldi	r22, 0x02	; 2
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <sysclk_enable_module>
     4a8:	08 95       	ret

000004aa <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     4aa:	81 15       	cp	r24, r1
     4ac:	22 e0       	ldi	r18, 0x02	; 2
     4ae:	92 07       	cpc	r25, r18
     4b0:	61 f4       	brne	.+24     	; 0x4ca <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     4b2:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <adca_enable_count>
     4b6:	81 50       	subi	r24, 0x01	; 1
     4b8:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <adca_enable_count>
     4bc:	81 11       	cpse	r24, r1
     4be:	13 c0       	rjmp	.+38     	; 0x4e6 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     4c0:	62 e0       	ldi	r22, 0x02	; 2
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <sysclk_disable_module>
     4c8:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     4ca:	80 34       	cpi	r24, 0x40	; 64
     4cc:	92 40       	sbci	r25, 0x02	; 2
     4ce:	59 f4       	brne	.+22     	; 0x4e6 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     4d0:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <__data_end>
     4d4:	81 50       	subi	r24, 0x01	; 1
     4d6:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <__data_end>
     4da:	81 11       	cpse	r24, r1
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     4de:	62 e0       	ldi	r22, 0x02	; 2
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <sysclk_disable_module>
     4e6:	08 95       	ret

000004e8 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	0b b6       	in	r0, 0x3b	; 59
     4f4:	0f 92       	push	r0
     4f6:	2f 93       	push	r18
     4f8:	3f 93       	push	r19
     4fa:	4f 93       	push	r20
     4fc:	5f 93       	push	r21
     4fe:	6f 93       	push	r22
     500:	7f 93       	push	r23
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
     50a:	ef 93       	push	r30
     50c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     50e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     512:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     516:	e0 91 1f 24 	lds	r30, 0x241F	; 0x80241f <adca_callback>
     51a:	f0 91 20 24 	lds	r31, 0x2420	; 0x802420 <adca_callback+0x1>
     51e:	61 e0       	ldi	r22, 0x01	; 1
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	19 95       	eicall
}
     526:	ff 91       	pop	r31
     528:	ef 91       	pop	r30
     52a:	bf 91       	pop	r27
     52c:	af 91       	pop	r26
     52e:	9f 91       	pop	r25
     530:	8f 91       	pop	r24
     532:	7f 91       	pop	r23
     534:	6f 91       	pop	r22
     536:	5f 91       	pop	r21
     538:	4f 91       	pop	r20
     53a:	3f 91       	pop	r19
     53c:	2f 91       	pop	r18
     53e:	0f 90       	pop	r0
     540:	0b be       	out	0x3b, r0	; 59
     542:	0f 90       	pop	r0
     544:	0f be       	out	0x3f, r0	; 63
     546:	0f 90       	pop	r0
     548:	1f 90       	pop	r1
     54a:	18 95       	reti

0000054c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     54c:	1f 92       	push	r1
     54e:	0f 92       	push	r0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	0f 92       	push	r0
     554:	11 24       	eor	r1, r1
     556:	0b b6       	in	r0, 0x3b	; 59
     558:	0f 92       	push	r0
     55a:	2f 93       	push	r18
     55c:	3f 93       	push	r19
     55e:	4f 93       	push	r20
     560:	5f 93       	push	r21
     562:	6f 93       	push	r22
     564:	7f 93       	push	r23
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
     56a:	af 93       	push	r26
     56c:	bf 93       	push	r27
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     572:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     576:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     57a:	e0 91 1f 24 	lds	r30, 0x241F	; 0x80241f <adca_callback>
     57e:	f0 91 20 24 	lds	r31, 0x2420	; 0x802420 <adca_callback+0x1>
     582:	62 e0       	ldi	r22, 0x02	; 2
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	19 95       	eicall
}
     58a:	ff 91       	pop	r31
     58c:	ef 91       	pop	r30
     58e:	bf 91       	pop	r27
     590:	af 91       	pop	r26
     592:	9f 91       	pop	r25
     594:	8f 91       	pop	r24
     596:	7f 91       	pop	r23
     598:	6f 91       	pop	r22
     59a:	5f 91       	pop	r21
     59c:	4f 91       	pop	r20
     59e:	3f 91       	pop	r19
     5a0:	2f 91       	pop	r18
     5a2:	0f 90       	pop	r0
     5a4:	0b be       	out	0x3b, r0	; 59
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     5b0:	1f 92       	push	r1
     5b2:	0f 92       	push	r0
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	0f 92       	push	r0
     5b8:	11 24       	eor	r1, r1
     5ba:	0b b6       	in	r0, 0x3b	; 59
     5bc:	0f 92       	push	r0
     5be:	2f 93       	push	r18
     5c0:	3f 93       	push	r19
     5c2:	4f 93       	push	r20
     5c4:	5f 93       	push	r21
     5c6:	6f 93       	push	r22
     5c8:	7f 93       	push	r23
     5ca:	8f 93       	push	r24
     5cc:	9f 93       	push	r25
     5ce:	af 93       	push	r26
     5d0:	bf 93       	push	r27
     5d2:	ef 93       	push	r30
     5d4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     5d6:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     5da:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     5de:	e0 91 1f 24 	lds	r30, 0x241F	; 0x80241f <adca_callback>
     5e2:	f0 91 20 24 	lds	r31, 0x2420	; 0x802420 <adca_callback+0x1>
     5e6:	64 e0       	ldi	r22, 0x04	; 4
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	19 95       	eicall
}
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	4f 91       	pop	r20
     602:	3f 91       	pop	r19
     604:	2f 91       	pop	r18
     606:	0f 90       	pop	r0
     608:	0b be       	out	0x3b, r0	; 59
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti

00000614 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	0b b6       	in	r0, 0x3b	; 59
     620:	0f 92       	push	r0
     622:	2f 93       	push	r18
     624:	3f 93       	push	r19
     626:	4f 93       	push	r20
     628:	5f 93       	push	r21
     62a:	6f 93       	push	r22
     62c:	7f 93       	push	r23
     62e:	8f 93       	push	r24
     630:	9f 93       	push	r25
     632:	af 93       	push	r26
     634:	bf 93       	push	r27
     636:	ef 93       	push	r30
     638:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     63a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     63e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     642:	e0 91 1f 24 	lds	r30, 0x241F	; 0x80241f <adca_callback>
     646:	f0 91 20 24 	lds	r31, 0x2420	; 0x802420 <adca_callback+0x1>
     64a:	68 e0       	ldi	r22, 0x08	; 8
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	19 95       	eicall
}
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	bf 91       	pop	r27
     658:	af 91       	pop	r26
     65a:	9f 91       	pop	r25
     65c:	8f 91       	pop	r24
     65e:	7f 91       	pop	r23
     660:	6f 91       	pop	r22
     662:	5f 91       	pop	r21
     664:	4f 91       	pop	r20
     666:	3f 91       	pop	r19
     668:	2f 91       	pop	r18
     66a:	0f 90       	pop	r0
     66c:	0b be       	out	0x3b, r0	; 59
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	0b b6       	in	r0, 0x3b	; 59
     684:	0f 92       	push	r0
     686:	2f 93       	push	r18
     688:	3f 93       	push	r19
     68a:	4f 93       	push	r20
     68c:	5f 93       	push	r21
     68e:	6f 93       	push	r22
     690:	7f 93       	push	r23
     692:	8f 93       	push	r24
     694:	9f 93       	push	r25
     696:	af 93       	push	r26
     698:	bf 93       	push	r27
     69a:	ef 93       	push	r30
     69c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     69e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     6a2:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     6a6:	e0 91 1d 24 	lds	r30, 0x241D	; 0x80241d <adcb_callback>
     6aa:	f0 91 1e 24 	lds	r31, 0x241E	; 0x80241e <adcb_callback+0x1>
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	80 e4       	ldi	r24, 0x40	; 64
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	19 95       	eicall
}
     6b6:	ff 91       	pop	r31
     6b8:	ef 91       	pop	r30
     6ba:	bf 91       	pop	r27
     6bc:	af 91       	pop	r26
     6be:	9f 91       	pop	r25
     6c0:	8f 91       	pop	r24
     6c2:	7f 91       	pop	r23
     6c4:	6f 91       	pop	r22
     6c6:	5f 91       	pop	r21
     6c8:	4f 91       	pop	r20
     6ca:	3f 91       	pop	r19
     6cc:	2f 91       	pop	r18
     6ce:	0f 90       	pop	r0
     6d0:	0b be       	out	0x3b, r0	; 59
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	0b b6       	in	r0, 0x3b	; 59
     6e8:	0f 92       	push	r0
     6ea:	2f 93       	push	r18
     6ec:	3f 93       	push	r19
     6ee:	4f 93       	push	r20
     6f0:	5f 93       	push	r21
     6f2:	6f 93       	push	r22
     6f4:	7f 93       	push	r23
     6f6:	8f 93       	push	r24
     6f8:	9f 93       	push	r25
     6fa:	af 93       	push	r26
     6fc:	bf 93       	push	r27
     6fe:	ef 93       	push	r30
     700:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     702:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     706:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     70a:	e0 91 1d 24 	lds	r30, 0x241D	; 0x80241d <adcb_callback>
     70e:	f0 91 1e 24 	lds	r31, 0x241E	; 0x80241e <adcb_callback+0x1>
     712:	62 e0       	ldi	r22, 0x02	; 2
     714:	80 e4       	ldi	r24, 0x40	; 64
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	19 95       	eicall
}
     71a:	ff 91       	pop	r31
     71c:	ef 91       	pop	r30
     71e:	bf 91       	pop	r27
     720:	af 91       	pop	r26
     722:	9f 91       	pop	r25
     724:	8f 91       	pop	r24
     726:	7f 91       	pop	r23
     728:	6f 91       	pop	r22
     72a:	5f 91       	pop	r21
     72c:	4f 91       	pop	r20
     72e:	3f 91       	pop	r19
     730:	2f 91       	pop	r18
     732:	0f 90       	pop	r0
     734:	0b be       	out	0x3b, r0	; 59
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	0b b6       	in	r0, 0x3b	; 59
     74c:	0f 92       	push	r0
     74e:	2f 93       	push	r18
     750:	3f 93       	push	r19
     752:	4f 93       	push	r20
     754:	5f 93       	push	r21
     756:	6f 93       	push	r22
     758:	7f 93       	push	r23
     75a:	8f 93       	push	r24
     75c:	9f 93       	push	r25
     75e:	af 93       	push	r26
     760:	bf 93       	push	r27
     762:	ef 93       	push	r30
     764:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     766:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     76a:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     76e:	e0 91 1d 24 	lds	r30, 0x241D	; 0x80241d <adcb_callback>
     772:	f0 91 1e 24 	lds	r31, 0x241E	; 0x80241e <adcb_callback+0x1>
     776:	64 e0       	ldi	r22, 0x04	; 4
     778:	80 e4       	ldi	r24, 0x40	; 64
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	19 95       	eicall
}
     77e:	ff 91       	pop	r31
     780:	ef 91       	pop	r30
     782:	bf 91       	pop	r27
     784:	af 91       	pop	r26
     786:	9f 91       	pop	r25
     788:	8f 91       	pop	r24
     78a:	7f 91       	pop	r23
     78c:	6f 91       	pop	r22
     78e:	5f 91       	pop	r21
     790:	4f 91       	pop	r20
     792:	3f 91       	pop	r19
     794:	2f 91       	pop	r18
     796:	0f 90       	pop	r0
     798:	0b be       	out	0x3b, r0	; 59
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	0b b6       	in	r0, 0x3b	; 59
     7b0:	0f 92       	push	r0
     7b2:	2f 93       	push	r18
     7b4:	3f 93       	push	r19
     7b6:	4f 93       	push	r20
     7b8:	5f 93       	push	r21
     7ba:	6f 93       	push	r22
     7bc:	7f 93       	push	r23
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
     7c2:	af 93       	push	r26
     7c4:	bf 93       	push	r27
     7c6:	ef 93       	push	r30
     7c8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     7ca:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     7ce:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     7d2:	e0 91 1d 24 	lds	r30, 0x241D	; 0x80241d <adcb_callback>
     7d6:	f0 91 1e 24 	lds	r31, 0x241E	; 0x80241e <adcb_callback+0x1>
     7da:	68 e0       	ldi	r22, 0x08	; 8
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	19 95       	eicall
}
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0b be       	out	0x3b, r0	; 59
     7fe:	0f 90       	pop	r0
     800:	0f be       	out	0x3f, r0	; 63
     802:	0f 90       	pop	r0
     804:	1f 90       	pop	r1
     806:	18 95       	reti

00000808 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	1f 92       	push	r1
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	8c 01       	movw	r16, r24
     822:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     824:	81 15       	cp	r24, r1
     826:	22 e0       	ldi	r18, 0x02	; 2
     828:	92 07       	cpc	r25, r18
     82a:	81 f4       	brne	.+32     	; 0x84c <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     82c:	61 e2       	ldi	r22, 0x21	; 33
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     836:	c8 2e       	mov	r12, r24
     838:	d1 2c       	mov	r13, r1
     83a:	60 e2       	ldi	r22, 0x20	; 32
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     844:	dc 2c       	mov	r13, r12
     846:	cc 24       	eor	r12, r12
     848:	c8 2a       	or	r12, r24
     84a:	12 c0       	rjmp	.+36     	; 0x870 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     84c:	80 34       	cpi	r24, 0x40	; 64
     84e:	92 40       	sbci	r25, 0x02	; 2
     850:	d1 f5       	brne	.+116    	; 0x8c6 <adc_write_configuration+0xbe>
     852:	65 e2       	ldi	r22, 0x25	; 37
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     85c:	c8 2e       	mov	r12, r24
     85e:	d1 2c       	mov	r13, r1
     860:	64 e2       	ldi	r22, 0x24	; 36
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     86a:	dc 2c       	mov	r13, r12
     86c:	cc 24       	eor	r12, r12
     86e:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     870:	8f b7       	in	r24, 0x3f	; 63
     872:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     874:	f8 94       	cli
	return flags;
     876:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     878:	c8 01       	movw	r24, r16
     87a:	f6 dd       	rcall	.-1044   	; 0x468 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     87c:	f8 01       	movw	r30, r16
     87e:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	90 83       	st	Z, r25
	adc->CAL = cal;
     884:	c4 86       	std	Z+12, r12	; 0x0c
     886:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     888:	f7 01       	movw	r30, r14
     88a:	25 81       	ldd	r18, Z+5	; 0x05
     88c:	36 81       	ldd	r19, Z+6	; 0x06
     88e:	f8 01       	movw	r30, r16
     890:	20 8f       	std	Z+24, r18	; 0x18
     892:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     894:	f7 01       	movw	r30, r14
     896:	92 81       	ldd	r25, Z+2	; 0x02
     898:	f8 01       	movw	r30, r16
     89a:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     89c:	f7 01       	movw	r30, r14
     89e:	94 81       	ldd	r25, Z+4	; 0x04
     8a0:	f8 01       	movw	r30, r16
     8a2:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     8a4:	f7 01       	movw	r30, r14
     8a6:	93 81       	ldd	r25, Z+3	; 0x03
     8a8:	f8 01       	movw	r30, r16
     8aa:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     8ac:	f7 01       	movw	r30, r14
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
     8b0:	f8 01       	movw	r30, r16
     8b2:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     8b4:	81 70       	andi	r24, 0x01	; 1
     8b6:	f7 01       	movw	r30, r14
     8b8:	90 81       	ld	r25, Z
     8ba:	89 2b       	or	r24, r25
     8bc:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     8be:	80 83       	st	Z, r24
     8c0:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8c2:	f3 dd       	rcall	.-1050   	; 0x4aa <adc_disable_clock>

	cpu_irq_restore(flags);
}
     8c4:	bf be       	out	0x3f, r11	; 63
     8c6:	0f 90       	pop	r0
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	df 90       	pop	r13
     8d6:	cf 90       	pop	r12
     8d8:	bf 90       	pop	r11
     8da:	08 95       	ret

000008dc <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	1f 92       	push	r1
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	8c 01       	movw	r16, r24
     8f2:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8f4:	8f b7       	in	r24, 0x3f	; 63
     8f6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     8f8:	f8 94       	cli
	return flags;
     8fa:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     8fc:	c8 01       	movw	r24, r16
     8fe:	b4 dd       	rcall	.-1176   	; 0x468 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     900:	f8 01       	movw	r30, r16
     902:	80 81       	ld	r24, Z
     904:	80 7c       	andi	r24, 0xC0	; 192
     906:	f7 01       	movw	r30, r14
     908:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     90a:	f8 01       	movw	r30, r16
     90c:	80 8d       	ldd	r24, Z+24	; 0x18
     90e:	91 8d       	ldd	r25, Z+25	; 0x19
     910:	f7 01       	movw	r30, r14
     912:	85 83       	std	Z+5, r24	; 0x05
     914:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     916:	f8 01       	movw	r30, r16
     918:	82 81       	ldd	r24, Z+2	; 0x02
     91a:	f7 01       	movw	r30, r14
     91c:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     91e:	f8 01       	movw	r30, r16
     920:	84 81       	ldd	r24, Z+4	; 0x04
     922:	f7 01       	movw	r30, r14
     924:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     926:	f8 01       	movw	r30, r16
     928:	83 81       	ldd	r24, Z+3	; 0x03
     92a:	f7 01       	movw	r30, r14
     92c:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     92e:	f8 01       	movw	r30, r16
     930:	81 81       	ldd	r24, Z+1	; 0x01
     932:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     934:	81 83       	std	Z+1, r24	; 0x01
     936:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     938:	b8 dd       	rcall	.-1168   	; 0x4aa <adc_disable_clock>

	cpu_irq_restore(flags);
}
     93a:	df be       	out	0x3f, r13	; 63
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	08 95       	ret

0000094e <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     94e:	af 92       	push	r10
     950:	bf 92       	push	r11
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	1f 92       	push	r1
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	6c 01       	movw	r12, r24
     96a:	b6 2e       	mov	r11, r22
     96c:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     96e:	86 2f       	mov	r24, r22
     970:	83 70       	andi	r24, 0x03	; 3
     972:	29 f4       	brne	.+10     	; 0x97e <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     974:	96 2f       	mov	r25, r22
     976:	96 95       	lsr	r25
     978:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	02 c0       	rjmp	.+4      	; 0x982 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     97e:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     980:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     982:	90 ff       	sbrs	r25, 0
		index++;
     984:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     986:	86 01       	movw	r16, r12
     988:	00 5e       	subi	r16, 0xE0	; 224
     98a:	1f 4f       	sbci	r17, 0xFF	; 255
     98c:	98 e0       	ldi	r25, 0x08	; 8
     98e:	89 9f       	mul	r24, r25
     990:	00 0d       	add	r16, r0
     992:	11 1d       	adc	r17, r1
     994:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     996:	8f b7       	in	r24, 0x3f	; 63
     998:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     99a:	f8 94       	cli
	return flags;
     99c:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     99e:	c6 01       	movw	r24, r12
     9a0:	63 dd       	rcall	.-1338   	; 0x468 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     9a2:	f7 01       	movw	r30, r14
     9a4:	80 81       	ld	r24, Z
     9a6:	f8 01       	movw	r30, r16
     9a8:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     9aa:	f7 01       	movw	r30, r14
     9ac:	82 81       	ldd	r24, Z+2	; 0x02
     9ae:	f8 01       	movw	r30, r16
     9b0:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     9b2:	f7 01       	movw	r30, r14
     9b4:	81 81       	ldd	r24, Z+1	; 0x01
     9b6:	f8 01       	movw	r30, r16
     9b8:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     9ba:	b0 fe       	sbrs	r11, 0
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     9be:	f7 01       	movw	r30, r14
     9c0:	83 81       	ldd	r24, Z+3	; 0x03
     9c2:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     9c4:	86 83       	std	Z+6, r24	; 0x06
     9c6:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9c8:	70 dd       	rcall	.-1312   	; 0x4aa <adc_disable_clock>

	cpu_irq_restore(flags);
}
     9ca:	af be       	out	0x3f, r10	; 63
     9cc:	0f 90       	pop	r0
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	bf 90       	pop	r11
     9e0:	af 90       	pop	r10
     9e2:	08 95       	ret

000009e4 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     9e4:	af 92       	push	r10
     9e6:	bf 92       	push	r11
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	1f 92       	push	r1
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	6c 01       	movw	r12, r24
     a00:	b6 2e       	mov	r11, r22
     a02:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     a04:	86 2f       	mov	r24, r22
     a06:	83 70       	andi	r24, 0x03	; 3
     a08:	29 f4       	brne	.+10     	; 0xa14 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     a0a:	96 2f       	mov	r25, r22
     a0c:	96 95       	lsr	r25
     a0e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     a14:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     a16:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     a18:	90 ff       	sbrs	r25, 0
		index++;
     a1a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     a1c:	86 01       	movw	r16, r12
     a1e:	00 5e       	subi	r16, 0xE0	; 224
     a20:	1f 4f       	sbci	r17, 0xFF	; 255
     a22:	98 e0       	ldi	r25, 0x08	; 8
     a24:	89 9f       	mul	r24, r25
     a26:	00 0d       	add	r16, r0
     a28:	11 1d       	adc	r17, r1
     a2a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a2c:	8f b7       	in	r24, 0x3f	; 63
     a2e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     a30:	f8 94       	cli
	return flags;
     a32:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     a34:	c6 01       	movw	r24, r12
     a36:	18 dd       	rcall	.-1488   	; 0x468 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     a38:	f8 01       	movw	r30, r16
     a3a:	80 81       	ld	r24, Z
     a3c:	f7 01       	movw	r30, r14
     a3e:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     a40:	f8 01       	movw	r30, r16
     a42:	82 81       	ldd	r24, Z+2	; 0x02
     a44:	f7 01       	movw	r30, r14
     a46:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     a48:	f8 01       	movw	r30, r16
     a4a:	81 81       	ldd	r24, Z+1	; 0x01
     a4c:	f7 01       	movw	r30, r14
     a4e:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     a50:	b0 fe       	sbrs	r11, 0
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     a54:	f8 01       	movw	r30, r16
     a56:	86 81       	ldd	r24, Z+6	; 0x06
     a58:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     a5a:	83 83       	std	Z+3, r24	; 0x03
     a5c:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a5e:	25 dd       	rcall	.-1462   	; 0x4aa <adc_disable_clock>

	cpu_irq_restore(flags);
}
     a60:	af be       	out	0x3f, r10	; 63
     a62:	0f 90       	pop	r0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	bf 90       	pop	r11
     a76:	af 90       	pop	r10
     a78:	08 95       	ret

00000a7a <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
     a7a:	80 32       	cpi	r24, 0x20	; 32
     a7c:	93 40       	sbci	r25, 0x03	; 3
     a7e:	61 f4       	brne	.+24     	; 0xa98 <dac_enable_clock+0x1e>
     a80:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <dacb_enable_count>
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	98 0f       	add	r25, r24
     a88:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <dacb_enable_count>
     a8c:	81 11       	cpse	r24, r1
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <dac_enable_clock+0x1e>
     a90:	64 e0       	ldi	r22, 0x04	; 4
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <sysclk_enable_module>
     a98:	08 95       	ret

00000a9a <dac_disable_clock>:
     a9a:	80 32       	cpi	r24, 0x20	; 32
     a9c:	93 40       	sbci	r25, 0x03	; 3
     a9e:	59 f4       	brne	.+22     	; 0xab6 <dac_disable_clock+0x1c>
     aa0:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <dacb_enable_count>
     aa4:	81 50       	subi	r24, 0x01	; 1
     aa6:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <dacb_enable_count>
     aaa:	81 11       	cpse	r24, r1
     aac:	04 c0       	rjmp	.+8      	; 0xab6 <dac_disable_clock+0x1c>
     aae:	64 e0       	ldi	r22, 0x04	; 4
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <sysclk_disable_module>
     ab6:	08 95       	ret

00000ab8 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
     ab8:	9f 92       	push	r9
     aba:	af 92       	push	r10
     abc:	bf 92       	push	r11
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	1f 92       	push	r1
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
     ad4:	80 32       	cpi	r24, 0x20	; 32
     ad6:	23 e0       	ldi	r18, 0x03	; 3
     ad8:	92 07       	cpc	r25, r18
     ada:	09 f0       	breq	.+2      	; 0xade <dac_write_configuration+0x26>
     adc:	3c c0       	rjmp	.+120    	; 0xb56 <dac_write_configuration+0x9e>
     ade:	7b 01       	movw	r14, r22
     ae0:	8c 01       	movw	r16, r24
     ae2:	63 e3       	ldi	r22, 0x33	; 51
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
     aec:	98 2e       	mov	r9, r24
     aee:	62 e3       	ldi	r22, 0x32	; 50
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
     af8:	a8 2e       	mov	r10, r24
     afa:	67 e3       	ldi	r22, 0x37	; 55
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
     b04:	b8 2e       	mov	r11, r24
     b06:	66 e3       	ldi	r22, 0x36	; 54
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
     b10:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b12:	8f b7       	in	r24, 0x3f	; 63
     b14:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b16:	f8 94       	cli
	return flags;
     b18:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     b1a:	c8 01       	movw	r24, r16
     b1c:	ae df       	rcall	.-164    	; 0xa7a <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
     b1e:	f8 01       	movw	r30, r16
     b20:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
     b22:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
     b24:	f7 01       	movw	r30, r14
     b26:	91 81       	ldd	r25, Z+1	; 0x01
     b28:	f8 01       	movw	r30, r16
     b2a:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
     b2c:	f7 01       	movw	r30, r14
     b2e:	92 81       	ldd	r25, Z+2	; 0x02
     b30:	f8 01       	movw	r30, r16
     b32:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
     b34:	f7 01       	movw	r30, r14
     b36:	93 81       	ldd	r25, Z+3	; 0x03
     b38:	f8 01       	movw	r30, r16
     b3a:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
     b3c:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
     b3e:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
     b40:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
     b42:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
     b44:	81 70       	andi	r24, 0x01	; 1
     b46:	f7 01       	movw	r30, r14
     b48:	90 81       	ld	r25, Z
     b4a:	89 2b       	or	r24, r25
     b4c:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
     b4e:	80 83       	st	Z, r24
     b50:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b52:	a3 df       	rcall	.-186    	; 0xa9a <dac_disable_clock>
	cpu_irq_restore(flags);
}
     b54:	df be       	out	0x3f, r13	; 63
     b56:	0f 90       	pop	r0
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	bf 90       	pop	r11
     b6a:	af 90       	pop	r10
     b6c:	9f 90       	pop	r9
     b6e:	08 95       	ret

00000b70 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
     b70:	df 92       	push	r13
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	1f 92       	push	r1
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	8c 01       	movw	r16, r24
     b86:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b88:	8f b7       	in	r24, 0x3f	; 63
     b8a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b8c:	f8 94       	cli
	return flags;
     b8e:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     b90:	c8 01       	movw	r24, r16
     b92:	73 df       	rcall	.-282    	; 0xa7a <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
     b94:	f8 01       	movw	r30, r16
     b96:	80 81       	ld	r24, Z
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	f7 01       	movw	r30, r14
     b9c:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
     b9e:	f8 01       	movw	r30, r16
     ba0:	81 81       	ldd	r24, Z+1	; 0x01
     ba2:	f7 01       	movw	r30, r14
     ba4:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
     ba6:	f8 01       	movw	r30, r16
     ba8:	82 81       	ldd	r24, Z+2	; 0x02
     baa:	f7 01       	movw	r30, r14
     bac:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
     bae:	f8 01       	movw	r30, r16
     bb0:	83 81       	ldd	r24, Z+3	; 0x03
     bb2:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
     bb4:	83 83       	std	Z+3, r24	; 0x03
     bb6:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bb8:	70 df       	rcall	.-288    	; 0xa9a <dac_disable_clock>
	cpu_irq_restore(flags);
}
     bba:	df be       	out	0x3f, r13	; 63
     bbc:	0f 90       	pop	r0
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	df 90       	pop	r13
     bcc:	08 95       	ret

00000bce <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     bce:	1f 92       	push	r1
     bd0:	0f 92       	push	r0
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	0f 92       	push	r0
     bd6:	11 24       	eor	r1, r1
     bd8:	0b b6       	in	r0, 0x3b	; 59
     bda:	0f 92       	push	r0
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	ef 93       	push	r30
     bf2:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     bf4:	e0 91 99 21 	lds	r30, 0x2199	; 0x802199 <tc_tcc0_ovf_callback>
     bf8:	f0 91 9a 21 	lds	r31, 0x219A	; 0x80219a <tc_tcc0_ovf_callback+0x1>
     bfc:	30 97       	sbiw	r30, 0x00	; 0
     bfe:	09 f0       	breq	.+2      	; 0xc02 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     c00:	19 95       	eicall
	}
}
     c02:	ff 91       	pop	r31
     c04:	ef 91       	pop	r30
     c06:	bf 91       	pop	r27
     c08:	af 91       	pop	r26
     c0a:	9f 91       	pop	r25
     c0c:	8f 91       	pop	r24
     c0e:	7f 91       	pop	r23
     c10:	6f 91       	pop	r22
     c12:	5f 91       	pop	r21
     c14:	4f 91       	pop	r20
     c16:	3f 91       	pop	r19
     c18:	2f 91       	pop	r18
     c1a:	0f 90       	pop	r0
     c1c:	0b be       	out	0x3b, r0	; 59
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	0f 90       	pop	r0
     c24:	1f 90       	pop	r1
     c26:	18 95       	reti

00000c28 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	0b b6       	in	r0, 0x3b	; 59
     c34:	0f 92       	push	r0
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     c4e:	e0 91 97 21 	lds	r30, 0x2197	; 0x802197 <tc_tcc0_err_callback>
     c52:	f0 91 98 21 	lds	r31, 0x2198	; 0x802198 <tc_tcc0_err_callback+0x1>
     c56:	30 97       	sbiw	r30, 0x00	; 0
     c58:	09 f0       	breq	.+2      	; 0xc5c <__vector_15+0x34>
		tc_tcc0_err_callback();
     c5a:	19 95       	eicall
	}
}
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0b be       	out	0x3b, r0	; 59
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	0b b6       	in	r0, 0x3b	; 59
     c8e:	0f 92       	push	r0
     c90:	2f 93       	push	r18
     c92:	3f 93       	push	r19
     c94:	4f 93       	push	r20
     c96:	5f 93       	push	r21
     c98:	6f 93       	push	r22
     c9a:	7f 93       	push	r23
     c9c:	8f 93       	push	r24
     c9e:	9f 93       	push	r25
     ca0:	af 93       	push	r26
     ca2:	bf 93       	push	r27
     ca4:	ef 93       	push	r30
     ca6:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     ca8:	e0 91 95 21 	lds	r30, 0x2195	; 0x802195 <tc_tcc0_cca_callback>
     cac:	f0 91 96 21 	lds	r31, 0x2196	; 0x802196 <tc_tcc0_cca_callback+0x1>
     cb0:	30 97       	sbiw	r30, 0x00	; 0
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     cb4:	19 95       	eicall
	}
}
     cb6:	ff 91       	pop	r31
     cb8:	ef 91       	pop	r30
     cba:	bf 91       	pop	r27
     cbc:	af 91       	pop	r26
     cbe:	9f 91       	pop	r25
     cc0:	8f 91       	pop	r24
     cc2:	7f 91       	pop	r23
     cc4:	6f 91       	pop	r22
     cc6:	5f 91       	pop	r21
     cc8:	4f 91       	pop	r20
     cca:	3f 91       	pop	r19
     ccc:	2f 91       	pop	r18
     cce:	0f 90       	pop	r0
     cd0:	0b be       	out	0x3b, r0	; 59
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	0b b6       	in	r0, 0x3b	; 59
     ce8:	0f 92       	push	r0
     cea:	2f 93       	push	r18
     cec:	3f 93       	push	r19
     cee:	4f 93       	push	r20
     cf0:	5f 93       	push	r21
     cf2:	6f 93       	push	r22
     cf4:	7f 93       	push	r23
     cf6:	8f 93       	push	r24
     cf8:	9f 93       	push	r25
     cfa:	af 93       	push	r26
     cfc:	bf 93       	push	r27
     cfe:	ef 93       	push	r30
     d00:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     d02:	e0 91 93 21 	lds	r30, 0x2193	; 0x802193 <tc_tcc0_ccb_callback>
     d06:	f0 91 94 21 	lds	r31, 0x2194	; 0x802194 <tc_tcc0_ccb_callback+0x1>
     d0a:	30 97       	sbiw	r30, 0x00	; 0
     d0c:	09 f0       	breq	.+2      	; 0xd10 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     d0e:	19 95       	eicall
	}
}
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	bf 91       	pop	r27
     d16:	af 91       	pop	r26
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	7f 91       	pop	r23
     d1e:	6f 91       	pop	r22
     d20:	5f 91       	pop	r21
     d22:	4f 91       	pop	r20
     d24:	3f 91       	pop	r19
     d26:	2f 91       	pop	r18
     d28:	0f 90       	pop	r0
     d2a:	0b be       	out	0x3b, r0	; 59
     d2c:	0f 90       	pop	r0
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	0f 90       	pop	r0
     d32:	1f 90       	pop	r1
     d34:	18 95       	reti

00000d36 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     d36:	1f 92       	push	r1
     d38:	0f 92       	push	r0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	0b b6       	in	r0, 0x3b	; 59
     d42:	0f 92       	push	r0
     d44:	2f 93       	push	r18
     d46:	3f 93       	push	r19
     d48:	4f 93       	push	r20
     d4a:	5f 93       	push	r21
     d4c:	6f 93       	push	r22
     d4e:	7f 93       	push	r23
     d50:	8f 93       	push	r24
     d52:	9f 93       	push	r25
     d54:	af 93       	push	r26
     d56:	bf 93       	push	r27
     d58:	ef 93       	push	r30
     d5a:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     d5c:	e0 91 91 21 	lds	r30, 0x2191	; 0x802191 <tc_tcc0_ccc_callback>
     d60:	f0 91 92 21 	lds	r31, 0x2192	; 0x802192 <tc_tcc0_ccc_callback+0x1>
     d64:	30 97       	sbiw	r30, 0x00	; 0
     d66:	09 f0       	breq	.+2      	; 0xd6a <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     d68:	19 95       	eicall
	}
}
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	0b be       	out	0x3b, r0	; 59
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	0f 90       	pop	r0
     d8c:	1f 90       	pop	r1
     d8e:	18 95       	reti

00000d90 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	0b b6       	in	r0, 0x3b	; 59
     d9c:	0f 92       	push	r0
     d9e:	2f 93       	push	r18
     da0:	3f 93       	push	r19
     da2:	4f 93       	push	r20
     da4:	5f 93       	push	r21
     da6:	6f 93       	push	r22
     da8:	7f 93       	push	r23
     daa:	8f 93       	push	r24
     dac:	9f 93       	push	r25
     dae:	af 93       	push	r26
     db0:	bf 93       	push	r27
     db2:	ef 93       	push	r30
     db4:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     db6:	e0 91 8f 21 	lds	r30, 0x218F	; 0x80218f <tc_tcc0_ccd_callback>
     dba:	f0 91 90 21 	lds	r31, 0x2190	; 0x802190 <tc_tcc0_ccd_callback+0x1>
     dbe:	30 97       	sbiw	r30, 0x00	; 0
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     dc2:	19 95       	eicall
	}
}
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0b be       	out	0x3b, r0	; 59
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	0b b6       	in	r0, 0x3b	; 59
     df6:	0f 92       	push	r0
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	4f 93       	push	r20
     dfe:	5f 93       	push	r21
     e00:	6f 93       	push	r22
     e02:	7f 93       	push	r23
     e04:	8f 93       	push	r24
     e06:	9f 93       	push	r25
     e08:	af 93       	push	r26
     e0a:	bf 93       	push	r27
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     e10:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <tc_tcc1_ovf_callback>
     e14:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <tc_tcc1_ovf_callback+0x1>
     e18:	30 97       	sbiw	r30, 0x00	; 0
     e1a:	09 f0       	breq	.+2      	; 0xe1e <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     e1c:	19 95       	eicall
	}
}
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0b be       	out	0x3b, r0	; 59
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	0b b6       	in	r0, 0x3b	; 59
     e50:	0f 92       	push	r0
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     e6a:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <tc_tcc1_err_callback>
     e6e:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <tc_tcc1_err_callback+0x1>
     e72:	30 97       	sbiw	r30, 0x00	; 0
     e74:	09 f0       	breq	.+2      	; 0xe78 <__vector_21+0x34>
		tc_tcc1_err_callback();
     e76:	19 95       	eicall
	}
}
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0b be       	out	0x3b, r0	; 59
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0
     e9a:	1f 90       	pop	r1
     e9c:	18 95       	reti

00000e9e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	0b b6       	in	r0, 0x3b	; 59
     eaa:	0f 92       	push	r0
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     ec4:	e0 91 89 21 	lds	r30, 0x2189	; 0x802189 <tc_tcc1_cca_callback>
     ec8:	f0 91 8a 21 	lds	r31, 0x218A	; 0x80218a <tc_tcc1_cca_callback+0x1>
     ecc:	30 97       	sbiw	r30, 0x00	; 0
     ece:	09 f0       	breq	.+2      	; 0xed2 <__vector_22+0x34>
		tc_tcc1_cca_callback();
     ed0:	19 95       	eicall
	}
}
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0b be       	out	0x3b, r0	; 59
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	0b b6       	in	r0, 0x3b	; 59
     f04:	0f 92       	push	r0
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     f1e:	e0 91 87 21 	lds	r30, 0x2187	; 0x802187 <tc_tcc1_ccb_callback>
     f22:	f0 91 88 21 	lds	r31, 0x2188	; 0x802188 <tc_tcc1_ccb_callback+0x1>
     f26:	30 97       	sbiw	r30, 0x00	; 0
     f28:	09 f0       	breq	.+2      	; 0xf2c <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     f2a:	19 95       	eicall
	}
}
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0b be       	out	0x3b, r0	; 59
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	0b b6       	in	r0, 0x3b	; 59
     f5e:	0f 92       	push	r0
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     f78:	e0 91 85 21 	lds	r30, 0x2185	; 0x802185 <tc_tcd0_ovf_callback>
     f7c:	f0 91 86 21 	lds	r31, 0x2186	; 0x802186 <tc_tcd0_ovf_callback+0x1>
     f80:	30 97       	sbiw	r30, 0x00	; 0
     f82:	09 f0       	breq	.+2      	; 0xf86 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     f84:	19 95       	eicall
	}
}
     f86:	ff 91       	pop	r31
     f88:	ef 91       	pop	r30
     f8a:	bf 91       	pop	r27
     f8c:	af 91       	pop	r26
     f8e:	9f 91       	pop	r25
     f90:	8f 91       	pop	r24
     f92:	7f 91       	pop	r23
     f94:	6f 91       	pop	r22
     f96:	5f 91       	pop	r21
     f98:	4f 91       	pop	r20
     f9a:	3f 91       	pop	r19
     f9c:	2f 91       	pop	r18
     f9e:	0f 90       	pop	r0
     fa0:	0b be       	out	0x3b, r0	; 59
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	0b b6       	in	r0, 0x3b	; 59
     fb8:	0f 92       	push	r0
     fba:	2f 93       	push	r18
     fbc:	3f 93       	push	r19
     fbe:	4f 93       	push	r20
     fc0:	5f 93       	push	r21
     fc2:	6f 93       	push	r22
     fc4:	7f 93       	push	r23
     fc6:	8f 93       	push	r24
     fc8:	9f 93       	push	r25
     fca:	af 93       	push	r26
     fcc:	bf 93       	push	r27
     fce:	ef 93       	push	r30
     fd0:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     fd2:	e0 91 83 21 	lds	r30, 0x2183	; 0x802183 <tc_tcd0_err_callback>
     fd6:	f0 91 84 21 	lds	r31, 0x2184	; 0x802184 <tc_tcd0_err_callback+0x1>
     fda:	30 97       	sbiw	r30, 0x00	; 0
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <__vector_78+0x34>
		tc_tcd0_err_callback();
     fde:	19 95       	eicall
	}
}
     fe0:	ff 91       	pop	r31
     fe2:	ef 91       	pop	r30
     fe4:	bf 91       	pop	r27
     fe6:	af 91       	pop	r26
     fe8:	9f 91       	pop	r25
     fea:	8f 91       	pop	r24
     fec:	7f 91       	pop	r23
     fee:	6f 91       	pop	r22
     ff0:	5f 91       	pop	r21
     ff2:	4f 91       	pop	r20
     ff4:	3f 91       	pop	r19
     ff6:	2f 91       	pop	r18
     ff8:	0f 90       	pop	r0
     ffa:	0b be       	out	0x3b, r0	; 59
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
    1010:	0b b6       	in	r0, 0x3b	; 59
    1012:	0f 92       	push	r0
    1014:	2f 93       	push	r18
    1016:	3f 93       	push	r19
    1018:	4f 93       	push	r20
    101a:	5f 93       	push	r21
    101c:	6f 93       	push	r22
    101e:	7f 93       	push	r23
    1020:	8f 93       	push	r24
    1022:	9f 93       	push	r25
    1024:	af 93       	push	r26
    1026:	bf 93       	push	r27
    1028:	ef 93       	push	r30
    102a:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    102c:	e0 91 81 21 	lds	r30, 0x2181	; 0x802181 <tc_tcd0_cca_callback>
    1030:	f0 91 82 21 	lds	r31, 0x2182	; 0x802182 <tc_tcd0_cca_callback+0x1>
    1034:	30 97       	sbiw	r30, 0x00	; 0
    1036:	09 f0       	breq	.+2      	; 0x103a <__vector_79+0x34>
		tc_tcd0_cca_callback();
    1038:	19 95       	eicall
	}
}
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0b be       	out	0x3b, r0	; 59
    1056:	0f 90       	pop	r0
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	0f 90       	pop	r0
    105c:	1f 90       	pop	r1
    105e:	18 95       	reti

00001060 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1060:	1f 92       	push	r1
    1062:	0f 92       	push	r0
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	0f 92       	push	r0
    1068:	11 24       	eor	r1, r1
    106a:	0b b6       	in	r0, 0x3b	; 59
    106c:	0f 92       	push	r0
    106e:	2f 93       	push	r18
    1070:	3f 93       	push	r19
    1072:	4f 93       	push	r20
    1074:	5f 93       	push	r21
    1076:	6f 93       	push	r22
    1078:	7f 93       	push	r23
    107a:	8f 93       	push	r24
    107c:	9f 93       	push	r25
    107e:	af 93       	push	r26
    1080:	bf 93       	push	r27
    1082:	ef 93       	push	r30
    1084:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1086:	e0 91 7f 21 	lds	r30, 0x217F	; 0x80217f <tc_tcd0_ccb_callback>
    108a:	f0 91 80 21 	lds	r31, 0x2180	; 0x802180 <tc_tcd0_ccb_callback+0x1>
    108e:	30 97       	sbiw	r30, 0x00	; 0
    1090:	09 f0       	breq	.+2      	; 0x1094 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    1092:	19 95       	eicall
	}
}
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	bf 91       	pop	r27
    109a:	af 91       	pop	r26
    109c:	9f 91       	pop	r25
    109e:	8f 91       	pop	r24
    10a0:	7f 91       	pop	r23
    10a2:	6f 91       	pop	r22
    10a4:	5f 91       	pop	r21
    10a6:	4f 91       	pop	r20
    10a8:	3f 91       	pop	r19
    10aa:	2f 91       	pop	r18
    10ac:	0f 90       	pop	r0
    10ae:	0b be       	out	0x3b, r0	; 59
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	0f 90       	pop	r0
    10b6:	1f 90       	pop	r1
    10b8:	18 95       	reti

000010ba <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    10ba:	1f 92       	push	r1
    10bc:	0f 92       	push	r0
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	0f 92       	push	r0
    10c2:	11 24       	eor	r1, r1
    10c4:	0b b6       	in	r0, 0x3b	; 59
    10c6:	0f 92       	push	r0
    10c8:	2f 93       	push	r18
    10ca:	3f 93       	push	r19
    10cc:	4f 93       	push	r20
    10ce:	5f 93       	push	r21
    10d0:	6f 93       	push	r22
    10d2:	7f 93       	push	r23
    10d4:	8f 93       	push	r24
    10d6:	9f 93       	push	r25
    10d8:	af 93       	push	r26
    10da:	bf 93       	push	r27
    10dc:	ef 93       	push	r30
    10de:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    10e0:	e0 91 7d 21 	lds	r30, 0x217D	; 0x80217d <tc_tcd0_ccc_callback>
    10e4:	f0 91 7e 21 	lds	r31, 0x217E	; 0x80217e <tc_tcd0_ccc_callback+0x1>
    10e8:	30 97       	sbiw	r30, 0x00	; 0
    10ea:	09 f0       	breq	.+2      	; 0x10ee <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    10ec:	19 95       	eicall
	}
}
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	bf 91       	pop	r27
    10f4:	af 91       	pop	r26
    10f6:	9f 91       	pop	r25
    10f8:	8f 91       	pop	r24
    10fa:	7f 91       	pop	r23
    10fc:	6f 91       	pop	r22
    10fe:	5f 91       	pop	r21
    1100:	4f 91       	pop	r20
    1102:	3f 91       	pop	r19
    1104:	2f 91       	pop	r18
    1106:	0f 90       	pop	r0
    1108:	0b be       	out	0x3b, r0	; 59
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	0f 90       	pop	r0
    1110:	1f 90       	pop	r1
    1112:	18 95       	reti

00001114 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	0b b6       	in	r0, 0x3b	; 59
    1120:	0f 92       	push	r0
    1122:	2f 93       	push	r18
    1124:	3f 93       	push	r19
    1126:	4f 93       	push	r20
    1128:	5f 93       	push	r21
    112a:	6f 93       	push	r22
    112c:	7f 93       	push	r23
    112e:	8f 93       	push	r24
    1130:	9f 93       	push	r25
    1132:	af 93       	push	r26
    1134:	bf 93       	push	r27
    1136:	ef 93       	push	r30
    1138:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    113a:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <tc_tcd0_ccd_callback>
    113e:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <tc_tcd0_ccd_callback+0x1>
    1142:	30 97       	sbiw	r30, 0x00	; 0
    1144:	09 f0       	breq	.+2      	; 0x1148 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    1146:	19 95       	eicall
	}
}
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	bf 91       	pop	r27
    114e:	af 91       	pop	r26
    1150:	9f 91       	pop	r25
    1152:	8f 91       	pop	r24
    1154:	7f 91       	pop	r23
    1156:	6f 91       	pop	r22
    1158:	5f 91       	pop	r21
    115a:	4f 91       	pop	r20
    115c:	3f 91       	pop	r19
    115e:	2f 91       	pop	r18
    1160:	0f 90       	pop	r0
    1162:	0b be       	out	0x3b, r0	; 59
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	0b b6       	in	r0, 0x3b	; 59
    117a:	0f 92       	push	r0
    117c:	2f 93       	push	r18
    117e:	3f 93       	push	r19
    1180:	4f 93       	push	r20
    1182:	5f 93       	push	r21
    1184:	6f 93       	push	r22
    1186:	7f 93       	push	r23
    1188:	8f 93       	push	r24
    118a:	9f 93       	push	r25
    118c:	af 93       	push	r26
    118e:	bf 93       	push	r27
    1190:	ef 93       	push	r30
    1192:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1194:	e0 91 79 21 	lds	r30, 0x2179	; 0x802179 <tc_tcd1_ovf_callback>
    1198:	f0 91 7a 21 	lds	r31, 0x217A	; 0x80217a <tc_tcd1_ovf_callback+0x1>
    119c:	30 97       	sbiw	r30, 0x00	; 0
    119e:	09 f0       	breq	.+2      	; 0x11a2 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    11a0:	19 95       	eicall
	}
}
    11a2:	ff 91       	pop	r31
    11a4:	ef 91       	pop	r30
    11a6:	bf 91       	pop	r27
    11a8:	af 91       	pop	r26
    11aa:	9f 91       	pop	r25
    11ac:	8f 91       	pop	r24
    11ae:	7f 91       	pop	r23
    11b0:	6f 91       	pop	r22
    11b2:	5f 91       	pop	r21
    11b4:	4f 91       	pop	r20
    11b6:	3f 91       	pop	r19
    11b8:	2f 91       	pop	r18
    11ba:	0f 90       	pop	r0
    11bc:	0b be       	out	0x3b, r0	; 59
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	0f 90       	pop	r0
    11c4:	1f 90       	pop	r1
    11c6:	18 95       	reti

000011c8 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    11c8:	1f 92       	push	r1
    11ca:	0f 92       	push	r0
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	0f 92       	push	r0
    11d0:	11 24       	eor	r1, r1
    11d2:	0b b6       	in	r0, 0x3b	; 59
    11d4:	0f 92       	push	r0
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	ef 93       	push	r30
    11ec:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    11ee:	e0 91 77 21 	lds	r30, 0x2177	; 0x802177 <tc_tcd1_err_callback>
    11f2:	f0 91 78 21 	lds	r31, 0x2178	; 0x802178 <tc_tcd1_err_callback+0x1>
    11f6:	30 97       	sbiw	r30, 0x00	; 0
    11f8:	09 f0       	breq	.+2      	; 0x11fc <__vector_84+0x34>
		tc_tcd1_err_callback();
    11fa:	19 95       	eicall
	}
}
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0b be       	out	0x3b, r0	; 59
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1222:	1f 92       	push	r1
    1224:	0f 92       	push	r0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	0f 92       	push	r0
    122a:	11 24       	eor	r1, r1
    122c:	0b b6       	in	r0, 0x3b	; 59
    122e:	0f 92       	push	r0
    1230:	2f 93       	push	r18
    1232:	3f 93       	push	r19
    1234:	4f 93       	push	r20
    1236:	5f 93       	push	r21
    1238:	6f 93       	push	r22
    123a:	7f 93       	push	r23
    123c:	8f 93       	push	r24
    123e:	9f 93       	push	r25
    1240:	af 93       	push	r26
    1242:	bf 93       	push	r27
    1244:	ef 93       	push	r30
    1246:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1248:	e0 91 75 21 	lds	r30, 0x2175	; 0x802175 <tc_tcd1_cca_callback>
    124c:	f0 91 76 21 	lds	r31, 0x2176	; 0x802176 <tc_tcd1_cca_callback+0x1>
    1250:	30 97       	sbiw	r30, 0x00	; 0
    1252:	09 f0       	breq	.+2      	; 0x1256 <__vector_85+0x34>
		tc_tcd1_cca_callback();
    1254:	19 95       	eicall
	}
}
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0b be       	out	0x3b, r0	; 59
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	0b b6       	in	r0, 0x3b	; 59
    1288:	0f 92       	push	r0
    128a:	2f 93       	push	r18
    128c:	3f 93       	push	r19
    128e:	4f 93       	push	r20
    1290:	5f 93       	push	r21
    1292:	6f 93       	push	r22
    1294:	7f 93       	push	r23
    1296:	8f 93       	push	r24
    1298:	9f 93       	push	r25
    129a:	af 93       	push	r26
    129c:	bf 93       	push	r27
    129e:	ef 93       	push	r30
    12a0:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    12a2:	e0 91 73 21 	lds	r30, 0x2173	; 0x802173 <tc_tcd1_ccb_callback>
    12a6:	f0 91 74 21 	lds	r31, 0x2174	; 0x802174 <tc_tcd1_ccb_callback+0x1>
    12aa:	30 97       	sbiw	r30, 0x00	; 0
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    12ae:	19 95       	eicall
	}
}
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0b be       	out	0x3b, r0	; 59
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    12d6:	1f 92       	push	r1
    12d8:	0f 92       	push	r0
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	0f 92       	push	r0
    12de:	11 24       	eor	r1, r1
    12e0:	0b b6       	in	r0, 0x3b	; 59
    12e2:	0f 92       	push	r0
    12e4:	2f 93       	push	r18
    12e6:	3f 93       	push	r19
    12e8:	4f 93       	push	r20
    12ea:	5f 93       	push	r21
    12ec:	6f 93       	push	r22
    12ee:	7f 93       	push	r23
    12f0:	8f 93       	push	r24
    12f2:	9f 93       	push	r25
    12f4:	af 93       	push	r26
    12f6:	bf 93       	push	r27
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    12fc:	e0 91 71 21 	lds	r30, 0x2171	; 0x802171 <tc_tce0_ovf_callback>
    1300:	f0 91 72 21 	lds	r31, 0x2172	; 0x802172 <tc_tce0_ovf_callback+0x1>
    1304:	30 97       	sbiw	r30, 0x00	; 0
    1306:	09 f0       	breq	.+2      	; 0x130a <__vector_47+0x34>
		tc_tce0_ovf_callback();
    1308:	19 95       	eicall
	}
}
    130a:	ff 91       	pop	r31
    130c:	ef 91       	pop	r30
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	0f 90       	pop	r0
    1324:	0b be       	out	0x3b, r0	; 59
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

00001330 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	0b b6       	in	r0, 0x3b	; 59
    133c:	0f 92       	push	r0
    133e:	2f 93       	push	r18
    1340:	3f 93       	push	r19
    1342:	4f 93       	push	r20
    1344:	5f 93       	push	r21
    1346:	6f 93       	push	r22
    1348:	7f 93       	push	r23
    134a:	8f 93       	push	r24
    134c:	9f 93       	push	r25
    134e:	af 93       	push	r26
    1350:	bf 93       	push	r27
    1352:	ef 93       	push	r30
    1354:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1356:	e0 91 6f 21 	lds	r30, 0x216F	; 0x80216f <tc_tce0_err_callback>
    135a:	f0 91 70 21 	lds	r31, 0x2170	; 0x802170 <tc_tce0_err_callback+0x1>
    135e:	30 97       	sbiw	r30, 0x00	; 0
    1360:	09 f0       	breq	.+2      	; 0x1364 <__vector_48+0x34>
		tc_tce0_err_callback();
    1362:	19 95       	eicall
	}
}
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	0b be       	out	0x3b, r0	; 59
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	0b b6       	in	r0, 0x3b	; 59
    1396:	0f 92       	push	r0
    1398:	2f 93       	push	r18
    139a:	3f 93       	push	r19
    139c:	4f 93       	push	r20
    139e:	5f 93       	push	r21
    13a0:	6f 93       	push	r22
    13a2:	7f 93       	push	r23
    13a4:	8f 93       	push	r24
    13a6:	9f 93       	push	r25
    13a8:	af 93       	push	r26
    13aa:	bf 93       	push	r27
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    13b0:	e0 91 6d 21 	lds	r30, 0x216D	; 0x80216d <tc_tce0_cca_callback>
    13b4:	f0 91 6e 21 	lds	r31, 0x216E	; 0x80216e <tc_tce0_cca_callback+0x1>
    13b8:	30 97       	sbiw	r30, 0x00	; 0
    13ba:	09 f0       	breq	.+2      	; 0x13be <__vector_49+0x34>
		tc_tce0_cca_callback();
    13bc:	19 95       	eicall
	}
}
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	0f 90       	pop	r0
    13d8:	0b be       	out	0x3b, r0	; 59
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    13e4:	1f 92       	push	r1
    13e6:	0f 92       	push	r0
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	0f 92       	push	r0
    13ec:	11 24       	eor	r1, r1
    13ee:	0b b6       	in	r0, 0x3b	; 59
    13f0:	0f 92       	push	r0
    13f2:	2f 93       	push	r18
    13f4:	3f 93       	push	r19
    13f6:	4f 93       	push	r20
    13f8:	5f 93       	push	r21
    13fa:	6f 93       	push	r22
    13fc:	7f 93       	push	r23
    13fe:	8f 93       	push	r24
    1400:	9f 93       	push	r25
    1402:	af 93       	push	r26
    1404:	bf 93       	push	r27
    1406:	ef 93       	push	r30
    1408:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    140a:	e0 91 6b 21 	lds	r30, 0x216B	; 0x80216b <tc_tce0_ccb_callback>
    140e:	f0 91 6c 21 	lds	r31, 0x216C	; 0x80216c <tc_tce0_ccb_callback+0x1>
    1412:	30 97       	sbiw	r30, 0x00	; 0
    1414:	09 f0       	breq	.+2      	; 0x1418 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    1416:	19 95       	eicall
	}
}
    1418:	ff 91       	pop	r31
    141a:	ef 91       	pop	r30
    141c:	bf 91       	pop	r27
    141e:	af 91       	pop	r26
    1420:	9f 91       	pop	r25
    1422:	8f 91       	pop	r24
    1424:	7f 91       	pop	r23
    1426:	6f 91       	pop	r22
    1428:	5f 91       	pop	r21
    142a:	4f 91       	pop	r20
    142c:	3f 91       	pop	r19
    142e:	2f 91       	pop	r18
    1430:	0f 90       	pop	r0
    1432:	0b be       	out	0x3b, r0	; 59
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    143e:	1f 92       	push	r1
    1440:	0f 92       	push	r0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	0f 92       	push	r0
    1446:	11 24       	eor	r1, r1
    1448:	0b b6       	in	r0, 0x3b	; 59
    144a:	0f 92       	push	r0
    144c:	2f 93       	push	r18
    144e:	3f 93       	push	r19
    1450:	4f 93       	push	r20
    1452:	5f 93       	push	r21
    1454:	6f 93       	push	r22
    1456:	7f 93       	push	r23
    1458:	8f 93       	push	r24
    145a:	9f 93       	push	r25
    145c:	af 93       	push	r26
    145e:	bf 93       	push	r27
    1460:	ef 93       	push	r30
    1462:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1464:	e0 91 69 21 	lds	r30, 0x2169	; 0x802169 <tc_tce0_ccc_callback>
    1468:	f0 91 6a 21 	lds	r31, 0x216A	; 0x80216a <tc_tce0_ccc_callback+0x1>
    146c:	30 97       	sbiw	r30, 0x00	; 0
    146e:	09 f0       	breq	.+2      	; 0x1472 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1470:	19 95       	eicall
	}
}
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0b be       	out	0x3b, r0	; 59
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	0b b6       	in	r0, 0x3b	; 59
    14a4:	0f 92       	push	r0
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    14be:	e0 91 67 21 	lds	r30, 0x2167	; 0x802167 <tc_tce0_ccd_callback>
    14c2:	f0 91 68 21 	lds	r31, 0x2168	; 0x802168 <tc_tce0_ccd_callback+0x1>
    14c6:	30 97       	sbiw	r30, 0x00	; 0
    14c8:	09 f0       	breq	.+2      	; 0x14cc <__vector_52+0x34>
		tc_tce0_ccd_callback();
    14ca:	19 95       	eicall
	}
}
    14cc:	ff 91       	pop	r31
    14ce:	ef 91       	pop	r30
    14d0:	bf 91       	pop	r27
    14d2:	af 91       	pop	r26
    14d4:	9f 91       	pop	r25
    14d6:	8f 91       	pop	r24
    14d8:	7f 91       	pop	r23
    14da:	6f 91       	pop	r22
    14dc:	5f 91       	pop	r21
    14de:	4f 91       	pop	r20
    14e0:	3f 91       	pop	r19
    14e2:	2f 91       	pop	r18
    14e4:	0f 90       	pop	r0
    14e6:	0b be       	out	0x3b, r0	; 59
    14e8:	0f 90       	pop	r0
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	0f 90       	pop	r0
    14ee:	1f 90       	pop	r1
    14f0:	18 95       	reti

000014f2 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    14f2:	1f 92       	push	r1
    14f4:	0f 92       	push	r0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	0f 92       	push	r0
    14fa:	11 24       	eor	r1, r1
    14fc:	0b b6       	in	r0, 0x3b	; 59
    14fe:	0f 92       	push	r0
    1500:	2f 93       	push	r18
    1502:	3f 93       	push	r19
    1504:	4f 93       	push	r20
    1506:	5f 93       	push	r21
    1508:	6f 93       	push	r22
    150a:	7f 93       	push	r23
    150c:	8f 93       	push	r24
    150e:	9f 93       	push	r25
    1510:	af 93       	push	r26
    1512:	bf 93       	push	r27
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1518:	e0 91 65 21 	lds	r30, 0x2165	; 0x802165 <tc_tce1_ovf_callback>
    151c:	f0 91 66 21 	lds	r31, 0x2166	; 0x802166 <tc_tce1_ovf_callback+0x1>
    1520:	30 97       	sbiw	r30, 0x00	; 0
    1522:	09 f0       	breq	.+2      	; 0x1526 <__vector_53+0x34>
		tc_tce1_ovf_callback();
    1524:	19 95       	eicall
	}
}
    1526:	ff 91       	pop	r31
    1528:	ef 91       	pop	r30
    152a:	bf 91       	pop	r27
    152c:	af 91       	pop	r26
    152e:	9f 91       	pop	r25
    1530:	8f 91       	pop	r24
    1532:	7f 91       	pop	r23
    1534:	6f 91       	pop	r22
    1536:	5f 91       	pop	r21
    1538:	4f 91       	pop	r20
    153a:	3f 91       	pop	r19
    153c:	2f 91       	pop	r18
    153e:	0f 90       	pop	r0
    1540:	0b be       	out	0x3b, r0	; 59
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	0b b6       	in	r0, 0x3b	; 59
    1558:	0f 92       	push	r0
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1572:	e0 91 63 21 	lds	r30, 0x2163	; 0x802163 <tc_tce1_err_callback>
    1576:	f0 91 64 21 	lds	r31, 0x2164	; 0x802164 <tc_tce1_err_callback+0x1>
    157a:	30 97       	sbiw	r30, 0x00	; 0
    157c:	09 f0       	breq	.+2      	; 0x1580 <__vector_54+0x34>
		tc_tce1_err_callback();
    157e:	19 95       	eicall
	}
}
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0b be       	out	0x3b, r0	; 59
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	11 24       	eor	r1, r1
    15b0:	0b b6       	in	r0, 0x3b	; 59
    15b2:	0f 92       	push	r0
    15b4:	2f 93       	push	r18
    15b6:	3f 93       	push	r19
    15b8:	4f 93       	push	r20
    15ba:	5f 93       	push	r21
    15bc:	6f 93       	push	r22
    15be:	7f 93       	push	r23
    15c0:	8f 93       	push	r24
    15c2:	9f 93       	push	r25
    15c4:	af 93       	push	r26
    15c6:	bf 93       	push	r27
    15c8:	ef 93       	push	r30
    15ca:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    15cc:	e0 91 61 21 	lds	r30, 0x2161	; 0x802161 <tc_tce1_cca_callback>
    15d0:	f0 91 62 21 	lds	r31, 0x2162	; 0x802162 <tc_tce1_cca_callback+0x1>
    15d4:	30 97       	sbiw	r30, 0x00	; 0
    15d6:	09 f0       	breq	.+2      	; 0x15da <__vector_55+0x34>
		tc_tce1_cca_callback();
    15d8:	19 95       	eicall
	}
}
    15da:	ff 91       	pop	r31
    15dc:	ef 91       	pop	r30
    15de:	bf 91       	pop	r27
    15e0:	af 91       	pop	r26
    15e2:	9f 91       	pop	r25
    15e4:	8f 91       	pop	r24
    15e6:	7f 91       	pop	r23
    15e8:	6f 91       	pop	r22
    15ea:	5f 91       	pop	r21
    15ec:	4f 91       	pop	r20
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	0b be       	out	0x3b, r0	; 59
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	0f 90       	pop	r0
    15fc:	1f 90       	pop	r1
    15fe:	18 95       	reti

00001600 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1600:	1f 92       	push	r1
    1602:	0f 92       	push	r0
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	0f 92       	push	r0
    1608:	11 24       	eor	r1, r1
    160a:	0b b6       	in	r0, 0x3b	; 59
    160c:	0f 92       	push	r0
    160e:	2f 93       	push	r18
    1610:	3f 93       	push	r19
    1612:	4f 93       	push	r20
    1614:	5f 93       	push	r21
    1616:	6f 93       	push	r22
    1618:	7f 93       	push	r23
    161a:	8f 93       	push	r24
    161c:	9f 93       	push	r25
    161e:	af 93       	push	r26
    1620:	bf 93       	push	r27
    1622:	ef 93       	push	r30
    1624:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1626:	e0 91 5f 21 	lds	r30, 0x215F	; 0x80215f <tc_tce1_ccb_callback>
    162a:	f0 91 60 21 	lds	r31, 0x2160	; 0x802160 <tc_tce1_ccb_callback+0x1>
    162e:	30 97       	sbiw	r30, 0x00	; 0
    1630:	09 f0       	breq	.+2      	; 0x1634 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    1632:	19 95       	eicall
	}
}
    1634:	ff 91       	pop	r31
    1636:	ef 91       	pop	r30
    1638:	bf 91       	pop	r27
    163a:	af 91       	pop	r26
    163c:	9f 91       	pop	r25
    163e:	8f 91       	pop	r24
    1640:	7f 91       	pop	r23
    1642:	6f 91       	pop	r22
    1644:	5f 91       	pop	r21
    1646:	4f 91       	pop	r20
    1648:	3f 91       	pop	r19
    164a:	2f 91       	pop	r18
    164c:	0f 90       	pop	r0
    164e:	0b be       	out	0x3b, r0	; 59
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	0f 90       	pop	r0
    1656:	1f 90       	pop	r1
    1658:	18 95       	reti

0000165a <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    165a:	1f 92       	push	r1
    165c:	0f 92       	push	r0
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	0f 92       	push	r0
    1662:	11 24       	eor	r1, r1
    1664:	0b b6       	in	r0, 0x3b	; 59
    1666:	0f 92       	push	r0
    1668:	2f 93       	push	r18
    166a:	3f 93       	push	r19
    166c:	4f 93       	push	r20
    166e:	5f 93       	push	r21
    1670:	6f 93       	push	r22
    1672:	7f 93       	push	r23
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	af 93       	push	r26
    167a:	bf 93       	push	r27
    167c:	ef 93       	push	r30
    167e:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1680:	e0 91 5d 21 	lds	r30, 0x215D	; 0x80215d <tc_tcf0_ovf_callback>
    1684:	f0 91 5e 21 	lds	r31, 0x215E	; 0x80215e <tc_tcf0_ovf_callback+0x1>
    1688:	30 97       	sbiw	r30, 0x00	; 0
    168a:	09 f0       	breq	.+2      	; 0x168e <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    168c:	19 95       	eicall
	}
}
    168e:	ff 91       	pop	r31
    1690:	ef 91       	pop	r30
    1692:	bf 91       	pop	r27
    1694:	af 91       	pop	r26
    1696:	9f 91       	pop	r25
    1698:	8f 91       	pop	r24
    169a:	7f 91       	pop	r23
    169c:	6f 91       	pop	r22
    169e:	5f 91       	pop	r21
    16a0:	4f 91       	pop	r20
    16a2:	3f 91       	pop	r19
    16a4:	2f 91       	pop	r18
    16a6:	0f 90       	pop	r0
    16a8:	0b be       	out	0x3b, r0	; 59
    16aa:	0f 90       	pop	r0
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	0f 90       	pop	r0
    16b0:	1f 90       	pop	r1
    16b2:	18 95       	reti

000016b4 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    16b4:	1f 92       	push	r1
    16b6:	0f 92       	push	r0
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	0f 92       	push	r0
    16bc:	11 24       	eor	r1, r1
    16be:	0b b6       	in	r0, 0x3b	; 59
    16c0:	0f 92       	push	r0
    16c2:	2f 93       	push	r18
    16c4:	3f 93       	push	r19
    16c6:	4f 93       	push	r20
    16c8:	5f 93       	push	r21
    16ca:	6f 93       	push	r22
    16cc:	7f 93       	push	r23
    16ce:	8f 93       	push	r24
    16d0:	9f 93       	push	r25
    16d2:	af 93       	push	r26
    16d4:	bf 93       	push	r27
    16d6:	ef 93       	push	r30
    16d8:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    16da:	e0 91 5b 21 	lds	r30, 0x215B	; 0x80215b <tc_tcf0_err_callback>
    16de:	f0 91 5c 21 	lds	r31, 0x215C	; 0x80215c <tc_tcf0_err_callback+0x1>
    16e2:	30 97       	sbiw	r30, 0x00	; 0
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <__vector_109+0x34>
		tc_tcf0_err_callback();
    16e6:	19 95       	eicall
	}
}
    16e8:	ff 91       	pop	r31
    16ea:	ef 91       	pop	r30
    16ec:	bf 91       	pop	r27
    16ee:	af 91       	pop	r26
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	7f 91       	pop	r23
    16f6:	6f 91       	pop	r22
    16f8:	5f 91       	pop	r21
    16fa:	4f 91       	pop	r20
    16fc:	3f 91       	pop	r19
    16fe:	2f 91       	pop	r18
    1700:	0f 90       	pop	r0
    1702:	0b be       	out	0x3b, r0	; 59
    1704:	0f 90       	pop	r0
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	0f 90       	pop	r0
    170a:	1f 90       	pop	r1
    170c:	18 95       	reti

0000170e <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    170e:	1f 92       	push	r1
    1710:	0f 92       	push	r0
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	0f 92       	push	r0
    1716:	11 24       	eor	r1, r1
    1718:	0b b6       	in	r0, 0x3b	; 59
    171a:	0f 92       	push	r0
    171c:	2f 93       	push	r18
    171e:	3f 93       	push	r19
    1720:	4f 93       	push	r20
    1722:	5f 93       	push	r21
    1724:	6f 93       	push	r22
    1726:	7f 93       	push	r23
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	af 93       	push	r26
    172e:	bf 93       	push	r27
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1734:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <tc_tcf0_cca_callback>
    1738:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <tc_tcf0_cca_callback+0x1>
    173c:	30 97       	sbiw	r30, 0x00	; 0
    173e:	09 f0       	breq	.+2      	; 0x1742 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    1740:	19 95       	eicall
	}
}
    1742:	ff 91       	pop	r31
    1744:	ef 91       	pop	r30
    1746:	bf 91       	pop	r27
    1748:	af 91       	pop	r26
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	7f 91       	pop	r23
    1750:	6f 91       	pop	r22
    1752:	5f 91       	pop	r21
    1754:	4f 91       	pop	r20
    1756:	3f 91       	pop	r19
    1758:	2f 91       	pop	r18
    175a:	0f 90       	pop	r0
    175c:	0b be       	out	0x3b, r0	; 59
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	0f 90       	pop	r0
    1764:	1f 90       	pop	r1
    1766:	18 95       	reti

00001768 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1768:	1f 92       	push	r1
    176a:	0f 92       	push	r0
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	0f 92       	push	r0
    1770:	11 24       	eor	r1, r1
    1772:	0b b6       	in	r0, 0x3b	; 59
    1774:	0f 92       	push	r0
    1776:	2f 93       	push	r18
    1778:	3f 93       	push	r19
    177a:	4f 93       	push	r20
    177c:	5f 93       	push	r21
    177e:	6f 93       	push	r22
    1780:	7f 93       	push	r23
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27
    178a:	ef 93       	push	r30
    178c:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    178e:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <tc_tcf0_ccb_callback>
    1792:	f0 91 58 21 	lds	r31, 0x2158	; 0x802158 <tc_tcf0_ccb_callback+0x1>
    1796:	30 97       	sbiw	r30, 0x00	; 0
    1798:	09 f0       	breq	.+2      	; 0x179c <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    179a:	19 95       	eicall
	}
}
    179c:	ff 91       	pop	r31
    179e:	ef 91       	pop	r30
    17a0:	bf 91       	pop	r27
    17a2:	af 91       	pop	r26
    17a4:	9f 91       	pop	r25
    17a6:	8f 91       	pop	r24
    17a8:	7f 91       	pop	r23
    17aa:	6f 91       	pop	r22
    17ac:	5f 91       	pop	r21
    17ae:	4f 91       	pop	r20
    17b0:	3f 91       	pop	r19
    17b2:	2f 91       	pop	r18
    17b4:	0f 90       	pop	r0
    17b6:	0b be       	out	0x3b, r0	; 59
    17b8:	0f 90       	pop	r0
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	0f 90       	pop	r0
    17be:	1f 90       	pop	r1
    17c0:	18 95       	reti

000017c2 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    17c2:	1f 92       	push	r1
    17c4:	0f 92       	push	r0
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	0f 92       	push	r0
    17ca:	11 24       	eor	r1, r1
    17cc:	0b b6       	in	r0, 0x3b	; 59
    17ce:	0f 92       	push	r0
    17d0:	2f 93       	push	r18
    17d2:	3f 93       	push	r19
    17d4:	4f 93       	push	r20
    17d6:	5f 93       	push	r21
    17d8:	6f 93       	push	r22
    17da:	7f 93       	push	r23
    17dc:	8f 93       	push	r24
    17de:	9f 93       	push	r25
    17e0:	af 93       	push	r26
    17e2:	bf 93       	push	r27
    17e4:	ef 93       	push	r30
    17e6:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    17e8:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <tc_tcf0_ccc_callback>
    17ec:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <tc_tcf0_ccc_callback+0x1>
    17f0:	30 97       	sbiw	r30, 0x00	; 0
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    17f4:	19 95       	eicall
	}
}
    17f6:	ff 91       	pop	r31
    17f8:	ef 91       	pop	r30
    17fa:	bf 91       	pop	r27
    17fc:	af 91       	pop	r26
    17fe:	9f 91       	pop	r25
    1800:	8f 91       	pop	r24
    1802:	7f 91       	pop	r23
    1804:	6f 91       	pop	r22
    1806:	5f 91       	pop	r21
    1808:	4f 91       	pop	r20
    180a:	3f 91       	pop	r19
    180c:	2f 91       	pop	r18
    180e:	0f 90       	pop	r0
    1810:	0b be       	out	0x3b, r0	; 59
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	0f 90       	pop	r0
    1818:	1f 90       	pop	r1
    181a:	18 95       	reti

0000181c <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    181c:	1f 92       	push	r1
    181e:	0f 92       	push	r0
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	0f 92       	push	r0
    1824:	11 24       	eor	r1, r1
    1826:	0b b6       	in	r0, 0x3b	; 59
    1828:	0f 92       	push	r0
    182a:	2f 93       	push	r18
    182c:	3f 93       	push	r19
    182e:	4f 93       	push	r20
    1830:	5f 93       	push	r21
    1832:	6f 93       	push	r22
    1834:	7f 93       	push	r23
    1836:	8f 93       	push	r24
    1838:	9f 93       	push	r25
    183a:	af 93       	push	r26
    183c:	bf 93       	push	r27
    183e:	ef 93       	push	r30
    1840:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1842:	e0 91 53 21 	lds	r30, 0x2153	; 0x802153 <tc_tcf0_ccd_callback>
    1846:	f0 91 54 21 	lds	r31, 0x2154	; 0x802154 <tc_tcf0_ccd_callback+0x1>
    184a:	30 97       	sbiw	r30, 0x00	; 0
    184c:	09 f0       	breq	.+2      	; 0x1850 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    184e:	19 95       	eicall
	}
}
    1850:	ff 91       	pop	r31
    1852:	ef 91       	pop	r30
    1854:	bf 91       	pop	r27
    1856:	af 91       	pop	r26
    1858:	9f 91       	pop	r25
    185a:	8f 91       	pop	r24
    185c:	7f 91       	pop	r23
    185e:	6f 91       	pop	r22
    1860:	5f 91       	pop	r21
    1862:	4f 91       	pop	r20
    1864:	3f 91       	pop	r19
    1866:	2f 91       	pop	r18
    1868:	0f 90       	pop	r0
    186a:	0b be       	out	0x3b, r0	; 59
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1876:	1f 93       	push	r17
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	1f 92       	push	r1
    187e:	1f 92       	push	r1
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1884:	2f b7       	in	r18, 0x3f	; 63
    1886:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    1888:	f8 94       	cli
	return flags;
    188a:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    188c:	28 2f       	mov	r18, r24
    188e:	39 2f       	mov	r19, r25
    1890:	21 15       	cp	r18, r1
    1892:	88 e0       	ldi	r24, 0x08	; 8
    1894:	38 07       	cpc	r19, r24
    1896:	49 f4       	brne	.+18     	; 0x18aa <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	83 e0       	ldi	r24, 0x03	; 3
    189c:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    18a0:	64 e0       	ldi	r22, 0x04	; 4
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
    18a8:	4f c0       	rjmp	.+158    	; 0x1948 <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    18aa:	20 34       	cpi	r18, 0x40	; 64
    18ac:	88 e0       	ldi	r24, 0x08	; 8
    18ae:	38 07       	cpc	r19, r24
    18b0:	49 f4       	brne	.+18     	; 0x18c4 <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    18b2:	62 e0       	ldi	r22, 0x02	; 2
    18b4:	83 e0       	ldi	r24, 0x03	; 3
    18b6:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    18ba:	64 e0       	ldi	r22, 0x04	; 4
    18bc:	83 e0       	ldi	r24, 0x03	; 3
    18be:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
    18c2:	42 c0       	rjmp	.+132    	; 0x1948 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    18c4:	21 15       	cp	r18, r1
    18c6:	89 e0       	ldi	r24, 0x09	; 9
    18c8:	38 07       	cpc	r19, r24
    18ca:	49 f4       	brne	.+18     	; 0x18de <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    18cc:	61 e0       	ldi	r22, 0x01	; 1
    18ce:	84 e0       	ldi	r24, 0x04	; 4
    18d0:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    18d4:	64 e0       	ldi	r22, 0x04	; 4
    18d6:	84 e0       	ldi	r24, 0x04	; 4
    18d8:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
    18dc:	35 c0       	rjmp	.+106    	; 0x1948 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    18de:	20 34       	cpi	r18, 0x40	; 64
    18e0:	89 e0       	ldi	r24, 0x09	; 9
    18e2:	38 07       	cpc	r19, r24
    18e4:	49 f4       	brne	.+18     	; 0x18f8 <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    18e6:	62 e0       	ldi	r22, 0x02	; 2
    18e8:	84 e0       	ldi	r24, 0x04	; 4
    18ea:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    18ee:	64 e0       	ldi	r22, 0x04	; 4
    18f0:	84 e0       	ldi	r24, 0x04	; 4
    18f2:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
    18f6:	28 c0       	rjmp	.+80     	; 0x1948 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    18f8:	21 15       	cp	r18, r1
    18fa:	8a e0       	ldi	r24, 0x0A	; 10
    18fc:	38 07       	cpc	r19, r24
    18fe:	49 f4       	brne	.+18     	; 0x1912 <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	85 e0       	ldi	r24, 0x05	; 5
    1904:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1908:	64 e0       	ldi	r22, 0x04	; 4
    190a:	85 e0       	ldi	r24, 0x05	; 5
    190c:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
    1910:	1b c0       	rjmp	.+54     	; 0x1948 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1912:	20 34       	cpi	r18, 0x40	; 64
    1914:	8a e0       	ldi	r24, 0x0A	; 10
    1916:	38 07       	cpc	r19, r24
    1918:	49 f4       	brne	.+18     	; 0x192c <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    191a:	62 e0       	ldi	r22, 0x02	; 2
    191c:	85 e0       	ldi	r24, 0x05	; 5
    191e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1922:	64 e0       	ldi	r22, 0x04	; 4
    1924:	85 e0       	ldi	r24, 0x05	; 5
    1926:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
    192a:	0e c0       	rjmp	.+28     	; 0x1948 <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    192c:	21 15       	cp	r18, r1
    192e:	3b 40       	sbci	r19, 0x0B	; 11
    1930:	49 f4       	brne	.+18     	; 0x1944 <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	86 e0       	ldi	r24, 0x06	; 6
    1936:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    193a:	64 e0       	ldi	r22, 0x04	; 4
    193c:	86 e0       	ldi	r24, 0x06	; 6
    193e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <sysclk_enable_module>
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1944:	1f bf       	out	0x3f, r17	; 63
    1946:	10 c0       	rjmp	.+32     	; 0x1968 <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1948:	80 91 32 24 	lds	r24, 0x2432	; 0x802432 <sleepmgr_locks+0x1>
    194c:	8f 3f       	cpi	r24, 0xFF	; 255
    194e:	09 f4       	brne	.+2      	; 0x1952 <tc_enable+0xdc>
    1950:	ff cf       	rjmp	.-2      	; 0x1950 <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1952:	8f b7       	in	r24, 0x3f	; 63
    1954:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1956:	f8 94       	cli
	return flags;
    1958:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    195a:	e1 e3       	ldi	r30, 0x31	; 49
    195c:	f4 e2       	ldi	r31, 0x24	; 36
    195e:	81 81       	ldd	r24, Z+1	; 0x01
    1960:	8f 5f       	subi	r24, 0xFF	; 255
    1962:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1964:	9f bf       	out	0x3f, r25	; 63
    1966:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	08 95       	ret

00001974 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1978:	e0 91 9b 21 	lds	r30, 0x219B	; 0x80219b <transfer>
    197c:	f0 91 9c 21 	lds	r31, 0x219C	; 0x80219c <transfer+0x1>
    1980:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1982:	83 ff       	sbrs	r24, 3
    1984:	08 c0       	rjmp	.+16     	; 0x1996 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1986:	88 60       	ori	r24, 0x08	; 8
    1988:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    198e:	86 ef       	ldi	r24, 0xF6	; 246
    1990:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <transfer+0xa>
    1994:	83 c0       	rjmp	.+262    	; 0x1a9c <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1996:	98 2f       	mov	r25, r24
    1998:	94 71       	andi	r25, 0x14	; 20
    199a:	31 f0       	breq	.+12     	; 0x19a8 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <transfer+0xa>
    19a6:	7a c0       	rjmp	.+244    	; 0x1a9c <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    19a8:	86 ff       	sbrs	r24, 6
    19aa:	43 c0       	rjmp	.+134    	; 0x1a32 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    19ac:	cb e9       	ldi	r28, 0x9B	; 155
    19ae:	d1 e2       	ldi	r29, 0x21	; 33
    19b0:	aa 81       	ldd	r26, Y+2	; 0x02
    19b2:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    19b4:	8c 81       	ldd	r24, Y+4	; 0x04
    19b6:	9d 81       	ldd	r25, Y+5	; 0x05
    19b8:	14 96       	adiw	r26, 0x04	; 4
    19ba:	2d 91       	ld	r18, X+
    19bc:	3c 91       	ld	r19, X
    19be:	15 97       	sbiw	r26, 0x05	; 5
    19c0:	82 17       	cp	r24, r18
    19c2:	93 07       	cpc	r25, r19
    19c4:	6c f4       	brge	.+26     	; 0x19e0 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    19c6:	9c 01       	movw	r18, r24
    19c8:	2f 5f       	subi	r18, 0xFF	; 255
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	20 93 9f 21 	sts	0x219F, r18	; 0x80219f <transfer+0x4>
    19d0:	30 93 a0 21 	sts	0x21A0, r19	; 0x8021a0 <transfer+0x5>
    19d4:	a8 0f       	add	r26, r24
    19d6:	b9 1f       	adc	r27, r25
    19d8:	11 96       	adiw	r26, 0x01	; 1
    19da:	8c 91       	ld	r24, X
    19dc:	87 83       	std	Z+7, r24	; 0x07
    19de:	5e c0       	rjmp	.+188    	; 0x1a9c <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    19e0:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <transfer+0x6>
    19e4:	90 91 a2 21 	lds	r25, 0x21A2	; 0x8021a2 <transfer+0x7>
    19e8:	18 96       	adiw	r26, 0x08	; 8
    19ea:	2d 91       	ld	r18, X+
    19ec:	3c 91       	ld	r19, X
    19ee:	19 97       	sbiw	r26, 0x09	; 9
    19f0:	82 17       	cp	r24, r18
    19f2:	93 07       	cpc	r25, r19
    19f4:	c8 f4       	brcc	.+50     	; 0x1a28 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    19f6:	20 91 a3 21 	lds	r18, 0x21A3	; 0x8021a3 <transfer+0x8>
    19fa:	22 23       	and	r18, r18
    19fc:	21 f0       	breq	.+8      	; 0x1a06 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    19fe:	86 81       	ldd	r24, Z+6	; 0x06
    1a00:	81 60       	ori	r24, 0x01	; 1
    1a02:	86 83       	std	Z+6, r24	; 0x06
    1a04:	4b c0       	rjmp	.+150    	; 0x1a9c <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1a06:	16 96       	adiw	r26, 0x06	; 6
    1a08:	2d 91       	ld	r18, X+
    1a0a:	3c 91       	ld	r19, X
    1a0c:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1a0e:	ac 01       	movw	r20, r24
    1a10:	4f 5f       	subi	r20, 0xFF	; 255
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255
    1a14:	40 93 a1 21 	sts	0x21A1, r20	; 0x8021a1 <transfer+0x6>
    1a18:	50 93 a2 21 	sts	0x21A2, r21	; 0x8021a2 <transfer+0x7>
    1a1c:	d9 01       	movw	r26, r18
    1a1e:	a8 0f       	add	r26, r24
    1a20:	b9 1f       	adc	r27, r25
    1a22:	8c 91       	ld	r24, X
    1a24:	87 83       	std	Z+7, r24	; 0x07
    1a26:	3a c0       	rjmp	.+116    	; 0x1a9c <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1a2c:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <transfer+0xa>
    1a30:	35 c0       	rjmp	.+106    	; 0x1a9c <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1a32:	88 23       	and	r24, r24
    1a34:	84 f5       	brge	.+96     	; 0x1a96 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1a36:	ab e9       	ldi	r26, 0x9B	; 155
    1a38:	b1 e2       	ldi	r27, 0x21	; 33
    1a3a:	12 96       	adiw	r26, 0x02	; 2
    1a3c:	cd 91       	ld	r28, X+
    1a3e:	dc 91       	ld	r29, X
    1a40:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1a42:	16 96       	adiw	r26, 0x06	; 6
    1a44:	8d 91       	ld	r24, X+
    1a46:	9c 91       	ld	r25, X
    1a48:	17 97       	sbiw	r26, 0x07	; 7
    1a4a:	28 85       	ldd	r18, Y+8	; 0x08
    1a4c:	39 85       	ldd	r19, Y+9	; 0x09
    1a4e:	82 17       	cp	r24, r18
    1a50:	93 07       	cpc	r25, r19
    1a52:	d8 f4       	brcc	.+54     	; 0x1a8a <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1a54:	6e 81       	ldd	r22, Y+6	; 0x06
    1a56:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1a58:	9c 01       	movw	r18, r24
    1a5a:	2f 5f       	subi	r18, 0xFF	; 255
    1a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5e:	20 93 a1 21 	sts	0x21A1, r18	; 0x8021a1 <transfer+0x6>
    1a62:	30 93 a2 21 	sts	0x21A2, r19	; 0x8021a2 <transfer+0x7>
    1a66:	47 81       	ldd	r20, Z+7	; 0x07
    1a68:	db 01       	movw	r26, r22
    1a6a:	a8 0f       	add	r26, r24
    1a6c:	b9 1f       	adc	r27, r25
    1a6e:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1a70:	88 85       	ldd	r24, Y+8	; 0x08
    1a72:	99 85       	ldd	r25, Y+9	; 0x09
    1a74:	28 17       	cp	r18, r24
    1a76:	39 07       	cpc	r19, r25
    1a78:	18 f4       	brcc	.+6      	; 0x1a80 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	83 83       	std	Z+3, r24	; 0x03
    1a7e:	0e c0       	rjmp	.+28     	; 0x1a9c <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1a80:	87 e0       	ldi	r24, 0x07	; 7
    1a82:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1a84:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <transfer+0xa>
    1a88:	09 c0       	rjmp	.+18     	; 0x1a9c <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1a8e:	89 ef       	ldi	r24, 0xF9	; 249
    1a90:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <transfer+0xa>
    1a94:	03 c0       	rjmp	.+6      	; 0x1a9c <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1a96:	8b ef       	ldi	r24, 0xFB	; 251
    1a98:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <transfer+0xa>
	}
}
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	08 95       	ret

00001aa2 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1aa2:	1f 92       	push	r1
    1aa4:	0f 92       	push	r0
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	0f 92       	push	r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	0b b6       	in	r0, 0x3b	; 59
    1aae:	0f 92       	push	r0
    1ab0:	2f 93       	push	r18
    1ab2:	3f 93       	push	r19
    1ab4:	4f 93       	push	r20
    1ab6:	5f 93       	push	r21
    1ab8:	6f 93       	push	r22
    1aba:	7f 93       	push	r23
    1abc:	8f 93       	push	r24
    1abe:	9f 93       	push	r25
    1ac0:	af 93       	push	r26
    1ac2:	bf 93       	push	r27
    1ac4:	ef 93       	push	r30
    1ac6:	ff 93       	push	r31
    1ac8:	55 df       	rcall	.-342    	; 0x1974 <twim_interrupt_handler>
    1aca:	ff 91       	pop	r31
    1acc:	ef 91       	pop	r30
    1ace:	bf 91       	pop	r27
    1ad0:	af 91       	pop	r26
    1ad2:	9f 91       	pop	r25
    1ad4:	8f 91       	pop	r24
    1ad6:	7f 91       	pop	r23
    1ad8:	6f 91       	pop	r22
    1ada:	5f 91       	pop	r21
    1adc:	4f 91       	pop	r20
    1ade:	3f 91       	pop	r19
    1ae0:	2f 91       	pop	r18
    1ae2:	0f 90       	pop	r0
    1ae4:	0b be       	out	0x3b, r0	; 59
    1ae6:	0f 90       	pop	r0
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	0f 90       	pop	r0
    1aec:	1f 90       	pop	r1
    1aee:	18 95       	reti

00001af0 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1af0:	1f 92       	push	r1
    1af2:	0f 92       	push	r0
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	0f 92       	push	r0
    1af8:	11 24       	eor	r1, r1
    1afa:	0b b6       	in	r0, 0x3b	; 59
    1afc:	0f 92       	push	r0
    1afe:	2f 93       	push	r18
    1b00:	3f 93       	push	r19
    1b02:	4f 93       	push	r20
    1b04:	5f 93       	push	r21
    1b06:	6f 93       	push	r22
    1b08:	7f 93       	push	r23
    1b0a:	8f 93       	push	r24
    1b0c:	9f 93       	push	r25
    1b0e:	af 93       	push	r26
    1b10:	bf 93       	push	r27
    1b12:	ef 93       	push	r30
    1b14:	ff 93       	push	r31
    1b16:	2e df       	rcall	.-420    	; 0x1974 <twim_interrupt_handler>
    1b18:	ff 91       	pop	r31
    1b1a:	ef 91       	pop	r30
    1b1c:	bf 91       	pop	r27
    1b1e:	af 91       	pop	r26
    1b20:	9f 91       	pop	r25
    1b22:	8f 91       	pop	r24
    1b24:	7f 91       	pop	r23
    1b26:	6f 91       	pop	r22
    1b28:	5f 91       	pop	r21
    1b2a:	4f 91       	pop	r20
    1b2c:	3f 91       	pop	r19
    1b2e:	2f 91       	pop	r18
    1b30:	0f 90       	pop	r0
    1b32:	0b be       	out	0x3b, r0	; 59
    1b34:	0f 90       	pop	r0
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	0f 90       	pop	r0
    1b3a:	1f 90       	pop	r1
    1b3c:	18 95       	reti

00001b3e <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1b3e:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    1b40:	db 01       	movw	r26, r22
    1b42:	14 96       	adiw	r26, 0x04	; 4
    1b44:	8c 91       	ld	r24, X
    1b46:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    1b48:	88 eb       	ldi	r24, 0xB8	; 184
    1b4a:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    1b50:	eb e9       	ldi	r30, 0x9B	; 155
    1b52:	f1 e2       	ldi	r31, 0x21	; 33
    1b54:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    1b56:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    1b58:	e0 ea       	ldi	r30, 0xA0	; 160
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	82 60       	ori	r24, 0x02	; 2
    1b60:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    1b62:	78 94       	sei

	return STATUS_OK;
}
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	08 95       	ret

00001b68 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	1f 92       	push	r1
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	9c 01       	movw	r18, r24
    1b74:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1b76:	89 2b       	or	r24, r25
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <twi_master_transfer+0x14>
    1b7a:	51 c0       	rjmp	.+162    	; 0x1c1e <twi_master_transfer+0xb6>
    1b7c:	30 97       	sbiw	r30, 0x00	; 0
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <twi_master_transfer+0x1a>
    1b80:	50 c0       	rjmp	.+160    	; 0x1c22 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1b82:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1b84:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <transfer+0x9>
    1b88:	88 23       	and	r24, r24
    1b8a:	19 f0       	breq	.+6      	; 0x1b92 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    1b8c:	99 23       	and	r25, r25
    1b8e:	f1 f3       	breq	.-4      	; 0x1b8c <twi_master_transfer+0x24>
    1b90:	4a c0       	rjmp	.+148    	; 0x1c26 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b92:	8f b7       	in	r24, 0x3f	; 63
    1b94:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1b96:	f8 94       	cli
	return flags;
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1b9a:	ab e9       	ldi	r26, 0x9B	; 155
    1b9c:	b1 e2       	ldi	r27, 0x21	; 33
    1b9e:	91 e0       	ldi	r25, 0x01	; 1
    1ba0:	19 96       	adiw	r26, 0x09	; 9
    1ba2:	9c 93       	st	X, r25
    1ba4:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    1ba6:	90 e8       	ldi	r25, 0x80	; 128
    1ba8:	1a 96       	adiw	r26, 0x0a	; 10
    1baa:	9c 93       	st	X, r25
    1bac:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bae:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1bb0:	2d 93       	st	X+, r18
    1bb2:	3c 93       	st	X, r19
    1bb4:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    1bb6:	12 96       	adiw	r26, 0x02	; 2
    1bb8:	6d 93       	st	X+, r22
    1bba:	7c 93       	st	X, r23
    1bbc:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    1bbe:	14 96       	adiw	r26, 0x04	; 4
    1bc0:	1d 92       	st	X+, r1
    1bc2:	1c 92       	st	X, r1
    1bc4:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    1bc6:	16 96       	adiw	r26, 0x06	; 6
    1bc8:	1d 92       	st	X+, r1
    1bca:	1c 92       	st	X, r1
    1bcc:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    1bce:	18 96       	adiw	r26, 0x08	; 8
    1bd0:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    1bd2:	80 81       	ld	r24, Z
    1bd4:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    1bd6:	64 81       	ldd	r22, Z+4	; 0x04
    1bd8:	75 81       	ldd	r23, Z+5	; 0x05
    1bda:	67 2b       	or	r22, r23
    1bdc:	11 f4       	brne	.+4      	; 0x1be2 <twi_master_transfer+0x7a>
    1bde:	41 11       	cpse	r20, r1
    1be0:	03 c0       	rjmp	.+6      	; 0x1be8 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    1be2:	f9 01       	movw	r30, r18
    1be4:	86 83       	std	Z+6, r24	; 0x06
    1be6:	03 c0       	rjmp	.+6      	; 0x1bee <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    1be8:	81 60       	ori	r24, 0x01	; 1
    1bea:	f9 01       	movw	r30, r18
    1bec:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    1bee:	eb e9       	ldi	r30, 0x9B	; 155
    1bf0:	f1 e2       	ldi	r31, 0x21	; 33
    1bf2:	92 85       	ldd	r25, Z+10	; 0x0a
    1bf4:	90 38       	cpi	r25, 0x80	; 128
    1bf6:	e9 f3       	breq	.-6      	; 0x1bf2 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1bf8:	f9 01       	movw	r30, r18
    1bfa:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1bfc:	83 70       	andi	r24, 0x03	; 3
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	49 f0       	breq	.+18     	; 0x1c14 <twi_master_transfer+0xac>
    1c02:	ab e9       	ldi	r26, 0x9B	; 155
    1c04:	b1 e2       	ldi	r27, 0x21	; 33
    1c06:	ed 91       	ld	r30, X+
    1c08:	fc 91       	ld	r31, X
    1c0a:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1c0c:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1c0e:	83 70       	andi	r24, 0x03	; 3
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	c9 f7       	brne	.-14     	; 0x1c06 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    1c14:	eb e9       	ldi	r30, 0x9B	; 155
    1c16:	f1 e2       	ldi	r31, 0x21	; 33
    1c18:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    1c1a:	11 86       	std	Z+9, r1	; 0x09
    1c1c:	05 c0       	rjmp	.+10     	; 0x1c28 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    1c1e:	88 ef       	ldi	r24, 0xF8	; 248
    1c20:	03 c0       	rjmp	.+6      	; 0x1c28 <twi_master_transfer+0xc0>
    1c22:	88 ef       	ldi	r24, 0xF8	; 248
    1c24:	01 c0       	rjmp	.+2      	; 0x1c28 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    1c26:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1c28:	0f 90       	pop	r0
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	08 95       	ret

00001c30 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	1f 92       	push	r1
    1c36:	1f 92       	push	r1
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	81 11       	cpse	r24, r1
    1c3e:	26 c0       	rjmp	.+76     	; 0x1c8c <udd_sleep_mode+0x5c>
    1c40:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <udd_b_idle>
    1c44:	99 23       	and	r25, r25
    1c46:	f9 f0       	breq	.+62     	; 0x1c86 <udd_sleep_mode+0x56>
    1c48:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <sleepmgr_locks+0x1>
    1c4c:	91 11       	cpse	r25, r1
    1c4e:	01 c0       	rjmp	.+2      	; 0x1c52 <udd_sleep_mode+0x22>
    1c50:	ff cf       	rjmp	.-2      	; 0x1c50 <udd_sleep_mode+0x20>
    1c52:	9f b7       	in	r25, 0x3f	; 63
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	f8 94       	cli
    1c58:	2a 81       	ldd	r18, Y+2	; 0x02
    1c5a:	e1 e3       	ldi	r30, 0x31	; 49
    1c5c:	f4 e2       	ldi	r31, 0x24	; 36
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	91 50       	subi	r25, 0x01	; 1
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	2f bf       	out	0x3f, r18	; 63
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <udd_sleep_mode+0x56>
    1c68:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <sleepmgr_locks+0x1>
    1c6c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <udd_sleep_mode+0x42>
    1c70:	ff cf       	rjmp	.-2      	; 0x1c70 <udd_sleep_mode+0x40>
    1c72:	9f b7       	in	r25, 0x3f	; 63
    1c74:	99 83       	std	Y+1, r25	; 0x01
    1c76:	f8 94       	cli
    1c78:	29 81       	ldd	r18, Y+1	; 0x01
    1c7a:	e1 e3       	ldi	r30, 0x31	; 49
    1c7c:	f4 e2       	ldi	r31, 0x24	; 36
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	9f 5f       	subi	r25, 0xFF	; 255
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	2f bf       	out	0x3f, r18	; 63
    1c86:	80 93 d0 22 	sts	0x22D0, r24	; 0x8022d0 <udd_b_idle>
    1c8a:	05 c0       	rjmp	.+10     	; 0x1c96 <udd_sleep_mode+0x66>
    1c8c:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <udd_b_idle>
    1c90:	99 23       	and	r25, r25
    1c92:	51 f3       	breq	.-44     	; 0x1c68 <udd_sleep_mode+0x38>
    1c94:	f8 cf       	rjmp	.-16     	; 0x1c86 <udd_sleep_mode+0x56>
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <udd_ctrl_init>:
    1ca0:	0f 93       	push	r16
    1ca2:	e8 ec       	ldi	r30, 0xC8	; 200
    1ca4:	f4 e0       	ldi	r31, 0x04	; 4
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8f 7d       	andi	r24, 0xDF	; 223
    1caa:	80 83       	st	Z, r24
    1cac:	80 81       	ld	r24, Z
    1cae:	8f 7d       	andi	r24, 0xDF	; 223
    1cb0:	80 83       	st	Z, r24
    1cb2:	e4 ea       	ldi	r30, 0xA4	; 164
    1cb4:	f2 e2       	ldi	r31, 0x22	; 34
    1cb6:	02 e0       	ldi	r16, 0x02	; 2
    1cb8:	05 93       	las	Z, r16
    1cba:	10 92 a6 22 	sts	0x22A6, r1	; 0x8022a6 <udd_sram+0x16>
    1cbe:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udd_sram+0x17>
    1cc2:	00 e2       	ldi	r16, 0x20	; 32
    1cc4:	06 93       	lac	Z, r16
    1cc6:	00 e4       	ldi	r16, 0x40	; 64
    1cc8:	06 93       	lac	Z, r16
    1cca:	ec e9       	ldi	r30, 0x9C	; 156
    1ccc:	f2 e2       	ldi	r31, 0x22	; 34
    1cce:	00 e4       	ldi	r16, 0x40	; 64
    1cd0:	06 93       	lac	Z, r16
    1cd2:	e1 e2       	ldi	r30, 0x21	; 33
    1cd4:	f4 e2       	ldi	r31, 0x24	; 36
    1cd6:	14 86       	std	Z+12, r1	; 0x0c
    1cd8:	15 86       	std	Z+13, r1	; 0x0d
    1cda:	16 86       	std	Z+14, r1	; 0x0e
    1cdc:	17 86       	std	Z+15, r1	; 0x0f
    1cde:	12 86       	std	Z+10, r1	; 0x0a
    1ce0:	13 86       	std	Z+11, r1	; 0x0b
    1ce2:	10 92 8f 22 	sts	0x228F, r1	; 0x80228f <udd_ep_control_state>
    1ce6:	0f 91       	pop	r16
    1ce8:	08 95       	ret

00001cea <udd_ctrl_stall_data>:
    1cea:	0f 93       	push	r16
    1cec:	85 e0       	ldi	r24, 0x05	; 5
    1cee:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
    1cf2:	e5 ea       	ldi	r30, 0xA5	; 165
    1cf4:	f2 e2       	ldi	r31, 0x22	; 34
    1cf6:	04 e0       	ldi	r16, 0x04	; 4
    1cf8:	05 93       	las	Z, r16
    1cfa:	ed e9       	ldi	r30, 0x9D	; 157
    1cfc:	f2 e2       	ldi	r31, 0x22	; 34
    1cfe:	04 e0       	ldi	r16, 0x04	; 4
    1d00:	05 93       	las	Z, r16
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <udd_ctrl_send_zlp_in>:
    1d06:	0f 93       	push	r16
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
    1d0e:	10 92 a6 22 	sts	0x22A6, r1	; 0x8022a6 <udd_sram+0x16>
    1d12:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udd_sram+0x17>
    1d16:	e4 ea       	ldi	r30, 0xA4	; 164
    1d18:	f2 e2       	ldi	r31, 0x22	; 34
    1d1a:	02 e0       	ldi	r16, 0x02	; 2
    1d1c:	06 93       	lac	Z, r16
    1d1e:	0f 91       	pop	r16
    1d20:	08 95       	ret

00001d22 <udd_ctrl_endofrequest>:
    1d22:	e0 91 2d 24 	lds	r30, 0x242D	; 0x80242d <udd_g_ctrlreq+0xc>
    1d26:	f0 91 2e 24 	lds	r31, 0x242E	; 0x80242e <udd_g_ctrlreq+0xd>
    1d2a:	30 97       	sbiw	r30, 0x00	; 0
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <udd_ctrl_endofrequest+0xe>
    1d2e:	19 95       	eicall
    1d30:	08 95       	ret

00001d32 <udd_ctrl_in_sent>:
    1d32:	0f 93       	push	r16
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	80 91 8f 22 	lds	r24, 0x228F	; 0x80228f <udd_ep_control_state>
    1d3c:	83 30       	cpi	r24, 0x03	; 3
    1d3e:	19 f4       	brne	.+6      	; 0x1d46 <udd_ctrl_in_sent+0x14>
    1d40:	f0 df       	rcall	.-32     	; 0x1d22 <udd_ctrl_endofrequest>
    1d42:	ae df       	rcall	.-164    	; 0x1ca0 <udd_ctrl_init>
    1d44:	5e c0       	rjmp	.+188    	; 0x1e02 <udd_ctrl_in_sent+0xd0>
    1d46:	80 91 8b 22 	lds	r24, 0x228B	; 0x80228b <udd_ctrl_payload_nb_trans>
    1d4a:	90 91 8c 22 	lds	r25, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1d4e:	c0 91 2b 24 	lds	r28, 0x242B	; 0x80242b <udd_g_ctrlreq+0xa>
    1d52:	d0 91 2c 24 	lds	r29, 0x242C	; 0x80242c <udd_g_ctrlreq+0xb>
    1d56:	c8 1b       	sub	r28, r24
    1d58:	d9 0b       	sbc	r29, r25
    1d5a:	71 f5       	brne	.+92     	; 0x1db8 <udd_ctrl_in_sent+0x86>
    1d5c:	20 91 8d 22 	lds	r18, 0x228D	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    1d60:	30 91 8e 22 	lds	r19, 0x228E	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    1d64:	82 0f       	add	r24, r18
    1d66:	93 1f       	adc	r25, r19
    1d68:	80 93 8d 22 	sts	0x228D, r24	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    1d6c:	90 93 8e 22 	sts	0x228E, r25	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    1d70:	20 91 27 24 	lds	r18, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    1d74:	30 91 28 24 	lds	r19, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    1d78:	82 17       	cp	r24, r18
    1d7a:	93 07       	cpc	r25, r19
    1d7c:	21 f0       	breq	.+8      	; 0x1d86 <udd_ctrl_in_sent+0x54>
    1d7e:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <b_shortpacket.5472>
    1d82:	88 23       	and	r24, r24
    1d84:	41 f0       	breq	.+16     	; 0x1d96 <udd_ctrl_in_sent+0x64>
    1d86:	84 e0       	ldi	r24, 0x04	; 4
    1d88:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
    1d8c:	ec e9       	ldi	r30, 0x9C	; 156
    1d8e:	f2 e2       	ldi	r31, 0x22	; 34
    1d90:	02 e0       	ldi	r16, 0x02	; 2
    1d92:	06 93       	lac	Z, r16
    1d94:	36 c0       	rjmp	.+108    	; 0x1e02 <udd_ctrl_in_sent+0xd0>
    1d96:	e0 91 2f 24 	lds	r30, 0x242F	; 0x80242f <udd_g_ctrlreq+0xe>
    1d9a:	f0 91 30 24 	lds	r31, 0x2430	; 0x802430 <udd_g_ctrlreq+0xf>
    1d9e:	30 97       	sbiw	r30, 0x00	; 0
    1da0:	99 f0       	breq	.+38     	; 0x1dc8 <udd_ctrl_in_sent+0x96>
    1da2:	19 95       	eicall
    1da4:	88 23       	and	r24, r24
    1da6:	81 f0       	breq	.+32     	; 0x1dc8 <udd_ctrl_in_sent+0x96>
    1da8:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <udd_ctrl_payload_nb_trans>
    1dac:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1db0:	c0 91 2b 24 	lds	r28, 0x242B	; 0x80242b <udd_g_ctrlreq+0xa>
    1db4:	d0 91 2c 24 	lds	r29, 0x242C	; 0x80242c <udd_g_ctrlreq+0xb>
    1db8:	c0 34       	cpi	r28, 0x40	; 64
    1dba:	d1 05       	cpc	r29, r1
    1dbc:	28 f0       	brcs	.+10     	; 0x1dc8 <udd_ctrl_in_sent+0x96>
    1dbe:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <b_shortpacket.5472>
    1dc2:	c0 e4       	ldi	r28, 0x40	; 64
    1dc4:	d0 e0       	ldi	r29, 0x00	; 0
    1dc6:	03 c0       	rjmp	.+6      	; 0x1dce <udd_ctrl_in_sent+0x9c>
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <b_shortpacket.5472>
    1dce:	e0 e9       	ldi	r30, 0x90	; 144
    1dd0:	f2 e2       	ldi	r31, 0x22	; 34
    1dd2:	c6 8b       	std	Z+22, r28	; 0x16
    1dd4:	d7 8b       	std	Z+23, r29	; 0x17
    1dd6:	80 91 8b 22 	lds	r24, 0x228B	; 0x80228b <udd_ctrl_payload_nb_trans>
    1dda:	90 91 8c 22 	lds	r25, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1dde:	20 91 29 24 	lds	r18, 0x2429	; 0x802429 <udd_g_ctrlreq+0x8>
    1de2:	30 91 2a 24 	lds	r19, 0x242A	; 0x80242a <udd_g_ctrlreq+0x9>
    1de6:	28 0f       	add	r18, r24
    1de8:	39 1f       	adc	r19, r25
    1dea:	20 8f       	std	Z+24, r18	; 0x18
    1dec:	31 8f       	std	Z+25, r19	; 0x19
    1dee:	c8 0f       	add	r28, r24
    1df0:	d9 1f       	adc	r29, r25
    1df2:	c0 93 8b 22 	sts	0x228B, r28	; 0x80228b <udd_ctrl_payload_nb_trans>
    1df6:	d0 93 8c 22 	sts	0x228C, r29	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1dfa:	e4 ea       	ldi	r30, 0xA4	; 164
    1dfc:	f2 e2       	ldi	r31, 0x22	; 34
    1dfe:	02 e0       	ldi	r16, 0x02	; 2
    1e00:	06 93       	lac	Z, r16
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	0f 91       	pop	r16
    1e08:	08 95       	ret

00001e0a <udd_ep_get_size>:
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	81 81       	ldd	r24, Z+1	; 0x01
    1e0e:	e8 2f       	mov	r30, r24
    1e10:	e7 70       	andi	r30, 0x07	; 7
    1e12:	8e 2f       	mov	r24, r30
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	fc 01       	movw	r30, r24
    1e18:	31 97       	sbiw	r30, 0x01	; 1
    1e1a:	e7 30       	cpi	r30, 0x07	; 7
    1e1c:	f1 05       	cpc	r31, r1
    1e1e:	d8 f4       	brcc	.+54     	; 0x1e56 <udd_ep_get_size+0x4c>
    1e20:	88 27       	eor	r24, r24
    1e22:	e2 50       	subi	r30, 0x02	; 2
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	8f 4f       	sbci	r24, 0xFF	; 255
    1e28:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__tablejump2__>
    1e2c:	80 e1       	ldi	r24, 0x10	; 16
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	08 95       	ret
    1e32:	80 e2       	ldi	r24, 0x20	; 32
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	08 95       	ret
    1e38:	80 e4       	ldi	r24, 0x40	; 64
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	08 95       	ret
    1e3e:	80 e8       	ldi	r24, 0x80	; 128
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	08 95       	ret
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	08 95       	ret
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	92 e0       	ldi	r25, 0x02	; 2
    1e4e:	08 95       	ret
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	93 e0       	ldi	r25, 0x03	; 3
    1e54:	08 95       	ret
    1e56:	88 e0       	ldi	r24, 0x08	; 8
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	08 95       	ret

00001e5c <udd_ep_get_job>:
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	2f 70       	andi	r18, 0x0F	; 15
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	22 0f       	add	r18, r18
    1e64:	33 1f       	adc	r19, r19
    1e66:	08 2e       	mov	r0, r24
    1e68:	00 0c       	add	r0, r0
    1e6a:	99 0b       	sbc	r25, r25
    1e6c:	88 27       	eor	r24, r24
    1e6e:	99 0f       	add	r25, r25
    1e70:	88 1f       	adc	r24, r24
    1e72:	99 27       	eor	r25, r25
    1e74:	82 0f       	add	r24, r18
    1e76:	93 1f       	adc	r25, r19
    1e78:	02 97       	sbiw	r24, 0x02	; 2
    1e7a:	9c 01       	movw	r18, r24
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	22 0f       	add	r18, r18
    1e82:	33 1f       	adc	r19, r19
    1e84:	22 0f       	add	r18, r18
    1e86:	33 1f       	adc	r19, r19
    1e88:	82 0f       	add	r24, r18
    1e8a:	93 1f       	adc	r25, r19
    1e8c:	89 5d       	subi	r24, 0xD9	; 217
    1e8e:	9d 4d       	sbci	r25, 0xDD	; 221
    1e90:	08 95       	ret

00001e92 <udd_ctrl_interrupt_tc_setup>:
    1e92:	0f 93       	push	r16
    1e94:	cf 93       	push	r28
    1e96:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1e9a:	80 ff       	sbrs	r24, 0
    1e9c:	65 c0       	rjmp	.+202    	; 0x1f68 <udd_ctrl_interrupt_tc_setup+0xd6>
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1ea4:	ec e9       	ldi	r30, 0x9C	; 156
    1ea6:	f2 e2       	ldi	r31, 0x22	; 34
    1ea8:	00 e8       	ldi	r16, 0x80	; 128
    1eaa:	06 93       	lac	Z, r16
    1eac:	e4 ea       	ldi	r30, 0xA4	; 164
    1eae:	f2 e2       	ldi	r31, 0x22	; 34
    1eb0:	00 e8       	ldi	r16, 0x80	; 128
    1eb2:	06 93       	lac	Z, r16
    1eb4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1eb8:	ec e9       	ldi	r30, 0x9C	; 156
    1eba:	f2 e2       	ldi	r31, 0x22	; 34
    1ebc:	00 e1       	ldi	r16, 0x10	; 16
    1ebe:	06 93       	lac	Z, r16
    1ec0:	80 91 8f 22 	lds	r24, 0x228F	; 0x80228f <udd_ep_control_state>
    1ec4:	88 23       	and	r24, r24
    1ec6:	29 f0       	breq	.+10     	; 0x1ed2 <udd_ctrl_interrupt_tc_setup+0x40>
    1ec8:	83 50       	subi	r24, 0x03	; 3
    1eca:	82 30       	cpi	r24, 0x02	; 2
    1ecc:	08 f4       	brcc	.+2      	; 0x1ed0 <udd_ctrl_interrupt_tc_setup+0x3e>
    1ece:	29 df       	rcall	.-430    	; 0x1d22 <udd_ctrl_endofrequest>
    1ed0:	e7 de       	rcall	.-562    	; 0x1ca0 <udd_ctrl_init>
    1ed2:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <udd_sram+0xe>
    1ed6:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <udd_sram+0xf>
    1eda:	08 97       	sbiw	r24, 0x08	; 8
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <udd_ctrl_interrupt_tc_setup+0x4e>
    1ede:	46 c0       	rjmp	.+140    	; 0x1f6c <udd_ctrl_interrupt_tc_setup+0xda>
    1ee0:	88 e0       	ldi	r24, 0x08	; 8
    1ee2:	eb e4       	ldi	r30, 0x4B	; 75
    1ee4:	f2 e2       	ldi	r31, 0x22	; 34
    1ee6:	a1 e2       	ldi	r26, 0x21	; 33
    1ee8:	b4 e2       	ldi	r27, 0x24	; 36
    1eea:	01 90       	ld	r0, Z+
    1eec:	0d 92       	st	X+, r0
    1eee:	8a 95       	dec	r24
    1ef0:	e1 f7       	brne	.-8      	; 0x1eea <udd_ctrl_interrupt_tc_setup+0x58>
    1ef2:	e8 ec       	ldi	r30, 0xC8	; 200
    1ef4:	f4 e0       	ldi	r31, 0x04	; 4
    1ef6:	80 81       	ld	r24, Z
    1ef8:	80 62       	ori	r24, 0x20	; 32
    1efa:	80 83       	st	Z, r24
    1efc:	80 81       	ld	r24, Z
    1efe:	80 62       	ori	r24, 0x20	; 32
    1f00:	80 83       	st	Z, r24
    1f02:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <udc_process_setup>
    1f06:	c8 2f       	mov	r28, r24
    1f08:	81 11       	cpse	r24, r1
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <udd_ctrl_interrupt_tc_setup+0x80>
    1f0c:	ee de       	rcall	.-548    	; 0x1cea <udd_ctrl_stall_data>
    1f0e:	c1 e0       	ldi	r28, 0x01	; 1
    1f10:	2e c0       	rjmp	.+92     	; 0x1f6e <udd_ctrl_interrupt_tc_setup+0xdc>
    1f12:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq>
    1f16:	88 23       	and	r24, r24
    1f18:	6c f4       	brge	.+26     	; 0x1f34 <udd_ctrl_interrupt_tc_setup+0xa2>
    1f1a:	10 92 8d 22 	sts	0x228D, r1	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    1f1e:	10 92 8e 22 	sts	0x228E, r1	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    1f22:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <udd_ctrl_payload_nb_trans>
    1f26:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
    1f30:	00 df       	rcall	.-512    	; 0x1d32 <udd_ctrl_in_sent>
    1f32:	1d c0       	rjmp	.+58     	; 0x1f6e <udd_ctrl_interrupt_tc_setup+0xdc>
    1f34:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    1f38:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    1f3c:	89 2b       	or	r24, r25
    1f3e:	11 f4       	brne	.+4      	; 0x1f44 <udd_ctrl_interrupt_tc_setup+0xb2>
    1f40:	e2 de       	rcall	.-572    	; 0x1d06 <udd_ctrl_send_zlp_in>
    1f42:	15 c0       	rjmp	.+42     	; 0x1f6e <udd_ctrl_interrupt_tc_setup+0xdc>
    1f44:	10 92 8d 22 	sts	0x228D, r1	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    1f48:	10 92 8e 22 	sts	0x228E, r1	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    1f4c:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <udd_ctrl_payload_nb_trans>
    1f50:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
    1f5a:	ec e9       	ldi	r30, 0x9C	; 156
    1f5c:	f2 e2       	ldi	r31, 0x22	; 34
    1f5e:	02 e0       	ldi	r16, 0x02	; 2
    1f60:	06 93       	lac	Z, r16
    1f62:	00 e2       	ldi	r16, 0x20	; 32
    1f64:	06 93       	lac	Z, r16
    1f66:	03 c0       	rjmp	.+6      	; 0x1f6e <udd_ctrl_interrupt_tc_setup+0xdc>
    1f68:	c0 e0       	ldi	r28, 0x00	; 0
    1f6a:	01 c0       	rjmp	.+2      	; 0x1f6e <udd_ctrl_interrupt_tc_setup+0xdc>
    1f6c:	c1 e0       	ldi	r28, 0x01	; 1
    1f6e:	8c 2f       	mov	r24, r28
    1f70:	cf 91       	pop	r28
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret

00001f76 <udd_ep_trans_complet>:
    1f76:	8f 92       	push	r8
    1f78:	9f 92       	push	r9
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	df 92       	push	r13
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	d8 2e       	mov	r13, r24
    1f8e:	66 df       	rcall	.-308    	; 0x1e5c <udd_ep_get_job>
    1f90:	8c 01       	movw	r16, r24
    1f92:	cd 2d       	mov	r28, r13
    1f94:	cf 70       	andi	r28, 0x0F	; 15
    1f96:	d0 e0       	ldi	r29, 0x00	; 0
    1f98:	ce 01       	movw	r24, r28
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	cd 2d       	mov	r28, r13
    1fa0:	0d 2c       	mov	r0, r13
    1fa2:	00 0c       	add	r0, r0
    1fa4:	dd 0b       	sbc	r29, r29
    1fa6:	cc 27       	eor	r28, r28
    1fa8:	dd 0f       	add	r29, r29
    1faa:	cc 1f       	adc	r28, r28
    1fac:	dd 27       	eor	r29, r29
    1fae:	c8 0f       	add	r28, r24
    1fb0:	d9 1f       	adc	r29, r25
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	9c 01       	movw	r18, r24
    1fc2:	24 56       	subi	r18, 0x64	; 100
    1fc4:	3d 4d       	sbci	r19, 0xDD	; 221
    1fc6:	79 01       	movw	r14, r18
    1fc8:	c9 01       	movw	r24, r18
    1fca:	1f df       	rcall	.-450    	; 0x1e0a <udd_ep_get_size>
    1fcc:	4c 01       	movw	r8, r24
    1fce:	dd 20       	and	r13, r13
    1fd0:	0c f0       	brlt	.+2      	; 0x1fd4 <udd_ep_trans_complet+0x5e>
    1fd2:	7b c0       	rjmp	.+246    	; 0x20ca <udd_ep_trans_complet+0x154>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	ee 0f       	add	r30, r30
    1fd8:	ff 1f       	adc	r31, r31
    1fda:	ee 0f       	add	r30, r30
    1fdc:	ff 1f       	adc	r31, r31
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	e0 57       	subi	r30, 0x70	; 112
    1fe4:	fd 4d       	sbci	r31, 0xDD	; 221
    1fe6:	22 89       	ldd	r18, Z+18	; 0x12
    1fe8:	33 89       	ldd	r19, Z+19	; 0x13
    1fea:	d8 01       	movw	r26, r16
    1fec:	15 96       	adiw	r26, 0x05	; 5
    1fee:	8d 91       	ld	r24, X+
    1ff0:	9c 91       	ld	r25, X
    1ff2:	16 97       	sbiw	r26, 0x06	; 6
    1ff4:	82 0f       	add	r24, r18
    1ff6:	93 1f       	adc	r25, r19
    1ff8:	15 96       	adiw	r26, 0x05	; 5
    1ffa:	8d 93       	st	X+, r24
    1ffc:	9c 93       	st	X, r25
    1ffe:	16 97       	sbiw	r26, 0x06	; 6
    2000:	13 96       	adiw	r26, 0x03	; 3
    2002:	2d 91       	ld	r18, X+
    2004:	3c 91       	ld	r19, X
    2006:	14 97       	sbiw	r26, 0x04	; 4
    2008:	82 17       	cp	r24, r18
    200a:	93 07       	cpc	r25, r19
    200c:	09 f4       	brne	.+2      	; 0x2010 <udd_ep_trans_complet+0x9a>
    200e:	47 c0       	rjmp	.+142    	; 0x209e <udd_ep_trans_complet+0x128>
    2010:	28 1b       	sub	r18, r24
    2012:	39 0b       	sbc	r19, r25
    2014:	21 15       	cp	r18, r1
    2016:	b4 e0       	ldi	r27, 0x04	; 4
    2018:	3b 07       	cpc	r19, r27
    201a:	40 f0       	brcs	.+16     	; 0x202c <udd_ep_trans_complet+0xb6>
    201c:	2f ef       	ldi	r18, 0xFF	; 255
    201e:	33 e0       	ldi	r19, 0x03	; 3
    2020:	c9 01       	movw	r24, r18
    2022:	b4 01       	movw	r22, r8
    2024:	0e 94 db 22 	call	0x45b6	; 0x45b6 <__udivmodhi4>
    2028:	28 1b       	sub	r18, r24
    202a:	39 0b       	sbc	r19, r25
    202c:	f8 01       	movw	r30, r16
    202e:	80 81       	ld	r24, Z
    2030:	81 ff       	sbrs	r24, 1
    2032:	0a c0       	rjmp	.+20     	; 0x2048 <udd_ep_trans_complet+0xd2>
    2034:	c9 01       	movw	r24, r18
    2036:	b4 01       	movw	r22, r8
    2038:	0e 94 db 22 	call	0x45b6	; 0x45b6 <__udivmodhi4>
    203c:	41 e0       	ldi	r20, 0x01	; 1
    203e:	89 2b       	or	r24, r25
    2040:	09 f0       	breq	.+2      	; 0x2044 <udd_ep_trans_complet+0xce>
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	84 2f       	mov	r24, r20
    2046:	01 c0       	rjmp	.+2      	; 0x204a <udd_ep_trans_complet+0xd4>
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	d8 01       	movw	r26, r16
    204c:	9c 91       	ld	r25, X
    204e:	80 fb       	bst	r24, 0
    2050:	91 f9       	bld	r25, 1
    2052:	9c 93       	st	X, r25
    2054:	fe 01       	movw	r30, r28
    2056:	ee 0f       	add	r30, r30
    2058:	ff 1f       	adc	r31, r31
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	e0 57       	subi	r30, 0x70	; 112
    2064:	fd 4d       	sbci	r31, 0xDD	; 221
    2066:	12 8a       	std	Z+18, r1	; 0x12
    2068:	13 8a       	std	Z+19, r1	; 0x13
    206a:	26 87       	std	Z+14, r18	; 0x0e
    206c:	37 87       	std	Z+15, r19	; 0x0f
    206e:	11 96       	adiw	r26, 0x01	; 1
    2070:	2d 91       	ld	r18, X+
    2072:	3c 91       	ld	r19, X
    2074:	12 97       	sbiw	r26, 0x02	; 2
    2076:	15 96       	adiw	r26, 0x05	; 5
    2078:	8d 91       	ld	r24, X+
    207a:	9c 91       	ld	r25, X
    207c:	16 97       	sbiw	r26, 0x06	; 6
    207e:	82 0f       	add	r24, r18
    2080:	93 1f       	adc	r25, r19
    2082:	cc 0f       	add	r28, r28
    2084:	dd 1f       	adc	r29, r29
    2086:	cc 0f       	add	r28, r28
    2088:	dd 1f       	adc	r29, r29
    208a:	cc 0f       	add	r28, r28
    208c:	dd 1f       	adc	r29, r29
    208e:	c0 56       	subi	r28, 0x60	; 96
    2090:	dd 4d       	sbci	r29, 0xDD	; 221
    2092:	88 83       	st	Y, r24
    2094:	99 83       	std	Y+1, r25	; 0x01
    2096:	f7 01       	movw	r30, r14
    2098:	02 e0       	ldi	r16, 0x02	; 2
    209a:	06 93       	lac	Z, r16
    209c:	e4 c0       	rjmp	.+456    	; 0x2266 <udd_ep_trans_complet+0x2f0>
    209e:	d8 01       	movw	r26, r16
    20a0:	8c 91       	ld	r24, X
    20a2:	81 ff       	sbrs	r24, 1
    20a4:	cd c0       	rjmp	.+410    	; 0x2240 <udd_ep_trans_complet+0x2ca>
    20a6:	8d 7f       	andi	r24, 0xFD	; 253
    20a8:	8c 93       	st	X, r24
    20aa:	cc 0f       	add	r28, r28
    20ac:	dd 1f       	adc	r29, r29
    20ae:	cc 0f       	add	r28, r28
    20b0:	dd 1f       	adc	r29, r29
    20b2:	cc 0f       	add	r28, r28
    20b4:	dd 1f       	adc	r29, r29
    20b6:	c0 57       	subi	r28, 0x70	; 112
    20b8:	dd 4d       	sbci	r29, 0xDD	; 221
    20ba:	1a 8a       	std	Y+18, r1	; 0x12
    20bc:	1b 8a       	std	Y+19, r1	; 0x13
    20be:	1e 86       	std	Y+14, r1	; 0x0e
    20c0:	1f 86       	std	Y+15, r1	; 0x0f
    20c2:	f7 01       	movw	r30, r14
    20c4:	02 e0       	ldi	r16, 0x02	; 2
    20c6:	06 93       	lac	Z, r16
    20c8:	ce c0       	rjmp	.+412    	; 0x2266 <udd_ep_trans_complet+0x2f0>
    20ca:	fe 01       	movw	r30, r28
    20cc:	ee 0f       	add	r30, r30
    20ce:	ff 1f       	adc	r31, r31
    20d0:	ee 0f       	add	r30, r30
    20d2:	ff 1f       	adc	r31, r31
    20d4:	ee 0f       	add	r30, r30
    20d6:	ff 1f       	adc	r31, r31
    20d8:	e0 57       	subi	r30, 0x70	; 112
    20da:	fd 4d       	sbci	r31, 0xDD	; 221
    20dc:	a6 84       	ldd	r10, Z+14	; 0x0e
    20de:	b7 84       	ldd	r11, Z+15	; 0x0f
    20e0:	d8 01       	movw	r26, r16
    20e2:	8c 91       	ld	r24, X
    20e4:	82 ff       	sbrs	r24, 2
    20e6:	1b c0       	rjmp	.+54     	; 0x211e <udd_ep_trans_complet+0x1a8>
    20e8:	11 96       	adiw	r26, 0x01	; 1
    20ea:	ed 91       	ld	r30, X+
    20ec:	fc 91       	ld	r31, X
    20ee:	12 97       	sbiw	r26, 0x02	; 2
    20f0:	15 96       	adiw	r26, 0x05	; 5
    20f2:	2d 91       	ld	r18, X+
    20f4:	3c 91       	ld	r19, X
    20f6:	16 97       	sbiw	r26, 0x06	; 6
    20f8:	13 96       	adiw	r26, 0x03	; 3
    20fa:	8d 91       	ld	r24, X+
    20fc:	9c 91       	ld	r25, X
    20fe:	14 97       	sbiw	r26, 0x04	; 4
    2100:	b4 01       	movw	r22, r8
    2102:	0e 94 db 22 	call	0x45b6	; 0x45b6 <__udivmodhi4>
    2106:	b0 e4       	ldi	r27, 0x40	; 64
    2108:	db 9e       	mul	r13, r27
    210a:	b0 01       	movw	r22, r0
    210c:	11 24       	eor	r1, r1
    210e:	69 59       	subi	r22, 0x99	; 153
    2110:	7e 4d       	sbci	r23, 0xDE	; 222
    2112:	ac 01       	movw	r20, r24
    2114:	cf 01       	movw	r24, r30
    2116:	82 0f       	add	r24, r18
    2118:	93 1f       	adc	r25, r19
    211a:	0e 94 28 23 	call	0x4650	; 0x4650 <memcpy>
    211e:	f8 01       	movw	r30, r16
    2120:	25 81       	ldd	r18, Z+5	; 0x05
    2122:	36 81       	ldd	r19, Z+6	; 0x06
    2124:	2a 0d       	add	r18, r10
    2126:	3b 1d       	adc	r19, r11
    2128:	25 83       	std	Z+5, r18	; 0x05
    212a:	36 83       	std	Z+6, r19	; 0x06
    212c:	83 81       	ldd	r24, Z+3	; 0x03
    212e:	94 81       	ldd	r25, Z+4	; 0x04
    2130:	82 17       	cp	r24, r18
    2132:	93 07       	cpc	r25, r19
    2134:	68 f4       	brcc	.+26     	; 0x2150 <udd_ep_trans_complet+0x1da>
    2136:	85 83       	std	Z+5, r24	; 0x05
    2138:	96 83       	std	Z+6, r25	; 0x06
    213a:	cc 0f       	add	r28, r28
    213c:	dd 1f       	adc	r29, r29
    213e:	cc 0f       	add	r28, r28
    2140:	dd 1f       	adc	r29, r29
    2142:	cc 0f       	add	r28, r28
    2144:	dd 1f       	adc	r29, r29
    2146:	c0 57       	subi	r28, 0x70	; 112
    2148:	dd 4d       	sbci	r29, 0xDD	; 221
    214a:	8a 89       	ldd	r24, Y+18	; 0x12
    214c:	9b 89       	ldd	r25, Y+19	; 0x13
    214e:	78 c0       	rjmp	.+240    	; 0x2240 <udd_ep_trans_complet+0x2ca>
    2150:	fe 01       	movw	r30, r28
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	e0 57       	subi	r30, 0x70	; 112
    2160:	fd 4d       	sbci	r31, 0xDD	; 221
    2162:	42 89       	ldd	r20, Z+18	; 0x12
    2164:	53 89       	ldd	r21, Z+19	; 0x13
    2166:	a4 16       	cp	r10, r20
    2168:	b5 06       	cpc	r11, r21
    216a:	09 f0       	breq	.+2      	; 0x216e <udd_ep_trans_complet+0x1f8>
    216c:	69 c0       	rjmp	.+210    	; 0x2240 <udd_ep_trans_complet+0x2ca>
    216e:	28 17       	cp	r18, r24
    2170:	39 07       	cpc	r19, r25
    2172:	09 f4       	brne	.+2      	; 0x2176 <udd_ep_trans_complet+0x200>
    2174:	65 c0       	rjmp	.+202    	; 0x2240 <udd_ep_trans_complet+0x2ca>
    2176:	ac 01       	movw	r20, r24
    2178:	42 1b       	sub	r20, r18
    217a:	53 0b       	sbc	r21, r19
    217c:	9a 01       	movw	r18, r20
    217e:	21 15       	cp	r18, r1
    2180:	54 e0       	ldi	r21, 0x04	; 4
    2182:	35 07       	cpc	r19, r21
    2184:	48 f0       	brcs	.+18     	; 0x2198 <udd_ep_trans_complet+0x222>
    2186:	2f ef       	ldi	r18, 0xFF	; 255
    2188:	33 e0       	ldi	r19, 0x03	; 3
    218a:	c9 01       	movw	r24, r18
    218c:	b4 01       	movw	r22, r8
    218e:	0e 94 db 22 	call	0x45b6	; 0x45b6 <__udivmodhi4>
    2192:	28 1b       	sub	r18, r24
    2194:	39 0b       	sbc	r19, r25
    2196:	06 c0       	rjmp	.+12     	; 0x21a4 <udd_ep_trans_complet+0x22e>
    2198:	c9 01       	movw	r24, r18
    219a:	b4 01       	movw	r22, r8
    219c:	0e 94 db 22 	call	0x45b6	; 0x45b6 <__udivmodhi4>
    21a0:	28 1b       	sub	r18, r24
    21a2:	39 0b       	sbc	r19, r25
    21a4:	fe 01       	movw	r30, r28
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	ee 0f       	add	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	ee 0f       	add	r30, r30
    21b0:	ff 1f       	adc	r31, r31
    21b2:	e0 57       	subi	r30, 0x70	; 112
    21b4:	fd 4d       	sbci	r31, 0xDD	; 221
    21b6:	16 86       	std	Z+14, r1	; 0x0e
    21b8:	17 86       	std	Z+15, r1	; 0x0f
    21ba:	28 15       	cp	r18, r8
    21bc:	39 05       	cpc	r19, r9
    21be:	00 f5       	brcc	.+64     	; 0x2200 <udd_ep_trans_complet+0x28a>
    21c0:	d8 01       	movw	r26, r16
    21c2:	8c 91       	ld	r24, X
    21c4:	84 60       	ori	r24, 0x04	; 4
    21c6:	8c 93       	st	X, r24
    21c8:	b0 e4       	ldi	r27, 0x40	; 64
    21ca:	db 9e       	mul	r13, r27
    21cc:	c0 01       	movw	r24, r0
    21ce:	11 24       	eor	r1, r1
    21d0:	89 59       	subi	r24, 0x99	; 153
    21d2:	9e 4d       	sbci	r25, 0xDE	; 222
    21d4:	fe 01       	movw	r30, r28
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	ee 0f       	add	r30, r30
    21e0:	ff 1f       	adc	r31, r31
    21e2:	e0 56       	subi	r30, 0x60	; 96
    21e4:	fd 4d       	sbci	r31, 0xDD	; 221
    21e6:	80 83       	st	Z, r24
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	cc 0f       	add	r28, r28
    21ec:	dd 1f       	adc	r29, r29
    21ee:	cc 0f       	add	r28, r28
    21f0:	dd 1f       	adc	r29, r29
    21f2:	cc 0f       	add	r28, r28
    21f4:	dd 1f       	adc	r29, r29
    21f6:	c0 57       	subi	r28, 0x70	; 112
    21f8:	dd 4d       	sbci	r29, 0xDD	; 221
    21fa:	8a 8a       	std	Y+18, r8	; 0x12
    21fc:	9b 8a       	std	Y+19, r9	; 0x13
    21fe:	1c c0       	rjmp	.+56     	; 0x2238 <udd_ep_trans_complet+0x2c2>
    2200:	f8 01       	movw	r30, r16
    2202:	41 81       	ldd	r20, Z+1	; 0x01
    2204:	52 81       	ldd	r21, Z+2	; 0x02
    2206:	85 81       	ldd	r24, Z+5	; 0x05
    2208:	96 81       	ldd	r25, Z+6	; 0x06
    220a:	84 0f       	add	r24, r20
    220c:	95 1f       	adc	r25, r21
    220e:	fe 01       	movw	r30, r28
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	e0 56       	subi	r30, 0x60	; 96
    221e:	fd 4d       	sbci	r31, 0xDD	; 221
    2220:	80 83       	st	Z, r24
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	cc 0f       	add	r28, r28
    2226:	dd 1f       	adc	r29, r29
    2228:	cc 0f       	add	r28, r28
    222a:	dd 1f       	adc	r29, r29
    222c:	cc 0f       	add	r28, r28
    222e:	dd 1f       	adc	r29, r29
    2230:	c0 57       	subi	r28, 0x70	; 112
    2232:	dd 4d       	sbci	r29, 0xDD	; 221
    2234:	2a 8b       	std	Y+18, r18	; 0x12
    2236:	3b 8b       	std	Y+19, r19	; 0x13
    2238:	f7 01       	movw	r30, r14
    223a:	02 e0       	ldi	r16, 0x02	; 2
    223c:	06 93       	lac	Z, r16
    223e:	13 c0       	rjmp	.+38     	; 0x2266 <udd_ep_trans_complet+0x2f0>
    2240:	d8 01       	movw	r26, r16
    2242:	8c 91       	ld	r24, X
    2244:	80 ff       	sbrs	r24, 0
    2246:	0f c0       	rjmp	.+30     	; 0x2266 <udd_ep_trans_complet+0x2f0>
    2248:	8e 7f       	andi	r24, 0xFE	; 254
    224a:	8c 93       	st	X, r24
    224c:	17 96       	adiw	r26, 0x07	; 7
    224e:	ed 91       	ld	r30, X+
    2250:	fc 91       	ld	r31, X
    2252:	18 97       	sbiw	r26, 0x08	; 8
    2254:	30 97       	sbiw	r30, 0x00	; 0
    2256:	39 f0       	breq	.+14     	; 0x2266 <udd_ep_trans_complet+0x2f0>
    2258:	15 96       	adiw	r26, 0x05	; 5
    225a:	6d 91       	ld	r22, X+
    225c:	7c 91       	ld	r23, X
    225e:	16 97       	sbiw	r26, 0x06	; 6
    2260:	4d 2d       	mov	r20, r13
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	19 95       	eicall
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	df 90       	pop	r13
    2274:	bf 90       	pop	r11
    2276:	af 90       	pop	r10
    2278:	9f 90       	pop	r9
    227a:	8f 90       	pop	r8
    227c:	08 95       	ret

0000227e <udd_attach>:
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	1f 92       	push	r1
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	8f b7       	in	r24, 0x3f	; 63
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	f8 94       	cli
    2290:	19 81       	ldd	r17, Y+1	; 0x01
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	cd dc       	rcall	.-1638   	; 0x1c30 <udd_sleep_mode>
    2296:	ea ec       	ldi	r30, 0xCA	; 202
    2298:	f4 e0       	ldi	r31, 0x04	; 4
    229a:	80 e4       	ldi	r24, 0x40	; 64
    229c:	80 83       	st	Z, r24
    229e:	80 e2       	ldi	r24, 0x20	; 32
    22a0:	80 83       	st	Z, r24
    22a2:	e1 ec       	ldi	r30, 0xC1	; 193
    22a4:	f4 e0       	ldi	r31, 0x04	; 4
    22a6:	80 81       	ld	r24, Z
    22a8:	81 60       	ori	r24, 0x01	; 1
    22aa:	80 83       	st	Z, r24
    22ac:	a9 ec       	ldi	r26, 0xC9	; 201
    22ae:	b4 e0       	ldi	r27, 0x04	; 4
    22b0:	8c 91       	ld	r24, X
    22b2:	82 60       	ori	r24, 0x02	; 2
    22b4:	8c 93       	st	X, r24
    22b6:	e8 ec       	ldi	r30, 0xC8	; 200
    22b8:	f4 e0       	ldi	r31, 0x04	; 4
    22ba:	80 81       	ld	r24, Z
    22bc:	80 64       	ori	r24, 0x40	; 64
    22be:	80 83       	st	Z, r24
    22c0:	8c 91       	ld	r24, X
    22c2:	81 60       	ori	r24, 0x01	; 1
    22c4:	8c 93       	st	X, r24
    22c6:	80 81       	ld	r24, Z
    22c8:	80 68       	ori	r24, 0x80	; 128
    22ca:	80 83       	st	Z, r24
    22cc:	1f bf       	out	0x3f, r17	; 63
    22ce:	0f 90       	pop	r0
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	1f 91       	pop	r17
    22d6:	08 95       	ret

000022d8 <udd_enable>:
    22d8:	0f 93       	push	r16
    22da:	1f 93       	push	r17
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	1f 92       	push	r1
    22e2:	1f 92       	push	r1
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	00 e6       	ldi	r16, 0x60	; 96
    22ea:	10 e0       	ldi	r17, 0x00	; 0
    22ec:	f8 01       	movw	r30, r16
    22ee:	10 82       	st	Z, r1
    22f0:	80 e3       	ldi	r24, 0x30	; 48
    22f2:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <sysclk_enable_usb>
    22f6:	e0 ec       	ldi	r30, 0xC0	; 192
    22f8:	f4 e0       	ldi	r31, 0x04	; 4
    22fa:	80 81       	ld	r24, Z
    22fc:	80 64       	ori	r24, 0x40	; 64
    22fe:	80 83       	st	Z, r24
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	f8 01       	movw	r30, r16
    2304:	80 83       	st	Z, r24
    2306:	8f b7       	in	r24, 0x3f	; 63
    2308:	8a 83       	std	Y+2, r24	; 0x02
    230a:	f8 94       	cli
    230c:	1a 81       	ldd	r17, Y+2	; 0x02
    230e:	e0 e9       	ldi	r30, 0x90	; 144
    2310:	f2 e2       	ldi	r31, 0x22	; 34
    2312:	15 86       	std	Z+13, r1	; 0x0d
    2314:	15 8a       	std	Z+21, r1	; 0x15
    2316:	15 8e       	std	Z+29, r1	; 0x1d
    2318:	15 a2       	std	Z+37, r1	; 0x25
    231a:	15 a6       	std	Z+45, r1	; 0x2d
    231c:	15 aa       	std	Z+53, r1	; 0x35
    231e:	e7 e2       	ldi	r30, 0x27	; 39
    2320:	f2 e2       	ldi	r31, 0x22	; 34
    2322:	80 81       	ld	r24, Z
    2324:	8e 7f       	andi	r24, 0xFE	; 254
    2326:	80 83       	st	Z, r24
    2328:	e0 e3       	ldi	r30, 0x30	; 48
    232a:	f2 e2       	ldi	r31, 0x22	; 34
    232c:	80 81       	ld	r24, Z
    232e:	8e 7f       	andi	r24, 0xFE	; 254
    2330:	80 83       	st	Z, r24
    2332:	e9 e3       	ldi	r30, 0x39	; 57
    2334:	f2 e2       	ldi	r31, 0x22	; 34
    2336:	80 81       	ld	r24, Z
    2338:	8e 7f       	andi	r24, 0xFE	; 254
    233a:	80 83       	st	Z, r24
    233c:	e2 e4       	ldi	r30, 0x42	; 66
    233e:	f2 e2       	ldi	r31, 0x22	; 34
    2340:	80 81       	ld	r24, Z
    2342:	8e 7f       	andi	r24, 0xFE	; 254
    2344:	80 83       	st	Z, r24
    2346:	6a e1       	ldi	r22, 0x1A	; 26
    2348:	70 e0       	ldi	r23, 0x00	; 0
    234a:	82 e0       	ldi	r24, 0x02	; 2
    234c:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
    2350:	8f 3f       	cpi	r24, 0xFF	; 255
    2352:	19 f0       	breq	.+6      	; 0x235a <udd_enable+0x82>
    2354:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2358:	03 c0       	rjmp	.+6      	; 0x2360 <udd_enable+0x88>
    235a:	8f e1       	ldi	r24, 0x1F	; 31
    235c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2360:	6b e1       	ldi	r22, 0x1B	; 27
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	82 e0       	ldi	r24, 0x02	; 2
    2366:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
    236a:	8f 3f       	cpi	r24, 0xFF	; 255
    236c:	19 f0       	breq	.+6      	; 0x2374 <udd_enable+0x9c>
    236e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2372:	03 c0       	rjmp	.+6      	; 0x237a <udd_enable+0xa2>
    2374:	8f e1       	ldi	r24, 0x1F	; 31
    2376:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    237a:	e0 ec       	ldi	r30, 0xC0	; 192
    237c:	f4 e0       	ldi	r31, 0x04	; 4
    237e:	80 81       	ld	r24, Z
    2380:	82 60       	ori	r24, 0x02	; 2
    2382:	80 83       	st	Z, r24
    2384:	80 81       	ld	r24, Z
    2386:	80 68       	ori	r24, 0x80	; 128
    2388:	80 83       	st	Z, r24
    238a:	80 81       	ld	r24, Z
    238c:	80 61       	ori	r24, 0x10	; 16
    238e:	80 83       	st	Z, r24
    2390:	8c e9       	ldi	r24, 0x9C	; 156
    2392:	92 e2       	ldi	r25, 0x22	; 34
    2394:	86 83       	std	Z+6, r24	; 0x06
    2396:	97 83       	std	Z+7, r25	; 0x07
    2398:	80 81       	ld	r24, Z
    239a:	80 62       	ori	r24, 0x20	; 32
    239c:	80 83       	st	Z, r24
    239e:	8f ef       	ldi	r24, 0xFF	; 255
    23a0:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    23a4:	e8 ec       	ldi	r30, 0xC8	; 200
    23a6:	f4 e0       	ldi	r31, 0x04	; 4
    23a8:	80 81       	ld	r24, Z
    23aa:	81 60       	ori	r24, 0x01	; 1
    23ac:	80 83       	st	Z, r24
    23ae:	10 92 d0 22 	sts	0x22D0, r1	; 0x8022d0 <udd_b_idle>
    23b2:	80 91 36 24 	lds	r24, 0x2436	; 0x802436 <sleepmgr_locks+0x5>
    23b6:	8f 3f       	cpi	r24, 0xFF	; 255
    23b8:	09 f4       	brne	.+2      	; 0x23bc <udd_enable+0xe4>
    23ba:	ff cf       	rjmp	.-2      	; 0x23ba <udd_enable+0xe2>
    23bc:	8f b7       	in	r24, 0x3f	; 63
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	f8 94       	cli
    23c2:	99 81       	ldd	r25, Y+1	; 0x01
    23c4:	e1 e3       	ldi	r30, 0x31	; 49
    23c6:	f4 e2       	ldi	r31, 0x24	; 36
    23c8:	85 81       	ldd	r24, Z+5	; 0x05
    23ca:	8f 5f       	subi	r24, 0xFF	; 255
    23cc:	85 83       	std	Z+5, r24	; 0x05
    23ce:	9f bf       	out	0x3f, r25	; 63
    23d0:	56 df       	rcall	.-340    	; 0x227e <udd_attach>
    23d2:	1f bf       	out	0x3f, r17	; 63
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	08 95       	ret

000023e2 <udd_is_high_speed>:
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	08 95       	ret

000023e6 <udd_set_address>:
    23e6:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    23ea:	08 95       	ret

000023ec <udd_getaddress>:
    23ec:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    23f0:	08 95       	ret

000023f2 <udd_get_frame_number>:
    23f2:	80 91 cc 22 	lds	r24, 0x22CC	; 0x8022cc <udd_sram+0x3c>
    23f6:	90 91 cd 22 	lds	r25, 0x22CD	; 0x8022cd <udd_sram+0x3d>
    23fa:	08 95       	ret

000023fc <udd_get_micro_frame_number>:
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	08 95       	ret

00002402 <udd_set_setup_payload>:
    2402:	e1 e2       	ldi	r30, 0x21	; 33
    2404:	f4 e2       	ldi	r31, 0x24	; 36
    2406:	80 87       	std	Z+8, r24	; 0x08
    2408:	91 87       	std	Z+9, r25	; 0x09
    240a:	62 87       	std	Z+10, r22	; 0x0a
    240c:	73 87       	std	Z+11, r23	; 0x0b
    240e:	08 95       	ret

00002410 <udd_ep_alloc>:
    2410:	28 2f       	mov	r18, r24
    2412:	2f 70       	andi	r18, 0x0F	; 15
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	22 0f       	add	r18, r18
    2418:	33 1f       	adc	r19, r19
    241a:	08 2e       	mov	r0, r24
    241c:	00 0c       	add	r0, r0
    241e:	99 0b       	sbc	r25, r25
    2420:	88 27       	eor	r24, r24
    2422:	99 0f       	add	r25, r25
    2424:	88 1f       	adc	r24, r24
    2426:	99 27       	eor	r25, r25
    2428:	82 0f       	add	r24, r18
    242a:	93 1f       	adc	r25, r19
    242c:	fc 01       	movw	r30, r24
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	e0 57       	subi	r30, 0x70	; 112
    243c:	fd 4d       	sbci	r31, 0xDD	; 221
    243e:	25 85       	ldd	r18, Z+13	; 0x0d
    2440:	20 7c       	andi	r18, 0xC0	; 192
    2442:	09 f0       	breq	.+2      	; 0x2446 <udd_ep_alloc+0x36>
    2444:	69 c0       	rjmp	.+210    	; 0x2518 <udd_ep_alloc+0x108>
    2446:	63 70       	andi	r22, 0x03	; 3
    2448:	61 30       	cpi	r22, 0x01	; 1
    244a:	11 f0       	breq	.+4      	; 0x2450 <udd_ep_alloc+0x40>
    244c:	18 f4       	brcc	.+6      	; 0x2454 <udd_ep_alloc+0x44>
    244e:	04 c0       	rjmp	.+8      	; 0x2458 <udd_ep_alloc+0x48>
    2450:	60 ec       	ldi	r22, 0xC0	; 192
    2452:	03 c0       	rjmp	.+6      	; 0x245a <udd_ep_alloc+0x4a>
    2454:	60 e8       	ldi	r22, 0x80	; 128
    2456:	01 c0       	rjmp	.+2      	; 0x245a <udd_ep_alloc+0x4a>
    2458:	60 e4       	ldi	r22, 0x40	; 64
    245a:	40 38       	cpi	r20, 0x80	; 128
    245c:	51 05       	cpc	r21, r1
    245e:	e9 f0       	breq	.+58     	; 0x249a <udd_ep_alloc+0x8a>
    2460:	50 f4       	brcc	.+20     	; 0x2476 <udd_ep_alloc+0x66>
    2462:	40 32       	cpi	r20, 0x20	; 32
    2464:	51 05       	cpc	r21, r1
    2466:	a9 f0       	breq	.+42     	; 0x2492 <udd_ep_alloc+0x82>
    2468:	40 34       	cpi	r20, 0x40	; 64
    246a:	51 05       	cpc	r21, r1
    246c:	a1 f0       	breq	.+40     	; 0x2496 <udd_ep_alloc+0x86>
    246e:	40 31       	cpi	r20, 0x10	; 16
    2470:	51 05       	cpc	r21, r1
    2472:	d9 f4       	brne	.+54     	; 0x24aa <udd_ep_alloc+0x9a>
    2474:	0c c0       	rjmp	.+24     	; 0x248e <udd_ep_alloc+0x7e>
    2476:	41 15       	cp	r20, r1
    2478:	22 e0       	ldi	r18, 0x02	; 2
    247a:	52 07       	cpc	r21, r18
    247c:	91 f0       	breq	.+36     	; 0x24a2 <udd_ep_alloc+0x92>
    247e:	4f 3f       	cpi	r20, 0xFF	; 255
    2480:	23 e0       	ldi	r18, 0x03	; 3
    2482:	52 07       	cpc	r21, r18
    2484:	81 f0       	breq	.+32     	; 0x24a6 <udd_ep_alloc+0x96>
    2486:	41 15       	cp	r20, r1
    2488:	51 40       	sbci	r21, 0x01	; 1
    248a:	79 f4       	brne	.+30     	; 0x24aa <udd_ep_alloc+0x9a>
    248c:	08 c0       	rjmp	.+16     	; 0x249e <udd_ep_alloc+0x8e>
    248e:	21 e0       	ldi	r18, 0x01	; 1
    2490:	0d c0       	rjmp	.+26     	; 0x24ac <udd_ep_alloc+0x9c>
    2492:	22 e0       	ldi	r18, 0x02	; 2
    2494:	0b c0       	rjmp	.+22     	; 0x24ac <udd_ep_alloc+0x9c>
    2496:	23 e0       	ldi	r18, 0x03	; 3
    2498:	09 c0       	rjmp	.+18     	; 0x24ac <udd_ep_alloc+0x9c>
    249a:	24 e0       	ldi	r18, 0x04	; 4
    249c:	07 c0       	rjmp	.+14     	; 0x24ac <udd_ep_alloc+0x9c>
    249e:	25 e0       	ldi	r18, 0x05	; 5
    24a0:	05 c0       	rjmp	.+10     	; 0x24ac <udd_ep_alloc+0x9c>
    24a2:	26 e0       	ldi	r18, 0x06	; 6
    24a4:	03 c0       	rjmp	.+6      	; 0x24ac <udd_ep_alloc+0x9c>
    24a6:	27 e0       	ldi	r18, 0x07	; 7
    24a8:	01 c0       	rjmp	.+2      	; 0x24ac <udd_ep_alloc+0x9c>
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	fc 01       	movw	r30, r24
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	ee 0f       	add	r30, r30
    24b4:	ff 1f       	adc	r31, r31
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	e0 57       	subi	r30, 0x70	; 112
    24bc:	fd 4d       	sbci	r31, 0xDD	; 221
    24be:	15 86       	std	Z+13, r1	; 0x0d
    24c0:	36 e0       	ldi	r19, 0x06	; 6
    24c2:	34 87       	std	Z+12, r19	; 0x0c
    24c4:	26 2b       	or	r18, r22
    24c6:	25 87       	std	Z+13, r18	; 0x0d
    24c8:	fc 01       	movw	r30, r24
    24ca:	ee 0f       	add	r30, r30
    24cc:	ff 1f       	adc	r31, r31
    24ce:	ee 0f       	add	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	ee 0f       	add	r30, r30
    24d4:	ff 1f       	adc	r31, r31
    24d6:	e0 57       	subi	r30, 0x70	; 112
    24d8:	fd 4d       	sbci	r31, 0xDD	; 221
    24da:	25 85       	ldd	r18, Z+13	; 0x0d
    24dc:	20 7c       	andi	r18, 0xC0	; 192
    24de:	20 3c       	cpi	r18, 0xC0	; 192
    24e0:	69 f4       	brne	.+26     	; 0x24fc <udd_ep_alloc+0xec>
    24e2:	fc 01       	movw	r30, r24
    24e4:	ee 0f       	add	r30, r30
    24e6:	ff 1f       	adc	r31, r31
    24e8:	ee 0f       	add	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	ee 0f       	add	r30, r30
    24ee:	ff 1f       	adc	r31, r31
    24f0:	e0 57       	subi	r30, 0x70	; 112
    24f2:	fd 4d       	sbci	r31, 0xDD	; 221
    24f4:	25 85       	ldd	r18, Z+13	; 0x0d
    24f6:	27 70       	andi	r18, 0x07	; 7
    24f8:	27 30       	cpi	r18, 0x07	; 7
    24fa:	81 f0       	breq	.+32     	; 0x251c <udd_ep_alloc+0x10c>
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	fc 01       	movw	r30, r24
    250a:	e0 57       	subi	r30, 0x70	; 112
    250c:	fd 4d       	sbci	r31, 0xDD	; 221
    250e:	85 85       	ldd	r24, Z+13	; 0x0d
    2510:	80 62       	ori	r24, 0x20	; 32
    2512:	85 87       	std	Z+13, r24	; 0x0d
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	08 95       	ret
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	08 95       	ret
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	08 95       	ret

00002520 <udd_ep_is_halted>:
    2520:	e8 2f       	mov	r30, r24
    2522:	ef 70       	andi	r30, 0x0F	; 15
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	ee 0f       	add	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	08 2e       	mov	r0, r24
    252c:	00 0c       	add	r0, r0
    252e:	99 0b       	sbc	r25, r25
    2530:	88 27       	eor	r24, r24
    2532:	99 0f       	add	r25, r25
    2534:	88 1f       	adc	r24, r24
    2536:	99 27       	eor	r25, r25
    2538:	e8 0f       	add	r30, r24
    253a:	f9 1f       	adc	r31, r25
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	ee 0f       	add	r30, r30
    2542:	ff 1f       	adc	r31, r31
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	e0 57       	subi	r30, 0x70	; 112
    254a:	fd 4d       	sbci	r31, 0xDD	; 221
    254c:	85 85       	ldd	r24, Z+13	; 0x0d
    254e:	82 fb       	bst	r24, 2
    2550:	88 27       	eor	r24, r24
    2552:	80 f9       	bld	r24, 0
    2554:	08 95       	ret

00002556 <udd_ep_clear_halt>:
    2556:	0f 93       	push	r16
    2558:	28 2f       	mov	r18, r24
    255a:	2f 70       	andi	r18, 0x0F	; 15
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	a9 01       	movw	r20, r18
    2560:	44 0f       	add	r20, r20
    2562:	55 1f       	adc	r21, r21
    2564:	28 2f       	mov	r18, r24
    2566:	08 2e       	mov	r0, r24
    2568:	00 0c       	add	r0, r0
    256a:	33 0b       	sbc	r19, r19
    256c:	22 27       	eor	r18, r18
    256e:	33 0f       	add	r19, r19
    2570:	22 1f       	adc	r18, r18
    2572:	33 27       	eor	r19, r19
    2574:	24 0f       	add	r18, r20
    2576:	35 1f       	adc	r19, r21
    2578:	a9 01       	movw	r20, r18
    257a:	44 0f       	add	r20, r20
    257c:	55 1f       	adc	r21, r21
    257e:	44 0f       	add	r20, r20
    2580:	55 1f       	adc	r21, r21
    2582:	44 0f       	add	r20, r20
    2584:	55 1f       	adc	r21, r21
    2586:	fa 01       	movw	r30, r20
    2588:	e4 56       	subi	r30, 0x64	; 100
    258a:	fd 4d       	sbci	r31, 0xDD	; 221
    258c:	01 e0       	ldi	r16, 0x01	; 1
    258e:	06 93       	lac	Z, r16
    2590:	fa 01       	movw	r30, r20
    2592:	e0 57       	subi	r30, 0x70	; 112
    2594:	fd 4d       	sbci	r31, 0xDD	; 221
    2596:	95 85       	ldd	r25, Z+13	; 0x0d
    2598:	92 ff       	sbrs	r25, 2
    259a:	11 c0       	rjmp	.+34     	; 0x25be <udd_ep_clear_halt+0x68>
    259c:	fa 01       	movw	r30, r20
    259e:	e0 57       	subi	r30, 0x70	; 112
    25a0:	fd 4d       	sbci	r31, 0xDD	; 221
    25a2:	95 85       	ldd	r25, Z+13	; 0x0d
    25a4:	9b 7f       	andi	r25, 0xFB	; 251
    25a6:	95 87       	std	Z+13, r25	; 0x0d
    25a8:	59 dc       	rcall	.-1870   	; 0x1e5c <udd_ep_get_job>
    25aa:	fc 01       	movw	r30, r24
    25ac:	80 81       	ld	r24, Z
    25ae:	80 ff       	sbrs	r24, 0
    25b0:	06 c0       	rjmp	.+12     	; 0x25be <udd_ep_clear_halt+0x68>
    25b2:	8e 7f       	andi	r24, 0xFE	; 254
    25b4:	80 83       	st	Z, r24
    25b6:	07 80       	ldd	r0, Z+7	; 0x07
    25b8:	f0 85       	ldd	r31, Z+8	; 0x08
    25ba:	e0 2d       	mov	r30, r0
    25bc:	19 95       	eicall
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	0f 91       	pop	r16
    25c2:	08 95       	ret

000025c4 <udd_ep_run>:
    25c4:	6f 92       	push	r6
    25c6:	7f 92       	push	r7
    25c8:	8f 92       	push	r8
    25ca:	9f 92       	push	r9
    25cc:	af 92       	push	r10
    25ce:	bf 92       	push	r11
    25d0:	cf 92       	push	r12
    25d2:	df 92       	push	r13
    25d4:	ef 92       	push	r14
    25d6:	ff 92       	push	r15
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	1f 92       	push	r1
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	78 2e       	mov	r7, r24
    25e8:	66 2e       	mov	r6, r22
    25ea:	4a 01       	movw	r8, r20
    25ec:	59 01       	movw	r10, r18
    25ee:	36 dc       	rcall	.-1940   	; 0x1e5c <udd_ep_get_job>
    25f0:	6c 01       	movw	r12, r24
    25f2:	27 2d       	mov	r18, r7
    25f4:	87 2d       	mov	r24, r7
    25f6:	8f 70       	andi	r24, 0x0F	; 15
    25f8:	e8 2e       	mov	r14, r24
    25fa:	f1 2c       	mov	r15, r1
    25fc:	c7 01       	movw	r24, r14
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	e7 2c       	mov	r14, r7
    2604:	07 2c       	mov	r0, r7
    2606:	00 0c       	add	r0, r0
    2608:	ff 08       	sbc	r15, r15
    260a:	ee 24       	eor	r14, r14
    260c:	ff 0c       	add	r15, r15
    260e:	ee 1c       	adc	r14, r14
    2610:	ff 24       	eor	r15, r15
    2612:	e8 0e       	add	r14, r24
    2614:	f9 1e       	adc	r15, r25
    2616:	f7 01       	movw	r30, r14
    2618:	ee 0f       	add	r30, r30
    261a:	ff 1f       	adc	r31, r31
    261c:	ee 0f       	add	r30, r30
    261e:	ff 1f       	adc	r31, r31
    2620:	ee 0f       	add	r30, r30
    2622:	ff 1f       	adc	r31, r31
    2624:	e0 57       	subi	r30, 0x70	; 112
    2626:	fd 4d       	sbci	r31, 0xDD	; 221
    2628:	85 85       	ldd	r24, Z+13	; 0x0d
    262a:	80 7c       	andi	r24, 0xC0	; 192
    262c:	09 f4       	brne	.+2      	; 0x2630 <udd_ep_run+0x6c>
    262e:	82 c0       	rjmp	.+260    	; 0x2734 <udd_ep_run+0x170>
    2630:	f7 01       	movw	r30, r14
    2632:	ee 0f       	add	r30, r30
    2634:	ff 1f       	adc	r31, r31
    2636:	ee 0f       	add	r30, r30
    2638:	ff 1f       	adc	r31, r31
    263a:	ee 0f       	add	r30, r30
    263c:	ff 1f       	adc	r31, r31
    263e:	e0 57       	subi	r30, 0x70	; 112
    2640:	fd 4d       	sbci	r31, 0xDD	; 221
    2642:	85 85       	ldd	r24, Z+13	; 0x0d
    2644:	80 7c       	andi	r24, 0xC0	; 192
    2646:	80 3c       	cpi	r24, 0xC0	; 192
    2648:	61 f0       	breq	.+24     	; 0x2662 <udd_ep_run+0x9e>
    264a:	f7 01       	movw	r30, r14
    264c:	ee 0f       	add	r30, r30
    264e:	ff 1f       	adc	r31, r31
    2650:	ee 0f       	add	r30, r30
    2652:	ff 1f       	adc	r31, r31
    2654:	ee 0f       	add	r30, r30
    2656:	ff 1f       	adc	r31, r31
    2658:	e0 57       	subi	r30, 0x70	; 112
    265a:	fd 4d       	sbci	r31, 0xDD	; 221
    265c:	85 85       	ldd	r24, Z+13	; 0x0d
    265e:	82 fd       	sbrc	r24, 2
    2660:	6b c0       	rjmp	.+214    	; 0x2738 <udd_ep_run+0x174>
    2662:	8f b7       	in	r24, 0x3f	; 63
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	f8 94       	cli
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	f6 01       	movw	r30, r12
    266c:	90 81       	ld	r25, Z
    266e:	90 ff       	sbrs	r25, 0
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <udd_ep_run+0xb4>
    2672:	8f bf       	out	0x3f, r24	; 63
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	61 c0       	rjmp	.+194    	; 0x273a <udd_ep_run+0x176>
    2678:	f6 01       	movw	r30, r12
    267a:	90 81       	ld	r25, Z
    267c:	91 60       	ori	r25, 0x01	; 1
    267e:	90 83       	st	Z, r25
    2680:	8f bf       	out	0x3f, r24	; 63
    2682:	81 82       	std	Z+1, r8	; 0x01
    2684:	92 82       	std	Z+2, r9	; 0x02
    2686:	a3 82       	std	Z+3, r10	; 0x03
    2688:	b4 82       	std	Z+4, r11	; 0x04
    268a:	15 82       	std	Z+5, r1	; 0x05
    268c:	16 82       	std	Z+6, r1	; 0x06
    268e:	07 83       	std	Z+7, r16	; 0x07
    2690:	10 87       	std	Z+8, r17	; 0x08
    2692:	61 10       	cpse	r6, r1
    2694:	06 c0       	rjmp	.+12     	; 0x26a2 <udd_ep_run+0xde>
    2696:	91 e0       	ldi	r25, 0x01	; 1
    2698:	a1 14       	cp	r10, r1
    269a:	b1 04       	cpc	r11, r1
    269c:	19 f0       	breq	.+6      	; 0x26a4 <udd_ep_run+0xe0>
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	01 c0       	rjmp	.+2      	; 0x26a4 <udd_ep_run+0xe0>
    26a2:	91 e0       	ldi	r25, 0x01	; 1
    26a4:	f6 01       	movw	r30, r12
    26a6:	80 81       	ld	r24, Z
    26a8:	90 fb       	bst	r25, 0
    26aa:	81 f9       	bld	r24, 1
    26ac:	8b 7f       	andi	r24, 0xFB	; 251
    26ae:	80 83       	st	Z, r24
    26b0:	22 23       	and	r18, r18
    26b2:	64 f4       	brge	.+24     	; 0x26cc <udd_ep_run+0x108>
    26b4:	f7 01       	movw	r30, r14
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	ee 0f       	add	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	ee 0f       	add	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	e0 57       	subi	r30, 0x70	; 112
    26c4:	fd 4d       	sbci	r31, 0xDD	; 221
    26c6:	12 8a       	std	Z+18, r1	; 0x12
    26c8:	13 8a       	std	Z+19, r1	; 0x13
    26ca:	30 c0       	rjmp	.+96     	; 0x272c <udd_ep_run+0x168>
    26cc:	f7 01       	movw	r30, r14
    26ce:	ee 0f       	add	r30, r30
    26d0:	ff 1f       	adc	r31, r31
    26d2:	ee 0f       	add	r30, r30
    26d4:	ff 1f       	adc	r31, r31
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	e0 57       	subi	r30, 0x70	; 112
    26dc:	fd 4d       	sbci	r31, 0xDD	; 221
    26de:	85 85       	ldd	r24, Z+13	; 0x0d
    26e0:	80 7c       	andi	r24, 0xC0	; 192
    26e2:	80 3c       	cpi	r24, 0xC0	; 192
    26e4:	b1 f4       	brne	.+44     	; 0x2712 <udd_ep_run+0x14e>
    26e6:	c7 01       	movw	r24, r14
    26e8:	88 0f       	add	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	84 56       	subi	r24, 0x64	; 100
    26f6:	9d 4d       	sbci	r25, 0xDD	; 221
    26f8:	88 db       	rcall	.-2288   	; 0x1e0a <udd_ep_get_size>
    26fa:	bc 01       	movw	r22, r24
    26fc:	c5 01       	movw	r24, r10
    26fe:	0e 94 db 22 	call	0x45b6	; 0x45b6 <__udivmodhi4>
    2702:	89 2b       	or	r24, r25
    2704:	31 f0       	breq	.+12     	; 0x2712 <udd_ep_run+0x14e>
    2706:	f6 01       	movw	r30, r12
    2708:	80 81       	ld	r24, Z
    270a:	8e 7f       	andi	r24, 0xFE	; 254
    270c:	80 83       	st	Z, r24
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	14 c0       	rjmp	.+40     	; 0x273a <udd_ep_run+0x176>
    2712:	f7 01       	movw	r30, r14
    2714:	ee 0f       	add	r30, r30
    2716:	ff 1f       	adc	r31, r31
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	e0 57       	subi	r30, 0x70	; 112
    2722:	fd 4d       	sbci	r31, 0xDD	; 221
    2724:	16 86       	std	Z+14, r1	; 0x0e
    2726:	17 86       	std	Z+15, r1	; 0x0f
    2728:	12 8a       	std	Z+18, r1	; 0x12
    272a:	13 8a       	std	Z+19, r1	; 0x13
    272c:	87 2d       	mov	r24, r7
    272e:	23 dc       	rcall	.-1978   	; 0x1f76 <udd_ep_trans_complet>
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	03 c0       	rjmp	.+6      	; 0x273a <udd_ep_run+0x176>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	01 c0       	rjmp	.+2      	; 0x273a <udd_ep_run+0x176>
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	0f 90       	pop	r0
    273c:	df 91       	pop	r29
    273e:	cf 91       	pop	r28
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	ff 90       	pop	r15
    2746:	ef 90       	pop	r14
    2748:	df 90       	pop	r13
    274a:	cf 90       	pop	r12
    274c:	bf 90       	pop	r11
    274e:	af 90       	pop	r10
    2750:	9f 90       	pop	r9
    2752:	8f 90       	pop	r8
    2754:	7f 90       	pop	r7
    2756:	6f 90       	pop	r6
    2758:	08 95       	ret

0000275a <udd_ep_abort>:
    275a:	ff 92       	push	r15
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	18 2f       	mov	r17, r24
    2766:	c8 2f       	mov	r28, r24
    2768:	cf 70       	andi	r28, 0x0F	; 15
    276a:	d0 e0       	ldi	r29, 0x00	; 0
    276c:	ce 01       	movw	r24, r28
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	c1 2f       	mov	r28, r17
    2774:	01 2e       	mov	r0, r17
    2776:	00 0c       	add	r0, r0
    2778:	dd 0b       	sbc	r29, r29
    277a:	cc 27       	eor	r28, r28
    277c:	dd 0f       	add	r29, r29
    277e:	cc 1f       	adc	r28, r28
    2780:	dd 27       	eor	r29, r29
    2782:	c8 0f       	add	r28, r24
    2784:	d9 1f       	adc	r29, r25
    2786:	81 2f       	mov	r24, r17
    2788:	69 db       	rcall	.-2350   	; 0x1e5c <udd_ep_get_job>
    278a:	dc 01       	movw	r26, r24
    278c:	fe 01       	movw	r30, r28
    278e:	ee 0f       	add	r30, r30
    2790:	ff 1f       	adc	r31, r31
    2792:	ee 0f       	add	r30, r30
    2794:	ff 1f       	adc	r31, r31
    2796:	ee 0f       	add	r30, r30
    2798:	ff 1f       	adc	r31, r31
    279a:	e4 56       	subi	r30, 0x64	; 100
    279c:	fd 4d       	sbci	r31, 0xDD	; 221
    279e:	02 e0       	ldi	r16, 0x02	; 2
    27a0:	05 93       	las	Z, r16
    27a2:	8c 91       	ld	r24, X
    27a4:	80 ff       	sbrs	r24, 0
    27a6:	22 c0       	rjmp	.+68     	; 0x27ec <udd_ep_abort+0x92>
    27a8:	8e 7f       	andi	r24, 0xFE	; 254
    27aa:	8c 93       	st	X, r24
    27ac:	17 96       	adiw	r26, 0x07	; 7
    27ae:	ed 91       	ld	r30, X+
    27b0:	fc 91       	ld	r31, X
    27b2:	18 97       	sbiw	r26, 0x08	; 8
    27b4:	30 97       	sbiw	r30, 0x00	; 0
    27b6:	d1 f0       	breq	.+52     	; 0x27ec <udd_ep_abort+0x92>
    27b8:	11 23       	and	r17, r17
    27ba:	5c f4       	brge	.+22     	; 0x27d2 <udd_ep_abort+0x78>
    27bc:	cc 0f       	add	r28, r28
    27be:	dd 1f       	adc	r29, r29
    27c0:	cc 0f       	add	r28, r28
    27c2:	dd 1f       	adc	r29, r29
    27c4:	cc 0f       	add	r28, r28
    27c6:	dd 1f       	adc	r29, r29
    27c8:	c0 57       	subi	r28, 0x70	; 112
    27ca:	dd 4d       	sbci	r29, 0xDD	; 221
    27cc:	6a 89       	ldd	r22, Y+18	; 0x12
    27ce:	7b 89       	ldd	r23, Y+19	; 0x13
    27d0:	0a c0       	rjmp	.+20     	; 0x27e6 <udd_ep_abort+0x8c>
    27d2:	cc 0f       	add	r28, r28
    27d4:	dd 1f       	adc	r29, r29
    27d6:	cc 0f       	add	r28, r28
    27d8:	dd 1f       	adc	r29, r29
    27da:	cc 0f       	add	r28, r28
    27dc:	dd 1f       	adc	r29, r29
    27de:	c0 57       	subi	r28, 0x70	; 112
    27e0:	dd 4d       	sbci	r29, 0xDD	; 221
    27e2:	6e 85       	ldd	r22, Y+14	; 0x0e
    27e4:	7f 85       	ldd	r23, Y+15	; 0x0f
    27e6:	41 2f       	mov	r20, r17
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	19 95       	eicall
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	ff 90       	pop	r15
    27f6:	08 95       	ret

000027f8 <udd_ep_free>:
    27f8:	cf 93       	push	r28
    27fa:	c8 2f       	mov	r28, r24
    27fc:	ae df       	rcall	.-164    	; 0x275a <udd_ep_abort>
    27fe:	ec 2f       	mov	r30, r28
    2800:	ef 70       	andi	r30, 0x0F	; 15
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	ee 0f       	add	r30, r30
    2806:	ff 1f       	adc	r31, r31
    2808:	8c 2f       	mov	r24, r28
    280a:	cc 0f       	add	r28, r28
    280c:	99 0b       	sbc	r25, r25
    280e:	88 27       	eor	r24, r24
    2810:	99 0f       	add	r25, r25
    2812:	88 1f       	adc	r24, r24
    2814:	99 27       	eor	r25, r25
    2816:	e8 0f       	add	r30, r24
    2818:	f9 1f       	adc	r31, r25
    281a:	ee 0f       	add	r30, r30
    281c:	ff 1f       	adc	r31, r31
    281e:	ee 0f       	add	r30, r30
    2820:	ff 1f       	adc	r31, r31
    2822:	ee 0f       	add	r30, r30
    2824:	ff 1f       	adc	r31, r31
    2826:	e0 57       	subi	r30, 0x70	; 112
    2828:	fd 4d       	sbci	r31, 0xDD	; 221
    282a:	15 86       	std	Z+13, r1	; 0x0d
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <udd_ep_set_halt>:
    2830:	e8 2f       	mov	r30, r24
    2832:	ef 70       	andi	r30, 0x0F	; 15
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	28 2f       	mov	r18, r24
    283c:	08 2e       	mov	r0, r24
    283e:	00 0c       	add	r0, r0
    2840:	33 0b       	sbc	r19, r19
    2842:	22 27       	eor	r18, r18
    2844:	33 0f       	add	r19, r19
    2846:	22 1f       	adc	r18, r18
    2848:	33 27       	eor	r19, r19
    284a:	e2 0f       	add	r30, r18
    284c:	f3 1f       	adc	r31, r19
    284e:	ee 0f       	add	r30, r30
    2850:	ff 1f       	adc	r31, r31
    2852:	ee 0f       	add	r30, r30
    2854:	ff 1f       	adc	r31, r31
    2856:	ee 0f       	add	r30, r30
    2858:	ff 1f       	adc	r31, r31
    285a:	e0 57       	subi	r30, 0x70	; 112
    285c:	fd 4d       	sbci	r31, 0xDD	; 221
    285e:	95 85       	ldd	r25, Z+13	; 0x0d
    2860:	94 60       	ori	r25, 0x04	; 4
    2862:	95 87       	std	Z+13, r25	; 0x0d
    2864:	7a df       	rcall	.-268    	; 0x275a <udd_ep_abort>
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	08 95       	ret

0000286a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    286a:	1f 92       	push	r1
    286c:	0f 92       	push	r0
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	0f 92       	push	r0
    2872:	11 24       	eor	r1, r1
    2874:	0b b6       	in	r0, 0x3b	; 59
    2876:	0f 92       	push	r0
    2878:	0f 93       	push	r16
    287a:	2f 93       	push	r18
    287c:	3f 93       	push	r19
    287e:	4f 93       	push	r20
    2880:	5f 93       	push	r21
    2882:	6f 93       	push	r22
    2884:	7f 93       	push	r23
    2886:	8f 93       	push	r24
    2888:	9f 93       	push	r25
    288a:	af 93       	push	r26
    288c:	bf 93       	push	r27
    288e:	ef 93       	push	r30
    2890:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2892:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2896:	88 23       	and	r24, r24
    2898:	34 f4       	brge	.+12     	; 0x28a6 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    289a:	80 e8       	ldi	r24, 0x80	; 128
    289c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    28a0:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    28a4:	88 c0       	rjmp	.+272    	; 0x29b6 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    28a6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28aa:	82 ff       	sbrs	r24, 2
    28ac:	20 c0       	rjmp	.+64     	; 0x28ee <__vector_125+0x84>
		udd_ack_underflow_event();
    28ae:	84 e0       	ldi	r24, 0x04	; 4
    28b0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    28b4:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <udd_sram+0x14>
    28b8:	86 ff       	sbrs	r24, 6
    28ba:	7d c0       	rjmp	.+250    	; 0x29b6 <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    28bc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    28c0:	81 fd       	sbrc	r24, 1
    28c2:	79 c0       	rjmp	.+242    	; 0x29b6 <__vector_125+0x14c>
    28c4:	e6 da       	rcall	.-2612   	; 0x1e92 <udd_ctrl_interrupt_tc_setup>
    28c6:	81 11       	cpse	r24, r1
    28c8:	76 c0       	rjmp	.+236    	; 0x29b6 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    28ca:	80 91 8f 22 	lds	r24, 0x228F	; 0x80228f <udd_ep_control_state>
    28ce:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    28d0:	11 f4       	brne	.+4      	; 0x28d6 <__vector_125+0x6c>
    28d2:	19 da       	rcall	.-3022   	; 0x1d06 <udd_ctrl_send_zlp_in>
    28d4:	70 c0       	rjmp	.+224    	; 0x29b6 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    28d6:	84 30       	cpi	r24, 0x04	; 4
    28d8:	09 f0       	breq	.+2      	; 0x28dc <__vector_125+0x72>
    28da:	6d c0       	rjmp	.+218    	; 0x29b6 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    28dc:	e5 ea       	ldi	r30, 0xA5	; 165
    28de:	f2 e2       	ldi	r31, 0x22	; 34
    28e0:	04 e0       	ldi	r16, 0x04	; 4
    28e2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    28e4:	ed e9       	ldi	r30, 0x9D	; 157
    28e6:	f2 e2       	ldi	r31, 0x22	; 34
    28e8:	04 e0       	ldi	r16, 0x04	; 4
    28ea:	05 93       	las	Z, r16
    28ec:	64 c0       	rjmp	.+200    	; 0x29b6 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    28ee:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28f2:	81 ff       	sbrs	r24, 1
    28f4:	5b c0       	rjmp	.+182    	; 0x29ac <__vector_125+0x142>
		udd_ack_overflow_event();
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    28fc:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <udd_sram+0xc>
    2900:	86 ff       	sbrs	r24, 6
    2902:	59 c0       	rjmp	.+178    	; 0x29b6 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2904:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2908:	81 fd       	sbrc	r24, 1
    290a:	55 c0       	rjmp	.+170    	; 0x29b6 <__vector_125+0x14c>
    290c:	c2 da       	rcall	.-2684   	; 0x1e92 <udd_ctrl_interrupt_tc_setup>
    290e:	81 11       	cpse	r24, r1
    2910:	52 c0       	rjmp	.+164    	; 0x29b6 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2912:	80 91 8f 22 	lds	r24, 0x228F	; 0x80228f <udd_ep_control_state>
    2916:	82 30       	cpi	r24, 0x02	; 2
    2918:	41 f4       	brne	.+16     	; 0x292a <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    291a:	84 e0       	ldi	r24, 0x04	; 4
    291c:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2920:	ec e9       	ldi	r30, 0x9C	; 156
    2922:	f2 e2       	ldi	r31, 0x22	; 34
    2924:	02 e0       	ldi	r16, 0x02	; 2
    2926:	06 93       	lac	Z, r16
    2928:	46 c0       	rjmp	.+140    	; 0x29b6 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    292a:	83 30       	cpi	r24, 0x03	; 3
    292c:	09 f0       	breq	.+2      	; 0x2930 <__vector_125+0xc6>
    292e:	43 c0       	rjmp	.+134    	; 0x29b6 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2930:	e5 ea       	ldi	r30, 0xA5	; 165
    2932:	f2 e2       	ldi	r31, 0x22	; 34
    2934:	04 e0       	ldi	r16, 0x04	; 4
    2936:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2938:	ed e9       	ldi	r30, 0x9D	; 157
    293a:	f2 e2       	ldi	r31, 0x22	; 34
    293c:	04 e0       	ldi	r16, 0x04	; 4
    293e:	05 93       	las	Z, r16
    2940:	3a c0       	rjmp	.+116    	; 0x29b6 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2942:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2944:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2948:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    294a:	07 df       	rcall	.-498    	; 0x275a <udd_ep_abort>
    294c:	81 e8       	ldi	r24, 0x81	; 129
    294e:	05 df       	rcall	.-502    	; 0x275a <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2950:	82 e0       	ldi	r24, 0x02	; 2
    2952:	03 df       	rcall	.-506    	; 0x275a <udd_ep_abort>
    2954:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    2956:	01 df       	rcall	.-510    	; 0x275a <udd_ep_abort>
    2958:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    295c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2960:	e0 e9       	ldi	r30, 0x90	; 144
    2962:	f2 e2       	ldi	r31, 0x22	; 34
	udd_endpoint_clear_status(ep_ctrl);
    2964:	15 86       	std	Z+13, r1	; 0x0d
    2966:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2968:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    296a:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    296c:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    296e:	15 8a       	std	Z+21, r1	; 0x15
    2970:	94 8b       	std	Z+20, r25	; 0x14
    2972:	85 8b       	std	Z+21, r24	; 0x15
    2974:	8b e4       	ldi	r24, 0x4B	; 75
		// Reset endpoint control management
		udd_ctrl_init();
    2976:	92 e2       	ldi	r25, 0x22	; 34
    2978:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    297a:	91 8b       	std	Z+17, r25	; 0x11
    297c:	91 d9       	rcall	.-3294   	; 0x1ca0 <udd_ctrl_init>
		udd_ack_suspend_event();
    297e:	1b c0       	rjmp	.+54     	; 0x29b6 <__vector_125+0x14c>
    2980:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2984:	86 ff       	sbrs	r24, 6
    2986:	07 c0       	rjmp	.+14     	; 0x2996 <__vector_125+0x12c>
    2988:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    298a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	4f d9       	rcall	.-3426   	; 0x1c30 <udd_sleep_mode>
		udd_ack_resume_event();
    2992:	a5 d2       	rcall	.+1354   	; 0x2ede <usb_callback_suspend_action>
    2994:	10 c0       	rjmp	.+32     	; 0x29b6 <__vector_125+0x14c>
    2996:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    299a:	85 ff       	sbrs	r24, 5
    299c:	0c c0       	rjmp	.+24     	; 0x29b6 <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    299e:	80 e2       	ldi	r24, 0x20	; 32
    29a0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	44 d9       	rcall	.-3448   	; 0x1c30 <udd_sleep_mode>
    29a8:	9b d2       	rcall	.+1334   	; 0x2ee0 <usb_callback_resume_action>
    29aa:	05 c0       	rjmp	.+10     	; 0x29b6 <__vector_125+0x14c>
    29ac:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    29b0:	84 fd       	sbrc	r24, 4
    29b2:	c7 cf       	rjmp	.-114    	; 0x2942 <__vector_125+0xd8>
    29b4:	e5 cf       	rjmp	.-54     	; 0x2980 <__vector_125+0x116>
    29b6:	ff 91       	pop	r31
    29b8:	ef 91       	pop	r30
    29ba:	bf 91       	pop	r27
    29bc:	af 91       	pop	r26
    29be:	9f 91       	pop	r25
    29c0:	8f 91       	pop	r24
    29c2:	7f 91       	pop	r23
    29c4:	6f 91       	pop	r22
    29c6:	5f 91       	pop	r21
    29c8:	4f 91       	pop	r20
    29ca:	3f 91       	pop	r19
    29cc:	2f 91       	pop	r18
    29ce:	0f 91       	pop	r16
    29d0:	0f 90       	pop	r0
    29d2:	0b be       	out	0x3b, r0	; 59
    29d4:	0f 90       	pop	r0
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	0f 90       	pop	r0
    29da:	1f 90       	pop	r1
    29dc:	18 95       	reti

000029de <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    29de:	1f 92       	push	r1
    29e0:	0f 92       	push	r0
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	0f 92       	push	r0
    29e6:	11 24       	eor	r1, r1
    29e8:	0b b6       	in	r0, 0x3b	; 59
    29ea:	0f 92       	push	r0
    29ec:	0f 93       	push	r16
    29ee:	1f 93       	push	r17
    29f0:	2f 93       	push	r18
    29f2:	3f 93       	push	r19
    29f4:	4f 93       	push	r20
    29f6:	5f 93       	push	r21
    29f8:	6f 93       	push	r22
    29fa:	7f 93       	push	r23
    29fc:	8f 93       	push	r24
    29fe:	9f 93       	push	r25
    2a00:	af 93       	push	r26
    2a02:	bf 93       	push	r27
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	ef 93       	push	r30
    2a0a:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2a0c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a10:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2a12:	03 c0       	rjmp	.+6      	; 0x2a1a <__vector_126+0x3c>
    2a14:	3e da       	rcall	.-2948   	; 0x1e92 <udd_ctrl_interrupt_tc_setup>
    2a16:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2a18:	c4 c0       	rjmp	.+392    	; 0x2ba2 <__vector_126+0x1c4>
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2a20:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2a24:	81 95       	neg	r24
    2a26:	88 0f       	add	r24, r24
    2a28:	ec e9       	ldi	r30, 0x9C	; 156
    2a2a:	f2 e2       	ldi	r31, 0x22	; 34
    2a2c:	e8 1b       	sub	r30, r24
    2a2e:	f1 09       	sbc	r31, r1
    2a30:	20 81       	ld	r18, Z
    2a32:	31 81       	ldd	r19, Z+1	; 0x01
    2a34:	2c 59       	subi	r18, 0x9C	; 156
    2a36:	32 42       	sbci	r19, 0x22	; 34
    2a38:	36 95       	lsr	r19
    2a3a:	27 95       	ror	r18
    2a3c:	36 95       	lsr	r19
    2a3e:	27 95       	ror	r18
    2a40:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2a42:	27 95       	ror	r18
    2a44:	82 2f       	mov	r24, r18
    2a46:	86 95       	lsr	r24
    2a48:	20 fd       	sbrc	r18, 0
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <__vector_126+0x72>
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <__vector_126+0x74>
    2a50:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2a52:	89 0f       	add	r24, r25
    2a54:	e8 2f       	mov	r30, r24
    2a56:	ef 70       	andi	r30, 0x0F	; 15
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	ee 0f       	add	r30, r30
    2a5c:	ff 1f       	adc	r31, r31
    2a5e:	28 2f       	mov	r18, r24
    2a60:	08 2e       	mov	r0, r24
    2a62:	00 0c       	add	r0, r0
    2a64:	33 0b       	sbc	r19, r19
    2a66:	22 27       	eor	r18, r18
    2a68:	33 0f       	add	r19, r19
    2a6a:	22 1f       	adc	r18, r18
    2a6c:	33 27       	eor	r19, r19
    2a6e:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2a70:	f3 1f       	adc	r31, r19
    2a72:	df 01       	movw	r26, r30
    2a74:	aa 0f       	add	r26, r26
    2a76:	bb 1f       	adc	r27, r27
    2a78:	aa 0f       	add	r26, r26
    2a7a:	bb 1f       	adc	r27, r27
    2a7c:	aa 0f       	add	r26, r26
    2a7e:	bb 1f       	adc	r27, r27
    2a80:	a0 57       	subi	r26, 0x70	; 112
    2a82:	bd 4d       	sbci	r27, 0xDD	; 221
    2a84:	1c 96       	adiw	r26, 0x0c	; 12
    2a86:	9c 91       	ld	r25, X
    2a88:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2a8a:	8b c0       	rjmp	.+278    	; 0x2ba2 <__vector_126+0x1c4>
    2a8c:	ee 0f       	add	r30, r30
    2a8e:	ff 1f       	adc	r31, r31
    2a90:	ee 0f       	add	r30, r30
    2a92:	ff 1f       	adc	r31, r31
    2a94:	ee 0f       	add	r30, r30
    2a96:	ff 1f       	adc	r31, r31
    2a98:	e4 56       	subi	r30, 0x64	; 100
    2a9a:	fd 4d       	sbci	r31, 0xDD	; 221
    2a9c:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    2a9e:	06 93       	lac	Z, r16
    2aa0:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2aa2:	7a c0       	rjmp	.+244    	; 0x2b98 <__vector_126+0x1ba>
    2aa4:	80 91 8f 22 	lds	r24, 0x228F	; 0x80228f <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2aa8:	84 30       	cpi	r24, 0x04	; 4
    2aaa:	19 f4       	brne	.+6      	; 0x2ab2 <__vector_126+0xd4>
    2aac:	3a d9       	rcall	.-3468   	; 0x1d22 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2aae:	f8 d8       	rcall	.-3600   	; 0x1ca0 <udd_ctrl_init>
    2ab0:	78 c0       	rjmp	.+240    	; 0x2ba2 <__vector_126+0x1c4>
    2ab2:	00 91 9e 22 	lds	r16, 0x229E	; 0x80229e <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2ab6:	10 91 9f 22 	lds	r17, 0x229F	; 0x80229f <udd_sram+0xf>
    2aba:	80 91 2b 24 	lds	r24, 0x242B	; 0x80242b <udd_g_ctrlreq+0xa>
    2abe:	90 91 2c 24 	lds	r25, 0x242C	; 0x80242c <udd_g_ctrlreq+0xb>
    2ac2:	c0 91 8b 22 	lds	r28, 0x228B	; 0x80228b <udd_ctrl_payload_nb_trans>
    2ac6:	d0 91 8c 22 	lds	r29, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    2aca:	98 01       	movw	r18, r16
    2acc:	2c 0f       	add	r18, r28
    2ace:	3d 1f       	adc	r19, r29
    2ad0:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2ad2:	93 07       	cpc	r25, r19
    2ad4:	18 f4       	brcc	.+6      	; 0x2adc <__vector_126+0xfe>
    2ad6:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2ad8:	0c 1b       	sub	r16, r28
    2ada:	1d 0b       	sbc	r17, r29
    2adc:	80 91 29 24 	lds	r24, 0x2429	; 0x802429 <udd_g_ctrlreq+0x8>
    2ae0:	90 91 2a 24 	lds	r25, 0x242A	; 0x80242a <udd_g_ctrlreq+0x9>
    2ae4:	a8 01       	movw	r20, r16
    2ae6:	6b e4       	ldi	r22, 0x4B	; 75
    2ae8:	72 e2       	ldi	r23, 0x22	; 34
    2aea:	8c 0f       	add	r24, r28
    2aec:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2aee:	0e 94 28 23 	call	0x4650	; 0x4650 <memcpy>
    2af2:	c0 0f       	add	r28, r16
    2af4:	d1 1f       	adc	r29, r17
    2af6:	c0 93 8b 22 	sts	0x228B, r28	; 0x80228b <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2afa:	d0 93 8c 22 	sts	0x228C, r29	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    2afe:	00 34       	cpi	r16, 0x40	; 64
    2b00:	11 05       	cpc	r17, r1
    2b02:	69 f4       	brne	.+26     	; 0x2b1e <__vector_126+0x140>
    2b04:	80 91 8d 22 	lds	r24, 0x228D	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    2b08:	90 91 8e 22 	lds	r25, 0x228E	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    2b0c:	8c 0f       	add	r24, r28
    2b0e:	9d 1f       	adc	r25, r29
    2b10:	20 91 27 24 	lds	r18, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    2b14:	30 91 28 24 	lds	r19, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    2b18:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2b1a:	93 07       	cpc	r25, r19
    2b1c:	80 f0       	brcs	.+32     	; 0x2b3e <__vector_126+0x160>
    2b1e:	e1 e2       	ldi	r30, 0x21	; 33
    2b20:	f4 e2       	ldi	r31, 0x24	; 36
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2b22:	c2 87       	std	Z+10, r28	; 0x0a
    2b24:	d3 87       	std	Z+11, r29	; 0x0b
    2b26:	06 84       	ldd	r0, Z+14	; 0x0e
    2b28:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    2b2a:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    2b2c:	30 97       	sbiw	r30, 0x00	; 0
    2b2e:	29 f0       	breq	.+10     	; 0x2b3a <__vector_126+0x15c>
    2b30:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2b32:	81 11       	cpse	r24, r1
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <__vector_126+0x15c>
    2b36:	d9 d8       	rcall	.-3662   	; 0x1cea <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2b38:	34 c0       	rjmp	.+104    	; 0x2ba2 <__vector_126+0x1c4>
    2b3a:	e5 d8       	rcall	.-3638   	; 0x1d06 <udd_ctrl_send_zlp_in>
    2b3c:	32 c0       	rjmp	.+100    	; 0x2ba2 <__vector_126+0x1c4>
    2b3e:	80 91 2b 24 	lds	r24, 0x242B	; 0x80242b <udd_g_ctrlreq+0xa>
    2b42:	90 91 2c 24 	lds	r25, 0x242C	; 0x80242c <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2b46:	c8 17       	cp	r28, r24
    2b48:	d9 07       	cpc	r29, r25
    2b4a:	f9 f4       	brne	.+62     	; 0x2b8a <__vector_126+0x1ac>
    2b4c:	e0 91 2f 24 	lds	r30, 0x242F	; 0x80242f <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2b50:	f0 91 30 24 	lds	r31, 0x2430	; 0x802430 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2b54:	30 97       	sbiw	r30, 0x00	; 0
    2b56:	11 f4       	brne	.+4      	; 0x2b5c <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2b58:	c8 d8       	rcall	.-3696   	; 0x1cea <udd_ctrl_stall_data>
    2b5a:	23 c0       	rjmp	.+70     	; 0x2ba2 <__vector_126+0x1c4>
    2b5c:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2b5e:	81 11       	cpse	r24, r1
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <__vector_126+0x188>
    2b62:	c3 d8       	rcall	.-3706   	; 0x1cea <udd_ctrl_stall_data>
    2b64:	1e c0       	rjmp	.+60     	; 0x2ba2 <__vector_126+0x1c4>
    2b66:	20 91 8d 22 	lds	r18, 0x228D	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    2b6a:	30 91 8e 22 	lds	r19, 0x228E	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    2b6e:	80 91 8b 22 	lds	r24, 0x228B	; 0x80228b <udd_ctrl_payload_nb_trans>
    2b72:	90 91 8c 22 	lds	r25, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    2b76:	82 0f       	add	r24, r18
    2b78:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2b7a:	80 93 8d 22 	sts	0x228D, r24	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    2b7e:	90 93 8e 22 	sts	0x228E, r25	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2b82:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    2b86:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2b8a:	ec e9       	ldi	r30, 0x9C	; 156
    2b8c:	f2 e2       	ldi	r31, 0x22	; 34
		udd_ctrl_in_sent();
    2b8e:	02 e0       	ldi	r16, 0x02	; 2
    2b90:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2b92:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2b94:	06 93       	lac	Z, r16
    2b96:	05 c0       	rjmp	.+10     	; 0x2ba2 <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2b98:	80 38       	cpi	r24, 0x80	; 128
    2b9a:	11 f4       	brne	.+4      	; 0x2ba0 <__vector_126+0x1c2>
    2b9c:	ca d8       	rcall	.-3692   	; 0x1d32 <udd_ctrl_in_sent>
    2b9e:	01 c0       	rjmp	.+2      	; 0x2ba2 <__vector_126+0x1c4>
    2ba0:	ea d9       	rcall	.-3116   	; 0x1f76 <udd_ep_trans_complet>
    2ba2:	ff 91       	pop	r31
    2ba4:	ef 91       	pop	r30
    2ba6:	df 91       	pop	r29
    2ba8:	cf 91       	pop	r28
    2baa:	bf 91       	pop	r27
    2bac:	af 91       	pop	r26
    2bae:	9f 91       	pop	r25
    2bb0:	8f 91       	pop	r24
    2bb2:	7f 91       	pop	r23
    2bb4:	6f 91       	pop	r22
    2bb6:	5f 91       	pop	r21
    2bb8:	4f 91       	pop	r20
    2bba:	3f 91       	pop	r19
    2bbc:	2f 91       	pop	r18
    2bbe:	1f 91       	pop	r17
    2bc0:	0f 91       	pop	r16
    2bc2:	0f 90       	pop	r0
    2bc4:	0b be       	out	0x3b, r0	; 59
    2bc6:	0f 90       	pop	r0
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	0f 90       	pop	r0
    2bcc:	1f 90       	pop	r1
    2bce:	18 95       	reti

00002bd0 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    2bd0:	cf 92       	push	r12
    2bd2:	df 92       	push	r13
    2bd4:	ef 92       	push	r14
    2bd6:	ff 92       	push	r15
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    2bde:	6b 01       	movw	r12, r22
    2be0:	e1 2c       	mov	r14, r1
    2be2:	f1 2c       	mov	r15, r1
    2be4:	60 e8       	ldi	r22, 0x80	; 128
    2be6:	73 ec       	ldi	r23, 0xC3	; 195
    2be8:	89 ec       	ldi	r24, 0xC9	; 201
    2bea:	91 e0       	ldi	r25, 0x01	; 1
    2bec:	a7 01       	movw	r20, r14
    2bee:	96 01       	movw	r18, r12
    2bf0:	0e 94 ef 22 	call	0x45de	; 0x45de <__udivmodsi4>
    2bf4:	ca 01       	movw	r24, r20
    2bf6:	b9 01       	movw	r22, r18
    2bf8:	2f ef       	ldi	r18, 0xFF	; 255
    2bfa:	3f ef       	ldi	r19, 0xFF	; 255
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	50 e0       	ldi	r21, 0x00	; 0
    2c00:	0e 94 ef 22 	call	0x45de	; 0x45de <__udivmodsi4>
	if (smallest_div < 1) {
    2c04:	21 15       	cp	r18, r1
    2c06:	31 05       	cpc	r19, r1
    2c08:	29 f4       	brne	.+10     	; 0x2c14 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    2c0e:	21 e0       	ldi	r18, 0x01	; 1
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	2d c0       	rjmp	.+90     	; 0x2c6e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    2c14:	22 30       	cpi	r18, 0x02	; 2
    2c16:	31 05       	cpc	r19, r1
    2c18:	28 f4       	brcc	.+10     	; 0x2c24 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    2c1a:	82 e0       	ldi	r24, 0x02	; 2
    2c1c:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    2c1e:	22 e0       	ldi	r18, 0x02	; 2
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	25 c0       	rjmp	.+74     	; 0x2c6e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    2c24:	24 30       	cpi	r18, 0x04	; 4
    2c26:	31 05       	cpc	r19, r1
    2c28:	28 f4       	brcc	.+10     	; 0x2c34 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2c2a:	83 e0       	ldi	r24, 0x03	; 3
    2c2c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    2c2e:	24 e0       	ldi	r18, 0x04	; 4
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	1d c0       	rjmp	.+58     	; 0x2c6e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    2c34:	28 30       	cpi	r18, 0x08	; 8
    2c36:	31 05       	cpc	r19, r1
    2c38:	28 f4       	brcc	.+10     	; 0x2c44 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2c3a:	84 e0       	ldi	r24, 0x04	; 4
    2c3c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    2c3e:	28 e0       	ldi	r18, 0x08	; 8
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	15 c0       	rjmp	.+42     	; 0x2c6e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    2c44:	20 34       	cpi	r18, 0x40	; 64
    2c46:	31 05       	cpc	r19, r1
    2c48:	28 f4       	brcc	.+10     	; 0x2c54 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2c4a:	85 e0       	ldi	r24, 0x05	; 5
    2c4c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2c4e:	20 e4       	ldi	r18, 0x40	; 64
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	0d c0       	rjmp	.+26     	; 0x2c6e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    2c54:	2f 3f       	cpi	r18, 0xFF	; 255
    2c56:	31 05       	cpc	r19, r1
    2c58:	09 f0       	breq	.+2      	; 0x2c5c <pwm_set_frequency+0x8c>
    2c5a:	28 f4       	brcc	.+10     	; 0x2c66 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2c5c:	86 e0       	ldi	r24, 0x06	; 6
    2c5e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	31 e0       	ldi	r19, 0x01	; 1
    2c64:	04 c0       	rjmp	.+8      	; 0x2c6e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2c66:	87 e0       	ldi	r24, 0x07	; 7
    2c68:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    2c70:	50 e0       	ldi	r21, 0x00	; 0
    2c72:	60 e8       	ldi	r22, 0x80	; 128
    2c74:	73 ec       	ldi	r23, 0xC3	; 195
    2c76:	89 ec       	ldi	r24, 0xC9	; 201
    2c78:	91 e0       	ldi	r25, 0x01	; 1
    2c7a:	0e 94 ef 22 	call	0x45de	; 0x45de <__udivmodsi4>
    2c7e:	ca 01       	movw	r24, r20
    2c80:	b9 01       	movw	r22, r18
    2c82:	a7 01       	movw	r20, r14
    2c84:	96 01       	movw	r18, r12
    2c86:	0e 94 ef 22 	call	0x45de	; 0x45de <__udivmodsi4>
    2c8a:	2d 83       	std	Y+5, r18	; 0x05
    2c8c:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2c8e:	24 36       	cpi	r18, 0x64	; 100
    2c90:	31 05       	cpc	r19, r1
    2c92:	18 f4       	brcc	.+6      	; 0x2c9a <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    2c94:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2c96:	1d 82       	std	Y+5, r1	; 0x05
    2c98:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	ff 90       	pop	r15
    2ca0:	ef 90       	pop	r14
    2ca2:	df 90       	pop	r13
    2ca4:	cf 90       	pop	r12
    2ca6:	08 95       	ret

00002ca8 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	ec 01       	movw	r28, r24
    2cb2:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    2cb4:	86 2f       	mov	r24, r22
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	87 30       	cpi	r24, 0x07	; 7
    2cba:	91 05       	cpc	r25, r1
    2cbc:	08 f0       	brcs	.+2      	; 0x2cc0 <pwm_init+0x18>
    2cbe:	8b c0       	rjmp	.+278    	; 0x2dd6 <pwm_init+0x12e>
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	88 27       	eor	r24, r24
    2cc4:	eb 5f       	subi	r30, 0xFB	; 251
    2cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cca:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	98 e0       	ldi	r25, 0x08	; 8
    2cd2:	88 83       	st	Y, r24
    2cd4:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2cd6:	e0 e4       	ldi	r30, 0x40	; 64
    2cd8:	f6 e0       	ldi	r31, 0x06	; 6
    2cda:	30 81       	ld	r19, Z
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	2f ef       	ldi	r18, 0xFF	; 255
    2ce2:	24 0f       	add	r18, r20
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <pwm_init+0x42>
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	2a 95       	dec	r18
    2cec:	e2 f7       	brpl	.-8      	; 0x2ce6 <pwm_init+0x3e>
    2cee:	83 2b       	or	r24, r19
    2cf0:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2cf2:	71 c0       	rjmp	.+226    	; 0x2dd6 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    2cf4:	80 e4       	ldi	r24, 0x40	; 64
    2cf6:	98 e0       	ldi	r25, 0x08	; 8
    2cf8:	88 83       	st	Y, r24
    2cfa:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2cfc:	e0 e4       	ldi	r30, 0x40	; 64
    2cfe:	f6 e0       	ldi	r31, 0x06	; 6
    2d00:	30 81       	ld	r19, Z
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	23 e0       	ldi	r18, 0x03	; 3
    2d08:	24 0f       	add	r18, r20
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <pwm_init+0x68>
    2d0c:	88 0f       	add	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	2a 95       	dec	r18
    2d12:	e2 f7       	brpl	.-8      	; 0x2d0c <pwm_init+0x64>
    2d14:	83 2b       	or	r24, r19
    2d16:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2d18:	5e c0       	rjmp	.+188    	; 0x2dd6 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	99 e0       	ldi	r25, 0x09	; 9
    2d1e:	88 83       	st	Y, r24
    2d20:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    2d22:	e0 e6       	ldi	r30, 0x60	; 96
    2d24:	f6 e0       	ldi	r31, 0x06	; 6
    2d26:	30 81       	ld	r19, Z
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	2f ef       	ldi	r18, 0xFF	; 255
    2d2e:	24 0f       	add	r18, r20
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <pwm_init+0x8e>
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	2a 95       	dec	r18
    2d38:	e2 f7       	brpl	.-8      	; 0x2d32 <pwm_init+0x8a>
    2d3a:	83 2b       	or	r24, r19
    2d3c:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2d3e:	4b c0       	rjmp	.+150    	; 0x2dd6 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2d40:	80 e4       	ldi	r24, 0x40	; 64
    2d42:	99 e0       	ldi	r25, 0x09	; 9
    2d44:	88 83       	st	Y, r24
    2d46:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2d48:	e0 e6       	ldi	r30, 0x60	; 96
    2d4a:	f6 e0       	ldi	r31, 0x06	; 6
    2d4c:	30 81       	ld	r19, Z
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	23 e0       	ldi	r18, 0x03	; 3
    2d54:	24 0f       	add	r18, r20
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <pwm_init+0xb4>
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	2a 95       	dec	r18
    2d5e:	e2 f7       	brpl	.-8      	; 0x2d58 <pwm_init+0xb0>
    2d60:	83 2b       	or	r24, r19
    2d62:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2d64:	38 c0       	rjmp	.+112    	; 0x2dd6 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	9a e0       	ldi	r25, 0x0A	; 10
    2d6a:	88 83       	st	Y, r24
    2d6c:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2d6e:	e0 e8       	ldi	r30, 0x80	; 128
    2d70:	f6 e0       	ldi	r31, 0x06	; 6
    2d72:	30 81       	ld	r19, Z
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	2f ef       	ldi	r18, 0xFF	; 255
    2d7a:	24 0f       	add	r18, r20
    2d7c:	02 c0       	rjmp	.+4      	; 0x2d82 <pwm_init+0xda>
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	2a 95       	dec	r18
    2d84:	e2 f7       	brpl	.-8      	; 0x2d7e <pwm_init+0xd6>
    2d86:	83 2b       	or	r24, r19
    2d88:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2d8a:	25 c0       	rjmp	.+74     	; 0x2dd6 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    2d8c:	80 e4       	ldi	r24, 0x40	; 64
    2d8e:	9a e0       	ldi	r25, 0x0A	; 10
    2d90:	88 83       	st	Y, r24
    2d92:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    2d94:	e0 e8       	ldi	r30, 0x80	; 128
    2d96:	f6 e0       	ldi	r31, 0x06	; 6
    2d98:	30 81       	ld	r19, Z
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	23 e0       	ldi	r18, 0x03	; 3
    2da0:	24 0f       	add	r18, r20
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <pwm_init+0x100>
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	2a 95       	dec	r18
    2daa:	e2 f7       	brpl	.-8      	; 0x2da4 <pwm_init+0xfc>
    2dac:	83 2b       	or	r24, r19
    2dae:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2db0:	12 c0       	rjmp	.+36     	; 0x2dd6 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	9b e0       	ldi	r25, 0x0B	; 11
    2db6:	88 83       	st	Y, r24
    2db8:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    2dba:	e0 ea       	ldi	r30, 0xA0	; 160
    2dbc:	f6 e0       	ldi	r31, 0x06	; 6
    2dbe:	30 81       	ld	r19, Z
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	2f ef       	ldi	r18, 0xFF	; 255
    2dc6:	24 0f       	add	r18, r20
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <pwm_init+0x126>
    2dca:	88 0f       	add	r24, r24
    2dcc:	99 1f       	adc	r25, r25
    2dce:	2a 95       	dec	r18
    2dd0:	e2 f7       	brpl	.-8      	; 0x2dca <pwm_init+0x122>
    2dd2:	83 2b       	or	r24, r19
    2dd4:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    2dd6:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    2dd8:	42 30       	cpi	r20, 0x02	; 2
    2dda:	61 f0       	breq	.+24     	; 0x2df4 <pwm_init+0x14c>
    2ddc:	18 f4       	brcc	.+6      	; 0x2de4 <pwm_init+0x13c>
    2dde:	41 30       	cpi	r20, 0x01	; 1
    2de0:	31 f0       	breq	.+12     	; 0x2dee <pwm_init+0x146>
    2de2:	10 c0       	rjmp	.+32     	; 0x2e04 <pwm_init+0x15c>
    2de4:	43 30       	cpi	r20, 0x03	; 3
    2de6:	49 f0       	breq	.+18     	; 0x2dfa <pwm_init+0x152>
    2de8:	44 30       	cpi	r20, 0x04	; 4
    2dea:	51 f0       	breq	.+20     	; 0x2e00 <pwm_init+0x158>
    2dec:	0b c0       	rjmp	.+22     	; 0x2e04 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    2dee:	80 e1       	ldi	r24, 0x10	; 16
    2df0:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2df2:	08 c0       	rjmp	.+16     	; 0x2e04 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    2df4:	80 e2       	ldi	r24, 0x20	; 32
    2df6:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2df8:	05 c0       	rjmp	.+10     	; 0x2e04 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    2dfa:	80 e4       	ldi	r24, 0x40	; 64
    2dfc:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    2e00:	80 e8       	ldi	r24, 0x80	; 128
    2e02:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    2e04:	88 81       	ld	r24, Y
    2e06:	99 81       	ldd	r25, Y+1	; 0x01
    2e08:	0e 94 3b 0c 	call	0x1876	; 0x1876 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    2e0c:	e8 81       	ld	r30, Y
    2e0e:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2e10:	81 81       	ldd	r24, Z+1	; 0x01
    2e12:	88 7f       	andi	r24, 0xF8	; 248
    2e14:	83 60       	ori	r24, 0x03	; 3
    2e16:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2e18:	1d 82       	std	Y+5, r1	; 0x05
    2e1a:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2e1c:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    2e1e:	e8 81       	ld	r30, Y
    2e20:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2e22:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2e24:	80 7f       	andi	r24, 0xF0	; 240
    2e26:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    2e28:	b8 01       	movw	r22, r16
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	d1 de       	rcall	.-606    	; 0x2bd0 <pwm_set_frequency>
}
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	1f 91       	pop	r17
    2e34:	0f 91       	pop	r16
    2e36:	08 95       	ret

00002e38 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    2e3e:	2d 81       	ldd	r18, Y+5	; 0x05
    2e40:	3e 81       	ldd	r19, Y+6	; 0x06
    2e42:	a6 2f       	mov	r26, r22
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	0e 94 19 23 	call	0x4632	; 0x4632 <__umulhisi3>
    2e4a:	24 e6       	ldi	r18, 0x64	; 100
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e0       	ldi	r20, 0x00	; 0
    2e50:	50 e0       	ldi	r21, 0x00	; 0
    2e52:	0e 94 ef 22 	call	0x45de	; 0x45de <__udivmodsi4>
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	e8 81       	ld	r30, Y
    2e5a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2e5c:	e6 fd       	sbrc	r30, 6
    2e5e:	17 c0       	rjmp	.+46     	; 0x2e8e <pwm_start+0x56>
		switch (channel_index) {
    2e60:	82 30       	cpi	r24, 0x02	; 2
    2e62:	61 f0       	breq	.+24     	; 0x2e7c <pwm_start+0x44>
    2e64:	18 f4       	brcc	.+6      	; 0x2e6c <pwm_start+0x34>
    2e66:	81 30       	cpi	r24, 0x01	; 1
    2e68:	31 f0       	breq	.+12     	; 0x2e76 <pwm_start+0x3e>
    2e6a:	1b c0       	rjmp	.+54     	; 0x2ea2 <pwm_start+0x6a>
    2e6c:	83 30       	cpi	r24, 0x03	; 3
    2e6e:	49 f0       	breq	.+18     	; 0x2e82 <pwm_start+0x4a>
    2e70:	84 30       	cpi	r24, 0x04	; 4
    2e72:	51 f0       	breq	.+20     	; 0x2e88 <pwm_start+0x50>
    2e74:	16 c0       	rjmp	.+44     	; 0x2ea2 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    2e76:	20 af       	std	Z+56, r18	; 0x38
    2e78:	31 af       	std	Z+57, r19	; 0x39
    2e7a:	13 c0       	rjmp	.+38     	; 0x2ea2 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2e7c:	22 af       	std	Z+58, r18	; 0x3a
    2e7e:	33 af       	std	Z+59, r19	; 0x3b
    2e80:	10 c0       	rjmp	.+32     	; 0x2ea2 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2e82:	24 af       	std	Z+60, r18	; 0x3c
    2e84:	35 af       	std	Z+61, r19	; 0x3d
    2e86:	0d c0       	rjmp	.+26     	; 0x2ea2 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2e88:	26 af       	std	Z+62, r18	; 0x3e
    2e8a:	37 af       	std	Z+63, r19	; 0x3f
    2e8c:	0a c0       	rjmp	.+20     	; 0x2ea2 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2e8e:	81 30       	cpi	r24, 0x01	; 1
    2e90:	19 f0       	breq	.+6      	; 0x2e98 <pwm_start+0x60>
    2e92:	82 30       	cpi	r24, 0x02	; 2
    2e94:	21 f0       	breq	.+8      	; 0x2e9e <pwm_start+0x66>
    2e96:	05 c0       	rjmp	.+10     	; 0x2ea2 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2e98:	20 af       	std	Z+56, r18	; 0x38
    2e9a:	31 af       	std	Z+57, r19	; 0x39
    2e9c:	02 c0       	rjmp	.+4      	; 0x2ea2 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    2e9e:	22 af       	std	Z+58, r18	; 0x3a
    2ea0:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    2ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea6:	e8 81       	ld	r30, Y
    2ea8:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2eaa:	86 a3       	std	Z+38, r24	; 0x26
    2eac:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	e8 81       	ld	r30, Y
    2eb2:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    2eb4:	e6 fd       	sbrc	r30, 6
    2eb6:	04 c0       	rjmp	.+8      	; 0x2ec0 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    2eb8:	91 81       	ldd	r25, Z+1	; 0x01
    2eba:	89 2b       	or	r24, r25
    2ebc:	81 83       	std	Z+1, r24	; 0x01
    2ebe:	04 c0       	rjmp	.+8      	; 0x2ec8 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    2ec0:	91 81       	ldd	r25, Z+1	; 0x01
    2ec2:	80 73       	andi	r24, 0x30	; 48
    2ec4:	89 2b       	or	r24, r25
    2ec6:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    2ec8:	e8 81       	ld	r30, Y
    2eca:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2ecc:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2ece:	80 7f       	andi	r24, 0xF0	; 240
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	89 2b       	or	r24, r25
    2ed4:	80 83       	st	Z, r24
}
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	08 95       	ret

00002edc <cb_rtc_alarm>:

void halt(void)
{
	/* MAIN Loop Shutdown */
	
	runmode = 0;
    2edc:	08 95       	ret

00002ede <usb_callback_suspend_action>:
    2ede:	08 95       	ret

00002ee0 <usb_callback_resume_action>:
    2ee0:	08 95       	ret

00002ee2 <usb_callback_remotewakeup_enable>:
    2ee2:	08 95       	ret

00002ee4 <usb_callback_remotewakeup_disable>:
    2ee4:	08 95       	ret

00002ee6 <usb_callback_cdc_enable>:
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	80 93 e0 22 	sts	0x22E0, r24	; 0x8022e0 <usb_cdc_transfers_autorized>
    2eec:	08 95       	ret

00002eee <usb_callback_cdc_disable>:
    2eee:	10 92 e0 22 	sts	0x22E0, r1	; 0x8022e0 <usb_cdc_transfers_autorized>
    2ef2:	08 95       	ret

00002ef4 <usb_callback_config>:
    2ef4:	08 95       	ret

00002ef6 <usb_callback_cdc_set_dtr>:
    2ef6:	08 95       	ret

00002ef8 <usb_callback_cdc_set_rts>:
    2ef8:	08 95       	ret

00002efa <usb_callback_rx_notify>:
    2efa:	08 95       	ret

00002efc <usb_callback_tx_empty_notify>:
    2efc:	08 95       	ret

00002efe <main>:
}


int main(void)
{
    2efe:	2f 92       	push	r2
    2f00:	3f 92       	push	r3
    2f02:	4f 92       	push	r4
    2f04:	5f 92       	push	r5
    2f06:	6f 92       	push	r6
    2f08:	7f 92       	push	r7
    2f0a:	8f 92       	push	r8
    2f0c:	9f 92       	push	r9
    2f0e:	af 92       	push	r10
    2f10:	bf 92       	push	r11
    2f12:	cf 92       	push	r12
    2f14:	df 92       	push	r13
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	c2 54       	subi	r28, 0x42	; 66
    2f28:	d1 09       	sbc	r29, r1
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	de bf       	out	0x3e, r29	; 62
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2f2e:	0f 2e       	mov	r0, r31
    2f30:	f0 ea       	ldi	r31, 0xA0	; 160
    2f32:	af 2e       	mov	r10, r31
    2f34:	b1 2c       	mov	r11, r1
    2f36:	f0 2d       	mov	r31, r0
    2f38:	07 e0       	ldi	r16, 0x07	; 7
    2f3a:	d5 01       	movw	r26, r10
    2f3c:	12 96       	adiw	r26, 0x02	; 2
	uint8_t retcode = 0;
	
	/* Init of sub-modules */
	pmic_init();
	sysclk_init();
    2f3e:	0c 93       	st	X, r16
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2f40:	a1 d2       	rcall	.+1346   	; 0x3484 <sysclk_init>
    2f42:	e1 e3       	ldi	r30, 0x31	; 49
    2f44:	f4 e2       	ldi	r31, 0x24	; 36
    2f46:	10 82       	st	Z, r1
    2f48:	11 82       	std	Z+1, r1	; 0x01
    2f4a:	12 82       	std	Z+2, r1	; 0x02
    2f4c:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2f4e:	14 82       	std	Z+4, r1	; 0x04
    2f50:	11 e0       	ldi	r17, 0x01	; 1
	sleepmgr_init();	// Unlocks all sleep mode levels
	rtc_init();
    2f52:	15 83       	std	Z+5, r17	; 0x05
    2f54:	0e 94 4f 01 	call	0x29e	; 0x29e <rtc_init>
	rtc_set_callback(cb_rtc_alarm);
    2f58:	8e e6       	ldi	r24, 0x6E	; 110
    2f5a:	97 e1       	ldi	r25, 0x17	; 23
    2f5c:	0e 94 4a 01 	call	0x294	; 0x294 <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2f60:	62 e0       	ldi	r22, 0x02	; 2
    2f62:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event 7 */
	EVSYS.CH7MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    2f64:	10 d3       	rcall	.+1568   	; 0x3586 <sysclk_enable_module>
    2f66:	e0 e8       	ldi	r30, 0x80	; 128
    2f68:	f1 e0       	ldi	r31, 0x01	; 1
    2f6a:	80 ec       	ldi	r24, 0xC0	; 192

	/* DAC - event 6 */
	EVSYS.CH6MUX = EVSYS_CHMUX_TCE1_OVF_gc;
    2f6c:	87 83       	std	Z+7, r24	; 0x07
    2f6e:	88 ee       	ldi	r24, 0xE8	; 232


static void tc_init(void)
{
	/* DAC clock */
	tc_enable(&TCE1);
    2f70:	86 83       	std	Z+6, r24	; 0x06
    2f72:	80 e4       	ldi	r24, 0x40	; 64
    2f74:	9a e0       	ldi	r25, 0x0A	; 10
    2f76:	0e 94 3b 0c 	call	0x1876	; 0x1876 <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2f7a:	0f 2e       	mov	r0, r31
    2f7c:	f0 e4       	ldi	r31, 0x40	; 64
    2f7e:	ef 2e       	mov	r14, r31
    2f80:	fa e0       	ldi	r31, 0x0A	; 10
    2f82:	ff 2e       	mov	r15, r31
    2f84:	f0 2d       	mov	r31, r0
    2f86:	f7 01       	movw	r30, r14
    2f88:	81 81       	ldd	r24, Z+1	; 0x01
    2f8a:	88 7f       	andi	r24, 0xF8	; 248
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2f8c:	81 83       	std	Z+1, r24	; 0x01
    2f8e:	80 e7       	ldi	r24, 0x70	; 112
    2f90:	92 e0       	ldi	r25, 0x02	; 2
    2f92:	86 a3       	std	Z+38, r24	; 0x26
	tc_set_wgm(&TCE1, TC_WG_NORMAL);											// Internal clock for DAC convertion
	tc_write_period(&TCE1, (sysclk_get_per_hz() / DAC_RATE_OF_CONV) - 1);		// DAC clock 48 kHz for audio play-back

	/* VCTCXO PWM signal generation */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 500);							// Init PWM structure and enable timer
    2f94:	97 a3       	std	Z+39, r25	; 0x27
    2f96:	24 ef       	ldi	r18, 0xF4	; 244
    2f98:	31 e0       	ldi	r19, 0x01	; 1
    2f9a:	43 e0       	ldi	r20, 0x03	; 3
    2f9c:	60 e0       	ldi	r22, 0x00	; 0
    2f9e:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	82 de       	rcall	.-764    	; 0x2ca8 <pwm_init>
    2fa4:	6d e2       	ldi	r22, 0x2D	; 45
    2fa6:	ce 01       	movw	r24, r28
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2fa8:	01 96       	adiw	r24, 0x01	; 1
    2faa:	46 df       	rcall	.-372    	; 0x2e38 <pwm_start>
    2fac:	c1 2c       	mov	r12, r1
    2fae:	68 94       	set
    2fb0:	dd 24       	eor	r13, r13
    2fb2:	d3 f8       	bld	r13, 3
    2fb4:	8d e5       	ldi	r24, 0x5D	; 93
    2fb6:	94 e7       	ldi	r25, 0x74	; 116
    2fb8:	d6 01       	movw	r26, r12
    2fba:	dc 96       	adiw	r26, 0x3c	; 60
    2fbc:	8d 93       	st	X+, r24
	struct adc_channel_config			adcch_vctcxo_conf;
	struct adc_channel_config			adcch_io_adc4_conf;
	struct adc_channel_config			adcch_io_adc5_conf;

	/* Prepare the structures */
	adc_read_configuration(&ADC_5V0,						&adc_5v0_conf);
    2fbe:	9c 93       	st	X, r25
    2fc0:	dd 97       	sbiw	r26, 0x3d	; 61
    2fc2:	be 01       	movw	r22, r28
    2fc4:	6c 5d       	subi	r22, 0xDC	; 220
    2fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    2fcc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <adc_read_configuration>
    2fd0:	ae 01       	movw	r20, r28
    2fd2:	41 5c       	subi	r20, 0xC1	; 193
    2fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd6:	61 e0       	ldi	r22, 0x01	; 1
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_3V0,						&adc_3v0_conf);
    2fdc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <adcch_read_configuration>
    2fe0:	be 01       	movw	r22, r28
    2fe2:	63 5e       	subi	r22, 0xE3	; 227
    2fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    2fea:	0e 94 6e 04 	call	0x8dc	; 0x8dc <adc_read_configuration>
    2fee:	ae 01       	movw	r20, r28
    2ff0:	45 5c       	subi	r20, 0xC5	; 197
    2ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff4:	61 e0       	ldi	r22, 0x01	; 1
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VBAT,						&adc_vbat_conf);
    2ffa:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <adcch_read_configuration>
    2ffe:	be 01       	movw	r22, r28
    3000:	6a 5e       	subi	r22, 0xEA	; 234
    3002:	7f 4f       	sbci	r23, 0xFF	; 255
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    3008:	0e 94 6e 04 	call	0x8dc	; 0x8dc <adc_read_configuration>
    300c:	ae 01       	movw	r20, r28
    300e:	49 5c       	subi	r20, 0xC9	; 201
    3010:	5f 4f       	sbci	r21, 0xFF	; 255
    3012:	61 e0       	ldi	r22, 0x01	; 1
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VCTCXO,						&adc_vctcxo_conf);
    3018:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <adcch_read_configuration>
    301c:	be 01       	movw	r22, r28
    301e:	61 5f       	subi	r22, 0xF1	; 241
    3020:	7f 4f       	sbci	r23, 0xFF	; 255
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    3026:	0e 94 6e 04 	call	0x8dc	; 0x8dc <adc_read_configuration>
    302a:	ae 01       	movw	r20, r28
    302c:	4d 5c       	subi	r20, 0xCD	; 205
    302e:	5f 4f       	sbci	r21, 0xFF	; 255
    3030:	62 e0       	ldi	r22, 0x02	; 2
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC4,					&adc_io_adc4_conf);
    3036:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <adcch_read_configuration>
    303a:	be 01       	movw	r22, r28
    303c:	68 5f       	subi	r22, 0xF8	; 248
    303e:	7f 4f       	sbci	r23, 0xFF	; 255
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_io_adc4_conf);
    3044:	0e 94 6e 04 	call	0x8dc	; 0x8dc <adc_read_configuration>
    3048:	ae 01       	movw	r20, r28
    304a:	41 5d       	subi	r20, 0xD1	; 209
    304c:	5f 4f       	sbci	r21, 0xFF	; 255
    304e:	64 e0       	ldi	r22, 0x04	; 4
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC5,					&adc_io_adc5_conf);
    3054:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <adcch_read_configuration>
    3058:	be 01       	movw	r22, r28
    305a:	6f 5f       	subi	r22, 0xFF	; 255
    305c:	7f 4f       	sbci	r23, 0xFF	; 255
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_io_adc5_conf);
    3062:	0e 94 6e 04 	call	0x8dc	; 0x8dc <adc_read_configuration>
    3066:	ae 01       	movw	r20, r28
    3068:	45 5d       	subi	r20, 0xD5	; 213
    306a:	5f 4f       	sbci	r21, 0xFF	; 255
    306c:	68 e0       	ldi	r22, 0x08	; 8
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	92 e0       	ldi	r25, 0x02	; 2
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3072:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <adcch_read_configuration>
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3076:	6d a1       	ldd	r22, Y+37	; 0x25
    3078:	8e a1       	ldd	r24, Y+38	; 0x26
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    307a:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    307c:	8e a3       	std	Y+38, r24	; 0x26
    307e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3080:	8f 8d       	ldd	r24, Y+31	; 0x1f
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3082:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3084:	8f 8f       	std	Y+31, r24	; 0x1f
    3086:	4f 89       	ldd	r20, Y+23	; 0x17
    3088:	88 8d       	ldd	r24, Y+24	; 0x18
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    308a:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    308c:	88 8f       	std	Y+24, r24	; 0x18
    308e:	38 89       	ldd	r19, Y+16	; 0x10
    3090:	89 89       	ldd	r24, Y+17	; 0x11
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3092:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3094:	89 8b       	std	Y+17, r24	; 0x11
    3096:	29 85       	ldd	r18, Y+9	; 0x09
    3098:	8a 85       	ldd	r24, Y+10	; 0x0a
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    309a:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    309c:	8a 87       	std	Y+10, r24	; 0x0a
    309e:	9a 81       	ldd	r25, Y+2	; 0x02
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    30a2:	8f 78       	andi	r24, 0x8F	; 143
    30a4:	8b 83       	std	Y+3, r24	; 0x03
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    30a6:	86 ec       	ldi	r24, 0xC6	; 198
    30a8:	8f a3       	std	Y+39, r24	; 0x27
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    30aa:	1b 87       	std	Y+11, r17	; 0x0b
    30ac:	1c 83       	std	Y+4, r17	; 0x04
    30ae:	83 e0       	ldi	r24, 0x03	; 3
    30b0:	88 a7       	std	Y+40, r24	; 0x28
    30b2:	89 a3       	std	Y+33, r24	; 0x21
    30b4:	8a 8f       	std	Y+26, r24	; 0x1a
    30b6:	8b 8b       	std	Y+19, r24	; 0x13
static inline void adc_set_gain_impedance_mode(struct adc_config *conf,
		enum adc_gainstage_impmode impmode)
{
	switch (impmode) {
	case ADC_GAIN_HIGHIMPEDANCE:
		conf->ctrlb &= ~ADC_IMPMODE_bm;
    30b8:	8c 87       	std	Y+12, r24	; 0x0c
    30ba:	8d 83       	std	Y+5, r24	; 0x05
    30bc:	61 70       	andi	r22, 0x01	; 1
    30be:	60 64       	ori	r22, 0x40	; 64
    30c0:	6d a3       	std	Y+37, r22	; 0x25
    30c2:	59 70       	andi	r21, 0x09	; 9
    30c4:	50 64       	ori	r21, 0x40	; 64
    30c6:	5e 8f       	std	Y+30, r21	; 0x1e
    30c8:	49 70       	andi	r20, 0x09	; 9
    30ca:	40 64       	ori	r20, 0x40	; 64
    30cc:	4f 8b       	std	Y+23, r20	; 0x17
    30ce:	39 70       	andi	r19, 0x09	; 9
    30d0:	30 64       	ori	r19, 0x40	; 64
    30d2:	38 8b       	std	Y+16, r19	; 0x10
    30d4:	21 70       	andi	r18, 0x01	; 1
    30d6:	20 64       	ori	r18, 0x40	; 64
    30d8:	29 87       	std	Y+9, r18	; 0x09
    30da:	91 70       	andi	r25, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    30dc:	90 64       	ori	r25, 0x40	; 64
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    30de:	9a 83       	std	Y+2, r25	; 0x02
    30e0:	1f af       	std	Y+63, r17	; 0x3f
    30e2:	90 e1       	ldi	r25, 0x10	; 16
    30e4:	21 96       	adiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    30e6:	9f af       	std	Y+63, r25	; 0x3f
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    30e8:	21 97       	sbiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    30ea:	1b af       	std	Y+59, r17	; 0x3b
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    30ec:	1c ae       	std	Y+60, r1	; 0x3c
    30ee:	1f ab       	std	Y+55, r17	; 0x37
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    30f0:	98 e1       	ldi	r25, 0x18	; 24
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    30f2:	98 af       	std	Y+56, r25	; 0x38
    30f4:	1b ab       	std	Y+51, r17	; 0x33
    30f6:	68 94       	set
    30f8:	99 24       	eor	r9, r9
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    30fa:	93 f8       	bld	r9, 3
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    30fc:	9c aa       	std	Y+52, r9	; 0x34
    30fe:	1f a7       	std	Y+47, r17	; 0x2f
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3100:	90 e2       	ldi	r25, 0x20	; 32
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3102:	98 ab       	std	Y+48, r25	; 0x30
    3104:	1b a7       	std	Y+43, r17	; 0x2b
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    3106:	98 e2       	ldi	r25, 0x28	; 40
    3108:	9c a7       	std	Y+44, r25	; 0x2c
    310a:	22 96       	adiw	r28, 0x02	; 2
    310c:	9f ad       	ldd	r25, Y+63	; 0x3f
    310e:	22 97       	sbiw	r28, 0x02	; 2
    3110:	93 7f       	andi	r25, 0xF3	; 243
    3112:	22 96       	adiw	r28, 0x02	; 2
    3114:	9f af       	std	Y+63, r25	; 0x3f
    3116:	22 97       	sbiw	r28, 0x02	; 2
    3118:	9d ad       	ldd	r25, Y+61	; 0x3d
    311a:	93 7f       	andi	r25, 0xF3	; 243
    311c:	9d af       	std	Y+61, r25	; 0x3d
    311e:	99 ad       	ldd	r25, Y+57	; 0x39
    3120:	93 7f       	andi	r25, 0xF3	; 243
    3122:	99 af       	std	Y+57, r25	; 0x39
    3124:	9d a9       	ldd	r25, Y+53	; 0x35
    3126:	93 7f       	andi	r25, 0xF3	; 243
    3128:	9d ab       	std	Y+53, r25	; 0x35
    312a:	99 a9       	ldd	r25, Y+49	; 0x31
    312c:	93 7f       	andi	r25, 0xF3	; 243
    312e:	99 ab       	std	Y+49, r25	; 0x31
    3130:	9d a5       	ldd	r25, Y+45	; 0x2d
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    3132:	93 7f       	andi	r25, 0xF3	; 243
    3134:	9d a7       	std	Y+45, r25	; 0x2d
    3136:	23 96       	adiw	r28, 0x03	; 3
    3138:	8f af       	std	Y+63, r24	; 0x3f
    313a:	23 97       	sbiw	r28, 0x03	; 3
	adcch_set_pin_scan(&adcch_5v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_3v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_vbat_conf,	0, 3);

	/* Execute the new settings */
	adc_write_configuration(&ADC_5V0,						&adc_5v0_conf);
    313c:	8e af       	std	Y+62, r24	; 0x3e
    313e:	8a af       	std	Y+58, r24	; 0x3a
    3140:	be 01       	movw	r22, r28
    3142:	6c 5d       	subi	r22, 0xDC	; 220
    3144:	7f 4f       	sbci	r23, 0xFF	; 255
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    314a:	0e 94 04 04 	call	0x808	; 0x808 <adc_write_configuration>
    314e:	ae 01       	movw	r20, r28
    3150:	41 5c       	subi	r20, 0xC1	; 193
    3152:	5f 4f       	sbci	r21, 0xFF	; 255
    3154:	61 e0       	ldi	r22, 0x01	; 1
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_3V0,						&adc_3v0_conf);
    315a:	0e 94 a7 04 	call	0x94e	; 0x94e <adcch_write_configuration>
    315e:	be 01       	movw	r22, r28
    3160:	63 5e       	subi	r22, 0xE3	; 227
    3162:	7f 4f       	sbci	r23, 0xFF	; 255
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    3168:	0e 94 04 04 	call	0x808	; 0x808 <adc_write_configuration>
    316c:	ae 01       	movw	r20, r28
    316e:	45 5c       	subi	r20, 0xC5	; 197
    3170:	5f 4f       	sbci	r21, 0xFF	; 255
    3172:	61 e0       	ldi	r22, 0x01	; 1
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VBAT,						&adc_vbat_conf);
    3178:	0e 94 a7 04 	call	0x94e	; 0x94e <adcch_write_configuration>
    317c:	be 01       	movw	r22, r28
    317e:	6a 5e       	subi	r22, 0xEA	; 234
    3180:	7f 4f       	sbci	r23, 0xFF	; 255
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    3186:	0e 94 04 04 	call	0x808	; 0x808 <adc_write_configuration>
    318a:	ae 01       	movw	r20, r28
    318c:	49 5c       	subi	r20, 0xC9	; 201
    318e:	5f 4f       	sbci	r21, 0xFF	; 255
    3190:	61 e0       	ldi	r22, 0x01	; 1
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VCTCXO,					&adc_vctcxo_conf);
    3196:	0e 94 a7 04 	call	0x94e	; 0x94e <adcch_write_configuration>
    319a:	be 01       	movw	r22, r28
    319c:	61 5f       	subi	r22, 0xF1	; 241
    319e:	7f 4f       	sbci	r23, 0xFF	; 255
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    31a4:	0e 94 04 04 	call	0x808	; 0x808 <adc_write_configuration>
    31a8:	ae 01       	movw	r20, r28
    31aa:	4d 5c       	subi	r20, 0xCD	; 205
    31ac:	5f 4f       	sbci	r21, 0xFF	; 255
    31ae:	62 e0       	ldi	r22, 0x02	; 2
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC4,					&adc_vctcxo_conf);
    31b4:	0e 94 a7 04 	call	0x94e	; 0x94e <adcch_write_configuration>
    31b8:	be 01       	movw	r22, r28
    31ba:	61 5f       	subi	r22, 0xF1	; 241
    31bc:	7f 4f       	sbci	r23, 0xFF	; 255
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_vctcxo_conf);
    31c2:	0e 94 04 04 	call	0x808	; 0x808 <adc_write_configuration>
    31c6:	ae 01       	movw	r20, r28
    31c8:	4d 5c       	subi	r20, 0xCD	; 205
    31ca:	5f 4f       	sbci	r21, 0xFF	; 255
    31cc:	64 e0       	ldi	r22, 0x04	; 4
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC5,					&adc_vctcxo_conf);
    31d2:	0e 94 a7 04 	call	0x94e	; 0x94e <adcch_write_configuration>
    31d6:	be 01       	movw	r22, r28
    31d8:	61 5f       	subi	r22, 0xF1	; 241
    31da:	7f 4f       	sbci	r23, 0xFF	; 255
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_vctcxo_conf);
    31e0:	0e 94 04 04 	call	0x808	; 0x808 <adc_write_configuration>
    31e4:	ae 01       	movw	r20, r28
    31e6:	4d 5c       	subi	r20, 0xCD	; 205
    31e8:	5f 4f       	sbci	r21, 0xFF	; 255
    31ea:	68 e0       	ldi	r22, 0x08	; 8
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	92 e0       	ldi	r25, 0x02	; 2
static void dac_init(void)
{
    struct dac_config dac_io_dac0_conf;
    struct dac_config dac_io_dac1_conf;

    dac_read_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    31f0:	0e 94 a7 04 	call	0x94e	; 0x94e <adcch_write_configuration>
    31f4:	be 01       	movw	r22, r28
    31f6:	68 5f       	subi	r22, 0xF8	; 248
    31f8:	7f 4f       	sbci	r23, 0xFF	; 255
    31fa:	80 e2       	ldi	r24, 0x20	; 32
    31fc:	93 e0       	ldi	r25, 0x03	; 3
    dac_read_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    31fe:	0e 94 b8 05 	call	0xb70	; 0xb70 <dac_read_configuration>
    3202:	be 01       	movw	r22, r28
    3204:	6f 5f       	subi	r22, 0xFF	; 255
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	80 e2       	ldi	r24, 0x20	; 32
    320a:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    320c:	0e 94 b8 05 	call	0xb70	; 0xb70 <dac_read_configuration>
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    3210:	1a 87       	std	Y+10, r17	; 0x0a
    3212:	1b 83       	std	Y+3, r17	; 0x03
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    3214:	84 e0       	ldi	r24, 0x04	; 4
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    3216:	88 87       	std	Y+8, r24	; 0x08
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    3218:	99 85       	ldd	r25, Y+9	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    321a:	99 82       	std	Y+1, r9	; 0x01
    321c:	8a 81       	ldd	r24, Y+2	; 0x02
    321e:	9c 79       	andi	r25, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    3220:	91 60       	ori	r25, 0x01	; 1
    3222:	99 87       	std	Y+9, r25	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    3224:	96 e0       	ldi	r25, 0x06	; 6
    3226:	9b 87       	std	Y+11, r25	; 0x0b
    3228:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    322a:	82 60       	ori	r24, 0x02	; 2
    #ifdef XMEGA_DAC_VERSION_1
    dac_set_conversion_interval(&dac_io_dac0_conf, 2);
    dac_set_conversion_interval(&dac_io_dac1_conf, 2);
    #endif

    dac_write_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    322c:	8a 83       	std	Y+2, r24	; 0x02
    322e:	9c 83       	std	Y+4, r25	; 0x04
    3230:	be 01       	movw	r22, r28
    3232:	68 5f       	subi	r22, 0xF8	; 248
    3234:	7f 4f       	sbci	r23, 0xFF	; 255
    3236:	80 e2       	ldi	r24, 0x20	; 32
    3238:	93 e0       	ldi	r25, 0x03	; 3
    dac_write_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    323a:	0e 94 5c 05 	call	0xab8	; 0xab8 <dac_write_configuration>
    323e:	be 01       	movw	r22, r28
    3240:	6f 5f       	subi	r22, 0xFF	; 255
    3242:	7f 4f       	sbci	r23, 0xFF	; 255
    3244:	80 e2       	ldi	r24, 0x20	; 32
    3246:	93 e0       	ldi	r25, 0x03	; 3
	rtc_set_callback(cb_rtc_alarm);
	evsys_init();
	tc_init();
	adc_init();
	dac_init();
	twi_init();
    3248:	0e 94 5c 05 	call	0xab8	; 0xab8 <dac_write_configuration>
	
	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    324c:	0e 94 c6 01 	call	0x38c	; 0x38c <twi_init>
	
	/* All interrupt sources prepared here - IRQ activation */
	irq_initialize_vectors();
    3250:	0e 94 33 02 	call	0x466	; 0x466 <board_init>
	cpu_irq_enable();
    3254:	f5 01       	movw	r30, r10
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3256:	02 83       	std	Z+2, r16	; 0x02
    3258:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    325a:	d6 01       	movw	r26, r12
    325c:	8c 91       	ld	r24, X
    325e:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3260:	81 60       	ori	r24, 0x01	; 1
    3262:	8c 93       	st	X, r24
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3264:	f7 01       	movw	r30, r14
    3266:	80 81       	ld	r24, Z
	
	/* Start of sub-modules */
	tc_start();			// All clocks and PWM timers start here
	twi_start();
    3268:	80 7f       	andi	r24, 0xF0	; 240
    326a:	81 60       	ori	r24, 0x01	; 1
}


static void usb_init(void)
{
	udc_start();
    326c:	80 83       	st	Z, r24
    326e:	0e 94 11 02 	call	0x422	; 0x422 <twi_start>
	twi_start();
	//rtc_start();		// Test for RTC32
	
	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB
	stdio_usb_init();	// stdio_usb
    3272:	14 d6       	rcall	.+3112   	; 0x3e9c <udc_start>
	stdio_usb_enable();
    3274:	0e 94 a2 22 	call	0x4544	; 0x4544 <stdio_usb_init>
	
	/* The application code */
	runmode = (uint8_t) 1;
    3278:	0e 94 9e 22 	call	0x453c	; 0x453c <stdio_usb_enable>
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    327c:	10 93 e1 22 	sts	0x22E1, r17	; 0x8022e1 <runmode>
    3280:	0f 2e       	mov	r0, r31
    3282:	f0 e2       	ldi	r31, 0x20	; 32
    3284:	8f 2e       	mov	r8, r31
    3286:	f3 e0       	ldi	r31, 0x03	; 3
	task_twi(now, last);
	
	/* DEBUGGING USB */
	uint32_t now_sec = now >> 10;
	if ((last >> 10) != now_sec) {
		printf("FindMeSAT V1 @USB: RTC32 = %06ld sec\r\n", now_sec);
    3288:	9f 2e       	mov	r9, r31
    328a:	f0 2d       	mov	r31, r0
    328c:	0f 2e       	mov	r0, r31
    328e:	f6 ee       	ldi	r31, 0xE6	; 230
    3290:	af 2e       	mov	r10, r31
    3292:	f0 e2       	ldi	r31, 0x20	; 32

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3294:	bf 2e       	mov	r11, r31
    3296:	f0 2d       	mov	r31, r0
    3298:	0f 2e       	mov	r0, r31
    329a:	f1 e3       	ldi	r31, 0x31	; 49
    329c:	2f 2e       	mov	r2, r31
    329e:	f4 e2       	ldi	r31, 0x24	; 36
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    32a0:	3f 2e       	mov	r3, r31
    32a2:	f0 2d       	mov	r31, r0
}

static void task(void)
{
	static uint32_t last = 0;
	uint32_t now = rtc_get_time();
    32a4:	08 e4       	ldi	r16, 0x48	; 72
    32a6:	10 e0       	ldi	r17, 0x00	; 0
    32a8:	0e 94 39 01 	call	0x272	; 0x272 <rtc_get_time>
    32ac:	6b 01       	movw	r12, r22
    32ae:	7c 01       	movw	r14, r24
    32b0:	d4 01       	movw	r26, r8

static void task_dac(void)
{
	static int idx_dacX = 0;
	
	if (dac_channel_is_ready(&DAC_IO_DAC0, DAC_CH0 | DAC_CH1)) {
    32b2:	15 96       	adiw	r26, 0x05	; 5
    32b4:	8c 91       	ld	r24, X
    32b6:	83 70       	andi	r24, 0x03	; 3
		dac_set_channel_value(&DAC_IO_DAC0, DAC_IO_DAC0_CHANNEL, dac_io_dac0_buf[idx_dacX]);
    32b8:	83 30       	cpi	r24, 0x03	; 3
    32ba:	b1 f5       	brne	.+108    	; 0x3328 <main+0x42a>
    32bc:	e0 91 d1 22 	lds	r30, 0x22D1	; 0x8022d1 <idx_dacX.6917>
    32c0:	f0 91 d2 22 	lds	r31, 0x22D2	; 0x8022d2 <idx_dacX.6917+0x1>
    32c4:	ee 0f       	add	r30, r30
    32c6:	ff 1f       	adc	r31, r31
    32c8:	e3 5f       	subi	r30, 0xF3	; 243
    32ca:	fe 4d       	sbci	r31, 0xDE	; 222

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    32cc:	20 81       	ld	r18, Z
    32ce:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    32d0:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    32d2:	88 87       	std	Y+8, r24	; 0x08
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    32d4:	f8 94       	cli
    32d6:	88 85       	ldd	r24, Y+8	; 0x08
    32d8:	f4 01       	movw	r30, r8
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    32da:	20 8f       	std	Z+24, r18	; 0x18
		dac_set_channel_value(&DAC_IO_DAC1, DAC_IO_DAC1_CHANNEL, dac_io_dac1_buf[idx_dacX]);
    32dc:	31 8f       	std	Z+25, r19	; 0x19
    32de:	8f bf       	out	0x3f, r24	; 63
    32e0:	e0 91 d1 22 	lds	r30, 0x22D1	; 0x8022d1 <idx_dacX.6917>
    32e4:	f0 91 d2 22 	lds	r31, 0x22D2	; 0x8022d2 <idx_dacX.6917+0x1>
    32e8:	ee 0f       	add	r30, r30
    32ea:	ff 1f       	adc	r31, r31
    32ec:	e3 5f       	subi	r30, 0xF3	; 243
    32ee:	fe 4d       	sbci	r31, 0xDE	; 222

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    32f0:	20 81       	ld	r18, Z
    32f2:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    32f4:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	f8 94       	cli
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	aa e3       	ldi	r26, 0x3A	; 58
    32fe:	b3 e0       	ldi	r27, 0x03	; 3
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3300:	2d 93       	st	X+, r18
		
		idx_dacX++;
		idx_dacX %= DAC_NR_OF_SAMPLES;
    3302:	3c 93       	st	X, r19
    3304:	8f bf       	out	0x3f, r24	; 63
    3306:	80 91 d1 22 	lds	r24, 0x22D1	; 0x8022d1 <idx_dacX.6917>
    330a:	90 91 d2 22 	lds	r25, 0x22D2	; 0x8022d2 <idx_dacX.6917+0x1>
    330e:	01 96       	adiw	r24, 0x01	; 1
    3310:	8f 71       	andi	r24, 0x1F	; 31
    3312:	90 78       	andi	r25, 0x80	; 128
    3314:	99 23       	and	r25, r25
    3316:	24 f4       	brge	.+8      	; 0x3320 <main+0x422>
    3318:	01 97       	sbiw	r24, 0x01	; 1
    331a:	80 6e       	ori	r24, 0xE0	; 224
    331c:	9f 6f       	ori	r25, 0xFF	; 255
    331e:	01 96       	adiw	r24, 0x01	; 1
    3320:	80 93 d1 22 	sts	0x22D1, r24	; 0x8022d1 <idx_dacX.6917>
	
	/* Handling the USB connection */
	task_usb();
	
	/* Handle TWI1 and TWI2 communications */
	task_twi(now, last);
    3324:	90 93 d2 22 	sts	0x22D2, r25	; 0x8022d2 <idx_dacX.6917+0x1>
    3328:	40 90 d3 22 	lds	r4, 0x22D3	; 0x8022d3 <last.6928>
    332c:	50 90 d4 22 	lds	r5, 0x22D4	; 0x8022d4 <last.6928+0x1>
    3330:	60 90 d5 22 	lds	r6, 0x22D5	; 0x8022d5 <last.6928+0x2>
}

static void task_twi(uint32_t now, uint32_t last)
{
	/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
	task_twi_onboard(now, last);
    3334:	70 90 d6 22 	lds	r7, 0x22D6	; 0x8022d6 <last.6928+0x3>
    3338:	a3 01       	movw	r20, r6
    333a:	92 01       	movw	r18, r4
    333c:	c7 01       	movw	r24, r14
    333e:	b6 01       	movw	r22, r12
	
	/* TWI2 - LCD Port */
	task_twi_lcd(now, last);
    3340:	0e 94 31 02 	call	0x462	; 0x462 <task_twi_onboard>
    3344:	a3 01       	movw	r20, r6
    3346:	92 01       	movw	r18, r4
    3348:	c7 01       	movw	r24, r14
    334a:	b6 01       	movw	r22, r12
	
	/* Handle TWI1 and TWI2 communications */
	task_twi(now, last);
	
	/* DEBUGGING USB */
	uint32_t now_sec = now >> 10;
    334c:	0e 94 32 02 	call	0x464	; 0x464 <task_twi_lcd>
    3350:	d7 01       	movw	r26, r14
    3352:	c6 01       	movw	r24, r12
    3354:	07 2e       	mov	r0, r23
    3356:	7a e0       	ldi	r23, 0x0A	; 10
    3358:	b6 95       	lsr	r27
    335a:	a7 95       	ror	r26
    335c:	97 95       	ror	r25
    335e:	87 95       	ror	r24
    3360:	7a 95       	dec	r23
	if ((last >> 10) != now_sec) {
    3362:	d1 f7       	brne	.-12     	; 0x3358 <main+0x45a>
    3364:	70 2d       	mov	r23, r0
    3366:	40 91 d3 22 	lds	r20, 0x22D3	; 0x8022d3 <last.6928>
    336a:	50 91 d4 22 	lds	r21, 0x22D4	; 0x8022d4 <last.6928+0x1>
    336e:	60 91 d5 22 	lds	r22, 0x22D5	; 0x8022d5 <last.6928+0x2>
    3372:	70 91 d6 22 	lds	r23, 0x22D6	; 0x8022d6 <last.6928+0x3>
    3376:	03 2e       	mov	r0, r19
    3378:	3a e0       	ldi	r19, 0x0A	; 10
    337a:	76 95       	lsr	r23
    337c:	67 95       	ror	r22
    337e:	57 95       	ror	r21
    3380:	47 95       	ror	r20
    3382:	3a 95       	dec	r19
    3384:	d1 f7       	brne	.-12     	; 0x337a <main+0x47c>
    3386:	30 2d       	mov	r19, r0
    3388:	84 17       	cp	r24, r20
    338a:	95 07       	cpc	r25, r21
    338c:	a6 07       	cpc	r26, r22
		printf("FindMeSAT V1 @USB: RTC32 = %06ld sec\r\n", now_sec);
    338e:	b7 07       	cpc	r27, r23
    3390:	71 f0       	breq	.+28     	; 0x33ae <main+0x4b0>
    3392:	bf 93       	push	r27
    3394:	af 93       	push	r26
    3396:	9f 93       	push	r25
    3398:	8f 93       	push	r24
    339a:	bf 92       	push	r11
    339c:	af 92       	push	r10
    339e:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <printf>
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
	}
	
	last = now;
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	c0 92 d3 22 	sts	0x22D3, r12	; 0x8022d3 <last.6928>
    33b2:	d0 92 d4 22 	sts	0x22D4, r13	; 0x8022d4 <last.6928+0x1>
    33b6:	e0 92 d5 22 	sts	0x22D5, r14	; 0x8022d5 <last.6928+0x2>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    33ba:	f0 92 d6 22 	sts	0x22D6, r15	; 0x8022d6 <last.6928+0x3>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    33be:	f8 94       	cli
    33c0:	f1 01       	movw	r30, r2
    33c2:	80 81       	ld	r24, Z
    33c4:	81 11       	cpse	r24, r1
    33c6:	09 c0       	rjmp	.+18     	; 0x33da <main+0x4dc>
    33c8:	a2 e3       	ldi	r26, 0x32	; 50
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    33ca:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    33cc:	e0 e0       	ldi	r30, 0x00	; 0
    33ce:	ef 5f       	subi	r30, 0xFF	; 255
    33d0:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    33d2:	88 23       	and	r24, r24
    33d4:	e1 f3       	breq	.-8      	; 0x33ce <main+0x4d0>
		cpu_irq_enable();
    33d6:	e1 11       	cpse	r30, r1
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <main+0x4e0>
    33da:	78 94       	sei
    33dc:	12 c0       	rjmp	.+36     	; 0x3402 <main+0x504>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    33de:	d8 01       	movw	r26, r16
    33e0:	8c 91       	ld	r24, X
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	ee 5d       	subi	r30, 0xDE	; 222
    33e6:	ff 4d       	sbci	r31, 0xDF	; 223
    33e8:	81 7f       	andi	r24, 0xF1	; 241
    33ea:	90 81       	ld	r25, Z
	sleep_enable();
    33ec:	89 2b       	or	r24, r25
    33ee:	8c 93       	st	X, r24
    33f0:	8c 91       	ld	r24, X

	cpu_irq_enable();
    33f2:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    33f4:	8c 93       	st	X, r24

	sleep_disable();
    33f6:	78 94       	sei
    33f8:	88 95       	sleep
    33fa:	f8 01       	movw	r30, r16
    33fc:	80 81       	ld	r24, Z
	stdio_usb_init();	// stdio_usb
	stdio_usb_enable();
	
	/* The application code */
	runmode = (uint8_t) 1;
    while (runmode) {
    33fe:	8e 7f       	andi	r24, 0xFE	; 254
    3400:	80 83       	st	Z, r24
    3402:	80 91 e1 22 	lds	r24, 0x22E1	; 0x8022e1 <runmode>
		task();
		sleepmgr_enter_sleep();
    }
	
	cpu_irq_disable();
    3406:	81 11       	cpse	r24, r1
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    3408:	4f cf       	rjmp	.-354    	; 0x32a8 <main+0x3aa>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    340a:	f8 94       	cli
    340c:	f8 94       	cli
    340e:	80 91 31 24 	lds	r24, 0x2431	; 0x802431 <sleepmgr_locks>
    3412:	81 11       	cpse	r24, r1
    3414:	09 c0       	rjmp	.+18     	; 0x3428 <main+0x52a>
    3416:	a2 e3       	ldi	r26, 0x32	; 50
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3418:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    341a:	e0 e0       	ldi	r30, 0x00	; 0
    341c:	ef 5f       	subi	r30, 0xFF	; 255
    341e:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3420:	88 23       	and	r24, r24
    3422:	e1 f3       	breq	.-8      	; 0x341c <main+0x51e>
		cpu_irq_enable();
    3424:	e1 11       	cpse	r30, r1
    3426:	02 c0       	rjmp	.+4      	; 0x342c <main+0x52e>
    3428:	78 94       	sei
    342a:	13 c0       	rjmp	.+38     	; 0x3452 <main+0x554>
    342c:	a8 e4       	ldi	r26, 0x48	; 72

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	8c 91       	ld	r24, X
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	ee 5d       	subi	r30, 0xDE	; 222
    3436:	ff 4d       	sbci	r31, 0xDF	; 223
    3438:	98 2f       	mov	r25, r24
    343a:	91 7f       	andi	r25, 0xF1	; 241
    343c:	80 81       	ld	r24, Z
	sleep_enable();
    343e:	89 2b       	or	r24, r25
    3440:	8c 93       	st	X, r24
    3442:	8c 91       	ld	r24, X

	cpu_irq_enable();
    3444:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    3446:	8c 93       	st	X, r24

	sleep_disable();
    3448:	78 94       	sei
    344a:	88 95       	sleep
    344c:	8c 91       	ld	r24, X
	sleepmgr_enter_sleep();
	
	return retcode;
}
    344e:	8e 7f       	andi	r24, 0xFE	; 254
    3450:	8c 93       	st	X, r24
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	ce 5b       	subi	r28, 0xBE	; 190
    3458:	df 4f       	sbci	r29, 0xFF	; 255
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	df 91       	pop	r29
    3460:	cf 91       	pop	r28
    3462:	1f 91       	pop	r17
    3464:	0f 91       	pop	r16
    3466:	ff 90       	pop	r15
    3468:	ef 90       	pop	r14
    346a:	df 90       	pop	r13
    346c:	cf 90       	pop	r12
    346e:	bf 90       	pop	r11
    3470:	af 90       	pop	r10
    3472:	9f 90       	pop	r9
    3474:	8f 90       	pop	r8
    3476:	7f 90       	pop	r7
    3478:	6f 90       	pop	r6
    347a:	5f 90       	pop	r5
    347c:	4f 90       	pop	r4
    347e:	3f 90       	pop	r3
    3480:	2f 90       	pop	r2
    3482:	08 95       	ret

00003484 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    3484:	cf 93       	push	r28
    3486:	df 93       	push	r29
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	28 97       	sbiw	r28, 0x08	; 8
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    3492:	8f ef       	ldi	r24, 0xFF	; 255
    3494:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    3498:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    349c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    34a0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    34a4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    34a8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    34ac:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    34b0:	61 e0       	ldi	r22, 0x01	; 1
    34b2:	81 e4       	ldi	r24, 0x41	; 65
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	0e 94 d5 22 	call	0x45aa	; 0x45aa <ccp_write_io>
    34ba:	6c e1       	ldi	r22, 0x1C	; 28
    34bc:	70 e0       	ldi	r23, 0x00	; 0
    34be:	82 e0       	ldi	r24, 0x02	; 2
    34c0:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    34c4:	8a 83       	std	Y+2, r24	; 0x02
    34c6:	6d e1       	ldi	r22, 0x1D	; 29
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	82 e0       	ldi	r24, 0x02	; 2
    34cc:	0e 94 cb 22 	call	0x4596	; 0x4596 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    34d0:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	9a 81       	ldd	r25, Y+2	; 0x02
    34d6:	01 96       	adiw	r24, 0x01	; 1
    34d8:	21 f4       	brne	.+8      	; 0x34e2 <sysclk_init+0x5e>
		cal = 0x2340;
    34da:	80 e4       	ldi	r24, 0x40	; 64
    34dc:	93 e2       	ldi	r25, 0x23	; 35
    34de:	89 83       	std	Y+1, r24	; 0x01
    34e0:	9a 83       	std	Y+2, r25	; 0x02
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	9a 81       	ldd	r25, Y+2	; 0x02
    34e6:	8b 83       	std	Y+3, r24	; 0x03
    34e8:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    34ea:	e0 e6       	ldi	r30, 0x60	; 96
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    34f0:	8c 81       	ldd	r24, Y+4	; 0x04
    34f2:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    34f4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    34f8:	84 fd       	sbrc	r24, 4
    34fa:	21 c0       	rjmp	.+66     	; 0x353e <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    34fc:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    3500:	83 fd       	sbrc	r24, 3
    3502:	0e c0       	rjmp	.+28     	; 0x3520 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    3504:	e0 e5       	ldi	r30, 0x50	; 80
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    350a:	8f b7       	in	r24, 0x3f	; 63
    350c:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    350e:	f8 94       	cli
	return flags;
    3510:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3512:	80 81       	ld	r24, Z
    3514:	88 60       	ori	r24, 0x08	; 8
    3516:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3518:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    351a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    351c:	83 ff       	sbrs	r24, 3
    351e:	fd cf       	rjmp	.-6      	; 0x351a <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3520:	8f b7       	in	r24, 0x3f	; 63
    3522:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    3524:	f8 94       	cli
	return flags;
    3526:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    3528:	e0 e5       	ldi	r30, 0x50	; 80
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	83 ec       	ldi	r24, 0xC3	; 195
    352e:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    3530:	80 81       	ld	r24, Z
    3532:	80 61       	ori	r24, 0x10	; 16
    3534:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3536:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    3538:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    353a:	84 ff       	sbrs	r24, 4
    353c:	fd cf       	rjmp	.-6      	; 0x3538 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    353e:	64 e0       	ldi	r22, 0x04	; 4
    3540:	80 e4       	ldi	r24, 0x40	; 64
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	0e 94 d5 22 	call	0x45aa	; 0x45aa <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3548:	8f b7       	in	r24, 0x3f	; 63
    354a:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    354c:	f8 94       	cli
	return flags;
    354e:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    3550:	e0 e5       	ldi	r30, 0x50	; 80
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	80 81       	ld	r24, Z
    3556:	8e 7f       	andi	r24, 0xFE	; 254
    3558:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    355a:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    355c:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    355e:	8f b7       	in	r24, 0x3f	; 63
    3560:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    3562:	f8 94       	cli
	return flags;
    3564:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3566:	80 81       	ld	r24, Z
    3568:	88 60       	ori	r24, 0x08	; 8
    356a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    356c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    356e:	81 81       	ldd	r24, Z+1	; 0x01
    3570:	83 ff       	sbrs	r24, 3
    3572:	fd cf       	rjmp	.-6      	; 0x356e <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    3574:	8b e0       	ldi	r24, 0x0B	; 11
    3576:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    357a:	28 96       	adiw	r28, 0x08	; 8
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	08 95       	ret

00003586 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	1f 92       	push	r1
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3590:	9f b7       	in	r25, 0x3f	; 63
    3592:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    3594:	f8 94       	cli
	return flags;
    3596:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    3598:	e8 2f       	mov	r30, r24
    359a:	f0 e0       	ldi	r31, 0x00	; 0
    359c:	e0 59       	subi	r30, 0x90	; 144
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	60 95       	com	r22
    35a2:	80 81       	ld	r24, Z
    35a4:	68 23       	and	r22, r24
    35a6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35a8:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    35aa:	0f 90       	pop	r0
    35ac:	df 91       	pop	r29
    35ae:	cf 91       	pop	r28
    35b0:	08 95       	ret

000035b2 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	1f 92       	push	r1
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    35bc:	9f b7       	in	r25, 0x3f	; 63
    35be:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    35c0:	f8 94       	cli
	return flags;
    35c2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    35c4:	e8 2f       	mov	r30, r24
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	e0 59       	subi	r30, 0x90	; 144
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	80 81       	ld	r24, Z
    35ce:	68 2b       	or	r22, r24
    35d0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35d2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    35d4:	0f 90       	pop	r0
    35d6:	df 91       	pop	r29
    35d8:	cf 91       	pop	r28
    35da:	08 95       	ret

000035dc <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    35dc:	cf 93       	push	r28
    35de:	df 93       	push	r29
    35e0:	1f 92       	push	r1
    35e2:	1f 92       	push	r1
    35e4:	cd b7       	in	r28, 0x3d	; 61
    35e6:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    35e8:	86 30       	cpi	r24, 0x06	; 6
    35ea:	11 f0       	breq	.+4      	; 0x35f0 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	01 c0       	rjmp	.+2      	; 0x35f2 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    35f0:	68 e1       	ldi	r22, 0x18	; 24
    35f2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    35f6:	81 fd       	sbrc	r24, 1
    35f8:	2a c0       	rjmp	.+84     	; 0x364e <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    35fa:	8f b7       	in	r24, 0x3f	; 63
    35fc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    35fe:	f8 94       	cli
	return flags;
    3600:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3602:	e0 e5       	ldi	r30, 0x50	; 80
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	82 60       	ori	r24, 0x02	; 2
    360a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    360c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    360e:	81 81       	ldd	r24, Z+1	; 0x01
    3610:	81 ff       	sbrs	r24, 1
    3612:	fd cf       	rjmp	.-6      	; 0x360e <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3614:	8f b7       	in	r24, 0x3f	; 63
    3616:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3618:	f8 94       	cli
	return flags;
    361a:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    361c:	a0 e5       	ldi	r26, 0x50	; 80
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	16 96       	adiw	r26, 0x06	; 6
    3622:	8c 91       	ld	r24, X
    3624:	16 97       	sbiw	r26, 0x06	; 6
    3626:	89 7f       	andi	r24, 0xF9	; 249
    3628:	16 96       	adiw	r26, 0x06	; 6
    362a:	8c 93       	st	X, r24
    362c:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    362e:	e0 e6       	ldi	r30, 0x60	; 96
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 e8       	ldi	r24, 0x80	; 128
    3634:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    3636:	8b eb       	ldi	r24, 0xBB	; 187
    3638:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    363a:	16 96       	adiw	r26, 0x06	; 6
    363c:	8c 91       	ld	r24, X
    363e:	16 97       	sbiw	r26, 0x06	; 6
    3640:	84 60       	ori	r24, 0x04	; 4
    3642:	16 96       	adiw	r26, 0x06	; 6
    3644:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    3646:	80 81       	ld	r24, Z
    3648:	81 60       	ori	r24, 0x01	; 1
    364a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    364c:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    364e:	63 60       	ori	r22, 0x03	; 3
    3650:	84 e4       	ldi	r24, 0x44	; 68
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	aa d7       	rcall	.+3924   	; 0x45aa <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    3656:	60 e4       	ldi	r22, 0x40	; 64
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	95 df       	rcall	.-214    	; 0x3586 <sysclk_enable_module>
}
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	df 91       	pop	r29
    3662:	cf 91       	pop	r28
    3664:	08 95       	ret

00003666 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    3666:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udi_cdc_nb_comm_enabled>
    366a:	81 50       	subi	r24, 0x01	; 1
    366c:	80 93 f8 23 	sts	0x23F8, r24	; 0x8023f8 <udi_cdc_nb_comm_enabled>
    3670:	08 95       	ret

00003672 <udi_cdc_data_setup>:
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	08 95       	ret

00003676 <udi_cdc_getsetting>:
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	08 95       	ret

0000367a <udi_cdc_line_coding_received>:
    367a:	66 e0       	ldi	r22, 0x06	; 6
    367c:	74 e2       	ldi	r23, 0x24	; 36
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	39 cc       	rjmp	.-1934   	; 0x2ef4 <usb_callback_config>
    3682:	08 95       	ret

00003684 <udi_cdc_comm_enable>:
    3684:	10 92 f8 23 	sts	0x23F8, r1	; 0x8023f8 <udi_cdc_nb_comm_enabled>
    3688:	10 92 04 24 	sts	0x2404, r1	; 0x802404 <udi_cdc_state>
    368c:	10 92 05 24 	sts	0x2405, r1	; 0x802405 <udi_cdc_state+0x1>
    3690:	ea ef       	ldi	r30, 0xFA	; 250
    3692:	f3 e2       	ldi	r31, 0x23	; 35
    3694:	81 ea       	ldi	r24, 0xA1	; 161
    3696:	80 83       	st	Z, r24
    3698:	80 e2       	ldi	r24, 0x20	; 32
    369a:	81 83       	std	Z+1, r24	; 0x01
    369c:	12 82       	std	Z+2, r1	; 0x02
    369e:	13 82       	std	Z+3, r1	; 0x03
    36a0:	14 82       	std	Z+4, r1	; 0x04
    36a2:	15 82       	std	Z+5, r1	; 0x05
    36a4:	82 e0       	ldi	r24, 0x02	; 2
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	86 83       	std	Z+6, r24	; 0x06
    36aa:	97 83       	std	Z+7, r25	; 0x07
    36ac:	10 86       	std	Z+8, r1	; 0x08
    36ae:	11 86       	std	Z+9, r1	; 0x09
    36b0:	e6 e0       	ldi	r30, 0x06	; 6
    36b2:	f4 e2       	ldi	r31, 0x24	; 36
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	92 ec       	ldi	r25, 0xC2	; 194
    36b8:	a1 e0       	ldi	r26, 0x01	; 1
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
    36bc:	80 83       	st	Z, r24
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	a2 83       	std	Z+2, r26	; 0x02
    36c2:	b3 83       	std	Z+3, r27	; 0x03
    36c4:	14 82       	std	Z+4, r1	; 0x04
    36c6:	15 82       	std	Z+5, r1	; 0x05
    36c8:	88 e0       	ldi	r24, 0x08	; 8
    36ca:	86 83       	std	Z+6, r24	; 0x06
    36cc:	bf 01       	movw	r22, r30
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	11 dc       	rcall	.-2014   	; 0x2ef4 <usb_callback_config>
    36d2:	09 dc       	rcall	.-2030   	; 0x2ee6 <usb_callback_cdc_enable>
    36d4:	88 23       	and	r24, r24
    36d6:	29 f0       	breq	.+10     	; 0x36e2 <udi_cdc_comm_enable+0x5e>
    36d8:	90 91 f8 23 	lds	r25, 0x23F8	; 0x8023f8 <udi_cdc_nb_comm_enabled>
    36dc:	9f 5f       	subi	r25, 0xFF	; 255
    36de:	90 93 f8 23 	sts	0x23F8, r25	; 0x8023f8 <udi_cdc_nb_comm_enabled>
    36e2:	08 95       	ret

000036e4 <udi_cdc_tx_send>:
    36e4:	ff 92       	push	r15
    36e6:	0f 93       	push	r16
    36e8:	1f 93       	push	r17
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	1f 92       	push	r1
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <udi_cdc_tx_trans_ongoing>
    36f8:	81 11       	cpse	r24, r1
    36fa:	9f c0       	rjmp	.+318    	; 0x383a <udi_cdc_tx_send+0x156>
    36fc:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <udd_is_high_speed>
    3700:	88 23       	and	r24, r24
    3702:	51 f0       	breq	.+20     	; 0x3718 <udi_cdc_tx_send+0x34>
    3704:	00 91 e6 22 	lds	r16, 0x22E6	; 0x8022e6 <udi_cdc_tx_sof_num>
    3708:	10 91 e7 22 	lds	r17, 0x22E7	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    370c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <udd_get_micro_frame_number>
    3710:	08 17       	cp	r16, r24
    3712:	19 07       	cpc	r17, r25
    3714:	59 f4       	brne	.+22     	; 0x372c <udi_cdc_tx_send+0x48>
    3716:	91 c0       	rjmp	.+290    	; 0x383a <udi_cdc_tx_send+0x156>
    3718:	00 91 e6 22 	lds	r16, 0x22E6	; 0x8022e6 <udi_cdc_tx_sof_num>
    371c:	10 91 e7 22 	lds	r17, 0x22E7	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    3720:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <udd_get_frame_number>
    3724:	08 17       	cp	r16, r24
    3726:	19 07       	cpc	r17, r25
    3728:	09 f4       	brne	.+2      	; 0x372c <udi_cdc_tx_send+0x48>
    372a:	87 c0       	rjmp	.+270    	; 0x383a <udi_cdc_tx_send+0x156>
    372c:	8f b7       	in	r24, 0x3f	; 63
    372e:	89 83       	std	Y+1, r24	; 0x01
    3730:	f8 94       	cli
    3732:	19 81       	ldd	r17, Y+1	; 0x01
    3734:	00 91 e8 22 	lds	r16, 0x22E8	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3738:	e0 2f       	mov	r30, r16
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	ee 0f       	add	r30, r30
    373e:	ff 1f       	adc	r31, r31
    3740:	e7 51       	subi	r30, 0x17	; 23
    3742:	fd 4d       	sbci	r31, 0xDD	; 221
    3744:	80 81       	ld	r24, Z
    3746:	91 81       	ldd	r25, Z+1	; 0x01
    3748:	89 2b       	or	r24, r25
    374a:	09 f5       	brne	.+66     	; 0x378e <udi_cdc_tx_send+0xaa>
    374c:	80 91 e2 22 	lds	r24, 0x22E2	; 0x8022e2 <sof_zlp_counter.5059>
    3750:	90 91 e3 22 	lds	r25, 0x22E3	; 0x8022e3 <sof_zlp_counter.5059+0x1>
    3754:	01 96       	adiw	r24, 0x01	; 1
    3756:	80 93 e2 22 	sts	0x22E2, r24	; 0x8022e2 <sof_zlp_counter.5059>
    375a:	90 93 e3 22 	sts	0x22E3, r25	; 0x8022e3 <sof_zlp_counter.5059+0x1>
    375e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <udd_is_high_speed>
    3762:	81 11       	cpse	r24, r1
    3764:	07 c0       	rjmp	.+14     	; 0x3774 <udi_cdc_tx_send+0x90>
    3766:	80 91 e2 22 	lds	r24, 0x22E2	; 0x8022e2 <sof_zlp_counter.5059>
    376a:	90 91 e3 22 	lds	r25, 0x22E3	; 0x8022e3 <sof_zlp_counter.5059+0x1>
    376e:	84 36       	cpi	r24, 0x64	; 100
    3770:	91 05       	cpc	r25, r1
    3772:	58 f0       	brcs	.+22     	; 0x378a <udi_cdc_tx_send+0xa6>
    3774:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <udd_is_high_speed>
    3778:	88 23       	and	r24, r24
    377a:	49 f0       	breq	.+18     	; 0x378e <udi_cdc_tx_send+0xaa>
    377c:	80 91 e2 22 	lds	r24, 0x22E2	; 0x8022e2 <sof_zlp_counter.5059>
    3780:	90 91 e3 22 	lds	r25, 0x22E3	; 0x8022e3 <sof_zlp_counter.5059+0x1>
    3784:	80 32       	cpi	r24, 0x20	; 32
    3786:	93 40       	sbci	r25, 0x03	; 3
    3788:	10 f4       	brcc	.+4      	; 0x378e <udi_cdc_tx_send+0xaa>
    378a:	1f bf       	out	0x3f, r17	; 63
    378c:	56 c0       	rjmp	.+172    	; 0x383a <udi_cdc_tx_send+0x156>
    378e:	10 92 e2 22 	sts	0x22E2, r1	; 0x8022e2 <sof_zlp_counter.5059>
    3792:	10 92 e3 22 	sts	0x22E3, r1	; 0x8022e3 <sof_zlp_counter.5059+0x1>
    3796:	80 91 e4 22 	lds	r24, 0x22E4	; 0x8022e4 <udi_cdc_tx_both_buf_to_send>
    379a:	81 11       	cpse	r24, r1
    379c:	06 c0       	rjmp	.+12     	; 0x37aa <udi_cdc_tx_send+0xc6>
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	01 11       	cpse	r16, r1
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	80 93 e8 22 	sts	0x22E8, r24	; 0x8022e8 <udi_cdc_tx_buf_sel>
    37a8:	04 c0       	rjmp	.+8      	; 0x37b2 <udi_cdc_tx_send+0xce>
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	01 11       	cpse	r16, r1
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	08 2f       	mov	r16, r24
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	80 93 e5 22 	sts	0x22E5, r24	; 0x8022e5 <udi_cdc_tx_trans_ongoing>
    37b8:	1f bf       	out	0x3f, r17	; 63
    37ba:	10 e0       	ldi	r17, 0x00	; 0
    37bc:	f8 01       	movw	r30, r16
    37be:	ee 0f       	add	r30, r30
    37c0:	ff 1f       	adc	r31, r31
    37c2:	e7 51       	subi	r30, 0x17	; 23
    37c4:	fd 4d       	sbci	r31, 0xDD	; 221
    37c6:	80 81       	ld	r24, Z
    37c8:	91 81       	ldd	r25, Z+1	; 0x01
    37ca:	ff 24       	eor	r15, r15
    37cc:	f3 94       	inc	r15
    37ce:	80 34       	cpi	r24, 0x40	; 64
    37d0:	91 05       	cpc	r25, r1
    37d2:	09 f4       	brne	.+2      	; 0x37d6 <udi_cdc_tx_send+0xf2>
    37d4:	f1 2c       	mov	r15, r1
    37d6:	80 34       	cpi	r24, 0x40	; 64
    37d8:	91 05       	cpc	r25, r1
    37da:	91 f0       	breq	.+36     	; 0x3800 <udi_cdc_tx_send+0x11c>
    37dc:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <udd_is_high_speed>
    37e0:	88 23       	and	r24, r24
    37e2:	39 f0       	breq	.+14     	; 0x37f2 <udi_cdc_tx_send+0x10e>
    37e4:	0e 94 fe 11 	call	0x23fc	; 0x23fc <udd_get_micro_frame_number>
    37e8:	80 93 e6 22 	sts	0x22E6, r24	; 0x8022e6 <udi_cdc_tx_sof_num>
    37ec:	90 93 e7 22 	sts	0x22E7, r25	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    37f0:	0b c0       	rjmp	.+22     	; 0x3808 <udi_cdc_tx_send+0x124>
    37f2:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <udd_get_frame_number>
    37f6:	80 93 e6 22 	sts	0x22E6, r24	; 0x8022e6 <udi_cdc_tx_sof_num>
    37fa:	90 93 e7 22 	sts	0x22E7, r25	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    37fe:	04 c0       	rjmp	.+8      	; 0x3808 <udi_cdc_tx_send+0x124>
    3800:	10 92 e6 22 	sts	0x22E6, r1	; 0x8022e6 <udi_cdc_tx_sof_num>
    3804:	10 92 e7 22 	sts	0x22E7, r1	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    3808:	f8 01       	movw	r30, r16
    380a:	ee 0f       	add	r30, r30
    380c:	ff 1f       	adc	r31, r31
    380e:	e7 51       	subi	r30, 0x17	; 23
    3810:	fd 4d       	sbci	r31, 0xDD	; 221
    3812:	20 81       	ld	r18, Z
    3814:	31 81       	ldd	r19, Z+1	; 0x01
    3816:	a8 01       	movw	r20, r16
    3818:	00 24       	eor	r0, r0
    381a:	56 95       	lsr	r21
    381c:	47 95       	ror	r20
    381e:	07 94       	ror	r0
    3820:	56 95       	lsr	r21
    3822:	47 95       	ror	r20
    3824:	07 94       	ror	r0
    3826:	54 2f       	mov	r21, r20
    3828:	40 2d       	mov	r20, r0
    382a:	42 51       	subi	r20, 0x12	; 18
    382c:	5d 4d       	sbci	r21, 0xDD	; 221
    382e:	07 e2       	ldi	r16, 0x27	; 39
    3830:	1c e1       	ldi	r17, 0x1C	; 28
    3832:	6f 2d       	mov	r22, r15
    3834:	81 e8       	ldi	r24, 0x81	; 129
    3836:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <udd_ep_run>
    383a:	0f 90       	pop	r0
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	1f 91       	pop	r17
    3842:	0f 91       	pop	r16
    3844:	ff 90       	pop	r15
    3846:	08 95       	ret

00003848 <udi_cdc_data_sof_notify>:
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	4c cf       	rjmp	.-360    	; 0x36e4 <udi_cdc_tx_send>
    384c:	08 95       	ret

0000384e <udi_cdc_data_sent>:
    384e:	81 11       	cpse	r24, r1
    3850:	19 c0       	rjmp	.+50     	; 0x3884 <udi_cdc_data_sent+0x36>
    3852:	20 91 e8 22 	lds	r18, 0x22E8	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	22 23       	and	r18, r18
    385c:	11 f0       	breq	.+4      	; 0x3862 <udi_cdc_data_sent+0x14>
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	88 0f       	add	r24, r24
    3864:	99 1f       	adc	r25, r25
    3866:	fc 01       	movw	r30, r24
    3868:	e7 51       	subi	r30, 0x17	; 23
    386a:	fd 4d       	sbci	r31, 0xDD	; 221
    386c:	10 82       	st	Z, r1
    386e:	11 82       	std	Z+1, r1	; 0x01
    3870:	10 92 e4 22 	sts	0x22E4, r1	; 0x8022e4 <udi_cdc_tx_both_buf_to_send>
    3874:	10 92 e5 22 	sts	0x22E5, r1	; 0x8022e5 <udi_cdc_tx_trans_ongoing>
    3878:	67 2b       	or	r22, r23
    387a:	11 f0       	breq	.+4      	; 0x3880 <udi_cdc_data_sent+0x32>
    387c:	80 e0       	ldi	r24, 0x00	; 0
    387e:	3e db       	rcall	.-2436   	; 0x2efc <usb_callback_tx_empty_notify>
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	30 cf       	rjmp	.-416    	; 0x36e4 <udi_cdc_tx_send>
    3884:	08 95       	ret

00003886 <udi_cdc_data_disable>:
    3886:	80 91 f7 23 	lds	r24, 0x23F7	; 0x8023f7 <udi_cdc_nb_data_enabled>
    388a:	81 50       	subi	r24, 0x01	; 1
    388c:	80 93 f7 23 	sts	0x23F7, r24	; 0x8023f7 <udi_cdc_nb_data_enabled>
    3890:	80 91 f7 23 	lds	r24, 0x23F7	; 0x8023f7 <udi_cdc_nb_data_enabled>
    3894:	2c db       	rcall	.-2472   	; 0x2eee <usb_callback_cdc_disable>
    3896:	10 92 f6 23 	sts	0x23F6, r1	; 0x8023f6 <udi_cdc_data_running>
    389a:	08 95       	ret

0000389c <udi_cdc_comm_setup>:
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq>
    38a4:	88 23       	and	r24, r24
    38a6:	e4 f4       	brge	.+56     	; 0x38e0 <udi_cdc_comm_setup+0x44>
    38a8:	80 76       	andi	r24, 0x60	; 96
    38aa:	80 32       	cpi	r24, 0x20	; 32
    38ac:	09 f0       	breq	.+2      	; 0x38b0 <udi_cdc_comm_setup+0x14>
    38ae:	47 c0       	rjmp	.+142    	; 0x393e <udi_cdc_comm_setup+0xa2>
    38b0:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    38b4:	81 32       	cpi	r24, 0x21	; 33
    38b6:	09 f0       	breq	.+2      	; 0x38ba <udi_cdc_comm_setup+0x1e>
    38b8:	44 c0       	rjmp	.+136    	; 0x3942 <udi_cdc_comm_setup+0xa6>
    38ba:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    38be:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    38c2:	07 97       	sbiw	r24, 0x07	; 7
    38c4:	09 f0       	breq	.+2      	; 0x38c8 <udi_cdc_comm_setup+0x2c>
    38c6:	3f c0       	rjmp	.+126    	; 0x3946 <udi_cdc_comm_setup+0xaa>
    38c8:	e1 e2       	ldi	r30, 0x21	; 33
    38ca:	f4 e2       	ldi	r31, 0x24	; 36
    38cc:	86 e0       	ldi	r24, 0x06	; 6
    38ce:	94 e2       	ldi	r25, 0x24	; 36
    38d0:	80 87       	std	Z+8, r24	; 0x08
    38d2:	91 87       	std	Z+9, r25	; 0x09
    38d4:	87 e0       	ldi	r24, 0x07	; 7
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	82 87       	std	Z+10, r24	; 0x0a
    38da:	93 87       	std	Z+11, r25	; 0x0b
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	3a c0       	rjmp	.+116    	; 0x3954 <udi_cdc_comm_setup+0xb8>
    38e0:	80 76       	andi	r24, 0x60	; 96
    38e2:	80 32       	cpi	r24, 0x20	; 32
    38e4:	91 f5       	brne	.+100    	; 0x394a <udi_cdc_comm_setup+0xae>
    38e6:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    38ea:	80 32       	cpi	r24, 0x20	; 32
    38ec:	19 f0       	breq	.+6      	; 0x38f4 <udi_cdc_comm_setup+0x58>
    38ee:	82 32       	cpi	r24, 0x22	; 34
    38f0:	b9 f0       	breq	.+46     	; 0x3920 <udi_cdc_comm_setup+0x84>
    38f2:	2d c0       	rjmp	.+90     	; 0x394e <udi_cdc_comm_setup+0xb2>
    38f4:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    38f8:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    38fc:	07 97       	sbiw	r24, 0x07	; 7
    38fe:	49 f5       	brne	.+82     	; 0x3952 <udi_cdc_comm_setup+0xb6>
    3900:	e1 e2       	ldi	r30, 0x21	; 33
    3902:	f4 e2       	ldi	r31, 0x24	; 36
    3904:	8d e3       	ldi	r24, 0x3D	; 61
    3906:	9b e1       	ldi	r25, 0x1B	; 27
    3908:	84 87       	std	Z+12, r24	; 0x0c
    390a:	95 87       	std	Z+13, r25	; 0x0d
    390c:	86 e0       	ldi	r24, 0x06	; 6
    390e:	94 e2       	ldi	r25, 0x24	; 36
    3910:	80 87       	std	Z+8, r24	; 0x08
    3912:	91 87       	std	Z+9, r25	; 0x09
    3914:	87 e0       	ldi	r24, 0x07	; 7
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	82 87       	std	Z+10, r24	; 0x0a
    391a:	93 87       	std	Z+11, r25	; 0x0b
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	1a c0       	rjmp	.+52     	; 0x3954 <udi_cdc_comm_setup+0xb8>
    3920:	c1 e2       	ldi	r28, 0x21	; 33
    3922:	d4 e2       	ldi	r29, 0x24	; 36
    3924:	6a 81       	ldd	r22, Y+2	; 0x02
    3926:	61 70       	andi	r22, 0x01	; 1
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	e5 da       	rcall	.-2614   	; 0x2ef6 <usb_callback_cdc_set_dtr>
    392c:	6a 81       	ldd	r22, Y+2	; 0x02
    392e:	7b 81       	ldd	r23, Y+3	; 0x03
    3930:	76 95       	lsr	r23
    3932:	67 95       	ror	r22
    3934:	61 70       	andi	r22, 0x01	; 1
    3936:	80 e0       	ldi	r24, 0x00	; 0
    3938:	df da       	rcall	.-2626   	; 0x2ef8 <usb_callback_cdc_set_rts>
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	0b c0       	rjmp	.+22     	; 0x3954 <udi_cdc_comm_setup+0xb8>
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	09 c0       	rjmp	.+18     	; 0x3954 <udi_cdc_comm_setup+0xb8>
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	07 c0       	rjmp	.+14     	; 0x3954 <udi_cdc_comm_setup+0xb8>
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	05 c0       	rjmp	.+10     	; 0x3954 <udi_cdc_comm_setup+0xb8>
    394a:	80 e0       	ldi	r24, 0x00	; 0
    394c:	03 c0       	rjmp	.+6      	; 0x3954 <udi_cdc_comm_setup+0xb8>
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	01 c0       	rjmp	.+2      	; 0x3954 <udi_cdc_comm_setup+0xb8>
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	df 91       	pop	r29
    3956:	cf 91       	pop	r28
    3958:	08 95       	ret

0000395a <udi_cdc_multi_get_nb_received_data>:
    395a:	cf 93       	push	r28
    395c:	df 93       	push	r29
    395e:	1f 92       	push	r1
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	8f b7       	in	r24, 0x3f	; 63
    3966:	89 83       	std	Y+1, r24	; 0x01
    3968:	f8 94       	cli
    396a:	49 81       	ldd	r20, Y+1	; 0x01
    396c:	20 91 6f 23 	lds	r18, 0x236F	; 0x80236f <udi_cdc_rx_pos>
    3970:	30 91 70 23 	lds	r19, 0x2370	; 0x802370 <udi_cdc_rx_pos+0x1>
    3974:	e0 91 71 23 	lds	r30, 0x2371	; 0x802371 <udi_cdc_rx_buf_sel>
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	ee 0f       	add	r30, r30
    397c:	ff 1f       	adc	r31, r31
    397e:	ee 58       	subi	r30, 0x8E	; 142
    3980:	fc 4d       	sbci	r31, 0xDC	; 220
    3982:	80 81       	ld	r24, Z
    3984:	91 81       	ldd	r25, Z+1	; 0x01
    3986:	4f bf       	out	0x3f, r20	; 63
    3988:	82 1b       	sub	r24, r18
    398a:	93 0b       	sbc	r25, r19
    398c:	0f 90       	pop	r0
    398e:	df 91       	pop	r29
    3990:	cf 91       	pop	r28
    3992:	08 95       	ret

00003994 <udi_cdc_multi_is_rx_ready>:
    3994:	e2 df       	rcall	.-60     	; 0x395a <udi_cdc_multi_get_nb_received_data>
    3996:	21 e0       	ldi	r18, 0x01	; 1
    3998:	89 2b       	or	r24, r25
    399a:	09 f4       	brne	.+2      	; 0x399e <udi_cdc_multi_is_rx_ready+0xa>
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	82 2f       	mov	r24, r18
    39a0:	08 95       	ret

000039a2 <udi_cdc_rx_start>:
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	cf 93       	push	r28
    39a8:	df 93       	push	r29
    39aa:	1f 92       	push	r1
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62
    39b0:	8f b7       	in	r24, 0x3f	; 63
    39b2:	89 83       	std	Y+1, r24	; 0x01
    39b4:	f8 94       	cli
    39b6:	99 81       	ldd	r25, Y+1	; 0x01
    39b8:	20 91 71 23 	lds	r18, 0x2371	; 0x802371 <udi_cdc_rx_buf_sel>
    39bc:	80 91 6e 23 	lds	r24, 0x236E	; 0x80236e <udi_cdc_rx_trans_ongoing>
    39c0:	81 11       	cpse	r24, r1
    39c2:	10 c0       	rjmp	.+32     	; 0x39e4 <udi_cdc_rx_start+0x42>
    39c4:	60 91 6f 23 	lds	r22, 0x236F	; 0x80236f <udi_cdc_rx_pos>
    39c8:	70 91 70 23 	lds	r23, 0x2370	; 0x802370 <udi_cdc_rx_pos+0x1>
    39cc:	02 2f       	mov	r16, r18
    39ce:	10 e0       	ldi	r17, 0x00	; 0
    39d0:	f8 01       	movw	r30, r16
    39d2:	ee 0f       	add	r30, r30
    39d4:	ff 1f       	adc	r31, r31
    39d6:	ee 58       	subi	r30, 0x8E	; 142
    39d8:	fc 4d       	sbci	r31, 0xDC	; 220
    39da:	40 81       	ld	r20, Z
    39dc:	51 81       	ldd	r21, Z+1	; 0x01
    39de:	64 17       	cp	r22, r20
    39e0:	75 07       	cpc	r23, r21
    39e2:	18 f4       	brcc	.+6      	; 0x39ea <udi_cdc_rx_start+0x48>
    39e4:	9f bf       	out	0x3f, r25	; 63
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	27 c0       	rjmp	.+78     	; 0x3a38 <udi_cdc_rx_start+0x96>
    39ea:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udi_cdc_rx_pos>
    39ee:	10 92 70 23 	sts	0x2370, r1	; 0x802370 <udi_cdc_rx_pos+0x1>
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	21 11       	cpse	r18, r1
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udi_cdc_rx_buf_sel>
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	80 93 6e 23 	sts	0x236E, r24	; 0x80236e <udi_cdc_rx_trans_ongoing>
    3a02:	9f bf       	out	0x3f, r25	; 63
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	c6 df       	rcall	.-116    	; 0x3994 <udi_cdc_multi_is_rx_ready>
    3a08:	88 23       	and	r24, r24
    3a0a:	11 f0       	breq	.+4      	; 0x3a10 <udi_cdc_rx_start+0x6e>
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
    3a0e:	75 da       	rcall	.-2838   	; 0x2efa <usb_callback_rx_notify>
    3a10:	a8 01       	movw	r20, r16
    3a12:	00 24       	eor	r0, r0
    3a14:	56 95       	lsr	r21
    3a16:	47 95       	ror	r20
    3a18:	07 94       	ror	r0
    3a1a:	56 95       	lsr	r21
    3a1c:	47 95       	ror	r20
    3a1e:	07 94       	ror	r0
    3a20:	54 2f       	mov	r21, r20
    3a22:	40 2d       	mov	r20, r0
    3a24:	4a 58       	subi	r20, 0x8A	; 138
    3a26:	5c 4d       	sbci	r21, 0xDC	; 220
    3a28:	04 e5       	ldi	r16, 0x54	; 84
    3a2a:	1d e1       	ldi	r17, 0x1D	; 29
    3a2c:	20 e4       	ldi	r18, 0x40	; 64
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	61 e0       	ldi	r22, 0x01	; 1
    3a32:	82 e0       	ldi	r24, 0x02	; 2
    3a34:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <udd_ep_run>
    3a38:	0f 90       	pop	r0
    3a3a:	df 91       	pop	r29
    3a3c:	cf 91       	pop	r28
    3a3e:	1f 91       	pop	r17
    3a40:	0f 91       	pop	r16
    3a42:	08 95       	ret

00003a44 <udi_cdc_data_enable>:
    3a44:	10 92 f7 23 	sts	0x23F7, r1	; 0x8023f7 <udi_cdc_nb_data_enabled>
    3a48:	10 92 e5 22 	sts	0x22E5, r1	; 0x8022e5 <udi_cdc_tx_trans_ongoing>
    3a4c:	10 92 e4 22 	sts	0x22E4, r1	; 0x8022e4 <udi_cdc_tx_both_buf_to_send>
    3a50:	10 92 e8 22 	sts	0x22E8, r1	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3a54:	e9 ee       	ldi	r30, 0xE9	; 233
    3a56:	f2 e2       	ldi	r31, 0x22	; 34
    3a58:	10 82       	st	Z, r1
    3a5a:	11 82       	std	Z+1, r1	; 0x01
    3a5c:	12 82       	std	Z+2, r1	; 0x02
    3a5e:	13 82       	std	Z+3, r1	; 0x03
    3a60:	10 92 e6 22 	sts	0x22E6, r1	; 0x8022e6 <udi_cdc_tx_sof_num>
    3a64:	10 92 e7 22 	sts	0x22E7, r1	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	3c de       	rcall	.-904    	; 0x36e4 <udi_cdc_tx_send>
    3a6c:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udi_cdc_rx_trans_ongoing>
    3a70:	10 92 71 23 	sts	0x2371, r1	; 0x802371 <udi_cdc_rx_buf_sel>
    3a74:	e2 e7       	ldi	r30, 0x72	; 114
    3a76:	f3 e2       	ldi	r31, 0x23	; 35
    3a78:	10 82       	st	Z, r1
    3a7a:	11 82       	std	Z+1, r1	; 0x01
    3a7c:	12 82       	std	Z+2, r1	; 0x02
    3a7e:	13 82       	std	Z+3, r1	; 0x03
    3a80:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udi_cdc_rx_pos>
    3a84:	10 92 70 23 	sts	0x2370, r1	; 0x802370 <udi_cdc_rx_pos+0x1>
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	8b df       	rcall	.-234    	; 0x39a2 <udi_cdc_rx_start>
    3a8c:	88 23       	and	r24, r24
    3a8e:	59 f0       	breq	.+22     	; 0x3aa6 <udi_cdc_data_enable+0x62>
    3a90:	90 91 f7 23 	lds	r25, 0x23F7	; 0x8023f7 <udi_cdc_nb_data_enabled>
    3a94:	9f 5f       	subi	r25, 0xFF	; 255
    3a96:	90 93 f7 23 	sts	0x23F7, r25	; 0x8023f7 <udi_cdc_nb_data_enabled>
    3a9a:	90 91 f7 23 	lds	r25, 0x23F7	; 0x8023f7 <udi_cdc_nb_data_enabled>
    3a9e:	91 30       	cpi	r25, 0x01	; 1
    3aa0:	11 f4       	brne	.+4      	; 0x3aa6 <udi_cdc_data_enable+0x62>
    3aa2:	90 93 f6 23 	sts	0x23F6, r25	; 0x8023f6 <udi_cdc_data_running>
    3aa6:	08 95       	ret

00003aa8 <udi_cdc_data_received>:
    3aa8:	0f 93       	push	r16
    3aaa:	1f 93       	push	r17
    3aac:	81 11       	cpse	r24, r1
    3aae:	29 c0       	rjmp	.+82     	; 0x3b02 <udi_cdc_data_received+0x5a>
    3ab0:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udi_cdc_rx_buf_sel>
    3ab4:	e1 e0       	ldi	r30, 0x01	; 1
    3ab6:	81 11       	cpse	r24, r1
    3ab8:	e0 e0       	ldi	r30, 0x00	; 0
    3aba:	84 2f       	mov	r24, r20
    3abc:	61 15       	cp	r22, r1
    3abe:	71 05       	cpc	r23, r1
    3ac0:	a9 f4       	brne	.+42     	; 0x3aec <udi_cdc_data_received+0x44>
    3ac2:	4e 2f       	mov	r20, r30
    3ac4:	50 e0       	ldi	r21, 0x00	; 0
    3ac6:	00 24       	eor	r0, r0
    3ac8:	56 95       	lsr	r21
    3aca:	47 95       	ror	r20
    3acc:	07 94       	ror	r0
    3ace:	56 95       	lsr	r21
    3ad0:	47 95       	ror	r20
    3ad2:	07 94       	ror	r0
    3ad4:	54 2f       	mov	r21, r20
    3ad6:	40 2d       	mov	r20, r0
    3ad8:	4a 58       	subi	r20, 0x8A	; 138
    3ada:	5c 4d       	sbci	r21, 0xDC	; 220
    3adc:	04 e5       	ldi	r16, 0x54	; 84
    3ade:	1d e1       	ldi	r17, 0x1D	; 29
    3ae0:	20 e4       	ldi	r18, 0x40	; 64
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	61 e0       	ldi	r22, 0x01	; 1
    3ae6:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <udd_ep_run>
    3aea:	0b c0       	rjmp	.+22     	; 0x3b02 <udi_cdc_data_received+0x5a>
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	ee 0f       	add	r30, r30
    3af0:	ff 1f       	adc	r31, r31
    3af2:	ee 58       	subi	r30, 0x8E	; 142
    3af4:	fc 4d       	sbci	r31, 0xDC	; 220
    3af6:	60 83       	st	Z, r22
    3af8:	71 83       	std	Z+1, r23	; 0x01
    3afa:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udi_cdc_rx_trans_ongoing>
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	50 df       	rcall	.-352    	; 0x39a2 <udi_cdc_rx_start>
    3b02:	1f 91       	pop	r17
    3b04:	0f 91       	pop	r16
    3b06:	08 95       	ret

00003b08 <udi_cdc_multi_getc>:
    3b08:	ef 92       	push	r14
    3b0a:	ff 92       	push	r15
    3b0c:	1f 93       	push	r17
    3b0e:	cf 93       	push	r28
    3b10:	df 93       	push	r29
    3b12:	1f 92       	push	r1
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	11 e0       	ldi	r17, 0x01	; 1
    3b1a:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <udi_cdc_line_coding+0x6>
    3b1e:	89 30       	cpi	r24, 0x09	; 9
    3b20:	09 f0       	breq	.+2      	; 0x3b24 <udi_cdc_multi_getc+0x1c>
    3b22:	10 e0       	ldi	r17, 0x00	; 0
    3b24:	40 e0       	ldi	r20, 0x00	; 0
    3b26:	50 e0       	ldi	r21, 0x00	; 0
    3b28:	8f b7       	in	r24, 0x3f	; 63
    3b2a:	89 83       	std	Y+1, r24	; 0x01
    3b2c:	f8 94       	cli
    3b2e:	a9 81       	ldd	r26, Y+1	; 0x01
    3b30:	20 91 6f 23 	lds	r18, 0x236F	; 0x80236f <udi_cdc_rx_pos>
    3b34:	30 91 70 23 	lds	r19, 0x2370	; 0x802370 <udi_cdc_rx_pos+0x1>
    3b38:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udi_cdc_rx_buf_sel>
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	fc 01       	movw	r30, r24
    3b40:	ee 0f       	add	r30, r30
    3b42:	ff 1f       	adc	r31, r31
    3b44:	ee 58       	subi	r30, 0x8E	; 142
    3b46:	fc 4d       	sbci	r31, 0xDC	; 220
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	af bf       	out	0x3f, r26	; 63
    3b4e:	26 17       	cp	r18, r22
    3b50:	37 07       	cpc	r19, r23
    3b52:	30 f0       	brcs	.+12     	; 0x3b60 <udi_cdc_multi_getc+0x58>
    3b54:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <udi_cdc_data_running>
    3b58:	81 11       	cpse	r24, r1
    3b5a:	e6 cf       	rjmp	.-52     	; 0x3b28 <udi_cdc_multi_getc+0x20>
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	21 c0       	rjmp	.+66     	; 0x3ba2 <udi_cdc_multi_getc+0x9a>
    3b60:	fc 01       	movw	r30, r24
    3b62:	00 24       	eor	r0, r0
    3b64:	f6 95       	lsr	r31
    3b66:	e7 95       	ror	r30
    3b68:	07 94       	ror	r0
    3b6a:	f6 95       	lsr	r31
    3b6c:	e7 95       	ror	r30
    3b6e:	07 94       	ror	r0
    3b70:	fe 2f       	mov	r31, r30
    3b72:	e0 2d       	mov	r30, r0
    3b74:	ea 58       	subi	r30, 0x8A	; 138
    3b76:	fc 4d       	sbci	r31, 0xDC	; 220
    3b78:	e2 0f       	add	r30, r18
    3b7a:	f3 1f       	adc	r31, r19
    3b7c:	80 81       	ld	r24, Z
    3b7e:	7a 01       	movw	r14, r20
    3b80:	e8 2a       	or	r14, r24
    3b82:	2f 5f       	subi	r18, 0xFF	; 255
    3b84:	3f 4f       	sbci	r19, 0xFF	; 255
    3b86:	20 93 6f 23 	sts	0x236F, r18	; 0x80236f <udi_cdc_rx_pos>
    3b8a:	30 93 70 23 	sts	0x2370, r19	; 0x802370 <udi_cdc_rx_pos+0x1>
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	08 df       	rcall	.-496    	; 0x39a2 <udi_cdc_rx_start>
    3b92:	11 23       	and	r17, r17
    3b94:	21 f0       	breq	.+8      	; 0x3b9e <udi_cdc_multi_getc+0x96>
    3b96:	5e 2d       	mov	r21, r14
    3b98:	44 27       	eor	r20, r20
    3b9a:	10 e0       	ldi	r17, 0x00	; 0
    3b9c:	c5 cf       	rjmp	.-118    	; 0x3b28 <udi_cdc_multi_getc+0x20>
    3b9e:	8e 2d       	mov	r24, r14
    3ba0:	9f 2d       	mov	r25, r15
    3ba2:	0f 90       	pop	r0
    3ba4:	df 91       	pop	r29
    3ba6:	cf 91       	pop	r28
    3ba8:	1f 91       	pop	r17
    3baa:	ff 90       	pop	r15
    3bac:	ef 90       	pop	r14
    3bae:	08 95       	ret

00003bb0 <udi_cdc_getc>:
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	aa cf       	rjmp	.-172    	; 0x3b08 <udi_cdc_multi_getc>
    3bb4:	08 95       	ret

00003bb6 <udi_cdc_multi_get_free_tx_buffer>:
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	1f 92       	push	r1
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	8f b7       	in	r24, 0x3f	; 63
    3bc2:	89 83       	std	Y+1, r24	; 0x01
    3bc4:	f8 94       	cli
    3bc6:	99 81       	ldd	r25, Y+1	; 0x01
    3bc8:	80 91 e8 22 	lds	r24, 0x22E8	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3bcc:	e8 2f       	mov	r30, r24
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	ee 0f       	add	r30, r30
    3bd2:	ff 1f       	adc	r31, r31
    3bd4:	e7 51       	subi	r30, 0x17	; 23
    3bd6:	fd 4d       	sbci	r31, 0xDD	; 221
    3bd8:	20 81       	ld	r18, Z
    3bda:	31 81       	ldd	r19, Z+1	; 0x01
    3bdc:	20 34       	cpi	r18, 0x40	; 64
    3bde:	31 05       	cpc	r19, r1
    3be0:	89 f4       	brne	.+34     	; 0x3c04 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3be2:	40 91 e5 22 	lds	r20, 0x22E5	; 0x8022e5 <udi_cdc_tx_trans_ongoing>
    3be6:	41 11       	cpse	r20, r1
    3be8:	0d c0       	rjmp	.+26     	; 0x3c04 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3bea:	40 91 e4 22 	lds	r20, 0x22E4	; 0x8022e4 <udi_cdc_tx_both_buf_to_send>
    3bee:	41 11       	cpse	r20, r1
    3bf0:	09 c0       	rjmp	.+18     	; 0x3c04 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3bf2:	21 e0       	ldi	r18, 0x01	; 1
    3bf4:	20 93 e4 22 	sts	0x22E4, r18	; 0x8022e4 <udi_cdc_tx_both_buf_to_send>
    3bf8:	81 11       	cpse	r24, r1
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	20 93 e8 22 	sts	0x22E8, r18	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	9f bf       	out	0x3f, r25	; 63
    3c06:	80 e4       	ldi	r24, 0x40	; 64
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	82 1b       	sub	r24, r18
    3c0c:	93 0b       	sbc	r25, r19
    3c0e:	0f 90       	pop	r0
    3c10:	df 91       	pop	r29
    3c12:	cf 91       	pop	r28
    3c14:	08 95       	ret

00003c16 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    3c16:	cf df       	rcall	.-98     	; 0x3bb6 <udi_cdc_multi_get_free_tx_buffer>
    3c18:	21 e0       	ldi	r18, 0x01	; 1
    3c1a:	89 2b       	or	r24, r25
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <udi_cdc_multi_is_tx_ready+0xa>
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	82 2f       	mov	r24, r18
    3c22:	08 95       	ret

00003c24 <udi_cdc_multi_putc>:
    3c24:	ff 92       	push	r15
    3c26:	0f 93       	push	r16
    3c28:	1f 93       	push	r17
    3c2a:	cf 93       	push	r28
    3c2c:	df 93       	push	r29
    3c2e:	1f 92       	push	r1
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
    3c34:	f6 2e       	mov	r15, r22
    3c36:	17 2f       	mov	r17, r23
    3c38:	01 e0       	ldi	r16, 0x01	; 1
    3c3a:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <udi_cdc_line_coding+0x6>
    3c3e:	89 30       	cpi	r24, 0x09	; 9
    3c40:	09 f0       	breq	.+2      	; 0x3c44 <udi_cdc_multi_putc+0x20>
    3c42:	00 e0       	ldi	r16, 0x00	; 0
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	e7 df       	rcall	.-50     	; 0x3c16 <udi_cdc_multi_is_tx_ready>
    3c48:	81 11       	cpse	r24, r1
    3c4a:	07 c0       	rjmp	.+14     	; 0x3c5a <udi_cdc_multi_putc+0x36>
    3c4c:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <udi_cdc_data_running>
    3c50:	81 11       	cpse	r24, r1
    3c52:	f8 cf       	rjmp	.-16     	; 0x3c44 <udi_cdc_multi_putc+0x20>
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	2c c0       	rjmp	.+88     	; 0x3cb2 <udi_cdc_multi_putc+0x8e>
    3c5a:	8f b7       	in	r24, 0x3f	; 63
    3c5c:	89 83       	std	Y+1, r24	; 0x01
    3c5e:	f8 94       	cli
    3c60:	49 81       	ldd	r20, Y+1	; 0x01
    3c62:	80 91 e8 22 	lds	r24, 0x22E8	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	fc 01       	movw	r30, r24
    3c6a:	ee 0f       	add	r30, r30
    3c6c:	ff 1f       	adc	r31, r31
    3c6e:	e7 51       	subi	r30, 0x17	; 23
    3c70:	fd 4d       	sbci	r31, 0xDD	; 221
    3c72:	20 81       	ld	r18, Z
    3c74:	31 81       	ldd	r19, Z+1	; 0x01
    3c76:	b9 01       	movw	r22, r18
    3c78:	6f 5f       	subi	r22, 0xFF	; 255
    3c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c7c:	60 83       	st	Z, r22
    3c7e:	71 83       	std	Z+1, r23	; 0x01
    3c80:	00 24       	eor	r0, r0
    3c82:	96 95       	lsr	r25
    3c84:	87 95       	ror	r24
    3c86:	07 94       	ror	r0
    3c88:	96 95       	lsr	r25
    3c8a:	87 95       	ror	r24
    3c8c:	07 94       	ror	r0
    3c8e:	98 2f       	mov	r25, r24
    3c90:	80 2d       	mov	r24, r0
    3c92:	82 51       	subi	r24, 0x12	; 18
    3c94:	9d 4d       	sbci	r25, 0xDD	; 221
    3c96:	fc 01       	movw	r30, r24
    3c98:	e2 0f       	add	r30, r18
    3c9a:	f3 1f       	adc	r31, r19
    3c9c:	f0 82       	st	Z, r15
    3c9e:	4f bf       	out	0x3f, r20	; 63
    3ca0:	00 23       	and	r16, r16
    3ca2:	29 f0       	breq	.+10     	; 0x3cae <udi_cdc_multi_putc+0x8a>
    3ca4:	f1 2e       	mov	r15, r17
    3ca6:	11 0f       	add	r17, r17
    3ca8:	11 0b       	sbc	r17, r17
    3caa:	00 e0       	ldi	r16, 0x00	; 0
    3cac:	cb cf       	rjmp	.-106    	; 0x3c44 <udi_cdc_multi_putc+0x20>
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	0f 90       	pop	r0
    3cb4:	df 91       	pop	r29
    3cb6:	cf 91       	pop	r28
    3cb8:	1f 91       	pop	r17
    3cba:	0f 91       	pop	r16
    3cbc:	ff 90       	pop	r15
    3cbe:	08 95       	ret

00003cc0 <udi_cdc_putc>:
    3cc0:	bc 01       	movw	r22, r24
    3cc2:	80 e0       	ldi	r24, 0x00	; 0
    3cc4:	af cf       	rjmp	.-162    	; 0x3c24 <udi_cdc_multi_putc>
    3cc6:	08 95       	ret

00003cc8 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    3cc8:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udc_ptr_conf>
    3ccc:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3cd0:	01 90       	ld	r0, Z+
    3cd2:	f0 81       	ld	r31, Z
    3cd4:	e0 2d       	mov	r30, r0
    3cd6:	22 81       	ldd	r18, Z+2	; 0x02
    3cd8:	33 81       	ldd	r19, Z+3	; 0x03
    3cda:	2e 0f       	add	r18, r30
    3cdc:	3f 1f       	adc	r19, r31
    3cde:	fc 01       	movw	r30, r24
    3ce0:	40 81       	ld	r20, Z
    3ce2:	e4 0f       	add	r30, r20
    3ce4:	f1 1d       	adc	r31, r1
    3ce6:	e2 17       	cp	r30, r18
    3ce8:	f3 07       	cpc	r31, r19
    3cea:	a0 f4       	brcc	.+40     	; 0x3d14 <udc_next_desc_in_iface+0x4c>
    3cec:	81 81       	ldd	r24, Z+1	; 0x01
    3cee:	84 30       	cpi	r24, 0x04	; 4
    3cf0:	a1 f0       	breq	.+40     	; 0x3d1a <udc_next_desc_in_iface+0x52>
    3cf2:	86 13       	cpse	r24, r22
    3cf4:	06 c0       	rjmp	.+12     	; 0x3d02 <udc_next_desc_in_iface+0x3a>
    3cf6:	14 c0       	rjmp	.+40     	; 0x3d20 <udc_next_desc_in_iface+0x58>
    3cf8:	81 81       	ldd	r24, Z+1	; 0x01
    3cfa:	84 30       	cpi	r24, 0x04	; 4
    3cfc:	a1 f0       	breq	.+40     	; 0x3d26 <udc_next_desc_in_iface+0x5e>
    3cfe:	86 17       	cp	r24, r22
    3d00:	a9 f0       	breq	.+42     	; 0x3d2c <udc_next_desc_in_iface+0x64>
    3d02:	80 81       	ld	r24, Z
    3d04:	e8 0f       	add	r30, r24
    3d06:	f1 1d       	adc	r31, r1
    3d08:	e2 17       	cp	r30, r18
    3d0a:	f3 07       	cpc	r31, r19
    3d0c:	a8 f3       	brcs	.-22     	; 0x3cf8 <udc_next_desc_in_iface+0x30>
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	08 95       	ret
    3d14:	80 e0       	ldi	r24, 0x00	; 0
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	08 95       	ret
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	08 95       	ret
    3d20:	8e 2f       	mov	r24, r30
    3d22:	9f 2f       	mov	r25, r31
    3d24:	08 95       	ret
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	08 95       	ret
    3d2c:	8e 2f       	mov	r24, r30
    3d2e:	9f 2f       	mov	r25, r31
    3d30:	08 95       	ret

00003d32 <udc_valid_address>:
    3d32:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    3d36:	8f 77       	andi	r24, 0x7F	; 127
    3d38:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <udd_set_address>
    3d3c:	08 95       	ret

00003d3e <udc_update_iface_desc>:
    3d3e:	90 91 14 24 	lds	r25, 0x2414	; 0x802414 <udc_num_configuration>
    3d42:	99 23       	and	r25, r25
    3d44:	81 f1       	breq	.+96     	; 0x3da6 <udc_update_iface_desc+0x68>
    3d46:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udc_ptr_conf>
    3d4a:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3d4e:	01 90       	ld	r0, Z+
    3d50:	f0 81       	ld	r31, Z
    3d52:	e0 2d       	mov	r30, r0
    3d54:	94 81       	ldd	r25, Z+4	; 0x04
    3d56:	89 17       	cp	r24, r25
    3d58:	40 f5       	brcc	.+80     	; 0x3daa <udc_update_iface_desc+0x6c>
    3d5a:	e0 93 10 24 	sts	0x2410, r30	; 0x802410 <udc_ptr_iface>
    3d5e:	f0 93 11 24 	sts	0x2411, r31	; 0x802411 <udc_ptr_iface+0x1>
    3d62:	22 81       	ldd	r18, Z+2	; 0x02
    3d64:	33 81       	ldd	r19, Z+3	; 0x03
    3d66:	2e 0f       	add	r18, r30
    3d68:	3f 1f       	adc	r19, r31
    3d6a:	e2 17       	cp	r30, r18
    3d6c:	f3 07       	cpc	r31, r19
    3d6e:	f8 f4       	brcc	.+62     	; 0x3dae <udc_update_iface_desc+0x70>
    3d70:	91 81       	ldd	r25, Z+1	; 0x01
    3d72:	94 30       	cpi	r25, 0x04	; 4
    3d74:	61 f4       	brne	.+24     	; 0x3d8e <udc_update_iface_desc+0x50>
    3d76:	92 81       	ldd	r25, Z+2	; 0x02
    3d78:	89 13       	cpse	r24, r25
    3d7a:	09 c0       	rjmp	.+18     	; 0x3d8e <udc_update_iface_desc+0x50>
    3d7c:	93 81       	ldd	r25, Z+3	; 0x03
    3d7e:	96 13       	cpse	r25, r22
    3d80:	06 c0       	rjmp	.+12     	; 0x3d8e <udc_update_iface_desc+0x50>
    3d82:	e0 93 10 24 	sts	0x2410, r30	; 0x802410 <udc_ptr_iface>
    3d86:	f0 93 11 24 	sts	0x2411, r31	; 0x802411 <udc_ptr_iface+0x1>
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	08 95       	ret
    3d8e:	90 81       	ld	r25, Z
    3d90:	e9 0f       	add	r30, r25
    3d92:	f1 1d       	adc	r31, r1
    3d94:	e2 17       	cp	r30, r18
    3d96:	f3 07       	cpc	r31, r19
    3d98:	58 f3       	brcs	.-42     	; 0x3d70 <udc_update_iface_desc+0x32>
    3d9a:	e0 93 10 24 	sts	0x2410, r30	; 0x802410 <udc_ptr_iface>
    3d9e:	f0 93 11 24 	sts	0x2411, r31	; 0x802411 <udc_ptr_iface+0x1>
    3da2:	80 e0       	ldi	r24, 0x00	; 0
    3da4:	08 95       	ret
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	08 95       	ret
    3daa:	80 e0       	ldi	r24, 0x00	; 0
    3dac:	08 95       	ret
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	08 95       	ret

00003db2 <udc_iface_disable>:
    3db2:	ef 92       	push	r14
    3db4:	ff 92       	push	r15
    3db6:	1f 93       	push	r17
    3db8:	cf 93       	push	r28
    3dba:	df 93       	push	r29
    3dbc:	c8 2f       	mov	r28, r24
    3dbe:	60 e0       	ldi	r22, 0x00	; 0
    3dc0:	be df       	rcall	.-132    	; 0x3d3e <udc_update_iface_desc>
    3dc2:	18 2f       	mov	r17, r24
    3dc4:	88 23       	and	r24, r24
    3dc6:	81 f1       	breq	.+96     	; 0x3e28 <udc_iface_disable+0x76>
    3dc8:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    3dcc:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3dd0:	ec 2f       	mov	r30, r28
    3dd2:	f0 e0       	ldi	r31, 0x00	; 0
    3dd4:	ee 0f       	add	r30, r30
    3dd6:	ff 1f       	adc	r31, r31
    3dd8:	12 96       	adiw	r26, 0x02	; 2
    3dda:	8d 91       	ld	r24, X+
    3ddc:	9c 91       	ld	r25, X
    3dde:	13 97       	sbiw	r26, 0x03	; 3
    3de0:	e8 0f       	add	r30, r24
    3de2:	f9 1f       	adc	r31, r25
    3de4:	e0 80       	ld	r14, Z
    3de6:	f1 80       	ldd	r15, Z+1	; 0x01
    3de8:	d7 01       	movw	r26, r14
    3dea:	16 96       	adiw	r26, 0x06	; 6
    3dec:	ed 91       	ld	r30, X+
    3dee:	fc 91       	ld	r31, X
    3df0:	17 97       	sbiw	r26, 0x07	; 7
    3df2:	19 95       	eicall
    3df4:	68 2f       	mov	r22, r24
    3df6:	8c 2f       	mov	r24, r28
    3df8:	a2 df       	rcall	.-188    	; 0x3d3e <udc_update_iface_desc>
    3dfa:	18 2f       	mov	r17, r24
    3dfc:	88 23       	and	r24, r24
    3dfe:	a1 f0       	breq	.+40     	; 0x3e28 <udc_iface_disable+0x76>
    3e00:	c0 91 10 24 	lds	r28, 0x2410	; 0x802410 <udc_ptr_iface>
    3e04:	d0 91 11 24 	lds	r29, 0x2411	; 0x802411 <udc_ptr_iface+0x1>
    3e08:	65 e0       	ldi	r22, 0x05	; 5
    3e0a:	ce 01       	movw	r24, r28
    3e0c:	5d df       	rcall	.-326    	; 0x3cc8 <udc_next_desc_in_iface>
    3e0e:	ec 01       	movw	r28, r24
    3e10:	89 2b       	or	r24, r25
    3e12:	21 f0       	breq	.+8      	; 0x3e1c <udc_iface_disable+0x6a>
    3e14:	8a 81       	ldd	r24, Y+2	; 0x02
    3e16:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <udd_ep_free>
    3e1a:	f6 cf       	rjmp	.-20     	; 0x3e08 <udc_iface_disable+0x56>
    3e1c:	d7 01       	movw	r26, r14
    3e1e:	12 96       	adiw	r26, 0x02	; 2
    3e20:	ed 91       	ld	r30, X+
    3e22:	fc 91       	ld	r31, X
    3e24:	13 97       	sbiw	r26, 0x03	; 3
    3e26:	19 95       	eicall
    3e28:	81 2f       	mov	r24, r17
    3e2a:	df 91       	pop	r29
    3e2c:	cf 91       	pop	r28
    3e2e:	1f 91       	pop	r17
    3e30:	ff 90       	pop	r15
    3e32:	ef 90       	pop	r14
    3e34:	08 95       	ret

00003e36 <udc_iface_enable>:
    3e36:	1f 93       	push	r17
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	18 2f       	mov	r17, r24
    3e3e:	7f df       	rcall	.-258    	; 0x3d3e <udc_update_iface_desc>
    3e40:	88 23       	and	r24, r24
    3e42:	41 f1       	breq	.+80     	; 0x3e94 <udc_iface_enable+0x5e>
    3e44:	c0 91 10 24 	lds	r28, 0x2410	; 0x802410 <udc_ptr_iface>
    3e48:	d0 91 11 24 	lds	r29, 0x2411	; 0x802411 <udc_ptr_iface+0x1>
    3e4c:	65 e0       	ldi	r22, 0x05	; 5
    3e4e:	ce 01       	movw	r24, r28
    3e50:	3b df       	rcall	.-394    	; 0x3cc8 <udc_next_desc_in_iface>
    3e52:	ec 01       	movw	r28, r24
    3e54:	89 2b       	or	r24, r25
    3e56:	49 f0       	breq	.+18     	; 0x3e6a <udc_iface_enable+0x34>
    3e58:	4c 81       	ldd	r20, Y+4	; 0x04
    3e5a:	5d 81       	ldd	r21, Y+5	; 0x05
    3e5c:	6b 81       	ldd	r22, Y+3	; 0x03
    3e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e60:	0e 94 08 12 	call	0x2410	; 0x2410 <udd_ep_alloc>
    3e64:	81 11       	cpse	r24, r1
    3e66:	f2 cf       	rjmp	.-28     	; 0x3e4c <udc_iface_enable+0x16>
    3e68:	15 c0       	rjmp	.+42     	; 0x3e94 <udc_iface_enable+0x5e>
    3e6a:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    3e6e:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3e72:	e1 2f       	mov	r30, r17
    3e74:	f0 e0       	ldi	r31, 0x00	; 0
    3e76:	ee 0f       	add	r30, r30
    3e78:	ff 1f       	adc	r31, r31
    3e7a:	12 96       	adiw	r26, 0x02	; 2
    3e7c:	8d 91       	ld	r24, X+
    3e7e:	9c 91       	ld	r25, X
    3e80:	13 97       	sbiw	r26, 0x03	; 3
    3e82:	e8 0f       	add	r30, r24
    3e84:	f9 1f       	adc	r31, r25
    3e86:	01 90       	ld	r0, Z+
    3e88:	f0 81       	ld	r31, Z
    3e8a:	e0 2d       	mov	r30, r0
    3e8c:	01 90       	ld	r0, Z+
    3e8e:	f0 81       	ld	r31, Z
    3e90:	e0 2d       	mov	r30, r0
    3e92:	19 95       	eicall
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	1f 91       	pop	r17
    3e9a:	08 95       	ret

00003e9c <udc_start>:
    3e9c:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <udd_enable>
    3ea0:	08 95       	ret

00003ea2 <udc_reset>:
    3ea2:	cf 93       	push	r28
    3ea4:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    3ea8:	88 23       	and	r24, r24
    3eaa:	c1 f0       	breq	.+48     	; 0x3edc <udc_reset+0x3a>
    3eac:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udc_ptr_conf>
    3eb0:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3eb4:	01 90       	ld	r0, Z+
    3eb6:	f0 81       	ld	r31, Z
    3eb8:	e0 2d       	mov	r30, r0
    3eba:	84 81       	ldd	r24, Z+4	; 0x04
    3ebc:	88 23       	and	r24, r24
    3ebe:	71 f0       	breq	.+28     	; 0x3edc <udc_reset+0x3a>
    3ec0:	c0 e0       	ldi	r28, 0x00	; 0
    3ec2:	8c 2f       	mov	r24, r28
    3ec4:	76 df       	rcall	.-276    	; 0x3db2 <udc_iface_disable>
    3ec6:	cf 5f       	subi	r28, 0xFF	; 255
    3ec8:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udc_ptr_conf>
    3ecc:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3ed0:	01 90       	ld	r0, Z+
    3ed2:	f0 81       	ld	r31, Z
    3ed4:	e0 2d       	mov	r30, r0
    3ed6:	84 81       	ldd	r24, Z+4	; 0x04
    3ed8:	c8 17       	cp	r28, r24
    3eda:	98 f3       	brcs	.-26     	; 0x3ec2 <udc_reset+0x20>
    3edc:	10 92 14 24 	sts	0x2414, r1	; 0x802414 <udc_num_configuration>
    3ee0:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <udc_device_status>
    3ee4:	81 fd       	sbrc	r24, 1
    3ee6:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <usb_callback_remotewakeup_disable>
    3eea:	10 92 18 24 	sts	0x2418, r1	; 0x802418 <udc_device_status>
    3eee:	10 92 19 24 	sts	0x2419, r1	; 0x802419 <udc_device_status+0x1>
    3ef2:	cf 91       	pop	r28
    3ef4:	08 95       	ret

00003ef6 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    3ef6:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    3ef8:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    3efc:	88 23       	and	r24, r24
    3efe:	49 f1       	breq	.+82     	; 0x3f52 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3f00:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    3f04:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3f08:	ed 91       	ld	r30, X+
    3f0a:	fc 91       	ld	r31, X
    3f0c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3f0e:	84 81       	ldd	r24, Z+4	; 0x04
    3f10:	88 23       	and	r24, r24
    3f12:	f9 f0       	breq	.+62     	; 0x3f52 <udc_sof_notify+0x5c>
    3f14:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3f16:	ec 2f       	mov	r30, r28
    3f18:	f0 e0       	ldi	r31, 0x00	; 0
    3f1a:	ee 0f       	add	r30, r30
    3f1c:	ff 1f       	adc	r31, r31
    3f1e:	12 96       	adiw	r26, 0x02	; 2
    3f20:	8d 91       	ld	r24, X+
    3f22:	9c 91       	ld	r25, X
    3f24:	13 97       	sbiw	r26, 0x03	; 3
    3f26:	e8 0f       	add	r30, r24
    3f28:	f9 1f       	adc	r31, r25
    3f2a:	01 90       	ld	r0, Z+
    3f2c:	f0 81       	ld	r31, Z
    3f2e:	e0 2d       	mov	r30, r0
    3f30:	00 84       	ldd	r0, Z+8	; 0x08
    3f32:	f1 85       	ldd	r31, Z+9	; 0x09
    3f34:	e0 2d       	mov	r30, r0
    3f36:	30 97       	sbiw	r30, 0x00	; 0
    3f38:	09 f0       	breq	.+2      	; 0x3f3c <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3f3a:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3f3c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3f3e:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    3f42:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3f46:	ed 91       	ld	r30, X+
    3f48:	fc 91       	ld	r31, X
    3f4a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3f4c:	84 81       	ldd	r24, Z+4	; 0x04
    3f4e:	c8 17       	cp	r28, r24
    3f50:	10 f3       	brcs	.-60     	; 0x3f16 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    3f52:	cf 91       	pop	r28
    3f54:	08 95       	ret

00003f56 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    3f56:	0f 93       	push	r16
    3f58:	1f 93       	push	r17
    3f5a:	cf 93       	push	r28
    3f5c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3f5e:	e1 e2       	ldi	r30, 0x21	; 33
    3f60:	f4 e2       	ldi	r31, 0x24	; 36
    3f62:	12 86       	std	Z+10, r1	; 0x0a
    3f64:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    3f66:	14 86       	std	Z+12, r1	; 0x0c
    3f68:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    3f6a:	16 86       	std	Z+14, r1	; 0x0e
    3f6c:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    3f6e:	80 81       	ld	r24, Z
    3f70:	88 23       	and	r24, r24
    3f72:	0c f0       	brlt	.+2      	; 0x3f76 <udc_process_setup+0x20>
    3f74:	95 c2       	rjmp	.+1322   	; 0x44a0 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    3f76:	20 91 27 24 	lds	r18, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    3f7a:	30 91 28 24 	lds	r19, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    3f7e:	21 15       	cp	r18, r1
    3f80:	31 05       	cpc	r19, r1
    3f82:	09 f0       	breq	.+2      	; 0x3f86 <udc_process_setup+0x30>
    3f84:	88 c2       	rjmp	.+1296   	; 0x4496 <udc_process_setup+0x540>
    3f86:	7f c2       	rjmp	.+1278   	; 0x4486 <udc_process_setup+0x530>
    3f88:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3f8a:	09 f0       	breq	.+2      	; 0x3f8e <udc_process_setup+0x38>
    3f8c:	ab c0       	rjmp	.+342    	; 0x40e4 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3f8e:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    3f92:	96 30       	cpi	r25, 0x06	; 6
    3f94:	81 f0       	breq	.+32     	; 0x3fb6 <udc_process_setup+0x60>
    3f96:	98 30       	cpi	r25, 0x08	; 8
    3f98:	09 f4       	brne	.+2      	; 0x3f9c <udc_process_setup+0x46>
    3f9a:	99 c0       	rjmp	.+306    	; 0x40ce <udc_process_setup+0x178>
    3f9c:	91 11       	cpse	r25, r1
    3f9e:	a2 c0       	rjmp	.+324    	; 0x40e4 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3fa0:	22 30       	cpi	r18, 0x02	; 2
    3fa2:	31 05       	cpc	r19, r1
    3fa4:	09 f0       	breq	.+2      	; 0x3fa8 <udc_process_setup+0x52>
    3fa6:	2b c2       	rjmp	.+1110   	; 0x43fe <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    3fa8:	62 e0       	ldi	r22, 0x02	; 2
    3faa:	70 e0       	ldi	r23, 0x00	; 0
    3fac:	88 e1       	ldi	r24, 0x18	; 24
    3fae:	94 e2       	ldi	r25, 0x24	; 36
    3fb0:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_set_setup_payload>
    3fb4:	7e c2       	rjmp	.+1276   	; 0x44b2 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    3fb6:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    3fba:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3fbe:	29 2f       	mov	r18, r25
    3fc0:	33 27       	eor	r19, r19
    3fc2:	22 30       	cpi	r18, 0x02	; 2
    3fc4:	31 05       	cpc	r19, r1
    3fc6:	b1 f0       	breq	.+44     	; 0x3ff4 <udc_process_setup+0x9e>
    3fc8:	20 f4       	brcc	.+8      	; 0x3fd2 <udc_process_setup+0x7c>
    3fca:	21 30       	cpi	r18, 0x01	; 1
    3fcc:	31 05       	cpc	r19, r1
    3fce:	41 f0       	breq	.+16     	; 0x3fe0 <udc_process_setup+0x8a>
    3fd0:	d8 c1       	rjmp	.+944    	; 0x4382 <udc_process_setup+0x42c>
    3fd2:	23 30       	cpi	r18, 0x03	; 3
    3fd4:	31 05       	cpc	r19, r1
    3fd6:	f1 f1       	breq	.+124    	; 0x4054 <udc_process_setup+0xfe>
    3fd8:	2f 30       	cpi	r18, 0x0F	; 15
    3fda:	31 05       	cpc	r19, r1
    3fdc:	61 f1       	breq	.+88     	; 0x4036 <udc_process_setup+0xe0>
    3fde:	d1 c1       	rjmp	.+930    	; 0x4382 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    3fe0:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <udc_config>
    3fe4:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    3fe8:	dc 01       	movw	r26, r24
    3fea:	6c 91       	ld	r22, X
    3fec:	70 e0       	ldi	r23, 0x00	; 0
    3fee:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_set_setup_payload>
    3ff2:	5e c0       	rjmp	.+188    	; 0x40b0 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3ff4:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    3ff8:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
    3ffc:	21 89       	ldd	r18, Z+17	; 0x11
    3ffe:	82 17       	cp	r24, r18
    4000:	08 f0       	brcs	.+2      	; 0x4004 <udc_process_setup+0xae>
    4002:	fd c1       	rjmp	.+1018   	; 0x43fe <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    4004:	99 27       	eor	r25, r25
    4006:	88 0f       	add	r24, r24
    4008:	99 1f       	adc	r25, r25
    400a:	88 0f       	add	r24, r24
    400c:	99 1f       	adc	r25, r25
    400e:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    4012:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    4016:	e8 0f       	add	r30, r24
    4018:	f9 1f       	adc	r31, r25
    401a:	80 81       	ld	r24, Z
    401c:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    401e:	fc 01       	movw	r30, r24
    4020:	62 81       	ldd	r22, Z+2	; 0x02
    4022:	73 81       	ldd	r23, Z+3	; 0x03
    4024:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    4028:	e0 91 29 24 	lds	r30, 0x2429	; 0x802429 <udd_g_ctrlreq+0x8>
    402c:	f0 91 2a 24 	lds	r31, 0x242A	; 0x80242a <udd_g_ctrlreq+0x9>
    4030:	82 e0       	ldi	r24, 0x02	; 2
    4032:	81 83       	std	Z+1, r24	; 0x01
    4034:	3d c0       	rjmp	.+122    	; 0x40b0 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    4036:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <udc_config+0x4>
    403a:	90 91 42 20 	lds	r25, 0x2042	; 0x802042 <udc_config+0x5>
    403e:	00 97       	sbiw	r24, 0x00	; 0
    4040:	09 f4       	brne	.+2      	; 0x4044 <udc_process_setup+0xee>
    4042:	dd c1       	rjmp	.+954    	; 0x43fe <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    4044:	dc 01       	movw	r26, r24
    4046:	12 96       	adiw	r26, 0x02	; 2
    4048:	6d 91       	ld	r22, X+
    404a:	7c 91       	ld	r23, X
    404c:	13 97       	sbiw	r26, 0x03	; 3
    404e:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_set_setup_payload>
    4052:	2e c0       	rjmp	.+92     	; 0x40b0 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    4054:	99 27       	eor	r25, r25
    4056:	81 30       	cpi	r24, 0x01	; 1
    4058:	91 05       	cpc	r25, r1
    405a:	99 f0       	breq	.+38     	; 0x4082 <udc_process_setup+0x12c>
    405c:	58 f0       	brcs	.+22     	; 0x4074 <udc_process_setup+0x11e>
    405e:	82 30       	cpi	r24, 0x02	; 2
    4060:	91 05       	cpc	r25, r1
    4062:	09 f4       	brne	.+2      	; 0x4066 <udc_process_setup+0x110>
    4064:	22 c2       	rjmp	.+1092   	; 0x44aa <udc_process_setup+0x554>
    4066:	03 97       	sbiw	r24, 0x03	; 3
    4068:	09 f0       	breq	.+2      	; 0x406c <udc_process_setup+0x116>
    406a:	94 c1       	rjmp	.+808    	; 0x4394 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    406c:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    406e:	ed e4       	ldi	r30, 0x4D	; 77
    4070:	f1 e2       	ldi	r31, 0x21	; 33
    4072:	0a c0       	rjmp	.+20     	; 0x4088 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    4074:	64 e0       	ldi	r22, 0x04	; 4
    4076:	70 e0       	ldi	r23, 0x00	; 0
    4078:	82 ee       	ldi	r24, 0xE2	; 226
    407a:	90 e2       	ldi	r25, 0x20	; 32
    407c:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_set_setup_payload>
    4080:	17 c0       	rjmp	.+46     	; 0x40b0 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    4082:	e1 ed       	ldi	r30, 0xD1	; 209
    4084:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    4086:	30 e1       	ldi	r19, 0x10	; 16
    4088:	a4 ea       	ldi	r26, 0xA4	; 164
    408a:	b0 e2       	ldi	r27, 0x20	; 32
    408c:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    408e:	81 91       	ld	r24, Z+
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	8d 93       	st	X+, r24
    4094:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    4096:	2f 5f       	subi	r18, 0xFF	; 255
    4098:	23 17       	cp	r18, r19
    409a:	c8 f3       	brcs	.-14     	; 0x408e <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    409c:	63 2f       	mov	r22, r19
    409e:	66 0f       	add	r22, r22
    40a0:	6e 5f       	subi	r22, 0xFE	; 254
    40a2:	60 93 a2 20 	sts	0x20A2, r22	; 0x8020a2 <udc_string_desc>
		udd_set_setup_payload(
    40a6:	70 e0       	ldi	r23, 0x00	; 0
    40a8:	82 ea       	ldi	r24, 0xA2	; 162
    40aa:	90 e2       	ldi	r25, 0x20	; 32
    40ac:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    40b0:	e1 e2       	ldi	r30, 0x21	; 33
    40b2:	f4 e2       	ldi	r31, 0x24	; 36
    40b4:	86 81       	ldd	r24, Z+6	; 0x06
    40b6:	97 81       	ldd	r25, Z+7	; 0x07
    40b8:	22 85       	ldd	r18, Z+10	; 0x0a
    40ba:	33 85       	ldd	r19, Z+11	; 0x0b
    40bc:	82 17       	cp	r24, r18
    40be:	93 07       	cpc	r25, r19
    40c0:	08 f0       	brcs	.+2      	; 0x40c4 <udc_process_setup+0x16e>
    40c2:	f7 c1       	rjmp	.+1006   	; 0x44b2 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    40c4:	80 93 2b 24 	sts	0x242B, r24	; 0x80242b <udd_g_ctrlreq+0xa>
    40c8:	90 93 2c 24 	sts	0x242C, r25	; 0x80242c <udd_g_ctrlreq+0xb>
    40cc:	f2 c1       	rjmp	.+996    	; 0x44b2 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    40ce:	21 30       	cpi	r18, 0x01	; 1
    40d0:	31 05       	cpc	r19, r1
    40d2:	09 f0       	breq	.+2      	; 0x40d6 <udc_process_setup+0x180>
    40d4:	94 c1       	rjmp	.+808    	; 0x43fe <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    40d6:	61 e0       	ldi	r22, 0x01	; 1
    40d8:	70 e0       	ldi	r23, 0x00	; 0
    40da:	84 e1       	ldi	r24, 0x14	; 20
    40dc:	94 e2       	ldi	r25, 0x24	; 36
    40de:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_set_setup_payload>
    40e2:	e7 c1       	rjmp	.+974    	; 0x44b2 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    40e4:	81 30       	cpi	r24, 0x01	; 1
    40e6:	e9 f5       	brne	.+122    	; 0x4162 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    40e8:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    40ec:	9a 30       	cpi	r25, 0x0A	; 10
    40ee:	c9 f5       	brne	.+114    	; 0x4162 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    40f0:	21 30       	cpi	r18, 0x01	; 1
    40f2:	31 05       	cpc	r19, r1
    40f4:	09 f0       	breq	.+2      	; 0x40f8 <udc_process_setup+0x1a2>
    40f6:	53 c1       	rjmp	.+678    	; 0x439e <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    40f8:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    40fc:	88 23       	and	r24, r24
    40fe:	09 f4       	brne	.+2      	; 0x4102 <udc_process_setup+0x1ac>
    4100:	4e c1       	rjmp	.+668    	; 0x439e <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4102:	c0 91 25 24 	lds	r28, 0x2425	; 0x802425 <udd_g_ctrlreq+0x4>
    4106:	d0 91 26 24 	lds	r29, 0x2426	; 0x802426 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    410a:	00 91 12 24 	lds	r16, 0x2412	; 0x802412 <udc_ptr_conf>
    410e:	10 91 13 24 	lds	r17, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    4112:	d8 01       	movw	r26, r16
    4114:	ed 91       	ld	r30, X+
    4116:	fc 91       	ld	r31, X
    4118:	84 81       	ldd	r24, Z+4	; 0x04
    411a:	c8 17       	cp	r28, r24
    411c:	08 f0       	brcs	.+2      	; 0x4120 <udc_process_setup+0x1ca>
    411e:	3f c1       	rjmp	.+638    	; 0x439e <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4120:	60 e0       	ldi	r22, 0x00	; 0
    4122:	8c 2f       	mov	r24, r28
    4124:	0c de       	rcall	.-1000   	; 0x3d3e <udc_update_iface_desc>
    4126:	88 23       	and	r24, r24
    4128:	09 f4       	brne	.+2      	; 0x412c <udc_process_setup+0x1d6>
    412a:	34 c1       	rjmp	.+616    	; 0x4394 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    412c:	ce 01       	movw	r24, r28
    412e:	99 27       	eor	r25, r25
    4130:	88 0f       	add	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	d8 01       	movw	r26, r16
    4136:	12 96       	adiw	r26, 0x02	; 2
    4138:	ed 91       	ld	r30, X+
    413a:	fc 91       	ld	r31, X
    413c:	13 97       	sbiw	r26, 0x03	; 3
    413e:	e8 0f       	add	r30, r24
    4140:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    4142:	01 90       	ld	r0, Z+
    4144:	f0 81       	ld	r31, Z
    4146:	e0 2d       	mov	r30, r0
    4148:	86 81       	ldd	r24, Z+6	; 0x06
    414a:	97 81       	ldd	r25, Z+7	; 0x07
    414c:	fc 01       	movw	r30, r24
    414e:	19 95       	eicall
    4150:	80 93 16 24 	sts	0x2416, r24	; 0x802416 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    4154:	61 e0       	ldi	r22, 0x01	; 1
    4156:	70 e0       	ldi	r23, 0x00	; 0
    4158:	86 e1       	ldi	r24, 0x16	; 22
    415a:	94 e2       	ldi	r25, 0x24	; 36
    415c:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_set_setup_payload>
    4160:	a8 c1       	rjmp	.+848    	; 0x44b2 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4162:	82 30       	cpi	r24, 0x02	; 2
    4164:	09 f0       	breq	.+2      	; 0x4168 <udc_process_setup+0x212>
    4166:	16 c1       	rjmp	.+556    	; 0x4394 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4168:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    416c:	81 11       	cpse	r24, r1
    416e:	0b c1       	rjmp	.+534    	; 0x4386 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    4170:	22 30       	cpi	r18, 0x02	; 2
    4172:	31 05       	cpc	r19, r1
    4174:	09 f0       	breq	.+2      	; 0x4178 <udc_process_setup+0x222>
    4176:	43 c1       	rjmp	.+646    	; 0x43fe <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    4178:	80 91 25 24 	lds	r24, 0x2425	; 0x802425 <udd_g_ctrlreq+0x4>
    417c:	0e 94 90 12 	call	0x2520	; 0x2520 <udd_ep_is_halted>
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	80 93 0e 24 	sts	0x240E, r24	; 0x80240e <udc_ep_status.4757>
    4186:	90 93 0f 24 	sts	0x240F, r25	; 0x80240f <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    418a:	62 e0       	ldi	r22, 0x02	; 2
    418c:	70 e0       	ldi	r23, 0x00	; 0
    418e:	8e e0       	ldi	r24, 0x0E	; 14
    4190:	94 e2       	ldi	r25, 0x24	; 36
    4192:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_set_setup_payload>
    4196:	8d c1       	rjmp	.+794    	; 0x44b2 <udc_process_setup+0x55c>
    4198:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    419a:	09 f0       	breq	.+2      	; 0x419e <udc_process_setup+0x248>
    419c:	a0 c0       	rjmp	.+320    	; 0x42de <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    419e:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    41a2:	93 30       	cpi	r25, 0x03	; 3
    41a4:	91 f1       	breq	.+100    	; 0x420a <udc_process_setup+0x2b4>
    41a6:	18 f4       	brcc	.+6      	; 0x41ae <udc_process_setup+0x258>
    41a8:	91 30       	cpi	r25, 0x01	; 1
    41aa:	a9 f0       	breq	.+42     	; 0x41d6 <udc_process_setup+0x280>
    41ac:	98 c0       	rjmp	.+304    	; 0x42de <udc_process_setup+0x388>
    41ae:	95 30       	cpi	r25, 0x05	; 5
    41b0:	21 f0       	breq	.+8      	; 0x41ba <udc_process_setup+0x264>
    41b2:	99 30       	cpi	r25, 0x09	; 9
    41b4:	09 f4       	brne	.+2      	; 0x41b8 <udc_process_setup+0x262>
    41b6:	43 c0       	rjmp	.+134    	; 0x423e <udc_process_setup+0x2e8>
    41b8:	92 c0       	rjmp	.+292    	; 0x42de <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    41ba:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    41be:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    41c2:	89 2b       	or	r24, r25
    41c4:	09 f0       	breq	.+2      	; 0x41c8 <udc_process_setup+0x272>
    41c6:	1b c1       	rjmp	.+566    	; 0x43fe <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    41c8:	89 e9       	ldi	r24, 0x99	; 153
    41ca:	9e e1       	ldi	r25, 0x1E	; 30
    41cc:	80 93 2d 24 	sts	0x242D, r24	; 0x80242d <udd_g_ctrlreq+0xc>
    41d0:	90 93 2e 24 	sts	0x242E, r25	; 0x80242e <udd_g_ctrlreq+0xd>
    41d4:	6e c1       	rjmp	.+732    	; 0x44b2 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    41d6:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    41da:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    41de:	89 2b       	or	r24, r25
    41e0:	09 f0       	breq	.+2      	; 0x41e4 <udc_process_setup+0x28e>
    41e2:	0d c1       	rjmp	.+538    	; 0x43fe <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    41e4:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    41e8:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	09 f0       	breq	.+2      	; 0x41f2 <udc_process_setup+0x29c>
    41f0:	06 c1       	rjmp	.+524    	; 0x43fe <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    41f2:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <udc_device_status>
    41f6:	90 91 19 24 	lds	r25, 0x2419	; 0x802419 <udc_device_status+0x1>
    41fa:	8d 7f       	andi	r24, 0xFD	; 253
    41fc:	80 93 18 24 	sts	0x2418, r24	; 0x802418 <udc_device_status>
    4200:	90 93 19 24 	sts	0x2419, r25	; 0x802419 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    4204:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <usb_callback_remotewakeup_disable>
    4208:	54 c1       	rjmp	.+680    	; 0x44b2 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    420a:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    420e:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    4212:	89 2b       	or	r24, r25
    4214:	09 f0       	breq	.+2      	; 0x4218 <udc_process_setup+0x2c2>
    4216:	f3 c0       	rjmp	.+486    	; 0x43fe <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    4218:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    421c:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    4220:	01 97       	sbiw	r24, 0x01	; 1
    4222:	09 f0       	breq	.+2      	; 0x4226 <udc_process_setup+0x2d0>
    4224:	b2 c0       	rjmp	.+356    	; 0x438a <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    4226:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <udc_device_status>
    422a:	90 91 19 24 	lds	r25, 0x2419	; 0x802419 <udc_device_status+0x1>
    422e:	82 60       	ori	r24, 0x02	; 2
    4230:	80 93 18 24 	sts	0x2418, r24	; 0x802418 <udc_device_status>
    4234:	90 93 19 24 	sts	0x2419, r25	; 0x802419 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    4238:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <usb_callback_remotewakeup_enable>
    423c:	3a c1       	rjmp	.+628    	; 0x44b2 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    423e:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    4242:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    4246:	89 2b       	or	r24, r25
    4248:	09 f0       	breq	.+2      	; 0x424c <udc_process_setup+0x2f6>
    424a:	d9 c0       	rjmp	.+434    	; 0x43fe <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    424c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <udd_getaddress>
    4250:	88 23       	and	r24, r24
    4252:	09 f4       	brne	.+2      	; 0x4256 <udc_process_setup+0x300>
    4254:	9f c0       	rjmp	.+318    	; 0x4394 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    4256:	20 91 23 24 	lds	r18, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    425a:	30 91 24 24 	lds	r19, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    425e:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    4260:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    4264:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    4268:	81 89       	ldd	r24, Z+17	; 0x11
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	82 17       	cp	r24, r18
    426e:	93 07       	cpc	r25, r19
    4270:	08 f4       	brcc	.+2      	; 0x4274 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    4272:	90 c0       	rjmp	.+288    	; 0x4394 <udc_process_setup+0x43e>
    4274:	16 de       	rcall	.-980    	; 0x3ea2 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    4276:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    427a:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    427e:	80 93 14 24 	sts	0x2414, r24	; 0x802414 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    4282:	88 23       	and	r24, r24
    4284:	09 f4       	brne	.+2      	; 0x4288 <udc_process_setup+0x332>
    4286:	15 c1       	rjmp	.+554    	; 0x44b2 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    4288:	99 27       	eor	r25, r25
    428a:	81 50       	subi	r24, 0x01	; 1
    428c:	90 4c       	sbci	r25, 0xC0	; 192
    428e:	88 0f       	add	r24, r24
    4290:	99 1f       	adc	r25, r25
    4292:	88 0f       	add	r24, r24
    4294:	99 1f       	adc	r25, r25
    4296:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    429a:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    429e:	e8 0f       	add	r30, r24
    42a0:	f9 1f       	adc	r31, r25
    42a2:	e0 93 12 24 	sts	0x2412, r30	; 0x802412 <udc_ptr_conf>
    42a6:	f0 93 13 24 	sts	0x2413, r31	; 0x802413 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    42aa:	01 90       	ld	r0, Z+
    42ac:	f0 81       	ld	r31, Z
    42ae:	e0 2d       	mov	r30, r0
    42b0:	84 81       	ldd	r24, Z+4	; 0x04
    42b2:	88 23       	and	r24, r24
    42b4:	09 f4       	brne	.+2      	; 0x42b8 <udc_process_setup+0x362>
    42b6:	fd c0       	rjmp	.+506    	; 0x44b2 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    42b8:	c0 e0       	ldi	r28, 0x00	; 0
    42ba:	60 e0       	ldi	r22, 0x00	; 0
    42bc:	8c 2f       	mov	r24, r28
    42be:	bb dd       	rcall	.-1162   	; 0x3e36 <udc_iface_enable>
    42c0:	88 23       	and	r24, r24
    42c2:	09 f4       	brne	.+2      	; 0x42c6 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    42c4:	67 c0       	rjmp	.+206    	; 0x4394 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    42c6:	cf 5f       	subi	r28, 0xFF	; 255
    42c8:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udc_ptr_conf>
    42cc:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    42d0:	01 90       	ld	r0, Z+
    42d2:	f0 81       	ld	r31, Z
    42d4:	e0 2d       	mov	r30, r0
    42d6:	84 81       	ldd	r24, Z+4	; 0x04
    42d8:	c8 17       	cp	r28, r24
    42da:	78 f3       	brcs	.-34     	; 0x42ba <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    42dc:	ea c0       	rjmp	.+468    	; 0x44b2 <udc_process_setup+0x55c>
    42de:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    42e0:	e9 f4       	brne	.+58     	; 0x431c <udc_process_setup+0x3c6>
    42e2:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    42e6:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    42e8:	c9 f4       	brne	.+50     	; 0x431c <udc_process_setup+0x3c6>
    42ea:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    42ee:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    42f2:	89 2b       	or	r24, r25
    42f4:	09 f0       	breq	.+2      	; 0x42f8 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    42f6:	53 c0       	rjmp	.+166    	; 0x439e <udc_process_setup+0x448>
    42f8:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    42fc:	88 23       	and	r24, r24
    42fe:	09 f4       	brne	.+2      	; 0x4302 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4300:	4e c0       	rjmp	.+156    	; 0x439e <udc_process_setup+0x448>
    4302:	e1 e2       	ldi	r30, 0x21	; 33
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    4304:	f4 e2       	ldi	r31, 0x24	; 36

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    4306:	c4 81       	ldd	r28, Z+4	; 0x04
    4308:	d2 81       	ldd	r29, Z+2	; 0x02
    430a:	8c 2f       	mov	r24, r28
    430c:	52 dd       	rcall	.-1372   	; 0x3db2 <udc_iface_disable>
    430e:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    4310:	09 f4       	brne	.+2      	; 0x4314 <udc_process_setup+0x3be>
    4312:	40 c0       	rjmp	.+128    	; 0x4394 <udc_process_setup+0x43e>
    4314:	6d 2f       	mov	r22, r29
    4316:	8c 2f       	mov	r24, r28
    4318:	8e dd       	rcall	.-1252   	; 0x3e36 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    431a:	3a c0       	rjmp	.+116    	; 0x4390 <udc_process_setup+0x43a>
    431c:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    431e:	d1 f5       	brne	.+116    	; 0x4394 <udc_process_setup+0x43e>
    4320:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    4324:	81 30       	cpi	r24, 0x01	; 1
    4326:	19 f0       	breq	.+6      	; 0x432e <udc_process_setup+0x3d8>
    4328:	83 30       	cpi	r24, 0x03	; 3
    432a:	a1 f0       	breq	.+40     	; 0x4354 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    432c:	30 c0       	rjmp	.+96     	; 0x438e <udc_process_setup+0x438>
    432e:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    4332:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    4336:	89 2b       	or	r24, r25
    4338:	09 f0       	breq	.+2      	; 0x433c <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    433a:	61 c0       	rjmp	.+194    	; 0x43fe <udc_process_setup+0x4a8>
    433c:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    4340:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    4344:	89 2b       	or	r24, r25
    4346:	09 f0       	breq	.+2      	; 0x434a <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4348:	5a c0       	rjmp	.+180    	; 0x43fe <udc_process_setup+0x4a8>
    434a:	80 91 25 24 	lds	r24, 0x2425	; 0x802425 <udd_g_ctrlreq+0x4>
    434e:	0e 94 ab 12 	call	0x2556	; 0x2556 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4352:	1e c0       	rjmp	.+60     	; 0x4390 <udc_process_setup+0x43a>
    4354:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    4358:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    435c:	89 2b       	or	r24, r25
    435e:	09 f0       	breq	.+2      	; 0x4362 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4360:	4e c0       	rjmp	.+156    	; 0x43fe <udc_process_setup+0x4a8>
    4362:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    4366:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    436a:	89 2b       	or	r24, r25
    436c:	09 f0       	breq	.+2      	; 0x4370 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    436e:	47 c0       	rjmp	.+142    	; 0x43fe <udc_process_setup+0x4a8>
    4370:	c1 e2       	ldi	r28, 0x21	; 33
    4372:	d4 e2       	ldi	r29, 0x24	; 36
    4374:	8c 81       	ldd	r24, Y+4	; 0x04
    4376:	0e 94 ad 13 	call	0x275a	; 0x275a <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    437a:	8c 81       	ldd	r24, Y+4	; 0x04
    437c:	0e 94 18 14 	call	0x2830	; 0x2830 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    4380:	07 c0       	rjmp	.+14     	; 0x4390 <udc_process_setup+0x43a>
    4382:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    4384:	05 c0       	rjmp	.+10     	; 0x4390 <udc_process_setup+0x43a>
    4386:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    4388:	03 c0       	rjmp	.+6      	; 0x4390 <udc_process_setup+0x43a>
    438a:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    438c:	01 c0       	rjmp	.+2      	; 0x4390 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    4392:	90 c0       	rjmp	.+288    	; 0x44b4 <udc_process_setup+0x55e>
    4394:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq>
    4398:	8f 71       	andi	r24, 0x1F	; 31
    439a:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    439c:	81 f5       	brne	.+96     	; 0x43fe <udc_process_setup+0x4a8>
    439e:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    43a2:	88 23       	and	r24, r24
    43a4:	09 f4       	brne	.+2      	; 0x43a8 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    43a6:	71 c0       	rjmp	.+226    	; 0x448a <udc_process_setup+0x534>
    43a8:	00 91 25 24 	lds	r16, 0x2425	; 0x802425 <udd_g_ctrlreq+0x4>
    43ac:	10 91 26 24 	lds	r17, 0x2426	; 0x802426 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    43b0:	c0 91 12 24 	lds	r28, 0x2412	; 0x802412 <udc_ptr_conf>
    43b4:	d0 91 13 24 	lds	r29, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    43b8:	e8 81       	ld	r30, Y
    43ba:	f9 81       	ldd	r31, Y+1	; 0x01
    43bc:	84 81       	ldd	r24, Z+4	; 0x04
    43be:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    43c0:	08 f0       	brcs	.+2      	; 0x43c4 <udc_process_setup+0x46e>
    43c2:	65 c0       	rjmp	.+202    	; 0x448e <udc_process_setup+0x538>
    43c4:	60 e0       	ldi	r22, 0x00	; 0
    43c6:	80 2f       	mov	r24, r16
    43c8:	ba dc       	rcall	.-1676   	; 0x3d3e <udc_update_iface_desc>
    43ca:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    43cc:	c1 f0       	breq	.+48     	; 0x43fe <udc_process_setup+0x4a8>
    43ce:	f8 01       	movw	r30, r16
    43d0:	ff 27       	eor	r31, r31
    43d2:	cf 01       	movw	r24, r30
    43d4:	88 0f       	add	r24, r24
    43d6:	99 1f       	adc	r25, r25
    43d8:	ea 81       	ldd	r30, Y+2	; 0x02
    43da:	fb 81       	ldd	r31, Y+3	; 0x03
    43dc:	e8 0f       	add	r30, r24
    43de:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    43e0:	c0 81       	ld	r28, Z
    43e2:	d1 81       	ldd	r29, Z+1	; 0x01
    43e4:	ee 81       	ldd	r30, Y+6	; 0x06
    43e6:	ff 81       	ldd	r31, Y+7	; 0x07
    43e8:	19 95       	eicall
    43ea:	68 2f       	mov	r22, r24
    43ec:	80 2f       	mov	r24, r16
    43ee:	a7 dc       	rcall	.-1714   	; 0x3d3e <udc_update_iface_desc>
    43f0:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    43f2:	29 f0       	breq	.+10     	; 0x43fe <udc_process_setup+0x4a8>
    43f4:	ec 81       	ldd	r30, Y+4	; 0x04
    43f6:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    43f8:	19 95       	eicall
    43fa:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    43fc:	5b c0       	rjmp	.+182    	; 0x44b4 <udc_process_setup+0x55e>
    43fe:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq>
    4402:	8f 71       	andi	r24, 0x1F	; 31
    4404:	82 30       	cpi	r24, 0x02	; 2
    4406:	09 f0       	breq	.+2      	; 0x440a <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4408:	44 c0       	rjmp	.+136    	; 0x4492 <udc_process_setup+0x53c>
    440a:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    440e:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4410:	b1 f1       	breq	.+108    	; 0x447e <udc_process_setup+0x528>
    4412:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    4416:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    441a:	ed 91       	ld	r30, X+
    441c:	fc 91       	ld	r31, X
    441e:	11 97       	sbiw	r26, 0x01	; 1
    4420:	84 81       	ldd	r24, Z+4	; 0x04
    4422:	88 23       	and	r24, r24
    4424:	71 f1       	breq	.+92     	; 0x4482 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    4426:	c0 e0       	ldi	r28, 0x00	; 0
    4428:	ec 2f       	mov	r30, r28
    442a:	f0 e0       	ldi	r31, 0x00	; 0
    442c:	ee 0f       	add	r30, r30
    442e:	ff 1f       	adc	r31, r31
    4430:	12 96       	adiw	r26, 0x02	; 2
    4432:	8d 91       	ld	r24, X+
    4434:	9c 91       	ld	r25, X
    4436:	13 97       	sbiw	r26, 0x03	; 3
    4438:	e8 0f       	add	r30, r24
    443a:	f9 1f       	adc	r31, r25
    443c:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    443e:	11 81       	ldd	r17, Z+1	; 0x01
    4440:	d8 01       	movw	r26, r16
    4442:	16 96       	adiw	r26, 0x06	; 6
    4444:	ed 91       	ld	r30, X+
    4446:	fc 91       	ld	r31, X
    4448:	17 97       	sbiw	r26, 0x07	; 7
    444a:	19 95       	eicall
    444c:	68 2f       	mov	r22, r24
    444e:	8c 2f       	mov	r24, r28
    4450:	76 dc       	rcall	.-1812   	; 0x3d3e <udc_update_iface_desc>
    4452:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    4454:	79 f1       	breq	.+94     	; 0x44b4 <udc_process_setup+0x55e>
    4456:	d8 01       	movw	r26, r16
    4458:	14 96       	adiw	r26, 0x04	; 4
    445a:	ed 91       	ld	r30, X+
    445c:	fc 91       	ld	r31, X
    445e:	15 97       	sbiw	r26, 0x05	; 5
    4460:	19 95       	eicall
    4462:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    4464:	27 c0       	rjmp	.+78     	; 0x44b4 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4466:	cf 5f       	subi	r28, 0xFF	; 255
    4468:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    446c:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    4470:	ed 91       	ld	r30, X+
    4472:	fc 91       	ld	r31, X
    4474:	11 97       	sbiw	r26, 0x01	; 1
    4476:	94 81       	ldd	r25, Z+4	; 0x04
    4478:	c9 17       	cp	r28, r25
    447a:	b0 f2       	brcs	.-84     	; 0x4428 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    447c:	1b c0       	rjmp	.+54     	; 0x44b4 <udc_process_setup+0x55e>
    447e:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    4480:	19 c0       	rjmp	.+50     	; 0x44b4 <udc_process_setup+0x55e>
    4482:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    4484:	17 c0       	rjmp	.+46     	; 0x44b4 <udc_process_setup+0x55e>
    4486:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    4488:	15 c0       	rjmp	.+42     	; 0x44b4 <udc_process_setup+0x55e>
    448a:	80 e0       	ldi	r24, 0x00	; 0
    448c:	13 c0       	rjmp	.+38     	; 0x44b4 <udc_process_setup+0x55e>
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	11 c0       	rjmp	.+34     	; 0x44b4 <udc_process_setup+0x55e>
    4492:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    4494:	0f c0       	rjmp	.+30     	; 0x44b4 <udc_process_setup+0x55e>
    4496:	98 2f       	mov	r25, r24
    4498:	90 76       	andi	r25, 0x60	; 96
    449a:	09 f0       	breq	.+2      	; 0x449e <udc_process_setup+0x548>
    449c:	7b cf       	rjmp	.-266    	; 0x4394 <udc_process_setup+0x43e>
    449e:	74 cd       	rjmp	.-1304   	; 0x3f88 <udc_process_setup+0x32>
    44a0:	98 2f       	mov	r25, r24
    44a2:	90 76       	andi	r25, 0x60	; 96
    44a4:	09 f0       	breq	.+2      	; 0x44a8 <udc_process_setup+0x552>
    44a6:	76 cf       	rjmp	.-276    	; 0x4394 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    44a8:	77 ce       	rjmp	.-786    	; 0x4198 <udc_process_setup+0x242>
		str = udc_string_product_name;
    44aa:	3c e0       	ldi	r19, 0x0C	; 12
    44ac:	e4 ec       	ldi	r30, 0xC4	; 196
    44ae:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    44b0:	eb cd       	rjmp	.-1066   	; 0x4088 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	df 91       	pop	r29
    44b6:	cf 91       	pop	r28
    44b8:	1f 91       	pop	r17
    44ba:	0f 91       	pop	r16
    44bc:	08 95       	ret

000044be <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
    44c2:	1f 92       	push	r1
    44c4:	cd b7       	in	r28, 0x3d	; 61
    44c6:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    44c8:	80 91 3b 24 	lds	r24, 0x243B	; 0x80243b <stdio_base>
    44cc:	90 91 3c 24 	lds	r25, 0x243C	; 0x80243c <stdio_base+0x1>
    44d0:	e0 91 37 24 	lds	r30, 0x2437	; 0x802437 <ptr_get>
    44d4:	f0 91 38 24 	lds	r31, 0x2438	; 0x802438 <ptr_get+0x1>
    44d8:	be 01       	movw	r22, r28
    44da:	6f 5f       	subi	r22, 0xFF	; 255
    44dc:	7f 4f       	sbci	r23, 0xFF	; 255
    44de:	19 95       	eicall
	return c;
    44e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    44e2:	08 2e       	mov	r0, r24
    44e4:	00 0c       	add	r0, r0
    44e6:	99 0b       	sbc	r25, r25
    44e8:	0f 90       	pop	r0
    44ea:	df 91       	pop	r29
    44ec:	cf 91       	pop	r28
    44ee:	08 95       	ret

000044f0 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    44f0:	80 91 1a 24 	lds	r24, 0x241A	; 0x80241a <stdio_usb_interface_enable>
    44f4:	88 23       	and	r24, r24
    44f6:	81 f0       	breq	.+32     	; 0x4518 <stdio_usb_putchar+0x28>
    44f8:	86 2f       	mov	r24, r22
    44fa:	08 2e       	mov	r0, r24
    44fc:	00 0c       	add	r0, r0
    44fe:	99 0b       	sbc	r25, r25
    4500:	df db       	rcall	.-2114   	; 0x3cc0 <udi_cdc_putc>
    4502:	21 e0       	ldi	r18, 0x01	; 1
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	89 2b       	or	r24, r25
    4508:	11 f0       	breq	.+4      	; 0x450e <stdio_usb_putchar+0x1e>
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	88 27       	eor	r24, r24
    4510:	99 27       	eor	r25, r25
    4512:	82 1b       	sub	r24, r18
    4514:	93 0b       	sbc	r25, r19
    4516:	08 95       	ret
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	08 95       	ret

0000451e <stdio_usb_getchar>:
    451e:	cf 93       	push	r28
    4520:	df 93       	push	r29
    4522:	80 91 1a 24 	lds	r24, 0x241A	; 0x80241a <stdio_usb_interface_enable>
    4526:	81 11       	cpse	r24, r1
    4528:	03 c0       	rjmp	.+6      	; 0x4530 <stdio_usb_getchar+0x12>
    452a:	fb 01       	movw	r30, r22
    452c:	10 82       	st	Z, r1
    452e:	03 c0       	rjmp	.+6      	; 0x4536 <stdio_usb_getchar+0x18>
    4530:	eb 01       	movw	r28, r22
    4532:	3e db       	rcall	.-2436   	; 0x3bb0 <udi_cdc_getc>
    4534:	88 83       	st	Y, r24
    4536:	df 91       	pop	r29
    4538:	cf 91       	pop	r28
    453a:	08 95       	ret

0000453c <stdio_usb_enable>:
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	80 93 1a 24 	sts	0x241A, r24	; 0x80241a <stdio_usb_interface_enable>
    4542:	08 95       	ret

00004544 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    4544:	10 92 3b 24 	sts	0x243B, r1	; 0x80243b <stdio_base>
    4548:	10 92 3c 24 	sts	0x243C, r1	; 0x80243c <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    454c:	88 e7       	ldi	r24, 0x78	; 120
    454e:	92 e2       	ldi	r25, 0x22	; 34
    4550:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <ptr_put>
    4554:	90 93 3a 24 	sts	0x243A, r25	; 0x80243a <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    4558:	8f e8       	ldi	r24, 0x8F	; 143
    455a:	92 e2       	ldi	r25, 0x22	; 34
    455c:	80 93 37 24 	sts	0x2437, r24	; 0x802437 <ptr_get>
    4560:	90 93 38 24 	sts	0x2438, r25	; 0x802438 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    4564:	9b dc       	rcall	.-1738   	; 0x3e9c <udc_start>
    4566:	6f e5       	ldi	r22, 0x5F	; 95
    4568:	72 e2       	ldi	r23, 0x22	; 34
    456a:	89 eb       	ldi	r24, 0xB9	; 185
    456c:	92 e2       	ldi	r25, 0x22	; 34
    456e:	79 c0       	rjmp	.+242    	; 0x4662 <fdevopen>
    4570:	08 95       	ret

00004572 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    4572:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    4574:	80 91 3b 24 	lds	r24, 0x243B	; 0x80243b <stdio_base>
    4578:	90 91 3c 24 	lds	r25, 0x243C	; 0x80243c <stdio_base+0x1>
    457c:	e0 91 39 24 	lds	r30, 0x2439	; 0x802439 <ptr_put>
    4580:	f0 91 3a 24 	lds	r31, 0x243A	; 0x80243a <ptr_put+0x1>
    4584:	19 95       	eicall
    4586:	99 23       	and	r25, r25
    4588:	1c f0       	brlt	.+6      	; 0x4590 <_write+0x1e>
		return -1;
	}
	return 1;
    458a:	81 e0       	ldi	r24, 0x01	; 1
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    4590:	8f ef       	ldi	r24, 0xFF	; 255
    4592:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    4594:	08 95       	ret

00004596 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    4596:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    459a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    459c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    459e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    45a2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    45a4:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    45a8:	08 95       	ret

000045aa <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    45aa:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    45ac:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    45ae:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    45b0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    45b2:	60 83       	st	Z, r22
	ret                             // Return to caller
    45b4:	08 95       	ret

000045b6 <__udivmodhi4>:
    45b6:	aa 1b       	sub	r26, r26
    45b8:	bb 1b       	sub	r27, r27
    45ba:	51 e1       	ldi	r21, 0x11	; 17
    45bc:	07 c0       	rjmp	.+14     	; 0x45cc <__udivmodhi4_ep>

000045be <__udivmodhi4_loop>:
    45be:	aa 1f       	adc	r26, r26
    45c0:	bb 1f       	adc	r27, r27
    45c2:	a6 17       	cp	r26, r22
    45c4:	b7 07       	cpc	r27, r23
    45c6:	10 f0       	brcs	.+4      	; 0x45cc <__udivmodhi4_ep>
    45c8:	a6 1b       	sub	r26, r22
    45ca:	b7 0b       	sbc	r27, r23

000045cc <__udivmodhi4_ep>:
    45cc:	88 1f       	adc	r24, r24
    45ce:	99 1f       	adc	r25, r25
    45d0:	5a 95       	dec	r21
    45d2:	a9 f7       	brne	.-22     	; 0x45be <__udivmodhi4_loop>
    45d4:	80 95       	com	r24
    45d6:	90 95       	com	r25
    45d8:	bc 01       	movw	r22, r24
    45da:	cd 01       	movw	r24, r26
    45dc:	08 95       	ret

000045de <__udivmodsi4>:
    45de:	a1 e2       	ldi	r26, 0x21	; 33
    45e0:	1a 2e       	mov	r1, r26
    45e2:	aa 1b       	sub	r26, r26
    45e4:	bb 1b       	sub	r27, r27
    45e6:	fd 01       	movw	r30, r26
    45e8:	0d c0       	rjmp	.+26     	; 0x4604 <__udivmodsi4_ep>

000045ea <__udivmodsi4_loop>:
    45ea:	aa 1f       	adc	r26, r26
    45ec:	bb 1f       	adc	r27, r27
    45ee:	ee 1f       	adc	r30, r30
    45f0:	ff 1f       	adc	r31, r31
    45f2:	a2 17       	cp	r26, r18
    45f4:	b3 07       	cpc	r27, r19
    45f6:	e4 07       	cpc	r30, r20
    45f8:	f5 07       	cpc	r31, r21
    45fa:	20 f0       	brcs	.+8      	; 0x4604 <__udivmodsi4_ep>
    45fc:	a2 1b       	sub	r26, r18
    45fe:	b3 0b       	sbc	r27, r19
    4600:	e4 0b       	sbc	r30, r20
    4602:	f5 0b       	sbc	r31, r21

00004604 <__udivmodsi4_ep>:
    4604:	66 1f       	adc	r22, r22
    4606:	77 1f       	adc	r23, r23
    4608:	88 1f       	adc	r24, r24
    460a:	99 1f       	adc	r25, r25
    460c:	1a 94       	dec	r1
    460e:	69 f7       	brne	.-38     	; 0x45ea <__udivmodsi4_loop>
    4610:	60 95       	com	r22
    4612:	70 95       	com	r23
    4614:	80 95       	com	r24
    4616:	90 95       	com	r25
    4618:	9b 01       	movw	r18, r22
    461a:	ac 01       	movw	r20, r24
    461c:	bd 01       	movw	r22, r26
    461e:	cf 01       	movw	r24, r30
    4620:	08 95       	ret

00004622 <__tablejump2__>:
    4622:	ee 0f       	add	r30, r30
    4624:	ff 1f       	adc	r31, r31
    4626:	88 1f       	adc	r24, r24
    4628:	8b bf       	out	0x3b, r24	; 59
    462a:	07 90       	elpm	r0, Z+
    462c:	f6 91       	elpm	r31, Z
    462e:	e0 2d       	mov	r30, r0
    4630:	19 94       	eijmp

00004632 <__umulhisi3>:
    4632:	a2 9f       	mul	r26, r18
    4634:	b0 01       	movw	r22, r0
    4636:	b3 9f       	mul	r27, r19
    4638:	c0 01       	movw	r24, r0
    463a:	a3 9f       	mul	r26, r19
    463c:	70 0d       	add	r23, r0
    463e:	81 1d       	adc	r24, r1
    4640:	11 24       	eor	r1, r1
    4642:	91 1d       	adc	r25, r1
    4644:	b2 9f       	mul	r27, r18
    4646:	70 0d       	add	r23, r0
    4648:	81 1d       	adc	r24, r1
    464a:	11 24       	eor	r1, r1
    464c:	91 1d       	adc	r25, r1
    464e:	08 95       	ret

00004650 <memcpy>:
    4650:	fb 01       	movw	r30, r22
    4652:	dc 01       	movw	r26, r24
    4654:	02 c0       	rjmp	.+4      	; 0x465a <memcpy+0xa>
    4656:	01 90       	ld	r0, Z+
    4658:	0d 92       	st	X+, r0
    465a:	41 50       	subi	r20, 0x01	; 1
    465c:	50 40       	sbci	r21, 0x00	; 0
    465e:	d8 f7       	brcc	.-10     	; 0x4656 <memcpy+0x6>
    4660:	08 95       	ret

00004662 <fdevopen>:
    4662:	0f 93       	push	r16
    4664:	1f 93       	push	r17
    4666:	cf 93       	push	r28
    4668:	df 93       	push	r29
    466a:	00 97       	sbiw	r24, 0x00	; 0
    466c:	31 f4       	brne	.+12     	; 0x467a <fdevopen+0x18>
    466e:	61 15       	cp	r22, r1
    4670:	71 05       	cpc	r23, r1
    4672:	19 f4       	brne	.+6      	; 0x467a <fdevopen+0x18>
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	39 c0       	rjmp	.+114    	; 0x46ec <fdevopen+0x8a>
    467a:	8b 01       	movw	r16, r22
    467c:	ec 01       	movw	r28, r24
    467e:	6e e0       	ldi	r22, 0x0E	; 14
    4680:	70 e0       	ldi	r23, 0x00	; 0
    4682:	81 e0       	ldi	r24, 0x01	; 1
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	41 d2       	rcall	.+1154   	; 0x4b0a <calloc>
    4688:	fc 01       	movw	r30, r24
    468a:	89 2b       	or	r24, r25
    468c:	99 f3       	breq	.-26     	; 0x4674 <fdevopen+0x12>
    468e:	80 e8       	ldi	r24, 0x80	; 128
    4690:	83 83       	std	Z+3, r24	; 0x03
    4692:	01 15       	cp	r16, r1
    4694:	11 05       	cpc	r17, r1
    4696:	71 f0       	breq	.+28     	; 0x46b4 <fdevopen+0x52>
    4698:	02 87       	std	Z+10, r16	; 0x0a
    469a:	13 87       	std	Z+11, r17	; 0x0b
    469c:	81 e8       	ldi	r24, 0x81	; 129
    469e:	83 83       	std	Z+3, r24	; 0x03
    46a0:	80 91 3d 24 	lds	r24, 0x243D	; 0x80243d <__iob>
    46a4:	90 91 3e 24 	lds	r25, 0x243E	; 0x80243e <__iob+0x1>
    46a8:	89 2b       	or	r24, r25
    46aa:	21 f4       	brne	.+8      	; 0x46b4 <fdevopen+0x52>
    46ac:	e0 93 3d 24 	sts	0x243D, r30	; 0x80243d <__iob>
    46b0:	f0 93 3e 24 	sts	0x243E, r31	; 0x80243e <__iob+0x1>
    46b4:	20 97       	sbiw	r28, 0x00	; 0
    46b6:	c9 f0       	breq	.+50     	; 0x46ea <fdevopen+0x88>
    46b8:	c0 87       	std	Z+8, r28	; 0x08
    46ba:	d1 87       	std	Z+9, r29	; 0x09
    46bc:	83 81       	ldd	r24, Z+3	; 0x03
    46be:	82 60       	ori	r24, 0x02	; 2
    46c0:	83 83       	std	Z+3, r24	; 0x03
    46c2:	80 91 3f 24 	lds	r24, 0x243F	; 0x80243f <__iob+0x2>
    46c6:	90 91 40 24 	lds	r25, 0x2440	; 0x802440 <__iob+0x3>
    46ca:	89 2b       	or	r24, r25
    46cc:	71 f4       	brne	.+28     	; 0x46ea <fdevopen+0x88>
    46ce:	e0 93 3f 24 	sts	0x243F, r30	; 0x80243f <__iob+0x2>
    46d2:	f0 93 40 24 	sts	0x2440, r31	; 0x802440 <__iob+0x3>
    46d6:	80 91 41 24 	lds	r24, 0x2441	; 0x802441 <__iob+0x4>
    46da:	90 91 42 24 	lds	r25, 0x2442	; 0x802442 <__iob+0x5>
    46de:	89 2b       	or	r24, r25
    46e0:	21 f4       	brne	.+8      	; 0x46ea <fdevopen+0x88>
    46e2:	e0 93 41 24 	sts	0x2441, r30	; 0x802441 <__iob+0x4>
    46e6:	f0 93 42 24 	sts	0x2442, r31	; 0x802442 <__iob+0x5>
    46ea:	cf 01       	movw	r24, r30
    46ec:	df 91       	pop	r29
    46ee:	cf 91       	pop	r28
    46f0:	1f 91       	pop	r17
    46f2:	0f 91       	pop	r16
    46f4:	08 95       	ret

000046f6 <printf>:
    46f6:	cf 93       	push	r28
    46f8:	df 93       	push	r29
    46fa:	cd b7       	in	r28, 0x3d	; 61
    46fc:	de b7       	in	r29, 0x3e	; 62
    46fe:	ae 01       	movw	r20, r28
    4700:	4a 5f       	subi	r20, 0xFA	; 250
    4702:	5f 4f       	sbci	r21, 0xFF	; 255
    4704:	fa 01       	movw	r30, r20
    4706:	61 91       	ld	r22, Z+
    4708:	71 91       	ld	r23, Z+
    470a:	af 01       	movw	r20, r30
    470c:	80 91 3f 24 	lds	r24, 0x243F	; 0x80243f <__iob+0x2>
    4710:	90 91 40 24 	lds	r25, 0x2440	; 0x802440 <__iob+0x3>
    4714:	03 d0       	rcall	.+6      	; 0x471c <vfprintf>
    4716:	df 91       	pop	r29
    4718:	cf 91       	pop	r28
    471a:	08 95       	ret

0000471c <vfprintf>:
    471c:	2f 92       	push	r2
    471e:	3f 92       	push	r3
    4720:	4f 92       	push	r4
    4722:	5f 92       	push	r5
    4724:	6f 92       	push	r6
    4726:	7f 92       	push	r7
    4728:	8f 92       	push	r8
    472a:	9f 92       	push	r9
    472c:	af 92       	push	r10
    472e:	bf 92       	push	r11
    4730:	cf 92       	push	r12
    4732:	df 92       	push	r13
    4734:	ef 92       	push	r14
    4736:	ff 92       	push	r15
    4738:	0f 93       	push	r16
    473a:	1f 93       	push	r17
    473c:	cf 93       	push	r28
    473e:	df 93       	push	r29
    4740:	cd b7       	in	r28, 0x3d	; 61
    4742:	de b7       	in	r29, 0x3e	; 62
    4744:	2b 97       	sbiw	r28, 0x0b	; 11
    4746:	cd bf       	out	0x3d, r28	; 61
    4748:	de bf       	out	0x3e, r29	; 62
    474a:	6c 01       	movw	r12, r24
    474c:	7b 01       	movw	r14, r22
    474e:	8a 01       	movw	r16, r20
    4750:	fc 01       	movw	r30, r24
    4752:	16 82       	std	Z+6, r1	; 0x06
    4754:	17 82       	std	Z+7, r1	; 0x07
    4756:	83 81       	ldd	r24, Z+3	; 0x03
    4758:	81 ff       	sbrs	r24, 1
    475a:	bf c1       	rjmp	.+894    	; 0x4ada <vfprintf+0x3be>
    475c:	ce 01       	movw	r24, r28
    475e:	01 96       	adiw	r24, 0x01	; 1
    4760:	3c 01       	movw	r6, r24
    4762:	f6 01       	movw	r30, r12
    4764:	93 81       	ldd	r25, Z+3	; 0x03
    4766:	f7 01       	movw	r30, r14
    4768:	93 fd       	sbrc	r25, 3
    476a:	85 91       	lpm	r24, Z+
    476c:	93 ff       	sbrs	r25, 3
    476e:	81 91       	ld	r24, Z+
    4770:	7f 01       	movw	r14, r30
    4772:	88 23       	and	r24, r24
    4774:	09 f4       	brne	.+2      	; 0x4778 <vfprintf+0x5c>
    4776:	ad c1       	rjmp	.+858    	; 0x4ad2 <vfprintf+0x3b6>
    4778:	85 32       	cpi	r24, 0x25	; 37
    477a:	39 f4       	brne	.+14     	; 0x478a <vfprintf+0x6e>
    477c:	93 fd       	sbrc	r25, 3
    477e:	85 91       	lpm	r24, Z+
    4780:	93 ff       	sbrs	r25, 3
    4782:	81 91       	ld	r24, Z+
    4784:	7f 01       	movw	r14, r30
    4786:	85 32       	cpi	r24, 0x25	; 37
    4788:	21 f4       	brne	.+8      	; 0x4792 <vfprintf+0x76>
    478a:	b6 01       	movw	r22, r12
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	15 d3       	rcall	.+1578   	; 0x4dba <fputc>
    4790:	e8 cf       	rjmp	.-48     	; 0x4762 <vfprintf+0x46>
    4792:	91 2c       	mov	r9, r1
    4794:	21 2c       	mov	r2, r1
    4796:	31 2c       	mov	r3, r1
    4798:	ff e1       	ldi	r31, 0x1F	; 31
    479a:	f3 15       	cp	r31, r3
    479c:	d8 f0       	brcs	.+54     	; 0x47d4 <vfprintf+0xb8>
    479e:	8b 32       	cpi	r24, 0x2B	; 43
    47a0:	79 f0       	breq	.+30     	; 0x47c0 <vfprintf+0xa4>
    47a2:	38 f4       	brcc	.+14     	; 0x47b2 <vfprintf+0x96>
    47a4:	80 32       	cpi	r24, 0x20	; 32
    47a6:	79 f0       	breq	.+30     	; 0x47c6 <vfprintf+0xaa>
    47a8:	83 32       	cpi	r24, 0x23	; 35
    47aa:	a1 f4       	brne	.+40     	; 0x47d4 <vfprintf+0xb8>
    47ac:	23 2d       	mov	r18, r3
    47ae:	20 61       	ori	r18, 0x10	; 16
    47b0:	1d c0       	rjmp	.+58     	; 0x47ec <vfprintf+0xd0>
    47b2:	8d 32       	cpi	r24, 0x2D	; 45
    47b4:	61 f0       	breq	.+24     	; 0x47ce <vfprintf+0xb2>
    47b6:	80 33       	cpi	r24, 0x30	; 48
    47b8:	69 f4       	brne	.+26     	; 0x47d4 <vfprintf+0xb8>
    47ba:	23 2d       	mov	r18, r3
    47bc:	21 60       	ori	r18, 0x01	; 1
    47be:	16 c0       	rjmp	.+44     	; 0x47ec <vfprintf+0xd0>
    47c0:	83 2d       	mov	r24, r3
    47c2:	82 60       	ori	r24, 0x02	; 2
    47c4:	38 2e       	mov	r3, r24
    47c6:	e3 2d       	mov	r30, r3
    47c8:	e4 60       	ori	r30, 0x04	; 4
    47ca:	3e 2e       	mov	r3, r30
    47cc:	2a c0       	rjmp	.+84     	; 0x4822 <vfprintf+0x106>
    47ce:	f3 2d       	mov	r31, r3
    47d0:	f8 60       	ori	r31, 0x08	; 8
    47d2:	1d c0       	rjmp	.+58     	; 0x480e <vfprintf+0xf2>
    47d4:	37 fc       	sbrc	r3, 7
    47d6:	2d c0       	rjmp	.+90     	; 0x4832 <vfprintf+0x116>
    47d8:	20 ed       	ldi	r18, 0xD0	; 208
    47da:	28 0f       	add	r18, r24
    47dc:	2a 30       	cpi	r18, 0x0A	; 10
    47de:	40 f0       	brcs	.+16     	; 0x47f0 <vfprintf+0xd4>
    47e0:	8e 32       	cpi	r24, 0x2E	; 46
    47e2:	b9 f4       	brne	.+46     	; 0x4812 <vfprintf+0xf6>
    47e4:	36 fc       	sbrc	r3, 6
    47e6:	75 c1       	rjmp	.+746    	; 0x4ad2 <vfprintf+0x3b6>
    47e8:	23 2d       	mov	r18, r3
    47ea:	20 64       	ori	r18, 0x40	; 64
    47ec:	32 2e       	mov	r3, r18
    47ee:	19 c0       	rjmp	.+50     	; 0x4822 <vfprintf+0x106>
    47f0:	36 fe       	sbrs	r3, 6
    47f2:	06 c0       	rjmp	.+12     	; 0x4800 <vfprintf+0xe4>
    47f4:	8a e0       	ldi	r24, 0x0A	; 10
    47f6:	98 9e       	mul	r9, r24
    47f8:	20 0d       	add	r18, r0
    47fa:	11 24       	eor	r1, r1
    47fc:	92 2e       	mov	r9, r18
    47fe:	11 c0       	rjmp	.+34     	; 0x4822 <vfprintf+0x106>
    4800:	ea e0       	ldi	r30, 0x0A	; 10
    4802:	2e 9e       	mul	r2, r30
    4804:	20 0d       	add	r18, r0
    4806:	11 24       	eor	r1, r1
    4808:	22 2e       	mov	r2, r18
    480a:	f3 2d       	mov	r31, r3
    480c:	f0 62       	ori	r31, 0x20	; 32
    480e:	3f 2e       	mov	r3, r31
    4810:	08 c0       	rjmp	.+16     	; 0x4822 <vfprintf+0x106>
    4812:	8c 36       	cpi	r24, 0x6C	; 108
    4814:	21 f4       	brne	.+8      	; 0x481e <vfprintf+0x102>
    4816:	83 2d       	mov	r24, r3
    4818:	80 68       	ori	r24, 0x80	; 128
    481a:	38 2e       	mov	r3, r24
    481c:	02 c0       	rjmp	.+4      	; 0x4822 <vfprintf+0x106>
    481e:	88 36       	cpi	r24, 0x68	; 104
    4820:	41 f4       	brne	.+16     	; 0x4832 <vfprintf+0x116>
    4822:	f7 01       	movw	r30, r14
    4824:	93 fd       	sbrc	r25, 3
    4826:	85 91       	lpm	r24, Z+
    4828:	93 ff       	sbrs	r25, 3
    482a:	81 91       	ld	r24, Z+
    482c:	7f 01       	movw	r14, r30
    482e:	81 11       	cpse	r24, r1
    4830:	b3 cf       	rjmp	.-154    	; 0x4798 <vfprintf+0x7c>
    4832:	98 2f       	mov	r25, r24
    4834:	9f 7d       	andi	r25, 0xDF	; 223
    4836:	95 54       	subi	r25, 0x45	; 69
    4838:	93 30       	cpi	r25, 0x03	; 3
    483a:	28 f4       	brcc	.+10     	; 0x4846 <vfprintf+0x12a>
    483c:	0c 5f       	subi	r16, 0xFC	; 252
    483e:	1f 4f       	sbci	r17, 0xFF	; 255
    4840:	9f e3       	ldi	r25, 0x3F	; 63
    4842:	99 83       	std	Y+1, r25	; 0x01
    4844:	0d c0       	rjmp	.+26     	; 0x4860 <vfprintf+0x144>
    4846:	83 36       	cpi	r24, 0x63	; 99
    4848:	31 f0       	breq	.+12     	; 0x4856 <vfprintf+0x13a>
    484a:	83 37       	cpi	r24, 0x73	; 115
    484c:	71 f0       	breq	.+28     	; 0x486a <vfprintf+0x14e>
    484e:	83 35       	cpi	r24, 0x53	; 83
    4850:	09 f0       	breq	.+2      	; 0x4854 <vfprintf+0x138>
    4852:	55 c0       	rjmp	.+170    	; 0x48fe <vfprintf+0x1e2>
    4854:	20 c0       	rjmp	.+64     	; 0x4896 <vfprintf+0x17a>
    4856:	f8 01       	movw	r30, r16
    4858:	80 81       	ld	r24, Z
    485a:	89 83       	std	Y+1, r24	; 0x01
    485c:	0e 5f       	subi	r16, 0xFE	; 254
    485e:	1f 4f       	sbci	r17, 0xFF	; 255
    4860:	88 24       	eor	r8, r8
    4862:	83 94       	inc	r8
    4864:	91 2c       	mov	r9, r1
    4866:	53 01       	movw	r10, r6
    4868:	12 c0       	rjmp	.+36     	; 0x488e <vfprintf+0x172>
    486a:	28 01       	movw	r4, r16
    486c:	f2 e0       	ldi	r31, 0x02	; 2
    486e:	4f 0e       	add	r4, r31
    4870:	51 1c       	adc	r5, r1
    4872:	f8 01       	movw	r30, r16
    4874:	a0 80       	ld	r10, Z
    4876:	b1 80       	ldd	r11, Z+1	; 0x01
    4878:	36 fe       	sbrs	r3, 6
    487a:	03 c0       	rjmp	.+6      	; 0x4882 <vfprintf+0x166>
    487c:	69 2d       	mov	r22, r9
    487e:	70 e0       	ldi	r23, 0x00	; 0
    4880:	02 c0       	rjmp	.+4      	; 0x4886 <vfprintf+0x16a>
    4882:	6f ef       	ldi	r22, 0xFF	; 255
    4884:	7f ef       	ldi	r23, 0xFF	; 255
    4886:	c5 01       	movw	r24, r10
    4888:	8d d2       	rcall	.+1306   	; 0x4da4 <strnlen>
    488a:	4c 01       	movw	r8, r24
    488c:	82 01       	movw	r16, r4
    488e:	f3 2d       	mov	r31, r3
    4890:	ff 77       	andi	r31, 0x7F	; 127
    4892:	3f 2e       	mov	r3, r31
    4894:	15 c0       	rjmp	.+42     	; 0x48c0 <vfprintf+0x1a4>
    4896:	28 01       	movw	r4, r16
    4898:	22 e0       	ldi	r18, 0x02	; 2
    489a:	42 0e       	add	r4, r18
    489c:	51 1c       	adc	r5, r1
    489e:	f8 01       	movw	r30, r16
    48a0:	a0 80       	ld	r10, Z
    48a2:	b1 80       	ldd	r11, Z+1	; 0x01
    48a4:	36 fe       	sbrs	r3, 6
    48a6:	03 c0       	rjmp	.+6      	; 0x48ae <vfprintf+0x192>
    48a8:	69 2d       	mov	r22, r9
    48aa:	70 e0       	ldi	r23, 0x00	; 0
    48ac:	02 c0       	rjmp	.+4      	; 0x48b2 <vfprintf+0x196>
    48ae:	6f ef       	ldi	r22, 0xFF	; 255
    48b0:	7f ef       	ldi	r23, 0xFF	; 255
    48b2:	c5 01       	movw	r24, r10
    48b4:	65 d2       	rcall	.+1226   	; 0x4d80 <strnlen_P>
    48b6:	4c 01       	movw	r8, r24
    48b8:	f3 2d       	mov	r31, r3
    48ba:	f0 68       	ori	r31, 0x80	; 128
    48bc:	3f 2e       	mov	r3, r31
    48be:	82 01       	movw	r16, r4
    48c0:	33 fc       	sbrc	r3, 3
    48c2:	19 c0       	rjmp	.+50     	; 0x48f6 <vfprintf+0x1da>
    48c4:	82 2d       	mov	r24, r2
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	88 16       	cp	r8, r24
    48ca:	99 06       	cpc	r9, r25
    48cc:	a0 f4       	brcc	.+40     	; 0x48f6 <vfprintf+0x1da>
    48ce:	b6 01       	movw	r22, r12
    48d0:	80 e2       	ldi	r24, 0x20	; 32
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	72 d2       	rcall	.+1252   	; 0x4dba <fputc>
    48d6:	2a 94       	dec	r2
    48d8:	f5 cf       	rjmp	.-22     	; 0x48c4 <vfprintf+0x1a8>
    48da:	f5 01       	movw	r30, r10
    48dc:	37 fc       	sbrc	r3, 7
    48de:	85 91       	lpm	r24, Z+
    48e0:	37 fe       	sbrs	r3, 7
    48e2:	81 91       	ld	r24, Z+
    48e4:	5f 01       	movw	r10, r30
    48e6:	b6 01       	movw	r22, r12
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	67 d2       	rcall	.+1230   	; 0x4dba <fputc>
    48ec:	21 10       	cpse	r2, r1
    48ee:	2a 94       	dec	r2
    48f0:	21 e0       	ldi	r18, 0x01	; 1
    48f2:	82 1a       	sub	r8, r18
    48f4:	91 08       	sbc	r9, r1
    48f6:	81 14       	cp	r8, r1
    48f8:	91 04       	cpc	r9, r1
    48fa:	79 f7       	brne	.-34     	; 0x48da <vfprintf+0x1be>
    48fc:	e1 c0       	rjmp	.+450    	; 0x4ac0 <vfprintf+0x3a4>
    48fe:	84 36       	cpi	r24, 0x64	; 100
    4900:	11 f0       	breq	.+4      	; 0x4906 <vfprintf+0x1ea>
    4902:	89 36       	cpi	r24, 0x69	; 105
    4904:	39 f5       	brne	.+78     	; 0x4954 <vfprintf+0x238>
    4906:	f8 01       	movw	r30, r16
    4908:	37 fe       	sbrs	r3, 7
    490a:	07 c0       	rjmp	.+14     	; 0x491a <vfprintf+0x1fe>
    490c:	60 81       	ld	r22, Z
    490e:	71 81       	ldd	r23, Z+1	; 0x01
    4910:	82 81       	ldd	r24, Z+2	; 0x02
    4912:	93 81       	ldd	r25, Z+3	; 0x03
    4914:	0c 5f       	subi	r16, 0xFC	; 252
    4916:	1f 4f       	sbci	r17, 0xFF	; 255
    4918:	08 c0       	rjmp	.+16     	; 0x492a <vfprintf+0x20e>
    491a:	60 81       	ld	r22, Z
    491c:	71 81       	ldd	r23, Z+1	; 0x01
    491e:	07 2e       	mov	r0, r23
    4920:	00 0c       	add	r0, r0
    4922:	88 0b       	sbc	r24, r24
    4924:	99 0b       	sbc	r25, r25
    4926:	0e 5f       	subi	r16, 0xFE	; 254
    4928:	1f 4f       	sbci	r17, 0xFF	; 255
    492a:	f3 2d       	mov	r31, r3
    492c:	ff 76       	andi	r31, 0x6F	; 111
    492e:	3f 2e       	mov	r3, r31
    4930:	97 ff       	sbrs	r25, 7
    4932:	09 c0       	rjmp	.+18     	; 0x4946 <vfprintf+0x22a>
    4934:	90 95       	com	r25
    4936:	80 95       	com	r24
    4938:	70 95       	com	r23
    493a:	61 95       	neg	r22
    493c:	7f 4f       	sbci	r23, 0xFF	; 255
    493e:	8f 4f       	sbci	r24, 0xFF	; 255
    4940:	9f 4f       	sbci	r25, 0xFF	; 255
    4942:	f0 68       	ori	r31, 0x80	; 128
    4944:	3f 2e       	mov	r3, r31
    4946:	2a e0       	ldi	r18, 0x0A	; 10
    4948:	30 e0       	ldi	r19, 0x00	; 0
    494a:	a3 01       	movw	r20, r6
    494c:	72 d2       	rcall	.+1252   	; 0x4e32 <__ultoa_invert>
    494e:	88 2e       	mov	r8, r24
    4950:	86 18       	sub	r8, r6
    4952:	44 c0       	rjmp	.+136    	; 0x49dc <vfprintf+0x2c0>
    4954:	85 37       	cpi	r24, 0x75	; 117
    4956:	31 f4       	brne	.+12     	; 0x4964 <vfprintf+0x248>
    4958:	23 2d       	mov	r18, r3
    495a:	2f 7e       	andi	r18, 0xEF	; 239
    495c:	b2 2e       	mov	r11, r18
    495e:	2a e0       	ldi	r18, 0x0A	; 10
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	25 c0       	rjmp	.+74     	; 0x49ae <vfprintf+0x292>
    4964:	93 2d       	mov	r25, r3
    4966:	99 7f       	andi	r25, 0xF9	; 249
    4968:	b9 2e       	mov	r11, r25
    496a:	8f 36       	cpi	r24, 0x6F	; 111
    496c:	c1 f0       	breq	.+48     	; 0x499e <vfprintf+0x282>
    496e:	18 f4       	brcc	.+6      	; 0x4976 <vfprintf+0x25a>
    4970:	88 35       	cpi	r24, 0x58	; 88
    4972:	79 f0       	breq	.+30     	; 0x4992 <vfprintf+0x276>
    4974:	ae c0       	rjmp	.+348    	; 0x4ad2 <vfprintf+0x3b6>
    4976:	80 37       	cpi	r24, 0x70	; 112
    4978:	19 f0       	breq	.+6      	; 0x4980 <vfprintf+0x264>
    497a:	88 37       	cpi	r24, 0x78	; 120
    497c:	21 f0       	breq	.+8      	; 0x4986 <vfprintf+0x26a>
    497e:	a9 c0       	rjmp	.+338    	; 0x4ad2 <vfprintf+0x3b6>
    4980:	e9 2f       	mov	r30, r25
    4982:	e0 61       	ori	r30, 0x10	; 16
    4984:	be 2e       	mov	r11, r30
    4986:	b4 fe       	sbrs	r11, 4
    4988:	0d c0       	rjmp	.+26     	; 0x49a4 <vfprintf+0x288>
    498a:	fb 2d       	mov	r31, r11
    498c:	f4 60       	ori	r31, 0x04	; 4
    498e:	bf 2e       	mov	r11, r31
    4990:	09 c0       	rjmp	.+18     	; 0x49a4 <vfprintf+0x288>
    4992:	34 fe       	sbrs	r3, 4
    4994:	0a c0       	rjmp	.+20     	; 0x49aa <vfprintf+0x28e>
    4996:	29 2f       	mov	r18, r25
    4998:	26 60       	ori	r18, 0x06	; 6
    499a:	b2 2e       	mov	r11, r18
    499c:	06 c0       	rjmp	.+12     	; 0x49aa <vfprintf+0x28e>
    499e:	28 e0       	ldi	r18, 0x08	; 8
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	05 c0       	rjmp	.+10     	; 0x49ae <vfprintf+0x292>
    49a4:	20 e1       	ldi	r18, 0x10	; 16
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	02 c0       	rjmp	.+4      	; 0x49ae <vfprintf+0x292>
    49aa:	20 e1       	ldi	r18, 0x10	; 16
    49ac:	32 e0       	ldi	r19, 0x02	; 2
    49ae:	f8 01       	movw	r30, r16
    49b0:	b7 fe       	sbrs	r11, 7
    49b2:	07 c0       	rjmp	.+14     	; 0x49c2 <vfprintf+0x2a6>
    49b4:	60 81       	ld	r22, Z
    49b6:	71 81       	ldd	r23, Z+1	; 0x01
    49b8:	82 81       	ldd	r24, Z+2	; 0x02
    49ba:	93 81       	ldd	r25, Z+3	; 0x03
    49bc:	0c 5f       	subi	r16, 0xFC	; 252
    49be:	1f 4f       	sbci	r17, 0xFF	; 255
    49c0:	06 c0       	rjmp	.+12     	; 0x49ce <vfprintf+0x2b2>
    49c2:	60 81       	ld	r22, Z
    49c4:	71 81       	ldd	r23, Z+1	; 0x01
    49c6:	80 e0       	ldi	r24, 0x00	; 0
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	0e 5f       	subi	r16, 0xFE	; 254
    49cc:	1f 4f       	sbci	r17, 0xFF	; 255
    49ce:	a3 01       	movw	r20, r6
    49d0:	30 d2       	rcall	.+1120   	; 0x4e32 <__ultoa_invert>
    49d2:	88 2e       	mov	r8, r24
    49d4:	86 18       	sub	r8, r6
    49d6:	fb 2d       	mov	r31, r11
    49d8:	ff 77       	andi	r31, 0x7F	; 127
    49da:	3f 2e       	mov	r3, r31
    49dc:	36 fe       	sbrs	r3, 6
    49de:	0d c0       	rjmp	.+26     	; 0x49fa <vfprintf+0x2de>
    49e0:	23 2d       	mov	r18, r3
    49e2:	2e 7f       	andi	r18, 0xFE	; 254
    49e4:	a2 2e       	mov	r10, r18
    49e6:	89 14       	cp	r8, r9
    49e8:	58 f4       	brcc	.+22     	; 0x4a00 <vfprintf+0x2e4>
    49ea:	34 fe       	sbrs	r3, 4
    49ec:	0b c0       	rjmp	.+22     	; 0x4a04 <vfprintf+0x2e8>
    49ee:	32 fc       	sbrc	r3, 2
    49f0:	09 c0       	rjmp	.+18     	; 0x4a04 <vfprintf+0x2e8>
    49f2:	83 2d       	mov	r24, r3
    49f4:	8e 7e       	andi	r24, 0xEE	; 238
    49f6:	a8 2e       	mov	r10, r24
    49f8:	05 c0       	rjmp	.+10     	; 0x4a04 <vfprintf+0x2e8>
    49fa:	b8 2c       	mov	r11, r8
    49fc:	a3 2c       	mov	r10, r3
    49fe:	03 c0       	rjmp	.+6      	; 0x4a06 <vfprintf+0x2ea>
    4a00:	b8 2c       	mov	r11, r8
    4a02:	01 c0       	rjmp	.+2      	; 0x4a06 <vfprintf+0x2ea>
    4a04:	b9 2c       	mov	r11, r9
    4a06:	a4 fe       	sbrs	r10, 4
    4a08:	0f c0       	rjmp	.+30     	; 0x4a28 <vfprintf+0x30c>
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e8 0d       	add	r30, r8
    4a0e:	f1 1d       	adc	r31, r1
    4a10:	80 81       	ld	r24, Z
    4a12:	80 33       	cpi	r24, 0x30	; 48
    4a14:	21 f4       	brne	.+8      	; 0x4a1e <vfprintf+0x302>
    4a16:	9a 2d       	mov	r25, r10
    4a18:	99 7e       	andi	r25, 0xE9	; 233
    4a1a:	a9 2e       	mov	r10, r25
    4a1c:	09 c0       	rjmp	.+18     	; 0x4a30 <vfprintf+0x314>
    4a1e:	a2 fe       	sbrs	r10, 2
    4a20:	06 c0       	rjmp	.+12     	; 0x4a2e <vfprintf+0x312>
    4a22:	b3 94       	inc	r11
    4a24:	b3 94       	inc	r11
    4a26:	04 c0       	rjmp	.+8      	; 0x4a30 <vfprintf+0x314>
    4a28:	8a 2d       	mov	r24, r10
    4a2a:	86 78       	andi	r24, 0x86	; 134
    4a2c:	09 f0       	breq	.+2      	; 0x4a30 <vfprintf+0x314>
    4a2e:	b3 94       	inc	r11
    4a30:	a3 fc       	sbrc	r10, 3
    4a32:	10 c0       	rjmp	.+32     	; 0x4a54 <vfprintf+0x338>
    4a34:	a0 fe       	sbrs	r10, 0
    4a36:	06 c0       	rjmp	.+12     	; 0x4a44 <vfprintf+0x328>
    4a38:	b2 14       	cp	r11, r2
    4a3a:	80 f4       	brcc	.+32     	; 0x4a5c <vfprintf+0x340>
    4a3c:	28 0c       	add	r2, r8
    4a3e:	92 2c       	mov	r9, r2
    4a40:	9b 18       	sub	r9, r11
    4a42:	0d c0       	rjmp	.+26     	; 0x4a5e <vfprintf+0x342>
    4a44:	b2 14       	cp	r11, r2
    4a46:	58 f4       	brcc	.+22     	; 0x4a5e <vfprintf+0x342>
    4a48:	b6 01       	movw	r22, r12
    4a4a:	80 e2       	ldi	r24, 0x20	; 32
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	b5 d1       	rcall	.+874    	; 0x4dba <fputc>
    4a50:	b3 94       	inc	r11
    4a52:	f8 cf       	rjmp	.-16     	; 0x4a44 <vfprintf+0x328>
    4a54:	b2 14       	cp	r11, r2
    4a56:	18 f4       	brcc	.+6      	; 0x4a5e <vfprintf+0x342>
    4a58:	2b 18       	sub	r2, r11
    4a5a:	02 c0       	rjmp	.+4      	; 0x4a60 <vfprintf+0x344>
    4a5c:	98 2c       	mov	r9, r8
    4a5e:	21 2c       	mov	r2, r1
    4a60:	a4 fe       	sbrs	r10, 4
    4a62:	0f c0       	rjmp	.+30     	; 0x4a82 <vfprintf+0x366>
    4a64:	b6 01       	movw	r22, r12
    4a66:	80 e3       	ldi	r24, 0x30	; 48
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	a7 d1       	rcall	.+846    	; 0x4dba <fputc>
    4a6c:	a2 fe       	sbrs	r10, 2
    4a6e:	16 c0       	rjmp	.+44     	; 0x4a9c <vfprintf+0x380>
    4a70:	a1 fc       	sbrc	r10, 1
    4a72:	03 c0       	rjmp	.+6      	; 0x4a7a <vfprintf+0x35e>
    4a74:	88 e7       	ldi	r24, 0x78	; 120
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	02 c0       	rjmp	.+4      	; 0x4a7e <vfprintf+0x362>
    4a7a:	88 e5       	ldi	r24, 0x58	; 88
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	b6 01       	movw	r22, r12
    4a80:	0c c0       	rjmp	.+24     	; 0x4a9a <vfprintf+0x37e>
    4a82:	8a 2d       	mov	r24, r10
    4a84:	86 78       	andi	r24, 0x86	; 134
    4a86:	51 f0       	breq	.+20     	; 0x4a9c <vfprintf+0x380>
    4a88:	a1 fe       	sbrs	r10, 1
    4a8a:	02 c0       	rjmp	.+4      	; 0x4a90 <vfprintf+0x374>
    4a8c:	8b e2       	ldi	r24, 0x2B	; 43
    4a8e:	01 c0       	rjmp	.+2      	; 0x4a92 <vfprintf+0x376>
    4a90:	80 e2       	ldi	r24, 0x20	; 32
    4a92:	a7 fc       	sbrc	r10, 7
    4a94:	8d e2       	ldi	r24, 0x2D	; 45
    4a96:	b6 01       	movw	r22, r12
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	8f d1       	rcall	.+798    	; 0x4dba <fputc>
    4a9c:	89 14       	cp	r8, r9
    4a9e:	30 f4       	brcc	.+12     	; 0x4aac <vfprintf+0x390>
    4aa0:	b6 01       	movw	r22, r12
    4aa2:	80 e3       	ldi	r24, 0x30	; 48
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	89 d1       	rcall	.+786    	; 0x4dba <fputc>
    4aa8:	9a 94       	dec	r9
    4aaa:	f8 cf       	rjmp	.-16     	; 0x4a9c <vfprintf+0x380>
    4aac:	8a 94       	dec	r8
    4aae:	f3 01       	movw	r30, r6
    4ab0:	e8 0d       	add	r30, r8
    4ab2:	f1 1d       	adc	r31, r1
    4ab4:	80 81       	ld	r24, Z
    4ab6:	b6 01       	movw	r22, r12
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	7f d1       	rcall	.+766    	; 0x4dba <fputc>
    4abc:	81 10       	cpse	r8, r1
    4abe:	f6 cf       	rjmp	.-20     	; 0x4aac <vfprintf+0x390>
    4ac0:	22 20       	and	r2, r2
    4ac2:	09 f4       	brne	.+2      	; 0x4ac6 <vfprintf+0x3aa>
    4ac4:	4e ce       	rjmp	.-868    	; 0x4762 <vfprintf+0x46>
    4ac6:	b6 01       	movw	r22, r12
    4ac8:	80 e2       	ldi	r24, 0x20	; 32
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	76 d1       	rcall	.+748    	; 0x4dba <fputc>
    4ace:	2a 94       	dec	r2
    4ad0:	f7 cf       	rjmp	.-18     	; 0x4ac0 <vfprintf+0x3a4>
    4ad2:	f6 01       	movw	r30, r12
    4ad4:	86 81       	ldd	r24, Z+6	; 0x06
    4ad6:	97 81       	ldd	r25, Z+7	; 0x07
    4ad8:	02 c0       	rjmp	.+4      	; 0x4ade <vfprintf+0x3c2>
    4ada:	8f ef       	ldi	r24, 0xFF	; 255
    4adc:	9f ef       	ldi	r25, 0xFF	; 255
    4ade:	2b 96       	adiw	r28, 0x0b	; 11
    4ae0:	cd bf       	out	0x3d, r28	; 61
    4ae2:	de bf       	out	0x3e, r29	; 62
    4ae4:	df 91       	pop	r29
    4ae6:	cf 91       	pop	r28
    4ae8:	1f 91       	pop	r17
    4aea:	0f 91       	pop	r16
    4aec:	ff 90       	pop	r15
    4aee:	ef 90       	pop	r14
    4af0:	df 90       	pop	r13
    4af2:	cf 90       	pop	r12
    4af4:	bf 90       	pop	r11
    4af6:	af 90       	pop	r10
    4af8:	9f 90       	pop	r9
    4afa:	8f 90       	pop	r8
    4afc:	7f 90       	pop	r7
    4afe:	6f 90       	pop	r6
    4b00:	5f 90       	pop	r5
    4b02:	4f 90       	pop	r4
    4b04:	3f 90       	pop	r3
    4b06:	2f 90       	pop	r2
    4b08:	08 95       	ret

00004b0a <calloc>:
    4b0a:	0f 93       	push	r16
    4b0c:	1f 93       	push	r17
    4b0e:	cf 93       	push	r28
    4b10:	df 93       	push	r29
    4b12:	86 9f       	mul	r24, r22
    4b14:	80 01       	movw	r16, r0
    4b16:	87 9f       	mul	r24, r23
    4b18:	10 0d       	add	r17, r0
    4b1a:	96 9f       	mul	r25, r22
    4b1c:	10 0d       	add	r17, r0
    4b1e:	11 24       	eor	r1, r1
    4b20:	c8 01       	movw	r24, r16
    4b22:	0d d0       	rcall	.+26     	; 0x4b3e <malloc>
    4b24:	ec 01       	movw	r28, r24
    4b26:	00 97       	sbiw	r24, 0x00	; 0
    4b28:	21 f0       	breq	.+8      	; 0x4b32 <calloc+0x28>
    4b2a:	a8 01       	movw	r20, r16
    4b2c:	60 e0       	ldi	r22, 0x00	; 0
    4b2e:	70 e0       	ldi	r23, 0x00	; 0
    4b30:	32 d1       	rcall	.+612    	; 0x4d96 <memset>
    4b32:	ce 01       	movw	r24, r28
    4b34:	df 91       	pop	r29
    4b36:	cf 91       	pop	r28
    4b38:	1f 91       	pop	r17
    4b3a:	0f 91       	pop	r16
    4b3c:	08 95       	ret

00004b3e <malloc>:
    4b3e:	0f 93       	push	r16
    4b40:	1f 93       	push	r17
    4b42:	cf 93       	push	r28
    4b44:	df 93       	push	r29
    4b46:	82 30       	cpi	r24, 0x02	; 2
    4b48:	91 05       	cpc	r25, r1
    4b4a:	10 f4       	brcc	.+4      	; 0x4b50 <malloc+0x12>
    4b4c:	82 e0       	ldi	r24, 0x02	; 2
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	e0 91 45 24 	lds	r30, 0x2445	; 0x802445 <__flp>
    4b54:	f0 91 46 24 	lds	r31, 0x2446	; 0x802446 <__flp+0x1>
    4b58:	20 e0       	ldi	r18, 0x00	; 0
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	a0 e0       	ldi	r26, 0x00	; 0
    4b5e:	b0 e0       	ldi	r27, 0x00	; 0
    4b60:	30 97       	sbiw	r30, 0x00	; 0
    4b62:	19 f1       	breq	.+70     	; 0x4baa <malloc+0x6c>
    4b64:	40 81       	ld	r20, Z
    4b66:	51 81       	ldd	r21, Z+1	; 0x01
    4b68:	02 81       	ldd	r16, Z+2	; 0x02
    4b6a:	13 81       	ldd	r17, Z+3	; 0x03
    4b6c:	48 17       	cp	r20, r24
    4b6e:	59 07       	cpc	r21, r25
    4b70:	c8 f0       	brcs	.+50     	; 0x4ba4 <malloc+0x66>
    4b72:	84 17       	cp	r24, r20
    4b74:	95 07       	cpc	r25, r21
    4b76:	69 f4       	brne	.+26     	; 0x4b92 <malloc+0x54>
    4b78:	10 97       	sbiw	r26, 0x00	; 0
    4b7a:	31 f0       	breq	.+12     	; 0x4b88 <malloc+0x4a>
    4b7c:	12 96       	adiw	r26, 0x02	; 2
    4b7e:	0c 93       	st	X, r16
    4b80:	12 97       	sbiw	r26, 0x02	; 2
    4b82:	13 96       	adiw	r26, 0x03	; 3
    4b84:	1c 93       	st	X, r17
    4b86:	27 c0       	rjmp	.+78     	; 0x4bd6 <malloc+0x98>
    4b88:	00 93 45 24 	sts	0x2445, r16	; 0x802445 <__flp>
    4b8c:	10 93 46 24 	sts	0x2446, r17	; 0x802446 <__flp+0x1>
    4b90:	22 c0       	rjmp	.+68     	; 0x4bd6 <malloc+0x98>
    4b92:	21 15       	cp	r18, r1
    4b94:	31 05       	cpc	r19, r1
    4b96:	19 f0       	breq	.+6      	; 0x4b9e <malloc+0x60>
    4b98:	42 17       	cp	r20, r18
    4b9a:	53 07       	cpc	r21, r19
    4b9c:	18 f4       	brcc	.+6      	; 0x4ba4 <malloc+0x66>
    4b9e:	9a 01       	movw	r18, r20
    4ba0:	bd 01       	movw	r22, r26
    4ba2:	ef 01       	movw	r28, r30
    4ba4:	df 01       	movw	r26, r30
    4ba6:	f8 01       	movw	r30, r16
    4ba8:	db cf       	rjmp	.-74     	; 0x4b60 <malloc+0x22>
    4baa:	21 15       	cp	r18, r1
    4bac:	31 05       	cpc	r19, r1
    4bae:	f9 f0       	breq	.+62     	; 0x4bee <malloc+0xb0>
    4bb0:	28 1b       	sub	r18, r24
    4bb2:	39 0b       	sbc	r19, r25
    4bb4:	24 30       	cpi	r18, 0x04	; 4
    4bb6:	31 05       	cpc	r19, r1
    4bb8:	80 f4       	brcc	.+32     	; 0x4bda <malloc+0x9c>
    4bba:	8a 81       	ldd	r24, Y+2	; 0x02
    4bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bbe:	61 15       	cp	r22, r1
    4bc0:	71 05       	cpc	r23, r1
    4bc2:	21 f0       	breq	.+8      	; 0x4bcc <malloc+0x8e>
    4bc4:	fb 01       	movw	r30, r22
    4bc6:	82 83       	std	Z+2, r24	; 0x02
    4bc8:	93 83       	std	Z+3, r25	; 0x03
    4bca:	04 c0       	rjmp	.+8      	; 0x4bd4 <malloc+0x96>
    4bcc:	80 93 45 24 	sts	0x2445, r24	; 0x802445 <__flp>
    4bd0:	90 93 46 24 	sts	0x2446, r25	; 0x802446 <__flp+0x1>
    4bd4:	fe 01       	movw	r30, r28
    4bd6:	32 96       	adiw	r30, 0x02	; 2
    4bd8:	44 c0       	rjmp	.+136    	; 0x4c62 <malloc+0x124>
    4bda:	fe 01       	movw	r30, r28
    4bdc:	e2 0f       	add	r30, r18
    4bde:	f3 1f       	adc	r31, r19
    4be0:	81 93       	st	Z+, r24
    4be2:	91 93       	st	Z+, r25
    4be4:	22 50       	subi	r18, 0x02	; 2
    4be6:	31 09       	sbc	r19, r1
    4be8:	28 83       	st	Y, r18
    4bea:	39 83       	std	Y+1, r19	; 0x01
    4bec:	3a c0       	rjmp	.+116    	; 0x4c62 <malloc+0x124>
    4bee:	20 91 43 24 	lds	r18, 0x2443	; 0x802443 <__brkval>
    4bf2:	30 91 44 24 	lds	r19, 0x2444	; 0x802444 <__brkval+0x1>
    4bf6:	23 2b       	or	r18, r19
    4bf8:	41 f4       	brne	.+16     	; 0x4c0a <malloc+0xcc>
    4bfa:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4bfe:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4c02:	20 93 43 24 	sts	0x2443, r18	; 0x802443 <__brkval>
    4c06:	30 93 44 24 	sts	0x2444, r19	; 0x802444 <__brkval+0x1>
    4c0a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4c0e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4c12:	21 15       	cp	r18, r1
    4c14:	31 05       	cpc	r19, r1
    4c16:	41 f4       	brne	.+16     	; 0x4c28 <malloc+0xea>
    4c18:	2d b7       	in	r18, 0x3d	; 61
    4c1a:	3e b7       	in	r19, 0x3e	; 62
    4c1c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4c20:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4c24:	24 1b       	sub	r18, r20
    4c26:	35 0b       	sbc	r19, r21
    4c28:	e0 91 43 24 	lds	r30, 0x2443	; 0x802443 <__brkval>
    4c2c:	f0 91 44 24 	lds	r31, 0x2444	; 0x802444 <__brkval+0x1>
    4c30:	e2 17       	cp	r30, r18
    4c32:	f3 07       	cpc	r31, r19
    4c34:	a0 f4       	brcc	.+40     	; 0x4c5e <malloc+0x120>
    4c36:	2e 1b       	sub	r18, r30
    4c38:	3f 0b       	sbc	r19, r31
    4c3a:	28 17       	cp	r18, r24
    4c3c:	39 07       	cpc	r19, r25
    4c3e:	78 f0       	brcs	.+30     	; 0x4c5e <malloc+0x120>
    4c40:	ac 01       	movw	r20, r24
    4c42:	4e 5f       	subi	r20, 0xFE	; 254
    4c44:	5f 4f       	sbci	r21, 0xFF	; 255
    4c46:	24 17       	cp	r18, r20
    4c48:	35 07       	cpc	r19, r21
    4c4a:	48 f0       	brcs	.+18     	; 0x4c5e <malloc+0x120>
    4c4c:	4e 0f       	add	r20, r30
    4c4e:	5f 1f       	adc	r21, r31
    4c50:	40 93 43 24 	sts	0x2443, r20	; 0x802443 <__brkval>
    4c54:	50 93 44 24 	sts	0x2444, r21	; 0x802444 <__brkval+0x1>
    4c58:	81 93       	st	Z+, r24
    4c5a:	91 93       	st	Z+, r25
    4c5c:	02 c0       	rjmp	.+4      	; 0x4c62 <malloc+0x124>
    4c5e:	e0 e0       	ldi	r30, 0x00	; 0
    4c60:	f0 e0       	ldi	r31, 0x00	; 0
    4c62:	cf 01       	movw	r24, r30
    4c64:	df 91       	pop	r29
    4c66:	cf 91       	pop	r28
    4c68:	1f 91       	pop	r17
    4c6a:	0f 91       	pop	r16
    4c6c:	08 95       	ret

00004c6e <free>:
    4c6e:	cf 93       	push	r28
    4c70:	df 93       	push	r29
    4c72:	00 97       	sbiw	r24, 0x00	; 0
    4c74:	09 f4       	brne	.+2      	; 0x4c78 <free+0xa>
    4c76:	81 c0       	rjmp	.+258    	; 0x4d7a <free+0x10c>
    4c78:	fc 01       	movw	r30, r24
    4c7a:	32 97       	sbiw	r30, 0x02	; 2
    4c7c:	12 82       	std	Z+2, r1	; 0x02
    4c7e:	13 82       	std	Z+3, r1	; 0x03
    4c80:	a0 91 45 24 	lds	r26, 0x2445	; 0x802445 <__flp>
    4c84:	b0 91 46 24 	lds	r27, 0x2446	; 0x802446 <__flp+0x1>
    4c88:	10 97       	sbiw	r26, 0x00	; 0
    4c8a:	81 f4       	brne	.+32     	; 0x4cac <free+0x3e>
    4c8c:	20 81       	ld	r18, Z
    4c8e:	31 81       	ldd	r19, Z+1	; 0x01
    4c90:	82 0f       	add	r24, r18
    4c92:	93 1f       	adc	r25, r19
    4c94:	20 91 43 24 	lds	r18, 0x2443	; 0x802443 <__brkval>
    4c98:	30 91 44 24 	lds	r19, 0x2444	; 0x802444 <__brkval+0x1>
    4c9c:	28 17       	cp	r18, r24
    4c9e:	39 07       	cpc	r19, r25
    4ca0:	51 f5       	brne	.+84     	; 0x4cf6 <free+0x88>
    4ca2:	e0 93 43 24 	sts	0x2443, r30	; 0x802443 <__brkval>
    4ca6:	f0 93 44 24 	sts	0x2444, r31	; 0x802444 <__brkval+0x1>
    4caa:	67 c0       	rjmp	.+206    	; 0x4d7a <free+0x10c>
    4cac:	ed 01       	movw	r28, r26
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	ce 17       	cp	r28, r30
    4cb4:	df 07       	cpc	r29, r31
    4cb6:	40 f4       	brcc	.+16     	; 0x4cc8 <free+0x5a>
    4cb8:	4a 81       	ldd	r20, Y+2	; 0x02
    4cba:	5b 81       	ldd	r21, Y+3	; 0x03
    4cbc:	9e 01       	movw	r18, r28
    4cbe:	41 15       	cp	r20, r1
    4cc0:	51 05       	cpc	r21, r1
    4cc2:	f1 f0       	breq	.+60     	; 0x4d00 <free+0x92>
    4cc4:	ea 01       	movw	r28, r20
    4cc6:	f5 cf       	rjmp	.-22     	; 0x4cb2 <free+0x44>
    4cc8:	c2 83       	std	Z+2, r28	; 0x02
    4cca:	d3 83       	std	Z+3, r29	; 0x03
    4ccc:	40 81       	ld	r20, Z
    4cce:	51 81       	ldd	r21, Z+1	; 0x01
    4cd0:	84 0f       	add	r24, r20
    4cd2:	95 1f       	adc	r25, r21
    4cd4:	c8 17       	cp	r28, r24
    4cd6:	d9 07       	cpc	r29, r25
    4cd8:	59 f4       	brne	.+22     	; 0x4cf0 <free+0x82>
    4cda:	88 81       	ld	r24, Y
    4cdc:	99 81       	ldd	r25, Y+1	; 0x01
    4cde:	84 0f       	add	r24, r20
    4ce0:	95 1f       	adc	r25, r21
    4ce2:	02 96       	adiw	r24, 0x02	; 2
    4ce4:	80 83       	st	Z, r24
    4ce6:	91 83       	std	Z+1, r25	; 0x01
    4ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cea:	9b 81       	ldd	r25, Y+3	; 0x03
    4cec:	82 83       	std	Z+2, r24	; 0x02
    4cee:	93 83       	std	Z+3, r25	; 0x03
    4cf0:	21 15       	cp	r18, r1
    4cf2:	31 05       	cpc	r19, r1
    4cf4:	29 f4       	brne	.+10     	; 0x4d00 <free+0x92>
    4cf6:	e0 93 45 24 	sts	0x2445, r30	; 0x802445 <__flp>
    4cfa:	f0 93 46 24 	sts	0x2446, r31	; 0x802446 <__flp+0x1>
    4cfe:	3d c0       	rjmp	.+122    	; 0x4d7a <free+0x10c>
    4d00:	e9 01       	movw	r28, r18
    4d02:	ea 83       	std	Y+2, r30	; 0x02
    4d04:	fb 83       	std	Y+3, r31	; 0x03
    4d06:	49 91       	ld	r20, Y+
    4d08:	59 91       	ld	r21, Y+
    4d0a:	c4 0f       	add	r28, r20
    4d0c:	d5 1f       	adc	r29, r21
    4d0e:	ec 17       	cp	r30, r28
    4d10:	fd 07       	cpc	r31, r29
    4d12:	61 f4       	brne	.+24     	; 0x4d2c <free+0xbe>
    4d14:	80 81       	ld	r24, Z
    4d16:	91 81       	ldd	r25, Z+1	; 0x01
    4d18:	84 0f       	add	r24, r20
    4d1a:	95 1f       	adc	r25, r21
    4d1c:	02 96       	adiw	r24, 0x02	; 2
    4d1e:	e9 01       	movw	r28, r18
    4d20:	88 83       	st	Y, r24
    4d22:	99 83       	std	Y+1, r25	; 0x01
    4d24:	82 81       	ldd	r24, Z+2	; 0x02
    4d26:	93 81       	ldd	r25, Z+3	; 0x03
    4d28:	8a 83       	std	Y+2, r24	; 0x02
    4d2a:	9b 83       	std	Y+3, r25	; 0x03
    4d2c:	e0 e0       	ldi	r30, 0x00	; 0
    4d2e:	f0 e0       	ldi	r31, 0x00	; 0
    4d30:	12 96       	adiw	r26, 0x02	; 2
    4d32:	8d 91       	ld	r24, X+
    4d34:	9c 91       	ld	r25, X
    4d36:	13 97       	sbiw	r26, 0x03	; 3
    4d38:	00 97       	sbiw	r24, 0x00	; 0
    4d3a:	19 f0       	breq	.+6      	; 0x4d42 <free+0xd4>
    4d3c:	fd 01       	movw	r30, r26
    4d3e:	dc 01       	movw	r26, r24
    4d40:	f7 cf       	rjmp	.-18     	; 0x4d30 <free+0xc2>
    4d42:	8d 91       	ld	r24, X+
    4d44:	9c 91       	ld	r25, X
    4d46:	11 97       	sbiw	r26, 0x01	; 1
    4d48:	9d 01       	movw	r18, r26
    4d4a:	2e 5f       	subi	r18, 0xFE	; 254
    4d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d4e:	82 0f       	add	r24, r18
    4d50:	93 1f       	adc	r25, r19
    4d52:	20 91 43 24 	lds	r18, 0x2443	; 0x802443 <__brkval>
    4d56:	30 91 44 24 	lds	r19, 0x2444	; 0x802444 <__brkval+0x1>
    4d5a:	28 17       	cp	r18, r24
    4d5c:	39 07       	cpc	r19, r25
    4d5e:	69 f4       	brne	.+26     	; 0x4d7a <free+0x10c>
    4d60:	30 97       	sbiw	r30, 0x00	; 0
    4d62:	29 f4       	brne	.+10     	; 0x4d6e <free+0x100>
    4d64:	10 92 45 24 	sts	0x2445, r1	; 0x802445 <__flp>
    4d68:	10 92 46 24 	sts	0x2446, r1	; 0x802446 <__flp+0x1>
    4d6c:	02 c0       	rjmp	.+4      	; 0x4d72 <free+0x104>
    4d6e:	12 82       	std	Z+2, r1	; 0x02
    4d70:	13 82       	std	Z+3, r1	; 0x03
    4d72:	a0 93 43 24 	sts	0x2443, r26	; 0x802443 <__brkval>
    4d76:	b0 93 44 24 	sts	0x2444, r27	; 0x802444 <__brkval+0x1>
    4d7a:	df 91       	pop	r29
    4d7c:	cf 91       	pop	r28
    4d7e:	08 95       	ret

00004d80 <strnlen_P>:
    4d80:	fc 01       	movw	r30, r24
    4d82:	05 90       	lpm	r0, Z+
    4d84:	61 50       	subi	r22, 0x01	; 1
    4d86:	70 40       	sbci	r23, 0x00	; 0
    4d88:	01 10       	cpse	r0, r1
    4d8a:	d8 f7       	brcc	.-10     	; 0x4d82 <strnlen_P+0x2>
    4d8c:	80 95       	com	r24
    4d8e:	90 95       	com	r25
    4d90:	8e 0f       	add	r24, r30
    4d92:	9f 1f       	adc	r25, r31
    4d94:	08 95       	ret

00004d96 <memset>:
    4d96:	dc 01       	movw	r26, r24
    4d98:	01 c0       	rjmp	.+2      	; 0x4d9c <memset+0x6>
    4d9a:	6d 93       	st	X+, r22
    4d9c:	41 50       	subi	r20, 0x01	; 1
    4d9e:	50 40       	sbci	r21, 0x00	; 0
    4da0:	e0 f7       	brcc	.-8      	; 0x4d9a <memset+0x4>
    4da2:	08 95       	ret

00004da4 <strnlen>:
    4da4:	fc 01       	movw	r30, r24
    4da6:	61 50       	subi	r22, 0x01	; 1
    4da8:	70 40       	sbci	r23, 0x00	; 0
    4daa:	01 90       	ld	r0, Z+
    4dac:	01 10       	cpse	r0, r1
    4dae:	d8 f7       	brcc	.-10     	; 0x4da6 <strnlen+0x2>
    4db0:	80 95       	com	r24
    4db2:	90 95       	com	r25
    4db4:	8e 0f       	add	r24, r30
    4db6:	9f 1f       	adc	r25, r31
    4db8:	08 95       	ret

00004dba <fputc>:
    4dba:	0f 93       	push	r16
    4dbc:	1f 93       	push	r17
    4dbe:	cf 93       	push	r28
    4dc0:	df 93       	push	r29
    4dc2:	fb 01       	movw	r30, r22
    4dc4:	23 81       	ldd	r18, Z+3	; 0x03
    4dc6:	21 fd       	sbrc	r18, 1
    4dc8:	03 c0       	rjmp	.+6      	; 0x4dd0 <fputc+0x16>
    4dca:	8f ef       	ldi	r24, 0xFF	; 255
    4dcc:	9f ef       	ldi	r25, 0xFF	; 255
    4dce:	2c c0       	rjmp	.+88     	; 0x4e28 <fputc+0x6e>
    4dd0:	22 ff       	sbrs	r18, 2
    4dd2:	16 c0       	rjmp	.+44     	; 0x4e00 <fputc+0x46>
    4dd4:	46 81       	ldd	r20, Z+6	; 0x06
    4dd6:	57 81       	ldd	r21, Z+7	; 0x07
    4dd8:	24 81       	ldd	r18, Z+4	; 0x04
    4dda:	35 81       	ldd	r19, Z+5	; 0x05
    4ddc:	42 17       	cp	r20, r18
    4dde:	53 07       	cpc	r21, r19
    4de0:	44 f4       	brge	.+16     	; 0x4df2 <fputc+0x38>
    4de2:	a0 81       	ld	r26, Z
    4de4:	b1 81       	ldd	r27, Z+1	; 0x01
    4de6:	9d 01       	movw	r18, r26
    4de8:	2f 5f       	subi	r18, 0xFF	; 255
    4dea:	3f 4f       	sbci	r19, 0xFF	; 255
    4dec:	20 83       	st	Z, r18
    4dee:	31 83       	std	Z+1, r19	; 0x01
    4df0:	8c 93       	st	X, r24
    4df2:	26 81       	ldd	r18, Z+6	; 0x06
    4df4:	37 81       	ldd	r19, Z+7	; 0x07
    4df6:	2f 5f       	subi	r18, 0xFF	; 255
    4df8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dfa:	26 83       	std	Z+6, r18	; 0x06
    4dfc:	37 83       	std	Z+7, r19	; 0x07
    4dfe:	14 c0       	rjmp	.+40     	; 0x4e28 <fputc+0x6e>
    4e00:	8b 01       	movw	r16, r22
    4e02:	ec 01       	movw	r28, r24
    4e04:	fb 01       	movw	r30, r22
    4e06:	00 84       	ldd	r0, Z+8	; 0x08
    4e08:	f1 85       	ldd	r31, Z+9	; 0x09
    4e0a:	e0 2d       	mov	r30, r0
    4e0c:	19 95       	eicall
    4e0e:	89 2b       	or	r24, r25
    4e10:	e1 f6       	brne	.-72     	; 0x4dca <fputc+0x10>
    4e12:	d8 01       	movw	r26, r16
    4e14:	16 96       	adiw	r26, 0x06	; 6
    4e16:	8d 91       	ld	r24, X+
    4e18:	9c 91       	ld	r25, X
    4e1a:	17 97       	sbiw	r26, 0x07	; 7
    4e1c:	01 96       	adiw	r24, 0x01	; 1
    4e1e:	16 96       	adiw	r26, 0x06	; 6
    4e20:	8d 93       	st	X+, r24
    4e22:	9c 93       	st	X, r25
    4e24:	17 97       	sbiw	r26, 0x07	; 7
    4e26:	ce 01       	movw	r24, r28
    4e28:	df 91       	pop	r29
    4e2a:	cf 91       	pop	r28
    4e2c:	1f 91       	pop	r17
    4e2e:	0f 91       	pop	r16
    4e30:	08 95       	ret

00004e32 <__ultoa_invert>:
    4e32:	fa 01       	movw	r30, r20
    4e34:	aa 27       	eor	r26, r26
    4e36:	28 30       	cpi	r18, 0x08	; 8
    4e38:	51 f1       	breq	.+84     	; 0x4e8e <__ultoa_invert+0x5c>
    4e3a:	20 31       	cpi	r18, 0x10	; 16
    4e3c:	81 f1       	breq	.+96     	; 0x4e9e <__ultoa_invert+0x6c>
    4e3e:	e8 94       	clt
    4e40:	6f 93       	push	r22
    4e42:	6e 7f       	andi	r22, 0xFE	; 254
    4e44:	6e 5f       	subi	r22, 0xFE	; 254
    4e46:	7f 4f       	sbci	r23, 0xFF	; 255
    4e48:	8f 4f       	sbci	r24, 0xFF	; 255
    4e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e4c:	af 4f       	sbci	r26, 0xFF	; 255
    4e4e:	b1 e0       	ldi	r27, 0x01	; 1
    4e50:	3e d0       	rcall	.+124    	; 0x4ece <__ultoa_invert+0x9c>
    4e52:	b4 e0       	ldi	r27, 0x04	; 4
    4e54:	3c d0       	rcall	.+120    	; 0x4ece <__ultoa_invert+0x9c>
    4e56:	67 0f       	add	r22, r23
    4e58:	78 1f       	adc	r23, r24
    4e5a:	89 1f       	adc	r24, r25
    4e5c:	9a 1f       	adc	r25, r26
    4e5e:	a1 1d       	adc	r26, r1
    4e60:	68 0f       	add	r22, r24
    4e62:	79 1f       	adc	r23, r25
    4e64:	8a 1f       	adc	r24, r26
    4e66:	91 1d       	adc	r25, r1
    4e68:	a1 1d       	adc	r26, r1
    4e6a:	6a 0f       	add	r22, r26
    4e6c:	71 1d       	adc	r23, r1
    4e6e:	81 1d       	adc	r24, r1
    4e70:	91 1d       	adc	r25, r1
    4e72:	a1 1d       	adc	r26, r1
    4e74:	20 d0       	rcall	.+64     	; 0x4eb6 <__ultoa_invert+0x84>
    4e76:	09 f4       	brne	.+2      	; 0x4e7a <__ultoa_invert+0x48>
    4e78:	68 94       	set
    4e7a:	3f 91       	pop	r19
    4e7c:	2a e0       	ldi	r18, 0x0A	; 10
    4e7e:	26 9f       	mul	r18, r22
    4e80:	11 24       	eor	r1, r1
    4e82:	30 19       	sub	r19, r0
    4e84:	30 5d       	subi	r19, 0xD0	; 208
    4e86:	31 93       	st	Z+, r19
    4e88:	de f6       	brtc	.-74     	; 0x4e40 <__ultoa_invert+0xe>
    4e8a:	cf 01       	movw	r24, r30
    4e8c:	08 95       	ret
    4e8e:	46 2f       	mov	r20, r22
    4e90:	47 70       	andi	r20, 0x07	; 7
    4e92:	40 5d       	subi	r20, 0xD0	; 208
    4e94:	41 93       	st	Z+, r20
    4e96:	b3 e0       	ldi	r27, 0x03	; 3
    4e98:	0f d0       	rcall	.+30     	; 0x4eb8 <__ultoa_invert+0x86>
    4e9a:	c9 f7       	brne	.-14     	; 0x4e8e <__ultoa_invert+0x5c>
    4e9c:	f6 cf       	rjmp	.-20     	; 0x4e8a <__ultoa_invert+0x58>
    4e9e:	46 2f       	mov	r20, r22
    4ea0:	4f 70       	andi	r20, 0x0F	; 15
    4ea2:	40 5d       	subi	r20, 0xD0	; 208
    4ea4:	4a 33       	cpi	r20, 0x3A	; 58
    4ea6:	18 f0       	brcs	.+6      	; 0x4eae <__ultoa_invert+0x7c>
    4ea8:	49 5d       	subi	r20, 0xD9	; 217
    4eaa:	31 fd       	sbrc	r19, 1
    4eac:	40 52       	subi	r20, 0x20	; 32
    4eae:	41 93       	st	Z+, r20
    4eb0:	02 d0       	rcall	.+4      	; 0x4eb6 <__ultoa_invert+0x84>
    4eb2:	a9 f7       	brne	.-22     	; 0x4e9e <__ultoa_invert+0x6c>
    4eb4:	ea cf       	rjmp	.-44     	; 0x4e8a <__ultoa_invert+0x58>
    4eb6:	b4 e0       	ldi	r27, 0x04	; 4
    4eb8:	a6 95       	lsr	r26
    4eba:	97 95       	ror	r25
    4ebc:	87 95       	ror	r24
    4ebe:	77 95       	ror	r23
    4ec0:	67 95       	ror	r22
    4ec2:	ba 95       	dec	r27
    4ec4:	c9 f7       	brne	.-14     	; 0x4eb8 <__ultoa_invert+0x86>
    4ec6:	00 97       	sbiw	r24, 0x00	; 0
    4ec8:	61 05       	cpc	r22, r1
    4eca:	71 05       	cpc	r23, r1
    4ecc:	08 95       	ret
    4ece:	9b 01       	movw	r18, r22
    4ed0:	ac 01       	movw	r20, r24
    4ed2:	0a 2e       	mov	r0, r26
    4ed4:	06 94       	lsr	r0
    4ed6:	57 95       	ror	r21
    4ed8:	47 95       	ror	r20
    4eda:	37 95       	ror	r19
    4edc:	27 95       	ror	r18
    4ede:	ba 95       	dec	r27
    4ee0:	c9 f7       	brne	.-14     	; 0x4ed4 <__ultoa_invert+0xa2>
    4ee2:	62 0f       	add	r22, r18
    4ee4:	73 1f       	adc	r23, r19
    4ee6:	84 1f       	adc	r24, r20
    4ee8:	95 1f       	adc	r25, r21
    4eea:	a0 1d       	adc	r26, r0
    4eec:	08 95       	ret

00004eee <_exit>:
    4eee:	f8 94       	cli

00004ef0 <__stop_program>:
    4ef0:	ff cf       	rjmp	.-2      	; 0x4ef0 <__stop_program>
