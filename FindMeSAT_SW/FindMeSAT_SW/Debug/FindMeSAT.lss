
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00802000  00004bb4  00004c48  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fb  00802128  00802128  00004d70  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004d70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00004da0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000898  00000000  00000000  00004de8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00016549  00000000  00000000  00005680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006102  00000000  00000000  0001bbc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000bcbc  00000000  00000000  00021ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000022ec  00000000  00000000  0002d988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003cf07  00000000  00000000  0002fc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007dec  00000000  00000000  0006cb7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d8  00000000  00000000  00074968  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d959  00000000  00000000  00075240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__vector_11>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__vector_13>
      38:	16 c7       	rjmp	.+3628   	; 0xe66 <__vector_14>
      3a:	00 00       	nop
      3c:	41 c7       	rjmp	.+3714   	; 0xec0 <__vector_15>
      3e:	00 00       	nop
      40:	6c c7       	rjmp	.+3800   	; 0xf1a <__vector_16>
      42:	00 00       	nop
      44:	97 c7       	rjmp	.+3886   	; 0xf74 <__vector_17>
      46:	00 00       	nop
      48:	c2 c7       	rjmp	.+3972   	; 0xfce <__vector_18>
      4a:	00 00       	nop
      4c:	ed c7       	rjmp	.+4058   	; 0x1028 <__vector_19>
      4e:	00 00       	nop
      50:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_20>
      54:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_21>
      58:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__vector_22>
      5c:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_23>
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	39 c4       	rjmp	.+2162   	; 0x910 <__vector_39>
      9e:	00 00       	nop
      a0:	69 c4       	rjmp	.+2258   	; 0x974 <__vector_40>
      a2:	00 00       	nop
      a4:	99 c4       	rjmp	.+2354   	; 0x9d8 <__vector_41>
      a6:	00 00       	nop
      a8:	c9 c4       	rjmp	.+2450   	; 0xa3c <__vector_42>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__vector_46>
      bc:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__vector_47>
      c0:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_48>
      c4:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__vector_49>
      c8:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__vector_50>
      cc:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_51>
      d0:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__vector_52>
      d4:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__vector_53>
      d8:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__vector_54>
      dc:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__vector_55>
      e0:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_56>
      e4:	ba c0       	rjmp	.+372    	; 0x25a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b6 c0       	rjmp	.+364    	; 0x25a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b4 c0       	rjmp	.+360    	; 0x25a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b2 c0       	rjmp	.+356    	; 0x25a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b0 c0       	rjmp	.+352    	; 0x25a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ae c0       	rjmp	.+348    	; 0x25a <__bad_interrupt>
      fe:	00 00       	nop
     100:	ac c0       	rjmp	.+344    	; 0x25a <__bad_interrupt>
     102:	00 00       	nop
     104:	aa c0       	rjmp	.+340    	; 0x25a <__bad_interrupt>
     106:	00 00       	nop
     108:	a8 c0       	rjmp	.+336    	; 0x25a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a6 c0       	rjmp	.+332    	; 0x25a <__bad_interrupt>
     10e:	00 00       	nop
     110:	a4 c0       	rjmp	.+328    	; 0x25a <__bad_interrupt>
     112:	00 00       	nop
     114:	a2 c0       	rjmp	.+324    	; 0x25a <__bad_interrupt>
     116:	00 00       	nop
     118:	a0 c0       	rjmp	.+320    	; 0x25a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	31 c3       	rjmp	.+1634   	; 0x780 <__vector_71>
     11e:	00 00       	nop
     120:	61 c3       	rjmp	.+1730   	; 0x7e4 <__vector_72>
     122:	00 00       	nop
     124:	91 c3       	rjmp	.+1826   	; 0x848 <__vector_73>
     126:	00 00       	nop
     128:	c1 c3       	rjmp	.+1922   	; 0x8ac <__vector_74>
     12a:	00 00       	nop
     12c:	96 c0       	rjmp	.+300    	; 0x25a <__bad_interrupt>
     12e:	00 00       	nop
     130:	94 c0       	rjmp	.+296    	; 0x25a <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_77>
     138:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_78>
     13c:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_79>
     140:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__vector_80>
     144:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_81>
     148:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__vector_82>
     14c:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__vector_83>
     150:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <__vector_84>
     154:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__vector_85>
     158:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__vector_86>
     15c:	7e c0       	rjmp	.+252    	; 0x25a <__bad_interrupt>
     15e:	00 00       	nop
     160:	7c c0       	rjmp	.+248    	; 0x25a <__bad_interrupt>
     162:	00 00       	nop
     164:	7a c0       	rjmp	.+244    	; 0x25a <__bad_interrupt>
     166:	00 00       	nop
     168:	78 c0       	rjmp	.+240    	; 0x25a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	76 c0       	rjmp	.+236    	; 0x25a <__bad_interrupt>
     16e:	00 00       	nop
     170:	74 c0       	rjmp	.+232    	; 0x25a <__bad_interrupt>
     172:	00 00       	nop
     174:	72 c0       	rjmp	.+228    	; 0x25a <__bad_interrupt>
     176:	00 00       	nop
     178:	70 c0       	rjmp	.+224    	; 0x25a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6e c0       	rjmp	.+220    	; 0x25a <__bad_interrupt>
     17e:	00 00       	nop
     180:	6c c0       	rjmp	.+216    	; 0x25a <__bad_interrupt>
     182:	00 00       	nop
     184:	6a c0       	rjmp	.+212    	; 0x25a <__bad_interrupt>
     186:	00 00       	nop
     188:	68 c0       	rjmp	.+208    	; 0x25a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	66 c0       	rjmp	.+204    	; 0x25a <__bad_interrupt>
     18e:	00 00       	nop
     190:	64 c0       	rjmp	.+200    	; 0x25a <__bad_interrupt>
     192:	00 00       	nop
     194:	62 c0       	rjmp	.+196    	; 0x25a <__bad_interrupt>
     196:	00 00       	nop
     198:	60 c0       	rjmp	.+192    	; 0x25a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5e c0       	rjmp	.+188    	; 0x25a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5c c0       	rjmp	.+184    	; 0x25a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5a c0       	rjmp	.+180    	; 0x25a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	58 c0       	rjmp	.+176    	; 0x25a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	56 c0       	rjmp	.+172    	; 0x25a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__vector_108>
     1b4:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__vector_109>
     1b8:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__vector_110>
     1bc:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__vector_111>
     1c0:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__vector_112>
     1c4:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__vector_113>
     1c8:	48 c0       	rjmp	.+144    	; 0x25a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	46 c0       	rjmp	.+140    	; 0x25a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	44 c0       	rjmp	.+136    	; 0x25a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	42 c0       	rjmp	.+132    	; 0x25a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3c c0       	rjmp	.+120    	; 0x25a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3a c0       	rjmp	.+116    	; 0x25a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	36 c0       	rjmp	.+108    	; 0x25a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__vector_125>
     1f8:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__vector_126>
     1fc:	62 10       	cpse	r6, r2
     1fe:	65 10       	cpse	r6, r5
     200:	68 10       	cpse	r6, r8
     202:	6b 10       	cpse	r6, r11
     204:	6e 10       	cpse	r6, r14
     206:	71 10       	cpse	r7, r1
     208:	74 10       	cpse	r7, r4
     20a:	b3 17       	cp	r27, r19
     20c:	c6 17       	cp	r28, r22
     20e:	d9 17       	cp	r29, r25
     210:	ec 17       	cp	r30, r28
     212:	ff 17       	cp	r31, r31
     214:	12 18       	sub	r1, r2
     216:	25 18       	sub	r2, r5

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e5       	ldi	r29, 0x5F	; 95
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e4 eb       	ldi	r30, 0xB4	; 180
     230:	fb e4       	ldi	r31, 0x4B	; 75
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a8 32       	cpi	r26, 0x28	; 40
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	24 e2       	ldi	r18, 0x24	; 36
     244:	a8 e2       	ldi	r26, 0x28	; 40
     246:	b1 e2       	ldi	r27, 0x21	; 33
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a3 32       	cpi	r26, 0x23	; 35
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 cb 18 	call	0x3196	; 0x3196 <main>
     256:	0c 94 d8 25 	jmp	0x4bb0	; 0x4bb0 <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
     25c:	04 c0       	rjmp	.+8      	; 0x266 <__portable_avr_delay_cycles+0xa>
     25e:	61 50       	subi	r22, 0x01	; 1
     260:	71 09       	sbc	r23, r1
     262:	81 09       	sbc	r24, r1
     264:	91 09       	sbc	r25, r1
     266:	61 15       	cp	r22, r1
     268:	71 05       	cpc	r23, r1
     26a:	81 05       	cpc	r24, r1
     26c:	91 05       	cpc	r25, r1
     26e:	b9 f7       	brne	.-18     	; 0x25e <__portable_avr_delay_cycles+0x2>
     270:	08 95       	ret

00000272 <rtc_get_time>:
     272:	80 e1       	ldi	r24, 0x10	; 16
     274:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     278:	e0 e2       	ldi	r30, 0x20	; 32
     27a:	f4 e0       	ldi	r31, 0x04	; 4
     27c:	81 81       	ldd	r24, Z+1	; 0x01
     27e:	84 fd       	sbrc	r24, 4
     280:	fd cf       	rjmp	.-6      	; 0x27c <rtc_get_time+0xa>
     282:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
     286:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     28a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     28e:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     292:	08 95       	ret

00000294 <rtc_set_callback>:
     294:	80 93 f7 23 	sts	0x23F7, r24	; 0x8023f7 <rtc_data>
     298:	90 93 f8 23 	sts	0x23F8, r25	; 0x8023f8 <rtc_data+0x1>
     29c:	08 95       	ret

0000029e <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
     2aa:	c0 ef       	ldi	r28, 0xF0	; 240
     2ac:	d0 e0       	ldi	r29, 0x00	; 0
     2ae:	88 81       	ld	r24, Y
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	80 ef       	ldi	r24, 0xF0	; 240
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
     2be:	88 81       	ld	r24, Y
     2c0:	84 60       	ori	r24, 0x04	; 4
     2c2:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
     2c4:	69 ee       	ldi	r22, 0xE9	; 233
     2c6:	73 e0       	ldi	r23, 0x03	; 3
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	c7 df       	rcall	.-114    	; 0x25c <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
     2ce:	88 81       	ld	r24, Y
     2d0:	88 61       	ori	r24, 0x18	; 24
     2d2:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
     2d4:	e0 ef       	ldi	r30, 0xF0	; 240
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	83 ff       	sbrs	r24, 3
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
     2de:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     2e2:	e0 e2       	ldi	r30, 0x20	; 32
     2e4:	f4 e0       	ldi	r31, 0x04	; 4
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
     2e8:	80 fd       	sbrc	r24, 0
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
     2ec:	e0 e2       	ldi	r30, 0x20	; 32
     2ee:	f4 e0       	ldi	r31, 0x04	; 4
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
     2f4:	dc 01       	movw	r26, r24
     2f6:	80 87       	std	Z+8, r24	; 0x08
     2f8:	91 87       	std	Z+9, r25	; 0x09
     2fa:	a2 87       	std	Z+10, r26	; 0x0a
     2fc:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
     2fe:	14 82       	std	Z+4, r1	; 0x04
     300:	15 82       	std	Z+5, r1	; 0x05
     302:	16 82       	std	Z+6, r1	; 0x06
     304:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     306:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
     308:	80 fd       	sbrc	r24, 0
     30a:	fd cf       	rjmp	.-6      	; 0x306 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
     30c:	e0 e2       	ldi	r30, 0x20	; 32
     30e:	f4 e0       	ldi	r31, 0x04	; 4
     310:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     316:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
     318:	80 fd       	sbrc	r24, 0
     31a:	fd cf       	rjmp	.-6      	; 0x316 <rtc_init+0x78>
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	0b b6       	in	r0, 0x3b	; 59
     32e:	0f 92       	push	r0
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ef 93       	push	r30
     34a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
     34c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
     350:	c0 91 f7 23 	lds	r28, 0x23F7	; 0x8023f7 <rtc_data>
     354:	d0 91 f8 23 	lds	r29, 0x23F8	; 0x8023f8 <rtc_data+0x1>
     358:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
     35a:	19 f0       	breq	.+6      	; 0x362 <__vector_11+0x40>
     35c:	8a df       	rcall	.-236    	; 0x272 <rtc_get_time>
     35e:	fe 01       	movw	r30, r28
}
     360:	19 95       	eicall
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <__portable_avr_delay_cycles>:
	start_twi_lcd();
}

/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void start_twi_onboard()
{
     38c:	04 c0       	rjmp	.+8      	; 0x396 <__portable_avr_delay_cycles+0xa>
     38e:	61 50       	subi	r22, 0x01	; 1
     390:	71 09       	sbc	r23, r1
     392:	81 09       	sbc	r24, r1
     394:	91 09       	sbc	r25, r1
     396:	61 15       	cp	r22, r1
     398:	71 05       	cpc	r23, r1
     39a:	81 05       	cpc	r24, r1
     39c:	91 05       	cpc	r25, r1
     39e:	b9 f7       	brne	.-18     	; 0x38e <__portable_avr_delay_cycles+0x2>
     3a0:	08 95       	ret

000003a2 <twi_waitUntilReady>:
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	e6 e0       	ldi	r30, 0x06	; 6
     3b2:	f0 e2       	ldi	r31, 0x20	; 32
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	81 83       	std	Z+1, r24	; 0x01
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	84 83       	std	Z+4, r24	; 0x04
     3be:	95 83       	std	Z+5, r25	; 0x05
     3c0:	8f 01       	movw	r16, r30
     3c2:	cc 24       	eor	r12, r12
     3c4:	c3 94       	inc	r12
     3c6:	d1 2c       	mov	r13, r1
     3c8:	0f 2e       	mov	r0, r31
     3ca:	f3 eb       	ldi	r31, 0xB3	; 179
     3cc:	ef 2e       	mov	r14, r31
     3ce:	f2 e2       	ldi	r31, 0x22	; 34
     3d0:	ff 2e       	mov	r15, r31
     3d2:	f0 2d       	mov	r31, r0
     3d4:	f8 01       	movw	r30, r16
     3d6:	c0 86       	std	Z+8, r12	; 0x08
     3d8:	d1 86       	std	Z+9, r13	; 0x09
     3da:	41 e0       	ldi	r20, 0x01	; 1
     3dc:	b8 01       	movw	r22, r16
     3de:	80 e8       	ldi	r24, 0x80	; 128
     3e0:	94 e0       	ldi	r25, 0x04	; 4
     3e2:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
     3e6:	f7 01       	movw	r30, r14
     3e8:	c0 81       	ld	r28, Z
     3ea:	9c 2f       	mov	r25, r28
     3ec:	90 78       	andi	r25, 0x80	; 128
     3ee:	81 11       	cpse	r24, r1
     3f0:	0d c0       	rjmp	.+26     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f2:	91 f0       	breq	.+36     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3f4:	8c 2f       	mov	r24, r28
     3f6:	81 78       	andi	r24, 0x81	; 129
     3f8:	81 38       	cpi	r24, 0x81	; 129
     3fa:	29 f4       	brne	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fc:	65 ef       	ldi	r22, 0xF5	; 245
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	c3 df       	rcall	.-122    	; 0x38c <__portable_avr_delay_cycles>
     406:	c0 fd       	sbrc	r28, 0
     408:	e5 cf       	rjmp	.-54     	; 0x3d4 <twi_waitUntilReady+0x32>
     40a:	0c c0       	rjmp	.+24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     40c:	65 e0       	ldi	r22, 0x05	; 5
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	bb df       	rcall	.-138    	; 0x38c <__portable_avr_delay_cycles>
     416:	de cf       	rjmp	.-68     	; 0x3d4 <twi_waitUntilReady+0x32>
     418:	65 e0       	ldi	r22, 0x05	; 5
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	b5 df       	rcall	.-150    	; 0x38c <__portable_avr_delay_cycles>
     422:	d8 cf       	rjmp	.-80     	; 0x3d4 <twi_waitUntilReady+0x32>
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	df 90       	pop	r13
     430:	cf 90       	pop	r12
     432:	08 95       	ret

00000434 <twi_init>:
     434:	e0 e8       	ldi	r30, 0x80	; 128
     436:	f6 e0       	ldi	r31, 0x06	; 6
     438:	88 e3       	ldi	r24, 0x38	; 56
     43a:	80 8b       	std	Z+16, r24	; 0x10
     43c:	81 8b       	std	Z+17, r24	; 0x11
     43e:	e0 e4       	ldi	r30, 0x40	; 64
     440:	f6 e0       	ldi	r31, 0x06	; 6
     442:	80 8b       	std	Z+16, r24	; 0x10
     444:	81 8b       	std	Z+17, r24	; 0x11
     446:	08 95       	ret

00000448 <start_twi_lcd>:

}

/* TWI2 - LCD Port */
void start_twi_lcd()
{
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
     454:	e6 e0       	ldi	r30, 0x06	; 6
     456:	f0 e2       	ldi	r31, 0x20	; 32
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	84 83       	std	Z+4, r24	; 0x04
     462:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
     464:	80 87       	std	Z+8, r24	; 0x08
     466:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
     468:	41 e0       	ldi	r20, 0x01	; 1
     46a:	bf 01       	movw	r22, r30
     46c:	80 e8       	ldi	r24, 0x80	; 128
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
     474:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <twi2_m_data>
     478:	80 93 bb 22 	sts	0x22BB, r24	; 0x8022bb <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
     47c:	81 31       	cpi	r24, 0x11	; 17
     47e:	78 f1       	brcs	.+94     	; 0x4de <start_twi_lcd+0x96>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
     480:	c6 e0       	ldi	r28, 0x06	; 6
     482:	d0 e2       	ldi	r29, 0x20	; 32
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
     488:	0f 2e       	mov	r0, r31
     48a:	f3 eb       	ldi	r31, 0xB3	; 179
     48c:	ef 2e       	mov	r14, r31
     48e:	f2 e2       	ldi	r31, 0x22	; 34
     490:	ff 2e       	mov	r15, r31
     492:	f0 2d       	mov	r31, r0
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	f7 01       	movw	r30, r14
     498:	80 83       	st	Z, r24
		twi2_packet.length = 1;
     49a:	01 e0       	ldi	r16, 0x01	; 1
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	08 87       	std	Y+8, r16	; 0x08
     4a0:	19 87       	std	Y+9, r17	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	be 01       	movw	r22, r28
     4a6:	80 e8       	ldi	r24, 0x80	; 128
     4a8:	94 e0       	ldi	r25, 0x04	; 4
     4aa:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     4ae:	65 e0       	ldi	r22, 0x05	; 5
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0

		twi_waitUntilReady();
     4b6:	6a df       	rcall	.-300    	; 0x38c <__portable_avr_delay_cycles>
     4b8:	74 df       	rcall	.-280    	; 0x3a2 <twi_waitUntilReady>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
     4ba:	84 e1       	ldi	r24, 0x14	; 20
     4bc:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = GFX_PIXEL_SET;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	f7 01       	movw	r30, r14
     4c2:	80 83       	st	Z, r24
		twi2_packet.length = 1;
     4c4:	08 87       	std	Y+8, r16	; 0x08
     4c6:	19 87       	std	Y+9, r17	; 0x09
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	be 01       	movw	r22, r28
     4cc:	80 e8       	ldi	r24, 0x80	; 128
     4ce:	94 e0       	ldi	r25, 0x04	; 4
     4d0:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     4d4:	65 e0       	ldi	r22, 0x05	; 5
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	57 df       	rcall	.-338    	; 0x38c <__portable_avr_delay_cycles>
	}
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	08 95       	ret

000004ec <twi_start>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     4ec:	60 e4       	ldi	r22, 0x40	; 64
     4ee:	85 e0       	ldi	r24, 0x05	; 5
     4f0:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
#else
#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
     4f4:	6a e1       	ldi	r22, 0x1A	; 26
     4f6:	70 e2       	ldi	r23, 0x20	; 32
     4f8:	80 ea       	ldi	r24, 0xA0	; 160
     4fa:	94 e0       	ldi	r25, 0x04	; 4
     4fc:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
     500:	e0 ea       	ldi	r30, 0xA0	; 160
     502:	f4 e0       	ldi	r31, 0x04	; 4
     504:	81 81       	ldd	r24, Z+1	; 0x01
     506:	88 60       	ori	r24, 0x08	; 8
     508:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     50a:	60 e4       	ldi	r22, 0x40	; 64
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
#else
#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
     512:	61 e1       	ldi	r22, 0x11	; 17
     514:	70 e2       	ldi	r23, 0x20	; 32
     516:	80 e8       	ldi	r24, 0x80	; 128
     518:	94 e0       	ldi	r25, 0x04	; 4
     51a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <twi_master_init>
     51e:	e0 e8       	ldi	r30, 0x80	; 128
     520:	f4 e0       	ldi	r31, 0x04	; 4
     522:	81 81       	ldd	r24, Z+1	; 0x01
     524:	88 60       	ori	r24, 0x08	; 8
     526:	81 83       	std	Z+1, r24	; 0x01
	twi_master_enable(&TWI2_MASTER);
#endif
#endif

	// Give Smart-LCD some time being up and ready
	delay_s(2);
     528:	61 e8       	ldi	r22, 0x81	; 129
     52a:	76 e9       	ldi	r23, 0x96	; 150
     52c:	88 e9       	ldi	r24, 0x98	; 152
     52e:	90 e0       	ldi	r25, 0x00	; 0

	/* Start each TWI channel devices */
	start_twi_onboard();
	start_twi_lcd();
     530:	2d df       	rcall	.-422    	; 0x38c <__portable_avr_delay_cycles>
     532:	8a cf       	rjmp	.-236    	; 0x448 <start_twi_lcd>
     534:	08 95       	ret

00000536 <task_twi_onboard>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void task_twi_onboard(uint32_t now, uint32_t last)
{
     536:	08 95       	ret

00000538 <task_twi_lcd>:

}

/* TWI2 - LCD Port */
void task_twi_lcd(uint32_t now, uint32_t last)
{
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
	if (g_twi2_lcd_version >= 0x11) {
     546:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <g_twi2_lcd_version>
     54a:	81 31       	cpi	r24, 0x11	; 17
     54c:	08 f4       	brcc	.+2      	; 0x550 <task_twi_lcd+0x18>
		static uint8_t ofs = 0;

		twi_waitUntilReady();
     54e:	b2 c0       	rjmp	.+356    	; 0x6b4 <task_twi_lcd+0x17c>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
     550:	28 df       	rcall	.-432    	; 0x3a2 <twi_waitUntilReady>
     552:	06 e0       	ldi	r16, 0x06	; 6
     554:	10 e2       	ldi	r17, 0x20	; 32
     556:	68 94       	set
     558:	dd 24       	eor	r13, r13
     55a:	d5 f8       	bld	r13, 5
     55c:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 16 + ofs;
     55e:	d1 82       	std	Z+1, r13	; 0x01
     560:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     564:	80 5f       	subi	r24, 0xF0	; 240
     566:	c3 eb       	ldi	r28, 0xB3	; 179
     568:	d2 e2       	ldi	r29, 0x22	; 34
		twi2_m_data[1] = 16 + ofs;
     56a:	88 83       	st	Y, r24
		twi2_packet.length = 2;
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	68 94       	set
     570:	ee 24       	eor	r14, r14
     572:	e1 f8       	bld	r14, 1
     574:	f1 2c       	mov	r15, r1
     576:	e0 86       	std	Z+8, r14	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     578:	f1 86       	std	Z+9, r15	; 0x09
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	b8 01       	movw	r22, r16
     57e:	80 e8       	ldi	r24, 0x80	; 128
     580:	94 e0       	ldi	r25, 0x04	; 4
     582:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     586:	65 e0       	ldi	r22, 0x05	; 5
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	80 e0       	ldi	r24, 0x00	; 0

#if 1
		twi_waitUntilReady();
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	fe de       	rcall	.-516    	; 0x38c <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
     590:	08 df       	rcall	.-496    	; 0x3a2 <twi_waitUntilReady>
     592:	82 e3       	ldi	r24, 0x32	; 50
     594:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 150 + ofs;
     596:	81 83       	std	Z+1, r24	; 0x01
     598:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     59c:	96 e9       	ldi	r25, 0x96	; 150
     59e:	98 0f       	add	r25, r24
		twi2_m_data[1] =  60 + ofs;
     5a0:	98 83       	st	Y, r25
     5a2:	84 5c       	subi	r24, 0xC4	; 196
		twi2_packet.length = 2;
     5a4:	89 83       	std	Y+1, r24	; 0x01
     5a6:	e0 86       	std	Z+8, r14	; 0x08
     5a8:	f1 86       	std	Z+9, r15	; 0x09
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	b8 01       	movw	r22, r16
     5ae:	80 e8       	ldi	r24, 0x80	; 128
     5b0:	94 e0       	ldi	r25, 0x04	; 4
     5b2:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     5b6:	65 e0       	ldi	r22, 0x05	; 5
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	80 e0       	ldi	r24, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	e6 de       	rcall	.-564    	; 0x38c <__portable_avr_delay_cycles>
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_RECT;
     5c0:	f0 de       	rcall	.-544    	; 0x3a2 <twi_waitUntilReady>
     5c2:	84 e3       	ldi	r24, 0x34	; 52
     5c4:	f8 01       	movw	r30, r16
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_RECT;
# endif
		twi2_m_data[0] = 30;
     5c6:	81 83       	std	Z+1, r24	; 0x01
     5c8:	8e e1       	ldi	r24, 0x1E	; 30
		twi2_m_data[1] =  30;
     5ca:	88 83       	st	Y, r24
		twi2_packet.length = 2;
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	e0 86       	std	Z+8, r14	; 0x08
     5d0:	f1 86       	std	Z+9, r15	; 0x09
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	b8 01       	movw	r22, r16
     5d6:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
     5de:	65 e0       	ldi	r22, 0x05	; 5
     5e0:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_CIRC;
     5e6:	d2 de       	rcall	.-604    	; 0x38c <__portable_avr_delay_cycles>
     5e8:	dc de       	rcall	.-584    	; 0x3a2 <twi_waitUntilReady>
     5ea:	88 e3       	ldi	r24, 0x38	; 56
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC;
# endif
		twi2_m_data[0] = 20;
     5ec:	f8 01       	movw	r30, r16
     5ee:	81 83       	std	Z+1, r24	; 0x01
		twi2_packet.length = 1;
     5f0:	84 e1       	ldi	r24, 0x14	; 20
     5f2:	88 83       	st	Y, r24
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	80 87       	std	Z+8, r24	; 0x08
     5fa:	91 87       	std	Z+9, r25	; 0x09
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     600:	80 e8       	ldi	r24, 0x80	; 128
     602:	94 e0       	ldi	r25, 0x04	; 4
     604:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
     608:	65 e0       	ldi	r22, 0x05	; 5
     60a:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
     610:	bd de       	rcall	.-646    	; 0x38c <__portable_avr_delay_cycles>
     612:	c7 de       	rcall	.-626    	; 0x3a2 <twi_waitUntilReady>
		twi2_m_data[0] = 116 + ofs;
     614:	f8 01       	movw	r30, r16
     616:	d1 82       	std	Z+1, r13	; 0x01
     618:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     61c:	94 e7       	ldi	r25, 0x74	; 116
		twi2_m_data[1] =  16 + ofs;
     61e:	98 0f       	add	r25, r24
     620:	98 83       	st	Y, r25
		twi2_packet.length = 2;
     622:	80 5f       	subi	r24, 0xF0	; 240
     624:	89 83       	std	Y+1, r24	; 0x01
     626:	e0 86       	std	Z+8, r14	; 0x08
     628:	f1 86       	std	Z+9, r15	; 0x09
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     62e:	80 e8       	ldi	r24, 0x80	; 128
     630:	94 e0       	ldi	r25, 0x04	; 4
     632:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
     636:	65 e0       	ldi	r22, 0x05	; 5
     638:	70 e0       	ldi	r23, 0x00	; 0

		twi_waitUntilReady();
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
     63e:	a6 de       	rcall	.-692    	; 0x38c <__portable_avr_delay_cycles>
     640:	b0 de       	rcall	.-672    	; 0x3a2 <twi_waitUntilReady>
     642:	80 e3       	ldi	r24, 0x30	; 48
		twi2_m_data[0] = 4;
     644:	f8 01       	movw	r30, r16
     646:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[1] = 'A';
     648:	84 e0       	ldi	r24, 0x04	; 4
     64a:	88 83       	st	Y, r24
		twi2_m_data[2] = 'B';
     64c:	81 e4       	ldi	r24, 0x41	; 65
     64e:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[3] = 'C';
     650:	82 e4       	ldi	r24, 0x42	; 66
     652:	8a 83       	std	Y+2, r24	; 0x02
		twi2_m_data[4] = 'D';
     654:	83 e4       	ldi	r24, 0x43	; 67
     656:	8b 83       	std	Y+3, r24	; 0x03
		twi2_packet.length = twi2_m_data[0] + 1;
     658:	84 e4       	ldi	r24, 0x44	; 68
     65a:	8c 83       	std	Y+4, r24	; 0x04
     65c:	85 e0       	ldi	r24, 0x05	; 5
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	80 87       	std	Z+8, r24	; 0x08
     662:	91 87       	std	Z+9, r25	; 0x09
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	b8 01       	movw	r22, r16
     668:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     66a:	94 e0       	ldi	r25, 0x04	; 4
     66c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
     670:	65 e0       	ldi	r22, 0x05	; 5
     672:	70 e0       	ldi	r23, 0x00	; 0
#endif

		if (++ofs > 64) {
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	89 de       	rcall	.-750    	; 0x38c <__portable_avr_delay_cycles>
     67a:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     67e:	8f 5f       	subi	r24, 0xFF	; 255
     680:	81 34       	cpi	r24, 0x41	; 65
     682:	18 f4       	brcc	.+6      	; 0x68a <task_twi_lcd+0x152>
			ofs = 0;
     684:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <__data_end>

			twi_waitUntilReady();
     688:	32 c0       	rjmp	.+100    	; 0x6ee <task_twi_lcd+0x1b6>
     68a:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <__data_end>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
     68e:	89 de       	rcall	.-750    	; 0x3a2 <twi_waitUntilReady>
     690:	e6 e0       	ldi	r30, 0x06	; 6
			twi2_packet.length = 0;
     692:	f0 e2       	ldi	r31, 0x20	; 32
     694:	80 e1       	ldi	r24, 0x10	; 16
     696:	81 83       	std	Z+1, r24	; 0x01
     698:	10 86       	std	Z+8, r1	; 0x08
     69a:	11 86       	std	Z+9, r1	; 0x09
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	bf 01       	movw	r22, r30
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     6a0:	80 e8       	ldi	r24, 0x80	; 128
     6a2:	94 e0       	ldi	r25, 0x04	; 4
     6a4:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
     6a8:	65 e0       	ldi	r22, 0x05	; 5
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e0       	ldi	r24, 0x00	; 0
		}

	} else if (g_twi2_lcd_version == 0x10) {
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	6d de       	rcall	.-806    	; 0x38c <__portable_avr_delay_cycles>
#if 1
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi_waitUntilReady();
     6b2:	1d c0       	rjmp	.+58     	; 0x6ee <task_twi_lcd+0x1b6>
     6b4:	80 31       	cpi	r24, 0x10	; 16
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
     6b6:	d9 f4       	brne	.+54     	; 0x6ee <task_twi_lcd+0x1b6>
     6b8:	74 de       	rcall	.-792    	; 0x3a2 <twi_waitUntilReady>
     6ba:	e6 e0       	ldi	r30, 0x06	; 6
     6bc:	f0 e2       	ldi	r31, 0x20	; 32
		twi2_m_data[0] = 1;
     6be:	84 e8       	ldi	r24, 0x84	; 132
     6c0:	81 83       	std	Z+1, r24	; 0x01
     6c2:	a3 eb       	ldi	r26, 0xB3	; 179
     6c4:	b2 e2       	ldi	r27, 0x22	; 34
		twi2_m_data[1] = 128;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	8c 93       	st	X, r24
		twi2_packet.length = 2;
     6ca:	80 e8       	ldi	r24, 0x80	; 128
     6cc:	11 96       	adiw	r26, 0x01	; 1
     6ce:	8c 93       	st	X, r24
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	80 87       	std	Z+8, r24	; 0x08
     6d6:	91 87       	std	Z+9, r25	; 0x09
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	bf 01       	movw	r22, r30
     6dc:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
     6de:	94 e0       	ldi	r25, 0x04	; 4
     6e0:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <twi_master_transfer>
     6e4:	69 e8       	ldi	r22, 0x89	; 137
     6e6:	73 e1       	ldi	r23, 0x13	; 19
     6e8:	80 e0       	ldi	r24, 0x00	; 0
#endif
	}
}
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	4f de       	rcall	.-866    	; 0x38c <__portable_avr_delay_cycles>
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	df 90       	pop	r13
     6fc:	08 95       	ret

000006fe <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     6fe:	08 95       	ret

00000700 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     700:	81 15       	cp	r24, r1
     702:	22 e0       	ldi	r18, 0x02	; 2
     704:	92 07       	cpc	r25, r18
     706:	69 f4       	brne	.+26     	; 0x722 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     708:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <adca_enable_count>
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	98 0f       	add	r25, r24
     710:	90 93 2a 21 	sts	0x212A, r25	; 0x80212a <adca_enable_count>
     714:	81 11       	cpse	r24, r1
     716:	14 c0       	rjmp	.+40     	; 0x740 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     718:	62 e0       	ldi	r22, 0x02	; 2
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	0c 94 df 1b 	jmp	0x37be	; 0x37be <sysclk_enable_module>
     720:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     722:	80 34       	cpi	r24, 0x40	; 64
     724:	92 40       	sbci	r25, 0x02	; 2
     726:	61 f4       	brne	.+24     	; 0x740 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     728:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <adcb_enable_count>
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	98 0f       	add	r25, r24
     730:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <adcb_enable_count>
     734:	81 11       	cpse	r24, r1
     736:	04 c0       	rjmp	.+8      	; 0x740 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     738:	62 e0       	ldi	r22, 0x02	; 2
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	0c 94 df 1b 	jmp	0x37be	; 0x37be <sysclk_enable_module>
     740:	08 95       	ret

00000742 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     742:	81 15       	cp	r24, r1
     744:	22 e0       	ldi	r18, 0x02	; 2
     746:	92 07       	cpc	r25, r18
     748:	61 f4       	brne	.+24     	; 0x762 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     74a:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <adca_enable_count>
     74e:	81 50       	subi	r24, 0x01	; 1
     750:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <adca_enable_count>
     754:	81 11       	cpse	r24, r1
     756:	13 c0       	rjmp	.+38     	; 0x77e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     758:	62 e0       	ldi	r22, 0x02	; 2
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <sysclk_disable_module>
     760:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     762:	80 34       	cpi	r24, 0x40	; 64
     764:	92 40       	sbci	r25, 0x02	; 2
     766:	59 f4       	brne	.+22     	; 0x77e <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     768:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <adcb_enable_count>
     76c:	81 50       	subi	r24, 0x01	; 1
     76e:	80 93 29 21 	sts	0x2129, r24	; 0x802129 <adcb_enable_count>
     772:	81 11       	cpse	r24, r1
     774:	04 c0       	rjmp	.+8      	; 0x77e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     776:	62 e0       	ldi	r22, 0x02	; 2
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <sysclk_disable_module>
     77e:	08 95       	ret

00000780 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	0b b6       	in	r0, 0x3b	; 59
     78c:	0f 92       	push	r0
     78e:	2f 93       	push	r18
     790:	3f 93       	push	r19
     792:	4f 93       	push	r20
     794:	5f 93       	push	r21
     796:	6f 93       	push	r22
     798:	7f 93       	push	r23
     79a:	8f 93       	push	r24
     79c:	9f 93       	push	r25
     79e:	af 93       	push	r26
     7a0:	bf 93       	push	r27
     7a2:	ef 93       	push	r30
     7a4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     7a6:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     7aa:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     7ae:	e0 91 fb 23 	lds	r30, 0x23FB	; 0x8023fb <adca_callback>
     7b2:	f0 91 fc 23 	lds	r31, 0x23FC	; 0x8023fc <adca_callback+0x1>
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	19 95       	eicall
}
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	bf 91       	pop	r27
     7c4:	af 91       	pop	r26
     7c6:	9f 91       	pop	r25
     7c8:	8f 91       	pop	r24
     7ca:	7f 91       	pop	r23
     7cc:	6f 91       	pop	r22
     7ce:	5f 91       	pop	r21
     7d0:	4f 91       	pop	r20
     7d2:	3f 91       	pop	r19
     7d4:	2f 91       	pop	r18
     7d6:	0f 90       	pop	r0
     7d8:	0b be       	out	0x3b, r0	; 59
     7da:	0f 90       	pop	r0
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	0f 90       	pop	r0
     7e0:	1f 90       	pop	r1
     7e2:	18 95       	reti

000007e4 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	0b b6       	in	r0, 0x3b	; 59
     7f0:	0f 92       	push	r0
     7f2:	2f 93       	push	r18
     7f4:	3f 93       	push	r19
     7f6:	4f 93       	push	r20
     7f8:	5f 93       	push	r21
     7fa:	6f 93       	push	r22
     7fc:	7f 93       	push	r23
     7fe:	8f 93       	push	r24
     800:	9f 93       	push	r25
     802:	af 93       	push	r26
     804:	bf 93       	push	r27
     806:	ef 93       	push	r30
     808:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     80a:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     80e:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     812:	e0 91 fb 23 	lds	r30, 0x23FB	; 0x8023fb <adca_callback>
     816:	f0 91 fc 23 	lds	r31, 0x23FC	; 0x8023fc <adca_callback+0x1>
     81a:	62 e0       	ldi	r22, 0x02	; 2
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	19 95       	eicall
}
     822:	ff 91       	pop	r31
     824:	ef 91       	pop	r30
     826:	bf 91       	pop	r27
     828:	af 91       	pop	r26
     82a:	9f 91       	pop	r25
     82c:	8f 91       	pop	r24
     82e:	7f 91       	pop	r23
     830:	6f 91       	pop	r22
     832:	5f 91       	pop	r21
     834:	4f 91       	pop	r20
     836:	3f 91       	pop	r19
     838:	2f 91       	pop	r18
     83a:	0f 90       	pop	r0
     83c:	0b be       	out	0x3b, r0	; 59
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	0b b6       	in	r0, 0x3b	; 59
     854:	0f 92       	push	r0
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     86e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     872:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     876:	e0 91 fb 23 	lds	r30, 0x23FB	; 0x8023fb <adca_callback>
     87a:	f0 91 fc 23 	lds	r31, 0x23FC	; 0x8023fc <adca_callback+0x1>
     87e:	64 e0       	ldi	r22, 0x04	; 4
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	19 95       	eicall
}
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0b be       	out	0x3b, r0	; 59
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	0b b6       	in	r0, 0x3b	; 59
     8b8:	0f 92       	push	r0
     8ba:	2f 93       	push	r18
     8bc:	3f 93       	push	r19
     8be:	4f 93       	push	r20
     8c0:	5f 93       	push	r21
     8c2:	6f 93       	push	r22
     8c4:	7f 93       	push	r23
     8c6:	8f 93       	push	r24
     8c8:	9f 93       	push	r25
     8ca:	af 93       	push	r26
     8cc:	bf 93       	push	r27
     8ce:	ef 93       	push	r30
     8d0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     8d2:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     8d6:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     8da:	e0 91 fb 23 	lds	r30, 0x23FB	; 0x8023fb <adca_callback>
     8de:	f0 91 fc 23 	lds	r31, 0x23FC	; 0x8023fc <adca_callback+0x1>
     8e2:	68 e0       	ldi	r22, 0x08	; 8
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	19 95       	eicall
}
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	0b be       	out	0x3b, r0	; 59
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	0b b6       	in	r0, 0x3b	; 59
     91c:	0f 92       	push	r0
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	4f 93       	push	r20
     924:	5f 93       	push	r21
     926:	6f 93       	push	r22
     928:	7f 93       	push	r23
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
     92e:	af 93       	push	r26
     930:	bf 93       	push	r27
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     936:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     93a:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     93e:	e0 91 f9 23 	lds	r30, 0x23F9	; 0x8023f9 <adcb_callback>
     942:	f0 91 fa 23 	lds	r31, 0x23FA	; 0x8023fa <adcb_callback+0x1>
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	80 e4       	ldi	r24, 0x40	; 64
     94a:	92 e0       	ldi	r25, 0x02	; 2
     94c:	19 95       	eicall
}
     94e:	ff 91       	pop	r31
     950:	ef 91       	pop	r30
     952:	bf 91       	pop	r27
     954:	af 91       	pop	r26
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	7f 91       	pop	r23
     95c:	6f 91       	pop	r22
     95e:	5f 91       	pop	r21
     960:	4f 91       	pop	r20
     962:	3f 91       	pop	r19
     964:	2f 91       	pop	r18
     966:	0f 90       	pop	r0
     968:	0b be       	out	0x3b, r0	; 59
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	0b b6       	in	r0, 0x3b	; 59
     980:	0f 92       	push	r0
     982:	2f 93       	push	r18
     984:	3f 93       	push	r19
     986:	4f 93       	push	r20
     988:	5f 93       	push	r21
     98a:	6f 93       	push	r22
     98c:	7f 93       	push	r23
     98e:	8f 93       	push	r24
     990:	9f 93       	push	r25
     992:	af 93       	push	r26
     994:	bf 93       	push	r27
     996:	ef 93       	push	r30
     998:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     99a:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     99e:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     9a2:	e0 91 f9 23 	lds	r30, 0x23F9	; 0x8023f9 <adcb_callback>
     9a6:	f0 91 fa 23 	lds	r31, 0x23FA	; 0x8023fa <adcb_callback+0x1>
     9aa:	62 e0       	ldi	r22, 0x02	; 2
     9ac:	80 e4       	ldi	r24, 0x40	; 64
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	19 95       	eicall
}
     9b2:	ff 91       	pop	r31
     9b4:	ef 91       	pop	r30
     9b6:	bf 91       	pop	r27
     9b8:	af 91       	pop	r26
     9ba:	9f 91       	pop	r25
     9bc:	8f 91       	pop	r24
     9be:	7f 91       	pop	r23
     9c0:	6f 91       	pop	r22
     9c2:	5f 91       	pop	r21
     9c4:	4f 91       	pop	r20
     9c6:	3f 91       	pop	r19
     9c8:	2f 91       	pop	r18
     9ca:	0f 90       	pop	r0
     9cc:	0b be       	out	0x3b, r0	; 59
     9ce:	0f 90       	pop	r0
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	0f 90       	pop	r0
     9d4:	1f 90       	pop	r1
     9d6:	18 95       	reti

000009d8 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	11 24       	eor	r1, r1
     9e2:	0b b6       	in	r0, 0x3b	; 59
     9e4:	0f 92       	push	r0
     9e6:	2f 93       	push	r18
     9e8:	3f 93       	push	r19
     9ea:	4f 93       	push	r20
     9ec:	5f 93       	push	r21
     9ee:	6f 93       	push	r22
     9f0:	7f 93       	push	r23
     9f2:	8f 93       	push	r24
     9f4:	9f 93       	push	r25
     9f6:	af 93       	push	r26
     9f8:	bf 93       	push	r27
     9fa:	ef 93       	push	r30
     9fc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     9fe:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     a02:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     a06:	e0 91 f9 23 	lds	r30, 0x23F9	; 0x8023f9 <adcb_callback>
     a0a:	f0 91 fa 23 	lds	r31, 0x23FA	; 0x8023fa <adcb_callback+0x1>
     a0e:	64 e0       	ldi	r22, 0x04	; 4
     a10:	80 e4       	ldi	r24, 0x40	; 64
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	19 95       	eicall
}
     a16:	ff 91       	pop	r31
     a18:	ef 91       	pop	r30
     a1a:	bf 91       	pop	r27
     a1c:	af 91       	pop	r26
     a1e:	9f 91       	pop	r25
     a20:	8f 91       	pop	r24
     a22:	7f 91       	pop	r23
     a24:	6f 91       	pop	r22
     a26:	5f 91       	pop	r21
     a28:	4f 91       	pop	r20
     a2a:	3f 91       	pop	r19
     a2c:	2f 91       	pop	r18
     a2e:	0f 90       	pop	r0
     a30:	0b be       	out	0x3b, r0	; 59
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     a3c:	1f 92       	push	r1
     a3e:	0f 92       	push	r0
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	0f 92       	push	r0
     a44:	11 24       	eor	r1, r1
     a46:	0b b6       	in	r0, 0x3b	; 59
     a48:	0f 92       	push	r0
     a4a:	2f 93       	push	r18
     a4c:	3f 93       	push	r19
     a4e:	4f 93       	push	r20
     a50:	5f 93       	push	r21
     a52:	6f 93       	push	r22
     a54:	7f 93       	push	r23
     a56:	8f 93       	push	r24
     a58:	9f 93       	push	r25
     a5a:	af 93       	push	r26
     a5c:	bf 93       	push	r27
     a5e:	ef 93       	push	r30
     a60:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     a62:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     a66:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     a6a:	e0 91 f9 23 	lds	r30, 0x23F9	; 0x8023f9 <adcb_callback>
     a6e:	f0 91 fa 23 	lds	r31, 0x23FA	; 0x8023fa <adcb_callback+0x1>
     a72:	68 e0       	ldi	r22, 0x08	; 8
     a74:	80 e4       	ldi	r24, 0x40	; 64
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	19 95       	eicall
}
     a7a:	ff 91       	pop	r31
     a7c:	ef 91       	pop	r30
     a7e:	bf 91       	pop	r27
     a80:	af 91       	pop	r26
     a82:	9f 91       	pop	r25
     a84:	8f 91       	pop	r24
     a86:	7f 91       	pop	r23
     a88:	6f 91       	pop	r22
     a8a:	5f 91       	pop	r21
     a8c:	4f 91       	pop	r20
     a8e:	3f 91       	pop	r19
     a90:	2f 91       	pop	r18
     a92:	0f 90       	pop	r0
     a94:	0b be       	out	0x3b, r0	; 59
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	0f 90       	pop	r0
     a9c:	1f 90       	pop	r1
     a9e:	18 95       	reti

00000aa0 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     aa0:	bf 92       	push	r11
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	1f 92       	push	r1
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	8c 01       	movw	r16, r24
     aba:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     abc:	81 15       	cp	r24, r1
     abe:	22 e0       	ldi	r18, 0x02	; 2
     ac0:	92 07       	cpc	r25, r18
     ac2:	81 f4       	brne	.+32     	; 0xae4 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     ac4:	61 e2       	ldi	r22, 0x21	; 33
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     ace:	c8 2e       	mov	r12, r24
     ad0:	d1 2c       	mov	r13, r1
     ad2:	60 e2       	ldi	r22, 0x20	; 32
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     adc:	dc 2c       	mov	r13, r12
     ade:	cc 24       	eor	r12, r12
     ae0:	c8 2a       	or	r12, r24
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     ae4:	80 34       	cpi	r24, 0x40	; 64
     ae6:	92 40       	sbci	r25, 0x02	; 2
     ae8:	d1 f5       	brne	.+116    	; 0xb5e <adc_write_configuration+0xbe>
     aea:	65 e2       	ldi	r22, 0x25	; 37
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     af4:	c8 2e       	mov	r12, r24
     af6:	d1 2c       	mov	r13, r1
     af8:	64 e2       	ldi	r22, 0x24	; 36
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     b02:	dc 2c       	mov	r13, r12
     b04:	cc 24       	eor	r12, r12
     b06:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b08:	8f b7       	in	r24, 0x3f	; 63
     b0a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b0c:	f8 94       	cli
	return flags;
     b0e:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     b10:	c8 01       	movw	r24, r16
     b12:	f6 dd       	rcall	.-1044   	; 0x700 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     b14:	f8 01       	movw	r30, r16
     b16:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	90 83       	st	Z, r25
	adc->CAL = cal;
     b1c:	c4 86       	std	Z+12, r12	; 0x0c
     b1e:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     b20:	f7 01       	movw	r30, r14
     b22:	25 81       	ldd	r18, Z+5	; 0x05
     b24:	36 81       	ldd	r19, Z+6	; 0x06
     b26:	f8 01       	movw	r30, r16
     b28:	20 8f       	std	Z+24, r18	; 0x18
     b2a:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     b2c:	f7 01       	movw	r30, r14
     b2e:	92 81       	ldd	r25, Z+2	; 0x02
     b30:	f8 01       	movw	r30, r16
     b32:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     b34:	f7 01       	movw	r30, r14
     b36:	94 81       	ldd	r25, Z+4	; 0x04
     b38:	f8 01       	movw	r30, r16
     b3a:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     b3c:	f7 01       	movw	r30, r14
     b3e:	93 81       	ldd	r25, Z+3	; 0x03
     b40:	f8 01       	movw	r30, r16
     b42:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     b44:	f7 01       	movw	r30, r14
     b46:	91 81       	ldd	r25, Z+1	; 0x01
     b48:	f8 01       	movw	r30, r16
     b4a:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     b4c:	81 70       	andi	r24, 0x01	; 1
     b4e:	f7 01       	movw	r30, r14
     b50:	90 81       	ld	r25, Z
     b52:	89 2b       	or	r24, r25
     b54:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     b56:	80 83       	st	Z, r24
     b58:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b5a:	f3 dd       	rcall	.-1050   	; 0x742 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     b5c:	bf be       	out	0x3f, r11	; 63
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	bf 90       	pop	r11
     b72:	08 95       	ret

00000b74 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     b74:	df 92       	push	r13
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	1f 92       	push	r1
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	8c 01       	movw	r16, r24
     b8a:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b8c:	8f b7       	in	r24, 0x3f	; 63
     b8e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b90:	f8 94       	cli
	return flags;
     b92:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     b94:	c8 01       	movw	r24, r16
     b96:	b4 dd       	rcall	.-1176   	; 0x700 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     b98:	f8 01       	movw	r30, r16
     b9a:	80 81       	ld	r24, Z
     b9c:	80 7c       	andi	r24, 0xC0	; 192
     b9e:	f7 01       	movw	r30, r14
     ba0:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     ba2:	f8 01       	movw	r30, r16
     ba4:	80 8d       	ldd	r24, Z+24	; 0x18
     ba6:	91 8d       	ldd	r25, Z+25	; 0x19
     ba8:	f7 01       	movw	r30, r14
     baa:	85 83       	std	Z+5, r24	; 0x05
     bac:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     bae:	f8 01       	movw	r30, r16
     bb0:	82 81       	ldd	r24, Z+2	; 0x02
     bb2:	f7 01       	movw	r30, r14
     bb4:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     bb6:	f8 01       	movw	r30, r16
     bb8:	84 81       	ldd	r24, Z+4	; 0x04
     bba:	f7 01       	movw	r30, r14
     bbc:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     bbe:	f8 01       	movw	r30, r16
     bc0:	83 81       	ldd	r24, Z+3	; 0x03
     bc2:	f7 01       	movw	r30, r14
     bc4:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     bc6:	f8 01       	movw	r30, r16
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     bcc:	81 83       	std	Z+1, r24	; 0x01
     bce:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bd0:	b8 dd       	rcall	.-1168   	; 0x742 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     bd2:	df be       	out	0x3f, r13	; 63
     bd4:	0f 90       	pop	r0
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	08 95       	ret

00000be6 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     be6:	af 92       	push	r10
     be8:	bf 92       	push	r11
     bea:	cf 92       	push	r12
     bec:	df 92       	push	r13
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	1f 92       	push	r1
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	6c 01       	movw	r12, r24
     c02:	b6 2e       	mov	r11, r22
     c04:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c06:	86 2f       	mov	r24, r22
     c08:	83 70       	andi	r24, 0x03	; 3
     c0a:	29 f4       	brne	.+10     	; 0xc16 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     c0c:	96 2f       	mov	r25, r22
     c0e:	96 95       	lsr	r25
     c10:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c16:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     c18:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     c1a:	90 ff       	sbrs	r25, 0
		index++;
     c1c:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     c1e:	86 01       	movw	r16, r12
     c20:	00 5e       	subi	r16, 0xE0	; 224
     c22:	1f 4f       	sbci	r17, 0xFF	; 255
     c24:	98 e0       	ldi	r25, 0x08	; 8
     c26:	89 9f       	mul	r24, r25
     c28:	00 0d       	add	r16, r0
     c2a:	11 1d       	adc	r17, r1
     c2c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c2e:	8f b7       	in	r24, 0x3f	; 63
     c30:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c32:	f8 94       	cli
	return flags;
     c34:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     c36:	c6 01       	movw	r24, r12
     c38:	63 dd       	rcall	.-1338   	; 0x700 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     c3a:	f7 01       	movw	r30, r14
     c3c:	80 81       	ld	r24, Z
     c3e:	f8 01       	movw	r30, r16
     c40:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     c42:	f7 01       	movw	r30, r14
     c44:	82 81       	ldd	r24, Z+2	; 0x02
     c46:	f8 01       	movw	r30, r16
     c48:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     c4a:	f7 01       	movw	r30, r14
     c4c:	81 81       	ldd	r24, Z+1	; 0x01
     c4e:	f8 01       	movw	r30, r16
     c50:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     c52:	b0 fe       	sbrs	r11, 0
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     c56:	f7 01       	movw	r30, r14
     c58:	83 81       	ldd	r24, Z+3	; 0x03
     c5a:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     c5c:	86 83       	std	Z+6, r24	; 0x06
     c5e:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c60:	70 dd       	rcall	.-1312   	; 0x742 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     c62:	af be       	out	0x3f, r10	; 63
     c64:	0f 90       	pop	r0
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
     c76:	bf 90       	pop	r11
     c78:	af 90       	pop	r10
     c7a:	08 95       	ret

00000c7c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     c7c:	af 92       	push	r10
     c7e:	bf 92       	push	r11
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	1f 92       	push	r1
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	6c 01       	movw	r12, r24
     c98:	b6 2e       	mov	r11, r22
     c9a:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c9c:	86 2f       	mov	r24, r22
     c9e:	83 70       	andi	r24, 0x03	; 3
     ca0:	29 f4       	brne	.+10     	; 0xcac <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     ca2:	96 2f       	mov	r25, r22
     ca4:	96 95       	lsr	r25
     ca6:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     cac:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     cae:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     cb0:	90 ff       	sbrs	r25, 0
		index++;
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     cb4:	86 01       	movw	r16, r12
     cb6:	00 5e       	subi	r16, 0xE0	; 224
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
     cba:	98 e0       	ldi	r25, 0x08	; 8
     cbc:	89 9f       	mul	r24, r25
     cbe:	00 0d       	add	r16, r0
     cc0:	11 1d       	adc	r17, r1
     cc2:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cc4:	8f b7       	in	r24, 0x3f	; 63
     cc6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     cc8:	f8 94       	cli
	return flags;
     cca:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     ccc:	c6 01       	movw	r24, r12
     cce:	18 dd       	rcall	.-1488   	; 0x700 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     cd0:	f8 01       	movw	r30, r16
     cd2:	80 81       	ld	r24, Z
     cd4:	f7 01       	movw	r30, r14
     cd6:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     cd8:	f8 01       	movw	r30, r16
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	f7 01       	movw	r30, r14
     cde:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     ce0:	f8 01       	movw	r30, r16
     ce2:	81 81       	ldd	r24, Z+1	; 0x01
     ce4:	f7 01       	movw	r30, r14
     ce6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     ce8:	b0 fe       	sbrs	r11, 0
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     cec:	f8 01       	movw	r30, r16
     cee:	86 81       	ldd	r24, Z+6	; 0x06
     cf0:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     cf2:	83 83       	std	Z+3, r24	; 0x03
     cf4:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cf6:	25 dd       	rcall	.-1462   	; 0x742 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     cf8:	af be       	out	0x3f, r10	; 63
     cfa:	0f 90       	pop	r0
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	bf 90       	pop	r11
     d0e:	af 90       	pop	r10
     d10:	08 95       	ret

00000d12 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
     d12:	80 32       	cpi	r24, 0x20	; 32
     d14:	93 40       	sbci	r25, 0x03	; 3
     d16:	61 f4       	brne	.+24     	; 0xd30 <dac_enable_clock+0x1e>
     d18:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <dacb_enable_count>
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	98 0f       	add	r25, r24
     d20:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <dacb_enable_count>
     d24:	81 11       	cpse	r24, r1
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <dac_enable_clock+0x1e>
     d28:	64 e0       	ldi	r22, 0x04	; 4
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	0c 94 df 1b 	jmp	0x37be	; 0x37be <sysclk_enable_module>
     d30:	08 95       	ret

00000d32 <dac_disable_clock>:
     d32:	80 32       	cpi	r24, 0x20	; 32
     d34:	93 40       	sbci	r25, 0x03	; 3
     d36:	59 f4       	brne	.+22     	; 0xd4e <dac_disable_clock+0x1c>
     d38:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <dacb_enable_count>
     d3c:	81 50       	subi	r24, 0x01	; 1
     d3e:	80 93 2b 21 	sts	0x212B, r24	; 0x80212b <dacb_enable_count>
     d42:	81 11       	cpse	r24, r1
     d44:	04 c0       	rjmp	.+8      	; 0xd4e <dac_disable_clock+0x1c>
     d46:	64 e0       	ldi	r22, 0x04	; 4
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <sysclk_disable_module>
     d4e:	08 95       	ret

00000d50 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	1f 92       	push	r1
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
     d6c:	80 32       	cpi	r24, 0x20	; 32
     d6e:	23 e0       	ldi	r18, 0x03	; 3
     d70:	92 07       	cpc	r25, r18
     d72:	09 f0       	breq	.+2      	; 0xd76 <dac_write_configuration+0x26>
     d74:	3c c0       	rjmp	.+120    	; 0xdee <dac_write_configuration+0x9e>
     d76:	7b 01       	movw	r14, r22
     d78:	8c 01       	movw	r16, r24
     d7a:	63 e3       	ldi	r22, 0x33	; 51
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
     d84:	98 2e       	mov	r9, r24
     d86:	62 e3       	ldi	r22, 0x32	; 50
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
     d90:	a8 2e       	mov	r10, r24
     d92:	67 e3       	ldi	r22, 0x37	; 55
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
     d9c:	b8 2e       	mov	r11, r24
     d9e:	66 e3       	ldi	r22, 0x36	; 54
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
     da8:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     daa:	8f b7       	in	r24, 0x3f	; 63
     dac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     dae:	f8 94       	cli
	return flags;
     db0:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     db2:	c8 01       	movw	r24, r16
     db4:	ae df       	rcall	.-164    	; 0xd12 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
     db6:	f8 01       	movw	r30, r16
     db8:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
     dba:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
     dbc:	f7 01       	movw	r30, r14
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	f8 01       	movw	r30, r16
     dc2:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
     dc4:	f7 01       	movw	r30, r14
     dc6:	92 81       	ldd	r25, Z+2	; 0x02
     dc8:	f8 01       	movw	r30, r16
     dca:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
     dcc:	f7 01       	movw	r30, r14
     dce:	93 81       	ldd	r25, Z+3	; 0x03
     dd0:	f8 01       	movw	r30, r16
     dd2:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
     dd4:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
     dd6:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
     dd8:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
     dda:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
     ddc:	81 70       	andi	r24, 0x01	; 1
     dde:	f7 01       	movw	r30, r14
     de0:	90 81       	ld	r25, Z
     de2:	89 2b       	or	r24, r25
     de4:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
     de6:	80 83       	st	Z, r24
     de8:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     dea:	a3 df       	rcall	.-186    	; 0xd32 <dac_disable_clock>
	cpu_irq_restore(flags);
}
     dec:	df be       	out	0x3f, r13	; 63
     dee:	0f 90       	pop	r0
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	df 90       	pop	r13
     dfe:	cf 90       	pop	r12
     e00:	bf 90       	pop	r11
     e02:	af 90       	pop	r10
     e04:	9f 90       	pop	r9
     e06:	08 95       	ret

00000e08 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	1f 92       	push	r1
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	8c 01       	movw	r16, r24
     e1e:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e20:	8f b7       	in	r24, 0x3f	; 63
     e22:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e24:	f8 94       	cli
	return flags;
     e26:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     e28:	c8 01       	movw	r24, r16
     e2a:	73 df       	rcall	.-282    	; 0xd12 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
     e2c:	f8 01       	movw	r30, r16
     e2e:	80 81       	ld	r24, Z
     e30:	8e 7f       	andi	r24, 0xFE	; 254
     e32:	f7 01       	movw	r30, r14
     e34:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
     e36:	f8 01       	movw	r30, r16
     e38:	81 81       	ldd	r24, Z+1	; 0x01
     e3a:	f7 01       	movw	r30, r14
     e3c:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
     e3e:	f8 01       	movw	r30, r16
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	f7 01       	movw	r30, r14
     e44:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
     e46:	f8 01       	movw	r30, r16
     e48:	83 81       	ldd	r24, Z+3	; 0x03
     e4a:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
     e4c:	83 83       	std	Z+3, r24	; 0x03
     e4e:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e50:	70 df       	rcall	.-288    	; 0xd32 <dac_disable_clock>
	cpu_irq_restore(flags);
}
     e52:	df be       	out	0x3f, r13	; 63
     e54:	0f 90       	pop	r0
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	08 95       	ret

00000e66 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	0b b6       	in	r0, 0x3b	; 59
     e72:	0f 92       	push	r0
     e74:	2f 93       	push	r18
     e76:	3f 93       	push	r19
     e78:	4f 93       	push	r20
     e7a:	5f 93       	push	r21
     e7c:	6f 93       	push	r22
     e7e:	7f 93       	push	r23
     e80:	8f 93       	push	r24
     e82:	9f 93       	push	r25
     e84:	af 93       	push	r26
     e86:	bf 93       	push	r27
     e88:	ef 93       	push	r30
     e8a:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     e8c:	e0 91 72 21 	lds	r30, 0x2172	; 0x802172 <tc_tcc0_ovf_callback>
     e90:	f0 91 73 21 	lds	r31, 0x2173	; 0x802173 <tc_tcc0_ovf_callback+0x1>
     e94:	30 97       	sbiw	r30, 0x00	; 0
     e96:	09 f0       	breq	.+2      	; 0xe9a <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     e98:	19 95       	eicall
	}
}
     e9a:	ff 91       	pop	r31
     e9c:	ef 91       	pop	r30
     e9e:	bf 91       	pop	r27
     ea0:	af 91       	pop	r26
     ea2:	9f 91       	pop	r25
     ea4:	8f 91       	pop	r24
     ea6:	7f 91       	pop	r23
     ea8:	6f 91       	pop	r22
     eaa:	5f 91       	pop	r21
     eac:	4f 91       	pop	r20
     eae:	3f 91       	pop	r19
     eb0:	2f 91       	pop	r18
     eb2:	0f 90       	pop	r0
     eb4:	0b be       	out	0x3b, r0	; 59
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     ec0:	1f 92       	push	r1
     ec2:	0f 92       	push	r0
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	0b b6       	in	r0, 0x3b	; 59
     ecc:	0f 92       	push	r0
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     ee6:	e0 91 70 21 	lds	r30, 0x2170	; 0x802170 <tc_tcc0_err_callback>
     eea:	f0 91 71 21 	lds	r31, 0x2171	; 0x802171 <tc_tcc0_err_callback+0x1>
     eee:	30 97       	sbiw	r30, 0x00	; 0
     ef0:	09 f0       	breq	.+2      	; 0xef4 <__vector_15+0x34>
		tc_tcc0_err_callback();
     ef2:	19 95       	eicall
	}
}
     ef4:	ff 91       	pop	r31
     ef6:	ef 91       	pop	r30
     ef8:	bf 91       	pop	r27
     efa:	af 91       	pop	r26
     efc:	9f 91       	pop	r25
     efe:	8f 91       	pop	r24
     f00:	7f 91       	pop	r23
     f02:	6f 91       	pop	r22
     f04:	5f 91       	pop	r21
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0b be       	out	0x3b, r0	; 59
     f10:	0f 90       	pop	r0
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	0f 90       	pop	r0
     f16:	1f 90       	pop	r1
     f18:	18 95       	reti

00000f1a <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     f1a:	1f 92       	push	r1
     f1c:	0f 92       	push	r0
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	0f 92       	push	r0
     f22:	11 24       	eor	r1, r1
     f24:	0b b6       	in	r0, 0x3b	; 59
     f26:	0f 92       	push	r0
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     f40:	e0 91 6e 21 	lds	r30, 0x216E	; 0x80216e <tc_tcc0_cca_callback>
     f44:	f0 91 6f 21 	lds	r31, 0x216F	; 0x80216f <tc_tcc0_cca_callback+0x1>
     f48:	30 97       	sbiw	r30, 0x00	; 0
     f4a:	09 f0       	breq	.+2      	; 0xf4e <__vector_16+0x34>
		tc_tcc0_cca_callback();
     f4c:	19 95       	eicall
	}
}
     f4e:	ff 91       	pop	r31
     f50:	ef 91       	pop	r30
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0b be       	out	0x3b, r0	; 59
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	0f 90       	pop	r0
     f70:	1f 90       	pop	r1
     f72:	18 95       	reti

00000f74 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	0b b6       	in	r0, 0x3b	; 59
     f80:	0f 92       	push	r0
     f82:	2f 93       	push	r18
     f84:	3f 93       	push	r19
     f86:	4f 93       	push	r20
     f88:	5f 93       	push	r21
     f8a:	6f 93       	push	r22
     f8c:	7f 93       	push	r23
     f8e:	8f 93       	push	r24
     f90:	9f 93       	push	r25
     f92:	af 93       	push	r26
     f94:	bf 93       	push	r27
     f96:	ef 93       	push	r30
     f98:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     f9a:	e0 91 6c 21 	lds	r30, 0x216C	; 0x80216c <tc_tcc0_ccb_callback>
     f9e:	f0 91 6d 21 	lds	r31, 0x216D	; 0x80216d <tc_tcc0_ccb_callback+0x1>
     fa2:	30 97       	sbiw	r30, 0x00	; 0
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     fa6:	19 95       	eicall
	}
}
     fa8:	ff 91       	pop	r31
     faa:	ef 91       	pop	r30
     fac:	bf 91       	pop	r27
     fae:	af 91       	pop	r26
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	7f 91       	pop	r23
     fb6:	6f 91       	pop	r22
     fb8:	5f 91       	pop	r21
     fba:	4f 91       	pop	r20
     fbc:	3f 91       	pop	r19
     fbe:	2f 91       	pop	r18
     fc0:	0f 90       	pop	r0
     fc2:	0b be       	out	0x3b, r0	; 59
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     fce:	1f 92       	push	r1
     fd0:	0f 92       	push	r0
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	0f 92       	push	r0
     fd6:	11 24       	eor	r1, r1
     fd8:	0b b6       	in	r0, 0x3b	; 59
     fda:	0f 92       	push	r0
     fdc:	2f 93       	push	r18
     fde:	3f 93       	push	r19
     fe0:	4f 93       	push	r20
     fe2:	5f 93       	push	r21
     fe4:	6f 93       	push	r22
     fe6:	7f 93       	push	r23
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
     ff0:	ef 93       	push	r30
     ff2:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     ff4:	e0 91 6a 21 	lds	r30, 0x216A	; 0x80216a <tc_tcc0_ccc_callback>
     ff8:	f0 91 6b 21 	lds	r31, 0x216B	; 0x80216b <tc_tcc0_ccc_callback+0x1>
     ffc:	30 97       	sbiw	r30, 0x00	; 0
     ffe:	09 f0       	breq	.+2      	; 0x1002 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    1000:	19 95       	eicall
	}
}
    1002:	ff 91       	pop	r31
    1004:	ef 91       	pop	r30
    1006:	bf 91       	pop	r27
    1008:	af 91       	pop	r26
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	7f 91       	pop	r23
    1010:	6f 91       	pop	r22
    1012:	5f 91       	pop	r21
    1014:	4f 91       	pop	r20
    1016:	3f 91       	pop	r19
    1018:	2f 91       	pop	r18
    101a:	0f 90       	pop	r0
    101c:	0b be       	out	0x3b, r0	; 59
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	0b b6       	in	r0, 0x3b	; 59
    1034:	0f 92       	push	r0
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    104e:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <tc_tcc0_ccd_callback>
    1052:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <tc_tcc0_ccd_callback+0x1>
    1056:	30 97       	sbiw	r30, 0x00	; 0
    1058:	09 f0       	breq	.+2      	; 0x105c <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    105a:	19 95       	eicall
	}
}
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	bf 91       	pop	r27
    1062:	af 91       	pop	r26
    1064:	9f 91       	pop	r25
    1066:	8f 91       	pop	r24
    1068:	7f 91       	pop	r23
    106a:	6f 91       	pop	r22
    106c:	5f 91       	pop	r21
    106e:	4f 91       	pop	r20
    1070:	3f 91       	pop	r19
    1072:	2f 91       	pop	r18
    1074:	0f 90       	pop	r0
    1076:	0b be       	out	0x3b, r0	; 59
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	0b b6       	in	r0, 0x3b	; 59
    108e:	0f 92       	push	r0
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    10a8:	e0 91 66 21 	lds	r30, 0x2166	; 0x802166 <tc_tcc1_ovf_callback>
    10ac:	f0 91 67 21 	lds	r31, 0x2167	; 0x802167 <tc_tcc1_ovf_callback+0x1>
    10b0:	30 97       	sbiw	r30, 0x00	; 0
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    10b4:	19 95       	eicall
	}
}
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0b be       	out	0x3b, r0	; 59
    10d2:	0f 90       	pop	r0
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	0f 90       	pop	r0
    10d8:	1f 90       	pop	r1
    10da:	18 95       	reti

000010dc <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	0b b6       	in	r0, 0x3b	; 59
    10e8:	0f 92       	push	r0
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	ef 93       	push	r30
    1100:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1102:	e0 91 64 21 	lds	r30, 0x2164	; 0x802164 <tc_tcc1_err_callback>
    1106:	f0 91 65 21 	lds	r31, 0x2165	; 0x802165 <tc_tcc1_err_callback+0x1>
    110a:	30 97       	sbiw	r30, 0x00	; 0
    110c:	09 f0       	breq	.+2      	; 0x1110 <__vector_21+0x34>
		tc_tcc1_err_callback();
    110e:	19 95       	eicall
	}
}
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	bf 91       	pop	r27
    1116:	af 91       	pop	r26
    1118:	9f 91       	pop	r25
    111a:	8f 91       	pop	r24
    111c:	7f 91       	pop	r23
    111e:	6f 91       	pop	r22
    1120:	5f 91       	pop	r21
    1122:	4f 91       	pop	r20
    1124:	3f 91       	pop	r19
    1126:	2f 91       	pop	r18
    1128:	0f 90       	pop	r0
    112a:	0b be       	out	0x3b, r0	; 59
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1136:	1f 92       	push	r1
    1138:	0f 92       	push	r0
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	0f 92       	push	r0
    113e:	11 24       	eor	r1, r1
    1140:	0b b6       	in	r0, 0x3b	; 59
    1142:	0f 92       	push	r0
    1144:	2f 93       	push	r18
    1146:	3f 93       	push	r19
    1148:	4f 93       	push	r20
    114a:	5f 93       	push	r21
    114c:	6f 93       	push	r22
    114e:	7f 93       	push	r23
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
    1154:	af 93       	push	r26
    1156:	bf 93       	push	r27
    1158:	ef 93       	push	r30
    115a:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    115c:	e0 91 62 21 	lds	r30, 0x2162	; 0x802162 <tc_tcc1_cca_callback>
    1160:	f0 91 63 21 	lds	r31, 0x2163	; 0x802163 <tc_tcc1_cca_callback+0x1>
    1164:	30 97       	sbiw	r30, 0x00	; 0
    1166:	09 f0       	breq	.+2      	; 0x116a <__vector_22+0x34>
		tc_tcc1_cca_callback();
    1168:	19 95       	eicall
	}
}
    116a:	ff 91       	pop	r31
    116c:	ef 91       	pop	r30
    116e:	bf 91       	pop	r27
    1170:	af 91       	pop	r26
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	7f 91       	pop	r23
    1178:	6f 91       	pop	r22
    117a:	5f 91       	pop	r21
    117c:	4f 91       	pop	r20
    117e:	3f 91       	pop	r19
    1180:	2f 91       	pop	r18
    1182:	0f 90       	pop	r0
    1184:	0b be       	out	0x3b, r0	; 59
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	0f 90       	pop	r0
    118c:	1f 90       	pop	r1
    118e:	18 95       	reti

00001190 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	0b b6       	in	r0, 0x3b	; 59
    119c:	0f 92       	push	r0
    119e:	2f 93       	push	r18
    11a0:	3f 93       	push	r19
    11a2:	4f 93       	push	r20
    11a4:	5f 93       	push	r21
    11a6:	6f 93       	push	r22
    11a8:	7f 93       	push	r23
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	af 93       	push	r26
    11b0:	bf 93       	push	r27
    11b2:	ef 93       	push	r30
    11b4:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    11b6:	e0 91 60 21 	lds	r30, 0x2160	; 0x802160 <tc_tcc1_ccb_callback>
    11ba:	f0 91 61 21 	lds	r31, 0x2161	; 0x802161 <tc_tcc1_ccb_callback+0x1>
    11be:	30 97       	sbiw	r30, 0x00	; 0
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    11c2:	19 95       	eicall
	}
}
    11c4:	ff 91       	pop	r31
    11c6:	ef 91       	pop	r30
    11c8:	bf 91       	pop	r27
    11ca:	af 91       	pop	r26
    11cc:	9f 91       	pop	r25
    11ce:	8f 91       	pop	r24
    11d0:	7f 91       	pop	r23
    11d2:	6f 91       	pop	r22
    11d4:	5f 91       	pop	r21
    11d6:	4f 91       	pop	r20
    11d8:	3f 91       	pop	r19
    11da:	2f 91       	pop	r18
    11dc:	0f 90       	pop	r0
    11de:	0b be       	out	0x3b, r0	; 59
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	0f 90       	pop	r0
    11e6:	1f 90       	pop	r1
    11e8:	18 95       	reti

000011ea <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    11ea:	1f 92       	push	r1
    11ec:	0f 92       	push	r0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	0f 92       	push	r0
    11f2:	11 24       	eor	r1, r1
    11f4:	0b b6       	in	r0, 0x3b	; 59
    11f6:	0f 92       	push	r0
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1210:	e0 91 5e 21 	lds	r30, 0x215E	; 0x80215e <tc_tcd0_ovf_callback>
    1214:	f0 91 5f 21 	lds	r31, 0x215F	; 0x80215f <tc_tcd0_ovf_callback+0x1>
    1218:	30 97       	sbiw	r30, 0x00	; 0
    121a:	09 f0       	breq	.+2      	; 0x121e <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    121c:	19 95       	eicall
	}
}
    121e:	ff 91       	pop	r31
    1220:	ef 91       	pop	r30
    1222:	bf 91       	pop	r27
    1224:	af 91       	pop	r26
    1226:	9f 91       	pop	r25
    1228:	8f 91       	pop	r24
    122a:	7f 91       	pop	r23
    122c:	6f 91       	pop	r22
    122e:	5f 91       	pop	r21
    1230:	4f 91       	pop	r20
    1232:	3f 91       	pop	r19
    1234:	2f 91       	pop	r18
    1236:	0f 90       	pop	r0
    1238:	0b be       	out	0x3b, r0	; 59
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

00001244 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	0b b6       	in	r0, 0x3b	; 59
    1250:	0f 92       	push	r0
    1252:	2f 93       	push	r18
    1254:	3f 93       	push	r19
    1256:	4f 93       	push	r20
    1258:	5f 93       	push	r21
    125a:	6f 93       	push	r22
    125c:	7f 93       	push	r23
    125e:	8f 93       	push	r24
    1260:	9f 93       	push	r25
    1262:	af 93       	push	r26
    1264:	bf 93       	push	r27
    1266:	ef 93       	push	r30
    1268:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    126a:	e0 91 5c 21 	lds	r30, 0x215C	; 0x80215c <tc_tcd0_err_callback>
    126e:	f0 91 5d 21 	lds	r31, 0x215D	; 0x80215d <tc_tcd0_err_callback+0x1>
    1272:	30 97       	sbiw	r30, 0x00	; 0
    1274:	09 f0       	breq	.+2      	; 0x1278 <__vector_78+0x34>
		tc_tcd0_err_callback();
    1276:	19 95       	eicall
	}
}
    1278:	ff 91       	pop	r31
    127a:	ef 91       	pop	r30
    127c:	bf 91       	pop	r27
    127e:	af 91       	pop	r26
    1280:	9f 91       	pop	r25
    1282:	8f 91       	pop	r24
    1284:	7f 91       	pop	r23
    1286:	6f 91       	pop	r22
    1288:	5f 91       	pop	r21
    128a:	4f 91       	pop	r20
    128c:	3f 91       	pop	r19
    128e:	2f 91       	pop	r18
    1290:	0f 90       	pop	r0
    1292:	0b be       	out	0x3b, r0	; 59
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	0b b6       	in	r0, 0x3b	; 59
    12aa:	0f 92       	push	r0
    12ac:	2f 93       	push	r18
    12ae:	3f 93       	push	r19
    12b0:	4f 93       	push	r20
    12b2:	5f 93       	push	r21
    12b4:	6f 93       	push	r22
    12b6:	7f 93       	push	r23
    12b8:	8f 93       	push	r24
    12ba:	9f 93       	push	r25
    12bc:	af 93       	push	r26
    12be:	bf 93       	push	r27
    12c0:	ef 93       	push	r30
    12c2:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    12c4:	e0 91 5a 21 	lds	r30, 0x215A	; 0x80215a <tc_tcd0_cca_callback>
    12c8:	f0 91 5b 21 	lds	r31, 0x215B	; 0x80215b <tc_tcd0_cca_callback+0x1>
    12cc:	30 97       	sbiw	r30, 0x00	; 0
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <__vector_79+0x34>
		tc_tcd0_cca_callback();
    12d0:	19 95       	eicall
	}
}
    12d2:	ff 91       	pop	r31
    12d4:	ef 91       	pop	r30
    12d6:	bf 91       	pop	r27
    12d8:	af 91       	pop	r26
    12da:	9f 91       	pop	r25
    12dc:	8f 91       	pop	r24
    12de:	7f 91       	pop	r23
    12e0:	6f 91       	pop	r22
    12e2:	5f 91       	pop	r21
    12e4:	4f 91       	pop	r20
    12e6:	3f 91       	pop	r19
    12e8:	2f 91       	pop	r18
    12ea:	0f 90       	pop	r0
    12ec:	0b be       	out	0x3b, r0	; 59
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	0f 90       	pop	r0
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    12f8:	1f 92       	push	r1
    12fa:	0f 92       	push	r0
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	0f 92       	push	r0
    1300:	11 24       	eor	r1, r1
    1302:	0b b6       	in	r0, 0x3b	; 59
    1304:	0f 92       	push	r0
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    131e:	e0 91 58 21 	lds	r30, 0x2158	; 0x802158 <tc_tcd0_ccb_callback>
    1322:	f0 91 59 21 	lds	r31, 0x2159	; 0x802159 <tc_tcd0_ccb_callback+0x1>
    1326:	30 97       	sbiw	r30, 0x00	; 0
    1328:	09 f0       	breq	.+2      	; 0x132c <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    132a:	19 95       	eicall
	}
}
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	0f 90       	pop	r0
    1346:	0b be       	out	0x3b, r0	; 59
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	0b b6       	in	r0, 0x3b	; 59
    135e:	0f 92       	push	r0
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1378:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <tc_tcd0_ccc_callback>
    137c:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <tc_tcd0_ccc_callback+0x1>
    1380:	30 97       	sbiw	r30, 0x00	; 0
    1382:	09 f0       	breq	.+2      	; 0x1386 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    1384:	19 95       	eicall
	}
}
    1386:	ff 91       	pop	r31
    1388:	ef 91       	pop	r30
    138a:	bf 91       	pop	r27
    138c:	af 91       	pop	r26
    138e:	9f 91       	pop	r25
    1390:	8f 91       	pop	r24
    1392:	7f 91       	pop	r23
    1394:	6f 91       	pop	r22
    1396:	5f 91       	pop	r21
    1398:	4f 91       	pop	r20
    139a:	3f 91       	pop	r19
    139c:	2f 91       	pop	r18
    139e:	0f 90       	pop	r0
    13a0:	0b be       	out	0x3b, r0	; 59
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	0f 90       	pop	r0
    13a8:	1f 90       	pop	r1
    13aa:	18 95       	reti

000013ac <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    13ac:	1f 92       	push	r1
    13ae:	0f 92       	push	r0
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	0f 92       	push	r0
    13b4:	11 24       	eor	r1, r1
    13b6:	0b b6       	in	r0, 0x3b	; 59
    13b8:	0f 92       	push	r0
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    13d2:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tc_tcd0_ccd_callback>
    13d6:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tc_tcd0_ccd_callback+0x1>
    13da:	30 97       	sbiw	r30, 0x00	; 0
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    13de:	19 95       	eicall
	}
}
    13e0:	ff 91       	pop	r31
    13e2:	ef 91       	pop	r30
    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	7f 91       	pop	r23
    13ee:	6f 91       	pop	r22
    13f0:	5f 91       	pop	r21
    13f2:	4f 91       	pop	r20
    13f4:	3f 91       	pop	r19
    13f6:	2f 91       	pop	r18
    13f8:	0f 90       	pop	r0
    13fa:	0b be       	out	0x3b, r0	; 59
    13fc:	0f 90       	pop	r0
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	0f 90       	pop	r0
    1402:	1f 90       	pop	r1
    1404:	18 95       	reti

00001406 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1406:	1f 92       	push	r1
    1408:	0f 92       	push	r0
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	0f 92       	push	r0
    140e:	11 24       	eor	r1, r1
    1410:	0b b6       	in	r0, 0x3b	; 59
    1412:	0f 92       	push	r0
    1414:	2f 93       	push	r18
    1416:	3f 93       	push	r19
    1418:	4f 93       	push	r20
    141a:	5f 93       	push	r21
    141c:	6f 93       	push	r22
    141e:	7f 93       	push	r23
    1420:	8f 93       	push	r24
    1422:	9f 93       	push	r25
    1424:	af 93       	push	r26
    1426:	bf 93       	push	r27
    1428:	ef 93       	push	r30
    142a:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    142c:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <tc_tcd1_ovf_callback>
    1430:	f0 91 53 21 	lds	r31, 0x2153	; 0x802153 <tc_tcd1_ovf_callback+0x1>
    1434:	30 97       	sbiw	r30, 0x00	; 0
    1436:	09 f0       	breq	.+2      	; 0x143a <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    1438:	19 95       	eicall
	}
}
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	bf 91       	pop	r27
    1440:	af 91       	pop	r26
    1442:	9f 91       	pop	r25
    1444:	8f 91       	pop	r24
    1446:	7f 91       	pop	r23
    1448:	6f 91       	pop	r22
    144a:	5f 91       	pop	r21
    144c:	4f 91       	pop	r20
    144e:	3f 91       	pop	r19
    1450:	2f 91       	pop	r18
    1452:	0f 90       	pop	r0
    1454:	0b be       	out	0x3b, r0	; 59
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti

00001460 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1460:	1f 92       	push	r1
    1462:	0f 92       	push	r0
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	0f 92       	push	r0
    1468:	11 24       	eor	r1, r1
    146a:	0b b6       	in	r0, 0x3b	; 59
    146c:	0f 92       	push	r0
    146e:	2f 93       	push	r18
    1470:	3f 93       	push	r19
    1472:	4f 93       	push	r20
    1474:	5f 93       	push	r21
    1476:	6f 93       	push	r22
    1478:	7f 93       	push	r23
    147a:	8f 93       	push	r24
    147c:	9f 93       	push	r25
    147e:	af 93       	push	r26
    1480:	bf 93       	push	r27
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1486:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <tc_tcd1_err_callback>
    148a:	f0 91 51 21 	lds	r31, 0x2151	; 0x802151 <tc_tcd1_err_callback+0x1>
    148e:	30 97       	sbiw	r30, 0x00	; 0
    1490:	09 f0       	breq	.+2      	; 0x1494 <__vector_84+0x34>
		tc_tcd1_err_callback();
    1492:	19 95       	eicall
	}
}
    1494:	ff 91       	pop	r31
    1496:	ef 91       	pop	r30
    1498:	bf 91       	pop	r27
    149a:	af 91       	pop	r26
    149c:	9f 91       	pop	r25
    149e:	8f 91       	pop	r24
    14a0:	7f 91       	pop	r23
    14a2:	6f 91       	pop	r22
    14a4:	5f 91       	pop	r21
    14a6:	4f 91       	pop	r20
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0b be       	out	0x3b, r0	; 59
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	0f 90       	pop	r0
    14b6:	1f 90       	pop	r1
    14b8:	18 95       	reti

000014ba <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    14ba:	1f 92       	push	r1
    14bc:	0f 92       	push	r0
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	0f 92       	push	r0
    14c2:	11 24       	eor	r1, r1
    14c4:	0b b6       	in	r0, 0x3b	; 59
    14c6:	0f 92       	push	r0
    14c8:	2f 93       	push	r18
    14ca:	3f 93       	push	r19
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    14e0:	e0 91 4e 21 	lds	r30, 0x214E	; 0x80214e <tc_tcd1_cca_callback>
    14e4:	f0 91 4f 21 	lds	r31, 0x214F	; 0x80214f <tc_tcd1_cca_callback+0x1>
    14e8:	30 97       	sbiw	r30, 0x00	; 0
    14ea:	09 f0       	breq	.+2      	; 0x14ee <__vector_85+0x34>
		tc_tcd1_cca_callback();
    14ec:	19 95       	eicall
	}
}
    14ee:	ff 91       	pop	r31
    14f0:	ef 91       	pop	r30
    14f2:	bf 91       	pop	r27
    14f4:	af 91       	pop	r26
    14f6:	9f 91       	pop	r25
    14f8:	8f 91       	pop	r24
    14fa:	7f 91       	pop	r23
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0b be       	out	0x3b, r0	; 59
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	0f 90       	pop	r0
    1510:	1f 90       	pop	r1
    1512:	18 95       	reti

00001514 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1514:	1f 92       	push	r1
    1516:	0f 92       	push	r0
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	0f 92       	push	r0
    151c:	11 24       	eor	r1, r1
    151e:	0b b6       	in	r0, 0x3b	; 59
    1520:	0f 92       	push	r0
    1522:	2f 93       	push	r18
    1524:	3f 93       	push	r19
    1526:	4f 93       	push	r20
    1528:	5f 93       	push	r21
    152a:	6f 93       	push	r22
    152c:	7f 93       	push	r23
    152e:	8f 93       	push	r24
    1530:	9f 93       	push	r25
    1532:	af 93       	push	r26
    1534:	bf 93       	push	r27
    1536:	ef 93       	push	r30
    1538:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    153a:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <tc_tcd1_ccb_callback>
    153e:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <tc_tcd1_ccb_callback+0x1>
    1542:	30 97       	sbiw	r30, 0x00	; 0
    1544:	09 f0       	breq	.+2      	; 0x1548 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    1546:	19 95       	eicall
	}
}
    1548:	ff 91       	pop	r31
    154a:	ef 91       	pop	r30
    154c:	bf 91       	pop	r27
    154e:	af 91       	pop	r26
    1550:	9f 91       	pop	r25
    1552:	8f 91       	pop	r24
    1554:	7f 91       	pop	r23
    1556:	6f 91       	pop	r22
    1558:	5f 91       	pop	r21
    155a:	4f 91       	pop	r20
    155c:	3f 91       	pop	r19
    155e:	2f 91       	pop	r18
    1560:	0f 90       	pop	r0
    1562:	0b be       	out	0x3b, r0	; 59
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	0f 90       	pop	r0
    156a:	1f 90       	pop	r1
    156c:	18 95       	reti

0000156e <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    156e:	1f 92       	push	r1
    1570:	0f 92       	push	r0
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	0f 92       	push	r0
    1576:	11 24       	eor	r1, r1
    1578:	0b b6       	in	r0, 0x3b	; 59
    157a:	0f 92       	push	r0
    157c:	2f 93       	push	r18
    157e:	3f 93       	push	r19
    1580:	4f 93       	push	r20
    1582:	5f 93       	push	r21
    1584:	6f 93       	push	r22
    1586:	7f 93       	push	r23
    1588:	8f 93       	push	r24
    158a:	9f 93       	push	r25
    158c:	af 93       	push	r26
    158e:	bf 93       	push	r27
    1590:	ef 93       	push	r30
    1592:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1594:	e0 91 4a 21 	lds	r30, 0x214A	; 0x80214a <tc_tce0_ovf_callback>
    1598:	f0 91 4b 21 	lds	r31, 0x214B	; 0x80214b <tc_tce0_ovf_callback+0x1>
    159c:	30 97       	sbiw	r30, 0x00	; 0
    159e:	09 f0       	breq	.+2      	; 0x15a2 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    15a0:	19 95       	eicall
	}
}
    15a2:	ff 91       	pop	r31
    15a4:	ef 91       	pop	r30
    15a6:	bf 91       	pop	r27
    15a8:	af 91       	pop	r26
    15aa:	9f 91       	pop	r25
    15ac:	8f 91       	pop	r24
    15ae:	7f 91       	pop	r23
    15b0:	6f 91       	pop	r22
    15b2:	5f 91       	pop	r21
    15b4:	4f 91       	pop	r20
    15b6:	3f 91       	pop	r19
    15b8:	2f 91       	pop	r18
    15ba:	0f 90       	pop	r0
    15bc:	0b be       	out	0x3b, r0	; 59
    15be:	0f 90       	pop	r0
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	0f 90       	pop	r0
    15c4:	1f 90       	pop	r1
    15c6:	18 95       	reti

000015c8 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	0b b6       	in	r0, 0x3b	; 59
    15d4:	0f 92       	push	r0
    15d6:	2f 93       	push	r18
    15d8:	3f 93       	push	r19
    15da:	4f 93       	push	r20
    15dc:	5f 93       	push	r21
    15de:	6f 93       	push	r22
    15e0:	7f 93       	push	r23
    15e2:	8f 93       	push	r24
    15e4:	9f 93       	push	r25
    15e6:	af 93       	push	r26
    15e8:	bf 93       	push	r27
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    15ee:	e0 91 48 21 	lds	r30, 0x2148	; 0x802148 <tc_tce0_err_callback>
    15f2:	f0 91 49 21 	lds	r31, 0x2149	; 0x802149 <tc_tce0_err_callback+0x1>
    15f6:	30 97       	sbiw	r30, 0x00	; 0
    15f8:	09 f0       	breq	.+2      	; 0x15fc <__vector_48+0x34>
		tc_tce0_err_callback();
    15fa:	19 95       	eicall
	}
}
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	bf 91       	pop	r27
    1602:	af 91       	pop	r26
    1604:	9f 91       	pop	r25
    1606:	8f 91       	pop	r24
    1608:	7f 91       	pop	r23
    160a:	6f 91       	pop	r22
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0b be       	out	0x3b, r0	; 59
    1618:	0f 90       	pop	r0
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	0f 90       	pop	r0
    161e:	1f 90       	pop	r1
    1620:	18 95       	reti

00001622 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1622:	1f 92       	push	r1
    1624:	0f 92       	push	r0
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	0f 92       	push	r0
    162a:	11 24       	eor	r1, r1
    162c:	0b b6       	in	r0, 0x3b	; 59
    162e:	0f 92       	push	r0
    1630:	2f 93       	push	r18
    1632:	3f 93       	push	r19
    1634:	4f 93       	push	r20
    1636:	5f 93       	push	r21
    1638:	6f 93       	push	r22
    163a:	7f 93       	push	r23
    163c:	8f 93       	push	r24
    163e:	9f 93       	push	r25
    1640:	af 93       	push	r26
    1642:	bf 93       	push	r27
    1644:	ef 93       	push	r30
    1646:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1648:	e0 91 46 21 	lds	r30, 0x2146	; 0x802146 <tc_tce0_cca_callback>
    164c:	f0 91 47 21 	lds	r31, 0x2147	; 0x802147 <tc_tce0_cca_callback+0x1>
    1650:	30 97       	sbiw	r30, 0x00	; 0
    1652:	09 f0       	breq	.+2      	; 0x1656 <__vector_49+0x34>
		tc_tce0_cca_callback();
    1654:	19 95       	eicall
	}
}
    1656:	ff 91       	pop	r31
    1658:	ef 91       	pop	r30
    165a:	bf 91       	pop	r27
    165c:	af 91       	pop	r26
    165e:	9f 91       	pop	r25
    1660:	8f 91       	pop	r24
    1662:	7f 91       	pop	r23
    1664:	6f 91       	pop	r22
    1666:	5f 91       	pop	r21
    1668:	4f 91       	pop	r20
    166a:	3f 91       	pop	r19
    166c:	2f 91       	pop	r18
    166e:	0f 90       	pop	r0
    1670:	0b be       	out	0x3b, r0	; 59
    1672:	0f 90       	pop	r0
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	0f 90       	pop	r0
    1678:	1f 90       	pop	r1
    167a:	18 95       	reti

0000167c <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    167c:	1f 92       	push	r1
    167e:	0f 92       	push	r0
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	0f 92       	push	r0
    1684:	11 24       	eor	r1, r1
    1686:	0b b6       	in	r0, 0x3b	; 59
    1688:	0f 92       	push	r0
    168a:	2f 93       	push	r18
    168c:	3f 93       	push	r19
    168e:	4f 93       	push	r20
    1690:	5f 93       	push	r21
    1692:	6f 93       	push	r22
    1694:	7f 93       	push	r23
    1696:	8f 93       	push	r24
    1698:	9f 93       	push	r25
    169a:	af 93       	push	r26
    169c:	bf 93       	push	r27
    169e:	ef 93       	push	r30
    16a0:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    16a2:	e0 91 44 21 	lds	r30, 0x2144	; 0x802144 <tc_tce0_ccb_callback>
    16a6:	f0 91 45 21 	lds	r31, 0x2145	; 0x802145 <tc_tce0_ccb_callback+0x1>
    16aa:	30 97       	sbiw	r30, 0x00	; 0
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    16ae:	19 95       	eicall
	}
}
    16b0:	ff 91       	pop	r31
    16b2:	ef 91       	pop	r30
    16b4:	bf 91       	pop	r27
    16b6:	af 91       	pop	r26
    16b8:	9f 91       	pop	r25
    16ba:	8f 91       	pop	r24
    16bc:	7f 91       	pop	r23
    16be:	6f 91       	pop	r22
    16c0:	5f 91       	pop	r21
    16c2:	4f 91       	pop	r20
    16c4:	3f 91       	pop	r19
    16c6:	2f 91       	pop	r18
    16c8:	0f 90       	pop	r0
    16ca:	0b be       	out	0x3b, r0	; 59
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	0b b6       	in	r0, 0x3b	; 59
    16e2:	0f 92       	push	r0
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	6f 93       	push	r22
    16ee:	7f 93       	push	r23
    16f0:	8f 93       	push	r24
    16f2:	9f 93       	push	r25
    16f4:	af 93       	push	r26
    16f6:	bf 93       	push	r27
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    16fc:	e0 91 42 21 	lds	r30, 0x2142	; 0x802142 <tc_tce0_ccc_callback>
    1700:	f0 91 43 21 	lds	r31, 0x2143	; 0x802143 <tc_tce0_ccc_callback+0x1>
    1704:	30 97       	sbiw	r30, 0x00	; 0
    1706:	09 f0       	breq	.+2      	; 0x170a <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1708:	19 95       	eicall
	}
}
    170a:	ff 91       	pop	r31
    170c:	ef 91       	pop	r30
    170e:	bf 91       	pop	r27
    1710:	af 91       	pop	r26
    1712:	9f 91       	pop	r25
    1714:	8f 91       	pop	r24
    1716:	7f 91       	pop	r23
    1718:	6f 91       	pop	r22
    171a:	5f 91       	pop	r21
    171c:	4f 91       	pop	r20
    171e:	3f 91       	pop	r19
    1720:	2f 91       	pop	r18
    1722:	0f 90       	pop	r0
    1724:	0b be       	out	0x3b, r0	; 59
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	0f 90       	pop	r0
    172c:	1f 90       	pop	r1
    172e:	18 95       	reti

00001730 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1730:	1f 92       	push	r1
    1732:	0f 92       	push	r0
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	0f 92       	push	r0
    1738:	11 24       	eor	r1, r1
    173a:	0b b6       	in	r0, 0x3b	; 59
    173c:	0f 92       	push	r0
    173e:	2f 93       	push	r18
    1740:	3f 93       	push	r19
    1742:	4f 93       	push	r20
    1744:	5f 93       	push	r21
    1746:	6f 93       	push	r22
    1748:	7f 93       	push	r23
    174a:	8f 93       	push	r24
    174c:	9f 93       	push	r25
    174e:	af 93       	push	r26
    1750:	bf 93       	push	r27
    1752:	ef 93       	push	r30
    1754:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1756:	e0 91 40 21 	lds	r30, 0x2140	; 0x802140 <tc_tce0_ccd_callback>
    175a:	f0 91 41 21 	lds	r31, 0x2141	; 0x802141 <tc_tce0_ccd_callback+0x1>
    175e:	30 97       	sbiw	r30, 0x00	; 0
    1760:	09 f0       	breq	.+2      	; 0x1764 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    1762:	19 95       	eicall
	}
}
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	bf 91       	pop	r27
    176a:	af 91       	pop	r26
    176c:	9f 91       	pop	r25
    176e:	8f 91       	pop	r24
    1770:	7f 91       	pop	r23
    1772:	6f 91       	pop	r22
    1774:	5f 91       	pop	r21
    1776:	4f 91       	pop	r20
    1778:	3f 91       	pop	r19
    177a:	2f 91       	pop	r18
    177c:	0f 90       	pop	r0
    177e:	0b be       	out	0x3b, r0	; 59
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	0f 90       	pop	r0
    1786:	1f 90       	pop	r1
    1788:	18 95       	reti

0000178a <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    178a:	1f 92       	push	r1
    178c:	0f 92       	push	r0
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	0f 92       	push	r0
    1792:	11 24       	eor	r1, r1
    1794:	0b b6       	in	r0, 0x3b	; 59
    1796:	0f 92       	push	r0
    1798:	2f 93       	push	r18
    179a:	3f 93       	push	r19
    179c:	4f 93       	push	r20
    179e:	5f 93       	push	r21
    17a0:	6f 93       	push	r22
    17a2:	7f 93       	push	r23
    17a4:	8f 93       	push	r24
    17a6:	9f 93       	push	r25
    17a8:	af 93       	push	r26
    17aa:	bf 93       	push	r27
    17ac:	ef 93       	push	r30
    17ae:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    17b0:	e0 91 3e 21 	lds	r30, 0x213E	; 0x80213e <tc_tce1_ovf_callback>
    17b4:	f0 91 3f 21 	lds	r31, 0x213F	; 0x80213f <tc_tce1_ovf_callback+0x1>
    17b8:	30 97       	sbiw	r30, 0x00	; 0
    17ba:	09 f0       	breq	.+2      	; 0x17be <__vector_53+0x34>
		tc_tce1_ovf_callback();
    17bc:	19 95       	eicall
	}
}
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	bf 91       	pop	r27
    17c4:	af 91       	pop	r26
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	7f 91       	pop	r23
    17cc:	6f 91       	pop	r22
    17ce:	5f 91       	pop	r21
    17d0:	4f 91       	pop	r20
    17d2:	3f 91       	pop	r19
    17d4:	2f 91       	pop	r18
    17d6:	0f 90       	pop	r0
    17d8:	0b be       	out	0x3b, r0	; 59
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	0f 90       	pop	r0
    17e0:	1f 90       	pop	r1
    17e2:	18 95       	reti

000017e4 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    17e4:	1f 92       	push	r1
    17e6:	0f 92       	push	r0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	0f 92       	push	r0
    17ec:	11 24       	eor	r1, r1
    17ee:	0b b6       	in	r0, 0x3b	; 59
    17f0:	0f 92       	push	r0
    17f2:	2f 93       	push	r18
    17f4:	3f 93       	push	r19
    17f6:	4f 93       	push	r20
    17f8:	5f 93       	push	r21
    17fa:	6f 93       	push	r22
    17fc:	7f 93       	push	r23
    17fe:	8f 93       	push	r24
    1800:	9f 93       	push	r25
    1802:	af 93       	push	r26
    1804:	bf 93       	push	r27
    1806:	ef 93       	push	r30
    1808:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    180a:	e0 91 3c 21 	lds	r30, 0x213C	; 0x80213c <tc_tce1_err_callback>
    180e:	f0 91 3d 21 	lds	r31, 0x213D	; 0x80213d <tc_tce1_err_callback+0x1>
    1812:	30 97       	sbiw	r30, 0x00	; 0
    1814:	09 f0       	breq	.+2      	; 0x1818 <__vector_54+0x34>
		tc_tce1_err_callback();
    1816:	19 95       	eicall
	}
}
    1818:	ff 91       	pop	r31
    181a:	ef 91       	pop	r30
    181c:	bf 91       	pop	r27
    181e:	af 91       	pop	r26
    1820:	9f 91       	pop	r25
    1822:	8f 91       	pop	r24
    1824:	7f 91       	pop	r23
    1826:	6f 91       	pop	r22
    1828:	5f 91       	pop	r21
    182a:	4f 91       	pop	r20
    182c:	3f 91       	pop	r19
    182e:	2f 91       	pop	r18
    1830:	0f 90       	pop	r0
    1832:	0b be       	out	0x3b, r0	; 59
    1834:	0f 90       	pop	r0
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	0f 90       	pop	r0
    183a:	1f 90       	pop	r1
    183c:	18 95       	reti

0000183e <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    183e:	1f 92       	push	r1
    1840:	0f 92       	push	r0
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	0f 92       	push	r0
    1846:	11 24       	eor	r1, r1
    1848:	0b b6       	in	r0, 0x3b	; 59
    184a:	0f 92       	push	r0
    184c:	2f 93       	push	r18
    184e:	3f 93       	push	r19
    1850:	4f 93       	push	r20
    1852:	5f 93       	push	r21
    1854:	6f 93       	push	r22
    1856:	7f 93       	push	r23
    1858:	8f 93       	push	r24
    185a:	9f 93       	push	r25
    185c:	af 93       	push	r26
    185e:	bf 93       	push	r27
    1860:	ef 93       	push	r30
    1862:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1864:	e0 91 3a 21 	lds	r30, 0x213A	; 0x80213a <tc_tce1_cca_callback>
    1868:	f0 91 3b 21 	lds	r31, 0x213B	; 0x80213b <tc_tce1_cca_callback+0x1>
    186c:	30 97       	sbiw	r30, 0x00	; 0
    186e:	09 f0       	breq	.+2      	; 0x1872 <__vector_55+0x34>
		tc_tce1_cca_callback();
    1870:	19 95       	eicall
	}
}
    1872:	ff 91       	pop	r31
    1874:	ef 91       	pop	r30
    1876:	bf 91       	pop	r27
    1878:	af 91       	pop	r26
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	7f 91       	pop	r23
    1880:	6f 91       	pop	r22
    1882:	5f 91       	pop	r21
    1884:	4f 91       	pop	r20
    1886:	3f 91       	pop	r19
    1888:	2f 91       	pop	r18
    188a:	0f 90       	pop	r0
    188c:	0b be       	out	0x3b, r0	; 59
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0f 90       	pop	r0
    1894:	1f 90       	pop	r1
    1896:	18 95       	reti

00001898 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	0b b6       	in	r0, 0x3b	; 59
    18a4:	0f 92       	push	r0
    18a6:	2f 93       	push	r18
    18a8:	3f 93       	push	r19
    18aa:	4f 93       	push	r20
    18ac:	5f 93       	push	r21
    18ae:	6f 93       	push	r22
    18b0:	7f 93       	push	r23
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    18be:	e0 91 38 21 	lds	r30, 0x2138	; 0x802138 <tc_tce1_ccb_callback>
    18c2:	f0 91 39 21 	lds	r31, 0x2139	; 0x802139 <tc_tce1_ccb_callback+0x1>
    18c6:	30 97       	sbiw	r30, 0x00	; 0
    18c8:	09 f0       	breq	.+2      	; 0x18cc <__vector_56+0x34>
		tc_tce1_ccb_callback();
    18ca:	19 95       	eicall
	}
}
    18cc:	ff 91       	pop	r31
    18ce:	ef 91       	pop	r30
    18d0:	bf 91       	pop	r27
    18d2:	af 91       	pop	r26
    18d4:	9f 91       	pop	r25
    18d6:	8f 91       	pop	r24
    18d8:	7f 91       	pop	r23
    18da:	6f 91       	pop	r22
    18dc:	5f 91       	pop	r21
    18de:	4f 91       	pop	r20
    18e0:	3f 91       	pop	r19
    18e2:	2f 91       	pop	r18
    18e4:	0f 90       	pop	r0
    18e6:	0b be       	out	0x3b, r0	; 59
    18e8:	0f 90       	pop	r0
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	0f 90       	pop	r0
    18ee:	1f 90       	pop	r1
    18f0:	18 95       	reti

000018f2 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    18f2:	1f 92       	push	r1
    18f4:	0f 92       	push	r0
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	0f 92       	push	r0
    18fa:	11 24       	eor	r1, r1
    18fc:	0b b6       	in	r0, 0x3b	; 59
    18fe:	0f 92       	push	r0
    1900:	2f 93       	push	r18
    1902:	3f 93       	push	r19
    1904:	4f 93       	push	r20
    1906:	5f 93       	push	r21
    1908:	6f 93       	push	r22
    190a:	7f 93       	push	r23
    190c:	8f 93       	push	r24
    190e:	9f 93       	push	r25
    1910:	af 93       	push	r26
    1912:	bf 93       	push	r27
    1914:	ef 93       	push	r30
    1916:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1918:	e0 91 36 21 	lds	r30, 0x2136	; 0x802136 <tc_tcf0_ovf_callback>
    191c:	f0 91 37 21 	lds	r31, 0x2137	; 0x802137 <tc_tcf0_ovf_callback+0x1>
    1920:	30 97       	sbiw	r30, 0x00	; 0
    1922:	09 f0       	breq	.+2      	; 0x1926 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1924:	19 95       	eicall
	}
}
    1926:	ff 91       	pop	r31
    1928:	ef 91       	pop	r30
    192a:	bf 91       	pop	r27
    192c:	af 91       	pop	r26
    192e:	9f 91       	pop	r25
    1930:	8f 91       	pop	r24
    1932:	7f 91       	pop	r23
    1934:	6f 91       	pop	r22
    1936:	5f 91       	pop	r21
    1938:	4f 91       	pop	r20
    193a:	3f 91       	pop	r19
    193c:	2f 91       	pop	r18
    193e:	0f 90       	pop	r0
    1940:	0b be       	out	0x3b, r0	; 59
    1942:	0f 90       	pop	r0
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	0f 90       	pop	r0
    1948:	1f 90       	pop	r1
    194a:	18 95       	reti

0000194c <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    194c:	1f 92       	push	r1
    194e:	0f 92       	push	r0
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	0f 92       	push	r0
    1954:	11 24       	eor	r1, r1
    1956:	0b b6       	in	r0, 0x3b	; 59
    1958:	0f 92       	push	r0
    195a:	2f 93       	push	r18
    195c:	3f 93       	push	r19
    195e:	4f 93       	push	r20
    1960:	5f 93       	push	r21
    1962:	6f 93       	push	r22
    1964:	7f 93       	push	r23
    1966:	8f 93       	push	r24
    1968:	9f 93       	push	r25
    196a:	af 93       	push	r26
    196c:	bf 93       	push	r27
    196e:	ef 93       	push	r30
    1970:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1972:	e0 91 34 21 	lds	r30, 0x2134	; 0x802134 <tc_tcf0_err_callback>
    1976:	f0 91 35 21 	lds	r31, 0x2135	; 0x802135 <tc_tcf0_err_callback+0x1>
    197a:	30 97       	sbiw	r30, 0x00	; 0
    197c:	09 f0       	breq	.+2      	; 0x1980 <__vector_109+0x34>
		tc_tcf0_err_callback();
    197e:	19 95       	eicall
	}
}
    1980:	ff 91       	pop	r31
    1982:	ef 91       	pop	r30
    1984:	bf 91       	pop	r27
    1986:	af 91       	pop	r26
    1988:	9f 91       	pop	r25
    198a:	8f 91       	pop	r24
    198c:	7f 91       	pop	r23
    198e:	6f 91       	pop	r22
    1990:	5f 91       	pop	r21
    1992:	4f 91       	pop	r20
    1994:	3f 91       	pop	r19
    1996:	2f 91       	pop	r18
    1998:	0f 90       	pop	r0
    199a:	0b be       	out	0x3b, r0	; 59
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	0f 90       	pop	r0
    19a2:	1f 90       	pop	r1
    19a4:	18 95       	reti

000019a6 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    19a6:	1f 92       	push	r1
    19a8:	0f 92       	push	r0
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	0f 92       	push	r0
    19ae:	11 24       	eor	r1, r1
    19b0:	0b b6       	in	r0, 0x3b	; 59
    19b2:	0f 92       	push	r0
    19b4:	2f 93       	push	r18
    19b6:	3f 93       	push	r19
    19b8:	4f 93       	push	r20
    19ba:	5f 93       	push	r21
    19bc:	6f 93       	push	r22
    19be:	7f 93       	push	r23
    19c0:	8f 93       	push	r24
    19c2:	9f 93       	push	r25
    19c4:	af 93       	push	r26
    19c6:	bf 93       	push	r27
    19c8:	ef 93       	push	r30
    19ca:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    19cc:	e0 91 32 21 	lds	r30, 0x2132	; 0x802132 <tc_tcf0_cca_callback>
    19d0:	f0 91 33 21 	lds	r31, 0x2133	; 0x802133 <tc_tcf0_cca_callback+0x1>
    19d4:	30 97       	sbiw	r30, 0x00	; 0
    19d6:	09 f0       	breq	.+2      	; 0x19da <__vector_110+0x34>
		tc_tcf0_cca_callback();
    19d8:	19 95       	eicall
	}
}
    19da:	ff 91       	pop	r31
    19dc:	ef 91       	pop	r30
    19de:	bf 91       	pop	r27
    19e0:	af 91       	pop	r26
    19e2:	9f 91       	pop	r25
    19e4:	8f 91       	pop	r24
    19e6:	7f 91       	pop	r23
    19e8:	6f 91       	pop	r22
    19ea:	5f 91       	pop	r21
    19ec:	4f 91       	pop	r20
    19ee:	3f 91       	pop	r19
    19f0:	2f 91       	pop	r18
    19f2:	0f 90       	pop	r0
    19f4:	0b be       	out	0x3b, r0	; 59
    19f6:	0f 90       	pop	r0
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	0f 90       	pop	r0
    19fc:	1f 90       	pop	r1
    19fe:	18 95       	reti

00001a00 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1a00:	1f 92       	push	r1
    1a02:	0f 92       	push	r0
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	0f 92       	push	r0
    1a08:	11 24       	eor	r1, r1
    1a0a:	0b b6       	in	r0, 0x3b	; 59
    1a0c:	0f 92       	push	r0
    1a0e:	2f 93       	push	r18
    1a10:	3f 93       	push	r19
    1a12:	4f 93       	push	r20
    1a14:	5f 93       	push	r21
    1a16:	6f 93       	push	r22
    1a18:	7f 93       	push	r23
    1a1a:	8f 93       	push	r24
    1a1c:	9f 93       	push	r25
    1a1e:	af 93       	push	r26
    1a20:	bf 93       	push	r27
    1a22:	ef 93       	push	r30
    1a24:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1a26:	e0 91 30 21 	lds	r30, 0x2130	; 0x802130 <tc_tcf0_ccb_callback>
    1a2a:	f0 91 31 21 	lds	r31, 0x2131	; 0x802131 <tc_tcf0_ccb_callback+0x1>
    1a2e:	30 97       	sbiw	r30, 0x00	; 0
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1a32:	19 95       	eicall
	}
}
    1a34:	ff 91       	pop	r31
    1a36:	ef 91       	pop	r30
    1a38:	bf 91       	pop	r27
    1a3a:	af 91       	pop	r26
    1a3c:	9f 91       	pop	r25
    1a3e:	8f 91       	pop	r24
    1a40:	7f 91       	pop	r23
    1a42:	6f 91       	pop	r22
    1a44:	5f 91       	pop	r21
    1a46:	4f 91       	pop	r20
    1a48:	3f 91       	pop	r19
    1a4a:	2f 91       	pop	r18
    1a4c:	0f 90       	pop	r0
    1a4e:	0b be       	out	0x3b, r0	; 59
    1a50:	0f 90       	pop	r0
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	0f 90       	pop	r0
    1a56:	1f 90       	pop	r1
    1a58:	18 95       	reti

00001a5a <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1a5a:	1f 92       	push	r1
    1a5c:	0f 92       	push	r0
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	0f 92       	push	r0
    1a62:	11 24       	eor	r1, r1
    1a64:	0b b6       	in	r0, 0x3b	; 59
    1a66:	0f 92       	push	r0
    1a68:	2f 93       	push	r18
    1a6a:	3f 93       	push	r19
    1a6c:	4f 93       	push	r20
    1a6e:	5f 93       	push	r21
    1a70:	6f 93       	push	r22
    1a72:	7f 93       	push	r23
    1a74:	8f 93       	push	r24
    1a76:	9f 93       	push	r25
    1a78:	af 93       	push	r26
    1a7a:	bf 93       	push	r27
    1a7c:	ef 93       	push	r30
    1a7e:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1a80:	e0 91 2e 21 	lds	r30, 0x212E	; 0x80212e <tc_tcf0_ccc_callback>
    1a84:	f0 91 2f 21 	lds	r31, 0x212F	; 0x80212f <tc_tcf0_ccc_callback+0x1>
    1a88:	30 97       	sbiw	r30, 0x00	; 0
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    1a8c:	19 95       	eicall
	}
}
    1a8e:	ff 91       	pop	r31
    1a90:	ef 91       	pop	r30
    1a92:	bf 91       	pop	r27
    1a94:	af 91       	pop	r26
    1a96:	9f 91       	pop	r25
    1a98:	8f 91       	pop	r24
    1a9a:	7f 91       	pop	r23
    1a9c:	6f 91       	pop	r22
    1a9e:	5f 91       	pop	r21
    1aa0:	4f 91       	pop	r20
    1aa2:	3f 91       	pop	r19
    1aa4:	2f 91       	pop	r18
    1aa6:	0f 90       	pop	r0
    1aa8:	0b be       	out	0x3b, r0	; 59
    1aaa:	0f 90       	pop	r0
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	0f 90       	pop	r0
    1ab0:	1f 90       	pop	r1
    1ab2:	18 95       	reti

00001ab4 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1ab4:	1f 92       	push	r1
    1ab6:	0f 92       	push	r0
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	0f 92       	push	r0
    1abc:	11 24       	eor	r1, r1
    1abe:	0b b6       	in	r0, 0x3b	; 59
    1ac0:	0f 92       	push	r0
    1ac2:	2f 93       	push	r18
    1ac4:	3f 93       	push	r19
    1ac6:	4f 93       	push	r20
    1ac8:	5f 93       	push	r21
    1aca:	6f 93       	push	r22
    1acc:	7f 93       	push	r23
    1ace:	8f 93       	push	r24
    1ad0:	9f 93       	push	r25
    1ad2:	af 93       	push	r26
    1ad4:	bf 93       	push	r27
    1ad6:	ef 93       	push	r30
    1ad8:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1ada:	e0 91 2c 21 	lds	r30, 0x212C	; 0x80212c <tc_tcf0_ccd_callback>
    1ade:	f0 91 2d 21 	lds	r31, 0x212D	; 0x80212d <tc_tcf0_ccd_callback+0x1>
    1ae2:	30 97       	sbiw	r30, 0x00	; 0
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1ae6:	19 95       	eicall
	}
}
    1ae8:	ff 91       	pop	r31
    1aea:	ef 91       	pop	r30
    1aec:	bf 91       	pop	r27
    1aee:	af 91       	pop	r26
    1af0:	9f 91       	pop	r25
    1af2:	8f 91       	pop	r24
    1af4:	7f 91       	pop	r23
    1af6:	6f 91       	pop	r22
    1af8:	5f 91       	pop	r21
    1afa:	4f 91       	pop	r20
    1afc:	3f 91       	pop	r19
    1afe:	2f 91       	pop	r18
    1b00:	0f 90       	pop	r0
    1b02:	0b be       	out	0x3b, r0	; 59
    1b04:	0f 90       	pop	r0
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	0f 90       	pop	r0
    1b0a:	1f 90       	pop	r1
    1b0c:	18 95       	reti

00001b0e <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	1f 92       	push	r1
    1b16:	1f 92       	push	r1
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b1c:	2f b7       	in	r18, 0x3f	; 63
    1b1e:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    1b20:	f8 94       	cli
	return flags;
    1b22:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1b24:	28 2f       	mov	r18, r24
    1b26:	39 2f       	mov	r19, r25
    1b28:	21 15       	cp	r18, r1
    1b2a:	88 e0       	ldi	r24, 0x08	; 8
    1b2c:	38 07       	cpc	r19, r24
    1b2e:	49 f4       	brne	.+18     	; 0x1b42 <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	83 e0       	ldi	r24, 0x03	; 3
    1b34:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1b38:	64 e0       	ldi	r22, 0x04	; 4
    1b3a:	83 e0       	ldi	r24, 0x03	; 3
    1b3c:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
    1b40:	4f c0       	rjmp	.+158    	; 0x1be0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1b42:	20 34       	cpi	r18, 0x40	; 64
    1b44:	88 e0       	ldi	r24, 0x08	; 8
    1b46:	38 07       	cpc	r19, r24
    1b48:	49 f4       	brne	.+18     	; 0x1b5c <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	83 e0       	ldi	r24, 0x03	; 3
    1b4e:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1b52:	64 e0       	ldi	r22, 0x04	; 4
    1b54:	83 e0       	ldi	r24, 0x03	; 3
    1b56:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
    1b5a:	42 c0       	rjmp	.+132    	; 0x1be0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1b5c:	21 15       	cp	r18, r1
    1b5e:	89 e0       	ldi	r24, 0x09	; 9
    1b60:	38 07       	cpc	r19, r24
    1b62:	49 f4       	brne	.+18     	; 0x1b76 <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1b64:	61 e0       	ldi	r22, 0x01	; 1
    1b66:	84 e0       	ldi	r24, 0x04	; 4
    1b68:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b6c:	64 e0       	ldi	r22, 0x04	; 4
    1b6e:	84 e0       	ldi	r24, 0x04	; 4
    1b70:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
    1b74:	35 c0       	rjmp	.+106    	; 0x1be0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1b76:	20 34       	cpi	r18, 0x40	; 64
    1b78:	89 e0       	ldi	r24, 0x09	; 9
    1b7a:	38 07       	cpc	r19, r24
    1b7c:	49 f4       	brne	.+18     	; 0x1b90 <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1b7e:	62 e0       	ldi	r22, 0x02	; 2
    1b80:	84 e0       	ldi	r24, 0x04	; 4
    1b82:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b86:	64 e0       	ldi	r22, 0x04	; 4
    1b88:	84 e0       	ldi	r24, 0x04	; 4
    1b8a:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
    1b8e:	28 c0       	rjmp	.+80     	; 0x1be0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1b90:	21 15       	cp	r18, r1
    1b92:	8a e0       	ldi	r24, 0x0A	; 10
    1b94:	38 07       	cpc	r19, r24
    1b96:	49 f4       	brne	.+18     	; 0x1baa <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1b98:	61 e0       	ldi	r22, 0x01	; 1
    1b9a:	85 e0       	ldi	r24, 0x05	; 5
    1b9c:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1ba0:	64 e0       	ldi	r22, 0x04	; 4
    1ba2:	85 e0       	ldi	r24, 0x05	; 5
    1ba4:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
    1ba8:	1b c0       	rjmp	.+54     	; 0x1be0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1baa:	20 34       	cpi	r18, 0x40	; 64
    1bac:	8a e0       	ldi	r24, 0x0A	; 10
    1bae:	38 07       	cpc	r19, r24
    1bb0:	49 f4       	brne	.+18     	; 0x1bc4 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	85 e0       	ldi	r24, 0x05	; 5
    1bb6:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1bba:	64 e0       	ldi	r22, 0x04	; 4
    1bbc:	85 e0       	ldi	r24, 0x05	; 5
    1bbe:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
    1bc2:	0e c0       	rjmp	.+28     	; 0x1be0 <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1bc4:	21 15       	cp	r18, r1
    1bc6:	3b 40       	sbci	r19, 0x0B	; 11
    1bc8:	49 f4       	brne	.+18     	; 0x1bdc <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1bca:	61 e0       	ldi	r22, 0x01	; 1
    1bcc:	86 e0       	ldi	r24, 0x06	; 6
    1bce:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1bd2:	64 e0       	ldi	r22, 0x04	; 4
    1bd4:	86 e0       	ldi	r24, 0x06	; 6
    1bd6:	0e 94 df 1b 	call	0x37be	; 0x37be <sysclk_enable_module>
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bdc:	1f bf       	out	0x3f, r17	; 63
    1bde:	10 c0       	rjmp	.+32     	; 0x1c00 <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1be0:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <sleepmgr_locks+0x1>
    1be4:	8f 3f       	cpi	r24, 0xFF	; 255
    1be6:	09 f4       	brne	.+2      	; 0x1bea <tc_enable+0xdc>
    1be8:	ff cf       	rjmp	.-2      	; 0x1be8 <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1bea:	8f b7       	in	r24, 0x3f	; 63
    1bec:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1bee:	f8 94       	cli
	return flags;
    1bf0:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1bf2:	ed e0       	ldi	r30, 0x0D	; 13
    1bf4:	f4 e2       	ldi	r31, 0x24	; 36
    1bf6:	81 81       	ldd	r24, Z+1	; 0x01
    1bf8:	8f 5f       	subi	r24, 0xFF	; 255
    1bfa:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bfc:	9f bf       	out	0x3f, r25	; 63
    1bfe:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	08 95       	ret

00001c0c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1c10:	e0 91 74 21 	lds	r30, 0x2174	; 0x802174 <transfer>
    1c14:	f0 91 75 21 	lds	r31, 0x2175	; 0x802175 <transfer+0x1>
    1c18:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1c1a:	83 ff       	sbrs	r24, 3
    1c1c:	08 c0       	rjmp	.+16     	; 0x1c2e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1c1e:	88 60       	ori	r24, 0x08	; 8
    1c20:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1c22:	83 e0       	ldi	r24, 0x03	; 3
    1c24:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1c26:	86 ef       	ldi	r24, 0xF6	; 246
    1c28:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
    1c2c:	83 c0       	rjmp	.+262    	; 0x1d34 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1c2e:	98 2f       	mov	r25, r24
    1c30:	94 71       	andi	r25, 0x14	; 20
    1c32:	31 f0       	breq	.+12     	; 0x1c40 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1c38:	8f ef       	ldi	r24, 0xFF	; 255
    1c3a:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
    1c3e:	7a c0       	rjmp	.+244    	; 0x1d34 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1c40:	86 ff       	sbrs	r24, 6
    1c42:	43 c0       	rjmp	.+134    	; 0x1cca <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1c44:	c4 e7       	ldi	r28, 0x74	; 116
    1c46:	d1 e2       	ldi	r29, 0x21	; 33
    1c48:	aa 81       	ldd	r26, Y+2	; 0x02
    1c4a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c50:	14 96       	adiw	r26, 0x04	; 4
    1c52:	2d 91       	ld	r18, X+
    1c54:	3c 91       	ld	r19, X
    1c56:	15 97       	sbiw	r26, 0x05	; 5
    1c58:	82 17       	cp	r24, r18
    1c5a:	93 07       	cpc	r25, r19
    1c5c:	6c f4       	brge	.+26     	; 0x1c78 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1c5e:	9c 01       	movw	r18, r24
    1c60:	2f 5f       	subi	r18, 0xFF	; 255
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	20 93 78 21 	sts	0x2178, r18	; 0x802178 <transfer+0x4>
    1c68:	30 93 79 21 	sts	0x2179, r19	; 0x802179 <transfer+0x5>
    1c6c:	a8 0f       	add	r26, r24
    1c6e:	b9 1f       	adc	r27, r25
    1c70:	11 96       	adiw	r26, 0x01	; 1
    1c72:	8c 91       	ld	r24, X
    1c74:	87 83       	std	Z+7, r24	; 0x07
    1c76:	5e c0       	rjmp	.+188    	; 0x1d34 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1c78:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <transfer+0x6>
    1c7c:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <transfer+0x7>
    1c80:	18 96       	adiw	r26, 0x08	; 8
    1c82:	2d 91       	ld	r18, X+
    1c84:	3c 91       	ld	r19, X
    1c86:	19 97       	sbiw	r26, 0x09	; 9
    1c88:	82 17       	cp	r24, r18
    1c8a:	93 07       	cpc	r25, r19
    1c8c:	c8 f4       	brcc	.+50     	; 0x1cc0 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1c8e:	20 91 7c 21 	lds	r18, 0x217C	; 0x80217c <transfer+0x8>
    1c92:	22 23       	and	r18, r18
    1c94:	21 f0       	breq	.+8      	; 0x1c9e <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1c96:	86 81       	ldd	r24, Z+6	; 0x06
    1c98:	81 60       	ori	r24, 0x01	; 1
    1c9a:	86 83       	std	Z+6, r24	; 0x06
    1c9c:	4b c0       	rjmp	.+150    	; 0x1d34 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1c9e:	16 96       	adiw	r26, 0x06	; 6
    1ca0:	2d 91       	ld	r18, X+
    1ca2:	3c 91       	ld	r19, X
    1ca4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1ca6:	ac 01       	movw	r20, r24
    1ca8:	4f 5f       	subi	r20, 0xFF	; 255
    1caa:	5f 4f       	sbci	r21, 0xFF	; 255
    1cac:	40 93 7a 21 	sts	0x217A, r20	; 0x80217a <transfer+0x6>
    1cb0:	50 93 7b 21 	sts	0x217B, r21	; 0x80217b <transfer+0x7>
    1cb4:	d9 01       	movw	r26, r18
    1cb6:	a8 0f       	add	r26, r24
    1cb8:	b9 1f       	adc	r27, r25
    1cba:	8c 91       	ld	r24, X
    1cbc:	87 83       	std	Z+7, r24	; 0x07
    1cbe:	3a c0       	rjmp	.+116    	; 0x1d34 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1cc4:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <transfer+0xa>
    1cc8:	35 c0       	rjmp	.+106    	; 0x1d34 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1cca:	88 23       	and	r24, r24
    1ccc:	84 f5       	brge	.+96     	; 0x1d2e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1cce:	a4 e7       	ldi	r26, 0x74	; 116
    1cd0:	b1 e2       	ldi	r27, 0x21	; 33
    1cd2:	12 96       	adiw	r26, 0x02	; 2
    1cd4:	cd 91       	ld	r28, X+
    1cd6:	dc 91       	ld	r29, X
    1cd8:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1cda:	16 96       	adiw	r26, 0x06	; 6
    1cdc:	8d 91       	ld	r24, X+
    1cde:	9c 91       	ld	r25, X
    1ce0:	17 97       	sbiw	r26, 0x07	; 7
    1ce2:	28 85       	ldd	r18, Y+8	; 0x08
    1ce4:	39 85       	ldd	r19, Y+9	; 0x09
    1ce6:	82 17       	cp	r24, r18
    1ce8:	93 07       	cpc	r25, r19
    1cea:	d8 f4       	brcc	.+54     	; 0x1d22 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1cec:	6e 81       	ldd	r22, Y+6	; 0x06
    1cee:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	2f 5f       	subi	r18, 0xFF	; 255
    1cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf6:	20 93 7a 21 	sts	0x217A, r18	; 0x80217a <transfer+0x6>
    1cfa:	30 93 7b 21 	sts	0x217B, r19	; 0x80217b <transfer+0x7>
    1cfe:	47 81       	ldd	r20, Z+7	; 0x07
    1d00:	db 01       	movw	r26, r22
    1d02:	a8 0f       	add	r26, r24
    1d04:	b9 1f       	adc	r27, r25
    1d06:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1d08:	88 85       	ldd	r24, Y+8	; 0x08
    1d0a:	99 85       	ldd	r25, Y+9	; 0x09
    1d0c:	28 17       	cp	r18, r24
    1d0e:	39 07       	cpc	r19, r25
    1d10:	18 f4       	brcc	.+6      	; 0x1d18 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	83 83       	std	Z+3, r24	; 0x03
    1d16:	0e c0       	rjmp	.+28     	; 0x1d34 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1d18:	87 e0       	ldi	r24, 0x07	; 7
    1d1a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1d1c:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <transfer+0xa>
    1d20:	09 c0       	rjmp	.+18     	; 0x1d34 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1d22:	83 e0       	ldi	r24, 0x03	; 3
    1d24:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1d26:	89 ef       	ldi	r24, 0xF9	; 249
    1d28:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1d2e:	8b ef       	ldi	r24, 0xFB	; 251
    1d30:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
	}
}
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	08 95       	ret

00001d3a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1d3a:	1f 92       	push	r1
    1d3c:	0f 92       	push	r0
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	0f 92       	push	r0
    1d42:	11 24       	eor	r1, r1
    1d44:	0b b6       	in	r0, 0x3b	; 59
    1d46:	0f 92       	push	r0
    1d48:	2f 93       	push	r18
    1d4a:	3f 93       	push	r19
    1d4c:	4f 93       	push	r20
    1d4e:	5f 93       	push	r21
    1d50:	6f 93       	push	r22
    1d52:	7f 93       	push	r23
    1d54:	8f 93       	push	r24
    1d56:	9f 93       	push	r25
    1d58:	af 93       	push	r26
    1d5a:	bf 93       	push	r27
    1d5c:	ef 93       	push	r30
    1d5e:	ff 93       	push	r31
    1d60:	55 df       	rcall	.-342    	; 0x1c0c <twim_interrupt_handler>
    1d62:	ff 91       	pop	r31
    1d64:	ef 91       	pop	r30
    1d66:	bf 91       	pop	r27
    1d68:	af 91       	pop	r26
    1d6a:	9f 91       	pop	r25
    1d6c:	8f 91       	pop	r24
    1d6e:	7f 91       	pop	r23
    1d70:	6f 91       	pop	r22
    1d72:	5f 91       	pop	r21
    1d74:	4f 91       	pop	r20
    1d76:	3f 91       	pop	r19
    1d78:	2f 91       	pop	r18
    1d7a:	0f 90       	pop	r0
    1d7c:	0b be       	out	0x3b, r0	; 59
    1d7e:	0f 90       	pop	r0
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	0f 90       	pop	r0
    1d84:	1f 90       	pop	r1
    1d86:	18 95       	reti

00001d88 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1d88:	1f 92       	push	r1
    1d8a:	0f 92       	push	r0
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	0f 92       	push	r0
    1d90:	11 24       	eor	r1, r1
    1d92:	0b b6       	in	r0, 0x3b	; 59
    1d94:	0f 92       	push	r0
    1d96:	2f 93       	push	r18
    1d98:	3f 93       	push	r19
    1d9a:	4f 93       	push	r20
    1d9c:	5f 93       	push	r21
    1d9e:	6f 93       	push	r22
    1da0:	7f 93       	push	r23
    1da2:	8f 93       	push	r24
    1da4:	9f 93       	push	r25
    1da6:	af 93       	push	r26
    1da8:	bf 93       	push	r27
    1daa:	ef 93       	push	r30
    1dac:	ff 93       	push	r31
    1dae:	2e df       	rcall	.-420    	; 0x1c0c <twim_interrupt_handler>
    1db0:	ff 91       	pop	r31
    1db2:	ef 91       	pop	r30
    1db4:	bf 91       	pop	r27
    1db6:	af 91       	pop	r26
    1db8:	9f 91       	pop	r25
    1dba:	8f 91       	pop	r24
    1dbc:	7f 91       	pop	r23
    1dbe:	6f 91       	pop	r22
    1dc0:	5f 91       	pop	r21
    1dc2:	4f 91       	pop	r20
    1dc4:	3f 91       	pop	r19
    1dc6:	2f 91       	pop	r18
    1dc8:	0f 90       	pop	r0
    1dca:	0b be       	out	0x3b, r0	; 59
    1dcc:	0f 90       	pop	r0
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	0f 90       	pop	r0
    1dd2:	1f 90       	pop	r1
    1dd4:	18 95       	reti

00001dd6 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1dd6:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    1dd8:	db 01       	movw	r26, r22
    1dda:	14 96       	adiw	r26, 0x04	; 4
    1ddc:	8c 91       	ld	r24, X
    1dde:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    1de0:	88 eb       	ldi	r24, 0xB8	; 184
    1de2:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    1de8:	e4 e7       	ldi	r30, 0x74	; 116
    1dea:	f1 e2       	ldi	r31, 0x21	; 33
    1dec:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    1dee:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    1df0:	e0 ea       	ldi	r30, 0xA0	; 160
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	82 81       	ldd	r24, Z+2	; 0x02
    1df6:	82 60       	ori	r24, 0x02	; 2
    1df8:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    1dfa:	78 94       	sei

	return STATUS_OK;
}
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	08 95       	ret

00001e00 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	1f 92       	push	r1
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	9c 01       	movw	r18, r24
    1e0c:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1e0e:	89 2b       	or	r24, r25
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <twi_master_transfer+0x14>
    1e12:	51 c0       	rjmp	.+162    	; 0x1eb6 <twi_master_transfer+0xb6>
    1e14:	30 97       	sbiw	r30, 0x00	; 0
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <twi_master_transfer+0x1a>
    1e18:	50 c0       	rjmp	.+160    	; 0x1eba <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1e1a:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1e1c:	80 91 7d 21 	lds	r24, 0x217D	; 0x80217d <transfer+0x9>
    1e20:	88 23       	and	r24, r24
    1e22:	19 f0       	breq	.+6      	; 0x1e2a <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    1e24:	99 23       	and	r25, r25
    1e26:	f1 f3       	breq	.-4      	; 0x1e24 <twi_master_transfer+0x24>
    1e28:	4a c0       	rjmp	.+148    	; 0x1ebe <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1e2a:	8f b7       	in	r24, 0x3f	; 63
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1e2e:	f8 94       	cli
	return flags;
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1e32:	a4 e7       	ldi	r26, 0x74	; 116
    1e34:	b1 e2       	ldi	r27, 0x21	; 33
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	19 96       	adiw	r26, 0x09	; 9
    1e3a:	9c 93       	st	X, r25
    1e3c:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    1e3e:	90 e8       	ldi	r25, 0x80	; 128
    1e40:	1a 96       	adiw	r26, 0x0a	; 10
    1e42:	9c 93       	st	X, r25
    1e44:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1e46:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1e48:	2d 93       	st	X+, r18
    1e4a:	3c 93       	st	X, r19
    1e4c:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    1e4e:	12 96       	adiw	r26, 0x02	; 2
    1e50:	6d 93       	st	X+, r22
    1e52:	7c 93       	st	X, r23
    1e54:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    1e56:	14 96       	adiw	r26, 0x04	; 4
    1e58:	1d 92       	st	X+, r1
    1e5a:	1c 92       	st	X, r1
    1e5c:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    1e5e:	16 96       	adiw	r26, 0x06	; 6
    1e60:	1d 92       	st	X+, r1
    1e62:	1c 92       	st	X, r1
    1e64:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    1e66:	18 96       	adiw	r26, 0x08	; 8
    1e68:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    1e6e:	64 81       	ldd	r22, Z+4	; 0x04
    1e70:	75 81       	ldd	r23, Z+5	; 0x05
    1e72:	67 2b       	or	r22, r23
    1e74:	11 f4       	brne	.+4      	; 0x1e7a <twi_master_transfer+0x7a>
    1e76:	41 11       	cpse	r20, r1
    1e78:	03 c0       	rjmp	.+6      	; 0x1e80 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    1e7a:	f9 01       	movw	r30, r18
    1e7c:	86 83       	std	Z+6, r24	; 0x06
    1e7e:	03 c0       	rjmp	.+6      	; 0x1e86 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    1e80:	81 60       	ori	r24, 0x01	; 1
    1e82:	f9 01       	movw	r30, r18
    1e84:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    1e86:	e4 e7       	ldi	r30, 0x74	; 116
    1e88:	f1 e2       	ldi	r31, 0x21	; 33
    1e8a:	92 85       	ldd	r25, Z+10	; 0x0a
    1e8c:	90 38       	cpi	r25, 0x80	; 128
    1e8e:	e9 f3       	breq	.-6      	; 0x1e8a <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1e90:	f9 01       	movw	r30, r18
    1e92:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1e94:	83 70       	andi	r24, 0x03	; 3
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	49 f0       	breq	.+18     	; 0x1eac <twi_master_transfer+0xac>
    1e9a:	a4 e7       	ldi	r26, 0x74	; 116
    1e9c:	b1 e2       	ldi	r27, 0x21	; 33
    1e9e:	ed 91       	ld	r30, X+
    1ea0:	fc 91       	ld	r31, X
    1ea2:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1ea4:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1ea6:	83 70       	andi	r24, 0x03	; 3
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	c9 f7       	brne	.-14     	; 0x1e9e <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    1eac:	e4 e7       	ldi	r30, 0x74	; 116
    1eae:	f1 e2       	ldi	r31, 0x21	; 33
    1eb0:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    1eb2:	11 86       	std	Z+9, r1	; 0x09
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    1eb6:	88 ef       	ldi	r24, 0xF8	; 248
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <twi_master_transfer+0xc0>
    1eba:	88 ef       	ldi	r24, 0xF8	; 248
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    1ebe:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1ec0:	0f 90       	pop	r0
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	08 95       	ret

00001ec8 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	1f 92       	push	r1
    1ece:	1f 92       	push	r1
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	81 11       	cpse	r24, r1
    1ed6:	26 c0       	rjmp	.+76     	; 0x1f24 <udd_sleep_mode+0x5c>
    1ed8:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <udd_b_idle>
    1edc:	99 23       	and	r25, r25
    1ede:	f9 f0       	breq	.+62     	; 0x1f1e <udd_sleep_mode+0x56>
    1ee0:	90 91 0e 24 	lds	r25, 0x240E	; 0x80240e <sleepmgr_locks+0x1>
    1ee4:	91 11       	cpse	r25, r1
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <udd_sleep_mode+0x22>
    1ee8:	ff cf       	rjmp	.-2      	; 0x1ee8 <udd_sleep_mode+0x20>
    1eea:	9f b7       	in	r25, 0x3f	; 63
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	f8 94       	cli
    1ef0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ef2:	ed e0       	ldi	r30, 0x0D	; 13
    1ef4:	f4 e2       	ldi	r31, 0x24	; 36
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	91 50       	subi	r25, 0x01	; 1
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	2f bf       	out	0x3f, r18	; 63
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <udd_sleep_mode+0x56>
    1f00:	90 91 0e 24 	lds	r25, 0x240E	; 0x80240e <sleepmgr_locks+0x1>
    1f04:	9f 3f       	cpi	r25, 0xFF	; 255
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <udd_sleep_mode+0x42>
    1f08:	ff cf       	rjmp	.-2      	; 0x1f08 <udd_sleep_mode+0x40>
    1f0a:	9f b7       	in	r25, 0x3f	; 63
    1f0c:	99 83       	std	Y+1, r25	; 0x01
    1f0e:	f8 94       	cli
    1f10:	29 81       	ldd	r18, Y+1	; 0x01
    1f12:	ed e0       	ldi	r30, 0x0D	; 13
    1f14:	f4 e2       	ldi	r31, 0x24	; 36
    1f16:	91 81       	ldd	r25, Z+1	; 0x01
    1f18:	9f 5f       	subi	r25, 0xFF	; 255
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	2f bf       	out	0x3f, r18	; 63
    1f1e:	80 93 ac 22 	sts	0x22AC, r24	; 0x8022ac <udd_b_idle>
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <udd_sleep_mode+0x66>
    1f24:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <udd_b_idle>
    1f28:	99 23       	and	r25, r25
    1f2a:	51 f3       	breq	.-44     	; 0x1f00 <udd_sleep_mode+0x38>
    1f2c:	f8 cf       	rjmp	.-16     	; 0x1f1e <udd_sleep_mode+0x56>
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	08 95       	ret

00001f38 <udd_ctrl_init>:
    1f38:	0f 93       	push	r16
    1f3a:	e8 ec       	ldi	r30, 0xC8	; 200
    1f3c:	f4 e0       	ldi	r31, 0x04	; 4
    1f3e:	80 81       	ld	r24, Z
    1f40:	8f 7d       	andi	r24, 0xDF	; 223
    1f42:	80 83       	st	Z, r24
    1f44:	80 81       	ld	r24, Z
    1f46:	8f 7d       	andi	r24, 0xDF	; 223
    1f48:	80 83       	st	Z, r24
    1f4a:	e0 e8       	ldi	r30, 0x80	; 128
    1f4c:	f2 e2       	ldi	r31, 0x22	; 34
    1f4e:	02 e0       	ldi	r16, 0x02	; 2
    1f50:	05 93       	las	Z, r16
    1f52:	10 92 82 22 	sts	0x2282, r1	; 0x802282 <udd_sram+0x16>
    1f56:	10 92 83 22 	sts	0x2283, r1	; 0x802283 <udd_sram+0x17>
    1f5a:	00 e2       	ldi	r16, 0x20	; 32
    1f5c:	06 93       	lac	Z, r16
    1f5e:	00 e4       	ldi	r16, 0x40	; 64
    1f60:	06 93       	lac	Z, r16
    1f62:	e8 e7       	ldi	r30, 0x78	; 120
    1f64:	f2 e2       	ldi	r31, 0x22	; 34
    1f66:	00 e4       	ldi	r16, 0x40	; 64
    1f68:	06 93       	lac	Z, r16
    1f6a:	ed ef       	ldi	r30, 0xFD	; 253
    1f6c:	f3 e2       	ldi	r31, 0x23	; 35
    1f6e:	14 86       	std	Z+12, r1	; 0x0c
    1f70:	15 86       	std	Z+13, r1	; 0x0d
    1f72:	16 86       	std	Z+14, r1	; 0x0e
    1f74:	17 86       	std	Z+15, r1	; 0x0f
    1f76:	12 86       	std	Z+10, r1	; 0x0a
    1f78:	13 86       	std	Z+11, r1	; 0x0b
    1f7a:	10 92 68 22 	sts	0x2268, r1	; 0x802268 <udd_ep_control_state>
    1f7e:	0f 91       	pop	r16
    1f80:	08 95       	ret

00001f82 <udd_ctrl_stall_data>:
    1f82:	0f 93       	push	r16
    1f84:	85 e0       	ldi	r24, 0x05	; 5
    1f86:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    1f8a:	e1 e8       	ldi	r30, 0x81	; 129
    1f8c:	f2 e2       	ldi	r31, 0x22	; 34
    1f8e:	04 e0       	ldi	r16, 0x04	; 4
    1f90:	05 93       	las	Z, r16
    1f92:	e9 e7       	ldi	r30, 0x79	; 121
    1f94:	f2 e2       	ldi	r31, 0x22	; 34
    1f96:	04 e0       	ldi	r16, 0x04	; 4
    1f98:	05 93       	las	Z, r16
    1f9a:	0f 91       	pop	r16
    1f9c:	08 95       	ret

00001f9e <udd_ctrl_send_zlp_in>:
    1f9e:	0f 93       	push	r16
    1fa0:	83 e0       	ldi	r24, 0x03	; 3
    1fa2:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    1fa6:	10 92 82 22 	sts	0x2282, r1	; 0x802282 <udd_sram+0x16>
    1faa:	10 92 83 22 	sts	0x2283, r1	; 0x802283 <udd_sram+0x17>
    1fae:	e0 e8       	ldi	r30, 0x80	; 128
    1fb0:	f2 e2       	ldi	r31, 0x22	; 34
    1fb2:	02 e0       	ldi	r16, 0x02	; 2
    1fb4:	06 93       	lac	Z, r16
    1fb6:	0f 91       	pop	r16
    1fb8:	08 95       	ret

00001fba <udd_ctrl_endofrequest>:
    1fba:	e0 91 09 24 	lds	r30, 0x2409	; 0x802409 <udd_g_ctrlreq+0xc>
    1fbe:	f0 91 0a 24 	lds	r31, 0x240A	; 0x80240a <udd_g_ctrlreq+0xd>
    1fc2:	30 97       	sbiw	r30, 0x00	; 0
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <udd_ctrl_endofrequest+0xe>
    1fc6:	19 95       	eicall
    1fc8:	08 95       	ret

00001fca <udd_ctrl_in_sent>:
    1fca:	0f 93       	push	r16
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    1fd4:	83 30       	cpi	r24, 0x03	; 3
    1fd6:	19 f4       	brne	.+6      	; 0x1fde <udd_ctrl_in_sent+0x14>
    1fd8:	f0 df       	rcall	.-32     	; 0x1fba <udd_ctrl_endofrequest>
    1fda:	ae df       	rcall	.-164    	; 0x1f38 <udd_ctrl_init>
    1fdc:	5e c0       	rjmp	.+188    	; 0x209a <udd_ctrl_in_sent+0xd0>
    1fde:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    1fe2:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    1fe6:	c0 91 07 24 	lds	r28, 0x2407	; 0x802407 <udd_g_ctrlreq+0xa>
    1fea:	d0 91 08 24 	lds	r29, 0x2408	; 0x802408 <udd_g_ctrlreq+0xb>
    1fee:	c8 1b       	sub	r28, r24
    1ff0:	d9 0b       	sbc	r29, r25
    1ff2:	71 f5       	brne	.+92     	; 0x2050 <udd_ctrl_in_sent+0x86>
    1ff4:	20 91 66 22 	lds	r18, 0x2266	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    1ff8:	30 91 67 22 	lds	r19, 0x2267	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    1ffc:	82 0f       	add	r24, r18
    1ffe:	93 1f       	adc	r25, r19
    2000:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2004:	90 93 67 22 	sts	0x2267, r25	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    2008:	20 91 03 24 	lds	r18, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    200c:	30 91 04 24 	lds	r19, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    2010:	82 17       	cp	r24, r18
    2012:	93 07       	cpc	r25, r19
    2014:	21 f0       	breq	.+8      	; 0x201e <udd_ctrl_in_sent+0x54>
    2016:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <b_shortpacket.5472>
    201a:	88 23       	and	r24, r24
    201c:	41 f0       	breq	.+16     	; 0x202e <udd_ctrl_in_sent+0x64>
    201e:	84 e0       	ldi	r24, 0x04	; 4
    2020:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    2024:	e8 e7       	ldi	r30, 0x78	; 120
    2026:	f2 e2       	ldi	r31, 0x22	; 34
    2028:	02 e0       	ldi	r16, 0x02	; 2
    202a:	06 93       	lac	Z, r16
    202c:	36 c0       	rjmp	.+108    	; 0x209a <udd_ctrl_in_sent+0xd0>
    202e:	e0 91 0b 24 	lds	r30, 0x240B	; 0x80240b <udd_g_ctrlreq+0xe>
    2032:	f0 91 0c 24 	lds	r31, 0x240C	; 0x80240c <udd_g_ctrlreq+0xf>
    2036:	30 97       	sbiw	r30, 0x00	; 0
    2038:	99 f0       	breq	.+38     	; 0x2060 <udd_ctrl_in_sent+0x96>
    203a:	19 95       	eicall
    203c:	88 23       	and	r24, r24
    203e:	81 f0       	breq	.+32     	; 0x2060 <udd_ctrl_in_sent+0x96>
    2040:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
    2044:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2048:	c0 91 07 24 	lds	r28, 0x2407	; 0x802407 <udd_g_ctrlreq+0xa>
    204c:	d0 91 08 24 	lds	r29, 0x2408	; 0x802408 <udd_g_ctrlreq+0xb>
    2050:	c0 34       	cpi	r28, 0x40	; 64
    2052:	d1 05       	cpc	r29, r1
    2054:	28 f0       	brcs	.+10     	; 0x2060 <udd_ctrl_in_sent+0x96>
    2056:	10 92 7f 21 	sts	0x217F, r1	; 0x80217f <b_shortpacket.5472>
    205a:	c0 e4       	ldi	r28, 0x40	; 64
    205c:	d0 e0       	ldi	r29, 0x00	; 0
    205e:	03 c0       	rjmp	.+6      	; 0x2066 <udd_ctrl_in_sent+0x9c>
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	80 93 7f 21 	sts	0x217F, r24	; 0x80217f <b_shortpacket.5472>
    2066:	ec e6       	ldi	r30, 0x6C	; 108
    2068:	f2 e2       	ldi	r31, 0x22	; 34
    206a:	c6 8b       	std	Z+22, r28	; 0x16
    206c:	d7 8b       	std	Z+23, r29	; 0x17
    206e:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    2072:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2076:	20 91 05 24 	lds	r18, 0x2405	; 0x802405 <udd_g_ctrlreq+0x8>
    207a:	30 91 06 24 	lds	r19, 0x2406	; 0x802406 <udd_g_ctrlreq+0x9>
    207e:	28 0f       	add	r18, r24
    2080:	39 1f       	adc	r19, r25
    2082:	20 8f       	std	Z+24, r18	; 0x18
    2084:	31 8f       	std	Z+25, r19	; 0x19
    2086:	c8 0f       	add	r28, r24
    2088:	d9 1f       	adc	r29, r25
    208a:	c0 93 64 22 	sts	0x2264, r28	; 0x802264 <udd_ctrl_payload_nb_trans>
    208e:	d0 93 65 22 	sts	0x2265, r29	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2092:	e0 e8       	ldi	r30, 0x80	; 128
    2094:	f2 e2       	ldi	r31, 0x22	; 34
    2096:	02 e0       	ldi	r16, 0x02	; 2
    2098:	06 93       	lac	Z, r16
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	0f 91       	pop	r16
    20a0:	08 95       	ret

000020a2 <udd_ep_get_size>:
    20a2:	fc 01       	movw	r30, r24
    20a4:	81 81       	ldd	r24, Z+1	; 0x01
    20a6:	e8 2f       	mov	r30, r24
    20a8:	e7 70       	andi	r30, 0x07	; 7
    20aa:	8e 2f       	mov	r24, r30
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	fc 01       	movw	r30, r24
    20b0:	31 97       	sbiw	r30, 0x01	; 1
    20b2:	e7 30       	cpi	r30, 0x07	; 7
    20b4:	f1 05       	cpc	r31, r1
    20b6:	d8 f4       	brcc	.+54     	; 0x20ee <udd_ep_get_size+0x4c>
    20b8:	88 27       	eor	r24, r24
    20ba:	e2 50       	subi	r30, 0x02	; 2
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	8f 4f       	sbci	r24, 0xFF	; 255
    20c0:	0c 94 2c 24 	jmp	0x4858	; 0x4858 <__tablejump2__>
    20c4:	80 e1       	ldi	r24, 0x10	; 16
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	08 95       	ret
    20ca:	80 e2       	ldi	r24, 0x20	; 32
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	08 95       	ret
    20d0:	80 e4       	ldi	r24, 0x40	; 64
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	08 95       	ret
    20d6:	80 e8       	ldi	r24, 0x80	; 128
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	08 95       	ret
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	91 e0       	ldi	r25, 0x01	; 1
    20e0:	08 95       	ret
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	92 e0       	ldi	r25, 0x02	; 2
    20e6:	08 95       	ret
    20e8:	8f ef       	ldi	r24, 0xFF	; 255
    20ea:	93 e0       	ldi	r25, 0x03	; 3
    20ec:	08 95       	ret
    20ee:	88 e0       	ldi	r24, 0x08	; 8
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	08 95       	ret

000020f4 <udd_ep_get_job>:
    20f4:	28 2f       	mov	r18, r24
    20f6:	2f 70       	andi	r18, 0x0F	; 15
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	22 0f       	add	r18, r18
    20fc:	33 1f       	adc	r19, r19
    20fe:	08 2e       	mov	r0, r24
    2100:	00 0c       	add	r0, r0
    2102:	99 0b       	sbc	r25, r25
    2104:	88 27       	eor	r24, r24
    2106:	99 0f       	add	r25, r25
    2108:	88 1f       	adc	r24, r24
    210a:	99 27       	eor	r25, r25
    210c:	82 0f       	add	r24, r18
    210e:	93 1f       	adc	r25, r19
    2110:	02 97       	sbiw	r24, 0x02	; 2
    2112:	9c 01       	movw	r18, r24
    2114:	22 0f       	add	r18, r18
    2116:	33 1f       	adc	r19, r19
    2118:	22 0f       	add	r18, r18
    211a:	33 1f       	adc	r19, r19
    211c:	22 0f       	add	r18, r18
    211e:	33 1f       	adc	r19, r19
    2120:	82 0f       	add	r24, r18
    2122:	93 1f       	adc	r25, r19
    2124:	80 50       	subi	r24, 0x00	; 0
    2126:	9e 4d       	sbci	r25, 0xDE	; 222
    2128:	08 95       	ret

0000212a <udd_ctrl_interrupt_tc_setup>:
    212a:	0f 93       	push	r16
    212c:	cf 93       	push	r28
    212e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2132:	80 ff       	sbrs	r24, 0
    2134:	65 c0       	rjmp	.+202    	; 0x2200 <udd_ctrl_interrupt_tc_setup+0xd6>
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    213c:	e8 e7       	ldi	r30, 0x78	; 120
    213e:	f2 e2       	ldi	r31, 0x22	; 34
    2140:	00 e8       	ldi	r16, 0x80	; 128
    2142:	06 93       	lac	Z, r16
    2144:	e0 e8       	ldi	r30, 0x80	; 128
    2146:	f2 e2       	ldi	r31, 0x22	; 34
    2148:	00 e8       	ldi	r16, 0x80	; 128
    214a:	06 93       	lac	Z, r16
    214c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2150:	e8 e7       	ldi	r30, 0x78	; 120
    2152:	f2 e2       	ldi	r31, 0x22	; 34
    2154:	00 e1       	ldi	r16, 0x10	; 16
    2156:	06 93       	lac	Z, r16
    2158:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    215c:	88 23       	and	r24, r24
    215e:	29 f0       	breq	.+10     	; 0x216a <udd_ctrl_interrupt_tc_setup+0x40>
    2160:	83 50       	subi	r24, 0x03	; 3
    2162:	82 30       	cpi	r24, 0x02	; 2
    2164:	08 f4       	brcc	.+2      	; 0x2168 <udd_ctrl_interrupt_tc_setup+0x3e>
    2166:	29 df       	rcall	.-430    	; 0x1fba <udd_ctrl_endofrequest>
    2168:	e7 de       	rcall	.-562    	; 0x1f38 <udd_ctrl_init>
    216a:	80 91 7a 22 	lds	r24, 0x227A	; 0x80227a <udd_sram+0xe>
    216e:	90 91 7b 22 	lds	r25, 0x227B	; 0x80227b <udd_sram+0xf>
    2172:	08 97       	sbiw	r24, 0x08	; 8
    2174:	09 f0       	breq	.+2      	; 0x2178 <udd_ctrl_interrupt_tc_setup+0x4e>
    2176:	46 c0       	rjmp	.+140    	; 0x2204 <udd_ctrl_interrupt_tc_setup+0xda>
    2178:	88 e0       	ldi	r24, 0x08	; 8
    217a:	e4 e2       	ldi	r30, 0x24	; 36
    217c:	f2 e2       	ldi	r31, 0x22	; 34
    217e:	ad ef       	ldi	r26, 0xFD	; 253
    2180:	b3 e2       	ldi	r27, 0x23	; 35
    2182:	01 90       	ld	r0, Z+
    2184:	0d 92       	st	X+, r0
    2186:	8a 95       	dec	r24
    2188:	e1 f7       	brne	.-8      	; 0x2182 <udd_ctrl_interrupt_tc_setup+0x58>
    218a:	e8 ec       	ldi	r30, 0xC8	; 200
    218c:	f4 e0       	ldi	r31, 0x04	; 4
    218e:	80 81       	ld	r24, Z
    2190:	80 62       	ori	r24, 0x20	; 32
    2192:	80 83       	st	Z, r24
    2194:	80 81       	ld	r24, Z
    2196:	80 62       	ori	r24, 0x20	; 32
    2198:	80 83       	st	Z, r24
    219a:	0e 94 c6 20 	call	0x418c	; 0x418c <udc_process_setup>
    219e:	c8 2f       	mov	r28, r24
    21a0:	81 11       	cpse	r24, r1
    21a2:	03 c0       	rjmp	.+6      	; 0x21aa <udd_ctrl_interrupt_tc_setup+0x80>
    21a4:	ee de       	rcall	.-548    	; 0x1f82 <udd_ctrl_stall_data>
    21a6:	c1 e0       	ldi	r28, 0x01	; 1
    21a8:	2e c0       	rjmp	.+92     	; 0x2206 <udd_ctrl_interrupt_tc_setup+0xdc>
    21aa:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <udd_g_ctrlreq>
    21ae:	88 23       	and	r24, r24
    21b0:	6c f4       	brge	.+26     	; 0x21cc <udd_ctrl_interrupt_tc_setup+0xa2>
    21b2:	10 92 66 22 	sts	0x2266, r1	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    21b6:	10 92 67 22 	sts	0x2267, r1	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    21ba:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
    21be:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    21c8:	00 df       	rcall	.-512    	; 0x1fca <udd_ctrl_in_sent>
    21ca:	1d c0       	rjmp	.+58     	; 0x2206 <udd_ctrl_interrupt_tc_setup+0xdc>
    21cc:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    21d0:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    21d4:	89 2b       	or	r24, r25
    21d6:	11 f4       	brne	.+4      	; 0x21dc <udd_ctrl_interrupt_tc_setup+0xb2>
    21d8:	e2 de       	rcall	.-572    	; 0x1f9e <udd_ctrl_send_zlp_in>
    21da:	15 c0       	rjmp	.+42     	; 0x2206 <udd_ctrl_interrupt_tc_setup+0xdc>
    21dc:	10 92 66 22 	sts	0x2266, r1	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    21e0:	10 92 67 22 	sts	0x2267, r1	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    21e4:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
    21e8:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    21f2:	e8 e7       	ldi	r30, 0x78	; 120
    21f4:	f2 e2       	ldi	r31, 0x22	; 34
    21f6:	02 e0       	ldi	r16, 0x02	; 2
    21f8:	06 93       	lac	Z, r16
    21fa:	00 e2       	ldi	r16, 0x20	; 32
    21fc:	06 93       	lac	Z, r16
    21fe:	03 c0       	rjmp	.+6      	; 0x2206 <udd_ctrl_interrupt_tc_setup+0xdc>
    2200:	c0 e0       	ldi	r28, 0x00	; 0
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <udd_ctrl_interrupt_tc_setup+0xdc>
    2204:	c1 e0       	ldi	r28, 0x01	; 1
    2206:	8c 2f       	mov	r24, r28
    2208:	cf 91       	pop	r28
    220a:	0f 91       	pop	r16
    220c:	08 95       	ret

0000220e <udd_ep_trans_complet>:
    220e:	8f 92       	push	r8
    2210:	9f 92       	push	r9
    2212:	af 92       	push	r10
    2214:	bf 92       	push	r11
    2216:	df 92       	push	r13
    2218:	ef 92       	push	r14
    221a:	ff 92       	push	r15
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	d8 2e       	mov	r13, r24
    2226:	66 df       	rcall	.-308    	; 0x20f4 <udd_ep_get_job>
    2228:	8c 01       	movw	r16, r24
    222a:	cd 2d       	mov	r28, r13
    222c:	cf 70       	andi	r28, 0x0F	; 15
    222e:	d0 e0       	ldi	r29, 0x00	; 0
    2230:	ce 01       	movw	r24, r28
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	cd 2d       	mov	r28, r13
    2238:	0d 2c       	mov	r0, r13
    223a:	00 0c       	add	r0, r0
    223c:	dd 0b       	sbc	r29, r29
    223e:	cc 27       	eor	r28, r28
    2240:	dd 0f       	add	r29, r29
    2242:	cc 1f       	adc	r28, r28
    2244:	dd 27       	eor	r29, r29
    2246:	c8 0f       	add	r28, r24
    2248:	d9 1f       	adc	r29, r25
    224a:	ce 01       	movw	r24, r28
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	9c 01       	movw	r18, r24
    225a:	28 58       	subi	r18, 0x88	; 136
    225c:	3d 4d       	sbci	r19, 0xDD	; 221
    225e:	79 01       	movw	r14, r18
    2260:	c9 01       	movw	r24, r18
    2262:	1f df       	rcall	.-450    	; 0x20a2 <udd_ep_get_size>
    2264:	4c 01       	movw	r8, r24
    2266:	dd 20       	and	r13, r13
    2268:	0c f0       	brlt	.+2      	; 0x226c <udd_ep_trans_complet+0x5e>
    226a:	7b c0       	rjmp	.+246    	; 0x2362 <udd_ep_trans_complet+0x154>
    226c:	fe 01       	movw	r30, r28
    226e:	ee 0f       	add	r30, r30
    2270:	ff 1f       	adc	r31, r31
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	ee 0f       	add	r30, r30
    2278:	ff 1f       	adc	r31, r31
    227a:	e4 59       	subi	r30, 0x94	; 148
    227c:	fd 4d       	sbci	r31, 0xDD	; 221
    227e:	22 89       	ldd	r18, Z+18	; 0x12
    2280:	33 89       	ldd	r19, Z+19	; 0x13
    2282:	d8 01       	movw	r26, r16
    2284:	15 96       	adiw	r26, 0x05	; 5
    2286:	8d 91       	ld	r24, X+
    2288:	9c 91       	ld	r25, X
    228a:	16 97       	sbiw	r26, 0x06	; 6
    228c:	82 0f       	add	r24, r18
    228e:	93 1f       	adc	r25, r19
    2290:	15 96       	adiw	r26, 0x05	; 5
    2292:	8d 93       	st	X+, r24
    2294:	9c 93       	st	X, r25
    2296:	16 97       	sbiw	r26, 0x06	; 6
    2298:	13 96       	adiw	r26, 0x03	; 3
    229a:	2d 91       	ld	r18, X+
    229c:	3c 91       	ld	r19, X
    229e:	14 97       	sbiw	r26, 0x04	; 4
    22a0:	82 17       	cp	r24, r18
    22a2:	93 07       	cpc	r25, r19
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <udd_ep_trans_complet+0x9a>
    22a6:	47 c0       	rjmp	.+142    	; 0x2336 <udd_ep_trans_complet+0x128>
    22a8:	28 1b       	sub	r18, r24
    22aa:	39 0b       	sbc	r19, r25
    22ac:	21 15       	cp	r18, r1
    22ae:	b4 e0       	ldi	r27, 0x04	; 4
    22b0:	3b 07       	cpc	r19, r27
    22b2:	40 f0       	brcs	.+16     	; 0x22c4 <udd_ep_trans_complet+0xb6>
    22b4:	2f ef       	ldi	r18, 0xFF	; 255
    22b6:	33 e0       	ldi	r19, 0x03	; 3
    22b8:	c9 01       	movw	r24, r18
    22ba:	b4 01       	movw	r22, r8
    22bc:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodhi4>
    22c0:	28 1b       	sub	r18, r24
    22c2:	39 0b       	sbc	r19, r25
    22c4:	f8 01       	movw	r30, r16
    22c6:	80 81       	ld	r24, Z
    22c8:	81 ff       	sbrs	r24, 1
    22ca:	0a c0       	rjmp	.+20     	; 0x22e0 <udd_ep_trans_complet+0xd2>
    22cc:	c9 01       	movw	r24, r18
    22ce:	b4 01       	movw	r22, r8
    22d0:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodhi4>
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	89 2b       	or	r24, r25
    22d8:	09 f0       	breq	.+2      	; 0x22dc <udd_ep_trans_complet+0xce>
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	84 2f       	mov	r24, r20
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <udd_ep_trans_complet+0xd4>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	d8 01       	movw	r26, r16
    22e4:	9c 91       	ld	r25, X
    22e6:	80 fb       	bst	r24, 0
    22e8:	91 f9       	bld	r25, 1
    22ea:	9c 93       	st	X, r25
    22ec:	fe 01       	movw	r30, r28
    22ee:	ee 0f       	add	r30, r30
    22f0:	ff 1f       	adc	r31, r31
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	ee 0f       	add	r30, r30
    22f8:	ff 1f       	adc	r31, r31
    22fa:	e4 59       	subi	r30, 0x94	; 148
    22fc:	fd 4d       	sbci	r31, 0xDD	; 221
    22fe:	12 8a       	std	Z+18, r1	; 0x12
    2300:	13 8a       	std	Z+19, r1	; 0x13
    2302:	26 87       	std	Z+14, r18	; 0x0e
    2304:	37 87       	std	Z+15, r19	; 0x0f
    2306:	11 96       	adiw	r26, 0x01	; 1
    2308:	2d 91       	ld	r18, X+
    230a:	3c 91       	ld	r19, X
    230c:	12 97       	sbiw	r26, 0x02	; 2
    230e:	15 96       	adiw	r26, 0x05	; 5
    2310:	8d 91       	ld	r24, X+
    2312:	9c 91       	ld	r25, X
    2314:	16 97       	sbiw	r26, 0x06	; 6
    2316:	82 0f       	add	r24, r18
    2318:	93 1f       	adc	r25, r19
    231a:	cc 0f       	add	r28, r28
    231c:	dd 1f       	adc	r29, r29
    231e:	cc 0f       	add	r28, r28
    2320:	dd 1f       	adc	r29, r29
    2322:	cc 0f       	add	r28, r28
    2324:	dd 1f       	adc	r29, r29
    2326:	c4 58       	subi	r28, 0x84	; 132
    2328:	dd 4d       	sbci	r29, 0xDD	; 221
    232a:	88 83       	st	Y, r24
    232c:	99 83       	std	Y+1, r25	; 0x01
    232e:	f7 01       	movw	r30, r14
    2330:	02 e0       	ldi	r16, 0x02	; 2
    2332:	06 93       	lac	Z, r16
    2334:	e4 c0       	rjmp	.+456    	; 0x24fe <udd_ep_trans_complet+0x2f0>
    2336:	d8 01       	movw	r26, r16
    2338:	8c 91       	ld	r24, X
    233a:	81 ff       	sbrs	r24, 1
    233c:	cd c0       	rjmp	.+410    	; 0x24d8 <udd_ep_trans_complet+0x2ca>
    233e:	8d 7f       	andi	r24, 0xFD	; 253
    2340:	8c 93       	st	X, r24
    2342:	cc 0f       	add	r28, r28
    2344:	dd 1f       	adc	r29, r29
    2346:	cc 0f       	add	r28, r28
    2348:	dd 1f       	adc	r29, r29
    234a:	cc 0f       	add	r28, r28
    234c:	dd 1f       	adc	r29, r29
    234e:	c4 59       	subi	r28, 0x94	; 148
    2350:	dd 4d       	sbci	r29, 0xDD	; 221
    2352:	1a 8a       	std	Y+18, r1	; 0x12
    2354:	1b 8a       	std	Y+19, r1	; 0x13
    2356:	1e 86       	std	Y+14, r1	; 0x0e
    2358:	1f 86       	std	Y+15, r1	; 0x0f
    235a:	f7 01       	movw	r30, r14
    235c:	02 e0       	ldi	r16, 0x02	; 2
    235e:	06 93       	lac	Z, r16
    2360:	ce c0       	rjmp	.+412    	; 0x24fe <udd_ep_trans_complet+0x2f0>
    2362:	fe 01       	movw	r30, r28
    2364:	ee 0f       	add	r30, r30
    2366:	ff 1f       	adc	r31, r31
    2368:	ee 0f       	add	r30, r30
    236a:	ff 1f       	adc	r31, r31
    236c:	ee 0f       	add	r30, r30
    236e:	ff 1f       	adc	r31, r31
    2370:	e4 59       	subi	r30, 0x94	; 148
    2372:	fd 4d       	sbci	r31, 0xDD	; 221
    2374:	a6 84       	ldd	r10, Z+14	; 0x0e
    2376:	b7 84       	ldd	r11, Z+15	; 0x0f
    2378:	d8 01       	movw	r26, r16
    237a:	8c 91       	ld	r24, X
    237c:	82 ff       	sbrs	r24, 2
    237e:	1b c0       	rjmp	.+54     	; 0x23b6 <udd_ep_trans_complet+0x1a8>
    2380:	11 96       	adiw	r26, 0x01	; 1
    2382:	ed 91       	ld	r30, X+
    2384:	fc 91       	ld	r31, X
    2386:	12 97       	sbiw	r26, 0x02	; 2
    2388:	15 96       	adiw	r26, 0x05	; 5
    238a:	2d 91       	ld	r18, X+
    238c:	3c 91       	ld	r19, X
    238e:	16 97       	sbiw	r26, 0x06	; 6
    2390:	13 96       	adiw	r26, 0x03	; 3
    2392:	8d 91       	ld	r24, X+
    2394:	9c 91       	ld	r25, X
    2396:	14 97       	sbiw	r26, 0x04	; 4
    2398:	b4 01       	movw	r22, r8
    239a:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodhi4>
    239e:	b0 e4       	ldi	r27, 0x40	; 64
    23a0:	db 9e       	mul	r13, r27
    23a2:	b0 01       	movw	r22, r0
    23a4:	11 24       	eor	r1, r1
    23a6:	60 5c       	subi	r22, 0xC0	; 192
    23a8:	7e 4d       	sbci	r23, 0xDE	; 222
    23aa:	ac 01       	movw	r20, r24
    23ac:	cf 01       	movw	r24, r30
    23ae:	82 0f       	add	r24, r18
    23b0:	93 1f       	adc	r25, r19
    23b2:	0e 94 43 24 	call	0x4886	; 0x4886 <memcpy>
    23b6:	f8 01       	movw	r30, r16
    23b8:	25 81       	ldd	r18, Z+5	; 0x05
    23ba:	36 81       	ldd	r19, Z+6	; 0x06
    23bc:	2a 0d       	add	r18, r10
    23be:	3b 1d       	adc	r19, r11
    23c0:	25 83       	std	Z+5, r18	; 0x05
    23c2:	36 83       	std	Z+6, r19	; 0x06
    23c4:	83 81       	ldd	r24, Z+3	; 0x03
    23c6:	94 81       	ldd	r25, Z+4	; 0x04
    23c8:	82 17       	cp	r24, r18
    23ca:	93 07       	cpc	r25, r19
    23cc:	68 f4       	brcc	.+26     	; 0x23e8 <udd_ep_trans_complet+0x1da>
    23ce:	85 83       	std	Z+5, r24	; 0x05
    23d0:	96 83       	std	Z+6, r25	; 0x06
    23d2:	cc 0f       	add	r28, r28
    23d4:	dd 1f       	adc	r29, r29
    23d6:	cc 0f       	add	r28, r28
    23d8:	dd 1f       	adc	r29, r29
    23da:	cc 0f       	add	r28, r28
    23dc:	dd 1f       	adc	r29, r29
    23de:	c4 59       	subi	r28, 0x94	; 148
    23e0:	dd 4d       	sbci	r29, 0xDD	; 221
    23e2:	8a 89       	ldd	r24, Y+18	; 0x12
    23e4:	9b 89       	ldd	r25, Y+19	; 0x13
    23e6:	78 c0       	rjmp	.+240    	; 0x24d8 <udd_ep_trans_complet+0x2ca>
    23e8:	fe 01       	movw	r30, r28
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	ee 0f       	add	r30, r30
    23f0:	ff 1f       	adc	r31, r31
    23f2:	ee 0f       	add	r30, r30
    23f4:	ff 1f       	adc	r31, r31
    23f6:	e4 59       	subi	r30, 0x94	; 148
    23f8:	fd 4d       	sbci	r31, 0xDD	; 221
    23fa:	42 89       	ldd	r20, Z+18	; 0x12
    23fc:	53 89       	ldd	r21, Z+19	; 0x13
    23fe:	a4 16       	cp	r10, r20
    2400:	b5 06       	cpc	r11, r21
    2402:	09 f0       	breq	.+2      	; 0x2406 <udd_ep_trans_complet+0x1f8>
    2404:	69 c0       	rjmp	.+210    	; 0x24d8 <udd_ep_trans_complet+0x2ca>
    2406:	28 17       	cp	r18, r24
    2408:	39 07       	cpc	r19, r25
    240a:	09 f4       	brne	.+2      	; 0x240e <udd_ep_trans_complet+0x200>
    240c:	65 c0       	rjmp	.+202    	; 0x24d8 <udd_ep_trans_complet+0x2ca>
    240e:	ac 01       	movw	r20, r24
    2410:	42 1b       	sub	r20, r18
    2412:	53 0b       	sbc	r21, r19
    2414:	9a 01       	movw	r18, r20
    2416:	21 15       	cp	r18, r1
    2418:	54 e0       	ldi	r21, 0x04	; 4
    241a:	35 07       	cpc	r19, r21
    241c:	48 f0       	brcs	.+18     	; 0x2430 <udd_ep_trans_complet+0x222>
    241e:	2f ef       	ldi	r18, 0xFF	; 255
    2420:	33 e0       	ldi	r19, 0x03	; 3
    2422:	c9 01       	movw	r24, r18
    2424:	b4 01       	movw	r22, r8
    2426:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodhi4>
    242a:	28 1b       	sub	r18, r24
    242c:	39 0b       	sbc	r19, r25
    242e:	06 c0       	rjmp	.+12     	; 0x243c <udd_ep_trans_complet+0x22e>
    2430:	c9 01       	movw	r24, r18
    2432:	b4 01       	movw	r22, r8
    2434:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodhi4>
    2438:	28 1b       	sub	r18, r24
    243a:	39 0b       	sbc	r19, r25
    243c:	fe 01       	movw	r30, r28
    243e:	ee 0f       	add	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	ee 0f       	add	r30, r30
    2448:	ff 1f       	adc	r31, r31
    244a:	e4 59       	subi	r30, 0x94	; 148
    244c:	fd 4d       	sbci	r31, 0xDD	; 221
    244e:	16 86       	std	Z+14, r1	; 0x0e
    2450:	17 86       	std	Z+15, r1	; 0x0f
    2452:	28 15       	cp	r18, r8
    2454:	39 05       	cpc	r19, r9
    2456:	00 f5       	brcc	.+64     	; 0x2498 <udd_ep_trans_complet+0x28a>
    2458:	d8 01       	movw	r26, r16
    245a:	8c 91       	ld	r24, X
    245c:	84 60       	ori	r24, 0x04	; 4
    245e:	8c 93       	st	X, r24
    2460:	b0 e4       	ldi	r27, 0x40	; 64
    2462:	db 9e       	mul	r13, r27
    2464:	c0 01       	movw	r24, r0
    2466:	11 24       	eor	r1, r1
    2468:	80 5c       	subi	r24, 0xC0	; 192
    246a:	9e 4d       	sbci	r25, 0xDE	; 222
    246c:	fe 01       	movw	r30, r28
    246e:	ee 0f       	add	r30, r30
    2470:	ff 1f       	adc	r31, r31
    2472:	ee 0f       	add	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	ee 0f       	add	r30, r30
    2478:	ff 1f       	adc	r31, r31
    247a:	e4 58       	subi	r30, 0x84	; 132
    247c:	fd 4d       	sbci	r31, 0xDD	; 221
    247e:	80 83       	st	Z, r24
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	cc 0f       	add	r28, r28
    2484:	dd 1f       	adc	r29, r29
    2486:	cc 0f       	add	r28, r28
    2488:	dd 1f       	adc	r29, r29
    248a:	cc 0f       	add	r28, r28
    248c:	dd 1f       	adc	r29, r29
    248e:	c4 59       	subi	r28, 0x94	; 148
    2490:	dd 4d       	sbci	r29, 0xDD	; 221
    2492:	8a 8a       	std	Y+18, r8	; 0x12
    2494:	9b 8a       	std	Y+19, r9	; 0x13
    2496:	1c c0       	rjmp	.+56     	; 0x24d0 <udd_ep_trans_complet+0x2c2>
    2498:	f8 01       	movw	r30, r16
    249a:	41 81       	ldd	r20, Z+1	; 0x01
    249c:	52 81       	ldd	r21, Z+2	; 0x02
    249e:	85 81       	ldd	r24, Z+5	; 0x05
    24a0:	96 81       	ldd	r25, Z+6	; 0x06
    24a2:	84 0f       	add	r24, r20
    24a4:	95 1f       	adc	r25, r21
    24a6:	fe 01       	movw	r30, r28
    24a8:	ee 0f       	add	r30, r30
    24aa:	ff 1f       	adc	r31, r31
    24ac:	ee 0f       	add	r30, r30
    24ae:	ff 1f       	adc	r31, r31
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	e4 58       	subi	r30, 0x84	; 132
    24b6:	fd 4d       	sbci	r31, 0xDD	; 221
    24b8:	80 83       	st	Z, r24
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	cc 0f       	add	r28, r28
    24be:	dd 1f       	adc	r29, r29
    24c0:	cc 0f       	add	r28, r28
    24c2:	dd 1f       	adc	r29, r29
    24c4:	cc 0f       	add	r28, r28
    24c6:	dd 1f       	adc	r29, r29
    24c8:	c4 59       	subi	r28, 0x94	; 148
    24ca:	dd 4d       	sbci	r29, 0xDD	; 221
    24cc:	2a 8b       	std	Y+18, r18	; 0x12
    24ce:	3b 8b       	std	Y+19, r19	; 0x13
    24d0:	f7 01       	movw	r30, r14
    24d2:	02 e0       	ldi	r16, 0x02	; 2
    24d4:	06 93       	lac	Z, r16
    24d6:	13 c0       	rjmp	.+38     	; 0x24fe <udd_ep_trans_complet+0x2f0>
    24d8:	d8 01       	movw	r26, r16
    24da:	8c 91       	ld	r24, X
    24dc:	80 ff       	sbrs	r24, 0
    24de:	0f c0       	rjmp	.+30     	; 0x24fe <udd_ep_trans_complet+0x2f0>
    24e0:	8e 7f       	andi	r24, 0xFE	; 254
    24e2:	8c 93       	st	X, r24
    24e4:	17 96       	adiw	r26, 0x07	; 7
    24e6:	ed 91       	ld	r30, X+
    24e8:	fc 91       	ld	r31, X
    24ea:	18 97       	sbiw	r26, 0x08	; 8
    24ec:	30 97       	sbiw	r30, 0x00	; 0
    24ee:	39 f0       	breq	.+14     	; 0x24fe <udd_ep_trans_complet+0x2f0>
    24f0:	15 96       	adiw	r26, 0x05	; 5
    24f2:	6d 91       	ld	r22, X+
    24f4:	7c 91       	ld	r23, X
    24f6:	16 97       	sbiw	r26, 0x06	; 6
    24f8:	4d 2d       	mov	r20, r13
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	19 95       	eicall
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	1f 91       	pop	r17
    2504:	0f 91       	pop	r16
    2506:	ff 90       	pop	r15
    2508:	ef 90       	pop	r14
    250a:	df 90       	pop	r13
    250c:	bf 90       	pop	r11
    250e:	af 90       	pop	r10
    2510:	9f 90       	pop	r9
    2512:	8f 90       	pop	r8
    2514:	08 95       	ret

00002516 <udd_attach>:
    2516:	1f 93       	push	r17
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	1f 92       	push	r1
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	8f b7       	in	r24, 0x3f	; 63
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	f8 94       	cli
    2528:	19 81       	ldd	r17, Y+1	; 0x01
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	cd dc       	rcall	.-1638   	; 0x1ec8 <udd_sleep_mode>
    252e:	ea ec       	ldi	r30, 0xCA	; 202
    2530:	f4 e0       	ldi	r31, 0x04	; 4
    2532:	80 e4       	ldi	r24, 0x40	; 64
    2534:	80 83       	st	Z, r24
    2536:	80 e2       	ldi	r24, 0x20	; 32
    2538:	80 83       	st	Z, r24
    253a:	e1 ec       	ldi	r30, 0xC1	; 193
    253c:	f4 e0       	ldi	r31, 0x04	; 4
    253e:	80 81       	ld	r24, Z
    2540:	81 60       	ori	r24, 0x01	; 1
    2542:	80 83       	st	Z, r24
    2544:	a9 ec       	ldi	r26, 0xC9	; 201
    2546:	b4 e0       	ldi	r27, 0x04	; 4
    2548:	8c 91       	ld	r24, X
    254a:	82 60       	ori	r24, 0x02	; 2
    254c:	8c 93       	st	X, r24
    254e:	e8 ec       	ldi	r30, 0xC8	; 200
    2550:	f4 e0       	ldi	r31, 0x04	; 4
    2552:	80 81       	ld	r24, Z
    2554:	80 64       	ori	r24, 0x40	; 64
    2556:	80 83       	st	Z, r24
    2558:	8c 91       	ld	r24, X
    255a:	81 60       	ori	r24, 0x01	; 1
    255c:	8c 93       	st	X, r24
    255e:	80 81       	ld	r24, Z
    2560:	80 68       	ori	r24, 0x80	; 128
    2562:	80 83       	st	Z, r24
    2564:	1f bf       	out	0x3f, r17	; 63
    2566:	0f 90       	pop	r0
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	1f 91       	pop	r17
    256e:	08 95       	ret

00002570 <udd_enable>:
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	1f 92       	push	r1
    257a:	1f 92       	push	r1
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	00 e6       	ldi	r16, 0x60	; 96
    2582:	10 e0       	ldi	r17, 0x00	; 0
    2584:	f8 01       	movw	r30, r16
    2586:	10 82       	st	Z, r1
    2588:	80 e3       	ldi	r24, 0x30	; 48
    258a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <sysclk_enable_usb>
    258e:	e0 ec       	ldi	r30, 0xC0	; 192
    2590:	f4 e0       	ldi	r31, 0x04	; 4
    2592:	80 81       	ld	r24, Z
    2594:	80 64       	ori	r24, 0x40	; 64
    2596:	80 83       	st	Z, r24
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	f8 01       	movw	r30, r16
    259c:	80 83       	st	Z, r24
    259e:	8f b7       	in	r24, 0x3f	; 63
    25a0:	8a 83       	std	Y+2, r24	; 0x02
    25a2:	f8 94       	cli
    25a4:	1a 81       	ldd	r17, Y+2	; 0x02
    25a6:	ec e6       	ldi	r30, 0x6C	; 108
    25a8:	f2 e2       	ldi	r31, 0x22	; 34
    25aa:	15 86       	std	Z+13, r1	; 0x0d
    25ac:	15 8a       	std	Z+21, r1	; 0x15
    25ae:	15 8e       	std	Z+29, r1	; 0x1d
    25b0:	15 a2       	std	Z+37, r1	; 0x25
    25b2:	15 a6       	std	Z+45, r1	; 0x2d
    25b4:	15 aa       	std	Z+53, r1	; 0x35
    25b6:	e0 e0       	ldi	r30, 0x00	; 0
    25b8:	f2 e2       	ldi	r31, 0x22	; 34
    25ba:	80 81       	ld	r24, Z
    25bc:	8e 7f       	andi	r24, 0xFE	; 254
    25be:	80 83       	st	Z, r24
    25c0:	e9 e0       	ldi	r30, 0x09	; 9
    25c2:	f2 e2       	ldi	r31, 0x22	; 34
    25c4:	80 81       	ld	r24, Z
    25c6:	8e 7f       	andi	r24, 0xFE	; 254
    25c8:	80 83       	st	Z, r24
    25ca:	e2 e1       	ldi	r30, 0x12	; 18
    25cc:	f2 e2       	ldi	r31, 0x22	; 34
    25ce:	80 81       	ld	r24, Z
    25d0:	8e 7f       	andi	r24, 0xFE	; 254
    25d2:	80 83       	st	Z, r24
    25d4:	eb e1       	ldi	r30, 0x1B	; 27
    25d6:	f2 e2       	ldi	r31, 0x22	; 34
    25d8:	80 81       	ld	r24, Z
    25da:	8e 7f       	andi	r24, 0xFE	; 254
    25dc:	80 83       	st	Z, r24
    25de:	6a e1       	ldi	r22, 0x1A	; 26
    25e0:	70 e0       	ldi	r23, 0x00	; 0
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
    25e8:	8f 3f       	cpi	r24, 0xFF	; 255
    25ea:	19 f0       	breq	.+6      	; 0x25f2 <udd_enable+0x82>
    25ec:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    25f0:	03 c0       	rjmp	.+6      	; 0x25f8 <udd_enable+0x88>
    25f2:	8f e1       	ldi	r24, 0x1F	; 31
    25f4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    25f8:	6b e1       	ldi	r22, 0x1B	; 27
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
    2602:	8f 3f       	cpi	r24, 0xFF	; 255
    2604:	19 f0       	breq	.+6      	; 0x260c <udd_enable+0x9c>
    2606:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    260a:	03 c0       	rjmp	.+6      	; 0x2612 <udd_enable+0xa2>
    260c:	8f e1       	ldi	r24, 0x1F	; 31
    260e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2612:	e0 ec       	ldi	r30, 0xC0	; 192
    2614:	f4 e0       	ldi	r31, 0x04	; 4
    2616:	80 81       	ld	r24, Z
    2618:	82 60       	ori	r24, 0x02	; 2
    261a:	80 83       	st	Z, r24
    261c:	80 81       	ld	r24, Z
    261e:	80 68       	ori	r24, 0x80	; 128
    2620:	80 83       	st	Z, r24
    2622:	80 81       	ld	r24, Z
    2624:	80 61       	ori	r24, 0x10	; 16
    2626:	80 83       	st	Z, r24
    2628:	88 e7       	ldi	r24, 0x78	; 120
    262a:	92 e2       	ldi	r25, 0x22	; 34
    262c:	86 83       	std	Z+6, r24	; 0x06
    262e:	97 83       	std	Z+7, r25	; 0x07
    2630:	80 81       	ld	r24, Z
    2632:	80 62       	ori	r24, 0x20	; 32
    2634:	80 83       	st	Z, r24
    2636:	8f ef       	ldi	r24, 0xFF	; 255
    2638:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    263c:	e8 ec       	ldi	r30, 0xC8	; 200
    263e:	f4 e0       	ldi	r31, 0x04	; 4
    2640:	80 81       	ld	r24, Z
    2642:	81 60       	ori	r24, 0x01	; 1
    2644:	80 83       	st	Z, r24
    2646:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <udd_b_idle>
    264a:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <sleepmgr_locks+0x5>
    264e:	8f 3f       	cpi	r24, 0xFF	; 255
    2650:	09 f4       	brne	.+2      	; 0x2654 <udd_enable+0xe4>
    2652:	ff cf       	rjmp	.-2      	; 0x2652 <udd_enable+0xe2>
    2654:	8f b7       	in	r24, 0x3f	; 63
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	f8 94       	cli
    265a:	99 81       	ldd	r25, Y+1	; 0x01
    265c:	ed e0       	ldi	r30, 0x0D	; 13
    265e:	f4 e2       	ldi	r31, 0x24	; 36
    2660:	85 81       	ldd	r24, Z+5	; 0x05
    2662:	8f 5f       	subi	r24, 0xFF	; 255
    2664:	85 83       	std	Z+5, r24	; 0x05
    2666:	9f bf       	out	0x3f, r25	; 63
    2668:	56 df       	rcall	.-340    	; 0x2516 <udd_attach>
    266a:	1f bf       	out	0x3f, r17	; 63
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

0000267a <udd_is_high_speed>:
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	08 95       	ret

0000267e <udd_set_address>:
    267e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2682:	08 95       	ret

00002684 <udd_getaddress>:
    2684:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2688:	08 95       	ret

0000268a <udd_get_frame_number>:
    268a:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <udd_sram+0x3c>
    268e:	90 91 a9 22 	lds	r25, 0x22A9	; 0x8022a9 <udd_sram+0x3d>
    2692:	08 95       	ret

00002694 <udd_get_micro_frame_number>:
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	08 95       	ret

0000269a <udd_set_setup_payload>:
    269a:	ed ef       	ldi	r30, 0xFD	; 253
    269c:	f3 e2       	ldi	r31, 0x23	; 35
    269e:	80 87       	std	Z+8, r24	; 0x08
    26a0:	91 87       	std	Z+9, r25	; 0x09
    26a2:	62 87       	std	Z+10, r22	; 0x0a
    26a4:	73 87       	std	Z+11, r23	; 0x0b
    26a6:	08 95       	ret

000026a8 <udd_ep_alloc>:
    26a8:	28 2f       	mov	r18, r24
    26aa:	2f 70       	andi	r18, 0x0F	; 15
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	22 0f       	add	r18, r18
    26b0:	33 1f       	adc	r19, r19
    26b2:	08 2e       	mov	r0, r24
    26b4:	00 0c       	add	r0, r0
    26b6:	99 0b       	sbc	r25, r25
    26b8:	88 27       	eor	r24, r24
    26ba:	99 0f       	add	r25, r25
    26bc:	88 1f       	adc	r24, r24
    26be:	99 27       	eor	r25, r25
    26c0:	82 0f       	add	r24, r18
    26c2:	93 1f       	adc	r25, r19
    26c4:	fc 01       	movw	r30, r24
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	ee 0f       	add	r30, r30
    26cc:	ff 1f       	adc	r31, r31
    26ce:	ee 0f       	add	r30, r30
    26d0:	ff 1f       	adc	r31, r31
    26d2:	e4 59       	subi	r30, 0x94	; 148
    26d4:	fd 4d       	sbci	r31, 0xDD	; 221
    26d6:	25 85       	ldd	r18, Z+13	; 0x0d
    26d8:	20 7c       	andi	r18, 0xC0	; 192
    26da:	09 f0       	breq	.+2      	; 0x26de <udd_ep_alloc+0x36>
    26dc:	69 c0       	rjmp	.+210    	; 0x27b0 <udd_ep_alloc+0x108>
    26de:	63 70       	andi	r22, 0x03	; 3
    26e0:	61 30       	cpi	r22, 0x01	; 1
    26e2:	11 f0       	breq	.+4      	; 0x26e8 <udd_ep_alloc+0x40>
    26e4:	18 f4       	brcc	.+6      	; 0x26ec <udd_ep_alloc+0x44>
    26e6:	04 c0       	rjmp	.+8      	; 0x26f0 <udd_ep_alloc+0x48>
    26e8:	60 ec       	ldi	r22, 0xC0	; 192
    26ea:	03 c0       	rjmp	.+6      	; 0x26f2 <udd_ep_alloc+0x4a>
    26ec:	60 e8       	ldi	r22, 0x80	; 128
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <udd_ep_alloc+0x4a>
    26f0:	60 e4       	ldi	r22, 0x40	; 64
    26f2:	40 38       	cpi	r20, 0x80	; 128
    26f4:	51 05       	cpc	r21, r1
    26f6:	e9 f0       	breq	.+58     	; 0x2732 <udd_ep_alloc+0x8a>
    26f8:	50 f4       	brcc	.+20     	; 0x270e <udd_ep_alloc+0x66>
    26fa:	40 32       	cpi	r20, 0x20	; 32
    26fc:	51 05       	cpc	r21, r1
    26fe:	a9 f0       	breq	.+42     	; 0x272a <udd_ep_alloc+0x82>
    2700:	40 34       	cpi	r20, 0x40	; 64
    2702:	51 05       	cpc	r21, r1
    2704:	a1 f0       	breq	.+40     	; 0x272e <udd_ep_alloc+0x86>
    2706:	40 31       	cpi	r20, 0x10	; 16
    2708:	51 05       	cpc	r21, r1
    270a:	d9 f4       	brne	.+54     	; 0x2742 <udd_ep_alloc+0x9a>
    270c:	0c c0       	rjmp	.+24     	; 0x2726 <udd_ep_alloc+0x7e>
    270e:	41 15       	cp	r20, r1
    2710:	22 e0       	ldi	r18, 0x02	; 2
    2712:	52 07       	cpc	r21, r18
    2714:	91 f0       	breq	.+36     	; 0x273a <udd_ep_alloc+0x92>
    2716:	4f 3f       	cpi	r20, 0xFF	; 255
    2718:	23 e0       	ldi	r18, 0x03	; 3
    271a:	52 07       	cpc	r21, r18
    271c:	81 f0       	breq	.+32     	; 0x273e <udd_ep_alloc+0x96>
    271e:	41 15       	cp	r20, r1
    2720:	51 40       	sbci	r21, 0x01	; 1
    2722:	79 f4       	brne	.+30     	; 0x2742 <udd_ep_alloc+0x9a>
    2724:	08 c0       	rjmp	.+16     	; 0x2736 <udd_ep_alloc+0x8e>
    2726:	21 e0       	ldi	r18, 0x01	; 1
    2728:	0d c0       	rjmp	.+26     	; 0x2744 <udd_ep_alloc+0x9c>
    272a:	22 e0       	ldi	r18, 0x02	; 2
    272c:	0b c0       	rjmp	.+22     	; 0x2744 <udd_ep_alloc+0x9c>
    272e:	23 e0       	ldi	r18, 0x03	; 3
    2730:	09 c0       	rjmp	.+18     	; 0x2744 <udd_ep_alloc+0x9c>
    2732:	24 e0       	ldi	r18, 0x04	; 4
    2734:	07 c0       	rjmp	.+14     	; 0x2744 <udd_ep_alloc+0x9c>
    2736:	25 e0       	ldi	r18, 0x05	; 5
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <udd_ep_alloc+0x9c>
    273a:	26 e0       	ldi	r18, 0x06	; 6
    273c:	03 c0       	rjmp	.+6      	; 0x2744 <udd_ep_alloc+0x9c>
    273e:	27 e0       	ldi	r18, 0x07	; 7
    2740:	01 c0       	rjmp	.+2      	; 0x2744 <udd_ep_alloc+0x9c>
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	fc 01       	movw	r30, r24
    2746:	ee 0f       	add	r30, r30
    2748:	ff 1f       	adc	r31, r31
    274a:	ee 0f       	add	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	ee 0f       	add	r30, r30
    2750:	ff 1f       	adc	r31, r31
    2752:	e4 59       	subi	r30, 0x94	; 148
    2754:	fd 4d       	sbci	r31, 0xDD	; 221
    2756:	15 86       	std	Z+13, r1	; 0x0d
    2758:	36 e0       	ldi	r19, 0x06	; 6
    275a:	34 87       	std	Z+12, r19	; 0x0c
    275c:	26 2b       	or	r18, r22
    275e:	25 87       	std	Z+13, r18	; 0x0d
    2760:	fc 01       	movw	r30, r24
    2762:	ee 0f       	add	r30, r30
    2764:	ff 1f       	adc	r31, r31
    2766:	ee 0f       	add	r30, r30
    2768:	ff 1f       	adc	r31, r31
    276a:	ee 0f       	add	r30, r30
    276c:	ff 1f       	adc	r31, r31
    276e:	e4 59       	subi	r30, 0x94	; 148
    2770:	fd 4d       	sbci	r31, 0xDD	; 221
    2772:	25 85       	ldd	r18, Z+13	; 0x0d
    2774:	20 7c       	andi	r18, 0xC0	; 192
    2776:	20 3c       	cpi	r18, 0xC0	; 192
    2778:	69 f4       	brne	.+26     	; 0x2794 <udd_ep_alloc+0xec>
    277a:	fc 01       	movw	r30, r24
    277c:	ee 0f       	add	r30, r30
    277e:	ff 1f       	adc	r31, r31
    2780:	ee 0f       	add	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	ee 0f       	add	r30, r30
    2786:	ff 1f       	adc	r31, r31
    2788:	e4 59       	subi	r30, 0x94	; 148
    278a:	fd 4d       	sbci	r31, 0xDD	; 221
    278c:	25 85       	ldd	r18, Z+13	; 0x0d
    278e:	27 70       	andi	r18, 0x07	; 7
    2790:	27 30       	cpi	r18, 0x07	; 7
    2792:	81 f0       	breq	.+32     	; 0x27b4 <udd_ep_alloc+0x10c>
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	fc 01       	movw	r30, r24
    27a2:	e4 59       	subi	r30, 0x94	; 148
    27a4:	fd 4d       	sbci	r31, 0xDD	; 221
    27a6:	85 85       	ldd	r24, Z+13	; 0x0d
    27a8:	80 62       	ori	r24, 0x20	; 32
    27aa:	85 87       	std	Z+13, r24	; 0x0d
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	08 95       	ret
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	08 95       	ret
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	08 95       	ret

000027b8 <udd_ep_is_halted>:
    27b8:	e8 2f       	mov	r30, r24
    27ba:	ef 70       	andi	r30, 0x0F	; 15
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	ee 0f       	add	r30, r30
    27c0:	ff 1f       	adc	r31, r31
    27c2:	08 2e       	mov	r0, r24
    27c4:	00 0c       	add	r0, r0
    27c6:	99 0b       	sbc	r25, r25
    27c8:	88 27       	eor	r24, r24
    27ca:	99 0f       	add	r25, r25
    27cc:	88 1f       	adc	r24, r24
    27ce:	99 27       	eor	r25, r25
    27d0:	e8 0f       	add	r30, r24
    27d2:	f9 1f       	adc	r31, r25
    27d4:	ee 0f       	add	r30, r30
    27d6:	ff 1f       	adc	r31, r31
    27d8:	ee 0f       	add	r30, r30
    27da:	ff 1f       	adc	r31, r31
    27dc:	ee 0f       	add	r30, r30
    27de:	ff 1f       	adc	r31, r31
    27e0:	e4 59       	subi	r30, 0x94	; 148
    27e2:	fd 4d       	sbci	r31, 0xDD	; 221
    27e4:	85 85       	ldd	r24, Z+13	; 0x0d
    27e6:	82 fb       	bst	r24, 2
    27e8:	88 27       	eor	r24, r24
    27ea:	80 f9       	bld	r24, 0
    27ec:	08 95       	ret

000027ee <udd_ep_clear_halt>:
    27ee:	0f 93       	push	r16
    27f0:	28 2f       	mov	r18, r24
    27f2:	2f 70       	andi	r18, 0x0F	; 15
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	a9 01       	movw	r20, r18
    27f8:	44 0f       	add	r20, r20
    27fa:	55 1f       	adc	r21, r21
    27fc:	28 2f       	mov	r18, r24
    27fe:	08 2e       	mov	r0, r24
    2800:	00 0c       	add	r0, r0
    2802:	33 0b       	sbc	r19, r19
    2804:	22 27       	eor	r18, r18
    2806:	33 0f       	add	r19, r19
    2808:	22 1f       	adc	r18, r18
    280a:	33 27       	eor	r19, r19
    280c:	24 0f       	add	r18, r20
    280e:	35 1f       	adc	r19, r21
    2810:	a9 01       	movw	r20, r18
    2812:	44 0f       	add	r20, r20
    2814:	55 1f       	adc	r21, r21
    2816:	44 0f       	add	r20, r20
    2818:	55 1f       	adc	r21, r21
    281a:	44 0f       	add	r20, r20
    281c:	55 1f       	adc	r21, r21
    281e:	fa 01       	movw	r30, r20
    2820:	e8 58       	subi	r30, 0x88	; 136
    2822:	fd 4d       	sbci	r31, 0xDD	; 221
    2824:	01 e0       	ldi	r16, 0x01	; 1
    2826:	06 93       	lac	Z, r16
    2828:	fa 01       	movw	r30, r20
    282a:	e4 59       	subi	r30, 0x94	; 148
    282c:	fd 4d       	sbci	r31, 0xDD	; 221
    282e:	95 85       	ldd	r25, Z+13	; 0x0d
    2830:	92 ff       	sbrs	r25, 2
    2832:	11 c0       	rjmp	.+34     	; 0x2856 <udd_ep_clear_halt+0x68>
    2834:	fa 01       	movw	r30, r20
    2836:	e4 59       	subi	r30, 0x94	; 148
    2838:	fd 4d       	sbci	r31, 0xDD	; 221
    283a:	95 85       	ldd	r25, Z+13	; 0x0d
    283c:	9b 7f       	andi	r25, 0xFB	; 251
    283e:	95 87       	std	Z+13, r25	; 0x0d
    2840:	59 dc       	rcall	.-1870   	; 0x20f4 <udd_ep_get_job>
    2842:	fc 01       	movw	r30, r24
    2844:	80 81       	ld	r24, Z
    2846:	80 ff       	sbrs	r24, 0
    2848:	06 c0       	rjmp	.+12     	; 0x2856 <udd_ep_clear_halt+0x68>
    284a:	8e 7f       	andi	r24, 0xFE	; 254
    284c:	80 83       	st	Z, r24
    284e:	07 80       	ldd	r0, Z+7	; 0x07
    2850:	f0 85       	ldd	r31, Z+8	; 0x08
    2852:	e0 2d       	mov	r30, r0
    2854:	19 95       	eicall
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	0f 91       	pop	r16
    285a:	08 95       	ret

0000285c <udd_ep_run>:
    285c:	6f 92       	push	r6
    285e:	7f 92       	push	r7
    2860:	8f 92       	push	r8
    2862:	9f 92       	push	r9
    2864:	af 92       	push	r10
    2866:	bf 92       	push	r11
    2868:	cf 92       	push	r12
    286a:	df 92       	push	r13
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	1f 92       	push	r1
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	78 2e       	mov	r7, r24
    2880:	66 2e       	mov	r6, r22
    2882:	4a 01       	movw	r8, r20
    2884:	59 01       	movw	r10, r18
    2886:	36 dc       	rcall	.-1940   	; 0x20f4 <udd_ep_get_job>
    2888:	6c 01       	movw	r12, r24
    288a:	27 2d       	mov	r18, r7
    288c:	87 2d       	mov	r24, r7
    288e:	8f 70       	andi	r24, 0x0F	; 15
    2890:	e8 2e       	mov	r14, r24
    2892:	f1 2c       	mov	r15, r1
    2894:	c7 01       	movw	r24, r14
    2896:	88 0f       	add	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	e7 2c       	mov	r14, r7
    289c:	07 2c       	mov	r0, r7
    289e:	00 0c       	add	r0, r0
    28a0:	ff 08       	sbc	r15, r15
    28a2:	ee 24       	eor	r14, r14
    28a4:	ff 0c       	add	r15, r15
    28a6:	ee 1c       	adc	r14, r14
    28a8:	ff 24       	eor	r15, r15
    28aa:	e8 0e       	add	r14, r24
    28ac:	f9 1e       	adc	r15, r25
    28ae:	f7 01       	movw	r30, r14
    28b0:	ee 0f       	add	r30, r30
    28b2:	ff 1f       	adc	r31, r31
    28b4:	ee 0f       	add	r30, r30
    28b6:	ff 1f       	adc	r31, r31
    28b8:	ee 0f       	add	r30, r30
    28ba:	ff 1f       	adc	r31, r31
    28bc:	e4 59       	subi	r30, 0x94	; 148
    28be:	fd 4d       	sbci	r31, 0xDD	; 221
    28c0:	85 85       	ldd	r24, Z+13	; 0x0d
    28c2:	80 7c       	andi	r24, 0xC0	; 192
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <udd_ep_run+0x6c>
    28c6:	82 c0       	rjmp	.+260    	; 0x29cc <udd_ep_run+0x170>
    28c8:	f7 01       	movw	r30, r14
    28ca:	ee 0f       	add	r30, r30
    28cc:	ff 1f       	adc	r31, r31
    28ce:	ee 0f       	add	r30, r30
    28d0:	ff 1f       	adc	r31, r31
    28d2:	ee 0f       	add	r30, r30
    28d4:	ff 1f       	adc	r31, r31
    28d6:	e4 59       	subi	r30, 0x94	; 148
    28d8:	fd 4d       	sbci	r31, 0xDD	; 221
    28da:	85 85       	ldd	r24, Z+13	; 0x0d
    28dc:	80 7c       	andi	r24, 0xC0	; 192
    28de:	80 3c       	cpi	r24, 0xC0	; 192
    28e0:	61 f0       	breq	.+24     	; 0x28fa <udd_ep_run+0x9e>
    28e2:	f7 01       	movw	r30, r14
    28e4:	ee 0f       	add	r30, r30
    28e6:	ff 1f       	adc	r31, r31
    28e8:	ee 0f       	add	r30, r30
    28ea:	ff 1f       	adc	r31, r31
    28ec:	ee 0f       	add	r30, r30
    28ee:	ff 1f       	adc	r31, r31
    28f0:	e4 59       	subi	r30, 0x94	; 148
    28f2:	fd 4d       	sbci	r31, 0xDD	; 221
    28f4:	85 85       	ldd	r24, Z+13	; 0x0d
    28f6:	82 fd       	sbrc	r24, 2
    28f8:	6b c0       	rjmp	.+214    	; 0x29d0 <udd_ep_run+0x174>
    28fa:	8f b7       	in	r24, 0x3f	; 63
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	f8 94       	cli
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	f6 01       	movw	r30, r12
    2904:	90 81       	ld	r25, Z
    2906:	90 ff       	sbrs	r25, 0
    2908:	03 c0       	rjmp	.+6      	; 0x2910 <udd_ep_run+0xb4>
    290a:	8f bf       	out	0x3f, r24	; 63
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	61 c0       	rjmp	.+194    	; 0x29d2 <udd_ep_run+0x176>
    2910:	f6 01       	movw	r30, r12
    2912:	90 81       	ld	r25, Z
    2914:	91 60       	ori	r25, 0x01	; 1
    2916:	90 83       	st	Z, r25
    2918:	8f bf       	out	0x3f, r24	; 63
    291a:	81 82       	std	Z+1, r8	; 0x01
    291c:	92 82       	std	Z+2, r9	; 0x02
    291e:	a3 82       	std	Z+3, r10	; 0x03
    2920:	b4 82       	std	Z+4, r11	; 0x04
    2922:	15 82       	std	Z+5, r1	; 0x05
    2924:	16 82       	std	Z+6, r1	; 0x06
    2926:	07 83       	std	Z+7, r16	; 0x07
    2928:	10 87       	std	Z+8, r17	; 0x08
    292a:	61 10       	cpse	r6, r1
    292c:	06 c0       	rjmp	.+12     	; 0x293a <udd_ep_run+0xde>
    292e:	91 e0       	ldi	r25, 0x01	; 1
    2930:	a1 14       	cp	r10, r1
    2932:	b1 04       	cpc	r11, r1
    2934:	19 f0       	breq	.+6      	; 0x293c <udd_ep_run+0xe0>
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	01 c0       	rjmp	.+2      	; 0x293c <udd_ep_run+0xe0>
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	f6 01       	movw	r30, r12
    293e:	80 81       	ld	r24, Z
    2940:	90 fb       	bst	r25, 0
    2942:	81 f9       	bld	r24, 1
    2944:	8b 7f       	andi	r24, 0xFB	; 251
    2946:	80 83       	st	Z, r24
    2948:	22 23       	and	r18, r18
    294a:	64 f4       	brge	.+24     	; 0x2964 <udd_ep_run+0x108>
    294c:	f7 01       	movw	r30, r14
    294e:	ee 0f       	add	r30, r30
    2950:	ff 1f       	adc	r31, r31
    2952:	ee 0f       	add	r30, r30
    2954:	ff 1f       	adc	r31, r31
    2956:	ee 0f       	add	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	e4 59       	subi	r30, 0x94	; 148
    295c:	fd 4d       	sbci	r31, 0xDD	; 221
    295e:	12 8a       	std	Z+18, r1	; 0x12
    2960:	13 8a       	std	Z+19, r1	; 0x13
    2962:	30 c0       	rjmp	.+96     	; 0x29c4 <udd_ep_run+0x168>
    2964:	f7 01       	movw	r30, r14
    2966:	ee 0f       	add	r30, r30
    2968:	ff 1f       	adc	r31, r31
    296a:	ee 0f       	add	r30, r30
    296c:	ff 1f       	adc	r31, r31
    296e:	ee 0f       	add	r30, r30
    2970:	ff 1f       	adc	r31, r31
    2972:	e4 59       	subi	r30, 0x94	; 148
    2974:	fd 4d       	sbci	r31, 0xDD	; 221
    2976:	85 85       	ldd	r24, Z+13	; 0x0d
    2978:	80 7c       	andi	r24, 0xC0	; 192
    297a:	80 3c       	cpi	r24, 0xC0	; 192
    297c:	b1 f4       	brne	.+44     	; 0x29aa <udd_ep_run+0x14e>
    297e:	c7 01       	movw	r24, r14
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	88 0f       	add	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	88 58       	subi	r24, 0x88	; 136
    298e:	9d 4d       	sbci	r25, 0xDD	; 221
    2990:	88 db       	rcall	.-2288   	; 0x20a2 <udd_ep_get_size>
    2992:	bc 01       	movw	r22, r24
    2994:	c5 01       	movw	r24, r10
    2996:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__udivmodhi4>
    299a:	89 2b       	or	r24, r25
    299c:	31 f0       	breq	.+12     	; 0x29aa <udd_ep_run+0x14e>
    299e:	f6 01       	movw	r30, r12
    29a0:	80 81       	ld	r24, Z
    29a2:	8e 7f       	andi	r24, 0xFE	; 254
    29a4:	80 83       	st	Z, r24
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	14 c0       	rjmp	.+40     	; 0x29d2 <udd_ep_run+0x176>
    29aa:	f7 01       	movw	r30, r14
    29ac:	ee 0f       	add	r30, r30
    29ae:	ff 1f       	adc	r31, r31
    29b0:	ee 0f       	add	r30, r30
    29b2:	ff 1f       	adc	r31, r31
    29b4:	ee 0f       	add	r30, r30
    29b6:	ff 1f       	adc	r31, r31
    29b8:	e4 59       	subi	r30, 0x94	; 148
    29ba:	fd 4d       	sbci	r31, 0xDD	; 221
    29bc:	16 86       	std	Z+14, r1	; 0x0e
    29be:	17 86       	std	Z+15, r1	; 0x0f
    29c0:	12 8a       	std	Z+18, r1	; 0x12
    29c2:	13 8a       	std	Z+19, r1	; 0x13
    29c4:	87 2d       	mov	r24, r7
    29c6:	23 dc       	rcall	.-1978   	; 0x220e <udd_ep_trans_complet>
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	03 c0       	rjmp	.+6      	; 0x29d2 <udd_ep_run+0x176>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	01 c0       	rjmp	.+2      	; 0x29d2 <udd_ep_run+0x176>
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	0f 90       	pop	r0
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	ff 90       	pop	r15
    29de:	ef 90       	pop	r14
    29e0:	df 90       	pop	r13
    29e2:	cf 90       	pop	r12
    29e4:	bf 90       	pop	r11
    29e6:	af 90       	pop	r10
    29e8:	9f 90       	pop	r9
    29ea:	8f 90       	pop	r8
    29ec:	7f 90       	pop	r7
    29ee:	6f 90       	pop	r6
    29f0:	08 95       	ret

000029f2 <udd_ep_abort>:
    29f2:	ff 92       	push	r15
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	18 2f       	mov	r17, r24
    29fe:	c8 2f       	mov	r28, r24
    2a00:	cf 70       	andi	r28, 0x0F	; 15
    2a02:	d0 e0       	ldi	r29, 0x00	; 0
    2a04:	ce 01       	movw	r24, r28
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	c1 2f       	mov	r28, r17
    2a0c:	01 2e       	mov	r0, r17
    2a0e:	00 0c       	add	r0, r0
    2a10:	dd 0b       	sbc	r29, r29
    2a12:	cc 27       	eor	r28, r28
    2a14:	dd 0f       	add	r29, r29
    2a16:	cc 1f       	adc	r28, r28
    2a18:	dd 27       	eor	r29, r29
    2a1a:	c8 0f       	add	r28, r24
    2a1c:	d9 1f       	adc	r29, r25
    2a1e:	81 2f       	mov	r24, r17
    2a20:	69 db       	rcall	.-2350   	; 0x20f4 <udd_ep_get_job>
    2a22:	dc 01       	movw	r26, r24
    2a24:	fe 01       	movw	r30, r28
    2a26:	ee 0f       	add	r30, r30
    2a28:	ff 1f       	adc	r31, r31
    2a2a:	ee 0f       	add	r30, r30
    2a2c:	ff 1f       	adc	r31, r31
    2a2e:	ee 0f       	add	r30, r30
    2a30:	ff 1f       	adc	r31, r31
    2a32:	e8 58       	subi	r30, 0x88	; 136
    2a34:	fd 4d       	sbci	r31, 0xDD	; 221
    2a36:	02 e0       	ldi	r16, 0x02	; 2
    2a38:	05 93       	las	Z, r16
    2a3a:	8c 91       	ld	r24, X
    2a3c:	80 ff       	sbrs	r24, 0
    2a3e:	22 c0       	rjmp	.+68     	; 0x2a84 <udd_ep_abort+0x92>
    2a40:	8e 7f       	andi	r24, 0xFE	; 254
    2a42:	8c 93       	st	X, r24
    2a44:	17 96       	adiw	r26, 0x07	; 7
    2a46:	ed 91       	ld	r30, X+
    2a48:	fc 91       	ld	r31, X
    2a4a:	18 97       	sbiw	r26, 0x08	; 8
    2a4c:	30 97       	sbiw	r30, 0x00	; 0
    2a4e:	d1 f0       	breq	.+52     	; 0x2a84 <udd_ep_abort+0x92>
    2a50:	11 23       	and	r17, r17
    2a52:	5c f4       	brge	.+22     	; 0x2a6a <udd_ep_abort+0x78>
    2a54:	cc 0f       	add	r28, r28
    2a56:	dd 1f       	adc	r29, r29
    2a58:	cc 0f       	add	r28, r28
    2a5a:	dd 1f       	adc	r29, r29
    2a5c:	cc 0f       	add	r28, r28
    2a5e:	dd 1f       	adc	r29, r29
    2a60:	c4 59       	subi	r28, 0x94	; 148
    2a62:	dd 4d       	sbci	r29, 0xDD	; 221
    2a64:	6a 89       	ldd	r22, Y+18	; 0x12
    2a66:	7b 89       	ldd	r23, Y+19	; 0x13
    2a68:	0a c0       	rjmp	.+20     	; 0x2a7e <udd_ep_abort+0x8c>
    2a6a:	cc 0f       	add	r28, r28
    2a6c:	dd 1f       	adc	r29, r29
    2a6e:	cc 0f       	add	r28, r28
    2a70:	dd 1f       	adc	r29, r29
    2a72:	cc 0f       	add	r28, r28
    2a74:	dd 1f       	adc	r29, r29
    2a76:	c4 59       	subi	r28, 0x94	; 148
    2a78:	dd 4d       	sbci	r29, 0xDD	; 221
    2a7a:	6e 85       	ldd	r22, Y+14	; 0x0e
    2a7c:	7f 85       	ldd	r23, Y+15	; 0x0f
    2a7e:	41 2f       	mov	r20, r17
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	19 95       	eicall
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	ff 90       	pop	r15
    2a8e:	08 95       	ret

00002a90 <udd_ep_free>:
    2a90:	cf 93       	push	r28
    2a92:	c8 2f       	mov	r28, r24
    2a94:	ae df       	rcall	.-164    	; 0x29f2 <udd_ep_abort>
    2a96:	ec 2f       	mov	r30, r28
    2a98:	ef 70       	andi	r30, 0x0F	; 15
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	ee 0f       	add	r30, r30
    2a9e:	ff 1f       	adc	r31, r31
    2aa0:	8c 2f       	mov	r24, r28
    2aa2:	cc 0f       	add	r28, r28
    2aa4:	99 0b       	sbc	r25, r25
    2aa6:	88 27       	eor	r24, r24
    2aa8:	99 0f       	add	r25, r25
    2aaa:	88 1f       	adc	r24, r24
    2aac:	99 27       	eor	r25, r25
    2aae:	e8 0f       	add	r30, r24
    2ab0:	f9 1f       	adc	r31, r25
    2ab2:	ee 0f       	add	r30, r30
    2ab4:	ff 1f       	adc	r31, r31
    2ab6:	ee 0f       	add	r30, r30
    2ab8:	ff 1f       	adc	r31, r31
    2aba:	ee 0f       	add	r30, r30
    2abc:	ff 1f       	adc	r31, r31
    2abe:	e4 59       	subi	r30, 0x94	; 148
    2ac0:	fd 4d       	sbci	r31, 0xDD	; 221
    2ac2:	15 86       	std	Z+13, r1	; 0x0d
    2ac4:	cf 91       	pop	r28
    2ac6:	08 95       	ret

00002ac8 <udd_ep_set_halt>:
    2ac8:	e8 2f       	mov	r30, r24
    2aca:	ef 70       	andi	r30, 0x0F	; 15
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	ee 0f       	add	r30, r30
    2ad0:	ff 1f       	adc	r31, r31
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	08 2e       	mov	r0, r24
    2ad6:	00 0c       	add	r0, r0
    2ad8:	33 0b       	sbc	r19, r19
    2ada:	22 27       	eor	r18, r18
    2adc:	33 0f       	add	r19, r19
    2ade:	22 1f       	adc	r18, r18
    2ae0:	33 27       	eor	r19, r19
    2ae2:	e2 0f       	add	r30, r18
    2ae4:	f3 1f       	adc	r31, r19
    2ae6:	ee 0f       	add	r30, r30
    2ae8:	ff 1f       	adc	r31, r31
    2aea:	ee 0f       	add	r30, r30
    2aec:	ff 1f       	adc	r31, r31
    2aee:	ee 0f       	add	r30, r30
    2af0:	ff 1f       	adc	r31, r31
    2af2:	e4 59       	subi	r30, 0x94	; 148
    2af4:	fd 4d       	sbci	r31, 0xDD	; 221
    2af6:	95 85       	ldd	r25, Z+13	; 0x0d
    2af8:	94 60       	ori	r25, 0x04	; 4
    2afa:	95 87       	std	Z+13, r25	; 0x0d
    2afc:	7a df       	rcall	.-268    	; 0x29f2 <udd_ep_abort>
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	08 95       	ret

00002b02 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2b02:	1f 92       	push	r1
    2b04:	0f 92       	push	r0
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	0f 92       	push	r0
    2b0a:	11 24       	eor	r1, r1
    2b0c:	0b b6       	in	r0, 0x3b	; 59
    2b0e:	0f 92       	push	r0
    2b10:	0f 93       	push	r16
    2b12:	2f 93       	push	r18
    2b14:	3f 93       	push	r19
    2b16:	4f 93       	push	r20
    2b18:	5f 93       	push	r21
    2b1a:	6f 93       	push	r22
    2b1c:	7f 93       	push	r23
    2b1e:	8f 93       	push	r24
    2b20:	9f 93       	push	r25
    2b22:	af 93       	push	r26
    2b24:	bf 93       	push	r27
    2b26:	ef 93       	push	r30
    2b28:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2b2a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b2e:	88 23       	and	r24, r24
    2b30:	34 f4       	brge	.+12     	; 0x2b3e <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2b32:	80 e8       	ldi	r24, 0x80	; 128
    2b34:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2b38:	0e 94 96 20 	call	0x412c	; 0x412c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2b3c:	88 c0       	rjmp	.+272    	; 0x2c4e <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2b3e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b42:	82 ff       	sbrs	r24, 2
    2b44:	20 c0       	rjmp	.+64     	; 0x2b86 <__vector_125+0x84>
		udd_ack_underflow_event();
    2b46:	84 e0       	ldi	r24, 0x04	; 4
    2b48:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2b4c:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_sram+0x14>
    2b50:	86 ff       	sbrs	r24, 6
    2b52:	7d c0       	rjmp	.+250    	; 0x2c4e <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2b54:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b58:	81 fd       	sbrc	r24, 1
    2b5a:	79 c0       	rjmp	.+242    	; 0x2c4e <__vector_125+0x14c>
    2b5c:	e6 da       	rcall	.-2612   	; 0x212a <udd_ctrl_interrupt_tc_setup>
    2b5e:	81 11       	cpse	r24, r1
    2b60:	76 c0       	rjmp	.+236    	; 0x2c4e <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2b62:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    2b66:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2b68:	11 f4       	brne	.+4      	; 0x2b6e <__vector_125+0x6c>
    2b6a:	19 da       	rcall	.-3022   	; 0x1f9e <udd_ctrl_send_zlp_in>
    2b6c:	70 c0       	rjmp	.+224    	; 0x2c4e <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b6e:	84 30       	cpi	r24, 0x04	; 4
    2b70:	09 f0       	breq	.+2      	; 0x2b74 <__vector_125+0x72>
    2b72:	6d c0       	rjmp	.+218    	; 0x2c4e <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2b74:	e1 e8       	ldi	r30, 0x81	; 129
    2b76:	f2 e2       	ldi	r31, 0x22	; 34
    2b78:	04 e0       	ldi	r16, 0x04	; 4
    2b7a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b7c:	e9 e7       	ldi	r30, 0x79	; 121
    2b7e:	f2 e2       	ldi	r31, 0x22	; 34
    2b80:	04 e0       	ldi	r16, 0x04	; 4
    2b82:	05 93       	las	Z, r16
    2b84:	64 c0       	rjmp	.+200    	; 0x2c4e <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2b86:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b8a:	81 ff       	sbrs	r24, 1
    2b8c:	5b c0       	rjmp	.+182    	; 0x2c44 <__vector_125+0x142>
		udd_ack_overflow_event();
    2b8e:	82 e0       	ldi	r24, 0x02	; 2
    2b90:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2b94:	80 91 78 22 	lds	r24, 0x2278	; 0x802278 <udd_sram+0xc>
    2b98:	86 ff       	sbrs	r24, 6
    2b9a:	59 c0       	rjmp	.+178    	; 0x2c4e <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2b9c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2ba0:	81 fd       	sbrc	r24, 1
    2ba2:	55 c0       	rjmp	.+170    	; 0x2c4e <__vector_125+0x14c>
    2ba4:	c2 da       	rcall	.-2684   	; 0x212a <udd_ctrl_interrupt_tc_setup>
    2ba6:	81 11       	cpse	r24, r1
    2ba8:	52 c0       	rjmp	.+164    	; 0x2c4e <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2baa:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    2bae:	82 30       	cpi	r24, 0x02	; 2
    2bb0:	41 f4       	brne	.+16     	; 0x2bc2 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2bb2:	84 e0       	ldi	r24, 0x04	; 4
    2bb4:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2bb8:	e8 e7       	ldi	r30, 0x78	; 120
    2bba:	f2 e2       	ldi	r31, 0x22	; 34
    2bbc:	02 e0       	ldi	r16, 0x02	; 2
    2bbe:	06 93       	lac	Z, r16
    2bc0:	46 c0       	rjmp	.+140    	; 0x2c4e <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2bc2:	83 30       	cpi	r24, 0x03	; 3
    2bc4:	09 f0       	breq	.+2      	; 0x2bc8 <__vector_125+0xc6>
    2bc6:	43 c0       	rjmp	.+134    	; 0x2c4e <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2bc8:	e1 e8       	ldi	r30, 0x81	; 129
    2bca:	f2 e2       	ldi	r31, 0x22	; 34
    2bcc:	04 e0       	ldi	r16, 0x04	; 4
    2bce:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2bd0:	e9 e7       	ldi	r30, 0x79	; 121
    2bd2:	f2 e2       	ldi	r31, 0x22	; 34
    2bd4:	04 e0       	ldi	r16, 0x04	; 4
    2bd6:	05 93       	las	Z, r16
    2bd8:	3a c0       	rjmp	.+116    	; 0x2c4e <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2bda:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2bdc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2be0:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2be2:	07 df       	rcall	.-498    	; 0x29f2 <udd_ep_abort>
    2be4:	81 e8       	ldi	r24, 0x81	; 129
    2be6:	05 df       	rcall	.-502    	; 0x29f2 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	03 df       	rcall	.-506    	; 0x29f2 <udd_ep_abort>
    2bec:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    2bee:	01 df       	rcall	.-510    	; 0x29f2 <udd_ep_abort>
    2bf0:	0e 94 6d 20 	call	0x40da	; 0x40da <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2bf4:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2bf8:	ec e6       	ldi	r30, 0x6C	; 108
    2bfa:	f2 e2       	ldi	r31, 0x22	; 34
	udd_endpoint_clear_status(ep_ctrl);
    2bfc:	15 86       	std	Z+13, r1	; 0x0d
    2bfe:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c00:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    2c02:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c04:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2c06:	15 8a       	std	Z+21, r1	; 0x15
    2c08:	94 8b       	std	Z+20, r25	; 0x14
    2c0a:	85 8b       	std	Z+21, r24	; 0x15
    2c0c:	84 e2       	ldi	r24, 0x24	; 36
		// Reset endpoint control management
		udd_ctrl_init();
    2c0e:	92 e2       	ldi	r25, 0x22	; 34
    2c10:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    2c12:	91 8b       	std	Z+17, r25	; 0x11
    2c14:	91 d9       	rcall	.-3294   	; 0x1f38 <udd_ctrl_init>
		udd_ack_suspend_event();
    2c16:	1b c0       	rjmp	.+54     	; 0x2c4e <__vector_125+0x14c>
    2c18:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2c1c:	86 ff       	sbrs	r24, 6
    2c1e:	07 c0       	rjmp	.+14     	; 0x2c2e <__vector_125+0x12c>
    2c20:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2c22:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	4f d9       	rcall	.-3426   	; 0x1ec8 <udd_sleep_mode>
		udd_ack_resume_event();
    2c2a:	a5 d2       	rcall	.+1354   	; 0x3176 <usb_callback_suspend_action>
    2c2c:	10 c0       	rjmp	.+32     	; 0x2c4e <__vector_125+0x14c>
    2c2e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    2c32:	85 ff       	sbrs	r24, 5
    2c34:	0c c0       	rjmp	.+24     	; 0x2c4e <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2c36:	80 e2       	ldi	r24, 0x20	; 32
    2c38:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	44 d9       	rcall	.-3448   	; 0x1ec8 <udd_sleep_mode>
    2c40:	9b d2       	rcall	.+1334   	; 0x3178 <usb_callback_resume_action>
    2c42:	05 c0       	rjmp	.+10     	; 0x2c4e <__vector_125+0x14c>
    2c44:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2c48:	84 fd       	sbrc	r24, 4
    2c4a:	c7 cf       	rjmp	.-114    	; 0x2bda <__vector_125+0xd8>
    2c4c:	e5 cf       	rjmp	.-54     	; 0x2c18 <__vector_125+0x116>
    2c4e:	ff 91       	pop	r31
    2c50:	ef 91       	pop	r30
    2c52:	bf 91       	pop	r27
    2c54:	af 91       	pop	r26
    2c56:	9f 91       	pop	r25
    2c58:	8f 91       	pop	r24
    2c5a:	7f 91       	pop	r23
    2c5c:	6f 91       	pop	r22
    2c5e:	5f 91       	pop	r21
    2c60:	4f 91       	pop	r20
    2c62:	3f 91       	pop	r19
    2c64:	2f 91       	pop	r18
    2c66:	0f 91       	pop	r16
    2c68:	0f 90       	pop	r0
    2c6a:	0b be       	out	0x3b, r0	; 59
    2c6c:	0f 90       	pop	r0
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	0f 90       	pop	r0
    2c72:	1f 90       	pop	r1
    2c74:	18 95       	reti

00002c76 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2c76:	1f 92       	push	r1
    2c78:	0f 92       	push	r0
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	0f 92       	push	r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	0b b6       	in	r0, 0x3b	; 59
    2c82:	0f 92       	push	r0
    2c84:	0f 93       	push	r16
    2c86:	1f 93       	push	r17
    2c88:	2f 93       	push	r18
    2c8a:	3f 93       	push	r19
    2c8c:	4f 93       	push	r20
    2c8e:	5f 93       	push	r21
    2c90:	6f 93       	push	r22
    2c92:	7f 93       	push	r23
    2c94:	8f 93       	push	r24
    2c96:	9f 93       	push	r25
    2c98:	af 93       	push	r26
    2c9a:	bf 93       	push	r27
    2c9c:	cf 93       	push	r28
    2c9e:	df 93       	push	r29
    2ca0:	ef 93       	push	r30
    2ca2:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2ca4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2ca8:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2caa:	03 c0       	rjmp	.+6      	; 0x2cb2 <__vector_126+0x3c>
    2cac:	3e da       	rcall	.-2948   	; 0x212a <udd_ctrl_interrupt_tc_setup>
    2cae:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2cb0:	c4 c0       	rjmp	.+392    	; 0x2e3a <__vector_126+0x1c4>
    2cb2:	82 e0       	ldi	r24, 0x02	; 2
    2cb4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2cb8:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2cbc:	81 95       	neg	r24
    2cbe:	88 0f       	add	r24, r24
    2cc0:	e8 e7       	ldi	r30, 0x78	; 120
    2cc2:	f2 e2       	ldi	r31, 0x22	; 34
    2cc4:	e8 1b       	sub	r30, r24
    2cc6:	f1 09       	sbc	r31, r1
    2cc8:	20 81       	ld	r18, Z
    2cca:	31 81       	ldd	r19, Z+1	; 0x01
    2ccc:	28 57       	subi	r18, 0x78	; 120
    2cce:	32 42       	sbci	r19, 0x22	; 34
    2cd0:	36 95       	lsr	r19
    2cd2:	27 95       	ror	r18
    2cd4:	36 95       	lsr	r19
    2cd6:	27 95       	ror	r18
    2cd8:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2cda:	27 95       	ror	r18
    2cdc:	82 2f       	mov	r24, r18
    2cde:	86 95       	lsr	r24
    2ce0:	20 fd       	sbrc	r18, 0
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <__vector_126+0x72>
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	01 c0       	rjmp	.+2      	; 0x2cea <__vector_126+0x74>
    2ce8:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2cea:	89 0f       	add	r24, r25
    2cec:	e8 2f       	mov	r30, r24
    2cee:	ef 70       	andi	r30, 0x0F	; 15
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	ee 0f       	add	r30, r30
    2cf4:	ff 1f       	adc	r31, r31
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	08 2e       	mov	r0, r24
    2cfa:	00 0c       	add	r0, r0
    2cfc:	33 0b       	sbc	r19, r19
    2cfe:	22 27       	eor	r18, r18
    2d00:	33 0f       	add	r19, r19
    2d02:	22 1f       	adc	r18, r18
    2d04:	33 27       	eor	r19, r19
    2d06:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2d08:	f3 1f       	adc	r31, r19
    2d0a:	df 01       	movw	r26, r30
    2d0c:	aa 0f       	add	r26, r26
    2d0e:	bb 1f       	adc	r27, r27
    2d10:	aa 0f       	add	r26, r26
    2d12:	bb 1f       	adc	r27, r27
    2d14:	aa 0f       	add	r26, r26
    2d16:	bb 1f       	adc	r27, r27
    2d18:	a4 59       	subi	r26, 0x94	; 148
    2d1a:	bd 4d       	sbci	r27, 0xDD	; 221
    2d1c:	1c 96       	adiw	r26, 0x0c	; 12
    2d1e:	9c 91       	ld	r25, X
    2d20:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2d22:	8b c0       	rjmp	.+278    	; 0x2e3a <__vector_126+0x1c4>
    2d24:	ee 0f       	add	r30, r30
    2d26:	ff 1f       	adc	r31, r31
    2d28:	ee 0f       	add	r30, r30
    2d2a:	ff 1f       	adc	r31, r31
    2d2c:	ee 0f       	add	r30, r30
    2d2e:	ff 1f       	adc	r31, r31
    2d30:	e8 58       	subi	r30, 0x88	; 136
    2d32:	fd 4d       	sbci	r31, 0xDD	; 221
    2d34:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    2d36:	06 93       	lac	Z, r16
    2d38:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2d3a:	7a c0       	rjmp	.+244    	; 0x2e30 <__vector_126+0x1ba>
    2d3c:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2d40:	84 30       	cpi	r24, 0x04	; 4
    2d42:	19 f4       	brne	.+6      	; 0x2d4a <__vector_126+0xd4>
    2d44:	3a d9       	rcall	.-3468   	; 0x1fba <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2d46:	f8 d8       	rcall	.-3600   	; 0x1f38 <udd_ctrl_init>
    2d48:	78 c0       	rjmp	.+240    	; 0x2e3a <__vector_126+0x1c4>
    2d4a:	00 91 7a 22 	lds	r16, 0x227A	; 0x80227a <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2d4e:	10 91 7b 22 	lds	r17, 0x227B	; 0x80227b <udd_sram+0xf>
    2d52:	80 91 07 24 	lds	r24, 0x2407	; 0x802407 <udd_g_ctrlreq+0xa>
    2d56:	90 91 08 24 	lds	r25, 0x2408	; 0x802408 <udd_g_ctrlreq+0xb>
    2d5a:	c0 91 64 22 	lds	r28, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    2d5e:	d0 91 65 22 	lds	r29, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2d62:	98 01       	movw	r18, r16
    2d64:	2c 0f       	add	r18, r28
    2d66:	3d 1f       	adc	r19, r29
    2d68:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2d6a:	93 07       	cpc	r25, r19
    2d6c:	18 f4       	brcc	.+6      	; 0x2d74 <__vector_126+0xfe>
    2d6e:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2d70:	0c 1b       	sub	r16, r28
    2d72:	1d 0b       	sbc	r17, r29
    2d74:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <udd_g_ctrlreq+0x8>
    2d78:	90 91 06 24 	lds	r25, 0x2406	; 0x802406 <udd_g_ctrlreq+0x9>
    2d7c:	a8 01       	movw	r20, r16
    2d7e:	64 e2       	ldi	r22, 0x24	; 36
    2d80:	72 e2       	ldi	r23, 0x22	; 34
    2d82:	8c 0f       	add	r24, r28
    2d84:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2d86:	0e 94 43 24 	call	0x4886	; 0x4886 <memcpy>
    2d8a:	c0 0f       	add	r28, r16
    2d8c:	d1 1f       	adc	r29, r17
    2d8e:	c0 93 64 22 	sts	0x2264, r28	; 0x802264 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2d92:	d0 93 65 22 	sts	0x2265, r29	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2d96:	00 34       	cpi	r16, 0x40	; 64
    2d98:	11 05       	cpc	r17, r1
    2d9a:	69 f4       	brne	.+26     	; 0x2db6 <__vector_126+0x140>
    2d9c:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2da0:	90 91 67 22 	lds	r25, 0x2267	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    2da4:	8c 0f       	add	r24, r28
    2da6:	9d 1f       	adc	r25, r29
    2da8:	20 91 03 24 	lds	r18, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    2dac:	30 91 04 24 	lds	r19, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    2db0:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2db2:	93 07       	cpc	r25, r19
    2db4:	80 f0       	brcs	.+32     	; 0x2dd6 <__vector_126+0x160>
    2db6:	ed ef       	ldi	r30, 0xFD	; 253
    2db8:	f3 e2       	ldi	r31, 0x23	; 35
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2dba:	c2 87       	std	Z+10, r28	; 0x0a
    2dbc:	d3 87       	std	Z+11, r29	; 0x0b
    2dbe:	06 84       	ldd	r0, Z+14	; 0x0e
    2dc0:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    2dc2:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    2dc4:	30 97       	sbiw	r30, 0x00	; 0
    2dc6:	29 f0       	breq	.+10     	; 0x2dd2 <__vector_126+0x15c>
    2dc8:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2dca:	81 11       	cpse	r24, r1
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <__vector_126+0x15c>
    2dce:	d9 d8       	rcall	.-3662   	; 0x1f82 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2dd0:	34 c0       	rjmp	.+104    	; 0x2e3a <__vector_126+0x1c4>
    2dd2:	e5 d8       	rcall	.-3638   	; 0x1f9e <udd_ctrl_send_zlp_in>
    2dd4:	32 c0       	rjmp	.+100    	; 0x2e3a <__vector_126+0x1c4>
    2dd6:	80 91 07 24 	lds	r24, 0x2407	; 0x802407 <udd_g_ctrlreq+0xa>
    2dda:	90 91 08 24 	lds	r25, 0x2408	; 0x802408 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2dde:	c8 17       	cp	r28, r24
    2de0:	d9 07       	cpc	r29, r25
    2de2:	f9 f4       	brne	.+62     	; 0x2e22 <__vector_126+0x1ac>
    2de4:	e0 91 0b 24 	lds	r30, 0x240B	; 0x80240b <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2de8:	f0 91 0c 24 	lds	r31, 0x240C	; 0x80240c <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2dec:	30 97       	sbiw	r30, 0x00	; 0
    2dee:	11 f4       	brne	.+4      	; 0x2df4 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2df0:	c8 d8       	rcall	.-3696   	; 0x1f82 <udd_ctrl_stall_data>
    2df2:	23 c0       	rjmp	.+70     	; 0x2e3a <__vector_126+0x1c4>
    2df4:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2df6:	81 11       	cpse	r24, r1
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <__vector_126+0x188>
    2dfa:	c3 d8       	rcall	.-3706   	; 0x1f82 <udd_ctrl_stall_data>
    2dfc:	1e c0       	rjmp	.+60     	; 0x2e3a <__vector_126+0x1c4>
    2dfe:	20 91 66 22 	lds	r18, 0x2266	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2e02:	30 91 67 22 	lds	r19, 0x2267	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    2e06:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    2e0a:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2e0e:	82 0f       	add	r24, r18
    2e10:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2e12:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2e16:	90 93 67 22 	sts	0x2267, r25	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2e1a:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    2e1e:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2e22:	e8 e7       	ldi	r30, 0x78	; 120
    2e24:	f2 e2       	ldi	r31, 0x22	; 34
		udd_ctrl_in_sent();
    2e26:	02 e0       	ldi	r16, 0x02	; 2
    2e28:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2e2a:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2e2c:	06 93       	lac	Z, r16
    2e2e:	05 c0       	rjmp	.+10     	; 0x2e3a <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2e30:	80 38       	cpi	r24, 0x80	; 128
    2e32:	11 f4       	brne	.+4      	; 0x2e38 <__vector_126+0x1c2>
    2e34:	ca d8       	rcall	.-3692   	; 0x1fca <udd_ctrl_in_sent>
    2e36:	01 c0       	rjmp	.+2      	; 0x2e3a <__vector_126+0x1c4>
    2e38:	ea d9       	rcall	.-3116   	; 0x220e <udd_ep_trans_complet>
    2e3a:	ff 91       	pop	r31
    2e3c:	ef 91       	pop	r30
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	bf 91       	pop	r27
    2e44:	af 91       	pop	r26
    2e46:	9f 91       	pop	r25
    2e48:	8f 91       	pop	r24
    2e4a:	7f 91       	pop	r23
    2e4c:	6f 91       	pop	r22
    2e4e:	5f 91       	pop	r21
    2e50:	4f 91       	pop	r20
    2e52:	3f 91       	pop	r19
    2e54:	2f 91       	pop	r18
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	0f 90       	pop	r0
    2e5c:	0b be       	out	0x3b, r0	; 59
    2e5e:	0f 90       	pop	r0
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	0f 90       	pop	r0
    2e64:	1f 90       	pop	r1
    2e66:	18 95       	reti

00002e68 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    2e68:	cf 92       	push	r12
    2e6a:	df 92       	push	r13
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	cf 93       	push	r28
    2e72:	df 93       	push	r29
    2e74:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    2e76:	6b 01       	movw	r12, r22
    2e78:	e1 2c       	mov	r14, r1
    2e7a:	f1 2c       	mov	r15, r1
    2e7c:	60 e8       	ldi	r22, 0x80	; 128
    2e7e:	73 ec       	ldi	r23, 0xC3	; 195
    2e80:	89 ec       	ldi	r24, 0xC9	; 201
    2e82:	91 e0       	ldi	r25, 0x01	; 1
    2e84:	a7 01       	movw	r20, r14
    2e86:	96 01       	movw	r18, r12
    2e88:	0e 94 0a 24 	call	0x4814	; 0x4814 <__udivmodsi4>
    2e8c:	ca 01       	movw	r24, r20
    2e8e:	b9 01       	movw	r22, r18
    2e90:	2f ef       	ldi	r18, 0xFF	; 255
    2e92:	3f ef       	ldi	r19, 0xFF	; 255
    2e94:	40 e0       	ldi	r20, 0x00	; 0
    2e96:	50 e0       	ldi	r21, 0x00	; 0
    2e98:	0e 94 0a 24 	call	0x4814	; 0x4814 <__udivmodsi4>
	if (smallest_div < 1) {
    2e9c:	21 15       	cp	r18, r1
    2e9e:	31 05       	cpc	r19, r1
    2ea0:	29 f4       	brne	.+10     	; 0x2eac <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    2ea6:	21 e0       	ldi	r18, 0x01	; 1
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	2d c0       	rjmp	.+90     	; 0x2f06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    2eac:	22 30       	cpi	r18, 0x02	; 2
    2eae:	31 05       	cpc	r19, r1
    2eb0:	28 f4       	brcc	.+10     	; 0x2ebc <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    2eb2:	82 e0       	ldi	r24, 0x02	; 2
    2eb4:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    2eb6:	22 e0       	ldi	r18, 0x02	; 2
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	25 c0       	rjmp	.+74     	; 0x2f06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    2ebc:	24 30       	cpi	r18, 0x04	; 4
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	28 f4       	brcc	.+10     	; 0x2ecc <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2ec2:	83 e0       	ldi	r24, 0x03	; 3
    2ec4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    2ec6:	24 e0       	ldi	r18, 0x04	; 4
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	1d c0       	rjmp	.+58     	; 0x2f06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    2ecc:	28 30       	cpi	r18, 0x08	; 8
    2ece:	31 05       	cpc	r19, r1
    2ed0:	28 f4       	brcc	.+10     	; 0x2edc <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2ed2:	84 e0       	ldi	r24, 0x04	; 4
    2ed4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    2ed6:	28 e0       	ldi	r18, 0x08	; 8
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	15 c0       	rjmp	.+42     	; 0x2f06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    2edc:	20 34       	cpi	r18, 0x40	; 64
    2ede:	31 05       	cpc	r19, r1
    2ee0:	28 f4       	brcc	.+10     	; 0x2eec <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2ee2:	85 e0       	ldi	r24, 0x05	; 5
    2ee4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2ee6:	20 e4       	ldi	r18, 0x40	; 64
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	0d c0       	rjmp	.+26     	; 0x2f06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    2eec:	2f 3f       	cpi	r18, 0xFF	; 255
    2eee:	31 05       	cpc	r19, r1
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <pwm_set_frequency+0x8c>
    2ef2:	28 f4       	brcc	.+10     	; 0x2efe <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2ef4:	86 e0       	ldi	r24, 0x06	; 6
    2ef6:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	31 e0       	ldi	r19, 0x01	; 1
    2efc:	04 c0       	rjmp	.+8      	; 0x2f06 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2efe:	87 e0       	ldi	r24, 0x07	; 7
    2f00:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	60 e8       	ldi	r22, 0x80	; 128
    2f0c:	73 ec       	ldi	r23, 0xC3	; 195
    2f0e:	89 ec       	ldi	r24, 0xC9	; 201
    2f10:	91 e0       	ldi	r25, 0x01	; 1
    2f12:	0e 94 0a 24 	call	0x4814	; 0x4814 <__udivmodsi4>
    2f16:	ca 01       	movw	r24, r20
    2f18:	b9 01       	movw	r22, r18
    2f1a:	a7 01       	movw	r20, r14
    2f1c:	96 01       	movw	r18, r12
    2f1e:	0e 94 0a 24 	call	0x4814	; 0x4814 <__udivmodsi4>
    2f22:	2d 83       	std	Y+5, r18	; 0x05
    2f24:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2f26:	24 36       	cpi	r18, 0x64	; 100
    2f28:	31 05       	cpc	r19, r1
    2f2a:	18 f4       	brcc	.+6      	; 0x2f32 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    2f2c:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2f2e:	1d 82       	std	Y+5, r1	; 0x05
    2f30:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2f32:	df 91       	pop	r29
    2f34:	cf 91       	pop	r28
    2f36:	ff 90       	pop	r15
    2f38:	ef 90       	pop	r14
    2f3a:	df 90       	pop	r13
    2f3c:	cf 90       	pop	r12
    2f3e:	08 95       	ret

00002f40 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	cf 93       	push	r28
    2f46:	df 93       	push	r29
    2f48:	ec 01       	movw	r28, r24
    2f4a:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    2f4c:	86 2f       	mov	r24, r22
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	87 30       	cpi	r24, 0x07	; 7
    2f52:	91 05       	cpc	r25, r1
    2f54:	08 f0       	brcs	.+2      	; 0x2f58 <pwm_init+0x18>
    2f56:	8b c0       	rjmp	.+278    	; 0x306e <pwm_init+0x12e>
    2f58:	fc 01       	movw	r30, r24
    2f5a:	88 27       	eor	r24, r24
    2f5c:	eb 5f       	subi	r30, 0xFB	; 251
    2f5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f60:	8f 4f       	sbci	r24, 0xFF	; 255
    2f62:	0c 94 2c 24 	jmp	0x4858	; 0x4858 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	98 e0       	ldi	r25, 0x08	; 8
    2f6a:	88 83       	st	Y, r24
    2f6c:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2f6e:	e0 e4       	ldi	r30, 0x40	; 64
    2f70:	f6 e0       	ldi	r31, 0x06	; 6
    2f72:	30 81       	ld	r19, Z
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	2f ef       	ldi	r18, 0xFF	; 255
    2f7a:	24 0f       	add	r18, r20
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <pwm_init+0x42>
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	2a 95       	dec	r18
    2f84:	e2 f7       	brpl	.-8      	; 0x2f7e <pwm_init+0x3e>
    2f86:	83 2b       	or	r24, r19
    2f88:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2f8a:	71 c0       	rjmp	.+226    	; 0x306e <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    2f8c:	80 e4       	ldi	r24, 0x40	; 64
    2f8e:	98 e0       	ldi	r25, 0x08	; 8
    2f90:	88 83       	st	Y, r24
    2f92:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2f94:	e0 e4       	ldi	r30, 0x40	; 64
    2f96:	f6 e0       	ldi	r31, 0x06	; 6
    2f98:	30 81       	ld	r19, Z
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	23 e0       	ldi	r18, 0x03	; 3
    2fa0:	24 0f       	add	r18, r20
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <pwm_init+0x68>
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	2a 95       	dec	r18
    2faa:	e2 f7       	brpl	.-8      	; 0x2fa4 <pwm_init+0x64>
    2fac:	83 2b       	or	r24, r19
    2fae:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2fb0:	5e c0       	rjmp	.+188    	; 0x306e <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	99 e0       	ldi	r25, 0x09	; 9
    2fb6:	88 83       	st	Y, r24
    2fb8:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    2fba:	e0 e6       	ldi	r30, 0x60	; 96
    2fbc:	f6 e0       	ldi	r31, 0x06	; 6
    2fbe:	30 81       	ld	r19, Z
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	2f ef       	ldi	r18, 0xFF	; 255
    2fc6:	24 0f       	add	r18, r20
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <pwm_init+0x8e>
    2fca:	88 0f       	add	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	2a 95       	dec	r18
    2fd0:	e2 f7       	brpl	.-8      	; 0x2fca <pwm_init+0x8a>
    2fd2:	83 2b       	or	r24, r19
    2fd4:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2fd6:	4b c0       	rjmp	.+150    	; 0x306e <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2fd8:	80 e4       	ldi	r24, 0x40	; 64
    2fda:	99 e0       	ldi	r25, 0x09	; 9
    2fdc:	88 83       	st	Y, r24
    2fde:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2fe0:	e0 e6       	ldi	r30, 0x60	; 96
    2fe2:	f6 e0       	ldi	r31, 0x06	; 6
    2fe4:	30 81       	ld	r19, Z
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	23 e0       	ldi	r18, 0x03	; 3
    2fec:	24 0f       	add	r18, r20
    2fee:	02 c0       	rjmp	.+4      	; 0x2ff4 <pwm_init+0xb4>
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	2a 95       	dec	r18
    2ff6:	e2 f7       	brpl	.-8      	; 0x2ff0 <pwm_init+0xb0>
    2ff8:	83 2b       	or	r24, r19
    2ffa:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2ffc:	38 c0       	rjmp	.+112    	; 0x306e <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	9a e0       	ldi	r25, 0x0A	; 10
    3002:	88 83       	st	Y, r24
    3004:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    3006:	e0 e8       	ldi	r30, 0x80	; 128
    3008:	f6 e0       	ldi	r31, 0x06	; 6
    300a:	30 81       	ld	r19, Z
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	2f ef       	ldi	r18, 0xFF	; 255
    3012:	24 0f       	add	r18, r20
    3014:	02 c0       	rjmp	.+4      	; 0x301a <pwm_init+0xda>
    3016:	88 0f       	add	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	2a 95       	dec	r18
    301c:	e2 f7       	brpl	.-8      	; 0x3016 <pwm_init+0xd6>
    301e:	83 2b       	or	r24, r19
    3020:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    3022:	25 c0       	rjmp	.+74     	; 0x306e <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    3024:	80 e4       	ldi	r24, 0x40	; 64
    3026:	9a e0       	ldi	r25, 0x0A	; 10
    3028:	88 83       	st	Y, r24
    302a:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    302c:	e0 e8       	ldi	r30, 0x80	; 128
    302e:	f6 e0       	ldi	r31, 0x06	; 6
    3030:	30 81       	ld	r19, Z
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	23 e0       	ldi	r18, 0x03	; 3
    3038:	24 0f       	add	r18, r20
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <pwm_init+0x100>
    303c:	88 0f       	add	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	2a 95       	dec	r18
    3042:	e2 f7       	brpl	.-8      	; 0x303c <pwm_init+0xfc>
    3044:	83 2b       	or	r24, r19
    3046:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    3048:	12 c0       	rjmp	.+36     	; 0x306e <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	9b e0       	ldi	r25, 0x0B	; 11
    304e:	88 83       	st	Y, r24
    3050:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    3052:	e0 ea       	ldi	r30, 0xA0	; 160
    3054:	f6 e0       	ldi	r31, 0x06	; 6
    3056:	30 81       	ld	r19, Z
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	2f ef       	ldi	r18, 0xFF	; 255
    305e:	24 0f       	add	r18, r20
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <pwm_init+0x126>
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	2a 95       	dec	r18
    3068:	e2 f7       	brpl	.-8      	; 0x3062 <pwm_init+0x122>
    306a:	83 2b       	or	r24, r19
    306c:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    306e:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    3070:	42 30       	cpi	r20, 0x02	; 2
    3072:	61 f0       	breq	.+24     	; 0x308c <pwm_init+0x14c>
    3074:	18 f4       	brcc	.+6      	; 0x307c <pwm_init+0x13c>
    3076:	41 30       	cpi	r20, 0x01	; 1
    3078:	31 f0       	breq	.+12     	; 0x3086 <pwm_init+0x146>
    307a:	10 c0       	rjmp	.+32     	; 0x309c <pwm_init+0x15c>
    307c:	43 30       	cpi	r20, 0x03	; 3
    307e:	49 f0       	breq	.+18     	; 0x3092 <pwm_init+0x152>
    3080:	44 30       	cpi	r20, 0x04	; 4
    3082:	51 f0       	breq	.+20     	; 0x3098 <pwm_init+0x158>
    3084:	0b c0       	rjmp	.+22     	; 0x309c <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    3086:	80 e1       	ldi	r24, 0x10	; 16
    3088:	8b 83       	std	Y+3, r24	; 0x03
		break;
    308a:	08 c0       	rjmp	.+16     	; 0x309c <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    308c:	80 e2       	ldi	r24, 0x20	; 32
    308e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    3090:	05 c0       	rjmp	.+10     	; 0x309c <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    3092:	80 e4       	ldi	r24, 0x40	; 64
    3094:	8b 83       	std	Y+3, r24	; 0x03
		break;
    3096:	02 c0       	rjmp	.+4      	; 0x309c <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    3098:	80 e8       	ldi	r24, 0x80	; 128
    309a:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    309c:	88 81       	ld	r24, Y
    309e:	99 81       	ldd	r25, Y+1	; 0x01
    30a0:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    30a4:	e8 81       	ld	r30, Y
    30a6:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    30a8:	81 81       	ldd	r24, Z+1	; 0x01
    30aa:	88 7f       	andi	r24, 0xF8	; 248
    30ac:	83 60       	ori	r24, 0x03	; 3
    30ae:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    30b0:	1d 82       	std	Y+5, r1	; 0x05
    30b2:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    30b4:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    30b6:	e8 81       	ld	r30, Y
    30b8:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    30ba:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    30bc:	80 7f       	andi	r24, 0xF0	; 240
    30be:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    30c0:	b8 01       	movw	r22, r16
    30c2:	ce 01       	movw	r24, r28
    30c4:	d1 de       	rcall	.-606    	; 0x2e68 <pwm_set_frequency>
}
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	1f 91       	pop	r17
    30cc:	0f 91       	pop	r16
    30ce:	08 95       	ret

000030d0 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    30d0:	cf 93       	push	r28
    30d2:	df 93       	push	r29
    30d4:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    30d6:	2d 81       	ldd	r18, Y+5	; 0x05
    30d8:	3e 81       	ldd	r19, Y+6	; 0x06
    30da:	a6 2f       	mov	r26, r22
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	0e 94 34 24 	call	0x4868	; 0x4868 <__umulhisi3>
    30e2:	24 e6       	ldi	r18, 0x64	; 100
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	40 e0       	ldi	r20, 0x00	; 0
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	0e 94 0a 24 	call	0x4814	; 0x4814 <__udivmodsi4>
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	e8 81       	ld	r30, Y
    30f2:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    30f4:	e6 fd       	sbrc	r30, 6
    30f6:	17 c0       	rjmp	.+46     	; 0x3126 <pwm_start+0x56>
		switch (channel_index) {
    30f8:	82 30       	cpi	r24, 0x02	; 2
    30fa:	61 f0       	breq	.+24     	; 0x3114 <pwm_start+0x44>
    30fc:	18 f4       	brcc	.+6      	; 0x3104 <pwm_start+0x34>
    30fe:	81 30       	cpi	r24, 0x01	; 1
    3100:	31 f0       	breq	.+12     	; 0x310e <pwm_start+0x3e>
    3102:	1b c0       	rjmp	.+54     	; 0x313a <pwm_start+0x6a>
    3104:	83 30       	cpi	r24, 0x03	; 3
    3106:	49 f0       	breq	.+18     	; 0x311a <pwm_start+0x4a>
    3108:	84 30       	cpi	r24, 0x04	; 4
    310a:	51 f0       	breq	.+20     	; 0x3120 <pwm_start+0x50>
    310c:	16 c0       	rjmp	.+44     	; 0x313a <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    310e:	20 af       	std	Z+56, r18	; 0x38
    3110:	31 af       	std	Z+57, r19	; 0x39
    3112:	13 c0       	rjmp	.+38     	; 0x313a <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    3114:	22 af       	std	Z+58, r18	; 0x3a
    3116:	33 af       	std	Z+59, r19	; 0x3b
    3118:	10 c0       	rjmp	.+32     	; 0x313a <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    311a:	24 af       	std	Z+60, r18	; 0x3c
    311c:	35 af       	std	Z+61, r19	; 0x3d
    311e:	0d c0       	rjmp	.+26     	; 0x313a <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    3120:	26 af       	std	Z+62, r18	; 0x3e
    3122:	37 af       	std	Z+63, r19	; 0x3f
    3124:	0a c0       	rjmp	.+20     	; 0x313a <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    3126:	81 30       	cpi	r24, 0x01	; 1
    3128:	19 f0       	breq	.+6      	; 0x3130 <pwm_start+0x60>
    312a:	82 30       	cpi	r24, 0x02	; 2
    312c:	21 f0       	breq	.+8      	; 0x3136 <pwm_start+0x66>
    312e:	05 c0       	rjmp	.+10     	; 0x313a <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    3130:	20 af       	std	Z+56, r18	; 0x38
    3132:	31 af       	std	Z+57, r19	; 0x39
    3134:	02 c0       	rjmp	.+4      	; 0x313a <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    3136:	22 af       	std	Z+58, r18	; 0x3a
    3138:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    313a:	8d 81       	ldd	r24, Y+5	; 0x05
    313c:	9e 81       	ldd	r25, Y+6	; 0x06
    313e:	e8 81       	ld	r30, Y
    3140:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    3142:	86 a3       	std	Z+38, r24	; 0x26
    3144:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    3146:	8b 81       	ldd	r24, Y+3	; 0x03
    3148:	e8 81       	ld	r30, Y
    314a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    314c:	e6 fd       	sbrc	r30, 6
    314e:	04 c0       	rjmp	.+8      	; 0x3158 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    3150:	91 81       	ldd	r25, Z+1	; 0x01
    3152:	89 2b       	or	r24, r25
    3154:	81 83       	std	Z+1, r24	; 0x01
    3156:	04 c0       	rjmp	.+8      	; 0x3160 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    3158:	91 81       	ldd	r25, Z+1	; 0x01
    315a:	80 73       	andi	r24, 0x30	; 48
    315c:	89 2b       	or	r24, r25
    315e:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    3160:	e8 81       	ld	r30, Y
    3162:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3164:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3166:	80 7f       	andi	r24, 0xF0	; 240
    3168:	9c 81       	ldd	r25, Y+4	; 0x04
    316a:	89 2b       	or	r24, r25
    316c:	80 83       	st	Z, r24
}
    316e:	df 91       	pop	r29
    3170:	cf 91       	pop	r28
    3172:	08 95       	ret

00003174 <cb_rtc_alarm>:

void halt(void)
{
	/* MAIN Loop Shutdown */

	runmode = 0;
    3174:	08 95       	ret

00003176 <usb_callback_suspend_action>:
    3176:	08 95       	ret

00003178 <usb_callback_resume_action>:
    3178:	08 95       	ret

0000317a <usb_callback_remotewakeup_enable>:
    317a:	08 95       	ret

0000317c <usb_callback_remotewakeup_disable>:
    317c:	08 95       	ret

0000317e <usb_callback_cdc_enable>:
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	80 93 bc 22 	sts	0x22BC, r24	; 0x8022bc <usb_cdc_transfers_autorized>
    3184:	08 95       	ret

00003186 <usb_callback_cdc_disable>:
    3186:	10 92 bc 22 	sts	0x22BC, r1	; 0x8022bc <usb_cdc_transfers_autorized>
    318a:	08 95       	ret

0000318c <usb_callback_config>:
    318c:	08 95       	ret

0000318e <usb_callback_cdc_set_dtr>:
    318e:	08 95       	ret

00003190 <usb_callback_cdc_set_rts>:
    3190:	08 95       	ret

00003192 <usb_callback_rx_notify>:
    3192:	08 95       	ret

00003194 <usb_callback_tx_empty_notify>:
    3194:	08 95       	ret

00003196 <main>:
}


int main(void)
{
    3196:	2f 92       	push	r2
    3198:	3f 92       	push	r3
    319a:	4f 92       	push	r4
    319c:	5f 92       	push	r5
    319e:	6f 92       	push	r6
    31a0:	7f 92       	push	r7
    31a2:	8f 92       	push	r8
    31a4:	9f 92       	push	r9
    31a6:	af 92       	push	r10
    31a8:	bf 92       	push	r11
    31aa:	cf 92       	push	r12
    31ac:	df 92       	push	r13
    31ae:	ef 92       	push	r14
    31b0:	ff 92       	push	r15
    31b2:	0f 93       	push	r16
    31b4:	1f 93       	push	r17
    31b6:	cf 93       	push	r28
    31b8:	df 93       	push	r29
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	c2 54       	subi	r28, 0x42	; 66
    31c0:	d1 09       	sbc	r29, r1
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	de bf       	out	0x3e, r29	; 62
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    31c6:	0f 2e       	mov	r0, r31
    31c8:	f0 ea       	ldi	r31, 0xA0	; 160
    31ca:	af 2e       	mov	r10, r31
    31cc:	b1 2c       	mov	r11, r1
    31ce:	f0 2d       	mov	r31, r0
    31d0:	07 e0       	ldi	r16, 0x07	; 7
    31d2:	d5 01       	movw	r26, r10
    31d4:	12 96       	adiw	r26, 0x02	; 2
	uint8_t retcode = 0;

	/* Init of sub-modules */
	pmic_init();
	sysclk_init();
    31d6:	0c 93       	st	X, r16
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    31d8:	71 d2       	rcall	.+1250   	; 0x36bc <sysclk_init>
    31da:	ed e0       	ldi	r30, 0x0D	; 13
    31dc:	f4 e2       	ldi	r31, 0x24	; 36
    31de:	10 82       	st	Z, r1
    31e0:	11 82       	std	Z+1, r1	; 0x01
    31e2:	12 82       	std	Z+2, r1	; 0x02
    31e4:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    31e6:	14 82       	std	Z+4, r1	; 0x04
    31e8:	11 e0       	ldi	r17, 0x01	; 1
	sleepmgr_init();	// Unlocks all sleep mode levels
	rtc_init();
    31ea:	15 83       	std	Z+5, r17	; 0x05
    31ec:	0e 94 4f 01 	call	0x29e	; 0x29e <rtc_init>
	rtc_set_callback(cb_rtc_alarm);
    31f0:	8a eb       	ldi	r24, 0xBA	; 186
    31f2:	98 e1       	ldi	r25, 0x18	; 24
    31f4:	0e 94 4a 01 	call	0x294	; 0x294 <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    31f8:	62 e0       	ldi	r22, 0x02	; 2
    31fa:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event 7 */
	EVSYS.CH7MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    31fc:	e0 d2       	rcall	.+1472   	; 0x37be <sysclk_enable_module>
    31fe:	e0 e8       	ldi	r30, 0x80	; 128
    3200:	f1 e0       	ldi	r31, 0x01	; 1
    3202:	80 ec       	ldi	r24, 0xC0	; 192

	/* DAC - event 6 */
	EVSYS.CH6MUX = EVSYS_CHMUX_TCE1_OVF_gc;
    3204:	87 83       	std	Z+7, r24	; 0x07
    3206:	88 ee       	ldi	r24, 0xE8	; 232


static void tc_init(void)
{
	/* DAC clock */
	tc_enable(&TCE1);
    3208:	86 83       	std	Z+6, r24	; 0x06
    320a:	80 e4       	ldi	r24, 0x40	; 64
    320c:	9a e0       	ldi	r25, 0x0A	; 10
    320e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    3212:	0f 2e       	mov	r0, r31
    3214:	f0 e4       	ldi	r31, 0x40	; 64
    3216:	ef 2e       	mov	r14, r31
    3218:	fa e0       	ldi	r31, 0x0A	; 10
    321a:	ff 2e       	mov	r15, r31
    321c:	f0 2d       	mov	r31, r0
    321e:	f7 01       	movw	r30, r14
    3220:	81 81       	ldd	r24, Z+1	; 0x01
    3222:	88 7f       	andi	r24, 0xF8	; 248
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    3224:	81 83       	std	Z+1, r24	; 0x01
    3226:	80 e7       	ldi	r24, 0x70	; 112
    3228:	92 e0       	ldi	r25, 0x02	; 2
    322a:	86 a3       	std	Z+38, r24	; 0x26
	tc_set_wgm(&TCE1, TC_WG_NORMAL);											// Internal clock for DAC convertion
	tc_write_period(&TCE1, (sysclk_get_per_hz() / DAC_RATE_OF_CONV) - 1);		// DAC clock 48 kHz for audio play-back

	/* VCTCXO PWM signal generation */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 500);							// Init PWM structure and enable timer
    322c:	97 a3       	std	Z+39, r25	; 0x27
    322e:	24 ef       	ldi	r18, 0xF4	; 244
    3230:	31 e0       	ldi	r19, 0x01	; 1
    3232:	43 e0       	ldi	r20, 0x03	; 3
    3234:	60 e0       	ldi	r22, 0x00	; 0
    3236:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    3238:	01 96       	adiw	r24, 0x01	; 1
    323a:	82 de       	rcall	.-764    	; 0x2f40 <pwm_init>
    323c:	6d e2       	ldi	r22, 0x2D	; 45
    323e:	ce 01       	movw	r24, r28
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    3240:	01 96       	adiw	r24, 0x01	; 1
    3242:	46 df       	rcall	.-372    	; 0x30d0 <pwm_start>
    3244:	c1 2c       	mov	r12, r1
    3246:	68 94       	set
    3248:	dd 24       	eor	r13, r13
    324a:	d3 f8       	bld	r13, 3
    324c:	8d e5       	ldi	r24, 0x5D	; 93
    324e:	94 e7       	ldi	r25, 0x74	; 116
    3250:	d6 01       	movw	r26, r12
    3252:	dc 96       	adiw	r26, 0x3c	; 60
    3254:	8d 93       	st	X+, r24
	struct adc_channel_config			adcch_vctcxo_conf;
	struct adc_channel_config			adcch_io_adc4_conf;
	struct adc_channel_config			adcch_io_adc5_conf;

	/* Prepare the structures */
	adc_read_configuration(&ADC_5V0,						&adc_5v0_conf);
    3256:	9c 93       	st	X, r25
    3258:	dd 97       	sbiw	r26, 0x3d	; 61
    325a:	be 01       	movw	r22, r28
    325c:	6c 5d       	subi	r22, 0xDC	; 220
    325e:	7f 4f       	sbci	r23, 0xFF	; 255
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    3264:	0e 94 ba 05 	call	0xb74	; 0xb74 <adc_read_configuration>
    3268:	ae 01       	movw	r20, r28
    326a:	41 5c       	subi	r20, 0xC1	; 193
    326c:	5f 4f       	sbci	r21, 0xFF	; 255
    326e:	61 e0       	ldi	r22, 0x01	; 1
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_3V0,						&adc_3v0_conf);
    3274:	0e 94 3e 06 	call	0xc7c	; 0xc7c <adcch_read_configuration>
    3278:	be 01       	movw	r22, r28
    327a:	63 5e       	subi	r22, 0xE3	; 227
    327c:	7f 4f       	sbci	r23, 0xFF	; 255
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    3282:	0e 94 ba 05 	call	0xb74	; 0xb74 <adc_read_configuration>
    3286:	ae 01       	movw	r20, r28
    3288:	45 5c       	subi	r20, 0xC5	; 197
    328a:	5f 4f       	sbci	r21, 0xFF	; 255
    328c:	61 e0       	ldi	r22, 0x01	; 1
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VBAT,						&adc_vbat_conf);
    3292:	0e 94 3e 06 	call	0xc7c	; 0xc7c <adcch_read_configuration>
    3296:	be 01       	movw	r22, r28
    3298:	6a 5e       	subi	r22, 0xEA	; 234
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    32a0:	0e 94 ba 05 	call	0xb74	; 0xb74 <adc_read_configuration>
    32a4:	ae 01       	movw	r20, r28
    32a6:	49 5c       	subi	r20, 0xC9	; 201
    32a8:	5f 4f       	sbci	r21, 0xFF	; 255
    32aa:	61 e0       	ldi	r22, 0x01	; 1
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VCTCXO,						&adc_vctcxo_conf);
    32b0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <adcch_read_configuration>
    32b4:	be 01       	movw	r22, r28
    32b6:	61 5f       	subi	r22, 0xF1	; 241
    32b8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    32be:	0e 94 ba 05 	call	0xb74	; 0xb74 <adc_read_configuration>
    32c2:	ae 01       	movw	r20, r28
    32c4:	4d 5c       	subi	r20, 0xCD	; 205
    32c6:	5f 4f       	sbci	r21, 0xFF	; 255
    32c8:	62 e0       	ldi	r22, 0x02	; 2
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC4,					&adc_io_adc4_conf);
    32ce:	0e 94 3e 06 	call	0xc7c	; 0xc7c <adcch_read_configuration>
    32d2:	be 01       	movw	r22, r28
    32d4:	68 5f       	subi	r22, 0xF8	; 248
    32d6:	7f 4f       	sbci	r23, 0xFF	; 255
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_io_adc4_conf);
    32dc:	0e 94 ba 05 	call	0xb74	; 0xb74 <adc_read_configuration>
    32e0:	ae 01       	movw	r20, r28
    32e2:	41 5d       	subi	r20, 0xD1	; 209
    32e4:	5f 4f       	sbci	r21, 0xFF	; 255
    32e6:	64 e0       	ldi	r22, 0x04	; 4
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC5,					&adc_io_adc5_conf);
    32ec:	0e 94 3e 06 	call	0xc7c	; 0xc7c <adcch_read_configuration>
    32f0:	be 01       	movw	r22, r28
    32f2:	6f 5f       	subi	r22, 0xFF	; 255
    32f4:	7f 4f       	sbci	r23, 0xFF	; 255
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_io_adc5_conf);
    32fa:	0e 94 ba 05 	call	0xb74	; 0xb74 <adc_read_configuration>
    32fe:	ae 01       	movw	r20, r28
    3300:	45 5d       	subi	r20, 0xD5	; 213
    3302:	5f 4f       	sbci	r21, 0xFF	; 255
    3304:	68 e0       	ldi	r22, 0x08	; 8
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	92 e0       	ldi	r25, 0x02	; 2
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    330a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <adcch_read_configuration>
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    330e:	6d a1       	ldd	r22, Y+37	; 0x25
    3310:	8e a1       	ldd	r24, Y+38	; 0x26
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3312:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3314:	8e a3       	std	Y+38, r24	; 0x26
    3316:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3318:	8f 8d       	ldd	r24, Y+31	; 0x1f
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    331a:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    331c:	8f 8f       	std	Y+31, r24	; 0x1f
    331e:	4f 89       	ldd	r20, Y+23	; 0x17
    3320:	88 8d       	ldd	r24, Y+24	; 0x18
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3322:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3324:	88 8f       	std	Y+24, r24	; 0x18
    3326:	38 89       	ldd	r19, Y+16	; 0x10
    3328:	89 89       	ldd	r24, Y+17	; 0x11
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    332a:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    332c:	89 8b       	std	Y+17, r24	; 0x11
    332e:	29 85       	ldd	r18, Y+9	; 0x09
    3330:	8a 85       	ldd	r24, Y+10	; 0x0a
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3332:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3334:	8a 87       	std	Y+10, r24	; 0x0a
    3336:	9a 81       	ldd	r25, Y+2	; 0x02
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    333a:	8f 78       	andi	r24, 0x8F	; 143
    333c:	8b 83       	std	Y+3, r24	; 0x03
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    333e:	86 ec       	ldi	r24, 0xC6	; 198
    3340:	8f a3       	std	Y+39, r24	; 0x27
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    3342:	1b 87       	std	Y+11, r17	; 0x0b
    3344:	1c 83       	std	Y+4, r17	; 0x04
    3346:	83 e0       	ldi	r24, 0x03	; 3
    3348:	88 a7       	std	Y+40, r24	; 0x28
    334a:	89 a3       	std	Y+33, r24	; 0x21
    334c:	8a 8f       	std	Y+26, r24	; 0x1a
    334e:	8b 8b       	std	Y+19, r24	; 0x13
static inline void adc_set_gain_impedance_mode(struct adc_config *conf,
		enum adc_gainstage_impmode impmode)
{
	switch (impmode) {
	case ADC_GAIN_HIGHIMPEDANCE:
		conf->ctrlb &= ~ADC_IMPMODE_bm;
    3350:	8c 87       	std	Y+12, r24	; 0x0c
    3352:	8d 83       	std	Y+5, r24	; 0x05
    3354:	61 70       	andi	r22, 0x01	; 1
    3356:	60 64       	ori	r22, 0x40	; 64
    3358:	6d a3       	std	Y+37, r22	; 0x25
    335a:	59 70       	andi	r21, 0x09	; 9
    335c:	50 64       	ori	r21, 0x40	; 64
    335e:	5e 8f       	std	Y+30, r21	; 0x1e
    3360:	49 70       	andi	r20, 0x09	; 9
    3362:	40 64       	ori	r20, 0x40	; 64
    3364:	4f 8b       	std	Y+23, r20	; 0x17
    3366:	39 70       	andi	r19, 0x09	; 9
    3368:	30 64       	ori	r19, 0x40	; 64
    336a:	38 8b       	std	Y+16, r19	; 0x10
    336c:	21 70       	andi	r18, 0x01	; 1
    336e:	20 64       	ori	r18, 0x40	; 64
    3370:	29 87       	std	Y+9, r18	; 0x09
    3372:	91 70       	andi	r25, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3374:	90 64       	ori	r25, 0x40	; 64
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3376:	9a 83       	std	Y+2, r25	; 0x02
    3378:	1f af       	std	Y+63, r17	; 0x3f
    337a:	90 e1       	ldi	r25, 0x10	; 16
    337c:	21 96       	adiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    337e:	9f af       	std	Y+63, r25	; 0x3f
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3380:	21 97       	sbiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3382:	1b af       	std	Y+59, r17	; 0x3b
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3384:	1c ae       	std	Y+60, r1	; 0x3c
    3386:	1f ab       	std	Y+55, r17	; 0x37
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3388:	98 e1       	ldi	r25, 0x18	; 24
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    338a:	98 af       	std	Y+56, r25	; 0x38
    338c:	1b ab       	std	Y+51, r17	; 0x33
    338e:	68 94       	set
    3390:	99 24       	eor	r9, r9
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3392:	93 f8       	bld	r9, 3
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3394:	9c aa       	std	Y+52, r9	; 0x34
    3396:	1f a7       	std	Y+47, r17	; 0x2f
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3398:	90 e2       	ldi	r25, 0x20	; 32
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    339a:	98 ab       	std	Y+48, r25	; 0x30
    339c:	1b a7       	std	Y+43, r17	; 0x2b
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    339e:	98 e2       	ldi	r25, 0x28	; 40
    33a0:	9c a7       	std	Y+44, r25	; 0x2c
    33a2:	22 96       	adiw	r28, 0x02	; 2
    33a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    33a6:	22 97       	sbiw	r28, 0x02	; 2
    33a8:	93 7f       	andi	r25, 0xF3	; 243
    33aa:	22 96       	adiw	r28, 0x02	; 2
    33ac:	9f af       	std	Y+63, r25	; 0x3f
    33ae:	22 97       	sbiw	r28, 0x02	; 2
    33b0:	9d ad       	ldd	r25, Y+61	; 0x3d
    33b2:	93 7f       	andi	r25, 0xF3	; 243
    33b4:	9d af       	std	Y+61, r25	; 0x3d
    33b6:	99 ad       	ldd	r25, Y+57	; 0x39
    33b8:	93 7f       	andi	r25, 0xF3	; 243
    33ba:	99 af       	std	Y+57, r25	; 0x39
    33bc:	9d a9       	ldd	r25, Y+53	; 0x35
    33be:	93 7f       	andi	r25, 0xF3	; 243
    33c0:	9d ab       	std	Y+53, r25	; 0x35
    33c2:	99 a9       	ldd	r25, Y+49	; 0x31
    33c4:	93 7f       	andi	r25, 0xF3	; 243
    33c6:	99 ab       	std	Y+49, r25	; 0x31
    33c8:	9d a5       	ldd	r25, Y+45	; 0x2d
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    33ca:	93 7f       	andi	r25, 0xF3	; 243
    33cc:	9d a7       	std	Y+45, r25	; 0x2d
    33ce:	23 96       	adiw	r28, 0x03	; 3
    33d0:	8f af       	std	Y+63, r24	; 0x3f
    33d2:	23 97       	sbiw	r28, 0x03	; 3
	adcch_set_pin_scan(&adcch_5v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_3v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_vbat_conf,	0, 3);

	/* Execute the new settings */
	adc_write_configuration(&ADC_5V0,						&adc_5v0_conf);
    33d4:	8e af       	std	Y+62, r24	; 0x3e
    33d6:	8a af       	std	Y+58, r24	; 0x3a
    33d8:	be 01       	movw	r22, r28
    33da:	6c 5d       	subi	r22, 0xDC	; 220
    33dc:	7f 4f       	sbci	r23, 0xFF	; 255
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    33e2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <adc_write_configuration>
    33e6:	ae 01       	movw	r20, r28
    33e8:	41 5c       	subi	r20, 0xC1	; 193
    33ea:	5f 4f       	sbci	r21, 0xFF	; 255
    33ec:	61 e0       	ldi	r22, 0x01	; 1
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_3V0,						&adc_3v0_conf);
    33f2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <adcch_write_configuration>
    33f6:	be 01       	movw	r22, r28
    33f8:	63 5e       	subi	r22, 0xE3	; 227
    33fa:	7f 4f       	sbci	r23, 0xFF	; 255
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    3400:	0e 94 50 05 	call	0xaa0	; 0xaa0 <adc_write_configuration>
    3404:	ae 01       	movw	r20, r28
    3406:	45 5c       	subi	r20, 0xC5	; 197
    3408:	5f 4f       	sbci	r21, 0xFF	; 255
    340a:	61 e0       	ldi	r22, 0x01	; 1
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VBAT,						&adc_vbat_conf);
    3410:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <adcch_write_configuration>
    3414:	be 01       	movw	r22, r28
    3416:	6a 5e       	subi	r22, 0xEA	; 234
    3418:	7f 4f       	sbci	r23, 0xFF	; 255
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    341e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <adc_write_configuration>
    3422:	ae 01       	movw	r20, r28
    3424:	49 5c       	subi	r20, 0xC9	; 201
    3426:	5f 4f       	sbci	r21, 0xFF	; 255
    3428:	61 e0       	ldi	r22, 0x01	; 1
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VCTCXO,					&adc_vctcxo_conf);
    342e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <adcch_write_configuration>
    3432:	be 01       	movw	r22, r28
    3434:	61 5f       	subi	r22, 0xF1	; 241
    3436:	7f 4f       	sbci	r23, 0xFF	; 255
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    343c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <adc_write_configuration>
    3440:	ae 01       	movw	r20, r28
    3442:	4d 5c       	subi	r20, 0xCD	; 205
    3444:	5f 4f       	sbci	r21, 0xFF	; 255
    3446:	62 e0       	ldi	r22, 0x02	; 2
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC4,					&adc_vctcxo_conf);
    344c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <adcch_write_configuration>
    3450:	be 01       	movw	r22, r28
    3452:	61 5f       	subi	r22, 0xF1	; 241
    3454:	7f 4f       	sbci	r23, 0xFF	; 255
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_vctcxo_conf);
    345a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <adc_write_configuration>
    345e:	ae 01       	movw	r20, r28
    3460:	4d 5c       	subi	r20, 0xCD	; 205
    3462:	5f 4f       	sbci	r21, 0xFF	; 255
    3464:	64 e0       	ldi	r22, 0x04	; 4
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC5,					&adc_vctcxo_conf);
    346a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <adcch_write_configuration>
    346e:	be 01       	movw	r22, r28
    3470:	61 5f       	subi	r22, 0xF1	; 241
    3472:	7f 4f       	sbci	r23, 0xFF	; 255
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_vctcxo_conf);
    3478:	0e 94 50 05 	call	0xaa0	; 0xaa0 <adc_write_configuration>
    347c:	ae 01       	movw	r20, r28
    347e:	4d 5c       	subi	r20, 0xCD	; 205
    3480:	5f 4f       	sbci	r21, 0xFF	; 255
    3482:	68 e0       	ldi	r22, 0x08	; 8
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	92 e0       	ldi	r25, 0x02	; 2
static void dac_init(void)
{
    struct dac_config dac_io_dac0_conf;
    struct dac_config dac_io_dac1_conf;

    dac_read_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    3488:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <adcch_write_configuration>
    348c:	be 01       	movw	r22, r28
    348e:	68 5f       	subi	r22, 0xF8	; 248
    3490:	7f 4f       	sbci	r23, 0xFF	; 255
    3492:	80 e2       	ldi	r24, 0x20	; 32
    3494:	93 e0       	ldi	r25, 0x03	; 3
    dac_read_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    3496:	0e 94 04 07 	call	0xe08	; 0xe08 <dac_read_configuration>
    349a:	be 01       	movw	r22, r28
    349c:	6f 5f       	subi	r22, 0xFF	; 255
    349e:	7f 4f       	sbci	r23, 0xFF	; 255
    34a0:	80 e2       	ldi	r24, 0x20	; 32
    34a2:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    34a4:	0e 94 04 07 	call	0xe08	; 0xe08 <dac_read_configuration>
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    34a8:	1a 87       	std	Y+10, r17	; 0x0a
    34aa:	1b 83       	std	Y+3, r17	; 0x03
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    34ac:	84 e0       	ldi	r24, 0x04	; 4
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    34ae:	88 87       	std	Y+8, r24	; 0x08
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    34b0:	99 85       	ldd	r25, Y+9	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    34b2:	99 82       	std	Y+1, r9	; 0x01
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	9c 79       	andi	r25, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    34b8:	91 60       	ori	r25, 0x01	; 1
    34ba:	99 87       	std	Y+9, r25	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    34bc:	96 e0       	ldi	r25, 0x06	; 6
    34be:	9b 87       	std	Y+11, r25	; 0x0b
    34c0:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    34c2:	82 60       	ori	r24, 0x02	; 2
    #ifdef XMEGA_DAC_VERSION_1
    dac_set_conversion_interval(&dac_io_dac0_conf, 2);
    dac_set_conversion_interval(&dac_io_dac1_conf, 2);
    #endif

    dac_write_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    34c4:	8a 83       	std	Y+2, r24	; 0x02
    34c6:	9c 83       	std	Y+4, r25	; 0x04
    34c8:	be 01       	movw	r22, r28
    34ca:	68 5f       	subi	r22, 0xF8	; 248
    34cc:	7f 4f       	sbci	r23, 0xFF	; 255
    34ce:	80 e2       	ldi	r24, 0x20	; 32
    34d0:	93 e0       	ldi	r25, 0x03	; 3
    dac_write_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    34d2:	0e 94 a8 06 	call	0xd50	; 0xd50 <dac_write_configuration>
    34d6:	be 01       	movw	r22, r28
    34d8:	6f 5f       	subi	r22, 0xFF	; 255
    34da:	7f 4f       	sbci	r23, 0xFF	; 255
    34dc:	80 e2       	ldi	r24, 0x20	; 32
    34de:	93 e0       	ldi	r25, 0x03	; 3
	rtc_set_callback(cb_rtc_alarm);
	evsys_init();
	tc_init();
	adc_init();
	dac_init();
	twi_init();
    34e0:	0e 94 a8 06 	call	0xd50	; 0xd50 <dac_write_configuration>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    34e4:	0e 94 1a 02 	call	0x434	; 0x434 <twi_init>

	/* All interrupt sources prepared here - IRQ activation */
	irq_initialize_vectors();
    34e8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <board_init>
	cpu_irq_enable();
    34ec:	f5 01       	movw	r30, r10
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    34ee:	02 83       	std	Z+2, r16	; 0x02
    34f0:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    34f2:	d6 01       	movw	r26, r12
    34f4:	8c 91       	ld	r24, X
    34f6:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    34f8:	81 60       	ori	r24, 0x01	; 1
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    34fa:	8c 93       	st	X, r24
    34fc:	f7 01       	movw	r30, r14
    34fe:	80 81       	ld	r24, Z
}


static void usb_init(void)
{
	udc_start();
    3500:	80 7f       	andi	r24, 0xF0	; 240
    3502:	81 60       	ori	r24, 0x01	; 1
	tc_start();			// All clocks and PWM timers start here

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB
#if 1
	stdio_usb_init();	// stdio_usb
    3504:	80 83       	st	Z, r24
    3506:	e6 d5       	rcall	.+3020   	; 0x40d4 <udc_start>
	stdio_usb_enable();
    3508:	0e 94 bd 23 	call	0x477a	; 0x477a <stdio_usb_init>
#endif

	twi_start();
    350c:	0e 94 b9 23 	call	0x4772	; 0x4772 <stdio_usb_enable>
	//rtc_start();		// Test for RTC32

	/* The application code */
	runmode = (uint8_t) 1;
    3510:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_start>
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    3514:	10 93 bd 22 	sts	0x22BD, r17	; 0x8022bd <runmode>
    3518:	0f 2e       	mov	r0, r31
    351a:	f0 e2       	ldi	r31, 0x20	; 32
    351c:	af 2e       	mov	r10, r31
    351e:	f3 e0       	ldi	r31, 0x03	; 3
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    3520:	bf 2e       	mov	r11, r31
    3522:	f0 2d       	mov	r31, r0
    3524:	0f 2e       	mov	r0, r31
    3526:	fa e3       	ldi	r31, 0x3A	; 58
    3528:	2f 2e       	mov	r2, r31
    352a:	f3 e0       	ldi	r31, 0x03	; 3

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    352c:	3f 2e       	mov	r3, r31
    352e:	f0 2d       	mov	r31, r0
    3530:	0f 2e       	mov	r0, r31
    3532:	fd e0       	ldi	r31, 0x0D	; 13
    3534:	8f 2e       	mov	r8, r31
    3536:	f4 e2       	ldi	r31, 0x24	; 36
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    3538:	9f 2e       	mov	r9, r31
    353a:	f0 2d       	mov	r31, r0
}

static void task(void)
{
	static uint32_t last = 0;
	uint32_t now = rtc_get_time();
    353c:	08 e4       	ldi	r16, 0x48	; 72
    353e:	10 e0       	ldi	r17, 0x00	; 0
    3540:	0e 94 39 01 	call	0x272	; 0x272 <rtc_get_time>
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    3544:	6b 01       	movw	r12, r22
    3546:	7c 01       	movw	r14, r24
    3548:	d5 01       	movw	r26, r10

static void task_dac(void)
{
	static int idx_dacX = 0;

	if (dac_channel_is_ready(&DAC_IO_DAC0, DAC_CH0 | DAC_CH1)) {
    354a:	15 96       	adiw	r26, 0x05	; 5
    354c:	8c 91       	ld	r24, X
    354e:	83 70       	andi	r24, 0x03	; 3
		dac_set_channel_value(&DAC_IO_DAC0, DAC_IO_DAC0_CHANNEL, dac_io_dac0_buf[idx_dacX]);
    3550:	83 30       	cpi	r24, 0x03	; 3
    3552:	a9 f5       	brne	.+106    	; 0x35be <main+0x428>
    3554:	e0 91 ad 22 	lds	r30, 0x22AD	; 0x8022ad <idx_dacX.6917>
    3558:	f0 91 ae 22 	lds	r31, 0x22AE	; 0x8022ae <idx_dacX.6917+0x1>
    355c:	ee 0f       	add	r30, r30
    355e:	ff 1f       	adc	r31, r31
    3560:	ea 51       	subi	r30, 0x1A	; 26
    3562:	ff 4d       	sbci	r31, 0xDF	; 223

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3564:	20 81       	ld	r18, Z
    3566:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    3568:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    356a:	88 87       	std	Y+8, r24	; 0x08
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    356c:	f8 94       	cli
    356e:	88 85       	ldd	r24, Y+8	; 0x08
    3570:	f5 01       	movw	r30, r10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3572:	20 8f       	std	Z+24, r18	; 0x18
		dac_set_channel_value(&DAC_IO_DAC1, DAC_IO_DAC1_CHANNEL, dac_io_dac1_buf[idx_dacX]);
    3574:	31 8f       	std	Z+25, r19	; 0x19
    3576:	8f bf       	out	0x3f, r24	; 63
    3578:	e0 91 ad 22 	lds	r30, 0x22AD	; 0x8022ad <idx_dacX.6917>
    357c:	f0 91 ae 22 	lds	r31, 0x22AE	; 0x8022ae <idx_dacX.6917+0x1>
    3580:	ee 0f       	add	r30, r30
    3582:	ff 1f       	adc	r31, r31
    3584:	ea 51       	subi	r30, 0x1A	; 26
    3586:	ff 4d       	sbci	r31, 0xDF	; 223

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3588:	20 81       	ld	r18, Z
    358a:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    358c:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    358e:	89 83       	std	Y+1, r24	; 0x01
    3590:	f8 94       	cli
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	d1 01       	movw	r26, r2
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3596:	2d 93       	st	X+, r18
		
		idx_dacX++;
		idx_dacX %= DAC_NR_OF_SAMPLES;
    3598:	3c 93       	st	X, r19
    359a:	8f bf       	out	0x3f, r24	; 63
    359c:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <idx_dacX.6917>
    35a0:	90 91 ae 22 	lds	r25, 0x22AE	; 0x8022ae <idx_dacX.6917+0x1>
    35a4:	01 96       	adiw	r24, 0x01	; 1
    35a6:	8f 71       	andi	r24, 0x1F	; 31
    35a8:	90 78       	andi	r25, 0x80	; 128
    35aa:	99 23       	and	r25, r25
    35ac:	24 f4       	brge	.+8      	; 0x35b6 <main+0x420>
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	80 6e       	ori	r24, 0xE0	; 224
    35b2:	9f 6f       	ori	r25, 0xFF	; 255
    35b4:	01 96       	adiw	r24, 0x01	; 1
    35b6:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <idx_dacX.6917>

	/* Handling the USB connection */
	task_usb();

	/* Handle TWI1 and TWI2 communications */
	task_twi(now, last);
    35ba:	90 93 ae 22 	sts	0x22AE, r25	; 0x8022ae <idx_dacX.6917+0x1>
    35be:	40 90 af 22 	lds	r4, 0x22AF	; 0x8022af <last.6928>
    35c2:	50 90 b0 22 	lds	r5, 0x22B0	; 0x8022b0 <last.6928+0x1>
    35c6:	60 90 b1 22 	lds	r6, 0x22B1	; 0x8022b1 <last.6928+0x2>
}

static void task_twi(uint32_t now, uint32_t last)
{
	/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
	task_twi_onboard(now, last);
    35ca:	70 90 b2 22 	lds	r7, 0x22B2	; 0x8022b2 <last.6928+0x3>
    35ce:	a3 01       	movw	r20, r6
    35d0:	92 01       	movw	r18, r4
    35d2:	c7 01       	movw	r24, r14
    35d4:	b6 01       	movw	r22, r12

	/* TWI2 - LCD Port */
	task_twi_lcd(now, last);
    35d6:	0e 94 9b 02 	call	0x536	; 0x536 <task_twi_onboard>
    35da:	a3 01       	movw	r20, r6
    35dc:	92 01       	movw	r18, r4
    35de:	c7 01       	movw	r24, r14
    35e0:	b6 01       	movw	r22, r12
	if ((last >> 10) != now_sec) {
		printf("%c\r\nFindMeSAT V1 @USB: RTC32 = %06ld sec\r\n", 0x0c, now_sec);
	}
#endif

	last = now;
    35e2:	0e 94 9c 02 	call	0x538	; 0x538 <task_twi_lcd>
    35e6:	c0 92 af 22 	sts	0x22AF, r12	; 0x8022af <last.6928>
    35ea:	d0 92 b0 22 	sts	0x22B0, r13	; 0x8022b0 <last.6928+0x1>
    35ee:	e0 92 b1 22 	sts	0x22B1, r14	; 0x8022b1 <last.6928+0x2>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    35f2:	f0 92 b2 22 	sts	0x22B2, r15	; 0x8022b2 <last.6928+0x3>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    35f6:	f8 94       	cli
    35f8:	f4 01       	movw	r30, r8
    35fa:	80 81       	ld	r24, Z
    35fc:	81 11       	cpse	r24, r1
    35fe:	09 c0       	rjmp	.+18     	; 0x3612 <main+0x47c>
    3600:	ae e0       	ldi	r26, 0x0E	; 14
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3602:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3604:	e0 e0       	ldi	r30, 0x00	; 0
    3606:	ef 5f       	subi	r30, 0xFF	; 255
    3608:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    360a:	88 23       	and	r24, r24
    360c:	e1 f3       	breq	.-8      	; 0x3606 <main+0x470>
		cpu_irq_enable();
    360e:	e1 11       	cpse	r30, r1
    3610:	02 c0       	rjmp	.+4      	; 0x3616 <main+0x480>
    3612:	78 94       	sei
    3614:	12 c0       	rjmp	.+36     	; 0x363a <main+0x4a4>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    3616:	d8 01       	movw	r26, r16
    3618:	8c 91       	ld	r24, X
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	ee 5d       	subi	r30, 0xDE	; 222
    361e:	ff 4d       	sbci	r31, 0xDF	; 223
    3620:	81 7f       	andi	r24, 0xF1	; 241
    3622:	90 81       	ld	r25, Z
	sleep_enable();
    3624:	89 2b       	or	r24, r25
    3626:	8c 93       	st	X, r24
    3628:	8c 91       	ld	r24, X

	cpu_irq_enable();
    362a:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    362c:	8c 93       	st	X, r24

	sleep_disable();
    362e:	78 94       	sei
    3630:	88 95       	sleep
    3632:	f8 01       	movw	r30, r16
    3634:	80 81       	ld	r24, Z
	twi_start();
	//rtc_start();		// Test for RTC32

	/* The application code */
	runmode = (uint8_t) 1;
    while (runmode) {
    3636:	8e 7f       	andi	r24, 0xFE	; 254
    3638:	80 83       	st	Z, r24
    363a:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <runmode>
		task();
		sleepmgr_enter_sleep();
    }

	cpu_irq_disable();
    363e:	81 11       	cpse	r24, r1
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    3640:	7f cf       	rjmp	.-258    	; 0x3540 <main+0x3aa>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3642:	f8 94       	cli
    3644:	f8 94       	cli
    3646:	80 91 0d 24 	lds	r24, 0x240D	; 0x80240d <sleepmgr_locks>
    364a:	81 11       	cpse	r24, r1
    364c:	09 c0       	rjmp	.+18     	; 0x3660 <main+0x4ca>
    364e:	ae e0       	ldi	r26, 0x0E	; 14
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3650:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3652:	e0 e0       	ldi	r30, 0x00	; 0
    3654:	ef 5f       	subi	r30, 0xFF	; 255
    3656:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3658:	88 23       	and	r24, r24
    365a:	e1 f3       	breq	.-8      	; 0x3654 <main+0x4be>
		cpu_irq_enable();
    365c:	e1 11       	cpse	r30, r1
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <main+0x4ce>
    3660:	78 94       	sei
    3662:	13 c0       	rjmp	.+38     	; 0x368a <main+0x4f4>
    3664:	a8 e4       	ldi	r26, 0x48	; 72

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	8c 91       	ld	r24, X
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	ee 5d       	subi	r30, 0xDE	; 222
    366e:	ff 4d       	sbci	r31, 0xDF	; 223
    3670:	98 2f       	mov	r25, r24
    3672:	91 7f       	andi	r25, 0xF1	; 241
    3674:	80 81       	ld	r24, Z
	sleep_enable();
    3676:	89 2b       	or	r24, r25
    3678:	8c 93       	st	X, r24
    367a:	8c 91       	ld	r24, X

	cpu_irq_enable();
    367c:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    367e:	8c 93       	st	X, r24

	sleep_disable();
    3680:	78 94       	sei
    3682:	88 95       	sleep
    3684:	8c 91       	ld	r24, X
	sleepmgr_enter_sleep();

	return retcode;
}
    3686:	8e 7f       	andi	r24, 0xFE	; 254
    3688:	8c 93       	st	X, r24
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	ce 5b       	subi	r28, 0xBE	; 190
    3690:	df 4f       	sbci	r29, 0xFF	; 255
    3692:	cd bf       	out	0x3d, r28	; 61
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	df 91       	pop	r29
    3698:	cf 91       	pop	r28
    369a:	1f 91       	pop	r17
    369c:	0f 91       	pop	r16
    369e:	ff 90       	pop	r15
    36a0:	ef 90       	pop	r14
    36a2:	df 90       	pop	r13
    36a4:	cf 90       	pop	r12
    36a6:	bf 90       	pop	r11
    36a8:	af 90       	pop	r10
    36aa:	9f 90       	pop	r9
    36ac:	8f 90       	pop	r8
    36ae:	7f 90       	pop	r7
    36b0:	6f 90       	pop	r6
    36b2:	5f 90       	pop	r5
    36b4:	4f 90       	pop	r4
    36b6:	3f 90       	pop	r3
    36b8:	2f 90       	pop	r2
    36ba:	08 95       	ret

000036bc <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
    36c4:	28 97       	sbiw	r28, 0x08	; 8
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    36ca:	8f ef       	ldi	r24, 0xFF	; 255
    36cc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    36d0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    36d4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    36d8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    36dc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    36e0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    36e4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    36e8:	61 e0       	ldi	r22, 0x01	; 1
    36ea:	81 e4       	ldi	r24, 0x41	; 65
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <ccp_write_io>
    36f2:	6c e1       	ldi	r22, 0x1C	; 28
    36f4:	70 e0       	ldi	r23, 0x00	; 0
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    36fc:	8a 83       	std	Y+2, r24	; 0x02
    36fe:	6d e1       	ldi	r22, 0x1D	; 29
    3700:	70 e0       	ldi	r23, 0x00	; 0
    3702:	82 e0       	ldi	r24, 0x02	; 2
    3704:	0e 94 e6 23 	call	0x47cc	; 0x47cc <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    3708:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    370a:	89 81       	ldd	r24, Y+1	; 0x01
    370c:	9a 81       	ldd	r25, Y+2	; 0x02
    370e:	01 96       	adiw	r24, 0x01	; 1
    3710:	21 f4       	brne	.+8      	; 0x371a <sysclk_init+0x5e>
		cal = 0x2340;
    3712:	80 e4       	ldi	r24, 0x40	; 64
    3714:	93 e2       	ldi	r25, 0x23	; 35
    3716:	89 83       	std	Y+1, r24	; 0x01
    3718:	9a 83       	std	Y+2, r25	; 0x02
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	9a 81       	ldd	r25, Y+2	; 0x02
    371e:	8b 83       	std	Y+3, r24	; 0x03
    3720:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    3722:	e0 e6       	ldi	r30, 0x60	; 96
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    3728:	8c 81       	ldd	r24, Y+4	; 0x04
    372a:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    372c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    3730:	84 fd       	sbrc	r24, 4
    3732:	21 c0       	rjmp	.+66     	; 0x3776 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3734:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    3738:	83 fd       	sbrc	r24, 3
    373a:	0e c0       	rjmp	.+28     	; 0x3758 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    373c:	e0 e5       	ldi	r30, 0x50	; 80
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3742:	8f b7       	in	r24, 0x3f	; 63
    3744:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    3746:	f8 94       	cli
	return flags;
    3748:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    374a:	80 81       	ld	r24, Z
    374c:	88 60       	ori	r24, 0x08	; 8
    374e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3750:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3752:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    3754:	83 ff       	sbrs	r24, 3
    3756:	fd cf       	rjmp	.-6      	; 0x3752 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3758:	8f b7       	in	r24, 0x3f	; 63
    375a:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    375c:	f8 94       	cli
	return flags;
    375e:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    3760:	e0 e5       	ldi	r30, 0x50	; 80
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	83 ec       	ldi	r24, 0xC3	; 195
    3766:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    3768:	80 81       	ld	r24, Z
    376a:	80 61       	ori	r24, 0x10	; 16
    376c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    376e:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    3770:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    3772:	84 ff       	sbrs	r24, 4
    3774:	fd cf       	rjmp	.-6      	; 0x3770 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    3776:	64 e0       	ldi	r22, 0x04	; 4
    3778:	80 e4       	ldi	r24, 0x40	; 64
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3780:	8f b7       	in	r24, 0x3f	; 63
    3782:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    3784:	f8 94       	cli
	return flags;
    3786:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    3788:	e0 e5       	ldi	r30, 0x50	; 80
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	8e 7f       	andi	r24, 0xFE	; 254
    3790:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3792:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    3794:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3796:	8f b7       	in	r24, 0x3f	; 63
    3798:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    379a:	f8 94       	cli
	return flags;
    379c:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    379e:	80 81       	ld	r24, Z
    37a0:	88 60       	ori	r24, 0x08	; 8
    37a2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    37a4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    37a6:	81 81       	ldd	r24, Z+1	; 0x01
    37a8:	83 ff       	sbrs	r24, 3
    37aa:	fd cf       	rjmp	.-6      	; 0x37a6 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    37ac:	8b e0       	ldi	r24, 0x0B	; 11
    37ae:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    37b2:	28 96       	adiw	r28, 0x08	; 8
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	df 91       	pop	r29
    37ba:	cf 91       	pop	r28
    37bc:	08 95       	ret

000037be <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	1f 92       	push	r1
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    37c8:	9f b7       	in	r25, 0x3f	; 63
    37ca:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    37cc:	f8 94       	cli
	return flags;
    37ce:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    37d0:	e8 2f       	mov	r30, r24
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	e0 59       	subi	r30, 0x90	; 144
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	60 95       	com	r22
    37da:	80 81       	ld	r24, Z
    37dc:	68 23       	and	r22, r24
    37de:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    37e0:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    37e2:	0f 90       	pop	r0
    37e4:	df 91       	pop	r29
    37e6:	cf 91       	pop	r28
    37e8:	08 95       	ret

000037ea <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	1f 92       	push	r1
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    37f4:	9f b7       	in	r25, 0x3f	; 63
    37f6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    37f8:	f8 94       	cli
	return flags;
    37fa:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    37fc:	e8 2f       	mov	r30, r24
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	e0 59       	subi	r30, 0x90	; 144
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	80 81       	ld	r24, Z
    3806:	68 2b       	or	r22, r24
    3808:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    380a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    380c:	0f 90       	pop	r0
    380e:	df 91       	pop	r29
    3810:	cf 91       	pop	r28
    3812:	08 95       	ret

00003814 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    3814:	cf 93       	push	r28
    3816:	df 93       	push	r29
    3818:	1f 92       	push	r1
    381a:	1f 92       	push	r1
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    3820:	86 30       	cpi	r24, 0x06	; 6
    3822:	11 f0       	breq	.+4      	; 0x3828 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    3824:	60 e0       	ldi	r22, 0x00	; 0
    3826:	01 c0       	rjmp	.+2      	; 0x382a <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    3828:	68 e1       	ldi	r22, 0x18	; 24
    382a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    382e:	81 fd       	sbrc	r24, 1
    3830:	2a c0       	rjmp	.+84     	; 0x3886 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3832:	8f b7       	in	r24, 0x3f	; 63
    3834:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3836:	f8 94       	cli
	return flags;
    3838:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    383a:	e0 e5       	ldi	r30, 0x50	; 80
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	82 60       	ori	r24, 0x02	; 2
    3842:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3844:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3846:	81 81       	ldd	r24, Z+1	; 0x01
    3848:	81 ff       	sbrs	r24, 1
    384a:	fd cf       	rjmp	.-6      	; 0x3846 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    384c:	8f b7       	in	r24, 0x3f	; 63
    384e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3850:	f8 94       	cli
	return flags;
    3852:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    3854:	a0 e5       	ldi	r26, 0x50	; 80
    3856:	b0 e0       	ldi	r27, 0x00	; 0
    3858:	16 96       	adiw	r26, 0x06	; 6
    385a:	8c 91       	ld	r24, X
    385c:	16 97       	sbiw	r26, 0x06	; 6
    385e:	89 7f       	andi	r24, 0xF9	; 249
    3860:	16 96       	adiw	r26, 0x06	; 6
    3862:	8c 93       	st	X, r24
    3864:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    3866:	e0 e6       	ldi	r30, 0x60	; 96
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	80 e8       	ldi	r24, 0x80	; 128
    386c:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    386e:	8b eb       	ldi	r24, 0xBB	; 187
    3870:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    3872:	16 96       	adiw	r26, 0x06	; 6
    3874:	8c 91       	ld	r24, X
    3876:	16 97       	sbiw	r26, 0x06	; 6
    3878:	84 60       	ori	r24, 0x04	; 4
    387a:	16 96       	adiw	r26, 0x06	; 6
    387c:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    387e:	80 81       	ld	r24, Z
    3880:	81 60       	ori	r24, 0x01	; 1
    3882:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3884:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    3886:	63 60       	ori	r22, 0x03	; 3
    3888:	84 e4       	ldi	r24, 0x44	; 68
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	a9 d7       	rcall	.+3922   	; 0x47e0 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    388e:	60 e4       	ldi	r22, 0x40	; 64
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	95 df       	rcall	.-214    	; 0x37be <sysclk_enable_module>
}
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	08 95       	ret

0000389e <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    389e:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <udi_cdc_nb_comm_enabled>
    38a2:	81 50       	subi	r24, 0x01	; 1
    38a4:	80 93 d4 23 	sts	0x23D4, r24	; 0x8023d4 <udi_cdc_nb_comm_enabled>
    38a8:	08 95       	ret

000038aa <udi_cdc_data_setup>:
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	08 95       	ret

000038ae <udi_cdc_getsetting>:
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	08 95       	ret

000038b2 <udi_cdc_line_coding_received>:
    38b2:	62 ee       	ldi	r22, 0xE2	; 226
    38b4:	73 e2       	ldi	r23, 0x23	; 35
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	69 cc       	rjmp	.-1838   	; 0x318c <usb_callback_config>
    38ba:	08 95       	ret

000038bc <udi_cdc_comm_enable>:
    38bc:	10 92 d4 23 	sts	0x23D4, r1	; 0x8023d4 <udi_cdc_nb_comm_enabled>
    38c0:	10 92 e0 23 	sts	0x23E0, r1	; 0x8023e0 <udi_cdc_state>
    38c4:	10 92 e1 23 	sts	0x23E1, r1	; 0x8023e1 <udi_cdc_state+0x1>
    38c8:	e6 ed       	ldi	r30, 0xD6	; 214
    38ca:	f3 e2       	ldi	r31, 0x23	; 35
    38cc:	81 ea       	ldi	r24, 0xA1	; 161
    38ce:	80 83       	st	Z, r24
    38d0:	80 e2       	ldi	r24, 0x20	; 32
    38d2:	81 83       	std	Z+1, r24	; 0x01
    38d4:	12 82       	std	Z+2, r1	; 0x02
    38d6:	13 82       	std	Z+3, r1	; 0x03
    38d8:	14 82       	std	Z+4, r1	; 0x04
    38da:	15 82       	std	Z+5, r1	; 0x05
    38dc:	82 e0       	ldi	r24, 0x02	; 2
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	86 83       	std	Z+6, r24	; 0x06
    38e2:	97 83       	std	Z+7, r25	; 0x07
    38e4:	10 86       	std	Z+8, r1	; 0x08
    38e6:	11 86       	std	Z+9, r1	; 0x09
    38e8:	e2 ee       	ldi	r30, 0xE2	; 226
    38ea:	f3 e2       	ldi	r31, 0x23	; 35
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	92 ec       	ldi	r25, 0xC2	; 194
    38f0:	a1 e0       	ldi	r26, 0x01	; 1
    38f2:	b0 e0       	ldi	r27, 0x00	; 0
    38f4:	80 83       	st	Z, r24
    38f6:	91 83       	std	Z+1, r25	; 0x01
    38f8:	a2 83       	std	Z+2, r26	; 0x02
    38fa:	b3 83       	std	Z+3, r27	; 0x03
    38fc:	14 82       	std	Z+4, r1	; 0x04
    38fe:	15 82       	std	Z+5, r1	; 0x05
    3900:	88 e0       	ldi	r24, 0x08	; 8
    3902:	86 83       	std	Z+6, r24	; 0x06
    3904:	bf 01       	movw	r22, r30
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	41 dc       	rcall	.-1918   	; 0x318c <usb_callback_config>
    390a:	39 dc       	rcall	.-1934   	; 0x317e <usb_callback_cdc_enable>
    390c:	88 23       	and	r24, r24
    390e:	29 f0       	breq	.+10     	; 0x391a <udi_cdc_comm_enable+0x5e>
    3910:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udi_cdc_nb_comm_enabled>
    3914:	9f 5f       	subi	r25, 0xFF	; 255
    3916:	90 93 d4 23 	sts	0x23D4, r25	; 0x8023d4 <udi_cdc_nb_comm_enabled>
    391a:	08 95       	ret

0000391c <udi_cdc_tx_send>:
    391c:	ff 92       	push	r15
    391e:	0f 93       	push	r16
    3920:	1f 93       	push	r17
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	1f 92       	push	r1
    3928:	cd b7       	in	r28, 0x3d	; 61
    392a:	de b7       	in	r29, 0x3e	; 62
    392c:	80 91 c1 22 	lds	r24, 0x22C1	; 0x8022c1 <udi_cdc_tx_trans_ongoing>
    3930:	81 11       	cpse	r24, r1
    3932:	9f c0       	rjmp	.+318    	; 0x3a72 <udi_cdc_tx_send+0x156>
    3934:	0e 94 3d 13 	call	0x267a	; 0x267a <udd_is_high_speed>
    3938:	88 23       	and	r24, r24
    393a:	51 f0       	breq	.+20     	; 0x3950 <udi_cdc_tx_send+0x34>
    393c:	00 91 c2 22 	lds	r16, 0x22C2	; 0x8022c2 <udi_cdc_tx_sof_num>
    3940:	10 91 c3 22 	lds	r17, 0x22C3	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    3944:	0e 94 4a 13 	call	0x2694	; 0x2694 <udd_get_micro_frame_number>
    3948:	08 17       	cp	r16, r24
    394a:	19 07       	cpc	r17, r25
    394c:	59 f4       	brne	.+22     	; 0x3964 <udi_cdc_tx_send+0x48>
    394e:	91 c0       	rjmp	.+290    	; 0x3a72 <udi_cdc_tx_send+0x156>
    3950:	00 91 c2 22 	lds	r16, 0x22C2	; 0x8022c2 <udi_cdc_tx_sof_num>
    3954:	10 91 c3 22 	lds	r17, 0x22C3	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    3958:	0e 94 45 13 	call	0x268a	; 0x268a <udd_get_frame_number>
    395c:	08 17       	cp	r16, r24
    395e:	19 07       	cpc	r17, r25
    3960:	09 f4       	brne	.+2      	; 0x3964 <udi_cdc_tx_send+0x48>
    3962:	87 c0       	rjmp	.+270    	; 0x3a72 <udi_cdc_tx_send+0x156>
    3964:	8f b7       	in	r24, 0x3f	; 63
    3966:	89 83       	std	Y+1, r24	; 0x01
    3968:	f8 94       	cli
    396a:	19 81       	ldd	r17, Y+1	; 0x01
    396c:	00 91 c4 22 	lds	r16, 0x22C4	; 0x8022c4 <udi_cdc_tx_buf_sel>
    3970:	e0 2f       	mov	r30, r16
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	ee 0f       	add	r30, r30
    3976:	ff 1f       	adc	r31, r31
    3978:	eb 53       	subi	r30, 0x3B	; 59
    397a:	fd 4d       	sbci	r31, 0xDD	; 221
    397c:	80 81       	ld	r24, Z
    397e:	91 81       	ldd	r25, Z+1	; 0x01
    3980:	89 2b       	or	r24, r25
    3982:	09 f5       	brne	.+66     	; 0x39c6 <udi_cdc_tx_send+0xaa>
    3984:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <sof_zlp_counter.5059>
    3988:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <sof_zlp_counter.5059+0x1>
    398c:	01 96       	adiw	r24, 0x01	; 1
    398e:	80 93 be 22 	sts	0x22BE, r24	; 0x8022be <sof_zlp_counter.5059>
    3992:	90 93 bf 22 	sts	0x22BF, r25	; 0x8022bf <sof_zlp_counter.5059+0x1>
    3996:	0e 94 3d 13 	call	0x267a	; 0x267a <udd_is_high_speed>
    399a:	81 11       	cpse	r24, r1
    399c:	07 c0       	rjmp	.+14     	; 0x39ac <udi_cdc_tx_send+0x90>
    399e:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <sof_zlp_counter.5059>
    39a2:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <sof_zlp_counter.5059+0x1>
    39a6:	84 36       	cpi	r24, 0x64	; 100
    39a8:	91 05       	cpc	r25, r1
    39aa:	58 f0       	brcs	.+22     	; 0x39c2 <udi_cdc_tx_send+0xa6>
    39ac:	0e 94 3d 13 	call	0x267a	; 0x267a <udd_is_high_speed>
    39b0:	88 23       	and	r24, r24
    39b2:	49 f0       	breq	.+18     	; 0x39c6 <udi_cdc_tx_send+0xaa>
    39b4:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <sof_zlp_counter.5059>
    39b8:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <sof_zlp_counter.5059+0x1>
    39bc:	80 32       	cpi	r24, 0x20	; 32
    39be:	93 40       	sbci	r25, 0x03	; 3
    39c0:	10 f4       	brcc	.+4      	; 0x39c6 <udi_cdc_tx_send+0xaa>
    39c2:	1f bf       	out	0x3f, r17	; 63
    39c4:	56 c0       	rjmp	.+172    	; 0x3a72 <udi_cdc_tx_send+0x156>
    39c6:	10 92 be 22 	sts	0x22BE, r1	; 0x8022be <sof_zlp_counter.5059>
    39ca:	10 92 bf 22 	sts	0x22BF, r1	; 0x8022bf <sof_zlp_counter.5059+0x1>
    39ce:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <udi_cdc_tx_both_buf_to_send>
    39d2:	81 11       	cpse	r24, r1
    39d4:	06 c0       	rjmp	.+12     	; 0x39e2 <udi_cdc_tx_send+0xc6>
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	01 11       	cpse	r16, r1
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <udi_cdc_tx_buf_sel>
    39e0:	04 c0       	rjmp	.+8      	; 0x39ea <udi_cdc_tx_send+0xce>
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	01 11       	cpse	r16, r1
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	08 2f       	mov	r16, r24
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	80 93 c1 22 	sts	0x22C1, r24	; 0x8022c1 <udi_cdc_tx_trans_ongoing>
    39f0:	1f bf       	out	0x3f, r17	; 63
    39f2:	10 e0       	ldi	r17, 0x00	; 0
    39f4:	f8 01       	movw	r30, r16
    39f6:	ee 0f       	add	r30, r30
    39f8:	ff 1f       	adc	r31, r31
    39fa:	eb 53       	subi	r30, 0x3B	; 59
    39fc:	fd 4d       	sbci	r31, 0xDD	; 221
    39fe:	80 81       	ld	r24, Z
    3a00:	91 81       	ldd	r25, Z+1	; 0x01
    3a02:	ff 24       	eor	r15, r15
    3a04:	f3 94       	inc	r15
    3a06:	80 34       	cpi	r24, 0x40	; 64
    3a08:	91 05       	cpc	r25, r1
    3a0a:	09 f4       	brne	.+2      	; 0x3a0e <udi_cdc_tx_send+0xf2>
    3a0c:	f1 2c       	mov	r15, r1
    3a0e:	80 34       	cpi	r24, 0x40	; 64
    3a10:	91 05       	cpc	r25, r1
    3a12:	91 f0       	breq	.+36     	; 0x3a38 <udi_cdc_tx_send+0x11c>
    3a14:	0e 94 3d 13 	call	0x267a	; 0x267a <udd_is_high_speed>
    3a18:	88 23       	and	r24, r24
    3a1a:	39 f0       	breq	.+14     	; 0x3a2a <udi_cdc_tx_send+0x10e>
    3a1c:	0e 94 4a 13 	call	0x2694	; 0x2694 <udd_get_micro_frame_number>
    3a20:	80 93 c2 22 	sts	0x22C2, r24	; 0x8022c2 <udi_cdc_tx_sof_num>
    3a24:	90 93 c3 22 	sts	0x22C3, r25	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    3a28:	0b c0       	rjmp	.+22     	; 0x3a40 <udi_cdc_tx_send+0x124>
    3a2a:	0e 94 45 13 	call	0x268a	; 0x268a <udd_get_frame_number>
    3a2e:	80 93 c2 22 	sts	0x22C2, r24	; 0x8022c2 <udi_cdc_tx_sof_num>
    3a32:	90 93 c3 22 	sts	0x22C3, r25	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    3a36:	04 c0       	rjmp	.+8      	; 0x3a40 <udi_cdc_tx_send+0x124>
    3a38:	10 92 c2 22 	sts	0x22C2, r1	; 0x8022c2 <udi_cdc_tx_sof_num>
    3a3c:	10 92 c3 22 	sts	0x22C3, r1	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    3a40:	f8 01       	movw	r30, r16
    3a42:	ee 0f       	add	r30, r30
    3a44:	ff 1f       	adc	r31, r31
    3a46:	eb 53       	subi	r30, 0x3B	; 59
    3a48:	fd 4d       	sbci	r31, 0xDD	; 221
    3a4a:	20 81       	ld	r18, Z
    3a4c:	31 81       	ldd	r19, Z+1	; 0x01
    3a4e:	a8 01       	movw	r20, r16
    3a50:	00 24       	eor	r0, r0
    3a52:	56 95       	lsr	r21
    3a54:	47 95       	ror	r20
    3a56:	07 94       	ror	r0
    3a58:	56 95       	lsr	r21
    3a5a:	47 95       	ror	r20
    3a5c:	07 94       	ror	r0
    3a5e:	54 2f       	mov	r21, r20
    3a60:	40 2d       	mov	r20, r0
    3a62:	46 53       	subi	r20, 0x36	; 54
    3a64:	5d 4d       	sbci	r21, 0xDD	; 221
    3a66:	03 e4       	ldi	r16, 0x43	; 67
    3a68:	1d e1       	ldi	r17, 0x1D	; 29
    3a6a:	6f 2d       	mov	r22, r15
    3a6c:	81 e8       	ldi	r24, 0x81	; 129
    3a6e:	0e 94 2e 14 	call	0x285c	; 0x285c <udd_ep_run>
    3a72:	0f 90       	pop	r0
    3a74:	df 91       	pop	r29
    3a76:	cf 91       	pop	r28
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	ff 90       	pop	r15
    3a7e:	08 95       	ret

00003a80 <udi_cdc_data_sof_notify>:
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	4c cf       	rjmp	.-360    	; 0x391c <udi_cdc_tx_send>
    3a84:	08 95       	ret

00003a86 <udi_cdc_data_sent>:
    3a86:	81 11       	cpse	r24, r1
    3a88:	19 c0       	rjmp	.+50     	; 0x3abc <udi_cdc_data_sent+0x36>
    3a8a:	20 91 c4 22 	lds	r18, 0x22C4	; 0x8022c4 <udi_cdc_tx_buf_sel>
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	22 23       	and	r18, r18
    3a94:	11 f0       	breq	.+4      	; 0x3a9a <udi_cdc_data_sent+0x14>
    3a96:	80 e0       	ldi	r24, 0x00	; 0
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	eb 53       	subi	r30, 0x3B	; 59
    3aa2:	fd 4d       	sbci	r31, 0xDD	; 221
    3aa4:	10 82       	st	Z, r1
    3aa6:	11 82       	std	Z+1, r1	; 0x01
    3aa8:	10 92 c0 22 	sts	0x22C0, r1	; 0x8022c0 <udi_cdc_tx_both_buf_to_send>
    3aac:	10 92 c1 22 	sts	0x22C1, r1	; 0x8022c1 <udi_cdc_tx_trans_ongoing>
    3ab0:	67 2b       	or	r22, r23
    3ab2:	11 f0       	breq	.+4      	; 0x3ab8 <udi_cdc_data_sent+0x32>
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	6e db       	rcall	.-2340   	; 0x3194 <usb_callback_tx_empty_notify>
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	30 cf       	rjmp	.-416    	; 0x391c <udi_cdc_tx_send>
    3abc:	08 95       	ret

00003abe <udi_cdc_data_disable>:
    3abe:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3ac2:	81 50       	subi	r24, 0x01	; 1
    3ac4:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3ac8:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3acc:	5c db       	rcall	.-2376   	; 0x3186 <usb_callback_cdc_disable>
    3ace:	10 92 d2 23 	sts	0x23D2, r1	; 0x8023d2 <udi_cdc_data_running>
    3ad2:	08 95       	ret

00003ad4 <udi_cdc_comm_setup>:
    3ad4:	cf 93       	push	r28
    3ad6:	df 93       	push	r29
    3ad8:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <udd_g_ctrlreq>
    3adc:	88 23       	and	r24, r24
    3ade:	e4 f4       	brge	.+56     	; 0x3b18 <udi_cdc_comm_setup+0x44>
    3ae0:	80 76       	andi	r24, 0x60	; 96
    3ae2:	80 32       	cpi	r24, 0x20	; 32
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <udi_cdc_comm_setup+0x14>
    3ae6:	47 c0       	rjmp	.+142    	; 0x3b76 <udi_cdc_comm_setup+0xa2>
    3ae8:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    3aec:	81 32       	cpi	r24, 0x21	; 33
    3aee:	09 f0       	breq	.+2      	; 0x3af2 <udi_cdc_comm_setup+0x1e>
    3af0:	44 c0       	rjmp	.+136    	; 0x3b7a <udi_cdc_comm_setup+0xa6>
    3af2:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    3af6:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    3afa:	07 97       	sbiw	r24, 0x07	; 7
    3afc:	09 f0       	breq	.+2      	; 0x3b00 <udi_cdc_comm_setup+0x2c>
    3afe:	3f c0       	rjmp	.+126    	; 0x3b7e <udi_cdc_comm_setup+0xaa>
    3b00:	ed ef       	ldi	r30, 0xFD	; 253
    3b02:	f3 e2       	ldi	r31, 0x23	; 35
    3b04:	82 ee       	ldi	r24, 0xE2	; 226
    3b06:	93 e2       	ldi	r25, 0x23	; 35
    3b08:	80 87       	std	Z+8, r24	; 0x08
    3b0a:	91 87       	std	Z+9, r25	; 0x09
    3b0c:	87 e0       	ldi	r24, 0x07	; 7
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	82 87       	std	Z+10, r24	; 0x0a
    3b12:	93 87       	std	Z+11, r25	; 0x0b
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	3a c0       	rjmp	.+116    	; 0x3b8c <udi_cdc_comm_setup+0xb8>
    3b18:	80 76       	andi	r24, 0x60	; 96
    3b1a:	80 32       	cpi	r24, 0x20	; 32
    3b1c:	91 f5       	brne	.+100    	; 0x3b82 <udi_cdc_comm_setup+0xae>
    3b1e:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    3b22:	80 32       	cpi	r24, 0x20	; 32
    3b24:	19 f0       	breq	.+6      	; 0x3b2c <udi_cdc_comm_setup+0x58>
    3b26:	82 32       	cpi	r24, 0x22	; 34
    3b28:	b9 f0       	breq	.+46     	; 0x3b58 <udi_cdc_comm_setup+0x84>
    3b2a:	2d c0       	rjmp	.+90     	; 0x3b86 <udi_cdc_comm_setup+0xb2>
    3b2c:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    3b30:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    3b34:	07 97       	sbiw	r24, 0x07	; 7
    3b36:	49 f5       	brne	.+82     	; 0x3b8a <udi_cdc_comm_setup+0xb6>
    3b38:	ed ef       	ldi	r30, 0xFD	; 253
    3b3a:	f3 e2       	ldi	r31, 0x23	; 35
    3b3c:	89 e5       	ldi	r24, 0x59	; 89
    3b3e:	9c e1       	ldi	r25, 0x1C	; 28
    3b40:	84 87       	std	Z+12, r24	; 0x0c
    3b42:	95 87       	std	Z+13, r25	; 0x0d
    3b44:	82 ee       	ldi	r24, 0xE2	; 226
    3b46:	93 e2       	ldi	r25, 0x23	; 35
    3b48:	80 87       	std	Z+8, r24	; 0x08
    3b4a:	91 87       	std	Z+9, r25	; 0x09
    3b4c:	87 e0       	ldi	r24, 0x07	; 7
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	82 87       	std	Z+10, r24	; 0x0a
    3b52:	93 87       	std	Z+11, r25	; 0x0b
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	1a c0       	rjmp	.+52     	; 0x3b8c <udi_cdc_comm_setup+0xb8>
    3b58:	cd ef       	ldi	r28, 0xFD	; 253
    3b5a:	d3 e2       	ldi	r29, 0x23	; 35
    3b5c:	6a 81       	ldd	r22, Y+2	; 0x02
    3b5e:	61 70       	andi	r22, 0x01	; 1
    3b60:	80 e0       	ldi	r24, 0x00	; 0
    3b62:	15 db       	rcall	.-2518   	; 0x318e <usb_callback_cdc_set_dtr>
    3b64:	6a 81       	ldd	r22, Y+2	; 0x02
    3b66:	7b 81       	ldd	r23, Y+3	; 0x03
    3b68:	76 95       	lsr	r23
    3b6a:	67 95       	ror	r22
    3b6c:	61 70       	andi	r22, 0x01	; 1
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
    3b70:	0f db       	rcall	.-2530   	; 0x3190 <usb_callback_cdc_set_rts>
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	0b c0       	rjmp	.+22     	; 0x3b8c <udi_cdc_comm_setup+0xb8>
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	09 c0       	rjmp	.+18     	; 0x3b8c <udi_cdc_comm_setup+0xb8>
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	07 c0       	rjmp	.+14     	; 0x3b8c <udi_cdc_comm_setup+0xb8>
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	05 c0       	rjmp	.+10     	; 0x3b8c <udi_cdc_comm_setup+0xb8>
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	03 c0       	rjmp	.+6      	; 0x3b8c <udi_cdc_comm_setup+0xb8>
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	01 c0       	rjmp	.+2      	; 0x3b8c <udi_cdc_comm_setup+0xb8>
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	df 91       	pop	r29
    3b8e:	cf 91       	pop	r28
    3b90:	08 95       	ret

00003b92 <udi_cdc_multi_get_nb_received_data>:
    3b92:	cf 93       	push	r28
    3b94:	df 93       	push	r29
    3b96:	1f 92       	push	r1
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	8f b7       	in	r24, 0x3f	; 63
    3b9e:	89 83       	std	Y+1, r24	; 0x01
    3ba0:	f8 94       	cli
    3ba2:	49 81       	ldd	r20, Y+1	; 0x01
    3ba4:	20 91 4b 23 	lds	r18, 0x234B	; 0x80234b <udi_cdc_rx_pos>
    3ba8:	30 91 4c 23 	lds	r19, 0x234C	; 0x80234c <udi_cdc_rx_pos+0x1>
    3bac:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <udi_cdc_rx_buf_sel>
    3bb0:	f0 e0       	ldi	r31, 0x00	; 0
    3bb2:	ee 0f       	add	r30, r30
    3bb4:	ff 1f       	adc	r31, r31
    3bb6:	e2 5b       	subi	r30, 0xB2	; 178
    3bb8:	fc 4d       	sbci	r31, 0xDC	; 220
    3bba:	80 81       	ld	r24, Z
    3bbc:	91 81       	ldd	r25, Z+1	; 0x01
    3bbe:	4f bf       	out	0x3f, r20	; 63
    3bc0:	82 1b       	sub	r24, r18
    3bc2:	93 0b       	sbc	r25, r19
    3bc4:	0f 90       	pop	r0
    3bc6:	df 91       	pop	r29
    3bc8:	cf 91       	pop	r28
    3bca:	08 95       	ret

00003bcc <udi_cdc_multi_is_rx_ready>:
    3bcc:	e2 df       	rcall	.-60     	; 0x3b92 <udi_cdc_multi_get_nb_received_data>
    3bce:	21 e0       	ldi	r18, 0x01	; 1
    3bd0:	89 2b       	or	r24, r25
    3bd2:	09 f4       	brne	.+2      	; 0x3bd6 <udi_cdc_multi_is_rx_ready+0xa>
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	82 2f       	mov	r24, r18
    3bd8:	08 95       	ret

00003bda <udi_cdc_rx_start>:
    3bda:	0f 93       	push	r16
    3bdc:	1f 93       	push	r17
    3bde:	cf 93       	push	r28
    3be0:	df 93       	push	r29
    3be2:	1f 92       	push	r1
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	8f b7       	in	r24, 0x3f	; 63
    3bea:	89 83       	std	Y+1, r24	; 0x01
    3bec:	f8 94       	cli
    3bee:	99 81       	ldd	r25, Y+1	; 0x01
    3bf0:	20 91 4d 23 	lds	r18, 0x234D	; 0x80234d <udi_cdc_rx_buf_sel>
    3bf4:	80 91 4a 23 	lds	r24, 0x234A	; 0x80234a <udi_cdc_rx_trans_ongoing>
    3bf8:	81 11       	cpse	r24, r1
    3bfa:	10 c0       	rjmp	.+32     	; 0x3c1c <udi_cdc_rx_start+0x42>
    3bfc:	60 91 4b 23 	lds	r22, 0x234B	; 0x80234b <udi_cdc_rx_pos>
    3c00:	70 91 4c 23 	lds	r23, 0x234C	; 0x80234c <udi_cdc_rx_pos+0x1>
    3c04:	02 2f       	mov	r16, r18
    3c06:	10 e0       	ldi	r17, 0x00	; 0
    3c08:	f8 01       	movw	r30, r16
    3c0a:	ee 0f       	add	r30, r30
    3c0c:	ff 1f       	adc	r31, r31
    3c0e:	e2 5b       	subi	r30, 0xB2	; 178
    3c10:	fc 4d       	sbci	r31, 0xDC	; 220
    3c12:	40 81       	ld	r20, Z
    3c14:	51 81       	ldd	r21, Z+1	; 0x01
    3c16:	64 17       	cp	r22, r20
    3c18:	75 07       	cpc	r23, r21
    3c1a:	18 f4       	brcc	.+6      	; 0x3c22 <udi_cdc_rx_start+0x48>
    3c1c:	9f bf       	out	0x3f, r25	; 63
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	27 c0       	rjmp	.+78     	; 0x3c70 <udi_cdc_rx_start+0x96>
    3c22:	10 92 4b 23 	sts	0x234B, r1	; 0x80234b <udi_cdc_rx_pos>
    3c26:	10 92 4c 23 	sts	0x234C, r1	; 0x80234c <udi_cdc_rx_pos+0x1>
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	21 11       	cpse	r18, r1
    3c2e:	80 e0       	ldi	r24, 0x00	; 0
    3c30:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udi_cdc_rx_buf_sel>
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	80 93 4a 23 	sts	0x234A, r24	; 0x80234a <udi_cdc_rx_trans_ongoing>
    3c3a:	9f bf       	out	0x3f, r25	; 63
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	c6 df       	rcall	.-116    	; 0x3bcc <udi_cdc_multi_is_rx_ready>
    3c40:	88 23       	and	r24, r24
    3c42:	11 f0       	breq	.+4      	; 0x3c48 <udi_cdc_rx_start+0x6e>
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	a5 da       	rcall	.-2742   	; 0x3192 <usb_callback_rx_notify>
    3c48:	a8 01       	movw	r20, r16
    3c4a:	00 24       	eor	r0, r0
    3c4c:	56 95       	lsr	r21
    3c4e:	47 95       	ror	r20
    3c50:	07 94       	ror	r0
    3c52:	56 95       	lsr	r21
    3c54:	47 95       	ror	r20
    3c56:	07 94       	ror	r0
    3c58:	54 2f       	mov	r21, r20
    3c5a:	40 2d       	mov	r20, r0
    3c5c:	4e 5a       	subi	r20, 0xAE	; 174
    3c5e:	5c 4d       	sbci	r21, 0xDC	; 220
    3c60:	00 e7       	ldi	r16, 0x70	; 112
    3c62:	1e e1       	ldi	r17, 0x1E	; 30
    3c64:	20 e4       	ldi	r18, 0x40	; 64
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	61 e0       	ldi	r22, 0x01	; 1
    3c6a:	82 e0       	ldi	r24, 0x02	; 2
    3c6c:	0e 94 2e 14 	call	0x285c	; 0x285c <udd_ep_run>
    3c70:	0f 90       	pop	r0
    3c72:	df 91       	pop	r29
    3c74:	cf 91       	pop	r28
    3c76:	1f 91       	pop	r17
    3c78:	0f 91       	pop	r16
    3c7a:	08 95       	ret

00003c7c <udi_cdc_data_enable>:
    3c7c:	10 92 d3 23 	sts	0x23D3, r1	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3c80:	10 92 c1 22 	sts	0x22C1, r1	; 0x8022c1 <udi_cdc_tx_trans_ongoing>
    3c84:	10 92 c0 22 	sts	0x22C0, r1	; 0x8022c0 <udi_cdc_tx_both_buf_to_send>
    3c88:	10 92 c4 22 	sts	0x22C4, r1	; 0x8022c4 <udi_cdc_tx_buf_sel>
    3c8c:	e5 ec       	ldi	r30, 0xC5	; 197
    3c8e:	f2 e2       	ldi	r31, 0x22	; 34
    3c90:	10 82       	st	Z, r1
    3c92:	11 82       	std	Z+1, r1	; 0x01
    3c94:	12 82       	std	Z+2, r1	; 0x02
    3c96:	13 82       	std	Z+3, r1	; 0x03
    3c98:	10 92 c2 22 	sts	0x22C2, r1	; 0x8022c2 <udi_cdc_tx_sof_num>
    3c9c:	10 92 c3 22 	sts	0x22C3, r1	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    3ca0:	80 e0       	ldi	r24, 0x00	; 0
    3ca2:	3c de       	rcall	.-904    	; 0x391c <udi_cdc_tx_send>
    3ca4:	10 92 4a 23 	sts	0x234A, r1	; 0x80234a <udi_cdc_rx_trans_ongoing>
    3ca8:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <udi_cdc_rx_buf_sel>
    3cac:	ee e4       	ldi	r30, 0x4E	; 78
    3cae:	f3 e2       	ldi	r31, 0x23	; 35
    3cb0:	10 82       	st	Z, r1
    3cb2:	11 82       	std	Z+1, r1	; 0x01
    3cb4:	12 82       	std	Z+2, r1	; 0x02
    3cb6:	13 82       	std	Z+3, r1	; 0x03
    3cb8:	10 92 4b 23 	sts	0x234B, r1	; 0x80234b <udi_cdc_rx_pos>
    3cbc:	10 92 4c 23 	sts	0x234C, r1	; 0x80234c <udi_cdc_rx_pos+0x1>
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	8b df       	rcall	.-234    	; 0x3bda <udi_cdc_rx_start>
    3cc4:	88 23       	and	r24, r24
    3cc6:	59 f0       	breq	.+22     	; 0x3cde <udi_cdc_data_enable+0x62>
    3cc8:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3ccc:	9f 5f       	subi	r25, 0xFF	; 255
    3cce:	90 93 d3 23 	sts	0x23D3, r25	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3cd2:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3cd6:	91 30       	cpi	r25, 0x01	; 1
    3cd8:	11 f4       	brne	.+4      	; 0x3cde <udi_cdc_data_enable+0x62>
    3cda:	90 93 d2 23 	sts	0x23D2, r25	; 0x8023d2 <udi_cdc_data_running>
    3cde:	08 95       	ret

00003ce0 <udi_cdc_data_received>:
    3ce0:	0f 93       	push	r16
    3ce2:	1f 93       	push	r17
    3ce4:	81 11       	cpse	r24, r1
    3ce6:	29 c0       	rjmp	.+82     	; 0x3d3a <udi_cdc_data_received+0x5a>
    3ce8:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udi_cdc_rx_buf_sel>
    3cec:	e1 e0       	ldi	r30, 0x01	; 1
    3cee:	81 11       	cpse	r24, r1
    3cf0:	e0 e0       	ldi	r30, 0x00	; 0
    3cf2:	84 2f       	mov	r24, r20
    3cf4:	61 15       	cp	r22, r1
    3cf6:	71 05       	cpc	r23, r1
    3cf8:	a9 f4       	brne	.+42     	; 0x3d24 <udi_cdc_data_received+0x44>
    3cfa:	4e 2f       	mov	r20, r30
    3cfc:	50 e0       	ldi	r21, 0x00	; 0
    3cfe:	00 24       	eor	r0, r0
    3d00:	56 95       	lsr	r21
    3d02:	47 95       	ror	r20
    3d04:	07 94       	ror	r0
    3d06:	56 95       	lsr	r21
    3d08:	47 95       	ror	r20
    3d0a:	07 94       	ror	r0
    3d0c:	54 2f       	mov	r21, r20
    3d0e:	40 2d       	mov	r20, r0
    3d10:	4e 5a       	subi	r20, 0xAE	; 174
    3d12:	5c 4d       	sbci	r21, 0xDC	; 220
    3d14:	00 e7       	ldi	r16, 0x70	; 112
    3d16:	1e e1       	ldi	r17, 0x1E	; 30
    3d18:	20 e4       	ldi	r18, 0x40	; 64
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	61 e0       	ldi	r22, 0x01	; 1
    3d1e:	0e 94 2e 14 	call	0x285c	; 0x285c <udd_ep_run>
    3d22:	0b c0       	rjmp	.+22     	; 0x3d3a <udi_cdc_data_received+0x5a>
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	ee 0f       	add	r30, r30
    3d28:	ff 1f       	adc	r31, r31
    3d2a:	e2 5b       	subi	r30, 0xB2	; 178
    3d2c:	fc 4d       	sbci	r31, 0xDC	; 220
    3d2e:	60 83       	st	Z, r22
    3d30:	71 83       	std	Z+1, r23	; 0x01
    3d32:	10 92 4a 23 	sts	0x234A, r1	; 0x80234a <udi_cdc_rx_trans_ongoing>
    3d36:	80 e0       	ldi	r24, 0x00	; 0
    3d38:	50 df       	rcall	.-352    	; 0x3bda <udi_cdc_rx_start>
    3d3a:	1f 91       	pop	r17
    3d3c:	0f 91       	pop	r16
    3d3e:	08 95       	ret

00003d40 <udi_cdc_multi_getc>:
    3d40:	ef 92       	push	r14
    3d42:	ff 92       	push	r15
    3d44:	1f 93       	push	r17
    3d46:	cf 93       	push	r28
    3d48:	df 93       	push	r29
    3d4a:	1f 92       	push	r1
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
    3d50:	11 e0       	ldi	r17, 0x01	; 1
    3d52:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udi_cdc_line_coding+0x6>
    3d56:	89 30       	cpi	r24, 0x09	; 9
    3d58:	09 f0       	breq	.+2      	; 0x3d5c <udi_cdc_multi_getc+0x1c>
    3d5a:	10 e0       	ldi	r17, 0x00	; 0
    3d5c:	40 e0       	ldi	r20, 0x00	; 0
    3d5e:	50 e0       	ldi	r21, 0x00	; 0
    3d60:	8f b7       	in	r24, 0x3f	; 63
    3d62:	89 83       	std	Y+1, r24	; 0x01
    3d64:	f8 94       	cli
    3d66:	a9 81       	ldd	r26, Y+1	; 0x01
    3d68:	20 91 4b 23 	lds	r18, 0x234B	; 0x80234b <udi_cdc_rx_pos>
    3d6c:	30 91 4c 23 	lds	r19, 0x234C	; 0x80234c <udi_cdc_rx_pos+0x1>
    3d70:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udi_cdc_rx_buf_sel>
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	fc 01       	movw	r30, r24
    3d78:	ee 0f       	add	r30, r30
    3d7a:	ff 1f       	adc	r31, r31
    3d7c:	e2 5b       	subi	r30, 0xB2	; 178
    3d7e:	fc 4d       	sbci	r31, 0xDC	; 220
    3d80:	60 81       	ld	r22, Z
    3d82:	71 81       	ldd	r23, Z+1	; 0x01
    3d84:	af bf       	out	0x3f, r26	; 63
    3d86:	26 17       	cp	r18, r22
    3d88:	37 07       	cpc	r19, r23
    3d8a:	30 f0       	brcs	.+12     	; 0x3d98 <udi_cdc_multi_getc+0x58>
    3d8c:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <udi_cdc_data_running>
    3d90:	81 11       	cpse	r24, r1
    3d92:	e6 cf       	rjmp	.-52     	; 0x3d60 <udi_cdc_multi_getc+0x20>
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	21 c0       	rjmp	.+66     	; 0x3dda <udi_cdc_multi_getc+0x9a>
    3d98:	fc 01       	movw	r30, r24
    3d9a:	00 24       	eor	r0, r0
    3d9c:	f6 95       	lsr	r31
    3d9e:	e7 95       	ror	r30
    3da0:	07 94       	ror	r0
    3da2:	f6 95       	lsr	r31
    3da4:	e7 95       	ror	r30
    3da6:	07 94       	ror	r0
    3da8:	fe 2f       	mov	r31, r30
    3daa:	e0 2d       	mov	r30, r0
    3dac:	ee 5a       	subi	r30, 0xAE	; 174
    3dae:	fc 4d       	sbci	r31, 0xDC	; 220
    3db0:	e2 0f       	add	r30, r18
    3db2:	f3 1f       	adc	r31, r19
    3db4:	80 81       	ld	r24, Z
    3db6:	7a 01       	movw	r14, r20
    3db8:	e8 2a       	or	r14, r24
    3dba:	2f 5f       	subi	r18, 0xFF	; 255
    3dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbe:	20 93 4b 23 	sts	0x234B, r18	; 0x80234b <udi_cdc_rx_pos>
    3dc2:	30 93 4c 23 	sts	0x234C, r19	; 0x80234c <udi_cdc_rx_pos+0x1>
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	08 df       	rcall	.-496    	; 0x3bda <udi_cdc_rx_start>
    3dca:	11 23       	and	r17, r17
    3dcc:	21 f0       	breq	.+8      	; 0x3dd6 <udi_cdc_multi_getc+0x96>
    3dce:	5e 2d       	mov	r21, r14
    3dd0:	44 27       	eor	r20, r20
    3dd2:	10 e0       	ldi	r17, 0x00	; 0
    3dd4:	c5 cf       	rjmp	.-118    	; 0x3d60 <udi_cdc_multi_getc+0x20>
    3dd6:	8e 2d       	mov	r24, r14
    3dd8:	9f 2d       	mov	r25, r15
    3dda:	0f 90       	pop	r0
    3ddc:	df 91       	pop	r29
    3dde:	cf 91       	pop	r28
    3de0:	1f 91       	pop	r17
    3de2:	ff 90       	pop	r15
    3de4:	ef 90       	pop	r14
    3de6:	08 95       	ret

00003de8 <udi_cdc_getc>:
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	aa cf       	rjmp	.-172    	; 0x3d40 <udi_cdc_multi_getc>
    3dec:	08 95       	ret

00003dee <udi_cdc_multi_get_free_tx_buffer>:
    3dee:	cf 93       	push	r28
    3df0:	df 93       	push	r29
    3df2:	1f 92       	push	r1
    3df4:	cd b7       	in	r28, 0x3d	; 61
    3df6:	de b7       	in	r29, 0x3e	; 62
    3df8:	8f b7       	in	r24, 0x3f	; 63
    3dfa:	89 83       	std	Y+1, r24	; 0x01
    3dfc:	f8 94       	cli
    3dfe:	99 81       	ldd	r25, Y+1	; 0x01
    3e00:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <udi_cdc_tx_buf_sel>
    3e04:	e8 2f       	mov	r30, r24
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	ee 0f       	add	r30, r30
    3e0a:	ff 1f       	adc	r31, r31
    3e0c:	eb 53       	subi	r30, 0x3B	; 59
    3e0e:	fd 4d       	sbci	r31, 0xDD	; 221
    3e10:	20 81       	ld	r18, Z
    3e12:	31 81       	ldd	r19, Z+1	; 0x01
    3e14:	20 34       	cpi	r18, 0x40	; 64
    3e16:	31 05       	cpc	r19, r1
    3e18:	89 f4       	brne	.+34     	; 0x3e3c <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3e1a:	40 91 c1 22 	lds	r20, 0x22C1	; 0x8022c1 <udi_cdc_tx_trans_ongoing>
    3e1e:	41 11       	cpse	r20, r1
    3e20:	0d c0       	rjmp	.+26     	; 0x3e3c <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3e22:	40 91 c0 22 	lds	r20, 0x22C0	; 0x8022c0 <udi_cdc_tx_both_buf_to_send>
    3e26:	41 11       	cpse	r20, r1
    3e28:	09 c0       	rjmp	.+18     	; 0x3e3c <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3e2a:	21 e0       	ldi	r18, 0x01	; 1
    3e2c:	20 93 c0 22 	sts	0x22C0, r18	; 0x8022c0 <udi_cdc_tx_both_buf_to_send>
    3e30:	81 11       	cpse	r24, r1
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	20 93 c4 22 	sts	0x22C4, r18	; 0x8022c4 <udi_cdc_tx_buf_sel>
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	9f bf       	out	0x3f, r25	; 63
    3e3e:	80 e4       	ldi	r24, 0x40	; 64
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	82 1b       	sub	r24, r18
    3e44:	93 0b       	sbc	r25, r19
    3e46:	0f 90       	pop	r0
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	08 95       	ret

00003e4e <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    3e4e:	cf df       	rcall	.-98     	; 0x3dee <udi_cdc_multi_get_free_tx_buffer>
    3e50:	21 e0       	ldi	r18, 0x01	; 1
    3e52:	89 2b       	or	r24, r25
    3e54:	09 f4       	brne	.+2      	; 0x3e58 <udi_cdc_multi_is_tx_ready+0xa>
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	82 2f       	mov	r24, r18
    3e5a:	08 95       	ret

00003e5c <udi_cdc_multi_putc>:
    3e5c:	ff 92       	push	r15
    3e5e:	0f 93       	push	r16
    3e60:	1f 93       	push	r17
    3e62:	cf 93       	push	r28
    3e64:	df 93       	push	r29
    3e66:	1f 92       	push	r1
    3e68:	cd b7       	in	r28, 0x3d	; 61
    3e6a:	de b7       	in	r29, 0x3e	; 62
    3e6c:	f6 2e       	mov	r15, r22
    3e6e:	17 2f       	mov	r17, r23
    3e70:	01 e0       	ldi	r16, 0x01	; 1
    3e72:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udi_cdc_line_coding+0x6>
    3e76:	89 30       	cpi	r24, 0x09	; 9
    3e78:	09 f0       	breq	.+2      	; 0x3e7c <udi_cdc_multi_putc+0x20>
    3e7a:	00 e0       	ldi	r16, 0x00	; 0
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	e7 df       	rcall	.-50     	; 0x3e4e <udi_cdc_multi_is_tx_ready>
    3e80:	81 11       	cpse	r24, r1
    3e82:	07 c0       	rjmp	.+14     	; 0x3e92 <udi_cdc_multi_putc+0x36>
    3e84:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <udi_cdc_data_running>
    3e88:	81 11       	cpse	r24, r1
    3e8a:	f8 cf       	rjmp	.-16     	; 0x3e7c <udi_cdc_multi_putc+0x20>
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	2c c0       	rjmp	.+88     	; 0x3eea <udi_cdc_multi_putc+0x8e>
    3e92:	8f b7       	in	r24, 0x3f	; 63
    3e94:	89 83       	std	Y+1, r24	; 0x01
    3e96:	f8 94       	cli
    3e98:	49 81       	ldd	r20, Y+1	; 0x01
    3e9a:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <udi_cdc_tx_buf_sel>
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	fc 01       	movw	r30, r24
    3ea2:	ee 0f       	add	r30, r30
    3ea4:	ff 1f       	adc	r31, r31
    3ea6:	eb 53       	subi	r30, 0x3B	; 59
    3ea8:	fd 4d       	sbci	r31, 0xDD	; 221
    3eaa:	20 81       	ld	r18, Z
    3eac:	31 81       	ldd	r19, Z+1	; 0x01
    3eae:	b9 01       	movw	r22, r18
    3eb0:	6f 5f       	subi	r22, 0xFF	; 255
    3eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb4:	60 83       	st	Z, r22
    3eb6:	71 83       	std	Z+1, r23	; 0x01
    3eb8:	00 24       	eor	r0, r0
    3eba:	96 95       	lsr	r25
    3ebc:	87 95       	ror	r24
    3ebe:	07 94       	ror	r0
    3ec0:	96 95       	lsr	r25
    3ec2:	87 95       	ror	r24
    3ec4:	07 94       	ror	r0
    3ec6:	98 2f       	mov	r25, r24
    3ec8:	80 2d       	mov	r24, r0
    3eca:	86 53       	subi	r24, 0x36	; 54
    3ecc:	9d 4d       	sbci	r25, 0xDD	; 221
    3ece:	fc 01       	movw	r30, r24
    3ed0:	e2 0f       	add	r30, r18
    3ed2:	f3 1f       	adc	r31, r19
    3ed4:	f0 82       	st	Z, r15
    3ed6:	4f bf       	out	0x3f, r20	; 63
    3ed8:	00 23       	and	r16, r16
    3eda:	29 f0       	breq	.+10     	; 0x3ee6 <udi_cdc_multi_putc+0x8a>
    3edc:	f1 2e       	mov	r15, r17
    3ede:	11 0f       	add	r17, r17
    3ee0:	11 0b       	sbc	r17, r17
    3ee2:	00 e0       	ldi	r16, 0x00	; 0
    3ee4:	cb cf       	rjmp	.-106    	; 0x3e7c <udi_cdc_multi_putc+0x20>
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	0f 90       	pop	r0
    3eec:	df 91       	pop	r29
    3eee:	cf 91       	pop	r28
    3ef0:	1f 91       	pop	r17
    3ef2:	0f 91       	pop	r16
    3ef4:	ff 90       	pop	r15
    3ef6:	08 95       	ret

00003ef8 <udi_cdc_putc>:
    3ef8:	bc 01       	movw	r22, r24
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	af cf       	rjmp	.-162    	; 0x3e5c <udi_cdc_multi_putc>
    3efe:	08 95       	ret

00003f00 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    3f00:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udc_ptr_conf>
    3f04:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    3f08:	01 90       	ld	r0, Z+
    3f0a:	f0 81       	ld	r31, Z
    3f0c:	e0 2d       	mov	r30, r0
    3f0e:	22 81       	ldd	r18, Z+2	; 0x02
    3f10:	33 81       	ldd	r19, Z+3	; 0x03
    3f12:	2e 0f       	add	r18, r30
    3f14:	3f 1f       	adc	r19, r31
    3f16:	fc 01       	movw	r30, r24
    3f18:	40 81       	ld	r20, Z
    3f1a:	e4 0f       	add	r30, r20
    3f1c:	f1 1d       	adc	r31, r1
    3f1e:	e2 17       	cp	r30, r18
    3f20:	f3 07       	cpc	r31, r19
    3f22:	a0 f4       	brcc	.+40     	; 0x3f4c <udc_next_desc_in_iface+0x4c>
    3f24:	81 81       	ldd	r24, Z+1	; 0x01
    3f26:	84 30       	cpi	r24, 0x04	; 4
    3f28:	a1 f0       	breq	.+40     	; 0x3f52 <udc_next_desc_in_iface+0x52>
    3f2a:	86 13       	cpse	r24, r22
    3f2c:	06 c0       	rjmp	.+12     	; 0x3f3a <udc_next_desc_in_iface+0x3a>
    3f2e:	14 c0       	rjmp	.+40     	; 0x3f58 <udc_next_desc_in_iface+0x58>
    3f30:	81 81       	ldd	r24, Z+1	; 0x01
    3f32:	84 30       	cpi	r24, 0x04	; 4
    3f34:	a1 f0       	breq	.+40     	; 0x3f5e <udc_next_desc_in_iface+0x5e>
    3f36:	86 17       	cp	r24, r22
    3f38:	a9 f0       	breq	.+42     	; 0x3f64 <udc_next_desc_in_iface+0x64>
    3f3a:	80 81       	ld	r24, Z
    3f3c:	e8 0f       	add	r30, r24
    3f3e:	f1 1d       	adc	r31, r1
    3f40:	e2 17       	cp	r30, r18
    3f42:	f3 07       	cpc	r31, r19
    3f44:	a8 f3       	brcs	.-22     	; 0x3f30 <udc_next_desc_in_iface+0x30>
    3f46:	80 e0       	ldi	r24, 0x00	; 0
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	08 95       	ret
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	08 95       	ret
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	08 95       	ret
    3f58:	8e 2f       	mov	r24, r30
    3f5a:	9f 2f       	mov	r25, r31
    3f5c:	08 95       	ret
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	08 95       	ret
    3f64:	8e 2f       	mov	r24, r30
    3f66:	9f 2f       	mov	r25, r31
    3f68:	08 95       	ret

00003f6a <udc_valid_address>:
    3f6a:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    3f6e:	8f 77       	andi	r24, 0x7F	; 127
    3f70:	0c 94 3f 13 	jmp	0x267e	; 0x267e <udd_set_address>
    3f74:	08 95       	ret

00003f76 <udc_update_iface_desc>:
    3f76:	90 91 f0 23 	lds	r25, 0x23F0	; 0x8023f0 <udc_num_configuration>
    3f7a:	99 23       	and	r25, r25
    3f7c:	81 f1       	breq	.+96     	; 0x3fde <udc_update_iface_desc+0x68>
    3f7e:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udc_ptr_conf>
    3f82:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    3f86:	01 90       	ld	r0, Z+
    3f88:	f0 81       	ld	r31, Z
    3f8a:	e0 2d       	mov	r30, r0
    3f8c:	94 81       	ldd	r25, Z+4	; 0x04
    3f8e:	89 17       	cp	r24, r25
    3f90:	40 f5       	brcc	.+80     	; 0x3fe2 <udc_update_iface_desc+0x6c>
    3f92:	e0 93 ec 23 	sts	0x23EC, r30	; 0x8023ec <udc_ptr_iface>
    3f96:	f0 93 ed 23 	sts	0x23ED, r31	; 0x8023ed <udc_ptr_iface+0x1>
    3f9a:	22 81       	ldd	r18, Z+2	; 0x02
    3f9c:	33 81       	ldd	r19, Z+3	; 0x03
    3f9e:	2e 0f       	add	r18, r30
    3fa0:	3f 1f       	adc	r19, r31
    3fa2:	e2 17       	cp	r30, r18
    3fa4:	f3 07       	cpc	r31, r19
    3fa6:	f8 f4       	brcc	.+62     	; 0x3fe6 <udc_update_iface_desc+0x70>
    3fa8:	91 81       	ldd	r25, Z+1	; 0x01
    3faa:	94 30       	cpi	r25, 0x04	; 4
    3fac:	61 f4       	brne	.+24     	; 0x3fc6 <udc_update_iface_desc+0x50>
    3fae:	92 81       	ldd	r25, Z+2	; 0x02
    3fb0:	89 13       	cpse	r24, r25
    3fb2:	09 c0       	rjmp	.+18     	; 0x3fc6 <udc_update_iface_desc+0x50>
    3fb4:	93 81       	ldd	r25, Z+3	; 0x03
    3fb6:	96 13       	cpse	r25, r22
    3fb8:	06 c0       	rjmp	.+12     	; 0x3fc6 <udc_update_iface_desc+0x50>
    3fba:	e0 93 ec 23 	sts	0x23EC, r30	; 0x8023ec <udc_ptr_iface>
    3fbe:	f0 93 ed 23 	sts	0x23ED, r31	; 0x8023ed <udc_ptr_iface+0x1>
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	08 95       	ret
    3fc6:	90 81       	ld	r25, Z
    3fc8:	e9 0f       	add	r30, r25
    3fca:	f1 1d       	adc	r31, r1
    3fcc:	e2 17       	cp	r30, r18
    3fce:	f3 07       	cpc	r31, r19
    3fd0:	58 f3       	brcs	.-42     	; 0x3fa8 <udc_update_iface_desc+0x32>
    3fd2:	e0 93 ec 23 	sts	0x23EC, r30	; 0x8023ec <udc_ptr_iface>
    3fd6:	f0 93 ed 23 	sts	0x23ED, r31	; 0x8023ed <udc_ptr_iface+0x1>
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	08 95       	ret
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	08 95       	ret
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	08 95       	ret
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	08 95       	ret

00003fea <udc_iface_disable>:
    3fea:	ef 92       	push	r14
    3fec:	ff 92       	push	r15
    3fee:	1f 93       	push	r17
    3ff0:	cf 93       	push	r28
    3ff2:	df 93       	push	r29
    3ff4:	c8 2f       	mov	r28, r24
    3ff6:	60 e0       	ldi	r22, 0x00	; 0
    3ff8:	be df       	rcall	.-132    	; 0x3f76 <udc_update_iface_desc>
    3ffa:	18 2f       	mov	r17, r24
    3ffc:	88 23       	and	r24, r24
    3ffe:	81 f1       	breq	.+96     	; 0x4060 <udc_iface_disable+0x76>
    4000:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    4004:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    4008:	ec 2f       	mov	r30, r28
    400a:	f0 e0       	ldi	r31, 0x00	; 0
    400c:	ee 0f       	add	r30, r30
    400e:	ff 1f       	adc	r31, r31
    4010:	12 96       	adiw	r26, 0x02	; 2
    4012:	8d 91       	ld	r24, X+
    4014:	9c 91       	ld	r25, X
    4016:	13 97       	sbiw	r26, 0x03	; 3
    4018:	e8 0f       	add	r30, r24
    401a:	f9 1f       	adc	r31, r25
    401c:	e0 80       	ld	r14, Z
    401e:	f1 80       	ldd	r15, Z+1	; 0x01
    4020:	d7 01       	movw	r26, r14
    4022:	16 96       	adiw	r26, 0x06	; 6
    4024:	ed 91       	ld	r30, X+
    4026:	fc 91       	ld	r31, X
    4028:	17 97       	sbiw	r26, 0x07	; 7
    402a:	19 95       	eicall
    402c:	68 2f       	mov	r22, r24
    402e:	8c 2f       	mov	r24, r28
    4030:	a2 df       	rcall	.-188    	; 0x3f76 <udc_update_iface_desc>
    4032:	18 2f       	mov	r17, r24
    4034:	88 23       	and	r24, r24
    4036:	a1 f0       	breq	.+40     	; 0x4060 <udc_iface_disable+0x76>
    4038:	c0 91 ec 23 	lds	r28, 0x23EC	; 0x8023ec <udc_ptr_iface>
    403c:	d0 91 ed 23 	lds	r29, 0x23ED	; 0x8023ed <udc_ptr_iface+0x1>
    4040:	65 e0       	ldi	r22, 0x05	; 5
    4042:	ce 01       	movw	r24, r28
    4044:	5d df       	rcall	.-326    	; 0x3f00 <udc_next_desc_in_iface>
    4046:	ec 01       	movw	r28, r24
    4048:	89 2b       	or	r24, r25
    404a:	21 f0       	breq	.+8      	; 0x4054 <udc_iface_disable+0x6a>
    404c:	8a 81       	ldd	r24, Y+2	; 0x02
    404e:	0e 94 48 15 	call	0x2a90	; 0x2a90 <udd_ep_free>
    4052:	f6 cf       	rjmp	.-20     	; 0x4040 <udc_iface_disable+0x56>
    4054:	d7 01       	movw	r26, r14
    4056:	12 96       	adiw	r26, 0x02	; 2
    4058:	ed 91       	ld	r30, X+
    405a:	fc 91       	ld	r31, X
    405c:	13 97       	sbiw	r26, 0x03	; 3
    405e:	19 95       	eicall
    4060:	81 2f       	mov	r24, r17
    4062:	df 91       	pop	r29
    4064:	cf 91       	pop	r28
    4066:	1f 91       	pop	r17
    4068:	ff 90       	pop	r15
    406a:	ef 90       	pop	r14
    406c:	08 95       	ret

0000406e <udc_iface_enable>:
    406e:	1f 93       	push	r17
    4070:	cf 93       	push	r28
    4072:	df 93       	push	r29
    4074:	18 2f       	mov	r17, r24
    4076:	7f df       	rcall	.-258    	; 0x3f76 <udc_update_iface_desc>
    4078:	88 23       	and	r24, r24
    407a:	41 f1       	breq	.+80     	; 0x40cc <udc_iface_enable+0x5e>
    407c:	c0 91 ec 23 	lds	r28, 0x23EC	; 0x8023ec <udc_ptr_iface>
    4080:	d0 91 ed 23 	lds	r29, 0x23ED	; 0x8023ed <udc_ptr_iface+0x1>
    4084:	65 e0       	ldi	r22, 0x05	; 5
    4086:	ce 01       	movw	r24, r28
    4088:	3b df       	rcall	.-394    	; 0x3f00 <udc_next_desc_in_iface>
    408a:	ec 01       	movw	r28, r24
    408c:	89 2b       	or	r24, r25
    408e:	49 f0       	breq	.+18     	; 0x40a2 <udc_iface_enable+0x34>
    4090:	4c 81       	ldd	r20, Y+4	; 0x04
    4092:	5d 81       	ldd	r21, Y+5	; 0x05
    4094:	6b 81       	ldd	r22, Y+3	; 0x03
    4096:	8a 81       	ldd	r24, Y+2	; 0x02
    4098:	0e 94 54 13 	call	0x26a8	; 0x26a8 <udd_ep_alloc>
    409c:	81 11       	cpse	r24, r1
    409e:	f2 cf       	rjmp	.-28     	; 0x4084 <udc_iface_enable+0x16>
    40a0:	15 c0       	rjmp	.+42     	; 0x40cc <udc_iface_enable+0x5e>
    40a2:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    40a6:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    40aa:	e1 2f       	mov	r30, r17
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	ee 0f       	add	r30, r30
    40b0:	ff 1f       	adc	r31, r31
    40b2:	12 96       	adiw	r26, 0x02	; 2
    40b4:	8d 91       	ld	r24, X+
    40b6:	9c 91       	ld	r25, X
    40b8:	13 97       	sbiw	r26, 0x03	; 3
    40ba:	e8 0f       	add	r30, r24
    40bc:	f9 1f       	adc	r31, r25
    40be:	01 90       	ld	r0, Z+
    40c0:	f0 81       	ld	r31, Z
    40c2:	e0 2d       	mov	r30, r0
    40c4:	01 90       	ld	r0, Z+
    40c6:	f0 81       	ld	r31, Z
    40c8:	e0 2d       	mov	r30, r0
    40ca:	19 95       	eicall
    40cc:	df 91       	pop	r29
    40ce:	cf 91       	pop	r28
    40d0:	1f 91       	pop	r17
    40d2:	08 95       	ret

000040d4 <udc_start>:
    40d4:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <udd_enable>
    40d8:	08 95       	ret

000040da <udc_reset>:
    40da:	cf 93       	push	r28
    40dc:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    40e0:	88 23       	and	r24, r24
    40e2:	c1 f0       	breq	.+48     	; 0x4114 <udc_reset+0x3a>
    40e4:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udc_ptr_conf>
    40e8:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    40ec:	01 90       	ld	r0, Z+
    40ee:	f0 81       	ld	r31, Z
    40f0:	e0 2d       	mov	r30, r0
    40f2:	84 81       	ldd	r24, Z+4	; 0x04
    40f4:	88 23       	and	r24, r24
    40f6:	71 f0       	breq	.+28     	; 0x4114 <udc_reset+0x3a>
    40f8:	c0 e0       	ldi	r28, 0x00	; 0
    40fa:	8c 2f       	mov	r24, r28
    40fc:	76 df       	rcall	.-276    	; 0x3fea <udc_iface_disable>
    40fe:	cf 5f       	subi	r28, 0xFF	; 255
    4100:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udc_ptr_conf>
    4104:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    4108:	01 90       	ld	r0, Z+
    410a:	f0 81       	ld	r31, Z
    410c:	e0 2d       	mov	r30, r0
    410e:	84 81       	ldd	r24, Z+4	; 0x04
    4110:	c8 17       	cp	r28, r24
    4112:	98 f3       	brcs	.-26     	; 0x40fa <udc_reset+0x20>
    4114:	10 92 f0 23 	sts	0x23F0, r1	; 0x8023f0 <udc_num_configuration>
    4118:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udc_device_status>
    411c:	81 fd       	sbrc	r24, 1
    411e:	2e d8       	rcall	.-4004   	; 0x317c <usb_callback_remotewakeup_disable>
    4120:	10 92 f4 23 	sts	0x23F4, r1	; 0x8023f4 <udc_device_status>
    4124:	10 92 f5 23 	sts	0x23F5, r1	; 0x8023f5 <udc_device_status+0x1>
    4128:	cf 91       	pop	r28
    412a:	08 95       	ret

0000412c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    412c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    412e:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    4132:	88 23       	and	r24, r24
    4134:	49 f1       	breq	.+82     	; 0x4188 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4136:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    413a:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    413e:	ed 91       	ld	r30, X+
    4140:	fc 91       	ld	r31, X
    4142:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4144:	84 81       	ldd	r24, Z+4	; 0x04
    4146:	88 23       	and	r24, r24
    4148:	f9 f0       	breq	.+62     	; 0x4188 <udc_sof_notify+0x5c>
    414a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    414c:	ec 2f       	mov	r30, r28
    414e:	f0 e0       	ldi	r31, 0x00	; 0
    4150:	ee 0f       	add	r30, r30
    4152:	ff 1f       	adc	r31, r31
    4154:	12 96       	adiw	r26, 0x02	; 2
    4156:	8d 91       	ld	r24, X+
    4158:	9c 91       	ld	r25, X
    415a:	13 97       	sbiw	r26, 0x03	; 3
    415c:	e8 0f       	add	r30, r24
    415e:	f9 1f       	adc	r31, r25
    4160:	01 90       	ld	r0, Z+
    4162:	f0 81       	ld	r31, Z
    4164:	e0 2d       	mov	r30, r0
    4166:	00 84       	ldd	r0, Z+8	; 0x08
    4168:	f1 85       	ldd	r31, Z+9	; 0x09
    416a:	e0 2d       	mov	r30, r0
    416c:	30 97       	sbiw	r30, 0x00	; 0
    416e:	09 f0       	breq	.+2      	; 0x4172 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    4170:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    4172:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4174:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    4178:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    417c:	ed 91       	ld	r30, X+
    417e:	fc 91       	ld	r31, X
    4180:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4182:	84 81       	ldd	r24, Z+4	; 0x04
    4184:	c8 17       	cp	r28, r24
    4186:	10 f3       	brcs	.-60     	; 0x414c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    4188:	cf 91       	pop	r28
    418a:	08 95       	ret

0000418c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    418c:	0f 93       	push	r16
    418e:	1f 93       	push	r17
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    4194:	ed ef       	ldi	r30, 0xFD	; 253
    4196:	f3 e2       	ldi	r31, 0x23	; 35
    4198:	12 86       	std	Z+10, r1	; 0x0a
    419a:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    419c:	14 86       	std	Z+12, r1	; 0x0c
    419e:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    41a0:	16 86       	std	Z+14, r1	; 0x0e
    41a2:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    41a4:	80 81       	ld	r24, Z
    41a6:	88 23       	and	r24, r24
    41a8:	0c f0       	brlt	.+2      	; 0x41ac <udc_process_setup+0x20>
    41aa:	95 c2       	rjmp	.+1322   	; 0x46d6 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    41ac:	20 91 03 24 	lds	r18, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    41b0:	30 91 04 24 	lds	r19, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    41b4:	21 15       	cp	r18, r1
    41b6:	31 05       	cpc	r19, r1
    41b8:	09 f0       	breq	.+2      	; 0x41bc <udc_process_setup+0x30>
    41ba:	88 c2       	rjmp	.+1296   	; 0x46cc <udc_process_setup+0x540>
    41bc:	7f c2       	rjmp	.+1278   	; 0x46bc <udc_process_setup+0x530>
    41be:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    41c0:	09 f0       	breq	.+2      	; 0x41c4 <udc_process_setup+0x38>
    41c2:	ab c0       	rjmp	.+342    	; 0x431a <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    41c4:	90 91 fe 23 	lds	r25, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    41c8:	96 30       	cpi	r25, 0x06	; 6
    41ca:	81 f0       	breq	.+32     	; 0x41ec <udc_process_setup+0x60>
    41cc:	98 30       	cpi	r25, 0x08	; 8
    41ce:	09 f4       	brne	.+2      	; 0x41d2 <udc_process_setup+0x46>
    41d0:	99 c0       	rjmp	.+306    	; 0x4304 <udc_process_setup+0x178>
    41d2:	91 11       	cpse	r25, r1
    41d4:	a2 c0       	rjmp	.+324    	; 0x431a <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    41d6:	22 30       	cpi	r18, 0x02	; 2
    41d8:	31 05       	cpc	r19, r1
    41da:	09 f0       	breq	.+2      	; 0x41de <udc_process_setup+0x52>
    41dc:	2b c2       	rjmp	.+1110   	; 0x4634 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    41de:	62 e0       	ldi	r22, 0x02	; 2
    41e0:	70 e0       	ldi	r23, 0x00	; 0
    41e2:	84 ef       	ldi	r24, 0xF4	; 244
    41e4:	93 e2       	ldi	r25, 0x23	; 35
    41e6:	0e 94 4d 13 	call	0x269a	; 0x269a <udd_set_setup_payload>
    41ea:	7e c2       	rjmp	.+1276   	; 0x46e8 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    41ec:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    41f0:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    41f4:	29 2f       	mov	r18, r25
    41f6:	33 27       	eor	r19, r19
    41f8:	22 30       	cpi	r18, 0x02	; 2
    41fa:	31 05       	cpc	r19, r1
    41fc:	b1 f0       	breq	.+44     	; 0x422a <udc_process_setup+0x9e>
    41fe:	20 f4       	brcc	.+8      	; 0x4208 <udc_process_setup+0x7c>
    4200:	21 30       	cpi	r18, 0x01	; 1
    4202:	31 05       	cpc	r19, r1
    4204:	41 f0       	breq	.+16     	; 0x4216 <udc_process_setup+0x8a>
    4206:	d8 c1       	rjmp	.+944    	; 0x45b8 <udc_process_setup+0x42c>
    4208:	23 30       	cpi	r18, 0x03	; 3
    420a:	31 05       	cpc	r19, r1
    420c:	f1 f1       	breq	.+124    	; 0x428a <udc_process_setup+0xfe>
    420e:	2f 30       	cpi	r18, 0x0F	; 15
    4210:	31 05       	cpc	r19, r1
    4212:	61 f1       	breq	.+88     	; 0x426c <udc_process_setup+0xe0>
    4214:	d1 c1       	rjmp	.+930    	; 0x45b8 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    4216:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <udc_config>
    421a:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    421e:	dc 01       	movw	r26, r24
    4220:	6c 91       	ld	r22, X
    4222:	70 e0       	ldi	r23, 0x00	; 0
    4224:	0e 94 4d 13 	call	0x269a	; 0x269a <udd_set_setup_payload>
    4228:	5e c0       	rjmp	.+188    	; 0x42e6 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    422a:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    422e:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
    4232:	21 89       	ldd	r18, Z+17	; 0x11
    4234:	82 17       	cp	r24, r18
    4236:	08 f0       	brcs	.+2      	; 0x423a <udc_process_setup+0xae>
    4238:	fd c1       	rjmp	.+1018   	; 0x4634 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    423a:	99 27       	eor	r25, r25
    423c:	88 0f       	add	r24, r24
    423e:	99 1f       	adc	r25, r25
    4240:	88 0f       	add	r24, r24
    4242:	99 1f       	adc	r25, r25
    4244:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    4248:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    424c:	e8 0f       	add	r30, r24
    424e:	f9 1f       	adc	r31, r25
    4250:	80 81       	ld	r24, Z
    4252:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    4254:	fc 01       	movw	r30, r24
    4256:	62 81       	ldd	r22, Z+2	; 0x02
    4258:	73 81       	ldd	r23, Z+3	; 0x03
    425a:	0e 94 4d 13 	call	0x269a	; 0x269a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    425e:	e0 91 05 24 	lds	r30, 0x2405	; 0x802405 <udd_g_ctrlreq+0x8>
    4262:	f0 91 06 24 	lds	r31, 0x2406	; 0x802406 <udd_g_ctrlreq+0x9>
    4266:	82 e0       	ldi	r24, 0x02	; 2
    4268:	81 83       	std	Z+1, r24	; 0x01
    426a:	3d c0       	rjmp	.+122    	; 0x42e6 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    426c:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <udc_config+0x4>
    4270:	90 91 42 20 	lds	r25, 0x2042	; 0x802042 <udc_config+0x5>
    4274:	00 97       	sbiw	r24, 0x00	; 0
    4276:	09 f4       	brne	.+2      	; 0x427a <udc_process_setup+0xee>
    4278:	dd c1       	rjmp	.+954    	; 0x4634 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    427a:	dc 01       	movw	r26, r24
    427c:	12 96       	adiw	r26, 0x02	; 2
    427e:	6d 91       	ld	r22, X+
    4280:	7c 91       	ld	r23, X
    4282:	13 97       	sbiw	r26, 0x03	; 3
    4284:	0e 94 4d 13 	call	0x269a	; 0x269a <udd_set_setup_payload>
    4288:	2e c0       	rjmp	.+92     	; 0x42e6 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    428a:	99 27       	eor	r25, r25
    428c:	81 30       	cpi	r24, 0x01	; 1
    428e:	91 05       	cpc	r25, r1
    4290:	99 f0       	breq	.+38     	; 0x42b8 <udc_process_setup+0x12c>
    4292:	58 f0       	brcs	.+22     	; 0x42aa <udc_process_setup+0x11e>
    4294:	82 30       	cpi	r24, 0x02	; 2
    4296:	91 05       	cpc	r25, r1
    4298:	09 f4       	brne	.+2      	; 0x429c <udc_process_setup+0x110>
    429a:	22 c2       	rjmp	.+1092   	; 0x46e0 <udc_process_setup+0x554>
    429c:	03 97       	sbiw	r24, 0x03	; 3
    429e:	09 f0       	breq	.+2      	; 0x42a2 <udc_process_setup+0x116>
    42a0:	94 c1       	rjmp	.+808    	; 0x45ca <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    42a2:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    42a4:	e6 e2       	ldi	r30, 0x26	; 38
    42a6:	f1 e2       	ldi	r31, 0x21	; 33
    42a8:	0a c0       	rjmp	.+20     	; 0x42be <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    42aa:	64 e0       	ldi	r22, 0x04	; 4
    42ac:	70 e0       	ldi	r23, 0x00	; 0
    42ae:	82 ee       	ldi	r24, 0xE2	; 226
    42b0:	90 e2       	ldi	r25, 0x20	; 32
    42b2:	0e 94 4d 13 	call	0x269a	; 0x269a <udd_set_setup_payload>
    42b6:	17 c0       	rjmp	.+46     	; 0x42e6 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    42b8:	e1 ed       	ldi	r30, 0xD1	; 209
    42ba:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    42bc:	30 e1       	ldi	r19, 0x10	; 16
    42be:	a4 ea       	ldi	r26, 0xA4	; 164
    42c0:	b0 e2       	ldi	r27, 0x20	; 32
    42c2:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    42c4:	81 91       	ld	r24, Z+
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	8d 93       	st	X+, r24
    42ca:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    42cc:	2f 5f       	subi	r18, 0xFF	; 255
    42ce:	23 17       	cp	r18, r19
    42d0:	c8 f3       	brcs	.-14     	; 0x42c4 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    42d2:	63 2f       	mov	r22, r19
    42d4:	66 0f       	add	r22, r22
    42d6:	6e 5f       	subi	r22, 0xFE	; 254
    42d8:	60 93 a2 20 	sts	0x20A2, r22	; 0x8020a2 <udc_string_desc>
		udd_set_setup_payload(
    42dc:	70 e0       	ldi	r23, 0x00	; 0
    42de:	82 ea       	ldi	r24, 0xA2	; 162
    42e0:	90 e2       	ldi	r25, 0x20	; 32
    42e2:	0e 94 4d 13 	call	0x269a	; 0x269a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    42e6:	ed ef       	ldi	r30, 0xFD	; 253
    42e8:	f3 e2       	ldi	r31, 0x23	; 35
    42ea:	86 81       	ldd	r24, Z+6	; 0x06
    42ec:	97 81       	ldd	r25, Z+7	; 0x07
    42ee:	22 85       	ldd	r18, Z+10	; 0x0a
    42f0:	33 85       	ldd	r19, Z+11	; 0x0b
    42f2:	82 17       	cp	r24, r18
    42f4:	93 07       	cpc	r25, r19
    42f6:	08 f0       	brcs	.+2      	; 0x42fa <udc_process_setup+0x16e>
    42f8:	f7 c1       	rjmp	.+1006   	; 0x46e8 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    42fa:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <udd_g_ctrlreq+0xa>
    42fe:	90 93 08 24 	sts	0x2408, r25	; 0x802408 <udd_g_ctrlreq+0xb>
    4302:	f2 c1       	rjmp	.+996    	; 0x46e8 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    4304:	21 30       	cpi	r18, 0x01	; 1
    4306:	31 05       	cpc	r19, r1
    4308:	09 f0       	breq	.+2      	; 0x430c <udc_process_setup+0x180>
    430a:	94 c1       	rjmp	.+808    	; 0x4634 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    430c:	61 e0       	ldi	r22, 0x01	; 1
    430e:	70 e0       	ldi	r23, 0x00	; 0
    4310:	80 ef       	ldi	r24, 0xF0	; 240
    4312:	93 e2       	ldi	r25, 0x23	; 35
    4314:	0e 94 4d 13 	call	0x269a	; 0x269a <udd_set_setup_payload>
    4318:	e7 c1       	rjmp	.+974    	; 0x46e8 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    431a:	81 30       	cpi	r24, 0x01	; 1
    431c:	e9 f5       	brne	.+122    	; 0x4398 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    431e:	90 91 fe 23 	lds	r25, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    4322:	9a 30       	cpi	r25, 0x0A	; 10
    4324:	c9 f5       	brne	.+114    	; 0x4398 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    4326:	21 30       	cpi	r18, 0x01	; 1
    4328:	31 05       	cpc	r19, r1
    432a:	09 f0       	breq	.+2      	; 0x432e <udc_process_setup+0x1a2>
    432c:	53 c1       	rjmp	.+678    	; 0x45d4 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    432e:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    4332:	88 23       	and	r24, r24
    4334:	09 f4       	brne	.+2      	; 0x4338 <udc_process_setup+0x1ac>
    4336:	4e c1       	rjmp	.+668    	; 0x45d4 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4338:	c0 91 01 24 	lds	r28, 0x2401	; 0x802401 <udd_g_ctrlreq+0x4>
    433c:	d0 91 02 24 	lds	r29, 0x2402	; 0x802402 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4340:	00 91 ee 23 	lds	r16, 0x23EE	; 0x8023ee <udc_ptr_conf>
    4344:	10 91 ef 23 	lds	r17, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    4348:	d8 01       	movw	r26, r16
    434a:	ed 91       	ld	r30, X+
    434c:	fc 91       	ld	r31, X
    434e:	84 81       	ldd	r24, Z+4	; 0x04
    4350:	c8 17       	cp	r28, r24
    4352:	08 f0       	brcs	.+2      	; 0x4356 <udc_process_setup+0x1ca>
    4354:	3f c1       	rjmp	.+638    	; 0x45d4 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4356:	60 e0       	ldi	r22, 0x00	; 0
    4358:	8c 2f       	mov	r24, r28
    435a:	0d de       	rcall	.-998    	; 0x3f76 <udc_update_iface_desc>
    435c:	88 23       	and	r24, r24
    435e:	09 f4       	brne	.+2      	; 0x4362 <udc_process_setup+0x1d6>
    4360:	34 c1       	rjmp	.+616    	; 0x45ca <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4362:	ce 01       	movw	r24, r28
    4364:	99 27       	eor	r25, r25
    4366:	88 0f       	add	r24, r24
    4368:	99 1f       	adc	r25, r25
    436a:	d8 01       	movw	r26, r16
    436c:	12 96       	adiw	r26, 0x02	; 2
    436e:	ed 91       	ld	r30, X+
    4370:	fc 91       	ld	r31, X
    4372:	13 97       	sbiw	r26, 0x03	; 3
    4374:	e8 0f       	add	r30, r24
    4376:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    4378:	01 90       	ld	r0, Z+
    437a:	f0 81       	ld	r31, Z
    437c:	e0 2d       	mov	r30, r0
    437e:	86 81       	ldd	r24, Z+6	; 0x06
    4380:	97 81       	ldd	r25, Z+7	; 0x07
    4382:	fc 01       	movw	r30, r24
    4384:	19 95       	eicall
    4386:	80 93 f2 23 	sts	0x23F2, r24	; 0x8023f2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    438a:	61 e0       	ldi	r22, 0x01	; 1
    438c:	70 e0       	ldi	r23, 0x00	; 0
    438e:	82 ef       	ldi	r24, 0xF2	; 242
    4390:	93 e2       	ldi	r25, 0x23	; 35
    4392:	0e 94 4d 13 	call	0x269a	; 0x269a <udd_set_setup_payload>
    4396:	a8 c1       	rjmp	.+848    	; 0x46e8 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4398:	82 30       	cpi	r24, 0x02	; 2
    439a:	09 f0       	breq	.+2      	; 0x439e <udc_process_setup+0x212>
    439c:	16 c1       	rjmp	.+556    	; 0x45ca <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    439e:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    43a2:	81 11       	cpse	r24, r1
    43a4:	0b c1       	rjmp	.+534    	; 0x45bc <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    43a6:	22 30       	cpi	r18, 0x02	; 2
    43a8:	31 05       	cpc	r19, r1
    43aa:	09 f0       	breq	.+2      	; 0x43ae <udc_process_setup+0x222>
    43ac:	43 c1       	rjmp	.+646    	; 0x4634 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    43ae:	80 91 01 24 	lds	r24, 0x2401	; 0x802401 <udd_g_ctrlreq+0x4>
    43b2:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <udd_ep_is_halted>
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	80 93 ea 23 	sts	0x23EA, r24	; 0x8023ea <udc_ep_status.4757>
    43bc:	90 93 eb 23 	sts	0x23EB, r25	; 0x8023eb <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    43c0:	62 e0       	ldi	r22, 0x02	; 2
    43c2:	70 e0       	ldi	r23, 0x00	; 0
    43c4:	8a ee       	ldi	r24, 0xEA	; 234
    43c6:	93 e2       	ldi	r25, 0x23	; 35
    43c8:	0e 94 4d 13 	call	0x269a	; 0x269a <udd_set_setup_payload>
    43cc:	8d c1       	rjmp	.+794    	; 0x46e8 <udc_process_setup+0x55c>
    43ce:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    43d0:	09 f0       	breq	.+2      	; 0x43d4 <udc_process_setup+0x248>
    43d2:	a0 c0       	rjmp	.+320    	; 0x4514 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    43d4:	90 91 fe 23 	lds	r25, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    43d8:	93 30       	cpi	r25, 0x03	; 3
    43da:	91 f1       	breq	.+100    	; 0x4440 <udc_process_setup+0x2b4>
    43dc:	18 f4       	brcc	.+6      	; 0x43e4 <udc_process_setup+0x258>
    43de:	91 30       	cpi	r25, 0x01	; 1
    43e0:	a9 f0       	breq	.+42     	; 0x440c <udc_process_setup+0x280>
    43e2:	98 c0       	rjmp	.+304    	; 0x4514 <udc_process_setup+0x388>
    43e4:	95 30       	cpi	r25, 0x05	; 5
    43e6:	21 f0       	breq	.+8      	; 0x43f0 <udc_process_setup+0x264>
    43e8:	99 30       	cpi	r25, 0x09	; 9
    43ea:	09 f4       	brne	.+2      	; 0x43ee <udc_process_setup+0x262>
    43ec:	43 c0       	rjmp	.+134    	; 0x4474 <udc_process_setup+0x2e8>
    43ee:	92 c0       	rjmp	.+292    	; 0x4514 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    43f0:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    43f4:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    43f8:	89 2b       	or	r24, r25
    43fa:	09 f0       	breq	.+2      	; 0x43fe <udc_process_setup+0x272>
    43fc:	1b c1       	rjmp	.+566    	; 0x4634 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    43fe:	85 eb       	ldi	r24, 0xB5	; 181
    4400:	9f e1       	ldi	r25, 0x1F	; 31
    4402:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <udd_g_ctrlreq+0xc>
    4406:	90 93 0a 24 	sts	0x240A, r25	; 0x80240a <udd_g_ctrlreq+0xd>
    440a:	6e c1       	rjmp	.+732    	; 0x46e8 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    440c:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    4410:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    4414:	89 2b       	or	r24, r25
    4416:	09 f0       	breq	.+2      	; 0x441a <udc_process_setup+0x28e>
    4418:	0d c1       	rjmp	.+538    	; 0x4634 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    441a:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    441e:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    4422:	01 97       	sbiw	r24, 0x01	; 1
    4424:	09 f0       	breq	.+2      	; 0x4428 <udc_process_setup+0x29c>
    4426:	06 c1       	rjmp	.+524    	; 0x4634 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    4428:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udc_device_status>
    442c:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udc_device_status+0x1>
    4430:	8d 7f       	andi	r24, 0xFD	; 253
    4432:	80 93 f4 23 	sts	0x23F4, r24	; 0x8023f4 <udc_device_status>
    4436:	90 93 f5 23 	sts	0x23F5, r25	; 0x8023f5 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    443a:	0e 94 be 18 	call	0x317c	; 0x317c <usb_callback_remotewakeup_disable>
    443e:	54 c1       	rjmp	.+680    	; 0x46e8 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4440:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    4444:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    4448:	89 2b       	or	r24, r25
    444a:	09 f0       	breq	.+2      	; 0x444e <udc_process_setup+0x2c2>
    444c:	f3 c0       	rjmp	.+486    	; 0x4634 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    444e:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    4452:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    4456:	01 97       	sbiw	r24, 0x01	; 1
    4458:	09 f0       	breq	.+2      	; 0x445c <udc_process_setup+0x2d0>
    445a:	b2 c0       	rjmp	.+356    	; 0x45c0 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    445c:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udc_device_status>
    4460:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udc_device_status+0x1>
    4464:	82 60       	ori	r24, 0x02	; 2
    4466:	80 93 f4 23 	sts	0x23F4, r24	; 0x8023f4 <udc_device_status>
    446a:	90 93 f5 23 	sts	0x23F5, r25	; 0x8023f5 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    446e:	0e 94 bd 18 	call	0x317a	; 0x317a <usb_callback_remotewakeup_enable>
    4472:	3a c1       	rjmp	.+628    	; 0x46e8 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    4474:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    4478:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    447c:	89 2b       	or	r24, r25
    447e:	09 f0       	breq	.+2      	; 0x4482 <udc_process_setup+0x2f6>
    4480:	d9 c0       	rjmp	.+434    	; 0x4634 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    4482:	0e 94 42 13 	call	0x2684	; 0x2684 <udd_getaddress>
    4486:	88 23       	and	r24, r24
    4488:	09 f4       	brne	.+2      	; 0x448c <udc_process_setup+0x300>
    448a:	9f c0       	rjmp	.+318    	; 0x45ca <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    448c:	20 91 ff 23 	lds	r18, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    4490:	30 91 00 24 	lds	r19, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    4494:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    4496:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    449a:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    449e:	81 89       	ldd	r24, Z+17	; 0x11
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	82 17       	cp	r24, r18
    44a4:	93 07       	cpc	r25, r19
    44a6:	08 f4       	brcc	.+2      	; 0x44aa <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    44a8:	90 c0       	rjmp	.+288    	; 0x45ca <udc_process_setup+0x43e>
    44aa:	17 de       	rcall	.-978    	; 0x40da <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    44ac:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    44b0:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    44b4:	80 93 f0 23 	sts	0x23F0, r24	; 0x8023f0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    44b8:	88 23       	and	r24, r24
    44ba:	09 f4       	brne	.+2      	; 0x44be <udc_process_setup+0x332>
    44bc:	15 c1       	rjmp	.+554    	; 0x46e8 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    44be:	99 27       	eor	r25, r25
    44c0:	81 50       	subi	r24, 0x01	; 1
    44c2:	90 4c       	sbci	r25, 0xC0	; 192
    44c4:	88 0f       	add	r24, r24
    44c6:	99 1f       	adc	r25, r25
    44c8:	88 0f       	add	r24, r24
    44ca:	99 1f       	adc	r25, r25
    44cc:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    44d0:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    44d4:	e8 0f       	add	r30, r24
    44d6:	f9 1f       	adc	r31, r25
    44d8:	e0 93 ee 23 	sts	0x23EE, r30	; 0x8023ee <udc_ptr_conf>
    44dc:	f0 93 ef 23 	sts	0x23EF, r31	; 0x8023ef <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    44e0:	01 90       	ld	r0, Z+
    44e2:	f0 81       	ld	r31, Z
    44e4:	e0 2d       	mov	r30, r0
    44e6:	84 81       	ldd	r24, Z+4	; 0x04
    44e8:	88 23       	and	r24, r24
    44ea:	09 f4       	brne	.+2      	; 0x44ee <udc_process_setup+0x362>
    44ec:	fd c0       	rjmp	.+506    	; 0x46e8 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    44ee:	c0 e0       	ldi	r28, 0x00	; 0
    44f0:	60 e0       	ldi	r22, 0x00	; 0
    44f2:	8c 2f       	mov	r24, r28
    44f4:	bc dd       	rcall	.-1160   	; 0x406e <udc_iface_enable>
    44f6:	88 23       	and	r24, r24
    44f8:	09 f4       	brne	.+2      	; 0x44fc <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    44fa:	67 c0       	rjmp	.+206    	; 0x45ca <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    44fc:	cf 5f       	subi	r28, 0xFF	; 255
    44fe:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udc_ptr_conf>
    4502:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    4506:	01 90       	ld	r0, Z+
    4508:	f0 81       	ld	r31, Z
    450a:	e0 2d       	mov	r30, r0
    450c:	84 81       	ldd	r24, Z+4	; 0x04
    450e:	c8 17       	cp	r28, r24
    4510:	78 f3       	brcs	.-34     	; 0x44f0 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4512:	ea c0       	rjmp	.+468    	; 0x46e8 <udc_process_setup+0x55c>
    4514:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4516:	e9 f4       	brne	.+58     	; 0x4552 <udc_process_setup+0x3c6>
    4518:	90 91 fe 23 	lds	r25, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    451c:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    451e:	c9 f4       	brne	.+50     	; 0x4552 <udc_process_setup+0x3c6>
    4520:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    4524:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    4528:	89 2b       	or	r24, r25
    452a:	09 f0       	breq	.+2      	; 0x452e <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    452c:	53 c0       	rjmp	.+166    	; 0x45d4 <udc_process_setup+0x448>
    452e:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    4532:	88 23       	and	r24, r24
    4534:	09 f4       	brne	.+2      	; 0x4538 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4536:	4e c0       	rjmp	.+156    	; 0x45d4 <udc_process_setup+0x448>
    4538:	ed ef       	ldi	r30, 0xFD	; 253
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    453a:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    453c:	c4 81       	ldd	r28, Z+4	; 0x04
    453e:	d2 81       	ldd	r29, Z+2	; 0x02
    4540:	8c 2f       	mov	r24, r28
    4542:	53 dd       	rcall	.-1370   	; 0x3fea <udc_iface_disable>
    4544:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    4546:	09 f4       	brne	.+2      	; 0x454a <udc_process_setup+0x3be>
    4548:	40 c0       	rjmp	.+128    	; 0x45ca <udc_process_setup+0x43e>
    454a:	6d 2f       	mov	r22, r29
    454c:	8c 2f       	mov	r24, r28
    454e:	8f dd       	rcall	.-1250   	; 0x406e <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4550:	3a c0       	rjmp	.+116    	; 0x45c6 <udc_process_setup+0x43a>
    4552:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4554:	d1 f5       	brne	.+116    	; 0x45ca <udc_process_setup+0x43e>
    4556:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    455a:	81 30       	cpi	r24, 0x01	; 1
    455c:	19 f0       	breq	.+6      	; 0x4564 <udc_process_setup+0x3d8>
    455e:	83 30       	cpi	r24, 0x03	; 3
    4560:	a1 f0       	breq	.+40     	; 0x458a <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4562:	30 c0       	rjmp	.+96     	; 0x45c4 <udc_process_setup+0x438>
    4564:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    4568:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    456c:	89 2b       	or	r24, r25
    456e:	09 f0       	breq	.+2      	; 0x4572 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4570:	61 c0       	rjmp	.+194    	; 0x4634 <udc_process_setup+0x4a8>
    4572:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    4576:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    457a:	89 2b       	or	r24, r25
    457c:	09 f0       	breq	.+2      	; 0x4580 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    457e:	5a c0       	rjmp	.+180    	; 0x4634 <udc_process_setup+0x4a8>
    4580:	80 91 01 24 	lds	r24, 0x2401	; 0x802401 <udd_g_ctrlreq+0x4>
    4584:	0e 94 f7 13 	call	0x27ee	; 0x27ee <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4588:	1e c0       	rjmp	.+60     	; 0x45c6 <udc_process_setup+0x43a>
    458a:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    458e:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    4592:	89 2b       	or	r24, r25
    4594:	09 f0       	breq	.+2      	; 0x4598 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4596:	4e c0       	rjmp	.+156    	; 0x4634 <udc_process_setup+0x4a8>
    4598:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    459c:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    45a0:	89 2b       	or	r24, r25
    45a2:	09 f0       	breq	.+2      	; 0x45a6 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    45a4:	47 c0       	rjmp	.+142    	; 0x4634 <udc_process_setup+0x4a8>
    45a6:	cd ef       	ldi	r28, 0xFD	; 253
    45a8:	d3 e2       	ldi	r29, 0x23	; 35
    45aa:	8c 81       	ldd	r24, Y+4	; 0x04
    45ac:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    45b0:	8c 81       	ldd	r24, Y+4	; 0x04
    45b2:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    45b6:	07 c0       	rjmp	.+14     	; 0x45c6 <udc_process_setup+0x43a>
    45b8:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    45ba:	05 c0       	rjmp	.+10     	; 0x45c6 <udc_process_setup+0x43a>
    45bc:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    45be:	03 c0       	rjmp	.+6      	; 0x45c6 <udc_process_setup+0x43a>
    45c0:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    45c2:	01 c0       	rjmp	.+2      	; 0x45c6 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    45c8:	90 c0       	rjmp	.+288    	; 0x46ea <udc_process_setup+0x55e>
    45ca:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <udd_g_ctrlreq>
    45ce:	8f 71       	andi	r24, 0x1F	; 31
    45d0:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    45d2:	81 f5       	brne	.+96     	; 0x4634 <udc_process_setup+0x4a8>
    45d4:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    45d8:	88 23       	and	r24, r24
    45da:	09 f4       	brne	.+2      	; 0x45de <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    45dc:	71 c0       	rjmp	.+226    	; 0x46c0 <udc_process_setup+0x534>
    45de:	00 91 01 24 	lds	r16, 0x2401	; 0x802401 <udd_g_ctrlreq+0x4>
    45e2:	10 91 02 24 	lds	r17, 0x2402	; 0x802402 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    45e6:	c0 91 ee 23 	lds	r28, 0x23EE	; 0x8023ee <udc_ptr_conf>
    45ea:	d0 91 ef 23 	lds	r29, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    45ee:	e8 81       	ld	r30, Y
    45f0:	f9 81       	ldd	r31, Y+1	; 0x01
    45f2:	84 81       	ldd	r24, Z+4	; 0x04
    45f4:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    45f6:	08 f0       	brcs	.+2      	; 0x45fa <udc_process_setup+0x46e>
    45f8:	65 c0       	rjmp	.+202    	; 0x46c4 <udc_process_setup+0x538>
    45fa:	60 e0       	ldi	r22, 0x00	; 0
    45fc:	80 2f       	mov	r24, r16
    45fe:	bb dc       	rcall	.-1674   	; 0x3f76 <udc_update_iface_desc>
    4600:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4602:	c1 f0       	breq	.+48     	; 0x4634 <udc_process_setup+0x4a8>
    4604:	f8 01       	movw	r30, r16
    4606:	ff 27       	eor	r31, r31
    4608:	cf 01       	movw	r24, r30
    460a:	88 0f       	add	r24, r24
    460c:	99 1f       	adc	r25, r25
    460e:	ea 81       	ldd	r30, Y+2	; 0x02
    4610:	fb 81       	ldd	r31, Y+3	; 0x03
    4612:	e8 0f       	add	r30, r24
    4614:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4616:	c0 81       	ld	r28, Z
    4618:	d1 81       	ldd	r29, Z+1	; 0x01
    461a:	ee 81       	ldd	r30, Y+6	; 0x06
    461c:	ff 81       	ldd	r31, Y+7	; 0x07
    461e:	19 95       	eicall
    4620:	68 2f       	mov	r22, r24
    4622:	80 2f       	mov	r24, r16
    4624:	a8 dc       	rcall	.-1712   	; 0x3f76 <udc_update_iface_desc>
    4626:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    4628:	29 f0       	breq	.+10     	; 0x4634 <udc_process_setup+0x4a8>
    462a:	ec 81       	ldd	r30, Y+4	; 0x04
    462c:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    462e:	19 95       	eicall
    4630:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    4632:	5b c0       	rjmp	.+182    	; 0x46ea <udc_process_setup+0x55e>
    4634:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <udd_g_ctrlreq>
    4638:	8f 71       	andi	r24, 0x1F	; 31
    463a:	82 30       	cpi	r24, 0x02	; 2
    463c:	09 f0       	breq	.+2      	; 0x4640 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    463e:	44 c0       	rjmp	.+136    	; 0x46c8 <udc_process_setup+0x53c>
    4640:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    4644:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4646:	b1 f1       	breq	.+108    	; 0x46b4 <udc_process_setup+0x528>
    4648:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    464c:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    4650:	ed 91       	ld	r30, X+
    4652:	fc 91       	ld	r31, X
    4654:	11 97       	sbiw	r26, 0x01	; 1
    4656:	84 81       	ldd	r24, Z+4	; 0x04
    4658:	88 23       	and	r24, r24
    465a:	71 f1       	breq	.+92     	; 0x46b8 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    465c:	c0 e0       	ldi	r28, 0x00	; 0
    465e:	ec 2f       	mov	r30, r28
    4660:	f0 e0       	ldi	r31, 0x00	; 0
    4662:	ee 0f       	add	r30, r30
    4664:	ff 1f       	adc	r31, r31
    4666:	12 96       	adiw	r26, 0x02	; 2
    4668:	8d 91       	ld	r24, X+
    466a:	9c 91       	ld	r25, X
    466c:	13 97       	sbiw	r26, 0x03	; 3
    466e:	e8 0f       	add	r30, r24
    4670:	f9 1f       	adc	r31, r25
    4672:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4674:	11 81       	ldd	r17, Z+1	; 0x01
    4676:	d8 01       	movw	r26, r16
    4678:	16 96       	adiw	r26, 0x06	; 6
    467a:	ed 91       	ld	r30, X+
    467c:	fc 91       	ld	r31, X
    467e:	17 97       	sbiw	r26, 0x07	; 7
    4680:	19 95       	eicall
    4682:	68 2f       	mov	r22, r24
    4684:	8c 2f       	mov	r24, r28
    4686:	77 dc       	rcall	.-1810   	; 0x3f76 <udc_update_iface_desc>
    4688:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    468a:	79 f1       	breq	.+94     	; 0x46ea <udc_process_setup+0x55e>
    468c:	d8 01       	movw	r26, r16
    468e:	14 96       	adiw	r26, 0x04	; 4
    4690:	ed 91       	ld	r30, X+
    4692:	fc 91       	ld	r31, X
    4694:	15 97       	sbiw	r26, 0x05	; 5
    4696:	19 95       	eicall
    4698:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    469a:	27 c0       	rjmp	.+78     	; 0x46ea <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    469c:	cf 5f       	subi	r28, 0xFF	; 255
    469e:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    46a2:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    46a6:	ed 91       	ld	r30, X+
    46a8:	fc 91       	ld	r31, X
    46aa:	11 97       	sbiw	r26, 0x01	; 1
    46ac:	94 81       	ldd	r25, Z+4	; 0x04
    46ae:	c9 17       	cp	r28, r25
    46b0:	b0 f2       	brcs	.-84     	; 0x465e <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    46b2:	1b c0       	rjmp	.+54     	; 0x46ea <udc_process_setup+0x55e>
    46b4:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    46b6:	19 c0       	rjmp	.+50     	; 0x46ea <udc_process_setup+0x55e>
    46b8:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    46ba:	17 c0       	rjmp	.+46     	; 0x46ea <udc_process_setup+0x55e>
    46bc:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    46be:	15 c0       	rjmp	.+42     	; 0x46ea <udc_process_setup+0x55e>
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	13 c0       	rjmp	.+38     	; 0x46ea <udc_process_setup+0x55e>
    46c4:	80 e0       	ldi	r24, 0x00	; 0
    46c6:	11 c0       	rjmp	.+34     	; 0x46ea <udc_process_setup+0x55e>
    46c8:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    46ca:	0f c0       	rjmp	.+30     	; 0x46ea <udc_process_setup+0x55e>
    46cc:	98 2f       	mov	r25, r24
    46ce:	90 76       	andi	r25, 0x60	; 96
    46d0:	09 f0       	breq	.+2      	; 0x46d4 <udc_process_setup+0x548>
    46d2:	7b cf       	rjmp	.-266    	; 0x45ca <udc_process_setup+0x43e>
    46d4:	74 cd       	rjmp	.-1304   	; 0x41be <udc_process_setup+0x32>
    46d6:	98 2f       	mov	r25, r24
    46d8:	90 76       	andi	r25, 0x60	; 96
    46da:	09 f0       	breq	.+2      	; 0x46de <udc_process_setup+0x552>
    46dc:	76 cf       	rjmp	.-276    	; 0x45ca <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    46de:	77 ce       	rjmp	.-786    	; 0x43ce <udc_process_setup+0x242>
		str = udc_string_product_name;
    46e0:	3c e0       	ldi	r19, 0x0C	; 12
    46e2:	e4 ec       	ldi	r30, 0xC4	; 196
    46e4:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    46e6:	eb cd       	rjmp	.-1066   	; 0x42be <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	df 91       	pop	r29
    46ec:	cf 91       	pop	r28
    46ee:	1f 91       	pop	r17
    46f0:	0f 91       	pop	r16
    46f2:	08 95       	ret

000046f4 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    46f4:	cf 93       	push	r28
    46f6:	df 93       	push	r29
    46f8:	1f 92       	push	r1
    46fa:	cd b7       	in	r28, 0x3d	; 61
    46fc:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    46fe:	80 91 17 24 	lds	r24, 0x2417	; 0x802417 <stdio_base>
    4702:	90 91 18 24 	lds	r25, 0x2418	; 0x802418 <stdio_base+0x1>
    4706:	e0 91 13 24 	lds	r30, 0x2413	; 0x802413 <ptr_get>
    470a:	f0 91 14 24 	lds	r31, 0x2414	; 0x802414 <ptr_get+0x1>
    470e:	be 01       	movw	r22, r28
    4710:	6f 5f       	subi	r22, 0xFF	; 255
    4712:	7f 4f       	sbci	r23, 0xFF	; 255
    4714:	19 95       	eicall
	return c;
    4716:	89 81       	ldd	r24, Y+1	; 0x01
}
    4718:	08 2e       	mov	r0, r24
    471a:	00 0c       	add	r0, r0
    471c:	99 0b       	sbc	r25, r25
    471e:	0f 90       	pop	r0
    4720:	df 91       	pop	r29
    4722:	cf 91       	pop	r28
    4724:	08 95       	ret

00004726 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    4726:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <stdio_usb_interface_enable>
    472a:	88 23       	and	r24, r24
    472c:	81 f0       	breq	.+32     	; 0x474e <stdio_usb_putchar+0x28>
    472e:	86 2f       	mov	r24, r22
    4730:	08 2e       	mov	r0, r24
    4732:	00 0c       	add	r0, r0
    4734:	99 0b       	sbc	r25, r25
    4736:	e0 db       	rcall	.-2112   	; 0x3ef8 <udi_cdc_putc>
    4738:	21 e0       	ldi	r18, 0x01	; 1
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	89 2b       	or	r24, r25
    473e:	11 f0       	breq	.+4      	; 0x4744 <stdio_usb_putchar+0x1e>
    4740:	20 e0       	ldi	r18, 0x00	; 0
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	88 27       	eor	r24, r24
    4746:	99 27       	eor	r25, r25
    4748:	82 1b       	sub	r24, r18
    474a:	93 0b       	sbc	r25, r19
    474c:	08 95       	ret
    474e:	80 e0       	ldi	r24, 0x00	; 0
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	08 95       	ret

00004754 <stdio_usb_getchar>:
    4754:	cf 93       	push	r28
    4756:	df 93       	push	r29
    4758:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <stdio_usb_interface_enable>
    475c:	81 11       	cpse	r24, r1
    475e:	03 c0       	rjmp	.+6      	; 0x4766 <stdio_usb_getchar+0x12>
    4760:	fb 01       	movw	r30, r22
    4762:	10 82       	st	Z, r1
    4764:	03 c0       	rjmp	.+6      	; 0x476c <stdio_usb_getchar+0x18>
    4766:	eb 01       	movw	r28, r22
    4768:	3f db       	rcall	.-2434   	; 0x3de8 <udi_cdc_getc>
    476a:	88 83       	st	Y, r24
    476c:	df 91       	pop	r29
    476e:	cf 91       	pop	r28
    4770:	08 95       	ret

00004772 <stdio_usb_enable>:
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	80 93 f6 23 	sts	0x23F6, r24	; 0x8023f6 <stdio_usb_interface_enable>
    4778:	08 95       	ret

0000477a <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    477a:	10 92 17 24 	sts	0x2417, r1	; 0x802417 <stdio_base>
    477e:	10 92 18 24 	sts	0x2418, r1	; 0x802418 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    4782:	83 e9       	ldi	r24, 0x93	; 147
    4784:	93 e2       	ldi	r25, 0x23	; 35
    4786:	80 93 15 24 	sts	0x2415, r24	; 0x802415 <ptr_put>
    478a:	90 93 16 24 	sts	0x2416, r25	; 0x802416 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    478e:	8a ea       	ldi	r24, 0xAA	; 170
    4790:	93 e2       	ldi	r25, 0x23	; 35
    4792:	80 93 13 24 	sts	0x2413, r24	; 0x802413 <ptr_get>
    4796:	90 93 14 24 	sts	0x2414, r25	; 0x802414 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    479a:	9c dc       	rcall	.-1736   	; 0x40d4 <udc_start>
    479c:	6a e7       	ldi	r22, 0x7A	; 122
    479e:	73 e2       	ldi	r23, 0x23	; 35
    47a0:	84 ed       	ldi	r24, 0xD4	; 212
    47a2:	93 e2       	ldi	r25, 0x23	; 35
    47a4:	79 c0       	rjmp	.+242    	; 0x4898 <fdevopen>
    47a6:	08 95       	ret

000047a8 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    47a8:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    47aa:	80 91 17 24 	lds	r24, 0x2417	; 0x802417 <stdio_base>
    47ae:	90 91 18 24 	lds	r25, 0x2418	; 0x802418 <stdio_base+0x1>
    47b2:	e0 91 15 24 	lds	r30, 0x2415	; 0x802415 <ptr_put>
    47b6:	f0 91 16 24 	lds	r31, 0x2416	; 0x802416 <ptr_put+0x1>
    47ba:	19 95       	eicall
    47bc:	99 23       	and	r25, r25
    47be:	1c f0       	brlt	.+6      	; 0x47c6 <_write+0x1e>
		return -1;
	}
	return 1;
    47c0:	81 e0       	ldi	r24, 0x01	; 1
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    47c6:	8f ef       	ldi	r24, 0xFF	; 255
    47c8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    47ca:	08 95       	ret

000047cc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    47cc:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    47d0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    47d2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    47d4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    47d8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    47da:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    47de:	08 95       	ret

000047e0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    47e0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    47e2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    47e4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    47e6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    47e8:	60 83       	st	Z, r22
	ret                             // Return to caller
    47ea:	08 95       	ret

000047ec <__udivmodhi4>:
    47ec:	aa 1b       	sub	r26, r26
    47ee:	bb 1b       	sub	r27, r27
    47f0:	51 e1       	ldi	r21, 0x11	; 17
    47f2:	07 c0       	rjmp	.+14     	; 0x4802 <__udivmodhi4_ep>

000047f4 <__udivmodhi4_loop>:
    47f4:	aa 1f       	adc	r26, r26
    47f6:	bb 1f       	adc	r27, r27
    47f8:	a6 17       	cp	r26, r22
    47fa:	b7 07       	cpc	r27, r23
    47fc:	10 f0       	brcs	.+4      	; 0x4802 <__udivmodhi4_ep>
    47fe:	a6 1b       	sub	r26, r22
    4800:	b7 0b       	sbc	r27, r23

00004802 <__udivmodhi4_ep>:
    4802:	88 1f       	adc	r24, r24
    4804:	99 1f       	adc	r25, r25
    4806:	5a 95       	dec	r21
    4808:	a9 f7       	brne	.-22     	; 0x47f4 <__udivmodhi4_loop>
    480a:	80 95       	com	r24
    480c:	90 95       	com	r25
    480e:	bc 01       	movw	r22, r24
    4810:	cd 01       	movw	r24, r26
    4812:	08 95       	ret

00004814 <__udivmodsi4>:
    4814:	a1 e2       	ldi	r26, 0x21	; 33
    4816:	1a 2e       	mov	r1, r26
    4818:	aa 1b       	sub	r26, r26
    481a:	bb 1b       	sub	r27, r27
    481c:	fd 01       	movw	r30, r26
    481e:	0d c0       	rjmp	.+26     	; 0x483a <__udivmodsi4_ep>

00004820 <__udivmodsi4_loop>:
    4820:	aa 1f       	adc	r26, r26
    4822:	bb 1f       	adc	r27, r27
    4824:	ee 1f       	adc	r30, r30
    4826:	ff 1f       	adc	r31, r31
    4828:	a2 17       	cp	r26, r18
    482a:	b3 07       	cpc	r27, r19
    482c:	e4 07       	cpc	r30, r20
    482e:	f5 07       	cpc	r31, r21
    4830:	20 f0       	brcs	.+8      	; 0x483a <__udivmodsi4_ep>
    4832:	a2 1b       	sub	r26, r18
    4834:	b3 0b       	sbc	r27, r19
    4836:	e4 0b       	sbc	r30, r20
    4838:	f5 0b       	sbc	r31, r21

0000483a <__udivmodsi4_ep>:
    483a:	66 1f       	adc	r22, r22
    483c:	77 1f       	adc	r23, r23
    483e:	88 1f       	adc	r24, r24
    4840:	99 1f       	adc	r25, r25
    4842:	1a 94       	dec	r1
    4844:	69 f7       	brne	.-38     	; 0x4820 <__udivmodsi4_loop>
    4846:	60 95       	com	r22
    4848:	70 95       	com	r23
    484a:	80 95       	com	r24
    484c:	90 95       	com	r25
    484e:	9b 01       	movw	r18, r22
    4850:	ac 01       	movw	r20, r24
    4852:	bd 01       	movw	r22, r26
    4854:	cf 01       	movw	r24, r30
    4856:	08 95       	ret

00004858 <__tablejump2__>:
    4858:	ee 0f       	add	r30, r30
    485a:	ff 1f       	adc	r31, r31
    485c:	88 1f       	adc	r24, r24
    485e:	8b bf       	out	0x3b, r24	; 59
    4860:	07 90       	elpm	r0, Z+
    4862:	f6 91       	elpm	r31, Z
    4864:	e0 2d       	mov	r30, r0
    4866:	19 94       	eijmp

00004868 <__umulhisi3>:
    4868:	a2 9f       	mul	r26, r18
    486a:	b0 01       	movw	r22, r0
    486c:	b3 9f       	mul	r27, r19
    486e:	c0 01       	movw	r24, r0
    4870:	a3 9f       	mul	r26, r19
    4872:	70 0d       	add	r23, r0
    4874:	81 1d       	adc	r24, r1
    4876:	11 24       	eor	r1, r1
    4878:	91 1d       	adc	r25, r1
    487a:	b2 9f       	mul	r27, r18
    487c:	70 0d       	add	r23, r0
    487e:	81 1d       	adc	r24, r1
    4880:	11 24       	eor	r1, r1
    4882:	91 1d       	adc	r25, r1
    4884:	08 95       	ret

00004886 <memcpy>:
    4886:	fb 01       	movw	r30, r22
    4888:	dc 01       	movw	r26, r24
    488a:	02 c0       	rjmp	.+4      	; 0x4890 <memcpy+0xa>
    488c:	01 90       	ld	r0, Z+
    488e:	0d 92       	st	X+, r0
    4890:	41 50       	subi	r20, 0x01	; 1
    4892:	50 40       	sbci	r21, 0x00	; 0
    4894:	d8 f7       	brcc	.-10     	; 0x488c <memcpy+0x6>
    4896:	08 95       	ret

00004898 <fdevopen>:
    4898:	0f 93       	push	r16
    489a:	1f 93       	push	r17
    489c:	cf 93       	push	r28
    489e:	df 93       	push	r29
    48a0:	00 97       	sbiw	r24, 0x00	; 0
    48a2:	31 f4       	brne	.+12     	; 0x48b0 <fdevopen+0x18>
    48a4:	61 15       	cp	r22, r1
    48a6:	71 05       	cpc	r23, r1
    48a8:	19 f4       	brne	.+6      	; 0x48b0 <fdevopen+0x18>
    48aa:	80 e0       	ldi	r24, 0x00	; 0
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	39 c0       	rjmp	.+114    	; 0x4922 <fdevopen+0x8a>
    48b0:	8b 01       	movw	r16, r22
    48b2:	ec 01       	movw	r28, r24
    48b4:	6e e0       	ldi	r22, 0x0E	; 14
    48b6:	70 e0       	ldi	r23, 0x00	; 0
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	37 d0       	rcall	.+110    	; 0x492c <calloc>
    48be:	fc 01       	movw	r30, r24
    48c0:	89 2b       	or	r24, r25
    48c2:	99 f3       	breq	.-26     	; 0x48aa <fdevopen+0x12>
    48c4:	80 e8       	ldi	r24, 0x80	; 128
    48c6:	83 83       	std	Z+3, r24	; 0x03
    48c8:	01 15       	cp	r16, r1
    48ca:	11 05       	cpc	r17, r1
    48cc:	71 f0       	breq	.+28     	; 0x48ea <fdevopen+0x52>
    48ce:	02 87       	std	Z+10, r16	; 0x0a
    48d0:	13 87       	std	Z+11, r17	; 0x0b
    48d2:	81 e8       	ldi	r24, 0x81	; 129
    48d4:	83 83       	std	Z+3, r24	; 0x03
    48d6:	80 91 19 24 	lds	r24, 0x2419	; 0x802419 <__iob>
    48da:	90 91 1a 24 	lds	r25, 0x241A	; 0x80241a <__iob+0x1>
    48de:	89 2b       	or	r24, r25
    48e0:	21 f4       	brne	.+8      	; 0x48ea <fdevopen+0x52>
    48e2:	e0 93 19 24 	sts	0x2419, r30	; 0x802419 <__iob>
    48e6:	f0 93 1a 24 	sts	0x241A, r31	; 0x80241a <__iob+0x1>
    48ea:	20 97       	sbiw	r28, 0x00	; 0
    48ec:	c9 f0       	breq	.+50     	; 0x4920 <fdevopen+0x88>
    48ee:	c0 87       	std	Z+8, r28	; 0x08
    48f0:	d1 87       	std	Z+9, r29	; 0x09
    48f2:	83 81       	ldd	r24, Z+3	; 0x03
    48f4:	82 60       	ori	r24, 0x02	; 2
    48f6:	83 83       	std	Z+3, r24	; 0x03
    48f8:	80 91 1b 24 	lds	r24, 0x241B	; 0x80241b <__iob+0x2>
    48fc:	90 91 1c 24 	lds	r25, 0x241C	; 0x80241c <__iob+0x3>
    4900:	89 2b       	or	r24, r25
    4902:	71 f4       	brne	.+28     	; 0x4920 <fdevopen+0x88>
    4904:	e0 93 1b 24 	sts	0x241B, r30	; 0x80241b <__iob+0x2>
    4908:	f0 93 1c 24 	sts	0x241C, r31	; 0x80241c <__iob+0x3>
    490c:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <__iob+0x4>
    4910:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <__iob+0x5>
    4914:	89 2b       	or	r24, r25
    4916:	21 f4       	brne	.+8      	; 0x4920 <fdevopen+0x88>
    4918:	e0 93 1d 24 	sts	0x241D, r30	; 0x80241d <__iob+0x4>
    491c:	f0 93 1e 24 	sts	0x241E, r31	; 0x80241e <__iob+0x5>
    4920:	cf 01       	movw	r24, r30
    4922:	df 91       	pop	r29
    4924:	cf 91       	pop	r28
    4926:	1f 91       	pop	r17
    4928:	0f 91       	pop	r16
    492a:	08 95       	ret

0000492c <calloc>:
    492c:	0f 93       	push	r16
    492e:	1f 93       	push	r17
    4930:	cf 93       	push	r28
    4932:	df 93       	push	r29
    4934:	86 9f       	mul	r24, r22
    4936:	80 01       	movw	r16, r0
    4938:	87 9f       	mul	r24, r23
    493a:	10 0d       	add	r17, r0
    493c:	96 9f       	mul	r25, r22
    493e:	10 0d       	add	r17, r0
    4940:	11 24       	eor	r1, r1
    4942:	c8 01       	movw	r24, r16
    4944:	0d d0       	rcall	.+26     	; 0x4960 <malloc>
    4946:	ec 01       	movw	r28, r24
    4948:	00 97       	sbiw	r24, 0x00	; 0
    494a:	21 f0       	breq	.+8      	; 0x4954 <calloc+0x28>
    494c:	a8 01       	movw	r20, r16
    494e:	60 e0       	ldi	r22, 0x00	; 0
    4950:	70 e0       	ldi	r23, 0x00	; 0
    4952:	27 d1       	rcall	.+590    	; 0x4ba2 <memset>
    4954:	ce 01       	movw	r24, r28
    4956:	df 91       	pop	r29
    4958:	cf 91       	pop	r28
    495a:	1f 91       	pop	r17
    495c:	0f 91       	pop	r16
    495e:	08 95       	ret

00004960 <malloc>:
    4960:	0f 93       	push	r16
    4962:	1f 93       	push	r17
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
    4968:	82 30       	cpi	r24, 0x02	; 2
    496a:	91 05       	cpc	r25, r1
    496c:	10 f4       	brcc	.+4      	; 0x4972 <malloc+0x12>
    496e:	82 e0       	ldi	r24, 0x02	; 2
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	e0 91 21 24 	lds	r30, 0x2421	; 0x802421 <__flp>
    4976:	f0 91 22 24 	lds	r31, 0x2422	; 0x802422 <__flp+0x1>
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	30 e0       	ldi	r19, 0x00	; 0
    497e:	a0 e0       	ldi	r26, 0x00	; 0
    4980:	b0 e0       	ldi	r27, 0x00	; 0
    4982:	30 97       	sbiw	r30, 0x00	; 0
    4984:	19 f1       	breq	.+70     	; 0x49cc <malloc+0x6c>
    4986:	40 81       	ld	r20, Z
    4988:	51 81       	ldd	r21, Z+1	; 0x01
    498a:	02 81       	ldd	r16, Z+2	; 0x02
    498c:	13 81       	ldd	r17, Z+3	; 0x03
    498e:	48 17       	cp	r20, r24
    4990:	59 07       	cpc	r21, r25
    4992:	c8 f0       	brcs	.+50     	; 0x49c6 <malloc+0x66>
    4994:	84 17       	cp	r24, r20
    4996:	95 07       	cpc	r25, r21
    4998:	69 f4       	brne	.+26     	; 0x49b4 <malloc+0x54>
    499a:	10 97       	sbiw	r26, 0x00	; 0
    499c:	31 f0       	breq	.+12     	; 0x49aa <malloc+0x4a>
    499e:	12 96       	adiw	r26, 0x02	; 2
    49a0:	0c 93       	st	X, r16
    49a2:	12 97       	sbiw	r26, 0x02	; 2
    49a4:	13 96       	adiw	r26, 0x03	; 3
    49a6:	1c 93       	st	X, r17
    49a8:	27 c0       	rjmp	.+78     	; 0x49f8 <malloc+0x98>
    49aa:	00 93 21 24 	sts	0x2421, r16	; 0x802421 <__flp>
    49ae:	10 93 22 24 	sts	0x2422, r17	; 0x802422 <__flp+0x1>
    49b2:	22 c0       	rjmp	.+68     	; 0x49f8 <malloc+0x98>
    49b4:	21 15       	cp	r18, r1
    49b6:	31 05       	cpc	r19, r1
    49b8:	19 f0       	breq	.+6      	; 0x49c0 <malloc+0x60>
    49ba:	42 17       	cp	r20, r18
    49bc:	53 07       	cpc	r21, r19
    49be:	18 f4       	brcc	.+6      	; 0x49c6 <malloc+0x66>
    49c0:	9a 01       	movw	r18, r20
    49c2:	bd 01       	movw	r22, r26
    49c4:	ef 01       	movw	r28, r30
    49c6:	df 01       	movw	r26, r30
    49c8:	f8 01       	movw	r30, r16
    49ca:	db cf       	rjmp	.-74     	; 0x4982 <malloc+0x22>
    49cc:	21 15       	cp	r18, r1
    49ce:	31 05       	cpc	r19, r1
    49d0:	f9 f0       	breq	.+62     	; 0x4a10 <malloc+0xb0>
    49d2:	28 1b       	sub	r18, r24
    49d4:	39 0b       	sbc	r19, r25
    49d6:	24 30       	cpi	r18, 0x04	; 4
    49d8:	31 05       	cpc	r19, r1
    49da:	80 f4       	brcc	.+32     	; 0x49fc <malloc+0x9c>
    49dc:	8a 81       	ldd	r24, Y+2	; 0x02
    49de:	9b 81       	ldd	r25, Y+3	; 0x03
    49e0:	61 15       	cp	r22, r1
    49e2:	71 05       	cpc	r23, r1
    49e4:	21 f0       	breq	.+8      	; 0x49ee <malloc+0x8e>
    49e6:	fb 01       	movw	r30, r22
    49e8:	82 83       	std	Z+2, r24	; 0x02
    49ea:	93 83       	std	Z+3, r25	; 0x03
    49ec:	04 c0       	rjmp	.+8      	; 0x49f6 <malloc+0x96>
    49ee:	80 93 21 24 	sts	0x2421, r24	; 0x802421 <__flp>
    49f2:	90 93 22 24 	sts	0x2422, r25	; 0x802422 <__flp+0x1>
    49f6:	fe 01       	movw	r30, r28
    49f8:	32 96       	adiw	r30, 0x02	; 2
    49fa:	44 c0       	rjmp	.+136    	; 0x4a84 <malloc+0x124>
    49fc:	fe 01       	movw	r30, r28
    49fe:	e2 0f       	add	r30, r18
    4a00:	f3 1f       	adc	r31, r19
    4a02:	81 93       	st	Z+, r24
    4a04:	91 93       	st	Z+, r25
    4a06:	22 50       	subi	r18, 0x02	; 2
    4a08:	31 09       	sbc	r19, r1
    4a0a:	28 83       	st	Y, r18
    4a0c:	39 83       	std	Y+1, r19	; 0x01
    4a0e:	3a c0       	rjmp	.+116    	; 0x4a84 <malloc+0x124>
    4a10:	20 91 1f 24 	lds	r18, 0x241F	; 0x80241f <__brkval>
    4a14:	30 91 20 24 	lds	r19, 0x2420	; 0x802420 <__brkval+0x1>
    4a18:	23 2b       	or	r18, r19
    4a1a:	41 f4       	brne	.+16     	; 0x4a2c <malloc+0xcc>
    4a1c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4a20:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4a24:	20 93 1f 24 	sts	0x241F, r18	; 0x80241f <__brkval>
    4a28:	30 93 20 24 	sts	0x2420, r19	; 0x802420 <__brkval+0x1>
    4a2c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4a30:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4a34:	21 15       	cp	r18, r1
    4a36:	31 05       	cpc	r19, r1
    4a38:	41 f4       	brne	.+16     	; 0x4a4a <malloc+0xea>
    4a3a:	2d b7       	in	r18, 0x3d	; 61
    4a3c:	3e b7       	in	r19, 0x3e	; 62
    4a3e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4a42:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4a46:	24 1b       	sub	r18, r20
    4a48:	35 0b       	sbc	r19, r21
    4a4a:	e0 91 1f 24 	lds	r30, 0x241F	; 0x80241f <__brkval>
    4a4e:	f0 91 20 24 	lds	r31, 0x2420	; 0x802420 <__brkval+0x1>
    4a52:	e2 17       	cp	r30, r18
    4a54:	f3 07       	cpc	r31, r19
    4a56:	a0 f4       	brcc	.+40     	; 0x4a80 <malloc+0x120>
    4a58:	2e 1b       	sub	r18, r30
    4a5a:	3f 0b       	sbc	r19, r31
    4a5c:	28 17       	cp	r18, r24
    4a5e:	39 07       	cpc	r19, r25
    4a60:	78 f0       	brcs	.+30     	; 0x4a80 <malloc+0x120>
    4a62:	ac 01       	movw	r20, r24
    4a64:	4e 5f       	subi	r20, 0xFE	; 254
    4a66:	5f 4f       	sbci	r21, 0xFF	; 255
    4a68:	24 17       	cp	r18, r20
    4a6a:	35 07       	cpc	r19, r21
    4a6c:	48 f0       	brcs	.+18     	; 0x4a80 <malloc+0x120>
    4a6e:	4e 0f       	add	r20, r30
    4a70:	5f 1f       	adc	r21, r31
    4a72:	40 93 1f 24 	sts	0x241F, r20	; 0x80241f <__brkval>
    4a76:	50 93 20 24 	sts	0x2420, r21	; 0x802420 <__brkval+0x1>
    4a7a:	81 93       	st	Z+, r24
    4a7c:	91 93       	st	Z+, r25
    4a7e:	02 c0       	rjmp	.+4      	; 0x4a84 <malloc+0x124>
    4a80:	e0 e0       	ldi	r30, 0x00	; 0
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	cf 01       	movw	r24, r30
    4a86:	df 91       	pop	r29
    4a88:	cf 91       	pop	r28
    4a8a:	1f 91       	pop	r17
    4a8c:	0f 91       	pop	r16
    4a8e:	08 95       	ret

00004a90 <free>:
    4a90:	cf 93       	push	r28
    4a92:	df 93       	push	r29
    4a94:	00 97       	sbiw	r24, 0x00	; 0
    4a96:	09 f4       	brne	.+2      	; 0x4a9a <free+0xa>
    4a98:	81 c0       	rjmp	.+258    	; 0x4b9c <free+0x10c>
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	32 97       	sbiw	r30, 0x02	; 2
    4a9e:	12 82       	std	Z+2, r1	; 0x02
    4aa0:	13 82       	std	Z+3, r1	; 0x03
    4aa2:	a0 91 21 24 	lds	r26, 0x2421	; 0x802421 <__flp>
    4aa6:	b0 91 22 24 	lds	r27, 0x2422	; 0x802422 <__flp+0x1>
    4aaa:	10 97       	sbiw	r26, 0x00	; 0
    4aac:	81 f4       	brne	.+32     	; 0x4ace <free+0x3e>
    4aae:	20 81       	ld	r18, Z
    4ab0:	31 81       	ldd	r19, Z+1	; 0x01
    4ab2:	82 0f       	add	r24, r18
    4ab4:	93 1f       	adc	r25, r19
    4ab6:	20 91 1f 24 	lds	r18, 0x241F	; 0x80241f <__brkval>
    4aba:	30 91 20 24 	lds	r19, 0x2420	; 0x802420 <__brkval+0x1>
    4abe:	28 17       	cp	r18, r24
    4ac0:	39 07       	cpc	r19, r25
    4ac2:	51 f5       	brne	.+84     	; 0x4b18 <free+0x88>
    4ac4:	e0 93 1f 24 	sts	0x241F, r30	; 0x80241f <__brkval>
    4ac8:	f0 93 20 24 	sts	0x2420, r31	; 0x802420 <__brkval+0x1>
    4acc:	67 c0       	rjmp	.+206    	; 0x4b9c <free+0x10c>
    4ace:	ed 01       	movw	r28, r26
    4ad0:	20 e0       	ldi	r18, 0x00	; 0
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	ce 17       	cp	r28, r30
    4ad6:	df 07       	cpc	r29, r31
    4ad8:	40 f4       	brcc	.+16     	; 0x4aea <free+0x5a>
    4ada:	4a 81       	ldd	r20, Y+2	; 0x02
    4adc:	5b 81       	ldd	r21, Y+3	; 0x03
    4ade:	9e 01       	movw	r18, r28
    4ae0:	41 15       	cp	r20, r1
    4ae2:	51 05       	cpc	r21, r1
    4ae4:	f1 f0       	breq	.+60     	; 0x4b22 <free+0x92>
    4ae6:	ea 01       	movw	r28, r20
    4ae8:	f5 cf       	rjmp	.-22     	; 0x4ad4 <free+0x44>
    4aea:	c2 83       	std	Z+2, r28	; 0x02
    4aec:	d3 83       	std	Z+3, r29	; 0x03
    4aee:	40 81       	ld	r20, Z
    4af0:	51 81       	ldd	r21, Z+1	; 0x01
    4af2:	84 0f       	add	r24, r20
    4af4:	95 1f       	adc	r25, r21
    4af6:	c8 17       	cp	r28, r24
    4af8:	d9 07       	cpc	r29, r25
    4afa:	59 f4       	brne	.+22     	; 0x4b12 <free+0x82>
    4afc:	88 81       	ld	r24, Y
    4afe:	99 81       	ldd	r25, Y+1	; 0x01
    4b00:	84 0f       	add	r24, r20
    4b02:	95 1f       	adc	r25, r21
    4b04:	02 96       	adiw	r24, 0x02	; 2
    4b06:	80 83       	st	Z, r24
    4b08:	91 83       	std	Z+1, r25	; 0x01
    4b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b0e:	82 83       	std	Z+2, r24	; 0x02
    4b10:	93 83       	std	Z+3, r25	; 0x03
    4b12:	21 15       	cp	r18, r1
    4b14:	31 05       	cpc	r19, r1
    4b16:	29 f4       	brne	.+10     	; 0x4b22 <free+0x92>
    4b18:	e0 93 21 24 	sts	0x2421, r30	; 0x802421 <__flp>
    4b1c:	f0 93 22 24 	sts	0x2422, r31	; 0x802422 <__flp+0x1>
    4b20:	3d c0       	rjmp	.+122    	; 0x4b9c <free+0x10c>
    4b22:	e9 01       	movw	r28, r18
    4b24:	ea 83       	std	Y+2, r30	; 0x02
    4b26:	fb 83       	std	Y+3, r31	; 0x03
    4b28:	49 91       	ld	r20, Y+
    4b2a:	59 91       	ld	r21, Y+
    4b2c:	c4 0f       	add	r28, r20
    4b2e:	d5 1f       	adc	r29, r21
    4b30:	ec 17       	cp	r30, r28
    4b32:	fd 07       	cpc	r31, r29
    4b34:	61 f4       	brne	.+24     	; 0x4b4e <free+0xbe>
    4b36:	80 81       	ld	r24, Z
    4b38:	91 81       	ldd	r25, Z+1	; 0x01
    4b3a:	84 0f       	add	r24, r20
    4b3c:	95 1f       	adc	r25, r21
    4b3e:	02 96       	adiw	r24, 0x02	; 2
    4b40:	e9 01       	movw	r28, r18
    4b42:	88 83       	st	Y, r24
    4b44:	99 83       	std	Y+1, r25	; 0x01
    4b46:	82 81       	ldd	r24, Z+2	; 0x02
    4b48:	93 81       	ldd	r25, Z+3	; 0x03
    4b4a:	8a 83       	std	Y+2, r24	; 0x02
    4b4c:	9b 83       	std	Y+3, r25	; 0x03
    4b4e:	e0 e0       	ldi	r30, 0x00	; 0
    4b50:	f0 e0       	ldi	r31, 0x00	; 0
    4b52:	12 96       	adiw	r26, 0x02	; 2
    4b54:	8d 91       	ld	r24, X+
    4b56:	9c 91       	ld	r25, X
    4b58:	13 97       	sbiw	r26, 0x03	; 3
    4b5a:	00 97       	sbiw	r24, 0x00	; 0
    4b5c:	19 f0       	breq	.+6      	; 0x4b64 <free+0xd4>
    4b5e:	fd 01       	movw	r30, r26
    4b60:	dc 01       	movw	r26, r24
    4b62:	f7 cf       	rjmp	.-18     	; 0x4b52 <free+0xc2>
    4b64:	8d 91       	ld	r24, X+
    4b66:	9c 91       	ld	r25, X
    4b68:	11 97       	sbiw	r26, 0x01	; 1
    4b6a:	9d 01       	movw	r18, r26
    4b6c:	2e 5f       	subi	r18, 0xFE	; 254
    4b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b70:	82 0f       	add	r24, r18
    4b72:	93 1f       	adc	r25, r19
    4b74:	20 91 1f 24 	lds	r18, 0x241F	; 0x80241f <__brkval>
    4b78:	30 91 20 24 	lds	r19, 0x2420	; 0x802420 <__brkval+0x1>
    4b7c:	28 17       	cp	r18, r24
    4b7e:	39 07       	cpc	r19, r25
    4b80:	69 f4       	brne	.+26     	; 0x4b9c <free+0x10c>
    4b82:	30 97       	sbiw	r30, 0x00	; 0
    4b84:	29 f4       	brne	.+10     	; 0x4b90 <free+0x100>
    4b86:	10 92 21 24 	sts	0x2421, r1	; 0x802421 <__flp>
    4b8a:	10 92 22 24 	sts	0x2422, r1	; 0x802422 <__flp+0x1>
    4b8e:	02 c0       	rjmp	.+4      	; 0x4b94 <free+0x104>
    4b90:	12 82       	std	Z+2, r1	; 0x02
    4b92:	13 82       	std	Z+3, r1	; 0x03
    4b94:	a0 93 1f 24 	sts	0x241F, r26	; 0x80241f <__brkval>
    4b98:	b0 93 20 24 	sts	0x2420, r27	; 0x802420 <__brkval+0x1>
    4b9c:	df 91       	pop	r29
    4b9e:	cf 91       	pop	r28
    4ba0:	08 95       	ret

00004ba2 <memset>:
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	01 c0       	rjmp	.+2      	; 0x4ba8 <memset+0x6>
    4ba6:	6d 93       	st	X+, r22
    4ba8:	41 50       	subi	r20, 0x01	; 1
    4baa:	50 40       	sbci	r21, 0x00	; 0
    4bac:	e0 f7       	brcc	.-8      	; 0x4ba6 <memset+0x4>
    4bae:	08 95       	ret

00004bb0 <_exit>:
    4bb0:	f8 94       	cli

00004bb2 <__stop_program>:
    4bb2:	ff cf       	rjmp	.-2      	; 0x4bb2 <__stop_program>
