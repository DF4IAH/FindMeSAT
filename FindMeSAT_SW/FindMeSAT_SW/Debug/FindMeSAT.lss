
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00802000  00005378  0000540c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002dc  008020c6  008020c6  000054d2  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000054d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00005504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000730  00000000  00000000  00005548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ed9d  00000000  00000000  00005c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000556e  00000000  00000000  00014a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008c1e  00000000  00000000  00019f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002108  00000000  00000000  00022ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003b197  00000000  00000000  00024cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000066e9  00000000  00000000  0005fe43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000718  00000000  00000000  0006652c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003d8f  00000000  00000000  00066c44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 05 11 	jmp	0x220a	; 0x220a <__ctors_end>
       4:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
       8:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
       c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      10:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      14:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      18:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__vector_6>
      1c:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__vector_7>
      20:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__vector_8>
      24:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__vector_9>
      28:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      2c:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__vector_11>
      30:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      34:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__vector_13>
      38:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__vector_14>
      3c:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__vector_15>
      40:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__vector_16>
      44:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__vector_17>
      48:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__vector_18>
      4c:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__vector_19>
      50:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__vector_20>
      54:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__vector_21>
      58:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__vector_22>
      5c:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__vector_23>
      60:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      64:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      68:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      6c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      70:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      74:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      78:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      7c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      80:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      84:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      88:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      8c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      90:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      94:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      98:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      9c:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__vector_39>
      a0:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__vector_40>
      a4:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__vector_41>
      a8:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__vector_42>
      ac:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      b0:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      b4:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      b8:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <__vector_46>
      bc:	0c 94 26 18 	jmp	0x304c	; 0x304c <__vector_47>
      c0:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__vector_48>
      c4:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__vector_49>
      c8:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__vector_50>
      cc:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__vector_51>
      d0:	0c 94 07 19 	jmp	0x320e	; 0x320e <__vector_52>
      d4:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__vector_53>
      d8:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__vector_54>
      dc:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__vector_55>
      e0:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__vector_56>
      e4:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      e8:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      ec:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      f0:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      f4:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      f8:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
      fc:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     100:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     104:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     108:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     10c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     110:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     114:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     118:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     11c:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__vector_71>
     120:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__vector_72>
     124:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__vector_73>
     128:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__vector_74>
     12c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     130:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     134:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__vector_77>
     138:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__vector_78>
     13c:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__vector_79>
     140:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__vector_80>
     144:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__vector_81>
     148:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__vector_82>
     14c:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__vector_83>
     150:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__vector_84>
     154:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__vector_85>
     158:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__vector_86>
     15c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     160:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     164:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     168:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     16c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     170:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     174:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     178:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     17c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     180:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     184:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     188:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     18c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     190:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     194:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     198:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     19c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1a0:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1a4:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1a8:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1ac:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1b0:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__vector_108>
     1b4:	0c 94 15 1a 	jmp	0x342a	; 0x342a <__vector_109>
     1b8:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__vector_110>
     1bc:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__vector_111>
     1c0:	0c 94 9c 1a 	jmp	0x3538	; 0x3538 <__vector_112>
     1c4:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__vector_113>
     1c8:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1cc:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1d0:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1d4:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1d8:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1dc:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1e0:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1e4:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1e8:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1ec:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1f0:	0c 94 26 11 	jmp	0x224c	; 0x224c <__bad_interrupt>
     1f4:	0c 94 46 21 	jmp	0x428c	; 0x428c <__vector_125>
     1f8:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__vector_126>
     1fc:	d9 1c       	adc	r13, r9
     1fe:	dc 1c       	adc	r13, r12
     200:	df 1c       	adc	r13, r15
     202:	e2 1c       	adc	r14, r2
     204:	e5 1c       	adc	r14, r5
     206:	e8 1c       	adc	r14, r8
     208:	eb 1c       	adc	r14, r11

0000020a <PM_SINE>:
     20a:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     21a:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     22a:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     23a:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     24a:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     25a:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     26a:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     27a:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     28a:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     29a:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     2aa:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     2ba:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     2ca:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     2da:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     2ea:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     2fa:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     30a:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     31a:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     32a:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     33a:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     34a:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     35a:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     36a:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     37a:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     38a:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     39a:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     3aa:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     3ba:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     3ca:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     3da:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     3ea:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     3fa:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     40a:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     41a:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     42a:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     43a:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     44a:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     45a:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     46a:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     47a:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     48a:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     49a:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     4aa:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
     4ba:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
     4ca:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
     4da:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
     4ea:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
     4fa:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
     50a:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
     51a:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
     52a:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
     53a:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
     54a:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
     55a:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
     56a:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
     57a:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
     58a:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
     59a:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
     5aa:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
     5ba:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
     5ca:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
     5da:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
     5ea:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
     5fa:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
     60a:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
     61a:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
     62a:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
     63a:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
     64a:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
     65a:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
     66a:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
     67a:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
     68a:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
     69a:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
     6aa:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
     6ba:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
     6ca:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
     6da:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
     6ea:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
     6fa:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
     70a:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
     71a:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
     72a:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
     73a:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
     74a:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
     75a:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
     76a:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
     77a:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
     78a:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
     79a:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
     7aa:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
     7ba:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
     7ca:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
     7da:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
     7ea:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
     7fa:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
     80a:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
     81a:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
     82a:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
     83a:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
     84a:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
     85a:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
     86a:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
     87a:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
     88a:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
     89a:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
     8aa:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
     8ba:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
     8ca:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
     8da:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
     8ea:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
     8fa:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
     90a:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
     91a:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
     92a:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
     93a:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
     94a:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
     95a:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
     96a:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
     97a:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
     98a:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
     99a:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
     9aa:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
     9ba:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
     9ca:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
     9da:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
     9ea:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
     9fa:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
     a0a:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
     a1a:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
     a2a:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
     a3a:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
     a4a:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
     a5a:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
     a6a:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
     a7a:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
     a8a:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
     a9a:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
     aaa:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
     aba:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
     aca:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
     ada:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
     aea:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
     afa:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
     b0a:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
     b1a:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
     b2a:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
     b3a:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
     b4a:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
     b5a:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
     b6a:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
     b7a:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
     b8a:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
     b9a:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
     baa:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
     bba:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
     bca:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
     bda:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
     bea:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
     bfa:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
     c0a:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
     c1a:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
     c2a:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
     c3a:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
     c4a:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
     c5a:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
     c6a:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
     c7a:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
     c8a:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
     c9a:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
     caa:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
     cba:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
     cca:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
     cda:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
     cea:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
     cfa:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
     d0a:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
     d1a:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
     d2a:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
     d3a:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
     d4a:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
     d5a:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
     d6a:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
     d7a:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
     d8a:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
     d9a:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
     daa:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
     dba:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
     dca:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
     dda:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
     dea:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
     dfa:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
     e0a:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
     e1a:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
     e2a:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
     e3a:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
     e4a:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
     e5a:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
     e6a:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
     e7a:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
     e8a:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
     e9a:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
     eaa:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
     eba:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
     eca:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
     eda:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
     eea:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
     efa:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
     f0a:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
     f1a:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
     f2a:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
     f3a:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
     f4a:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
     f5a:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
     f6a:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
     f7a:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
     f8a:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
     f9a:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
     faa:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
     fba:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
     fca:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
     fda:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
     fea:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
     ffa:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    100a:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    101a:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    102a:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    103a:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    104a:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    105a:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    106a:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    107a:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    108a:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    109a:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    10aa:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    10ba:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    10ca:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    10da:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    10ea:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    10fa:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    110a:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    111a:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    112a:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    113a:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    114a:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    115a:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    116a:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    117a:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    118a:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    119a:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    11aa:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    11ba:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    11ca:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    11da:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    11ea:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    11fa:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    120a:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    121a:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    122a:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    123a:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    124a:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    125a:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    126a:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    127a:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    128a:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    129a:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    12aa:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    12ba:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    12ca:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    12da:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    12ea:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    12fa:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    130a:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    131a:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    132a:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    133a:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    134a:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    135a:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    136a:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    137a:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    138a:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    139a:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    13aa:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    13ba:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    13ca:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    13da:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    13ea:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    13fa:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    140a:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    141a:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    142a:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    143a:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    144a:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    145a:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    146a:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    147a:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    148a:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    149a:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    14aa:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    14ba:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    14ca:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    14da:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    14ea:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    14fa:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    150a:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    151a:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    152a:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    153a:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    154a:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    155a:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    156a:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    157a:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    158a:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    159a:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    15aa:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    15ba:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    15ca:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    15da:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    15ea:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    15fa:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    160a:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    161a:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    162a:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    163a:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    164a:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    165a:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    166a:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    167a:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    168a:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    169a:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    16aa:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    16ba:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    16ca:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    16da:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    16ea:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    16fa:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    170a:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    171a:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    172a:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    173a:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    174a:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    175a:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    176a:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    177a:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    178a:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    179a:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    17aa:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    17ba:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    17ca:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    17da:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    17ea:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    17fa:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    180a:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    181a:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    182a:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    183a:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    184a:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    185a:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    186a:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    187a:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    188a:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    189a:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    18aa:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    18ba:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    18ca:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    18da:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    18ea:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    18fa:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    190a:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    191a:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    192a:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    193a:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    194a:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    195a:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    196a:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    197a:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    198a:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    199a:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    19aa:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    19ba:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    19ca:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    19da:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    19ea:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    19fa:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    1a0a:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    1a1a:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    1a2a:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    1a3a:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    1a4a:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    1a5a:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    1a6a:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    1a7a:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    1a8a:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    1a9a:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    1aaa:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    1aba:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    1aca:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    1ada:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    1aea:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    1afa:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    1b0a:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    1b1a:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    1b2a:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    1b3a:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    1b4a:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    1b5a:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    1b6a:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    1b7a:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    1b8a:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    1b9a:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    1baa:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    1bba:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    1bca:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    1bda:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    1bea:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    1bfa:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    1c0a:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    1c1a:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    1c2a:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    1c3a:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    1c4a:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    1c5a:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    1c6a:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    1c7a:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    1c8a:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    1c9a:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    1caa:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    1cba:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    1cca:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    1cda:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    1cea:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    1cfa:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    1d0a:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    1d1a:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    1d2a:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    1d3a:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    1d4a:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    1d5a:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    1d6a:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    1d7a:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    1d8a:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    1d9a:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    1daa:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    1dba:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    1dca:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    1dda:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    1dea:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    1dfa:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    1e0a:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    1e1a:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    1e2a:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    1e3a:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    1e4a:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    1e5a:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    1e6a:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    1e7a:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    1e8a:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    1e9a:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    1eaa:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    1eba:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    1eca:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    1eda:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    1eea:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    1efa:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    1f0a:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    1f1a:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    1f2a:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    1f3a:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    1f4a:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    1f5a:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    1f6a:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    1f7a:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    1f8a:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    1f9a:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    1faa:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    1fba:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    1fca:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    1fda:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    1fea:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    1ffa:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    200a:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    201a:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    202a:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    203a:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    204a:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    205a:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    206a:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    207a:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    208a:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    209a:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    20aa:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    20ba:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    20ca:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    20da:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    20ea:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    20fa:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    210a:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    211a:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    212a:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    213a:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    214a:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    215a:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    216a:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    217a:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    218a:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    219a:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    21aa:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    21ba:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    21ca:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    21da:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    21ea:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    21fa:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

0000220a <__ctors_end>:
    220a:	11 24       	eor	r1, r1
    220c:	1f be       	out	0x3f, r1	; 63
    220e:	cf ef       	ldi	r28, 0xFF	; 255
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	df e5       	ldi	r29, 0x5F	; 95
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	00 e0       	ldi	r16, 0x00	; 0
    2218:	0c bf       	out	0x3c, r16	; 60

0000221a <__do_copy_data>:
    221a:	10 e2       	ldi	r17, 0x20	; 32
    221c:	a0 e0       	ldi	r26, 0x00	; 0
    221e:	b0 e2       	ldi	r27, 0x20	; 32
    2220:	e8 e7       	ldi	r30, 0x78	; 120
    2222:	f3 e5       	ldi	r31, 0x53	; 83
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	0b bf       	out	0x3b, r16	; 59
    2228:	02 c0       	rjmp	.+4      	; 0x222e <__do_copy_data+0x14>
    222a:	07 90       	elpm	r0, Z+
    222c:	0d 92       	st	X+, r0
    222e:	a6 3c       	cpi	r26, 0xC6	; 198
    2230:	b1 07       	cpc	r27, r17
    2232:	d9 f7       	brne	.-10     	; 0x222a <__do_copy_data+0x10>

00002234 <__do_clear_bss>:
    2234:	23 e2       	ldi	r18, 0x23	; 35
    2236:	a6 ec       	ldi	r26, 0xC6	; 198
    2238:	b0 e2       	ldi	r27, 0x20	; 32
    223a:	01 c0       	rjmp	.+2      	; 0x223e <.do_clear_bss_start>

0000223c <.do_clear_bss_loop>:
    223c:	1d 92       	st	X+, r1

0000223e <.do_clear_bss_start>:
    223e:	a2 3a       	cpi	r26, 0xA2	; 162
    2240:	b2 07       	cpc	r27, r18
    2242:	e1 f7       	brne	.-8      	; 0x223c <.do_clear_bss_loop>
    2244:	0e 94 06 23 	call	0x460c	; 0x460c <main>
    2248:	0c 94 ba 29 	jmp	0x5374	; 0x5374 <_exit>

0000224c <__bad_interrupt>:
    224c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002250 <dma_interrupt>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	48 2f       	mov	r20, r24
    2256:	50 e0       	ldi	r21, 0x00	; 0
    2258:	fa 01       	movw	r30, r20
    225a:	71 96       	adiw	r30, 0x11	; 17
    225c:	e2 95       	swap	r30
    225e:	f2 95       	swap	r31
    2260:	f0 7f       	andi	r31, 0xF0	; 240
    2262:	fe 27       	eor	r31, r30
    2264:	e0 7f       	andi	r30, 0xF0	; 240
    2266:	fe 27       	eor	r31, r30
    2268:	a0 e0       	ldi	r26, 0x00	; 0
    226a:	b1 e0       	ldi	r27, 0x01	; 1
    226c:	14 96       	adiw	r26, 0x04	; 4
    226e:	9c 91       	ld	r25, X
    2270:	14 97       	sbiw	r26, 0x04	; 4
    2272:	13 96       	adiw	r26, 0x03	; 3
    2274:	6c 91       	ld	r22, X
    2276:	da 01       	movw	r26, r20
    2278:	14 96       	adiw	r26, 0x04	; 4
    227a:	21 e0       	ldi	r18, 0x01	; 1
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	e9 01       	movw	r28, r18
    2280:	08 2e       	mov	r0, r24
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <dma_interrupt+0x38>
    2284:	cc 0f       	add	r28, r28
    2286:	dd 1f       	adc	r29, r29
    2288:	0a 94       	dec	r0
    228a:	e2 f7       	brpl	.-8      	; 0x2284 <dma_interrupt+0x34>
    228c:	0a 2e       	mov	r0, r26
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <dma_interrupt+0x44>
    2290:	22 0f       	add	r18, r18
    2292:	33 1f       	adc	r19, r19
    2294:	0a 94       	dec	r0
    2296:	e2 f7       	brpl	.-8      	; 0x2290 <dma_interrupt+0x40>
    2298:	2c 2b       	or	r18, r28
    229a:	62 23       	and	r22, r18
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	eb 01       	movw	r28, r22
    22a0:	0a 2e       	mov	r0, r26
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <dma_interrupt+0x58>
    22a4:	d5 95       	asr	r29
    22a6:	c7 95       	ror	r28
    22a8:	0a 94       	dec	r0
    22aa:	e2 f7       	brpl	.-8      	; 0x22a4 <dma_interrupt+0x54>
    22ac:	c0 fd       	sbrc	r28, 0
    22ae:	1a c0       	rjmp	.+52     	; 0x22e4 <dma_interrupt+0x94>
    22b0:	08 2e       	mov	r0, r24
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <dma_interrupt+0x68>
    22b4:	75 95       	asr	r23
    22b6:	67 95       	ror	r22
    22b8:	0a 94       	dec	r0
    22ba:	e2 f7       	brpl	.-8      	; 0x22b4 <dma_interrupt+0x64>
    22bc:	60 fd       	sbrc	r22, 0
    22be:	14 c0       	rjmp	.+40     	; 0x22e8 <dma_interrupt+0x98>
    22c0:	29 23       	and	r18, r25
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	b9 01       	movw	r22, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <dma_interrupt+0x7c>
    22c8:	75 95       	asr	r23
    22ca:	67 95       	ror	r22
    22cc:	aa 95       	dec	r26
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <dma_interrupt+0x78>
    22d0:	60 fd       	sbrc	r22, 0
    22d2:	0c c0       	rjmp	.+24     	; 0x22ec <dma_interrupt+0x9c>
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <dma_interrupt+0x8a>
    22d6:	35 95       	asr	r19
    22d8:	27 95       	ror	r18
    22da:	8a 95       	dec	r24
    22dc:	e2 f7       	brpl	.-8      	; 0x22d6 <dma_interrupt+0x86>
    22de:	82 2f       	mov	r24, r18
    22e0:	81 70       	andi	r24, 0x01	; 1
    22e2:	05 c0       	rjmp	.+10     	; 0x22ee <dma_interrupt+0x9e>
    22e4:	84 e0       	ldi	r24, 0x04	; 4
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <dma_interrupt+0x9e>
    22e8:	83 e0       	ldi	r24, 0x03	; 3
    22ea:	01 c0       	rjmp	.+2      	; 0x22ee <dma_interrupt+0x9e>
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	91 81       	ldd	r25, Z+1	; 0x01
    22f0:	90 63       	ori	r25, 0x30	; 48
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	44 0f       	add	r20, r20
    22f6:	55 1f       	adc	r21, r21
    22f8:	fa 01       	movw	r30, r20
    22fa:	e2 58       	subi	r30, 0x82	; 130
    22fc:	fc 4d       	sbci	r31, 0xDC	; 220
    22fe:	01 90       	ld	r0, Z+
    2300:	f0 81       	ld	r31, Z
    2302:	e0 2d       	mov	r30, r0
    2304:	30 97       	sbiw	r30, 0x00	; 0
    2306:	09 f0       	breq	.+2      	; 0x230a <dma_interrupt+0xba>
    2308:	19 95       	eicall
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	08 95       	ret

00002310 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    2310:	1f 92       	push	r1
    2312:	0f 92       	push	r0
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	0f 92       	push	r0
    2318:	11 24       	eor	r1, r1
    231a:	0b b6       	in	r0, 0x3b	; 59
    231c:	0f 92       	push	r0
    231e:	2f 93       	push	r18
    2320:	3f 93       	push	r19
    2322:	4f 93       	push	r20
    2324:	5f 93       	push	r21
    2326:	6f 93       	push	r22
    2328:	7f 93       	push	r23
    232a:	8f 93       	push	r24
    232c:	9f 93       	push	r25
    232e:	af 93       	push	r26
    2330:	bf 93       	push	r27
    2332:	ef 93       	push	r30
    2334:	ff 93       	push	r31
	dma_interrupt(0);
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	8b df       	rcall	.-234    	; 0x2250 <dma_interrupt>
}
    233a:	ff 91       	pop	r31
    233c:	ef 91       	pop	r30
    233e:	bf 91       	pop	r27
    2340:	af 91       	pop	r26
    2342:	9f 91       	pop	r25
    2344:	8f 91       	pop	r24
    2346:	7f 91       	pop	r23
    2348:	6f 91       	pop	r22
    234a:	5f 91       	pop	r21
    234c:	4f 91       	pop	r20
    234e:	3f 91       	pop	r19
    2350:	2f 91       	pop	r18
    2352:	0f 90       	pop	r0
    2354:	0b be       	out	0x3b, r0	; 59
    2356:	0f 90       	pop	r0
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	0f 90       	pop	r0
    235c:	1f 90       	pop	r1
    235e:	18 95       	reti

00002360 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    2360:	1f 92       	push	r1
    2362:	0f 92       	push	r0
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	0f 92       	push	r0
    2368:	11 24       	eor	r1, r1
    236a:	0b b6       	in	r0, 0x3b	; 59
    236c:	0f 92       	push	r0
    236e:	2f 93       	push	r18
    2370:	3f 93       	push	r19
    2372:	4f 93       	push	r20
    2374:	5f 93       	push	r21
    2376:	6f 93       	push	r22
    2378:	7f 93       	push	r23
    237a:	8f 93       	push	r24
    237c:	9f 93       	push	r25
    237e:	af 93       	push	r26
    2380:	bf 93       	push	r27
    2382:	ef 93       	push	r30
    2384:	ff 93       	push	r31
	dma_interrupt(1);
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	63 df       	rcall	.-314    	; 0x2250 <dma_interrupt>
}
    238a:	ff 91       	pop	r31
    238c:	ef 91       	pop	r30
    238e:	bf 91       	pop	r27
    2390:	af 91       	pop	r26
    2392:	9f 91       	pop	r25
    2394:	8f 91       	pop	r24
    2396:	7f 91       	pop	r23
    2398:	6f 91       	pop	r22
    239a:	5f 91       	pop	r21
    239c:	4f 91       	pop	r20
    239e:	3f 91       	pop	r19
    23a0:	2f 91       	pop	r18
    23a2:	0f 90       	pop	r0
    23a4:	0b be       	out	0x3b, r0	; 59
    23a6:	0f 90       	pop	r0
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	0f 90       	pop	r0
    23ac:	1f 90       	pop	r1
    23ae:	18 95       	reti

000023b0 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    23b0:	1f 92       	push	r1
    23b2:	0f 92       	push	r0
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	0f 92       	push	r0
    23b8:	11 24       	eor	r1, r1
    23ba:	0b b6       	in	r0, 0x3b	; 59
    23bc:	0f 92       	push	r0
    23be:	2f 93       	push	r18
    23c0:	3f 93       	push	r19
    23c2:	4f 93       	push	r20
    23c4:	5f 93       	push	r21
    23c6:	6f 93       	push	r22
    23c8:	7f 93       	push	r23
    23ca:	8f 93       	push	r24
    23cc:	9f 93       	push	r25
    23ce:	af 93       	push	r26
    23d0:	bf 93       	push	r27
    23d2:	ef 93       	push	r30
    23d4:	ff 93       	push	r31
	dma_interrupt(2);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	3b df       	rcall	.-394    	; 0x2250 <dma_interrupt>
}
    23da:	ff 91       	pop	r31
    23dc:	ef 91       	pop	r30
    23de:	bf 91       	pop	r27
    23e0:	af 91       	pop	r26
    23e2:	9f 91       	pop	r25
    23e4:	8f 91       	pop	r24
    23e6:	7f 91       	pop	r23
    23e8:	6f 91       	pop	r22
    23ea:	5f 91       	pop	r21
    23ec:	4f 91       	pop	r20
    23ee:	3f 91       	pop	r19
    23f0:	2f 91       	pop	r18
    23f2:	0f 90       	pop	r0
    23f4:	0b be       	out	0x3b, r0	; 59
    23f6:	0f 90       	pop	r0
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	0f 90       	pop	r0
    23fc:	1f 90       	pop	r1
    23fe:	18 95       	reti

00002400 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    2400:	1f 92       	push	r1
    2402:	0f 92       	push	r0
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	0f 92       	push	r0
    2408:	11 24       	eor	r1, r1
    240a:	0b b6       	in	r0, 0x3b	; 59
    240c:	0f 92       	push	r0
    240e:	2f 93       	push	r18
    2410:	3f 93       	push	r19
    2412:	4f 93       	push	r20
    2414:	5f 93       	push	r21
    2416:	6f 93       	push	r22
    2418:	7f 93       	push	r23
    241a:	8f 93       	push	r24
    241c:	9f 93       	push	r25
    241e:	af 93       	push	r26
    2420:	bf 93       	push	r27
    2422:	ef 93       	push	r30
    2424:	ff 93       	push	r31
	dma_interrupt(3);
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	13 df       	rcall	.-474    	; 0x2250 <dma_interrupt>
}
    242a:	ff 91       	pop	r31
    242c:	ef 91       	pop	r30
    242e:	bf 91       	pop	r27
    2430:	af 91       	pop	r26
    2432:	9f 91       	pop	r25
    2434:	8f 91       	pop	r24
    2436:	7f 91       	pop	r23
    2438:	6f 91       	pop	r22
    243a:	5f 91       	pop	r21
    243c:	4f 91       	pop	r20
    243e:	3f 91       	pop	r19
    2440:	2f 91       	pop	r18
    2442:	0f 90       	pop	r0
    2444:	0b be       	out	0x3b, r0	; 59
    2446:	0f 90       	pop	r0
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	0f 90       	pop	r0
    244c:	1f 90       	pop	r1
    244e:	18 95       	reti

00002450 <rtc_get_time>:
	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
}
    2450:	80 e1       	ldi	r24, 0x10	; 16
    2452:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    2456:	e0 e2       	ldi	r30, 0x20	; 32
    2458:	f4 e0       	ldi	r31, 0x04	; 4
    245a:	81 81       	ldd	r24, Z+1	; 0x01
    245c:	84 fd       	sbrc	r24, 4
    245e:	fd cf       	rjmp	.-6      	; 0x245a <rtc_get_time+0xa>
    2460:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    2464:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    2468:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    246c:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    2470:	08 95       	ret

00002472 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    2472:	1f 92       	push	r1
    2474:	0f 92       	push	r0
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	0f 92       	push	r0
    247a:	11 24       	eor	r1, r1
    247c:	0b b6       	in	r0, 0x3b	; 59
    247e:	0f 92       	push	r0
    2480:	2f 93       	push	r18
    2482:	3f 93       	push	r19
    2484:	4f 93       	push	r20
    2486:	5f 93       	push	r21
    2488:	6f 93       	push	r22
    248a:	7f 93       	push	r23
    248c:	8f 93       	push	r24
    248e:	9f 93       	push	r25
    2490:	af 93       	push	r26
    2492:	bf 93       	push	r27
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	ef 93       	push	r30
    249a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    249c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    24a0:	c0 91 86 23 	lds	r28, 0x2386	; 0x802386 <rtc_data>
    24a4:	d0 91 87 23 	lds	r29, 0x2387	; 0x802387 <rtc_data+0x1>
    24a8:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    24aa:	19 f0       	breq	.+6      	; 0x24b2 <__vector_11+0x40>
    24ac:	d1 df       	rcall	.-94     	; 0x2450 <rtc_get_time>
    24ae:	fe 01       	movw	r30, r28
}
    24b0:	19 95       	eicall
    24b2:	ff 91       	pop	r31
    24b4:	ef 91       	pop	r30
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	bf 91       	pop	r27
    24bc:	af 91       	pop	r26
    24be:	9f 91       	pop	r25
    24c0:	8f 91       	pop	r24
    24c2:	7f 91       	pop	r23
    24c4:	6f 91       	pop	r22
    24c6:	5f 91       	pop	r21
    24c8:	4f 91       	pop	r20
    24ca:	3f 91       	pop	r19
    24cc:	2f 91       	pop	r18
    24ce:	0f 90       	pop	r0
    24d0:	0b be       	out	0x3b, r0	; 59
    24d2:	0f 90       	pop	r0
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	0f 90       	pop	r0
    24d8:	1f 90       	pop	r1
    24da:	18 95       	reti

000024dc <get_interpolated_sine>:
PROGMEM_DECLARE(uint16_t, PM_SINE[PM_SINE_COUNT]);


/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase, uint8_t noise)
{
    24dc:	8f 92       	push	r8
    24de:	9f 92       	push	r9
    24e0:	af 92       	push	r10
    24e2:	bf 92       	push	r11
    24e4:	cf 92       	push	r12
    24e6:	df 92       	push	r13
    24e8:	ef 92       	push	r14
    24ea:	ff 92       	push	r15
    24ec:	cf 93       	push	r28
    24ee:	c6 2f       	mov	r28, r22
	/* Randomizer */
	static uint32_t rnd1 = 0b11001001001101100110110010010011UL;
	static uint32_t rnd2 = 0xffffffffUL;
	rnd2 ^= rnd1;
    24f0:	c0 90 04 20 	lds	r12, 0x2004	; 0x802004 <rnd2.7145>
    24f4:	d0 90 05 20 	lds	r13, 0x2005	; 0x802005 <rnd2.7145+0x1>
    24f8:	e0 90 06 20 	lds	r14, 0x2006	; 0x802006 <rnd2.7145+0x2>
    24fc:	f0 90 07 20 	lds	r15, 0x2007	; 0x802007 <rnd2.7145+0x3>
    2500:	40 91 00 20 	lds	r20, 0x2000	; 0x802000 <__data_start>
    2504:	50 91 01 20 	lds	r21, 0x2001	; 0x802001 <__data_start+0x1>
    2508:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <__data_start+0x2>
    250c:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <__data_start+0x3>
    2510:	4c 25       	eor	r20, r12
    2512:	5d 25       	eor	r21, r13
    2514:	6e 25       	eor	r22, r14
    2516:	7f 25       	eor	r23, r15
    2518:	40 93 04 20 	sts	0x2004, r20	; 0x802004 <rnd2.7145>
    251c:	50 93 05 20 	sts	0x2005, r21	; 0x802005 <rnd2.7145+0x1>
    2520:	60 93 06 20 	sts	0x2006, r22	; 0x802006 <rnd2.7145+0x2>
    2524:	70 93 07 20 	sts	0x2007, r23	; 0x802007 <rnd2.7145+0x3>
	rnd1  = (rnd2 << 3) ^ (rnd2 >> 1) ^ 0b11010111010111101011001110111011UL;
    2528:	6a 01       	movw	r12, r20
    252a:	7b 01       	movw	r14, r22
    252c:	cc 0c       	add	r12, r12
    252e:	dd 1c       	adc	r13, r13
    2530:	ee 1c       	adc	r14, r14
    2532:	ff 1c       	adc	r15, r15
    2534:	cc 0c       	add	r12, r12
    2536:	dd 1c       	adc	r13, r13
    2538:	ee 1c       	adc	r14, r14
    253a:	ff 1c       	adc	r15, r15
    253c:	cc 0c       	add	r12, r12
    253e:	dd 1c       	adc	r13, r13
    2540:	ee 1c       	adc	r14, r14
    2542:	ff 1c       	adc	r15, r15
    2544:	76 95       	lsr	r23
    2546:	67 95       	ror	r22
    2548:	57 95       	ror	r21
    254a:	47 95       	ror	r20
    254c:	c4 26       	eor	r12, r20
    254e:	d5 26       	eor	r13, r21
    2550:	e6 26       	eor	r14, r22
    2552:	f7 26       	eor	r15, r23
    2554:	2b eb       	ldi	r18, 0xBB	; 187
    2556:	c2 26       	eor	r12, r18
    2558:	23 eb       	ldi	r18, 0xB3	; 179
    255a:	d2 26       	eor	r13, r18
    255c:	2e e5       	ldi	r18, 0x5E	; 94
    255e:	e2 26       	eor	r14, r18
    2560:	27 ed       	ldi	r18, 0xD7	; 215
    2562:	f2 26       	eor	r15, r18
    2564:	c0 92 00 20 	sts	0x2000, r12	; 0x802000 <__data_start>
    2568:	d0 92 01 20 	sts	0x2001, r13	; 0x802001 <__data_start+0x1>
    256c:	e0 92 02 20 	sts	0x2002, r14	; 0x802002 <__data_start+0x2>
    2570:	f0 92 03 20 	sts	0x2003, r15	; 0x802003 <__data_start+0x3>

	/* Interpolate result */
	uint16_t left_x = phase >> 4;
    2574:	9c 01       	movw	r18, r24
    2576:	32 95       	swap	r19
    2578:	22 95       	swap	r18
    257a:	2f 70       	andi	r18, 0x0F	; 15
    257c:	23 27       	eor	r18, r19
    257e:	3f 70       	andi	r19, 0x0F	; 15
    2580:	23 27       	eor	r18, r19
	uint32_t left_y = PGM_READ_WORD(&(PM_SINE[left_x]));
    2582:	f9 01       	movw	r30, r18
    2584:	ee 0f       	add	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	e6 5f       	subi	r30, 0xF6	; 246
    258a:	fd 4f       	sbci	r31, 0xFD	; 253
    258c:	85 90       	lpm	r8, Z+
    258e:	94 90       	lpm	r9, Z
    2590:	a1 2c       	mov	r10, r1
    2592:	b1 2c       	mov	r11, r1
	uint16_t rght_x = left_x + 1;
	uint32_t rght_y = PGM_READ_WORD(&(PM_SINE[rght_x]));
    2594:	f9 01       	movw	r30, r18
    2596:	ee 0f       	add	r30, r30
    2598:	ff 1f       	adc	r31, r31
    259a:	e4 5f       	subi	r30, 0xF4	; 244
    259c:	fd 4f       	sbci	r31, 0xFD	; 253
    259e:	25 91       	lpm	r18, Z+
    25a0:	34 91       	lpm	r19, Z
	uint16_t prob = phase & 0x0f;					// phase_frac
    25a2:	fc 01       	movw	r30, r24
    25a4:	ef 70       	andi	r30, 0x0F	; 15
    25a6:	ff 27       	eor	r31, r31
	int32_t  delta_frac_y = ((rght_y - left_y) * prob) >> 4;
	uint32_t val = left_y + delta_frac_y;
    25a8:	c9 01       	movw	r24, r18
    25aa:	a0 e0       	ldi	r26, 0x00	; 0
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	9c 01       	movw	r18, r24
    25b0:	ad 01       	movw	r20, r26
    25b2:	28 19       	sub	r18, r8
    25b4:	39 09       	sbc	r19, r9
    25b6:	4a 09       	sbc	r20, r10
    25b8:	5b 09       	sbc	r21, r11
    25ba:	df 01       	movw	r26, r30
    25bc:	0e 94 a7 29 	call	0x534e	; 0x534e <__muluhisi3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	68 94       	set
    25c6:	13 f8       	bld	r1, 3
    25c8:	b6 95       	lsr	r27
    25ca:	a7 95       	ror	r26
    25cc:	97 95       	ror	r25
    25ce:	87 95       	ror	r24
    25d0:	16 94       	lsr	r1
    25d2:	d1 f7       	brne	.-12     	; 0x25c8 <get_interpolated_sine+0xec>
    25d4:	88 0e       	add	r8, r24
    25d6:	99 1e       	adc	r9, r25
    25d8:	aa 1e       	adc	r10, r26
    25da:	bb 1e       	adc	r11, r27

	if (noise) {
    25dc:	cc 23       	and	r28, r28
    25de:	b9 f0       	breq	.+46     	; 0x260e <get_interpolated_sine+0x132>
		/* Adding randomized noise to suppress artifacts */
		prob <<= 4;											// probability := phase_frac
    25e0:	cf 01       	movw	r24, r30
    25e2:	82 95       	swap	r24
    25e4:	92 95       	swap	r25
    25e6:	90 7f       	andi	r25, 0xF0	; 240
    25e8:	98 27       	eor	r25, r24
    25ea:	80 7f       	andi	r24, 0xF0	; 240
    25ec:	98 27       	eor	r25, r24
		uint16_t mult = (uint16_t) (rnd1 & 0xff);
		prob *= mult;
		return (prob >= 0x4000) ?  val + 1 : val;
    25ee:	dd 24       	eor	r13, r13
    25f0:	c8 9e       	mul	r12, r24
    25f2:	90 01       	movw	r18, r0
    25f4:	c9 9e       	mul	r12, r25
    25f6:	30 0d       	add	r19, r0
    25f8:	d8 9e       	mul	r13, r24
    25fa:	30 0d       	add	r19, r0
    25fc:	11 24       	eor	r1, r1
    25fe:	21 15       	cp	r18, r1
    2600:	30 44       	sbci	r19, 0x40	; 64
    2602:	18 f0       	brcs	.+6      	; 0x260a <get_interpolated_sine+0x12e>
    2604:	c4 01       	movw	r24, r8
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	03 c0       	rjmp	.+6      	; 0x2610 <get_interpolated_sine+0x134>
    260a:	c4 01       	movw	r24, r8
    260c:	01 c0       	rjmp	.+2      	; 0x2610 <get_interpolated_sine+0x134>
	} else {
		return val;
    260e:	c4 01       	movw	r24, r8
	}
}
    2610:	cf 91       	pop	r28
    2612:	ff 90       	pop	r15
    2614:	ef 90       	pop	r14
    2616:	df 90       	pop	r13
    2618:	cf 90       	pop	r12
    261a:	bf 90       	pop	r11
    261c:	af 90       	pop	r10
    261e:	9f 90       	pop	r9
    2620:	8f 90       	pop	r8
    2622:	08 95       	ret

00002624 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2624:	1f 92       	push	r1
    2626:	0f 92       	push	r0
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	0f 92       	push	r0
    262c:	11 24       	eor	r1, r1
    262e:	0b b6       	in	r0, 0x3b	; 59
    2630:	0f 92       	push	r0
    2632:	2f 93       	push	r18
    2634:	3f 93       	push	r19
    2636:	4f 93       	push	r20
    2638:	5f 93       	push	r21
    263a:	6f 93       	push	r22
    263c:	7f 93       	push	r23
    263e:	8f 93       	push	r24
    2640:	9f 93       	push	r25
    2642:	af 93       	push	r26
    2644:	bf 93       	push	r27
    2646:	ef 93       	push	r30
    2648:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    264a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    264e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    2652:	e0 91 8a 23 	lds	r30, 0x238A	; 0x80238a <adca_callback>
    2656:	f0 91 8b 23 	lds	r31, 0x238B	; 0x80238b <adca_callback+0x1>
    265a:	61 e0       	ldi	r22, 0x01	; 1
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	92 e0       	ldi	r25, 0x02	; 2
    2660:	19 95       	eicall
}
    2662:	ff 91       	pop	r31
    2664:	ef 91       	pop	r30
    2666:	bf 91       	pop	r27
    2668:	af 91       	pop	r26
    266a:	9f 91       	pop	r25
    266c:	8f 91       	pop	r24
    266e:	7f 91       	pop	r23
    2670:	6f 91       	pop	r22
    2672:	5f 91       	pop	r21
    2674:	4f 91       	pop	r20
    2676:	3f 91       	pop	r19
    2678:	2f 91       	pop	r18
    267a:	0f 90       	pop	r0
    267c:	0b be       	out	0x3b, r0	; 59
    267e:	0f 90       	pop	r0
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	0f 90       	pop	r0
    2684:	1f 90       	pop	r1
    2686:	18 95       	reti

00002688 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    2688:	1f 92       	push	r1
    268a:	0f 92       	push	r0
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	0f 92       	push	r0
    2690:	11 24       	eor	r1, r1
    2692:	0b b6       	in	r0, 0x3b	; 59
    2694:	0f 92       	push	r0
    2696:	2f 93       	push	r18
    2698:	3f 93       	push	r19
    269a:	4f 93       	push	r20
    269c:	5f 93       	push	r21
    269e:	6f 93       	push	r22
    26a0:	7f 93       	push	r23
    26a2:	8f 93       	push	r24
    26a4:	9f 93       	push	r25
    26a6:	af 93       	push	r26
    26a8:	bf 93       	push	r27
    26aa:	ef 93       	push	r30
    26ac:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    26ae:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    26b2:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    26b6:	e0 91 8a 23 	lds	r30, 0x238A	; 0x80238a <adca_callback>
    26ba:	f0 91 8b 23 	lds	r31, 0x238B	; 0x80238b <adca_callback+0x1>
    26be:	62 e0       	ldi	r22, 0x02	; 2
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	92 e0       	ldi	r25, 0x02	; 2
    26c4:	19 95       	eicall
}
    26c6:	ff 91       	pop	r31
    26c8:	ef 91       	pop	r30
    26ca:	bf 91       	pop	r27
    26cc:	af 91       	pop	r26
    26ce:	9f 91       	pop	r25
    26d0:	8f 91       	pop	r24
    26d2:	7f 91       	pop	r23
    26d4:	6f 91       	pop	r22
    26d6:	5f 91       	pop	r21
    26d8:	4f 91       	pop	r20
    26da:	3f 91       	pop	r19
    26dc:	2f 91       	pop	r18
    26de:	0f 90       	pop	r0
    26e0:	0b be       	out	0x3b, r0	; 59
    26e2:	0f 90       	pop	r0
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	0f 90       	pop	r0
    26e8:	1f 90       	pop	r1
    26ea:	18 95       	reti

000026ec <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    26ec:	1f 92       	push	r1
    26ee:	0f 92       	push	r0
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	0f 92       	push	r0
    26f4:	11 24       	eor	r1, r1
    26f6:	0b b6       	in	r0, 0x3b	; 59
    26f8:	0f 92       	push	r0
    26fa:	2f 93       	push	r18
    26fc:	3f 93       	push	r19
    26fe:	4f 93       	push	r20
    2700:	5f 93       	push	r21
    2702:	6f 93       	push	r22
    2704:	7f 93       	push	r23
    2706:	8f 93       	push	r24
    2708:	9f 93       	push	r25
    270a:	af 93       	push	r26
    270c:	bf 93       	push	r27
    270e:	ef 93       	push	r30
    2710:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    2712:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    2716:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    271a:	e0 91 8a 23 	lds	r30, 0x238A	; 0x80238a <adca_callback>
    271e:	f0 91 8b 23 	lds	r31, 0x238B	; 0x80238b <adca_callback+0x1>
    2722:	64 e0       	ldi	r22, 0x04	; 4
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	92 e0       	ldi	r25, 0x02	; 2
    2728:	19 95       	eicall
}
    272a:	ff 91       	pop	r31
    272c:	ef 91       	pop	r30
    272e:	bf 91       	pop	r27
    2730:	af 91       	pop	r26
    2732:	9f 91       	pop	r25
    2734:	8f 91       	pop	r24
    2736:	7f 91       	pop	r23
    2738:	6f 91       	pop	r22
    273a:	5f 91       	pop	r21
    273c:	4f 91       	pop	r20
    273e:	3f 91       	pop	r19
    2740:	2f 91       	pop	r18
    2742:	0f 90       	pop	r0
    2744:	0b be       	out	0x3b, r0	; 59
    2746:	0f 90       	pop	r0
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	0f 90       	pop	r0
    274c:	1f 90       	pop	r1
    274e:	18 95       	reti

00002750 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    2750:	1f 92       	push	r1
    2752:	0f 92       	push	r0
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	0f 92       	push	r0
    2758:	11 24       	eor	r1, r1
    275a:	0b b6       	in	r0, 0x3b	; 59
    275c:	0f 92       	push	r0
    275e:	2f 93       	push	r18
    2760:	3f 93       	push	r19
    2762:	4f 93       	push	r20
    2764:	5f 93       	push	r21
    2766:	6f 93       	push	r22
    2768:	7f 93       	push	r23
    276a:	8f 93       	push	r24
    276c:	9f 93       	push	r25
    276e:	af 93       	push	r26
    2770:	bf 93       	push	r27
    2772:	ef 93       	push	r30
    2774:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    2776:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    277a:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    277e:	e0 91 8a 23 	lds	r30, 0x238A	; 0x80238a <adca_callback>
    2782:	f0 91 8b 23 	lds	r31, 0x238B	; 0x80238b <adca_callback+0x1>
    2786:	68 e0       	ldi	r22, 0x08	; 8
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	92 e0       	ldi	r25, 0x02	; 2
    278c:	19 95       	eicall
}
    278e:	ff 91       	pop	r31
    2790:	ef 91       	pop	r30
    2792:	bf 91       	pop	r27
    2794:	af 91       	pop	r26
    2796:	9f 91       	pop	r25
    2798:	8f 91       	pop	r24
    279a:	7f 91       	pop	r23
    279c:	6f 91       	pop	r22
    279e:	5f 91       	pop	r21
    27a0:	4f 91       	pop	r20
    27a2:	3f 91       	pop	r19
    27a4:	2f 91       	pop	r18
    27a6:	0f 90       	pop	r0
    27a8:	0b be       	out	0x3b, r0	; 59
    27aa:	0f 90       	pop	r0
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	0f 90       	pop	r0
    27b0:	1f 90       	pop	r1
    27b2:	18 95       	reti

000027b4 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    27b4:	1f 92       	push	r1
    27b6:	0f 92       	push	r0
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	0f 92       	push	r0
    27bc:	11 24       	eor	r1, r1
    27be:	0b b6       	in	r0, 0x3b	; 59
    27c0:	0f 92       	push	r0
    27c2:	2f 93       	push	r18
    27c4:	3f 93       	push	r19
    27c6:	4f 93       	push	r20
    27c8:	5f 93       	push	r21
    27ca:	6f 93       	push	r22
    27cc:	7f 93       	push	r23
    27ce:	8f 93       	push	r24
    27d0:	9f 93       	push	r25
    27d2:	af 93       	push	r26
    27d4:	bf 93       	push	r27
    27d6:	ef 93       	push	r30
    27d8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    27da:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    27de:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    27e2:	e0 91 88 23 	lds	r30, 0x2388	; 0x802388 <adcb_callback>
    27e6:	f0 91 89 23 	lds	r31, 0x2389	; 0x802389 <adcb_callback+0x1>
    27ea:	61 e0       	ldi	r22, 0x01	; 1
    27ec:	80 e4       	ldi	r24, 0x40	; 64
    27ee:	92 e0       	ldi	r25, 0x02	; 2
    27f0:	19 95       	eicall
}
    27f2:	ff 91       	pop	r31
    27f4:	ef 91       	pop	r30
    27f6:	bf 91       	pop	r27
    27f8:	af 91       	pop	r26
    27fa:	9f 91       	pop	r25
    27fc:	8f 91       	pop	r24
    27fe:	7f 91       	pop	r23
    2800:	6f 91       	pop	r22
    2802:	5f 91       	pop	r21
    2804:	4f 91       	pop	r20
    2806:	3f 91       	pop	r19
    2808:	2f 91       	pop	r18
    280a:	0f 90       	pop	r0
    280c:	0b be       	out	0x3b, r0	; 59
    280e:	0f 90       	pop	r0
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	0f 90       	pop	r0
    2814:	1f 90       	pop	r1
    2816:	18 95       	reti

00002818 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    2818:	1f 92       	push	r1
    281a:	0f 92       	push	r0
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	0f 92       	push	r0
    2820:	11 24       	eor	r1, r1
    2822:	0b b6       	in	r0, 0x3b	; 59
    2824:	0f 92       	push	r0
    2826:	2f 93       	push	r18
    2828:	3f 93       	push	r19
    282a:	4f 93       	push	r20
    282c:	5f 93       	push	r21
    282e:	6f 93       	push	r22
    2830:	7f 93       	push	r23
    2832:	8f 93       	push	r24
    2834:	9f 93       	push	r25
    2836:	af 93       	push	r26
    2838:	bf 93       	push	r27
    283a:	ef 93       	push	r30
    283c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    283e:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    2842:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    2846:	e0 91 88 23 	lds	r30, 0x2388	; 0x802388 <adcb_callback>
    284a:	f0 91 89 23 	lds	r31, 0x2389	; 0x802389 <adcb_callback+0x1>
    284e:	62 e0       	ldi	r22, 0x02	; 2
    2850:	80 e4       	ldi	r24, 0x40	; 64
    2852:	92 e0       	ldi	r25, 0x02	; 2
    2854:	19 95       	eicall
}
    2856:	ff 91       	pop	r31
    2858:	ef 91       	pop	r30
    285a:	bf 91       	pop	r27
    285c:	af 91       	pop	r26
    285e:	9f 91       	pop	r25
    2860:	8f 91       	pop	r24
    2862:	7f 91       	pop	r23
    2864:	6f 91       	pop	r22
    2866:	5f 91       	pop	r21
    2868:	4f 91       	pop	r20
    286a:	3f 91       	pop	r19
    286c:	2f 91       	pop	r18
    286e:	0f 90       	pop	r0
    2870:	0b be       	out	0x3b, r0	; 59
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    287c:	1f 92       	push	r1
    287e:	0f 92       	push	r0
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	0f 92       	push	r0
    2884:	11 24       	eor	r1, r1
    2886:	0b b6       	in	r0, 0x3b	; 59
    2888:	0f 92       	push	r0
    288a:	2f 93       	push	r18
    288c:	3f 93       	push	r19
    288e:	4f 93       	push	r20
    2890:	5f 93       	push	r21
    2892:	6f 93       	push	r22
    2894:	7f 93       	push	r23
    2896:	8f 93       	push	r24
    2898:	9f 93       	push	r25
    289a:	af 93       	push	r26
    289c:	bf 93       	push	r27
    289e:	ef 93       	push	r30
    28a0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    28a2:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    28a6:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    28aa:	e0 91 88 23 	lds	r30, 0x2388	; 0x802388 <adcb_callback>
    28ae:	f0 91 89 23 	lds	r31, 0x2389	; 0x802389 <adcb_callback+0x1>
    28b2:	64 e0       	ldi	r22, 0x04	; 4
    28b4:	80 e4       	ldi	r24, 0x40	; 64
    28b6:	92 e0       	ldi	r25, 0x02	; 2
    28b8:	19 95       	eicall
}
    28ba:	ff 91       	pop	r31
    28bc:	ef 91       	pop	r30
    28be:	bf 91       	pop	r27
    28c0:	af 91       	pop	r26
    28c2:	9f 91       	pop	r25
    28c4:	8f 91       	pop	r24
    28c6:	7f 91       	pop	r23
    28c8:	6f 91       	pop	r22
    28ca:	5f 91       	pop	r21
    28cc:	4f 91       	pop	r20
    28ce:	3f 91       	pop	r19
    28d0:	2f 91       	pop	r18
    28d2:	0f 90       	pop	r0
    28d4:	0b be       	out	0x3b, r0	; 59
    28d6:	0f 90       	pop	r0
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	0f 90       	pop	r0
    28dc:	1f 90       	pop	r1
    28de:	18 95       	reti

000028e0 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    28e0:	1f 92       	push	r1
    28e2:	0f 92       	push	r0
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	0f 92       	push	r0
    28e8:	11 24       	eor	r1, r1
    28ea:	0b b6       	in	r0, 0x3b	; 59
    28ec:	0f 92       	push	r0
    28ee:	2f 93       	push	r18
    28f0:	3f 93       	push	r19
    28f2:	4f 93       	push	r20
    28f4:	5f 93       	push	r21
    28f6:	6f 93       	push	r22
    28f8:	7f 93       	push	r23
    28fa:	8f 93       	push	r24
    28fc:	9f 93       	push	r25
    28fe:	af 93       	push	r26
    2900:	bf 93       	push	r27
    2902:	ef 93       	push	r30
    2904:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    2906:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    290a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    290e:	e0 91 88 23 	lds	r30, 0x2388	; 0x802388 <adcb_callback>
    2912:	f0 91 89 23 	lds	r31, 0x2389	; 0x802389 <adcb_callback+0x1>
    2916:	68 e0       	ldi	r22, 0x08	; 8
    2918:	80 e4       	ldi	r24, 0x40	; 64
    291a:	92 e0       	ldi	r25, 0x02	; 2
    291c:	19 95       	eicall
}
    291e:	ff 91       	pop	r31
    2920:	ef 91       	pop	r30
    2922:	bf 91       	pop	r27
    2924:	af 91       	pop	r26
    2926:	9f 91       	pop	r25
    2928:	8f 91       	pop	r24
    292a:	7f 91       	pop	r23
    292c:	6f 91       	pop	r22
    292e:	5f 91       	pop	r21
    2930:	4f 91       	pop	r20
    2932:	3f 91       	pop	r19
    2934:	2f 91       	pop	r18
    2936:	0f 90       	pop	r0
    2938:	0b be       	out	0x3b, r0	; 59
    293a:	0f 90       	pop	r0
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	0f 90       	pop	r0
    2940:	1f 90       	pop	r1
    2942:	18 95       	reti

00002944 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    2944:	1f 92       	push	r1
    2946:	0f 92       	push	r0
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	0f 92       	push	r0
    294c:	11 24       	eor	r1, r1
    294e:	0b b6       	in	r0, 0x3b	; 59
    2950:	0f 92       	push	r0
    2952:	2f 93       	push	r18
    2954:	3f 93       	push	r19
    2956:	4f 93       	push	r20
    2958:	5f 93       	push	r21
    295a:	6f 93       	push	r22
    295c:	7f 93       	push	r23
    295e:	8f 93       	push	r24
    2960:	9f 93       	push	r25
    2962:	af 93       	push	r26
    2964:	bf 93       	push	r27
    2966:	ef 93       	push	r30
    2968:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    296a:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <tc_tcc0_ovf_callback>
    296e:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <tc_tcc0_ovf_callback+0x1>
    2972:	30 97       	sbiw	r30, 0x00	; 0
    2974:	09 f0       	breq	.+2      	; 0x2978 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
    2976:	19 95       	eicall
	}
}
    2978:	ff 91       	pop	r31
    297a:	ef 91       	pop	r30
    297c:	bf 91       	pop	r27
    297e:	af 91       	pop	r26
    2980:	9f 91       	pop	r25
    2982:	8f 91       	pop	r24
    2984:	7f 91       	pop	r23
    2986:	6f 91       	pop	r22
    2988:	5f 91       	pop	r21
    298a:	4f 91       	pop	r20
    298c:	3f 91       	pop	r19
    298e:	2f 91       	pop	r18
    2990:	0f 90       	pop	r0
    2992:	0b be       	out	0x3b, r0	; 59
    2994:	0f 90       	pop	r0
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	0f 90       	pop	r0
    299a:	1f 90       	pop	r1
    299c:	18 95       	reti

0000299e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    299e:	1f 92       	push	r1
    29a0:	0f 92       	push	r0
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	0f 92       	push	r0
    29a6:	11 24       	eor	r1, r1
    29a8:	0b b6       	in	r0, 0x3b	; 59
    29aa:	0f 92       	push	r0
    29ac:	2f 93       	push	r18
    29ae:	3f 93       	push	r19
    29b0:	4f 93       	push	r20
    29b2:	5f 93       	push	r21
    29b4:	6f 93       	push	r22
    29b6:	7f 93       	push	r23
    29b8:	8f 93       	push	r24
    29ba:	9f 93       	push	r25
    29bc:	af 93       	push	r26
    29be:	bf 93       	push	r27
    29c0:	ef 93       	push	r30
    29c2:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    29c4:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <tc_tcc0_err_callback>
    29c8:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <tc_tcc0_err_callback+0x1>
    29cc:	30 97       	sbiw	r30, 0x00	; 0
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <__vector_15+0x34>
		tc_tcc0_err_callback();
    29d0:	19 95       	eicall
	}
}
    29d2:	ff 91       	pop	r31
    29d4:	ef 91       	pop	r30
    29d6:	bf 91       	pop	r27
    29d8:	af 91       	pop	r26
    29da:	9f 91       	pop	r25
    29dc:	8f 91       	pop	r24
    29de:	7f 91       	pop	r23
    29e0:	6f 91       	pop	r22
    29e2:	5f 91       	pop	r21
    29e4:	4f 91       	pop	r20
    29e6:	3f 91       	pop	r19
    29e8:	2f 91       	pop	r18
    29ea:	0f 90       	pop	r0
    29ec:	0b be       	out	0x3b, r0	; 59
    29ee:	0f 90       	pop	r0
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	0f 90       	pop	r0
    29f4:	1f 90       	pop	r1
    29f6:	18 95       	reti

000029f8 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    29f8:	1f 92       	push	r1
    29fa:	0f 92       	push	r0
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	0f 92       	push	r0
    2a00:	11 24       	eor	r1, r1
    2a02:	0b b6       	in	r0, 0x3b	; 59
    2a04:	0f 92       	push	r0
    2a06:	2f 93       	push	r18
    2a08:	3f 93       	push	r19
    2a0a:	4f 93       	push	r20
    2a0c:	5f 93       	push	r21
    2a0e:	6f 93       	push	r22
    2a10:	7f 93       	push	r23
    2a12:	8f 93       	push	r24
    2a14:	9f 93       	push	r25
    2a16:	af 93       	push	r26
    2a18:	bf 93       	push	r27
    2a1a:	ef 93       	push	r30
    2a1c:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    2a1e:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <tc_tcc0_cca_callback>
    2a22:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <tc_tcc0_cca_callback+0x1>
    2a26:	30 97       	sbiw	r30, 0x00	; 0
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <__vector_16+0x34>
		tc_tcc0_cca_callback();
    2a2a:	19 95       	eicall
	}
}
    2a2c:	ff 91       	pop	r31
    2a2e:	ef 91       	pop	r30
    2a30:	bf 91       	pop	r27
    2a32:	af 91       	pop	r26
    2a34:	9f 91       	pop	r25
    2a36:	8f 91       	pop	r24
    2a38:	7f 91       	pop	r23
    2a3a:	6f 91       	pop	r22
    2a3c:	5f 91       	pop	r21
    2a3e:	4f 91       	pop	r20
    2a40:	3f 91       	pop	r19
    2a42:	2f 91       	pop	r18
    2a44:	0f 90       	pop	r0
    2a46:	0b be       	out	0x3b, r0	; 59
    2a48:	0f 90       	pop	r0
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	0f 90       	pop	r0
    2a4e:	1f 90       	pop	r1
    2a50:	18 95       	reti

00002a52 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    2a52:	1f 92       	push	r1
    2a54:	0f 92       	push	r0
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	0f 92       	push	r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	0b b6       	in	r0, 0x3b	; 59
    2a5e:	0f 92       	push	r0
    2a60:	2f 93       	push	r18
    2a62:	3f 93       	push	r19
    2a64:	4f 93       	push	r20
    2a66:	5f 93       	push	r21
    2a68:	6f 93       	push	r22
    2a6a:	7f 93       	push	r23
    2a6c:	8f 93       	push	r24
    2a6e:	9f 93       	push	r25
    2a70:	af 93       	push	r26
    2a72:	bf 93       	push	r27
    2a74:	ef 93       	push	r30
    2a76:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    2a78:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <tc_tcc0_ccb_callback>
    2a7c:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <tc_tcc0_ccb_callback+0x1>
    2a80:	30 97       	sbiw	r30, 0x00	; 0
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    2a84:	19 95       	eicall
	}
}
    2a86:	ff 91       	pop	r31
    2a88:	ef 91       	pop	r30
    2a8a:	bf 91       	pop	r27
    2a8c:	af 91       	pop	r26
    2a8e:	9f 91       	pop	r25
    2a90:	8f 91       	pop	r24
    2a92:	7f 91       	pop	r23
    2a94:	6f 91       	pop	r22
    2a96:	5f 91       	pop	r21
    2a98:	4f 91       	pop	r20
    2a9a:	3f 91       	pop	r19
    2a9c:	2f 91       	pop	r18
    2a9e:	0f 90       	pop	r0
    2aa0:	0b be       	out	0x3b, r0	; 59
    2aa2:	0f 90       	pop	r0
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	0f 90       	pop	r0
    2aa8:	1f 90       	pop	r1
    2aaa:	18 95       	reti

00002aac <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    2aac:	1f 92       	push	r1
    2aae:	0f 92       	push	r0
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	0f 92       	push	r0
    2ab4:	11 24       	eor	r1, r1
    2ab6:	0b b6       	in	r0, 0x3b	; 59
    2ab8:	0f 92       	push	r0
    2aba:	2f 93       	push	r18
    2abc:	3f 93       	push	r19
    2abe:	4f 93       	push	r20
    2ac0:	5f 93       	push	r21
    2ac2:	6f 93       	push	r22
    2ac4:	7f 93       	push	r23
    2ac6:	8f 93       	push	r24
    2ac8:	9f 93       	push	r25
    2aca:	af 93       	push	r26
    2acc:	bf 93       	push	r27
    2ace:	ef 93       	push	r30
    2ad0:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    2ad2:	e0 91 04 21 	lds	r30, 0x2104	; 0x802104 <tc_tcc0_ccc_callback>
    2ad6:	f0 91 05 21 	lds	r31, 0x2105	; 0x802105 <tc_tcc0_ccc_callback+0x1>
    2ada:	30 97       	sbiw	r30, 0x00	; 0
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    2ade:	19 95       	eicall
	}
}
    2ae0:	ff 91       	pop	r31
    2ae2:	ef 91       	pop	r30
    2ae4:	bf 91       	pop	r27
    2ae6:	af 91       	pop	r26
    2ae8:	9f 91       	pop	r25
    2aea:	8f 91       	pop	r24
    2aec:	7f 91       	pop	r23
    2aee:	6f 91       	pop	r22
    2af0:	5f 91       	pop	r21
    2af2:	4f 91       	pop	r20
    2af4:	3f 91       	pop	r19
    2af6:	2f 91       	pop	r18
    2af8:	0f 90       	pop	r0
    2afa:	0b be       	out	0x3b, r0	; 59
    2afc:	0f 90       	pop	r0
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	0f 90       	pop	r0
    2b02:	1f 90       	pop	r1
    2b04:	18 95       	reti

00002b06 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    2b06:	1f 92       	push	r1
    2b08:	0f 92       	push	r0
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	0f 92       	push	r0
    2b0e:	11 24       	eor	r1, r1
    2b10:	0b b6       	in	r0, 0x3b	; 59
    2b12:	0f 92       	push	r0
    2b14:	2f 93       	push	r18
    2b16:	3f 93       	push	r19
    2b18:	4f 93       	push	r20
    2b1a:	5f 93       	push	r21
    2b1c:	6f 93       	push	r22
    2b1e:	7f 93       	push	r23
    2b20:	8f 93       	push	r24
    2b22:	9f 93       	push	r25
    2b24:	af 93       	push	r26
    2b26:	bf 93       	push	r27
    2b28:	ef 93       	push	r30
    2b2a:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    2b2c:	e0 91 02 21 	lds	r30, 0x2102	; 0x802102 <tc_tcc0_ccd_callback>
    2b30:	f0 91 03 21 	lds	r31, 0x2103	; 0x802103 <tc_tcc0_ccd_callback+0x1>
    2b34:	30 97       	sbiw	r30, 0x00	; 0
    2b36:	09 f0       	breq	.+2      	; 0x2b3a <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    2b38:	19 95       	eicall
	}
}
    2b3a:	ff 91       	pop	r31
    2b3c:	ef 91       	pop	r30
    2b3e:	bf 91       	pop	r27
    2b40:	af 91       	pop	r26
    2b42:	9f 91       	pop	r25
    2b44:	8f 91       	pop	r24
    2b46:	7f 91       	pop	r23
    2b48:	6f 91       	pop	r22
    2b4a:	5f 91       	pop	r21
    2b4c:	4f 91       	pop	r20
    2b4e:	3f 91       	pop	r19
    2b50:	2f 91       	pop	r18
    2b52:	0f 90       	pop	r0
    2b54:	0b be       	out	0x3b, r0	; 59
    2b56:	0f 90       	pop	r0
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	0f 90       	pop	r0
    2b5c:	1f 90       	pop	r1
    2b5e:	18 95       	reti

00002b60 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    2b60:	1f 92       	push	r1
    2b62:	0f 92       	push	r0
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	0f 92       	push	r0
    2b68:	11 24       	eor	r1, r1
    2b6a:	0b b6       	in	r0, 0x3b	; 59
    2b6c:	0f 92       	push	r0
    2b6e:	2f 93       	push	r18
    2b70:	3f 93       	push	r19
    2b72:	4f 93       	push	r20
    2b74:	5f 93       	push	r21
    2b76:	6f 93       	push	r22
    2b78:	7f 93       	push	r23
    2b7a:	8f 93       	push	r24
    2b7c:	9f 93       	push	r25
    2b7e:	af 93       	push	r26
    2b80:	bf 93       	push	r27
    2b82:	ef 93       	push	r30
    2b84:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    2b86:	e0 91 00 21 	lds	r30, 0x2100	; 0x802100 <tc_tcc1_ovf_callback>
    2b8a:	f0 91 01 21 	lds	r31, 0x2101	; 0x802101 <tc_tcc1_ovf_callback+0x1>
    2b8e:	30 97       	sbiw	r30, 0x00	; 0
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    2b92:	19 95       	eicall
	}
}
    2b94:	ff 91       	pop	r31
    2b96:	ef 91       	pop	r30
    2b98:	bf 91       	pop	r27
    2b9a:	af 91       	pop	r26
    2b9c:	9f 91       	pop	r25
    2b9e:	8f 91       	pop	r24
    2ba0:	7f 91       	pop	r23
    2ba2:	6f 91       	pop	r22
    2ba4:	5f 91       	pop	r21
    2ba6:	4f 91       	pop	r20
    2ba8:	3f 91       	pop	r19
    2baa:	2f 91       	pop	r18
    2bac:	0f 90       	pop	r0
    2bae:	0b be       	out	0x3b, r0	; 59
    2bb0:	0f 90       	pop	r0
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	0f 90       	pop	r0
    2bb6:	1f 90       	pop	r1
    2bb8:	18 95       	reti

00002bba <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    2bba:	1f 92       	push	r1
    2bbc:	0f 92       	push	r0
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	0f 92       	push	r0
    2bc2:	11 24       	eor	r1, r1
    2bc4:	0b b6       	in	r0, 0x3b	; 59
    2bc6:	0f 92       	push	r0
    2bc8:	2f 93       	push	r18
    2bca:	3f 93       	push	r19
    2bcc:	4f 93       	push	r20
    2bce:	5f 93       	push	r21
    2bd0:	6f 93       	push	r22
    2bd2:	7f 93       	push	r23
    2bd4:	8f 93       	push	r24
    2bd6:	9f 93       	push	r25
    2bd8:	af 93       	push	r26
    2bda:	bf 93       	push	r27
    2bdc:	ef 93       	push	r30
    2bde:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    2be0:	e0 91 fe 20 	lds	r30, 0x20FE	; 0x8020fe <tc_tcc1_err_callback>
    2be4:	f0 91 ff 20 	lds	r31, 0x20FF	; 0x8020ff <tc_tcc1_err_callback+0x1>
    2be8:	30 97       	sbiw	r30, 0x00	; 0
    2bea:	09 f0       	breq	.+2      	; 0x2bee <__vector_21+0x34>
		tc_tcc1_err_callback();
    2bec:	19 95       	eicall
	}
}
    2bee:	ff 91       	pop	r31
    2bf0:	ef 91       	pop	r30
    2bf2:	bf 91       	pop	r27
    2bf4:	af 91       	pop	r26
    2bf6:	9f 91       	pop	r25
    2bf8:	8f 91       	pop	r24
    2bfa:	7f 91       	pop	r23
    2bfc:	6f 91       	pop	r22
    2bfe:	5f 91       	pop	r21
    2c00:	4f 91       	pop	r20
    2c02:	3f 91       	pop	r19
    2c04:	2f 91       	pop	r18
    2c06:	0f 90       	pop	r0
    2c08:	0b be       	out	0x3b, r0	; 59
    2c0a:	0f 90       	pop	r0
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	0f 90       	pop	r0
    2c10:	1f 90       	pop	r1
    2c12:	18 95       	reti

00002c14 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    2c14:	1f 92       	push	r1
    2c16:	0f 92       	push	r0
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	0f 92       	push	r0
    2c1c:	11 24       	eor	r1, r1
    2c1e:	0b b6       	in	r0, 0x3b	; 59
    2c20:	0f 92       	push	r0
    2c22:	2f 93       	push	r18
    2c24:	3f 93       	push	r19
    2c26:	4f 93       	push	r20
    2c28:	5f 93       	push	r21
    2c2a:	6f 93       	push	r22
    2c2c:	7f 93       	push	r23
    2c2e:	8f 93       	push	r24
    2c30:	9f 93       	push	r25
    2c32:	af 93       	push	r26
    2c34:	bf 93       	push	r27
    2c36:	ef 93       	push	r30
    2c38:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    2c3a:	e0 91 fc 20 	lds	r30, 0x20FC	; 0x8020fc <tc_tcc1_cca_callback>
    2c3e:	f0 91 fd 20 	lds	r31, 0x20FD	; 0x8020fd <tc_tcc1_cca_callback+0x1>
    2c42:	30 97       	sbiw	r30, 0x00	; 0
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    2c46:	19 95       	eicall
	}
}
    2c48:	ff 91       	pop	r31
    2c4a:	ef 91       	pop	r30
    2c4c:	bf 91       	pop	r27
    2c4e:	af 91       	pop	r26
    2c50:	9f 91       	pop	r25
    2c52:	8f 91       	pop	r24
    2c54:	7f 91       	pop	r23
    2c56:	6f 91       	pop	r22
    2c58:	5f 91       	pop	r21
    2c5a:	4f 91       	pop	r20
    2c5c:	3f 91       	pop	r19
    2c5e:	2f 91       	pop	r18
    2c60:	0f 90       	pop	r0
    2c62:	0b be       	out	0x3b, r0	; 59
    2c64:	0f 90       	pop	r0
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	0f 90       	pop	r0
    2c6a:	1f 90       	pop	r1
    2c6c:	18 95       	reti

00002c6e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    2c6e:	1f 92       	push	r1
    2c70:	0f 92       	push	r0
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	0f 92       	push	r0
    2c76:	11 24       	eor	r1, r1
    2c78:	0b b6       	in	r0, 0x3b	; 59
    2c7a:	0f 92       	push	r0
    2c7c:	2f 93       	push	r18
    2c7e:	3f 93       	push	r19
    2c80:	4f 93       	push	r20
    2c82:	5f 93       	push	r21
    2c84:	6f 93       	push	r22
    2c86:	7f 93       	push	r23
    2c88:	8f 93       	push	r24
    2c8a:	9f 93       	push	r25
    2c8c:	af 93       	push	r26
    2c8e:	bf 93       	push	r27
    2c90:	ef 93       	push	r30
    2c92:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    2c94:	e0 91 fa 20 	lds	r30, 0x20FA	; 0x8020fa <tc_tcc1_ccb_callback>
    2c98:	f0 91 fb 20 	lds	r31, 0x20FB	; 0x8020fb <tc_tcc1_ccb_callback+0x1>
    2c9c:	30 97       	sbiw	r30, 0x00	; 0
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    2ca0:	19 95       	eicall
	}
}
    2ca2:	ff 91       	pop	r31
    2ca4:	ef 91       	pop	r30
    2ca6:	bf 91       	pop	r27
    2ca8:	af 91       	pop	r26
    2caa:	9f 91       	pop	r25
    2cac:	8f 91       	pop	r24
    2cae:	7f 91       	pop	r23
    2cb0:	6f 91       	pop	r22
    2cb2:	5f 91       	pop	r21
    2cb4:	4f 91       	pop	r20
    2cb6:	3f 91       	pop	r19
    2cb8:	2f 91       	pop	r18
    2cba:	0f 90       	pop	r0
    2cbc:	0b be       	out	0x3b, r0	; 59
    2cbe:	0f 90       	pop	r0
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	0f 90       	pop	r0
    2cc4:	1f 90       	pop	r1
    2cc6:	18 95       	reti

00002cc8 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    2cc8:	1f 92       	push	r1
    2cca:	0f 92       	push	r0
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	0f 92       	push	r0
    2cd0:	11 24       	eor	r1, r1
    2cd2:	0b b6       	in	r0, 0x3b	; 59
    2cd4:	0f 92       	push	r0
    2cd6:	2f 93       	push	r18
    2cd8:	3f 93       	push	r19
    2cda:	4f 93       	push	r20
    2cdc:	5f 93       	push	r21
    2cde:	6f 93       	push	r22
    2ce0:	7f 93       	push	r23
    2ce2:	8f 93       	push	r24
    2ce4:	9f 93       	push	r25
    2ce6:	af 93       	push	r26
    2ce8:	bf 93       	push	r27
    2cea:	ef 93       	push	r30
    2cec:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    2cee:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <tc_tcd0_ovf_callback>
    2cf2:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <tc_tcd0_ovf_callback+0x1>
    2cf6:	30 97       	sbiw	r30, 0x00	; 0
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    2cfa:	19 95       	eicall
	}
}
    2cfc:	ff 91       	pop	r31
    2cfe:	ef 91       	pop	r30
    2d00:	bf 91       	pop	r27
    2d02:	af 91       	pop	r26
    2d04:	9f 91       	pop	r25
    2d06:	8f 91       	pop	r24
    2d08:	7f 91       	pop	r23
    2d0a:	6f 91       	pop	r22
    2d0c:	5f 91       	pop	r21
    2d0e:	4f 91       	pop	r20
    2d10:	3f 91       	pop	r19
    2d12:	2f 91       	pop	r18
    2d14:	0f 90       	pop	r0
    2d16:	0b be       	out	0x3b, r0	; 59
    2d18:	0f 90       	pop	r0
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	0f 90       	pop	r0
    2d1e:	1f 90       	pop	r1
    2d20:	18 95       	reti

00002d22 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    2d22:	1f 92       	push	r1
    2d24:	0f 92       	push	r0
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	0f 92       	push	r0
    2d2a:	11 24       	eor	r1, r1
    2d2c:	0b b6       	in	r0, 0x3b	; 59
    2d2e:	0f 92       	push	r0
    2d30:	2f 93       	push	r18
    2d32:	3f 93       	push	r19
    2d34:	4f 93       	push	r20
    2d36:	5f 93       	push	r21
    2d38:	6f 93       	push	r22
    2d3a:	7f 93       	push	r23
    2d3c:	8f 93       	push	r24
    2d3e:	9f 93       	push	r25
    2d40:	af 93       	push	r26
    2d42:	bf 93       	push	r27
    2d44:	ef 93       	push	r30
    2d46:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    2d48:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <tc_tcd0_err_callback>
    2d4c:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <tc_tcd0_err_callback+0x1>
    2d50:	30 97       	sbiw	r30, 0x00	; 0
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <__vector_78+0x34>
		tc_tcd0_err_callback();
    2d54:	19 95       	eicall
	}
}
    2d56:	ff 91       	pop	r31
    2d58:	ef 91       	pop	r30
    2d5a:	bf 91       	pop	r27
    2d5c:	af 91       	pop	r26
    2d5e:	9f 91       	pop	r25
    2d60:	8f 91       	pop	r24
    2d62:	7f 91       	pop	r23
    2d64:	6f 91       	pop	r22
    2d66:	5f 91       	pop	r21
    2d68:	4f 91       	pop	r20
    2d6a:	3f 91       	pop	r19
    2d6c:	2f 91       	pop	r18
    2d6e:	0f 90       	pop	r0
    2d70:	0b be       	out	0x3b, r0	; 59
    2d72:	0f 90       	pop	r0
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	0f 90       	pop	r0
    2d78:	1f 90       	pop	r1
    2d7a:	18 95       	reti

00002d7c <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    2d7c:	1f 92       	push	r1
    2d7e:	0f 92       	push	r0
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	0f 92       	push	r0
    2d84:	11 24       	eor	r1, r1
    2d86:	0b b6       	in	r0, 0x3b	; 59
    2d88:	0f 92       	push	r0
    2d8a:	2f 93       	push	r18
    2d8c:	3f 93       	push	r19
    2d8e:	4f 93       	push	r20
    2d90:	5f 93       	push	r21
    2d92:	6f 93       	push	r22
    2d94:	7f 93       	push	r23
    2d96:	8f 93       	push	r24
    2d98:	9f 93       	push	r25
    2d9a:	af 93       	push	r26
    2d9c:	bf 93       	push	r27
    2d9e:	ef 93       	push	r30
    2da0:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    2da2:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <tc_tcd0_cca_callback>
    2da6:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <tc_tcd0_cca_callback+0x1>
    2daa:	30 97       	sbiw	r30, 0x00	; 0
    2dac:	09 f0       	breq	.+2      	; 0x2db0 <__vector_79+0x34>
		tc_tcd0_cca_callback();
    2dae:	19 95       	eicall
	}
}
    2db0:	ff 91       	pop	r31
    2db2:	ef 91       	pop	r30
    2db4:	bf 91       	pop	r27
    2db6:	af 91       	pop	r26
    2db8:	9f 91       	pop	r25
    2dba:	8f 91       	pop	r24
    2dbc:	7f 91       	pop	r23
    2dbe:	6f 91       	pop	r22
    2dc0:	5f 91       	pop	r21
    2dc2:	4f 91       	pop	r20
    2dc4:	3f 91       	pop	r19
    2dc6:	2f 91       	pop	r18
    2dc8:	0f 90       	pop	r0
    2dca:	0b be       	out	0x3b, r0	; 59
    2dcc:	0f 90       	pop	r0
    2dce:	0f be       	out	0x3f, r0	; 63
    2dd0:	0f 90       	pop	r0
    2dd2:	1f 90       	pop	r1
    2dd4:	18 95       	reti

00002dd6 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    2dd6:	1f 92       	push	r1
    2dd8:	0f 92       	push	r0
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	0f 92       	push	r0
    2dde:	11 24       	eor	r1, r1
    2de0:	0b b6       	in	r0, 0x3b	; 59
    2de2:	0f 92       	push	r0
    2de4:	2f 93       	push	r18
    2de6:	3f 93       	push	r19
    2de8:	4f 93       	push	r20
    2dea:	5f 93       	push	r21
    2dec:	6f 93       	push	r22
    2dee:	7f 93       	push	r23
    2df0:	8f 93       	push	r24
    2df2:	9f 93       	push	r25
    2df4:	af 93       	push	r26
    2df6:	bf 93       	push	r27
    2df8:	ef 93       	push	r30
    2dfa:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    2dfc:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <tc_tcd0_ccb_callback>
    2e00:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <tc_tcd0_ccb_callback+0x1>
    2e04:	30 97       	sbiw	r30, 0x00	; 0
    2e06:	09 f0       	breq	.+2      	; 0x2e0a <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    2e08:	19 95       	eicall
	}
}
    2e0a:	ff 91       	pop	r31
    2e0c:	ef 91       	pop	r30
    2e0e:	bf 91       	pop	r27
    2e10:	af 91       	pop	r26
    2e12:	9f 91       	pop	r25
    2e14:	8f 91       	pop	r24
    2e16:	7f 91       	pop	r23
    2e18:	6f 91       	pop	r22
    2e1a:	5f 91       	pop	r21
    2e1c:	4f 91       	pop	r20
    2e1e:	3f 91       	pop	r19
    2e20:	2f 91       	pop	r18
    2e22:	0f 90       	pop	r0
    2e24:	0b be       	out	0x3b, r0	; 59
    2e26:	0f 90       	pop	r0
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	0f 90       	pop	r0
    2e2c:	1f 90       	pop	r1
    2e2e:	18 95       	reti

00002e30 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    2e30:	1f 92       	push	r1
    2e32:	0f 92       	push	r0
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	0f 92       	push	r0
    2e38:	11 24       	eor	r1, r1
    2e3a:	0b b6       	in	r0, 0x3b	; 59
    2e3c:	0f 92       	push	r0
    2e3e:	2f 93       	push	r18
    2e40:	3f 93       	push	r19
    2e42:	4f 93       	push	r20
    2e44:	5f 93       	push	r21
    2e46:	6f 93       	push	r22
    2e48:	7f 93       	push	r23
    2e4a:	8f 93       	push	r24
    2e4c:	9f 93       	push	r25
    2e4e:	af 93       	push	r26
    2e50:	bf 93       	push	r27
    2e52:	ef 93       	push	r30
    2e54:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    2e56:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <tc_tcd0_ccc_callback>
    2e5a:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <tc_tcd0_ccc_callback+0x1>
    2e5e:	30 97       	sbiw	r30, 0x00	; 0
    2e60:	09 f0       	breq	.+2      	; 0x2e64 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    2e62:	19 95       	eicall
	}
}
    2e64:	ff 91       	pop	r31
    2e66:	ef 91       	pop	r30
    2e68:	bf 91       	pop	r27
    2e6a:	af 91       	pop	r26
    2e6c:	9f 91       	pop	r25
    2e6e:	8f 91       	pop	r24
    2e70:	7f 91       	pop	r23
    2e72:	6f 91       	pop	r22
    2e74:	5f 91       	pop	r21
    2e76:	4f 91       	pop	r20
    2e78:	3f 91       	pop	r19
    2e7a:	2f 91       	pop	r18
    2e7c:	0f 90       	pop	r0
    2e7e:	0b be       	out	0x3b, r0	; 59
    2e80:	0f 90       	pop	r0
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	0f 90       	pop	r0
    2e86:	1f 90       	pop	r1
    2e88:	18 95       	reti

00002e8a <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    2e8a:	1f 92       	push	r1
    2e8c:	0f 92       	push	r0
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	0f 92       	push	r0
    2e92:	11 24       	eor	r1, r1
    2e94:	0b b6       	in	r0, 0x3b	; 59
    2e96:	0f 92       	push	r0
    2e98:	2f 93       	push	r18
    2e9a:	3f 93       	push	r19
    2e9c:	4f 93       	push	r20
    2e9e:	5f 93       	push	r21
    2ea0:	6f 93       	push	r22
    2ea2:	7f 93       	push	r23
    2ea4:	8f 93       	push	r24
    2ea6:	9f 93       	push	r25
    2ea8:	af 93       	push	r26
    2eaa:	bf 93       	push	r27
    2eac:	ef 93       	push	r30
    2eae:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    2eb0:	e0 91 ee 20 	lds	r30, 0x20EE	; 0x8020ee <tc_tcd0_ccd_callback>
    2eb4:	f0 91 ef 20 	lds	r31, 0x20EF	; 0x8020ef <tc_tcd0_ccd_callback+0x1>
    2eb8:	30 97       	sbiw	r30, 0x00	; 0
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    2ebc:	19 95       	eicall
	}
}
    2ebe:	ff 91       	pop	r31
    2ec0:	ef 91       	pop	r30
    2ec2:	bf 91       	pop	r27
    2ec4:	af 91       	pop	r26
    2ec6:	9f 91       	pop	r25
    2ec8:	8f 91       	pop	r24
    2eca:	7f 91       	pop	r23
    2ecc:	6f 91       	pop	r22
    2ece:	5f 91       	pop	r21
    2ed0:	4f 91       	pop	r20
    2ed2:	3f 91       	pop	r19
    2ed4:	2f 91       	pop	r18
    2ed6:	0f 90       	pop	r0
    2ed8:	0b be       	out	0x3b, r0	; 59
    2eda:	0f 90       	pop	r0
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	0f 90       	pop	r0
    2ee0:	1f 90       	pop	r1
    2ee2:	18 95       	reti

00002ee4 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    2ee4:	1f 92       	push	r1
    2ee6:	0f 92       	push	r0
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	0f 92       	push	r0
    2eec:	11 24       	eor	r1, r1
    2eee:	0b b6       	in	r0, 0x3b	; 59
    2ef0:	0f 92       	push	r0
    2ef2:	2f 93       	push	r18
    2ef4:	3f 93       	push	r19
    2ef6:	4f 93       	push	r20
    2ef8:	5f 93       	push	r21
    2efa:	6f 93       	push	r22
    2efc:	7f 93       	push	r23
    2efe:	8f 93       	push	r24
    2f00:	9f 93       	push	r25
    2f02:	af 93       	push	r26
    2f04:	bf 93       	push	r27
    2f06:	ef 93       	push	r30
    2f08:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    2f0a:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <tc_tcd1_ovf_callback>
    2f0e:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <tc_tcd1_ovf_callback+0x1>
    2f12:	30 97       	sbiw	r30, 0x00	; 0
    2f14:	09 f0       	breq	.+2      	; 0x2f18 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    2f16:	19 95       	eicall
	}
}
    2f18:	ff 91       	pop	r31
    2f1a:	ef 91       	pop	r30
    2f1c:	bf 91       	pop	r27
    2f1e:	af 91       	pop	r26
    2f20:	9f 91       	pop	r25
    2f22:	8f 91       	pop	r24
    2f24:	7f 91       	pop	r23
    2f26:	6f 91       	pop	r22
    2f28:	5f 91       	pop	r21
    2f2a:	4f 91       	pop	r20
    2f2c:	3f 91       	pop	r19
    2f2e:	2f 91       	pop	r18
    2f30:	0f 90       	pop	r0
    2f32:	0b be       	out	0x3b, r0	; 59
    2f34:	0f 90       	pop	r0
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	0f 90       	pop	r0
    2f3a:	1f 90       	pop	r1
    2f3c:	18 95       	reti

00002f3e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    2f3e:	1f 92       	push	r1
    2f40:	0f 92       	push	r0
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	0f 92       	push	r0
    2f46:	11 24       	eor	r1, r1
    2f48:	0b b6       	in	r0, 0x3b	; 59
    2f4a:	0f 92       	push	r0
    2f4c:	2f 93       	push	r18
    2f4e:	3f 93       	push	r19
    2f50:	4f 93       	push	r20
    2f52:	5f 93       	push	r21
    2f54:	6f 93       	push	r22
    2f56:	7f 93       	push	r23
    2f58:	8f 93       	push	r24
    2f5a:	9f 93       	push	r25
    2f5c:	af 93       	push	r26
    2f5e:	bf 93       	push	r27
    2f60:	ef 93       	push	r30
    2f62:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    2f64:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <tc_tcd1_err_callback>
    2f68:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <tc_tcd1_err_callback+0x1>
    2f6c:	30 97       	sbiw	r30, 0x00	; 0
    2f6e:	09 f0       	breq	.+2      	; 0x2f72 <__vector_84+0x34>
		tc_tcd1_err_callback();
    2f70:	19 95       	eicall
	}
}
    2f72:	ff 91       	pop	r31
    2f74:	ef 91       	pop	r30
    2f76:	bf 91       	pop	r27
    2f78:	af 91       	pop	r26
    2f7a:	9f 91       	pop	r25
    2f7c:	8f 91       	pop	r24
    2f7e:	7f 91       	pop	r23
    2f80:	6f 91       	pop	r22
    2f82:	5f 91       	pop	r21
    2f84:	4f 91       	pop	r20
    2f86:	3f 91       	pop	r19
    2f88:	2f 91       	pop	r18
    2f8a:	0f 90       	pop	r0
    2f8c:	0b be       	out	0x3b, r0	; 59
    2f8e:	0f 90       	pop	r0
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	0f 90       	pop	r0
    2f94:	1f 90       	pop	r1
    2f96:	18 95       	reti

00002f98 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    2f98:	1f 92       	push	r1
    2f9a:	0f 92       	push	r0
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	0f 92       	push	r0
    2fa0:	11 24       	eor	r1, r1
    2fa2:	0b b6       	in	r0, 0x3b	; 59
    2fa4:	0f 92       	push	r0
    2fa6:	2f 93       	push	r18
    2fa8:	3f 93       	push	r19
    2faa:	4f 93       	push	r20
    2fac:	5f 93       	push	r21
    2fae:	6f 93       	push	r22
    2fb0:	7f 93       	push	r23
    2fb2:	8f 93       	push	r24
    2fb4:	9f 93       	push	r25
    2fb6:	af 93       	push	r26
    2fb8:	bf 93       	push	r27
    2fba:	ef 93       	push	r30
    2fbc:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    2fbe:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <tc_tcd1_cca_callback>
    2fc2:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <tc_tcd1_cca_callback+0x1>
    2fc6:	30 97       	sbiw	r30, 0x00	; 0
    2fc8:	09 f0       	breq	.+2      	; 0x2fcc <__vector_85+0x34>
		tc_tcd1_cca_callback();
    2fca:	19 95       	eicall
	}
}
    2fcc:	ff 91       	pop	r31
    2fce:	ef 91       	pop	r30
    2fd0:	bf 91       	pop	r27
    2fd2:	af 91       	pop	r26
    2fd4:	9f 91       	pop	r25
    2fd6:	8f 91       	pop	r24
    2fd8:	7f 91       	pop	r23
    2fda:	6f 91       	pop	r22
    2fdc:	5f 91       	pop	r21
    2fde:	4f 91       	pop	r20
    2fe0:	3f 91       	pop	r19
    2fe2:	2f 91       	pop	r18
    2fe4:	0f 90       	pop	r0
    2fe6:	0b be       	out	0x3b, r0	; 59
    2fe8:	0f 90       	pop	r0
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	0f 90       	pop	r0
    2fee:	1f 90       	pop	r1
    2ff0:	18 95       	reti

00002ff2 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    2ff2:	1f 92       	push	r1
    2ff4:	0f 92       	push	r0
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	0f 92       	push	r0
    2ffa:	11 24       	eor	r1, r1
    2ffc:	0b b6       	in	r0, 0x3b	; 59
    2ffe:	0f 92       	push	r0
    3000:	2f 93       	push	r18
    3002:	3f 93       	push	r19
    3004:	4f 93       	push	r20
    3006:	5f 93       	push	r21
    3008:	6f 93       	push	r22
    300a:	7f 93       	push	r23
    300c:	8f 93       	push	r24
    300e:	9f 93       	push	r25
    3010:	af 93       	push	r26
    3012:	bf 93       	push	r27
    3014:	ef 93       	push	r30
    3016:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    3018:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <tc_tcd1_ccb_callback>
    301c:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <tc_tcd1_ccb_callback+0x1>
    3020:	30 97       	sbiw	r30, 0x00	; 0
    3022:	09 f0       	breq	.+2      	; 0x3026 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    3024:	19 95       	eicall
	}
}
    3026:	ff 91       	pop	r31
    3028:	ef 91       	pop	r30
    302a:	bf 91       	pop	r27
    302c:	af 91       	pop	r26
    302e:	9f 91       	pop	r25
    3030:	8f 91       	pop	r24
    3032:	7f 91       	pop	r23
    3034:	6f 91       	pop	r22
    3036:	5f 91       	pop	r21
    3038:	4f 91       	pop	r20
    303a:	3f 91       	pop	r19
    303c:	2f 91       	pop	r18
    303e:	0f 90       	pop	r0
    3040:	0b be       	out	0x3b, r0	; 59
    3042:	0f 90       	pop	r0
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	0f 90       	pop	r0
    3048:	1f 90       	pop	r1
    304a:	18 95       	reti

0000304c <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    304c:	1f 92       	push	r1
    304e:	0f 92       	push	r0
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	0f 92       	push	r0
    3054:	11 24       	eor	r1, r1
    3056:	0b b6       	in	r0, 0x3b	; 59
    3058:	0f 92       	push	r0
    305a:	2f 93       	push	r18
    305c:	3f 93       	push	r19
    305e:	4f 93       	push	r20
    3060:	5f 93       	push	r21
    3062:	6f 93       	push	r22
    3064:	7f 93       	push	r23
    3066:	8f 93       	push	r24
    3068:	9f 93       	push	r25
    306a:	af 93       	push	r26
    306c:	bf 93       	push	r27
    306e:	ef 93       	push	r30
    3070:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    3072:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <tc_tce0_ovf_callback>
    3076:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <tc_tce0_ovf_callback+0x1>
    307a:	30 97       	sbiw	r30, 0x00	; 0
    307c:	09 f0       	breq	.+2      	; 0x3080 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    307e:	19 95       	eicall
	}
}
    3080:	ff 91       	pop	r31
    3082:	ef 91       	pop	r30
    3084:	bf 91       	pop	r27
    3086:	af 91       	pop	r26
    3088:	9f 91       	pop	r25
    308a:	8f 91       	pop	r24
    308c:	7f 91       	pop	r23
    308e:	6f 91       	pop	r22
    3090:	5f 91       	pop	r21
    3092:	4f 91       	pop	r20
    3094:	3f 91       	pop	r19
    3096:	2f 91       	pop	r18
    3098:	0f 90       	pop	r0
    309a:	0b be       	out	0x3b, r0	; 59
    309c:	0f 90       	pop	r0
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	0f 90       	pop	r0
    30a2:	1f 90       	pop	r1
    30a4:	18 95       	reti

000030a6 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    30a6:	1f 92       	push	r1
    30a8:	0f 92       	push	r0
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	0f 92       	push	r0
    30ae:	11 24       	eor	r1, r1
    30b0:	0b b6       	in	r0, 0x3b	; 59
    30b2:	0f 92       	push	r0
    30b4:	2f 93       	push	r18
    30b6:	3f 93       	push	r19
    30b8:	4f 93       	push	r20
    30ba:	5f 93       	push	r21
    30bc:	6f 93       	push	r22
    30be:	7f 93       	push	r23
    30c0:	8f 93       	push	r24
    30c2:	9f 93       	push	r25
    30c4:	af 93       	push	r26
    30c6:	bf 93       	push	r27
    30c8:	ef 93       	push	r30
    30ca:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    30cc:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <tc_tce0_err_callback>
    30d0:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <tc_tce0_err_callback+0x1>
    30d4:	30 97       	sbiw	r30, 0x00	; 0
    30d6:	09 f0       	breq	.+2      	; 0x30da <__vector_48+0x34>
		tc_tce0_err_callback();
    30d8:	19 95       	eicall
	}
}
    30da:	ff 91       	pop	r31
    30dc:	ef 91       	pop	r30
    30de:	bf 91       	pop	r27
    30e0:	af 91       	pop	r26
    30e2:	9f 91       	pop	r25
    30e4:	8f 91       	pop	r24
    30e6:	7f 91       	pop	r23
    30e8:	6f 91       	pop	r22
    30ea:	5f 91       	pop	r21
    30ec:	4f 91       	pop	r20
    30ee:	3f 91       	pop	r19
    30f0:	2f 91       	pop	r18
    30f2:	0f 90       	pop	r0
    30f4:	0b be       	out	0x3b, r0	; 59
    30f6:	0f 90       	pop	r0
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	0f 90       	pop	r0
    30fc:	1f 90       	pop	r1
    30fe:	18 95       	reti

00003100 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    3100:	1f 92       	push	r1
    3102:	0f 92       	push	r0
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	0f 92       	push	r0
    3108:	11 24       	eor	r1, r1
    310a:	0b b6       	in	r0, 0x3b	; 59
    310c:	0f 92       	push	r0
    310e:	2f 93       	push	r18
    3110:	3f 93       	push	r19
    3112:	4f 93       	push	r20
    3114:	5f 93       	push	r21
    3116:	6f 93       	push	r22
    3118:	7f 93       	push	r23
    311a:	8f 93       	push	r24
    311c:	9f 93       	push	r25
    311e:	af 93       	push	r26
    3120:	bf 93       	push	r27
    3122:	ef 93       	push	r30
    3124:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    3126:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <tc_tce0_cca_callback>
    312a:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <tc_tce0_cca_callback+0x1>
    312e:	30 97       	sbiw	r30, 0x00	; 0
    3130:	09 f0       	breq	.+2      	; 0x3134 <__vector_49+0x34>
		tc_tce0_cca_callback();
    3132:	19 95       	eicall
	}
}
    3134:	ff 91       	pop	r31
    3136:	ef 91       	pop	r30
    3138:	bf 91       	pop	r27
    313a:	af 91       	pop	r26
    313c:	9f 91       	pop	r25
    313e:	8f 91       	pop	r24
    3140:	7f 91       	pop	r23
    3142:	6f 91       	pop	r22
    3144:	5f 91       	pop	r21
    3146:	4f 91       	pop	r20
    3148:	3f 91       	pop	r19
    314a:	2f 91       	pop	r18
    314c:	0f 90       	pop	r0
    314e:	0b be       	out	0x3b, r0	; 59
    3150:	0f 90       	pop	r0
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	0f 90       	pop	r0
    3156:	1f 90       	pop	r1
    3158:	18 95       	reti

0000315a <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    315a:	1f 92       	push	r1
    315c:	0f 92       	push	r0
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	0f 92       	push	r0
    3162:	11 24       	eor	r1, r1
    3164:	0b b6       	in	r0, 0x3b	; 59
    3166:	0f 92       	push	r0
    3168:	2f 93       	push	r18
    316a:	3f 93       	push	r19
    316c:	4f 93       	push	r20
    316e:	5f 93       	push	r21
    3170:	6f 93       	push	r22
    3172:	7f 93       	push	r23
    3174:	8f 93       	push	r24
    3176:	9f 93       	push	r25
    3178:	af 93       	push	r26
    317a:	bf 93       	push	r27
    317c:	ef 93       	push	r30
    317e:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    3180:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <tc_tce0_ccb_callback>
    3184:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <tc_tce0_ccb_callback+0x1>
    3188:	30 97       	sbiw	r30, 0x00	; 0
    318a:	09 f0       	breq	.+2      	; 0x318e <__vector_50+0x34>
		tc_tce0_ccb_callback();
    318c:	19 95       	eicall
	}
}
    318e:	ff 91       	pop	r31
    3190:	ef 91       	pop	r30
    3192:	bf 91       	pop	r27
    3194:	af 91       	pop	r26
    3196:	9f 91       	pop	r25
    3198:	8f 91       	pop	r24
    319a:	7f 91       	pop	r23
    319c:	6f 91       	pop	r22
    319e:	5f 91       	pop	r21
    31a0:	4f 91       	pop	r20
    31a2:	3f 91       	pop	r19
    31a4:	2f 91       	pop	r18
    31a6:	0f 90       	pop	r0
    31a8:	0b be       	out	0x3b, r0	; 59
    31aa:	0f 90       	pop	r0
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	0f 90       	pop	r0
    31b0:	1f 90       	pop	r1
    31b2:	18 95       	reti

000031b4 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    31b4:	1f 92       	push	r1
    31b6:	0f 92       	push	r0
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	0f 92       	push	r0
    31bc:	11 24       	eor	r1, r1
    31be:	0b b6       	in	r0, 0x3b	; 59
    31c0:	0f 92       	push	r0
    31c2:	2f 93       	push	r18
    31c4:	3f 93       	push	r19
    31c6:	4f 93       	push	r20
    31c8:	5f 93       	push	r21
    31ca:	6f 93       	push	r22
    31cc:	7f 93       	push	r23
    31ce:	8f 93       	push	r24
    31d0:	9f 93       	push	r25
    31d2:	af 93       	push	r26
    31d4:	bf 93       	push	r27
    31d6:	ef 93       	push	r30
    31d8:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    31da:	e0 91 dc 20 	lds	r30, 0x20DC	; 0x8020dc <tc_tce0_ccc_callback>
    31de:	f0 91 dd 20 	lds	r31, 0x20DD	; 0x8020dd <tc_tce0_ccc_callback+0x1>
    31e2:	30 97       	sbiw	r30, 0x00	; 0
    31e4:	09 f0       	breq	.+2      	; 0x31e8 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    31e6:	19 95       	eicall
	}
}
    31e8:	ff 91       	pop	r31
    31ea:	ef 91       	pop	r30
    31ec:	bf 91       	pop	r27
    31ee:	af 91       	pop	r26
    31f0:	9f 91       	pop	r25
    31f2:	8f 91       	pop	r24
    31f4:	7f 91       	pop	r23
    31f6:	6f 91       	pop	r22
    31f8:	5f 91       	pop	r21
    31fa:	4f 91       	pop	r20
    31fc:	3f 91       	pop	r19
    31fe:	2f 91       	pop	r18
    3200:	0f 90       	pop	r0
    3202:	0b be       	out	0x3b, r0	; 59
    3204:	0f 90       	pop	r0
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	0f 90       	pop	r0
    320a:	1f 90       	pop	r1
    320c:	18 95       	reti

0000320e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    320e:	1f 92       	push	r1
    3210:	0f 92       	push	r0
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	0f 92       	push	r0
    3216:	11 24       	eor	r1, r1
    3218:	0b b6       	in	r0, 0x3b	; 59
    321a:	0f 92       	push	r0
    321c:	2f 93       	push	r18
    321e:	3f 93       	push	r19
    3220:	4f 93       	push	r20
    3222:	5f 93       	push	r21
    3224:	6f 93       	push	r22
    3226:	7f 93       	push	r23
    3228:	8f 93       	push	r24
    322a:	9f 93       	push	r25
    322c:	af 93       	push	r26
    322e:	bf 93       	push	r27
    3230:	ef 93       	push	r30
    3232:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    3234:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <tc_tce0_ccd_callback>
    3238:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <tc_tce0_ccd_callback+0x1>
    323c:	30 97       	sbiw	r30, 0x00	; 0
    323e:	09 f0       	breq	.+2      	; 0x3242 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    3240:	19 95       	eicall
	}
}
    3242:	ff 91       	pop	r31
    3244:	ef 91       	pop	r30
    3246:	bf 91       	pop	r27
    3248:	af 91       	pop	r26
    324a:	9f 91       	pop	r25
    324c:	8f 91       	pop	r24
    324e:	7f 91       	pop	r23
    3250:	6f 91       	pop	r22
    3252:	5f 91       	pop	r21
    3254:	4f 91       	pop	r20
    3256:	3f 91       	pop	r19
    3258:	2f 91       	pop	r18
    325a:	0f 90       	pop	r0
    325c:	0b be       	out	0x3b, r0	; 59
    325e:	0f 90       	pop	r0
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	0f 90       	pop	r0
    3264:	1f 90       	pop	r1
    3266:	18 95       	reti

00003268 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    3268:	1f 92       	push	r1
    326a:	0f 92       	push	r0
    326c:	0f b6       	in	r0, 0x3f	; 63
    326e:	0f 92       	push	r0
    3270:	11 24       	eor	r1, r1
    3272:	0b b6       	in	r0, 0x3b	; 59
    3274:	0f 92       	push	r0
    3276:	2f 93       	push	r18
    3278:	3f 93       	push	r19
    327a:	4f 93       	push	r20
    327c:	5f 93       	push	r21
    327e:	6f 93       	push	r22
    3280:	7f 93       	push	r23
    3282:	8f 93       	push	r24
    3284:	9f 93       	push	r25
    3286:	af 93       	push	r26
    3288:	bf 93       	push	r27
    328a:	ef 93       	push	r30
    328c:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    328e:	e0 91 d8 20 	lds	r30, 0x20D8	; 0x8020d8 <tc_tce1_ovf_callback>
    3292:	f0 91 d9 20 	lds	r31, 0x20D9	; 0x8020d9 <tc_tce1_ovf_callback+0x1>
    3296:	30 97       	sbiw	r30, 0x00	; 0
    3298:	09 f0       	breq	.+2      	; 0x329c <__vector_53+0x34>
		tc_tce1_ovf_callback();
    329a:	19 95       	eicall
	}
}
    329c:	ff 91       	pop	r31
    329e:	ef 91       	pop	r30
    32a0:	bf 91       	pop	r27
    32a2:	af 91       	pop	r26
    32a4:	9f 91       	pop	r25
    32a6:	8f 91       	pop	r24
    32a8:	7f 91       	pop	r23
    32aa:	6f 91       	pop	r22
    32ac:	5f 91       	pop	r21
    32ae:	4f 91       	pop	r20
    32b0:	3f 91       	pop	r19
    32b2:	2f 91       	pop	r18
    32b4:	0f 90       	pop	r0
    32b6:	0b be       	out	0x3b, r0	; 59
    32b8:	0f 90       	pop	r0
    32ba:	0f be       	out	0x3f, r0	; 63
    32bc:	0f 90       	pop	r0
    32be:	1f 90       	pop	r1
    32c0:	18 95       	reti

000032c2 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    32c2:	1f 92       	push	r1
    32c4:	0f 92       	push	r0
    32c6:	0f b6       	in	r0, 0x3f	; 63
    32c8:	0f 92       	push	r0
    32ca:	11 24       	eor	r1, r1
    32cc:	0b b6       	in	r0, 0x3b	; 59
    32ce:	0f 92       	push	r0
    32d0:	2f 93       	push	r18
    32d2:	3f 93       	push	r19
    32d4:	4f 93       	push	r20
    32d6:	5f 93       	push	r21
    32d8:	6f 93       	push	r22
    32da:	7f 93       	push	r23
    32dc:	8f 93       	push	r24
    32de:	9f 93       	push	r25
    32e0:	af 93       	push	r26
    32e2:	bf 93       	push	r27
    32e4:	ef 93       	push	r30
    32e6:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    32e8:	e0 91 d6 20 	lds	r30, 0x20D6	; 0x8020d6 <tc_tce1_err_callback>
    32ec:	f0 91 d7 20 	lds	r31, 0x20D7	; 0x8020d7 <tc_tce1_err_callback+0x1>
    32f0:	30 97       	sbiw	r30, 0x00	; 0
    32f2:	09 f0       	breq	.+2      	; 0x32f6 <__vector_54+0x34>
		tc_tce1_err_callback();
    32f4:	19 95       	eicall
	}
}
    32f6:	ff 91       	pop	r31
    32f8:	ef 91       	pop	r30
    32fa:	bf 91       	pop	r27
    32fc:	af 91       	pop	r26
    32fe:	9f 91       	pop	r25
    3300:	8f 91       	pop	r24
    3302:	7f 91       	pop	r23
    3304:	6f 91       	pop	r22
    3306:	5f 91       	pop	r21
    3308:	4f 91       	pop	r20
    330a:	3f 91       	pop	r19
    330c:	2f 91       	pop	r18
    330e:	0f 90       	pop	r0
    3310:	0b be       	out	0x3b, r0	; 59
    3312:	0f 90       	pop	r0
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	0f 90       	pop	r0
    3318:	1f 90       	pop	r1
    331a:	18 95       	reti

0000331c <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    331c:	1f 92       	push	r1
    331e:	0f 92       	push	r0
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	0f 92       	push	r0
    3324:	11 24       	eor	r1, r1
    3326:	0b b6       	in	r0, 0x3b	; 59
    3328:	0f 92       	push	r0
    332a:	2f 93       	push	r18
    332c:	3f 93       	push	r19
    332e:	4f 93       	push	r20
    3330:	5f 93       	push	r21
    3332:	6f 93       	push	r22
    3334:	7f 93       	push	r23
    3336:	8f 93       	push	r24
    3338:	9f 93       	push	r25
    333a:	af 93       	push	r26
    333c:	bf 93       	push	r27
    333e:	ef 93       	push	r30
    3340:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    3342:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <tc_tce1_cca_callback>
    3346:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <tc_tce1_cca_callback+0x1>
    334a:	30 97       	sbiw	r30, 0x00	; 0
    334c:	09 f0       	breq	.+2      	; 0x3350 <__vector_55+0x34>
		tc_tce1_cca_callback();
    334e:	19 95       	eicall
	}
}
    3350:	ff 91       	pop	r31
    3352:	ef 91       	pop	r30
    3354:	bf 91       	pop	r27
    3356:	af 91       	pop	r26
    3358:	9f 91       	pop	r25
    335a:	8f 91       	pop	r24
    335c:	7f 91       	pop	r23
    335e:	6f 91       	pop	r22
    3360:	5f 91       	pop	r21
    3362:	4f 91       	pop	r20
    3364:	3f 91       	pop	r19
    3366:	2f 91       	pop	r18
    3368:	0f 90       	pop	r0
    336a:	0b be       	out	0x3b, r0	; 59
    336c:	0f 90       	pop	r0
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	0f 90       	pop	r0
    3372:	1f 90       	pop	r1
    3374:	18 95       	reti

00003376 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    3376:	1f 92       	push	r1
    3378:	0f 92       	push	r0
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	0f 92       	push	r0
    337e:	11 24       	eor	r1, r1
    3380:	0b b6       	in	r0, 0x3b	; 59
    3382:	0f 92       	push	r0
    3384:	2f 93       	push	r18
    3386:	3f 93       	push	r19
    3388:	4f 93       	push	r20
    338a:	5f 93       	push	r21
    338c:	6f 93       	push	r22
    338e:	7f 93       	push	r23
    3390:	8f 93       	push	r24
    3392:	9f 93       	push	r25
    3394:	af 93       	push	r26
    3396:	bf 93       	push	r27
    3398:	ef 93       	push	r30
    339a:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    339c:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <tc_tce1_ccb_callback>
    33a0:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <tc_tce1_ccb_callback+0x1>
    33a4:	30 97       	sbiw	r30, 0x00	; 0
    33a6:	09 f0       	breq	.+2      	; 0x33aa <__vector_56+0x34>
		tc_tce1_ccb_callback();
    33a8:	19 95       	eicall
	}
}
    33aa:	ff 91       	pop	r31
    33ac:	ef 91       	pop	r30
    33ae:	bf 91       	pop	r27
    33b0:	af 91       	pop	r26
    33b2:	9f 91       	pop	r25
    33b4:	8f 91       	pop	r24
    33b6:	7f 91       	pop	r23
    33b8:	6f 91       	pop	r22
    33ba:	5f 91       	pop	r21
    33bc:	4f 91       	pop	r20
    33be:	3f 91       	pop	r19
    33c0:	2f 91       	pop	r18
    33c2:	0f 90       	pop	r0
    33c4:	0b be       	out	0x3b, r0	; 59
    33c6:	0f 90       	pop	r0
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	0f 90       	pop	r0
    33cc:	1f 90       	pop	r1
    33ce:	18 95       	reti

000033d0 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    33d0:	1f 92       	push	r1
    33d2:	0f 92       	push	r0
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	0f 92       	push	r0
    33d8:	11 24       	eor	r1, r1
    33da:	0b b6       	in	r0, 0x3b	; 59
    33dc:	0f 92       	push	r0
    33de:	2f 93       	push	r18
    33e0:	3f 93       	push	r19
    33e2:	4f 93       	push	r20
    33e4:	5f 93       	push	r21
    33e6:	6f 93       	push	r22
    33e8:	7f 93       	push	r23
    33ea:	8f 93       	push	r24
    33ec:	9f 93       	push	r25
    33ee:	af 93       	push	r26
    33f0:	bf 93       	push	r27
    33f2:	ef 93       	push	r30
    33f4:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    33f6:	e0 91 d0 20 	lds	r30, 0x20D0	; 0x8020d0 <tc_tcf0_ovf_callback>
    33fa:	f0 91 d1 20 	lds	r31, 0x20D1	; 0x8020d1 <tc_tcf0_ovf_callback+0x1>
    33fe:	30 97       	sbiw	r30, 0x00	; 0
    3400:	09 f0       	breq	.+2      	; 0x3404 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    3402:	19 95       	eicall
	}
}
    3404:	ff 91       	pop	r31
    3406:	ef 91       	pop	r30
    3408:	bf 91       	pop	r27
    340a:	af 91       	pop	r26
    340c:	9f 91       	pop	r25
    340e:	8f 91       	pop	r24
    3410:	7f 91       	pop	r23
    3412:	6f 91       	pop	r22
    3414:	5f 91       	pop	r21
    3416:	4f 91       	pop	r20
    3418:	3f 91       	pop	r19
    341a:	2f 91       	pop	r18
    341c:	0f 90       	pop	r0
    341e:	0b be       	out	0x3b, r0	; 59
    3420:	0f 90       	pop	r0
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	0f 90       	pop	r0
    3426:	1f 90       	pop	r1
    3428:	18 95       	reti

0000342a <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    342a:	1f 92       	push	r1
    342c:	0f 92       	push	r0
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	0f 92       	push	r0
    3432:	11 24       	eor	r1, r1
    3434:	0b b6       	in	r0, 0x3b	; 59
    3436:	0f 92       	push	r0
    3438:	2f 93       	push	r18
    343a:	3f 93       	push	r19
    343c:	4f 93       	push	r20
    343e:	5f 93       	push	r21
    3440:	6f 93       	push	r22
    3442:	7f 93       	push	r23
    3444:	8f 93       	push	r24
    3446:	9f 93       	push	r25
    3448:	af 93       	push	r26
    344a:	bf 93       	push	r27
    344c:	ef 93       	push	r30
    344e:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    3450:	e0 91 ce 20 	lds	r30, 0x20CE	; 0x8020ce <tc_tcf0_err_callback>
    3454:	f0 91 cf 20 	lds	r31, 0x20CF	; 0x8020cf <tc_tcf0_err_callback+0x1>
    3458:	30 97       	sbiw	r30, 0x00	; 0
    345a:	09 f0       	breq	.+2      	; 0x345e <__vector_109+0x34>
		tc_tcf0_err_callback();
    345c:	19 95       	eicall
	}
}
    345e:	ff 91       	pop	r31
    3460:	ef 91       	pop	r30
    3462:	bf 91       	pop	r27
    3464:	af 91       	pop	r26
    3466:	9f 91       	pop	r25
    3468:	8f 91       	pop	r24
    346a:	7f 91       	pop	r23
    346c:	6f 91       	pop	r22
    346e:	5f 91       	pop	r21
    3470:	4f 91       	pop	r20
    3472:	3f 91       	pop	r19
    3474:	2f 91       	pop	r18
    3476:	0f 90       	pop	r0
    3478:	0b be       	out	0x3b, r0	; 59
    347a:	0f 90       	pop	r0
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	0f 90       	pop	r0
    3480:	1f 90       	pop	r1
    3482:	18 95       	reti

00003484 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    3484:	1f 92       	push	r1
    3486:	0f 92       	push	r0
    3488:	0f b6       	in	r0, 0x3f	; 63
    348a:	0f 92       	push	r0
    348c:	11 24       	eor	r1, r1
    348e:	0b b6       	in	r0, 0x3b	; 59
    3490:	0f 92       	push	r0
    3492:	2f 93       	push	r18
    3494:	3f 93       	push	r19
    3496:	4f 93       	push	r20
    3498:	5f 93       	push	r21
    349a:	6f 93       	push	r22
    349c:	7f 93       	push	r23
    349e:	8f 93       	push	r24
    34a0:	9f 93       	push	r25
    34a2:	af 93       	push	r26
    34a4:	bf 93       	push	r27
    34a6:	ef 93       	push	r30
    34a8:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    34aa:	e0 91 cc 20 	lds	r30, 0x20CC	; 0x8020cc <tc_tcf0_cca_callback>
    34ae:	f0 91 cd 20 	lds	r31, 0x20CD	; 0x8020cd <tc_tcf0_cca_callback+0x1>
    34b2:	30 97       	sbiw	r30, 0x00	; 0
    34b4:	09 f0       	breq	.+2      	; 0x34b8 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    34b6:	19 95       	eicall
	}
}
    34b8:	ff 91       	pop	r31
    34ba:	ef 91       	pop	r30
    34bc:	bf 91       	pop	r27
    34be:	af 91       	pop	r26
    34c0:	9f 91       	pop	r25
    34c2:	8f 91       	pop	r24
    34c4:	7f 91       	pop	r23
    34c6:	6f 91       	pop	r22
    34c8:	5f 91       	pop	r21
    34ca:	4f 91       	pop	r20
    34cc:	3f 91       	pop	r19
    34ce:	2f 91       	pop	r18
    34d0:	0f 90       	pop	r0
    34d2:	0b be       	out	0x3b, r0	; 59
    34d4:	0f 90       	pop	r0
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	0f 90       	pop	r0
    34da:	1f 90       	pop	r1
    34dc:	18 95       	reti

000034de <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    34de:	1f 92       	push	r1
    34e0:	0f 92       	push	r0
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	0f 92       	push	r0
    34e6:	11 24       	eor	r1, r1
    34e8:	0b b6       	in	r0, 0x3b	; 59
    34ea:	0f 92       	push	r0
    34ec:	2f 93       	push	r18
    34ee:	3f 93       	push	r19
    34f0:	4f 93       	push	r20
    34f2:	5f 93       	push	r21
    34f4:	6f 93       	push	r22
    34f6:	7f 93       	push	r23
    34f8:	8f 93       	push	r24
    34fa:	9f 93       	push	r25
    34fc:	af 93       	push	r26
    34fe:	bf 93       	push	r27
    3500:	ef 93       	push	r30
    3502:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    3504:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <tc_tcf0_ccb_callback>
    3508:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <tc_tcf0_ccb_callback+0x1>
    350c:	30 97       	sbiw	r30, 0x00	; 0
    350e:	09 f0       	breq	.+2      	; 0x3512 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    3510:	19 95       	eicall
	}
}
    3512:	ff 91       	pop	r31
    3514:	ef 91       	pop	r30
    3516:	bf 91       	pop	r27
    3518:	af 91       	pop	r26
    351a:	9f 91       	pop	r25
    351c:	8f 91       	pop	r24
    351e:	7f 91       	pop	r23
    3520:	6f 91       	pop	r22
    3522:	5f 91       	pop	r21
    3524:	4f 91       	pop	r20
    3526:	3f 91       	pop	r19
    3528:	2f 91       	pop	r18
    352a:	0f 90       	pop	r0
    352c:	0b be       	out	0x3b, r0	; 59
    352e:	0f 90       	pop	r0
    3530:	0f be       	out	0x3f, r0	; 63
    3532:	0f 90       	pop	r0
    3534:	1f 90       	pop	r1
    3536:	18 95       	reti

00003538 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    3538:	1f 92       	push	r1
    353a:	0f 92       	push	r0
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	0f 92       	push	r0
    3540:	11 24       	eor	r1, r1
    3542:	0b b6       	in	r0, 0x3b	; 59
    3544:	0f 92       	push	r0
    3546:	2f 93       	push	r18
    3548:	3f 93       	push	r19
    354a:	4f 93       	push	r20
    354c:	5f 93       	push	r21
    354e:	6f 93       	push	r22
    3550:	7f 93       	push	r23
    3552:	8f 93       	push	r24
    3554:	9f 93       	push	r25
    3556:	af 93       	push	r26
    3558:	bf 93       	push	r27
    355a:	ef 93       	push	r30
    355c:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    355e:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <tc_tcf0_ccc_callback>
    3562:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <tc_tcf0_ccc_callback+0x1>
    3566:	30 97       	sbiw	r30, 0x00	; 0
    3568:	09 f0       	breq	.+2      	; 0x356c <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    356a:	19 95       	eicall
	}
}
    356c:	ff 91       	pop	r31
    356e:	ef 91       	pop	r30
    3570:	bf 91       	pop	r27
    3572:	af 91       	pop	r26
    3574:	9f 91       	pop	r25
    3576:	8f 91       	pop	r24
    3578:	7f 91       	pop	r23
    357a:	6f 91       	pop	r22
    357c:	5f 91       	pop	r21
    357e:	4f 91       	pop	r20
    3580:	3f 91       	pop	r19
    3582:	2f 91       	pop	r18
    3584:	0f 90       	pop	r0
    3586:	0b be       	out	0x3b, r0	; 59
    3588:	0f 90       	pop	r0
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	0f 90       	pop	r0
    358e:	1f 90       	pop	r1
    3590:	18 95       	reti

00003592 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    3592:	1f 92       	push	r1
    3594:	0f 92       	push	r0
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	0f 92       	push	r0
    359a:	11 24       	eor	r1, r1
    359c:	0b b6       	in	r0, 0x3b	; 59
    359e:	0f 92       	push	r0
    35a0:	2f 93       	push	r18
    35a2:	3f 93       	push	r19
    35a4:	4f 93       	push	r20
    35a6:	5f 93       	push	r21
    35a8:	6f 93       	push	r22
    35aa:	7f 93       	push	r23
    35ac:	8f 93       	push	r24
    35ae:	9f 93       	push	r25
    35b0:	af 93       	push	r26
    35b2:	bf 93       	push	r27
    35b4:	ef 93       	push	r30
    35b6:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    35b8:	e0 91 c6 20 	lds	r30, 0x20C6	; 0x8020c6 <__data_end>
    35bc:	f0 91 c7 20 	lds	r31, 0x20C7	; 0x8020c7 <__data_end+0x1>
    35c0:	30 97       	sbiw	r30, 0x00	; 0
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    35c4:	19 95       	eicall
	}
}
    35c6:	ff 91       	pop	r31
    35c8:	ef 91       	pop	r30
    35ca:	bf 91       	pop	r27
    35cc:	af 91       	pop	r26
    35ce:	9f 91       	pop	r25
    35d0:	8f 91       	pop	r24
    35d2:	7f 91       	pop	r23
    35d4:	6f 91       	pop	r22
    35d6:	5f 91       	pop	r21
    35d8:	4f 91       	pop	r20
    35da:	3f 91       	pop	r19
    35dc:	2f 91       	pop	r18
    35de:	0f 90       	pop	r0
    35e0:	0b be       	out	0x3b, r0	; 59
    35e2:	0f 90       	pop	r0
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	0f 90       	pop	r0
    35e8:	1f 90       	pop	r1
    35ea:	18 95       	reti

000035ec <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    35ec:	cf 93       	push	r28
    35ee:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    35f0:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <transfer>
    35f4:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <transfer+0x1>
    35f8:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    35fa:	83 ff       	sbrs	r24, 3
    35fc:	08 c0       	rjmp	.+16     	; 0x360e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    35fe:	88 60       	ori	r24, 0x08	; 8
    3600:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    3602:	83 e0       	ldi	r24, 0x03	; 3
    3604:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    3606:	86 ef       	ldi	r24, 0xF6	; 246
    3608:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <transfer+0xa>
    360c:	83 c0       	rjmp	.+262    	; 0x3714 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    360e:	98 2f       	mov	r25, r24
    3610:	94 71       	andi	r25, 0x14	; 20
    3612:	31 f0       	breq	.+12     	; 0x3620 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3614:	83 e0       	ldi	r24, 0x03	; 3
    3616:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    3618:	8f ef       	ldi	r24, 0xFF	; 255
    361a:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <transfer+0xa>
    361e:	7a c0       	rjmp	.+244    	; 0x3714 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    3620:	86 ff       	sbrs	r24, 6
    3622:	43 c0       	rjmp	.+134    	; 0x36aa <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    3624:	ce e0       	ldi	r28, 0x0E	; 14
    3626:	d1 e2       	ldi	r29, 0x21	; 33
    3628:	aa 81       	ldd	r26, Y+2	; 0x02
    362a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    362c:	8c 81       	ldd	r24, Y+4	; 0x04
    362e:	9d 81       	ldd	r25, Y+5	; 0x05
    3630:	14 96       	adiw	r26, 0x04	; 4
    3632:	2d 91       	ld	r18, X+
    3634:	3c 91       	ld	r19, X
    3636:	15 97       	sbiw	r26, 0x05	; 5
    3638:	82 17       	cp	r24, r18
    363a:	93 07       	cpc	r25, r19
    363c:	6c f4       	brge	.+26     	; 0x3658 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    363e:	9c 01       	movw	r18, r24
    3640:	2f 5f       	subi	r18, 0xFF	; 255
    3642:	3f 4f       	sbci	r19, 0xFF	; 255
    3644:	20 93 12 21 	sts	0x2112, r18	; 0x802112 <transfer+0x4>
    3648:	30 93 13 21 	sts	0x2113, r19	; 0x802113 <transfer+0x5>
    364c:	a8 0f       	add	r26, r24
    364e:	b9 1f       	adc	r27, r25
    3650:	11 96       	adiw	r26, 0x01	; 1
    3652:	8c 91       	ld	r24, X
    3654:	87 83       	std	Z+7, r24	; 0x07
    3656:	5e c0       	rjmp	.+188    	; 0x3714 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    3658:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <transfer+0x6>
    365c:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <transfer+0x7>
    3660:	18 96       	adiw	r26, 0x08	; 8
    3662:	2d 91       	ld	r18, X+
    3664:	3c 91       	ld	r19, X
    3666:	19 97       	sbiw	r26, 0x09	; 9
    3668:	82 17       	cp	r24, r18
    366a:	93 07       	cpc	r25, r19
    366c:	c8 f4       	brcc	.+50     	; 0x36a0 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    366e:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <transfer+0x8>
    3672:	22 23       	and	r18, r18
    3674:	21 f0       	breq	.+8      	; 0x367e <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    3676:	86 81       	ldd	r24, Z+6	; 0x06
    3678:	81 60       	ori	r24, 0x01	; 1
    367a:	86 83       	std	Z+6, r24	; 0x06
    367c:	4b c0       	rjmp	.+150    	; 0x3714 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    367e:	16 96       	adiw	r26, 0x06	; 6
    3680:	2d 91       	ld	r18, X+
    3682:	3c 91       	ld	r19, X
    3684:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    3686:	ac 01       	movw	r20, r24
    3688:	4f 5f       	subi	r20, 0xFF	; 255
    368a:	5f 4f       	sbci	r21, 0xFF	; 255
    368c:	40 93 14 21 	sts	0x2114, r20	; 0x802114 <transfer+0x6>
    3690:	50 93 15 21 	sts	0x2115, r21	; 0x802115 <transfer+0x7>
    3694:	d9 01       	movw	r26, r18
    3696:	a8 0f       	add	r26, r24
    3698:	b9 1f       	adc	r27, r25
    369a:	8c 91       	ld	r24, X
    369c:	87 83       	std	Z+7, r24	; 0x07
    369e:	3a c0       	rjmp	.+116    	; 0x3714 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    36a0:	83 e0       	ldi	r24, 0x03	; 3
    36a2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    36a4:	10 92 18 21 	sts	0x2118, r1	; 0x802118 <transfer+0xa>
    36a8:	35 c0       	rjmp	.+106    	; 0x3714 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    36aa:	88 23       	and	r24, r24
    36ac:	84 f5       	brge	.+96     	; 0x370e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    36ae:	ae e0       	ldi	r26, 0x0E	; 14
    36b0:	b1 e2       	ldi	r27, 0x21	; 33
    36b2:	12 96       	adiw	r26, 0x02	; 2
    36b4:	cd 91       	ld	r28, X+
    36b6:	dc 91       	ld	r29, X
    36b8:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    36ba:	16 96       	adiw	r26, 0x06	; 6
    36bc:	8d 91       	ld	r24, X+
    36be:	9c 91       	ld	r25, X
    36c0:	17 97       	sbiw	r26, 0x07	; 7
    36c2:	28 85       	ldd	r18, Y+8	; 0x08
    36c4:	39 85       	ldd	r19, Y+9	; 0x09
    36c6:	82 17       	cp	r24, r18
    36c8:	93 07       	cpc	r25, r19
    36ca:	d8 f4       	brcc	.+54     	; 0x3702 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    36cc:	6e 81       	ldd	r22, Y+6	; 0x06
    36ce:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    36d0:	9c 01       	movw	r18, r24
    36d2:	2f 5f       	subi	r18, 0xFF	; 255
    36d4:	3f 4f       	sbci	r19, 0xFF	; 255
    36d6:	20 93 14 21 	sts	0x2114, r18	; 0x802114 <transfer+0x6>
    36da:	30 93 15 21 	sts	0x2115, r19	; 0x802115 <transfer+0x7>
    36de:	47 81       	ldd	r20, Z+7	; 0x07
    36e0:	db 01       	movw	r26, r22
    36e2:	a8 0f       	add	r26, r24
    36e4:	b9 1f       	adc	r27, r25
    36e6:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    36e8:	88 85       	ldd	r24, Y+8	; 0x08
    36ea:	99 85       	ldd	r25, Y+9	; 0x09
    36ec:	28 17       	cp	r18, r24
    36ee:	39 07       	cpc	r19, r25
    36f0:	18 f4       	brcc	.+6      	; 0x36f8 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	83 83       	std	Z+3, r24	; 0x03
    36f6:	0e c0       	rjmp	.+28     	; 0x3714 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    36f8:	87 e0       	ldi	r24, 0x07	; 7
    36fa:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    36fc:	10 92 18 21 	sts	0x2118, r1	; 0x802118 <transfer+0xa>
    3700:	09 c0       	rjmp	.+18     	; 0x3714 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3702:	83 e0       	ldi	r24, 0x03	; 3
    3704:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    3706:	89 ef       	ldi	r24, 0xF9	; 249
    3708:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <transfer+0xa>
    370c:	03 c0       	rjmp	.+6      	; 0x3714 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    370e:	8b ef       	ldi	r24, 0xFB	; 251
    3710:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <transfer+0xa>
	}
}
    3714:	df 91       	pop	r29
    3716:	cf 91       	pop	r28
    3718:	08 95       	ret

0000371a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    371a:	1f 92       	push	r1
    371c:	0f 92       	push	r0
    371e:	0f b6       	in	r0, 0x3f	; 63
    3720:	0f 92       	push	r0
    3722:	11 24       	eor	r1, r1
    3724:	0b b6       	in	r0, 0x3b	; 59
    3726:	0f 92       	push	r0
    3728:	2f 93       	push	r18
    372a:	3f 93       	push	r19
    372c:	4f 93       	push	r20
    372e:	5f 93       	push	r21
    3730:	6f 93       	push	r22
    3732:	7f 93       	push	r23
    3734:	8f 93       	push	r24
    3736:	9f 93       	push	r25
    3738:	af 93       	push	r26
    373a:	bf 93       	push	r27
    373c:	ef 93       	push	r30
    373e:	ff 93       	push	r31
    3740:	55 df       	rcall	.-342    	; 0x35ec <twim_interrupt_handler>
    3742:	ff 91       	pop	r31
    3744:	ef 91       	pop	r30
    3746:	bf 91       	pop	r27
    3748:	af 91       	pop	r26
    374a:	9f 91       	pop	r25
    374c:	8f 91       	pop	r24
    374e:	7f 91       	pop	r23
    3750:	6f 91       	pop	r22
    3752:	5f 91       	pop	r21
    3754:	4f 91       	pop	r20
    3756:	3f 91       	pop	r19
    3758:	2f 91       	pop	r18
    375a:	0f 90       	pop	r0
    375c:	0b be       	out	0x3b, r0	; 59
    375e:	0f 90       	pop	r0
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	0f 90       	pop	r0
    3764:	1f 90       	pop	r1
    3766:	18 95       	reti

00003768 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    3768:	1f 92       	push	r1
    376a:	0f 92       	push	r0
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	0f 92       	push	r0
    3770:	11 24       	eor	r1, r1
    3772:	0b b6       	in	r0, 0x3b	; 59
    3774:	0f 92       	push	r0
    3776:	2f 93       	push	r18
    3778:	3f 93       	push	r19
    377a:	4f 93       	push	r20
    377c:	5f 93       	push	r21
    377e:	6f 93       	push	r22
    3780:	7f 93       	push	r23
    3782:	8f 93       	push	r24
    3784:	9f 93       	push	r25
    3786:	af 93       	push	r26
    3788:	bf 93       	push	r27
    378a:	ef 93       	push	r30
    378c:	ff 93       	push	r31
    378e:	2e df       	rcall	.-420    	; 0x35ec <twim_interrupt_handler>
    3790:	ff 91       	pop	r31
    3792:	ef 91       	pop	r30
    3794:	bf 91       	pop	r27
    3796:	af 91       	pop	r26
    3798:	9f 91       	pop	r25
    379a:	8f 91       	pop	r24
    379c:	7f 91       	pop	r23
    379e:	6f 91       	pop	r22
    37a0:	5f 91       	pop	r21
    37a2:	4f 91       	pop	r20
    37a4:	3f 91       	pop	r19
    37a6:	2f 91       	pop	r18
    37a8:	0f 90       	pop	r0
    37aa:	0b be       	out	0x3b, r0	; 59
    37ac:	0f 90       	pop	r0
    37ae:	0f be       	out	0x3f, r0	; 63
    37b0:	0f 90       	pop	r0
    37b2:	1f 90       	pop	r1
    37b4:	18 95       	reti

000037b6 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	1f 92       	push	r1
    37bc:	1f 92       	push	r1
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
    37c2:	81 11       	cpse	r24, r1
    37c4:	26 c0       	rjmp	.+76     	; 0x3812 <udd_sleep_mode+0x5c>
    37c6:	90 91 44 22 	lds	r25, 0x2244	; 0x802244 <udd_b_idle>
    37ca:	99 23       	and	r25, r25
    37cc:	f9 f0       	breq	.+62     	; 0x380c <udd_sleep_mode+0x56>
    37ce:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <sleepmgr_locks+0x1>
    37d2:	91 11       	cpse	r25, r1
    37d4:	01 c0       	rjmp	.+2      	; 0x37d8 <udd_sleep_mode+0x22>
    37d6:	ff cf       	rjmp	.-2      	; 0x37d6 <udd_sleep_mode+0x20>
    37d8:	9f b7       	in	r25, 0x3f	; 63
    37da:	9a 83       	std	Y+2, r25	; 0x02
    37dc:	f8 94       	cli
    37de:	2a 81       	ldd	r18, Y+2	; 0x02
    37e0:	ec e9       	ldi	r30, 0x9C	; 156
    37e2:	f3 e2       	ldi	r31, 0x23	; 35
    37e4:	91 81       	ldd	r25, Z+1	; 0x01
    37e6:	91 50       	subi	r25, 0x01	; 1
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	2f bf       	out	0x3f, r18	; 63
    37ec:	0f c0       	rjmp	.+30     	; 0x380c <udd_sleep_mode+0x56>
    37ee:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <sleepmgr_locks+0x1>
    37f2:	9f 3f       	cpi	r25, 0xFF	; 255
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <udd_sleep_mode+0x42>
    37f6:	ff cf       	rjmp	.-2      	; 0x37f6 <udd_sleep_mode+0x40>
    37f8:	9f b7       	in	r25, 0x3f	; 63
    37fa:	99 83       	std	Y+1, r25	; 0x01
    37fc:	f8 94       	cli
    37fe:	29 81       	ldd	r18, Y+1	; 0x01
    3800:	ec e9       	ldi	r30, 0x9C	; 156
    3802:	f3 e2       	ldi	r31, 0x23	; 35
    3804:	91 81       	ldd	r25, Z+1	; 0x01
    3806:	9f 5f       	subi	r25, 0xFF	; 255
    3808:	91 83       	std	Z+1, r25	; 0x01
    380a:	2f bf       	out	0x3f, r18	; 63
    380c:	80 93 44 22 	sts	0x2244, r24	; 0x802244 <udd_b_idle>
    3810:	05 c0       	rjmp	.+10     	; 0x381c <udd_sleep_mode+0x66>
    3812:	90 91 44 22 	lds	r25, 0x2244	; 0x802244 <udd_b_idle>
    3816:	99 23       	and	r25, r25
    3818:	51 f3       	breq	.-44     	; 0x37ee <udd_sleep_mode+0x38>
    381a:	f8 cf       	rjmp	.-16     	; 0x380c <udd_sleep_mode+0x56>
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	08 95       	ret

00003826 <udd_ctrl_init>:
    3826:	0f 93       	push	r16
    3828:	e8 ec       	ldi	r30, 0xC8	; 200
    382a:	f4 e0       	ldi	r31, 0x04	; 4
    382c:	80 81       	ld	r24, Z
    382e:	8f 7d       	andi	r24, 0xDF	; 223
    3830:	80 83       	st	Z, r24
    3832:	80 81       	ld	r24, Z
    3834:	8f 7d       	andi	r24, 0xDF	; 223
    3836:	80 83       	st	Z, r24
    3838:	e8 e1       	ldi	r30, 0x18	; 24
    383a:	f2 e2       	ldi	r31, 0x22	; 34
    383c:	02 e0       	ldi	r16, 0x02	; 2
    383e:	05 93       	las	Z, r16
    3840:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <udd_sram+0x16>
    3844:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <udd_sram+0x17>
    3848:	00 e2       	ldi	r16, 0x20	; 32
    384a:	06 93       	lac	Z, r16
    384c:	00 e4       	ldi	r16, 0x40	; 64
    384e:	06 93       	lac	Z, r16
    3850:	e0 e1       	ldi	r30, 0x10	; 16
    3852:	f2 e2       	ldi	r31, 0x22	; 34
    3854:	00 e4       	ldi	r16, 0x40	; 64
    3856:	06 93       	lac	Z, r16
    3858:	ec e8       	ldi	r30, 0x8C	; 140
    385a:	f3 e2       	ldi	r31, 0x23	; 35
    385c:	14 86       	std	Z+12, r1	; 0x0c
    385e:	15 86       	std	Z+13, r1	; 0x0d
    3860:	16 86       	std	Z+14, r1	; 0x0e
    3862:	17 86       	std	Z+15, r1	; 0x0f
    3864:	12 86       	std	Z+10, r1	; 0x0a
    3866:	13 86       	std	Z+11, r1	; 0x0b
    3868:	10 92 02 22 	sts	0x2202, r1	; 0x802202 <udd_ep_control_state>
    386c:	0f 91       	pop	r16
    386e:	08 95       	ret

00003870 <udd_ctrl_stall_data>:
    3870:	0f 93       	push	r16
    3872:	85 e0       	ldi	r24, 0x05	; 5
    3874:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <udd_ep_control_state>
    3878:	e9 e1       	ldi	r30, 0x19	; 25
    387a:	f2 e2       	ldi	r31, 0x22	; 34
    387c:	04 e0       	ldi	r16, 0x04	; 4
    387e:	05 93       	las	Z, r16
    3880:	e1 e1       	ldi	r30, 0x11	; 17
    3882:	f2 e2       	ldi	r31, 0x22	; 34
    3884:	04 e0       	ldi	r16, 0x04	; 4
    3886:	05 93       	las	Z, r16
    3888:	0f 91       	pop	r16
    388a:	08 95       	ret

0000388c <udd_ctrl_send_zlp_in>:
    388c:	0f 93       	push	r16
    388e:	83 e0       	ldi	r24, 0x03	; 3
    3890:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <udd_ep_control_state>
    3894:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <udd_sram+0x16>
    3898:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <udd_sram+0x17>
    389c:	e8 e1       	ldi	r30, 0x18	; 24
    389e:	f2 e2       	ldi	r31, 0x22	; 34
    38a0:	02 e0       	ldi	r16, 0x02	; 2
    38a2:	06 93       	lac	Z, r16
    38a4:	0f 91       	pop	r16
    38a6:	08 95       	ret

000038a8 <udd_ctrl_endofrequest>:
    38a8:	e0 91 98 23 	lds	r30, 0x2398	; 0x802398 <udd_g_ctrlreq+0xc>
    38ac:	f0 91 99 23 	lds	r31, 0x2399	; 0x802399 <udd_g_ctrlreq+0xd>
    38b0:	30 97       	sbiw	r30, 0x00	; 0
    38b2:	09 f0       	breq	.+2      	; 0x38b6 <udd_ctrl_endofrequest+0xe>
    38b4:	19 95       	eicall
    38b6:	08 95       	ret

000038b8 <udd_ctrl_in_sent>:
    38b8:	0f 93       	push	r16
    38ba:	cf 93       	push	r28
    38bc:	df 93       	push	r29
    38be:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <udd_ep_control_state>
    38c2:	83 30       	cpi	r24, 0x03	; 3
    38c4:	19 f4       	brne	.+6      	; 0x38cc <udd_ctrl_in_sent+0x14>
    38c6:	f0 df       	rcall	.-32     	; 0x38a8 <udd_ctrl_endofrequest>
    38c8:	ae df       	rcall	.-164    	; 0x3826 <udd_ctrl_init>
    38ca:	5e c0       	rjmp	.+188    	; 0x3988 <udd_ctrl_in_sent+0xd0>
    38cc:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans>
    38d0:	90 91 ff 21 	lds	r25, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans+0x1>
    38d4:	c0 91 96 23 	lds	r28, 0x2396	; 0x802396 <udd_g_ctrlreq+0xa>
    38d8:	d0 91 97 23 	lds	r29, 0x2397	; 0x802397 <udd_g_ctrlreq+0xb>
    38dc:	c8 1b       	sub	r28, r24
    38de:	d9 0b       	sbc	r29, r25
    38e0:	71 f5       	brne	.+92     	; 0x393e <udd_ctrl_in_sent+0x86>
    38e2:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <udd_ctrl_prev_payload_nb_trans>
    38e6:	30 91 01 22 	lds	r19, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans+0x1>
    38ea:	82 0f       	add	r24, r18
    38ec:	93 1f       	adc	r25, r19
    38ee:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <udd_ctrl_prev_payload_nb_trans>
    38f2:	90 93 01 22 	sts	0x2201, r25	; 0x802201 <udd_ctrl_prev_payload_nb_trans+0x1>
    38f6:	20 91 92 23 	lds	r18, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    38fa:	30 91 93 23 	lds	r19, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    38fe:	82 17       	cp	r24, r18
    3900:	93 07       	cpc	r25, r19
    3902:	21 f0       	breq	.+8      	; 0x390c <udd_ctrl_in_sent+0x54>
    3904:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <b_shortpacket.5472>
    3908:	88 23       	and	r24, r24
    390a:	41 f0       	breq	.+16     	; 0x391c <udd_ctrl_in_sent+0x64>
    390c:	84 e0       	ldi	r24, 0x04	; 4
    390e:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <udd_ep_control_state>
    3912:	e0 e1       	ldi	r30, 0x10	; 16
    3914:	f2 e2       	ldi	r31, 0x22	; 34
    3916:	02 e0       	ldi	r16, 0x02	; 2
    3918:	06 93       	lac	Z, r16
    391a:	36 c0       	rjmp	.+108    	; 0x3988 <udd_ctrl_in_sent+0xd0>
    391c:	e0 91 9a 23 	lds	r30, 0x239A	; 0x80239a <udd_g_ctrlreq+0xe>
    3920:	f0 91 9b 23 	lds	r31, 0x239B	; 0x80239b <udd_g_ctrlreq+0xf>
    3924:	30 97       	sbiw	r30, 0x00	; 0
    3926:	99 f0       	breq	.+38     	; 0x394e <udd_ctrl_in_sent+0x96>
    3928:	19 95       	eicall
    392a:	88 23       	and	r24, r24
    392c:	81 f0       	breq	.+32     	; 0x394e <udd_ctrl_in_sent+0x96>
    392e:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans>
    3932:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans+0x1>
    3936:	c0 91 96 23 	lds	r28, 0x2396	; 0x802396 <udd_g_ctrlreq+0xa>
    393a:	d0 91 97 23 	lds	r29, 0x2397	; 0x802397 <udd_g_ctrlreq+0xb>
    393e:	c0 34       	cpi	r28, 0x40	; 64
    3940:	d1 05       	cpc	r29, r1
    3942:	28 f0       	brcs	.+10     	; 0x394e <udd_ctrl_in_sent+0x96>
    3944:	10 92 19 21 	sts	0x2119, r1	; 0x802119 <b_shortpacket.5472>
    3948:	c0 e4       	ldi	r28, 0x40	; 64
    394a:	d0 e0       	ldi	r29, 0x00	; 0
    394c:	03 c0       	rjmp	.+6      	; 0x3954 <udd_ctrl_in_sent+0x9c>
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <b_shortpacket.5472>
    3954:	e4 e0       	ldi	r30, 0x04	; 4
    3956:	f2 e2       	ldi	r31, 0x22	; 34
    3958:	c6 8b       	std	Z+22, r28	; 0x16
    395a:	d7 8b       	std	Z+23, r29	; 0x17
    395c:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans>
    3960:	90 91 ff 21 	lds	r25, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans+0x1>
    3964:	20 91 94 23 	lds	r18, 0x2394	; 0x802394 <udd_g_ctrlreq+0x8>
    3968:	30 91 95 23 	lds	r19, 0x2395	; 0x802395 <udd_g_ctrlreq+0x9>
    396c:	28 0f       	add	r18, r24
    396e:	39 1f       	adc	r19, r25
    3970:	20 8f       	std	Z+24, r18	; 0x18
    3972:	31 8f       	std	Z+25, r19	; 0x19
    3974:	c8 0f       	add	r28, r24
    3976:	d9 1f       	adc	r29, r25
    3978:	c0 93 fe 21 	sts	0x21FE, r28	; 0x8021fe <udd_ctrl_payload_nb_trans>
    397c:	d0 93 ff 21 	sts	0x21FF, r29	; 0x8021ff <udd_ctrl_payload_nb_trans+0x1>
    3980:	e8 e1       	ldi	r30, 0x18	; 24
    3982:	f2 e2       	ldi	r31, 0x22	; 34
    3984:	02 e0       	ldi	r16, 0x02	; 2
    3986:	06 93       	lac	Z, r16
    3988:	df 91       	pop	r29
    398a:	cf 91       	pop	r28
    398c:	0f 91       	pop	r16
    398e:	08 95       	ret

00003990 <udd_ep_get_size>:
    3990:	fc 01       	movw	r30, r24
    3992:	81 81       	ldd	r24, Z+1	; 0x01
    3994:	e8 2f       	mov	r30, r24
    3996:	e7 70       	andi	r30, 0x07	; 7
    3998:	8e 2f       	mov	r24, r30
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	fc 01       	movw	r30, r24
    399e:	31 97       	sbiw	r30, 0x01	; 1
    39a0:	e7 30       	cpi	r30, 0x07	; 7
    39a2:	f1 05       	cpc	r31, r1
    39a4:	d8 f4       	brcc	.+54     	; 0x39dc <udd_ep_get_size+0x4c>
    39a6:	88 27       	eor	r24, r24
    39a8:	e2 50       	subi	r30, 0x02	; 2
    39aa:	ff 4f       	sbci	r31, 0xFF	; 255
    39ac:	8f 4f       	sbci	r24, 0xFF	; 255
    39ae:	0c 94 90 29 	jmp	0x5320	; 0x5320 <__tablejump2__>
    39b2:	80 e1       	ldi	r24, 0x10	; 16
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	08 95       	ret
    39b8:	80 e2       	ldi	r24, 0x20	; 32
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	08 95       	ret
    39be:	80 e4       	ldi	r24, 0x40	; 64
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	08 95       	ret
    39c4:	80 e8       	ldi	r24, 0x80	; 128
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	08 95       	ret
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	91 e0       	ldi	r25, 0x01	; 1
    39ce:	08 95       	ret
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	92 e0       	ldi	r25, 0x02	; 2
    39d4:	08 95       	ret
    39d6:	8f ef       	ldi	r24, 0xFF	; 255
    39d8:	93 e0       	ldi	r25, 0x03	; 3
    39da:	08 95       	ret
    39dc:	88 e0       	ldi	r24, 0x08	; 8
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	08 95       	ret

000039e2 <udd_ep_get_job>:
    39e2:	28 2f       	mov	r18, r24
    39e4:	2f 70       	andi	r18, 0x0F	; 15
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	22 0f       	add	r18, r18
    39ea:	33 1f       	adc	r19, r19
    39ec:	08 2e       	mov	r0, r24
    39ee:	00 0c       	add	r0, r0
    39f0:	99 0b       	sbc	r25, r25
    39f2:	88 27       	eor	r24, r24
    39f4:	99 0f       	add	r25, r25
    39f6:	88 1f       	adc	r24, r24
    39f8:	99 27       	eor	r25, r25
    39fa:	82 0f       	add	r24, r18
    39fc:	93 1f       	adc	r25, r19
    39fe:	02 97       	sbiw	r24, 0x02	; 2
    3a00:	9c 01       	movw	r18, r24
    3a02:	22 0f       	add	r18, r18
    3a04:	33 1f       	adc	r19, r19
    3a06:	22 0f       	add	r18, r18
    3a08:	33 1f       	adc	r19, r19
    3a0a:	22 0f       	add	r18, r18
    3a0c:	33 1f       	adc	r19, r19
    3a0e:	82 0f       	add	r24, r18
    3a10:	93 1f       	adc	r25, r19
    3a12:	86 56       	subi	r24, 0x66	; 102
    3a14:	9e 4d       	sbci	r25, 0xDE	; 222
    3a16:	08 95       	ret

00003a18 <udd_ctrl_interrupt_tc_setup>:
    3a18:	0f 93       	push	r16
    3a1a:	cf 93       	push	r28
    3a1c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    3a20:	80 ff       	sbrs	r24, 0
    3a22:	65 c0       	rjmp	.+202    	; 0x3aee <udd_ctrl_interrupt_tc_setup+0xd6>
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    3a2a:	e0 e1       	ldi	r30, 0x10	; 16
    3a2c:	f2 e2       	ldi	r31, 0x22	; 34
    3a2e:	00 e8       	ldi	r16, 0x80	; 128
    3a30:	06 93       	lac	Z, r16
    3a32:	e8 e1       	ldi	r30, 0x18	; 24
    3a34:	f2 e2       	ldi	r31, 0x22	; 34
    3a36:	00 e8       	ldi	r16, 0x80	; 128
    3a38:	06 93       	lac	Z, r16
    3a3a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    3a3e:	e0 e1       	ldi	r30, 0x10	; 16
    3a40:	f2 e2       	ldi	r31, 0x22	; 34
    3a42:	00 e1       	ldi	r16, 0x10	; 16
    3a44:	06 93       	lac	Z, r16
    3a46:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <udd_ep_control_state>
    3a4a:	88 23       	and	r24, r24
    3a4c:	29 f0       	breq	.+10     	; 0x3a58 <udd_ctrl_interrupt_tc_setup+0x40>
    3a4e:	83 50       	subi	r24, 0x03	; 3
    3a50:	82 30       	cpi	r24, 0x02	; 2
    3a52:	08 f4       	brcc	.+2      	; 0x3a56 <udd_ctrl_interrupt_tc_setup+0x3e>
    3a54:	29 df       	rcall	.-430    	; 0x38a8 <udd_ctrl_endofrequest>
    3a56:	e7 de       	rcall	.-562    	; 0x3826 <udd_ctrl_init>
    3a58:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <udd_sram+0xe>
    3a5c:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <udd_sram+0xf>
    3a60:	08 97       	sbiw	r24, 0x08	; 8
    3a62:	09 f0       	breq	.+2      	; 0x3a66 <udd_ctrl_interrupt_tc_setup+0x4e>
    3a64:	46 c0       	rjmp	.+140    	; 0x3af2 <udd_ctrl_interrupt_tc_setup+0xda>
    3a66:	88 e0       	ldi	r24, 0x08	; 8
    3a68:	ee eb       	ldi	r30, 0xBE	; 190
    3a6a:	f1 e2       	ldi	r31, 0x21	; 33
    3a6c:	ac e8       	ldi	r26, 0x8C	; 140
    3a6e:	b3 e2       	ldi	r27, 0x23	; 35
    3a70:	01 90       	ld	r0, Z+
    3a72:	0d 92       	st	X+, r0
    3a74:	8a 95       	dec	r24
    3a76:	e1 f7       	brne	.-8      	; 0x3a70 <udd_ctrl_interrupt_tc_setup+0x58>
    3a78:	e8 ec       	ldi	r30, 0xC8	; 200
    3a7a:	f4 e0       	ldi	r31, 0x04	; 4
    3a7c:	80 81       	ld	r24, Z
    3a7e:	80 62       	ori	r24, 0x20	; 32
    3a80:	80 83       	st	Z, r24
    3a82:	80 81       	ld	r24, Z
    3a84:	80 62       	ori	r24, 0x20	; 32
    3a86:	80 83       	st	Z, r24
    3a88:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <udc_process_setup>
    3a8c:	c8 2f       	mov	r28, r24
    3a8e:	81 11       	cpse	r24, r1
    3a90:	03 c0       	rjmp	.+6      	; 0x3a98 <udd_ctrl_interrupt_tc_setup+0x80>
    3a92:	ee de       	rcall	.-548    	; 0x3870 <udd_ctrl_stall_data>
    3a94:	c1 e0       	ldi	r28, 0x01	; 1
    3a96:	2e c0       	rjmp	.+92     	; 0x3af4 <udd_ctrl_interrupt_tc_setup+0xdc>
    3a98:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <udd_g_ctrlreq>
    3a9c:	88 23       	and	r24, r24
    3a9e:	6c f4       	brge	.+26     	; 0x3aba <udd_ctrl_interrupt_tc_setup+0xa2>
    3aa0:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_prev_payload_nb_trans>
    3aa4:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udd_ctrl_prev_payload_nb_trans+0x1>
    3aa8:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans>
    3aac:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans+0x1>
    3ab0:	82 e0       	ldi	r24, 0x02	; 2
    3ab2:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <udd_ep_control_state>
    3ab6:	00 df       	rcall	.-512    	; 0x38b8 <udd_ctrl_in_sent>
    3ab8:	1d c0       	rjmp	.+58     	; 0x3af4 <udd_ctrl_interrupt_tc_setup+0xdc>
    3aba:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    3abe:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    3ac2:	89 2b       	or	r24, r25
    3ac4:	11 f4       	brne	.+4      	; 0x3aca <udd_ctrl_interrupt_tc_setup+0xb2>
    3ac6:	e2 de       	rcall	.-572    	; 0x388c <udd_ctrl_send_zlp_in>
    3ac8:	15 c0       	rjmp	.+42     	; 0x3af4 <udd_ctrl_interrupt_tc_setup+0xdc>
    3aca:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_prev_payload_nb_trans>
    3ace:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udd_ctrl_prev_payload_nb_trans+0x1>
    3ad2:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans>
    3ad6:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans+0x1>
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <udd_ep_control_state>
    3ae0:	e0 e1       	ldi	r30, 0x10	; 16
    3ae2:	f2 e2       	ldi	r31, 0x22	; 34
    3ae4:	02 e0       	ldi	r16, 0x02	; 2
    3ae6:	06 93       	lac	Z, r16
    3ae8:	00 e2       	ldi	r16, 0x20	; 32
    3aea:	06 93       	lac	Z, r16
    3aec:	03 c0       	rjmp	.+6      	; 0x3af4 <udd_ctrl_interrupt_tc_setup+0xdc>
    3aee:	c0 e0       	ldi	r28, 0x00	; 0
    3af0:	01 c0       	rjmp	.+2      	; 0x3af4 <udd_ctrl_interrupt_tc_setup+0xdc>
    3af2:	c1 e0       	ldi	r28, 0x01	; 1
    3af4:	8c 2f       	mov	r24, r28
    3af6:	cf 91       	pop	r28
    3af8:	0f 91       	pop	r16
    3afa:	08 95       	ret

00003afc <udd_ep_trans_complet>:
    3afc:	8f 92       	push	r8
    3afe:	9f 92       	push	r9
    3b00:	af 92       	push	r10
    3b02:	bf 92       	push	r11
    3b04:	df 92       	push	r13
    3b06:	ef 92       	push	r14
    3b08:	ff 92       	push	r15
    3b0a:	0f 93       	push	r16
    3b0c:	1f 93       	push	r17
    3b0e:	cf 93       	push	r28
    3b10:	df 93       	push	r29
    3b12:	d8 2e       	mov	r13, r24
    3b14:	66 df       	rcall	.-308    	; 0x39e2 <udd_ep_get_job>
    3b16:	8c 01       	movw	r16, r24
    3b18:	cd 2d       	mov	r28, r13
    3b1a:	cf 70       	andi	r28, 0x0F	; 15
    3b1c:	d0 e0       	ldi	r29, 0x00	; 0
    3b1e:	ce 01       	movw	r24, r28
    3b20:	88 0f       	add	r24, r24
    3b22:	99 1f       	adc	r25, r25
    3b24:	cd 2d       	mov	r28, r13
    3b26:	0d 2c       	mov	r0, r13
    3b28:	00 0c       	add	r0, r0
    3b2a:	dd 0b       	sbc	r29, r29
    3b2c:	cc 27       	eor	r28, r28
    3b2e:	dd 0f       	add	r29, r29
    3b30:	cc 1f       	adc	r28, r28
    3b32:	dd 27       	eor	r29, r29
    3b34:	c8 0f       	add	r28, r24
    3b36:	d9 1f       	adc	r29, r25
    3b38:	ce 01       	movw	r24, r28
    3b3a:	88 0f       	add	r24, r24
    3b3c:	99 1f       	adc	r25, r25
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	88 0f       	add	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	9c 01       	movw	r18, r24
    3b48:	20 5f       	subi	r18, 0xF0	; 240
    3b4a:	3d 4d       	sbci	r19, 0xDD	; 221
    3b4c:	79 01       	movw	r14, r18
    3b4e:	c9 01       	movw	r24, r18
    3b50:	1f df       	rcall	.-450    	; 0x3990 <udd_ep_get_size>
    3b52:	4c 01       	movw	r8, r24
    3b54:	dd 20       	and	r13, r13
    3b56:	0c f0       	brlt	.+2      	; 0x3b5a <udd_ep_trans_complet+0x5e>
    3b58:	7b c0       	rjmp	.+246    	; 0x3c50 <udd_ep_trans_complet+0x154>
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	ee 0f       	add	r30, r30
    3b5e:	ff 1f       	adc	r31, r31
    3b60:	ee 0f       	add	r30, r30
    3b62:	ff 1f       	adc	r31, r31
    3b64:	ee 0f       	add	r30, r30
    3b66:	ff 1f       	adc	r31, r31
    3b68:	ec 5f       	subi	r30, 0xFC	; 252
    3b6a:	fd 4d       	sbci	r31, 0xDD	; 221
    3b6c:	22 89       	ldd	r18, Z+18	; 0x12
    3b6e:	33 89       	ldd	r19, Z+19	; 0x13
    3b70:	d8 01       	movw	r26, r16
    3b72:	15 96       	adiw	r26, 0x05	; 5
    3b74:	8d 91       	ld	r24, X+
    3b76:	9c 91       	ld	r25, X
    3b78:	16 97       	sbiw	r26, 0x06	; 6
    3b7a:	82 0f       	add	r24, r18
    3b7c:	93 1f       	adc	r25, r19
    3b7e:	15 96       	adiw	r26, 0x05	; 5
    3b80:	8d 93       	st	X+, r24
    3b82:	9c 93       	st	X, r25
    3b84:	16 97       	sbiw	r26, 0x06	; 6
    3b86:	13 96       	adiw	r26, 0x03	; 3
    3b88:	2d 91       	ld	r18, X+
    3b8a:	3c 91       	ld	r19, X
    3b8c:	14 97       	sbiw	r26, 0x04	; 4
    3b8e:	82 17       	cp	r24, r18
    3b90:	93 07       	cpc	r25, r19
    3b92:	09 f4       	brne	.+2      	; 0x3b96 <udd_ep_trans_complet+0x9a>
    3b94:	47 c0       	rjmp	.+142    	; 0x3c24 <udd_ep_trans_complet+0x128>
    3b96:	28 1b       	sub	r18, r24
    3b98:	39 0b       	sbc	r19, r25
    3b9a:	21 15       	cp	r18, r1
    3b9c:	b4 e0       	ldi	r27, 0x04	; 4
    3b9e:	3b 07       	cpc	r19, r27
    3ba0:	40 f0       	brcs	.+16     	; 0x3bb2 <udd_ep_trans_complet+0xb6>
    3ba2:	2f ef       	ldi	r18, 0xFF	; 255
    3ba4:	33 e0       	ldi	r19, 0x03	; 3
    3ba6:	c9 01       	movw	r24, r18
    3ba8:	b4 01       	movw	r22, r8
    3baa:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <__udivmodhi4>
    3bae:	28 1b       	sub	r18, r24
    3bb0:	39 0b       	sbc	r19, r25
    3bb2:	f8 01       	movw	r30, r16
    3bb4:	80 81       	ld	r24, Z
    3bb6:	81 ff       	sbrs	r24, 1
    3bb8:	0a c0       	rjmp	.+20     	; 0x3bce <udd_ep_trans_complet+0xd2>
    3bba:	c9 01       	movw	r24, r18
    3bbc:	b4 01       	movw	r22, r8
    3bbe:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <__udivmodhi4>
    3bc2:	41 e0       	ldi	r20, 0x01	; 1
    3bc4:	89 2b       	or	r24, r25
    3bc6:	09 f0       	breq	.+2      	; 0x3bca <udd_ep_trans_complet+0xce>
    3bc8:	40 e0       	ldi	r20, 0x00	; 0
    3bca:	84 2f       	mov	r24, r20
    3bcc:	01 c0       	rjmp	.+2      	; 0x3bd0 <udd_ep_trans_complet+0xd4>
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	d8 01       	movw	r26, r16
    3bd2:	9c 91       	ld	r25, X
    3bd4:	80 fb       	bst	r24, 0
    3bd6:	91 f9       	bld	r25, 1
    3bd8:	9c 93       	st	X, r25
    3bda:	fe 01       	movw	r30, r28
    3bdc:	ee 0f       	add	r30, r30
    3bde:	ff 1f       	adc	r31, r31
    3be0:	ee 0f       	add	r30, r30
    3be2:	ff 1f       	adc	r31, r31
    3be4:	ee 0f       	add	r30, r30
    3be6:	ff 1f       	adc	r31, r31
    3be8:	ec 5f       	subi	r30, 0xFC	; 252
    3bea:	fd 4d       	sbci	r31, 0xDD	; 221
    3bec:	12 8a       	std	Z+18, r1	; 0x12
    3bee:	13 8a       	std	Z+19, r1	; 0x13
    3bf0:	26 87       	std	Z+14, r18	; 0x0e
    3bf2:	37 87       	std	Z+15, r19	; 0x0f
    3bf4:	11 96       	adiw	r26, 0x01	; 1
    3bf6:	2d 91       	ld	r18, X+
    3bf8:	3c 91       	ld	r19, X
    3bfa:	12 97       	sbiw	r26, 0x02	; 2
    3bfc:	15 96       	adiw	r26, 0x05	; 5
    3bfe:	8d 91       	ld	r24, X+
    3c00:	9c 91       	ld	r25, X
    3c02:	16 97       	sbiw	r26, 0x06	; 6
    3c04:	82 0f       	add	r24, r18
    3c06:	93 1f       	adc	r25, r19
    3c08:	cc 0f       	add	r28, r28
    3c0a:	dd 1f       	adc	r29, r29
    3c0c:	cc 0f       	add	r28, r28
    3c0e:	dd 1f       	adc	r29, r29
    3c10:	cc 0f       	add	r28, r28
    3c12:	dd 1f       	adc	r29, r29
    3c14:	cc 5e       	subi	r28, 0xEC	; 236
    3c16:	dd 4d       	sbci	r29, 0xDD	; 221
    3c18:	88 83       	st	Y, r24
    3c1a:	99 83       	std	Y+1, r25	; 0x01
    3c1c:	f7 01       	movw	r30, r14
    3c1e:	02 e0       	ldi	r16, 0x02	; 2
    3c20:	06 93       	lac	Z, r16
    3c22:	e4 c0       	rjmp	.+456    	; 0x3dec <udd_ep_trans_complet+0x2f0>
    3c24:	d8 01       	movw	r26, r16
    3c26:	8c 91       	ld	r24, X
    3c28:	81 ff       	sbrs	r24, 1
    3c2a:	cd c0       	rjmp	.+410    	; 0x3dc6 <udd_ep_trans_complet+0x2ca>
    3c2c:	8d 7f       	andi	r24, 0xFD	; 253
    3c2e:	8c 93       	st	X, r24
    3c30:	cc 0f       	add	r28, r28
    3c32:	dd 1f       	adc	r29, r29
    3c34:	cc 0f       	add	r28, r28
    3c36:	dd 1f       	adc	r29, r29
    3c38:	cc 0f       	add	r28, r28
    3c3a:	dd 1f       	adc	r29, r29
    3c3c:	cc 5f       	subi	r28, 0xFC	; 252
    3c3e:	dd 4d       	sbci	r29, 0xDD	; 221
    3c40:	1a 8a       	std	Y+18, r1	; 0x12
    3c42:	1b 8a       	std	Y+19, r1	; 0x13
    3c44:	1e 86       	std	Y+14, r1	; 0x0e
    3c46:	1f 86       	std	Y+15, r1	; 0x0f
    3c48:	f7 01       	movw	r30, r14
    3c4a:	02 e0       	ldi	r16, 0x02	; 2
    3c4c:	06 93       	lac	Z, r16
    3c4e:	ce c0       	rjmp	.+412    	; 0x3dec <udd_ep_trans_complet+0x2f0>
    3c50:	fe 01       	movw	r30, r28
    3c52:	ee 0f       	add	r30, r30
    3c54:	ff 1f       	adc	r31, r31
    3c56:	ee 0f       	add	r30, r30
    3c58:	ff 1f       	adc	r31, r31
    3c5a:	ee 0f       	add	r30, r30
    3c5c:	ff 1f       	adc	r31, r31
    3c5e:	ec 5f       	subi	r30, 0xFC	; 252
    3c60:	fd 4d       	sbci	r31, 0xDD	; 221
    3c62:	a6 84       	ldd	r10, Z+14	; 0x0e
    3c64:	b7 84       	ldd	r11, Z+15	; 0x0f
    3c66:	d8 01       	movw	r26, r16
    3c68:	8c 91       	ld	r24, X
    3c6a:	82 ff       	sbrs	r24, 2
    3c6c:	1b c0       	rjmp	.+54     	; 0x3ca4 <udd_ep_trans_complet+0x1a8>
    3c6e:	11 96       	adiw	r26, 0x01	; 1
    3c70:	ed 91       	ld	r30, X+
    3c72:	fc 91       	ld	r31, X
    3c74:	12 97       	sbiw	r26, 0x02	; 2
    3c76:	15 96       	adiw	r26, 0x05	; 5
    3c78:	2d 91       	ld	r18, X+
    3c7a:	3c 91       	ld	r19, X
    3c7c:	16 97       	sbiw	r26, 0x06	; 6
    3c7e:	13 96       	adiw	r26, 0x03	; 3
    3c80:	8d 91       	ld	r24, X+
    3c82:	9c 91       	ld	r25, X
    3c84:	14 97       	sbiw	r26, 0x04	; 4
    3c86:	b4 01       	movw	r22, r8
    3c88:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <__udivmodhi4>
    3c8c:	b0 e4       	ldi	r27, 0x40	; 64
    3c8e:	db 9e       	mul	r13, r27
    3c90:	b0 01       	movw	r22, r0
    3c92:	11 24       	eor	r1, r1
    3c94:	66 52       	subi	r22, 0x26	; 38
    3c96:	7f 4d       	sbci	r23, 0xDF	; 223
    3c98:	ac 01       	movw	r20, r24
    3c9a:	cf 01       	movw	r24, r30
    3c9c:	82 0f       	add	r24, r18
    3c9e:	93 1f       	adc	r25, r19
    3ca0:	0e 94 b1 29 	call	0x5362	; 0x5362 <memcpy>
    3ca4:	f8 01       	movw	r30, r16
    3ca6:	25 81       	ldd	r18, Z+5	; 0x05
    3ca8:	36 81       	ldd	r19, Z+6	; 0x06
    3caa:	2a 0d       	add	r18, r10
    3cac:	3b 1d       	adc	r19, r11
    3cae:	25 83       	std	Z+5, r18	; 0x05
    3cb0:	36 83       	std	Z+6, r19	; 0x06
    3cb2:	83 81       	ldd	r24, Z+3	; 0x03
    3cb4:	94 81       	ldd	r25, Z+4	; 0x04
    3cb6:	82 17       	cp	r24, r18
    3cb8:	93 07       	cpc	r25, r19
    3cba:	68 f4       	brcc	.+26     	; 0x3cd6 <udd_ep_trans_complet+0x1da>
    3cbc:	85 83       	std	Z+5, r24	; 0x05
    3cbe:	96 83       	std	Z+6, r25	; 0x06
    3cc0:	cc 0f       	add	r28, r28
    3cc2:	dd 1f       	adc	r29, r29
    3cc4:	cc 0f       	add	r28, r28
    3cc6:	dd 1f       	adc	r29, r29
    3cc8:	cc 0f       	add	r28, r28
    3cca:	dd 1f       	adc	r29, r29
    3ccc:	cc 5f       	subi	r28, 0xFC	; 252
    3cce:	dd 4d       	sbci	r29, 0xDD	; 221
    3cd0:	8a 89       	ldd	r24, Y+18	; 0x12
    3cd2:	9b 89       	ldd	r25, Y+19	; 0x13
    3cd4:	78 c0       	rjmp	.+240    	; 0x3dc6 <udd_ep_trans_complet+0x2ca>
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	ee 0f       	add	r30, r30
    3cda:	ff 1f       	adc	r31, r31
    3cdc:	ee 0f       	add	r30, r30
    3cde:	ff 1f       	adc	r31, r31
    3ce0:	ee 0f       	add	r30, r30
    3ce2:	ff 1f       	adc	r31, r31
    3ce4:	ec 5f       	subi	r30, 0xFC	; 252
    3ce6:	fd 4d       	sbci	r31, 0xDD	; 221
    3ce8:	42 89       	ldd	r20, Z+18	; 0x12
    3cea:	53 89       	ldd	r21, Z+19	; 0x13
    3cec:	a4 16       	cp	r10, r20
    3cee:	b5 06       	cpc	r11, r21
    3cf0:	09 f0       	breq	.+2      	; 0x3cf4 <udd_ep_trans_complet+0x1f8>
    3cf2:	69 c0       	rjmp	.+210    	; 0x3dc6 <udd_ep_trans_complet+0x2ca>
    3cf4:	28 17       	cp	r18, r24
    3cf6:	39 07       	cpc	r19, r25
    3cf8:	09 f4       	brne	.+2      	; 0x3cfc <udd_ep_trans_complet+0x200>
    3cfa:	65 c0       	rjmp	.+202    	; 0x3dc6 <udd_ep_trans_complet+0x2ca>
    3cfc:	ac 01       	movw	r20, r24
    3cfe:	42 1b       	sub	r20, r18
    3d00:	53 0b       	sbc	r21, r19
    3d02:	9a 01       	movw	r18, r20
    3d04:	21 15       	cp	r18, r1
    3d06:	54 e0       	ldi	r21, 0x04	; 4
    3d08:	35 07       	cpc	r19, r21
    3d0a:	48 f0       	brcs	.+18     	; 0x3d1e <udd_ep_trans_complet+0x222>
    3d0c:	2f ef       	ldi	r18, 0xFF	; 255
    3d0e:	33 e0       	ldi	r19, 0x03	; 3
    3d10:	c9 01       	movw	r24, r18
    3d12:	b4 01       	movw	r22, r8
    3d14:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <__udivmodhi4>
    3d18:	28 1b       	sub	r18, r24
    3d1a:	39 0b       	sbc	r19, r25
    3d1c:	06 c0       	rjmp	.+12     	; 0x3d2a <udd_ep_trans_complet+0x22e>
    3d1e:	c9 01       	movw	r24, r18
    3d20:	b4 01       	movw	r22, r8
    3d22:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <__udivmodhi4>
    3d26:	28 1b       	sub	r18, r24
    3d28:	39 0b       	sbc	r19, r25
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	ee 0f       	add	r30, r30
    3d2e:	ff 1f       	adc	r31, r31
    3d30:	ee 0f       	add	r30, r30
    3d32:	ff 1f       	adc	r31, r31
    3d34:	ee 0f       	add	r30, r30
    3d36:	ff 1f       	adc	r31, r31
    3d38:	ec 5f       	subi	r30, 0xFC	; 252
    3d3a:	fd 4d       	sbci	r31, 0xDD	; 221
    3d3c:	16 86       	std	Z+14, r1	; 0x0e
    3d3e:	17 86       	std	Z+15, r1	; 0x0f
    3d40:	28 15       	cp	r18, r8
    3d42:	39 05       	cpc	r19, r9
    3d44:	00 f5       	brcc	.+64     	; 0x3d86 <udd_ep_trans_complet+0x28a>
    3d46:	d8 01       	movw	r26, r16
    3d48:	8c 91       	ld	r24, X
    3d4a:	84 60       	ori	r24, 0x04	; 4
    3d4c:	8c 93       	st	X, r24
    3d4e:	b0 e4       	ldi	r27, 0x40	; 64
    3d50:	db 9e       	mul	r13, r27
    3d52:	c0 01       	movw	r24, r0
    3d54:	11 24       	eor	r1, r1
    3d56:	86 52       	subi	r24, 0x26	; 38
    3d58:	9f 4d       	sbci	r25, 0xDF	; 223
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	ee 0f       	add	r30, r30
    3d5e:	ff 1f       	adc	r31, r31
    3d60:	ee 0f       	add	r30, r30
    3d62:	ff 1f       	adc	r31, r31
    3d64:	ee 0f       	add	r30, r30
    3d66:	ff 1f       	adc	r31, r31
    3d68:	ec 5e       	subi	r30, 0xEC	; 236
    3d6a:	fd 4d       	sbci	r31, 0xDD	; 221
    3d6c:	80 83       	st	Z, r24
    3d6e:	91 83       	std	Z+1, r25	; 0x01
    3d70:	cc 0f       	add	r28, r28
    3d72:	dd 1f       	adc	r29, r29
    3d74:	cc 0f       	add	r28, r28
    3d76:	dd 1f       	adc	r29, r29
    3d78:	cc 0f       	add	r28, r28
    3d7a:	dd 1f       	adc	r29, r29
    3d7c:	cc 5f       	subi	r28, 0xFC	; 252
    3d7e:	dd 4d       	sbci	r29, 0xDD	; 221
    3d80:	8a 8a       	std	Y+18, r8	; 0x12
    3d82:	9b 8a       	std	Y+19, r9	; 0x13
    3d84:	1c c0       	rjmp	.+56     	; 0x3dbe <udd_ep_trans_complet+0x2c2>
    3d86:	f8 01       	movw	r30, r16
    3d88:	41 81       	ldd	r20, Z+1	; 0x01
    3d8a:	52 81       	ldd	r21, Z+2	; 0x02
    3d8c:	85 81       	ldd	r24, Z+5	; 0x05
    3d8e:	96 81       	ldd	r25, Z+6	; 0x06
    3d90:	84 0f       	add	r24, r20
    3d92:	95 1f       	adc	r25, r21
    3d94:	fe 01       	movw	r30, r28
    3d96:	ee 0f       	add	r30, r30
    3d98:	ff 1f       	adc	r31, r31
    3d9a:	ee 0f       	add	r30, r30
    3d9c:	ff 1f       	adc	r31, r31
    3d9e:	ee 0f       	add	r30, r30
    3da0:	ff 1f       	adc	r31, r31
    3da2:	ec 5e       	subi	r30, 0xEC	; 236
    3da4:	fd 4d       	sbci	r31, 0xDD	; 221
    3da6:	80 83       	st	Z, r24
    3da8:	91 83       	std	Z+1, r25	; 0x01
    3daa:	cc 0f       	add	r28, r28
    3dac:	dd 1f       	adc	r29, r29
    3dae:	cc 0f       	add	r28, r28
    3db0:	dd 1f       	adc	r29, r29
    3db2:	cc 0f       	add	r28, r28
    3db4:	dd 1f       	adc	r29, r29
    3db6:	cc 5f       	subi	r28, 0xFC	; 252
    3db8:	dd 4d       	sbci	r29, 0xDD	; 221
    3dba:	2a 8b       	std	Y+18, r18	; 0x12
    3dbc:	3b 8b       	std	Y+19, r19	; 0x13
    3dbe:	f7 01       	movw	r30, r14
    3dc0:	02 e0       	ldi	r16, 0x02	; 2
    3dc2:	06 93       	lac	Z, r16
    3dc4:	13 c0       	rjmp	.+38     	; 0x3dec <udd_ep_trans_complet+0x2f0>
    3dc6:	d8 01       	movw	r26, r16
    3dc8:	8c 91       	ld	r24, X
    3dca:	80 ff       	sbrs	r24, 0
    3dcc:	0f c0       	rjmp	.+30     	; 0x3dec <udd_ep_trans_complet+0x2f0>
    3dce:	8e 7f       	andi	r24, 0xFE	; 254
    3dd0:	8c 93       	st	X, r24
    3dd2:	17 96       	adiw	r26, 0x07	; 7
    3dd4:	ed 91       	ld	r30, X+
    3dd6:	fc 91       	ld	r31, X
    3dd8:	18 97       	sbiw	r26, 0x08	; 8
    3dda:	30 97       	sbiw	r30, 0x00	; 0
    3ddc:	39 f0       	breq	.+14     	; 0x3dec <udd_ep_trans_complet+0x2f0>
    3dde:	15 96       	adiw	r26, 0x05	; 5
    3de0:	6d 91       	ld	r22, X+
    3de2:	7c 91       	ld	r23, X
    3de4:	16 97       	sbiw	r26, 0x06	; 6
    3de6:	4d 2d       	mov	r20, r13
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	19 95       	eicall
    3dec:	df 91       	pop	r29
    3dee:	cf 91       	pop	r28
    3df0:	1f 91       	pop	r17
    3df2:	0f 91       	pop	r16
    3df4:	ff 90       	pop	r15
    3df6:	ef 90       	pop	r14
    3df8:	df 90       	pop	r13
    3dfa:	bf 90       	pop	r11
    3dfc:	af 90       	pop	r10
    3dfe:	9f 90       	pop	r9
    3e00:	8f 90       	pop	r8
    3e02:	08 95       	ret

00003e04 <udd_is_high_speed>:
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	08 95       	ret

00003e08 <udd_set_address>:
    3e08:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    3e0c:	08 95       	ret

00003e0e <udd_getaddress>:
    3e0e:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    3e12:	08 95       	ret

00003e14 <udd_get_frame_number>:
    3e14:	80 91 40 22 	lds	r24, 0x2240	; 0x802240 <udd_sram+0x3c>
    3e18:	90 91 41 22 	lds	r25, 0x2241	; 0x802241 <udd_sram+0x3d>
    3e1c:	08 95       	ret

00003e1e <udd_get_micro_frame_number>:
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	08 95       	ret

00003e24 <udd_set_setup_payload>:
    3e24:	ec e8       	ldi	r30, 0x8C	; 140
    3e26:	f3 e2       	ldi	r31, 0x23	; 35
    3e28:	80 87       	std	Z+8, r24	; 0x08
    3e2a:	91 87       	std	Z+9, r25	; 0x09
    3e2c:	62 87       	std	Z+10, r22	; 0x0a
    3e2e:	73 87       	std	Z+11, r23	; 0x0b
    3e30:	08 95       	ret

00003e32 <udd_ep_alloc>:
    3e32:	28 2f       	mov	r18, r24
    3e34:	2f 70       	andi	r18, 0x0F	; 15
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	22 0f       	add	r18, r18
    3e3a:	33 1f       	adc	r19, r19
    3e3c:	08 2e       	mov	r0, r24
    3e3e:	00 0c       	add	r0, r0
    3e40:	99 0b       	sbc	r25, r25
    3e42:	88 27       	eor	r24, r24
    3e44:	99 0f       	add	r25, r25
    3e46:	88 1f       	adc	r24, r24
    3e48:	99 27       	eor	r25, r25
    3e4a:	82 0f       	add	r24, r18
    3e4c:	93 1f       	adc	r25, r19
    3e4e:	fc 01       	movw	r30, r24
    3e50:	ee 0f       	add	r30, r30
    3e52:	ff 1f       	adc	r31, r31
    3e54:	ee 0f       	add	r30, r30
    3e56:	ff 1f       	adc	r31, r31
    3e58:	ee 0f       	add	r30, r30
    3e5a:	ff 1f       	adc	r31, r31
    3e5c:	ec 5f       	subi	r30, 0xFC	; 252
    3e5e:	fd 4d       	sbci	r31, 0xDD	; 221
    3e60:	25 85       	ldd	r18, Z+13	; 0x0d
    3e62:	20 7c       	andi	r18, 0xC0	; 192
    3e64:	09 f0       	breq	.+2      	; 0x3e68 <udd_ep_alloc+0x36>
    3e66:	69 c0       	rjmp	.+210    	; 0x3f3a <udd_ep_alloc+0x108>
    3e68:	63 70       	andi	r22, 0x03	; 3
    3e6a:	61 30       	cpi	r22, 0x01	; 1
    3e6c:	11 f0       	breq	.+4      	; 0x3e72 <udd_ep_alloc+0x40>
    3e6e:	18 f4       	brcc	.+6      	; 0x3e76 <udd_ep_alloc+0x44>
    3e70:	04 c0       	rjmp	.+8      	; 0x3e7a <udd_ep_alloc+0x48>
    3e72:	60 ec       	ldi	r22, 0xC0	; 192
    3e74:	03 c0       	rjmp	.+6      	; 0x3e7c <udd_ep_alloc+0x4a>
    3e76:	60 e8       	ldi	r22, 0x80	; 128
    3e78:	01 c0       	rjmp	.+2      	; 0x3e7c <udd_ep_alloc+0x4a>
    3e7a:	60 e4       	ldi	r22, 0x40	; 64
    3e7c:	40 38       	cpi	r20, 0x80	; 128
    3e7e:	51 05       	cpc	r21, r1
    3e80:	e9 f0       	breq	.+58     	; 0x3ebc <udd_ep_alloc+0x8a>
    3e82:	50 f4       	brcc	.+20     	; 0x3e98 <udd_ep_alloc+0x66>
    3e84:	40 32       	cpi	r20, 0x20	; 32
    3e86:	51 05       	cpc	r21, r1
    3e88:	a9 f0       	breq	.+42     	; 0x3eb4 <udd_ep_alloc+0x82>
    3e8a:	40 34       	cpi	r20, 0x40	; 64
    3e8c:	51 05       	cpc	r21, r1
    3e8e:	a1 f0       	breq	.+40     	; 0x3eb8 <udd_ep_alloc+0x86>
    3e90:	40 31       	cpi	r20, 0x10	; 16
    3e92:	51 05       	cpc	r21, r1
    3e94:	d9 f4       	brne	.+54     	; 0x3ecc <udd_ep_alloc+0x9a>
    3e96:	0c c0       	rjmp	.+24     	; 0x3eb0 <udd_ep_alloc+0x7e>
    3e98:	41 15       	cp	r20, r1
    3e9a:	22 e0       	ldi	r18, 0x02	; 2
    3e9c:	52 07       	cpc	r21, r18
    3e9e:	91 f0       	breq	.+36     	; 0x3ec4 <udd_ep_alloc+0x92>
    3ea0:	4f 3f       	cpi	r20, 0xFF	; 255
    3ea2:	23 e0       	ldi	r18, 0x03	; 3
    3ea4:	52 07       	cpc	r21, r18
    3ea6:	81 f0       	breq	.+32     	; 0x3ec8 <udd_ep_alloc+0x96>
    3ea8:	41 15       	cp	r20, r1
    3eaa:	51 40       	sbci	r21, 0x01	; 1
    3eac:	79 f4       	brne	.+30     	; 0x3ecc <udd_ep_alloc+0x9a>
    3eae:	08 c0       	rjmp	.+16     	; 0x3ec0 <udd_ep_alloc+0x8e>
    3eb0:	21 e0       	ldi	r18, 0x01	; 1
    3eb2:	0d c0       	rjmp	.+26     	; 0x3ece <udd_ep_alloc+0x9c>
    3eb4:	22 e0       	ldi	r18, 0x02	; 2
    3eb6:	0b c0       	rjmp	.+22     	; 0x3ece <udd_ep_alloc+0x9c>
    3eb8:	23 e0       	ldi	r18, 0x03	; 3
    3eba:	09 c0       	rjmp	.+18     	; 0x3ece <udd_ep_alloc+0x9c>
    3ebc:	24 e0       	ldi	r18, 0x04	; 4
    3ebe:	07 c0       	rjmp	.+14     	; 0x3ece <udd_ep_alloc+0x9c>
    3ec0:	25 e0       	ldi	r18, 0x05	; 5
    3ec2:	05 c0       	rjmp	.+10     	; 0x3ece <udd_ep_alloc+0x9c>
    3ec4:	26 e0       	ldi	r18, 0x06	; 6
    3ec6:	03 c0       	rjmp	.+6      	; 0x3ece <udd_ep_alloc+0x9c>
    3ec8:	27 e0       	ldi	r18, 0x07	; 7
    3eca:	01 c0       	rjmp	.+2      	; 0x3ece <udd_ep_alloc+0x9c>
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	fc 01       	movw	r30, r24
    3ed0:	ee 0f       	add	r30, r30
    3ed2:	ff 1f       	adc	r31, r31
    3ed4:	ee 0f       	add	r30, r30
    3ed6:	ff 1f       	adc	r31, r31
    3ed8:	ee 0f       	add	r30, r30
    3eda:	ff 1f       	adc	r31, r31
    3edc:	ec 5f       	subi	r30, 0xFC	; 252
    3ede:	fd 4d       	sbci	r31, 0xDD	; 221
    3ee0:	15 86       	std	Z+13, r1	; 0x0d
    3ee2:	36 e0       	ldi	r19, 0x06	; 6
    3ee4:	34 87       	std	Z+12, r19	; 0x0c
    3ee6:	26 2b       	or	r18, r22
    3ee8:	25 87       	std	Z+13, r18	; 0x0d
    3eea:	fc 01       	movw	r30, r24
    3eec:	ee 0f       	add	r30, r30
    3eee:	ff 1f       	adc	r31, r31
    3ef0:	ee 0f       	add	r30, r30
    3ef2:	ff 1f       	adc	r31, r31
    3ef4:	ee 0f       	add	r30, r30
    3ef6:	ff 1f       	adc	r31, r31
    3ef8:	ec 5f       	subi	r30, 0xFC	; 252
    3efa:	fd 4d       	sbci	r31, 0xDD	; 221
    3efc:	25 85       	ldd	r18, Z+13	; 0x0d
    3efe:	20 7c       	andi	r18, 0xC0	; 192
    3f00:	20 3c       	cpi	r18, 0xC0	; 192
    3f02:	69 f4       	brne	.+26     	; 0x3f1e <udd_ep_alloc+0xec>
    3f04:	fc 01       	movw	r30, r24
    3f06:	ee 0f       	add	r30, r30
    3f08:	ff 1f       	adc	r31, r31
    3f0a:	ee 0f       	add	r30, r30
    3f0c:	ff 1f       	adc	r31, r31
    3f0e:	ee 0f       	add	r30, r30
    3f10:	ff 1f       	adc	r31, r31
    3f12:	ec 5f       	subi	r30, 0xFC	; 252
    3f14:	fd 4d       	sbci	r31, 0xDD	; 221
    3f16:	25 85       	ldd	r18, Z+13	; 0x0d
    3f18:	27 70       	andi	r18, 0x07	; 7
    3f1a:	27 30       	cpi	r18, 0x07	; 7
    3f1c:	81 f0       	breq	.+32     	; 0x3f3e <udd_ep_alloc+0x10c>
    3f1e:	88 0f       	add	r24, r24
    3f20:	99 1f       	adc	r25, r25
    3f22:	88 0f       	add	r24, r24
    3f24:	99 1f       	adc	r25, r25
    3f26:	88 0f       	add	r24, r24
    3f28:	99 1f       	adc	r25, r25
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	ec 5f       	subi	r30, 0xFC	; 252
    3f2e:	fd 4d       	sbci	r31, 0xDD	; 221
    3f30:	85 85       	ldd	r24, Z+13	; 0x0d
    3f32:	80 62       	ori	r24, 0x20	; 32
    3f34:	85 87       	std	Z+13, r24	; 0x0d
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	08 95       	ret
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	08 95       	ret
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	08 95       	ret

00003f42 <udd_ep_is_halted>:
    3f42:	e8 2f       	mov	r30, r24
    3f44:	ef 70       	andi	r30, 0x0F	; 15
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	ee 0f       	add	r30, r30
    3f4a:	ff 1f       	adc	r31, r31
    3f4c:	08 2e       	mov	r0, r24
    3f4e:	00 0c       	add	r0, r0
    3f50:	99 0b       	sbc	r25, r25
    3f52:	88 27       	eor	r24, r24
    3f54:	99 0f       	add	r25, r25
    3f56:	88 1f       	adc	r24, r24
    3f58:	99 27       	eor	r25, r25
    3f5a:	e8 0f       	add	r30, r24
    3f5c:	f9 1f       	adc	r31, r25
    3f5e:	ee 0f       	add	r30, r30
    3f60:	ff 1f       	adc	r31, r31
    3f62:	ee 0f       	add	r30, r30
    3f64:	ff 1f       	adc	r31, r31
    3f66:	ee 0f       	add	r30, r30
    3f68:	ff 1f       	adc	r31, r31
    3f6a:	ec 5f       	subi	r30, 0xFC	; 252
    3f6c:	fd 4d       	sbci	r31, 0xDD	; 221
    3f6e:	85 85       	ldd	r24, Z+13	; 0x0d
    3f70:	82 fb       	bst	r24, 2
    3f72:	88 27       	eor	r24, r24
    3f74:	80 f9       	bld	r24, 0
    3f76:	08 95       	ret

00003f78 <udd_ep_clear_halt>:
    3f78:	0f 93       	push	r16
    3f7a:	28 2f       	mov	r18, r24
    3f7c:	2f 70       	andi	r18, 0x0F	; 15
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	a9 01       	movw	r20, r18
    3f82:	44 0f       	add	r20, r20
    3f84:	55 1f       	adc	r21, r21
    3f86:	28 2f       	mov	r18, r24
    3f88:	08 2e       	mov	r0, r24
    3f8a:	00 0c       	add	r0, r0
    3f8c:	33 0b       	sbc	r19, r19
    3f8e:	22 27       	eor	r18, r18
    3f90:	33 0f       	add	r19, r19
    3f92:	22 1f       	adc	r18, r18
    3f94:	33 27       	eor	r19, r19
    3f96:	24 0f       	add	r18, r20
    3f98:	35 1f       	adc	r19, r21
    3f9a:	a9 01       	movw	r20, r18
    3f9c:	44 0f       	add	r20, r20
    3f9e:	55 1f       	adc	r21, r21
    3fa0:	44 0f       	add	r20, r20
    3fa2:	55 1f       	adc	r21, r21
    3fa4:	44 0f       	add	r20, r20
    3fa6:	55 1f       	adc	r21, r21
    3fa8:	fa 01       	movw	r30, r20
    3faa:	e0 5f       	subi	r30, 0xF0	; 240
    3fac:	fd 4d       	sbci	r31, 0xDD	; 221
    3fae:	01 e0       	ldi	r16, 0x01	; 1
    3fb0:	06 93       	lac	Z, r16
    3fb2:	fa 01       	movw	r30, r20
    3fb4:	ec 5f       	subi	r30, 0xFC	; 252
    3fb6:	fd 4d       	sbci	r31, 0xDD	; 221
    3fb8:	95 85       	ldd	r25, Z+13	; 0x0d
    3fba:	92 ff       	sbrs	r25, 2
    3fbc:	11 c0       	rjmp	.+34     	; 0x3fe0 <udd_ep_clear_halt+0x68>
    3fbe:	fa 01       	movw	r30, r20
    3fc0:	ec 5f       	subi	r30, 0xFC	; 252
    3fc2:	fd 4d       	sbci	r31, 0xDD	; 221
    3fc4:	95 85       	ldd	r25, Z+13	; 0x0d
    3fc6:	9b 7f       	andi	r25, 0xFB	; 251
    3fc8:	95 87       	std	Z+13, r25	; 0x0d
    3fca:	0b dd       	rcall	.-1514   	; 0x39e2 <udd_ep_get_job>
    3fcc:	fc 01       	movw	r30, r24
    3fce:	80 81       	ld	r24, Z
    3fd0:	80 ff       	sbrs	r24, 0
    3fd2:	06 c0       	rjmp	.+12     	; 0x3fe0 <udd_ep_clear_halt+0x68>
    3fd4:	8e 7f       	andi	r24, 0xFE	; 254
    3fd6:	80 83       	st	Z, r24
    3fd8:	07 80       	ldd	r0, Z+7	; 0x07
    3fda:	f0 85       	ldd	r31, Z+8	; 0x08
    3fdc:	e0 2d       	mov	r30, r0
    3fde:	19 95       	eicall
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	0f 91       	pop	r16
    3fe4:	08 95       	ret

00003fe6 <udd_ep_run>:
    3fe6:	6f 92       	push	r6
    3fe8:	7f 92       	push	r7
    3fea:	8f 92       	push	r8
    3fec:	9f 92       	push	r9
    3fee:	af 92       	push	r10
    3ff0:	bf 92       	push	r11
    3ff2:	cf 92       	push	r12
    3ff4:	df 92       	push	r13
    3ff6:	ef 92       	push	r14
    3ff8:	ff 92       	push	r15
    3ffa:	0f 93       	push	r16
    3ffc:	1f 93       	push	r17
    3ffe:	cf 93       	push	r28
    4000:	df 93       	push	r29
    4002:	1f 92       	push	r1
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
    4008:	78 2e       	mov	r7, r24
    400a:	66 2e       	mov	r6, r22
    400c:	4a 01       	movw	r8, r20
    400e:	59 01       	movw	r10, r18
    4010:	e8 dc       	rcall	.-1584   	; 0x39e2 <udd_ep_get_job>
    4012:	6c 01       	movw	r12, r24
    4014:	27 2d       	mov	r18, r7
    4016:	87 2d       	mov	r24, r7
    4018:	8f 70       	andi	r24, 0x0F	; 15
    401a:	e8 2e       	mov	r14, r24
    401c:	f1 2c       	mov	r15, r1
    401e:	c7 01       	movw	r24, r14
    4020:	88 0f       	add	r24, r24
    4022:	99 1f       	adc	r25, r25
    4024:	e7 2c       	mov	r14, r7
    4026:	07 2c       	mov	r0, r7
    4028:	00 0c       	add	r0, r0
    402a:	ff 08       	sbc	r15, r15
    402c:	ee 24       	eor	r14, r14
    402e:	ff 0c       	add	r15, r15
    4030:	ee 1c       	adc	r14, r14
    4032:	ff 24       	eor	r15, r15
    4034:	e8 0e       	add	r14, r24
    4036:	f9 1e       	adc	r15, r25
    4038:	f7 01       	movw	r30, r14
    403a:	ee 0f       	add	r30, r30
    403c:	ff 1f       	adc	r31, r31
    403e:	ee 0f       	add	r30, r30
    4040:	ff 1f       	adc	r31, r31
    4042:	ee 0f       	add	r30, r30
    4044:	ff 1f       	adc	r31, r31
    4046:	ec 5f       	subi	r30, 0xFC	; 252
    4048:	fd 4d       	sbci	r31, 0xDD	; 221
    404a:	85 85       	ldd	r24, Z+13	; 0x0d
    404c:	80 7c       	andi	r24, 0xC0	; 192
    404e:	09 f4       	brne	.+2      	; 0x4052 <udd_ep_run+0x6c>
    4050:	82 c0       	rjmp	.+260    	; 0x4156 <udd_ep_run+0x170>
    4052:	f7 01       	movw	r30, r14
    4054:	ee 0f       	add	r30, r30
    4056:	ff 1f       	adc	r31, r31
    4058:	ee 0f       	add	r30, r30
    405a:	ff 1f       	adc	r31, r31
    405c:	ee 0f       	add	r30, r30
    405e:	ff 1f       	adc	r31, r31
    4060:	ec 5f       	subi	r30, 0xFC	; 252
    4062:	fd 4d       	sbci	r31, 0xDD	; 221
    4064:	85 85       	ldd	r24, Z+13	; 0x0d
    4066:	80 7c       	andi	r24, 0xC0	; 192
    4068:	80 3c       	cpi	r24, 0xC0	; 192
    406a:	61 f0       	breq	.+24     	; 0x4084 <udd_ep_run+0x9e>
    406c:	f7 01       	movw	r30, r14
    406e:	ee 0f       	add	r30, r30
    4070:	ff 1f       	adc	r31, r31
    4072:	ee 0f       	add	r30, r30
    4074:	ff 1f       	adc	r31, r31
    4076:	ee 0f       	add	r30, r30
    4078:	ff 1f       	adc	r31, r31
    407a:	ec 5f       	subi	r30, 0xFC	; 252
    407c:	fd 4d       	sbci	r31, 0xDD	; 221
    407e:	85 85       	ldd	r24, Z+13	; 0x0d
    4080:	82 fd       	sbrc	r24, 2
    4082:	6b c0       	rjmp	.+214    	; 0x415a <udd_ep_run+0x174>
    4084:	8f b7       	in	r24, 0x3f	; 63
    4086:	89 83       	std	Y+1, r24	; 0x01
    4088:	f8 94       	cli
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	f6 01       	movw	r30, r12
    408e:	90 81       	ld	r25, Z
    4090:	90 ff       	sbrs	r25, 0
    4092:	03 c0       	rjmp	.+6      	; 0x409a <udd_ep_run+0xb4>
    4094:	8f bf       	out	0x3f, r24	; 63
    4096:	80 e0       	ldi	r24, 0x00	; 0
    4098:	61 c0       	rjmp	.+194    	; 0x415c <udd_ep_run+0x176>
    409a:	f6 01       	movw	r30, r12
    409c:	90 81       	ld	r25, Z
    409e:	91 60       	ori	r25, 0x01	; 1
    40a0:	90 83       	st	Z, r25
    40a2:	8f bf       	out	0x3f, r24	; 63
    40a4:	81 82       	std	Z+1, r8	; 0x01
    40a6:	92 82       	std	Z+2, r9	; 0x02
    40a8:	a3 82       	std	Z+3, r10	; 0x03
    40aa:	b4 82       	std	Z+4, r11	; 0x04
    40ac:	15 82       	std	Z+5, r1	; 0x05
    40ae:	16 82       	std	Z+6, r1	; 0x06
    40b0:	07 83       	std	Z+7, r16	; 0x07
    40b2:	10 87       	std	Z+8, r17	; 0x08
    40b4:	61 10       	cpse	r6, r1
    40b6:	06 c0       	rjmp	.+12     	; 0x40c4 <udd_ep_run+0xde>
    40b8:	91 e0       	ldi	r25, 0x01	; 1
    40ba:	a1 14       	cp	r10, r1
    40bc:	b1 04       	cpc	r11, r1
    40be:	19 f0       	breq	.+6      	; 0x40c6 <udd_ep_run+0xe0>
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	01 c0       	rjmp	.+2      	; 0x40c6 <udd_ep_run+0xe0>
    40c4:	91 e0       	ldi	r25, 0x01	; 1
    40c6:	f6 01       	movw	r30, r12
    40c8:	80 81       	ld	r24, Z
    40ca:	90 fb       	bst	r25, 0
    40cc:	81 f9       	bld	r24, 1
    40ce:	8b 7f       	andi	r24, 0xFB	; 251
    40d0:	80 83       	st	Z, r24
    40d2:	22 23       	and	r18, r18
    40d4:	64 f4       	brge	.+24     	; 0x40ee <udd_ep_run+0x108>
    40d6:	f7 01       	movw	r30, r14
    40d8:	ee 0f       	add	r30, r30
    40da:	ff 1f       	adc	r31, r31
    40dc:	ee 0f       	add	r30, r30
    40de:	ff 1f       	adc	r31, r31
    40e0:	ee 0f       	add	r30, r30
    40e2:	ff 1f       	adc	r31, r31
    40e4:	ec 5f       	subi	r30, 0xFC	; 252
    40e6:	fd 4d       	sbci	r31, 0xDD	; 221
    40e8:	12 8a       	std	Z+18, r1	; 0x12
    40ea:	13 8a       	std	Z+19, r1	; 0x13
    40ec:	30 c0       	rjmp	.+96     	; 0x414e <udd_ep_run+0x168>
    40ee:	f7 01       	movw	r30, r14
    40f0:	ee 0f       	add	r30, r30
    40f2:	ff 1f       	adc	r31, r31
    40f4:	ee 0f       	add	r30, r30
    40f6:	ff 1f       	adc	r31, r31
    40f8:	ee 0f       	add	r30, r30
    40fa:	ff 1f       	adc	r31, r31
    40fc:	ec 5f       	subi	r30, 0xFC	; 252
    40fe:	fd 4d       	sbci	r31, 0xDD	; 221
    4100:	85 85       	ldd	r24, Z+13	; 0x0d
    4102:	80 7c       	andi	r24, 0xC0	; 192
    4104:	80 3c       	cpi	r24, 0xC0	; 192
    4106:	b1 f4       	brne	.+44     	; 0x4134 <udd_ep_run+0x14e>
    4108:	c7 01       	movw	r24, r14
    410a:	88 0f       	add	r24, r24
    410c:	99 1f       	adc	r25, r25
    410e:	88 0f       	add	r24, r24
    4110:	99 1f       	adc	r25, r25
    4112:	88 0f       	add	r24, r24
    4114:	99 1f       	adc	r25, r25
    4116:	80 5f       	subi	r24, 0xF0	; 240
    4118:	9d 4d       	sbci	r25, 0xDD	; 221
    411a:	3a dc       	rcall	.-1932   	; 0x3990 <udd_ep_get_size>
    411c:	bc 01       	movw	r22, r24
    411e:	c5 01       	movw	r24, r10
    4120:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <__udivmodhi4>
    4124:	89 2b       	or	r24, r25
    4126:	31 f0       	breq	.+12     	; 0x4134 <udd_ep_run+0x14e>
    4128:	f6 01       	movw	r30, r12
    412a:	80 81       	ld	r24, Z
    412c:	8e 7f       	andi	r24, 0xFE	; 254
    412e:	80 83       	st	Z, r24
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	14 c0       	rjmp	.+40     	; 0x415c <udd_ep_run+0x176>
    4134:	f7 01       	movw	r30, r14
    4136:	ee 0f       	add	r30, r30
    4138:	ff 1f       	adc	r31, r31
    413a:	ee 0f       	add	r30, r30
    413c:	ff 1f       	adc	r31, r31
    413e:	ee 0f       	add	r30, r30
    4140:	ff 1f       	adc	r31, r31
    4142:	ec 5f       	subi	r30, 0xFC	; 252
    4144:	fd 4d       	sbci	r31, 0xDD	; 221
    4146:	16 86       	std	Z+14, r1	; 0x0e
    4148:	17 86       	std	Z+15, r1	; 0x0f
    414a:	12 8a       	std	Z+18, r1	; 0x12
    414c:	13 8a       	std	Z+19, r1	; 0x13
    414e:	87 2d       	mov	r24, r7
    4150:	d5 dc       	rcall	.-1622   	; 0x3afc <udd_ep_trans_complet>
    4152:	81 e0       	ldi	r24, 0x01	; 1
    4154:	03 c0       	rjmp	.+6      	; 0x415c <udd_ep_run+0x176>
    4156:	80 e0       	ldi	r24, 0x00	; 0
    4158:	01 c0       	rjmp	.+2      	; 0x415c <udd_ep_run+0x176>
    415a:	80 e0       	ldi	r24, 0x00	; 0
    415c:	0f 90       	pop	r0
    415e:	df 91       	pop	r29
    4160:	cf 91       	pop	r28
    4162:	1f 91       	pop	r17
    4164:	0f 91       	pop	r16
    4166:	ff 90       	pop	r15
    4168:	ef 90       	pop	r14
    416a:	df 90       	pop	r13
    416c:	cf 90       	pop	r12
    416e:	bf 90       	pop	r11
    4170:	af 90       	pop	r10
    4172:	9f 90       	pop	r9
    4174:	8f 90       	pop	r8
    4176:	7f 90       	pop	r7
    4178:	6f 90       	pop	r6
    417a:	08 95       	ret

0000417c <udd_ep_abort>:
    417c:	ff 92       	push	r15
    417e:	0f 93       	push	r16
    4180:	1f 93       	push	r17
    4182:	cf 93       	push	r28
    4184:	df 93       	push	r29
    4186:	18 2f       	mov	r17, r24
    4188:	c8 2f       	mov	r28, r24
    418a:	cf 70       	andi	r28, 0x0F	; 15
    418c:	d0 e0       	ldi	r29, 0x00	; 0
    418e:	ce 01       	movw	r24, r28
    4190:	88 0f       	add	r24, r24
    4192:	99 1f       	adc	r25, r25
    4194:	c1 2f       	mov	r28, r17
    4196:	01 2e       	mov	r0, r17
    4198:	00 0c       	add	r0, r0
    419a:	dd 0b       	sbc	r29, r29
    419c:	cc 27       	eor	r28, r28
    419e:	dd 0f       	add	r29, r29
    41a0:	cc 1f       	adc	r28, r28
    41a2:	dd 27       	eor	r29, r29
    41a4:	c8 0f       	add	r28, r24
    41a6:	d9 1f       	adc	r29, r25
    41a8:	81 2f       	mov	r24, r17
    41aa:	1b dc       	rcall	.-1994   	; 0x39e2 <udd_ep_get_job>
    41ac:	dc 01       	movw	r26, r24
    41ae:	fe 01       	movw	r30, r28
    41b0:	ee 0f       	add	r30, r30
    41b2:	ff 1f       	adc	r31, r31
    41b4:	ee 0f       	add	r30, r30
    41b6:	ff 1f       	adc	r31, r31
    41b8:	ee 0f       	add	r30, r30
    41ba:	ff 1f       	adc	r31, r31
    41bc:	e0 5f       	subi	r30, 0xF0	; 240
    41be:	fd 4d       	sbci	r31, 0xDD	; 221
    41c0:	02 e0       	ldi	r16, 0x02	; 2
    41c2:	05 93       	las	Z, r16
    41c4:	8c 91       	ld	r24, X
    41c6:	80 ff       	sbrs	r24, 0
    41c8:	22 c0       	rjmp	.+68     	; 0x420e <udd_ep_abort+0x92>
    41ca:	8e 7f       	andi	r24, 0xFE	; 254
    41cc:	8c 93       	st	X, r24
    41ce:	17 96       	adiw	r26, 0x07	; 7
    41d0:	ed 91       	ld	r30, X+
    41d2:	fc 91       	ld	r31, X
    41d4:	18 97       	sbiw	r26, 0x08	; 8
    41d6:	30 97       	sbiw	r30, 0x00	; 0
    41d8:	d1 f0       	breq	.+52     	; 0x420e <udd_ep_abort+0x92>
    41da:	11 23       	and	r17, r17
    41dc:	5c f4       	brge	.+22     	; 0x41f4 <udd_ep_abort+0x78>
    41de:	cc 0f       	add	r28, r28
    41e0:	dd 1f       	adc	r29, r29
    41e2:	cc 0f       	add	r28, r28
    41e4:	dd 1f       	adc	r29, r29
    41e6:	cc 0f       	add	r28, r28
    41e8:	dd 1f       	adc	r29, r29
    41ea:	cc 5f       	subi	r28, 0xFC	; 252
    41ec:	dd 4d       	sbci	r29, 0xDD	; 221
    41ee:	6a 89       	ldd	r22, Y+18	; 0x12
    41f0:	7b 89       	ldd	r23, Y+19	; 0x13
    41f2:	0a c0       	rjmp	.+20     	; 0x4208 <udd_ep_abort+0x8c>
    41f4:	cc 0f       	add	r28, r28
    41f6:	dd 1f       	adc	r29, r29
    41f8:	cc 0f       	add	r28, r28
    41fa:	dd 1f       	adc	r29, r29
    41fc:	cc 0f       	add	r28, r28
    41fe:	dd 1f       	adc	r29, r29
    4200:	cc 5f       	subi	r28, 0xFC	; 252
    4202:	dd 4d       	sbci	r29, 0xDD	; 221
    4204:	6e 85       	ldd	r22, Y+14	; 0x0e
    4206:	7f 85       	ldd	r23, Y+15	; 0x0f
    4208:	41 2f       	mov	r20, r17
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	19 95       	eicall
    420e:	df 91       	pop	r29
    4210:	cf 91       	pop	r28
    4212:	1f 91       	pop	r17
    4214:	0f 91       	pop	r16
    4216:	ff 90       	pop	r15
    4218:	08 95       	ret

0000421a <udd_ep_free>:
    421a:	cf 93       	push	r28
    421c:	c8 2f       	mov	r28, r24
    421e:	ae df       	rcall	.-164    	; 0x417c <udd_ep_abort>
    4220:	ec 2f       	mov	r30, r28
    4222:	ef 70       	andi	r30, 0x0F	; 15
    4224:	f0 e0       	ldi	r31, 0x00	; 0
    4226:	ee 0f       	add	r30, r30
    4228:	ff 1f       	adc	r31, r31
    422a:	8c 2f       	mov	r24, r28
    422c:	cc 0f       	add	r28, r28
    422e:	99 0b       	sbc	r25, r25
    4230:	88 27       	eor	r24, r24
    4232:	99 0f       	add	r25, r25
    4234:	88 1f       	adc	r24, r24
    4236:	99 27       	eor	r25, r25
    4238:	e8 0f       	add	r30, r24
    423a:	f9 1f       	adc	r31, r25
    423c:	ee 0f       	add	r30, r30
    423e:	ff 1f       	adc	r31, r31
    4240:	ee 0f       	add	r30, r30
    4242:	ff 1f       	adc	r31, r31
    4244:	ee 0f       	add	r30, r30
    4246:	ff 1f       	adc	r31, r31
    4248:	ec 5f       	subi	r30, 0xFC	; 252
    424a:	fd 4d       	sbci	r31, 0xDD	; 221
    424c:	15 86       	std	Z+13, r1	; 0x0d
    424e:	cf 91       	pop	r28
    4250:	08 95       	ret

00004252 <udd_ep_set_halt>:
    4252:	e8 2f       	mov	r30, r24
    4254:	ef 70       	andi	r30, 0x0F	; 15
    4256:	f0 e0       	ldi	r31, 0x00	; 0
    4258:	ee 0f       	add	r30, r30
    425a:	ff 1f       	adc	r31, r31
    425c:	28 2f       	mov	r18, r24
    425e:	08 2e       	mov	r0, r24
    4260:	00 0c       	add	r0, r0
    4262:	33 0b       	sbc	r19, r19
    4264:	22 27       	eor	r18, r18
    4266:	33 0f       	add	r19, r19
    4268:	22 1f       	adc	r18, r18
    426a:	33 27       	eor	r19, r19
    426c:	e2 0f       	add	r30, r18
    426e:	f3 1f       	adc	r31, r19
    4270:	ee 0f       	add	r30, r30
    4272:	ff 1f       	adc	r31, r31
    4274:	ee 0f       	add	r30, r30
    4276:	ff 1f       	adc	r31, r31
    4278:	ee 0f       	add	r30, r30
    427a:	ff 1f       	adc	r31, r31
    427c:	ec 5f       	subi	r30, 0xFC	; 252
    427e:	fd 4d       	sbci	r31, 0xDD	; 221
    4280:	95 85       	ldd	r25, Z+13	; 0x0d
    4282:	94 60       	ori	r25, 0x04	; 4
    4284:	95 87       	std	Z+13, r25	; 0x0d
    4286:	7a df       	rcall	.-268    	; 0x417c <udd_ep_abort>
    4288:	81 e0       	ldi	r24, 0x01	; 1
    428a:	08 95       	ret

0000428c <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    428c:	1f 92       	push	r1
    428e:	0f 92       	push	r0
    4290:	0f b6       	in	r0, 0x3f	; 63
    4292:	0f 92       	push	r0
    4294:	11 24       	eor	r1, r1
    4296:	0b b6       	in	r0, 0x3b	; 59
    4298:	0f 92       	push	r0
    429a:	0f 93       	push	r16
    429c:	2f 93       	push	r18
    429e:	3f 93       	push	r19
    42a0:	4f 93       	push	r20
    42a2:	5f 93       	push	r21
    42a4:	6f 93       	push	r22
    42a6:	7f 93       	push	r23
    42a8:	8f 93       	push	r24
    42aa:	9f 93       	push	r25
    42ac:	af 93       	push	r26
    42ae:	bf 93       	push	r27
    42b0:	ef 93       	push	r30
    42b2:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    42b4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    42b8:	88 23       	and	r24, r24
    42ba:	2c f4       	brge	.+10     	; 0x42c6 <__vector_125+0x3a>
		udd_ack_start_of_frame_event();
    42bc:	80 e8       	ldi	r24, 0x80	; 128
    42be:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    42c2:	3a d5       	rcall	.+2676   	; 0x4d38 <udc_sof_notify>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    42c4:	87 c0       	rjmp	.+270    	; 0x43d4 <__vector_125+0x148>
    42c6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    42ca:	82 ff       	sbrs	r24, 2
		udd_ack_underflow_event();
    42cc:	20 c0       	rjmp	.+64     	; 0x430e <__vector_125+0x82>
    42ce:	84 e0       	ldi	r24, 0x04	; 4
    42d0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    42d4:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <udd_sram+0x14>
    42d8:	86 ff       	sbrs	r24, 6
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    42da:	7c c0       	rjmp	.+248    	; 0x43d4 <__vector_125+0x148>
    42dc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    42e0:	81 fd       	sbrc	r24, 1
    42e2:	78 c0       	rjmp	.+240    	; 0x43d4 <__vector_125+0x148>
    42e4:	99 db       	rcall	.-2254   	; 0x3a18 <udd_ctrl_interrupt_tc_setup>
    42e6:	81 11       	cpse	r24, r1
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    42e8:	75 c0       	rjmp	.+234    	; 0x43d4 <__vector_125+0x148>
    42ea:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <udd_ep_control_state>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    42ee:	81 30       	cpi	r24, 0x01	; 1
    42f0:	11 f4       	brne	.+4      	; 0x42f6 <__vector_125+0x6a>
    42f2:	cc da       	rcall	.-2664   	; 0x388c <udd_ctrl_send_zlp_in>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    42f4:	6f c0       	rjmp	.+222    	; 0x43d4 <__vector_125+0x148>
    42f6:	84 30       	cpi	r24, 0x04	; 4
    42f8:	09 f0       	breq	.+2      	; 0x42fc <__vector_125+0x70>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    42fa:	6c c0       	rjmp	.+216    	; 0x43d4 <__vector_125+0x148>
    42fc:	e9 e1       	ldi	r30, 0x19	; 25
    42fe:	f2 e2       	ldi	r31, 0x22	; 34
    4300:	04 e0       	ldi	r16, 0x04	; 4
		udd_control_out_enable_stall();
    4302:	05 93       	las	Z, r16
    4304:	e1 e1       	ldi	r30, 0x11	; 17
    4306:	f2 e2       	ldi	r31, 0x22	; 34
    4308:	04 e0       	ldi	r16, 0x04	; 4
    430a:	05 93       	las	Z, r16
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    430c:	63 c0       	rjmp	.+198    	; 0x43d4 <__vector_125+0x148>
    430e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    4312:	81 ff       	sbrs	r24, 1
		udd_ack_overflow_event();
    4314:	5a c0       	rjmp	.+180    	; 0x43ca <__vector_125+0x13e>
    4316:	82 e0       	ldi	r24, 0x02	; 2
    4318:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    431c:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udd_sram+0xc>
    4320:	86 ff       	sbrs	r24, 6
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    4322:	58 c0       	rjmp	.+176    	; 0x43d4 <__vector_125+0x148>
    4324:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    4328:	81 fd       	sbrc	r24, 1
    432a:	54 c0       	rjmp	.+168    	; 0x43d4 <__vector_125+0x148>
    432c:	75 db       	rcall	.-2326   	; 0x3a18 <udd_ctrl_interrupt_tc_setup>
    432e:	81 11       	cpse	r24, r1
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    4330:	51 c0       	rjmp	.+162    	; 0x43d4 <__vector_125+0x148>
    4332:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <udd_ep_control_state>
    4336:	82 30       	cpi	r24, 0x02	; 2
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    4338:	41 f4       	brne	.+16     	; 0x434a <__vector_125+0xbe>
    433a:	84 e0       	ldi	r24, 0x04	; 4
    433c:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    4340:	e0 e1       	ldi	r30, 0x10	; 16
    4342:	f2 e2       	ldi	r31, 0x22	; 34
    4344:	02 e0       	ldi	r16, 0x02	; 2
    4346:	06 93       	lac	Z, r16
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    4348:	45 c0       	rjmp	.+138    	; 0x43d4 <__vector_125+0x148>
    434a:	83 30       	cpi	r24, 0x03	; 3
    434c:	09 f0       	breq	.+2      	; 0x4350 <__vector_125+0xc4>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    434e:	42 c0       	rjmp	.+132    	; 0x43d4 <__vector_125+0x148>
    4350:	e9 e1       	ldi	r30, 0x19	; 25
    4352:	f2 e2       	ldi	r31, 0x22	; 34
    4354:	04 e0       	ldi	r16, 0x04	; 4
		udd_control_out_enable_stall();
    4356:	05 93       	las	Z, r16
    4358:	e1 e1       	ldi	r30, 0x11	; 17
    435a:	f2 e2       	ldi	r31, 0x22	; 34
    435c:	04 e0       	ldi	r16, 0x04	; 4

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    435e:	05 93       	las	Z, r16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    4360:	39 c0       	rjmp	.+114    	; 0x43d4 <__vector_125+0x148>
			udd_ep_abort(i | USB_EP_DIR_IN);
    4362:	80 e1       	ldi	r24, 0x10	; 16
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    4364:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    4368:	81 e0       	ldi	r24, 0x01	; 1
			udd_ep_abort(i | USB_EP_DIR_IN);
    436a:	08 df       	rcall	.-496    	; 0x417c <udd_ep_abort>
    436c:	81 e8       	ldi	r24, 0x81	; 129
    436e:	06 df       	rcall	.-500    	; 0x417c <udd_ep_abort>
		}
#endif
		udc_reset();
    4370:	82 e0       	ldi	r24, 0x02	; 2
    4372:	04 df       	rcall	.-504    	; 0x417c <udd_ep_abort>

		// Reset USB address to 0
		udd_set_device_address(0);
    4374:	82 e8       	ldi	r24, 0x82	; 130
    4376:	02 df       	rcall	.-508    	; 0x417c <udd_ep_abort>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    4378:	b6 d4       	rcall	.+2412   	; 0x4ce6 <udc_reset>
    437a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
	udd_endpoint_clear_status(ep_ctrl);
    437e:	e4 e0       	ldi	r30, 0x04	; 4
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    4380:	f2 e2       	ldi	r31, 0x22	; 34
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    4382:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    4384:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    4386:	94 87       	std	Z+12, r25	; 0x0c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    4388:	83 e4       	ldi	r24, 0x43	; 67
    438a:	85 87       	std	Z+13, r24	; 0x0d
    438c:	15 8a       	std	Z+21, r1	; 0x15
    438e:	94 8b       	std	Z+20, r25	; 0x14
		// Reset endpoint control management
		udd_ctrl_init();
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    4390:	85 8b       	std	Z+21, r24	; 0x15
    4392:	8e eb       	ldi	r24, 0xBE	; 190
    4394:	91 e2       	ldi	r25, 0x21	; 33
    4396:	80 8b       	std	Z+16, r24	; 0x10
		udd_ack_suspend_event();
    4398:	91 8b       	std	Z+17, r25	; 0x11
    439a:	45 da       	rcall	.-2934   	; 0x3826 <udd_ctrl_init>
    439c:	1b c0       	rjmp	.+54     	; 0x43d4 <__vector_125+0x148>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    439e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    43a2:	86 ff       	sbrs	r24, 6
	}

	if (udd_is_resume_event()) {
    43a4:	07 c0       	rjmp	.+14     	; 0x43b4 <__vector_125+0x128>
    43a6:	80 e4       	ldi	r24, 0x40	; 64
    43a8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_ack_resume_event();
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	03 da       	rcall	.-3066   	; 0x37b6 <udd_sleep_mode>
    43b0:	1d d1       	rcall	.+570    	; 0x45ec <usb_callback_suspend_action>
		udd_sleep_mode(true); // Enter in power reduction mode
    43b2:	10 c0       	rjmp	.+32     	; 0x43d4 <__vector_125+0x148>
    43b4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    43b8:	85 ff       	sbrs	r24, 5
    43ba:	0c c0       	rjmp	.+24     	; 0x43d4 <__vector_125+0x148>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    43bc:	80 e2       	ldi	r24, 0x20	; 32
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    43be:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	f8 d9       	rcall	.-3088   	; 0x37b6 <udd_sleep_mode>
    43c6:	13 d1       	rcall	.+550    	; 0x45ee <usb_callback_resume_action>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    43c8:	05 c0       	rjmp	.+10     	; 0x43d4 <__vector_125+0x148>
    43ca:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    43ce:	84 fd       	sbrc	r24, 4
    43d0:	c8 cf       	rjmp	.-112    	; 0x4362 <__vector_125+0xd6>
    43d2:	e5 cf       	rjmp	.-54     	; 0x439e <__vector_125+0x112>
    43d4:	ff 91       	pop	r31
    43d6:	ef 91       	pop	r30
    43d8:	bf 91       	pop	r27
    43da:	af 91       	pop	r26
    43dc:	9f 91       	pop	r25
    43de:	8f 91       	pop	r24
    43e0:	7f 91       	pop	r23
    43e2:	6f 91       	pop	r22
    43e4:	5f 91       	pop	r21
    43e6:	4f 91       	pop	r20
    43e8:	3f 91       	pop	r19
    43ea:	2f 91       	pop	r18
    43ec:	0f 91       	pop	r16
    43ee:	0f 90       	pop	r0
    43f0:	0b be       	out	0x3b, r0	; 59
    43f2:	0f 90       	pop	r0
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	0f 90       	pop	r0
    43f8:	1f 90       	pop	r1
    43fa:	18 95       	reti

000043fc <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    43fc:	1f 92       	push	r1
    43fe:	0f 92       	push	r0
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	0f 92       	push	r0
    4404:	11 24       	eor	r1, r1
    4406:	0b b6       	in	r0, 0x3b	; 59
    4408:	0f 92       	push	r0
    440a:	0f 93       	push	r16
    440c:	1f 93       	push	r17
    440e:	2f 93       	push	r18
    4410:	3f 93       	push	r19
    4412:	4f 93       	push	r20
    4414:	5f 93       	push	r21
    4416:	6f 93       	push	r22
    4418:	7f 93       	push	r23
    441a:	8f 93       	push	r24
    441c:	9f 93       	push	r25
    441e:	af 93       	push	r26
    4420:	bf 93       	push	r27
    4422:	cf 93       	push	r28
    4424:	df 93       	push	r29
    4426:	ef 93       	push	r30
    4428:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    442a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    442e:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    4430:	03 c0       	rjmp	.+6      	; 0x4438 <__vector_126+0x3c>
    4432:	f2 da       	rcall	.-2588   	; 0x3a18 <udd_ctrl_interrupt_tc_setup>
    4434:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    4436:	c3 c0       	rjmp	.+390    	; 0x45be <__vector_126+0x1c2>
    4438:	82 e0       	ldi	r24, 0x02	; 2
    443a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    443e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    4442:	81 95       	neg	r24
    4444:	88 0f       	add	r24, r24
    4446:	e0 e1       	ldi	r30, 0x10	; 16
    4448:	f2 e2       	ldi	r31, 0x22	; 34
    444a:	e8 1b       	sub	r30, r24
    444c:	f1 09       	sbc	r31, r1
    444e:	20 81       	ld	r18, Z
    4450:	31 81       	ldd	r19, Z+1	; 0x01
    4452:	20 51       	subi	r18, 0x10	; 16
    4454:	32 42       	sbci	r19, 0x22	; 34
    4456:	36 95       	lsr	r19
    4458:	27 95       	ror	r18
    445a:	36 95       	lsr	r19
    445c:	27 95       	ror	r18
    445e:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    4460:	27 95       	ror	r18
    4462:	82 2f       	mov	r24, r18
    4464:	86 95       	lsr	r24
    4466:	20 fd       	sbrc	r18, 0
    4468:	02 c0       	rjmp	.+4      	; 0x446e <__vector_126+0x72>
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	01 c0       	rjmp	.+2      	; 0x4470 <__vector_126+0x74>
    446e:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4470:	89 0f       	add	r24, r25
    4472:	e8 2f       	mov	r30, r24
    4474:	ef 70       	andi	r30, 0x0F	; 15
    4476:	f0 e0       	ldi	r31, 0x00	; 0
    4478:	ee 0f       	add	r30, r30
    447a:	ff 1f       	adc	r31, r31
    447c:	28 2f       	mov	r18, r24
    447e:	08 2e       	mov	r0, r24
    4480:	00 0c       	add	r0, r0
    4482:	33 0b       	sbc	r19, r19
    4484:	22 27       	eor	r18, r18
    4486:	33 0f       	add	r19, r19
    4488:	22 1f       	adc	r18, r18
    448a:	33 27       	eor	r19, r19
    448c:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    448e:	f3 1f       	adc	r31, r19
    4490:	df 01       	movw	r26, r30
    4492:	aa 0f       	add	r26, r26
    4494:	bb 1f       	adc	r27, r27
    4496:	aa 0f       	add	r26, r26
    4498:	bb 1f       	adc	r27, r27
    449a:	aa 0f       	add	r26, r26
    449c:	bb 1f       	adc	r27, r27
    449e:	ac 5f       	subi	r26, 0xFC	; 252
    44a0:	bd 4d       	sbci	r27, 0xDD	; 221
    44a2:	1c 96       	adiw	r26, 0x0c	; 12
    44a4:	9c 91       	ld	r25, X
    44a6:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    44a8:	8a c0       	rjmp	.+276    	; 0x45be <__vector_126+0x1c2>
    44aa:	ee 0f       	add	r30, r30
    44ac:	ff 1f       	adc	r31, r31
    44ae:	ee 0f       	add	r30, r30
    44b0:	ff 1f       	adc	r31, r31
    44b2:	ee 0f       	add	r30, r30
    44b4:	ff 1f       	adc	r31, r31
    44b6:	e0 5f       	subi	r30, 0xF0	; 240
    44b8:	fd 4d       	sbci	r31, 0xDD	; 221
    44ba:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    44bc:	06 93       	lac	Z, r16
    44be:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    44c0:	79 c0       	rjmp	.+242    	; 0x45b4 <__vector_126+0x1b8>
    44c2:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    44c6:	84 30       	cpi	r24, 0x04	; 4
    44c8:	19 f4       	brne	.+6      	; 0x44d0 <__vector_126+0xd4>
    44ca:	ee d9       	rcall	.-3108   	; 0x38a8 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    44cc:	ac d9       	rcall	.-3240   	; 0x3826 <udd_ctrl_init>
    44ce:	77 c0       	rjmp	.+238    	; 0x45be <__vector_126+0x1c2>
    44d0:	00 91 12 22 	lds	r16, 0x2212	; 0x802212 <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    44d4:	10 91 13 22 	lds	r17, 0x2213	; 0x802213 <udd_sram+0xf>
    44d8:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0xa>
    44dc:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0xb>
    44e0:	c0 91 fe 21 	lds	r28, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans>
    44e4:	d0 91 ff 21 	lds	r29, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans+0x1>
    44e8:	98 01       	movw	r18, r16
    44ea:	2c 0f       	add	r18, r28
    44ec:	3d 1f       	adc	r19, r29
    44ee:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    44f0:	93 07       	cpc	r25, r19
    44f2:	18 f4       	brcc	.+6      	; 0x44fa <__vector_126+0xfe>
    44f4:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    44f6:	0c 1b       	sub	r16, r28
    44f8:	1d 0b       	sbc	r17, r29
    44fa:	80 91 94 23 	lds	r24, 0x2394	; 0x802394 <udd_g_ctrlreq+0x8>
    44fe:	90 91 95 23 	lds	r25, 0x2395	; 0x802395 <udd_g_ctrlreq+0x9>
    4502:	a8 01       	movw	r20, r16
    4504:	6e eb       	ldi	r22, 0xBE	; 190
    4506:	71 e2       	ldi	r23, 0x21	; 33
    4508:	8c 0f       	add	r24, r28
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    450a:	9d 1f       	adc	r25, r29
    450c:	2a d7       	rcall	.+3668   	; 0x5362 <memcpy>
    450e:	c0 0f       	add	r28, r16
    4510:	d1 1f       	adc	r29, r17
    4512:	c0 93 fe 21 	sts	0x21FE, r28	; 0x8021fe <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    4516:	d0 93 ff 21 	sts	0x21FF, r29	; 0x8021ff <udd_ctrl_payload_nb_trans+0x1>
    451a:	00 34       	cpi	r16, 0x40	; 64
    451c:	11 05       	cpc	r17, r1
    451e:	69 f4       	brne	.+26     	; 0x453a <__vector_126+0x13e>
    4520:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <udd_ctrl_prev_payload_nb_trans>
    4524:	90 91 01 22 	lds	r25, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans+0x1>
    4528:	8c 0f       	add	r24, r28
    452a:	9d 1f       	adc	r25, r29
    452c:	20 91 92 23 	lds	r18, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    4530:	30 91 93 23 	lds	r19, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    4534:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    4536:	93 07       	cpc	r25, r19
    4538:	80 f0       	brcs	.+32     	; 0x455a <__vector_126+0x15e>
    453a:	ec e8       	ldi	r30, 0x8C	; 140
    453c:	f3 e2       	ldi	r31, 0x23	; 35
		if (NULL != udd_g_ctrlreq.over_under_run) {
    453e:	c2 87       	std	Z+10, r28	; 0x0a
    4540:	d3 87       	std	Z+11, r29	; 0x0b
    4542:	06 84       	ldd	r0, Z+14	; 0x0e
    4544:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    4546:	e0 2d       	mov	r30, r0
    4548:	30 97       	sbiw	r30, 0x00	; 0
				// Stall ZLP
				udd_ctrl_stall_data();
    454a:	29 f0       	breq	.+10     	; 0x4556 <__vector_126+0x15a>
    454c:	19 95       	eicall
    454e:	81 11       	cpse	r24, r1
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    4550:	02 c0       	rjmp	.+4      	; 0x4556 <__vector_126+0x15a>
    4552:	8e d9       	rcall	.-3300   	; 0x3870 <udd_ctrl_stall_data>
    4554:	34 c0       	rjmp	.+104    	; 0x45be <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    4556:	9a d9       	rcall	.-3276   	; 0x388c <udd_ctrl_send_zlp_in>
    4558:	32 c0       	rjmp	.+100    	; 0x45be <__vector_126+0x1c2>
    455a:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <udd_g_ctrlreq+0xa>
    455e:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    4562:	c8 17       	cp	r28, r24
    4564:	d9 07       	cpc	r29, r25
    4566:	f9 f4       	brne	.+62     	; 0x45a6 <__vector_126+0x1aa>
    4568:	e0 91 9a 23 	lds	r30, 0x239A	; 0x80239a <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    456c:	f0 91 9b 23 	lds	r31, 0x239B	; 0x80239b <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    4570:	30 97       	sbiw	r30, 0x00	; 0
    4572:	11 f4       	brne	.+4      	; 0x4578 <__vector_126+0x17c>
    4574:	7d d9       	rcall	.-3334   	; 0x3870 <udd_ctrl_stall_data>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    4576:	23 c0       	rjmp	.+70     	; 0x45be <__vector_126+0x1c2>
    4578:	19 95       	eicall
    457a:	81 11       	cpse	r24, r1
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    457c:	02 c0       	rjmp	.+4      	; 0x4582 <__vector_126+0x186>
    457e:	78 d9       	rcall	.-3344   	; 0x3870 <udd_ctrl_stall_data>
    4580:	1e c0       	rjmp	.+60     	; 0x45be <__vector_126+0x1c2>
    4582:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <udd_ctrl_prev_payload_nb_trans>
    4586:	30 91 01 22 	lds	r19, 0x2201	; 0x802201 <udd_ctrl_prev_payload_nb_trans+0x1>
    458a:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans>
    458e:	90 91 ff 21 	lds	r25, 0x21FF	; 0x8021ff <udd_ctrl_payload_nb_trans+0x1>
    4592:	82 0f       	add	r24, r18
    4594:	93 1f       	adc	r25, r19
    4596:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <udd_ctrl_prev_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    459a:	90 93 01 22 	sts	0x2201, r25	; 0x802201 <udd_ctrl_prev_payload_nb_trans+0x1>
    459e:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    45a2:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_payload_nb_trans+0x1>
	udd_control_out_ack_tc();
    45a6:	e0 e1       	ldi	r30, 0x10	; 16
    45a8:	f2 e2       	ldi	r31, 0x22	; 34
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    45aa:	02 e0       	ldi	r16, 0x02	; 2
    45ac:	06 93       	lac	Z, r16
		udd_ctrl_in_sent();
    45ae:	00 e2       	ldi	r16, 0x20	; 32
    45b0:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    45b2:	05 c0       	rjmp	.+10     	; 0x45be <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    45b4:	80 38       	cpi	r24, 0x80	; 128
    45b6:	11 f4       	brne	.+4      	; 0x45bc <__vector_126+0x1c0>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    45b8:	7f d9       	rcall	.-3330   	; 0x38b8 <udd_ctrl_in_sent>
    45ba:	01 c0       	rjmp	.+2      	; 0x45be <__vector_126+0x1c2>
    45bc:	9f da       	rcall	.-2754   	; 0x3afc <udd_ep_trans_complet>
    45be:	ff 91       	pop	r31
    45c0:	ef 91       	pop	r30
    45c2:	df 91       	pop	r29
    45c4:	cf 91       	pop	r28
    45c6:	bf 91       	pop	r27
    45c8:	af 91       	pop	r26
    45ca:	9f 91       	pop	r25
    45cc:	8f 91       	pop	r24
    45ce:	7f 91       	pop	r23
    45d0:	6f 91       	pop	r22
    45d2:	5f 91       	pop	r21
    45d4:	4f 91       	pop	r20
    45d6:	3f 91       	pop	r19
    45d8:	2f 91       	pop	r18
    45da:	1f 91       	pop	r17
    45dc:	0f 91       	pop	r16
    45de:	0f 90       	pop	r0
    45e0:	0b be       	out	0x3b, r0	; 59
    45e2:	0f 90       	pop	r0
    45e4:	0f be       	out	0x3f, r0	; 63
    45e6:	0f 90       	pop	r0
    45e8:	1f 90       	pop	r1
    45ea:	18 95       	reti

000045ec <usb_callback_suspend_action>:

void halt(void)
{
	/* MAIN Loop Shutdown */

	runmode = 0;
    45ec:	08 95       	ret

000045ee <usb_callback_resume_action>:
    45ee:	08 95       	ret

000045f0 <usb_callback_remotewakeup_enable>:
    45f0:	08 95       	ret

000045f2 <usb_callback_remotewakeup_disable>:
    45f2:	08 95       	ret

000045f4 <usb_callback_cdc_enable>:
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	80 93 45 22 	sts	0x2245, r24	; 0x802245 <usb_cdc_transfers_autorized>
    45fa:	08 95       	ret

000045fc <usb_callback_cdc_disable>:
    45fc:	10 92 45 22 	sts	0x2245, r1	; 0x802245 <usb_cdc_transfers_autorized>
    4600:	08 95       	ret

00004602 <usb_callback_config>:
    4602:	08 95       	ret

00004604 <usb_callback_cdc_set_dtr>:
    4604:	08 95       	ret

00004606 <usb_callback_cdc_set_rts>:
    4606:	08 95       	ret

00004608 <usb_callback_rx_notify>:
    4608:	08 95       	ret

0000460a <usb_callback_tx_empty_notify>:
    460a:	08 95       	ret

0000460c <main>:
}


int main(void)
{
    460c:	cf 93       	push	r28
    460e:	df 93       	push	r29
    4610:	cd b7       	in	r28, 0x3d	; 61
    4612:	de b7       	in	r29, 0x3e	; 62
    4614:	2e 97       	sbiw	r28, 0x0e	; 14
    4616:	cd bf       	out	0x3d, r28	; 61
    4618:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	volatile uint16_t x11 = get_interpolated_sine(0x0000, true);
    461a:	61 e0       	ldi	r22, 0x01	; 1
    461c:	80 e0       	ldi	r24, 0x00	; 0
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_interpolated_sine>
    4624:	89 83       	std	Y+1, r24	; 0x01
    4626:	9a 83       	std	Y+2, r25	; 0x02
	volatile uint16_t x12 = get_interpolated_sine(0x0010, true);
    4628:	61 e0       	ldi	r22, 0x01	; 1
    462a:	80 e1       	ldi	r24, 0x10	; 16
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_interpolated_sine>
    4632:	8b 83       	std	Y+3, r24	; 0x03
    4634:	9c 83       	std	Y+4, r25	; 0x04
	volatile uint16_t x13 = get_interpolated_sine(0x0020, true);
    4636:	61 e0       	ldi	r22, 0x01	; 1
    4638:	80 e2       	ldi	r24, 0x20	; 32
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_interpolated_sine>
    4640:	8d 83       	std	Y+5, r24	; 0x05
    4642:	9e 83       	std	Y+6, r25	; 0x06
	volatile uint16_t x14 = get_interpolated_sine(0x0030, true);
    4644:	61 e0       	ldi	r22, 0x01	; 1
    4646:	80 e3       	ldi	r24, 0x30	; 48
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_interpolated_sine>
    464e:	8f 83       	std	Y+7, r24	; 0x07
    4650:	98 87       	std	Y+8, r25	; 0x08

	volatile uint16_t x21 = get_interpolated_sine(0x0040, true);
    4652:	61 e0       	ldi	r22, 0x01	; 1
    4654:	80 e4       	ldi	r24, 0x40	; 64
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_interpolated_sine>
    465c:	89 87       	std	Y+9, r24	; 0x09
    465e:	9a 87       	std	Y+10, r25	; 0x0a
	volatile uint16_t x22 = get_interpolated_sine(0x0048, true);
    4660:	61 e0       	ldi	r22, 0x01	; 1
    4662:	88 e4       	ldi	r24, 0x48	; 72
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_interpolated_sine>
    466a:	8b 87       	std	Y+11, r24	; 0x0b
    466c:	9c 87       	std	Y+12, r25	; 0x0c
	volatile uint16_t x23 = get_interpolated_sine(0x0050, true);
    466e:	61 e0       	ldi	r22, 0x01	; 1
    4670:	80 e5       	ldi	r24, 0x50	; 80
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_interpolated_sine>
    4678:	8d 87       	std	Y+13, r24	; 0x0d
    467a:	9e 87       	std	Y+14, r25	; 0x0e

	cpu_irq_disable();
	sleepmgr_enter_sleep();

	return retcode;
}
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	2e 96       	adiw	r28, 0x0e	; 14
    4682:	cd bf       	out	0x3d, r28	; 61
    4684:	de bf       	out	0x3e, r29	; 62
    4686:	df 91       	pop	r29
    4688:	cf 91       	pop	r28
    468a:	08 95       	ret

0000468c <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
    468c:	80 91 5c 23 	lds	r24, 0x235C	; 0x80235c <udi_cdc_nb_comm_enabled>
    4690:	81 50       	subi	r24, 0x01	; 1
    4692:	80 93 5c 23 	sts	0x235C, r24	; 0x80235c <udi_cdc_nb_comm_enabled>
    4696:	08 95       	ret

00004698 <udi_cdc_data_setup>:
    4698:	80 e0       	ldi	r24, 0x00	; 0
    469a:	08 95       	ret

0000469c <udi_cdc_getsetting>:
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	08 95       	ret

000046a0 <udi_cdc_line_coding_received>:
    46a0:	6a e6       	ldi	r22, 0x6A	; 106
    46a2:	73 e2       	ldi	r23, 0x23	; 35
    46a4:	80 e0       	ldi	r24, 0x00	; 0
    46a6:	ad cf       	rjmp	.-166    	; 0x4602 <usb_callback_config>
    46a8:	08 95       	ret

000046aa <udi_cdc_comm_enable>:
    46aa:	10 92 5c 23 	sts	0x235C, r1	; 0x80235c <udi_cdc_nb_comm_enabled>
    46ae:	10 92 68 23 	sts	0x2368, r1	; 0x802368 <udi_cdc_state>
    46b2:	10 92 69 23 	sts	0x2369, r1	; 0x802369 <udi_cdc_state+0x1>
    46b6:	ee e5       	ldi	r30, 0x5E	; 94
    46b8:	f3 e2       	ldi	r31, 0x23	; 35
    46ba:	81 ea       	ldi	r24, 0xA1	; 161
    46bc:	80 83       	st	Z, r24
    46be:	80 e2       	ldi	r24, 0x20	; 32
    46c0:	81 83       	std	Z+1, r24	; 0x01
    46c2:	12 82       	std	Z+2, r1	; 0x02
    46c4:	13 82       	std	Z+3, r1	; 0x03
    46c6:	14 82       	std	Z+4, r1	; 0x04
    46c8:	15 82       	std	Z+5, r1	; 0x05
    46ca:	82 e0       	ldi	r24, 0x02	; 2
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	86 83       	std	Z+6, r24	; 0x06
    46d0:	97 83       	std	Z+7, r25	; 0x07
    46d2:	10 86       	std	Z+8, r1	; 0x08
    46d4:	11 86       	std	Z+9, r1	; 0x09
    46d6:	ea e6       	ldi	r30, 0x6A	; 106
    46d8:	f3 e2       	ldi	r31, 0x23	; 35
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	92 ec       	ldi	r25, 0xC2	; 194
    46de:	a1 e0       	ldi	r26, 0x01	; 1
    46e0:	b0 e0       	ldi	r27, 0x00	; 0
    46e2:	80 83       	st	Z, r24
    46e4:	91 83       	std	Z+1, r25	; 0x01
    46e6:	a2 83       	std	Z+2, r26	; 0x02
    46e8:	b3 83       	std	Z+3, r27	; 0x03
    46ea:	14 82       	std	Z+4, r1	; 0x04
    46ec:	15 82       	std	Z+5, r1	; 0x05
    46ee:	88 e0       	ldi	r24, 0x08	; 8
    46f0:	86 83       	std	Z+6, r24	; 0x06
    46f2:	bf 01       	movw	r22, r30
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	85 df       	rcall	.-246    	; 0x4602 <usb_callback_config>
    46f8:	7d df       	rcall	.-262    	; 0x45f4 <usb_callback_cdc_enable>
    46fa:	88 23       	and	r24, r24
    46fc:	29 f0       	breq	.+10     	; 0x4708 <udi_cdc_comm_enable+0x5e>
    46fe:	90 91 5c 23 	lds	r25, 0x235C	; 0x80235c <udi_cdc_nb_comm_enabled>
    4702:	9f 5f       	subi	r25, 0xFF	; 255
    4704:	90 93 5c 23 	sts	0x235C, r25	; 0x80235c <udi_cdc_nb_comm_enabled>
    4708:	08 95       	ret

0000470a <udi_cdc_tx_send>:
    470a:	ff 92       	push	r15
    470c:	0f 93       	push	r16
    470e:	1f 93       	push	r17
    4710:	cf 93       	push	r28
    4712:	df 93       	push	r29
    4714:	1f 92       	push	r1
    4716:	cd b7       	in	r28, 0x3d	; 61
    4718:	de b7       	in	r29, 0x3e	; 62
    471a:	80 91 49 22 	lds	r24, 0x2249	; 0x802249 <udi_cdc_tx_trans_ongoing>
    471e:	81 11       	cpse	r24, r1
    4720:	96 c0       	rjmp	.+300    	; 0x484e <udi_cdc_tx_send+0x144>
    4722:	70 db       	rcall	.-2336   	; 0x3e04 <udd_is_high_speed>
    4724:	88 23       	and	r24, r24
    4726:	49 f0       	breq	.+18     	; 0x473a <udi_cdc_tx_send+0x30>
    4728:	00 91 4a 22 	lds	r16, 0x224A	; 0x80224a <udi_cdc_tx_sof_num>
    472c:	10 91 4b 22 	lds	r17, 0x224B	; 0x80224b <udi_cdc_tx_sof_num+0x1>
    4730:	76 db       	rcall	.-2324   	; 0x3e1e <udd_get_micro_frame_number>
    4732:	08 17       	cp	r16, r24
    4734:	19 07       	cpc	r17, r25
    4736:	51 f4       	brne	.+20     	; 0x474c <udi_cdc_tx_send+0x42>
    4738:	8a c0       	rjmp	.+276    	; 0x484e <udi_cdc_tx_send+0x144>
    473a:	00 91 4a 22 	lds	r16, 0x224A	; 0x80224a <udi_cdc_tx_sof_num>
    473e:	10 91 4b 22 	lds	r17, 0x224B	; 0x80224b <udi_cdc_tx_sof_num+0x1>
    4742:	68 db       	rcall	.-2352   	; 0x3e14 <udd_get_frame_number>
    4744:	08 17       	cp	r16, r24
    4746:	19 07       	cpc	r17, r25
    4748:	09 f4       	brne	.+2      	; 0x474c <udi_cdc_tx_send+0x42>
    474a:	81 c0       	rjmp	.+258    	; 0x484e <udi_cdc_tx_send+0x144>
    474c:	8f b7       	in	r24, 0x3f	; 63
    474e:	89 83       	std	Y+1, r24	; 0x01
    4750:	f8 94       	cli
    4752:	19 81       	ldd	r17, Y+1	; 0x01
    4754:	00 91 4c 22 	lds	r16, 0x224C	; 0x80224c <udi_cdc_tx_buf_sel>
    4758:	e0 2f       	mov	r30, r16
    475a:	f0 e0       	ldi	r31, 0x00	; 0
    475c:	ee 0f       	add	r30, r30
    475e:	ff 1f       	adc	r31, r31
    4760:	e3 5b       	subi	r30, 0xB3	; 179
    4762:	fd 4d       	sbci	r31, 0xDD	; 221
    4764:	80 81       	ld	r24, Z
    4766:	91 81       	ldd	r25, Z+1	; 0x01
    4768:	89 2b       	or	r24, r25
    476a:	f9 f4       	brne	.+62     	; 0x47aa <udi_cdc_tx_send+0xa0>
    476c:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <sof_zlp_counter.5059>
    4770:	90 91 47 22 	lds	r25, 0x2247	; 0x802247 <sof_zlp_counter.5059+0x1>
    4774:	01 96       	adiw	r24, 0x01	; 1
    4776:	80 93 46 22 	sts	0x2246, r24	; 0x802246 <sof_zlp_counter.5059>
    477a:	90 93 47 22 	sts	0x2247, r25	; 0x802247 <sof_zlp_counter.5059+0x1>
    477e:	42 db       	rcall	.-2428   	; 0x3e04 <udd_is_high_speed>
    4780:	81 11       	cpse	r24, r1
    4782:	07 c0       	rjmp	.+14     	; 0x4792 <udi_cdc_tx_send+0x88>
    4784:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <sof_zlp_counter.5059>
    4788:	90 91 47 22 	lds	r25, 0x2247	; 0x802247 <sof_zlp_counter.5059+0x1>
    478c:	84 36       	cpi	r24, 0x64	; 100
    478e:	91 05       	cpc	r25, r1
    4790:	50 f0       	brcs	.+20     	; 0x47a6 <udi_cdc_tx_send+0x9c>
    4792:	38 db       	rcall	.-2448   	; 0x3e04 <udd_is_high_speed>
    4794:	88 23       	and	r24, r24
    4796:	49 f0       	breq	.+18     	; 0x47aa <udi_cdc_tx_send+0xa0>
    4798:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <sof_zlp_counter.5059>
    479c:	90 91 47 22 	lds	r25, 0x2247	; 0x802247 <sof_zlp_counter.5059+0x1>
    47a0:	80 32       	cpi	r24, 0x20	; 32
    47a2:	93 40       	sbci	r25, 0x03	; 3
    47a4:	10 f4       	brcc	.+4      	; 0x47aa <udi_cdc_tx_send+0xa0>
    47a6:	1f bf       	out	0x3f, r17	; 63
    47a8:	52 c0       	rjmp	.+164    	; 0x484e <udi_cdc_tx_send+0x144>
    47aa:	10 92 46 22 	sts	0x2246, r1	; 0x802246 <sof_zlp_counter.5059>
    47ae:	10 92 47 22 	sts	0x2247, r1	; 0x802247 <sof_zlp_counter.5059+0x1>
    47b2:	80 91 48 22 	lds	r24, 0x2248	; 0x802248 <udi_cdc_tx_both_buf_to_send>
    47b6:	81 11       	cpse	r24, r1
    47b8:	06 c0       	rjmp	.+12     	; 0x47c6 <udi_cdc_tx_send+0xbc>
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	01 11       	cpse	r16, r1
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	80 93 4c 22 	sts	0x224C, r24	; 0x80224c <udi_cdc_tx_buf_sel>
    47c4:	04 c0       	rjmp	.+8      	; 0x47ce <udi_cdc_tx_send+0xc4>
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	01 11       	cpse	r16, r1
    47ca:	80 e0       	ldi	r24, 0x00	; 0
    47cc:	08 2f       	mov	r16, r24
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	80 93 49 22 	sts	0x2249, r24	; 0x802249 <udi_cdc_tx_trans_ongoing>
    47d4:	1f bf       	out	0x3f, r17	; 63
    47d6:	10 e0       	ldi	r17, 0x00	; 0
    47d8:	f8 01       	movw	r30, r16
    47da:	ee 0f       	add	r30, r30
    47dc:	ff 1f       	adc	r31, r31
    47de:	e3 5b       	subi	r30, 0xB3	; 179
    47e0:	fd 4d       	sbci	r31, 0xDD	; 221
    47e2:	80 81       	ld	r24, Z
    47e4:	91 81       	ldd	r25, Z+1	; 0x01
    47e6:	ff 24       	eor	r15, r15
    47e8:	f3 94       	inc	r15
    47ea:	80 34       	cpi	r24, 0x40	; 64
    47ec:	91 05       	cpc	r25, r1
    47ee:	09 f4       	brne	.+2      	; 0x47f2 <udi_cdc_tx_send+0xe8>
    47f0:	f1 2c       	mov	r15, r1
    47f2:	80 34       	cpi	r24, 0x40	; 64
    47f4:	91 05       	cpc	r25, r1
    47f6:	79 f0       	breq	.+30     	; 0x4816 <udi_cdc_tx_send+0x10c>
    47f8:	05 db       	rcall	.-2550   	; 0x3e04 <udd_is_high_speed>
    47fa:	88 23       	and	r24, r24
    47fc:	31 f0       	breq	.+12     	; 0x480a <udi_cdc_tx_send+0x100>
    47fe:	0f db       	rcall	.-2530   	; 0x3e1e <udd_get_micro_frame_number>
    4800:	80 93 4a 22 	sts	0x224A, r24	; 0x80224a <udi_cdc_tx_sof_num>
    4804:	90 93 4b 22 	sts	0x224B, r25	; 0x80224b <udi_cdc_tx_sof_num+0x1>
    4808:	0a c0       	rjmp	.+20     	; 0x481e <udi_cdc_tx_send+0x114>
    480a:	04 db       	rcall	.-2552   	; 0x3e14 <udd_get_frame_number>
    480c:	80 93 4a 22 	sts	0x224A, r24	; 0x80224a <udi_cdc_tx_sof_num>
    4810:	90 93 4b 22 	sts	0x224B, r25	; 0x80224b <udi_cdc_tx_sof_num+0x1>
    4814:	04 c0       	rjmp	.+8      	; 0x481e <udi_cdc_tx_send+0x114>
    4816:	10 92 4a 22 	sts	0x224A, r1	; 0x80224a <udi_cdc_tx_sof_num>
    481a:	10 92 4b 22 	sts	0x224B, r1	; 0x80224b <udi_cdc_tx_sof_num+0x1>
    481e:	f8 01       	movw	r30, r16
    4820:	ee 0f       	add	r30, r30
    4822:	ff 1f       	adc	r31, r31
    4824:	e3 5b       	subi	r30, 0xB3	; 179
    4826:	fd 4d       	sbci	r31, 0xDD	; 221
    4828:	20 81       	ld	r18, Z
    482a:	31 81       	ldd	r19, Z+1	; 0x01
    482c:	a8 01       	movw	r20, r16
    482e:	00 24       	eor	r0, r0
    4830:	56 95       	lsr	r21
    4832:	47 95       	ror	r20
    4834:	07 94       	ror	r0
    4836:	56 95       	lsr	r21
    4838:	47 95       	ror	r20
    483a:	07 94       	ror	r0
    483c:	54 2f       	mov	r21, r20
    483e:	40 2d       	mov	r20, r0
    4840:	4e 5a       	subi	r20, 0xAE	; 174
    4842:	5d 4d       	sbci	r21, 0xDD	; 221
    4844:	01 e3       	ldi	r16, 0x31	; 49
    4846:	14 e2       	ldi	r17, 0x24	; 36
    4848:	6f 2d       	mov	r22, r15
    484a:	81 e8       	ldi	r24, 0x81	; 129
    484c:	cc db       	rcall	.-2152   	; 0x3fe6 <udd_ep_run>
    484e:	0f 90       	pop	r0
    4850:	df 91       	pop	r29
    4852:	cf 91       	pop	r28
    4854:	1f 91       	pop	r17
    4856:	0f 91       	pop	r16
    4858:	ff 90       	pop	r15
    485a:	08 95       	ret

0000485c <udi_cdc_data_sof_notify>:
    485c:	80 e0       	ldi	r24, 0x00	; 0
    485e:	55 cf       	rjmp	.-342    	; 0x470a <udi_cdc_tx_send>
    4860:	08 95       	ret

00004862 <udi_cdc_data_sent>:
    4862:	81 11       	cpse	r24, r1
    4864:	19 c0       	rjmp	.+50     	; 0x4898 <udi_cdc_data_sent+0x36>
    4866:	20 91 4c 22 	lds	r18, 0x224C	; 0x80224c <udi_cdc_tx_buf_sel>
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	22 23       	and	r18, r18
    4870:	11 f0       	breq	.+4      	; 0x4876 <udi_cdc_data_sent+0x14>
    4872:	80 e0       	ldi	r24, 0x00	; 0
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	88 0f       	add	r24, r24
    4878:	99 1f       	adc	r25, r25
    487a:	fc 01       	movw	r30, r24
    487c:	e3 5b       	subi	r30, 0xB3	; 179
    487e:	fd 4d       	sbci	r31, 0xDD	; 221
    4880:	10 82       	st	Z, r1
    4882:	11 82       	std	Z+1, r1	; 0x01
    4884:	10 92 48 22 	sts	0x2248, r1	; 0x802248 <udi_cdc_tx_both_buf_to_send>
    4888:	10 92 49 22 	sts	0x2249, r1	; 0x802249 <udi_cdc_tx_trans_ongoing>
    488c:	67 2b       	or	r22, r23
    488e:	11 f0       	breq	.+4      	; 0x4894 <udi_cdc_data_sent+0x32>
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	bb de       	rcall	.-650    	; 0x460a <usb_callback_tx_empty_notify>
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	39 cf       	rjmp	.-398    	; 0x470a <udi_cdc_tx_send>
    4898:	08 95       	ret

0000489a <udi_cdc_data_disable>:
    489a:	80 91 5b 23 	lds	r24, 0x235B	; 0x80235b <udi_cdc_nb_data_enabled>
    489e:	81 50       	subi	r24, 0x01	; 1
    48a0:	80 93 5b 23 	sts	0x235B, r24	; 0x80235b <udi_cdc_nb_data_enabled>
    48a4:	80 91 5b 23 	lds	r24, 0x235B	; 0x80235b <udi_cdc_nb_data_enabled>
    48a8:	a9 de       	rcall	.-686    	; 0x45fc <usb_callback_cdc_disable>
    48aa:	10 92 5a 23 	sts	0x235A, r1	; 0x80235a <udi_cdc_data_running>
    48ae:	08 95       	ret

000048b0 <udi_cdc_comm_setup>:
    48b0:	cf 93       	push	r28
    48b2:	df 93       	push	r29
    48b4:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <udd_g_ctrlreq>
    48b8:	88 23       	and	r24, r24
    48ba:	e4 f4       	brge	.+56     	; 0x48f4 <udi_cdc_comm_setup+0x44>
    48bc:	80 76       	andi	r24, 0x60	; 96
    48be:	80 32       	cpi	r24, 0x20	; 32
    48c0:	09 f0       	breq	.+2      	; 0x48c4 <udi_cdc_comm_setup+0x14>
    48c2:	47 c0       	rjmp	.+142    	; 0x4952 <udi_cdc_comm_setup+0xa2>
    48c4:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    48c8:	81 32       	cpi	r24, 0x21	; 33
    48ca:	09 f0       	breq	.+2      	; 0x48ce <udi_cdc_comm_setup+0x1e>
    48cc:	44 c0       	rjmp	.+136    	; 0x4956 <udi_cdc_comm_setup+0xa6>
    48ce:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    48d2:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    48d6:	07 97       	sbiw	r24, 0x07	; 7
    48d8:	09 f0       	breq	.+2      	; 0x48dc <udi_cdc_comm_setup+0x2c>
    48da:	3f c0       	rjmp	.+126    	; 0x495a <udi_cdc_comm_setup+0xaa>
    48dc:	ec e8       	ldi	r30, 0x8C	; 140
    48de:	f3 e2       	ldi	r31, 0x23	; 35
    48e0:	8a e6       	ldi	r24, 0x6A	; 106
    48e2:	93 e2       	ldi	r25, 0x23	; 35
    48e4:	80 87       	std	Z+8, r24	; 0x08
    48e6:	91 87       	std	Z+9, r25	; 0x09
    48e8:	87 e0       	ldi	r24, 0x07	; 7
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	82 87       	std	Z+10, r24	; 0x0a
    48ee:	93 87       	std	Z+11, r25	; 0x0b
    48f0:	81 e0       	ldi	r24, 0x01	; 1
    48f2:	3a c0       	rjmp	.+116    	; 0x4968 <udi_cdc_comm_setup+0xb8>
    48f4:	80 76       	andi	r24, 0x60	; 96
    48f6:	80 32       	cpi	r24, 0x20	; 32
    48f8:	91 f5       	brne	.+100    	; 0x495e <udi_cdc_comm_setup+0xae>
    48fa:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    48fe:	80 32       	cpi	r24, 0x20	; 32
    4900:	19 f0       	breq	.+6      	; 0x4908 <udi_cdc_comm_setup+0x58>
    4902:	82 32       	cpi	r24, 0x22	; 34
    4904:	b9 f0       	breq	.+46     	; 0x4934 <udi_cdc_comm_setup+0x84>
    4906:	2d c0       	rjmp	.+90     	; 0x4962 <udi_cdc_comm_setup+0xb2>
    4908:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    490c:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    4910:	07 97       	sbiw	r24, 0x07	; 7
    4912:	49 f5       	brne	.+82     	; 0x4966 <udi_cdc_comm_setup+0xb6>
    4914:	ec e8       	ldi	r30, 0x8C	; 140
    4916:	f3 e2       	ldi	r31, 0x23	; 35
    4918:	80 e5       	ldi	r24, 0x50	; 80
    491a:	93 e2       	ldi	r25, 0x23	; 35
    491c:	84 87       	std	Z+12, r24	; 0x0c
    491e:	95 87       	std	Z+13, r25	; 0x0d
    4920:	8a e6       	ldi	r24, 0x6A	; 106
    4922:	93 e2       	ldi	r25, 0x23	; 35
    4924:	80 87       	std	Z+8, r24	; 0x08
    4926:	91 87       	std	Z+9, r25	; 0x09
    4928:	87 e0       	ldi	r24, 0x07	; 7
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	82 87       	std	Z+10, r24	; 0x0a
    492e:	93 87       	std	Z+11, r25	; 0x0b
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	1a c0       	rjmp	.+52     	; 0x4968 <udi_cdc_comm_setup+0xb8>
    4934:	cc e8       	ldi	r28, 0x8C	; 140
    4936:	d3 e2       	ldi	r29, 0x23	; 35
    4938:	6a 81       	ldd	r22, Y+2	; 0x02
    493a:	61 70       	andi	r22, 0x01	; 1
    493c:	80 e0       	ldi	r24, 0x00	; 0
    493e:	62 de       	rcall	.-828    	; 0x4604 <usb_callback_cdc_set_dtr>
    4940:	6a 81       	ldd	r22, Y+2	; 0x02
    4942:	7b 81       	ldd	r23, Y+3	; 0x03
    4944:	76 95       	lsr	r23
    4946:	67 95       	ror	r22
    4948:	61 70       	andi	r22, 0x01	; 1
    494a:	80 e0       	ldi	r24, 0x00	; 0
    494c:	5c de       	rcall	.-840    	; 0x4606 <usb_callback_cdc_set_rts>
    494e:	81 e0       	ldi	r24, 0x01	; 1
    4950:	0b c0       	rjmp	.+22     	; 0x4968 <udi_cdc_comm_setup+0xb8>
    4952:	80 e0       	ldi	r24, 0x00	; 0
    4954:	09 c0       	rjmp	.+18     	; 0x4968 <udi_cdc_comm_setup+0xb8>
    4956:	80 e0       	ldi	r24, 0x00	; 0
    4958:	07 c0       	rjmp	.+14     	; 0x4968 <udi_cdc_comm_setup+0xb8>
    495a:	80 e0       	ldi	r24, 0x00	; 0
    495c:	05 c0       	rjmp	.+10     	; 0x4968 <udi_cdc_comm_setup+0xb8>
    495e:	80 e0       	ldi	r24, 0x00	; 0
    4960:	03 c0       	rjmp	.+6      	; 0x4968 <udi_cdc_comm_setup+0xb8>
    4962:	80 e0       	ldi	r24, 0x00	; 0
    4964:	01 c0       	rjmp	.+2      	; 0x4968 <udi_cdc_comm_setup+0xb8>
    4966:	80 e0       	ldi	r24, 0x00	; 0
    4968:	df 91       	pop	r29
    496a:	cf 91       	pop	r28
    496c:	08 95       	ret

0000496e <udi_cdc_multi_get_nb_received_data>:
    496e:	cf 93       	push	r28
    4970:	df 93       	push	r29
    4972:	1f 92       	push	r1
    4974:	cd b7       	in	r28, 0x3d	; 61
    4976:	de b7       	in	r29, 0x3e	; 62
    4978:	8f b7       	in	r24, 0x3f	; 63
    497a:	89 83       	std	Y+1, r24	; 0x01
    497c:	f8 94       	cli
    497e:	49 81       	ldd	r20, Y+1	; 0x01
    4980:	20 91 d3 22 	lds	r18, 0x22D3	; 0x8022d3 <udi_cdc_rx_pos>
    4984:	30 91 d4 22 	lds	r19, 0x22D4	; 0x8022d4 <udi_cdc_rx_pos+0x1>
    4988:	e0 91 d5 22 	lds	r30, 0x22D5	; 0x8022d5 <udi_cdc_rx_buf_sel>
    498c:	f0 e0       	ldi	r31, 0x00	; 0
    498e:	ee 0f       	add	r30, r30
    4990:	ff 1f       	adc	r31, r31
    4992:	ea 52       	subi	r30, 0x2A	; 42
    4994:	fd 4d       	sbci	r31, 0xDD	; 221
    4996:	80 81       	ld	r24, Z
    4998:	91 81       	ldd	r25, Z+1	; 0x01
    499a:	4f bf       	out	0x3f, r20	; 63
    499c:	82 1b       	sub	r24, r18
    499e:	93 0b       	sbc	r25, r19
    49a0:	0f 90       	pop	r0
    49a2:	df 91       	pop	r29
    49a4:	cf 91       	pop	r28
    49a6:	08 95       	ret

000049a8 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    49a8:	e2 df       	rcall	.-60     	; 0x496e <udi_cdc_multi_get_nb_received_data>
    49aa:	21 e0       	ldi	r18, 0x01	; 1
    49ac:	89 2b       	or	r24, r25
    49ae:	09 f4       	brne	.+2      	; 0x49b2 <udi_cdc_multi_is_rx_ready+0xa>
    49b0:	20 e0       	ldi	r18, 0x00	; 0
    49b2:	82 2f       	mov	r24, r18
    49b4:	08 95       	ret

000049b6 <udi_cdc_rx_start>:
    49b6:	0f 93       	push	r16
    49b8:	1f 93       	push	r17
    49ba:	cf 93       	push	r28
    49bc:	df 93       	push	r29
    49be:	1f 92       	push	r1
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
    49c4:	8f b7       	in	r24, 0x3f	; 63
    49c6:	89 83       	std	Y+1, r24	; 0x01
    49c8:	f8 94       	cli
    49ca:	99 81       	ldd	r25, Y+1	; 0x01
    49cc:	20 91 d5 22 	lds	r18, 0x22D5	; 0x8022d5 <udi_cdc_rx_buf_sel>
    49d0:	80 91 d2 22 	lds	r24, 0x22D2	; 0x8022d2 <udi_cdc_rx_trans_ongoing>
    49d4:	81 11       	cpse	r24, r1
    49d6:	10 c0       	rjmp	.+32     	; 0x49f8 <udi_cdc_rx_start+0x42>
    49d8:	60 91 d3 22 	lds	r22, 0x22D3	; 0x8022d3 <udi_cdc_rx_pos>
    49dc:	70 91 d4 22 	lds	r23, 0x22D4	; 0x8022d4 <udi_cdc_rx_pos+0x1>
    49e0:	02 2f       	mov	r16, r18
    49e2:	10 e0       	ldi	r17, 0x00	; 0
    49e4:	f8 01       	movw	r30, r16
    49e6:	ee 0f       	add	r30, r30
    49e8:	ff 1f       	adc	r31, r31
    49ea:	ea 52       	subi	r30, 0x2A	; 42
    49ec:	fd 4d       	sbci	r31, 0xDD	; 221
    49ee:	40 81       	ld	r20, Z
    49f0:	51 81       	ldd	r21, Z+1	; 0x01
    49f2:	64 17       	cp	r22, r20
    49f4:	75 07       	cpc	r23, r21
    49f6:	18 f4       	brcc	.+6      	; 0x49fe <udi_cdc_rx_start+0x48>
    49f8:	9f bf       	out	0x3f, r25	; 63
    49fa:	80 e0       	ldi	r24, 0x00	; 0
    49fc:	26 c0       	rjmp	.+76     	; 0x4a4a <udi_cdc_rx_start+0x94>
    49fe:	10 92 d3 22 	sts	0x22D3, r1	; 0x8022d3 <udi_cdc_rx_pos>
    4a02:	10 92 d4 22 	sts	0x22D4, r1	; 0x8022d4 <udi_cdc_rx_pos+0x1>
    4a06:	81 e0       	ldi	r24, 0x01	; 1
    4a08:	21 11       	cpse	r18, r1
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	80 93 d5 22 	sts	0x22D5, r24	; 0x8022d5 <udi_cdc_rx_buf_sel>
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	80 93 d2 22 	sts	0x22D2, r24	; 0x8022d2 <udi_cdc_rx_trans_ongoing>
    4a16:	9f bf       	out	0x3f, r25	; 63
    4a18:	80 e0       	ldi	r24, 0x00	; 0
    4a1a:	c6 df       	rcall	.-116    	; 0x49a8 <udi_cdc_multi_is_rx_ready>
    4a1c:	88 23       	and	r24, r24
    4a1e:	11 f0       	breq	.+4      	; 0x4a24 <udi_cdc_rx_start+0x6e>
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	f2 dd       	rcall	.-1052   	; 0x4608 <usb_callback_rx_notify>
    4a24:	a8 01       	movw	r20, r16
    4a26:	00 24       	eor	r0, r0
    4a28:	56 95       	lsr	r21
    4a2a:	47 95       	ror	r20
    4a2c:	07 94       	ror	r0
    4a2e:	56 95       	lsr	r21
    4a30:	47 95       	ror	r20
    4a32:	07 94       	ror	r0
    4a34:	54 2f       	mov	r21, r20
    4a36:	40 2d       	mov	r20, r0
    4a38:	46 52       	subi	r20, 0x26	; 38
    4a3a:	5d 4d       	sbci	r21, 0xDD	; 221
    4a3c:	0d e5       	ldi	r16, 0x5D	; 93
    4a3e:	15 e2       	ldi	r17, 0x25	; 37
    4a40:	20 e4       	ldi	r18, 0x40	; 64
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	61 e0       	ldi	r22, 0x01	; 1
    4a46:	82 e0       	ldi	r24, 0x02	; 2
    4a48:	ce da       	rcall	.-2660   	; 0x3fe6 <udd_ep_run>
    4a4a:	0f 90       	pop	r0
    4a4c:	df 91       	pop	r29
    4a4e:	cf 91       	pop	r28
    4a50:	1f 91       	pop	r17
    4a52:	0f 91       	pop	r16
    4a54:	08 95       	ret

00004a56 <udi_cdc_data_enable>:
    4a56:	10 92 5b 23 	sts	0x235B, r1	; 0x80235b <udi_cdc_nb_data_enabled>
    4a5a:	10 92 49 22 	sts	0x2249, r1	; 0x802249 <udi_cdc_tx_trans_ongoing>
    4a5e:	10 92 48 22 	sts	0x2248, r1	; 0x802248 <udi_cdc_tx_both_buf_to_send>
    4a62:	10 92 4c 22 	sts	0x224C, r1	; 0x80224c <udi_cdc_tx_buf_sel>
    4a66:	ed e4       	ldi	r30, 0x4D	; 77
    4a68:	f2 e2       	ldi	r31, 0x22	; 34
    4a6a:	10 82       	st	Z, r1
    4a6c:	11 82       	std	Z+1, r1	; 0x01
    4a6e:	12 82       	std	Z+2, r1	; 0x02
    4a70:	13 82       	std	Z+3, r1	; 0x03
    4a72:	10 92 4a 22 	sts	0x224A, r1	; 0x80224a <udi_cdc_tx_sof_num>
    4a76:	10 92 4b 22 	sts	0x224B, r1	; 0x80224b <udi_cdc_tx_sof_num+0x1>
    4a7a:	80 e0       	ldi	r24, 0x00	; 0
    4a7c:	46 de       	rcall	.-884    	; 0x470a <udi_cdc_tx_send>
    4a7e:	10 92 d2 22 	sts	0x22D2, r1	; 0x8022d2 <udi_cdc_rx_trans_ongoing>
    4a82:	10 92 d5 22 	sts	0x22D5, r1	; 0x8022d5 <udi_cdc_rx_buf_sel>
    4a86:	e6 ed       	ldi	r30, 0xD6	; 214
    4a88:	f2 e2       	ldi	r31, 0x22	; 34
    4a8a:	10 82       	st	Z, r1
    4a8c:	11 82       	std	Z+1, r1	; 0x01
    4a8e:	12 82       	std	Z+2, r1	; 0x02
    4a90:	13 82       	std	Z+3, r1	; 0x03
    4a92:	10 92 d3 22 	sts	0x22D3, r1	; 0x8022d3 <udi_cdc_rx_pos>
    4a96:	10 92 d4 22 	sts	0x22D4, r1	; 0x8022d4 <udi_cdc_rx_pos+0x1>
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
    4a9c:	8c df       	rcall	.-232    	; 0x49b6 <udi_cdc_rx_start>
    4a9e:	88 23       	and	r24, r24
    4aa0:	59 f0       	breq	.+22     	; 0x4ab8 <udi_cdc_data_enable+0x62>
    4aa2:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <udi_cdc_nb_data_enabled>
    4aa6:	9f 5f       	subi	r25, 0xFF	; 255
    4aa8:	90 93 5b 23 	sts	0x235B, r25	; 0x80235b <udi_cdc_nb_data_enabled>
    4aac:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <udi_cdc_nb_data_enabled>
    4ab0:	91 30       	cpi	r25, 0x01	; 1
    4ab2:	11 f4       	brne	.+4      	; 0x4ab8 <udi_cdc_data_enable+0x62>
    4ab4:	90 93 5a 23 	sts	0x235A, r25	; 0x80235a <udi_cdc_data_running>
    4ab8:	08 95       	ret

00004aba <udi_cdc_data_received>:
    4aba:	0f 93       	push	r16
    4abc:	1f 93       	push	r17
    4abe:	81 11       	cpse	r24, r1
    4ac0:	28 c0       	rjmp	.+80     	; 0x4b12 <udi_cdc_data_received+0x58>
    4ac2:	80 91 d5 22 	lds	r24, 0x22D5	; 0x8022d5 <udi_cdc_rx_buf_sel>
    4ac6:	e1 e0       	ldi	r30, 0x01	; 1
    4ac8:	81 11       	cpse	r24, r1
    4aca:	e0 e0       	ldi	r30, 0x00	; 0
    4acc:	84 2f       	mov	r24, r20
    4ace:	61 15       	cp	r22, r1
    4ad0:	71 05       	cpc	r23, r1
    4ad2:	a1 f4       	brne	.+40     	; 0x4afc <udi_cdc_data_received+0x42>
    4ad4:	4e 2f       	mov	r20, r30
    4ad6:	50 e0       	ldi	r21, 0x00	; 0
    4ad8:	00 24       	eor	r0, r0
    4ada:	56 95       	lsr	r21
    4adc:	47 95       	ror	r20
    4ade:	07 94       	ror	r0
    4ae0:	56 95       	lsr	r21
    4ae2:	47 95       	ror	r20
    4ae4:	07 94       	ror	r0
    4ae6:	54 2f       	mov	r21, r20
    4ae8:	40 2d       	mov	r20, r0
    4aea:	46 52       	subi	r20, 0x26	; 38
    4aec:	5d 4d       	sbci	r21, 0xDD	; 221
    4aee:	0d e5       	ldi	r16, 0x5D	; 93
    4af0:	15 e2       	ldi	r17, 0x25	; 37
    4af2:	20 e4       	ldi	r18, 0x40	; 64
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	61 e0       	ldi	r22, 0x01	; 1
    4af8:	76 da       	rcall	.-2836   	; 0x3fe6 <udd_ep_run>
    4afa:	0b c0       	rjmp	.+22     	; 0x4b12 <udi_cdc_data_received+0x58>
    4afc:	f0 e0       	ldi	r31, 0x00	; 0
    4afe:	ee 0f       	add	r30, r30
    4b00:	ff 1f       	adc	r31, r31
    4b02:	ea 52       	subi	r30, 0x2A	; 42
    4b04:	fd 4d       	sbci	r31, 0xDD	; 221
    4b06:	60 83       	st	Z, r22
    4b08:	71 83       	std	Z+1, r23	; 0x01
    4b0a:	10 92 d2 22 	sts	0x22D2, r1	; 0x8022d2 <udi_cdc_rx_trans_ongoing>
    4b0e:	80 e0       	ldi	r24, 0x00	; 0
    4b10:	52 df       	rcall	.-348    	; 0x49b6 <udi_cdc_rx_start>
    4b12:	1f 91       	pop	r17
    4b14:	0f 91       	pop	r16
    4b16:	08 95       	ret

00004b18 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    4b18:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <udc_ptr_conf>
    4b1c:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    4b20:	01 90       	ld	r0, Z+
    4b22:	f0 81       	ld	r31, Z
    4b24:	e0 2d       	mov	r30, r0
    4b26:	22 81       	ldd	r18, Z+2	; 0x02
    4b28:	33 81       	ldd	r19, Z+3	; 0x03
    4b2a:	2e 0f       	add	r18, r30
    4b2c:	3f 1f       	adc	r19, r31
    4b2e:	fc 01       	movw	r30, r24
    4b30:	40 81       	ld	r20, Z
    4b32:	e4 0f       	add	r30, r20
    4b34:	f1 1d       	adc	r31, r1
    4b36:	e2 17       	cp	r30, r18
    4b38:	f3 07       	cpc	r31, r19
    4b3a:	a0 f4       	brcc	.+40     	; 0x4b64 <udc_next_desc_in_iface+0x4c>
    4b3c:	81 81       	ldd	r24, Z+1	; 0x01
    4b3e:	84 30       	cpi	r24, 0x04	; 4
    4b40:	a1 f0       	breq	.+40     	; 0x4b6a <udc_next_desc_in_iface+0x52>
    4b42:	86 13       	cpse	r24, r22
    4b44:	06 c0       	rjmp	.+12     	; 0x4b52 <udc_next_desc_in_iface+0x3a>
    4b46:	14 c0       	rjmp	.+40     	; 0x4b70 <udc_next_desc_in_iface+0x58>
    4b48:	81 81       	ldd	r24, Z+1	; 0x01
    4b4a:	84 30       	cpi	r24, 0x04	; 4
    4b4c:	a1 f0       	breq	.+40     	; 0x4b76 <udc_next_desc_in_iface+0x5e>
    4b4e:	86 17       	cp	r24, r22
    4b50:	a9 f0       	breq	.+42     	; 0x4b7c <udc_next_desc_in_iface+0x64>
    4b52:	80 81       	ld	r24, Z
    4b54:	e8 0f       	add	r30, r24
    4b56:	f1 1d       	adc	r31, r1
    4b58:	e2 17       	cp	r30, r18
    4b5a:	f3 07       	cpc	r31, r19
    4b5c:	a8 f3       	brcs	.-22     	; 0x4b48 <udc_next_desc_in_iface+0x30>
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	08 95       	ret
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	08 95       	ret
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	08 95       	ret
    4b70:	8e 2f       	mov	r24, r30
    4b72:	9f 2f       	mov	r25, r31
    4b74:	08 95       	ret
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	08 95       	ret
    4b7c:	8e 2f       	mov	r24, r30
    4b7e:	9f 2f       	mov	r25, r31
    4b80:	08 95       	ret

00004b82 <udc_valid_address>:
    4b82:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    4b86:	8f 77       	andi	r24, 0x7F	; 127
    4b88:	3f c9       	rjmp	.-3458   	; 0x3e08 <udd_set_address>
    4b8a:	08 95       	ret

00004b8c <udc_update_iface_desc>:
    4b8c:	90 91 78 23 	lds	r25, 0x2378	; 0x802378 <udc_num_configuration>
    4b90:	99 23       	and	r25, r25
    4b92:	81 f1       	breq	.+96     	; 0x4bf4 <udc_update_iface_desc+0x68>
    4b94:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <udc_ptr_conf>
    4b98:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    4b9c:	01 90       	ld	r0, Z+
    4b9e:	f0 81       	ld	r31, Z
    4ba0:	e0 2d       	mov	r30, r0
    4ba2:	94 81       	ldd	r25, Z+4	; 0x04
    4ba4:	89 17       	cp	r24, r25
    4ba6:	40 f5       	brcc	.+80     	; 0x4bf8 <udc_update_iface_desc+0x6c>
    4ba8:	e0 93 74 23 	sts	0x2374, r30	; 0x802374 <udc_ptr_iface>
    4bac:	f0 93 75 23 	sts	0x2375, r31	; 0x802375 <udc_ptr_iface+0x1>
    4bb0:	22 81       	ldd	r18, Z+2	; 0x02
    4bb2:	33 81       	ldd	r19, Z+3	; 0x03
    4bb4:	2e 0f       	add	r18, r30
    4bb6:	3f 1f       	adc	r19, r31
    4bb8:	e2 17       	cp	r30, r18
    4bba:	f3 07       	cpc	r31, r19
    4bbc:	f8 f4       	brcc	.+62     	; 0x4bfc <udc_update_iface_desc+0x70>
    4bbe:	91 81       	ldd	r25, Z+1	; 0x01
    4bc0:	94 30       	cpi	r25, 0x04	; 4
    4bc2:	61 f4       	brne	.+24     	; 0x4bdc <udc_update_iface_desc+0x50>
    4bc4:	92 81       	ldd	r25, Z+2	; 0x02
    4bc6:	89 13       	cpse	r24, r25
    4bc8:	09 c0       	rjmp	.+18     	; 0x4bdc <udc_update_iface_desc+0x50>
    4bca:	93 81       	ldd	r25, Z+3	; 0x03
    4bcc:	96 13       	cpse	r25, r22
    4bce:	06 c0       	rjmp	.+12     	; 0x4bdc <udc_update_iface_desc+0x50>
    4bd0:	e0 93 74 23 	sts	0x2374, r30	; 0x802374 <udc_ptr_iface>
    4bd4:	f0 93 75 23 	sts	0x2375, r31	; 0x802375 <udc_ptr_iface+0x1>
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	08 95       	ret
    4bdc:	90 81       	ld	r25, Z
    4bde:	e9 0f       	add	r30, r25
    4be0:	f1 1d       	adc	r31, r1
    4be2:	e2 17       	cp	r30, r18
    4be4:	f3 07       	cpc	r31, r19
    4be6:	58 f3       	brcs	.-42     	; 0x4bbe <udc_update_iface_desc+0x32>
    4be8:	e0 93 74 23 	sts	0x2374, r30	; 0x802374 <udc_ptr_iface>
    4bec:	f0 93 75 23 	sts	0x2375, r31	; 0x802375 <udc_ptr_iface+0x1>
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	08 95       	ret
    4bf4:	80 e0       	ldi	r24, 0x00	; 0
    4bf6:	08 95       	ret
    4bf8:	80 e0       	ldi	r24, 0x00	; 0
    4bfa:	08 95       	ret
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
    4bfe:	08 95       	ret

00004c00 <udc_iface_disable>:
    4c00:	ef 92       	push	r14
    4c02:	ff 92       	push	r15
    4c04:	1f 93       	push	r17
    4c06:	cf 93       	push	r28
    4c08:	df 93       	push	r29
    4c0a:	c8 2f       	mov	r28, r24
    4c0c:	60 e0       	ldi	r22, 0x00	; 0
    4c0e:	be df       	rcall	.-132    	; 0x4b8c <udc_update_iface_desc>
    4c10:	18 2f       	mov	r17, r24
    4c12:	88 23       	and	r24, r24
    4c14:	79 f1       	breq	.+94     	; 0x4c74 <udc_iface_disable+0x74>
    4c16:	a0 91 76 23 	lds	r26, 0x2376	; 0x802376 <udc_ptr_conf>
    4c1a:	b0 91 77 23 	lds	r27, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    4c1e:	ec 2f       	mov	r30, r28
    4c20:	f0 e0       	ldi	r31, 0x00	; 0
    4c22:	ee 0f       	add	r30, r30
    4c24:	ff 1f       	adc	r31, r31
    4c26:	12 96       	adiw	r26, 0x02	; 2
    4c28:	8d 91       	ld	r24, X+
    4c2a:	9c 91       	ld	r25, X
    4c2c:	13 97       	sbiw	r26, 0x03	; 3
    4c2e:	e8 0f       	add	r30, r24
    4c30:	f9 1f       	adc	r31, r25
    4c32:	e0 80       	ld	r14, Z
    4c34:	f1 80       	ldd	r15, Z+1	; 0x01
    4c36:	d7 01       	movw	r26, r14
    4c38:	16 96       	adiw	r26, 0x06	; 6
    4c3a:	ed 91       	ld	r30, X+
    4c3c:	fc 91       	ld	r31, X
    4c3e:	17 97       	sbiw	r26, 0x07	; 7
    4c40:	19 95       	eicall
    4c42:	68 2f       	mov	r22, r24
    4c44:	8c 2f       	mov	r24, r28
    4c46:	a2 df       	rcall	.-188    	; 0x4b8c <udc_update_iface_desc>
    4c48:	18 2f       	mov	r17, r24
    4c4a:	88 23       	and	r24, r24
    4c4c:	99 f0       	breq	.+38     	; 0x4c74 <udc_iface_disable+0x74>
    4c4e:	c0 91 74 23 	lds	r28, 0x2374	; 0x802374 <udc_ptr_iface>
    4c52:	d0 91 75 23 	lds	r29, 0x2375	; 0x802375 <udc_ptr_iface+0x1>
    4c56:	65 e0       	ldi	r22, 0x05	; 5
    4c58:	ce 01       	movw	r24, r28
    4c5a:	5e df       	rcall	.-324    	; 0x4b18 <udc_next_desc_in_iface>
    4c5c:	ec 01       	movw	r28, r24
    4c5e:	89 2b       	or	r24, r25
    4c60:	19 f0       	breq	.+6      	; 0x4c68 <udc_iface_disable+0x68>
    4c62:	8a 81       	ldd	r24, Y+2	; 0x02
    4c64:	da da       	rcall	.-2636   	; 0x421a <udd_ep_free>
    4c66:	f7 cf       	rjmp	.-18     	; 0x4c56 <udc_iface_disable+0x56>
    4c68:	d7 01       	movw	r26, r14
    4c6a:	12 96       	adiw	r26, 0x02	; 2
    4c6c:	ed 91       	ld	r30, X+
    4c6e:	fc 91       	ld	r31, X
    4c70:	13 97       	sbiw	r26, 0x03	; 3
    4c72:	19 95       	eicall
    4c74:	81 2f       	mov	r24, r17
    4c76:	df 91       	pop	r29
    4c78:	cf 91       	pop	r28
    4c7a:	1f 91       	pop	r17
    4c7c:	ff 90       	pop	r15
    4c7e:	ef 90       	pop	r14
    4c80:	08 95       	ret

00004c82 <udc_iface_enable>:
    4c82:	1f 93       	push	r17
    4c84:	cf 93       	push	r28
    4c86:	df 93       	push	r29
    4c88:	18 2f       	mov	r17, r24
    4c8a:	80 df       	rcall	.-256    	; 0x4b8c <udc_update_iface_desc>
    4c8c:	88 23       	and	r24, r24
    4c8e:	39 f1       	breq	.+78     	; 0x4cde <udc_iface_enable+0x5c>
    4c90:	c0 91 74 23 	lds	r28, 0x2374	; 0x802374 <udc_ptr_iface>
    4c94:	d0 91 75 23 	lds	r29, 0x2375	; 0x802375 <udc_ptr_iface+0x1>
    4c98:	65 e0       	ldi	r22, 0x05	; 5
    4c9a:	ce 01       	movw	r24, r28
    4c9c:	3d df       	rcall	.-390    	; 0x4b18 <udc_next_desc_in_iface>
    4c9e:	ec 01       	movw	r28, r24
    4ca0:	89 2b       	or	r24, r25
    4ca2:	41 f0       	breq	.+16     	; 0x4cb4 <udc_iface_enable+0x32>
    4ca4:	4c 81       	ldd	r20, Y+4	; 0x04
    4ca6:	5d 81       	ldd	r21, Y+5	; 0x05
    4ca8:	6b 81       	ldd	r22, Y+3	; 0x03
    4caa:	8a 81       	ldd	r24, Y+2	; 0x02
    4cac:	c2 d8       	rcall	.-3708   	; 0x3e32 <udd_ep_alloc>
    4cae:	81 11       	cpse	r24, r1
    4cb0:	f3 cf       	rjmp	.-26     	; 0x4c98 <udc_iface_enable+0x16>
    4cb2:	15 c0       	rjmp	.+42     	; 0x4cde <udc_iface_enable+0x5c>
    4cb4:	a0 91 76 23 	lds	r26, 0x2376	; 0x802376 <udc_ptr_conf>
    4cb8:	b0 91 77 23 	lds	r27, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    4cbc:	e1 2f       	mov	r30, r17
    4cbe:	f0 e0       	ldi	r31, 0x00	; 0
    4cc0:	ee 0f       	add	r30, r30
    4cc2:	ff 1f       	adc	r31, r31
    4cc4:	12 96       	adiw	r26, 0x02	; 2
    4cc6:	8d 91       	ld	r24, X+
    4cc8:	9c 91       	ld	r25, X
    4cca:	13 97       	sbiw	r26, 0x03	; 3
    4ccc:	e8 0f       	add	r30, r24
    4cce:	f9 1f       	adc	r31, r25
    4cd0:	01 90       	ld	r0, Z+
    4cd2:	f0 81       	ld	r31, Z
    4cd4:	e0 2d       	mov	r30, r0
    4cd6:	01 90       	ld	r0, Z+
    4cd8:	f0 81       	ld	r31, Z
    4cda:	e0 2d       	mov	r30, r0
    4cdc:	19 95       	eicall
    4cde:	df 91       	pop	r29
    4ce0:	cf 91       	pop	r28
    4ce2:	1f 91       	pop	r17
    4ce4:	08 95       	ret

00004ce6 <udc_reset>:
    4ce6:	cf 93       	push	r28
    4ce8:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <udc_num_configuration>
    4cec:	88 23       	and	r24, r24
    4cee:	c1 f0       	breq	.+48     	; 0x4d20 <udc_reset+0x3a>
    4cf0:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <udc_ptr_conf>
    4cf4:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    4cf8:	01 90       	ld	r0, Z+
    4cfa:	f0 81       	ld	r31, Z
    4cfc:	e0 2d       	mov	r30, r0
    4cfe:	84 81       	ldd	r24, Z+4	; 0x04
    4d00:	88 23       	and	r24, r24
    4d02:	71 f0       	breq	.+28     	; 0x4d20 <udc_reset+0x3a>
    4d04:	c0 e0       	ldi	r28, 0x00	; 0
    4d06:	8c 2f       	mov	r24, r28
    4d08:	7b df       	rcall	.-266    	; 0x4c00 <udc_iface_disable>
    4d0a:	cf 5f       	subi	r28, 0xFF	; 255
    4d0c:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <udc_ptr_conf>
    4d10:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    4d14:	01 90       	ld	r0, Z+
    4d16:	f0 81       	ld	r31, Z
    4d18:	e0 2d       	mov	r30, r0
    4d1a:	84 81       	ldd	r24, Z+4	; 0x04
    4d1c:	c8 17       	cp	r28, r24
    4d1e:	98 f3       	brcs	.-26     	; 0x4d06 <udc_reset+0x20>
    4d20:	10 92 78 23 	sts	0x2378, r1	; 0x802378 <udc_num_configuration>
    4d24:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <udc_device_status>
    4d28:	81 fd       	sbrc	r24, 1
    4d2a:	63 dc       	rcall	.-1850   	; 0x45f2 <usb_callback_remotewakeup_disable>
    4d2c:	10 92 7c 23 	sts	0x237C, r1	; 0x80237c <udc_device_status>
    4d30:	10 92 7d 23 	sts	0x237D, r1	; 0x80237d <udc_device_status+0x1>
    4d34:	cf 91       	pop	r28
    4d36:	08 95       	ret

00004d38 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    4d38:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    4d3a:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <udc_num_configuration>
    4d3e:	88 23       	and	r24, r24
    4d40:	49 f1       	breq	.+82     	; 0x4d94 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4d42:	a0 91 76 23 	lds	r26, 0x2376	; 0x802376 <udc_ptr_conf>
    4d46:	b0 91 77 23 	lds	r27, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    4d4a:	ed 91       	ld	r30, X+
    4d4c:	fc 91       	ld	r31, X
    4d4e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4d50:	84 81       	ldd	r24, Z+4	; 0x04
    4d52:	88 23       	and	r24, r24
    4d54:	f9 f0       	breq	.+62     	; 0x4d94 <udc_sof_notify+0x5c>
    4d56:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    4d58:	ec 2f       	mov	r30, r28
    4d5a:	f0 e0       	ldi	r31, 0x00	; 0
    4d5c:	ee 0f       	add	r30, r30
    4d5e:	ff 1f       	adc	r31, r31
    4d60:	12 96       	adiw	r26, 0x02	; 2
    4d62:	8d 91       	ld	r24, X+
    4d64:	9c 91       	ld	r25, X
    4d66:	13 97       	sbiw	r26, 0x03	; 3
    4d68:	e8 0f       	add	r30, r24
    4d6a:	f9 1f       	adc	r31, r25
    4d6c:	01 90       	ld	r0, Z+
    4d6e:	f0 81       	ld	r31, Z
    4d70:	e0 2d       	mov	r30, r0
    4d72:	00 84       	ldd	r0, Z+8	; 0x08
    4d74:	f1 85       	ldd	r31, Z+9	; 0x09
    4d76:	e0 2d       	mov	r30, r0
    4d78:	30 97       	sbiw	r30, 0x00	; 0
    4d7a:	09 f0       	breq	.+2      	; 0x4d7e <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    4d7c:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    4d7e:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4d80:	a0 91 76 23 	lds	r26, 0x2376	; 0x802376 <udc_ptr_conf>
    4d84:	b0 91 77 23 	lds	r27, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    4d88:	ed 91       	ld	r30, X+
    4d8a:	fc 91       	ld	r31, X
    4d8c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4d8e:	84 81       	ldd	r24, Z+4	; 0x04
    4d90:	c8 17       	cp	r28, r24
    4d92:	10 f3       	brcs	.-60     	; 0x4d58 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    4d94:	cf 91       	pop	r28
    4d96:	08 95       	ret

00004d98 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    4d98:	0f 93       	push	r16
    4d9a:	1f 93       	push	r17
    4d9c:	cf 93       	push	r28
    4d9e:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    4da0:	ec e8       	ldi	r30, 0x8C	; 140
    4da2:	f3 e2       	ldi	r31, 0x23	; 35
    4da4:	12 86       	std	Z+10, r1	; 0x0a
    4da6:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    4da8:	14 86       	std	Z+12, r1	; 0x0c
    4daa:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    4dac:	16 86       	std	Z+14, r1	; 0x0e
    4dae:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    4db0:	80 81       	ld	r24, Z
    4db2:	88 23       	and	r24, r24
    4db4:	0c f0       	brlt	.+2      	; 0x4db8 <udc_process_setup+0x20>
    4db6:	91 c2       	rjmp	.+1314   	; 0x52da <udc_process_setup+0x542>
		if (udd_g_ctrlreq.req.wLength == 0) {
    4db8:	20 91 92 23 	lds	r18, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    4dbc:	30 91 93 23 	lds	r19, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    4dc0:	21 15       	cp	r18, r1
    4dc2:	31 05       	cpc	r19, r1
    4dc4:	09 f0       	breq	.+2      	; 0x4dc8 <udc_process_setup+0x30>
    4dc6:	84 c2       	rjmp	.+1288   	; 0x52d0 <udc_process_setup+0x538>
    4dc8:	7b c2       	rjmp	.+1270   	; 0x52c0 <udc_process_setup+0x528>
    4dca:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4dcc:	09 f0       	breq	.+2      	; 0x4dd0 <udc_process_setup+0x38>
    4dce:	aa c0       	rjmp	.+340    	; 0x4f24 <udc_process_setup+0x18c>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4dd0:	90 91 8d 23 	lds	r25, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    4dd4:	96 30       	cpi	r25, 0x06	; 6
    4dd6:	79 f0       	breq	.+30     	; 0x4df6 <udc_process_setup+0x5e>
    4dd8:	98 30       	cpi	r25, 0x08	; 8
    4dda:	09 f4       	brne	.+2      	; 0x4dde <udc_process_setup+0x46>
    4ddc:	98 c0       	rjmp	.+304    	; 0x4f0e <udc_process_setup+0x176>
    4dde:	91 11       	cpse	r25, r1
    4de0:	a1 c0       	rjmp	.+322    	; 0x4f24 <udc_process_setup+0x18c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    4de2:	22 30       	cpi	r18, 0x02	; 2
    4de4:	31 05       	cpc	r19, r1
    4de6:	09 f0       	breq	.+2      	; 0x4dea <udc_process_setup+0x52>
    4de8:	27 c2       	rjmp	.+1102   	; 0x5238 <udc_process_setup+0x4a0>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    4dea:	62 e0       	ldi	r22, 0x02	; 2
    4dec:	70 e0       	ldi	r23, 0x00	; 0
    4dee:	8c e7       	ldi	r24, 0x7C	; 124
    4df0:	93 e2       	ldi	r25, 0x23	; 35
    4df2:	18 d8       	rcall	.-4048   	; 0x3e24 <udd_set_setup_payload>
    4df4:	7b c2       	rjmp	.+1270   	; 0x52ec <udc_process_setup+0x554>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    4df6:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    4dfa:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    4dfe:	29 2f       	mov	r18, r25
    4e00:	33 27       	eor	r19, r19
    4e02:	22 30       	cpi	r18, 0x02	; 2
    4e04:	31 05       	cpc	r19, r1
    4e06:	b1 f0       	breq	.+44     	; 0x4e34 <udc_process_setup+0x9c>
    4e08:	20 f4       	brcc	.+8      	; 0x4e12 <udc_process_setup+0x7a>
    4e0a:	21 30       	cpi	r18, 0x01	; 1
    4e0c:	31 05       	cpc	r19, r1
    4e0e:	41 f0       	breq	.+16     	; 0x4e20 <udc_process_setup+0x88>
    4e10:	d5 c1       	rjmp	.+938    	; 0x51bc <udc_process_setup+0x424>
    4e12:	23 30       	cpi	r18, 0x03	; 3
    4e14:	31 05       	cpc	r19, r1
    4e16:	f1 f1       	breq	.+124    	; 0x4e94 <udc_process_setup+0xfc>
    4e18:	2f 30       	cpi	r18, 0x0F	; 15
    4e1a:	31 05       	cpc	r19, r1
    4e1c:	61 f1       	breq	.+88     	; 0x4e76 <udc_process_setup+0xde>
    4e1e:	ce c1       	rjmp	.+924    	; 0x51bc <udc_process_setup+0x424>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    4e20:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <udc_config>
    4e24:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    4e28:	dc 01       	movw	r26, r24
    4e2a:	6c 91       	ld	r22, X
    4e2c:	70 e0       	ldi	r23, 0x00	; 0
    4e2e:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <udd_set_setup_payload>
    4e32:	5e c0       	rjmp	.+188    	; 0x4ef0 <udc_process_setup+0x158>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    4e34:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config>
    4e38:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x1>
    4e3c:	21 89       	ldd	r18, Z+17	; 0x11
    4e3e:	82 17       	cp	r24, r18
    4e40:	08 f0       	brcs	.+2      	; 0x4e44 <udc_process_setup+0xac>
    4e42:	fa c1       	rjmp	.+1012   	; 0x5238 <udc_process_setup+0x4a0>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    4e44:	99 27       	eor	r25, r25
    4e46:	88 0f       	add	r24, r24
    4e48:	99 1f       	adc	r25, r25
    4e4a:	88 0f       	add	r24, r24
    4e4c:	99 1f       	adc	r25, r25
    4e4e:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <udc_config+0x2>
    4e52:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <udc_config+0x3>
    4e56:	e8 0f       	add	r30, r24
    4e58:	f9 1f       	adc	r31, r25
    4e5a:	80 81       	ld	r24, Z
    4e5c:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    4e5e:	fc 01       	movw	r30, r24
    4e60:	62 81       	ldd	r22, Z+2	; 0x02
    4e62:	73 81       	ldd	r23, Z+3	; 0x03
    4e64:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    4e68:	e0 91 94 23 	lds	r30, 0x2394	; 0x802394 <udd_g_ctrlreq+0x8>
    4e6c:	f0 91 95 23 	lds	r31, 0x2395	; 0x802395 <udd_g_ctrlreq+0x9>
    4e70:	82 e0       	ldi	r24, 0x02	; 2
    4e72:	81 83       	std	Z+1, r24	; 0x01
    4e74:	3d c0       	rjmp	.+122    	; 0x4ef0 <udc_process_setup+0x158>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    4e76:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <udc_config+0x4>
    4e7a:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <udc_config+0x5>
    4e7e:	00 97       	sbiw	r24, 0x00	; 0
    4e80:	09 f4       	brne	.+2      	; 0x4e84 <udc_process_setup+0xec>
    4e82:	da c1       	rjmp	.+948    	; 0x5238 <udc_process_setup+0x4a0>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    4e84:	dc 01       	movw	r26, r24
    4e86:	12 96       	adiw	r26, 0x02	; 2
    4e88:	6d 91       	ld	r22, X+
    4e8a:	7c 91       	ld	r23, X
    4e8c:	13 97       	sbiw	r26, 0x03	; 3
    4e8e:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <udd_set_setup_payload>
    4e92:	2e c0       	rjmp	.+92     	; 0x4ef0 <udc_process_setup+0x158>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    4e94:	99 27       	eor	r25, r25
    4e96:	81 30       	cpi	r24, 0x01	; 1
    4e98:	91 05       	cpc	r25, r1
    4e9a:	99 f0       	breq	.+38     	; 0x4ec2 <udc_process_setup+0x12a>
    4e9c:	58 f0       	brcs	.+22     	; 0x4eb4 <udc_process_setup+0x11c>
    4e9e:	82 30       	cpi	r24, 0x02	; 2
    4ea0:	91 05       	cpc	r25, r1
    4ea2:	09 f4       	brne	.+2      	; 0x4ea6 <udc_process_setup+0x10e>
    4ea4:	1f c2       	rjmp	.+1086   	; 0x52e4 <udc_process_setup+0x54c>
    4ea6:	03 97       	sbiw	r24, 0x03	; 3
    4ea8:	09 f0       	breq	.+2      	; 0x4eac <udc_process_setup+0x114>
    4eaa:	91 c1       	rjmp	.+802    	; 0x51ce <udc_process_setup+0x436>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    4eac:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    4eae:	e4 ec       	ldi	r30, 0xC4	; 196
    4eb0:	f0 e2       	ldi	r31, 0x20	; 32
    4eb2:	0a c0       	rjmp	.+20     	; 0x4ec8 <udc_process_setup+0x130>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    4eb4:	64 e0       	ldi	r22, 0x04	; 4
    4eb6:	70 e0       	ldi	r23, 0x00	; 0
    4eb8:	80 ec       	ldi	r24, 0xC0	; 192
    4eba:	90 e2       	ldi	r25, 0x20	; 32
    4ebc:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <udd_set_setup_payload>
    4ec0:	17 c0       	rjmp	.+46     	; 0x4ef0 <udc_process_setup+0x158>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    4ec2:	ef ea       	ldi	r30, 0xAF	; 175
    4ec4:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    4ec6:	30 e1       	ldi	r19, 0x10	; 16
    4ec8:	a2 e8       	ldi	r26, 0x82	; 130
    4eca:	b0 e2       	ldi	r27, 0x20	; 32
    4ecc:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    4ece:	81 91       	ld	r24, Z+
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	8d 93       	st	X+, r24
    4ed4:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    4ed6:	2f 5f       	subi	r18, 0xFF	; 255
    4ed8:	23 17       	cp	r18, r19
    4eda:	c8 f3       	brcs	.-14     	; 0x4ece <udc_process_setup+0x136>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    4edc:	63 2f       	mov	r22, r19
    4ede:	66 0f       	add	r22, r22
    4ee0:	6e 5f       	subi	r22, 0xFE	; 254
    4ee2:	60 93 80 20 	sts	0x2080, r22	; 0x802080 <udc_string_desc>
		udd_set_setup_payload(
    4ee6:	70 e0       	ldi	r23, 0x00	; 0
    4ee8:	80 e8       	ldi	r24, 0x80	; 128
    4eea:	90 e2       	ldi	r25, 0x20	; 32
    4eec:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    4ef0:	ec e8       	ldi	r30, 0x8C	; 140
    4ef2:	f3 e2       	ldi	r31, 0x23	; 35
    4ef4:	86 81       	ldd	r24, Z+6	; 0x06
    4ef6:	97 81       	ldd	r25, Z+7	; 0x07
    4ef8:	22 85       	ldd	r18, Z+10	; 0x0a
    4efa:	33 85       	ldd	r19, Z+11	; 0x0b
    4efc:	82 17       	cp	r24, r18
    4efe:	93 07       	cpc	r25, r19
    4f00:	08 f0       	brcs	.+2      	; 0x4f04 <udc_process_setup+0x16c>
    4f02:	f4 c1       	rjmp	.+1000   	; 0x52ec <udc_process_setup+0x554>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    4f04:	80 93 96 23 	sts	0x2396, r24	; 0x802396 <udd_g_ctrlreq+0xa>
    4f08:	90 93 97 23 	sts	0x2397, r25	; 0x802397 <udd_g_ctrlreq+0xb>
    4f0c:	ef c1       	rjmp	.+990    	; 0x52ec <udc_process_setup+0x554>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    4f0e:	21 30       	cpi	r18, 0x01	; 1
    4f10:	31 05       	cpc	r19, r1
    4f12:	09 f0       	breq	.+2      	; 0x4f16 <udc_process_setup+0x17e>
    4f14:	91 c1       	rjmp	.+802    	; 0x5238 <udc_process_setup+0x4a0>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    4f16:	61 e0       	ldi	r22, 0x01	; 1
    4f18:	70 e0       	ldi	r23, 0x00	; 0
    4f1a:	88 e7       	ldi	r24, 0x78	; 120
    4f1c:	93 e2       	ldi	r25, 0x23	; 35
    4f1e:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <udd_set_setup_payload>
    4f22:	e4 c1       	rjmp	.+968    	; 0x52ec <udc_process_setup+0x554>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4f24:	81 30       	cpi	r24, 0x01	; 1
    4f26:	e9 f5       	brne	.+122    	; 0x4fa2 <udc_process_setup+0x20a>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4f28:	90 91 8d 23 	lds	r25, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    4f2c:	9a 30       	cpi	r25, 0x0A	; 10
    4f2e:	c9 f5       	brne	.+114    	; 0x4fa2 <udc_process_setup+0x20a>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    4f30:	21 30       	cpi	r18, 0x01	; 1
    4f32:	31 05       	cpc	r19, r1
    4f34:	09 f0       	breq	.+2      	; 0x4f38 <udc_process_setup+0x1a0>
    4f36:	50 c1       	rjmp	.+672    	; 0x51d8 <udc_process_setup+0x440>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4f38:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <udc_num_configuration>
    4f3c:	88 23       	and	r24, r24
    4f3e:	09 f4       	brne	.+2      	; 0x4f42 <udc_process_setup+0x1aa>
    4f40:	4b c1       	rjmp	.+662    	; 0x51d8 <udc_process_setup+0x440>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4f42:	c0 91 90 23 	lds	r28, 0x2390	; 0x802390 <udd_g_ctrlreq+0x4>
    4f46:	d0 91 91 23 	lds	r29, 0x2391	; 0x802391 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4f4a:	00 91 76 23 	lds	r16, 0x2376	; 0x802376 <udc_ptr_conf>
    4f4e:	10 91 77 23 	lds	r17, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    4f52:	d8 01       	movw	r26, r16
    4f54:	ed 91       	ld	r30, X+
    4f56:	fc 91       	ld	r31, X
    4f58:	84 81       	ldd	r24, Z+4	; 0x04
    4f5a:	c8 17       	cp	r28, r24
    4f5c:	08 f0       	brcs	.+2      	; 0x4f60 <udc_process_setup+0x1c8>
    4f5e:	3c c1       	rjmp	.+632    	; 0x51d8 <udc_process_setup+0x440>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4f60:	60 e0       	ldi	r22, 0x00	; 0
    4f62:	8c 2f       	mov	r24, r28
    4f64:	13 de       	rcall	.-986    	; 0x4b8c <udc_update_iface_desc>
    4f66:	88 23       	and	r24, r24
    4f68:	09 f4       	brne	.+2      	; 0x4f6c <udc_process_setup+0x1d4>
    4f6a:	31 c1       	rjmp	.+610    	; 0x51ce <udc_process_setup+0x436>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4f6c:	ce 01       	movw	r24, r28
    4f6e:	99 27       	eor	r25, r25
    4f70:	88 0f       	add	r24, r24
    4f72:	99 1f       	adc	r25, r25
    4f74:	d8 01       	movw	r26, r16
    4f76:	12 96       	adiw	r26, 0x02	; 2
    4f78:	ed 91       	ld	r30, X+
    4f7a:	fc 91       	ld	r31, X
    4f7c:	13 97       	sbiw	r26, 0x03	; 3
    4f7e:	e8 0f       	add	r30, r24
    4f80:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    4f82:	01 90       	ld	r0, Z+
    4f84:	f0 81       	ld	r31, Z
    4f86:	e0 2d       	mov	r30, r0
    4f88:	86 81       	ldd	r24, Z+6	; 0x06
    4f8a:	97 81       	ldd	r25, Z+7	; 0x07
    4f8c:	fc 01       	movw	r30, r24
    4f8e:	19 95       	eicall
    4f90:	80 93 7a 23 	sts	0x237A, r24	; 0x80237a <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    4f94:	61 e0       	ldi	r22, 0x01	; 1
    4f96:	70 e0       	ldi	r23, 0x00	; 0
    4f98:	8a e7       	ldi	r24, 0x7A	; 122
    4f9a:	93 e2       	ldi	r25, 0x23	; 35
    4f9c:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <udd_set_setup_payload>
    4fa0:	a5 c1       	rjmp	.+842    	; 0x52ec <udc_process_setup+0x554>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4fa2:	82 30       	cpi	r24, 0x02	; 2
    4fa4:	09 f0       	breq	.+2      	; 0x4fa8 <udc_process_setup+0x210>
    4fa6:	13 c1       	rjmp	.+550    	; 0x51ce <udc_process_setup+0x436>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4fa8:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    4fac:	81 11       	cpse	r24, r1
    4fae:	08 c1       	rjmp	.+528    	; 0x51c0 <udc_process_setup+0x428>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    4fb0:	22 30       	cpi	r18, 0x02	; 2
    4fb2:	31 05       	cpc	r19, r1
    4fb4:	09 f0       	breq	.+2      	; 0x4fb8 <udc_process_setup+0x220>
    4fb6:	40 c1       	rjmp	.+640    	; 0x5238 <udc_process_setup+0x4a0>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    4fb8:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <udd_g_ctrlreq+0x4>
    4fbc:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <udd_ep_is_halted>
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	80 93 72 23 	sts	0x2372, r24	; 0x802372 <udc_ep_status.4757>
    4fc6:	90 93 73 23 	sts	0x2373, r25	; 0x802373 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    4fca:	62 e0       	ldi	r22, 0x02	; 2
    4fcc:	70 e0       	ldi	r23, 0x00	; 0
    4fce:	82 e7       	ldi	r24, 0x72	; 114
    4fd0:	93 e2       	ldi	r25, 0x23	; 35
    4fd2:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <udd_set_setup_payload>
    4fd6:	8a c1       	rjmp	.+788    	; 0x52ec <udc_process_setup+0x554>
    4fd8:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4fda:	09 f0       	breq	.+2      	; 0x4fde <udc_process_setup+0x246>
    4fdc:	9e c0       	rjmp	.+316    	; 0x511a <udc_process_setup+0x382>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4fde:	90 91 8d 23 	lds	r25, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    4fe2:	93 30       	cpi	r25, 0x03	; 3
    4fe4:	89 f1       	breq	.+98     	; 0x5048 <udc_process_setup+0x2b0>
    4fe6:	18 f4       	brcc	.+6      	; 0x4fee <udc_process_setup+0x256>
    4fe8:	91 30       	cpi	r25, 0x01	; 1
    4fea:	a9 f0       	breq	.+42     	; 0x5016 <udc_process_setup+0x27e>
    4fec:	96 c0       	rjmp	.+300    	; 0x511a <udc_process_setup+0x382>
    4fee:	95 30       	cpi	r25, 0x05	; 5
    4ff0:	21 f0       	breq	.+8      	; 0x4ffa <udc_process_setup+0x262>
    4ff2:	99 30       	cpi	r25, 0x09	; 9
    4ff4:	09 f4       	brne	.+2      	; 0x4ff8 <udc_process_setup+0x260>
    4ff6:	41 c0       	rjmp	.+130    	; 0x507a <udc_process_setup+0x2e2>
    4ff8:	90 c0       	rjmp	.+288    	; 0x511a <udc_process_setup+0x382>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4ffa:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    4ffe:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    5002:	89 2b       	or	r24, r25
    5004:	09 f0       	breq	.+2      	; 0x5008 <udc_process_setup+0x270>
    5006:	18 c1       	rjmp	.+560    	; 0x5238 <udc_process_setup+0x4a0>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    5008:	81 ec       	ldi	r24, 0xC1	; 193
    500a:	95 e2       	ldi	r25, 0x25	; 37
    500c:	80 93 98 23 	sts	0x2398, r24	; 0x802398 <udd_g_ctrlreq+0xc>
    5010:	90 93 99 23 	sts	0x2399, r25	; 0x802399 <udd_g_ctrlreq+0xd>
    5014:	6b c1       	rjmp	.+726    	; 0x52ec <udc_process_setup+0x554>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    5016:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    501a:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    501e:	89 2b       	or	r24, r25
    5020:	09 f0       	breq	.+2      	; 0x5024 <udc_process_setup+0x28c>
    5022:	0a c1       	rjmp	.+532    	; 0x5238 <udc_process_setup+0x4a0>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    5024:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    5028:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>
    502c:	01 97       	sbiw	r24, 0x01	; 1
    502e:	09 f0       	breq	.+2      	; 0x5032 <udc_process_setup+0x29a>
    5030:	03 c1       	rjmp	.+518    	; 0x5238 <udc_process_setup+0x4a0>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    5032:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <udc_device_status>
    5036:	90 91 7d 23 	lds	r25, 0x237D	; 0x80237d <udc_device_status+0x1>
    503a:	8d 7f       	andi	r24, 0xFD	; 253
    503c:	80 93 7c 23 	sts	0x237C, r24	; 0x80237c <udc_device_status>
    5040:	90 93 7d 23 	sts	0x237D, r25	; 0x80237d <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    5044:	d6 da       	rcall	.-2644   	; 0x45f2 <usb_callback_remotewakeup_disable>
    5046:	52 c1       	rjmp	.+676    	; 0x52ec <udc_process_setup+0x554>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    5048:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    504c:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    5050:	89 2b       	or	r24, r25
    5052:	09 f0       	breq	.+2      	; 0x5056 <udc_process_setup+0x2be>
    5054:	f1 c0       	rjmp	.+482    	; 0x5238 <udc_process_setup+0x4a0>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    5056:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    505a:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>
    505e:	01 97       	sbiw	r24, 0x01	; 1
    5060:	09 f0       	breq	.+2      	; 0x5064 <udc_process_setup+0x2cc>
    5062:	b0 c0       	rjmp	.+352    	; 0x51c4 <udc_process_setup+0x42c>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    5064:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <udc_device_status>
    5068:	90 91 7d 23 	lds	r25, 0x237D	; 0x80237d <udc_device_status+0x1>
    506c:	82 60       	ori	r24, 0x02	; 2
    506e:	80 93 7c 23 	sts	0x237C, r24	; 0x80237c <udc_device_status>
    5072:	90 93 7d 23 	sts	0x237D, r25	; 0x80237d <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    5076:	bc da       	rcall	.-2696   	; 0x45f0 <usb_callback_remotewakeup_enable>
    5078:	39 c1       	rjmp	.+626    	; 0x52ec <udc_process_setup+0x554>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    507a:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    507e:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    5082:	89 2b       	or	r24, r25
    5084:	09 f0       	breq	.+2      	; 0x5088 <udc_process_setup+0x2f0>
    5086:	d8 c0       	rjmp	.+432    	; 0x5238 <udc_process_setup+0x4a0>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    5088:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <udd_getaddress>
    508c:	88 23       	and	r24, r24
    508e:	09 f4       	brne	.+2      	; 0x5092 <udc_process_setup+0x2fa>
    5090:	9e c0       	rjmp	.+316    	; 0x51ce <udc_process_setup+0x436>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    5092:	20 91 8e 23 	lds	r18, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    5096:	30 91 8f 23 	lds	r19, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>
    509a:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    509c:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config>
    50a0:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    50a4:	81 89       	ldd	r24, Z+17	; 0x11
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	82 17       	cp	r24, r18
    50aa:	93 07       	cpc	r25, r19
    50ac:	08 f4       	brcc	.+2      	; 0x50b0 <udc_process_setup+0x318>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    50ae:	8f c0       	rjmp	.+286    	; 0x51ce <udc_process_setup+0x436>
    50b0:	1a de       	rcall	.-972    	; 0x4ce6 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    50b2:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    50b6:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>
    50ba:	80 93 78 23 	sts	0x2378, r24	; 0x802378 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    50be:	88 23       	and	r24, r24
    50c0:	09 f4       	brne	.+2      	; 0x50c4 <udc_process_setup+0x32c>
    50c2:	14 c1       	rjmp	.+552    	; 0x52ec <udc_process_setup+0x554>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    50c4:	99 27       	eor	r25, r25
    50c6:	81 50       	subi	r24, 0x01	; 1
    50c8:	90 4c       	sbci	r25, 0xC0	; 192
    50ca:	88 0f       	add	r24, r24
    50cc:	99 1f       	adc	r25, r25
    50ce:	88 0f       	add	r24, r24
    50d0:	99 1f       	adc	r25, r25
    50d2:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <udc_config+0x2>
    50d6:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <udc_config+0x3>
    50da:	e8 0f       	add	r30, r24
    50dc:	f9 1f       	adc	r31, r25
    50de:	e0 93 76 23 	sts	0x2376, r30	; 0x802376 <udc_ptr_conf>
    50e2:	f0 93 77 23 	sts	0x2377, r31	; 0x802377 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    50e6:	01 90       	ld	r0, Z+
    50e8:	f0 81       	ld	r31, Z
    50ea:	e0 2d       	mov	r30, r0
    50ec:	84 81       	ldd	r24, Z+4	; 0x04
    50ee:	88 23       	and	r24, r24
    50f0:	09 f4       	brne	.+2      	; 0x50f4 <udc_process_setup+0x35c>
    50f2:	fc c0       	rjmp	.+504    	; 0x52ec <udc_process_setup+0x554>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    50f4:	c0 e0       	ldi	r28, 0x00	; 0
    50f6:	60 e0       	ldi	r22, 0x00	; 0
    50f8:	8c 2f       	mov	r24, r28
    50fa:	c3 dd       	rcall	.-1146   	; 0x4c82 <udc_iface_enable>
    50fc:	88 23       	and	r24, r24
    50fe:	09 f4       	brne	.+2      	; 0x5102 <udc_process_setup+0x36a>
    5100:	66 c0       	rjmp	.+204    	; 0x51ce <udc_process_setup+0x436>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    5102:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    5104:	e0 91 76 23 	lds	r30, 0x2376	; 0x802376 <udc_ptr_conf>
    5108:	f0 91 77 23 	lds	r31, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    510c:	01 90       	ld	r0, Z+
    510e:	f0 81       	ld	r31, Z
    5110:	e0 2d       	mov	r30, r0
    5112:	84 81       	ldd	r24, Z+4	; 0x04
    5114:	c8 17       	cp	r28, r24
    5116:	78 f3       	brcs	.-34     	; 0x50f6 <udc_process_setup+0x35e>
    5118:	e9 c0       	rjmp	.+466    	; 0x52ec <udc_process_setup+0x554>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    511a:	81 30       	cpi	r24, 0x01	; 1
    511c:	e9 f4       	brne	.+58     	; 0x5158 <udc_process_setup+0x3c0>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    511e:	90 91 8d 23 	lds	r25, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    5122:	9b 30       	cpi	r25, 0x0B	; 11
    5124:	c9 f4       	brne	.+50     	; 0x5158 <udc_process_setup+0x3c0>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    5126:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    512a:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    512e:	89 2b       	or	r24, r25
    5130:	09 f0       	breq	.+2      	; 0x5134 <udc_process_setup+0x39c>
    5132:	52 c0       	rjmp	.+164    	; 0x51d8 <udc_process_setup+0x440>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    5134:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <udc_num_configuration>
    5138:	88 23       	and	r24, r24
    513a:	09 f4       	brne	.+2      	; 0x513e <udc_process_setup+0x3a6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    513c:	4d c0       	rjmp	.+154    	; 0x51d8 <udc_process_setup+0x440>
    513e:	ec e8       	ldi	r30, 0x8C	; 140
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    5140:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    5142:	c4 81       	ldd	r28, Z+4	; 0x04
    5144:	d2 81       	ldd	r29, Z+2	; 0x02
    5146:	8c 2f       	mov	r24, r28
    5148:	5b dd       	rcall	.-1354   	; 0x4c00 <udc_iface_disable>
    514a:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    514c:	09 f4       	brne	.+2      	; 0x5150 <udc_process_setup+0x3b8>
    514e:	3f c0       	rjmp	.+126    	; 0x51ce <udc_process_setup+0x436>
    5150:	6d 2f       	mov	r22, r29
    5152:	8c 2f       	mov	r24, r28
    5154:	96 dd       	rcall	.-1236   	; 0x4c82 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    5156:	39 c0       	rjmp	.+114    	; 0x51ca <udc_process_setup+0x432>
    5158:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    515a:	c9 f5       	brne	.+114    	; 0x51ce <udc_process_setup+0x436>
    515c:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <udd_g_ctrlreq+0x1>
    5160:	81 30       	cpi	r24, 0x01	; 1
    5162:	19 f0       	breq	.+6      	; 0x516a <udc_process_setup+0x3d2>
    5164:	83 30       	cpi	r24, 0x03	; 3
    5166:	a1 f0       	breq	.+40     	; 0x5190 <udc_process_setup+0x3f8>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    5168:	2f c0       	rjmp	.+94     	; 0x51c8 <udc_process_setup+0x430>
    516a:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    516e:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    5172:	89 2b       	or	r24, r25
    5174:	09 f0       	breq	.+2      	; 0x5178 <udc_process_setup+0x3e0>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    5176:	60 c0       	rjmp	.+192    	; 0x5238 <udc_process_setup+0x4a0>
    5178:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    517c:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>
    5180:	89 2b       	or	r24, r25
    5182:	09 f0       	breq	.+2      	; 0x5186 <udc_process_setup+0x3ee>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    5184:	59 c0       	rjmp	.+178    	; 0x5238 <udc_process_setup+0x4a0>
    5186:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <udd_g_ctrlreq+0x4>
    518a:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    518e:	1d c0       	rjmp	.+58     	; 0x51ca <udc_process_setup+0x432>
    5190:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <udd_g_ctrlreq+0x6>
    5194:	90 91 93 23 	lds	r25, 0x2393	; 0x802393 <udd_g_ctrlreq+0x7>
    5198:	89 2b       	or	r24, r25
    519a:	09 f0       	breq	.+2      	; 0x519e <udc_process_setup+0x406>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    519c:	4d c0       	rjmp	.+154    	; 0x5238 <udc_process_setup+0x4a0>
    519e:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <udd_g_ctrlreq+0x2>
    51a2:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <udd_g_ctrlreq+0x3>
    51a6:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    51a8:	09 f0       	breq	.+2      	; 0x51ac <udc_process_setup+0x414>
    51aa:	46 c0       	rjmp	.+140    	; 0x5238 <udc_process_setup+0x4a0>
    51ac:	cc e8       	ldi	r28, 0x8C	; 140
    51ae:	d3 e2       	ldi	r29, 0x23	; 35
    51b0:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    51b2:	0e 94 be 20 	call	0x417c	; 0x417c <udd_ep_abort>
    51b6:	8c 81       	ldd	r24, Y+4	; 0x04
    51b8:	4c d8       	rcall	.-3944   	; 0x4252 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    51ba:	07 c0       	rjmp	.+14     	; 0x51ca <udc_process_setup+0x432>
    51bc:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    51be:	05 c0       	rjmp	.+10     	; 0x51ca <udc_process_setup+0x432>
    51c0:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    51c2:	03 c0       	rjmp	.+6      	; 0x51ca <udc_process_setup+0x432>
    51c4:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    51c6:	01 c0       	rjmp	.+2      	; 0x51ca <udc_process_setup+0x432>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    51cc:	90 c0       	rjmp	.+288    	; 0x52ee <udc_process_setup+0x556>
    51ce:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <udd_g_ctrlreq>
    51d2:	8f 71       	andi	r24, 0x1F	; 31
    51d4:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    51d6:	81 f5       	brne	.+96     	; 0x5238 <udc_process_setup+0x4a0>
    51d8:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <udc_num_configuration>
    51dc:	88 23       	and	r24, r24
    51de:	09 f4       	brne	.+2      	; 0x51e2 <udc_process_setup+0x44a>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    51e0:	71 c0       	rjmp	.+226    	; 0x52c4 <udc_process_setup+0x52c>
    51e2:	00 91 90 23 	lds	r16, 0x2390	; 0x802390 <udd_g_ctrlreq+0x4>
    51e6:	10 91 91 23 	lds	r17, 0x2391	; 0x802391 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    51ea:	c0 91 76 23 	lds	r28, 0x2376	; 0x802376 <udc_ptr_conf>
    51ee:	d0 91 77 23 	lds	r29, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    51f2:	e8 81       	ld	r30, Y
    51f4:	f9 81       	ldd	r31, Y+1	; 0x01
    51f6:	84 81       	ldd	r24, Z+4	; 0x04
    51f8:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    51fa:	08 f0       	brcs	.+2      	; 0x51fe <udc_process_setup+0x466>
    51fc:	65 c0       	rjmp	.+202    	; 0x52c8 <udc_process_setup+0x530>
    51fe:	60 e0       	ldi	r22, 0x00	; 0
    5200:	80 2f       	mov	r24, r16
    5202:	c4 dc       	rcall	.-1656   	; 0x4b8c <udc_update_iface_desc>
    5204:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    5206:	c1 f0       	breq	.+48     	; 0x5238 <udc_process_setup+0x4a0>
    5208:	f8 01       	movw	r30, r16
    520a:	ff 27       	eor	r31, r31
    520c:	cf 01       	movw	r24, r30
    520e:	88 0f       	add	r24, r24
    5210:	99 1f       	adc	r25, r25
    5212:	ea 81       	ldd	r30, Y+2	; 0x02
    5214:	fb 81       	ldd	r31, Y+3	; 0x03
    5216:	e8 0f       	add	r30, r24
    5218:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    521a:	c0 81       	ld	r28, Z
    521c:	d1 81       	ldd	r29, Z+1	; 0x01
    521e:	ee 81       	ldd	r30, Y+6	; 0x06
    5220:	ff 81       	ldd	r31, Y+7	; 0x07
    5222:	19 95       	eicall
    5224:	68 2f       	mov	r22, r24
    5226:	80 2f       	mov	r24, r16
    5228:	b1 dc       	rcall	.-1694   	; 0x4b8c <udc_update_iface_desc>
    522a:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    522c:	29 f0       	breq	.+10     	; 0x5238 <udc_process_setup+0x4a0>
    522e:	ec 81       	ldd	r30, Y+4	; 0x04
    5230:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    5232:	19 95       	eicall
    5234:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    5236:	5b c0       	rjmp	.+182    	; 0x52ee <udc_process_setup+0x556>
    5238:	80 91 8c 23 	lds	r24, 0x238C	; 0x80238c <udd_g_ctrlreq>
    523c:	8f 71       	andi	r24, 0x1F	; 31
    523e:	82 30       	cpi	r24, 0x02	; 2
    5240:	09 f0       	breq	.+2      	; 0x5244 <udc_process_setup+0x4ac>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    5242:	44 c0       	rjmp	.+136    	; 0x52cc <udc_process_setup+0x534>
    5244:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <udc_num_configuration>
    5248:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    524a:	b1 f1       	breq	.+108    	; 0x52b8 <udc_process_setup+0x520>
    524c:	a0 91 76 23 	lds	r26, 0x2376	; 0x802376 <udc_ptr_conf>
    5250:	b0 91 77 23 	lds	r27, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    5254:	ed 91       	ld	r30, X+
    5256:	fc 91       	ld	r31, X
    5258:	11 97       	sbiw	r26, 0x01	; 1
    525a:	84 81       	ldd	r24, Z+4	; 0x04
    525c:	88 23       	and	r24, r24
    525e:	71 f1       	breq	.+92     	; 0x52bc <udc_process_setup+0x524>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    5260:	c0 e0       	ldi	r28, 0x00	; 0
    5262:	ec 2f       	mov	r30, r28
    5264:	f0 e0       	ldi	r31, 0x00	; 0
    5266:	ee 0f       	add	r30, r30
    5268:	ff 1f       	adc	r31, r31
    526a:	12 96       	adiw	r26, 0x02	; 2
    526c:	8d 91       	ld	r24, X+
    526e:	9c 91       	ld	r25, X
    5270:	13 97       	sbiw	r26, 0x03	; 3
    5272:	e8 0f       	add	r30, r24
    5274:	f9 1f       	adc	r31, r25
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    5276:	00 81       	ld	r16, Z
    5278:	11 81       	ldd	r17, Z+1	; 0x01
    527a:	d8 01       	movw	r26, r16
    527c:	16 96       	adiw	r26, 0x06	; 6
    527e:	ed 91       	ld	r30, X+
    5280:	fc 91       	ld	r31, X
    5282:	17 97       	sbiw	r26, 0x07	; 7
    5284:	19 95       	eicall
    5286:	68 2f       	mov	r22, r24
    5288:	8c 2f       	mov	r24, r28
    528a:	80 dc       	rcall	.-1792   	; 0x4b8c <udc_update_iface_desc>
    528c:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    528e:	79 f1       	breq	.+94     	; 0x52ee <udc_process_setup+0x556>
    5290:	d8 01       	movw	r26, r16
    5292:	14 96       	adiw	r26, 0x04	; 4
    5294:	ed 91       	ld	r30, X+
    5296:	fc 91       	ld	r31, X
    5298:	15 97       	sbiw	r26, 0x05	; 5
    529a:	19 95       	eicall
    529c:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    529e:	27 c0       	rjmp	.+78     	; 0x52ee <udc_process_setup+0x556>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    52a0:	cf 5f       	subi	r28, 0xFF	; 255
    52a2:	a0 91 76 23 	lds	r26, 0x2376	; 0x802376 <udc_ptr_conf>
    52a6:	b0 91 77 23 	lds	r27, 0x2377	; 0x802377 <udc_ptr_conf+0x1>
    52aa:	ed 91       	ld	r30, X+
    52ac:	fc 91       	ld	r31, X
    52ae:	11 97       	sbiw	r26, 0x01	; 1
    52b0:	94 81       	ldd	r25, Z+4	; 0x04
    52b2:	c9 17       	cp	r28, r25
    52b4:	b0 f2       	brcs	.-84     	; 0x5262 <udc_process_setup+0x4ca>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    52b6:	1b c0       	rjmp	.+54     	; 0x52ee <udc_process_setup+0x556>
    52b8:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    52ba:	19 c0       	rjmp	.+50     	; 0x52ee <udc_process_setup+0x556>
    52bc:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    52be:	17 c0       	rjmp	.+46     	; 0x52ee <udc_process_setup+0x556>
    52c0:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    52c2:	15 c0       	rjmp	.+42     	; 0x52ee <udc_process_setup+0x556>
    52c4:	80 e0       	ldi	r24, 0x00	; 0
    52c6:	13 c0       	rjmp	.+38     	; 0x52ee <udc_process_setup+0x556>
    52c8:	80 e0       	ldi	r24, 0x00	; 0
    52ca:	11 c0       	rjmp	.+34     	; 0x52ee <udc_process_setup+0x556>
    52cc:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    52ce:	0f c0       	rjmp	.+30     	; 0x52ee <udc_process_setup+0x556>
    52d0:	98 2f       	mov	r25, r24
    52d2:	90 76       	andi	r25, 0x60	; 96
    52d4:	09 f0       	breq	.+2      	; 0x52d8 <udc_process_setup+0x540>
    52d6:	7b cf       	rjmp	.-266    	; 0x51ce <udc_process_setup+0x436>
    52d8:	78 cd       	rjmp	.-1296   	; 0x4dca <udc_process_setup+0x32>
    52da:	98 2f       	mov	r25, r24
    52dc:	90 76       	andi	r25, 0x60	; 96
    52de:	09 f0       	breq	.+2      	; 0x52e2 <udc_process_setup+0x54a>
    52e0:	76 cf       	rjmp	.-276    	; 0x51ce <udc_process_setup+0x436>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    52e2:	7a ce       	rjmp	.-780    	; 0x4fd8 <udc_process_setup+0x240>
		str = udc_string_product_name;
    52e4:	3c e0       	ldi	r19, 0x0C	; 12
    52e6:	e2 ea       	ldi	r30, 0xA2	; 162
    52e8:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    52ea:	ee cd       	rjmp	.-1060   	; 0x4ec8 <udc_process_setup+0x130>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    52ec:	81 e0       	ldi	r24, 0x01	; 1
    52ee:	df 91       	pop	r29
    52f0:	cf 91       	pop	r28
    52f2:	1f 91       	pop	r17
    52f4:	0f 91       	pop	r16
    52f6:	08 95       	ret

000052f8 <__udivmodhi4>:
    52f8:	aa 1b       	sub	r26, r26
    52fa:	bb 1b       	sub	r27, r27
    52fc:	51 e1       	ldi	r21, 0x11	; 17
    52fe:	07 c0       	rjmp	.+14     	; 0x530e <__udivmodhi4_ep>

00005300 <__udivmodhi4_loop>:
    5300:	aa 1f       	adc	r26, r26
    5302:	bb 1f       	adc	r27, r27
    5304:	a6 17       	cp	r26, r22
    5306:	b7 07       	cpc	r27, r23
    5308:	10 f0       	brcs	.+4      	; 0x530e <__udivmodhi4_ep>
    530a:	a6 1b       	sub	r26, r22
    530c:	b7 0b       	sbc	r27, r23

0000530e <__udivmodhi4_ep>:
    530e:	88 1f       	adc	r24, r24
    5310:	99 1f       	adc	r25, r25
    5312:	5a 95       	dec	r21
    5314:	a9 f7       	brne	.-22     	; 0x5300 <__udivmodhi4_loop>
    5316:	80 95       	com	r24
    5318:	90 95       	com	r25
    531a:	bc 01       	movw	r22, r24
    531c:	cd 01       	movw	r24, r26
    531e:	08 95       	ret

00005320 <__tablejump2__>:
    5320:	ee 0f       	add	r30, r30
    5322:	ff 1f       	adc	r31, r31
    5324:	88 1f       	adc	r24, r24
    5326:	8b bf       	out	0x3b, r24	; 59
    5328:	07 90       	elpm	r0, Z+
    532a:	f6 91       	elpm	r31, Z
    532c:	e0 2d       	mov	r30, r0
    532e:	19 94       	eijmp

00005330 <__umulhisi3>:
    5330:	a2 9f       	mul	r26, r18
    5332:	b0 01       	movw	r22, r0
    5334:	b3 9f       	mul	r27, r19
    5336:	c0 01       	movw	r24, r0
    5338:	a3 9f       	mul	r26, r19
    533a:	70 0d       	add	r23, r0
    533c:	81 1d       	adc	r24, r1
    533e:	11 24       	eor	r1, r1
    5340:	91 1d       	adc	r25, r1
    5342:	b2 9f       	mul	r27, r18
    5344:	70 0d       	add	r23, r0
    5346:	81 1d       	adc	r24, r1
    5348:	11 24       	eor	r1, r1
    534a:	91 1d       	adc	r25, r1
    534c:	08 95       	ret

0000534e <__muluhisi3>:
    534e:	f0 df       	rcall	.-32     	; 0x5330 <__umulhisi3>
    5350:	a5 9f       	mul	r26, r21
    5352:	90 0d       	add	r25, r0
    5354:	b4 9f       	mul	r27, r20
    5356:	90 0d       	add	r25, r0
    5358:	a4 9f       	mul	r26, r20
    535a:	80 0d       	add	r24, r0
    535c:	91 1d       	adc	r25, r1
    535e:	11 24       	eor	r1, r1
    5360:	08 95       	ret

00005362 <memcpy>:
    5362:	fb 01       	movw	r30, r22
    5364:	dc 01       	movw	r26, r24
    5366:	02 c0       	rjmp	.+4      	; 0x536c <memcpy+0xa>
    5368:	01 90       	ld	r0, Z+
    536a:	0d 92       	st	X+, r0
    536c:	41 50       	subi	r20, 0x01	; 1
    536e:	50 40       	sbci	r21, 0x00	; 0
    5370:	d8 f7       	brcc	.-10     	; 0x5368 <memcpy+0x6>
    5372:	08 95       	ret

00005374 <_exit>:
    5374:	f8 94       	cli

00005376 <__stop_program>:
    5376:	ff cf       	rjmp	.-2      	; 0x5376 <__stop_program>
