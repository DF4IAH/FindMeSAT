
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000541e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00802000  0000541e  000054b2  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000031d  0080213a  0080213a  000055ee  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000055ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00005648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000850  00000000  00000000  00005690  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014ed3  00000000  00000000  00005ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005e4d  00000000  00000000  0001adb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b54e  00000000  00000000  00020c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000021dc  00000000  00000000  0002c150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003cfe2  00000000  00000000  0002e32c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007258  00000000  00000000  0006b30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000888  00000000  00000000  00072568  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004ab9  00000000  00000000  00072df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__vector_11>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__vector_13>
      38:	b8 c6       	rjmp	.+3440   	; 0xdaa <__vector_14>
      3a:	00 00       	nop
      3c:	e3 c6       	rjmp	.+3526   	; 0xe04 <__vector_15>
      3e:	00 00       	nop
      40:	0e c7       	rjmp	.+3612   	; 0xe5e <__vector_16>
      42:	00 00       	nop
      44:	39 c7       	rjmp	.+3698   	; 0xeb8 <__vector_17>
      46:	00 00       	nop
      48:	64 c7       	rjmp	.+3784   	; 0xf12 <__vector_18>
      4a:	00 00       	nop
      4c:	8f c7       	rjmp	.+3870   	; 0xf6c <__vector_19>
      4e:	00 00       	nop
      50:	ba c7       	rjmp	.+3956   	; 0xfc6 <__vector_20>
      52:	00 00       	nop
      54:	e5 c7       	rjmp	.+4042   	; 0x1020 <__vector_21>
      56:	00 00       	nop
      58:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_22>
      5c:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__vector_23>
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	85 c4       	rjmp	.+2314   	; 0x9a8 <__vector_39>
      9e:	00 00       	nop
      a0:	b5 c4       	rjmp	.+2410   	; 0xa0c <__vector_40>
      a2:	00 00       	nop
      a4:	e5 c4       	rjmp	.+2506   	; 0xa70 <__vector_41>
      a6:	00 00       	nop
      a8:	15 c5       	rjmp	.+2602   	; 0xad4 <__vector_42>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <__vector_46>
      bc:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__vector_47>
      c0:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_48>
      c4:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__vector_49>
      c8:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__vector_50>
      cc:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__vector_51>
      d0:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__vector_52>
      d4:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__vector_53>
      d8:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__vector_54>
      dc:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_55>
      e0:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__vector_56>
      e4:	ba c0       	rjmp	.+372    	; 0x25a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b6 c0       	rjmp	.+364    	; 0x25a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b4 c0       	rjmp	.+360    	; 0x25a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b2 c0       	rjmp	.+356    	; 0x25a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b0 c0       	rjmp	.+352    	; 0x25a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ae c0       	rjmp	.+348    	; 0x25a <__bad_interrupt>
      fe:	00 00       	nop
     100:	ac c0       	rjmp	.+344    	; 0x25a <__bad_interrupt>
     102:	00 00       	nop
     104:	aa c0       	rjmp	.+340    	; 0x25a <__bad_interrupt>
     106:	00 00       	nop
     108:	a8 c0       	rjmp	.+336    	; 0x25a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a6 c0       	rjmp	.+332    	; 0x25a <__bad_interrupt>
     10e:	00 00       	nop
     110:	a4 c0       	rjmp	.+328    	; 0x25a <__bad_interrupt>
     112:	00 00       	nop
     114:	a2 c0       	rjmp	.+324    	; 0x25a <__bad_interrupt>
     116:	00 00       	nop
     118:	a0 c0       	rjmp	.+320    	; 0x25a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	7d c3       	rjmp	.+1786   	; 0x818 <__vector_71>
     11e:	00 00       	nop
     120:	ad c3       	rjmp	.+1882   	; 0x87c <__vector_72>
     122:	00 00       	nop
     124:	dd c3       	rjmp	.+1978   	; 0x8e0 <__vector_73>
     126:	00 00       	nop
     128:	0d c4       	rjmp	.+2074   	; 0x944 <__vector_74>
     12a:	00 00       	nop
     12c:	96 c0       	rjmp	.+300    	; 0x25a <__bad_interrupt>
     12e:	00 00       	nop
     130:	94 c0       	rjmp	.+296    	; 0x25a <__bad_interrupt>
     132:	00 00       	nop
     134:	fc c7       	rjmp	.+4088   	; 0x112e <__vector_77>
     136:	00 00       	nop
     138:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__vector_78>
     13c:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_79>
     140:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__vector_80>
     144:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_81>
     148:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__vector_82>
     14c:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__vector_83>
     150:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_84>
     154:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__vector_85>
     158:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__vector_86>
     15c:	7e c0       	rjmp	.+252    	; 0x25a <__bad_interrupt>
     15e:	00 00       	nop
     160:	7c c0       	rjmp	.+248    	; 0x25a <__bad_interrupt>
     162:	00 00       	nop
     164:	7a c0       	rjmp	.+244    	; 0x25a <__bad_interrupt>
     166:	00 00       	nop
     168:	78 c0       	rjmp	.+240    	; 0x25a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	76 c0       	rjmp	.+236    	; 0x25a <__bad_interrupt>
     16e:	00 00       	nop
     170:	74 c0       	rjmp	.+232    	; 0x25a <__bad_interrupt>
     172:	00 00       	nop
     174:	72 c0       	rjmp	.+228    	; 0x25a <__bad_interrupt>
     176:	00 00       	nop
     178:	70 c0       	rjmp	.+224    	; 0x25a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6e c0       	rjmp	.+220    	; 0x25a <__bad_interrupt>
     17e:	00 00       	nop
     180:	6c c0       	rjmp	.+216    	; 0x25a <__bad_interrupt>
     182:	00 00       	nop
     184:	6a c0       	rjmp	.+212    	; 0x25a <__bad_interrupt>
     186:	00 00       	nop
     188:	68 c0       	rjmp	.+208    	; 0x25a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	66 c0       	rjmp	.+204    	; 0x25a <__bad_interrupt>
     18e:	00 00       	nop
     190:	64 c0       	rjmp	.+200    	; 0x25a <__bad_interrupt>
     192:	00 00       	nop
     194:	62 c0       	rjmp	.+196    	; 0x25a <__bad_interrupt>
     196:	00 00       	nop
     198:	60 c0       	rjmp	.+192    	; 0x25a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5e c0       	rjmp	.+188    	; 0x25a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5c c0       	rjmp	.+184    	; 0x25a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5a c0       	rjmp	.+180    	; 0x25a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	58 c0       	rjmp	.+176    	; 0x25a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	56 c0       	rjmp	.+172    	; 0x25a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_108>
     1b4:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_109>
     1b8:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__vector_110>
     1bc:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__vector_111>
     1c0:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_112>
     1c4:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__vector_113>
     1c8:	48 c0       	rjmp	.+144    	; 0x25a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	46 c0       	rjmp	.+140    	; 0x25a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	44 c0       	rjmp	.+136    	; 0x25a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	42 c0       	rjmp	.+132    	; 0x25a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3c c0       	rjmp	.+120    	; 0x25a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3a c0       	rjmp	.+116    	; 0x25a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	36 c0       	rjmp	.+108    	; 0x25a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__vector_125>
     1f8:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__vector_126>
     1fc:	04 10       	cpse	r0, r4
     1fe:	07 10       	cpse	r0, r7
     200:	0a 10       	cpse	r0, r10
     202:	0d 10       	cpse	r0, r13
     204:	10 10       	cpse	r1, r0
     206:	13 10       	cpse	r1, r3
     208:	16 10       	cpse	r1, r6
     20a:	55 17       	cp	r21, r21
     20c:	68 17       	cp	r22, r24
     20e:	7b 17       	cp	r23, r27
     210:	8e 17       	cp	r24, r30
     212:	a1 17       	cp	r26, r17
     214:	b4 17       	cp	r27, r20
     216:	c7 17       	cp	r28, r23

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e5       	ldi	r29, 0x5F	; 95
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	ee e1       	ldi	r30, 0x1E	; 30
     230:	f4 e5       	ldi	r31, 0x54	; 84
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	aa 33       	cpi	r26, 0x3A	; 58
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	24 e2       	ldi	r18, 0x24	; 36
     244:	aa e3       	ldi	r26, 0x3A	; 58
     246:	b1 e2       	ldi	r27, 0x21	; 33
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a7 35       	cpi	r26, 0x57	; 87
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 a7 18 	call	0x314e	; 0x314e <main>
     256:	0c 94 0d 2a 	jmp	0x541a	; 0x541a <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
     25c:	04 c0       	rjmp	.+8      	; 0x266 <__portable_avr_delay_cycles+0xa>
     25e:	61 50       	subi	r22, 0x01	; 1
     260:	71 09       	sbc	r23, r1
     262:	81 09       	sbc	r24, r1
     264:	91 09       	sbc	r25, r1
     266:	61 15       	cp	r22, r1
     268:	71 05       	cpc	r23, r1
     26a:	81 05       	cpc	r24, r1
     26c:	91 05       	cpc	r25, r1
     26e:	b9 f7       	brne	.-18     	; 0x25e <__portable_avr_delay_cycles+0x2>
     270:	08 95       	ret

00000272 <rtc_get_time>:
     272:	80 e1       	ldi	r24, 0x10	; 16
     274:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     278:	e0 e2       	ldi	r30, 0x20	; 32
     27a:	f4 e0       	ldi	r31, 0x04	; 4
     27c:	81 81       	ldd	r24, Z+1	; 0x01
     27e:	84 fd       	sbrc	r24, 4
     280:	fd cf       	rjmp	.-6      	; 0x27c <rtc_get_time+0xa>
     282:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
     286:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     28a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     28e:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     292:	08 95       	ret

00000294 <rtc_set_callback>:
     294:	80 93 2b 24 	sts	0x242B, r24	; 0x80242b <rtc_data>
     298:	90 93 2c 24 	sts	0x242C, r25	; 0x80242c <rtc_data+0x1>
     29c:	08 95       	ret

0000029e <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
     2aa:	c0 ef       	ldi	r28, 0xF0	; 240
     2ac:	d0 e0       	ldi	r29, 0x00	; 0
     2ae:	88 81       	ld	r24, Y
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	80 ef       	ldi	r24, 0xF0	; 240
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 81 23 	call	0x4702	; 0x4702 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
     2be:	88 81       	ld	r24, Y
     2c0:	84 60       	ori	r24, 0x04	; 4
     2c2:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
     2c4:	69 ee       	ldi	r22, 0xE9	; 233
     2c6:	73 e0       	ldi	r23, 0x03	; 3
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	c7 df       	rcall	.-114    	; 0x25c <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
     2ce:	88 81       	ld	r24, Y
     2d0:	88 61       	ori	r24, 0x18	; 24
     2d2:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
     2d4:	e0 ef       	ldi	r30, 0xF0	; 240
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	83 ff       	sbrs	r24, 3
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
     2de:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     2e2:	e0 e2       	ldi	r30, 0x20	; 32
     2e4:	f4 e0       	ldi	r31, 0x04	; 4
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
     2e8:	80 fd       	sbrc	r24, 0
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
     2ec:	e0 e2       	ldi	r30, 0x20	; 32
     2ee:	f4 e0       	ldi	r31, 0x04	; 4
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
     2f4:	dc 01       	movw	r26, r24
     2f6:	80 87       	std	Z+8, r24	; 0x08
     2f8:	91 87       	std	Z+9, r25	; 0x09
     2fa:	a2 87       	std	Z+10, r26	; 0x0a
     2fc:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
     2fe:	14 82       	std	Z+4, r1	; 0x04
     300:	15 82       	std	Z+5, r1	; 0x05
     302:	16 82       	std	Z+6, r1	; 0x06
     304:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     306:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
     308:	80 fd       	sbrc	r24, 0
     30a:	fd cf       	rjmp	.-6      	; 0x306 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
     30c:	e0 e2       	ldi	r30, 0x20	; 32
     30e:	f4 e0       	ldi	r31, 0x04	; 4
     310:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     316:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
     318:	80 fd       	sbrc	r24, 0
     31a:	fd cf       	rjmp	.-6      	; 0x316 <rtc_init+0x78>
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	0b b6       	in	r0, 0x3b	; 59
     32e:	0f 92       	push	r0
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ef 93       	push	r30
     34a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
     34c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
     350:	c0 91 2b 24 	lds	r28, 0x242B	; 0x80242b <rtc_data>
     354:	d0 91 2c 24 	lds	r29, 0x242C	; 0x80242c <rtc_data+0x1>
     358:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
     35a:	19 f0       	breq	.+6      	; 0x362 <__vector_11+0x40>
     35c:	8a df       	rcall	.-236    	; 0x272 <rtc_get_time>
     35e:	fe 01       	movw	r30, r28
}
     360:	19 95       	eicall
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <__portable_avr_delay_cycles>:
	start_twi_lcd();
}

/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void start_twi_onboard()
{
     38c:	04 c0       	rjmp	.+8      	; 0x396 <__portable_avr_delay_cycles+0xa>
     38e:	61 50       	subi	r22, 0x01	; 1
     390:	71 09       	sbc	r23, r1
     392:	81 09       	sbc	r24, r1
     394:	91 09       	sbc	r25, r1
     396:	61 15       	cp	r22, r1
     398:	71 05       	cpc	r23, r1
     39a:	81 05       	cpc	r24, r1
     39c:	91 05       	cpc	r25, r1
     39e:	b9 f7       	brne	.-18     	; 0x38e <__portable_avr_delay_cycles+0x2>
     3a0:	08 95       	ret

000003a2 <twi_waitUntilReady>:
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	e6 e0       	ldi	r30, 0x06	; 6
     3b2:	f0 e2       	ldi	r31, 0x20	; 32
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	81 83       	std	Z+1, r24	; 0x01
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	84 83       	std	Z+4, r24	; 0x04
     3be:	95 83       	std	Z+5, r25	; 0x05
     3c0:	8f 01       	movw	r16, r30
     3c2:	cc 24       	eor	r12, r12
     3c4:	c3 94       	inc	r12
     3c6:	d1 2c       	mov	r13, r1
     3c8:	0f 2e       	mov	r0, r31
     3ca:	f5 ec       	ldi	r31, 0xC5	; 197
     3cc:	ef 2e       	mov	r14, r31
     3ce:	f2 e2       	ldi	r31, 0x22	; 34
     3d0:	ff 2e       	mov	r15, r31
     3d2:	f0 2d       	mov	r31, r0
     3d4:	f8 01       	movw	r30, r16
     3d6:	c0 86       	std	Z+8, r12	; 0x08
     3d8:	d1 86       	std	Z+9, r13	; 0x09
     3da:	41 e0       	ldi	r20, 0x01	; 1
     3dc:	b8 01       	movw	r22, r16
     3de:	80 e8       	ldi	r24, 0x80	; 128
     3e0:	94 e0       	ldi	r25, 0x04	; 4
     3e2:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
     3e6:	f7 01       	movw	r30, r14
     3e8:	c0 81       	ld	r28, Z
     3ea:	9c 2f       	mov	r25, r28
     3ec:	90 78       	andi	r25, 0x80	; 128
     3ee:	81 11       	cpse	r24, r1
     3f0:	0d c0       	rjmp	.+26     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f2:	91 f0       	breq	.+36     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3f4:	8c 2f       	mov	r24, r28
     3f6:	81 78       	andi	r24, 0x81	; 129
     3f8:	81 38       	cpi	r24, 0x81	; 129
     3fa:	29 f4       	brne	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fc:	65 ef       	ldi	r22, 0xF5	; 245
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	c3 df       	rcall	.-122    	; 0x38c <__portable_avr_delay_cycles>
     406:	c0 fd       	sbrc	r28, 0
     408:	e5 cf       	rjmp	.-54     	; 0x3d4 <twi_waitUntilReady+0x32>
     40a:	0c c0       	rjmp	.+24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     40c:	65 e0       	ldi	r22, 0x05	; 5
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	bb df       	rcall	.-138    	; 0x38c <__portable_avr_delay_cycles>
     416:	de cf       	rjmp	.-68     	; 0x3d4 <twi_waitUntilReady+0x32>
     418:	65 e0       	ldi	r22, 0x05	; 5
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	b5 df       	rcall	.-150    	; 0x38c <__portable_avr_delay_cycles>
     422:	d8 cf       	rjmp	.-80     	; 0x3d4 <twi_waitUntilReady+0x32>
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	df 90       	pop	r13
     430:	cf 90       	pop	r12
     432:	08 95       	ret

00000434 <twi_init>:
     434:	e0 e8       	ldi	r30, 0x80	; 128
     436:	f6 e0       	ldi	r31, 0x06	; 6
     438:	88 e3       	ldi	r24, 0x38	; 56
     43a:	80 8b       	std	Z+16, r24	; 0x10
     43c:	81 8b       	std	Z+17, r24	; 0x11
     43e:	e0 e4       	ldi	r30, 0x40	; 64
     440:	f6 e0       	ldi	r31, 0x06	; 6
     442:	80 8b       	std	Z+16, r24	; 0x10
     444:	81 8b       	std	Z+17, r24	; 0x11
     446:	08 95       	ret

00000448 <start_twi_lcd>:

}

/* TWI2 - LCD Port */
void start_twi_lcd()
{
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
     454:	e6 e0       	ldi	r30, 0x06	; 6
     456:	f0 e2       	ldi	r31, 0x20	; 32
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	84 83       	std	Z+4, r24	; 0x04
     462:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
     464:	80 87       	std	Z+8, r24	; 0x08
     466:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
     468:	41 e0       	ldi	r20, 0x01	; 1
     46a:	bf 01       	movw	r22, r30
     46c:	80 e8       	ldi	r24, 0x80	; 128
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
     474:	80 91 c5 22 	lds	r24, 0x22C5	; 0x8022c5 <twi2_m_data>
     478:	80 93 f0 22 	sts	0x22F0, r24	; 0x8022f0 <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
     47c:	81 31       	cpi	r24, 0x11	; 17
     47e:	78 f1       	brcs	.+94     	; 0x4de <start_twi_lcd+0x96>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
     480:	c6 e0       	ldi	r28, 0x06	; 6
     482:	d0 e2       	ldi	r29, 0x20	; 32
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
     488:	0f 2e       	mov	r0, r31
     48a:	f5 ec       	ldi	r31, 0xC5	; 197
     48c:	ef 2e       	mov	r14, r31
     48e:	f2 e2       	ldi	r31, 0x22	; 34
     490:	ff 2e       	mov	r15, r31
     492:	f0 2d       	mov	r31, r0
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	f7 01       	movw	r30, r14
     498:	80 83       	st	Z, r24
		twi2_packet.length = 1;
     49a:	01 e0       	ldi	r16, 0x01	; 1
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	08 87       	std	Y+8, r16	; 0x08
     4a0:	19 87       	std	Y+9, r17	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	be 01       	movw	r22, r28
     4a6:	80 e8       	ldi	r24, 0x80	; 128
     4a8:	94 e0       	ldi	r25, 0x04	; 4
     4aa:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     4ae:	65 e0       	ldi	r22, 0x05	; 5
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0

		twi_waitUntilReady();
     4b6:	6a df       	rcall	.-300    	; 0x38c <__portable_avr_delay_cycles>
     4b8:	74 df       	rcall	.-280    	; 0x3a2 <twi_waitUntilReady>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
     4ba:	84 e1       	ldi	r24, 0x14	; 20
     4bc:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = GFX_PIXEL_SET;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	f7 01       	movw	r30, r14
     4c2:	80 83       	st	Z, r24
		twi2_packet.length = 1;
     4c4:	08 87       	std	Y+8, r16	; 0x08
     4c6:	19 87       	std	Y+9, r17	; 0x09
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	be 01       	movw	r22, r28
     4cc:	80 e8       	ldi	r24, 0x80	; 128
     4ce:	94 e0       	ldi	r25, 0x04	; 4
     4d0:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     4d4:	65 e0       	ldi	r22, 0x05	; 5
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	57 df       	rcall	.-338    	; 0x38c <__portable_avr_delay_cycles>
	}
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	08 95       	ret

000004ec <twi_start>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     4ec:	60 e4       	ldi	r22, 0x40	; 64
     4ee:	85 e0       	ldi	r24, 0x05	; 5
     4f0:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
#else
#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
     4f4:	6a e1       	ldi	r22, 0x1A	; 26
     4f6:	70 e2       	ldi	r23, 0x20	; 32
     4f8:	80 ea       	ldi	r24, 0xA0	; 160
     4fa:	94 e0       	ldi	r25, 0x04	; 4
     4fc:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
     500:	e0 ea       	ldi	r30, 0xA0	; 160
     502:	f4 e0       	ldi	r31, 0x04	; 4
     504:	81 81       	ldd	r24, Z+1	; 0x01
     506:	88 60       	ori	r24, 0x08	; 8
     508:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     50a:	60 e4       	ldi	r22, 0x40	; 64
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
#else
#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
     512:	61 e1       	ldi	r22, 0x11	; 17
     514:	70 e2       	ldi	r23, 0x20	; 32
     516:	80 e8       	ldi	r24, 0x80	; 128
     518:	94 e0       	ldi	r25, 0x04	; 4
     51a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <twi_master_init>
     51e:	e0 e8       	ldi	r30, 0x80	; 128
     520:	f4 e0       	ldi	r31, 0x04	; 4
     522:	81 81       	ldd	r24, Z+1	; 0x01
     524:	88 60       	ori	r24, 0x08	; 8
     526:	81 83       	std	Z+1, r24	; 0x01
	twi_master_enable(&TWI2_MASTER);
#endif
#endif

	// Give Smart-LCD some time being up and ready
	delay_s(2);
     528:	61 e8       	ldi	r22, 0x81	; 129
     52a:	76 e9       	ldi	r23, 0x96	; 150
     52c:	88 e9       	ldi	r24, 0x98	; 152
     52e:	90 e0       	ldi	r25, 0x00	; 0

	/* Start each TWI channel devices */
	start_twi_onboard();
	start_twi_lcd();
     530:	2d df       	rcall	.-422    	; 0x38c <__portable_avr_delay_cycles>
     532:	8a cf       	rjmp	.-236    	; 0x448 <start_twi_lcd>
     534:	08 95       	ret

00000536 <task_twi_onboard>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void task_twi_onboard(uint32_t now, uint32_t last)
{
     536:	08 95       	ret

00000538 <task_twi_lcd>:

}

/* TWI2 - LCD Port */
void task_twi_lcd(uint32_t now, uint32_t last)
{
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
	if (g_twi2_lcd_version >= 0x11) {
     546:	80 91 f0 22 	lds	r24, 0x22F0	; 0x8022f0 <g_twi2_lcd_version>
     54a:	81 31       	cpi	r24, 0x11	; 17
     54c:	08 f4       	brcc	.+2      	; 0x550 <task_twi_lcd+0x18>
		static uint8_t ofs = 0;

		twi_waitUntilReady();
     54e:	b2 c0       	rjmp	.+356    	; 0x6b4 <task_twi_lcd+0x17c>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
     550:	28 df       	rcall	.-432    	; 0x3a2 <twi_waitUntilReady>
     552:	06 e0       	ldi	r16, 0x06	; 6
     554:	10 e2       	ldi	r17, 0x20	; 32
     556:	68 94       	set
     558:	dd 24       	eor	r13, r13
     55a:	d5 f8       	bld	r13, 5
     55c:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 16 + ofs;
     55e:	d1 82       	std	Z+1, r13	; 0x01
     560:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <__data_end>
     564:	80 5f       	subi	r24, 0xF0	; 240
     566:	c5 ec       	ldi	r28, 0xC5	; 197
     568:	d2 e2       	ldi	r29, 0x22	; 34
		twi2_m_data[1] = 16 + ofs;
     56a:	88 83       	st	Y, r24
		twi2_packet.length = 2;
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	68 94       	set
     570:	ee 24       	eor	r14, r14
     572:	e1 f8       	bld	r14, 1
     574:	f1 2c       	mov	r15, r1
     576:	e0 86       	std	Z+8, r14	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     578:	f1 86       	std	Z+9, r15	; 0x09
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	b8 01       	movw	r22, r16
     57e:	80 e8       	ldi	r24, 0x80	; 128
     580:	94 e0       	ldi	r25, 0x04	; 4
     582:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     586:	65 e0       	ldi	r22, 0x05	; 5
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	80 e0       	ldi	r24, 0x00	; 0

#if 1
		twi_waitUntilReady();
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	fe de       	rcall	.-516    	; 0x38c <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
     590:	08 df       	rcall	.-496    	; 0x3a2 <twi_waitUntilReady>
     592:	82 e3       	ldi	r24, 0x32	; 50
     594:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 150 + ofs;
     596:	81 83       	std	Z+1, r24	; 0x01
     598:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <__data_end>
     59c:	96 e9       	ldi	r25, 0x96	; 150
     59e:	98 0f       	add	r25, r24
		twi2_m_data[1] =  60 + ofs;
     5a0:	98 83       	st	Y, r25
     5a2:	84 5c       	subi	r24, 0xC4	; 196
		twi2_packet.length = 2;
     5a4:	89 83       	std	Y+1, r24	; 0x01
     5a6:	e0 86       	std	Z+8, r14	; 0x08
     5a8:	f1 86       	std	Z+9, r15	; 0x09
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	b8 01       	movw	r22, r16
     5ae:	80 e8       	ldi	r24, 0x80	; 128
     5b0:	94 e0       	ldi	r25, 0x04	; 4
     5b2:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     5b6:	65 e0       	ldi	r22, 0x05	; 5
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	80 e0       	ldi	r24, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	e6 de       	rcall	.-564    	; 0x38c <__portable_avr_delay_cycles>
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_RECT;
     5c0:	f0 de       	rcall	.-544    	; 0x3a2 <twi_waitUntilReady>
     5c2:	84 e3       	ldi	r24, 0x34	; 52
     5c4:	f8 01       	movw	r30, r16
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_RECT;
# endif
		twi2_m_data[0] = 30;
     5c6:	81 83       	std	Z+1, r24	; 0x01
     5c8:	8e e1       	ldi	r24, 0x1E	; 30
		twi2_m_data[1] =  30;
     5ca:	88 83       	st	Y, r24
		twi2_packet.length = 2;
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	e0 86       	std	Z+8, r14	; 0x08
     5d0:	f1 86       	std	Z+9, r15	; 0x09
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	b8 01       	movw	r22, r16
     5d6:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
     5de:	65 e0       	ldi	r22, 0x05	; 5
     5e0:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_CIRC;
     5e6:	d2 de       	rcall	.-604    	; 0x38c <__portable_avr_delay_cycles>
     5e8:	dc de       	rcall	.-584    	; 0x3a2 <twi_waitUntilReady>
     5ea:	88 e3       	ldi	r24, 0x38	; 56
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC;
# endif
		twi2_m_data[0] = 20;
     5ec:	f8 01       	movw	r30, r16
     5ee:	81 83       	std	Z+1, r24	; 0x01
		twi2_packet.length = 1;
     5f0:	84 e1       	ldi	r24, 0x14	; 20
     5f2:	88 83       	st	Y, r24
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	80 87       	std	Z+8, r24	; 0x08
     5fa:	91 87       	std	Z+9, r25	; 0x09
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     600:	80 e8       	ldi	r24, 0x80	; 128
     602:	94 e0       	ldi	r25, 0x04	; 4
     604:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
     608:	65 e0       	ldi	r22, 0x05	; 5
     60a:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
     610:	bd de       	rcall	.-646    	; 0x38c <__portable_avr_delay_cycles>
     612:	c7 de       	rcall	.-626    	; 0x3a2 <twi_waitUntilReady>
		twi2_m_data[0] = 116 + ofs;
     614:	f8 01       	movw	r30, r16
     616:	d1 82       	std	Z+1, r13	; 0x01
     618:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <__data_end>
     61c:	94 e7       	ldi	r25, 0x74	; 116
		twi2_m_data[1] =  16 + ofs;
     61e:	98 0f       	add	r25, r24
     620:	98 83       	st	Y, r25
		twi2_packet.length = 2;
     622:	80 5f       	subi	r24, 0xF0	; 240
     624:	89 83       	std	Y+1, r24	; 0x01
     626:	e0 86       	std	Z+8, r14	; 0x08
     628:	f1 86       	std	Z+9, r15	; 0x09
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     62e:	80 e8       	ldi	r24, 0x80	; 128
     630:	94 e0       	ldi	r25, 0x04	; 4
     632:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
     636:	65 e0       	ldi	r22, 0x05	; 5
     638:	70 e0       	ldi	r23, 0x00	; 0

		twi_waitUntilReady();
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
     63e:	a6 de       	rcall	.-692    	; 0x38c <__portable_avr_delay_cycles>
     640:	b0 de       	rcall	.-672    	; 0x3a2 <twi_waitUntilReady>
     642:	80 e3       	ldi	r24, 0x30	; 48
		twi2_m_data[0] = 4;
     644:	f8 01       	movw	r30, r16
     646:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[1] = 'A';
     648:	84 e0       	ldi	r24, 0x04	; 4
     64a:	88 83       	st	Y, r24
		twi2_m_data[2] = 'B';
     64c:	81 e4       	ldi	r24, 0x41	; 65
     64e:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[3] = 'C';
     650:	82 e4       	ldi	r24, 0x42	; 66
     652:	8a 83       	std	Y+2, r24	; 0x02
		twi2_m_data[4] = 'D';
     654:	83 e4       	ldi	r24, 0x43	; 67
     656:	8b 83       	std	Y+3, r24	; 0x03
		twi2_packet.length = twi2_m_data[0] + 1;
     658:	84 e4       	ldi	r24, 0x44	; 68
     65a:	8c 83       	std	Y+4, r24	; 0x04
     65c:	85 e0       	ldi	r24, 0x05	; 5
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	80 87       	std	Z+8, r24	; 0x08
     662:	91 87       	std	Z+9, r25	; 0x09
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	b8 01       	movw	r22, r16
     668:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     66a:	94 e0       	ldi	r25, 0x04	; 4
     66c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
     670:	65 e0       	ldi	r22, 0x05	; 5
     672:	70 e0       	ldi	r23, 0x00	; 0
#endif

		if (++ofs > 64) {
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	89 de       	rcall	.-750    	; 0x38c <__portable_avr_delay_cycles>
     67a:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <__data_end>
     67e:	8f 5f       	subi	r24, 0xFF	; 255
     680:	81 34       	cpi	r24, 0x41	; 65
     682:	18 f4       	brcc	.+6      	; 0x68a <task_twi_lcd+0x152>
			ofs = 0;
     684:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <__data_end>

			twi_waitUntilReady();
     688:	32 c0       	rjmp	.+100    	; 0x6ee <task_twi_lcd+0x1b6>
     68a:	10 92 3a 21 	sts	0x213A, r1	; 0x80213a <__data_end>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
     68e:	89 de       	rcall	.-750    	; 0x3a2 <twi_waitUntilReady>
     690:	e6 e0       	ldi	r30, 0x06	; 6
			twi2_packet.length = 0;
     692:	f0 e2       	ldi	r31, 0x20	; 32
     694:	80 e1       	ldi	r24, 0x10	; 16
     696:	81 83       	std	Z+1, r24	; 0x01
     698:	10 86       	std	Z+8, r1	; 0x08
     69a:	11 86       	std	Z+9, r1	; 0x09
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	bf 01       	movw	r22, r30
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     6a0:	80 e8       	ldi	r24, 0x80	; 128
     6a2:	94 e0       	ldi	r25, 0x04	; 4
     6a4:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
     6a8:	65 e0       	ldi	r22, 0x05	; 5
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e0       	ldi	r24, 0x00	; 0
		}

	} else if (g_twi2_lcd_version == 0x10) {
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	6d de       	rcall	.-806    	; 0x38c <__portable_avr_delay_cycles>
#if 1
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi_waitUntilReady();
     6b2:	1d c0       	rjmp	.+58     	; 0x6ee <task_twi_lcd+0x1b6>
     6b4:	80 31       	cpi	r24, 0x10	; 16
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
     6b6:	d9 f4       	brne	.+54     	; 0x6ee <task_twi_lcd+0x1b6>
     6b8:	74 de       	rcall	.-792    	; 0x3a2 <twi_waitUntilReady>
     6ba:	e6 e0       	ldi	r30, 0x06	; 6
     6bc:	f0 e2       	ldi	r31, 0x20	; 32
		twi2_m_data[0] = 1;
     6be:	84 e8       	ldi	r24, 0x84	; 132
     6c0:	81 83       	std	Z+1, r24	; 0x01
     6c2:	a5 ec       	ldi	r26, 0xC5	; 197
     6c4:	b2 e2       	ldi	r27, 0x22	; 34
		twi2_m_data[1] = 128;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	8c 93       	st	X, r24
		twi2_packet.length = 2;
     6ca:	80 e8       	ldi	r24, 0x80	; 128
     6cc:	11 96       	adiw	r26, 0x01	; 1
     6ce:	8c 93       	st	X, r24
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	80 87       	std	Z+8, r24	; 0x08
     6d6:	91 87       	std	Z+9, r25	; 0x09
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	bf 01       	movw	r22, r30
     6dc:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
     6de:	94 e0       	ldi	r25, 0x04	; 4
     6e0:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <twi_master_transfer>
     6e4:	69 e8       	ldi	r22, 0x89	; 137
     6e6:	73 e1       	ldi	r23, 0x13	; 19
     6e8:	80 e0       	ldi	r24, 0x00	; 0
#endif
	}
}
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	4f de       	rcall	.-866    	; 0x38c <__portable_avr_delay_cycles>
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	df 90       	pop	r13
     6fc:	08 95       	ret

000006fe <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     6fe:	08 95       	ret

00000700 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	1f 92       	push	r1
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     70a:	2f b7       	in	r18, 0x3f	; 63
     70c:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     70e:	f8 94       	cli
	return flags;
     710:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     712:	28 2f       	mov	r18, r24
     714:	39 2f       	mov	r19, r25
     716:	21 15       	cp	r18, r1
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	38 07       	cpc	r19, r24
     71c:	29 f4       	brne	.+10     	; 0x728 <adc_set_callback+0x28>
		adca_callback = callback;
     71e:	60 93 2f 24 	sts	0x242F, r22	; 0x80242f <adca_callback>
     722:	70 93 30 24 	sts	0x2430, r23	; 0x802430 <adca_callback+0x1>
     726:	07 c0       	rjmp	.+14     	; 0x736 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     728:	20 34       	cpi	r18, 0x40	; 64
     72a:	32 40       	sbci	r19, 0x02	; 2
     72c:	21 f4       	brne	.+8      	; 0x736 <adc_set_callback+0x36>
		adcb_callback = callback;
     72e:	60 93 2d 24 	sts	0x242D, r22	; 0x80242d <adcb_callback>
     732:	70 93 2e 24 	sts	0x242E, r23	; 0x80242e <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     736:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     738:	0f 90       	pop	r0
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     740:	81 15       	cp	r24, r1
     742:	22 e0       	ldi	r18, 0x02	; 2
     744:	92 07       	cpc	r25, r18
     746:	69 f4       	brne	.+26     	; 0x762 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     748:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <adca_enable_count>
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	98 0f       	add	r25, r24
     750:	90 93 3c 21 	sts	0x213C, r25	; 0x80213c <adca_enable_count>
     754:	81 11       	cpse	r24, r1
     756:	14 c0       	rjmp	.+40     	; 0x780 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     758:	62 e0       	ldi	r22, 0x02	; 2
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <sysclk_enable_module>
     760:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     762:	80 34       	cpi	r24, 0x40	; 64
     764:	92 40       	sbci	r25, 0x02	; 2
     766:	61 f4       	brne	.+24     	; 0x780 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     768:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <adcb_enable_count>
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	98 0f       	add	r25, r24
     770:	90 93 3b 21 	sts	0x213B, r25	; 0x80213b <adcb_enable_count>
     774:	81 11       	cpse	r24, r1
     776:	04 c0       	rjmp	.+8      	; 0x780 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <sysclk_enable_module>
     780:	08 95       	ret

00000782 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     782:	81 15       	cp	r24, r1
     784:	22 e0       	ldi	r18, 0x02	; 2
     786:	92 07       	cpc	r25, r18
     788:	61 f4       	brne	.+24     	; 0x7a2 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     78a:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <adca_enable_count>
     78e:	81 50       	subi	r24, 0x01	; 1
     790:	80 93 3c 21 	sts	0x213C, r24	; 0x80213c <adca_enable_count>
     794:	81 11       	cpse	r24, r1
     796:	13 c0       	rjmp	.+38     	; 0x7be <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     798:	62 e0       	ldi	r22, 0x02	; 2
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	0c 94 86 1b 	jmp	0x370c	; 0x370c <sysclk_disable_module>
     7a0:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     7a2:	80 34       	cpi	r24, 0x40	; 64
     7a4:	92 40       	sbci	r25, 0x02	; 2
     7a6:	59 f4       	brne	.+22     	; 0x7be <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     7a8:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <adcb_enable_count>
     7ac:	81 50       	subi	r24, 0x01	; 1
     7ae:	80 93 3b 21 	sts	0x213B, r24	; 0x80213b <adcb_enable_count>
     7b2:	81 11       	cpse	r24, r1
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     7b6:	62 e0       	ldi	r22, 0x02	; 2
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	0c 94 86 1b 	jmp	0x370c	; 0x370c <sysclk_disable_module>
     7be:	08 95       	ret

000007c0 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	1f 92       	push	r1
     7cc:	1f 92       	push	r1
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7d4:	8f b7       	in	r24, 0x3f	; 63
     7d6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7d8:	f8 94       	cli
	return flags;
     7da:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     7dc:	c7 01       	movw	r24, r14
     7de:	b0 df       	rcall	.-160    	; 0x740 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     7e0:	f7 01       	movw	r30, r14
     7e2:	80 81       	ld	r24, Z
     7e4:	81 60       	ori	r24, 0x01	; 1
     7e6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7e8:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     7ea:	80 91 42 24 	lds	r24, 0x2442	; 0x802442 <sleepmgr_locks+0x1>
     7ee:	8f 3f       	cpi	r24, 0xFF	; 255
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <adc_enable+0x34>
     7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7f4:	8f b7       	in	r24, 0x3f	; 63
     7f6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     7f8:	f8 94       	cli
	return flags;
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     7fc:	e1 e4       	ldi	r30, 0x41	; 65
     7fe:	f4 e2       	ldi	r31, 0x24	; 36
     800:	81 81       	ldd	r24, Z+1	; 0x01
     802:	8f 5f       	subi	r24, 0xFF	; 255
     804:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     806:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	08 95       	ret

00000818 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	0b b6       	in	r0, 0x3b	; 59
     824:	0f 92       	push	r0
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     83e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     842:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     846:	e0 91 2f 24 	lds	r30, 0x242F	; 0x80242f <adca_callback>
     84a:	f0 91 30 24 	lds	r31, 0x2430	; 0x802430 <adca_callback+0x1>
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	92 e0       	ldi	r25, 0x02	; 2
     854:	19 95       	eicall
}
     856:	ff 91       	pop	r31
     858:	ef 91       	pop	r30
     85a:	bf 91       	pop	r27
     85c:	af 91       	pop	r26
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	7f 91       	pop	r23
     864:	6f 91       	pop	r22
     866:	5f 91       	pop	r21
     868:	4f 91       	pop	r20
     86a:	3f 91       	pop	r19
     86c:	2f 91       	pop	r18
     86e:	0f 90       	pop	r0
     870:	0b be       	out	0x3b, r0	; 59
     872:	0f 90       	pop	r0
     874:	0f be       	out	0x3f, r0	; 63
     876:	0f 90       	pop	r0
     878:	1f 90       	pop	r1
     87a:	18 95       	reti

0000087c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	0b b6       	in	r0, 0x3b	; 59
     888:	0f 92       	push	r0
     88a:	2f 93       	push	r18
     88c:	3f 93       	push	r19
     88e:	4f 93       	push	r20
     890:	5f 93       	push	r21
     892:	6f 93       	push	r22
     894:	7f 93       	push	r23
     896:	8f 93       	push	r24
     898:	9f 93       	push	r25
     89a:	af 93       	push	r26
     89c:	bf 93       	push	r27
     89e:	ef 93       	push	r30
     8a0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     8a2:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     8a6:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     8aa:	e0 91 2f 24 	lds	r30, 0x242F	; 0x80242f <adca_callback>
     8ae:	f0 91 30 24 	lds	r31, 0x2430	; 0x802430 <adca_callback+0x1>
     8b2:	62 e0       	ldi	r22, 0x02	; 2
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	19 95       	eicall
}
     8ba:	ff 91       	pop	r31
     8bc:	ef 91       	pop	r30
     8be:	bf 91       	pop	r27
     8c0:	af 91       	pop	r26
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	7f 91       	pop	r23
     8c8:	6f 91       	pop	r22
     8ca:	5f 91       	pop	r21
     8cc:	4f 91       	pop	r20
     8ce:	3f 91       	pop	r19
     8d0:	2f 91       	pop	r18
     8d2:	0f 90       	pop	r0
     8d4:	0b be       	out	0x3b, r0	; 59
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f 90       	pop	r0
     8dc:	1f 90       	pop	r1
     8de:	18 95       	reti

000008e0 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     8e0:	1f 92       	push	r1
     8e2:	0f 92       	push	r0
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	0f 92       	push	r0
     8e8:	11 24       	eor	r1, r1
     8ea:	0b b6       	in	r0, 0x3b	; 59
     8ec:	0f 92       	push	r0
     8ee:	2f 93       	push	r18
     8f0:	3f 93       	push	r19
     8f2:	4f 93       	push	r20
     8f4:	5f 93       	push	r21
     8f6:	6f 93       	push	r22
     8f8:	7f 93       	push	r23
     8fa:	8f 93       	push	r24
     8fc:	9f 93       	push	r25
     8fe:	af 93       	push	r26
     900:	bf 93       	push	r27
     902:	ef 93       	push	r30
     904:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     906:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     90a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     90e:	e0 91 2f 24 	lds	r30, 0x242F	; 0x80242f <adca_callback>
     912:	f0 91 30 24 	lds	r31, 0x2430	; 0x802430 <adca_callback+0x1>
     916:	64 e0       	ldi	r22, 0x04	; 4
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	19 95       	eicall
}
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	0f 90       	pop	r0
     938:	0b be       	out	0x3b, r0	; 59
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	0b b6       	in	r0, 0x3b	; 59
     950:	0f 92       	push	r0
     952:	2f 93       	push	r18
     954:	3f 93       	push	r19
     956:	4f 93       	push	r20
     958:	5f 93       	push	r21
     95a:	6f 93       	push	r22
     95c:	7f 93       	push	r23
     95e:	8f 93       	push	r24
     960:	9f 93       	push	r25
     962:	af 93       	push	r26
     964:	bf 93       	push	r27
     966:	ef 93       	push	r30
     968:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     96a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     96e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     972:	e0 91 2f 24 	lds	r30, 0x242F	; 0x80242f <adca_callback>
     976:	f0 91 30 24 	lds	r31, 0x2430	; 0x802430 <adca_callback+0x1>
     97a:	68 e0       	ldi	r22, 0x08	; 8
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	19 95       	eicall
}
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	0f 90       	pop	r0
     99c:	0b be       	out	0x3b, r0	; 59
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	0b b6       	in	r0, 0x3b	; 59
     9b4:	0f 92       	push	r0
     9b6:	2f 93       	push	r18
     9b8:	3f 93       	push	r19
     9ba:	4f 93       	push	r20
     9bc:	5f 93       	push	r21
     9be:	6f 93       	push	r22
     9c0:	7f 93       	push	r23
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
     9c6:	af 93       	push	r26
     9c8:	bf 93       	push	r27
     9ca:	ef 93       	push	r30
     9cc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     9ce:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     9d2:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     9d6:	e0 91 2d 24 	lds	r30, 0x242D	; 0x80242d <adcb_callback>
     9da:	f0 91 2e 24 	lds	r31, 0x242E	; 0x80242e <adcb_callback+0x1>
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	80 e4       	ldi	r24, 0x40	; 64
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	19 95       	eicall
}
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	7f 91       	pop	r23
     9f4:	6f 91       	pop	r22
     9f6:	5f 91       	pop	r21
     9f8:	4f 91       	pop	r20
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	0f 90       	pop	r0
     a00:	0b be       	out	0x3b, r0	; 59
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	0b b6       	in	r0, 0x3b	; 59
     a18:	0f 92       	push	r0
     a1a:	2f 93       	push	r18
     a1c:	3f 93       	push	r19
     a1e:	4f 93       	push	r20
     a20:	5f 93       	push	r21
     a22:	6f 93       	push	r22
     a24:	7f 93       	push	r23
     a26:	8f 93       	push	r24
     a28:	9f 93       	push	r25
     a2a:	af 93       	push	r26
     a2c:	bf 93       	push	r27
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     a32:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     a36:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     a3a:	e0 91 2d 24 	lds	r30, 0x242D	; 0x80242d <adcb_callback>
     a3e:	f0 91 2e 24 	lds	r31, 0x242E	; 0x80242e <adcb_callback+0x1>
     a42:	62 e0       	ldi	r22, 0x02	; 2
     a44:	80 e4       	ldi	r24, 0x40	; 64
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	19 95       	eicall
}
     a4a:	ff 91       	pop	r31
     a4c:	ef 91       	pop	r30
     a4e:	bf 91       	pop	r27
     a50:	af 91       	pop	r26
     a52:	9f 91       	pop	r25
     a54:	8f 91       	pop	r24
     a56:	7f 91       	pop	r23
     a58:	6f 91       	pop	r22
     a5a:	5f 91       	pop	r21
     a5c:	4f 91       	pop	r20
     a5e:	3f 91       	pop	r19
     a60:	2f 91       	pop	r18
     a62:	0f 90       	pop	r0
     a64:	0b be       	out	0x3b, r0	; 59
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	0b b6       	in	r0, 0x3b	; 59
     a7c:	0f 92       	push	r0
     a7e:	2f 93       	push	r18
     a80:	3f 93       	push	r19
     a82:	4f 93       	push	r20
     a84:	5f 93       	push	r21
     a86:	6f 93       	push	r22
     a88:	7f 93       	push	r23
     a8a:	8f 93       	push	r24
     a8c:	9f 93       	push	r25
     a8e:	af 93       	push	r26
     a90:	bf 93       	push	r27
     a92:	ef 93       	push	r30
     a94:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     a96:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     a9a:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     a9e:	e0 91 2d 24 	lds	r30, 0x242D	; 0x80242d <adcb_callback>
     aa2:	f0 91 2e 24 	lds	r31, 0x242E	; 0x80242e <adcb_callback+0x1>
     aa6:	64 e0       	ldi	r22, 0x04	; 4
     aa8:	80 e4       	ldi	r24, 0x40	; 64
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	19 95       	eicall
}
     aae:	ff 91       	pop	r31
     ab0:	ef 91       	pop	r30
     ab2:	bf 91       	pop	r27
     ab4:	af 91       	pop	r26
     ab6:	9f 91       	pop	r25
     ab8:	8f 91       	pop	r24
     aba:	7f 91       	pop	r23
     abc:	6f 91       	pop	r22
     abe:	5f 91       	pop	r21
     ac0:	4f 91       	pop	r20
     ac2:	3f 91       	pop	r19
     ac4:	2f 91       	pop	r18
     ac6:	0f 90       	pop	r0
     ac8:	0b be       	out	0x3b, r0	; 59
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	0b b6       	in	r0, 0x3b	; 59
     ae0:	0f 92       	push	r0
     ae2:	2f 93       	push	r18
     ae4:	3f 93       	push	r19
     ae6:	4f 93       	push	r20
     ae8:	5f 93       	push	r21
     aea:	6f 93       	push	r22
     aec:	7f 93       	push	r23
     aee:	8f 93       	push	r24
     af0:	9f 93       	push	r25
     af2:	af 93       	push	r26
     af4:	bf 93       	push	r27
     af6:	ef 93       	push	r30
     af8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     afa:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     afe:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     b02:	e0 91 2d 24 	lds	r30, 0x242D	; 0x80242d <adcb_callback>
     b06:	f0 91 2e 24 	lds	r31, 0x242E	; 0x80242e <adcb_callback+0x1>
     b0a:	68 e0       	ldi	r22, 0x08	; 8
     b0c:	80 e4       	ldi	r24, 0x40	; 64
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	19 95       	eicall
}
     b12:	ff 91       	pop	r31
     b14:	ef 91       	pop	r30
     b16:	bf 91       	pop	r27
     b18:	af 91       	pop	r26
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	7f 91       	pop	r23
     b20:	6f 91       	pop	r22
     b22:	5f 91       	pop	r21
     b24:	4f 91       	pop	r20
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	0f 90       	pop	r0
     b2c:	0b be       	out	0x3b, r0	; 59
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     b38:	bf 92       	push	r11
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	1f 92       	push	r1
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	8c 01       	movw	r16, r24
     b52:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     b54:	81 15       	cp	r24, r1
     b56:	22 e0       	ldi	r18, 0x02	; 2
     b58:	92 07       	cpc	r25, r18
     b5a:	81 f4       	brne	.+32     	; 0xb7c <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     b5c:	61 e2       	ldi	r22, 0x21	; 33
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	0e 94 77 23 	call	0x46ee	; 0x46ee <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     b66:	c8 2e       	mov	r12, r24
     b68:	d1 2c       	mov	r13, r1
     b6a:	60 e2       	ldi	r22, 0x20	; 32
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 77 23 	call	0x46ee	; 0x46ee <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     b74:	dc 2c       	mov	r13, r12
     b76:	cc 24       	eor	r12, r12
     b78:	c8 2a       	or	r12, r24
     b7a:	12 c0       	rjmp	.+36     	; 0xba0 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     b7c:	80 34       	cpi	r24, 0x40	; 64
     b7e:	92 40       	sbci	r25, 0x02	; 2
     b80:	d1 f5       	brne	.+116    	; 0xbf6 <adc_write_configuration+0xbe>
     b82:	65 e2       	ldi	r22, 0x25	; 37
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	0e 94 77 23 	call	0x46ee	; 0x46ee <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     b8c:	c8 2e       	mov	r12, r24
     b8e:	d1 2c       	mov	r13, r1
     b90:	64 e2       	ldi	r22, 0x24	; 36
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	0e 94 77 23 	call	0x46ee	; 0x46ee <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     b9a:	dc 2c       	mov	r13, r12
     b9c:	cc 24       	eor	r12, r12
     b9e:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ba0:	8f b7       	in	r24, 0x3f	; 63
     ba2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ba4:	f8 94       	cli
	return flags;
     ba6:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     ba8:	c8 01       	movw	r24, r16
     baa:	ca dd       	rcall	.-1132   	; 0x740 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     bac:	f8 01       	movw	r30, r16
     bae:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	90 83       	st	Z, r25
	adc->CAL = cal;
     bb4:	c4 86       	std	Z+12, r12	; 0x0c
     bb6:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     bb8:	f7 01       	movw	r30, r14
     bba:	25 81       	ldd	r18, Z+5	; 0x05
     bbc:	36 81       	ldd	r19, Z+6	; 0x06
     bbe:	f8 01       	movw	r30, r16
     bc0:	20 8f       	std	Z+24, r18	; 0x18
     bc2:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     bc4:	f7 01       	movw	r30, r14
     bc6:	92 81       	ldd	r25, Z+2	; 0x02
     bc8:	f8 01       	movw	r30, r16
     bca:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     bcc:	f7 01       	movw	r30, r14
     bce:	94 81       	ldd	r25, Z+4	; 0x04
     bd0:	f8 01       	movw	r30, r16
     bd2:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     bd4:	f7 01       	movw	r30, r14
     bd6:	93 81       	ldd	r25, Z+3	; 0x03
     bd8:	f8 01       	movw	r30, r16
     bda:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     bdc:	f7 01       	movw	r30, r14
     bde:	91 81       	ldd	r25, Z+1	; 0x01
     be0:	f8 01       	movw	r30, r16
     be2:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     be4:	81 70       	andi	r24, 0x01	; 1
     be6:	f7 01       	movw	r30, r14
     be8:	90 81       	ld	r25, Z
     bea:	89 2b       	or	r24, r25
     bec:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     bee:	80 83       	st	Z, r24
     bf0:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bf2:	c7 dd       	rcall	.-1138   	; 0x782 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     bf4:	bf be       	out	0x3f, r11	; 63
     bf6:	0f 90       	pop	r0
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	cf 90       	pop	r12
     c08:	bf 90       	pop	r11
     c0a:	08 95       	ret

00000c0c <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	1f 92       	push	r1
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	8c 01       	movw	r16, r24
     c22:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c24:	8f b7       	in	r24, 0x3f	; 63
     c26:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c28:	f8 94       	cli
	return flags;
     c2a:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     c2c:	c8 01       	movw	r24, r16
     c2e:	88 dd       	rcall	.-1264   	; 0x740 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     c30:	f8 01       	movw	r30, r16
     c32:	80 81       	ld	r24, Z
     c34:	80 7c       	andi	r24, 0xC0	; 192
     c36:	f7 01       	movw	r30, r14
     c38:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     c3a:	f8 01       	movw	r30, r16
     c3c:	80 8d       	ldd	r24, Z+24	; 0x18
     c3e:	91 8d       	ldd	r25, Z+25	; 0x19
     c40:	f7 01       	movw	r30, r14
     c42:	85 83       	std	Z+5, r24	; 0x05
     c44:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     c46:	f8 01       	movw	r30, r16
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	f7 01       	movw	r30, r14
     c4c:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     c4e:	f8 01       	movw	r30, r16
     c50:	84 81       	ldd	r24, Z+4	; 0x04
     c52:	f7 01       	movw	r30, r14
     c54:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     c56:	f8 01       	movw	r30, r16
     c58:	83 81       	ldd	r24, Z+3	; 0x03
     c5a:	f7 01       	movw	r30, r14
     c5c:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     c5e:	f8 01       	movw	r30, r16
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     c64:	81 83       	std	Z+1, r24	; 0x01
     c66:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c68:	8c dd       	rcall	.-1256   	; 0x782 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     c6a:	df be       	out	0x3f, r13	; 63
     c6c:	0f 90       	pop	r0
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	08 95       	ret

00000c7e <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     c7e:	af 92       	push	r10
     c80:	bf 92       	push	r11
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	1f 92       	push	r1
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	6c 01       	movw	r12, r24
     c9a:	b6 2e       	mov	r11, r22
     c9c:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c9e:	86 2f       	mov	r24, r22
     ca0:	83 70       	andi	r24, 0x03	; 3
     ca2:	29 f4       	brne	.+10     	; 0xcae <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     ca4:	96 2f       	mov	r25, r22
     ca6:	96 95       	lsr	r25
     ca8:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     cae:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     cb2:	90 ff       	sbrs	r25, 0
		index++;
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     cb6:	86 01       	movw	r16, r12
     cb8:	00 5e       	subi	r16, 0xE0	; 224
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	98 e0       	ldi	r25, 0x08	; 8
     cbe:	89 9f       	mul	r24, r25
     cc0:	00 0d       	add	r16, r0
     cc2:	11 1d       	adc	r17, r1
     cc4:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cc6:	8f b7       	in	r24, 0x3f	; 63
     cc8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     cca:	f8 94       	cli
	return flags;
     ccc:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     cce:	c6 01       	movw	r24, r12
     cd0:	37 dd       	rcall	.-1426   	; 0x740 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     cd2:	f7 01       	movw	r30, r14
     cd4:	80 81       	ld	r24, Z
     cd6:	f8 01       	movw	r30, r16
     cd8:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     cda:	f7 01       	movw	r30, r14
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	f8 01       	movw	r30, r16
     ce0:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     ce2:	f7 01       	movw	r30, r14
     ce4:	81 81       	ldd	r24, Z+1	; 0x01
     ce6:	f8 01       	movw	r30, r16
     ce8:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     cea:	b0 fe       	sbrs	r11, 0
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     cee:	f7 01       	movw	r30, r14
     cf0:	83 81       	ldd	r24, Z+3	; 0x03
     cf2:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     cf4:	86 83       	std	Z+6, r24	; 0x06
     cf6:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cf8:	44 dd       	rcall	.-1400   	; 0x782 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     cfa:	af be       	out	0x3f, r10	; 63
     cfc:	0f 90       	pop	r0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	af 90       	pop	r10
     d12:	08 95       	ret

00000d14 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	1f 92       	push	r1
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	6c 01       	movw	r12, r24
     d30:	b6 2e       	mov	r11, r22
     d32:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     d34:	86 2f       	mov	r24, r22
     d36:	83 70       	andi	r24, 0x03	; 3
     d38:	29 f4       	brne	.+10     	; 0xd44 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     d3a:	96 2f       	mov	r25, r22
     d3c:	96 95       	lsr	r25
     d3e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     d44:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     d46:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     d48:	90 ff       	sbrs	r25, 0
		index++;
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     d4c:	86 01       	movw	r16, r12
     d4e:	00 5e       	subi	r16, 0xE0	; 224
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
     d52:	98 e0       	ldi	r25, 0x08	; 8
     d54:	89 9f       	mul	r24, r25
     d56:	00 0d       	add	r16, r0
     d58:	11 1d       	adc	r17, r1
     d5a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d5c:	8f b7       	in	r24, 0x3f	; 63
     d5e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d60:	f8 94       	cli
	return flags;
     d62:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     d64:	c6 01       	movw	r24, r12
     d66:	ec dc       	rcall	.-1576   	; 0x740 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     d68:	f8 01       	movw	r30, r16
     d6a:	80 81       	ld	r24, Z
     d6c:	f7 01       	movw	r30, r14
     d6e:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     d70:	f8 01       	movw	r30, r16
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	f7 01       	movw	r30, r14
     d76:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     d78:	f8 01       	movw	r30, r16
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	f7 01       	movw	r30, r14
     d7e:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     d80:	b0 fe       	sbrs	r11, 0
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     d84:	f8 01       	movw	r30, r16
     d86:	86 81       	ldd	r24, Z+6	; 0x06
     d88:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     d8a:	83 83       	std	Z+3, r24	; 0x03
     d8c:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d8e:	f9 dc       	rcall	.-1550   	; 0x782 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     d90:	af be       	out	0x3f, r10	; 63
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	bf 90       	pop	r11
     da6:	af 90       	pop	r10
     da8:	08 95       	ret

00000daa <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	0b b6       	in	r0, 0x3b	; 59
     db6:	0f 92       	push	r0
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	4f 93       	push	r20
     dbe:	5f 93       	push	r21
     dc0:	6f 93       	push	r22
     dc2:	7f 93       	push	r23
     dc4:	8f 93       	push	r24
     dc6:	9f 93       	push	r25
     dc8:	af 93       	push	r26
     dca:	bf 93       	push	r27
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     dd0:	e0 91 83 21 	lds	r30, 0x2183	; 0x802183 <tc_tcc0_ovf_callback>
     dd4:	f0 91 84 21 	lds	r31, 0x2184	; 0x802184 <tc_tcc0_ovf_callback+0x1>
     dd8:	30 97       	sbiw	r30, 0x00	; 0
     dda:	09 f0       	breq	.+2      	; 0xdde <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     ddc:	19 95       	eicall
	}
}
     dde:	ff 91       	pop	r31
     de0:	ef 91       	pop	r30
     de2:	bf 91       	pop	r27
     de4:	af 91       	pop	r26
     de6:	9f 91       	pop	r25
     de8:	8f 91       	pop	r24
     dea:	7f 91       	pop	r23
     dec:	6f 91       	pop	r22
     dee:	5f 91       	pop	r21
     df0:	4f 91       	pop	r20
     df2:	3f 91       	pop	r19
     df4:	2f 91       	pop	r18
     df6:	0f 90       	pop	r0
     df8:	0b be       	out	0x3b, r0	; 59
     dfa:	0f 90       	pop	r0
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	0f 90       	pop	r0
     e00:	1f 90       	pop	r1
     e02:	18 95       	reti

00000e04 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     e04:	1f 92       	push	r1
     e06:	0f 92       	push	r0
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	0f 92       	push	r0
     e0c:	11 24       	eor	r1, r1
     e0e:	0b b6       	in	r0, 0x3b	; 59
     e10:	0f 92       	push	r0
     e12:	2f 93       	push	r18
     e14:	3f 93       	push	r19
     e16:	4f 93       	push	r20
     e18:	5f 93       	push	r21
     e1a:	6f 93       	push	r22
     e1c:	7f 93       	push	r23
     e1e:	8f 93       	push	r24
     e20:	9f 93       	push	r25
     e22:	af 93       	push	r26
     e24:	bf 93       	push	r27
     e26:	ef 93       	push	r30
     e28:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     e2a:	e0 91 81 21 	lds	r30, 0x2181	; 0x802181 <tc_tcc0_err_callback>
     e2e:	f0 91 82 21 	lds	r31, 0x2182	; 0x802182 <tc_tcc0_err_callback+0x1>
     e32:	30 97       	sbiw	r30, 0x00	; 0
     e34:	09 f0       	breq	.+2      	; 0xe38 <__vector_15+0x34>
		tc_tcc0_err_callback();
     e36:	19 95       	eicall
	}
}
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	7f 91       	pop	r23
     e46:	6f 91       	pop	r22
     e48:	5f 91       	pop	r21
     e4a:	4f 91       	pop	r20
     e4c:	3f 91       	pop	r19
     e4e:	2f 91       	pop	r18
     e50:	0f 90       	pop	r0
     e52:	0b be       	out	0x3b, r0	; 59
     e54:	0f 90       	pop	r0
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	0f 90       	pop	r0
     e5a:	1f 90       	pop	r1
     e5c:	18 95       	reti

00000e5e <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     e5e:	1f 92       	push	r1
     e60:	0f 92       	push	r0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	0f 92       	push	r0
     e66:	11 24       	eor	r1, r1
     e68:	0b b6       	in	r0, 0x3b	; 59
     e6a:	0f 92       	push	r0
     e6c:	2f 93       	push	r18
     e6e:	3f 93       	push	r19
     e70:	4f 93       	push	r20
     e72:	5f 93       	push	r21
     e74:	6f 93       	push	r22
     e76:	7f 93       	push	r23
     e78:	8f 93       	push	r24
     e7a:	9f 93       	push	r25
     e7c:	af 93       	push	r26
     e7e:	bf 93       	push	r27
     e80:	ef 93       	push	r30
     e82:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     e84:	e0 91 7f 21 	lds	r30, 0x217F	; 0x80217f <tc_tcc0_cca_callback>
     e88:	f0 91 80 21 	lds	r31, 0x2180	; 0x802180 <tc_tcc0_cca_callback+0x1>
     e8c:	30 97       	sbiw	r30, 0x00	; 0
     e8e:	09 f0       	breq	.+2      	; 0xe92 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     e90:	19 95       	eicall
	}
}
     e92:	ff 91       	pop	r31
     e94:	ef 91       	pop	r30
     e96:	bf 91       	pop	r27
     e98:	af 91       	pop	r26
     e9a:	9f 91       	pop	r25
     e9c:	8f 91       	pop	r24
     e9e:	7f 91       	pop	r23
     ea0:	6f 91       	pop	r22
     ea2:	5f 91       	pop	r21
     ea4:	4f 91       	pop	r20
     ea6:	3f 91       	pop	r19
     ea8:	2f 91       	pop	r18
     eaa:	0f 90       	pop	r0
     eac:	0b be       	out	0x3b, r0	; 59
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	0b b6       	in	r0, 0x3b	; 59
     ec4:	0f 92       	push	r0
     ec6:	2f 93       	push	r18
     ec8:	3f 93       	push	r19
     eca:	4f 93       	push	r20
     ecc:	5f 93       	push	r21
     ece:	6f 93       	push	r22
     ed0:	7f 93       	push	r23
     ed2:	8f 93       	push	r24
     ed4:	9f 93       	push	r25
     ed6:	af 93       	push	r26
     ed8:	bf 93       	push	r27
     eda:	ef 93       	push	r30
     edc:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     ede:	e0 91 7d 21 	lds	r30, 0x217D	; 0x80217d <tc_tcc0_ccb_callback>
     ee2:	f0 91 7e 21 	lds	r31, 0x217E	; 0x80217e <tc_tcc0_ccb_callback+0x1>
     ee6:	30 97       	sbiw	r30, 0x00	; 0
     ee8:	09 f0       	breq	.+2      	; 0xeec <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     eea:	19 95       	eicall
	}
}
     eec:	ff 91       	pop	r31
     eee:	ef 91       	pop	r30
     ef0:	bf 91       	pop	r27
     ef2:	af 91       	pop	r26
     ef4:	9f 91       	pop	r25
     ef6:	8f 91       	pop	r24
     ef8:	7f 91       	pop	r23
     efa:	6f 91       	pop	r22
     efc:	5f 91       	pop	r21
     efe:	4f 91       	pop	r20
     f00:	3f 91       	pop	r19
     f02:	2f 91       	pop	r18
     f04:	0f 90       	pop	r0
     f06:	0b be       	out	0x3b, r0	; 59
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	0b b6       	in	r0, 0x3b	; 59
     f1e:	0f 92       	push	r0
     f20:	2f 93       	push	r18
     f22:	3f 93       	push	r19
     f24:	4f 93       	push	r20
     f26:	5f 93       	push	r21
     f28:	6f 93       	push	r22
     f2a:	7f 93       	push	r23
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     f38:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <tc_tcc0_ccc_callback>
     f3c:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <tc_tcc0_ccc_callback+0x1>
     f40:	30 97       	sbiw	r30, 0x00	; 0
     f42:	09 f0       	breq	.+2      	; 0xf46 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     f44:	19 95       	eicall
	}
}
     f46:	ff 91       	pop	r31
     f48:	ef 91       	pop	r30
     f4a:	bf 91       	pop	r27
     f4c:	af 91       	pop	r26
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	7f 91       	pop	r23
     f54:	6f 91       	pop	r22
     f56:	5f 91       	pop	r21
     f58:	4f 91       	pop	r20
     f5a:	3f 91       	pop	r19
     f5c:	2f 91       	pop	r18
     f5e:	0f 90       	pop	r0
     f60:	0b be       	out	0x3b, r0	; 59
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	0b b6       	in	r0, 0x3b	; 59
     f78:	0f 92       	push	r0
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     f92:	e0 91 79 21 	lds	r30, 0x2179	; 0x802179 <tc_tcc0_ccd_callback>
     f96:	f0 91 7a 21 	lds	r31, 0x217A	; 0x80217a <tc_tcc0_ccd_callback+0x1>
     f9a:	30 97       	sbiw	r30, 0x00	; 0
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     f9e:	19 95       	eicall
	}
}
     fa0:	ff 91       	pop	r31
     fa2:	ef 91       	pop	r30
     fa4:	bf 91       	pop	r27
     fa6:	af 91       	pop	r26
     fa8:	9f 91       	pop	r25
     faa:	8f 91       	pop	r24
     fac:	7f 91       	pop	r23
     fae:	6f 91       	pop	r22
     fb0:	5f 91       	pop	r21
     fb2:	4f 91       	pop	r20
     fb4:	3f 91       	pop	r19
     fb6:	2f 91       	pop	r18
     fb8:	0f 90       	pop	r0
     fba:	0b be       	out	0x3b, r0	; 59
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	0b b6       	in	r0, 0x3b	; 59
     fd2:	0f 92       	push	r0
     fd4:	2f 93       	push	r18
     fd6:	3f 93       	push	r19
     fd8:	4f 93       	push	r20
     fda:	5f 93       	push	r21
     fdc:	6f 93       	push	r22
     fde:	7f 93       	push	r23
     fe0:	8f 93       	push	r24
     fe2:	9f 93       	push	r25
     fe4:	af 93       	push	r26
     fe6:	bf 93       	push	r27
     fe8:	ef 93       	push	r30
     fea:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     fec:	e0 91 77 21 	lds	r30, 0x2177	; 0x802177 <tc_tcc1_ovf_callback>
     ff0:	f0 91 78 21 	lds	r31, 0x2178	; 0x802178 <tc_tcc1_ovf_callback+0x1>
     ff4:	30 97       	sbiw	r30, 0x00	; 0
     ff6:	09 f0       	breq	.+2      	; 0xffa <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     ff8:	19 95       	eicall
	}
}
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	bf 91       	pop	r27
    1000:	af 91       	pop	r26
    1002:	9f 91       	pop	r25
    1004:	8f 91       	pop	r24
    1006:	7f 91       	pop	r23
    1008:	6f 91       	pop	r22
    100a:	5f 91       	pop	r21
    100c:	4f 91       	pop	r20
    100e:	3f 91       	pop	r19
    1010:	2f 91       	pop	r18
    1012:	0f 90       	pop	r0
    1014:	0b be       	out	0x3b, r0	; 59
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0
    101c:	1f 90       	pop	r1
    101e:	18 95       	reti

00001020 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    1020:	1f 92       	push	r1
    1022:	0f 92       	push	r0
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	0f 92       	push	r0
    1028:	11 24       	eor	r1, r1
    102a:	0b b6       	in	r0, 0x3b	; 59
    102c:	0f 92       	push	r0
    102e:	2f 93       	push	r18
    1030:	3f 93       	push	r19
    1032:	4f 93       	push	r20
    1034:	5f 93       	push	r21
    1036:	6f 93       	push	r22
    1038:	7f 93       	push	r23
    103a:	8f 93       	push	r24
    103c:	9f 93       	push	r25
    103e:	af 93       	push	r26
    1040:	bf 93       	push	r27
    1042:	ef 93       	push	r30
    1044:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1046:	e0 91 75 21 	lds	r30, 0x2175	; 0x802175 <tc_tcc1_err_callback>
    104a:	f0 91 76 21 	lds	r31, 0x2176	; 0x802176 <tc_tcc1_err_callback+0x1>
    104e:	30 97       	sbiw	r30, 0x00	; 0
    1050:	09 f0       	breq	.+2      	; 0x1054 <__vector_21+0x34>
		tc_tcc1_err_callback();
    1052:	19 95       	eicall
	}
}
    1054:	ff 91       	pop	r31
    1056:	ef 91       	pop	r30
    1058:	bf 91       	pop	r27
    105a:	af 91       	pop	r26
    105c:	9f 91       	pop	r25
    105e:	8f 91       	pop	r24
    1060:	7f 91       	pop	r23
    1062:	6f 91       	pop	r22
    1064:	5f 91       	pop	r21
    1066:	4f 91       	pop	r20
    1068:	3f 91       	pop	r19
    106a:	2f 91       	pop	r18
    106c:	0f 90       	pop	r0
    106e:	0b be       	out	0x3b, r0	; 59
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	0b b6       	in	r0, 0x3b	; 59
    1086:	0f 92       	push	r0
    1088:	2f 93       	push	r18
    108a:	3f 93       	push	r19
    108c:	4f 93       	push	r20
    108e:	5f 93       	push	r21
    1090:	6f 93       	push	r22
    1092:	7f 93       	push	r23
    1094:	8f 93       	push	r24
    1096:	9f 93       	push	r25
    1098:	af 93       	push	r26
    109a:	bf 93       	push	r27
    109c:	ef 93       	push	r30
    109e:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    10a0:	e0 91 73 21 	lds	r30, 0x2173	; 0x802173 <tc_tcc1_cca_callback>
    10a4:	f0 91 74 21 	lds	r31, 0x2174	; 0x802174 <tc_tcc1_cca_callback+0x1>
    10a8:	30 97       	sbiw	r30, 0x00	; 0
    10aa:	09 f0       	breq	.+2      	; 0x10ae <__vector_22+0x34>
		tc_tcc1_cca_callback();
    10ac:	19 95       	eicall
	}
}
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	0f 90       	pop	r0
    10c8:	0b be       	out	0x3b, r0	; 59
    10ca:	0f 90       	pop	r0
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	0f 90       	pop	r0
    10d0:	1f 90       	pop	r1
    10d2:	18 95       	reti

000010d4 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    10d4:	1f 92       	push	r1
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	0b b6       	in	r0, 0x3b	; 59
    10e0:	0f 92       	push	r0
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    10fa:	e0 91 71 21 	lds	r30, 0x2171	; 0x802171 <tc_tcc1_ccb_callback>
    10fe:	f0 91 72 21 	lds	r31, 0x2172	; 0x802172 <tc_tcc1_ccb_callback+0x1>
    1102:	30 97       	sbiw	r30, 0x00	; 0
    1104:	09 f0       	breq	.+2      	; 0x1108 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    1106:	19 95       	eicall
	}
}
    1108:	ff 91       	pop	r31
    110a:	ef 91       	pop	r30
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	0f 90       	pop	r0
    1122:	0b be       	out	0x3b, r0	; 59
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    112e:	1f 92       	push	r1
    1130:	0f 92       	push	r0
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	0f 92       	push	r0
    1136:	11 24       	eor	r1, r1
    1138:	0b b6       	in	r0, 0x3b	; 59
    113a:	0f 92       	push	r0
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	ef 93       	push	r30
    1152:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1154:	e0 91 6f 21 	lds	r30, 0x216F	; 0x80216f <tc_tcd0_ovf_callback>
    1158:	f0 91 70 21 	lds	r31, 0x2170	; 0x802170 <tc_tcd0_ovf_callback+0x1>
    115c:	30 97       	sbiw	r30, 0x00	; 0
    115e:	09 f0       	breq	.+2      	; 0x1162 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    1160:	19 95       	eicall
	}
}
    1162:	ff 91       	pop	r31
    1164:	ef 91       	pop	r30
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	7f 91       	pop	r23
    1170:	6f 91       	pop	r22
    1172:	5f 91       	pop	r21
    1174:	4f 91       	pop	r20
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	0f 90       	pop	r0
    117c:	0b be       	out	0x3b, r0	; 59
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1188:	1f 92       	push	r1
    118a:	0f 92       	push	r0
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	0f 92       	push	r0
    1190:	11 24       	eor	r1, r1
    1192:	0b b6       	in	r0, 0x3b	; 59
    1194:	0f 92       	push	r0
    1196:	2f 93       	push	r18
    1198:	3f 93       	push	r19
    119a:	4f 93       	push	r20
    119c:	5f 93       	push	r21
    119e:	6f 93       	push	r22
    11a0:	7f 93       	push	r23
    11a2:	8f 93       	push	r24
    11a4:	9f 93       	push	r25
    11a6:	af 93       	push	r26
    11a8:	bf 93       	push	r27
    11aa:	ef 93       	push	r30
    11ac:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    11ae:	e0 91 6d 21 	lds	r30, 0x216D	; 0x80216d <tc_tcd0_err_callback>
    11b2:	f0 91 6e 21 	lds	r31, 0x216E	; 0x80216e <tc_tcd0_err_callback+0x1>
    11b6:	30 97       	sbiw	r30, 0x00	; 0
    11b8:	09 f0       	breq	.+2      	; 0x11bc <__vector_78+0x34>
		tc_tcd0_err_callback();
    11ba:	19 95       	eicall
	}
}
    11bc:	ff 91       	pop	r31
    11be:	ef 91       	pop	r30
    11c0:	bf 91       	pop	r27
    11c2:	af 91       	pop	r26
    11c4:	9f 91       	pop	r25
    11c6:	8f 91       	pop	r24
    11c8:	7f 91       	pop	r23
    11ca:	6f 91       	pop	r22
    11cc:	5f 91       	pop	r21
    11ce:	4f 91       	pop	r20
    11d0:	3f 91       	pop	r19
    11d2:	2f 91       	pop	r18
    11d4:	0f 90       	pop	r0
    11d6:	0b be       	out	0x3b, r0	; 59
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	0b b6       	in	r0, 0x3b	; 59
    11ee:	0f 92       	push	r0
    11f0:	2f 93       	push	r18
    11f2:	3f 93       	push	r19
    11f4:	4f 93       	push	r20
    11f6:	5f 93       	push	r21
    11f8:	6f 93       	push	r22
    11fa:	7f 93       	push	r23
    11fc:	8f 93       	push	r24
    11fe:	9f 93       	push	r25
    1200:	af 93       	push	r26
    1202:	bf 93       	push	r27
    1204:	ef 93       	push	r30
    1206:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1208:	e0 91 6b 21 	lds	r30, 0x216B	; 0x80216b <tc_tcd0_cca_callback>
    120c:	f0 91 6c 21 	lds	r31, 0x216C	; 0x80216c <tc_tcd0_cca_callback+0x1>
    1210:	30 97       	sbiw	r30, 0x00	; 0
    1212:	09 f0       	breq	.+2      	; 0x1216 <__vector_79+0x34>
		tc_tcd0_cca_callback();
    1214:	19 95       	eicall
	}
}
    1216:	ff 91       	pop	r31
    1218:	ef 91       	pop	r30
    121a:	bf 91       	pop	r27
    121c:	af 91       	pop	r26
    121e:	9f 91       	pop	r25
    1220:	8f 91       	pop	r24
    1222:	7f 91       	pop	r23
    1224:	6f 91       	pop	r22
    1226:	5f 91       	pop	r21
    1228:	4f 91       	pop	r20
    122a:	3f 91       	pop	r19
    122c:	2f 91       	pop	r18
    122e:	0f 90       	pop	r0
    1230:	0b be       	out	0x3b, r0	; 59
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0f 90       	pop	r0
    1238:	1f 90       	pop	r1
    123a:	18 95       	reti

0000123c <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    123c:	1f 92       	push	r1
    123e:	0f 92       	push	r0
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	0f 92       	push	r0
    1244:	11 24       	eor	r1, r1
    1246:	0b b6       	in	r0, 0x3b	; 59
    1248:	0f 92       	push	r0
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1262:	e0 91 69 21 	lds	r30, 0x2169	; 0x802169 <tc_tcd0_ccb_callback>
    1266:	f0 91 6a 21 	lds	r31, 0x216A	; 0x80216a <tc_tcd0_ccb_callback+0x1>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    126e:	19 95       	eicall
	}
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0b be       	out	0x3b, r0	; 59
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	0f 90       	pop	r0
    1292:	1f 90       	pop	r1
    1294:	18 95       	reti

00001296 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	0b b6       	in	r0, 0x3b	; 59
    12a2:	0f 92       	push	r0
    12a4:	2f 93       	push	r18
    12a6:	3f 93       	push	r19
    12a8:	4f 93       	push	r20
    12aa:	5f 93       	push	r21
    12ac:	6f 93       	push	r22
    12ae:	7f 93       	push	r23
    12b0:	8f 93       	push	r24
    12b2:	9f 93       	push	r25
    12b4:	af 93       	push	r26
    12b6:	bf 93       	push	r27
    12b8:	ef 93       	push	r30
    12ba:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    12bc:	e0 91 67 21 	lds	r30, 0x2167	; 0x802167 <tc_tcd0_ccc_callback>
    12c0:	f0 91 68 21 	lds	r31, 0x2168	; 0x802168 <tc_tcd0_ccc_callback+0x1>
    12c4:	30 97       	sbiw	r30, 0x00	; 0
    12c6:	09 f0       	breq	.+2      	; 0x12ca <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    12c8:	19 95       	eicall
	}
}
    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0b be       	out	0x3b, r0	; 59
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	0f 90       	pop	r0
    12ec:	1f 90       	pop	r1
    12ee:	18 95       	reti

000012f0 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    12f0:	1f 92       	push	r1
    12f2:	0f 92       	push	r0
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	0f 92       	push	r0
    12f8:	11 24       	eor	r1, r1
    12fa:	0b b6       	in	r0, 0x3b	; 59
    12fc:	0f 92       	push	r0
    12fe:	2f 93       	push	r18
    1300:	3f 93       	push	r19
    1302:	4f 93       	push	r20
    1304:	5f 93       	push	r21
    1306:	6f 93       	push	r22
    1308:	7f 93       	push	r23
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	af 93       	push	r26
    1310:	bf 93       	push	r27
    1312:	ef 93       	push	r30
    1314:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1316:	e0 91 65 21 	lds	r30, 0x2165	; 0x802165 <tc_tcd0_ccd_callback>
    131a:	f0 91 66 21 	lds	r31, 0x2166	; 0x802166 <tc_tcd0_ccd_callback+0x1>
    131e:	30 97       	sbiw	r30, 0x00	; 0
    1320:	09 f0       	breq	.+2      	; 0x1324 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    1322:	19 95       	eicall
	}
}
    1324:	ff 91       	pop	r31
    1326:	ef 91       	pop	r30
    1328:	bf 91       	pop	r27
    132a:	af 91       	pop	r26
    132c:	9f 91       	pop	r25
    132e:	8f 91       	pop	r24
    1330:	7f 91       	pop	r23
    1332:	6f 91       	pop	r22
    1334:	5f 91       	pop	r21
    1336:	4f 91       	pop	r20
    1338:	3f 91       	pop	r19
    133a:	2f 91       	pop	r18
    133c:	0f 90       	pop	r0
    133e:	0b be       	out	0x3b, r0	; 59
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	0f 90       	pop	r0
    1346:	1f 90       	pop	r1
    1348:	18 95       	reti

0000134a <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    134a:	1f 92       	push	r1
    134c:	0f 92       	push	r0
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	0f 92       	push	r0
    1352:	11 24       	eor	r1, r1
    1354:	0b b6       	in	r0, 0x3b	; 59
    1356:	0f 92       	push	r0
    1358:	2f 93       	push	r18
    135a:	3f 93       	push	r19
    135c:	4f 93       	push	r20
    135e:	5f 93       	push	r21
    1360:	6f 93       	push	r22
    1362:	7f 93       	push	r23
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
    1368:	af 93       	push	r26
    136a:	bf 93       	push	r27
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1370:	e0 91 63 21 	lds	r30, 0x2163	; 0x802163 <tc_tcd1_ovf_callback>
    1374:	f0 91 64 21 	lds	r31, 0x2164	; 0x802164 <tc_tcd1_ovf_callback+0x1>
    1378:	30 97       	sbiw	r30, 0x00	; 0
    137a:	09 f0       	breq	.+2      	; 0x137e <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    137c:	19 95       	eicall
	}
}
    137e:	ff 91       	pop	r31
    1380:	ef 91       	pop	r30
    1382:	bf 91       	pop	r27
    1384:	af 91       	pop	r26
    1386:	9f 91       	pop	r25
    1388:	8f 91       	pop	r24
    138a:	7f 91       	pop	r23
    138c:	6f 91       	pop	r22
    138e:	5f 91       	pop	r21
    1390:	4f 91       	pop	r20
    1392:	3f 91       	pop	r19
    1394:	2f 91       	pop	r18
    1396:	0f 90       	pop	r0
    1398:	0b be       	out	0x3b, r0	; 59
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	11 24       	eor	r1, r1
    13ae:	0b b6       	in	r0, 0x3b	; 59
    13b0:	0f 92       	push	r0
    13b2:	2f 93       	push	r18
    13b4:	3f 93       	push	r19
    13b6:	4f 93       	push	r20
    13b8:	5f 93       	push	r21
    13ba:	6f 93       	push	r22
    13bc:	7f 93       	push	r23
    13be:	8f 93       	push	r24
    13c0:	9f 93       	push	r25
    13c2:	af 93       	push	r26
    13c4:	bf 93       	push	r27
    13c6:	ef 93       	push	r30
    13c8:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    13ca:	e0 91 61 21 	lds	r30, 0x2161	; 0x802161 <tc_tcd1_err_callback>
    13ce:	f0 91 62 21 	lds	r31, 0x2162	; 0x802162 <tc_tcd1_err_callback+0x1>
    13d2:	30 97       	sbiw	r30, 0x00	; 0
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <__vector_84+0x34>
		tc_tcd1_err_callback();
    13d6:	19 95       	eicall
	}
}
    13d8:	ff 91       	pop	r31
    13da:	ef 91       	pop	r30
    13dc:	bf 91       	pop	r27
    13de:	af 91       	pop	r26
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	7f 91       	pop	r23
    13e6:	6f 91       	pop	r22
    13e8:	5f 91       	pop	r21
    13ea:	4f 91       	pop	r20
    13ec:	3f 91       	pop	r19
    13ee:	2f 91       	pop	r18
    13f0:	0f 90       	pop	r0
    13f2:	0b be       	out	0x3b, r0	; 59
    13f4:	0f 90       	pop	r0
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	0f 90       	pop	r0
    13fa:	1f 90       	pop	r1
    13fc:	18 95       	reti

000013fe <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    13fe:	1f 92       	push	r1
    1400:	0f 92       	push	r0
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	0f 92       	push	r0
    1406:	11 24       	eor	r1, r1
    1408:	0b b6       	in	r0, 0x3b	; 59
    140a:	0f 92       	push	r0
    140c:	2f 93       	push	r18
    140e:	3f 93       	push	r19
    1410:	4f 93       	push	r20
    1412:	5f 93       	push	r21
    1414:	6f 93       	push	r22
    1416:	7f 93       	push	r23
    1418:	8f 93       	push	r24
    141a:	9f 93       	push	r25
    141c:	af 93       	push	r26
    141e:	bf 93       	push	r27
    1420:	ef 93       	push	r30
    1422:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1424:	e0 91 5f 21 	lds	r30, 0x215F	; 0x80215f <tc_tcd1_cca_callback>
    1428:	f0 91 60 21 	lds	r31, 0x2160	; 0x802160 <tc_tcd1_cca_callback+0x1>
    142c:	30 97       	sbiw	r30, 0x00	; 0
    142e:	09 f0       	breq	.+2      	; 0x1432 <__vector_85+0x34>
		tc_tcd1_cca_callback();
    1430:	19 95       	eicall
	}
}
    1432:	ff 91       	pop	r31
    1434:	ef 91       	pop	r30
    1436:	bf 91       	pop	r27
    1438:	af 91       	pop	r26
    143a:	9f 91       	pop	r25
    143c:	8f 91       	pop	r24
    143e:	7f 91       	pop	r23
    1440:	6f 91       	pop	r22
    1442:	5f 91       	pop	r21
    1444:	4f 91       	pop	r20
    1446:	3f 91       	pop	r19
    1448:	2f 91       	pop	r18
    144a:	0f 90       	pop	r0
    144c:	0b be       	out	0x3b, r0	; 59
    144e:	0f 90       	pop	r0
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	0f 90       	pop	r0
    1454:	1f 90       	pop	r1
    1456:	18 95       	reti

00001458 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1458:	1f 92       	push	r1
    145a:	0f 92       	push	r0
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	0f 92       	push	r0
    1460:	11 24       	eor	r1, r1
    1462:	0b b6       	in	r0, 0x3b	; 59
    1464:	0f 92       	push	r0
    1466:	2f 93       	push	r18
    1468:	3f 93       	push	r19
    146a:	4f 93       	push	r20
    146c:	5f 93       	push	r21
    146e:	6f 93       	push	r22
    1470:	7f 93       	push	r23
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	af 93       	push	r26
    1478:	bf 93       	push	r27
    147a:	ef 93       	push	r30
    147c:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    147e:	e0 91 5d 21 	lds	r30, 0x215D	; 0x80215d <tc_tcd1_ccb_callback>
    1482:	f0 91 5e 21 	lds	r31, 0x215E	; 0x80215e <tc_tcd1_ccb_callback+0x1>
    1486:	30 97       	sbiw	r30, 0x00	; 0
    1488:	09 f0       	breq	.+2      	; 0x148c <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    148a:	19 95       	eicall
	}
}
    148c:	ff 91       	pop	r31
    148e:	ef 91       	pop	r30
    1490:	bf 91       	pop	r27
    1492:	af 91       	pop	r26
    1494:	9f 91       	pop	r25
    1496:	8f 91       	pop	r24
    1498:	7f 91       	pop	r23
    149a:	6f 91       	pop	r22
    149c:	5f 91       	pop	r21
    149e:	4f 91       	pop	r20
    14a0:	3f 91       	pop	r19
    14a2:	2f 91       	pop	r18
    14a4:	0f 90       	pop	r0
    14a6:	0b be       	out	0x3b, r0	; 59
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	0f 90       	pop	r0
    14ae:	1f 90       	pop	r1
    14b0:	18 95       	reti

000014b2 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    14b2:	1f 92       	push	r1
    14b4:	0f 92       	push	r0
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	0f 92       	push	r0
    14ba:	11 24       	eor	r1, r1
    14bc:	0b b6       	in	r0, 0x3b	; 59
    14be:	0f 92       	push	r0
    14c0:	2f 93       	push	r18
    14c2:	3f 93       	push	r19
    14c4:	4f 93       	push	r20
    14c6:	5f 93       	push	r21
    14c8:	6f 93       	push	r22
    14ca:	7f 93       	push	r23
    14cc:	8f 93       	push	r24
    14ce:	9f 93       	push	r25
    14d0:	af 93       	push	r26
    14d2:	bf 93       	push	r27
    14d4:	ef 93       	push	r30
    14d6:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    14d8:	e0 91 5b 21 	lds	r30, 0x215B	; 0x80215b <tc_tce0_ovf_callback>
    14dc:	f0 91 5c 21 	lds	r31, 0x215C	; 0x80215c <tc_tce0_ovf_callback+0x1>
    14e0:	30 97       	sbiw	r30, 0x00	; 0
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    14e4:	19 95       	eicall
	}
}
    14e6:	ff 91       	pop	r31
    14e8:	ef 91       	pop	r30
    14ea:	bf 91       	pop	r27
    14ec:	af 91       	pop	r26
    14ee:	9f 91       	pop	r25
    14f0:	8f 91       	pop	r24
    14f2:	7f 91       	pop	r23
    14f4:	6f 91       	pop	r22
    14f6:	5f 91       	pop	r21
    14f8:	4f 91       	pop	r20
    14fa:	3f 91       	pop	r19
    14fc:	2f 91       	pop	r18
    14fe:	0f 90       	pop	r0
    1500:	0b be       	out	0x3b, r0	; 59
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	0f 90       	pop	r0
    1508:	1f 90       	pop	r1
    150a:	18 95       	reti

0000150c <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	0b b6       	in	r0, 0x3b	; 59
    1518:	0f 92       	push	r0
    151a:	2f 93       	push	r18
    151c:	3f 93       	push	r19
    151e:	4f 93       	push	r20
    1520:	5f 93       	push	r21
    1522:	6f 93       	push	r22
    1524:	7f 93       	push	r23
    1526:	8f 93       	push	r24
    1528:	9f 93       	push	r25
    152a:	af 93       	push	r26
    152c:	bf 93       	push	r27
    152e:	ef 93       	push	r30
    1530:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1532:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <tc_tce0_err_callback>
    1536:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <tc_tce0_err_callback+0x1>
    153a:	30 97       	sbiw	r30, 0x00	; 0
    153c:	09 f0       	breq	.+2      	; 0x1540 <__vector_48+0x34>
		tc_tce0_err_callback();
    153e:	19 95       	eicall
	}
}
    1540:	ff 91       	pop	r31
    1542:	ef 91       	pop	r30
    1544:	bf 91       	pop	r27
    1546:	af 91       	pop	r26
    1548:	9f 91       	pop	r25
    154a:	8f 91       	pop	r24
    154c:	7f 91       	pop	r23
    154e:	6f 91       	pop	r22
    1550:	5f 91       	pop	r21
    1552:	4f 91       	pop	r20
    1554:	3f 91       	pop	r19
    1556:	2f 91       	pop	r18
    1558:	0f 90       	pop	r0
    155a:	0b be       	out	0x3b, r0	; 59
    155c:	0f 90       	pop	r0
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	0f 90       	pop	r0
    1562:	1f 90       	pop	r1
    1564:	18 95       	reti

00001566 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1566:	1f 92       	push	r1
    1568:	0f 92       	push	r0
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	0f 92       	push	r0
    156e:	11 24       	eor	r1, r1
    1570:	0b b6       	in	r0, 0x3b	; 59
    1572:	0f 92       	push	r0
    1574:	2f 93       	push	r18
    1576:	3f 93       	push	r19
    1578:	4f 93       	push	r20
    157a:	5f 93       	push	r21
    157c:	6f 93       	push	r22
    157e:	7f 93       	push	r23
    1580:	8f 93       	push	r24
    1582:	9f 93       	push	r25
    1584:	af 93       	push	r26
    1586:	bf 93       	push	r27
    1588:	ef 93       	push	r30
    158a:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    158c:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <tc_tce0_cca_callback>
    1590:	f0 91 58 21 	lds	r31, 0x2158	; 0x802158 <tc_tce0_cca_callback+0x1>
    1594:	30 97       	sbiw	r30, 0x00	; 0
    1596:	09 f0       	breq	.+2      	; 0x159a <__vector_49+0x34>
		tc_tce0_cca_callback();
    1598:	19 95       	eicall
	}
}
    159a:	ff 91       	pop	r31
    159c:	ef 91       	pop	r30
    159e:	bf 91       	pop	r27
    15a0:	af 91       	pop	r26
    15a2:	9f 91       	pop	r25
    15a4:	8f 91       	pop	r24
    15a6:	7f 91       	pop	r23
    15a8:	6f 91       	pop	r22
    15aa:	5f 91       	pop	r21
    15ac:	4f 91       	pop	r20
    15ae:	3f 91       	pop	r19
    15b0:	2f 91       	pop	r18
    15b2:	0f 90       	pop	r0
    15b4:	0b be       	out	0x3b, r0	; 59
    15b6:	0f 90       	pop	r0
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	0f 90       	pop	r0
    15bc:	1f 90       	pop	r1
    15be:	18 95       	reti

000015c0 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    15c0:	1f 92       	push	r1
    15c2:	0f 92       	push	r0
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	0f 92       	push	r0
    15c8:	11 24       	eor	r1, r1
    15ca:	0b b6       	in	r0, 0x3b	; 59
    15cc:	0f 92       	push	r0
    15ce:	2f 93       	push	r18
    15d0:	3f 93       	push	r19
    15d2:	4f 93       	push	r20
    15d4:	5f 93       	push	r21
    15d6:	6f 93       	push	r22
    15d8:	7f 93       	push	r23
    15da:	8f 93       	push	r24
    15dc:	9f 93       	push	r25
    15de:	af 93       	push	r26
    15e0:	bf 93       	push	r27
    15e2:	ef 93       	push	r30
    15e4:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    15e6:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <tc_tce0_ccb_callback>
    15ea:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <tc_tce0_ccb_callback+0x1>
    15ee:	30 97       	sbiw	r30, 0x00	; 0
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    15f2:	19 95       	eicall
	}
}
    15f4:	ff 91       	pop	r31
    15f6:	ef 91       	pop	r30
    15f8:	bf 91       	pop	r27
    15fa:	af 91       	pop	r26
    15fc:	9f 91       	pop	r25
    15fe:	8f 91       	pop	r24
    1600:	7f 91       	pop	r23
    1602:	6f 91       	pop	r22
    1604:	5f 91       	pop	r21
    1606:	4f 91       	pop	r20
    1608:	3f 91       	pop	r19
    160a:	2f 91       	pop	r18
    160c:	0f 90       	pop	r0
    160e:	0b be       	out	0x3b, r0	; 59
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	0f 90       	pop	r0
    1616:	1f 90       	pop	r1
    1618:	18 95       	reti

0000161a <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    161a:	1f 92       	push	r1
    161c:	0f 92       	push	r0
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	0b b6       	in	r0, 0x3b	; 59
    1626:	0f 92       	push	r0
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1640:	e0 91 53 21 	lds	r30, 0x2153	; 0x802153 <tc_tce0_ccc_callback>
    1644:	f0 91 54 21 	lds	r31, 0x2154	; 0x802154 <tc_tce0_ccc_callback+0x1>
    1648:	30 97       	sbiw	r30, 0x00	; 0
    164a:	09 f0       	breq	.+2      	; 0x164e <__vector_51+0x34>
		tc_tce0_ccc_callback();
    164c:	19 95       	eicall
	}
}
    164e:	ff 91       	pop	r31
    1650:	ef 91       	pop	r30
    1652:	bf 91       	pop	r27
    1654:	af 91       	pop	r26
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	7f 91       	pop	r23
    165c:	6f 91       	pop	r22
    165e:	5f 91       	pop	r21
    1660:	4f 91       	pop	r20
    1662:	3f 91       	pop	r19
    1664:	2f 91       	pop	r18
    1666:	0f 90       	pop	r0
    1668:	0b be       	out	0x3b, r0	; 59
    166a:	0f 90       	pop	r0
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	0f 90       	pop	r0
    1670:	1f 90       	pop	r1
    1672:	18 95       	reti

00001674 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1674:	1f 92       	push	r1
    1676:	0f 92       	push	r0
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	0f 92       	push	r0
    167c:	11 24       	eor	r1, r1
    167e:	0b b6       	in	r0, 0x3b	; 59
    1680:	0f 92       	push	r0
    1682:	2f 93       	push	r18
    1684:	3f 93       	push	r19
    1686:	4f 93       	push	r20
    1688:	5f 93       	push	r21
    168a:	6f 93       	push	r22
    168c:	7f 93       	push	r23
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
    1692:	af 93       	push	r26
    1694:	bf 93       	push	r27
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    169a:	e0 91 51 21 	lds	r30, 0x2151	; 0x802151 <tc_tce0_ccd_callback>
    169e:	f0 91 52 21 	lds	r31, 0x2152	; 0x802152 <tc_tce0_ccd_callback+0x1>
    16a2:	30 97       	sbiw	r30, 0x00	; 0
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    16a6:	19 95       	eicall
	}
}
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	bf 91       	pop	r27
    16ae:	af 91       	pop	r26
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	7f 91       	pop	r23
    16b6:	6f 91       	pop	r22
    16b8:	5f 91       	pop	r21
    16ba:	4f 91       	pop	r20
    16bc:	3f 91       	pop	r19
    16be:	2f 91       	pop	r18
    16c0:	0f 90       	pop	r0
    16c2:	0b be       	out	0x3b, r0	; 59
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f 90       	pop	r0
    16ca:	1f 90       	pop	r1
    16cc:	18 95       	reti

000016ce <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    16ce:	1f 92       	push	r1
    16d0:	0f 92       	push	r0
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	0f 92       	push	r0
    16d6:	11 24       	eor	r1, r1
    16d8:	0b b6       	in	r0, 0x3b	; 59
    16da:	0f 92       	push	r0
    16dc:	2f 93       	push	r18
    16de:	3f 93       	push	r19
    16e0:	4f 93       	push	r20
    16e2:	5f 93       	push	r21
    16e4:	6f 93       	push	r22
    16e6:	7f 93       	push	r23
    16e8:	8f 93       	push	r24
    16ea:	9f 93       	push	r25
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
    16f0:	ef 93       	push	r30
    16f2:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    16f4:	e0 91 4f 21 	lds	r30, 0x214F	; 0x80214f <tc_tce1_ovf_callback>
    16f8:	f0 91 50 21 	lds	r31, 0x2150	; 0x802150 <tc_tce1_ovf_callback+0x1>
    16fc:	30 97       	sbiw	r30, 0x00	; 0
    16fe:	09 f0       	breq	.+2      	; 0x1702 <__vector_53+0x34>
		tc_tce1_ovf_callback();
    1700:	19 95       	eicall
	}
}
    1702:	ff 91       	pop	r31
    1704:	ef 91       	pop	r30
    1706:	bf 91       	pop	r27
    1708:	af 91       	pop	r26
    170a:	9f 91       	pop	r25
    170c:	8f 91       	pop	r24
    170e:	7f 91       	pop	r23
    1710:	6f 91       	pop	r22
    1712:	5f 91       	pop	r21
    1714:	4f 91       	pop	r20
    1716:	3f 91       	pop	r19
    1718:	2f 91       	pop	r18
    171a:	0f 90       	pop	r0
    171c:	0b be       	out	0x3b, r0	; 59
    171e:	0f 90       	pop	r0
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	0f 90       	pop	r0
    1724:	1f 90       	pop	r1
    1726:	18 95       	reti

00001728 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1728:	1f 92       	push	r1
    172a:	0f 92       	push	r0
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	0f 92       	push	r0
    1730:	11 24       	eor	r1, r1
    1732:	0b b6       	in	r0, 0x3b	; 59
    1734:	0f 92       	push	r0
    1736:	2f 93       	push	r18
    1738:	3f 93       	push	r19
    173a:	4f 93       	push	r20
    173c:	5f 93       	push	r21
    173e:	6f 93       	push	r22
    1740:	7f 93       	push	r23
    1742:	8f 93       	push	r24
    1744:	9f 93       	push	r25
    1746:	af 93       	push	r26
    1748:	bf 93       	push	r27
    174a:	ef 93       	push	r30
    174c:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    174e:	e0 91 4d 21 	lds	r30, 0x214D	; 0x80214d <tc_tce1_err_callback>
    1752:	f0 91 4e 21 	lds	r31, 0x214E	; 0x80214e <tc_tce1_err_callback+0x1>
    1756:	30 97       	sbiw	r30, 0x00	; 0
    1758:	09 f0       	breq	.+2      	; 0x175c <__vector_54+0x34>
		tc_tce1_err_callback();
    175a:	19 95       	eicall
	}
}
    175c:	ff 91       	pop	r31
    175e:	ef 91       	pop	r30
    1760:	bf 91       	pop	r27
    1762:	af 91       	pop	r26
    1764:	9f 91       	pop	r25
    1766:	8f 91       	pop	r24
    1768:	7f 91       	pop	r23
    176a:	6f 91       	pop	r22
    176c:	5f 91       	pop	r21
    176e:	4f 91       	pop	r20
    1770:	3f 91       	pop	r19
    1772:	2f 91       	pop	r18
    1774:	0f 90       	pop	r0
    1776:	0b be       	out	0x3b, r0	; 59
    1778:	0f 90       	pop	r0
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	0f 90       	pop	r0
    177e:	1f 90       	pop	r1
    1780:	18 95       	reti

00001782 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	0b b6       	in	r0, 0x3b	; 59
    178e:	0f 92       	push	r0
    1790:	2f 93       	push	r18
    1792:	3f 93       	push	r19
    1794:	4f 93       	push	r20
    1796:	5f 93       	push	r21
    1798:	6f 93       	push	r22
    179a:	7f 93       	push	r23
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    17a8:	e0 91 4b 21 	lds	r30, 0x214B	; 0x80214b <tc_tce1_cca_callback>
    17ac:	f0 91 4c 21 	lds	r31, 0x214C	; 0x80214c <tc_tce1_cca_callback+0x1>
    17b0:	30 97       	sbiw	r30, 0x00	; 0
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <__vector_55+0x34>
		tc_tce1_cca_callback();
    17b4:	19 95       	eicall
	}
}
    17b6:	ff 91       	pop	r31
    17b8:	ef 91       	pop	r30
    17ba:	bf 91       	pop	r27
    17bc:	af 91       	pop	r26
    17be:	9f 91       	pop	r25
    17c0:	8f 91       	pop	r24
    17c2:	7f 91       	pop	r23
    17c4:	6f 91       	pop	r22
    17c6:	5f 91       	pop	r21
    17c8:	4f 91       	pop	r20
    17ca:	3f 91       	pop	r19
    17cc:	2f 91       	pop	r18
    17ce:	0f 90       	pop	r0
    17d0:	0b be       	out	0x3b, r0	; 59
    17d2:	0f 90       	pop	r0
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	0f 90       	pop	r0
    17d8:	1f 90       	pop	r1
    17da:	18 95       	reti

000017dc <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    17dc:	1f 92       	push	r1
    17de:	0f 92       	push	r0
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	0f 92       	push	r0
    17e4:	11 24       	eor	r1, r1
    17e6:	0b b6       	in	r0, 0x3b	; 59
    17e8:	0f 92       	push	r0
    17ea:	2f 93       	push	r18
    17ec:	3f 93       	push	r19
    17ee:	4f 93       	push	r20
    17f0:	5f 93       	push	r21
    17f2:	6f 93       	push	r22
    17f4:	7f 93       	push	r23
    17f6:	8f 93       	push	r24
    17f8:	9f 93       	push	r25
    17fa:	af 93       	push	r26
    17fc:	bf 93       	push	r27
    17fe:	ef 93       	push	r30
    1800:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1802:	e0 91 49 21 	lds	r30, 0x2149	; 0x802149 <tc_tce1_ccb_callback>
    1806:	f0 91 4a 21 	lds	r31, 0x214A	; 0x80214a <tc_tce1_ccb_callback+0x1>
    180a:	30 97       	sbiw	r30, 0x00	; 0
    180c:	09 f0       	breq	.+2      	; 0x1810 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    180e:	19 95       	eicall
	}
}
    1810:	ff 91       	pop	r31
    1812:	ef 91       	pop	r30
    1814:	bf 91       	pop	r27
    1816:	af 91       	pop	r26
    1818:	9f 91       	pop	r25
    181a:	8f 91       	pop	r24
    181c:	7f 91       	pop	r23
    181e:	6f 91       	pop	r22
    1820:	5f 91       	pop	r21
    1822:	4f 91       	pop	r20
    1824:	3f 91       	pop	r19
    1826:	2f 91       	pop	r18
    1828:	0f 90       	pop	r0
    182a:	0b be       	out	0x3b, r0	; 59
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	0f 90       	pop	r0
    1832:	1f 90       	pop	r1
    1834:	18 95       	reti

00001836 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	0b b6       	in	r0, 0x3b	; 59
    1842:	0f 92       	push	r0
    1844:	2f 93       	push	r18
    1846:	3f 93       	push	r19
    1848:	4f 93       	push	r20
    184a:	5f 93       	push	r21
    184c:	6f 93       	push	r22
    184e:	7f 93       	push	r23
    1850:	8f 93       	push	r24
    1852:	9f 93       	push	r25
    1854:	af 93       	push	r26
    1856:	bf 93       	push	r27
    1858:	ef 93       	push	r30
    185a:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    185c:	e0 91 47 21 	lds	r30, 0x2147	; 0x802147 <tc_tcf0_ovf_callback>
    1860:	f0 91 48 21 	lds	r31, 0x2148	; 0x802148 <tc_tcf0_ovf_callback+0x1>
    1864:	30 97       	sbiw	r30, 0x00	; 0
    1866:	09 f0       	breq	.+2      	; 0x186a <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1868:	19 95       	eicall
	}
}
    186a:	ff 91       	pop	r31
    186c:	ef 91       	pop	r30
    186e:	bf 91       	pop	r27
    1870:	af 91       	pop	r26
    1872:	9f 91       	pop	r25
    1874:	8f 91       	pop	r24
    1876:	7f 91       	pop	r23
    1878:	6f 91       	pop	r22
    187a:	5f 91       	pop	r21
    187c:	4f 91       	pop	r20
    187e:	3f 91       	pop	r19
    1880:	2f 91       	pop	r18
    1882:	0f 90       	pop	r0
    1884:	0b be       	out	0x3b, r0	; 59
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	0b b6       	in	r0, 0x3b	; 59
    189c:	0f 92       	push	r0
    189e:	2f 93       	push	r18
    18a0:	3f 93       	push	r19
    18a2:	4f 93       	push	r20
    18a4:	5f 93       	push	r21
    18a6:	6f 93       	push	r22
    18a8:	7f 93       	push	r23
    18aa:	8f 93       	push	r24
    18ac:	9f 93       	push	r25
    18ae:	af 93       	push	r26
    18b0:	bf 93       	push	r27
    18b2:	ef 93       	push	r30
    18b4:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    18b6:	e0 91 45 21 	lds	r30, 0x2145	; 0x802145 <tc_tcf0_err_callback>
    18ba:	f0 91 46 21 	lds	r31, 0x2146	; 0x802146 <tc_tcf0_err_callback+0x1>
    18be:	30 97       	sbiw	r30, 0x00	; 0
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <__vector_109+0x34>
		tc_tcf0_err_callback();
    18c2:	19 95       	eicall
	}
}
    18c4:	ff 91       	pop	r31
    18c6:	ef 91       	pop	r30
    18c8:	bf 91       	pop	r27
    18ca:	af 91       	pop	r26
    18cc:	9f 91       	pop	r25
    18ce:	8f 91       	pop	r24
    18d0:	7f 91       	pop	r23
    18d2:	6f 91       	pop	r22
    18d4:	5f 91       	pop	r21
    18d6:	4f 91       	pop	r20
    18d8:	3f 91       	pop	r19
    18da:	2f 91       	pop	r18
    18dc:	0f 90       	pop	r0
    18de:	0b be       	out	0x3b, r0	; 59
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	0f 90       	pop	r0
    18e6:	1f 90       	pop	r1
    18e8:	18 95       	reti

000018ea <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    18ea:	1f 92       	push	r1
    18ec:	0f 92       	push	r0
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	0f 92       	push	r0
    18f2:	11 24       	eor	r1, r1
    18f4:	0b b6       	in	r0, 0x3b	; 59
    18f6:	0f 92       	push	r0
    18f8:	2f 93       	push	r18
    18fa:	3f 93       	push	r19
    18fc:	4f 93       	push	r20
    18fe:	5f 93       	push	r21
    1900:	6f 93       	push	r22
    1902:	7f 93       	push	r23
    1904:	8f 93       	push	r24
    1906:	9f 93       	push	r25
    1908:	af 93       	push	r26
    190a:	bf 93       	push	r27
    190c:	ef 93       	push	r30
    190e:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1910:	e0 91 43 21 	lds	r30, 0x2143	; 0x802143 <tc_tcf0_cca_callback>
    1914:	f0 91 44 21 	lds	r31, 0x2144	; 0x802144 <tc_tcf0_cca_callback+0x1>
    1918:	30 97       	sbiw	r30, 0x00	; 0
    191a:	09 f0       	breq	.+2      	; 0x191e <__vector_110+0x34>
		tc_tcf0_cca_callback();
    191c:	19 95       	eicall
	}
}
    191e:	ff 91       	pop	r31
    1920:	ef 91       	pop	r30
    1922:	bf 91       	pop	r27
    1924:	af 91       	pop	r26
    1926:	9f 91       	pop	r25
    1928:	8f 91       	pop	r24
    192a:	7f 91       	pop	r23
    192c:	6f 91       	pop	r22
    192e:	5f 91       	pop	r21
    1930:	4f 91       	pop	r20
    1932:	3f 91       	pop	r19
    1934:	2f 91       	pop	r18
    1936:	0f 90       	pop	r0
    1938:	0b be       	out	0x3b, r0	; 59
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	0f 90       	pop	r0
    1940:	1f 90       	pop	r1
    1942:	18 95       	reti

00001944 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1944:	1f 92       	push	r1
    1946:	0f 92       	push	r0
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	0f 92       	push	r0
    194c:	11 24       	eor	r1, r1
    194e:	0b b6       	in	r0, 0x3b	; 59
    1950:	0f 92       	push	r0
    1952:	2f 93       	push	r18
    1954:	3f 93       	push	r19
    1956:	4f 93       	push	r20
    1958:	5f 93       	push	r21
    195a:	6f 93       	push	r22
    195c:	7f 93       	push	r23
    195e:	8f 93       	push	r24
    1960:	9f 93       	push	r25
    1962:	af 93       	push	r26
    1964:	bf 93       	push	r27
    1966:	ef 93       	push	r30
    1968:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    196a:	e0 91 41 21 	lds	r30, 0x2141	; 0x802141 <tc_tcf0_ccb_callback>
    196e:	f0 91 42 21 	lds	r31, 0x2142	; 0x802142 <tc_tcf0_ccb_callback+0x1>
    1972:	30 97       	sbiw	r30, 0x00	; 0
    1974:	09 f0       	breq	.+2      	; 0x1978 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1976:	19 95       	eicall
	}
}
    1978:	ff 91       	pop	r31
    197a:	ef 91       	pop	r30
    197c:	bf 91       	pop	r27
    197e:	af 91       	pop	r26
    1980:	9f 91       	pop	r25
    1982:	8f 91       	pop	r24
    1984:	7f 91       	pop	r23
    1986:	6f 91       	pop	r22
    1988:	5f 91       	pop	r21
    198a:	4f 91       	pop	r20
    198c:	3f 91       	pop	r19
    198e:	2f 91       	pop	r18
    1990:	0f 90       	pop	r0
    1992:	0b be       	out	0x3b, r0	; 59
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    199e:	1f 92       	push	r1
    19a0:	0f 92       	push	r0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	0f 92       	push	r0
    19a6:	11 24       	eor	r1, r1
    19a8:	0b b6       	in	r0, 0x3b	; 59
    19aa:	0f 92       	push	r0
    19ac:	2f 93       	push	r18
    19ae:	3f 93       	push	r19
    19b0:	4f 93       	push	r20
    19b2:	5f 93       	push	r21
    19b4:	6f 93       	push	r22
    19b6:	7f 93       	push	r23
    19b8:	8f 93       	push	r24
    19ba:	9f 93       	push	r25
    19bc:	af 93       	push	r26
    19be:	bf 93       	push	r27
    19c0:	ef 93       	push	r30
    19c2:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    19c4:	e0 91 3f 21 	lds	r30, 0x213F	; 0x80213f <tc_tcf0_ccc_callback>
    19c8:	f0 91 40 21 	lds	r31, 0x2140	; 0x802140 <tc_tcf0_ccc_callback+0x1>
    19cc:	30 97       	sbiw	r30, 0x00	; 0
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    19d0:	19 95       	eicall
	}
}
    19d2:	ff 91       	pop	r31
    19d4:	ef 91       	pop	r30
    19d6:	bf 91       	pop	r27
    19d8:	af 91       	pop	r26
    19da:	9f 91       	pop	r25
    19dc:	8f 91       	pop	r24
    19de:	7f 91       	pop	r23
    19e0:	6f 91       	pop	r22
    19e2:	5f 91       	pop	r21
    19e4:	4f 91       	pop	r20
    19e6:	3f 91       	pop	r19
    19e8:	2f 91       	pop	r18
    19ea:	0f 90       	pop	r0
    19ec:	0b be       	out	0x3b, r0	; 59
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	0f 90       	pop	r0
    19f4:	1f 90       	pop	r1
    19f6:	18 95       	reti

000019f8 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    19f8:	1f 92       	push	r1
    19fa:	0f 92       	push	r0
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	0f 92       	push	r0
    1a00:	11 24       	eor	r1, r1
    1a02:	0b b6       	in	r0, 0x3b	; 59
    1a04:	0f 92       	push	r0
    1a06:	2f 93       	push	r18
    1a08:	3f 93       	push	r19
    1a0a:	4f 93       	push	r20
    1a0c:	5f 93       	push	r21
    1a0e:	6f 93       	push	r22
    1a10:	7f 93       	push	r23
    1a12:	8f 93       	push	r24
    1a14:	9f 93       	push	r25
    1a16:	af 93       	push	r26
    1a18:	bf 93       	push	r27
    1a1a:	ef 93       	push	r30
    1a1c:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1a1e:	e0 91 3d 21 	lds	r30, 0x213D	; 0x80213d <tc_tcf0_ccd_callback>
    1a22:	f0 91 3e 21 	lds	r31, 0x213E	; 0x80213e <tc_tcf0_ccd_callback+0x1>
    1a26:	30 97       	sbiw	r30, 0x00	; 0
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1a2a:	19 95       	eicall
	}
}
    1a2c:	ff 91       	pop	r31
    1a2e:	ef 91       	pop	r30
    1a30:	bf 91       	pop	r27
    1a32:	af 91       	pop	r26
    1a34:	9f 91       	pop	r25
    1a36:	8f 91       	pop	r24
    1a38:	7f 91       	pop	r23
    1a3a:	6f 91       	pop	r22
    1a3c:	5f 91       	pop	r21
    1a3e:	4f 91       	pop	r20
    1a40:	3f 91       	pop	r19
    1a42:	2f 91       	pop	r18
    1a44:	0f 90       	pop	r0
    1a46:	0b be       	out	0x3b, r0	; 59
    1a48:	0f 90       	pop	r0
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	0f 90       	pop	r0
    1a4e:	1f 90       	pop	r1
    1a50:	18 95       	reti

00001a52 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1a52:	1f 93       	push	r17
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	1f 92       	push	r1
    1a5a:	1f 92       	push	r1
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a60:	2f b7       	in	r18, 0x3f	; 63
    1a62:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    1a64:	f8 94       	cli
	return flags;
    1a66:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1a68:	28 2f       	mov	r18, r24
    1a6a:	39 2f       	mov	r19, r25
    1a6c:	21 15       	cp	r18, r1
    1a6e:	88 e0       	ldi	r24, 0x08	; 8
    1a70:	38 07       	cpc	r19, r24
    1a72:	49 f4       	brne	.+18     	; 0x1a86 <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1a7c:	64 e0       	ldi	r22, 0x04	; 4
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
    1a84:	4f c0       	rjmp	.+158    	; 0x1b24 <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1a86:	20 34       	cpi	r18, 0x40	; 64
    1a88:	88 e0       	ldi	r24, 0x08	; 8
    1a8a:	38 07       	cpc	r19, r24
    1a8c:	49 f4       	brne	.+18     	; 0x1aa0 <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1a8e:	62 e0       	ldi	r22, 0x02	; 2
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1a96:	64 e0       	ldi	r22, 0x04	; 4
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
    1a9e:	42 c0       	rjmp	.+132    	; 0x1b24 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1aa0:	21 15       	cp	r18, r1
    1aa2:	89 e0       	ldi	r24, 0x09	; 9
    1aa4:	38 07       	cpc	r19, r24
    1aa6:	49 f4       	brne	.+18     	; 0x1aba <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
    1aaa:	84 e0       	ldi	r24, 0x04	; 4
    1aac:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1ab0:	64 e0       	ldi	r22, 0x04	; 4
    1ab2:	84 e0       	ldi	r24, 0x04	; 4
    1ab4:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
    1ab8:	35 c0       	rjmp	.+106    	; 0x1b24 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1aba:	20 34       	cpi	r18, 0x40	; 64
    1abc:	89 e0       	ldi	r24, 0x09	; 9
    1abe:	38 07       	cpc	r19, r24
    1ac0:	49 f4       	brne	.+18     	; 0x1ad4 <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1ac2:	62 e0       	ldi	r22, 0x02	; 2
    1ac4:	84 e0       	ldi	r24, 0x04	; 4
    1ac6:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1aca:	64 e0       	ldi	r22, 0x04	; 4
    1acc:	84 e0       	ldi	r24, 0x04	; 4
    1ace:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
    1ad2:	28 c0       	rjmp	.+80     	; 0x1b24 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1ad4:	21 15       	cp	r18, r1
    1ad6:	8a e0       	ldi	r24, 0x0A	; 10
    1ad8:	38 07       	cpc	r19, r24
    1ada:	49 f4       	brne	.+18     	; 0x1aee <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1adc:	61 e0       	ldi	r22, 0x01	; 1
    1ade:	85 e0       	ldi	r24, 0x05	; 5
    1ae0:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1ae4:	64 e0       	ldi	r22, 0x04	; 4
    1ae6:	85 e0       	ldi	r24, 0x05	; 5
    1ae8:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
    1aec:	1b c0       	rjmp	.+54     	; 0x1b24 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1aee:	20 34       	cpi	r18, 0x40	; 64
    1af0:	8a e0       	ldi	r24, 0x0A	; 10
    1af2:	38 07       	cpc	r19, r24
    1af4:	49 f4       	brne	.+18     	; 0x1b08 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	85 e0       	ldi	r24, 0x05	; 5
    1afa:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1afe:	64 e0       	ldi	r22, 0x04	; 4
    1b00:	85 e0       	ldi	r24, 0x05	; 5
    1b02:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
    1b06:	0e c0       	rjmp	.+28     	; 0x1b24 <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1b08:	21 15       	cp	r18, r1
    1b0a:	3b 40       	sbci	r19, 0x0B	; 11
    1b0c:	49 f4       	brne	.+18     	; 0x1b20 <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	86 e0       	ldi	r24, 0x06	; 6
    1b12:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1b16:	64 e0       	ldi	r22, 0x04	; 4
    1b18:	86 e0       	ldi	r24, 0x06	; 6
    1b1a:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <sysclk_enable_module>
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b20:	1f bf       	out	0x3f, r17	; 63
    1b22:	10 c0       	rjmp	.+32     	; 0x1b44 <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1b24:	80 91 42 24 	lds	r24, 0x2442	; 0x802442 <sleepmgr_locks+0x1>
    1b28:	8f 3f       	cpi	r24, 0xFF	; 255
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <tc_enable+0xdc>
    1b2c:	ff cf       	rjmp	.-2      	; 0x1b2c <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b2e:	8f b7       	in	r24, 0x3f	; 63
    1b30:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1b32:	f8 94       	cli
	return flags;
    1b34:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1b36:	e1 e4       	ldi	r30, 0x41	; 65
    1b38:	f4 e2       	ldi	r31, 0x24	; 36
    1b3a:	81 81       	ldd	r24, Z+1	; 0x01
    1b3c:	8f 5f       	subi	r24, 0xFF	; 255
    1b3e:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b40:	9f bf       	out	0x3f, r25	; 63
    1b42:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	08 95       	ret

00001b50 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1b54:	e0 91 85 21 	lds	r30, 0x2185	; 0x802185 <transfer>
    1b58:	f0 91 86 21 	lds	r31, 0x2186	; 0x802186 <transfer+0x1>
    1b5c:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1b5e:	83 ff       	sbrs	r24, 3
    1b60:	08 c0       	rjmp	.+16     	; 0x1b72 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1b62:	88 60       	ori	r24, 0x08	; 8
    1b64:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1b6a:	86 ef       	ldi	r24, 0xF6	; 246
    1b6c:	80 93 8f 21 	sts	0x218F, r24	; 0x80218f <transfer+0xa>
    1b70:	83 c0       	rjmp	.+262    	; 0x1c78 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1b72:	98 2f       	mov	r25, r24
    1b74:	94 71       	andi	r25, 0x14	; 20
    1b76:	31 f0       	breq	.+12     	; 0x1b84 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	80 93 8f 21 	sts	0x218F, r24	; 0x80218f <transfer+0xa>
    1b82:	7a c0       	rjmp	.+244    	; 0x1c78 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1b84:	86 ff       	sbrs	r24, 6
    1b86:	43 c0       	rjmp	.+134    	; 0x1c0e <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1b88:	c5 e8       	ldi	r28, 0x85	; 133
    1b8a:	d1 e2       	ldi	r29, 0x21	; 33
    1b8c:	aa 81       	ldd	r26, Y+2	; 0x02
    1b8e:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	9d 81       	ldd	r25, Y+5	; 0x05
    1b94:	14 96       	adiw	r26, 0x04	; 4
    1b96:	2d 91       	ld	r18, X+
    1b98:	3c 91       	ld	r19, X
    1b9a:	15 97       	sbiw	r26, 0x05	; 5
    1b9c:	82 17       	cp	r24, r18
    1b9e:	93 07       	cpc	r25, r19
    1ba0:	6c f4       	brge	.+26     	; 0x1bbc <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1ba2:	9c 01       	movw	r18, r24
    1ba4:	2f 5f       	subi	r18, 0xFF	; 255
    1ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba8:	20 93 89 21 	sts	0x2189, r18	; 0x802189 <transfer+0x4>
    1bac:	30 93 8a 21 	sts	0x218A, r19	; 0x80218a <transfer+0x5>
    1bb0:	a8 0f       	add	r26, r24
    1bb2:	b9 1f       	adc	r27, r25
    1bb4:	11 96       	adiw	r26, 0x01	; 1
    1bb6:	8c 91       	ld	r24, X
    1bb8:	87 83       	std	Z+7, r24	; 0x07
    1bba:	5e c0       	rjmp	.+188    	; 0x1c78 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1bbc:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <transfer+0x6>
    1bc0:	90 91 8c 21 	lds	r25, 0x218C	; 0x80218c <transfer+0x7>
    1bc4:	18 96       	adiw	r26, 0x08	; 8
    1bc6:	2d 91       	ld	r18, X+
    1bc8:	3c 91       	ld	r19, X
    1bca:	19 97       	sbiw	r26, 0x09	; 9
    1bcc:	82 17       	cp	r24, r18
    1bce:	93 07       	cpc	r25, r19
    1bd0:	c8 f4       	brcc	.+50     	; 0x1c04 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1bd2:	20 91 8d 21 	lds	r18, 0x218D	; 0x80218d <transfer+0x8>
    1bd6:	22 23       	and	r18, r18
    1bd8:	21 f0       	breq	.+8      	; 0x1be2 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1bda:	86 81       	ldd	r24, Z+6	; 0x06
    1bdc:	81 60       	ori	r24, 0x01	; 1
    1bde:	86 83       	std	Z+6, r24	; 0x06
    1be0:	4b c0       	rjmp	.+150    	; 0x1c78 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1be2:	16 96       	adiw	r26, 0x06	; 6
    1be4:	2d 91       	ld	r18, X+
    1be6:	3c 91       	ld	r19, X
    1be8:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1bea:	ac 01       	movw	r20, r24
    1bec:	4f 5f       	subi	r20, 0xFF	; 255
    1bee:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf0:	40 93 8b 21 	sts	0x218B, r20	; 0x80218b <transfer+0x6>
    1bf4:	50 93 8c 21 	sts	0x218C, r21	; 0x80218c <transfer+0x7>
    1bf8:	d9 01       	movw	r26, r18
    1bfa:	a8 0f       	add	r26, r24
    1bfc:	b9 1f       	adc	r27, r25
    1bfe:	8c 91       	ld	r24, X
    1c00:	87 83       	std	Z+7, r24	; 0x07
    1c02:	3a c0       	rjmp	.+116    	; 0x1c78 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1c08:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <transfer+0xa>
    1c0c:	35 c0       	rjmp	.+106    	; 0x1c78 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1c0e:	88 23       	and	r24, r24
    1c10:	84 f5       	brge	.+96     	; 0x1c72 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1c12:	a5 e8       	ldi	r26, 0x85	; 133
    1c14:	b1 e2       	ldi	r27, 0x21	; 33
    1c16:	12 96       	adiw	r26, 0x02	; 2
    1c18:	cd 91       	ld	r28, X+
    1c1a:	dc 91       	ld	r29, X
    1c1c:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1c1e:	16 96       	adiw	r26, 0x06	; 6
    1c20:	8d 91       	ld	r24, X+
    1c22:	9c 91       	ld	r25, X
    1c24:	17 97       	sbiw	r26, 0x07	; 7
    1c26:	28 85       	ldd	r18, Y+8	; 0x08
    1c28:	39 85       	ldd	r19, Y+9	; 0x09
    1c2a:	82 17       	cp	r24, r18
    1c2c:	93 07       	cpc	r25, r19
    1c2e:	d8 f4       	brcc	.+54     	; 0x1c66 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1c30:	6e 81       	ldd	r22, Y+6	; 0x06
    1c32:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1c34:	9c 01       	movw	r18, r24
    1c36:	2f 5f       	subi	r18, 0xFF	; 255
    1c38:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3a:	20 93 8b 21 	sts	0x218B, r18	; 0x80218b <transfer+0x6>
    1c3e:	30 93 8c 21 	sts	0x218C, r19	; 0x80218c <transfer+0x7>
    1c42:	47 81       	ldd	r20, Z+7	; 0x07
    1c44:	db 01       	movw	r26, r22
    1c46:	a8 0f       	add	r26, r24
    1c48:	b9 1f       	adc	r27, r25
    1c4a:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1c4c:	88 85       	ldd	r24, Y+8	; 0x08
    1c4e:	99 85       	ldd	r25, Y+9	; 0x09
    1c50:	28 17       	cp	r18, r24
    1c52:	39 07       	cpc	r19, r25
    1c54:	18 f4       	brcc	.+6      	; 0x1c5c <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	83 83       	std	Z+3, r24	; 0x03
    1c5a:	0e c0       	rjmp	.+28     	; 0x1c78 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1c5c:	87 e0       	ldi	r24, 0x07	; 7
    1c5e:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1c60:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <transfer+0xa>
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1c66:	83 e0       	ldi	r24, 0x03	; 3
    1c68:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1c6a:	89 ef       	ldi	r24, 0xF9	; 249
    1c6c:	80 93 8f 21 	sts	0x218F, r24	; 0x80218f <transfer+0xa>
    1c70:	03 c0       	rjmp	.+6      	; 0x1c78 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1c72:	8b ef       	ldi	r24, 0xFB	; 251
    1c74:	80 93 8f 21 	sts	0x218F, r24	; 0x80218f <transfer+0xa>
	}
}
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1c7e:	1f 92       	push	r1
    1c80:	0f 92       	push	r0
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	0f 92       	push	r0
    1c86:	11 24       	eor	r1, r1
    1c88:	0b b6       	in	r0, 0x3b	; 59
    1c8a:	0f 92       	push	r0
    1c8c:	2f 93       	push	r18
    1c8e:	3f 93       	push	r19
    1c90:	4f 93       	push	r20
    1c92:	5f 93       	push	r21
    1c94:	6f 93       	push	r22
    1c96:	7f 93       	push	r23
    1c98:	8f 93       	push	r24
    1c9a:	9f 93       	push	r25
    1c9c:	af 93       	push	r26
    1c9e:	bf 93       	push	r27
    1ca0:	ef 93       	push	r30
    1ca2:	ff 93       	push	r31
    1ca4:	55 df       	rcall	.-342    	; 0x1b50 <twim_interrupt_handler>
    1ca6:	ff 91       	pop	r31
    1ca8:	ef 91       	pop	r30
    1caa:	bf 91       	pop	r27
    1cac:	af 91       	pop	r26
    1cae:	9f 91       	pop	r25
    1cb0:	8f 91       	pop	r24
    1cb2:	7f 91       	pop	r23
    1cb4:	6f 91       	pop	r22
    1cb6:	5f 91       	pop	r21
    1cb8:	4f 91       	pop	r20
    1cba:	3f 91       	pop	r19
    1cbc:	2f 91       	pop	r18
    1cbe:	0f 90       	pop	r0
    1cc0:	0b be       	out	0x3b, r0	; 59
    1cc2:	0f 90       	pop	r0
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	0f 90       	pop	r0
    1cc8:	1f 90       	pop	r1
    1cca:	18 95       	reti

00001ccc <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1ccc:	1f 92       	push	r1
    1cce:	0f 92       	push	r0
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	0f 92       	push	r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	0b b6       	in	r0, 0x3b	; 59
    1cd8:	0f 92       	push	r0
    1cda:	2f 93       	push	r18
    1cdc:	3f 93       	push	r19
    1cde:	4f 93       	push	r20
    1ce0:	5f 93       	push	r21
    1ce2:	6f 93       	push	r22
    1ce4:	7f 93       	push	r23
    1ce6:	8f 93       	push	r24
    1ce8:	9f 93       	push	r25
    1cea:	af 93       	push	r26
    1cec:	bf 93       	push	r27
    1cee:	ef 93       	push	r30
    1cf0:	ff 93       	push	r31
    1cf2:	2e df       	rcall	.-420    	; 0x1b50 <twim_interrupt_handler>
    1cf4:	ff 91       	pop	r31
    1cf6:	ef 91       	pop	r30
    1cf8:	bf 91       	pop	r27
    1cfa:	af 91       	pop	r26
    1cfc:	9f 91       	pop	r25
    1cfe:	8f 91       	pop	r24
    1d00:	7f 91       	pop	r23
    1d02:	6f 91       	pop	r22
    1d04:	5f 91       	pop	r21
    1d06:	4f 91       	pop	r20
    1d08:	3f 91       	pop	r19
    1d0a:	2f 91       	pop	r18
    1d0c:	0f 90       	pop	r0
    1d0e:	0b be       	out	0x3b, r0	; 59
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	0f 90       	pop	r0
    1d16:	1f 90       	pop	r1
    1d18:	18 95       	reti

00001d1a <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1d1a:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    1d1c:	db 01       	movw	r26, r22
    1d1e:	14 96       	adiw	r26, 0x04	; 4
    1d20:	8c 91       	ld	r24, X
    1d22:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    1d24:	88 eb       	ldi	r24, 0xB8	; 184
    1d26:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    1d2c:	e5 e8       	ldi	r30, 0x85	; 133
    1d2e:	f1 e2       	ldi	r31, 0x21	; 33
    1d30:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    1d32:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    1d34:	e0 ea       	ldi	r30, 0xA0	; 160
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	82 60       	ori	r24, 0x02	; 2
    1d3c:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    1d3e:	78 94       	sei

	return STATUS_OK;
}
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	08 95       	ret

00001d44 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	1f 92       	push	r1
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	9c 01       	movw	r18, r24
    1d50:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1d52:	89 2b       	or	r24, r25
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <twi_master_transfer+0x14>
    1d56:	51 c0       	rjmp	.+162    	; 0x1dfa <twi_master_transfer+0xb6>
    1d58:	30 97       	sbiw	r30, 0x00	; 0
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <twi_master_transfer+0x1a>
    1d5c:	50 c0       	rjmp	.+160    	; 0x1dfe <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1d5e:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1d60:	80 91 8e 21 	lds	r24, 0x218E	; 0x80218e <transfer+0x9>
    1d64:	88 23       	and	r24, r24
    1d66:	19 f0       	breq	.+6      	; 0x1d6e <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    1d68:	99 23       	and	r25, r25
    1d6a:	f1 f3       	breq	.-4      	; 0x1d68 <twi_master_transfer+0x24>
    1d6c:	4a c0       	rjmp	.+148    	; 0x1e02 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1d6e:	8f b7       	in	r24, 0x3f	; 63
    1d70:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1d72:	f8 94       	cli
	return flags;
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1d76:	a5 e8       	ldi	r26, 0x85	; 133
    1d78:	b1 e2       	ldi	r27, 0x21	; 33
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	19 96       	adiw	r26, 0x09	; 9
    1d7e:	9c 93       	st	X, r25
    1d80:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    1d82:	90 e8       	ldi	r25, 0x80	; 128
    1d84:	1a 96       	adiw	r26, 0x0a	; 10
    1d86:	9c 93       	st	X, r25
    1d88:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d8a:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1d8c:	2d 93       	st	X+, r18
    1d8e:	3c 93       	st	X, r19
    1d90:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    1d92:	12 96       	adiw	r26, 0x02	; 2
    1d94:	6d 93       	st	X+, r22
    1d96:	7c 93       	st	X, r23
    1d98:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    1d9a:	14 96       	adiw	r26, 0x04	; 4
    1d9c:	1d 92       	st	X+, r1
    1d9e:	1c 92       	st	X, r1
    1da0:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    1da2:	16 96       	adiw	r26, 0x06	; 6
    1da4:	1d 92       	st	X+, r1
    1da6:	1c 92       	st	X, r1
    1da8:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    1daa:	18 96       	adiw	r26, 0x08	; 8
    1dac:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    1dae:	80 81       	ld	r24, Z
    1db0:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    1db2:	64 81       	ldd	r22, Z+4	; 0x04
    1db4:	75 81       	ldd	r23, Z+5	; 0x05
    1db6:	67 2b       	or	r22, r23
    1db8:	11 f4       	brne	.+4      	; 0x1dbe <twi_master_transfer+0x7a>
    1dba:	41 11       	cpse	r20, r1
    1dbc:	03 c0       	rjmp	.+6      	; 0x1dc4 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    1dbe:	f9 01       	movw	r30, r18
    1dc0:	86 83       	std	Z+6, r24	; 0x06
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    1dc4:	81 60       	ori	r24, 0x01	; 1
    1dc6:	f9 01       	movw	r30, r18
    1dc8:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    1dca:	e5 e8       	ldi	r30, 0x85	; 133
    1dcc:	f1 e2       	ldi	r31, 0x21	; 33
    1dce:	92 85       	ldd	r25, Z+10	; 0x0a
    1dd0:	90 38       	cpi	r25, 0x80	; 128
    1dd2:	e9 f3       	breq	.-6      	; 0x1dce <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1dd4:	f9 01       	movw	r30, r18
    1dd6:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1dd8:	83 70       	andi	r24, 0x03	; 3
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	49 f0       	breq	.+18     	; 0x1df0 <twi_master_transfer+0xac>
    1dde:	a5 e8       	ldi	r26, 0x85	; 133
    1de0:	b1 e2       	ldi	r27, 0x21	; 33
    1de2:	ed 91       	ld	r30, X+
    1de4:	fc 91       	ld	r31, X
    1de6:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1de8:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1dea:	83 70       	andi	r24, 0x03	; 3
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	c9 f7       	brne	.-14     	; 0x1de2 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    1df0:	e5 e8       	ldi	r30, 0x85	; 133
    1df2:	f1 e2       	ldi	r31, 0x21	; 33
    1df4:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    1df6:	11 86       	std	Z+9, r1	; 0x09
    1df8:	05 c0       	rjmp	.+10     	; 0x1e04 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    1dfa:	88 ef       	ldi	r24, 0xF8	; 248
    1dfc:	03 c0       	rjmp	.+6      	; 0x1e04 <twi_master_transfer+0xc0>
    1dfe:	88 ef       	ldi	r24, 0xF8	; 248
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    1e02:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1e04:	0f 90       	pop	r0
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	08 95       	ret

00001e0c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	1f 92       	push	r1
    1e12:	1f 92       	push	r1
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	81 11       	cpse	r24, r1
    1e1a:	26 c0       	rjmp	.+76     	; 0x1e68 <udd_sleep_mode+0x5c>
    1e1c:	90 91 bc 22 	lds	r25, 0x22BC	; 0x8022bc <udd_b_idle>
    1e20:	99 23       	and	r25, r25
    1e22:	f9 f0       	breq	.+62     	; 0x1e62 <udd_sleep_mode+0x56>
    1e24:	90 91 42 24 	lds	r25, 0x2442	; 0x802442 <sleepmgr_locks+0x1>
    1e28:	91 11       	cpse	r25, r1
    1e2a:	01 c0       	rjmp	.+2      	; 0x1e2e <udd_sleep_mode+0x22>
    1e2c:	ff cf       	rjmp	.-2      	; 0x1e2c <udd_sleep_mode+0x20>
    1e2e:	9f b7       	in	r25, 0x3f	; 63
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	f8 94       	cli
    1e34:	2a 81       	ldd	r18, Y+2	; 0x02
    1e36:	e1 e4       	ldi	r30, 0x41	; 65
    1e38:	f4 e2       	ldi	r31, 0x24	; 36
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	91 50       	subi	r25, 0x01	; 1
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	2f bf       	out	0x3f, r18	; 63
    1e42:	0f c0       	rjmp	.+30     	; 0x1e62 <udd_sleep_mode+0x56>
    1e44:	90 91 42 24 	lds	r25, 0x2442	; 0x802442 <sleepmgr_locks+0x1>
    1e48:	9f 3f       	cpi	r25, 0xFF	; 255
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <udd_sleep_mode+0x42>
    1e4c:	ff cf       	rjmp	.-2      	; 0x1e4c <udd_sleep_mode+0x40>
    1e4e:	9f b7       	in	r25, 0x3f	; 63
    1e50:	99 83       	std	Y+1, r25	; 0x01
    1e52:	f8 94       	cli
    1e54:	29 81       	ldd	r18, Y+1	; 0x01
    1e56:	e1 e4       	ldi	r30, 0x41	; 65
    1e58:	f4 e2       	ldi	r31, 0x24	; 36
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	9f 5f       	subi	r25, 0xFF	; 255
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	2f bf       	out	0x3f, r18	; 63
    1e62:	80 93 bc 22 	sts	0x22BC, r24	; 0x8022bc <udd_b_idle>
    1e66:	05 c0       	rjmp	.+10     	; 0x1e72 <udd_sleep_mode+0x66>
    1e68:	90 91 bc 22 	lds	r25, 0x22BC	; 0x8022bc <udd_b_idle>
    1e6c:	99 23       	and	r25, r25
    1e6e:	51 f3       	breq	.-44     	; 0x1e44 <udd_sleep_mode+0x38>
    1e70:	f8 cf       	rjmp	.-16     	; 0x1e62 <udd_sleep_mode+0x56>
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	08 95       	ret

00001e7c <udd_ctrl_init>:
    1e7c:	0f 93       	push	r16
    1e7e:	e8 ec       	ldi	r30, 0xC8	; 200
    1e80:	f4 e0       	ldi	r31, 0x04	; 4
    1e82:	80 81       	ld	r24, Z
    1e84:	8f 7d       	andi	r24, 0xDF	; 223
    1e86:	80 83       	st	Z, r24
    1e88:	80 81       	ld	r24, Z
    1e8a:	8f 7d       	andi	r24, 0xDF	; 223
    1e8c:	80 83       	st	Z, r24
    1e8e:	e0 e9       	ldi	r30, 0x90	; 144
    1e90:	f2 e2       	ldi	r31, 0x22	; 34
    1e92:	02 e0       	ldi	r16, 0x02	; 2
    1e94:	05 93       	las	Z, r16
    1e96:	10 92 92 22 	sts	0x2292, r1	; 0x802292 <udd_sram+0x16>
    1e9a:	10 92 93 22 	sts	0x2293, r1	; 0x802293 <udd_sram+0x17>
    1e9e:	00 e2       	ldi	r16, 0x20	; 32
    1ea0:	06 93       	lac	Z, r16
    1ea2:	00 e4       	ldi	r16, 0x40	; 64
    1ea4:	06 93       	lac	Z, r16
    1ea6:	e8 e8       	ldi	r30, 0x88	; 136
    1ea8:	f2 e2       	ldi	r31, 0x22	; 34
    1eaa:	00 e4       	ldi	r16, 0x40	; 64
    1eac:	06 93       	lac	Z, r16
    1eae:	e1 e3       	ldi	r30, 0x31	; 49
    1eb0:	f4 e2       	ldi	r31, 0x24	; 36
    1eb2:	14 86       	std	Z+12, r1	; 0x0c
    1eb4:	15 86       	std	Z+13, r1	; 0x0d
    1eb6:	16 86       	std	Z+14, r1	; 0x0e
    1eb8:	17 86       	std	Z+15, r1	; 0x0f
    1eba:	12 86       	std	Z+10, r1	; 0x0a
    1ebc:	13 86       	std	Z+11, r1	; 0x0b
    1ebe:	10 92 79 22 	sts	0x2279, r1	; 0x802279 <udd_ep_control_state>
    1ec2:	0f 91       	pop	r16
    1ec4:	08 95       	ret

00001ec6 <udd_ctrl_stall_data>:
    1ec6:	0f 93       	push	r16
    1ec8:	85 e0       	ldi	r24, 0x05	; 5
    1eca:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <udd_ep_control_state>
    1ece:	e1 e9       	ldi	r30, 0x91	; 145
    1ed0:	f2 e2       	ldi	r31, 0x22	; 34
    1ed2:	04 e0       	ldi	r16, 0x04	; 4
    1ed4:	05 93       	las	Z, r16
    1ed6:	e9 e8       	ldi	r30, 0x89	; 137
    1ed8:	f2 e2       	ldi	r31, 0x22	; 34
    1eda:	04 e0       	ldi	r16, 0x04	; 4
    1edc:	05 93       	las	Z, r16
    1ede:	0f 91       	pop	r16
    1ee0:	08 95       	ret

00001ee2 <udd_ctrl_send_zlp_in>:
    1ee2:	0f 93       	push	r16
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <udd_ep_control_state>
    1eea:	10 92 92 22 	sts	0x2292, r1	; 0x802292 <udd_sram+0x16>
    1eee:	10 92 93 22 	sts	0x2293, r1	; 0x802293 <udd_sram+0x17>
    1ef2:	e0 e9       	ldi	r30, 0x90	; 144
    1ef4:	f2 e2       	ldi	r31, 0x22	; 34
    1ef6:	02 e0       	ldi	r16, 0x02	; 2
    1ef8:	06 93       	lac	Z, r16
    1efa:	0f 91       	pop	r16
    1efc:	08 95       	ret

00001efe <udd_ctrl_endofrequest>:
    1efe:	e0 91 3d 24 	lds	r30, 0x243D	; 0x80243d <udd_g_ctrlreq+0xc>
    1f02:	f0 91 3e 24 	lds	r31, 0x243E	; 0x80243e <udd_g_ctrlreq+0xd>
    1f06:	30 97       	sbiw	r30, 0x00	; 0
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <udd_ctrl_endofrequest+0xe>
    1f0a:	19 95       	eicall
    1f0c:	08 95       	ret

00001f0e <udd_ctrl_in_sent>:
    1f0e:	0f 93       	push	r16
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	80 91 79 22 	lds	r24, 0x2279	; 0x802279 <udd_ep_control_state>
    1f18:	83 30       	cpi	r24, 0x03	; 3
    1f1a:	19 f4       	brne	.+6      	; 0x1f22 <udd_ctrl_in_sent+0x14>
    1f1c:	f0 df       	rcall	.-32     	; 0x1efe <udd_ctrl_endofrequest>
    1f1e:	ae df       	rcall	.-164    	; 0x1e7c <udd_ctrl_init>
    1f20:	5e c0       	rjmp	.+188    	; 0x1fde <udd_ctrl_in_sent+0xd0>
    1f22:	80 91 75 22 	lds	r24, 0x2275	; 0x802275 <udd_ctrl_payload_nb_trans>
    1f26:	90 91 76 22 	lds	r25, 0x2276	; 0x802276 <udd_ctrl_payload_nb_trans+0x1>
    1f2a:	c0 91 3b 24 	lds	r28, 0x243B	; 0x80243b <udd_g_ctrlreq+0xa>
    1f2e:	d0 91 3c 24 	lds	r29, 0x243C	; 0x80243c <udd_g_ctrlreq+0xb>
    1f32:	c8 1b       	sub	r28, r24
    1f34:	d9 0b       	sbc	r29, r25
    1f36:	71 f5       	brne	.+92     	; 0x1f94 <udd_ctrl_in_sent+0x86>
    1f38:	20 91 77 22 	lds	r18, 0x2277	; 0x802277 <udd_ctrl_prev_payload_nb_trans>
    1f3c:	30 91 78 22 	lds	r19, 0x2278	; 0x802278 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f40:	82 0f       	add	r24, r18
    1f42:	93 1f       	adc	r25, r19
    1f44:	80 93 77 22 	sts	0x2277, r24	; 0x802277 <udd_ctrl_prev_payload_nb_trans>
    1f48:	90 93 78 22 	sts	0x2278, r25	; 0x802278 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f4c:	20 91 37 24 	lds	r18, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    1f50:	30 91 38 24 	lds	r19, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    1f54:	82 17       	cp	r24, r18
    1f56:	93 07       	cpc	r25, r19
    1f58:	21 f0       	breq	.+8      	; 0x1f62 <udd_ctrl_in_sent+0x54>
    1f5a:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <b_shortpacket.5472>
    1f5e:	88 23       	and	r24, r24
    1f60:	41 f0       	breq	.+16     	; 0x1f72 <udd_ctrl_in_sent+0x64>
    1f62:	84 e0       	ldi	r24, 0x04	; 4
    1f64:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <udd_ep_control_state>
    1f68:	e8 e8       	ldi	r30, 0x88	; 136
    1f6a:	f2 e2       	ldi	r31, 0x22	; 34
    1f6c:	02 e0       	ldi	r16, 0x02	; 2
    1f6e:	06 93       	lac	Z, r16
    1f70:	36 c0       	rjmp	.+108    	; 0x1fde <udd_ctrl_in_sent+0xd0>
    1f72:	e0 91 3f 24 	lds	r30, 0x243F	; 0x80243f <udd_g_ctrlreq+0xe>
    1f76:	f0 91 40 24 	lds	r31, 0x2440	; 0x802440 <udd_g_ctrlreq+0xf>
    1f7a:	30 97       	sbiw	r30, 0x00	; 0
    1f7c:	99 f0       	breq	.+38     	; 0x1fa4 <udd_ctrl_in_sent+0x96>
    1f7e:	19 95       	eicall
    1f80:	88 23       	and	r24, r24
    1f82:	81 f0       	breq	.+32     	; 0x1fa4 <udd_ctrl_in_sent+0x96>
    1f84:	10 92 75 22 	sts	0x2275, r1	; 0x802275 <udd_ctrl_payload_nb_trans>
    1f88:	10 92 76 22 	sts	0x2276, r1	; 0x802276 <udd_ctrl_payload_nb_trans+0x1>
    1f8c:	c0 91 3b 24 	lds	r28, 0x243B	; 0x80243b <udd_g_ctrlreq+0xa>
    1f90:	d0 91 3c 24 	lds	r29, 0x243C	; 0x80243c <udd_g_ctrlreq+0xb>
    1f94:	c0 34       	cpi	r28, 0x40	; 64
    1f96:	d1 05       	cpc	r29, r1
    1f98:	28 f0       	brcs	.+10     	; 0x1fa4 <udd_ctrl_in_sent+0x96>
    1f9a:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <b_shortpacket.5472>
    1f9e:	c0 e4       	ldi	r28, 0x40	; 64
    1fa0:	d0 e0       	ldi	r29, 0x00	; 0
    1fa2:	03 c0       	rjmp	.+6      	; 0x1faa <udd_ctrl_in_sent+0x9c>
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <b_shortpacket.5472>
    1faa:	ec e7       	ldi	r30, 0x7C	; 124
    1fac:	f2 e2       	ldi	r31, 0x22	; 34
    1fae:	c6 8b       	std	Z+22, r28	; 0x16
    1fb0:	d7 8b       	std	Z+23, r29	; 0x17
    1fb2:	80 91 75 22 	lds	r24, 0x2275	; 0x802275 <udd_ctrl_payload_nb_trans>
    1fb6:	90 91 76 22 	lds	r25, 0x2276	; 0x802276 <udd_ctrl_payload_nb_trans+0x1>
    1fba:	20 91 39 24 	lds	r18, 0x2439	; 0x802439 <udd_g_ctrlreq+0x8>
    1fbe:	30 91 3a 24 	lds	r19, 0x243A	; 0x80243a <udd_g_ctrlreq+0x9>
    1fc2:	28 0f       	add	r18, r24
    1fc4:	39 1f       	adc	r19, r25
    1fc6:	20 8f       	std	Z+24, r18	; 0x18
    1fc8:	31 8f       	std	Z+25, r19	; 0x19
    1fca:	c8 0f       	add	r28, r24
    1fcc:	d9 1f       	adc	r29, r25
    1fce:	c0 93 75 22 	sts	0x2275, r28	; 0x802275 <udd_ctrl_payload_nb_trans>
    1fd2:	d0 93 76 22 	sts	0x2276, r29	; 0x802276 <udd_ctrl_payload_nb_trans+0x1>
    1fd6:	e0 e9       	ldi	r30, 0x90	; 144
    1fd8:	f2 e2       	ldi	r31, 0x22	; 34
    1fda:	02 e0       	ldi	r16, 0x02	; 2
    1fdc:	06 93       	lac	Z, r16
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	0f 91       	pop	r16
    1fe4:	08 95       	ret

00001fe6 <udd_ep_get_size>:
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	81 81       	ldd	r24, Z+1	; 0x01
    1fea:	e8 2f       	mov	r30, r24
    1fec:	e7 70       	andi	r30, 0x07	; 7
    1fee:	8e 2f       	mov	r24, r30
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	31 97       	sbiw	r30, 0x01	; 1
    1ff6:	e7 30       	cpi	r30, 0x07	; 7
    1ff8:	f1 05       	cpc	r31, r1
    1ffa:	d8 f4       	brcc	.+54     	; 0x2032 <udd_ep_get_size+0x4c>
    1ffc:	88 27       	eor	r24, r24
    1ffe:	e2 50       	subi	r30, 0x02	; 2
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	8f 4f       	sbci	r24, 0xFF	; 255
    2004:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__tablejump2__>
    2008:	80 e1       	ldi	r24, 0x10	; 16
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	08 95       	ret
    200e:	80 e2       	ldi	r24, 0x20	; 32
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	08 95       	ret
    2014:	80 e4       	ldi	r24, 0x40	; 64
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	08 95       	ret
    201a:	80 e8       	ldi	r24, 0x80	; 128
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	08 95       	ret
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	91 e0       	ldi	r25, 0x01	; 1
    2024:	08 95       	ret
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	92 e0       	ldi	r25, 0x02	; 2
    202a:	08 95       	ret
    202c:	8f ef       	ldi	r24, 0xFF	; 255
    202e:	93 e0       	ldi	r25, 0x03	; 3
    2030:	08 95       	ret
    2032:	88 e0       	ldi	r24, 0x08	; 8
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	08 95       	ret

00002038 <udd_ep_get_job>:
    2038:	28 2f       	mov	r18, r24
    203a:	2f 70       	andi	r18, 0x0F	; 15
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	22 0f       	add	r18, r18
    2040:	33 1f       	adc	r19, r19
    2042:	08 2e       	mov	r0, r24
    2044:	00 0c       	add	r0, r0
    2046:	99 0b       	sbc	r25, r25
    2048:	88 27       	eor	r24, r24
    204a:	99 0f       	add	r25, r25
    204c:	88 1f       	adc	r24, r24
    204e:	99 27       	eor	r25, r25
    2050:	82 0f       	add	r24, r18
    2052:	93 1f       	adc	r25, r19
    2054:	02 97       	sbiw	r24, 0x02	; 2
    2056:	9c 01       	movw	r18, r24
    2058:	22 0f       	add	r18, r18
    205a:	33 1f       	adc	r19, r19
    205c:	22 0f       	add	r18, r18
    205e:	33 1f       	adc	r19, r19
    2060:	22 0f       	add	r18, r18
    2062:	33 1f       	adc	r19, r19
    2064:	82 0f       	add	r24, r18
    2066:	93 1f       	adc	r25, r19
    2068:	8f 5e       	subi	r24, 0xEF	; 239
    206a:	9d 4d       	sbci	r25, 0xDD	; 221
    206c:	08 95       	ret

0000206e <udd_ctrl_interrupt_tc_setup>:
    206e:	0f 93       	push	r16
    2070:	cf 93       	push	r28
    2072:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2076:	80 ff       	sbrs	r24, 0
    2078:	65 c0       	rjmp	.+202    	; 0x2144 <udd_ctrl_interrupt_tc_setup+0xd6>
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2080:	e8 e8       	ldi	r30, 0x88	; 136
    2082:	f2 e2       	ldi	r31, 0x22	; 34
    2084:	00 e8       	ldi	r16, 0x80	; 128
    2086:	06 93       	lac	Z, r16
    2088:	e0 e9       	ldi	r30, 0x90	; 144
    208a:	f2 e2       	ldi	r31, 0x22	; 34
    208c:	00 e8       	ldi	r16, 0x80	; 128
    208e:	06 93       	lac	Z, r16
    2090:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2094:	e8 e8       	ldi	r30, 0x88	; 136
    2096:	f2 e2       	ldi	r31, 0x22	; 34
    2098:	00 e1       	ldi	r16, 0x10	; 16
    209a:	06 93       	lac	Z, r16
    209c:	80 91 79 22 	lds	r24, 0x2279	; 0x802279 <udd_ep_control_state>
    20a0:	88 23       	and	r24, r24
    20a2:	29 f0       	breq	.+10     	; 0x20ae <udd_ctrl_interrupt_tc_setup+0x40>
    20a4:	83 50       	subi	r24, 0x03	; 3
    20a6:	82 30       	cpi	r24, 0x02	; 2
    20a8:	08 f4       	brcc	.+2      	; 0x20ac <udd_ctrl_interrupt_tc_setup+0x3e>
    20aa:	29 df       	rcall	.-430    	; 0x1efe <udd_ctrl_endofrequest>
    20ac:	e7 de       	rcall	.-562    	; 0x1e7c <udd_ctrl_init>
    20ae:	80 91 8a 22 	lds	r24, 0x228A	; 0x80228a <udd_sram+0xe>
    20b2:	90 91 8b 22 	lds	r25, 0x228B	; 0x80228b <udd_sram+0xf>
    20b6:	08 97       	sbiw	r24, 0x08	; 8
    20b8:	09 f0       	breq	.+2      	; 0x20bc <udd_ctrl_interrupt_tc_setup+0x4e>
    20ba:	46 c0       	rjmp	.+140    	; 0x2148 <udd_ctrl_interrupt_tc_setup+0xda>
    20bc:	88 e0       	ldi	r24, 0x08	; 8
    20be:	e5 e3       	ldi	r30, 0x35	; 53
    20c0:	f2 e2       	ldi	r31, 0x22	; 34
    20c2:	a1 e3       	ldi	r26, 0x31	; 49
    20c4:	b4 e2       	ldi	r27, 0x24	; 36
    20c6:	01 90       	ld	r0, Z+
    20c8:	0d 92       	st	X+, r0
    20ca:	8a 95       	dec	r24
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <udd_ctrl_interrupt_tc_setup+0x58>
    20ce:	e8 ec       	ldi	r30, 0xC8	; 200
    20d0:	f4 e0       	ldi	r31, 0x04	; 4
    20d2:	80 81       	ld	r24, Z
    20d4:	80 62       	ori	r24, 0x20	; 32
    20d6:	80 83       	st	Z, r24
    20d8:	80 81       	ld	r24, Z
    20da:	80 62       	ori	r24, 0x20	; 32
    20dc:	80 83       	st	Z, r24
    20de:	0e 94 57 20 	call	0x40ae	; 0x40ae <udc_process_setup>
    20e2:	c8 2f       	mov	r28, r24
    20e4:	81 11       	cpse	r24, r1
    20e6:	03 c0       	rjmp	.+6      	; 0x20ee <udd_ctrl_interrupt_tc_setup+0x80>
    20e8:	ee de       	rcall	.-548    	; 0x1ec6 <udd_ctrl_stall_data>
    20ea:	c1 e0       	ldi	r28, 0x01	; 1
    20ec:	2e c0       	rjmp	.+92     	; 0x214a <udd_ctrl_interrupt_tc_setup+0xdc>
    20ee:	80 91 31 24 	lds	r24, 0x2431	; 0x802431 <udd_g_ctrlreq>
    20f2:	88 23       	and	r24, r24
    20f4:	6c f4       	brge	.+26     	; 0x2110 <udd_ctrl_interrupt_tc_setup+0xa2>
    20f6:	10 92 77 22 	sts	0x2277, r1	; 0x802277 <udd_ctrl_prev_payload_nb_trans>
    20fa:	10 92 78 22 	sts	0x2278, r1	; 0x802278 <udd_ctrl_prev_payload_nb_trans+0x1>
    20fe:	10 92 75 22 	sts	0x2275, r1	; 0x802275 <udd_ctrl_payload_nb_trans>
    2102:	10 92 76 22 	sts	0x2276, r1	; 0x802276 <udd_ctrl_payload_nb_trans+0x1>
    2106:	82 e0       	ldi	r24, 0x02	; 2
    2108:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <udd_ep_control_state>
    210c:	00 df       	rcall	.-512    	; 0x1f0e <udd_ctrl_in_sent>
    210e:	1d c0       	rjmp	.+58     	; 0x214a <udd_ctrl_interrupt_tc_setup+0xdc>
    2110:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    2114:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    2118:	89 2b       	or	r24, r25
    211a:	11 f4       	brne	.+4      	; 0x2120 <udd_ctrl_interrupt_tc_setup+0xb2>
    211c:	e2 de       	rcall	.-572    	; 0x1ee2 <udd_ctrl_send_zlp_in>
    211e:	15 c0       	rjmp	.+42     	; 0x214a <udd_ctrl_interrupt_tc_setup+0xdc>
    2120:	10 92 77 22 	sts	0x2277, r1	; 0x802277 <udd_ctrl_prev_payload_nb_trans>
    2124:	10 92 78 22 	sts	0x2278, r1	; 0x802278 <udd_ctrl_prev_payload_nb_trans+0x1>
    2128:	10 92 75 22 	sts	0x2275, r1	; 0x802275 <udd_ctrl_payload_nb_trans>
    212c:	10 92 76 22 	sts	0x2276, r1	; 0x802276 <udd_ctrl_payload_nb_trans+0x1>
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <udd_ep_control_state>
    2136:	e8 e8       	ldi	r30, 0x88	; 136
    2138:	f2 e2       	ldi	r31, 0x22	; 34
    213a:	02 e0       	ldi	r16, 0x02	; 2
    213c:	06 93       	lac	Z, r16
    213e:	00 e2       	ldi	r16, 0x20	; 32
    2140:	06 93       	lac	Z, r16
    2142:	03 c0       	rjmp	.+6      	; 0x214a <udd_ctrl_interrupt_tc_setup+0xdc>
    2144:	c0 e0       	ldi	r28, 0x00	; 0
    2146:	01 c0       	rjmp	.+2      	; 0x214a <udd_ctrl_interrupt_tc_setup+0xdc>
    2148:	c1 e0       	ldi	r28, 0x01	; 1
    214a:	8c 2f       	mov	r24, r28
    214c:	cf 91       	pop	r28
    214e:	0f 91       	pop	r16
    2150:	08 95       	ret

00002152 <udd_ep_trans_complet>:
    2152:	8f 92       	push	r8
    2154:	9f 92       	push	r9
    2156:	af 92       	push	r10
    2158:	bf 92       	push	r11
    215a:	df 92       	push	r13
    215c:	ef 92       	push	r14
    215e:	ff 92       	push	r15
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	d8 2e       	mov	r13, r24
    216a:	66 df       	rcall	.-308    	; 0x2038 <udd_ep_get_job>
    216c:	8c 01       	movw	r16, r24
    216e:	cd 2d       	mov	r28, r13
    2170:	cf 70       	andi	r28, 0x0F	; 15
    2172:	d0 e0       	ldi	r29, 0x00	; 0
    2174:	ce 01       	movw	r24, r28
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	cd 2d       	mov	r28, r13
    217c:	0d 2c       	mov	r0, r13
    217e:	00 0c       	add	r0, r0
    2180:	dd 0b       	sbc	r29, r29
    2182:	cc 27       	eor	r28, r28
    2184:	dd 0f       	add	r29, r29
    2186:	cc 1f       	adc	r28, r28
    2188:	dd 27       	eor	r29, r29
    218a:	c8 0f       	add	r28, r24
    218c:	d9 1f       	adc	r29, r25
    218e:	ce 01       	movw	r24, r28
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	9c 01       	movw	r18, r24
    219e:	28 57       	subi	r18, 0x78	; 120
    21a0:	3d 4d       	sbci	r19, 0xDD	; 221
    21a2:	79 01       	movw	r14, r18
    21a4:	c9 01       	movw	r24, r18
    21a6:	1f df       	rcall	.-450    	; 0x1fe6 <udd_ep_get_size>
    21a8:	4c 01       	movw	r8, r24
    21aa:	dd 20       	and	r13, r13
    21ac:	0c f0       	brlt	.+2      	; 0x21b0 <udd_ep_trans_complet+0x5e>
    21ae:	7b c0       	rjmp	.+246    	; 0x22a6 <udd_ep_trans_complet+0x154>
    21b0:	fe 01       	movw	r30, r28
    21b2:	ee 0f       	add	r30, r30
    21b4:	ff 1f       	adc	r31, r31
    21b6:	ee 0f       	add	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	e4 58       	subi	r30, 0x84	; 132
    21c0:	fd 4d       	sbci	r31, 0xDD	; 221
    21c2:	22 89       	ldd	r18, Z+18	; 0x12
    21c4:	33 89       	ldd	r19, Z+19	; 0x13
    21c6:	d8 01       	movw	r26, r16
    21c8:	15 96       	adiw	r26, 0x05	; 5
    21ca:	8d 91       	ld	r24, X+
    21cc:	9c 91       	ld	r25, X
    21ce:	16 97       	sbiw	r26, 0x06	; 6
    21d0:	82 0f       	add	r24, r18
    21d2:	93 1f       	adc	r25, r19
    21d4:	15 96       	adiw	r26, 0x05	; 5
    21d6:	8d 93       	st	X+, r24
    21d8:	9c 93       	st	X, r25
    21da:	16 97       	sbiw	r26, 0x06	; 6
    21dc:	13 96       	adiw	r26, 0x03	; 3
    21de:	2d 91       	ld	r18, X+
    21e0:	3c 91       	ld	r19, X
    21e2:	14 97       	sbiw	r26, 0x04	; 4
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	09 f4       	brne	.+2      	; 0x21ec <udd_ep_trans_complet+0x9a>
    21ea:	47 c0       	rjmp	.+142    	; 0x227a <udd_ep_trans_complet+0x128>
    21ec:	28 1b       	sub	r18, r24
    21ee:	39 0b       	sbc	r19, r25
    21f0:	21 15       	cp	r18, r1
    21f2:	b4 e0       	ldi	r27, 0x04	; 4
    21f4:	3b 07       	cpc	r19, r27
    21f6:	40 f0       	brcs	.+16     	; 0x2208 <udd_ep_trans_complet+0xb6>
    21f8:	2f ef       	ldi	r18, 0xFF	; 255
    21fa:	33 e0       	ldi	r19, 0x03	; 3
    21fc:	c9 01       	movw	r24, r18
    21fe:	b4 01       	movw	r22, r8
    2200:	0e 94 87 23 	call	0x470e	; 0x470e <__udivmodhi4>
    2204:	28 1b       	sub	r18, r24
    2206:	39 0b       	sbc	r19, r25
    2208:	f8 01       	movw	r30, r16
    220a:	80 81       	ld	r24, Z
    220c:	81 ff       	sbrs	r24, 1
    220e:	0a c0       	rjmp	.+20     	; 0x2224 <udd_ep_trans_complet+0xd2>
    2210:	c9 01       	movw	r24, r18
    2212:	b4 01       	movw	r22, r8
    2214:	0e 94 87 23 	call	0x470e	; 0x470e <__udivmodhi4>
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	89 2b       	or	r24, r25
    221c:	09 f0       	breq	.+2      	; 0x2220 <udd_ep_trans_complet+0xce>
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	84 2f       	mov	r24, r20
    2222:	01 c0       	rjmp	.+2      	; 0x2226 <udd_ep_trans_complet+0xd4>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	d8 01       	movw	r26, r16
    2228:	9c 91       	ld	r25, X
    222a:	80 fb       	bst	r24, 0
    222c:	91 f9       	bld	r25, 1
    222e:	9c 93       	st	X, r25
    2230:	fe 01       	movw	r30, r28
    2232:	ee 0f       	add	r30, r30
    2234:	ff 1f       	adc	r31, r31
    2236:	ee 0f       	add	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	ee 0f       	add	r30, r30
    223c:	ff 1f       	adc	r31, r31
    223e:	e4 58       	subi	r30, 0x84	; 132
    2240:	fd 4d       	sbci	r31, 0xDD	; 221
    2242:	12 8a       	std	Z+18, r1	; 0x12
    2244:	13 8a       	std	Z+19, r1	; 0x13
    2246:	26 87       	std	Z+14, r18	; 0x0e
    2248:	37 87       	std	Z+15, r19	; 0x0f
    224a:	11 96       	adiw	r26, 0x01	; 1
    224c:	2d 91       	ld	r18, X+
    224e:	3c 91       	ld	r19, X
    2250:	12 97       	sbiw	r26, 0x02	; 2
    2252:	15 96       	adiw	r26, 0x05	; 5
    2254:	8d 91       	ld	r24, X+
    2256:	9c 91       	ld	r25, X
    2258:	16 97       	sbiw	r26, 0x06	; 6
    225a:	82 0f       	add	r24, r18
    225c:	93 1f       	adc	r25, r19
    225e:	cc 0f       	add	r28, r28
    2260:	dd 1f       	adc	r29, r29
    2262:	cc 0f       	add	r28, r28
    2264:	dd 1f       	adc	r29, r29
    2266:	cc 0f       	add	r28, r28
    2268:	dd 1f       	adc	r29, r29
    226a:	c4 57       	subi	r28, 0x74	; 116
    226c:	dd 4d       	sbci	r29, 0xDD	; 221
    226e:	88 83       	st	Y, r24
    2270:	99 83       	std	Y+1, r25	; 0x01
    2272:	f7 01       	movw	r30, r14
    2274:	02 e0       	ldi	r16, 0x02	; 2
    2276:	06 93       	lac	Z, r16
    2278:	e4 c0       	rjmp	.+456    	; 0x2442 <udd_ep_trans_complet+0x2f0>
    227a:	d8 01       	movw	r26, r16
    227c:	8c 91       	ld	r24, X
    227e:	81 ff       	sbrs	r24, 1
    2280:	cd c0       	rjmp	.+410    	; 0x241c <udd_ep_trans_complet+0x2ca>
    2282:	8d 7f       	andi	r24, 0xFD	; 253
    2284:	8c 93       	st	X, r24
    2286:	cc 0f       	add	r28, r28
    2288:	dd 1f       	adc	r29, r29
    228a:	cc 0f       	add	r28, r28
    228c:	dd 1f       	adc	r29, r29
    228e:	cc 0f       	add	r28, r28
    2290:	dd 1f       	adc	r29, r29
    2292:	c4 58       	subi	r28, 0x84	; 132
    2294:	dd 4d       	sbci	r29, 0xDD	; 221
    2296:	1a 8a       	std	Y+18, r1	; 0x12
    2298:	1b 8a       	std	Y+19, r1	; 0x13
    229a:	1e 86       	std	Y+14, r1	; 0x0e
    229c:	1f 86       	std	Y+15, r1	; 0x0f
    229e:	f7 01       	movw	r30, r14
    22a0:	02 e0       	ldi	r16, 0x02	; 2
    22a2:	06 93       	lac	Z, r16
    22a4:	ce c0       	rjmp	.+412    	; 0x2442 <udd_ep_trans_complet+0x2f0>
    22a6:	fe 01       	movw	r30, r28
    22a8:	ee 0f       	add	r30, r30
    22aa:	ff 1f       	adc	r31, r31
    22ac:	ee 0f       	add	r30, r30
    22ae:	ff 1f       	adc	r31, r31
    22b0:	ee 0f       	add	r30, r30
    22b2:	ff 1f       	adc	r31, r31
    22b4:	e4 58       	subi	r30, 0x84	; 132
    22b6:	fd 4d       	sbci	r31, 0xDD	; 221
    22b8:	a6 84       	ldd	r10, Z+14	; 0x0e
    22ba:	b7 84       	ldd	r11, Z+15	; 0x0f
    22bc:	d8 01       	movw	r26, r16
    22be:	8c 91       	ld	r24, X
    22c0:	82 ff       	sbrs	r24, 2
    22c2:	1b c0       	rjmp	.+54     	; 0x22fa <udd_ep_trans_complet+0x1a8>
    22c4:	11 96       	adiw	r26, 0x01	; 1
    22c6:	ed 91       	ld	r30, X+
    22c8:	fc 91       	ld	r31, X
    22ca:	12 97       	sbiw	r26, 0x02	; 2
    22cc:	15 96       	adiw	r26, 0x05	; 5
    22ce:	2d 91       	ld	r18, X+
    22d0:	3c 91       	ld	r19, X
    22d2:	16 97       	sbiw	r26, 0x06	; 6
    22d4:	13 96       	adiw	r26, 0x03	; 3
    22d6:	8d 91       	ld	r24, X+
    22d8:	9c 91       	ld	r25, X
    22da:	14 97       	sbiw	r26, 0x04	; 4
    22dc:	b4 01       	movw	r22, r8
    22de:	0e 94 87 23 	call	0x470e	; 0x470e <__udivmodhi4>
    22e2:	b0 e4       	ldi	r27, 0x40	; 64
    22e4:	db 9e       	mul	r13, r27
    22e6:	b0 01       	movw	r22, r0
    22e8:	11 24       	eor	r1, r1
    22ea:	6f 5a       	subi	r22, 0xAF	; 175
    22ec:	7e 4d       	sbci	r23, 0xDE	; 222
    22ee:	ac 01       	movw	r20, r24
    22f0:	cf 01       	movw	r24, r30
    22f2:	82 0f       	add	r24, r18
    22f4:	93 1f       	adc	r25, r19
    22f6:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <memcpy>
    22fa:	f8 01       	movw	r30, r16
    22fc:	25 81       	ldd	r18, Z+5	; 0x05
    22fe:	36 81       	ldd	r19, Z+6	; 0x06
    2300:	2a 0d       	add	r18, r10
    2302:	3b 1d       	adc	r19, r11
    2304:	25 83       	std	Z+5, r18	; 0x05
    2306:	36 83       	std	Z+6, r19	; 0x06
    2308:	83 81       	ldd	r24, Z+3	; 0x03
    230a:	94 81       	ldd	r25, Z+4	; 0x04
    230c:	82 17       	cp	r24, r18
    230e:	93 07       	cpc	r25, r19
    2310:	68 f4       	brcc	.+26     	; 0x232c <udd_ep_trans_complet+0x1da>
    2312:	85 83       	std	Z+5, r24	; 0x05
    2314:	96 83       	std	Z+6, r25	; 0x06
    2316:	cc 0f       	add	r28, r28
    2318:	dd 1f       	adc	r29, r29
    231a:	cc 0f       	add	r28, r28
    231c:	dd 1f       	adc	r29, r29
    231e:	cc 0f       	add	r28, r28
    2320:	dd 1f       	adc	r29, r29
    2322:	c4 58       	subi	r28, 0x84	; 132
    2324:	dd 4d       	sbci	r29, 0xDD	; 221
    2326:	8a 89       	ldd	r24, Y+18	; 0x12
    2328:	9b 89       	ldd	r25, Y+19	; 0x13
    232a:	78 c0       	rjmp	.+240    	; 0x241c <udd_ep_trans_complet+0x2ca>
    232c:	fe 01       	movw	r30, r28
    232e:	ee 0f       	add	r30, r30
    2330:	ff 1f       	adc	r31, r31
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	e4 58       	subi	r30, 0x84	; 132
    233c:	fd 4d       	sbci	r31, 0xDD	; 221
    233e:	42 89       	ldd	r20, Z+18	; 0x12
    2340:	53 89       	ldd	r21, Z+19	; 0x13
    2342:	a4 16       	cp	r10, r20
    2344:	b5 06       	cpc	r11, r21
    2346:	09 f0       	breq	.+2      	; 0x234a <udd_ep_trans_complet+0x1f8>
    2348:	69 c0       	rjmp	.+210    	; 0x241c <udd_ep_trans_complet+0x2ca>
    234a:	28 17       	cp	r18, r24
    234c:	39 07       	cpc	r19, r25
    234e:	09 f4       	brne	.+2      	; 0x2352 <udd_ep_trans_complet+0x200>
    2350:	65 c0       	rjmp	.+202    	; 0x241c <udd_ep_trans_complet+0x2ca>
    2352:	ac 01       	movw	r20, r24
    2354:	42 1b       	sub	r20, r18
    2356:	53 0b       	sbc	r21, r19
    2358:	9a 01       	movw	r18, r20
    235a:	21 15       	cp	r18, r1
    235c:	54 e0       	ldi	r21, 0x04	; 4
    235e:	35 07       	cpc	r19, r21
    2360:	48 f0       	brcs	.+18     	; 0x2374 <udd_ep_trans_complet+0x222>
    2362:	2f ef       	ldi	r18, 0xFF	; 255
    2364:	33 e0       	ldi	r19, 0x03	; 3
    2366:	c9 01       	movw	r24, r18
    2368:	b4 01       	movw	r22, r8
    236a:	0e 94 87 23 	call	0x470e	; 0x470e <__udivmodhi4>
    236e:	28 1b       	sub	r18, r24
    2370:	39 0b       	sbc	r19, r25
    2372:	06 c0       	rjmp	.+12     	; 0x2380 <udd_ep_trans_complet+0x22e>
    2374:	c9 01       	movw	r24, r18
    2376:	b4 01       	movw	r22, r8
    2378:	0e 94 87 23 	call	0x470e	; 0x470e <__udivmodhi4>
    237c:	28 1b       	sub	r18, r24
    237e:	39 0b       	sbc	r19, r25
    2380:	fe 01       	movw	r30, r28
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	ee 0f       	add	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	ee 0f       	add	r30, r30
    238c:	ff 1f       	adc	r31, r31
    238e:	e4 58       	subi	r30, 0x84	; 132
    2390:	fd 4d       	sbci	r31, 0xDD	; 221
    2392:	16 86       	std	Z+14, r1	; 0x0e
    2394:	17 86       	std	Z+15, r1	; 0x0f
    2396:	28 15       	cp	r18, r8
    2398:	39 05       	cpc	r19, r9
    239a:	00 f5       	brcc	.+64     	; 0x23dc <udd_ep_trans_complet+0x28a>
    239c:	d8 01       	movw	r26, r16
    239e:	8c 91       	ld	r24, X
    23a0:	84 60       	ori	r24, 0x04	; 4
    23a2:	8c 93       	st	X, r24
    23a4:	b0 e4       	ldi	r27, 0x40	; 64
    23a6:	db 9e       	mul	r13, r27
    23a8:	c0 01       	movw	r24, r0
    23aa:	11 24       	eor	r1, r1
    23ac:	8f 5a       	subi	r24, 0xAF	; 175
    23ae:	9e 4d       	sbci	r25, 0xDE	; 222
    23b0:	fe 01       	movw	r30, r28
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	e4 57       	subi	r30, 0x74	; 116
    23c0:	fd 4d       	sbci	r31, 0xDD	; 221
    23c2:	80 83       	st	Z, r24
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	cc 0f       	add	r28, r28
    23c8:	dd 1f       	adc	r29, r29
    23ca:	cc 0f       	add	r28, r28
    23cc:	dd 1f       	adc	r29, r29
    23ce:	cc 0f       	add	r28, r28
    23d0:	dd 1f       	adc	r29, r29
    23d2:	c4 58       	subi	r28, 0x84	; 132
    23d4:	dd 4d       	sbci	r29, 0xDD	; 221
    23d6:	8a 8a       	std	Y+18, r8	; 0x12
    23d8:	9b 8a       	std	Y+19, r9	; 0x13
    23da:	1c c0       	rjmp	.+56     	; 0x2414 <udd_ep_trans_complet+0x2c2>
    23dc:	f8 01       	movw	r30, r16
    23de:	41 81       	ldd	r20, Z+1	; 0x01
    23e0:	52 81       	ldd	r21, Z+2	; 0x02
    23e2:	85 81       	ldd	r24, Z+5	; 0x05
    23e4:	96 81       	ldd	r25, Z+6	; 0x06
    23e6:	84 0f       	add	r24, r20
    23e8:	95 1f       	adc	r25, r21
    23ea:	fe 01       	movw	r30, r28
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	ee 0f       	add	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	ee 0f       	add	r30, r30
    23f6:	ff 1f       	adc	r31, r31
    23f8:	e4 57       	subi	r30, 0x74	; 116
    23fa:	fd 4d       	sbci	r31, 0xDD	; 221
    23fc:	80 83       	st	Z, r24
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	cc 0f       	add	r28, r28
    2402:	dd 1f       	adc	r29, r29
    2404:	cc 0f       	add	r28, r28
    2406:	dd 1f       	adc	r29, r29
    2408:	cc 0f       	add	r28, r28
    240a:	dd 1f       	adc	r29, r29
    240c:	c4 58       	subi	r28, 0x84	; 132
    240e:	dd 4d       	sbci	r29, 0xDD	; 221
    2410:	2a 8b       	std	Y+18, r18	; 0x12
    2412:	3b 8b       	std	Y+19, r19	; 0x13
    2414:	f7 01       	movw	r30, r14
    2416:	02 e0       	ldi	r16, 0x02	; 2
    2418:	06 93       	lac	Z, r16
    241a:	13 c0       	rjmp	.+38     	; 0x2442 <udd_ep_trans_complet+0x2f0>
    241c:	d8 01       	movw	r26, r16
    241e:	8c 91       	ld	r24, X
    2420:	80 ff       	sbrs	r24, 0
    2422:	0f c0       	rjmp	.+30     	; 0x2442 <udd_ep_trans_complet+0x2f0>
    2424:	8e 7f       	andi	r24, 0xFE	; 254
    2426:	8c 93       	st	X, r24
    2428:	17 96       	adiw	r26, 0x07	; 7
    242a:	ed 91       	ld	r30, X+
    242c:	fc 91       	ld	r31, X
    242e:	18 97       	sbiw	r26, 0x08	; 8
    2430:	30 97       	sbiw	r30, 0x00	; 0
    2432:	39 f0       	breq	.+14     	; 0x2442 <udd_ep_trans_complet+0x2f0>
    2434:	15 96       	adiw	r26, 0x05	; 5
    2436:	6d 91       	ld	r22, X+
    2438:	7c 91       	ld	r23, X
    243a:	16 97       	sbiw	r26, 0x06	; 6
    243c:	4d 2d       	mov	r20, r13
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	19 95       	eicall
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	df 90       	pop	r13
    2450:	bf 90       	pop	r11
    2452:	af 90       	pop	r10
    2454:	9f 90       	pop	r9
    2456:	8f 90       	pop	r8
    2458:	08 95       	ret

0000245a <udd_attach>:
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	1f 92       	push	r1
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	8f b7       	in	r24, 0x3f	; 63
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	f8 94       	cli
    246c:	19 81       	ldd	r17, Y+1	; 0x01
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	cd dc       	rcall	.-1638   	; 0x1e0c <udd_sleep_mode>
    2472:	ea ec       	ldi	r30, 0xCA	; 202
    2474:	f4 e0       	ldi	r31, 0x04	; 4
    2476:	80 e4       	ldi	r24, 0x40	; 64
    2478:	80 83       	st	Z, r24
    247a:	80 e2       	ldi	r24, 0x20	; 32
    247c:	80 83       	st	Z, r24
    247e:	e1 ec       	ldi	r30, 0xC1	; 193
    2480:	f4 e0       	ldi	r31, 0x04	; 4
    2482:	80 81       	ld	r24, Z
    2484:	81 60       	ori	r24, 0x01	; 1
    2486:	80 83       	st	Z, r24
    2488:	a9 ec       	ldi	r26, 0xC9	; 201
    248a:	b4 e0       	ldi	r27, 0x04	; 4
    248c:	8c 91       	ld	r24, X
    248e:	82 60       	ori	r24, 0x02	; 2
    2490:	8c 93       	st	X, r24
    2492:	e8 ec       	ldi	r30, 0xC8	; 200
    2494:	f4 e0       	ldi	r31, 0x04	; 4
    2496:	80 81       	ld	r24, Z
    2498:	80 64       	ori	r24, 0x40	; 64
    249a:	80 83       	st	Z, r24
    249c:	8c 91       	ld	r24, X
    249e:	81 60       	ori	r24, 0x01	; 1
    24a0:	8c 93       	st	X, r24
    24a2:	80 81       	ld	r24, Z
    24a4:	80 68       	ori	r24, 0x80	; 128
    24a6:	80 83       	st	Z, r24
    24a8:	1f bf       	out	0x3f, r17	; 63
    24aa:	0f 90       	pop	r0
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	08 95       	ret

000024b4 <udd_enable>:
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	1f 92       	push	r1
    24be:	1f 92       	push	r1
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	00 e6       	ldi	r16, 0x60	; 96
    24c6:	10 e0       	ldi	r17, 0x00	; 0
    24c8:	f8 01       	movw	r30, r16
    24ca:	10 82       	st	Z, r1
    24cc:	80 e3       	ldi	r24, 0x30	; 48
    24ce:	0e 94 9b 1b 	call	0x3736	; 0x3736 <sysclk_enable_usb>
    24d2:	e0 ec       	ldi	r30, 0xC0	; 192
    24d4:	f4 e0       	ldi	r31, 0x04	; 4
    24d6:	80 81       	ld	r24, Z
    24d8:	80 64       	ori	r24, 0x40	; 64
    24da:	80 83       	st	Z, r24
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	f8 01       	movw	r30, r16
    24e0:	80 83       	st	Z, r24
    24e2:	8f b7       	in	r24, 0x3f	; 63
    24e4:	8a 83       	std	Y+2, r24	; 0x02
    24e6:	f8 94       	cli
    24e8:	1a 81       	ldd	r17, Y+2	; 0x02
    24ea:	ec e7       	ldi	r30, 0x7C	; 124
    24ec:	f2 e2       	ldi	r31, 0x22	; 34
    24ee:	15 86       	std	Z+13, r1	; 0x0d
    24f0:	15 8a       	std	Z+21, r1	; 0x15
    24f2:	15 8e       	std	Z+29, r1	; 0x1d
    24f4:	15 a2       	std	Z+37, r1	; 0x25
    24f6:	15 a6       	std	Z+45, r1	; 0x2d
    24f8:	15 aa       	std	Z+53, r1	; 0x35
    24fa:	e1 e1       	ldi	r30, 0x11	; 17
    24fc:	f2 e2       	ldi	r31, 0x22	; 34
    24fe:	80 81       	ld	r24, Z
    2500:	8e 7f       	andi	r24, 0xFE	; 254
    2502:	80 83       	st	Z, r24
    2504:	ea e1       	ldi	r30, 0x1A	; 26
    2506:	f2 e2       	ldi	r31, 0x22	; 34
    2508:	80 81       	ld	r24, Z
    250a:	8e 7f       	andi	r24, 0xFE	; 254
    250c:	80 83       	st	Z, r24
    250e:	e3 e2       	ldi	r30, 0x23	; 35
    2510:	f2 e2       	ldi	r31, 0x22	; 34
    2512:	80 81       	ld	r24, Z
    2514:	8e 7f       	andi	r24, 0xFE	; 254
    2516:	80 83       	st	Z, r24
    2518:	ec e2       	ldi	r30, 0x2C	; 44
    251a:	f2 e2       	ldi	r31, 0x22	; 34
    251c:	80 81       	ld	r24, Z
    251e:	8e 7f       	andi	r24, 0xFE	; 254
    2520:	80 83       	st	Z, r24
    2522:	6a e1       	ldi	r22, 0x1A	; 26
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	0e 94 77 23 	call	0x46ee	; 0x46ee <nvm_read_byte>
    252c:	8f 3f       	cpi	r24, 0xFF	; 255
    252e:	19 f0       	breq	.+6      	; 0x2536 <udd_enable+0x82>
    2530:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2534:	03 c0       	rjmp	.+6      	; 0x253c <udd_enable+0x88>
    2536:	8f e1       	ldi	r24, 0x1F	; 31
    2538:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    253c:	6b e1       	ldi	r22, 0x1B	; 27
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	0e 94 77 23 	call	0x46ee	; 0x46ee <nvm_read_byte>
    2546:	8f 3f       	cpi	r24, 0xFF	; 255
    2548:	19 f0       	breq	.+6      	; 0x2550 <udd_enable+0x9c>
    254a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    254e:	03 c0       	rjmp	.+6      	; 0x2556 <udd_enable+0xa2>
    2550:	8f e1       	ldi	r24, 0x1F	; 31
    2552:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2556:	e0 ec       	ldi	r30, 0xC0	; 192
    2558:	f4 e0       	ldi	r31, 0x04	; 4
    255a:	80 81       	ld	r24, Z
    255c:	82 60       	ori	r24, 0x02	; 2
    255e:	80 83       	st	Z, r24
    2560:	80 81       	ld	r24, Z
    2562:	80 68       	ori	r24, 0x80	; 128
    2564:	80 83       	st	Z, r24
    2566:	80 81       	ld	r24, Z
    2568:	80 61       	ori	r24, 0x10	; 16
    256a:	80 83       	st	Z, r24
    256c:	88 e8       	ldi	r24, 0x88	; 136
    256e:	92 e2       	ldi	r25, 0x22	; 34
    2570:	86 83       	std	Z+6, r24	; 0x06
    2572:	97 83       	std	Z+7, r25	; 0x07
    2574:	80 81       	ld	r24, Z
    2576:	80 62       	ori	r24, 0x20	; 32
    2578:	80 83       	st	Z, r24
    257a:	8f ef       	ldi	r24, 0xFF	; 255
    257c:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2580:	e8 ec       	ldi	r30, 0xC8	; 200
    2582:	f4 e0       	ldi	r31, 0x04	; 4
    2584:	80 81       	ld	r24, Z
    2586:	81 60       	ori	r24, 0x01	; 1
    2588:	80 83       	st	Z, r24
    258a:	10 92 bc 22 	sts	0x22BC, r1	; 0x8022bc <udd_b_idle>
    258e:	80 91 46 24 	lds	r24, 0x2446	; 0x802446 <sleepmgr_locks+0x5>
    2592:	8f 3f       	cpi	r24, 0xFF	; 255
    2594:	09 f4       	brne	.+2      	; 0x2598 <udd_enable+0xe4>
    2596:	ff cf       	rjmp	.-2      	; 0x2596 <udd_enable+0xe2>
    2598:	8f b7       	in	r24, 0x3f	; 63
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	f8 94       	cli
    259e:	99 81       	ldd	r25, Y+1	; 0x01
    25a0:	e1 e4       	ldi	r30, 0x41	; 65
    25a2:	f4 e2       	ldi	r31, 0x24	; 36
    25a4:	85 81       	ldd	r24, Z+5	; 0x05
    25a6:	8f 5f       	subi	r24, 0xFF	; 255
    25a8:	85 83       	std	Z+5, r24	; 0x05
    25aa:	9f bf       	out	0x3f, r25	; 63
    25ac:	56 df       	rcall	.-340    	; 0x245a <udd_attach>
    25ae:	1f bf       	out	0x3f, r17	; 63
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	1f 91       	pop	r17
    25ba:	0f 91       	pop	r16
    25bc:	08 95       	ret

000025be <udd_is_high_speed>:
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	08 95       	ret

000025c2 <udd_set_address>:
    25c2:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    25c6:	08 95       	ret

000025c8 <udd_getaddress>:
    25c8:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    25cc:	08 95       	ret

000025ce <udd_get_frame_number>:
    25ce:	80 91 b8 22 	lds	r24, 0x22B8	; 0x8022b8 <udd_sram+0x3c>
    25d2:	90 91 b9 22 	lds	r25, 0x22B9	; 0x8022b9 <udd_sram+0x3d>
    25d6:	08 95       	ret

000025d8 <udd_get_micro_frame_number>:
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	08 95       	ret

000025de <udd_set_setup_payload>:
    25de:	e1 e3       	ldi	r30, 0x31	; 49
    25e0:	f4 e2       	ldi	r31, 0x24	; 36
    25e2:	80 87       	std	Z+8, r24	; 0x08
    25e4:	91 87       	std	Z+9, r25	; 0x09
    25e6:	62 87       	std	Z+10, r22	; 0x0a
    25e8:	73 87       	std	Z+11, r23	; 0x0b
    25ea:	08 95       	ret

000025ec <udd_ep_alloc>:
    25ec:	28 2f       	mov	r18, r24
    25ee:	2f 70       	andi	r18, 0x0F	; 15
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	22 0f       	add	r18, r18
    25f4:	33 1f       	adc	r19, r19
    25f6:	08 2e       	mov	r0, r24
    25f8:	00 0c       	add	r0, r0
    25fa:	99 0b       	sbc	r25, r25
    25fc:	88 27       	eor	r24, r24
    25fe:	99 0f       	add	r25, r25
    2600:	88 1f       	adc	r24, r24
    2602:	99 27       	eor	r25, r25
    2604:	82 0f       	add	r24, r18
    2606:	93 1f       	adc	r25, r19
    2608:	fc 01       	movw	r30, r24
    260a:	ee 0f       	add	r30, r30
    260c:	ff 1f       	adc	r31, r31
    260e:	ee 0f       	add	r30, r30
    2610:	ff 1f       	adc	r31, r31
    2612:	ee 0f       	add	r30, r30
    2614:	ff 1f       	adc	r31, r31
    2616:	e4 58       	subi	r30, 0x84	; 132
    2618:	fd 4d       	sbci	r31, 0xDD	; 221
    261a:	25 85       	ldd	r18, Z+13	; 0x0d
    261c:	20 7c       	andi	r18, 0xC0	; 192
    261e:	09 f0       	breq	.+2      	; 0x2622 <udd_ep_alloc+0x36>
    2620:	69 c0       	rjmp	.+210    	; 0x26f4 <udd_ep_alloc+0x108>
    2622:	63 70       	andi	r22, 0x03	; 3
    2624:	61 30       	cpi	r22, 0x01	; 1
    2626:	11 f0       	breq	.+4      	; 0x262c <udd_ep_alloc+0x40>
    2628:	18 f4       	brcc	.+6      	; 0x2630 <udd_ep_alloc+0x44>
    262a:	04 c0       	rjmp	.+8      	; 0x2634 <udd_ep_alloc+0x48>
    262c:	60 ec       	ldi	r22, 0xC0	; 192
    262e:	03 c0       	rjmp	.+6      	; 0x2636 <udd_ep_alloc+0x4a>
    2630:	60 e8       	ldi	r22, 0x80	; 128
    2632:	01 c0       	rjmp	.+2      	; 0x2636 <udd_ep_alloc+0x4a>
    2634:	60 e4       	ldi	r22, 0x40	; 64
    2636:	40 38       	cpi	r20, 0x80	; 128
    2638:	51 05       	cpc	r21, r1
    263a:	e9 f0       	breq	.+58     	; 0x2676 <udd_ep_alloc+0x8a>
    263c:	50 f4       	brcc	.+20     	; 0x2652 <udd_ep_alloc+0x66>
    263e:	40 32       	cpi	r20, 0x20	; 32
    2640:	51 05       	cpc	r21, r1
    2642:	a9 f0       	breq	.+42     	; 0x266e <udd_ep_alloc+0x82>
    2644:	40 34       	cpi	r20, 0x40	; 64
    2646:	51 05       	cpc	r21, r1
    2648:	a1 f0       	breq	.+40     	; 0x2672 <udd_ep_alloc+0x86>
    264a:	40 31       	cpi	r20, 0x10	; 16
    264c:	51 05       	cpc	r21, r1
    264e:	d9 f4       	brne	.+54     	; 0x2686 <udd_ep_alloc+0x9a>
    2650:	0c c0       	rjmp	.+24     	; 0x266a <udd_ep_alloc+0x7e>
    2652:	41 15       	cp	r20, r1
    2654:	22 e0       	ldi	r18, 0x02	; 2
    2656:	52 07       	cpc	r21, r18
    2658:	91 f0       	breq	.+36     	; 0x267e <udd_ep_alloc+0x92>
    265a:	4f 3f       	cpi	r20, 0xFF	; 255
    265c:	23 e0       	ldi	r18, 0x03	; 3
    265e:	52 07       	cpc	r21, r18
    2660:	81 f0       	breq	.+32     	; 0x2682 <udd_ep_alloc+0x96>
    2662:	41 15       	cp	r20, r1
    2664:	51 40       	sbci	r21, 0x01	; 1
    2666:	79 f4       	brne	.+30     	; 0x2686 <udd_ep_alloc+0x9a>
    2668:	08 c0       	rjmp	.+16     	; 0x267a <udd_ep_alloc+0x8e>
    266a:	21 e0       	ldi	r18, 0x01	; 1
    266c:	0d c0       	rjmp	.+26     	; 0x2688 <udd_ep_alloc+0x9c>
    266e:	22 e0       	ldi	r18, 0x02	; 2
    2670:	0b c0       	rjmp	.+22     	; 0x2688 <udd_ep_alloc+0x9c>
    2672:	23 e0       	ldi	r18, 0x03	; 3
    2674:	09 c0       	rjmp	.+18     	; 0x2688 <udd_ep_alloc+0x9c>
    2676:	24 e0       	ldi	r18, 0x04	; 4
    2678:	07 c0       	rjmp	.+14     	; 0x2688 <udd_ep_alloc+0x9c>
    267a:	25 e0       	ldi	r18, 0x05	; 5
    267c:	05 c0       	rjmp	.+10     	; 0x2688 <udd_ep_alloc+0x9c>
    267e:	26 e0       	ldi	r18, 0x06	; 6
    2680:	03 c0       	rjmp	.+6      	; 0x2688 <udd_ep_alloc+0x9c>
    2682:	27 e0       	ldi	r18, 0x07	; 7
    2684:	01 c0       	rjmp	.+2      	; 0x2688 <udd_ep_alloc+0x9c>
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	fc 01       	movw	r30, r24
    268a:	ee 0f       	add	r30, r30
    268c:	ff 1f       	adc	r31, r31
    268e:	ee 0f       	add	r30, r30
    2690:	ff 1f       	adc	r31, r31
    2692:	ee 0f       	add	r30, r30
    2694:	ff 1f       	adc	r31, r31
    2696:	e4 58       	subi	r30, 0x84	; 132
    2698:	fd 4d       	sbci	r31, 0xDD	; 221
    269a:	15 86       	std	Z+13, r1	; 0x0d
    269c:	36 e0       	ldi	r19, 0x06	; 6
    269e:	34 87       	std	Z+12, r19	; 0x0c
    26a0:	26 2b       	or	r18, r22
    26a2:	25 87       	std	Z+13, r18	; 0x0d
    26a4:	fc 01       	movw	r30, r24
    26a6:	ee 0f       	add	r30, r30
    26a8:	ff 1f       	adc	r31, r31
    26aa:	ee 0f       	add	r30, r30
    26ac:	ff 1f       	adc	r31, r31
    26ae:	ee 0f       	add	r30, r30
    26b0:	ff 1f       	adc	r31, r31
    26b2:	e4 58       	subi	r30, 0x84	; 132
    26b4:	fd 4d       	sbci	r31, 0xDD	; 221
    26b6:	25 85       	ldd	r18, Z+13	; 0x0d
    26b8:	20 7c       	andi	r18, 0xC0	; 192
    26ba:	20 3c       	cpi	r18, 0xC0	; 192
    26bc:	69 f4       	brne	.+26     	; 0x26d8 <udd_ep_alloc+0xec>
    26be:	fc 01       	movw	r30, r24
    26c0:	ee 0f       	add	r30, r30
    26c2:	ff 1f       	adc	r31, r31
    26c4:	ee 0f       	add	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	ee 0f       	add	r30, r30
    26ca:	ff 1f       	adc	r31, r31
    26cc:	e4 58       	subi	r30, 0x84	; 132
    26ce:	fd 4d       	sbci	r31, 0xDD	; 221
    26d0:	25 85       	ldd	r18, Z+13	; 0x0d
    26d2:	27 70       	andi	r18, 0x07	; 7
    26d4:	27 30       	cpi	r18, 0x07	; 7
    26d6:	81 f0       	breq	.+32     	; 0x26f8 <udd_ep_alloc+0x10c>
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	88 0f       	add	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	fc 01       	movw	r30, r24
    26e6:	e4 58       	subi	r30, 0x84	; 132
    26e8:	fd 4d       	sbci	r31, 0xDD	; 221
    26ea:	85 85       	ldd	r24, Z+13	; 0x0d
    26ec:	80 62       	ori	r24, 0x20	; 32
    26ee:	85 87       	std	Z+13, r24	; 0x0d
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	08 95       	ret
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	08 95       	ret
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	08 95       	ret

000026fc <udd_ep_is_halted>:
    26fc:	e8 2f       	mov	r30, r24
    26fe:	ef 70       	andi	r30, 0x0F	; 15
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	ee 0f       	add	r30, r30
    2704:	ff 1f       	adc	r31, r31
    2706:	08 2e       	mov	r0, r24
    2708:	00 0c       	add	r0, r0
    270a:	99 0b       	sbc	r25, r25
    270c:	88 27       	eor	r24, r24
    270e:	99 0f       	add	r25, r25
    2710:	88 1f       	adc	r24, r24
    2712:	99 27       	eor	r25, r25
    2714:	e8 0f       	add	r30, r24
    2716:	f9 1f       	adc	r31, r25
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	ee 0f       	add	r30, r30
    2722:	ff 1f       	adc	r31, r31
    2724:	e4 58       	subi	r30, 0x84	; 132
    2726:	fd 4d       	sbci	r31, 0xDD	; 221
    2728:	85 85       	ldd	r24, Z+13	; 0x0d
    272a:	82 fb       	bst	r24, 2
    272c:	88 27       	eor	r24, r24
    272e:	80 f9       	bld	r24, 0
    2730:	08 95       	ret

00002732 <udd_ep_clear_halt>:
    2732:	0f 93       	push	r16
    2734:	28 2f       	mov	r18, r24
    2736:	2f 70       	andi	r18, 0x0F	; 15
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	a9 01       	movw	r20, r18
    273c:	44 0f       	add	r20, r20
    273e:	55 1f       	adc	r21, r21
    2740:	28 2f       	mov	r18, r24
    2742:	08 2e       	mov	r0, r24
    2744:	00 0c       	add	r0, r0
    2746:	33 0b       	sbc	r19, r19
    2748:	22 27       	eor	r18, r18
    274a:	33 0f       	add	r19, r19
    274c:	22 1f       	adc	r18, r18
    274e:	33 27       	eor	r19, r19
    2750:	24 0f       	add	r18, r20
    2752:	35 1f       	adc	r19, r21
    2754:	a9 01       	movw	r20, r18
    2756:	44 0f       	add	r20, r20
    2758:	55 1f       	adc	r21, r21
    275a:	44 0f       	add	r20, r20
    275c:	55 1f       	adc	r21, r21
    275e:	44 0f       	add	r20, r20
    2760:	55 1f       	adc	r21, r21
    2762:	fa 01       	movw	r30, r20
    2764:	e8 57       	subi	r30, 0x78	; 120
    2766:	fd 4d       	sbci	r31, 0xDD	; 221
    2768:	01 e0       	ldi	r16, 0x01	; 1
    276a:	06 93       	lac	Z, r16
    276c:	fa 01       	movw	r30, r20
    276e:	e4 58       	subi	r30, 0x84	; 132
    2770:	fd 4d       	sbci	r31, 0xDD	; 221
    2772:	95 85       	ldd	r25, Z+13	; 0x0d
    2774:	92 ff       	sbrs	r25, 2
    2776:	11 c0       	rjmp	.+34     	; 0x279a <udd_ep_clear_halt+0x68>
    2778:	fa 01       	movw	r30, r20
    277a:	e4 58       	subi	r30, 0x84	; 132
    277c:	fd 4d       	sbci	r31, 0xDD	; 221
    277e:	95 85       	ldd	r25, Z+13	; 0x0d
    2780:	9b 7f       	andi	r25, 0xFB	; 251
    2782:	95 87       	std	Z+13, r25	; 0x0d
    2784:	59 dc       	rcall	.-1870   	; 0x2038 <udd_ep_get_job>
    2786:	fc 01       	movw	r30, r24
    2788:	80 81       	ld	r24, Z
    278a:	80 ff       	sbrs	r24, 0
    278c:	06 c0       	rjmp	.+12     	; 0x279a <udd_ep_clear_halt+0x68>
    278e:	8e 7f       	andi	r24, 0xFE	; 254
    2790:	80 83       	st	Z, r24
    2792:	07 80       	ldd	r0, Z+7	; 0x07
    2794:	f0 85       	ldd	r31, Z+8	; 0x08
    2796:	e0 2d       	mov	r30, r0
    2798:	19 95       	eicall
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	0f 91       	pop	r16
    279e:	08 95       	ret

000027a0 <udd_ep_run>:
    27a0:	6f 92       	push	r6
    27a2:	7f 92       	push	r7
    27a4:	8f 92       	push	r8
    27a6:	9f 92       	push	r9
    27a8:	af 92       	push	r10
    27aa:	bf 92       	push	r11
    27ac:	cf 92       	push	r12
    27ae:	df 92       	push	r13
    27b0:	ef 92       	push	r14
    27b2:	ff 92       	push	r15
    27b4:	0f 93       	push	r16
    27b6:	1f 93       	push	r17
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	1f 92       	push	r1
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	78 2e       	mov	r7, r24
    27c4:	66 2e       	mov	r6, r22
    27c6:	4a 01       	movw	r8, r20
    27c8:	59 01       	movw	r10, r18
    27ca:	36 dc       	rcall	.-1940   	; 0x2038 <udd_ep_get_job>
    27cc:	6c 01       	movw	r12, r24
    27ce:	27 2d       	mov	r18, r7
    27d0:	87 2d       	mov	r24, r7
    27d2:	8f 70       	andi	r24, 0x0F	; 15
    27d4:	e8 2e       	mov	r14, r24
    27d6:	f1 2c       	mov	r15, r1
    27d8:	c7 01       	movw	r24, r14
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	e7 2c       	mov	r14, r7
    27e0:	07 2c       	mov	r0, r7
    27e2:	00 0c       	add	r0, r0
    27e4:	ff 08       	sbc	r15, r15
    27e6:	ee 24       	eor	r14, r14
    27e8:	ff 0c       	add	r15, r15
    27ea:	ee 1c       	adc	r14, r14
    27ec:	ff 24       	eor	r15, r15
    27ee:	e8 0e       	add	r14, r24
    27f0:	f9 1e       	adc	r15, r25
    27f2:	f7 01       	movw	r30, r14
    27f4:	ee 0f       	add	r30, r30
    27f6:	ff 1f       	adc	r31, r31
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	e4 58       	subi	r30, 0x84	; 132
    2802:	fd 4d       	sbci	r31, 0xDD	; 221
    2804:	85 85       	ldd	r24, Z+13	; 0x0d
    2806:	80 7c       	andi	r24, 0xC0	; 192
    2808:	09 f4       	brne	.+2      	; 0x280c <udd_ep_run+0x6c>
    280a:	82 c0       	rjmp	.+260    	; 0x2910 <udd_ep_run+0x170>
    280c:	f7 01       	movw	r30, r14
    280e:	ee 0f       	add	r30, r30
    2810:	ff 1f       	adc	r31, r31
    2812:	ee 0f       	add	r30, r30
    2814:	ff 1f       	adc	r31, r31
    2816:	ee 0f       	add	r30, r30
    2818:	ff 1f       	adc	r31, r31
    281a:	e4 58       	subi	r30, 0x84	; 132
    281c:	fd 4d       	sbci	r31, 0xDD	; 221
    281e:	85 85       	ldd	r24, Z+13	; 0x0d
    2820:	80 7c       	andi	r24, 0xC0	; 192
    2822:	80 3c       	cpi	r24, 0xC0	; 192
    2824:	61 f0       	breq	.+24     	; 0x283e <udd_ep_run+0x9e>
    2826:	f7 01       	movw	r30, r14
    2828:	ee 0f       	add	r30, r30
    282a:	ff 1f       	adc	r31, r31
    282c:	ee 0f       	add	r30, r30
    282e:	ff 1f       	adc	r31, r31
    2830:	ee 0f       	add	r30, r30
    2832:	ff 1f       	adc	r31, r31
    2834:	e4 58       	subi	r30, 0x84	; 132
    2836:	fd 4d       	sbci	r31, 0xDD	; 221
    2838:	85 85       	ldd	r24, Z+13	; 0x0d
    283a:	82 fd       	sbrc	r24, 2
    283c:	6b c0       	rjmp	.+214    	; 0x2914 <udd_ep_run+0x174>
    283e:	8f b7       	in	r24, 0x3f	; 63
    2840:	89 83       	std	Y+1, r24	; 0x01
    2842:	f8 94       	cli
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	f6 01       	movw	r30, r12
    2848:	90 81       	ld	r25, Z
    284a:	90 ff       	sbrs	r25, 0
    284c:	03 c0       	rjmp	.+6      	; 0x2854 <udd_ep_run+0xb4>
    284e:	8f bf       	out	0x3f, r24	; 63
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	61 c0       	rjmp	.+194    	; 0x2916 <udd_ep_run+0x176>
    2854:	f6 01       	movw	r30, r12
    2856:	90 81       	ld	r25, Z
    2858:	91 60       	ori	r25, 0x01	; 1
    285a:	90 83       	st	Z, r25
    285c:	8f bf       	out	0x3f, r24	; 63
    285e:	81 82       	std	Z+1, r8	; 0x01
    2860:	92 82       	std	Z+2, r9	; 0x02
    2862:	a3 82       	std	Z+3, r10	; 0x03
    2864:	b4 82       	std	Z+4, r11	; 0x04
    2866:	15 82       	std	Z+5, r1	; 0x05
    2868:	16 82       	std	Z+6, r1	; 0x06
    286a:	07 83       	std	Z+7, r16	; 0x07
    286c:	10 87       	std	Z+8, r17	; 0x08
    286e:	61 10       	cpse	r6, r1
    2870:	06 c0       	rjmp	.+12     	; 0x287e <udd_ep_run+0xde>
    2872:	91 e0       	ldi	r25, 0x01	; 1
    2874:	a1 14       	cp	r10, r1
    2876:	b1 04       	cpc	r11, r1
    2878:	19 f0       	breq	.+6      	; 0x2880 <udd_ep_run+0xe0>
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	01 c0       	rjmp	.+2      	; 0x2880 <udd_ep_run+0xe0>
    287e:	91 e0       	ldi	r25, 0x01	; 1
    2880:	f6 01       	movw	r30, r12
    2882:	80 81       	ld	r24, Z
    2884:	90 fb       	bst	r25, 0
    2886:	81 f9       	bld	r24, 1
    2888:	8b 7f       	andi	r24, 0xFB	; 251
    288a:	80 83       	st	Z, r24
    288c:	22 23       	and	r18, r18
    288e:	64 f4       	brge	.+24     	; 0x28a8 <udd_ep_run+0x108>
    2890:	f7 01       	movw	r30, r14
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	ee 0f       	add	r30, r30
    2898:	ff 1f       	adc	r31, r31
    289a:	ee 0f       	add	r30, r30
    289c:	ff 1f       	adc	r31, r31
    289e:	e4 58       	subi	r30, 0x84	; 132
    28a0:	fd 4d       	sbci	r31, 0xDD	; 221
    28a2:	12 8a       	std	Z+18, r1	; 0x12
    28a4:	13 8a       	std	Z+19, r1	; 0x13
    28a6:	30 c0       	rjmp	.+96     	; 0x2908 <udd_ep_run+0x168>
    28a8:	f7 01       	movw	r30, r14
    28aa:	ee 0f       	add	r30, r30
    28ac:	ff 1f       	adc	r31, r31
    28ae:	ee 0f       	add	r30, r30
    28b0:	ff 1f       	adc	r31, r31
    28b2:	ee 0f       	add	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	e4 58       	subi	r30, 0x84	; 132
    28b8:	fd 4d       	sbci	r31, 0xDD	; 221
    28ba:	85 85       	ldd	r24, Z+13	; 0x0d
    28bc:	80 7c       	andi	r24, 0xC0	; 192
    28be:	80 3c       	cpi	r24, 0xC0	; 192
    28c0:	b1 f4       	brne	.+44     	; 0x28ee <udd_ep_run+0x14e>
    28c2:	c7 01       	movw	r24, r14
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	88 57       	subi	r24, 0x78	; 120
    28d2:	9d 4d       	sbci	r25, 0xDD	; 221
    28d4:	88 db       	rcall	.-2288   	; 0x1fe6 <udd_ep_get_size>
    28d6:	bc 01       	movw	r22, r24
    28d8:	c5 01       	movw	r24, r10
    28da:	0e 94 87 23 	call	0x470e	; 0x470e <__udivmodhi4>
    28de:	89 2b       	or	r24, r25
    28e0:	31 f0       	breq	.+12     	; 0x28ee <udd_ep_run+0x14e>
    28e2:	f6 01       	movw	r30, r12
    28e4:	80 81       	ld	r24, Z
    28e6:	8e 7f       	andi	r24, 0xFE	; 254
    28e8:	80 83       	st	Z, r24
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	14 c0       	rjmp	.+40     	; 0x2916 <udd_ep_run+0x176>
    28ee:	f7 01       	movw	r30, r14
    28f0:	ee 0f       	add	r30, r30
    28f2:	ff 1f       	adc	r31, r31
    28f4:	ee 0f       	add	r30, r30
    28f6:	ff 1f       	adc	r31, r31
    28f8:	ee 0f       	add	r30, r30
    28fa:	ff 1f       	adc	r31, r31
    28fc:	e4 58       	subi	r30, 0x84	; 132
    28fe:	fd 4d       	sbci	r31, 0xDD	; 221
    2900:	16 86       	std	Z+14, r1	; 0x0e
    2902:	17 86       	std	Z+15, r1	; 0x0f
    2904:	12 8a       	std	Z+18, r1	; 0x12
    2906:	13 8a       	std	Z+19, r1	; 0x13
    2908:	87 2d       	mov	r24, r7
    290a:	23 dc       	rcall	.-1978   	; 0x2152 <udd_ep_trans_complet>
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <udd_ep_run+0x176>
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <udd_ep_run+0x176>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	0f 90       	pop	r0
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	df 90       	pop	r13
    2926:	cf 90       	pop	r12
    2928:	bf 90       	pop	r11
    292a:	af 90       	pop	r10
    292c:	9f 90       	pop	r9
    292e:	8f 90       	pop	r8
    2930:	7f 90       	pop	r7
    2932:	6f 90       	pop	r6
    2934:	08 95       	ret

00002936 <udd_ep_abort>:
    2936:	ff 92       	push	r15
    2938:	0f 93       	push	r16
    293a:	1f 93       	push	r17
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	18 2f       	mov	r17, r24
    2942:	c8 2f       	mov	r28, r24
    2944:	cf 70       	andi	r28, 0x0F	; 15
    2946:	d0 e0       	ldi	r29, 0x00	; 0
    2948:	ce 01       	movw	r24, r28
    294a:	88 0f       	add	r24, r24
    294c:	99 1f       	adc	r25, r25
    294e:	c1 2f       	mov	r28, r17
    2950:	01 2e       	mov	r0, r17
    2952:	00 0c       	add	r0, r0
    2954:	dd 0b       	sbc	r29, r29
    2956:	cc 27       	eor	r28, r28
    2958:	dd 0f       	add	r29, r29
    295a:	cc 1f       	adc	r28, r28
    295c:	dd 27       	eor	r29, r29
    295e:	c8 0f       	add	r28, r24
    2960:	d9 1f       	adc	r29, r25
    2962:	81 2f       	mov	r24, r17
    2964:	69 db       	rcall	.-2350   	; 0x2038 <udd_ep_get_job>
    2966:	dc 01       	movw	r26, r24
    2968:	fe 01       	movw	r30, r28
    296a:	ee 0f       	add	r30, r30
    296c:	ff 1f       	adc	r31, r31
    296e:	ee 0f       	add	r30, r30
    2970:	ff 1f       	adc	r31, r31
    2972:	ee 0f       	add	r30, r30
    2974:	ff 1f       	adc	r31, r31
    2976:	e8 57       	subi	r30, 0x78	; 120
    2978:	fd 4d       	sbci	r31, 0xDD	; 221
    297a:	02 e0       	ldi	r16, 0x02	; 2
    297c:	05 93       	las	Z, r16
    297e:	8c 91       	ld	r24, X
    2980:	80 ff       	sbrs	r24, 0
    2982:	22 c0       	rjmp	.+68     	; 0x29c8 <udd_ep_abort+0x92>
    2984:	8e 7f       	andi	r24, 0xFE	; 254
    2986:	8c 93       	st	X, r24
    2988:	17 96       	adiw	r26, 0x07	; 7
    298a:	ed 91       	ld	r30, X+
    298c:	fc 91       	ld	r31, X
    298e:	18 97       	sbiw	r26, 0x08	; 8
    2990:	30 97       	sbiw	r30, 0x00	; 0
    2992:	d1 f0       	breq	.+52     	; 0x29c8 <udd_ep_abort+0x92>
    2994:	11 23       	and	r17, r17
    2996:	5c f4       	brge	.+22     	; 0x29ae <udd_ep_abort+0x78>
    2998:	cc 0f       	add	r28, r28
    299a:	dd 1f       	adc	r29, r29
    299c:	cc 0f       	add	r28, r28
    299e:	dd 1f       	adc	r29, r29
    29a0:	cc 0f       	add	r28, r28
    29a2:	dd 1f       	adc	r29, r29
    29a4:	c4 58       	subi	r28, 0x84	; 132
    29a6:	dd 4d       	sbci	r29, 0xDD	; 221
    29a8:	6a 89       	ldd	r22, Y+18	; 0x12
    29aa:	7b 89       	ldd	r23, Y+19	; 0x13
    29ac:	0a c0       	rjmp	.+20     	; 0x29c2 <udd_ep_abort+0x8c>
    29ae:	cc 0f       	add	r28, r28
    29b0:	dd 1f       	adc	r29, r29
    29b2:	cc 0f       	add	r28, r28
    29b4:	dd 1f       	adc	r29, r29
    29b6:	cc 0f       	add	r28, r28
    29b8:	dd 1f       	adc	r29, r29
    29ba:	c4 58       	subi	r28, 0x84	; 132
    29bc:	dd 4d       	sbci	r29, 0xDD	; 221
    29be:	6e 85       	ldd	r22, Y+14	; 0x0e
    29c0:	7f 85       	ldd	r23, Y+15	; 0x0f
    29c2:	41 2f       	mov	r20, r17
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	19 95       	eicall
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	1f 91       	pop	r17
    29ce:	0f 91       	pop	r16
    29d0:	ff 90       	pop	r15
    29d2:	08 95       	ret

000029d4 <udd_ep_free>:
    29d4:	cf 93       	push	r28
    29d6:	c8 2f       	mov	r28, r24
    29d8:	ae df       	rcall	.-164    	; 0x2936 <udd_ep_abort>
    29da:	ec 2f       	mov	r30, r28
    29dc:	ef 70       	andi	r30, 0x0F	; 15
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	ee 0f       	add	r30, r30
    29e2:	ff 1f       	adc	r31, r31
    29e4:	8c 2f       	mov	r24, r28
    29e6:	cc 0f       	add	r28, r28
    29e8:	99 0b       	sbc	r25, r25
    29ea:	88 27       	eor	r24, r24
    29ec:	99 0f       	add	r25, r25
    29ee:	88 1f       	adc	r24, r24
    29f0:	99 27       	eor	r25, r25
    29f2:	e8 0f       	add	r30, r24
    29f4:	f9 1f       	adc	r31, r25
    29f6:	ee 0f       	add	r30, r30
    29f8:	ff 1f       	adc	r31, r31
    29fa:	ee 0f       	add	r30, r30
    29fc:	ff 1f       	adc	r31, r31
    29fe:	ee 0f       	add	r30, r30
    2a00:	ff 1f       	adc	r31, r31
    2a02:	e4 58       	subi	r30, 0x84	; 132
    2a04:	fd 4d       	sbci	r31, 0xDD	; 221
    2a06:	15 86       	std	Z+13, r1	; 0x0d
    2a08:	cf 91       	pop	r28
    2a0a:	08 95       	ret

00002a0c <udd_ep_set_halt>:
    2a0c:	e8 2f       	mov	r30, r24
    2a0e:	ef 70       	andi	r30, 0x0F	; 15
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	ee 0f       	add	r30, r30
    2a14:	ff 1f       	adc	r31, r31
    2a16:	28 2f       	mov	r18, r24
    2a18:	08 2e       	mov	r0, r24
    2a1a:	00 0c       	add	r0, r0
    2a1c:	33 0b       	sbc	r19, r19
    2a1e:	22 27       	eor	r18, r18
    2a20:	33 0f       	add	r19, r19
    2a22:	22 1f       	adc	r18, r18
    2a24:	33 27       	eor	r19, r19
    2a26:	e2 0f       	add	r30, r18
    2a28:	f3 1f       	adc	r31, r19
    2a2a:	ee 0f       	add	r30, r30
    2a2c:	ff 1f       	adc	r31, r31
    2a2e:	ee 0f       	add	r30, r30
    2a30:	ff 1f       	adc	r31, r31
    2a32:	ee 0f       	add	r30, r30
    2a34:	ff 1f       	adc	r31, r31
    2a36:	e4 58       	subi	r30, 0x84	; 132
    2a38:	fd 4d       	sbci	r31, 0xDD	; 221
    2a3a:	95 85       	ldd	r25, Z+13	; 0x0d
    2a3c:	94 60       	ori	r25, 0x04	; 4
    2a3e:	95 87       	std	Z+13, r25	; 0x0d
    2a40:	7a df       	rcall	.-268    	; 0x2936 <udd_ep_abort>
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	08 95       	ret

00002a46 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2a46:	1f 92       	push	r1
    2a48:	0f 92       	push	r0
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	0f 92       	push	r0
    2a4e:	11 24       	eor	r1, r1
    2a50:	0b b6       	in	r0, 0x3b	; 59
    2a52:	0f 92       	push	r0
    2a54:	0f 93       	push	r16
    2a56:	2f 93       	push	r18
    2a58:	3f 93       	push	r19
    2a5a:	4f 93       	push	r20
    2a5c:	5f 93       	push	r21
    2a5e:	6f 93       	push	r22
    2a60:	7f 93       	push	r23
    2a62:	8f 93       	push	r24
    2a64:	9f 93       	push	r25
    2a66:	af 93       	push	r26
    2a68:	bf 93       	push	r27
    2a6a:	ef 93       	push	r30
    2a6c:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2a6e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a72:	88 23       	and	r24, r24
    2a74:	34 f4       	brge	.+12     	; 0x2a82 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2a76:	80 e8       	ldi	r24, 0x80	; 128
    2a78:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2a7c:	0e 94 27 20 	call	0x404e	; 0x404e <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2a80:	88 c0       	rjmp	.+272    	; 0x2b92 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2a82:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a86:	82 ff       	sbrs	r24, 2
    2a88:	20 c0       	rjmp	.+64     	; 0x2aca <__vector_125+0x84>
		udd_ack_underflow_event();
    2a8a:	84 e0       	ldi	r24, 0x04	; 4
    2a8c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2a90:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <udd_sram+0x14>
    2a94:	86 ff       	sbrs	r24, 6
    2a96:	7d c0       	rjmp	.+250    	; 0x2b92 <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2a98:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a9c:	81 fd       	sbrc	r24, 1
    2a9e:	79 c0       	rjmp	.+242    	; 0x2b92 <__vector_125+0x14c>
    2aa0:	e6 da       	rcall	.-2612   	; 0x206e <udd_ctrl_interrupt_tc_setup>
    2aa2:	81 11       	cpse	r24, r1
    2aa4:	76 c0       	rjmp	.+236    	; 0x2b92 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2aa6:	80 91 79 22 	lds	r24, 0x2279	; 0x802279 <udd_ep_control_state>
    2aaa:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2aac:	11 f4       	brne	.+4      	; 0x2ab2 <__vector_125+0x6c>
    2aae:	19 da       	rcall	.-3022   	; 0x1ee2 <udd_ctrl_send_zlp_in>
    2ab0:	70 c0       	rjmp	.+224    	; 0x2b92 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2ab2:	84 30       	cpi	r24, 0x04	; 4
    2ab4:	09 f0       	breq	.+2      	; 0x2ab8 <__vector_125+0x72>
    2ab6:	6d c0       	rjmp	.+218    	; 0x2b92 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2ab8:	e1 e9       	ldi	r30, 0x91	; 145
    2aba:	f2 e2       	ldi	r31, 0x22	; 34
    2abc:	04 e0       	ldi	r16, 0x04	; 4
    2abe:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2ac0:	e9 e8       	ldi	r30, 0x89	; 137
    2ac2:	f2 e2       	ldi	r31, 0x22	; 34
    2ac4:	04 e0       	ldi	r16, 0x04	; 4
    2ac6:	05 93       	las	Z, r16
    2ac8:	64 c0       	rjmp	.+200    	; 0x2b92 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2aca:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ace:	81 ff       	sbrs	r24, 1
    2ad0:	5b c0       	rjmp	.+182    	; 0x2b88 <__vector_125+0x142>
		udd_ack_overflow_event();
    2ad2:	82 e0       	ldi	r24, 0x02	; 2
    2ad4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2ad8:	80 91 88 22 	lds	r24, 0x2288	; 0x802288 <udd_sram+0xc>
    2adc:	86 ff       	sbrs	r24, 6
    2ade:	59 c0       	rjmp	.+178    	; 0x2b92 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2ae0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2ae4:	81 fd       	sbrc	r24, 1
    2ae6:	55 c0       	rjmp	.+170    	; 0x2b92 <__vector_125+0x14c>
    2ae8:	c2 da       	rcall	.-2684   	; 0x206e <udd_ctrl_interrupt_tc_setup>
    2aea:	81 11       	cpse	r24, r1
    2aec:	52 c0       	rjmp	.+164    	; 0x2b92 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2aee:	80 91 79 22 	lds	r24, 0x2279	; 0x802279 <udd_ep_control_state>
    2af2:	82 30       	cpi	r24, 0x02	; 2
    2af4:	41 f4       	brne	.+16     	; 0x2b06 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2af6:	84 e0       	ldi	r24, 0x04	; 4
    2af8:	80 93 79 22 	sts	0x2279, r24	; 0x802279 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2afc:	e8 e8       	ldi	r30, 0x88	; 136
    2afe:	f2 e2       	ldi	r31, 0x22	; 34
    2b00:	02 e0       	ldi	r16, 0x02	; 2
    2b02:	06 93       	lac	Z, r16
    2b04:	46 c0       	rjmp	.+140    	; 0x2b92 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2b06:	83 30       	cpi	r24, 0x03	; 3
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <__vector_125+0xc6>
    2b0a:	43 c0       	rjmp	.+134    	; 0x2b92 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2b0c:	e1 e9       	ldi	r30, 0x91	; 145
    2b0e:	f2 e2       	ldi	r31, 0x22	; 34
    2b10:	04 e0       	ldi	r16, 0x04	; 4
    2b12:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b14:	e9 e8       	ldi	r30, 0x89	; 137
    2b16:	f2 e2       	ldi	r31, 0x22	; 34
    2b18:	04 e0       	ldi	r16, 0x04	; 4
    2b1a:	05 93       	las	Z, r16
    2b1c:	3a c0       	rjmp	.+116    	; 0x2b92 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2b1e:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b20:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b24:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b26:	07 df       	rcall	.-498    	; 0x2936 <udd_ep_abort>
    2b28:	81 e8       	ldi	r24, 0x81	; 129
    2b2a:	05 df       	rcall	.-502    	; 0x2936 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b2c:	82 e0       	ldi	r24, 0x02	; 2
    2b2e:	03 df       	rcall	.-506    	; 0x2936 <udd_ep_abort>
    2b30:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    2b32:	01 df       	rcall	.-510    	; 0x2936 <udd_ep_abort>
    2b34:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2b38:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2b3c:	ec e7       	ldi	r30, 0x7C	; 124
    2b3e:	f2 e2       	ldi	r31, 0x22	; 34
	udd_endpoint_clear_status(ep_ctrl);
    2b40:	15 86       	std	Z+13, r1	; 0x0d
    2b42:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b44:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    2b46:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b48:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2b4a:	15 8a       	std	Z+21, r1	; 0x15
    2b4c:	94 8b       	std	Z+20, r25	; 0x14
    2b4e:	85 8b       	std	Z+21, r24	; 0x15
    2b50:	85 e3       	ldi	r24, 0x35	; 53
		// Reset endpoint control management
		udd_ctrl_init();
    2b52:	92 e2       	ldi	r25, 0x22	; 34
    2b54:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    2b56:	91 8b       	std	Z+17, r25	; 0x11
    2b58:	91 d9       	rcall	.-3294   	; 0x1e7c <udd_ctrl_init>
		udd_ack_suspend_event();
    2b5a:	1b c0       	rjmp	.+54     	; 0x2b92 <__vector_125+0x14c>
    2b5c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2b60:	86 ff       	sbrs	r24, 6
    2b62:	07 c0       	rjmp	.+14     	; 0x2b72 <__vector_125+0x12c>
    2b64:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2b66:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	4f d9       	rcall	.-3426   	; 0x1e0c <udd_sleep_mode>
		udd_ack_resume_event();
    2b6e:	df d2       	rcall	.+1470   	; 0x312e <usb_callback_suspend_action>
    2b70:	10 c0       	rjmp	.+32     	; 0x2b92 <__vector_125+0x14c>
    2b72:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    2b76:	85 ff       	sbrs	r24, 5
    2b78:	0c c0       	rjmp	.+24     	; 0x2b92 <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2b7a:	80 e2       	ldi	r24, 0x20	; 32
    2b7c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	44 d9       	rcall	.-3448   	; 0x1e0c <udd_sleep_mode>
    2b84:	d5 d2       	rcall	.+1450   	; 0x3130 <usb_callback_resume_action>
    2b86:	05 c0       	rjmp	.+10     	; 0x2b92 <__vector_125+0x14c>
    2b88:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2b8c:	84 fd       	sbrc	r24, 4
    2b8e:	c7 cf       	rjmp	.-114    	; 0x2b1e <__vector_125+0xd8>
    2b90:	e5 cf       	rjmp	.-54     	; 0x2b5c <__vector_125+0x116>
    2b92:	ff 91       	pop	r31
    2b94:	ef 91       	pop	r30
    2b96:	bf 91       	pop	r27
    2b98:	af 91       	pop	r26
    2b9a:	9f 91       	pop	r25
    2b9c:	8f 91       	pop	r24
    2b9e:	7f 91       	pop	r23
    2ba0:	6f 91       	pop	r22
    2ba2:	5f 91       	pop	r21
    2ba4:	4f 91       	pop	r20
    2ba6:	3f 91       	pop	r19
    2ba8:	2f 91       	pop	r18
    2baa:	0f 91       	pop	r16
    2bac:	0f 90       	pop	r0
    2bae:	0b be       	out	0x3b, r0	; 59
    2bb0:	0f 90       	pop	r0
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	0f 90       	pop	r0
    2bb6:	1f 90       	pop	r1
    2bb8:	18 95       	reti

00002bba <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2bba:	1f 92       	push	r1
    2bbc:	0f 92       	push	r0
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	0f 92       	push	r0
    2bc2:	11 24       	eor	r1, r1
    2bc4:	0b b6       	in	r0, 0x3b	; 59
    2bc6:	0f 92       	push	r0
    2bc8:	0f 93       	push	r16
    2bca:	1f 93       	push	r17
    2bcc:	2f 93       	push	r18
    2bce:	3f 93       	push	r19
    2bd0:	4f 93       	push	r20
    2bd2:	5f 93       	push	r21
    2bd4:	6f 93       	push	r22
    2bd6:	7f 93       	push	r23
    2bd8:	8f 93       	push	r24
    2bda:	9f 93       	push	r25
    2bdc:	af 93       	push	r26
    2bde:	bf 93       	push	r27
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	ef 93       	push	r30
    2be6:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2be8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2bec:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2bee:	03 c0       	rjmp	.+6      	; 0x2bf6 <__vector_126+0x3c>
    2bf0:	3e da       	rcall	.-2948   	; 0x206e <udd_ctrl_interrupt_tc_setup>
    2bf2:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2bf4:	c4 c0       	rjmp	.+392    	; 0x2d7e <__vector_126+0x1c4>
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2bfc:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2c00:	81 95       	neg	r24
    2c02:	88 0f       	add	r24, r24
    2c04:	e8 e8       	ldi	r30, 0x88	; 136
    2c06:	f2 e2       	ldi	r31, 0x22	; 34
    2c08:	e8 1b       	sub	r30, r24
    2c0a:	f1 09       	sbc	r31, r1
    2c0c:	20 81       	ld	r18, Z
    2c0e:	31 81       	ldd	r19, Z+1	; 0x01
    2c10:	28 58       	subi	r18, 0x88	; 136
    2c12:	32 42       	sbci	r19, 0x22	; 34
    2c14:	36 95       	lsr	r19
    2c16:	27 95       	ror	r18
    2c18:	36 95       	lsr	r19
    2c1a:	27 95       	ror	r18
    2c1c:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2c1e:	27 95       	ror	r18
    2c20:	82 2f       	mov	r24, r18
    2c22:	86 95       	lsr	r24
    2c24:	20 fd       	sbrc	r18, 0
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <__vector_126+0x72>
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	01 c0       	rjmp	.+2      	; 0x2c2e <__vector_126+0x74>
    2c2c:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c2e:	89 0f       	add	r24, r25
    2c30:	e8 2f       	mov	r30, r24
    2c32:	ef 70       	andi	r30, 0x0F	; 15
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	ee 0f       	add	r30, r30
    2c38:	ff 1f       	adc	r31, r31
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	08 2e       	mov	r0, r24
    2c3e:	00 0c       	add	r0, r0
    2c40:	33 0b       	sbc	r19, r19
    2c42:	22 27       	eor	r18, r18
    2c44:	33 0f       	add	r19, r19
    2c46:	22 1f       	adc	r18, r18
    2c48:	33 27       	eor	r19, r19
    2c4a:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2c4c:	f3 1f       	adc	r31, r19
    2c4e:	df 01       	movw	r26, r30
    2c50:	aa 0f       	add	r26, r26
    2c52:	bb 1f       	adc	r27, r27
    2c54:	aa 0f       	add	r26, r26
    2c56:	bb 1f       	adc	r27, r27
    2c58:	aa 0f       	add	r26, r26
    2c5a:	bb 1f       	adc	r27, r27
    2c5c:	a4 58       	subi	r26, 0x84	; 132
    2c5e:	bd 4d       	sbci	r27, 0xDD	; 221
    2c60:	1c 96       	adiw	r26, 0x0c	; 12
    2c62:	9c 91       	ld	r25, X
    2c64:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2c66:	8b c0       	rjmp	.+278    	; 0x2d7e <__vector_126+0x1c4>
    2c68:	ee 0f       	add	r30, r30
    2c6a:	ff 1f       	adc	r31, r31
    2c6c:	ee 0f       	add	r30, r30
    2c6e:	ff 1f       	adc	r31, r31
    2c70:	ee 0f       	add	r30, r30
    2c72:	ff 1f       	adc	r31, r31
    2c74:	e8 57       	subi	r30, 0x78	; 120
    2c76:	fd 4d       	sbci	r31, 0xDD	; 221
    2c78:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    2c7a:	06 93       	lac	Z, r16
    2c7c:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c7e:	7a c0       	rjmp	.+244    	; 0x2d74 <__vector_126+0x1ba>
    2c80:	80 91 79 22 	lds	r24, 0x2279	; 0x802279 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2c84:	84 30       	cpi	r24, 0x04	; 4
    2c86:	19 f4       	brne	.+6      	; 0x2c8e <__vector_126+0xd4>
    2c88:	3a d9       	rcall	.-3468   	; 0x1efe <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2c8a:	f8 d8       	rcall	.-3600   	; 0x1e7c <udd_ctrl_init>
    2c8c:	78 c0       	rjmp	.+240    	; 0x2d7e <__vector_126+0x1c4>
    2c8e:	00 91 8a 22 	lds	r16, 0x228A	; 0x80228a <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2c92:	10 91 8b 22 	lds	r17, 0x228B	; 0x80228b <udd_sram+0xf>
    2c96:	80 91 3b 24 	lds	r24, 0x243B	; 0x80243b <udd_g_ctrlreq+0xa>
    2c9a:	90 91 3c 24 	lds	r25, 0x243C	; 0x80243c <udd_g_ctrlreq+0xb>
    2c9e:	c0 91 75 22 	lds	r28, 0x2275	; 0x802275 <udd_ctrl_payload_nb_trans>
    2ca2:	d0 91 76 22 	lds	r29, 0x2276	; 0x802276 <udd_ctrl_payload_nb_trans+0x1>
    2ca6:	98 01       	movw	r18, r16
    2ca8:	2c 0f       	add	r18, r28
    2caa:	3d 1f       	adc	r19, r29
    2cac:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2cae:	93 07       	cpc	r25, r19
    2cb0:	18 f4       	brcc	.+6      	; 0x2cb8 <__vector_126+0xfe>
    2cb2:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2cb4:	0c 1b       	sub	r16, r28
    2cb6:	1d 0b       	sbc	r17, r29
    2cb8:	80 91 39 24 	lds	r24, 0x2439	; 0x802439 <udd_g_ctrlreq+0x8>
    2cbc:	90 91 3a 24 	lds	r25, 0x243A	; 0x80243a <udd_g_ctrlreq+0x9>
    2cc0:	a8 01       	movw	r20, r16
    2cc2:	65 e3       	ldi	r22, 0x35	; 53
    2cc4:	72 e2       	ldi	r23, 0x22	; 34
    2cc6:	8c 0f       	add	r24, r28
    2cc8:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2cca:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <memcpy>
    2cce:	c0 0f       	add	r28, r16
    2cd0:	d1 1f       	adc	r29, r17
    2cd2:	c0 93 75 22 	sts	0x2275, r28	; 0x802275 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2cd6:	d0 93 76 22 	sts	0x2276, r29	; 0x802276 <udd_ctrl_payload_nb_trans+0x1>
    2cda:	00 34       	cpi	r16, 0x40	; 64
    2cdc:	11 05       	cpc	r17, r1
    2cde:	69 f4       	brne	.+26     	; 0x2cfa <__vector_126+0x140>
    2ce0:	80 91 77 22 	lds	r24, 0x2277	; 0x802277 <udd_ctrl_prev_payload_nb_trans>
    2ce4:	90 91 78 22 	lds	r25, 0x2278	; 0x802278 <udd_ctrl_prev_payload_nb_trans+0x1>
    2ce8:	8c 0f       	add	r24, r28
    2cea:	9d 1f       	adc	r25, r29
    2cec:	20 91 37 24 	lds	r18, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    2cf0:	30 91 38 24 	lds	r19, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    2cf4:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2cf6:	93 07       	cpc	r25, r19
    2cf8:	80 f0       	brcs	.+32     	; 0x2d1a <__vector_126+0x160>
    2cfa:	e1 e3       	ldi	r30, 0x31	; 49
    2cfc:	f4 e2       	ldi	r31, 0x24	; 36
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2cfe:	c2 87       	std	Z+10, r28	; 0x0a
    2d00:	d3 87       	std	Z+11, r29	; 0x0b
    2d02:	06 84       	ldd	r0, Z+14	; 0x0e
    2d04:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    2d06:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    2d08:	30 97       	sbiw	r30, 0x00	; 0
    2d0a:	29 f0       	breq	.+10     	; 0x2d16 <__vector_126+0x15c>
    2d0c:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2d0e:	81 11       	cpse	r24, r1
    2d10:	02 c0       	rjmp	.+4      	; 0x2d16 <__vector_126+0x15c>
    2d12:	d9 d8       	rcall	.-3662   	; 0x1ec6 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2d14:	34 c0       	rjmp	.+104    	; 0x2d7e <__vector_126+0x1c4>
    2d16:	e5 d8       	rcall	.-3638   	; 0x1ee2 <udd_ctrl_send_zlp_in>
    2d18:	32 c0       	rjmp	.+100    	; 0x2d7e <__vector_126+0x1c4>
    2d1a:	80 91 3b 24 	lds	r24, 0x243B	; 0x80243b <udd_g_ctrlreq+0xa>
    2d1e:	90 91 3c 24 	lds	r25, 0x243C	; 0x80243c <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2d22:	c8 17       	cp	r28, r24
    2d24:	d9 07       	cpc	r29, r25
    2d26:	f9 f4       	brne	.+62     	; 0x2d66 <__vector_126+0x1ac>
    2d28:	e0 91 3f 24 	lds	r30, 0x243F	; 0x80243f <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2d2c:	f0 91 40 24 	lds	r31, 0x2440	; 0x802440 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2d30:	30 97       	sbiw	r30, 0x00	; 0
    2d32:	11 f4       	brne	.+4      	; 0x2d38 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2d34:	c8 d8       	rcall	.-3696   	; 0x1ec6 <udd_ctrl_stall_data>
    2d36:	23 c0       	rjmp	.+70     	; 0x2d7e <__vector_126+0x1c4>
    2d38:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2d3a:	81 11       	cpse	r24, r1
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <__vector_126+0x188>
    2d3e:	c3 d8       	rcall	.-3706   	; 0x1ec6 <udd_ctrl_stall_data>
    2d40:	1e c0       	rjmp	.+60     	; 0x2d7e <__vector_126+0x1c4>
    2d42:	20 91 77 22 	lds	r18, 0x2277	; 0x802277 <udd_ctrl_prev_payload_nb_trans>
    2d46:	30 91 78 22 	lds	r19, 0x2278	; 0x802278 <udd_ctrl_prev_payload_nb_trans+0x1>
    2d4a:	80 91 75 22 	lds	r24, 0x2275	; 0x802275 <udd_ctrl_payload_nb_trans>
    2d4e:	90 91 76 22 	lds	r25, 0x2276	; 0x802276 <udd_ctrl_payload_nb_trans+0x1>
    2d52:	82 0f       	add	r24, r18
    2d54:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2d56:	80 93 77 22 	sts	0x2277, r24	; 0x802277 <udd_ctrl_prev_payload_nb_trans>
    2d5a:	90 93 78 22 	sts	0x2278, r25	; 0x802278 <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2d5e:	10 92 75 22 	sts	0x2275, r1	; 0x802275 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    2d62:	10 92 76 22 	sts	0x2276, r1	; 0x802276 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2d66:	e8 e8       	ldi	r30, 0x88	; 136
    2d68:	f2 e2       	ldi	r31, 0x22	; 34
		udd_ctrl_in_sent();
    2d6a:	02 e0       	ldi	r16, 0x02	; 2
    2d6c:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2d6e:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2d70:	06 93       	lac	Z, r16
    2d72:	05 c0       	rjmp	.+10     	; 0x2d7e <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2d74:	80 38       	cpi	r24, 0x80	; 128
    2d76:	11 f4       	brne	.+4      	; 0x2d7c <__vector_126+0x1c2>
    2d78:	ca d8       	rcall	.-3692   	; 0x1f0e <udd_ctrl_in_sent>
    2d7a:	01 c0       	rjmp	.+2      	; 0x2d7e <__vector_126+0x1c4>
    2d7c:	ea d9       	rcall	.-3116   	; 0x2152 <udd_ep_trans_complet>
    2d7e:	ff 91       	pop	r31
    2d80:	ef 91       	pop	r30
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	bf 91       	pop	r27
    2d88:	af 91       	pop	r26
    2d8a:	9f 91       	pop	r25
    2d8c:	8f 91       	pop	r24
    2d8e:	7f 91       	pop	r23
    2d90:	6f 91       	pop	r22
    2d92:	5f 91       	pop	r21
    2d94:	4f 91       	pop	r20
    2d96:	3f 91       	pop	r19
    2d98:	2f 91       	pop	r18
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	0f 90       	pop	r0
    2da0:	0b be       	out	0x3b, r0	; 59
    2da2:	0f 90       	pop	r0
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	0f 90       	pop	r0
    2da8:	1f 90       	pop	r1
    2daa:	18 95       	reti

00002dac <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    2dac:	cf 92       	push	r12
    2dae:	df 92       	push	r13
    2db0:	ef 92       	push	r14
    2db2:	ff 92       	push	r15
    2db4:	cf 93       	push	r28
    2db6:	df 93       	push	r29
    2db8:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    2dba:	6b 01       	movw	r12, r22
    2dbc:	e1 2c       	mov	r14, r1
    2dbe:	f1 2c       	mov	r15, r1
    2dc0:	60 e8       	ldi	r22, 0x80	; 128
    2dc2:	73 ec       	ldi	r23, 0xC3	; 195
    2dc4:	89 ec       	ldi	r24, 0xC9	; 201
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	a7 01       	movw	r20, r14
    2dca:	96 01       	movw	r18, r12
    2dcc:	0e 94 9b 23 	call	0x4736	; 0x4736 <__udivmodsi4>
    2dd0:	ca 01       	movw	r24, r20
    2dd2:	b9 01       	movw	r22, r18
    2dd4:	2f ef       	ldi	r18, 0xFF	; 255
    2dd6:	3f ef       	ldi	r19, 0xFF	; 255
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	50 e0       	ldi	r21, 0x00	; 0
    2ddc:	0e 94 9b 23 	call	0x4736	; 0x4736 <__udivmodsi4>
	if (smallest_div < 1) {
    2de0:	21 15       	cp	r18, r1
    2de2:	31 05       	cpc	r19, r1
    2de4:	29 f4       	brne	.+10     	; 0x2df0 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    2dea:	21 e0       	ldi	r18, 0x01	; 1
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	2d c0       	rjmp	.+90     	; 0x2e4a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    2df0:	22 30       	cpi	r18, 0x02	; 2
    2df2:	31 05       	cpc	r19, r1
    2df4:	28 f4       	brcc	.+10     	; 0x2e00 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    2df6:	82 e0       	ldi	r24, 0x02	; 2
    2df8:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    2dfa:	22 e0       	ldi	r18, 0x02	; 2
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	25 c0       	rjmp	.+74     	; 0x2e4a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    2e00:	24 30       	cpi	r18, 0x04	; 4
    2e02:	31 05       	cpc	r19, r1
    2e04:	28 f4       	brcc	.+10     	; 0x2e10 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2e06:	83 e0       	ldi	r24, 0x03	; 3
    2e08:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    2e0a:	24 e0       	ldi	r18, 0x04	; 4
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	1d c0       	rjmp	.+58     	; 0x2e4a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    2e10:	28 30       	cpi	r18, 0x08	; 8
    2e12:	31 05       	cpc	r19, r1
    2e14:	28 f4       	brcc	.+10     	; 0x2e20 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2e16:	84 e0       	ldi	r24, 0x04	; 4
    2e18:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    2e1a:	28 e0       	ldi	r18, 0x08	; 8
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	15 c0       	rjmp	.+42     	; 0x2e4a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    2e20:	20 34       	cpi	r18, 0x40	; 64
    2e22:	31 05       	cpc	r19, r1
    2e24:	28 f4       	brcc	.+10     	; 0x2e30 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2e26:	85 e0       	ldi	r24, 0x05	; 5
    2e28:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2e2a:	20 e4       	ldi	r18, 0x40	; 64
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	0d c0       	rjmp	.+26     	; 0x2e4a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    2e30:	2f 3f       	cpi	r18, 0xFF	; 255
    2e32:	31 05       	cpc	r19, r1
    2e34:	09 f0       	breq	.+2      	; 0x2e38 <pwm_set_frequency+0x8c>
    2e36:	28 f4       	brcc	.+10     	; 0x2e42 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2e38:	86 e0       	ldi	r24, 0x06	; 6
    2e3a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	31 e0       	ldi	r19, 0x01	; 1
    2e40:	04 c0       	rjmp	.+8      	; 0x2e4a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2e42:	87 e0       	ldi	r24, 0x07	; 7
    2e44:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2e4a:	40 e0       	ldi	r20, 0x00	; 0
    2e4c:	50 e0       	ldi	r21, 0x00	; 0
    2e4e:	60 e8       	ldi	r22, 0x80	; 128
    2e50:	73 ec       	ldi	r23, 0xC3	; 195
    2e52:	89 ec       	ldi	r24, 0xC9	; 201
    2e54:	91 e0       	ldi	r25, 0x01	; 1
    2e56:	0e 94 9b 23 	call	0x4736	; 0x4736 <__udivmodsi4>
    2e5a:	ca 01       	movw	r24, r20
    2e5c:	b9 01       	movw	r22, r18
    2e5e:	a7 01       	movw	r20, r14
    2e60:	96 01       	movw	r18, r12
    2e62:	0e 94 9b 23 	call	0x4736	; 0x4736 <__udivmodsi4>
    2e66:	2d 83       	std	Y+5, r18	; 0x05
    2e68:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2e6a:	24 36       	cpi	r18, 0x64	; 100
    2e6c:	31 05       	cpc	r19, r1
    2e6e:	18 f4       	brcc	.+6      	; 0x2e76 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    2e70:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2e72:	1d 82       	std	Y+5, r1	; 0x05
    2e74:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	ff 90       	pop	r15
    2e7c:	ef 90       	pop	r14
    2e7e:	df 90       	pop	r13
    2e80:	cf 90       	pop	r12
    2e82:	08 95       	ret

00002e84 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2e84:	0f 93       	push	r16
    2e86:	1f 93       	push	r17
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	ec 01       	movw	r28, r24
    2e8e:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    2e90:	86 2f       	mov	r24, r22
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	87 30       	cpi	r24, 0x07	; 7
    2e96:	91 05       	cpc	r25, r1
    2e98:	08 f0       	brcs	.+2      	; 0x2e9c <pwm_init+0x18>
    2e9a:	8b c0       	rjmp	.+278    	; 0x2fb2 <pwm_init+0x12e>
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	88 27       	eor	r24, r24
    2ea0:	eb 5f       	subi	r30, 0xFB	; 251
    2ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ea6:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	98 e0       	ldi	r25, 0x08	; 8
    2eae:	88 83       	st	Y, r24
    2eb0:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2eb2:	e0 e4       	ldi	r30, 0x40	; 64
    2eb4:	f6 e0       	ldi	r31, 0x06	; 6
    2eb6:	30 81       	ld	r19, Z
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	2f ef       	ldi	r18, 0xFF	; 255
    2ebe:	24 0f       	add	r18, r20
    2ec0:	02 c0       	rjmp	.+4      	; 0x2ec6 <pwm_init+0x42>
    2ec2:	88 0f       	add	r24, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	2a 95       	dec	r18
    2ec8:	e2 f7       	brpl	.-8      	; 0x2ec2 <pwm_init+0x3e>
    2eca:	83 2b       	or	r24, r19
    2ecc:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2ece:	71 c0       	rjmp	.+226    	; 0x2fb2 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    2ed0:	80 e4       	ldi	r24, 0x40	; 64
    2ed2:	98 e0       	ldi	r25, 0x08	; 8
    2ed4:	88 83       	st	Y, r24
    2ed6:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2ed8:	e0 e4       	ldi	r30, 0x40	; 64
    2eda:	f6 e0       	ldi	r31, 0x06	; 6
    2edc:	30 81       	ld	r19, Z
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	23 e0       	ldi	r18, 0x03	; 3
    2ee4:	24 0f       	add	r18, r20
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <pwm_init+0x68>
    2ee8:	88 0f       	add	r24, r24
    2eea:	99 1f       	adc	r25, r25
    2eec:	2a 95       	dec	r18
    2eee:	e2 f7       	brpl	.-8      	; 0x2ee8 <pwm_init+0x64>
    2ef0:	83 2b       	or	r24, r19
    2ef2:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2ef4:	5e c0       	rjmp	.+188    	; 0x2fb2 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	99 e0       	ldi	r25, 0x09	; 9
    2efa:	88 83       	st	Y, r24
    2efc:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    2efe:	e0 e6       	ldi	r30, 0x60	; 96
    2f00:	f6 e0       	ldi	r31, 0x06	; 6
    2f02:	30 81       	ld	r19, Z
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	2f ef       	ldi	r18, 0xFF	; 255
    2f0a:	24 0f       	add	r18, r20
    2f0c:	02 c0       	rjmp	.+4      	; 0x2f12 <pwm_init+0x8e>
    2f0e:	88 0f       	add	r24, r24
    2f10:	99 1f       	adc	r25, r25
    2f12:	2a 95       	dec	r18
    2f14:	e2 f7       	brpl	.-8      	; 0x2f0e <pwm_init+0x8a>
    2f16:	83 2b       	or	r24, r19
    2f18:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2f1a:	4b c0       	rjmp	.+150    	; 0x2fb2 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2f1c:	80 e4       	ldi	r24, 0x40	; 64
    2f1e:	99 e0       	ldi	r25, 0x09	; 9
    2f20:	88 83       	st	Y, r24
    2f22:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2f24:	e0 e6       	ldi	r30, 0x60	; 96
    2f26:	f6 e0       	ldi	r31, 0x06	; 6
    2f28:	30 81       	ld	r19, Z
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	23 e0       	ldi	r18, 0x03	; 3
    2f30:	24 0f       	add	r18, r20
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <pwm_init+0xb4>
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	2a 95       	dec	r18
    2f3a:	e2 f7       	brpl	.-8      	; 0x2f34 <pwm_init+0xb0>
    2f3c:	83 2b       	or	r24, r19
    2f3e:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2f40:	38 c0       	rjmp	.+112    	; 0x2fb2 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	9a e0       	ldi	r25, 0x0A	; 10
    2f46:	88 83       	st	Y, r24
    2f48:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2f4a:	e0 e8       	ldi	r30, 0x80	; 128
    2f4c:	f6 e0       	ldi	r31, 0x06	; 6
    2f4e:	30 81       	ld	r19, Z
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	2f ef       	ldi	r18, 0xFF	; 255
    2f56:	24 0f       	add	r18, r20
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <pwm_init+0xda>
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	2a 95       	dec	r18
    2f60:	e2 f7       	brpl	.-8      	; 0x2f5a <pwm_init+0xd6>
    2f62:	83 2b       	or	r24, r19
    2f64:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2f66:	25 c0       	rjmp	.+74     	; 0x2fb2 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    2f68:	80 e4       	ldi	r24, 0x40	; 64
    2f6a:	9a e0       	ldi	r25, 0x0A	; 10
    2f6c:	88 83       	st	Y, r24
    2f6e:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    2f70:	e0 e8       	ldi	r30, 0x80	; 128
    2f72:	f6 e0       	ldi	r31, 0x06	; 6
    2f74:	30 81       	ld	r19, Z
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	23 e0       	ldi	r18, 0x03	; 3
    2f7c:	24 0f       	add	r18, r20
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <pwm_init+0x100>
    2f80:	88 0f       	add	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	2a 95       	dec	r18
    2f86:	e2 f7       	brpl	.-8      	; 0x2f80 <pwm_init+0xfc>
    2f88:	83 2b       	or	r24, r19
    2f8a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2f8c:	12 c0       	rjmp	.+36     	; 0x2fb2 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	9b e0       	ldi	r25, 0x0B	; 11
    2f92:	88 83       	st	Y, r24
    2f94:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    2f96:	e0 ea       	ldi	r30, 0xA0	; 160
    2f98:	f6 e0       	ldi	r31, 0x06	; 6
    2f9a:	30 81       	ld	r19, Z
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	2f ef       	ldi	r18, 0xFF	; 255
    2fa2:	24 0f       	add	r18, r20
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <pwm_init+0x126>
    2fa6:	88 0f       	add	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	2a 95       	dec	r18
    2fac:	e2 f7       	brpl	.-8      	; 0x2fa6 <pwm_init+0x122>
    2fae:	83 2b       	or	r24, r19
    2fb0:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    2fb2:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    2fb4:	42 30       	cpi	r20, 0x02	; 2
    2fb6:	61 f0       	breq	.+24     	; 0x2fd0 <pwm_init+0x14c>
    2fb8:	18 f4       	brcc	.+6      	; 0x2fc0 <pwm_init+0x13c>
    2fba:	41 30       	cpi	r20, 0x01	; 1
    2fbc:	31 f0       	breq	.+12     	; 0x2fca <pwm_init+0x146>
    2fbe:	10 c0       	rjmp	.+32     	; 0x2fe0 <pwm_init+0x15c>
    2fc0:	43 30       	cpi	r20, 0x03	; 3
    2fc2:	49 f0       	breq	.+18     	; 0x2fd6 <pwm_init+0x152>
    2fc4:	44 30       	cpi	r20, 0x04	; 4
    2fc6:	51 f0       	breq	.+20     	; 0x2fdc <pwm_init+0x158>
    2fc8:	0b c0       	rjmp	.+22     	; 0x2fe0 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    2fca:	80 e1       	ldi	r24, 0x10	; 16
    2fcc:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2fce:	08 c0       	rjmp	.+16     	; 0x2fe0 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    2fd0:	80 e2       	ldi	r24, 0x20	; 32
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2fd4:	05 c0       	rjmp	.+10     	; 0x2fe0 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    2fd6:	80 e4       	ldi	r24, 0x40	; 64
    2fd8:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2fda:	02 c0       	rjmp	.+4      	; 0x2fe0 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    2fdc:	80 e8       	ldi	r24, 0x80	; 128
    2fde:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    2fe0:	88 81       	ld	r24, Y
    2fe2:	99 81       	ldd	r25, Y+1	; 0x01
    2fe4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    2fe8:	e8 81       	ld	r30, Y
    2fea:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2fec:	81 81       	ldd	r24, Z+1	; 0x01
    2fee:	88 7f       	andi	r24, 0xF8	; 248
    2ff0:	83 60       	ori	r24, 0x03	; 3
    2ff2:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2ff4:	1d 82       	std	Y+5, r1	; 0x05
    2ff6:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2ff8:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    2ffa:	e8 81       	ld	r30, Y
    2ffc:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2ffe:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3000:	80 7f       	andi	r24, 0xF0	; 240
    3002:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    3004:	b8 01       	movw	r22, r16
    3006:	ce 01       	movw	r24, r28
    3008:	d1 de       	rcall	.-606    	; 0x2dac <pwm_set_frequency>
}
    300a:	df 91       	pop	r29
    300c:	cf 91       	pop	r28
    300e:	1f 91       	pop	r17
    3010:	0f 91       	pop	r16
    3012:	08 95       	ret

00003014 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    3014:	cf 93       	push	r28
    3016:	df 93       	push	r29
    3018:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    301a:	2d 81       	ldd	r18, Y+5	; 0x05
    301c:	3e 81       	ldd	r19, Y+6	; 0x06
    301e:	a6 2f       	mov	r26, r22
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	0e 94 c5 23 	call	0x478a	; 0x478a <__umulhisi3>
    3026:	24 e6       	ldi	r18, 0x64	; 100
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	0e 94 9b 23 	call	0x4736	; 0x4736 <__udivmodsi4>
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	e8 81       	ld	r30, Y
    3036:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    3038:	e6 fd       	sbrc	r30, 6
    303a:	17 c0       	rjmp	.+46     	; 0x306a <pwm_start+0x56>
		switch (channel_index) {
    303c:	82 30       	cpi	r24, 0x02	; 2
    303e:	61 f0       	breq	.+24     	; 0x3058 <pwm_start+0x44>
    3040:	18 f4       	brcc	.+6      	; 0x3048 <pwm_start+0x34>
    3042:	81 30       	cpi	r24, 0x01	; 1
    3044:	31 f0       	breq	.+12     	; 0x3052 <pwm_start+0x3e>
    3046:	1b c0       	rjmp	.+54     	; 0x307e <pwm_start+0x6a>
    3048:	83 30       	cpi	r24, 0x03	; 3
    304a:	49 f0       	breq	.+18     	; 0x305e <pwm_start+0x4a>
    304c:	84 30       	cpi	r24, 0x04	; 4
    304e:	51 f0       	breq	.+20     	; 0x3064 <pwm_start+0x50>
    3050:	16 c0       	rjmp	.+44     	; 0x307e <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    3052:	20 af       	std	Z+56, r18	; 0x38
    3054:	31 af       	std	Z+57, r19	; 0x39
    3056:	13 c0       	rjmp	.+38     	; 0x307e <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    3058:	22 af       	std	Z+58, r18	; 0x3a
    305a:	33 af       	std	Z+59, r19	; 0x3b
    305c:	10 c0       	rjmp	.+32     	; 0x307e <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    305e:	24 af       	std	Z+60, r18	; 0x3c
    3060:	35 af       	std	Z+61, r19	; 0x3d
    3062:	0d c0       	rjmp	.+26     	; 0x307e <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    3064:	26 af       	std	Z+62, r18	; 0x3e
    3066:	37 af       	std	Z+63, r19	; 0x3f
    3068:	0a c0       	rjmp	.+20     	; 0x307e <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	19 f0       	breq	.+6      	; 0x3074 <pwm_start+0x60>
    306e:	82 30       	cpi	r24, 0x02	; 2
    3070:	21 f0       	breq	.+8      	; 0x307a <pwm_start+0x66>
    3072:	05 c0       	rjmp	.+10     	; 0x307e <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    3074:	20 af       	std	Z+56, r18	; 0x38
    3076:	31 af       	std	Z+57, r19	; 0x39
    3078:	02 c0       	rjmp	.+4      	; 0x307e <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    307a:	22 af       	std	Z+58, r18	; 0x3a
    307c:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    307e:	8d 81       	ldd	r24, Y+5	; 0x05
    3080:	9e 81       	ldd	r25, Y+6	; 0x06
    3082:	e8 81       	ld	r30, Y
    3084:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    3086:	86 a3       	std	Z+38, r24	; 0x26
    3088:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    308a:	8b 81       	ldd	r24, Y+3	; 0x03
    308c:	e8 81       	ld	r30, Y
    308e:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    3090:	e6 fd       	sbrc	r30, 6
    3092:	04 c0       	rjmp	.+8      	; 0x309c <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    3094:	91 81       	ldd	r25, Z+1	; 0x01
    3096:	89 2b       	or	r24, r25
    3098:	81 83       	std	Z+1, r24	; 0x01
    309a:	04 c0       	rjmp	.+8      	; 0x30a4 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    309c:	91 81       	ldd	r25, Z+1	; 0x01
    309e:	80 73       	andi	r24, 0x30	; 48
    30a0:	89 2b       	or	r24, r25
    30a2:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    30a4:	e8 81       	ld	r30, Y
    30a6:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    30a8:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    30aa:	80 7f       	andi	r24, 0xF0	; 240
    30ac:	9c 81       	ldd	r25, Y+4	; 0x04
    30ae:	89 2b       	or	r24, r25
    30b0:	80 83       	st	Z, r24
}
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	08 95       	ret

000030b8 <cb_rtc_alarm>:

void halt(void)
{
	/* MAIN Loop Shutdown */

	runmode = 0;
    30b8:	08 95       	ret

000030ba <cb_adc_a>:
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	1f 92       	push	r1
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    30c8:	82 95       	swap	r24
    30ca:	8f 70       	andi	r24, 0x0F	; 15
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	60 ff       	sbrs	r22, 0
    30d0:	16 c0       	rjmp	.+44     	; 0x30fe <cb_adc_a+0x44>
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	21 f0       	breq	.+8      	; 0x30e0 <cb_adc_a+0x26>
    30d8:	68 f0       	brcs	.+26     	; 0x30f4 <cb_adc_a+0x3a>
    30da:	82 30       	cpi	r24, 0x02	; 2
    30dc:	31 f0       	breq	.+12     	; 0x30ea <cb_adc_a+0x30>
    30de:	23 c0       	rjmp	.+70     	; 0x3126 <cb_adc_a+0x6c>
    30e0:	40 93 d7 22 	sts	0x22D7, r20	; 0x8022d7 <g_adc_vctcxo_cur>
    30e4:	50 93 d8 22 	sts	0x22D8, r21	; 0x8022d8 <g_adc_vctcxo_cur+0x1>
    30e8:	1e c0       	rjmp	.+60     	; 0x3126 <cb_adc_a+0x6c>
    30ea:	40 93 d5 22 	sts	0x22D5, r20	; 0x8022d5 <g_adc_5v0_cur>
    30ee:	50 93 d6 22 	sts	0x22D6, r21	; 0x8022d6 <g_adc_5v0_cur+0x1>
    30f2:	19 c0       	rjmp	.+50     	; 0x3126 <cb_adc_a+0x6c>
    30f4:	40 93 d3 22 	sts	0x22D3, r20	; 0x8022d3 <g_adc_vbat_cur>
    30f8:	50 93 d4 22 	sts	0x22D4, r21	; 0x8022d4 <g_adc_vbat_cur+0x1>
    30fc:	14 c0       	rjmp	.+40     	; 0x3126 <cb_adc_a+0x6c>
    30fe:	61 ff       	sbrs	r22, 1
    3100:	05 c0       	rjmp	.+10     	; 0x310c <cb_adc_a+0x52>
    3102:	40 93 d1 22 	sts	0x22D1, r20	; 0x8022d1 <g_adc_io_adc4_cur>
    3106:	50 93 d2 22 	sts	0x22D2, r21	; 0x8022d2 <g_adc_io_adc4_cur+0x1>
    310a:	0d c0       	rjmp	.+26     	; 0x3126 <cb_adc_a+0x6c>
    310c:	62 ff       	sbrs	r22, 2
    310e:	05 c0       	rjmp	.+10     	; 0x311a <cb_adc_a+0x60>
    3110:	40 93 cf 22 	sts	0x22CF, r20	; 0x8022cf <g_adc_io_adc5_cur>
    3114:	50 93 d0 22 	sts	0x22D0, r21	; 0x8022d0 <g_adc_io_adc5_cur+0x1>
    3118:	06 c0       	rjmp	.+12     	; 0x3126 <cb_adc_a+0x6c>
    311a:	63 ff       	sbrs	r22, 3
    311c:	04 c0       	rjmp	.+8      	; 0x3126 <cb_adc_a+0x6c>
    311e:	40 93 cd 22 	sts	0x22CD, r20	; 0x8022cd <g_adc_temp_cur>
    3122:	50 93 ce 22 	sts	0x22CE, r21	; 0x8022ce <g_adc_temp_cur+0x1>
    3126:	0f 90       	pop	r0
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	08 95       	ret

0000312e <usb_callback_suspend_action>:
    312e:	08 95       	ret

00003130 <usb_callback_resume_action>:
    3130:	08 95       	ret

00003132 <usb_callback_remotewakeup_enable>:
    3132:	08 95       	ret

00003134 <usb_callback_remotewakeup_disable>:
    3134:	08 95       	ret

00003136 <usb_callback_cdc_enable>:
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	80 93 f1 22 	sts	0x22F1, r24	; 0x8022f1 <usb_cdc_transfers_autorized>
    313c:	08 95       	ret

0000313e <usb_callback_cdc_disable>:
    313e:	10 92 f1 22 	sts	0x22F1, r1	; 0x8022f1 <usb_cdc_transfers_autorized>
    3142:	08 95       	ret

00003144 <usb_callback_config>:
    3144:	08 95       	ret

00003146 <usb_callback_cdc_set_dtr>:
    3146:	08 95       	ret

00003148 <usb_callback_cdc_set_rts>:
    3148:	08 95       	ret

0000314a <usb_callback_rx_notify>:
    314a:	08 95       	ret

0000314c <usb_callback_tx_empty_notify>:
    314c:	08 95       	ret

0000314e <main>:
}


int main(void)
{
    314e:	4f 92       	push	r4
    3150:	5f 92       	push	r5
    3152:	6f 92       	push	r6
    3154:	7f 92       	push	r7
    3156:	8f 92       	push	r8
    3158:	9f 92       	push	r9
    315a:	af 92       	push	r10
    315c:	bf 92       	push	r11
    315e:	cf 92       	push	r12
    3160:	df 92       	push	r13
    3162:	ef 92       	push	r14
    3164:	ff 92       	push	r15
    3166:	0f 93       	push	r16
    3168:	1f 93       	push	r17
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	27 97       	sbiw	r28, 0x07	; 7
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	irq_initialize_vectors();
    3178:	e0 ea       	ldi	r30, 0xA0	; 160
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	87 e0       	ldi	r24, 0x07	; 7
    317e:	82 83       	std	Z+2, r24	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    3180:	82 83       	std	Z+2, r24	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	8f 77       	andi	r24, 0x7F	; 127
    3186:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    3188:	11 82       	std	Z+1, r1	; 0x01
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    318a:	29 d2       	rcall	.+1106   	; 0x35de <sysclk_init>
    318c:	e1 e4       	ldi	r30, 0x41	; 65
    318e:	f4 e2       	ldi	r31, 0x24	; 36
    3190:	10 82       	st	Z, r1
    3192:	11 82       	std	Z+1, r1	; 0x01
    3194:	12 82       	std	Z+2, r1	; 0x02
    3196:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3198:	14 82       	std	Z+4, r1	; 0x04
    319a:	55 24       	eor	r5, r5
    319c:	53 94       	inc	r5

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    319e:	55 82       	std	Z+5, r5	; 0x05
    31a0:	0e 94 4f 01 	call	0x29e	; 0x29e <rtc_init>
	rtc_set_callback(cb_rtc_alarm);
    31a4:	8c e5       	ldi	r24, 0x5C	; 92
    31a6:	98 e1       	ldi	r25, 0x18	; 24
    31a8:	0e 94 4a 01 	call	0x294	; 0x294 <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    31ac:	62 e0       	ldi	r22, 0x02	; 2
    31ae:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH0
    31b0:	97 d2       	rcall	.+1326   	; 0x36e0 <sysclk_enable_module>
    31b2:	e0 e8       	ldi	r30, 0x80	; 128
    31b4:	f1 e0       	ldi	r31, 0x01	; 1
    31b6:	86 ec       	ldi	r24, 0xC6	; 198
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    31b8:	80 83       	st	Z, r24
	EVSYS.CH1MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH1
    31ba:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH1 no digital filtering
    31bc:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH2MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH2
    31be:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
    31c0:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH3
    31c2:	12 86       	std	Z+10, r1	; 0x0a
	EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering
    31c4:	83 83       	std	Z+3, r24	; 0x03

	/* DAC - event 7 */
	EVSYS.CH7MUX = EVSYS_CHMUX_TCE1_OVF_gc;										// TCE1 overflow goes to EVSYS CH7
    31c6:	13 86       	std	Z+11, r1	; 0x0b
    31c8:	88 ee       	ldi	r24, 0xE8	; 232
	EVSYS.CH7CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH7 no digital filtering
    31ca:	87 83       	std	Z+7, r24	; 0x07

static void tc_init(void)
{
	/* TCC0: VCTCXO PWM signal generation and ADCA CH0 */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 500);							// Init PWM structure and enable timer
    31cc:	17 86       	std	Z+15, r1	; 0x0f
    31ce:	24 ef       	ldi	r18, 0xF4	; 244
    31d0:	31 e0       	ldi	r19, 0x01	; 1
    31d2:	43 e0       	ldi	r20, 0x03	; 3
    31d4:	60 e0       	ldi	r22, 0x00	; 0
    31d6:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    31d8:	01 96       	adiw	r24, 0x01	; 1
    31da:	54 de       	rcall	.-856    	; 0x2e84 <pwm_init>
    31dc:	6d e2       	ldi	r22, 0x2D	; 45
    31de:	ce 01       	movw	r24, r28
	tc_write_cc_buffer(&TCC0, TC_CCC, (uint16_t) (0.5f + pwm_vctcxo_cfg.period * C_VCTCXO_VOLTS / C_PWM_3V3_VOLTS));	// Initial value for VCTCXO
    31e0:	01 96       	adiw	r24, 0x01	; 1
    31e2:	18 df       	rcall	.-464    	; 0x3014 <pwm_start>
    31e4:	6e 81       	ldd	r22, Y+6	; 0x06
    31e6:	7f 81       	ldd	r23, Y+7	; 0x07
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0e 94 cd 24 	call	0x499a	; 0x499a <__floatunsisf>
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	40 ec       	ldi	r20, 0xC0	; 192
    31f6:	5f e3       	ldi	r21, 0x3F	; 63
    31f8:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__mulsf3>
    31fc:	2b ed       	ldi	r18, 0xDB	; 219
    31fe:	39 ef       	ldi	r19, 0xF9	; 249
    3200:	4e e4       	ldi	r20, 0x4E	; 78
    3202:	50 e4       	ldi	r21, 0x40	; 64
    3204:	0e 94 39 24 	call	0x4872	; 0x4872 <__divsf3>
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e0       	ldi	r20, 0x00	; 0
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__addsf3>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    3214:	0e 94 a1 24 	call	0x4942	; 0x4942 <__fixunssfsi>
    3218:	61 2c       	mov	r6, r1
    321a:	68 94       	set
    321c:	77 24       	eor	r7, r7
    321e:	73 f8       	bld	r7, 3
    3220:	d3 01       	movw	r26, r6
    3222:	dc 96       	adiw	r26, 0x3c	; 60
    3224:	6d 93       	st	X+, r22

	/* TCE1: DAC clock */
	tc_enable(&TCE1);
    3226:	7c 93       	st	X, r23
    3228:	dd 97       	sbiw	r26, 0x3d	; 61
    322a:	80 e4       	ldi	r24, 0x40	; 64
    322c:	9a e0       	ldi	r25, 0x0A	; 10
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    322e:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <tc_enable>
    3232:	00 e4       	ldi	r16, 0x40	; 64
    3234:	1a e0       	ldi	r17, 0x0A	; 10
    3236:	f8 01       	movw	r30, r16
    3238:	81 81       	ldd	r24, Z+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    323a:	88 7f       	andi	r24, 0xF8	; 248
    323c:	81 83       	std	Z+1, r24	; 0x01
    323e:	80 e7       	ldi	r24, 0x70	; 112
    3240:	92 e0       	ldi	r25, 0x02	; 2
}

static void adc_init(void)
{
	/* Disable input pins */
	PORTA_PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    3242:	86 a3       	std	Z+38, r24	; 0x26
    3244:	97 a3       	std	Z+39, r25	; 0x27
    3246:	e0 e1       	ldi	r30, 0x10	; 16
    3248:	f6 e0       	ldi	r31, 0x06	; 6
    324a:	80 81       	ld	r24, Z
	PORTA_PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    324c:	87 60       	ori	r24, 0x07	; 7
    324e:	80 83       	st	Z, r24
    3250:	e1 e1       	ldi	r30, 0x11	; 17
    3252:	f6 e0       	ldi	r31, 0x06	; 6
    3254:	80 81       	ld	r24, Z
	PORTA_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    3256:	87 60       	ori	r24, 0x07	; 7
    3258:	80 83       	st	Z, r24
    325a:	e2 e1       	ldi	r30, 0x12	; 18
    325c:	f6 e0       	ldi	r31, 0x06	; 6
    325e:	80 81       	ld	r24, Z
	PORTA_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    3260:	87 60       	ori	r24, 0x07	; 7
    3262:	80 83       	st	Z, r24
    3264:	e3 e1       	ldi	r30, 0x13	; 19
    3266:	f6 e0       	ldi	r31, 0x06	; 6
    3268:	80 81       	ld	r24, Z
	PORTA_PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    326a:	87 60       	ori	r24, 0x07	; 7
    326c:	80 83       	st	Z, r24
    326e:	e4 e1       	ldi	r30, 0x14	; 20
    3270:	f6 e0       	ldi	r31, 0x06	; 6
    3272:	80 81       	ld	r24, Z
	PORTA_PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    3274:	87 60       	ori	r24, 0x07	; 7
    3276:	80 83       	st	Z, r24
    3278:	e5 e1       	ldi	r30, 0x15	; 21
    327a:	f6 e0       	ldi	r31, 0x06	; 6
    327c:	80 81       	ld	r24, Z
	PORTB_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    327e:	87 60       	ori	r24, 0x07	; 7
    3280:	80 83       	st	Z, r24
    3282:	e2 e3       	ldi	r30, 0x32	; 50
    3284:	f6 e0       	ldi	r31, 0x06	; 6
    3286:	80 81       	ld	r24, Z
	PORTB_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    3288:	87 60       	ori	r24, 0x07	; 7
    328a:	80 83       	st	Z, r24
    328c:	e3 e3       	ldi	r30, 0x33	; 51
    328e:	f6 e0       	ldi	r31, 0x06	; 6
    3290:	80 81       	ld	r24, Z

	/* Prepare the structures */
	adc_read_configuration(&ADC_VCTCXO_5V0_VBAT,							&g_adc_a_conf);
    3292:	87 60       	ori	r24, 0x07	; 7
    3294:	80 83       	st	Z, r24
    3296:	69 ee       	ldi	r22, 0xE9	; 233
    3298:	72 e2       	ldi	r23, 0x22	; 34
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    329e:	0e 94 06 06 	call	0xc0c	; 0xc0c <adc_read_configuration>
    32a2:	45 ee       	ldi	r20, 0xE5	; 229
    32a4:	52 e2       	ldi	r21, 0x22	; 34
    32a6:	61 e0       	ldi	r22, 0x01	; 1
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    32ac:	0e 94 8a 06 	call	0xd14	; 0xd14 <adcch_read_configuration>
    32b0:	41 ee       	ldi	r20, 0xE1	; 225
    32b2:	52 e2       	ldi	r21, 0x22	; 34
    32b4:	62 e0       	ldi	r22, 0x02	; 2
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    32ba:	0e 94 8a 06 	call	0xd14	; 0xd14 <adcch_read_configuration>
    32be:	4d ed       	ldi	r20, 0xDD	; 221
    32c0:	52 e2       	ldi	r21, 0x22	; 34
    32c2:	64 e0       	ldi	r22, 0x04	; 4
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    32c8:	0e 94 8a 06 	call	0xd14	; 0xd14 <adcch_read_configuration>
    32cc:	49 ed       	ldi	r20, 0xD9	; 217
    32ce:	52 e2       	ldi	r21, 0x22	; 34
    32d0:	68 e0       	ldi	r22, 0x08	; 8
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	92 e0       	ldi	r25, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    32d6:	0e 94 8a 06 	call	0xd14	; 0xd14 <adcch_read_configuration>
    32da:	e9 ee       	ldi	r30, 0xE9	; 233
    32dc:	f2 e2       	ldi	r31, 0x22	; 34
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    32de:	24 e0       	ldi	r18, 0x04	; 4
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    32e0:	24 83       	std	Z+4, r18	; 0x04
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    32e2:	92 81       	ldd	r25, Z+2	; 0x02
    32e4:	81 81       	ldd	r24, Z+1	; 0x01
    32e6:	0f 2e       	mov	r0, r31
    32e8:	f5 ee       	ldi	r31, 0xE5	; 229
    32ea:	ef 2e       	mov	r14, r31
    32ec:	f2 e2       	ldi	r31, 0x22	; 34
    32ee:	ff 2e       	mov	r15, r31
    32f0:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    32f2:	d7 01       	movw	r26, r14
    32f4:	5c 92       	st	X, r5
    32f6:	38 e0       	ldi	r19, 0x08	; 8
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    32f8:	11 96       	adiw	r26, 0x01	; 1
    32fa:	3c 93       	st	X, r19
    32fc:	0f 2e       	mov	r0, r31
    32fe:	f1 ee       	ldi	r31, 0xE1	; 225
    3300:	8f 2e       	mov	r8, r31
    3302:	f2 e2       	ldi	r31, 0x22	; 34
    3304:	9f 2e       	mov	r9, r31
    3306:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3308:	d4 01       	movw	r26, r8
    330a:	5c 92       	st	X, r5
    330c:	30 e2       	ldi	r19, 0x20	; 32
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    330e:	11 96       	adiw	r26, 0x01	; 1
    3310:	3c 93       	st	X, r19
    3312:	0f 2e       	mov	r0, r31
    3314:	fd ed       	ldi	r31, 0xDD	; 221
    3316:	af 2e       	mov	r10, r31
    3318:	f2 e2       	ldi	r31, 0x22	; 34
    331a:	bf 2e       	mov	r11, r31
    331c:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    331e:	d5 01       	movw	r26, r10
    3320:	5c 92       	st	X, r5
    3322:	38 e2       	ldi	r19, 0x28	; 40
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    3324:	11 96       	adiw	r26, 0x01	; 1
    3326:	3c 93       	st	X, r19
    3328:	0f 2e       	mov	r0, r31
    332a:	f9 ed       	ldi	r31, 0xD9	; 217
    332c:	cf 2e       	mov	r12, r31
    332e:	f2 e2       	ldi	r31, 0x22	; 34
    3330:	df 2e       	mov	r13, r31
    3332:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    3334:	d6 01       	movw	r26, r12
    3336:	1c 92       	st	X, r1
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    3338:	11 96       	adiw	r26, 0x01	; 1
    333a:	1c 92       	st	X, r1
    333c:	9f 78       	andi	r25, 0x8F	; 143
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    333e:	93 62       	ori	r25, 0x23	; 35
    3340:	92 83       	std	Z+2, r25	; 0x02
    3342:	92 e0       	ldi	r25, 0x02	; 2
    3344:	d7 01       	movw	r26, r14
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    3346:	13 96       	adiw	r26, 0x03	; 3
    3348:	9c 93       	st	X, r25
    334a:	81 70       	andi	r24, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    334c:	80 64       	ori	r24, 0x40	; 64

	/* Trigger */
	adc_set_conversion_trigger(&g_adc_a_conf, ADC_TRIG_EVENT_SINGLE, 4, 0);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, cb_adc_a);
    334e:	81 83       	std	Z+1, r24	; 0x01
    3350:	23 83       	std	Z+3, r18	; 0x03
    3352:	6d e5       	ldi	r22, 0x5D	; 93
    3354:	78 e1       	ldi	r23, 0x18	; 24
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	92 e0       	ldi	r25, 0x02	; 2
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    335a:	0e 94 80 03 	call	0x700	; 0x700 <adc_set_callback>
    335e:	f4 01       	movw	r30, r8
    3360:	22 81       	ldd	r18, Z+2	; 0x02
    3362:	d5 01       	movw	r26, r10
    3364:	12 96       	adiw	r26, 0x02	; 2
    3366:	9c 91       	ld	r25, X
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    3368:	f6 01       	movw	r30, r12
    336a:	82 81       	ldd	r24, Z+2	; 0x02
    336c:	d7 01       	movw	r26, r14
    336e:	12 96       	adiw	r26, 0x02	; 2
    3370:	3c 91       	ld	r19, X
    3372:	12 97       	sbiw	r26, 0x02	; 2
    3374:	30 7f       	andi	r19, 0xF0	; 240
    3376:	31 60       	ori	r19, 0x01	; 1
    3378:	12 96       	adiw	r26, 0x02	; 2
    337a:	3c 93       	st	X, r19
    337c:	20 7f       	andi	r18, 0xF0	; 240
    337e:	21 60       	ori	r18, 0x01	; 1
    3380:	f4 01       	movw	r30, r8
    3382:	22 83       	std	Z+2, r18	; 0x02
    3384:	90 7f       	andi	r25, 0xF0	; 240
    3386:	91 60       	ori	r25, 0x01	; 1
    3388:	d5 01       	movw	r26, r10
    338a:	12 96       	adiw	r26, 0x02	; 2
    338c:	9c 93       	st	X, r25
    338e:	80 7f       	andi	r24, 0xF0	; 240
    3390:	81 60       	ori	r24, 0x01	; 1
	adcch_enable_interrupt(&g_adcch_io_adc4_conf);
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);
	adcch_enable_interrupt(&g_adcch_temp_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,											&g_adc_a_conf);
    3392:	f6 01       	movw	r30, r12
    3394:	82 83       	std	Z+2, r24	; 0x02
    3396:	69 ee       	ldi	r22, 0xE9	; 233
    3398:	72 e2       	ldi	r23, 0x22	; 34
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    339e:	0e 94 9c 05 	call	0xb38	; 0xb38 <adc_write_configuration>
    33a2:	a7 01       	movw	r20, r14
    33a4:	61 e0       	ldi	r22, 0x01	; 1
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    33aa:	0e 94 3f 06 	call	0xc7e	; 0xc7e <adcch_write_configuration>
    33ae:	a4 01       	movw	r20, r8
    33b0:	62 e0       	ldi	r22, 0x02	; 2
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    33b6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <adcch_write_configuration>
    33ba:	a5 01       	movw	r20, r10
    33bc:	64 e0       	ldi	r22, 0x04	; 4
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    33c2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <adcch_write_configuration>
    33c6:	a6 01       	movw	r20, r12
    33c8:	68 e0       	ldi	r22, 0x08	; 8
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	92 e0       	ldi	r25, 0x02	; 2

	evsys_init();		// Event system
	tc_init();			// Timers
	adc_init();			// ADC
	dac_init();			// DAC
	twi_init();			// I2C / TWI
    33ce:	0e 94 3f 06 	call	0xc7e	; 0xc7e <adcch_write_configuration>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    33d2:	0e 94 1a 02 	call	0x434	; 0x434 <twi_init>

	/* All interrupt sources & PMIC are prepared until here - IRQ activation follows */
	cpu_irq_enable();
    33d6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <board_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    33da:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    33dc:	d3 01       	movw	r26, r6
    33de:	8c 91       	ld	r24, X
    33e0:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    33e2:	81 60       	ori	r24, 0x01	; 1
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    33e4:	8c 93       	st	X, r24
    33e6:	f8 01       	movw	r30, r16
    33e8:	80 81       	ld	r24, Z
	//dac_enable(&DACB);
}

static void usb_init(void)
{
	udc_start();
    33ea:	80 7f       	andi	r24, 0xF0	; 240
    33ec:	81 60       	ori	r24, 0x01	; 1

#if 1
	stdio_usb_init();	// Init and enable stdio_usb
    33ee:	80 83       	st	Z, r24
    33f0:	02 d6       	rcall	.+3076   	; 0x3ff6 <udc_start>
	stdio_usb_enable();
    33f2:	0e 94 4e 23 	call	0x469c	; 0x469c <stdio_usb_init>
	/* Start of sub-modules */
	tc_start();			// All clocks and PWM timers start here

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB
	twi_start();		// Start TWI
    33f6:	0e 94 4a 23 	call	0x4694	; 0x4694 <stdio_usb_enable>
}

static void adc_start(void)
{
	/* Power up after configurations are being set */
	adc_enable(&ADCA);
    33fa:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_start>
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	92 e0       	ldi	r25, 0x02	; 2
	twi_start();		// Start TWI
	adc_start();		// Start AD convertions
	dac_start();		// Start DA convertions

	/* The application code */
	runmode = 1;
    3402:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <adc_enable>
		l_adc_io_adc4_cur = g_adc_io_adc4_cur;
		l_adc_io_adc5_cur = g_adc_io_adc5_cur;
		l_adc_temp_cur = g_adc_temp_cur;
		cpu_irq_restore(flags);

		printf("time = %5ld: vctcxo=%04d, 5v0=%04d, vbat=%04d, adc4=%04d, adc5=%04d, temp=%04d\r\n", 
    3406:	50 92 f2 22 	sts	0x22F2, r5	; 0x8022f2 <runmode>
    340a:	0f 2e       	mov	r0, r31
    340c:	f6 ee       	ldi	r31, 0xE6	; 230
    340e:	cf 2e       	mov	r12, r31
    3410:	f0 e2       	ldi	r31, 0x20	; 32

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3412:	df 2e       	mov	r13, r31
    3414:	f0 2d       	mov	r31, r0
    3416:	0f 2e       	mov	r0, r31
    3418:	f1 e4       	ldi	r31, 0x41	; 65
    341a:	ef 2e       	mov	r14, r31
    341c:	f4 e2       	ldi	r31, 0x24	; 36
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    341e:	ff 2e       	mov	r15, r31
    3420:	f0 2d       	mov	r31, r0
}

static void task(void)
{
	static uint32_t last = 0;
	uint32_t now = rtc_get_time();
    3422:	08 e4       	ldi	r16, 0x48	; 72
    3424:	10 e0       	ldi	r17, 0x00	; 0
    3426:	0e 94 39 01 	call	0x272	; 0x272 <rtc_get_time>
			 l_adc_vbat_cur,
			 l_adc_io_adc4_cur,
			 l_adc_io_adc5_cur,
			 l_adc_temp_cur;

	if ((now - adc_last) >= 512) {
    342a:	4b 01       	movw	r8, r22
    342c:	5c 01       	movw	r10, r24
    342e:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <adc_last.6978>
    3432:	90 91 be 22 	lds	r25, 0x22BE	; 0x8022be <adc_last.6978+0x1>
    3436:	a0 91 bf 22 	lds	r26, 0x22BF	; 0x8022bf <adc_last.6978+0x2>
    343a:	b0 91 c0 22 	lds	r27, 0x22C0	; 0x8022c0 <adc_last.6978+0x3>
    343e:	a5 01       	movw	r20, r10
    3440:	94 01       	movw	r18, r8
    3442:	28 1b       	sub	r18, r24
    3444:	39 0b       	sbc	r19, r25
    3446:	4a 0b       	sbc	r20, r26
    3448:	5b 0b       	sbc	r21, r27
    344a:	da 01       	movw	r26, r20
    344c:	c9 01       	movw	r24, r18
    344e:	81 15       	cp	r24, r1
    3450:	92 40       	sbci	r25, 0x02	; 2
    3452:	a1 05       	cpc	r26, r1
    3454:	b1 05       	cpc	r27, r1
		adc_last = now;
    3456:	08 f4       	brcc	.+2      	; 0x345a <main+0x30c>
    3458:	46 c0       	rjmp	.+140    	; 0x34e6 <main+0x398>
    345a:	80 92 bd 22 	sts	0x22BD, r8	; 0x8022bd <adc_last.6978>
    345e:	90 92 be 22 	sts	0x22BE, r9	; 0x8022be <adc_last.6978+0x1>
    3462:	a0 92 bf 22 	sts	0x22BF, r10	; 0x8022bf <adc_last.6978+0x2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3466:	b0 92 c0 22 	sts	0x22C0, r11	; 0x8022c0 <adc_last.6978+0x3>
	cpu_irq_disable();
    346a:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    346c:	89 83       	std	Y+1, r24	; 0x01

		irqflags_t flags = cpu_irq_save();
		l_adc_vctcxo_cur = g_adc_vctcxo_cur;
    346e:	f8 94       	cli
    3470:	79 80       	ldd	r7, Y+1	; 0x01
    3472:	80 91 d7 22 	lds	r24, 0x22D7	; 0x8022d7 <g_adc_vctcxo_cur>
		l_adc_5v0_cur = g_adc_5v0_cur;
    3476:	90 91 d8 22 	lds	r25, 0x22D8	; 0x8022d8 <g_adc_vctcxo_cur+0x1>
    347a:	20 91 d5 22 	lds	r18, 0x22D5	; 0x8022d5 <g_adc_5v0_cur>
		l_adc_vbat_cur = g_adc_vbat_cur;
    347e:	30 91 d6 22 	lds	r19, 0x22D6	; 0x8022d6 <g_adc_5v0_cur+0x1>
    3482:	40 91 d3 22 	lds	r20, 0x22D3	; 0x8022d3 <g_adc_vbat_cur>
		l_adc_io_adc4_cur = g_adc_io_adc4_cur;
    3486:	50 91 d4 22 	lds	r21, 0x22D4	; 0x8022d4 <g_adc_vbat_cur+0x1>
    348a:	60 91 d1 22 	lds	r22, 0x22D1	; 0x8022d1 <g_adc_io_adc4_cur>
		l_adc_io_adc5_cur = g_adc_io_adc5_cur;
    348e:	70 91 d2 22 	lds	r23, 0x22D2	; 0x8022d2 <g_adc_io_adc4_cur+0x1>
    3492:	e0 91 cf 22 	lds	r30, 0x22CF	; 0x8022cf <g_adc_io_adc5_cur>
		l_adc_temp_cur = g_adc_temp_cur;
    3496:	f0 91 d0 22 	lds	r31, 0x22D0	; 0x8022d0 <g_adc_io_adc5_cur+0x1>
    349a:	a0 91 cd 22 	lds	r26, 0x22CD	; 0x8022cd <g_adc_temp_cur>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    349e:	b0 91 ce 22 	lds	r27, 0x22CE	; 0x8022ce <g_adc_temp_cur+0x1>
		cpu_irq_restore(flags);

		printf("time = %5ld: vctcxo=%04d, 5v0=%04d, vbat=%04d, adc4=%04d, adc5=%04d, temp=%04d\r\n", 
    34a2:	7f be       	out	0x3f, r7	; 63
    34a4:	bf 93       	push	r27
    34a6:	af 93       	push	r26
    34a8:	ff 93       	push	r31
    34aa:	ef 93       	push	r30
    34ac:	7f 93       	push	r23
    34ae:	6f 93       	push	r22
    34b0:	5f 93       	push	r21
    34b2:	4f 93       	push	r20
    34b4:	3f 93       	push	r19
    34b6:	2f 93       	push	r18
    34b8:	9f 93       	push	r25
    34ba:	8f 93       	push	r24
    34bc:	d5 01       	movw	r26, r10
    34be:	c4 01       	movw	r24, r8
    34c0:	07 2e       	mov	r0, r23
    34c2:	7a e0       	ldi	r23, 0x0A	; 10
    34c4:	b6 95       	lsr	r27
    34c6:	a7 95       	ror	r26
    34c8:	97 95       	ror	r25
    34ca:	87 95       	ror	r24
    34cc:	7a 95       	dec	r23
    34ce:	d1 f7       	brne	.-12     	; 0x34c4 <main+0x376>
    34d0:	70 2d       	mov	r23, r0
    34d2:	bf 93       	push	r27
    34d4:	af 93       	push	r26
    34d6:	9f 93       	push	r25
    34d8:	8f 93       	push	r24
    34da:	df 92       	push	r13
    34dc:	cf 92       	push	r12
    34de:	0e 94 11 26 	call	0x4c22	; 0x4c22 <printf>

	/* Handling the USB connection */
	task_usb();

	/* Handle TWI1 and TWI2 communications */
	task_twi(now, last);
    34e2:	cd bf       	out	0x3d, r28	; 61
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	40 90 c1 22 	lds	r4, 0x22C1	; 0x8022c1 <last.6996>
    34ea:	50 90 c2 22 	lds	r5, 0x22C2	; 0x8022c2 <last.6996+0x1>
    34ee:	60 90 c3 22 	lds	r6, 0x22C3	; 0x8022c3 <last.6996+0x2>
}

static void task_twi(uint32_t now, uint32_t last)
{
	/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
	task_twi_onboard(now, last);
    34f2:	70 90 c4 22 	lds	r7, 0x22C4	; 0x8022c4 <last.6996+0x3>
    34f6:	a3 01       	movw	r20, r6
    34f8:	92 01       	movw	r18, r4
    34fa:	c5 01       	movw	r24, r10
    34fc:	b4 01       	movw	r22, r8

	/* TWI2 - LCD Port */
	task_twi_lcd(now, last);
    34fe:	0e 94 9b 02 	call	0x536	; 0x536 <task_twi_onboard>
    3502:	a3 01       	movw	r20, r6
    3504:	92 01       	movw	r18, r4
    3506:	c5 01       	movw	r24, r10
    3508:	b4 01       	movw	r22, r8
	if ((last >> 10) != now_sec) {
		printf("%c\r\nFindMeSAT V1 @USB: RTC32 = %06ld sec\r\n", 0x0c, now_sec);
	}
#endif

	last = now;
    350a:	0e 94 9c 02 	call	0x538	; 0x538 <task_twi_lcd>
    350e:	80 92 c1 22 	sts	0x22C1, r8	; 0x8022c1 <last.6996>
    3512:	90 92 c2 22 	sts	0x22C2, r9	; 0x8022c2 <last.6996+0x1>
    3516:	a0 92 c3 22 	sts	0x22C3, r10	; 0x8022c3 <last.6996+0x2>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    351a:	b0 92 c4 22 	sts	0x22C4, r11	; 0x8022c4 <last.6996+0x3>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    351e:	f8 94       	cli
    3520:	d7 01       	movw	r26, r14
    3522:	8c 91       	ld	r24, X
    3524:	81 11       	cpse	r24, r1
    3526:	09 c0       	rjmp	.+18     	; 0x353a <main+0x3ec>
    3528:	a2 e4       	ldi	r26, 0x42	; 66
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    352a:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    352c:	e0 e0       	ldi	r30, 0x00	; 0
    352e:	ef 5f       	subi	r30, 0xFF	; 255
    3530:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3532:	88 23       	and	r24, r24
    3534:	e1 f3       	breq	.-8      	; 0x352e <main+0x3e0>
		cpu_irq_enable();
    3536:	e1 11       	cpse	r30, r1
    3538:	02 c0       	rjmp	.+4      	; 0x353e <main+0x3f0>
    353a:	78 94       	sei
    353c:	12 c0       	rjmp	.+36     	; 0x3562 <main+0x414>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    353e:	d8 01       	movw	r26, r16
    3540:	8c 91       	ld	r24, X
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	ee 5d       	subi	r30, 0xDE	; 222
    3546:	ff 4d       	sbci	r31, 0xDF	; 223
    3548:	81 7f       	andi	r24, 0xF1	; 241
    354a:	90 81       	ld	r25, Z
	sleep_enable();
    354c:	89 2b       	or	r24, r25
    354e:	8c 93       	st	X, r24
    3550:	8c 91       	ld	r24, X

	cpu_irq_enable();
    3552:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    3554:	8c 93       	st	X, r24

	sleep_disable();
    3556:	78 94       	sei
    3558:	88 95       	sleep
    355a:	f8 01       	movw	r30, r16
    355c:	80 81       	ld	r24, Z
	adc_start();		// Start AD convertions
	dac_start();		// Start DA convertions

	/* The application code */
	runmode = 1;
    while (runmode) {
    355e:	8e 7f       	andi	r24, 0xFE	; 254
    3560:	80 83       	st	Z, r24
    3562:	80 91 f2 22 	lds	r24, 0x22F2	; 0x8022f2 <runmode>
		task();
		sleepmgr_enter_sleep();
    }

	cpu_irq_disable();
    3566:	81 11       	cpse	r24, r1
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    3568:	5e cf       	rjmp	.-324    	; 0x3426 <main+0x2d8>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    356a:	f8 94       	cli
    356c:	f8 94       	cli
    356e:	80 91 41 24 	lds	r24, 0x2441	; 0x802441 <sleepmgr_locks>
    3572:	81 11       	cpse	r24, r1
    3574:	09 c0       	rjmp	.+18     	; 0x3588 <main+0x43a>
    3576:	a2 e4       	ldi	r26, 0x42	; 66
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3578:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    357a:	e0 e0       	ldi	r30, 0x00	; 0
    357c:	ef 5f       	subi	r30, 0xFF	; 255
    357e:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3580:	88 23       	and	r24, r24
    3582:	e1 f3       	breq	.-8      	; 0x357c <main+0x42e>
		cpu_irq_enable();
    3584:	e1 11       	cpse	r30, r1
    3586:	02 c0       	rjmp	.+4      	; 0x358c <main+0x43e>
    3588:	78 94       	sei
    358a:	13 c0       	rjmp	.+38     	; 0x35b2 <main+0x464>
    358c:	a8 e4       	ldi	r26, 0x48	; 72

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	8c 91       	ld	r24, X
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	ee 5d       	subi	r30, 0xDE	; 222
    3596:	ff 4d       	sbci	r31, 0xDF	; 223
    3598:	98 2f       	mov	r25, r24
    359a:	91 7f       	andi	r25, 0xF1	; 241
    359c:	80 81       	ld	r24, Z
	sleep_enable();
    359e:	89 2b       	or	r24, r25
    35a0:	8c 93       	st	X, r24
    35a2:	8c 91       	ld	r24, X

	cpu_irq_enable();
    35a4:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    35a6:	8c 93       	st	X, r24

	sleep_disable();
    35a8:	78 94       	sei
    35aa:	88 95       	sleep
    35ac:	8c 91       	ld	r24, X
	sleepmgr_enter_sleep();

	return retcode;
}
    35ae:	8e 7f       	andi	r24, 0xFE	; 254
    35b0:	8c 93       	st	X, r24
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	27 96       	adiw	r28, 0x07	; 7
    35b8:	cd bf       	out	0x3d, r28	; 61
    35ba:	de bf       	out	0x3e, r29	; 62
    35bc:	df 91       	pop	r29
    35be:	cf 91       	pop	r28
    35c0:	1f 91       	pop	r17
    35c2:	0f 91       	pop	r16
    35c4:	ff 90       	pop	r15
    35c6:	ef 90       	pop	r14
    35c8:	df 90       	pop	r13
    35ca:	cf 90       	pop	r12
    35cc:	bf 90       	pop	r11
    35ce:	af 90       	pop	r10
    35d0:	9f 90       	pop	r9
    35d2:	8f 90       	pop	r8
    35d4:	7f 90       	pop	r7
    35d6:	6f 90       	pop	r6
    35d8:	5f 90       	pop	r5
    35da:	4f 90       	pop	r4
    35dc:	08 95       	ret

000035de <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    35de:	cf 93       	push	r28
    35e0:	df 93       	push	r29
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	28 97       	sbiw	r28, 0x08	; 8
    35e8:	cd bf       	out	0x3d, r28	; 61
    35ea:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    35ec:	8f ef       	ldi	r24, 0xFF	; 255
    35ee:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    35f2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    35f6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    35fa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    35fe:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    3602:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    3606:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    360a:	61 e0       	ldi	r22, 0x01	; 1
    360c:	81 e4       	ldi	r24, 0x41	; 65
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	0e 94 81 23 	call	0x4702	; 0x4702 <ccp_write_io>
    3614:	6c e1       	ldi	r22, 0x1C	; 28
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	82 e0       	ldi	r24, 0x02	; 2
    361a:	0e 94 77 23 	call	0x46ee	; 0x46ee <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    361e:	8a 83       	std	Y+2, r24	; 0x02
    3620:	6d e1       	ldi	r22, 0x1D	; 29
    3622:	70 e0       	ldi	r23, 0x00	; 0
    3624:	82 e0       	ldi	r24, 0x02	; 2
    3626:	0e 94 77 23 	call	0x46ee	; 0x46ee <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    362a:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    362c:	89 81       	ldd	r24, Y+1	; 0x01
    362e:	9a 81       	ldd	r25, Y+2	; 0x02
    3630:	01 96       	adiw	r24, 0x01	; 1
    3632:	21 f4       	brne	.+8      	; 0x363c <sysclk_init+0x5e>
		cal = 0x2340;
    3634:	80 e4       	ldi	r24, 0x40	; 64
    3636:	93 e2       	ldi	r25, 0x23	; 35
    3638:	89 83       	std	Y+1, r24	; 0x01
    363a:	9a 83       	std	Y+2, r25	; 0x02
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	9a 81       	ldd	r25, Y+2	; 0x02
    3640:	8b 83       	std	Y+3, r24	; 0x03
    3642:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    3644:	e0 e6       	ldi	r30, 0x60	; 96
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    364a:	8c 81       	ldd	r24, Y+4	; 0x04
    364c:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    364e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    3652:	84 fd       	sbrc	r24, 4
    3654:	21 c0       	rjmp	.+66     	; 0x3698 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3656:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    365a:	83 fd       	sbrc	r24, 3
    365c:	0e c0       	rjmp	.+28     	; 0x367a <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    365e:	e0 e5       	ldi	r30, 0x50	; 80
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3664:	8f b7       	in	r24, 0x3f	; 63
    3666:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    3668:	f8 94       	cli
	return flags;
    366a:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    366c:	80 81       	ld	r24, Z
    366e:	88 60       	ori	r24, 0x08	; 8
    3670:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3672:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3674:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    3676:	83 ff       	sbrs	r24, 3
    3678:	fd cf       	rjmp	.-6      	; 0x3674 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    367a:	8f b7       	in	r24, 0x3f	; 63
    367c:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    367e:	f8 94       	cli
	return flags;
    3680:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    3682:	e0 e5       	ldi	r30, 0x50	; 80
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	83 ec       	ldi	r24, 0xC3	; 195
    3688:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    368a:	80 81       	ld	r24, Z
    368c:	80 61       	ori	r24, 0x10	; 16
    368e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3690:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    3692:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    3694:	84 ff       	sbrs	r24, 4
    3696:	fd cf       	rjmp	.-6      	; 0x3692 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    3698:	64 e0       	ldi	r22, 0x04	; 4
    369a:	80 e4       	ldi	r24, 0x40	; 64
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	0e 94 81 23 	call	0x4702	; 0x4702 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    36a2:	8f b7       	in	r24, 0x3f	; 63
    36a4:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    36a6:	f8 94       	cli
	return flags;
    36a8:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    36aa:	e0 e5       	ldi	r30, 0x50	; 80
    36ac:	f0 e0       	ldi	r31, 0x00	; 0
    36ae:	80 81       	ld	r24, Z
    36b0:	8e 7f       	andi	r24, 0xFE	; 254
    36b2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    36b4:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    36b6:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    36b8:	8f b7       	in	r24, 0x3f	; 63
    36ba:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    36bc:	f8 94       	cli
	return flags;
    36be:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    36c0:	80 81       	ld	r24, Z
    36c2:	88 60       	ori	r24, 0x08	; 8
    36c4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    36c6:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    36c8:	81 81       	ldd	r24, Z+1	; 0x01
    36ca:	83 ff       	sbrs	r24, 3
    36cc:	fd cf       	rjmp	.-6      	; 0x36c8 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    36ce:	8b e0       	ldi	r24, 0x0B	; 11
    36d0:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    36d4:	28 96       	adiw	r28, 0x08	; 8
    36d6:	cd bf       	out	0x3d, r28	; 61
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	08 95       	ret

000036e0 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    36e0:	cf 93       	push	r28
    36e2:	df 93       	push	r29
    36e4:	1f 92       	push	r1
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    36ea:	9f b7       	in	r25, 0x3f	; 63
    36ec:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    36ee:	f8 94       	cli
	return flags;
    36f0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    36f2:	e8 2f       	mov	r30, r24
    36f4:	f0 e0       	ldi	r31, 0x00	; 0
    36f6:	e0 59       	subi	r30, 0x90	; 144
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	60 95       	com	r22
    36fc:	80 81       	ld	r24, Z
    36fe:	68 23       	and	r22, r24
    3700:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3702:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    3704:	0f 90       	pop	r0
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	08 95       	ret

0000370c <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	1f 92       	push	r1
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3716:	9f b7       	in	r25, 0x3f	; 63
    3718:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    371a:	f8 94       	cli
	return flags;
    371c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    371e:	e8 2f       	mov	r30, r24
    3720:	f0 e0       	ldi	r31, 0x00	; 0
    3722:	e0 59       	subi	r30, 0x90	; 144
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	80 81       	ld	r24, Z
    3728:	68 2b       	or	r22, r24
    372a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    372c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    372e:	0f 90       	pop	r0
    3730:	df 91       	pop	r29
    3732:	cf 91       	pop	r28
    3734:	08 95       	ret

00003736 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	1f 92       	push	r1
    373c:	1f 92       	push	r1
    373e:	cd b7       	in	r28, 0x3d	; 61
    3740:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    3742:	86 30       	cpi	r24, 0x06	; 6
    3744:	11 f0       	breq	.+4      	; 0x374a <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    3746:	60 e0       	ldi	r22, 0x00	; 0
    3748:	01 c0       	rjmp	.+2      	; 0x374c <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    374a:	68 e1       	ldi	r22, 0x18	; 24
    374c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    3750:	81 fd       	sbrc	r24, 1
    3752:	2a c0       	rjmp	.+84     	; 0x37a8 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3754:	8f b7       	in	r24, 0x3f	; 63
    3756:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3758:	f8 94       	cli
	return flags;
    375a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    375c:	e0 e5       	ldi	r30, 0x50	; 80
    375e:	f0 e0       	ldi	r31, 0x00	; 0
    3760:	80 81       	ld	r24, Z
    3762:	82 60       	ori	r24, 0x02	; 2
    3764:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3766:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3768:	81 81       	ldd	r24, Z+1	; 0x01
    376a:	81 ff       	sbrs	r24, 1
    376c:	fd cf       	rjmp	.-6      	; 0x3768 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    376e:	8f b7       	in	r24, 0x3f	; 63
    3770:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3772:	f8 94       	cli
	return flags;
    3774:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    3776:	a0 e5       	ldi	r26, 0x50	; 80
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	16 96       	adiw	r26, 0x06	; 6
    377c:	8c 91       	ld	r24, X
    377e:	16 97       	sbiw	r26, 0x06	; 6
    3780:	89 7f       	andi	r24, 0xF9	; 249
    3782:	16 96       	adiw	r26, 0x06	; 6
    3784:	8c 93       	st	X, r24
    3786:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    3788:	e0 e6       	ldi	r30, 0x60	; 96
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 e8       	ldi	r24, 0x80	; 128
    378e:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    3790:	8b eb       	ldi	r24, 0xBB	; 187
    3792:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    3794:	16 96       	adiw	r26, 0x06	; 6
    3796:	8c 91       	ld	r24, X
    3798:	16 97       	sbiw	r26, 0x06	; 6
    379a:	84 60       	ori	r24, 0x04	; 4
    379c:	16 96       	adiw	r26, 0x06	; 6
    379e:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    37a0:	80 81       	ld	r24, Z
    37a2:	81 60       	ori	r24, 0x01	; 1
    37a4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    37a6:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    37a8:	63 60       	ori	r22, 0x03	; 3
    37aa:	84 e4       	ldi	r24, 0x44	; 68
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	a9 d7       	rcall	.+3922   	; 0x4702 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    37b0:	60 e4       	ldi	r22, 0x40	; 64
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	95 df       	rcall	.-214    	; 0x36e0 <sysclk_enable_module>
}
    37b6:	0f 90       	pop	r0
    37b8:	0f 90       	pop	r0
    37ba:	df 91       	pop	r29
    37bc:	cf 91       	pop	r28
    37be:	08 95       	ret

000037c0 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    37c0:	80 91 08 24 	lds	r24, 0x2408	; 0x802408 <udi_cdc_nb_comm_enabled>
    37c4:	81 50       	subi	r24, 0x01	; 1
    37c6:	80 93 08 24 	sts	0x2408, r24	; 0x802408 <udi_cdc_nb_comm_enabled>
    37ca:	08 95       	ret

000037cc <udi_cdc_data_setup>:
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	08 95       	ret

000037d0 <udi_cdc_getsetting>:
    37d0:	80 e0       	ldi	r24, 0x00	; 0
    37d2:	08 95       	ret

000037d4 <udi_cdc_line_coding_received>:
    37d4:	66 e1       	ldi	r22, 0x16	; 22
    37d6:	74 e2       	ldi	r23, 0x24	; 36
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	b4 cc       	rjmp	.-1688   	; 0x3144 <usb_callback_config>
    37dc:	08 95       	ret

000037de <udi_cdc_comm_enable>:
    37de:	10 92 08 24 	sts	0x2408, r1	; 0x802408 <udi_cdc_nb_comm_enabled>
    37e2:	10 92 14 24 	sts	0x2414, r1	; 0x802414 <udi_cdc_state>
    37e6:	10 92 15 24 	sts	0x2415, r1	; 0x802415 <udi_cdc_state+0x1>
    37ea:	ea e0       	ldi	r30, 0x0A	; 10
    37ec:	f4 e2       	ldi	r31, 0x24	; 36
    37ee:	81 ea       	ldi	r24, 0xA1	; 161
    37f0:	80 83       	st	Z, r24
    37f2:	80 e2       	ldi	r24, 0x20	; 32
    37f4:	81 83       	std	Z+1, r24	; 0x01
    37f6:	12 82       	std	Z+2, r1	; 0x02
    37f8:	13 82       	std	Z+3, r1	; 0x03
    37fa:	14 82       	std	Z+4, r1	; 0x04
    37fc:	15 82       	std	Z+5, r1	; 0x05
    37fe:	82 e0       	ldi	r24, 0x02	; 2
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	86 83       	std	Z+6, r24	; 0x06
    3804:	97 83       	std	Z+7, r25	; 0x07
    3806:	10 86       	std	Z+8, r1	; 0x08
    3808:	11 86       	std	Z+9, r1	; 0x09
    380a:	e6 e1       	ldi	r30, 0x16	; 22
    380c:	f4 e2       	ldi	r31, 0x24	; 36
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	92 ec       	ldi	r25, 0xC2	; 194
    3812:	a1 e0       	ldi	r26, 0x01	; 1
    3814:	b0 e0       	ldi	r27, 0x00	; 0
    3816:	80 83       	st	Z, r24
    3818:	91 83       	std	Z+1, r25	; 0x01
    381a:	a2 83       	std	Z+2, r26	; 0x02
    381c:	b3 83       	std	Z+3, r27	; 0x03
    381e:	14 82       	std	Z+4, r1	; 0x04
    3820:	15 82       	std	Z+5, r1	; 0x05
    3822:	88 e0       	ldi	r24, 0x08	; 8
    3824:	86 83       	std	Z+6, r24	; 0x06
    3826:	bf 01       	movw	r22, r30
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	8c dc       	rcall	.-1768   	; 0x3144 <usb_callback_config>
    382c:	84 dc       	rcall	.-1784   	; 0x3136 <usb_callback_cdc_enable>
    382e:	88 23       	and	r24, r24
    3830:	29 f0       	breq	.+10     	; 0x383c <udi_cdc_comm_enable+0x5e>
    3832:	90 91 08 24 	lds	r25, 0x2408	; 0x802408 <udi_cdc_nb_comm_enabled>
    3836:	9f 5f       	subi	r25, 0xFF	; 255
    3838:	90 93 08 24 	sts	0x2408, r25	; 0x802408 <udi_cdc_nb_comm_enabled>
    383c:	08 95       	ret

0000383e <udi_cdc_tx_send>:
    383e:	ff 92       	push	r15
    3840:	0f 93       	push	r16
    3842:	1f 93       	push	r17
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	1f 92       	push	r1
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	80 91 f6 22 	lds	r24, 0x22F6	; 0x8022f6 <udi_cdc_tx_trans_ongoing>
    3852:	81 11       	cpse	r24, r1
    3854:	9f c0       	rjmp	.+318    	; 0x3994 <udi_cdc_tx_send+0x156>
    3856:	0e 94 df 12 	call	0x25be	; 0x25be <udd_is_high_speed>
    385a:	88 23       	and	r24, r24
    385c:	51 f0       	breq	.+20     	; 0x3872 <udi_cdc_tx_send+0x34>
    385e:	00 91 f7 22 	lds	r16, 0x22F7	; 0x8022f7 <udi_cdc_tx_sof_num>
    3862:	10 91 f8 22 	lds	r17, 0x22F8	; 0x8022f8 <udi_cdc_tx_sof_num+0x1>
    3866:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <udd_get_micro_frame_number>
    386a:	08 17       	cp	r16, r24
    386c:	19 07       	cpc	r17, r25
    386e:	59 f4       	brne	.+22     	; 0x3886 <udi_cdc_tx_send+0x48>
    3870:	91 c0       	rjmp	.+290    	; 0x3994 <udi_cdc_tx_send+0x156>
    3872:	00 91 f7 22 	lds	r16, 0x22F7	; 0x8022f7 <udi_cdc_tx_sof_num>
    3876:	10 91 f8 22 	lds	r17, 0x22F8	; 0x8022f8 <udi_cdc_tx_sof_num+0x1>
    387a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <udd_get_frame_number>
    387e:	08 17       	cp	r16, r24
    3880:	19 07       	cpc	r17, r25
    3882:	09 f4       	brne	.+2      	; 0x3886 <udi_cdc_tx_send+0x48>
    3884:	87 c0       	rjmp	.+270    	; 0x3994 <udi_cdc_tx_send+0x156>
    3886:	8f b7       	in	r24, 0x3f	; 63
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	f8 94       	cli
    388c:	19 81       	ldd	r17, Y+1	; 0x01
    388e:	00 91 f9 22 	lds	r16, 0x22F9	; 0x8022f9 <udi_cdc_tx_buf_sel>
    3892:	e0 2f       	mov	r30, r16
    3894:	f0 e0       	ldi	r31, 0x00	; 0
    3896:	ee 0f       	add	r30, r30
    3898:	ff 1f       	adc	r31, r31
    389a:	e6 50       	subi	r30, 0x06	; 6
    389c:	fd 4d       	sbci	r31, 0xDD	; 221
    389e:	80 81       	ld	r24, Z
    38a0:	91 81       	ldd	r25, Z+1	; 0x01
    38a2:	89 2b       	or	r24, r25
    38a4:	09 f5       	brne	.+66     	; 0x38e8 <udi_cdc_tx_send+0xaa>
    38a6:	80 91 f3 22 	lds	r24, 0x22F3	; 0x8022f3 <sof_zlp_counter.5059>
    38aa:	90 91 f4 22 	lds	r25, 0x22F4	; 0x8022f4 <sof_zlp_counter.5059+0x1>
    38ae:	01 96       	adiw	r24, 0x01	; 1
    38b0:	80 93 f3 22 	sts	0x22F3, r24	; 0x8022f3 <sof_zlp_counter.5059>
    38b4:	90 93 f4 22 	sts	0x22F4, r25	; 0x8022f4 <sof_zlp_counter.5059+0x1>
    38b8:	0e 94 df 12 	call	0x25be	; 0x25be <udd_is_high_speed>
    38bc:	81 11       	cpse	r24, r1
    38be:	07 c0       	rjmp	.+14     	; 0x38ce <udi_cdc_tx_send+0x90>
    38c0:	80 91 f3 22 	lds	r24, 0x22F3	; 0x8022f3 <sof_zlp_counter.5059>
    38c4:	90 91 f4 22 	lds	r25, 0x22F4	; 0x8022f4 <sof_zlp_counter.5059+0x1>
    38c8:	84 36       	cpi	r24, 0x64	; 100
    38ca:	91 05       	cpc	r25, r1
    38cc:	58 f0       	brcs	.+22     	; 0x38e4 <udi_cdc_tx_send+0xa6>
    38ce:	0e 94 df 12 	call	0x25be	; 0x25be <udd_is_high_speed>
    38d2:	88 23       	and	r24, r24
    38d4:	49 f0       	breq	.+18     	; 0x38e8 <udi_cdc_tx_send+0xaa>
    38d6:	80 91 f3 22 	lds	r24, 0x22F3	; 0x8022f3 <sof_zlp_counter.5059>
    38da:	90 91 f4 22 	lds	r25, 0x22F4	; 0x8022f4 <sof_zlp_counter.5059+0x1>
    38de:	80 32       	cpi	r24, 0x20	; 32
    38e0:	93 40       	sbci	r25, 0x03	; 3
    38e2:	10 f4       	brcc	.+4      	; 0x38e8 <udi_cdc_tx_send+0xaa>
    38e4:	1f bf       	out	0x3f, r17	; 63
    38e6:	56 c0       	rjmp	.+172    	; 0x3994 <udi_cdc_tx_send+0x156>
    38e8:	10 92 f3 22 	sts	0x22F3, r1	; 0x8022f3 <sof_zlp_counter.5059>
    38ec:	10 92 f4 22 	sts	0x22F4, r1	; 0x8022f4 <sof_zlp_counter.5059+0x1>
    38f0:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <udi_cdc_tx_both_buf_to_send>
    38f4:	81 11       	cpse	r24, r1
    38f6:	06 c0       	rjmp	.+12     	; 0x3904 <udi_cdc_tx_send+0xc6>
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	01 11       	cpse	r16, r1
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udi_cdc_tx_buf_sel>
    3902:	04 c0       	rjmp	.+8      	; 0x390c <udi_cdc_tx_send+0xce>
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	01 11       	cpse	r16, r1
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	08 2f       	mov	r16, r24
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	80 93 f6 22 	sts	0x22F6, r24	; 0x8022f6 <udi_cdc_tx_trans_ongoing>
    3912:	1f bf       	out	0x3f, r17	; 63
    3914:	10 e0       	ldi	r17, 0x00	; 0
    3916:	f8 01       	movw	r30, r16
    3918:	ee 0f       	add	r30, r30
    391a:	ff 1f       	adc	r31, r31
    391c:	e6 50       	subi	r30, 0x06	; 6
    391e:	fd 4d       	sbci	r31, 0xDD	; 221
    3920:	80 81       	ld	r24, Z
    3922:	91 81       	ldd	r25, Z+1	; 0x01
    3924:	ff 24       	eor	r15, r15
    3926:	f3 94       	inc	r15
    3928:	80 34       	cpi	r24, 0x40	; 64
    392a:	91 05       	cpc	r25, r1
    392c:	09 f4       	brne	.+2      	; 0x3930 <udi_cdc_tx_send+0xf2>
    392e:	f1 2c       	mov	r15, r1
    3930:	80 34       	cpi	r24, 0x40	; 64
    3932:	91 05       	cpc	r25, r1
    3934:	91 f0       	breq	.+36     	; 0x395a <udi_cdc_tx_send+0x11c>
    3936:	0e 94 df 12 	call	0x25be	; 0x25be <udd_is_high_speed>
    393a:	88 23       	and	r24, r24
    393c:	39 f0       	breq	.+14     	; 0x394c <udi_cdc_tx_send+0x10e>
    393e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <udd_get_micro_frame_number>
    3942:	80 93 f7 22 	sts	0x22F7, r24	; 0x8022f7 <udi_cdc_tx_sof_num>
    3946:	90 93 f8 22 	sts	0x22F8, r25	; 0x8022f8 <udi_cdc_tx_sof_num+0x1>
    394a:	0b c0       	rjmp	.+22     	; 0x3962 <udi_cdc_tx_send+0x124>
    394c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <udd_get_frame_number>
    3950:	80 93 f7 22 	sts	0x22F7, r24	; 0x8022f7 <udi_cdc_tx_sof_num>
    3954:	90 93 f8 22 	sts	0x22F8, r25	; 0x8022f8 <udi_cdc_tx_sof_num+0x1>
    3958:	04 c0       	rjmp	.+8      	; 0x3962 <udi_cdc_tx_send+0x124>
    395a:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udi_cdc_tx_sof_num>
    395e:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udi_cdc_tx_sof_num+0x1>
    3962:	f8 01       	movw	r30, r16
    3964:	ee 0f       	add	r30, r30
    3966:	ff 1f       	adc	r31, r31
    3968:	e6 50       	subi	r30, 0x06	; 6
    396a:	fd 4d       	sbci	r31, 0xDD	; 221
    396c:	20 81       	ld	r18, Z
    396e:	31 81       	ldd	r19, Z+1	; 0x01
    3970:	a8 01       	movw	r20, r16
    3972:	00 24       	eor	r0, r0
    3974:	56 95       	lsr	r21
    3976:	47 95       	ror	r20
    3978:	07 94       	ror	r0
    397a:	56 95       	lsr	r21
    397c:	47 95       	ror	r20
    397e:	07 94       	ror	r0
    3980:	54 2f       	mov	r21, r20
    3982:	40 2d       	mov	r20, r0
    3984:	42 50       	subi	r20, 0x02	; 2
    3986:	5d 4d       	sbci	r21, 0xDD	; 221
    3988:	04 ed       	ldi	r16, 0xD4	; 212
    398a:	1c e1       	ldi	r17, 0x1C	; 28
    398c:	6f 2d       	mov	r22, r15
    398e:	81 e8       	ldi	r24, 0x81	; 129
    3990:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <udd_ep_run>
    3994:	0f 90       	pop	r0
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	1f 91       	pop	r17
    399c:	0f 91       	pop	r16
    399e:	ff 90       	pop	r15
    39a0:	08 95       	ret

000039a2 <udi_cdc_data_sof_notify>:
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	4c cf       	rjmp	.-360    	; 0x383e <udi_cdc_tx_send>
    39a6:	08 95       	ret

000039a8 <udi_cdc_data_sent>:
    39a8:	81 11       	cpse	r24, r1
    39aa:	19 c0       	rjmp	.+50     	; 0x39de <udi_cdc_data_sent+0x36>
    39ac:	20 91 f9 22 	lds	r18, 0x22F9	; 0x8022f9 <udi_cdc_tx_buf_sel>
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	22 23       	and	r18, r18
    39b6:	11 f0       	breq	.+4      	; 0x39bc <udi_cdc_data_sent+0x14>
    39b8:	80 e0       	ldi	r24, 0x00	; 0
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	88 0f       	add	r24, r24
    39be:	99 1f       	adc	r25, r25
    39c0:	fc 01       	movw	r30, r24
    39c2:	e6 50       	subi	r30, 0x06	; 6
    39c4:	fd 4d       	sbci	r31, 0xDD	; 221
    39c6:	10 82       	st	Z, r1
    39c8:	11 82       	std	Z+1, r1	; 0x01
    39ca:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udi_cdc_tx_both_buf_to_send>
    39ce:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udi_cdc_tx_trans_ongoing>
    39d2:	67 2b       	or	r22, r23
    39d4:	11 f0       	breq	.+4      	; 0x39da <udi_cdc_data_sent+0x32>
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	b9 db       	rcall	.-2190   	; 0x314c <usb_callback_tx_empty_notify>
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	30 cf       	rjmp	.-416    	; 0x383e <udi_cdc_tx_send>
    39de:	08 95       	ret

000039e0 <udi_cdc_data_disable>:
    39e0:	80 91 07 24 	lds	r24, 0x2407	; 0x802407 <udi_cdc_nb_data_enabled>
    39e4:	81 50       	subi	r24, 0x01	; 1
    39e6:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <udi_cdc_nb_data_enabled>
    39ea:	80 91 07 24 	lds	r24, 0x2407	; 0x802407 <udi_cdc_nb_data_enabled>
    39ee:	a7 db       	rcall	.-2226   	; 0x313e <usb_callback_cdc_disable>
    39f0:	10 92 06 24 	sts	0x2406, r1	; 0x802406 <udi_cdc_data_running>
    39f4:	08 95       	ret

000039f6 <udi_cdc_comm_setup>:
    39f6:	cf 93       	push	r28
    39f8:	df 93       	push	r29
    39fa:	80 91 31 24 	lds	r24, 0x2431	; 0x802431 <udd_g_ctrlreq>
    39fe:	88 23       	and	r24, r24
    3a00:	e4 f4       	brge	.+56     	; 0x3a3a <udi_cdc_comm_setup+0x44>
    3a02:	80 76       	andi	r24, 0x60	; 96
    3a04:	80 32       	cpi	r24, 0x20	; 32
    3a06:	09 f0       	breq	.+2      	; 0x3a0a <udi_cdc_comm_setup+0x14>
    3a08:	47 c0       	rjmp	.+142    	; 0x3a98 <udi_cdc_comm_setup+0xa2>
    3a0a:	80 91 32 24 	lds	r24, 0x2432	; 0x802432 <udd_g_ctrlreq+0x1>
    3a0e:	81 32       	cpi	r24, 0x21	; 33
    3a10:	09 f0       	breq	.+2      	; 0x3a14 <udi_cdc_comm_setup+0x1e>
    3a12:	44 c0       	rjmp	.+136    	; 0x3a9c <udi_cdc_comm_setup+0xa6>
    3a14:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    3a18:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    3a1c:	07 97       	sbiw	r24, 0x07	; 7
    3a1e:	09 f0       	breq	.+2      	; 0x3a22 <udi_cdc_comm_setup+0x2c>
    3a20:	3f c0       	rjmp	.+126    	; 0x3aa0 <udi_cdc_comm_setup+0xaa>
    3a22:	e1 e3       	ldi	r30, 0x31	; 49
    3a24:	f4 e2       	ldi	r31, 0x24	; 36
    3a26:	86 e1       	ldi	r24, 0x16	; 22
    3a28:	94 e2       	ldi	r25, 0x24	; 36
    3a2a:	80 87       	std	Z+8, r24	; 0x08
    3a2c:	91 87       	std	Z+9, r25	; 0x09
    3a2e:	87 e0       	ldi	r24, 0x07	; 7
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	82 87       	std	Z+10, r24	; 0x0a
    3a34:	93 87       	std	Z+11, r25	; 0x0b
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	3a c0       	rjmp	.+116    	; 0x3aae <udi_cdc_comm_setup+0xb8>
    3a3a:	80 76       	andi	r24, 0x60	; 96
    3a3c:	80 32       	cpi	r24, 0x20	; 32
    3a3e:	91 f5       	brne	.+100    	; 0x3aa4 <udi_cdc_comm_setup+0xae>
    3a40:	80 91 32 24 	lds	r24, 0x2432	; 0x802432 <udd_g_ctrlreq+0x1>
    3a44:	80 32       	cpi	r24, 0x20	; 32
    3a46:	19 f0       	breq	.+6      	; 0x3a4e <udi_cdc_comm_setup+0x58>
    3a48:	82 32       	cpi	r24, 0x22	; 34
    3a4a:	b9 f0       	breq	.+46     	; 0x3a7a <udi_cdc_comm_setup+0x84>
    3a4c:	2d c0       	rjmp	.+90     	; 0x3aa8 <udi_cdc_comm_setup+0xb2>
    3a4e:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    3a52:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    3a56:	07 97       	sbiw	r24, 0x07	; 7
    3a58:	49 f5       	brne	.+82     	; 0x3aac <udi_cdc_comm_setup+0xb6>
    3a5a:	e1 e3       	ldi	r30, 0x31	; 49
    3a5c:	f4 e2       	ldi	r31, 0x24	; 36
    3a5e:	8a ee       	ldi	r24, 0xEA	; 234
    3a60:	9b e1       	ldi	r25, 0x1B	; 27
    3a62:	84 87       	std	Z+12, r24	; 0x0c
    3a64:	95 87       	std	Z+13, r25	; 0x0d
    3a66:	86 e1       	ldi	r24, 0x16	; 22
    3a68:	94 e2       	ldi	r25, 0x24	; 36
    3a6a:	80 87       	std	Z+8, r24	; 0x08
    3a6c:	91 87       	std	Z+9, r25	; 0x09
    3a6e:	87 e0       	ldi	r24, 0x07	; 7
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	82 87       	std	Z+10, r24	; 0x0a
    3a74:	93 87       	std	Z+11, r25	; 0x0b
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	1a c0       	rjmp	.+52     	; 0x3aae <udi_cdc_comm_setup+0xb8>
    3a7a:	c1 e3       	ldi	r28, 0x31	; 49
    3a7c:	d4 e2       	ldi	r29, 0x24	; 36
    3a7e:	6a 81       	ldd	r22, Y+2	; 0x02
    3a80:	61 70       	andi	r22, 0x01	; 1
    3a82:	80 e0       	ldi	r24, 0x00	; 0
    3a84:	60 db       	rcall	.-2368   	; 0x3146 <usb_callback_cdc_set_dtr>
    3a86:	6a 81       	ldd	r22, Y+2	; 0x02
    3a88:	7b 81       	ldd	r23, Y+3	; 0x03
    3a8a:	76 95       	lsr	r23
    3a8c:	67 95       	ror	r22
    3a8e:	61 70       	andi	r22, 0x01	; 1
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	5a db       	rcall	.-2380   	; 0x3148 <usb_callback_cdc_set_rts>
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	0b c0       	rjmp	.+22     	; 0x3aae <udi_cdc_comm_setup+0xb8>
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	09 c0       	rjmp	.+18     	; 0x3aae <udi_cdc_comm_setup+0xb8>
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	07 c0       	rjmp	.+14     	; 0x3aae <udi_cdc_comm_setup+0xb8>
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	05 c0       	rjmp	.+10     	; 0x3aae <udi_cdc_comm_setup+0xb8>
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	03 c0       	rjmp	.+6      	; 0x3aae <udi_cdc_comm_setup+0xb8>
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	01 c0       	rjmp	.+2      	; 0x3aae <udi_cdc_comm_setup+0xb8>
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	df 91       	pop	r29
    3ab0:	cf 91       	pop	r28
    3ab2:	08 95       	ret

00003ab4 <udi_cdc_multi_get_nb_received_data>:
    3ab4:	cf 93       	push	r28
    3ab6:	df 93       	push	r29
    3ab8:	1f 92       	push	r1
    3aba:	cd b7       	in	r28, 0x3d	; 61
    3abc:	de b7       	in	r29, 0x3e	; 62
    3abe:	8f b7       	in	r24, 0x3f	; 63
    3ac0:	89 83       	std	Y+1, r24	; 0x01
    3ac2:	f8 94       	cli
    3ac4:	49 81       	ldd	r20, Y+1	; 0x01
    3ac6:	20 91 7f 23 	lds	r18, 0x237F	; 0x80237f <udi_cdc_rx_pos>
    3aca:	30 91 80 23 	lds	r19, 0x2380	; 0x802380 <udi_cdc_rx_pos+0x1>
    3ace:	e0 91 81 23 	lds	r30, 0x2381	; 0x802381 <udi_cdc_rx_buf_sel>
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	ee 0f       	add	r30, r30
    3ad6:	ff 1f       	adc	r31, r31
    3ad8:	ee 57       	subi	r30, 0x7E	; 126
    3ada:	fc 4d       	sbci	r31, 0xDC	; 220
    3adc:	80 81       	ld	r24, Z
    3ade:	91 81       	ldd	r25, Z+1	; 0x01
    3ae0:	4f bf       	out	0x3f, r20	; 63
    3ae2:	82 1b       	sub	r24, r18
    3ae4:	93 0b       	sbc	r25, r19
    3ae6:	0f 90       	pop	r0
    3ae8:	df 91       	pop	r29
    3aea:	cf 91       	pop	r28
    3aec:	08 95       	ret

00003aee <udi_cdc_multi_is_rx_ready>:
    3aee:	e2 df       	rcall	.-60     	; 0x3ab4 <udi_cdc_multi_get_nb_received_data>
    3af0:	21 e0       	ldi	r18, 0x01	; 1
    3af2:	89 2b       	or	r24, r25
    3af4:	09 f4       	brne	.+2      	; 0x3af8 <udi_cdc_multi_is_rx_ready+0xa>
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	82 2f       	mov	r24, r18
    3afa:	08 95       	ret

00003afc <udi_cdc_rx_start>:
    3afc:	0f 93       	push	r16
    3afe:	1f 93       	push	r17
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	1f 92       	push	r1
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	8f b7       	in	r24, 0x3f	; 63
    3b0c:	89 83       	std	Y+1, r24	; 0x01
    3b0e:	f8 94       	cli
    3b10:	99 81       	ldd	r25, Y+1	; 0x01
    3b12:	20 91 81 23 	lds	r18, 0x2381	; 0x802381 <udi_cdc_rx_buf_sel>
    3b16:	80 91 7e 23 	lds	r24, 0x237E	; 0x80237e <udi_cdc_rx_trans_ongoing>
    3b1a:	81 11       	cpse	r24, r1
    3b1c:	10 c0       	rjmp	.+32     	; 0x3b3e <udi_cdc_rx_start+0x42>
    3b1e:	60 91 7f 23 	lds	r22, 0x237F	; 0x80237f <udi_cdc_rx_pos>
    3b22:	70 91 80 23 	lds	r23, 0x2380	; 0x802380 <udi_cdc_rx_pos+0x1>
    3b26:	02 2f       	mov	r16, r18
    3b28:	10 e0       	ldi	r17, 0x00	; 0
    3b2a:	f8 01       	movw	r30, r16
    3b2c:	ee 0f       	add	r30, r30
    3b2e:	ff 1f       	adc	r31, r31
    3b30:	ee 57       	subi	r30, 0x7E	; 126
    3b32:	fc 4d       	sbci	r31, 0xDC	; 220
    3b34:	40 81       	ld	r20, Z
    3b36:	51 81       	ldd	r21, Z+1	; 0x01
    3b38:	64 17       	cp	r22, r20
    3b3a:	75 07       	cpc	r23, r21
    3b3c:	18 f4       	brcc	.+6      	; 0x3b44 <udi_cdc_rx_start+0x48>
    3b3e:	9f bf       	out	0x3f, r25	; 63
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	27 c0       	rjmp	.+78     	; 0x3b92 <udi_cdc_rx_start+0x96>
    3b44:	10 92 7f 23 	sts	0x237F, r1	; 0x80237f <udi_cdc_rx_pos>
    3b48:	10 92 80 23 	sts	0x2380, r1	; 0x802380 <udi_cdc_rx_pos+0x1>
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	21 11       	cpse	r18, r1
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	80 93 81 23 	sts	0x2381, r24	; 0x802381 <udi_cdc_rx_buf_sel>
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	80 93 7e 23 	sts	0x237E, r24	; 0x80237e <udi_cdc_rx_trans_ongoing>
    3b5c:	9f bf       	out	0x3f, r25	; 63
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	c6 df       	rcall	.-116    	; 0x3aee <udi_cdc_multi_is_rx_ready>
    3b62:	88 23       	and	r24, r24
    3b64:	11 f0       	breq	.+4      	; 0x3b6a <udi_cdc_rx_start+0x6e>
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	f0 da       	rcall	.-2592   	; 0x314a <usb_callback_rx_notify>
    3b6a:	a8 01       	movw	r20, r16
    3b6c:	00 24       	eor	r0, r0
    3b6e:	56 95       	lsr	r21
    3b70:	47 95       	ror	r20
    3b72:	07 94       	ror	r0
    3b74:	56 95       	lsr	r21
    3b76:	47 95       	ror	r20
    3b78:	07 94       	ror	r0
    3b7a:	54 2f       	mov	r21, r20
    3b7c:	40 2d       	mov	r20, r0
    3b7e:	4a 57       	subi	r20, 0x7A	; 122
    3b80:	5c 4d       	sbci	r21, 0xDC	; 220
    3b82:	01 e0       	ldi	r16, 0x01	; 1
    3b84:	1e e1       	ldi	r17, 0x1E	; 30
    3b86:	20 e4       	ldi	r18, 0x40	; 64
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	61 e0       	ldi	r22, 0x01	; 1
    3b8c:	82 e0       	ldi	r24, 0x02	; 2
    3b8e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <udd_ep_run>
    3b92:	0f 90       	pop	r0
    3b94:	df 91       	pop	r29
    3b96:	cf 91       	pop	r28
    3b98:	1f 91       	pop	r17
    3b9a:	0f 91       	pop	r16
    3b9c:	08 95       	ret

00003b9e <udi_cdc_data_enable>:
    3b9e:	10 92 07 24 	sts	0x2407, r1	; 0x802407 <udi_cdc_nb_data_enabled>
    3ba2:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udi_cdc_tx_trans_ongoing>
    3ba6:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udi_cdc_tx_both_buf_to_send>
    3baa:	10 92 f9 22 	sts	0x22F9, r1	; 0x8022f9 <udi_cdc_tx_buf_sel>
    3bae:	ea ef       	ldi	r30, 0xFA	; 250
    3bb0:	f2 e2       	ldi	r31, 0x22	; 34
    3bb2:	10 82       	st	Z, r1
    3bb4:	11 82       	std	Z+1, r1	; 0x01
    3bb6:	12 82       	std	Z+2, r1	; 0x02
    3bb8:	13 82       	std	Z+3, r1	; 0x03
    3bba:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udi_cdc_tx_sof_num>
    3bbe:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udi_cdc_tx_sof_num+0x1>
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	3c de       	rcall	.-904    	; 0x383e <udi_cdc_tx_send>
    3bc6:	10 92 7e 23 	sts	0x237E, r1	; 0x80237e <udi_cdc_rx_trans_ongoing>
    3bca:	10 92 81 23 	sts	0x2381, r1	; 0x802381 <udi_cdc_rx_buf_sel>
    3bce:	e2 e8       	ldi	r30, 0x82	; 130
    3bd0:	f3 e2       	ldi	r31, 0x23	; 35
    3bd2:	10 82       	st	Z, r1
    3bd4:	11 82       	std	Z+1, r1	; 0x01
    3bd6:	12 82       	std	Z+2, r1	; 0x02
    3bd8:	13 82       	std	Z+3, r1	; 0x03
    3bda:	10 92 7f 23 	sts	0x237F, r1	; 0x80237f <udi_cdc_rx_pos>
    3bde:	10 92 80 23 	sts	0x2380, r1	; 0x802380 <udi_cdc_rx_pos+0x1>
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	8b df       	rcall	.-234    	; 0x3afc <udi_cdc_rx_start>
    3be6:	88 23       	and	r24, r24
    3be8:	59 f0       	breq	.+22     	; 0x3c00 <udi_cdc_data_enable+0x62>
    3bea:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udi_cdc_nb_data_enabled>
    3bee:	9f 5f       	subi	r25, 0xFF	; 255
    3bf0:	90 93 07 24 	sts	0x2407, r25	; 0x802407 <udi_cdc_nb_data_enabled>
    3bf4:	90 91 07 24 	lds	r25, 0x2407	; 0x802407 <udi_cdc_nb_data_enabled>
    3bf8:	91 30       	cpi	r25, 0x01	; 1
    3bfa:	11 f4       	brne	.+4      	; 0x3c00 <udi_cdc_data_enable+0x62>
    3bfc:	90 93 06 24 	sts	0x2406, r25	; 0x802406 <udi_cdc_data_running>
    3c00:	08 95       	ret

00003c02 <udi_cdc_data_received>:
    3c02:	0f 93       	push	r16
    3c04:	1f 93       	push	r17
    3c06:	81 11       	cpse	r24, r1
    3c08:	29 c0       	rjmp	.+82     	; 0x3c5c <udi_cdc_data_received+0x5a>
    3c0a:	80 91 81 23 	lds	r24, 0x2381	; 0x802381 <udi_cdc_rx_buf_sel>
    3c0e:	e1 e0       	ldi	r30, 0x01	; 1
    3c10:	81 11       	cpse	r24, r1
    3c12:	e0 e0       	ldi	r30, 0x00	; 0
    3c14:	84 2f       	mov	r24, r20
    3c16:	61 15       	cp	r22, r1
    3c18:	71 05       	cpc	r23, r1
    3c1a:	a9 f4       	brne	.+42     	; 0x3c46 <udi_cdc_data_received+0x44>
    3c1c:	4e 2f       	mov	r20, r30
    3c1e:	50 e0       	ldi	r21, 0x00	; 0
    3c20:	00 24       	eor	r0, r0
    3c22:	56 95       	lsr	r21
    3c24:	47 95       	ror	r20
    3c26:	07 94       	ror	r0
    3c28:	56 95       	lsr	r21
    3c2a:	47 95       	ror	r20
    3c2c:	07 94       	ror	r0
    3c2e:	54 2f       	mov	r21, r20
    3c30:	40 2d       	mov	r20, r0
    3c32:	4a 57       	subi	r20, 0x7A	; 122
    3c34:	5c 4d       	sbci	r21, 0xDC	; 220
    3c36:	01 e0       	ldi	r16, 0x01	; 1
    3c38:	1e e1       	ldi	r17, 0x1E	; 30
    3c3a:	20 e4       	ldi	r18, 0x40	; 64
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	61 e0       	ldi	r22, 0x01	; 1
    3c40:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <udd_ep_run>
    3c44:	0b c0       	rjmp	.+22     	; 0x3c5c <udi_cdc_data_received+0x5a>
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	ee 0f       	add	r30, r30
    3c4a:	ff 1f       	adc	r31, r31
    3c4c:	ee 57       	subi	r30, 0x7E	; 126
    3c4e:	fc 4d       	sbci	r31, 0xDC	; 220
    3c50:	60 83       	st	Z, r22
    3c52:	71 83       	std	Z+1, r23	; 0x01
    3c54:	10 92 7e 23 	sts	0x237E, r1	; 0x80237e <udi_cdc_rx_trans_ongoing>
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	50 df       	rcall	.-352    	; 0x3afc <udi_cdc_rx_start>
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
    3c60:	08 95       	ret

00003c62 <udi_cdc_multi_getc>:
    3c62:	ef 92       	push	r14
    3c64:	ff 92       	push	r15
    3c66:	1f 93       	push	r17
    3c68:	cf 93       	push	r28
    3c6a:	df 93       	push	r29
    3c6c:	1f 92       	push	r1
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	11 e0       	ldi	r17, 0x01	; 1
    3c74:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <udi_cdc_line_coding+0x6>
    3c78:	89 30       	cpi	r24, 0x09	; 9
    3c7a:	09 f0       	breq	.+2      	; 0x3c7e <udi_cdc_multi_getc+0x1c>
    3c7c:	10 e0       	ldi	r17, 0x00	; 0
    3c7e:	40 e0       	ldi	r20, 0x00	; 0
    3c80:	50 e0       	ldi	r21, 0x00	; 0
    3c82:	8f b7       	in	r24, 0x3f	; 63
    3c84:	89 83       	std	Y+1, r24	; 0x01
    3c86:	f8 94       	cli
    3c88:	a9 81       	ldd	r26, Y+1	; 0x01
    3c8a:	20 91 7f 23 	lds	r18, 0x237F	; 0x80237f <udi_cdc_rx_pos>
    3c8e:	30 91 80 23 	lds	r19, 0x2380	; 0x802380 <udi_cdc_rx_pos+0x1>
    3c92:	80 91 81 23 	lds	r24, 0x2381	; 0x802381 <udi_cdc_rx_buf_sel>
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	fc 01       	movw	r30, r24
    3c9a:	ee 0f       	add	r30, r30
    3c9c:	ff 1f       	adc	r31, r31
    3c9e:	ee 57       	subi	r30, 0x7E	; 126
    3ca0:	fc 4d       	sbci	r31, 0xDC	; 220
    3ca2:	60 81       	ld	r22, Z
    3ca4:	71 81       	ldd	r23, Z+1	; 0x01
    3ca6:	af bf       	out	0x3f, r26	; 63
    3ca8:	26 17       	cp	r18, r22
    3caa:	37 07       	cpc	r19, r23
    3cac:	30 f0       	brcs	.+12     	; 0x3cba <udi_cdc_multi_getc+0x58>
    3cae:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udi_cdc_data_running>
    3cb2:	81 11       	cpse	r24, r1
    3cb4:	e6 cf       	rjmp	.-52     	; 0x3c82 <udi_cdc_multi_getc+0x20>
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	21 c0       	rjmp	.+66     	; 0x3cfc <udi_cdc_multi_getc+0x9a>
    3cba:	fc 01       	movw	r30, r24
    3cbc:	00 24       	eor	r0, r0
    3cbe:	f6 95       	lsr	r31
    3cc0:	e7 95       	ror	r30
    3cc2:	07 94       	ror	r0
    3cc4:	f6 95       	lsr	r31
    3cc6:	e7 95       	ror	r30
    3cc8:	07 94       	ror	r0
    3cca:	fe 2f       	mov	r31, r30
    3ccc:	e0 2d       	mov	r30, r0
    3cce:	ea 57       	subi	r30, 0x7A	; 122
    3cd0:	fc 4d       	sbci	r31, 0xDC	; 220
    3cd2:	e2 0f       	add	r30, r18
    3cd4:	f3 1f       	adc	r31, r19
    3cd6:	80 81       	ld	r24, Z
    3cd8:	7a 01       	movw	r14, r20
    3cda:	e8 2a       	or	r14, r24
    3cdc:	2f 5f       	subi	r18, 0xFF	; 255
    3cde:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce0:	20 93 7f 23 	sts	0x237F, r18	; 0x80237f <udi_cdc_rx_pos>
    3ce4:	30 93 80 23 	sts	0x2380, r19	; 0x802380 <udi_cdc_rx_pos+0x1>
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	08 df       	rcall	.-496    	; 0x3afc <udi_cdc_rx_start>
    3cec:	11 23       	and	r17, r17
    3cee:	21 f0       	breq	.+8      	; 0x3cf8 <udi_cdc_multi_getc+0x96>
    3cf0:	5e 2d       	mov	r21, r14
    3cf2:	44 27       	eor	r20, r20
    3cf4:	10 e0       	ldi	r17, 0x00	; 0
    3cf6:	c5 cf       	rjmp	.-118    	; 0x3c82 <udi_cdc_multi_getc+0x20>
    3cf8:	8e 2d       	mov	r24, r14
    3cfa:	9f 2d       	mov	r25, r15
    3cfc:	0f 90       	pop	r0
    3cfe:	df 91       	pop	r29
    3d00:	cf 91       	pop	r28
    3d02:	1f 91       	pop	r17
    3d04:	ff 90       	pop	r15
    3d06:	ef 90       	pop	r14
    3d08:	08 95       	ret

00003d0a <udi_cdc_getc>:
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	aa cf       	rjmp	.-172    	; 0x3c62 <udi_cdc_multi_getc>
    3d0e:	08 95       	ret

00003d10 <udi_cdc_multi_get_free_tx_buffer>:
    3d10:	cf 93       	push	r28
    3d12:	df 93       	push	r29
    3d14:	1f 92       	push	r1
    3d16:	cd b7       	in	r28, 0x3d	; 61
    3d18:	de b7       	in	r29, 0x3e	; 62
    3d1a:	8f b7       	in	r24, 0x3f	; 63
    3d1c:	89 83       	std	Y+1, r24	; 0x01
    3d1e:	f8 94       	cli
    3d20:	99 81       	ldd	r25, Y+1	; 0x01
    3d22:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udi_cdc_tx_buf_sel>
    3d26:	e8 2f       	mov	r30, r24
    3d28:	f0 e0       	ldi	r31, 0x00	; 0
    3d2a:	ee 0f       	add	r30, r30
    3d2c:	ff 1f       	adc	r31, r31
    3d2e:	e6 50       	subi	r30, 0x06	; 6
    3d30:	fd 4d       	sbci	r31, 0xDD	; 221
    3d32:	20 81       	ld	r18, Z
    3d34:	31 81       	ldd	r19, Z+1	; 0x01
    3d36:	20 34       	cpi	r18, 0x40	; 64
    3d38:	31 05       	cpc	r19, r1
    3d3a:	89 f4       	brne	.+34     	; 0x3d5e <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3d3c:	40 91 f6 22 	lds	r20, 0x22F6	; 0x8022f6 <udi_cdc_tx_trans_ongoing>
    3d40:	41 11       	cpse	r20, r1
    3d42:	0d c0       	rjmp	.+26     	; 0x3d5e <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3d44:	40 91 f5 22 	lds	r20, 0x22F5	; 0x8022f5 <udi_cdc_tx_both_buf_to_send>
    3d48:	41 11       	cpse	r20, r1
    3d4a:	09 c0       	rjmp	.+18     	; 0x3d5e <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3d4c:	21 e0       	ldi	r18, 0x01	; 1
    3d4e:	20 93 f5 22 	sts	0x22F5, r18	; 0x8022f5 <udi_cdc_tx_both_buf_to_send>
    3d52:	81 11       	cpse	r24, r1
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	20 93 f9 22 	sts	0x22F9, r18	; 0x8022f9 <udi_cdc_tx_buf_sel>
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	9f bf       	out	0x3f, r25	; 63
    3d60:	80 e4       	ldi	r24, 0x40	; 64
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	82 1b       	sub	r24, r18
    3d66:	93 0b       	sbc	r25, r19
    3d68:	0f 90       	pop	r0
    3d6a:	df 91       	pop	r29
    3d6c:	cf 91       	pop	r28
    3d6e:	08 95       	ret

00003d70 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    3d70:	cf df       	rcall	.-98     	; 0x3d10 <udi_cdc_multi_get_free_tx_buffer>
    3d72:	21 e0       	ldi	r18, 0x01	; 1
    3d74:	89 2b       	or	r24, r25
    3d76:	09 f4       	brne	.+2      	; 0x3d7a <udi_cdc_multi_is_tx_ready+0xa>
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	82 2f       	mov	r24, r18
    3d7c:	08 95       	ret

00003d7e <udi_cdc_multi_putc>:
    3d7e:	ff 92       	push	r15
    3d80:	0f 93       	push	r16
    3d82:	1f 93       	push	r17
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	1f 92       	push	r1
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
    3d8e:	f6 2e       	mov	r15, r22
    3d90:	17 2f       	mov	r17, r23
    3d92:	01 e0       	ldi	r16, 0x01	; 1
    3d94:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <udi_cdc_line_coding+0x6>
    3d98:	89 30       	cpi	r24, 0x09	; 9
    3d9a:	09 f0       	breq	.+2      	; 0x3d9e <udi_cdc_multi_putc+0x20>
    3d9c:	00 e0       	ldi	r16, 0x00	; 0
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	e7 df       	rcall	.-50     	; 0x3d70 <udi_cdc_multi_is_tx_ready>
    3da2:	81 11       	cpse	r24, r1
    3da4:	07 c0       	rjmp	.+14     	; 0x3db4 <udi_cdc_multi_putc+0x36>
    3da6:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udi_cdc_data_running>
    3daa:	81 11       	cpse	r24, r1
    3dac:	f8 cf       	rjmp	.-16     	; 0x3d9e <udi_cdc_multi_putc+0x20>
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	2c c0       	rjmp	.+88     	; 0x3e0c <udi_cdc_multi_putc+0x8e>
    3db4:	8f b7       	in	r24, 0x3f	; 63
    3db6:	89 83       	std	Y+1, r24	; 0x01
    3db8:	f8 94       	cli
    3dba:	49 81       	ldd	r20, Y+1	; 0x01
    3dbc:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udi_cdc_tx_buf_sel>
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	ee 0f       	add	r30, r30
    3dc6:	ff 1f       	adc	r31, r31
    3dc8:	e6 50       	subi	r30, 0x06	; 6
    3dca:	fd 4d       	sbci	r31, 0xDD	; 221
    3dcc:	20 81       	ld	r18, Z
    3dce:	31 81       	ldd	r19, Z+1	; 0x01
    3dd0:	b9 01       	movw	r22, r18
    3dd2:	6f 5f       	subi	r22, 0xFF	; 255
    3dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd6:	60 83       	st	Z, r22
    3dd8:	71 83       	std	Z+1, r23	; 0x01
    3dda:	00 24       	eor	r0, r0
    3ddc:	96 95       	lsr	r25
    3dde:	87 95       	ror	r24
    3de0:	07 94       	ror	r0
    3de2:	96 95       	lsr	r25
    3de4:	87 95       	ror	r24
    3de6:	07 94       	ror	r0
    3de8:	98 2f       	mov	r25, r24
    3dea:	80 2d       	mov	r24, r0
    3dec:	82 50       	subi	r24, 0x02	; 2
    3dee:	9d 4d       	sbci	r25, 0xDD	; 221
    3df0:	fc 01       	movw	r30, r24
    3df2:	e2 0f       	add	r30, r18
    3df4:	f3 1f       	adc	r31, r19
    3df6:	f0 82       	st	Z, r15
    3df8:	4f bf       	out	0x3f, r20	; 63
    3dfa:	00 23       	and	r16, r16
    3dfc:	29 f0       	breq	.+10     	; 0x3e08 <udi_cdc_multi_putc+0x8a>
    3dfe:	f1 2e       	mov	r15, r17
    3e00:	11 0f       	add	r17, r17
    3e02:	11 0b       	sbc	r17, r17
    3e04:	00 e0       	ldi	r16, 0x00	; 0
    3e06:	cb cf       	rjmp	.-106    	; 0x3d9e <udi_cdc_multi_putc+0x20>
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	0f 90       	pop	r0
    3e0e:	df 91       	pop	r29
    3e10:	cf 91       	pop	r28
    3e12:	1f 91       	pop	r17
    3e14:	0f 91       	pop	r16
    3e16:	ff 90       	pop	r15
    3e18:	08 95       	ret

00003e1a <udi_cdc_putc>:
    3e1a:	bc 01       	movw	r22, r24
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	af cf       	rjmp	.-162    	; 0x3d7e <udi_cdc_multi_putc>
    3e20:	08 95       	ret

00003e22 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    3e22:	e0 91 22 24 	lds	r30, 0x2422	; 0x802422 <udc_ptr_conf>
    3e26:	f0 91 23 24 	lds	r31, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    3e2a:	01 90       	ld	r0, Z+
    3e2c:	f0 81       	ld	r31, Z
    3e2e:	e0 2d       	mov	r30, r0
    3e30:	22 81       	ldd	r18, Z+2	; 0x02
    3e32:	33 81       	ldd	r19, Z+3	; 0x03
    3e34:	2e 0f       	add	r18, r30
    3e36:	3f 1f       	adc	r19, r31
    3e38:	fc 01       	movw	r30, r24
    3e3a:	40 81       	ld	r20, Z
    3e3c:	e4 0f       	add	r30, r20
    3e3e:	f1 1d       	adc	r31, r1
    3e40:	e2 17       	cp	r30, r18
    3e42:	f3 07       	cpc	r31, r19
    3e44:	a0 f4       	brcc	.+40     	; 0x3e6e <udc_next_desc_in_iface+0x4c>
    3e46:	81 81       	ldd	r24, Z+1	; 0x01
    3e48:	84 30       	cpi	r24, 0x04	; 4
    3e4a:	a1 f0       	breq	.+40     	; 0x3e74 <udc_next_desc_in_iface+0x52>
    3e4c:	86 13       	cpse	r24, r22
    3e4e:	06 c0       	rjmp	.+12     	; 0x3e5c <udc_next_desc_in_iface+0x3a>
    3e50:	14 c0       	rjmp	.+40     	; 0x3e7a <udc_next_desc_in_iface+0x58>
    3e52:	81 81       	ldd	r24, Z+1	; 0x01
    3e54:	84 30       	cpi	r24, 0x04	; 4
    3e56:	a1 f0       	breq	.+40     	; 0x3e80 <udc_next_desc_in_iface+0x5e>
    3e58:	86 17       	cp	r24, r22
    3e5a:	a9 f0       	breq	.+42     	; 0x3e86 <udc_next_desc_in_iface+0x64>
    3e5c:	80 81       	ld	r24, Z
    3e5e:	e8 0f       	add	r30, r24
    3e60:	f1 1d       	adc	r31, r1
    3e62:	e2 17       	cp	r30, r18
    3e64:	f3 07       	cpc	r31, r19
    3e66:	a8 f3       	brcs	.-22     	; 0x3e52 <udc_next_desc_in_iface+0x30>
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	08 95       	ret
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	08 95       	ret
    3e74:	80 e0       	ldi	r24, 0x00	; 0
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	08 95       	ret
    3e7a:	8e 2f       	mov	r24, r30
    3e7c:	9f 2f       	mov	r25, r31
    3e7e:	08 95       	ret
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	08 95       	ret
    3e86:	8e 2f       	mov	r24, r30
    3e88:	9f 2f       	mov	r25, r31
    3e8a:	08 95       	ret

00003e8c <udc_valid_address>:
    3e8c:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_g_ctrlreq+0x2>
    3e90:	8f 77       	andi	r24, 0x7F	; 127
    3e92:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <udd_set_address>
    3e96:	08 95       	ret

00003e98 <udc_update_iface_desc>:
    3e98:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udc_num_configuration>
    3e9c:	99 23       	and	r25, r25
    3e9e:	81 f1       	breq	.+96     	; 0x3f00 <udc_update_iface_desc+0x68>
    3ea0:	e0 91 22 24 	lds	r30, 0x2422	; 0x802422 <udc_ptr_conf>
    3ea4:	f0 91 23 24 	lds	r31, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    3ea8:	01 90       	ld	r0, Z+
    3eaa:	f0 81       	ld	r31, Z
    3eac:	e0 2d       	mov	r30, r0
    3eae:	94 81       	ldd	r25, Z+4	; 0x04
    3eb0:	89 17       	cp	r24, r25
    3eb2:	40 f5       	brcc	.+80     	; 0x3f04 <udc_update_iface_desc+0x6c>
    3eb4:	e0 93 20 24 	sts	0x2420, r30	; 0x802420 <udc_ptr_iface>
    3eb8:	f0 93 21 24 	sts	0x2421, r31	; 0x802421 <udc_ptr_iface+0x1>
    3ebc:	22 81       	ldd	r18, Z+2	; 0x02
    3ebe:	33 81       	ldd	r19, Z+3	; 0x03
    3ec0:	2e 0f       	add	r18, r30
    3ec2:	3f 1f       	adc	r19, r31
    3ec4:	e2 17       	cp	r30, r18
    3ec6:	f3 07       	cpc	r31, r19
    3ec8:	f8 f4       	brcc	.+62     	; 0x3f08 <udc_update_iface_desc+0x70>
    3eca:	91 81       	ldd	r25, Z+1	; 0x01
    3ecc:	94 30       	cpi	r25, 0x04	; 4
    3ece:	61 f4       	brne	.+24     	; 0x3ee8 <udc_update_iface_desc+0x50>
    3ed0:	92 81       	ldd	r25, Z+2	; 0x02
    3ed2:	89 13       	cpse	r24, r25
    3ed4:	09 c0       	rjmp	.+18     	; 0x3ee8 <udc_update_iface_desc+0x50>
    3ed6:	93 81       	ldd	r25, Z+3	; 0x03
    3ed8:	96 13       	cpse	r25, r22
    3eda:	06 c0       	rjmp	.+12     	; 0x3ee8 <udc_update_iface_desc+0x50>
    3edc:	e0 93 20 24 	sts	0x2420, r30	; 0x802420 <udc_ptr_iface>
    3ee0:	f0 93 21 24 	sts	0x2421, r31	; 0x802421 <udc_ptr_iface+0x1>
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	08 95       	ret
    3ee8:	90 81       	ld	r25, Z
    3eea:	e9 0f       	add	r30, r25
    3eec:	f1 1d       	adc	r31, r1
    3eee:	e2 17       	cp	r30, r18
    3ef0:	f3 07       	cpc	r31, r19
    3ef2:	58 f3       	brcs	.-42     	; 0x3eca <udc_update_iface_desc+0x32>
    3ef4:	e0 93 20 24 	sts	0x2420, r30	; 0x802420 <udc_ptr_iface>
    3ef8:	f0 93 21 24 	sts	0x2421, r31	; 0x802421 <udc_ptr_iface+0x1>
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	08 95       	ret
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	08 95       	ret
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	08 95       	ret
    3f08:	80 e0       	ldi	r24, 0x00	; 0
    3f0a:	08 95       	ret

00003f0c <udc_iface_disable>:
    3f0c:	ef 92       	push	r14
    3f0e:	ff 92       	push	r15
    3f10:	1f 93       	push	r17
    3f12:	cf 93       	push	r28
    3f14:	df 93       	push	r29
    3f16:	c8 2f       	mov	r28, r24
    3f18:	60 e0       	ldi	r22, 0x00	; 0
    3f1a:	be df       	rcall	.-132    	; 0x3e98 <udc_update_iface_desc>
    3f1c:	18 2f       	mov	r17, r24
    3f1e:	88 23       	and	r24, r24
    3f20:	81 f1       	breq	.+96     	; 0x3f82 <udc_iface_disable+0x76>
    3f22:	a0 91 22 24 	lds	r26, 0x2422	; 0x802422 <udc_ptr_conf>
    3f26:	b0 91 23 24 	lds	r27, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    3f2a:	ec 2f       	mov	r30, r28
    3f2c:	f0 e0       	ldi	r31, 0x00	; 0
    3f2e:	ee 0f       	add	r30, r30
    3f30:	ff 1f       	adc	r31, r31
    3f32:	12 96       	adiw	r26, 0x02	; 2
    3f34:	8d 91       	ld	r24, X+
    3f36:	9c 91       	ld	r25, X
    3f38:	13 97       	sbiw	r26, 0x03	; 3
    3f3a:	e8 0f       	add	r30, r24
    3f3c:	f9 1f       	adc	r31, r25
    3f3e:	e0 80       	ld	r14, Z
    3f40:	f1 80       	ldd	r15, Z+1	; 0x01
    3f42:	d7 01       	movw	r26, r14
    3f44:	16 96       	adiw	r26, 0x06	; 6
    3f46:	ed 91       	ld	r30, X+
    3f48:	fc 91       	ld	r31, X
    3f4a:	17 97       	sbiw	r26, 0x07	; 7
    3f4c:	19 95       	eicall
    3f4e:	68 2f       	mov	r22, r24
    3f50:	8c 2f       	mov	r24, r28
    3f52:	a2 df       	rcall	.-188    	; 0x3e98 <udc_update_iface_desc>
    3f54:	18 2f       	mov	r17, r24
    3f56:	88 23       	and	r24, r24
    3f58:	a1 f0       	breq	.+40     	; 0x3f82 <udc_iface_disable+0x76>
    3f5a:	c0 91 20 24 	lds	r28, 0x2420	; 0x802420 <udc_ptr_iface>
    3f5e:	d0 91 21 24 	lds	r29, 0x2421	; 0x802421 <udc_ptr_iface+0x1>
    3f62:	65 e0       	ldi	r22, 0x05	; 5
    3f64:	ce 01       	movw	r24, r28
    3f66:	5d df       	rcall	.-326    	; 0x3e22 <udc_next_desc_in_iface>
    3f68:	ec 01       	movw	r28, r24
    3f6a:	89 2b       	or	r24, r25
    3f6c:	21 f0       	breq	.+8      	; 0x3f76 <udc_iface_disable+0x6a>
    3f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f70:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <udd_ep_free>
    3f74:	f6 cf       	rjmp	.-20     	; 0x3f62 <udc_iface_disable+0x56>
    3f76:	d7 01       	movw	r26, r14
    3f78:	12 96       	adiw	r26, 0x02	; 2
    3f7a:	ed 91       	ld	r30, X+
    3f7c:	fc 91       	ld	r31, X
    3f7e:	13 97       	sbiw	r26, 0x03	; 3
    3f80:	19 95       	eicall
    3f82:	81 2f       	mov	r24, r17
    3f84:	df 91       	pop	r29
    3f86:	cf 91       	pop	r28
    3f88:	1f 91       	pop	r17
    3f8a:	ff 90       	pop	r15
    3f8c:	ef 90       	pop	r14
    3f8e:	08 95       	ret

00003f90 <udc_iface_enable>:
    3f90:	1f 93       	push	r17
    3f92:	cf 93       	push	r28
    3f94:	df 93       	push	r29
    3f96:	18 2f       	mov	r17, r24
    3f98:	7f df       	rcall	.-258    	; 0x3e98 <udc_update_iface_desc>
    3f9a:	88 23       	and	r24, r24
    3f9c:	41 f1       	breq	.+80     	; 0x3fee <udc_iface_enable+0x5e>
    3f9e:	c0 91 20 24 	lds	r28, 0x2420	; 0x802420 <udc_ptr_iface>
    3fa2:	d0 91 21 24 	lds	r29, 0x2421	; 0x802421 <udc_ptr_iface+0x1>
    3fa6:	65 e0       	ldi	r22, 0x05	; 5
    3fa8:	ce 01       	movw	r24, r28
    3faa:	3b df       	rcall	.-394    	; 0x3e22 <udc_next_desc_in_iface>
    3fac:	ec 01       	movw	r28, r24
    3fae:	89 2b       	or	r24, r25
    3fb0:	49 f0       	breq	.+18     	; 0x3fc4 <udc_iface_enable+0x34>
    3fb2:	4c 81       	ldd	r20, Y+4	; 0x04
    3fb4:	5d 81       	ldd	r21, Y+5	; 0x05
    3fb6:	6b 81       	ldd	r22, Y+3	; 0x03
    3fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fba:	0e 94 f6 12 	call	0x25ec	; 0x25ec <udd_ep_alloc>
    3fbe:	81 11       	cpse	r24, r1
    3fc0:	f2 cf       	rjmp	.-28     	; 0x3fa6 <udc_iface_enable+0x16>
    3fc2:	15 c0       	rjmp	.+42     	; 0x3fee <udc_iface_enable+0x5e>
    3fc4:	a0 91 22 24 	lds	r26, 0x2422	; 0x802422 <udc_ptr_conf>
    3fc8:	b0 91 23 24 	lds	r27, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    3fcc:	e1 2f       	mov	r30, r17
    3fce:	f0 e0       	ldi	r31, 0x00	; 0
    3fd0:	ee 0f       	add	r30, r30
    3fd2:	ff 1f       	adc	r31, r31
    3fd4:	12 96       	adiw	r26, 0x02	; 2
    3fd6:	8d 91       	ld	r24, X+
    3fd8:	9c 91       	ld	r25, X
    3fda:	13 97       	sbiw	r26, 0x03	; 3
    3fdc:	e8 0f       	add	r30, r24
    3fde:	f9 1f       	adc	r31, r25
    3fe0:	01 90       	ld	r0, Z+
    3fe2:	f0 81       	ld	r31, Z
    3fe4:	e0 2d       	mov	r30, r0
    3fe6:	01 90       	ld	r0, Z+
    3fe8:	f0 81       	ld	r31, Z
    3fea:	e0 2d       	mov	r30, r0
    3fec:	19 95       	eicall
    3fee:	df 91       	pop	r29
    3ff0:	cf 91       	pop	r28
    3ff2:	1f 91       	pop	r17
    3ff4:	08 95       	ret

00003ff6 <udc_start>:
    3ff6:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <udd_enable>
    3ffa:	08 95       	ret

00003ffc <udc_reset>:
    3ffc:	cf 93       	push	r28
    3ffe:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <udc_num_configuration>
    4002:	88 23       	and	r24, r24
    4004:	c1 f0       	breq	.+48     	; 0x4036 <udc_reset+0x3a>
    4006:	e0 91 22 24 	lds	r30, 0x2422	; 0x802422 <udc_ptr_conf>
    400a:	f0 91 23 24 	lds	r31, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    400e:	01 90       	ld	r0, Z+
    4010:	f0 81       	ld	r31, Z
    4012:	e0 2d       	mov	r30, r0
    4014:	84 81       	ldd	r24, Z+4	; 0x04
    4016:	88 23       	and	r24, r24
    4018:	71 f0       	breq	.+28     	; 0x4036 <udc_reset+0x3a>
    401a:	c0 e0       	ldi	r28, 0x00	; 0
    401c:	8c 2f       	mov	r24, r28
    401e:	76 df       	rcall	.-276    	; 0x3f0c <udc_iface_disable>
    4020:	cf 5f       	subi	r28, 0xFF	; 255
    4022:	e0 91 22 24 	lds	r30, 0x2422	; 0x802422 <udc_ptr_conf>
    4026:	f0 91 23 24 	lds	r31, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    402a:	01 90       	ld	r0, Z+
    402c:	f0 81       	ld	r31, Z
    402e:	e0 2d       	mov	r30, r0
    4030:	84 81       	ldd	r24, Z+4	; 0x04
    4032:	c8 17       	cp	r28, r24
    4034:	98 f3       	brcs	.-26     	; 0x401c <udc_reset+0x20>
    4036:	10 92 24 24 	sts	0x2424, r1	; 0x802424 <udc_num_configuration>
    403a:	80 91 28 24 	lds	r24, 0x2428	; 0x802428 <udc_device_status>
    403e:	81 fd       	sbrc	r24, 1
    4040:	79 d8       	rcall	.-3854   	; 0x3134 <usb_callback_remotewakeup_disable>
    4042:	10 92 28 24 	sts	0x2428, r1	; 0x802428 <udc_device_status>
    4046:	10 92 29 24 	sts	0x2429, r1	; 0x802429 <udc_device_status+0x1>
    404a:	cf 91       	pop	r28
    404c:	08 95       	ret

0000404e <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    404e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    4050:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <udc_num_configuration>
    4054:	88 23       	and	r24, r24
    4056:	49 f1       	breq	.+82     	; 0x40aa <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4058:	a0 91 22 24 	lds	r26, 0x2422	; 0x802422 <udc_ptr_conf>
    405c:	b0 91 23 24 	lds	r27, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    4060:	ed 91       	ld	r30, X+
    4062:	fc 91       	ld	r31, X
    4064:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4066:	84 81       	ldd	r24, Z+4	; 0x04
    4068:	88 23       	and	r24, r24
    406a:	f9 f0       	breq	.+62     	; 0x40aa <udc_sof_notify+0x5c>
    406c:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    406e:	ec 2f       	mov	r30, r28
    4070:	f0 e0       	ldi	r31, 0x00	; 0
    4072:	ee 0f       	add	r30, r30
    4074:	ff 1f       	adc	r31, r31
    4076:	12 96       	adiw	r26, 0x02	; 2
    4078:	8d 91       	ld	r24, X+
    407a:	9c 91       	ld	r25, X
    407c:	13 97       	sbiw	r26, 0x03	; 3
    407e:	e8 0f       	add	r30, r24
    4080:	f9 1f       	adc	r31, r25
    4082:	01 90       	ld	r0, Z+
    4084:	f0 81       	ld	r31, Z
    4086:	e0 2d       	mov	r30, r0
    4088:	00 84       	ldd	r0, Z+8	; 0x08
    408a:	f1 85       	ldd	r31, Z+9	; 0x09
    408c:	e0 2d       	mov	r30, r0
    408e:	30 97       	sbiw	r30, 0x00	; 0
    4090:	09 f0       	breq	.+2      	; 0x4094 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    4092:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    4094:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4096:	a0 91 22 24 	lds	r26, 0x2422	; 0x802422 <udc_ptr_conf>
    409a:	b0 91 23 24 	lds	r27, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    409e:	ed 91       	ld	r30, X+
    40a0:	fc 91       	ld	r31, X
    40a2:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    40a4:	84 81       	ldd	r24, Z+4	; 0x04
    40a6:	c8 17       	cp	r28, r24
    40a8:	10 f3       	brcs	.-60     	; 0x406e <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    40aa:	cf 91       	pop	r28
    40ac:	08 95       	ret

000040ae <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    40ae:	0f 93       	push	r16
    40b0:	1f 93       	push	r17
    40b2:	cf 93       	push	r28
    40b4:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    40b6:	e1 e3       	ldi	r30, 0x31	; 49
    40b8:	f4 e2       	ldi	r31, 0x24	; 36
    40ba:	12 86       	std	Z+10, r1	; 0x0a
    40bc:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    40be:	14 86       	std	Z+12, r1	; 0x0c
    40c0:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    40c2:	16 86       	std	Z+14, r1	; 0x0e
    40c4:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    40c6:	80 81       	ld	r24, Z
    40c8:	88 23       	and	r24, r24
    40ca:	0c f0       	brlt	.+2      	; 0x40ce <udc_process_setup+0x20>
    40cc:	95 c2       	rjmp	.+1322   	; 0x45f8 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    40ce:	20 91 37 24 	lds	r18, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    40d2:	30 91 38 24 	lds	r19, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    40d6:	21 15       	cp	r18, r1
    40d8:	31 05       	cpc	r19, r1
    40da:	09 f0       	breq	.+2      	; 0x40de <udc_process_setup+0x30>
    40dc:	88 c2       	rjmp	.+1296   	; 0x45ee <udc_process_setup+0x540>
    40de:	7f c2       	rjmp	.+1278   	; 0x45de <udc_process_setup+0x530>
    40e0:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    40e2:	09 f0       	breq	.+2      	; 0x40e6 <udc_process_setup+0x38>
    40e4:	ab c0       	rjmp	.+342    	; 0x423c <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    40e6:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <udd_g_ctrlreq+0x1>
    40ea:	96 30       	cpi	r25, 0x06	; 6
    40ec:	81 f0       	breq	.+32     	; 0x410e <udc_process_setup+0x60>
    40ee:	98 30       	cpi	r25, 0x08	; 8
    40f0:	09 f4       	brne	.+2      	; 0x40f4 <udc_process_setup+0x46>
    40f2:	99 c0       	rjmp	.+306    	; 0x4226 <udc_process_setup+0x178>
    40f4:	91 11       	cpse	r25, r1
    40f6:	a2 c0       	rjmp	.+324    	; 0x423c <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    40f8:	22 30       	cpi	r18, 0x02	; 2
    40fa:	31 05       	cpc	r19, r1
    40fc:	09 f0       	breq	.+2      	; 0x4100 <udc_process_setup+0x52>
    40fe:	2b c2       	rjmp	.+1110   	; 0x4556 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    4100:	62 e0       	ldi	r22, 0x02	; 2
    4102:	70 e0       	ldi	r23, 0x00	; 0
    4104:	88 e2       	ldi	r24, 0x28	; 40
    4106:	94 e2       	ldi	r25, 0x24	; 36
    4108:	0e 94 ef 12 	call	0x25de	; 0x25de <udd_set_setup_payload>
    410c:	7e c2       	rjmp	.+1276   	; 0x460a <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    410e:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_g_ctrlreq+0x2>
    4112:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    4116:	29 2f       	mov	r18, r25
    4118:	33 27       	eor	r19, r19
    411a:	22 30       	cpi	r18, 0x02	; 2
    411c:	31 05       	cpc	r19, r1
    411e:	b1 f0       	breq	.+44     	; 0x414c <udc_process_setup+0x9e>
    4120:	20 f4       	brcc	.+8      	; 0x412a <udc_process_setup+0x7c>
    4122:	21 30       	cpi	r18, 0x01	; 1
    4124:	31 05       	cpc	r19, r1
    4126:	41 f0       	breq	.+16     	; 0x4138 <udc_process_setup+0x8a>
    4128:	d8 c1       	rjmp	.+944    	; 0x44da <udc_process_setup+0x42c>
    412a:	23 30       	cpi	r18, 0x03	; 3
    412c:	31 05       	cpc	r19, r1
    412e:	f1 f1       	breq	.+124    	; 0x41ac <udc_process_setup+0xfe>
    4130:	2f 30       	cpi	r18, 0x0F	; 15
    4132:	31 05       	cpc	r19, r1
    4134:	61 f1       	breq	.+88     	; 0x418e <udc_process_setup+0xe0>
    4136:	d1 c1       	rjmp	.+930    	; 0x44da <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    4138:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <udc_config>
    413c:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    4140:	dc 01       	movw	r26, r24
    4142:	6c 91       	ld	r22, X
    4144:	70 e0       	ldi	r23, 0x00	; 0
    4146:	0e 94 ef 12 	call	0x25de	; 0x25de <udd_set_setup_payload>
    414a:	5e c0       	rjmp	.+188    	; 0x4208 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    414c:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    4150:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
    4154:	21 89       	ldd	r18, Z+17	; 0x11
    4156:	82 17       	cp	r24, r18
    4158:	08 f0       	brcs	.+2      	; 0x415c <udc_process_setup+0xae>
    415a:	fd c1       	rjmp	.+1018   	; 0x4556 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    415c:	99 27       	eor	r25, r25
    415e:	88 0f       	add	r24, r24
    4160:	99 1f       	adc	r25, r25
    4162:	88 0f       	add	r24, r24
    4164:	99 1f       	adc	r25, r25
    4166:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    416a:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    416e:	e8 0f       	add	r30, r24
    4170:	f9 1f       	adc	r31, r25
    4172:	80 81       	ld	r24, Z
    4174:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    4176:	fc 01       	movw	r30, r24
    4178:	62 81       	ldd	r22, Z+2	; 0x02
    417a:	73 81       	ldd	r23, Z+3	; 0x03
    417c:	0e 94 ef 12 	call	0x25de	; 0x25de <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    4180:	e0 91 39 24 	lds	r30, 0x2439	; 0x802439 <udd_g_ctrlreq+0x8>
    4184:	f0 91 3a 24 	lds	r31, 0x243A	; 0x80243a <udd_g_ctrlreq+0x9>
    4188:	82 e0       	ldi	r24, 0x02	; 2
    418a:	81 83       	std	Z+1, r24	; 0x01
    418c:	3d c0       	rjmp	.+122    	; 0x4208 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    418e:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <udc_config+0x4>
    4192:	90 91 42 20 	lds	r25, 0x2042	; 0x802042 <udc_config+0x5>
    4196:	00 97       	sbiw	r24, 0x00	; 0
    4198:	09 f4       	brne	.+2      	; 0x419c <udc_process_setup+0xee>
    419a:	dd c1       	rjmp	.+954    	; 0x4556 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    419c:	dc 01       	movw	r26, r24
    419e:	12 96       	adiw	r26, 0x02	; 2
    41a0:	6d 91       	ld	r22, X+
    41a2:	7c 91       	ld	r23, X
    41a4:	13 97       	sbiw	r26, 0x03	; 3
    41a6:	0e 94 ef 12 	call	0x25de	; 0x25de <udd_set_setup_payload>
    41aa:	2e c0       	rjmp	.+92     	; 0x4208 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    41ac:	99 27       	eor	r25, r25
    41ae:	81 30       	cpi	r24, 0x01	; 1
    41b0:	91 05       	cpc	r25, r1
    41b2:	99 f0       	breq	.+38     	; 0x41da <udc_process_setup+0x12c>
    41b4:	58 f0       	brcs	.+22     	; 0x41cc <udc_process_setup+0x11e>
    41b6:	82 30       	cpi	r24, 0x02	; 2
    41b8:	91 05       	cpc	r25, r1
    41ba:	09 f4       	brne	.+2      	; 0x41be <udc_process_setup+0x110>
    41bc:	22 c2       	rjmp	.+1092   	; 0x4602 <udc_process_setup+0x554>
    41be:	03 97       	sbiw	r24, 0x03	; 3
    41c0:	09 f0       	breq	.+2      	; 0x41c4 <udc_process_setup+0x116>
    41c2:	94 c1       	rjmp	.+808    	; 0x44ec <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    41c4:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    41c6:	e7 e3       	ldi	r30, 0x37	; 55
    41c8:	f1 e2       	ldi	r31, 0x21	; 33
    41ca:	0a c0       	rjmp	.+20     	; 0x41e0 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    41cc:	64 e0       	ldi	r22, 0x04	; 4
    41ce:	70 e0       	ldi	r23, 0x00	; 0
    41d0:	82 ee       	ldi	r24, 0xE2	; 226
    41d2:	90 e2       	ldi	r25, 0x20	; 32
    41d4:	0e 94 ef 12 	call	0x25de	; 0x25de <udd_set_setup_payload>
    41d8:	17 c0       	rjmp	.+46     	; 0x4208 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    41da:	e1 ed       	ldi	r30, 0xD1	; 209
    41dc:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    41de:	30 e1       	ldi	r19, 0x10	; 16
    41e0:	a4 ea       	ldi	r26, 0xA4	; 164
    41e2:	b0 e2       	ldi	r27, 0x20	; 32
    41e4:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    41e6:	81 91       	ld	r24, Z+
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	8d 93       	st	X+, r24
    41ec:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    41ee:	2f 5f       	subi	r18, 0xFF	; 255
    41f0:	23 17       	cp	r18, r19
    41f2:	c8 f3       	brcs	.-14     	; 0x41e6 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    41f4:	63 2f       	mov	r22, r19
    41f6:	66 0f       	add	r22, r22
    41f8:	6e 5f       	subi	r22, 0xFE	; 254
    41fa:	60 93 a2 20 	sts	0x20A2, r22	; 0x8020a2 <udc_string_desc>
		udd_set_setup_payload(
    41fe:	70 e0       	ldi	r23, 0x00	; 0
    4200:	82 ea       	ldi	r24, 0xA2	; 162
    4202:	90 e2       	ldi	r25, 0x20	; 32
    4204:	0e 94 ef 12 	call	0x25de	; 0x25de <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    4208:	e1 e3       	ldi	r30, 0x31	; 49
    420a:	f4 e2       	ldi	r31, 0x24	; 36
    420c:	86 81       	ldd	r24, Z+6	; 0x06
    420e:	97 81       	ldd	r25, Z+7	; 0x07
    4210:	22 85       	ldd	r18, Z+10	; 0x0a
    4212:	33 85       	ldd	r19, Z+11	; 0x0b
    4214:	82 17       	cp	r24, r18
    4216:	93 07       	cpc	r25, r19
    4218:	08 f0       	brcs	.+2      	; 0x421c <udc_process_setup+0x16e>
    421a:	f7 c1       	rjmp	.+1006   	; 0x460a <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    421c:	80 93 3b 24 	sts	0x243B, r24	; 0x80243b <udd_g_ctrlreq+0xa>
    4220:	90 93 3c 24 	sts	0x243C, r25	; 0x80243c <udd_g_ctrlreq+0xb>
    4224:	f2 c1       	rjmp	.+996    	; 0x460a <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    4226:	21 30       	cpi	r18, 0x01	; 1
    4228:	31 05       	cpc	r19, r1
    422a:	09 f0       	breq	.+2      	; 0x422e <udc_process_setup+0x180>
    422c:	94 c1       	rjmp	.+808    	; 0x4556 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    422e:	61 e0       	ldi	r22, 0x01	; 1
    4230:	70 e0       	ldi	r23, 0x00	; 0
    4232:	84 e2       	ldi	r24, 0x24	; 36
    4234:	94 e2       	ldi	r25, 0x24	; 36
    4236:	0e 94 ef 12 	call	0x25de	; 0x25de <udd_set_setup_payload>
    423a:	e7 c1       	rjmp	.+974    	; 0x460a <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    423c:	81 30       	cpi	r24, 0x01	; 1
    423e:	e9 f5       	brne	.+122    	; 0x42ba <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4240:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <udd_g_ctrlreq+0x1>
    4244:	9a 30       	cpi	r25, 0x0A	; 10
    4246:	c9 f5       	brne	.+114    	; 0x42ba <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    4248:	21 30       	cpi	r18, 0x01	; 1
    424a:	31 05       	cpc	r19, r1
    424c:	09 f0       	breq	.+2      	; 0x4250 <udc_process_setup+0x1a2>
    424e:	53 c1       	rjmp	.+678    	; 0x44f6 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4250:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <udc_num_configuration>
    4254:	88 23       	and	r24, r24
    4256:	09 f4       	brne	.+2      	; 0x425a <udc_process_setup+0x1ac>
    4258:	4e c1       	rjmp	.+668    	; 0x44f6 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    425a:	c0 91 35 24 	lds	r28, 0x2435	; 0x802435 <udd_g_ctrlreq+0x4>
    425e:	d0 91 36 24 	lds	r29, 0x2436	; 0x802436 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4262:	00 91 22 24 	lds	r16, 0x2422	; 0x802422 <udc_ptr_conf>
    4266:	10 91 23 24 	lds	r17, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    426a:	d8 01       	movw	r26, r16
    426c:	ed 91       	ld	r30, X+
    426e:	fc 91       	ld	r31, X
    4270:	84 81       	ldd	r24, Z+4	; 0x04
    4272:	c8 17       	cp	r28, r24
    4274:	08 f0       	brcs	.+2      	; 0x4278 <udc_process_setup+0x1ca>
    4276:	3f c1       	rjmp	.+638    	; 0x44f6 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4278:	60 e0       	ldi	r22, 0x00	; 0
    427a:	8c 2f       	mov	r24, r28
    427c:	0d de       	rcall	.-998    	; 0x3e98 <udc_update_iface_desc>
    427e:	88 23       	and	r24, r24
    4280:	09 f4       	brne	.+2      	; 0x4284 <udc_process_setup+0x1d6>
    4282:	34 c1       	rjmp	.+616    	; 0x44ec <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4284:	ce 01       	movw	r24, r28
    4286:	99 27       	eor	r25, r25
    4288:	88 0f       	add	r24, r24
    428a:	99 1f       	adc	r25, r25
    428c:	d8 01       	movw	r26, r16
    428e:	12 96       	adiw	r26, 0x02	; 2
    4290:	ed 91       	ld	r30, X+
    4292:	fc 91       	ld	r31, X
    4294:	13 97       	sbiw	r26, 0x03	; 3
    4296:	e8 0f       	add	r30, r24
    4298:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    429a:	01 90       	ld	r0, Z+
    429c:	f0 81       	ld	r31, Z
    429e:	e0 2d       	mov	r30, r0
    42a0:	86 81       	ldd	r24, Z+6	; 0x06
    42a2:	97 81       	ldd	r25, Z+7	; 0x07
    42a4:	fc 01       	movw	r30, r24
    42a6:	19 95       	eicall
    42a8:	80 93 26 24 	sts	0x2426, r24	; 0x802426 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    42ac:	61 e0       	ldi	r22, 0x01	; 1
    42ae:	70 e0       	ldi	r23, 0x00	; 0
    42b0:	86 e2       	ldi	r24, 0x26	; 38
    42b2:	94 e2       	ldi	r25, 0x24	; 36
    42b4:	0e 94 ef 12 	call	0x25de	; 0x25de <udd_set_setup_payload>
    42b8:	a8 c1       	rjmp	.+848    	; 0x460a <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    42ba:	82 30       	cpi	r24, 0x02	; 2
    42bc:	09 f0       	breq	.+2      	; 0x42c0 <udc_process_setup+0x212>
    42be:	16 c1       	rjmp	.+556    	; 0x44ec <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    42c0:	80 91 32 24 	lds	r24, 0x2432	; 0x802432 <udd_g_ctrlreq+0x1>
    42c4:	81 11       	cpse	r24, r1
    42c6:	0b c1       	rjmp	.+534    	; 0x44de <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    42c8:	22 30       	cpi	r18, 0x02	; 2
    42ca:	31 05       	cpc	r19, r1
    42cc:	09 f0       	breq	.+2      	; 0x42d0 <udc_process_setup+0x222>
    42ce:	43 c1       	rjmp	.+646    	; 0x4556 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    42d0:	80 91 35 24 	lds	r24, 0x2435	; 0x802435 <udd_g_ctrlreq+0x4>
    42d4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <udd_ep_is_halted>
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	80 93 1e 24 	sts	0x241E, r24	; 0x80241e <udc_ep_status.4757>
    42de:	90 93 1f 24 	sts	0x241F, r25	; 0x80241f <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    42e2:	62 e0       	ldi	r22, 0x02	; 2
    42e4:	70 e0       	ldi	r23, 0x00	; 0
    42e6:	8e e1       	ldi	r24, 0x1E	; 30
    42e8:	94 e2       	ldi	r25, 0x24	; 36
    42ea:	0e 94 ef 12 	call	0x25de	; 0x25de <udd_set_setup_payload>
    42ee:	8d c1       	rjmp	.+794    	; 0x460a <udc_process_setup+0x55c>
    42f0:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    42f2:	09 f0       	breq	.+2      	; 0x42f6 <udc_process_setup+0x248>
    42f4:	a0 c0       	rjmp	.+320    	; 0x4436 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    42f6:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <udd_g_ctrlreq+0x1>
    42fa:	93 30       	cpi	r25, 0x03	; 3
    42fc:	91 f1       	breq	.+100    	; 0x4362 <udc_process_setup+0x2b4>
    42fe:	18 f4       	brcc	.+6      	; 0x4306 <udc_process_setup+0x258>
    4300:	91 30       	cpi	r25, 0x01	; 1
    4302:	a9 f0       	breq	.+42     	; 0x432e <udc_process_setup+0x280>
    4304:	98 c0       	rjmp	.+304    	; 0x4436 <udc_process_setup+0x388>
    4306:	95 30       	cpi	r25, 0x05	; 5
    4308:	21 f0       	breq	.+8      	; 0x4312 <udc_process_setup+0x264>
    430a:	99 30       	cpi	r25, 0x09	; 9
    430c:	09 f4       	brne	.+2      	; 0x4310 <udc_process_setup+0x262>
    430e:	43 c0       	rjmp	.+134    	; 0x4396 <udc_process_setup+0x2e8>
    4310:	92 c0       	rjmp	.+292    	; 0x4436 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4312:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    4316:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    431a:	89 2b       	or	r24, r25
    431c:	09 f0       	breq	.+2      	; 0x4320 <udc_process_setup+0x272>
    431e:	1b c1       	rjmp	.+566    	; 0x4556 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    4320:	86 e4       	ldi	r24, 0x46	; 70
    4322:	9f e1       	ldi	r25, 0x1F	; 31
    4324:	80 93 3d 24 	sts	0x243D, r24	; 0x80243d <udd_g_ctrlreq+0xc>
    4328:	90 93 3e 24 	sts	0x243E, r25	; 0x80243e <udd_g_ctrlreq+0xd>
    432c:	6e c1       	rjmp	.+732    	; 0x460a <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    432e:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    4332:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    4336:	89 2b       	or	r24, r25
    4338:	09 f0       	breq	.+2      	; 0x433c <udc_process_setup+0x28e>
    433a:	0d c1       	rjmp	.+538    	; 0x4556 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    433c:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_g_ctrlreq+0x2>
    4340:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_g_ctrlreq+0x3>
    4344:	01 97       	sbiw	r24, 0x01	; 1
    4346:	09 f0       	breq	.+2      	; 0x434a <udc_process_setup+0x29c>
    4348:	06 c1       	rjmp	.+524    	; 0x4556 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    434a:	80 91 28 24 	lds	r24, 0x2428	; 0x802428 <udc_device_status>
    434e:	90 91 29 24 	lds	r25, 0x2429	; 0x802429 <udc_device_status+0x1>
    4352:	8d 7f       	andi	r24, 0xFD	; 253
    4354:	80 93 28 24 	sts	0x2428, r24	; 0x802428 <udc_device_status>
    4358:	90 93 29 24 	sts	0x2429, r25	; 0x802429 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    435c:	0e 94 9a 18 	call	0x3134	; 0x3134 <usb_callback_remotewakeup_disable>
    4360:	54 c1       	rjmp	.+680    	; 0x460a <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4362:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    4366:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    436a:	89 2b       	or	r24, r25
    436c:	09 f0       	breq	.+2      	; 0x4370 <udc_process_setup+0x2c2>
    436e:	f3 c0       	rjmp	.+486    	; 0x4556 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    4370:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_g_ctrlreq+0x2>
    4374:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_g_ctrlreq+0x3>
    4378:	01 97       	sbiw	r24, 0x01	; 1
    437a:	09 f0       	breq	.+2      	; 0x437e <udc_process_setup+0x2d0>
    437c:	b2 c0       	rjmp	.+356    	; 0x44e2 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    437e:	80 91 28 24 	lds	r24, 0x2428	; 0x802428 <udc_device_status>
    4382:	90 91 29 24 	lds	r25, 0x2429	; 0x802429 <udc_device_status+0x1>
    4386:	82 60       	ori	r24, 0x02	; 2
    4388:	80 93 28 24 	sts	0x2428, r24	; 0x802428 <udc_device_status>
    438c:	90 93 29 24 	sts	0x2429, r25	; 0x802429 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    4390:	0e 94 99 18 	call	0x3132	; 0x3132 <usb_callback_remotewakeup_enable>
    4394:	3a c1       	rjmp	.+628    	; 0x460a <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    4396:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    439a:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    439e:	89 2b       	or	r24, r25
    43a0:	09 f0       	breq	.+2      	; 0x43a4 <udc_process_setup+0x2f6>
    43a2:	d9 c0       	rjmp	.+434    	; 0x4556 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    43a4:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <udd_getaddress>
    43a8:	88 23       	and	r24, r24
    43aa:	09 f4       	brne	.+2      	; 0x43ae <udc_process_setup+0x300>
    43ac:	9f c0       	rjmp	.+318    	; 0x44ec <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    43ae:	20 91 33 24 	lds	r18, 0x2433	; 0x802433 <udd_g_ctrlreq+0x2>
    43b2:	30 91 34 24 	lds	r19, 0x2434	; 0x802434 <udd_g_ctrlreq+0x3>
    43b6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    43b8:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    43bc:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    43c0:	81 89       	ldd	r24, Z+17	; 0x11
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	82 17       	cp	r24, r18
    43c6:	93 07       	cpc	r25, r19
    43c8:	08 f4       	brcc	.+2      	; 0x43cc <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    43ca:	90 c0       	rjmp	.+288    	; 0x44ec <udc_process_setup+0x43e>
    43cc:	17 de       	rcall	.-978    	; 0x3ffc <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    43ce:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_g_ctrlreq+0x2>
    43d2:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_g_ctrlreq+0x3>
    43d6:	80 93 24 24 	sts	0x2424, r24	; 0x802424 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    43da:	88 23       	and	r24, r24
    43dc:	09 f4       	brne	.+2      	; 0x43e0 <udc_process_setup+0x332>
    43de:	15 c1       	rjmp	.+554    	; 0x460a <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    43e0:	99 27       	eor	r25, r25
    43e2:	81 50       	subi	r24, 0x01	; 1
    43e4:	90 4c       	sbci	r25, 0xC0	; 192
    43e6:	88 0f       	add	r24, r24
    43e8:	99 1f       	adc	r25, r25
    43ea:	88 0f       	add	r24, r24
    43ec:	99 1f       	adc	r25, r25
    43ee:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    43f2:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    43f6:	e8 0f       	add	r30, r24
    43f8:	f9 1f       	adc	r31, r25
    43fa:	e0 93 22 24 	sts	0x2422, r30	; 0x802422 <udc_ptr_conf>
    43fe:	f0 93 23 24 	sts	0x2423, r31	; 0x802423 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4402:	01 90       	ld	r0, Z+
    4404:	f0 81       	ld	r31, Z
    4406:	e0 2d       	mov	r30, r0
    4408:	84 81       	ldd	r24, Z+4	; 0x04
    440a:	88 23       	and	r24, r24
    440c:	09 f4       	brne	.+2      	; 0x4410 <udc_process_setup+0x362>
    440e:	fd c0       	rjmp	.+506    	; 0x460a <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    4410:	c0 e0       	ldi	r28, 0x00	; 0
    4412:	60 e0       	ldi	r22, 0x00	; 0
    4414:	8c 2f       	mov	r24, r28
    4416:	bc dd       	rcall	.-1160   	; 0x3f90 <udc_iface_enable>
    4418:	88 23       	and	r24, r24
    441a:	09 f4       	brne	.+2      	; 0x441e <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    441c:	67 c0       	rjmp	.+206    	; 0x44ec <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    441e:	cf 5f       	subi	r28, 0xFF	; 255
    4420:	e0 91 22 24 	lds	r30, 0x2422	; 0x802422 <udc_ptr_conf>
    4424:	f0 91 23 24 	lds	r31, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    4428:	01 90       	ld	r0, Z+
    442a:	f0 81       	ld	r31, Z
    442c:	e0 2d       	mov	r30, r0
    442e:	84 81       	ldd	r24, Z+4	; 0x04
    4430:	c8 17       	cp	r28, r24
    4432:	78 f3       	brcs	.-34     	; 0x4412 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4434:	ea c0       	rjmp	.+468    	; 0x460a <udc_process_setup+0x55c>
    4436:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4438:	e9 f4       	brne	.+58     	; 0x4474 <udc_process_setup+0x3c6>
    443a:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <udd_g_ctrlreq+0x1>
    443e:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    4440:	c9 f4       	brne	.+50     	; 0x4474 <udc_process_setup+0x3c6>
    4442:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    4446:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    444a:	89 2b       	or	r24, r25
    444c:	09 f0       	breq	.+2      	; 0x4450 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    444e:	53 c0       	rjmp	.+166    	; 0x44f6 <udc_process_setup+0x448>
    4450:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <udc_num_configuration>
    4454:	88 23       	and	r24, r24
    4456:	09 f4       	brne	.+2      	; 0x445a <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4458:	4e c0       	rjmp	.+156    	; 0x44f6 <udc_process_setup+0x448>
    445a:	e1 e3       	ldi	r30, 0x31	; 49
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    445c:	f4 e2       	ldi	r31, 0x24	; 36

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    445e:	c4 81       	ldd	r28, Z+4	; 0x04
    4460:	d2 81       	ldd	r29, Z+2	; 0x02
    4462:	8c 2f       	mov	r24, r28
    4464:	53 dd       	rcall	.-1370   	; 0x3f0c <udc_iface_disable>
    4466:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    4468:	09 f4       	brne	.+2      	; 0x446c <udc_process_setup+0x3be>
    446a:	40 c0       	rjmp	.+128    	; 0x44ec <udc_process_setup+0x43e>
    446c:	6d 2f       	mov	r22, r29
    446e:	8c 2f       	mov	r24, r28
    4470:	8f dd       	rcall	.-1250   	; 0x3f90 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4472:	3a c0       	rjmp	.+116    	; 0x44e8 <udc_process_setup+0x43a>
    4474:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4476:	d1 f5       	brne	.+116    	; 0x44ec <udc_process_setup+0x43e>
    4478:	80 91 32 24 	lds	r24, 0x2432	; 0x802432 <udd_g_ctrlreq+0x1>
    447c:	81 30       	cpi	r24, 0x01	; 1
    447e:	19 f0       	breq	.+6      	; 0x4486 <udc_process_setup+0x3d8>
    4480:	83 30       	cpi	r24, 0x03	; 3
    4482:	a1 f0       	breq	.+40     	; 0x44ac <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4484:	30 c0       	rjmp	.+96     	; 0x44e6 <udc_process_setup+0x438>
    4486:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    448a:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    448e:	89 2b       	or	r24, r25
    4490:	09 f0       	breq	.+2      	; 0x4494 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4492:	61 c0       	rjmp	.+194    	; 0x4556 <udc_process_setup+0x4a8>
    4494:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_g_ctrlreq+0x2>
    4498:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_g_ctrlreq+0x3>
    449c:	89 2b       	or	r24, r25
    449e:	09 f0       	breq	.+2      	; 0x44a2 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    44a0:	5a c0       	rjmp	.+180    	; 0x4556 <udc_process_setup+0x4a8>
    44a2:	80 91 35 24 	lds	r24, 0x2435	; 0x802435 <udd_g_ctrlreq+0x4>
    44a6:	0e 94 99 13 	call	0x2732	; 0x2732 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    44aa:	1e c0       	rjmp	.+60     	; 0x44e8 <udc_process_setup+0x43a>
    44ac:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <udd_g_ctrlreq+0x6>
    44b0:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <udd_g_ctrlreq+0x7>
    44b4:	89 2b       	or	r24, r25
    44b6:	09 f0       	breq	.+2      	; 0x44ba <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    44b8:	4e c0       	rjmp	.+156    	; 0x4556 <udc_process_setup+0x4a8>
    44ba:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_g_ctrlreq+0x2>
    44be:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_g_ctrlreq+0x3>
    44c2:	89 2b       	or	r24, r25
    44c4:	09 f0       	breq	.+2      	; 0x44c8 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    44c6:	47 c0       	rjmp	.+142    	; 0x4556 <udc_process_setup+0x4a8>
    44c8:	c1 e3       	ldi	r28, 0x31	; 49
    44ca:	d4 e2       	ldi	r29, 0x24	; 36
    44cc:	8c 81       	ldd	r24, Y+4	; 0x04
    44ce:	0e 94 9b 14 	call	0x2936	; 0x2936 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    44d2:	8c 81       	ldd	r24, Y+4	; 0x04
    44d4:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    44d8:	07 c0       	rjmp	.+14     	; 0x44e8 <udc_process_setup+0x43a>
    44da:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    44dc:	05 c0       	rjmp	.+10     	; 0x44e8 <udc_process_setup+0x43a>
    44de:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    44e0:	03 c0       	rjmp	.+6      	; 0x44e8 <udc_process_setup+0x43a>
    44e2:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    44e4:	01 c0       	rjmp	.+2      	; 0x44e8 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    44ea:	90 c0       	rjmp	.+288    	; 0x460c <udc_process_setup+0x55e>
    44ec:	80 91 31 24 	lds	r24, 0x2431	; 0x802431 <udd_g_ctrlreq>
    44f0:	8f 71       	andi	r24, 0x1F	; 31
    44f2:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    44f4:	81 f5       	brne	.+96     	; 0x4556 <udc_process_setup+0x4a8>
    44f6:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <udc_num_configuration>
    44fa:	88 23       	and	r24, r24
    44fc:	09 f4       	brne	.+2      	; 0x4500 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    44fe:	71 c0       	rjmp	.+226    	; 0x45e2 <udc_process_setup+0x534>
    4500:	00 91 35 24 	lds	r16, 0x2435	; 0x802435 <udd_g_ctrlreq+0x4>
    4504:	10 91 36 24 	lds	r17, 0x2436	; 0x802436 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4508:	c0 91 22 24 	lds	r28, 0x2422	; 0x802422 <udc_ptr_conf>
    450c:	d0 91 23 24 	lds	r29, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    4510:	e8 81       	ld	r30, Y
    4512:	f9 81       	ldd	r31, Y+1	; 0x01
    4514:	84 81       	ldd	r24, Z+4	; 0x04
    4516:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4518:	08 f0       	brcs	.+2      	; 0x451c <udc_process_setup+0x46e>
    451a:	65 c0       	rjmp	.+202    	; 0x45e6 <udc_process_setup+0x538>
    451c:	60 e0       	ldi	r22, 0x00	; 0
    451e:	80 2f       	mov	r24, r16
    4520:	bb dc       	rcall	.-1674   	; 0x3e98 <udc_update_iface_desc>
    4522:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4524:	c1 f0       	breq	.+48     	; 0x4556 <udc_process_setup+0x4a8>
    4526:	f8 01       	movw	r30, r16
    4528:	ff 27       	eor	r31, r31
    452a:	cf 01       	movw	r24, r30
    452c:	88 0f       	add	r24, r24
    452e:	99 1f       	adc	r25, r25
    4530:	ea 81       	ldd	r30, Y+2	; 0x02
    4532:	fb 81       	ldd	r31, Y+3	; 0x03
    4534:	e8 0f       	add	r30, r24
    4536:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4538:	c0 81       	ld	r28, Z
    453a:	d1 81       	ldd	r29, Z+1	; 0x01
    453c:	ee 81       	ldd	r30, Y+6	; 0x06
    453e:	ff 81       	ldd	r31, Y+7	; 0x07
    4540:	19 95       	eicall
    4542:	68 2f       	mov	r22, r24
    4544:	80 2f       	mov	r24, r16
    4546:	a8 dc       	rcall	.-1712   	; 0x3e98 <udc_update_iface_desc>
    4548:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    454a:	29 f0       	breq	.+10     	; 0x4556 <udc_process_setup+0x4a8>
    454c:	ec 81       	ldd	r30, Y+4	; 0x04
    454e:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    4550:	19 95       	eicall
    4552:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    4554:	5b c0       	rjmp	.+182    	; 0x460c <udc_process_setup+0x55e>
    4556:	80 91 31 24 	lds	r24, 0x2431	; 0x802431 <udd_g_ctrlreq>
    455a:	8f 71       	andi	r24, 0x1F	; 31
    455c:	82 30       	cpi	r24, 0x02	; 2
    455e:	09 f0       	breq	.+2      	; 0x4562 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4560:	44 c0       	rjmp	.+136    	; 0x45ea <udc_process_setup+0x53c>
    4562:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <udc_num_configuration>
    4566:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4568:	b1 f1       	breq	.+108    	; 0x45d6 <udc_process_setup+0x528>
    456a:	a0 91 22 24 	lds	r26, 0x2422	; 0x802422 <udc_ptr_conf>
    456e:	b0 91 23 24 	lds	r27, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    4572:	ed 91       	ld	r30, X+
    4574:	fc 91       	ld	r31, X
    4576:	11 97       	sbiw	r26, 0x01	; 1
    4578:	84 81       	ldd	r24, Z+4	; 0x04
    457a:	88 23       	and	r24, r24
    457c:	71 f1       	breq	.+92     	; 0x45da <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    457e:	c0 e0       	ldi	r28, 0x00	; 0
    4580:	ec 2f       	mov	r30, r28
    4582:	f0 e0       	ldi	r31, 0x00	; 0
    4584:	ee 0f       	add	r30, r30
    4586:	ff 1f       	adc	r31, r31
    4588:	12 96       	adiw	r26, 0x02	; 2
    458a:	8d 91       	ld	r24, X+
    458c:	9c 91       	ld	r25, X
    458e:	13 97       	sbiw	r26, 0x03	; 3
    4590:	e8 0f       	add	r30, r24
    4592:	f9 1f       	adc	r31, r25
    4594:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4596:	11 81       	ldd	r17, Z+1	; 0x01
    4598:	d8 01       	movw	r26, r16
    459a:	16 96       	adiw	r26, 0x06	; 6
    459c:	ed 91       	ld	r30, X+
    459e:	fc 91       	ld	r31, X
    45a0:	17 97       	sbiw	r26, 0x07	; 7
    45a2:	19 95       	eicall
    45a4:	68 2f       	mov	r22, r24
    45a6:	8c 2f       	mov	r24, r28
    45a8:	77 dc       	rcall	.-1810   	; 0x3e98 <udc_update_iface_desc>
    45aa:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    45ac:	79 f1       	breq	.+94     	; 0x460c <udc_process_setup+0x55e>
    45ae:	d8 01       	movw	r26, r16
    45b0:	14 96       	adiw	r26, 0x04	; 4
    45b2:	ed 91       	ld	r30, X+
    45b4:	fc 91       	ld	r31, X
    45b6:	15 97       	sbiw	r26, 0x05	; 5
    45b8:	19 95       	eicall
    45ba:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    45bc:	27 c0       	rjmp	.+78     	; 0x460c <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    45be:	cf 5f       	subi	r28, 0xFF	; 255
    45c0:	a0 91 22 24 	lds	r26, 0x2422	; 0x802422 <udc_ptr_conf>
    45c4:	b0 91 23 24 	lds	r27, 0x2423	; 0x802423 <udc_ptr_conf+0x1>
    45c8:	ed 91       	ld	r30, X+
    45ca:	fc 91       	ld	r31, X
    45cc:	11 97       	sbiw	r26, 0x01	; 1
    45ce:	94 81       	ldd	r25, Z+4	; 0x04
    45d0:	c9 17       	cp	r28, r25
    45d2:	b0 f2       	brcs	.-84     	; 0x4580 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    45d4:	1b c0       	rjmp	.+54     	; 0x460c <udc_process_setup+0x55e>
    45d6:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    45d8:	19 c0       	rjmp	.+50     	; 0x460c <udc_process_setup+0x55e>
    45da:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    45dc:	17 c0       	rjmp	.+46     	; 0x460c <udc_process_setup+0x55e>
    45de:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    45e0:	15 c0       	rjmp	.+42     	; 0x460c <udc_process_setup+0x55e>
    45e2:	80 e0       	ldi	r24, 0x00	; 0
    45e4:	13 c0       	rjmp	.+38     	; 0x460c <udc_process_setup+0x55e>
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	11 c0       	rjmp	.+34     	; 0x460c <udc_process_setup+0x55e>
    45ea:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    45ec:	0f c0       	rjmp	.+30     	; 0x460c <udc_process_setup+0x55e>
    45ee:	98 2f       	mov	r25, r24
    45f0:	90 76       	andi	r25, 0x60	; 96
    45f2:	09 f0       	breq	.+2      	; 0x45f6 <udc_process_setup+0x548>
    45f4:	7b cf       	rjmp	.-266    	; 0x44ec <udc_process_setup+0x43e>
    45f6:	74 cd       	rjmp	.-1304   	; 0x40e0 <udc_process_setup+0x32>
    45f8:	98 2f       	mov	r25, r24
    45fa:	90 76       	andi	r25, 0x60	; 96
    45fc:	09 f0       	breq	.+2      	; 0x4600 <udc_process_setup+0x552>
    45fe:	76 cf       	rjmp	.-276    	; 0x44ec <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    4600:	77 ce       	rjmp	.-786    	; 0x42f0 <udc_process_setup+0x242>
		str = udc_string_product_name;
    4602:	3c e0       	ldi	r19, 0x0C	; 12
    4604:	e4 ec       	ldi	r30, 0xC4	; 196
    4606:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    4608:	eb cd       	rjmp	.-1066   	; 0x41e0 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    460a:	81 e0       	ldi	r24, 0x01	; 1
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	1f 91       	pop	r17
    4612:	0f 91       	pop	r16
    4614:	08 95       	ret

00004616 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    4616:	cf 93       	push	r28
    4618:	df 93       	push	r29
    461a:	1f 92       	push	r1
    461c:	cd b7       	in	r28, 0x3d	; 61
    461e:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    4620:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <stdio_base>
    4624:	90 91 4c 24 	lds	r25, 0x244C	; 0x80244c <stdio_base+0x1>
    4628:	e0 91 47 24 	lds	r30, 0x2447	; 0x802447 <ptr_get>
    462c:	f0 91 48 24 	lds	r31, 0x2448	; 0x802448 <ptr_get+0x1>
    4630:	be 01       	movw	r22, r28
    4632:	6f 5f       	subi	r22, 0xFF	; 255
    4634:	7f 4f       	sbci	r23, 0xFF	; 255
    4636:	19 95       	eicall
	return c;
    4638:	89 81       	ldd	r24, Y+1	; 0x01
}
    463a:	08 2e       	mov	r0, r24
    463c:	00 0c       	add	r0, r0
    463e:	99 0b       	sbc	r25, r25
    4640:	0f 90       	pop	r0
    4642:	df 91       	pop	r29
    4644:	cf 91       	pop	r28
    4646:	08 95       	ret

00004648 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    4648:	80 91 2a 24 	lds	r24, 0x242A	; 0x80242a <stdio_usb_interface_enable>
    464c:	88 23       	and	r24, r24
    464e:	81 f0       	breq	.+32     	; 0x4670 <stdio_usb_putchar+0x28>
    4650:	86 2f       	mov	r24, r22
    4652:	08 2e       	mov	r0, r24
    4654:	00 0c       	add	r0, r0
    4656:	99 0b       	sbc	r25, r25
    4658:	e0 db       	rcall	.-2112   	; 0x3e1a <udi_cdc_putc>
    465a:	21 e0       	ldi	r18, 0x01	; 1
    465c:	30 e0       	ldi	r19, 0x00	; 0
    465e:	89 2b       	or	r24, r25
    4660:	11 f0       	breq	.+4      	; 0x4666 <stdio_usb_putchar+0x1e>
    4662:	20 e0       	ldi	r18, 0x00	; 0
    4664:	30 e0       	ldi	r19, 0x00	; 0
    4666:	88 27       	eor	r24, r24
    4668:	99 27       	eor	r25, r25
    466a:	82 1b       	sub	r24, r18
    466c:	93 0b       	sbc	r25, r19
    466e:	08 95       	ret
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	08 95       	ret

00004676 <stdio_usb_getchar>:
    4676:	cf 93       	push	r28
    4678:	df 93       	push	r29
    467a:	80 91 2a 24 	lds	r24, 0x242A	; 0x80242a <stdio_usb_interface_enable>
    467e:	81 11       	cpse	r24, r1
    4680:	03 c0       	rjmp	.+6      	; 0x4688 <stdio_usb_getchar+0x12>
    4682:	fb 01       	movw	r30, r22
    4684:	10 82       	st	Z, r1
    4686:	03 c0       	rjmp	.+6      	; 0x468e <stdio_usb_getchar+0x18>
    4688:	eb 01       	movw	r28, r22
    468a:	3f db       	rcall	.-2434   	; 0x3d0a <udi_cdc_getc>
    468c:	88 83       	st	Y, r24
    468e:	df 91       	pop	r29
    4690:	cf 91       	pop	r28
    4692:	08 95       	ret

00004694 <stdio_usb_enable>:
    4694:	81 e0       	ldi	r24, 0x01	; 1
    4696:	80 93 2a 24 	sts	0x242A, r24	; 0x80242a <stdio_usb_interface_enable>
    469a:	08 95       	ret

0000469c <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    469c:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <stdio_base>
    46a0:	10 92 4c 24 	sts	0x244C, r1	; 0x80244c <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    46a4:	84 e2       	ldi	r24, 0x24	; 36
    46a6:	93 e2       	ldi	r25, 0x23	; 35
    46a8:	80 93 49 24 	sts	0x2449, r24	; 0x802449 <ptr_put>
    46ac:	90 93 4a 24 	sts	0x244A, r25	; 0x80244a <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    46b0:	8b e3       	ldi	r24, 0x3B	; 59
    46b2:	93 e2       	ldi	r25, 0x23	; 35
    46b4:	80 93 47 24 	sts	0x2447, r24	; 0x802447 <ptr_get>
    46b8:	90 93 48 24 	sts	0x2448, r25	; 0x802448 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    46bc:	9c dc       	rcall	.-1736   	; 0x3ff6 <udc_start>
    46be:	6b e0       	ldi	r22, 0x0B	; 11
    46c0:	73 e2       	ldi	r23, 0x23	; 35
    46c2:	85 e6       	ldi	r24, 0x65	; 101
    46c4:	93 e2       	ldi	r25, 0x23	; 35
    46c6:	63 c2       	rjmp	.+1222   	; 0x4b8e <fdevopen>
    46c8:	08 95       	ret

000046ca <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    46ca:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    46cc:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <stdio_base>
    46d0:	90 91 4c 24 	lds	r25, 0x244C	; 0x80244c <stdio_base+0x1>
    46d4:	e0 91 49 24 	lds	r30, 0x2449	; 0x802449 <ptr_put>
    46d8:	f0 91 4a 24 	lds	r31, 0x244A	; 0x80244a <ptr_put+0x1>
    46dc:	19 95       	eicall
    46de:	99 23       	and	r25, r25
    46e0:	1c f0       	brlt	.+6      	; 0x46e8 <_write+0x1e>
		return -1;
	}
	return 1;
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    46e8:	8f ef       	ldi	r24, 0xFF	; 255
    46ea:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    46ec:	08 95       	ret

000046ee <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    46ee:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    46f2:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    46f4:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    46f6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    46fa:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    46fc:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    4700:	08 95       	ret

00004702 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    4702:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    4704:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    4706:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    4708:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    470a:	60 83       	st	Z, r22
	ret                             // Return to caller
    470c:	08 95       	ret

0000470e <__udivmodhi4>:
    470e:	aa 1b       	sub	r26, r26
    4710:	bb 1b       	sub	r27, r27
    4712:	51 e1       	ldi	r21, 0x11	; 17
    4714:	07 c0       	rjmp	.+14     	; 0x4724 <__udivmodhi4_ep>

00004716 <__udivmodhi4_loop>:
    4716:	aa 1f       	adc	r26, r26
    4718:	bb 1f       	adc	r27, r27
    471a:	a6 17       	cp	r26, r22
    471c:	b7 07       	cpc	r27, r23
    471e:	10 f0       	brcs	.+4      	; 0x4724 <__udivmodhi4_ep>
    4720:	a6 1b       	sub	r26, r22
    4722:	b7 0b       	sbc	r27, r23

00004724 <__udivmodhi4_ep>:
    4724:	88 1f       	adc	r24, r24
    4726:	99 1f       	adc	r25, r25
    4728:	5a 95       	dec	r21
    472a:	a9 f7       	brne	.-22     	; 0x4716 <__udivmodhi4_loop>
    472c:	80 95       	com	r24
    472e:	90 95       	com	r25
    4730:	bc 01       	movw	r22, r24
    4732:	cd 01       	movw	r24, r26
    4734:	08 95       	ret

00004736 <__udivmodsi4>:
    4736:	a1 e2       	ldi	r26, 0x21	; 33
    4738:	1a 2e       	mov	r1, r26
    473a:	aa 1b       	sub	r26, r26
    473c:	bb 1b       	sub	r27, r27
    473e:	fd 01       	movw	r30, r26
    4740:	0d c0       	rjmp	.+26     	; 0x475c <__udivmodsi4_ep>

00004742 <__udivmodsi4_loop>:
    4742:	aa 1f       	adc	r26, r26
    4744:	bb 1f       	adc	r27, r27
    4746:	ee 1f       	adc	r30, r30
    4748:	ff 1f       	adc	r31, r31
    474a:	a2 17       	cp	r26, r18
    474c:	b3 07       	cpc	r27, r19
    474e:	e4 07       	cpc	r30, r20
    4750:	f5 07       	cpc	r31, r21
    4752:	20 f0       	brcs	.+8      	; 0x475c <__udivmodsi4_ep>
    4754:	a2 1b       	sub	r26, r18
    4756:	b3 0b       	sbc	r27, r19
    4758:	e4 0b       	sbc	r30, r20
    475a:	f5 0b       	sbc	r31, r21

0000475c <__udivmodsi4_ep>:
    475c:	66 1f       	adc	r22, r22
    475e:	77 1f       	adc	r23, r23
    4760:	88 1f       	adc	r24, r24
    4762:	99 1f       	adc	r25, r25
    4764:	1a 94       	dec	r1
    4766:	69 f7       	brne	.-38     	; 0x4742 <__udivmodsi4_loop>
    4768:	60 95       	com	r22
    476a:	70 95       	com	r23
    476c:	80 95       	com	r24
    476e:	90 95       	com	r25
    4770:	9b 01       	movw	r18, r22
    4772:	ac 01       	movw	r20, r24
    4774:	bd 01       	movw	r22, r26
    4776:	cf 01       	movw	r24, r30
    4778:	08 95       	ret

0000477a <__tablejump2__>:
    477a:	ee 0f       	add	r30, r30
    477c:	ff 1f       	adc	r31, r31
    477e:	88 1f       	adc	r24, r24
    4780:	8b bf       	out	0x3b, r24	; 59
    4782:	07 90       	elpm	r0, Z+
    4784:	f6 91       	elpm	r31, Z
    4786:	e0 2d       	mov	r30, r0
    4788:	19 94       	eijmp

0000478a <__umulhisi3>:
    478a:	a2 9f       	mul	r26, r18
    478c:	b0 01       	movw	r22, r0
    478e:	b3 9f       	mul	r27, r19
    4790:	c0 01       	movw	r24, r0
    4792:	a3 9f       	mul	r26, r19
    4794:	70 0d       	add	r23, r0
    4796:	81 1d       	adc	r24, r1
    4798:	11 24       	eor	r1, r1
    479a:	91 1d       	adc	r25, r1
    479c:	b2 9f       	mul	r27, r18
    479e:	70 0d       	add	r23, r0
    47a0:	81 1d       	adc	r24, r1
    47a2:	11 24       	eor	r1, r1
    47a4:	91 1d       	adc	r25, r1
    47a6:	08 95       	ret

000047a8 <__subsf3>:
    47a8:	50 58       	subi	r21, 0x80	; 128

000047aa <__addsf3>:
    47aa:	bb 27       	eor	r27, r27
    47ac:	aa 27       	eor	r26, r26
    47ae:	0e d0       	rcall	.+28     	; 0x47cc <__addsf3x>
    47b0:	48 c1       	rjmp	.+656    	; 0x4a42 <__fp_round>
    47b2:	39 d1       	rcall	.+626    	; 0x4a26 <__fp_pscA>
    47b4:	30 f0       	brcs	.+12     	; 0x47c2 <__addsf3+0x18>
    47b6:	3e d1       	rcall	.+636    	; 0x4a34 <__fp_pscB>
    47b8:	20 f0       	brcs	.+8      	; 0x47c2 <__addsf3+0x18>
    47ba:	31 f4       	brne	.+12     	; 0x47c8 <__addsf3+0x1e>
    47bc:	9f 3f       	cpi	r25, 0xFF	; 255
    47be:	11 f4       	brne	.+4      	; 0x47c4 <__addsf3+0x1a>
    47c0:	1e f4       	brtc	.+6      	; 0x47c8 <__addsf3+0x1e>
    47c2:	2e c1       	rjmp	.+604    	; 0x4a20 <__fp_nan>
    47c4:	0e f4       	brtc	.+2      	; 0x47c8 <__addsf3+0x1e>
    47c6:	e0 95       	com	r30
    47c8:	e7 fb       	bst	r30, 7
    47ca:	24 c1       	rjmp	.+584    	; 0x4a14 <__fp_inf>

000047cc <__addsf3x>:
    47cc:	e9 2f       	mov	r30, r25
    47ce:	4a d1       	rcall	.+660    	; 0x4a64 <__fp_split3>
    47d0:	80 f3       	brcs	.-32     	; 0x47b2 <__addsf3+0x8>
    47d2:	ba 17       	cp	r27, r26
    47d4:	62 07       	cpc	r22, r18
    47d6:	73 07       	cpc	r23, r19
    47d8:	84 07       	cpc	r24, r20
    47da:	95 07       	cpc	r25, r21
    47dc:	18 f0       	brcs	.+6      	; 0x47e4 <__addsf3x+0x18>
    47de:	71 f4       	brne	.+28     	; 0x47fc <__addsf3x+0x30>
    47e0:	9e f5       	brtc	.+102    	; 0x4848 <__addsf3x+0x7c>
    47e2:	62 c1       	rjmp	.+708    	; 0x4aa8 <__fp_zero>
    47e4:	0e f4       	brtc	.+2      	; 0x47e8 <__addsf3x+0x1c>
    47e6:	e0 95       	com	r30
    47e8:	0b 2e       	mov	r0, r27
    47ea:	ba 2f       	mov	r27, r26
    47ec:	a0 2d       	mov	r26, r0
    47ee:	0b 01       	movw	r0, r22
    47f0:	b9 01       	movw	r22, r18
    47f2:	90 01       	movw	r18, r0
    47f4:	0c 01       	movw	r0, r24
    47f6:	ca 01       	movw	r24, r20
    47f8:	a0 01       	movw	r20, r0
    47fa:	11 24       	eor	r1, r1
    47fc:	ff 27       	eor	r31, r31
    47fe:	59 1b       	sub	r21, r25
    4800:	99 f0       	breq	.+38     	; 0x4828 <__addsf3x+0x5c>
    4802:	59 3f       	cpi	r21, 0xF9	; 249
    4804:	50 f4       	brcc	.+20     	; 0x481a <__addsf3x+0x4e>
    4806:	50 3e       	cpi	r21, 0xE0	; 224
    4808:	68 f1       	brcs	.+90     	; 0x4864 <__addsf3x+0x98>
    480a:	1a 16       	cp	r1, r26
    480c:	f0 40       	sbci	r31, 0x00	; 0
    480e:	a2 2f       	mov	r26, r18
    4810:	23 2f       	mov	r18, r19
    4812:	34 2f       	mov	r19, r20
    4814:	44 27       	eor	r20, r20
    4816:	58 5f       	subi	r21, 0xF8	; 248
    4818:	f3 cf       	rjmp	.-26     	; 0x4800 <__addsf3x+0x34>
    481a:	46 95       	lsr	r20
    481c:	37 95       	ror	r19
    481e:	27 95       	ror	r18
    4820:	a7 95       	ror	r26
    4822:	f0 40       	sbci	r31, 0x00	; 0
    4824:	53 95       	inc	r21
    4826:	c9 f7       	brne	.-14     	; 0x481a <__addsf3x+0x4e>
    4828:	7e f4       	brtc	.+30     	; 0x4848 <__addsf3x+0x7c>
    482a:	1f 16       	cp	r1, r31
    482c:	ba 0b       	sbc	r27, r26
    482e:	62 0b       	sbc	r22, r18
    4830:	73 0b       	sbc	r23, r19
    4832:	84 0b       	sbc	r24, r20
    4834:	ba f0       	brmi	.+46     	; 0x4864 <__addsf3x+0x98>
    4836:	91 50       	subi	r25, 0x01	; 1
    4838:	a1 f0       	breq	.+40     	; 0x4862 <__addsf3x+0x96>
    483a:	ff 0f       	add	r31, r31
    483c:	bb 1f       	adc	r27, r27
    483e:	66 1f       	adc	r22, r22
    4840:	77 1f       	adc	r23, r23
    4842:	88 1f       	adc	r24, r24
    4844:	c2 f7       	brpl	.-16     	; 0x4836 <__addsf3x+0x6a>
    4846:	0e c0       	rjmp	.+28     	; 0x4864 <__addsf3x+0x98>
    4848:	ba 0f       	add	r27, r26
    484a:	62 1f       	adc	r22, r18
    484c:	73 1f       	adc	r23, r19
    484e:	84 1f       	adc	r24, r20
    4850:	48 f4       	brcc	.+18     	; 0x4864 <__addsf3x+0x98>
    4852:	87 95       	ror	r24
    4854:	77 95       	ror	r23
    4856:	67 95       	ror	r22
    4858:	b7 95       	ror	r27
    485a:	f7 95       	ror	r31
    485c:	9e 3f       	cpi	r25, 0xFE	; 254
    485e:	08 f0       	brcs	.+2      	; 0x4862 <__addsf3x+0x96>
    4860:	b3 cf       	rjmp	.-154    	; 0x47c8 <__addsf3+0x1e>
    4862:	93 95       	inc	r25
    4864:	88 0f       	add	r24, r24
    4866:	08 f0       	brcs	.+2      	; 0x486a <__addsf3x+0x9e>
    4868:	99 27       	eor	r25, r25
    486a:	ee 0f       	add	r30, r30
    486c:	97 95       	ror	r25
    486e:	87 95       	ror	r24
    4870:	08 95       	ret

00004872 <__divsf3>:
    4872:	0c d0       	rcall	.+24     	; 0x488c <__divsf3x>
    4874:	e6 c0       	rjmp	.+460    	; 0x4a42 <__fp_round>
    4876:	de d0       	rcall	.+444    	; 0x4a34 <__fp_pscB>
    4878:	40 f0       	brcs	.+16     	; 0x488a <__divsf3+0x18>
    487a:	d5 d0       	rcall	.+426    	; 0x4a26 <__fp_pscA>
    487c:	30 f0       	brcs	.+12     	; 0x488a <__divsf3+0x18>
    487e:	21 f4       	brne	.+8      	; 0x4888 <__divsf3+0x16>
    4880:	5f 3f       	cpi	r21, 0xFF	; 255
    4882:	19 f0       	breq	.+6      	; 0x488a <__divsf3+0x18>
    4884:	c7 c0       	rjmp	.+398    	; 0x4a14 <__fp_inf>
    4886:	51 11       	cpse	r21, r1
    4888:	10 c1       	rjmp	.+544    	; 0x4aaa <__fp_szero>
    488a:	ca c0       	rjmp	.+404    	; 0x4a20 <__fp_nan>

0000488c <__divsf3x>:
    488c:	eb d0       	rcall	.+470    	; 0x4a64 <__fp_split3>
    488e:	98 f3       	brcs	.-26     	; 0x4876 <__divsf3+0x4>

00004890 <__divsf3_pse>:
    4890:	99 23       	and	r25, r25
    4892:	c9 f3       	breq	.-14     	; 0x4886 <__divsf3+0x14>
    4894:	55 23       	and	r21, r21
    4896:	b1 f3       	breq	.-20     	; 0x4884 <__divsf3+0x12>
    4898:	95 1b       	sub	r25, r21
    489a:	55 0b       	sbc	r21, r21
    489c:	bb 27       	eor	r27, r27
    489e:	aa 27       	eor	r26, r26
    48a0:	62 17       	cp	r22, r18
    48a2:	73 07       	cpc	r23, r19
    48a4:	84 07       	cpc	r24, r20
    48a6:	38 f0       	brcs	.+14     	; 0x48b6 <__divsf3_pse+0x26>
    48a8:	9f 5f       	subi	r25, 0xFF	; 255
    48aa:	5f 4f       	sbci	r21, 0xFF	; 255
    48ac:	22 0f       	add	r18, r18
    48ae:	33 1f       	adc	r19, r19
    48b0:	44 1f       	adc	r20, r20
    48b2:	aa 1f       	adc	r26, r26
    48b4:	a9 f3       	breq	.-22     	; 0x48a0 <__divsf3_pse+0x10>
    48b6:	33 d0       	rcall	.+102    	; 0x491e <__divsf3_pse+0x8e>
    48b8:	0e 2e       	mov	r0, r30
    48ba:	3a f0       	brmi	.+14     	; 0x48ca <__divsf3_pse+0x3a>
    48bc:	e0 e8       	ldi	r30, 0x80	; 128
    48be:	30 d0       	rcall	.+96     	; 0x4920 <__divsf3_pse+0x90>
    48c0:	91 50       	subi	r25, 0x01	; 1
    48c2:	50 40       	sbci	r21, 0x00	; 0
    48c4:	e6 95       	lsr	r30
    48c6:	00 1c       	adc	r0, r0
    48c8:	ca f7       	brpl	.-14     	; 0x48bc <__divsf3_pse+0x2c>
    48ca:	29 d0       	rcall	.+82     	; 0x491e <__divsf3_pse+0x8e>
    48cc:	fe 2f       	mov	r31, r30
    48ce:	27 d0       	rcall	.+78     	; 0x491e <__divsf3_pse+0x8e>
    48d0:	66 0f       	add	r22, r22
    48d2:	77 1f       	adc	r23, r23
    48d4:	88 1f       	adc	r24, r24
    48d6:	bb 1f       	adc	r27, r27
    48d8:	26 17       	cp	r18, r22
    48da:	37 07       	cpc	r19, r23
    48dc:	48 07       	cpc	r20, r24
    48de:	ab 07       	cpc	r26, r27
    48e0:	b0 e8       	ldi	r27, 0x80	; 128
    48e2:	09 f0       	breq	.+2      	; 0x48e6 <__divsf3_pse+0x56>
    48e4:	bb 0b       	sbc	r27, r27
    48e6:	80 2d       	mov	r24, r0
    48e8:	bf 01       	movw	r22, r30
    48ea:	ff 27       	eor	r31, r31
    48ec:	93 58       	subi	r25, 0x83	; 131
    48ee:	5f 4f       	sbci	r21, 0xFF	; 255
    48f0:	2a f0       	brmi	.+10     	; 0x48fc <__divsf3_pse+0x6c>
    48f2:	9e 3f       	cpi	r25, 0xFE	; 254
    48f4:	51 05       	cpc	r21, r1
    48f6:	68 f0       	brcs	.+26     	; 0x4912 <__divsf3_pse+0x82>
    48f8:	8d c0       	rjmp	.+282    	; 0x4a14 <__fp_inf>
    48fa:	d7 c0       	rjmp	.+430    	; 0x4aaa <__fp_szero>
    48fc:	5f 3f       	cpi	r21, 0xFF	; 255
    48fe:	ec f3       	brlt	.-6      	; 0x48fa <__divsf3_pse+0x6a>
    4900:	98 3e       	cpi	r25, 0xE8	; 232
    4902:	dc f3       	brlt	.-10     	; 0x48fa <__divsf3_pse+0x6a>
    4904:	86 95       	lsr	r24
    4906:	77 95       	ror	r23
    4908:	67 95       	ror	r22
    490a:	b7 95       	ror	r27
    490c:	f7 95       	ror	r31
    490e:	9f 5f       	subi	r25, 0xFF	; 255
    4910:	c9 f7       	brne	.-14     	; 0x4904 <__divsf3_pse+0x74>
    4912:	88 0f       	add	r24, r24
    4914:	91 1d       	adc	r25, r1
    4916:	96 95       	lsr	r25
    4918:	87 95       	ror	r24
    491a:	97 f9       	bld	r25, 7
    491c:	08 95       	ret
    491e:	e1 e0       	ldi	r30, 0x01	; 1
    4920:	66 0f       	add	r22, r22
    4922:	77 1f       	adc	r23, r23
    4924:	88 1f       	adc	r24, r24
    4926:	bb 1f       	adc	r27, r27
    4928:	62 17       	cp	r22, r18
    492a:	73 07       	cpc	r23, r19
    492c:	84 07       	cpc	r24, r20
    492e:	ba 07       	cpc	r27, r26
    4930:	20 f0       	brcs	.+8      	; 0x493a <__divsf3_pse+0xaa>
    4932:	62 1b       	sub	r22, r18
    4934:	73 0b       	sbc	r23, r19
    4936:	84 0b       	sbc	r24, r20
    4938:	ba 0b       	sbc	r27, r26
    493a:	ee 1f       	adc	r30, r30
    493c:	88 f7       	brcc	.-30     	; 0x4920 <__divsf3_pse+0x90>
    493e:	e0 95       	com	r30
    4940:	08 95       	ret

00004942 <__fixunssfsi>:
    4942:	98 d0       	rcall	.+304    	; 0x4a74 <__fp_splitA>
    4944:	88 f0       	brcs	.+34     	; 0x4968 <__fixunssfsi+0x26>
    4946:	9f 57       	subi	r25, 0x7F	; 127
    4948:	90 f0       	brcs	.+36     	; 0x496e <__fixunssfsi+0x2c>
    494a:	b9 2f       	mov	r27, r25
    494c:	99 27       	eor	r25, r25
    494e:	b7 51       	subi	r27, 0x17	; 23
    4950:	a0 f0       	brcs	.+40     	; 0x497a <__fixunssfsi+0x38>
    4952:	d1 f0       	breq	.+52     	; 0x4988 <__fixunssfsi+0x46>
    4954:	66 0f       	add	r22, r22
    4956:	77 1f       	adc	r23, r23
    4958:	88 1f       	adc	r24, r24
    495a:	99 1f       	adc	r25, r25
    495c:	1a f0       	brmi	.+6      	; 0x4964 <__fixunssfsi+0x22>
    495e:	ba 95       	dec	r27
    4960:	c9 f7       	brne	.-14     	; 0x4954 <__fixunssfsi+0x12>
    4962:	12 c0       	rjmp	.+36     	; 0x4988 <__fixunssfsi+0x46>
    4964:	b1 30       	cpi	r27, 0x01	; 1
    4966:	81 f0       	breq	.+32     	; 0x4988 <__fixunssfsi+0x46>
    4968:	9f d0       	rcall	.+318    	; 0x4aa8 <__fp_zero>
    496a:	b1 e0       	ldi	r27, 0x01	; 1
    496c:	08 95       	ret
    496e:	9c c0       	rjmp	.+312    	; 0x4aa8 <__fp_zero>
    4970:	67 2f       	mov	r22, r23
    4972:	78 2f       	mov	r23, r24
    4974:	88 27       	eor	r24, r24
    4976:	b8 5f       	subi	r27, 0xF8	; 248
    4978:	39 f0       	breq	.+14     	; 0x4988 <__fixunssfsi+0x46>
    497a:	b9 3f       	cpi	r27, 0xF9	; 249
    497c:	cc f3       	brlt	.-14     	; 0x4970 <__fixunssfsi+0x2e>
    497e:	86 95       	lsr	r24
    4980:	77 95       	ror	r23
    4982:	67 95       	ror	r22
    4984:	b3 95       	inc	r27
    4986:	d9 f7       	brne	.-10     	; 0x497e <__fixunssfsi+0x3c>
    4988:	3e f4       	brtc	.+14     	; 0x4998 <__fixunssfsi+0x56>
    498a:	90 95       	com	r25
    498c:	80 95       	com	r24
    498e:	70 95       	com	r23
    4990:	61 95       	neg	r22
    4992:	7f 4f       	sbci	r23, 0xFF	; 255
    4994:	8f 4f       	sbci	r24, 0xFF	; 255
    4996:	9f 4f       	sbci	r25, 0xFF	; 255
    4998:	08 95       	ret

0000499a <__floatunsisf>:
    499a:	e8 94       	clt
    499c:	09 c0       	rjmp	.+18     	; 0x49b0 <__floatsisf+0x12>

0000499e <__floatsisf>:
    499e:	97 fb       	bst	r25, 7
    49a0:	3e f4       	brtc	.+14     	; 0x49b0 <__floatsisf+0x12>
    49a2:	90 95       	com	r25
    49a4:	80 95       	com	r24
    49a6:	70 95       	com	r23
    49a8:	61 95       	neg	r22
    49aa:	7f 4f       	sbci	r23, 0xFF	; 255
    49ac:	8f 4f       	sbci	r24, 0xFF	; 255
    49ae:	9f 4f       	sbci	r25, 0xFF	; 255
    49b0:	99 23       	and	r25, r25
    49b2:	a9 f0       	breq	.+42     	; 0x49de <__floatsisf+0x40>
    49b4:	f9 2f       	mov	r31, r25
    49b6:	96 e9       	ldi	r25, 0x96	; 150
    49b8:	bb 27       	eor	r27, r27
    49ba:	93 95       	inc	r25
    49bc:	f6 95       	lsr	r31
    49be:	87 95       	ror	r24
    49c0:	77 95       	ror	r23
    49c2:	67 95       	ror	r22
    49c4:	b7 95       	ror	r27
    49c6:	f1 11       	cpse	r31, r1
    49c8:	f8 cf       	rjmp	.-16     	; 0x49ba <__floatsisf+0x1c>
    49ca:	fa f4       	brpl	.+62     	; 0x4a0a <__floatsisf+0x6c>
    49cc:	bb 0f       	add	r27, r27
    49ce:	11 f4       	brne	.+4      	; 0x49d4 <__floatsisf+0x36>
    49d0:	60 ff       	sbrs	r22, 0
    49d2:	1b c0       	rjmp	.+54     	; 0x4a0a <__floatsisf+0x6c>
    49d4:	6f 5f       	subi	r22, 0xFF	; 255
    49d6:	7f 4f       	sbci	r23, 0xFF	; 255
    49d8:	8f 4f       	sbci	r24, 0xFF	; 255
    49da:	9f 4f       	sbci	r25, 0xFF	; 255
    49dc:	16 c0       	rjmp	.+44     	; 0x4a0a <__floatsisf+0x6c>
    49de:	88 23       	and	r24, r24
    49e0:	11 f0       	breq	.+4      	; 0x49e6 <__floatsisf+0x48>
    49e2:	96 e9       	ldi	r25, 0x96	; 150
    49e4:	11 c0       	rjmp	.+34     	; 0x4a08 <__floatsisf+0x6a>
    49e6:	77 23       	and	r23, r23
    49e8:	21 f0       	breq	.+8      	; 0x49f2 <__floatsisf+0x54>
    49ea:	9e e8       	ldi	r25, 0x8E	; 142
    49ec:	87 2f       	mov	r24, r23
    49ee:	76 2f       	mov	r23, r22
    49f0:	05 c0       	rjmp	.+10     	; 0x49fc <__floatsisf+0x5e>
    49f2:	66 23       	and	r22, r22
    49f4:	71 f0       	breq	.+28     	; 0x4a12 <__floatsisf+0x74>
    49f6:	96 e8       	ldi	r25, 0x86	; 134
    49f8:	86 2f       	mov	r24, r22
    49fa:	70 e0       	ldi	r23, 0x00	; 0
    49fc:	60 e0       	ldi	r22, 0x00	; 0
    49fe:	2a f0       	brmi	.+10     	; 0x4a0a <__floatsisf+0x6c>
    4a00:	9a 95       	dec	r25
    4a02:	66 0f       	add	r22, r22
    4a04:	77 1f       	adc	r23, r23
    4a06:	88 1f       	adc	r24, r24
    4a08:	da f7       	brpl	.-10     	; 0x4a00 <__floatsisf+0x62>
    4a0a:	88 0f       	add	r24, r24
    4a0c:	96 95       	lsr	r25
    4a0e:	87 95       	ror	r24
    4a10:	97 f9       	bld	r25, 7
    4a12:	08 95       	ret

00004a14 <__fp_inf>:
    4a14:	97 f9       	bld	r25, 7
    4a16:	9f 67       	ori	r25, 0x7F	; 127
    4a18:	80 e8       	ldi	r24, 0x80	; 128
    4a1a:	70 e0       	ldi	r23, 0x00	; 0
    4a1c:	60 e0       	ldi	r22, 0x00	; 0
    4a1e:	08 95       	ret

00004a20 <__fp_nan>:
    4a20:	9f ef       	ldi	r25, 0xFF	; 255
    4a22:	80 ec       	ldi	r24, 0xC0	; 192
    4a24:	08 95       	ret

00004a26 <__fp_pscA>:
    4a26:	00 24       	eor	r0, r0
    4a28:	0a 94       	dec	r0
    4a2a:	16 16       	cp	r1, r22
    4a2c:	17 06       	cpc	r1, r23
    4a2e:	18 06       	cpc	r1, r24
    4a30:	09 06       	cpc	r0, r25
    4a32:	08 95       	ret

00004a34 <__fp_pscB>:
    4a34:	00 24       	eor	r0, r0
    4a36:	0a 94       	dec	r0
    4a38:	12 16       	cp	r1, r18
    4a3a:	13 06       	cpc	r1, r19
    4a3c:	14 06       	cpc	r1, r20
    4a3e:	05 06       	cpc	r0, r21
    4a40:	08 95       	ret

00004a42 <__fp_round>:
    4a42:	09 2e       	mov	r0, r25
    4a44:	03 94       	inc	r0
    4a46:	00 0c       	add	r0, r0
    4a48:	11 f4       	brne	.+4      	; 0x4a4e <__fp_round+0xc>
    4a4a:	88 23       	and	r24, r24
    4a4c:	52 f0       	brmi	.+20     	; 0x4a62 <__fp_round+0x20>
    4a4e:	bb 0f       	add	r27, r27
    4a50:	40 f4       	brcc	.+16     	; 0x4a62 <__fp_round+0x20>
    4a52:	bf 2b       	or	r27, r31
    4a54:	11 f4       	brne	.+4      	; 0x4a5a <__fp_round+0x18>
    4a56:	60 ff       	sbrs	r22, 0
    4a58:	04 c0       	rjmp	.+8      	; 0x4a62 <__fp_round+0x20>
    4a5a:	6f 5f       	subi	r22, 0xFF	; 255
    4a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    4a60:	9f 4f       	sbci	r25, 0xFF	; 255
    4a62:	08 95       	ret

00004a64 <__fp_split3>:
    4a64:	57 fd       	sbrc	r21, 7
    4a66:	90 58       	subi	r25, 0x80	; 128
    4a68:	44 0f       	add	r20, r20
    4a6a:	55 1f       	adc	r21, r21
    4a6c:	59 f0       	breq	.+22     	; 0x4a84 <__fp_splitA+0x10>
    4a6e:	5f 3f       	cpi	r21, 0xFF	; 255
    4a70:	71 f0       	breq	.+28     	; 0x4a8e <__fp_splitA+0x1a>
    4a72:	47 95       	ror	r20

00004a74 <__fp_splitA>:
    4a74:	88 0f       	add	r24, r24
    4a76:	97 fb       	bst	r25, 7
    4a78:	99 1f       	adc	r25, r25
    4a7a:	61 f0       	breq	.+24     	; 0x4a94 <__fp_splitA+0x20>
    4a7c:	9f 3f       	cpi	r25, 0xFF	; 255
    4a7e:	79 f0       	breq	.+30     	; 0x4a9e <__fp_splitA+0x2a>
    4a80:	87 95       	ror	r24
    4a82:	08 95       	ret
    4a84:	12 16       	cp	r1, r18
    4a86:	13 06       	cpc	r1, r19
    4a88:	14 06       	cpc	r1, r20
    4a8a:	55 1f       	adc	r21, r21
    4a8c:	f2 cf       	rjmp	.-28     	; 0x4a72 <__fp_split3+0xe>
    4a8e:	46 95       	lsr	r20
    4a90:	f1 df       	rcall	.-30     	; 0x4a74 <__fp_splitA>
    4a92:	08 c0       	rjmp	.+16     	; 0x4aa4 <__fp_splitA+0x30>
    4a94:	16 16       	cp	r1, r22
    4a96:	17 06       	cpc	r1, r23
    4a98:	18 06       	cpc	r1, r24
    4a9a:	99 1f       	adc	r25, r25
    4a9c:	f1 cf       	rjmp	.-30     	; 0x4a80 <__fp_splitA+0xc>
    4a9e:	86 95       	lsr	r24
    4aa0:	71 05       	cpc	r23, r1
    4aa2:	61 05       	cpc	r22, r1
    4aa4:	08 94       	sec
    4aa6:	08 95       	ret

00004aa8 <__fp_zero>:
    4aa8:	e8 94       	clt

00004aaa <__fp_szero>:
    4aaa:	bb 27       	eor	r27, r27
    4aac:	66 27       	eor	r22, r22
    4aae:	77 27       	eor	r23, r23
    4ab0:	cb 01       	movw	r24, r22
    4ab2:	97 f9       	bld	r25, 7
    4ab4:	08 95       	ret

00004ab6 <__mulsf3>:
    4ab6:	0b d0       	rcall	.+22     	; 0x4ace <__mulsf3x>
    4ab8:	c4 cf       	rjmp	.-120    	; 0x4a42 <__fp_round>
    4aba:	b5 df       	rcall	.-150    	; 0x4a26 <__fp_pscA>
    4abc:	28 f0       	brcs	.+10     	; 0x4ac8 <__mulsf3+0x12>
    4abe:	ba df       	rcall	.-140    	; 0x4a34 <__fp_pscB>
    4ac0:	18 f0       	brcs	.+6      	; 0x4ac8 <__mulsf3+0x12>
    4ac2:	95 23       	and	r25, r21
    4ac4:	09 f0       	breq	.+2      	; 0x4ac8 <__mulsf3+0x12>
    4ac6:	a6 cf       	rjmp	.-180    	; 0x4a14 <__fp_inf>
    4ac8:	ab cf       	rjmp	.-170    	; 0x4a20 <__fp_nan>
    4aca:	11 24       	eor	r1, r1
    4acc:	ee cf       	rjmp	.-36     	; 0x4aaa <__fp_szero>

00004ace <__mulsf3x>:
    4ace:	ca df       	rcall	.-108    	; 0x4a64 <__fp_split3>
    4ad0:	a0 f3       	brcs	.-24     	; 0x4aba <__mulsf3+0x4>

00004ad2 <__mulsf3_pse>:
    4ad2:	95 9f       	mul	r25, r21
    4ad4:	d1 f3       	breq	.-12     	; 0x4aca <__mulsf3+0x14>
    4ad6:	95 0f       	add	r25, r21
    4ad8:	50 e0       	ldi	r21, 0x00	; 0
    4ada:	55 1f       	adc	r21, r21
    4adc:	62 9f       	mul	r22, r18
    4ade:	f0 01       	movw	r30, r0
    4ae0:	72 9f       	mul	r23, r18
    4ae2:	bb 27       	eor	r27, r27
    4ae4:	f0 0d       	add	r31, r0
    4ae6:	b1 1d       	adc	r27, r1
    4ae8:	63 9f       	mul	r22, r19
    4aea:	aa 27       	eor	r26, r26
    4aec:	f0 0d       	add	r31, r0
    4aee:	b1 1d       	adc	r27, r1
    4af0:	aa 1f       	adc	r26, r26
    4af2:	64 9f       	mul	r22, r20
    4af4:	66 27       	eor	r22, r22
    4af6:	b0 0d       	add	r27, r0
    4af8:	a1 1d       	adc	r26, r1
    4afa:	66 1f       	adc	r22, r22
    4afc:	82 9f       	mul	r24, r18
    4afe:	22 27       	eor	r18, r18
    4b00:	b0 0d       	add	r27, r0
    4b02:	a1 1d       	adc	r26, r1
    4b04:	62 1f       	adc	r22, r18
    4b06:	73 9f       	mul	r23, r19
    4b08:	b0 0d       	add	r27, r0
    4b0a:	a1 1d       	adc	r26, r1
    4b0c:	62 1f       	adc	r22, r18
    4b0e:	83 9f       	mul	r24, r19
    4b10:	a0 0d       	add	r26, r0
    4b12:	61 1d       	adc	r22, r1
    4b14:	22 1f       	adc	r18, r18
    4b16:	74 9f       	mul	r23, r20
    4b18:	33 27       	eor	r19, r19
    4b1a:	a0 0d       	add	r26, r0
    4b1c:	61 1d       	adc	r22, r1
    4b1e:	23 1f       	adc	r18, r19
    4b20:	84 9f       	mul	r24, r20
    4b22:	60 0d       	add	r22, r0
    4b24:	21 1d       	adc	r18, r1
    4b26:	82 2f       	mov	r24, r18
    4b28:	76 2f       	mov	r23, r22
    4b2a:	6a 2f       	mov	r22, r26
    4b2c:	11 24       	eor	r1, r1
    4b2e:	9f 57       	subi	r25, 0x7F	; 127
    4b30:	50 40       	sbci	r21, 0x00	; 0
    4b32:	8a f0       	brmi	.+34     	; 0x4b56 <__mulsf3_pse+0x84>
    4b34:	e1 f0       	breq	.+56     	; 0x4b6e <__mulsf3_pse+0x9c>
    4b36:	88 23       	and	r24, r24
    4b38:	4a f0       	brmi	.+18     	; 0x4b4c <__mulsf3_pse+0x7a>
    4b3a:	ee 0f       	add	r30, r30
    4b3c:	ff 1f       	adc	r31, r31
    4b3e:	bb 1f       	adc	r27, r27
    4b40:	66 1f       	adc	r22, r22
    4b42:	77 1f       	adc	r23, r23
    4b44:	88 1f       	adc	r24, r24
    4b46:	91 50       	subi	r25, 0x01	; 1
    4b48:	50 40       	sbci	r21, 0x00	; 0
    4b4a:	a9 f7       	brne	.-22     	; 0x4b36 <__mulsf3_pse+0x64>
    4b4c:	9e 3f       	cpi	r25, 0xFE	; 254
    4b4e:	51 05       	cpc	r21, r1
    4b50:	70 f0       	brcs	.+28     	; 0x4b6e <__mulsf3_pse+0x9c>
    4b52:	60 cf       	rjmp	.-320    	; 0x4a14 <__fp_inf>
    4b54:	aa cf       	rjmp	.-172    	; 0x4aaa <__fp_szero>
    4b56:	5f 3f       	cpi	r21, 0xFF	; 255
    4b58:	ec f3       	brlt	.-6      	; 0x4b54 <__mulsf3_pse+0x82>
    4b5a:	98 3e       	cpi	r25, 0xE8	; 232
    4b5c:	dc f3       	brlt	.-10     	; 0x4b54 <__mulsf3_pse+0x82>
    4b5e:	86 95       	lsr	r24
    4b60:	77 95       	ror	r23
    4b62:	67 95       	ror	r22
    4b64:	b7 95       	ror	r27
    4b66:	f7 95       	ror	r31
    4b68:	e7 95       	ror	r30
    4b6a:	9f 5f       	subi	r25, 0xFF	; 255
    4b6c:	c1 f7       	brne	.-16     	; 0x4b5e <__mulsf3_pse+0x8c>
    4b6e:	fe 2b       	or	r31, r30
    4b70:	88 0f       	add	r24, r24
    4b72:	91 1d       	adc	r25, r1
    4b74:	96 95       	lsr	r25
    4b76:	87 95       	ror	r24
    4b78:	97 f9       	bld	r25, 7
    4b7a:	08 95       	ret

00004b7c <memcpy>:
    4b7c:	fb 01       	movw	r30, r22
    4b7e:	dc 01       	movw	r26, r24
    4b80:	02 c0       	rjmp	.+4      	; 0x4b86 <memcpy+0xa>
    4b82:	01 90       	ld	r0, Z+
    4b84:	0d 92       	st	X+, r0
    4b86:	41 50       	subi	r20, 0x01	; 1
    4b88:	50 40       	sbci	r21, 0x00	; 0
    4b8a:	d8 f7       	brcc	.-10     	; 0x4b82 <memcpy+0x6>
    4b8c:	08 95       	ret

00004b8e <fdevopen>:
    4b8e:	0f 93       	push	r16
    4b90:	1f 93       	push	r17
    4b92:	cf 93       	push	r28
    4b94:	df 93       	push	r29
    4b96:	00 97       	sbiw	r24, 0x00	; 0
    4b98:	31 f4       	brne	.+12     	; 0x4ba6 <fdevopen+0x18>
    4b9a:	61 15       	cp	r22, r1
    4b9c:	71 05       	cpc	r23, r1
    4b9e:	19 f4       	brne	.+6      	; 0x4ba6 <fdevopen+0x18>
    4ba0:	80 e0       	ldi	r24, 0x00	; 0
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	39 c0       	rjmp	.+114    	; 0x4c18 <fdevopen+0x8a>
    4ba6:	8b 01       	movw	r16, r22
    4ba8:	ec 01       	movw	r28, r24
    4baa:	6e e0       	ldi	r22, 0x0E	; 14
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	81 e0       	ldi	r24, 0x01	; 1
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	41 d2       	rcall	.+1154   	; 0x5036 <calloc>
    4bb4:	fc 01       	movw	r30, r24
    4bb6:	89 2b       	or	r24, r25
    4bb8:	99 f3       	breq	.-26     	; 0x4ba0 <fdevopen+0x12>
    4bba:	80 e8       	ldi	r24, 0x80	; 128
    4bbc:	83 83       	std	Z+3, r24	; 0x03
    4bbe:	01 15       	cp	r16, r1
    4bc0:	11 05       	cpc	r17, r1
    4bc2:	71 f0       	breq	.+28     	; 0x4be0 <fdevopen+0x52>
    4bc4:	02 87       	std	Z+10, r16	; 0x0a
    4bc6:	13 87       	std	Z+11, r17	; 0x0b
    4bc8:	81 e8       	ldi	r24, 0x81	; 129
    4bca:	83 83       	std	Z+3, r24	; 0x03
    4bcc:	80 91 4d 24 	lds	r24, 0x244D	; 0x80244d <__iob>
    4bd0:	90 91 4e 24 	lds	r25, 0x244E	; 0x80244e <__iob+0x1>
    4bd4:	89 2b       	or	r24, r25
    4bd6:	21 f4       	brne	.+8      	; 0x4be0 <fdevopen+0x52>
    4bd8:	e0 93 4d 24 	sts	0x244D, r30	; 0x80244d <__iob>
    4bdc:	f0 93 4e 24 	sts	0x244E, r31	; 0x80244e <__iob+0x1>
    4be0:	20 97       	sbiw	r28, 0x00	; 0
    4be2:	c9 f0       	breq	.+50     	; 0x4c16 <fdevopen+0x88>
    4be4:	c0 87       	std	Z+8, r28	; 0x08
    4be6:	d1 87       	std	Z+9, r29	; 0x09
    4be8:	83 81       	ldd	r24, Z+3	; 0x03
    4bea:	82 60       	ori	r24, 0x02	; 2
    4bec:	83 83       	std	Z+3, r24	; 0x03
    4bee:	80 91 4f 24 	lds	r24, 0x244F	; 0x80244f <__iob+0x2>
    4bf2:	90 91 50 24 	lds	r25, 0x2450	; 0x802450 <__iob+0x3>
    4bf6:	89 2b       	or	r24, r25
    4bf8:	71 f4       	brne	.+28     	; 0x4c16 <fdevopen+0x88>
    4bfa:	e0 93 4f 24 	sts	0x244F, r30	; 0x80244f <__iob+0x2>
    4bfe:	f0 93 50 24 	sts	0x2450, r31	; 0x802450 <__iob+0x3>
    4c02:	80 91 51 24 	lds	r24, 0x2451	; 0x802451 <__iob+0x4>
    4c06:	90 91 52 24 	lds	r25, 0x2452	; 0x802452 <__iob+0x5>
    4c0a:	89 2b       	or	r24, r25
    4c0c:	21 f4       	brne	.+8      	; 0x4c16 <fdevopen+0x88>
    4c0e:	e0 93 51 24 	sts	0x2451, r30	; 0x802451 <__iob+0x4>
    4c12:	f0 93 52 24 	sts	0x2452, r31	; 0x802452 <__iob+0x5>
    4c16:	cf 01       	movw	r24, r30
    4c18:	df 91       	pop	r29
    4c1a:	cf 91       	pop	r28
    4c1c:	1f 91       	pop	r17
    4c1e:	0f 91       	pop	r16
    4c20:	08 95       	ret

00004c22 <printf>:
    4c22:	cf 93       	push	r28
    4c24:	df 93       	push	r29
    4c26:	cd b7       	in	r28, 0x3d	; 61
    4c28:	de b7       	in	r29, 0x3e	; 62
    4c2a:	ae 01       	movw	r20, r28
    4c2c:	4a 5f       	subi	r20, 0xFA	; 250
    4c2e:	5f 4f       	sbci	r21, 0xFF	; 255
    4c30:	fa 01       	movw	r30, r20
    4c32:	61 91       	ld	r22, Z+
    4c34:	71 91       	ld	r23, Z+
    4c36:	af 01       	movw	r20, r30
    4c38:	80 91 4f 24 	lds	r24, 0x244F	; 0x80244f <__iob+0x2>
    4c3c:	90 91 50 24 	lds	r25, 0x2450	; 0x802450 <__iob+0x3>
    4c40:	03 d0       	rcall	.+6      	; 0x4c48 <vfprintf>
    4c42:	df 91       	pop	r29
    4c44:	cf 91       	pop	r28
    4c46:	08 95       	ret

00004c48 <vfprintf>:
    4c48:	2f 92       	push	r2
    4c4a:	3f 92       	push	r3
    4c4c:	4f 92       	push	r4
    4c4e:	5f 92       	push	r5
    4c50:	6f 92       	push	r6
    4c52:	7f 92       	push	r7
    4c54:	8f 92       	push	r8
    4c56:	9f 92       	push	r9
    4c58:	af 92       	push	r10
    4c5a:	bf 92       	push	r11
    4c5c:	cf 92       	push	r12
    4c5e:	df 92       	push	r13
    4c60:	ef 92       	push	r14
    4c62:	ff 92       	push	r15
    4c64:	0f 93       	push	r16
    4c66:	1f 93       	push	r17
    4c68:	cf 93       	push	r28
    4c6a:	df 93       	push	r29
    4c6c:	cd b7       	in	r28, 0x3d	; 61
    4c6e:	de b7       	in	r29, 0x3e	; 62
    4c70:	2b 97       	sbiw	r28, 0x0b	; 11
    4c72:	cd bf       	out	0x3d, r28	; 61
    4c74:	de bf       	out	0x3e, r29	; 62
    4c76:	6c 01       	movw	r12, r24
    4c78:	7b 01       	movw	r14, r22
    4c7a:	8a 01       	movw	r16, r20
    4c7c:	fc 01       	movw	r30, r24
    4c7e:	16 82       	std	Z+6, r1	; 0x06
    4c80:	17 82       	std	Z+7, r1	; 0x07
    4c82:	83 81       	ldd	r24, Z+3	; 0x03
    4c84:	81 ff       	sbrs	r24, 1
    4c86:	bf c1       	rjmp	.+894    	; 0x5006 <vfprintf+0x3be>
    4c88:	ce 01       	movw	r24, r28
    4c8a:	01 96       	adiw	r24, 0x01	; 1
    4c8c:	3c 01       	movw	r6, r24
    4c8e:	f6 01       	movw	r30, r12
    4c90:	93 81       	ldd	r25, Z+3	; 0x03
    4c92:	f7 01       	movw	r30, r14
    4c94:	93 fd       	sbrc	r25, 3
    4c96:	85 91       	lpm	r24, Z+
    4c98:	93 ff       	sbrs	r25, 3
    4c9a:	81 91       	ld	r24, Z+
    4c9c:	7f 01       	movw	r14, r30
    4c9e:	88 23       	and	r24, r24
    4ca0:	09 f4       	brne	.+2      	; 0x4ca4 <vfprintf+0x5c>
    4ca2:	ad c1       	rjmp	.+858    	; 0x4ffe <vfprintf+0x3b6>
    4ca4:	85 32       	cpi	r24, 0x25	; 37
    4ca6:	39 f4       	brne	.+14     	; 0x4cb6 <vfprintf+0x6e>
    4ca8:	93 fd       	sbrc	r25, 3
    4caa:	85 91       	lpm	r24, Z+
    4cac:	93 ff       	sbrs	r25, 3
    4cae:	81 91       	ld	r24, Z+
    4cb0:	7f 01       	movw	r14, r30
    4cb2:	85 32       	cpi	r24, 0x25	; 37
    4cb4:	21 f4       	brne	.+8      	; 0x4cbe <vfprintf+0x76>
    4cb6:	b6 01       	movw	r22, r12
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	15 d3       	rcall	.+1578   	; 0x52e6 <fputc>
    4cbc:	e8 cf       	rjmp	.-48     	; 0x4c8e <vfprintf+0x46>
    4cbe:	91 2c       	mov	r9, r1
    4cc0:	21 2c       	mov	r2, r1
    4cc2:	31 2c       	mov	r3, r1
    4cc4:	ff e1       	ldi	r31, 0x1F	; 31
    4cc6:	f3 15       	cp	r31, r3
    4cc8:	d8 f0       	brcs	.+54     	; 0x4d00 <vfprintf+0xb8>
    4cca:	8b 32       	cpi	r24, 0x2B	; 43
    4ccc:	79 f0       	breq	.+30     	; 0x4cec <vfprintf+0xa4>
    4cce:	38 f4       	brcc	.+14     	; 0x4cde <vfprintf+0x96>
    4cd0:	80 32       	cpi	r24, 0x20	; 32
    4cd2:	79 f0       	breq	.+30     	; 0x4cf2 <vfprintf+0xaa>
    4cd4:	83 32       	cpi	r24, 0x23	; 35
    4cd6:	a1 f4       	brne	.+40     	; 0x4d00 <vfprintf+0xb8>
    4cd8:	23 2d       	mov	r18, r3
    4cda:	20 61       	ori	r18, 0x10	; 16
    4cdc:	1d c0       	rjmp	.+58     	; 0x4d18 <vfprintf+0xd0>
    4cde:	8d 32       	cpi	r24, 0x2D	; 45
    4ce0:	61 f0       	breq	.+24     	; 0x4cfa <vfprintf+0xb2>
    4ce2:	80 33       	cpi	r24, 0x30	; 48
    4ce4:	69 f4       	brne	.+26     	; 0x4d00 <vfprintf+0xb8>
    4ce6:	23 2d       	mov	r18, r3
    4ce8:	21 60       	ori	r18, 0x01	; 1
    4cea:	16 c0       	rjmp	.+44     	; 0x4d18 <vfprintf+0xd0>
    4cec:	83 2d       	mov	r24, r3
    4cee:	82 60       	ori	r24, 0x02	; 2
    4cf0:	38 2e       	mov	r3, r24
    4cf2:	e3 2d       	mov	r30, r3
    4cf4:	e4 60       	ori	r30, 0x04	; 4
    4cf6:	3e 2e       	mov	r3, r30
    4cf8:	2a c0       	rjmp	.+84     	; 0x4d4e <vfprintf+0x106>
    4cfa:	f3 2d       	mov	r31, r3
    4cfc:	f8 60       	ori	r31, 0x08	; 8
    4cfe:	1d c0       	rjmp	.+58     	; 0x4d3a <vfprintf+0xf2>
    4d00:	37 fc       	sbrc	r3, 7
    4d02:	2d c0       	rjmp	.+90     	; 0x4d5e <vfprintf+0x116>
    4d04:	20 ed       	ldi	r18, 0xD0	; 208
    4d06:	28 0f       	add	r18, r24
    4d08:	2a 30       	cpi	r18, 0x0A	; 10
    4d0a:	40 f0       	brcs	.+16     	; 0x4d1c <vfprintf+0xd4>
    4d0c:	8e 32       	cpi	r24, 0x2E	; 46
    4d0e:	b9 f4       	brne	.+46     	; 0x4d3e <vfprintf+0xf6>
    4d10:	36 fc       	sbrc	r3, 6
    4d12:	75 c1       	rjmp	.+746    	; 0x4ffe <vfprintf+0x3b6>
    4d14:	23 2d       	mov	r18, r3
    4d16:	20 64       	ori	r18, 0x40	; 64
    4d18:	32 2e       	mov	r3, r18
    4d1a:	19 c0       	rjmp	.+50     	; 0x4d4e <vfprintf+0x106>
    4d1c:	36 fe       	sbrs	r3, 6
    4d1e:	06 c0       	rjmp	.+12     	; 0x4d2c <vfprintf+0xe4>
    4d20:	8a e0       	ldi	r24, 0x0A	; 10
    4d22:	98 9e       	mul	r9, r24
    4d24:	20 0d       	add	r18, r0
    4d26:	11 24       	eor	r1, r1
    4d28:	92 2e       	mov	r9, r18
    4d2a:	11 c0       	rjmp	.+34     	; 0x4d4e <vfprintf+0x106>
    4d2c:	ea e0       	ldi	r30, 0x0A	; 10
    4d2e:	2e 9e       	mul	r2, r30
    4d30:	20 0d       	add	r18, r0
    4d32:	11 24       	eor	r1, r1
    4d34:	22 2e       	mov	r2, r18
    4d36:	f3 2d       	mov	r31, r3
    4d38:	f0 62       	ori	r31, 0x20	; 32
    4d3a:	3f 2e       	mov	r3, r31
    4d3c:	08 c0       	rjmp	.+16     	; 0x4d4e <vfprintf+0x106>
    4d3e:	8c 36       	cpi	r24, 0x6C	; 108
    4d40:	21 f4       	brne	.+8      	; 0x4d4a <vfprintf+0x102>
    4d42:	83 2d       	mov	r24, r3
    4d44:	80 68       	ori	r24, 0x80	; 128
    4d46:	38 2e       	mov	r3, r24
    4d48:	02 c0       	rjmp	.+4      	; 0x4d4e <vfprintf+0x106>
    4d4a:	88 36       	cpi	r24, 0x68	; 104
    4d4c:	41 f4       	brne	.+16     	; 0x4d5e <vfprintf+0x116>
    4d4e:	f7 01       	movw	r30, r14
    4d50:	93 fd       	sbrc	r25, 3
    4d52:	85 91       	lpm	r24, Z+
    4d54:	93 ff       	sbrs	r25, 3
    4d56:	81 91       	ld	r24, Z+
    4d58:	7f 01       	movw	r14, r30
    4d5a:	81 11       	cpse	r24, r1
    4d5c:	b3 cf       	rjmp	.-154    	; 0x4cc4 <vfprintf+0x7c>
    4d5e:	98 2f       	mov	r25, r24
    4d60:	9f 7d       	andi	r25, 0xDF	; 223
    4d62:	95 54       	subi	r25, 0x45	; 69
    4d64:	93 30       	cpi	r25, 0x03	; 3
    4d66:	28 f4       	brcc	.+10     	; 0x4d72 <vfprintf+0x12a>
    4d68:	0c 5f       	subi	r16, 0xFC	; 252
    4d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d6c:	9f e3       	ldi	r25, 0x3F	; 63
    4d6e:	99 83       	std	Y+1, r25	; 0x01
    4d70:	0d c0       	rjmp	.+26     	; 0x4d8c <vfprintf+0x144>
    4d72:	83 36       	cpi	r24, 0x63	; 99
    4d74:	31 f0       	breq	.+12     	; 0x4d82 <vfprintf+0x13a>
    4d76:	83 37       	cpi	r24, 0x73	; 115
    4d78:	71 f0       	breq	.+28     	; 0x4d96 <vfprintf+0x14e>
    4d7a:	83 35       	cpi	r24, 0x53	; 83
    4d7c:	09 f0       	breq	.+2      	; 0x4d80 <vfprintf+0x138>
    4d7e:	55 c0       	rjmp	.+170    	; 0x4e2a <vfprintf+0x1e2>
    4d80:	20 c0       	rjmp	.+64     	; 0x4dc2 <vfprintf+0x17a>
    4d82:	f8 01       	movw	r30, r16
    4d84:	80 81       	ld	r24, Z
    4d86:	89 83       	std	Y+1, r24	; 0x01
    4d88:	0e 5f       	subi	r16, 0xFE	; 254
    4d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d8c:	88 24       	eor	r8, r8
    4d8e:	83 94       	inc	r8
    4d90:	91 2c       	mov	r9, r1
    4d92:	53 01       	movw	r10, r6
    4d94:	12 c0       	rjmp	.+36     	; 0x4dba <vfprintf+0x172>
    4d96:	28 01       	movw	r4, r16
    4d98:	f2 e0       	ldi	r31, 0x02	; 2
    4d9a:	4f 0e       	add	r4, r31
    4d9c:	51 1c       	adc	r5, r1
    4d9e:	f8 01       	movw	r30, r16
    4da0:	a0 80       	ld	r10, Z
    4da2:	b1 80       	ldd	r11, Z+1	; 0x01
    4da4:	36 fe       	sbrs	r3, 6
    4da6:	03 c0       	rjmp	.+6      	; 0x4dae <vfprintf+0x166>
    4da8:	69 2d       	mov	r22, r9
    4daa:	70 e0       	ldi	r23, 0x00	; 0
    4dac:	02 c0       	rjmp	.+4      	; 0x4db2 <vfprintf+0x16a>
    4dae:	6f ef       	ldi	r22, 0xFF	; 255
    4db0:	7f ef       	ldi	r23, 0xFF	; 255
    4db2:	c5 01       	movw	r24, r10
    4db4:	8d d2       	rcall	.+1306   	; 0x52d0 <strnlen>
    4db6:	4c 01       	movw	r8, r24
    4db8:	82 01       	movw	r16, r4
    4dba:	f3 2d       	mov	r31, r3
    4dbc:	ff 77       	andi	r31, 0x7F	; 127
    4dbe:	3f 2e       	mov	r3, r31
    4dc0:	15 c0       	rjmp	.+42     	; 0x4dec <vfprintf+0x1a4>
    4dc2:	28 01       	movw	r4, r16
    4dc4:	22 e0       	ldi	r18, 0x02	; 2
    4dc6:	42 0e       	add	r4, r18
    4dc8:	51 1c       	adc	r5, r1
    4dca:	f8 01       	movw	r30, r16
    4dcc:	a0 80       	ld	r10, Z
    4dce:	b1 80       	ldd	r11, Z+1	; 0x01
    4dd0:	36 fe       	sbrs	r3, 6
    4dd2:	03 c0       	rjmp	.+6      	; 0x4dda <vfprintf+0x192>
    4dd4:	69 2d       	mov	r22, r9
    4dd6:	70 e0       	ldi	r23, 0x00	; 0
    4dd8:	02 c0       	rjmp	.+4      	; 0x4dde <vfprintf+0x196>
    4dda:	6f ef       	ldi	r22, 0xFF	; 255
    4ddc:	7f ef       	ldi	r23, 0xFF	; 255
    4dde:	c5 01       	movw	r24, r10
    4de0:	65 d2       	rcall	.+1226   	; 0x52ac <strnlen_P>
    4de2:	4c 01       	movw	r8, r24
    4de4:	f3 2d       	mov	r31, r3
    4de6:	f0 68       	ori	r31, 0x80	; 128
    4de8:	3f 2e       	mov	r3, r31
    4dea:	82 01       	movw	r16, r4
    4dec:	33 fc       	sbrc	r3, 3
    4dee:	19 c0       	rjmp	.+50     	; 0x4e22 <vfprintf+0x1da>
    4df0:	82 2d       	mov	r24, r2
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	88 16       	cp	r8, r24
    4df6:	99 06       	cpc	r9, r25
    4df8:	a0 f4       	brcc	.+40     	; 0x4e22 <vfprintf+0x1da>
    4dfa:	b6 01       	movw	r22, r12
    4dfc:	80 e2       	ldi	r24, 0x20	; 32
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	72 d2       	rcall	.+1252   	; 0x52e6 <fputc>
    4e02:	2a 94       	dec	r2
    4e04:	f5 cf       	rjmp	.-22     	; 0x4df0 <vfprintf+0x1a8>
    4e06:	f5 01       	movw	r30, r10
    4e08:	37 fc       	sbrc	r3, 7
    4e0a:	85 91       	lpm	r24, Z+
    4e0c:	37 fe       	sbrs	r3, 7
    4e0e:	81 91       	ld	r24, Z+
    4e10:	5f 01       	movw	r10, r30
    4e12:	b6 01       	movw	r22, r12
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	67 d2       	rcall	.+1230   	; 0x52e6 <fputc>
    4e18:	21 10       	cpse	r2, r1
    4e1a:	2a 94       	dec	r2
    4e1c:	21 e0       	ldi	r18, 0x01	; 1
    4e1e:	82 1a       	sub	r8, r18
    4e20:	91 08       	sbc	r9, r1
    4e22:	81 14       	cp	r8, r1
    4e24:	91 04       	cpc	r9, r1
    4e26:	79 f7       	brne	.-34     	; 0x4e06 <vfprintf+0x1be>
    4e28:	e1 c0       	rjmp	.+450    	; 0x4fec <vfprintf+0x3a4>
    4e2a:	84 36       	cpi	r24, 0x64	; 100
    4e2c:	11 f0       	breq	.+4      	; 0x4e32 <vfprintf+0x1ea>
    4e2e:	89 36       	cpi	r24, 0x69	; 105
    4e30:	39 f5       	brne	.+78     	; 0x4e80 <vfprintf+0x238>
    4e32:	f8 01       	movw	r30, r16
    4e34:	37 fe       	sbrs	r3, 7
    4e36:	07 c0       	rjmp	.+14     	; 0x4e46 <vfprintf+0x1fe>
    4e38:	60 81       	ld	r22, Z
    4e3a:	71 81       	ldd	r23, Z+1	; 0x01
    4e3c:	82 81       	ldd	r24, Z+2	; 0x02
    4e3e:	93 81       	ldd	r25, Z+3	; 0x03
    4e40:	0c 5f       	subi	r16, 0xFC	; 252
    4e42:	1f 4f       	sbci	r17, 0xFF	; 255
    4e44:	08 c0       	rjmp	.+16     	; 0x4e56 <vfprintf+0x20e>
    4e46:	60 81       	ld	r22, Z
    4e48:	71 81       	ldd	r23, Z+1	; 0x01
    4e4a:	07 2e       	mov	r0, r23
    4e4c:	00 0c       	add	r0, r0
    4e4e:	88 0b       	sbc	r24, r24
    4e50:	99 0b       	sbc	r25, r25
    4e52:	0e 5f       	subi	r16, 0xFE	; 254
    4e54:	1f 4f       	sbci	r17, 0xFF	; 255
    4e56:	f3 2d       	mov	r31, r3
    4e58:	ff 76       	andi	r31, 0x6F	; 111
    4e5a:	3f 2e       	mov	r3, r31
    4e5c:	97 ff       	sbrs	r25, 7
    4e5e:	09 c0       	rjmp	.+18     	; 0x4e72 <vfprintf+0x22a>
    4e60:	90 95       	com	r25
    4e62:	80 95       	com	r24
    4e64:	70 95       	com	r23
    4e66:	61 95       	neg	r22
    4e68:	7f 4f       	sbci	r23, 0xFF	; 255
    4e6a:	8f 4f       	sbci	r24, 0xFF	; 255
    4e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e6e:	f0 68       	ori	r31, 0x80	; 128
    4e70:	3f 2e       	mov	r3, r31
    4e72:	2a e0       	ldi	r18, 0x0A	; 10
    4e74:	30 e0       	ldi	r19, 0x00	; 0
    4e76:	a3 01       	movw	r20, r6
    4e78:	72 d2       	rcall	.+1252   	; 0x535e <__ultoa_invert>
    4e7a:	88 2e       	mov	r8, r24
    4e7c:	86 18       	sub	r8, r6
    4e7e:	44 c0       	rjmp	.+136    	; 0x4f08 <vfprintf+0x2c0>
    4e80:	85 37       	cpi	r24, 0x75	; 117
    4e82:	31 f4       	brne	.+12     	; 0x4e90 <vfprintf+0x248>
    4e84:	23 2d       	mov	r18, r3
    4e86:	2f 7e       	andi	r18, 0xEF	; 239
    4e88:	b2 2e       	mov	r11, r18
    4e8a:	2a e0       	ldi	r18, 0x0A	; 10
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	25 c0       	rjmp	.+74     	; 0x4eda <vfprintf+0x292>
    4e90:	93 2d       	mov	r25, r3
    4e92:	99 7f       	andi	r25, 0xF9	; 249
    4e94:	b9 2e       	mov	r11, r25
    4e96:	8f 36       	cpi	r24, 0x6F	; 111
    4e98:	c1 f0       	breq	.+48     	; 0x4eca <vfprintf+0x282>
    4e9a:	18 f4       	brcc	.+6      	; 0x4ea2 <vfprintf+0x25a>
    4e9c:	88 35       	cpi	r24, 0x58	; 88
    4e9e:	79 f0       	breq	.+30     	; 0x4ebe <vfprintf+0x276>
    4ea0:	ae c0       	rjmp	.+348    	; 0x4ffe <vfprintf+0x3b6>
    4ea2:	80 37       	cpi	r24, 0x70	; 112
    4ea4:	19 f0       	breq	.+6      	; 0x4eac <vfprintf+0x264>
    4ea6:	88 37       	cpi	r24, 0x78	; 120
    4ea8:	21 f0       	breq	.+8      	; 0x4eb2 <vfprintf+0x26a>
    4eaa:	a9 c0       	rjmp	.+338    	; 0x4ffe <vfprintf+0x3b6>
    4eac:	e9 2f       	mov	r30, r25
    4eae:	e0 61       	ori	r30, 0x10	; 16
    4eb0:	be 2e       	mov	r11, r30
    4eb2:	b4 fe       	sbrs	r11, 4
    4eb4:	0d c0       	rjmp	.+26     	; 0x4ed0 <vfprintf+0x288>
    4eb6:	fb 2d       	mov	r31, r11
    4eb8:	f4 60       	ori	r31, 0x04	; 4
    4eba:	bf 2e       	mov	r11, r31
    4ebc:	09 c0       	rjmp	.+18     	; 0x4ed0 <vfprintf+0x288>
    4ebe:	34 fe       	sbrs	r3, 4
    4ec0:	0a c0       	rjmp	.+20     	; 0x4ed6 <vfprintf+0x28e>
    4ec2:	29 2f       	mov	r18, r25
    4ec4:	26 60       	ori	r18, 0x06	; 6
    4ec6:	b2 2e       	mov	r11, r18
    4ec8:	06 c0       	rjmp	.+12     	; 0x4ed6 <vfprintf+0x28e>
    4eca:	28 e0       	ldi	r18, 0x08	; 8
    4ecc:	30 e0       	ldi	r19, 0x00	; 0
    4ece:	05 c0       	rjmp	.+10     	; 0x4eda <vfprintf+0x292>
    4ed0:	20 e1       	ldi	r18, 0x10	; 16
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	02 c0       	rjmp	.+4      	; 0x4eda <vfprintf+0x292>
    4ed6:	20 e1       	ldi	r18, 0x10	; 16
    4ed8:	32 e0       	ldi	r19, 0x02	; 2
    4eda:	f8 01       	movw	r30, r16
    4edc:	b7 fe       	sbrs	r11, 7
    4ede:	07 c0       	rjmp	.+14     	; 0x4eee <vfprintf+0x2a6>
    4ee0:	60 81       	ld	r22, Z
    4ee2:	71 81       	ldd	r23, Z+1	; 0x01
    4ee4:	82 81       	ldd	r24, Z+2	; 0x02
    4ee6:	93 81       	ldd	r25, Z+3	; 0x03
    4ee8:	0c 5f       	subi	r16, 0xFC	; 252
    4eea:	1f 4f       	sbci	r17, 0xFF	; 255
    4eec:	06 c0       	rjmp	.+12     	; 0x4efa <vfprintf+0x2b2>
    4eee:	60 81       	ld	r22, Z
    4ef0:	71 81       	ldd	r23, Z+1	; 0x01
    4ef2:	80 e0       	ldi	r24, 0x00	; 0
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	0e 5f       	subi	r16, 0xFE	; 254
    4ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    4efa:	a3 01       	movw	r20, r6
    4efc:	30 d2       	rcall	.+1120   	; 0x535e <__ultoa_invert>
    4efe:	88 2e       	mov	r8, r24
    4f00:	86 18       	sub	r8, r6
    4f02:	fb 2d       	mov	r31, r11
    4f04:	ff 77       	andi	r31, 0x7F	; 127
    4f06:	3f 2e       	mov	r3, r31
    4f08:	36 fe       	sbrs	r3, 6
    4f0a:	0d c0       	rjmp	.+26     	; 0x4f26 <vfprintf+0x2de>
    4f0c:	23 2d       	mov	r18, r3
    4f0e:	2e 7f       	andi	r18, 0xFE	; 254
    4f10:	a2 2e       	mov	r10, r18
    4f12:	89 14       	cp	r8, r9
    4f14:	58 f4       	brcc	.+22     	; 0x4f2c <vfprintf+0x2e4>
    4f16:	34 fe       	sbrs	r3, 4
    4f18:	0b c0       	rjmp	.+22     	; 0x4f30 <vfprintf+0x2e8>
    4f1a:	32 fc       	sbrc	r3, 2
    4f1c:	09 c0       	rjmp	.+18     	; 0x4f30 <vfprintf+0x2e8>
    4f1e:	83 2d       	mov	r24, r3
    4f20:	8e 7e       	andi	r24, 0xEE	; 238
    4f22:	a8 2e       	mov	r10, r24
    4f24:	05 c0       	rjmp	.+10     	; 0x4f30 <vfprintf+0x2e8>
    4f26:	b8 2c       	mov	r11, r8
    4f28:	a3 2c       	mov	r10, r3
    4f2a:	03 c0       	rjmp	.+6      	; 0x4f32 <vfprintf+0x2ea>
    4f2c:	b8 2c       	mov	r11, r8
    4f2e:	01 c0       	rjmp	.+2      	; 0x4f32 <vfprintf+0x2ea>
    4f30:	b9 2c       	mov	r11, r9
    4f32:	a4 fe       	sbrs	r10, 4
    4f34:	0f c0       	rjmp	.+30     	; 0x4f54 <vfprintf+0x30c>
    4f36:	fe 01       	movw	r30, r28
    4f38:	e8 0d       	add	r30, r8
    4f3a:	f1 1d       	adc	r31, r1
    4f3c:	80 81       	ld	r24, Z
    4f3e:	80 33       	cpi	r24, 0x30	; 48
    4f40:	21 f4       	brne	.+8      	; 0x4f4a <vfprintf+0x302>
    4f42:	9a 2d       	mov	r25, r10
    4f44:	99 7e       	andi	r25, 0xE9	; 233
    4f46:	a9 2e       	mov	r10, r25
    4f48:	09 c0       	rjmp	.+18     	; 0x4f5c <vfprintf+0x314>
    4f4a:	a2 fe       	sbrs	r10, 2
    4f4c:	06 c0       	rjmp	.+12     	; 0x4f5a <vfprintf+0x312>
    4f4e:	b3 94       	inc	r11
    4f50:	b3 94       	inc	r11
    4f52:	04 c0       	rjmp	.+8      	; 0x4f5c <vfprintf+0x314>
    4f54:	8a 2d       	mov	r24, r10
    4f56:	86 78       	andi	r24, 0x86	; 134
    4f58:	09 f0       	breq	.+2      	; 0x4f5c <vfprintf+0x314>
    4f5a:	b3 94       	inc	r11
    4f5c:	a3 fc       	sbrc	r10, 3
    4f5e:	10 c0       	rjmp	.+32     	; 0x4f80 <vfprintf+0x338>
    4f60:	a0 fe       	sbrs	r10, 0
    4f62:	06 c0       	rjmp	.+12     	; 0x4f70 <vfprintf+0x328>
    4f64:	b2 14       	cp	r11, r2
    4f66:	80 f4       	brcc	.+32     	; 0x4f88 <vfprintf+0x340>
    4f68:	28 0c       	add	r2, r8
    4f6a:	92 2c       	mov	r9, r2
    4f6c:	9b 18       	sub	r9, r11
    4f6e:	0d c0       	rjmp	.+26     	; 0x4f8a <vfprintf+0x342>
    4f70:	b2 14       	cp	r11, r2
    4f72:	58 f4       	brcc	.+22     	; 0x4f8a <vfprintf+0x342>
    4f74:	b6 01       	movw	r22, r12
    4f76:	80 e2       	ldi	r24, 0x20	; 32
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	b5 d1       	rcall	.+874    	; 0x52e6 <fputc>
    4f7c:	b3 94       	inc	r11
    4f7e:	f8 cf       	rjmp	.-16     	; 0x4f70 <vfprintf+0x328>
    4f80:	b2 14       	cp	r11, r2
    4f82:	18 f4       	brcc	.+6      	; 0x4f8a <vfprintf+0x342>
    4f84:	2b 18       	sub	r2, r11
    4f86:	02 c0       	rjmp	.+4      	; 0x4f8c <vfprintf+0x344>
    4f88:	98 2c       	mov	r9, r8
    4f8a:	21 2c       	mov	r2, r1
    4f8c:	a4 fe       	sbrs	r10, 4
    4f8e:	0f c0       	rjmp	.+30     	; 0x4fae <vfprintf+0x366>
    4f90:	b6 01       	movw	r22, r12
    4f92:	80 e3       	ldi	r24, 0x30	; 48
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	a7 d1       	rcall	.+846    	; 0x52e6 <fputc>
    4f98:	a2 fe       	sbrs	r10, 2
    4f9a:	16 c0       	rjmp	.+44     	; 0x4fc8 <vfprintf+0x380>
    4f9c:	a1 fc       	sbrc	r10, 1
    4f9e:	03 c0       	rjmp	.+6      	; 0x4fa6 <vfprintf+0x35e>
    4fa0:	88 e7       	ldi	r24, 0x78	; 120
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <vfprintf+0x362>
    4fa6:	88 e5       	ldi	r24, 0x58	; 88
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	b6 01       	movw	r22, r12
    4fac:	0c c0       	rjmp	.+24     	; 0x4fc6 <vfprintf+0x37e>
    4fae:	8a 2d       	mov	r24, r10
    4fb0:	86 78       	andi	r24, 0x86	; 134
    4fb2:	51 f0       	breq	.+20     	; 0x4fc8 <vfprintf+0x380>
    4fb4:	a1 fe       	sbrs	r10, 1
    4fb6:	02 c0       	rjmp	.+4      	; 0x4fbc <vfprintf+0x374>
    4fb8:	8b e2       	ldi	r24, 0x2B	; 43
    4fba:	01 c0       	rjmp	.+2      	; 0x4fbe <vfprintf+0x376>
    4fbc:	80 e2       	ldi	r24, 0x20	; 32
    4fbe:	a7 fc       	sbrc	r10, 7
    4fc0:	8d e2       	ldi	r24, 0x2D	; 45
    4fc2:	b6 01       	movw	r22, r12
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	8f d1       	rcall	.+798    	; 0x52e6 <fputc>
    4fc8:	89 14       	cp	r8, r9
    4fca:	30 f4       	brcc	.+12     	; 0x4fd8 <vfprintf+0x390>
    4fcc:	b6 01       	movw	r22, r12
    4fce:	80 e3       	ldi	r24, 0x30	; 48
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	89 d1       	rcall	.+786    	; 0x52e6 <fputc>
    4fd4:	9a 94       	dec	r9
    4fd6:	f8 cf       	rjmp	.-16     	; 0x4fc8 <vfprintf+0x380>
    4fd8:	8a 94       	dec	r8
    4fda:	f3 01       	movw	r30, r6
    4fdc:	e8 0d       	add	r30, r8
    4fde:	f1 1d       	adc	r31, r1
    4fe0:	80 81       	ld	r24, Z
    4fe2:	b6 01       	movw	r22, r12
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	7f d1       	rcall	.+766    	; 0x52e6 <fputc>
    4fe8:	81 10       	cpse	r8, r1
    4fea:	f6 cf       	rjmp	.-20     	; 0x4fd8 <vfprintf+0x390>
    4fec:	22 20       	and	r2, r2
    4fee:	09 f4       	brne	.+2      	; 0x4ff2 <vfprintf+0x3aa>
    4ff0:	4e ce       	rjmp	.-868    	; 0x4c8e <vfprintf+0x46>
    4ff2:	b6 01       	movw	r22, r12
    4ff4:	80 e2       	ldi	r24, 0x20	; 32
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	76 d1       	rcall	.+748    	; 0x52e6 <fputc>
    4ffa:	2a 94       	dec	r2
    4ffc:	f7 cf       	rjmp	.-18     	; 0x4fec <vfprintf+0x3a4>
    4ffe:	f6 01       	movw	r30, r12
    5000:	86 81       	ldd	r24, Z+6	; 0x06
    5002:	97 81       	ldd	r25, Z+7	; 0x07
    5004:	02 c0       	rjmp	.+4      	; 0x500a <vfprintf+0x3c2>
    5006:	8f ef       	ldi	r24, 0xFF	; 255
    5008:	9f ef       	ldi	r25, 0xFF	; 255
    500a:	2b 96       	adiw	r28, 0x0b	; 11
    500c:	cd bf       	out	0x3d, r28	; 61
    500e:	de bf       	out	0x3e, r29	; 62
    5010:	df 91       	pop	r29
    5012:	cf 91       	pop	r28
    5014:	1f 91       	pop	r17
    5016:	0f 91       	pop	r16
    5018:	ff 90       	pop	r15
    501a:	ef 90       	pop	r14
    501c:	df 90       	pop	r13
    501e:	cf 90       	pop	r12
    5020:	bf 90       	pop	r11
    5022:	af 90       	pop	r10
    5024:	9f 90       	pop	r9
    5026:	8f 90       	pop	r8
    5028:	7f 90       	pop	r7
    502a:	6f 90       	pop	r6
    502c:	5f 90       	pop	r5
    502e:	4f 90       	pop	r4
    5030:	3f 90       	pop	r3
    5032:	2f 90       	pop	r2
    5034:	08 95       	ret

00005036 <calloc>:
    5036:	0f 93       	push	r16
    5038:	1f 93       	push	r17
    503a:	cf 93       	push	r28
    503c:	df 93       	push	r29
    503e:	86 9f       	mul	r24, r22
    5040:	80 01       	movw	r16, r0
    5042:	87 9f       	mul	r24, r23
    5044:	10 0d       	add	r17, r0
    5046:	96 9f       	mul	r25, r22
    5048:	10 0d       	add	r17, r0
    504a:	11 24       	eor	r1, r1
    504c:	c8 01       	movw	r24, r16
    504e:	0d d0       	rcall	.+26     	; 0x506a <malloc>
    5050:	ec 01       	movw	r28, r24
    5052:	00 97       	sbiw	r24, 0x00	; 0
    5054:	21 f0       	breq	.+8      	; 0x505e <calloc+0x28>
    5056:	a8 01       	movw	r20, r16
    5058:	60 e0       	ldi	r22, 0x00	; 0
    505a:	70 e0       	ldi	r23, 0x00	; 0
    505c:	32 d1       	rcall	.+612    	; 0x52c2 <memset>
    505e:	ce 01       	movw	r24, r28
    5060:	df 91       	pop	r29
    5062:	cf 91       	pop	r28
    5064:	1f 91       	pop	r17
    5066:	0f 91       	pop	r16
    5068:	08 95       	ret

0000506a <malloc>:
    506a:	0f 93       	push	r16
    506c:	1f 93       	push	r17
    506e:	cf 93       	push	r28
    5070:	df 93       	push	r29
    5072:	82 30       	cpi	r24, 0x02	; 2
    5074:	91 05       	cpc	r25, r1
    5076:	10 f4       	brcc	.+4      	; 0x507c <malloc+0x12>
    5078:	82 e0       	ldi	r24, 0x02	; 2
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	e0 91 55 24 	lds	r30, 0x2455	; 0x802455 <__flp>
    5080:	f0 91 56 24 	lds	r31, 0x2456	; 0x802456 <__flp+0x1>
    5084:	20 e0       	ldi	r18, 0x00	; 0
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	a0 e0       	ldi	r26, 0x00	; 0
    508a:	b0 e0       	ldi	r27, 0x00	; 0
    508c:	30 97       	sbiw	r30, 0x00	; 0
    508e:	19 f1       	breq	.+70     	; 0x50d6 <malloc+0x6c>
    5090:	40 81       	ld	r20, Z
    5092:	51 81       	ldd	r21, Z+1	; 0x01
    5094:	02 81       	ldd	r16, Z+2	; 0x02
    5096:	13 81       	ldd	r17, Z+3	; 0x03
    5098:	48 17       	cp	r20, r24
    509a:	59 07       	cpc	r21, r25
    509c:	c8 f0       	brcs	.+50     	; 0x50d0 <malloc+0x66>
    509e:	84 17       	cp	r24, r20
    50a0:	95 07       	cpc	r25, r21
    50a2:	69 f4       	brne	.+26     	; 0x50be <malloc+0x54>
    50a4:	10 97       	sbiw	r26, 0x00	; 0
    50a6:	31 f0       	breq	.+12     	; 0x50b4 <malloc+0x4a>
    50a8:	12 96       	adiw	r26, 0x02	; 2
    50aa:	0c 93       	st	X, r16
    50ac:	12 97       	sbiw	r26, 0x02	; 2
    50ae:	13 96       	adiw	r26, 0x03	; 3
    50b0:	1c 93       	st	X, r17
    50b2:	27 c0       	rjmp	.+78     	; 0x5102 <malloc+0x98>
    50b4:	00 93 55 24 	sts	0x2455, r16	; 0x802455 <__flp>
    50b8:	10 93 56 24 	sts	0x2456, r17	; 0x802456 <__flp+0x1>
    50bc:	22 c0       	rjmp	.+68     	; 0x5102 <malloc+0x98>
    50be:	21 15       	cp	r18, r1
    50c0:	31 05       	cpc	r19, r1
    50c2:	19 f0       	breq	.+6      	; 0x50ca <malloc+0x60>
    50c4:	42 17       	cp	r20, r18
    50c6:	53 07       	cpc	r21, r19
    50c8:	18 f4       	brcc	.+6      	; 0x50d0 <malloc+0x66>
    50ca:	9a 01       	movw	r18, r20
    50cc:	bd 01       	movw	r22, r26
    50ce:	ef 01       	movw	r28, r30
    50d0:	df 01       	movw	r26, r30
    50d2:	f8 01       	movw	r30, r16
    50d4:	db cf       	rjmp	.-74     	; 0x508c <malloc+0x22>
    50d6:	21 15       	cp	r18, r1
    50d8:	31 05       	cpc	r19, r1
    50da:	f9 f0       	breq	.+62     	; 0x511a <malloc+0xb0>
    50dc:	28 1b       	sub	r18, r24
    50de:	39 0b       	sbc	r19, r25
    50e0:	24 30       	cpi	r18, 0x04	; 4
    50e2:	31 05       	cpc	r19, r1
    50e4:	80 f4       	brcc	.+32     	; 0x5106 <malloc+0x9c>
    50e6:	8a 81       	ldd	r24, Y+2	; 0x02
    50e8:	9b 81       	ldd	r25, Y+3	; 0x03
    50ea:	61 15       	cp	r22, r1
    50ec:	71 05       	cpc	r23, r1
    50ee:	21 f0       	breq	.+8      	; 0x50f8 <malloc+0x8e>
    50f0:	fb 01       	movw	r30, r22
    50f2:	82 83       	std	Z+2, r24	; 0x02
    50f4:	93 83       	std	Z+3, r25	; 0x03
    50f6:	04 c0       	rjmp	.+8      	; 0x5100 <malloc+0x96>
    50f8:	80 93 55 24 	sts	0x2455, r24	; 0x802455 <__flp>
    50fc:	90 93 56 24 	sts	0x2456, r25	; 0x802456 <__flp+0x1>
    5100:	fe 01       	movw	r30, r28
    5102:	32 96       	adiw	r30, 0x02	; 2
    5104:	44 c0       	rjmp	.+136    	; 0x518e <malloc+0x124>
    5106:	fe 01       	movw	r30, r28
    5108:	e2 0f       	add	r30, r18
    510a:	f3 1f       	adc	r31, r19
    510c:	81 93       	st	Z+, r24
    510e:	91 93       	st	Z+, r25
    5110:	22 50       	subi	r18, 0x02	; 2
    5112:	31 09       	sbc	r19, r1
    5114:	28 83       	st	Y, r18
    5116:	39 83       	std	Y+1, r19	; 0x01
    5118:	3a c0       	rjmp	.+116    	; 0x518e <malloc+0x124>
    511a:	20 91 53 24 	lds	r18, 0x2453	; 0x802453 <__brkval>
    511e:	30 91 54 24 	lds	r19, 0x2454	; 0x802454 <__brkval+0x1>
    5122:	23 2b       	or	r18, r19
    5124:	41 f4       	brne	.+16     	; 0x5136 <malloc+0xcc>
    5126:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    512a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    512e:	20 93 53 24 	sts	0x2453, r18	; 0x802453 <__brkval>
    5132:	30 93 54 24 	sts	0x2454, r19	; 0x802454 <__brkval+0x1>
    5136:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    513a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    513e:	21 15       	cp	r18, r1
    5140:	31 05       	cpc	r19, r1
    5142:	41 f4       	brne	.+16     	; 0x5154 <malloc+0xea>
    5144:	2d b7       	in	r18, 0x3d	; 61
    5146:	3e b7       	in	r19, 0x3e	; 62
    5148:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    514c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    5150:	24 1b       	sub	r18, r20
    5152:	35 0b       	sbc	r19, r21
    5154:	e0 91 53 24 	lds	r30, 0x2453	; 0x802453 <__brkval>
    5158:	f0 91 54 24 	lds	r31, 0x2454	; 0x802454 <__brkval+0x1>
    515c:	e2 17       	cp	r30, r18
    515e:	f3 07       	cpc	r31, r19
    5160:	a0 f4       	brcc	.+40     	; 0x518a <malloc+0x120>
    5162:	2e 1b       	sub	r18, r30
    5164:	3f 0b       	sbc	r19, r31
    5166:	28 17       	cp	r18, r24
    5168:	39 07       	cpc	r19, r25
    516a:	78 f0       	brcs	.+30     	; 0x518a <malloc+0x120>
    516c:	ac 01       	movw	r20, r24
    516e:	4e 5f       	subi	r20, 0xFE	; 254
    5170:	5f 4f       	sbci	r21, 0xFF	; 255
    5172:	24 17       	cp	r18, r20
    5174:	35 07       	cpc	r19, r21
    5176:	48 f0       	brcs	.+18     	; 0x518a <malloc+0x120>
    5178:	4e 0f       	add	r20, r30
    517a:	5f 1f       	adc	r21, r31
    517c:	40 93 53 24 	sts	0x2453, r20	; 0x802453 <__brkval>
    5180:	50 93 54 24 	sts	0x2454, r21	; 0x802454 <__brkval+0x1>
    5184:	81 93       	st	Z+, r24
    5186:	91 93       	st	Z+, r25
    5188:	02 c0       	rjmp	.+4      	; 0x518e <malloc+0x124>
    518a:	e0 e0       	ldi	r30, 0x00	; 0
    518c:	f0 e0       	ldi	r31, 0x00	; 0
    518e:	cf 01       	movw	r24, r30
    5190:	df 91       	pop	r29
    5192:	cf 91       	pop	r28
    5194:	1f 91       	pop	r17
    5196:	0f 91       	pop	r16
    5198:	08 95       	ret

0000519a <free>:
    519a:	cf 93       	push	r28
    519c:	df 93       	push	r29
    519e:	00 97       	sbiw	r24, 0x00	; 0
    51a0:	09 f4       	brne	.+2      	; 0x51a4 <free+0xa>
    51a2:	81 c0       	rjmp	.+258    	; 0x52a6 <free+0x10c>
    51a4:	fc 01       	movw	r30, r24
    51a6:	32 97       	sbiw	r30, 0x02	; 2
    51a8:	12 82       	std	Z+2, r1	; 0x02
    51aa:	13 82       	std	Z+3, r1	; 0x03
    51ac:	a0 91 55 24 	lds	r26, 0x2455	; 0x802455 <__flp>
    51b0:	b0 91 56 24 	lds	r27, 0x2456	; 0x802456 <__flp+0x1>
    51b4:	10 97       	sbiw	r26, 0x00	; 0
    51b6:	81 f4       	brne	.+32     	; 0x51d8 <free+0x3e>
    51b8:	20 81       	ld	r18, Z
    51ba:	31 81       	ldd	r19, Z+1	; 0x01
    51bc:	82 0f       	add	r24, r18
    51be:	93 1f       	adc	r25, r19
    51c0:	20 91 53 24 	lds	r18, 0x2453	; 0x802453 <__brkval>
    51c4:	30 91 54 24 	lds	r19, 0x2454	; 0x802454 <__brkval+0x1>
    51c8:	28 17       	cp	r18, r24
    51ca:	39 07       	cpc	r19, r25
    51cc:	51 f5       	brne	.+84     	; 0x5222 <free+0x88>
    51ce:	e0 93 53 24 	sts	0x2453, r30	; 0x802453 <__brkval>
    51d2:	f0 93 54 24 	sts	0x2454, r31	; 0x802454 <__brkval+0x1>
    51d6:	67 c0       	rjmp	.+206    	; 0x52a6 <free+0x10c>
    51d8:	ed 01       	movw	r28, r26
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	ce 17       	cp	r28, r30
    51e0:	df 07       	cpc	r29, r31
    51e2:	40 f4       	brcc	.+16     	; 0x51f4 <free+0x5a>
    51e4:	4a 81       	ldd	r20, Y+2	; 0x02
    51e6:	5b 81       	ldd	r21, Y+3	; 0x03
    51e8:	9e 01       	movw	r18, r28
    51ea:	41 15       	cp	r20, r1
    51ec:	51 05       	cpc	r21, r1
    51ee:	f1 f0       	breq	.+60     	; 0x522c <free+0x92>
    51f0:	ea 01       	movw	r28, r20
    51f2:	f5 cf       	rjmp	.-22     	; 0x51de <free+0x44>
    51f4:	c2 83       	std	Z+2, r28	; 0x02
    51f6:	d3 83       	std	Z+3, r29	; 0x03
    51f8:	40 81       	ld	r20, Z
    51fa:	51 81       	ldd	r21, Z+1	; 0x01
    51fc:	84 0f       	add	r24, r20
    51fe:	95 1f       	adc	r25, r21
    5200:	c8 17       	cp	r28, r24
    5202:	d9 07       	cpc	r29, r25
    5204:	59 f4       	brne	.+22     	; 0x521c <free+0x82>
    5206:	88 81       	ld	r24, Y
    5208:	99 81       	ldd	r25, Y+1	; 0x01
    520a:	84 0f       	add	r24, r20
    520c:	95 1f       	adc	r25, r21
    520e:	02 96       	adiw	r24, 0x02	; 2
    5210:	80 83       	st	Z, r24
    5212:	91 83       	std	Z+1, r25	; 0x01
    5214:	8a 81       	ldd	r24, Y+2	; 0x02
    5216:	9b 81       	ldd	r25, Y+3	; 0x03
    5218:	82 83       	std	Z+2, r24	; 0x02
    521a:	93 83       	std	Z+3, r25	; 0x03
    521c:	21 15       	cp	r18, r1
    521e:	31 05       	cpc	r19, r1
    5220:	29 f4       	brne	.+10     	; 0x522c <free+0x92>
    5222:	e0 93 55 24 	sts	0x2455, r30	; 0x802455 <__flp>
    5226:	f0 93 56 24 	sts	0x2456, r31	; 0x802456 <__flp+0x1>
    522a:	3d c0       	rjmp	.+122    	; 0x52a6 <free+0x10c>
    522c:	e9 01       	movw	r28, r18
    522e:	ea 83       	std	Y+2, r30	; 0x02
    5230:	fb 83       	std	Y+3, r31	; 0x03
    5232:	49 91       	ld	r20, Y+
    5234:	59 91       	ld	r21, Y+
    5236:	c4 0f       	add	r28, r20
    5238:	d5 1f       	adc	r29, r21
    523a:	ec 17       	cp	r30, r28
    523c:	fd 07       	cpc	r31, r29
    523e:	61 f4       	brne	.+24     	; 0x5258 <free+0xbe>
    5240:	80 81       	ld	r24, Z
    5242:	91 81       	ldd	r25, Z+1	; 0x01
    5244:	84 0f       	add	r24, r20
    5246:	95 1f       	adc	r25, r21
    5248:	02 96       	adiw	r24, 0x02	; 2
    524a:	e9 01       	movw	r28, r18
    524c:	88 83       	st	Y, r24
    524e:	99 83       	std	Y+1, r25	; 0x01
    5250:	82 81       	ldd	r24, Z+2	; 0x02
    5252:	93 81       	ldd	r25, Z+3	; 0x03
    5254:	8a 83       	std	Y+2, r24	; 0x02
    5256:	9b 83       	std	Y+3, r25	; 0x03
    5258:	e0 e0       	ldi	r30, 0x00	; 0
    525a:	f0 e0       	ldi	r31, 0x00	; 0
    525c:	12 96       	adiw	r26, 0x02	; 2
    525e:	8d 91       	ld	r24, X+
    5260:	9c 91       	ld	r25, X
    5262:	13 97       	sbiw	r26, 0x03	; 3
    5264:	00 97       	sbiw	r24, 0x00	; 0
    5266:	19 f0       	breq	.+6      	; 0x526e <free+0xd4>
    5268:	fd 01       	movw	r30, r26
    526a:	dc 01       	movw	r26, r24
    526c:	f7 cf       	rjmp	.-18     	; 0x525c <free+0xc2>
    526e:	8d 91       	ld	r24, X+
    5270:	9c 91       	ld	r25, X
    5272:	11 97       	sbiw	r26, 0x01	; 1
    5274:	9d 01       	movw	r18, r26
    5276:	2e 5f       	subi	r18, 0xFE	; 254
    5278:	3f 4f       	sbci	r19, 0xFF	; 255
    527a:	82 0f       	add	r24, r18
    527c:	93 1f       	adc	r25, r19
    527e:	20 91 53 24 	lds	r18, 0x2453	; 0x802453 <__brkval>
    5282:	30 91 54 24 	lds	r19, 0x2454	; 0x802454 <__brkval+0x1>
    5286:	28 17       	cp	r18, r24
    5288:	39 07       	cpc	r19, r25
    528a:	69 f4       	brne	.+26     	; 0x52a6 <free+0x10c>
    528c:	30 97       	sbiw	r30, 0x00	; 0
    528e:	29 f4       	brne	.+10     	; 0x529a <free+0x100>
    5290:	10 92 55 24 	sts	0x2455, r1	; 0x802455 <__flp>
    5294:	10 92 56 24 	sts	0x2456, r1	; 0x802456 <__flp+0x1>
    5298:	02 c0       	rjmp	.+4      	; 0x529e <free+0x104>
    529a:	12 82       	std	Z+2, r1	; 0x02
    529c:	13 82       	std	Z+3, r1	; 0x03
    529e:	a0 93 53 24 	sts	0x2453, r26	; 0x802453 <__brkval>
    52a2:	b0 93 54 24 	sts	0x2454, r27	; 0x802454 <__brkval+0x1>
    52a6:	df 91       	pop	r29
    52a8:	cf 91       	pop	r28
    52aa:	08 95       	ret

000052ac <strnlen_P>:
    52ac:	fc 01       	movw	r30, r24
    52ae:	05 90       	lpm	r0, Z+
    52b0:	61 50       	subi	r22, 0x01	; 1
    52b2:	70 40       	sbci	r23, 0x00	; 0
    52b4:	01 10       	cpse	r0, r1
    52b6:	d8 f7       	brcc	.-10     	; 0x52ae <strnlen_P+0x2>
    52b8:	80 95       	com	r24
    52ba:	90 95       	com	r25
    52bc:	8e 0f       	add	r24, r30
    52be:	9f 1f       	adc	r25, r31
    52c0:	08 95       	ret

000052c2 <memset>:
    52c2:	dc 01       	movw	r26, r24
    52c4:	01 c0       	rjmp	.+2      	; 0x52c8 <memset+0x6>
    52c6:	6d 93       	st	X+, r22
    52c8:	41 50       	subi	r20, 0x01	; 1
    52ca:	50 40       	sbci	r21, 0x00	; 0
    52cc:	e0 f7       	brcc	.-8      	; 0x52c6 <memset+0x4>
    52ce:	08 95       	ret

000052d0 <strnlen>:
    52d0:	fc 01       	movw	r30, r24
    52d2:	61 50       	subi	r22, 0x01	; 1
    52d4:	70 40       	sbci	r23, 0x00	; 0
    52d6:	01 90       	ld	r0, Z+
    52d8:	01 10       	cpse	r0, r1
    52da:	d8 f7       	brcc	.-10     	; 0x52d2 <strnlen+0x2>
    52dc:	80 95       	com	r24
    52de:	90 95       	com	r25
    52e0:	8e 0f       	add	r24, r30
    52e2:	9f 1f       	adc	r25, r31
    52e4:	08 95       	ret

000052e6 <fputc>:
    52e6:	0f 93       	push	r16
    52e8:	1f 93       	push	r17
    52ea:	cf 93       	push	r28
    52ec:	df 93       	push	r29
    52ee:	fb 01       	movw	r30, r22
    52f0:	23 81       	ldd	r18, Z+3	; 0x03
    52f2:	21 fd       	sbrc	r18, 1
    52f4:	03 c0       	rjmp	.+6      	; 0x52fc <fputc+0x16>
    52f6:	8f ef       	ldi	r24, 0xFF	; 255
    52f8:	9f ef       	ldi	r25, 0xFF	; 255
    52fa:	2c c0       	rjmp	.+88     	; 0x5354 <fputc+0x6e>
    52fc:	22 ff       	sbrs	r18, 2
    52fe:	16 c0       	rjmp	.+44     	; 0x532c <fputc+0x46>
    5300:	46 81       	ldd	r20, Z+6	; 0x06
    5302:	57 81       	ldd	r21, Z+7	; 0x07
    5304:	24 81       	ldd	r18, Z+4	; 0x04
    5306:	35 81       	ldd	r19, Z+5	; 0x05
    5308:	42 17       	cp	r20, r18
    530a:	53 07       	cpc	r21, r19
    530c:	44 f4       	brge	.+16     	; 0x531e <fputc+0x38>
    530e:	a0 81       	ld	r26, Z
    5310:	b1 81       	ldd	r27, Z+1	; 0x01
    5312:	9d 01       	movw	r18, r26
    5314:	2f 5f       	subi	r18, 0xFF	; 255
    5316:	3f 4f       	sbci	r19, 0xFF	; 255
    5318:	20 83       	st	Z, r18
    531a:	31 83       	std	Z+1, r19	; 0x01
    531c:	8c 93       	st	X, r24
    531e:	26 81       	ldd	r18, Z+6	; 0x06
    5320:	37 81       	ldd	r19, Z+7	; 0x07
    5322:	2f 5f       	subi	r18, 0xFF	; 255
    5324:	3f 4f       	sbci	r19, 0xFF	; 255
    5326:	26 83       	std	Z+6, r18	; 0x06
    5328:	37 83       	std	Z+7, r19	; 0x07
    532a:	14 c0       	rjmp	.+40     	; 0x5354 <fputc+0x6e>
    532c:	8b 01       	movw	r16, r22
    532e:	ec 01       	movw	r28, r24
    5330:	fb 01       	movw	r30, r22
    5332:	00 84       	ldd	r0, Z+8	; 0x08
    5334:	f1 85       	ldd	r31, Z+9	; 0x09
    5336:	e0 2d       	mov	r30, r0
    5338:	19 95       	eicall
    533a:	89 2b       	or	r24, r25
    533c:	e1 f6       	brne	.-72     	; 0x52f6 <fputc+0x10>
    533e:	d8 01       	movw	r26, r16
    5340:	16 96       	adiw	r26, 0x06	; 6
    5342:	8d 91       	ld	r24, X+
    5344:	9c 91       	ld	r25, X
    5346:	17 97       	sbiw	r26, 0x07	; 7
    5348:	01 96       	adiw	r24, 0x01	; 1
    534a:	16 96       	adiw	r26, 0x06	; 6
    534c:	8d 93       	st	X+, r24
    534e:	9c 93       	st	X, r25
    5350:	17 97       	sbiw	r26, 0x07	; 7
    5352:	ce 01       	movw	r24, r28
    5354:	df 91       	pop	r29
    5356:	cf 91       	pop	r28
    5358:	1f 91       	pop	r17
    535a:	0f 91       	pop	r16
    535c:	08 95       	ret

0000535e <__ultoa_invert>:
    535e:	fa 01       	movw	r30, r20
    5360:	aa 27       	eor	r26, r26
    5362:	28 30       	cpi	r18, 0x08	; 8
    5364:	51 f1       	breq	.+84     	; 0x53ba <__ultoa_invert+0x5c>
    5366:	20 31       	cpi	r18, 0x10	; 16
    5368:	81 f1       	breq	.+96     	; 0x53ca <__ultoa_invert+0x6c>
    536a:	e8 94       	clt
    536c:	6f 93       	push	r22
    536e:	6e 7f       	andi	r22, 0xFE	; 254
    5370:	6e 5f       	subi	r22, 0xFE	; 254
    5372:	7f 4f       	sbci	r23, 0xFF	; 255
    5374:	8f 4f       	sbci	r24, 0xFF	; 255
    5376:	9f 4f       	sbci	r25, 0xFF	; 255
    5378:	af 4f       	sbci	r26, 0xFF	; 255
    537a:	b1 e0       	ldi	r27, 0x01	; 1
    537c:	3e d0       	rcall	.+124    	; 0x53fa <__ultoa_invert+0x9c>
    537e:	b4 e0       	ldi	r27, 0x04	; 4
    5380:	3c d0       	rcall	.+120    	; 0x53fa <__ultoa_invert+0x9c>
    5382:	67 0f       	add	r22, r23
    5384:	78 1f       	adc	r23, r24
    5386:	89 1f       	adc	r24, r25
    5388:	9a 1f       	adc	r25, r26
    538a:	a1 1d       	adc	r26, r1
    538c:	68 0f       	add	r22, r24
    538e:	79 1f       	adc	r23, r25
    5390:	8a 1f       	adc	r24, r26
    5392:	91 1d       	adc	r25, r1
    5394:	a1 1d       	adc	r26, r1
    5396:	6a 0f       	add	r22, r26
    5398:	71 1d       	adc	r23, r1
    539a:	81 1d       	adc	r24, r1
    539c:	91 1d       	adc	r25, r1
    539e:	a1 1d       	adc	r26, r1
    53a0:	20 d0       	rcall	.+64     	; 0x53e2 <__ultoa_invert+0x84>
    53a2:	09 f4       	brne	.+2      	; 0x53a6 <__ultoa_invert+0x48>
    53a4:	68 94       	set
    53a6:	3f 91       	pop	r19
    53a8:	2a e0       	ldi	r18, 0x0A	; 10
    53aa:	26 9f       	mul	r18, r22
    53ac:	11 24       	eor	r1, r1
    53ae:	30 19       	sub	r19, r0
    53b0:	30 5d       	subi	r19, 0xD0	; 208
    53b2:	31 93       	st	Z+, r19
    53b4:	de f6       	brtc	.-74     	; 0x536c <__ultoa_invert+0xe>
    53b6:	cf 01       	movw	r24, r30
    53b8:	08 95       	ret
    53ba:	46 2f       	mov	r20, r22
    53bc:	47 70       	andi	r20, 0x07	; 7
    53be:	40 5d       	subi	r20, 0xD0	; 208
    53c0:	41 93       	st	Z+, r20
    53c2:	b3 e0       	ldi	r27, 0x03	; 3
    53c4:	0f d0       	rcall	.+30     	; 0x53e4 <__ultoa_invert+0x86>
    53c6:	c9 f7       	brne	.-14     	; 0x53ba <__ultoa_invert+0x5c>
    53c8:	f6 cf       	rjmp	.-20     	; 0x53b6 <__ultoa_invert+0x58>
    53ca:	46 2f       	mov	r20, r22
    53cc:	4f 70       	andi	r20, 0x0F	; 15
    53ce:	40 5d       	subi	r20, 0xD0	; 208
    53d0:	4a 33       	cpi	r20, 0x3A	; 58
    53d2:	18 f0       	brcs	.+6      	; 0x53da <__ultoa_invert+0x7c>
    53d4:	49 5d       	subi	r20, 0xD9	; 217
    53d6:	31 fd       	sbrc	r19, 1
    53d8:	40 52       	subi	r20, 0x20	; 32
    53da:	41 93       	st	Z+, r20
    53dc:	02 d0       	rcall	.+4      	; 0x53e2 <__ultoa_invert+0x84>
    53de:	a9 f7       	brne	.-22     	; 0x53ca <__ultoa_invert+0x6c>
    53e0:	ea cf       	rjmp	.-44     	; 0x53b6 <__ultoa_invert+0x58>
    53e2:	b4 e0       	ldi	r27, 0x04	; 4
    53e4:	a6 95       	lsr	r26
    53e6:	97 95       	ror	r25
    53e8:	87 95       	ror	r24
    53ea:	77 95       	ror	r23
    53ec:	67 95       	ror	r22
    53ee:	ba 95       	dec	r27
    53f0:	c9 f7       	brne	.-14     	; 0x53e4 <__ultoa_invert+0x86>
    53f2:	00 97       	sbiw	r24, 0x00	; 0
    53f4:	61 05       	cpc	r22, r1
    53f6:	71 05       	cpc	r23, r1
    53f8:	08 95       	ret
    53fa:	9b 01       	movw	r18, r22
    53fc:	ac 01       	movw	r20, r24
    53fe:	0a 2e       	mov	r0, r26
    5400:	06 94       	lsr	r0
    5402:	57 95       	ror	r21
    5404:	47 95       	ror	r20
    5406:	37 95       	ror	r19
    5408:	27 95       	ror	r18
    540a:	ba 95       	dec	r27
    540c:	c9 f7       	brne	.-14     	; 0x5400 <__ultoa_invert+0xa2>
    540e:	62 0f       	add	r22, r18
    5410:	73 1f       	adc	r23, r19
    5412:	84 1f       	adc	r24, r20
    5414:	95 1f       	adc	r25, r21
    5416:	a0 1d       	adc	r26, r0
    5418:	08 95       	ret

0000541a <_exit>:
    541a:	f8 94       	cli

0000541c <__stop_program>:
    541c:	ff cf       	rjmp	.-2      	; 0x541c <__stop_program>
