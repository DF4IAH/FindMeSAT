
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011a22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .BOOT         00000044  00011a22  00011a22  00011ab6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000001ac  00802000  00011a66  00011afa  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000ce7  008021ac  008021ac  00011ca8  2**2
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00011ca6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00011d04  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000d98  00000000  00000000  00011d48  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000297ac  00000000  00000000  00012ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007e14  00000000  00000000  0003c28c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00016428  00000000  00000000  000440a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003f50  00000000  00000000  0005a4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00045010  00000000  00000000  0005e418  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00012bec  00000000  00000000  000a3428  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e28  00000000  00000000  000b6018  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00010636  00000000  00000000  000b6e40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__ctors_end>
       4:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
       8:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
       c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      10:	0c 94 81 6f 	jmp	0xdf02	; 0xdf02 <__vector_4>
      14:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      18:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <__vector_6>
      1c:	0c 94 f0 26 	jmp	0x4de0	; 0x4de0 <__vector_7>
      20:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__vector_8>
      24:	0c 94 40 27 	jmp	0x4e80	; 0x4e80 <__vector_9>
      28:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      2c:	0c 94 19 28 	jmp	0x5032	; 0x5032 <__vector_11>
      30:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      34:	0c 94 f6 53 	jmp	0xa7ec	; 0xa7ec <__vector_13>
      38:	0c 94 4e 4c 	jmp	0x989c	; 0x989c <__vector_14>
      3c:	0c 94 7b 4c 	jmp	0x98f6	; 0x98f6 <__vector_15>
      40:	0c 94 a8 4c 	jmp	0x9950	; 0x9950 <__vector_16>
      44:	0c 94 d5 4c 	jmp	0x99aa	; 0x99aa <__vector_17>
      48:	0c 94 02 4d 	jmp	0x9a04	; 0x9a04 <__vector_18>
      4c:	0c 94 2f 4d 	jmp	0x9a5e	; 0x9a5e <__vector_19>
      50:	0c 94 5c 4d 	jmp	0x9ab8	; 0x9ab8 <__vector_20>
      54:	0c 94 89 4d 	jmp	0x9b12	; 0x9b12 <__vector_21>
      58:	0c 94 b6 4d 	jmp	0x9b6c	; 0x9b6c <__vector_22>
      5c:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <__vector_23>
      60:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      64:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      68:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      6c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      70:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      74:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      78:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      7c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      80:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      84:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      88:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      8c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      90:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      94:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      98:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      9c:	0c 94 51 49 	jmp	0x92a2	; 0x92a2 <__vector_39>
      a0:	0c 94 83 49 	jmp	0x9306	; 0x9306 <__vector_40>
      a4:	0c 94 b5 49 	jmp	0x936a	; 0x936a <__vector_41>
      a8:	0c 94 e7 49 	jmp	0x93ce	; 0x93ce <__vector_42>
      ac:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      b0:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      b4:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      b8:	0c 94 1d 54 	jmp	0xa83a	; 0xa83a <__vector_46>
      bc:	0c 94 d2 4f 	jmp	0x9fa4	; 0x9fa4 <__vector_47>
      c0:	0c 94 ff 4f 	jmp	0x9ffe	; 0x9ffe <__vector_48>
      c4:	0c 94 2c 50 	jmp	0xa058	; 0xa058 <__vector_49>
      c8:	0c 94 59 50 	jmp	0xa0b2	; 0xa0b2 <__vector_50>
      cc:	0c 94 86 50 	jmp	0xa10c	; 0xa10c <__vector_51>
      d0:	0c 94 b3 50 	jmp	0xa166	; 0xa166 <__vector_52>
      d4:	0c 94 e0 50 	jmp	0xa1c0	; 0xa1c0 <__vector_53>
      d8:	0c 94 0d 51 	jmp	0xa21a	; 0xa21a <__vector_54>
      dc:	0c 94 3a 51 	jmp	0xa274	; 0xa274 <__vector_55>
      e0:	0c 94 67 51 	jmp	0xa2ce	; 0xa2ce <__vector_56>
      e4:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      e8:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      ec:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      f0:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      f4:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      f8:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
      fc:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     100:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     104:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     108:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     10c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     110:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     114:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     118:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     11c:	0c 94 89 48 	jmp	0x9112	; 0x9112 <__vector_71>
     120:	0c 94 bb 48 	jmp	0x9176	; 0x9176 <__vector_72>
     124:	0c 94 ed 48 	jmp	0x91da	; 0x91da <__vector_73>
     128:	0c 94 1f 49 	jmp	0x923e	; 0x923e <__vector_74>
     12c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     130:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     134:	0c 94 10 4e 	jmp	0x9c20	; 0x9c20 <__vector_77>
     138:	0c 94 3d 4e 	jmp	0x9c7a	; 0x9c7a <__vector_78>
     13c:	0c 94 6a 4e 	jmp	0x9cd4	; 0x9cd4 <__vector_79>
     140:	0c 94 97 4e 	jmp	0x9d2e	; 0x9d2e <__vector_80>
     144:	0c 94 c4 4e 	jmp	0x9d88	; 0x9d88 <__vector_81>
     148:	0c 94 f1 4e 	jmp	0x9de2	; 0x9de2 <__vector_82>
     14c:	0c 94 1e 4f 	jmp	0x9e3c	; 0x9e3c <__vector_83>
     150:	0c 94 4b 4f 	jmp	0x9e96	; 0x9e96 <__vector_84>
     154:	0c 94 78 4f 	jmp	0x9ef0	; 0x9ef0 <__vector_85>
     158:	0c 94 a5 4f 	jmp	0x9f4a	; 0x9f4a <__vector_86>
     15c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     160:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     164:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     168:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     16c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     170:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     174:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     178:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     17c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     180:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     184:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     188:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     18c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     190:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     194:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     198:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     19c:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1a0:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1a4:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1a8:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1ac:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1b0:	0c 94 94 51 	jmp	0xa328	; 0xa328 <__vector_108>
     1b4:	0c 94 c1 51 	jmp	0xa382	; 0xa382 <__vector_109>
     1b8:	0c 94 ee 51 	jmp	0xa3dc	; 0xa3dc <__vector_110>
     1bc:	0c 94 1b 52 	jmp	0xa436	; 0xa436 <__vector_111>
     1c0:	0c 94 48 52 	jmp	0xa490	; 0xa490 <__vector_112>
     1c4:	0c 94 75 52 	jmp	0xa4ea	; 0xa4ea <__vector_113>
     1c8:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1cc:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1d0:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1d4:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1d8:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1dc:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__vector_119>
     1e0:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1e4:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1e8:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1ec:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1f0:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__bad_interrupt>
     1f4:	0c 94 07 5b 	jmp	0xb60e	; 0xb60e <__vector_125>
     1f8:	0c 94 c3 5b 	jmp	0xb786	; 0xb786 <__vector_126>
     1fc:	bb 55       	subi	r27, 0x5B	; 91
     1fe:	be 55       	subi	r27, 0x5E	; 94
     200:	c1 55       	subi	r28, 0x51	; 81
     202:	c4 55       	subi	r28, 0x54	; 84
     204:	c7 55       	subi	r28, 0x57	; 87
     206:	ca 55       	subi	r28, 0x5A	; 90
     208:	cd 55       	subi	r28, 0x5D	; 93
     20a:	3b 5d       	subi	r19, 0xDB	; 219
     20c:	4e 5d       	subi	r20, 0xDE	; 222
     20e:	61 5d       	subi	r22, 0xD1	; 209
     210:	74 5d       	subi	r23, 0xD4	; 212
     212:	87 5d       	subi	r24, 0xD7	; 215
     214:	9a 5d       	subi	r25, 0xDA	; 218
     216:	ad 5d       	subi	r26, 0xDD	; 221
     218:	05 a8       	ldd	r0, Z+53	; 0x35
     21a:	4c cd       	rjmp	.-1384   	; 0xfffffcb4 <__eeprom_end+0xff7efcb4>
     21c:	b2 d4       	rcall	.+2404   	; 0xb82 <PM_SINE_IP+0x431>
     21e:	4e b9       	out	0x0e, r20	; 14
     220:	38 36       	cpi	r19, 0x68	; 104
     222:	a9 02       	muls	r26, r25
     224:	0c 50       	subi	r16, 0x0C	; 12
     226:	b9 91       	ld	r27, Y+
     228:	86 88       	ldd	r8, Z+22	; 0x16
     22a:	08 3c       	cpi	r16, 0xC8	; 200
     22c:	a6 aa       	std	Z+54, r10	; 0x36
     22e:	aa 2a       	or	r10, r26
     230:	be 00       	.word	0x00be	; ????
     232:	00 00       	nop
     234:	80 3f       	cpi	r24, 0xF0	; 240
     236:	07 63       	ori	r16, 0x37	; 55
     238:	42 36       	cpi	r20, 0x62	; 98
     23a:	b7 9b       	sbis	0x16, 7	; 22
     23c:	d8 a7       	std	Y+40, r29	; 0x28
     23e:	1a 39       	cpi	r17, 0x9A	; 154
     240:	68 56       	subi	r22, 0x68	; 104
     242:	18 ae       	std	Y+56, r1	; 0x38
     244:	ba ab       	std	Y+50, r27	; 0x32
     246:	55 8c       	ldd	r5, Z+29	; 0x1d
     248:	1d 3c       	cpi	r17, 0xCD	; 205
     24a:	b7 cc       	rjmp	.-1682   	; 0xfffffbba <__eeprom_end+0xff7efbba>
     24c:	57 63       	ori	r21, 0x37	; 55
     24e:	bd 6d       	ori	r27, 0xDD	; 221
     250:	ed fd       	.word	0xfded	; ????
     252:	75 3e       	cpi	r23, 0xE5	; 229
     254:	f6 17       	cp	r31, r22
     256:	72 31       	cpi	r23, 0x12	; 18
     258:	bf 00       	.word	0x00bf	; ????
     25a:	00 00       	nop
     25c:	80 3f       	cpi	r24, 0xF0	; 240
     25e:	08 00       	.word	0x0008	; ????
     260:	00 00       	nop
     262:	be 92       	st	-X, r11
     264:	24 49       	sbci	r18, 0x94	; 148
     266:	12 3e       	cpi	r17, 0xE2	; 226
     268:	ab aa       	std	Y+51, r10	; 0x33
     26a:	aa 2a       	or	r10, r26
     26c:	be cd       	rjmp	.-1156   	; 0xfffffdea <__eeprom_end+0xff7efdea>
     26e:	cc cc       	rjmp	.-1640   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
     270:	4c 3e       	cpi	r20, 0xEC	; 236
     272:	00 00       	nop
     274:	00 80       	ld	r0, Z
     276:	be ab       	std	Y+54, r27	; 0x36
     278:	aa aa       	std	Y+50, r10	; 0x32
     27a:	aa 3e       	cpi	r26, 0xEA	; 234
     27c:	00 00       	nop
     27e:	00 00       	nop
     280:	bf 00       	.word	0x00bf	; ????
     282:	00 00       	nop
     284:	80 3f       	cpi	r24, 0xF0	; 240
     286:	00 00       	nop
     288:	00 00       	nop
     28a:	00 08       	sbc	r0, r0
     28c:	41 78       	andi	r20, 0x81	; 129
     28e:	d3 bb       	out	0x13, r29	; 19
     290:	43 87       	std	Z+11, r20	; 0x0b
     292:	d1 13       	cpse	r29, r17
     294:	3d 19       	sub	r19, r13
     296:	0e 3c       	cpi	r16, 0xCE	; 206
     298:	c3 bd       	out	0x23, r28	; 35
     29a:	42 82       	std	Z+2, r4	; 0x02
     29c:	ad 2b       	or	r26, r29
     29e:	3e 68       	ori	r19, 0x8E	; 142
     2a0:	ec 82       	std	Y+4, r14	; 0x04
     2a2:	76 be       	out	0x36, r7	; 54
     2a4:	d9 8f       	std	Y+25, r29	; 0x19
     2a6:	e1 a9       	ldd	r30, Z+49	; 0x31
     2a8:	3e 4c       	sbci	r19, 0xCE	; 206
     2aa:	80 ef       	ldi	r24, 0xF0	; 240
     2ac:	ff be       	out	0x3f, r15	; 63
     2ae:	01 c4       	rjmp	.+2050   	; 0xab2 <PM_SINE_IP+0x361>
     2b0:	ff 7f       	andi	r31, 0xFF	; 255
     2b2:	3f 00       	.word	0x003f	; ????
     2b4:	00 00       	nop
	...

000002b8 <__trampolines_end>:
     2b8:	6e 61       	ori	r22, 0x1E	; 30
     2ba:	6e 00       	.word	0x006e	; ????

000002bc <__c.2332>:
     2bc:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2cc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2dc:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2ec:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2fc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     30c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     31c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     32c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     33c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     34c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     35c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     36c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     37c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     38c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     39c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3ac:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003ba <pstr_nan>:
     3ba:	4e 41 4e                                            NAN

000003bd <pstr_inity>:
     3bd:	49 4e 49 54 59                                      INITY

000003c2 <pstr_inf>:
     3c2:	49 4e 46                                            INF

000003c5 <pwr_m10>:
     3c5:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     3d5:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000003dd <pwr_p10>:
     3dd:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3ed:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000003f5 <PM_TWI1_INIT_ONBOARD_SIM808_GPS_02>:
     3f5:	41 54 2b 43 47 4e 53 49 4e 46 0d 0a 00              AT+CGNSINF...

00000402 <PM_TWI1_INIT_ONBOARD_SIM808_GPS_01>:
     402:	41 54 2b 43 47 4e 53 50 57 52 3d 25 64 0d 0a 00     AT+CGNSPWR=%d...

00000412 <PM_TWI1_INIT_ONBOARD_SIM808_INFO_02>:
     412:	41 54 2b 47 53 56 0d 0a 00                          AT+GSV...

0000041b <PM_TWI1_INIT_ONBOARD_SIM808_INFO_01>:
     41b:	41 54 49 0d 0a 00                                   ATI...

00000421 <PM_TWI1_INIT_ONBOARD_SIM808_CFUN1>:
     421:	41 54 2b 43 46 55 4e 3d 31 0d 0a 00                 AT+CFUN=1...

0000042d <PM_TWI1_INIT_ONBOARD_SIM808_CMEE2>:
     42d:	41 54 2b 43 4d 45 45 3d 32 0d 0a 00                 AT+CMEE=2...

00000439 <PM_TWI1_INIT_ONBOARD_SIM808_IPR>:
     439:	41 54 2b 49 50 52 3d 25 6c 64 0d 0a 00              AT+IPR=%ld...

00000446 <PM_TWI1_INIT_ONBOARD_SIM808_OK>:
     446:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 73 75 63     Init: SIM808 suc
     456:	63 65 73 73 00                                      cess.

0000045b <PM_TWI1_INIT_ONBOARD_SIM808_RESTART>:
     45b:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 72 65 73     Init: SIM808 res
     46b:	74 61 72 74 69 6e 67 20 2e 2e 2e 00                 tarting ....

00000477 <PM_TWI1_INIT_ONBOARD_SIM808_START>:
     477:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 73 74 61     Init: SIM808 sta
     487:	72 74 69 6e 67 20 2e 2e 2e 00                       rting ....

00000491 <PM_SIM808_INFO_SYNCED>:
     491:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 20 62     SIM808 ser1:   b
     4a1:	61 75 64 20 72 61 74 65 20 73 79 6e 63 65 64 0d     aud rate synced.
     4b1:	0a 00                                               ..

000004b3 <PM_SIM808_INFO_RESTART>:
     4b3:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 53 74     SIM808 ser1:  St
     4c3:	61 72 74 69 6e 67 20 74 68 65 20 64 65 76 69 63     arting the devic
     4d3:	65 20 2e 2e 2e 0d 0a 00                             e ......

000004db <PM_SIM808_INFO_START>:
     4db:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 53 74     SIM808 ser1:  St
     4eb:	61 72 74 69 6e 67 20 74 68 65 20 64 65 76 69 63     arting the devic
     4fb:	65 20 2e 2e 2e 0d 0a 00                             e ......

00000503 <PM_SIM808_OK>:
     503:	4f 4b 00                                            OK.

00000506 <PM_INFO_PART_PLL1>:
     506:	50 4c 4c 3a 20 25 38 6c 64 2e 25 30 33 6c 64 20     PLL: %8ld.%03ld 
     516:	2b 20 25 30 33 64 2f 33 30 45 2b 36 20 73 65 63     + %03d/30E+6 sec
     526:	0d 0a 0d 0a 00                                      .....

0000052b <PM_INFO_PART_L2P4>:
     52b:	47 79 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e 32     Gyro_Temp=%+06.2
     53b:	66 43 20 28 25 2b 30 36 64 29 0d 0a 0d 0a 00        fC (%+06d).....

0000054a <PM_INFO_PART_L2P3B>:
     54a:	4d 7a 3d 25 2b 30 37 2e 33 66 75 54 20 28 25 2b     Mz=%+07.3fuT (%+
     55a:	30 36 64 29 09 20 09 00                             06d). ..

00000562 <PM_INFO_PART_L2P3A>:
     562:	4d 78 3d 25 2b 30 37 2e 33 66 75 54 20 28 25 2b     Mx=%+07.3fuT (%+
     572:	30 36 64 29 2c 20 4d 79 3d 25 2b 30 37 2e 33 66     06d), My=%+07.3f
     582:	75 54 20 28 25 2b 30 36 64 29 2c 20 00              uT (%+06d), .

0000058f <PM_INFO_PART_L2P2B>:
     58f:	47 7a 3d 25 2b 30 37 2e 32 66 64 70 73 20 28 25     Gz=%+07.2fdps (%
     59f:	30 36 64 29 09 20 09 00                             06d). ..

000005a7 <PM_INFO_PART_L2P2A>:
     5a7:	47 78 3d 25 2b 30 37 2e 32 66 64 70 73 20 28 25     Gx=%+07.2fdps (%
     5b7:	2b 30 36 64 29 2c 20 47 79 3d 25 2b 30 37 2e 32     +06d), Gy=%+07.2
     5c7:	66 64 70 73 20 28 25 2b 30 36 64 29 2c 20 00        fdps (%+06d), .

000005d6 <PM_INFO_PART_L2P1B>:
     5d6:	41 7a 3d 25 2b 30 35 2e 33 66 67 20 28 25 2b 30     Az=%+05.3fg (%+0
     5e6:	36 64 29 09 20 09 00                                6d). ..

000005ed <PM_INFO_PART_L2P1A>:
     5ed:	09 41 78 3d 25 2b 30 35 2e 33 66 67 20 28 25 2b     .Ax=%+05.3fg (%+
     5fd:	30 36 64 29 2c 20 41 79 3d 25 2b 30 35 2e 33 66     06d), Ay=%+05.3f
     60d:	67 20 28 25 2b 30 36 64 29 2c 20 00                 g (%+06d), .

00000619 <PM_INFO_PART_L1P3>:
     619:	48 79 67 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e     Hygro_Temp=%+06.
     629:	32 66 43 2c 20 48 79 67 72 6f 5f 52 65 6c 48 3d     2fC, Hygro_RelH=
     639:	25 30 35 2e 32 66 25 25 0d 0a 00                    %05.2f%%...

00000644 <PM_INFO_PART_L1P2>:
     644:	42 61 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e 32     Baro_Temp=%+06.2
     654:	66 43 2c 20 42 61 72 6f 5f 50 3d 25 37 2e 32 66     fC, Baro_P=%7.2f
     664:	68 50 61 09 20 09 00                                hPa. ..

0000066b <PM_INFO_PART_L1P1C>:
     66b:	6d 50 5f 54 65 6d 70 3d 25 2b 30 36 2e 32 66 43     mP_Temp=%+06.2fC
     67b:	09 20 09 00                                         . ..

0000067f <PM_INFO_PART_L1P1B>:
     67f:	55 61 64 63 34 3d 25 34 64 20 6d 56 2c 20 55 61     Uadc4=%4d mV, Ua
     68f:	64 63 35 3d 25 34 64 20 6d 56 2c 20 55 73 69 6c     dc5=%4d mV, Usil
     69f:	3d 25 34 64 20 6d 56 2c 20 00                       =%4d mV, .

000006a9 <PM_INFO_PART_L1P1A>:
     6a9:	54 69 6d 65 20 3d 20 25 30 36 6c 64 3a 20 55 76     Time = %06ld: Uv
     6b9:	63 6f 3d 25 34 64 20 6d 56 2c 20 55 35 76 3d 25     co=%4d mV, U5v=%
     6c9:	34 64 20 6d 56 2c 20 55 62 61 74 3d 25 34 64 20     4d mV, Ubat=%4d 
     6d9:	6d 56 2c 20 00                                      mV, .

000006de <PM_USBINIT_HEADER_4>:
     6de:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     6ee:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0d     ===============.
     6fe:	0a 0d 0a 00                                         ....

00000702 <PM_USBINIT_HEADER_3>:
     702:	46 69 6e 64 4d 65 53 41 54 20 2d 20 55 53 42 20     FindMeSAT - USB 
     712:	6c 6f 67 67 69 6e 67 20 73 74 61 72 74 65 64 0d     logging started.
     722:	0a 00                                               ..

00000724 <PM_USBINIT_HEADER_2>:
     724:	25 63 0d 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     %c..============
     734:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     744:	3d 3d 3d 0d 0a 00                                   ===...

0000074a <PM_USBINIT_HEADER_1>:
     74a:	0d 0a 0d 0a 0d 0a 00                                .......

00000751 <PM_SINE_IP>:
     751:	00 fd f9 f6 f3 f0 ec e9 e6 e3 df dc d9 d6 d2 cf     ................
     761:	00 fd fa f6 f3 f0 ed ea e6 e3 e0 dd da d7 d3 d0     ................
     771:	00 fd fa f7 f3 f0 ed ea e7 e4 e1 de da d7 d4 d1     ................
     781:	00 fd fa f7 f4 f1 ee eb e7 e4 e1 de db d8 d5 d2     ................
     791:	00 fd fa f7 f4 f1 ee eb e8 e5 e2 df dc d9 d6 d3     ................
     7a1:	00 fd fa f7 f4 f1 ee eb e8 e6 e3 e0 dd da d7 d4     ................
     7b1:	00 fd fa f7 f4 f2 ef ec e9 e6 e3 e0 dd db d8 d5     ................
     7c1:	00 fd fa f8 f5 f2 ef ec e9 e7 e4 e1 de db d9 d6     ................
     7d1:	00 fd fa f8 f5 f2 ef ed ea e7 e4 e2 df dc d9 d7     ................
     7e1:	00 fd fb f8 f5 f3 f0 ed ea e8 e5 e2 e0 dd da d8     ................
     7f1:	00 fd fb f8 f5 f3 f0 ee eb e8 e6 e3 e0 de db d9     ................
     801:	00 fd fb f8 f6 f3 f1 ee eb e9 e6 e4 e1 df dc da     ................
     811:	00 fd fb f8 f6 f3 f1 ee ec e9 e7 e4 e2 df dd da     ................
     821:	00 fe fb f9 f6 f4 f1 ef ec ea e8 e5 e3 e0 de db     ................
     831:	00 fe fb f9 f6 f4 f2 ef ed eb e8 e6 e3 e1 df dc     ................
     841:	00 fe fb f9 f7 f4 f2 f0 ed eb e9 e7 e4 e2 e0 dd     ................
     851:	00 fe fb f9 f7 f5 f2 f0 ee ec e9 e7 e5 e3 e0 de     ................
     861:	00 fe fc f9 f7 f5 f3 f1 ee ec ea e8 e6 e4 e1 df     ................
     871:	00 fe fc fa f7 f5 f3 f1 ef ed eb e9 e6 e4 e2 e0     ................
     881:	00 fe fc fa f8 f6 f4 f2 ef ed eb e9 e7 e5 e3 e1     ................
     891:	00 fe fc fa f8 f6 f4 f2 f0 ee ec ea e8 e6 e4 e2     ................
     8a1:	00 fe fc fa f8 f6 f4 f2 f0 ef ed eb e9 e7 e5 e3     ................
     8b1:	00 fe fc fa f8 f7 f5 f3 f1 ef ed eb e9 e8 e6 e4     ................
     8c1:	00 fe fc fb f9 f7 f5 f3 f1 f0 ee ec ea e8 e7 e5     ................
     8d1:	00 fe fc fb f9 f7 f5 f4 f2 f0 ee ed eb e9 e7 e6     ................
     8e1:	00 fe fd fb f9 f8 f6 f4 f2 f1 ef ed ec ea e8 e7     ................
     8f1:	00 fe fd fb f9 f8 f6 f5 f3 f1 f0 ee ec eb e9 e8     ................
     901:	00 fe fd fb fa f8 f7 f5 f3 f2 f0 ef ed ec ea e9     ................
     911:	00 fe fd fb fa f8 f7 f5 f4 f2 f1 ef ee ec eb e9     ................
     921:	00 ff fd fc fa f9 f7 f6 f4 f3 f2 f0 ef ed ec ea     ................
     931:	00 ff fd fc fa f9 f8 f6 f5 f4 f2 f1 ef ee ed eb     ................
     941:	00 ff fd fc fb f9 f8 f7 f5 f4 f3 f2 f0 ef ee ec     ................
     951:	00 ff fd fc fb fa f8 f7 f6 f5 f3 f2 f1 f0 ee ed     ................
     961:	00 ff fe fc fb fa f9 f8 f6 f5 f4 f3 f2 f1 ef ee     ................
     971:	00 ff fe fd fb fa f9 f8 f7 f6 f5 f4 f2 f1 f0 ef     ................
     981:	00 ff fe fd fc fb fa f9 f7 f6 f5 f4 f3 f2 f1 f0     ................
     991:	00 ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1     ................
     9a1:	00 ff fe fd fc fb fa f9 f8 f8 f7 f6 f5 f4 f3 f2     ................
     9b1:	00 ff fe fd fc fc fb fa f9 f8 f7 f6 f5 f5 f4 f3     ................
     9c1:	00 ff fe fe fd fc fb fa f9 f9 f8 f7 f6 f5 f5 f4     ................
     9d1:	00 ff fe fe fd fc fb fb fa f9 f8 f8 f7 f6 f5 f5     ................
     9e1:	00 ff ff fe fd fd fc fb fa fa f9 f8 f8 f7 f6 f6     ................
     9f1:	00 ff ff fe fd fd fc fc fb fa fa f9 f8 f8 f7 f7     ................
     a01:	00 ff ff fe fe fd fd fc fb fb fa fa f9 f9 f8 f8     ................
     a11:	00 ff ff fe fe fd fd fc fc fb fb fa fa f9 f9 f8     ................
     a21:	00 00 ff ff fe fe fd fd fc fc fc fb fb fa fa f9     ................
     a31:	00 00 ff ff fe fe fe fd fd fd fc fc fb fb fb fa     ................
     a41:	00 00 ff ff ff fe fe fe fd fd fd fd fc fc fc fb     ................
     a51:	00 00 ff ff ff ff fe fe fe fe fd fd fd fd fc fc     ................
     a61:	00 00 00 ff ff ff ff ff fe fe fe fe fe fe fd fd     ................
     a71:	00 00 00 00 ff ff ff ff ff ff ff ff fe fe fe fe     ................
	...
     a89:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     aa9:	01 01 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
     ab9:	01 01 01 01 02 02 02 02 00 00 00 01 01 01 01 01     ................
     ac9:	02 02 02 02 02 02 03 03 00 00 01 01 01 01 02 02     ................
     ad9:	02 02 03 03 03 03 04 04 00 00 01 01 01 02 02 02     ................
     ae9:	03 03 03 03 04 04 04 05 00 00 01 01 02 02 02 03     ................
     af9:	03 03 04 04 05 05 05 06 00 00 01 01 02 02 03 03     ................
     b09:	04 04 04 05 05 06 06 07 00 01 01 02 02 03 03 04     ................
     b19:	04 05 05 06 06 07 07 08 00 01 01 02 02 03 03 04     ................
     b29:	05 05 06 06 07 07 08 08 00 01 01 02 03 03 04 04     ................
     b39:	05 06 06 07 08 08 09 09 00 01 01 02 03 03 04 05     ................
     b49:	06 06 07 08 08 09 0a 0a 00 01 02 02 03 04 05 05     ................
     b59:	06 07 08 08 09 0a 0b 0b 00 01 02 02 03 04 05 06     ................
     b69:	07 07 08 09 0a 0b 0b 0c 00 01 02 03 04 04 05 06     ................
     b79:	07 08 09 0a 0b 0b 0c 0d 00 01 02 03 04 05 06 07     ................
     b89:	08 08 09 0a 0b 0c 0d 0e 00 01 02 03 04 05 06 07     ................
     b99:	08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 04 05 06 07     ................
     ba9:	09 0a 0b 0c 0d 0e 0f 10 00 01 02 03 05 06 07 08     ................
     bb9:	09 0a 0b 0c 0e 0f 10 11 00 01 02 04 05 06 07 08     ................
     bc9:	0a 0b 0c 0d 0e 0f 11 12 00 01 03 04 05 06 08 09     ................
     bd9:	0a 0b 0d 0e 0f 10 12 13 00 01 03 04 05 07 08 09     ................
     be9:	0b 0c 0d 0e 10 11 12 14 00 01 03 04 06 07 08 0a     ................
     bf9:	0b 0c 0e 0f 11 12 13 15 00 01 03 04 06 07 09 0a     ................
     c09:	0c 0d 0e 10 11 13 14 16 00 02 03 05 06 08 09 0b     ................
     c19:	0c 0e 0f 11 12 14 15 17 00 02 03 05 06 08 09 0b     ................
     c29:	0d 0e 10 11 13 14 16 17 00 02 03 05 07 08 0a 0b     ................
     c39:	0d 0f 10 12 14 15 17 18 00 02 03 05 07 08 0a 0c     ................
     c49:	0e 0f 11 13 14 16 18 19 00 02 04 05 07 09 0b 0c     ................
     c59:	0e 10 12 13 15 17 19 1a 00 02 04 05 07 09 0b 0d     ................
     c69:	0f 10 12 14 16 18 19 1b 00 02 04 06 08 09 0b 0d     ................
     c79:	0f 11 13 15 17 18 1a 1c 00 02 04 06 08 0a 0c 0e     ................
     c89:	10 11 13 15 17 19 1b 1d 00 02 04 06 08 0a 0c 0e     ................
     c99:	10 12 14 16 18 1a 1c 1e 00 02 04 06 08 0a 0c 0e     ................
     ca9:	11 13 15 17 19 1b 1d 1f 00 02 04 06 09 0b 0d 0f     ................
     cb9:	11 13 15 17 1a 1c 1e 20 00 02 04 07 09 0b 0d 0f     ....... ........
     cc9:	12 14 16 18 1a 1c 1f 21 00 02 05 07 09 0b 0e 10     .......!........
     cd9:	12 14 17 19 1b 1d 20 22 00 02 05 07 09 0c 0e 10     ...... "........
     ce9:	13 15 17 19 1c 1e 20 23 00 02 05 07 0a 0c 0e 11     ...... #........
     cf9:	13 15 18 1a 1d 1f 21 24 00 02 05 07 0a 0c 0f 11     ......!$........
     d09:	14 16 18 1b 1d 20 22 25 00 03 05 08 0a 0d 0f 12     ..... "%........
     d19:	14 17 19 1c 1e 21 23 26 00 03 05 08 0a 0d 0f 12     .....!#&........
     d29:	15 17 1a 1c 1f 21 24 26 00 03 05 08 0b 0d 10 12     .....!$&........
     d39:	15 18 1a 1d 20 22 25 27 00 03 05 08 0b 0d 10 13     .... "%'........
     d49:	16 18 1b 1e 20 23 26 28 00 03 06 08 0b 0e 11 13     .... #&(........
     d59:	16 19 1c 1e 21 24 27 29 00 03 06 08 0b 0e 11 14     ....!$')........
     d69:	17 19 1c 1f 22 25 27 2a 00 03 06 09 0c 0e 11 14     ...."%'*........
     d79:	17 1a 1d 20 23 25 28 2b 00 03 06 09 0c 0f 12 15     ... #%(+........
     d89:	18 1a 1d 20 23 26 29 2c 00 03 06 09 0c 0f 12 15     ... #&),........
     d99:	18 1b 1e 21 24 27 2a 2d 00 03 06 09 0c 0f 12 15     ...!$'*-........
     da9:	19 1c 1f 22 25 28 2b 2e 00 03 06 09 0d 10 13 16     ..."%(+.........
     db9:	19 1c 1f 22 26 29 2c 2f 00 03 06 0a 0d 10 13 16     ..."&),/........
     dc9:	1a 1d 20 23 26 29 2d 30                             .. #&)-0

00000dd1 <PM_SINE>:
     dd1:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     de1:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     df1:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     e01:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     e11:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     e21:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     e31:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     e41:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     e51:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     e61:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     e71:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     e81:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     e91:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     ea1:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     eb1:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     ec1:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     ed1:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     ee1:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     ef1:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     f01:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     f11:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     f21:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     f31:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     f41:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     f51:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     f61:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     f71:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     f81:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     f91:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     fa1:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     fb1:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     fc1:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     fd1:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     fe1:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     ff1:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
    1001:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
    1011:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
    1021:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
    1031:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
    1041:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
    1051:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
    1061:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
    1071:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
    1081:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
    1091:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
    10a1:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
    10b1:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
    10c1:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
    10d1:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
    10e1:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
    10f1:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
    1101:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
    1111:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
    1121:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
    1131:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
    1141:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
    1151:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
    1161:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
    1171:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
    1181:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
    1191:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
    11a1:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
    11b1:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
    11c1:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
    11d1:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
    11e1:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
    11f1:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
    1201:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
    1211:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
    1221:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
    1231:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
    1241:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
    1251:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
    1261:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
    1271:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
    1281:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
    1291:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
    12a1:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
    12b1:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
    12c1:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
    12d1:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
    12e1:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
    12f1:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
    1301:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
    1311:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
    1321:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
    1331:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
    1341:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
    1351:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
    1361:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
    1371:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
    1381:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
    1391:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
    13a1:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
    13b1:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
    13c1:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
    13d1:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
    13e1:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
    13f1:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
    1401:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
    1411:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
    1421:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
    1431:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
    1441:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
    1451:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
    1461:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
    1471:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
    1481:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
    1491:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
    14a1:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
    14b1:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
    14c1:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
    14d1:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
    14e1:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
    14f1:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
    1501:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
    1511:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
    1521:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
    1531:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
    1541:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
    1551:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
    1561:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
    1571:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
    1581:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
    1591:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
    15a1:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
    15b1:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
    15c1:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
    15d1:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
    15e1:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
    15f1:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
    1601:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
    1611:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
    1621:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
    1631:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
    1641:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
    1651:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
    1661:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
    1671:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
    1681:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
    1691:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
    16a1:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
    16b1:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
    16c1:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
    16d1:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
    16e1:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
    16f1:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
    1701:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
    1711:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
    1721:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
    1731:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
    1741:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
    1751:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
    1761:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
    1771:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
    1781:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
    1791:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
    17a1:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
    17b1:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
    17c1:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
    17d1:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
    17e1:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
    17f1:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
    1801:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
    1811:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
    1821:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
    1831:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
    1841:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
    1851:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
    1861:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
    1871:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
    1881:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
    1891:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
    18a1:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
    18b1:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
    18c1:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
    18d1:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
    18e1:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
    18f1:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
    1901:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
    1911:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
    1921:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
    1931:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
    1941:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
    1951:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
    1961:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
    1971:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
    1981:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
    1991:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
    19a1:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
    19b1:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
    19c1:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
    19d1:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
    19e1:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
    19f1:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
    1a01:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
    1a11:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
    1a21:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
    1a31:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
    1a41:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
    1a51:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
    1a61:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
    1a71:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
    1a81:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
    1a91:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
    1aa1:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
    1ab1:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
    1ac1:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
    1ad1:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
    1ae1:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
    1af1:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
    1b01:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
    1b11:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
    1b21:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
    1b31:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
    1b41:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
    1b51:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
    1b61:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
    1b71:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
    1b81:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
    1b91:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
    1ba1:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
    1bb1:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1bc1:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1bd1:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    1be1:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    1bf1:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    1c01:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    1c11:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1c21:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1c31:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1c41:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1c51:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    1c61:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    1c71:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    1c81:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    1c91:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    1ca1:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    1cb1:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1cc1:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1cd1:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    1ce1:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    1cf1:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    1d01:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    1d11:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1d21:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1d31:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1d41:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1d51:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    1d61:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    1d71:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    1d81:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    1d91:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    1da1:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    1db1:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1dc1:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1dd1:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    1de1:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    1df1:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    1e01:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    1e11:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1e21:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1e31:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1e41:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1e51:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    1e61:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    1e71:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    1e81:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    1e91:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    1ea1:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    1eb1:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1ec1:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1ed1:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    1ee1:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    1ef1:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    1f01:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    1f11:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1f21:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1f31:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1f41:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1f51:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    1f61:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    1f71:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    1f81:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    1f91:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    1fa1:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    1fb1:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1fc1:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1fd1:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1fe1:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1ff1:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    2001:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    2011:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    2021:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    2031:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    2041:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    2051:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    2061:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    2071:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    2081:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    2091:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    20a1:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    20b1:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    20c1:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    20d1:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    20e1:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    20f1:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    2101:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    2111:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    2121:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    2131:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    2141:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    2151:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    2161:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    2171:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    2181:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    2191:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    21a1:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    21b1:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    21c1:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    21d1:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    21e1:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    21f1:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    2201:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    2211:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    2221:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    2231:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    2241:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    2251:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    2261:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    2271:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    2281:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    2291:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    22a1:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    22b1:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    22c1:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    22d1:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    22e1:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    22f1:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    2301:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    2311:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    2321:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    2331:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    2341:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    2351:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    2361:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    2371:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    2381:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    2391:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    23a1:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    23b1:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    23c1:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    23d1:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    23e1:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    23f1:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    2401:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    2411:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    2421:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    2431:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    2441:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    2451:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    2461:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    2471:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    2481:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    2491:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    24a1:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    24b1:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    24c1:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    24d1:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    24e1:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    24f1:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    2501:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    2511:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    2521:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    2531:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    2541:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    2551:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    2561:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    2571:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    2581:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    2591:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    25a1:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    25b1:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    25c1:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    25d1:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    25e1:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    25f1:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    2601:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    2611:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    2621:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    2631:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    2641:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    2651:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    2661:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    2671:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    2681:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    2691:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    26a1:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    26b1:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    26c1:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    26d1:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    26e1:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    26f1:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    2701:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    2711:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    2721:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    2731:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    2741:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    2751:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    2761:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    2771:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    2781:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    2791:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    27a1:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    27b1:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    27c1:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    27d1:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    27e1:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    27f1:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    2801:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    2811:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    2821:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    2831:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    2841:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    2851:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    2861:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    2871:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    2881:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    2891:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    28a1:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    28b1:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    28c1:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    28d1:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    28e1:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    28f1:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    2901:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    2911:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    2921:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    2931:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    2941:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    2951:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    2961:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    2971:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    2981:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    2991:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    29a1:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    29b1:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    29c1:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    29d1:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    29e1:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    29f1:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    2a01:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    2a11:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    2a21:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    2a31:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    2a41:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    2a51:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    2a61:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    2a71:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    2a81:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    2a91:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    2aa1:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    2ab1:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    2ac1:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    2ad1:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    2ae1:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    2af1:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    2b01:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    2b11:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    2b21:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    2b31:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    2b41:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    2b51:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    2b61:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    2b71:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    2b81:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    2b91:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    2ba1:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    2bb1:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2bc1:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2bd1:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    2be1:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    2bf1:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    2c01:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    2c11:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2c21:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2c31:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2c41:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2c51:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    2c61:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    2c71:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    2c81:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    2c91:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    2ca1:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    2cb1:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2cc1:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2cd1:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    2ce1:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    2cf1:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    2d01:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    2d11:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2d21:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2d31:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2d41:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2d51:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    2d61:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    2d71:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    2d81:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    2d91:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    2da1:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    2db1:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2dc1:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002dd1 <PM_UNKNOWN_01>:
    2dd1:	0d 0a 3f 3f 3f 20 75 6e 6b 6e 6f 77 6e 20 63 6f     ..??? unknown co
    2de1:	6d 6d 61 6e 64 20 2d 20 66 6f 72 20 61 73 73 69     mmand - for assi
    2df1:	73 74 61 6e 63 65 20 65 6e 74 65 72 20 20 68 65     stance enter  he
    2e01:	6c 70 0d 0a 00                                      lp...

00002e06 <PM_IP_CMD_xo>:
    2e06:	78 6f 3d 00                                         xo=.

00002e0a <PM_IP_CMD_reset>:
    2e0a:	72 65 73 65 74 3d 00                                reset=.

00002e11 <PM_IP_CMD_pt>:
    2e11:	70 74 3d 00                                         pt=.

00002e15 <PM_IP_CMD_kb>:
    2e15:	6b 62 3d 00                                         kb=.

00002e19 <PM_IP_CMD_help>:
    2e19:	68 65 6c 70 00                                      help.

00002e1e <PM_IP_CMD_info>:
    2e1e:	69 6e 66 6f 3d 00                                   info=.

00002e24 <PM_IP_CMD_eb>:
    2e24:	65 62 3d 00                                         eb=.

00002e28 <PM_IP_CMD_dds>:
    2e28:	64 64 73 3d 00                                      dds=.

00002e2d <PM_IP_CMD_dac>:
    2e2d:	64 61 63 3d 00                                      dac=.

00002e32 <PM_IP_CMD_cal_gyro>:
    2e32:	63 61 6c 3d 67 79 72 6f 00                          cal=gyro.

00002e3b <PM_IP_CMD_cal_defaults>:
    2e3b:	63 61 6c 3d 64 65 66 61 75 6c 74 73 00              cal=defaults.

00002e48 <PM_IP_CMD_bl>:
    2e48:	62 6c 3d 00                                         bl=.

00002e4c <PM_IP_CMD_bias>:
    2e4c:	62 69 61 73 3d 00                                   bias=.

00002e52 <PM_IP_CMD_A_slash>:
    2e52:	41 2f 00                                            A/.

00002e55 <PM_IP_CMD_AT>:
    2e55:	41 54 00                                            AT.

00002e58 <PM_IP_CMD_adc>:
    2e58:	61 64 63 3d 00                                      adc=.

00002e5d <PM_IP_CMD_CmdLine>:
    2e5d:	0d 0a 3e 20 00                                      ..> .

00002e62 <PM_IP_CMD_NewLine>:
    2e62:	0d 0a 00                                            ...

00002e65 <PM_HELP_XO_2>:
    2e65:	2d 31 3a 20 50 4c 4c 20 4f 4e 0d 0a 00              -1: PLL ON...

00002e72 <PM_HELP_XO_1>:
    2e72:	78 6f 3d 09 09 30 2d 36 35 35 33 35 3a 20 56 43     xo=..0-65535: VC
    2e82:	54 43 58 4f 20 70 75 6c 6c 20 76 6f 6c 74 61 67     TCXO pull voltag
    2e92:	65 2c 20 00                                         e, .

00002e96 <PM_HELP_RESET_1>:
    2e96:	72 65 73 65 74 3d 09 09 31 3a 20 72 65 62 6f 6f     reset=..1: reboo
    2ea6:	74 20 41 4c 4c 0d 0a 00                             t ALL...

00002eae <PM_HELP_PT_2>:
    2eae:	31 3a 20 74 75 72 6e 20 73 70 65 65 64 2c 20 32     1: turn speed, 2
    2ebe:	3a 20 76 61 72 69 6f 6d 65 74 65 72 0d 0a 00        : variometer...

00002ecd <PM_HELP_PT_1>:
    2ecd:	70 74 3d 09 09 30 3a 20 70 69 74 63 68 20 74 6f     pt=..0: pitch to
    2edd:	6e 65 20 4f 46 46 2c 20 00                          ne OFF, .

00002ee6 <PM_HELP_KB_1>:
    2ee6:	6b 62 3d 09 09 30 3a 20 6b 65 79 20 62 65 65 70     kb=..0: key beep
    2ef6:	20 4f 46 46 2c 20 31 3a 20 4f 4e 0d 0a 00            OFF, 1: ON...

00002f04 <PM_HELP_INFO_2>:
    2f04:	30 78 30 32 3a 20 53 49 4d 38 30 38 0d 0a 00        0x02: SIM808...

00002f13 <PM_HELP_INFO_1>:
    2f13:	69 6e 66 6f 3d 09 09 30 3a 20 4f 46 46 2c 20 30     info=..0: OFF, 0
    2f23:	78 30 31 3a 20 41 54 78 6d 65 67 61 2c 20 00        x01: ATxmega, .

00002f32 <PM_HELP_HELP_2>:
    2f32:	61 62 6f 75 74 20 61 6c 6c 20 61 76 61 69 6c 61     about all availa
    2f42:	62 6c 65 20 63 6f 6d 6d 61 6e 64 73 0d 0a 00        ble commands...

00002f51 <PM_HELP_HELP_1>:
    2f51:	68 65 6c 70 09 09 54 68 69 73 20 69 6e 66 6f 72     help..This infor
    2f61:	6d 61 74 69 6f 6e 20 70 61 67 65 20 00              mation page .

00002f6e <PM_HELP_EB_1>:
    2f6e:	65 62 3d 09 09 30 3a 20 65 72 72 6f 72 20 62 65     eb=..0: error be
    2f7e:	65 70 20 4f 46 46 2c 20 31 3a 20 4f 4e 0d 0a 00     ep OFF, 1: ON...

00002f8e <PM_HELP_DDS_3>:
    2f8e:	63 3a 20 73 74 61 72 74 69 6e 67 20 70 68 61 73     c: starting phas
    2f9e:	65 20 6f 66 20 44 44 53 31 2d 44 44 53 30 20 64     e of DDS1-DDS0 d
    2fae:	65 67 0d 0a 00                                      eg...

00002fb3 <PM_HELP_DDS_2>:
    2fb3:	62 3a 20 44 44 53 31 20 6d 48 7a 2c 20 00           b: DDS1 mHz, .

00002fc1 <PM_HELP_DDS_1>:
    2fc1:	64 64 73 3d 61 2c 62 2c 63 09 61 3a 20 44 44 53     dds=a,b,c.a: DDS
    2fd1:	30 20 66 72 65 71 75 65 6e 63 79 20 6d 48 7a 2c     0 frequency mHz,
    2fe1:	20 00                                                .

00002fe3 <PM_HELP_DAC_2>:
    2fe3:	31 3a 20 74 75 72 6e 20 44 41 43 42 20 6f 6e 0d     1: turn DACB on.
    2ff3:	0a 00                                               ..

00002ff5 <PM_HELP_DAC_1>:
    2ff5:	64 61 63 3d 09 09 30 3a 20 74 75 72 6e 20 44 41     dac=..0: turn DA
    3005:	43 42 20 6f 66 66 2c 20 00                          CB off, .

0000300e <PM_HELP_CAL_3>:
    300e:	67 79 72 6f 3a 20 72 65 64 75 63 65 20 47 59 52     gyro: reduce GYR
    301e:	4f 20 6f 66 66 73 65 74 20 65 72 72 6f 72 73 0d     O offset errors.
    302e:	0a 00                                               ..

00003030 <PM_HELP_CAL_2>:
    3030:	74 6f 20 45 45 50 52 4f 4d 2c 20 00                 to EEPROM, .

0000303c <PM_HELP_CAL_1>:
    303c:	63 61 6c 3d 09 09 64 65 66 61 75 6c 74 73 3a 20     cal=..defaults: 
    304c:	73 61 76 65 20 64 65 66 61 75 6c 74 20 76 61 6c     save default val
    305c:	75 65 73 20 00                                      ues .

00003061 <PM_HELP_BL_2>:
    3061:	2d 31 3a 20 41 55 54 4f 2c 20 2d 32 3a 20 54 55     -1: AUTO, -2: TU
    3071:	52 4e 4c 49 47 48 54 20 73 70 65 63 69 61 6c 0d     RNLIGHT special.
    3081:	0a 00                                               ..

00003083 <PM_HELP_BL_1>:
    3083:	62 6c 3d 09 09 30 2d 32 35 35 3a 20 62 61 63 6b     bl=..0-255: back
    3093:	6c 69 67 68 74 20 50 57 4d 2c 20 00                 light PWM, .

0000309f <PM_HELP_BIAS_2>:
    309f:	66 6f 72 20 4c 43 44 20 63 6f 6e 74 72 61 73 74     for LCD contrast
    30af:	0d 0a 00                                            ...

000030b2 <PM_HELP_BIAS_1>:
    30b2:	62 69 61 73 3d 09 09 30 2d 36 33 3a 20 62 69 61     bias=..0-63: bia
    30c2:	73 20 76 6f 6c 74 61 67 65 20 00                    s voltage .

000030cd <PM_HELP_AT_1>:
    30cd:	41 54 09 09 43 4d 44 20 74 6f 20 73 65 6e 64 20     AT..CMD to send 
    30dd:	74 6f 20 74 68 65 20 53 49 4d 38 30 38 0d 0a 00     to the SIM808...

000030ed <PM_HELP_ADC_2>:
    30ed:	31 3a 20 74 75 72 6e 20 41 44 43 41 20 61 6e 64     1: turn ADCA and
    30fd:	20 41 44 43 42 20 6f 6e 0d 0a 00                     ADCB on...

00003108 <PM_HELP_ADC_1>:
    3108:	61 64 63 3d 09 09 30 3a 20 74 75 72 6e 20 41 44     adc=..0: turn AD
    3118:	43 41 20 61 6e 64 20 41 44 43 42 20 6f 66 66 2c     CA and ADCB off,
    3128:	20 00                                                .

0000312a <PM_HELP_HDR_2>:
    312a:	2a 20 43 4f 4d 4d 41 4e 44 53 20 2a 0d 0a 2a 2a     * COMMANDS *..**
    313a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0d 0a 0d 0a 00        **********.....

00003149 <PM_HELP_HDR_1>:
    3149:	0d 0a 0d 0a 0d 0a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ......**********
    3159:	2a 2a 0d 0a 00                                      **...

0000315e <PM_FORMAT_5F3>:
    315e:	25 35 2e 33 66 00                                   %5.3f.

00003164 <PM_FORMAT_4F1>:
    3164:	25 34 2e 31 66 00                                   %4.1f.

0000316a <PM_FORMAT_07F2>:
    316a:	25 30 37 2e 32 66 00                                %07.2f.

00003171 <PM_FORMAT_05F2>:
    3171:	25 30 35 2e 32 66 00                                %05.2f.

00003178 <PM_TWI1_INIT_ONBOARD_01>:
    3178:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d 0a 0d 0a 00     -----------.....

00003188 <PM_TWI1_INIT_ONBOARD_BARO_OK>:
    3188:	49 6e 69 74 3a 20 42 61 72 6f 20 20 73 75 63 63     Init: Baro  succ
    3198:	65 73 73 00                                         ess.

0000319c <PM_TWI1_INIT_BARO_06>:
    319c:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    31ac:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    31bc:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

000031cd <PM_TWI1_INIT_BARO_05>:
    31cd:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    31dd:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

000031eb <PM_TWI1_INIT_BARO_04>:
    31eb:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 42 41     TWI-onboard:  BA
    31fb:	44 20 72 65 61 64 69 6e 67 20 50 52 4f 4d 20 61     D reading PROM a
    320b:	64 64 72 65 73 73 20 25 64 2e 20 28 73 63 3d 25     ddress %d. (sc=%
    321b:	64 29 0d 0a 00                                      d)...

00003220 <PM_TWI1_INIT_BARO_03>:
    3220:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 42 61 72     TWI-onboard: Bar
    3230:	6f 20 4d 53 35 36 30 37 30 32 42 41 30 33 2d 35     o MS560702BA03-5
    3240:	30 20 2d 20 20 20 20 20 73 65 72 69 61 6c 23 3a     0 -     serial#:
    3250:	20 25 64 0d 0a 00                                    %d...

00003256 <PM_TWI1_INIT_BARO_02>:
    3256:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 42 41     TWI-onboard:  BA
    3266:	44 20 72 65 61 64 69 6e 67 20 73 65 72 69 61 6c     D reading serial
    3276:	2f 43 52 43 20 77 6f 72 64 2e 20 28 73 63 3d 25     /CRC word. (sc=%
    3286:	64 29 0d 0a 00                                      d)...

0000328b <PM_TWI1_INIT_BARO_01>:
    328b:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 42     ..TWI-onboard: B
    329b:	61 72 6f 20 4d 53 35 36 30 37 30 32 42 41 30 33     aro MS560702BA03
    32ab:	2d 35 30 20 2d 20 49 32 43 20 61 64 64 72 65 73     -50 - I2C addres
    32bb:	73 3a 20 30 78 25 30 32 58 0d 0a 00                 s: 0x%02X...

000032c7 <PM_TWI1_INIT_ONBOARD_GYRO_OK>:
    32c7:	49 6e 69 74 3a 20 47 79 72 6f 20 20 73 75 63 63     Init: Gyro  succ
    32d7:	65 73 73 00                                         ess.

000032db <PM_TWI1_INIT_GYRO_05>:
    32db:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    32eb:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    32fb:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

0000330c <PM_TWI1_INIT_GYRO_04>:
    330c:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    331c:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

0000332a <PM_TWI1_INIT_GYRO_03>:
    332a:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47 79 72     TWI-onboard: Gyr
    333a:	6f 20 4d 50 55 2d 39 32 35 30 20 2d 20 20 20 20     o MPU-9250 -    
    334a:	20 76 65 72 73 69 6f 6e 3a 20 30 78 25 30 32 58      version: 0x%02X
    335a:	2c 20 30 78 25 30 32 58 0d 0a 00                    , 0x%02X...

00003365 <PM_TWI1_INIT_GYRO_02>:
    3365:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47 79 72     TWI-onboard: Gyr
    3375:	6f 20 4d 50 55 2d 39 32 35 30 20 20 20 2d 20 20     o MPU-9250   -  
    3385:	20 27 72 65 73 65 74 20 31 27 20 62 61 64 20 72      'reset 1' bad r
    3395:	65 73 70 6f 6e 73 65 0d 0a 00                       esponse...

0000339f <PM_TWI1_INIT_GYRO_01>:
    339f:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47     ..TWI-onboard: G
    33af:	79 72 6f 20 4d 50 55 2d 39 32 35 30 20 2d 20 49     yro MPU-9250 - I
    33bf:	32 43 20 61 64 64 72 65 73 73 3a 20 30 78 25 30     2C address: 0x%0
    33cf:	32 58 2c 20 30 78 25 30 32 58 0d 0a 00              2X, 0x%02X...

000033dc <PM_TWI1_INIT_ONBOARD_HYGRO_OK>:
    33dc:	49 6e 69 74 3a 20 48 79 67 72 6f 20 73 75 63 63     Init: Hygro succ
    33ec:	65 73 73 00                                         ess.

000033f0 <PM_TWI1_INIT_HYGRO_05>:
    33f0:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    3400:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    3410:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

00003421 <PM_TWI1_INIT_HYGRO_04>:
    3421:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    3431:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

0000343f <PM_TWI1_INIT_HYGRO_03>:
    343f:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48 79 67     TWI-onboard: Hyg
    344f:	72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d 20 20     ro SHT31-DIS -  
    345f:	20 73 74 61 74 75 73 3a 20 30 78 25 30 32 58 0d      status: 0x%02X.
    346f:	0a 00                                               ..

00003471 <PM_TWI1_INIT_HYGRO_02>:
    3471:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48 79 67     TWI-onboard: Hyg
    3481:	72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d 20 20     ro SHT31-DIS -  
    3491:	20 61 64 64 72 65 73 73 20 4e 41 43 4b 20 2f 20      address NACK / 
    34a1:	27 62 72 65 61 6b 27 20 62 61 64 20 72 65 73 70     'break' bad resp
    34b1:	6f 6e 73 65 0d 0a 00                                onse...

000034b8 <PM_TWI1_INIT_HYGRO_01>:
    34b8:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48     ..TWI-onboard: H
    34c8:	79 67 72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d     ygro SHT31-DIS -
    34d8:	20 49 32 43 20 61 64 64 72 65 73 73 3a 20 30 78      I2C address: 0x
    34e8:	25 30 32 58 0d 0a 00 00                             %02X....

000034f0 <__ctors_end>:
    34f0:	11 24       	eor	r1, r1
    34f2:	1f be       	out	0x3f, r1	; 63
    34f4:	cf ef       	ldi	r28, 0xFF	; 255
    34f6:	cd bf       	out	0x3d, r28	; 61
    34f8:	df e5       	ldi	r29, 0x5F	; 95
    34fa:	de bf       	out	0x3e, r29	; 62
    34fc:	00 e0       	ldi	r16, 0x00	; 0
    34fe:	0c bf       	out	0x3c, r16	; 60

00003500 <__do_copy_data>:
    3500:	11 e2       	ldi	r17, 0x21	; 33
    3502:	a0 e0       	ldi	r26, 0x00	; 0
    3504:	b0 e2       	ldi	r27, 0x20	; 32
    3506:	e6 e6       	ldi	r30, 0x66	; 102
    3508:	fa e1       	ldi	r31, 0x1A	; 26
    350a:	01 e0       	ldi	r16, 0x01	; 1
    350c:	0b bf       	out	0x3b, r16	; 59
    350e:	02 c0       	rjmp	.+4      	; 0x3514 <__do_copy_data+0x14>
    3510:	07 90       	elpm	r0, Z+
    3512:	0d 92       	st	X+, r0
    3514:	ac 3a       	cpi	r26, 0xAC	; 172
    3516:	b1 07       	cpc	r27, r17
    3518:	d9 f7       	brne	.-10     	; 0x3510 <__do_copy_data+0x10>

0000351a <__do_clear_bss>:
    351a:	2e e2       	ldi	r18, 0x2E	; 46
    351c:	ac ea       	ldi	r26, 0xAC	; 172
    351e:	b1 e2       	ldi	r27, 0x21	; 33
    3520:	01 c0       	rjmp	.+2      	; 0x3524 <.do_clear_bss_start>

00003522 <.do_clear_bss_loop>:
    3522:	1d 92       	st	X+, r1

00003524 <.do_clear_bss_start>:
    3524:	a3 39       	cpi	r26, 0x93	; 147
    3526:	b2 07       	cpc	r27, r18
    3528:	e1 f7       	brne	.-8      	; 0x3522 <.do_clear_bss_loop>
    352a:	0e 94 ba 6f 	call	0xdf74	; 0xdf74 <main>
    352e:	0c 94 0f 8d 	jmp	0x11a1e	; 0x11a1e <_exit>

00003532 <__bad_interrupt>:
    3532:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00003536 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    3536:	ef 92       	push	r14
    3538:	ff 92       	push	r15
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	7c 01       	movw	r14, r24
    3544:	8b 01       	movw	r16, r22
    3546:	ea 01       	movw	r28, r20
	while (len) {
    3548:	20 97       	sbiw	r28, 0x00	; 0
    354a:	39 f0       	breq	.+14     	; 0x355a <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    354c:	f8 01       	movw	r30, r16
    354e:	61 91       	ld	r22, Z+
    3550:	8f 01       	movw	r16, r30
    3552:	c7 01       	movw	r24, r14
    3554:	0a d0       	rcall	.+20     	; 0x356a <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
    3556:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    3558:	c9 f7       	brne	.-14     	; 0x354c <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	1f 91       	pop	r17
    3562:	0f 91       	pop	r16
    3564:	ff 90       	pop	r15
    3566:	ef 90       	pop	r14
    3568:	08 95       	ret

0000356a <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    356a:	fc 01       	movw	r30, r24
    356c:	91 81       	ldd	r25, Z+1	; 0x01
    356e:	95 ff       	sbrs	r25, 5
    3570:	fd cf       	rjmp	.-6      	; 0x356c <usart_putchar+0x2>
    3572:	60 83       	st	Z, r22
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	08 95       	ret

0000357a <usart_getchar>:
    357a:	fc 01       	movw	r30, r24
    357c:	91 81       	ldd	r25, Z+1	; 0x01
    357e:	99 23       	and	r25, r25
    3580:	ec f7       	brge	.-6      	; 0x357c <usart_getchar+0x2>
    3582:	80 81       	ld	r24, Z
    3584:	08 95       	ret

00003586 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    3586:	4f 92       	push	r4
    3588:	5f 92       	push	r5
    358a:	6f 92       	push	r6
    358c:	7f 92       	push	r7
    358e:	8f 92       	push	r8
    3590:	9f 92       	push	r9
    3592:	af 92       	push	r10
    3594:	bf 92       	push	r11
    3596:	ef 92       	push	r14
    3598:	ff 92       	push	r15
    359a:	0f 93       	push	r16
    359c:	1f 93       	push	r17
    359e:	cf 93       	push	r28
    35a0:	7c 01       	movw	r14, r24
    35a2:	4a 01       	movw	r8, r20
    35a4:	5b 01       	movw	r10, r22
    35a6:	28 01       	movw	r4, r16
    35a8:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    35aa:	fc 01       	movw	r30, r24
    35ac:	84 81       	ldd	r24, Z+4	; 0x04
    35ae:	82 ff       	sbrs	r24, 2
    35b0:	16 c0       	rjmp	.+44     	; 0x35de <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    35b2:	d9 01       	movw	r26, r18
    35b4:	c8 01       	movw	r24, r16
    35b6:	68 94       	set
    35b8:	12 f8       	bld	r1, 2
    35ba:	b6 95       	lsr	r27
    35bc:	a7 95       	ror	r26
    35be:	97 95       	ror	r25
    35c0:	87 95       	ror	r24
    35c2:	16 94       	lsr	r1
    35c4:	d1 f7       	brne	.-12     	; 0x35ba <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    35c6:	b9 01       	movw	r22, r18
    35c8:	a8 01       	movw	r20, r16
    35ca:	03 2e       	mov	r0, r19
    35cc:	36 e1       	ldi	r19, 0x16	; 22
    35ce:	76 95       	lsr	r23
    35d0:	67 95       	ror	r22
    35d2:	57 95       	ror	r21
    35d4:	47 95       	ror	r20
    35d6:	3a 95       	dec	r19
    35d8:	d1 f7       	brne	.-12     	; 0x35ce <usart_set_baudrate+0x48>
    35da:	30 2d       	mov	r19, r0
    35dc:	15 c0       	rjmp	.+42     	; 0x3608 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    35de:	d9 01       	movw	r26, r18
    35e0:	c8 01       	movw	r24, r16
    35e2:	68 94       	set
    35e4:	13 f8       	bld	r1, 3
    35e6:	b6 95       	lsr	r27
    35e8:	a7 95       	ror	r26
    35ea:	97 95       	ror	r25
    35ec:	87 95       	ror	r24
    35ee:	16 94       	lsr	r1
    35f0:	d1 f7       	brne	.-12     	; 0x35e6 <usart_set_baudrate+0x60>
		min_rate /= 2;
    35f2:	b9 01       	movw	r22, r18
    35f4:	a8 01       	movw	r20, r16
    35f6:	03 2e       	mov	r0, r19
    35f8:	37 e1       	ldi	r19, 0x17	; 23
    35fa:	76 95       	lsr	r23
    35fc:	67 95       	ror	r22
    35fe:	57 95       	ror	r21
    3600:	47 95       	ror	r20
    3602:	3a 95       	dec	r19
    3604:	d1 f7       	brne	.-12     	; 0x35fa <usart_set_baudrate+0x74>
    3606:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    3608:	88 15       	cp	r24, r8
    360a:	99 05       	cpc	r25, r9
    360c:	aa 05       	cpc	r26, r10
    360e:	bb 05       	cpc	r27, r11
    3610:	08 f4       	brcc	.+2      	; 0x3614 <usart_set_baudrate+0x8e>
    3612:	a6 c0       	rjmp	.+332    	; 0x3760 <usart_set_baudrate+0x1da>
    3614:	84 16       	cp	r8, r20
    3616:	95 06       	cpc	r9, r21
    3618:	a6 06       	cpc	r10, r22
    361a:	b7 06       	cpc	r11, r23
    361c:	08 f4       	brcc	.+2      	; 0x3620 <usart_set_baudrate+0x9a>
    361e:	a2 c0       	rjmp	.+324    	; 0x3764 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    3620:	f7 01       	movw	r30, r14
    3622:	84 81       	ldd	r24, Z+4	; 0x04
    3624:	82 fd       	sbrc	r24, 2
    3626:	04 c0       	rjmp	.+8      	; 0x3630 <usart_set_baudrate+0xaa>
		baud *= 2;
    3628:	88 0c       	add	r8, r8
    362a:	99 1c       	adc	r9, r9
    362c:	aa 1c       	adc	r10, r10
    362e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    3630:	c3 01       	movw	r24, r6
    3632:	b2 01       	movw	r22, r4
    3634:	a5 01       	movw	r20, r10
    3636:	94 01       	movw	r18, r8
    3638:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    363c:	2f 3f       	cpi	r18, 0xFF	; 255
    363e:	31 05       	cpc	r19, r1
    3640:	41 05       	cpc	r20, r1
    3642:	51 05       	cpc	r21, r1
    3644:	08 f4       	brcc	.+2      	; 0x3648 <usart_set_baudrate+0xc2>
    3646:	90 c0       	rjmp	.+288    	; 0x3768 <usart_set_baudrate+0x1e2>
    3648:	8f ef       	ldi	r24, 0xFF	; 255
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	a0 e0       	ldi	r26, 0x00	; 0
    364e:	b0 e0       	ldi	r27, 0x00	; 0
    3650:	c9 ef       	ldi	r28, 0xF9	; 249
    3652:	05 c0       	rjmp	.+10     	; 0x365e <usart_set_baudrate+0xd8>
    3654:	28 17       	cp	r18, r24
    3656:	39 07       	cpc	r19, r25
    3658:	4a 07       	cpc	r20, r26
    365a:	5b 07       	cpc	r21, r27
    365c:	58 f0       	brcs	.+22     	; 0x3674 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    365e:	88 0f       	add	r24, r24
    3660:	99 1f       	adc	r25, r25
    3662:	aa 1f       	adc	r26, r26
    3664:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    3666:	cd 3f       	cpi	r28, 0xFD	; 253
    3668:	0c f4       	brge	.+2      	; 0x366c <usart_set_baudrate+0xe6>
			limit |= 1;
    366a:	81 60       	ori	r24, 0x01	; 1
    366c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    366e:	c7 30       	cpi	r28, 0x07	; 7
    3670:	89 f7       	brne	.-30     	; 0x3654 <usart_set_baudrate+0xce>
    3672:	4f c0       	rjmp	.+158    	; 0x3712 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    3674:	cc 23       	and	r28, r28
    3676:	0c f0       	brlt	.+2      	; 0x367a <usart_set_baudrate+0xf4>
    3678:	4c c0       	rjmp	.+152    	; 0x3712 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    367a:	d5 01       	movw	r26, r10
    367c:	c4 01       	movw	r24, r8
    367e:	88 0f       	add	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	aa 1f       	adc	r26, r26
    3684:	bb 1f       	adc	r27, r27
    3686:	88 0f       	add	r24, r24
    3688:	99 1f       	adc	r25, r25
    368a:	aa 1f       	adc	r26, r26
    368c:	bb 1f       	adc	r27, r27
    368e:	88 0f       	add	r24, r24
    3690:	99 1f       	adc	r25, r25
    3692:	aa 1f       	adc	r26, r26
    3694:	bb 1f       	adc	r27, r27
    3696:	48 1a       	sub	r4, r24
    3698:	59 0a       	sbc	r5, r25
    369a:	6a 0a       	sbc	r6, r26
    369c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    369e:	ce 3f       	cpi	r28, 0xFE	; 254
    36a0:	f4 f4       	brge	.+60     	; 0x36de <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    36a2:	8d ef       	ldi	r24, 0xFD	; 253
    36a4:	9f ef       	ldi	r25, 0xFF	; 255
    36a6:	8c 1b       	sub	r24, r28
    36a8:	91 09       	sbc	r25, r1
    36aa:	c7 fd       	sbrc	r28, 7
    36ac:	93 95       	inc	r25
    36ae:	04 c0       	rjmp	.+8      	; 0x36b8 <usart_set_baudrate+0x132>
    36b0:	44 0c       	add	r4, r4
    36b2:	55 1c       	adc	r5, r5
    36b4:	66 1c       	adc	r6, r6
    36b6:	77 1c       	adc	r7, r7
    36b8:	8a 95       	dec	r24
    36ba:	d2 f7       	brpl	.-12     	; 0x36b0 <usart_set_baudrate+0x12a>
    36bc:	d5 01       	movw	r26, r10
    36be:	c4 01       	movw	r24, r8
    36c0:	b6 95       	lsr	r27
    36c2:	a7 95       	ror	r26
    36c4:	97 95       	ror	r25
    36c6:	87 95       	ror	r24
    36c8:	bc 01       	movw	r22, r24
    36ca:	cd 01       	movw	r24, r26
    36cc:	64 0d       	add	r22, r4
    36ce:	75 1d       	adc	r23, r5
    36d0:	86 1d       	adc	r24, r6
    36d2:	97 1d       	adc	r25, r7
    36d4:	a5 01       	movw	r20, r10
    36d6:	94 01       	movw	r18, r8
    36d8:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
    36dc:	37 c0       	rjmp	.+110    	; 0x374c <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    36de:	83 e0       	ldi	r24, 0x03	; 3
    36e0:	8c 0f       	add	r24, r28
    36e2:	a5 01       	movw	r20, r10
    36e4:	94 01       	movw	r18, r8
    36e6:	04 c0       	rjmp	.+8      	; 0x36f0 <usart_set_baudrate+0x16a>
    36e8:	22 0f       	add	r18, r18
    36ea:	33 1f       	adc	r19, r19
    36ec:	44 1f       	adc	r20, r20
    36ee:	55 1f       	adc	r21, r21
    36f0:	8a 95       	dec	r24
    36f2:	d2 f7       	brpl	.-12     	; 0x36e8 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    36f4:	da 01       	movw	r26, r20
    36f6:	c9 01       	movw	r24, r18
    36f8:	b6 95       	lsr	r27
    36fa:	a7 95       	ror	r26
    36fc:	97 95       	ror	r25
    36fe:	87 95       	ror	r24
    3700:	bc 01       	movw	r22, r24
    3702:	cd 01       	movw	r24, r26
    3704:	64 0d       	add	r22, r4
    3706:	75 1d       	adc	r23, r5
    3708:	86 1d       	adc	r24, r6
    370a:	97 1d       	adc	r25, r7
    370c:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
    3710:	1d c0       	rjmp	.+58     	; 0x374c <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    3712:	83 e0       	ldi	r24, 0x03	; 3
    3714:	8c 0f       	add	r24, r28
    3716:	a5 01       	movw	r20, r10
    3718:	94 01       	movw	r18, r8
    371a:	04 c0       	rjmp	.+8      	; 0x3724 <usart_set_baudrate+0x19e>
    371c:	22 0f       	add	r18, r18
    371e:	33 1f       	adc	r19, r19
    3720:	44 1f       	adc	r20, r20
    3722:	55 1f       	adc	r21, r21
    3724:	8a 95       	dec	r24
    3726:	d2 f7       	brpl	.-12     	; 0x371c <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    3728:	da 01       	movw	r26, r20
    372a:	c9 01       	movw	r24, r18
    372c:	b6 95       	lsr	r27
    372e:	a7 95       	ror	r26
    3730:	97 95       	ror	r25
    3732:	87 95       	ror	r24
    3734:	bc 01       	movw	r22, r24
    3736:	cd 01       	movw	r24, r26
    3738:	64 0d       	add	r22, r4
    373a:	75 1d       	adc	r23, r5
    373c:	86 1d       	adc	r24, r6
    373e:	97 1d       	adc	r25, r7
    3740:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
    3744:	21 50       	subi	r18, 0x01	; 1
    3746:	31 09       	sbc	r19, r1
    3748:	41 09       	sbc	r20, r1
    374a:	51 09       	sbc	r21, r1
	volatile uint8_t reg_b = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	volatile uint8_t reg_a = (uint8_t)div;
	volatile uint16_t pre  = ((uint16_t)reg_b) | ((uint16_t)reg_a << 8);
#endif

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    374c:	83 2f       	mov	r24, r19
    374e:	8f 70       	andi	r24, 0x0F	; 15
    3750:	c2 95       	swap	r28
    3752:	c0 7f       	andi	r28, 0xF0	; 240
    3754:	c8 2b       	or	r28, r24
    3756:	f7 01       	movw	r30, r14
    3758:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    375a:	26 83       	std	Z+6, r18	; 0x06

	return true;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	18 c0       	rjmp	.+48     	; 0x3790 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	16 c0       	rjmp	.+44     	; 0x3790 <usart_set_baudrate+0x20a>
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	14 c0       	rjmp	.+40     	; 0x3790 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3768:	d5 01       	movw	r26, r10
    376a:	c4 01       	movw	r24, r8
    376c:	88 0f       	add	r24, r24
    376e:	99 1f       	adc	r25, r25
    3770:	aa 1f       	adc	r26, r26
    3772:	bb 1f       	adc	r27, r27
    3774:	88 0f       	add	r24, r24
    3776:	99 1f       	adc	r25, r25
    3778:	aa 1f       	adc	r26, r26
    377a:	bb 1f       	adc	r27, r27
    377c:	88 0f       	add	r24, r24
    377e:	99 1f       	adc	r25, r25
    3780:	aa 1f       	adc	r26, r26
    3782:	bb 1f       	adc	r27, r27
    3784:	48 1a       	sub	r4, r24
    3786:	59 0a       	sbc	r5, r25
    3788:	6a 0a       	sbc	r6, r26
    378a:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    378c:	c9 ef       	ldi	r28, 0xF9	; 249
    378e:	89 cf       	rjmp	.-238    	; 0x36a2 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	bf 90       	pop	r11
    379c:	af 90       	pop	r10
    379e:	9f 90       	pop	r9
    37a0:	8f 90       	pop	r8
    37a2:	7f 90       	pop	r7
    37a4:	6f 90       	pop	r6
    37a6:	5f 90       	pop	r5
    37a8:	4f 90       	pop	r4
    37aa:	08 95       	ret

000037ac <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    37ac:	0f 93       	push	r16
    37ae:	1f 93       	push	r17
    37b0:	cf 93       	push	r28
    37b2:	df 93       	push	r29
    37b4:	ec 01       	movw	r28, r24
    37b6:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    37b8:	00 97       	sbiw	r24, 0x00	; 0
    37ba:	09 f4       	brne	.+2      	; 0x37be <usart_init_rs232+0x12>
    37bc:	03 c1       	rjmp	.+518    	; 0x39c4 <usart_init_rs232+0x218>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    37be:	80 3c       	cpi	r24, 0xC0	; 192
    37c0:	91 05       	cpc	r25, r1
    37c2:	29 f4       	brne	.+10     	; 0x37ce <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    37c4:	60 e1       	ldi	r22, 0x10	; 16
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    37cc:	fb c0       	rjmp	.+502    	; 0x39c4 <usart_init_rs232+0x218>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    37ce:	c0 38       	cpi	r28, 0x80	; 128
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	d8 07       	cpc	r29, r24
    37d4:	29 f4       	brne	.+10     	; 0x37e0 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    37d6:	62 e0       	ldi	r22, 0x02	; 2
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    37de:	f2 c0       	rjmp	.+484    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    37e0:	c1 15       	cp	r28, r1
    37e2:	e1 e0       	ldi	r30, 0x01	; 1
    37e4:	de 07       	cpc	r29, r30
    37e6:	29 f4       	brne	.+10     	; 0x37f2 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    37e8:	61 e0       	ldi	r22, 0x01	; 1
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    37f0:	e9 c0       	rjmp	.+466    	; 0x39c4 <usart_init_rs232+0x218>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    37f2:	c0 38       	cpi	r28, 0x80	; 128
    37f4:	f3 e0       	ldi	r31, 0x03	; 3
    37f6:	df 07       	cpc	r29, r31
    37f8:	29 f4       	brne	.+10     	; 0x3804 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    37fa:	61 e0       	ldi	r22, 0x01	; 1
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    3802:	e0 c0       	rjmp	.+448    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    3804:	c0 39       	cpi	r28, 0x90	; 144
    3806:	83 e0       	ldi	r24, 0x03	; 3
    3808:	d8 07       	cpc	r29, r24
    380a:	29 f4       	brne	.+10     	; 0x3816 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    380c:	61 e0       	ldi	r22, 0x01	; 1
    380e:	82 e0       	ldi	r24, 0x02	; 2
    3810:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    3814:	d7 c0       	rjmp	.+430    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    3816:	c1 15       	cp	r28, r1
    3818:	e2 e0       	ldi	r30, 0x02	; 2
    381a:	de 07       	cpc	r29, r30
    381c:	29 f4       	brne	.+10     	; 0x3828 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    381e:	62 e0       	ldi	r22, 0x02	; 2
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    3826:	ce c0       	rjmp	.+412    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    3828:	c0 34       	cpi	r28, 0x40	; 64
    382a:	f2 e0       	ldi	r31, 0x02	; 2
    382c:	df 07       	cpc	r29, r31
    382e:	29 f4       	brne	.+10     	; 0x383a <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    3830:	62 e0       	ldi	r22, 0x02	; 2
    3832:	82 e0       	ldi	r24, 0x02	; 2
    3834:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    3838:	c5 c0       	rjmp	.+394    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    383a:	c0 32       	cpi	r28, 0x20	; 32
    383c:	83 e0       	ldi	r24, 0x03	; 3
    383e:	d8 07       	cpc	r29, r24
    3840:	29 f4       	brne	.+10     	; 0x384c <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    3842:	64 e0       	ldi	r22, 0x04	; 4
    3844:	82 e0       	ldi	r24, 0x02	; 2
    3846:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    384a:	bc c0       	rjmp	.+376    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    384c:	c1 15       	cp	r28, r1
    384e:	e8 e0       	ldi	r30, 0x08	; 8
    3850:	de 07       	cpc	r29, r30
    3852:	29 f4       	brne	.+10     	; 0x385e <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    3854:	61 e0       	ldi	r22, 0x01	; 1
    3856:	83 e0       	ldi	r24, 0x03	; 3
    3858:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    385c:	b3 c0       	rjmp	.+358    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    385e:	c1 15       	cp	r28, r1
    3860:	f9 e0       	ldi	r31, 0x09	; 9
    3862:	df 07       	cpc	r29, r31
    3864:	29 f4       	brne	.+10     	; 0x3870 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    3866:	61 e0       	ldi	r22, 0x01	; 1
    3868:	84 e0       	ldi	r24, 0x04	; 4
    386a:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    386e:	aa c0       	rjmp	.+340    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    3870:	c1 15       	cp	r28, r1
    3872:	8a e0       	ldi	r24, 0x0A	; 10
    3874:	d8 07       	cpc	r29, r24
    3876:	29 f4       	brne	.+10     	; 0x3882 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    3878:	61 e0       	ldi	r22, 0x01	; 1
    387a:	85 e0       	ldi	r24, 0x05	; 5
    387c:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    3880:	a1 c0       	rjmp	.+322    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    3882:	c1 15       	cp	r28, r1
    3884:	eb e0       	ldi	r30, 0x0B	; 11
    3886:	de 07       	cpc	r29, r30
    3888:	29 f4       	brne	.+10     	; 0x3894 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    388a:	61 e0       	ldi	r22, 0x01	; 1
    388c:	86 e0       	ldi	r24, 0x06	; 6
    388e:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    3892:	98 c0       	rjmp	.+304    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    3894:	c0 34       	cpi	r28, 0x40	; 64
    3896:	f8 e0       	ldi	r31, 0x08	; 8
    3898:	df 07       	cpc	r29, r31
    389a:	29 f4       	brne	.+10     	; 0x38a6 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    389c:	62 e0       	ldi	r22, 0x02	; 2
    389e:	83 e0       	ldi	r24, 0x03	; 3
    38a0:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    38a4:	8f c0       	rjmp	.+286    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    38a6:	c0 34       	cpi	r28, 0x40	; 64
    38a8:	89 e0       	ldi	r24, 0x09	; 9
    38aa:	d8 07       	cpc	r29, r24
    38ac:	29 f4       	brne	.+10     	; 0x38b8 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    38ae:	62 e0       	ldi	r22, 0x02	; 2
    38b0:	84 e0       	ldi	r24, 0x04	; 4
    38b2:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    38b6:	86 c0       	rjmp	.+268    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    38b8:	c0 34       	cpi	r28, 0x40	; 64
    38ba:	ea e0       	ldi	r30, 0x0A	; 10
    38bc:	de 07       	cpc	r29, r30
    38be:	29 f4       	brne	.+10     	; 0x38ca <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    38c0:	62 e0       	ldi	r22, 0x02	; 2
    38c2:	85 e0       	ldi	r24, 0x05	; 5
    38c4:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    38c8:	7d c0       	rjmp	.+250    	; 0x39c4 <usart_init_rs232+0x218>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    38ca:	c0 39       	cpi	r28, 0x90	; 144
    38cc:	f8 e0       	ldi	r31, 0x08	; 8
    38ce:	df 07       	cpc	r29, r31
    38d0:	29 f4       	brne	.+10     	; 0x38dc <usart_init_rs232+0x130>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    38d2:	64 e0       	ldi	r22, 0x04	; 4
    38d4:	83 e0       	ldi	r24, 0x03	; 3
    38d6:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    38da:	74 c0       	rjmp	.+232    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    38dc:	c0 39       	cpi	r28, 0x90	; 144
    38de:	89 e0       	ldi	r24, 0x09	; 9
    38e0:	d8 07       	cpc	r29, r24
    38e2:	29 f4       	brne	.+10     	; 0x38ee <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    38e4:	64 e0       	ldi	r22, 0x04	; 4
    38e6:	84 e0       	ldi	r24, 0x04	; 4
    38e8:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    38ec:	6b c0       	rjmp	.+214    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    38ee:	c0 39       	cpi	r28, 0x90	; 144
    38f0:	ea e0       	ldi	r30, 0x0A	; 10
    38f2:	de 07       	cpc	r29, r30
    38f4:	29 f4       	brne	.+10     	; 0x3900 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    38f6:	64 e0       	ldi	r22, 0x04	; 4
    38f8:	85 e0       	ldi	r24, 0x05	; 5
    38fa:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    38fe:	62 c0       	rjmp	.+196    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    3900:	c0 39       	cpi	r28, 0x90	; 144
    3902:	fb e0       	ldi	r31, 0x0B	; 11
    3904:	df 07       	cpc	r29, r31
    3906:	29 f4       	brne	.+10     	; 0x3912 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    3908:	64 e0       	ldi	r22, 0x04	; 4
    390a:	86 e0       	ldi	r24, 0x06	; 6
    390c:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    3910:	59 c0       	rjmp	.+178    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    3912:	c0 3c       	cpi	r28, 0xC0	; 192
    3914:	88 e0       	ldi	r24, 0x08	; 8
    3916:	d8 07       	cpc	r29, r24
    3918:	29 f4       	brne	.+10     	; 0x3924 <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    391a:	68 e0       	ldi	r22, 0x08	; 8
    391c:	83 e0       	ldi	r24, 0x03	; 3
    391e:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    3922:	50 c0       	rjmp	.+160    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    3924:	c0 3c       	cpi	r28, 0xC0	; 192
    3926:	e9 e0       	ldi	r30, 0x09	; 9
    3928:	de 07       	cpc	r29, r30
    392a:	29 f4       	brne	.+10     	; 0x3936 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    392c:	68 e0       	ldi	r22, 0x08	; 8
    392e:	84 e0       	ldi	r24, 0x04	; 4
    3930:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    3934:	47 c0       	rjmp	.+142    	; 0x39c4 <usart_init_rs232+0x218>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    3936:	c0 3a       	cpi	r28, 0xA0	; 160
    3938:	f8 e0       	ldi	r31, 0x08	; 8
    393a:	df 07       	cpc	r29, r31
    393c:	29 f4       	brne	.+10     	; 0x3948 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    393e:	60 e1       	ldi	r22, 0x10	; 16
    3940:	83 e0       	ldi	r24, 0x03	; 3
    3942:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    3946:	3e c0       	rjmp	.+124    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    3948:	c0 3a       	cpi	r28, 0xA0	; 160
    394a:	89 e0       	ldi	r24, 0x09	; 9
    394c:	d8 07       	cpc	r29, r24
    394e:	29 f4       	brne	.+10     	; 0x395a <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    3950:	60 e1       	ldi	r22, 0x10	; 16
    3952:	84 e0       	ldi	r24, 0x04	; 4
    3954:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    3958:	35 c0       	rjmp	.+106    	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    395a:	c0 3a       	cpi	r28, 0xA0	; 160
    395c:	ea e0       	ldi	r30, 0x0A	; 10
    395e:	de 07       	cpc	r29, r30
    3960:	29 f4       	brne	.+10     	; 0x396c <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    3962:	60 e1       	ldi	r22, 0x10	; 16
    3964:	85 e0       	ldi	r24, 0x05	; 5
    3966:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    396a:	2c c0       	rjmp	.+88     	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    396c:	c0 3a       	cpi	r28, 0xA0	; 160
    396e:	fb e0       	ldi	r31, 0x0B	; 11
    3970:	df 07       	cpc	r29, r31
    3972:	29 f4       	brne	.+10     	; 0x397e <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    3974:	60 e1       	ldi	r22, 0x10	; 16
    3976:	86 e0       	ldi	r24, 0x06	; 6
    3978:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    397c:	23 c0       	rjmp	.+70     	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    397e:	c0 3b       	cpi	r28, 0xB0	; 176
    3980:	88 e0       	ldi	r24, 0x08	; 8
    3982:	d8 07       	cpc	r29, r24
    3984:	29 f4       	brne	.+10     	; 0x3990 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    3986:	60 e2       	ldi	r22, 0x20	; 32
    3988:	83 e0       	ldi	r24, 0x03	; 3
    398a:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    398e:	1a c0       	rjmp	.+52     	; 0x39c4 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    3990:	c0 3b       	cpi	r28, 0xB0	; 176
    3992:	e9 e0       	ldi	r30, 0x09	; 9
    3994:	de 07       	cpc	r29, r30
    3996:	29 f4       	brne	.+10     	; 0x39a2 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    3998:	60 e2       	ldi	r22, 0x20	; 32
    399a:	84 e0       	ldi	r24, 0x04	; 4
    399c:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    39a0:	11 c0       	rjmp	.+34     	; 0x39c4 <usart_init_rs232+0x218>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    39a2:	c0 38       	cpi	r28, 0x80	; 128
    39a4:	f4 e0       	ldi	r31, 0x04	; 4
    39a6:	df 07       	cpc	r29, r31
    39a8:	29 f4       	brne	.+10     	; 0x39b4 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    39aa:	60 e4       	ldi	r22, 0x40	; 64
    39ac:	83 e0       	ldi	r24, 0x03	; 3
    39ae:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    39b2:	08 c0       	rjmp	.+16     	; 0x39c4 <usart_init_rs232+0x218>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    39b4:	c0 3a       	cpi	r28, 0xA0	; 160
    39b6:	84 e0       	ldi	r24, 0x04	; 4
    39b8:	d8 07       	cpc	r29, r24
    39ba:	21 f4       	brne	.+8      	; 0x39c4 <usart_init_rs232+0x218>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    39bc:	60 e4       	ldi	r22, 0x40	; 64
    39be:	85 e0       	ldi	r24, 0x05	; 5
    39c0:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    39c4:	8d 81       	ldd	r24, Y+5	; 0x05
    39c6:	8f 73       	andi	r24, 0x3F	; 63
    39c8:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    39ca:	f8 01       	movw	r30, r16
    39cc:	95 81       	ldd	r25, Z+5	; 0x05
    39ce:	84 81       	ldd	r24, Z+4	; 0x04
    39d0:	89 2b       	or	r24, r25
    39d2:	96 81       	ldd	r25, Z+6	; 0x06
    39d4:	91 11       	cpse	r25, r1
    39d6:	98 e0       	ldi	r25, 0x08	; 8
    39d8:	89 2b       	or	r24, r25
    39da:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    39dc:	f8 01       	movw	r30, r16
    39de:	40 81       	ld	r20, Z
    39e0:	51 81       	ldd	r21, Z+1	; 0x01
    39e2:	62 81       	ldd	r22, Z+2	; 0x02
    39e4:	73 81       	ldd	r23, Z+3	; 0x03
    39e6:	00 e8       	ldi	r16, 0x80	; 128
    39e8:	13 ec       	ldi	r17, 0xC3	; 195
    39ea:	29 ec       	ldi	r18, 0xC9	; 201
    39ec:	31 e0       	ldi	r19, 0x01	; 1
    39ee:	ce 01       	movw	r24, r28
    39f0:	ca dd       	rcall	.-1132   	; 0x3586 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    39f2:	9c 81       	ldd	r25, Y+4	; 0x04
    39f4:	98 60       	ori	r25, 0x08	; 8
    39f6:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    39f8:	9c 81       	ldd	r25, Y+4	; 0x04
    39fa:	90 61       	ori	r25, 0x10	; 16
    39fc:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    39fe:	df 91       	pop	r29
    3a00:	cf 91       	pop	r28
    3a02:	1f 91       	pop	r17
    3a04:	0f 91       	pop	r16
    3a06:	08 95       	ret

00003a08 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    3a08:	04 c0       	rjmp	.+8      	; 0x3a12 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    3a0a:	61 50       	subi	r22, 0x01	; 1
    3a0c:	71 09       	sbc	r23, r1
    3a0e:	81 09       	sbc	r24, r1
    3a10:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    3a12:	61 15       	cp	r22, r1
    3a14:	71 05       	cpc	r23, r1
    3a16:	81 05       	cpc	r24, r1
    3a18:	91 05       	cpc	r25, r1
    3a1a:	b9 f7       	brne	.-18     	; 0x3a0a <__portable_avr_delay_cycles+0x2>
    3a1c:	08 95       	ret

00003a1e <__vector_119>:

/* ISR routines */

/* Serial data received */
ISR(USARTF0_RXC_vect)
{
    3a1e:	1f 92       	push	r1
    3a20:	0f 92       	push	r0
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	0f 92       	push	r0
    3a26:	11 24       	eor	r1, r1
    3a28:	0b b6       	in	r0, 0x3b	; 59
    3a2a:	0f 92       	push	r0
    3a2c:	2f 93       	push	r18
    3a2e:	3f 93       	push	r19
    3a30:	4f 93       	push	r20
    3a32:	5f 93       	push	r21
    3a34:	6f 93       	push	r22
    3a36:	7f 93       	push	r23
    3a38:	8f 93       	push	r24
    3a3a:	9f 93       	push	r25
    3a3c:	af 93       	push	r26
    3a3e:	bf 93       	push	r27
    3a40:	ef 93       	push	r30
    3a42:	ff 93       	push	r31
	/* Byte received */
	uint8_t ser1_rxd = usart_getchar(USART_SERIAL1);
    3a44:	80 ea       	ldi	r24, 0xA0	; 160
    3a46:	9b e0       	ldi	r25, 0x0B	; 11
    3a48:	98 dd       	rcall	.-1232   	; 0x357a <usart_getchar>

	if (g_usart1_rx_idx < C_USART1_RX_BUF_LEN) {
    3a4a:	20 91 74 28 	lds	r18, 0x2874	; 0x802874 <g_usart1_rx_idx>
    3a4e:	30 91 75 28 	lds	r19, 0x2875	; 0x802875 <g_usart1_rx_idx+0x1>
    3a52:	2f 3f       	cpi	r18, 0xFF	; 255
    3a54:	31 05       	cpc	r19, r1
    3a56:	09 f0       	breq	.+2      	; 0x3a5a <__vector_119+0x3c>
    3a58:	58 f4       	brcc	.+22     	; 0x3a70 <__vector_119+0x52>
		g_usart1_rx_buf[g_usart1_rx_idx++] = ser1_rxd;
    3a5a:	a9 01       	movw	r20, r18
    3a5c:	4f 5f       	subi	r20, 0xFF	; 255
    3a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a60:	40 93 74 28 	sts	0x2874, r20	; 0x802874 <g_usart1_rx_idx>
    3a64:	50 93 75 28 	sts	0x2875, r21	; 0x802875 <g_usart1_rx_idx+0x1>
    3a68:	f9 01       	movw	r30, r18
    3a6a:	ec 58       	subi	r30, 0x8C	; 140
    3a6c:	f8 4d       	sbci	r31, 0xD8	; 216
    3a6e:	80 83       	st	Z, r24
	}

	/* Input string ready to read */
	g_usart1_rx_ready = true;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	80 93 76 28 	sts	0x2876, r24	; 0x802876 <g_usart1_rx_ready>
}
    3a76:	ff 91       	pop	r31
    3a78:	ef 91       	pop	r30
    3a7a:	bf 91       	pop	r27
    3a7c:	af 91       	pop	r26
    3a7e:	9f 91       	pop	r25
    3a80:	8f 91       	pop	r24
    3a82:	7f 91       	pop	r23
    3a84:	6f 91       	pop	r22
    3a86:	5f 91       	pop	r21
    3a88:	4f 91       	pop	r20
    3a8a:	3f 91       	pop	r19
    3a8c:	2f 91       	pop	r18
    3a8e:	0f 90       	pop	r0
    3a90:	0b be       	out	0x3b, r0	; 59
    3a92:	0f 90       	pop	r0
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	0f 90       	pop	r0
    3a98:	1f 90       	pop	r1
    3a9a:	18 95       	reti

00003a9c <serial_sim808_send>:


/* Functions */

void serial_sim808_send(const char* cmd, uint8_t len)
{
    3a9c:	dc 01       	movw	r26, r24
	/* Make a copy */
	for (uint8_t cnt = len, idx = len - 1; cnt; --cnt, --idx) {
    3a9e:	9f ef       	ldi	r25, 0xFF	; 255
    3aa0:	96 0f       	add	r25, r22
    3aa2:	66 23       	and	r22, r22
    3aa4:	61 f0       	breq	.+24     	; 0x3abe <serial_sim808_send+0x22>
		g_prepare_buf[idx] = cmd[idx];
    3aa6:	29 2f       	mov	r18, r25
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	fd 01       	movw	r30, r26
    3aac:	e2 0f       	add	r30, r18
    3aae:	f3 1f       	adc	r31, r19
    3ab0:	50 81       	ld	r21, Z
    3ab2:	f9 01       	movw	r30, r18
    3ab4:	e5 5e       	subi	r30, 0xE5	; 229
    3ab6:	fa 4d       	sbci	r31, 0xDA	; 218
    3ab8:	50 83       	st	Z, r21
/* Functions */

void serial_sim808_send(const char* cmd, uint8_t len)
{
	/* Make a copy */
	for (uint8_t cnt = len, idx = len - 1; cnt; --cnt, --idx) {
    3aba:	91 50       	subi	r25, 0x01	; 1
    3abc:	a0 f7       	brcc	.-24     	; 0x3aa6 <serial_sim808_send+0xa>
		g_prepare_buf[idx] = cmd[idx];
	}
	g_prepare_buf[len]		= '\r';
    3abe:	46 2f       	mov	r20, r22
    3ac0:	50 e0       	ldi	r21, 0x00	; 0
    3ac2:	fa 01       	movw	r30, r20
    3ac4:	e5 5e       	subi	r30, 0xE5	; 229
    3ac6:	fa 4d       	sbci	r31, 0xDA	; 218
    3ac8:	8d e0       	ldi	r24, 0x0D	; 13
    3aca:	80 83       	st	Z, r24
	g_prepare_buf[len + 1]	= 0;
    3acc:	11 82       	std	Z+1, r1	; 0x01

	/* Send the string to the SIM808 */
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3ace:	6b e1       	ldi	r22, 0x1B	; 27
    3ad0:	75 e2       	ldi	r23, 0x25	; 37
    3ad2:	80 ea       	ldi	r24, 0xA0	; 160
    3ad4:	9b e0       	ldi	r25, 0x0B	; 11
    3ad6:	2f cd       	rjmp	.-1442   	; 0x3536 <usart_serial_write_packet>
    3ad8:	08 95       	ret

00003ada <serial_init>:
}

/* Set up serial connection to the SIM808 */
void serial_init(void)
{
    3ada:	cf 92       	push	r12
    3adc:	df 92       	push	r13
    3ade:	ff 92       	push	r15
    3ae0:	0f 93       	push	r16
    3ae2:	1f 93       	push	r17
    3ae4:	cf 93       	push	r28
    3ae6:	df 93       	push	r29
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	27 97       	sbiw	r28, 0x07	; 7
    3aee:	cd bf       	out	0x3d, r28	; 61
    3af0:	de bf       	out	0x3e, r29	; 62
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3af2:	e0 ea       	ldi	r30, 0xA0	; 160
    3af4:	f6 e0       	ldi	r31, 0x06	; 6
    3af6:	92 e0       	ldi	r25, 0x02	; 2
    3af8:	95 83       	std	Z+5, r25	; 0x05
    3afa:	88 e0       	ldi	r24, 0x08	; 8
    3afc:	85 83       	std	Z+5, r24	; 0x05
    3afe:	60 e8       	ldi	r22, 0x80	; 128
    3b00:	65 83       	std	Z+5, r22	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3b02:	20 e8       	ldi	r18, 0x80	; 128
    3b04:	36 e0       	ldi	r19, 0x06	; 6
    3b06:	00 e2       	ldi	r16, 0x20	; 32
    3b08:	d9 01       	movw	r26, r18
    3b0a:	16 96       	adiw	r26, 0x06	; 6
    3b0c:	0c 93       	st	X, r16
    3b0e:	16 97       	sbiw	r26, 0x06	; 6
    3b10:	70 e1       	ldi	r23, 0x10	; 16
    3b12:	16 96       	adiw	r26, 0x06	; 6
    3b14:	7c 93       	st	X, r23
    3b16:	0f 2e       	mov	r0, r31
    3b18:	f0 e6       	ldi	r31, 0x60	; 96
    3b1a:	cf 2e       	mov	r12, r31
    3b1c:	f6 e0       	ldi	r31, 0x06	; 6
    3b1e:	df 2e       	mov	r13, r31
    3b20:	f0 2d       	mov	r31, r0
    3b22:	d6 01       	movw	r26, r12
    3b24:	16 96       	adiw	r26, 0x06	; 6
    3b26:	9c 93       	st	X, r25
    3b28:	16 97       	sbiw	r26, 0x06	; 6
    3b2a:	16 96       	adiw	r26, 0x06	; 6
    3b2c:	8c 93       	st	X, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b2e:	4f b7       	in	r20, 0x3f	; 63
    3b30:	49 83       	std	Y+1, r20	; 0x01
	cpu_irq_disable();
    3b32:	f8 94       	cli
	return flags;
    3b34:	f9 80       	ldd	r15, Y+1	; 0x01
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3b36:	41 eb       	ldi	r20, 0xB1	; 177
    3b38:	56 e0       	ldi	r21, 0x06	; 6
    3b3a:	da 01       	movw	r26, r20
    3b3c:	1c 91       	ld	r17, X
    3b3e:	17 70       	andi	r17, 0x07	; 7
    3b40:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3b42:	1c 91       	ld	r17, X
    3b44:	10 68       	ori	r17, 0x80	; 128
    3b46:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b48:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b4a:	4f b7       	in	r20, 0x3f	; 63
    3b4c:	4a 83       	std	Y+2, r20	; 0x02
	cpu_irq_disable();
    3b4e:	f8 94       	cli
	return flags;
    3b50:	fa 80       	ldd	r15, Y+2	; 0x02
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3b52:	43 eb       	ldi	r20, 0xB3	; 179
    3b54:	56 e0       	ldi	r21, 0x06	; 6
    3b56:	da 01       	movw	r26, r20
    3b58:	1c 91       	ld	r17, X
    3b5a:	17 70       	andi	r17, 0x07	; 7
    3b5c:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3b5e:	1c 91       	ld	r17, X
    3b60:	10 68       	ori	r17, 0x80	; 128
    3b62:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b64:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b66:	4f b7       	in	r20, 0x3f	; 63
    3b68:	4b 83       	std	Y+3, r20	; 0x03
	cpu_irq_disable();
    3b6a:	f8 94       	cli
	return flags;
    3b6c:	fb 80       	ldd	r15, Y+3	; 0x03
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3b6e:	47 eb       	ldi	r20, 0xB7	; 183
    3b70:	56 e0       	ldi	r21, 0x06	; 6
    3b72:	da 01       	movw	r26, r20
    3b74:	1c 91       	ld	r17, X
    3b76:	17 70       	andi	r17, 0x07	; 7
    3b78:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3b7a:	1c 91       	ld	r17, X
    3b7c:	10 68       	ori	r17, 0x80	; 128
    3b7e:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b80:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b82:	4f b7       	in	r20, 0x3f	; 63
    3b84:	4c 83       	std	Y+4, r20	; 0x04
	cpu_irq_disable();
    3b86:	f8 94       	cli
	return flags;
    3b88:	fc 80       	ldd	r15, Y+4	; 0x04
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3b8a:	45 e9       	ldi	r20, 0x95	; 149
    3b8c:	56 e0       	ldi	r21, 0x06	; 6
    3b8e:	da 01       	movw	r26, r20
    3b90:	1c 91       	ld	r17, X
    3b92:	17 70       	andi	r17, 0x07	; 7
    3b94:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3b96:	1c 91       	ld	r17, X
    3b98:	10 69       	ori	r17, 0x90	; 144
    3b9a:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b9c:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b9e:	4f b7       	in	r20, 0x3f	; 63
    3ba0:	4d 83       	std	Y+5, r20	; 0x05
	cpu_irq_disable();
    3ba2:	f8 94       	cli
	return flags;
    3ba4:	fd 80       	ldd	r15, Y+5	; 0x05
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3ba6:	44 e9       	ldi	r20, 0x94	; 148
    3ba8:	56 e0       	ldi	r21, 0x06	; 6
    3baa:	da 01       	movw	r26, r20
    3bac:	1c 91       	ld	r17, X
    3bae:	17 70       	andi	r17, 0x07	; 7
    3bb0:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3bb2:	1c 91       	ld	r17, X
    3bb4:	10 69       	ori	r17, 0x90	; 144
    3bb6:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3bb8:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3bba:	4f b7       	in	r20, 0x3f	; 63
    3bbc:	4e 83       	std	Y+6, r20	; 0x06
	cpu_irq_disable();
    3bbe:	f8 94       	cli
	return flags;
    3bc0:	fe 80       	ldd	r15, Y+6	; 0x06
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3bc2:	41 e7       	ldi	r20, 0x71	; 113
    3bc4:	56 e0       	ldi	r21, 0x06	; 6
    3bc6:	da 01       	movw	r26, r20
    3bc8:	1c 91       	ld	r17, X
    3bca:	17 70       	andi	r17, 0x07	; 7
    3bcc:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3bce:	1c 91       	ld	r17, X
    3bd0:	10 69       	ori	r17, 0x90	; 144
    3bd2:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3bd4:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3bd6:	4f b7       	in	r20, 0x3f	; 63
    3bd8:	4f 83       	std	Y+7, r20	; 0x07
	cpu_irq_disable();
    3bda:	f8 94       	cli
	return flags;
    3bdc:	ff 80       	ldd	r15, Y+7	; 0x07
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3bde:	43 e7       	ldi	r20, 0x73	; 115
    3be0:	56 e0       	ldi	r21, 0x06	; 6
    3be2:	da 01       	movw	r26, r20
    3be4:	1c 91       	ld	r17, X
    3be6:	17 70       	andi	r17, 0x07	; 7
    3be8:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3bea:	1c 91       	ld	r17, X
    3bec:	10 69       	ori	r17, 0x90	; 144
    3bee:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3bf0:	ff be       	out	0x3f, r15	; 63
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3bf2:	91 83       	std	Z+1, r25	; 0x01
    3bf4:	81 83       	std	Z+1, r24	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3bf6:	54 e0       	ldi	r21, 0x04	; 4
    3bf8:	52 83       	std	Z+2, r21	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3bfa:	61 83       	std	Z+1, r22	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3bfc:	10 e4       	ldi	r17, 0x40	; 64
    3bfe:	12 83       	std	Z+2, r17	; 0x02
    3c00:	72 83       	std	Z+2, r23	; 0x02
    3c02:	41 e0       	ldi	r20, 0x01	; 1
    3c04:	42 83       	std	Z+2, r20	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3c06:	f9 01       	movw	r30, r18
    3c08:	01 83       	std	Z+1, r16	; 0x01
    3c0a:	71 83       	std	Z+1, r23	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3c0c:	82 83       	std	Z+2, r24	; 0x02
    3c0e:	e0 e0       	ldi	r30, 0x00	; 0
    3c10:	f6 e0       	ldi	r31, 0x06	; 6
    3c12:	62 83       	std	Z+2, r22	; 0x02
    3c14:	12 83       	std	Z+2, r17	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3c16:	d6 01       	movw	r26, r12
    3c18:	11 96       	adiw	r26, 0x01	; 1
    3c1a:	9c 93       	st	X, r25
    3c1c:	11 97       	sbiw	r26, 0x01	; 1
    3c1e:	11 96       	adiw	r26, 0x01	; 1
    3c20:	8c 93       	st	X, r24
    3c22:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3c24:	12 96       	adiw	r26, 0x02	; 2
    3c26:	5c 93       	st	X, r21
    3c28:	12 97       	sbiw	r26, 0x02	; 2
    3c2a:	12 96       	adiw	r26, 0x02	; 2
    3c2c:	4c 93       	st	X, r20
    3c2e:	40 93 e2 07 	sts	0x07E2, r20	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7007e2>

	ioport_set_pin_dir(GPS_GSM_1PPS_GPIO,			IOPORT_DIR_INPUT);


	/* Prepare to use ASF USART service */
	g_usart1_options.baudrate	= USART_SERIAL1_BAUDRATE;
    3c32:	e7 e7       	ldi	r30, 0x77	; 119
    3c34:	f8 e2       	ldi	r31, 0x28	; 40
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	96 e9       	ldi	r25, 0x96	; 150
    3c3a:	a0 e0       	ldi	r26, 0x00	; 0
    3c3c:	b0 e0       	ldi	r27, 0x00	; 0
    3c3e:	80 83       	st	Z, r24
    3c40:	91 83       	std	Z+1, r25	; 0x01
    3c42:	a2 83       	std	Z+2, r26	; 0x02
    3c44:	b3 83       	std	Z+3, r27	; 0x03
	g_usart1_options.charlength	= USART_SERIAL1_CHAR_LENGTH;
    3c46:	83 e0       	ldi	r24, 0x03	; 3
    3c48:	84 83       	std	Z+4, r24	; 0x04
	g_usart1_options.paritytype	= USART_SERIAL1_PARITY;
    3c4a:	15 82       	std	Z+5, r1	; 0x05
	g_usart1_options.stopbits	= USART_SERIAL1_STOP_BIT;
    3c4c:	16 82       	std	Z+6, r1	; 0x06
}
    3c4e:	27 96       	adiw	r28, 0x07	; 7
    3c50:	cd bf       	out	0x3d, r28	; 61
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	df 91       	pop	r29
    3c56:	cf 91       	pop	r28
    3c58:	1f 91       	pop	r17
    3c5a:	0f 91       	pop	r16
    3c5c:	ff 90       	pop	r15
    3c5e:	df 90       	pop	r13
    3c60:	cf 90       	pop	r12
    3c62:	08 95       	ret

00003c64 <serial_start>:
PROGMEM_DECLARE(const char, PM_TWI1_INIT_ONBOARD_SIM808_GPS_01[]);
PROGMEM_DECLARE(const char, PM_TWI1_INIT_ONBOARD_SIM808_GPS_02[]);

/* USB device stack start function to enable stack and start USB */
void serial_start(void)
{
    3c64:	2f 92       	push	r2
    3c66:	3f 92       	push	r3
    3c68:	4f 92       	push	r4
    3c6a:	5f 92       	push	r5
    3c6c:	6f 92       	push	r6
    3c6e:	7f 92       	push	r7
    3c70:	8f 92       	push	r8
    3c72:	9f 92       	push	r9
    3c74:	af 92       	push	r10
    3c76:	bf 92       	push	r11
    3c78:	cf 92       	push	r12
    3c7a:	df 92       	push	r13
    3c7c:	ef 92       	push	r14
    3c7e:	ff 92       	push	r15
    3c80:	0f 93       	push	r16
    3c82:	1f 93       	push	r17
    3c84:	cf 93       	push	r28
    3c86:	df 93       	push	r29
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	27 97       	sbiw	r28, 0x07	; 7
    3c8e:	cd bf       	out	0x3d, r28	; 61
    3c90:	de bf       	out	0x3e, r29	; 62
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    3c92:	e7 e7       	ldi	r30, 0x77	; 119
    3c94:	f8 e2       	ldi	r31, 0x28	; 40
    3c96:	84 81       	ldd	r24, Z+4	; 0x04
    3c98:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    3c9a:	85 81       	ldd	r24, Z+5	; 0x05
    3c9c:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    3c9e:	86 81       	ldd	r24, Z+6	; 0x06
    3ca0:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    3ca2:	80 81       	ld	r24, Z
    3ca4:	91 81       	ldd	r25, Z+1	; 0x01
    3ca6:	a2 81       	ldd	r26, Z+2	; 0x02
    3ca8:	b3 81       	ldd	r27, Z+3	; 0x03
    3caa:	89 83       	std	Y+1, r24	; 0x01
    3cac:	9a 83       	std	Y+2, r25	; 0x02
    3cae:	ab 83       	std	Y+3, r26	; 0x03
    3cb0:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    3cb2:	60 e1       	ldi	r22, 0x10	; 16
    3cb4:	86 e0       	ldi	r24, 0x06	; 6
    3cb6:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    3cba:	be 01       	movw	r22, r28
    3cbc:	6f 5f       	subi	r22, 0xFF	; 255
    3cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc0:	80 ea       	ldi	r24, 0xA0	; 160
    3cc2:	9b e0       	ldi	r25, 0x0B	; 11
    3cc4:	73 dd       	rcall	.-1306   	; 0x37ac <usart_init_rs232>

	/* Init and start of the ASF USART service/device */
	usart_serial_init(USART_SERIAL1, &g_usart1_options);

	/* ISR interrupt levels */
	((USART_t*)USART_SERIAL1)->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    3cc6:	80 e1       	ldi	r24, 0x10	; 16
    3cc8:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>

	/* Inform about to start the SIM808 - LCD */
	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_START);
    3ccc:	87 e7       	ldi	r24, 0x77	; 119
    3cce:	94 e0       	ldi	r25, 0x04	; 4
    3cd0:	9f 93       	push	r25
    3cd2:	8f 93       	push	r24
    3cd4:	1f 92       	push	r1
    3cd6:	68 94       	set
    3cd8:	ff 24       	eor	r15, r15
    3cda:	f6 f8       	bld	r15, 6
    3cdc:	ff 92       	push	r15
    3cde:	0b e1       	ldi	r16, 0x1B	; 27
    3ce0:	15 e2       	ldi	r17, 0x25	; 37
    3ce2:	1f 93       	push	r17
    3ce4:	0f 93       	push	r16
    3ce6:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3cea:	a8 01       	movw	r20, r16
    3cec:	66 e4       	ldi	r22, 0x46	; 70
    3cee:	88 e0       	ldi	r24, 0x08	; 8
    3cf0:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>

	/* Inform about to start the SIM808 - USB */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_START);
    3cf4:	8b ed       	ldi	r24, 0xDB	; 219
    3cf6:	94 e0       	ldi	r25, 0x04	; 4
    3cf8:	9f 93       	push	r25
    3cfa:	8f 93       	push	r24
    3cfc:	1f 92       	push	r1
    3cfe:	ff 92       	push	r15
    3d00:	1f 93       	push	r17
    3d02:	0f 93       	push	r16
    3d04:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, len, false);
    3d08:	40 e0       	ldi	r20, 0x00	; 0
    3d0a:	68 2f       	mov	r22, r24
    3d0c:	c8 01       	movw	r24, r16
    3d0e:	f6 d1       	rcall	.+1004   	; 0x40fc <udi_write_tx_buf>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3d10:	80 e2       	ldi	r24, 0x20	; 32
    3d12:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	/* Release the GSM_RESETn */
	ioport_set_pin_level(GSM_RESET_DRV_GPIO, HIGH);
	delay_ms(500);
    3d16:	61 ea       	ldi	r22, 0xA1	; 161
    3d18:	75 e2       	ldi	r23, 0x25	; 37
    3d1a:	86 e2       	ldi	r24, 0x26	; 38
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	74 de       	rcall	.-792    	; 0x3a08 <__portable_avr_delay_cycles>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3d20:	00 ea       	ldi	r16, 0xA0	; 160
    3d22:	16 e0       	ldi	r17, 0x06	; 6
    3d24:	82 e0       	ldi	r24, 0x02	; 2
    3d26:	f8 01       	movw	r30, r16
    3d28:	86 83       	std	Z+6, r24	; 0x06

	/* Data Terminal Ready is true */
	ioport_set_pin_level(GSM_DTR1_DRV, LOW);	// Activate SIM808 (non SLEEP mode)
	delay_ms(100);
    3d2a:	61 e2       	ldi	r22, 0x21	; 33
    3d2c:	71 ea       	ldi	r23, 0xA1	; 161
    3d2e:	87 e0       	ldi	r24, 0x07	; 7
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	6a de       	rcall	.-812    	; 0x3a08 <__portable_avr_delay_cycles>
    3d34:	80 e8       	ldi	r24, 0x80	; 128
    3d36:	f8 01       	movw	r30, r16
	ioport_set_pin_level(GSM_RTS1_DRV, LOW);	// Serial line ready
	delay_ms(1);
    3d38:	86 83       	std	Z+6, r24	; 0x06
    3d3a:	68 e8       	ldi	r22, 0x88	; 136
    3d3c:	73 e1       	ldi	r23, 0x13	; 19
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	62 de       	rcall	.-828    	; 0x3a08 <__portable_avr_delay_cycles>
    3d44:	cd bf       	out	0x3d, r28	; 61
	/* ISR interrupt levels */
	((USART_t*)USART_SERIAL1)->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;

	/* Inform about to start the SIM808 - LCD */
	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_START);
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3d46:	de bf       	out	0x3e, r29	; 62
    3d48:	68 94       	set
    3d4a:	bb 24       	eor	r11, r11
				g_usart1_rx_ready = false;
				cpu_irq_restore(flags);
			}

			/* Leave loop when SIM808 responds */
			if (g_prepare_buf[0] && strstr_P(g_prepare_buf, PM_SIM808_OK))
    3d4c:	b3 f8       	bld	r11, 3
    3d4e:	0f 2e       	mov	r0, r31
    3d50:	fb e1       	ldi	r31, 0x1B	; 27
    3d52:	ef 2e       	mov	r14, r31
    3d54:	f5 e2       	ldi	r31, 0x25	; 37
    3d56:	ff 2e       	mov	r15, r31
    3d58:	f0 2d       	mov	r31, r0
    3d5a:	9e 2c       	mov	r9, r14
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3d5c:	af 2c       	mov	r10, r15
    3d5e:	0f 2e       	mov	r0, r31
    3d60:	f0 ea       	ldi	r31, 0xA0	; 160
    3d62:	cf 2e       	mov	r12, r31
    3d64:	f6 e0       	ldi	r31, 0x06	; 6
    3d66:	df 2e       	mov	r13, r31
    3d68:	f0 2d       	mov	r31, r0
    3d6a:	68 94       	set
    3d6c:	88 24       	eor	r8, r8
    3d6e:	87 f8       	bld	r8, 7
    3d70:	68 94       	set
    3d72:	77 24       	eor	r7, r7
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3d74:	71 f8       	bld	r7, 1
    3d76:	68 94       	set
    3d78:	66 24       	eor	r6, r6
				/* Inform about restart - LCD */
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
    3d7a:	65 f8       	bld	r6, 5
    3d7c:	0f 2e       	mov	r0, r31
    3d7e:	fb e5       	ldi	r31, 0x5B	; 91
    3d80:	4f 2e       	mov	r4, r31
    3d82:	f4 e0       	ldi	r31, 0x04	; 4
    3d84:	5f 2e       	mov	r5, r31
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);

				/* Inform about restart - USB */
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_RESTART);
    3d86:	f0 2d       	mov	r31, r0
    3d88:	0f 2e       	mov	r0, r31
    3d8a:	f3 eb       	ldi	r31, 0xB3	; 179
    3d8c:	2f 2e       	mov	r2, r31
    3d8e:	f4 e0       	ldi	r31, 0x04	; 4
    3d90:	3f 2e       	mov	r3, r31
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3d92:	f0 2d       	mov	r31, r0
    3d94:	0c e0       	ldi	r16, 0x0C	; 12
	ioport_set_pin_level(GSM_RTS1_DRV, LOW);	// Serial line ready
	delay_ms(1);

	/* Synchronize with SIM808 */
	while (true) {
		usart_serial_write_packet(USART_SERIAL1, (const uint8_t*)"AT\r", 3);
    3d96:	10 e0       	ldi	r17, 0x00	; 0
    3d98:	43 e0       	ldi	r20, 0x03	; 3
    3d9a:	50 e0       	ldi	r21, 0x00	; 0
    3d9c:	60 e1       	ldi	r22, 0x10	; 16
    3d9e:	71 e2       	ldi	r23, 0x21	; 33
    3da0:	80 ea       	ldi	r24, 0xA0	; 160
		delay_ms(100);
    3da2:	9b e0       	ldi	r25, 0x0B	; 11
    3da4:	c8 db       	rcall	.-2160   	; 0x3536 <usart_serial_write_packet>
    3da6:	61 e2       	ldi	r22, 0x21	; 33
    3da8:	71 ea       	ldi	r23, 0xA1	; 161
    3daa:	87 e0       	ldi	r24, 0x07	; 7
    3dac:	90 e0       	ldi	r25, 0x00	; 0
		if (g_usart1_rx_ready) {
    3dae:	2c de       	rcall	.-936    	; 0x3a08 <__portable_avr_delay_cycles>
    3db0:	80 91 76 28 	lds	r24, 0x2876	; 0x802876 <g_usart1_rx_ready>
    3db4:	88 23       	and	r24, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3db6:	81 f3       	breq	.-32     	; 0x3d98 <serial_start+0x134>
    3db8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    3dba:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    3dbc:	f8 94       	cli
			{
				irqflags_t flags = cpu_irq_save();
				for (int16_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3dbe:	39 81       	ldd	r19, Y+1	; 0x01
    3dc0:	e0 91 74 28 	lds	r30, 0x2874	; 0x802874 <g_usart1_rx_idx>
    3dc4:	f0 91 75 28 	lds	r31, 0x2875	; 0x802875 <g_usart1_rx_idx+0x1>
    3dc8:	cf 01       	movw	r24, r30
    3dca:	01 97       	sbiw	r24, 0x01	; 1
    3dcc:	4a f0       	brmi	.+18     	; 0x3de0 <serial_start+0x17c>
    3dce:	df 01       	movw	r26, r30
    3dd0:	ac 58       	subi	r26, 0x8C	; 140
    3dd2:	b8 4d       	sbci	r27, 0xD8	; 216
    3dd4:	e5 5e       	subi	r30, 0xE5	; 229
					g_prepare_buf[idx] = g_usart1_rx_buf[idx];
    3dd6:	fa 4d       	sbci	r31, 0xDA	; 218
    3dd8:	2e 91       	ld	r18, -X
		usart_serial_write_packet(USART_SERIAL1, (const uint8_t*)"AT\r", 3);
		delay_ms(100);
		if (g_usart1_rx_ready) {
			{
				irqflags_t flags = cpu_irq_save();
				for (int16_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3dda:	22 93       	st	-Z, r18
    3ddc:	01 97       	sbiw	r24, 0x01	; 1
					g_prepare_buf[idx] = g_usart1_rx_buf[idx];
				}
				g_usart1_rx_idx = 0;
    3dde:	e2 f7       	brpl	.-8      	; 0x3dd8 <serial_start+0x174>
    3de0:	10 92 74 28 	sts	0x2874, r1	; 0x802874 <g_usart1_rx_idx>
    3de4:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <g_usart1_rx_idx+0x1>
				g_usart1_rx_ready = false;
    3de8:	10 92 76 28 	sts	0x2876, r1	; 0x802876 <g_usart1_rx_ready>
				cpu_irq_restore(flags);
			}

			/* Leave loop when SIM808 responds */
			if (g_prepare_buf[0] && strstr_P(g_prepare_buf, PM_SIM808_OK))
    3dec:	3f bf       	out	0x3f, r19	; 63
    3dee:	f7 01       	movw	r30, r14
    3df0:	80 81       	ld	r24, Z
    3df2:	88 23       	and	r24, r24
    3df4:	49 f0       	breq	.+18     	; 0x3e08 <serial_start+0x1a4>
    3df6:	63 e0       	ldi	r22, 0x03	; 3
    3df8:	75 e0       	ldi	r23, 0x05	; 5
    3dfa:	89 2d       	mov	r24, r9
    3dfc:	9a 2d       	mov	r25, r10
    3dfe:	0e 94 c4 88 	call	0x11188	; 0x11188 <strstr_P>
    3e02:	89 2b       	or	r24, r25
    3e04:	09 f0       	breq	.+2      	; 0x3e08 <serial_start+0x1a4>
    3e06:	52 c0       	rjmp	.+164    	; 0x3eac <serial_start+0x248>
    3e08:	01 50       	subi	r16, 0x01	; 1
				break;

			if (loop_ctr++ > 10) {
    3e0a:	11 09       	sbc	r17, r1
    3e0c:	09 f0       	breq	.+2      	; 0x3e10 <serial_start+0x1ac>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3e0e:	c4 cf       	rjmp	.-120    	; 0x3d98 <serial_start+0x134>
    3e10:	f6 01       	movw	r30, r12
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3e12:	85 82       	std	Z+5, r8	; 0x05
    3e14:	75 82       	std	Z+5, r7	; 0x05

				/* Turn off SIM808 */
				ioport_set_pin_level(GSM_RTS1_DRV,			HIGH);	// Serial line NOT ready
				ioport_set_pin_level(GSM_DTR1_DRV,			HIGH);	// DTR inactive
				ioport_set_pin_level(GSM_RESET_DRV_GPIO,	LOW);	// RESETn active
				delay_ms(150);
    3e16:	60 92 86 06 	sts	0x0686, r6	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    3e1a:	61 eb       	ldi	r22, 0xB1	; 177
    3e1c:	71 e7       	ldi	r23, 0x71	; 113
    3e1e:	8b e0       	ldi	r24, 0x0B	; 11
    3e20:	90 e0       	ldi	r25, 0x00	; 0

				/* Inform about restart - LCD */
				if (line > 12) {
    3e22:	f2 dd       	rcall	.-1052   	; 0x3a08 <__portable_avr_delay_cycles>
    3e24:	fc e0       	ldi	r31, 0x0C	; 12
    3e26:	fb 15       	cp	r31, r11
					task_twi2_lcd_header();
    3e28:	30 f4       	brcc	.+12     	; 0x3e36 <serial_start+0x1d2>
    3e2a:	0e 94 04 3b 	call	0x7608	; 0x7608 <task_twi2_lcd_header>
					line = 3;
    3e2e:	0f 2e       	mov	r0, r31
    3e30:	f3 e0       	ldi	r31, 0x03	; 3
    3e32:	bf 2e       	mov	r11, r31
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
    3e34:	f0 2d       	mov	r31, r0
    3e36:	5f 92       	push	r5
    3e38:	4f 92       	push	r4
    3e3a:	1f 92       	push	r1
    3e3c:	20 e4       	ldi	r18, 0x40	; 64
    3e3e:	2f 93       	push	r18
    3e40:	ff 92       	push	r15
    3e42:	ef 92       	push	r14
    3e44:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3e48:	11 e0       	ldi	r17, 0x01	; 1
    3e4a:	1b 0d       	add	r17, r11
    3e4c:	6b 2d       	mov	r22, r11
    3e4e:	66 0f       	add	r22, r22
    3e50:	86 2f       	mov	r24, r22
    3e52:	88 0f       	add	r24, r24
    3e54:	88 0f       	add	r24, r24
    3e56:	68 0f       	add	r22, r24
    3e58:	a7 01       	movw	r20, r14
    3e5a:	88 e0       	ldi	r24, 0x08	; 8
    3e5c:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>

				/* Inform about restart - USB */
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_RESTART);
    3e60:	3f 92       	push	r3
    3e62:	2f 92       	push	r2
    3e64:	1f 92       	push	r1
    3e66:	30 e4       	ldi	r19, 0x40	; 64
    3e68:	3f 93       	push	r19
    3e6a:	ff 92       	push	r15
    3e6c:	ef 92       	push	r14
				udi_write_tx_buf(g_prepare_buf, len, false);
    3e6e:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    3e72:	40 e0       	ldi	r20, 0x00	; 0
    3e74:	68 2f       	mov	r22, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3e76:	c7 01       	movw	r24, r14
    3e78:	41 d1       	rcall	.+642    	; 0x40fc <udi_write_tx_buf>

				/* Restart SIM808 */
				ioport_set_pin_level(GSM_RESET_DRV_GPIO,	HIGH);	// Release the RESETn line
				delay_ms(500);
    3e7a:	60 92 85 06 	sts	0x0685, r6	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    3e7e:	61 ea       	ldi	r22, 0xA1	; 161
    3e80:	75 e2       	ldi	r23, 0x25	; 37
    3e82:	86 e2       	ldi	r24, 0x26	; 38
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	c0 dd       	rcall	.-1152   	; 0x3a08 <__portable_avr_delay_cycles>
				ioport_set_pin_level(GSM_DTR1_DRV,			LOW);	// DTR active
				delay_ms(100);
    3e88:	f6 01       	movw	r30, r12
    3e8a:	76 82       	std	Z+6, r7	; 0x06
    3e8c:	61 e2       	ldi	r22, 0x21	; 33
    3e8e:	71 ea       	ldi	r23, 0xA1	; 161
    3e90:	87 e0       	ldi	r24, 0x07	; 7
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	b9 dd       	rcall	.-1166   	; 0x3a08 <__portable_avr_delay_cycles>
				ioport_set_pin_level(GSM_RTS1_DRV,			LOW);	// Serial line ready
				delay_ms(1);
    3e96:	f6 01       	movw	r30, r12
    3e98:	86 82       	std	Z+6, r8	; 0x06
    3e9a:	68 e8       	ldi	r22, 0x88	; 136
    3e9c:	73 e1       	ldi	r23, 0x13	; 19
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	b2 dd       	rcall	.-1180   	; 0x3a08 <__portable_avr_delay_cycles>
    3ea4:	cd bf       	out	0x3d, r28	; 61
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3ea6:	de bf       	out	0x3e, r29	; 62
    3ea8:	b1 2e       	mov	r11, r17
			}
		}
	}

	/* Set the auto baud rate to fix rate */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_IPR, USART_SERIAL1_BAUDRATE);
    3eaa:	74 cf       	rjmp	.-280    	; 0x3d94 <serial_start+0x130>
    3eac:	1f 92       	push	r1
    3eae:	1f 92       	push	r1
    3eb0:	86 e9       	ldi	r24, 0x96	; 150
    3eb2:	8f 93       	push	r24
    3eb4:	1f 92       	push	r1
    3eb6:	89 e3       	ldi	r24, 0x39	; 57
    3eb8:	94 e0       	ldi	r25, 0x04	; 4
    3eba:	9f 93       	push	r25
    3ebc:	8f 93       	push	r24
    3ebe:	1f 92       	push	r1
    3ec0:	68 94       	set
    3ec2:	ff 24       	eor	r15, r15
    3ec4:	f6 f8       	bld	r15, 6
    3ec6:	ff 92       	push	r15
    3ec8:	0b e1       	ldi	r16, 0x1B	; 27
    3eca:	15 e2       	ldi	r17, 0x25	; 37
    3ecc:	1f 93       	push	r17
    3ece:	0f 93       	push	r16
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3ed0:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    3ed4:	ac 01       	movw	r20, r24
    3ed6:	b8 01       	movw	r22, r16
    3ed8:	80 ea       	ldi	r24, 0xA0	; 160
    3eda:	9b e0       	ldi	r25, 0x0B	; 11
	yield_ms(500);
    3edc:	2c db       	rcall	.-2472   	; 0x3536 <usart_serial_write_packet>
    3ede:	84 ef       	ldi	r24, 0xF4	; 244
    3ee0:	91 e0       	ldi	r25, 0x01	; 1
    3ee2:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>

#if 1
	/* Request the version number of the firmware */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_INFO_01);
    3ee6:	8b e1       	ldi	r24, 0x1B	; 27
    3ee8:	94 e0       	ldi	r25, 0x04	; 4
    3eea:	9f 93       	push	r25
    3eec:	8f 93       	push	r24
    3eee:	1f 92       	push	r1
    3ef0:	ff 92       	push	r15
    3ef2:	1f 93       	push	r17
    3ef4:	0f 93       	push	r16
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3ef6:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    3efa:	ac 01       	movw	r20, r24
    3efc:	b8 01       	movw	r22, r16
    3efe:	80 ea       	ldi	r24, 0xA0	; 160
    3f00:	9b e0       	ldi	r25, 0x0B	; 11
	yield_ms(500);
    3f02:	19 db       	rcall	.-2510   	; 0x3536 <usart_serial_write_packet>
    3f04:	84 ef       	ldi	r24, 0xF4	; 244
    3f06:	91 e0       	ldi	r25, 0x01	; 1
#endif

#if 1
	/* Request more details about the firmware */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_INFO_02);
    3f08:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    3f0c:	82 e1       	ldi	r24, 0x12	; 18
    3f0e:	94 e0       	ldi	r25, 0x04	; 4
    3f10:	9f 93       	push	r25
    3f12:	8f 93       	push	r24
    3f14:	1f 92       	push	r1
    3f16:	ff 92       	push	r15
    3f18:	1f 93       	push	r17
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3f1a:	0f 93       	push	r16
    3f1c:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    3f20:	ac 01       	movw	r20, r24
    3f22:	b8 01       	movw	r22, r16
    3f24:	80 ea       	ldi	r24, 0xA0	; 160
	yield_ms(500);
    3f26:	9b e0       	ldi	r25, 0x0B	; 11
    3f28:	06 db       	rcall	.-2548   	; 0x3536 <usart_serial_write_packet>
    3f2a:	84 ef       	ldi	r24, 0xF4	; 244
#endif


#if 1
	/* Turn on error descriptions */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_CMEE2);
    3f2c:	91 e0       	ldi	r25, 0x01	; 1
    3f2e:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    3f32:	8d e2       	ldi	r24, 0x2D	; 45
    3f34:	94 e0       	ldi	r25, 0x04	; 4
    3f36:	9f 93       	push	r25
    3f38:	8f 93       	push	r24
    3f3a:	1f 92       	push	r1
    3f3c:	ff 92       	push	r15
    3f3e:	1f 93       	push	r17
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3f40:	0f 93       	push	r16
    3f42:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    3f46:	ac 01       	movw	r20, r24
    3f48:	b8 01       	movw	r22, r16
    3f4a:	80 ea       	ldi	r24, 0xA0	; 160
	yield_ms(500);
    3f4c:	9b e0       	ldi	r25, 0x0B	; 11
    3f4e:	f3 da       	rcall	.-2586   	; 0x3536 <usart_serial_write_packet>
    3f50:	84 ef       	ldi	r24, 0xF4	; 244
#endif

#if 1
	/* Activation of all functionalities */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_CFUN1);
    3f52:	91 e0       	ldi	r25, 0x01	; 1
    3f54:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    3f58:	81 e2       	ldi	r24, 0x21	; 33
    3f5a:	94 e0       	ldi	r25, 0x04	; 4
    3f5c:	9f 93       	push	r25
    3f5e:	8f 93       	push	r24
    3f60:	1f 92       	push	r1
    3f62:	ff 92       	push	r15
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3f64:	1f 93       	push	r17
    3f66:	0f 93       	push	r16
    3f68:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    3f6c:	cd bf       	out	0x3d, r28	; 61
    3f6e:	de bf       	out	0x3e, r29	; 62
    3f70:	ac 01       	movw	r20, r24
    3f72:	b8 01       	movw	r22, r16
	yield_ms(500);
    3f74:	80 ea       	ldi	r24, 0xA0	; 160
    3f76:	9b e0       	ldi	r25, 0x0B	; 11
    3f78:	de da       	rcall	.-2628   	; 0x3536 <usart_serial_write_packet>
    3f7a:	84 ef       	ldi	r24, 0xF4	; 244
#endif

#if 1
	/* Enable GNSS (GPS, Glonass, ...) and send a position fix request */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_GPS_01, 1);
    3f7c:	91 e0       	ldi	r25, 0x01	; 1
    3f7e:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    3f82:	1f 92       	push	r1
    3f84:	ee 24       	eor	r14, r14
    3f86:	e3 94       	inc	r14
    3f88:	ef 92       	push	r14
    3f8a:	82 e0       	ldi	r24, 0x02	; 2
    3f8c:	94 e0       	ldi	r25, 0x04	; 4
    3f8e:	9f 93       	push	r25
    3f90:	8f 93       	push	r24
    3f92:	1f 92       	push	r1
    3f94:	ff 92       	push	r15
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3f96:	1f 93       	push	r17
    3f98:	0f 93       	push	r16
    3f9a:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    3f9e:	ac 01       	movw	r20, r24
    3fa0:	b8 01       	movw	r22, r16
	yield_ms(500);
    3fa2:	80 ea       	ldi	r24, 0xA0	; 160
    3fa4:	9b e0       	ldi	r25, 0x0B	; 11
    3fa6:	c7 da       	rcall	.-2674   	; 0x3536 <usart_serial_write_packet>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_GPS_02, 1);
    3fa8:	84 ef       	ldi	r24, 0xF4	; 244
    3faa:	91 e0       	ldi	r25, 0x01	; 1
    3fac:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    3fb0:	1f 92       	push	r1
    3fb2:	ef 92       	push	r14
    3fb4:	85 ef       	ldi	r24, 0xF5	; 245
    3fb6:	93 e0       	ldi	r25, 0x03	; 3
    3fb8:	9f 93       	push	r25
    3fba:	8f 93       	push	r24
    3fbc:	1f 92       	push	r1
    3fbe:	ff 92       	push	r15
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3fc0:	1f 93       	push	r17
    3fc2:	0f 93       	push	r16
    3fc4:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    3fc8:	ac 01       	movw	r20, r24
    3fca:	b8 01       	movw	r22, r16
	yield_ms(500);
    3fcc:	80 ea       	ldi	r24, 0xA0	; 160
    3fce:	9b e0       	ldi	r25, 0x0B	; 11
    3fd0:	b2 da       	rcall	.-2716   	; 0x3536 <usart_serial_write_packet>
    3fd2:	84 ef       	ldi	r24, 0xF4	; 244
#endif


	/* Inform about baud rate match - LCD */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_OK);
    3fd4:	91 e0       	ldi	r25, 0x01	; 1
    3fd6:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    3fda:	86 e4       	ldi	r24, 0x46	; 70
    3fdc:	94 e0       	ldi	r25, 0x04	; 4
    3fde:	9f 93       	push	r25
    3fe0:	8f 93       	push	r24
    3fe2:	1f 92       	push	r1
    3fe4:	ff 92       	push	r15
    3fe6:	1f 93       	push	r17
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3fe8:	0f 93       	push	r16
    3fea:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    3fee:	bb 0c       	add	r11, r11
    3ff0:	6b 2d       	mov	r22, r11
    3ff2:	66 0f       	add	r22, r22
    3ff4:	66 0f       	add	r22, r22
    3ff6:	6b 0d       	add	r22, r11

	/* Inform about baud rate match - USB */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_SYNCED);
    3ff8:	a8 01       	movw	r20, r16
    3ffa:	88 e0       	ldi	r24, 0x08	; 8
    3ffc:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    4000:	81 e9       	ldi	r24, 0x91	; 145
    4002:	94 e0       	ldi	r25, 0x04	; 4
    4004:	9f 93       	push	r25
    4006:	8f 93       	push	r24
    4008:	1f 92       	push	r1
    400a:	ff 92       	push	r15
	udi_write_tx_buf(g_prepare_buf, len, false);
    400c:	1f 93       	push	r17
    400e:	0f 93       	push	r16
    4010:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    4014:	40 e0       	ldi	r20, 0x00	; 0
}
    4016:	68 2f       	mov	r22, r24
    4018:	c8 01       	movw	r24, r16
    401a:	70 d0       	rcall	.+224    	; 0x40fc <udi_write_tx_buf>
    401c:	cd bf       	out	0x3d, r28	; 61
    401e:	de bf       	out	0x3e, r29	; 62
    4020:	27 96       	adiw	r28, 0x07	; 7
    4022:	cd bf       	out	0x3d, r28	; 61
    4024:	de bf       	out	0x3e, r29	; 62
    4026:	df 91       	pop	r29
    4028:	cf 91       	pop	r28
    402a:	1f 91       	pop	r17
    402c:	0f 91       	pop	r16
    402e:	ff 90       	pop	r15
    4030:	ef 90       	pop	r14
    4032:	df 90       	pop	r13
    4034:	cf 90       	pop	r12
    4036:	bf 90       	pop	r11
    4038:	af 90       	pop	r10
    403a:	9f 90       	pop	r9
    403c:	8f 90       	pop	r8
    403e:	7f 90       	pop	r7
    4040:	6f 90       	pop	r6
    4042:	5f 90       	pop	r5
    4044:	4f 90       	pop	r4
    4046:	3f 90       	pop	r3
    4048:	2f 90       	pop	r2
    404a:	08 95       	ret

0000404c <task_serial>:


void task_serial(uint32_t now)
{
    404c:	1f 93       	push	r17
    404e:	cf 93       	push	r28
    4050:	df 93       	push	r29
    4052:	1f 92       	push	r1
    4054:	cd b7       	in	r28, 0x3d	; 61
    4056:	de b7       	in	r29, 0x3e	; 62
	uint16_t len = 0;
	uint16_t move = 0;

	/* Leave when nothing to do */
	if (!g_usart1_rx_ready) {
    4058:	80 91 76 28 	lds	r24, 0x2876	; 0x802876 <g_usart1_rx_ready>
    405c:	88 23       	and	r24, r24
    405e:	09 f4       	brne	.+2      	; 0x4062 <task_serial+0x16>
    4060:	48 c0       	rjmp	.+144    	; 0x40f2 <task_serial+0xa6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4062:	8f b7       	in	r24, 0x3f	; 63
    4064:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4066:	f8 94       	cli
	return flags;
    4068:	19 81       	ldd	r17, Y+1	; 0x01
	}

	/* Take out own copy and reset */
	{
		irqflags_t flags = cpu_irq_save();
		if (g_usart1_rx_idx) {
    406a:	60 91 74 28 	lds	r22, 0x2874	; 0x802874 <g_usart1_rx_idx>
    406e:	70 91 75 28 	lds	r23, 0x2875	; 0x802875 <g_usart1_rx_idx+0x1>
    4072:	61 15       	cp	r22, r1
    4074:	71 05       	cpc	r23, r1
    4076:	a9 f1       	breq	.+106    	; 0x40e2 <task_serial+0x96>
			/* Do a chunk each time */
			len = g_usart1_rx_idx;
			if (len > C_USART1_RX_BUF_CHUNK) {
    4078:	61 34       	cpi	r22, 0x41	; 65
    407a:	71 05       	cpc	r23, r1
    407c:	40 f0       	brcs	.+16     	; 0x408e <task_serial+0x42>
				move = len - C_USART1_RX_BUF_CHUNK;
    407e:	ab 01       	movw	r20, r22
    4080:	40 54       	subi	r20, 0x40	; 64
    4082:	51 09       	sbc	r21, r1
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    4084:	8f e3       	ldi	r24, 0x3F	; 63
    4086:	90 e0       	ldi	r25, 0x00	; 0
		if (g_usart1_rx_idx) {
			/* Do a chunk each time */
			len = g_usart1_rx_idx;
			if (len > C_USART1_RX_BUF_CHUNK) {
				move = len - C_USART1_RX_BUF_CHUNK;
				len = C_USART1_RX_BUF_CHUNK;
    4088:	60 e4       	ldi	r22, 0x40	; 64
    408a:	70 e0       	ldi	r23, 0x00	; 0
    408c:	05 c0       	rjmp	.+10     	; 0x4098 <task_serial+0x4c>
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    408e:	cb 01       	movw	r24, r22
    4090:	01 97       	sbiw	r24, 0x01	; 1
    4092:	0a f1       	brmi	.+66     	; 0x40d6 <task_serial+0x8a>


void task_serial(uint32_t now)
{
	uint16_t len = 0;
	uint16_t move = 0;
    4094:	40 e0       	ldi	r20, 0x00	; 0
    4096:	50 e0       	ldi	r21, 0x00	; 0
    4098:	fc 01       	movw	r30, r24
    409a:	31 96       	adiw	r30, 0x01	; 1
    409c:	df 01       	movw	r26, r30
    409e:	ac 58       	subi	r26, 0x8C	; 140
    40a0:	b8 4d       	sbci	r27, 0xD8	; 216
    40a2:	e5 5e       	subi	r30, 0xE5	; 229
    40a4:	fa 4d       	sbci	r31, 0xDA	; 218
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
    40a6:	2e 91       	ld	r18, -X
    40a8:	22 93       	st	-Z, r18
				move = len - C_USART1_RX_BUF_CHUNK;
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    40aa:	01 97       	sbiw	r24, 0x01	; 1
    40ac:	e2 f7       	brpl	.-8      	; 0x40a6 <task_serial+0x5a>
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
			}

			/* If more data is available move that part down */
			if (move) {
    40ae:	41 15       	cp	r20, r1
    40b0:	51 05       	cpc	r21, r1
    40b2:	89 f0       	breq	.+34     	; 0x40d6 <task_serial+0x8a>
    40b4:	e4 eb       	ldi	r30, 0xB4	; 180
    40b6:	f7 e2       	ldi	r31, 0x27	; 39
    40b8:	a4 e7       	ldi	r26, 0x74	; 116
    40ba:	b7 e2       	ldi	r27, 0x27	; 39
    40bc:	9a 01       	movw	r18, r20
    40be:	2c 54       	subi	r18, 0x4C	; 76
    40c0:	38 4d       	sbci	r19, 0xD8	; 216
				for (int16_t mov_idx = 0; mov_idx < move; ++mov_idx) {
					g_usart1_rx_buf[mov_idx] = g_usart1_rx_buf[mov_idx + C_USART1_RX_BUF_CHUNK];
    40c2:	81 91       	ld	r24, Z+
    40c4:	8d 93       	st	X+, r24
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
			}

			/* If more data is available move that part down */
			if (move) {
				for (int16_t mov_idx = 0; mov_idx < move; ++mov_idx) {
    40c6:	2e 17       	cp	r18, r30
    40c8:	3f 07       	cpc	r19, r31
    40ca:	d9 f7       	brne	.-10     	; 0x40c2 <task_serial+0x76>
					g_usart1_rx_buf[mov_idx] = g_usart1_rx_buf[mov_idx + C_USART1_RX_BUF_CHUNK];
				}
				g_usart1_rx_idx = move;
    40cc:	40 93 74 28 	sts	0x2874, r20	; 0x802874 <g_usart1_rx_idx>
    40d0:	50 93 75 28 	sts	0x2875, r21	; 0x802875 <g_usart1_rx_idx+0x1>
    40d4:	06 c0       	rjmp	.+12     	; 0x40e2 <task_serial+0x96>

			} else {
				/* Buffer empty */
				g_usart1_rx_idx = 0;
    40d6:	10 92 74 28 	sts	0x2874, r1	; 0x802874 <g_usart1_rx_idx>
    40da:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <g_usart1_rx_idx+0x1>
				g_usart1_rx_ready = false;
    40de:	10 92 76 28 	sts	0x2876, r1	; 0x802876 <g_usart1_rx_ready>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    40e2:	1f bf       	out	0x3f, r17	; 63
		}
		cpu_irq_restore(flags);
	}

	/* Copy chunk of data to USB_CDC */
	if (len) {
    40e4:	61 15       	cp	r22, r1
    40e6:	71 05       	cpc	r23, r1
    40e8:	21 f0       	breq	.+8      	; 0x40f2 <task_serial+0xa6>
		udi_write_tx_buf(g_prepare_buf, (uint8_t)len, false);
    40ea:	40 e0       	ldi	r20, 0x00	; 0
    40ec:	8b e1       	ldi	r24, 0x1B	; 27
    40ee:	95 e2       	ldi	r25, 0x25	; 37
    40f0:	05 d0       	rcall	.+10     	; 0x40fc <udi_write_tx_buf>
	}
}
    40f2:	0f 90       	pop	r0
    40f4:	df 91       	pop	r29
    40f6:	cf 91       	pop	r28
    40f8:	1f 91       	pop	r17
    40fa:	08 95       	ret

000040fc <udi_write_tx_buf>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    40fc:	ef 92       	push	r14
    40fe:	ff 92       	push	r15
    4100:	0f 93       	push	r16
    4102:	1f 93       	push	r17
    4104:	cf 93       	push	r28
    4106:	df 93       	push	r29
    4108:	20 91 80 28 	lds	r18, 0x2880	; 0x802880 <g_usb_cdc_transfers_authorized>
    410c:	21 11       	cpse	r18, r1
    410e:	3a c0       	rjmp	.+116    	; 0x4184 <udi_write_tx_buf+0x88>
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	3f c0       	rjmp	.+126    	; 0x4192 <udi_write_tx_buf+0x96>
    4114:	04 2f       	mov	r16, r20
    4116:	16 2f       	mov	r17, r22
    4118:	7c 01       	movw	r14, r24
    411a:	d0 e0       	ldi	r29, 0x00	; 0
    411c:	c0 e0       	ldi	r28, 0x00	; 0
    411e:	0e 94 a2 76 	call	0xed44	; 0xed44 <udi_cdc_is_tx_ready>
    4122:	81 11       	cpse	r24, r1
    4124:	06 c0       	rjmp	.+12     	; 0x4132 <udi_write_tx_buf+0x36>
    4126:	df 5f       	subi	r29, 0xFF	; 255
    4128:	89 e1       	ldi	r24, 0x19	; 25
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    4130:	23 c0       	rjmp	.+70     	; 0x4178 <udi_write_tx_buf+0x7c>
    4132:	f7 01       	movw	r30, r14
    4134:	ec 0f       	add	r30, r28
    4136:	f1 1d       	adc	r31, r1
    4138:	80 81       	ld	r24, Z
    413a:	00 23       	and	r16, r16
    413c:	49 f0       	breq	.+18     	; 0x4150 <udi_write_tx_buf+0x54>
    413e:	28 2f       	mov	r18, r24
    4140:	08 2e       	mov	r0, r24
    4142:	00 0c       	add	r0, r0
    4144:	33 0b       	sbc	r19, r19
    4146:	20 52       	subi	r18, 0x20	; 32
    4148:	31 09       	sbc	r19, r1
    414a:	20 36       	cpi	r18, 0x60	; 96
    414c:	31 05       	cpc	r19, r1
    414e:	88 f4       	brcc	.+34     	; 0x4172 <udi_write_tx_buf+0x76>
    4150:	90 91 7f 28 	lds	r25, 0x287F	; 0x80287f <g_usb_cdc_access_blocked>
    4154:	91 11       	cpse	r25, r1
    4156:	0d c0       	rjmp	.+26     	; 0x4172 <udi_write_tx_buf+0x76>
    4158:	08 2e       	mov	r0, r24
    415a:	00 0c       	add	r0, r0
    415c:	99 0b       	sbc	r25, r25
    415e:	0e 94 f9 76 	call	0xedf2	; 0xedf2 <udi_cdc_putc>
    4162:	89 2b       	or	r24, r25
    4164:	31 f4       	brne	.+12     	; 0x4172 <udi_write_tx_buf+0x76>
    4166:	df 5f       	subi	r29, 0xFF	; 255
    4168:	89 e1       	ldi	r24, 0x19	; 25
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    4170:	03 c0       	rjmp	.+6      	; 0x4178 <udi_write_tx_buf+0x7c>
    4172:	cf 5f       	subi	r28, 0xFF	; 255
    4174:	d0 e0       	ldi	r29, 0x00	; 0
    4176:	0a c0       	rjmp	.+20     	; 0x418c <udi_write_tx_buf+0x90>
    4178:	d9 3c       	cpi	r29, 0xC9	; 201
    417a:	40 f0       	brcs	.+16     	; 0x418c <udi_write_tx_buf+0x90>
    417c:	10 92 80 28 	sts	0x2880, r1	; 0x802880 <g_usb_cdc_transfers_authorized>
    4180:	8c 2f       	mov	r24, r28
    4182:	07 c0       	rjmp	.+14     	; 0x4192 <udi_write_tx_buf+0x96>
    4184:	61 11       	cpse	r22, r1
    4186:	c6 cf       	rjmp	.-116    	; 0x4114 <udi_write_tx_buf+0x18>
    4188:	80 e0       	ldi	r24, 0x00	; 0
    418a:	03 c0       	rjmp	.+6      	; 0x4192 <udi_write_tx_buf+0x96>
    418c:	c1 17       	cp	r28, r17
    418e:	38 f2       	brcs	.-114    	; 0x411e <udi_write_tx_buf+0x22>
    4190:	8c 2f       	mov	r24, r28
    4192:	df 91       	pop	r29
    4194:	cf 91       	pop	r28
    4196:	1f 91       	pop	r17
    4198:	0f 91       	pop	r16
    419a:	ff 90       	pop	r15
    419c:	ef 90       	pop	r14
    419e:	08 95       	ret

000041a0 <usb_init>:
    41a0:	0e 94 42 7b 	call	0xf684	; 0xf684 <stdio_usb_init>
    41a4:	80 91 84 28 	lds	r24, 0x2884	; 0x802884 <g_usb_cdc_stdout_enabled>
    41a8:	81 11       	cpse	r24, r1
    41aa:	0e 94 3b 7b 	call	0xf676	; 0xf676 <stdio_usb_enable>
    41ae:	88 ee       	ldi	r24, 0xE8	; 232
    41b0:	93 e0       	ldi	r25, 0x03	; 3
    41b2:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    41b6:	8a e4       	ldi	r24, 0x4A	; 74
    41b8:	97 e0       	ldi	r25, 0x07	; 7
    41ba:	9f 93       	push	r25
    41bc:	8f 93       	push	r24
    41be:	1f 92       	push	r1
    41c0:	80 e4       	ldi	r24, 0x40	; 64
    41c2:	8f 93       	push	r24
    41c4:	8b e1       	ldi	r24, 0x1B	; 27
    41c6:	95 e2       	ldi	r25, 0x25	; 37
    41c8:	9f 93       	push	r25
    41ca:	8f 93       	push	r24
    41cc:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    41d0:	81 34       	cpi	r24, 0x41	; 65
    41d2:	91 05       	cpc	r25, r1
    41d4:	10 f0       	brcs	.+4      	; 0x41da <usb_init+0x3a>
    41d6:	80 e4       	ldi	r24, 0x40	; 64
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	40 e0       	ldi	r20, 0x00	; 0
    41dc:	68 2f       	mov	r22, r24
    41de:	8b e1       	ldi	r24, 0x1B	; 27
    41e0:	95 e2       	ldi	r25, 0x25	; 37
    41e2:	8c df       	rcall	.-232    	; 0x40fc <udi_write_tx_buf>
    41e4:	84 ef       	ldi	r24, 0xF4	; 244
    41e6:	91 e0       	ldi	r25, 0x01	; 1
    41e8:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    41ec:	1f 92       	push	r1
    41ee:	8c e0       	ldi	r24, 0x0C	; 12
    41f0:	8f 93       	push	r24
    41f2:	84 e2       	ldi	r24, 0x24	; 36
    41f4:	97 e0       	ldi	r25, 0x07	; 7
    41f6:	9f 93       	push	r25
    41f8:	8f 93       	push	r24
    41fa:	1f 92       	push	r1
    41fc:	80 e4       	ldi	r24, 0x40	; 64
    41fe:	8f 93       	push	r24
    4200:	8b e1       	ldi	r24, 0x1B	; 27
    4202:	95 e2       	ldi	r25, 0x25	; 37
    4204:	9f 93       	push	r25
    4206:	8f 93       	push	r24
    4208:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    420c:	81 34       	cpi	r24, 0x41	; 65
    420e:	91 05       	cpc	r25, r1
    4210:	10 f0       	brcs	.+4      	; 0x4216 <usb_init+0x76>
    4212:	80 e4       	ldi	r24, 0x40	; 64
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	40 e0       	ldi	r20, 0x00	; 0
    4218:	68 2f       	mov	r22, r24
    421a:	8b e1       	ldi	r24, 0x1B	; 27
    421c:	95 e2       	ldi	r25, 0x25	; 37
    421e:	6e df       	rcall	.-292    	; 0x40fc <udi_write_tx_buf>
    4220:	8a ef       	ldi	r24, 0xFA	; 250
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    4228:	82 e0       	ldi	r24, 0x02	; 2
    422a:	97 e0       	ldi	r25, 0x07	; 7
    422c:	9f 93       	push	r25
    422e:	8f 93       	push	r24
    4230:	1f 92       	push	r1
    4232:	80 e4       	ldi	r24, 0x40	; 64
    4234:	8f 93       	push	r24
    4236:	8b e1       	ldi	r24, 0x1B	; 27
    4238:	95 e2       	ldi	r25, 0x25	; 37
    423a:	9f 93       	push	r25
    423c:	8f 93       	push	r24
    423e:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    4242:	81 34       	cpi	r24, 0x41	; 65
    4244:	91 05       	cpc	r25, r1
    4246:	10 f0       	brcs	.+4      	; 0x424c <usb_init+0xac>
    4248:	80 e4       	ldi	r24, 0x40	; 64
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	40 e0       	ldi	r20, 0x00	; 0
    424e:	68 2f       	mov	r22, r24
    4250:	8b e1       	ldi	r24, 0x1B	; 27
    4252:	95 e2       	ldi	r25, 0x25	; 37
    4254:	53 df       	rcall	.-346    	; 0x40fc <udi_write_tx_buf>
    4256:	8a ef       	ldi	r24, 0xFA	; 250
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    425e:	8e ed       	ldi	r24, 0xDE	; 222
    4260:	96 e0       	ldi	r25, 0x06	; 6
    4262:	9f 93       	push	r25
    4264:	8f 93       	push	r24
    4266:	1f 92       	push	r1
    4268:	80 e4       	ldi	r24, 0x40	; 64
    426a:	8f 93       	push	r24
    426c:	8b e1       	ldi	r24, 0x1B	; 27
    426e:	95 e2       	ldi	r25, 0x25	; 37
    4270:	9f 93       	push	r25
    4272:	8f 93       	push	r24
    4274:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    4278:	81 34       	cpi	r24, 0x41	; 65
    427a:	91 05       	cpc	r25, r1
    427c:	10 f0       	brcs	.+4      	; 0x4282 <usb_init+0xe2>
    427e:	80 e4       	ldi	r24, 0x40	; 64
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	40 e0       	ldi	r20, 0x00	; 0
    4284:	68 2f       	mov	r22, r24
    4286:	8b e1       	ldi	r24, 0x1B	; 27
    4288:	95 e2       	ldi	r25, 0x25	; 37
    428a:	38 df       	rcall	.-400    	; 0x40fc <udi_write_tx_buf>
    428c:	8d b7       	in	r24, 0x3d	; 61
    428e:	9e b7       	in	r25, 0x3e	; 62
    4290:	4a 96       	adiw	r24, 0x1a	; 26
    4292:	8d bf       	out	0x3d, r24	; 61
    4294:	9e bf       	out	0x3e, r25	; 62
    4296:	08 95       	ret

00004298 <usb_callback_suspend_action>:
    4298:	83 e0       	ldi	r24, 0x03	; 3
    429a:	80 93 7e 28 	sts	0x287E, r24	; 0x80287e <g_workmode>
    429e:	08 95       	ret

000042a0 <usb_callback_resume_action>:
    42a0:	82 e0       	ldi	r24, 0x02	; 2
    42a2:	80 93 7e 28 	sts	0x287E, r24	; 0x80287e <g_workmode>
    42a6:	08 95       	ret

000042a8 <usb_callback_remotewakeup_enable>:
    42a8:	08 95       	ret

000042aa <usb_callback_remotewakeup_disable>:
    42aa:	08 95       	ret

000042ac <usb_callback_cdc_enable>:
}

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */
	g_usb_cdc_transfers_authorized = true;
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	80 93 80 28 	sts	0x2880, r24	; 0x802880 <g_usb_cdc_transfers_authorized>
	return true;
}
    42b2:	08 95       	ret

000042b4 <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */
	g_usb_cdc_transfers_authorized = false;
    42b4:	10 92 80 28 	sts	0x2880, r1	; 0x802880 <g_usb_cdc_transfers_authorized>
    42b8:	08 95       	ret

000042ba <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    42ba:	08 95       	ret

000042bc <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    42bc:	08 95       	ret

000042be <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    42be:	08 95       	ret

000042c0 <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
	g_usb_cdc_rx_received = true;
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	80 93 81 28 	sts	0x2881, r24	; 0x802881 <g_usb_cdc_rx_received>
    42c6:	08 95       	ret

000042c8 <usb_callback_tx_empty_notify>:
}

void usb_callback_tx_empty_notify(uint8_t port)
{
	g_usb_cdc_access_blocked = false;
    42c8:	10 92 7f 28 	sts	0x287F, r1	; 0x80287f <g_usb_cdc_access_blocked>
    42cc:	08 95       	ret

000042ce <task_usb>:
PROGMEM_DECLARE(const char, PM_INFO_PART_L2P3B[]);
PROGMEM_DECLARE(const char, PM_INFO_PART_L2P4[]);
PROGMEM_DECLARE(const char, PM_INFO_PART_PLL1[]);

void task_usb(uint32_t now)
{
    42ce:	2f 92       	push	r2
    42d0:	3f 92       	push	r3
    42d2:	4f 92       	push	r4
    42d4:	5f 92       	push	r5
    42d6:	6f 92       	push	r6
    42d8:	7f 92       	push	r7
    42da:	8f 92       	push	r8
    42dc:	9f 92       	push	r9
    42de:	af 92       	push	r10
    42e0:	bf 92       	push	r11
    42e2:	cf 92       	push	r12
    42e4:	df 92       	push	r13
    42e6:	ef 92       	push	r14
    42e8:	ff 92       	push	r15
    42ea:	0f 93       	push	r16
    42ec:	1f 93       	push	r17
    42ee:	cf 93       	push	r28
    42f0:	df 93       	push	r29
    42f2:	cd b7       	in	r28, 0x3d	; 61
    42f4:	de b7       	in	r29, 0x3e	; 62
    42f6:	c3 54       	subi	r28, 0x43	; 67
    42f8:	d1 09       	sbc	r29, r1
    42fa:	cd bf       	out	0x3d, r28	; 61
    42fc:	de bf       	out	0x3e, r29	; 62
	/* Monitoring at the USB serial terminal */
	if (g_usb_cdc_transfers_authorized) {
    42fe:	20 91 80 28 	lds	r18, 0x2880	; 0x802880 <g_usb_cdc_transfers_authorized>
    4302:	22 23       	and	r18, r18
    4304:	09 f4       	brne	.+2      	; 0x4308 <task_usb+0x3a>
    4306:	1e c4       	rjmp	.+2108   	; 0x4b44 <task_usb+0x876>
    4308:	2b 01       	movw	r4, r22
    430a:	3c 01       	movw	r6, r24
		static uint32_t usb_last = 0UL;

		/* Get command lines from the USB host */
		if (g_usb_cdc_rx_received) {
    430c:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <g_usb_cdc_rx_received>
    4310:	88 23       	and	r24, r24
    4312:	d1 f1       	breq	.+116    	; 0x4388 <task_usb+0xba>
			g_usb_cdc_rx_received = false;
    4314:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <g_usb_cdc_rx_received>
	if (!g_usb_cdc_transfers_authorized) {
		return;
	}

	/* Single thread only */
	if (!sched_getLock(&g_interpreter_lock)) {
    4318:	8e e5       	ldi	r24, 0x5E	; 94
    431a:	96 e2       	ldi	r25, 0x26	; 38
    431c:	0e 94 4d 6a 	call	0xd49a	; 0xd49a <sched_getLock>
    4320:	88 23       	and	r24, r24
    4322:	91 f1       	breq	.+100    	; 0x4388 <task_usb+0xba>
		return;
	}

	/* Get command lines from the USB host */
	iram_size_t cdc_rx_len = udi_cdc_get_nb_received_data();
    4324:	0e 94 f4 74 	call	0xe9e8	; 0xe9e8 <udi_cdc_get_nb_received_data>
    4328:	8c 01       	movw	r16, r24
	cdc_rx_len = min(cdc_rx_len, sizeof(cdc_rx_buf));
    432a:	05 97       	sbiw	r24, 0x05	; 5
    432c:	10 f0       	brcs	.+4      	; 0x4332 <task_usb+0x64>
    432e:	04 e0       	ldi	r16, 0x04	; 4
    4330:	10 e0       	ldi	r17, 0x00	; 0
	while (cdc_rx_len) {
    4332:	01 15       	cp	r16, r1
    4334:	11 05       	cpc	r17, r1
    4336:	21 f1       	breq	.+72     	; 0x4380 <task_usb+0xb2>
		if (g_keyBeep_enable) {
    4338:	80 91 98 28 	lds	r24, 0x2898	; 0x802898 <g_keyBeep_enable>
    433c:	88 23       	and	r24, r24
    433e:	41 f0       	breq	.+16     	; 0x4350 <task_usb+0x82>
			twi2_set_beep(176, 1);  // Click sound
    4340:	61 e0       	ldi	r22, 0x01	; 1
    4342:	80 eb       	ldi	r24, 0xB0	; 176
    4344:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <twi2_set_beep>
			yield_ms(10);
    4348:	8a e0       	ldi	r24, 0x0A	; 10
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
		}

		/* Read the data block */
		udi_cdc_read_no_polling(cdc_rx_buf, cdc_rx_len);
    4350:	b8 01       	movw	r22, r16
    4352:	ce 01       	movw	r24, r28
    4354:	01 96       	adiw	r24, 0x01	; 1
    4356:	0e 94 09 76 	call	0xec12	; 0xec12 <udi_cdc_read_no_polling>

		/* Echo back when not monitoring information are enabled */
		if (!g_usb_cdc_printStatusLines_atxmega) {
    435a:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <g_usb_cdc_printStatusLines_atxmega>
    435e:	81 11       	cpse	r24, r1
    4360:	05 c0       	rjmp	.+10     	; 0x436c <task_usb+0x9e>
			udi_write_tx_buf(cdc_rx_buf, cdc_rx_len, true);
    4362:	41 e0       	ldi	r20, 0x01	; 1
    4364:	60 2f       	mov	r22, r16
    4366:	ce 01       	movw	r24, r28
    4368:	01 96       	adiw	r24, 0x01	; 1
    436a:	c8 de       	rcall	.-624    	; 0x40fc <udi_write_tx_buf>
		}

		/* Call the interpreter */
		interpreter_doProcess(cdc_rx_buf, cdc_rx_len);
    436c:	b8 01       	movw	r22, r16
    436e:	ce 01       	movw	r24, r28
    4370:	01 96       	adiw	r24, 0x01	; 1
    4372:	0e 94 7c 2b 	call	0x56f8	; 0x56f8 <interpreter_doProcess>

		/* Check for more available data */
		cdc_rx_len = udi_cdc_get_nb_received_data();
    4376:	0e 94 f4 74 	call	0xe9e8	; 0xe9e8 <udi_cdc_get_nb_received_data>
    437a:	8c 01       	movw	r16, r24
	}

	/* Get command lines from the USB host */
	iram_size_t cdc_rx_len = udi_cdc_get_nb_received_data();
	cdc_rx_len = min(cdc_rx_len, sizeof(cdc_rx_buf));
	while (cdc_rx_len) {
    437c:	89 2b       	or	r24, r25
    437e:	e1 f6       	brne	.-72     	; 0x4338 <task_usb+0x6a>
		/* Check for more available data */
		cdc_rx_len = udi_cdc_get_nb_received_data();
	}

	/* Release this lock */
	sched_freeLock(&g_interpreter_lock);
    4380:	8e e5       	ldi	r24, 0x5E	; 94
    4382:	96 e2       	ldi	r25, 0x26	; 38
    4384:	0e 94 65 6a 	call	0xd4ca	; 0xd4ca <sched_freeLock>
			g_usb_cdc_rx_received = false;
			usb_rx_process(now);
		}

		/* Status of the PLL unit */
		if (g_usb_cdc_printStatusLines_sim808 && g_1pps_last_new) {
    4388:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <g_usb_cdc_printStatusLines_sim808>
    438c:	88 23       	and	r24, r24
    438e:	09 f4       	brne	.+2      	; 0x4392 <task_usb+0xc4>
    4390:	67 c0       	rjmp	.+206    	; 0x4460 <task_usb+0x192>
    4392:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <g_1pps_last_new>
    4396:	88 23       	and	r24, r24
    4398:	09 f4       	brne	.+2      	; 0x439c <task_usb+0xce>
    439a:	62 c0       	rjmp	.+196    	; 0x4460 <task_usb+0x192>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    439c:	8f b7       	in	r24, 0x3f	; 63
    439e:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    43a0:	f8 94       	cli
	return flags;
    43a2:	2d 81       	ldd	r18, Y+5	; 0x05
			uint16_t l_pll_lo;
			uint64_t l_pll_hi;
			{
				irqflags_t flags = cpu_irq_save();
				l_pll_lo = g_1pps_last_lo;
    43a4:	80 91 8e 28 	lds	r24, 0x288E	; 0x80288e <g_1pps_last_lo>
    43a8:	90 91 8f 28 	lds	r25, 0x288F	; 0x80288f <g_1pps_last_lo+0x1>
				l_pll_hi = g_1pps_last_hi;
    43ac:	20 90 86 28 	lds	r2, 0x2886	; 0x802886 <g_1pps_last_hi>
    43b0:	30 90 87 28 	lds	r3, 0x2887	; 0x802887 <g_1pps_last_hi+0x1>
    43b4:	c0 90 88 28 	lds	r12, 0x2888	; 0x802888 <g_1pps_last_hi+0x2>
    43b8:	ce 82       	std	Y+6, r12	; 0x06
    43ba:	d0 90 89 28 	lds	r13, 0x2889	; 0x802889 <g_1pps_last_hi+0x3>
    43be:	d8 86       	std	Y+8, r13	; 0x08
    43c0:	e0 90 8a 28 	lds	r14, 0x288A	; 0x80288a <g_1pps_last_hi+0x4>
    43c4:	ec 86       	std	Y+12, r14	; 0x0c
    43c6:	f0 90 8b 28 	lds	r15, 0x288B	; 0x80288b <g_1pps_last_hi+0x5>
    43ca:	fe 86       	std	Y+14, r15	; 0x0e
    43cc:	80 90 8c 28 	lds	r8, 0x288C	; 0x80288c <g_1pps_last_hi+0x6>
    43d0:	90 90 8d 28 	lds	r9, 0x288D	; 0x80288d <g_1pps_last_hi+0x7>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    43d4:	2f bf       	out	0x3f, r18	; 63
				cpu_irq_restore(flags);
			}

			int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_PLL1, (uint32_t)(l_pll_hi / 1000U), (uint32_t) (l_pll_hi % 1000), l_pll_lo);
    43d6:	9f 93       	push	r25
    43d8:	8f 93       	push	r24
    43da:	0f 2e       	mov	r0, r31
    43dc:	f8 ee       	ldi	r31, 0xE8	; 232
    43de:	af 2e       	mov	r10, r31
    43e0:	f0 2d       	mov	r31, r0
    43e2:	0f 2e       	mov	r0, r31
    43e4:	f3 e0       	ldi	r31, 0x03	; 3
    43e6:	bf 2e       	mov	r11, r31
    43e8:	f0 2d       	mov	r31, r0
    43ea:	c1 2c       	mov	r12, r1
    43ec:	d1 2c       	mov	r13, r1
    43ee:	e1 2c       	mov	r14, r1
    43f0:	f1 2c       	mov	r15, r1
    43f2:	00 e0       	ldi	r16, 0x00	; 0
    43f4:	10 e0       	ldi	r17, 0x00	; 0
    43f6:	22 2d       	mov	r18, r2
    43f8:	33 2d       	mov	r19, r3
    43fa:	4e 81       	ldd	r20, Y+6	; 0x06
    43fc:	58 85       	ldd	r21, Y+8	; 0x08
    43fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    4400:	7e 85       	ldd	r23, Y+14	; 0x0e
    4402:	88 2d       	mov	r24, r8
    4404:	99 2d       	mov	r25, r9
    4406:	0e 94 81 86 	call	0x10d02	; 0x10d02 <__umoddi3>
    440a:	5f 93       	push	r21
    440c:	4f 93       	push	r20
    440e:	3f 93       	push	r19
    4410:	2f 93       	push	r18
    4412:	22 2d       	mov	r18, r2
    4414:	33 2d       	mov	r19, r3
    4416:	4e 81       	ldd	r20, Y+6	; 0x06
    4418:	58 85       	ldd	r21, Y+8	; 0x08
    441a:	6c 85       	ldd	r22, Y+12	; 0x0c
    441c:	7e 85       	ldd	r23, Y+14	; 0x0e
    441e:	88 2d       	mov	r24, r8
    4420:	99 2d       	mov	r25, r9
    4422:	0e 94 83 86 	call	0x10d06	; 0x10d06 <__udivdi3>
    4426:	5f 93       	push	r21
    4428:	4f 93       	push	r20
    442a:	3f 93       	push	r19
    442c:	2f 93       	push	r18
    442e:	86 e0       	ldi	r24, 0x06	; 6
    4430:	95 e0       	ldi	r25, 0x05	; 5
    4432:	9f 93       	push	r25
    4434:	8f 93       	push	r24
    4436:	1f 92       	push	r1
    4438:	80 e4       	ldi	r24, 0x40	; 64
    443a:	8f 93       	push	r24
    443c:	8b e1       	ldi	r24, 0x1B	; 27
    443e:	95 e2       	ldi	r25, 0x25	; 37
    4440:	9f 93       	push	r25
    4442:	8f 93       	push	r24
    4444:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
			udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4448:	81 34       	cpi	r24, 0x41	; 65
    444a:	91 05       	cpc	r25, r1
    444c:	10 f0       	brcs	.+4      	; 0x4452 <task_usb+0x184>
    444e:	80 e4       	ldi	r24, 0x40	; 64
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	40 e0       	ldi	r20, 0x00	; 0
    4454:	68 2f       	mov	r22, r24
    4456:	8b e1       	ldi	r24, 0x1B	; 27
    4458:	95 e2       	ldi	r25, 0x25	; 37
    445a:	50 de       	rcall	.-864    	; 0x40fc <udi_write_tx_buf>
    445c:	cd bf       	out	0x3d, r28	; 61
    445e:	de bf       	out	0x3e, r29	; 62
		}

		/* Status output when requested */
		if (g_usb_cdc_printStatusLines_atxmega) {
    4460:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <g_usb_cdc_printStatusLines_atxmega>
    4464:	88 23       	and	r24, r24
    4466:	09 f4       	brne	.+2      	; 0x446a <task_usb+0x19c>
    4468:	6d c3       	rjmp	.+1754   	; 0x4b44 <task_usb+0x876>
			if (((now - usb_last) >= 512) || (now < usb_last)) {
    446a:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <__data_end>
    446e:	90 91 ad 21 	lds	r25, 0x21AD	; 0x8021ad <__data_end+0x1>
    4472:	a0 91 ae 21 	lds	r26, 0x21AE	; 0x8021ae <__data_end+0x2>
    4476:	b0 91 af 21 	lds	r27, 0x21AF	; 0x8021af <__data_end+0x3>
    447a:	b3 01       	movw	r22, r6
    447c:	a2 01       	movw	r20, r4
    447e:	48 1b       	sub	r20, r24
    4480:	59 0b       	sbc	r21, r25
    4482:	6a 0b       	sbc	r22, r26
    4484:	7b 0b       	sbc	r23, r27
    4486:	41 15       	cp	r20, r1
    4488:	52 40       	sbci	r21, 0x02	; 2
    448a:	61 05       	cpc	r22, r1
    448c:	71 05       	cpc	r23, r1
    448e:	30 f4       	brcc	.+12     	; 0x449c <task_usb+0x1ce>
    4490:	48 16       	cp	r4, r24
    4492:	59 06       	cpc	r5, r25
    4494:	6a 06       	cpc	r6, r26
    4496:	7b 06       	cpc	r7, r27
    4498:	08 f0       	brcs	.+2      	; 0x449c <task_usb+0x1ce>
    449a:	54 c3       	rjmp	.+1704   	; 0x4b44 <task_usb+0x876>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    449c:	8f b7       	in	r24, 0x3f	; 63
    449e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    44a0:	f8 94       	cli
	return flags;
    44a2:	69 81       	ldd	r22, Y+1	; 0x01
				int32_t	l_twi1_gyro_2_mag_z_nT;

				/* Getting a copy of the values */
				{
					irqflags_t flags			= cpu_irq_save();
					l_adc_vctcxo_volt_1000		= g_adc_vctcxo_volt_1000;
    44a4:	70 91 7a 26 	lds	r23, 0x267A	; 0x80267a <g_adc_vctcxo_volt_1000>
    44a8:	23 96       	adiw	r28, 0x03	; 3
    44aa:	7f af       	std	Y+63, r23	; 0x3f
    44ac:	23 97       	sbiw	r28, 0x03	; 3
    44ae:	80 91 7b 26 	lds	r24, 0x267B	; 0x80267b <g_adc_vctcxo_volt_1000+0x1>
    44b2:	24 96       	adiw	r28, 0x04	; 4
    44b4:	8f af       	std	Y+63, r24	; 0x3f
    44b6:	24 97       	sbiw	r28, 0x04	; 4
					l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    44b8:	20 91 78 26 	lds	r18, 0x2678	; 0x802678 <g_adc_5v0_volt_1000>
    44bc:	30 91 79 26 	lds	r19, 0x2679	; 0x802679 <g_adc_5v0_volt_1000+0x1>
					l_adc_vbat_volt_1000		= g_adc_vbat_volt_1000;
    44c0:	40 91 76 26 	lds	r20, 0x2676	; 0x802676 <g_adc_vbat_volt_1000>
    44c4:	50 91 77 26 	lds	r21, 0x2677	; 0x802677 <g_adc_vbat_volt_1000+0x1>
					l_adc_io_adc4_volt_1000		= g_adc_io_adc4_volt_1000;
    44c8:	c0 90 74 26 	lds	r12, 0x2674	; 0x802674 <g_adc_io_adc4_volt_1000>
    44cc:	cc a6       	std	Y+44, r12	; 0x2c
    44ce:	d0 90 75 26 	lds	r13, 0x2675	; 0x802675 <g_adc_io_adc4_volt_1000+0x1>
    44d2:	dd a6       	std	Y+45, r13	; 0x2d
					l_adc_io_adc5_volt_1000		= g_adc_io_adc5_volt_1000;
    44d4:	20 90 72 26 	lds	r2, 0x2672	; 0x802672 <g_adc_io_adc5_volt_1000>
    44d8:	30 90 73 26 	lds	r3, 0x2673	; 0x802673 <g_adc_io_adc5_volt_1000+0x1>
					l_adc_silence_volt_1000		= g_adc_silence_volt_1000;
    44dc:	00 91 70 26 	lds	r16, 0x2670	; 0x802670 <g_adc_silence_volt_1000>
    44e0:	10 91 71 26 	lds	r17, 0x2671	; 0x802671 <g_adc_silence_volt_1000+0x1>
					l_adc_temp_deg_100			= g_adc_temp_deg_100;
    44e4:	e0 90 6e 26 	lds	r14, 0x266E	; 0x80266e <g_adc_temp_deg_100>
    44e8:	f0 90 6f 26 	lds	r15, 0x266F	; 0x80266f <g_adc_temp_deg_100+0x1>
    44ec:	ee 82       	std	Y+6, r14	; 0x06
    44ee:	ff 82       	std	Y+7, r15	; 0x07
					l_twi1_baro_temp_100		= g_twi1_baro_temp_100;
    44f0:	80 90 f8 26 	lds	r8, 0x26F8	; 0x8026f8 <g_twi1_baro_temp_100>
    44f4:	90 90 f9 26 	lds	r9, 0x26F9	; 0x8026f9 <g_twi1_baro_temp_100+0x1>
    44f8:	a0 90 fa 26 	lds	r10, 0x26FA	; 0x8026fa <g_twi1_baro_temp_100+0x2>
    44fc:	b0 90 fb 26 	lds	r11, 0x26FB	; 0x8026fb <g_twi1_baro_temp_100+0x3>
					l_twi1_baro_p_100			= g_twi1_baro_p_100;
    4500:	c0 90 f4 26 	lds	r12, 0x26F4	; 0x8026f4 <g_twi1_baro_p_100>
    4504:	d0 90 f5 26 	lds	r13, 0x26F5	; 0x8026f5 <g_twi1_baro_p_100+0x1>
    4508:	e0 90 f6 26 	lds	r14, 0x26F6	; 0x8026f6 <g_twi1_baro_p_100+0x2>
    450c:	f0 90 f7 26 	lds	r15, 0x26F7	; 0x8026f7 <g_twi1_baro_p_100+0x3>
    4510:	c8 86       	std	Y+8, r12	; 0x08
    4512:	d9 86       	std	Y+9, r13	; 0x09
    4514:	ea 86       	std	Y+10, r14	; 0x0a
    4516:	fb 86       	std	Y+11, r15	; 0x0b
					l_twi1_hygro_T_100			= g_twi1_hygro_T_100;
    4518:	e0 90 ec 26 	lds	r14, 0x26EC	; 0x8026ec <g_twi1_hygro_T_100>
    451c:	f0 90 ed 26 	lds	r15, 0x26ED	; 0x8026ed <g_twi1_hygro_T_100+0x1>
    4520:	ec 86       	std	Y+12, r14	; 0x0c
    4522:	fd 86       	std	Y+13, r15	; 0x0d
					l_twi1_hygro_RH_100			= g_twi1_hygro_RH_100;
    4524:	c0 90 ea 26 	lds	r12, 0x26EA	; 0x8026ea <g_twi1_hygro_RH_100>
    4528:	d0 90 eb 26 	lds	r13, 0x26EB	; 0x8026eb <g_twi1_hygro_RH_100+0x1>
    452c:	ce 86       	std	Y+14, r12	; 0x0e
    452e:	df 86       	std	Y+15, r13	; 0x0f
					l_twi1_gyro_1_accel_x		= g_twi1_gyro_1_accel_x;
    4530:	d0 90 68 27 	lds	r13, 0x2768	; 0x802768 <g_twi1_gyro_1_accel_x>
    4534:	de a6       	std	Y+46, r13	; 0x2e
    4536:	e0 90 69 27 	lds	r14, 0x2769	; 0x802769 <g_twi1_gyro_1_accel_x+0x1>
    453a:	ef a6       	std	Y+47, r14	; 0x2f
					l_twi1_gyro_1_accel_y		= g_twi1_gyro_1_accel_y;
    453c:	f0 90 66 27 	lds	r15, 0x2766	; 0x802766 <g_twi1_gyro_1_accel_y>
    4540:	f8 aa       	std	Y+48, r15	; 0x30
    4542:	c0 90 67 27 	lds	r12, 0x2767	; 0x802767 <g_twi1_gyro_1_accel_y+0x1>
    4546:	c9 aa       	std	Y+49, r12	; 0x31
					l_twi1_gyro_1_accel_z		= g_twi1_gyro_1_accel_z;
    4548:	d0 90 64 27 	lds	r13, 0x2764	; 0x802764 <g_twi1_gyro_1_accel_z>
    454c:	da aa       	std	Y+50, r13	; 0x32
    454e:	e0 90 65 27 	lds	r14, 0x2765	; 0x802765 <g_twi1_gyro_1_accel_z+0x1>
    4552:	eb aa       	std	Y+51, r14	; 0x33
					l_twi1_gyro_1_accel_x_mg	= g_twi1_gyro_1_accel_x_mg;
    4554:	c0 90 56 27 	lds	r12, 0x2756	; 0x802756 <g_twi1_gyro_1_accel_x_mg>
    4558:	d0 90 57 27 	lds	r13, 0x2757	; 0x802757 <g_twi1_gyro_1_accel_x_mg+0x1>
    455c:	c8 8a       	std	Y+16, r12	; 0x10
    455e:	d9 8a       	std	Y+17, r13	; 0x11
					l_twi1_gyro_1_accel_y_mg	= g_twi1_gyro_1_accel_y_mg;
    4560:	e0 90 54 27 	lds	r14, 0x2754	; 0x802754 <g_twi1_gyro_1_accel_y_mg>
    4564:	f0 90 55 27 	lds	r15, 0x2755	; 0x802755 <g_twi1_gyro_1_accel_y_mg+0x1>
    4568:	ea 8a       	std	Y+18, r14	; 0x12
    456a:	fb 8a       	std	Y+19, r15	; 0x13
					l_twi1_gyro_1_accel_z_mg	= g_twi1_gyro_1_accel_z_mg;
    456c:	c0 90 52 27 	lds	r12, 0x2752	; 0x802752 <g_twi1_gyro_1_accel_z_mg>
    4570:	d0 90 53 27 	lds	r13, 0x2753	; 0x802753 <g_twi1_gyro_1_accel_z_mg+0x1>
    4574:	cc 8a       	std	Y+20, r12	; 0x14
    4576:	dd 8a       	std	Y+21, r13	; 0x15
					l_twi1_gyro_1_gyro_x		= g_twi1_gyro_1_gyro_x;
    4578:	d0 90 50 27 	lds	r13, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_x>
    457c:	dc aa       	std	Y+52, r13	; 0x34
    457e:	e0 90 51 27 	lds	r14, 0x2751	; 0x802751 <g_twi1_gyro_1_gyro_x+0x1>
    4582:	ed aa       	std	Y+53, r14	; 0x35
					l_twi1_gyro_1_gyro_y		= g_twi1_gyro_1_gyro_y;
    4584:	f0 90 4e 27 	lds	r15, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_y>
    4588:	fe aa       	std	Y+54, r15	; 0x36
    458a:	c0 90 4f 27 	lds	r12, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_y+0x1>
    458e:	cf aa       	std	Y+55, r12	; 0x37
					l_twi1_gyro_1_gyro_z		= g_twi1_gyro_1_gyro_z;
    4590:	d0 90 4c 27 	lds	r13, 0x274C	; 0x80274c <g_twi1_gyro_1_gyro_z>
    4594:	d8 ae       	std	Y+56, r13	; 0x38
    4596:	e0 90 4d 27 	lds	r14, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_z+0x1>
    459a:	e9 ae       	std	Y+57, r14	; 0x39
					l_twi1_gyro_1_gyro_x_mdps	= g_twi1_gyro_1_gyro_x_mdps;
    459c:	c0 90 42 27 	lds	r12, 0x2742	; 0x802742 <g_twi1_gyro_1_gyro_x_mdps>
    45a0:	d0 90 43 27 	lds	r13, 0x2743	; 0x802743 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    45a4:	e0 90 44 27 	lds	r14, 0x2744	; 0x802744 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    45a8:	f0 90 45 27 	lds	r15, 0x2745	; 0x802745 <g_twi1_gyro_1_gyro_x_mdps+0x3>
    45ac:	ce 8a       	std	Y+22, r12	; 0x16
    45ae:	df 8a       	std	Y+23, r13	; 0x17
    45b0:	e8 8e       	std	Y+24, r14	; 0x18
    45b2:	f9 8e       	std	Y+25, r15	; 0x19
					l_twi1_gyro_1_gyro_y_mdps	= g_twi1_gyro_1_gyro_y_mdps;
    45b4:	c0 90 3e 27 	lds	r12, 0x273E	; 0x80273e <g_twi1_gyro_1_gyro_y_mdps>
    45b8:	d0 90 3f 27 	lds	r13, 0x273F	; 0x80273f <g_twi1_gyro_1_gyro_y_mdps+0x1>
    45bc:	e0 90 40 27 	lds	r14, 0x2740	; 0x802740 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    45c0:	f0 90 41 27 	lds	r15, 0x2741	; 0x802741 <g_twi1_gyro_1_gyro_y_mdps+0x3>
					l_twi1_gyro_1_gyro_z_mdps	= g_twi1_gyro_1_gyro_z_mdps;
    45c4:	80 91 3a 27 	lds	r24, 0x273A	; 0x80273a <g_twi1_gyro_1_gyro_z_mdps>
    45c8:	90 91 3b 27 	lds	r25, 0x273B	; 0x80273b <g_twi1_gyro_1_gyro_z_mdps+0x1>
    45cc:	a0 91 3c 27 	lds	r26, 0x273C	; 0x80273c <g_twi1_gyro_1_gyro_z_mdps+0x2>
    45d0:	b0 91 3d 27 	lds	r27, 0x273D	; 0x80273d <g_twi1_gyro_1_gyro_z_mdps+0x3>
    45d4:	8a 8f       	std	Y+26, r24	; 0x1a
    45d6:	9b 8f       	std	Y+27, r25	; 0x1b
    45d8:	ac 8f       	std	Y+28, r26	; 0x1c
    45da:	bd 8f       	std	Y+29, r27	; 0x1d
					l_twi1_gyro_1_temp			= g_twi1_gyro_1_temp;
    45dc:	90 91 70 27 	lds	r25, 0x2770	; 0x802770 <g_twi1_gyro_1_temp>
    45e0:	9a af       	std	Y+58, r25	; 0x3a
    45e2:	a0 91 71 27 	lds	r26, 0x2771	; 0x802771 <g_twi1_gyro_1_temp+0x1>
    45e6:	ab af       	std	Y+59, r26	; 0x3b
					l_twi1_gyro_1_temp_deg_100	= g_twi1_gyro_1_temp_deg_100;
    45e8:	e0 91 6a 27 	lds	r30, 0x276A	; 0x80276a <g_twi1_gyro_1_temp_deg_100>
    45ec:	f0 91 6b 27 	lds	r31, 0x276B	; 0x80276b <g_twi1_gyro_1_temp_deg_100+0x1>
    45f0:	ee 8f       	std	Y+30, r30	; 0x1e
    45f2:	ff 8f       	std	Y+31, r31	; 0x1f
					l_twi1_gyro_2_mag_x			= g_twi1_gyro_2_mag_x;
    45f4:	f0 91 2d 27 	lds	r31, 0x272D	; 0x80272d <g_twi1_gyro_2_mag_x>
    45f8:	fc af       	std	Y+60, r31	; 0x3c
    45fa:	70 91 2e 27 	lds	r23, 0x272E	; 0x80272e <g_twi1_gyro_2_mag_x+0x1>
    45fe:	7d af       	std	Y+61, r23	; 0x3d
					l_twi1_gyro_2_mag_y			= g_twi1_gyro_2_mag_y;
    4600:	80 91 2b 27 	lds	r24, 0x272B	; 0x80272b <g_twi1_gyro_2_mag_y>
    4604:	8e af       	std	Y+62, r24	; 0x3e
    4606:	90 91 2c 27 	lds	r25, 0x272C	; 0x80272c <g_twi1_gyro_2_mag_y+0x1>
    460a:	9f af       	std	Y+63, r25	; 0x3f
					l_twi1_gyro_2_mag_z			= g_twi1_gyro_2_mag_z;
    460c:	a0 91 29 27 	lds	r26, 0x2729	; 0x802729 <g_twi1_gyro_2_mag_z>
    4610:	21 96       	adiw	r28, 0x01	; 1
    4612:	af af       	std	Y+63, r26	; 0x3f
    4614:	21 97       	sbiw	r28, 0x01	; 1
    4616:	b0 91 2a 27 	lds	r27, 0x272A	; 0x80272a <g_twi1_gyro_2_mag_z+0x1>
    461a:	22 96       	adiw	r28, 0x02	; 2
    461c:	bf af       	std	Y+63, r27	; 0x3f
    461e:	22 97       	sbiw	r28, 0x02	; 2
					l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
    4620:	80 91 1f 27 	lds	r24, 0x271F	; 0x80271f <g_twi1_gyro_2_mag_x_nT>
    4624:	90 91 20 27 	lds	r25, 0x2720	; 0x802720 <g_twi1_gyro_2_mag_x_nT+0x1>
    4628:	a0 91 21 27 	lds	r26, 0x2721	; 0x802721 <g_twi1_gyro_2_mag_x_nT+0x2>
    462c:	b0 91 22 27 	lds	r27, 0x2722	; 0x802722 <g_twi1_gyro_2_mag_x_nT+0x3>
    4630:	88 a3       	std	Y+32, r24	; 0x20
    4632:	99 a3       	std	Y+33, r25	; 0x21
    4634:	aa a3       	std	Y+34, r26	; 0x22
    4636:	bb a3       	std	Y+35, r27	; 0x23
					l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
    4638:	80 91 1b 27 	lds	r24, 0x271B	; 0x80271b <g_twi1_gyro_2_mag_y_nT>
    463c:	90 91 1c 27 	lds	r25, 0x271C	; 0x80271c <g_twi1_gyro_2_mag_y_nT+0x1>
    4640:	a0 91 1d 27 	lds	r26, 0x271D	; 0x80271d <g_twi1_gyro_2_mag_y_nT+0x2>
    4644:	b0 91 1e 27 	lds	r27, 0x271E	; 0x80271e <g_twi1_gyro_2_mag_y_nT+0x3>
    4648:	8c a3       	std	Y+36, r24	; 0x24
    464a:	9d a3       	std	Y+37, r25	; 0x25
    464c:	ae a3       	std	Y+38, r26	; 0x26
    464e:	bf a3       	std	Y+39, r27	; 0x27
					l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
    4650:	80 91 17 27 	lds	r24, 0x2717	; 0x802717 <g_twi1_gyro_2_mag_z_nT>
    4654:	90 91 18 27 	lds	r25, 0x2718	; 0x802718 <g_twi1_gyro_2_mag_z_nT+0x1>
    4658:	a0 91 19 27 	lds	r26, 0x2719	; 0x802719 <g_twi1_gyro_2_mag_z_nT+0x2>
    465c:	b0 91 1a 27 	lds	r27, 0x271A	; 0x80271a <g_twi1_gyro_2_mag_z_nT+0x3>
    4660:	88 a7       	std	Y+40, r24	; 0x28
    4662:	99 a7       	std	Y+41, r25	; 0x29
    4664:	aa a7       	std	Y+42, r26	; 0x2a
    4666:	bb a7       	std	Y+43, r27	; 0x2b
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4668:	6f bf       	out	0x3f, r22	; 63
					cpu_irq_restore(flags);
				}

				int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1A,
    466a:	5f 93       	push	r21
    466c:	4f 93       	push	r20
    466e:	3f 93       	push	r19
    4670:	2f 93       	push	r18
    4672:	24 96       	adiw	r28, 0x04	; 4
    4674:	9f ad       	ldd	r25, Y+63	; 0x3f
    4676:	24 97       	sbiw	r28, 0x04	; 4
    4678:	9f 93       	push	r25
    467a:	23 96       	adiw	r28, 0x03	; 3
    467c:	af ad       	ldd	r26, Y+63	; 0x3f
    467e:	23 97       	sbiw	r28, 0x03	; 3
    4680:	af 93       	push	r26
    4682:	d3 01       	movw	r26, r6
    4684:	c2 01       	movw	r24, r4
    4686:	07 2e       	mov	r0, r23
    4688:	7a e0       	ldi	r23, 0x0A	; 10
    468a:	b6 95       	lsr	r27
    468c:	a7 95       	ror	r26
    468e:	97 95       	ror	r25
    4690:	87 95       	ror	r24
    4692:	7a 95       	dec	r23
    4694:	d1 f7       	brne	.-12     	; 0x468a <task_usb+0x3bc>
    4696:	70 2d       	mov	r23, r0
    4698:	bf 93       	push	r27
    469a:	af 93       	push	r26
    469c:	9f 93       	push	r25
    469e:	8f 93       	push	r24
    46a0:	89 ea       	ldi	r24, 0xA9	; 169
    46a2:	96 e0       	ldi	r25, 0x06	; 6
    46a4:	9f 93       	push	r25
    46a6:	8f 93       	push	r24
    46a8:	1f 92       	push	r1
    46aa:	80 e4       	ldi	r24, 0x40	; 64
    46ac:	8f 93       	push	r24
    46ae:	8b e1       	ldi	r24, 0x1B	; 27
    46b0:	95 e2       	ldi	r25, 0x25	; 37
    46b2:	9f 93       	push	r25
    46b4:	8f 93       	push	r24
    46b6:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
				now >> 10,
				l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    46ba:	81 34       	cpi	r24, 0x41	; 65
    46bc:	91 05       	cpc	r25, r1
    46be:	10 f0       	brcs	.+4      	; 0x46c4 <task_usb+0x3f6>
    46c0:	80 e4       	ldi	r24, 0x40	; 64
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	40 e0       	ldi	r20, 0x00	; 0
    46c6:	68 2f       	mov	r22, r24
    46c8:	8b e1       	ldi	r24, 0x1B	; 27
    46ca:	95 e2       	ldi	r25, 0x25	; 37
    46cc:	17 dd       	rcall	.-1490   	; 0x40fc <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1B,
    46ce:	1f 93       	push	r17
    46d0:	0f 93       	push	r16
    46d2:	3f 92       	push	r3
    46d4:	2f 92       	push	r2
    46d6:	bd a5       	ldd	r27, Y+45	; 0x2d
    46d8:	bf 93       	push	r27
    46da:	ec a5       	ldd	r30, Y+44	; 0x2c
    46dc:	ef 93       	push	r30
    46de:	8f e7       	ldi	r24, 0x7F	; 127
    46e0:	96 e0       	ldi	r25, 0x06	; 6
    46e2:	9f 93       	push	r25
    46e4:	8f 93       	push	r24
    46e6:	1f 92       	push	r1
    46e8:	80 e4       	ldi	r24, 0x40	; 64
    46ea:	8f 93       	push	r24
    46ec:	8b e1       	ldi	r24, 0x1B	; 27
    46ee:	95 e2       	ldi	r25, 0x25	; 37
    46f0:	9f 93       	push	r25
    46f2:	8f 93       	push	r24
    46f4:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
				l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    46f8:	81 34       	cpi	r24, 0x41	; 65
    46fa:	91 05       	cpc	r25, r1
    46fc:	10 f0       	brcs	.+4      	; 0x4702 <task_usb+0x434>
    46fe:	80 e4       	ldi	r24, 0x40	; 64
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	40 e0       	ldi	r20, 0x00	; 0
    4704:	68 2f       	mov	r22, r24
    4706:	8b e1       	ldi	r24, 0x1B	; 27
    4708:	95 e2       	ldi	r25, 0x25	; 37
    470a:	f8 dc       	rcall	.-1552   	; 0x40fc <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1C,
    470c:	2e 81       	ldd	r18, Y+6	; 0x06
    470e:	3f 81       	ldd	r19, Y+7	; 0x07
    4710:	b9 01       	movw	r22, r18
    4712:	33 0f       	add	r19, r19
    4714:	88 0b       	sbc	r24, r24
    4716:	99 0b       	sbc	r25, r25
    4718:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	48 ec       	ldi	r20, 0xC8	; 200
    4722:	52 e4       	ldi	r21, 0x42	; 66
    4724:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    4728:	9f 93       	push	r25
    472a:	8f 93       	push	r24
    472c:	7f 93       	push	r23
    472e:	6f 93       	push	r22
    4730:	8b e6       	ldi	r24, 0x6B	; 107
    4732:	96 e0       	ldi	r25, 0x06	; 6
    4734:	9f 93       	push	r25
    4736:	8f 93       	push	r24
    4738:	1f 92       	push	r1
    473a:	80 e4       	ldi	r24, 0x40	; 64
    473c:	8f 93       	push	r24
    473e:	8b e1       	ldi	r24, 0x1B	; 27
    4740:	95 e2       	ldi	r25, 0x25	; 37
    4742:	9f 93       	push	r25
    4744:	8f 93       	push	r24
    4746:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
				l_adc_temp_deg_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    474a:	cd bf       	out	0x3d, r28	; 61
    474c:	de bf       	out	0x3e, r29	; 62
    474e:	81 34       	cpi	r24, 0x41	; 65
    4750:	91 05       	cpc	r25, r1
    4752:	10 f0       	brcs	.+4      	; 0x4758 <task_usb+0x48a>
    4754:	80 e4       	ldi	r24, 0x40	; 64
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	40 e0       	ldi	r20, 0x00	; 0
    475a:	68 2f       	mov	r22, r24
    475c:	8b e1       	ldi	r24, 0x1B	; 27
    475e:	95 e2       	ldi	r25, 0x25	; 37
    4760:	cd dc       	rcall	.-1638   	; 0x40fc <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P2,
    4762:	68 85       	ldd	r22, Y+8	; 0x08
    4764:	79 85       	ldd	r23, Y+9	; 0x09
    4766:	8a 85       	ldd	r24, Y+10	; 0x0a
    4768:	9b 85       	ldd	r25, Y+11	; 0x0b
    476a:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	30 e0       	ldi	r19, 0x00	; 0
    4772:	48 ec       	ldi	r20, 0xC8	; 200
    4774:	52 e4       	ldi	r21, 0x42	; 66
    4776:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    477a:	9f 93       	push	r25
    477c:	8f 93       	push	r24
    477e:	7f 93       	push	r23
    4780:	6f 93       	push	r22
    4782:	c5 01       	movw	r24, r10
    4784:	b4 01       	movw	r22, r8
    4786:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    478a:	20 e0       	ldi	r18, 0x00	; 0
    478c:	30 e0       	ldi	r19, 0x00	; 0
    478e:	48 ec       	ldi	r20, 0xC8	; 200
    4790:	52 e4       	ldi	r21, 0x42	; 66
    4792:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    4796:	9f 93       	push	r25
    4798:	8f 93       	push	r24
    479a:	7f 93       	push	r23
    479c:	6f 93       	push	r22
    479e:	84 e4       	ldi	r24, 0x44	; 68
    47a0:	96 e0       	ldi	r25, 0x06	; 6
    47a2:	9f 93       	push	r25
    47a4:	8f 93       	push	r24
    47a6:	1f 92       	push	r1
    47a8:	80 e4       	ldi	r24, 0x40	; 64
    47aa:	8f 93       	push	r24
    47ac:	8b e1       	ldi	r24, 0x1B	; 27
    47ae:	95 e2       	ldi	r25, 0x25	; 37
    47b0:	9f 93       	push	r25
    47b2:	8f 93       	push	r24
    47b4:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
				l_twi1_baro_temp_100 / 100.f, l_twi1_baro_p_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    47b8:	81 34       	cpi	r24, 0x41	; 65
    47ba:	91 05       	cpc	r25, r1
    47bc:	10 f0       	brcs	.+4      	; 0x47c2 <task_usb+0x4f4>
    47be:	80 e4       	ldi	r24, 0x40	; 64
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	40 e0       	ldi	r20, 0x00	; 0
    47c4:	68 2f       	mov	r22, r24
    47c6:	8b e1       	ldi	r24, 0x1B	; 27
    47c8:	95 e2       	ldi	r25, 0x25	; 37
    47ca:	98 dc       	rcall	.-1744   	; 0x40fc <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P3,
    47cc:	ee 85       	ldd	r30, Y+14	; 0x0e
    47ce:	ff 85       	ldd	r31, Y+15	; 0x0f
    47d0:	bf 01       	movw	r22, r30
    47d2:	ff 0f       	add	r31, r31
    47d4:	88 0b       	sbc	r24, r24
    47d6:	99 0b       	sbc	r25, r25
    47d8:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	48 ec       	ldi	r20, 0xC8	; 200
    47e2:	52 e4       	ldi	r21, 0x42	; 66
    47e4:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    47e8:	9f 93       	push	r25
    47ea:	8f 93       	push	r24
    47ec:	7f 93       	push	r23
    47ee:	6f 93       	push	r22
    47f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    47f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    47f4:	b9 01       	movw	r22, r18
    47f6:	33 0f       	add	r19, r19
    47f8:	88 0b       	sbc	r24, r24
    47fa:	99 0b       	sbc	r25, r25
    47fc:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	48 ec       	ldi	r20, 0xC8	; 200
    4806:	52 e4       	ldi	r21, 0x42	; 66
    4808:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    480c:	9f 93       	push	r25
    480e:	8f 93       	push	r24
    4810:	7f 93       	push	r23
    4812:	6f 93       	push	r22
    4814:	89 e1       	ldi	r24, 0x19	; 25
    4816:	96 e0       	ldi	r25, 0x06	; 6
    4818:	9f 93       	push	r25
    481a:	8f 93       	push	r24
    481c:	1f 92       	push	r1
    481e:	80 e4       	ldi	r24, 0x40	; 64
    4820:	8f 93       	push	r24
    4822:	8b e1       	ldi	r24, 0x1B	; 27
    4824:	95 e2       	ldi	r25, 0x25	; 37
    4826:	9f 93       	push	r25
    4828:	8f 93       	push	r24
    482a:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
				l_twi1_hygro_T_100 / 100.f, l_twi1_hygro_RH_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    482e:	81 34       	cpi	r24, 0x41	; 65
    4830:	91 05       	cpc	r25, r1
    4832:	10 f0       	brcs	.+4      	; 0x4838 <task_usb+0x56a>
    4834:	80 e4       	ldi	r24, 0x40	; 64
    4836:	90 e0       	ldi	r25, 0x00	; 0
    4838:	40 e0       	ldi	r20, 0x00	; 0
    483a:	68 2f       	mov	r22, r24
    483c:	8b e1       	ldi	r24, 0x1B	; 27
    483e:	95 e2       	ldi	r25, 0x25	; 37
    4840:	5d dc       	rcall	.-1862   	; 0x40fc <udi_write_tx_buf>


				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P1A,
    4842:	39 a9       	ldd	r19, Y+49	; 0x31
    4844:	3f 93       	push	r19
    4846:	78 a9       	ldd	r23, Y+48	; 0x30
    4848:	7f 93       	push	r23
    484a:	aa 89       	ldd	r26, Y+18	; 0x12
    484c:	bb 89       	ldd	r27, Y+19	; 0x13
    484e:	bd 01       	movw	r22, r26
    4850:	bb 0f       	add	r27, r27
    4852:	88 0b       	sbc	r24, r24
    4854:	99 0b       	sbc	r25, r25
    4856:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	4a e7       	ldi	r20, 0x7A	; 122
    4860:	54 e4       	ldi	r21, 0x44	; 68
    4862:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    4866:	9f 93       	push	r25
    4868:	8f 93       	push	r24
    486a:	7f 93       	push	r23
    486c:	6f 93       	push	r22
    486e:	bf a5       	ldd	r27, Y+47	; 0x2f
    4870:	bf 93       	push	r27
    4872:	ee a5       	ldd	r30, Y+46	; 0x2e
    4874:	ef 93       	push	r30
    4876:	28 89       	ldd	r18, Y+16	; 0x10
    4878:	39 89       	ldd	r19, Y+17	; 0x11
    487a:	b9 01       	movw	r22, r18
    487c:	33 0f       	add	r19, r19
    487e:	88 0b       	sbc	r24, r24
    4880:	99 0b       	sbc	r25, r25
    4882:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    4886:	20 e0       	ldi	r18, 0x00	; 0
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	4a e7       	ldi	r20, 0x7A	; 122
    488c:	54 e4       	ldi	r21, 0x44	; 68
    488e:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    4892:	9f 93       	push	r25
    4894:	8f 93       	push	r24
    4896:	7f 93       	push	r23
    4898:	6f 93       	push	r22
    489a:	8d ee       	ldi	r24, 0xED	; 237
    489c:	95 e0       	ldi	r25, 0x05	; 5
    489e:	9f 93       	push	r25
    48a0:	8f 93       	push	r24
    48a2:	1f 92       	push	r1
    48a4:	80 e4       	ldi	r24, 0x40	; 64
    48a6:	8f 93       	push	r24
    48a8:	8b e1       	ldi	r24, 0x1B	; 27
    48aa:	95 e2       	ldi	r25, 0x25	; 37
    48ac:	9f 93       	push	r25
    48ae:	8f 93       	push	r24
    48b0:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
				l_twi1_gyro_1_accel_x_mg / 1000.f, l_twi1_gyro_1_accel_x,
				l_twi1_gyro_1_accel_y_mg / 1000.f, l_twi1_gyro_1_accel_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    48b4:	cd bf       	out	0x3d, r28	; 61
    48b6:	de bf       	out	0x3e, r29	; 62
    48b8:	81 34       	cpi	r24, 0x41	; 65
    48ba:	91 05       	cpc	r25, r1
    48bc:	10 f0       	brcs	.+4      	; 0x48c2 <task_usb+0x5f4>
    48be:	80 e4       	ldi	r24, 0x40	; 64
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	40 e0       	ldi	r20, 0x00	; 0
    48c4:	68 2f       	mov	r22, r24
    48c6:	8b e1       	ldi	r24, 0x1B	; 27
    48c8:	95 e2       	ldi	r25, 0x25	; 37
    48ca:	18 dc       	rcall	.-2000   	; 0x40fc <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P1B,
    48cc:	bb a9       	ldd	r27, Y+51	; 0x33
    48ce:	bf 93       	push	r27
    48d0:	ea a9       	ldd	r30, Y+50	; 0x32
    48d2:	ef 93       	push	r30
    48d4:	2c 89       	ldd	r18, Y+20	; 0x14
    48d6:	3d 89       	ldd	r19, Y+21	; 0x15
    48d8:	b9 01       	movw	r22, r18
    48da:	33 0f       	add	r19, r19
    48dc:	88 0b       	sbc	r24, r24
    48de:	99 0b       	sbc	r25, r25
    48e0:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    48e4:	20 e0       	ldi	r18, 0x00	; 0
    48e6:	30 e0       	ldi	r19, 0x00	; 0
    48e8:	4a e7       	ldi	r20, 0x7A	; 122
    48ea:	54 e4       	ldi	r21, 0x44	; 68
    48ec:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    48f0:	9f 93       	push	r25
    48f2:	8f 93       	push	r24
    48f4:	7f 93       	push	r23
    48f6:	6f 93       	push	r22
    48f8:	86 ed       	ldi	r24, 0xD6	; 214
    48fa:	95 e0       	ldi	r25, 0x05	; 5
    48fc:	9f 93       	push	r25
    48fe:	8f 93       	push	r24
    4900:	1f 92       	push	r1
    4902:	80 e4       	ldi	r24, 0x40	; 64
    4904:	8f 93       	push	r24
    4906:	8b e1       	ldi	r24, 0x1B	; 27
    4908:	95 e2       	ldi	r25, 0x25	; 37
    490a:	9f 93       	push	r25
    490c:	8f 93       	push	r24
    490e:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
				l_twi1_gyro_1_accel_z_mg / 1000.f, l_twi1_gyro_1_accel_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4912:	81 34       	cpi	r24, 0x41	; 65
    4914:	91 05       	cpc	r25, r1
    4916:	10 f0       	brcs	.+4      	; 0x491c <task_usb+0x64e>
    4918:	80 e4       	ldi	r24, 0x40	; 64
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	40 e0       	ldi	r20, 0x00	; 0
    491e:	68 2f       	mov	r22, r24
    4920:	8b e1       	ldi	r24, 0x1B	; 27
    4922:	95 e2       	ldi	r25, 0x25	; 37
    4924:	eb db       	rcall	.-2090   	; 0x40fc <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P2A,
    4926:	3f a9       	ldd	r19, Y+55	; 0x37
    4928:	3f 93       	push	r19
    492a:	7e a9       	ldd	r23, Y+54	; 0x36
    492c:	7f 93       	push	r23
    492e:	c7 01       	movw	r24, r14
    4930:	b6 01       	movw	r22, r12
    4932:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	4a e7       	ldi	r20, 0x7A	; 122
    493c:	54 e4       	ldi	r21, 0x44	; 68
    493e:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    4942:	9f 93       	push	r25
    4944:	8f 93       	push	r24
    4946:	7f 93       	push	r23
    4948:	6f 93       	push	r22
    494a:	cd a8       	ldd	r12, Y+53	; 0x35
    494c:	cf 92       	push	r12
    494e:	dc a8       	ldd	r13, Y+52	; 0x34
    4950:	df 92       	push	r13
    4952:	6e 89       	ldd	r22, Y+22	; 0x16
    4954:	7f 89       	ldd	r23, Y+23	; 0x17
    4956:	88 8d       	ldd	r24, Y+24	; 0x18
    4958:	99 8d       	ldd	r25, Y+25	; 0x19
    495a:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    495e:	20 e0       	ldi	r18, 0x00	; 0
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	4a e7       	ldi	r20, 0x7A	; 122
    4964:	54 e4       	ldi	r21, 0x44	; 68
    4966:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    496a:	9f 93       	push	r25
    496c:	8f 93       	push	r24
    496e:	7f 93       	push	r23
    4970:	6f 93       	push	r22
    4972:	87 ea       	ldi	r24, 0xA7	; 167
    4974:	95 e0       	ldi	r25, 0x05	; 5
    4976:	9f 93       	push	r25
    4978:	8f 93       	push	r24
    497a:	1f 92       	push	r1
    497c:	80 e4       	ldi	r24, 0x40	; 64
    497e:	8f 93       	push	r24
    4980:	8b e1       	ldi	r24, 0x1B	; 27
    4982:	95 e2       	ldi	r25, 0x25	; 37
    4984:	9f 93       	push	r25
    4986:	8f 93       	push	r24
    4988:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
				l_twi1_gyro_1_gyro_x_mdps / 1000.f, l_twi1_gyro_1_gyro_x,
				l_twi1_gyro_1_gyro_y_mdps / 1000.f, l_twi1_gyro_1_gyro_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    498c:	81 34       	cpi	r24, 0x41	; 65
    498e:	91 05       	cpc	r25, r1
    4990:	10 f0       	brcs	.+4      	; 0x4996 <task_usb+0x6c8>
    4992:	80 e4       	ldi	r24, 0x40	; 64
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	40 e0       	ldi	r20, 0x00	; 0
    4998:	68 2f       	mov	r22, r24
    499a:	8b e1       	ldi	r24, 0x1B	; 27
    499c:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P2B,
    499e:	ae db       	rcall	.-2212   	; 0x40fc <udi_write_tx_buf>
    49a0:	e9 ac       	ldd	r14, Y+57	; 0x39
    49a2:	ef 92       	push	r14
    49a4:	f8 ac       	ldd	r15, Y+56	; 0x38
    49a6:	ff 92       	push	r15
    49a8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    49aa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    49ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    49ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    49b0:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    49b4:	20 e0       	ldi	r18, 0x00	; 0
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	4a e7       	ldi	r20, 0x7A	; 122
    49ba:	54 e4       	ldi	r21, 0x44	; 68
    49bc:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    49c0:	9f 93       	push	r25
    49c2:	8f 93       	push	r24
    49c4:	7f 93       	push	r23
    49c6:	6f 93       	push	r22
    49c8:	8f e8       	ldi	r24, 0x8F	; 143
    49ca:	95 e0       	ldi	r25, 0x05	; 5
    49cc:	9f 93       	push	r25
    49ce:	8f 93       	push	r24
    49d0:	1f 92       	push	r1
    49d2:	80 e4       	ldi	r24, 0x40	; 64
    49d4:	8f 93       	push	r24
    49d6:	8b e1       	ldi	r24, 0x1B	; 27
    49d8:	95 e2       	ldi	r25, 0x25	; 37
    49da:	9f 93       	push	r25
    49dc:	8f 93       	push	r24
    49de:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
				l_twi1_gyro_1_gyro_z_mdps / 1000.f, l_twi1_gyro_1_gyro_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    49e2:	cd bf       	out	0x3d, r28	; 61
    49e4:	de bf       	out	0x3e, r29	; 62
    49e6:	81 34       	cpi	r24, 0x41	; 65
    49e8:	91 05       	cpc	r25, r1
    49ea:	10 f0       	brcs	.+4      	; 0x49f0 <task_usb+0x722>
    49ec:	80 e4       	ldi	r24, 0x40	; 64
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	40 e0       	ldi	r20, 0x00	; 0
    49f2:	68 2f       	mov	r22, r24
    49f4:	8b e1       	ldi	r24, 0x1B	; 27
    49f6:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P3A,
    49f8:	81 db       	rcall	.-2302   	; 0x40fc <udi_write_tx_buf>
    49fa:	cf ac       	ldd	r12, Y+63	; 0x3f
    49fc:	cf 92       	push	r12
    49fe:	de ac       	ldd	r13, Y+62	; 0x3e
    4a00:	df 92       	push	r13
    4a02:	6c a1       	ldd	r22, Y+36	; 0x24
    4a04:	7d a1       	ldd	r23, Y+37	; 0x25
    4a06:	8e a1       	ldd	r24, Y+38	; 0x26
    4a08:	9f a1       	ldd	r25, Y+39	; 0x27
    4a0a:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	4a e7       	ldi	r20, 0x7A	; 122
    4a14:	54 e4       	ldi	r21, 0x44	; 68
    4a16:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    4a1a:	9f 93       	push	r25
    4a1c:	8f 93       	push	r24
    4a1e:	7f 93       	push	r23
    4a20:	6f 93       	push	r22
    4a22:	ed ac       	ldd	r14, Y+61	; 0x3d
    4a24:	ef 92       	push	r14
    4a26:	fc ac       	ldd	r15, Y+60	; 0x3c
    4a28:	ff 92       	push	r15
    4a2a:	68 a1       	ldd	r22, Y+32	; 0x20
    4a2c:	79 a1       	ldd	r23, Y+33	; 0x21
    4a2e:	8a a1       	ldd	r24, Y+34	; 0x22
    4a30:	9b a1       	ldd	r25, Y+35	; 0x23
    4a32:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	4a e7       	ldi	r20, 0x7A	; 122
    4a3c:	54 e4       	ldi	r21, 0x44	; 68
    4a3e:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    4a42:	9f 93       	push	r25
    4a44:	8f 93       	push	r24
    4a46:	7f 93       	push	r23
    4a48:	6f 93       	push	r22
    4a4a:	82 e6       	ldi	r24, 0x62	; 98
    4a4c:	95 e0       	ldi	r25, 0x05	; 5
    4a4e:	9f 93       	push	r25
    4a50:	8f 93       	push	r24
    4a52:	1f 92       	push	r1
    4a54:	80 e4       	ldi	r24, 0x40	; 64
    4a56:	8f 93       	push	r24
    4a58:	8b e1       	ldi	r24, 0x1B	; 27
    4a5a:	95 e2       	ldi	r25, 0x25	; 37
    4a5c:	9f 93       	push	r25
    4a5e:	8f 93       	push	r24
				l_twi1_gyro_2_mag_x_nT / 1000.f, l_twi1_gyro_2_mag_x,
				l_twi1_gyro_2_mag_y_nT / 1000.f, l_twi1_gyro_2_mag_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4a60:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    4a64:	81 34       	cpi	r24, 0x41	; 65
    4a66:	91 05       	cpc	r25, r1
    4a68:	10 f0       	brcs	.+4      	; 0x4a6e <task_usb+0x7a0>
    4a6a:	80 e4       	ldi	r24, 0x40	; 64
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	40 e0       	ldi	r20, 0x00	; 0
    4a70:	68 2f       	mov	r22, r24
    4a72:	8b e1       	ldi	r24, 0x1B	; 27
    4a74:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P3B,
    4a76:	42 db       	rcall	.-2428   	; 0x40fc <udi_write_tx_buf>
    4a78:	22 96       	adiw	r28, 0x02	; 2
    4a7a:	cf ac       	ldd	r12, Y+63	; 0x3f
    4a7c:	22 97       	sbiw	r28, 0x02	; 2
    4a7e:	cf 92       	push	r12
    4a80:	21 96       	adiw	r28, 0x01	; 1
    4a82:	df ac       	ldd	r13, Y+63	; 0x3f
    4a84:	21 97       	sbiw	r28, 0x01	; 1
    4a86:	df 92       	push	r13
    4a88:	68 a5       	ldd	r22, Y+40	; 0x28
    4a8a:	79 a5       	ldd	r23, Y+41	; 0x29
    4a8c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a8e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a90:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	4a e7       	ldi	r20, 0x7A	; 122
    4a9a:	54 e4       	ldi	r21, 0x44	; 68
    4a9c:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    4aa0:	9f 93       	push	r25
    4aa2:	8f 93       	push	r24
    4aa4:	7f 93       	push	r23
    4aa6:	6f 93       	push	r22
    4aa8:	8a e4       	ldi	r24, 0x4A	; 74
    4aaa:	95 e0       	ldi	r25, 0x05	; 5
    4aac:	9f 93       	push	r25
    4aae:	8f 93       	push	r24
    4ab0:	1f 92       	push	r1
    4ab2:	80 e4       	ldi	r24, 0x40	; 64
    4ab4:	8f 93       	push	r24
    4ab6:	8b e1       	ldi	r24, 0x1B	; 27
    4ab8:	95 e2       	ldi	r25, 0x25	; 37
    4aba:	9f 93       	push	r25
    4abc:	8f 93       	push	r24
				l_twi1_gyro_2_mag_z_nT / 1000.f, l_twi1_gyro_2_mag_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4abe:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    4ac2:	81 34       	cpi	r24, 0x41	; 65
    4ac4:	91 05       	cpc	r25, r1
    4ac6:	10 f0       	brcs	.+4      	; 0x4acc <task_usb+0x7fe>
    4ac8:	80 e4       	ldi	r24, 0x40	; 64
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	40 e0       	ldi	r20, 0x00	; 0
    4ace:	68 2f       	mov	r22, r24
    4ad0:	8b e1       	ldi	r24, 0x1B	; 27
    4ad2:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P4,
    4ad4:	13 db       	rcall	.-2522   	; 0x40fc <udi_write_tx_buf>
    4ad6:	eb ac       	ldd	r14, Y+59	; 0x3b
    4ad8:	ef 92       	push	r14
    4ada:	fa ac       	ldd	r15, Y+58	; 0x3a
    4adc:	ff 92       	push	r15
    4ade:	ce 8c       	ldd	r12, Y+30	; 0x1e
    4ae0:	df 8c       	ldd	r13, Y+31	; 0x1f
    4ae2:	b6 01       	movw	r22, r12
    4ae4:	dd 0c       	add	r13, r13
    4ae6:	88 0b       	sbc	r24, r24
    4ae8:	99 0b       	sbc	r25, r25
    4aea:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    4aee:	20 e0       	ldi	r18, 0x00	; 0
    4af0:	30 e0       	ldi	r19, 0x00	; 0
    4af2:	48 ec       	ldi	r20, 0xC8	; 200
    4af4:	52 e4       	ldi	r21, 0x42	; 66
    4af6:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    4afa:	9f 93       	push	r25
    4afc:	8f 93       	push	r24
    4afe:	7f 93       	push	r23
    4b00:	6f 93       	push	r22
    4b02:	8b e2       	ldi	r24, 0x2B	; 43
    4b04:	95 e0       	ldi	r25, 0x05	; 5
    4b06:	9f 93       	push	r25
    4b08:	8f 93       	push	r24
    4b0a:	1f 92       	push	r1
    4b0c:	80 e4       	ldi	r24, 0x40	; 64
    4b0e:	8f 93       	push	r24
    4b10:	8b e1       	ldi	r24, 0x1B	; 27
    4b12:	95 e2       	ldi	r25, 0x25	; 37
    4b14:	9f 93       	push	r25
    4b16:	8f 93       	push	r24
				l_twi1_gyro_1_temp_deg_100 / 100.f, l_twi1_gyro_1_temp);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4b18:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    4b1c:	cd bf       	out	0x3d, r28	; 61
    4b1e:	de bf       	out	0x3e, r29	; 62
    4b20:	81 34       	cpi	r24, 0x41	; 65
    4b22:	91 05       	cpc	r25, r1
    4b24:	10 f0       	brcs	.+4      	; 0x4b2a <task_usb+0x85c>
    4b26:	80 e4       	ldi	r24, 0x40	; 64
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	40 e0       	ldi	r20, 0x00	; 0
    4b2c:	68 2f       	mov	r22, r24
    4b2e:	8b e1       	ldi	r24, 0x1B	; 27
    4b30:	95 e2       	ldi	r25, 0x25	; 37

				/* Store last time of status line */
				usb_last = now;
    4b32:	e4 da       	rcall	.-2616   	; 0x40fc <udi_write_tx_buf>
    4b34:	40 92 ac 21 	sts	0x21AC, r4	; 0x8021ac <__data_end>
    4b38:	50 92 ad 21 	sts	0x21AD, r5	; 0x8021ad <__data_end+0x1>
    4b3c:	60 92 ae 21 	sts	0x21AE, r6	; 0x8021ae <__data_end+0x2>
    4b40:	70 92 af 21 	sts	0x21AF, r7	; 0x8021af <__data_end+0x3>
			}
		}
	}
}
    4b44:	cd 5b       	subi	r28, 0xBD	; 189
    4b46:	df 4f       	sbci	r29, 0xFF	; 255
    4b48:	cd bf       	out	0x3d, r28	; 61
    4b4a:	de bf       	out	0x3e, r29	; 62
    4b4c:	df 91       	pop	r29
    4b4e:	cf 91       	pop	r28
    4b50:	1f 91       	pop	r17
    4b52:	0f 91       	pop	r16
    4b54:	ff 90       	pop	r15
    4b56:	ef 90       	pop	r14
    4b58:	df 90       	pop	r13
    4b5a:	cf 90       	pop	r12
    4b5c:	bf 90       	pop	r11
    4b5e:	af 90       	pop	r10
    4b60:	9f 90       	pop	r9
    4b62:	8f 90       	pop	r8
    4b64:	7f 90       	pop	r7
    4b66:	6f 90       	pop	r6
    4b68:	5f 90       	pop	r5
    4b6a:	4f 90       	pop	r4
    4b6c:	3f 90       	pop	r3
    4b6e:	2f 90       	pop	r2
    4b70:	08 95       	ret

00004b72 <nvm_init>:
	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    4b72:	83 30       	cpi	r24, 0x03	; 3
    4b74:	10 f4       	brcc	.+4      	; 0x4b7a <nvm_init+0x8>
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	08 95       	ret
    4b7a:	88 ef       	ldi	r24, 0xF8	; 248
    4b7c:	08 95       	ret

00004b7e <nvm_read>:

status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    4b7e:	ef 92       	push	r14
    4b80:	ff 92       	push	r15
    4b82:	0f 93       	push	r16
    4b84:	1f 93       	push	r17
    4b86:	e8 2f       	mov	r30, r24
    4b88:	db 01       	movw	r26, r22
    4b8a:	ca 01       	movw	r24, r20
    4b8c:	b9 01       	movw	r22, r18
	switch (mem) {
    4b8e:	e1 30       	cpi	r30, 0x01	; 1
    4b90:	61 f0       	breq	.+24     	; 0x4baa <nvm_read+0x2c>
    4b92:	18 f0       	brcs	.+6      	; 0x4b9a <nvm_read+0x1c>
    4b94:	e2 30       	cpi	r30, 0x02	; 2
    4b96:	89 f0       	breq	.+34     	; 0x4bba <nvm_read+0x3c>
    4b98:	15 c0       	rjmp	.+42     	; 0x4bc4 <nvm_read+0x46>
	case INT_FLASH:
		nvm_flash_read_buffer((flash_addr_t)address, buffer,
    4b9a:	97 01       	movw	r18, r14
    4b9c:	ab 01       	movw	r20, r22
    4b9e:	bc 01       	movw	r22, r24
    4ba0:	cd 01       	movw	r24, r26
    4ba2:	0e 94 40 7c 	call	0xf880	; 0xf880 <nvm_flash_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4ba6:	80 e0       	ldi	r24, 0x00	; 0
{
	switch (mem) {
	case INT_FLASH:
		nvm_flash_read_buffer((flash_addr_t)address, buffer,
				(uint16_t)len);
		break;
    4ba8:	0e c0       	rjmp	.+28     	; 0x4bc6 <nvm_read+0x48>

	case INT_USERPAGE:
		nvm_user_sig_read_buffer((flash_addr_t)address, buffer,
    4baa:	97 01       	movw	r18, r14
    4bac:	ab 01       	movw	r20, r22
    4bae:	bc 01       	movw	r22, r24
    4bb0:	cd 01       	movw	r24, r26
    4bb2:	0e 94 58 7c 	call	0xf8b0	; 0xf8b0 <nvm_user_sig_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4bb6:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_USERPAGE:
		nvm_user_sig_read_buffer((flash_addr_t)address, buffer,
				(uint16_t)len);
		break;
    4bb8:	06 c0       	rjmp	.+12     	; 0x4bc6 <nvm_read+0x48>

	case INT_EEPROM:
		nvm_eeprom_read_buffer((eeprom_addr_t)address, buffer,
    4bba:	a7 01       	movw	r20, r14
    4bbc:	0e 94 6c 7b 	call	0xf6d8	; 0xf6d8 <nvm_eeprom_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4bc0:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_EEPROM:
		nvm_eeprom_read_buffer((eeprom_addr_t)address, buffer,
				(uint16_t)len);
		break;
    4bc2:	01 c0       	rjmp	.+2      	; 0x4bc6 <nvm_read+0x48>
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
    4bc4:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    4bc6:	1f 91       	pop	r17
    4bc8:	0f 91       	pop	r16
    4bca:	ff 90       	pop	r15
    4bcc:	ef 90       	pop	r14
    4bce:	08 95       	ret

00004bd0 <nvm_write>:

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    4bd0:	ef 92       	push	r14
    4bd2:	ff 92       	push	r15
    4bd4:	0f 93       	push	r16
    4bd6:	1f 93       	push	r17
    4bd8:	e8 2f       	mov	r30, r24
    4bda:	db 01       	movw	r26, r22
    4bdc:	ca 01       	movw	r24, r20
    4bde:	b9 01       	movw	r22, r18
    4be0:	a8 01       	movw	r20, r16
    4be2:	97 01       	movw	r18, r14
	switch (mem) {
    4be4:	e1 30       	cpi	r30, 0x01	; 1
    4be6:	61 f0       	breq	.+24     	; 0x4c00 <nvm_write+0x30>
    4be8:	18 f0       	brcs	.+6      	; 0x4bf0 <nvm_write+0x20>
    4bea:	e2 30       	cpi	r30, 0x02	; 2
    4bec:	89 f0       	breq	.+34     	; 0x4c10 <nvm_write+0x40>
    4bee:	15 c0       	rjmp	.+42     	; 0x4c1a <nvm_write+0x4a>
	case INT_FLASH:
		nvm_flash_erase_and_write_buffer((flash_addr_t)address,
    4bf0:	01 e0       	ldi	r16, 0x01	; 1
    4bf2:	ab 01       	movw	r20, r22
    4bf4:	bc 01       	movw	r22, r24
    4bf6:	cd 01       	movw	r24, r26
    4bf8:	0e 94 1a 7d 	call	0xfa34	; 0xfa34 <nvm_flash_erase_and_write_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
{
	switch (mem) {
	case INT_FLASH:
		nvm_flash_erase_and_write_buffer((flash_addr_t)address,
				(const void *)buffer, len, true);
		break;
    4bfe:	0e c0       	rjmp	.+28     	; 0x4c1c <nvm_write+0x4c>

	case INT_USERPAGE:
		nvm_user_sig_write_buffer((flash_addr_t)address,
    4c00:	01 e0       	ldi	r16, 0x01	; 1
    4c02:	ab 01       	movw	r20, r22
    4c04:	bc 01       	movw	r22, r24
    4c06:	cd 01       	movw	r24, r26
    4c08:	0e 94 75 7c 	call	0xf8ea	; 0xf8ea <nvm_user_sig_write_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_USERPAGE:
		nvm_user_sig_write_buffer((flash_addr_t)address,
				(const void *)buffer, len, true);
		break;
    4c0e:	06 c0       	rjmp	.+12     	; 0x4c1c <nvm_write+0x4c>

	case INT_EEPROM:
		nvm_eeprom_erase_and_write_buffer((eeprom_addr_t)address,
    4c10:	a7 01       	movw	r20, r14
    4c12:	0e 94 00 7c 	call	0xf800	; 0xf800 <nvm_eeprom_erase_and_write_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4c16:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_EEPROM:
		nvm_eeprom_erase_and_write_buffer((eeprom_addr_t)address,
				(const void *)buffer, len);
		break;
    4c18:	01 c0       	rjmp	.+2      	; 0x4c1c <nvm_write+0x4c>
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
    4c1a:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    4c1c:	1f 91       	pop	r17
    4c1e:	0f 91       	pop	r16
    4c20:	ff 90       	pop	r15
    4c22:	ef 90       	pop	r14
    4c24:	08 95       	ret

00004c26 <fifo_init>:
 */

#include "fifo.h"

int fifo_init(fifo_desc_t *fifo_desc, void *buffer, uint8_t size)
{
    4c26:	fc 01       	movw	r30, r24
	// ... and must fit in a uint8_t. Since the read and write indexes are using a
	// double-index range implementation, the max FIFO size is thus 128 items.
	Assert (size <= 128);

	// Fifo starts empty.
	fifo_desc->read_index  = 0;
    4c28:	12 82       	std	Z+2, r1	; 0x02
	fifo_desc->write_index = 0;
    4c2a:	13 82       	std	Z+3, r1	; 0x03

	// Save the size parameter.
	fifo_desc->size = size;
    4c2c:	44 83       	std	Z+4, r20	; 0x04

	// Create a mask to speed up the FIFO management (index swapping).
	fifo_desc->mask = (2 * (uint16_t)size) - 1;
    4c2e:	44 0f       	add	r20, r20
    4c30:	41 50       	subi	r20, 0x01	; 1
    4c32:	45 83       	std	Z+5, r20	; 0x05

	// Save the buffer pointer.
	fifo_desc->buffer.u8ptr = buffer;
    4c34:	60 83       	st	Z, r22
    4c36:	71 83       	std	Z+1, r23	; 0x01

	return FIFO_OK;
}
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	08 95       	ret

00004c3e <dma_interrupt>:
 * dma_set_callback() function.
 *
 * \param num DMA channel number to handle interrupt for
 */
static void dma_interrupt(const dma_channel_num_t num)
{
    4c3e:	cf 93       	push	r28
    4c40:	df 93       	push	r29
	enum dma_channel_status status;
	DMA_CH_t *channel;

	channel = dma_get_channel_address_from_num(num);
    4c42:	48 2f       	mov	r20, r24
    4c44:	50 e0       	ldi	r21, 0x00	; 0
    4c46:	fa 01       	movw	r30, r20
    4c48:	71 96       	adiw	r30, 0x11	; 17
    4c4a:	e2 95       	swap	r30
    4c4c:	f2 95       	swap	r31
    4c4e:	f0 7f       	andi	r31, 0xF0	; 240
    4c50:	fe 27       	eor	r31, r30
    4c52:	e0 7f       	andi	r30, 0xF0	; 240
    4c54:	fe 27       	eor	r31, r30
 * \return Channel status given by a \ref dma_channel_status
 */
static inline enum dma_channel_status dma_get_channel_status(
		dma_channel_num_t num)
{
	uint8_t busy_pending    = DMA.STATUS;
    4c56:	a0 e0       	ldi	r26, 0x00	; 0
    4c58:	b1 e0       	ldi	r27, 0x01	; 1
    4c5a:	14 96       	adiw	r26, 0x04	; 4
    4c5c:	9c 91       	ld	r25, X
    4c5e:	14 97       	sbiw	r26, 0x04	; 4
	uint8_t error_completed = DMA.INTFLAGS;
    4c60:	13 96       	adiw	r26, 0x03	; 3
    4c62:	6c 91       	ld	r22, X

	/*
	 * Check lower and upper nibble of INTFLAGS register to find possible
	 * error or transfer completed status.
	 */
	error_completed &= (1 << num) | (1 << (num + 4));
    4c64:	da 01       	movw	r26, r20
    4c66:	14 96       	adiw	r26, 0x04	; 4
    4c68:	21 e0       	ldi	r18, 0x01	; 1
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	e9 01       	movw	r28, r18
    4c6e:	08 2e       	mov	r0, r24
    4c70:	02 c0       	rjmp	.+4      	; 0x4c76 <dma_interrupt+0x38>
    4c72:	cc 0f       	add	r28, r28
    4c74:	dd 1f       	adc	r29, r29
    4c76:	0a 94       	dec	r0
    4c78:	e2 f7       	brpl	.-8      	; 0x4c72 <dma_interrupt+0x34>
    4c7a:	0a 2e       	mov	r0, r26
    4c7c:	02 c0       	rjmp	.+4      	; 0x4c82 <dma_interrupt+0x44>
    4c7e:	22 0f       	add	r18, r18
    4c80:	33 1f       	adc	r19, r19
    4c82:	0a 94       	dec	r0
    4c84:	e2 f7       	brpl	.-8      	; 0x4c7e <dma_interrupt+0x40>
    4c86:	2c 2b       	or	r18, r28
    4c88:	62 23       	and	r22, r18
	if (error_completed & (1 << (num + 4))) {
    4c8a:	70 e0       	ldi	r23, 0x00	; 0
    4c8c:	eb 01       	movw	r28, r22
    4c8e:	0a 2e       	mov	r0, r26
    4c90:	02 c0       	rjmp	.+4      	; 0x4c96 <dma_interrupt+0x58>
    4c92:	d5 95       	asr	r29
    4c94:	c7 95       	ror	r28
    4c96:	0a 94       	dec	r0
    4c98:	e2 f7       	brpl	.-8      	; 0x4c92 <dma_interrupt+0x54>
    4c9a:	c0 fd       	sbrc	r28, 0
    4c9c:	1a c0       	rjmp	.+52     	; 0x4cd2 <dma_interrupt+0x94>
		return DMA_CH_TRANSFER_ERROR;
	} else if (error_completed & (1 << num)) {
    4c9e:	08 2e       	mov	r0, r24
    4ca0:	02 c0       	rjmp	.+4      	; 0x4ca6 <dma_interrupt+0x68>
    4ca2:	75 95       	asr	r23
    4ca4:	67 95       	ror	r22
    4ca6:	0a 94       	dec	r0
    4ca8:	e2 f7       	brpl	.-8      	; 0x4ca2 <dma_interrupt+0x64>
    4caa:	60 fd       	sbrc	r22, 0
    4cac:	14 c0       	rjmp	.+40     	; 0x4cd6 <dma_interrupt+0x98>

	/*
	 * Check lower and upper nibble of STATUS register to find possible
	 * busy or pending completed status.
	 */
	busy_pending &= (1 << num) | (1 << (num + 4));
    4cae:	29 23       	and	r18, r25
	if (busy_pending & (1 << (num + 4))) {
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	b9 01       	movw	r22, r18
    4cb4:	02 c0       	rjmp	.+4      	; 0x4cba <dma_interrupt+0x7c>
    4cb6:	75 95       	asr	r23
    4cb8:	67 95       	ror	r22
    4cba:	aa 95       	dec	r26
    4cbc:	e2 f7       	brpl	.-8      	; 0x4cb6 <dma_interrupt+0x78>
    4cbe:	60 fd       	sbrc	r22, 0
    4cc0:	0c c0       	rjmp	.+24     	; 0x4cda <dma_interrupt+0x9c>
	 * Check lower and upper nibble of INTFLAGS register to find possible
	 * error or transfer completed status.
	 */
	error_completed &= (1 << num) | (1 << (num + 4));
	if (error_completed & (1 << (num + 4))) {
		return DMA_CH_TRANSFER_ERROR;
    4cc2:	02 c0       	rjmp	.+4      	; 0x4cc8 <dma_interrupt+0x8a>
    4cc4:	35 95       	asr	r19
    4cc6:	27 95       	ror	r18
    4cc8:	8a 95       	dec	r24
    4cca:	e2 f7       	brpl	.-8      	; 0x4cc4 <dma_interrupt+0x86>
    4ccc:	82 2f       	mov	r24, r18
    4cce:	81 70       	andi	r24, 0x01	; 1
    4cd0:	05 c0       	rjmp	.+10     	; 0x4cdc <dma_interrupt+0x9e>
    4cd2:	84 e0       	ldi	r24, 0x04	; 4
    4cd4:	03 c0       	rjmp	.+6      	; 0x4cdc <dma_interrupt+0x9e>
	} else if (error_completed & (1 << num)) {
		return DMA_CH_TRANSFER_COMPLETED;
    4cd6:	83 e0       	ldi	r24, 0x03	; 3
    4cd8:	01 c0       	rjmp	.+2      	; 0x4cdc <dma_interrupt+0x9e>
	 * Check lower and upper nibble of STATUS register to find possible
	 * busy or pending completed status.
	 */
	busy_pending &= (1 << num) | (1 << (num + 4));
	if (busy_pending & (1 << (num + 4))) {
		return DMA_CH_BUSY;
    4cda:	82 e0       	ldi	r24, 0x02	; 2
	status  = dma_get_channel_status(num);

	/* Clear all interrupt flags to be sure */
	channel->CTRLB |= DMA_CH_TRNIF_bm | DMA_CH_ERRIF_bm;
    4cdc:	91 81       	ldd	r25, Z+1	; 0x01
    4cde:	90 63       	ori	r25, 0x30	; 48
    4ce0:	91 83       	std	Z+1, r25	; 0x01

	if (dma_data[num].callback) {
    4ce2:	44 0f       	add	r20, r20
    4ce4:	55 1f       	adc	r21, r21
    4ce6:	fa 01       	movw	r30, r20
    4ce8:	e9 52       	subi	r30, 0x29	; 41
    4cea:	f2 4d       	sbci	r31, 0xD2	; 210
    4cec:	01 90       	ld	r0, Z+
    4cee:	f0 81       	ld	r31, Z
    4cf0:	e0 2d       	mov	r30, r0
    4cf2:	30 97       	sbiw	r30, 0x00	; 0
    4cf4:	09 f0       	breq	.+2      	; 0x4cf8 <dma_interrupt+0xba>
		dma_data[num].callback(status);
    4cf6:	19 95       	eicall
	}
}
    4cf8:	df 91       	pop	r29
    4cfa:	cf 91       	pop	r28
    4cfc:	08 95       	ret

00004cfe <dma_enable>:
 *
 * \note This function will do a soft reset of the DMA controller, clearing all
 * previous configuration.
 */
void dma_enable(void)
{
    4cfe:	cf 93       	push	r28
    4d00:	df 93       	push	r29
    4d02:	1f 92       	push	r1
    4d04:	cd b7       	in	r28, 0x3d	; 61
    4d06:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4d08:	61 e0       	ldi	r22, 0x01	; 1
    4d0a:	80 e0       	ldi	r24, 0x00	; 0
    4d0c:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4d10:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    4d14:	8f 3f       	cpi	r24, 0xFF	; 255
    4d16:	09 f4       	brne	.+2      	; 0x4d1a <dma_enable+0x1c>
    4d18:	ff cf       	rjmp	.-2      	; 0x4d18 <dma_enable+0x1a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4d1a:	8f b7       	in	r24, 0x3f	; 63
    4d1c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4d1e:	f8 94       	cli
	return flags;
    4d20:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4d22:	eb e7       	ldi	r30, 0x7B	; 123
    4d24:	fe e2       	ldi	r31, 0x2E	; 46
    4d26:	81 81       	ldd	r24, Z+1	; 0x01
    4d28:	8f 5f       	subi	r24, 0xFF	; 255
    4d2a:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4d2c:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_lock_mode(SLEEPMGR_IDLE);

	/* Reset DMA controller just to make sure everything is from scratch */
	DMA.CTRL = DMA_RESET_bm;
    4d2e:	e0 e0       	ldi	r30, 0x00	; 0
    4d30:	f1 e0       	ldi	r31, 0x01	; 1
    4d32:	80 e4       	ldi	r24, 0x40	; 64
    4d34:	80 83       	st	Z, r24
	DMA.CTRL = DMA_ENABLE_bm;
    4d36:	80 e8       	ldi	r24, 0x80	; 128
    4d38:	80 83       	st	Z, r24
}
    4d3a:	0f 90       	pop	r0
    4d3c:	df 91       	pop	r29
    4d3e:	cf 91       	pop	r28
    4d40:	08 95       	ret

00004d42 <dma_disable>:

/**
 * \brief Disable DMA controller
 */
void dma_disable(void)
{
    4d42:	cf 93       	push	r28
    4d44:	df 93       	push	r29
    4d46:	1f 92       	push	r1
    4d48:	cd b7       	in	r28, 0x3d	; 61
    4d4a:	de b7       	in	r29, 0x3e	; 62
	DMA.CTRL = 0;
    4d4c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4d50:	61 e0       	ldi	r22, 0x01	; 1
    4d52:	80 e0       	ldi	r24, 0x00	; 0
    4d54:	0e 94 f2 72 	call	0xe5e4	; 0xe5e4 <sysclk_disable_module>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4d58:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    4d5c:	81 11       	cpse	r24, r1
    4d5e:	01 c0       	rjmp	.+2      	; 0x4d62 <dma_disable+0x20>
    4d60:	ff cf       	rjmp	.-2      	; 0x4d60 <dma_disable+0x1e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4d62:	8f b7       	in	r24, 0x3f	; 63
    4d64:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4d66:	f8 94       	cli
	return flags;
    4d68:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    4d6a:	eb e7       	ldi	r30, 0x7B	; 123
    4d6c:	fe e2       	ldi	r31, 0x2E	; 46
    4d6e:	81 81       	ldd	r24, Z+1	; 0x01
    4d70:	81 50       	subi	r24, 0x01	; 1
    4d72:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4d74:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    4d76:	0f 90       	pop	r0
    4d78:	df 91       	pop	r29
    4d7a:	cf 91       	pop	r28
    4d7c:	08 95       	ret

00004d7e <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    4d7e:	e8 2f       	mov	r30, r24
    4d80:	f0 e0       	ldi	r31, 0x00	; 0
    4d82:	ee 0f       	add	r30, r30
    4d84:	ff 1f       	adc	r31, r31
    4d86:	e9 52       	subi	r30, 0x29	; 41
    4d88:	f2 4d       	sbci	r31, 0xD2	; 210
    4d8a:	60 83       	st	Z, r22
    4d8c:	71 83       	std	Z+1, r23	; 0x01
    4d8e:	08 95       	ret

00004d90 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    4d90:	1f 92       	push	r1
    4d92:	0f 92       	push	r0
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	0f 92       	push	r0
    4d98:	11 24       	eor	r1, r1
    4d9a:	0b b6       	in	r0, 0x3b	; 59
    4d9c:	0f 92       	push	r0
    4d9e:	2f 93       	push	r18
    4da0:	3f 93       	push	r19
    4da2:	4f 93       	push	r20
    4da4:	5f 93       	push	r21
    4da6:	6f 93       	push	r22
    4da8:	7f 93       	push	r23
    4daa:	8f 93       	push	r24
    4dac:	9f 93       	push	r25
    4dae:	af 93       	push	r26
    4db0:	bf 93       	push	r27
    4db2:	ef 93       	push	r30
    4db4:	ff 93       	push	r31
	dma_interrupt(0);
    4db6:	80 e0       	ldi	r24, 0x00	; 0
    4db8:	42 df       	rcall	.-380    	; 0x4c3e <dma_interrupt>
}
    4dba:	ff 91       	pop	r31
    4dbc:	ef 91       	pop	r30
    4dbe:	bf 91       	pop	r27
    4dc0:	af 91       	pop	r26
    4dc2:	9f 91       	pop	r25
    4dc4:	8f 91       	pop	r24
    4dc6:	7f 91       	pop	r23
    4dc8:	6f 91       	pop	r22
    4dca:	5f 91       	pop	r21
    4dcc:	4f 91       	pop	r20
    4dce:	3f 91       	pop	r19
    4dd0:	2f 91       	pop	r18
    4dd2:	0f 90       	pop	r0
    4dd4:	0b be       	out	0x3b, r0	; 59
    4dd6:	0f 90       	pop	r0
    4dd8:	0f be       	out	0x3f, r0	; 63
    4dda:	0f 90       	pop	r0
    4ddc:	1f 90       	pop	r1
    4dde:	18 95       	reti

00004de0 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    4de0:	1f 92       	push	r1
    4de2:	0f 92       	push	r0
    4de4:	0f b6       	in	r0, 0x3f	; 63
    4de6:	0f 92       	push	r0
    4de8:	11 24       	eor	r1, r1
    4dea:	0b b6       	in	r0, 0x3b	; 59
    4dec:	0f 92       	push	r0
    4dee:	2f 93       	push	r18
    4df0:	3f 93       	push	r19
    4df2:	4f 93       	push	r20
    4df4:	5f 93       	push	r21
    4df6:	6f 93       	push	r22
    4df8:	7f 93       	push	r23
    4dfa:	8f 93       	push	r24
    4dfc:	9f 93       	push	r25
    4dfe:	af 93       	push	r26
    4e00:	bf 93       	push	r27
    4e02:	ef 93       	push	r30
    4e04:	ff 93       	push	r31
	dma_interrupt(1);
    4e06:	81 e0       	ldi	r24, 0x01	; 1
    4e08:	1a df       	rcall	.-460    	; 0x4c3e <dma_interrupt>
}
    4e0a:	ff 91       	pop	r31
    4e0c:	ef 91       	pop	r30
    4e0e:	bf 91       	pop	r27
    4e10:	af 91       	pop	r26
    4e12:	9f 91       	pop	r25
    4e14:	8f 91       	pop	r24
    4e16:	7f 91       	pop	r23
    4e18:	6f 91       	pop	r22
    4e1a:	5f 91       	pop	r21
    4e1c:	4f 91       	pop	r20
    4e1e:	3f 91       	pop	r19
    4e20:	2f 91       	pop	r18
    4e22:	0f 90       	pop	r0
    4e24:	0b be       	out	0x3b, r0	; 59
    4e26:	0f 90       	pop	r0
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	0f 90       	pop	r0
    4e2c:	1f 90       	pop	r1
    4e2e:	18 95       	reti

00004e30 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    4e30:	1f 92       	push	r1
    4e32:	0f 92       	push	r0
    4e34:	0f b6       	in	r0, 0x3f	; 63
    4e36:	0f 92       	push	r0
    4e38:	11 24       	eor	r1, r1
    4e3a:	0b b6       	in	r0, 0x3b	; 59
    4e3c:	0f 92       	push	r0
    4e3e:	2f 93       	push	r18
    4e40:	3f 93       	push	r19
    4e42:	4f 93       	push	r20
    4e44:	5f 93       	push	r21
    4e46:	6f 93       	push	r22
    4e48:	7f 93       	push	r23
    4e4a:	8f 93       	push	r24
    4e4c:	9f 93       	push	r25
    4e4e:	af 93       	push	r26
    4e50:	bf 93       	push	r27
    4e52:	ef 93       	push	r30
    4e54:	ff 93       	push	r31
	dma_interrupt(2);
    4e56:	82 e0       	ldi	r24, 0x02	; 2
    4e58:	f2 de       	rcall	.-540    	; 0x4c3e <dma_interrupt>
}
    4e5a:	ff 91       	pop	r31
    4e5c:	ef 91       	pop	r30
    4e5e:	bf 91       	pop	r27
    4e60:	af 91       	pop	r26
    4e62:	9f 91       	pop	r25
    4e64:	8f 91       	pop	r24
    4e66:	7f 91       	pop	r23
    4e68:	6f 91       	pop	r22
    4e6a:	5f 91       	pop	r21
    4e6c:	4f 91       	pop	r20
    4e6e:	3f 91       	pop	r19
    4e70:	2f 91       	pop	r18
    4e72:	0f 90       	pop	r0
    4e74:	0b be       	out	0x3b, r0	; 59
    4e76:	0f 90       	pop	r0
    4e78:	0f be       	out	0x3f, r0	; 63
    4e7a:	0f 90       	pop	r0
    4e7c:	1f 90       	pop	r1
    4e7e:	18 95       	reti

00004e80 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    4e80:	1f 92       	push	r1
    4e82:	0f 92       	push	r0
    4e84:	0f b6       	in	r0, 0x3f	; 63
    4e86:	0f 92       	push	r0
    4e88:	11 24       	eor	r1, r1
    4e8a:	0b b6       	in	r0, 0x3b	; 59
    4e8c:	0f 92       	push	r0
    4e8e:	2f 93       	push	r18
    4e90:	3f 93       	push	r19
    4e92:	4f 93       	push	r20
    4e94:	5f 93       	push	r21
    4e96:	6f 93       	push	r22
    4e98:	7f 93       	push	r23
    4e9a:	8f 93       	push	r24
    4e9c:	9f 93       	push	r25
    4e9e:	af 93       	push	r26
    4ea0:	bf 93       	push	r27
    4ea2:	ef 93       	push	r30
    4ea4:	ff 93       	push	r31
	dma_interrupt(3);
    4ea6:	83 e0       	ldi	r24, 0x03	; 3
    4ea8:	ca de       	rcall	.-620    	; 0x4c3e <dma_interrupt>
}
    4eaa:	ff 91       	pop	r31
    4eac:	ef 91       	pop	r30
    4eae:	bf 91       	pop	r27
    4eb0:	af 91       	pop	r26
    4eb2:	9f 91       	pop	r25
    4eb4:	8f 91       	pop	r24
    4eb6:	7f 91       	pop	r23
    4eb8:	6f 91       	pop	r22
    4eba:	5f 91       	pop	r21
    4ebc:	4f 91       	pop	r20
    4ebe:	3f 91       	pop	r19
    4ec0:	2f 91       	pop	r18
    4ec2:	0f 90       	pop	r0
    4ec4:	0b be       	out	0x3b, r0	; 59
    4ec6:	0f 90       	pop	r0
    4ec8:	0f be       	out	0x3f, r0	; 63
    4eca:	0f 90       	pop	r0
    4ecc:	1f 90       	pop	r1
    4ece:	18 95       	reti

00004ed0 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    4ed0:	cf 93       	push	r28
    4ed2:	df 93       	push	r29
    4ed4:	1f 92       	push	r1
    4ed6:	cd b7       	in	r28, 0x3d	; 61
    4ed8:	de b7       	in	r29, 0x3e	; 62
    4eda:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    4edc:	e8 2f       	mov	r30, r24
    4ede:	f0 e0       	ldi	r31, 0x00	; 0
    4ee0:	71 96       	adiw	r30, 0x11	; 17
    4ee2:	e2 95       	swap	r30
    4ee4:	f2 95       	swap	r31
    4ee6:	f0 7f       	andi	r31, 0xF0	; 240
    4ee8:	fe 27       	eor	r31, r30
    4eea:	e0 7f       	andi	r30, 0xF0	; 240
    4eec:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4eee:	8f b7       	in	r24, 0x3f	; 63
    4ef0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4ef2:	f8 94       	cli
	return flags;
    4ef4:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    4ef6:	19 96       	adiw	r26, 0x09	; 9
    4ef8:	8c 91       	ld	r24, X
    4efa:	19 97       	sbiw	r26, 0x09	; 9
    4efc:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    4efe:	1a 96       	adiw	r26, 0x0a	; 10
    4f00:	8c 91       	ld	r24, X
    4f02:	1a 97       	sbiw	r26, 0x0a	; 10
    4f04:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    4f06:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    4f08:	17 96       	adiw	r26, 0x07	; 7
    4f0a:	8c 91       	ld	r24, X
    4f0c:	17 97       	sbiw	r26, 0x07	; 7
    4f0e:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    4f10:	18 96       	adiw	r26, 0x08	; 8
    4f12:	8c 91       	ld	r24, X
    4f14:	18 97       	sbiw	r26, 0x08	; 8
    4f16:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    4f18:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    4f1a:	12 96       	adiw	r26, 0x02	; 2
    4f1c:	8c 91       	ld	r24, X
    4f1e:	12 97       	sbiw	r26, 0x02	; 2
    4f20:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    4f22:	13 96       	adiw	r26, 0x03	; 3
    4f24:	8c 91       	ld	r24, X
    4f26:	13 97       	sbiw	r26, 0x03	; 3
    4f28:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    4f2a:	14 96       	adiw	r26, 0x04	; 4
    4f2c:	2d 91       	ld	r18, X+
    4f2e:	3c 91       	ld	r19, X
    4f30:	15 97       	sbiw	r26, 0x05	; 5
    4f32:	24 83       	std	Z+4, r18	; 0x04
    4f34:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    4f36:	16 96       	adiw	r26, 0x06	; 6
    4f38:	8c 91       	ld	r24, X
    4f3a:	16 97       	sbiw	r26, 0x06	; 6
    4f3c:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    4f3e:	11 96       	adiw	r26, 0x01	; 1
    4f40:	8c 91       	ld	r24, X
    4f42:	11 97       	sbiw	r26, 0x01	; 1
    4f44:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    4f46:	8c 91       	ld	r24, X
    4f48:	8f 77       	andi	r24, 0x7F	; 127
    4f4a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4f4c:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    4f4e:	0f 90       	pop	r0
    4f50:	df 91       	pop	r29
    4f52:	cf 91       	pop	r28
    4f54:	08 95       	ret

00004f56 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    4f56:	04 c0       	rjmp	.+8      	; 0x4f60 <__portable_avr_delay_cycles+0xa>
    4f58:	61 50       	subi	r22, 0x01	; 1
    4f5a:	71 09       	sbc	r23, r1
    4f5c:	81 09       	sbc	r24, r1
    4f5e:	91 09       	sbc	r25, r1
    4f60:	61 15       	cp	r22, r1
    4f62:	71 05       	cpc	r23, r1
    4f64:	81 05       	cpc	r24, r1
    4f66:	91 05       	cpc	r25, r1
    4f68:	b9 f7       	brne	.-18     	; 0x4f58 <__portable_avr_delay_cycles+0x2>
    4f6a:	08 95       	ret

00004f6c <rtc_get_time>:
    4f6c:	80 e1       	ldi	r24, 0x10	; 16
    4f6e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    4f72:	e0 e2       	ldi	r30, 0x20	; 32
    4f74:	f4 e0       	ldi	r31, 0x04	; 4
    4f76:	81 81       	ldd	r24, Z+1	; 0x01
    4f78:	84 fd       	sbrc	r24, 4
    4f7a:	fd cf       	rjmp	.-6      	; 0x4f76 <rtc_get_time+0xa>
    4f7c:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    4f80:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    4f84:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    4f88:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    4f8c:	08 95       	ret

00004f8e <rtc_set_alarm>:
    4f8e:	e0 e2       	ldi	r30, 0x20	; 32
    4f90:	f4 e0       	ldi	r31, 0x04	; 4
    4f92:	24 e0       	ldi	r18, 0x04	; 4
    4f94:	22 83       	std	Z+2, r18	; 0x02
    4f96:	64 87       	std	Z+12, r22	; 0x0c
    4f98:	75 87       	std	Z+13, r23	; 0x0d
    4f9a:	86 87       	std	Z+14, r24	; 0x0e
    4f9c:	97 87       	std	Z+15, r25	; 0x0f
    4f9e:	82 e0       	ldi	r24, 0x02	; 2
    4fa0:	83 83       	std	Z+3, r24	; 0x03
    4fa2:	08 95       	ret

00004fa4 <rtc_set_callback>:
    4fa4:	80 93 df 2d 	sts	0x2DDF, r24	; 0x802ddf <rtc_data>
    4fa8:	90 93 e0 2d 	sts	0x2DE0, r25	; 0x802de0 <rtc_data+0x1>
    4fac:	08 95       	ret

00004fae <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    4fae:	cf 93       	push	r28
    4fb0:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    4fb2:	64 e0       	ldi	r22, 0x04	; 4
    4fb4:	80 e0       	ldi	r24, 0x00	; 0
    4fb6:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    4fba:	c0 ef       	ldi	r28, 0xF0	; 240
    4fbc:	d0 e0       	ldi	r29, 0x00	; 0
    4fbe:	88 81       	ld	r24, Y
    4fc0:	82 60       	ori	r24, 0x02	; 2
    4fc2:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    4fc4:	61 e0       	ldi	r22, 0x01	; 1
    4fc6:	80 ef       	ldi	r24, 0xF0	; 240
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	0e 94 eb 7d 	call	0xfbd6	; 0xfbd6 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    4fce:	88 81       	ld	r24, Y
    4fd0:	84 60       	ori	r24, 0x04	; 4
    4fd2:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    4fd4:	69 ee       	ldi	r22, 0xE9	; 233
    4fd6:	73 e0       	ldi	r23, 0x03	; 3
    4fd8:	80 e0       	ldi	r24, 0x00	; 0
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	bc df       	rcall	.-136    	; 0x4f56 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    4fde:	88 81       	ld	r24, Y
    4fe0:	88 61       	ori	r24, 0x18	; 24
    4fe2:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    4fe4:	e0 ef       	ldi	r30, 0xF0	; 240
    4fe6:	f0 e0       	ldi	r31, 0x00	; 0
    4fe8:	81 81       	ldd	r24, Z+1	; 0x01
    4fea:	83 ff       	sbrs	r24, 3
    4fec:	fd cf       	rjmp	.-6      	; 0x4fe8 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    4fee:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    4ff2:	e0 e2       	ldi	r30, 0x20	; 32
    4ff4:	f4 e0       	ldi	r31, 0x04	; 4
    4ff6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    4ff8:	80 fd       	sbrc	r24, 0
    4ffa:	fd cf       	rjmp	.-6      	; 0x4ff6 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    4ffc:	e0 e2       	ldi	r30, 0x20	; 32
    4ffe:	f4 e0       	ldi	r31, 0x04	; 4
    5000:	8f ef       	ldi	r24, 0xFF	; 255
    5002:	9f ef       	ldi	r25, 0xFF	; 255
    5004:	dc 01       	movw	r26, r24
    5006:	80 87       	std	Z+8, r24	; 0x08
    5008:	91 87       	std	Z+9, r25	; 0x09
    500a:	a2 87       	std	Z+10, r26	; 0x0a
    500c:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    500e:	14 82       	std	Z+4, r1	; 0x04
    5010:	15 82       	std	Z+5, r1	; 0x05
    5012:	16 82       	std	Z+6, r1	; 0x06
    5014:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    5016:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    5018:	80 fd       	sbrc	r24, 0
    501a:	fd cf       	rjmp	.-6      	; 0x5016 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    501c:	e0 e2       	ldi	r30, 0x20	; 32
    501e:	f4 e0       	ldi	r31, 0x04	; 4
    5020:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    5022:	81 e0       	ldi	r24, 0x01	; 1
    5024:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    5026:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    5028:	80 fd       	sbrc	r24, 0
    502a:	fd cf       	rjmp	.-6      	; 0x5026 <rtc_init+0x78>
}
    502c:	df 91       	pop	r29
    502e:	cf 91       	pop	r28
    5030:	08 95       	ret

00005032 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    5032:	1f 92       	push	r1
    5034:	0f 92       	push	r0
    5036:	0f b6       	in	r0, 0x3f	; 63
    5038:	0f 92       	push	r0
    503a:	11 24       	eor	r1, r1
    503c:	0b b6       	in	r0, 0x3b	; 59
    503e:	0f 92       	push	r0
    5040:	2f 93       	push	r18
    5042:	3f 93       	push	r19
    5044:	4f 93       	push	r20
    5046:	5f 93       	push	r21
    5048:	6f 93       	push	r22
    504a:	7f 93       	push	r23
    504c:	8f 93       	push	r24
    504e:	9f 93       	push	r25
    5050:	af 93       	push	r26
    5052:	bf 93       	push	r27
    5054:	cf 93       	push	r28
    5056:	df 93       	push	r29
    5058:	ef 93       	push	r30
    505a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    505c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    5060:	c0 91 df 2d 	lds	r28, 0x2DDF	; 0x802ddf <rtc_data>
    5064:	d0 91 e0 2d 	lds	r29, 0x2DE0	; 0x802de0 <rtc_data+0x1>
    5068:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    506a:	19 f0       	breq	.+6      	; 0x5072 <__vector_11+0x40>
    506c:	7f df       	rcall	.-258    	; 0x4f6c <rtc_get_time>
    506e:	fe 01       	movw	r30, r28
}
    5070:	19 95       	eicall
    5072:	ff 91       	pop	r31
    5074:	ef 91       	pop	r30
    5076:	df 91       	pop	r29
    5078:	cf 91       	pop	r28
    507a:	bf 91       	pop	r27
    507c:	af 91       	pop	r26
    507e:	9f 91       	pop	r25
    5080:	8f 91       	pop	r24
    5082:	7f 91       	pop	r23
    5084:	6f 91       	pop	r22
    5086:	5f 91       	pop	r21
    5088:	4f 91       	pop	r20
    508a:	3f 91       	pop	r19
    508c:	2f 91       	pop	r18
    508e:	0f 90       	pop	r0
    5090:	0b be       	out	0x3b, r0	; 59
    5092:	0f 90       	pop	r0
    5094:	0f be       	out	0x3f, r0	; 63
    5096:	0f 90       	pop	r0
    5098:	1f 90       	pop	r1
    509a:	18 95       	reti

0000509c <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* SINE LUT */
	uint16_t left_x, rght_x, left_y, rght_y;
	rght_x = left_x = phase >> 4;
    509c:	fc 01       	movw	r30, r24
    509e:	f2 95       	swap	r31
    50a0:	e2 95       	swap	r30
    50a2:	ef 70       	andi	r30, 0x0F	; 15
    50a4:	ef 27       	eor	r30, r31
    50a6:	ff 70       	andi	r31, 0x0F	; 15
    50a8:	ef 27       	eor	r30, r31
	if (++rght_x >= PM_SINE_COUNT) {
    50aa:	9f 01       	movw	r18, r30
    50ac:	2f 5f       	subi	r18, 0xFF	; 255
    50ae:	3f 4f       	sbci	r19, 0xFF	; 255
    50b0:	21 15       	cp	r18, r1
    50b2:	40 e1       	ldi	r20, 0x10	; 16
    50b4:	34 07       	cpc	r19, r20
    50b6:	08 f0       	brcs	.+2      	; 0x50ba <get_interpolated_sine+0x1e>
		rght_x -= PM_SINE_COUNT;
    50b8:	30 51       	subi	r19, 0x10	; 16
	}
	left_y = PGM_READ_WORD(&(PM_SINE[left_x]));
    50ba:	ee 0f       	add	r30, r30
    50bc:	ff 1f       	adc	r31, r31
    50be:	ef 52       	subi	r30, 0x2F	; 47
    50c0:	f2 4f       	sbci	r31, 0xF2	; 242
    50c2:	45 91       	lpm	r20, Z+
    50c4:	54 91       	lpm	r21, Z
	rght_y = PGM_READ_WORD(&(PM_SINE[rght_x]));
    50c6:	f9 01       	movw	r30, r18
    50c8:	ee 0f       	add	r30, r30
    50ca:	ff 1f       	adc	r31, r31
    50cc:	ef 52       	subi	r30, 0x2F	; 47
    50ce:	f2 4f       	sbci	r31, 0xF2	; 242
    50d0:	25 91       	lpm	r18, Z+
    50d2:	34 91       	lpm	r19, Z

	/* INTERPOLATION LUT */
	uint16_t idx_y	= (uint16_t)((uint32_t)PM_SINE_MAX_STEP + rght_y - left_y);		// PM_SINE_MAX_STEP = +/-50
	uint16_t idx	= (idx_y << 4) | (phase & 0x0f);
	return left_y + (int8_t)PGM_READ_BYTE(&(PM_SINE_IP[idx]));
    50d4:	f9 01       	movw	r30, r18
    50d6:	f4 96       	adiw	r30, 0x34	; 52
    50d8:	e4 1b       	sub	r30, r20
    50da:	f5 0b       	sbc	r31, r21
    50dc:	e2 95       	swap	r30
    50de:	f2 95       	swap	r31
    50e0:	f0 7f       	andi	r31, 0xF0	; 240
    50e2:	fe 27       	eor	r31, r30
    50e4:	e0 7f       	andi	r30, 0xF0	; 240
    50e6:	fe 27       	eor	r31, r30
    50e8:	8f 70       	andi	r24, 0x0F	; 15
    50ea:	99 27       	eor	r25, r25
    50ec:	e8 2b       	or	r30, r24
    50ee:	f9 2b       	or	r31, r25
    50f0:	ef 5a       	subi	r30, 0xAF	; 175
    50f2:	f8 4f       	sbci	r31, 0xF8	; 248
    50f4:	e4 91       	lpm	r30, Z
}
    50f6:	ca 01       	movw	r24, r20
    50f8:	8e 0f       	add	r24, r30
    50fa:	91 1d       	adc	r25, r1
    50fc:	e7 fd       	sbrc	r30, 7
    50fe:	9a 95       	dec	r25
    5100:	08 95       	ret

00005102 <printHelp>:

void printHelp(void)
{
	static bool s_again = false;

	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HDR_1);
    5102:	89 e4       	ldi	r24, 0x49	; 73
    5104:	91 e3       	ldi	r25, 0x31	; 49
    5106:	9f 93       	push	r25
    5108:	8f 93       	push	r24
    510a:	1f 92       	push	r1
    510c:	80 e4       	ldi	r24, 0x40	; 64
    510e:	8f 93       	push	r24
    5110:	8b e1       	ldi	r24, 0x1B	; 27
    5112:	95 e2       	ldi	r25, 0x25	; 37
    5114:	9f 93       	push	r25
    5116:	8f 93       	push	r24
    5118:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    511c:	81 34       	cpi	r24, 0x41	; 65
    511e:	91 05       	cpc	r25, r1
    5120:	10 f0       	brcs	.+4      	; 0x5126 <printHelp+0x24>
    5122:	80 e4       	ldi	r24, 0x40	; 64
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	40 e0       	ldi	r20, 0x00	; 0
    5128:	68 2f       	mov	r22, r24
    512a:	8b e1       	ldi	r24, 0x1B	; 27
    512c:	95 e2       	ldi	r25, 0x25	; 37
    512e:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HDR_2);
    5132:	8a e2       	ldi	r24, 0x2A	; 42
    5134:	91 e3       	ldi	r25, 0x31	; 49
    5136:	9f 93       	push	r25
    5138:	8f 93       	push	r24
    513a:	1f 92       	push	r1
    513c:	80 e4       	ldi	r24, 0x40	; 64
    513e:	8f 93       	push	r24
    5140:	8b e1       	ldi	r24, 0x1B	; 27
    5142:	95 e2       	ldi	r25, 0x25	; 37
    5144:	9f 93       	push	r25
    5146:	8f 93       	push	r24
    5148:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    514c:	81 34       	cpi	r24, 0x41	; 65
    514e:	91 05       	cpc	r25, r1
    5150:	10 f0       	brcs	.+4      	; 0x5156 <printHelp+0x54>
    5152:	80 e4       	ldi	r24, 0x40	; 64
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	40 e0       	ldi	r20, 0x00	; 0
    5158:	68 2f       	mov	r22, r24
    515a:	8b e1       	ldi	r24, 0x1B	; 27
    515c:	95 e2       	ldi	r25, 0x25	; 37
    515e:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_ADC_1);
    5162:	88 e0       	ldi	r24, 0x08	; 8
    5164:	91 e3       	ldi	r25, 0x31	; 49
    5166:	9f 93       	push	r25
    5168:	8f 93       	push	r24
    516a:	1f 92       	push	r1
    516c:	80 e4       	ldi	r24, 0x40	; 64
    516e:	8f 93       	push	r24
    5170:	8b e1       	ldi	r24, 0x1B	; 27
    5172:	95 e2       	ldi	r25, 0x25	; 37
    5174:	9f 93       	push	r25
    5176:	8f 93       	push	r24
    5178:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    517c:	81 34       	cpi	r24, 0x41	; 65
    517e:	91 05       	cpc	r25, r1
    5180:	10 f0       	brcs	.+4      	; 0x5186 <printHelp+0x84>
    5182:	80 e4       	ldi	r24, 0x40	; 64
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	40 e0       	ldi	r20, 0x00	; 0
    5188:	68 2f       	mov	r22, r24
    518a:	8b e1       	ldi	r24, 0x1B	; 27
    518c:	95 e2       	ldi	r25, 0x25	; 37
    518e:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_ADC_2);
    5192:	8d ee       	ldi	r24, 0xED	; 237
    5194:	90 e3       	ldi	r25, 0x30	; 48
    5196:	9f 93       	push	r25
    5198:	8f 93       	push	r24
    519a:	1f 92       	push	r1
    519c:	80 e4       	ldi	r24, 0x40	; 64
    519e:	8f 93       	push	r24
    51a0:	8b e1       	ldi	r24, 0x1B	; 27
    51a2:	95 e2       	ldi	r25, 0x25	; 37
    51a4:	9f 93       	push	r25
    51a6:	8f 93       	push	r24
    51a8:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    51ac:	81 34       	cpi	r24, 0x41	; 65
    51ae:	91 05       	cpc	r25, r1
    51b0:	10 f0       	brcs	.+4      	; 0x51b6 <printHelp+0xb4>
    51b2:	80 e4       	ldi	r24, 0x40	; 64
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	40 e0       	ldi	r20, 0x00	; 0
    51b8:	68 2f       	mov	r22, r24
    51ba:	8b e1       	ldi	r24, 0x1B	; 27
    51bc:	95 e2       	ldi	r25, 0x25	; 37
    51be:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_AT_1);
    51c2:	8d ec       	ldi	r24, 0xCD	; 205
    51c4:	90 e3       	ldi	r25, 0x30	; 48
    51c6:	9f 93       	push	r25
    51c8:	8f 93       	push	r24
    51ca:	1f 92       	push	r1
    51cc:	80 e4       	ldi	r24, 0x40	; 64
    51ce:	8f 93       	push	r24
    51d0:	8b e1       	ldi	r24, 0x1B	; 27
    51d2:	95 e2       	ldi	r25, 0x25	; 37
    51d4:	9f 93       	push	r25
    51d6:	8f 93       	push	r24
    51d8:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    51dc:	81 34       	cpi	r24, 0x41	; 65
    51de:	91 05       	cpc	r25, r1
    51e0:	10 f0       	brcs	.+4      	; 0x51e6 <printHelp+0xe4>
    51e2:	80 e4       	ldi	r24, 0x40	; 64
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	40 e0       	ldi	r20, 0x00	; 0
    51e8:	68 2f       	mov	r22, r24
    51ea:	8b e1       	ldi	r24, 0x1B	; 27
    51ec:	95 e2       	ldi	r25, 0x25	; 37
    51ee:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BIAS_1);
    51f2:	82 eb       	ldi	r24, 0xB2	; 178
    51f4:	90 e3       	ldi	r25, 0x30	; 48
    51f6:	9f 93       	push	r25
    51f8:	8f 93       	push	r24
    51fa:	1f 92       	push	r1
    51fc:	80 e4       	ldi	r24, 0x40	; 64
    51fe:	8f 93       	push	r24
    5200:	8b e1       	ldi	r24, 0x1B	; 27
    5202:	95 e2       	ldi	r25, 0x25	; 37
    5204:	9f 93       	push	r25
    5206:	8f 93       	push	r24
    5208:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    520c:	2d b7       	in	r18, 0x3d	; 61
    520e:	3e b7       	in	r19, 0x3e	; 62
    5210:	2c 5d       	subi	r18, 0xDC	; 220
    5212:	3f 4f       	sbci	r19, 0xFF	; 255
    5214:	2d bf       	out	0x3d, r18	; 61
    5216:	3e bf       	out	0x3e, r19	; 62
    5218:	81 34       	cpi	r24, 0x41	; 65
    521a:	91 05       	cpc	r25, r1
    521c:	10 f0       	brcs	.+4      	; 0x5222 <printHelp+0x120>
    521e:	80 e4       	ldi	r24, 0x40	; 64
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	40 e0       	ldi	r20, 0x00	; 0
    5224:	68 2f       	mov	r22, r24
    5226:	8b e1       	ldi	r24, 0x1B	; 27
    5228:	95 e2       	ldi	r25, 0x25	; 37
    522a:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BIAS_2);
    522e:	8f e9       	ldi	r24, 0x9F	; 159
    5230:	90 e3       	ldi	r25, 0x30	; 48
    5232:	9f 93       	push	r25
    5234:	8f 93       	push	r24
    5236:	1f 92       	push	r1
    5238:	80 e4       	ldi	r24, 0x40	; 64
    523a:	8f 93       	push	r24
    523c:	8b e1       	ldi	r24, 0x1B	; 27
    523e:	95 e2       	ldi	r25, 0x25	; 37
    5240:	9f 93       	push	r25
    5242:	8f 93       	push	r24
    5244:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5248:	81 34       	cpi	r24, 0x41	; 65
    524a:	91 05       	cpc	r25, r1
    524c:	10 f0       	brcs	.+4      	; 0x5252 <printHelp+0x150>
    524e:	80 e4       	ldi	r24, 0x40	; 64
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	40 e0       	ldi	r20, 0x00	; 0
    5254:	68 2f       	mov	r22, r24
    5256:	8b e1       	ldi	r24, 0x1B	; 27
    5258:	95 e2       	ldi	r25, 0x25	; 37
    525a:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BL_1);
    525e:	83 e8       	ldi	r24, 0x83	; 131
    5260:	90 e3       	ldi	r25, 0x30	; 48
    5262:	9f 93       	push	r25
    5264:	8f 93       	push	r24
    5266:	1f 92       	push	r1
    5268:	80 e4       	ldi	r24, 0x40	; 64
    526a:	8f 93       	push	r24
    526c:	8b e1       	ldi	r24, 0x1B	; 27
    526e:	95 e2       	ldi	r25, 0x25	; 37
    5270:	9f 93       	push	r25
    5272:	8f 93       	push	r24
    5274:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5278:	81 34       	cpi	r24, 0x41	; 65
    527a:	91 05       	cpc	r25, r1
    527c:	10 f0       	brcs	.+4      	; 0x5282 <printHelp+0x180>
    527e:	80 e4       	ldi	r24, 0x40	; 64
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	40 e0       	ldi	r20, 0x00	; 0
    5284:	68 2f       	mov	r22, r24
    5286:	8b e1       	ldi	r24, 0x1B	; 27
    5288:	95 e2       	ldi	r25, 0x25	; 37
    528a:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BL_2);
    528e:	81 e6       	ldi	r24, 0x61	; 97
    5290:	90 e3       	ldi	r25, 0x30	; 48
    5292:	9f 93       	push	r25
    5294:	8f 93       	push	r24
    5296:	1f 92       	push	r1
    5298:	80 e4       	ldi	r24, 0x40	; 64
    529a:	8f 93       	push	r24
    529c:	8b e1       	ldi	r24, 0x1B	; 27
    529e:	95 e2       	ldi	r25, 0x25	; 37
    52a0:	9f 93       	push	r25
    52a2:	8f 93       	push	r24
    52a4:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    52a8:	81 34       	cpi	r24, 0x41	; 65
    52aa:	91 05       	cpc	r25, r1
    52ac:	10 f0       	brcs	.+4      	; 0x52b2 <printHelp+0x1b0>
    52ae:	80 e4       	ldi	r24, 0x40	; 64
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	40 e0       	ldi	r20, 0x00	; 0
    52b4:	68 2f       	mov	r22, r24
    52b6:	8b e1       	ldi	r24, 0x1B	; 27
    52b8:	95 e2       	ldi	r25, 0x25	; 37
    52ba:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_CAL_1);
    52be:	8c e3       	ldi	r24, 0x3C	; 60
    52c0:	90 e3       	ldi	r25, 0x30	; 48
    52c2:	9f 93       	push	r25
    52c4:	8f 93       	push	r24
    52c6:	1f 92       	push	r1
    52c8:	80 e4       	ldi	r24, 0x40	; 64
    52ca:	8f 93       	push	r24
    52cc:	8b e1       	ldi	r24, 0x1B	; 27
    52ce:	95 e2       	ldi	r25, 0x25	; 37
    52d0:	9f 93       	push	r25
    52d2:	8f 93       	push	r24
    52d4:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    52d8:	81 34       	cpi	r24, 0x41	; 65
    52da:	91 05       	cpc	r25, r1
    52dc:	10 f0       	brcs	.+4      	; 0x52e2 <printHelp+0x1e0>
    52de:	80 e4       	ldi	r24, 0x40	; 64
    52e0:	90 e0       	ldi	r25, 0x00	; 0
    52e2:	40 e0       	ldi	r20, 0x00	; 0
    52e4:	68 2f       	mov	r22, r24
    52e6:	8b e1       	ldi	r24, 0x1B	; 27
    52e8:	95 e2       	ldi	r25, 0x25	; 37
    52ea:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_CAL_2);
    52ee:	80 e3       	ldi	r24, 0x30	; 48
    52f0:	90 e3       	ldi	r25, 0x30	; 48
    52f2:	9f 93       	push	r25
    52f4:	8f 93       	push	r24
    52f6:	1f 92       	push	r1
    52f8:	80 e4       	ldi	r24, 0x40	; 64
    52fa:	8f 93       	push	r24
    52fc:	8b e1       	ldi	r24, 0x1B	; 27
    52fe:	95 e2       	ldi	r25, 0x25	; 37
    5300:	9f 93       	push	r25
    5302:	8f 93       	push	r24
    5304:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5308:	81 34       	cpi	r24, 0x41	; 65
    530a:	91 05       	cpc	r25, r1
    530c:	10 f0       	brcs	.+4      	; 0x5312 <printHelp+0x210>
    530e:	80 e4       	ldi	r24, 0x40	; 64
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	40 e0       	ldi	r20, 0x00	; 0
    5314:	68 2f       	mov	r22, r24
    5316:	8b e1       	ldi	r24, 0x1B	; 27
    5318:	95 e2       	ldi	r25, 0x25	; 37
    531a:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_CAL_3);
    531e:	8e e0       	ldi	r24, 0x0E	; 14
    5320:	90 e3       	ldi	r25, 0x30	; 48
    5322:	9f 93       	push	r25
    5324:	8f 93       	push	r24
    5326:	1f 92       	push	r1
    5328:	80 e4       	ldi	r24, 0x40	; 64
    532a:	8f 93       	push	r24
    532c:	8b e1       	ldi	r24, 0x1B	; 27
    532e:	95 e2       	ldi	r25, 0x25	; 37
    5330:	9f 93       	push	r25
    5332:	8f 93       	push	r24
    5334:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5338:	2d b7       	in	r18, 0x3d	; 61
    533a:	3e b7       	in	r19, 0x3e	; 62
    533c:	2c 5d       	subi	r18, 0xDC	; 220
    533e:	3f 4f       	sbci	r19, 0xFF	; 255
    5340:	2d bf       	out	0x3d, r18	; 61
    5342:	3e bf       	out	0x3e, r19	; 62
    5344:	81 34       	cpi	r24, 0x41	; 65
    5346:	91 05       	cpc	r25, r1
    5348:	10 f0       	brcs	.+4      	; 0x534e <printHelp+0x24c>
    534a:	80 e4       	ldi	r24, 0x40	; 64
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	40 e0       	ldi	r20, 0x00	; 0
    5350:	68 2f       	mov	r22, r24
    5352:	8b e1       	ldi	r24, 0x1B	; 27
    5354:	95 e2       	ldi	r25, 0x25	; 37
    5356:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DAC_1);
    535a:	85 ef       	ldi	r24, 0xF5	; 245
    535c:	9f e2       	ldi	r25, 0x2F	; 47
    535e:	9f 93       	push	r25
    5360:	8f 93       	push	r24
    5362:	1f 92       	push	r1
    5364:	80 e4       	ldi	r24, 0x40	; 64
    5366:	8f 93       	push	r24
    5368:	8b e1       	ldi	r24, 0x1B	; 27
    536a:	95 e2       	ldi	r25, 0x25	; 37
    536c:	9f 93       	push	r25
    536e:	8f 93       	push	r24
    5370:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5374:	81 34       	cpi	r24, 0x41	; 65
    5376:	91 05       	cpc	r25, r1
    5378:	10 f0       	brcs	.+4      	; 0x537e <printHelp+0x27c>
    537a:	80 e4       	ldi	r24, 0x40	; 64
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	40 e0       	ldi	r20, 0x00	; 0
    5380:	68 2f       	mov	r22, r24
    5382:	8b e1       	ldi	r24, 0x1B	; 27
    5384:	95 e2       	ldi	r25, 0x25	; 37
    5386:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DAC_2);
    538a:	83 ee       	ldi	r24, 0xE3	; 227
    538c:	9f e2       	ldi	r25, 0x2F	; 47
    538e:	9f 93       	push	r25
    5390:	8f 93       	push	r24
    5392:	1f 92       	push	r1
    5394:	80 e4       	ldi	r24, 0x40	; 64
    5396:	8f 93       	push	r24
    5398:	8b e1       	ldi	r24, 0x1B	; 27
    539a:	95 e2       	ldi	r25, 0x25	; 37
    539c:	9f 93       	push	r25
    539e:	8f 93       	push	r24
    53a0:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    53a4:	81 34       	cpi	r24, 0x41	; 65
    53a6:	91 05       	cpc	r25, r1
    53a8:	10 f0       	brcs	.+4      	; 0x53ae <printHelp+0x2ac>
    53aa:	80 e4       	ldi	r24, 0x40	; 64
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	40 e0       	ldi	r20, 0x00	; 0
    53b0:	68 2f       	mov	r22, r24
    53b2:	8b e1       	ldi	r24, 0x1B	; 27
    53b4:	95 e2       	ldi	r25, 0x25	; 37
    53b6:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_1);
    53ba:	81 ec       	ldi	r24, 0xC1	; 193
    53bc:	9f e2       	ldi	r25, 0x2F	; 47
    53be:	9f 93       	push	r25
    53c0:	8f 93       	push	r24
    53c2:	1f 92       	push	r1
    53c4:	80 e4       	ldi	r24, 0x40	; 64
    53c6:	8f 93       	push	r24
    53c8:	8b e1       	ldi	r24, 0x1B	; 27
    53ca:	95 e2       	ldi	r25, 0x25	; 37
    53cc:	9f 93       	push	r25
    53ce:	8f 93       	push	r24
    53d0:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    53d4:	81 34       	cpi	r24, 0x41	; 65
    53d6:	91 05       	cpc	r25, r1
    53d8:	10 f0       	brcs	.+4      	; 0x53de <printHelp+0x2dc>
    53da:	80 e4       	ldi	r24, 0x40	; 64
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	40 e0       	ldi	r20, 0x00	; 0
    53e0:	68 2f       	mov	r22, r24
    53e2:	8b e1       	ldi	r24, 0x1B	; 27
    53e4:	95 e2       	ldi	r25, 0x25	; 37
    53e6:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_2);
    53ea:	83 eb       	ldi	r24, 0xB3	; 179
    53ec:	9f e2       	ldi	r25, 0x2F	; 47
    53ee:	9f 93       	push	r25
    53f0:	8f 93       	push	r24
    53f2:	1f 92       	push	r1
    53f4:	80 e4       	ldi	r24, 0x40	; 64
    53f6:	8f 93       	push	r24
    53f8:	8b e1       	ldi	r24, 0x1B	; 27
    53fa:	95 e2       	ldi	r25, 0x25	; 37
    53fc:	9f 93       	push	r25
    53fe:	8f 93       	push	r24
    5400:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5404:	81 34       	cpi	r24, 0x41	; 65
    5406:	91 05       	cpc	r25, r1
    5408:	10 f0       	brcs	.+4      	; 0x540e <printHelp+0x30c>
    540a:	80 e4       	ldi	r24, 0x40	; 64
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	40 e0       	ldi	r20, 0x00	; 0
    5410:	68 2f       	mov	r22, r24
    5412:	8b e1       	ldi	r24, 0x1B	; 27
    5414:	95 e2       	ldi	r25, 0x25	; 37
    5416:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_3);
    541a:	8e e8       	ldi	r24, 0x8E	; 142
    541c:	9f e2       	ldi	r25, 0x2F	; 47
    541e:	9f 93       	push	r25
    5420:	8f 93       	push	r24
    5422:	1f 92       	push	r1
    5424:	80 e4       	ldi	r24, 0x40	; 64
    5426:	8f 93       	push	r24
    5428:	8b e1       	ldi	r24, 0x1B	; 27
    542a:	95 e2       	ldi	r25, 0x25	; 37
    542c:	9f 93       	push	r25
    542e:	8f 93       	push	r24
    5430:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5434:	81 34       	cpi	r24, 0x41	; 65
    5436:	91 05       	cpc	r25, r1
    5438:	10 f0       	brcs	.+4      	; 0x543e <printHelp+0x33c>
    543a:	80 e4       	ldi	r24, 0x40	; 64
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	40 e0       	ldi	r20, 0x00	; 0
    5440:	68 2f       	mov	r22, r24
    5442:	8b e1       	ldi	r24, 0x1B	; 27
    5444:	95 e2       	ldi	r25, 0x25	; 37
    5446:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_EB_1);
    544a:	8e e6       	ldi	r24, 0x6E	; 110
    544c:	9f e2       	ldi	r25, 0x2F	; 47
    544e:	9f 93       	push	r25
    5450:	8f 93       	push	r24
    5452:	1f 92       	push	r1
    5454:	80 e4       	ldi	r24, 0x40	; 64
    5456:	8f 93       	push	r24
    5458:	8b e1       	ldi	r24, 0x1B	; 27
    545a:	95 e2       	ldi	r25, 0x25	; 37
    545c:	9f 93       	push	r25
    545e:	8f 93       	push	r24
    5460:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5464:	2d b7       	in	r18, 0x3d	; 61
    5466:	3e b7       	in	r19, 0x3e	; 62
    5468:	2c 5d       	subi	r18, 0xDC	; 220
    546a:	3f 4f       	sbci	r19, 0xFF	; 255
    546c:	2d bf       	out	0x3d, r18	; 61
    546e:	3e bf       	out	0x3e, r19	; 62
    5470:	81 34       	cpi	r24, 0x41	; 65
    5472:	91 05       	cpc	r25, r1
    5474:	10 f0       	brcs	.+4      	; 0x547a <printHelp+0x378>
    5476:	80 e4       	ldi	r24, 0x40	; 64
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	40 e0       	ldi	r20, 0x00	; 0
    547c:	68 2f       	mov	r22, r24
    547e:	8b e1       	ldi	r24, 0x1B	; 27
    5480:	95 e2       	ldi	r25, 0x25	; 37
    5482:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HELP_1);
    5486:	81 e5       	ldi	r24, 0x51	; 81
    5488:	9f e2       	ldi	r25, 0x2F	; 47
    548a:	9f 93       	push	r25
    548c:	8f 93       	push	r24
    548e:	1f 92       	push	r1
    5490:	80 e4       	ldi	r24, 0x40	; 64
    5492:	8f 93       	push	r24
    5494:	8b e1       	ldi	r24, 0x1B	; 27
    5496:	95 e2       	ldi	r25, 0x25	; 37
    5498:	9f 93       	push	r25
    549a:	8f 93       	push	r24
    549c:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    54a0:	81 34       	cpi	r24, 0x41	; 65
    54a2:	91 05       	cpc	r25, r1
    54a4:	10 f0       	brcs	.+4      	; 0x54aa <printHelp+0x3a8>
    54a6:	80 e4       	ldi	r24, 0x40	; 64
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	40 e0       	ldi	r20, 0x00	; 0
    54ac:	68 2f       	mov	r22, r24
    54ae:	8b e1       	ldi	r24, 0x1B	; 27
    54b0:	95 e2       	ldi	r25, 0x25	; 37
    54b2:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HELP_2);
    54b6:	82 e3       	ldi	r24, 0x32	; 50
    54b8:	9f e2       	ldi	r25, 0x2F	; 47
    54ba:	9f 93       	push	r25
    54bc:	8f 93       	push	r24
    54be:	1f 92       	push	r1
    54c0:	80 e4       	ldi	r24, 0x40	; 64
    54c2:	8f 93       	push	r24
    54c4:	8b e1       	ldi	r24, 0x1B	; 27
    54c6:	95 e2       	ldi	r25, 0x25	; 37
    54c8:	9f 93       	push	r25
    54ca:	8f 93       	push	r24
    54cc:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    54d0:	81 34       	cpi	r24, 0x41	; 65
    54d2:	91 05       	cpc	r25, r1
    54d4:	10 f0       	brcs	.+4      	; 0x54da <printHelp+0x3d8>
    54d6:	80 e4       	ldi	r24, 0x40	; 64
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	40 e0       	ldi	r20, 0x00	; 0
    54dc:	68 2f       	mov	r22, r24
    54de:	8b e1       	ldi	r24, 0x1B	; 27
    54e0:	95 e2       	ldi	r25, 0x25	; 37
    54e2:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_INFO_1);
    54e6:	83 e1       	ldi	r24, 0x13	; 19
    54e8:	9f e2       	ldi	r25, 0x2F	; 47
    54ea:	9f 93       	push	r25
    54ec:	8f 93       	push	r24
    54ee:	1f 92       	push	r1
    54f0:	80 e4       	ldi	r24, 0x40	; 64
    54f2:	8f 93       	push	r24
    54f4:	8b e1       	ldi	r24, 0x1B	; 27
    54f6:	95 e2       	ldi	r25, 0x25	; 37
    54f8:	9f 93       	push	r25
    54fa:	8f 93       	push	r24
    54fc:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5500:	81 34       	cpi	r24, 0x41	; 65
    5502:	91 05       	cpc	r25, r1
    5504:	10 f0       	brcs	.+4      	; 0x550a <printHelp+0x408>
    5506:	80 e4       	ldi	r24, 0x40	; 64
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	40 e0       	ldi	r20, 0x00	; 0
    550c:	68 2f       	mov	r22, r24
    550e:	8b e1       	ldi	r24, 0x1B	; 27
    5510:	95 e2       	ldi	r25, 0x25	; 37
    5512:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_INFO_2);
    5516:	84 e0       	ldi	r24, 0x04	; 4
    5518:	9f e2       	ldi	r25, 0x2F	; 47
    551a:	9f 93       	push	r25
    551c:	8f 93       	push	r24
    551e:	1f 92       	push	r1
    5520:	80 e4       	ldi	r24, 0x40	; 64
    5522:	8f 93       	push	r24
    5524:	8b e1       	ldi	r24, 0x1B	; 27
    5526:	95 e2       	ldi	r25, 0x25	; 37
    5528:	9f 93       	push	r25
    552a:	8f 93       	push	r24
    552c:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5530:	81 34       	cpi	r24, 0x41	; 65
    5532:	91 05       	cpc	r25, r1
    5534:	10 f0       	brcs	.+4      	; 0x553a <printHelp+0x438>
    5536:	80 e4       	ldi	r24, 0x40	; 64
    5538:	90 e0       	ldi	r25, 0x00	; 0
    553a:	40 e0       	ldi	r20, 0x00	; 0
    553c:	68 2f       	mov	r22, r24
    553e:	8b e1       	ldi	r24, 0x1B	; 27
    5540:	95 e2       	ldi	r25, 0x25	; 37
    5542:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_KB_1);
    5546:	86 ee       	ldi	r24, 0xE6	; 230
    5548:	9e e2       	ldi	r25, 0x2E	; 46
    554a:	9f 93       	push	r25
    554c:	8f 93       	push	r24
    554e:	1f 92       	push	r1
    5550:	80 e4       	ldi	r24, 0x40	; 64
    5552:	8f 93       	push	r24
    5554:	8b e1       	ldi	r24, 0x1B	; 27
    5556:	95 e2       	ldi	r25, 0x25	; 37
    5558:	9f 93       	push	r25
    555a:	8f 93       	push	r24
    555c:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5560:	81 34       	cpi	r24, 0x41	; 65
    5562:	91 05       	cpc	r25, r1
    5564:	10 f0       	brcs	.+4      	; 0x556a <printHelp+0x468>
    5566:	80 e4       	ldi	r24, 0x40	; 64
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	40 e0       	ldi	r20, 0x00	; 0
    556c:	68 2f       	mov	r22, r24
    556e:	8b e1       	ldi	r24, 0x1B	; 27
    5570:	95 e2       	ldi	r25, 0x25	; 37
    5572:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_PT_1);
    5576:	8d ec       	ldi	r24, 0xCD	; 205
    5578:	9e e2       	ldi	r25, 0x2E	; 46
    557a:	9f 93       	push	r25
    557c:	8f 93       	push	r24
    557e:	1f 92       	push	r1
    5580:	80 e4       	ldi	r24, 0x40	; 64
    5582:	8f 93       	push	r24
    5584:	8b e1       	ldi	r24, 0x1B	; 27
    5586:	95 e2       	ldi	r25, 0x25	; 37
    5588:	9f 93       	push	r25
    558a:	8f 93       	push	r24
    558c:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5590:	2d b7       	in	r18, 0x3d	; 61
    5592:	3e b7       	in	r19, 0x3e	; 62
    5594:	2c 5d       	subi	r18, 0xDC	; 220
    5596:	3f 4f       	sbci	r19, 0xFF	; 255
    5598:	2d bf       	out	0x3d, r18	; 61
    559a:	3e bf       	out	0x3e, r19	; 62
    559c:	81 34       	cpi	r24, 0x41	; 65
    559e:	91 05       	cpc	r25, r1
    55a0:	10 f0       	brcs	.+4      	; 0x55a6 <printHelp+0x4a4>
    55a2:	80 e4       	ldi	r24, 0x40	; 64
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	40 e0       	ldi	r20, 0x00	; 0
    55a8:	68 2f       	mov	r22, r24
    55aa:	8b e1       	ldi	r24, 0x1B	; 27
    55ac:	95 e2       	ldi	r25, 0x25	; 37
    55ae:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_PT_2);
    55b2:	8e ea       	ldi	r24, 0xAE	; 174
    55b4:	9e e2       	ldi	r25, 0x2E	; 46
    55b6:	9f 93       	push	r25
    55b8:	8f 93       	push	r24
    55ba:	1f 92       	push	r1
    55bc:	80 e4       	ldi	r24, 0x40	; 64
    55be:	8f 93       	push	r24
    55c0:	8b e1       	ldi	r24, 0x1B	; 27
    55c2:	95 e2       	ldi	r25, 0x25	; 37
    55c4:	9f 93       	push	r25
    55c6:	8f 93       	push	r24
    55c8:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    55cc:	81 34       	cpi	r24, 0x41	; 65
    55ce:	91 05       	cpc	r25, r1
    55d0:	10 f0       	brcs	.+4      	; 0x55d6 <printHelp+0x4d4>
    55d2:	80 e4       	ldi	r24, 0x40	; 64
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	40 e0       	ldi	r20, 0x00	; 0
    55d8:	68 2f       	mov	r22, r24
    55da:	8b e1       	ldi	r24, 0x1B	; 27
    55dc:	95 e2       	ldi	r25, 0x25	; 37
    55de:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_RESET_1);
    55e2:	86 e9       	ldi	r24, 0x96	; 150
    55e4:	9e e2       	ldi	r25, 0x2E	; 46
    55e6:	9f 93       	push	r25
    55e8:	8f 93       	push	r24
    55ea:	1f 92       	push	r1
    55ec:	80 e4       	ldi	r24, 0x40	; 64
    55ee:	8f 93       	push	r24
    55f0:	8b e1       	ldi	r24, 0x1B	; 27
    55f2:	95 e2       	ldi	r25, 0x25	; 37
    55f4:	9f 93       	push	r25
    55f6:	8f 93       	push	r24
    55f8:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    55fc:	81 34       	cpi	r24, 0x41	; 65
    55fe:	91 05       	cpc	r25, r1
    5600:	10 f0       	brcs	.+4      	; 0x5606 <printHelp+0x504>
    5602:	80 e4       	ldi	r24, 0x40	; 64
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	40 e0       	ldi	r20, 0x00	; 0
    5608:	68 2f       	mov	r22, r24
    560a:	8b e1       	ldi	r24, 0x1B	; 27
    560c:	95 e2       	ldi	r25, 0x25	; 37
    560e:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_XO_1);
    5612:	82 e7       	ldi	r24, 0x72	; 114
    5614:	9e e2       	ldi	r25, 0x2E	; 46
    5616:	9f 93       	push	r25
    5618:	8f 93       	push	r24
    561a:	1f 92       	push	r1
    561c:	80 e4       	ldi	r24, 0x40	; 64
    561e:	8f 93       	push	r24
    5620:	8b e1       	ldi	r24, 0x1B	; 27
    5622:	95 e2       	ldi	r25, 0x25	; 37
    5624:	9f 93       	push	r25
    5626:	8f 93       	push	r24
    5628:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    562c:	81 34       	cpi	r24, 0x41	; 65
    562e:	91 05       	cpc	r25, r1
    5630:	10 f0       	brcs	.+4      	; 0x5636 <printHelp+0x534>
    5632:	80 e4       	ldi	r24, 0x40	; 64
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	40 e0       	ldi	r20, 0x00	; 0
    5638:	68 2f       	mov	r22, r24
    563a:	8b e1       	ldi	r24, 0x1B	; 27
    563c:	95 e2       	ldi	r25, 0x25	; 37
    563e:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_XO_2);
    5642:	85 e6       	ldi	r24, 0x65	; 101
    5644:	9e e2       	ldi	r25, 0x2E	; 46
    5646:	9f 93       	push	r25
    5648:	8f 93       	push	r24
    564a:	1f 92       	push	r1
    564c:	80 e4       	ldi	r24, 0x40	; 64
    564e:	8f 93       	push	r24
    5650:	8b e1       	ldi	r24, 0x1B	; 27
    5652:	95 e2       	ldi	r25, 0x25	; 37
    5654:	9f 93       	push	r25
    5656:	8f 93       	push	r24
    5658:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    565c:	81 34       	cpi	r24, 0x41	; 65
    565e:	91 05       	cpc	r25, r1
    5660:	10 f0       	brcs	.+4      	; 0x5666 <printHelp+0x564>
    5662:	80 e4       	ldi	r24, 0x40	; 64
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	40 e0       	ldi	r20, 0x00	; 0
    5668:	68 2f       	mov	r22, r24
    566a:	8b e1       	ldi	r24, 0x1B	; 27
    566c:	95 e2       	ldi	r25, 0x25	; 37
    566e:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_NewLine);
    5672:	82 e6       	ldi	r24, 0x62	; 98
    5674:	9e e2       	ldi	r25, 0x2E	; 46
    5676:	9f 93       	push	r25
    5678:	8f 93       	push	r24
    567a:	1f 92       	push	r1
    567c:	80 e4       	ldi	r24, 0x40	; 64
    567e:	8f 93       	push	r24
    5680:	8b e1       	ldi	r24, 0x1B	; 27
    5682:	95 e2       	ldi	r25, 0x25	; 37
    5684:	9f 93       	push	r25
    5686:	8f 93       	push	r24
    5688:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    568c:	81 34       	cpi	r24, 0x41	; 65
    568e:	91 05       	cpc	r25, r1
    5690:	10 f0       	brcs	.+4      	; 0x5696 <printHelp+0x594>
    5692:	80 e4       	ldi	r24, 0x40	; 64
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	40 e0       	ldi	r20, 0x00	; 0
    5698:	68 2f       	mov	r22, r24
    569a:	8b e1       	ldi	r24, 0x1B	; 27
    569c:	95 e2       	ldi	r25, 0x25	; 37
    569e:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	if (!s_again) {
    56a2:	8d b7       	in	r24, 0x3d	; 61
    56a4:	9e b7       	in	r25, 0x3e	; 62
    56a6:	4e 96       	adiw	r24, 0x1e	; 30
    56a8:	8d bf       	out	0x3d, r24	; 61
    56aa:	9e bf       	out	0x3e, r25	; 62
    56ac:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <s_again.7761>
    56b0:	81 11       	cpse	r24, r1
    56b2:	21 c0       	rjmp	.+66     	; 0x56f6 <printHelp+0x5f4>
		s_again = true;
    56b4:	81 e0       	ldi	r24, 0x01	; 1
    56b6:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <s_again.7761>
		len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_CmdLine);
    56ba:	8d e5       	ldi	r24, 0x5D	; 93
    56bc:	9e e2       	ldi	r25, 0x2E	; 46
    56be:	9f 93       	push	r25
    56c0:	8f 93       	push	r24
    56c2:	1f 92       	push	r1
    56c4:	80 e4       	ldi	r24, 0x40	; 64
    56c6:	8f 93       	push	r24
    56c8:	8b e1       	ldi	r24, 0x1B	; 27
    56ca:	95 e2       	ldi	r25, 0x25	; 37
    56cc:	9f 93       	push	r25
    56ce:	8f 93       	push	r24
    56d0:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
		udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    56d4:	81 34       	cpi	r24, 0x41	; 65
    56d6:	91 05       	cpc	r25, r1
    56d8:	10 f0       	brcs	.+4      	; 0x56de <printHelp+0x5dc>
    56da:	80 e4       	ldi	r24, 0x40	; 64
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	40 e0       	ldi	r20, 0x00	; 0
    56e0:	68 2f       	mov	r22, r24
    56e2:	8b e1       	ldi	r24, 0x1B	; 27
    56e4:	95 e2       	ldi	r25, 0x25	; 37
    56e6:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    56ea:	0f 90       	pop	r0
    56ec:	0f 90       	pop	r0
    56ee:	0f 90       	pop	r0
    56f0:	0f 90       	pop	r0
    56f2:	0f 90       	pop	r0
    56f4:	0f 90       	pop	r0
    56f6:	08 95       	ret

000056f8 <interpreter_doProcess>:
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
}


void interpreter_doProcess(char rx_buf[], iram_size_t rx_len)
{
    56f8:	df 92       	push	r13
    56fa:	ef 92       	push	r14
    56fc:	ff 92       	push	r15
    56fe:	0f 93       	push	r16
    5700:	1f 93       	push	r17
    5702:	cf 93       	push	r28
    5704:	df 93       	push	r29
    5706:	cd b7       	in	r28, 0x3d	; 61
    5708:	de b7       	in	r29, 0x3e	; 62
    570a:	2c 97       	sbiw	r28, 0x0c	; 12
    570c:	cd bf       	out	0x3d, r28	; 61
    570e:	de bf       	out	0x3e, r29	; 62
    5710:	7c 01       	movw	r14, r24
    5712:	8b 01       	movw	r16, r22
	/* Sanity checks */
	if (!rx_buf || !rx_len || (rx_len >= (C_RX_CMDLINE_BUF_SIZE - 1))) {
    5714:	89 2b       	or	r24, r25
    5716:	09 f4       	brne	.+2      	; 0x571a <interpreter_doProcess+0x22>
    5718:	72 c2       	rjmp	.+1252   	; 0x5bfe <interpreter_doProcess+0x506>
    571a:	cb 01       	movw	r24, r22
    571c:	01 97       	sbiw	r24, 0x01	; 1
    571e:	8e 3f       	cpi	r24, 0xFE	; 254
    5720:	91 05       	cpc	r25, r1
    5722:	08 f0       	brcs	.+2      	; 0x5726 <interpreter_doProcess+0x2e>
    5724:	6c c2       	rjmp	.+1240   	; 0x5bfe <interpreter_doProcess+0x506>
		return;
	}

	/* Look for line termination */
	char* pos = memchr(rx_buf, '\r', rx_len);
    5726:	ab 01       	movw	r20, r22
    5728:	6d e0       	ldi	r22, 0x0D	; 13
    572a:	70 e0       	ldi	r23, 0x00	; 0
    572c:	c7 01       	movw	r24, r14
    572e:	0e 94 de 88 	call	0x111bc	; 0x111bc <memchr>

	/* Clipping */
	if ((s_rx_cmdLine_idx + rx_len) >= C_RX_CMDLINE_BUF_SIZE) {
    5732:	d0 90 b1 21 	lds	r13, 0x21B1	; 0x8021b1 <s_rx_cmdLine_idx>
    5736:	2d 2d       	mov	r18, r13
    5738:	30 e0       	ldi	r19, 0x00	; 0
    573a:	a8 01       	movw	r20, r16
    573c:	42 0f       	add	r20, r18
    573e:	53 1f       	adc	r21, r19
    5740:	4f 3f       	cpi	r20, 0xFF	; 255
    5742:	51 05       	cpc	r21, r1
    5744:	51 f0       	breq	.+20     	; 0x575a <interpreter_doProcess+0x62>
    5746:	48 f0       	brcs	.+18     	; 0x575a <interpreter_doProcess+0x62>
		/* Over sized - clip incoming data on the buffer size limit */
		rx_len = (C_RX_CMDLINE_BUF_SIZE - 1) - s_rx_cmdLine_idx;
    5748:	0f ef       	ldi	r16, 0xFF	; 255
    574a:	10 e0       	ldi	r17, 0x00	; 0
    574c:	0d 19       	sub	r16, r13
    574e:	11 09       	sbc	r17, r1

		/* Adjust pos if the line ending exists */
		if (pos) {
    5750:	89 2b       	or	r24, r25
    5752:	f9 f0       	breq	.+62     	; 0x5792 <interpreter_doProcess+0x9a>
			pos = rx_buf + rx_len;
    5754:	c7 01       	movw	r24, r14
    5756:	80 0f       	add	r24, r16
    5758:	91 1f       	adc	r25, r17
		}
	}

	/* Add new chunk to buffer */
	uint8_t pos_len = pos ?  ((pos - rx_buf) + 1) : rx_len;
    575a:	00 97       	sbiw	r24, 0x00	; 0
    575c:	d1 f0       	breq	.+52     	; 0x5792 <interpreter_doProcess+0x9a>
    575e:	8e 19       	sub	r24, r14
    5760:	9f 09       	sbc	r25, r15
    5762:	11 e0       	ldi	r17, 0x01	; 1
    5764:	18 0f       	add	r17, r24
	memcpy(s_rx_cmdLine_buf + s_rx_cmdLine_idx, rx_buf, pos_len);
    5766:	41 2f       	mov	r20, r17
    5768:	50 e0       	ldi	r21, 0x00	; 0
    576a:	b7 01       	movw	r22, r14
    576c:	c9 01       	movw	r24, r18
    576e:	8e 54       	subi	r24, 0x4E	; 78
    5770:	9e 4d       	sbci	r25, 0xDE	; 222
    5772:	0e 94 eb 88 	call	0x111d6	; 0x111d6 <memcpy>
	s_rx_cmdLine_idx += pos_len;
    5776:	1d 0d       	add	r17, r13
    5778:	10 93 b1 21 	sts	0x21B1, r17	; 0x8021b1 <s_rx_cmdLine_idx>

static void executeCmdLine(char* cmdLine_buf, uint8_t cmdLine_len)
{
	/* Process command */
	{
		if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_adc, sizeof(PM_IP_CMD_adc) - 1)) {
    577c:	44 e0       	ldi	r20, 0x04	; 4
    577e:	50 e0       	ldi	r21, 0x00	; 0
    5780:	68 e5       	ldi	r22, 0x58	; 88
    5782:	7e e2       	ldi	r23, 0x2E	; 46
    5784:	82 eb       	ldi	r24, 0xB2	; 178
    5786:	91 e2       	ldi	r25, 0x21	; 33
    5788:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    578c:	89 2b       	or	r24, r25
    578e:	51 f5       	brne	.+84     	; 0x57e4 <interpreter_doProcess+0xec>
    5790:	0c c0       	rjmp	.+24     	; 0x57aa <interpreter_doProcess+0xb2>
		}
	}

	/* Add new chunk to buffer */
	uint8_t pos_len = pos ?  ((pos - rx_buf) + 1) : rx_len;
	memcpy(s_rx_cmdLine_buf + s_rx_cmdLine_idx, rx_buf, pos_len);
    5792:	a8 01       	movw	r20, r16
    5794:	55 27       	eor	r21, r21
    5796:	b7 01       	movw	r22, r14
    5798:	c9 01       	movw	r24, r18
    579a:	8e 54       	subi	r24, 0x4E	; 78
    579c:	9e 4d       	sbci	r25, 0xDE	; 222
    579e:	0e 94 eb 88 	call	0x111d6	; 0x111d6 <memcpy>
	s_rx_cmdLine_idx += pos_len;
    57a2:	0d 0d       	add	r16, r13
    57a4:	00 93 b1 21 	sts	0x21B1, r16	; 0x8021b1 <s_rx_cmdLine_idx>
    57a8:	2a c2       	rjmp	.+1108   	; 0x5bfe <interpreter_doProcess+0x506>
static void executeCmdLine(char* cmdLine_buf, uint8_t cmdLine_len)
{
	/* Process command */
	{
		if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_adc, sizeof(PM_IP_CMD_adc) - 1)) {
			int val[1] = { 0 };
    57aa:	19 82       	std	Y+1, r1	; 0x01
    57ac:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_adc) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    57ae:	ce 01       	movw	r24, r28
    57b0:	01 96       	adiw	r24, 0x01	; 1
    57b2:	7c 01       	movw	r14, r24
    57b4:	00 e0       	ldi	r16, 0x00	; 0
    57b6:	10 e0       	ldi	r17, 0x00	; 0
    57b8:	20 e0       	ldi	r18, 0x00	; 0
    57ba:	30 e0       	ldi	r19, 0x00	; 0
    57bc:	43 e0       	ldi	r20, 0x03	; 3
    57be:	50 e0       	ldi	r21, 0x00	; 0
    57c0:	60 e0       	ldi	r22, 0x00	; 0
    57c2:	70 e0       	ldi	r23, 0x00	; 0
    57c4:	86 eb       	ldi	r24, 0xB6	; 182
    57c6:	91 e2       	ldi	r25, 0x21	; 33
    57c8:	0e 94 d9 67 	call	0xcfb2	; 0xcfb2 <myStringToVar>
    57cc:	89 2b       	or	r24, r25
    57ce:	09 f4       	brne	.+2      	; 0x57d2 <interpreter_doProcess+0xda>
    57d0:	f6 c1       	rjmp	.+1004   	; 0x5bbe <interpreter_doProcess+0x4c6>
				adc_app_enable(val[0]);
    57d2:	81 e0       	ldi	r24, 0x01	; 1
    57d4:	29 81       	ldd	r18, Y+1	; 0x01
    57d6:	3a 81       	ldd	r19, Y+2	; 0x02
    57d8:	23 2b       	or	r18, r19
    57da:	09 f4       	brne	.+2      	; 0x57de <interpreter_doProcess+0xe6>
    57dc:	80 e0       	ldi	r24, 0x00	; 0
    57de:	0e 94 79 68 	call	0xd0f2	; 0xd0f2 <adc_app_enable>
    57e2:	ed c1       	rjmp	.+986    	; 0x5bbe <interpreter_doProcess+0x4c6>
			}

		} else if ((!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_AT,		sizeof(PM_IP_CMD_AT) - 1))		||
    57e4:	42 e0       	ldi	r20, 0x02	; 2
    57e6:	50 e0       	ldi	r21, 0x00	; 0
    57e8:	65 e5       	ldi	r22, 0x55	; 85
    57ea:	7e e2       	ldi	r23, 0x2E	; 46
    57ec:	82 eb       	ldi	r24, 0xB2	; 178
    57ee:	91 e2       	ldi	r25, 0x21	; 33
    57f0:	0e 94 93 88 	call	0x11126	; 0x11126 <strncasecmp_P>
    57f4:	89 2b       	or	r24, r25
    57f6:	51 f0       	breq	.+20     	; 0x580c <interpreter_doProcess+0x114>
				   (!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_A_slash,	sizeof(PM_IP_CMD_A_slash) - 1))) {
    57f8:	42 e0       	ldi	r20, 0x02	; 2
    57fa:	50 e0       	ldi	r21, 0x00	; 0
    57fc:	62 e5       	ldi	r22, 0x52	; 82
    57fe:	7e e2       	ldi	r23, 0x2E	; 46
    5800:	82 eb       	ldi	r24, 0xB2	; 178
    5802:	91 e2       	ldi	r25, 0x21	; 33
    5804:	0e 94 93 88 	call	0x11126	; 0x11126 <strncasecmp_P>
			int val[1] = { 0 };
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_adc) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
				adc_app_enable(val[0]);
			}

		} else if ((!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_AT,		sizeof(PM_IP_CMD_AT) - 1))		||
    5808:	89 2b       	or	r24, r25
    580a:	31 f4       	brne	.+12     	; 0x5818 <interpreter_doProcess+0x120>
				   (!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_A_slash,	sizeof(PM_IP_CMD_A_slash) - 1))) {
				serial_sim808_send(cmdLine_buf, cmdLine_len);
    580c:	61 2f       	mov	r22, r17
    580e:	82 eb       	ldi	r24, 0xB2	; 178
    5810:	91 e2       	ldi	r25, 0x21	; 33
    5812:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <serial_sim808_send>
    5816:	d3 c1       	rjmp	.+934    	; 0x5bbe <interpreter_doProcess+0x4c6>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_bias, sizeof(PM_IP_CMD_bias) - 1)) {
    5818:	45 e0       	ldi	r20, 0x05	; 5
    581a:	50 e0       	ldi	r21, 0x00	; 0
    581c:	6c e4       	ldi	r22, 0x4C	; 76
    581e:	7e e2       	ldi	r23, 0x2E	; 46
    5820:	82 eb       	ldi	r24, 0xB2	; 178
    5822:	91 e2       	ldi	r25, 0x21	; 33
    5824:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    5828:	89 2b       	or	r24, r25
    582a:	c1 f4       	brne	.+48     	; 0x585c <interpreter_doProcess+0x164>
			int val[1] = { 0 };
    582c:	19 82       	std	Y+1, r1	; 0x01
    582e:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_bias) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5830:	ce 01       	movw	r24, r28
    5832:	01 96       	adiw	r24, 0x01	; 1
    5834:	7c 01       	movw	r14, r24
    5836:	00 e0       	ldi	r16, 0x00	; 0
    5838:	10 e0       	ldi	r17, 0x00	; 0
    583a:	20 e0       	ldi	r18, 0x00	; 0
    583c:	30 e0       	ldi	r19, 0x00	; 0
    583e:	43 e0       	ldi	r20, 0x03	; 3
    5840:	50 e0       	ldi	r21, 0x00	; 0
    5842:	60 e0       	ldi	r22, 0x00	; 0
    5844:	70 e0       	ldi	r23, 0x00	; 0
    5846:	87 eb       	ldi	r24, 0xB7	; 183
    5848:	91 e2       	ldi	r25, 0x21	; 33
    584a:	0e 94 d9 67 	call	0xcfb2	; 0xcfb2 <myStringToVar>
    584e:	89 2b       	or	r24, r25
    5850:	09 f4       	brne	.+2      	; 0x5854 <interpreter_doProcess+0x15c>
    5852:	b5 c1       	rjmp	.+874    	; 0x5bbe <interpreter_doProcess+0x4c6>
				bias_update(val[0]);
    5854:	89 81       	ldd	r24, Y+1	; 0x01
    5856:	0e 94 b9 68 	call	0xd172	; 0xd172 <bias_update>
    585a:	b1 c1       	rjmp	.+866    	; 0x5bbe <interpreter_doProcess+0x4c6>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_bl, sizeof(PM_IP_CMD_bl) - 1)) {
    585c:	43 e0       	ldi	r20, 0x03	; 3
    585e:	50 e0       	ldi	r21, 0x00	; 0
    5860:	68 e4       	ldi	r22, 0x48	; 72
    5862:	7e e2       	ldi	r23, 0x2E	; 46
    5864:	82 eb       	ldi	r24, 0xB2	; 178
    5866:	91 e2       	ldi	r25, 0x21	; 33
    5868:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    586c:	89 2b       	or	r24, r25
    586e:	c9 f4       	brne	.+50     	; 0x58a2 <interpreter_doProcess+0x1aa>
			int val[1] = { 0 };
    5870:	19 82       	std	Y+1, r1	; 0x01
    5872:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_bl) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5874:	ce 01       	movw	r24, r28
    5876:	01 96       	adiw	r24, 0x01	; 1
    5878:	7c 01       	movw	r14, r24
    587a:	00 e0       	ldi	r16, 0x00	; 0
    587c:	10 e0       	ldi	r17, 0x00	; 0
    587e:	20 e0       	ldi	r18, 0x00	; 0
    5880:	30 e0       	ldi	r19, 0x00	; 0
    5882:	43 e0       	ldi	r20, 0x03	; 3
    5884:	50 e0       	ldi	r21, 0x00	; 0
    5886:	60 e0       	ldi	r22, 0x00	; 0
    5888:	70 e0       	ldi	r23, 0x00	; 0
    588a:	85 eb       	ldi	r24, 0xB5	; 181
    588c:	91 e2       	ldi	r25, 0x21	; 33
    588e:	0e 94 d9 67 	call	0xcfb2	; 0xcfb2 <myStringToVar>
    5892:	89 2b       	or	r24, r25
    5894:	09 f4       	brne	.+2      	; 0x5898 <interpreter_doProcess+0x1a0>
    5896:	93 c1       	rjmp	.+806    	; 0x5bbe <interpreter_doProcess+0x4c6>
				backlight_mode_pwm(val[0]);
    5898:	89 81       	ldd	r24, Y+1	; 0x01
    589a:	9a 81       	ldd	r25, Y+2	; 0x02
    589c:	0e 94 9c 68 	call	0xd138	; 0xd138 <backlight_mode_pwm>
    58a0:	8e c1       	rjmp	.+796    	; 0x5bbe <interpreter_doProcess+0x4c6>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_cal_defaults, sizeof(PM_IP_CMD_cal_defaults) - 1)) {
    58a2:	4c e0       	ldi	r20, 0x0C	; 12
    58a4:	50 e0       	ldi	r21, 0x00	; 0
    58a6:	6b e3       	ldi	r22, 0x3B	; 59
    58a8:	7e e2       	ldi	r23, 0x2E	; 46
    58aa:	82 eb       	ldi	r24, 0xB2	; 178
    58ac:	91 e2       	ldi	r25, 0x21	; 33
    58ae:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    58b2:	89 2b       	or	r24, r25
    58b4:	21 f4       	brne	.+8      	; 0x58be <interpreter_doProcess+0x1c6>
			calibration_mode(CALIBRATION_MODE_ENUM__DEFAULTS);
    58b6:	80 e0       	ldi	r24, 0x00	; 0
    58b8:	0e 94 bf 68 	call	0xd17e	; 0xd17e <calibration_mode>
    58bc:	80 c1       	rjmp	.+768    	; 0x5bbe <interpreter_doProcess+0x4c6>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_cal_gyro, sizeof(PM_IP_CMD_cal_gyro) - 1)) {
    58be:	48 e0       	ldi	r20, 0x08	; 8
    58c0:	50 e0       	ldi	r21, 0x00	; 0
    58c2:	62 e3       	ldi	r22, 0x32	; 50
    58c4:	7e e2       	ldi	r23, 0x2E	; 46
    58c6:	82 eb       	ldi	r24, 0xB2	; 178
    58c8:	91 e2       	ldi	r25, 0x21	; 33
    58ca:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    58ce:	89 2b       	or	r24, r25
    58d0:	21 f4       	brne	.+8      	; 0x58da <interpreter_doProcess+0x1e2>
			calibration_mode(CALIBRATION_MODE_ENUM__GYRO);
    58d2:	81 e0       	ldi	r24, 0x01	; 1
    58d4:	0e 94 bf 68 	call	0xd17e	; 0xd17e <calibration_mode>
    58d8:	72 c1       	rjmp	.+740    	; 0x5bbe <interpreter_doProcess+0x4c6>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_dac, sizeof(PM_IP_CMD_dac) - 1)) {
    58da:	44 e0       	ldi	r20, 0x04	; 4
    58dc:	50 e0       	ldi	r21, 0x00	; 0
    58de:	6d e2       	ldi	r22, 0x2D	; 45
    58e0:	7e e2       	ldi	r23, 0x2E	; 46
    58e2:	82 eb       	ldi	r24, 0xB2	; 178
    58e4:	91 e2       	ldi	r25, 0x21	; 33
    58e6:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    58ea:	89 2b       	or	r24, r25
    58ec:	e9 f4       	brne	.+58     	; 0x5928 <interpreter_doProcess+0x230>
			int val[1] = { 0 };
    58ee:	19 82       	std	Y+1, r1	; 0x01
    58f0:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_dac) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    58f2:	ce 01       	movw	r24, r28
    58f4:	01 96       	adiw	r24, 0x01	; 1
    58f6:	7c 01       	movw	r14, r24
    58f8:	00 e0       	ldi	r16, 0x00	; 0
    58fa:	10 e0       	ldi	r17, 0x00	; 0
    58fc:	20 e0       	ldi	r18, 0x00	; 0
    58fe:	30 e0       	ldi	r19, 0x00	; 0
    5900:	43 e0       	ldi	r20, 0x03	; 3
    5902:	50 e0       	ldi	r21, 0x00	; 0
    5904:	60 e0       	ldi	r22, 0x00	; 0
    5906:	70 e0       	ldi	r23, 0x00	; 0
    5908:	86 eb       	ldi	r24, 0xB6	; 182
    590a:	91 e2       	ldi	r25, 0x21	; 33
    590c:	0e 94 d9 67 	call	0xcfb2	; 0xcfb2 <myStringToVar>
    5910:	89 2b       	or	r24, r25
    5912:	09 f4       	brne	.+2      	; 0x5916 <interpreter_doProcess+0x21e>
    5914:	54 c1       	rjmp	.+680    	; 0x5bbe <interpreter_doProcess+0x4c6>
				dac_app_enable(val[0]);
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	29 81       	ldd	r18, Y+1	; 0x01
    591a:	3a 81       	ldd	r19, Y+2	; 0x02
    591c:	23 2b       	or	r18, r19
    591e:	09 f4       	brne	.+2      	; 0x5922 <interpreter_doProcess+0x22a>
    5920:	80 e0       	ldi	r24, 0x00	; 0
    5922:	0e 94 6b 69 	call	0xd2d6	; 0xd2d6 <dac_app_enable>
    5926:	4b c1       	rjmp	.+662    	; 0x5bbe <interpreter_doProcess+0x4c6>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_dds, sizeof(PM_IP_CMD_dds) - 1)) {
    5928:	44 e0       	ldi	r20, 0x04	; 4
    592a:	50 e0       	ldi	r21, 0x00	; 0
    592c:	68 e2       	ldi	r22, 0x28	; 40
    592e:	7e e2       	ldi	r23, 0x2E	; 46
    5930:	82 eb       	ldi	r24, 0xB2	; 178
    5932:	91 e2       	ldi	r25, 0x21	; 33
    5934:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    5938:	89 2b       	or	r24, r25
    593a:	51 f5       	brne	.+84     	; 0x5990 <interpreter_doProcess+0x298>
			float val[3] = { -1.f, -1.f, -1.f };
    593c:	8c e0       	ldi	r24, 0x0C	; 12
    593e:	e4 e0       	ldi	r30, 0x04	; 4
    5940:	f1 e2       	ldi	r31, 0x21	; 33
    5942:	de 01       	movw	r26, r28
    5944:	11 96       	adiw	r26, 0x01	; 1
    5946:	01 90       	ld	r0, Z+
    5948:	0d 92       	st	X+, r0
    594a:	8a 95       	dec	r24
    594c:	e1 f7       	brne	.-8      	; 0x5946 <interpreter_doProcess+0x24e>
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_dds) - 1), MY_STRING_TO_VAR_FLOAT | (MY_STRING_TO_VAR_FLOAT << 2) | (MY_STRING_TO_VAR_FLOAT << 4), &(val[0]), NULL, NULL)) {
    594e:	e1 2c       	mov	r14, r1
    5950:	f1 2c       	mov	r15, r1
    5952:	00 e0       	ldi	r16, 0x00	; 0
    5954:	10 e0       	ldi	r17, 0x00	; 0
    5956:	9e 01       	movw	r18, r28
    5958:	2f 5f       	subi	r18, 0xFF	; 255
    595a:	3f 4f       	sbci	r19, 0xFF	; 255
    595c:	45 e1       	ldi	r20, 0x15	; 21
    595e:	50 e0       	ldi	r21, 0x00	; 0
    5960:	60 e0       	ldi	r22, 0x00	; 0
    5962:	70 e0       	ldi	r23, 0x00	; 0
    5964:	86 eb       	ldi	r24, 0xB6	; 182
    5966:	91 e2       	ldi	r25, 0x21	; 33
    5968:	0e 94 d9 67 	call	0xcfb2	; 0xcfb2 <myStringToVar>
    596c:	89 2b       	or	r24, r25
    596e:	09 f4       	brne	.+2      	; 0x5972 <interpreter_doProcess+0x27a>
    5970:	26 c1       	rjmp	.+588    	; 0x5bbe <interpreter_doProcess+0x4c6>
				dds_update(val[0], val[1], val[2]);
    5972:	e9 84       	ldd	r14, Y+9	; 0x09
    5974:	fa 84       	ldd	r15, Y+10	; 0x0a
    5976:	0b 85       	ldd	r16, Y+11	; 0x0b
    5978:	1c 85       	ldd	r17, Y+12	; 0x0c
    597a:	2d 81       	ldd	r18, Y+5	; 0x05
    597c:	3e 81       	ldd	r19, Y+6	; 0x06
    597e:	4f 81       	ldd	r20, Y+7	; 0x07
    5980:	58 85       	ldd	r21, Y+8	; 0x08
    5982:	69 81       	ldd	r22, Y+1	; 0x01
    5984:	7a 81       	ldd	r23, Y+2	; 0x02
    5986:	8b 81       	ldd	r24, Y+3	; 0x03
    5988:	9c 81       	ldd	r25, Y+4	; 0x04
    598a:	0e 94 13 6d 	call	0xda26	; 0xda26 <dds_update>
    598e:	17 c1       	rjmp	.+558    	; 0x5bbe <interpreter_doProcess+0x4c6>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_eb, sizeof(PM_IP_CMD_eb) - 1)) {
    5990:	43 e0       	ldi	r20, 0x03	; 3
    5992:	50 e0       	ldi	r21, 0x00	; 0
    5994:	64 e2       	ldi	r22, 0x24	; 36
    5996:	7e e2       	ldi	r23, 0x2E	; 46
    5998:	82 eb       	ldi	r24, 0xB2	; 178
    599a:	91 e2       	ldi	r25, 0x21	; 33
    599c:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    59a0:	89 2b       	or	r24, r25
    59a2:	e9 f4       	brne	.+58     	; 0x59de <interpreter_doProcess+0x2e6>
			int val[1] = { 0 };
    59a4:	19 82       	std	Y+1, r1	; 0x01
    59a6:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_eb) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    59a8:	ce 01       	movw	r24, r28
    59aa:	01 96       	adiw	r24, 0x01	; 1
    59ac:	7c 01       	movw	r14, r24
    59ae:	00 e0       	ldi	r16, 0x00	; 0
    59b0:	10 e0       	ldi	r17, 0x00	; 0
    59b2:	20 e0       	ldi	r18, 0x00	; 0
    59b4:	30 e0       	ldi	r19, 0x00	; 0
    59b6:	43 e0       	ldi	r20, 0x03	; 3
    59b8:	50 e0       	ldi	r21, 0x00	; 0
    59ba:	60 e0       	ldi	r22, 0x00	; 0
    59bc:	70 e0       	ldi	r23, 0x00	; 0
    59be:	85 eb       	ldi	r24, 0xB5	; 181
    59c0:	91 e2       	ldi	r25, 0x21	; 33
    59c2:	0e 94 d9 67 	call	0xcfb2	; 0xcfb2 <myStringToVar>
    59c6:	89 2b       	or	r24, r25
    59c8:	09 f4       	brne	.+2      	; 0x59cc <interpreter_doProcess+0x2d4>
    59ca:	f9 c0       	rjmp	.+498    	; 0x5bbe <interpreter_doProcess+0x4c6>
				errorBeep_enable(val[0]);
    59cc:	81 e0       	ldi	r24, 0x01	; 1
    59ce:	29 81       	ldd	r18, Y+1	; 0x01
    59d0:	3a 81       	ldd	r19, Y+2	; 0x02
    59d2:	23 2b       	or	r18, r19
    59d4:	09 f4       	brne	.+2      	; 0x59d8 <interpreter_doProcess+0x2e0>
    59d6:	80 e0       	ldi	r24, 0x00	; 0
    59d8:	0e 94 bb 69 	call	0xd376	; 0xd376 <errorBeep_enable>
    59dc:	f0 c0       	rjmp	.+480    	; 0x5bbe <interpreter_doProcess+0x4c6>
			}

		} else if (!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_help, sizeof(PM_IP_CMD_help) - 1)) {
    59de:	44 e0       	ldi	r20, 0x04	; 4
    59e0:	50 e0       	ldi	r21, 0x00	; 0
    59e2:	69 e1       	ldi	r22, 0x19	; 25
    59e4:	7e e2       	ldi	r23, 0x2E	; 46
    59e6:	82 eb       	ldi	r24, 0xB2	; 178
    59e8:	91 e2       	ldi	r25, 0x21	; 33
    59ea:	0e 94 93 88 	call	0x11126	; 0x11126 <strncasecmp_P>
    59ee:	89 2b       	or	r24, r25
			printHelp();
    59f0:	11 f4       	brne	.+4      	; 0x59f6 <interpreter_doProcess+0x2fe>
    59f2:	87 db       	rcall	.-2290   	; 0x5102 <printHelp>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_info, sizeof(PM_IP_CMD_info) - 1)) {
    59f4:	e4 c0       	rjmp	.+456    	; 0x5bbe <interpreter_doProcess+0x4c6>
    59f6:	45 e0       	ldi	r20, 0x05	; 5
    59f8:	50 e0       	ldi	r21, 0x00	; 0
    59fa:	6e e1       	ldi	r22, 0x1E	; 30
    59fc:	7e e2       	ldi	r23, 0x2E	; 46
    59fe:	82 eb       	ldi	r24, 0xB2	; 178
    5a00:	91 e2       	ldi	r25, 0x21	; 33
    5a02:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    5a06:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5a08:	c1 f4       	brne	.+48     	; 0x5a3a <interpreter_doProcess+0x342>
    5a0a:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_info) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5a0c:	1a 82       	std	Y+2, r1	; 0x02
    5a0e:	ce 01       	movw	r24, r28
    5a10:	01 96       	adiw	r24, 0x01	; 1
    5a12:	7c 01       	movw	r14, r24
    5a14:	00 e0       	ldi	r16, 0x00	; 0
    5a16:	10 e0       	ldi	r17, 0x00	; 0
    5a18:	20 e0       	ldi	r18, 0x00	; 0
    5a1a:	30 e0       	ldi	r19, 0x00	; 0
    5a1c:	43 e0       	ldi	r20, 0x03	; 3
    5a1e:	50 e0       	ldi	r21, 0x00	; 0
    5a20:	60 e0       	ldi	r22, 0x00	; 0
    5a22:	70 e0       	ldi	r23, 0x00	; 0
    5a24:	87 eb       	ldi	r24, 0xB7	; 183
    5a26:	91 e2       	ldi	r25, 0x21	; 33
    5a28:	0e 94 d9 67 	call	0xcfb2	; 0xcfb2 <myStringToVar>
    5a2c:	89 2b       	or	r24, r25
    5a2e:	09 f4       	brne	.+2      	; 0x5a32 <interpreter_doProcess+0x33a>
				printStatusLines_bitfield(val[0]);
    5a30:	c6 c0       	rjmp	.+396    	; 0x5bbe <interpreter_doProcess+0x4c6>
    5a32:	89 81       	ldd	r24, Y+1	; 0x01
    5a34:	0e 94 ca 69 	call	0xd394	; 0xd394 <printStatusLines_bitfield>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_kb, sizeof(PM_IP_CMD_kb) - 1)) {
    5a38:	c2 c0       	rjmp	.+388    	; 0x5bbe <interpreter_doProcess+0x4c6>
    5a3a:	43 e0       	ldi	r20, 0x03	; 3
    5a3c:	50 e0       	ldi	r21, 0x00	; 0
    5a3e:	65 e1       	ldi	r22, 0x15	; 21
    5a40:	7e e2       	ldi	r23, 0x2E	; 46
    5a42:	82 eb       	ldi	r24, 0xB2	; 178
    5a44:	91 e2       	ldi	r25, 0x21	; 33
    5a46:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    5a4a:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5a4c:	e9 f4       	brne	.+58     	; 0x5a88 <interpreter_doProcess+0x390>
    5a4e:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_kb) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5a50:	1a 82       	std	Y+2, r1	; 0x02
    5a52:	ce 01       	movw	r24, r28
    5a54:	01 96       	adiw	r24, 0x01	; 1
    5a56:	7c 01       	movw	r14, r24
    5a58:	00 e0       	ldi	r16, 0x00	; 0
    5a5a:	10 e0       	ldi	r17, 0x00	; 0
    5a5c:	20 e0       	ldi	r18, 0x00	; 0
    5a5e:	30 e0       	ldi	r19, 0x00	; 0
    5a60:	43 e0       	ldi	r20, 0x03	; 3
    5a62:	50 e0       	ldi	r21, 0x00	; 0
    5a64:	60 e0       	ldi	r22, 0x00	; 0
    5a66:	70 e0       	ldi	r23, 0x00	; 0
    5a68:	85 eb       	ldi	r24, 0xB5	; 181
    5a6a:	91 e2       	ldi	r25, 0x21	; 33
    5a6c:	0e 94 d9 67 	call	0xcfb2	; 0xcfb2 <myStringToVar>
    5a70:	89 2b       	or	r24, r25
    5a72:	09 f4       	brne	.+2      	; 0x5a76 <interpreter_doProcess+0x37e>
				keyBeep_enable(val[0]);
    5a74:	a4 c0       	rjmp	.+328    	; 0x5bbe <interpreter_doProcess+0x4c6>
    5a76:	81 e0       	ldi	r24, 0x01	; 1
    5a78:	29 81       	ldd	r18, Y+1	; 0x01
    5a7a:	3a 81       	ldd	r19, Y+2	; 0x02
    5a7c:	23 2b       	or	r18, r19
    5a7e:	09 f4       	brne	.+2      	; 0x5a82 <interpreter_doProcess+0x38a>
    5a80:	80 e0       	ldi	r24, 0x00	; 0
    5a82:	0e 94 c0 69 	call	0xd380	; 0xd380 <keyBeep_enable>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_pt, sizeof(PM_IP_CMD_pt) - 1)) {
    5a86:	9b c0       	rjmp	.+310    	; 0x5bbe <interpreter_doProcess+0x4c6>
    5a88:	43 e0       	ldi	r20, 0x03	; 3
    5a8a:	50 e0       	ldi	r21, 0x00	; 0
    5a8c:	61 e1       	ldi	r22, 0x11	; 17
    5a8e:	7e e2       	ldi	r23, 0x2E	; 46
    5a90:	82 eb       	ldi	r24, 0xB2	; 178
    5a92:	91 e2       	ldi	r25, 0x21	; 33
    5a94:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    5a98:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5a9a:	c1 f4       	brne	.+48     	; 0x5acc <interpreter_doProcess+0x3d4>
    5a9c:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_pt) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5a9e:	1a 82       	std	Y+2, r1	; 0x02
    5aa0:	ce 01       	movw	r24, r28
    5aa2:	01 96       	adiw	r24, 0x01	; 1
    5aa4:	7c 01       	movw	r14, r24
    5aa6:	00 e0       	ldi	r16, 0x00	; 0
    5aa8:	10 e0       	ldi	r17, 0x00	; 0
    5aaa:	20 e0       	ldi	r18, 0x00	; 0
    5aac:	30 e0       	ldi	r19, 0x00	; 0
    5aae:	43 e0       	ldi	r20, 0x03	; 3
    5ab0:	50 e0       	ldi	r21, 0x00	; 0
    5ab2:	60 e0       	ldi	r22, 0x00	; 0
    5ab4:	70 e0       	ldi	r23, 0x00	; 0
    5ab6:	85 eb       	ldi	r24, 0xB5	; 181
    5ab8:	91 e2       	ldi	r25, 0x21	; 33
    5aba:	0e 94 d9 67 	call	0xcfb2	; 0xcfb2 <myStringToVar>
    5abe:	89 2b       	or	r24, r25
    5ac0:	09 f4       	brne	.+2      	; 0x5ac4 <interpreter_doProcess+0x3cc>
				pitchTone_mode(val[0]);
    5ac2:	7d c0       	rjmp	.+250    	; 0x5bbe <interpreter_doProcess+0x4c6>
    5ac4:	89 81       	ldd	r24, Y+1	; 0x01
    5ac6:	0e 94 c5 69 	call	0xd38a	; 0xd38a <pitchTone_mode>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_reset, sizeof(PM_IP_CMD_reset) - 1)) {
    5aca:	79 c0       	rjmp	.+242    	; 0x5bbe <interpreter_doProcess+0x4c6>
    5acc:	46 e0       	ldi	r20, 0x06	; 6
    5ace:	50 e0       	ldi	r21, 0x00	; 0
    5ad0:	6a e0       	ldi	r22, 0x0A	; 10
    5ad2:	7e e2       	ldi	r23, 0x2E	; 46
    5ad4:	82 eb       	ldi	r24, 0xB2	; 178
    5ad6:	91 e2       	ldi	r25, 0x21	; 33
    5ad8:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    5adc:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5ade:	01 f5       	brne	.+64     	; 0x5b20 <interpreter_doProcess+0x428>
    5ae0:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_reset) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5ae2:	1a 82       	std	Y+2, r1	; 0x02
    5ae4:	ce 01       	movw	r24, r28
    5ae6:	01 96       	adiw	r24, 0x01	; 1
    5ae8:	7c 01       	movw	r14, r24
    5aea:	00 e0       	ldi	r16, 0x00	; 0
    5aec:	10 e0       	ldi	r17, 0x00	; 0
    5aee:	20 e0       	ldi	r18, 0x00	; 0
    5af0:	30 e0       	ldi	r19, 0x00	; 0
    5af2:	43 e0       	ldi	r20, 0x03	; 3
    5af4:	50 e0       	ldi	r21, 0x00	; 0
    5af6:	60 e0       	ldi	r22, 0x00	; 0
    5af8:	70 e0       	ldi	r23, 0x00	; 0
    5afa:	88 eb       	ldi	r24, 0xB8	; 184
    5afc:	91 e2       	ldi	r25, 0x21	; 33
    5afe:	0e 94 d9 67 	call	0xcfb2	; 0xcfb2 <myStringToVar>
    5b02:	89 2b       	or	r24, r25
    5b04:	09 f4       	brne	.+2      	; 0x5b08 <interpreter_doProcess+0x410>
				if (val[0] == 1) {
    5b06:	5b c0       	rjmp	.+182    	; 0x5bbe <interpreter_doProcess+0x4c6>
    5b08:	89 81       	ldd	r24, Y+1	; 0x01
    5b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b0c:	01 97       	sbiw	r24, 0x01	; 1
    5b0e:	09 f0       	breq	.+2      	; 0x5b12 <interpreter_doProcess+0x41a>
					/* Terminate the USB connection */
					stdio_usb_disable();
    5b10:	56 c0       	rjmp	.+172    	; 0x5bbe <interpreter_doProcess+0x4c6>
    5b12:	0e 94 3f 7b 	call	0xf67e	; 0xf67e <stdio_usb_disable>
					udc_stop();
    5b16:	0e 94 14 78 	call	0xf028	; 0xf028 <udc_stop>

					asm volatile(
    5b1a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
						:
					);
				}
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_xo, sizeof(PM_IP_CMD_xo) - 1)) {
    5b1e:	4f c0       	rjmp	.+158    	; 0x5bbe <interpreter_doProcess+0x4c6>
    5b20:	43 e0       	ldi	r20, 0x03	; 3
    5b22:	50 e0       	ldi	r21, 0x00	; 0
    5b24:	66 e0       	ldi	r22, 0x06	; 6
    5b26:	7e e2       	ldi	r23, 0x2E	; 46
    5b28:	82 eb       	ldi	r24, 0xB2	; 178
    5b2a:	91 e2       	ldi	r25, 0x21	; 33
    5b2c:	0e 94 ab 88 	call	0x11156	; 0x11156 <strncmp_P>
    5b30:	89 2b       	or	r24, r25
			long val[1] = { 0 };
    5b32:	e1 f4       	brne	.+56     	; 0x5b6c <interpreter_doProcess+0x474>
    5b34:	19 82       	std	Y+1, r1	; 0x01
    5b36:	1a 82       	std	Y+2, r1	; 0x02
    5b38:	1b 82       	std	Y+3, r1	; 0x03
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_xo) - 1), MY_STRING_TO_VAR_LONG, NULL, &(val[0]), NULL)) {
    5b3a:	1c 82       	std	Y+4, r1	; 0x04
    5b3c:	e1 2c       	mov	r14, r1
    5b3e:	f1 2c       	mov	r15, r1
    5b40:	8e 01       	movw	r16, r28
    5b42:	0f 5f       	subi	r16, 0xFF	; 255
    5b44:	1f 4f       	sbci	r17, 0xFF	; 255
    5b46:	20 e0       	ldi	r18, 0x00	; 0
    5b48:	30 e0       	ldi	r19, 0x00	; 0
    5b4a:	42 e0       	ldi	r20, 0x02	; 2
    5b4c:	50 e0       	ldi	r21, 0x00	; 0
    5b4e:	60 e0       	ldi	r22, 0x00	; 0
    5b50:	70 e0       	ldi	r23, 0x00	; 0
    5b52:	85 eb       	ldi	r24, 0xB5	; 181
    5b54:	91 e2       	ldi	r25, 0x21	; 33
    5b56:	0e 94 d9 67 	call	0xcfb2	; 0xcfb2 <myStringToVar>
    5b5a:	89 2b       	or	r24, r25
				xoPwm_set(val[0]);
    5b5c:	81 f1       	breq	.+96     	; 0x5bbe <interpreter_doProcess+0x4c6>
    5b5e:	69 81       	ldd	r22, Y+1	; 0x01
    5b60:	7a 81       	ldd	r23, Y+2	; 0x02
    5b62:	8b 81       	ldd	r24, Y+3	; 0x03
    5b64:	9c 81       	ldd	r25, Y+4	; 0x04
    5b66:	0e 94 d7 69 	call	0xd3ae	; 0xd3ae <xoPwm_set>
			}

		} else {
			int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_UNKNOWN_01);
    5b6a:	29 c0       	rjmp	.+82     	; 0x5bbe <interpreter_doProcess+0x4c6>
    5b6c:	81 ed       	ldi	r24, 0xD1	; 209
    5b6e:	9d e2       	ldi	r25, 0x2D	; 45
    5b70:	9f 93       	push	r25
    5b72:	8f 93       	push	r24
    5b74:	1f 92       	push	r1
    5b76:	80 e4       	ldi	r24, 0x40	; 64
    5b78:	8f 93       	push	r24
    5b7a:	8b e1       	ldi	r24, 0x1B	; 27
    5b7c:	95 e2       	ldi	r25, 0x25	; 37
    5b7e:	9f 93       	push	r25
    5b80:	8f 93       	push	r24
    5b82:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
			udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5b86:	81 34       	cpi	r24, 0x41	; 65
    5b88:	91 05       	cpc	r25, r1
    5b8a:	10 f0       	brcs	.+4      	; 0x5b90 <interpreter_doProcess+0x498>
    5b8c:	80 e4       	ldi	r24, 0x40	; 64
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
    5b90:	40 e0       	ldi	r20, 0x00	; 0
    5b92:	68 2f       	mov	r22, r24
    5b94:	8b e1       	ldi	r24, 0x1B	; 27
    5b96:	95 e2       	ldi	r25, 0x25	; 37
    5b98:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

			if (g_errorBeep_enable) {
    5b9c:	0f 90       	pop	r0
    5b9e:	0f 90       	pop	r0
    5ba0:	0f 90       	pop	r0
    5ba2:	0f 90       	pop	r0
    5ba4:	0f 90       	pop	r0
    5ba6:	0f 90       	pop	r0
    5ba8:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <g_errorBeep_enable>
    5bac:	88 23       	and	r24, r24
				twi2_set_beep(100, 10);  // Bad sound
    5bae:	39 f0       	breq	.+14     	; 0x5bbe <interpreter_doProcess+0x4c6>
    5bb0:	6a e0       	ldi	r22, 0x0A	; 10
    5bb2:	84 e6       	ldi	r24, 0x64	; 100
				yield_ms(125);
    5bb4:	33 d7       	rcall	.+3686   	; 0x6a1c <twi2_set_beep>
    5bb6:	8d e7       	ldi	r24, 0x7D	; 125
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
    5bba:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
			}
		}
	}

	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_CmdLine);
    5bbe:	8d e5       	ldi	r24, 0x5D	; 93
    5bc0:	9e e2       	ldi	r25, 0x2E	; 46
    5bc2:	9f 93       	push	r25
    5bc4:	8f 93       	push	r24
    5bc6:	1f 92       	push	r1
    5bc8:	80 e4       	ldi	r24, 0x40	; 64
    5bca:	8f 93       	push	r24
    5bcc:	8b e1       	ldi	r24, 0x1B	; 27
    5bce:	95 e2       	ldi	r25, 0x25	; 37
    5bd0:	9f 93       	push	r25
    5bd2:	8f 93       	push	r24
    5bd4:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5bd8:	81 34       	cpi	r24, 0x41	; 65
    5bda:	91 05       	cpc	r25, r1
    5bdc:	10 f0       	brcs	.+4      	; 0x5be2 <interpreter_doProcess+0x4ea>
    5bde:	80 e4       	ldi	r24, 0x40	; 64
    5be0:	90 e0       	ldi	r25, 0x00	; 0
    5be2:	40 e0       	ldi	r20, 0x00	; 0
    5be4:	68 2f       	mov	r22, r24
    5be6:	8b e1       	ldi	r24, 0x1B	; 27
    5be8:	95 e2       	ldi	r25, 0x25	; 37
    5bea:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>

	/* Execute line */
	if (pos) {
		/* Feed interpreter with line data */
		executeCmdLine(s_rx_cmdLine_buf, s_rx_cmdLine_idx);
		s_rx_cmdLine_idx = 0;
    5bee:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <s_rx_cmdLine_idx>
    5bf2:	0f 90       	pop	r0
    5bf4:	0f 90       	pop	r0
    5bf6:	0f 90       	pop	r0
    5bf8:	0f 90       	pop	r0
    5bfa:	0f 90       	pop	r0
	}
}
    5bfc:	0f 90       	pop	r0
    5bfe:	2c 96       	adiw	r28, 0x0c	; 12
    5c00:	cd bf       	out	0x3d, r28	; 61
    5c02:	de bf       	out	0x3e, r29	; 62
    5c04:	df 91       	pop	r29
    5c06:	cf 91       	pop	r28
    5c08:	1f 91       	pop	r17
    5c0a:	0f 91       	pop	r16
    5c0c:	ff 90       	pop	r15
    5c0e:	ef 90       	pop	r14
    5c10:	df 90       	pop	r13
    5c12:	08 95       	ret

00005c14 <__portable_avr_delay_cycles>:
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
	twi2_m_data[0] = sprintf_P((char*)&(twi2_m_data[1]), fmt_P);
	twi2_packet.length = twi2_m_data[0] + 1;
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}
    5c14:	04 c0       	rjmp	.+8      	; 0x5c1e <__portable_avr_delay_cycles+0xa>
    5c16:	61 50       	subi	r22, 0x01	; 1
    5c18:	71 09       	sbc	r23, r1
    5c1a:	81 09       	sbc	r24, r1
    5c1c:	91 09       	sbc	r25, r1
    5c1e:	61 15       	cp	r22, r1
    5c20:	71 05       	cpc	r23, r1
    5c22:	81 05       	cpc	r24, r1
    5c24:	91 05       	cpc	r25, r1
    5c26:	b9 f7       	brne	.-18     	; 0x5c16 <__portable_avr_delay_cycles+0x2>
    5c28:	08 95       	ret

00005c2a <task_twi1_hygro>:
    5c2a:	ff 92       	push	r15
    5c2c:	0f 93       	push	r16
    5c2e:	1f 93       	push	r17
    5c30:	cf 93       	push	r28
    5c32:	df 93       	push	r29
    5c34:	00 d0       	rcall	.+0      	; 0x5c36 <task_twi1_hygro+0xc>
    5c36:	cd b7       	in	r28, 0x3d	; 61
    5c38:	de b7       	in	r29, 0x3e	; 62
    5c3a:	8f b7       	in	r24, 0x3f	; 63
    5c3c:	8b 83       	std	Y+3, r24	; 0x03
    5c3e:	f8 94       	cli
    5c40:	8b 81       	ldd	r24, Y+3	; 0x03
    5c42:	20 91 f0 26 	lds	r18, 0x26F0	; 0x8026f0 <g_twi1_hygro_S_T>
    5c46:	30 91 f1 26 	lds	r19, 0x26F1	; 0x8026f1 <g_twi1_hygro_S_T+0x1>
    5c4a:	00 91 ee 26 	lds	r16, 0x26EE	; 0x8026ee <g_twi1_hygro_S_RH>
    5c4e:	10 91 ef 26 	lds	r17, 0x26EF	; 0x8026ef <g_twi1_hygro_S_RH+0x1>
    5c52:	8f bf       	out	0x3f, r24	; 63
    5c54:	21 15       	cp	r18, r1
    5c56:	31 05       	cpc	r19, r1
    5c58:	a9 f0       	breq	.+42     	; 0x5c84 <task_twi1_hygro+0x5a>
    5c5a:	8f b7       	in	r24, 0x3f	; 63
    5c5c:	8a 83       	std	Y+2, r24	; 0x02
    5c5e:	f8 94       	cli
    5c60:	fa 80       	ldd	r15, Y+2	; 0x02
    5c62:	ac e5       	ldi	r26, 0x5C	; 92
    5c64:	b4 e4       	ldi	r27, 0x44	; 68
    5c66:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <__umulhisi3>
    5c6a:	2f ef       	ldi	r18, 0xFF	; 255
    5c6c:	3f ef       	ldi	r19, 0xFF	; 255
    5c6e:	40 e0       	ldi	r20, 0x00	; 0
    5c70:	50 e0       	ldi	r21, 0x00	; 0
    5c72:	0e 94 bc 85 	call	0x10b78	; 0x10b78 <__divmodsi4>
    5c76:	24 59       	subi	r18, 0x94	; 148
    5c78:	31 41       	sbci	r19, 0x11	; 17
    5c7a:	20 93 ec 26 	sts	0x26EC, r18	; 0x8026ec <g_twi1_hygro_T_100>
    5c7e:	30 93 ed 26 	sts	0x26ED, r19	; 0x8026ed <g_twi1_hygro_T_100+0x1>
    5c82:	ff be       	out	0x3f, r15	; 63
    5c84:	01 15       	cp	r16, r1
    5c86:	11 05       	cpc	r17, r1
    5c88:	a1 f0       	breq	.+40     	; 0x5cb2 <task_twi1_hygro+0x88>
    5c8a:	8f b7       	in	r24, 0x3f	; 63
    5c8c:	89 83       	std	Y+1, r24	; 0x01
    5c8e:	f8 94       	cli
    5c90:	f9 80       	ldd	r15, Y+1	; 0x01
    5c92:	98 01       	movw	r18, r16
    5c94:	a0 e1       	ldi	r26, 0x10	; 16
    5c96:	b7 e2       	ldi	r27, 0x27	; 39
    5c98:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <__umulhisi3>
    5c9c:	2f ef       	ldi	r18, 0xFF	; 255
    5c9e:	3f ef       	ldi	r19, 0xFF	; 255
    5ca0:	40 e0       	ldi	r20, 0x00	; 0
    5ca2:	50 e0       	ldi	r21, 0x00	; 0
    5ca4:	0e 94 bc 85 	call	0x10b78	; 0x10b78 <__divmodsi4>
    5ca8:	20 93 ea 26 	sts	0x26EA, r18	; 0x8026ea <g_twi1_hygro_RH_100>
    5cac:	30 93 eb 26 	sts	0x26EB, r19	; 0x8026eb <g_twi1_hygro_RH_100+0x1>
    5cb0:	ff be       	out	0x3f, r15	; 63
    5cb2:	23 96       	adiw	r28, 0x03	; 3
    5cb4:	cd bf       	out	0x3d, r28	; 61
    5cb6:	de bf       	out	0x3e, r29	; 62
    5cb8:	df 91       	pop	r29
    5cba:	cf 91       	pop	r28
    5cbc:	1f 91       	pop	r17
    5cbe:	0f 91       	pop	r16
    5cc0:	ff 90       	pop	r15
    5cc2:	08 95       	ret

00005cc4 <task_twi1_gyro>:
    5cc4:	4f 92       	push	r4
    5cc6:	5f 92       	push	r5
    5cc8:	6f 92       	push	r6
    5cca:	7f 92       	push	r7
    5ccc:	8f 92       	push	r8
    5cce:	9f 92       	push	r9
    5cd0:	af 92       	push	r10
    5cd2:	bf 92       	push	r11
    5cd4:	cf 92       	push	r12
    5cd6:	df 92       	push	r13
    5cd8:	ef 92       	push	r14
    5cda:	ff 92       	push	r15
    5cdc:	0f 93       	push	r16
    5cde:	1f 93       	push	r17
    5ce0:	cf 93       	push	r28
    5ce2:	df 93       	push	r29
    5ce4:	00 d0       	rcall	.+0      	; 0x5ce6 <task_twi1_gyro+0x22>
    5ce6:	00 d0       	rcall	.+0      	; 0x5ce8 <task_twi1_gyro+0x24>
    5ce8:	cd b7       	in	r28, 0x3d	; 61
    5cea:	de b7       	in	r29, 0x3e	; 62
    5cec:	8f b7       	in	r24, 0x3f	; 63
    5cee:	89 83       	std	Y+1, r24	; 0x01
    5cf0:	f8 94       	cli
    5cf2:	99 81       	ldd	r25, Y+1	; 0x01
    5cf4:	80 91 68 27 	lds	r24, 0x2768	; 0x802768 <g_twi1_gyro_1_accel_x>
    5cf8:	f0 91 69 27 	lds	r31, 0x2769	; 0x802769 <g_twi1_gyro_1_accel_x+0x1>
    5cfc:	40 90 66 27 	lds	r4, 0x2766	; 0x802766 <g_twi1_gyro_1_accel_y>
    5d00:	50 90 67 27 	lds	r5, 0x2767	; 0x802767 <g_twi1_gyro_1_accel_y+0x1>
    5d04:	60 90 64 27 	lds	r6, 0x2764	; 0x802764 <g_twi1_gyro_1_accel_z>
    5d08:	90 90 65 27 	lds	r9, 0x2765	; 0x802765 <g_twi1_gyro_1_accel_z+0x1>
    5d0c:	9f bf       	out	0x3f, r25	; 63
    5d0e:	a8 2f       	mov	r26, r24
    5d10:	ef 2f       	mov	r30, r31
    5d12:	ee 0f       	add	r30, r30
    5d14:	ee 0b       	sbc	r30, r30
    5d16:	28 2f       	mov	r18, r24
    5d18:	3f 2f       	mov	r19, r31
    5d1a:	4e 2f       	mov	r20, r30
    5d1c:	5e 2f       	mov	r21, r30
    5d1e:	6e 2f       	mov	r22, r30
    5d20:	7e 2f       	mov	r23, r30
    5d22:	8e 2f       	mov	r24, r30
    5d24:	9e 2f       	mov	r25, r30
    5d26:	02 e0       	ldi	r16, 0x02	; 2
    5d28:	0e 94 20 87 	call	0x10e40	; 0x10e40 <__ashldi3>
    5d2c:	a2 2e       	mov	r10, r18
    5d2e:	b3 2e       	mov	r11, r19
    5d30:	c4 2e       	mov	r12, r20
    5d32:	d5 2e       	mov	r13, r21
    5d34:	e6 2e       	mov	r14, r22
    5d36:	f7 2e       	mov	r15, r23
    5d38:	b8 2f       	mov	r27, r24
    5d3a:	19 2f       	mov	r17, r25
    5d3c:	05 e0       	ldi	r16, 0x05	; 5
    5d3e:	0e 94 20 87 	call	0x10e40	; 0x10e40 <__ashldi3>
    5d42:	0b 2f       	mov	r16, r27
    5d44:	0e 94 6c 87 	call	0x10ed8	; 0x10ed8 <__subdi3>
    5d48:	aa 2e       	mov	r10, r26
    5d4a:	bf 2e       	mov	r11, r31
    5d4c:	ce 2e       	mov	r12, r30
    5d4e:	de 2e       	mov	r13, r30
    5d50:	ee 2e       	mov	r14, r30
    5d52:	fe 2e       	mov	r15, r30
    5d54:	0e 2f       	mov	r16, r30
    5d56:	1e 2f       	mov	r17, r30
    5d58:	0e 94 57 87 	call	0x10eae	; 0x10eae <__adddi3>
    5d5c:	04 e0       	ldi	r16, 0x04	; 4
    5d5e:	0e 94 20 87 	call	0x10e40	; 0x10e40 <__ashldi3>
    5d62:	b0 90 5d 27 	lds	r11, 0x275D	; 0x80275d <g_twi1_gyro_1_accel_factx+0x1>
    5d66:	a0 90 5c 27 	lds	r10, 0x275C	; 0x80275c <g_twi1_gyro_1_accel_factx>
    5d6a:	1b 2d       	mov	r17, r11
    5d6c:	11 0f       	add	r17, r17
    5d6e:	11 0b       	sbc	r17, r17
    5d70:	c1 2e       	mov	r12, r17
    5d72:	d1 2e       	mov	r13, r17
    5d74:	e1 2e       	mov	r14, r17
    5d76:	f1 2e       	mov	r15, r17
    5d78:	01 2f       	mov	r16, r17
    5d7a:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    5d7e:	68 94       	set
    5d80:	aa 24       	eor	r10, r10
    5d82:	a4 f8       	bld	r10, 4
    5d84:	0f 2e       	mov	r0, r31
    5d86:	f7 e2       	ldi	r31, 0x27	; 39
    5d88:	bf 2e       	mov	r11, r31
    5d8a:	f0 2d       	mov	r31, r0
    5d8c:	c1 2c       	mov	r12, r1
    5d8e:	d1 2c       	mov	r13, r1
    5d90:	e1 2c       	mov	r14, r1
    5d92:	f1 2c       	mov	r15, r1
    5d94:	00 e0       	ldi	r16, 0x00	; 0
    5d96:	10 e0       	ldi	r17, 0x00	; 0
    5d98:	0e 94 58 86 	call	0x10cb0	; 0x10cb0 <__divdi3>
    5d9c:	0f e0       	ldi	r16, 0x0F	; 15
    5d9e:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    5da2:	72 2e       	mov	r7, r18
    5da4:	83 2e       	mov	r8, r19
    5da6:	e5 2d       	mov	r30, r5
    5da8:	ee 0f       	add	r30, r30
    5daa:	ee 0b       	sbc	r30, r30
    5dac:	24 2d       	mov	r18, r4
    5dae:	35 2d       	mov	r19, r5
    5db0:	4e 2f       	mov	r20, r30
    5db2:	5e 2f       	mov	r21, r30
    5db4:	6e 2f       	mov	r22, r30
    5db6:	7e 2f       	mov	r23, r30
    5db8:	8e 2f       	mov	r24, r30
    5dba:	9e 2f       	mov	r25, r30
    5dbc:	02 e0       	ldi	r16, 0x02	; 2
    5dbe:	0e 94 20 87 	call	0x10e40	; 0x10e40 <__ashldi3>
    5dc2:	a2 2e       	mov	r10, r18
    5dc4:	b3 2e       	mov	r11, r19
    5dc6:	c4 2e       	mov	r12, r20
    5dc8:	d5 2e       	mov	r13, r21
    5dca:	e6 2e       	mov	r14, r22
    5dcc:	f7 2e       	mov	r15, r23
    5dce:	a8 2f       	mov	r26, r24
    5dd0:	19 2f       	mov	r17, r25
    5dd2:	05 e0       	ldi	r16, 0x05	; 5
    5dd4:	0e 94 20 87 	call	0x10e40	; 0x10e40 <__ashldi3>
    5dd8:	0a 2f       	mov	r16, r26
    5dda:	0e 94 6c 87 	call	0x10ed8	; 0x10ed8 <__subdi3>
    5dde:	a4 2c       	mov	r10, r4
    5de0:	b5 2c       	mov	r11, r5
    5de2:	ce 2e       	mov	r12, r30
    5de4:	de 2e       	mov	r13, r30
    5de6:	ee 2e       	mov	r14, r30
    5de8:	fe 2e       	mov	r15, r30
    5dea:	0e 2f       	mov	r16, r30
    5dec:	1e 2f       	mov	r17, r30
    5dee:	0e 94 57 87 	call	0x10eae	; 0x10eae <__adddi3>
    5df2:	04 e0       	ldi	r16, 0x04	; 4
    5df4:	0e 94 20 87 	call	0x10e40	; 0x10e40 <__ashldi3>
    5df8:	b0 90 5b 27 	lds	r11, 0x275B	; 0x80275b <g_twi1_gyro_1_accel_facty+0x1>
    5dfc:	a0 90 5a 27 	lds	r10, 0x275A	; 0x80275a <g_twi1_gyro_1_accel_facty>
    5e00:	1b 2d       	mov	r17, r11
    5e02:	11 0f       	add	r17, r17
    5e04:	11 0b       	sbc	r17, r17
    5e06:	c1 2e       	mov	r12, r17
    5e08:	d1 2e       	mov	r13, r17
    5e0a:	e1 2e       	mov	r14, r17
    5e0c:	f1 2e       	mov	r15, r17
    5e0e:	01 2f       	mov	r16, r17
    5e10:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    5e14:	68 94       	set
    5e16:	aa 24       	eor	r10, r10
    5e18:	a4 f8       	bld	r10, 4
    5e1a:	0f 2e       	mov	r0, r31
    5e1c:	f7 e2       	ldi	r31, 0x27	; 39
    5e1e:	bf 2e       	mov	r11, r31
    5e20:	f0 2d       	mov	r31, r0
    5e22:	c1 2c       	mov	r12, r1
    5e24:	d1 2c       	mov	r13, r1
    5e26:	e1 2c       	mov	r14, r1
    5e28:	f1 2c       	mov	r15, r1
    5e2a:	00 e0       	ldi	r16, 0x00	; 0
    5e2c:	10 e0       	ldi	r17, 0x00	; 0
    5e2e:	0e 94 58 86 	call	0x10cb0	; 0x10cb0 <__divdi3>
    5e32:	0f e0       	ldi	r16, 0x0F	; 15
    5e34:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    5e38:	42 2e       	mov	r4, r18
    5e3a:	53 2e       	mov	r5, r19
    5e3c:	e9 2d       	mov	r30, r9
    5e3e:	ee 0f       	add	r30, r30
    5e40:	ee 0b       	sbc	r30, r30
    5e42:	26 2d       	mov	r18, r6
    5e44:	39 2d       	mov	r19, r9
    5e46:	4e 2f       	mov	r20, r30
    5e48:	5e 2f       	mov	r21, r30
    5e4a:	6e 2f       	mov	r22, r30
    5e4c:	7e 2f       	mov	r23, r30
    5e4e:	8e 2f       	mov	r24, r30
    5e50:	9e 2f       	mov	r25, r30
    5e52:	02 e0       	ldi	r16, 0x02	; 2
    5e54:	0e 94 20 87 	call	0x10e40	; 0x10e40 <__ashldi3>
    5e58:	a2 2e       	mov	r10, r18
    5e5a:	b3 2e       	mov	r11, r19
    5e5c:	c4 2e       	mov	r12, r20
    5e5e:	d5 2e       	mov	r13, r21
    5e60:	e6 2e       	mov	r14, r22
    5e62:	f7 2e       	mov	r15, r23
    5e64:	a8 2f       	mov	r26, r24
    5e66:	19 2f       	mov	r17, r25
    5e68:	05 e0       	ldi	r16, 0x05	; 5
    5e6a:	0e 94 20 87 	call	0x10e40	; 0x10e40 <__ashldi3>
    5e6e:	0a 2f       	mov	r16, r26
    5e70:	0e 94 6c 87 	call	0x10ed8	; 0x10ed8 <__subdi3>
    5e74:	a6 2c       	mov	r10, r6
    5e76:	b9 2c       	mov	r11, r9
    5e78:	ce 2e       	mov	r12, r30
    5e7a:	de 2e       	mov	r13, r30
    5e7c:	ee 2e       	mov	r14, r30
    5e7e:	fe 2e       	mov	r15, r30
    5e80:	0e 2f       	mov	r16, r30
    5e82:	1e 2f       	mov	r17, r30
    5e84:	0e 94 57 87 	call	0x10eae	; 0x10eae <__adddi3>
    5e88:	04 e0       	ldi	r16, 0x04	; 4
    5e8a:	0e 94 20 87 	call	0x10e40	; 0x10e40 <__ashldi3>
    5e8e:	b0 90 59 27 	lds	r11, 0x2759	; 0x802759 <g_twi1_gyro_1_accel_factz+0x1>
    5e92:	a0 90 58 27 	lds	r10, 0x2758	; 0x802758 <g_twi1_gyro_1_accel_factz>
    5e96:	1b 2d       	mov	r17, r11
    5e98:	11 0f       	add	r17, r17
    5e9a:	11 0b       	sbc	r17, r17
    5e9c:	c1 2e       	mov	r12, r17
    5e9e:	d1 2e       	mov	r13, r17
    5ea0:	e1 2e       	mov	r14, r17
    5ea2:	f1 2e       	mov	r15, r17
    5ea4:	01 2f       	mov	r16, r17
    5ea6:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    5eaa:	68 94       	set
    5eac:	aa 24       	eor	r10, r10
    5eae:	a4 f8       	bld	r10, 4
    5eb0:	0f 2e       	mov	r0, r31
    5eb2:	f7 e2       	ldi	r31, 0x27	; 39
    5eb4:	bf 2e       	mov	r11, r31
    5eb6:	f0 2d       	mov	r31, r0
    5eb8:	c1 2c       	mov	r12, r1
    5eba:	d1 2c       	mov	r13, r1
    5ebc:	e1 2c       	mov	r14, r1
    5ebe:	f1 2c       	mov	r15, r1
    5ec0:	00 e0       	ldi	r16, 0x00	; 0
    5ec2:	10 e0       	ldi	r17, 0x00	; 0
    5ec4:	0e 94 58 86 	call	0x10cb0	; 0x10cb0 <__divdi3>
    5ec8:	0f e0       	ldi	r16, 0x0F	; 15
    5eca:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    5ece:	92 2f       	mov	r25, r18
    5ed0:	2f b7       	in	r18, 0x3f	; 63
    5ed2:	2a 83       	std	Y+2, r18	; 0x02
    5ed4:	f8 94       	cli
    5ed6:	2a 81       	ldd	r18, Y+2	; 0x02
    5ed8:	70 92 56 27 	sts	0x2756, r7	; 0x802756 <g_twi1_gyro_1_accel_x_mg>
    5edc:	80 92 57 27 	sts	0x2757, r8	; 0x802757 <g_twi1_gyro_1_accel_x_mg+0x1>
    5ee0:	40 92 54 27 	sts	0x2754, r4	; 0x802754 <g_twi1_gyro_1_accel_y_mg>
    5ee4:	50 92 55 27 	sts	0x2755, r5	; 0x802755 <g_twi1_gyro_1_accel_y_mg+0x1>
    5ee8:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <g_twi1_gyro_1_accel_z_mg>
    5eec:	30 93 53 27 	sts	0x2753, r19	; 0x802753 <g_twi1_gyro_1_accel_z_mg+0x1>
    5ef0:	2f bf       	out	0x3f, r18	; 63
    5ef2:	8f b7       	in	r24, 0x3f	; 63
    5ef4:	8b 83       	std	Y+3, r24	; 0x03
    5ef6:	f8 94       	cli
    5ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    5efa:	80 91 50 27 	lds	r24, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_x>
    5efe:	30 91 51 27 	lds	r19, 0x2751	; 0x802751 <g_twi1_gyro_1_gyro_x+0x1>
    5f02:	50 90 4e 27 	lds	r5, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_y>
    5f06:	60 90 4f 27 	lds	r6, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_y+0x1>
    5f0a:	70 90 4c 27 	lds	r7, 0x274C	; 0x80274c <g_twi1_gyro_1_gyro_z>
    5f0e:	80 90 4d 27 	lds	r8, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_z+0x1>
    5f12:	9f bf       	out	0x3f, r25	; 63
    5f14:	9f b7       	in	r25, 0x3f	; 63
    5f16:	9c 83       	std	Y+4, r25	; 0x04
    5f18:	f8 94       	cli
    5f1a:	9c 80       	ldd	r9, Y+4	; 0x04
    5f1c:	28 2f       	mov	r18, r24
    5f1e:	93 2f       	mov	r25, r19
    5f20:	99 0f       	add	r25, r25
    5f22:	99 0b       	sbc	r25, r25
    5f24:	0f 2e       	mov	r0, r31
    5f26:	f0 e9       	ldi	r31, 0x90	; 144
    5f28:	af 2e       	mov	r10, r31
    5f2a:	f0 2d       	mov	r31, r0
    5f2c:	0f 2e       	mov	r0, r31
    5f2e:	f0 ed       	ldi	r31, 0xD0	; 208
    5f30:	bf 2e       	mov	r11, r31
    5f32:	f0 2d       	mov	r31, r0
    5f34:	0f 2e       	mov	r0, r31
    5f36:	f3 e0       	ldi	r31, 0x03	; 3
    5f38:	cf 2e       	mov	r12, r31
    5f3a:	f0 2d       	mov	r31, r0
    5f3c:	00 e0       	ldi	r16, 0x00	; 0
    5f3e:	49 2f       	mov	r20, r25
    5f40:	59 2f       	mov	r21, r25
    5f42:	69 2f       	mov	r22, r25
    5f44:	79 2f       	mov	r23, r25
    5f46:	89 2f       	mov	r24, r25
    5f48:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    5f4c:	0f e0       	ldi	r16, 0x0F	; 15
    5f4e:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    5f52:	20 93 42 27 	sts	0x2742, r18	; 0x802742 <g_twi1_gyro_1_gyro_x_mdps>
    5f56:	30 93 43 27 	sts	0x2743, r19	; 0x802743 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    5f5a:	40 93 44 27 	sts	0x2744, r20	; 0x802744 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    5f5e:	50 93 45 27 	sts	0x2745, r21	; 0x802745 <g_twi1_gyro_1_gyro_x_mdps+0x3>
    5f62:	25 2d       	mov	r18, r5
    5f64:	96 2d       	mov	r25, r6
    5f66:	99 0f       	add	r25, r25
    5f68:	99 0b       	sbc	r25, r25
    5f6a:	00 e0       	ldi	r16, 0x00	; 0
    5f6c:	36 2d       	mov	r19, r6
    5f6e:	49 2f       	mov	r20, r25
    5f70:	59 2f       	mov	r21, r25
    5f72:	69 2f       	mov	r22, r25
    5f74:	79 2f       	mov	r23, r25
    5f76:	89 2f       	mov	r24, r25
    5f78:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    5f7c:	0f e0       	ldi	r16, 0x0F	; 15
    5f7e:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    5f82:	20 93 3e 27 	sts	0x273E, r18	; 0x80273e <g_twi1_gyro_1_gyro_y_mdps>
    5f86:	30 93 3f 27 	sts	0x273F, r19	; 0x80273f <g_twi1_gyro_1_gyro_y_mdps+0x1>
    5f8a:	40 93 40 27 	sts	0x2740, r20	; 0x802740 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    5f8e:	50 93 41 27 	sts	0x2741, r21	; 0x802741 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    5f92:	27 2d       	mov	r18, r7
    5f94:	98 2d       	mov	r25, r8
    5f96:	99 0f       	add	r25, r25
    5f98:	99 0b       	sbc	r25, r25
    5f9a:	00 e0       	ldi	r16, 0x00	; 0
    5f9c:	38 2d       	mov	r19, r8
    5f9e:	49 2f       	mov	r20, r25
    5fa0:	59 2f       	mov	r21, r25
    5fa2:	69 2f       	mov	r22, r25
    5fa4:	79 2f       	mov	r23, r25
    5fa6:	89 2f       	mov	r24, r25
    5fa8:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    5fac:	0f e0       	ldi	r16, 0x0F	; 15
    5fae:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    5fb2:	20 93 3a 27 	sts	0x273A, r18	; 0x80273a <g_twi1_gyro_1_gyro_z_mdps>
    5fb6:	30 93 3b 27 	sts	0x273B, r19	; 0x80273b <g_twi1_gyro_1_gyro_z_mdps+0x1>
    5fba:	40 93 3c 27 	sts	0x273C, r20	; 0x80273c <g_twi1_gyro_1_gyro_z_mdps+0x2>
    5fbe:	50 93 3d 27 	sts	0x273D, r21	; 0x80273d <g_twi1_gyro_1_gyro_z_mdps+0x3>
    5fc2:	9f be       	out	0x3f, r9	; 63
    5fc4:	8f b7       	in	r24, 0x3f	; 63
    5fc6:	8d 83       	std	Y+5, r24	; 0x05
    5fc8:	f8 94       	cli
    5fca:	8d 81       	ldd	r24, Y+5	; 0x05
    5fcc:	20 91 2d 27 	lds	r18, 0x272D	; 0x80272d <g_twi1_gyro_2_mag_x>
    5fd0:	30 91 2e 27 	lds	r19, 0x272E	; 0x80272e <g_twi1_gyro_2_mag_x+0x1>
    5fd4:	e0 90 2b 27 	lds	r14, 0x272B	; 0x80272b <g_twi1_gyro_2_mag_y>
    5fd8:	f0 90 2c 27 	lds	r15, 0x272C	; 0x80272c <g_twi1_gyro_2_mag_y+0x1>
    5fdc:	a0 90 29 27 	lds	r10, 0x2729	; 0x802729 <g_twi1_gyro_2_mag_z>
    5fe0:	b0 90 2a 27 	lds	r11, 0x272A	; 0x80272a <g_twi1_gyro_2_mag_z+0x1>
    5fe4:	00 91 70 27 	lds	r16, 0x2770	; 0x802770 <g_twi1_gyro_1_temp>
    5fe8:	10 91 71 27 	lds	r17, 0x2771	; 0x802771 <g_twi1_gyro_1_temp+0x1>
    5fec:	8f bf       	out	0x3f, r24	; 63
    5fee:	a0 91 27 27 	lds	r26, 0x2727	; 0x802727 <g_twi1_gyro_2_mag_factx>
    5ff2:	b0 91 28 27 	lds	r27, 0x2728	; 0x802728 <g_twi1_gyro_2_mag_factx+0x1>
    5ff6:	e0 91 37 27 	lds	r30, 0x2737	; 0x802737 <g_twi1_gyro_2_asax>
    5ffa:	33 23       	and	r19, r19
    5ffc:	2c f1       	brlt	.+74     	; 0x6048 <__stack+0x49>
    5ffe:	0e 94 e0 85 	call	0x10bc0	; 0x10bc0 <__mulhisi3>
    6002:	9b 01       	movw	r18, r22
    6004:	ac 01       	movw	r20, r24
    6006:	8e 2f       	mov	r24, r30
    6008:	ee 0f       	add	r30, r30
    600a:	99 0b       	sbc	r25, r25
    600c:	aa 0b       	sbc	r26, r26
    600e:	bb 0b       	sbc	r27, r27
    6010:	bc 01       	movw	r22, r24
    6012:	cd 01       	movw	r24, r26
    6014:	60 58       	subi	r22, 0x80	; 128
    6016:	7f 4f       	sbci	r23, 0xFF	; 255
    6018:	8f 4f       	sbci	r24, 0xFF	; 255
    601a:	9f 4f       	sbci	r25, 0xFF	; 255
    601c:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <__mulsi3>
    6020:	2a e0       	ldi	r18, 0x0A	; 10
    6022:	30 e0       	ldi	r19, 0x00	; 0
    6024:	40 e0       	ldi	r20, 0x00	; 0
    6026:	50 e0       	ldi	r21, 0x00	; 0
    6028:	0e 94 bc 85 	call	0x10b78	; 0x10b78 <__divmodsi4>
    602c:	29 01       	movw	r4, r18
    602e:	3a 01       	movw	r6, r20
    6030:	80 e8       	ldi	r24, 0x80	; 128
    6032:	48 0e       	add	r4, r24
    6034:	51 1c       	adc	r5, r1
    6036:	61 1c       	adc	r6, r1
    6038:	71 1c       	adc	r7, r1
    603a:	45 2c       	mov	r4, r5
    603c:	56 2c       	mov	r5, r6
    603e:	67 2c       	mov	r6, r7
    6040:	77 24       	eor	r7, r7
    6042:	67 fc       	sbrc	r6, 7
    6044:	7a 94       	dec	r7
    6046:	24 c0       	rjmp	.+72     	; 0x6090 <__stack+0x91>
    6048:	0e 94 e0 85 	call	0x10bc0	; 0x10bc0 <__mulhisi3>
    604c:	9b 01       	movw	r18, r22
    604e:	ac 01       	movw	r20, r24
    6050:	8e 2f       	mov	r24, r30
    6052:	ee 0f       	add	r30, r30
    6054:	99 0b       	sbc	r25, r25
    6056:	aa 0b       	sbc	r26, r26
    6058:	bb 0b       	sbc	r27, r27
    605a:	bc 01       	movw	r22, r24
    605c:	cd 01       	movw	r24, r26
    605e:	60 58       	subi	r22, 0x80	; 128
    6060:	7f 4f       	sbci	r23, 0xFF	; 255
    6062:	8f 4f       	sbci	r24, 0xFF	; 255
    6064:	9f 4f       	sbci	r25, 0xFF	; 255
    6066:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <__mulsi3>
    606a:	2a e0       	ldi	r18, 0x0A	; 10
    606c:	30 e0       	ldi	r19, 0x00	; 0
    606e:	40 e0       	ldi	r20, 0x00	; 0
    6070:	50 e0       	ldi	r21, 0x00	; 0
    6072:	0e 94 bc 85 	call	0x10b78	; 0x10b78 <__divmodsi4>
    6076:	29 01       	movw	r4, r18
    6078:	3a 01       	movw	r6, r20
    607a:	80 e8       	ldi	r24, 0x80	; 128
    607c:	48 1a       	sub	r4, r24
    607e:	51 08       	sbc	r5, r1
    6080:	61 08       	sbc	r6, r1
    6082:	71 08       	sbc	r7, r1
    6084:	45 2c       	mov	r4, r5
    6086:	56 2c       	mov	r5, r6
    6088:	67 2c       	mov	r6, r7
    608a:	77 24       	eor	r7, r7
    608c:	67 fc       	sbrc	r6, 7
    608e:	7a 94       	dec	r7
    6090:	a0 91 25 27 	lds	r26, 0x2725	; 0x802725 <g_twi1_gyro_2_mag_facty>
    6094:	b0 91 26 27 	lds	r27, 0x2726	; 0x802726 <g_twi1_gyro_2_mag_facty+0x1>
    6098:	e0 91 36 27 	lds	r30, 0x2736	; 0x802736 <g_twi1_gyro_2_asay>
    609c:	ff 20       	and	r15, r15
    609e:	34 f1       	brlt	.+76     	; 0x60ec <__stack+0xed>
    60a0:	97 01       	movw	r18, r14
    60a2:	0e 94 e0 85 	call	0x10bc0	; 0x10bc0 <__mulhisi3>
    60a6:	9b 01       	movw	r18, r22
    60a8:	ac 01       	movw	r20, r24
    60aa:	8e 2f       	mov	r24, r30
    60ac:	ee 0f       	add	r30, r30
    60ae:	99 0b       	sbc	r25, r25
    60b0:	aa 0b       	sbc	r26, r26
    60b2:	bb 0b       	sbc	r27, r27
    60b4:	bc 01       	movw	r22, r24
    60b6:	cd 01       	movw	r24, r26
    60b8:	60 58       	subi	r22, 0x80	; 128
    60ba:	7f 4f       	sbci	r23, 0xFF	; 255
    60bc:	8f 4f       	sbci	r24, 0xFF	; 255
    60be:	9f 4f       	sbci	r25, 0xFF	; 255
    60c0:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <__mulsi3>
    60c4:	2a e0       	ldi	r18, 0x0A	; 10
    60c6:	30 e0       	ldi	r19, 0x00	; 0
    60c8:	40 e0       	ldi	r20, 0x00	; 0
    60ca:	50 e0       	ldi	r21, 0x00	; 0
    60cc:	0e 94 bc 85 	call	0x10b78	; 0x10b78 <__divmodsi4>
    60d0:	69 01       	movw	r12, r18
    60d2:	7a 01       	movw	r14, r20
    60d4:	80 e8       	ldi	r24, 0x80	; 128
    60d6:	c8 0e       	add	r12, r24
    60d8:	d1 1c       	adc	r13, r1
    60da:	e1 1c       	adc	r14, r1
    60dc:	f1 1c       	adc	r15, r1
    60de:	cd 2c       	mov	r12, r13
    60e0:	de 2c       	mov	r13, r14
    60e2:	ef 2c       	mov	r14, r15
    60e4:	ff 24       	eor	r15, r15
    60e6:	e7 fc       	sbrc	r14, 7
    60e8:	fa 94       	dec	r15
    60ea:	25 c0       	rjmp	.+74     	; 0x6136 <__stack+0x137>
    60ec:	97 01       	movw	r18, r14
    60ee:	0e 94 e0 85 	call	0x10bc0	; 0x10bc0 <__mulhisi3>
    60f2:	9b 01       	movw	r18, r22
    60f4:	ac 01       	movw	r20, r24
    60f6:	8e 2f       	mov	r24, r30
    60f8:	ee 0f       	add	r30, r30
    60fa:	99 0b       	sbc	r25, r25
    60fc:	aa 0b       	sbc	r26, r26
    60fe:	bb 0b       	sbc	r27, r27
    6100:	bc 01       	movw	r22, r24
    6102:	cd 01       	movw	r24, r26
    6104:	60 58       	subi	r22, 0x80	; 128
    6106:	7f 4f       	sbci	r23, 0xFF	; 255
    6108:	8f 4f       	sbci	r24, 0xFF	; 255
    610a:	9f 4f       	sbci	r25, 0xFF	; 255
    610c:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <__mulsi3>
    6110:	2a e0       	ldi	r18, 0x0A	; 10
    6112:	30 e0       	ldi	r19, 0x00	; 0
    6114:	40 e0       	ldi	r20, 0x00	; 0
    6116:	50 e0       	ldi	r21, 0x00	; 0
    6118:	0e 94 bc 85 	call	0x10b78	; 0x10b78 <__divmodsi4>
    611c:	69 01       	movw	r12, r18
    611e:	7a 01       	movw	r14, r20
    6120:	80 e8       	ldi	r24, 0x80	; 128
    6122:	c8 1a       	sub	r12, r24
    6124:	d1 08       	sbc	r13, r1
    6126:	e1 08       	sbc	r14, r1
    6128:	f1 08       	sbc	r15, r1
    612a:	cd 2c       	mov	r12, r13
    612c:	de 2c       	mov	r13, r14
    612e:	ef 2c       	mov	r14, r15
    6130:	ff 24       	eor	r15, r15
    6132:	e7 fc       	sbrc	r14, 7
    6134:	fa 94       	dec	r15
    6136:	a0 91 23 27 	lds	r26, 0x2723	; 0x802723 <g_twi1_gyro_2_mag_factz>
    613a:	b0 91 24 27 	lds	r27, 0x2724	; 0x802724 <g_twi1_gyro_2_mag_factz+0x1>
    613e:	e0 91 35 27 	lds	r30, 0x2735	; 0x802735 <g_twi1_gyro_2_asaz>
    6142:	bb 20       	and	r11, r11
    6144:	34 f1       	brlt	.+76     	; 0x6192 <__stack+0x193>
    6146:	95 01       	movw	r18, r10
    6148:	0e 94 e0 85 	call	0x10bc0	; 0x10bc0 <__mulhisi3>
    614c:	9b 01       	movw	r18, r22
    614e:	ac 01       	movw	r20, r24
    6150:	8e 2f       	mov	r24, r30
    6152:	ee 0f       	add	r30, r30
    6154:	99 0b       	sbc	r25, r25
    6156:	aa 0b       	sbc	r26, r26
    6158:	bb 0b       	sbc	r27, r27
    615a:	bc 01       	movw	r22, r24
    615c:	cd 01       	movw	r24, r26
    615e:	60 58       	subi	r22, 0x80	; 128
    6160:	7f 4f       	sbci	r23, 0xFF	; 255
    6162:	8f 4f       	sbci	r24, 0xFF	; 255
    6164:	9f 4f       	sbci	r25, 0xFF	; 255
    6166:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <__mulsi3>
    616a:	2a e0       	ldi	r18, 0x0A	; 10
    616c:	30 e0       	ldi	r19, 0x00	; 0
    616e:	40 e0       	ldi	r20, 0x00	; 0
    6170:	50 e0       	ldi	r21, 0x00	; 0
    6172:	0e 94 bc 85 	call	0x10b78	; 0x10b78 <__divmodsi4>
    6176:	49 01       	movw	r8, r18
    6178:	5a 01       	movw	r10, r20
    617a:	80 e8       	ldi	r24, 0x80	; 128
    617c:	88 0e       	add	r8, r24
    617e:	91 1c       	adc	r9, r1
    6180:	a1 1c       	adc	r10, r1
    6182:	b1 1c       	adc	r11, r1
    6184:	89 2c       	mov	r8, r9
    6186:	9a 2c       	mov	r9, r10
    6188:	ab 2c       	mov	r10, r11
    618a:	bb 24       	eor	r11, r11
    618c:	a7 fc       	sbrc	r10, 7
    618e:	ba 94       	dec	r11
    6190:	25 c0       	rjmp	.+74     	; 0x61dc <__stack+0x1dd>
    6192:	95 01       	movw	r18, r10
    6194:	0e 94 e0 85 	call	0x10bc0	; 0x10bc0 <__mulhisi3>
    6198:	9b 01       	movw	r18, r22
    619a:	ac 01       	movw	r20, r24
    619c:	8e 2f       	mov	r24, r30
    619e:	ee 0f       	add	r30, r30
    61a0:	99 0b       	sbc	r25, r25
    61a2:	aa 0b       	sbc	r26, r26
    61a4:	bb 0b       	sbc	r27, r27
    61a6:	bc 01       	movw	r22, r24
    61a8:	cd 01       	movw	r24, r26
    61aa:	60 58       	subi	r22, 0x80	; 128
    61ac:	7f 4f       	sbci	r23, 0xFF	; 255
    61ae:	8f 4f       	sbci	r24, 0xFF	; 255
    61b0:	9f 4f       	sbci	r25, 0xFF	; 255
    61b2:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <__mulsi3>
    61b6:	2a e0       	ldi	r18, 0x0A	; 10
    61b8:	30 e0       	ldi	r19, 0x00	; 0
    61ba:	40 e0       	ldi	r20, 0x00	; 0
    61bc:	50 e0       	ldi	r21, 0x00	; 0
    61be:	0e 94 bc 85 	call	0x10b78	; 0x10b78 <__divmodsi4>
    61c2:	49 01       	movw	r8, r18
    61c4:	5a 01       	movw	r10, r20
    61c6:	80 e8       	ldi	r24, 0x80	; 128
    61c8:	88 1a       	sub	r8, r24
    61ca:	91 08       	sbc	r9, r1
    61cc:	a1 08       	sbc	r10, r1
    61ce:	b1 08       	sbc	r11, r1
    61d0:	89 2c       	mov	r8, r9
    61d2:	9a 2c       	mov	r9, r10
    61d4:	ab 2c       	mov	r10, r11
    61d6:	bb 24       	eor	r11, r11
    61d8:	a7 fc       	sbrc	r10, 7
    61da:	ba 94       	dec	r11
    61dc:	80 91 6e 27 	lds	r24, 0x276E	; 0x80276e <g_twi1_gyro_1_temp_RTofs>
    61e0:	90 91 6f 27 	lds	r25, 0x276F	; 0x80276f <g_twi1_gyro_1_temp_RTofs+0x1>
    61e4:	d8 01       	movw	r26, r16
    61e6:	a8 1b       	sub	r26, r24
    61e8:	b9 0b       	sbc	r27, r25
    61ea:	24 e6       	ldi	r18, 0x64	; 100
    61ec:	30 e0       	ldi	r19, 0x00	; 0
    61ee:	0e 94 f5 85 	call	0x10bea	; 0x10bea <__usmulhisi3>
    61f2:	20 91 6c 27 	lds	r18, 0x276C	; 0x80276c <g_twi1_gyro_1_temp_sens>
    61f6:	30 91 6d 27 	lds	r19, 0x276D	; 0x80276d <g_twi1_gyro_1_temp_sens+0x1>
    61fa:	03 2e       	mov	r0, r19
    61fc:	00 0c       	add	r0, r0
    61fe:	44 0b       	sbc	r20, r20
    6200:	55 0b       	sbc	r21, r21
    6202:	0e 94 bc 85 	call	0x10b78	; 0x10b78 <__divmodsi4>
    6206:	2c 5c       	subi	r18, 0xCC	; 204
    6208:	37 4f       	sbci	r19, 0xF7	; 247
    620a:	8f b7       	in	r24, 0x3f	; 63
    620c:	8e 83       	std	Y+6, r24	; 0x06
    620e:	f8 94       	cli
    6210:	8e 81       	ldd	r24, Y+6	; 0x06
    6212:	40 92 1f 27 	sts	0x271F, r4	; 0x80271f <g_twi1_gyro_2_mag_x_nT>
    6216:	50 92 20 27 	sts	0x2720, r5	; 0x802720 <g_twi1_gyro_2_mag_x_nT+0x1>
    621a:	60 92 21 27 	sts	0x2721, r6	; 0x802721 <g_twi1_gyro_2_mag_x_nT+0x2>
    621e:	70 92 22 27 	sts	0x2722, r7	; 0x802722 <g_twi1_gyro_2_mag_x_nT+0x3>
    6222:	c0 92 1b 27 	sts	0x271B, r12	; 0x80271b <g_twi1_gyro_2_mag_y_nT>
    6226:	d0 92 1c 27 	sts	0x271C, r13	; 0x80271c <g_twi1_gyro_2_mag_y_nT+0x1>
    622a:	e0 92 1d 27 	sts	0x271D, r14	; 0x80271d <g_twi1_gyro_2_mag_y_nT+0x2>
    622e:	f0 92 1e 27 	sts	0x271E, r15	; 0x80271e <g_twi1_gyro_2_mag_y_nT+0x3>
    6232:	80 92 17 27 	sts	0x2717, r8	; 0x802717 <g_twi1_gyro_2_mag_z_nT>
    6236:	90 92 18 27 	sts	0x2718, r9	; 0x802718 <g_twi1_gyro_2_mag_z_nT+0x1>
    623a:	a0 92 19 27 	sts	0x2719, r10	; 0x802719 <g_twi1_gyro_2_mag_z_nT+0x2>
    623e:	b0 92 1a 27 	sts	0x271A, r11	; 0x80271a <g_twi1_gyro_2_mag_z_nT+0x3>
    6242:	20 93 6a 27 	sts	0x276A, r18	; 0x80276a <g_twi1_gyro_1_temp_deg_100>
    6246:	30 93 6b 27 	sts	0x276B, r19	; 0x80276b <g_twi1_gyro_1_temp_deg_100+0x1>
    624a:	8f bf       	out	0x3f, r24	; 63
    624c:	26 96       	adiw	r28, 0x06	; 6
    624e:	cd bf       	out	0x3d, r28	; 61
    6250:	de bf       	out	0x3e, r29	; 62
    6252:	df 91       	pop	r29
    6254:	cf 91       	pop	r28
    6256:	1f 91       	pop	r17
    6258:	0f 91       	pop	r16
    625a:	ff 90       	pop	r15
    625c:	ef 90       	pop	r14
    625e:	df 90       	pop	r13
    6260:	cf 90       	pop	r12
    6262:	bf 90       	pop	r11
    6264:	af 90       	pop	r10
    6266:	9f 90       	pop	r9
    6268:	8f 90       	pop	r8
    626a:	7f 90       	pop	r7
    626c:	6f 90       	pop	r6
    626e:	5f 90       	pop	r5
    6270:	4f 90       	pop	r4
    6272:	08 95       	ret

00006274 <task_twi1_baro>:
    6274:	2f 92       	push	r2
    6276:	3f 92       	push	r3
    6278:	4f 92       	push	r4
    627a:	5f 92       	push	r5
    627c:	6f 92       	push	r6
    627e:	7f 92       	push	r7
    6280:	8f 92       	push	r8
    6282:	9f 92       	push	r9
    6284:	af 92       	push	r10
    6286:	bf 92       	push	r11
    6288:	cf 92       	push	r12
    628a:	df 92       	push	r13
    628c:	ef 92       	push	r14
    628e:	ff 92       	push	r15
    6290:	0f 93       	push	r16
    6292:	1f 93       	push	r17
    6294:	cf 93       	push	r28
    6296:	df 93       	push	r29
    6298:	cd b7       	in	r28, 0x3d	; 61
    629a:	de b7       	in	r29, 0x3e	; 62
    629c:	a6 97       	sbiw	r28, 0x26	; 38
    629e:	cd bf       	out	0x3d, r28	; 61
    62a0:	de bf       	out	0x3e, r29	; 62
    62a2:	8f b7       	in	r24, 0x3f	; 63
    62a4:	8a 83       	std	Y+2, r24	; 0x02
    62a6:	f8 94       	cli
    62a8:	8a 81       	ldd	r24, Y+2	; 0x02
    62aa:	20 91 00 27 	lds	r18, 0x2700	; 0x802700 <g_twi1_baro_d1>
    62ae:	30 91 01 27 	lds	r19, 0x2701	; 0x802701 <g_twi1_baro_d1+0x1>
    62b2:	40 91 02 27 	lds	r20, 0x2702	; 0x802702 <g_twi1_baro_d1+0x2>
    62b6:	50 91 03 27 	lds	r21, 0x2703	; 0x802703 <g_twi1_baro_d1+0x3>
    62ba:	2f 8b       	std	Y+23, r18	; 0x17
    62bc:	38 8f       	std	Y+24, r19	; 0x18
    62be:	49 8f       	std	Y+25, r20	; 0x19
    62c0:	5a 8f       	std	Y+26, r21	; 0x1a
    62c2:	40 91 fc 26 	lds	r20, 0x26FC	; 0x8026fc <g_twi1_baro_d2>
    62c6:	50 91 fd 26 	lds	r21, 0x26FD	; 0x8026fd <g_twi1_baro_d2+0x1>
    62ca:	60 91 fe 26 	lds	r22, 0x26FE	; 0x8026fe <g_twi1_baro_d2+0x2>
    62ce:	70 91 ff 26 	lds	r23, 0x26FF	; 0x8026ff <g_twi1_baro_d2+0x3>
    62d2:	8f bf       	out	0x3f, r24	; 63
    62d4:	8f 89       	ldd	r24, Y+23	; 0x17
    62d6:	98 8d       	ldd	r25, Y+24	; 0x18
    62d8:	a9 8d       	ldd	r26, Y+25	; 0x19
    62da:	ba 8d       	ldd	r27, Y+26	; 0x1a
    62dc:	89 2b       	or	r24, r25
    62de:	8a 2b       	or	r24, r26
    62e0:	8b 2b       	or	r24, r27
    62e2:	31 f4       	brne	.+12     	; 0x62f0 <task_twi1_baro+0x7c>
    62e4:	41 15       	cp	r20, r1
    62e6:	51 05       	cpc	r21, r1
    62e8:	61 05       	cpc	r22, r1
    62ea:	71 05       	cpc	r23, r1
    62ec:	09 f4       	brne	.+2      	; 0x62f0 <task_twi1_baro+0x7c>
    62ee:	fe c1       	rjmp	.+1020   	; 0x66ec <task_twi1_baro+0x478>
    62f0:	0f 2e       	mov	r0, r31
    62f2:	f4 e0       	ldi	r31, 0x04	; 4
    62f4:	2f 2e       	mov	r2, r31
    62f6:	f7 e2       	ldi	r31, 0x27	; 39
    62f8:	3f 2e       	mov	r3, r31
    62fa:	f0 2d       	mov	r31, r0
    62fc:	d1 01       	movw	r26, r2
    62fe:	1a 96       	adiw	r26, 0x0a	; 10
    6300:	8d 91       	ld	r24, X+
    6302:	9c 91       	ld	r25, X
    6304:	1b 97       	sbiw	r26, 0x0b	; 11
    6306:	a0 e0       	ldi	r26, 0x00	; 0
    6308:	b0 e0       	ldi	r27, 0x00	; 0
    630a:	ba 2f       	mov	r27, r26
    630c:	a9 2f       	mov	r26, r25
    630e:	98 2f       	mov	r25, r24
    6310:	88 27       	eor	r24, r24
    6312:	2a 01       	movw	r4, r20
    6314:	3b 01       	movw	r6, r22
    6316:	48 1a       	sub	r4, r24
    6318:	59 0a       	sbc	r5, r25
    631a:	6a 0a       	sbc	r6, r26
    631c:	7b 0a       	sbc	r7, r27
    631e:	a3 01       	movw	r20, r6
    6320:	92 01       	movw	r18, r4
    6322:	55 0f       	add	r21, r21
    6324:	22 0b       	sbc	r18, r18
    6326:	32 2f       	mov	r19, r18
    6328:	a9 01       	movw	r20, r18
    632a:	2b 83       	std	Y+3, r18	; 0x03
    632c:	3c 83       	std	Y+4, r19	; 0x04
    632e:	4d 83       	std	Y+5, r20	; 0x05
    6330:	5e 83       	std	Y+6, r21	; 0x06
    6332:	d1 01       	movw	r26, r2
    6334:	1c 96       	adiw	r26, 0x0c	; 12
    6336:	4d 91       	ld	r20, X+
    6338:	5c 91       	ld	r21, X
    633a:	1d 97       	sbiw	r26, 0x0d	; 13
    633c:	a4 2c       	mov	r10, r4
    633e:	b5 2c       	mov	r11, r5
    6340:	c6 2c       	mov	r12, r6
    6342:	d7 2c       	mov	r13, r7
    6344:	eb 80       	ldd	r14, Y+3	; 0x03
    6346:	fe 2c       	mov	r15, r14
    6348:	0e 2d       	mov	r16, r14
    634a:	1e 2d       	mov	r17, r14
    634c:	24 2f       	mov	r18, r20
    634e:	35 2f       	mov	r19, r21
    6350:	40 e0       	ldi	r20, 0x00	; 0
    6352:	50 e0       	ldi	r21, 0x00	; 0
    6354:	60 e0       	ldi	r22, 0x00	; 0
    6356:	70 e0       	ldi	r23, 0x00	; 0
    6358:	80 e0       	ldi	r24, 0x00	; 0
    635a:	90 e0       	ldi	r25, 0x00	; 0
    635c:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    6360:	07 e1       	ldi	r16, 0x17	; 23
    6362:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    6366:	2b 87       	std	Y+11, r18	; 0x0b
    6368:	3c 87       	std	Y+12, r19	; 0x0c
    636a:	4d 87       	std	Y+13, r20	; 0x0d
    636c:	5e 87       	std	Y+14, r21	; 0x0e
    636e:	2b 85       	ldd	r18, Y+11	; 0x0b
    6370:	3c 85       	ldd	r19, Y+12	; 0x0c
    6372:	4d 85       	ldd	r20, Y+13	; 0x0d
    6374:	5e 85       	ldd	r21, Y+14	; 0x0e
    6376:	2b a3       	std	Y+35, r18	; 0x23
    6378:	3c a3       	std	Y+36, r19	; 0x24
    637a:	4d a3       	std	Y+37, r20	; 0x25
    637c:	5e a3       	std	Y+38, r21	; 0x26
    637e:	ba 01       	movw	r22, r20
    6380:	a9 01       	movw	r20, r18
    6382:	40 53       	subi	r20, 0x30	; 48
    6384:	58 4f       	sbci	r21, 0xF8	; 248
    6386:	6f 4f       	sbci	r22, 0xFF	; 255
    6388:	7f 4f       	sbci	r23, 0xFF	; 255
    638a:	4b 8b       	std	Y+19, r20	; 0x13
    638c:	5c 8b       	std	Y+20, r21	; 0x14
    638e:	6d 8b       	std	Y+21, r22	; 0x15
    6390:	7e 8b       	std	Y+22, r23	; 0x16
    6392:	d1 01       	movw	r26, r2
    6394:	18 96       	adiw	r26, 0x08	; 8
    6396:	4d 91       	ld	r20, X+
    6398:	5c 91       	ld	r21, X
    639a:	19 97       	sbiw	r26, 0x09	; 9
    639c:	fe 2c       	mov	r15, r14
    639e:	0e 2d       	mov	r16, r14
    63a0:	24 2f       	mov	r18, r20
    63a2:	35 2f       	mov	r19, r21
    63a4:	40 e0       	ldi	r20, 0x00	; 0
    63a6:	50 e0       	ldi	r21, 0x00	; 0
    63a8:	60 e0       	ldi	r22, 0x00	; 0
    63aa:	70 e0       	ldi	r23, 0x00	; 0
    63ac:	80 e0       	ldi	r24, 0x00	; 0
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    63b4:	06 e0       	ldi	r16, 0x06	; 6
    63b6:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    63ba:	2f 87       	std	Y+15, r18	; 0x0f
    63bc:	38 8b       	std	Y+16, r19	; 0x10
    63be:	84 2e       	mov	r8, r20
    63c0:	95 2e       	mov	r9, r21
    63c2:	b6 2f       	mov	r27, r22
    63c4:	a7 2f       	mov	r26, r23
    63c6:	89 8b       	std	Y+17, r24	; 0x11
    63c8:	9a 8b       	std	Y+18, r25	; 0x12
    63ca:	f1 01       	movw	r30, r2
    63cc:	a4 80       	ldd	r10, Z+4	; 0x04
    63ce:	b5 80       	ldd	r11, Z+5	; 0x05
    63d0:	2a 2d       	mov	r18, r10
    63d2:	3b 2d       	mov	r19, r11
    63d4:	40 e0       	ldi	r20, 0x00	; 0
    63d6:	50 e0       	ldi	r21, 0x00	; 0
    63d8:	60 e0       	ldi	r22, 0x00	; 0
    63da:	70 e0       	ldi	r23, 0x00	; 0
    63dc:	80 e0       	ldi	r24, 0x00	; 0
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	01 e1       	ldi	r16, 0x11	; 17
    63e2:	0e 94 20 87 	call	0x10e40	; 0x10e40 <__ashldi3>
    63e6:	a2 2e       	mov	r10, r18
    63e8:	b3 2e       	mov	r11, r19
    63ea:	c4 2e       	mov	r12, r20
    63ec:	d5 2e       	mov	r13, r21
    63ee:	e6 2e       	mov	r14, r22
    63f0:	f7 2e       	mov	r15, r23
    63f2:	08 2f       	mov	r16, r24
    63f4:	19 2f       	mov	r17, r25
    63f6:	2f 85       	ldd	r18, Y+15	; 0x0f
    63f8:	38 89       	ldd	r19, Y+16	; 0x10
    63fa:	48 2d       	mov	r20, r8
    63fc:	59 2d       	mov	r21, r9
    63fe:	6b 2f       	mov	r22, r27
    6400:	7a 2f       	mov	r23, r26
    6402:	89 89       	ldd	r24, Y+17	; 0x11
    6404:	9a 89       	ldd	r25, Y+18	; 0x12
    6406:	0e 94 57 87 	call	0x10eae	; 0x10eae <__adddi3>
    640a:	2f 87       	std	Y+15, r18	; 0x0f
    640c:	38 8b       	std	Y+16, r19	; 0x10
    640e:	4b 8f       	std	Y+27, r20	; 0x1b
    6410:	5c 8f       	std	Y+28, r21	; 0x1c
    6412:	6d 8f       	std	Y+29, r22	; 0x1d
    6414:	7e 8f       	std	Y+30, r23	; 0x1e
    6416:	8f 8f       	std	Y+31, r24	; 0x1f
    6418:	98 a3       	std	Y+32, r25	; 0x20
    641a:	46 81       	ldd	r20, Z+6	; 0x06
    641c:	57 81       	ldd	r21, Z+7	; 0x07
    641e:	a4 2c       	mov	r10, r4
    6420:	b5 2c       	mov	r11, r5
    6422:	c6 2c       	mov	r12, r6
    6424:	d7 2c       	mov	r13, r7
    6426:	eb 80       	ldd	r14, Y+3	; 0x03
    6428:	fe 2c       	mov	r15, r14
    642a:	0e 2d       	mov	r16, r14
    642c:	1e 2d       	mov	r17, r14
    642e:	24 2f       	mov	r18, r20
    6430:	35 2f       	mov	r19, r21
    6432:	40 e0       	ldi	r20, 0x00	; 0
    6434:	50 e0       	ldi	r21, 0x00	; 0
    6436:	60 e0       	ldi	r22, 0x00	; 0
    6438:	70 e0       	ldi	r23, 0x00	; 0
    643a:	80 e0       	ldi	r24, 0x00	; 0
    643c:	90 e0       	ldi	r25, 0x00	; 0
    643e:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    6442:	07 e0       	ldi	r16, 0x07	; 7
    6444:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    6448:	29 8b       	std	Y+17, r18	; 0x11
    644a:	3a 8b       	std	Y+18, r19	; 0x12
    644c:	84 2e       	mov	r8, r20
    644e:	95 2e       	mov	r9, r21
    6450:	b6 2f       	mov	r27, r22
    6452:	a7 2f       	mov	r26, r23
    6454:	89 a3       	std	Y+33, r24	; 0x21
    6456:	9a a3       	std	Y+34, r25	; 0x22
    6458:	f1 01       	movw	r30, r2
    645a:	a2 80       	ldd	r10, Z+2	; 0x02
    645c:	b3 80       	ldd	r11, Z+3	; 0x03
    645e:	2a 2d       	mov	r18, r10
    6460:	3b 2d       	mov	r19, r11
    6462:	40 e0       	ldi	r20, 0x00	; 0
    6464:	50 e0       	ldi	r21, 0x00	; 0
    6466:	60 e0       	ldi	r22, 0x00	; 0
    6468:	70 e0       	ldi	r23, 0x00	; 0
    646a:	80 e0       	ldi	r24, 0x00	; 0
    646c:	90 e0       	ldi	r25, 0x00	; 0
    646e:	00 e1       	ldi	r16, 0x10	; 16
    6470:	0e 94 20 87 	call	0x10e40	; 0x10e40 <__ashldi3>
    6474:	a2 2e       	mov	r10, r18
    6476:	b3 2e       	mov	r11, r19
    6478:	c4 2e       	mov	r12, r20
    647a:	d5 2e       	mov	r13, r21
    647c:	e6 2e       	mov	r14, r22
    647e:	f7 2e       	mov	r15, r23
    6480:	08 2f       	mov	r16, r24
    6482:	19 2f       	mov	r17, r25
    6484:	29 89       	ldd	r18, Y+17	; 0x11
    6486:	3a 89       	ldd	r19, Y+18	; 0x12
    6488:	48 2d       	mov	r20, r8
    648a:	59 2d       	mov	r21, r9
    648c:	6b 2f       	mov	r22, r27
    648e:	7a 2f       	mov	r23, r26
    6490:	89 a1       	ldd	r24, Y+33	; 0x21
    6492:	9a a1       	ldd	r25, Y+34	; 0x22
    6494:	0e 94 57 87 	call	0x10eae	; 0x10eae <__adddi3>
    6498:	32 2e       	mov	r3, r18
    649a:	23 2e       	mov	r2, r19
    649c:	49 8b       	std	Y+17, r20	; 0x11
    649e:	5a 8b       	std	Y+18, r21	; 0x12
    64a0:	69 a3       	std	Y+33, r22	; 0x21
    64a2:	7a a3       	std	Y+34, r23	; 0x22
    64a4:	98 2e       	mov	r9, r24
    64a6:	89 2e       	mov	r8, r25
    64a8:	2b 89       	ldd	r18, Y+19	; 0x13
    64aa:	3c 89       	ldd	r19, Y+20	; 0x14
    64ac:	4d 89       	ldd	r20, Y+21	; 0x15
    64ae:	5e 89       	ldd	r21, Y+22	; 0x16
    64b0:	20 3d       	cpi	r18, 0xD0	; 208
    64b2:	37 40       	sbci	r19, 0x07	; 7
    64b4:	41 05       	cpc	r20, r1
    64b6:	51 05       	cpc	r21, r1
    64b8:	0c f0       	brlt	.+2      	; 0x64bc <task_twi1_baro+0x248>
    64ba:	d0 c0       	rjmp	.+416    	; 0x665c <task_twi1_baro+0x3e8>
    64bc:	a4 2c       	mov	r10, r4
    64be:	b5 2c       	mov	r11, r5
    64c0:	c6 2c       	mov	r12, r6
    64c2:	d7 2c       	mov	r13, r7
    64c4:	eb 80       	ldd	r14, Y+3	; 0x03
    64c6:	fe 2c       	mov	r15, r14
    64c8:	0e 2d       	mov	r16, r14
    64ca:	1e 2d       	mov	r17, r14
    64cc:	24 2d       	mov	r18, r4
    64ce:	35 2d       	mov	r19, r5
    64d0:	46 2d       	mov	r20, r6
    64d2:	57 2d       	mov	r21, r7
    64d4:	60 2f       	mov	r22, r16
    64d6:	70 2f       	mov	r23, r16
    64d8:	80 2f       	mov	r24, r16
    64da:	9e 2d       	mov	r25, r14
    64dc:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    64e0:	0f e1       	ldi	r16, 0x1F	; 31
    64e2:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    64e6:	2b 83       	std	Y+3, r18	; 0x03
    64e8:	3c 83       	std	Y+4, r19	; 0x04
    64ea:	4d 83       	std	Y+5, r20	; 0x05
    64ec:	5e 83       	std	Y+6, r21	; 0x06
    64ee:	2b 85       	ldd	r18, Y+11	; 0x0b
    64f0:	3c 85       	ldd	r19, Y+12	; 0x0c
    64f2:	4d 85       	ldd	r20, Y+13	; 0x0d
    64f4:	5e 85       	ldd	r21, Y+14	; 0x0e
    64f6:	ca 01       	movw	r24, r20
    64f8:	b9 01       	movw	r22, r18
    64fa:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <__mulsi3>
    64fe:	2b 01       	movw	r4, r22
    6500:	3c 01       	movw	r6, r24
    6502:	ad e3       	ldi	r26, 0x3D	; 61
    6504:	b0 e0       	ldi	r27, 0x00	; 0
    6506:	9b 01       	movw	r18, r22
    6508:	ac 01       	movw	r20, r24
    650a:	0e 94 fb 85 	call	0x10bf6	; 0x10bf6 <__muluhisi3>
    650e:	7b 01       	movw	r14, r22
    6510:	8c 01       	movw	r16, r24
    6512:	68 94       	set
    6514:	13 f8       	bld	r1, 3
    6516:	15 95       	asr	r17
    6518:	07 95       	ror	r16
    651a:	f7 94       	ror	r15
    651c:	e7 94       	ror	r14
    651e:	16 94       	lsr	r1
    6520:	d1 f7       	brne	.-12     	; 0x6516 <task_twi1_baro+0x2a2>
    6522:	44 0c       	add	r4, r4
    6524:	55 1c       	adc	r5, r5
    6526:	66 1c       	adc	r6, r6
    6528:	77 1c       	adc	r7, r7
    652a:	8b 89       	ldd	r24, Y+19	; 0x13
    652c:	9c 89       	ldd	r25, Y+20	; 0x14
    652e:	ad 89       	ldd	r26, Y+21	; 0x15
    6530:	be 89       	ldd	r27, Y+22	; 0x16
    6532:	84 32       	cpi	r24, 0x24	; 36
    6534:	9a 4f       	sbci	r25, 0xFA	; 250
    6536:	af 4f       	sbci	r26, 0xFF	; 255
    6538:	bf 4f       	sbci	r27, 0xFF	; 255
    653a:	c4 f5       	brge	.+112    	; 0x65ac <task_twi1_baro+0x338>
    653c:	6b a1       	ldd	r22, Y+35	; 0x23
    653e:	7c a1       	ldd	r23, Y+36	; 0x24
    6540:	8d a1       	ldd	r24, Y+37	; 0x25
    6542:	9e a1       	ldd	r25, Y+38	; 0x26
    6544:	64 55       	subi	r22, 0x54	; 84
    6546:	72 4f       	sbci	r23, 0xF2	; 242
    6548:	8f 4f       	sbci	r24, 0xFF	; 255
    654a:	9f 4f       	sbci	r25, 0xFF	; 255
    654c:	9b 01       	movw	r18, r22
    654e:	ac 01       	movw	r20, r24
    6550:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <__mulsi3>
    6554:	9b 01       	movw	r18, r22
    6556:	ac 01       	movw	r20, r24
    6558:	22 0f       	add	r18, r18
    655a:	33 1f       	adc	r19, r19
    655c:	44 1f       	adc	r20, r20
    655e:	55 1f       	adc	r21, r21
    6560:	dc 01       	movw	r26, r24
    6562:	cb 01       	movw	r24, r22
    6564:	82 0f       	add	r24, r18
    6566:	93 1f       	adc	r25, r19
    6568:	a4 1f       	adc	r26, r20
    656a:	b5 1f       	adc	r27, r21
    656c:	5c 01       	movw	r10, r24
    656e:	6d 01       	movw	r12, r26
    6570:	aa 0c       	add	r10, r10
    6572:	bb 1c       	adc	r11, r11
    6574:	cc 1c       	adc	r12, r12
    6576:	dd 1c       	adc	r13, r13
    6578:	aa 0c       	add	r10, r10
    657a:	bb 1c       	adc	r11, r11
    657c:	cc 1c       	adc	r12, r12
    657e:	dd 1c       	adc	r13, r13
    6580:	8a 0d       	add	r24, r10
    6582:	9b 1d       	adc	r25, r11
    6584:	ac 1d       	adc	r26, r12
    6586:	bd 1d       	adc	r27, r13
    6588:	e8 0e       	add	r14, r24
    658a:	f9 1e       	adc	r15, r25
    658c:	0a 1f       	adc	r16, r26
    658e:	1b 1f       	adc	r17, r27
    6590:	da 01       	movw	r26, r20
    6592:	c9 01       	movw	r24, r18
    6594:	88 0f       	add	r24, r24
    6596:	99 1f       	adc	r25, r25
    6598:	aa 1f       	adc	r26, r26
    659a:	bb 1f       	adc	r27, r27
    659c:	88 0f       	add	r24, r24
    659e:	99 1f       	adc	r25, r25
    65a0:	aa 1f       	adc	r26, r26
    65a2:	bb 1f       	adc	r27, r27
    65a4:	48 0e       	add	r4, r24
    65a6:	59 1e       	adc	r5, r25
    65a8:	6a 1e       	adc	r6, r26
    65aa:	7b 1e       	adc	r7, r27
    65ac:	2b 89       	ldd	r18, Y+19	; 0x13
    65ae:	3c 89       	ldd	r19, Y+20	; 0x14
    65b0:	4d 89       	ldd	r20, Y+21	; 0x15
    65b2:	5e 89       	ldd	r21, Y+22	; 0x16
    65b4:	6b 81       	ldd	r22, Y+3	; 0x03
    65b6:	7c 81       	ldd	r23, Y+4	; 0x04
    65b8:	8d 81       	ldd	r24, Y+5	; 0x05
    65ba:	9e 81       	ldd	r25, Y+6	; 0x06
    65bc:	26 1b       	sub	r18, r22
    65be:	37 0b       	sbc	r19, r23
    65c0:	48 0b       	sbc	r20, r24
    65c2:	59 0b       	sbc	r21, r25
    65c4:	2b 8b       	std	Y+19, r18	; 0x13
    65c6:	3c 8b       	std	Y+20, r19	; 0x14
    65c8:	4d 8b       	std	Y+21, r20	; 0x15
    65ca:	5e 8b       	std	Y+22, r21	; 0x16
    65cc:	d8 01       	movw	r26, r16
    65ce:	c7 01       	movw	r24, r14
    65d0:	bb 0f       	add	r27, r27
    65d2:	88 0b       	sbc	r24, r24
    65d4:	98 2f       	mov	r25, r24
    65d6:	dc 01       	movw	r26, r24
    65d8:	8b 83       	std	Y+3, r24	; 0x03
    65da:	9c 83       	std	Y+4, r25	; 0x04
    65dc:	ad 83       	std	Y+5, r26	; 0x05
    65de:	be 83       	std	Y+6, r27	; 0x06
    65e0:	2f 85       	ldd	r18, Y+15	; 0x0f
    65e2:	38 89       	ldd	r19, Y+16	; 0x10
    65e4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    65e6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    65e8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    65ea:	7e 8d       	ldd	r23, Y+30	; 0x1e
    65ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    65ee:	98 a1       	ldd	r25, Y+32	; 0x20
    65f0:	ae 2c       	mov	r10, r14
    65f2:	bf 2c       	mov	r11, r15
    65f4:	c0 2e       	mov	r12, r16
    65f6:	d1 2e       	mov	r13, r17
    65f8:	eb 80       	ldd	r14, Y+3	; 0x03
    65fa:	fe 2c       	mov	r15, r14
    65fc:	0e 2d       	mov	r16, r14
    65fe:	1e 2d       	mov	r17, r14
    6600:	0e 94 6c 87 	call	0x10ed8	; 0x10ed8 <__subdi3>
    6604:	2f 87       	std	Y+15, r18	; 0x0f
    6606:	38 8b       	std	Y+16, r19	; 0x10
    6608:	4b 8f       	std	Y+27, r20	; 0x1b
    660a:	5c 8f       	std	Y+28, r21	; 0x1c
    660c:	6d 8f       	std	Y+29, r22	; 0x1d
    660e:	7e 8f       	std	Y+30, r23	; 0x1e
    6610:	8f 8f       	std	Y+31, r24	; 0x1f
    6612:	98 a3       	std	Y+32, r25	; 0x20
    6614:	a3 01       	movw	r20, r6
    6616:	92 01       	movw	r18, r4
    6618:	55 0f       	add	r21, r21
    661a:	22 0b       	sbc	r18, r18
    661c:	32 2f       	mov	r19, r18
    661e:	a9 01       	movw	r20, r18
    6620:	2b 83       	std	Y+3, r18	; 0x03
    6622:	3c 83       	std	Y+4, r19	; 0x04
    6624:	4d 83       	std	Y+5, r20	; 0x05
    6626:	5e 83       	std	Y+6, r21	; 0x06
    6628:	23 2d       	mov	r18, r3
    662a:	32 2d       	mov	r19, r2
    662c:	49 89       	ldd	r20, Y+17	; 0x11
    662e:	5a 89       	ldd	r21, Y+18	; 0x12
    6630:	69 a1       	ldd	r22, Y+33	; 0x21
    6632:	7a a1       	ldd	r23, Y+34	; 0x22
    6634:	89 2d       	mov	r24, r9
    6636:	98 2d       	mov	r25, r8
    6638:	a4 2c       	mov	r10, r4
    663a:	b5 2c       	mov	r11, r5
    663c:	c6 2c       	mov	r12, r6
    663e:	d7 2c       	mov	r13, r7
    6640:	eb 80       	ldd	r14, Y+3	; 0x03
    6642:	fe 2c       	mov	r15, r14
    6644:	0e 2d       	mov	r16, r14
    6646:	1e 2d       	mov	r17, r14
    6648:	0e 94 6c 87 	call	0x10ed8	; 0x10ed8 <__subdi3>
    664c:	32 2e       	mov	r3, r18
    664e:	23 2e       	mov	r2, r19
    6650:	49 8b       	std	Y+17, r20	; 0x11
    6652:	5a 8b       	std	Y+18, r21	; 0x12
    6654:	69 a3       	std	Y+33, r22	; 0x21
    6656:	7a a3       	std	Y+34, r23	; 0x22
    6658:	98 2e       	mov	r9, r24
    665a:	89 2e       	mov	r8, r25
    665c:	8f b7       	in	r24, 0x3f	; 63
    665e:	89 83       	std	Y+1, r24	; 0x01
    6660:	f8 94       	cli
    6662:	79 80       	ldd	r7, Y+1	; 0x01
    6664:	4b 89       	ldd	r20, Y+19	; 0x13
    6666:	5c 89       	ldd	r21, Y+20	; 0x14
    6668:	6d 89       	ldd	r22, Y+21	; 0x15
    666a:	7e 89       	ldd	r23, Y+22	; 0x16
    666c:	40 93 f8 26 	sts	0x26F8, r20	; 0x8026f8 <g_twi1_baro_temp_100>
    6670:	50 93 f9 26 	sts	0x26F9, r21	; 0x8026f9 <g_twi1_baro_temp_100+0x1>
    6674:	60 93 fa 26 	sts	0x26FA, r22	; 0x8026fa <g_twi1_baro_temp_100+0x2>
    6678:	70 93 fb 26 	sts	0x26FB, r23	; 0x8026fb <g_twi1_baro_temp_100+0x3>
    667c:	4f 89       	ldd	r20, Y+23	; 0x17
    667e:	58 8d       	ldd	r21, Y+24	; 0x18
    6680:	69 8d       	ldd	r22, Y+25	; 0x19
    6682:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6684:	9a 01       	movw	r18, r20
    6686:	ab 01       	movw	r20, r22
    6688:	60 e0       	ldi	r22, 0x00	; 0
    668a:	70 e0       	ldi	r23, 0x00	; 0
    668c:	cb 01       	movw	r24, r22
    668e:	2b 83       	std	Y+3, r18	; 0x03
    6690:	3c 83       	std	Y+4, r19	; 0x04
    6692:	4d 83       	std	Y+5, r20	; 0x05
    6694:	5e 83       	std	Y+6, r21	; 0x06
    6696:	6f 83       	std	Y+7, r22	; 0x07
    6698:	78 87       	std	Y+8, r23	; 0x08
    669a:	89 87       	std	Y+9, r24	; 0x09
    669c:	9a 87       	std	Y+10, r25	; 0x0a
    669e:	a3 2c       	mov	r10, r3
    66a0:	b2 2c       	mov	r11, r2
    66a2:	c9 88       	ldd	r12, Y+17	; 0x11
    66a4:	da 88       	ldd	r13, Y+18	; 0x12
    66a6:	e9 a0       	ldd	r14, Y+33	; 0x21
    66a8:	fa a0       	ldd	r15, Y+34	; 0x22
    66aa:	09 2d       	mov	r16, r9
    66ac:	18 2d       	mov	r17, r8
    66ae:	60 e0       	ldi	r22, 0x00	; 0
    66b0:	70 e0       	ldi	r23, 0x00	; 0
    66b2:	80 e0       	ldi	r24, 0x00	; 0
    66b4:	90 e0       	ldi	r25, 0x00	; 0
    66b6:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    66ba:	05 e1       	ldi	r16, 0x15	; 21
    66bc:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    66c0:	af 84       	ldd	r10, Y+15	; 0x0f
    66c2:	b8 88       	ldd	r11, Y+16	; 0x10
    66c4:	cb 8c       	ldd	r12, Y+27	; 0x1b
    66c6:	dc 8c       	ldd	r13, Y+28	; 0x1c
    66c8:	ed 8c       	ldd	r14, Y+29	; 0x1d
    66ca:	fe 8c       	ldd	r15, Y+30	; 0x1e
    66cc:	0f 8d       	ldd	r16, Y+31	; 0x1f
    66ce:	18 a1       	ldd	r17, Y+32	; 0x20
    66d0:	0e 94 6c 87 	call	0x10ed8	; 0x10ed8 <__subdi3>
    66d4:	0f e0       	ldi	r16, 0x0F	; 15
    66d6:	0e 94 39 87 	call	0x10e72	; 0x10e72 <__ashrdi3>
    66da:	20 93 f4 26 	sts	0x26F4, r18	; 0x8026f4 <g_twi1_baro_p_100>
    66de:	30 93 f5 26 	sts	0x26F5, r19	; 0x8026f5 <g_twi1_baro_p_100+0x1>
    66e2:	40 93 f6 26 	sts	0x26F6, r20	; 0x8026f6 <g_twi1_baro_p_100+0x2>
    66e6:	50 93 f7 26 	sts	0x26F7, r21	; 0x8026f7 <g_twi1_baro_p_100+0x3>
    66ea:	7f be       	out	0x3f, r7	; 63
    66ec:	a6 96       	adiw	r28, 0x26	; 38
    66ee:	cd bf       	out	0x3d, r28	; 61
    66f0:	de bf       	out	0x3e, r29	; 62
    66f2:	df 91       	pop	r29
    66f4:	cf 91       	pop	r28
    66f6:	1f 91       	pop	r17
    66f8:	0f 91       	pop	r16
    66fa:	ff 90       	pop	r15
    66fc:	ef 90       	pop	r14
    66fe:	df 90       	pop	r13
    6700:	cf 90       	pop	r12
    6702:	bf 90       	pop	r11
    6704:	af 90       	pop	r10
    6706:	9f 90       	pop	r9
    6708:	8f 90       	pop	r8
    670a:	7f 90       	pop	r7
    670c:	6f 90       	pop	r6
    670e:	5f 90       	pop	r5
    6710:	4f 90       	pop	r4
    6712:	3f 90       	pop	r3
    6714:	2f 90       	pop	r2
    6716:	08 95       	ret

00006718 <service_twi1_baro>:
    6718:	cf 93       	push	r28
    671a:	df 93       	push	r29
    671c:	1f 92       	push	r1
    671e:	cd b7       	in	r28, 0x3d	; 61
    6720:	de b7       	in	r29, 0x3e	; 62
    6722:	44 23       	and	r20, r20
    6724:	59 f0       	breq	.+22     	; 0x673c <service_twi1_baro+0x24>
    6726:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <s_step.8016>
    672a:	84 36       	cpi	r24, 0x64	; 100
    672c:	08 f4       	brcc	.+2      	; 0x6730 <service_twi1_baro+0x18>
    672e:	cb c0       	rjmp	.+406    	; 0x68c6 <service_twi1_baro+0x1ae>
    6730:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <s_step.8016>
    6734:	81 e0       	ldi	r24, 0x01	; 1
    6736:	80 93 5d 26 	sts	0x265D, r24	; 0x80265d <g_twi1_lock>
    673a:	09 c0       	rjmp	.+18     	; 0x674e <service_twi1_baro+0x36>
    673c:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <s_step.8016>
    6740:	85 31       	cpi	r24, 0x15	; 21
    6742:	19 f1       	breq	.+70     	; 0x678a <service_twi1_baro+0x72>
    6744:	8b 32       	cpi	r24, 0x2B	; 43
    6746:	09 f4       	brne	.+2      	; 0x674a <service_twi1_baro+0x32>
    6748:	5d c0       	rjmp	.+186    	; 0x6804 <service_twi1_baro+0xec>
    674a:	81 11       	cpse	r24, r1
    674c:	b1 c0       	rjmp	.+354    	; 0x68b0 <service_twi1_baro+0x198>
    674e:	eb e2       	ldi	r30, 0x2B	; 43
    6750:	f0 e2       	ldi	r31, 0x20	; 32
    6752:	86 e7       	ldi	r24, 0x76	; 118
    6754:	80 83       	st	Z, r24
    6756:	88 e4       	ldi	r24, 0x48	; 72
    6758:	81 83       	std	Z+1, r24	; 0x01
    675a:	81 e0       	ldi	r24, 0x01	; 1
    675c:	90 e0       	ldi	r25, 0x00	; 0
    675e:	84 83       	std	Z+4, r24	; 0x04
    6760:	95 83       	std	Z+5, r25	; 0x05
    6762:	10 86       	std	Z+8, r1	; 0x08
    6764:	11 86       	std	Z+9, r1	; 0x09
    6766:	40 e0       	ldi	r20, 0x00	; 0
    6768:	bf 01       	movw	r22, r30
    676a:	80 ea       	ldi	r24, 0xA0	; 160
    676c:	94 e0       	ldi	r25, 0x04	; 4
    676e:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6772:	81 11       	cpse	r24, r1
    6774:	05 c0       	rjmp	.+10     	; 0x6780 <service_twi1_baro+0x68>
    6776:	81 e0       	ldi	r24, 0x01	; 1
    6778:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8016>
    677c:	80 e0       	ldi	r24, 0x00	; 0
    677e:	ac c0       	rjmp	.+344    	; 0x68d8 <service_twi1_baro+0x1c0>
    6780:	88 ec       	ldi	r24, 0xC8	; 200
    6782:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8016>
    6786:	80 e0       	ldi	r24, 0x00	; 0
    6788:	a7 c0       	rjmp	.+334    	; 0x68d8 <service_twi1_baro+0x1c0>
    678a:	eb e2       	ldi	r30, 0x2B	; 43
    678c:	f0 e2       	ldi	r31, 0x20	; 32
    678e:	11 82       	std	Z+1, r1	; 0x01
    6790:	83 e0       	ldi	r24, 0x03	; 3
    6792:	90 e0       	ldi	r25, 0x00	; 0
    6794:	80 87       	std	Z+8, r24	; 0x08
    6796:	91 87       	std	Z+9, r25	; 0x09
    6798:	41 e0       	ldi	r20, 0x01	; 1
    679a:	bf 01       	movw	r22, r30
    679c:	80 ea       	ldi	r24, 0xA0	; 160
    679e:	94 e0       	ldi	r25, 0x04	; 4
    67a0:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    67a4:	81 11       	cpse	r24, r1
    67a6:	29 c0       	rjmp	.+82     	; 0x67fa <service_twi1_baro+0xe2>
    67a8:	e3 e1       	ldi	r30, 0x13	; 19
    67aa:	f5 e2       	ldi	r31, 0x25	; 37
    67ac:	20 81       	ld	r18, Z
    67ae:	81 81       	ldd	r24, Z+1	; 0x01
    67b0:	90 e0       	ldi	r25, 0x00	; 0
    67b2:	a0 e0       	ldi	r26, 0x00	; 0
    67b4:	b0 e0       	ldi	r27, 0x00	; 0
    67b6:	ba 2f       	mov	r27, r26
    67b8:	a9 2f       	mov	r26, r25
    67ba:	98 2f       	mov	r25, r24
    67bc:	88 27       	eor	r24, r24
    67be:	a2 2b       	or	r26, r18
    67c0:	22 81       	ldd	r18, Z+2	; 0x02
    67c2:	82 2b       	or	r24, r18
    67c4:	80 93 09 23 	sts	0x2309, r24	; 0x802309 <s_twi1_baro_d1.8017>
    67c8:	90 93 0a 23 	sts	0x230A, r25	; 0x80230a <s_twi1_baro_d1.8017+0x1>
    67cc:	a0 93 0b 23 	sts	0x230B, r26	; 0x80230b <s_twi1_baro_d1.8017+0x2>
    67d0:	b0 93 0c 23 	sts	0x230C, r27	; 0x80230c <s_twi1_baro_d1.8017+0x3>
    67d4:	eb e2       	ldi	r30, 0x2B	; 43
    67d6:	f0 e2       	ldi	r31, 0x20	; 32
    67d8:	88 e5       	ldi	r24, 0x58	; 88
    67da:	81 83       	std	Z+1, r24	; 0x01
    67dc:	10 86       	std	Z+8, r1	; 0x08
    67de:	11 86       	std	Z+9, r1	; 0x09
    67e0:	40 e0       	ldi	r20, 0x00	; 0
    67e2:	bf 01       	movw	r22, r30
    67e4:	80 ea       	ldi	r24, 0xA0	; 160
    67e6:	94 e0       	ldi	r25, 0x04	; 4
    67e8:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    67ec:	81 11       	cpse	r24, r1
    67ee:	05 c0       	rjmp	.+10     	; 0x67fa <service_twi1_baro+0xe2>
    67f0:	86 e1       	ldi	r24, 0x16	; 22
    67f2:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8016>
    67f6:	80 e0       	ldi	r24, 0x00	; 0
    67f8:	6f c0       	rjmp	.+222    	; 0x68d8 <service_twi1_baro+0x1c0>
    67fa:	83 ed       	ldi	r24, 0xD3	; 211
    67fc:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8016>
    6800:	80 e0       	ldi	r24, 0x00	; 0
    6802:	6a c0       	rjmp	.+212    	; 0x68d8 <service_twi1_baro+0x1c0>
    6804:	eb e2       	ldi	r30, 0x2B	; 43
    6806:	f0 e2       	ldi	r31, 0x20	; 32
    6808:	11 82       	std	Z+1, r1	; 0x01
    680a:	83 e0       	ldi	r24, 0x03	; 3
    680c:	90 e0       	ldi	r25, 0x00	; 0
    680e:	80 87       	std	Z+8, r24	; 0x08
    6810:	91 87       	std	Z+9, r25	; 0x09
    6812:	41 e0       	ldi	r20, 0x01	; 1
    6814:	bf 01       	movw	r22, r30
    6816:	80 ea       	ldi	r24, 0xA0	; 160
    6818:	94 e0       	ldi	r25, 0x04	; 4
    681a:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    681e:	81 11       	cpse	r24, r1
    6820:	42 c0       	rjmp	.+132    	; 0x68a6 <service_twi1_baro+0x18e>
    6822:	e3 e1       	ldi	r30, 0x13	; 19
    6824:	f5 e2       	ldi	r31, 0x25	; 37
    6826:	20 81       	ld	r18, Z
    6828:	81 81       	ldd	r24, Z+1	; 0x01
    682a:	90 e0       	ldi	r25, 0x00	; 0
    682c:	a0 e0       	ldi	r26, 0x00	; 0
    682e:	b0 e0       	ldi	r27, 0x00	; 0
    6830:	ba 2f       	mov	r27, r26
    6832:	a9 2f       	mov	r26, r25
    6834:	98 2f       	mov	r25, r24
    6836:	88 27       	eor	r24, r24
    6838:	a2 2b       	or	r26, r18
    683a:	22 81       	ldd	r18, Z+2	; 0x02
    683c:	82 2b       	or	r24, r18
    683e:	80 93 05 23 	sts	0x2305, r24	; 0x802305 <s_twi1_baro_d2.8018>
    6842:	90 93 06 23 	sts	0x2306, r25	; 0x802306 <s_twi1_baro_d2.8018+0x1>
    6846:	a0 93 07 23 	sts	0x2307, r26	; 0x802307 <s_twi1_baro_d2.8018+0x2>
    684a:	b0 93 08 23 	sts	0x2308, r27	; 0x802308 <s_twi1_baro_d2.8018+0x3>
    684e:	8f b7       	in	r24, 0x3f	; 63
    6850:	89 83       	std	Y+1, r24	; 0x01
    6852:	f8 94       	cli
    6854:	89 81       	ldd	r24, Y+1	; 0x01
    6856:	40 91 09 23 	lds	r20, 0x2309	; 0x802309 <s_twi1_baro_d1.8017>
    685a:	50 91 0a 23 	lds	r21, 0x230A	; 0x80230a <s_twi1_baro_d1.8017+0x1>
    685e:	60 91 0b 23 	lds	r22, 0x230B	; 0x80230b <s_twi1_baro_d1.8017+0x2>
    6862:	70 91 0c 23 	lds	r23, 0x230C	; 0x80230c <s_twi1_baro_d1.8017+0x3>
    6866:	40 93 00 27 	sts	0x2700, r20	; 0x802700 <g_twi1_baro_d1>
    686a:	50 93 01 27 	sts	0x2701, r21	; 0x802701 <g_twi1_baro_d1+0x1>
    686e:	60 93 02 27 	sts	0x2702, r22	; 0x802702 <g_twi1_baro_d1+0x2>
    6872:	70 93 03 27 	sts	0x2703, r23	; 0x802703 <g_twi1_baro_d1+0x3>
    6876:	40 91 05 23 	lds	r20, 0x2305	; 0x802305 <s_twi1_baro_d2.8018>
    687a:	50 91 06 23 	lds	r21, 0x2306	; 0x802306 <s_twi1_baro_d2.8018+0x1>
    687e:	60 91 07 23 	lds	r22, 0x2307	; 0x802307 <s_twi1_baro_d2.8018+0x2>
    6882:	70 91 08 23 	lds	r23, 0x2308	; 0x802308 <s_twi1_baro_d2.8018+0x3>
    6886:	40 93 fc 26 	sts	0x26FC, r20	; 0x8026fc <g_twi1_baro_d2>
    688a:	50 93 fd 26 	sts	0x26FD, r21	; 0x8026fd <g_twi1_baro_d2+0x1>
    688e:	60 93 fe 26 	sts	0x26FE, r22	; 0x8026fe <g_twi1_baro_d2+0x2>
    6892:	70 93 ff 26 	sts	0x26FF, r23	; 0x8026ff <g_twi1_baro_d2+0x3>
    6896:	8f bf       	out	0x3f, r24	; 63
    6898:	8b e7       	ldi	r24, 0x7B	; 123
    689a:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8016>
    689e:	10 92 5d 26 	sts	0x265D, r1	; 0x80265d <g_twi1_lock>
    68a2:	81 e0       	ldi	r24, 0x01	; 1
    68a4:	19 c0       	rjmp	.+50     	; 0x68d8 <service_twi1_baro+0x1c0>
    68a6:	8f ed       	ldi	r24, 0xDF	; 223
    68a8:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8016>
    68ac:	80 e0       	ldi	r24, 0x00	; 0
    68ae:	14 c0       	rjmp	.+40     	; 0x68d8 <service_twi1_baro+0x1c0>
    68b0:	84 36       	cpi	r24, 0x64	; 100
    68b2:	28 f4       	brcc	.+10     	; 0x68be <service_twi1_baro+0x1a6>
    68b4:	8f 5f       	subi	r24, 0xFF	; 255
    68b6:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8016>
    68ba:	80 e0       	ldi	r24, 0x00	; 0
    68bc:	0d c0       	rjmp	.+26     	; 0x68d8 <service_twi1_baro+0x1c0>
    68be:	10 92 5d 26 	sts	0x265D, r1	; 0x80265d <g_twi1_lock>
    68c2:	80 e0       	ldi	r24, 0x00	; 0
    68c4:	09 c0       	rjmp	.+18     	; 0x68d8 <service_twi1_baro+0x1c0>
    68c6:	85 31       	cpi	r24, 0x15	; 21
    68c8:	09 f4       	brne	.+2      	; 0x68cc <service_twi1_baro+0x1b4>
    68ca:	5f cf       	rjmp	.-322    	; 0x678a <service_twi1_baro+0x72>
    68cc:	8b 32       	cpi	r24, 0x2B	; 43
    68ce:	09 f4       	brne	.+2      	; 0x68d2 <service_twi1_baro+0x1ba>
    68d0:	99 cf       	rjmp	.-206    	; 0x6804 <service_twi1_baro+0xec>
    68d2:	81 11       	cpse	r24, r1
    68d4:	ef cf       	rjmp	.-34     	; 0x68b4 <service_twi1_baro+0x19c>
    68d6:	3b cf       	rjmp	.-394    	; 0x674e <service_twi1_baro+0x36>
    68d8:	0f 90       	pop	r0
    68da:	df 91       	pop	r29
    68dc:	cf 91       	pop	r28
    68de:	08 95       	ret

000068e0 <twi2_waitUntilReady>:
    68e0:	cf 92       	push	r12
    68e2:	df 92       	push	r13
    68e4:	ef 92       	push	r14
    68e6:	ff 92       	push	r15
    68e8:	0f 93       	push	r16
    68ea:	1f 93       	push	r17
    68ec:	cf 93       	push	r28
    68ee:	e7 e1       	ldi	r30, 0x17	; 23
    68f0:	f0 e2       	ldi	r31, 0x20	; 32
    68f2:	83 e0       	ldi	r24, 0x03	; 3
    68f4:	81 83       	std	Z+1, r24	; 0x01
    68f6:	81 e0       	ldi	r24, 0x01	; 1
    68f8:	90 e0       	ldi	r25, 0x00	; 0
    68fa:	84 83       	std	Z+4, r24	; 0x04
    68fc:	95 83       	std	Z+5, r25	; 0x05
    68fe:	8f 01       	movw	r16, r30
    6900:	cc 24       	eor	r12, r12
    6902:	c3 94       	inc	r12
    6904:	d1 2c       	mov	r13, r1
    6906:	0f 2e       	mov	r0, r31
    6908:	fb e0       	ldi	r31, 0x0B	; 11
    690a:	ef 2e       	mov	r14, r31
    690c:	f5 e2       	ldi	r31, 0x25	; 37
    690e:	ff 2e       	mov	r15, r31
    6910:	f0 2d       	mov	r31, r0
    6912:	f8 01       	movw	r30, r16
    6914:	c0 86       	std	Z+8, r12	; 0x08
    6916:	d1 86       	std	Z+9, r13	; 0x09
    6918:	41 e0       	ldi	r20, 0x01	; 1
    691a:	b8 01       	movw	r22, r16
    691c:	80 e8       	ldi	r24, 0x80	; 128
    691e:	94 e0       	ldi	r25, 0x04	; 4
    6920:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6924:	f7 01       	movw	r30, r14
    6926:	c0 81       	ld	r28, Z
    6928:	9c 2f       	mov	r25, r28
    692a:	90 78       	andi	r25, 0x80	; 128
    692c:	81 11       	cpse	r24, r1
    692e:	0d c0       	rjmp	.+26     	; 0x694a <twi2_waitUntilReady+0x6a>
    6930:	91 f0       	breq	.+36     	; 0x6956 <twi2_waitUntilReady+0x76>
    6932:	8c 2f       	mov	r24, r28
    6934:	81 78       	andi	r24, 0x81	; 129
    6936:	81 38       	cpi	r24, 0x81	; 129
    6938:	29 f4       	brne	.+10     	; 0x6944 <twi2_waitUntilReady+0x64>
    693a:	65 ef       	ldi	r22, 0xF5	; 245
    693c:	71 e0       	ldi	r23, 0x01	; 1
    693e:	80 e0       	ldi	r24, 0x00	; 0
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	68 d9       	rcall	.-3376   	; 0x5c14 <__portable_avr_delay_cycles>
    6944:	c0 fd       	sbrc	r28, 0
    6946:	e5 cf       	rjmp	.-54     	; 0x6912 <twi2_waitUntilReady+0x32>
    6948:	0c c0       	rjmp	.+24     	; 0x6962 <twi2_waitUntilReady+0x82>
    694a:	65 e0       	ldi	r22, 0x05	; 5
    694c:	70 e0       	ldi	r23, 0x00	; 0
    694e:	80 e0       	ldi	r24, 0x00	; 0
    6950:	90 e0       	ldi	r25, 0x00	; 0
    6952:	60 d9       	rcall	.-3392   	; 0x5c14 <__portable_avr_delay_cycles>
    6954:	de cf       	rjmp	.-68     	; 0x6912 <twi2_waitUntilReady+0x32>
    6956:	65 e0       	ldi	r22, 0x05	; 5
    6958:	70 e0       	ldi	r23, 0x00	; 0
    695a:	80 e0       	ldi	r24, 0x00	; 0
    695c:	90 e0       	ldi	r25, 0x00	; 0
    695e:	5a d9       	rcall	.-3404   	; 0x5c14 <__portable_avr_delay_cycles>
    6960:	d8 cf       	rjmp	.-80     	; 0x6912 <twi2_waitUntilReady+0x32>
    6962:	cf 91       	pop	r28
    6964:	1f 91       	pop	r17
    6966:	0f 91       	pop	r16
    6968:	ff 90       	pop	r15
    696a:	ef 90       	pop	r14
    696c:	df 90       	pop	r13
    696e:	cf 90       	pop	r12
    6970:	08 95       	ret

00006972 <twi2_set_leds>:
    6972:	cf 93       	push	r28
    6974:	c8 2f       	mov	r28, r24
    6976:	b4 df       	rcall	.-152    	; 0x68e0 <twi2_waitUntilReady>
    6978:	e7 e1       	ldi	r30, 0x17	; 23
    697a:	f0 e2       	ldi	r31, 0x20	; 32
    697c:	80 e7       	ldi	r24, 0x70	; 112
    697e:	81 83       	std	Z+1, r24	; 0x01
    6980:	c3 70       	andi	r28, 0x03	; 3
    6982:	c0 93 0b 25 	sts	0x250B, r28	; 0x80250b <twi2_m_data>
    6986:	81 e0       	ldi	r24, 0x01	; 1
    6988:	90 e0       	ldi	r25, 0x00	; 0
    698a:	80 87       	std	Z+8, r24	; 0x08
    698c:	91 87       	std	Z+9, r25	; 0x09
    698e:	40 e0       	ldi	r20, 0x00	; 0
    6990:	bf 01       	movw	r22, r30
    6992:	80 e8       	ldi	r24, 0x80	; 128
    6994:	94 e0       	ldi	r25, 0x04	; 4
    6996:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    699a:	65 e0       	ldi	r22, 0x05	; 5
    699c:	70 e0       	ldi	r23, 0x00	; 0
    699e:	80 e0       	ldi	r24, 0x00	; 0
    69a0:	90 e0       	ldi	r25, 0x00	; 0
    69a2:	38 d9       	rcall	.-3472   	; 0x5c14 <__portable_avr_delay_cycles>
    69a4:	cf 91       	pop	r28
    69a6:	08 95       	ret

000069a8 <twi2_set_ledbl>:
    69a8:	cf 93       	push	r28
    69aa:	df 93       	push	r29
    69ac:	d8 2f       	mov	r29, r24
    69ae:	c6 2f       	mov	r28, r22
    69b0:	97 df       	rcall	.-210    	; 0x68e0 <twi2_waitUntilReady>
    69b2:	e7 e1       	ldi	r30, 0x17	; 23
    69b4:	f0 e2       	ldi	r31, 0x20	; 32
    69b6:	84 e7       	ldi	r24, 0x74	; 116
    69b8:	81 83       	std	Z+1, r24	; 0x01
    69ba:	ab e0       	ldi	r26, 0x0B	; 11
    69bc:	b5 e2       	ldi	r27, 0x25	; 37
    69be:	dc 93       	st	X, r29
    69c0:	11 96       	adiw	r26, 0x01	; 1
    69c2:	cc 93       	st	X, r28
    69c4:	82 e0       	ldi	r24, 0x02	; 2
    69c6:	90 e0       	ldi	r25, 0x00	; 0
    69c8:	80 87       	std	Z+8, r24	; 0x08
    69ca:	91 87       	std	Z+9, r25	; 0x09
    69cc:	40 e0       	ldi	r20, 0x00	; 0
    69ce:	bf 01       	movw	r22, r30
    69d0:	80 e8       	ldi	r24, 0x80	; 128
    69d2:	94 e0       	ldi	r25, 0x04	; 4
    69d4:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    69d8:	65 e0       	ldi	r22, 0x05	; 5
    69da:	70 e0       	ldi	r23, 0x00	; 0
    69dc:	80 e0       	ldi	r24, 0x00	; 0
    69de:	90 e0       	ldi	r25, 0x00	; 0
    69e0:	19 d9       	rcall	.-3534   	; 0x5c14 <__portable_avr_delay_cycles>
    69e2:	df 91       	pop	r29
    69e4:	cf 91       	pop	r28
    69e6:	08 95       	ret

000069e8 <twi2_set_bias>:
    69e8:	cf 93       	push	r28
    69ea:	c8 2f       	mov	r28, r24
    69ec:	79 df       	rcall	.-270    	; 0x68e0 <twi2_waitUntilReady>
    69ee:	e7 e1       	ldi	r30, 0x17	; 23
    69f0:	f0 e2       	ldi	r31, 0x20	; 32
    69f2:	85 e7       	ldi	r24, 0x75	; 117
    69f4:	81 83       	std	Z+1, r24	; 0x01
    69f6:	c0 93 0b 25 	sts	0x250B, r28	; 0x80250b <twi2_m_data>
    69fa:	81 e0       	ldi	r24, 0x01	; 1
    69fc:	90 e0       	ldi	r25, 0x00	; 0
    69fe:	80 87       	std	Z+8, r24	; 0x08
    6a00:	91 87       	std	Z+9, r25	; 0x09
    6a02:	40 e0       	ldi	r20, 0x00	; 0
    6a04:	bf 01       	movw	r22, r30
    6a06:	80 e8       	ldi	r24, 0x80	; 128
    6a08:	94 e0       	ldi	r25, 0x04	; 4
    6a0a:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6a0e:	65 e0       	ldi	r22, 0x05	; 5
    6a10:	70 e0       	ldi	r23, 0x00	; 0
    6a12:	80 e0       	ldi	r24, 0x00	; 0
    6a14:	90 e0       	ldi	r25, 0x00	; 0
    6a16:	fe d8       	rcall	.-3588   	; 0x5c14 <__portable_avr_delay_cycles>
    6a18:	cf 91       	pop	r28
    6a1a:	08 95       	ret

00006a1c <twi2_set_beep>:
    6a1c:	cf 93       	push	r28
    6a1e:	df 93       	push	r29
    6a20:	c8 2f       	mov	r28, r24
    6a22:	d6 2f       	mov	r29, r22
    6a24:	5d df       	rcall	.-326    	; 0x68e0 <twi2_waitUntilReady>
    6a26:	e7 e1       	ldi	r30, 0x17	; 23
    6a28:	f0 e2       	ldi	r31, 0x20	; 32
    6a2a:	81 e7       	ldi	r24, 0x71	; 113
    6a2c:	81 83       	std	Z+1, r24	; 0x01
    6a2e:	ab e0       	ldi	r26, 0x0B	; 11
    6a30:	b5 e2       	ldi	r27, 0x25	; 37
    6a32:	dc 93       	st	X, r29
    6a34:	11 96       	adiw	r26, 0x01	; 1
    6a36:	cc 93       	st	X, r28
    6a38:	82 e0       	ldi	r24, 0x02	; 2
    6a3a:	90 e0       	ldi	r25, 0x00	; 0
    6a3c:	80 87       	std	Z+8, r24	; 0x08
    6a3e:	91 87       	std	Z+9, r25	; 0x09
    6a40:	40 e0       	ldi	r20, 0x00	; 0
    6a42:	bf 01       	movw	r22, r30
    6a44:	80 e8       	ldi	r24, 0x80	; 128
    6a46:	94 e0       	ldi	r25, 0x04	; 4
    6a48:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6a4c:	65 e0       	ldi	r22, 0x05	; 5
    6a4e:	70 e0       	ldi	r23, 0x00	; 0
    6a50:	80 e0       	ldi	r24, 0x00	; 0
    6a52:	90 e0       	ldi	r25, 0x00	; 0
    6a54:	df d8       	rcall	.-3650   	; 0x5c14 <__portable_avr_delay_cycles>
    6a56:	df 91       	pop	r29
    6a58:	cf 91       	pop	r28
    6a5a:	08 95       	ret

00006a5c <twi1_gyro_gyro_offset_set>:
    6a5c:	ab e2       	ldi	r26, 0x2B	; 43
    6a5e:	b0 e2       	ldi	r27, 0x20	; 32
    6a60:	88 e6       	ldi	r24, 0x68	; 104
    6a62:	8c 93       	st	X, r24
    6a64:	83 e1       	ldi	r24, 0x13	; 19
    6a66:	11 96       	adiw	r26, 0x01	; 1
    6a68:	8c 93       	st	X, r24
    6a6a:	11 97       	sbiw	r26, 0x01	; 1
    6a6c:	81 e0       	ldi	r24, 0x01	; 1
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	14 96       	adiw	r26, 0x04	; 4
    6a72:	8d 93       	st	X+, r24
    6a74:	9c 93       	st	X, r25
    6a76:	15 97       	sbiw	r26, 0x05	; 5
    6a78:	80 91 4a 27 	lds	r24, 0x274A	; 0x80274a <g_twi1_gyro_1_gyro_ofsx>
    6a7c:	90 91 4b 27 	lds	r25, 0x274B	; 0x80274b <g_twi1_gyro_1_gyro_ofsx+0x1>
    6a80:	e3 e1       	ldi	r30, 0x13	; 19
    6a82:	f5 e2       	ldi	r31, 0x25	; 37
    6a84:	90 83       	st	Z, r25
    6a86:	81 83       	std	Z+1, r24	; 0x01
    6a88:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <g_twi1_gyro_1_gyro_ofsy>
    6a8c:	90 91 49 27 	lds	r25, 0x2749	; 0x802749 <g_twi1_gyro_1_gyro_ofsy+0x1>
    6a90:	92 83       	std	Z+2, r25	; 0x02
    6a92:	83 83       	std	Z+3, r24	; 0x03
    6a94:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <g_twi1_gyro_1_gyro_ofsz>
    6a98:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <g_twi1_gyro_1_gyro_ofsz+0x1>
    6a9c:	94 83       	std	Z+4, r25	; 0x04
    6a9e:	85 83       	std	Z+5, r24	; 0x05
    6aa0:	86 e0       	ldi	r24, 0x06	; 6
    6aa2:	90 e0       	ldi	r25, 0x00	; 0
    6aa4:	18 96       	adiw	r26, 0x08	; 8
    6aa6:	8d 93       	st	X+, r24
    6aa8:	9c 93       	st	X, r25
    6aaa:	19 97       	sbiw	r26, 0x09	; 9
    6aac:	40 e0       	ldi	r20, 0x00	; 0
    6aae:	bd 01       	movw	r22, r26
    6ab0:	80 ea       	ldi	r24, 0xA0	; 160
    6ab2:	94 e0       	ldi	r25, 0x04	; 4
    6ab4:	0c 94 59 54 	jmp	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6ab8:	08 95       	ret

00006aba <twi1_gyro_accel_offset_set>:
    6aba:	eb e2       	ldi	r30, 0x2B	; 43
    6abc:	f0 e2       	ldi	r31, 0x20	; 32
    6abe:	88 e6       	ldi	r24, 0x68	; 104
    6ac0:	80 83       	st	Z, r24
    6ac2:	87 e7       	ldi	r24, 0x77	; 119
    6ac4:	81 83       	std	Z+1, r24	; 0x01
    6ac6:	81 e0       	ldi	r24, 0x01	; 1
    6ac8:	90 e0       	ldi	r25, 0x00	; 0
    6aca:	84 83       	std	Z+4, r24	; 0x04
    6acc:	95 83       	std	Z+5, r25	; 0x05
    6ace:	80 91 62 27 	lds	r24, 0x2762	; 0x802762 <g_twi1_gyro_1_accel_ofsx>
    6ad2:	90 91 63 27 	lds	r25, 0x2763	; 0x802763 <g_twi1_gyro_1_accel_ofsx+0x1>
    6ad6:	a3 e1       	ldi	r26, 0x13	; 19
    6ad8:	b5 e2       	ldi	r27, 0x25	; 37
    6ada:	9c 01       	movw	r18, r24
    6adc:	22 0f       	add	r18, r18
    6ade:	23 2f       	mov	r18, r19
    6ae0:	22 1f       	adc	r18, r18
    6ae2:	33 0b       	sbc	r19, r19
    6ae4:	31 95       	neg	r19
    6ae6:	2c 93       	st	X, r18
    6ae8:	88 0f       	add	r24, r24
    6aea:	11 96       	adiw	r26, 0x01	; 1
    6aec:	8c 93       	st	X, r24
    6aee:	82 e0       	ldi	r24, 0x02	; 2
    6af0:	90 e0       	ldi	r25, 0x00	; 0
    6af2:	80 87       	std	Z+8, r24	; 0x08
    6af4:	91 87       	std	Z+9, r25	; 0x09
    6af6:	40 e0       	ldi	r20, 0x00	; 0
    6af8:	bf 01       	movw	r22, r30
    6afa:	80 ea       	ldi	r24, 0xA0	; 160
    6afc:	94 e0       	ldi	r25, 0x04	; 4
    6afe:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6b02:	81 11       	cpse	r24, r1
    6b04:	34 c0       	rjmp	.+104    	; 0x6b6e <twi1_gyro_accel_offset_set+0xb4>
    6b06:	8a e7       	ldi	r24, 0x7A	; 122
    6b08:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <twi1_packet+0x1>
    6b0c:	80 91 60 27 	lds	r24, 0x2760	; 0x802760 <g_twi1_gyro_1_accel_ofsy>
    6b10:	90 91 61 27 	lds	r25, 0x2761	; 0x802761 <g_twi1_gyro_1_accel_ofsy+0x1>
    6b14:	e3 e1       	ldi	r30, 0x13	; 19
    6b16:	f5 e2       	ldi	r31, 0x25	; 37
    6b18:	9c 01       	movw	r18, r24
    6b1a:	22 0f       	add	r18, r18
    6b1c:	23 2f       	mov	r18, r19
    6b1e:	22 1f       	adc	r18, r18
    6b20:	33 0b       	sbc	r19, r19
    6b22:	31 95       	neg	r19
    6b24:	20 83       	st	Z, r18
    6b26:	88 0f       	add	r24, r24
    6b28:	81 83       	std	Z+1, r24	; 0x01
    6b2a:	40 e0       	ldi	r20, 0x00	; 0
    6b2c:	6b e2       	ldi	r22, 0x2B	; 43
    6b2e:	70 e2       	ldi	r23, 0x20	; 32
    6b30:	80 ea       	ldi	r24, 0xA0	; 160
    6b32:	94 e0       	ldi	r25, 0x04	; 4
    6b34:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6b38:	81 11       	cpse	r24, r1
    6b3a:	19 c0       	rjmp	.+50     	; 0x6b6e <twi1_gyro_accel_offset_set+0xb4>
    6b3c:	8d e7       	ldi	r24, 0x7D	; 125
    6b3e:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <twi1_packet+0x1>
    6b42:	80 91 5e 27 	lds	r24, 0x275E	; 0x80275e <g_twi1_gyro_1_accel_ofsz>
    6b46:	90 91 5f 27 	lds	r25, 0x275F	; 0x80275f <g_twi1_gyro_1_accel_ofsz+0x1>
    6b4a:	e3 e1       	ldi	r30, 0x13	; 19
    6b4c:	f5 e2       	ldi	r31, 0x25	; 37
    6b4e:	9c 01       	movw	r18, r24
    6b50:	22 0f       	add	r18, r18
    6b52:	23 2f       	mov	r18, r19
    6b54:	22 1f       	adc	r18, r18
    6b56:	33 0b       	sbc	r19, r19
    6b58:	31 95       	neg	r19
    6b5a:	20 83       	st	Z, r18
    6b5c:	88 0f       	add	r24, r24
    6b5e:	81 83       	std	Z+1, r24	; 0x01
    6b60:	40 e0       	ldi	r20, 0x00	; 0
    6b62:	6b e2       	ldi	r22, 0x2B	; 43
    6b64:	70 e2       	ldi	r23, 0x20	; 32
    6b66:	80 ea       	ldi	r24, 0xA0	; 160
    6b68:	94 e0       	ldi	r25, 0x04	; 4
    6b6a:	0c 94 59 54 	jmp	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6b6e:	08 95       	ret

00006b70 <twi_init>:
    6b70:	e0 e8       	ldi	r30, 0x80	; 128
    6b72:	f6 e0       	ldi	r31, 0x06	; 6
    6b74:	88 e3       	ldi	r24, 0x38	; 56
    6b76:	80 8b       	std	Z+16, r24	; 0x10
    6b78:	81 8b       	std	Z+17, r24	; 0x11
    6b7a:	e0 e4       	ldi	r30, 0x40	; 64
    6b7c:	f6 e0       	ldi	r31, 0x06	; 6
    6b7e:	80 8b       	std	Z+16, r24	; 0x10
    6b80:	81 8b       	std	Z+17, r24	; 0x11
    6b82:	08 95       	ret

00006b84 <isr_100ms_twi1_onboard>:
    6b84:	cf 92       	push	r12
    6b86:	ef 92       	push	r14
    6b88:	0f 93       	push	r16
    6b8a:	78 94       	sei
    6b8c:	80 91 73 27 	lds	r24, 0x2773	; 0x802773 <g_twi1_gyro_valid>
    6b90:	88 23       	and	r24, r24
    6b92:	09 f4       	brne	.+2      	; 0x6b96 <isr_100ms_twi1_onboard+0x12>
    6b94:	10 c1       	rjmp	.+544    	; 0x6db6 <isr_100ms_twi1_onboard+0x232>
    6b96:	80 91 5d 26 	lds	r24, 0x265D	; 0x80265d <g_twi1_lock>
    6b9a:	81 11       	cpse	r24, r1
    6b9c:	0c c1       	rjmp	.+536    	; 0x6db6 <isr_100ms_twi1_onboard+0x232>
    6b9e:	eb e2       	ldi	r30, 0x2B	; 43
    6ba0:	f0 e2       	ldi	r31, 0x20	; 32
    6ba2:	88 e6       	ldi	r24, 0x68	; 104
    6ba4:	80 83       	st	Z, r24
    6ba6:	8b e3       	ldi	r24, 0x3B	; 59
    6ba8:	81 83       	std	Z+1, r24	; 0x01
    6baa:	81 e0       	ldi	r24, 0x01	; 1
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	84 83       	std	Z+4, r24	; 0x04
    6bb0:	95 83       	std	Z+5, r25	; 0x05
    6bb2:	88 e0       	ldi	r24, 0x08	; 8
    6bb4:	90 e0       	ldi	r25, 0x00	; 0
    6bb6:	80 87       	std	Z+8, r24	; 0x08
    6bb8:	91 87       	std	Z+9, r25	; 0x09
    6bba:	41 e0       	ldi	r20, 0x01	; 1
    6bbc:	bf 01       	movw	r22, r30
    6bbe:	80 ea       	ldi	r24, 0xA0	; 160
    6bc0:	94 e0       	ldi	r25, 0x04	; 4
    6bc2:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6bc6:	81 11       	cpse	r24, r1
    6bc8:	f6 c0       	rjmp	.+492    	; 0x6db6 <isr_100ms_twi1_onboard+0x232>
    6bca:	e3 e1       	ldi	r30, 0x13	; 19
    6bcc:	f5 e2       	ldi	r31, 0x25	; 37
    6bce:	80 81       	ld	r24, Z
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	98 2f       	mov	r25, r24
    6bd4:	88 27       	eor	r24, r24
    6bd6:	21 81       	ldd	r18, Z+1	; 0x01
    6bd8:	82 2b       	or	r24, r18
    6bda:	80 93 68 27 	sts	0x2768, r24	; 0x802768 <g_twi1_gyro_1_accel_x>
    6bde:	90 93 69 27 	sts	0x2769, r25	; 0x802769 <g_twi1_gyro_1_accel_x+0x1>
    6be2:	82 81       	ldd	r24, Z+2	; 0x02
    6be4:	90 e0       	ldi	r25, 0x00	; 0
    6be6:	98 2f       	mov	r25, r24
    6be8:	88 27       	eor	r24, r24
    6bea:	23 81       	ldd	r18, Z+3	; 0x03
    6bec:	82 2b       	or	r24, r18
    6bee:	80 93 66 27 	sts	0x2766, r24	; 0x802766 <g_twi1_gyro_1_accel_y>
    6bf2:	90 93 67 27 	sts	0x2767, r25	; 0x802767 <g_twi1_gyro_1_accel_y+0x1>
    6bf6:	84 81       	ldd	r24, Z+4	; 0x04
    6bf8:	90 e0       	ldi	r25, 0x00	; 0
    6bfa:	98 2f       	mov	r25, r24
    6bfc:	88 27       	eor	r24, r24
    6bfe:	25 81       	ldd	r18, Z+5	; 0x05
    6c00:	82 2b       	or	r24, r18
    6c02:	80 93 64 27 	sts	0x2764, r24	; 0x802764 <g_twi1_gyro_1_accel_z>
    6c06:	90 93 65 27 	sts	0x2765, r25	; 0x802765 <g_twi1_gyro_1_accel_z+0x1>
    6c0a:	86 81       	ldd	r24, Z+6	; 0x06
    6c0c:	90 e0       	ldi	r25, 0x00	; 0
    6c0e:	98 2f       	mov	r25, r24
    6c10:	88 27       	eor	r24, r24
    6c12:	27 81       	ldd	r18, Z+7	; 0x07
    6c14:	82 2b       	or	r24, r18
    6c16:	80 93 70 27 	sts	0x2770, r24	; 0x802770 <g_twi1_gyro_1_temp>
    6c1a:	90 93 71 27 	sts	0x2771, r25	; 0x802771 <g_twi1_gyro_1_temp+0x1>
    6c1e:	eb e2       	ldi	r30, 0x2B	; 43
    6c20:	f0 e2       	ldi	r31, 0x20	; 32
    6c22:	88 e6       	ldi	r24, 0x68	; 104
    6c24:	80 83       	st	Z, r24
    6c26:	83 e4       	ldi	r24, 0x43	; 67
    6c28:	81 83       	std	Z+1, r24	; 0x01
    6c2a:	81 e0       	ldi	r24, 0x01	; 1
    6c2c:	90 e0       	ldi	r25, 0x00	; 0
    6c2e:	84 83       	std	Z+4, r24	; 0x04
    6c30:	95 83       	std	Z+5, r25	; 0x05
    6c32:	86 e0       	ldi	r24, 0x06	; 6
    6c34:	90 e0       	ldi	r25, 0x00	; 0
    6c36:	80 87       	std	Z+8, r24	; 0x08
    6c38:	91 87       	std	Z+9, r25	; 0x09
    6c3a:	41 e0       	ldi	r20, 0x01	; 1
    6c3c:	bf 01       	movw	r22, r30
    6c3e:	80 ea       	ldi	r24, 0xA0	; 160
    6c40:	94 e0       	ldi	r25, 0x04	; 4
    6c42:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6c46:	81 11       	cpse	r24, r1
    6c48:	b6 c0       	rjmp	.+364    	; 0x6db6 <isr_100ms_twi1_onboard+0x232>
    6c4a:	e3 e1       	ldi	r30, 0x13	; 19
    6c4c:	f5 e2       	ldi	r31, 0x25	; 37
    6c4e:	80 81       	ld	r24, Z
    6c50:	90 e0       	ldi	r25, 0x00	; 0
    6c52:	98 2f       	mov	r25, r24
    6c54:	88 27       	eor	r24, r24
    6c56:	21 81       	ldd	r18, Z+1	; 0x01
    6c58:	82 2b       	or	r24, r18
    6c5a:	80 93 50 27 	sts	0x2750, r24	; 0x802750 <g_twi1_gyro_1_gyro_x>
    6c5e:	90 93 51 27 	sts	0x2751, r25	; 0x802751 <g_twi1_gyro_1_gyro_x+0x1>
    6c62:	82 81       	ldd	r24, Z+2	; 0x02
    6c64:	90 e0       	ldi	r25, 0x00	; 0
    6c66:	98 2f       	mov	r25, r24
    6c68:	88 27       	eor	r24, r24
    6c6a:	23 81       	ldd	r18, Z+3	; 0x03
    6c6c:	82 2b       	or	r24, r18
    6c6e:	80 93 4e 27 	sts	0x274E, r24	; 0x80274e <g_twi1_gyro_1_gyro_y>
    6c72:	90 93 4f 27 	sts	0x274F, r25	; 0x80274f <g_twi1_gyro_1_gyro_y+0x1>
    6c76:	84 81       	ldd	r24, Z+4	; 0x04
    6c78:	90 e0       	ldi	r25, 0x00	; 0
    6c7a:	98 2f       	mov	r25, r24
    6c7c:	88 27       	eor	r24, r24
    6c7e:	25 81       	ldd	r18, Z+5	; 0x05
    6c80:	82 2b       	or	r24, r18
    6c82:	80 93 4c 27 	sts	0x274C, r24	; 0x80274c <g_twi1_gyro_1_gyro_z>
    6c86:	90 93 4d 27 	sts	0x274D, r25	; 0x80274d <g_twi1_gyro_1_gyro_z+0x1>
    6c8a:	80 91 39 27 	lds	r24, 0x2739	; 0x802739 <g_twi1_gyro_gyro_offset_set__flag>
    6c8e:	88 23       	and	r24, r24
    6c90:	19 f0       	breq	.+6      	; 0x6c98 <isr_100ms_twi1_onboard+0x114>
    6c92:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <g_twi1_gyro_gyro_offset_set__flag>
    6c96:	e2 de       	rcall	.-572    	; 0x6a5c <twi1_gyro_gyro_offset_set>
    6c98:	eb e2       	ldi	r30, 0x2B	; 43
    6c9a:	f0 e2       	ldi	r31, 0x20	; 32
    6c9c:	8c e0       	ldi	r24, 0x0C	; 12
    6c9e:	80 83       	st	Z, r24
    6ca0:	82 e0       	ldi	r24, 0x02	; 2
    6ca2:	81 83       	std	Z+1, r24	; 0x01
    6ca4:	81 e0       	ldi	r24, 0x01	; 1
    6ca6:	90 e0       	ldi	r25, 0x00	; 0
    6ca8:	84 83       	std	Z+4, r24	; 0x04
    6caa:	95 83       	std	Z+5, r25	; 0x05
    6cac:	80 87       	std	Z+8, r24	; 0x08
    6cae:	91 87       	std	Z+9, r25	; 0x09
    6cb0:	41 e0       	ldi	r20, 0x01	; 1
    6cb2:	bf 01       	movw	r22, r30
    6cb4:	80 ea       	ldi	r24, 0xA0	; 160
    6cb6:	94 e0       	ldi	r25, 0x04	; 4
    6cb8:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6cbc:	81 11       	cpse	r24, r1
    6cbe:	7b c0       	rjmp	.+246    	; 0x6db6 <isr_100ms_twi1_onboard+0x232>
    6cc0:	80 91 13 25 	lds	r24, 0x2513	; 0x802513 <twi1_m_data>
    6cc4:	80 ff       	sbrs	r24, 0
    6cc6:	77 c0       	rjmp	.+238    	; 0x6db6 <isr_100ms_twi1_onboard+0x232>
    6cc8:	eb e2       	ldi	r30, 0x2B	; 43
    6cca:	f0 e2       	ldi	r31, 0x20	; 32
    6ccc:	8c e0       	ldi	r24, 0x0C	; 12
    6cce:	80 83       	st	Z, r24
    6cd0:	83 e0       	ldi	r24, 0x03	; 3
    6cd2:	81 83       	std	Z+1, r24	; 0x01
    6cd4:	81 e0       	ldi	r24, 0x01	; 1
    6cd6:	90 e0       	ldi	r25, 0x00	; 0
    6cd8:	84 83       	std	Z+4, r24	; 0x04
    6cda:	95 83       	std	Z+5, r25	; 0x05
    6cdc:	86 e0       	ldi	r24, 0x06	; 6
    6cde:	90 e0       	ldi	r25, 0x00	; 0
    6ce0:	80 87       	std	Z+8, r24	; 0x08
    6ce2:	91 87       	std	Z+9, r25	; 0x09
    6ce4:	41 e0       	ldi	r20, 0x01	; 1
    6ce6:	bf 01       	movw	r22, r30
    6ce8:	80 ea       	ldi	r24, 0xA0	; 160
    6cea:	94 e0       	ldi	r25, 0x04	; 4
    6cec:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6cf0:	81 11       	cpse	r24, r1
    6cf2:	61 c0       	rjmp	.+194    	; 0x6db6 <isr_100ms_twi1_onboard+0x232>
    6cf4:	e3 e1       	ldi	r30, 0x13	; 19
    6cf6:	f5 e2       	ldi	r31, 0x25	; 37
    6cf8:	81 81       	ldd	r24, Z+1	; 0x01
    6cfa:	90 e0       	ldi	r25, 0x00	; 0
    6cfc:	98 2f       	mov	r25, r24
    6cfe:	88 27       	eor	r24, r24
    6d00:	20 81       	ld	r18, Z
    6d02:	82 2b       	or	r24, r18
    6d04:	20 91 33 27 	lds	r18, 0x2733	; 0x802733 <g_twi1_gyro_2_ofsx>
    6d08:	30 91 34 27 	lds	r19, 0x2734	; 0x802734 <g_twi1_gyro_2_ofsx+0x1>
    6d0c:	82 0f       	add	r24, r18
    6d0e:	93 1f       	adc	r25, r19
    6d10:	80 93 2d 27 	sts	0x272D, r24	; 0x80272d <g_twi1_gyro_2_mag_x>
    6d14:	90 93 2e 27 	sts	0x272E, r25	; 0x80272e <g_twi1_gyro_2_mag_x+0x1>
    6d18:	83 81       	ldd	r24, Z+3	; 0x03
    6d1a:	90 e0       	ldi	r25, 0x00	; 0
    6d1c:	98 2f       	mov	r25, r24
    6d1e:	88 27       	eor	r24, r24
    6d20:	22 81       	ldd	r18, Z+2	; 0x02
    6d22:	82 2b       	or	r24, r18
    6d24:	20 91 31 27 	lds	r18, 0x2731	; 0x802731 <g_twi1_gyro_2_ofsy>
    6d28:	30 91 32 27 	lds	r19, 0x2732	; 0x802732 <g_twi1_gyro_2_ofsy+0x1>
    6d2c:	82 0f       	add	r24, r18
    6d2e:	93 1f       	adc	r25, r19
    6d30:	80 93 2b 27 	sts	0x272B, r24	; 0x80272b <g_twi1_gyro_2_mag_y>
    6d34:	90 93 2c 27 	sts	0x272C, r25	; 0x80272c <g_twi1_gyro_2_mag_y+0x1>
    6d38:	85 81       	ldd	r24, Z+5	; 0x05
    6d3a:	90 e0       	ldi	r25, 0x00	; 0
    6d3c:	98 2f       	mov	r25, r24
    6d3e:	88 27       	eor	r24, r24
    6d40:	24 81       	ldd	r18, Z+4	; 0x04
    6d42:	82 2b       	or	r24, r18
    6d44:	20 91 2f 27 	lds	r18, 0x272F	; 0x80272f <g_twi1_gyro_2_ofsz>
    6d48:	30 91 30 27 	lds	r19, 0x2730	; 0x802730 <g_twi1_gyro_2_ofsz+0x1>
    6d4c:	82 0f       	add	r24, r18
    6d4e:	93 1f       	adc	r25, r19
    6d50:	80 93 29 27 	sts	0x2729, r24	; 0x802729 <g_twi1_gyro_2_mag_z>
    6d54:	90 93 2a 27 	sts	0x272A, r25	; 0x80272a <g_twi1_gyro_2_mag_z+0x1>
    6d58:	eb e2       	ldi	r30, 0x2B	; 43
    6d5a:	f0 e2       	ldi	r31, 0x20	; 32
    6d5c:	8c e0       	ldi	r24, 0x0C	; 12
    6d5e:	80 83       	st	Z, r24
    6d60:	89 e0       	ldi	r24, 0x09	; 9
    6d62:	81 83       	std	Z+1, r24	; 0x01
    6d64:	81 e0       	ldi	r24, 0x01	; 1
    6d66:	90 e0       	ldi	r25, 0x00	; 0
    6d68:	84 83       	std	Z+4, r24	; 0x04
    6d6a:	95 83       	std	Z+5, r25	; 0x05
    6d6c:	80 87       	std	Z+8, r24	; 0x08
    6d6e:	91 87       	std	Z+9, r25	; 0x09
    6d70:	41 e0       	ldi	r20, 0x01	; 1
    6d72:	bf 01       	movw	r22, r30
    6d74:	80 ea       	ldi	r24, 0xA0	; 160
    6d76:	94 e0       	ldi	r25, 0x04	; 4
    6d78:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6d7c:	81 11       	cpse	r24, r1
    6d7e:	1b c0       	rjmp	.+54     	; 0x6db6 <isr_100ms_twi1_onboard+0x232>
    6d80:	80 91 13 25 	lds	r24, 0x2513	; 0x802513 <twi1_m_data>
    6d84:	83 ff       	sbrs	r24, 3
    6d86:	0c c0       	rjmp	.+24     	; 0x6da0 <isr_100ms_twi1_onboard+0x21c>
    6d88:	10 92 2d 27 	sts	0x272D, r1	; 0x80272d <g_twi1_gyro_2_mag_x>
    6d8c:	10 92 2e 27 	sts	0x272E, r1	; 0x80272e <g_twi1_gyro_2_mag_x+0x1>
    6d90:	10 92 2b 27 	sts	0x272B, r1	; 0x80272b <g_twi1_gyro_2_mag_y>
    6d94:	10 92 2c 27 	sts	0x272C, r1	; 0x80272c <g_twi1_gyro_2_mag_y+0x1>
    6d98:	10 92 29 27 	sts	0x2729, r1	; 0x802729 <g_twi1_gyro_2_mag_z>
    6d9c:	10 92 2a 27 	sts	0x272A, r1	; 0x80272a <g_twi1_gyro_2_mag_z+0x1>
    6da0:	c1 2c       	mov	r12, r1
    6da2:	e1 2c       	mov	r14, r1
    6da4:	01 e0       	ldi	r16, 0x01	; 1
    6da6:	20 e0       	ldi	r18, 0x00	; 0
    6da8:	30 e0       	ldi	r19, 0x00	; 0
    6daa:	a9 01       	movw	r20, r18
    6dac:	60 e0       	ldi	r22, 0x00	; 0
    6dae:	82 e6       	ldi	r24, 0x62	; 98
    6db0:	9e e2       	ldi	r25, 0x2E	; 46
    6db2:	0e 94 b2 6a 	call	0xd564	; 0xd564 <sched_push>
    6db6:	0f 91       	pop	r16
    6db8:	ef 90       	pop	r14
    6dba:	cf 90       	pop	r12
    6dbc:	08 95       	ret

00006dbe <isr_500ms_twi1_onboard>:
    6dbe:	8f 92       	push	r8
    6dc0:	9f 92       	push	r9
    6dc2:	af 92       	push	r10
    6dc4:	bf 92       	push	r11
    6dc6:	cf 92       	push	r12
    6dc8:	ef 92       	push	r14
    6dca:	0f 93       	push	r16
    6dcc:	4b 01       	movw	r8, r22
    6dce:	5c 01       	movw	r10, r24
    6dd0:	78 94       	sei
    6dd2:	80 91 f3 26 	lds	r24, 0x26F3	; 0x8026f3 <g_twi1_hygro_valid>
    6dd6:	88 23       	and	r24, r24
    6dd8:	09 f4       	brne	.+2      	; 0x6ddc <isr_500ms_twi1_onboard+0x1e>
    6dda:	52 c0       	rjmp	.+164    	; 0x6e80 <isr_500ms_twi1_onboard+0xc2>
    6ddc:	80 91 5d 26 	lds	r24, 0x265D	; 0x80265d <g_twi1_lock>
    6de0:	81 11       	cpse	r24, r1
    6de2:	4e c0       	rjmp	.+156    	; 0x6e80 <isr_500ms_twi1_onboard+0xc2>
    6de4:	eb e2       	ldi	r30, 0x2B	; 43
    6de6:	f0 e2       	ldi	r31, 0x20	; 32
    6de8:	84 e4       	ldi	r24, 0x44	; 68
    6dea:	80 83       	st	Z, r24
    6dec:	80 ee       	ldi	r24, 0xE0	; 224
    6dee:	81 83       	std	Z+1, r24	; 0x01
    6df0:	12 82       	std	Z+2, r1	; 0x02
    6df2:	82 e0       	ldi	r24, 0x02	; 2
    6df4:	90 e0       	ldi	r25, 0x00	; 0
    6df6:	84 83       	std	Z+4, r24	; 0x04
    6df8:	95 83       	std	Z+5, r25	; 0x05
    6dfa:	85 e0       	ldi	r24, 0x05	; 5
    6dfc:	90 e0       	ldi	r25, 0x00	; 0
    6dfe:	80 87       	std	Z+8, r24	; 0x08
    6e00:	91 87       	std	Z+9, r25	; 0x09
    6e02:	41 e0       	ldi	r20, 0x01	; 1
    6e04:	bf 01       	movw	r22, r30
    6e06:	80 ea       	ldi	r24, 0xA0	; 160
    6e08:	94 e0       	ldi	r25, 0x04	; 4
    6e0a:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6e0e:	81 11       	cpse	r24, r1
    6e10:	16 c0       	rjmp	.+44     	; 0x6e3e <isr_500ms_twi1_onboard+0x80>
    6e12:	e3 e1       	ldi	r30, 0x13	; 19
    6e14:	f5 e2       	ldi	r31, 0x25	; 37
    6e16:	80 81       	ld	r24, Z
    6e18:	90 e0       	ldi	r25, 0x00	; 0
    6e1a:	98 2f       	mov	r25, r24
    6e1c:	88 27       	eor	r24, r24
    6e1e:	21 81       	ldd	r18, Z+1	; 0x01
    6e20:	82 2b       	or	r24, r18
    6e22:	80 93 f0 26 	sts	0x26F0, r24	; 0x8026f0 <g_twi1_hygro_S_T>
    6e26:	90 93 f1 26 	sts	0x26F1, r25	; 0x8026f1 <g_twi1_hygro_S_T+0x1>
    6e2a:	83 81       	ldd	r24, Z+3	; 0x03
    6e2c:	90 e0       	ldi	r25, 0x00	; 0
    6e2e:	98 2f       	mov	r25, r24
    6e30:	88 27       	eor	r24, r24
    6e32:	24 81       	ldd	r18, Z+4	; 0x04
    6e34:	82 2b       	or	r24, r18
    6e36:	80 93 ee 26 	sts	0x26EE, r24	; 0x8026ee <g_twi1_hygro_S_RH>
    6e3a:	90 93 ef 26 	sts	0x26EF, r25	; 0x8026ef <g_twi1_hygro_S_RH+0x1>
    6e3e:	eb e2       	ldi	r30, 0x2B	; 43
    6e40:	f0 e2       	ldi	r31, 0x20	; 32
    6e42:	84 e4       	ldi	r24, 0x44	; 68
    6e44:	80 83       	st	Z, r24
    6e46:	84 e2       	ldi	r24, 0x24	; 36
    6e48:	81 83       	std	Z+1, r24	; 0x01
    6e4a:	12 82       	std	Z+2, r1	; 0x02
    6e4c:	82 e0       	ldi	r24, 0x02	; 2
    6e4e:	90 e0       	ldi	r25, 0x00	; 0
    6e50:	84 83       	std	Z+4, r24	; 0x04
    6e52:	95 83       	std	Z+5, r25	; 0x05
    6e54:	10 86       	std	Z+8, r1	; 0x08
    6e56:	11 86       	std	Z+9, r1	; 0x09
    6e58:	40 e0       	ldi	r20, 0x00	; 0
    6e5a:	bf 01       	movw	r22, r30
    6e5c:	80 ea       	ldi	r24, 0xA0	; 160
    6e5e:	94 e0       	ldi	r25, 0x04	; 4
    6e60:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6e64:	81 11       	cpse	r24, r1
    6e66:	0c c0       	rjmp	.+24     	; 0x6e80 <isr_500ms_twi1_onboard+0xc2>
    6e68:	c1 2c       	mov	r12, r1
    6e6a:	e1 2c       	mov	r14, r1
    6e6c:	01 e0       	ldi	r16, 0x01	; 1
    6e6e:	26 e4       	ldi	r18, 0x46	; 70
    6e70:	30 e0       	ldi	r19, 0x00	; 0
    6e72:	40 e0       	ldi	r20, 0x00	; 0
    6e74:	50 e0       	ldi	r21, 0x00	; 0
    6e76:	60 e0       	ldi	r22, 0x00	; 0
    6e78:	85 e1       	ldi	r24, 0x15	; 21
    6e7a:	9e e2       	ldi	r25, 0x2E	; 46
    6e7c:	0e 94 b2 6a 	call	0xd564	; 0xd564 <sched_push>
    6e80:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <g_twi1_baro_valid>
    6e84:	88 23       	and	r24, r24
    6e86:	21 f0       	breq	.+8      	; 0x6e90 <isr_500ms_twi1_onboard+0xd2>
    6e88:	41 e0       	ldi	r20, 0x01	; 1
    6e8a:	c5 01       	movw	r24, r10
    6e8c:	b4 01       	movw	r22, r8
    6e8e:	44 dc       	rcall	.-1912   	; 0x6718 <service_twi1_baro>
    6e90:	0f 91       	pop	r16
    6e92:	ef 90       	pop	r14
    6e94:	cf 90       	pop	r12
    6e96:	bf 90       	pop	r11
    6e98:	af 90       	pop	r10
    6e9a:	9f 90       	pop	r9
    6e9c:	8f 90       	pop	r8
    6e9e:	08 95       	ret

00006ea0 <isr_sparetime_twi1_onboard>:
    6ea0:	cf 92       	push	r12
    6ea2:	ef 92       	push	r14
    6ea4:	0f 93       	push	r16
    6ea6:	78 94       	sei
    6ea8:	20 91 16 27 	lds	r18, 0x2716	; 0x802716 <g_twi1_baro_valid>
    6eac:	22 23       	and	r18, r18
    6eae:	81 f0       	breq	.+32     	; 0x6ed0 <isr_sparetime_twi1_onboard+0x30>
    6eb0:	40 e0       	ldi	r20, 0x00	; 0
    6eb2:	32 dc       	rcall	.-1948   	; 0x6718 <service_twi1_baro>
    6eb4:	88 23       	and	r24, r24
    6eb6:	61 f0       	breq	.+24     	; 0x6ed0 <isr_sparetime_twi1_onboard+0x30>
    6eb8:	c1 2c       	mov	r12, r1
    6eba:	e1 2c       	mov	r14, r1
    6ebc:	01 e0       	ldi	r16, 0x01	; 1
    6ebe:	26 e4       	ldi	r18, 0x46	; 70
    6ec0:	30 e0       	ldi	r19, 0x00	; 0
    6ec2:	40 e0       	ldi	r20, 0x00	; 0
    6ec4:	50 e0       	ldi	r21, 0x00	; 0
    6ec6:	60 e0       	ldi	r22, 0x00	; 0
    6ec8:	8a e3       	ldi	r24, 0x3A	; 58
    6eca:	91 e3       	ldi	r25, 0x31	; 49
    6ecc:	0e 94 b2 6a 	call	0xd564	; 0xd564 <sched_push>
    6ed0:	0f 91       	pop	r16
    6ed2:	ef 90       	pop	r14
    6ed4:	cf 90       	pop	r12
    6ed6:	08 95       	ret

00006ed8 <task_twi2_lcd_cls>:
    6ed8:	03 dd       	rcall	.-1530   	; 0x68e0 <twi2_waitUntilReady>
    6eda:	e7 e1       	ldi	r30, 0x17	; 23
    6edc:	f0 e2       	ldi	r31, 0x20	; 32
    6ede:	81 e1       	ldi	r24, 0x11	; 17
    6ee0:	81 83       	std	Z+1, r24	; 0x01
    6ee2:	10 86       	std	Z+8, r1	; 0x08
    6ee4:	11 86       	std	Z+9, r1	; 0x09
    6ee6:	40 e0       	ldi	r20, 0x00	; 0
    6ee8:	bf 01       	movw	r22, r30
    6eea:	80 e8       	ldi	r24, 0x80	; 128
    6eec:	94 e0       	ldi	r25, 0x04	; 4
    6eee:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6ef2:	65 e0       	ldi	r22, 0x05	; 5
    6ef4:	70 e0       	ldi	r23, 0x00	; 0
    6ef6:	80 e0       	ldi	r24, 0x00	; 0
    6ef8:	90 e0       	ldi	r25, 0x00	; 0
    6efa:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    6efe:	08 95       	ret

00006f00 <task_twi2_lcd_pos_xy>:
    6f00:	cf 93       	push	r28
    6f02:	df 93       	push	r29
    6f04:	d8 2f       	mov	r29, r24
    6f06:	c6 2f       	mov	r28, r22
    6f08:	eb dc       	rcall	.-1578   	; 0x68e0 <twi2_waitUntilReady>
    6f0a:	e7 e1       	ldi	r30, 0x17	; 23
    6f0c:	f0 e2       	ldi	r31, 0x20	; 32
    6f0e:	80 e2       	ldi	r24, 0x20	; 32
    6f10:	81 83       	std	Z+1, r24	; 0x01
    6f12:	ab e0       	ldi	r26, 0x0B	; 11
    6f14:	b5 e2       	ldi	r27, 0x25	; 37
    6f16:	dc 93       	st	X, r29
    6f18:	11 96       	adiw	r26, 0x01	; 1
    6f1a:	cc 93       	st	X, r28
    6f1c:	82 e0       	ldi	r24, 0x02	; 2
    6f1e:	90 e0       	ldi	r25, 0x00	; 0
    6f20:	80 87       	std	Z+8, r24	; 0x08
    6f22:	91 87       	std	Z+9, r25	; 0x09
    6f24:	40 e0       	ldi	r20, 0x00	; 0
    6f26:	bf 01       	movw	r22, r30
    6f28:	80 e8       	ldi	r24, 0x80	; 128
    6f2a:	94 e0       	ldi	r25, 0x04	; 4
    6f2c:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6f30:	65 e0       	ldi	r22, 0x05	; 5
    6f32:	70 e0       	ldi	r23, 0x00	; 0
    6f34:	80 e0       	ldi	r24, 0x00	; 0
    6f36:	90 e0       	ldi	r25, 0x00	; 0
    6f38:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    6f3c:	df 91       	pop	r29
    6f3e:	cf 91       	pop	r28
    6f40:	08 95       	ret

00006f42 <task_twi2_lcd_print_format_float_P>:
    6f42:	cf 92       	push	r12
    6f44:	df 92       	push	r13
    6f46:	ef 92       	push	r14
    6f48:	ff 92       	push	r15
    6f4a:	0f 93       	push	r16
    6f4c:	1f 93       	push	r17
    6f4e:	cf 93       	push	r28
    6f50:	df 93       	push	r29
    6f52:	f2 2e       	mov	r15, r18
    6f54:	e3 2e       	mov	r14, r19
    6f56:	d4 2e       	mov	r13, r20
    6f58:	c5 2e       	mov	r12, r21
    6f5a:	d2 df       	rcall	.-92     	; 0x6f00 <task_twi2_lcd_pos_xy>
    6f5c:	c1 dc       	rcall	.-1662   	; 0x68e0 <twi2_waitUntilReady>
    6f5e:	c7 e1       	ldi	r28, 0x17	; 23
    6f60:	d0 e2       	ldi	r29, 0x20	; 32
    6f62:	80 e3       	ldi	r24, 0x30	; 48
    6f64:	89 83       	std	Y+1, r24	; 0x01
    6f66:	cf 92       	push	r12
    6f68:	df 92       	push	r13
    6f6a:	ef 92       	push	r14
    6f6c:	ff 92       	push	r15
    6f6e:	1f 93       	push	r17
    6f70:	0f 93       	push	r16
    6f72:	8c e0       	ldi	r24, 0x0C	; 12
    6f74:	95 e2       	ldi	r25, 0x25	; 37
    6f76:	9f 93       	push	r25
    6f78:	8f 93       	push	r24
    6f7a:	0e 94 e4 89 	call	0x113c8	; 0x113c8 <sprintf_P>
    6f7e:	80 93 0b 25 	sts	0x250B, r24	; 0x80250b <twi2_m_data>
    6f82:	99 27       	eor	r25, r25
    6f84:	01 96       	adiw	r24, 0x01	; 1
    6f86:	88 87       	std	Y+8, r24	; 0x08
    6f88:	99 87       	std	Y+9, r25	; 0x09
    6f8a:	40 e0       	ldi	r20, 0x00	; 0
    6f8c:	be 01       	movw	r22, r28
    6f8e:	80 e8       	ldi	r24, 0x80	; 128
    6f90:	94 e0       	ldi	r25, 0x04	; 4
    6f92:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    6f96:	65 e0       	ldi	r22, 0x05	; 5
    6f98:	70 e0       	ldi	r23, 0x00	; 0
    6f9a:	80 e0       	ldi	r24, 0x00	; 0
    6f9c:	90 e0       	ldi	r25, 0x00	; 0
    6f9e:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    6fa2:	8d b7       	in	r24, 0x3d	; 61
    6fa4:	9e b7       	in	r25, 0x3e	; 62
    6fa6:	08 96       	adiw	r24, 0x08	; 8
    6fa8:	8d bf       	out	0x3d, r24	; 61
    6faa:	9e bf       	out	0x3e, r25	; 62
    6fac:	df 91       	pop	r29
    6fae:	cf 91       	pop	r28
    6fb0:	1f 91       	pop	r17
    6fb2:	0f 91       	pop	r16
    6fb4:	ff 90       	pop	r15
    6fb6:	ef 90       	pop	r14
    6fb8:	df 90       	pop	r13
    6fba:	cf 90       	pop	r12
    6fbc:	08 95       	ret

00006fbe <task_twi2_lcd_str>:
    6fbe:	9f 92       	push	r9
    6fc0:	af 92       	push	r10
    6fc2:	bf 92       	push	r11
    6fc4:	cf 92       	push	r12
    6fc6:	df 92       	push	r13
    6fc8:	ef 92       	push	r14
    6fca:	ff 92       	push	r15
    6fcc:	0f 93       	push	r16
    6fce:	1f 93       	push	r17
    6fd0:	cf 93       	push	r28
    6fd2:	df 93       	push	r29
    6fd4:	b8 2e       	mov	r11, r24
    6fd6:	a6 2e       	mov	r10, r22
    6fd8:	ea 01       	movw	r28, r20
    6fda:	fa 01       	movw	r30, r20
    6fdc:	01 90       	ld	r0, Z+
    6fde:	00 20       	and	r0, r0
    6fe0:	e9 f7       	brne	.-6      	; 0x6fdc <task_twi2_lcd_str+0x1e>
    6fe2:	31 97       	sbiw	r30, 0x01	; 1
    6fe4:	ce 2e       	mov	r12, r30
    6fe6:	c4 1a       	sub	r12, r20
    6fe8:	09 f4       	brne	.+2      	; 0x6fec <task_twi2_lcd_str+0x2e>
    6fea:	44 c0       	rjmp	.+136    	; 0x7074 <task_twi2_lcd_str+0xb6>
    6fec:	07 e1       	ldi	r16, 0x17	; 23
    6fee:	10 e2       	ldi	r17, 0x20	; 32
    6ff0:	0f 2e       	mov	r0, r31
    6ff2:	f0 e3       	ldi	r31, 0x30	; 48
    6ff4:	9f 2e       	mov	r9, r31
    6ff6:	f0 2d       	mov	r31, r0
    6ff8:	0f 2e       	mov	r0, r31
    6ffa:	fb e0       	ldi	r31, 0x0B	; 11
    6ffc:	ef 2e       	mov	r14, r31
    6ffe:	f5 e2       	ldi	r31, 0x25	; 37
    7000:	ff 2e       	mov	r15, r31
    7002:	f0 2d       	mov	r31, r0
    7004:	dc 2c       	mov	r13, r12
    7006:	e6 e0       	ldi	r30, 0x06	; 6
    7008:	ec 15       	cp	r30, r12
    700a:	20 f4       	brcc	.+8      	; 0x7014 <task_twi2_lcd_str+0x56>
    700c:	0f 2e       	mov	r0, r31
    700e:	f6 e0       	ldi	r31, 0x06	; 6
    7010:	df 2e       	mov	r13, r31
    7012:	f0 2d       	mov	r31, r0
    7014:	6a 2d       	mov	r22, r10
    7016:	8b 2d       	mov	r24, r11
    7018:	73 df       	rcall	.-282    	; 0x6f00 <task_twi2_lcd_pos_xy>
    701a:	62 dc       	rcall	.-1852   	; 0x68e0 <twi2_waitUntilReady>
    701c:	f8 01       	movw	r30, r16
    701e:	91 82       	std	Z+1, r9	; 0x01
    7020:	f7 01       	movw	r30, r14
    7022:	d0 82       	st	Z, r13
    7024:	dd 20       	and	r13, r13
    7026:	69 f0       	breq	.+26     	; 0x7042 <task_twi2_lcd_str+0x84>
    7028:	81 e0       	ldi	r24, 0x01	; 1
    702a:	21 96       	adiw	r28, 0x01	; 1
    702c:	e8 2f       	mov	r30, r24
    702e:	f0 e0       	ldi	r31, 0x00	; 0
    7030:	e5 5f       	subi	r30, 0xF5	; 245
    7032:	fa 4d       	sbci	r31, 0xDA	; 218
    7034:	de 01       	movw	r26, r28
    7036:	11 97       	sbiw	r26, 0x01	; 1
    7038:	9c 91       	ld	r25, X
    703a:	90 83       	st	Z, r25
    703c:	8f 5f       	subi	r24, 0xFF	; 255
    703e:	d8 16       	cp	r13, r24
    7040:	a0 f7       	brcc	.-24     	; 0x702a <task_twi2_lcd_str+0x6c>
    7042:	8d 2d       	mov	r24, r13
    7044:	90 e0       	ldi	r25, 0x00	; 0
    7046:	01 96       	adiw	r24, 0x01	; 1
    7048:	f8 01       	movw	r30, r16
    704a:	80 87       	std	Z+8, r24	; 0x08
    704c:	91 87       	std	Z+9, r25	; 0x09
    704e:	40 e0       	ldi	r20, 0x00	; 0
    7050:	b8 01       	movw	r22, r16
    7052:	80 e8       	ldi	r24, 0x80	; 128
    7054:	94 e0       	ldi	r25, 0x04	; 4
    7056:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    705a:	65 e0       	ldi	r22, 0x05	; 5
    705c:	70 e0       	ldi	r23, 0x00	; 0
    705e:	80 e0       	ldi	r24, 0x00	; 0
    7060:	90 e0       	ldi	r25, 0x00	; 0
    7062:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    7066:	8d 2d       	mov	r24, r13
    7068:	88 0f       	add	r24, r24
    706a:	8d 0d       	add	r24, r13
    706c:	88 0f       	add	r24, r24
    706e:	b8 0e       	add	r11, r24
    7070:	cd 18       	sub	r12, r13
    7072:	41 f6       	brne	.-112    	; 0x7004 <task_twi2_lcd_str+0x46>
    7074:	df 91       	pop	r29
    7076:	cf 91       	pop	r28
    7078:	1f 91       	pop	r17
    707a:	0f 91       	pop	r16
    707c:	ff 90       	pop	r15
    707e:	ef 90       	pop	r14
    7080:	df 90       	pop	r13
    7082:	cf 90       	pop	r12
    7084:	bf 90       	pop	r11
    7086:	af 90       	pop	r10
    7088:	9f 90       	pop	r9
    708a:	08 95       	ret

0000708c <init_twi1_gyro>:
    708c:	1f 93       	push	r17
    708e:	cf 93       	push	r28
    7090:	df 93       	push	r29
    7092:	1f 92       	push	r1
    7094:	8c e0       	ldi	r24, 0x0C	; 12
    7096:	8f 93       	push	r24
    7098:	1f 92       	push	r1
    709a:	88 e6       	ldi	r24, 0x68	; 104
    709c:	8f 93       	push	r24
    709e:	8f e9       	ldi	r24, 0x9F	; 159
    70a0:	93 e3       	ldi	r25, 0x33	; 51
    70a2:	9f 93       	push	r25
    70a4:	8f 93       	push	r24
    70a6:	1f 92       	push	r1
    70a8:	80 e4       	ldi	r24, 0x40	; 64
    70aa:	8f 93       	push	r24
    70ac:	8b e1       	ldi	r24, 0x1B	; 27
    70ae:	95 e2       	ldi	r25, 0x25	; 37
    70b0:	9f 93       	push	r25
    70b2:	8f 93       	push	r24
    70b4:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    70b8:	81 34       	cpi	r24, 0x41	; 65
    70ba:	91 05       	cpc	r25, r1
    70bc:	10 f0       	brcs	.+4      	; 0x70c2 <init_twi1_gyro+0x36>
    70be:	80 e4       	ldi	r24, 0x40	; 64
    70c0:	90 e0       	ldi	r25, 0x00	; 0
    70c2:	40 e0       	ldi	r20, 0x00	; 0
    70c4:	68 2f       	mov	r22, r24
    70c6:	8b e1       	ldi	r24, 0x1B	; 27
    70c8:	95 e2       	ldi	r25, 0x25	; 37
    70ca:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    70ce:	10 92 72 27 	sts	0x2772, r1	; 0x802772 <g_twi1_gyro_1_version>
    70d2:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <g_twi1_gyro_2_version>
    70d6:	eb e2       	ldi	r30, 0x2B	; 43
    70d8:	f0 e2       	ldi	r31, 0x20	; 32
    70da:	88 e6       	ldi	r24, 0x68	; 104
    70dc:	80 83       	st	Z, r24
    70de:	8b e6       	ldi	r24, 0x6B	; 107
    70e0:	81 83       	std	Z+1, r24	; 0x01
    70e2:	81 e0       	ldi	r24, 0x01	; 1
    70e4:	90 e0       	ldi	r25, 0x00	; 0
    70e6:	84 83       	std	Z+4, r24	; 0x04
    70e8:	95 83       	std	Z+5, r25	; 0x05
    70ea:	21 e8       	ldi	r18, 0x81	; 129
    70ec:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    70f0:	80 87       	std	Z+8, r24	; 0x08
    70f2:	91 87       	std	Z+9, r25	; 0x09
    70f4:	40 e0       	ldi	r20, 0x00	; 0
    70f6:	bf 01       	movw	r22, r30
    70f8:	80 ea       	ldi	r24, 0xA0	; 160
    70fa:	94 e0       	ldi	r25, 0x04	; 4
    70fc:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    7100:	c8 2f       	mov	r28, r24
    7102:	8d b7       	in	r24, 0x3d	; 61
    7104:	9e b7       	in	r25, 0x3e	; 62
    7106:	0a 96       	adiw	r24, 0x0a	; 10
    7108:	8d bf       	out	0x3d, r24	; 61
    710a:	9e bf       	out	0x3e, r25	; 62
    710c:	cc 23       	and	r28, r28
    710e:	f9 f0       	breq	.+62     	; 0x714e <init_twi1_gyro+0xc2>
    7110:	85 e6       	ldi	r24, 0x65	; 101
    7112:	93 e3       	ldi	r25, 0x33	; 51
    7114:	9f 93       	push	r25
    7116:	8f 93       	push	r24
    7118:	1f 92       	push	r1
    711a:	80 e4       	ldi	r24, 0x40	; 64
    711c:	8f 93       	push	r24
    711e:	8b e1       	ldi	r24, 0x1B	; 27
    7120:	95 e2       	ldi	r25, 0x25	; 37
    7122:	9f 93       	push	r25
    7124:	8f 93       	push	r24
    7126:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    712a:	81 34       	cpi	r24, 0x41	; 65
    712c:	91 05       	cpc	r25, r1
    712e:	10 f0       	brcs	.+4      	; 0x7134 <init_twi1_gyro+0xa8>
    7130:	80 e4       	ldi	r24, 0x40	; 64
    7132:	90 e0       	ldi	r25, 0x00	; 0
    7134:	40 e0       	ldi	r20, 0x00	; 0
    7136:	68 2f       	mov	r22, r24
    7138:	8b e1       	ldi	r24, 0x1B	; 27
    713a:	95 e2       	ldi	r25, 0x25	; 37
    713c:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    7140:	0f 90       	pop	r0
    7142:	0f 90       	pop	r0
    7144:	0f 90       	pop	r0
    7146:	0f 90       	pop	r0
    7148:	0f 90       	pop	r0
    714a:	0f 90       	pop	r0
    714c:	b8 c1       	rjmp	.+880    	; 0x74be <init_twi1_gyro+0x432>
    714e:	61 e5       	ldi	r22, 0x51	; 81
    7150:	73 ec       	ldi	r23, 0xC3	; 195
    7152:	80 e0       	ldi	r24, 0x00	; 0
    7154:	90 e0       	ldi	r25, 0x00	; 0
    7156:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    715a:	eb e2       	ldi	r30, 0x2B	; 43
    715c:	f0 e2       	ldi	r31, 0x20	; 32
    715e:	88 e6       	ldi	r24, 0x68	; 104
    7160:	80 83       	st	Z, r24
    7162:	85 e7       	ldi	r24, 0x75	; 117
    7164:	81 83       	std	Z+1, r24	; 0x01
    7166:	81 e0       	ldi	r24, 0x01	; 1
    7168:	90 e0       	ldi	r25, 0x00	; 0
    716a:	84 83       	std	Z+4, r24	; 0x04
    716c:	95 83       	std	Z+5, r25	; 0x05
    716e:	80 87       	std	Z+8, r24	; 0x08
    7170:	91 87       	std	Z+9, r25	; 0x09
    7172:	41 e0       	ldi	r20, 0x01	; 1
    7174:	bf 01       	movw	r22, r30
    7176:	80 ea       	ldi	r24, 0xA0	; 160
    7178:	94 e0       	ldi	r25, 0x04	; 4
    717a:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    717e:	c8 2f       	mov	r28, r24
    7180:	81 11       	cpse	r24, r1
    7182:	9d c1       	rjmp	.+826    	; 0x74be <init_twi1_gyro+0x432>
    7184:	a3 e1       	ldi	r26, 0x13	; 19
    7186:	b5 e2       	ldi	r27, 0x25	; 37
    7188:	8c 91       	ld	r24, X
    718a:	80 93 72 27 	sts	0x2772, r24	; 0x802772 <g_twi1_gyro_1_version>
    718e:	eb e2       	ldi	r30, 0x2B	; 43
    7190:	f0 e2       	ldi	r31, 0x20	; 32
    7192:	88 e6       	ldi	r24, 0x68	; 104
    7194:	80 83       	st	Z, r24
    7196:	87 e3       	ldi	r24, 0x37	; 55
    7198:	81 83       	std	Z+1, r24	; 0x01
    719a:	81 e0       	ldi	r24, 0x01	; 1
    719c:	90 e0       	ldi	r25, 0x00	; 0
    719e:	84 83       	std	Z+4, r24	; 0x04
    71a0:	95 83       	std	Z+5, r25	; 0x05
    71a2:	22 e0       	ldi	r18, 0x02	; 2
    71a4:	2c 93       	st	X, r18
    71a6:	80 87       	std	Z+8, r24	; 0x08
    71a8:	91 87       	std	Z+9, r25	; 0x09
    71aa:	40 e0       	ldi	r20, 0x00	; 0
    71ac:	bf 01       	movw	r22, r30
    71ae:	80 ea       	ldi	r24, 0xA0	; 160
    71b0:	94 e0       	ldi	r25, 0x04	; 4
    71b2:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    71b6:	c8 2f       	mov	r28, r24
    71b8:	81 11       	cpse	r24, r1
    71ba:	81 c1       	rjmp	.+770    	; 0x74be <init_twi1_gyro+0x432>
    71bc:	eb e2       	ldi	r30, 0x2B	; 43
    71be:	f0 e2       	ldi	r31, 0x20	; 32
    71c0:	8c e0       	ldi	r24, 0x0C	; 12
    71c2:	80 83       	st	Z, r24
    71c4:	8b e0       	ldi	r24, 0x0B	; 11
    71c6:	81 83       	std	Z+1, r24	; 0x01
    71c8:	81 e0       	ldi	r24, 0x01	; 1
    71ca:	90 e0       	ldi	r25, 0x00	; 0
    71cc:	84 83       	std	Z+4, r24	; 0x04
    71ce:	95 83       	std	Z+5, r25	; 0x05
    71d0:	21 e0       	ldi	r18, 0x01	; 1
    71d2:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    71d6:	80 87       	std	Z+8, r24	; 0x08
    71d8:	91 87       	std	Z+9, r25	; 0x09
    71da:	40 e0       	ldi	r20, 0x00	; 0
    71dc:	bf 01       	movw	r22, r30
    71de:	80 ea       	ldi	r24, 0xA0	; 160
    71e0:	94 e0       	ldi	r25, 0x04	; 4
    71e2:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    71e6:	c8 2f       	mov	r28, r24
    71e8:	81 11       	cpse	r24, r1
    71ea:	69 c1       	rjmp	.+722    	; 0x74be <init_twi1_gyro+0x432>
    71ec:	61 e5       	ldi	r22, 0x51	; 81
    71ee:	73 ec       	ldi	r23, 0xC3	; 195
    71f0:	80 e0       	ldi	r24, 0x00	; 0
    71f2:	90 e0       	ldi	r25, 0x00	; 0
    71f4:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    71f8:	eb e2       	ldi	r30, 0x2B	; 43
    71fa:	f0 e2       	ldi	r31, 0x20	; 32
    71fc:	8c e0       	ldi	r24, 0x0C	; 12
    71fe:	80 83       	st	Z, r24
    7200:	11 82       	std	Z+1, r1	; 0x01
    7202:	81 e0       	ldi	r24, 0x01	; 1
    7204:	90 e0       	ldi	r25, 0x00	; 0
    7206:	84 83       	std	Z+4, r24	; 0x04
    7208:	95 83       	std	Z+5, r25	; 0x05
    720a:	80 87       	std	Z+8, r24	; 0x08
    720c:	91 87       	std	Z+9, r25	; 0x09
    720e:	41 e0       	ldi	r20, 0x01	; 1
    7210:	bf 01       	movw	r22, r30
    7212:	80 ea       	ldi	r24, 0xA0	; 160
    7214:	94 e0       	ldi	r25, 0x04	; 4
    7216:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    721a:	c8 2f       	mov	r28, r24
    721c:	81 11       	cpse	r24, r1
    721e:	4f c1       	rjmp	.+670    	; 0x74be <init_twi1_gyro+0x432>
    7220:	80 91 13 25 	lds	r24, 0x2513	; 0x802513 <twi1_m_data>
    7224:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <g_twi1_gyro_2_version>
    7228:	1f 92       	push	r1
    722a:	8f 93       	push	r24
    722c:	80 91 72 27 	lds	r24, 0x2772	; 0x802772 <g_twi1_gyro_1_version>
    7230:	1f 92       	push	r1
    7232:	8f 93       	push	r24
    7234:	8a e2       	ldi	r24, 0x2A	; 42
    7236:	93 e3       	ldi	r25, 0x33	; 51
    7238:	9f 93       	push	r25
    723a:	8f 93       	push	r24
    723c:	1f 92       	push	r1
    723e:	80 e4       	ldi	r24, 0x40	; 64
    7240:	8f 93       	push	r24
    7242:	8b e1       	ldi	r24, 0x1B	; 27
    7244:	95 e2       	ldi	r25, 0x25	; 37
    7246:	9f 93       	push	r25
    7248:	8f 93       	push	r24
    724a:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    724e:	81 34       	cpi	r24, 0x41	; 65
    7250:	91 05       	cpc	r25, r1
    7252:	10 f0       	brcs	.+4      	; 0x7258 <init_twi1_gyro+0x1cc>
    7254:	80 e4       	ldi	r24, 0x40	; 64
    7256:	90 e0       	ldi	r25, 0x00	; 0
    7258:	40 e0       	ldi	r20, 0x00	; 0
    725a:	68 2f       	mov	r22, r24
    725c:	8b e1       	ldi	r24, 0x1B	; 27
    725e:	95 e2       	ldi	r25, 0x25	; 37
    7260:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    7264:	eb e2       	ldi	r30, 0x2B	; 43
    7266:	f0 e2       	ldi	r31, 0x20	; 32
    7268:	8c e0       	ldi	r24, 0x0C	; 12
    726a:	80 83       	st	Z, r24
    726c:	8a e0       	ldi	r24, 0x0A	; 10
    726e:	81 83       	std	Z+1, r24	; 0x01
    7270:	81 e0       	ldi	r24, 0x01	; 1
    7272:	90 e0       	ldi	r25, 0x00	; 0
    7274:	84 83       	std	Z+4, r24	; 0x04
    7276:	95 83       	std	Z+5, r25	; 0x05
    7278:	2f e1       	ldi	r18, 0x1F	; 31
    727a:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    727e:	80 87       	std	Z+8, r24	; 0x08
    7280:	91 87       	std	Z+9, r25	; 0x09
    7282:	40 e0       	ldi	r20, 0x00	; 0
    7284:	bf 01       	movw	r22, r30
    7286:	80 ea       	ldi	r24, 0xA0	; 160
    7288:	94 e0       	ldi	r25, 0x04	; 4
    728a:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    728e:	c8 2f       	mov	r28, r24
    7290:	8d b7       	in	r24, 0x3d	; 61
    7292:	9e b7       	in	r25, 0x3e	; 62
    7294:	0a 96       	adiw	r24, 0x0a	; 10
    7296:	8d bf       	out	0x3d, r24	; 61
    7298:	9e bf       	out	0x3e, r25	; 62
    729a:	c1 11       	cpse	r28, r1
    729c:	10 c1       	rjmp	.+544    	; 0x74be <init_twi1_gyro+0x432>
    729e:	eb e2       	ldi	r30, 0x2B	; 43
    72a0:	f0 e2       	ldi	r31, 0x20	; 32
    72a2:	8c e0       	ldi	r24, 0x0C	; 12
    72a4:	80 83       	st	Z, r24
    72a6:	80 e1       	ldi	r24, 0x10	; 16
    72a8:	81 83       	std	Z+1, r24	; 0x01
    72aa:	81 e0       	ldi	r24, 0x01	; 1
    72ac:	90 e0       	ldi	r25, 0x00	; 0
    72ae:	84 83       	std	Z+4, r24	; 0x04
    72b0:	95 83       	std	Z+5, r25	; 0x05
    72b2:	83 e0       	ldi	r24, 0x03	; 3
    72b4:	90 e0       	ldi	r25, 0x00	; 0
    72b6:	80 87       	std	Z+8, r24	; 0x08
    72b8:	91 87       	std	Z+9, r25	; 0x09
    72ba:	41 e0       	ldi	r20, 0x01	; 1
    72bc:	bf 01       	movw	r22, r30
    72be:	80 ea       	ldi	r24, 0xA0	; 160
    72c0:	94 e0       	ldi	r25, 0x04	; 4
    72c2:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    72c6:	c8 2f       	mov	r28, r24
    72c8:	81 11       	cpse	r24, r1
    72ca:	f9 c0       	rjmp	.+498    	; 0x74be <init_twi1_gyro+0x432>
    72cc:	a3 e1       	ldi	r26, 0x13	; 19
    72ce:	b5 e2       	ldi	r27, 0x25	; 37
    72d0:	8c 91       	ld	r24, X
    72d2:	80 93 37 27 	sts	0x2737, r24	; 0x802737 <g_twi1_gyro_2_asax>
    72d6:	11 96       	adiw	r26, 0x01	; 1
    72d8:	8c 91       	ld	r24, X
    72da:	11 97       	sbiw	r26, 0x01	; 1
    72dc:	80 93 36 27 	sts	0x2736, r24	; 0x802736 <g_twi1_gyro_2_asay>
    72e0:	12 96       	adiw	r26, 0x02	; 2
    72e2:	8c 91       	ld	r24, X
    72e4:	12 97       	sbiw	r26, 0x02	; 2
    72e6:	80 93 35 27 	sts	0x2735, r24	; 0x802735 <g_twi1_gyro_2_asaz>
    72ea:	eb e2       	ldi	r30, 0x2B	; 43
    72ec:	f0 e2       	ldi	r31, 0x20	; 32
    72ee:	8c e0       	ldi	r24, 0x0C	; 12
    72f0:	80 83       	st	Z, r24
    72f2:	8a e0       	ldi	r24, 0x0A	; 10
    72f4:	81 83       	std	Z+1, r24	; 0x01
    72f6:	81 e0       	ldi	r24, 0x01	; 1
    72f8:	90 e0       	ldi	r25, 0x00	; 0
    72fa:	84 83       	std	Z+4, r24	; 0x04
    72fc:	95 83       	std	Z+5, r25	; 0x05
    72fe:	20 e1       	ldi	r18, 0x10	; 16
    7300:	2c 93       	st	X, r18
    7302:	80 87       	std	Z+8, r24	; 0x08
    7304:	91 87       	std	Z+9, r25	; 0x09
    7306:	40 e0       	ldi	r20, 0x00	; 0
    7308:	bf 01       	movw	r22, r30
    730a:	80 ea       	ldi	r24, 0xA0	; 160
    730c:	94 e0       	ldi	r25, 0x04	; 4
    730e:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    7312:	c8 2f       	mov	r28, r24
    7314:	81 11       	cpse	r24, r1
    7316:	d3 c0       	rjmp	.+422    	; 0x74be <init_twi1_gyro+0x432>
    7318:	61 e5       	ldi	r22, 0x51	; 81
    731a:	73 ec       	ldi	r23, 0xC3	; 195
    731c:	80 e0       	ldi	r24, 0x00	; 0
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    7324:	eb e2       	ldi	r30, 0x2B	; 43
    7326:	f0 e2       	ldi	r31, 0x20	; 32
    7328:	8c e0       	ldi	r24, 0x0C	; 12
    732a:	80 83       	st	Z, r24
    732c:	8a e0       	ldi	r24, 0x0A	; 10
    732e:	81 83       	std	Z+1, r24	; 0x01
    7330:	81 e0       	ldi	r24, 0x01	; 1
    7332:	90 e0       	ldi	r25, 0x00	; 0
    7334:	84 83       	std	Z+4, r24	; 0x04
    7336:	95 83       	std	Z+5, r25	; 0x05
    7338:	22 e1       	ldi	r18, 0x12	; 18
    733a:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    733e:	80 87       	std	Z+8, r24	; 0x08
    7340:	91 87       	std	Z+9, r25	; 0x09
    7342:	40 e0       	ldi	r20, 0x00	; 0
    7344:	bf 01       	movw	r22, r30
    7346:	80 ea       	ldi	r24, 0xA0	; 160
    7348:	94 e0       	ldi	r25, 0x04	; 4
    734a:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    734e:	c8 2f       	mov	r28, r24
    7350:	81 11       	cpse	r24, r1
    7352:	b5 c0       	rjmp	.+362    	; 0x74be <init_twi1_gyro+0x432>
    7354:	83 db       	rcall	.-2298   	; 0x6a5c <twi1_gyro_gyro_offset_set>
    7356:	c8 2f       	mov	r28, r24
    7358:	81 11       	cpse	r24, r1
    735a:	b1 c0       	rjmp	.+354    	; 0x74be <init_twi1_gyro+0x432>
    735c:	ae db       	rcall	.-2212   	; 0x6aba <twi1_gyro_accel_offset_set>
    735e:	c8 2f       	mov	r28, r24
    7360:	81 11       	cpse	r24, r1
    7362:	ad c0       	rjmp	.+346    	; 0x74be <init_twi1_gyro+0x432>
    7364:	eb e2       	ldi	r30, 0x2B	; 43
    7366:	f0 e2       	ldi	r31, 0x20	; 32
    7368:	88 e6       	ldi	r24, 0x68	; 104
    736a:	80 83       	st	Z, r24
    736c:	89 e1       	ldi	r24, 0x19	; 25
    736e:	81 83       	std	Z+1, r24	; 0x01
    7370:	81 e0       	ldi	r24, 0x01	; 1
    7372:	90 e0       	ldi	r25, 0x00	; 0
    7374:	84 83       	std	Z+4, r24	; 0x04
    7376:	95 83       	std	Z+5, r25	; 0x05
    7378:	23 e6       	ldi	r18, 0x63	; 99
    737a:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    737e:	80 87       	std	Z+8, r24	; 0x08
    7380:	91 87       	std	Z+9, r25	; 0x09
    7382:	40 e0       	ldi	r20, 0x00	; 0
    7384:	bf 01       	movw	r22, r30
    7386:	80 ea       	ldi	r24, 0xA0	; 160
    7388:	94 e0       	ldi	r25, 0x04	; 4
    738a:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    738e:	c8 2f       	mov	r28, r24
    7390:	81 11       	cpse	r24, r1
    7392:	95 c0       	rjmp	.+298    	; 0x74be <init_twi1_gyro+0x432>
    7394:	eb e2       	ldi	r30, 0x2B	; 43
    7396:	f0 e2       	ldi	r31, 0x20	; 32
    7398:	88 e6       	ldi	r24, 0x68	; 104
    739a:	80 83       	st	Z, r24
    739c:	8a e1       	ldi	r24, 0x1A	; 26
    739e:	81 83       	std	Z+1, r24	; 0x01
    73a0:	81 e0       	ldi	r24, 0x01	; 1
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	84 83       	std	Z+4, r24	; 0x04
    73a6:	95 83       	std	Z+5, r25	; 0x05
    73a8:	26 e0       	ldi	r18, 0x06	; 6
    73aa:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    73ae:	80 87       	std	Z+8, r24	; 0x08
    73b0:	91 87       	std	Z+9, r25	; 0x09
    73b2:	40 e0       	ldi	r20, 0x00	; 0
    73b4:	bf 01       	movw	r22, r30
    73b6:	80 ea       	ldi	r24, 0xA0	; 160
    73b8:	94 e0       	ldi	r25, 0x04	; 4
    73ba:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    73be:	c8 2f       	mov	r28, r24
    73c0:	81 11       	cpse	r24, r1
    73c2:	7d c0       	rjmp	.+250    	; 0x74be <init_twi1_gyro+0x432>
    73c4:	eb e2       	ldi	r30, 0x2B	; 43
    73c6:	f0 e2       	ldi	r31, 0x20	; 32
    73c8:	88 e6       	ldi	r24, 0x68	; 104
    73ca:	80 83       	st	Z, r24
    73cc:	8d e1       	ldi	r24, 0x1D	; 29
    73ce:	81 83       	std	Z+1, r24	; 0x01
    73d0:	81 e0       	ldi	r24, 0x01	; 1
    73d2:	90 e0       	ldi	r25, 0x00	; 0
    73d4:	84 83       	std	Z+4, r24	; 0x04
    73d6:	95 83       	std	Z+5, r25	; 0x05
    73d8:	26 e0       	ldi	r18, 0x06	; 6
    73da:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    73de:	80 87       	std	Z+8, r24	; 0x08
    73e0:	91 87       	std	Z+9, r25	; 0x09
    73e2:	40 e0       	ldi	r20, 0x00	; 0
    73e4:	bf 01       	movw	r22, r30
    73e6:	80 ea       	ldi	r24, 0xA0	; 160
    73e8:	94 e0       	ldi	r25, 0x04	; 4
    73ea:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    73ee:	c8 2f       	mov	r28, r24
    73f0:	81 11       	cpse	r24, r1
    73f2:	65 c0       	rjmp	.+202    	; 0x74be <init_twi1_gyro+0x432>
    73f4:	eb e2       	ldi	r30, 0x2B	; 43
    73f6:	f0 e2       	ldi	r31, 0x20	; 32
    73f8:	88 e6       	ldi	r24, 0x68	; 104
    73fa:	80 83       	st	Z, r24
    73fc:	8f e1       	ldi	r24, 0x1F	; 31
    73fe:	81 83       	std	Z+1, r24	; 0x01
    7400:	81 e0       	ldi	r24, 0x01	; 1
    7402:	90 e0       	ldi	r25, 0x00	; 0
    7404:	84 83       	std	Z+4, r24	; 0x04
    7406:	95 83       	std	Z+5, r25	; 0x05
    7408:	29 e1       	ldi	r18, 0x19	; 25
    740a:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    740e:	80 87       	std	Z+8, r24	; 0x08
    7410:	91 87       	std	Z+9, r25	; 0x09
    7412:	40 e0       	ldi	r20, 0x00	; 0
    7414:	bf 01       	movw	r22, r30
    7416:	80 ea       	ldi	r24, 0xA0	; 160
    7418:	94 e0       	ldi	r25, 0x04	; 4
    741a:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    741e:	c8 2f       	mov	r28, r24
    7420:	81 11       	cpse	r24, r1
    7422:	4d c0       	rjmp	.+154    	; 0x74be <init_twi1_gyro+0x432>
    7424:	eb e2       	ldi	r30, 0x2B	; 43
    7426:	f0 e2       	ldi	r31, 0x20	; 32
    7428:	88 e6       	ldi	r24, 0x68	; 104
    742a:	80 83       	st	Z, r24
    742c:	8a e6       	ldi	r24, 0x6A	; 106
    742e:	81 83       	std	Z+1, r24	; 0x01
    7430:	81 e0       	ldi	r24, 0x01	; 1
    7432:	90 e0       	ldi	r25, 0x00	; 0
    7434:	84 83       	std	Z+4, r24	; 0x04
    7436:	95 83       	std	Z+5, r25	; 0x05
    7438:	21 e0       	ldi	r18, 0x01	; 1
    743a:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    743e:	80 87       	std	Z+8, r24	; 0x08
    7440:	91 87       	std	Z+9, r25	; 0x09
    7442:	40 e0       	ldi	r20, 0x00	; 0
    7444:	bf 01       	movw	r22, r30
    7446:	80 ea       	ldi	r24, 0xA0	; 160
    7448:	94 e0       	ldi	r25, 0x04	; 4
    744a:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    744e:	c8 2f       	mov	r28, r24
    7450:	81 11       	cpse	r24, r1
    7452:	35 c0       	rjmp	.+106    	; 0x74be <init_twi1_gyro+0x432>
    7454:	61 e5       	ldi	r22, 0x51	; 81
    7456:	73 ec       	ldi	r23, 0xC3	; 195
    7458:	80 e0       	ldi	r24, 0x00	; 0
    745a:	90 e0       	ldi	r25, 0x00	; 0
    745c:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    7460:	81 e0       	ldi	r24, 0x01	; 1
    7462:	80 93 73 27 	sts	0x2773, r24	; 0x802773 <g_twi1_gyro_valid>
    7466:	87 ec       	ldi	r24, 0xC7	; 199
    7468:	92 e3       	ldi	r25, 0x32	; 50
    746a:	9f 93       	push	r25
    746c:	8f 93       	push	r24
    746e:	1f 92       	push	r1
    7470:	10 e4       	ldi	r17, 0x40	; 64
    7472:	1f 93       	push	r17
    7474:	cb e1       	ldi	r28, 0x1B	; 27
    7476:	d5 e2       	ldi	r29, 0x25	; 37
    7478:	df 93       	push	r29
    747a:	cf 93       	push	r28
    747c:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7480:	ae 01       	movw	r20, r28
    7482:	68 e2       	ldi	r22, 0x28	; 40
    7484:	88 e0       	ldi	r24, 0x08	; 8
    7486:	9b dd       	rcall	.-1226   	; 0x6fbe <task_twi2_lcd_str>
    7488:	8c e0       	ldi	r24, 0x0C	; 12
    748a:	93 e3       	ldi	r25, 0x33	; 51
    748c:	9f 93       	push	r25
    748e:	8f 93       	push	r24
    7490:	1f 92       	push	r1
    7492:	1f 93       	push	r17
    7494:	df 93       	push	r29
    7496:	cf 93       	push	r28
    7498:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    749c:	81 34       	cpi	r24, 0x41	; 65
    749e:	91 05       	cpc	r25, r1
    74a0:	10 f0       	brcs	.+4      	; 0x74a6 <init_twi1_gyro+0x41a>
    74a2:	80 e4       	ldi	r24, 0x40	; 64
    74a4:	90 e0       	ldi	r25, 0x00	; 0
    74a6:	40 e0       	ldi	r20, 0x00	; 0
    74a8:	68 2f       	mov	r22, r24
    74aa:	8b e1       	ldi	r24, 0x1B	; 27
    74ac:	95 e2       	ldi	r25, 0x25	; 37
    74ae:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    74b2:	8d b7       	in	r24, 0x3d	; 61
    74b4:	9e b7       	in	r25, 0x3e	; 62
    74b6:	0c 96       	adiw	r24, 0x0c	; 12
    74b8:	8d bf       	out	0x3d, r24	; 61
    74ba:	9e bf       	out	0x3e, r25	; 62
    74bc:	23 c0       	rjmp	.+70     	; 0x7504 <init_twi1_gyro+0x478>
    74be:	8c 2f       	mov	r24, r28
    74c0:	0c 2e       	mov	r0, r28
    74c2:	00 0c       	add	r0, r0
    74c4:	99 0b       	sbc	r25, r25
    74c6:	9f 93       	push	r25
    74c8:	cf 93       	push	r28
    74ca:	8b ed       	ldi	r24, 0xDB	; 219
    74cc:	92 e3       	ldi	r25, 0x32	; 50
    74ce:	9f 93       	push	r25
    74d0:	8f 93       	push	r24
    74d2:	1f 92       	push	r1
    74d4:	80 e4       	ldi	r24, 0x40	; 64
    74d6:	8f 93       	push	r24
    74d8:	8b e1       	ldi	r24, 0x1B	; 27
    74da:	95 e2       	ldi	r25, 0x25	; 37
    74dc:	9f 93       	push	r25
    74de:	8f 93       	push	r24
    74e0:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    74e4:	81 34       	cpi	r24, 0x41	; 65
    74e6:	91 05       	cpc	r25, r1
    74e8:	10 f0       	brcs	.+4      	; 0x74ee <init_twi1_gyro+0x462>
    74ea:	80 e4       	ldi	r24, 0x40	; 64
    74ec:	90 e0       	ldi	r25, 0x00	; 0
    74ee:	40 e0       	ldi	r20, 0x00	; 0
    74f0:	68 2f       	mov	r22, r24
    74f2:	8b e1       	ldi	r24, 0x1B	; 27
    74f4:	95 e2       	ldi	r25, 0x25	; 37
    74f6:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    74fa:	8d b7       	in	r24, 0x3d	; 61
    74fc:	9e b7       	in	r25, 0x3e	; 62
    74fe:	08 96       	adiw	r24, 0x08	; 8
    7500:	8d bf       	out	0x3d, r24	; 61
    7502:	9e bf       	out	0x3e, r25	; 62
    7504:	df 91       	pop	r29
    7506:	cf 91       	pop	r28
    7508:	1f 91       	pop	r17
    750a:	08 95       	ret

0000750c <task_twi2_lcd_line>:
    750c:	0f 93       	push	r16
    750e:	cf 93       	push	r28
    7510:	df 93       	push	r29
    7512:	d4 2f       	mov	r29, r20
    7514:	c2 2f       	mov	r28, r18
    7516:	f4 dc       	rcall	.-1560   	; 0x6f00 <task_twi2_lcd_pos_xy>
    7518:	e3 d9       	rcall	.-3130   	; 0x68e0 <twi2_waitUntilReady>
    751a:	a7 e1       	ldi	r26, 0x17	; 23
    751c:	b0 e2       	ldi	r27, 0x20	; 32
    751e:	82 e3       	ldi	r24, 0x32	; 50
    7520:	11 96       	adiw	r26, 0x01	; 1
    7522:	8c 93       	st	X, r24
    7524:	11 97       	sbiw	r26, 0x01	; 1
    7526:	eb e0       	ldi	r30, 0x0B	; 11
    7528:	f5 e2       	ldi	r31, 0x25	; 37
    752a:	d0 83       	st	Z, r29
    752c:	c1 83       	std	Z+1, r28	; 0x01
    752e:	02 83       	std	Z+2, r16	; 0x02
    7530:	83 e0       	ldi	r24, 0x03	; 3
    7532:	90 e0       	ldi	r25, 0x00	; 0
    7534:	18 96       	adiw	r26, 0x08	; 8
    7536:	8d 93       	st	X+, r24
    7538:	9c 93       	st	X, r25
    753a:	19 97       	sbiw	r26, 0x09	; 9
    753c:	40 e0       	ldi	r20, 0x00	; 0
    753e:	bd 01       	movw	r22, r26
    7540:	80 e8       	ldi	r24, 0x80	; 128
    7542:	94 e0       	ldi	r25, 0x04	; 4
    7544:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    7548:	65 e0       	ldi	r22, 0x05	; 5
    754a:	70 e0       	ldi	r23, 0x00	; 0
    754c:	80 e0       	ldi	r24, 0x00	; 0
    754e:	90 e0       	ldi	r25, 0x00	; 0
    7550:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    7554:	df 91       	pop	r29
    7556:	cf 91       	pop	r28
    7558:	0f 91       	pop	r16
    755a:	08 95       	ret

0000755c <task_twi2_lcd_rect>:
    755c:	ef 92       	push	r14
    755e:	0f 93       	push	r16
    7560:	cf 93       	push	r28
    7562:	df 93       	push	r29
    7564:	d4 2f       	mov	r29, r20
    7566:	c2 2f       	mov	r28, r18
    7568:	cb dc       	rcall	.-1642   	; 0x6f00 <task_twi2_lcd_pos_xy>
    756a:	ba d9       	rcall	.-3212   	; 0x68e0 <twi2_waitUntilReady>
    756c:	01 11       	cpse	r16, r1
    756e:	02 c0       	rjmp	.+4      	; 0x7574 <task_twi2_lcd_rect+0x18>
    7570:	84 e3       	ldi	r24, 0x34	; 52
    7572:	01 c0       	rjmp	.+2      	; 0x7576 <task_twi2_lcd_rect+0x1a>
    7574:	86 e3       	ldi	r24, 0x36	; 54
    7576:	a7 e1       	ldi	r26, 0x17	; 23
    7578:	b0 e2       	ldi	r27, 0x20	; 32
    757a:	11 96       	adiw	r26, 0x01	; 1
    757c:	8c 93       	st	X, r24
    757e:	11 97       	sbiw	r26, 0x01	; 1
    7580:	eb e0       	ldi	r30, 0x0B	; 11
    7582:	f5 e2       	ldi	r31, 0x25	; 37
    7584:	d0 83       	st	Z, r29
    7586:	c1 83       	std	Z+1, r28	; 0x01
    7588:	e2 82       	std	Z+2, r14	; 0x02
    758a:	83 e0       	ldi	r24, 0x03	; 3
    758c:	90 e0       	ldi	r25, 0x00	; 0
    758e:	18 96       	adiw	r26, 0x08	; 8
    7590:	8d 93       	st	X+, r24
    7592:	9c 93       	st	X, r25
    7594:	19 97       	sbiw	r26, 0x09	; 9
    7596:	40 e0       	ldi	r20, 0x00	; 0
    7598:	bd 01       	movw	r22, r26
    759a:	80 e8       	ldi	r24, 0x80	; 128
    759c:	94 e0       	ldi	r25, 0x04	; 4
    759e:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    75a2:	65 e0       	ldi	r22, 0x05	; 5
    75a4:	70 e0       	ldi	r23, 0x00	; 0
    75a6:	80 e0       	ldi	r24, 0x00	; 0
    75a8:	90 e0       	ldi	r25, 0x00	; 0
    75aa:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    75ae:	df 91       	pop	r29
    75b0:	cf 91       	pop	r28
    75b2:	0f 91       	pop	r16
    75b4:	ef 90       	pop	r14
    75b6:	08 95       	ret

000075b8 <task_twi2_lcd_circ>:
    75b8:	0f 93       	push	r16
    75ba:	cf 93       	push	r28
    75bc:	df 93       	push	r29
    75be:	c4 2f       	mov	r28, r20
    75c0:	d2 2f       	mov	r29, r18
    75c2:	9e dc       	rcall	.-1732   	; 0x6f00 <task_twi2_lcd_pos_xy>
    75c4:	8d d9       	rcall	.-3302   	; 0x68e0 <twi2_waitUntilReady>
    75c6:	d1 11       	cpse	r29, r1
    75c8:	02 c0       	rjmp	.+4      	; 0x75ce <task_twi2_lcd_circ+0x16>
    75ca:	88 e3       	ldi	r24, 0x38	; 56
    75cc:	01 c0       	rjmp	.+2      	; 0x75d0 <task_twi2_lcd_circ+0x18>
    75ce:	8a e3       	ldi	r24, 0x3A	; 58
    75d0:	e7 e1       	ldi	r30, 0x17	; 23
    75d2:	f0 e2       	ldi	r31, 0x20	; 32
    75d4:	81 83       	std	Z+1, r24	; 0x01
    75d6:	ab e0       	ldi	r26, 0x0B	; 11
    75d8:	b5 e2       	ldi	r27, 0x25	; 37
    75da:	cc 93       	st	X, r28
    75dc:	11 96       	adiw	r26, 0x01	; 1
    75de:	0c 93       	st	X, r16
    75e0:	82 e0       	ldi	r24, 0x02	; 2
    75e2:	90 e0       	ldi	r25, 0x00	; 0
    75e4:	80 87       	std	Z+8, r24	; 0x08
    75e6:	91 87       	std	Z+9, r25	; 0x09
    75e8:	40 e0       	ldi	r20, 0x00	; 0
    75ea:	bf 01       	movw	r22, r30
    75ec:	80 e8       	ldi	r24, 0x80	; 128
    75ee:	94 e0       	ldi	r25, 0x04	; 4
    75f0:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    75f4:	65 e0       	ldi	r22, 0x05	; 5
    75f6:	70 e0       	ldi	r23, 0x00	; 0
    75f8:	80 e0       	ldi	r24, 0x00	; 0
    75fa:	90 e0       	ldi	r25, 0x00	; 0
    75fc:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    7600:	df 91       	pop	r29
    7602:	cf 91       	pop	r28
    7604:	0f 91       	pop	r16
    7606:	08 95       	ret

00007608 <task_twi2_lcd_header>:
    7608:	ef 92       	push	r14
    760a:	0f 93       	push	r16
    760c:	65 dc       	rcall	.-1846   	; 0x6ed8 <task_twi2_lcd_cls>
    760e:	44 e1       	ldi	r20, 0x14	; 20
    7610:	51 e2       	ldi	r21, 0x21	; 33
    7612:	62 e0       	ldi	r22, 0x02	; 2
    7614:	8c e3       	ldi	r24, 0x3C	; 60
    7616:	d3 dc       	rcall	.-1626   	; 0x6fbe <task_twi2_lcd_str>
    7618:	4e e1       	ldi	r20, 0x1E	; 30
    761a:	51 e2       	ldi	r21, 0x21	; 33
    761c:	62 e0       	ldi	r22, 0x02	; 2
    761e:	84 eb       	ldi	r24, 0xB4	; 180
    7620:	ce dc       	rcall	.-1636   	; 0x6fbe <task_twi2_lcd_str>
    7622:	01 e0       	ldi	r16, 0x01	; 1
    7624:	21 e0       	ldi	r18, 0x01	; 1
    7626:	43 e0       	ldi	r20, 0x03	; 3
    7628:	64 e0       	ldi	r22, 0x04	; 4
    762a:	89 e0       	ldi	r24, 0x09	; 9
    762c:	c5 df       	rcall	.-118    	; 0x75b8 <task_twi2_lcd_circ>
    762e:	ee 24       	eor	r14, r14
    7630:	e3 94       	inc	r14
    7632:	00 e0       	ldi	r16, 0x00	; 0
    7634:	24 e0       	ldi	r18, 0x04	; 4
    7636:	46 e0       	ldi	r20, 0x06	; 6
    7638:	62 e0       	ldi	r22, 0x02	; 2
    763a:	81 e0       	ldi	r24, 0x01	; 1
    763c:	8f df       	rcall	.-226    	; 0x755c <task_twi2_lcd_rect>
    763e:	24 e0       	ldi	r18, 0x04	; 4
    7640:	46 e0       	ldi	r20, 0x06	; 6
    7642:	62 e0       	ldi	r22, 0x02	; 2
    7644:	8c e0       	ldi	r24, 0x0C	; 12
    7646:	8a df       	rcall	.-236    	; 0x755c <task_twi2_lcd_rect>
    7648:	01 e0       	ldi	r16, 0x01	; 1
    764a:	2b e0       	ldi	r18, 0x0B	; 11
    764c:	4f ee       	ldi	r20, 0xEF	; 239
    764e:	6b e0       	ldi	r22, 0x0B	; 11
    7650:	80 e0       	ldi	r24, 0x00	; 0
    7652:	5c df       	rcall	.-328    	; 0x750c <task_twi2_lcd_line>
    7654:	0f 91       	pop	r16
    7656:	ef 90       	pop	r14
    7658:	08 95       	ret

0000765a <twi_start>:
    765a:	7f 92       	push	r7
    765c:	8f 92       	push	r8
    765e:	9f 92       	push	r9
    7660:	af 92       	push	r10
    7662:	bf 92       	push	r11
    7664:	cf 92       	push	r12
    7666:	df 92       	push	r13
    7668:	ef 92       	push	r14
    766a:	ff 92       	push	r15
    766c:	0f 93       	push	r16
    766e:	1f 93       	push	r17
    7670:	cf 93       	push	r28
    7672:	df 93       	push	r29
    7674:	60 e4       	ldi	r22, 0x40	; 64
    7676:	85 e0       	ldi	r24, 0x05	; 5
    7678:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    767c:	66 e3       	ldi	r22, 0x36	; 54
    767e:	70 e2       	ldi	r23, 0x20	; 32
    7680:	80 ea       	ldi	r24, 0xA0	; 160
    7682:	94 e0       	ldi	r25, 0x04	; 4
    7684:	0e 94 44 54 	call	0xa888	; 0xa888 <twi_master_init>
    7688:	e0 ea       	ldi	r30, 0xA0	; 160
    768a:	f4 e0       	ldi	r31, 0x04	; 4
    768c:	81 81       	ldd	r24, Z+1	; 0x01
    768e:	88 60       	ori	r24, 0x08	; 8
    7690:	81 83       	std	Z+1, r24	; 0x01
    7692:	60 e4       	ldi	r22, 0x40	; 64
    7694:	83 e0       	ldi	r24, 0x03	; 3
    7696:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    769a:	62 e2       	ldi	r22, 0x22	; 34
    769c:	70 e2       	ldi	r23, 0x20	; 32
    769e:	80 e8       	ldi	r24, 0x80	; 128
    76a0:	94 e0       	ldi	r25, 0x04	; 4
    76a2:	0e 94 44 54 	call	0xa888	; 0xa888 <twi_master_init>
    76a6:	e0 e8       	ldi	r30, 0x80	; 128
    76a8:	f4 e0       	ldi	r31, 0x04	; 4
    76aa:	81 81       	ldd	r24, Z+1	; 0x01
    76ac:	88 60       	ori	r24, 0x08	; 8
    76ae:	81 83       	std	Z+1, r24	; 0x01
    76b0:	61 e4       	ldi	r22, 0x41	; 65
    76b2:	7b e4       	ldi	r23, 0x4B	; 75
    76b4:	8c e4       	ldi	r24, 0x4C	; 76
    76b6:	90 e0       	ldi	r25, 0x00	; 0
    76b8:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    76bc:	e7 e1       	ldi	r30, 0x17	; 23
    76be:	f0 e2       	ldi	r31, 0x20	; 32
    76c0:	81 e0       	ldi	r24, 0x01	; 1
    76c2:	81 83       	std	Z+1, r24	; 0x01
    76c4:	81 e0       	ldi	r24, 0x01	; 1
    76c6:	90 e0       	ldi	r25, 0x00	; 0
    76c8:	84 83       	std	Z+4, r24	; 0x04
    76ca:	95 83       	std	Z+5, r25	; 0x05
    76cc:	80 87       	std	Z+8, r24	; 0x08
    76ce:	91 87       	std	Z+9, r25	; 0x09
    76d0:	41 e0       	ldi	r20, 0x01	; 1
    76d2:	bf 01       	movw	r22, r30
    76d4:	80 e8       	ldi	r24, 0x80	; 128
    76d6:	94 e0       	ldi	r25, 0x04	; 4
    76d8:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    76dc:	80 91 0b 25 	lds	r24, 0x250B	; 0x80250b <twi2_m_data>
    76e0:	80 93 e9 26 	sts	0x26E9, r24	; 0x8026e9 <g_twi2_lcd_version>
    76e4:	81 31       	cpi	r24, 0x11	; 17
    76e6:	08 f4       	brcc	.+2      	; 0x76ea <twi_start+0x90>
    76e8:	78 c0       	rjmp	.+240    	; 0x77da <twi_start+0x180>
    76ea:	c7 e1       	ldi	r28, 0x17	; 23
    76ec:	d0 e2       	ldi	r29, 0x20	; 32
    76ee:	82 e0       	ldi	r24, 0x02	; 2
    76f0:	89 83       	std	Y+1, r24	; 0x01
    76f2:	0f 2e       	mov	r0, r31
    76f4:	fb e0       	ldi	r31, 0x0B	; 11
    76f6:	ef 2e       	mov	r14, r31
    76f8:	f5 e2       	ldi	r31, 0x25	; 37
    76fa:	ff 2e       	mov	r15, r31
    76fc:	f0 2d       	mov	r31, r0
    76fe:	68 94       	set
    7700:	dd 24       	eor	r13, r13
    7702:	d4 f8       	bld	r13, 4
    7704:	f7 01       	movw	r30, r14
    7706:	d0 82       	st	Z, r13
    7708:	01 e0       	ldi	r16, 0x01	; 1
    770a:	10 e0       	ldi	r17, 0x00	; 0
    770c:	08 87       	std	Y+8, r16	; 0x08
    770e:	19 87       	std	Y+9, r17	; 0x09
    7710:	40 e0       	ldi	r20, 0x00	; 0
    7712:	be 01       	movw	r22, r28
    7714:	80 e8       	ldi	r24, 0x80	; 128
    7716:	94 e0       	ldi	r25, 0x04	; 4
    7718:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    771c:	65 e0       	ldi	r22, 0x05	; 5
    771e:	70 e0       	ldi	r23, 0x00	; 0
    7720:	80 e0       	ldi	r24, 0x00	; 0
    7722:	90 e0       	ldi	r25, 0x00	; 0
    7724:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    7728:	db d8       	rcall	.-3658   	; 0x68e0 <twi2_waitUntilReady>
    772a:	d9 82       	std	Y+1, r13	; 0x01
    772c:	18 86       	std	Y+8, r1	; 0x08
    772e:	19 86       	std	Y+9, r1	; 0x09
    7730:	40 e0       	ldi	r20, 0x00	; 0
    7732:	be 01       	movw	r22, r28
    7734:	80 e8       	ldi	r24, 0x80	; 128
    7736:	94 e0       	ldi	r25, 0x04	; 4
    7738:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    773c:	60 e9       	ldi	r22, 0x90	; 144
    773e:	70 ed       	ldi	r23, 0xD0	; 208
    7740:	83 e0       	ldi	r24, 0x03	; 3
    7742:	90 e0       	ldi	r25, 0x00	; 0
    7744:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    7748:	81 e0       	ldi	r24, 0x01	; 1
    774a:	13 d9       	rcall	.-3546   	; 0x6972 <twi2_set_leds>
    774c:	c9 d8       	rcall	.-3694   	; 0x68e0 <twi2_waitUntilReady>
    774e:	84 e1       	ldi	r24, 0x14	; 20
    7750:	89 83       	std	Y+1, r24	; 0x01
    7752:	81 e0       	ldi	r24, 0x01	; 1
    7754:	f7 01       	movw	r30, r14
    7756:	80 83       	st	Z, r24
    7758:	08 87       	std	Y+8, r16	; 0x08
    775a:	19 87       	std	Y+9, r17	; 0x09
    775c:	40 e0       	ldi	r20, 0x00	; 0
    775e:	be 01       	movw	r22, r28
    7760:	80 e8       	ldi	r24, 0x80	; 128
    7762:	94 e0       	ldi	r25, 0x04	; 4
    7764:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    7768:	65 e0       	ldi	r22, 0x05	; 5
    776a:	70 e0       	ldi	r23, 0x00	; 0
    776c:	80 e0       	ldi	r24, 0x00	; 0
    776e:	90 e0       	ldi	r25, 0x00	; 0
    7770:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    7774:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <g_bias_pm>
    7778:	37 d9       	rcall	.-3474   	; 0x69e8 <twi2_set_bias>
    777a:	69 e1       	ldi	r22, 0x19	; 25
    777c:	8c e2       	ldi	r24, 0x2C	; 44
    777e:	4e d9       	rcall	.-3428   	; 0x6a1c <twi2_set_beep>
    7780:	61 e6       	ldi	r22, 0x61	; 97
    7782:	73 ee       	ldi	r23, 0xE3	; 227
    7784:	86 e1       	ldi	r24, 0x16	; 22
    7786:	90 e0       	ldi	r25, 0x00	; 0
    7788:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    778c:	c0 e8       	ldi	r28, 0x80	; 128
    778e:	6c 2f       	mov	r22, r28
    7790:	80 e0       	ldi	r24, 0x00	; 0
    7792:	0a d9       	rcall	.-3564   	; 0x69a8 <twi2_set_ledbl>
    7794:	68 e8       	ldi	r22, 0x88	; 136
    7796:	73 e1       	ldi	r23, 0x13	; 19
    7798:	80 e0       	ldi	r24, 0x00	; 0
    779a:	90 e0       	ldi	r25, 0x00	; 0
    779c:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    77a0:	c2 50       	subi	r28, 0x02	; 2
    77a2:	a9 f7       	brne	.-22     	; 0x778e <twi_start+0x134>
    77a4:	69 e1       	ldi	r22, 0x19	; 25
    77a6:	88 e5       	ldi	r24, 0x58	; 88
    77a8:	39 d9       	rcall	.-3470   	; 0x6a1c <twi2_set_beep>
    77aa:	61 e6       	ldi	r22, 0x61	; 97
    77ac:	73 ee       	ldi	r23, 0xE3	; 227
    77ae:	86 e1       	ldi	r24, 0x16	; 22
    77b0:	90 e0       	ldi	r25, 0x00	; 0
    77b2:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    77b6:	6c 2f       	mov	r22, r28
    77b8:	80 e0       	ldi	r24, 0x00	; 0
    77ba:	f6 d8       	rcall	.-3604   	; 0x69a8 <twi2_set_ledbl>
    77bc:	68 e8       	ldi	r22, 0x88	; 136
    77be:	73 e1       	ldi	r23, 0x13	; 19
    77c0:	80 e0       	ldi	r24, 0x00	; 0
    77c2:	90 e0       	ldi	r25, 0x00	; 0
    77c4:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    77c8:	ce 5f       	subi	r28, 0xFE	; 254
    77ca:	c2 38       	cpi	r28, 0x82	; 130
    77cc:	a1 f7       	brne	.-24     	; 0x77b6 <twi_start+0x15c>
    77ce:	60 91 9b 28 	lds	r22, 0x289B	; 0x80289b <g_backlight_mode_pwm>
    77d2:	80 e0       	ldi	r24, 0x00	; 0
    77d4:	e9 d8       	rcall	.-3630   	; 0x69a8 <twi2_set_ledbl>
    77d6:	83 e0       	ldi	r24, 0x03	; 3
    77d8:	cc d8       	rcall	.-3688   	; 0x6972 <twi2_set_leds>
    77da:	16 df       	rcall	.-468    	; 0x7608 <task_twi2_lcd_header>
    77dc:	1f 92       	push	r1
    77de:	84 e4       	ldi	r24, 0x44	; 68
    77e0:	8f 93       	push	r24
    77e2:	88 eb       	ldi	r24, 0xB8	; 184
    77e4:	94 e3       	ldi	r25, 0x34	; 52
    77e6:	9f 93       	push	r25
    77e8:	8f 93       	push	r24
    77ea:	1f 92       	push	r1
    77ec:	80 e4       	ldi	r24, 0x40	; 64
    77ee:	8f 93       	push	r24
    77f0:	8b e1       	ldi	r24, 0x1B	; 27
    77f2:	95 e2       	ldi	r25, 0x25	; 37
    77f4:	9f 93       	push	r25
    77f6:	8f 93       	push	r24
    77f8:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    77fc:	81 34       	cpi	r24, 0x41	; 65
    77fe:	91 05       	cpc	r25, r1
    7800:	10 f0       	brcs	.+4      	; 0x7806 <twi_start+0x1ac>
    7802:	80 e4       	ldi	r24, 0x40	; 64
    7804:	90 e0       	ldi	r25, 0x00	; 0
    7806:	40 e0       	ldi	r20, 0x00	; 0
    7808:	68 2f       	mov	r22, r24
    780a:	8b e1       	ldi	r24, 0x1B	; 27
    780c:	95 e2       	ldi	r25, 0x25	; 37
    780e:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    7812:	10 92 f2 26 	sts	0x26F2, r1	; 0x8026f2 <g_twi1_hygro_status>
    7816:	eb e2       	ldi	r30, 0x2B	; 43
    7818:	f0 e2       	ldi	r31, 0x20	; 32
    781a:	84 e4       	ldi	r24, 0x44	; 68
    781c:	80 83       	st	Z, r24
    781e:	80 e3       	ldi	r24, 0x30	; 48
    7820:	81 83       	std	Z+1, r24	; 0x01
    7822:	83 e9       	ldi	r24, 0x93	; 147
    7824:	82 83       	std	Z+2, r24	; 0x02
    7826:	82 e0       	ldi	r24, 0x02	; 2
    7828:	90 e0       	ldi	r25, 0x00	; 0
    782a:	84 83       	std	Z+4, r24	; 0x04
    782c:	95 83       	std	Z+5, r25	; 0x05
    782e:	10 86       	std	Z+8, r1	; 0x08
    7830:	11 86       	std	Z+9, r1	; 0x09
    7832:	40 e0       	ldi	r20, 0x00	; 0
    7834:	bf 01       	movw	r22, r30
    7836:	80 ea       	ldi	r24, 0xA0	; 160
    7838:	94 e0       	ldi	r25, 0x04	; 4
    783a:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    783e:	c8 2f       	mov	r28, r24
    7840:	8d b7       	in	r24, 0x3d	; 61
    7842:	9e b7       	in	r25, 0x3e	; 62
    7844:	08 96       	adiw	r24, 0x08	; 8
    7846:	8d bf       	out	0x3d, r24	; 61
    7848:	9e bf       	out	0x3e, r25	; 62
    784a:	cc 23       	and	r28, r28
    784c:	f9 f0       	breq	.+62     	; 0x788c <twi_start+0x232>
    784e:	81 e7       	ldi	r24, 0x71	; 113
    7850:	94 e3       	ldi	r25, 0x34	; 52
    7852:	9f 93       	push	r25
    7854:	8f 93       	push	r24
    7856:	1f 92       	push	r1
    7858:	80 e4       	ldi	r24, 0x40	; 64
    785a:	8f 93       	push	r24
    785c:	8b e1       	ldi	r24, 0x1B	; 27
    785e:	95 e2       	ldi	r25, 0x25	; 37
    7860:	9f 93       	push	r25
    7862:	8f 93       	push	r24
    7864:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7868:	81 34       	cpi	r24, 0x41	; 65
    786a:	91 05       	cpc	r25, r1
    786c:	10 f0       	brcs	.+4      	; 0x7872 <twi_start+0x218>
    786e:	80 e4       	ldi	r24, 0x40	; 64
    7870:	90 e0       	ldi	r25, 0x00	; 0
    7872:	40 e0       	ldi	r20, 0x00	; 0
    7874:	68 2f       	mov	r22, r24
    7876:	8b e1       	ldi	r24, 0x1B	; 27
    7878:	95 e2       	ldi	r25, 0x25	; 37
    787a:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    787e:	0f 90       	pop	r0
    7880:	0f 90       	pop	r0
    7882:	0f 90       	pop	r0
    7884:	0f 90       	pop	r0
    7886:	0f 90       	pop	r0
    7888:	0f 90       	pop	r0
    788a:	a2 c0       	rjmp	.+324    	; 0x79d0 <twi_start+0x376>
    788c:	60 e1       	ldi	r22, 0x10	; 16
    788e:	77 e2       	ldi	r23, 0x27	; 39
    7890:	80 e0       	ldi	r24, 0x00	; 0
    7892:	90 e0       	ldi	r25, 0x00	; 0
    7894:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    7898:	eb e2       	ldi	r30, 0x2B	; 43
    789a:	f0 e2       	ldi	r31, 0x20	; 32
    789c:	84 e4       	ldi	r24, 0x44	; 68
    789e:	80 83       	st	Z, r24
    78a0:	80 e3       	ldi	r24, 0x30	; 48
    78a2:	81 83       	std	Z+1, r24	; 0x01
    78a4:	82 ea       	ldi	r24, 0xA2	; 162
    78a6:	82 83       	std	Z+2, r24	; 0x02
    78a8:	82 e0       	ldi	r24, 0x02	; 2
    78aa:	90 e0       	ldi	r25, 0x00	; 0
    78ac:	84 83       	std	Z+4, r24	; 0x04
    78ae:	95 83       	std	Z+5, r25	; 0x05
    78b0:	10 86       	std	Z+8, r1	; 0x08
    78b2:	11 86       	std	Z+9, r1	; 0x09
    78b4:	40 e0       	ldi	r20, 0x00	; 0
    78b6:	bf 01       	movw	r22, r30
    78b8:	80 ea       	ldi	r24, 0xA0	; 160
    78ba:	94 e0       	ldi	r25, 0x04	; 4
    78bc:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    78c0:	c8 2f       	mov	r28, r24
    78c2:	81 11       	cpse	r24, r1
    78c4:	85 c0       	rjmp	.+266    	; 0x79d0 <twi_start+0x376>
    78c6:	60 e1       	ldi	r22, 0x10	; 16
    78c8:	77 e2       	ldi	r23, 0x27	; 39
    78ca:	80 e0       	ldi	r24, 0x00	; 0
    78cc:	90 e0       	ldi	r25, 0x00	; 0
    78ce:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    78d2:	eb e2       	ldi	r30, 0x2B	; 43
    78d4:	f0 e2       	ldi	r31, 0x20	; 32
    78d6:	84 e4       	ldi	r24, 0x44	; 68
    78d8:	80 83       	st	Z, r24
    78da:	83 ef       	ldi	r24, 0xF3	; 243
    78dc:	81 83       	std	Z+1, r24	; 0x01
    78de:	8d e2       	ldi	r24, 0x2D	; 45
    78e0:	82 83       	std	Z+2, r24	; 0x02
    78e2:	82 e0       	ldi	r24, 0x02	; 2
    78e4:	90 e0       	ldi	r25, 0x00	; 0
    78e6:	84 83       	std	Z+4, r24	; 0x04
    78e8:	95 83       	std	Z+5, r25	; 0x05
    78ea:	80 87       	std	Z+8, r24	; 0x08
    78ec:	91 87       	std	Z+9, r25	; 0x09
    78ee:	41 e0       	ldi	r20, 0x01	; 1
    78f0:	bf 01       	movw	r22, r30
    78f2:	80 ea       	ldi	r24, 0xA0	; 160
    78f4:	94 e0       	ldi	r25, 0x04	; 4
    78f6:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    78fa:	c8 2f       	mov	r28, r24
    78fc:	81 11       	cpse	r24, r1
    78fe:	68 c0       	rjmp	.+208    	; 0x79d0 <twi_start+0x376>
    7900:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <twi1_m_data+0x1>
    7904:	80 93 f2 26 	sts	0x26F2, r24	; 0x8026f2 <g_twi1_hygro_status>
    7908:	1f 92       	push	r1
    790a:	8f 93       	push	r24
    790c:	8f e3       	ldi	r24, 0x3F	; 63
    790e:	94 e3       	ldi	r25, 0x34	; 52
    7910:	9f 93       	push	r25
    7912:	8f 93       	push	r24
    7914:	1f 92       	push	r1
    7916:	80 e4       	ldi	r24, 0x40	; 64
    7918:	8f 93       	push	r24
    791a:	8b e1       	ldi	r24, 0x1B	; 27
    791c:	95 e2       	ldi	r25, 0x25	; 37
    791e:	9f 93       	push	r25
    7920:	8f 93       	push	r24
    7922:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7926:	81 34       	cpi	r24, 0x41	; 65
    7928:	91 05       	cpc	r25, r1
    792a:	10 f0       	brcs	.+4      	; 0x7930 <twi_start+0x2d6>
    792c:	80 e4       	ldi	r24, 0x40	; 64
    792e:	90 e0       	ldi	r25, 0x00	; 0
    7930:	40 e0       	ldi	r20, 0x00	; 0
    7932:	68 2f       	mov	r22, r24
    7934:	8b e1       	ldi	r24, 0x1B	; 27
    7936:	95 e2       	ldi	r25, 0x25	; 37
    7938:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    793c:	eb e2       	ldi	r30, 0x2B	; 43
    793e:	f0 e2       	ldi	r31, 0x20	; 32
    7940:	84 e4       	ldi	r24, 0x44	; 68
    7942:	80 83       	st	Z, r24
    7944:	84 e2       	ldi	r24, 0x24	; 36
    7946:	81 83       	std	Z+1, r24	; 0x01
    7948:	12 82       	std	Z+2, r1	; 0x02
    794a:	82 e0       	ldi	r24, 0x02	; 2
    794c:	90 e0       	ldi	r25, 0x00	; 0
    794e:	84 83       	std	Z+4, r24	; 0x04
    7950:	95 83       	std	Z+5, r25	; 0x05
    7952:	10 86       	std	Z+8, r1	; 0x08
    7954:	11 86       	std	Z+9, r1	; 0x09
    7956:	40 e0       	ldi	r20, 0x00	; 0
    7958:	bf 01       	movw	r22, r30
    795a:	80 ea       	ldi	r24, 0xA0	; 160
    795c:	94 e0       	ldi	r25, 0x04	; 4
    795e:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    7962:	c8 2f       	mov	r28, r24
    7964:	ed b7       	in	r30, 0x3d	; 61
    7966:	fe b7       	in	r31, 0x3e	; 62
    7968:	38 96       	adiw	r30, 0x08	; 8
    796a:	ed bf       	out	0x3d, r30	; 61
    796c:	fe bf       	out	0x3e, r31	; 62
    796e:	81 11       	cpse	r24, r1
    7970:	2f c0       	rjmp	.+94     	; 0x79d0 <twi_start+0x376>
    7972:	81 e0       	ldi	r24, 0x01	; 1
    7974:	80 93 f3 26 	sts	0x26F3, r24	; 0x8026f3 <g_twi1_hygro_valid>
    7978:	8c ed       	ldi	r24, 0xDC	; 220
    797a:	93 e3       	ldi	r25, 0x33	; 51
    797c:	9f 93       	push	r25
    797e:	8f 93       	push	r24
    7980:	1f 92       	push	r1
    7982:	10 e4       	ldi	r17, 0x40	; 64
    7984:	1f 93       	push	r17
    7986:	cb e1       	ldi	r28, 0x1B	; 27
    7988:	d5 e2       	ldi	r29, 0x25	; 37
    798a:	df 93       	push	r29
    798c:	cf 93       	push	r28
    798e:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7992:	ae 01       	movw	r20, r28
    7994:	6e e1       	ldi	r22, 0x1E	; 30
    7996:	88 e0       	ldi	r24, 0x08	; 8
    7998:	12 db       	rcall	.-2524   	; 0x6fbe <task_twi2_lcd_str>
    799a:	81 e2       	ldi	r24, 0x21	; 33
    799c:	94 e3       	ldi	r25, 0x34	; 52
    799e:	9f 93       	push	r25
    79a0:	8f 93       	push	r24
    79a2:	1f 92       	push	r1
    79a4:	1f 93       	push	r17
    79a6:	df 93       	push	r29
    79a8:	cf 93       	push	r28
    79aa:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    79ae:	81 34       	cpi	r24, 0x41	; 65
    79b0:	91 05       	cpc	r25, r1
    79b2:	10 f0       	brcs	.+4      	; 0x79b8 <twi_start+0x35e>
    79b4:	80 e4       	ldi	r24, 0x40	; 64
    79b6:	90 e0       	ldi	r25, 0x00	; 0
    79b8:	40 e0       	ldi	r20, 0x00	; 0
    79ba:	68 2f       	mov	r22, r24
    79bc:	8b e1       	ldi	r24, 0x1B	; 27
    79be:	95 e2       	ldi	r25, 0x25	; 37
    79c0:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    79c4:	8d b7       	in	r24, 0x3d	; 61
    79c6:	9e b7       	in	r25, 0x3e	; 62
    79c8:	0c 96       	adiw	r24, 0x0c	; 12
    79ca:	8d bf       	out	0x3d, r24	; 61
    79cc:	9e bf       	out	0x3e, r25	; 62
    79ce:	23 c0       	rjmp	.+70     	; 0x7a16 <twi_start+0x3bc>
    79d0:	8c 2f       	mov	r24, r28
    79d2:	0c 2e       	mov	r0, r28
    79d4:	00 0c       	add	r0, r0
    79d6:	99 0b       	sbc	r25, r25
    79d8:	9f 93       	push	r25
    79da:	cf 93       	push	r28
    79dc:	80 ef       	ldi	r24, 0xF0	; 240
    79de:	93 e3       	ldi	r25, 0x33	; 51
    79e0:	9f 93       	push	r25
    79e2:	8f 93       	push	r24
    79e4:	1f 92       	push	r1
    79e6:	80 e4       	ldi	r24, 0x40	; 64
    79e8:	8f 93       	push	r24
    79ea:	8b e1       	ldi	r24, 0x1B	; 27
    79ec:	95 e2       	ldi	r25, 0x25	; 37
    79ee:	9f 93       	push	r25
    79f0:	8f 93       	push	r24
    79f2:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    79f6:	81 34       	cpi	r24, 0x41	; 65
    79f8:	91 05       	cpc	r25, r1
    79fa:	10 f0       	brcs	.+4      	; 0x7a00 <twi_start+0x3a6>
    79fc:	80 e4       	ldi	r24, 0x40	; 64
    79fe:	90 e0       	ldi	r25, 0x00	; 0
    7a00:	40 e0       	ldi	r20, 0x00	; 0
    7a02:	68 2f       	mov	r22, r24
    7a04:	8b e1       	ldi	r24, 0x1B	; 27
    7a06:	95 e2       	ldi	r25, 0x25	; 37
    7a08:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    7a0c:	ed b7       	in	r30, 0x3d	; 61
    7a0e:	fe b7       	in	r31, 0x3e	; 62
    7a10:	38 96       	adiw	r30, 0x08	; 8
    7a12:	ed bf       	out	0x3d, r30	; 61
    7a14:	fe bf       	out	0x3e, r31	; 62
    7a16:	3a db       	rcall	.-2444   	; 0x708c <init_twi1_gyro>
    7a18:	1f 92       	push	r1
    7a1a:	86 e7       	ldi	r24, 0x76	; 118
    7a1c:	8f 93       	push	r24
    7a1e:	8b e8       	ldi	r24, 0x8B	; 139
    7a20:	92 e3       	ldi	r25, 0x32	; 50
    7a22:	9f 93       	push	r25
    7a24:	8f 93       	push	r24
    7a26:	1f 92       	push	r1
    7a28:	80 e4       	ldi	r24, 0x40	; 64
    7a2a:	8f 93       	push	r24
    7a2c:	8b e1       	ldi	r24, 0x1B	; 27
    7a2e:	95 e2       	ldi	r25, 0x25	; 37
    7a30:	9f 93       	push	r25
    7a32:	8f 93       	push	r24
    7a34:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7a38:	81 34       	cpi	r24, 0x41	; 65
    7a3a:	91 05       	cpc	r25, r1
    7a3c:	10 f0       	brcs	.+4      	; 0x7a42 <twi_start+0x3e8>
    7a3e:	80 e4       	ldi	r24, 0x40	; 64
    7a40:	90 e0       	ldi	r25, 0x00	; 0
    7a42:	40 e0       	ldi	r20, 0x00	; 0
    7a44:	68 2f       	mov	r22, r24
    7a46:	8b e1       	ldi	r24, 0x1B	; 27
    7a48:	95 e2       	ldi	r25, 0x25	; 37
    7a4a:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    7a4e:	eb e2       	ldi	r30, 0x2B	; 43
    7a50:	f0 e2       	ldi	r31, 0x20	; 32
    7a52:	86 e7       	ldi	r24, 0x76	; 118
    7a54:	80 83       	st	Z, r24
    7a56:	8e e1       	ldi	r24, 0x1E	; 30
    7a58:	81 83       	std	Z+1, r24	; 0x01
    7a5a:	81 e0       	ldi	r24, 0x01	; 1
    7a5c:	90 e0       	ldi	r25, 0x00	; 0
    7a5e:	84 83       	std	Z+4, r24	; 0x04
    7a60:	95 83       	std	Z+5, r25	; 0x05
    7a62:	10 86       	std	Z+8, r1	; 0x08
    7a64:	11 86       	std	Z+9, r1	; 0x09
    7a66:	40 e0       	ldi	r20, 0x00	; 0
    7a68:	bf 01       	movw	r22, r30
    7a6a:	80 ea       	ldi	r24, 0xA0	; 160
    7a6c:	94 e0       	ldi	r25, 0x04	; 4
    7a6e:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    7a72:	c8 2f       	mov	r28, r24
    7a74:	8d b7       	in	r24, 0x3d	; 61
    7a76:	9e b7       	in	r25, 0x3e	; 62
    7a78:	08 96       	adiw	r24, 0x08	; 8
    7a7a:	8d bf       	out	0x3d, r24	; 61
    7a7c:	9e bf       	out	0x3e, r25	; 62
    7a7e:	c1 11       	cpse	r28, r1
    7a80:	04 c1       	rjmp	.+520    	; 0x7c8a <twi_start+0x630>
    7a82:	68 e9       	ldi	r22, 0x98	; 152
    7a84:	7a e3       	ldi	r23, 0x3A	; 58
    7a86:	80 e0       	ldi	r24, 0x00	; 0
    7a88:	90 e0       	ldi	r25, 0x00	; 0
    7a8a:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    7a8e:	eb e2       	ldi	r30, 0x2B	; 43
    7a90:	f0 e2       	ldi	r31, 0x20	; 32
    7a92:	86 e7       	ldi	r24, 0x76	; 118
    7a94:	80 83       	st	Z, r24
    7a96:	8e ea       	ldi	r24, 0xAE	; 174
    7a98:	81 83       	std	Z+1, r24	; 0x01
    7a9a:	81 e0       	ldi	r24, 0x01	; 1
    7a9c:	90 e0       	ldi	r25, 0x00	; 0
    7a9e:	84 83       	std	Z+4, r24	; 0x04
    7aa0:	95 83       	std	Z+5, r25	; 0x05
    7aa2:	82 e0       	ldi	r24, 0x02	; 2
    7aa4:	90 e0       	ldi	r25, 0x00	; 0
    7aa6:	80 87       	std	Z+8, r24	; 0x08
    7aa8:	91 87       	std	Z+9, r25	; 0x09
    7aaa:	41 e0       	ldi	r20, 0x01	; 1
    7aac:	bf 01       	movw	r22, r30
    7aae:	80 ea       	ldi	r24, 0xA0	; 160
    7ab0:	94 e0       	ldi	r25, 0x04	; 4
    7ab2:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    7ab6:	c8 2f       	mov	r28, r24
    7ab8:	88 23       	and	r24, r24
    7aba:	21 f1       	breq	.+72     	; 0x7b04 <twi_start+0x4aa>
    7abc:	8c 2f       	mov	r24, r28
    7abe:	0c 2e       	mov	r0, r28
    7ac0:	00 0c       	add	r0, r0
    7ac2:	99 0b       	sbc	r25, r25
    7ac4:	9f 93       	push	r25
    7ac6:	cf 93       	push	r28
    7ac8:	86 e5       	ldi	r24, 0x56	; 86
    7aca:	92 e3       	ldi	r25, 0x32	; 50
    7acc:	9f 93       	push	r25
    7ace:	8f 93       	push	r24
    7ad0:	1f 92       	push	r1
    7ad2:	80 e4       	ldi	r24, 0x40	; 64
    7ad4:	8f 93       	push	r24
    7ad6:	8b e1       	ldi	r24, 0x1B	; 27
    7ad8:	95 e2       	ldi	r25, 0x25	; 37
    7ada:	9f 93       	push	r25
    7adc:	8f 93       	push	r24
    7ade:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7ae2:	81 34       	cpi	r24, 0x41	; 65
    7ae4:	91 05       	cpc	r25, r1
    7ae6:	10 f0       	brcs	.+4      	; 0x7aec <twi_start+0x492>
    7ae8:	80 e4       	ldi	r24, 0x40	; 64
    7aea:	90 e0       	ldi	r25, 0x00	; 0
    7aec:	40 e0       	ldi	r20, 0x00	; 0
    7aee:	68 2f       	mov	r22, r24
    7af0:	8b e1       	ldi	r24, 0x1B	; 27
    7af2:	95 e2       	ldi	r25, 0x25	; 37
    7af4:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    7af8:	ed b7       	in	r30, 0x3d	; 61
    7afa:	fe b7       	in	r31, 0x3e	; 62
    7afc:	38 96       	adiw	r30, 0x08	; 8
    7afe:	ed bf       	out	0x3d, r30	; 61
    7b00:	fe bf       	out	0x3e, r31	; 62
    7b02:	c3 c0       	rjmp	.+390    	; 0x7c8a <twi_start+0x630>
    7b04:	e3 e1       	ldi	r30, 0x13	; 19
    7b06:	f5 e2       	ldi	r31, 0x25	; 37
    7b08:	80 81       	ld	r24, Z
    7b0a:	90 e0       	ldi	r25, 0x00	; 0
    7b0c:	98 2f       	mov	r25, r24
    7b0e:	88 27       	eor	r24, r24
    7b10:	21 81       	ldd	r18, Z+1	; 0x01
    7b12:	82 2b       	or	r24, r18
    7b14:	92 95       	swap	r25
    7b16:	82 95       	swap	r24
    7b18:	8f 70       	andi	r24, 0x0F	; 15
    7b1a:	89 27       	eor	r24, r25
    7b1c:	9f 70       	andi	r25, 0x0F	; 15
    7b1e:	89 27       	eor	r24, r25
    7b20:	80 93 14 27 	sts	0x2714, r24	; 0x802714 <g_twi1_baro_version>
    7b24:	90 93 15 27 	sts	0x2715, r25	; 0x802715 <g_twi1_baro_version+0x1>
    7b28:	9f 93       	push	r25
    7b2a:	8f 93       	push	r24
    7b2c:	80 e2       	ldi	r24, 0x20	; 32
    7b2e:	92 e3       	ldi	r25, 0x32	; 50
    7b30:	9f 93       	push	r25
    7b32:	8f 93       	push	r24
    7b34:	1f 92       	push	r1
    7b36:	80 e4       	ldi	r24, 0x40	; 64
    7b38:	8f 93       	push	r24
    7b3a:	8b e1       	ldi	r24, 0x1B	; 27
    7b3c:	95 e2       	ldi	r25, 0x25	; 37
    7b3e:	9f 93       	push	r25
    7b40:	8f 93       	push	r24
    7b42:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7b46:	81 34       	cpi	r24, 0x41	; 65
    7b48:	91 05       	cpc	r25, r1
    7b4a:	10 f0       	brcs	.+4      	; 0x7b50 <twi_start+0x4f6>
    7b4c:	80 e4       	ldi	r24, 0x40	; 64
    7b4e:	90 e0       	ldi	r25, 0x00	; 0
    7b50:	40 e0       	ldi	r20, 0x00	; 0
    7b52:	68 2f       	mov	r22, r24
    7b54:	8b e1       	ldi	r24, 0x1B	; 27
    7b56:	95 e2       	ldi	r25, 0x25	; 37
    7b58:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    7b5c:	0f 2e       	mov	r0, r31
    7b5e:	f6 e0       	ldi	r31, 0x06	; 6
    7b60:	ef 2e       	mov	r14, r31
    7b62:	f7 e2       	ldi	r31, 0x27	; 39
    7b64:	ff 2e       	mov	r15, r31
    7b66:	f0 2d       	mov	r31, r0
    7b68:	8d b7       	in	r24, 0x3d	; 61
    7b6a:	9e b7       	in	r25, 0x3e	; 62
    7b6c:	08 96       	adiw	r24, 0x08	; 8
    7b6e:	8d bf       	out	0x3d, r24	; 61
    7b70:	9e bf       	out	0x3e, r25	; 62
    7b72:	88 24       	eor	r8, r8
    7b74:	83 94       	inc	r8
    7b76:	91 2c       	mov	r9, r1
    7b78:	cb e2       	ldi	r28, 0x2B	; 43
    7b7a:	d0 e2       	ldi	r29, 0x20	; 32
    7b7c:	0f 2e       	mov	r0, r31
    7b7e:	f6 e7       	ldi	r31, 0x76	; 118
    7b80:	7f 2e       	mov	r7, r31
    7b82:	f0 2d       	mov	r31, r0
    7b84:	aa 24       	eor	r10, r10
    7b86:	a3 94       	inc	r10
    7b88:	b1 2c       	mov	r11, r1
    7b8a:	68 94       	set
    7b8c:	cc 24       	eor	r12, r12
    7b8e:	c1 f8       	bld	r12, 1
    7b90:	d1 2c       	mov	r13, r1
    7b92:	03 e1       	ldi	r16, 0x13	; 19
    7b94:	15 e2       	ldi	r17, 0x25	; 37
    7b96:	78 82       	st	Y, r7
    7b98:	c4 01       	movw	r24, r8
    7b9a:	88 0f       	add	r24, r24
    7b9c:	99 1f       	adc	r25, r25
    7b9e:	80 6a       	ori	r24, 0xA0	; 160
    7ba0:	89 83       	std	Y+1, r24	; 0x01
    7ba2:	ac 82       	std	Y+4, r10	; 0x04
    7ba4:	bd 82       	std	Y+5, r11	; 0x05
    7ba6:	c8 86       	std	Y+8, r12	; 0x08
    7ba8:	d9 86       	std	Y+9, r13	; 0x09
    7baa:	41 e0       	ldi	r20, 0x01	; 1
    7bac:	be 01       	movw	r22, r28
    7bae:	80 ea       	ldi	r24, 0xA0	; 160
    7bb0:	94 e0       	ldi	r25, 0x04	; 4
    7bb2:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    7bb6:	88 23       	and	r24, r24
    7bb8:	31 f1       	breq	.+76     	; 0x7c06 <twi_start+0x5ac>
    7bba:	28 2f       	mov	r18, r24
    7bbc:	08 2e       	mov	r0, r24
    7bbe:	00 0c       	add	r0, r0
    7bc0:	33 0b       	sbc	r19, r19
    7bc2:	3f 93       	push	r19
    7bc4:	8f 93       	push	r24
    7bc6:	9f 92       	push	r9
    7bc8:	8f 92       	push	r8
    7bca:	8b ee       	ldi	r24, 0xEB	; 235
    7bcc:	91 e3       	ldi	r25, 0x31	; 49
    7bce:	9f 93       	push	r25
    7bd0:	8f 93       	push	r24
    7bd2:	1f 92       	push	r1
    7bd4:	80 e4       	ldi	r24, 0x40	; 64
    7bd6:	8f 93       	push	r24
    7bd8:	8b e1       	ldi	r24, 0x1B	; 27
    7bda:	95 e2       	ldi	r25, 0x25	; 37
    7bdc:	9f 93       	push	r25
    7bde:	8f 93       	push	r24
    7be0:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7be4:	81 34       	cpi	r24, 0x41	; 65
    7be6:	91 05       	cpc	r25, r1
    7be8:	10 f0       	brcs	.+4      	; 0x7bee <twi_start+0x594>
    7bea:	80 e4       	ldi	r24, 0x40	; 64
    7bec:	90 e0       	ldi	r25, 0x00	; 0
    7bee:	40 e0       	ldi	r20, 0x00	; 0
    7bf0:	68 2f       	mov	r22, r24
    7bf2:	8b e1       	ldi	r24, 0x1B	; 27
    7bf4:	95 e2       	ldi	r25, 0x25	; 37
    7bf6:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    7bfa:	ed b7       	in	r30, 0x3d	; 61
    7bfc:	fe b7       	in	r31, 0x3e	; 62
    7bfe:	3a 96       	adiw	r30, 0x0a	; 10
    7c00:	ed bf       	out	0x3d, r30	; 61
    7c02:	fe bf       	out	0x3e, r31	; 62
    7c04:	13 c0       	rjmp	.+38     	; 0x7c2c <twi_start+0x5d2>
    7c06:	f8 01       	movw	r30, r16
    7c08:	80 81       	ld	r24, Z
    7c0a:	90 e0       	ldi	r25, 0x00	; 0
    7c0c:	98 2f       	mov	r25, r24
    7c0e:	88 27       	eor	r24, r24
    7c10:	21 81       	ldd	r18, Z+1	; 0x01
    7c12:	82 2b       	or	r24, r18
    7c14:	f7 01       	movw	r30, r14
    7c16:	81 93       	st	Z+, r24
    7c18:	91 93       	st	Z+, r25
    7c1a:	7f 01       	movw	r14, r30
    7c1c:	ff ef       	ldi	r31, 0xFF	; 255
    7c1e:	8f 1a       	sub	r8, r31
    7c20:	9f 0a       	sbc	r9, r31
    7c22:	88 e0       	ldi	r24, 0x08	; 8
    7c24:	88 16       	cp	r8, r24
    7c26:	91 04       	cpc	r9, r1
    7c28:	09 f0       	breq	.+2      	; 0x7c2c <twi_start+0x5d2>
    7c2a:	b5 cf       	rjmp	.-150    	; 0x7b96 <twi_start+0x53c>
    7c2c:	81 e0       	ldi	r24, 0x01	; 1
    7c2e:	80 93 16 27 	sts	0x2716, r24	; 0x802716 <g_twi1_baro_valid>
    7c32:	88 e8       	ldi	r24, 0x88	; 136
    7c34:	91 e3       	ldi	r25, 0x31	; 49
    7c36:	9f 93       	push	r25
    7c38:	8f 93       	push	r24
    7c3a:	1f 92       	push	r1
    7c3c:	10 e4       	ldi	r17, 0x40	; 64
    7c3e:	1f 93       	push	r17
    7c40:	cb e1       	ldi	r28, 0x1B	; 27
    7c42:	d5 e2       	ldi	r29, 0x25	; 37
    7c44:	df 93       	push	r29
    7c46:	cf 93       	push	r28
    7c48:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7c4c:	ae 01       	movw	r20, r28
    7c4e:	62 e3       	ldi	r22, 0x32	; 50
    7c50:	88 e0       	ldi	r24, 0x08	; 8
    7c52:	b5 d9       	rcall	.-3222   	; 0x6fbe <task_twi2_lcd_str>
    7c54:	8d ec       	ldi	r24, 0xCD	; 205
    7c56:	91 e3       	ldi	r25, 0x31	; 49
    7c58:	9f 93       	push	r25
    7c5a:	8f 93       	push	r24
    7c5c:	1f 92       	push	r1
    7c5e:	1f 93       	push	r17
    7c60:	df 93       	push	r29
    7c62:	cf 93       	push	r28
    7c64:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7c68:	81 34       	cpi	r24, 0x41	; 65
    7c6a:	91 05       	cpc	r25, r1
    7c6c:	10 f0       	brcs	.+4      	; 0x7c72 <twi_start+0x618>
    7c6e:	80 e4       	ldi	r24, 0x40	; 64
    7c70:	90 e0       	ldi	r25, 0x00	; 0
    7c72:	40 e0       	ldi	r20, 0x00	; 0
    7c74:	68 2f       	mov	r22, r24
    7c76:	8b e1       	ldi	r24, 0x1B	; 27
    7c78:	95 e2       	ldi	r25, 0x25	; 37
    7c7a:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    7c7e:	ed b7       	in	r30, 0x3d	; 61
    7c80:	fe b7       	in	r31, 0x3e	; 62
    7c82:	3c 96       	adiw	r30, 0x0c	; 12
    7c84:	ed bf       	out	0x3d, r30	; 61
    7c86:	fe bf       	out	0x3e, r31	; 62
    7c88:	23 c0       	rjmp	.+70     	; 0x7cd0 <twi_start+0x676>
    7c8a:	8c 2f       	mov	r24, r28
    7c8c:	0c 2e       	mov	r0, r28
    7c8e:	00 0c       	add	r0, r0
    7c90:	99 0b       	sbc	r25, r25
    7c92:	9f 93       	push	r25
    7c94:	cf 93       	push	r28
    7c96:	8c e9       	ldi	r24, 0x9C	; 156
    7c98:	91 e3       	ldi	r25, 0x31	; 49
    7c9a:	9f 93       	push	r25
    7c9c:	8f 93       	push	r24
    7c9e:	1f 92       	push	r1
    7ca0:	80 e4       	ldi	r24, 0x40	; 64
    7ca2:	8f 93       	push	r24
    7ca4:	8b e1       	ldi	r24, 0x1B	; 27
    7ca6:	95 e2       	ldi	r25, 0x25	; 37
    7ca8:	9f 93       	push	r25
    7caa:	8f 93       	push	r24
    7cac:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7cb0:	81 34       	cpi	r24, 0x41	; 65
    7cb2:	91 05       	cpc	r25, r1
    7cb4:	10 f0       	brcs	.+4      	; 0x7cba <twi_start+0x660>
    7cb6:	80 e4       	ldi	r24, 0x40	; 64
    7cb8:	90 e0       	ldi	r25, 0x00	; 0
    7cba:	40 e0       	ldi	r20, 0x00	; 0
    7cbc:	68 2f       	mov	r22, r24
    7cbe:	8b e1       	ldi	r24, 0x1B	; 27
    7cc0:	95 e2       	ldi	r25, 0x25	; 37
    7cc2:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    7cc6:	8d b7       	in	r24, 0x3d	; 61
    7cc8:	9e b7       	in	r25, 0x3e	; 62
    7cca:	08 96       	adiw	r24, 0x08	; 8
    7ccc:	8d bf       	out	0x3d, r24	; 61
    7cce:	9e bf       	out	0x3e, r25	; 62
    7cd0:	88 e7       	ldi	r24, 0x78	; 120
    7cd2:	91 e3       	ldi	r25, 0x31	; 49
    7cd4:	9f 93       	push	r25
    7cd6:	8f 93       	push	r24
    7cd8:	1f 92       	push	r1
    7cda:	80 e4       	ldi	r24, 0x40	; 64
    7cdc:	8f 93       	push	r24
    7cde:	8b e1       	ldi	r24, 0x1B	; 27
    7ce0:	95 e2       	ldi	r25, 0x25	; 37
    7ce2:	9f 93       	push	r25
    7ce4:	8f 93       	push	r24
    7ce6:	0e 94 ad 89 	call	0x1135a	; 0x1135a <snprintf_P>
    7cea:	81 34       	cpi	r24, 0x41	; 65
    7cec:	91 05       	cpc	r25, r1
    7cee:	10 f0       	brcs	.+4      	; 0x7cf4 <twi_start+0x69a>
    7cf0:	80 e4       	ldi	r24, 0x40	; 64
    7cf2:	90 e0       	ldi	r25, 0x00	; 0
    7cf4:	40 e0       	ldi	r20, 0x00	; 0
    7cf6:	68 2f       	mov	r22, r24
    7cf8:	8b e1       	ldi	r24, 0x1B	; 27
    7cfa:	95 e2       	ldi	r25, 0x25	; 37
    7cfc:	0e 94 7e 20 	call	0x40fc	; 0x40fc <udi_write_tx_buf>
    7d00:	0f 90       	pop	r0
    7d02:	0f 90       	pop	r0
    7d04:	0f 90       	pop	r0
    7d06:	0f 90       	pop	r0
    7d08:	0f 90       	pop	r0
    7d0a:	0f 90       	pop	r0
    7d0c:	df 91       	pop	r29
    7d0e:	cf 91       	pop	r28
    7d10:	1f 91       	pop	r17
    7d12:	0f 91       	pop	r16
    7d14:	ff 90       	pop	r15
    7d16:	ef 90       	pop	r14
    7d18:	df 90       	pop	r13
    7d1a:	cf 90       	pop	r12
    7d1c:	bf 90       	pop	r11
    7d1e:	af 90       	pop	r10
    7d20:	9f 90       	pop	r9
    7d22:	8f 90       	pop	r8
    7d24:	7f 90       	pop	r7
    7d26:	08 95       	ret

00007d28 <task_twi2_lcd__cpu1>:
PROGMEM_DECLARE(const char, PM_FORMAT_4F1[]);
PROGMEM_DECLARE(const char, PM_FORMAT_5F3[]);

/* TWI2 - LCD Port */
void task_twi2_lcd__cpu1(uint8_t col_left)
{
    7d28:	df 92       	push	r13
    7d2a:	ef 92       	push	r14
    7d2c:	ff 92       	push	r15
    7d2e:	0f 93       	push	r16
    7d30:	1f 93       	push	r17
    7d32:	cf 93       	push	r28
    7d34:	df 93       	push	r29
    7d36:	1f 92       	push	r1
    7d38:	cd b7       	in	r28, 0x3d	; 61
    7d3a:	de b7       	in	r29, 0x3e	; 62
    7d3c:	d8 2e       	mov	r13, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7d3e:	8f b7       	in	r24, 0x3f	; 63
    7d40:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    7d42:	f8 94       	cli
	return flags;
    7d44:	89 81       	ldd	r24, Y+1	; 0x01
	int16_t l_adc_5v0_volt_1000;

	/* Get up-to-date global data */
	{
		irqflags_t flags			= cpu_irq_save();
		l_adc_temp_deg_100			= g_adc_temp_deg_100;
    7d46:	60 91 6e 26 	lds	r22, 0x266E	; 0x80266e <g_adc_temp_deg_100>
    7d4a:	70 91 6f 26 	lds	r23, 0x266F	; 0x80266f <g_adc_temp_deg_100+0x1>
		l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    7d4e:	e0 90 78 26 	lds	r14, 0x2678	; 0x802678 <g_adc_5v0_volt_1000>
    7d52:	f0 90 79 26 	lds	r15, 0x2679	; 0x802679 <g_adc_5v0_volt_1000+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7d56:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
	}

	if (s_adc_temp_deg_100 != l_adc_temp_deg_100) {
    7d58:	80 91 03 23 	lds	r24, 0x2303	; 0x802303 <s_adc_temp_deg_100.8190>
    7d5c:	90 91 04 23 	lds	r25, 0x2304	; 0x802304 <s_adc_temp_deg_100.8190+0x1>
    7d60:	68 17       	cp	r22, r24
    7d62:	79 07       	cpc	r23, r25
    7d64:	b9 f0       	breq	.+46     	; 0x7d94 <task_twi2_lcd__cpu1+0x6c>
		s_adc_temp_deg_100 = l_adc_temp_deg_100;
    7d66:	60 93 03 23 	sts	0x2303, r22	; 0x802303 <s_adc_temp_deg_100.8190>
    7d6a:	70 93 04 23 	sts	0x2304, r23	; 0x802304 <s_adc_temp_deg_100.8190+0x1>

		/* ADC_TEMP */
		task_twi2_lcd_print_format_float_P(col_left,  2 * 10, l_adc_temp_deg_100 / 100.f, PM_FORMAT_4F1);
    7d6e:	07 2e       	mov	r0, r23
    7d70:	00 0c       	add	r0, r0
    7d72:	88 0b       	sbc	r24, r24
    7d74:	99 0b       	sbc	r25, r25
    7d76:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    7d7a:	20 e0       	ldi	r18, 0x00	; 0
    7d7c:	30 e0       	ldi	r19, 0x00	; 0
    7d7e:	48 ec       	ldi	r20, 0xC8	; 200
    7d80:	52 e4       	ldi	r21, 0x42	; 66
    7d82:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    7d86:	9b 01       	movw	r18, r22
    7d88:	ac 01       	movw	r20, r24
    7d8a:	04 e6       	ldi	r16, 0x64	; 100
    7d8c:	11 e3       	ldi	r17, 0x31	; 49
    7d8e:	64 e1       	ldi	r22, 0x14	; 20
    7d90:	8d 2d       	mov	r24, r13
    7d92:	d7 d8       	rcall	.-3666   	; 0x6f42 <task_twi2_lcd_print_format_float_P>
	}

	if (s_adc_5v0_volt_1000 != l_adc_5v0_volt_1000) {
    7d94:	80 91 01 23 	lds	r24, 0x2301	; 0x802301 <s_adc_5v0_volt_1000.8191>
    7d98:	90 91 02 23 	lds	r25, 0x2302	; 0x802302 <s_adc_5v0_volt_1000.8191+0x1>
    7d9c:	e8 16       	cp	r14, r24
    7d9e:	f9 06       	cpc	r15, r25
    7da0:	b9 f0       	breq	.+46     	; 0x7dd0 <task_twi2_lcd__cpu1+0xa8>
		s_adc_5v0_volt_1000 = l_adc_5v0_volt_1000;
    7da2:	e0 92 01 23 	sts	0x2301, r14	; 0x802301 <s_adc_5v0_volt_1000.8191>
    7da6:	f0 92 02 23 	sts	0x2302, r15	; 0x802302 <s_adc_5v0_volt_1000.8191+0x1>

		/* ADC_5V0 */
		task_twi2_lcd_print_format_float_P(col_left,  3 * 10, l_adc_5v0_volt_1000 / 1000.f, PM_FORMAT_5F3);
    7daa:	b7 01       	movw	r22, r14
    7dac:	ff 0c       	add	r15, r15
    7dae:	88 0b       	sbc	r24, r24
    7db0:	99 0b       	sbc	r25, r25
    7db2:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    7db6:	20 e0       	ldi	r18, 0x00	; 0
    7db8:	30 e0       	ldi	r19, 0x00	; 0
    7dba:	4a e7       	ldi	r20, 0x7A	; 122
    7dbc:	54 e4       	ldi	r21, 0x44	; 68
    7dbe:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    7dc2:	9b 01       	movw	r18, r22
    7dc4:	ac 01       	movw	r20, r24
    7dc6:	0e e5       	ldi	r16, 0x5E	; 94
    7dc8:	11 e3       	ldi	r17, 0x31	; 49
    7dca:	6e e1       	ldi	r22, 0x1E	; 30
    7dcc:	8d 2d       	mov	r24, r13
    7dce:	b9 d8       	rcall	.-3726   	; 0x6f42 <task_twi2_lcd_print_format_float_P>
	}
}
    7dd0:	0f 90       	pop	r0
    7dd2:	df 91       	pop	r29
    7dd4:	cf 91       	pop	r28
    7dd6:	1f 91       	pop	r17
    7dd8:	0f 91       	pop	r16
    7dda:	ff 90       	pop	r15
    7ddc:	ef 90       	pop	r14
    7dde:	df 90       	pop	r13
    7de0:	08 95       	ret

00007de2 <task_twi2_lcd__cpu2>:
	delay_ms(50);
}
#endif

void task_twi2_lcd_cls(void)
{
    7de2:	df 92       	push	r13
    7de4:	ef 92       	push	r14
    7de6:	ff 92       	push	r15
    7de8:	0f 93       	push	r16
    7dea:	1f 93       	push	r17
    7dec:	cf 93       	push	r28
    7dee:	df 93       	push	r29
    7df0:	1f 92       	push	r1
    7df2:	cd b7       	in	r28, 0x3d	; 61
    7df4:	de b7       	in	r29, 0x3e	; 62
    7df6:	d8 2e       	mov	r13, r24
    7df8:	8f b7       	in	r24, 0x3f	; 63
    7dfa:	89 83       	std	Y+1, r24	; 0x01
    7dfc:	f8 94       	cli
    7dfe:	89 81       	ldd	r24, Y+1	; 0x01
    7e00:	60 91 76 26 	lds	r22, 0x2676	; 0x802676 <g_adc_vbat_volt_1000>
    7e04:	70 91 77 26 	lds	r23, 0x2677	; 0x802677 <g_adc_vbat_volt_1000+0x1>
    7e08:	e0 90 7a 26 	lds	r14, 0x267A	; 0x80267a <g_adc_vctcxo_volt_1000>
    7e0c:	f0 90 7b 26 	lds	r15, 0x267B	; 0x80267b <g_adc_vctcxo_volt_1000+0x1>
    7e10:	8f bf       	out	0x3f, r24	; 63
    7e12:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <s_adc_vbat_volt_1000.8198>
    7e16:	90 91 00 23 	lds	r25, 0x2300	; 0x802300 <s_adc_vbat_volt_1000.8198+0x1>
    7e1a:	68 17       	cp	r22, r24
    7e1c:	79 07       	cpc	r23, r25
    7e1e:	b9 f0       	breq	.+46     	; 0x7e4e <task_twi2_lcd__cpu2+0x6c>
    7e20:	60 93 ff 22 	sts	0x22FF, r22	; 0x8022ff <s_adc_vbat_volt_1000.8198>
    7e24:	70 93 00 23 	sts	0x2300, r23	; 0x802300 <s_adc_vbat_volt_1000.8198+0x1>
    7e28:	07 2e       	mov	r0, r23
    7e2a:	00 0c       	add	r0, r0
    7e2c:	88 0b       	sbc	r24, r24
    7e2e:	99 0b       	sbc	r25, r25
    7e30:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    7e34:	20 e0       	ldi	r18, 0x00	; 0
    7e36:	30 e0       	ldi	r19, 0x00	; 0
    7e38:	4a e7       	ldi	r20, 0x7A	; 122
    7e3a:	54 e4       	ldi	r21, 0x44	; 68
    7e3c:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    7e40:	9b 01       	movw	r18, r22
    7e42:	ac 01       	movw	r20, r24
    7e44:	0e e5       	ldi	r16, 0x5E	; 94
    7e46:	11 e3       	ldi	r17, 0x31	; 49
    7e48:	68 e2       	ldi	r22, 0x28	; 40
    7e4a:	8d 2d       	mov	r24, r13
    7e4c:	7a d8       	rcall	.-3852   	; 0x6f42 <task_twi2_lcd_print_format_float_P>
    7e4e:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <s_adc_vctcxo_volt_1000.8199>
    7e52:	90 91 fe 22 	lds	r25, 0x22FE	; 0x8022fe <s_adc_vctcxo_volt_1000.8199+0x1>
    7e56:	e8 16       	cp	r14, r24
    7e58:	f9 06       	cpc	r15, r25
    7e5a:	b9 f0       	breq	.+46     	; 0x7e8a <task_twi2_lcd__cpu2+0xa8>
    7e5c:	e0 92 fd 22 	sts	0x22FD, r14	; 0x8022fd <s_adc_vctcxo_volt_1000.8199>
    7e60:	f0 92 fe 22 	sts	0x22FE, r15	; 0x8022fe <s_adc_vctcxo_volt_1000.8199+0x1>
    7e64:	b7 01       	movw	r22, r14
    7e66:	ff 0c       	add	r15, r15
    7e68:	88 0b       	sbc	r24, r24
    7e6a:	99 0b       	sbc	r25, r25
    7e6c:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    7e70:	20 e0       	ldi	r18, 0x00	; 0
    7e72:	30 e0       	ldi	r19, 0x00	; 0
    7e74:	4a e7       	ldi	r20, 0x7A	; 122
    7e76:	54 e4       	ldi	r21, 0x44	; 68
    7e78:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    7e7c:	9b 01       	movw	r18, r22
    7e7e:	ac 01       	movw	r20, r24
    7e80:	0e e5       	ldi	r16, 0x5E	; 94
    7e82:	11 e3       	ldi	r17, 0x31	; 49
    7e84:	62 e3       	ldi	r22, 0x32	; 50
    7e86:	8d 2d       	mov	r24, r13
    7e88:	5c d8       	rcall	.-3912   	; 0x6f42 <task_twi2_lcd_print_format_float_P>
    7e8a:	0f 90       	pop	r0
    7e8c:	df 91       	pop	r29
    7e8e:	cf 91       	pop	r28
    7e90:	1f 91       	pop	r17
    7e92:	0f 91       	pop	r16
    7e94:	ff 90       	pop	r15
    7e96:	ef 90       	pop	r14
    7e98:	df 90       	pop	r13
    7e9a:	08 95       	ret

00007e9c <task_twi2_lcd__cpu3>:
    7e9c:	df 92       	push	r13
    7e9e:	ef 92       	push	r14
    7ea0:	ff 92       	push	r15
    7ea2:	0f 93       	push	r16
    7ea4:	1f 93       	push	r17
    7ea6:	cf 93       	push	r28
    7ea8:	df 93       	push	r29
    7eaa:	1f 92       	push	r1
    7eac:	cd b7       	in	r28, 0x3d	; 61
    7eae:	de b7       	in	r29, 0x3e	; 62
    7eb0:	d8 2e       	mov	r13, r24
    7eb2:	8f b7       	in	r24, 0x3f	; 63
    7eb4:	89 83       	std	Y+1, r24	; 0x01
    7eb6:	f8 94       	cli
    7eb8:	89 81       	ldd	r24, Y+1	; 0x01
    7eba:	60 91 74 26 	lds	r22, 0x2674	; 0x802674 <g_adc_io_adc4_volt_1000>
    7ebe:	70 91 75 26 	lds	r23, 0x2675	; 0x802675 <g_adc_io_adc4_volt_1000+0x1>
    7ec2:	e0 90 72 26 	lds	r14, 0x2672	; 0x802672 <g_adc_io_adc5_volt_1000>
    7ec6:	f0 90 73 26 	lds	r15, 0x2673	; 0x802673 <g_adc_io_adc5_volt_1000+0x1>
    7eca:	8f bf       	out	0x3f, r24	; 63
    7ecc:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <s_adc_io_adc4_volt_1000.8206>
    7ed0:	90 91 fc 22 	lds	r25, 0x22FC	; 0x8022fc <s_adc_io_adc4_volt_1000.8206+0x1>
    7ed4:	68 17       	cp	r22, r24
    7ed6:	79 07       	cpc	r23, r25
    7ed8:	b9 f0       	breq	.+46     	; 0x7f08 <task_twi2_lcd__cpu3+0x6c>
    7eda:	60 93 fb 22 	sts	0x22FB, r22	; 0x8022fb <s_adc_io_adc4_volt_1000.8206>
    7ede:	70 93 fc 22 	sts	0x22FC, r23	; 0x8022fc <s_adc_io_adc4_volt_1000.8206+0x1>
    7ee2:	07 2e       	mov	r0, r23
    7ee4:	00 0c       	add	r0, r0
    7ee6:	88 0b       	sbc	r24, r24
    7ee8:	99 0b       	sbc	r25, r25
    7eea:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    7eee:	20 e0       	ldi	r18, 0x00	; 0
    7ef0:	30 e0       	ldi	r19, 0x00	; 0
    7ef2:	4a e7       	ldi	r20, 0x7A	; 122
    7ef4:	54 e4       	ldi	r21, 0x44	; 68
    7ef6:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    7efa:	9b 01       	movw	r18, r22
    7efc:	ac 01       	movw	r20, r24
    7efe:	0e e5       	ldi	r16, 0x5E	; 94
    7f00:	11 e3       	ldi	r17, 0x31	; 49
    7f02:	6c e3       	ldi	r22, 0x3C	; 60
    7f04:	8d 2d       	mov	r24, r13
    7f06:	1d d8       	rcall	.-4038   	; 0x6f42 <task_twi2_lcd_print_format_float_P>
    7f08:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <s_adc_io_adc5_volt_1000.8207>
    7f0c:	90 91 fa 22 	lds	r25, 0x22FA	; 0x8022fa <s_adc_io_adc5_volt_1000.8207+0x1>
    7f10:	e8 16       	cp	r14, r24
    7f12:	f9 06       	cpc	r15, r25
    7f14:	c1 f0       	breq	.+48     	; 0x7f46 <task_twi2_lcd__cpu3+0xaa>
    7f16:	e0 92 f9 22 	sts	0x22F9, r14	; 0x8022f9 <s_adc_io_adc5_volt_1000.8207>
    7f1a:	f0 92 fa 22 	sts	0x22FA, r15	; 0x8022fa <s_adc_io_adc5_volt_1000.8207+0x1>
    7f1e:	b7 01       	movw	r22, r14
    7f20:	ff 0c       	add	r15, r15
    7f22:	88 0b       	sbc	r24, r24
    7f24:	99 0b       	sbc	r25, r25
    7f26:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    7f2a:	20 e0       	ldi	r18, 0x00	; 0
    7f2c:	30 e0       	ldi	r19, 0x00	; 0
    7f2e:	4a e7       	ldi	r20, 0x7A	; 122
    7f30:	54 e4       	ldi	r21, 0x44	; 68
    7f32:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    7f36:	9b 01       	movw	r18, r22
    7f38:	ac 01       	movw	r20, r24
    7f3a:	0e e5       	ldi	r16, 0x5E	; 94
    7f3c:	11 e3       	ldi	r17, 0x31	; 49
    7f3e:	66 e4       	ldi	r22, 0x46	; 70
    7f40:	8d 2d       	mov	r24, r13
    7f42:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <task_twi2_lcd_print_format_float_P>
    7f46:	0f 90       	pop	r0
    7f48:	df 91       	pop	r29
    7f4a:	cf 91       	pop	r28
    7f4c:	1f 91       	pop	r17
    7f4e:	0f 91       	pop	r16
    7f50:	ff 90       	pop	r15
    7f52:	ef 90       	pop	r14
    7f54:	df 90       	pop	r13
    7f56:	08 95       	ret

00007f58 <task_twi2_lcd__hygro>:
    7f58:	df 92       	push	r13
    7f5a:	ef 92       	push	r14
    7f5c:	ff 92       	push	r15
    7f5e:	0f 93       	push	r16
    7f60:	1f 93       	push	r17
    7f62:	cf 93       	push	r28
    7f64:	df 93       	push	r29
    7f66:	1f 92       	push	r1
    7f68:	cd b7       	in	r28, 0x3d	; 61
    7f6a:	de b7       	in	r29, 0x3e	; 62
    7f6c:	d8 2e       	mov	r13, r24
    7f6e:	8f b7       	in	r24, 0x3f	; 63
    7f70:	89 83       	std	Y+1, r24	; 0x01
    7f72:	f8 94       	cli
    7f74:	89 81       	ldd	r24, Y+1	; 0x01
    7f76:	60 91 ec 26 	lds	r22, 0x26EC	; 0x8026ec <g_twi1_hygro_T_100>
    7f7a:	70 91 ed 26 	lds	r23, 0x26ED	; 0x8026ed <g_twi1_hygro_T_100+0x1>
    7f7e:	e0 90 ea 26 	lds	r14, 0x26EA	; 0x8026ea <g_twi1_hygro_RH_100>
    7f82:	f0 90 eb 26 	lds	r15, 0x26EB	; 0x8026eb <g_twi1_hygro_RH_100+0x1>
    7f86:	8f bf       	out	0x3f, r24	; 63
    7f88:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <s_twi1_hygro_T_100.8214>
    7f8c:	90 91 f8 22 	lds	r25, 0x22F8	; 0x8022f8 <s_twi1_hygro_T_100.8214+0x1>
    7f90:	68 17       	cp	r22, r24
    7f92:	79 07       	cpc	r23, r25
    7f94:	c1 f0       	breq	.+48     	; 0x7fc6 <task_twi2_lcd__hygro+0x6e>
    7f96:	60 93 f7 22 	sts	0x22F7, r22	; 0x8022f7 <s_twi1_hygro_T_100.8214>
    7f9a:	70 93 f8 22 	sts	0x22F8, r23	; 0x8022f8 <s_twi1_hygro_T_100.8214+0x1>
    7f9e:	07 2e       	mov	r0, r23
    7fa0:	00 0c       	add	r0, r0
    7fa2:	88 0b       	sbc	r24, r24
    7fa4:	99 0b       	sbc	r25, r25
    7fa6:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    7faa:	20 e0       	ldi	r18, 0x00	; 0
    7fac:	30 e0       	ldi	r19, 0x00	; 0
    7fae:	48 ec       	ldi	r20, 0xC8	; 200
    7fb0:	52 e4       	ldi	r21, 0x42	; 66
    7fb2:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    7fb6:	9b 01       	movw	r18, r22
    7fb8:	ac 01       	movw	r20, r24
    7fba:	01 e7       	ldi	r16, 0x71	; 113
    7fbc:	11 e3       	ldi	r17, 0x31	; 49
    7fbe:	6e e6       	ldi	r22, 0x6E	; 110
    7fc0:	8d 2d       	mov	r24, r13
    7fc2:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <task_twi2_lcd_print_format_float_P>
    7fc6:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <s_twi1_hygro_RH_100.8215>
    7fca:	90 91 f6 22 	lds	r25, 0x22F6	; 0x8022f6 <s_twi1_hygro_RH_100.8215+0x1>
    7fce:	e8 16       	cp	r14, r24
    7fd0:	f9 06       	cpc	r15, r25
    7fd2:	c1 f0       	breq	.+48     	; 0x8004 <task_twi2_lcd__hygro+0xac>
    7fd4:	e0 92 f5 22 	sts	0x22F5, r14	; 0x8022f5 <s_twi1_hygro_RH_100.8215>
    7fd8:	f0 92 f6 22 	sts	0x22F6, r15	; 0x8022f6 <s_twi1_hygro_RH_100.8215+0x1>
    7fdc:	b7 01       	movw	r22, r14
    7fde:	ff 0c       	add	r15, r15
    7fe0:	88 0b       	sbc	r24, r24
    7fe2:	99 0b       	sbc	r25, r25
    7fe4:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    7fe8:	20 e0       	ldi	r18, 0x00	; 0
    7fea:	30 e0       	ldi	r19, 0x00	; 0
    7fec:	48 ec       	ldi	r20, 0xC8	; 200
    7fee:	52 e4       	ldi	r21, 0x42	; 66
    7ff0:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    7ff4:	9b 01       	movw	r18, r22
    7ff6:	ac 01       	movw	r20, r24
    7ff8:	01 e7       	ldi	r16, 0x71	; 113
    7ffa:	11 e3       	ldi	r17, 0x31	; 49
    7ffc:	68 e7       	ldi	r22, 0x78	; 120
    7ffe:	8d 2d       	mov	r24, r13
    8000:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <task_twi2_lcd_print_format_float_P>
    8004:	0f 90       	pop	r0
    8006:	df 91       	pop	r29
    8008:	cf 91       	pop	r28
    800a:	1f 91       	pop	r17
    800c:	0f 91       	pop	r16
    800e:	ff 90       	pop	r15
    8010:	ef 90       	pop	r14
    8012:	df 90       	pop	r13
    8014:	08 95       	ret

00008016 <task_twi2_lcd__gyro_gfxmag>:
    8016:	2f 92       	push	r2
    8018:	3f 92       	push	r3
    801a:	4f 92       	push	r4
    801c:	5f 92       	push	r5
    801e:	6f 92       	push	r6
    8020:	7f 92       	push	r7
    8022:	8f 92       	push	r8
    8024:	9f 92       	push	r9
    8026:	af 92       	push	r10
    8028:	bf 92       	push	r11
    802a:	cf 92       	push	r12
    802c:	df 92       	push	r13
    802e:	ef 92       	push	r14
    8030:	ff 92       	push	r15
    8032:	0f 93       	push	r16
    8034:	1f 93       	push	r17
    8036:	cf 93       	push	r28
    8038:	df 93       	push	r29
    803a:	cd b7       	in	r28, 0x3d	; 61
    803c:	de b7       	in	r29, 0x3e	; 62
    803e:	2d 97       	sbiw	r28, 0x0d	; 13
    8040:	cd bf       	out	0x3d, r28	; 61
    8042:	de bf       	out	0x3e, r29	; 62
    8044:	8f b7       	in	r24, 0x3f	; 63
    8046:	89 83       	std	Y+1, r24	; 0x01
    8048:	f8 94       	cli
    804a:	89 81       	ldd	r24, Y+1	; 0x01
    804c:	80 90 1f 27 	lds	r8, 0x271F	; 0x80271f <g_twi1_gyro_2_mag_x_nT>
    8050:	90 90 20 27 	lds	r9, 0x2720	; 0x802720 <g_twi1_gyro_2_mag_x_nT+0x1>
    8054:	a0 90 21 27 	lds	r10, 0x2721	; 0x802721 <g_twi1_gyro_2_mag_x_nT+0x2>
    8058:	b0 90 22 27 	lds	r11, 0x2722	; 0x802722 <g_twi1_gyro_2_mag_x_nT+0x3>
    805c:	40 90 1b 27 	lds	r4, 0x271B	; 0x80271b <g_twi1_gyro_2_mag_y_nT>
    8060:	50 90 1c 27 	lds	r5, 0x271C	; 0x80271c <g_twi1_gyro_2_mag_y_nT+0x1>
    8064:	60 90 1d 27 	lds	r6, 0x271D	; 0x80271d <g_twi1_gyro_2_mag_y_nT+0x2>
    8068:	70 90 1e 27 	lds	r7, 0x271E	; 0x80271e <g_twi1_gyro_2_mag_y_nT+0x3>
    806c:	20 91 17 27 	lds	r18, 0x2717	; 0x802717 <g_twi1_gyro_2_mag_z_nT>
    8070:	30 91 18 27 	lds	r19, 0x2718	; 0x802718 <g_twi1_gyro_2_mag_z_nT+0x1>
    8074:	40 91 19 27 	lds	r20, 0x2719	; 0x802719 <g_twi1_gyro_2_mag_z_nT+0x2>
    8078:	50 91 1a 27 	lds	r21, 0x271A	; 0x80271a <g_twi1_gyro_2_mag_z_nT+0x3>
    807c:	2a 87       	std	Y+10, r18	; 0x0a
    807e:	3b 87       	std	Y+11, r19	; 0x0b
    8080:	4c 87       	std	Y+12, r20	; 0x0c
    8082:	5d 87       	std	Y+13, r21	; 0x0d
    8084:	8f bf       	out	0x3f, r24	; 63
    8086:	80 91 f1 22 	lds	r24, 0x22F1	; 0x8022f1 <s_twi1_gyro_2_mag_x_nT.8226>
    808a:	90 91 f2 22 	lds	r25, 0x22F2	; 0x8022f2 <s_twi1_gyro_2_mag_x_nT.8226+0x1>
    808e:	a0 91 f3 22 	lds	r26, 0x22F3	; 0x8022f3 <s_twi1_gyro_2_mag_x_nT.8226+0x2>
    8092:	b0 91 f4 22 	lds	r27, 0x22F4	; 0x8022f4 <s_twi1_gyro_2_mag_x_nT.8226+0x3>
    8096:	88 16       	cp	r8, r24
    8098:	99 06       	cpc	r9, r25
    809a:	aa 06       	cpc	r10, r26
    809c:	bb 06       	cpc	r11, r27
    809e:	d9 f4       	brne	.+54     	; 0x80d6 <task_twi2_lcd__gyro_gfxmag+0xc0>
    80a0:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <s_twi1_gyro_2_mag_y_nT.8227>
    80a4:	90 91 ee 22 	lds	r25, 0x22EE	; 0x8022ee <s_twi1_gyro_2_mag_y_nT.8227+0x1>
    80a8:	a0 91 ef 22 	lds	r26, 0x22EF	; 0x8022ef <s_twi1_gyro_2_mag_y_nT.8227+0x2>
    80ac:	b0 91 f0 22 	lds	r27, 0x22F0	; 0x8022f0 <s_twi1_gyro_2_mag_y_nT.8227+0x3>
    80b0:	48 16       	cp	r4, r24
    80b2:	59 06       	cpc	r5, r25
    80b4:	6a 06       	cpc	r6, r26
    80b6:	7b 06       	cpc	r7, r27
    80b8:	71 f4       	brne	.+28     	; 0x80d6 <task_twi2_lcd__gyro_gfxmag+0xc0>
    80ba:	80 91 e9 22 	lds	r24, 0x22E9	; 0x8022e9 <s_twi1_gyro_2_mag_z_nT.8228>
    80be:	90 91 ea 22 	lds	r25, 0x22EA	; 0x8022ea <s_twi1_gyro_2_mag_z_nT.8228+0x1>
    80c2:	a0 91 eb 22 	lds	r26, 0x22EB	; 0x8022eb <s_twi1_gyro_2_mag_z_nT.8228+0x2>
    80c6:	b0 91 ec 22 	lds	r27, 0x22EC	; 0x8022ec <s_twi1_gyro_2_mag_z_nT.8228+0x3>
    80ca:	28 17       	cp	r18, r24
    80cc:	39 07       	cpc	r19, r25
    80ce:	4a 07       	cpc	r20, r26
    80d0:	5b 07       	cpc	r21, r27
    80d2:	09 f4       	brne	.+2      	; 0x80d6 <task_twi2_lcd__gyro_gfxmag+0xc0>
    80d4:	91 c1       	rjmp	.+802    	; 0x83f8 <task_twi2_lcd__gyro_gfxmag+0x3e2>
    80d6:	80 92 f1 22 	sts	0x22F1, r8	; 0x8022f1 <s_twi1_gyro_2_mag_x_nT.8226>
    80da:	90 92 f2 22 	sts	0x22F2, r9	; 0x8022f2 <s_twi1_gyro_2_mag_x_nT.8226+0x1>
    80de:	a0 92 f3 22 	sts	0x22F3, r10	; 0x8022f3 <s_twi1_gyro_2_mag_x_nT.8226+0x2>
    80e2:	b0 92 f4 22 	sts	0x22F4, r11	; 0x8022f4 <s_twi1_gyro_2_mag_x_nT.8226+0x3>
    80e6:	40 92 ed 22 	sts	0x22ED, r4	; 0x8022ed <s_twi1_gyro_2_mag_y_nT.8227>
    80ea:	50 92 ee 22 	sts	0x22EE, r5	; 0x8022ee <s_twi1_gyro_2_mag_y_nT.8227+0x1>
    80ee:	60 92 ef 22 	sts	0x22EF, r6	; 0x8022ef <s_twi1_gyro_2_mag_y_nT.8227+0x2>
    80f2:	70 92 f0 22 	sts	0x22F0, r7	; 0x8022f0 <s_twi1_gyro_2_mag_y_nT.8227+0x3>
    80f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    80f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    80fa:	ac 85       	ldd	r26, Y+12	; 0x0c
    80fc:	bd 85       	ldd	r27, Y+13	; 0x0d
    80fe:	80 93 e9 22 	sts	0x22E9, r24	; 0x8022e9 <s_twi1_gyro_2_mag_z_nT.8228>
    8102:	90 93 ea 22 	sts	0x22EA, r25	; 0x8022ea <s_twi1_gyro_2_mag_z_nT.8228+0x1>
    8106:	a0 93 eb 22 	sts	0x22EB, r26	; 0x8022eb <s_twi1_gyro_2_mag_z_nT.8228+0x2>
    810a:	b0 93 ec 22 	sts	0x22EC, r27	; 0x8022ec <s_twi1_gyro_2_mag_z_nT.8228+0x3>
    810e:	20 e0       	ldi	r18, 0x00	; 0
    8110:	30 e8       	ldi	r19, 0x80	; 128
    8112:	4b e3       	ldi	r20, 0x3B	; 59
    8114:	55 e4       	ldi	r21, 0x45	; 69
    8116:	60 91 e5 22 	lds	r22, 0x22E5	; 0x8022e5 <s_length.8229>
    811a:	70 91 e6 22 	lds	r23, 0x22E6	; 0x8022e6 <s_length.8229+0x1>
    811e:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <s_length.8229+0x2>
    8122:	90 91 e8 22 	lds	r25, 0x22E8	; 0x8022e8 <s_length.8229+0x3>
    8126:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    812a:	6b 01       	movw	r12, r22
    812c:	7c 01       	movw	r14, r24
    812e:	0e 94 6a 82 	call	0x104d4	; 0x104d4 <__fixunssfsi>
    8132:	16 2f       	mov	r17, r22
    8134:	a7 01       	movw	r20, r14
    8136:	96 01       	movw	r18, r12
    8138:	60 e0       	ldi	r22, 0x00	; 0
    813a:	70 e0       	ldi	r23, 0x00	; 0
    813c:	80 e8       	ldi	r24, 0x80	; 128
    813e:	92 e4       	ldi	r25, 0x42	; 66
    8140:	0e 94 91 81 	call	0x10322	; 0x10322 <__subsf3>
    8144:	0e 94 6a 82 	call	0x104d4	; 0x104d4 <__fixunssfsi>
    8148:	e1 2c       	mov	r14, r1
    814a:	01 e0       	ldi	r16, 0x01	; 1
    814c:	21 2f       	mov	r18, r17
    814e:	43 e0       	ldi	r20, 0x03	; 3
    8150:	82 e7       	ldi	r24, 0x72	; 114
    8152:	04 da       	rcall	.-3064   	; 0x755c <task_twi2_lcd_rect>
    8154:	20 91 e4 22 	lds	r18, 0x22E4	; 0x8022e4 <s_p1y.8231>
    8158:	28 5d       	subi	r18, 0xD8	; 216
    815a:	40 91 e3 22 	lds	r20, 0x22E3	; 0x8022e3 <s_p1x.8230>
    815e:	4a 56       	subi	r20, 0x6A	; 106
    8160:	00 e0       	ldi	r16, 0x00	; 0
    8162:	68 e2       	ldi	r22, 0x28	; 40
    8164:	86 e9       	ldi	r24, 0x96	; 150
    8166:	d2 d9       	rcall	.-3164   	; 0x750c <task_twi2_lcd_line>
    8168:	20 91 e2 22 	lds	r18, 0x22E2	; 0x8022e2 <s_p2y.8233>
    816c:	28 5d       	subi	r18, 0xD8	; 216
    816e:	40 91 e1 22 	lds	r20, 0x22E1	; 0x8022e1 <s_p2x.8232>
    8172:	4a 56       	subi	r20, 0x6A	; 106
    8174:	60 91 e4 22 	lds	r22, 0x22E4	; 0x8022e4 <s_p1y.8231>
    8178:	68 5d       	subi	r22, 0xD8	; 216
    817a:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <s_p1x.8230>
    817e:	8a 56       	subi	r24, 0x6A	; 106
    8180:	c5 d9       	rcall	.-3190   	; 0x750c <task_twi2_lcd_line>
    8182:	20 91 e0 22 	lds	r18, 0x22E0	; 0x8022e0 <s_p3y.8235>
    8186:	28 5d       	subi	r18, 0xD8	; 216
    8188:	40 91 df 22 	lds	r20, 0x22DF	; 0x8022df <s_p3x.8234>
    818c:	4a 56       	subi	r20, 0x6A	; 106
    818e:	60 91 e2 22 	lds	r22, 0x22E2	; 0x8022e2 <s_p2y.8233>
    8192:	68 5d       	subi	r22, 0xD8	; 216
    8194:	80 91 e1 22 	lds	r24, 0x22E1	; 0x8022e1 <s_p2x.8232>
    8198:	8a 56       	subi	r24, 0x6A	; 106
    819a:	b8 d9       	rcall	.-3216   	; 0x750c <task_twi2_lcd_line>
    819c:	01 e0       	ldi	r16, 0x01	; 1
    819e:	21 e0       	ldi	r18, 0x01	; 1
    81a0:	41 e0       	ldi	r20, 0x01	; 1
    81a2:	68 e2       	ldi	r22, 0x28	; 40
    81a4:	86 e9       	ldi	r24, 0x96	; 150
    81a6:	08 da       	rcall	.-3056   	; 0x75b8 <task_twi2_lcd_circ>
    81a8:	c5 01       	movw	r24, r10
    81aa:	b4 01       	movw	r22, r8
    81ac:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    81b0:	6a 83       	std	Y+2, r22	; 0x02
    81b2:	7b 83       	std	Y+3, r23	; 0x03
    81b4:	8c 83       	std	Y+4, r24	; 0x04
    81b6:	9d 83       	std	Y+5, r25	; 0x05
    81b8:	c3 01       	movw	r24, r6
    81ba:	b2 01       	movw	r22, r4
    81bc:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    81c0:	6e 83       	std	Y+6, r22	; 0x06
    81c2:	7f 83       	std	Y+7, r23	; 0x07
    81c4:	88 87       	std	Y+8, r24	; 0x08
    81c6:	99 87       	std	Y+9, r25	; 0x09
    81c8:	6a 85       	ldd	r22, Y+10	; 0x0a
    81ca:	7b 85       	ldd	r23, Y+11	; 0x0b
    81cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    81ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    81d0:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    81d4:	6b 01       	movw	r12, r22
    81d6:	7c 01       	movw	r14, r24
    81d8:	2a 81       	ldd	r18, Y+2	; 0x02
    81da:	3b 81       	ldd	r19, Y+3	; 0x03
    81dc:	4c 81       	ldd	r20, Y+4	; 0x04
    81de:	5d 81       	ldd	r21, Y+5	; 0x05
    81e0:	ca 01       	movw	r24, r20
    81e2:	b9 01       	movw	r22, r18
    81e4:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    81e8:	4b 01       	movw	r8, r22
    81ea:	5c 01       	movw	r10, r24
    81ec:	2e 81       	ldd	r18, Y+6	; 0x06
    81ee:	3f 81       	ldd	r19, Y+7	; 0x07
    81f0:	48 85       	ldd	r20, Y+8	; 0x08
    81f2:	59 85       	ldd	r21, Y+9	; 0x09
    81f4:	ca 01       	movw	r24, r20
    81f6:	b9 01       	movw	r22, r18
    81f8:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    81fc:	9b 01       	movw	r18, r22
    81fe:	ac 01       	movw	r20, r24
    8200:	c5 01       	movw	r24, r10
    8202:	b4 01       	movw	r22, r8
    8204:	0e 94 92 81 	call	0x10324	; 0x10324 <__addsf3>
    8208:	4b 01       	movw	r8, r22
    820a:	5c 01       	movw	r10, r24
    820c:	a7 01       	movw	r20, r14
    820e:	96 01       	movw	r18, r12
    8210:	c7 01       	movw	r24, r14
    8212:	b6 01       	movw	r22, r12
    8214:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    8218:	9b 01       	movw	r18, r22
    821a:	ac 01       	movw	r20, r24
    821c:	c5 01       	movw	r24, r10
    821e:	b4 01       	movw	r22, r8
    8220:	0e 94 92 81 	call	0x10324	; 0x10324 <__addsf3>
    8224:	20 e0       	ldi	r18, 0x00	; 0
    8226:	30 e0       	ldi	r19, 0x00	; 0
    8228:	40 e0       	ldi	r20, 0x00	; 0
    822a:	5f e3       	ldi	r21, 0x3F	; 63
    822c:	0e 94 e8 83 	call	0x107d0	; 0x107d0 <pow>
    8230:	96 2e       	mov	r9, r22
    8232:	a7 2e       	mov	r10, r23
    8234:	78 2e       	mov	r7, r24
    8236:	69 2e       	mov	r6, r25
    8238:	20 e0       	ldi	r18, 0x00	; 0
    823a:	30 e0       	ldi	r19, 0x00	; 0
    823c:	a9 01       	movw	r20, r18
    823e:	0e 94 f6 81 	call	0x103ec	; 0x103ec <__cmpsf2>
    8242:	81 11       	cpse	r24, r1
    8244:	09 c0       	rjmp	.+18     	; 0x8258 <task_twi2_lcd__gyro_gfxmag+0x242>
    8246:	91 2c       	mov	r9, r1
    8248:	a1 2c       	mov	r10, r1
    824a:	68 94       	set
    824c:	77 24       	eor	r7, r7
    824e:	77 f8       	bld	r7, 7
    8250:	0f 2e       	mov	r0, r31
    8252:	ff e3       	ldi	r31, 0x3F	; 63
    8254:	6f 2e       	mov	r6, r31
    8256:	f0 2d       	mov	r31, r0
    8258:	29 2d       	mov	r18, r9
    825a:	3a 2d       	mov	r19, r10
    825c:	47 2d       	mov	r20, r7
    825e:	56 2d       	mov	r21, r6
    8260:	6a 81       	ldd	r22, Y+2	; 0x02
    8262:	7b 81       	ldd	r23, Y+3	; 0x03
    8264:	8c 81       	ldd	r24, Y+4	; 0x04
    8266:	9d 81       	ldd	r25, Y+5	; 0x05
    8268:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    826c:	20 e0       	ldi	r18, 0x00	; 0
    826e:	30 e0       	ldi	r19, 0x00	; 0
    8270:	48 e4       	ldi	r20, 0x48	; 72
    8272:	51 e4       	ldi	r21, 0x41	; 65
    8274:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    8278:	1b 01       	movw	r2, r22
    827a:	2c 01       	movw	r4, r24
    827c:	0e 94 6a 82 	call	0x104d4	; 0x104d4 <__fixunssfsi>
    8280:	86 2e       	mov	r8, r22
    8282:	c2 01       	movw	r24, r4
    8284:	b1 01       	movw	r22, r2
    8286:	90 58       	subi	r25, 0x80	; 128
    8288:	0e 94 6a 82 	call	0x104d4	; 0x104d4 <__fixunssfsi>
    828c:	16 2f       	mov	r17, r22
    828e:	29 2d       	mov	r18, r9
    8290:	3a 2d       	mov	r19, r10
    8292:	47 2d       	mov	r20, r7
    8294:	56 2d       	mov	r21, r6
    8296:	6e 81       	ldd	r22, Y+6	; 0x06
    8298:	7f 81       	ldd	r23, Y+7	; 0x07
    829a:	88 85       	ldd	r24, Y+8	; 0x08
    829c:	99 85       	ldd	r25, Y+9	; 0x09
    829e:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    82a2:	20 e0       	ldi	r18, 0x00	; 0
    82a4:	30 e0       	ldi	r19, 0x00	; 0
    82a6:	48 ec       	ldi	r20, 0xC8	; 200
    82a8:	51 e4       	ldi	r21, 0x41	; 65
    82aa:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    82ae:	1b 01       	movw	r2, r22
    82b0:	2c 01       	movw	r4, r24
    82b2:	68 2d       	mov	r22, r8
    82b4:	70 e0       	ldi	r23, 0x00	; 0
    82b6:	80 e0       	ldi	r24, 0x00	; 0
    82b8:	90 e0       	ldi	r25, 0x00	; 0
    82ba:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    82be:	9b 01       	movw	r18, r22
    82c0:	ac 01       	movw	r20, r24
    82c2:	c2 01       	movw	r24, r4
    82c4:	b1 01       	movw	r22, r2
    82c6:	0e 94 92 81 	call	0x10324	; 0x10324 <__addsf3>
    82ca:	0e 94 6a 82 	call	0x104d4	; 0x104d4 <__fixunssfsi>
    82ce:	b6 2e       	mov	r11, r22
    82d0:	29 2d       	mov	r18, r9
    82d2:	3a 2d       	mov	r19, r10
    82d4:	47 2d       	mov	r20, r7
    82d6:	56 2d       	mov	r21, r6
    82d8:	c7 01       	movw	r24, r14
    82da:	b6 01       	movw	r22, r12
    82dc:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    82e0:	20 e0       	ldi	r18, 0x00	; 0
    82e2:	30 e0       	ldi	r19, 0x00	; 0
    82e4:	48 ec       	ldi	r20, 0xC8	; 200
    82e6:	51 e4       	ldi	r21, 0x41	; 65
    82e8:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    82ec:	6b 01       	movw	r12, r22
    82ee:	7c 01       	movw	r14, r24
    82f0:	61 2f       	mov	r22, r17
    82f2:	70 e0       	ldi	r23, 0x00	; 0
    82f4:	80 e0       	ldi	r24, 0x00	; 0
    82f6:	90 e0       	ldi	r25, 0x00	; 0
    82f8:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    82fc:	9b 01       	movw	r18, r22
    82fe:	ac 01       	movw	r20, r24
    8300:	c7 01       	movw	r24, r14
    8302:	b6 01       	movw	r22, r12
    8304:	0e 94 92 81 	call	0x10324	; 0x10324 <__addsf3>
    8308:	0e 94 6a 82 	call	0x104d4	; 0x104d4 <__fixunssfsi>
    830c:	f6 2e       	mov	r15, r22
    830e:	20 e0       	ldi	r18, 0x00	; 0
    8310:	30 e5       	ldi	r19, 0x50	; 80
    8312:	43 ec       	ldi	r20, 0xC3	; 195
    8314:	57 e4       	ldi	r21, 0x47	; 71
    8316:	69 2d       	mov	r22, r9
    8318:	7a 2d       	mov	r23, r10
    831a:	87 2d       	mov	r24, r7
    831c:	96 2d       	mov	r25, r6
    831e:	0e 94 81 83 	call	0x10702	; 0x10702 <__gesf2>
    8322:	18 16       	cp	r1, r24
    8324:	6c f4       	brge	.+26     	; 0x8340 <task_twi2_lcd__gyro_gfxmag+0x32a>
    8326:	91 2c       	mov	r9, r1
    8328:	0f 2e       	mov	r0, r31
    832a:	f0 e5       	ldi	r31, 0x50	; 80
    832c:	af 2e       	mov	r10, r31
    832e:	f0 2d       	mov	r31, r0
    8330:	0f 2e       	mov	r0, r31
    8332:	f3 ec       	ldi	r31, 0xC3	; 195
    8334:	7f 2e       	mov	r7, r31
    8336:	f0 2d       	mov	r31, r0
    8338:	0f 2e       	mov	r0, r31
    833a:	f7 e4       	ldi	r31, 0x47	; 71
    833c:	6f 2e       	mov	r6, r31
    833e:	f0 2d       	mov	r31, r0
    8340:	01 e0       	ldi	r16, 0x01	; 1
    8342:	20 e0       	ldi	r18, 0x00	; 0
    8344:	42 e0       	ldi	r20, 0x02	; 2
    8346:	60 e4       	ldi	r22, 0x40	; 64
    8348:	83 e7       	ldi	r24, 0x73	; 115
    834a:	36 d9       	rcall	.-3476   	; 0x75b8 <task_twi2_lcd_circ>
    834c:	20 e0       	ldi	r18, 0x00	; 0
    834e:	30 e8       	ldi	r19, 0x80	; 128
    8350:	4b e3       	ldi	r20, 0x3B	; 59
    8352:	55 e4       	ldi	r21, 0x45	; 69
    8354:	69 2d       	mov	r22, r9
    8356:	7a 2d       	mov	r23, r10
    8358:	87 2d       	mov	r24, r7
    835a:	96 2d       	mov	r25, r6
    835c:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    8360:	1b 01       	movw	r2, r22
    8362:	2c 01       	movw	r4, r24
    8364:	0e 94 6a 82 	call	0x104d4	; 0x104d4 <__fixunssfsi>
    8368:	d6 2e       	mov	r13, r22
    836a:	a2 01       	movw	r20, r4
    836c:	91 01       	movw	r18, r2
    836e:	60 e0       	ldi	r22, 0x00	; 0
    8370:	70 e0       	ldi	r23, 0x00	; 0
    8372:	80 e8       	ldi	r24, 0x80	; 128
    8374:	92 e4       	ldi	r25, 0x42	; 66
    8376:	0e 94 91 81 	call	0x10322	; 0x10322 <__subsf3>
    837a:	0e 94 6a 82 	call	0x104d4	; 0x104d4 <__fixunssfsi>
    837e:	ee 24       	eor	r14, r14
    8380:	e3 94       	inc	r14
    8382:	2d 2d       	mov	r18, r13
    8384:	43 e0       	ldi	r20, 0x03	; 3
    8386:	82 e7       	ldi	r24, 0x72	; 114
    8388:	e9 d8       	rcall	.-3630   	; 0x755c <task_twi2_lcd_rect>
    838a:	0f 2e       	mov	r0, r31
    838c:	f8 e2       	ldi	r31, 0x28	; 40
    838e:	ef 2e       	mov	r14, r31
    8390:	f0 2d       	mov	r31, r0
    8392:	e1 0e       	add	r14, r17
    8394:	0f 2e       	mov	r0, r31
    8396:	f6 e9       	ldi	r31, 0x96	; 150
    8398:	cf 2e       	mov	r12, r31
    839a:	f0 2d       	mov	r31, r0
    839c:	c8 0c       	add	r12, r8
    839e:	2e 2d       	mov	r18, r14
    83a0:	4c 2d       	mov	r20, r12
    83a2:	68 e2       	ldi	r22, 0x28	; 40
    83a4:	86 e9       	ldi	r24, 0x96	; 150
    83a6:	b2 d8       	rcall	.-3740   	; 0x750c <task_twi2_lcd_line>
    83a8:	0f 2e       	mov	r0, r31
    83aa:	f6 e9       	ldi	r31, 0x96	; 150
    83ac:	df 2e       	mov	r13, r31
    83ae:	f0 2d       	mov	r31, r0
    83b0:	db 0c       	add	r13, r11
    83b2:	2e 2d       	mov	r18, r14
    83b4:	4d 2d       	mov	r20, r13
    83b6:	6e 2d       	mov	r22, r14
    83b8:	8c 2d       	mov	r24, r12
    83ba:	a8 d8       	rcall	.-3760   	; 0x750c <task_twi2_lcd_line>
    83bc:	28 e2       	ldi	r18, 0x28	; 40
    83be:	2f 0d       	add	r18, r15
    83c0:	4d 2d       	mov	r20, r13
    83c2:	6e 2d       	mov	r22, r14
    83c4:	8d 2d       	mov	r24, r13
    83c6:	a2 d8       	rcall	.-3772   	; 0x750c <task_twi2_lcd_line>
    83c8:	89 2d       	mov	r24, r9
    83ca:	9a 2d       	mov	r25, r10
    83cc:	a7 2d       	mov	r26, r7
    83ce:	b6 2d       	mov	r27, r6
    83d0:	80 93 e5 22 	sts	0x22E5, r24	; 0x8022e5 <s_length.8229>
    83d4:	90 93 e6 22 	sts	0x22E6, r25	; 0x8022e6 <s_length.8229+0x1>
    83d8:	a0 93 e7 22 	sts	0x22E7, r26	; 0x8022e7 <s_length.8229+0x2>
    83dc:	b0 93 e8 22 	sts	0x22E8, r27	; 0x8022e8 <s_length.8229+0x3>
    83e0:	80 92 e3 22 	sts	0x22E3, r8	; 0x8022e3 <s_p1x.8230>
    83e4:	10 93 e4 22 	sts	0x22E4, r17	; 0x8022e4 <s_p1y.8231>
    83e8:	b0 92 e1 22 	sts	0x22E1, r11	; 0x8022e1 <s_p2x.8232>
    83ec:	10 93 e2 22 	sts	0x22E2, r17	; 0x8022e2 <s_p2y.8233>
    83f0:	b0 92 df 22 	sts	0x22DF, r11	; 0x8022df <s_p3x.8234>
    83f4:	f0 92 e0 22 	sts	0x22E0, r15	; 0x8022e0 <s_p3y.8235>
    83f8:	2d 96       	adiw	r28, 0x0d	; 13
    83fa:	cd bf       	out	0x3d, r28	; 61
    83fc:	de bf       	out	0x3e, r29	; 62
    83fe:	df 91       	pop	r29
    8400:	cf 91       	pop	r28
    8402:	1f 91       	pop	r17
    8404:	0f 91       	pop	r16
    8406:	ff 90       	pop	r15
    8408:	ef 90       	pop	r14
    840a:	df 90       	pop	r13
    840c:	cf 90       	pop	r12
    840e:	bf 90       	pop	r11
    8410:	af 90       	pop	r10
    8412:	9f 90       	pop	r9
    8414:	8f 90       	pop	r8
    8416:	7f 90       	pop	r7
    8418:	6f 90       	pop	r6
    841a:	5f 90       	pop	r5
    841c:	4f 90       	pop	r4
    841e:	3f 90       	pop	r3
    8420:	2f 90       	pop	r2
    8422:	08 95       	ret

00008424 <task_twi2_lcd__gyro_gfxaccel>:
    8424:	6f 92       	push	r6
    8426:	7f 92       	push	r7
    8428:	8f 92       	push	r8
    842a:	9f 92       	push	r9
    842c:	af 92       	push	r10
    842e:	bf 92       	push	r11
    8430:	cf 92       	push	r12
    8432:	df 92       	push	r13
    8434:	ef 92       	push	r14
    8436:	ff 92       	push	r15
    8438:	0f 93       	push	r16
    843a:	1f 93       	push	r17
    843c:	cf 93       	push	r28
    843e:	df 93       	push	r29
    8440:	1f 92       	push	r1
    8442:	cd b7       	in	r28, 0x3d	; 61
    8444:	de b7       	in	r29, 0x3e	; 62
    8446:	8f b7       	in	r24, 0x3f	; 63
    8448:	89 83       	std	Y+1, r24	; 0x01
    844a:	f8 94       	cli
    844c:	89 81       	ldd	r24, Y+1	; 0x01
    844e:	c0 90 56 27 	lds	r12, 0x2756	; 0x802756 <g_twi1_gyro_1_accel_x_mg>
    8452:	d0 90 57 27 	lds	r13, 0x2757	; 0x802757 <g_twi1_gyro_1_accel_x_mg+0x1>
    8456:	a0 90 54 27 	lds	r10, 0x2754	; 0x802754 <g_twi1_gyro_1_accel_y_mg>
    845a:	b0 90 55 27 	lds	r11, 0x2755	; 0x802755 <g_twi1_gyro_1_accel_y_mg+0x1>
    845e:	e0 90 52 27 	lds	r14, 0x2752	; 0x802752 <g_twi1_gyro_1_accel_z_mg>
    8462:	f0 90 53 27 	lds	r15, 0x2753	; 0x802753 <g_twi1_gyro_1_accel_z_mg+0x1>
    8466:	80 90 9b 28 	lds	r8, 0x289B	; 0x80289b <g_backlight_mode_pwm>
    846a:	90 90 9c 28 	lds	r9, 0x289C	; 0x80289c <g_backlight_mode_pwm+0x1>
    846e:	8f bf       	out	0x3f, r24	; 63
    8470:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <s_twi1_gyro_1_accel_x_mg.8255>
    8474:	90 91 de 22 	lds	r25, 0x22DE	; 0x8022de <s_twi1_gyro_1_accel_x_mg.8255+0x1>
    8478:	c8 16       	cp	r12, r24
    847a:	d9 06       	cpc	r13, r25
    847c:	79 f4       	brne	.+30     	; 0x849c <task_twi2_lcd__gyro_gfxaccel+0x78>
    847e:	80 91 db 22 	lds	r24, 0x22DB	; 0x8022db <s_twi1_gyro_1_accel_y_mg.8256>
    8482:	90 91 dc 22 	lds	r25, 0x22DC	; 0x8022dc <s_twi1_gyro_1_accel_y_mg.8256+0x1>
    8486:	a8 16       	cp	r10, r24
    8488:	b9 06       	cpc	r11, r25
    848a:	41 f4       	brne	.+16     	; 0x849c <task_twi2_lcd__gyro_gfxaccel+0x78>
    848c:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <s_twi1_gyro_1_accel_z_mg.8257>
    8490:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <s_twi1_gyro_1_accel_z_mg.8257+0x1>
    8494:	e8 16       	cp	r14, r24
    8496:	f9 06       	cpc	r15, r25
    8498:	09 f4       	brne	.+2      	; 0x849c <task_twi2_lcd__gyro_gfxaccel+0x78>
    849a:	a2 c0       	rjmp	.+324    	; 0x85e0 <task_twi2_lcd__gyro_gfxaccel+0x1bc>
    849c:	c0 92 dd 22 	sts	0x22DD, r12	; 0x8022dd <s_twi1_gyro_1_accel_x_mg.8255>
    84a0:	d0 92 de 22 	sts	0x22DE, r13	; 0x8022de <s_twi1_gyro_1_accel_x_mg.8255+0x1>
    84a4:	a0 92 db 22 	sts	0x22DB, r10	; 0x8022db <s_twi1_gyro_1_accel_y_mg.8256>
    84a8:	b0 92 dc 22 	sts	0x22DC, r11	; 0x8022dc <s_twi1_gyro_1_accel_y_mg.8256+0x1>
    84ac:	e0 92 d9 22 	sts	0x22D9, r14	; 0x8022d9 <s_twi1_gyro_1_accel_z_mg.8257>
    84b0:	f0 92 da 22 	sts	0x22DA, r15	; 0x8022da <s_twi1_gyro_1_accel_z_mg.8257+0x1>
    84b4:	20 91 d8 22 	lds	r18, 0x22D8	; 0x8022d8 <s_p1y.8259>
    84b8:	28 5d       	subi	r18, 0xD8	; 216
    84ba:	40 91 d7 22 	lds	r20, 0x22D7	; 0x8022d7 <s_p1x.8258>
    84be:	4e 52       	subi	r20, 0x2E	; 46
    84c0:	00 e0       	ldi	r16, 0x00	; 0
    84c2:	68 e2       	ldi	r22, 0x28	; 40
    84c4:	82 ed       	ldi	r24, 0xD2	; 210
    84c6:	22 d8       	rcall	.-4028   	; 0x750c <task_twi2_lcd_line>
    84c8:	20 91 d6 22 	lds	r18, 0x22D6	; 0x8022d6 <s_p2y.8261>
    84cc:	28 5d       	subi	r18, 0xD8	; 216
    84ce:	40 91 d5 22 	lds	r20, 0x22D5	; 0x8022d5 <s_p2x.8260>
    84d2:	4e 52       	subi	r20, 0x2E	; 46
    84d4:	60 91 d8 22 	lds	r22, 0x22D8	; 0x8022d8 <s_p1y.8259>
    84d8:	68 5d       	subi	r22, 0xD8	; 216
    84da:	80 91 d7 22 	lds	r24, 0x22D7	; 0x8022d7 <s_p1x.8258>
    84de:	8e 52       	subi	r24, 0x2E	; 46
    84e0:	15 d8       	rcall	.-4054   	; 0x750c <task_twi2_lcd_line>
    84e2:	20 91 d4 22 	lds	r18, 0x22D4	; 0x8022d4 <s_p3y.8263>
    84e6:	28 5d       	subi	r18, 0xD8	; 216
    84e8:	40 91 d3 22 	lds	r20, 0x22D3	; 0x8022d3 <s_p3x.8262>
    84ec:	4e 52       	subi	r20, 0x2E	; 46
    84ee:	60 91 d6 22 	lds	r22, 0x22D6	; 0x8022d6 <s_p2y.8261>
    84f2:	68 5d       	subi	r22, 0xD8	; 216
    84f4:	80 91 d5 22 	lds	r24, 0x22D5	; 0x8022d5 <s_p2x.8260>
    84f8:	8e 52       	subi	r24, 0x2E	; 46
    84fa:	08 d8       	rcall	.-4080   	; 0x750c <task_twi2_lcd_line>
    84fc:	01 e0       	ldi	r16, 0x01	; 1
    84fe:	21 e0       	ldi	r18, 0x01	; 1
    8500:	41 e0       	ldi	r20, 0x01	; 1
    8502:	68 e2       	ldi	r22, 0x28	; 40
    8504:	82 ed       	ldi	r24, 0xD2	; 210
    8506:	58 d8       	rcall	.-3920   	; 0x75b8 <task_twi2_lcd_circ>
    8508:	c5 01       	movw	r24, r10
    850a:	60 e5       	ldi	r22, 0x50	; 80
    850c:	70 e0       	ldi	r23, 0x00	; 0
    850e:	0e 94 87 85 	call	0x10b0e	; 0x10b0e <__divmodhi4>
    8512:	16 2f       	mov	r17, r22
    8514:	66 2e       	mov	r6, r22
    8516:	61 94       	neg	r6
    8518:	28 e2       	ldi	r18, 0x28	; 40
    851a:	30 e0       	ldi	r19, 0x00	; 0
    851c:	c6 01       	movw	r24, r12
    851e:	b9 01       	movw	r22, r18
    8520:	0e 94 87 85 	call	0x10b0e	; 0x10b0e <__divmodhi4>
    8524:	a6 2c       	mov	r10, r6
    8526:	a6 1a       	sub	r10, r22
    8528:	c7 01       	movw	r24, r14
    852a:	b9 01       	movw	r22, r18
    852c:	0e 94 87 85 	call	0x10b0e	; 0x10b0e <__divmodhi4>
    8530:	d1 2e       	mov	r13, r17
    8532:	d6 0e       	add	r13, r22
    8534:	0f 2e       	mov	r0, r31
    8536:	f8 e2       	ldi	r31, 0x28	; 40
    8538:	cf 2e       	mov	r12, r31
    853a:	f0 2d       	mov	r31, r0
    853c:	c1 0e       	add	r12, r17
    853e:	82 ed       	ldi	r24, 0xD2	; 210
    8540:	b8 2e       	mov	r11, r24
    8542:	b1 1a       	sub	r11, r17
    8544:	2c 2d       	mov	r18, r12
    8546:	4b 2d       	mov	r20, r11
    8548:	68 e2       	ldi	r22, 0x28	; 40
    854a:	0e 94 86 3a 	call	0x750c	; 0x750c <task_twi2_lcd_line>
    854e:	0f 2e       	mov	r0, r31
    8550:	f2 ed       	ldi	r31, 0xD2	; 210
    8552:	7f 2e       	mov	r7, r31
    8554:	f0 2d       	mov	r31, r0
    8556:	7a 0c       	add	r7, r10
    8558:	2c 2d       	mov	r18, r12
    855a:	47 2d       	mov	r20, r7
    855c:	6c 2d       	mov	r22, r12
    855e:	8b 2d       	mov	r24, r11
    8560:	0e 94 86 3a 	call	0x750c	; 0x750c <task_twi2_lcd_line>
    8564:	28 e2       	ldi	r18, 0x28	; 40
    8566:	2d 0d       	add	r18, r13
    8568:	47 2d       	mov	r20, r7
    856a:	6c 2d       	mov	r22, r12
    856c:	87 2d       	mov	r24, r7
    856e:	0e 94 86 3a 	call	0x750c	; 0x750c <task_twi2_lcd_line>
    8572:	60 92 d7 22 	sts	0x22D7, r6	; 0x8022d7 <s_p1x.8258>
    8576:	10 93 d8 22 	sts	0x22D8, r17	; 0x8022d8 <s_p1y.8259>
    857a:	a0 92 d5 22 	sts	0x22D5, r10	; 0x8022d5 <s_p2x.8260>
    857e:	10 93 d6 22 	sts	0x22D6, r17	; 0x8022d6 <s_p2y.8261>
    8582:	a0 92 d3 22 	sts	0x22D3, r10	; 0x8022d3 <s_p3x.8262>
    8586:	d0 92 d4 22 	sts	0x22D4, r13	; 0x8022d4 <s_p3y.8263>
    858a:	2e ef       	ldi	r18, 0xFE	; 254
    858c:	82 16       	cp	r8, r18
    858e:	2f ef       	ldi	r18, 0xFF	; 255
    8590:	92 06       	cpc	r9, r18
    8592:	31 f5       	brne	.+76     	; 0x85e0 <task_twi2_lcd__gyro_gfxaccel+0x1bc>
    8594:	97 01       	movw	r18, r14
    8596:	28 51       	subi	r18, 0x18	; 24
    8598:	3c 4f       	sbci	r19, 0xFC	; 252
    859a:	c9 01       	movw	r24, r18
    859c:	33 0f       	add	r19, r19
    859e:	aa 0b       	sbc	r26, r26
    85a0:	bb 0b       	sbc	r27, r27
    85a2:	81 3d       	cpi	r24, 0xD1	; 209
    85a4:	27 e0       	ldi	r18, 0x07	; 7
    85a6:	92 07       	cpc	r25, r18
    85a8:	a1 05       	cpc	r26, r1
    85aa:	b1 05       	cpc	r27, r1
    85ac:	24 f0       	brlt	.+8      	; 0x85b6 <task_twi2_lcd__gyro_gfxaccel+0x192>
    85ae:	80 ed       	ldi	r24, 0xD0	; 208
    85b0:	97 e0       	ldi	r25, 0x07	; 7
    85b2:	a0 e0       	ldi	r26, 0x00	; 0
    85b4:	b0 e0       	ldi	r27, 0x00	; 0
    85b6:	9c 01       	movw	r18, r24
    85b8:	ad 01       	movw	r20, r26
    85ba:	bb 23       	and	r27, r27
    85bc:	1c f4       	brge	.+6      	; 0x85c4 <task_twi2_lcd__gyro_gfxaccel+0x1a0>
    85be:	20 e0       	ldi	r18, 0x00	; 0
    85c0:	30 e0       	ldi	r19, 0x00	; 0
    85c2:	a9 01       	movw	r20, r18
    85c4:	af ef       	ldi	r26, 0xFF	; 255
    85c6:	b0 e0       	ldi	r27, 0x00	; 0
    85c8:	0e 94 fb 85 	call	0x10bf6	; 0x10bf6 <__muluhisi3>
    85cc:	20 ed       	ldi	r18, 0xD0	; 208
    85ce:	37 e0       	ldi	r19, 0x07	; 7
    85d0:	40 e0       	ldi	r20, 0x00	; 0
    85d2:	50 e0       	ldi	r21, 0x00	; 0
    85d4:	0e 94 bc 85 	call	0x10b78	; 0x10b78 <__divmodsi4>
    85d8:	62 2f       	mov	r22, r18
    85da:	80 e0       	ldi	r24, 0x00	; 0
    85dc:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <twi2_set_ledbl>
    85e0:	0f 90       	pop	r0
    85e2:	df 91       	pop	r29
    85e4:	cf 91       	pop	r28
    85e6:	1f 91       	pop	r17
    85e8:	0f 91       	pop	r16
    85ea:	ff 90       	pop	r15
    85ec:	ef 90       	pop	r14
    85ee:	df 90       	pop	r13
    85f0:	cf 90       	pop	r12
    85f2:	bf 90       	pop	r11
    85f4:	af 90       	pop	r10
    85f6:	9f 90       	pop	r9
    85f8:	8f 90       	pop	r8
    85fa:	7f 90       	pop	r7
    85fc:	6f 90       	pop	r6
    85fe:	08 95       	ret

00008600 <task_twi2_lcd__gyro_gfxgyro>:
    8600:	2f 92       	push	r2
    8602:	3f 92       	push	r3
    8604:	4f 92       	push	r4
    8606:	5f 92       	push	r5
    8608:	6f 92       	push	r6
    860a:	7f 92       	push	r7
    860c:	8f 92       	push	r8
    860e:	9f 92       	push	r9
    8610:	af 92       	push	r10
    8612:	bf 92       	push	r11
    8614:	cf 92       	push	r12
    8616:	df 92       	push	r13
    8618:	ef 92       	push	r14
    861a:	ff 92       	push	r15
    861c:	0f 93       	push	r16
    861e:	1f 93       	push	r17
    8620:	cf 93       	push	r28
    8622:	df 93       	push	r29
    8624:	cd b7       	in	r28, 0x3d	; 61
    8626:	de b7       	in	r29, 0x3e	; 62
    8628:	65 97       	sbiw	r28, 0x15	; 21
    862a:	cd bf       	out	0x3d, r28	; 61
    862c:	de bf       	out	0x3e, r29	; 62
    862e:	8f b7       	in	r24, 0x3f	; 63
    8630:	89 83       	std	Y+1, r24	; 0x01
    8632:	f8 94       	cli
    8634:	89 81       	ldd	r24, Y+1	; 0x01
    8636:	20 90 42 27 	lds	r2, 0x2742	; 0x802742 <g_twi1_gyro_1_gyro_x_mdps>
    863a:	30 90 43 27 	lds	r3, 0x2743	; 0x802743 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    863e:	40 90 44 27 	lds	r4, 0x2744	; 0x802744 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    8642:	50 90 45 27 	lds	r5, 0x2745	; 0x802745 <g_twi1_gyro_1_gyro_x_mdps+0x3>
    8646:	c0 90 3e 27 	lds	r12, 0x273E	; 0x80273e <g_twi1_gyro_1_gyro_y_mdps>
    864a:	d0 90 3f 27 	lds	r13, 0x273F	; 0x80273f <g_twi1_gyro_1_gyro_y_mdps+0x1>
    864e:	e0 90 40 27 	lds	r14, 0x2740	; 0x802740 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    8652:	f0 90 41 27 	lds	r15, 0x2741	; 0x802741 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    8656:	20 91 3a 27 	lds	r18, 0x273A	; 0x80273a <g_twi1_gyro_1_gyro_z_mdps>
    865a:	30 91 3b 27 	lds	r19, 0x273B	; 0x80273b <g_twi1_gyro_1_gyro_z_mdps+0x1>
    865e:	40 91 3c 27 	lds	r20, 0x273C	; 0x80273c <g_twi1_gyro_1_gyro_z_mdps+0x2>
    8662:	50 91 3d 27 	lds	r21, 0x273D	; 0x80273d <g_twi1_gyro_1_gyro_z_mdps+0x3>
    8666:	2a 8b       	std	Y+18, r18	; 0x12
    8668:	3b 8b       	std	Y+19, r19	; 0x13
    866a:	4c 8b       	std	Y+20, r20	; 0x14
    866c:	5d 8b       	std	Y+21, r21	; 0x15
    866e:	8f bf       	out	0x3f, r24	; 63
    8670:	80 91 cf 22 	lds	r24, 0x22CF	; 0x8022cf <s_twi1_gyro_1_gyro_x_mdps.8287>
    8674:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <s_twi1_gyro_1_gyro_x_mdps.8287+0x1>
    8678:	a0 91 d1 22 	lds	r26, 0x22D1	; 0x8022d1 <s_twi1_gyro_1_gyro_x_mdps.8287+0x2>
    867c:	b0 91 d2 22 	lds	r27, 0x22D2	; 0x8022d2 <s_twi1_gyro_1_gyro_x_mdps.8287+0x3>
    8680:	28 16       	cp	r2, r24
    8682:	39 06       	cpc	r3, r25
    8684:	4a 06       	cpc	r4, r26
    8686:	5b 06       	cpc	r5, r27
    8688:	d9 f4       	brne	.+54     	; 0x86c0 <task_twi2_lcd__gyro_gfxgyro+0xc0>
    868a:	80 91 cb 22 	lds	r24, 0x22CB	; 0x8022cb <s_twi1_gyro_1_gyro_y_mdps.8288>
    868e:	90 91 cc 22 	lds	r25, 0x22CC	; 0x8022cc <s_twi1_gyro_1_gyro_y_mdps.8288+0x1>
    8692:	a0 91 cd 22 	lds	r26, 0x22CD	; 0x8022cd <s_twi1_gyro_1_gyro_y_mdps.8288+0x2>
    8696:	b0 91 ce 22 	lds	r27, 0x22CE	; 0x8022ce <s_twi1_gyro_1_gyro_y_mdps.8288+0x3>
    869a:	c8 16       	cp	r12, r24
    869c:	d9 06       	cpc	r13, r25
    869e:	ea 06       	cpc	r14, r26
    86a0:	fb 06       	cpc	r15, r27
    86a2:	71 f4       	brne	.+28     	; 0x86c0 <task_twi2_lcd__gyro_gfxgyro+0xc0>
    86a4:	80 91 c7 22 	lds	r24, 0x22C7	; 0x8022c7 <s_twi1_gyro_1_gyro_z_mdps.8289>
    86a8:	90 91 c8 22 	lds	r25, 0x22C8	; 0x8022c8 <s_twi1_gyro_1_gyro_z_mdps.8289+0x1>
    86ac:	a0 91 c9 22 	lds	r26, 0x22C9	; 0x8022c9 <s_twi1_gyro_1_gyro_z_mdps.8289+0x2>
    86b0:	b0 91 ca 22 	lds	r27, 0x22CA	; 0x8022ca <s_twi1_gyro_1_gyro_z_mdps.8289+0x3>
    86b4:	28 17       	cp	r18, r24
    86b6:	39 07       	cpc	r19, r25
    86b8:	4a 07       	cpc	r20, r26
    86ba:	5b 07       	cpc	r21, r27
    86bc:	09 f4       	brne	.+2      	; 0x86c0 <task_twi2_lcd__gyro_gfxgyro+0xc0>
    86be:	b7 c1       	rjmp	.+878    	; 0x8a2e <task_twi2_lcd__gyro_gfxgyro+0x42e>
    86c0:	20 92 cf 22 	sts	0x22CF, r2	; 0x8022cf <s_twi1_gyro_1_gyro_x_mdps.8287>
    86c4:	30 92 d0 22 	sts	0x22D0, r3	; 0x8022d0 <s_twi1_gyro_1_gyro_x_mdps.8287+0x1>
    86c8:	40 92 d1 22 	sts	0x22D1, r4	; 0x8022d1 <s_twi1_gyro_1_gyro_x_mdps.8287+0x2>
    86cc:	50 92 d2 22 	sts	0x22D2, r5	; 0x8022d2 <s_twi1_gyro_1_gyro_x_mdps.8287+0x3>
    86d0:	c0 92 cb 22 	sts	0x22CB, r12	; 0x8022cb <s_twi1_gyro_1_gyro_y_mdps.8288>
    86d4:	d0 92 cc 22 	sts	0x22CC, r13	; 0x8022cc <s_twi1_gyro_1_gyro_y_mdps.8288+0x1>
    86d8:	e0 92 cd 22 	sts	0x22CD, r14	; 0x8022cd <s_twi1_gyro_1_gyro_y_mdps.8288+0x2>
    86dc:	f0 92 ce 22 	sts	0x22CE, r15	; 0x8022ce <s_twi1_gyro_1_gyro_y_mdps.8288+0x3>
    86e0:	8a 89       	ldd	r24, Y+18	; 0x12
    86e2:	9b 89       	ldd	r25, Y+19	; 0x13
    86e4:	ac 89       	ldd	r26, Y+20	; 0x14
    86e6:	bd 89       	ldd	r27, Y+21	; 0x15
    86e8:	80 93 c7 22 	sts	0x22C7, r24	; 0x8022c7 <s_twi1_gyro_1_gyro_z_mdps.8289>
    86ec:	90 93 c8 22 	sts	0x22C8, r25	; 0x8022c8 <s_twi1_gyro_1_gyro_z_mdps.8289+0x1>
    86f0:	a0 93 c9 22 	sts	0x22C9, r26	; 0x8022c9 <s_twi1_gyro_1_gyro_z_mdps.8289+0x2>
    86f4:	b0 93 ca 22 	sts	0x22CA, r27	; 0x8022ca <s_twi1_gyro_1_gyro_z_mdps.8289+0x3>
    86f8:	c2 01       	movw	r24, r4
    86fa:	b1 01       	movw	r22, r2
    86fc:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    8700:	2b ed       	ldi	r18, 0xDB	; 219
    8702:	3f e0       	ldi	r19, 0x0F	; 15
    8704:	49 e4       	ldi	r20, 0x49	; 73
    8706:	50 e4       	ldi	r21, 0x40	; 64
    8708:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    870c:	20 e0       	ldi	r18, 0x00	; 0
    870e:	38 ec       	ldi	r19, 0xC8	; 200
    8710:	4f e2       	ldi	r20, 0x2F	; 47
    8712:	58 e4       	ldi	r21, 0x48	; 72
    8714:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    8718:	6e 83       	std	Y+6, r22	; 0x06
    871a:	7f 83       	std	Y+7, r23	; 0x07
    871c:	88 87       	std	Y+8, r24	; 0x08
    871e:	99 87       	std	Y+9, r25	; 0x09
    8720:	c7 01       	movw	r24, r14
    8722:	b6 01       	movw	r22, r12
    8724:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    8728:	2b ed       	ldi	r18, 0xDB	; 219
    872a:	3f e0       	ldi	r19, 0x0F	; 15
    872c:	49 e4       	ldi	r20, 0x49	; 73
    872e:	50 e4       	ldi	r21, 0x40	; 64
    8730:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    8734:	20 e0       	ldi	r18, 0x00	; 0
    8736:	38 ec       	ldi	r19, 0xC8	; 200
    8738:	4f e2       	ldi	r20, 0x2F	; 47
    873a:	58 e4       	ldi	r21, 0x48	; 72
    873c:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    8740:	6a 87       	std	Y+10, r22	; 0x0a
    8742:	7b 87       	std	Y+11, r23	; 0x0b
    8744:	8c 87       	std	Y+12, r24	; 0x0c
    8746:	9d 87       	std	Y+13, r25	; 0x0d
    8748:	6a 89       	ldd	r22, Y+18	; 0x12
    874a:	7b 89       	ldd	r23, Y+19	; 0x13
    874c:	8c 89       	ldd	r24, Y+20	; 0x14
    874e:	9d 89       	ldd	r25, Y+21	; 0x15
    8750:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    8754:	2b ed       	ldi	r18, 0xDB	; 219
    8756:	3f e0       	ldi	r19, 0x0F	; 15
    8758:	49 e4       	ldi	r20, 0x49	; 73
    875a:	50 e4       	ldi	r21, 0x40	; 64
    875c:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    8760:	20 e0       	ldi	r18, 0x00	; 0
    8762:	38 ec       	ldi	r19, 0xC8	; 200
    8764:	4f e2       	ldi	r20, 0x2F	; 47
    8766:	58 e4       	ldi	r21, 0x48	; 72
    8768:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    876c:	6e 87       	std	Y+14, r22	; 0x0e
    876e:	7f 87       	std	Y+15, r23	; 0x0f
    8770:	88 8b       	std	Y+16, r24	; 0x10
    8772:	99 8b       	std	Y+17, r25	; 0x11
    8774:	80 90 c3 22 	lds	r8, 0x22C3	; 0x8022c3 <s_rads_x.8284>
    8778:	90 90 c4 22 	lds	r9, 0x22C4	; 0x8022c4 <s_rads_x.8284+0x1>
    877c:	a0 90 c5 22 	lds	r10, 0x22C5	; 0x8022c5 <s_rads_x.8284+0x2>
    8780:	b0 90 c6 22 	lds	r11, 0x22C6	; 0x8022c6 <s_rads_x.8284+0x3>
    8784:	c5 01       	movw	r24, r10
    8786:	b4 01       	movw	r22, r8
    8788:	0e 94 fa 81 	call	0x103f4	; 0x103f4 <cos>
    878c:	6a 83       	std	Y+2, r22	; 0x02
    878e:	7b 83       	std	Y+3, r23	; 0x03
    8790:	8c 83       	std	Y+4, r24	; 0x04
    8792:	9d 83       	std	Y+5, r25	; 0x05
    8794:	c5 01       	movw	r24, r10
    8796:	b4 01       	movw	r22, r8
    8798:	0e 94 34 84 	call	0x10868	; 0x10868 <sin>
    879c:	4b 01       	movw	r8, r22
    879e:	5c 01       	movw	r10, r24
    87a0:	20 e0       	ldi	r18, 0x00	; 0
    87a2:	30 e0       	ldi	r19, 0x00	; 0
    87a4:	40 e4       	ldi	r20, 0x40	; 64
    87a6:	51 e4       	ldi	r21, 0x41	; 65
    87a8:	6a 81       	ldd	r22, Y+2	; 0x02
    87aa:	7b 81       	ldd	r23, Y+3	; 0x03
    87ac:	8c 81       	ldd	r24, Y+4	; 0x04
    87ae:	9d 81       	ldd	r25, Y+5	; 0x05
    87b0:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    87b4:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    87b8:	14 e6       	ldi	r17, 0x64	; 100
    87ba:	71 2e       	mov	r7, r17
    87bc:	76 1a       	sub	r7, r22
    87be:	20 e0       	ldi	r18, 0x00	; 0
    87c0:	30 e0       	ldi	r19, 0x00	; 0
    87c2:	40 e4       	ldi	r20, 0x40	; 64
    87c4:	51 e4       	ldi	r21, 0x41	; 65
    87c6:	c5 01       	movw	r24, r10
    87c8:	b4 01       	movw	r22, r8
    87ca:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    87ce:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    87d2:	46 e9       	ldi	r20, 0x96	; 150
    87d4:	46 1b       	sub	r20, r22
    87d6:	00 e0       	ldi	r16, 0x00	; 0
    87d8:	27 2d       	mov	r18, r7
    87da:	64 e6       	ldi	r22, 0x64	; 100
    87dc:	86 e9       	ldi	r24, 0x96	; 150
    87de:	0e 94 86 3a 	call	0x750c	; 0x750c <task_twi2_lcd_line>
    87e2:	80 90 bf 22 	lds	r8, 0x22BF	; 0x8022bf <s_rads_y.8285>
    87e6:	90 90 c0 22 	lds	r9, 0x22C0	; 0x8022c0 <s_rads_y.8285+0x1>
    87ea:	a0 90 c1 22 	lds	r10, 0x22C1	; 0x8022c1 <s_rads_y.8285+0x2>
    87ee:	b0 90 c2 22 	lds	r11, 0x22C2	; 0x8022c2 <s_rads_y.8285+0x3>
    87f2:	c5 01       	movw	r24, r10
    87f4:	b4 01       	movw	r22, r8
    87f6:	0e 94 fa 81 	call	0x103f4	; 0x103f4 <cos>
    87fa:	6a 83       	std	Y+2, r22	; 0x02
    87fc:	7b 83       	std	Y+3, r23	; 0x03
    87fe:	8c 83       	std	Y+4, r24	; 0x04
    8800:	9d 83       	std	Y+5, r25	; 0x05
    8802:	c5 01       	movw	r24, r10
    8804:	b4 01       	movw	r22, r8
    8806:	0e 94 34 84 	call	0x10868	; 0x10868 <sin>
    880a:	4b 01       	movw	r8, r22
    880c:	5c 01       	movw	r10, r24
    880e:	20 e0       	ldi	r18, 0x00	; 0
    8810:	30 e0       	ldi	r19, 0x00	; 0
    8812:	40 e4       	ldi	r20, 0x40	; 64
    8814:	51 e4       	ldi	r21, 0x41	; 65
    8816:	6a 81       	ldd	r22, Y+2	; 0x02
    8818:	7b 81       	ldd	r23, Y+3	; 0x03
    881a:	8c 81       	ldd	r24, Y+4	; 0x04
    881c:	9d 81       	ldd	r25, Y+5	; 0x05
    881e:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    8822:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    8826:	71 2e       	mov	r7, r17
    8828:	76 1a       	sub	r7, r22
    882a:	20 e0       	ldi	r18, 0x00	; 0
    882c:	30 e0       	ldi	r19, 0x00	; 0
    882e:	40 e4       	ldi	r20, 0x40	; 64
    8830:	51 e4       	ldi	r21, 0x41	; 65
    8832:	c5 01       	movw	r24, r10
    8834:	b4 01       	movw	r22, r8
    8836:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    883a:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    883e:	44 eb       	ldi	r20, 0xB4	; 180
    8840:	46 0f       	add	r20, r22
    8842:	27 2d       	mov	r18, r7
    8844:	64 e6       	ldi	r22, 0x64	; 100
    8846:	84 eb       	ldi	r24, 0xB4	; 180
    8848:	0e 94 86 3a 	call	0x750c	; 0x750c <task_twi2_lcd_line>
    884c:	80 90 bb 22 	lds	r8, 0x22BB	; 0x8022bb <s_rads_z.8286>
    8850:	90 90 bc 22 	lds	r9, 0x22BC	; 0x8022bc <s_rads_z.8286+0x1>
    8854:	a0 90 bd 22 	lds	r10, 0x22BD	; 0x8022bd <s_rads_z.8286+0x2>
    8858:	b0 90 be 22 	lds	r11, 0x22BE	; 0x8022be <s_rads_z.8286+0x3>
    885c:	c5 01       	movw	r24, r10
    885e:	b4 01       	movw	r22, r8
    8860:	0e 94 fa 81 	call	0x103f4	; 0x103f4 <cos>
    8864:	6a 83       	std	Y+2, r22	; 0x02
    8866:	7b 83       	std	Y+3, r23	; 0x03
    8868:	8c 83       	std	Y+4, r24	; 0x04
    886a:	9d 83       	std	Y+5, r25	; 0x05
    886c:	c5 01       	movw	r24, r10
    886e:	b4 01       	movw	r22, r8
    8870:	0e 94 34 84 	call	0x10868	; 0x10868 <sin>
    8874:	4b 01       	movw	r8, r22
    8876:	5c 01       	movw	r10, r24
    8878:	20 e0       	ldi	r18, 0x00	; 0
    887a:	30 e0       	ldi	r19, 0x00	; 0
    887c:	40 e4       	ldi	r20, 0x40	; 64
    887e:	51 e4       	ldi	r21, 0x41	; 65
    8880:	6a 81       	ldd	r22, Y+2	; 0x02
    8882:	7b 81       	ldd	r23, Y+3	; 0x03
    8884:	8c 81       	ldd	r24, Y+4	; 0x04
    8886:	9d 81       	ldd	r25, Y+5	; 0x05
    8888:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    888c:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    8890:	71 2e       	mov	r7, r17
    8892:	76 1a       	sub	r7, r22
    8894:	20 e0       	ldi	r18, 0x00	; 0
    8896:	30 e0       	ldi	r19, 0x00	; 0
    8898:	40 e4       	ldi	r20, 0x40	; 64
    889a:	51 e4       	ldi	r21, 0x41	; 65
    889c:	c5 01       	movw	r24, r10
    889e:	b4 01       	movw	r22, r8
    88a0:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    88a4:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    88a8:	0f 2e       	mov	r0, r31
    88aa:	f2 ed       	ldi	r31, 0xD2	; 210
    88ac:	6f 2e       	mov	r6, r31
    88ae:	f0 2d       	mov	r31, r0
    88b0:	46 2d       	mov	r20, r6
    88b2:	46 1b       	sub	r20, r22
    88b4:	27 2d       	mov	r18, r7
    88b6:	64 e6       	ldi	r22, 0x64	; 100
    88b8:	82 ed       	ldi	r24, 0xD2	; 210
    88ba:	0e 94 86 3a 	call	0x750c	; 0x750c <task_twi2_lcd_line>
    88be:	6e 81       	ldd	r22, Y+6	; 0x06
    88c0:	7f 81       	ldd	r23, Y+7	; 0x07
    88c2:	88 85       	ldd	r24, Y+8	; 0x08
    88c4:	99 85       	ldd	r25, Y+9	; 0x09
    88c6:	0e 94 fa 81 	call	0x103f4	; 0x103f4 <cos>
    88ca:	6a 83       	std	Y+2, r22	; 0x02
    88cc:	7b 83       	std	Y+3, r23	; 0x03
    88ce:	8c 83       	std	Y+4, r24	; 0x04
    88d0:	9d 83       	std	Y+5, r25	; 0x05
    88d2:	6e 81       	ldd	r22, Y+6	; 0x06
    88d4:	7f 81       	ldd	r23, Y+7	; 0x07
    88d6:	88 85       	ldd	r24, Y+8	; 0x08
    88d8:	99 85       	ldd	r25, Y+9	; 0x09
    88da:	0e 94 34 84 	call	0x10868	; 0x10868 <sin>
    88de:	4b 01       	movw	r8, r22
    88e0:	5c 01       	movw	r10, r24
    88e2:	20 e0       	ldi	r18, 0x00	; 0
    88e4:	30 e0       	ldi	r19, 0x00	; 0
    88e6:	40 e4       	ldi	r20, 0x40	; 64
    88e8:	51 e4       	ldi	r21, 0x41	; 65
    88ea:	6a 81       	ldd	r22, Y+2	; 0x02
    88ec:	7b 81       	ldd	r23, Y+3	; 0x03
    88ee:	8c 81       	ldd	r24, Y+4	; 0x04
    88f0:	9d 81       	ldd	r25, Y+5	; 0x05
    88f2:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    88f6:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    88fa:	71 2e       	mov	r7, r17
    88fc:	76 1a       	sub	r7, r22
    88fe:	20 e0       	ldi	r18, 0x00	; 0
    8900:	30 e0       	ldi	r19, 0x00	; 0
    8902:	40 e4       	ldi	r20, 0x40	; 64
    8904:	51 e4       	ldi	r21, 0x41	; 65
    8906:	c5 01       	movw	r24, r10
    8908:	b4 01       	movw	r22, r8
    890a:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    890e:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    8912:	46 e9       	ldi	r20, 0x96	; 150
    8914:	46 1b       	sub	r20, r22
    8916:	01 e0       	ldi	r16, 0x01	; 1
    8918:	27 2d       	mov	r18, r7
    891a:	64 e6       	ldi	r22, 0x64	; 100
    891c:	86 e9       	ldi	r24, 0x96	; 150
    891e:	0e 94 86 3a 	call	0x750c	; 0x750c <task_twi2_lcd_line>
    8922:	6a 85       	ldd	r22, Y+10	; 0x0a
    8924:	7b 85       	ldd	r23, Y+11	; 0x0b
    8926:	8c 85       	ldd	r24, Y+12	; 0x0c
    8928:	9d 85       	ldd	r25, Y+13	; 0x0d
    892a:	0e 94 fa 81 	call	0x103f4	; 0x103f4 <cos>
    892e:	6a 83       	std	Y+2, r22	; 0x02
    8930:	7b 83       	std	Y+3, r23	; 0x03
    8932:	8c 83       	std	Y+4, r24	; 0x04
    8934:	9d 83       	std	Y+5, r25	; 0x05
    8936:	6a 85       	ldd	r22, Y+10	; 0x0a
    8938:	7b 85       	ldd	r23, Y+11	; 0x0b
    893a:	8c 85       	ldd	r24, Y+12	; 0x0c
    893c:	9d 85       	ldd	r25, Y+13	; 0x0d
    893e:	0e 94 34 84 	call	0x10868	; 0x10868 <sin>
    8942:	4b 01       	movw	r8, r22
    8944:	5c 01       	movw	r10, r24
    8946:	20 e0       	ldi	r18, 0x00	; 0
    8948:	30 e0       	ldi	r19, 0x00	; 0
    894a:	40 e4       	ldi	r20, 0x40	; 64
    894c:	51 e4       	ldi	r21, 0x41	; 65
    894e:	6a 81       	ldd	r22, Y+2	; 0x02
    8950:	7b 81       	ldd	r23, Y+3	; 0x03
    8952:	8c 81       	ldd	r24, Y+4	; 0x04
    8954:	9d 81       	ldd	r25, Y+5	; 0x05
    8956:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    895a:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    895e:	71 2e       	mov	r7, r17
    8960:	76 1a       	sub	r7, r22
    8962:	20 e0       	ldi	r18, 0x00	; 0
    8964:	30 e0       	ldi	r19, 0x00	; 0
    8966:	40 e4       	ldi	r20, 0x40	; 64
    8968:	51 e4       	ldi	r21, 0x41	; 65
    896a:	c5 01       	movw	r24, r10
    896c:	b4 01       	movw	r22, r8
    896e:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    8972:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    8976:	44 eb       	ldi	r20, 0xB4	; 180
    8978:	46 0f       	add	r20, r22
    897a:	27 2d       	mov	r18, r7
    897c:	64 e6       	ldi	r22, 0x64	; 100
    897e:	84 eb       	ldi	r24, 0xB4	; 180
    8980:	0e 94 86 3a 	call	0x750c	; 0x750c <task_twi2_lcd_line>
    8984:	6e 85       	ldd	r22, Y+14	; 0x0e
    8986:	7f 85       	ldd	r23, Y+15	; 0x0f
    8988:	88 89       	ldd	r24, Y+16	; 0x10
    898a:	99 89       	ldd	r25, Y+17	; 0x11
    898c:	0e 94 fa 81 	call	0x103f4	; 0x103f4 <cos>
    8990:	6a 83       	std	Y+2, r22	; 0x02
    8992:	7b 83       	std	Y+3, r23	; 0x03
    8994:	8c 83       	std	Y+4, r24	; 0x04
    8996:	9d 83       	std	Y+5, r25	; 0x05
    8998:	6e 85       	ldd	r22, Y+14	; 0x0e
    899a:	7f 85       	ldd	r23, Y+15	; 0x0f
    899c:	88 89       	ldd	r24, Y+16	; 0x10
    899e:	99 89       	ldd	r25, Y+17	; 0x11
    89a0:	0e 94 34 84 	call	0x10868	; 0x10868 <sin>
    89a4:	4b 01       	movw	r8, r22
    89a6:	5c 01       	movw	r10, r24
    89a8:	20 e0       	ldi	r18, 0x00	; 0
    89aa:	30 e0       	ldi	r19, 0x00	; 0
    89ac:	40 e4       	ldi	r20, 0x40	; 64
    89ae:	51 e4       	ldi	r21, 0x41	; 65
    89b0:	6a 81       	ldd	r22, Y+2	; 0x02
    89b2:	7b 81       	ldd	r23, Y+3	; 0x03
    89b4:	8c 81       	ldd	r24, Y+4	; 0x04
    89b6:	9d 81       	ldd	r25, Y+5	; 0x05
    89b8:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    89bc:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    89c0:	71 2e       	mov	r7, r17
    89c2:	76 1a       	sub	r7, r22
    89c4:	20 e0       	ldi	r18, 0x00	; 0
    89c6:	30 e0       	ldi	r19, 0x00	; 0
    89c8:	40 e4       	ldi	r20, 0x40	; 64
    89ca:	51 e4       	ldi	r21, 0x41	; 65
    89cc:	c5 01       	movw	r24, r10
    89ce:	b4 01       	movw	r22, r8
    89d0:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    89d4:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    89d8:	46 2d       	mov	r20, r6
    89da:	46 1b       	sub	r20, r22
    89dc:	27 2d       	mov	r18, r7
    89de:	64 e6       	ldi	r22, 0x64	; 100
    89e0:	82 ed       	ldi	r24, 0xD2	; 210
    89e2:	0e 94 86 3a 	call	0x750c	; 0x750c <task_twi2_lcd_line>
    89e6:	2e 81       	ldd	r18, Y+6	; 0x06
    89e8:	3f 81       	ldd	r19, Y+7	; 0x07
    89ea:	48 85       	ldd	r20, Y+8	; 0x08
    89ec:	59 85       	ldd	r21, Y+9	; 0x09
    89ee:	20 93 c3 22 	sts	0x22C3, r18	; 0x8022c3 <s_rads_x.8284>
    89f2:	30 93 c4 22 	sts	0x22C4, r19	; 0x8022c4 <s_rads_x.8284+0x1>
    89f6:	40 93 c5 22 	sts	0x22C5, r20	; 0x8022c5 <s_rads_x.8284+0x2>
    89fa:	50 93 c6 22 	sts	0x22C6, r21	; 0x8022c6 <s_rads_x.8284+0x3>
    89fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    8a00:	9b 85       	ldd	r25, Y+11	; 0x0b
    8a02:	ac 85       	ldd	r26, Y+12	; 0x0c
    8a04:	bd 85       	ldd	r27, Y+13	; 0x0d
    8a06:	80 93 bf 22 	sts	0x22BF, r24	; 0x8022bf <s_rads_y.8285>
    8a0a:	90 93 c0 22 	sts	0x22C0, r25	; 0x8022c0 <s_rads_y.8285+0x1>
    8a0e:	a0 93 c1 22 	sts	0x22C1, r26	; 0x8022c1 <s_rads_y.8285+0x2>
    8a12:	b0 93 c2 22 	sts	0x22C2, r27	; 0x8022c2 <s_rads_y.8285+0x3>
    8a16:	2e 85       	ldd	r18, Y+14	; 0x0e
    8a18:	3f 85       	ldd	r19, Y+15	; 0x0f
    8a1a:	48 89       	ldd	r20, Y+16	; 0x10
    8a1c:	59 89       	ldd	r21, Y+17	; 0x11
    8a1e:	20 93 bb 22 	sts	0x22BB, r18	; 0x8022bb <s_rads_z.8286>
    8a22:	30 93 bc 22 	sts	0x22BC, r19	; 0x8022bc <s_rads_z.8286+0x1>
    8a26:	40 93 bd 22 	sts	0x22BD, r20	; 0x8022bd <s_rads_z.8286+0x2>
    8a2a:	50 93 be 22 	sts	0x22BE, r21	; 0x8022be <s_rads_z.8286+0x3>
    8a2e:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <g_pitch_tone_mode>
    8a32:	81 30       	cpi	r24, 0x01	; 1
    8a34:	81 f5       	brne	.+96     	; 0x8a96 <task_twi2_lcd__gyro_gfxgyro+0x496>
    8a36:	d2 01       	movw	r26, r4
    8a38:	c1 01       	movw	r24, r2
    8a3a:	8c 0d       	add	r24, r12
    8a3c:	9d 1d       	adc	r25, r13
    8a3e:	ae 1d       	adc	r26, r14
    8a40:	bf 1d       	adc	r27, r15
    8a42:	2a 89       	ldd	r18, Y+18	; 0x12
    8a44:	3b 89       	ldd	r19, Y+19	; 0x13
    8a46:	4c 89       	ldd	r20, Y+20	; 0x14
    8a48:	5d 89       	ldd	r21, Y+21	; 0x15
    8a4a:	82 0f       	add	r24, r18
    8a4c:	93 1f       	adc	r25, r19
    8a4e:	a4 1f       	adc	r26, r20
    8a50:	b5 1f       	adc	r27, r21
    8a52:	ac 01       	movw	r20, r24
    8a54:	bd 01       	movw	r22, r26
    8a56:	bb 23       	and	r27, r27
    8a58:	3c f4       	brge	.+14     	; 0x8a68 <task_twi2_lcd__gyro_gfxgyro+0x468>
    8a5a:	44 27       	eor	r20, r20
    8a5c:	55 27       	eor	r21, r21
    8a5e:	ba 01       	movw	r22, r20
    8a60:	48 1b       	sub	r20, r24
    8a62:	59 0b       	sbc	r21, r25
    8a64:	6a 0b       	sbc	r22, r26
    8a66:	7b 0b       	sbc	r23, r27
    8a68:	cb 01       	movw	r24, r22
    8a6a:	ba 01       	movw	r22, r20
    8a6c:	61 39       	cpi	r22, 0x91	; 145
    8a6e:	31 e0       	ldi	r19, 0x01	; 1
    8a70:	73 07       	cpc	r23, r19
    8a72:	81 05       	cpc	r24, r1
    8a74:	91 05       	cpc	r25, r1
    8a76:	7c f0       	brlt	.+30     	; 0x8a96 <task_twi2_lcd__gyro_gfxgyro+0x496>
    8a78:	2c eb       	ldi	r18, 0xBC	; 188
    8a7a:	32 e0       	ldi	r19, 0x02	; 2
    8a7c:	40 e0       	ldi	r20, 0x00	; 0
    8a7e:	50 e0       	ldi	r21, 0x00	; 0
    8a80:	0e 94 bc 85 	call	0x10b78	; 0x10b78 <__divmodsi4>
    8a84:	6a e0       	ldi	r22, 0x0A	; 10
    8a86:	82 e1       	ldi	r24, 0x12	; 18
    8a88:	82 0f       	add	r24, r18
    8a8a:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <twi2_set_beep>
    8a8e:	8d e7       	ldi	r24, 0x7D	; 125
    8a90:	90 e0       	ldi	r25, 0x00	; 0
    8a92:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    8a96:	65 96       	adiw	r28, 0x15	; 21
    8a98:	cd bf       	out	0x3d, r28	; 61
    8a9a:	de bf       	out	0x3e, r29	; 62
    8a9c:	df 91       	pop	r29
    8a9e:	cf 91       	pop	r28
    8aa0:	1f 91       	pop	r17
    8aa2:	0f 91       	pop	r16
    8aa4:	ff 90       	pop	r15
    8aa6:	ef 90       	pop	r14
    8aa8:	df 90       	pop	r13
    8aaa:	cf 90       	pop	r12
    8aac:	bf 90       	pop	r11
    8aae:	af 90       	pop	r10
    8ab0:	9f 90       	pop	r9
    8ab2:	8f 90       	pop	r8
    8ab4:	7f 90       	pop	r7
    8ab6:	6f 90       	pop	r6
    8ab8:	5f 90       	pop	r5
    8aba:	4f 90       	pop	r4
    8abc:	3f 90       	pop	r3
    8abe:	2f 90       	pop	r2
    8ac0:	08 95       	ret

00008ac2 <task_twi2_lcd__gyro_beepvario>:
    8ac2:	cf 92       	push	r12
    8ac4:	df 92       	push	r13
    8ac6:	ef 92       	push	r14
    8ac8:	ff 92       	push	r15
    8aca:	cf 93       	push	r28
    8acc:	df 93       	push	r29
    8ace:	1f 92       	push	r1
    8ad0:	cd b7       	in	r28, 0x3d	; 61
    8ad2:	de b7       	in	r29, 0x3e	; 62
    8ad4:	8f b7       	in	r24, 0x3f	; 63
    8ad6:	89 83       	std	Y+1, r24	; 0x01
    8ad8:	f8 94       	cli
    8ada:	89 81       	ldd	r24, Y+1	; 0x01
    8adc:	c0 90 f4 26 	lds	r12, 0x26F4	; 0x8026f4 <g_twi1_baro_p_100>
    8ae0:	d0 90 f5 26 	lds	r13, 0x26F5	; 0x8026f5 <g_twi1_baro_p_100+0x1>
    8ae4:	e0 90 f6 26 	lds	r14, 0x26F6	; 0x8026f6 <g_twi1_baro_p_100+0x2>
    8ae8:	f0 90 f7 26 	lds	r15, 0x26F7	; 0x8026f7 <g_twi1_baro_p_100+0x3>
    8aec:	8f bf       	out	0x3f, r24	; 63
    8aee:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <g_pitch_tone_mode>
    8af2:	82 30       	cpi	r24, 0x02	; 2
    8af4:	99 f5       	brne	.+102    	; 0x8b5c <task_twi2_lcd__gyro_beepvario+0x9a>
    8af6:	40 91 f4 26 	lds	r20, 0x26F4	; 0x8026f4 <g_twi1_baro_p_100>
    8afa:	50 91 f5 26 	lds	r21, 0x26F5	; 0x8026f5 <g_twi1_baro_p_100+0x1>
    8afe:	60 91 f6 26 	lds	r22, 0x26F6	; 0x8026f6 <g_twi1_baro_p_100+0x2>
    8b02:	70 91 f7 26 	lds	r23, 0x26F7	; 0x8026f7 <g_twi1_baro_p_100+0x3>
    8b06:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_twi1_baro_p_100.8301>
    8b0a:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <s_twi1_baro_p_100.8301+0x1>
    8b0e:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <s_twi1_baro_p_100.8301+0x2>
    8b12:	b0 91 09 20 	lds	r27, 0x2009	; 0x802009 <s_twi1_baro_p_100.8301+0x3>
    8b16:	84 1b       	sub	r24, r20
    8b18:	95 0b       	sbc	r25, r21
    8b1a:	a6 0b       	sbc	r26, r22
    8b1c:	b7 0b       	sbc	r27, r23
    8b1e:	8c 59       	subi	r24, 0x9C	; 156
    8b20:	9f 4f       	sbci	r25, 0xFF	; 255
    8b22:	af 4f       	sbci	r26, 0xFF	; 255
    8b24:	bf 4f       	sbci	r27, 0xFF	; 255
    8b26:	8a 30       	cpi	r24, 0x0A	; 10
    8b28:	91 05       	cpc	r25, r1
    8b2a:	a1 05       	cpc	r26, r1
    8b2c:	b1 05       	cpc	r27, r1
    8b2e:	58 f0       	brcs	.+22     	; 0x8b46 <task_twi2_lcd__gyro_beepvario+0x84>
    8b30:	8f 3f       	cpi	r24, 0xFF	; 255
    8b32:	91 05       	cpc	r25, r1
    8b34:	a1 05       	cpc	r26, r1
    8b36:	b1 05       	cpc	r27, r1
    8b38:	51 f0       	breq	.+20     	; 0x8b4e <task_twi2_lcd__gyro_beepvario+0x8c>
    8b3a:	48 f0       	brcs	.+18     	; 0x8b4e <task_twi2_lcd__gyro_beepvario+0x8c>
    8b3c:	8f ef       	ldi	r24, 0xFF	; 255
    8b3e:	90 e0       	ldi	r25, 0x00	; 0
    8b40:	a0 e0       	ldi	r26, 0x00	; 0
    8b42:	b0 e0       	ldi	r27, 0x00	; 0
    8b44:	04 c0       	rjmp	.+8      	; 0x8b4e <task_twi2_lcd__gyro_beepvario+0x8c>
    8b46:	8a e0       	ldi	r24, 0x0A	; 10
    8b48:	90 e0       	ldi	r25, 0x00	; 0
    8b4a:	a0 e0       	ldi	r26, 0x00	; 0
    8b4c:	b0 e0       	ldi	r27, 0x00	; 0
    8b4e:	6a e0       	ldi	r22, 0x0A	; 10
    8b50:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <twi2_set_beep>
    8b54:	8d e7       	ldi	r24, 0x7D	; 125
    8b56:	90 e0       	ldi	r25, 0x00	; 0
    8b58:	0e 94 58 6f 	call	0xdeb0	; 0xdeb0 <yield_ms>
    8b5c:	c0 92 06 20 	sts	0x2006, r12	; 0x802006 <s_twi1_baro_p_100.8301>
    8b60:	d0 92 07 20 	sts	0x2007, r13	; 0x802007 <s_twi1_baro_p_100.8301+0x1>
    8b64:	e0 92 08 20 	sts	0x2008, r14	; 0x802008 <s_twi1_baro_p_100.8301+0x2>
    8b68:	f0 92 09 20 	sts	0x2009, r15	; 0x802009 <s_twi1_baro_p_100.8301+0x3>
    8b6c:	0f 90       	pop	r0
    8b6e:	df 91       	pop	r29
    8b70:	cf 91       	pop	r28
    8b72:	ff 90       	pop	r15
    8b74:	ef 90       	pop	r14
    8b76:	df 90       	pop	r13
    8b78:	cf 90       	pop	r12
    8b7a:	08 95       	ret

00008b7c <task_twi2_lcd__baro>:
    8b7c:	bf 92       	push	r11
    8b7e:	cf 92       	push	r12
    8b80:	df 92       	push	r13
    8b82:	ef 92       	push	r14
    8b84:	ff 92       	push	r15
    8b86:	0f 93       	push	r16
    8b88:	1f 93       	push	r17
    8b8a:	cf 93       	push	r28
    8b8c:	df 93       	push	r29
    8b8e:	1f 92       	push	r1
    8b90:	cd b7       	in	r28, 0x3d	; 61
    8b92:	de b7       	in	r29, 0x3e	; 62
    8b94:	b8 2e       	mov	r11, r24
    8b96:	8f b7       	in	r24, 0x3f	; 63
    8b98:	89 83       	std	Y+1, r24	; 0x01
    8b9a:	f8 94       	cli
    8b9c:	29 81       	ldd	r18, Y+1	; 0x01
    8b9e:	60 91 f8 26 	lds	r22, 0x26F8	; 0x8026f8 <g_twi1_baro_temp_100>
    8ba2:	70 91 f9 26 	lds	r23, 0x26F9	; 0x8026f9 <g_twi1_baro_temp_100+0x1>
    8ba6:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <g_twi1_baro_temp_100+0x2>
    8baa:	90 91 fb 26 	lds	r25, 0x26FB	; 0x8026fb <g_twi1_baro_temp_100+0x3>
    8bae:	c0 90 f4 26 	lds	r12, 0x26F4	; 0x8026f4 <g_twi1_baro_p_100>
    8bb2:	d0 90 f5 26 	lds	r13, 0x26F5	; 0x8026f5 <g_twi1_baro_p_100+0x1>
    8bb6:	e0 90 f6 26 	lds	r14, 0x26F6	; 0x8026f6 <g_twi1_baro_p_100+0x2>
    8bba:	f0 90 f7 26 	lds	r15, 0x26F7	; 0x8026f7 <g_twi1_baro_p_100+0x3>
    8bbe:	2f bf       	out	0x3f, r18	; 63
    8bc0:	00 91 b7 22 	lds	r16, 0x22B7	; 0x8022b7 <s_twi1_baro_temp_100.8312>
    8bc4:	10 91 b8 22 	lds	r17, 0x22B8	; 0x8022b8 <s_twi1_baro_temp_100.8312+0x1>
    8bc8:	20 91 b9 22 	lds	r18, 0x22B9	; 0x8022b9 <s_twi1_baro_temp_100.8312+0x2>
    8bcc:	30 91 ba 22 	lds	r19, 0x22BA	; 0x8022ba <s_twi1_baro_temp_100.8312+0x3>
    8bd0:	60 17       	cp	r22, r16
    8bd2:	71 07       	cpc	r23, r17
    8bd4:	82 07       	cpc	r24, r18
    8bd6:	93 07       	cpc	r25, r19
    8bd8:	c1 f0       	breq	.+48     	; 0x8c0a <task_twi2_lcd__baro+0x8e>
    8bda:	60 93 b7 22 	sts	0x22B7, r22	; 0x8022b7 <s_twi1_baro_temp_100.8312>
    8bde:	70 93 b8 22 	sts	0x22B8, r23	; 0x8022b8 <s_twi1_baro_temp_100.8312+0x1>
    8be2:	80 93 b9 22 	sts	0x22B9, r24	; 0x8022b9 <s_twi1_baro_temp_100.8312+0x2>
    8be6:	90 93 ba 22 	sts	0x22BA, r25	; 0x8022ba <s_twi1_baro_temp_100.8312+0x3>
    8bea:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    8bee:	20 e0       	ldi	r18, 0x00	; 0
    8bf0:	30 e0       	ldi	r19, 0x00	; 0
    8bf2:	48 ec       	ldi	r20, 0xC8	; 200
    8bf4:	52 e4       	ldi	r21, 0x42	; 66
    8bf6:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    8bfa:	9b 01       	movw	r18, r22
    8bfc:	ac 01       	movw	r20, r24
    8bfe:	01 e7       	ldi	r16, 0x71	; 113
    8c00:	11 e3       	ldi	r17, 0x31	; 49
    8c02:	6a e5       	ldi	r22, 0x5A	; 90
    8c04:	8b 2d       	mov	r24, r11
    8c06:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <task_twi2_lcd_print_format_float_P>
    8c0a:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <s_twi1_baro_p_100.8313>
    8c0e:	90 91 b4 22 	lds	r25, 0x22B4	; 0x8022b4 <s_twi1_baro_p_100.8313+0x1>
    8c12:	a0 91 b5 22 	lds	r26, 0x22B5	; 0x8022b5 <s_twi1_baro_p_100.8313+0x2>
    8c16:	b0 91 b6 22 	lds	r27, 0x22B6	; 0x8022b6 <s_twi1_baro_p_100.8313+0x3>
    8c1a:	c8 16       	cp	r12, r24
    8c1c:	d9 06       	cpc	r13, r25
    8c1e:	ea 06       	cpc	r14, r26
    8c20:	fb 06       	cpc	r15, r27
    8c22:	d1 f0       	breq	.+52     	; 0x8c58 <task_twi2_lcd__baro+0xdc>
    8c24:	c0 92 b3 22 	sts	0x22B3, r12	; 0x8022b3 <s_twi1_baro_p_100.8313>
    8c28:	d0 92 b4 22 	sts	0x22B4, r13	; 0x8022b4 <s_twi1_baro_p_100.8313+0x1>
    8c2c:	e0 92 b5 22 	sts	0x22B5, r14	; 0x8022b5 <s_twi1_baro_p_100.8313+0x2>
    8c30:	f0 92 b6 22 	sts	0x22B6, r15	; 0x8022b6 <s_twi1_baro_p_100.8313+0x3>
    8c34:	c7 01       	movw	r24, r14
    8c36:	b6 01       	movw	r22, r12
    8c38:	0e 94 98 82 	call	0x10530	; 0x10530 <__floatsisf>
    8c3c:	20 e0       	ldi	r18, 0x00	; 0
    8c3e:	30 e0       	ldi	r19, 0x00	; 0
    8c40:	48 ec       	ldi	r20, 0xC8	; 200
    8c42:	52 e4       	ldi	r21, 0x42	; 66
    8c44:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    8c48:	9b 01       	movw	r18, r22
    8c4a:	ac 01       	movw	r20, r24
    8c4c:	0a e6       	ldi	r16, 0x6A	; 106
    8c4e:	11 e3       	ldi	r17, 0x31	; 49
    8c50:	64 e6       	ldi	r22, 0x64	; 100
    8c52:	8b 2d       	mov	r24, r11
    8c54:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <task_twi2_lcd_print_format_float_P>
    8c58:	0f 90       	pop	r0
    8c5a:	df 91       	pop	r29
    8c5c:	cf 91       	pop	r28
    8c5e:	1f 91       	pop	r17
    8c60:	0f 91       	pop	r16
    8c62:	ff 90       	pop	r15
    8c64:	ef 90       	pop	r14
    8c66:	df 90       	pop	r13
    8c68:	cf 90       	pop	r12
    8c6a:	bf 90       	pop	r11
    8c6c:	08 95       	ret

00008c6e <task_twi>:
    8c6e:	cf 92       	push	r12
    8c70:	df 92       	push	r13
    8c72:	ef 92       	push	r14
    8c74:	0f 93       	push	r16
    8c76:	cf 93       	push	r28
    8c78:	df 93       	push	r29
    8c7a:	1f 92       	push	r1
    8c7c:	cd b7       	in	r28, 0x3d	; 61
    8c7e:	de b7       	in	r29, 0x3e	; 62
    8c80:	80 91 e9 26 	lds	r24, 0x26E9	; 0x8026e9 <g_twi2_lcd_version>
    8c84:	81 31       	cpi	r24, 0x11	; 17
    8c86:	08 f4       	brcc	.+2      	; 0x8c8a <task_twi+0x1c>
    8c88:	67 c1       	rjmp	.+718    	; 0x8f58 <task_twi+0x2ea>
    8c8a:	80 91 e8 26 	lds	r24, 0x26E8	; 0x8026e8 <g_twi2_lcd_repaint>
    8c8e:	88 23       	and	r24, r24
    8c90:	09 f4       	brne	.+2      	; 0x8c94 <task_twi+0x26>
    8c92:	b5 c0       	rjmp	.+362    	; 0x8dfe <task_twi+0x190>
    8c94:	10 92 e8 26 	sts	0x26E8, r1	; 0x8026e8 <g_twi2_lcd_repaint>
    8c98:	0e 94 04 3b 	call	0x7608	; 0x7608 <task_twi2_lcd_header>
    8c9c:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    8ca0:	88 23       	and	r24, r24
    8ca2:	21 f1       	breq	.+72     	; 0x8cec <task_twi+0x7e>
    8ca4:	48 e2       	ldi	r20, 0x28	; 40
    8ca6:	51 e2       	ldi	r21, 0x21	; 33
    8ca8:	64 e1       	ldi	r22, 0x14	; 20
    8caa:	80 e0       	ldi	r24, 0x00	; 0
    8cac:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8cb0:	42 e3       	ldi	r20, 0x32	; 50
    8cb2:	51 e2       	ldi	r21, 0x21	; 33
    8cb4:	6e e1       	ldi	r22, 0x1E	; 30
    8cb6:	82 e1       	ldi	r24, 0x12	; 18
    8cb8:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8cbc:	49 e3       	ldi	r20, 0x39	; 57
    8cbe:	51 e2       	ldi	r21, 0x21	; 33
    8cc0:	68 e2       	ldi	r22, 0x28	; 40
    8cc2:	82 e1       	ldi	r24, 0x12	; 18
    8cc4:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8cc8:	40 e4       	ldi	r20, 0x40	; 64
    8cca:	51 e2       	ldi	r21, 0x21	; 33
    8ccc:	62 e3       	ldi	r22, 0x32	; 50
    8cce:	80 e0       	ldi	r24, 0x00	; 0
    8cd0:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8cd4:	4a e4       	ldi	r20, 0x4A	; 74
    8cd6:	51 e2       	ldi	r21, 0x21	; 33
    8cd8:	6c e3       	ldi	r22, 0x3C	; 60
    8cda:	80 e0       	ldi	r24, 0x00	; 0
    8cdc:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8ce0:	44 e5       	ldi	r20, 0x54	; 84
    8ce2:	51 e2       	ldi	r21, 0x21	; 33
    8ce4:	66 e4       	ldi	r22, 0x46	; 70
    8ce6:	80 e0       	ldi	r24, 0x00	; 0
    8ce8:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8cec:	4e e5       	ldi	r20, 0x5E	; 94
    8cee:	51 e2       	ldi	r21, 0x21	; 33
    8cf0:	6a e5       	ldi	r22, 0x5A	; 90
    8cf2:	80 e0       	ldi	r24, 0x00	; 0
    8cf4:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8cf8:	48 e6       	ldi	r20, 0x68	; 104
    8cfa:	51 e2       	ldi	r21, 0x21	; 33
    8cfc:	64 e6       	ldi	r22, 0x64	; 100
    8cfe:	80 e0       	ldi	r24, 0x00	; 0
    8d00:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d04:	42 e7       	ldi	r20, 0x72	; 114
    8d06:	51 e2       	ldi	r21, 0x21	; 33
    8d08:	6e e6       	ldi	r22, 0x6E	; 110
    8d0a:	80 e0       	ldi	r24, 0x00	; 0
    8d0c:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d10:	4c e7       	ldi	r20, 0x7C	; 124
    8d12:	51 e2       	ldi	r21, 0x21	; 33
    8d14:	68 e7       	ldi	r22, 0x78	; 120
    8d16:	80 e0       	ldi	r24, 0x00	; 0
    8d18:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d1c:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    8d20:	88 23       	and	r24, r24
    8d22:	21 f1       	breq	.+72     	; 0x8d6c <task_twi+0xfe>
    8d24:	46 e8       	ldi	r20, 0x86	; 134
    8d26:	51 e2       	ldi	r21, 0x21	; 33
    8d28:	64 e1       	ldi	r22, 0x14	; 20
    8d2a:	80 e6       	ldi	r24, 0x60	; 96
    8d2c:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d30:	48 e8       	ldi	r20, 0x88	; 136
    8d32:	51 e2       	ldi	r21, 0x21	; 33
    8d34:	6e e1       	ldi	r22, 0x1E	; 30
    8d36:	80 e6       	ldi	r24, 0x60	; 96
    8d38:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d3c:	48 e8       	ldi	r20, 0x88	; 136
    8d3e:	51 e2       	ldi	r21, 0x21	; 33
    8d40:	68 e2       	ldi	r22, 0x28	; 40
    8d42:	80 e6       	ldi	r24, 0x60	; 96
    8d44:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d48:	48 e8       	ldi	r20, 0x88	; 136
    8d4a:	51 e2       	ldi	r21, 0x21	; 33
    8d4c:	62 e3       	ldi	r22, 0x32	; 50
    8d4e:	80 e6       	ldi	r24, 0x60	; 96
    8d50:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d54:	48 e8       	ldi	r20, 0x88	; 136
    8d56:	51 e2       	ldi	r21, 0x21	; 33
    8d58:	6c e3       	ldi	r22, 0x3C	; 60
    8d5a:	80 e6       	ldi	r24, 0x60	; 96
    8d5c:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d60:	48 e8       	ldi	r20, 0x88	; 136
    8d62:	51 e2       	ldi	r21, 0x21	; 33
    8d64:	66 e4       	ldi	r22, 0x46	; 70
    8d66:	80 e6       	ldi	r24, 0x60	; 96
    8d68:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d6c:	46 e8       	ldi	r20, 0x86	; 134
    8d6e:	51 e2       	ldi	r21, 0x21	; 33
    8d70:	6a e5       	ldi	r22, 0x5A	; 90
    8d72:	80 e6       	ldi	r24, 0x60	; 96
    8d74:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d78:	4a e8       	ldi	r20, 0x8A	; 138
    8d7a:	51 e2       	ldi	r21, 0x21	; 33
    8d7c:	64 e6       	ldi	r22, 0x64	; 100
    8d7e:	8c e6       	ldi	r24, 0x6C	; 108
    8d80:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d84:	46 e8       	ldi	r20, 0x86	; 134
    8d86:	51 e2       	ldi	r21, 0x21	; 33
    8d88:	6e e6       	ldi	r22, 0x6E	; 110
    8d8a:	80 e6       	ldi	r24, 0x60	; 96
    8d8c:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d90:	4e e8       	ldi	r20, 0x8E	; 142
    8d92:	51 e2       	ldi	r21, 0x21	; 33
    8d94:	68 e7       	ldi	r22, 0x78	; 120
    8d96:	80 e6       	ldi	r24, 0x60	; 96
    8d98:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8d9c:	01 e0       	ldi	r16, 0x01	; 1
    8d9e:	20 e0       	ldi	r18, 0x00	; 0
    8da0:	4e e0       	ldi	r20, 0x0E	; 14
    8da2:	64 e6       	ldi	r22, 0x64	; 100
    8da4:	86 e9       	ldi	r24, 0x96	; 150
    8da6:	0e 94 dc 3a 	call	0x75b8	; 0x75b8 <task_twi2_lcd_circ>
    8daa:	20 e0       	ldi	r18, 0x00	; 0
    8dac:	4e e0       	ldi	r20, 0x0E	; 14
    8dae:	64 e6       	ldi	r22, 0x64	; 100
    8db0:	84 eb       	ldi	r24, 0xB4	; 180
    8db2:	0e 94 dc 3a 	call	0x75b8	; 0x75b8 <task_twi2_lcd_circ>
    8db6:	20 e0       	ldi	r18, 0x00	; 0
    8db8:	4e e0       	ldi	r20, 0x0E	; 14
    8dba:	64 e6       	ldi	r22, 0x64	; 100
    8dbc:	82 ed       	ldi	r24, 0xD2	; 210
    8dbe:	0e 94 dc 3a 	call	0x75b8	; 0x75b8 <task_twi2_lcd_circ>
    8dc2:	40 e9       	ldi	r20, 0x90	; 144
    8dc4:	51 e2       	ldi	r21, 0x21	; 33
    8dc6:	66 e7       	ldi	r22, 0x76	; 118
    8dc8:	82 e9       	ldi	r24, 0x92	; 146
    8dca:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8dce:	43 e9       	ldi	r20, 0x93	; 147
    8dd0:	51 e2       	ldi	r21, 0x21	; 33
    8dd2:	66 e7       	ldi	r22, 0x76	; 118
    8dd4:	80 eb       	ldi	r24, 0xB0	; 176
    8dd6:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8dda:	46 e9       	ldi	r20, 0x96	; 150
    8ddc:	51 e2       	ldi	r21, 0x21	; 33
    8dde:	66 e7       	ldi	r22, 0x76	; 118
    8de0:	8e ec       	ldi	r24, 0xCE	; 206
    8de2:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8de6:	49 e9       	ldi	r20, 0x99	; 153
    8de8:	51 e2       	ldi	r21, 0x21	; 33
    8dea:	68 e4       	ldi	r22, 0x48	; 72
    8dec:	81 e7       	ldi	r24, 0x71	; 113
    8dee:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8df2:	43 ea       	ldi	r20, 0xA3	; 163
    8df4:	51 e2       	ldi	r21, 0x21	; 33
    8df6:	68 e4       	ldi	r22, 0x48	; 72
    8df8:	84 ec       	ldi	r24, 0xC4	; 196
    8dfa:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <task_twi2_lcd_str>
    8dfe:	0b d9       	rcall	.-3562   	; 0x8016 <task_twi2_lcd__gyro_gfxmag>
    8e00:	11 db       	rcall	.-2526   	; 0x8424 <task_twi2_lcd__gyro_gfxaccel>
    8e02:	fe db       	rcall	.-2052   	; 0x8600 <task_twi2_lcd__gyro_gfxgyro>
    8e04:	5e de       	rcall	.-836    	; 0x8ac2 <task_twi2_lcd__gyro_beepvario>
    8e06:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <g_1pps_last_new>
    8e0a:	88 23       	and	r24, r24
    8e0c:	09 f4       	brne	.+2      	; 0x8e10 <task_twi+0x1a2>
    8e0e:	5e c0       	rjmp	.+188    	; 0x8ecc <task_twi+0x25e>
    8e10:	8f b7       	in	r24, 0x3f	; 63
    8e12:	89 83       	std	Y+1, r24	; 0x01
    8e14:	f8 94       	cli
    8e16:	89 81       	ldd	r24, Y+1	; 0x01
    8e18:	c0 90 8e 28 	lds	r12, 0x288E	; 0x80288e <g_1pps_last_lo>
    8e1c:	d0 90 8f 28 	lds	r13, 0x288F	; 0x80288f <g_1pps_last_lo+0x1>
    8e20:	10 92 85 28 	sts	0x2885, r1	; 0x802885 <g_1pps_last_new>
    8e24:	8f bf       	out	0x3f, r24	; 63
    8e26:	81 e0       	ldi	r24, 0x01	; 1
    8e28:	0e 94 b9 34 	call	0x6972	; 0x6972 <twi2_set_leds>
    8e2c:	e1 2c       	mov	r14, r1
    8e2e:	01 e0       	ldi	r16, 0x01	; 1
    8e30:	23 e7       	ldi	r18, 0x73	; 115
    8e32:	44 e0       	ldi	r20, 0x04	; 4
    8e34:	6d e0       	ldi	r22, 0x0D	; 13
    8e36:	8c ee       	ldi	r24, 0xEC	; 236
    8e38:	0e 94 ae 3a 	call	0x755c	; 0x755c <task_twi2_lcd_rect>
    8e3c:	96 01       	movw	r18, r12
    8e3e:	a1 e7       	ldi	r26, 0x71	; 113
    8e40:	bf e1       	ldi	r27, 0x1F	; 31
    8e42:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <__umulhisi3>
    8e46:	28 1b       	sub	r18, r24
    8e48:	39 0b       	sbc	r19, r25
    8e4a:	36 95       	lsr	r19
    8e4c:	27 95       	ror	r18
    8e4e:	82 0f       	add	r24, r18
    8e50:	93 1f       	adc	r25, r19
    8e52:	96 95       	lsr	r25
    8e54:	87 95       	ror	r24
    8e56:	92 95       	swap	r25
    8e58:	82 95       	swap	r24
    8e5a:	8f 70       	andi	r24, 0x0F	; 15
    8e5c:	89 27       	eor	r24, r25
    8e5e:	9f 70       	andi	r25, 0x0F	; 15
    8e60:	89 27       	eor	r24, r25
    8e62:	49 e3       	ldi	r20, 0x39	; 57
    8e64:	48 9f       	mul	r20, r24
    8e66:	90 01       	movw	r18, r0
    8e68:	49 9f       	mul	r20, r25
    8e6a:	30 0d       	add	r19, r0
    8e6c:	11 24       	eor	r1, r1
    8e6e:	c6 01       	movw	r24, r12
    8e70:	82 1b       	sub	r24, r18
    8e72:	93 0b       	sbc	r25, r19
    8e74:	4c 97       	sbiw	r24, 0x1c	; 28
    8e76:	a8 f4       	brcc	.+42     	; 0x8ea2 <task_twi+0x234>
    8e78:	b6 01       	movw	r22, r12
    8e7a:	80 e0       	ldi	r24, 0x00	; 0
    8e7c:	90 e0       	ldi	r25, 0x00	; 0
    8e7e:	29 e3       	ldi	r18, 0x39	; 57
    8e80:	30 e0       	ldi	r19, 0x00	; 0
    8e82:	40 e0       	ldi	r20, 0x00	; 0
    8e84:	50 e0       	ldi	r21, 0x00	; 0
    8e86:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
    8e8a:	26 2f       	mov	r18, r22
    8e8c:	86 e4       	ldi	r24, 0x46	; 70
    8e8e:	68 2f       	mov	r22, r24
    8e90:	62 1b       	sub	r22, r18
    8e92:	ee 24       	eor	r14, r14
    8e94:	e3 94       	inc	r14
    8e96:	00 e0       	ldi	r16, 0x00	; 0
    8e98:	44 e0       	ldi	r20, 0x04	; 4
    8e9a:	8c ee       	ldi	r24, 0xEC	; 236
    8e9c:	0e 94 ae 3a 	call	0x755c	; 0x755c <task_twi2_lcd_rect>
    8ea0:	15 c0       	rjmp	.+42     	; 0x8ecc <task_twi+0x25e>
    8ea2:	60 e3       	ldi	r22, 0x30	; 48
    8ea4:	75 e7       	ldi	r23, 0x75	; 117
    8ea6:	6c 19       	sub	r22, r12
    8ea8:	7d 09       	sbc	r23, r13
    8eaa:	80 e0       	ldi	r24, 0x00	; 0
    8eac:	90 e0       	ldi	r25, 0x00	; 0
    8eae:	29 e3       	ldi	r18, 0x39	; 57
    8eb0:	30 e0       	ldi	r19, 0x00	; 0
    8eb2:	40 e0       	ldi	r20, 0x00	; 0
    8eb4:	50 e0       	ldi	r21, 0x00	; 0
    8eb6:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
    8eba:	26 2f       	mov	r18, r22
    8ebc:	ee 24       	eor	r14, r14
    8ebe:	e3 94       	inc	r14
    8ec0:	00 e0       	ldi	r16, 0x00	; 0
    8ec2:	44 e0       	ldi	r20, 0x04	; 4
    8ec4:	66 e4       	ldi	r22, 0x46	; 70
    8ec6:	8c ee       	ldi	r24, 0xEC	; 236
    8ec8:	0e 94 ae 3a 	call	0x755c	; 0x755c <task_twi2_lcd_rect>
    8ecc:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <s_lcd_entry_state.8320>
    8ed0:	82 30       	cpi	r24, 0x02	; 2
    8ed2:	29 f1       	breq	.+74     	; 0x8f1e <task_twi+0x2b0>
    8ed4:	28 f4       	brcc	.+10     	; 0x8ee0 <task_twi+0x272>
    8ed6:	88 23       	and	r24, r24
    8ed8:	41 f0       	breq	.+16     	; 0x8eea <task_twi+0x27c>
    8eda:	81 30       	cpi	r24, 0x01	; 1
    8edc:	99 f0       	breq	.+38     	; 0x8f04 <task_twi+0x296>
    8ede:	39 c0       	rjmp	.+114    	; 0x8f52 <task_twi+0x2e4>
    8ee0:	83 30       	cpi	r24, 0x03	; 3
    8ee2:	51 f1       	breq	.+84     	; 0x8f38 <task_twi+0x2ca>
    8ee4:	84 30       	cpi	r24, 0x04	; 4
    8ee6:	81 f1       	breq	.+96     	; 0x8f48 <task_twi+0x2da>
    8ee8:	34 c0       	rjmp	.+104    	; 0x8f52 <task_twi+0x2e4>
    8eea:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    8eee:	88 23       	and	r24, r24
    8ef0:	19 f0       	breq	.+6      	; 0x8ef8 <task_twi+0x28a>
    8ef2:	8c e3       	ldi	r24, 0x3C	; 60
    8ef4:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <task_twi2_lcd__cpu1>
    8ef8:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <s_lcd_entry_state.8320>
    8efc:	8f 5f       	subi	r24, 0xFF	; 255
    8efe:	80 93 b2 22 	sts	0x22B2, r24	; 0x8022b2 <s_lcd_entry_state.8320>
    8f02:	49 c0       	rjmp	.+146    	; 0x8f96 <task_twi+0x328>
    8f04:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    8f08:	88 23       	and	r24, r24
    8f0a:	19 f0       	breq	.+6      	; 0x8f12 <task_twi+0x2a4>
    8f0c:	8c e3       	ldi	r24, 0x3C	; 60
    8f0e:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <task_twi2_lcd__cpu2>
    8f12:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <s_lcd_entry_state.8320>
    8f16:	8f 5f       	subi	r24, 0xFF	; 255
    8f18:	80 93 b2 22 	sts	0x22B2, r24	; 0x8022b2 <s_lcd_entry_state.8320>
    8f1c:	3c c0       	rjmp	.+120    	; 0x8f96 <task_twi+0x328>
    8f1e:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    8f22:	88 23       	and	r24, r24
    8f24:	19 f0       	breq	.+6      	; 0x8f2c <task_twi+0x2be>
    8f26:	8c e3       	ldi	r24, 0x3C	; 60
    8f28:	0e 94 4e 3f 	call	0x7e9c	; 0x7e9c <task_twi2_lcd__cpu3>
    8f2c:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <s_lcd_entry_state.8320>
    8f30:	8f 5f       	subi	r24, 0xFF	; 255
    8f32:	80 93 b2 22 	sts	0x22B2, r24	; 0x8022b2 <s_lcd_entry_state.8320>
    8f36:	2f c0       	rjmp	.+94     	; 0x8f96 <task_twi+0x328>
    8f38:	8c e3       	ldi	r24, 0x3C	; 60
    8f3a:	20 de       	rcall	.-960    	; 0x8b7c <task_twi2_lcd__baro>
    8f3c:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <s_lcd_entry_state.8320>
    8f40:	8f 5f       	subi	r24, 0xFF	; 255
    8f42:	80 93 b2 22 	sts	0x22B2, r24	; 0x8022b2 <s_lcd_entry_state.8320>
    8f46:	27 c0       	rjmp	.+78     	; 0x8f96 <task_twi+0x328>
    8f48:	8c e3       	ldi	r24, 0x3C	; 60
    8f4a:	06 d8       	rcall	.-4084   	; 0x7f58 <task_twi2_lcd__hygro>
    8f4c:	10 92 b2 22 	sts	0x22B2, r1	; 0x8022b2 <s_lcd_entry_state.8320>
    8f50:	22 c0       	rjmp	.+68     	; 0x8f96 <task_twi+0x328>
    8f52:	10 92 b2 22 	sts	0x22B2, r1	; 0x8022b2 <s_lcd_entry_state.8320>
    8f56:	1f c0       	rjmp	.+62     	; 0x8f96 <task_twi+0x328>
    8f58:	80 31       	cpi	r24, 0x10	; 16
    8f5a:	e9 f4       	brne	.+58     	; 0x8f96 <task_twi+0x328>
    8f5c:	0e 94 70 34 	call	0x68e0	; 0x68e0 <twi2_waitUntilReady>
    8f60:	e7 e1       	ldi	r30, 0x17	; 23
    8f62:	f0 e2       	ldi	r31, 0x20	; 32
    8f64:	84 e8       	ldi	r24, 0x84	; 132
    8f66:	81 83       	std	Z+1, r24	; 0x01
    8f68:	ab e0       	ldi	r26, 0x0B	; 11
    8f6a:	b5 e2       	ldi	r27, 0x25	; 37
    8f6c:	81 e0       	ldi	r24, 0x01	; 1
    8f6e:	8c 93       	st	X, r24
    8f70:	80 e8       	ldi	r24, 0x80	; 128
    8f72:	11 96       	adiw	r26, 0x01	; 1
    8f74:	8c 93       	st	X, r24
    8f76:	82 e0       	ldi	r24, 0x02	; 2
    8f78:	90 e0       	ldi	r25, 0x00	; 0
    8f7a:	80 87       	std	Z+8, r24	; 0x08
    8f7c:	91 87       	std	Z+9, r25	; 0x09
    8f7e:	40 e0       	ldi	r20, 0x00	; 0
    8f80:	bf 01       	movw	r22, r30
    8f82:	80 e8       	ldi	r24, 0x80	; 128
    8f84:	94 e0       	ldi	r25, 0x04	; 4
    8f86:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <twi_master_transfer>
    8f8a:	69 e8       	ldi	r22, 0x89	; 137
    8f8c:	73 e1       	ldi	r23, 0x13	; 19
    8f8e:	80 e0       	ldi	r24, 0x00	; 0
    8f90:	90 e0       	ldi	r25, 0x00	; 0
    8f92:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__portable_avr_delay_cycles>
    8f96:	80 e0       	ldi	r24, 0x00	; 0
    8f98:	0e 94 b9 34 	call	0x6972	; 0x6972 <twi2_set_leds>
    8f9c:	0f 90       	pop	r0
    8f9e:	df 91       	pop	r29
    8fa0:	cf 91       	pop	r28
    8fa2:	0f 91       	pop	r16
    8fa4:	ef 90       	pop	r14
    8fa6:	df 90       	pop	r13
    8fa8:	cf 90       	pop	r12
    8faa:	08 95       	ret

00008fac <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    8fac:	08 95       	ret

00008fae <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    8fae:	cf 93       	push	r28
    8fb0:	df 93       	push	r29
    8fb2:	1f 92       	push	r1
    8fb4:	cd b7       	in	r28, 0x3d	; 61
    8fb6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8fb8:	2f b7       	in	r18, 0x3f	; 63
    8fba:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    8fbc:	f8 94       	cli
	return flags;
    8fbe:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    8fc0:	28 2f       	mov	r18, r24
    8fc2:	39 2f       	mov	r19, r25
    8fc4:	21 15       	cp	r18, r1
    8fc6:	82 e0       	ldi	r24, 0x02	; 2
    8fc8:	38 07       	cpc	r19, r24
    8fca:	29 f4       	brne	.+10     	; 0x8fd6 <adc_set_callback+0x28>
		adca_callback = callback;
    8fcc:	60 93 e3 2d 	sts	0x2DE3, r22	; 0x802de3 <adca_callback>
    8fd0:	70 93 e4 2d 	sts	0x2DE4, r23	; 0x802de4 <adca_callback+0x1>
    8fd4:	07 c0       	rjmp	.+14     	; 0x8fe4 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    8fd6:	20 34       	cpi	r18, 0x40	; 64
    8fd8:	32 40       	sbci	r19, 0x02	; 2
    8fda:	21 f4       	brne	.+8      	; 0x8fe4 <adc_set_callback+0x36>
		adcb_callback = callback;
    8fdc:	60 93 e1 2d 	sts	0x2DE1, r22	; 0x802de1 <adcb_callback>
    8fe0:	70 93 e2 2d 	sts	0x2DE2, r23	; 0x802de2 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8fe4:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    8fe6:	0f 90       	pop	r0
    8fe8:	df 91       	pop	r29
    8fea:	cf 91       	pop	r28
    8fec:	08 95       	ret

00008fee <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    8fee:	81 15       	cp	r24, r1
    8ff0:	22 e0       	ldi	r18, 0x02	; 2
    8ff2:	92 07       	cpc	r25, r18
    8ff4:	69 f4       	brne	.+26     	; 0x9010 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    8ff6:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <adca_enable_count>
    8ffa:	91 e0       	ldi	r25, 0x01	; 1
    8ffc:	98 0f       	add	r25, r24
    8ffe:	90 93 0e 23 	sts	0x230E, r25	; 0x80230e <adca_enable_count>
    9002:	81 11       	cpse	r24, r1
    9004:	14 c0       	rjmp	.+40     	; 0x902e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    9006:	62 e0       	ldi	r22, 0x02	; 2
    9008:	81 e0       	ldi	r24, 0x01	; 1
    900a:	0c 94 dc 72 	jmp	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    900e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    9010:	80 34       	cpi	r24, 0x40	; 64
    9012:	92 40       	sbci	r25, 0x02	; 2
    9014:	61 f4       	brne	.+24     	; 0x902e <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    9016:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <adcb_enable_count>
    901a:	91 e0       	ldi	r25, 0x01	; 1
    901c:	98 0f       	add	r25, r24
    901e:	90 93 0d 23 	sts	0x230D, r25	; 0x80230d <adcb_enable_count>
    9022:	81 11       	cpse	r24, r1
    9024:	04 c0       	rjmp	.+8      	; 0x902e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    9026:	62 e0       	ldi	r22, 0x02	; 2
    9028:	82 e0       	ldi	r24, 0x02	; 2
    902a:	0c 94 dc 72 	jmp	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    902e:	08 95       	ret

00009030 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    9030:	81 15       	cp	r24, r1
    9032:	22 e0       	ldi	r18, 0x02	; 2
    9034:	92 07       	cpc	r25, r18
    9036:	61 f4       	brne	.+24     	; 0x9050 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    9038:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <adca_enable_count>
    903c:	81 50       	subi	r24, 0x01	; 1
    903e:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <adca_enable_count>
    9042:	81 11       	cpse	r24, r1
    9044:	13 c0       	rjmp	.+38     	; 0x906c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    9046:	62 e0       	ldi	r22, 0x02	; 2
    9048:	81 e0       	ldi	r24, 0x01	; 1
    904a:	0c 94 f2 72 	jmp	0xe5e4	; 0xe5e4 <sysclk_disable_module>
    904e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    9050:	80 34       	cpi	r24, 0x40	; 64
    9052:	92 40       	sbci	r25, 0x02	; 2
    9054:	59 f4       	brne	.+22     	; 0x906c <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    9056:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <adcb_enable_count>
    905a:	81 50       	subi	r24, 0x01	; 1
    905c:	80 93 0d 23 	sts	0x230D, r24	; 0x80230d <adcb_enable_count>
    9060:	81 11       	cpse	r24, r1
    9062:	04 c0       	rjmp	.+8      	; 0x906c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    9064:	62 e0       	ldi	r22, 0x02	; 2
    9066:	82 e0       	ldi	r24, 0x02	; 2
    9068:	0c 94 f2 72 	jmp	0xe5e4	; 0xe5e4 <sysclk_disable_module>
    906c:	08 95       	ret

0000906e <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    906e:	ef 92       	push	r14
    9070:	ff 92       	push	r15
    9072:	1f 93       	push	r17
    9074:	cf 93       	push	r28
    9076:	df 93       	push	r29
    9078:	1f 92       	push	r1
    907a:	1f 92       	push	r1
    907c:	cd b7       	in	r28, 0x3d	; 61
    907e:	de b7       	in	r29, 0x3e	; 62
    9080:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9082:	8f b7       	in	r24, 0x3f	; 63
    9084:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9086:	f8 94       	cli
	return flags;
    9088:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    908a:	c7 01       	movw	r24, r14
    908c:	b0 df       	rcall	.-160    	; 0x8fee <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    908e:	f7 01       	movw	r30, r14
    9090:	80 81       	ld	r24, Z
    9092:	81 60       	ori	r24, 0x01	; 1
    9094:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9096:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    9098:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    909c:	8f 3f       	cpi	r24, 0xFF	; 255
    909e:	09 f4       	brne	.+2      	; 0x90a2 <adc_enable+0x34>
    90a0:	ff cf       	rjmp	.-2      	; 0x90a0 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    90a2:	8f b7       	in	r24, 0x3f	; 63
    90a4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    90a6:	f8 94       	cli
	return flags;
    90a8:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    90aa:	eb e7       	ldi	r30, 0x7B	; 123
    90ac:	fe e2       	ldi	r31, 0x2E	; 46
    90ae:	81 81       	ldd	r24, Z+1	; 0x01
    90b0:	8f 5f       	subi	r24, 0xFF	; 255
    90b2:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    90b4:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    90b6:	0f 90       	pop	r0
    90b8:	0f 90       	pop	r0
    90ba:	df 91       	pop	r29
    90bc:	cf 91       	pop	r28
    90be:	1f 91       	pop	r17
    90c0:	ff 90       	pop	r15
    90c2:	ef 90       	pop	r14
    90c4:	08 95       	ret

000090c6 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    90c6:	1f 93       	push	r17
    90c8:	cf 93       	push	r28
    90ca:	df 93       	push	r29
    90cc:	1f 92       	push	r1
    90ce:	1f 92       	push	r1
    90d0:	cd b7       	in	r28, 0x3d	; 61
    90d2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    90d4:	2f b7       	in	r18, 0x3f	; 63
    90d6:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    90d8:	f8 94       	cli
	return flags;
    90da:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    90dc:	fc 01       	movw	r30, r24
    90de:	20 81       	ld	r18, Z
    90e0:	2e 7f       	andi	r18, 0xFE	; 254
	adc_disable_clock(adc);
    90e2:	20 83       	st	Z, r18
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    90e4:	a5 df       	rcall	.-182    	; 0x9030 <adc_disable_clock>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    90e6:	1f bf       	out	0x3f, r17	; 63
    90e8:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    90ec:	81 11       	cpse	r24, r1
    90ee:	01 c0       	rjmp	.+2      	; 0x90f2 <adc_disable+0x2c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    90f0:	ff cf       	rjmp	.-2      	; 0x90f0 <adc_disable+0x2a>
    90f2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    90f4:	8a 83       	std	Y+2, r24	; 0x02
	return flags;
    90f6:	f8 94       	cli
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    90f8:	9a 81       	ldd	r25, Y+2	; 0x02
    90fa:	eb e7       	ldi	r30, 0x7B	; 123
    90fc:	fe e2       	ldi	r31, 0x2E	; 46
    90fe:	81 81       	ldd	r24, Z+1	; 0x01
    9100:	81 50       	subi	r24, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9102:	81 83       	std	Z+1, r24	; 0x01
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    9104:	9f bf       	out	0x3f, r25	; 63
    9106:	0f 90       	pop	r0
    9108:	0f 90       	pop	r0
    910a:	df 91       	pop	r29
    910c:	cf 91       	pop	r28
    910e:	1f 91       	pop	r17
    9110:	08 95       	ret

00009112 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    9112:	1f 92       	push	r1
    9114:	0f 92       	push	r0
    9116:	0f b6       	in	r0, 0x3f	; 63
    9118:	0f 92       	push	r0
    911a:	11 24       	eor	r1, r1
    911c:	0b b6       	in	r0, 0x3b	; 59
    911e:	0f 92       	push	r0
    9120:	2f 93       	push	r18
    9122:	3f 93       	push	r19
    9124:	4f 93       	push	r20
    9126:	5f 93       	push	r21
    9128:	6f 93       	push	r22
    912a:	7f 93       	push	r23
    912c:	8f 93       	push	r24
    912e:	9f 93       	push	r25
    9130:	af 93       	push	r26
    9132:	bf 93       	push	r27
    9134:	ef 93       	push	r30
    9136:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    9138:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    913c:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    9140:	e0 91 e3 2d 	lds	r30, 0x2DE3	; 0x802de3 <adca_callback>
    9144:	f0 91 e4 2d 	lds	r31, 0x2DE4	; 0x802de4 <adca_callback+0x1>
    9148:	61 e0       	ldi	r22, 0x01	; 1
    914a:	80 e0       	ldi	r24, 0x00	; 0
    914c:	92 e0       	ldi	r25, 0x02	; 2
    914e:	19 95       	eicall
}
    9150:	ff 91       	pop	r31
    9152:	ef 91       	pop	r30
    9154:	bf 91       	pop	r27
    9156:	af 91       	pop	r26
    9158:	9f 91       	pop	r25
    915a:	8f 91       	pop	r24
    915c:	7f 91       	pop	r23
    915e:	6f 91       	pop	r22
    9160:	5f 91       	pop	r21
    9162:	4f 91       	pop	r20
    9164:	3f 91       	pop	r19
    9166:	2f 91       	pop	r18
    9168:	0f 90       	pop	r0
    916a:	0b be       	out	0x3b, r0	; 59
    916c:	0f 90       	pop	r0
    916e:	0f be       	out	0x3f, r0	; 63
    9170:	0f 90       	pop	r0
    9172:	1f 90       	pop	r1
    9174:	18 95       	reti

00009176 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    9176:	1f 92       	push	r1
    9178:	0f 92       	push	r0
    917a:	0f b6       	in	r0, 0x3f	; 63
    917c:	0f 92       	push	r0
    917e:	11 24       	eor	r1, r1
    9180:	0b b6       	in	r0, 0x3b	; 59
    9182:	0f 92       	push	r0
    9184:	2f 93       	push	r18
    9186:	3f 93       	push	r19
    9188:	4f 93       	push	r20
    918a:	5f 93       	push	r21
    918c:	6f 93       	push	r22
    918e:	7f 93       	push	r23
    9190:	8f 93       	push	r24
    9192:	9f 93       	push	r25
    9194:	af 93       	push	r26
    9196:	bf 93       	push	r27
    9198:	ef 93       	push	r30
    919a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    919c:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    91a0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    91a4:	e0 91 e3 2d 	lds	r30, 0x2DE3	; 0x802de3 <adca_callback>
    91a8:	f0 91 e4 2d 	lds	r31, 0x2DE4	; 0x802de4 <adca_callback+0x1>
    91ac:	62 e0       	ldi	r22, 0x02	; 2
    91ae:	80 e0       	ldi	r24, 0x00	; 0
    91b0:	92 e0       	ldi	r25, 0x02	; 2
    91b2:	19 95       	eicall
}
    91b4:	ff 91       	pop	r31
    91b6:	ef 91       	pop	r30
    91b8:	bf 91       	pop	r27
    91ba:	af 91       	pop	r26
    91bc:	9f 91       	pop	r25
    91be:	8f 91       	pop	r24
    91c0:	7f 91       	pop	r23
    91c2:	6f 91       	pop	r22
    91c4:	5f 91       	pop	r21
    91c6:	4f 91       	pop	r20
    91c8:	3f 91       	pop	r19
    91ca:	2f 91       	pop	r18
    91cc:	0f 90       	pop	r0
    91ce:	0b be       	out	0x3b, r0	; 59
    91d0:	0f 90       	pop	r0
    91d2:	0f be       	out	0x3f, r0	; 63
    91d4:	0f 90       	pop	r0
    91d6:	1f 90       	pop	r1
    91d8:	18 95       	reti

000091da <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    91da:	1f 92       	push	r1
    91dc:	0f 92       	push	r0
    91de:	0f b6       	in	r0, 0x3f	; 63
    91e0:	0f 92       	push	r0
    91e2:	11 24       	eor	r1, r1
    91e4:	0b b6       	in	r0, 0x3b	; 59
    91e6:	0f 92       	push	r0
    91e8:	2f 93       	push	r18
    91ea:	3f 93       	push	r19
    91ec:	4f 93       	push	r20
    91ee:	5f 93       	push	r21
    91f0:	6f 93       	push	r22
    91f2:	7f 93       	push	r23
    91f4:	8f 93       	push	r24
    91f6:	9f 93       	push	r25
    91f8:	af 93       	push	r26
    91fa:	bf 93       	push	r27
    91fc:	ef 93       	push	r30
    91fe:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    9200:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    9204:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    9208:	e0 91 e3 2d 	lds	r30, 0x2DE3	; 0x802de3 <adca_callback>
    920c:	f0 91 e4 2d 	lds	r31, 0x2DE4	; 0x802de4 <adca_callback+0x1>
    9210:	64 e0       	ldi	r22, 0x04	; 4
    9212:	80 e0       	ldi	r24, 0x00	; 0
    9214:	92 e0       	ldi	r25, 0x02	; 2
    9216:	19 95       	eicall
}
    9218:	ff 91       	pop	r31
    921a:	ef 91       	pop	r30
    921c:	bf 91       	pop	r27
    921e:	af 91       	pop	r26
    9220:	9f 91       	pop	r25
    9222:	8f 91       	pop	r24
    9224:	7f 91       	pop	r23
    9226:	6f 91       	pop	r22
    9228:	5f 91       	pop	r21
    922a:	4f 91       	pop	r20
    922c:	3f 91       	pop	r19
    922e:	2f 91       	pop	r18
    9230:	0f 90       	pop	r0
    9232:	0b be       	out	0x3b, r0	; 59
    9234:	0f 90       	pop	r0
    9236:	0f be       	out	0x3f, r0	; 63
    9238:	0f 90       	pop	r0
    923a:	1f 90       	pop	r1
    923c:	18 95       	reti

0000923e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    923e:	1f 92       	push	r1
    9240:	0f 92       	push	r0
    9242:	0f b6       	in	r0, 0x3f	; 63
    9244:	0f 92       	push	r0
    9246:	11 24       	eor	r1, r1
    9248:	0b b6       	in	r0, 0x3b	; 59
    924a:	0f 92       	push	r0
    924c:	2f 93       	push	r18
    924e:	3f 93       	push	r19
    9250:	4f 93       	push	r20
    9252:	5f 93       	push	r21
    9254:	6f 93       	push	r22
    9256:	7f 93       	push	r23
    9258:	8f 93       	push	r24
    925a:	9f 93       	push	r25
    925c:	af 93       	push	r26
    925e:	bf 93       	push	r27
    9260:	ef 93       	push	r30
    9262:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    9264:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    9268:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    926c:	e0 91 e3 2d 	lds	r30, 0x2DE3	; 0x802de3 <adca_callback>
    9270:	f0 91 e4 2d 	lds	r31, 0x2DE4	; 0x802de4 <adca_callback+0x1>
    9274:	68 e0       	ldi	r22, 0x08	; 8
    9276:	80 e0       	ldi	r24, 0x00	; 0
    9278:	92 e0       	ldi	r25, 0x02	; 2
    927a:	19 95       	eicall
}
    927c:	ff 91       	pop	r31
    927e:	ef 91       	pop	r30
    9280:	bf 91       	pop	r27
    9282:	af 91       	pop	r26
    9284:	9f 91       	pop	r25
    9286:	8f 91       	pop	r24
    9288:	7f 91       	pop	r23
    928a:	6f 91       	pop	r22
    928c:	5f 91       	pop	r21
    928e:	4f 91       	pop	r20
    9290:	3f 91       	pop	r19
    9292:	2f 91       	pop	r18
    9294:	0f 90       	pop	r0
    9296:	0b be       	out	0x3b, r0	; 59
    9298:	0f 90       	pop	r0
    929a:	0f be       	out	0x3f, r0	; 63
    929c:	0f 90       	pop	r0
    929e:	1f 90       	pop	r1
    92a0:	18 95       	reti

000092a2 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    92a2:	1f 92       	push	r1
    92a4:	0f 92       	push	r0
    92a6:	0f b6       	in	r0, 0x3f	; 63
    92a8:	0f 92       	push	r0
    92aa:	11 24       	eor	r1, r1
    92ac:	0b b6       	in	r0, 0x3b	; 59
    92ae:	0f 92       	push	r0
    92b0:	2f 93       	push	r18
    92b2:	3f 93       	push	r19
    92b4:	4f 93       	push	r20
    92b6:	5f 93       	push	r21
    92b8:	6f 93       	push	r22
    92ba:	7f 93       	push	r23
    92bc:	8f 93       	push	r24
    92be:	9f 93       	push	r25
    92c0:	af 93       	push	r26
    92c2:	bf 93       	push	r27
    92c4:	ef 93       	push	r30
    92c6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    92c8:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    92cc:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    92d0:	e0 91 e1 2d 	lds	r30, 0x2DE1	; 0x802de1 <adcb_callback>
    92d4:	f0 91 e2 2d 	lds	r31, 0x2DE2	; 0x802de2 <adcb_callback+0x1>
    92d8:	61 e0       	ldi	r22, 0x01	; 1
    92da:	80 e4       	ldi	r24, 0x40	; 64
    92dc:	92 e0       	ldi	r25, 0x02	; 2
    92de:	19 95       	eicall
}
    92e0:	ff 91       	pop	r31
    92e2:	ef 91       	pop	r30
    92e4:	bf 91       	pop	r27
    92e6:	af 91       	pop	r26
    92e8:	9f 91       	pop	r25
    92ea:	8f 91       	pop	r24
    92ec:	7f 91       	pop	r23
    92ee:	6f 91       	pop	r22
    92f0:	5f 91       	pop	r21
    92f2:	4f 91       	pop	r20
    92f4:	3f 91       	pop	r19
    92f6:	2f 91       	pop	r18
    92f8:	0f 90       	pop	r0
    92fa:	0b be       	out	0x3b, r0	; 59
    92fc:	0f 90       	pop	r0
    92fe:	0f be       	out	0x3f, r0	; 63
    9300:	0f 90       	pop	r0
    9302:	1f 90       	pop	r1
    9304:	18 95       	reti

00009306 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    9306:	1f 92       	push	r1
    9308:	0f 92       	push	r0
    930a:	0f b6       	in	r0, 0x3f	; 63
    930c:	0f 92       	push	r0
    930e:	11 24       	eor	r1, r1
    9310:	0b b6       	in	r0, 0x3b	; 59
    9312:	0f 92       	push	r0
    9314:	2f 93       	push	r18
    9316:	3f 93       	push	r19
    9318:	4f 93       	push	r20
    931a:	5f 93       	push	r21
    931c:	6f 93       	push	r22
    931e:	7f 93       	push	r23
    9320:	8f 93       	push	r24
    9322:	9f 93       	push	r25
    9324:	af 93       	push	r26
    9326:	bf 93       	push	r27
    9328:	ef 93       	push	r30
    932a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    932c:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    9330:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    9334:	e0 91 e1 2d 	lds	r30, 0x2DE1	; 0x802de1 <adcb_callback>
    9338:	f0 91 e2 2d 	lds	r31, 0x2DE2	; 0x802de2 <adcb_callback+0x1>
    933c:	62 e0       	ldi	r22, 0x02	; 2
    933e:	80 e4       	ldi	r24, 0x40	; 64
    9340:	92 e0       	ldi	r25, 0x02	; 2
    9342:	19 95       	eicall
}
    9344:	ff 91       	pop	r31
    9346:	ef 91       	pop	r30
    9348:	bf 91       	pop	r27
    934a:	af 91       	pop	r26
    934c:	9f 91       	pop	r25
    934e:	8f 91       	pop	r24
    9350:	7f 91       	pop	r23
    9352:	6f 91       	pop	r22
    9354:	5f 91       	pop	r21
    9356:	4f 91       	pop	r20
    9358:	3f 91       	pop	r19
    935a:	2f 91       	pop	r18
    935c:	0f 90       	pop	r0
    935e:	0b be       	out	0x3b, r0	; 59
    9360:	0f 90       	pop	r0
    9362:	0f be       	out	0x3f, r0	; 63
    9364:	0f 90       	pop	r0
    9366:	1f 90       	pop	r1
    9368:	18 95       	reti

0000936a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    936a:	1f 92       	push	r1
    936c:	0f 92       	push	r0
    936e:	0f b6       	in	r0, 0x3f	; 63
    9370:	0f 92       	push	r0
    9372:	11 24       	eor	r1, r1
    9374:	0b b6       	in	r0, 0x3b	; 59
    9376:	0f 92       	push	r0
    9378:	2f 93       	push	r18
    937a:	3f 93       	push	r19
    937c:	4f 93       	push	r20
    937e:	5f 93       	push	r21
    9380:	6f 93       	push	r22
    9382:	7f 93       	push	r23
    9384:	8f 93       	push	r24
    9386:	9f 93       	push	r25
    9388:	af 93       	push	r26
    938a:	bf 93       	push	r27
    938c:	ef 93       	push	r30
    938e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    9390:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    9394:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    9398:	e0 91 e1 2d 	lds	r30, 0x2DE1	; 0x802de1 <adcb_callback>
    939c:	f0 91 e2 2d 	lds	r31, 0x2DE2	; 0x802de2 <adcb_callback+0x1>
    93a0:	64 e0       	ldi	r22, 0x04	; 4
    93a2:	80 e4       	ldi	r24, 0x40	; 64
    93a4:	92 e0       	ldi	r25, 0x02	; 2
    93a6:	19 95       	eicall
}
    93a8:	ff 91       	pop	r31
    93aa:	ef 91       	pop	r30
    93ac:	bf 91       	pop	r27
    93ae:	af 91       	pop	r26
    93b0:	9f 91       	pop	r25
    93b2:	8f 91       	pop	r24
    93b4:	7f 91       	pop	r23
    93b6:	6f 91       	pop	r22
    93b8:	5f 91       	pop	r21
    93ba:	4f 91       	pop	r20
    93bc:	3f 91       	pop	r19
    93be:	2f 91       	pop	r18
    93c0:	0f 90       	pop	r0
    93c2:	0b be       	out	0x3b, r0	; 59
    93c4:	0f 90       	pop	r0
    93c6:	0f be       	out	0x3f, r0	; 63
    93c8:	0f 90       	pop	r0
    93ca:	1f 90       	pop	r1
    93cc:	18 95       	reti

000093ce <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    93ce:	1f 92       	push	r1
    93d0:	0f 92       	push	r0
    93d2:	0f b6       	in	r0, 0x3f	; 63
    93d4:	0f 92       	push	r0
    93d6:	11 24       	eor	r1, r1
    93d8:	0b b6       	in	r0, 0x3b	; 59
    93da:	0f 92       	push	r0
    93dc:	2f 93       	push	r18
    93de:	3f 93       	push	r19
    93e0:	4f 93       	push	r20
    93e2:	5f 93       	push	r21
    93e4:	6f 93       	push	r22
    93e6:	7f 93       	push	r23
    93e8:	8f 93       	push	r24
    93ea:	9f 93       	push	r25
    93ec:	af 93       	push	r26
    93ee:	bf 93       	push	r27
    93f0:	ef 93       	push	r30
    93f2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    93f4:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    93f8:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    93fc:	e0 91 e1 2d 	lds	r30, 0x2DE1	; 0x802de1 <adcb_callback>
    9400:	f0 91 e2 2d 	lds	r31, 0x2DE2	; 0x802de2 <adcb_callback+0x1>
    9404:	68 e0       	ldi	r22, 0x08	; 8
    9406:	80 e4       	ldi	r24, 0x40	; 64
    9408:	92 e0       	ldi	r25, 0x02	; 2
    940a:	19 95       	eicall
}
    940c:	ff 91       	pop	r31
    940e:	ef 91       	pop	r30
    9410:	bf 91       	pop	r27
    9412:	af 91       	pop	r26
    9414:	9f 91       	pop	r25
    9416:	8f 91       	pop	r24
    9418:	7f 91       	pop	r23
    941a:	6f 91       	pop	r22
    941c:	5f 91       	pop	r21
    941e:	4f 91       	pop	r20
    9420:	3f 91       	pop	r19
    9422:	2f 91       	pop	r18
    9424:	0f 90       	pop	r0
    9426:	0b be       	out	0x3b, r0	; 59
    9428:	0f 90       	pop	r0
    942a:	0f be       	out	0x3f, r0	; 63
    942c:	0f 90       	pop	r0
    942e:	1f 90       	pop	r1
    9430:	18 95       	reti

00009432 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    9432:	bf 92       	push	r11
    9434:	cf 92       	push	r12
    9436:	df 92       	push	r13
    9438:	ef 92       	push	r14
    943a:	ff 92       	push	r15
    943c:	0f 93       	push	r16
    943e:	1f 93       	push	r17
    9440:	cf 93       	push	r28
    9442:	df 93       	push	r29
    9444:	1f 92       	push	r1
    9446:	cd b7       	in	r28, 0x3d	; 61
    9448:	de b7       	in	r29, 0x3e	; 62
    944a:	8c 01       	movw	r16, r24
    944c:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    944e:	81 15       	cp	r24, r1
    9450:	22 e0       	ldi	r18, 0x02	; 2
    9452:	92 07       	cpc	r25, r18
    9454:	81 f4       	brne	.+32     	; 0x9476 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    9456:	61 e2       	ldi	r22, 0x21	; 33
    9458:	70 e0       	ldi	r23, 0x00	; 0
    945a:	82 e0       	ldi	r24, 0x02	; 2
    945c:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    9460:	c8 2e       	mov	r12, r24
    9462:	d1 2c       	mov	r13, r1
    9464:	60 e2       	ldi	r22, 0x20	; 32
    9466:	70 e0       	ldi	r23, 0x00	; 0
    9468:	82 e0       	ldi	r24, 0x02	; 2
    946a:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    946e:	dc 2c       	mov	r13, r12
    9470:	cc 24       	eor	r12, r12
    9472:	c8 2a       	or	r12, r24
    9474:	12 c0       	rjmp	.+36     	; 0x949a <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    9476:	80 34       	cpi	r24, 0x40	; 64
    9478:	92 40       	sbci	r25, 0x02	; 2
    947a:	d1 f5       	brne	.+116    	; 0x94f0 <adc_write_configuration+0xbe>
    947c:	65 e2       	ldi	r22, 0x25	; 37
    947e:	70 e0       	ldi	r23, 0x00	; 0
    9480:	82 e0       	ldi	r24, 0x02	; 2
    9482:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    9486:	c8 2e       	mov	r12, r24
    9488:	d1 2c       	mov	r13, r1
    948a:	64 e2       	ldi	r22, 0x24	; 36
    948c:	70 e0       	ldi	r23, 0x00	; 0
    948e:	82 e0       	ldi	r24, 0x02	; 2
    9490:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    9494:	dc 2c       	mov	r13, r12
    9496:	cc 24       	eor	r12, r12
    9498:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    949a:	8f b7       	in	r24, 0x3f	; 63
    949c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    949e:	f8 94       	cli
	return flags;
    94a0:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    94a2:	c8 01       	movw	r24, r16
    94a4:	a4 dd       	rcall	.-1208   	; 0x8fee <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    94a6:	f8 01       	movw	r30, r16
    94a8:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    94aa:	92 e0       	ldi	r25, 0x02	; 2
    94ac:	90 83       	st	Z, r25
	adc->CAL = cal;
    94ae:	c4 86       	std	Z+12, r12	; 0x0c
    94b0:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    94b2:	f7 01       	movw	r30, r14
    94b4:	25 81       	ldd	r18, Z+5	; 0x05
    94b6:	36 81       	ldd	r19, Z+6	; 0x06
    94b8:	f8 01       	movw	r30, r16
    94ba:	20 8f       	std	Z+24, r18	; 0x18
    94bc:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    94be:	f7 01       	movw	r30, r14
    94c0:	92 81       	ldd	r25, Z+2	; 0x02
    94c2:	f8 01       	movw	r30, r16
    94c4:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    94c6:	f7 01       	movw	r30, r14
    94c8:	94 81       	ldd	r25, Z+4	; 0x04
    94ca:	f8 01       	movw	r30, r16
    94cc:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    94ce:	f7 01       	movw	r30, r14
    94d0:	93 81       	ldd	r25, Z+3	; 0x03
    94d2:	f8 01       	movw	r30, r16
    94d4:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    94d6:	f7 01       	movw	r30, r14
    94d8:	91 81       	ldd	r25, Z+1	; 0x01
    94da:	f8 01       	movw	r30, r16
    94dc:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    94de:	81 70       	andi	r24, 0x01	; 1
    94e0:	f7 01       	movw	r30, r14
    94e2:	90 81       	ld	r25, Z
    94e4:	89 2b       	or	r24, r25
    94e6:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    94e8:	80 83       	st	Z, r24
    94ea:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    94ec:	a1 dd       	rcall	.-1214   	; 0x9030 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    94ee:	bf be       	out	0x3f, r11	; 63
    94f0:	0f 90       	pop	r0
    94f2:	df 91       	pop	r29
    94f4:	cf 91       	pop	r28
    94f6:	1f 91       	pop	r17
    94f8:	0f 91       	pop	r16
    94fa:	ff 90       	pop	r15
    94fc:	ef 90       	pop	r14
    94fe:	df 90       	pop	r13
    9500:	cf 90       	pop	r12
    9502:	bf 90       	pop	r11
    9504:	08 95       	ret

00009506 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    9506:	df 92       	push	r13
    9508:	ef 92       	push	r14
    950a:	ff 92       	push	r15
    950c:	0f 93       	push	r16
    950e:	1f 93       	push	r17
    9510:	cf 93       	push	r28
    9512:	df 93       	push	r29
    9514:	1f 92       	push	r1
    9516:	cd b7       	in	r28, 0x3d	; 61
    9518:	de b7       	in	r29, 0x3e	; 62
    951a:	8c 01       	movw	r16, r24
    951c:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    951e:	8f b7       	in	r24, 0x3f	; 63
    9520:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9522:	f8 94       	cli
	return flags;
    9524:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    9526:	c8 01       	movw	r24, r16
    9528:	62 dd       	rcall	.-1340   	; 0x8fee <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    952a:	f8 01       	movw	r30, r16
    952c:	80 81       	ld	r24, Z
    952e:	80 7c       	andi	r24, 0xC0	; 192
    9530:	f7 01       	movw	r30, r14
    9532:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    9534:	f8 01       	movw	r30, r16
    9536:	80 8d       	ldd	r24, Z+24	; 0x18
    9538:	91 8d       	ldd	r25, Z+25	; 0x19
    953a:	f7 01       	movw	r30, r14
    953c:	85 83       	std	Z+5, r24	; 0x05
    953e:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    9540:	f8 01       	movw	r30, r16
    9542:	82 81       	ldd	r24, Z+2	; 0x02
    9544:	f7 01       	movw	r30, r14
    9546:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    9548:	f8 01       	movw	r30, r16
    954a:	84 81       	ldd	r24, Z+4	; 0x04
    954c:	f7 01       	movw	r30, r14
    954e:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    9550:	f8 01       	movw	r30, r16
    9552:	83 81       	ldd	r24, Z+3	; 0x03
    9554:	f7 01       	movw	r30, r14
    9556:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    9558:	f8 01       	movw	r30, r16
    955a:	81 81       	ldd	r24, Z+1	; 0x01
    955c:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    955e:	81 83       	std	Z+1, r24	; 0x01
    9560:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9562:	66 dd       	rcall	.-1332   	; 0x9030 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    9564:	df be       	out	0x3f, r13	; 63
    9566:	0f 90       	pop	r0
    9568:	df 91       	pop	r29
    956a:	cf 91       	pop	r28
    956c:	1f 91       	pop	r17
    956e:	0f 91       	pop	r16
    9570:	ff 90       	pop	r15
    9572:	ef 90       	pop	r14
    9574:	df 90       	pop	r13
    9576:	08 95       	ret

00009578 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    9578:	af 92       	push	r10
    957a:	bf 92       	push	r11
    957c:	cf 92       	push	r12
    957e:	df 92       	push	r13
    9580:	ef 92       	push	r14
    9582:	ff 92       	push	r15
    9584:	0f 93       	push	r16
    9586:	1f 93       	push	r17
    9588:	cf 93       	push	r28
    958a:	df 93       	push	r29
    958c:	1f 92       	push	r1
    958e:	cd b7       	in	r28, 0x3d	; 61
    9590:	de b7       	in	r29, 0x3e	; 62
    9592:	6c 01       	movw	r12, r24
    9594:	b6 2e       	mov	r11, r22
    9596:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    9598:	86 2f       	mov	r24, r22
    959a:	83 70       	andi	r24, 0x03	; 3
    959c:	29 f4       	brne	.+10     	; 0x95a8 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    959e:	96 2f       	mov	r25, r22
    95a0:	96 95       	lsr	r25
    95a2:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    95a4:	82 e0       	ldi	r24, 0x02	; 2
    95a6:	02 c0       	rjmp	.+4      	; 0x95ac <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    95a8:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    95aa:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    95ac:	90 ff       	sbrs	r25, 0
		index++;
    95ae:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    95b0:	86 01       	movw	r16, r12
    95b2:	00 5e       	subi	r16, 0xE0	; 224
    95b4:	1f 4f       	sbci	r17, 0xFF	; 255
    95b6:	98 e0       	ldi	r25, 0x08	; 8
    95b8:	89 9f       	mul	r24, r25
    95ba:	00 0d       	add	r16, r0
    95bc:	11 1d       	adc	r17, r1
    95be:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    95c0:	8f b7       	in	r24, 0x3f	; 63
    95c2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    95c4:	f8 94       	cli
	return flags;
    95c6:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    95c8:	c6 01       	movw	r24, r12
    95ca:	11 dd       	rcall	.-1502   	; 0x8fee <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    95cc:	f7 01       	movw	r30, r14
    95ce:	80 81       	ld	r24, Z
    95d0:	f8 01       	movw	r30, r16
    95d2:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    95d4:	f7 01       	movw	r30, r14
    95d6:	82 81       	ldd	r24, Z+2	; 0x02
    95d8:	f8 01       	movw	r30, r16
    95da:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    95dc:	f7 01       	movw	r30, r14
    95de:	81 81       	ldd	r24, Z+1	; 0x01
    95e0:	f8 01       	movw	r30, r16
    95e2:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    95e4:	b0 fe       	sbrs	r11, 0
    95e6:	04 c0       	rjmp	.+8      	; 0x95f0 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    95e8:	f7 01       	movw	r30, r14
    95ea:	83 81       	ldd	r24, Z+3	; 0x03
    95ec:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    95ee:	86 83       	std	Z+6, r24	; 0x06
    95f0:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    95f2:	1e dd       	rcall	.-1476   	; 0x9030 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    95f4:	af be       	out	0x3f, r10	; 63
    95f6:	0f 90       	pop	r0
    95f8:	df 91       	pop	r29
    95fa:	cf 91       	pop	r28
    95fc:	1f 91       	pop	r17
    95fe:	0f 91       	pop	r16
    9600:	ff 90       	pop	r15
    9602:	ef 90       	pop	r14
    9604:	df 90       	pop	r13
    9606:	cf 90       	pop	r12
    9608:	bf 90       	pop	r11
    960a:	af 90       	pop	r10
    960c:	08 95       	ret

0000960e <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    960e:	af 92       	push	r10
    9610:	bf 92       	push	r11
    9612:	cf 92       	push	r12
    9614:	df 92       	push	r13
    9616:	ef 92       	push	r14
    9618:	ff 92       	push	r15
    961a:	0f 93       	push	r16
    961c:	1f 93       	push	r17
    961e:	cf 93       	push	r28
    9620:	df 93       	push	r29
    9622:	1f 92       	push	r1
    9624:	cd b7       	in	r28, 0x3d	; 61
    9626:	de b7       	in	r29, 0x3e	; 62
    9628:	6c 01       	movw	r12, r24
    962a:	b6 2e       	mov	r11, r22
    962c:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    962e:	86 2f       	mov	r24, r22
    9630:	83 70       	andi	r24, 0x03	; 3
    9632:	29 f4       	brne	.+10     	; 0x963e <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    9634:	96 2f       	mov	r25, r22
    9636:	96 95       	lsr	r25
    9638:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    963a:	82 e0       	ldi	r24, 0x02	; 2
    963c:	02 c0       	rjmp	.+4      	; 0x9642 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    963e:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    9640:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    9642:	90 ff       	sbrs	r25, 0
		index++;
    9644:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    9646:	86 01       	movw	r16, r12
    9648:	00 5e       	subi	r16, 0xE0	; 224
    964a:	1f 4f       	sbci	r17, 0xFF	; 255
    964c:	98 e0       	ldi	r25, 0x08	; 8
    964e:	89 9f       	mul	r24, r25
    9650:	00 0d       	add	r16, r0
    9652:	11 1d       	adc	r17, r1
    9654:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9656:	8f b7       	in	r24, 0x3f	; 63
    9658:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    965a:	f8 94       	cli
	return flags;
    965c:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    965e:	c6 01       	movw	r24, r12
    9660:	c6 dc       	rcall	.-1652   	; 0x8fee <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    9662:	f8 01       	movw	r30, r16
    9664:	80 81       	ld	r24, Z
    9666:	f7 01       	movw	r30, r14
    9668:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    966a:	f8 01       	movw	r30, r16
    966c:	82 81       	ldd	r24, Z+2	; 0x02
    966e:	f7 01       	movw	r30, r14
    9670:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    9672:	f8 01       	movw	r30, r16
    9674:	81 81       	ldd	r24, Z+1	; 0x01
    9676:	f7 01       	movw	r30, r14
    9678:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    967a:	b0 fe       	sbrs	r11, 0
    967c:	04 c0       	rjmp	.+8      	; 0x9686 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    967e:	f8 01       	movw	r30, r16
    9680:	86 81       	ldd	r24, Z+6	; 0x06
    9682:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    9684:	83 83       	std	Z+3, r24	; 0x03
    9686:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9688:	d3 dc       	rcall	.-1626   	; 0x9030 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    968a:	af be       	out	0x3f, r10	; 63
    968c:	0f 90       	pop	r0
    968e:	df 91       	pop	r29
    9690:	cf 91       	pop	r28
    9692:	1f 91       	pop	r17
    9694:	0f 91       	pop	r16
    9696:	ff 90       	pop	r15
    9698:	ef 90       	pop	r14
    969a:	df 90       	pop	r13
    969c:	cf 90       	pop	r12
    969e:	bf 90       	pop	r11
    96a0:	af 90       	pop	r10
    96a2:	08 95       	ret

000096a4 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    96a4:	80 32       	cpi	r24, 0x20	; 32
    96a6:	93 40       	sbci	r25, 0x03	; 3
    96a8:	61 f4       	brne	.+24     	; 0x96c2 <dac_enable_clock+0x1e>
    96aa:	80 91 0f 23 	lds	r24, 0x230F	; 0x80230f <dacb_enable_count>
    96ae:	91 e0       	ldi	r25, 0x01	; 1
    96b0:	98 0f       	add	r25, r24
    96b2:	90 93 0f 23 	sts	0x230F, r25	; 0x80230f <dacb_enable_count>
    96b6:	81 11       	cpse	r24, r1
    96b8:	04 c0       	rjmp	.+8      	; 0x96c2 <dac_enable_clock+0x1e>
    96ba:	64 e0       	ldi	r22, 0x04	; 4
    96bc:	82 e0       	ldi	r24, 0x02	; 2
    96be:	0c 94 dc 72 	jmp	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    96c2:	08 95       	ret

000096c4 <dac_disable_clock>:
    96c4:	80 32       	cpi	r24, 0x20	; 32
    96c6:	93 40       	sbci	r25, 0x03	; 3
    96c8:	59 f4       	brne	.+22     	; 0x96e0 <dac_disable_clock+0x1c>
    96ca:	80 91 0f 23 	lds	r24, 0x230F	; 0x80230f <dacb_enable_count>
    96ce:	81 50       	subi	r24, 0x01	; 1
    96d0:	80 93 0f 23 	sts	0x230F, r24	; 0x80230f <dacb_enable_count>
    96d4:	81 11       	cpse	r24, r1
    96d6:	04 c0       	rjmp	.+8      	; 0x96e0 <dac_disable_clock+0x1c>
    96d8:	64 e0       	ldi	r22, 0x04	; 4
    96da:	82 e0       	ldi	r24, 0x02	; 2
    96dc:	0c 94 f2 72 	jmp	0xe5e4	; 0xe5e4 <sysclk_disable_module>
    96e0:	08 95       	ret

000096e2 <dac_enable>:
    96e2:	ef 92       	push	r14
    96e4:	ff 92       	push	r15
    96e6:	1f 93       	push	r17
    96e8:	cf 93       	push	r28
    96ea:	df 93       	push	r29
    96ec:	1f 92       	push	r1
    96ee:	1f 92       	push	r1
    96f0:	cd b7       	in	r28, 0x3d	; 61
    96f2:	de b7       	in	r29, 0x3e	; 62
    96f4:	2f b7       	in	r18, 0x3f	; 63
    96f6:	29 83       	std	Y+1, r18	; 0x01
    96f8:	f8 94       	cli
    96fa:	19 81       	ldd	r17, Y+1	; 0x01
    96fc:	20 91 7c 2e 	lds	r18, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    9700:	2f 3f       	cpi	r18, 0xFF	; 255
    9702:	09 f4       	brne	.+2      	; 0x9706 <dac_enable+0x24>
    9704:	ff cf       	rjmp	.-2      	; 0x9704 <dac_enable+0x22>
    9706:	7c 01       	movw	r14, r24
    9708:	8f b7       	in	r24, 0x3f	; 63
    970a:	8a 83       	std	Y+2, r24	; 0x02
    970c:	f8 94       	cli
    970e:	9a 81       	ldd	r25, Y+2	; 0x02
    9710:	eb e7       	ldi	r30, 0x7B	; 123
    9712:	fe e2       	ldi	r31, 0x2E	; 46
    9714:	81 81       	ldd	r24, Z+1	; 0x01
    9716:	8f 5f       	subi	r24, 0xFF	; 255
    9718:	81 83       	std	Z+1, r24	; 0x01
    971a:	9f bf       	out	0x3f, r25	; 63
    971c:	c7 01       	movw	r24, r14
    971e:	c2 df       	rcall	.-124    	; 0x96a4 <dac_enable_clock>
    9720:	f7 01       	movw	r30, r14
    9722:	80 81       	ld	r24, Z
    9724:	81 60       	ori	r24, 0x01	; 1
    9726:	80 83       	st	Z, r24
    9728:	1f bf       	out	0x3f, r17	; 63
    972a:	0f 90       	pop	r0
    972c:	0f 90       	pop	r0
    972e:	df 91       	pop	r29
    9730:	cf 91       	pop	r28
    9732:	1f 91       	pop	r17
    9734:	ff 90       	pop	r15
    9736:	ef 90       	pop	r14
    9738:	08 95       	ret

0000973a <dac_disable>:
    973a:	1f 93       	push	r17
    973c:	cf 93       	push	r28
    973e:	df 93       	push	r29
    9740:	1f 92       	push	r1
    9742:	1f 92       	push	r1
    9744:	cd b7       	in	r28, 0x3d	; 61
    9746:	de b7       	in	r29, 0x3e	; 62
    9748:	2f b7       	in	r18, 0x3f	; 63
    974a:	29 83       	std	Y+1, r18	; 0x01
    974c:	f8 94       	cli
    974e:	19 81       	ldd	r17, Y+1	; 0x01
    9750:	fc 01       	movw	r30, r24
    9752:	20 81       	ld	r18, Z
    9754:	2e 7f       	andi	r18, 0xFE	; 254
    9756:	20 83       	st	Z, r18
    9758:	b5 df       	rcall	.-150    	; 0x96c4 <dac_disable_clock>
    975a:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    975e:	81 11       	cpse	r24, r1
    9760:	01 c0       	rjmp	.+2      	; 0x9764 <dac_disable+0x2a>
    9762:	ff cf       	rjmp	.-2      	; 0x9762 <dac_disable+0x28>
    9764:	8f b7       	in	r24, 0x3f	; 63
    9766:	8a 83       	std	Y+2, r24	; 0x02
    9768:	f8 94       	cli
    976a:	9a 81       	ldd	r25, Y+2	; 0x02
    976c:	eb e7       	ldi	r30, 0x7B	; 123
    976e:	fe e2       	ldi	r31, 0x2E	; 46
    9770:	81 81       	ldd	r24, Z+1	; 0x01
    9772:	81 50       	subi	r24, 0x01	; 1
    9774:	81 83       	std	Z+1, r24	; 0x01
    9776:	9f bf       	out	0x3f, r25	; 63
    9778:	1f bf       	out	0x3f, r17	; 63
    977a:	0f 90       	pop	r0
    977c:	0f 90       	pop	r0
    977e:	df 91       	pop	r29
    9780:	cf 91       	pop	r28
    9782:	1f 91       	pop	r17
    9784:	08 95       	ret

00009786 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    9786:	9f 92       	push	r9
    9788:	af 92       	push	r10
    978a:	bf 92       	push	r11
    978c:	cf 92       	push	r12
    978e:	df 92       	push	r13
    9790:	ef 92       	push	r14
    9792:	ff 92       	push	r15
    9794:	0f 93       	push	r16
    9796:	1f 93       	push	r17
    9798:	cf 93       	push	r28
    979a:	df 93       	push	r29
    979c:	1f 92       	push	r1
    979e:	cd b7       	in	r28, 0x3d	; 61
    97a0:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    97a2:	80 32       	cpi	r24, 0x20	; 32
    97a4:	23 e0       	ldi	r18, 0x03	; 3
    97a6:	92 07       	cpc	r25, r18
    97a8:	09 f0       	breq	.+2      	; 0x97ac <dac_write_configuration+0x26>
    97aa:	3c c0       	rjmp	.+120    	; 0x9824 <dac_write_configuration+0x9e>
    97ac:	7b 01       	movw	r14, r22
    97ae:	8c 01       	movw	r16, r24
    97b0:	63 e3       	ldi	r22, 0x33	; 51
    97b2:	70 e0       	ldi	r23, 0x00	; 0
    97b4:	82 e0       	ldi	r24, 0x02	; 2
    97b6:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    97ba:	98 2e       	mov	r9, r24
    97bc:	62 e3       	ldi	r22, 0x32	; 50
    97be:	70 e0       	ldi	r23, 0x00	; 0
    97c0:	82 e0       	ldi	r24, 0x02	; 2
    97c2:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    97c6:	a8 2e       	mov	r10, r24
    97c8:	67 e3       	ldi	r22, 0x37	; 55
    97ca:	70 e0       	ldi	r23, 0x00	; 0
    97cc:	82 e0       	ldi	r24, 0x02	; 2
    97ce:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    97d2:	b8 2e       	mov	r11, r24
    97d4:	66 e3       	ldi	r22, 0x36	; 54
    97d6:	70 e0       	ldi	r23, 0x00	; 0
    97d8:	82 e0       	ldi	r24, 0x02	; 2
    97da:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    97de:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    97e0:	8f b7       	in	r24, 0x3f	; 63
    97e2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    97e4:	f8 94       	cli
	return flags;
    97e6:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    97e8:	c8 01       	movw	r24, r16
    97ea:	5c df       	rcall	.-328    	; 0x96a4 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    97ec:	f8 01       	movw	r30, r16
    97ee:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    97f0:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    97f2:	f7 01       	movw	r30, r14
    97f4:	91 81       	ldd	r25, Z+1	; 0x01
    97f6:	f8 01       	movw	r30, r16
    97f8:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    97fa:	f7 01       	movw	r30, r14
    97fc:	92 81       	ldd	r25, Z+2	; 0x02
    97fe:	f8 01       	movw	r30, r16
    9800:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    9802:	f7 01       	movw	r30, r14
    9804:	93 81       	ldd	r25, Z+3	; 0x03
    9806:	f8 01       	movw	r30, r16
    9808:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    980a:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    980c:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    980e:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    9810:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    9812:	81 70       	andi	r24, 0x01	; 1
    9814:	f7 01       	movw	r30, r14
    9816:	90 81       	ld	r25, Z
    9818:	89 2b       	or	r24, r25
    981a:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    981c:	80 83       	st	Z, r24
    981e:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9820:	51 df       	rcall	.-350    	; 0x96c4 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    9822:	df be       	out	0x3f, r13	; 63
    9824:	0f 90       	pop	r0
    9826:	df 91       	pop	r29
    9828:	cf 91       	pop	r28
    982a:	1f 91       	pop	r17
    982c:	0f 91       	pop	r16
    982e:	ff 90       	pop	r15
    9830:	ef 90       	pop	r14
    9832:	df 90       	pop	r13
    9834:	cf 90       	pop	r12
    9836:	bf 90       	pop	r11
    9838:	af 90       	pop	r10
    983a:	9f 90       	pop	r9
    983c:	08 95       	ret

0000983e <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    983e:	df 92       	push	r13
    9840:	ef 92       	push	r14
    9842:	ff 92       	push	r15
    9844:	0f 93       	push	r16
    9846:	1f 93       	push	r17
    9848:	cf 93       	push	r28
    984a:	df 93       	push	r29
    984c:	1f 92       	push	r1
    984e:	cd b7       	in	r28, 0x3d	; 61
    9850:	de b7       	in	r29, 0x3e	; 62
    9852:	8c 01       	movw	r16, r24
    9854:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9856:	8f b7       	in	r24, 0x3f	; 63
    9858:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    985a:	f8 94       	cli
	return flags;
    985c:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    985e:	c8 01       	movw	r24, r16
    9860:	21 df       	rcall	.-446    	; 0x96a4 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    9862:	f8 01       	movw	r30, r16
    9864:	80 81       	ld	r24, Z
    9866:	8e 7f       	andi	r24, 0xFE	; 254
    9868:	f7 01       	movw	r30, r14
    986a:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    986c:	f8 01       	movw	r30, r16
    986e:	81 81       	ldd	r24, Z+1	; 0x01
    9870:	f7 01       	movw	r30, r14
    9872:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    9874:	f8 01       	movw	r30, r16
    9876:	82 81       	ldd	r24, Z+2	; 0x02
    9878:	f7 01       	movw	r30, r14
    987a:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    987c:	f8 01       	movw	r30, r16
    987e:	83 81       	ldd	r24, Z+3	; 0x03
    9880:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    9882:	83 83       	std	Z+3, r24	; 0x03
    9884:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9886:	1e df       	rcall	.-452    	; 0x96c4 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    9888:	df be       	out	0x3f, r13	; 63
    988a:	0f 90       	pop	r0
    988c:	df 91       	pop	r29
    988e:	cf 91       	pop	r28
    9890:	1f 91       	pop	r17
    9892:	0f 91       	pop	r16
    9894:	ff 90       	pop	r15
    9896:	ef 90       	pop	r14
    9898:	df 90       	pop	r13
    989a:	08 95       	ret

0000989c <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    989c:	1f 92       	push	r1
    989e:	0f 92       	push	r0
    98a0:	0f b6       	in	r0, 0x3f	; 63
    98a2:	0f 92       	push	r0
    98a4:	11 24       	eor	r1, r1
    98a6:	0b b6       	in	r0, 0x3b	; 59
    98a8:	0f 92       	push	r0
    98aa:	2f 93       	push	r18
    98ac:	3f 93       	push	r19
    98ae:	4f 93       	push	r20
    98b0:	5f 93       	push	r21
    98b2:	6f 93       	push	r22
    98b4:	7f 93       	push	r23
    98b6:	8f 93       	push	r24
    98b8:	9f 93       	push	r25
    98ba:	af 93       	push	r26
    98bc:	bf 93       	push	r27
    98be:	ef 93       	push	r30
    98c0:	ff 93       	push	r31
    98c2:	e0 91 56 23 	lds	r30, 0x2356	; 0x802356 <tc_tcc0_ovf_callback>
    98c6:	f0 91 57 23 	lds	r31, 0x2357	; 0x802357 <tc_tcc0_ovf_callback+0x1>
    98ca:	30 97       	sbiw	r30, 0x00	; 0
    98cc:	09 f0       	breq	.+2      	; 0x98d0 <__vector_14+0x34>
    98ce:	19 95       	eicall
    98d0:	ff 91       	pop	r31
    98d2:	ef 91       	pop	r30
    98d4:	bf 91       	pop	r27
    98d6:	af 91       	pop	r26
    98d8:	9f 91       	pop	r25
    98da:	8f 91       	pop	r24
    98dc:	7f 91       	pop	r23
    98de:	6f 91       	pop	r22
    98e0:	5f 91       	pop	r21
    98e2:	4f 91       	pop	r20
    98e4:	3f 91       	pop	r19
    98e6:	2f 91       	pop	r18
    98e8:	0f 90       	pop	r0
    98ea:	0b be       	out	0x3b, r0	; 59
    98ec:	0f 90       	pop	r0
    98ee:	0f be       	out	0x3f, r0	; 63
    98f0:	0f 90       	pop	r0
    98f2:	1f 90       	pop	r1
    98f4:	18 95       	reti

000098f6 <__vector_15>:
    98f6:	1f 92       	push	r1
    98f8:	0f 92       	push	r0
    98fa:	0f b6       	in	r0, 0x3f	; 63
    98fc:	0f 92       	push	r0
    98fe:	11 24       	eor	r1, r1
    9900:	0b b6       	in	r0, 0x3b	; 59
    9902:	0f 92       	push	r0
    9904:	2f 93       	push	r18
    9906:	3f 93       	push	r19
    9908:	4f 93       	push	r20
    990a:	5f 93       	push	r21
    990c:	6f 93       	push	r22
    990e:	7f 93       	push	r23
    9910:	8f 93       	push	r24
    9912:	9f 93       	push	r25
    9914:	af 93       	push	r26
    9916:	bf 93       	push	r27
    9918:	ef 93       	push	r30
    991a:	ff 93       	push	r31
    991c:	e0 91 54 23 	lds	r30, 0x2354	; 0x802354 <tc_tcc0_err_callback>
    9920:	f0 91 55 23 	lds	r31, 0x2355	; 0x802355 <tc_tcc0_err_callback+0x1>
    9924:	30 97       	sbiw	r30, 0x00	; 0
    9926:	09 f0       	breq	.+2      	; 0x992a <__vector_15+0x34>
    9928:	19 95       	eicall
    992a:	ff 91       	pop	r31
    992c:	ef 91       	pop	r30
    992e:	bf 91       	pop	r27
    9930:	af 91       	pop	r26
    9932:	9f 91       	pop	r25
    9934:	8f 91       	pop	r24
    9936:	7f 91       	pop	r23
    9938:	6f 91       	pop	r22
    993a:	5f 91       	pop	r21
    993c:	4f 91       	pop	r20
    993e:	3f 91       	pop	r19
    9940:	2f 91       	pop	r18
    9942:	0f 90       	pop	r0
    9944:	0b be       	out	0x3b, r0	; 59
    9946:	0f 90       	pop	r0
    9948:	0f be       	out	0x3f, r0	; 63
    994a:	0f 90       	pop	r0
    994c:	1f 90       	pop	r1
    994e:	18 95       	reti

00009950 <__vector_16>:
    9950:	1f 92       	push	r1
    9952:	0f 92       	push	r0
    9954:	0f b6       	in	r0, 0x3f	; 63
    9956:	0f 92       	push	r0
    9958:	11 24       	eor	r1, r1
    995a:	0b b6       	in	r0, 0x3b	; 59
    995c:	0f 92       	push	r0
    995e:	2f 93       	push	r18
    9960:	3f 93       	push	r19
    9962:	4f 93       	push	r20
    9964:	5f 93       	push	r21
    9966:	6f 93       	push	r22
    9968:	7f 93       	push	r23
    996a:	8f 93       	push	r24
    996c:	9f 93       	push	r25
    996e:	af 93       	push	r26
    9970:	bf 93       	push	r27
    9972:	ef 93       	push	r30
    9974:	ff 93       	push	r31
    9976:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <tc_tcc0_cca_callback>
    997a:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <tc_tcc0_cca_callback+0x1>
    997e:	30 97       	sbiw	r30, 0x00	; 0
    9980:	09 f0       	breq	.+2      	; 0x9984 <__vector_16+0x34>
    9982:	19 95       	eicall
    9984:	ff 91       	pop	r31
    9986:	ef 91       	pop	r30
    9988:	bf 91       	pop	r27
    998a:	af 91       	pop	r26
    998c:	9f 91       	pop	r25
    998e:	8f 91       	pop	r24
    9990:	7f 91       	pop	r23
    9992:	6f 91       	pop	r22
    9994:	5f 91       	pop	r21
    9996:	4f 91       	pop	r20
    9998:	3f 91       	pop	r19
    999a:	2f 91       	pop	r18
    999c:	0f 90       	pop	r0
    999e:	0b be       	out	0x3b, r0	; 59
    99a0:	0f 90       	pop	r0
    99a2:	0f be       	out	0x3f, r0	; 63
    99a4:	0f 90       	pop	r0
    99a6:	1f 90       	pop	r1
    99a8:	18 95       	reti

000099aa <__vector_17>:
    99aa:	1f 92       	push	r1
    99ac:	0f 92       	push	r0
    99ae:	0f b6       	in	r0, 0x3f	; 63
    99b0:	0f 92       	push	r0
    99b2:	11 24       	eor	r1, r1
    99b4:	0b b6       	in	r0, 0x3b	; 59
    99b6:	0f 92       	push	r0
    99b8:	2f 93       	push	r18
    99ba:	3f 93       	push	r19
    99bc:	4f 93       	push	r20
    99be:	5f 93       	push	r21
    99c0:	6f 93       	push	r22
    99c2:	7f 93       	push	r23
    99c4:	8f 93       	push	r24
    99c6:	9f 93       	push	r25
    99c8:	af 93       	push	r26
    99ca:	bf 93       	push	r27
    99cc:	ef 93       	push	r30
    99ce:	ff 93       	push	r31
    99d0:	e0 91 50 23 	lds	r30, 0x2350	; 0x802350 <tc_tcc0_ccb_callback>
    99d4:	f0 91 51 23 	lds	r31, 0x2351	; 0x802351 <tc_tcc0_ccb_callback+0x1>
    99d8:	30 97       	sbiw	r30, 0x00	; 0
    99da:	09 f0       	breq	.+2      	; 0x99de <__vector_17+0x34>
    99dc:	19 95       	eicall
    99de:	ff 91       	pop	r31
    99e0:	ef 91       	pop	r30
    99e2:	bf 91       	pop	r27
    99e4:	af 91       	pop	r26
    99e6:	9f 91       	pop	r25
    99e8:	8f 91       	pop	r24
    99ea:	7f 91       	pop	r23
    99ec:	6f 91       	pop	r22
    99ee:	5f 91       	pop	r21
    99f0:	4f 91       	pop	r20
    99f2:	3f 91       	pop	r19
    99f4:	2f 91       	pop	r18
    99f6:	0f 90       	pop	r0
    99f8:	0b be       	out	0x3b, r0	; 59
    99fa:	0f 90       	pop	r0
    99fc:	0f be       	out	0x3f, r0	; 63
    99fe:	0f 90       	pop	r0
    9a00:	1f 90       	pop	r1
    9a02:	18 95       	reti

00009a04 <__vector_18>:
    9a04:	1f 92       	push	r1
    9a06:	0f 92       	push	r0
    9a08:	0f b6       	in	r0, 0x3f	; 63
    9a0a:	0f 92       	push	r0
    9a0c:	11 24       	eor	r1, r1
    9a0e:	0b b6       	in	r0, 0x3b	; 59
    9a10:	0f 92       	push	r0
    9a12:	2f 93       	push	r18
    9a14:	3f 93       	push	r19
    9a16:	4f 93       	push	r20
    9a18:	5f 93       	push	r21
    9a1a:	6f 93       	push	r22
    9a1c:	7f 93       	push	r23
    9a1e:	8f 93       	push	r24
    9a20:	9f 93       	push	r25
    9a22:	af 93       	push	r26
    9a24:	bf 93       	push	r27
    9a26:	ef 93       	push	r30
    9a28:	ff 93       	push	r31
    9a2a:	e0 91 4e 23 	lds	r30, 0x234E	; 0x80234e <tc_tcc0_ccc_callback>
    9a2e:	f0 91 4f 23 	lds	r31, 0x234F	; 0x80234f <tc_tcc0_ccc_callback+0x1>
    9a32:	30 97       	sbiw	r30, 0x00	; 0
    9a34:	09 f0       	breq	.+2      	; 0x9a38 <__vector_18+0x34>
    9a36:	19 95       	eicall
    9a38:	ff 91       	pop	r31
    9a3a:	ef 91       	pop	r30
    9a3c:	bf 91       	pop	r27
    9a3e:	af 91       	pop	r26
    9a40:	9f 91       	pop	r25
    9a42:	8f 91       	pop	r24
    9a44:	7f 91       	pop	r23
    9a46:	6f 91       	pop	r22
    9a48:	5f 91       	pop	r21
    9a4a:	4f 91       	pop	r20
    9a4c:	3f 91       	pop	r19
    9a4e:	2f 91       	pop	r18
    9a50:	0f 90       	pop	r0
    9a52:	0b be       	out	0x3b, r0	; 59
    9a54:	0f 90       	pop	r0
    9a56:	0f be       	out	0x3f, r0	; 63
    9a58:	0f 90       	pop	r0
    9a5a:	1f 90       	pop	r1
    9a5c:	18 95       	reti

00009a5e <__vector_19>:
    9a5e:	1f 92       	push	r1
    9a60:	0f 92       	push	r0
    9a62:	0f b6       	in	r0, 0x3f	; 63
    9a64:	0f 92       	push	r0
    9a66:	11 24       	eor	r1, r1
    9a68:	0b b6       	in	r0, 0x3b	; 59
    9a6a:	0f 92       	push	r0
    9a6c:	2f 93       	push	r18
    9a6e:	3f 93       	push	r19
    9a70:	4f 93       	push	r20
    9a72:	5f 93       	push	r21
    9a74:	6f 93       	push	r22
    9a76:	7f 93       	push	r23
    9a78:	8f 93       	push	r24
    9a7a:	9f 93       	push	r25
    9a7c:	af 93       	push	r26
    9a7e:	bf 93       	push	r27
    9a80:	ef 93       	push	r30
    9a82:	ff 93       	push	r31
    9a84:	e0 91 4c 23 	lds	r30, 0x234C	; 0x80234c <tc_tcc0_ccd_callback>
    9a88:	f0 91 4d 23 	lds	r31, 0x234D	; 0x80234d <tc_tcc0_ccd_callback+0x1>
    9a8c:	30 97       	sbiw	r30, 0x00	; 0
    9a8e:	09 f0       	breq	.+2      	; 0x9a92 <__vector_19+0x34>
    9a90:	19 95       	eicall
    9a92:	ff 91       	pop	r31
    9a94:	ef 91       	pop	r30
    9a96:	bf 91       	pop	r27
    9a98:	af 91       	pop	r26
    9a9a:	9f 91       	pop	r25
    9a9c:	8f 91       	pop	r24
    9a9e:	7f 91       	pop	r23
    9aa0:	6f 91       	pop	r22
    9aa2:	5f 91       	pop	r21
    9aa4:	4f 91       	pop	r20
    9aa6:	3f 91       	pop	r19
    9aa8:	2f 91       	pop	r18
    9aaa:	0f 90       	pop	r0
    9aac:	0b be       	out	0x3b, r0	; 59
    9aae:	0f 90       	pop	r0
    9ab0:	0f be       	out	0x3f, r0	; 63
    9ab2:	0f 90       	pop	r0
    9ab4:	1f 90       	pop	r1
    9ab6:	18 95       	reti

00009ab8 <__vector_20>:
    9ab8:	1f 92       	push	r1
    9aba:	0f 92       	push	r0
    9abc:	0f b6       	in	r0, 0x3f	; 63
    9abe:	0f 92       	push	r0
    9ac0:	11 24       	eor	r1, r1
    9ac2:	0b b6       	in	r0, 0x3b	; 59
    9ac4:	0f 92       	push	r0
    9ac6:	2f 93       	push	r18
    9ac8:	3f 93       	push	r19
    9aca:	4f 93       	push	r20
    9acc:	5f 93       	push	r21
    9ace:	6f 93       	push	r22
    9ad0:	7f 93       	push	r23
    9ad2:	8f 93       	push	r24
    9ad4:	9f 93       	push	r25
    9ad6:	af 93       	push	r26
    9ad8:	bf 93       	push	r27
    9ada:	ef 93       	push	r30
    9adc:	ff 93       	push	r31
    9ade:	e0 91 4a 23 	lds	r30, 0x234A	; 0x80234a <tc_tcc1_ovf_callback>
    9ae2:	f0 91 4b 23 	lds	r31, 0x234B	; 0x80234b <tc_tcc1_ovf_callback+0x1>
    9ae6:	30 97       	sbiw	r30, 0x00	; 0
    9ae8:	09 f0       	breq	.+2      	; 0x9aec <__vector_20+0x34>
    9aea:	19 95       	eicall
    9aec:	ff 91       	pop	r31
    9aee:	ef 91       	pop	r30
    9af0:	bf 91       	pop	r27
    9af2:	af 91       	pop	r26
    9af4:	9f 91       	pop	r25
    9af6:	8f 91       	pop	r24
    9af8:	7f 91       	pop	r23
    9afa:	6f 91       	pop	r22
    9afc:	5f 91       	pop	r21
    9afe:	4f 91       	pop	r20
    9b00:	3f 91       	pop	r19
    9b02:	2f 91       	pop	r18
    9b04:	0f 90       	pop	r0
    9b06:	0b be       	out	0x3b, r0	; 59
    9b08:	0f 90       	pop	r0
    9b0a:	0f be       	out	0x3f, r0	; 63
    9b0c:	0f 90       	pop	r0
    9b0e:	1f 90       	pop	r1
    9b10:	18 95       	reti

00009b12 <__vector_21>:
    9b12:	1f 92       	push	r1
    9b14:	0f 92       	push	r0
    9b16:	0f b6       	in	r0, 0x3f	; 63
    9b18:	0f 92       	push	r0
    9b1a:	11 24       	eor	r1, r1
    9b1c:	0b b6       	in	r0, 0x3b	; 59
    9b1e:	0f 92       	push	r0
    9b20:	2f 93       	push	r18
    9b22:	3f 93       	push	r19
    9b24:	4f 93       	push	r20
    9b26:	5f 93       	push	r21
    9b28:	6f 93       	push	r22
    9b2a:	7f 93       	push	r23
    9b2c:	8f 93       	push	r24
    9b2e:	9f 93       	push	r25
    9b30:	af 93       	push	r26
    9b32:	bf 93       	push	r27
    9b34:	ef 93       	push	r30
    9b36:	ff 93       	push	r31
    9b38:	e0 91 48 23 	lds	r30, 0x2348	; 0x802348 <tc_tcc1_err_callback>
    9b3c:	f0 91 49 23 	lds	r31, 0x2349	; 0x802349 <tc_tcc1_err_callback+0x1>
    9b40:	30 97       	sbiw	r30, 0x00	; 0
    9b42:	09 f0       	breq	.+2      	; 0x9b46 <__vector_21+0x34>
    9b44:	19 95       	eicall
    9b46:	ff 91       	pop	r31
    9b48:	ef 91       	pop	r30
    9b4a:	bf 91       	pop	r27
    9b4c:	af 91       	pop	r26
    9b4e:	9f 91       	pop	r25
    9b50:	8f 91       	pop	r24
    9b52:	7f 91       	pop	r23
    9b54:	6f 91       	pop	r22
    9b56:	5f 91       	pop	r21
    9b58:	4f 91       	pop	r20
    9b5a:	3f 91       	pop	r19
    9b5c:	2f 91       	pop	r18
    9b5e:	0f 90       	pop	r0
    9b60:	0b be       	out	0x3b, r0	; 59
    9b62:	0f 90       	pop	r0
    9b64:	0f be       	out	0x3f, r0	; 63
    9b66:	0f 90       	pop	r0
    9b68:	1f 90       	pop	r1
    9b6a:	18 95       	reti

00009b6c <__vector_22>:
    9b6c:	1f 92       	push	r1
    9b6e:	0f 92       	push	r0
    9b70:	0f b6       	in	r0, 0x3f	; 63
    9b72:	0f 92       	push	r0
    9b74:	11 24       	eor	r1, r1
    9b76:	0b b6       	in	r0, 0x3b	; 59
    9b78:	0f 92       	push	r0
    9b7a:	2f 93       	push	r18
    9b7c:	3f 93       	push	r19
    9b7e:	4f 93       	push	r20
    9b80:	5f 93       	push	r21
    9b82:	6f 93       	push	r22
    9b84:	7f 93       	push	r23
    9b86:	8f 93       	push	r24
    9b88:	9f 93       	push	r25
    9b8a:	af 93       	push	r26
    9b8c:	bf 93       	push	r27
    9b8e:	ef 93       	push	r30
    9b90:	ff 93       	push	r31
    9b92:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <tc_tcc1_cca_callback>
    9b96:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <tc_tcc1_cca_callback+0x1>
    9b9a:	30 97       	sbiw	r30, 0x00	; 0
    9b9c:	09 f0       	breq	.+2      	; 0x9ba0 <__vector_22+0x34>
    9b9e:	19 95       	eicall
    9ba0:	ff 91       	pop	r31
    9ba2:	ef 91       	pop	r30
    9ba4:	bf 91       	pop	r27
    9ba6:	af 91       	pop	r26
    9ba8:	9f 91       	pop	r25
    9baa:	8f 91       	pop	r24
    9bac:	7f 91       	pop	r23
    9bae:	6f 91       	pop	r22
    9bb0:	5f 91       	pop	r21
    9bb2:	4f 91       	pop	r20
    9bb4:	3f 91       	pop	r19
    9bb6:	2f 91       	pop	r18
    9bb8:	0f 90       	pop	r0
    9bba:	0b be       	out	0x3b, r0	; 59
    9bbc:	0f 90       	pop	r0
    9bbe:	0f be       	out	0x3f, r0	; 63
    9bc0:	0f 90       	pop	r0
    9bc2:	1f 90       	pop	r1
    9bc4:	18 95       	reti

00009bc6 <__vector_23>:
    9bc6:	1f 92       	push	r1
    9bc8:	0f 92       	push	r0
    9bca:	0f b6       	in	r0, 0x3f	; 63
    9bcc:	0f 92       	push	r0
    9bce:	11 24       	eor	r1, r1
    9bd0:	0b b6       	in	r0, 0x3b	; 59
    9bd2:	0f 92       	push	r0
    9bd4:	2f 93       	push	r18
    9bd6:	3f 93       	push	r19
    9bd8:	4f 93       	push	r20
    9bda:	5f 93       	push	r21
    9bdc:	6f 93       	push	r22
    9bde:	7f 93       	push	r23
    9be0:	8f 93       	push	r24
    9be2:	9f 93       	push	r25
    9be4:	af 93       	push	r26
    9be6:	bf 93       	push	r27
    9be8:	ef 93       	push	r30
    9bea:	ff 93       	push	r31
    9bec:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <tc_tcc1_ccb_callback>
    9bf0:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <tc_tcc1_ccb_callback+0x1>
    9bf4:	30 97       	sbiw	r30, 0x00	; 0
    9bf6:	09 f0       	breq	.+2      	; 0x9bfa <__vector_23+0x34>
    9bf8:	19 95       	eicall
    9bfa:	ff 91       	pop	r31
    9bfc:	ef 91       	pop	r30
    9bfe:	bf 91       	pop	r27
    9c00:	af 91       	pop	r26
    9c02:	9f 91       	pop	r25
    9c04:	8f 91       	pop	r24
    9c06:	7f 91       	pop	r23
    9c08:	6f 91       	pop	r22
    9c0a:	5f 91       	pop	r21
    9c0c:	4f 91       	pop	r20
    9c0e:	3f 91       	pop	r19
    9c10:	2f 91       	pop	r18
    9c12:	0f 90       	pop	r0
    9c14:	0b be       	out	0x3b, r0	; 59
    9c16:	0f 90       	pop	r0
    9c18:	0f be       	out	0x3f, r0	; 63
    9c1a:	0f 90       	pop	r0
    9c1c:	1f 90       	pop	r1
    9c1e:	18 95       	reti

00009c20 <__vector_77>:
    9c20:	1f 92       	push	r1
    9c22:	0f 92       	push	r0
    9c24:	0f b6       	in	r0, 0x3f	; 63
    9c26:	0f 92       	push	r0
    9c28:	11 24       	eor	r1, r1
    9c2a:	0b b6       	in	r0, 0x3b	; 59
    9c2c:	0f 92       	push	r0
    9c2e:	2f 93       	push	r18
    9c30:	3f 93       	push	r19
    9c32:	4f 93       	push	r20
    9c34:	5f 93       	push	r21
    9c36:	6f 93       	push	r22
    9c38:	7f 93       	push	r23
    9c3a:	8f 93       	push	r24
    9c3c:	9f 93       	push	r25
    9c3e:	af 93       	push	r26
    9c40:	bf 93       	push	r27
    9c42:	ef 93       	push	r30
    9c44:	ff 93       	push	r31
    9c46:	e0 91 42 23 	lds	r30, 0x2342	; 0x802342 <tc_tcd0_ovf_callback>
    9c4a:	f0 91 43 23 	lds	r31, 0x2343	; 0x802343 <tc_tcd0_ovf_callback+0x1>
    9c4e:	30 97       	sbiw	r30, 0x00	; 0
    9c50:	09 f0       	breq	.+2      	; 0x9c54 <__vector_77+0x34>
    9c52:	19 95       	eicall
    9c54:	ff 91       	pop	r31
    9c56:	ef 91       	pop	r30
    9c58:	bf 91       	pop	r27
    9c5a:	af 91       	pop	r26
    9c5c:	9f 91       	pop	r25
    9c5e:	8f 91       	pop	r24
    9c60:	7f 91       	pop	r23
    9c62:	6f 91       	pop	r22
    9c64:	5f 91       	pop	r21
    9c66:	4f 91       	pop	r20
    9c68:	3f 91       	pop	r19
    9c6a:	2f 91       	pop	r18
    9c6c:	0f 90       	pop	r0
    9c6e:	0b be       	out	0x3b, r0	; 59
    9c70:	0f 90       	pop	r0
    9c72:	0f be       	out	0x3f, r0	; 63
    9c74:	0f 90       	pop	r0
    9c76:	1f 90       	pop	r1
    9c78:	18 95       	reti

00009c7a <__vector_78>:
    9c7a:	1f 92       	push	r1
    9c7c:	0f 92       	push	r0
    9c7e:	0f b6       	in	r0, 0x3f	; 63
    9c80:	0f 92       	push	r0
    9c82:	11 24       	eor	r1, r1
    9c84:	0b b6       	in	r0, 0x3b	; 59
    9c86:	0f 92       	push	r0
    9c88:	2f 93       	push	r18
    9c8a:	3f 93       	push	r19
    9c8c:	4f 93       	push	r20
    9c8e:	5f 93       	push	r21
    9c90:	6f 93       	push	r22
    9c92:	7f 93       	push	r23
    9c94:	8f 93       	push	r24
    9c96:	9f 93       	push	r25
    9c98:	af 93       	push	r26
    9c9a:	bf 93       	push	r27
    9c9c:	ef 93       	push	r30
    9c9e:	ff 93       	push	r31
    9ca0:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <tc_tcd0_err_callback>
    9ca4:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <tc_tcd0_err_callback+0x1>
    9ca8:	30 97       	sbiw	r30, 0x00	; 0
    9caa:	09 f0       	breq	.+2      	; 0x9cae <__vector_78+0x34>
    9cac:	19 95       	eicall
    9cae:	ff 91       	pop	r31
    9cb0:	ef 91       	pop	r30
    9cb2:	bf 91       	pop	r27
    9cb4:	af 91       	pop	r26
    9cb6:	9f 91       	pop	r25
    9cb8:	8f 91       	pop	r24
    9cba:	7f 91       	pop	r23
    9cbc:	6f 91       	pop	r22
    9cbe:	5f 91       	pop	r21
    9cc0:	4f 91       	pop	r20
    9cc2:	3f 91       	pop	r19
    9cc4:	2f 91       	pop	r18
    9cc6:	0f 90       	pop	r0
    9cc8:	0b be       	out	0x3b, r0	; 59
    9cca:	0f 90       	pop	r0
    9ccc:	0f be       	out	0x3f, r0	; 63
    9cce:	0f 90       	pop	r0
    9cd0:	1f 90       	pop	r1
    9cd2:	18 95       	reti

00009cd4 <__vector_79>:
    9cd4:	1f 92       	push	r1
    9cd6:	0f 92       	push	r0
    9cd8:	0f b6       	in	r0, 0x3f	; 63
    9cda:	0f 92       	push	r0
    9cdc:	11 24       	eor	r1, r1
    9cde:	0b b6       	in	r0, 0x3b	; 59
    9ce0:	0f 92       	push	r0
    9ce2:	2f 93       	push	r18
    9ce4:	3f 93       	push	r19
    9ce6:	4f 93       	push	r20
    9ce8:	5f 93       	push	r21
    9cea:	6f 93       	push	r22
    9cec:	7f 93       	push	r23
    9cee:	8f 93       	push	r24
    9cf0:	9f 93       	push	r25
    9cf2:	af 93       	push	r26
    9cf4:	bf 93       	push	r27
    9cf6:	ef 93       	push	r30
    9cf8:	ff 93       	push	r31
    9cfa:	e0 91 3e 23 	lds	r30, 0x233E	; 0x80233e <tc_tcd0_cca_callback>
    9cfe:	f0 91 3f 23 	lds	r31, 0x233F	; 0x80233f <tc_tcd0_cca_callback+0x1>
    9d02:	30 97       	sbiw	r30, 0x00	; 0
    9d04:	09 f0       	breq	.+2      	; 0x9d08 <__vector_79+0x34>
    9d06:	19 95       	eicall
    9d08:	ff 91       	pop	r31
    9d0a:	ef 91       	pop	r30
    9d0c:	bf 91       	pop	r27
    9d0e:	af 91       	pop	r26
    9d10:	9f 91       	pop	r25
    9d12:	8f 91       	pop	r24
    9d14:	7f 91       	pop	r23
    9d16:	6f 91       	pop	r22
    9d18:	5f 91       	pop	r21
    9d1a:	4f 91       	pop	r20
    9d1c:	3f 91       	pop	r19
    9d1e:	2f 91       	pop	r18
    9d20:	0f 90       	pop	r0
    9d22:	0b be       	out	0x3b, r0	; 59
    9d24:	0f 90       	pop	r0
    9d26:	0f be       	out	0x3f, r0	; 63
    9d28:	0f 90       	pop	r0
    9d2a:	1f 90       	pop	r1
    9d2c:	18 95       	reti

00009d2e <__vector_80>:
    9d2e:	1f 92       	push	r1
    9d30:	0f 92       	push	r0
    9d32:	0f b6       	in	r0, 0x3f	; 63
    9d34:	0f 92       	push	r0
    9d36:	11 24       	eor	r1, r1
    9d38:	0b b6       	in	r0, 0x3b	; 59
    9d3a:	0f 92       	push	r0
    9d3c:	2f 93       	push	r18
    9d3e:	3f 93       	push	r19
    9d40:	4f 93       	push	r20
    9d42:	5f 93       	push	r21
    9d44:	6f 93       	push	r22
    9d46:	7f 93       	push	r23
    9d48:	8f 93       	push	r24
    9d4a:	9f 93       	push	r25
    9d4c:	af 93       	push	r26
    9d4e:	bf 93       	push	r27
    9d50:	ef 93       	push	r30
    9d52:	ff 93       	push	r31
    9d54:	e0 91 3c 23 	lds	r30, 0x233C	; 0x80233c <tc_tcd0_ccb_callback>
    9d58:	f0 91 3d 23 	lds	r31, 0x233D	; 0x80233d <tc_tcd0_ccb_callback+0x1>
    9d5c:	30 97       	sbiw	r30, 0x00	; 0
    9d5e:	09 f0       	breq	.+2      	; 0x9d62 <__vector_80+0x34>
    9d60:	19 95       	eicall
    9d62:	ff 91       	pop	r31
    9d64:	ef 91       	pop	r30
    9d66:	bf 91       	pop	r27
    9d68:	af 91       	pop	r26
    9d6a:	9f 91       	pop	r25
    9d6c:	8f 91       	pop	r24
    9d6e:	7f 91       	pop	r23
    9d70:	6f 91       	pop	r22
    9d72:	5f 91       	pop	r21
    9d74:	4f 91       	pop	r20
    9d76:	3f 91       	pop	r19
    9d78:	2f 91       	pop	r18
    9d7a:	0f 90       	pop	r0
    9d7c:	0b be       	out	0x3b, r0	; 59
    9d7e:	0f 90       	pop	r0
    9d80:	0f be       	out	0x3f, r0	; 63
    9d82:	0f 90       	pop	r0
    9d84:	1f 90       	pop	r1
    9d86:	18 95       	reti

00009d88 <__vector_81>:
    9d88:	1f 92       	push	r1
    9d8a:	0f 92       	push	r0
    9d8c:	0f b6       	in	r0, 0x3f	; 63
    9d8e:	0f 92       	push	r0
    9d90:	11 24       	eor	r1, r1
    9d92:	0b b6       	in	r0, 0x3b	; 59
    9d94:	0f 92       	push	r0
    9d96:	2f 93       	push	r18
    9d98:	3f 93       	push	r19
    9d9a:	4f 93       	push	r20
    9d9c:	5f 93       	push	r21
    9d9e:	6f 93       	push	r22
    9da0:	7f 93       	push	r23
    9da2:	8f 93       	push	r24
    9da4:	9f 93       	push	r25
    9da6:	af 93       	push	r26
    9da8:	bf 93       	push	r27
    9daa:	ef 93       	push	r30
    9dac:	ff 93       	push	r31
    9dae:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <tc_tcd0_ccc_callback>
    9db2:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <tc_tcd0_ccc_callback+0x1>
    9db6:	30 97       	sbiw	r30, 0x00	; 0
    9db8:	09 f0       	breq	.+2      	; 0x9dbc <__vector_81+0x34>
    9dba:	19 95       	eicall
    9dbc:	ff 91       	pop	r31
    9dbe:	ef 91       	pop	r30
    9dc0:	bf 91       	pop	r27
    9dc2:	af 91       	pop	r26
    9dc4:	9f 91       	pop	r25
    9dc6:	8f 91       	pop	r24
    9dc8:	7f 91       	pop	r23
    9dca:	6f 91       	pop	r22
    9dcc:	5f 91       	pop	r21
    9dce:	4f 91       	pop	r20
    9dd0:	3f 91       	pop	r19
    9dd2:	2f 91       	pop	r18
    9dd4:	0f 90       	pop	r0
    9dd6:	0b be       	out	0x3b, r0	; 59
    9dd8:	0f 90       	pop	r0
    9dda:	0f be       	out	0x3f, r0	; 63
    9ddc:	0f 90       	pop	r0
    9dde:	1f 90       	pop	r1
    9de0:	18 95       	reti

00009de2 <__vector_82>:
    9de2:	1f 92       	push	r1
    9de4:	0f 92       	push	r0
    9de6:	0f b6       	in	r0, 0x3f	; 63
    9de8:	0f 92       	push	r0
    9dea:	11 24       	eor	r1, r1
    9dec:	0b b6       	in	r0, 0x3b	; 59
    9dee:	0f 92       	push	r0
    9df0:	2f 93       	push	r18
    9df2:	3f 93       	push	r19
    9df4:	4f 93       	push	r20
    9df6:	5f 93       	push	r21
    9df8:	6f 93       	push	r22
    9dfa:	7f 93       	push	r23
    9dfc:	8f 93       	push	r24
    9dfe:	9f 93       	push	r25
    9e00:	af 93       	push	r26
    9e02:	bf 93       	push	r27
    9e04:	ef 93       	push	r30
    9e06:	ff 93       	push	r31
    9e08:	e0 91 38 23 	lds	r30, 0x2338	; 0x802338 <tc_tcd0_ccd_callback>
    9e0c:	f0 91 39 23 	lds	r31, 0x2339	; 0x802339 <tc_tcd0_ccd_callback+0x1>
    9e10:	30 97       	sbiw	r30, 0x00	; 0
    9e12:	09 f0       	breq	.+2      	; 0x9e16 <__vector_82+0x34>
    9e14:	19 95       	eicall
    9e16:	ff 91       	pop	r31
    9e18:	ef 91       	pop	r30
    9e1a:	bf 91       	pop	r27
    9e1c:	af 91       	pop	r26
    9e1e:	9f 91       	pop	r25
    9e20:	8f 91       	pop	r24
    9e22:	7f 91       	pop	r23
    9e24:	6f 91       	pop	r22
    9e26:	5f 91       	pop	r21
    9e28:	4f 91       	pop	r20
    9e2a:	3f 91       	pop	r19
    9e2c:	2f 91       	pop	r18
    9e2e:	0f 90       	pop	r0
    9e30:	0b be       	out	0x3b, r0	; 59
    9e32:	0f 90       	pop	r0
    9e34:	0f be       	out	0x3f, r0	; 63
    9e36:	0f 90       	pop	r0
    9e38:	1f 90       	pop	r1
    9e3a:	18 95       	reti

00009e3c <__vector_83>:
    9e3c:	1f 92       	push	r1
    9e3e:	0f 92       	push	r0
    9e40:	0f b6       	in	r0, 0x3f	; 63
    9e42:	0f 92       	push	r0
    9e44:	11 24       	eor	r1, r1
    9e46:	0b b6       	in	r0, 0x3b	; 59
    9e48:	0f 92       	push	r0
    9e4a:	2f 93       	push	r18
    9e4c:	3f 93       	push	r19
    9e4e:	4f 93       	push	r20
    9e50:	5f 93       	push	r21
    9e52:	6f 93       	push	r22
    9e54:	7f 93       	push	r23
    9e56:	8f 93       	push	r24
    9e58:	9f 93       	push	r25
    9e5a:	af 93       	push	r26
    9e5c:	bf 93       	push	r27
    9e5e:	ef 93       	push	r30
    9e60:	ff 93       	push	r31
    9e62:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <tc_tcd1_ovf_callback>
    9e66:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <tc_tcd1_ovf_callback+0x1>
    9e6a:	30 97       	sbiw	r30, 0x00	; 0
    9e6c:	09 f0       	breq	.+2      	; 0x9e70 <__vector_83+0x34>
    9e6e:	19 95       	eicall
    9e70:	ff 91       	pop	r31
    9e72:	ef 91       	pop	r30
    9e74:	bf 91       	pop	r27
    9e76:	af 91       	pop	r26
    9e78:	9f 91       	pop	r25
    9e7a:	8f 91       	pop	r24
    9e7c:	7f 91       	pop	r23
    9e7e:	6f 91       	pop	r22
    9e80:	5f 91       	pop	r21
    9e82:	4f 91       	pop	r20
    9e84:	3f 91       	pop	r19
    9e86:	2f 91       	pop	r18
    9e88:	0f 90       	pop	r0
    9e8a:	0b be       	out	0x3b, r0	; 59
    9e8c:	0f 90       	pop	r0
    9e8e:	0f be       	out	0x3f, r0	; 63
    9e90:	0f 90       	pop	r0
    9e92:	1f 90       	pop	r1
    9e94:	18 95       	reti

00009e96 <__vector_84>:
    9e96:	1f 92       	push	r1
    9e98:	0f 92       	push	r0
    9e9a:	0f b6       	in	r0, 0x3f	; 63
    9e9c:	0f 92       	push	r0
    9e9e:	11 24       	eor	r1, r1
    9ea0:	0b b6       	in	r0, 0x3b	; 59
    9ea2:	0f 92       	push	r0
    9ea4:	2f 93       	push	r18
    9ea6:	3f 93       	push	r19
    9ea8:	4f 93       	push	r20
    9eaa:	5f 93       	push	r21
    9eac:	6f 93       	push	r22
    9eae:	7f 93       	push	r23
    9eb0:	8f 93       	push	r24
    9eb2:	9f 93       	push	r25
    9eb4:	af 93       	push	r26
    9eb6:	bf 93       	push	r27
    9eb8:	ef 93       	push	r30
    9eba:	ff 93       	push	r31
    9ebc:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <tc_tcd1_err_callback>
    9ec0:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <tc_tcd1_err_callback+0x1>
    9ec4:	30 97       	sbiw	r30, 0x00	; 0
    9ec6:	09 f0       	breq	.+2      	; 0x9eca <__vector_84+0x34>
    9ec8:	19 95       	eicall
    9eca:	ff 91       	pop	r31
    9ecc:	ef 91       	pop	r30
    9ece:	bf 91       	pop	r27
    9ed0:	af 91       	pop	r26
    9ed2:	9f 91       	pop	r25
    9ed4:	8f 91       	pop	r24
    9ed6:	7f 91       	pop	r23
    9ed8:	6f 91       	pop	r22
    9eda:	5f 91       	pop	r21
    9edc:	4f 91       	pop	r20
    9ede:	3f 91       	pop	r19
    9ee0:	2f 91       	pop	r18
    9ee2:	0f 90       	pop	r0
    9ee4:	0b be       	out	0x3b, r0	; 59
    9ee6:	0f 90       	pop	r0
    9ee8:	0f be       	out	0x3f, r0	; 63
    9eea:	0f 90       	pop	r0
    9eec:	1f 90       	pop	r1
    9eee:	18 95       	reti

00009ef0 <__vector_85>:
    9ef0:	1f 92       	push	r1
    9ef2:	0f 92       	push	r0
    9ef4:	0f b6       	in	r0, 0x3f	; 63
    9ef6:	0f 92       	push	r0
    9ef8:	11 24       	eor	r1, r1
    9efa:	0b b6       	in	r0, 0x3b	; 59
    9efc:	0f 92       	push	r0
    9efe:	2f 93       	push	r18
    9f00:	3f 93       	push	r19
    9f02:	4f 93       	push	r20
    9f04:	5f 93       	push	r21
    9f06:	6f 93       	push	r22
    9f08:	7f 93       	push	r23
    9f0a:	8f 93       	push	r24
    9f0c:	9f 93       	push	r25
    9f0e:	af 93       	push	r26
    9f10:	bf 93       	push	r27
    9f12:	ef 93       	push	r30
    9f14:	ff 93       	push	r31
    9f16:	e0 91 32 23 	lds	r30, 0x2332	; 0x802332 <tc_tcd1_cca_callback>
    9f1a:	f0 91 33 23 	lds	r31, 0x2333	; 0x802333 <tc_tcd1_cca_callback+0x1>
    9f1e:	30 97       	sbiw	r30, 0x00	; 0
    9f20:	09 f0       	breq	.+2      	; 0x9f24 <__vector_85+0x34>
    9f22:	19 95       	eicall
    9f24:	ff 91       	pop	r31
    9f26:	ef 91       	pop	r30
    9f28:	bf 91       	pop	r27
    9f2a:	af 91       	pop	r26
    9f2c:	9f 91       	pop	r25
    9f2e:	8f 91       	pop	r24
    9f30:	7f 91       	pop	r23
    9f32:	6f 91       	pop	r22
    9f34:	5f 91       	pop	r21
    9f36:	4f 91       	pop	r20
    9f38:	3f 91       	pop	r19
    9f3a:	2f 91       	pop	r18
    9f3c:	0f 90       	pop	r0
    9f3e:	0b be       	out	0x3b, r0	; 59
    9f40:	0f 90       	pop	r0
    9f42:	0f be       	out	0x3f, r0	; 63
    9f44:	0f 90       	pop	r0
    9f46:	1f 90       	pop	r1
    9f48:	18 95       	reti

00009f4a <__vector_86>:
    9f4a:	1f 92       	push	r1
    9f4c:	0f 92       	push	r0
    9f4e:	0f b6       	in	r0, 0x3f	; 63
    9f50:	0f 92       	push	r0
    9f52:	11 24       	eor	r1, r1
    9f54:	0b b6       	in	r0, 0x3b	; 59
    9f56:	0f 92       	push	r0
    9f58:	2f 93       	push	r18
    9f5a:	3f 93       	push	r19
    9f5c:	4f 93       	push	r20
    9f5e:	5f 93       	push	r21
    9f60:	6f 93       	push	r22
    9f62:	7f 93       	push	r23
    9f64:	8f 93       	push	r24
    9f66:	9f 93       	push	r25
    9f68:	af 93       	push	r26
    9f6a:	bf 93       	push	r27
    9f6c:	ef 93       	push	r30
    9f6e:	ff 93       	push	r31
    9f70:	e0 91 30 23 	lds	r30, 0x2330	; 0x802330 <tc_tcd1_ccb_callback>
    9f74:	f0 91 31 23 	lds	r31, 0x2331	; 0x802331 <tc_tcd1_ccb_callback+0x1>
    9f78:	30 97       	sbiw	r30, 0x00	; 0
    9f7a:	09 f0       	breq	.+2      	; 0x9f7e <__vector_86+0x34>
    9f7c:	19 95       	eicall
    9f7e:	ff 91       	pop	r31
    9f80:	ef 91       	pop	r30
    9f82:	bf 91       	pop	r27
    9f84:	af 91       	pop	r26
    9f86:	9f 91       	pop	r25
    9f88:	8f 91       	pop	r24
    9f8a:	7f 91       	pop	r23
    9f8c:	6f 91       	pop	r22
    9f8e:	5f 91       	pop	r21
    9f90:	4f 91       	pop	r20
    9f92:	3f 91       	pop	r19
    9f94:	2f 91       	pop	r18
    9f96:	0f 90       	pop	r0
    9f98:	0b be       	out	0x3b, r0	; 59
    9f9a:	0f 90       	pop	r0
    9f9c:	0f be       	out	0x3f, r0	; 63
    9f9e:	0f 90       	pop	r0
    9fa0:	1f 90       	pop	r1
    9fa2:	18 95       	reti

00009fa4 <__vector_47>:
    9fa4:	1f 92       	push	r1
    9fa6:	0f 92       	push	r0
    9fa8:	0f b6       	in	r0, 0x3f	; 63
    9faa:	0f 92       	push	r0
    9fac:	11 24       	eor	r1, r1
    9fae:	0b b6       	in	r0, 0x3b	; 59
    9fb0:	0f 92       	push	r0
    9fb2:	2f 93       	push	r18
    9fb4:	3f 93       	push	r19
    9fb6:	4f 93       	push	r20
    9fb8:	5f 93       	push	r21
    9fba:	6f 93       	push	r22
    9fbc:	7f 93       	push	r23
    9fbe:	8f 93       	push	r24
    9fc0:	9f 93       	push	r25
    9fc2:	af 93       	push	r26
    9fc4:	bf 93       	push	r27
    9fc6:	ef 93       	push	r30
    9fc8:	ff 93       	push	r31
    9fca:	e0 91 2e 23 	lds	r30, 0x232E	; 0x80232e <tc_tce0_ovf_callback>
    9fce:	f0 91 2f 23 	lds	r31, 0x232F	; 0x80232f <tc_tce0_ovf_callback+0x1>
    9fd2:	30 97       	sbiw	r30, 0x00	; 0
    9fd4:	09 f0       	breq	.+2      	; 0x9fd8 <__vector_47+0x34>
    9fd6:	19 95       	eicall
    9fd8:	ff 91       	pop	r31
    9fda:	ef 91       	pop	r30
    9fdc:	bf 91       	pop	r27
    9fde:	af 91       	pop	r26
    9fe0:	9f 91       	pop	r25
    9fe2:	8f 91       	pop	r24
    9fe4:	7f 91       	pop	r23
    9fe6:	6f 91       	pop	r22
    9fe8:	5f 91       	pop	r21
    9fea:	4f 91       	pop	r20
    9fec:	3f 91       	pop	r19
    9fee:	2f 91       	pop	r18
    9ff0:	0f 90       	pop	r0
    9ff2:	0b be       	out	0x3b, r0	; 59
    9ff4:	0f 90       	pop	r0
    9ff6:	0f be       	out	0x3f, r0	; 63
    9ff8:	0f 90       	pop	r0
    9ffa:	1f 90       	pop	r1
    9ffc:	18 95       	reti

00009ffe <__vector_48>:
    9ffe:	1f 92       	push	r1
    a000:	0f 92       	push	r0
    a002:	0f b6       	in	r0, 0x3f	; 63
    a004:	0f 92       	push	r0
    a006:	11 24       	eor	r1, r1
    a008:	0b b6       	in	r0, 0x3b	; 59
    a00a:	0f 92       	push	r0
    a00c:	2f 93       	push	r18
    a00e:	3f 93       	push	r19
    a010:	4f 93       	push	r20
    a012:	5f 93       	push	r21
    a014:	6f 93       	push	r22
    a016:	7f 93       	push	r23
    a018:	8f 93       	push	r24
    a01a:	9f 93       	push	r25
    a01c:	af 93       	push	r26
    a01e:	bf 93       	push	r27
    a020:	ef 93       	push	r30
    a022:	ff 93       	push	r31
    a024:	e0 91 2c 23 	lds	r30, 0x232C	; 0x80232c <tc_tce0_err_callback>
    a028:	f0 91 2d 23 	lds	r31, 0x232D	; 0x80232d <tc_tce0_err_callback+0x1>
    a02c:	30 97       	sbiw	r30, 0x00	; 0
    a02e:	09 f0       	breq	.+2      	; 0xa032 <__vector_48+0x34>
    a030:	19 95       	eicall
    a032:	ff 91       	pop	r31
    a034:	ef 91       	pop	r30
    a036:	bf 91       	pop	r27
    a038:	af 91       	pop	r26
    a03a:	9f 91       	pop	r25
    a03c:	8f 91       	pop	r24
    a03e:	7f 91       	pop	r23
    a040:	6f 91       	pop	r22
    a042:	5f 91       	pop	r21
    a044:	4f 91       	pop	r20
    a046:	3f 91       	pop	r19
    a048:	2f 91       	pop	r18
    a04a:	0f 90       	pop	r0
    a04c:	0b be       	out	0x3b, r0	; 59
    a04e:	0f 90       	pop	r0
    a050:	0f be       	out	0x3f, r0	; 63
    a052:	0f 90       	pop	r0
    a054:	1f 90       	pop	r1
    a056:	18 95       	reti

0000a058 <__vector_49>:
    a058:	1f 92       	push	r1
    a05a:	0f 92       	push	r0
    a05c:	0f b6       	in	r0, 0x3f	; 63
    a05e:	0f 92       	push	r0
    a060:	11 24       	eor	r1, r1
    a062:	0b b6       	in	r0, 0x3b	; 59
    a064:	0f 92       	push	r0
    a066:	2f 93       	push	r18
    a068:	3f 93       	push	r19
    a06a:	4f 93       	push	r20
    a06c:	5f 93       	push	r21
    a06e:	6f 93       	push	r22
    a070:	7f 93       	push	r23
    a072:	8f 93       	push	r24
    a074:	9f 93       	push	r25
    a076:	af 93       	push	r26
    a078:	bf 93       	push	r27
    a07a:	ef 93       	push	r30
    a07c:	ff 93       	push	r31
    a07e:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <tc_tce0_cca_callback>
    a082:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <tc_tce0_cca_callback+0x1>
    a086:	30 97       	sbiw	r30, 0x00	; 0
    a088:	09 f0       	breq	.+2      	; 0xa08c <__vector_49+0x34>
    a08a:	19 95       	eicall
    a08c:	ff 91       	pop	r31
    a08e:	ef 91       	pop	r30
    a090:	bf 91       	pop	r27
    a092:	af 91       	pop	r26
    a094:	9f 91       	pop	r25
    a096:	8f 91       	pop	r24
    a098:	7f 91       	pop	r23
    a09a:	6f 91       	pop	r22
    a09c:	5f 91       	pop	r21
    a09e:	4f 91       	pop	r20
    a0a0:	3f 91       	pop	r19
    a0a2:	2f 91       	pop	r18
    a0a4:	0f 90       	pop	r0
    a0a6:	0b be       	out	0x3b, r0	; 59
    a0a8:	0f 90       	pop	r0
    a0aa:	0f be       	out	0x3f, r0	; 63
    a0ac:	0f 90       	pop	r0
    a0ae:	1f 90       	pop	r1
    a0b0:	18 95       	reti

0000a0b2 <__vector_50>:
    a0b2:	1f 92       	push	r1
    a0b4:	0f 92       	push	r0
    a0b6:	0f b6       	in	r0, 0x3f	; 63
    a0b8:	0f 92       	push	r0
    a0ba:	11 24       	eor	r1, r1
    a0bc:	0b b6       	in	r0, 0x3b	; 59
    a0be:	0f 92       	push	r0
    a0c0:	2f 93       	push	r18
    a0c2:	3f 93       	push	r19
    a0c4:	4f 93       	push	r20
    a0c6:	5f 93       	push	r21
    a0c8:	6f 93       	push	r22
    a0ca:	7f 93       	push	r23
    a0cc:	8f 93       	push	r24
    a0ce:	9f 93       	push	r25
    a0d0:	af 93       	push	r26
    a0d2:	bf 93       	push	r27
    a0d4:	ef 93       	push	r30
    a0d6:	ff 93       	push	r31
    a0d8:	e0 91 28 23 	lds	r30, 0x2328	; 0x802328 <tc_tce0_ccb_callback>
    a0dc:	f0 91 29 23 	lds	r31, 0x2329	; 0x802329 <tc_tce0_ccb_callback+0x1>
    a0e0:	30 97       	sbiw	r30, 0x00	; 0
    a0e2:	09 f0       	breq	.+2      	; 0xa0e6 <__vector_50+0x34>
    a0e4:	19 95       	eicall
    a0e6:	ff 91       	pop	r31
    a0e8:	ef 91       	pop	r30
    a0ea:	bf 91       	pop	r27
    a0ec:	af 91       	pop	r26
    a0ee:	9f 91       	pop	r25
    a0f0:	8f 91       	pop	r24
    a0f2:	7f 91       	pop	r23
    a0f4:	6f 91       	pop	r22
    a0f6:	5f 91       	pop	r21
    a0f8:	4f 91       	pop	r20
    a0fa:	3f 91       	pop	r19
    a0fc:	2f 91       	pop	r18
    a0fe:	0f 90       	pop	r0
    a100:	0b be       	out	0x3b, r0	; 59
    a102:	0f 90       	pop	r0
    a104:	0f be       	out	0x3f, r0	; 63
    a106:	0f 90       	pop	r0
    a108:	1f 90       	pop	r1
    a10a:	18 95       	reti

0000a10c <__vector_51>:
    a10c:	1f 92       	push	r1
    a10e:	0f 92       	push	r0
    a110:	0f b6       	in	r0, 0x3f	; 63
    a112:	0f 92       	push	r0
    a114:	11 24       	eor	r1, r1
    a116:	0b b6       	in	r0, 0x3b	; 59
    a118:	0f 92       	push	r0
    a11a:	2f 93       	push	r18
    a11c:	3f 93       	push	r19
    a11e:	4f 93       	push	r20
    a120:	5f 93       	push	r21
    a122:	6f 93       	push	r22
    a124:	7f 93       	push	r23
    a126:	8f 93       	push	r24
    a128:	9f 93       	push	r25
    a12a:	af 93       	push	r26
    a12c:	bf 93       	push	r27
    a12e:	ef 93       	push	r30
    a130:	ff 93       	push	r31
    a132:	e0 91 26 23 	lds	r30, 0x2326	; 0x802326 <tc_tce0_ccc_callback>
    a136:	f0 91 27 23 	lds	r31, 0x2327	; 0x802327 <tc_tce0_ccc_callback+0x1>
    a13a:	30 97       	sbiw	r30, 0x00	; 0
    a13c:	09 f0       	breq	.+2      	; 0xa140 <__vector_51+0x34>
    a13e:	19 95       	eicall
    a140:	ff 91       	pop	r31
    a142:	ef 91       	pop	r30
    a144:	bf 91       	pop	r27
    a146:	af 91       	pop	r26
    a148:	9f 91       	pop	r25
    a14a:	8f 91       	pop	r24
    a14c:	7f 91       	pop	r23
    a14e:	6f 91       	pop	r22
    a150:	5f 91       	pop	r21
    a152:	4f 91       	pop	r20
    a154:	3f 91       	pop	r19
    a156:	2f 91       	pop	r18
    a158:	0f 90       	pop	r0
    a15a:	0b be       	out	0x3b, r0	; 59
    a15c:	0f 90       	pop	r0
    a15e:	0f be       	out	0x3f, r0	; 63
    a160:	0f 90       	pop	r0
    a162:	1f 90       	pop	r1
    a164:	18 95       	reti

0000a166 <__vector_52>:
    a166:	1f 92       	push	r1
    a168:	0f 92       	push	r0
    a16a:	0f b6       	in	r0, 0x3f	; 63
    a16c:	0f 92       	push	r0
    a16e:	11 24       	eor	r1, r1
    a170:	0b b6       	in	r0, 0x3b	; 59
    a172:	0f 92       	push	r0
    a174:	2f 93       	push	r18
    a176:	3f 93       	push	r19
    a178:	4f 93       	push	r20
    a17a:	5f 93       	push	r21
    a17c:	6f 93       	push	r22
    a17e:	7f 93       	push	r23
    a180:	8f 93       	push	r24
    a182:	9f 93       	push	r25
    a184:	af 93       	push	r26
    a186:	bf 93       	push	r27
    a188:	ef 93       	push	r30
    a18a:	ff 93       	push	r31
    a18c:	e0 91 24 23 	lds	r30, 0x2324	; 0x802324 <tc_tce0_ccd_callback>
    a190:	f0 91 25 23 	lds	r31, 0x2325	; 0x802325 <tc_tce0_ccd_callback+0x1>
    a194:	30 97       	sbiw	r30, 0x00	; 0
    a196:	09 f0       	breq	.+2      	; 0xa19a <__vector_52+0x34>
    a198:	19 95       	eicall
    a19a:	ff 91       	pop	r31
    a19c:	ef 91       	pop	r30
    a19e:	bf 91       	pop	r27
    a1a0:	af 91       	pop	r26
    a1a2:	9f 91       	pop	r25
    a1a4:	8f 91       	pop	r24
    a1a6:	7f 91       	pop	r23
    a1a8:	6f 91       	pop	r22
    a1aa:	5f 91       	pop	r21
    a1ac:	4f 91       	pop	r20
    a1ae:	3f 91       	pop	r19
    a1b0:	2f 91       	pop	r18
    a1b2:	0f 90       	pop	r0
    a1b4:	0b be       	out	0x3b, r0	; 59
    a1b6:	0f 90       	pop	r0
    a1b8:	0f be       	out	0x3f, r0	; 63
    a1ba:	0f 90       	pop	r0
    a1bc:	1f 90       	pop	r1
    a1be:	18 95       	reti

0000a1c0 <__vector_53>:
    a1c0:	1f 92       	push	r1
    a1c2:	0f 92       	push	r0
    a1c4:	0f b6       	in	r0, 0x3f	; 63
    a1c6:	0f 92       	push	r0
    a1c8:	11 24       	eor	r1, r1
    a1ca:	0b b6       	in	r0, 0x3b	; 59
    a1cc:	0f 92       	push	r0
    a1ce:	2f 93       	push	r18
    a1d0:	3f 93       	push	r19
    a1d2:	4f 93       	push	r20
    a1d4:	5f 93       	push	r21
    a1d6:	6f 93       	push	r22
    a1d8:	7f 93       	push	r23
    a1da:	8f 93       	push	r24
    a1dc:	9f 93       	push	r25
    a1de:	af 93       	push	r26
    a1e0:	bf 93       	push	r27
    a1e2:	ef 93       	push	r30
    a1e4:	ff 93       	push	r31
    a1e6:	e0 91 22 23 	lds	r30, 0x2322	; 0x802322 <tc_tce1_ovf_callback>
    a1ea:	f0 91 23 23 	lds	r31, 0x2323	; 0x802323 <tc_tce1_ovf_callback+0x1>
    a1ee:	30 97       	sbiw	r30, 0x00	; 0
    a1f0:	09 f0       	breq	.+2      	; 0xa1f4 <__vector_53+0x34>
    a1f2:	19 95       	eicall
    a1f4:	ff 91       	pop	r31
    a1f6:	ef 91       	pop	r30
    a1f8:	bf 91       	pop	r27
    a1fa:	af 91       	pop	r26
    a1fc:	9f 91       	pop	r25
    a1fe:	8f 91       	pop	r24
    a200:	7f 91       	pop	r23
    a202:	6f 91       	pop	r22
    a204:	5f 91       	pop	r21
    a206:	4f 91       	pop	r20
    a208:	3f 91       	pop	r19
    a20a:	2f 91       	pop	r18
    a20c:	0f 90       	pop	r0
    a20e:	0b be       	out	0x3b, r0	; 59
    a210:	0f 90       	pop	r0
    a212:	0f be       	out	0x3f, r0	; 63
    a214:	0f 90       	pop	r0
    a216:	1f 90       	pop	r1
    a218:	18 95       	reti

0000a21a <__vector_54>:
    a21a:	1f 92       	push	r1
    a21c:	0f 92       	push	r0
    a21e:	0f b6       	in	r0, 0x3f	; 63
    a220:	0f 92       	push	r0
    a222:	11 24       	eor	r1, r1
    a224:	0b b6       	in	r0, 0x3b	; 59
    a226:	0f 92       	push	r0
    a228:	2f 93       	push	r18
    a22a:	3f 93       	push	r19
    a22c:	4f 93       	push	r20
    a22e:	5f 93       	push	r21
    a230:	6f 93       	push	r22
    a232:	7f 93       	push	r23
    a234:	8f 93       	push	r24
    a236:	9f 93       	push	r25
    a238:	af 93       	push	r26
    a23a:	bf 93       	push	r27
    a23c:	ef 93       	push	r30
    a23e:	ff 93       	push	r31
    a240:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <tc_tce1_err_callback>
    a244:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <tc_tce1_err_callback+0x1>
    a248:	30 97       	sbiw	r30, 0x00	; 0
    a24a:	09 f0       	breq	.+2      	; 0xa24e <__vector_54+0x34>
    a24c:	19 95       	eicall
    a24e:	ff 91       	pop	r31
    a250:	ef 91       	pop	r30
    a252:	bf 91       	pop	r27
    a254:	af 91       	pop	r26
    a256:	9f 91       	pop	r25
    a258:	8f 91       	pop	r24
    a25a:	7f 91       	pop	r23
    a25c:	6f 91       	pop	r22
    a25e:	5f 91       	pop	r21
    a260:	4f 91       	pop	r20
    a262:	3f 91       	pop	r19
    a264:	2f 91       	pop	r18
    a266:	0f 90       	pop	r0
    a268:	0b be       	out	0x3b, r0	; 59
    a26a:	0f 90       	pop	r0
    a26c:	0f be       	out	0x3f, r0	; 63
    a26e:	0f 90       	pop	r0
    a270:	1f 90       	pop	r1
    a272:	18 95       	reti

0000a274 <__vector_55>:
    a274:	1f 92       	push	r1
    a276:	0f 92       	push	r0
    a278:	0f b6       	in	r0, 0x3f	; 63
    a27a:	0f 92       	push	r0
    a27c:	11 24       	eor	r1, r1
    a27e:	0b b6       	in	r0, 0x3b	; 59
    a280:	0f 92       	push	r0
    a282:	2f 93       	push	r18
    a284:	3f 93       	push	r19
    a286:	4f 93       	push	r20
    a288:	5f 93       	push	r21
    a28a:	6f 93       	push	r22
    a28c:	7f 93       	push	r23
    a28e:	8f 93       	push	r24
    a290:	9f 93       	push	r25
    a292:	af 93       	push	r26
    a294:	bf 93       	push	r27
    a296:	ef 93       	push	r30
    a298:	ff 93       	push	r31
    a29a:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <tc_tce1_cca_callback>
    a29e:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <tc_tce1_cca_callback+0x1>
    a2a2:	30 97       	sbiw	r30, 0x00	; 0
    a2a4:	09 f0       	breq	.+2      	; 0xa2a8 <__vector_55+0x34>
    a2a6:	19 95       	eicall
    a2a8:	ff 91       	pop	r31
    a2aa:	ef 91       	pop	r30
    a2ac:	bf 91       	pop	r27
    a2ae:	af 91       	pop	r26
    a2b0:	9f 91       	pop	r25
    a2b2:	8f 91       	pop	r24
    a2b4:	7f 91       	pop	r23
    a2b6:	6f 91       	pop	r22
    a2b8:	5f 91       	pop	r21
    a2ba:	4f 91       	pop	r20
    a2bc:	3f 91       	pop	r19
    a2be:	2f 91       	pop	r18
    a2c0:	0f 90       	pop	r0
    a2c2:	0b be       	out	0x3b, r0	; 59
    a2c4:	0f 90       	pop	r0
    a2c6:	0f be       	out	0x3f, r0	; 63
    a2c8:	0f 90       	pop	r0
    a2ca:	1f 90       	pop	r1
    a2cc:	18 95       	reti

0000a2ce <__vector_56>:
    a2ce:	1f 92       	push	r1
    a2d0:	0f 92       	push	r0
    a2d2:	0f b6       	in	r0, 0x3f	; 63
    a2d4:	0f 92       	push	r0
    a2d6:	11 24       	eor	r1, r1
    a2d8:	0b b6       	in	r0, 0x3b	; 59
    a2da:	0f 92       	push	r0
    a2dc:	2f 93       	push	r18
    a2de:	3f 93       	push	r19
    a2e0:	4f 93       	push	r20
    a2e2:	5f 93       	push	r21
    a2e4:	6f 93       	push	r22
    a2e6:	7f 93       	push	r23
    a2e8:	8f 93       	push	r24
    a2ea:	9f 93       	push	r25
    a2ec:	af 93       	push	r26
    a2ee:	bf 93       	push	r27
    a2f0:	ef 93       	push	r30
    a2f2:	ff 93       	push	r31
    a2f4:	e0 91 1c 23 	lds	r30, 0x231C	; 0x80231c <tc_tce1_ccb_callback>
    a2f8:	f0 91 1d 23 	lds	r31, 0x231D	; 0x80231d <tc_tce1_ccb_callback+0x1>
    a2fc:	30 97       	sbiw	r30, 0x00	; 0
    a2fe:	09 f0       	breq	.+2      	; 0xa302 <__vector_56+0x34>
    a300:	19 95       	eicall
    a302:	ff 91       	pop	r31
    a304:	ef 91       	pop	r30
    a306:	bf 91       	pop	r27
    a308:	af 91       	pop	r26
    a30a:	9f 91       	pop	r25
    a30c:	8f 91       	pop	r24
    a30e:	7f 91       	pop	r23
    a310:	6f 91       	pop	r22
    a312:	5f 91       	pop	r21
    a314:	4f 91       	pop	r20
    a316:	3f 91       	pop	r19
    a318:	2f 91       	pop	r18
    a31a:	0f 90       	pop	r0
    a31c:	0b be       	out	0x3b, r0	; 59
    a31e:	0f 90       	pop	r0
    a320:	0f be       	out	0x3f, r0	; 63
    a322:	0f 90       	pop	r0
    a324:	1f 90       	pop	r1
    a326:	18 95       	reti

0000a328 <__vector_108>:
    a328:	1f 92       	push	r1
    a32a:	0f 92       	push	r0
    a32c:	0f b6       	in	r0, 0x3f	; 63
    a32e:	0f 92       	push	r0
    a330:	11 24       	eor	r1, r1
    a332:	0b b6       	in	r0, 0x3b	; 59
    a334:	0f 92       	push	r0
    a336:	2f 93       	push	r18
    a338:	3f 93       	push	r19
    a33a:	4f 93       	push	r20
    a33c:	5f 93       	push	r21
    a33e:	6f 93       	push	r22
    a340:	7f 93       	push	r23
    a342:	8f 93       	push	r24
    a344:	9f 93       	push	r25
    a346:	af 93       	push	r26
    a348:	bf 93       	push	r27
    a34a:	ef 93       	push	r30
    a34c:	ff 93       	push	r31
    a34e:	e0 91 1a 23 	lds	r30, 0x231A	; 0x80231a <tc_tcf0_ovf_callback>
    a352:	f0 91 1b 23 	lds	r31, 0x231B	; 0x80231b <tc_tcf0_ovf_callback+0x1>
    a356:	30 97       	sbiw	r30, 0x00	; 0
    a358:	09 f0       	breq	.+2      	; 0xa35c <__vector_108+0x34>
    a35a:	19 95       	eicall
    a35c:	ff 91       	pop	r31
    a35e:	ef 91       	pop	r30
    a360:	bf 91       	pop	r27
    a362:	af 91       	pop	r26
    a364:	9f 91       	pop	r25
    a366:	8f 91       	pop	r24
    a368:	7f 91       	pop	r23
    a36a:	6f 91       	pop	r22
    a36c:	5f 91       	pop	r21
    a36e:	4f 91       	pop	r20
    a370:	3f 91       	pop	r19
    a372:	2f 91       	pop	r18
    a374:	0f 90       	pop	r0
    a376:	0b be       	out	0x3b, r0	; 59
    a378:	0f 90       	pop	r0
    a37a:	0f be       	out	0x3f, r0	; 63
    a37c:	0f 90       	pop	r0
    a37e:	1f 90       	pop	r1
    a380:	18 95       	reti

0000a382 <__vector_109>:
    a382:	1f 92       	push	r1
    a384:	0f 92       	push	r0
    a386:	0f b6       	in	r0, 0x3f	; 63
    a388:	0f 92       	push	r0
    a38a:	11 24       	eor	r1, r1
    a38c:	0b b6       	in	r0, 0x3b	; 59
    a38e:	0f 92       	push	r0
    a390:	2f 93       	push	r18
    a392:	3f 93       	push	r19
    a394:	4f 93       	push	r20
    a396:	5f 93       	push	r21
    a398:	6f 93       	push	r22
    a39a:	7f 93       	push	r23
    a39c:	8f 93       	push	r24
    a39e:	9f 93       	push	r25
    a3a0:	af 93       	push	r26
    a3a2:	bf 93       	push	r27
    a3a4:	ef 93       	push	r30
    a3a6:	ff 93       	push	r31
    a3a8:	e0 91 18 23 	lds	r30, 0x2318	; 0x802318 <tc_tcf0_err_callback>
    a3ac:	f0 91 19 23 	lds	r31, 0x2319	; 0x802319 <tc_tcf0_err_callback+0x1>
    a3b0:	30 97       	sbiw	r30, 0x00	; 0
    a3b2:	09 f0       	breq	.+2      	; 0xa3b6 <__vector_109+0x34>
    a3b4:	19 95       	eicall
    a3b6:	ff 91       	pop	r31
    a3b8:	ef 91       	pop	r30
    a3ba:	bf 91       	pop	r27
    a3bc:	af 91       	pop	r26
    a3be:	9f 91       	pop	r25
    a3c0:	8f 91       	pop	r24
    a3c2:	7f 91       	pop	r23
    a3c4:	6f 91       	pop	r22
    a3c6:	5f 91       	pop	r21
    a3c8:	4f 91       	pop	r20
    a3ca:	3f 91       	pop	r19
    a3cc:	2f 91       	pop	r18
    a3ce:	0f 90       	pop	r0
    a3d0:	0b be       	out	0x3b, r0	; 59
    a3d2:	0f 90       	pop	r0
    a3d4:	0f be       	out	0x3f, r0	; 63
    a3d6:	0f 90       	pop	r0
    a3d8:	1f 90       	pop	r1
    a3da:	18 95       	reti

0000a3dc <__vector_110>:
    a3dc:	1f 92       	push	r1
    a3de:	0f 92       	push	r0
    a3e0:	0f b6       	in	r0, 0x3f	; 63
    a3e2:	0f 92       	push	r0
    a3e4:	11 24       	eor	r1, r1
    a3e6:	0b b6       	in	r0, 0x3b	; 59
    a3e8:	0f 92       	push	r0
    a3ea:	2f 93       	push	r18
    a3ec:	3f 93       	push	r19
    a3ee:	4f 93       	push	r20
    a3f0:	5f 93       	push	r21
    a3f2:	6f 93       	push	r22
    a3f4:	7f 93       	push	r23
    a3f6:	8f 93       	push	r24
    a3f8:	9f 93       	push	r25
    a3fa:	af 93       	push	r26
    a3fc:	bf 93       	push	r27
    a3fe:	ef 93       	push	r30
    a400:	ff 93       	push	r31
    a402:	e0 91 16 23 	lds	r30, 0x2316	; 0x802316 <tc_tcf0_cca_callback>
    a406:	f0 91 17 23 	lds	r31, 0x2317	; 0x802317 <tc_tcf0_cca_callback+0x1>
    a40a:	30 97       	sbiw	r30, 0x00	; 0
    a40c:	09 f0       	breq	.+2      	; 0xa410 <__vector_110+0x34>
    a40e:	19 95       	eicall
    a410:	ff 91       	pop	r31
    a412:	ef 91       	pop	r30
    a414:	bf 91       	pop	r27
    a416:	af 91       	pop	r26
    a418:	9f 91       	pop	r25
    a41a:	8f 91       	pop	r24
    a41c:	7f 91       	pop	r23
    a41e:	6f 91       	pop	r22
    a420:	5f 91       	pop	r21
    a422:	4f 91       	pop	r20
    a424:	3f 91       	pop	r19
    a426:	2f 91       	pop	r18
    a428:	0f 90       	pop	r0
    a42a:	0b be       	out	0x3b, r0	; 59
    a42c:	0f 90       	pop	r0
    a42e:	0f be       	out	0x3f, r0	; 63
    a430:	0f 90       	pop	r0
    a432:	1f 90       	pop	r1
    a434:	18 95       	reti

0000a436 <__vector_111>:
    a436:	1f 92       	push	r1
    a438:	0f 92       	push	r0
    a43a:	0f b6       	in	r0, 0x3f	; 63
    a43c:	0f 92       	push	r0
    a43e:	11 24       	eor	r1, r1
    a440:	0b b6       	in	r0, 0x3b	; 59
    a442:	0f 92       	push	r0
    a444:	2f 93       	push	r18
    a446:	3f 93       	push	r19
    a448:	4f 93       	push	r20
    a44a:	5f 93       	push	r21
    a44c:	6f 93       	push	r22
    a44e:	7f 93       	push	r23
    a450:	8f 93       	push	r24
    a452:	9f 93       	push	r25
    a454:	af 93       	push	r26
    a456:	bf 93       	push	r27
    a458:	ef 93       	push	r30
    a45a:	ff 93       	push	r31
    a45c:	e0 91 14 23 	lds	r30, 0x2314	; 0x802314 <tc_tcf0_ccb_callback>
    a460:	f0 91 15 23 	lds	r31, 0x2315	; 0x802315 <tc_tcf0_ccb_callback+0x1>
    a464:	30 97       	sbiw	r30, 0x00	; 0
    a466:	09 f0       	breq	.+2      	; 0xa46a <__vector_111+0x34>
    a468:	19 95       	eicall
    a46a:	ff 91       	pop	r31
    a46c:	ef 91       	pop	r30
    a46e:	bf 91       	pop	r27
    a470:	af 91       	pop	r26
    a472:	9f 91       	pop	r25
    a474:	8f 91       	pop	r24
    a476:	7f 91       	pop	r23
    a478:	6f 91       	pop	r22
    a47a:	5f 91       	pop	r21
    a47c:	4f 91       	pop	r20
    a47e:	3f 91       	pop	r19
    a480:	2f 91       	pop	r18
    a482:	0f 90       	pop	r0
    a484:	0b be       	out	0x3b, r0	; 59
    a486:	0f 90       	pop	r0
    a488:	0f be       	out	0x3f, r0	; 63
    a48a:	0f 90       	pop	r0
    a48c:	1f 90       	pop	r1
    a48e:	18 95       	reti

0000a490 <__vector_112>:
    a490:	1f 92       	push	r1
    a492:	0f 92       	push	r0
    a494:	0f b6       	in	r0, 0x3f	; 63
    a496:	0f 92       	push	r0
    a498:	11 24       	eor	r1, r1
    a49a:	0b b6       	in	r0, 0x3b	; 59
    a49c:	0f 92       	push	r0
    a49e:	2f 93       	push	r18
    a4a0:	3f 93       	push	r19
    a4a2:	4f 93       	push	r20
    a4a4:	5f 93       	push	r21
    a4a6:	6f 93       	push	r22
    a4a8:	7f 93       	push	r23
    a4aa:	8f 93       	push	r24
    a4ac:	9f 93       	push	r25
    a4ae:	af 93       	push	r26
    a4b0:	bf 93       	push	r27
    a4b2:	ef 93       	push	r30
    a4b4:	ff 93       	push	r31
    a4b6:	e0 91 12 23 	lds	r30, 0x2312	; 0x802312 <tc_tcf0_ccc_callback>
    a4ba:	f0 91 13 23 	lds	r31, 0x2313	; 0x802313 <tc_tcf0_ccc_callback+0x1>
    a4be:	30 97       	sbiw	r30, 0x00	; 0
    a4c0:	09 f0       	breq	.+2      	; 0xa4c4 <__vector_112+0x34>
    a4c2:	19 95       	eicall
    a4c4:	ff 91       	pop	r31
    a4c6:	ef 91       	pop	r30
    a4c8:	bf 91       	pop	r27
    a4ca:	af 91       	pop	r26
    a4cc:	9f 91       	pop	r25
    a4ce:	8f 91       	pop	r24
    a4d0:	7f 91       	pop	r23
    a4d2:	6f 91       	pop	r22
    a4d4:	5f 91       	pop	r21
    a4d6:	4f 91       	pop	r20
    a4d8:	3f 91       	pop	r19
    a4da:	2f 91       	pop	r18
    a4dc:	0f 90       	pop	r0
    a4de:	0b be       	out	0x3b, r0	; 59
    a4e0:	0f 90       	pop	r0
    a4e2:	0f be       	out	0x3f, r0	; 63
    a4e4:	0f 90       	pop	r0
    a4e6:	1f 90       	pop	r1
    a4e8:	18 95       	reti

0000a4ea <__vector_113>:
    a4ea:	1f 92       	push	r1
    a4ec:	0f 92       	push	r0
    a4ee:	0f b6       	in	r0, 0x3f	; 63
    a4f0:	0f 92       	push	r0
    a4f2:	11 24       	eor	r1, r1
    a4f4:	0b b6       	in	r0, 0x3b	; 59
    a4f6:	0f 92       	push	r0
    a4f8:	2f 93       	push	r18
    a4fa:	3f 93       	push	r19
    a4fc:	4f 93       	push	r20
    a4fe:	5f 93       	push	r21
    a500:	6f 93       	push	r22
    a502:	7f 93       	push	r23
    a504:	8f 93       	push	r24
    a506:	9f 93       	push	r25
    a508:	af 93       	push	r26
    a50a:	bf 93       	push	r27
    a50c:	ef 93       	push	r30
    a50e:	ff 93       	push	r31
    a510:	e0 91 10 23 	lds	r30, 0x2310	; 0x802310 <tc_tcf0_ccd_callback>
    a514:	f0 91 11 23 	lds	r31, 0x2311	; 0x802311 <tc_tcf0_ccd_callback+0x1>
    a518:	30 97       	sbiw	r30, 0x00	; 0
    a51a:	09 f0       	breq	.+2      	; 0xa51e <__vector_113+0x34>
    a51c:	19 95       	eicall
    a51e:	ff 91       	pop	r31
    a520:	ef 91       	pop	r30
    a522:	bf 91       	pop	r27
    a524:	af 91       	pop	r26
    a526:	9f 91       	pop	r25
    a528:	8f 91       	pop	r24
    a52a:	7f 91       	pop	r23
    a52c:	6f 91       	pop	r22
    a52e:	5f 91       	pop	r21
    a530:	4f 91       	pop	r20
    a532:	3f 91       	pop	r19
    a534:	2f 91       	pop	r18
    a536:	0f 90       	pop	r0
    a538:	0b be       	out	0x3b, r0	; 59
    a53a:	0f 90       	pop	r0
    a53c:	0f be       	out	0x3f, r0	; 63
    a53e:	0f 90       	pop	r0
    a540:	1f 90       	pop	r1
    a542:	18 95       	reti

0000a544 <tc_enable>:
    a544:	1f 93       	push	r17
    a546:	cf 93       	push	r28
    a548:	df 93       	push	r29
    a54a:	1f 92       	push	r1
    a54c:	1f 92       	push	r1
    a54e:	cd b7       	in	r28, 0x3d	; 61
    a550:	de b7       	in	r29, 0x3e	; 62
    a552:	2f b7       	in	r18, 0x3f	; 63
    a554:	2a 83       	std	Y+2, r18	; 0x02
    a556:	f8 94       	cli
    a558:	1a 81       	ldd	r17, Y+2	; 0x02
    a55a:	28 2f       	mov	r18, r24
    a55c:	39 2f       	mov	r19, r25
    a55e:	21 15       	cp	r18, r1
    a560:	88 e0       	ldi	r24, 0x08	; 8
    a562:	38 07       	cpc	r19, r24
    a564:	49 f4       	brne	.+18     	; 0xa578 <tc_enable+0x34>
    a566:	61 e0       	ldi	r22, 0x01	; 1
    a568:	83 e0       	ldi	r24, 0x03	; 3
    a56a:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a56e:	64 e0       	ldi	r22, 0x04	; 4
    a570:	83 e0       	ldi	r24, 0x03	; 3
    a572:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a576:	4f c0       	rjmp	.+158    	; 0xa616 <tc_enable+0xd2>
    a578:	20 34       	cpi	r18, 0x40	; 64
    a57a:	88 e0       	ldi	r24, 0x08	; 8
    a57c:	38 07       	cpc	r19, r24
    a57e:	49 f4       	brne	.+18     	; 0xa592 <tc_enable+0x4e>
    a580:	62 e0       	ldi	r22, 0x02	; 2
    a582:	83 e0       	ldi	r24, 0x03	; 3
    a584:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a588:	64 e0       	ldi	r22, 0x04	; 4
    a58a:	83 e0       	ldi	r24, 0x03	; 3
    a58c:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a590:	42 c0       	rjmp	.+132    	; 0xa616 <tc_enable+0xd2>
    a592:	21 15       	cp	r18, r1
    a594:	89 e0       	ldi	r24, 0x09	; 9
    a596:	38 07       	cpc	r19, r24
    a598:	49 f4       	brne	.+18     	; 0xa5ac <tc_enable+0x68>
    a59a:	61 e0       	ldi	r22, 0x01	; 1
    a59c:	84 e0       	ldi	r24, 0x04	; 4
    a59e:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a5a2:	64 e0       	ldi	r22, 0x04	; 4
    a5a4:	84 e0       	ldi	r24, 0x04	; 4
    a5a6:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a5aa:	35 c0       	rjmp	.+106    	; 0xa616 <tc_enable+0xd2>
    a5ac:	20 34       	cpi	r18, 0x40	; 64
    a5ae:	89 e0       	ldi	r24, 0x09	; 9
    a5b0:	38 07       	cpc	r19, r24
    a5b2:	49 f4       	brne	.+18     	; 0xa5c6 <tc_enable+0x82>
    a5b4:	62 e0       	ldi	r22, 0x02	; 2
    a5b6:	84 e0       	ldi	r24, 0x04	; 4
    a5b8:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a5bc:	64 e0       	ldi	r22, 0x04	; 4
    a5be:	84 e0       	ldi	r24, 0x04	; 4
    a5c0:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a5c4:	28 c0       	rjmp	.+80     	; 0xa616 <tc_enable+0xd2>
    a5c6:	21 15       	cp	r18, r1
    a5c8:	8a e0       	ldi	r24, 0x0A	; 10
    a5ca:	38 07       	cpc	r19, r24
    a5cc:	49 f4       	brne	.+18     	; 0xa5e0 <tc_enable+0x9c>
    a5ce:	61 e0       	ldi	r22, 0x01	; 1
    a5d0:	85 e0       	ldi	r24, 0x05	; 5
    a5d2:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a5d6:	64 e0       	ldi	r22, 0x04	; 4
    a5d8:	85 e0       	ldi	r24, 0x05	; 5
    a5da:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a5de:	1b c0       	rjmp	.+54     	; 0xa616 <tc_enable+0xd2>
    a5e0:	20 34       	cpi	r18, 0x40	; 64
    a5e2:	8a e0       	ldi	r24, 0x0A	; 10
    a5e4:	38 07       	cpc	r19, r24
    a5e6:	49 f4       	brne	.+18     	; 0xa5fa <tc_enable+0xb6>
    a5e8:	62 e0       	ldi	r22, 0x02	; 2
    a5ea:	85 e0       	ldi	r24, 0x05	; 5
    a5ec:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a5f0:	64 e0       	ldi	r22, 0x04	; 4
    a5f2:	85 e0       	ldi	r24, 0x05	; 5
    a5f4:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a5f8:	0e c0       	rjmp	.+28     	; 0xa616 <tc_enable+0xd2>
    a5fa:	21 15       	cp	r18, r1
    a5fc:	3b 40       	sbci	r19, 0x0B	; 11
    a5fe:	49 f4       	brne	.+18     	; 0xa612 <tc_enable+0xce>
    a600:	61 e0       	ldi	r22, 0x01	; 1
    a602:	86 e0       	ldi	r24, 0x06	; 6
    a604:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a608:	64 e0       	ldi	r22, 0x04	; 4
    a60a:	86 e0       	ldi	r24, 0x06	; 6
    a60c:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <sysclk_enable_module>
    a610:	02 c0       	rjmp	.+4      	; 0xa616 <tc_enable+0xd2>
    a612:	1f bf       	out	0x3f, r17	; 63
    a614:	10 c0       	rjmp	.+32     	; 0xa636 <tc_enable+0xf2>
    a616:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    a61a:	8f 3f       	cpi	r24, 0xFF	; 255
    a61c:	09 f4       	brne	.+2      	; 0xa620 <tc_enable+0xdc>
    a61e:	ff cf       	rjmp	.-2      	; 0xa61e <tc_enable+0xda>
    a620:	8f b7       	in	r24, 0x3f	; 63
    a622:	89 83       	std	Y+1, r24	; 0x01
    a624:	f8 94       	cli
    a626:	99 81       	ldd	r25, Y+1	; 0x01
    a628:	eb e7       	ldi	r30, 0x7B	; 123
    a62a:	fe e2       	ldi	r31, 0x2E	; 46
    a62c:	81 81       	ldd	r24, Z+1	; 0x01
    a62e:	8f 5f       	subi	r24, 0xFF	; 255
    a630:	81 83       	std	Z+1, r24	; 0x01
    a632:	9f bf       	out	0x3f, r25	; 63
    a634:	1f bf       	out	0x3f, r17	; 63
    a636:	0f 90       	pop	r0
    a638:	0f 90       	pop	r0
    a63a:	df 91       	pop	r29
    a63c:	cf 91       	pop	r28
    a63e:	1f 91       	pop	r17
    a640:	08 95       	ret

0000a642 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    a642:	81 15       	cp	r24, r1
    a644:	28 e0       	ldi	r18, 0x08	; 8
    a646:	92 07       	cpc	r25, r18
    a648:	29 f4       	brne	.+10     	; 0xa654 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    a64a:	60 93 56 23 	sts	0x2356, r22	; 0x802356 <tc_tcc0_ovf_callback>
    a64e:	70 93 57 23 	sts	0x2357, r23	; 0x802357 <tc_tcc0_ovf_callback+0x1>
    a652:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    a654:	80 34       	cpi	r24, 0x40	; 64
    a656:	28 e0       	ldi	r18, 0x08	; 8
    a658:	92 07       	cpc	r25, r18
    a65a:	29 f4       	brne	.+10     	; 0xa666 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    a65c:	60 93 4a 23 	sts	0x234A, r22	; 0x80234a <tc_tcc1_ovf_callback>
    a660:	70 93 4b 23 	sts	0x234B, r23	; 0x80234b <tc_tcc1_ovf_callback+0x1>
    a664:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    a666:	81 15       	cp	r24, r1
    a668:	29 e0       	ldi	r18, 0x09	; 9
    a66a:	92 07       	cpc	r25, r18
    a66c:	29 f4       	brne	.+10     	; 0xa678 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    a66e:	60 93 42 23 	sts	0x2342, r22	; 0x802342 <tc_tcd0_ovf_callback>
    a672:	70 93 43 23 	sts	0x2343, r23	; 0x802343 <tc_tcd0_ovf_callback+0x1>
    a676:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    a678:	80 34       	cpi	r24, 0x40	; 64
    a67a:	29 e0       	ldi	r18, 0x09	; 9
    a67c:	92 07       	cpc	r25, r18
    a67e:	29 f4       	brne	.+10     	; 0xa68a <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    a680:	60 93 36 23 	sts	0x2336, r22	; 0x802336 <tc_tcd1_ovf_callback>
    a684:	70 93 37 23 	sts	0x2337, r23	; 0x802337 <tc_tcd1_ovf_callback+0x1>
    a688:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    a68a:	81 15       	cp	r24, r1
    a68c:	2a e0       	ldi	r18, 0x0A	; 10
    a68e:	92 07       	cpc	r25, r18
    a690:	29 f4       	brne	.+10     	; 0xa69c <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    a692:	60 93 2e 23 	sts	0x232E, r22	; 0x80232e <tc_tce0_ovf_callback>
    a696:	70 93 2f 23 	sts	0x232F, r23	; 0x80232f <tc_tce0_ovf_callback+0x1>
    a69a:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    a69c:	80 34       	cpi	r24, 0x40	; 64
    a69e:	2a e0       	ldi	r18, 0x0A	; 10
    a6a0:	92 07       	cpc	r25, r18
    a6a2:	29 f4       	brne	.+10     	; 0xa6ae <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    a6a4:	60 93 22 23 	sts	0x2322, r22	; 0x802322 <tc_tce1_ovf_callback>
    a6a8:	70 93 23 23 	sts	0x2323, r23	; 0x802323 <tc_tce1_ovf_callback+0x1>
    a6ac:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    a6ae:	81 15       	cp	r24, r1
    a6b0:	9b 40       	sbci	r25, 0x0B	; 11
    a6b2:	21 f4       	brne	.+8      	; 0xa6bc <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    a6b4:	60 93 1a 23 	sts	0x231A, r22	; 0x80231a <tc_tcf0_ovf_callback>
    a6b8:	70 93 1b 23 	sts	0x231B, r23	; 0x80231b <tc_tcf0_ovf_callback+0x1>
    a6bc:	08 95       	ret

0000a6be <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    a6be:	cf 93       	push	r28
    a6c0:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    a6c2:	e0 91 58 23 	lds	r30, 0x2358	; 0x802358 <transfer>
    a6c6:	f0 91 59 23 	lds	r31, 0x2359	; 0x802359 <transfer+0x1>
    a6ca:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    a6cc:	83 ff       	sbrs	r24, 3
    a6ce:	08 c0       	rjmp	.+16     	; 0xa6e0 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    a6d0:	88 60       	ori	r24, 0x08	; 8
    a6d2:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    a6d4:	83 e0       	ldi	r24, 0x03	; 3
    a6d6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    a6d8:	86 ef       	ldi	r24, 0xF6	; 246
    a6da:	80 93 62 23 	sts	0x2362, r24	; 0x802362 <transfer+0xa>
    a6de:	83 c0       	rjmp	.+262    	; 0xa7e6 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    a6e0:	98 2f       	mov	r25, r24
    a6e2:	94 71       	andi	r25, 0x14	; 20
    a6e4:	31 f0       	breq	.+12     	; 0xa6f2 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a6e6:	83 e0       	ldi	r24, 0x03	; 3
    a6e8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    a6ea:	8f ef       	ldi	r24, 0xFF	; 255
    a6ec:	80 93 62 23 	sts	0x2362, r24	; 0x802362 <transfer+0xa>
    a6f0:	7a c0       	rjmp	.+244    	; 0xa7e6 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    a6f2:	86 ff       	sbrs	r24, 6
    a6f4:	43 c0       	rjmp	.+134    	; 0xa77c <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    a6f6:	c8 e5       	ldi	r28, 0x58	; 88
    a6f8:	d3 e2       	ldi	r29, 0x23	; 35
    a6fa:	aa 81       	ldd	r26, Y+2	; 0x02
    a6fc:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    a6fe:	8c 81       	ldd	r24, Y+4	; 0x04
    a700:	9d 81       	ldd	r25, Y+5	; 0x05
    a702:	14 96       	adiw	r26, 0x04	; 4
    a704:	2d 91       	ld	r18, X+
    a706:	3c 91       	ld	r19, X
    a708:	15 97       	sbiw	r26, 0x05	; 5
    a70a:	82 17       	cp	r24, r18
    a70c:	93 07       	cpc	r25, r19
    a70e:	6c f4       	brge	.+26     	; 0xa72a <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    a710:	9c 01       	movw	r18, r24
    a712:	2f 5f       	subi	r18, 0xFF	; 255
    a714:	3f 4f       	sbci	r19, 0xFF	; 255
    a716:	20 93 5c 23 	sts	0x235C, r18	; 0x80235c <transfer+0x4>
    a71a:	30 93 5d 23 	sts	0x235D, r19	; 0x80235d <transfer+0x5>
    a71e:	a8 0f       	add	r26, r24
    a720:	b9 1f       	adc	r27, r25
    a722:	11 96       	adiw	r26, 0x01	; 1
    a724:	8c 91       	ld	r24, X
    a726:	87 83       	std	Z+7, r24	; 0x07
    a728:	5e c0       	rjmp	.+188    	; 0xa7e6 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    a72a:	80 91 5e 23 	lds	r24, 0x235E	; 0x80235e <transfer+0x6>
    a72e:	90 91 5f 23 	lds	r25, 0x235F	; 0x80235f <transfer+0x7>
    a732:	18 96       	adiw	r26, 0x08	; 8
    a734:	2d 91       	ld	r18, X+
    a736:	3c 91       	ld	r19, X
    a738:	19 97       	sbiw	r26, 0x09	; 9
    a73a:	82 17       	cp	r24, r18
    a73c:	93 07       	cpc	r25, r19
    a73e:	c8 f4       	brcc	.+50     	; 0xa772 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    a740:	20 91 60 23 	lds	r18, 0x2360	; 0x802360 <transfer+0x8>
    a744:	22 23       	and	r18, r18
    a746:	21 f0       	breq	.+8      	; 0xa750 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    a748:	86 81       	ldd	r24, Z+6	; 0x06
    a74a:	81 60       	ori	r24, 0x01	; 1
    a74c:	86 83       	std	Z+6, r24	; 0x06
    a74e:	4b c0       	rjmp	.+150    	; 0xa7e6 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    a750:	16 96       	adiw	r26, 0x06	; 6
    a752:	2d 91       	ld	r18, X+
    a754:	3c 91       	ld	r19, X
    a756:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    a758:	ac 01       	movw	r20, r24
    a75a:	4f 5f       	subi	r20, 0xFF	; 255
    a75c:	5f 4f       	sbci	r21, 0xFF	; 255
    a75e:	40 93 5e 23 	sts	0x235E, r20	; 0x80235e <transfer+0x6>
    a762:	50 93 5f 23 	sts	0x235F, r21	; 0x80235f <transfer+0x7>
    a766:	d9 01       	movw	r26, r18
    a768:	a8 0f       	add	r26, r24
    a76a:	b9 1f       	adc	r27, r25
    a76c:	8c 91       	ld	r24, X
    a76e:	87 83       	std	Z+7, r24	; 0x07
    a770:	3a c0       	rjmp	.+116    	; 0xa7e6 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a772:	83 e0       	ldi	r24, 0x03	; 3
    a774:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    a776:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <transfer+0xa>
    a77a:	35 c0       	rjmp	.+106    	; 0xa7e6 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    a77c:	88 23       	and	r24, r24
    a77e:	84 f5       	brge	.+96     	; 0xa7e0 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    a780:	a8 e5       	ldi	r26, 0x58	; 88
    a782:	b3 e2       	ldi	r27, 0x23	; 35
    a784:	12 96       	adiw	r26, 0x02	; 2
    a786:	cd 91       	ld	r28, X+
    a788:	dc 91       	ld	r29, X
    a78a:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    a78c:	16 96       	adiw	r26, 0x06	; 6
    a78e:	8d 91       	ld	r24, X+
    a790:	9c 91       	ld	r25, X
    a792:	17 97       	sbiw	r26, 0x07	; 7
    a794:	28 85       	ldd	r18, Y+8	; 0x08
    a796:	39 85       	ldd	r19, Y+9	; 0x09
    a798:	82 17       	cp	r24, r18
    a79a:	93 07       	cpc	r25, r19
    a79c:	d8 f4       	brcc	.+54     	; 0xa7d4 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    a79e:	6e 81       	ldd	r22, Y+6	; 0x06
    a7a0:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    a7a2:	9c 01       	movw	r18, r24
    a7a4:	2f 5f       	subi	r18, 0xFF	; 255
    a7a6:	3f 4f       	sbci	r19, 0xFF	; 255
    a7a8:	20 93 5e 23 	sts	0x235E, r18	; 0x80235e <transfer+0x6>
    a7ac:	30 93 5f 23 	sts	0x235F, r19	; 0x80235f <transfer+0x7>
    a7b0:	47 81       	ldd	r20, Z+7	; 0x07
    a7b2:	db 01       	movw	r26, r22
    a7b4:	a8 0f       	add	r26, r24
    a7b6:	b9 1f       	adc	r27, r25
    a7b8:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    a7ba:	88 85       	ldd	r24, Y+8	; 0x08
    a7bc:	99 85       	ldd	r25, Y+9	; 0x09
    a7be:	28 17       	cp	r18, r24
    a7c0:	39 07       	cpc	r19, r25
    a7c2:	18 f4       	brcc	.+6      	; 0xa7ca <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    a7c4:	82 e0       	ldi	r24, 0x02	; 2
    a7c6:	83 83       	std	Z+3, r24	; 0x03
    a7c8:	0e c0       	rjmp	.+28     	; 0xa7e6 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    a7ca:	87 e0       	ldi	r24, 0x07	; 7
    a7cc:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    a7ce:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <transfer+0xa>
    a7d2:	09 c0       	rjmp	.+18     	; 0xa7e6 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a7d4:	83 e0       	ldi	r24, 0x03	; 3
    a7d6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    a7d8:	89 ef       	ldi	r24, 0xF9	; 249
    a7da:	80 93 62 23 	sts	0x2362, r24	; 0x802362 <transfer+0xa>
    a7de:	03 c0       	rjmp	.+6      	; 0xa7e6 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    a7e0:	8b ef       	ldi	r24, 0xFB	; 251
    a7e2:	80 93 62 23 	sts	0x2362, r24	; 0x802362 <transfer+0xa>
	}
}
    a7e6:	df 91       	pop	r29
    a7e8:	cf 91       	pop	r28
    a7ea:	08 95       	ret

0000a7ec <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    a7ec:	1f 92       	push	r1
    a7ee:	0f 92       	push	r0
    a7f0:	0f b6       	in	r0, 0x3f	; 63
    a7f2:	0f 92       	push	r0
    a7f4:	11 24       	eor	r1, r1
    a7f6:	0b b6       	in	r0, 0x3b	; 59
    a7f8:	0f 92       	push	r0
    a7fa:	2f 93       	push	r18
    a7fc:	3f 93       	push	r19
    a7fe:	4f 93       	push	r20
    a800:	5f 93       	push	r21
    a802:	6f 93       	push	r22
    a804:	7f 93       	push	r23
    a806:	8f 93       	push	r24
    a808:	9f 93       	push	r25
    a80a:	af 93       	push	r26
    a80c:	bf 93       	push	r27
    a80e:	ef 93       	push	r30
    a810:	ff 93       	push	r31
    a812:	55 df       	rcall	.-342    	; 0xa6be <twim_interrupt_handler>
    a814:	ff 91       	pop	r31
    a816:	ef 91       	pop	r30
    a818:	bf 91       	pop	r27
    a81a:	af 91       	pop	r26
    a81c:	9f 91       	pop	r25
    a81e:	8f 91       	pop	r24
    a820:	7f 91       	pop	r23
    a822:	6f 91       	pop	r22
    a824:	5f 91       	pop	r21
    a826:	4f 91       	pop	r20
    a828:	3f 91       	pop	r19
    a82a:	2f 91       	pop	r18
    a82c:	0f 90       	pop	r0
    a82e:	0b be       	out	0x3b, r0	; 59
    a830:	0f 90       	pop	r0
    a832:	0f be       	out	0x3f, r0	; 63
    a834:	0f 90       	pop	r0
    a836:	1f 90       	pop	r1
    a838:	18 95       	reti

0000a83a <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    a83a:	1f 92       	push	r1
    a83c:	0f 92       	push	r0
    a83e:	0f b6       	in	r0, 0x3f	; 63
    a840:	0f 92       	push	r0
    a842:	11 24       	eor	r1, r1
    a844:	0b b6       	in	r0, 0x3b	; 59
    a846:	0f 92       	push	r0
    a848:	2f 93       	push	r18
    a84a:	3f 93       	push	r19
    a84c:	4f 93       	push	r20
    a84e:	5f 93       	push	r21
    a850:	6f 93       	push	r22
    a852:	7f 93       	push	r23
    a854:	8f 93       	push	r24
    a856:	9f 93       	push	r25
    a858:	af 93       	push	r26
    a85a:	bf 93       	push	r27
    a85c:	ef 93       	push	r30
    a85e:	ff 93       	push	r31
    a860:	2e df       	rcall	.-420    	; 0xa6be <twim_interrupt_handler>
    a862:	ff 91       	pop	r31
    a864:	ef 91       	pop	r30
    a866:	bf 91       	pop	r27
    a868:	af 91       	pop	r26
    a86a:	9f 91       	pop	r25
    a86c:	8f 91       	pop	r24
    a86e:	7f 91       	pop	r23
    a870:	6f 91       	pop	r22
    a872:	5f 91       	pop	r21
    a874:	4f 91       	pop	r20
    a876:	3f 91       	pop	r19
    a878:	2f 91       	pop	r18
    a87a:	0f 90       	pop	r0
    a87c:	0b be       	out	0x3b, r0	; 59
    a87e:	0f 90       	pop	r0
    a880:	0f be       	out	0x3f, r0	; 63
    a882:	0f 90       	pop	r0
    a884:	1f 90       	pop	r1
    a886:	18 95       	reti

0000a888 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    a888:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    a88a:	db 01       	movw	r26, r22
    a88c:	14 96       	adiw	r26, 0x04	; 4
    a88e:	8c 91       	ld	r24, X
    a890:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    a892:	88 eb       	ldi	r24, 0xB8	; 184
    a894:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    a896:	81 e0       	ldi	r24, 0x01	; 1
    a898:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    a89a:	e8 e5       	ldi	r30, 0x58	; 88
    a89c:	f3 e2       	ldi	r31, 0x23	; 35
    a89e:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    a8a0:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    a8a2:	e0 ea       	ldi	r30, 0xA0	; 160
    a8a4:	f0 e0       	ldi	r31, 0x00	; 0
    a8a6:	82 81       	ldd	r24, Z+2	; 0x02
    a8a8:	82 60       	ori	r24, 0x02	; 2
    a8aa:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    a8ac:	78 94       	sei

	return STATUS_OK;
}
    a8ae:	80 e0       	ldi	r24, 0x00	; 0
    a8b0:	08 95       	ret

0000a8b2 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    a8b2:	cf 93       	push	r28
    a8b4:	df 93       	push	r29
    a8b6:	1f 92       	push	r1
    a8b8:	cd b7       	in	r28, 0x3d	; 61
    a8ba:	de b7       	in	r29, 0x3e	; 62
    a8bc:	9c 01       	movw	r18, r24
    a8be:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    a8c0:	89 2b       	or	r24, r25
    a8c2:	09 f4       	brne	.+2      	; 0xa8c6 <twi_master_transfer+0x14>
    a8c4:	51 c0       	rjmp	.+162    	; 0xa968 <twi_master_transfer+0xb6>
    a8c6:	30 97       	sbiw	r30, 0x00	; 0
    a8c8:	09 f4       	brne	.+2      	; 0xa8cc <twi_master_transfer+0x1a>
    a8ca:	50 c0       	rjmp	.+160    	; 0xa96c <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    a8cc:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    a8ce:	80 91 61 23 	lds	r24, 0x2361	; 0x802361 <transfer+0x9>
    a8d2:	88 23       	and	r24, r24
    a8d4:	19 f0       	breq	.+6      	; 0xa8dc <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    a8d6:	99 23       	and	r25, r25
    a8d8:	f1 f3       	breq	.-4      	; 0xa8d6 <twi_master_transfer+0x24>
    a8da:	4a c0       	rjmp	.+148    	; 0xa970 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    a8dc:	8f b7       	in	r24, 0x3f	; 63
    a8de:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    a8e0:	f8 94       	cli
	return flags;
    a8e2:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    a8e4:	a8 e5       	ldi	r26, 0x58	; 88
    a8e6:	b3 e2       	ldi	r27, 0x23	; 35
    a8e8:	91 e0       	ldi	r25, 0x01	; 1
    a8ea:	19 96       	adiw	r26, 0x09	; 9
    a8ec:	9c 93       	st	X, r25
    a8ee:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    a8f0:	90 e8       	ldi	r25, 0x80	; 128
    a8f2:	1a 96       	adiw	r26, 0x0a	; 10
    a8f4:	9c 93       	st	X, r25
    a8f6:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    a8f8:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    a8fa:	2d 93       	st	X+, r18
    a8fc:	3c 93       	st	X, r19
    a8fe:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    a900:	12 96       	adiw	r26, 0x02	; 2
    a902:	6d 93       	st	X+, r22
    a904:	7c 93       	st	X, r23
    a906:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    a908:	14 96       	adiw	r26, 0x04	; 4
    a90a:	1d 92       	st	X+, r1
    a90c:	1c 92       	st	X, r1
    a90e:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    a910:	16 96       	adiw	r26, 0x06	; 6
    a912:	1d 92       	st	X+, r1
    a914:	1c 92       	st	X, r1
    a916:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    a918:	18 96       	adiw	r26, 0x08	; 8
    a91a:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    a91c:	80 81       	ld	r24, Z
    a91e:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    a920:	64 81       	ldd	r22, Z+4	; 0x04
    a922:	75 81       	ldd	r23, Z+5	; 0x05
    a924:	67 2b       	or	r22, r23
    a926:	11 f4       	brne	.+4      	; 0xa92c <twi_master_transfer+0x7a>
    a928:	41 11       	cpse	r20, r1
    a92a:	03 c0       	rjmp	.+6      	; 0xa932 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    a92c:	f9 01       	movw	r30, r18
    a92e:	86 83       	std	Z+6, r24	; 0x06
    a930:	03 c0       	rjmp	.+6      	; 0xa938 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    a932:	81 60       	ori	r24, 0x01	; 1
    a934:	f9 01       	movw	r30, r18
    a936:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    a938:	e8 e5       	ldi	r30, 0x58	; 88
    a93a:	f3 e2       	ldi	r31, 0x23	; 35
    a93c:	92 85       	ldd	r25, Z+10	; 0x0a
    a93e:	90 38       	cpi	r25, 0x80	; 128
    a940:	e9 f3       	breq	.-6      	; 0xa93c <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    a942:	f9 01       	movw	r30, r18
    a944:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    a946:	83 70       	andi	r24, 0x03	; 3
    a948:	81 30       	cpi	r24, 0x01	; 1
    a94a:	49 f0       	breq	.+18     	; 0xa95e <twi_master_transfer+0xac>
    a94c:	a8 e5       	ldi	r26, 0x58	; 88
    a94e:	b3 e2       	ldi	r27, 0x23	; 35
    a950:	ed 91       	ld	r30, X+
    a952:	fc 91       	ld	r31, X
    a954:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    a956:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    a958:	83 70       	andi	r24, 0x03	; 3
    a95a:	81 30       	cpi	r24, 0x01	; 1
    a95c:	c9 f7       	brne	.-14     	; 0xa950 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    a95e:	e8 e5       	ldi	r30, 0x58	; 88
    a960:	f3 e2       	ldi	r31, 0x23	; 35
    a962:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    a964:	11 86       	std	Z+9, r1	; 0x09
    a966:	05 c0       	rjmp	.+10     	; 0xa972 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    a968:	88 ef       	ldi	r24, 0xF8	; 248
    a96a:	03 c0       	rjmp	.+6      	; 0xa972 <twi_master_transfer+0xc0>
    a96c:	88 ef       	ldi	r24, 0xF8	; 248
    a96e:	01 c0       	rjmp	.+2      	; 0xa972 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    a970:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    a972:	0f 90       	pop	r0
    a974:	df 91       	pop	r29
    a976:	cf 91       	pop	r28
    a978:	08 95       	ret

0000a97a <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    a97a:	cf 93       	push	r28
    a97c:	df 93       	push	r29
    a97e:	1f 92       	push	r1
    a980:	1f 92       	push	r1
    a982:	cd b7       	in	r28, 0x3d	; 61
    a984:	de b7       	in	r29, 0x3e	; 62
    a986:	81 11       	cpse	r24, r1
    a988:	26 c0       	rjmp	.+76     	; 0xa9d6 <udd_sleep_mode+0x5c>
    a98a:	90 91 90 24 	lds	r25, 0x2490	; 0x802490 <udd_b_idle>
    a98e:	99 23       	and	r25, r25
    a990:	f9 f0       	breq	.+62     	; 0xa9d0 <udd_sleep_mode+0x56>
    a992:	90 91 7c 2e 	lds	r25, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    a996:	91 11       	cpse	r25, r1
    a998:	01 c0       	rjmp	.+2      	; 0xa99c <udd_sleep_mode+0x22>
    a99a:	ff cf       	rjmp	.-2      	; 0xa99a <udd_sleep_mode+0x20>
    a99c:	9f b7       	in	r25, 0x3f	; 63
    a99e:	9a 83       	std	Y+2, r25	; 0x02
    a9a0:	f8 94       	cli
    a9a2:	2a 81       	ldd	r18, Y+2	; 0x02
    a9a4:	eb e7       	ldi	r30, 0x7B	; 123
    a9a6:	fe e2       	ldi	r31, 0x2E	; 46
    a9a8:	91 81       	ldd	r25, Z+1	; 0x01
    a9aa:	91 50       	subi	r25, 0x01	; 1
    a9ac:	91 83       	std	Z+1, r25	; 0x01
    a9ae:	2f bf       	out	0x3f, r18	; 63
    a9b0:	0f c0       	rjmp	.+30     	; 0xa9d0 <udd_sleep_mode+0x56>
    a9b2:	90 91 7c 2e 	lds	r25, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    a9b6:	9f 3f       	cpi	r25, 0xFF	; 255
    a9b8:	09 f4       	brne	.+2      	; 0xa9bc <udd_sleep_mode+0x42>
    a9ba:	ff cf       	rjmp	.-2      	; 0xa9ba <udd_sleep_mode+0x40>
    a9bc:	9f b7       	in	r25, 0x3f	; 63
    a9be:	99 83       	std	Y+1, r25	; 0x01
    a9c0:	f8 94       	cli
    a9c2:	29 81       	ldd	r18, Y+1	; 0x01
    a9c4:	eb e7       	ldi	r30, 0x7B	; 123
    a9c6:	fe e2       	ldi	r31, 0x2E	; 46
    a9c8:	91 81       	ldd	r25, Z+1	; 0x01
    a9ca:	9f 5f       	subi	r25, 0xFF	; 255
    a9cc:	91 83       	std	Z+1, r25	; 0x01
    a9ce:	2f bf       	out	0x3f, r18	; 63
    a9d0:	80 93 90 24 	sts	0x2490, r24	; 0x802490 <udd_b_idle>
    a9d4:	05 c0       	rjmp	.+10     	; 0xa9e0 <udd_sleep_mode+0x66>
    a9d6:	90 91 90 24 	lds	r25, 0x2490	; 0x802490 <udd_b_idle>
    a9da:	99 23       	and	r25, r25
    a9dc:	51 f3       	breq	.-44     	; 0xa9b2 <udd_sleep_mode+0x38>
    a9de:	f8 cf       	rjmp	.-16     	; 0xa9d0 <udd_sleep_mode+0x56>
    a9e0:	0f 90       	pop	r0
    a9e2:	0f 90       	pop	r0
    a9e4:	df 91       	pop	r29
    a9e6:	cf 91       	pop	r28
    a9e8:	08 95       	ret

0000a9ea <udd_ctrl_init>:
    a9ea:	0f 93       	push	r16
    a9ec:	e8 ec       	ldi	r30, 0xC8	; 200
    a9ee:	f4 e0       	ldi	r31, 0x04	; 4
    a9f0:	80 81       	ld	r24, Z
    a9f2:	8f 7d       	andi	r24, 0xDF	; 223
    a9f4:	80 83       	st	Z, r24
    a9f6:	80 81       	ld	r24, Z
    a9f8:	8f 7d       	andi	r24, 0xDF	; 223
    a9fa:	80 83       	st	Z, r24
    a9fc:	e4 e6       	ldi	r30, 0x64	; 100
    a9fe:	f4 e2       	ldi	r31, 0x24	; 36
    aa00:	02 e0       	ldi	r16, 0x02	; 2
    aa02:	05 93       	las	Z, r16
    aa04:	10 92 66 24 	sts	0x2466, r1	; 0x802466 <udd_sram+0x16>
    aa08:	10 92 67 24 	sts	0x2467, r1	; 0x802467 <udd_sram+0x17>
    aa0c:	00 e2       	ldi	r16, 0x20	; 32
    aa0e:	06 93       	lac	Z, r16
    aa10:	00 e4       	ldi	r16, 0x40	; 64
    aa12:	06 93       	lac	Z, r16
    aa14:	ec e5       	ldi	r30, 0x5C	; 92
    aa16:	f4 e2       	ldi	r31, 0x24	; 36
    aa18:	00 e4       	ldi	r16, 0x40	; 64
    aa1a:	06 93       	lac	Z, r16
    aa1c:	e5 ee       	ldi	r30, 0xE5	; 229
    aa1e:	fd e2       	ldi	r31, 0x2D	; 45
    aa20:	14 86       	std	Z+12, r1	; 0x0c
    aa22:	15 86       	std	Z+13, r1	; 0x0d
    aa24:	16 86       	std	Z+14, r1	; 0x0e
    aa26:	17 86       	std	Z+15, r1	; 0x0f
    aa28:	12 86       	std	Z+10, r1	; 0x0a
    aa2a:	13 86       	std	Z+11, r1	; 0x0b
    aa2c:	10 92 4c 24 	sts	0x244C, r1	; 0x80244c <udd_ep_control_state>
    aa30:	0f 91       	pop	r16
    aa32:	08 95       	ret

0000aa34 <udd_ctrl_stall_data>:
    aa34:	0f 93       	push	r16
    aa36:	85 e0       	ldi	r24, 0x05	; 5
    aa38:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
    aa3c:	e5 e6       	ldi	r30, 0x65	; 101
    aa3e:	f4 e2       	ldi	r31, 0x24	; 36
    aa40:	04 e0       	ldi	r16, 0x04	; 4
    aa42:	05 93       	las	Z, r16
    aa44:	ed e5       	ldi	r30, 0x5D	; 93
    aa46:	f4 e2       	ldi	r31, 0x24	; 36
    aa48:	04 e0       	ldi	r16, 0x04	; 4
    aa4a:	05 93       	las	Z, r16
    aa4c:	0f 91       	pop	r16
    aa4e:	08 95       	ret

0000aa50 <udd_ctrl_send_zlp_in>:
    aa50:	0f 93       	push	r16
    aa52:	83 e0       	ldi	r24, 0x03	; 3
    aa54:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
    aa58:	10 92 66 24 	sts	0x2466, r1	; 0x802466 <udd_sram+0x16>
    aa5c:	10 92 67 24 	sts	0x2467, r1	; 0x802467 <udd_sram+0x17>
    aa60:	e4 e6       	ldi	r30, 0x64	; 100
    aa62:	f4 e2       	ldi	r31, 0x24	; 36
    aa64:	02 e0       	ldi	r16, 0x02	; 2
    aa66:	06 93       	lac	Z, r16
    aa68:	0f 91       	pop	r16
    aa6a:	08 95       	ret

0000aa6c <udd_ctrl_endofrequest>:
    aa6c:	e0 91 f1 2d 	lds	r30, 0x2DF1	; 0x802df1 <udd_g_ctrlreq+0xc>
    aa70:	f0 91 f2 2d 	lds	r31, 0x2DF2	; 0x802df2 <udd_g_ctrlreq+0xd>
    aa74:	30 97       	sbiw	r30, 0x00	; 0
    aa76:	09 f0       	breq	.+2      	; 0xaa7a <udd_ctrl_endofrequest+0xe>
    aa78:	19 95       	eicall
    aa7a:	08 95       	ret

0000aa7c <udd_ctrl_in_sent>:
    aa7c:	0f 93       	push	r16
    aa7e:	cf 93       	push	r28
    aa80:	df 93       	push	r29
    aa82:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <udd_ep_control_state>
    aa86:	83 30       	cpi	r24, 0x03	; 3
    aa88:	19 f4       	brne	.+6      	; 0xaa90 <udd_ctrl_in_sent+0x14>
    aa8a:	f0 df       	rcall	.-32     	; 0xaa6c <udd_ctrl_endofrequest>
    aa8c:	ae df       	rcall	.-164    	; 0xa9ea <udd_ctrl_init>
    aa8e:	5e c0       	rjmp	.+188    	; 0xab4c <udd_ctrl_in_sent+0xd0>
    aa90:	80 91 48 24 	lds	r24, 0x2448	; 0x802448 <udd_ctrl_payload_nb_trans>
    aa94:	90 91 49 24 	lds	r25, 0x2449	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    aa98:	c0 91 ef 2d 	lds	r28, 0x2DEF	; 0x802def <udd_g_ctrlreq+0xa>
    aa9c:	d0 91 f0 2d 	lds	r29, 0x2DF0	; 0x802df0 <udd_g_ctrlreq+0xb>
    aaa0:	c8 1b       	sub	r28, r24
    aaa2:	d9 0b       	sbc	r29, r25
    aaa4:	71 f5       	brne	.+92     	; 0xab02 <udd_ctrl_in_sent+0x86>
    aaa6:	20 91 4a 24 	lds	r18, 0x244A	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    aaaa:	30 91 4b 24 	lds	r19, 0x244B	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    aaae:	82 0f       	add	r24, r18
    aab0:	93 1f       	adc	r25, r19
    aab2:	80 93 4a 24 	sts	0x244A, r24	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    aab6:	90 93 4b 24 	sts	0x244B, r25	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    aaba:	20 91 eb 2d 	lds	r18, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    aabe:	30 91 ec 2d 	lds	r19, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    aac2:	82 17       	cp	r24, r18
    aac4:	93 07       	cpc	r25, r19
    aac6:	21 f0       	breq	.+8      	; 0xaad0 <udd_ctrl_in_sent+0x54>
    aac8:	80 91 63 23 	lds	r24, 0x2363	; 0x802363 <b_shortpacket.5472>
    aacc:	88 23       	and	r24, r24
    aace:	41 f0       	breq	.+16     	; 0xaae0 <udd_ctrl_in_sent+0x64>
    aad0:	84 e0       	ldi	r24, 0x04	; 4
    aad2:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
    aad6:	ec e5       	ldi	r30, 0x5C	; 92
    aad8:	f4 e2       	ldi	r31, 0x24	; 36
    aada:	02 e0       	ldi	r16, 0x02	; 2
    aadc:	06 93       	lac	Z, r16
    aade:	36 c0       	rjmp	.+108    	; 0xab4c <udd_ctrl_in_sent+0xd0>
    aae0:	e0 91 f3 2d 	lds	r30, 0x2DF3	; 0x802df3 <udd_g_ctrlreq+0xe>
    aae4:	f0 91 f4 2d 	lds	r31, 0x2DF4	; 0x802df4 <udd_g_ctrlreq+0xf>
    aae8:	30 97       	sbiw	r30, 0x00	; 0
    aaea:	99 f0       	breq	.+38     	; 0xab12 <udd_ctrl_in_sent+0x96>
    aaec:	19 95       	eicall
    aaee:	88 23       	and	r24, r24
    aaf0:	81 f0       	breq	.+32     	; 0xab12 <udd_ctrl_in_sent+0x96>
    aaf2:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <udd_ctrl_payload_nb_trans>
    aaf6:	10 92 49 24 	sts	0x2449, r1	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    aafa:	c0 91 ef 2d 	lds	r28, 0x2DEF	; 0x802def <udd_g_ctrlreq+0xa>
    aafe:	d0 91 f0 2d 	lds	r29, 0x2DF0	; 0x802df0 <udd_g_ctrlreq+0xb>
    ab02:	c0 34       	cpi	r28, 0x40	; 64
    ab04:	d1 05       	cpc	r29, r1
    ab06:	28 f0       	brcs	.+10     	; 0xab12 <udd_ctrl_in_sent+0x96>
    ab08:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <b_shortpacket.5472>
    ab0c:	c0 e4       	ldi	r28, 0x40	; 64
    ab0e:	d0 e0       	ldi	r29, 0x00	; 0
    ab10:	03 c0       	rjmp	.+6      	; 0xab18 <udd_ctrl_in_sent+0x9c>
    ab12:	81 e0       	ldi	r24, 0x01	; 1
    ab14:	80 93 63 23 	sts	0x2363, r24	; 0x802363 <b_shortpacket.5472>
    ab18:	e0 e5       	ldi	r30, 0x50	; 80
    ab1a:	f4 e2       	ldi	r31, 0x24	; 36
    ab1c:	c6 8b       	std	Z+22, r28	; 0x16
    ab1e:	d7 8b       	std	Z+23, r29	; 0x17
    ab20:	80 91 48 24 	lds	r24, 0x2448	; 0x802448 <udd_ctrl_payload_nb_trans>
    ab24:	90 91 49 24 	lds	r25, 0x2449	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    ab28:	20 91 ed 2d 	lds	r18, 0x2DED	; 0x802ded <udd_g_ctrlreq+0x8>
    ab2c:	30 91 ee 2d 	lds	r19, 0x2DEE	; 0x802dee <udd_g_ctrlreq+0x9>
    ab30:	28 0f       	add	r18, r24
    ab32:	39 1f       	adc	r19, r25
    ab34:	20 8f       	std	Z+24, r18	; 0x18
    ab36:	31 8f       	std	Z+25, r19	; 0x19
    ab38:	c8 0f       	add	r28, r24
    ab3a:	d9 1f       	adc	r29, r25
    ab3c:	c0 93 48 24 	sts	0x2448, r28	; 0x802448 <udd_ctrl_payload_nb_trans>
    ab40:	d0 93 49 24 	sts	0x2449, r29	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    ab44:	e4 e6       	ldi	r30, 0x64	; 100
    ab46:	f4 e2       	ldi	r31, 0x24	; 36
    ab48:	02 e0       	ldi	r16, 0x02	; 2
    ab4a:	06 93       	lac	Z, r16
    ab4c:	df 91       	pop	r29
    ab4e:	cf 91       	pop	r28
    ab50:	0f 91       	pop	r16
    ab52:	08 95       	ret

0000ab54 <udd_ep_get_size>:
    ab54:	fc 01       	movw	r30, r24
    ab56:	81 81       	ldd	r24, Z+1	; 0x01
    ab58:	e8 2f       	mov	r30, r24
    ab5a:	e7 70       	andi	r30, 0x07	; 7
    ab5c:	8e 2f       	mov	r24, r30
    ab5e:	90 e0       	ldi	r25, 0x00	; 0
    ab60:	fc 01       	movw	r30, r24
    ab62:	31 97       	sbiw	r30, 0x01	; 1
    ab64:	e7 30       	cpi	r30, 0x07	; 7
    ab66:	f1 05       	cpc	r31, r1
    ab68:	d8 f4       	brcc	.+54     	; 0xaba0 <udd_ep_get_size+0x4c>
    ab6a:	88 27       	eor	r24, r24
    ab6c:	e2 50       	subi	r30, 0x02	; 2
    ab6e:	ff 4f       	sbci	r31, 0xFF	; 255
    ab70:	8f 4f       	sbci	r24, 0xFF	; 255
    ab72:	0c 94 d8 85 	jmp	0x10bb0	; 0x10bb0 <__tablejump2__>
    ab76:	80 e1       	ldi	r24, 0x10	; 16
    ab78:	90 e0       	ldi	r25, 0x00	; 0
    ab7a:	08 95       	ret
    ab7c:	80 e2       	ldi	r24, 0x20	; 32
    ab7e:	90 e0       	ldi	r25, 0x00	; 0
    ab80:	08 95       	ret
    ab82:	80 e4       	ldi	r24, 0x40	; 64
    ab84:	90 e0       	ldi	r25, 0x00	; 0
    ab86:	08 95       	ret
    ab88:	80 e8       	ldi	r24, 0x80	; 128
    ab8a:	90 e0       	ldi	r25, 0x00	; 0
    ab8c:	08 95       	ret
    ab8e:	80 e0       	ldi	r24, 0x00	; 0
    ab90:	91 e0       	ldi	r25, 0x01	; 1
    ab92:	08 95       	ret
    ab94:	80 e0       	ldi	r24, 0x00	; 0
    ab96:	92 e0       	ldi	r25, 0x02	; 2
    ab98:	08 95       	ret
    ab9a:	8f ef       	ldi	r24, 0xFF	; 255
    ab9c:	93 e0       	ldi	r25, 0x03	; 3
    ab9e:	08 95       	ret
    aba0:	88 e0       	ldi	r24, 0x08	; 8
    aba2:	90 e0       	ldi	r25, 0x00	; 0
    aba4:	08 95       	ret

0000aba6 <udd_ep_get_job>:
    aba6:	28 2f       	mov	r18, r24
    aba8:	2f 70       	andi	r18, 0x0F	; 15
    abaa:	30 e0       	ldi	r19, 0x00	; 0
    abac:	22 0f       	add	r18, r18
    abae:	33 1f       	adc	r19, r19
    abb0:	08 2e       	mov	r0, r24
    abb2:	00 0c       	add	r0, r0
    abb4:	99 0b       	sbc	r25, r25
    abb6:	88 27       	eor	r24, r24
    abb8:	99 0f       	add	r25, r25
    abba:	88 1f       	adc	r24, r24
    abbc:	99 27       	eor	r25, r25
    abbe:	82 0f       	add	r24, r18
    abc0:	93 1f       	adc	r25, r19
    abc2:	02 97       	sbiw	r24, 0x02	; 2
    abc4:	9c 01       	movw	r18, r24
    abc6:	22 0f       	add	r18, r18
    abc8:	33 1f       	adc	r19, r19
    abca:	22 0f       	add	r18, r18
    abcc:	33 1f       	adc	r19, r19
    abce:	22 0f       	add	r18, r18
    abd0:	33 1f       	adc	r19, r19
    abd2:	82 0f       	add	r24, r18
    abd4:	93 1f       	adc	r25, r19
    abd6:	8c 51       	subi	r24, 0x1C	; 28
    abd8:	9c 4d       	sbci	r25, 0xDC	; 220
    abda:	08 95       	ret

0000abdc <udd_ctrl_interrupt_tc_setup>:
    abdc:	0f 93       	push	r16
    abde:	cf 93       	push	r28
    abe0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    abe4:	80 ff       	sbrs	r24, 0
    abe6:	65 c0       	rjmp	.+202    	; 0xacb2 <udd_ctrl_interrupt_tc_setup+0xd6>
    abe8:	81 e0       	ldi	r24, 0x01	; 1
    abea:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    abee:	ec e5       	ldi	r30, 0x5C	; 92
    abf0:	f4 e2       	ldi	r31, 0x24	; 36
    abf2:	00 e8       	ldi	r16, 0x80	; 128
    abf4:	06 93       	lac	Z, r16
    abf6:	e4 e6       	ldi	r30, 0x64	; 100
    abf8:	f4 e2       	ldi	r31, 0x24	; 36
    abfa:	00 e8       	ldi	r16, 0x80	; 128
    abfc:	06 93       	lac	Z, r16
    abfe:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    ac02:	ec e5       	ldi	r30, 0x5C	; 92
    ac04:	f4 e2       	ldi	r31, 0x24	; 36
    ac06:	00 e1       	ldi	r16, 0x10	; 16
    ac08:	06 93       	lac	Z, r16
    ac0a:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <udd_ep_control_state>
    ac0e:	88 23       	and	r24, r24
    ac10:	29 f0       	breq	.+10     	; 0xac1c <udd_ctrl_interrupt_tc_setup+0x40>
    ac12:	83 50       	subi	r24, 0x03	; 3
    ac14:	82 30       	cpi	r24, 0x02	; 2
    ac16:	08 f4       	brcc	.+2      	; 0xac1a <udd_ctrl_interrupt_tc_setup+0x3e>
    ac18:	29 df       	rcall	.-430    	; 0xaa6c <udd_ctrl_endofrequest>
    ac1a:	e7 de       	rcall	.-562    	; 0xa9ea <udd_ctrl_init>
    ac1c:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_sram+0xe>
    ac20:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_sram+0xf>
    ac24:	08 97       	sbiw	r24, 0x08	; 8
    ac26:	09 f0       	breq	.+2      	; 0xac2a <udd_ctrl_interrupt_tc_setup+0x4e>
    ac28:	46 c0       	rjmp	.+140    	; 0xacb6 <udd_ctrl_interrupt_tc_setup+0xda>
    ac2a:	88 e0       	ldi	r24, 0x08	; 8
    ac2c:	e8 e0       	ldi	r30, 0x08	; 8
    ac2e:	f4 e2       	ldi	r31, 0x24	; 36
    ac30:	a5 ee       	ldi	r26, 0xE5	; 229
    ac32:	bd e2       	ldi	r27, 0x2D	; 45
    ac34:	01 90       	ld	r0, Z+
    ac36:	0d 92       	st	X+, r0
    ac38:	8a 95       	dec	r24
    ac3a:	e1 f7       	brne	.-8      	; 0xac34 <udd_ctrl_interrupt_tc_setup+0x58>
    ac3c:	e8 ec       	ldi	r30, 0xC8	; 200
    ac3e:	f4 e0       	ldi	r31, 0x04	; 4
    ac40:	80 81       	ld	r24, Z
    ac42:	80 62       	ori	r24, 0x20	; 32
    ac44:	80 83       	st	Z, r24
    ac46:	80 81       	ld	r24, Z
    ac48:	80 62       	ori	r24, 0x20	; 32
    ac4a:	80 83       	st	Z, r24
    ac4c:	0e 94 48 78 	call	0xf090	; 0xf090 <udc_process_setup>
    ac50:	c8 2f       	mov	r28, r24
    ac52:	81 11       	cpse	r24, r1
    ac54:	03 c0       	rjmp	.+6      	; 0xac5c <udd_ctrl_interrupt_tc_setup+0x80>
    ac56:	ee de       	rcall	.-548    	; 0xaa34 <udd_ctrl_stall_data>
    ac58:	c1 e0       	ldi	r28, 0x01	; 1
    ac5a:	2e c0       	rjmp	.+92     	; 0xacb8 <udd_ctrl_interrupt_tc_setup+0xdc>
    ac5c:	80 91 e5 2d 	lds	r24, 0x2DE5	; 0x802de5 <udd_g_ctrlreq>
    ac60:	88 23       	and	r24, r24
    ac62:	6c f4       	brge	.+26     	; 0xac7e <udd_ctrl_interrupt_tc_setup+0xa2>
    ac64:	10 92 4a 24 	sts	0x244A, r1	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    ac68:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    ac6c:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <udd_ctrl_payload_nb_trans>
    ac70:	10 92 49 24 	sts	0x2449, r1	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    ac74:	82 e0       	ldi	r24, 0x02	; 2
    ac76:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
    ac7a:	00 df       	rcall	.-512    	; 0xaa7c <udd_ctrl_in_sent>
    ac7c:	1d c0       	rjmp	.+58     	; 0xacb8 <udd_ctrl_interrupt_tc_setup+0xdc>
    ac7e:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    ac82:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    ac86:	89 2b       	or	r24, r25
    ac88:	11 f4       	brne	.+4      	; 0xac8e <udd_ctrl_interrupt_tc_setup+0xb2>
    ac8a:	e2 de       	rcall	.-572    	; 0xaa50 <udd_ctrl_send_zlp_in>
    ac8c:	15 c0       	rjmp	.+42     	; 0xacb8 <udd_ctrl_interrupt_tc_setup+0xdc>
    ac8e:	10 92 4a 24 	sts	0x244A, r1	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    ac92:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    ac96:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <udd_ctrl_payload_nb_trans>
    ac9a:	10 92 49 24 	sts	0x2449, r1	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    ac9e:	81 e0       	ldi	r24, 0x01	; 1
    aca0:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
    aca4:	ec e5       	ldi	r30, 0x5C	; 92
    aca6:	f4 e2       	ldi	r31, 0x24	; 36
    aca8:	02 e0       	ldi	r16, 0x02	; 2
    acaa:	06 93       	lac	Z, r16
    acac:	00 e2       	ldi	r16, 0x20	; 32
    acae:	06 93       	lac	Z, r16
    acb0:	03 c0       	rjmp	.+6      	; 0xacb8 <udd_ctrl_interrupt_tc_setup+0xdc>
    acb2:	c0 e0       	ldi	r28, 0x00	; 0
    acb4:	01 c0       	rjmp	.+2      	; 0xacb8 <udd_ctrl_interrupt_tc_setup+0xdc>
    acb6:	c1 e0       	ldi	r28, 0x01	; 1
    acb8:	8c 2f       	mov	r24, r28
    acba:	cf 91       	pop	r28
    acbc:	0f 91       	pop	r16
    acbe:	08 95       	ret

0000acc0 <udd_ep_trans_complet>:
    acc0:	8f 92       	push	r8
    acc2:	9f 92       	push	r9
    acc4:	af 92       	push	r10
    acc6:	bf 92       	push	r11
    acc8:	df 92       	push	r13
    acca:	ef 92       	push	r14
    accc:	ff 92       	push	r15
    acce:	0f 93       	push	r16
    acd0:	1f 93       	push	r17
    acd2:	cf 93       	push	r28
    acd4:	df 93       	push	r29
    acd6:	d8 2e       	mov	r13, r24
    acd8:	66 df       	rcall	.-308    	; 0xaba6 <udd_ep_get_job>
    acda:	8c 01       	movw	r16, r24
    acdc:	cd 2d       	mov	r28, r13
    acde:	cf 70       	andi	r28, 0x0F	; 15
    ace0:	d0 e0       	ldi	r29, 0x00	; 0
    ace2:	ce 01       	movw	r24, r28
    ace4:	88 0f       	add	r24, r24
    ace6:	99 1f       	adc	r25, r25
    ace8:	cd 2d       	mov	r28, r13
    acea:	0d 2c       	mov	r0, r13
    acec:	00 0c       	add	r0, r0
    acee:	dd 0b       	sbc	r29, r29
    acf0:	cc 27       	eor	r28, r28
    acf2:	dd 0f       	add	r29, r29
    acf4:	cc 1f       	adc	r28, r28
    acf6:	dd 27       	eor	r29, r29
    acf8:	c8 0f       	add	r28, r24
    acfa:	d9 1f       	adc	r29, r25
    acfc:	ce 01       	movw	r24, r28
    acfe:	88 0f       	add	r24, r24
    ad00:	99 1f       	adc	r25, r25
    ad02:	88 0f       	add	r24, r24
    ad04:	99 1f       	adc	r25, r25
    ad06:	88 0f       	add	r24, r24
    ad08:	99 1f       	adc	r25, r25
    ad0a:	9c 01       	movw	r18, r24
    ad0c:	24 5a       	subi	r18, 0xA4	; 164
    ad0e:	3b 4d       	sbci	r19, 0xDB	; 219
    ad10:	79 01       	movw	r14, r18
    ad12:	c9 01       	movw	r24, r18
    ad14:	1f df       	rcall	.-450    	; 0xab54 <udd_ep_get_size>
    ad16:	4c 01       	movw	r8, r24
    ad18:	dd 20       	and	r13, r13
    ad1a:	0c f0       	brlt	.+2      	; 0xad1e <udd_ep_trans_complet+0x5e>
    ad1c:	7b c0       	rjmp	.+246    	; 0xae14 <udd_ep_trans_complet+0x154>
    ad1e:	fe 01       	movw	r30, r28
    ad20:	ee 0f       	add	r30, r30
    ad22:	ff 1f       	adc	r31, r31
    ad24:	ee 0f       	add	r30, r30
    ad26:	ff 1f       	adc	r31, r31
    ad28:	ee 0f       	add	r30, r30
    ad2a:	ff 1f       	adc	r31, r31
    ad2c:	e0 5b       	subi	r30, 0xB0	; 176
    ad2e:	fb 4d       	sbci	r31, 0xDB	; 219
    ad30:	22 89       	ldd	r18, Z+18	; 0x12
    ad32:	33 89       	ldd	r19, Z+19	; 0x13
    ad34:	d8 01       	movw	r26, r16
    ad36:	15 96       	adiw	r26, 0x05	; 5
    ad38:	8d 91       	ld	r24, X+
    ad3a:	9c 91       	ld	r25, X
    ad3c:	16 97       	sbiw	r26, 0x06	; 6
    ad3e:	82 0f       	add	r24, r18
    ad40:	93 1f       	adc	r25, r19
    ad42:	15 96       	adiw	r26, 0x05	; 5
    ad44:	8d 93       	st	X+, r24
    ad46:	9c 93       	st	X, r25
    ad48:	16 97       	sbiw	r26, 0x06	; 6
    ad4a:	13 96       	adiw	r26, 0x03	; 3
    ad4c:	2d 91       	ld	r18, X+
    ad4e:	3c 91       	ld	r19, X
    ad50:	14 97       	sbiw	r26, 0x04	; 4
    ad52:	82 17       	cp	r24, r18
    ad54:	93 07       	cpc	r25, r19
    ad56:	09 f4       	brne	.+2      	; 0xad5a <udd_ep_trans_complet+0x9a>
    ad58:	47 c0       	rjmp	.+142    	; 0xade8 <udd_ep_trans_complet+0x128>
    ad5a:	28 1b       	sub	r18, r24
    ad5c:	39 0b       	sbc	r19, r25
    ad5e:	21 15       	cp	r18, r1
    ad60:	b4 e0       	ldi	r27, 0x04	; 4
    ad62:	3b 07       	cpc	r19, r27
    ad64:	40 f0       	brcs	.+16     	; 0xad76 <udd_ep_trans_complet+0xb6>
    ad66:	2f ef       	ldi	r18, 0xFF	; 255
    ad68:	33 e0       	ldi	r19, 0x03	; 3
    ad6a:	c9 01       	movw	r24, r18
    ad6c:	b4 01       	movw	r22, r8
    ad6e:	0e 94 73 85 	call	0x10ae6	; 0x10ae6 <__udivmodhi4>
    ad72:	28 1b       	sub	r18, r24
    ad74:	39 0b       	sbc	r19, r25
    ad76:	f8 01       	movw	r30, r16
    ad78:	80 81       	ld	r24, Z
    ad7a:	81 ff       	sbrs	r24, 1
    ad7c:	0a c0       	rjmp	.+20     	; 0xad92 <udd_ep_trans_complet+0xd2>
    ad7e:	c9 01       	movw	r24, r18
    ad80:	b4 01       	movw	r22, r8
    ad82:	0e 94 73 85 	call	0x10ae6	; 0x10ae6 <__udivmodhi4>
    ad86:	41 e0       	ldi	r20, 0x01	; 1
    ad88:	89 2b       	or	r24, r25
    ad8a:	09 f0       	breq	.+2      	; 0xad8e <udd_ep_trans_complet+0xce>
    ad8c:	40 e0       	ldi	r20, 0x00	; 0
    ad8e:	84 2f       	mov	r24, r20
    ad90:	01 c0       	rjmp	.+2      	; 0xad94 <udd_ep_trans_complet+0xd4>
    ad92:	80 e0       	ldi	r24, 0x00	; 0
    ad94:	d8 01       	movw	r26, r16
    ad96:	9c 91       	ld	r25, X
    ad98:	80 fb       	bst	r24, 0
    ad9a:	91 f9       	bld	r25, 1
    ad9c:	9c 93       	st	X, r25
    ad9e:	fe 01       	movw	r30, r28
    ada0:	ee 0f       	add	r30, r30
    ada2:	ff 1f       	adc	r31, r31
    ada4:	ee 0f       	add	r30, r30
    ada6:	ff 1f       	adc	r31, r31
    ada8:	ee 0f       	add	r30, r30
    adaa:	ff 1f       	adc	r31, r31
    adac:	e0 5b       	subi	r30, 0xB0	; 176
    adae:	fb 4d       	sbci	r31, 0xDB	; 219
    adb0:	12 8a       	std	Z+18, r1	; 0x12
    adb2:	13 8a       	std	Z+19, r1	; 0x13
    adb4:	26 87       	std	Z+14, r18	; 0x0e
    adb6:	37 87       	std	Z+15, r19	; 0x0f
    adb8:	11 96       	adiw	r26, 0x01	; 1
    adba:	2d 91       	ld	r18, X+
    adbc:	3c 91       	ld	r19, X
    adbe:	12 97       	sbiw	r26, 0x02	; 2
    adc0:	15 96       	adiw	r26, 0x05	; 5
    adc2:	8d 91       	ld	r24, X+
    adc4:	9c 91       	ld	r25, X
    adc6:	16 97       	sbiw	r26, 0x06	; 6
    adc8:	82 0f       	add	r24, r18
    adca:	93 1f       	adc	r25, r19
    adcc:	cc 0f       	add	r28, r28
    adce:	dd 1f       	adc	r29, r29
    add0:	cc 0f       	add	r28, r28
    add2:	dd 1f       	adc	r29, r29
    add4:	cc 0f       	add	r28, r28
    add6:	dd 1f       	adc	r29, r29
    add8:	c0 5a       	subi	r28, 0xA0	; 160
    adda:	db 4d       	sbci	r29, 0xDB	; 219
    addc:	88 83       	st	Y, r24
    adde:	99 83       	std	Y+1, r25	; 0x01
    ade0:	f7 01       	movw	r30, r14
    ade2:	02 e0       	ldi	r16, 0x02	; 2
    ade4:	06 93       	lac	Z, r16
    ade6:	e4 c0       	rjmp	.+456    	; 0xafb0 <udd_ep_trans_complet+0x2f0>
    ade8:	d8 01       	movw	r26, r16
    adea:	8c 91       	ld	r24, X
    adec:	81 ff       	sbrs	r24, 1
    adee:	cd c0       	rjmp	.+410    	; 0xaf8a <udd_ep_trans_complet+0x2ca>
    adf0:	8d 7f       	andi	r24, 0xFD	; 253
    adf2:	8c 93       	st	X, r24
    adf4:	cc 0f       	add	r28, r28
    adf6:	dd 1f       	adc	r29, r29
    adf8:	cc 0f       	add	r28, r28
    adfa:	dd 1f       	adc	r29, r29
    adfc:	cc 0f       	add	r28, r28
    adfe:	dd 1f       	adc	r29, r29
    ae00:	c0 5b       	subi	r28, 0xB0	; 176
    ae02:	db 4d       	sbci	r29, 0xDB	; 219
    ae04:	1a 8a       	std	Y+18, r1	; 0x12
    ae06:	1b 8a       	std	Y+19, r1	; 0x13
    ae08:	1e 86       	std	Y+14, r1	; 0x0e
    ae0a:	1f 86       	std	Y+15, r1	; 0x0f
    ae0c:	f7 01       	movw	r30, r14
    ae0e:	02 e0       	ldi	r16, 0x02	; 2
    ae10:	06 93       	lac	Z, r16
    ae12:	ce c0       	rjmp	.+412    	; 0xafb0 <udd_ep_trans_complet+0x2f0>
    ae14:	fe 01       	movw	r30, r28
    ae16:	ee 0f       	add	r30, r30
    ae18:	ff 1f       	adc	r31, r31
    ae1a:	ee 0f       	add	r30, r30
    ae1c:	ff 1f       	adc	r31, r31
    ae1e:	ee 0f       	add	r30, r30
    ae20:	ff 1f       	adc	r31, r31
    ae22:	e0 5b       	subi	r30, 0xB0	; 176
    ae24:	fb 4d       	sbci	r31, 0xDB	; 219
    ae26:	a6 84       	ldd	r10, Z+14	; 0x0e
    ae28:	b7 84       	ldd	r11, Z+15	; 0x0f
    ae2a:	d8 01       	movw	r26, r16
    ae2c:	8c 91       	ld	r24, X
    ae2e:	82 ff       	sbrs	r24, 2
    ae30:	1b c0       	rjmp	.+54     	; 0xae68 <udd_ep_trans_complet+0x1a8>
    ae32:	11 96       	adiw	r26, 0x01	; 1
    ae34:	ed 91       	ld	r30, X+
    ae36:	fc 91       	ld	r31, X
    ae38:	12 97       	sbiw	r26, 0x02	; 2
    ae3a:	15 96       	adiw	r26, 0x05	; 5
    ae3c:	2d 91       	ld	r18, X+
    ae3e:	3c 91       	ld	r19, X
    ae40:	16 97       	sbiw	r26, 0x06	; 6
    ae42:	13 96       	adiw	r26, 0x03	; 3
    ae44:	8d 91       	ld	r24, X+
    ae46:	9c 91       	ld	r25, X
    ae48:	14 97       	sbiw	r26, 0x04	; 4
    ae4a:	b4 01       	movw	r22, r8
    ae4c:	0e 94 73 85 	call	0x10ae6	; 0x10ae6 <__udivmodhi4>
    ae50:	b0 e4       	ldi	r27, 0x40	; 64
    ae52:	db 9e       	mul	r13, r27
    ae54:	b0 01       	movw	r22, r0
    ae56:	11 24       	eor	r1, r1
    ae58:	6c 5d       	subi	r22, 0xDC	; 220
    ae5a:	7c 4d       	sbci	r23, 0xDC	; 220
    ae5c:	ac 01       	movw	r20, r24
    ae5e:	cf 01       	movw	r24, r30
    ae60:	82 0f       	add	r24, r18
    ae62:	93 1f       	adc	r25, r19
    ae64:	0e 94 eb 88 	call	0x111d6	; 0x111d6 <memcpy>
    ae68:	f8 01       	movw	r30, r16
    ae6a:	25 81       	ldd	r18, Z+5	; 0x05
    ae6c:	36 81       	ldd	r19, Z+6	; 0x06
    ae6e:	2a 0d       	add	r18, r10
    ae70:	3b 1d       	adc	r19, r11
    ae72:	25 83       	std	Z+5, r18	; 0x05
    ae74:	36 83       	std	Z+6, r19	; 0x06
    ae76:	83 81       	ldd	r24, Z+3	; 0x03
    ae78:	94 81       	ldd	r25, Z+4	; 0x04
    ae7a:	82 17       	cp	r24, r18
    ae7c:	93 07       	cpc	r25, r19
    ae7e:	68 f4       	brcc	.+26     	; 0xae9a <udd_ep_trans_complet+0x1da>
    ae80:	85 83       	std	Z+5, r24	; 0x05
    ae82:	96 83       	std	Z+6, r25	; 0x06
    ae84:	cc 0f       	add	r28, r28
    ae86:	dd 1f       	adc	r29, r29
    ae88:	cc 0f       	add	r28, r28
    ae8a:	dd 1f       	adc	r29, r29
    ae8c:	cc 0f       	add	r28, r28
    ae8e:	dd 1f       	adc	r29, r29
    ae90:	c0 5b       	subi	r28, 0xB0	; 176
    ae92:	db 4d       	sbci	r29, 0xDB	; 219
    ae94:	8a 89       	ldd	r24, Y+18	; 0x12
    ae96:	9b 89       	ldd	r25, Y+19	; 0x13
    ae98:	78 c0       	rjmp	.+240    	; 0xaf8a <udd_ep_trans_complet+0x2ca>
    ae9a:	fe 01       	movw	r30, r28
    ae9c:	ee 0f       	add	r30, r30
    ae9e:	ff 1f       	adc	r31, r31
    aea0:	ee 0f       	add	r30, r30
    aea2:	ff 1f       	adc	r31, r31
    aea4:	ee 0f       	add	r30, r30
    aea6:	ff 1f       	adc	r31, r31
    aea8:	e0 5b       	subi	r30, 0xB0	; 176
    aeaa:	fb 4d       	sbci	r31, 0xDB	; 219
    aeac:	42 89       	ldd	r20, Z+18	; 0x12
    aeae:	53 89       	ldd	r21, Z+19	; 0x13
    aeb0:	a4 16       	cp	r10, r20
    aeb2:	b5 06       	cpc	r11, r21
    aeb4:	09 f0       	breq	.+2      	; 0xaeb8 <udd_ep_trans_complet+0x1f8>
    aeb6:	69 c0       	rjmp	.+210    	; 0xaf8a <udd_ep_trans_complet+0x2ca>
    aeb8:	28 17       	cp	r18, r24
    aeba:	39 07       	cpc	r19, r25
    aebc:	09 f4       	brne	.+2      	; 0xaec0 <udd_ep_trans_complet+0x200>
    aebe:	65 c0       	rjmp	.+202    	; 0xaf8a <udd_ep_trans_complet+0x2ca>
    aec0:	ac 01       	movw	r20, r24
    aec2:	42 1b       	sub	r20, r18
    aec4:	53 0b       	sbc	r21, r19
    aec6:	9a 01       	movw	r18, r20
    aec8:	21 15       	cp	r18, r1
    aeca:	54 e0       	ldi	r21, 0x04	; 4
    aecc:	35 07       	cpc	r19, r21
    aece:	48 f0       	brcs	.+18     	; 0xaee2 <udd_ep_trans_complet+0x222>
    aed0:	2f ef       	ldi	r18, 0xFF	; 255
    aed2:	33 e0       	ldi	r19, 0x03	; 3
    aed4:	c9 01       	movw	r24, r18
    aed6:	b4 01       	movw	r22, r8
    aed8:	0e 94 73 85 	call	0x10ae6	; 0x10ae6 <__udivmodhi4>
    aedc:	28 1b       	sub	r18, r24
    aede:	39 0b       	sbc	r19, r25
    aee0:	06 c0       	rjmp	.+12     	; 0xaeee <udd_ep_trans_complet+0x22e>
    aee2:	c9 01       	movw	r24, r18
    aee4:	b4 01       	movw	r22, r8
    aee6:	0e 94 73 85 	call	0x10ae6	; 0x10ae6 <__udivmodhi4>
    aeea:	28 1b       	sub	r18, r24
    aeec:	39 0b       	sbc	r19, r25
    aeee:	fe 01       	movw	r30, r28
    aef0:	ee 0f       	add	r30, r30
    aef2:	ff 1f       	adc	r31, r31
    aef4:	ee 0f       	add	r30, r30
    aef6:	ff 1f       	adc	r31, r31
    aef8:	ee 0f       	add	r30, r30
    aefa:	ff 1f       	adc	r31, r31
    aefc:	e0 5b       	subi	r30, 0xB0	; 176
    aefe:	fb 4d       	sbci	r31, 0xDB	; 219
    af00:	16 86       	std	Z+14, r1	; 0x0e
    af02:	17 86       	std	Z+15, r1	; 0x0f
    af04:	28 15       	cp	r18, r8
    af06:	39 05       	cpc	r19, r9
    af08:	00 f5       	brcc	.+64     	; 0xaf4a <udd_ep_trans_complet+0x28a>
    af0a:	d8 01       	movw	r26, r16
    af0c:	8c 91       	ld	r24, X
    af0e:	84 60       	ori	r24, 0x04	; 4
    af10:	8c 93       	st	X, r24
    af12:	b0 e4       	ldi	r27, 0x40	; 64
    af14:	db 9e       	mul	r13, r27
    af16:	c0 01       	movw	r24, r0
    af18:	11 24       	eor	r1, r1
    af1a:	8c 5d       	subi	r24, 0xDC	; 220
    af1c:	9c 4d       	sbci	r25, 0xDC	; 220
    af1e:	fe 01       	movw	r30, r28
    af20:	ee 0f       	add	r30, r30
    af22:	ff 1f       	adc	r31, r31
    af24:	ee 0f       	add	r30, r30
    af26:	ff 1f       	adc	r31, r31
    af28:	ee 0f       	add	r30, r30
    af2a:	ff 1f       	adc	r31, r31
    af2c:	e0 5a       	subi	r30, 0xA0	; 160
    af2e:	fb 4d       	sbci	r31, 0xDB	; 219
    af30:	80 83       	st	Z, r24
    af32:	91 83       	std	Z+1, r25	; 0x01
    af34:	cc 0f       	add	r28, r28
    af36:	dd 1f       	adc	r29, r29
    af38:	cc 0f       	add	r28, r28
    af3a:	dd 1f       	adc	r29, r29
    af3c:	cc 0f       	add	r28, r28
    af3e:	dd 1f       	adc	r29, r29
    af40:	c0 5b       	subi	r28, 0xB0	; 176
    af42:	db 4d       	sbci	r29, 0xDB	; 219
    af44:	8a 8a       	std	Y+18, r8	; 0x12
    af46:	9b 8a       	std	Y+19, r9	; 0x13
    af48:	1c c0       	rjmp	.+56     	; 0xaf82 <udd_ep_trans_complet+0x2c2>
    af4a:	f8 01       	movw	r30, r16
    af4c:	41 81       	ldd	r20, Z+1	; 0x01
    af4e:	52 81       	ldd	r21, Z+2	; 0x02
    af50:	85 81       	ldd	r24, Z+5	; 0x05
    af52:	96 81       	ldd	r25, Z+6	; 0x06
    af54:	84 0f       	add	r24, r20
    af56:	95 1f       	adc	r25, r21
    af58:	fe 01       	movw	r30, r28
    af5a:	ee 0f       	add	r30, r30
    af5c:	ff 1f       	adc	r31, r31
    af5e:	ee 0f       	add	r30, r30
    af60:	ff 1f       	adc	r31, r31
    af62:	ee 0f       	add	r30, r30
    af64:	ff 1f       	adc	r31, r31
    af66:	e0 5a       	subi	r30, 0xA0	; 160
    af68:	fb 4d       	sbci	r31, 0xDB	; 219
    af6a:	80 83       	st	Z, r24
    af6c:	91 83       	std	Z+1, r25	; 0x01
    af6e:	cc 0f       	add	r28, r28
    af70:	dd 1f       	adc	r29, r29
    af72:	cc 0f       	add	r28, r28
    af74:	dd 1f       	adc	r29, r29
    af76:	cc 0f       	add	r28, r28
    af78:	dd 1f       	adc	r29, r29
    af7a:	c0 5b       	subi	r28, 0xB0	; 176
    af7c:	db 4d       	sbci	r29, 0xDB	; 219
    af7e:	2a 8b       	std	Y+18, r18	; 0x12
    af80:	3b 8b       	std	Y+19, r19	; 0x13
    af82:	f7 01       	movw	r30, r14
    af84:	02 e0       	ldi	r16, 0x02	; 2
    af86:	06 93       	lac	Z, r16
    af88:	13 c0       	rjmp	.+38     	; 0xafb0 <udd_ep_trans_complet+0x2f0>
    af8a:	d8 01       	movw	r26, r16
    af8c:	8c 91       	ld	r24, X
    af8e:	80 ff       	sbrs	r24, 0
    af90:	0f c0       	rjmp	.+30     	; 0xafb0 <udd_ep_trans_complet+0x2f0>
    af92:	8e 7f       	andi	r24, 0xFE	; 254
    af94:	8c 93       	st	X, r24
    af96:	17 96       	adiw	r26, 0x07	; 7
    af98:	ed 91       	ld	r30, X+
    af9a:	fc 91       	ld	r31, X
    af9c:	18 97       	sbiw	r26, 0x08	; 8
    af9e:	30 97       	sbiw	r30, 0x00	; 0
    afa0:	39 f0       	breq	.+14     	; 0xafb0 <udd_ep_trans_complet+0x2f0>
    afa2:	15 96       	adiw	r26, 0x05	; 5
    afa4:	6d 91       	ld	r22, X+
    afa6:	7c 91       	ld	r23, X
    afa8:	16 97       	sbiw	r26, 0x06	; 6
    afaa:	4d 2d       	mov	r20, r13
    afac:	80 e0       	ldi	r24, 0x00	; 0
    afae:	19 95       	eicall
    afb0:	df 91       	pop	r29
    afb2:	cf 91       	pop	r28
    afb4:	1f 91       	pop	r17
    afb6:	0f 91       	pop	r16
    afb8:	ff 90       	pop	r15
    afba:	ef 90       	pop	r14
    afbc:	df 90       	pop	r13
    afbe:	bf 90       	pop	r11
    afc0:	af 90       	pop	r10
    afc2:	9f 90       	pop	r9
    afc4:	8f 90       	pop	r8
    afc6:	08 95       	ret

0000afc8 <udd_disable>:
    afc8:	1f 93       	push	r17
    afca:	cf 93       	push	r28
    afcc:	df 93       	push	r29
    afce:	1f 92       	push	r1
    afd0:	1f 92       	push	r1
    afd2:	cd b7       	in	r28, 0x3d	; 61
    afd4:	de b7       	in	r29, 0x3e	; 62
    afd6:	8f b7       	in	r24, 0x3f	; 63
    afd8:	89 83       	std	Y+1, r24	; 0x01
    afda:	f8 94       	cli
    afdc:	19 81       	ldd	r17, Y+1	; 0x01
    afde:	e1 ec       	ldi	r30, 0xC1	; 193
    afe0:	f4 e0       	ldi	r31, 0x04	; 4
    afe2:	80 81       	ld	r24, Z
    afe4:	8e 7f       	andi	r24, 0xFE	; 254
    afe6:	80 83       	st	Z, r24
    afe8:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    afec:	10 82       	st	Z, r1
    afee:	0e 94 4d 73 	call	0xe69a	; 0xe69a <sysclk_disable_usb>
    aff2:	80 e0       	ldi	r24, 0x00	; 0
    aff4:	c2 dc       	rcall	.-1660   	; 0xa97a <udd_sleep_mode>
    aff6:	80 91 80 2e 	lds	r24, 0x2E80	; 0x802e80 <sleepmgr_locks+0x5>
    affa:	81 11       	cpse	r24, r1
    affc:	01 c0       	rjmp	.+2      	; 0xb000 <udd_disable+0x38>
    affe:	ff cf       	rjmp	.-2      	; 0xaffe <udd_disable+0x36>
    b000:	8f b7       	in	r24, 0x3f	; 63
    b002:	8a 83       	std	Y+2, r24	; 0x02
    b004:	f8 94       	cli
    b006:	9a 81       	ldd	r25, Y+2	; 0x02
    b008:	eb e7       	ldi	r30, 0x7B	; 123
    b00a:	fe e2       	ldi	r31, 0x2E	; 46
    b00c:	85 81       	ldd	r24, Z+5	; 0x05
    b00e:	81 50       	subi	r24, 0x01	; 1
    b010:	85 83       	std	Z+5, r24	; 0x05
    b012:	9f bf       	out	0x3f, r25	; 63
    b014:	1f bf       	out	0x3f, r17	; 63
    b016:	0f 90       	pop	r0
    b018:	0f 90       	pop	r0
    b01a:	df 91       	pop	r29
    b01c:	cf 91       	pop	r28
    b01e:	1f 91       	pop	r17
    b020:	08 95       	ret

0000b022 <udd_attach>:
    b022:	1f 93       	push	r17
    b024:	cf 93       	push	r28
    b026:	df 93       	push	r29
    b028:	1f 92       	push	r1
    b02a:	cd b7       	in	r28, 0x3d	; 61
    b02c:	de b7       	in	r29, 0x3e	; 62
    b02e:	8f b7       	in	r24, 0x3f	; 63
    b030:	89 83       	std	Y+1, r24	; 0x01
    b032:	f8 94       	cli
    b034:	19 81       	ldd	r17, Y+1	; 0x01
    b036:	81 e0       	ldi	r24, 0x01	; 1
    b038:	a0 dc       	rcall	.-1728   	; 0xa97a <udd_sleep_mode>
    b03a:	ea ec       	ldi	r30, 0xCA	; 202
    b03c:	f4 e0       	ldi	r31, 0x04	; 4
    b03e:	80 e4       	ldi	r24, 0x40	; 64
    b040:	80 83       	st	Z, r24
    b042:	80 e2       	ldi	r24, 0x20	; 32
    b044:	80 83       	st	Z, r24
    b046:	e1 ec       	ldi	r30, 0xC1	; 193
    b048:	f4 e0       	ldi	r31, 0x04	; 4
    b04a:	80 81       	ld	r24, Z
    b04c:	81 60       	ori	r24, 0x01	; 1
    b04e:	80 83       	st	Z, r24
    b050:	a9 ec       	ldi	r26, 0xC9	; 201
    b052:	b4 e0       	ldi	r27, 0x04	; 4
    b054:	8c 91       	ld	r24, X
    b056:	82 60       	ori	r24, 0x02	; 2
    b058:	8c 93       	st	X, r24
    b05a:	e8 ec       	ldi	r30, 0xC8	; 200
    b05c:	f4 e0       	ldi	r31, 0x04	; 4
    b05e:	80 81       	ld	r24, Z
    b060:	80 64       	ori	r24, 0x40	; 64
    b062:	80 83       	st	Z, r24
    b064:	8c 91       	ld	r24, X
    b066:	81 60       	ori	r24, 0x01	; 1
    b068:	8c 93       	st	X, r24
    b06a:	80 81       	ld	r24, Z
    b06c:	80 68       	ori	r24, 0x80	; 128
    b06e:	80 83       	st	Z, r24
    b070:	1f bf       	out	0x3f, r17	; 63
    b072:	0f 90       	pop	r0
    b074:	df 91       	pop	r29
    b076:	cf 91       	pop	r28
    b078:	1f 91       	pop	r17
    b07a:	08 95       	ret

0000b07c <udd_enable>:
    b07c:	0f 93       	push	r16
    b07e:	1f 93       	push	r17
    b080:	cf 93       	push	r28
    b082:	df 93       	push	r29
    b084:	1f 92       	push	r1
    b086:	1f 92       	push	r1
    b088:	cd b7       	in	r28, 0x3d	; 61
    b08a:	de b7       	in	r29, 0x3e	; 62
    b08c:	00 e6       	ldi	r16, 0x60	; 96
    b08e:	10 e0       	ldi	r17, 0x00	; 0
    b090:	f8 01       	movw	r30, r16
    b092:	10 82       	st	Z, r1
    b094:	80 e3       	ldi	r24, 0x30	; 48
    b096:	0e 94 07 73 	call	0xe60e	; 0xe60e <sysclk_enable_usb>
    b09a:	e0 ec       	ldi	r30, 0xC0	; 192
    b09c:	f4 e0       	ldi	r31, 0x04	; 4
    b09e:	80 81       	ld	r24, Z
    b0a0:	80 64       	ori	r24, 0x40	; 64
    b0a2:	80 83       	st	Z, r24
    b0a4:	81 e0       	ldi	r24, 0x01	; 1
    b0a6:	f8 01       	movw	r30, r16
    b0a8:	80 83       	st	Z, r24
    b0aa:	8f b7       	in	r24, 0x3f	; 63
    b0ac:	8a 83       	std	Y+2, r24	; 0x02
    b0ae:	f8 94       	cli
    b0b0:	1a 81       	ldd	r17, Y+2	; 0x02
    b0b2:	e0 e5       	ldi	r30, 0x50	; 80
    b0b4:	f4 e2       	ldi	r31, 0x24	; 36
    b0b6:	15 86       	std	Z+13, r1	; 0x0d
    b0b8:	15 8a       	std	Z+21, r1	; 0x15
    b0ba:	15 8e       	std	Z+29, r1	; 0x1d
    b0bc:	15 a2       	std	Z+37, r1	; 0x25
    b0be:	15 a6       	std	Z+45, r1	; 0x2d
    b0c0:	15 aa       	std	Z+53, r1	; 0x35
    b0c2:	e4 ee       	ldi	r30, 0xE4	; 228
    b0c4:	f3 e2       	ldi	r31, 0x23	; 35
    b0c6:	80 81       	ld	r24, Z
    b0c8:	8e 7f       	andi	r24, 0xFE	; 254
    b0ca:	80 83       	st	Z, r24
    b0cc:	ed ee       	ldi	r30, 0xED	; 237
    b0ce:	f3 e2       	ldi	r31, 0x23	; 35
    b0d0:	80 81       	ld	r24, Z
    b0d2:	8e 7f       	andi	r24, 0xFE	; 254
    b0d4:	80 83       	st	Z, r24
    b0d6:	e6 ef       	ldi	r30, 0xF6	; 246
    b0d8:	f3 e2       	ldi	r31, 0x23	; 35
    b0da:	80 81       	ld	r24, Z
    b0dc:	8e 7f       	andi	r24, 0xFE	; 254
    b0de:	80 83       	st	Z, r24
    b0e0:	ef ef       	ldi	r30, 0xFF	; 255
    b0e2:	f3 e2       	ldi	r31, 0x23	; 35
    b0e4:	80 81       	ld	r24, Z
    b0e6:	8e 7f       	andi	r24, 0xFE	; 254
    b0e8:	80 83       	st	Z, r24
    b0ea:	6a e1       	ldi	r22, 0x1A	; 26
    b0ec:	70 e0       	ldi	r23, 0x00	; 0
    b0ee:	82 e0       	ldi	r24, 0x02	; 2
    b0f0:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    b0f4:	8f 3f       	cpi	r24, 0xFF	; 255
    b0f6:	19 f0       	breq	.+6      	; 0xb0fe <udd_enable+0x82>
    b0f8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    b0fc:	03 c0       	rjmp	.+6      	; 0xb104 <udd_enable+0x88>
    b0fe:	8f e1       	ldi	r24, 0x1F	; 31
    b100:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    b104:	6b e1       	ldi	r22, 0x1B	; 27
    b106:	70 e0       	ldi	r23, 0x00	; 0
    b108:	82 e0       	ldi	r24, 0x02	; 2
    b10a:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    b10e:	8f 3f       	cpi	r24, 0xFF	; 255
    b110:	19 f0       	breq	.+6      	; 0xb118 <udd_enable+0x9c>
    b112:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    b116:	03 c0       	rjmp	.+6      	; 0xb11e <udd_enable+0xa2>
    b118:	8f e1       	ldi	r24, 0x1F	; 31
    b11a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    b11e:	e0 ec       	ldi	r30, 0xC0	; 192
    b120:	f4 e0       	ldi	r31, 0x04	; 4
    b122:	80 81       	ld	r24, Z
    b124:	82 60       	ori	r24, 0x02	; 2
    b126:	80 83       	st	Z, r24
    b128:	80 81       	ld	r24, Z
    b12a:	80 68       	ori	r24, 0x80	; 128
    b12c:	80 83       	st	Z, r24
    b12e:	80 81       	ld	r24, Z
    b130:	80 61       	ori	r24, 0x10	; 16
    b132:	80 83       	st	Z, r24
    b134:	8c e5       	ldi	r24, 0x5C	; 92
    b136:	94 e2       	ldi	r25, 0x24	; 36
    b138:	86 83       	std	Z+6, r24	; 0x06
    b13a:	97 83       	std	Z+7, r25	; 0x07
    b13c:	80 81       	ld	r24, Z
    b13e:	80 62       	ori	r24, 0x20	; 32
    b140:	80 83       	st	Z, r24
    b142:	8f ef       	ldi	r24, 0xFF	; 255
    b144:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    b148:	e8 ec       	ldi	r30, 0xC8	; 200
    b14a:	f4 e0       	ldi	r31, 0x04	; 4
    b14c:	80 81       	ld	r24, Z
    b14e:	82 60       	ori	r24, 0x02	; 2
    b150:	80 83       	st	Z, r24
    b152:	10 92 90 24 	sts	0x2490, r1	; 0x802490 <udd_b_idle>
    b156:	80 91 80 2e 	lds	r24, 0x2E80	; 0x802e80 <sleepmgr_locks+0x5>
    b15a:	8f 3f       	cpi	r24, 0xFF	; 255
    b15c:	09 f4       	brne	.+2      	; 0xb160 <udd_enable+0xe4>
    b15e:	ff cf       	rjmp	.-2      	; 0xb15e <udd_enable+0xe2>
    b160:	8f b7       	in	r24, 0x3f	; 63
    b162:	89 83       	std	Y+1, r24	; 0x01
    b164:	f8 94       	cli
    b166:	99 81       	ldd	r25, Y+1	; 0x01
    b168:	eb e7       	ldi	r30, 0x7B	; 123
    b16a:	fe e2       	ldi	r31, 0x2E	; 46
    b16c:	85 81       	ldd	r24, Z+5	; 0x05
    b16e:	8f 5f       	subi	r24, 0xFF	; 255
    b170:	85 83       	std	Z+5, r24	; 0x05
    b172:	9f bf       	out	0x3f, r25	; 63
    b174:	56 df       	rcall	.-340    	; 0xb022 <udd_attach>
    b176:	1f bf       	out	0x3f, r17	; 63
    b178:	0f 90       	pop	r0
    b17a:	0f 90       	pop	r0
    b17c:	df 91       	pop	r29
    b17e:	cf 91       	pop	r28
    b180:	1f 91       	pop	r17
    b182:	0f 91       	pop	r16
    b184:	08 95       	ret

0000b186 <udd_is_high_speed>:
    b186:	80 e0       	ldi	r24, 0x00	; 0
    b188:	08 95       	ret

0000b18a <udd_set_address>:
    b18a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    b18e:	08 95       	ret

0000b190 <udd_getaddress>:
    b190:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    b194:	08 95       	ret

0000b196 <udd_get_frame_number>:
    b196:	80 91 8c 24 	lds	r24, 0x248C	; 0x80248c <udd_sram+0x3c>
    b19a:	90 91 8d 24 	lds	r25, 0x248D	; 0x80248d <udd_sram+0x3d>
    b19e:	08 95       	ret

0000b1a0 <udd_get_micro_frame_number>:
    b1a0:	80 e0       	ldi	r24, 0x00	; 0
    b1a2:	90 e0       	ldi	r25, 0x00	; 0
    b1a4:	08 95       	ret

0000b1a6 <udd_set_setup_payload>:
    b1a6:	e5 ee       	ldi	r30, 0xE5	; 229
    b1a8:	fd e2       	ldi	r31, 0x2D	; 45
    b1aa:	80 87       	std	Z+8, r24	; 0x08
    b1ac:	91 87       	std	Z+9, r25	; 0x09
    b1ae:	62 87       	std	Z+10, r22	; 0x0a
    b1b0:	73 87       	std	Z+11, r23	; 0x0b
    b1b2:	08 95       	ret

0000b1b4 <udd_ep_alloc>:
    b1b4:	28 2f       	mov	r18, r24
    b1b6:	2f 70       	andi	r18, 0x0F	; 15
    b1b8:	30 e0       	ldi	r19, 0x00	; 0
    b1ba:	22 0f       	add	r18, r18
    b1bc:	33 1f       	adc	r19, r19
    b1be:	08 2e       	mov	r0, r24
    b1c0:	00 0c       	add	r0, r0
    b1c2:	99 0b       	sbc	r25, r25
    b1c4:	88 27       	eor	r24, r24
    b1c6:	99 0f       	add	r25, r25
    b1c8:	88 1f       	adc	r24, r24
    b1ca:	99 27       	eor	r25, r25
    b1cc:	82 0f       	add	r24, r18
    b1ce:	93 1f       	adc	r25, r19
    b1d0:	fc 01       	movw	r30, r24
    b1d2:	ee 0f       	add	r30, r30
    b1d4:	ff 1f       	adc	r31, r31
    b1d6:	ee 0f       	add	r30, r30
    b1d8:	ff 1f       	adc	r31, r31
    b1da:	ee 0f       	add	r30, r30
    b1dc:	ff 1f       	adc	r31, r31
    b1de:	e0 5b       	subi	r30, 0xB0	; 176
    b1e0:	fb 4d       	sbci	r31, 0xDB	; 219
    b1e2:	25 85       	ldd	r18, Z+13	; 0x0d
    b1e4:	20 7c       	andi	r18, 0xC0	; 192
    b1e6:	09 f0       	breq	.+2      	; 0xb1ea <udd_ep_alloc+0x36>
    b1e8:	69 c0       	rjmp	.+210    	; 0xb2bc <udd_ep_alloc+0x108>
    b1ea:	63 70       	andi	r22, 0x03	; 3
    b1ec:	61 30       	cpi	r22, 0x01	; 1
    b1ee:	11 f0       	breq	.+4      	; 0xb1f4 <udd_ep_alloc+0x40>
    b1f0:	18 f4       	brcc	.+6      	; 0xb1f8 <udd_ep_alloc+0x44>
    b1f2:	04 c0       	rjmp	.+8      	; 0xb1fc <udd_ep_alloc+0x48>
    b1f4:	60 ec       	ldi	r22, 0xC0	; 192
    b1f6:	03 c0       	rjmp	.+6      	; 0xb1fe <udd_ep_alloc+0x4a>
    b1f8:	60 e8       	ldi	r22, 0x80	; 128
    b1fa:	01 c0       	rjmp	.+2      	; 0xb1fe <udd_ep_alloc+0x4a>
    b1fc:	60 e4       	ldi	r22, 0x40	; 64
    b1fe:	40 38       	cpi	r20, 0x80	; 128
    b200:	51 05       	cpc	r21, r1
    b202:	e9 f0       	breq	.+58     	; 0xb23e <udd_ep_alloc+0x8a>
    b204:	50 f4       	brcc	.+20     	; 0xb21a <udd_ep_alloc+0x66>
    b206:	40 32       	cpi	r20, 0x20	; 32
    b208:	51 05       	cpc	r21, r1
    b20a:	a9 f0       	breq	.+42     	; 0xb236 <udd_ep_alloc+0x82>
    b20c:	40 34       	cpi	r20, 0x40	; 64
    b20e:	51 05       	cpc	r21, r1
    b210:	a1 f0       	breq	.+40     	; 0xb23a <udd_ep_alloc+0x86>
    b212:	40 31       	cpi	r20, 0x10	; 16
    b214:	51 05       	cpc	r21, r1
    b216:	d9 f4       	brne	.+54     	; 0xb24e <udd_ep_alloc+0x9a>
    b218:	0c c0       	rjmp	.+24     	; 0xb232 <udd_ep_alloc+0x7e>
    b21a:	41 15       	cp	r20, r1
    b21c:	22 e0       	ldi	r18, 0x02	; 2
    b21e:	52 07       	cpc	r21, r18
    b220:	91 f0       	breq	.+36     	; 0xb246 <udd_ep_alloc+0x92>
    b222:	4f 3f       	cpi	r20, 0xFF	; 255
    b224:	23 e0       	ldi	r18, 0x03	; 3
    b226:	52 07       	cpc	r21, r18
    b228:	81 f0       	breq	.+32     	; 0xb24a <udd_ep_alloc+0x96>
    b22a:	41 15       	cp	r20, r1
    b22c:	51 40       	sbci	r21, 0x01	; 1
    b22e:	79 f4       	brne	.+30     	; 0xb24e <udd_ep_alloc+0x9a>
    b230:	08 c0       	rjmp	.+16     	; 0xb242 <udd_ep_alloc+0x8e>
    b232:	21 e0       	ldi	r18, 0x01	; 1
    b234:	0d c0       	rjmp	.+26     	; 0xb250 <udd_ep_alloc+0x9c>
    b236:	22 e0       	ldi	r18, 0x02	; 2
    b238:	0b c0       	rjmp	.+22     	; 0xb250 <udd_ep_alloc+0x9c>
    b23a:	23 e0       	ldi	r18, 0x03	; 3
    b23c:	09 c0       	rjmp	.+18     	; 0xb250 <udd_ep_alloc+0x9c>
    b23e:	24 e0       	ldi	r18, 0x04	; 4
    b240:	07 c0       	rjmp	.+14     	; 0xb250 <udd_ep_alloc+0x9c>
    b242:	25 e0       	ldi	r18, 0x05	; 5
    b244:	05 c0       	rjmp	.+10     	; 0xb250 <udd_ep_alloc+0x9c>
    b246:	26 e0       	ldi	r18, 0x06	; 6
    b248:	03 c0       	rjmp	.+6      	; 0xb250 <udd_ep_alloc+0x9c>
    b24a:	27 e0       	ldi	r18, 0x07	; 7
    b24c:	01 c0       	rjmp	.+2      	; 0xb250 <udd_ep_alloc+0x9c>
    b24e:	20 e0       	ldi	r18, 0x00	; 0
    b250:	fc 01       	movw	r30, r24
    b252:	ee 0f       	add	r30, r30
    b254:	ff 1f       	adc	r31, r31
    b256:	ee 0f       	add	r30, r30
    b258:	ff 1f       	adc	r31, r31
    b25a:	ee 0f       	add	r30, r30
    b25c:	ff 1f       	adc	r31, r31
    b25e:	e0 5b       	subi	r30, 0xB0	; 176
    b260:	fb 4d       	sbci	r31, 0xDB	; 219
    b262:	15 86       	std	Z+13, r1	; 0x0d
    b264:	36 e0       	ldi	r19, 0x06	; 6
    b266:	34 87       	std	Z+12, r19	; 0x0c
    b268:	26 2b       	or	r18, r22
    b26a:	25 87       	std	Z+13, r18	; 0x0d
    b26c:	fc 01       	movw	r30, r24
    b26e:	ee 0f       	add	r30, r30
    b270:	ff 1f       	adc	r31, r31
    b272:	ee 0f       	add	r30, r30
    b274:	ff 1f       	adc	r31, r31
    b276:	ee 0f       	add	r30, r30
    b278:	ff 1f       	adc	r31, r31
    b27a:	e0 5b       	subi	r30, 0xB0	; 176
    b27c:	fb 4d       	sbci	r31, 0xDB	; 219
    b27e:	25 85       	ldd	r18, Z+13	; 0x0d
    b280:	20 7c       	andi	r18, 0xC0	; 192
    b282:	20 3c       	cpi	r18, 0xC0	; 192
    b284:	69 f4       	brne	.+26     	; 0xb2a0 <udd_ep_alloc+0xec>
    b286:	fc 01       	movw	r30, r24
    b288:	ee 0f       	add	r30, r30
    b28a:	ff 1f       	adc	r31, r31
    b28c:	ee 0f       	add	r30, r30
    b28e:	ff 1f       	adc	r31, r31
    b290:	ee 0f       	add	r30, r30
    b292:	ff 1f       	adc	r31, r31
    b294:	e0 5b       	subi	r30, 0xB0	; 176
    b296:	fb 4d       	sbci	r31, 0xDB	; 219
    b298:	25 85       	ldd	r18, Z+13	; 0x0d
    b29a:	27 70       	andi	r18, 0x07	; 7
    b29c:	27 30       	cpi	r18, 0x07	; 7
    b29e:	81 f0       	breq	.+32     	; 0xb2c0 <udd_ep_alloc+0x10c>
    b2a0:	88 0f       	add	r24, r24
    b2a2:	99 1f       	adc	r25, r25
    b2a4:	88 0f       	add	r24, r24
    b2a6:	99 1f       	adc	r25, r25
    b2a8:	88 0f       	add	r24, r24
    b2aa:	99 1f       	adc	r25, r25
    b2ac:	fc 01       	movw	r30, r24
    b2ae:	e0 5b       	subi	r30, 0xB0	; 176
    b2b0:	fb 4d       	sbci	r31, 0xDB	; 219
    b2b2:	85 85       	ldd	r24, Z+13	; 0x0d
    b2b4:	80 62       	ori	r24, 0x20	; 32
    b2b6:	85 87       	std	Z+13, r24	; 0x0d
    b2b8:	81 e0       	ldi	r24, 0x01	; 1
    b2ba:	08 95       	ret
    b2bc:	80 e0       	ldi	r24, 0x00	; 0
    b2be:	08 95       	ret
    b2c0:	81 e0       	ldi	r24, 0x01	; 1
    b2c2:	08 95       	ret

0000b2c4 <udd_ep_is_halted>:
    b2c4:	e8 2f       	mov	r30, r24
    b2c6:	ef 70       	andi	r30, 0x0F	; 15
    b2c8:	f0 e0       	ldi	r31, 0x00	; 0
    b2ca:	ee 0f       	add	r30, r30
    b2cc:	ff 1f       	adc	r31, r31
    b2ce:	08 2e       	mov	r0, r24
    b2d0:	00 0c       	add	r0, r0
    b2d2:	99 0b       	sbc	r25, r25
    b2d4:	88 27       	eor	r24, r24
    b2d6:	99 0f       	add	r25, r25
    b2d8:	88 1f       	adc	r24, r24
    b2da:	99 27       	eor	r25, r25
    b2dc:	e8 0f       	add	r30, r24
    b2de:	f9 1f       	adc	r31, r25
    b2e0:	ee 0f       	add	r30, r30
    b2e2:	ff 1f       	adc	r31, r31
    b2e4:	ee 0f       	add	r30, r30
    b2e6:	ff 1f       	adc	r31, r31
    b2e8:	ee 0f       	add	r30, r30
    b2ea:	ff 1f       	adc	r31, r31
    b2ec:	e0 5b       	subi	r30, 0xB0	; 176
    b2ee:	fb 4d       	sbci	r31, 0xDB	; 219
    b2f0:	85 85       	ldd	r24, Z+13	; 0x0d
    b2f2:	82 fb       	bst	r24, 2
    b2f4:	88 27       	eor	r24, r24
    b2f6:	80 f9       	bld	r24, 0
    b2f8:	08 95       	ret

0000b2fa <udd_ep_clear_halt>:
    b2fa:	0f 93       	push	r16
    b2fc:	28 2f       	mov	r18, r24
    b2fe:	2f 70       	andi	r18, 0x0F	; 15
    b300:	30 e0       	ldi	r19, 0x00	; 0
    b302:	a9 01       	movw	r20, r18
    b304:	44 0f       	add	r20, r20
    b306:	55 1f       	adc	r21, r21
    b308:	28 2f       	mov	r18, r24
    b30a:	08 2e       	mov	r0, r24
    b30c:	00 0c       	add	r0, r0
    b30e:	33 0b       	sbc	r19, r19
    b310:	22 27       	eor	r18, r18
    b312:	33 0f       	add	r19, r19
    b314:	22 1f       	adc	r18, r18
    b316:	33 27       	eor	r19, r19
    b318:	24 0f       	add	r18, r20
    b31a:	35 1f       	adc	r19, r21
    b31c:	a9 01       	movw	r20, r18
    b31e:	44 0f       	add	r20, r20
    b320:	55 1f       	adc	r21, r21
    b322:	44 0f       	add	r20, r20
    b324:	55 1f       	adc	r21, r21
    b326:	44 0f       	add	r20, r20
    b328:	55 1f       	adc	r21, r21
    b32a:	fa 01       	movw	r30, r20
    b32c:	e4 5a       	subi	r30, 0xA4	; 164
    b32e:	fb 4d       	sbci	r31, 0xDB	; 219
    b330:	01 e0       	ldi	r16, 0x01	; 1
    b332:	06 93       	lac	Z, r16
    b334:	fa 01       	movw	r30, r20
    b336:	e0 5b       	subi	r30, 0xB0	; 176
    b338:	fb 4d       	sbci	r31, 0xDB	; 219
    b33a:	95 85       	ldd	r25, Z+13	; 0x0d
    b33c:	92 ff       	sbrs	r25, 2
    b33e:	11 c0       	rjmp	.+34     	; 0xb362 <udd_ep_clear_halt+0x68>
    b340:	fa 01       	movw	r30, r20
    b342:	e0 5b       	subi	r30, 0xB0	; 176
    b344:	fb 4d       	sbci	r31, 0xDB	; 219
    b346:	95 85       	ldd	r25, Z+13	; 0x0d
    b348:	9b 7f       	andi	r25, 0xFB	; 251
    b34a:	95 87       	std	Z+13, r25	; 0x0d
    b34c:	2c dc       	rcall	.-1960   	; 0xaba6 <udd_ep_get_job>
    b34e:	fc 01       	movw	r30, r24
    b350:	80 81       	ld	r24, Z
    b352:	80 ff       	sbrs	r24, 0
    b354:	06 c0       	rjmp	.+12     	; 0xb362 <udd_ep_clear_halt+0x68>
    b356:	8e 7f       	andi	r24, 0xFE	; 254
    b358:	80 83       	st	Z, r24
    b35a:	07 80       	ldd	r0, Z+7	; 0x07
    b35c:	f0 85       	ldd	r31, Z+8	; 0x08
    b35e:	e0 2d       	mov	r30, r0
    b360:	19 95       	eicall
    b362:	81 e0       	ldi	r24, 0x01	; 1
    b364:	0f 91       	pop	r16
    b366:	08 95       	ret

0000b368 <udd_ep_run>:
    b368:	6f 92       	push	r6
    b36a:	7f 92       	push	r7
    b36c:	8f 92       	push	r8
    b36e:	9f 92       	push	r9
    b370:	af 92       	push	r10
    b372:	bf 92       	push	r11
    b374:	cf 92       	push	r12
    b376:	df 92       	push	r13
    b378:	ef 92       	push	r14
    b37a:	ff 92       	push	r15
    b37c:	0f 93       	push	r16
    b37e:	1f 93       	push	r17
    b380:	cf 93       	push	r28
    b382:	df 93       	push	r29
    b384:	1f 92       	push	r1
    b386:	cd b7       	in	r28, 0x3d	; 61
    b388:	de b7       	in	r29, 0x3e	; 62
    b38a:	78 2e       	mov	r7, r24
    b38c:	66 2e       	mov	r6, r22
    b38e:	4a 01       	movw	r8, r20
    b390:	59 01       	movw	r10, r18
    b392:	09 dc       	rcall	.-2030   	; 0xaba6 <udd_ep_get_job>
    b394:	6c 01       	movw	r12, r24
    b396:	27 2d       	mov	r18, r7
    b398:	87 2d       	mov	r24, r7
    b39a:	8f 70       	andi	r24, 0x0F	; 15
    b39c:	e8 2e       	mov	r14, r24
    b39e:	f1 2c       	mov	r15, r1
    b3a0:	c7 01       	movw	r24, r14
    b3a2:	88 0f       	add	r24, r24
    b3a4:	99 1f       	adc	r25, r25
    b3a6:	e7 2c       	mov	r14, r7
    b3a8:	07 2c       	mov	r0, r7
    b3aa:	00 0c       	add	r0, r0
    b3ac:	ff 08       	sbc	r15, r15
    b3ae:	ee 24       	eor	r14, r14
    b3b0:	ff 0c       	add	r15, r15
    b3b2:	ee 1c       	adc	r14, r14
    b3b4:	ff 24       	eor	r15, r15
    b3b6:	e8 0e       	add	r14, r24
    b3b8:	f9 1e       	adc	r15, r25
    b3ba:	f7 01       	movw	r30, r14
    b3bc:	ee 0f       	add	r30, r30
    b3be:	ff 1f       	adc	r31, r31
    b3c0:	ee 0f       	add	r30, r30
    b3c2:	ff 1f       	adc	r31, r31
    b3c4:	ee 0f       	add	r30, r30
    b3c6:	ff 1f       	adc	r31, r31
    b3c8:	e0 5b       	subi	r30, 0xB0	; 176
    b3ca:	fb 4d       	sbci	r31, 0xDB	; 219
    b3cc:	85 85       	ldd	r24, Z+13	; 0x0d
    b3ce:	80 7c       	andi	r24, 0xC0	; 192
    b3d0:	09 f4       	brne	.+2      	; 0xb3d4 <udd_ep_run+0x6c>
    b3d2:	82 c0       	rjmp	.+260    	; 0xb4d8 <udd_ep_run+0x170>
    b3d4:	f7 01       	movw	r30, r14
    b3d6:	ee 0f       	add	r30, r30
    b3d8:	ff 1f       	adc	r31, r31
    b3da:	ee 0f       	add	r30, r30
    b3dc:	ff 1f       	adc	r31, r31
    b3de:	ee 0f       	add	r30, r30
    b3e0:	ff 1f       	adc	r31, r31
    b3e2:	e0 5b       	subi	r30, 0xB0	; 176
    b3e4:	fb 4d       	sbci	r31, 0xDB	; 219
    b3e6:	85 85       	ldd	r24, Z+13	; 0x0d
    b3e8:	80 7c       	andi	r24, 0xC0	; 192
    b3ea:	80 3c       	cpi	r24, 0xC0	; 192
    b3ec:	61 f0       	breq	.+24     	; 0xb406 <udd_ep_run+0x9e>
    b3ee:	f7 01       	movw	r30, r14
    b3f0:	ee 0f       	add	r30, r30
    b3f2:	ff 1f       	adc	r31, r31
    b3f4:	ee 0f       	add	r30, r30
    b3f6:	ff 1f       	adc	r31, r31
    b3f8:	ee 0f       	add	r30, r30
    b3fa:	ff 1f       	adc	r31, r31
    b3fc:	e0 5b       	subi	r30, 0xB0	; 176
    b3fe:	fb 4d       	sbci	r31, 0xDB	; 219
    b400:	85 85       	ldd	r24, Z+13	; 0x0d
    b402:	82 fd       	sbrc	r24, 2
    b404:	6b c0       	rjmp	.+214    	; 0xb4dc <udd_ep_run+0x174>
    b406:	8f b7       	in	r24, 0x3f	; 63
    b408:	89 83       	std	Y+1, r24	; 0x01
    b40a:	f8 94       	cli
    b40c:	89 81       	ldd	r24, Y+1	; 0x01
    b40e:	f6 01       	movw	r30, r12
    b410:	90 81       	ld	r25, Z
    b412:	90 ff       	sbrs	r25, 0
    b414:	03 c0       	rjmp	.+6      	; 0xb41c <udd_ep_run+0xb4>
    b416:	8f bf       	out	0x3f, r24	; 63
    b418:	80 e0       	ldi	r24, 0x00	; 0
    b41a:	61 c0       	rjmp	.+194    	; 0xb4de <udd_ep_run+0x176>
    b41c:	f6 01       	movw	r30, r12
    b41e:	90 81       	ld	r25, Z
    b420:	91 60       	ori	r25, 0x01	; 1
    b422:	90 83       	st	Z, r25
    b424:	8f bf       	out	0x3f, r24	; 63
    b426:	81 82       	std	Z+1, r8	; 0x01
    b428:	92 82       	std	Z+2, r9	; 0x02
    b42a:	a3 82       	std	Z+3, r10	; 0x03
    b42c:	b4 82       	std	Z+4, r11	; 0x04
    b42e:	15 82       	std	Z+5, r1	; 0x05
    b430:	16 82       	std	Z+6, r1	; 0x06
    b432:	07 83       	std	Z+7, r16	; 0x07
    b434:	10 87       	std	Z+8, r17	; 0x08
    b436:	61 10       	cpse	r6, r1
    b438:	06 c0       	rjmp	.+12     	; 0xb446 <udd_ep_run+0xde>
    b43a:	91 e0       	ldi	r25, 0x01	; 1
    b43c:	a1 14       	cp	r10, r1
    b43e:	b1 04       	cpc	r11, r1
    b440:	19 f0       	breq	.+6      	; 0xb448 <udd_ep_run+0xe0>
    b442:	90 e0       	ldi	r25, 0x00	; 0
    b444:	01 c0       	rjmp	.+2      	; 0xb448 <udd_ep_run+0xe0>
    b446:	91 e0       	ldi	r25, 0x01	; 1
    b448:	f6 01       	movw	r30, r12
    b44a:	80 81       	ld	r24, Z
    b44c:	90 fb       	bst	r25, 0
    b44e:	81 f9       	bld	r24, 1
    b450:	8b 7f       	andi	r24, 0xFB	; 251
    b452:	80 83       	st	Z, r24
    b454:	22 23       	and	r18, r18
    b456:	64 f4       	brge	.+24     	; 0xb470 <udd_ep_run+0x108>
    b458:	f7 01       	movw	r30, r14
    b45a:	ee 0f       	add	r30, r30
    b45c:	ff 1f       	adc	r31, r31
    b45e:	ee 0f       	add	r30, r30
    b460:	ff 1f       	adc	r31, r31
    b462:	ee 0f       	add	r30, r30
    b464:	ff 1f       	adc	r31, r31
    b466:	e0 5b       	subi	r30, 0xB0	; 176
    b468:	fb 4d       	sbci	r31, 0xDB	; 219
    b46a:	12 8a       	std	Z+18, r1	; 0x12
    b46c:	13 8a       	std	Z+19, r1	; 0x13
    b46e:	30 c0       	rjmp	.+96     	; 0xb4d0 <udd_ep_run+0x168>
    b470:	f7 01       	movw	r30, r14
    b472:	ee 0f       	add	r30, r30
    b474:	ff 1f       	adc	r31, r31
    b476:	ee 0f       	add	r30, r30
    b478:	ff 1f       	adc	r31, r31
    b47a:	ee 0f       	add	r30, r30
    b47c:	ff 1f       	adc	r31, r31
    b47e:	e0 5b       	subi	r30, 0xB0	; 176
    b480:	fb 4d       	sbci	r31, 0xDB	; 219
    b482:	85 85       	ldd	r24, Z+13	; 0x0d
    b484:	80 7c       	andi	r24, 0xC0	; 192
    b486:	80 3c       	cpi	r24, 0xC0	; 192
    b488:	b1 f4       	brne	.+44     	; 0xb4b6 <udd_ep_run+0x14e>
    b48a:	c7 01       	movw	r24, r14
    b48c:	88 0f       	add	r24, r24
    b48e:	99 1f       	adc	r25, r25
    b490:	88 0f       	add	r24, r24
    b492:	99 1f       	adc	r25, r25
    b494:	88 0f       	add	r24, r24
    b496:	99 1f       	adc	r25, r25
    b498:	84 5a       	subi	r24, 0xA4	; 164
    b49a:	9b 4d       	sbci	r25, 0xDB	; 219
    b49c:	5b db       	rcall	.-2378   	; 0xab54 <udd_ep_get_size>
    b49e:	bc 01       	movw	r22, r24
    b4a0:	c5 01       	movw	r24, r10
    b4a2:	0e 94 73 85 	call	0x10ae6	; 0x10ae6 <__udivmodhi4>
    b4a6:	89 2b       	or	r24, r25
    b4a8:	31 f0       	breq	.+12     	; 0xb4b6 <udd_ep_run+0x14e>
    b4aa:	f6 01       	movw	r30, r12
    b4ac:	80 81       	ld	r24, Z
    b4ae:	8e 7f       	andi	r24, 0xFE	; 254
    b4b0:	80 83       	st	Z, r24
    b4b2:	80 e0       	ldi	r24, 0x00	; 0
    b4b4:	14 c0       	rjmp	.+40     	; 0xb4de <udd_ep_run+0x176>
    b4b6:	f7 01       	movw	r30, r14
    b4b8:	ee 0f       	add	r30, r30
    b4ba:	ff 1f       	adc	r31, r31
    b4bc:	ee 0f       	add	r30, r30
    b4be:	ff 1f       	adc	r31, r31
    b4c0:	ee 0f       	add	r30, r30
    b4c2:	ff 1f       	adc	r31, r31
    b4c4:	e0 5b       	subi	r30, 0xB0	; 176
    b4c6:	fb 4d       	sbci	r31, 0xDB	; 219
    b4c8:	16 86       	std	Z+14, r1	; 0x0e
    b4ca:	17 86       	std	Z+15, r1	; 0x0f
    b4cc:	12 8a       	std	Z+18, r1	; 0x12
    b4ce:	13 8a       	std	Z+19, r1	; 0x13
    b4d0:	87 2d       	mov	r24, r7
    b4d2:	f6 db       	rcall	.-2068   	; 0xacc0 <udd_ep_trans_complet>
    b4d4:	81 e0       	ldi	r24, 0x01	; 1
    b4d6:	03 c0       	rjmp	.+6      	; 0xb4de <udd_ep_run+0x176>
    b4d8:	80 e0       	ldi	r24, 0x00	; 0
    b4da:	01 c0       	rjmp	.+2      	; 0xb4de <udd_ep_run+0x176>
    b4dc:	80 e0       	ldi	r24, 0x00	; 0
    b4de:	0f 90       	pop	r0
    b4e0:	df 91       	pop	r29
    b4e2:	cf 91       	pop	r28
    b4e4:	1f 91       	pop	r17
    b4e6:	0f 91       	pop	r16
    b4e8:	ff 90       	pop	r15
    b4ea:	ef 90       	pop	r14
    b4ec:	df 90       	pop	r13
    b4ee:	cf 90       	pop	r12
    b4f0:	bf 90       	pop	r11
    b4f2:	af 90       	pop	r10
    b4f4:	9f 90       	pop	r9
    b4f6:	8f 90       	pop	r8
    b4f8:	7f 90       	pop	r7
    b4fa:	6f 90       	pop	r6
    b4fc:	08 95       	ret

0000b4fe <udd_ep_abort>:
    b4fe:	ff 92       	push	r15
    b500:	0f 93       	push	r16
    b502:	1f 93       	push	r17
    b504:	cf 93       	push	r28
    b506:	df 93       	push	r29
    b508:	18 2f       	mov	r17, r24
    b50a:	c8 2f       	mov	r28, r24
    b50c:	cf 70       	andi	r28, 0x0F	; 15
    b50e:	d0 e0       	ldi	r29, 0x00	; 0
    b510:	ce 01       	movw	r24, r28
    b512:	88 0f       	add	r24, r24
    b514:	99 1f       	adc	r25, r25
    b516:	c1 2f       	mov	r28, r17
    b518:	01 2e       	mov	r0, r17
    b51a:	00 0c       	add	r0, r0
    b51c:	dd 0b       	sbc	r29, r29
    b51e:	cc 27       	eor	r28, r28
    b520:	dd 0f       	add	r29, r29
    b522:	cc 1f       	adc	r28, r28
    b524:	dd 27       	eor	r29, r29
    b526:	c8 0f       	add	r28, r24
    b528:	d9 1f       	adc	r29, r25
    b52a:	81 2f       	mov	r24, r17
    b52c:	3c db       	rcall	.-2440   	; 0xaba6 <udd_ep_get_job>
    b52e:	dc 01       	movw	r26, r24
    b530:	fe 01       	movw	r30, r28
    b532:	ee 0f       	add	r30, r30
    b534:	ff 1f       	adc	r31, r31
    b536:	ee 0f       	add	r30, r30
    b538:	ff 1f       	adc	r31, r31
    b53a:	ee 0f       	add	r30, r30
    b53c:	ff 1f       	adc	r31, r31
    b53e:	e4 5a       	subi	r30, 0xA4	; 164
    b540:	fb 4d       	sbci	r31, 0xDB	; 219
    b542:	02 e0       	ldi	r16, 0x02	; 2
    b544:	05 93       	las	Z, r16
    b546:	8c 91       	ld	r24, X
    b548:	80 ff       	sbrs	r24, 0
    b54a:	22 c0       	rjmp	.+68     	; 0xb590 <udd_ep_abort+0x92>
    b54c:	8e 7f       	andi	r24, 0xFE	; 254
    b54e:	8c 93       	st	X, r24
    b550:	17 96       	adiw	r26, 0x07	; 7
    b552:	ed 91       	ld	r30, X+
    b554:	fc 91       	ld	r31, X
    b556:	18 97       	sbiw	r26, 0x08	; 8
    b558:	30 97       	sbiw	r30, 0x00	; 0
    b55a:	d1 f0       	breq	.+52     	; 0xb590 <udd_ep_abort+0x92>
    b55c:	11 23       	and	r17, r17
    b55e:	5c f4       	brge	.+22     	; 0xb576 <udd_ep_abort+0x78>
    b560:	cc 0f       	add	r28, r28
    b562:	dd 1f       	adc	r29, r29
    b564:	cc 0f       	add	r28, r28
    b566:	dd 1f       	adc	r29, r29
    b568:	cc 0f       	add	r28, r28
    b56a:	dd 1f       	adc	r29, r29
    b56c:	c0 5b       	subi	r28, 0xB0	; 176
    b56e:	db 4d       	sbci	r29, 0xDB	; 219
    b570:	6a 89       	ldd	r22, Y+18	; 0x12
    b572:	7b 89       	ldd	r23, Y+19	; 0x13
    b574:	0a c0       	rjmp	.+20     	; 0xb58a <udd_ep_abort+0x8c>
    b576:	cc 0f       	add	r28, r28
    b578:	dd 1f       	adc	r29, r29
    b57a:	cc 0f       	add	r28, r28
    b57c:	dd 1f       	adc	r29, r29
    b57e:	cc 0f       	add	r28, r28
    b580:	dd 1f       	adc	r29, r29
    b582:	c0 5b       	subi	r28, 0xB0	; 176
    b584:	db 4d       	sbci	r29, 0xDB	; 219
    b586:	6e 85       	ldd	r22, Y+14	; 0x0e
    b588:	7f 85       	ldd	r23, Y+15	; 0x0f
    b58a:	41 2f       	mov	r20, r17
    b58c:	81 e0       	ldi	r24, 0x01	; 1
    b58e:	19 95       	eicall
    b590:	df 91       	pop	r29
    b592:	cf 91       	pop	r28
    b594:	1f 91       	pop	r17
    b596:	0f 91       	pop	r16
    b598:	ff 90       	pop	r15
    b59a:	08 95       	ret

0000b59c <udd_ep_free>:
    b59c:	cf 93       	push	r28
    b59e:	c8 2f       	mov	r28, r24
    b5a0:	ae df       	rcall	.-164    	; 0xb4fe <udd_ep_abort>
    b5a2:	ec 2f       	mov	r30, r28
    b5a4:	ef 70       	andi	r30, 0x0F	; 15
    b5a6:	f0 e0       	ldi	r31, 0x00	; 0
    b5a8:	ee 0f       	add	r30, r30
    b5aa:	ff 1f       	adc	r31, r31
    b5ac:	8c 2f       	mov	r24, r28
    b5ae:	cc 0f       	add	r28, r28
    b5b0:	99 0b       	sbc	r25, r25
    b5b2:	88 27       	eor	r24, r24
    b5b4:	99 0f       	add	r25, r25
    b5b6:	88 1f       	adc	r24, r24
    b5b8:	99 27       	eor	r25, r25
    b5ba:	e8 0f       	add	r30, r24
    b5bc:	f9 1f       	adc	r31, r25
    b5be:	ee 0f       	add	r30, r30
    b5c0:	ff 1f       	adc	r31, r31
    b5c2:	ee 0f       	add	r30, r30
    b5c4:	ff 1f       	adc	r31, r31
    b5c6:	ee 0f       	add	r30, r30
    b5c8:	ff 1f       	adc	r31, r31
    b5ca:	e0 5b       	subi	r30, 0xB0	; 176
    b5cc:	fb 4d       	sbci	r31, 0xDB	; 219
    b5ce:	15 86       	std	Z+13, r1	; 0x0d
    b5d0:	cf 91       	pop	r28
    b5d2:	08 95       	ret

0000b5d4 <udd_ep_set_halt>:
    b5d4:	e8 2f       	mov	r30, r24
    b5d6:	ef 70       	andi	r30, 0x0F	; 15
    b5d8:	f0 e0       	ldi	r31, 0x00	; 0
    b5da:	ee 0f       	add	r30, r30
    b5dc:	ff 1f       	adc	r31, r31
    b5de:	28 2f       	mov	r18, r24
    b5e0:	08 2e       	mov	r0, r24
    b5e2:	00 0c       	add	r0, r0
    b5e4:	33 0b       	sbc	r19, r19
    b5e6:	22 27       	eor	r18, r18
    b5e8:	33 0f       	add	r19, r19
    b5ea:	22 1f       	adc	r18, r18
    b5ec:	33 27       	eor	r19, r19
    b5ee:	e2 0f       	add	r30, r18
    b5f0:	f3 1f       	adc	r31, r19
    b5f2:	ee 0f       	add	r30, r30
    b5f4:	ff 1f       	adc	r31, r31
    b5f6:	ee 0f       	add	r30, r30
    b5f8:	ff 1f       	adc	r31, r31
    b5fa:	ee 0f       	add	r30, r30
    b5fc:	ff 1f       	adc	r31, r31
    b5fe:	e0 5b       	subi	r30, 0xB0	; 176
    b600:	fb 4d       	sbci	r31, 0xDB	; 219
    b602:	95 85       	ldd	r25, Z+13	; 0x0d
    b604:	94 60       	ori	r25, 0x04	; 4
    b606:	95 87       	std	Z+13, r25	; 0x0d
    b608:	7a df       	rcall	.-268    	; 0xb4fe <udd_ep_abort>
    b60a:	81 e0       	ldi	r24, 0x01	; 1
    b60c:	08 95       	ret

0000b60e <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    b60e:	1f 92       	push	r1
    b610:	0f 92       	push	r0
    b612:	0f b6       	in	r0, 0x3f	; 63
    b614:	0f 92       	push	r0
    b616:	11 24       	eor	r1, r1
    b618:	0b b6       	in	r0, 0x3b	; 59
    b61a:	0f 92       	push	r0
    b61c:	0f 93       	push	r16
    b61e:	2f 93       	push	r18
    b620:	3f 93       	push	r19
    b622:	4f 93       	push	r20
    b624:	5f 93       	push	r21
    b626:	6f 93       	push	r22
    b628:	7f 93       	push	r23
    b62a:	8f 93       	push	r24
    b62c:	9f 93       	push	r25
    b62e:	af 93       	push	r26
    b630:	bf 93       	push	r27
    b632:	ef 93       	push	r30
    b634:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    b636:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b63a:	88 23       	and	r24, r24
    b63c:	34 f4       	brge	.+12     	; 0xb64a <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    b63e:	80 e8       	ldi	r24, 0x80	; 128
    b640:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    b644:	0e 94 18 78 	call	0xf030	; 0xf030 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    b648:	8a c0       	rjmp	.+276    	; 0xb75e <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    b64a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b64e:	82 ff       	sbrs	r24, 2
    b650:	20 c0       	rjmp	.+64     	; 0xb692 <__vector_125+0x84>
		udd_ack_underflow_event();
    b652:	84 e0       	ldi	r24, 0x04	; 4
    b654:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    b658:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_sram+0x14>
    b65c:	86 ff       	sbrs	r24, 6
    b65e:	7f c0       	rjmp	.+254    	; 0xb75e <__vector_125+0x150>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    b660:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b664:	81 fd       	sbrc	r24, 1
    b666:	7b c0       	rjmp	.+246    	; 0xb75e <__vector_125+0x150>
    b668:	b9 da       	rcall	.-2702   	; 0xabdc <udd_ctrl_interrupt_tc_setup>
    b66a:	81 11       	cpse	r24, r1
    b66c:	78 c0       	rjmp	.+240    	; 0xb75e <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    b66e:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <udd_ep_control_state>
    b672:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    b674:	11 f4       	brne	.+4      	; 0xb67a <__vector_125+0x6c>
    b676:	ec d9       	rcall	.-3112   	; 0xaa50 <udd_ctrl_send_zlp_in>
    b678:	72 c0       	rjmp	.+228    	; 0xb75e <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    b67a:	84 30       	cpi	r24, 0x04	; 4
    b67c:	09 f0       	breq	.+2      	; 0xb680 <__vector_125+0x72>
    b67e:	6f c0       	rjmp	.+222    	; 0xb75e <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    b680:	e5 e6       	ldi	r30, 0x65	; 101
    b682:	f4 e2       	ldi	r31, 0x24	; 36
    b684:	04 e0       	ldi	r16, 0x04	; 4
    b686:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    b688:	ed e5       	ldi	r30, 0x5D	; 93
    b68a:	f4 e2       	ldi	r31, 0x24	; 36
    b68c:	04 e0       	ldi	r16, 0x04	; 4
    b68e:	05 93       	las	Z, r16
    b690:	66 c0       	rjmp	.+204    	; 0xb75e <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    b692:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b696:	81 ff       	sbrs	r24, 1
    b698:	5d c0       	rjmp	.+186    	; 0xb754 <__vector_125+0x146>
		udd_ack_overflow_event();
    b69a:	82 e0       	ldi	r24, 0x02	; 2
    b69c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    b6a0:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_sram+0xc>
    b6a4:	86 ff       	sbrs	r24, 6
    b6a6:	5b c0       	rjmp	.+182    	; 0xb75e <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    b6a8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b6ac:	81 fd       	sbrc	r24, 1
    b6ae:	57 c0       	rjmp	.+174    	; 0xb75e <__vector_125+0x150>
    b6b0:	95 da       	rcall	.-2774   	; 0xabdc <udd_ctrl_interrupt_tc_setup>
    b6b2:	81 11       	cpse	r24, r1
    b6b4:	54 c0       	rjmp	.+168    	; 0xb75e <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    b6b6:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <udd_ep_control_state>
    b6ba:	82 30       	cpi	r24, 0x02	; 2
    b6bc:	41 f4       	brne	.+16     	; 0xb6ce <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    b6be:	84 e0       	ldi	r24, 0x04	; 4
    b6c0:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    b6c4:	ec e5       	ldi	r30, 0x5C	; 92
    b6c6:	f4 e2       	ldi	r31, 0x24	; 36
    b6c8:	02 e0       	ldi	r16, 0x02	; 2
    b6ca:	06 93       	lac	Z, r16
    b6cc:	48 c0       	rjmp	.+144    	; 0xb75e <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    b6ce:	83 30       	cpi	r24, 0x03	; 3
    b6d0:	09 f0       	breq	.+2      	; 0xb6d4 <__vector_125+0xc6>
    b6d2:	45 c0       	rjmp	.+138    	; 0xb75e <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    b6d4:	e5 e6       	ldi	r30, 0x65	; 101
    b6d6:	f4 e2       	ldi	r31, 0x24	; 36
    b6d8:	04 e0       	ldi	r16, 0x04	; 4
    b6da:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    b6dc:	ed e5       	ldi	r30, 0x5D	; 93
    b6de:	f4 e2       	ldi	r31, 0x24	; 36
    b6e0:	04 e0       	ldi	r16, 0x04	; 4
    b6e2:	05 93       	las	Z, r16
    b6e4:	3c c0       	rjmp	.+120    	; 0xb75e <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    b6e6:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    b6e8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    b6ec:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    b6ee:	07 df       	rcall	.-498    	; 0xb4fe <udd_ep_abort>
    b6f0:	81 e8       	ldi	r24, 0x81	; 129
    b6f2:	05 df       	rcall	.-502    	; 0xb4fe <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    b6f4:	82 e0       	ldi	r24, 0x02	; 2
    b6f6:	03 df       	rcall	.-506    	; 0xb4fe <udd_ep_abort>
    b6f8:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    b6fa:	01 df       	rcall	.-510    	; 0xb4fe <udd_ep_abort>
    b6fc:	0e 94 ea 77 	call	0xefd4	; 0xefd4 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    b700:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    b704:	e0 e5       	ldi	r30, 0x50	; 80
    b706:	f4 e2       	ldi	r31, 0x24	; 36
	udd_endpoint_clear_status(ep_ctrl);
    b708:	15 86       	std	Z+13, r1	; 0x0d
    b70a:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    b70c:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    b70e:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    b710:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    b712:	15 8a       	std	Z+21, r1	; 0x15
    b714:	94 8b       	std	Z+20, r25	; 0x14
    b716:	85 8b       	std	Z+21, r24	; 0x15
    b718:	88 e0       	ldi	r24, 0x08	; 8
		// Reset endpoint control management
		udd_ctrl_init();
    b71a:	94 e2       	ldi	r25, 0x24	; 36
    b71c:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    b71e:	91 8b       	std	Z+17, r25	; 0x11
    b720:	64 d9       	rcall	.-3384   	; 0xa9ea <udd_ctrl_init>
    b722:	1d c0       	rjmp	.+58     	; 0xb75e <__vector_125+0x150>
		udd_ack_suspend_event();
    b724:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b728:	86 ff       	sbrs	r24, 6
		udd_sleep_mode(false); // Enter in SUSPEND mode
    b72a:	08 c0       	rjmp	.+16     	; 0xb73c <__vector_125+0x12e>
    b72c:	80 e4       	ldi	r24, 0x40	; 64
    b72e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    b732:	80 e0       	ldi	r24, 0x00	; 0
    b734:	22 d9       	rcall	.-3516   	; 0xa97a <udd_sleep_mode>
    b736:	0e 94 4c 21 	call	0x4298	; 0x4298 <usb_callback_suspend_action>
		udd_ack_resume_event();
    b73a:	11 c0       	rjmp	.+34     	; 0xb75e <__vector_125+0x150>
    b73c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    b740:	85 ff       	sbrs	r24, 5
    b742:	0d c0       	rjmp	.+26     	; 0xb75e <__vector_125+0x150>
    b744:	80 e2       	ldi	r24, 0x20	; 32
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    b746:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    b74a:	81 e0       	ldi	r24, 0x01	; 1
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    b74c:	16 d9       	rcall	.-3540   	; 0xa97a <udd_sleep_mode>
    b74e:	0e 94 50 21 	call	0x42a0	; 0x42a0 <usb_callback_resume_action>
    b752:	05 c0       	rjmp	.+10     	; 0xb75e <__vector_125+0x150>
    b754:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    b758:	84 fd       	sbrc	r24, 4
    b75a:	c5 cf       	rjmp	.-118    	; 0xb6e6 <__vector_125+0xd8>
    b75c:	e3 cf       	rjmp	.-58     	; 0xb724 <__vector_125+0x116>
    b75e:	ff 91       	pop	r31
    b760:	ef 91       	pop	r30
    b762:	bf 91       	pop	r27
    b764:	af 91       	pop	r26
    b766:	9f 91       	pop	r25
    b768:	8f 91       	pop	r24
    b76a:	7f 91       	pop	r23
    b76c:	6f 91       	pop	r22
    b76e:	5f 91       	pop	r21
    b770:	4f 91       	pop	r20
    b772:	3f 91       	pop	r19
    b774:	2f 91       	pop	r18
    b776:	0f 91       	pop	r16
    b778:	0f 90       	pop	r0
    b77a:	0b be       	out	0x3b, r0	; 59
    b77c:	0f 90       	pop	r0
    b77e:	0f be       	out	0x3f, r0	; 63
    b780:	0f 90       	pop	r0
    b782:	1f 90       	pop	r1
    b784:	18 95       	reti

0000b786 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    b786:	1f 92       	push	r1
    b788:	0f 92       	push	r0
    b78a:	0f b6       	in	r0, 0x3f	; 63
    b78c:	0f 92       	push	r0
    b78e:	11 24       	eor	r1, r1
    b790:	0b b6       	in	r0, 0x3b	; 59
    b792:	0f 92       	push	r0
    b794:	0f 93       	push	r16
    b796:	1f 93       	push	r17
    b798:	2f 93       	push	r18
    b79a:	3f 93       	push	r19
    b79c:	4f 93       	push	r20
    b79e:	5f 93       	push	r21
    b7a0:	6f 93       	push	r22
    b7a2:	7f 93       	push	r23
    b7a4:	8f 93       	push	r24
    b7a6:	9f 93       	push	r25
    b7a8:	af 93       	push	r26
    b7aa:	bf 93       	push	r27
    b7ac:	cf 93       	push	r28
    b7ae:	df 93       	push	r29
    b7b0:	ef 93       	push	r30
    b7b2:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    b7b4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b7b8:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    b7ba:	03 c0       	rjmp	.+6      	; 0xb7c2 <__vector_126+0x3c>
    b7bc:	0f da       	rcall	.-3042   	; 0xabdc <udd_ctrl_interrupt_tc_setup>
    b7be:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    b7c0:	c4 c0       	rjmp	.+392    	; 0xb94a <__vector_126+0x1c4>
    b7c2:	82 e0       	ldi	r24, 0x02	; 2
    b7c4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    b7c8:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    b7cc:	81 95       	neg	r24
    b7ce:	88 0f       	add	r24, r24
    b7d0:	ec e5       	ldi	r30, 0x5C	; 92
    b7d2:	f4 e2       	ldi	r31, 0x24	; 36
    b7d4:	e8 1b       	sub	r30, r24
    b7d6:	f1 09       	sbc	r31, r1
    b7d8:	20 81       	ld	r18, Z
    b7da:	31 81       	ldd	r19, Z+1	; 0x01
    b7dc:	2c 55       	subi	r18, 0x5C	; 92
    b7de:	34 42       	sbci	r19, 0x24	; 36
    b7e0:	36 95       	lsr	r19
    b7e2:	27 95       	ror	r18
    b7e4:	36 95       	lsr	r19
    b7e6:	27 95       	ror	r18
    b7e8:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    b7ea:	27 95       	ror	r18
    b7ec:	82 2f       	mov	r24, r18
    b7ee:	86 95       	lsr	r24
    b7f0:	20 fd       	sbrc	r18, 0
    b7f2:	02 c0       	rjmp	.+4      	; 0xb7f8 <__vector_126+0x72>
    b7f4:	90 e0       	ldi	r25, 0x00	; 0
    b7f6:	01 c0       	rjmp	.+2      	; 0xb7fa <__vector_126+0x74>
    b7f8:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    b7fa:	89 0f       	add	r24, r25
    b7fc:	e8 2f       	mov	r30, r24
    b7fe:	ef 70       	andi	r30, 0x0F	; 15
    b800:	f0 e0       	ldi	r31, 0x00	; 0
    b802:	ee 0f       	add	r30, r30
    b804:	ff 1f       	adc	r31, r31
    b806:	28 2f       	mov	r18, r24
    b808:	08 2e       	mov	r0, r24
    b80a:	00 0c       	add	r0, r0
    b80c:	33 0b       	sbc	r19, r19
    b80e:	22 27       	eor	r18, r18
    b810:	33 0f       	add	r19, r19
    b812:	22 1f       	adc	r18, r18
    b814:	33 27       	eor	r19, r19
    b816:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    b818:	f3 1f       	adc	r31, r19
    b81a:	df 01       	movw	r26, r30
    b81c:	aa 0f       	add	r26, r26
    b81e:	bb 1f       	adc	r27, r27
    b820:	aa 0f       	add	r26, r26
    b822:	bb 1f       	adc	r27, r27
    b824:	aa 0f       	add	r26, r26
    b826:	bb 1f       	adc	r27, r27
    b828:	a0 5b       	subi	r26, 0xB0	; 176
    b82a:	bb 4d       	sbci	r27, 0xDB	; 219
    b82c:	1c 96       	adiw	r26, 0x0c	; 12
    b82e:	9c 91       	ld	r25, X
    b830:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    b832:	8b c0       	rjmp	.+278    	; 0xb94a <__vector_126+0x1c4>
    b834:	ee 0f       	add	r30, r30
    b836:	ff 1f       	adc	r31, r31
    b838:	ee 0f       	add	r30, r30
    b83a:	ff 1f       	adc	r31, r31
    b83c:	ee 0f       	add	r30, r30
    b83e:	ff 1f       	adc	r31, r31
    b840:	e4 5a       	subi	r30, 0xA4	; 164
    b842:	fb 4d       	sbci	r31, 0xDB	; 219
    b844:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    b846:	06 93       	lac	Z, r16
    b848:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    b84a:	7a c0       	rjmp	.+244    	; 0xb940 <__vector_126+0x1ba>
    b84c:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    b850:	84 30       	cpi	r24, 0x04	; 4
    b852:	19 f4       	brne	.+6      	; 0xb85a <__vector_126+0xd4>
    b854:	0b d9       	rcall	.-3562   	; 0xaa6c <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    b856:	c9 d8       	rcall	.-3694   	; 0xa9ea <udd_ctrl_init>
    b858:	78 c0       	rjmp	.+240    	; 0xb94a <__vector_126+0x1c4>
    b85a:	00 91 5e 24 	lds	r16, 0x245E	; 0x80245e <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    b85e:	10 91 5f 24 	lds	r17, 0x245F	; 0x80245f <udd_sram+0xf>
    b862:	80 91 ef 2d 	lds	r24, 0x2DEF	; 0x802def <udd_g_ctrlreq+0xa>
    b866:	90 91 f0 2d 	lds	r25, 0x2DF0	; 0x802df0 <udd_g_ctrlreq+0xb>
    b86a:	c0 91 48 24 	lds	r28, 0x2448	; 0x802448 <udd_ctrl_payload_nb_trans>
    b86e:	d0 91 49 24 	lds	r29, 0x2449	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    b872:	98 01       	movw	r18, r16
    b874:	2c 0f       	add	r18, r28
    b876:	3d 1f       	adc	r19, r29
    b878:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    b87a:	93 07       	cpc	r25, r19
    b87c:	18 f4       	brcc	.+6      	; 0xb884 <__vector_126+0xfe>
    b87e:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    b880:	0c 1b       	sub	r16, r28
    b882:	1d 0b       	sbc	r17, r29
    b884:	80 91 ed 2d 	lds	r24, 0x2DED	; 0x802ded <udd_g_ctrlreq+0x8>
    b888:	90 91 ee 2d 	lds	r25, 0x2DEE	; 0x802dee <udd_g_ctrlreq+0x9>
    b88c:	a8 01       	movw	r20, r16
    b88e:	68 e0       	ldi	r22, 0x08	; 8
    b890:	74 e2       	ldi	r23, 0x24	; 36
    b892:	8c 0f       	add	r24, r28
    b894:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    b896:	0e 94 eb 88 	call	0x111d6	; 0x111d6 <memcpy>
    b89a:	c0 0f       	add	r28, r16
    b89c:	d1 1f       	adc	r29, r17
    b89e:	c0 93 48 24 	sts	0x2448, r28	; 0x802448 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    b8a2:	d0 93 49 24 	sts	0x2449, r29	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    b8a6:	00 34       	cpi	r16, 0x40	; 64
    b8a8:	11 05       	cpc	r17, r1
    b8aa:	69 f4       	brne	.+26     	; 0xb8c6 <__vector_126+0x140>
    b8ac:	80 91 4a 24 	lds	r24, 0x244A	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    b8b0:	90 91 4b 24 	lds	r25, 0x244B	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    b8b4:	8c 0f       	add	r24, r28
    b8b6:	9d 1f       	adc	r25, r29
    b8b8:	20 91 eb 2d 	lds	r18, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    b8bc:	30 91 ec 2d 	lds	r19, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    b8c0:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    b8c2:	93 07       	cpc	r25, r19
    b8c4:	80 f0       	brcs	.+32     	; 0xb8e6 <__vector_126+0x160>
    b8c6:	e5 ee       	ldi	r30, 0xE5	; 229
    b8c8:	fd e2       	ldi	r31, 0x2D	; 45
		if (NULL != udd_g_ctrlreq.over_under_run) {
    b8ca:	c2 87       	std	Z+10, r28	; 0x0a
    b8cc:	d3 87       	std	Z+11, r29	; 0x0b
    b8ce:	06 84       	ldd	r0, Z+14	; 0x0e
    b8d0:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    b8d2:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    b8d4:	30 97       	sbiw	r30, 0x00	; 0
    b8d6:	29 f0       	breq	.+10     	; 0xb8e2 <__vector_126+0x15c>
    b8d8:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    b8da:	81 11       	cpse	r24, r1
    b8dc:	02 c0       	rjmp	.+4      	; 0xb8e2 <__vector_126+0x15c>
    b8de:	aa d8       	rcall	.-3756   	; 0xaa34 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    b8e0:	34 c0       	rjmp	.+104    	; 0xb94a <__vector_126+0x1c4>
    b8e2:	b6 d8       	rcall	.-3732   	; 0xaa50 <udd_ctrl_send_zlp_in>
    b8e4:	32 c0       	rjmp	.+100    	; 0xb94a <__vector_126+0x1c4>
    b8e6:	80 91 ef 2d 	lds	r24, 0x2DEF	; 0x802def <udd_g_ctrlreq+0xa>
    b8ea:	90 91 f0 2d 	lds	r25, 0x2DF0	; 0x802df0 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    b8ee:	c8 17       	cp	r28, r24
    b8f0:	d9 07       	cpc	r29, r25
    b8f2:	f9 f4       	brne	.+62     	; 0xb932 <__vector_126+0x1ac>
    b8f4:	e0 91 f3 2d 	lds	r30, 0x2DF3	; 0x802df3 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    b8f8:	f0 91 f4 2d 	lds	r31, 0x2DF4	; 0x802df4 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    b8fc:	30 97       	sbiw	r30, 0x00	; 0
    b8fe:	11 f4       	brne	.+4      	; 0xb904 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    b900:	99 d8       	rcall	.-3790   	; 0xaa34 <udd_ctrl_stall_data>
    b902:	23 c0       	rjmp	.+70     	; 0xb94a <__vector_126+0x1c4>
    b904:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    b906:	81 11       	cpse	r24, r1
    b908:	02 c0       	rjmp	.+4      	; 0xb90e <__vector_126+0x188>
    b90a:	94 d8       	rcall	.-3800   	; 0xaa34 <udd_ctrl_stall_data>
    b90c:	1e c0       	rjmp	.+60     	; 0xb94a <__vector_126+0x1c4>
    b90e:	20 91 4a 24 	lds	r18, 0x244A	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    b912:	30 91 4b 24 	lds	r19, 0x244B	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    b916:	80 91 48 24 	lds	r24, 0x2448	; 0x802448 <udd_ctrl_payload_nb_trans>
    b91a:	90 91 49 24 	lds	r25, 0x2449	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    b91e:	82 0f       	add	r24, r18
    b920:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    b922:	80 93 4a 24 	sts	0x244A, r24	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    b926:	90 93 4b 24 	sts	0x244B, r25	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    b92a:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <udd_ctrl_payload_nb_trans>
    b92e:	10 92 49 24 	sts	0x2449, r1	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
	udd_control_out_ack_tc();
    b932:	ec e5       	ldi	r30, 0x5C	; 92
    b934:	f4 e2       	ldi	r31, 0x24	; 36
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    b936:	02 e0       	ldi	r16, 0x02	; 2
    b938:	06 93       	lac	Z, r16
		udd_ctrl_in_sent();
    b93a:	00 e2       	ldi	r16, 0x20	; 32
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    b93c:	06 93       	lac	Z, r16
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    b93e:	05 c0       	rjmp	.+10     	; 0xb94a <__vector_126+0x1c4>
    b940:	80 38       	cpi	r24, 0x80	; 128
	}
#endif

udd_interrupt_tc_end:
	return;
}
    b942:	11 f4       	brne	.+4      	; 0xb948 <__vector_126+0x1c2>
    b944:	9b d8       	rcall	.-3786   	; 0xaa7c <udd_ctrl_in_sent>
    b946:	01 c0       	rjmp	.+2      	; 0xb94a <__vector_126+0x1c4>
    b948:	bb d9       	rcall	.-3210   	; 0xacc0 <udd_ep_trans_complet>
    b94a:	ff 91       	pop	r31
    b94c:	ef 91       	pop	r30
    b94e:	df 91       	pop	r29
    b950:	cf 91       	pop	r28
    b952:	bf 91       	pop	r27
    b954:	af 91       	pop	r26
    b956:	9f 91       	pop	r25
    b958:	8f 91       	pop	r24
    b95a:	7f 91       	pop	r23
    b95c:	6f 91       	pop	r22
    b95e:	5f 91       	pop	r21
    b960:	4f 91       	pop	r20
    b962:	3f 91       	pop	r19
    b964:	2f 91       	pop	r18
    b966:	1f 91       	pop	r17
    b968:	0f 91       	pop	r16
    b96a:	0f 90       	pop	r0
    b96c:	0b be       	out	0x3b, r0	; 59
    b96e:	0f 90       	pop	r0
    b970:	0f be       	out	0x3f, r0	; 63
    b972:	0f 90       	pop	r0
    b974:	1f 90       	pop	r1
    b976:	18 95       	reti

0000b978 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    b978:	cf 92       	push	r12
    b97a:	df 92       	push	r13
    b97c:	ef 92       	push	r14
    b97e:	ff 92       	push	r15
    b980:	cf 93       	push	r28
    b982:	df 93       	push	r29
    b984:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    b986:	6b 01       	movw	r12, r22
    b988:	e1 2c       	mov	r14, r1
    b98a:	f1 2c       	mov	r15, r1
    b98c:	60 e8       	ldi	r22, 0x80	; 128
    b98e:	73 ec       	ldi	r23, 0xC3	; 195
    b990:	89 ec       	ldi	r24, 0xC9	; 201
    b992:	91 e0       	ldi	r25, 0x01	; 1
    b994:	a7 01       	movw	r20, r14
    b996:	96 01       	movw	r18, r12
    b998:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
    b99c:	ca 01       	movw	r24, r20
    b99e:	b9 01       	movw	r22, r18
    b9a0:	2f ef       	ldi	r18, 0xFF	; 255
    b9a2:	3f ef       	ldi	r19, 0xFF	; 255
    b9a4:	40 e0       	ldi	r20, 0x00	; 0
    b9a6:	50 e0       	ldi	r21, 0x00	; 0
    b9a8:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
	if (smallest_div < 1) {
    b9ac:	21 15       	cp	r18, r1
    b9ae:	31 05       	cpc	r19, r1
    b9b0:	29 f4       	brne	.+10     	; 0xb9bc <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    b9b2:	81 e0       	ldi	r24, 0x01	; 1
    b9b4:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    b9b6:	21 e0       	ldi	r18, 0x01	; 1
    b9b8:	30 e0       	ldi	r19, 0x00	; 0
    b9ba:	2d c0       	rjmp	.+90     	; 0xba16 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    b9bc:	22 30       	cpi	r18, 0x02	; 2
    b9be:	31 05       	cpc	r19, r1
    b9c0:	28 f4       	brcc	.+10     	; 0xb9cc <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    b9c2:	82 e0       	ldi	r24, 0x02	; 2
    b9c4:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    b9c6:	22 e0       	ldi	r18, 0x02	; 2
    b9c8:	30 e0       	ldi	r19, 0x00	; 0
    b9ca:	25 c0       	rjmp	.+74     	; 0xba16 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    b9cc:	24 30       	cpi	r18, 0x04	; 4
    b9ce:	31 05       	cpc	r19, r1
    b9d0:	28 f4       	brcc	.+10     	; 0xb9dc <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    b9d2:	83 e0       	ldi	r24, 0x03	; 3
    b9d4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    b9d6:	24 e0       	ldi	r18, 0x04	; 4
    b9d8:	30 e0       	ldi	r19, 0x00	; 0
    b9da:	1d c0       	rjmp	.+58     	; 0xba16 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    b9dc:	28 30       	cpi	r18, 0x08	; 8
    b9de:	31 05       	cpc	r19, r1
    b9e0:	28 f4       	brcc	.+10     	; 0xb9ec <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    b9e2:	84 e0       	ldi	r24, 0x04	; 4
    b9e4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    b9e6:	28 e0       	ldi	r18, 0x08	; 8
    b9e8:	30 e0       	ldi	r19, 0x00	; 0
    b9ea:	15 c0       	rjmp	.+42     	; 0xba16 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    b9ec:	20 34       	cpi	r18, 0x40	; 64
    b9ee:	31 05       	cpc	r19, r1
    b9f0:	28 f4       	brcc	.+10     	; 0xb9fc <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    b9f2:	85 e0       	ldi	r24, 0x05	; 5
    b9f4:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    b9f6:	20 e4       	ldi	r18, 0x40	; 64
    b9f8:	30 e0       	ldi	r19, 0x00	; 0
    b9fa:	0d c0       	rjmp	.+26     	; 0xba16 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    b9fc:	2f 3f       	cpi	r18, 0xFF	; 255
    b9fe:	31 05       	cpc	r19, r1
    ba00:	09 f0       	breq	.+2      	; 0xba04 <pwm_set_frequency+0x8c>
    ba02:	28 f4       	brcc	.+10     	; 0xba0e <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    ba04:	86 e0       	ldi	r24, 0x06	; 6
    ba06:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    ba08:	20 e0       	ldi	r18, 0x00	; 0
    ba0a:	31 e0       	ldi	r19, 0x01	; 1
    ba0c:	04 c0       	rjmp	.+8      	; 0xba16 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    ba0e:	87 e0       	ldi	r24, 0x07	; 7
    ba10:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    ba12:	20 e0       	ldi	r18, 0x00	; 0
    ba14:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    ba16:	40 e0       	ldi	r20, 0x00	; 0
    ba18:	50 e0       	ldi	r21, 0x00	; 0
    ba1a:	60 e8       	ldi	r22, 0x80	; 128
    ba1c:	73 ec       	ldi	r23, 0xC3	; 195
    ba1e:	89 ec       	ldi	r24, 0xC9	; 201
    ba20:	91 e0       	ldi	r25, 0x01	; 1
    ba22:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
    ba26:	ca 01       	movw	r24, r20
    ba28:	b9 01       	movw	r22, r18
    ba2a:	a7 01       	movw	r20, r14
    ba2c:	96 01       	movw	r18, r12
    ba2e:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
    ba32:	2d 83       	std	Y+5, r18	; 0x05
    ba34:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    ba36:	24 36       	cpi	r18, 0x64	; 100
    ba38:	31 05       	cpc	r19, r1
    ba3a:	18 f4       	brcc	.+6      	; 0xba42 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    ba3c:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    ba3e:	1d 82       	std	Y+5, r1	; 0x05
    ba40:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    ba42:	df 91       	pop	r29
    ba44:	cf 91       	pop	r28
    ba46:	ff 90       	pop	r15
    ba48:	ef 90       	pop	r14
    ba4a:	df 90       	pop	r13
    ba4c:	cf 90       	pop	r12
    ba4e:	08 95       	ret

0000ba50 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    ba50:	0f 93       	push	r16
    ba52:	1f 93       	push	r17
    ba54:	cf 93       	push	r28
    ba56:	df 93       	push	r29
    ba58:	ec 01       	movw	r28, r24
    ba5a:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    ba5c:	86 2f       	mov	r24, r22
    ba5e:	90 e0       	ldi	r25, 0x00	; 0
    ba60:	87 30       	cpi	r24, 0x07	; 7
    ba62:	91 05       	cpc	r25, r1
    ba64:	08 f0       	brcs	.+2      	; 0xba68 <pwm_init+0x18>
    ba66:	8b c0       	rjmp	.+278    	; 0xbb7e <pwm_init+0x12e>
    ba68:	fc 01       	movw	r30, r24
    ba6a:	88 27       	eor	r24, r24
    ba6c:	eb 5f       	subi	r30, 0xFB	; 251
    ba6e:	fe 4f       	sbci	r31, 0xFE	; 254
    ba70:	8f 4f       	sbci	r24, 0xFF	; 255
    ba72:	0c 94 d8 85 	jmp	0x10bb0	; 0x10bb0 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    ba76:	80 e0       	ldi	r24, 0x00	; 0
    ba78:	98 e0       	ldi	r25, 0x08	; 8
    ba7a:	88 83       	st	Y, r24
    ba7c:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    ba7e:	e0 e4       	ldi	r30, 0x40	; 64
    ba80:	f6 e0       	ldi	r31, 0x06	; 6
    ba82:	30 81       	ld	r19, Z
    ba84:	81 e0       	ldi	r24, 0x01	; 1
    ba86:	90 e0       	ldi	r25, 0x00	; 0
    ba88:	2f ef       	ldi	r18, 0xFF	; 255
    ba8a:	24 0f       	add	r18, r20
    ba8c:	02 c0       	rjmp	.+4      	; 0xba92 <pwm_init+0x42>
    ba8e:	88 0f       	add	r24, r24
    ba90:	99 1f       	adc	r25, r25
    ba92:	2a 95       	dec	r18
    ba94:	e2 f7       	brpl	.-8      	; 0xba8e <pwm_init+0x3e>
    ba96:	83 2b       	or	r24, r19
    ba98:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    ba9a:	71 c0       	rjmp	.+226    	; 0xbb7e <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    ba9c:	80 e4       	ldi	r24, 0x40	; 64
    ba9e:	98 e0       	ldi	r25, 0x08	; 8
    baa0:	88 83       	st	Y, r24
    baa2:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    baa4:	e0 e4       	ldi	r30, 0x40	; 64
    baa6:	f6 e0       	ldi	r31, 0x06	; 6
    baa8:	30 81       	ld	r19, Z
    baaa:	81 e0       	ldi	r24, 0x01	; 1
    baac:	90 e0       	ldi	r25, 0x00	; 0
    baae:	23 e0       	ldi	r18, 0x03	; 3
    bab0:	24 0f       	add	r18, r20
    bab2:	02 c0       	rjmp	.+4      	; 0xbab8 <pwm_init+0x68>
    bab4:	88 0f       	add	r24, r24
    bab6:	99 1f       	adc	r25, r25
    bab8:	2a 95       	dec	r18
    baba:	e2 f7       	brpl	.-8      	; 0xbab4 <pwm_init+0x64>
    babc:	83 2b       	or	r24, r19
    babe:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    bac0:	5e c0       	rjmp	.+188    	; 0xbb7e <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    bac2:	80 e0       	ldi	r24, 0x00	; 0
    bac4:	99 e0       	ldi	r25, 0x09	; 9
    bac6:	88 83       	st	Y, r24
    bac8:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    baca:	e0 e6       	ldi	r30, 0x60	; 96
    bacc:	f6 e0       	ldi	r31, 0x06	; 6
    bace:	30 81       	ld	r19, Z
    bad0:	81 e0       	ldi	r24, 0x01	; 1
    bad2:	90 e0       	ldi	r25, 0x00	; 0
    bad4:	2f ef       	ldi	r18, 0xFF	; 255
    bad6:	24 0f       	add	r18, r20
    bad8:	02 c0       	rjmp	.+4      	; 0xbade <pwm_init+0x8e>
    bada:	88 0f       	add	r24, r24
    badc:	99 1f       	adc	r25, r25
    bade:	2a 95       	dec	r18
    bae0:	e2 f7       	brpl	.-8      	; 0xbada <pwm_init+0x8a>
    bae2:	83 2b       	or	r24, r19
    bae4:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    bae6:	4b c0       	rjmp	.+150    	; 0xbb7e <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    bae8:	80 e4       	ldi	r24, 0x40	; 64
    baea:	99 e0       	ldi	r25, 0x09	; 9
    baec:	88 83       	st	Y, r24
    baee:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    baf0:	e0 e6       	ldi	r30, 0x60	; 96
    baf2:	f6 e0       	ldi	r31, 0x06	; 6
    baf4:	30 81       	ld	r19, Z
    baf6:	81 e0       	ldi	r24, 0x01	; 1
    baf8:	90 e0       	ldi	r25, 0x00	; 0
    bafa:	23 e0       	ldi	r18, 0x03	; 3
    bafc:	24 0f       	add	r18, r20
    bafe:	02 c0       	rjmp	.+4      	; 0xbb04 <pwm_init+0xb4>
    bb00:	88 0f       	add	r24, r24
    bb02:	99 1f       	adc	r25, r25
    bb04:	2a 95       	dec	r18
    bb06:	e2 f7       	brpl	.-8      	; 0xbb00 <pwm_init+0xb0>
    bb08:	83 2b       	or	r24, r19
    bb0a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    bb0c:	38 c0       	rjmp	.+112    	; 0xbb7e <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    bb0e:	80 e0       	ldi	r24, 0x00	; 0
    bb10:	9a e0       	ldi	r25, 0x0A	; 10
    bb12:	88 83       	st	Y, r24
    bb14:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    bb16:	e0 e8       	ldi	r30, 0x80	; 128
    bb18:	f6 e0       	ldi	r31, 0x06	; 6
    bb1a:	30 81       	ld	r19, Z
    bb1c:	81 e0       	ldi	r24, 0x01	; 1
    bb1e:	90 e0       	ldi	r25, 0x00	; 0
    bb20:	2f ef       	ldi	r18, 0xFF	; 255
    bb22:	24 0f       	add	r18, r20
    bb24:	02 c0       	rjmp	.+4      	; 0xbb2a <pwm_init+0xda>
    bb26:	88 0f       	add	r24, r24
    bb28:	99 1f       	adc	r25, r25
    bb2a:	2a 95       	dec	r18
    bb2c:	e2 f7       	brpl	.-8      	; 0xbb26 <pwm_init+0xd6>
    bb2e:	83 2b       	or	r24, r19
    bb30:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    bb32:	25 c0       	rjmp	.+74     	; 0xbb7e <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    bb34:	80 e4       	ldi	r24, 0x40	; 64
    bb36:	9a e0       	ldi	r25, 0x0A	; 10
    bb38:	88 83       	st	Y, r24
    bb3a:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    bb3c:	e0 e8       	ldi	r30, 0x80	; 128
    bb3e:	f6 e0       	ldi	r31, 0x06	; 6
    bb40:	30 81       	ld	r19, Z
    bb42:	81 e0       	ldi	r24, 0x01	; 1
    bb44:	90 e0       	ldi	r25, 0x00	; 0
    bb46:	23 e0       	ldi	r18, 0x03	; 3
    bb48:	24 0f       	add	r18, r20
    bb4a:	02 c0       	rjmp	.+4      	; 0xbb50 <pwm_init+0x100>
    bb4c:	88 0f       	add	r24, r24
    bb4e:	99 1f       	adc	r25, r25
    bb50:	2a 95       	dec	r18
    bb52:	e2 f7       	brpl	.-8      	; 0xbb4c <pwm_init+0xfc>
    bb54:	83 2b       	or	r24, r19
    bb56:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    bb58:	12 c0       	rjmp	.+36     	; 0xbb7e <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    bb5a:	80 e0       	ldi	r24, 0x00	; 0
    bb5c:	9b e0       	ldi	r25, 0x0B	; 11
    bb5e:	88 83       	st	Y, r24
    bb60:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    bb62:	e0 ea       	ldi	r30, 0xA0	; 160
    bb64:	f6 e0       	ldi	r31, 0x06	; 6
    bb66:	30 81       	ld	r19, Z
    bb68:	81 e0       	ldi	r24, 0x01	; 1
    bb6a:	90 e0       	ldi	r25, 0x00	; 0
    bb6c:	2f ef       	ldi	r18, 0xFF	; 255
    bb6e:	24 0f       	add	r18, r20
    bb70:	02 c0       	rjmp	.+4      	; 0xbb76 <pwm_init+0x126>
    bb72:	88 0f       	add	r24, r24
    bb74:	99 1f       	adc	r25, r25
    bb76:	2a 95       	dec	r18
    bb78:	e2 f7       	brpl	.-8      	; 0xbb72 <pwm_init+0x122>
    bb7a:	83 2b       	or	r24, r19
    bb7c:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    bb7e:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    bb80:	42 30       	cpi	r20, 0x02	; 2
    bb82:	61 f0       	breq	.+24     	; 0xbb9c <pwm_init+0x14c>
    bb84:	18 f4       	brcc	.+6      	; 0xbb8c <pwm_init+0x13c>
    bb86:	41 30       	cpi	r20, 0x01	; 1
    bb88:	31 f0       	breq	.+12     	; 0xbb96 <pwm_init+0x146>
    bb8a:	10 c0       	rjmp	.+32     	; 0xbbac <pwm_init+0x15c>
    bb8c:	43 30       	cpi	r20, 0x03	; 3
    bb8e:	49 f0       	breq	.+18     	; 0xbba2 <pwm_init+0x152>
    bb90:	44 30       	cpi	r20, 0x04	; 4
    bb92:	51 f0       	breq	.+20     	; 0xbba8 <pwm_init+0x158>
    bb94:	0b c0       	rjmp	.+22     	; 0xbbac <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    bb96:	80 e1       	ldi	r24, 0x10	; 16
    bb98:	8b 83       	std	Y+3, r24	; 0x03
		break;
    bb9a:	08 c0       	rjmp	.+16     	; 0xbbac <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    bb9c:	80 e2       	ldi	r24, 0x20	; 32
    bb9e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    bba0:	05 c0       	rjmp	.+10     	; 0xbbac <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    bba2:	80 e4       	ldi	r24, 0x40	; 64
    bba4:	8b 83       	std	Y+3, r24	; 0x03
		break;
    bba6:	02 c0       	rjmp	.+4      	; 0xbbac <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    bba8:	80 e8       	ldi	r24, 0x80	; 128
    bbaa:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    bbac:	88 81       	ld	r24, Y
    bbae:	99 81       	ldd	r25, Y+1	; 0x01
    bbb0:	0e 94 a2 52 	call	0xa544	; 0xa544 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    bbb4:	e8 81       	ld	r30, Y
    bbb6:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    bbb8:	81 81       	ldd	r24, Z+1	; 0x01
    bbba:	88 7f       	andi	r24, 0xF8	; 248
    bbbc:	83 60       	ori	r24, 0x03	; 3
    bbbe:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    bbc0:	1d 82       	std	Y+5, r1	; 0x05
    bbc2:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    bbc4:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    bbc6:	e8 81       	ld	r30, Y
    bbc8:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    bbca:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    bbcc:	80 7f       	andi	r24, 0xF0	; 240
    bbce:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    bbd0:	b8 01       	movw	r22, r16
    bbd2:	ce 01       	movw	r24, r28
    bbd4:	d1 de       	rcall	.-606    	; 0xb978 <pwm_set_frequency>
}
    bbd6:	df 91       	pop	r29
    bbd8:	cf 91       	pop	r28
    bbda:	1f 91       	pop	r17
    bbdc:	0f 91       	pop	r16
    bbde:	08 95       	ret

0000bbe0 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    bbe0:	cf 93       	push	r28
    bbe2:	df 93       	push	r29
    bbe4:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    bbe6:	2d 81       	ldd	r18, Y+5	; 0x05
    bbe8:	3e 81       	ldd	r19, Y+6	; 0x06
    bbea:	a6 2f       	mov	r26, r22
    bbec:	b0 e0       	ldi	r27, 0x00	; 0
    bbee:	0e 94 e6 85 	call	0x10bcc	; 0x10bcc <__umulhisi3>
    bbf2:	24 e6       	ldi	r18, 0x64	; 100
    bbf4:	30 e0       	ldi	r19, 0x00	; 0
    bbf6:	40 e0       	ldi	r20, 0x00	; 0
    bbf8:	50 e0       	ldi	r21, 0x00	; 0
    bbfa:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
    bbfe:	8a 81       	ldd	r24, Y+2	; 0x02
    bc00:	e8 81       	ld	r30, Y
    bc02:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    bc04:	e6 fd       	sbrc	r30, 6
    bc06:	17 c0       	rjmp	.+46     	; 0xbc36 <pwm_start+0x56>
		switch (channel_index) {
    bc08:	82 30       	cpi	r24, 0x02	; 2
    bc0a:	61 f0       	breq	.+24     	; 0xbc24 <pwm_start+0x44>
    bc0c:	18 f4       	brcc	.+6      	; 0xbc14 <pwm_start+0x34>
    bc0e:	81 30       	cpi	r24, 0x01	; 1
    bc10:	31 f0       	breq	.+12     	; 0xbc1e <pwm_start+0x3e>
    bc12:	1b c0       	rjmp	.+54     	; 0xbc4a <pwm_start+0x6a>
    bc14:	83 30       	cpi	r24, 0x03	; 3
    bc16:	49 f0       	breq	.+18     	; 0xbc2a <pwm_start+0x4a>
    bc18:	84 30       	cpi	r24, 0x04	; 4
    bc1a:	51 f0       	breq	.+20     	; 0xbc30 <pwm_start+0x50>
    bc1c:	16 c0       	rjmp	.+44     	; 0xbc4a <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    bc1e:	20 af       	std	Z+56, r18	; 0x38
    bc20:	31 af       	std	Z+57, r19	; 0x39
    bc22:	13 c0       	rjmp	.+38     	; 0xbc4a <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    bc24:	22 af       	std	Z+58, r18	; 0x3a
    bc26:	33 af       	std	Z+59, r19	; 0x3b
    bc28:	10 c0       	rjmp	.+32     	; 0xbc4a <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    bc2a:	24 af       	std	Z+60, r18	; 0x3c
    bc2c:	35 af       	std	Z+61, r19	; 0x3d
    bc2e:	0d c0       	rjmp	.+26     	; 0xbc4a <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    bc30:	26 af       	std	Z+62, r18	; 0x3e
    bc32:	37 af       	std	Z+63, r19	; 0x3f
    bc34:	0a c0       	rjmp	.+20     	; 0xbc4a <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    bc36:	81 30       	cpi	r24, 0x01	; 1
    bc38:	19 f0       	breq	.+6      	; 0xbc40 <pwm_start+0x60>
    bc3a:	82 30       	cpi	r24, 0x02	; 2
    bc3c:	21 f0       	breq	.+8      	; 0xbc46 <pwm_start+0x66>
    bc3e:	05 c0       	rjmp	.+10     	; 0xbc4a <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    bc40:	20 af       	std	Z+56, r18	; 0x38
    bc42:	31 af       	std	Z+57, r19	; 0x39
    bc44:	02 c0       	rjmp	.+4      	; 0xbc4a <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    bc46:	22 af       	std	Z+58, r18	; 0x3a
    bc48:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    bc4a:	8d 81       	ldd	r24, Y+5	; 0x05
    bc4c:	9e 81       	ldd	r25, Y+6	; 0x06
    bc4e:	e8 81       	ld	r30, Y
    bc50:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    bc52:	86 a3       	std	Z+38, r24	; 0x26
    bc54:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    bc56:	8b 81       	ldd	r24, Y+3	; 0x03
    bc58:	e8 81       	ld	r30, Y
    bc5a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    bc5c:	e6 fd       	sbrc	r30, 6
    bc5e:	04 c0       	rjmp	.+8      	; 0xbc68 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    bc60:	91 81       	ldd	r25, Z+1	; 0x01
    bc62:	89 2b       	or	r24, r25
    bc64:	81 83       	std	Z+1, r24	; 0x01
    bc66:	04 c0       	rjmp	.+8      	; 0xbc70 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    bc68:	91 81       	ldd	r25, Z+1	; 0x01
    bc6a:	80 73       	andi	r24, 0x30	; 48
    bc6c:	89 2b       	or	r24, r25
    bc6e:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    bc70:	e8 81       	ld	r30, Y
    bc72:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    bc74:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    bc76:	80 7f       	andi	r24, 0xF0	; 240
    bc78:	9c 81       	ldd	r25, Y+4	; 0x04
    bc7a:	89 2b       	or	r24, r25
    bc7c:	80 83       	st	Z, r24
}
    bc7e:	df 91       	pop	r29
    bc80:	cf 91       	pop	r28
    bc82:	08 95       	ret

0000bc84 <yield_ms_cb>:
void halt(void)
{
	/* MAIN Loop Shutdown */
	/* atomic */
	{
		g_workmode = WORKMODE_END;
    bc84:	10 92 5c 26 	sts	0x265C, r1	; 0x80265c <g_sched_yield>
    bc88:	08 95       	ret

0000bc8a <isr_tcc1_ovfl>:
    bc8a:	20 91 90 28 	lds	r18, 0x2890	; 0x802890 <g_milliseconds_cnt64>
    bc8e:	30 91 91 28 	lds	r19, 0x2891	; 0x802891 <g_milliseconds_cnt64+0x1>
    bc92:	40 91 92 28 	lds	r20, 0x2892	; 0x802892 <g_milliseconds_cnt64+0x2>
    bc96:	50 91 93 28 	lds	r21, 0x2893	; 0x802893 <g_milliseconds_cnt64+0x3>
    bc9a:	60 91 94 28 	lds	r22, 0x2894	; 0x802894 <g_milliseconds_cnt64+0x4>
    bc9e:	70 91 95 28 	lds	r23, 0x2895	; 0x802895 <g_milliseconds_cnt64+0x5>
    bca2:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <g_milliseconds_cnt64+0x6>
    bca6:	90 91 97 28 	lds	r25, 0x2897	; 0x802897 <g_milliseconds_cnt64+0x7>
    bcaa:	a1 e0       	ldi	r26, 0x01	; 1
    bcac:	0e 94 60 87 	call	0x10ec0	; 0x10ec0 <__adddi3_s8>
    bcb0:	20 93 90 28 	sts	0x2890, r18	; 0x802890 <g_milliseconds_cnt64>
    bcb4:	30 93 91 28 	sts	0x2891, r19	; 0x802891 <g_milliseconds_cnt64+0x1>
    bcb8:	40 93 92 28 	sts	0x2892, r20	; 0x802892 <g_milliseconds_cnt64+0x2>
    bcbc:	50 93 93 28 	sts	0x2893, r21	; 0x802893 <g_milliseconds_cnt64+0x3>
    bcc0:	60 93 94 28 	sts	0x2894, r22	; 0x802894 <g_milliseconds_cnt64+0x4>
    bcc4:	70 93 95 28 	sts	0x2895, r23	; 0x802895 <g_milliseconds_cnt64+0x5>
    bcc8:	80 93 96 28 	sts	0x2896, r24	; 0x802896 <g_milliseconds_cnt64+0x6>
    bccc:	90 93 97 28 	sts	0x2897, r25	; 0x802897 <g_milliseconds_cnt64+0x7>
    bcd0:	08 95       	ret

0000bcd2 <isr_adc_a>:
    bcd2:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    bcd6:	4e 5b       	subi	r20, 0xBE	; 190
    bcd8:	51 09       	sbc	r21, r1
    bcda:	60 ff       	sbrs	r22, 0
    bcdc:	d3 c0       	rjmp	.+422    	; 0xbe84 <isr_adc_a+0x1b2>
    bcde:	82 95       	swap	r24
    bce0:	8f 70       	andi	r24, 0x0F	; 15
    bce2:	81 30       	cpi	r24, 0x01	; 1
    bce4:	31 f0       	breq	.+12     	; 0xbcf2 <isr_adc_a+0x20>
    bce6:	08 f4       	brcc	.+2      	; 0xbcea <isr_adc_a+0x18>
    bce8:	8a c0       	rjmp	.+276    	; 0xbdfe <isr_adc_a+0x12c>
    bcea:	82 30       	cpi	r24, 0x02	; 2
    bcec:	09 f4       	brne	.+2      	; 0xbcf0 <isr_adc_a+0x1e>
    bcee:	44 c0       	rjmp	.+136    	; 0xbd78 <isr_adc_a+0xa6>
    bcf0:	08 95       	ret
    bcf2:	80 91 ba 26 	lds	r24, 0x26BA	; 0x8026ba <g_adc_vctcxo_sum>
    bcf6:	90 91 bb 26 	lds	r25, 0x26BB	; 0x8026bb <g_adc_vctcxo_sum+0x1>
    bcfa:	a0 91 bc 26 	lds	r26, 0x26BC	; 0x8026bc <g_adc_vctcxo_sum+0x2>
    bcfe:	b0 91 bd 26 	lds	r27, 0x26BD	; 0x8026bd <g_adc_vctcxo_sum+0x3>
    bd02:	05 2e       	mov	r0, r21
    bd04:	00 0c       	add	r0, r0
    bd06:	66 0b       	sbc	r22, r22
    bd08:	77 0b       	sbc	r23, r23
    bd0a:	48 0f       	add	r20, r24
    bd0c:	59 1f       	adc	r21, r25
    bd0e:	6a 1f       	adc	r22, r26
    bd10:	7b 1f       	adc	r23, r27
    bd12:	40 93 ba 26 	sts	0x26BA, r20	; 0x8026ba <g_adc_vctcxo_sum>
    bd16:	50 93 bb 26 	sts	0x26BB, r21	; 0x8026bb <g_adc_vctcxo_sum+0x1>
    bd1a:	60 93 bc 26 	sts	0x26BC, r22	; 0x8026bc <g_adc_vctcxo_sum+0x2>
    bd1e:	70 93 bd 26 	sts	0x26BD, r23	; 0x8026bd <g_adc_vctcxo_sum+0x3>
    bd22:	80 91 b8 26 	lds	r24, 0x26B8	; 0x8026b8 <g_adc_vctcxo_cnt>
    bd26:	90 91 b9 26 	lds	r25, 0x26B9	; 0x8026b9 <g_adc_vctcxo_cnt+0x1>
    bd2a:	01 96       	adiw	r24, 0x01	; 1
    bd2c:	80 93 b8 26 	sts	0x26B8, r24	; 0x8026b8 <g_adc_vctcxo_cnt>
    bd30:	90 93 b9 26 	sts	0x26B9, r25	; 0x8026b9 <g_adc_vctcxo_cnt+0x1>
    bd34:	8f 3f       	cpi	r24, 0xFF	; 255
    bd36:	91 05       	cpc	r25, r1
    bd38:	09 f0       	breq	.+2      	; 0xbd3c <isr_adc_a+0x6a>
    bd3a:	08 f4       	brcc	.+2      	; 0xbd3e <isr_adc_a+0x6c>
    bd3c:	70 c1       	rjmp	.+736    	; 0xc01e <isr_adc_a+0x34c>
    bd3e:	80 91 ba 26 	lds	r24, 0x26BA	; 0x8026ba <g_adc_vctcxo_sum>
    bd42:	90 91 bb 26 	lds	r25, 0x26BB	; 0x8026bb <g_adc_vctcxo_sum+0x1>
    bd46:	a0 91 bc 26 	lds	r26, 0x26BC	; 0x8026bc <g_adc_vctcxo_sum+0x2>
    bd4a:	b0 91 bd 26 	lds	r27, 0x26BD	; 0x8026bd <g_adc_vctcxo_sum+0x3>
    bd4e:	80 93 be 26 	sts	0x26BE, r24	; 0x8026be <g_adc_vctcxo_cur>
    bd52:	90 93 bf 26 	sts	0x26BF, r25	; 0x8026bf <g_adc_vctcxo_cur+0x1>
    bd56:	a0 93 c0 26 	sts	0x26C0, r26	; 0x8026c0 <g_adc_vctcxo_cur+0x2>
    bd5a:	b0 93 c1 26 	sts	0x26C1, r27	; 0x8026c1 <g_adc_vctcxo_cur+0x3>
    bd5e:	10 92 b8 26 	sts	0x26B8, r1	; 0x8026b8 <g_adc_vctcxo_cnt>
    bd62:	10 92 b9 26 	sts	0x26B9, r1	; 0x8026b9 <g_adc_vctcxo_cnt+0x1>
    bd66:	10 92 ba 26 	sts	0x26BA, r1	; 0x8026ba <g_adc_vctcxo_sum>
    bd6a:	10 92 bb 26 	sts	0x26BB, r1	; 0x8026bb <g_adc_vctcxo_sum+0x1>
    bd6e:	10 92 bc 26 	sts	0x26BC, r1	; 0x8026bc <g_adc_vctcxo_sum+0x2>
    bd72:	10 92 bd 26 	sts	0x26BD, r1	; 0x8026bd <g_adc_vctcxo_sum+0x3>
    bd76:	08 95       	ret
    bd78:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <g_adc_5v0_sum>
    bd7c:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <g_adc_5v0_sum+0x1>
    bd80:	a0 91 b2 26 	lds	r26, 0x26B2	; 0x8026b2 <g_adc_5v0_sum+0x2>
    bd84:	b0 91 b3 26 	lds	r27, 0x26B3	; 0x8026b3 <g_adc_5v0_sum+0x3>
    bd88:	05 2e       	mov	r0, r21
    bd8a:	00 0c       	add	r0, r0
    bd8c:	66 0b       	sbc	r22, r22
    bd8e:	77 0b       	sbc	r23, r23
    bd90:	48 0f       	add	r20, r24
    bd92:	59 1f       	adc	r21, r25
    bd94:	6a 1f       	adc	r22, r26
    bd96:	7b 1f       	adc	r23, r27
    bd98:	40 93 b0 26 	sts	0x26B0, r20	; 0x8026b0 <g_adc_5v0_sum>
    bd9c:	50 93 b1 26 	sts	0x26B1, r21	; 0x8026b1 <g_adc_5v0_sum+0x1>
    bda0:	60 93 b2 26 	sts	0x26B2, r22	; 0x8026b2 <g_adc_5v0_sum+0x2>
    bda4:	70 93 b3 26 	sts	0x26B3, r23	; 0x8026b3 <g_adc_5v0_sum+0x3>
    bda8:	80 91 ae 26 	lds	r24, 0x26AE	; 0x8026ae <g_adc_5v0_cnt>
    bdac:	90 91 af 26 	lds	r25, 0x26AF	; 0x8026af <g_adc_5v0_cnt+0x1>
    bdb0:	01 96       	adiw	r24, 0x01	; 1
    bdb2:	80 93 ae 26 	sts	0x26AE, r24	; 0x8026ae <g_adc_5v0_cnt>
    bdb6:	90 93 af 26 	sts	0x26AF, r25	; 0x8026af <g_adc_5v0_cnt+0x1>
    bdba:	8f 3f       	cpi	r24, 0xFF	; 255
    bdbc:	91 05       	cpc	r25, r1
    bdbe:	09 f0       	breq	.+2      	; 0xbdc2 <isr_adc_a+0xf0>
    bdc0:	08 f4       	brcc	.+2      	; 0xbdc4 <isr_adc_a+0xf2>
    bdc2:	2d c1       	rjmp	.+602    	; 0xc01e <isr_adc_a+0x34c>
    bdc4:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <g_adc_5v0_sum>
    bdc8:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <g_adc_5v0_sum+0x1>
    bdcc:	a0 91 b2 26 	lds	r26, 0x26B2	; 0x8026b2 <g_adc_5v0_sum+0x2>
    bdd0:	b0 91 b3 26 	lds	r27, 0x26B3	; 0x8026b3 <g_adc_5v0_sum+0x3>
    bdd4:	80 93 b4 26 	sts	0x26B4, r24	; 0x8026b4 <g_adc_5v0_cur>
    bdd8:	90 93 b5 26 	sts	0x26B5, r25	; 0x8026b5 <g_adc_5v0_cur+0x1>
    bddc:	a0 93 b6 26 	sts	0x26B6, r26	; 0x8026b6 <g_adc_5v0_cur+0x2>
    bde0:	b0 93 b7 26 	sts	0x26B7, r27	; 0x8026b7 <g_adc_5v0_cur+0x3>
    bde4:	10 92 ae 26 	sts	0x26AE, r1	; 0x8026ae <g_adc_5v0_cnt>
    bde8:	10 92 af 26 	sts	0x26AF, r1	; 0x8026af <g_adc_5v0_cnt+0x1>
    bdec:	10 92 b0 26 	sts	0x26B0, r1	; 0x8026b0 <g_adc_5v0_sum>
    bdf0:	10 92 b1 26 	sts	0x26B1, r1	; 0x8026b1 <g_adc_5v0_sum+0x1>
    bdf4:	10 92 b2 26 	sts	0x26B2, r1	; 0x8026b2 <g_adc_5v0_sum+0x2>
    bdf8:	10 92 b3 26 	sts	0x26B3, r1	; 0x8026b3 <g_adc_5v0_sum+0x3>
    bdfc:	08 95       	ret
    bdfe:	80 91 a6 26 	lds	r24, 0x26A6	; 0x8026a6 <g_adc_vbat_sum>
    be02:	90 91 a7 26 	lds	r25, 0x26A7	; 0x8026a7 <g_adc_vbat_sum+0x1>
    be06:	a0 91 a8 26 	lds	r26, 0x26A8	; 0x8026a8 <g_adc_vbat_sum+0x2>
    be0a:	b0 91 a9 26 	lds	r27, 0x26A9	; 0x8026a9 <g_adc_vbat_sum+0x3>
    be0e:	05 2e       	mov	r0, r21
    be10:	00 0c       	add	r0, r0
    be12:	66 0b       	sbc	r22, r22
    be14:	77 0b       	sbc	r23, r23
    be16:	48 0f       	add	r20, r24
    be18:	59 1f       	adc	r21, r25
    be1a:	6a 1f       	adc	r22, r26
    be1c:	7b 1f       	adc	r23, r27
    be1e:	40 93 a6 26 	sts	0x26A6, r20	; 0x8026a6 <g_adc_vbat_sum>
    be22:	50 93 a7 26 	sts	0x26A7, r21	; 0x8026a7 <g_adc_vbat_sum+0x1>
    be26:	60 93 a8 26 	sts	0x26A8, r22	; 0x8026a8 <g_adc_vbat_sum+0x2>
    be2a:	70 93 a9 26 	sts	0x26A9, r23	; 0x8026a9 <g_adc_vbat_sum+0x3>
    be2e:	80 91 a4 26 	lds	r24, 0x26A4	; 0x8026a4 <g_adc_vbat_cnt>
    be32:	90 91 a5 26 	lds	r25, 0x26A5	; 0x8026a5 <g_adc_vbat_cnt+0x1>
    be36:	01 96       	adiw	r24, 0x01	; 1
    be38:	80 93 a4 26 	sts	0x26A4, r24	; 0x8026a4 <g_adc_vbat_cnt>
    be3c:	90 93 a5 26 	sts	0x26A5, r25	; 0x8026a5 <g_adc_vbat_cnt+0x1>
    be40:	8f 3f       	cpi	r24, 0xFF	; 255
    be42:	91 05       	cpc	r25, r1
    be44:	09 f0       	breq	.+2      	; 0xbe48 <isr_adc_a+0x176>
    be46:	08 f4       	brcc	.+2      	; 0xbe4a <isr_adc_a+0x178>
    be48:	ea c0       	rjmp	.+468    	; 0xc01e <isr_adc_a+0x34c>
    be4a:	80 91 a6 26 	lds	r24, 0x26A6	; 0x8026a6 <g_adc_vbat_sum>
    be4e:	90 91 a7 26 	lds	r25, 0x26A7	; 0x8026a7 <g_adc_vbat_sum+0x1>
    be52:	a0 91 a8 26 	lds	r26, 0x26A8	; 0x8026a8 <g_adc_vbat_sum+0x2>
    be56:	b0 91 a9 26 	lds	r27, 0x26A9	; 0x8026a9 <g_adc_vbat_sum+0x3>
    be5a:	80 93 aa 26 	sts	0x26AA, r24	; 0x8026aa <g_adc_vbat_cur>
    be5e:	90 93 ab 26 	sts	0x26AB, r25	; 0x8026ab <g_adc_vbat_cur+0x1>
    be62:	a0 93 ac 26 	sts	0x26AC, r26	; 0x8026ac <g_adc_vbat_cur+0x2>
    be66:	b0 93 ad 26 	sts	0x26AD, r27	; 0x8026ad <g_adc_vbat_cur+0x3>
    be6a:	10 92 a4 26 	sts	0x26A4, r1	; 0x8026a4 <g_adc_vbat_cnt>
    be6e:	10 92 a5 26 	sts	0x26A5, r1	; 0x8026a5 <g_adc_vbat_cnt+0x1>
    be72:	10 92 a6 26 	sts	0x26A6, r1	; 0x8026a6 <g_adc_vbat_sum>
    be76:	10 92 a7 26 	sts	0x26A7, r1	; 0x8026a7 <g_adc_vbat_sum+0x1>
    be7a:	10 92 a8 26 	sts	0x26A8, r1	; 0x8026a8 <g_adc_vbat_sum+0x2>
    be7e:	10 92 a9 26 	sts	0x26A9, r1	; 0x8026a9 <g_adc_vbat_sum+0x3>
    be82:	08 95       	ret
    be84:	61 ff       	sbrs	r22, 1
    be86:	43 c0       	rjmp	.+134    	; 0xbf0e <isr_adc_a+0x23c>
    be88:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <g_adc_io_adc4_sum>
    be8c:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <g_adc_io_adc4_sum+0x1>
    be90:	a0 91 9e 26 	lds	r26, 0x269E	; 0x80269e <g_adc_io_adc4_sum+0x2>
    be94:	b0 91 9f 26 	lds	r27, 0x269F	; 0x80269f <g_adc_io_adc4_sum+0x3>
    be98:	05 2e       	mov	r0, r21
    be9a:	00 0c       	add	r0, r0
    be9c:	66 0b       	sbc	r22, r22
    be9e:	77 0b       	sbc	r23, r23
    bea0:	48 0f       	add	r20, r24
    bea2:	59 1f       	adc	r21, r25
    bea4:	6a 1f       	adc	r22, r26
    bea6:	7b 1f       	adc	r23, r27
    bea8:	40 93 9c 26 	sts	0x269C, r20	; 0x80269c <g_adc_io_adc4_sum>
    beac:	50 93 9d 26 	sts	0x269D, r21	; 0x80269d <g_adc_io_adc4_sum+0x1>
    beb0:	60 93 9e 26 	sts	0x269E, r22	; 0x80269e <g_adc_io_adc4_sum+0x2>
    beb4:	70 93 9f 26 	sts	0x269F, r23	; 0x80269f <g_adc_io_adc4_sum+0x3>
    beb8:	80 91 9a 26 	lds	r24, 0x269A	; 0x80269a <g_adc_io_adc4_cnt>
    bebc:	90 91 9b 26 	lds	r25, 0x269B	; 0x80269b <g_adc_io_adc4_cnt+0x1>
    bec0:	01 96       	adiw	r24, 0x01	; 1
    bec2:	80 93 9a 26 	sts	0x269A, r24	; 0x80269a <g_adc_io_adc4_cnt>
    bec6:	90 93 9b 26 	sts	0x269B, r25	; 0x80269b <g_adc_io_adc4_cnt+0x1>
    beca:	8f 3f       	cpi	r24, 0xFF	; 255
    becc:	91 05       	cpc	r25, r1
    bece:	09 f0       	breq	.+2      	; 0xbed2 <isr_adc_a+0x200>
    bed0:	08 f4       	brcc	.+2      	; 0xbed4 <isr_adc_a+0x202>
    bed2:	a5 c0       	rjmp	.+330    	; 0xc01e <isr_adc_a+0x34c>
    bed4:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <g_adc_io_adc4_sum>
    bed8:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <g_adc_io_adc4_sum+0x1>
    bedc:	a0 91 9e 26 	lds	r26, 0x269E	; 0x80269e <g_adc_io_adc4_sum+0x2>
    bee0:	b0 91 9f 26 	lds	r27, 0x269F	; 0x80269f <g_adc_io_adc4_sum+0x3>
    bee4:	80 93 a0 26 	sts	0x26A0, r24	; 0x8026a0 <g_adc_io_adc4_cur>
    bee8:	90 93 a1 26 	sts	0x26A1, r25	; 0x8026a1 <g_adc_io_adc4_cur+0x1>
    beec:	a0 93 a2 26 	sts	0x26A2, r26	; 0x8026a2 <g_adc_io_adc4_cur+0x2>
    bef0:	b0 93 a3 26 	sts	0x26A3, r27	; 0x8026a3 <g_adc_io_adc4_cur+0x3>
    bef4:	10 92 9a 26 	sts	0x269A, r1	; 0x80269a <g_adc_io_adc4_cnt>
    bef8:	10 92 9b 26 	sts	0x269B, r1	; 0x80269b <g_adc_io_adc4_cnt+0x1>
    befc:	10 92 9c 26 	sts	0x269C, r1	; 0x80269c <g_adc_io_adc4_sum>
    bf00:	10 92 9d 26 	sts	0x269D, r1	; 0x80269d <g_adc_io_adc4_sum+0x1>
    bf04:	10 92 9e 26 	sts	0x269E, r1	; 0x80269e <g_adc_io_adc4_sum+0x2>
    bf08:	10 92 9f 26 	sts	0x269F, r1	; 0x80269f <g_adc_io_adc4_sum+0x3>
    bf0c:	08 95       	ret
    bf0e:	62 ff       	sbrs	r22, 2
    bf10:	43 c0       	rjmp	.+134    	; 0xbf98 <isr_adc_a+0x2c6>
    bf12:	80 91 92 26 	lds	r24, 0x2692	; 0x802692 <g_adc_io_adc5_sum>
    bf16:	90 91 93 26 	lds	r25, 0x2693	; 0x802693 <g_adc_io_adc5_sum+0x1>
    bf1a:	a0 91 94 26 	lds	r26, 0x2694	; 0x802694 <g_adc_io_adc5_sum+0x2>
    bf1e:	b0 91 95 26 	lds	r27, 0x2695	; 0x802695 <g_adc_io_adc5_sum+0x3>
    bf22:	05 2e       	mov	r0, r21
    bf24:	00 0c       	add	r0, r0
    bf26:	66 0b       	sbc	r22, r22
    bf28:	77 0b       	sbc	r23, r23
    bf2a:	48 0f       	add	r20, r24
    bf2c:	59 1f       	adc	r21, r25
    bf2e:	6a 1f       	adc	r22, r26
    bf30:	7b 1f       	adc	r23, r27
    bf32:	40 93 92 26 	sts	0x2692, r20	; 0x802692 <g_adc_io_adc5_sum>
    bf36:	50 93 93 26 	sts	0x2693, r21	; 0x802693 <g_adc_io_adc5_sum+0x1>
    bf3a:	60 93 94 26 	sts	0x2694, r22	; 0x802694 <g_adc_io_adc5_sum+0x2>
    bf3e:	70 93 95 26 	sts	0x2695, r23	; 0x802695 <g_adc_io_adc5_sum+0x3>
    bf42:	80 91 90 26 	lds	r24, 0x2690	; 0x802690 <g_adc_io_adc5_cnt>
    bf46:	90 91 91 26 	lds	r25, 0x2691	; 0x802691 <g_adc_io_adc5_cnt+0x1>
    bf4a:	01 96       	adiw	r24, 0x01	; 1
    bf4c:	80 93 90 26 	sts	0x2690, r24	; 0x802690 <g_adc_io_adc5_cnt>
    bf50:	90 93 91 26 	sts	0x2691, r25	; 0x802691 <g_adc_io_adc5_cnt+0x1>
    bf54:	8f 3f       	cpi	r24, 0xFF	; 255
    bf56:	91 05       	cpc	r25, r1
    bf58:	09 f0       	breq	.+2      	; 0xbf5c <isr_adc_a+0x28a>
    bf5a:	08 f4       	brcc	.+2      	; 0xbf5e <isr_adc_a+0x28c>
    bf5c:	60 c0       	rjmp	.+192    	; 0xc01e <isr_adc_a+0x34c>
    bf5e:	80 91 92 26 	lds	r24, 0x2692	; 0x802692 <g_adc_io_adc5_sum>
    bf62:	90 91 93 26 	lds	r25, 0x2693	; 0x802693 <g_adc_io_adc5_sum+0x1>
    bf66:	a0 91 94 26 	lds	r26, 0x2694	; 0x802694 <g_adc_io_adc5_sum+0x2>
    bf6a:	b0 91 95 26 	lds	r27, 0x2695	; 0x802695 <g_adc_io_adc5_sum+0x3>
    bf6e:	80 93 96 26 	sts	0x2696, r24	; 0x802696 <g_adc_io_adc5_cur>
    bf72:	90 93 97 26 	sts	0x2697, r25	; 0x802697 <g_adc_io_adc5_cur+0x1>
    bf76:	a0 93 98 26 	sts	0x2698, r26	; 0x802698 <g_adc_io_adc5_cur+0x2>
    bf7a:	b0 93 99 26 	sts	0x2699, r27	; 0x802699 <g_adc_io_adc5_cur+0x3>
    bf7e:	10 92 90 26 	sts	0x2690, r1	; 0x802690 <g_adc_io_adc5_cnt>
    bf82:	10 92 91 26 	sts	0x2691, r1	; 0x802691 <g_adc_io_adc5_cnt+0x1>
    bf86:	10 92 92 26 	sts	0x2692, r1	; 0x802692 <g_adc_io_adc5_sum>
    bf8a:	10 92 93 26 	sts	0x2693, r1	; 0x802693 <g_adc_io_adc5_sum+0x1>
    bf8e:	10 92 94 26 	sts	0x2694, r1	; 0x802694 <g_adc_io_adc5_sum+0x2>
    bf92:	10 92 95 26 	sts	0x2695, r1	; 0x802695 <g_adc_io_adc5_sum+0x3>
    bf96:	08 95       	ret
    bf98:	63 ff       	sbrs	r22, 3
    bf9a:	41 c0       	rjmp	.+130    	; 0xc01e <isr_adc_a+0x34c>
    bf9c:	80 91 88 26 	lds	r24, 0x2688	; 0x802688 <g_adc_silence_sum>
    bfa0:	90 91 89 26 	lds	r25, 0x2689	; 0x802689 <g_adc_silence_sum+0x1>
    bfa4:	a0 91 8a 26 	lds	r26, 0x268A	; 0x80268a <g_adc_silence_sum+0x2>
    bfa8:	b0 91 8b 26 	lds	r27, 0x268B	; 0x80268b <g_adc_silence_sum+0x3>
    bfac:	05 2e       	mov	r0, r21
    bfae:	00 0c       	add	r0, r0
    bfb0:	66 0b       	sbc	r22, r22
    bfb2:	77 0b       	sbc	r23, r23
    bfb4:	48 0f       	add	r20, r24
    bfb6:	59 1f       	adc	r21, r25
    bfb8:	6a 1f       	adc	r22, r26
    bfba:	7b 1f       	adc	r23, r27
    bfbc:	40 93 88 26 	sts	0x2688, r20	; 0x802688 <g_adc_silence_sum>
    bfc0:	50 93 89 26 	sts	0x2689, r21	; 0x802689 <g_adc_silence_sum+0x1>
    bfc4:	60 93 8a 26 	sts	0x268A, r22	; 0x80268a <g_adc_silence_sum+0x2>
    bfc8:	70 93 8b 26 	sts	0x268B, r23	; 0x80268b <g_adc_silence_sum+0x3>
    bfcc:	80 91 86 26 	lds	r24, 0x2686	; 0x802686 <g_adc_silence_cnt>
    bfd0:	90 91 87 26 	lds	r25, 0x2687	; 0x802687 <g_adc_silence_cnt+0x1>
    bfd4:	01 96       	adiw	r24, 0x01	; 1
    bfd6:	80 93 86 26 	sts	0x2686, r24	; 0x802686 <g_adc_silence_cnt>
    bfda:	90 93 87 26 	sts	0x2687, r25	; 0x802687 <g_adc_silence_cnt+0x1>
    bfde:	8f 3f       	cpi	r24, 0xFF	; 255
    bfe0:	91 05       	cpc	r25, r1
    bfe2:	e9 f0       	breq	.+58     	; 0xc01e <isr_adc_a+0x34c>
    bfe4:	e0 f0       	brcs	.+56     	; 0xc01e <isr_adc_a+0x34c>
    bfe6:	80 91 88 26 	lds	r24, 0x2688	; 0x802688 <g_adc_silence_sum>
    bfea:	90 91 89 26 	lds	r25, 0x2689	; 0x802689 <g_adc_silence_sum+0x1>
    bfee:	a0 91 8a 26 	lds	r26, 0x268A	; 0x80268a <g_adc_silence_sum+0x2>
    bff2:	b0 91 8b 26 	lds	r27, 0x268B	; 0x80268b <g_adc_silence_sum+0x3>
    bff6:	80 93 8c 26 	sts	0x268C, r24	; 0x80268c <g_adc_silence_cur>
    bffa:	90 93 8d 26 	sts	0x268D, r25	; 0x80268d <g_adc_silence_cur+0x1>
    bffe:	a0 93 8e 26 	sts	0x268E, r26	; 0x80268e <g_adc_silence_cur+0x2>
    c002:	b0 93 8f 26 	sts	0x268F, r27	; 0x80268f <g_adc_silence_cur+0x3>
    c006:	10 92 86 26 	sts	0x2686, r1	; 0x802686 <g_adc_silence_cnt>
    c00a:	10 92 87 26 	sts	0x2687, r1	; 0x802687 <g_adc_silence_cnt+0x1>
    c00e:	10 92 88 26 	sts	0x2688, r1	; 0x802688 <g_adc_silence_sum>
    c012:	10 92 89 26 	sts	0x2689, r1	; 0x802689 <g_adc_silence_sum+0x1>
    c016:	10 92 8a 26 	sts	0x268A, r1	; 0x80268a <g_adc_silence_sum+0x2>
    c01a:	10 92 8b 26 	sts	0x268B, r1	; 0x80268b <g_adc_silence_sum+0x3>
    c01e:	08 95       	ret

0000c020 <isr_adc_b>:
    c020:	0f 93       	push	r16
    c022:	1f 93       	push	r17
    c024:	60 ff       	sbrs	r22, 0
    c026:	43 c0       	rjmp	.+134    	; 0xc0ae <isr_adc_b+0x8e>
    c028:	00 91 7e 26 	lds	r16, 0x267E	; 0x80267e <g_adc_temp_sum>
    c02c:	10 91 7f 26 	lds	r17, 0x267F	; 0x80267f <g_adc_temp_sum+0x1>
    c030:	20 91 80 26 	lds	r18, 0x2680	; 0x802680 <g_adc_temp_sum+0x2>
    c034:	30 91 81 26 	lds	r19, 0x2681	; 0x802681 <g_adc_temp_sum+0x3>
    c038:	4e 5b       	subi	r20, 0xBE	; 190
    c03a:	51 09       	sbc	r21, r1
    c03c:	05 2e       	mov	r0, r21
    c03e:	00 0c       	add	r0, r0
    c040:	66 0b       	sbc	r22, r22
    c042:	77 0b       	sbc	r23, r23
    c044:	40 0f       	add	r20, r16
    c046:	51 1f       	adc	r21, r17
    c048:	62 1f       	adc	r22, r18
    c04a:	73 1f       	adc	r23, r19
    c04c:	40 93 7e 26 	sts	0x267E, r20	; 0x80267e <g_adc_temp_sum>
    c050:	50 93 7f 26 	sts	0x267F, r21	; 0x80267f <g_adc_temp_sum+0x1>
    c054:	60 93 80 26 	sts	0x2680, r22	; 0x802680 <g_adc_temp_sum+0x2>
    c058:	70 93 81 26 	sts	0x2681, r23	; 0x802681 <g_adc_temp_sum+0x3>
    c05c:	80 91 7c 26 	lds	r24, 0x267C	; 0x80267c <g_adc_temp_cnt>
    c060:	90 91 7d 26 	lds	r25, 0x267D	; 0x80267d <g_adc_temp_cnt+0x1>
    c064:	01 96       	adiw	r24, 0x01	; 1
    c066:	80 93 7c 26 	sts	0x267C, r24	; 0x80267c <g_adc_temp_cnt>
    c06a:	90 93 7d 26 	sts	0x267D, r25	; 0x80267d <g_adc_temp_cnt+0x1>
    c06e:	8f 3f       	cpi	r24, 0xFF	; 255
    c070:	91 05       	cpc	r25, r1
    c072:	e9 f0       	breq	.+58     	; 0xc0ae <isr_adc_b+0x8e>
    c074:	e0 f0       	brcs	.+56     	; 0xc0ae <isr_adc_b+0x8e>
    c076:	80 91 7e 26 	lds	r24, 0x267E	; 0x80267e <g_adc_temp_sum>
    c07a:	90 91 7f 26 	lds	r25, 0x267F	; 0x80267f <g_adc_temp_sum+0x1>
    c07e:	a0 91 80 26 	lds	r26, 0x2680	; 0x802680 <g_adc_temp_sum+0x2>
    c082:	b0 91 81 26 	lds	r27, 0x2681	; 0x802681 <g_adc_temp_sum+0x3>
    c086:	80 93 82 26 	sts	0x2682, r24	; 0x802682 <g_adc_temp_cur>
    c08a:	90 93 83 26 	sts	0x2683, r25	; 0x802683 <g_adc_temp_cur+0x1>
    c08e:	a0 93 84 26 	sts	0x2684, r26	; 0x802684 <g_adc_temp_cur+0x2>
    c092:	b0 93 85 26 	sts	0x2685, r27	; 0x802685 <g_adc_temp_cur+0x3>
    c096:	10 92 7c 26 	sts	0x267C, r1	; 0x80267c <g_adc_temp_cnt>
    c09a:	10 92 7d 26 	sts	0x267D, r1	; 0x80267d <g_adc_temp_cnt+0x1>
    c09e:	10 92 7e 26 	sts	0x267E, r1	; 0x80267e <g_adc_temp_sum>
    c0a2:	10 92 7f 26 	sts	0x267F, r1	; 0x80267f <g_adc_temp_sum+0x1>
    c0a6:	10 92 80 26 	sts	0x2680, r1	; 0x802680 <g_adc_temp_sum+0x2>
    c0aa:	10 92 81 26 	sts	0x2681, r1	; 0x802681 <g_adc_temp_sum+0x3>
    c0ae:	1f 91       	pop	r17
    c0b0:	0f 91       	pop	r16
    c0b2:	08 95       	ret

0000c0b4 <task_dac>:
    c0b4:	2f 92       	push	r2
    c0b6:	3f 92       	push	r3
    c0b8:	4f 92       	push	r4
    c0ba:	5f 92       	push	r5
    c0bc:	6f 92       	push	r6
    c0be:	7f 92       	push	r7
    c0c0:	8f 92       	push	r8
    c0c2:	9f 92       	push	r9
    c0c4:	af 92       	push	r10
    c0c6:	bf 92       	push	r11
    c0c8:	cf 92       	push	r12
    c0ca:	df 92       	push	r13
    c0cc:	ef 92       	push	r14
    c0ce:	ff 92       	push	r15
    c0d0:	0f 93       	push	r16
    c0d2:	1f 93       	push	r17
    c0d4:	cf 93       	push	r28
    c0d6:	df 93       	push	r29
    c0d8:	cd b7       	in	r28, 0x3d	; 61
    c0da:	de b7       	in	r29, 0x3e	; 62
    c0dc:	2e 97       	sbiw	r28, 0x0e	; 14
    c0de:	cd bf       	out	0x3d, r28	; 61
    c0e0:	de bf       	out	0x3e, r29	; 62
    c0e2:	8f b7       	in	r24, 0x3f	; 63
    c0e4:	8a 83       	std	Y+2, r24	; 0x02
    c0e6:	f8 94       	cli
    c0e8:	8a 81       	ldd	r24, Y+2	; 0x02
    c0ea:	40 90 13 20 	lds	r4, 0x2013	; 0x802013 <dds0_freq_mHz>
    c0ee:	50 90 14 20 	lds	r5, 0x2014	; 0x802014 <dds0_freq_mHz+0x1>
    c0f2:	60 90 15 20 	lds	r6, 0x2015	; 0x802015 <dds0_freq_mHz+0x2>
    c0f6:	70 90 16 20 	lds	r7, 0x2016	; 0x802016 <dds0_freq_mHz+0x3>
    c0fa:	00 91 0f 20 	lds	r16, 0x200F	; 0x80200f <dds1_freq_mHz>
    c0fe:	10 91 10 20 	lds	r17, 0x2010	; 0x802010 <dds1_freq_mHz+0x1>
    c102:	20 91 11 20 	lds	r18, 0x2011	; 0x802011 <dds1_freq_mHz+0x2>
    c106:	30 91 12 20 	lds	r19, 0x2012	; 0x802012 <dds1_freq_mHz+0x3>
    c10a:	0b 87       	std	Y+11, r16	; 0x0b
    c10c:	1c 87       	std	Y+12, r17	; 0x0c
    c10e:	2d 87       	std	Y+13, r18	; 0x0d
    c110:	3e 87       	std	Y+14, r19	; 0x0e
    c112:	8f bf       	out	0x3f, r24	; 63
    c114:	80 91 a1 24 	lds	r24, 0x24A1	; 0x8024a1 <s_dds0_freq_mHz.8226>
    c118:	90 91 a2 24 	lds	r25, 0x24A2	; 0x8024a2 <s_dds0_freq_mHz.8226+0x1>
    c11c:	a0 91 a3 24 	lds	r26, 0x24A3	; 0x8024a3 <s_dds0_freq_mHz.8226+0x2>
    c120:	b0 91 a4 24 	lds	r27, 0x24A4	; 0x8024a4 <s_dds0_freq_mHz.8226+0x3>
    c124:	48 16       	cp	r4, r24
    c126:	59 06       	cpc	r5, r25
    c128:	6a 06       	cpc	r6, r26
    c12a:	7b 06       	cpc	r7, r27
    c12c:	71 f4       	brne	.+28     	; 0xc14a <task_dac+0x96>
    c12e:	80 91 9d 24 	lds	r24, 0x249D	; 0x80249d <s_dds1_freq_mHz.8227>
    c132:	90 91 9e 24 	lds	r25, 0x249E	; 0x80249e <s_dds1_freq_mHz.8227+0x1>
    c136:	a0 91 9f 24 	lds	r26, 0x249F	; 0x80249f <s_dds1_freq_mHz.8227+0x2>
    c13a:	b0 91 a0 24 	lds	r27, 0x24A0	; 0x8024a0 <s_dds1_freq_mHz.8227+0x3>
    c13e:	08 17       	cp	r16, r24
    c140:	19 07       	cpc	r17, r25
    c142:	2a 07       	cpc	r18, r26
    c144:	3b 07       	cpc	r19, r27
    c146:	09 f4       	brne	.+2      	; 0xc14a <task_dac+0x96>
    c148:	a1 c0       	rjmp	.+322    	; 0xc28c <task_dac+0x1d8>
    c14a:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <dds0_freq_mHz>
    c14e:	90 91 14 20 	lds	r25, 0x2014	; 0x802014 <dds0_freq_mHz+0x1>
    c152:	a0 91 15 20 	lds	r26, 0x2015	; 0x802015 <dds0_freq_mHz+0x2>
    c156:	b0 91 16 20 	lds	r27, 0x2016	; 0x802016 <dds0_freq_mHz+0x3>
    c15a:	8c 01       	movw	r16, r24
    c15c:	9d 01       	movw	r18, r26
    c15e:	40 e0       	ldi	r20, 0x00	; 0
    c160:	50 e0       	ldi	r21, 0x00	; 0
    c162:	ba 01       	movw	r22, r20
    c164:	8b 83       	std	Y+3, r24	; 0x03
    c166:	1c 83       	std	Y+4, r17	; 0x04
    c168:	2d 83       	std	Y+5, r18	; 0x05
    c16a:	3e 83       	std	Y+6, r19	; 0x06
    c16c:	4f 83       	std	Y+7, r20	; 0x07
    c16e:	58 87       	std	Y+8, r21	; 0x08
    c170:	69 87       	std	Y+9, r22	; 0x09
    c172:	7a 87       	std	Y+10, r23	; 0x0a
    c174:	aa 24       	eor	r10, r10
    c176:	aa 94       	dec	r10
    c178:	bb 24       	eor	r11, r11
    c17a:	ba 94       	dec	r11
    c17c:	cc 24       	eor	r12, r12
    c17e:	ca 94       	dec	r12
    c180:	dd 24       	eor	r13, r13
    c182:	da 94       	dec	r13
    c184:	e1 2c       	mov	r14, r1
    c186:	f1 2c       	mov	r15, r1
    c188:	00 e0       	ldi	r16, 0x00	; 0
    c18a:	10 e0       	ldi	r17, 0x00	; 0
    c18c:	2b 81       	ldd	r18, Y+3	; 0x03
    c18e:	3c 81       	ldd	r19, Y+4	; 0x04
    c190:	4d 81       	ldd	r20, Y+5	; 0x05
    c192:	5e 81       	ldd	r21, Y+6	; 0x06
    c194:	60 e0       	ldi	r22, 0x00	; 0
    c196:	70 e0       	ldi	r23, 0x00	; 0
    c198:	80 e0       	ldi	r24, 0x00	; 0
    c19a:	90 e0       	ldi	r25, 0x00	; 0
    c19c:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    c1a0:	a1 2c       	mov	r10, r1
    c1a2:	0f 2e       	mov	r0, r31
    c1a4:	fc e6       	ldi	r31, 0x6C	; 108
    c1a6:	bf 2e       	mov	r11, r31
    c1a8:	f0 2d       	mov	r31, r0
    c1aa:	0f 2e       	mov	r0, r31
    c1ac:	fc ed       	ldi	r31, 0xDC	; 220
    c1ae:	cf 2e       	mov	r12, r31
    c1b0:	f0 2d       	mov	r31, r0
    c1b2:	68 94       	set
    c1b4:	dd 24       	eor	r13, r13
    c1b6:	d1 f8       	bld	r13, 1
    c1b8:	0e 94 83 86 	call	0x10d06	; 0x10d06 <__udivdi3>
    c1bc:	92 2e       	mov	r9, r18
    c1be:	83 2e       	mov	r8, r19
    c1c0:	34 2e       	mov	r3, r20
    c1c2:	25 2e       	mov	r2, r21
    c1c4:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <dds1_freq_mHz>
    c1c8:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <dds1_freq_mHz+0x1>
    c1cc:	a0 91 11 20 	lds	r26, 0x2011	; 0x802011 <dds1_freq_mHz+0x2>
    c1d0:	b0 91 12 20 	lds	r27, 0x2012	; 0x802012 <dds1_freq_mHz+0x3>
    c1d4:	8c 01       	movw	r16, r24
    c1d6:	9d 01       	movw	r18, r26
    c1d8:	40 e0       	ldi	r20, 0x00	; 0
    c1da:	50 e0       	ldi	r21, 0x00	; 0
    c1dc:	ba 01       	movw	r22, r20
    c1de:	8b 83       	std	Y+3, r24	; 0x03
    c1e0:	1c 83       	std	Y+4, r17	; 0x04
    c1e2:	2d 83       	std	Y+5, r18	; 0x05
    c1e4:	3e 83       	std	Y+6, r19	; 0x06
    c1e6:	4f 83       	std	Y+7, r20	; 0x07
    c1e8:	58 87       	std	Y+8, r21	; 0x08
    c1ea:	69 87       	std	Y+9, r22	; 0x09
    c1ec:	7a 87       	std	Y+10, r23	; 0x0a
    c1ee:	aa 24       	eor	r10, r10
    c1f0:	aa 94       	dec	r10
    c1f2:	bb 24       	eor	r11, r11
    c1f4:	ba 94       	dec	r11
    c1f6:	cc 24       	eor	r12, r12
    c1f8:	ca 94       	dec	r12
    c1fa:	dd 24       	eor	r13, r13
    c1fc:	da 94       	dec	r13
    c1fe:	00 e0       	ldi	r16, 0x00	; 0
    c200:	10 e0       	ldi	r17, 0x00	; 0
    c202:	2b 81       	ldd	r18, Y+3	; 0x03
    c204:	3c 81       	ldd	r19, Y+4	; 0x04
    c206:	4d 81       	ldd	r20, Y+5	; 0x05
    c208:	5e 81       	ldd	r21, Y+6	; 0x06
    c20a:	60 e0       	ldi	r22, 0x00	; 0
    c20c:	70 e0       	ldi	r23, 0x00	; 0
    c20e:	80 e0       	ldi	r24, 0x00	; 0
    c210:	90 e0       	ldi	r25, 0x00	; 0
    c212:	0e 94 05 86 	call	0x10c0a	; 0x10c0a <__muldi3>
    c216:	a1 2c       	mov	r10, r1
    c218:	0f 2e       	mov	r0, r31
    c21a:	fc e6       	ldi	r31, 0x6C	; 108
    c21c:	bf 2e       	mov	r11, r31
    c21e:	f0 2d       	mov	r31, r0
    c220:	0f 2e       	mov	r0, r31
    c222:	fc ed       	ldi	r31, 0xDC	; 220
    c224:	cf 2e       	mov	r12, r31
    c226:	f0 2d       	mov	r31, r0
    c228:	68 94       	set
    c22a:	dd 24       	eor	r13, r13
    c22c:	d1 f8       	bld	r13, 1
    c22e:	0e 94 83 86 	call	0x10d06	; 0x10d06 <__udivdi3>
    c232:	72 2f       	mov	r23, r18
    c234:	63 2f       	mov	r22, r19
    c236:	94 2f       	mov	r25, r20
    c238:	85 2f       	mov	r24, r21
    c23a:	40 92 a1 24 	sts	0x24A1, r4	; 0x8024a1 <s_dds0_freq_mHz.8226>
    c23e:	50 92 a2 24 	sts	0x24A2, r5	; 0x8024a2 <s_dds0_freq_mHz.8226+0x1>
    c242:	60 92 a3 24 	sts	0x24A3, r6	; 0x8024a3 <s_dds0_freq_mHz.8226+0x2>
    c246:	70 92 a4 24 	sts	0x24A4, r7	; 0x8024a4 <s_dds0_freq_mHz.8226+0x3>
    c24a:	2b 85       	ldd	r18, Y+11	; 0x0b
    c24c:	3c 85       	ldd	r19, Y+12	; 0x0c
    c24e:	4d 85       	ldd	r20, Y+13	; 0x0d
    c250:	5e 85       	ldd	r21, Y+14	; 0x0e
    c252:	20 93 9d 24 	sts	0x249D, r18	; 0x80249d <s_dds1_freq_mHz.8227>
    c256:	30 93 9e 24 	sts	0x249E, r19	; 0x80249e <s_dds1_freq_mHz.8227+0x1>
    c25a:	40 93 9f 24 	sts	0x249F, r20	; 0x80249f <s_dds1_freq_mHz.8227+0x2>
    c25e:	50 93 a0 24 	sts	0x24A0, r21	; 0x8024a0 <s_dds1_freq_mHz.8227+0x3>
    c262:	2f b7       	in	r18, 0x3f	; 63
    c264:	29 83       	std	Y+1, r18	; 0x01
    c266:	f8 94       	cli
    c268:	29 81       	ldd	r18, Y+1	; 0x01
    c26a:	90 92 ed 24 	sts	0x24ED, r9	; 0x8024ed <dds0_inc>
    c26e:	80 92 ee 24 	sts	0x24EE, r8	; 0x8024ee <dds0_inc+0x1>
    c272:	30 92 ef 24 	sts	0x24EF, r3	; 0x8024ef <dds0_inc+0x2>
    c276:	20 92 f0 24 	sts	0x24F0, r2	; 0x8024f0 <dds0_inc+0x3>
    c27a:	70 93 e5 24 	sts	0x24E5, r23	; 0x8024e5 <dds1_inc>
    c27e:	60 93 e6 24 	sts	0x24E6, r22	; 0x8024e6 <dds1_inc+0x1>
    c282:	90 93 e7 24 	sts	0x24E7, r25	; 0x8024e7 <dds1_inc+0x2>
    c286:	80 93 e8 24 	sts	0x24E8, r24	; 0x8024e8 <dds1_inc+0x3>
    c28a:	2f bf       	out	0x3f, r18	; 63
    c28c:	2e 96       	adiw	r28, 0x0e	; 14
    c28e:	cd bf       	out	0x3d, r28	; 61
    c290:	de bf       	out	0x3e, r29	; 62
    c292:	df 91       	pop	r29
    c294:	cf 91       	pop	r28
    c296:	1f 91       	pop	r17
    c298:	0f 91       	pop	r16
    c29a:	ff 90       	pop	r15
    c29c:	ef 90       	pop	r14
    c29e:	df 90       	pop	r13
    c2a0:	cf 90       	pop	r12
    c2a2:	bf 90       	pop	r11
    c2a4:	af 90       	pop	r10
    c2a6:	9f 90       	pop	r9
    c2a8:	8f 90       	pop	r8
    c2aa:	7f 90       	pop	r7
    c2ac:	6f 90       	pop	r6
    c2ae:	5f 90       	pop	r5
    c2b0:	4f 90       	pop	r4
    c2b2:	3f 90       	pop	r3
    c2b4:	2f 90       	pop	r2
    c2b6:	08 95       	ret

0000c2b8 <task_adc>:
    c2b8:	4f 92       	push	r4
    c2ba:	5f 92       	push	r5
    c2bc:	6f 92       	push	r6
    c2be:	7f 92       	push	r7
    c2c0:	8f 92       	push	r8
    c2c2:	9f 92       	push	r9
    c2c4:	af 92       	push	r10
    c2c6:	bf 92       	push	r11
    c2c8:	cf 92       	push	r12
    c2ca:	df 92       	push	r13
    c2cc:	ef 92       	push	r14
    c2ce:	ff 92       	push	r15
    c2d0:	cf 93       	push	r28
    c2d2:	df 93       	push	r29
    c2d4:	cd b7       	in	r28, 0x3d	; 61
    c2d6:	de b7       	in	r29, 0x3e	; 62
    c2d8:	6a 97       	sbiw	r28, 0x1a	; 26
    c2da:	cd bf       	out	0x3d, r28	; 61
    c2dc:	de bf       	out	0x3e, r29	; 62
    c2de:	c0 90 91 24 	lds	r12, 0x2491	; 0x802491 <adc_last.8237>
    c2e2:	d0 90 92 24 	lds	r13, 0x2492	; 0x802492 <adc_last.8237+0x1>
    c2e6:	e0 90 93 24 	lds	r14, 0x2493	; 0x802493 <adc_last.8237+0x2>
    c2ea:	f0 90 94 24 	lds	r15, 0x2494	; 0x802494 <adc_last.8237+0x3>
    c2ee:	4b 01       	movw	r8, r22
    c2f0:	5c 01       	movw	r10, r24
    c2f2:	8c 18       	sub	r8, r12
    c2f4:	9d 08       	sbc	r9, r13
    c2f6:	ae 08       	sbc	r10, r14
    c2f8:	bf 08       	sbc	r11, r15
    c2fa:	81 14       	cp	r8, r1
    c2fc:	22 e0       	ldi	r18, 0x02	; 2
    c2fe:	92 06       	cpc	r9, r18
    c300:	a1 04       	cpc	r10, r1
    c302:	b1 04       	cpc	r11, r1
    c304:	30 f4       	brcc	.+12     	; 0xc312 <task_adc+0x5a>
    c306:	6c 15       	cp	r22, r12
    c308:	7d 05       	cpc	r23, r13
    c30a:	8e 05       	cpc	r24, r14
    c30c:	9f 05       	cpc	r25, r15
    c30e:	08 f0       	brcs	.+2      	; 0xc312 <task_adc+0x5a>
    c310:	1a c1       	rjmp	.+564    	; 0xc546 <task_adc+0x28e>
    c312:	dc 01       	movw	r26, r24
    c314:	cb 01       	movw	r24, r22
    c316:	80 93 91 24 	sts	0x2491, r24	; 0x802491 <adc_last.8237>
    c31a:	90 93 92 24 	sts	0x2492, r25	; 0x802492 <adc_last.8237+0x1>
    c31e:	a0 93 93 24 	sts	0x2493, r26	; 0x802493 <adc_last.8237+0x2>
    c322:	b0 93 94 24 	sts	0x2494, r27	; 0x802494 <adc_last.8237+0x3>
    c326:	8f b7       	in	r24, 0x3f	; 63
    c328:	89 83       	std	Y+1, r24	; 0x01
    c32a:	f8 94       	cli
    c32c:	69 81       	ldd	r22, Y+1	; 0x01
    c32e:	20 91 be 26 	lds	r18, 0x26BE	; 0x8026be <g_adc_vctcxo_cur>
    c332:	30 91 bf 26 	lds	r19, 0x26BF	; 0x8026bf <g_adc_vctcxo_cur+0x1>
    c336:	40 91 c0 26 	lds	r20, 0x26C0	; 0x8026c0 <g_adc_vctcxo_cur+0x2>
    c33a:	50 91 c1 26 	lds	r21, 0x26C1	; 0x8026c1 <g_adc_vctcxo_cur+0x3>
    c33e:	40 90 b4 26 	lds	r4, 0x26B4	; 0x8026b4 <g_adc_5v0_cur>
    c342:	50 90 b5 26 	lds	r5, 0x26B5	; 0x8026b5 <g_adc_5v0_cur+0x1>
    c346:	60 90 b6 26 	lds	r6, 0x26B6	; 0x8026b6 <g_adc_5v0_cur+0x2>
    c34a:	70 90 b7 26 	lds	r7, 0x26B7	; 0x8026b7 <g_adc_5v0_cur+0x3>
    c34e:	80 90 aa 26 	lds	r8, 0x26AA	; 0x8026aa <g_adc_vbat_cur>
    c352:	90 90 ab 26 	lds	r9, 0x26AB	; 0x8026ab <g_adc_vbat_cur+0x1>
    c356:	a0 90 ac 26 	lds	r10, 0x26AC	; 0x8026ac <g_adc_vbat_cur+0x2>
    c35a:	b0 90 ad 26 	lds	r11, 0x26AD	; 0x8026ad <g_adc_vbat_cur+0x3>
    c35e:	c0 90 a0 26 	lds	r12, 0x26A0	; 0x8026a0 <g_adc_io_adc4_cur>
    c362:	d0 90 a1 26 	lds	r13, 0x26A1	; 0x8026a1 <g_adc_io_adc4_cur+0x1>
    c366:	e0 90 a2 26 	lds	r14, 0x26A2	; 0x8026a2 <g_adc_io_adc4_cur+0x2>
    c36a:	f0 90 a3 26 	lds	r15, 0x26A3	; 0x8026a3 <g_adc_io_adc4_cur+0x3>
    c36e:	80 91 96 26 	lds	r24, 0x2696	; 0x802696 <g_adc_io_adc5_cur>
    c372:	90 91 97 26 	lds	r25, 0x2697	; 0x802697 <g_adc_io_adc5_cur+0x1>
    c376:	a0 91 98 26 	lds	r26, 0x2698	; 0x802698 <g_adc_io_adc5_cur+0x2>
    c37a:	b0 91 99 26 	lds	r27, 0x2699	; 0x802699 <g_adc_io_adc5_cur+0x3>
    c37e:	8b 83       	std	Y+3, r24	; 0x03
    c380:	9c 83       	std	Y+4, r25	; 0x04
    c382:	ad 83       	std	Y+5, r26	; 0x05
    c384:	be 83       	std	Y+6, r27	; 0x06
    c386:	80 91 8c 26 	lds	r24, 0x268C	; 0x80268c <g_adc_silence_cur>
    c38a:	90 91 8d 26 	lds	r25, 0x268D	; 0x80268d <g_adc_silence_cur+0x1>
    c38e:	a0 91 8e 26 	lds	r26, 0x268E	; 0x80268e <g_adc_silence_cur+0x2>
    c392:	b0 91 8f 26 	lds	r27, 0x268F	; 0x80268f <g_adc_silence_cur+0x3>
    c396:	8f 83       	std	Y+7, r24	; 0x07
    c398:	98 87       	std	Y+8, r25	; 0x08
    c39a:	a9 87       	std	Y+9, r26	; 0x09
    c39c:	ba 87       	std	Y+10, r27	; 0x0a
    c39e:	80 91 82 26 	lds	r24, 0x2682	; 0x802682 <g_adc_temp_cur>
    c3a2:	90 91 83 26 	lds	r25, 0x2683	; 0x802683 <g_adc_temp_cur+0x1>
    c3a6:	a0 91 84 26 	lds	r26, 0x2684	; 0x802684 <g_adc_temp_cur+0x2>
    c3aa:	b0 91 85 26 	lds	r27, 0x2685	; 0x802685 <g_adc_temp_cur+0x3>
    c3ae:	8b 87       	std	Y+11, r24	; 0x0b
    c3b0:	9c 87       	std	Y+12, r25	; 0x0c
    c3b2:	ad 87       	std	Y+13, r26	; 0x0d
    c3b4:	be 87       	std	Y+14, r27	; 0x0e
    c3b6:	6f bf       	out	0x3f, r22	; 63
    c3b8:	a8 eb       	ldi	r26, 0xB8	; 184
    c3ba:	bb e0       	ldi	r27, 0x0B	; 11
    c3bc:	0e 94 fb 85 	call	0x10bf6	; 0x10bf6 <__muluhisi3>
    c3c0:	05 2e       	mov	r0, r21
    c3c2:	54 e1       	ldi	r21, 0x14	; 20
    c3c4:	96 95       	lsr	r25
    c3c6:	87 95       	ror	r24
    c3c8:	77 95       	ror	r23
    c3ca:	67 95       	ror	r22
    c3cc:	5a 95       	dec	r21
    c3ce:	d1 f7       	brne	.-12     	; 0xc3c4 <task_adc+0x10c>
    c3d0:	50 2d       	mov	r21, r0
    c3d2:	0e 94 96 82 	call	0x1052c	; 0x1052c <__floatunsisf>
    c3d6:	20 e0       	ldi	r18, 0x00	; 0
    c3d8:	30 e0       	ldi	r19, 0x00	; 0
    c3da:	4c e3       	ldi	r20, 0x3C	; 60
    c3dc:	52 e4       	ldi	r21, 0x42	; 66
    c3de:	0e 94 91 81 	call	0x10322	; 0x10322 <__subsf3>
    c3e2:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    c3e6:	6f 87       	std	Y+15, r22	; 0x0f
    c3e8:	78 8b       	std	Y+16, r23	; 0x10
    c3ea:	89 8b       	std	Y+17, r24	; 0x11
    c3ec:	9a 8b       	std	Y+18, r25	; 0x12
    c3ee:	a8 eb       	ldi	r26, 0xB8	; 184
    c3f0:	bb e0       	ldi	r27, 0x0B	; 11
    c3f2:	a3 01       	movw	r20, r6
    c3f4:	92 01       	movw	r18, r4
    c3f6:	0e 94 fb 85 	call	0x10bf6	; 0x10bf6 <__muluhisi3>
    c3fa:	0e 94 96 82 	call	0x1052c	; 0x1052c <__floatunsisf>
    c3fe:	29 ed       	ldi	r18, 0xD9	; 217
    c400:	38 ed       	ldi	r19, 0xD8	; 216
    c402:	4a e1       	ldi	r20, 0x1A	; 26
    c404:	50 e4       	ldi	r21, 0x40	; 64
    c406:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    c40a:	20 e0       	ldi	r18, 0x00	; 0
    c40c:	30 e0       	ldi	r19, 0x00	; 0
    c40e:	40 e8       	ldi	r20, 0x80	; 128
    c410:	55 e3       	ldi	r21, 0x35	; 53
    c412:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    c416:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    c41a:	6b 8b       	std	Y+19, r22	; 0x13
    c41c:	7c 8b       	std	Y+20, r23	; 0x14
    c41e:	8d 8b       	std	Y+21, r24	; 0x15
    c420:	9e 8b       	std	Y+22, r25	; 0x16
    c422:	a8 eb       	ldi	r26, 0xB8	; 184
    c424:	bb e0       	ldi	r27, 0x0B	; 11
    c426:	a5 01       	movw	r20, r10
    c428:	94 01       	movw	r18, r8
    c42a:	0e 94 fb 85 	call	0x10bf6	; 0x10bf6 <__muluhisi3>
    c42e:	0e 94 96 82 	call	0x1052c	; 0x1052c <__floatunsisf>
    c432:	23 ee       	ldi	r18, 0xE3	; 227
    c434:	35 e4       	ldi	r19, 0x45	; 69
    c436:	4b e1       	ldi	r20, 0x1B	; 27
    c438:	50 e4       	ldi	r21, 0x40	; 64
    c43a:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    c43e:	20 e0       	ldi	r18, 0x00	; 0
    c440:	30 e0       	ldi	r19, 0x00	; 0
    c442:	40 e8       	ldi	r20, 0x80	; 128
    c444:	55 e3       	ldi	r21, 0x35	; 53
    c446:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    c44a:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    c44e:	6f 8b       	std	Y+23, r22	; 0x17
    c450:	78 8f       	std	Y+24, r23	; 0x18
    c452:	89 8f       	std	Y+25, r24	; 0x19
    c454:	9a 8f       	std	Y+26, r25	; 0x1a
    c456:	a8 eb       	ldi	r26, 0xB8	; 184
    c458:	bb e0       	ldi	r27, 0x0B	; 11
    c45a:	a7 01       	movw	r20, r14
    c45c:	96 01       	movw	r18, r12
    c45e:	0e 94 fb 85 	call	0x10bf6	; 0x10bf6 <__muluhisi3>
    c462:	6b 01       	movw	r12, r22
    c464:	7c 01       	movw	r14, r24
    c466:	0b 2e       	mov	r0, r27
    c468:	b4 e1       	ldi	r27, 0x14	; 20
    c46a:	f6 94       	lsr	r15
    c46c:	e7 94       	ror	r14
    c46e:	d7 94       	ror	r13
    c470:	c7 94       	ror	r12
    c472:	ba 95       	dec	r27
    c474:	d1 f7       	brne	.-12     	; 0xc46a <task_adc+0x1b2>
    c476:	b0 2d       	mov	r27, r0
    c478:	2b 81       	ldd	r18, Y+3	; 0x03
    c47a:	3c 81       	ldd	r19, Y+4	; 0x04
    c47c:	4d 81       	ldd	r20, Y+5	; 0x05
    c47e:	5e 81       	ldd	r21, Y+6	; 0x06
    c480:	0e 94 fb 85 	call	0x10bf6	; 0x10bf6 <__muluhisi3>
    c484:	2b 01       	movw	r4, r22
    c486:	3c 01       	movw	r6, r24
    c488:	03 2e       	mov	r0, r19
    c48a:	34 e1       	ldi	r19, 0x14	; 20
    c48c:	76 94       	lsr	r7
    c48e:	67 94       	ror	r6
    c490:	57 94       	ror	r5
    c492:	47 94       	ror	r4
    c494:	3a 95       	dec	r19
    c496:	d1 f7       	brne	.-12     	; 0xc48c <task_adc+0x1d4>
    c498:	30 2d       	mov	r19, r0
    c49a:	2f 81       	ldd	r18, Y+7	; 0x07
    c49c:	38 85       	ldd	r19, Y+8	; 0x08
    c49e:	49 85       	ldd	r20, Y+9	; 0x09
    c4a0:	5a 85       	ldd	r21, Y+10	; 0x0a
    c4a2:	0e 94 fb 85 	call	0x10bf6	; 0x10bf6 <__muluhisi3>
    c4a6:	4b 01       	movw	r8, r22
    c4a8:	5c 01       	movw	r10, r24
    c4aa:	07 2e       	mov	r0, r23
    c4ac:	74 e1       	ldi	r23, 0x14	; 20
    c4ae:	b6 94       	lsr	r11
    c4b0:	a7 94       	ror	r10
    c4b2:	97 94       	ror	r9
    c4b4:	87 94       	ror	r8
    c4b6:	7a 95       	dec	r23
    c4b8:	d1 f7       	brne	.-12     	; 0xc4ae <task_adc+0x1f6>
    c4ba:	70 2d       	mov	r23, r0
    c4bc:	a4 e6       	ldi	r26, 0x64	; 100
    c4be:	b0 e0       	ldi	r27, 0x00	; 0
    c4c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    c4c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    c4c4:	4d 85       	ldd	r20, Y+13	; 0x0d
    c4c6:	5e 85       	ldd	r21, Y+14	; 0x0e
    c4c8:	0e 94 fb 85 	call	0x10bf6	; 0x10bf6 <__muluhisi3>
    c4cc:	0e 94 96 82 	call	0x1052c	; 0x1052c <__floatunsisf>
    c4d0:	2d ec       	ldi	r18, 0xCD	; 205
    c4d2:	3c e4       	ldi	r19, 0x4C	; 76
    c4d4:	4d e1       	ldi	r20, 0x1D	; 29
    c4d6:	54 e4       	ldi	r21, 0x44	; 68
    c4d8:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    c4dc:	20 e0       	ldi	r18, 0x00	; 0
    c4de:	30 e0       	ldi	r19, 0x00	; 0
    c4e0:	40 e8       	ldi	r20, 0x80	; 128
    c4e2:	55 e3       	ldi	r21, 0x35	; 53
    c4e4:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    c4e8:	20 e0       	ldi	r18, 0x00	; 0
    c4ea:	36 e6       	ldi	r19, 0x66	; 102
    c4ec:	45 ed       	ldi	r20, 0xD5	; 213
    c4ee:	56 e4       	ldi	r21, 0x46	; 70
    c4f0:	0e 94 91 81 	call	0x10322	; 0x10322 <__subsf3>
    c4f4:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    c4f8:	2f b7       	in	r18, 0x3f	; 63
    c4fa:	2a 83       	std	Y+2, r18	; 0x02
    c4fc:	f8 94       	cli
    c4fe:	2a 81       	ldd	r18, Y+2	; 0x02
    c500:	af 85       	ldd	r26, Y+15	; 0x0f
    c502:	b8 89       	ldd	r27, Y+16	; 0x10
    c504:	a0 93 7a 26 	sts	0x267A, r26	; 0x80267a <g_adc_vctcxo_volt_1000>
    c508:	b0 93 7b 26 	sts	0x267B, r27	; 0x80267b <g_adc_vctcxo_volt_1000+0x1>
    c50c:	4b 89       	ldd	r20, Y+19	; 0x13
    c50e:	5c 89       	ldd	r21, Y+20	; 0x14
    c510:	40 93 78 26 	sts	0x2678, r20	; 0x802678 <g_adc_5v0_volt_1000>
    c514:	50 93 79 26 	sts	0x2679, r21	; 0x802679 <g_adc_5v0_volt_1000+0x1>
    c518:	af 89       	ldd	r26, Y+23	; 0x17
    c51a:	b8 8d       	ldd	r27, Y+24	; 0x18
    c51c:	a0 93 76 26 	sts	0x2676, r26	; 0x802676 <g_adc_vbat_volt_1000>
    c520:	b0 93 77 26 	sts	0x2677, r27	; 0x802677 <g_adc_vbat_volt_1000+0x1>
    c524:	c0 92 74 26 	sts	0x2674, r12	; 0x802674 <g_adc_io_adc4_volt_1000>
    c528:	d0 92 75 26 	sts	0x2675, r13	; 0x802675 <g_adc_io_adc4_volt_1000+0x1>
    c52c:	40 92 72 26 	sts	0x2672, r4	; 0x802672 <g_adc_io_adc5_volt_1000>
    c530:	50 92 73 26 	sts	0x2673, r5	; 0x802673 <g_adc_io_adc5_volt_1000+0x1>
    c534:	80 92 70 26 	sts	0x2670, r8	; 0x802670 <g_adc_silence_volt_1000>
    c538:	90 92 71 26 	sts	0x2671, r9	; 0x802671 <g_adc_silence_volt_1000+0x1>
    c53c:	60 93 6e 26 	sts	0x266E, r22	; 0x80266e <g_adc_temp_deg_100>
    c540:	70 93 6f 26 	sts	0x266F, r23	; 0x80266f <g_adc_temp_deg_100+0x1>
    c544:	2f bf       	out	0x3f, r18	; 63
    c546:	6a 96       	adiw	r28, 0x1a	; 26
    c548:	cd bf       	out	0x3d, r28	; 61
    c54a:	de bf       	out	0x3e, r29	; 62
    c54c:	df 91       	pop	r29
    c54e:	cf 91       	pop	r28
    c550:	ff 90       	pop	r15
    c552:	ef 90       	pop	r14
    c554:	df 90       	pop	r13
    c556:	cf 90       	pop	r12
    c558:	bf 90       	pop	r11
    c55a:	af 90       	pop	r10
    c55c:	9f 90       	pop	r9
    c55e:	8f 90       	pop	r8
    c560:	7f 90       	pop	r7
    c562:	6f 90       	pop	r6
    c564:	5f 90       	pop	r5
    c566:	4f 90       	pop	r4
    c568:	08 95       	ret

0000c56a <tc_init>:
    c56a:	cf 92       	push	r12
    c56c:	df 92       	push	r13
    c56e:	ef 92       	push	r14
    c570:	ff 92       	push	r15
    c572:	0f 93       	push	r16
    c574:	1f 93       	push	r17
    c576:	cf 93       	push	r28
    c578:	df 93       	push	r29
    c57a:	1f 92       	push	r1
    c57c:	cd b7       	in	r28, 0x3d	; 61
    c57e:	de b7       	in	r29, 0x3e	; 62
    c580:	8f b7       	in	r24, 0x3f	; 63
    c582:	89 83       	std	Y+1, r24	; 0x01
    c584:	f8 94       	cli
    c586:	89 81       	ldd	r24, Y+1	; 0x01
    c588:	c0 90 e4 26 	lds	r12, 0x26E4	; 0x8026e4 <g_xo_mode_pwm>
    c58c:	d0 90 e5 26 	lds	r13, 0x26E5	; 0x8026e5 <g_xo_mode_pwm+0x1>
    c590:	e0 90 e6 26 	lds	r14, 0x26E6	; 0x8026e6 <g_xo_mode_pwm+0x2>
    c594:	f0 90 e7 26 	lds	r15, 0x26E7	; 0x8026e7 <g_xo_mode_pwm+0x3>
    c598:	8f bf       	out	0x3f, r24	; 63
    c59a:	20 e0       	ldi	r18, 0x00	; 0
    c59c:	38 e0       	ldi	r19, 0x08	; 8
    c59e:	43 e0       	ldi	r20, 0x03	; 3
    c5a0:	60 e0       	ldi	r22, 0x00	; 0
    c5a2:	87 e6       	ldi	r24, 0x67	; 103
    c5a4:	96 e2       	ldi	r25, 0x26	; 38
    c5a6:	54 da       	rcall	.-2904   	; 0xba50 <pwm_init>
    c5a8:	6d e2       	ldi	r22, 0x2D	; 45
    c5aa:	87 e6       	ldi	r24, 0x67	; 103
    c5ac:	96 e2       	ldi	r25, 0x26	; 38
    c5ae:	18 db       	rcall	.-2512   	; 0xbbe0 <pwm_start>
    c5b0:	c0 92 3c 08 	sts	0x083C, r12	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    c5b4:	d0 92 3d 08 	sts	0x083D, r13	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>
    c5b8:	0f 2e       	mov	r0, r31
    c5ba:	f0 e6       	ldi	r31, 0x60	; 96
    c5bc:	ef 2e       	mov	r14, r31
    c5be:	f6 e2       	ldi	r31, 0x26	; 38
    c5c0:	ff 2e       	mov	r15, r31
    c5c2:	f0 2d       	mov	r31, r0
    c5c4:	00 e4       	ldi	r16, 0x40	; 64
    c5c6:	18 e0       	ldi	r17, 0x08	; 8
    c5c8:	f7 01       	movw	r30, r14
    c5ca:	00 83       	st	Z, r16
    c5cc:	11 83       	std	Z+1, r17	; 0x01
    c5ce:	80 e4       	ldi	r24, 0x40	; 64
    c5d0:	98 e0       	ldi	r25, 0x08	; 8
    c5d2:	0e 94 a2 52 	call	0xa544	; 0xa544 <tc_enable>
    c5d6:	f8 01       	movw	r30, r16
    c5d8:	81 81       	ldd	r24, Z+1	; 0x01
    c5da:	88 7f       	andi	r24, 0xF8	; 248
    c5dc:	81 83       	std	Z+1, r24	; 0x01
    c5de:	80 81       	ld	r24, Z
    c5e0:	80 7f       	andi	r24, 0xF0	; 240
    c5e2:	80 83       	st	Z, r24
    c5e4:	68 ee       	ldi	r22, 0xE8	; 232
    c5e6:	73 e0       	ldi	r23, 0x03	; 3
    c5e8:	c7 01       	movw	r24, r14
    c5ea:	c6 d9       	rcall	.-3188   	; 0xb978 <pwm_set_frequency>
    c5ec:	f7 01       	movw	r30, r14
    c5ee:	85 81       	ldd	r24, Z+5	; 0x05
    c5f0:	96 81       	ldd	r25, Z+6	; 0x06
    c5f2:	f8 01       	movw	r30, r16
    c5f4:	86 a3       	std	Z+38, r24	; 0x26
    c5f6:	97 a3       	std	Z+39, r25	; 0x27
    c5f8:	8f e2       	ldi	r24, 0x2F	; 47
    c5fa:	95 e7       	ldi	r25, 0x75	; 117
    c5fc:	86 ab       	std	Z+54, r24	; 0x36
    c5fe:	97 ab       	std	Z+55, r25	; 0x37
    c600:	80 e4       	ldi	r24, 0x40	; 64
    c602:	9a e0       	ldi	r25, 0x0A	; 10
    c604:	0e 94 a2 52 	call	0xa544	; 0xa544 <tc_enable>
    c608:	e0 e4       	ldi	r30, 0x40	; 64
    c60a:	fa e0       	ldi	r31, 0x0A	; 10
    c60c:	81 81       	ldd	r24, Z+1	; 0x01
    c60e:	88 7f       	andi	r24, 0xF8	; 248
    c610:	81 83       	std	Z+1, r24	; 0x01
    c612:	80 e7       	ldi	r24, 0x70	; 112
    c614:	92 e0       	ldi	r25, 0x02	; 2
    c616:	86 a3       	std	Z+38, r24	; 0x26
    c618:	97 a3       	std	Z+39, r25	; 0x27
    c61a:	0f 90       	pop	r0
    c61c:	df 91       	pop	r29
    c61e:	cf 91       	pop	r28
    c620:	1f 91       	pop	r17
    c622:	0f 91       	pop	r16
    c624:	ff 90       	pop	r15
    c626:	ef 90       	pop	r14
    c628:	df 90       	pop	r13
    c62a:	cf 90       	pop	r12
    c62c:	08 95       	ret

0000c62e <tc_start>:
    c62e:	cf 93       	push	r28
    c630:	df 93       	push	r29
    c632:	c0 e0       	ldi	r28, 0x00	; 0
    c634:	d8 e0       	ldi	r29, 0x08	; 8
    c636:	88 81       	ld	r24, Y
    c638:	80 7f       	andi	r24, 0xF0	; 240
    c63a:	81 60       	ori	r24, 0x01	; 1
    c63c:	88 83       	st	Y, r24
    c63e:	62 ef       	ldi	r22, 0xF2	; 242
    c640:	7d e6       	ldi	r23, 0x6D	; 109
    c642:	80 e0       	ldi	r24, 0x00	; 0
    c644:	98 e0       	ldi	r25, 0x08	; 8
    c646:	0e 94 21 53 	call	0xa642	; 0xa642 <tc_set_overflow_interrupt_callback>
    c64a:	8e 81       	ldd	r24, Y+6	; 0x06
    c64c:	8c 7f       	andi	r24, 0xFC	; 252
    c64e:	8e 83       	std	Y+6, r24	; 0x06
    c650:	8e 81       	ldd	r24, Y+6	; 0x06
    c652:	81 60       	ori	r24, 0x01	; 1
    c654:	8e 83       	std	Y+6, r24	; 0x06
    c656:	c0 e4       	ldi	r28, 0x40	; 64
    c658:	d8 e0       	ldi	r29, 0x08	; 8
    c65a:	88 81       	ld	r24, Y
    c65c:	80 7f       	andi	r24, 0xF0	; 240
    c65e:	81 60       	ori	r24, 0x01	; 1
    c660:	88 83       	st	Y, r24
    c662:	65 e4       	ldi	r22, 0x45	; 69
    c664:	7e e5       	ldi	r23, 0x5E	; 94
    c666:	80 e4       	ldi	r24, 0x40	; 64
    c668:	98 e0       	ldi	r25, 0x08	; 8
    c66a:	0e 94 21 53 	call	0xa642	; 0xa642 <tc_set_overflow_interrupt_callback>
    c66e:	8e 81       	ldd	r24, Y+6	; 0x06
    c670:	8c 7f       	andi	r24, 0xFC	; 252
    c672:	8e 83       	std	Y+6, r24	; 0x06
    c674:	8e 81       	ldd	r24, Y+6	; 0x06
    c676:	83 60       	ori	r24, 0x03	; 3
    c678:	8e 83       	std	Y+6, r24	; 0x06
    c67a:	e0 e4       	ldi	r30, 0x40	; 64
    c67c:	fa e0       	ldi	r31, 0x0A	; 10
    c67e:	80 81       	ld	r24, Z
    c680:	80 7f       	andi	r24, 0xF0	; 240
    c682:	81 60       	ori	r24, 0x01	; 1
    c684:	80 83       	st	Z, r24
    c686:	df 91       	pop	r29
    c688:	cf 91       	pop	r28
    c68a:	08 95       	ret

0000c68c <dac_init>:
    c68c:	cf 93       	push	r28
    c68e:	df 93       	push	r29
    c690:	67 e0       	ldi	r22, 0x07	; 7
    c692:	75 e2       	ldi	r23, 0x25	; 37
    c694:	80 e2       	ldi	r24, 0x20	; 32
    c696:	93 e0       	ldi	r25, 0x03	; 3
    c698:	0e 94 1f 4c 	call	0x983e	; 0x983e <dac_read_configuration>
    c69c:	e7 e0       	ldi	r30, 0x07	; 7
    c69e:	f5 e2       	ldi	r31, 0x25	; 37
    c6a0:	81 e0       	ldi	r24, 0x01	; 1
    c6a2:	82 83       	std	Z+2, r24	; 0x02
    c6a4:	8c e0       	ldi	r24, 0x0C	; 12
    c6a6:	80 83       	st	Z, r24
    c6a8:	81 81       	ldd	r24, Z+1	; 0x01
    c6aa:	8c 79       	andi	r24, 0x9C	; 156
    c6ac:	83 64       	ori	r24, 0x43	; 67
    c6ae:	81 83       	std	Z+1, r24	; 0x01
    c6b0:	84 e0       	ldi	r24, 0x04	; 4
    c6b2:	83 83       	std	Z+3, r24	; 0x03
    c6b4:	bf 01       	movw	r22, r30
    c6b6:	80 e2       	ldi	r24, 0x20	; 32
    c6b8:	93 e0       	ldi	r25, 0x03	; 3
    c6ba:	0e 94 c3 4b 	call	0x9786	; 0x9786 <dac_write_configuration>
    c6be:	62 e3       	ldi	r22, 0x32	; 50
    c6c0:	70 e0       	ldi	r23, 0x00	; 0
    c6c2:	82 e0       	ldi	r24, 0x02	; 2
    c6c4:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    c6c8:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    c6cc:	63 e3       	ldi	r22, 0x33	; 51
    c6ce:	70 e0       	ldi	r23, 0x00	; 0
    c6d0:	82 e0       	ldi	r24, 0x02	; 2
    c6d2:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    c6d6:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    c6da:	66 e3       	ldi	r22, 0x36	; 54
    c6dc:	70 e0       	ldi	r23, 0x00	; 0
    c6de:	82 e0       	ldi	r24, 0x02	; 2
    c6e0:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    c6e4:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    c6e8:	67 e3       	ldi	r22, 0x37	; 55
    c6ea:	70 e0       	ldi	r23, 0x00	; 0
    c6ec:	82 e0       	ldi	r24, 0x02	; 2
    c6ee:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    c6f2:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
    c6f6:	ac ef       	ldi	r26, 0xFC	; 252
    c6f8:	b4 e2       	ldi	r27, 0x24	; 36
    c6fa:	8b e0       	ldi	r24, 0x0B	; 11
    c6fc:	ed 01       	movw	r28, r26
    c6fe:	e8 2f       	mov	r30, r24
    c700:	19 92       	st	Y+, r1
    c702:	ea 95       	dec	r30
    c704:	e9 f7       	brne	.-6      	; 0xc700 <dac_init+0x74>
    c706:	e1 ef       	ldi	r30, 0xF1	; 241
    c708:	f4 e2       	ldi	r31, 0x24	; 36
    c70a:	ef 01       	movw	r28, r30
    c70c:	19 92       	st	Y+, r1
    c70e:	8a 95       	dec	r24
    c710:	e9 f7       	brne	.-6      	; 0xc70c <dac_init+0x80>
    c712:	80 e2       	ldi	r24, 0x20	; 32
    c714:	90 e0       	ldi	r25, 0x00	; 0
    c716:	14 96       	adiw	r26, 0x04	; 4
    c718:	8d 93       	st	X+, r24
    c71a:	9c 93       	st	X, r25
    c71c:	15 97       	sbiw	r26, 0x05	; 5
    c71e:	84 83       	std	Z+4, r24	; 0x04
    c720:	95 83       	std	Z+5, r25	; 0x05
    c722:	85 ea       	ldi	r24, 0xA5	; 165
    c724:	94 e2       	ldi	r25, 0x24	; 36
    c726:	17 96       	adiw	r26, 0x07	; 7
    c728:	8d 93       	st	X+, r24
    c72a:	9c 93       	st	X, r25
    c72c:	18 97       	sbiw	r26, 0x08	; 8
    c72e:	29 ed       	ldi	r18, 0xD9	; 217
    c730:	12 96       	adiw	r26, 0x02	; 2
    c732:	2c 93       	st	X, r18
    c734:	12 97       	sbiw	r26, 0x02	; 2
    c736:	88 e3       	ldi	r24, 0x38	; 56
    c738:	93 e0       	ldi	r25, 0x03	; 3
    c73a:	19 96       	adiw	r26, 0x09	; 9
    c73c:	8d 93       	st	X+, r24
    c73e:	9c 93       	st	X, r25
    c740:	1a 97       	sbiw	r26, 0x0a	; 10
    c742:	45 ec       	ldi	r20, 0xC5	; 197
    c744:	54 e2       	ldi	r21, 0x24	; 36
    c746:	47 83       	std	Z+7, r20	; 0x07
    c748:	50 87       	std	Z+8, r21	; 0x08
    c74a:	22 83       	std	Z+2, r18	; 0x02
    c74c:	81 87       	std	Z+9, r24	; 0x09
    c74e:	92 87       	std	Z+10, r25	; 0x0a
    c750:	95 e2       	ldi	r25, 0x25	; 37
    c752:	13 96       	adiw	r26, 0x03	; 3
    c754:	9c 93       	st	X, r25
    c756:	13 97       	sbiw	r26, 0x03	; 3
    c758:	86 e0       	ldi	r24, 0x06	; 6
    c75a:	8c 93       	st	X, r24
    c75c:	93 83       	std	Z+3, r25	; 0x03
    c75e:	80 83       	st	Z, r24
    c760:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <rtc_get_time>
    c764:	a7 dc       	rcall	.-1714   	; 0xc0b4 <task_dac>
    c766:	df 91       	pop	r29
    c768:	cf 91       	pop	r28
    c76a:	08 95       	ret

0000c76c <calc_next_frame>:
    c76c:	8f 92       	push	r8
    c76e:	9f 92       	push	r9
    c770:	af 92       	push	r10
    c772:	bf 92       	push	r11
    c774:	cf 92       	push	r12
    c776:	df 92       	push	r13
    c778:	ef 92       	push	r14
    c77a:	ff 92       	push	r15
    c77c:	0f 93       	push	r16
    c77e:	1f 93       	push	r17
    c780:	cf 93       	push	r28
    c782:	df 93       	push	r29
    c784:	6b 01       	movw	r12, r22
    c786:	5a 01       	movw	r10, r20
    c788:	79 01       	movw	r14, r18
    c78a:	48 01       	movw	r8, r16
    c78c:	ec 01       	movw	r28, r24
    c78e:	8c 01       	movw	r16, r24
    c790:	00 5e       	subi	r16, 0xE0	; 224
    c792:	1f 4f       	sbci	r17, 0xFF	; 255
    c794:	f6 01       	movw	r30, r12
    c796:	82 81       	ldd	r24, Z+2	; 0x02
    c798:	93 81       	ldd	r25, Z+3	; 0x03
    c79a:	0e 94 4e 28 	call	0x509c	; 0x509c <get_interpolated_sine>
    c79e:	88 83       	st	Y, r24
    c7a0:	99 83       	std	Y+1, r25	; 0x01
    c7a2:	f7 01       	movw	r30, r14
    c7a4:	82 81       	ldd	r24, Z+2	; 0x02
    c7a6:	93 81       	ldd	r25, Z+3	; 0x03
    c7a8:	0e 94 4e 28 	call	0x509c	; 0x509c <get_interpolated_sine>
    c7ac:	8a 83       	std	Y+2, r24	; 0x02
    c7ae:	9b 83       	std	Y+3, r25	; 0x03
    c7b0:	f6 01       	movw	r30, r12
    c7b2:	40 81       	ld	r20, Z
    c7b4:	51 81       	ldd	r21, Z+1	; 0x01
    c7b6:	62 81       	ldd	r22, Z+2	; 0x02
    c7b8:	73 81       	ldd	r23, Z+3	; 0x03
    c7ba:	f5 01       	movw	r30, r10
    c7bc:	80 81       	ld	r24, Z
    c7be:	91 81       	ldd	r25, Z+1	; 0x01
    c7c0:	a2 81       	ldd	r26, Z+2	; 0x02
    c7c2:	b3 81       	ldd	r27, Z+3	; 0x03
    c7c4:	84 0f       	add	r24, r20
    c7c6:	95 1f       	adc	r25, r21
    c7c8:	a6 1f       	adc	r26, r22
    c7ca:	b7 1f       	adc	r27, r23
    c7cc:	f6 01       	movw	r30, r12
    c7ce:	80 83       	st	Z, r24
    c7d0:	91 83       	std	Z+1, r25	; 0x01
    c7d2:	a2 83       	std	Z+2, r26	; 0x02
    c7d4:	b3 83       	std	Z+3, r27	; 0x03
    c7d6:	f7 01       	movw	r30, r14
    c7d8:	40 81       	ld	r20, Z
    c7da:	51 81       	ldd	r21, Z+1	; 0x01
    c7dc:	62 81       	ldd	r22, Z+2	; 0x02
    c7de:	73 81       	ldd	r23, Z+3	; 0x03
    c7e0:	f4 01       	movw	r30, r8
    c7e2:	80 81       	ld	r24, Z
    c7e4:	91 81       	ldd	r25, Z+1	; 0x01
    c7e6:	a2 81       	ldd	r26, Z+2	; 0x02
    c7e8:	b3 81       	ldd	r27, Z+3	; 0x03
    c7ea:	84 0f       	add	r24, r20
    c7ec:	95 1f       	adc	r25, r21
    c7ee:	a6 1f       	adc	r26, r22
    c7f0:	b7 1f       	adc	r27, r23
    c7f2:	f7 01       	movw	r30, r14
    c7f4:	80 83       	st	Z, r24
    c7f6:	91 83       	std	Z+1, r25	; 0x01
    c7f8:	a2 83       	std	Z+2, r26	; 0x02
    c7fa:	b3 83       	std	Z+3, r27	; 0x03
    c7fc:	24 96       	adiw	r28, 0x04	; 4
    c7fe:	c0 17       	cp	r28, r16
    c800:	d1 07       	cpc	r29, r17
    c802:	41 f6       	brne	.-112    	; 0xc794 <calc_next_frame+0x28>
    c804:	df 91       	pop	r29
    c806:	cf 91       	pop	r28
    c808:	1f 91       	pop	r17
    c80a:	0f 91       	pop	r16
    c80c:	ff 90       	pop	r15
    c80e:	ef 90       	pop	r14
    c810:	df 90       	pop	r13
    c812:	cf 90       	pop	r12
    c814:	bf 90       	pop	r11
    c816:	af 90       	pop	r10
    c818:	9f 90       	pop	r9
    c81a:	8f 90       	pop	r8
    c81c:	08 95       	ret

0000c81e <dac_start>:
    c81e:	ff 92       	push	r15
    c820:	0f 93       	push	r16
    c822:	1f 93       	push	r17
    c824:	cf 93       	push	r28
    c826:	df 93       	push	r29
    c828:	00 d0       	rcall	.+0      	; 0xc82a <dac_start+0xc>
    c82a:	1f 92       	push	r1
    c82c:	cd b7       	in	r28, 0x3d	; 61
    c82e:	de b7       	in	r29, 0x3e	; 62
    c830:	80 e2       	ldi	r24, 0x20	; 32
    c832:	93 e0       	ldi	r25, 0x03	; 3
    c834:	0e 94 71 4b 	call	0x96e2	; 0x96e2 <dac_enable>
    c838:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <dma_enable>
    c83c:	61 ea       	ldi	r22, 0xA1	; 161
    c83e:	74 e6       	ldi	r23, 0x64	; 100
    c840:	80 e0       	ldi	r24, 0x00	; 0
    c842:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <dma_set_callback>
    c846:	ec ef       	ldi	r30, 0xFC	; 252
    c848:	f4 e2       	ldi	r31, 0x24	; 36
    c84a:	81 81       	ldd	r24, Z+1	; 0x01
    c84c:	80 7f       	andi	r24, 0xF0	; 240
    c84e:	8a 60       	ori	r24, 0x0A	; 10
    c850:	81 83       	std	Z+1, r24	; 0x01
    c852:	6e e7       	ldi	r22, 0x7E	; 126
    c854:	74 e6       	ldi	r23, 0x64	; 100
    c856:	81 e0       	ldi	r24, 0x01	; 1
    c858:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <dma_set_callback>
    c85c:	e1 ef       	ldi	r30, 0xF1	; 241
    c85e:	f4 e2       	ldi	r31, 0x24	; 36
    c860:	81 81       	ldd	r24, Z+1	; 0x01
    c862:	80 7f       	andi	r24, 0xF0	; 240
    c864:	8a 60       	ori	r24, 0x0A	; 10
    c866:	81 83       	std	Z+1, r24	; 0x01
    c868:	8f b7       	in	r24, 0x3f	; 63
    c86a:	8a 83       	std	Y+2, r24	; 0x02
    c86c:	f8 94       	cli
    c86e:	9a 81       	ldd	r25, Y+2	; 0x02
    c870:	e0 e0       	ldi	r30, 0x00	; 0
    c872:	f1 e0       	ldi	r31, 0x01	; 1
    c874:	80 81       	ld	r24, Z
    c876:	8c 7f       	andi	r24, 0xFC	; 252
    c878:	82 60       	ori	r24, 0x02	; 2
    c87a:	80 83       	st	Z, r24
    c87c:	9f bf       	out	0x3f, r25	; 63
    c87e:	8f b7       	in	r24, 0x3f	; 63
    c880:	89 83       	std	Y+1, r24	; 0x01
    c882:	f8 94       	cli
    c884:	99 81       	ldd	r25, Y+1	; 0x01
    c886:	80 81       	ld	r24, Z
    c888:	83 7f       	andi	r24, 0xF3	; 243
    c88a:	84 60       	ori	r24, 0x04	; 4
    c88c:	80 83       	st	Z, r24
    c88e:	9f bf       	out	0x3f, r25	; 63
    c890:	6c ef       	ldi	r22, 0xFC	; 252
    c892:	74 e2       	ldi	r23, 0x24	; 36
    c894:	80 e0       	ldi	r24, 0x00	; 0
    c896:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <dma_channel_write_config>
    c89a:	61 ef       	ldi	r22, 0xF1	; 241
    c89c:	74 e2       	ldi	r23, 0x24	; 36
    c89e:	81 e0       	ldi	r24, 0x01	; 1
    c8a0:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <dma_channel_write_config>
    c8a4:	8f b7       	in	r24, 0x3f	; 63
    c8a6:	8b 83       	std	Y+3, r24	; 0x03
    c8a8:	f8 94       	cli
    c8aa:	fb 80       	ldd	r15, Y+3	; 0x03
    c8ac:	05 ee       	ldi	r16, 0xE5	; 229
    c8ae:	14 e2       	ldi	r17, 0x24	; 36
    c8b0:	2b e0       	ldi	r18, 0x0B	; 11
    c8b2:	30 e2       	ldi	r19, 0x20	; 32
    c8b4:	4d ee       	ldi	r20, 0xED	; 237
    c8b6:	54 e2       	ldi	r21, 0x24	; 36
    c8b8:	69 ee       	ldi	r22, 0xE9	; 233
    c8ba:	74 e2       	ldi	r23, 0x24	; 36
    c8bc:	85 ea       	ldi	r24, 0xA5	; 165
    c8be:	94 e2       	ldi	r25, 0x24	; 36
    c8c0:	55 df       	rcall	.-342    	; 0xc76c <calc_next_frame>
    c8c2:	2b e0       	ldi	r18, 0x0B	; 11
    c8c4:	30 e2       	ldi	r19, 0x20	; 32
    c8c6:	4d ee       	ldi	r20, 0xED	; 237
    c8c8:	54 e2       	ldi	r21, 0x24	; 36
    c8ca:	69 ee       	ldi	r22, 0xE9	; 233
    c8cc:	74 e2       	ldi	r23, 0x24	; 36
    c8ce:	85 ec       	ldi	r24, 0xC5	; 197
    c8d0:	94 e2       	ldi	r25, 0x24	; 36
    c8d2:	4c df       	rcall	.-360    	; 0xc76c <calc_next_frame>
    c8d4:	8f b7       	in	r24, 0x3f	; 63
    c8d6:	8c 83       	std	Y+4, r24	; 0x04
    c8d8:	f8 94       	cli
    c8da:	9c 81       	ldd	r25, Y+4	; 0x04
    c8dc:	e0 e1       	ldi	r30, 0x10	; 16
    c8de:	f1 e0       	ldi	r31, 0x01	; 1
    c8e0:	80 81       	ld	r24, Z
    c8e2:	80 68       	ori	r24, 0x80	; 128
    c8e4:	80 83       	st	Z, r24
    c8e6:	9f bf       	out	0x3f, r25	; 63
    c8e8:	ff be       	out	0x3f, r15	; 63
    c8ea:	24 96       	adiw	r28, 0x04	; 4
    c8ec:	cd bf       	out	0x3d, r28	; 61
    c8ee:	de bf       	out	0x3e, r29	; 62
    c8f0:	df 91       	pop	r29
    c8f2:	cf 91       	pop	r28
    c8f4:	1f 91       	pop	r17
    c8f6:	0f 91       	pop	r16
    c8f8:	ff 90       	pop	r15
    c8fa:	08 95       	ret

0000c8fc <isr_dma_dac_ch0_B>:
    c8fc:	0f 93       	push	r16
    c8fe:	1f 93       	push	r17
    c900:	cf 93       	push	r28
    c902:	df 93       	push	r29
    c904:	1f 92       	push	r1
    c906:	cd b7       	in	r28, 0x3d	; 61
    c908:	de b7       	in	r29, 0x3e	; 62
    c90a:	8f b7       	in	r24, 0x3f	; 63
    c90c:	89 83       	std	Y+1, r24	; 0x01
    c90e:	f8 94       	cli
    c910:	99 81       	ldd	r25, Y+1	; 0x01
    c912:	e0 e1       	ldi	r30, 0x10	; 16
    c914:	f1 e0       	ldi	r31, 0x01	; 1
    c916:	80 81       	ld	r24, Z
    c918:	80 68       	ori	r24, 0x80	; 128
    c91a:	80 83       	st	Z, r24
    c91c:	9f bf       	out	0x3f, r25	; 63
    c91e:	78 94       	sei
    c920:	05 ee       	ldi	r16, 0xE5	; 229
    c922:	14 e2       	ldi	r17, 0x24	; 36
    c924:	2b e0       	ldi	r18, 0x0B	; 11
    c926:	30 e2       	ldi	r19, 0x20	; 32
    c928:	4d ee       	ldi	r20, 0xED	; 237
    c92a:	54 e2       	ldi	r21, 0x24	; 36
    c92c:	69 ee       	ldi	r22, 0xE9	; 233
    c92e:	74 e2       	ldi	r23, 0x24	; 36
    c930:	85 ec       	ldi	r24, 0xC5	; 197
    c932:	94 e2       	ldi	r25, 0x24	; 36
    c934:	1b df       	rcall	.-458    	; 0xc76c <calc_next_frame>
    c936:	0f 90       	pop	r0
    c938:	df 91       	pop	r29
    c93a:	cf 91       	pop	r28
    c93c:	1f 91       	pop	r17
    c93e:	0f 91       	pop	r16
    c940:	08 95       	ret

0000c942 <isr_dma_dac_ch0_A>:
    c942:	0f 93       	push	r16
    c944:	1f 93       	push	r17
    c946:	cf 93       	push	r28
    c948:	df 93       	push	r29
    c94a:	1f 92       	push	r1
    c94c:	cd b7       	in	r28, 0x3d	; 61
    c94e:	de b7       	in	r29, 0x3e	; 62
    c950:	8f b7       	in	r24, 0x3f	; 63
    c952:	89 83       	std	Y+1, r24	; 0x01
    c954:	f8 94       	cli
    c956:	99 81       	ldd	r25, Y+1	; 0x01
    c958:	e0 e2       	ldi	r30, 0x20	; 32
    c95a:	f1 e0       	ldi	r31, 0x01	; 1
    c95c:	80 81       	ld	r24, Z
    c95e:	80 68       	ori	r24, 0x80	; 128
    c960:	80 83       	st	Z, r24
    c962:	9f bf       	out	0x3f, r25	; 63
    c964:	78 94       	sei
    c966:	05 ee       	ldi	r16, 0xE5	; 229
    c968:	14 e2       	ldi	r17, 0x24	; 36
    c96a:	2b e0       	ldi	r18, 0x0B	; 11
    c96c:	30 e2       	ldi	r19, 0x20	; 32
    c96e:	4d ee       	ldi	r20, 0xED	; 237
    c970:	54 e2       	ldi	r21, 0x24	; 36
    c972:	69 ee       	ldi	r22, 0xE9	; 233
    c974:	74 e2       	ldi	r23, 0x24	; 36
    c976:	85 ea       	ldi	r24, 0xA5	; 165
    c978:	94 e2       	ldi	r25, 0x24	; 36
    c97a:	f8 de       	rcall	.-528    	; 0xc76c <calc_next_frame>
    c97c:	0f 90       	pop	r0
    c97e:	df 91       	pop	r29
    c980:	cf 91       	pop	r28
    c982:	1f 91       	pop	r17
    c984:	0f 91       	pop	r16
    c986:	08 95       	ret

0000c988 <adc_init>:
    c988:	8f 92       	push	r8
    c98a:	9f 92       	push	r9
    c98c:	af 92       	push	r10
    c98e:	bf 92       	push	r11
    c990:	cf 92       	push	r12
    c992:	df 92       	push	r13
    c994:	ef 92       	push	r14
    c996:	ff 92       	push	r15
    c998:	0f 93       	push	r16
    c99a:	1f 93       	push	r17
    c99c:	cf 93       	push	r28
    c99e:	df 93       	push	r29
    c9a0:	e0 e1       	ldi	r30, 0x10	; 16
    c9a2:	f6 e0       	ldi	r31, 0x06	; 6
    c9a4:	80 81       	ld	r24, Z
    c9a6:	87 60       	ori	r24, 0x07	; 7
    c9a8:	80 83       	st	Z, r24
    c9aa:	e1 e1       	ldi	r30, 0x11	; 17
    c9ac:	f6 e0       	ldi	r31, 0x06	; 6
    c9ae:	80 81       	ld	r24, Z
    c9b0:	87 60       	ori	r24, 0x07	; 7
    c9b2:	80 83       	st	Z, r24
    c9b4:	e2 e1       	ldi	r30, 0x12	; 18
    c9b6:	f6 e0       	ldi	r31, 0x06	; 6
    c9b8:	80 81       	ld	r24, Z
    c9ba:	87 60       	ori	r24, 0x07	; 7
    c9bc:	80 83       	st	Z, r24
    c9be:	e3 e1       	ldi	r30, 0x13	; 19
    c9c0:	f6 e0       	ldi	r31, 0x06	; 6
    c9c2:	80 81       	ld	r24, Z
    c9c4:	87 60       	ori	r24, 0x07	; 7
    c9c6:	80 83       	st	Z, r24
    c9c8:	e4 e1       	ldi	r30, 0x14	; 20
    c9ca:	f6 e0       	ldi	r31, 0x06	; 6
    c9cc:	80 81       	ld	r24, Z
    c9ce:	87 60       	ori	r24, 0x07	; 7
    c9d0:	80 83       	st	Z, r24
    c9d2:	e5 e1       	ldi	r30, 0x15	; 21
    c9d4:	f6 e0       	ldi	r31, 0x06	; 6
    c9d6:	80 81       	ld	r24, Z
    c9d8:	87 60       	ori	r24, 0x07	; 7
    c9da:	80 83       	st	Z, r24
    c9dc:	e2 e3       	ldi	r30, 0x32	; 50
    c9de:	f6 e0       	ldi	r31, 0x06	; 6
    c9e0:	80 81       	ld	r24, Z
    c9e2:	87 60       	ori	r24, 0x07	; 7
    c9e4:	80 83       	st	Z, r24
    c9e6:	e3 e3       	ldi	r30, 0x33	; 51
    c9e8:	f6 e0       	ldi	r31, 0x06	; 6
    c9ea:	80 81       	ld	r24, Z
    c9ec:	87 60       	ori	r24, 0x07	; 7
    c9ee:	80 83       	st	Z, r24
    c9f0:	6d ed       	ldi	r22, 0xDD	; 221
    c9f2:	76 e2       	ldi	r23, 0x26	; 38
    c9f4:	80 e0       	ldi	r24, 0x00	; 0
    c9f6:	92 e0       	ldi	r25, 0x02	; 2
    c9f8:	0e 94 83 4a 	call	0x9506	; 0x9506 <adc_read_configuration>
    c9fc:	49 ed       	ldi	r20, 0xD9	; 217
    c9fe:	56 e2       	ldi	r21, 0x26	; 38
    ca00:	61 e0       	ldi	r22, 0x01	; 1
    ca02:	80 e0       	ldi	r24, 0x00	; 0
    ca04:	92 e0       	ldi	r25, 0x02	; 2
    ca06:	0e 94 07 4b 	call	0x960e	; 0x960e <adcch_read_configuration>
    ca0a:	45 ed       	ldi	r20, 0xD5	; 213
    ca0c:	56 e2       	ldi	r21, 0x26	; 38
    ca0e:	62 e0       	ldi	r22, 0x02	; 2
    ca10:	80 e0       	ldi	r24, 0x00	; 0
    ca12:	92 e0       	ldi	r25, 0x02	; 2
    ca14:	0e 94 07 4b 	call	0x960e	; 0x960e <adcch_read_configuration>
    ca18:	41 ed       	ldi	r20, 0xD1	; 209
    ca1a:	56 e2       	ldi	r21, 0x26	; 38
    ca1c:	64 e0       	ldi	r22, 0x04	; 4
    ca1e:	80 e0       	ldi	r24, 0x00	; 0
    ca20:	92 e0       	ldi	r25, 0x02	; 2
    ca22:	0e 94 07 4b 	call	0x960e	; 0x960e <adcch_read_configuration>
    ca26:	4d ec       	ldi	r20, 0xCD	; 205
    ca28:	56 e2       	ldi	r21, 0x26	; 38
    ca2a:	68 e0       	ldi	r22, 0x08	; 8
    ca2c:	80 e0       	ldi	r24, 0x00	; 0
    ca2e:	92 e0       	ldi	r25, 0x02	; 2
    ca30:	0e 94 07 4b 	call	0x960e	; 0x960e <adcch_read_configuration>
    ca34:	66 ec       	ldi	r22, 0xC6	; 198
    ca36:	76 e2       	ldi	r23, 0x26	; 38
    ca38:	80 e4       	ldi	r24, 0x40	; 64
    ca3a:	92 e0       	ldi	r25, 0x02	; 2
    ca3c:	0e 94 83 4a 	call	0x9506	; 0x9506 <adc_read_configuration>
    ca40:	42 ec       	ldi	r20, 0xC2	; 194
    ca42:	56 e2       	ldi	r21, 0x26	; 38
    ca44:	61 e0       	ldi	r22, 0x01	; 1
    ca46:	80 e4       	ldi	r24, 0x40	; 64
    ca48:	92 e0       	ldi	r25, 0x02	; 2
    ca4a:	0e 94 07 4b 	call	0x960e	; 0x960e <adcch_read_configuration>
    ca4e:	ad ed       	ldi	r26, 0xDD	; 221
    ca50:	b6 e2       	ldi	r27, 0x26	; 38
    ca52:	83 e0       	ldi	r24, 0x03	; 3
    ca54:	14 96       	adiw	r26, 0x04	; 4
    ca56:	8c 93       	st	X, r24
    ca58:	14 97       	sbiw	r26, 0x04	; 4
    ca5a:	e6 ec       	ldi	r30, 0xC6	; 198
    ca5c:	f6 e2       	ldi	r31, 0x26	; 38
    ca5e:	87 e0       	ldi	r24, 0x07	; 7
    ca60:	84 83       	std	Z+4, r24	; 0x04
    ca62:	12 96       	adiw	r26, 0x02	; 2
    ca64:	3c 91       	ld	r19, X
    ca66:	12 97       	sbiw	r26, 0x02	; 2
    ca68:	22 81       	ldd	r18, Z+2	; 0x02
    ca6a:	11 96       	adiw	r26, 0x01	; 1
    ca6c:	9c 91       	ld	r25, X
    ca6e:	11 97       	sbiw	r26, 0x01	; 1
    ca70:	81 81       	ldd	r24, Z+1	; 0x01
    ca72:	0f 2e       	mov	r0, r31
    ca74:	f9 ed       	ldi	r31, 0xD9	; 217
    ca76:	8f 2e       	mov	r8, r31
    ca78:	f6 e2       	ldi	r31, 0x26	; 38
    ca7a:	9f 2e       	mov	r9, r31
    ca7c:	f0 2d       	mov	r31, r0
    ca7e:	41 e0       	ldi	r20, 0x01	; 1
    ca80:	e4 01       	movw	r28, r8
    ca82:	48 83       	st	Y, r20
    ca84:	58 e0       	ldi	r21, 0x08	; 8
    ca86:	59 83       	std	Y+1, r21	; 0x01
    ca88:	0f 2e       	mov	r0, r31
    ca8a:	f5 ed       	ldi	r31, 0xD5	; 213
    ca8c:	af 2e       	mov	r10, r31
    ca8e:	f6 e2       	ldi	r31, 0x26	; 38
    ca90:	bf 2e       	mov	r11, r31
    ca92:	f0 2d       	mov	r31, r0
    ca94:	e5 01       	movw	r28, r10
    ca96:	48 83       	st	Y, r20
    ca98:	60 e2       	ldi	r22, 0x20	; 32
    ca9a:	69 83       	std	Y+1, r22	; 0x01
    ca9c:	0f 2e       	mov	r0, r31
    ca9e:	f1 ed       	ldi	r31, 0xD1	; 209
    caa0:	cf 2e       	mov	r12, r31
    caa2:	f6 e2       	ldi	r31, 0x26	; 38
    caa4:	df 2e       	mov	r13, r31
    caa6:	f0 2d       	mov	r31, r0
    caa8:	e6 01       	movw	r28, r12
    caaa:	48 83       	st	Y, r20
    caac:	68 e2       	ldi	r22, 0x28	; 40
    caae:	69 83       	std	Y+1, r22	; 0x01
    cab0:	0f 2e       	mov	r0, r31
    cab2:	fd ec       	ldi	r31, 0xCD	; 205
    cab4:	ef 2e       	mov	r14, r31
    cab6:	f6 e2       	ldi	r31, 0x26	; 38
    cab8:	ff 2e       	mov	r15, r31
    caba:	f0 2d       	mov	r31, r0
    cabc:	e7 01       	movw	r28, r14
    cabe:	18 82       	st	Y, r1
    cac0:	59 83       	std	Y+1, r21	; 0x01
    cac2:	02 ec       	ldi	r16, 0xC2	; 194
    cac4:	16 e2       	ldi	r17, 0x26	; 38
    cac6:	e8 01       	movw	r28, r16
    cac8:	18 82       	st	Y, r1
    caca:	19 82       	std	Y+1, r1	; 0x01
    cacc:	3e 78       	andi	r19, 0x8E	; 142
    cace:	32 62       	ori	r19, 0x22	; 34
    cad0:	12 96       	adiw	r26, 0x02	; 2
    cad2:	3c 93       	st	X, r19
    cad4:	12 97       	sbiw	r26, 0x02	; 2
    cad6:	2f 78       	andi	r18, 0x8F	; 143
    cad8:	23 60       	ori	r18, 0x03	; 3
    cada:	22 83       	std	Z+2, r18	; 0x02
    cadc:	22 e0       	ldi	r18, 0x02	; 2
    cade:	e4 01       	movw	r28, r8
    cae0:	2b 83       	std	Y+3, r18	; 0x03
    cae2:	91 70       	andi	r25, 0x01	; 1
    cae4:	90 64       	ori	r25, 0x40	; 64
    cae6:	11 96       	adiw	r26, 0x01	; 1
    cae8:	9c 93       	st	X, r25
    caea:	11 97       	sbiw	r26, 0x01	; 1
    caec:	9c e0       	ldi	r25, 0x0C	; 12
    caee:	13 96       	adiw	r26, 0x03	; 3
    caf0:	9c 93       	st	X, r25
    caf2:	81 70       	andi	r24, 0x01	; 1
    caf4:	80 66       	ori	r24, 0x60	; 96
    caf6:	81 83       	std	Z+1, r24	; 0x01
    caf8:	43 83       	std	Z+3, r20	; 0x03
    cafa:	69 e6       	ldi	r22, 0x69	; 105
    cafc:	7e e5       	ldi	r23, 0x5E	; 94
    cafe:	80 e0       	ldi	r24, 0x00	; 0
    cb00:	92 e0       	ldi	r25, 0x02	; 2
    cb02:	0e 94 d7 47 	call	0x8fae	; 0x8fae <adc_set_callback>
    cb06:	60 e1       	ldi	r22, 0x10	; 16
    cb08:	70 e6       	ldi	r23, 0x60	; 96
    cb0a:	80 e4       	ldi	r24, 0x40	; 64
    cb0c:	92 e0       	ldi	r25, 0x02	; 2
    cb0e:	0e 94 d7 47 	call	0x8fae	; 0x8fae <adc_set_callback>
    cb12:	f5 01       	movw	r30, r10
    cb14:	32 81       	ldd	r19, Z+2	; 0x02
    cb16:	e6 01       	movw	r28, r12
    cb18:	2a 81       	ldd	r18, Y+2	; 0x02
    cb1a:	f7 01       	movw	r30, r14
    cb1c:	92 81       	ldd	r25, Z+2	; 0x02
    cb1e:	e8 01       	movw	r28, r16
    cb20:	8a 81       	ldd	r24, Y+2	; 0x02
    cb22:	f4 01       	movw	r30, r8
    cb24:	42 81       	ldd	r20, Z+2	; 0x02
    cb26:	40 7f       	andi	r20, 0xF0	; 240
    cb28:	41 60       	ori	r20, 0x01	; 1
    cb2a:	42 83       	std	Z+2, r20	; 0x02
    cb2c:	30 7f       	andi	r19, 0xF0	; 240
    cb2e:	31 60       	ori	r19, 0x01	; 1
    cb30:	e5 01       	movw	r28, r10
    cb32:	3a 83       	std	Y+2, r19	; 0x02
    cb34:	20 7f       	andi	r18, 0xF0	; 240
    cb36:	21 60       	ori	r18, 0x01	; 1
    cb38:	f6 01       	movw	r30, r12
    cb3a:	22 83       	std	Z+2, r18	; 0x02
    cb3c:	90 7f       	andi	r25, 0xF0	; 240
    cb3e:	91 60       	ori	r25, 0x01	; 1
    cb40:	e7 01       	movw	r28, r14
    cb42:	9a 83       	std	Y+2, r25	; 0x02
    cb44:	80 7f       	andi	r24, 0xF0	; 240
    cb46:	81 60       	ori	r24, 0x01	; 1
    cb48:	f8 01       	movw	r30, r16
    cb4a:	82 83       	std	Z+2, r24	; 0x02
    cb4c:	6d ed       	ldi	r22, 0xDD	; 221
    cb4e:	76 e2       	ldi	r23, 0x26	; 38
    cb50:	80 e0       	ldi	r24, 0x00	; 0
    cb52:	92 e0       	ldi	r25, 0x02	; 2
    cb54:	0e 94 19 4a 	call	0x9432	; 0x9432 <adc_write_configuration>
    cb58:	a4 01       	movw	r20, r8
    cb5a:	61 e0       	ldi	r22, 0x01	; 1
    cb5c:	80 e0       	ldi	r24, 0x00	; 0
    cb5e:	92 e0       	ldi	r25, 0x02	; 2
    cb60:	0e 94 bc 4a 	call	0x9578	; 0x9578 <adcch_write_configuration>
    cb64:	a5 01       	movw	r20, r10
    cb66:	62 e0       	ldi	r22, 0x02	; 2
    cb68:	80 e0       	ldi	r24, 0x00	; 0
    cb6a:	92 e0       	ldi	r25, 0x02	; 2
    cb6c:	0e 94 bc 4a 	call	0x9578	; 0x9578 <adcch_write_configuration>
    cb70:	a6 01       	movw	r20, r12
    cb72:	64 e0       	ldi	r22, 0x04	; 4
    cb74:	80 e0       	ldi	r24, 0x00	; 0
    cb76:	92 e0       	ldi	r25, 0x02	; 2
    cb78:	0e 94 bc 4a 	call	0x9578	; 0x9578 <adcch_write_configuration>
    cb7c:	a7 01       	movw	r20, r14
    cb7e:	68 e0       	ldi	r22, 0x08	; 8
    cb80:	80 e0       	ldi	r24, 0x00	; 0
    cb82:	92 e0       	ldi	r25, 0x02	; 2
    cb84:	0e 94 bc 4a 	call	0x9578	; 0x9578 <adcch_write_configuration>
    cb88:	66 ec       	ldi	r22, 0xC6	; 198
    cb8a:	76 e2       	ldi	r23, 0x26	; 38
    cb8c:	80 e4       	ldi	r24, 0x40	; 64
    cb8e:	92 e0       	ldi	r25, 0x02	; 2
    cb90:	0e 94 19 4a 	call	0x9432	; 0x9432 <adc_write_configuration>
    cb94:	a8 01       	movw	r20, r16
    cb96:	61 e0       	ldi	r22, 0x01	; 1
    cb98:	80 e4       	ldi	r24, 0x40	; 64
    cb9a:	92 e0       	ldi	r25, 0x02	; 2
    cb9c:	0e 94 bc 4a 	call	0x9578	; 0x9578 <adcch_write_configuration>
    cba0:	61 e2       	ldi	r22, 0x21	; 33
    cba2:	70 e0       	ldi	r23, 0x00	; 0
    cba4:	82 e0       	ldi	r24, 0x02	; 2
    cba6:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    cbaa:	c8 2f       	mov	r28, r24
    cbac:	d0 e0       	ldi	r29, 0x00	; 0
    cbae:	dc 2f       	mov	r29, r28
    cbb0:	cc 27       	eor	r28, r28
    cbb2:	60 e2       	ldi	r22, 0x20	; 32
    cbb4:	70 e0       	ldi	r23, 0x00	; 0
    cbb6:	82 e0       	ldi	r24, 0x02	; 2
    cbb8:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    cbbc:	c8 2b       	or	r28, r24
    cbbe:	c0 93 0c 02 	sts	0x020C, r28	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    cbc2:	d0 93 0d 02 	sts	0x020D, r29	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    cbc6:	65 e2       	ldi	r22, 0x25	; 37
    cbc8:	70 e0       	ldi	r23, 0x00	; 0
    cbca:	82 e0       	ldi	r24, 0x02	; 2
    cbcc:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    cbd0:	c8 2f       	mov	r28, r24
    cbd2:	d0 e0       	ldi	r29, 0x00	; 0
    cbd4:	dc 2f       	mov	r29, r28
    cbd6:	cc 27       	eor	r28, r28
    cbd8:	64 e2       	ldi	r22, 0x24	; 36
    cbda:	70 e0       	ldi	r23, 0x00	; 0
    cbdc:	82 e0       	ldi	r24, 0x02	; 2
    cbde:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
    cbe2:	c8 2b       	or	r28, r24
    cbe4:	c0 93 4c 02 	sts	0x024C, r28	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
    cbe8:	d0 93 4d 02 	sts	0x024D, r29	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    cbec:	df 91       	pop	r29
    cbee:	cf 91       	pop	r28
    cbf0:	1f 91       	pop	r17
    cbf2:	0f 91       	pop	r16
    cbf4:	ff 90       	pop	r15
    cbf6:	ef 90       	pop	r14
    cbf8:	df 90       	pop	r13
    cbfa:	cf 90       	pop	r12
    cbfc:	bf 90       	pop	r11
    cbfe:	af 90       	pop	r10
    cc00:	9f 90       	pop	r9
    cc02:	8f 90       	pop	r8
    cc04:	08 95       	ret

0000cc06 <save_globals>:
    cc06:	4f 92       	push	r4
    cc08:	5f 92       	push	r5
    cc0a:	6f 92       	push	r6
    cc0c:	7f 92       	push	r7
    cc0e:	9f 92       	push	r9
    cc10:	af 92       	push	r10
    cc12:	bf 92       	push	r11
    cc14:	cf 92       	push	r12
    cc16:	df 92       	push	r13
    cc18:	ef 92       	push	r14
    cc1a:	ff 92       	push	r15
    cc1c:	0f 93       	push	r16
    cc1e:	1f 93       	push	r17
    cc20:	cf 93       	push	r28
    cc22:	df 93       	push	r29
    cc24:	cd b7       	in	r28, 0x3d	; 61
    cc26:	de b7       	in	r29, 0x3e	; 62
    cc28:	a4 97       	sbiw	r28, 0x24	; 36
    cc2a:	cd bf       	out	0x3d, r28	; 61
    cc2c:	de bf       	out	0x3e, r29	; 62
    cc2e:	98 2e       	mov	r9, r24
    cc30:	0f 2e       	mov	r0, r31
    cc32:	f7 e0       	ldi	r31, 0x07	; 7
    cc34:	4f 2e       	mov	r4, r31
    cc36:	51 2c       	mov	r5, r1
    cc38:	61 2c       	mov	r6, r1
    cc3a:	71 2c       	mov	r7, r1
    cc3c:	f0 2d       	mov	r31, r0
    cc3e:	65 e4       	ldi	r22, 0x45	; 69
    cc40:	78 ec       	ldi	r23, 0xC8	; 200
    cc42:	83 e3       	ldi	r24, 0x33	; 51
    cc44:	91 e0       	ldi	r25, 0x01	; 1
    cc46:	2a e0       	ldi	r18, 0x0A	; 10
    cc48:	30 e0       	ldi	r19, 0x00	; 0
    cc4a:	40 e0       	ldi	r20, 0x00	; 0
    cc4c:	50 e0       	ldi	r21, 0x00	; 0
    cc4e:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
    cc52:	a2 2e       	mov	r10, r18
    cc54:	b3 2e       	mov	r11, r19
    cc56:	c4 2e       	mov	r12, r20
    cc58:	d5 2e       	mov	r13, r21
    cc5a:	60 5d       	subi	r22, 0xD0	; 208
    cc5c:	69 83       	std	Y+1, r22	; 0x01
    cc5e:	e1 2c       	mov	r14, r1
    cc60:	f1 2c       	mov	r15, r1
    cc62:	87 01       	movw	r16, r14
    cc64:	e3 94       	inc	r14
    cc66:	9e 01       	movw	r18, r28
    cc68:	2f 5f       	subi	r18, 0xFF	; 255
    cc6a:	3f 4f       	sbci	r19, 0xFF	; 255
    cc6c:	b3 01       	movw	r22, r6
    cc6e:	a2 01       	movw	r20, r4
    cc70:	82 e0       	ldi	r24, 0x02	; 2
    cc72:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cc76:	6a 2d       	mov	r22, r10
    cc78:	7b 2d       	mov	r23, r11
    cc7a:	8c 2d       	mov	r24, r12
    cc7c:	9d 2d       	mov	r25, r13
    cc7e:	21 e0       	ldi	r18, 0x01	; 1
    cc80:	42 1a       	sub	r4, r18
    cc82:	51 08       	sbc	r5, r1
    cc84:	61 08       	sbc	r6, r1
    cc86:	71 08       	sbc	r7, r1
    cc88:	2f ef       	ldi	r18, 0xFF	; 255
    cc8a:	42 16       	cp	r4, r18
    cc8c:	52 06       	cpc	r5, r18
    cc8e:	62 06       	cpc	r6, r18
    cc90:	72 06       	cpc	r7, r18
    cc92:	c9 f6       	brne	.-78     	; 0xcc46 <save_globals+0x40>
    cc94:	90 fe       	sbrs	r9, 0
    cc96:	20 c0       	rjmp	.+64     	; 0xccd8 <save_globals+0xd2>
    cc98:	8f b7       	in	r24, 0x3f	; 63
    cc9a:	8c a3       	std	Y+36, r24	; 0x24
    cc9c:	f8 94       	cli
    cc9e:	8c a1       	ldd	r24, Y+36	; 0x24
    cca0:	40 91 e4 26 	lds	r20, 0x26E4	; 0x8026e4 <g_xo_mode_pwm>
    cca4:	50 91 e5 26 	lds	r21, 0x26E5	; 0x8026e5 <g_xo_mode_pwm+0x1>
    cca8:	60 91 e6 26 	lds	r22, 0x26E6	; 0x8026e6 <g_xo_mode_pwm+0x2>
    ccac:	70 91 e7 26 	lds	r23, 0x26E7	; 0x8026e7 <g_xo_mode_pwm+0x3>
    ccb0:	49 83       	std	Y+1, r20	; 0x01
    ccb2:	5a 83       	std	Y+2, r21	; 0x02
    ccb4:	6b 83       	std	Y+3, r22	; 0x03
    ccb6:	7c 83       	std	Y+4, r23	; 0x04
    ccb8:	8f bf       	out	0x3f, r24	; 63
    ccba:	14 e0       	ldi	r17, 0x04	; 4
    ccbc:	e1 2e       	mov	r14, r17
    ccbe:	f1 2c       	mov	r15, r1
    ccc0:	00 e0       	ldi	r16, 0x00	; 0
    ccc2:	10 e0       	ldi	r17, 0x00	; 0
    ccc4:	9e 01       	movw	r18, r28
    ccc6:	2f 5f       	subi	r18, 0xFF	; 255
    ccc8:	3f 4f       	sbci	r19, 0xFF	; 255
    ccca:	40 e1       	ldi	r20, 0x10	; 16
    cccc:	50 e0       	ldi	r21, 0x00	; 0
    ccce:	60 e0       	ldi	r22, 0x00	; 0
    ccd0:	70 e0       	ldi	r23, 0x00	; 0
    ccd2:	82 e0       	ldi	r24, 0x02	; 2
    ccd4:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    ccd8:	91 fe       	sbrs	r9, 1
    ccda:	1a c0       	rjmp	.+52     	; 0xcd10 <save_globals+0x10a>
    ccdc:	8f b7       	in	r24, 0x3f	; 63
    ccde:	8b a3       	std	Y+35, r24	; 0x23
    cce0:	f8 94       	cli
    cce2:	8b a1       	ldd	r24, Y+35	; 0x23
    cce4:	20 91 9b 28 	lds	r18, 0x289B	; 0x80289b <g_backlight_mode_pwm>
    cce8:	30 91 9c 28 	lds	r19, 0x289C	; 0x80289c <g_backlight_mode_pwm+0x1>
    ccec:	29 83       	std	Y+1, r18	; 0x01
    ccee:	3a 83       	std	Y+2, r19	; 0x02
    ccf0:	8f bf       	out	0x3f, r24	; 63
    ccf2:	12 e0       	ldi	r17, 0x02	; 2
    ccf4:	e1 2e       	mov	r14, r17
    ccf6:	f1 2c       	mov	r15, r1
    ccf8:	00 e0       	ldi	r16, 0x00	; 0
    ccfa:	10 e0       	ldi	r17, 0x00	; 0
    ccfc:	9e 01       	movw	r18, r28
    ccfe:	2f 5f       	subi	r18, 0xFF	; 255
    cd00:	3f 4f       	sbci	r19, 0xFF	; 255
    cd02:	44 e1       	ldi	r20, 0x14	; 20
    cd04:	50 e0       	ldi	r21, 0x00	; 0
    cd06:	60 e0       	ldi	r22, 0x00	; 0
    cd08:	70 e0       	ldi	r23, 0x00	; 0
    cd0a:	82 e0       	ldi	r24, 0x02	; 2
    cd0c:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cd10:	92 fe       	sbrs	r9, 2
    cd12:	1b c0       	rjmp	.+54     	; 0xcd4a <save_globals+0x144>
    cd14:	8f b7       	in	r24, 0x3f	; 63
    cd16:	8a a3       	std	Y+34, r24	; 0x22
    cd18:	f8 94       	cli
    cd1a:	9a a1       	ldd	r25, Y+34	; 0x22
    cd1c:	80 91 98 28 	lds	r24, 0x2898	; 0x802898 <g_keyBeep_enable>
    cd20:	81 11       	cpse	r24, r1
    cd22:	82 e0       	ldi	r24, 0x02	; 2
    cd24:	20 91 99 28 	lds	r18, 0x2899	; 0x802899 <g_errorBeep_enable>
    cd28:	82 2b       	or	r24, r18
    cd2a:	89 83       	std	Y+1, r24	; 0x01
    cd2c:	9f bf       	out	0x3f, r25	; 63
    cd2e:	e1 2c       	mov	r14, r1
    cd30:	f1 2c       	mov	r15, r1
    cd32:	87 01       	movw	r16, r14
    cd34:	e3 94       	inc	r14
    cd36:	9e 01       	movw	r18, r28
    cd38:	2f 5f       	subi	r18, 0xFF	; 255
    cd3a:	3f 4f       	sbci	r19, 0xFF	; 255
    cd3c:	46 e1       	ldi	r20, 0x16	; 22
    cd3e:	50 e0       	ldi	r21, 0x00	; 0
    cd40:	60 e0       	ldi	r22, 0x00	; 0
    cd42:	70 e0       	ldi	r23, 0x00	; 0
    cd44:	82 e0       	ldi	r24, 0x02	; 2
    cd46:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cd4a:	93 fe       	sbrs	r9, 3
    cd4c:	16 c0       	rjmp	.+44     	; 0xcd7a <save_globals+0x174>
    cd4e:	8f b7       	in	r24, 0x3f	; 63
    cd50:	89 a3       	std	Y+33, r24	; 0x21
    cd52:	f8 94       	cli
    cd54:	89 a1       	ldd	r24, Y+33	; 0x21
    cd56:	90 91 9a 28 	lds	r25, 0x289A	; 0x80289a <g_pitch_tone_mode>
    cd5a:	99 83       	std	Y+1, r25	; 0x01
    cd5c:	8f bf       	out	0x3f, r24	; 63
    cd5e:	e1 2c       	mov	r14, r1
    cd60:	f1 2c       	mov	r15, r1
    cd62:	87 01       	movw	r16, r14
    cd64:	e3 94       	inc	r14
    cd66:	9e 01       	movw	r18, r28
    cd68:	2f 5f       	subi	r18, 0xFF	; 255
    cd6a:	3f 4f       	sbci	r19, 0xFF	; 255
    cd6c:	47 e1       	ldi	r20, 0x17	; 23
    cd6e:	50 e0       	ldi	r21, 0x00	; 0
    cd70:	60 e0       	ldi	r22, 0x00	; 0
    cd72:	70 e0       	ldi	r23, 0x00	; 0
    cd74:	82 e0       	ldi	r24, 0x02	; 2
    cd76:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cd7a:	94 fe       	sbrs	r9, 4
    cd7c:	1b c0       	rjmp	.+54     	; 0xcdb4 <save_globals+0x1ae>
    cd7e:	8f b7       	in	r24, 0x3f	; 63
    cd80:	88 a3       	std	Y+32, r24	; 0x20
    cd82:	f8 94       	cli
    cd84:	98 a1       	ldd	r25, Y+32	; 0x20
    cd86:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <g_usb_cdc_printStatusLines_sim808>
    cd8a:	81 11       	cpse	r24, r1
    cd8c:	82 e0       	ldi	r24, 0x02	; 2
    cd8e:	20 91 83 28 	lds	r18, 0x2883	; 0x802883 <g_usb_cdc_printStatusLines_atxmega>
    cd92:	82 2b       	or	r24, r18
    cd94:	89 83       	std	Y+1, r24	; 0x01
    cd96:	9f bf       	out	0x3f, r25	; 63
    cd98:	e1 2c       	mov	r14, r1
    cd9a:	f1 2c       	mov	r15, r1
    cd9c:	87 01       	movw	r16, r14
    cd9e:	e3 94       	inc	r14
    cda0:	9e 01       	movw	r18, r28
    cda2:	2f 5f       	subi	r18, 0xFF	; 255
    cda4:	3f 4f       	sbci	r19, 0xFF	; 255
    cda6:	48 e1       	ldi	r20, 0x18	; 24
    cda8:	50 e0       	ldi	r21, 0x00	; 0
    cdaa:	60 e0       	ldi	r22, 0x00	; 0
    cdac:	70 e0       	ldi	r23, 0x00	; 0
    cdae:	82 e0       	ldi	r24, 0x02	; 2
    cdb0:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cdb4:	95 fe       	sbrs	r9, 5
    cdb6:	ea c0       	rjmp	.+468    	; 0xcf8c <save_globals+0x386>
    cdb8:	8f b7       	in	r24, 0x3f	; 63
    cdba:	8f 8f       	std	Y+31, r24	; 0x1f
    cdbc:	f8 94       	cli
    cdbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    cdc0:	20 91 6e 27 	lds	r18, 0x276E	; 0x80276e <g_twi1_gyro_1_temp_RTofs>
    cdc4:	30 91 6f 27 	lds	r19, 0x276F	; 0x80276f <g_twi1_gyro_1_temp_RTofs+0x1>
    cdc8:	2d 8f       	std	Y+29, r18	; 0x1d
    cdca:	3e 8f       	std	Y+30, r19	; 0x1e
    cdcc:	20 91 6c 27 	lds	r18, 0x276C	; 0x80276c <g_twi1_gyro_1_temp_sens>
    cdd0:	30 91 6d 27 	lds	r19, 0x276D	; 0x80276d <g_twi1_gyro_1_temp_sens+0x1>
    cdd4:	2b 8f       	std	Y+27, r18	; 0x1b
    cdd6:	3c 8f       	std	Y+28, r19	; 0x1c
    cdd8:	20 91 62 27 	lds	r18, 0x2762	; 0x802762 <g_twi1_gyro_1_accel_ofsx>
    cddc:	30 91 63 27 	lds	r19, 0x2763	; 0x802763 <g_twi1_gyro_1_accel_ofsx+0x1>
    cde0:	29 8f       	std	Y+25, r18	; 0x19
    cde2:	3a 8f       	std	Y+26, r19	; 0x1a
    cde4:	20 91 60 27 	lds	r18, 0x2760	; 0x802760 <g_twi1_gyro_1_accel_ofsy>
    cde8:	30 91 61 27 	lds	r19, 0x2761	; 0x802761 <g_twi1_gyro_1_accel_ofsy+0x1>
    cdec:	2f 8b       	std	Y+23, r18	; 0x17
    cdee:	38 8f       	std	Y+24, r19	; 0x18
    cdf0:	20 91 5e 27 	lds	r18, 0x275E	; 0x80275e <g_twi1_gyro_1_accel_ofsz>
    cdf4:	30 91 5f 27 	lds	r19, 0x275F	; 0x80275f <g_twi1_gyro_1_accel_ofsz+0x1>
    cdf8:	2d 8b       	std	Y+21, r18	; 0x15
    cdfa:	3e 8b       	std	Y+22, r19	; 0x16
    cdfc:	20 91 5c 27 	lds	r18, 0x275C	; 0x80275c <g_twi1_gyro_1_accel_factx>
    ce00:	30 91 5d 27 	lds	r19, 0x275D	; 0x80275d <g_twi1_gyro_1_accel_factx+0x1>
    ce04:	2b 8b       	std	Y+19, r18	; 0x13
    ce06:	3c 8b       	std	Y+20, r19	; 0x14
    ce08:	20 91 5a 27 	lds	r18, 0x275A	; 0x80275a <g_twi1_gyro_1_accel_facty>
    ce0c:	30 91 5b 27 	lds	r19, 0x275B	; 0x80275b <g_twi1_gyro_1_accel_facty+0x1>
    ce10:	29 8b       	std	Y+17, r18	; 0x11
    ce12:	3a 8b       	std	Y+18, r19	; 0x12
    ce14:	20 91 58 27 	lds	r18, 0x2758	; 0x802758 <g_twi1_gyro_1_accel_factz>
    ce18:	30 91 59 27 	lds	r19, 0x2759	; 0x802759 <g_twi1_gyro_1_accel_factz+0x1>
    ce1c:	2f 87       	std	Y+15, r18	; 0x0f
    ce1e:	38 8b       	std	Y+16, r19	; 0x10
    ce20:	20 91 4a 27 	lds	r18, 0x274A	; 0x80274a <g_twi1_gyro_1_gyro_ofsx>
    ce24:	30 91 4b 27 	lds	r19, 0x274B	; 0x80274b <g_twi1_gyro_1_gyro_ofsx+0x1>
    ce28:	2d 87       	std	Y+13, r18	; 0x0d
    ce2a:	3e 87       	std	Y+14, r19	; 0x0e
    ce2c:	20 91 48 27 	lds	r18, 0x2748	; 0x802748 <g_twi1_gyro_1_gyro_ofsy>
    ce30:	30 91 49 27 	lds	r19, 0x2749	; 0x802749 <g_twi1_gyro_1_gyro_ofsy+0x1>
    ce34:	2b 87       	std	Y+11, r18	; 0x0b
    ce36:	3c 87       	std	Y+12, r19	; 0x0c
    ce38:	20 91 46 27 	lds	r18, 0x2746	; 0x802746 <g_twi1_gyro_1_gyro_ofsz>
    ce3c:	30 91 47 27 	lds	r19, 0x2747	; 0x802747 <g_twi1_gyro_1_gyro_ofsz+0x1>
    ce40:	29 87       	std	Y+9, r18	; 0x09
    ce42:	3a 87       	std	Y+10, r19	; 0x0a
    ce44:	20 91 27 27 	lds	r18, 0x2727	; 0x802727 <g_twi1_gyro_2_mag_factx>
    ce48:	30 91 28 27 	lds	r19, 0x2728	; 0x802728 <g_twi1_gyro_2_mag_factx+0x1>
    ce4c:	2f 83       	std	Y+7, r18	; 0x07
    ce4e:	38 87       	std	Y+8, r19	; 0x08
    ce50:	20 91 25 27 	lds	r18, 0x2725	; 0x802725 <g_twi1_gyro_2_mag_facty>
    ce54:	30 91 26 27 	lds	r19, 0x2726	; 0x802726 <g_twi1_gyro_2_mag_facty+0x1>
    ce58:	2d 83       	std	Y+5, r18	; 0x05
    ce5a:	3e 83       	std	Y+6, r19	; 0x06
    ce5c:	20 91 23 27 	lds	r18, 0x2723	; 0x802723 <g_twi1_gyro_2_mag_factz>
    ce60:	30 91 24 27 	lds	r19, 0x2724	; 0x802724 <g_twi1_gyro_2_mag_factz+0x1>
    ce64:	29 83       	std	Y+1, r18	; 0x01
    ce66:	3a 83       	std	Y+2, r19	; 0x02
    ce68:	8f bf       	out	0x3f, r24	; 63
    ce6a:	12 e0       	ldi	r17, 0x02	; 2
    ce6c:	e1 2e       	mov	r14, r17
    ce6e:	f1 2c       	mov	r15, r1
    ce70:	00 e0       	ldi	r16, 0x00	; 0
    ce72:	10 e0       	ldi	r17, 0x00	; 0
    ce74:	9e 01       	movw	r18, r28
    ce76:	23 5e       	subi	r18, 0xE3	; 227
    ce78:	3f 4f       	sbci	r19, 0xFF	; 255
    ce7a:	4c e1       	ldi	r20, 0x1C	; 28
    ce7c:	50 e0       	ldi	r21, 0x00	; 0
    ce7e:	60 e0       	ldi	r22, 0x00	; 0
    ce80:	70 e0       	ldi	r23, 0x00	; 0
    ce82:	82 e0       	ldi	r24, 0x02	; 2
    ce84:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    ce88:	9e 01       	movw	r18, r28
    ce8a:	25 5e       	subi	r18, 0xE5	; 229
    ce8c:	3f 4f       	sbci	r19, 0xFF	; 255
    ce8e:	4e e1       	ldi	r20, 0x1E	; 30
    ce90:	50 e0       	ldi	r21, 0x00	; 0
    ce92:	60 e0       	ldi	r22, 0x00	; 0
    ce94:	70 e0       	ldi	r23, 0x00	; 0
    ce96:	82 e0       	ldi	r24, 0x02	; 2
    ce98:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    ce9c:	9e 01       	movw	r18, r28
    ce9e:	27 5e       	subi	r18, 0xE7	; 231
    cea0:	3f 4f       	sbci	r19, 0xFF	; 255
    cea2:	40 e2       	ldi	r20, 0x20	; 32
    cea4:	50 e0       	ldi	r21, 0x00	; 0
    cea6:	60 e0       	ldi	r22, 0x00	; 0
    cea8:	70 e0       	ldi	r23, 0x00	; 0
    ceaa:	82 e0       	ldi	r24, 0x02	; 2
    ceac:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    ceb0:	9e 01       	movw	r18, r28
    ceb2:	29 5e       	subi	r18, 0xE9	; 233
    ceb4:	3f 4f       	sbci	r19, 0xFF	; 255
    ceb6:	42 e2       	ldi	r20, 0x22	; 34
    ceb8:	50 e0       	ldi	r21, 0x00	; 0
    ceba:	60 e0       	ldi	r22, 0x00	; 0
    cebc:	70 e0       	ldi	r23, 0x00	; 0
    cebe:	82 e0       	ldi	r24, 0x02	; 2
    cec0:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cec4:	9e 01       	movw	r18, r28
    cec6:	2b 5e       	subi	r18, 0xEB	; 235
    cec8:	3f 4f       	sbci	r19, 0xFF	; 255
    ceca:	44 e2       	ldi	r20, 0x24	; 36
    cecc:	50 e0       	ldi	r21, 0x00	; 0
    cece:	60 e0       	ldi	r22, 0x00	; 0
    ced0:	70 e0       	ldi	r23, 0x00	; 0
    ced2:	82 e0       	ldi	r24, 0x02	; 2
    ced4:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    ced8:	9e 01       	movw	r18, r28
    ceda:	2d 5e       	subi	r18, 0xED	; 237
    cedc:	3f 4f       	sbci	r19, 0xFF	; 255
    cede:	48 e2       	ldi	r20, 0x28	; 40
    cee0:	50 e0       	ldi	r21, 0x00	; 0
    cee2:	60 e0       	ldi	r22, 0x00	; 0
    cee4:	70 e0       	ldi	r23, 0x00	; 0
    cee6:	82 e0       	ldi	r24, 0x02	; 2
    cee8:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    ceec:	9e 01       	movw	r18, r28
    ceee:	2f 5e       	subi	r18, 0xEF	; 239
    cef0:	3f 4f       	sbci	r19, 0xFF	; 255
    cef2:	4a e2       	ldi	r20, 0x2A	; 42
    cef4:	50 e0       	ldi	r21, 0x00	; 0
    cef6:	60 e0       	ldi	r22, 0x00	; 0
    cef8:	70 e0       	ldi	r23, 0x00	; 0
    cefa:	82 e0       	ldi	r24, 0x02	; 2
    cefc:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cf00:	9e 01       	movw	r18, r28
    cf02:	21 5f       	subi	r18, 0xF1	; 241
    cf04:	3f 4f       	sbci	r19, 0xFF	; 255
    cf06:	4c e2       	ldi	r20, 0x2C	; 44
    cf08:	50 e0       	ldi	r21, 0x00	; 0
    cf0a:	60 e0       	ldi	r22, 0x00	; 0
    cf0c:	70 e0       	ldi	r23, 0x00	; 0
    cf0e:	82 e0       	ldi	r24, 0x02	; 2
    cf10:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cf14:	9e 01       	movw	r18, r28
    cf16:	23 5f       	subi	r18, 0xF3	; 243
    cf18:	3f 4f       	sbci	r19, 0xFF	; 255
    cf1a:	40 e3       	ldi	r20, 0x30	; 48
    cf1c:	50 e0       	ldi	r21, 0x00	; 0
    cf1e:	60 e0       	ldi	r22, 0x00	; 0
    cf20:	70 e0       	ldi	r23, 0x00	; 0
    cf22:	82 e0       	ldi	r24, 0x02	; 2
    cf24:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cf28:	9e 01       	movw	r18, r28
    cf2a:	25 5f       	subi	r18, 0xF5	; 245
    cf2c:	3f 4f       	sbci	r19, 0xFF	; 255
    cf2e:	42 e3       	ldi	r20, 0x32	; 50
    cf30:	50 e0       	ldi	r21, 0x00	; 0
    cf32:	60 e0       	ldi	r22, 0x00	; 0
    cf34:	70 e0       	ldi	r23, 0x00	; 0
    cf36:	82 e0       	ldi	r24, 0x02	; 2
    cf38:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cf3c:	9e 01       	movw	r18, r28
    cf3e:	27 5f       	subi	r18, 0xF7	; 247
    cf40:	3f 4f       	sbci	r19, 0xFF	; 255
    cf42:	44 e3       	ldi	r20, 0x34	; 52
    cf44:	50 e0       	ldi	r21, 0x00	; 0
    cf46:	60 e0       	ldi	r22, 0x00	; 0
    cf48:	70 e0       	ldi	r23, 0x00	; 0
    cf4a:	82 e0       	ldi	r24, 0x02	; 2
    cf4c:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cf50:	9e 01       	movw	r18, r28
    cf52:	29 5f       	subi	r18, 0xF9	; 249
    cf54:	3f 4f       	sbci	r19, 0xFF	; 255
    cf56:	48 e4       	ldi	r20, 0x48	; 72
    cf58:	50 e0       	ldi	r21, 0x00	; 0
    cf5a:	60 e0       	ldi	r22, 0x00	; 0
    cf5c:	70 e0       	ldi	r23, 0x00	; 0
    cf5e:	82 e0       	ldi	r24, 0x02	; 2
    cf60:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cf64:	9e 01       	movw	r18, r28
    cf66:	2b 5f       	subi	r18, 0xFB	; 251
    cf68:	3f 4f       	sbci	r19, 0xFF	; 255
    cf6a:	4a e4       	ldi	r20, 0x4A	; 74
    cf6c:	50 e0       	ldi	r21, 0x00	; 0
    cf6e:	60 e0       	ldi	r22, 0x00	; 0
    cf70:	70 e0       	ldi	r23, 0x00	; 0
    cf72:	82 e0       	ldi	r24, 0x02	; 2
    cf74:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cf78:	9e 01       	movw	r18, r28
    cf7a:	2f 5f       	subi	r18, 0xFF	; 255
    cf7c:	3f 4f       	sbci	r19, 0xFF	; 255
    cf7e:	4c e4       	ldi	r20, 0x4C	; 76
    cf80:	50 e0       	ldi	r21, 0x00	; 0
    cf82:	60 e0       	ldi	r22, 0x00	; 0
    cf84:	70 e0       	ldi	r23, 0x00	; 0
    cf86:	82 e0       	ldi	r24, 0x02	; 2
    cf88:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <nvm_write>
    cf8c:	a4 96       	adiw	r28, 0x24	; 36
    cf8e:	cd bf       	out	0x3d, r28	; 61
    cf90:	de bf       	out	0x3e, r29	; 62
    cf92:	df 91       	pop	r29
    cf94:	cf 91       	pop	r28
    cf96:	1f 91       	pop	r17
    cf98:	0f 91       	pop	r16
    cf9a:	ff 90       	pop	r15
    cf9c:	ef 90       	pop	r14
    cf9e:	df 90       	pop	r13
    cfa0:	cf 90       	pop	r12
    cfa2:	bf 90       	pop	r11
    cfa4:	af 90       	pop	r10
    cfa6:	9f 90       	pop	r9
    cfa8:	7f 90       	pop	r7
    cfaa:	6f 90       	pop	r6
    cfac:	5f 90       	pop	r5
    cfae:	4f 90       	pop	r4
    cfb0:	08 95       	ret

0000cfb2 <myStringToVar>:
    cfb2:	2f 92       	push	r2
    cfb4:	3f 92       	push	r3
    cfb6:	4f 92       	push	r4
    cfb8:	5f 92       	push	r5
    cfba:	6f 92       	push	r6
    cfbc:	7f 92       	push	r7
    cfbe:	8f 92       	push	r8
    cfc0:	9f 92       	push	r9
    cfc2:	af 92       	push	r10
    cfc4:	bf 92       	push	r11
    cfc6:	cf 92       	push	r12
    cfc8:	df 92       	push	r13
    cfca:	ef 92       	push	r14
    cfcc:	ff 92       	push	r15
    cfce:	0f 93       	push	r16
    cfd0:	1f 93       	push	r17
    cfd2:	cf 93       	push	r28
    cfd4:	df 93       	push	r29
    cfd6:	00 d0       	rcall	.+0      	; 0xcfd8 <myStringToVar+0x26>
    cfd8:	1f 92       	push	r1
    cfda:	cd b7       	in	r28, 0x3d	; 61
    cfdc:	de b7       	in	r29, 0x3e	; 62
    cfde:	6c 01       	movw	r12, r24
    cfe0:	4a 01       	movw	r8, r20
    cfe2:	5b 01       	movw	r10, r22
    cfe4:	29 83       	std	Y+1, r18	; 0x01
    cfe6:	3a 83       	std	Y+2, r19	; 0x02
    cfe8:	18 01       	movw	r2, r16
    cfea:	27 01       	movw	r4, r14
    cfec:	84 2f       	mov	r24, r20
    cfee:	83 70       	andi	r24, 0x03	; 3
    cff0:	09 f4       	brne	.+2      	; 0xcff4 <myStringToVar+0x42>
    cff2:	66 c0       	rjmp	.+204    	; 0xd0c0 <myStringToVar+0x10e>
    cff4:	1b 82       	std	Y+3, r1	; 0x03
    cff6:	1c 82       	std	Y+4, r1	; 0x04
    cff8:	61 2c       	mov	r6, r1
    cffa:	71 2c       	mov	r7, r1
    cffc:	eb 80       	ldd	r14, Y+3	; 0x03
    cffe:	fc 80       	ldd	r15, Y+4	; 0x04
    d000:	ec 0c       	add	r14, r12
    d002:	fd 1c       	adc	r15, r13
    d004:	82 30       	cpi	r24, 0x02	; 2
    d006:	e1 f0       	breq	.+56     	; 0xd040 <myStringToVar+0x8e>
    d008:	83 30       	cpi	r24, 0x03	; 3
    d00a:	69 f1       	breq	.+90     	; 0xd066 <myStringToVar+0xb4>
    d00c:	81 30       	cpi	r24, 0x01	; 1
    d00e:	09 f0       	breq	.+2      	; 0xd012 <myStringToVar+0x60>
    d010:	59 c0       	rjmp	.+178    	; 0xd0c4 <myStringToVar+0x112>
    d012:	29 81       	ldd	r18, Y+1	; 0x01
    d014:	3a 81       	ldd	r19, Y+2	; 0x02
    d016:	21 15       	cp	r18, r1
    d018:	31 05       	cpc	r19, r1
    d01a:	a9 f1       	breq	.+106    	; 0xd086 <myStringToVar+0xd4>
    d01c:	89 01       	movw	r16, r18
    d01e:	0c 5f       	subi	r16, 0xFC	; 252
    d020:	1f 4f       	sbci	r17, 0xFF	; 255
    d022:	c7 01       	movw	r24, r14
    d024:	0e 94 75 87 	call	0x10eea	; 0x10eea <atof>
    d028:	e9 81       	ldd	r30, Y+1	; 0x01
    d02a:	fa 81       	ldd	r31, Y+2	; 0x02
    d02c:	60 83       	st	Z, r22
    d02e:	71 83       	std	Z+1, r23	; 0x01
    d030:	82 83       	std	Z+2, r24	; 0x02
    d032:	93 83       	std	Z+3, r25	; 0x03
    d034:	ff ef       	ldi	r31, 0xFF	; 255
    d036:	6f 1a       	sub	r6, r31
    d038:	7f 0a       	sbc	r7, r31
    d03a:	09 83       	std	Y+1, r16	; 0x01
    d03c:	1a 83       	std	Y+2, r17	; 0x02
    d03e:	23 c0       	rjmp	.+70     	; 0xd086 <myStringToVar+0xd4>
    d040:	21 14       	cp	r2, r1
    d042:	31 04       	cpc	r3, r1
    d044:	01 f1       	breq	.+64     	; 0xd086 <myStringToVar+0xd4>
    d046:	81 01       	movw	r16, r2
    d048:	0c 5f       	subi	r16, 0xFC	; 252
    d04a:	1f 4f       	sbci	r17, 0xFF	; 255
    d04c:	c7 01       	movw	r24, r14
    d04e:	0e 94 95 87 	call	0x10f2a	; 0x10f2a <atol>
    d052:	f1 01       	movw	r30, r2
    d054:	60 83       	st	Z, r22
    d056:	71 83       	std	Z+1, r23	; 0x01
    d058:	82 83       	std	Z+2, r24	; 0x02
    d05a:	93 83       	std	Z+3, r25	; 0x03
    d05c:	ff ef       	ldi	r31, 0xFF	; 255
    d05e:	6f 1a       	sub	r6, r31
    d060:	7f 0a       	sbc	r7, r31
    d062:	18 01       	movw	r2, r16
    d064:	10 c0       	rjmp	.+32     	; 0xd086 <myStringToVar+0xd4>
    d066:	41 14       	cp	r4, r1
    d068:	51 04       	cpc	r5, r1
    d06a:	69 f0       	breq	.+26     	; 0xd086 <myStringToVar+0xd4>
    d06c:	82 01       	movw	r16, r4
    d06e:	0e 5f       	subi	r16, 0xFE	; 254
    d070:	1f 4f       	sbci	r17, 0xFF	; 255
    d072:	c7 01       	movw	r24, r14
    d074:	0e 94 78 87 	call	0x10ef0	; 0x10ef0 <atoi>
    d078:	f2 01       	movw	r30, r4
    d07a:	80 83       	st	Z, r24
    d07c:	91 83       	std	Z+1, r25	; 0x01
    d07e:	ff ef       	ldi	r31, 0xFF	; 255
    d080:	6f 1a       	sub	r6, r31
    d082:	7f 0a       	sbc	r7, r31
    d084:	28 01       	movw	r4, r16
    d086:	6c e2       	ldi	r22, 0x2C	; 44
    d088:	70 e0       	ldi	r23, 0x00	; 0
    d08a:	c7 01       	movw	r24, r14
    d08c:	0e 94 f4 88 	call	0x111e8	; 0x111e8 <strchr>
    d090:	00 97       	sbiw	r24, 0x00	; 0
    d092:	c1 f0       	breq	.+48     	; 0xd0c4 <myStringToVar+0x112>
    d094:	01 96       	adiw	r24, 0x01	; 1
    d096:	8e 19       	sub	r24, r14
    d098:	9f 09       	sbc	r25, r15
    d09a:	2b 81       	ldd	r18, Y+3	; 0x03
    d09c:	3c 81       	ldd	r19, Y+4	; 0x04
    d09e:	28 0f       	add	r18, r24
    d0a0:	39 1f       	adc	r19, r25
    d0a2:	2b 83       	std	Y+3, r18	; 0x03
    d0a4:	3c 83       	std	Y+4, r19	; 0x04
    d0a6:	b6 94       	lsr	r11
    d0a8:	a7 94       	ror	r10
    d0aa:	97 94       	ror	r9
    d0ac:	87 94       	ror	r8
    d0ae:	b6 94       	lsr	r11
    d0b0:	a7 94       	ror	r10
    d0b2:	97 94       	ror	r9
    d0b4:	87 94       	ror	r8
    d0b6:	88 2d       	mov	r24, r8
    d0b8:	83 70       	andi	r24, 0x03	; 3
    d0ba:	09 f0       	breq	.+2      	; 0xd0be <myStringToVar+0x10c>
    d0bc:	9f cf       	rjmp	.-194    	; 0xcffc <myStringToVar+0x4a>
    d0be:	02 c0       	rjmp	.+4      	; 0xd0c4 <myStringToVar+0x112>
    d0c0:	61 2c       	mov	r6, r1
    d0c2:	71 2c       	mov	r7, r1
    d0c4:	c3 01       	movw	r24, r6
    d0c6:	24 96       	adiw	r28, 0x04	; 4
    d0c8:	cd bf       	out	0x3d, r28	; 61
    d0ca:	de bf       	out	0x3e, r29	; 62
    d0cc:	df 91       	pop	r29
    d0ce:	cf 91       	pop	r28
    d0d0:	1f 91       	pop	r17
    d0d2:	0f 91       	pop	r16
    d0d4:	ff 90       	pop	r15
    d0d6:	ef 90       	pop	r14
    d0d8:	df 90       	pop	r13
    d0da:	cf 90       	pop	r12
    d0dc:	bf 90       	pop	r11
    d0de:	af 90       	pop	r10
    d0e0:	9f 90       	pop	r9
    d0e2:	8f 90       	pop	r8
    d0e4:	7f 90       	pop	r7
    d0e6:	6f 90       	pop	r6
    d0e8:	5f 90       	pop	r5
    d0ea:	4f 90       	pop	r4
    d0ec:	3f 90       	pop	r3
    d0ee:	2f 90       	pop	r2
    d0f0:	08 95       	ret

0000d0f2 <adc_app_enable>:
    d0f2:	cf 93       	push	r28
    d0f4:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <g_adc_enabled>
    d0f8:	98 17       	cp	r25, r24
    d0fa:	e1 f0       	breq	.+56     	; 0xd134 <adc_app_enable+0x42>
    d0fc:	c8 2f       	mov	r28, r24
    d0fe:	88 23       	and	r24, r24
    d100:	61 f0       	breq	.+24     	; 0xd11a <adc_app_enable+0x28>
    d102:	33 da       	rcall	.-2970   	; 0xc56a <tc_init>
    d104:	41 dc       	rcall	.-1918   	; 0xc988 <adc_init>
    d106:	93 da       	rcall	.-2778   	; 0xc62e <tc_start>
    d108:	80 e0       	ldi	r24, 0x00	; 0
    d10a:	92 e0       	ldi	r25, 0x02	; 2
    d10c:	0e 94 37 48 	call	0x906e	; 0x906e <adc_enable>
    d110:	80 e4       	ldi	r24, 0x40	; 64
    d112:	92 e0       	ldi	r25, 0x02	; 2
    d114:	0e 94 37 48 	call	0x906e	; 0x906e <adc_enable>
    d118:	08 c0       	rjmp	.+16     	; 0xd12a <adc_app_enable+0x38>
    d11a:	80 e0       	ldi	r24, 0x00	; 0
    d11c:	92 e0       	ldi	r25, 0x02	; 2
    d11e:	0e 94 63 48 	call	0x90c6	; 0x90c6 <adc_disable>
    d122:	80 e4       	ldi	r24, 0x40	; 64
    d124:	92 e0       	ldi	r25, 0x02	; 2
    d126:	0e 94 63 48 	call	0x90c6	; 0x90c6 <adc_disable>
    d12a:	c0 93 40 20 	sts	0x2040, r28	; 0x802040 <g_adc_enabled>
    d12e:	81 e0       	ldi	r24, 0x01	; 1
    d130:	80 93 e8 26 	sts	0x26E8, r24	; 0x8026e8 <g_twi2_lcd_repaint>
    d134:	cf 91       	pop	r28
    d136:	08 95       	ret

0000d138 <backlight_mode_pwm>:
    d138:	cf 93       	push	r28
    d13a:	df 93       	push	r29
    d13c:	ec 01       	movw	r28, r24
    d13e:	80 93 9b 28 	sts	0x289B, r24	; 0x80289b <g_backlight_mode_pwm>
    d142:	90 93 9c 28 	sts	0x289C, r25	; 0x80289c <g_backlight_mode_pwm+0x1>
    d146:	82 e0       	ldi	r24, 0x02	; 2
    d148:	5e dd       	rcall	.-1348   	; 0xcc06 <save_globals>
    d14a:	ce 3f       	cpi	r28, 0xFE	; 254
    d14c:	8f ef       	ldi	r24, 0xFF	; 255
    d14e:	d8 07       	cpc	r29, r24
    d150:	69 f0       	breq	.+26     	; 0xd16c <backlight_mode_pwm+0x34>
    d152:	cf 3f       	cpi	r28, 0xFF	; 255
    d154:	8f ef       	ldi	r24, 0xFF	; 255
    d156:	d8 07       	cpc	r29, r24
    d158:	29 f4       	brne	.+10     	; 0xd164 <backlight_mode_pwm+0x2c>
    d15a:	60 e0       	ldi	r22, 0x00	; 0
    d15c:	81 e0       	ldi	r24, 0x01	; 1
    d15e:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <twi2_set_ledbl>
    d162:	04 c0       	rjmp	.+8      	; 0xd16c <backlight_mode_pwm+0x34>
    d164:	6c 2f       	mov	r22, r28
    d166:	80 e0       	ldi	r24, 0x00	; 0
    d168:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <twi2_set_ledbl>
    d16c:	df 91       	pop	r29
    d16e:	cf 91       	pop	r28
    d170:	08 95       	ret

0000d172 <bias_update>:
    d172:	8f 73       	andi	r24, 0x3F	; 63
    d174:	80 93 3f 20 	sts	0x203F, r24	; 0x80203f <g_bias_pm>
    d178:	0c 94 f4 34 	jmp	0x69e8	; 0x69e8 <twi2_set_bias>
    d17c:	08 95       	ret

0000d17e <calibration_mode>:
    d17e:	cf 93       	push	r28
    d180:	df 93       	push	r29
    d182:	1f 92       	push	r1
    d184:	1f 92       	push	r1
    d186:	cd b7       	in	r28, 0x3d	; 61
    d188:	de b7       	in	r29, 0x3e	; 62
    d18a:	88 23       	and	r24, r24
    d18c:	21 f0       	breq	.+8      	; 0xd196 <calibration_mode+0x18>
    d18e:	81 30       	cpi	r24, 0x01	; 1
    d190:	09 f4       	brne	.+2      	; 0xd194 <calibration_mode+0x16>
    d192:	5c c0       	rjmp	.+184    	; 0xd24c <calibration_mode+0xce>
    d194:	9b c0       	rjmp	.+310    	; 0xd2cc <calibration_mode+0x14e>
    d196:	8f b7       	in	r24, 0x3f	; 63
    d198:	8a 83       	std	Y+2, r24	; 0x02
    d19a:	f8 94       	cli
    d19c:	2a 81       	ldd	r18, Y+2	; 0x02
    d19e:	10 92 6e 27 	sts	0x276E, r1	; 0x80276e <g_twi1_gyro_1_temp_RTofs>
    d1a2:	10 92 6f 27 	sts	0x276F, r1	; 0x80276f <g_twi1_gyro_1_temp_RTofs+0x1>
    d1a6:	8d e9       	ldi	r24, 0x9D	; 157
    d1a8:	91 e0       	ldi	r25, 0x01	; 1
    d1aa:	80 93 6c 27 	sts	0x276C, r24	; 0x80276c <g_twi1_gyro_1_temp_sens>
    d1ae:	90 93 6d 27 	sts	0x276D, r25	; 0x80276d <g_twi1_gyro_1_temp_sens+0x1>
    d1b2:	8b e9       	ldi	r24, 0x9B	; 155
    d1b4:	94 ef       	ldi	r25, 0xF4	; 244
    d1b6:	80 93 62 27 	sts	0x2762, r24	; 0x802762 <g_twi1_gyro_1_accel_ofsx>
    d1ba:	90 93 63 27 	sts	0x2763, r25	; 0x802763 <g_twi1_gyro_1_accel_ofsx+0x1>
    d1be:	8a e0       	ldi	r24, 0x0A	; 10
    d1c0:	9a e0       	ldi	r25, 0x0A	; 10
    d1c2:	80 93 60 27 	sts	0x2760, r24	; 0x802760 <g_twi1_gyro_1_accel_ofsy>
    d1c6:	90 93 61 27 	sts	0x2761, r25	; 0x802761 <g_twi1_gyro_1_accel_ofsy+0x1>
    d1ca:	88 eb       	ldi	r24, 0xB8	; 184
    d1cc:	92 e1       	ldi	r25, 0x12	; 18
    d1ce:	80 93 5e 27 	sts	0x275E, r24	; 0x80275e <g_twi1_gyro_1_accel_ofsz>
    d1d2:	90 93 5f 27 	sts	0x275F, r25	; 0x80275f <g_twi1_gyro_1_accel_ofsz+0x1>
    d1d6:	8c ef       	ldi	r24, 0xFC	; 252
    d1d8:	96 e2       	ldi	r25, 0x26	; 38
    d1da:	80 93 5c 27 	sts	0x275C, r24	; 0x80275c <g_twi1_gyro_1_accel_factx>
    d1de:	90 93 5d 27 	sts	0x275D, r25	; 0x80275d <g_twi1_gyro_1_accel_factx+0x1>
    d1e2:	87 ef       	ldi	r24, 0xF7	; 247
    d1e4:	96 e2       	ldi	r25, 0x26	; 38
    d1e6:	80 93 5a 27 	sts	0x275A, r24	; 0x80275a <g_twi1_gyro_1_accel_facty>
    d1ea:	90 93 5b 27 	sts	0x275B, r25	; 0x80275b <g_twi1_gyro_1_accel_facty+0x1>
    d1ee:	8e ed       	ldi	r24, 0xDE	; 222
    d1f0:	96 e2       	ldi	r25, 0x26	; 38
    d1f2:	80 93 58 27 	sts	0x2758, r24	; 0x802758 <g_twi1_gyro_1_accel_factz>
    d1f6:	90 93 59 27 	sts	0x2759, r25	; 0x802759 <g_twi1_gyro_1_accel_factz+0x1>
    d1fa:	88 ef       	ldi	r24, 0xF8	; 248
    d1fc:	9f ef       	ldi	r25, 0xFF	; 255
    d1fe:	80 93 4a 27 	sts	0x274A, r24	; 0x80274a <g_twi1_gyro_1_gyro_ofsx>
    d202:	90 93 4b 27 	sts	0x274B, r25	; 0x80274b <g_twi1_gyro_1_gyro_ofsx+0x1>
    d206:	8c ee       	ldi	r24, 0xEC	; 236
    d208:	9f ef       	ldi	r25, 0xFF	; 255
    d20a:	80 93 48 27 	sts	0x2748, r24	; 0x802748 <g_twi1_gyro_1_gyro_ofsy>
    d20e:	90 93 49 27 	sts	0x2749, r25	; 0x802749 <g_twi1_gyro_1_gyro_ofsy+0x1>
    d212:	85 e2       	ldi	r24, 0x25	; 37
    d214:	90 e0       	ldi	r25, 0x00	; 0
    d216:	80 93 46 27 	sts	0x2746, r24	; 0x802746 <g_twi1_gyro_1_gyro_ofsz>
    d21a:	90 93 47 27 	sts	0x2747, r25	; 0x802747 <g_twi1_gyro_1_gyro_ofsz+0x1>
    d21e:	82 e2       	ldi	r24, 0x22	; 34
    d220:	94 e2       	ldi	r25, 0x24	; 36
    d222:	80 93 27 27 	sts	0x2727, r24	; 0x802727 <g_twi1_gyro_2_mag_factx>
    d226:	90 93 28 27 	sts	0x2728, r25	; 0x802728 <g_twi1_gyro_2_mag_factx+0x1>
    d22a:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <g_twi1_gyro_2_mag_facty>
    d22e:	90 93 26 27 	sts	0x2726, r25	; 0x802726 <g_twi1_gyro_2_mag_facty+0x1>
    d232:	88 e6       	ldi	r24, 0x68	; 104
    d234:	98 e3       	ldi	r25, 0x38	; 56
    d236:	80 93 23 27 	sts	0x2723, r24	; 0x802723 <g_twi1_gyro_2_mag_factz>
    d23a:	90 93 24 27 	sts	0x2724, r25	; 0x802724 <g_twi1_gyro_2_mag_factz+0x1>
    d23e:	81 e0       	ldi	r24, 0x01	; 1
    d240:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <g_twi1_gyro_gyro_offset_set__flag>
    d244:	2f bf       	out	0x3f, r18	; 63
    d246:	80 e2       	ldi	r24, 0x20	; 32
    d248:	de dc       	rcall	.-1604   	; 0xcc06 <save_globals>
    d24a:	40 c0       	rjmp	.+128    	; 0xd2cc <calibration_mode+0x14e>
    d24c:	8f b7       	in	r24, 0x3f	; 63
    d24e:	89 83       	std	Y+1, r24	; 0x01
    d250:	f8 94       	cli
    d252:	49 81       	ldd	r20, Y+1	; 0x01
    d254:	20 91 50 27 	lds	r18, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_x>
    d258:	30 91 51 27 	lds	r19, 0x2751	; 0x802751 <g_twi1_gyro_1_gyro_x+0x1>
    d25c:	80 91 4a 27 	lds	r24, 0x274A	; 0x80274a <g_twi1_gyro_1_gyro_ofsx>
    d260:	90 91 4b 27 	lds	r25, 0x274B	; 0x80274b <g_twi1_gyro_1_gyro_ofsx+0x1>
    d264:	35 95       	asr	r19
    d266:	27 95       	ror	r18
    d268:	35 95       	asr	r19
    d26a:	27 95       	ror	r18
    d26c:	82 1b       	sub	r24, r18
    d26e:	93 0b       	sbc	r25, r19
    d270:	80 93 4a 27 	sts	0x274A, r24	; 0x80274a <g_twi1_gyro_1_gyro_ofsx>
    d274:	90 93 4b 27 	sts	0x274B, r25	; 0x80274b <g_twi1_gyro_1_gyro_ofsx+0x1>
    d278:	20 91 4e 27 	lds	r18, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_y>
    d27c:	30 91 4f 27 	lds	r19, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_y+0x1>
    d280:	80 91 48 27 	lds	r24, 0x2748	; 0x802748 <g_twi1_gyro_1_gyro_ofsy>
    d284:	90 91 49 27 	lds	r25, 0x2749	; 0x802749 <g_twi1_gyro_1_gyro_ofsy+0x1>
    d288:	35 95       	asr	r19
    d28a:	27 95       	ror	r18
    d28c:	35 95       	asr	r19
    d28e:	27 95       	ror	r18
    d290:	82 1b       	sub	r24, r18
    d292:	93 0b       	sbc	r25, r19
    d294:	80 93 48 27 	sts	0x2748, r24	; 0x802748 <g_twi1_gyro_1_gyro_ofsy>
    d298:	90 93 49 27 	sts	0x2749, r25	; 0x802749 <g_twi1_gyro_1_gyro_ofsy+0x1>
    d29c:	20 91 4c 27 	lds	r18, 0x274C	; 0x80274c <g_twi1_gyro_1_gyro_z>
    d2a0:	30 91 4d 27 	lds	r19, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_z+0x1>
    d2a4:	80 91 46 27 	lds	r24, 0x2746	; 0x802746 <g_twi1_gyro_1_gyro_ofsz>
    d2a8:	90 91 47 27 	lds	r25, 0x2747	; 0x802747 <g_twi1_gyro_1_gyro_ofsz+0x1>
    d2ac:	35 95       	asr	r19
    d2ae:	27 95       	ror	r18
    d2b0:	35 95       	asr	r19
    d2b2:	27 95       	ror	r18
    d2b4:	82 1b       	sub	r24, r18
    d2b6:	93 0b       	sbc	r25, r19
    d2b8:	80 93 46 27 	sts	0x2746, r24	; 0x802746 <g_twi1_gyro_1_gyro_ofsz>
    d2bc:	90 93 47 27 	sts	0x2747, r25	; 0x802747 <g_twi1_gyro_1_gyro_ofsz+0x1>
    d2c0:	81 e0       	ldi	r24, 0x01	; 1
    d2c2:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <g_twi1_gyro_gyro_offset_set__flag>
    d2c6:	4f bf       	out	0x3f, r20	; 63
    d2c8:	80 e2       	ldi	r24, 0x20	; 32
    d2ca:	9d dc       	rcall	.-1734   	; 0xcc06 <save_globals>
    d2cc:	0f 90       	pop	r0
    d2ce:	0f 90       	pop	r0
    d2d0:	df 91       	pop	r29
    d2d2:	cf 91       	pop	r28
    d2d4:	08 95       	ret

0000d2d6 <dac_app_enable>:
    d2d6:	1f 93       	push	r17
    d2d8:	cf 93       	push	r28
    d2da:	df 93       	push	r29
    d2dc:	1f 92       	push	r1
    d2de:	cd b7       	in	r28, 0x3d	; 61
    d2e0:	de b7       	in	r29, 0x3e	; 62
    d2e2:	90 91 9d 28 	lds	r25, 0x289D	; 0x80289d <g_dac_enabled>
    d2e6:	98 17       	cp	r25, r24
    d2e8:	09 f4       	brne	.+2      	; 0xd2ec <dac_app_enable+0x16>
    d2ea:	40 c0       	rjmp	.+128    	; 0xd36c <dac_app_enable+0x96>
    d2ec:	18 2f       	mov	r17, r24
    d2ee:	88 23       	and	r24, r24
    d2f0:	a9 f1       	breq	.+106    	; 0xd35c <dac_app_enable+0x86>
    d2f2:	8f b7       	in	r24, 0x3f	; 63
    d2f4:	89 83       	std	Y+1, r24	; 0x01
    d2f6:	f8 94       	cli
    d2f8:	89 81       	ldd	r24, Y+1	; 0x01
    d2fa:	40 e8       	ldi	r20, 0x80	; 128
    d2fc:	54 e8       	ldi	r21, 0x84	; 132
    d2fe:	6e e1       	ldi	r22, 0x1E	; 30
    d300:	70 e0       	ldi	r23, 0x00	; 0
    d302:	40 93 13 20 	sts	0x2013, r20	; 0x802013 <dds0_freq_mHz>
    d306:	50 93 14 20 	sts	0x2014, r21	; 0x802014 <dds0_freq_mHz+0x1>
    d30a:	60 93 15 20 	sts	0x2015, r22	; 0x802015 <dds0_freq_mHz+0x2>
    d30e:	70 93 16 20 	sts	0x2016, r23	; 0x802016 <dds0_freq_mHz+0x3>
    d312:	10 92 e9 24 	sts	0x24E9, r1	; 0x8024e9 <dds0_reg>
    d316:	10 92 ea 24 	sts	0x24EA, r1	; 0x8024ea <dds0_reg+0x1>
    d31a:	10 92 eb 24 	sts	0x24EB, r1	; 0x8024eb <dds0_reg+0x2>
    d31e:	10 92 ec 24 	sts	0x24EC, r1	; 0x8024ec <dds0_reg+0x3>
    d322:	4a e0       	ldi	r20, 0x0A	; 10
    d324:	59 e0       	ldi	r21, 0x09	; 9
    d326:	6d e3       	ldi	r22, 0x3D	; 61
    d328:	70 e0       	ldi	r23, 0x00	; 0
    d32a:	40 93 0f 20 	sts	0x200F, r20	; 0x80200f <dds1_freq_mHz>
    d32e:	50 93 10 20 	sts	0x2010, r21	; 0x802010 <dds1_freq_mHz+0x1>
    d332:	60 93 11 20 	sts	0x2011, r22	; 0x802011 <dds1_freq_mHz+0x2>
    d336:	70 93 12 20 	sts	0x2012, r23	; 0x802012 <dds1_freq_mHz+0x3>
    d33a:	40 e0       	ldi	r20, 0x00	; 0
    d33c:	50 e0       	ldi	r21, 0x00	; 0
    d33e:	60 e0       	ldi	r22, 0x00	; 0
    d340:	70 e4       	ldi	r23, 0x40	; 64
    d342:	40 93 0b 20 	sts	0x200B, r20	; 0x80200b <dds1_reg>
    d346:	50 93 0c 20 	sts	0x200C, r21	; 0x80200c <dds1_reg+0x1>
    d34a:	60 93 0d 20 	sts	0x200D, r22	; 0x80200d <dds1_reg+0x2>
    d34e:	70 93 0e 20 	sts	0x200E, r23	; 0x80200e <dds1_reg+0x3>
    d352:	8f bf       	out	0x3f, r24	; 63
    d354:	9b d9       	rcall	.-3274   	; 0xc68c <dac_init>
    d356:	6b d9       	rcall	.-3370   	; 0xc62e <tc_start>
    d358:	62 da       	rcall	.-2876   	; 0xc81e <dac_start>
    d35a:	06 c0       	rjmp	.+12     	; 0xd368 <dac_app_enable+0x92>
    d35c:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <dma_disable>
    d360:	80 e2       	ldi	r24, 0x20	; 32
    d362:	93 e0       	ldi	r25, 0x03	; 3
    d364:	0e 94 9d 4b 	call	0x973a	; 0x973a <dac_disable>
    d368:	10 93 9d 28 	sts	0x289D, r17	; 0x80289d <g_dac_enabled>
    d36c:	0f 90       	pop	r0
    d36e:	df 91       	pop	r29
    d370:	cf 91       	pop	r28
    d372:	1f 91       	pop	r17
    d374:	08 95       	ret

0000d376 <errorBeep_enable>:
    d376:	80 93 99 28 	sts	0x2899, r24	; 0x802899 <g_errorBeep_enable>
    d37a:	84 e0       	ldi	r24, 0x04	; 4
    d37c:	44 cc       	rjmp	.-1912   	; 0xcc06 <save_globals>
    d37e:	08 95       	ret

0000d380 <keyBeep_enable>:
    d380:	80 93 98 28 	sts	0x2898, r24	; 0x802898 <g_keyBeep_enable>
    d384:	84 e0       	ldi	r24, 0x04	; 4
    d386:	3f cc       	rjmp	.-1922   	; 0xcc06 <save_globals>
    d388:	08 95       	ret

0000d38a <pitchTone_mode>:
    d38a:	80 93 9a 28 	sts	0x289A, r24	; 0x80289a <g_pitch_tone_mode>
    d38e:	88 e0       	ldi	r24, 0x08	; 8
    d390:	3a cc       	rjmp	.-1932   	; 0xcc06 <save_globals>
    d392:	08 95       	ret

0000d394 <printStatusLines_bitfield>:
    d394:	91 e0       	ldi	r25, 0x01	; 1
    d396:	80 ff       	sbrs	r24, 0
    d398:	90 e0       	ldi	r25, 0x00	; 0
    d39a:	90 93 83 28 	sts	0x2883, r25	; 0x802883 <g_usb_cdc_printStatusLines_atxmega>
    d39e:	91 e0       	ldi	r25, 0x01	; 1
    d3a0:	81 ff       	sbrs	r24, 1
    d3a2:	90 e0       	ldi	r25, 0x00	; 0
    d3a4:	90 93 82 28 	sts	0x2882, r25	; 0x802882 <g_usb_cdc_printStatusLines_sim808>
    d3a8:	80 e1       	ldi	r24, 0x10	; 16
    d3aa:	2d cc       	rjmp	.-1958   	; 0xcc06 <save_globals>
    d3ac:	08 95       	ret

0000d3ae <xoPwm_set>:
    d3ae:	0f 93       	push	r16
    d3b0:	1f 93       	push	r17
    d3b2:	cf 93       	push	r28
    d3b4:	df 93       	push	r29
    d3b6:	1f 92       	push	r1
    d3b8:	1f 92       	push	r1
    d3ba:	cd b7       	in	r28, 0x3d	; 61
    d3bc:	de b7       	in	r29, 0x3e	; 62
    d3be:	99 23       	and	r25, r25
    d3c0:	4c f0       	brlt	.+18     	; 0xd3d4 <xoPwm_set+0x26>
    d3c2:	8b 01       	movw	r16, r22
    d3c4:	9c 01       	movw	r18, r24
    d3c6:	22 27       	eor	r18, r18
    d3c8:	33 27       	eor	r19, r19
    d3ca:	60 93 3c 08 	sts	0x083C, r22	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    d3ce:	70 93 3d 08 	sts	0x083D, r23	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>
    d3d2:	46 c0       	rjmp	.+140    	; 0xd460 <xoPwm_set+0xb2>
    d3d4:	6e 3f       	cpi	r22, 0xFE	; 254
    d3d6:	2f ef       	ldi	r18, 0xFF	; 255
    d3d8:	72 07       	cpc	r23, r18
    d3da:	82 07       	cpc	r24, r18
    d3dc:	92 07       	cpc	r25, r18
    d3de:	31 f0       	breq	.+12     	; 0xd3ec <xoPwm_set+0x3e>
    d3e0:	6f 3f       	cpi	r22, 0xFF	; 255
    d3e2:	7f 4f       	sbci	r23, 0xFF	; 255
    d3e4:	8f 4f       	sbci	r24, 0xFF	; 255
    d3e6:	9f 4f       	sbci	r25, 0xFF	; 255
    d3e8:	31 f1       	breq	.+76     	; 0xd436 <xoPwm_set+0x88>
    d3ea:	36 c0       	rjmp	.+108    	; 0xd458 <xoPwm_set+0xaa>
    d3ec:	60 91 6c 26 	lds	r22, 0x266C	; 0x80266c <g_pwm_vctcxo_cfg+0x5>
    d3f0:	70 91 6d 26 	lds	r23, 0x266D	; 0x80266d <g_pwm_vctcxo_cfg+0x6>
    d3f4:	80 e0       	ldi	r24, 0x00	; 0
    d3f6:	90 e0       	ldi	r25, 0x00	; 0
    d3f8:	0e 94 96 82 	call	0x1052c	; 0x1052c <__floatunsisf>
    d3fc:	20 e0       	ldi	r18, 0x00	; 0
    d3fe:	30 e0       	ldi	r19, 0x00	; 0
    d400:	40 ec       	ldi	r20, 0xC0	; 192
    d402:	5f e3       	ldi	r21, 0x3F	; 63
    d404:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    d408:	27 e2       	ldi	r18, 0x27	; 39
    d40a:	31 e3       	ldi	r19, 0x31	; 49
    d40c:	40 e5       	ldi	r20, 0x50	; 80
    d40e:	50 e4       	ldi	r21, 0x40	; 64
    d410:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    d414:	20 e0       	ldi	r18, 0x00	; 0
    d416:	30 e0       	ldi	r19, 0x00	; 0
    d418:	40 e0       	ldi	r20, 0x00	; 0
    d41a:	5f e3       	ldi	r21, 0x3F	; 63
    d41c:	0e 94 92 81 	call	0x10324	; 0x10324 <__addsf3>
    d420:	0e 94 65 82 	call	0x104ca	; 0x104ca <__fixsfsi>
    d424:	8b 01       	movw	r16, r22
    d426:	9c 01       	movw	r18, r24
    d428:	22 27       	eor	r18, r18
    d42a:	33 27       	eor	r19, r19
    d42c:	60 93 3c 08 	sts	0x083C, r22	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    d430:	70 93 3d 08 	sts	0x083D, r23	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>
    d434:	15 c0       	rjmp	.+42     	; 0xd460 <xoPwm_set+0xb2>
    d436:	8f b7       	in	r24, 0x3f	; 63
    d438:	8a 83       	std	Y+2, r24	; 0x02
    d43a:	f8 94       	cli
    d43c:	8a 81       	ldd	r24, Y+2	; 0x02
    d43e:	00 91 e4 26 	lds	r16, 0x26E4	; 0x8026e4 <g_xo_mode_pwm>
    d442:	10 91 e5 26 	lds	r17, 0x26E5	; 0x8026e5 <g_xo_mode_pwm+0x1>
    d446:	20 91 e6 26 	lds	r18, 0x26E6	; 0x8026e6 <g_xo_mode_pwm+0x2>
    d44a:	30 91 e7 26 	lds	r19, 0x26E7	; 0x8026e7 <g_xo_mode_pwm+0x3>
    d44e:	8f bf       	out	0x3f, r24	; 63
    d450:	22 27       	eor	r18, r18
    d452:	33 27       	eor	r19, r19
    d454:	30 64       	ori	r19, 0x40	; 64
    d456:	04 c0       	rjmp	.+8      	; 0xd460 <xoPwm_set+0xb2>
    d458:	00 e0       	ldi	r16, 0x00	; 0
    d45a:	10 e8       	ldi	r17, 0x80	; 128
    d45c:	2f ef       	ldi	r18, 0xFF	; 255
    d45e:	3f ef       	ldi	r19, 0xFF	; 255
    d460:	01 15       	cp	r16, r1
    d462:	80 e8       	ldi	r24, 0x80	; 128
    d464:	18 07       	cpc	r17, r24
    d466:	8f ef       	ldi	r24, 0xFF	; 255
    d468:	28 07       	cpc	r18, r24
    d46a:	38 07       	cpc	r19, r24
    d46c:	79 f0       	breq	.+30     	; 0xd48c <xoPwm_set+0xde>
    d46e:	8f b7       	in	r24, 0x3f	; 63
    d470:	89 83       	std	Y+1, r24	; 0x01
    d472:	f8 94       	cli
    d474:	89 81       	ldd	r24, Y+1	; 0x01
    d476:	00 93 e4 26 	sts	0x26E4, r16	; 0x8026e4 <g_xo_mode_pwm>
    d47a:	10 93 e5 26 	sts	0x26E5, r17	; 0x8026e5 <g_xo_mode_pwm+0x1>
    d47e:	20 93 e6 26 	sts	0x26E6, r18	; 0x8026e6 <g_xo_mode_pwm+0x2>
    d482:	30 93 e7 26 	sts	0x26E7, r19	; 0x8026e7 <g_xo_mode_pwm+0x3>
    d486:	8f bf       	out	0x3f, r24	; 63
    d488:	81 e0       	ldi	r24, 0x01	; 1
    d48a:	bd db       	rcall	.-2182   	; 0xcc06 <save_globals>
    d48c:	0f 90       	pop	r0
    d48e:	0f 90       	pop	r0
    d490:	df 91       	pop	r29
    d492:	cf 91       	pop	r28
    d494:	1f 91       	pop	r17
    d496:	0f 91       	pop	r16
    d498:	08 95       	ret

0000d49a <sched_getLock>:


/* Simple scheduler concept */

bool sched_getLock(volatile uint8_t* lockVar)
{
    d49a:	cf 93       	push	r28
    d49c:	df 93       	push	r29
    d49e:	1f 92       	push	r1
    d4a0:	cd b7       	in	r28, 0x3d	; 61
    d4a2:	de b7       	in	r29, 0x3e	; 62
    d4a4:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d4a6:	8f b7       	in	r24, 0x3f	; 63
    d4a8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    d4aa:	f8 94       	cli
	return flags;
    d4ac:	99 81       	ldd	r25, Y+1	; 0x01

	/* IRQ secured access */	
	{
		irqflags_t flags = cpu_irq_save();
		barrier();
		if (!*lockVar) {	// No use before
    d4ae:	80 81       	ld	r24, Z
    d4b0:	81 11       	cpse	r24, r1
    d4b2:	05 c0       	rjmp	.+10     	; 0xd4be <sched_getLock+0x24>
			++*lockVar;
    d4b4:	80 81       	ld	r24, Z
    d4b6:	8f 5f       	subi	r24, 0xFF	; 255
    d4b8:	80 83       	st	Z, r24
			barrier();
			status = true;
    d4ba:	81 e0       	ldi	r24, 0x01	; 1
    d4bc:	01 c0       	rjmp	.+2      	; 0xd4c0 <sched_getLock+0x26>

/* Simple scheduler concept */

bool sched_getLock(volatile uint8_t* lockVar)
{
	bool status = false;
    d4be:	80 e0       	ldi	r24, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d4c0:	9f bf       	out	0x3f, r25	; 63
			status = true;
		}
		cpu_irq_restore(flags);
	}
	return status;
}
    d4c2:	0f 90       	pop	r0
    d4c4:	df 91       	pop	r29
    d4c6:	cf 91       	pop	r28
    d4c8:	08 95       	ret

0000d4ca <sched_freeLock>:
    d4ca:	cf 93       	push	r28
    d4cc:	df 93       	push	r29
    d4ce:	1f 92       	push	r1
    d4d0:	cd b7       	in	r28, 0x3d	; 61
    d4d2:	de b7       	in	r29, 0x3e	; 62
    d4d4:	fc 01       	movw	r30, r24
    d4d6:	8f b7       	in	r24, 0x3f	; 63
    d4d8:	89 83       	std	Y+1, r24	; 0x01
    d4da:	f8 94       	cli
    d4dc:	99 81       	ldd	r25, Y+1	; 0x01
    d4de:	10 82       	st	Z, r1
    d4e0:	9f bf       	out	0x3f, r25	; 63
    d4e2:	0f 90       	pop	r0
    d4e4:	df 91       	pop	r29
    d4e6:	cf 91       	pop	r28
    d4e8:	08 95       	ret

0000d4ea <sched_set_alarm>:
    d4ea:	cf 92       	push	r12
    d4ec:	df 92       	push	r13
    d4ee:	ef 92       	push	r14
    d4f0:	ff 92       	push	r15
    d4f2:	6b 01       	movw	r12, r22
    d4f4:	7c 01       	movw	r14, r24
    d4f6:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <rtc_get_time>
    d4fa:	6e 5f       	subi	r22, 0xFE	; 254
    d4fc:	7f 4f       	sbci	r23, 0xFF	; 255
    d4fe:	8f 4f       	sbci	r24, 0xFF	; 255
    d500:	9f 4f       	sbci	r25, 0xFF	; 255
    d502:	6c 15       	cp	r22, r12
    d504:	7d 05       	cpc	r23, r13
    d506:	8e 05       	cpc	r24, r14
    d508:	9f 05       	cpc	r25, r15
    d50a:	10 f4       	brcc	.+4      	; 0xd510 <sched_set_alarm+0x26>
    d50c:	c7 01       	movw	r24, r14
    d50e:	b6 01       	movw	r22, r12
    d510:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <rtc_set_alarm>
    d514:	ff 90       	pop	r15
    d516:	ef 90       	pop	r14
    d518:	df 90       	pop	r13
    d51a:	cf 90       	pop	r12
    d51c:	08 95       	ret

0000d51e <sched_doSleep>:
    d51e:	f8 94       	cli
    d520:	80 91 7b 2e 	lds	r24, 0x2E7B	; 0x802e7b <sleepmgr_locks>
    d524:	81 11       	cpse	r24, r1
    d526:	09 c0       	rjmp	.+18     	; 0xd53a <sched_doSleep+0x1c>
    d528:	ac e7       	ldi	r26, 0x7C	; 124
    d52a:	be e2       	ldi	r27, 0x2E	; 46
    d52c:	e0 e0       	ldi	r30, 0x00	; 0
    d52e:	ef 5f       	subi	r30, 0xFF	; 255
    d530:	8d 91       	ld	r24, X+
    d532:	88 23       	and	r24, r24
    d534:	e1 f3       	breq	.-8      	; 0xd52e <sched_doSleep+0x10>
    d536:	e1 11       	cpse	r30, r1
    d538:	02 c0       	rjmp	.+4      	; 0xd53e <sched_doSleep+0x20>
    d53a:	78 94       	sei
    d53c:	08 95       	ret
    d53e:	a8 e4       	ldi	r26, 0x48	; 72
    d540:	b0 e0       	ldi	r27, 0x00	; 0
    d542:	8c 91       	ld	r24, X
    d544:	f0 e0       	ldi	r31, 0x00	; 0
    d546:	e0 5c       	subi	r30, 0xC0	; 192
    d548:	ff 4d       	sbci	r31, 0xDF	; 223
    d54a:	81 7f       	andi	r24, 0xF1	; 241
    d54c:	90 81       	ld	r25, Z
    d54e:	89 2b       	or	r24, r25
    d550:	8c 93       	st	X, r24
    d552:	8c 91       	ld	r24, X
    d554:	81 60       	ori	r24, 0x01	; 1
    d556:	8c 93       	st	X, r24
    d558:	78 94       	sei
    d55a:	88 95       	sleep
    d55c:	8c 91       	ld	r24, X
    d55e:	8e 7f       	andi	r24, 0xFE	; 254
    d560:	8c 93       	st	X, r24
    d562:	08 95       	ret

0000d564 <sched_push>:
    d564:	2f 92       	push	r2
    d566:	3f 92       	push	r3
    d568:	4f 92       	push	r4
    d56a:	5f 92       	push	r5
    d56c:	6f 92       	push	r6
    d56e:	7f 92       	push	r7
    d570:	8f 92       	push	r8
    d572:	9f 92       	push	r9
    d574:	af 92       	push	r10
    d576:	bf 92       	push	r11
    d578:	cf 92       	push	r12
    d57a:	ef 92       	push	r14
    d57c:	ff 92       	push	r15
    d57e:	0f 93       	push	r16
    d580:	1f 93       	push	r17
    d582:	cf 93       	push	r28
    d584:	df 93       	push	r29
    d586:	cd b7       	in	r28, 0x3d	; 61
    d588:	de b7       	in	r29, 0x3e	; 62
    d58a:	2b 97       	sbiw	r28, 0x0b	; 11
    d58c:	cd bf       	out	0x3d, r28	; 61
    d58e:	de bf       	out	0x3e, r29	; 62
    d590:	3c 01       	movw	r6, r24
    d592:	16 2f       	mov	r17, r22
    d594:	49 01       	movw	r8, r18
    d596:	5a 01       	movw	r10, r20
    d598:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <rtc_get_time>
    d59c:	6c 83       	std	Y+4, r22	; 0x04
    d59e:	7d 83       	std	Y+5, r23	; 0x05
    d5a0:	8e 83       	std	Y+6, r24	; 0x06
    d5a2:	9f 83       	std	Y+7, r25	; 0x07
    d5a4:	e1 10       	cpse	r14, r1
    d5a6:	08 c0       	rjmp	.+16     	; 0xd5b8 <sched_push+0x54>
    d5a8:	0f 2e       	mov	r0, r31
    d5aa:	21 2c       	mov	r2, r1
    d5ac:	31 2c       	mov	r3, r1
    d5ae:	f0 ef       	ldi	r31, 0xF0	; 240
    d5b0:	4f 2e       	mov	r4, r31
    d5b2:	51 2c       	mov	r5, r1
    d5b4:	f0 2d       	mov	r31, r0
    d5b6:	07 c0       	rjmp	.+14     	; 0xd5c6 <sched_push+0x62>
    d5b8:	0f 2e       	mov	r0, r31
    d5ba:	21 2c       	mov	r2, r1
    d5bc:	31 2c       	mov	r3, r1
    d5be:	41 2c       	mov	r4, r1
    d5c0:	ff e8       	ldi	r31, 0x8F	; 143
    d5c2:	5f 2e       	mov	r5, r31
    d5c4:	f0 2d       	mov	r31, r0
    d5c6:	c1 10       	cpse	r12, r1
    d5c8:	05 c0       	rjmp	.+10     	; 0xd5d4 <sched_push+0x70>
    d5ca:	18 86       	std	Y+8, r1	; 0x08
    d5cc:	19 86       	std	Y+9, r1	; 0x09
    d5ce:	1a 86       	std	Y+10, r1	; 0x0a
    d5d0:	1b 86       	std	Y+11, r1	; 0x0b
    d5d2:	08 c0       	rjmp	.+16     	; 0xd5e4 <sched_push+0x80>
    d5d4:	80 e0       	ldi	r24, 0x00	; 0
    d5d6:	90 e0       	ldi	r25, 0x00	; 0
    d5d8:	a0 e0       	ldi	r26, 0x00	; 0
    d5da:	b0 e4       	ldi	r27, 0x40	; 64
    d5dc:	88 87       	std	Y+8, r24	; 0x08
    d5de:	99 87       	std	Y+9, r25	; 0x09
    d5e0:	aa 87       	std	Y+10, r26	; 0x0a
    d5e2:	bb 87       	std	Y+11, r27	; 0x0b
    d5e4:	00 23       	and	r16, r16
    d5e6:	09 f4       	brne	.+2      	; 0xd5ea <sched_push+0x86>
    d5e8:	02 c2       	rjmp	.+1028   	; 0xd9ee <sched_push+0x48a>
    d5ea:	92 e0       	ldi	r25, 0x02	; 2
    d5ec:	89 16       	cp	r8, r25
    d5ee:	91 04       	cpc	r9, r1
    d5f0:	a1 04       	cpc	r10, r1
    d5f2:	b1 04       	cpc	r11, r1
    d5f4:	c8 f0       	brcs	.+50     	; 0xd628 <sched_push+0xc4>
    d5f6:	a1 e3       	ldi	r26, 0x31	; 49
    d5f8:	8a 16       	cp	r8, r26
    d5fa:	a5 e7       	ldi	r26, 0x75	; 117
    d5fc:	9a 06       	cpc	r9, r26
    d5fe:	a1 04       	cpc	r10, r1
    d600:	b1 04       	cpc	r11, r1
    d602:	b8 f4       	brcc	.+46     	; 0xd632 <sched_push+0xce>
    d604:	c5 01       	movw	r24, r10
    d606:	b4 01       	movw	r22, r8
    d608:	05 2e       	mov	r0, r21
    d60a:	5a e0       	ldi	r21, 0x0A	; 10
    d60c:	66 0f       	add	r22, r22
    d60e:	77 1f       	adc	r23, r23
    d610:	88 1f       	adc	r24, r24
    d612:	99 1f       	adc	r25, r25
    d614:	5a 95       	dec	r21
    d616:	d1 f7       	brne	.-12     	; 0xd60c <sched_push+0xa8>
    d618:	50 2d       	mov	r21, r0
    d61a:	28 ee       	ldi	r18, 0xE8	; 232
    d61c:	33 e0       	ldi	r19, 0x03	; 3
    d61e:	40 e0       	ldi	r20, 0x00	; 0
    d620:	50 e0       	ldi	r21, 0x00	; 0
    d622:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <__udivmodsi4>
    d626:	09 c0       	rjmp	.+18     	; 0xd63a <sched_push+0xd6>
    d628:	22 e0       	ldi	r18, 0x02	; 2
    d62a:	30 e0       	ldi	r19, 0x00	; 0
    d62c:	40 e0       	ldi	r20, 0x00	; 0
    d62e:	50 e0       	ldi	r21, 0x00	; 0
    d630:	04 c0       	rjmp	.+8      	; 0xd63a <sched_push+0xd6>
    d632:	21 e3       	ldi	r18, 0x31	; 49
    d634:	30 e0       	ldi	r19, 0x00	; 0
    d636:	40 e0       	ldi	r20, 0x00	; 0
    d638:	50 e0       	ldi	r21, 0x00	; 0
    d63a:	8c 80       	ldd	r8, Y+4	; 0x04
    d63c:	9d 80       	ldd	r9, Y+5	; 0x05
    d63e:	ae 80       	ldd	r10, Y+6	; 0x06
    d640:	bf 80       	ldd	r11, Y+7	; 0x07
    d642:	82 0e       	add	r8, r18
    d644:	93 1e       	adc	r9, r19
    d646:	a4 1e       	adc	r10, r20
    d648:	b5 1e       	adc	r11, r21
    d64a:	d1 c1       	rjmp	.+930    	; 0xd9ee <sched_push+0x48a>
    d64c:	e5 ef       	ldi	r30, 0xF5	; 245
    d64e:	fd e2       	ldi	r31, 0x2D	; 45
    d650:	83 81       	ldd	r24, Z+3	; 0x03
    d652:	92 81       	ldd	r25, Z+2	; 0x02
    d654:	89 1b       	sub	r24, r25
    d656:	98 2f       	mov	r25, r24
    d658:	85 81       	ldd	r24, Z+5	; 0x05
    d65a:	89 23       	and	r24, r25
    d65c:	94 81       	ldd	r25, Z+4	; 0x04
    d65e:	89 17       	cp	r24, r25
    d660:	09 f4       	brne	.+2      	; 0xd664 <sched_push+0x100>
    d662:	cc c1       	rjmp	.+920    	; 0xd9fc <sched_push+0x498>
    d664:	8f b7       	in	r24, 0x3f	; 63
    d666:	8b 83       	std	Y+3, r24	; 0x03
    d668:	f8 94       	cli
    d66a:	8b 81       	ldd	r24, Y+3	; 0x03
    d66c:	93 81       	ldd	r25, Z+3	; 0x03
    d66e:	32 81       	ldd	r19, Z+2	; 0x02
    d670:	25 81       	ldd	r18, Z+5	; 0x05
    d672:	93 1b       	sub	r25, r19
    d674:	92 23       	and	r25, r18
    d676:	34 81       	ldd	r19, Z+4	; 0x04
    d678:	93 17       	cp	r25, r19
    d67a:	99 f0       	breq	.+38     	; 0xd6a2 <sched_push+0x13e>
    d67c:	93 81       	ldd	r25, Z+3	; 0x03
    d67e:	26 95       	lsr	r18
    d680:	29 23       	and	r18, r25
    d682:	a0 81       	ld	r26, Z
    d684:	b1 81       	ldd	r27, Z+1	; 0x01
    d686:	04 e0       	ldi	r16, 0x04	; 4
    d688:	20 9f       	mul	r18, r16
    d68a:	a0 0d       	add	r26, r0
    d68c:	b1 1d       	adc	r27, r1
    d68e:	11 24       	eor	r1, r1
    d690:	8d 92       	st	X+, r8
    d692:	9d 92       	st	X+, r9
    d694:	ad 92       	st	X+, r10
    d696:	bc 92       	st	X, r11
    d698:	13 97       	sbiw	r26, 0x03	; 3
    d69a:	9f 5f       	subi	r25, 0xFF	; 255
    d69c:	25 81       	ldd	r18, Z+5	; 0x05
    d69e:	92 23       	and	r25, r18
    d6a0:	93 83       	std	Z+3, r25	; 0x03
    d6a2:	e5 ef       	ldi	r30, 0xF5	; 245
    d6a4:	fd e2       	ldi	r31, 0x2D	; 45
    d6a6:	93 81       	ldd	r25, Z+3	; 0x03
    d6a8:	32 81       	ldd	r19, Z+2	; 0x02
    d6aa:	25 81       	ldd	r18, Z+5	; 0x05
    d6ac:	93 1b       	sub	r25, r19
    d6ae:	92 23       	and	r25, r18
    d6b0:	34 81       	ldd	r19, Z+4	; 0x04
    d6b2:	93 17       	cp	r25, r19
    d6b4:	19 f1       	breq	.+70     	; 0xd6fc <sched_push+0x198>
    d6b6:	93 81       	ldd	r25, Z+3	; 0x03
    d6b8:	26 95       	lsr	r18
    d6ba:	29 23       	and	r18, r25
    d6bc:	a0 81       	ld	r26, Z
    d6be:	b1 81       	ldd	r27, Z+1	; 0x01
    d6c0:	34 e0       	ldi	r19, 0x04	; 4
    d6c2:	23 9f       	mul	r18, r19
    d6c4:	a0 0d       	add	r26, r0
    d6c6:	b1 1d       	adc	r27, r1
    d6c8:	11 24       	eor	r1, r1
    d6ca:	a3 01       	movw	r20, r6
    d6cc:	60 e0       	ldi	r22, 0x00	; 0
    d6ce:	70 e0       	ldi	r23, 0x00	; 0
    d6d0:	71 2b       	or	r23, r17
    d6d2:	42 29       	or	r20, r2
    d6d4:	53 29       	or	r21, r3
    d6d6:	64 29       	or	r22, r4
    d6d8:	75 29       	or	r23, r5
    d6da:	08 85       	ldd	r16, Y+8	; 0x08
    d6dc:	19 85       	ldd	r17, Y+9	; 0x09
    d6de:	2a 85       	ldd	r18, Y+10	; 0x0a
    d6e0:	3b 85       	ldd	r19, Y+11	; 0x0b
    d6e2:	40 2b       	or	r20, r16
    d6e4:	51 2b       	or	r21, r17
    d6e6:	62 2b       	or	r22, r18
    d6e8:	73 2b       	or	r23, r19
    d6ea:	4d 93       	st	X+, r20
    d6ec:	5d 93       	st	X+, r21
    d6ee:	6d 93       	st	X+, r22
    d6f0:	7c 93       	st	X, r23
    d6f2:	13 97       	sbiw	r26, 0x03	; 3
    d6f4:	9f 5f       	subi	r25, 0xFF	; 255
    d6f6:	25 81       	ldd	r18, Z+5	; 0x05
    d6f8:	92 23       	and	r25, r18
    d6fa:	93 83       	std	Z+3, r25	; 0x03
    d6fc:	8f bf       	out	0x3f, r24	; 63
    d6fe:	7e c1       	rjmp	.+764    	; 0xd9fc <sched_push+0x498>
    d700:	81 e0       	ldi	r24, 0x01	; 1
    d702:	90 e0       	ldi	r25, 0x00	; 0
    d704:	fc 01       	movw	r30, r24
    d706:	ee 0f       	add	r30, r30
    d708:	ff 1f       	adc	r31, r31
    d70a:	ee 0f       	add	r30, r30
    d70c:	ff 1f       	adc	r31, r31
    d70e:	ee 0f       	add	r30, r30
    d710:	ff 1f       	adc	r31, r31
    d712:	e8 1b       	sub	r30, r24
    d714:	f9 0b       	sbc	r31, r25
    d716:	ef 57       	subi	r30, 0x7F	; 127
    d718:	fa 4d       	sbci	r31, 0xDA	; 218
    d71a:	20 81       	ld	r18, Z
    d71c:	20 fd       	sbrc	r18, 0
    d71e:	32 c0       	rjmp	.+100    	; 0xd784 <sched_push+0x220>
    d720:	dc 01       	movw	r26, r24
    d722:	aa 0f       	add	r26, r26
    d724:	bb 1f       	adc	r27, r27
    d726:	aa 0f       	add	r26, r26
    d728:	bb 1f       	adc	r27, r27
    d72a:	aa 0f       	add	r26, r26
    d72c:	bb 1f       	adc	r27, r27
    d72e:	a8 1b       	sub	r26, r24
    d730:	b9 0b       	sbc	r27, r25
    d732:	fd 01       	movw	r30, r26
    d734:	ef 57       	subi	r30, 0x7F	; 127
    d736:	fa 4d       	sbci	r31, 0xDA	; 218
    d738:	90 81       	ld	r25, Z
    d73a:	91 60       	ori	r25, 0x01	; 1
    d73c:	90 83       	st	Z, r25
    d73e:	a5 58       	subi	r26, 0x85	; 133
    d740:	ba 4d       	sbci	r27, 0xDA	; 218
    d742:	14 96       	adiw	r26, 0x04	; 4
    d744:	6d 92       	st	X+, r6
    d746:	7c 92       	st	X, r7
    d748:	15 97       	sbiw	r26, 0x05	; 5
    d74a:	13 70       	andi	r17, 0x03	; 3
    d74c:	11 0f       	add	r17, r17
    d74e:	11 0f       	add	r17, r17
    d750:	11 0f       	add	r17, r17
    d752:	90 81       	ld	r25, Z
    d754:	97 7e       	andi	r25, 0xE7	; 231
    d756:	91 2b       	or	r25, r17
    d758:	90 83       	st	Z, r25
    d75a:	90 81       	ld	r25, Z
    d75c:	e0 fa       	bst	r14, 0
    d75e:	91 f9       	bld	r25, 1
    d760:	90 83       	st	Z, r25
    d762:	90 81       	ld	r25, Z
    d764:	c0 fa       	bst	r12, 0
    d766:	92 f9       	bld	r25, 2
    d768:	90 83       	st	Z, r25
    d76a:	8d 92       	st	X+, r8
    d76c:	9d 92       	st	X+, r9
    d76e:	ad 92       	st	X+, r10
    d770:	bc 92       	st	X, r11
    d772:	13 97       	sbiw	r26, 0x03	; 3
    d774:	8f 5f       	subi	r24, 0xFF	; 255
    d776:	e0 91 5b 25 	lds	r30, 0x255B	; 0x80255b <g_sched_sort>
    d77a:	ee 23       	and	r30, r30
    d77c:	a1 f0       	breq	.+40     	; 0xd7a6 <sched_push+0x242>
    d77e:	20 e0       	ldi	r18, 0x00	; 0
    d780:	30 e0       	ldi	r19, 0x00	; 0
    d782:	18 c0       	rjmp	.+48     	; 0xd7b4 <sched_push+0x250>
    d784:	01 96       	adiw	r24, 0x01	; 1
    d786:	80 32       	cpi	r24, 0x20	; 32
    d788:	91 05       	cpc	r25, r1
    d78a:	09 f0       	breq	.+2      	; 0xd78e <sched_push+0x22a>
    d78c:	bb cf       	rjmp	.-138    	; 0xd704 <sched_push+0x1a0>
    d78e:	1c 82       	std	Y+4, r1	; 0x04
    d790:	1d 82       	std	Y+5, r1	; 0x05
    d792:	1e 82       	std	Y+6, r1	; 0x06
    d794:	1f 82       	std	Y+7, r1	; 0x07
    d796:	62 c0       	rjmp	.+196    	; 0xd85c <sched_push+0x2f8>
    d798:	f9 01       	movw	r30, r18
    d79a:	e5 5a       	subi	r30, 0xA5	; 165
    d79c:	fa 4d       	sbci	r31, 0xDA	; 218
    d79e:	e0 81       	ld	r30, Z
    d7a0:	e1 11       	cpse	r30, r1
    d7a2:	08 c0       	rjmp	.+16     	; 0xd7b4 <sched_push+0x250>
    d7a4:	02 c0       	rjmp	.+4      	; 0xd7aa <sched_push+0x246>
    d7a6:	20 e0       	ldi	r18, 0x00	; 0
    d7a8:	30 e0       	ldi	r19, 0x00	; 0
    d7aa:	f9 01       	movw	r30, r18
    d7ac:	e5 5a       	subi	r30, 0xA5	; 165
    d7ae:	fa 4d       	sbci	r31, 0xDA	; 218
    d7b0:	80 83       	st	Z, r24
    d7b2:	3d c0       	rjmp	.+122    	; 0xd82e <sched_push+0x2ca>
    d7b4:	e1 50       	subi	r30, 0x01	; 1
    d7b6:	4e 2f       	mov	r20, r30
    d7b8:	50 e0       	ldi	r21, 0x00	; 0
    d7ba:	17 e0       	ldi	r17, 0x07	; 7
    d7bc:	e1 9f       	mul	r30, r17
    d7be:	f0 01       	movw	r30, r0
    d7c0:	11 24       	eor	r1, r1
    d7c2:	ef 57       	subi	r30, 0x7F	; 127
    d7c4:	fa 4d       	sbci	r31, 0xDA	; 218
    d7c6:	90 81       	ld	r25, Z
    d7c8:	90 ff       	sbrs	r25, 0
    d7ca:	2b c0       	rjmp	.+86     	; 0xd822 <sched_push+0x2be>
    d7cc:	fa 01       	movw	r30, r20
    d7ce:	ee 0f       	add	r30, r30
    d7d0:	ff 1f       	adc	r31, r31
    d7d2:	ee 0f       	add	r30, r30
    d7d4:	ff 1f       	adc	r31, r31
    d7d6:	ee 0f       	add	r30, r30
    d7d8:	ff 1f       	adc	r31, r31
    d7da:	e4 1b       	sub	r30, r20
    d7dc:	f5 0b       	sbc	r31, r21
    d7de:	e5 58       	subi	r30, 0x85	; 133
    d7e0:	fa 4d       	sbci	r31, 0xDA	; 218
    d7e2:	40 81       	ld	r20, Z
    d7e4:	51 81       	ldd	r21, Z+1	; 0x01
    d7e6:	62 81       	ldd	r22, Z+2	; 0x02
    d7e8:	73 81       	ldd	r23, Z+3	; 0x03
    d7ea:	84 16       	cp	r8, r20
    d7ec:	95 06       	cpc	r9, r21
    d7ee:	a6 06       	cpc	r10, r22
    d7f0:	b7 06       	cpc	r11, r23
    d7f2:	b8 f4       	brcc	.+46     	; 0xd822 <sched_push+0x2be>
    d7f4:	2f 31       	cpi	r18, 0x1F	; 31
    d7f6:	31 05       	cpc	r19, r1
    d7f8:	7c f4       	brge	.+30     	; 0xd818 <sched_push+0x2b4>
    d7fa:	4e e1       	ldi	r20, 0x1E	; 30
    d7fc:	50 e0       	ldi	r21, 0x00	; 0
    d7fe:	fa 01       	movw	r30, r20
    d800:	e5 5a       	subi	r30, 0xA5	; 165
    d802:	fa 4d       	sbci	r31, 0xDA	; 218
    d804:	90 81       	ld	r25, Z
    d806:	fa 01       	movw	r30, r20
    d808:	e4 5a       	subi	r30, 0xA4	; 164
    d80a:	fa 4d       	sbci	r31, 0xDA	; 218
    d80c:	90 83       	st	Z, r25
    d80e:	41 50       	subi	r20, 0x01	; 1
    d810:	51 09       	sbc	r21, r1
    d812:	42 17       	cp	r20, r18
    d814:	53 07       	cpc	r21, r19
    d816:	9c f7       	brge	.-26     	; 0xd7fe <sched_push+0x29a>
    d818:	f9 01       	movw	r30, r18
    d81a:	e5 5a       	subi	r30, 0xA5	; 165
    d81c:	fa 4d       	sbci	r31, 0xDA	; 218
    d81e:	80 83       	st	Z, r24
    d820:	06 c0       	rjmp	.+12     	; 0xd82e <sched_push+0x2ca>
    d822:	2f 5f       	subi	r18, 0xFF	; 255
    d824:	3f 4f       	sbci	r19, 0xFF	; 255
    d826:	20 32       	cpi	r18, 0x20	; 32
    d828:	31 05       	cpc	r19, r1
    d82a:	09 f0       	breq	.+2      	; 0xd82e <sched_push+0x2ca>
    d82c:	b5 cf       	rjmp	.-150    	; 0xd798 <sched_push+0x234>
    d82e:	80 91 5b 25 	lds	r24, 0x255B	; 0x80255b <g_sched_sort>
    d832:	90 e0       	ldi	r25, 0x00	; 0
    d834:	01 97       	sbiw	r24, 0x01	; 1
    d836:	fc 01       	movw	r30, r24
    d838:	ee 0f       	add	r30, r30
    d83a:	ff 1f       	adc	r31, r31
    d83c:	ee 0f       	add	r30, r30
    d83e:	ff 1f       	adc	r31, r31
    d840:	ee 0f       	add	r30, r30
    d842:	ff 1f       	adc	r31, r31
    d844:	e8 1b       	sub	r30, r24
    d846:	f9 0b       	sbc	r31, r25
    d848:	e5 58       	subi	r30, 0x85	; 133
    d84a:	fa 4d       	sbci	r31, 0xDA	; 218
    d84c:	80 81       	ld	r24, Z
    d84e:	91 81       	ldd	r25, Z+1	; 0x01
    d850:	a2 81       	ldd	r26, Z+2	; 0x02
    d852:	b3 81       	ldd	r27, Z+3	; 0x03
    d854:	8c 83       	std	Y+4, r24	; 0x04
    d856:	9d 83       	std	Y+5, r25	; 0x05
    d858:	ae 83       	std	Y+6, r26	; 0x06
    d85a:	bf 83       	std	Y+7, r27	; 0x07
    d85c:	8f e5       	ldi	r24, 0x5F	; 95
    d85e:	96 e2       	ldi	r25, 0x26	; 38
    d860:	34 de       	rcall	.-920    	; 0xd4ca <sched_freeLock>
    d862:	0f 2e       	mov	r0, r31
    d864:	f5 ef       	ldi	r31, 0xF5	; 245
    d866:	af 2e       	mov	r10, r31
    d868:	fd e2       	ldi	r31, 0x2D	; 45
    d86a:	bf 2e       	mov	r11, r31
    d86c:	f0 2d       	mov	r31, r0
    d86e:	a3 c0       	rjmp	.+326    	; 0xd9b6 <sched_push+0x452>
    d870:	8f b7       	in	r24, 0x3f	; 63
    d872:	8a 83       	std	Y+2, r24	; 0x02
    d874:	f8 94       	cli
    d876:	2a 81       	ldd	r18, Y+2	; 0x02
    d878:	d5 01       	movw	r26, r10
    d87a:	13 96       	adiw	r26, 0x03	; 3
    d87c:	9c 91       	ld	r25, X
    d87e:	13 97       	sbiw	r26, 0x03	; 3
    d880:	12 96       	adiw	r26, 0x02	; 2
    d882:	8c 91       	ld	r24, X
    d884:	12 97       	sbiw	r26, 0x02	; 2
    d886:	98 17       	cp	r25, r24
    d888:	c9 f0       	breq	.+50     	; 0xd8bc <sched_push+0x358>
    d88a:	12 96       	adiw	r26, 0x02	; 2
    d88c:	9c 91       	ld	r25, X
    d88e:	12 97       	sbiw	r26, 0x02	; 2
    d890:	15 96       	adiw	r26, 0x05	; 5
    d892:	8c 91       	ld	r24, X
    d894:	15 97       	sbiw	r26, 0x05	; 5
    d896:	38 2f       	mov	r19, r24
    d898:	36 95       	lsr	r19
    d89a:	39 23       	and	r19, r25
    d89c:	ed 91       	ld	r30, X+
    d89e:	fc 91       	ld	r31, X
    d8a0:	b4 e0       	ldi	r27, 0x04	; 4
    d8a2:	3b 9f       	mul	r19, r27
    d8a4:	e0 0d       	add	r30, r0
    d8a6:	f1 1d       	adc	r31, r1
    d8a8:	11 24       	eor	r1, r1
    d8aa:	40 81       	ld	r20, Z
    d8ac:	51 81       	ldd	r21, Z+1	; 0x01
    d8ae:	62 81       	ldd	r22, Z+2	; 0x02
    d8b0:	73 81       	ldd	r23, Z+3	; 0x03
    d8b2:	9f 5f       	subi	r25, 0xFF	; 255
    d8b4:	89 23       	and	r24, r25
    d8b6:	f5 01       	movw	r30, r10
    d8b8:	82 83       	std	Z+2, r24	; 0x02
    d8ba:	03 c0       	rjmp	.+6      	; 0xd8c2 <sched_push+0x35e>
    d8bc:	40 e0       	ldi	r20, 0x00	; 0
    d8be:	50 e0       	ldi	r21, 0x00	; 0
    d8c0:	ba 01       	movw	r22, r20
    d8c2:	d5 01       	movw	r26, r10
    d8c4:	13 96       	adiw	r26, 0x03	; 3
    d8c6:	8c 91       	ld	r24, X
    d8c8:	13 97       	sbiw	r26, 0x03	; 3
    d8ca:	12 96       	adiw	r26, 0x02	; 2
    d8cc:	9c 91       	ld	r25, X
    d8ce:	12 97       	sbiw	r26, 0x02	; 2
    d8d0:	98 17       	cp	r25, r24
    d8d2:	c9 f0       	breq	.+50     	; 0xd906 <sched_push+0x3a2>
    d8d4:	12 96       	adiw	r26, 0x02	; 2
    d8d6:	3c 91       	ld	r19, X
    d8d8:	12 97       	sbiw	r26, 0x02	; 2
    d8da:	15 96       	adiw	r26, 0x05	; 5
    d8dc:	9c 91       	ld	r25, X
    d8de:	15 97       	sbiw	r26, 0x05	; 5
    d8e0:	89 2f       	mov	r24, r25
    d8e2:	86 95       	lsr	r24
    d8e4:	83 23       	and	r24, r19
    d8e6:	ed 91       	ld	r30, X+
    d8e8:	fc 91       	ld	r31, X
    d8ea:	b4 e0       	ldi	r27, 0x04	; 4
    d8ec:	8b 9f       	mul	r24, r27
    d8ee:	e0 0d       	add	r30, r0
    d8f0:	f1 1d       	adc	r31, r1
    d8f2:	11 24       	eor	r1, r1
    d8f4:	40 80       	ld	r4, Z
    d8f6:	51 80       	ldd	r5, Z+1	; 0x01
    d8f8:	62 80       	ldd	r6, Z+2	; 0x02
    d8fa:	73 80       	ldd	r7, Z+3	; 0x03
    d8fc:	3f 5f       	subi	r19, 0xFF	; 255
    d8fe:	93 23       	and	r25, r19
    d900:	f5 01       	movw	r30, r10
    d902:	92 83       	std	Z+2, r25	; 0x02
    d904:	03 c0       	rjmp	.+6      	; 0xd90c <sched_push+0x3a8>
    d906:	41 2c       	mov	r4, r1
    d908:	51 2c       	mov	r5, r1
    d90a:	32 01       	movw	r6, r4
    d90c:	2f bf       	out	0x3f, r18	; 63
    d90e:	d3 01       	movw	r26, r6
    d910:	c2 01       	movw	r24, r4
    d912:	88 27       	eor	r24, r24
    d914:	99 27       	eor	r25, r25
    d916:	aa 27       	eor	r26, r26
    d918:	bf 70       	andi	r27, 0x0F	; 15
    d91a:	00 97       	sbiw	r24, 0x00	; 0
    d91c:	a1 05       	cpc	r26, r1
    d91e:	bf 40       	sbci	r27, 0x0F	; 15
    d920:	09 f1       	breq	.+66     	; 0xd964 <sched_push+0x400>
    d922:	8f b7       	in	r24, 0x3f	; 63
    d924:	89 83       	std	Y+1, r24	; 0x01
    d926:	f8 94       	cli
    d928:	29 81       	ldd	r18, Y+1	; 0x01
    d92a:	12 c0       	rjmp	.+36     	; 0xd950 <sched_push+0x3ec>
    d92c:	d5 01       	movw	r26, r10
    d92e:	13 96       	adiw	r26, 0x03	; 3
    d930:	9c 91       	ld	r25, X
    d932:	13 97       	sbiw	r26, 0x03	; 3
    d934:	12 96       	adiw	r26, 0x02	; 2
    d936:	8c 91       	ld	r24, X
    d938:	12 97       	sbiw	r26, 0x02	; 2
    d93a:	98 17       	cp	r25, r24
    d93c:	49 f0       	breq	.+18     	; 0xd950 <sched_push+0x3ec>
    d93e:	12 96       	adiw	r26, 0x02	; 2
    d940:	8c 91       	ld	r24, X
    d942:	12 97       	sbiw	r26, 0x02	; 2
    d944:	8f 5f       	subi	r24, 0xFF	; 255
    d946:	15 96       	adiw	r26, 0x05	; 5
    d948:	9c 91       	ld	r25, X
    d94a:	89 23       	and	r24, r25
    d94c:	f5 01       	movw	r30, r10
    d94e:	82 83       	std	Z+2, r24	; 0x02
    d950:	d5 01       	movw	r26, r10
    d952:	13 96       	adiw	r26, 0x03	; 3
    d954:	9c 91       	ld	r25, X
    d956:	13 97       	sbiw	r26, 0x03	; 3
    d958:	12 96       	adiw	r26, 0x02	; 2
    d95a:	8c 91       	ld	r24, X
    d95c:	98 13       	cpse	r25, r24
    d95e:	e6 cf       	rjmp	.-52     	; 0xd92c <sched_push+0x3c8>
    d960:	2f bf       	out	0x3f, r18	; 63
    d962:	29 c0       	rjmp	.+82     	; 0xd9b6 <sched_push+0x452>
    d964:	d3 01       	movw	r26, r6
    d966:	c2 01       	movw	r24, r4
    d968:	aa 27       	eor	r26, r26
    d96a:	bb 27       	eor	r27, r27
    d96c:	89 2b       	or	r24, r25
    d96e:	8a 2b       	or	r24, r26
    d970:	8b 2b       	or	r24, r27
    d972:	09 f1       	breq	.+66     	; 0xd9b6 <sched_push+0x452>
    d974:	41 15       	cp	r20, r1
    d976:	51 05       	cpc	r21, r1
    d978:	61 05       	cpc	r22, r1
    d97a:	71 05       	cpc	r23, r1
    d97c:	e1 f0       	breq	.+56     	; 0xd9b6 <sched_push+0x452>
    d97e:	d3 01       	movw	r26, r6
    d980:	c2 01       	movw	r24, r4
    d982:	07 2e       	mov	r0, r23
    d984:	7e e1       	ldi	r23, 0x1E	; 30
    d986:	b6 95       	lsr	r27
    d988:	a7 95       	ror	r26
    d98a:	97 95       	ror	r25
    d98c:	87 95       	ror	r24
    d98e:	7a 95       	dec	r23
    d990:	d1 f7       	brne	.-12     	; 0xd986 <sched_push+0x422>
    d992:	70 2d       	mov	r23, r0
    d994:	e8 2f       	mov	r30, r24
    d996:	e1 70       	andi	r30, 0x01	; 1
    d998:	ce 2e       	mov	r12, r30
    d99a:	83 01       	movw	r16, r6
    d99c:	72 01       	movw	r14, r4
    d99e:	ee 24       	eor	r14, r14
    d9a0:	17 fd       	sbrc	r17, 7
    d9a2:	e3 94       	inc	r14
    d9a4:	ff 24       	eor	r15, r15
    d9a6:	00 27       	eor	r16, r16
    d9a8:	11 27       	eor	r17, r17
    d9aa:	00 e0       	ldi	r16, 0x00	; 0
    d9ac:	9a 01       	movw	r18, r20
    d9ae:	ab 01       	movw	r20, r22
    d9b0:	60 e0       	ldi	r22, 0x00	; 0
    d9b2:	c2 01       	movw	r24, r4
    d9b4:	d7 dd       	rcall	.-1106   	; 0xd564 <sched_push>
    d9b6:	d5 01       	movw	r26, r10
    d9b8:	13 96       	adiw	r26, 0x03	; 3
    d9ba:	8c 91       	ld	r24, X
    d9bc:	13 97       	sbiw	r26, 0x03	; 3
    d9be:	12 96       	adiw	r26, 0x02	; 2
    d9c0:	9c 91       	ld	r25, X
    d9c2:	98 13       	cpse	r25, r24
    d9c4:	55 cf       	rjmp	.-342    	; 0xd870 <sched_push+0x30c>
    d9c6:	0c 81       	ldd	r16, Y+4	; 0x04
    d9c8:	1d 81       	ldd	r17, Y+5	; 0x05
    d9ca:	2e 81       	ldd	r18, Y+6	; 0x06
    d9cc:	3f 81       	ldd	r19, Y+7	; 0x07
    d9ce:	01 15       	cp	r16, r1
    d9d0:	11 05       	cpc	r17, r1
    d9d2:	21 05       	cpc	r18, r1
    d9d4:	31 05       	cpc	r19, r1
    d9d6:	91 f0       	breq	.+36     	; 0xd9fc <sched_push+0x498>
    d9d8:	c9 01       	movw	r24, r18
    d9da:	b8 01       	movw	r22, r16
    d9dc:	86 dd       	rcall	.-1268   	; 0xd4ea <sched_set_alarm>
    d9de:	0e c0       	rjmp	.+28     	; 0xd9fc <sched_push+0x498>
    d9e0:	80 91 81 25 	lds	r24, 0x2581	; 0x802581 <g_sched_data+0x6>
    d9e4:	80 fd       	sbrc	r24, 0
    d9e6:	8c ce       	rjmp	.-744    	; 0xd700 <sched_push+0x19c>
    d9e8:	80 e0       	ldi	r24, 0x00	; 0
    d9ea:	90 e0       	ldi	r25, 0x00	; 0
    d9ec:	99 ce       	rjmp	.-718    	; 0xd720 <sched_push+0x1bc>
    d9ee:	8f e5       	ldi	r24, 0x5F	; 95
    d9f0:	96 e2       	ldi	r25, 0x26	; 38
    d9f2:	53 dd       	rcall	.-1370   	; 0xd49a <sched_getLock>
    d9f4:	88 23       	and	r24, r24
    d9f6:	09 f4       	brne	.+2      	; 0xd9fa <sched_push+0x496>
    d9f8:	29 ce       	rjmp	.-942    	; 0xd64c <sched_push+0xe8>
    d9fa:	f2 cf       	rjmp	.-28     	; 0xd9e0 <sched_push+0x47c>
    d9fc:	2b 96       	adiw	r28, 0x0b	; 11
    d9fe:	cd bf       	out	0x3d, r28	; 61
    da00:	de bf       	out	0x3e, r29	; 62
    da02:	df 91       	pop	r29
    da04:	cf 91       	pop	r28
    da06:	1f 91       	pop	r17
    da08:	0f 91       	pop	r16
    da0a:	ff 90       	pop	r15
    da0c:	ef 90       	pop	r14
    da0e:	cf 90       	pop	r12
    da10:	bf 90       	pop	r11
    da12:	af 90       	pop	r10
    da14:	9f 90       	pop	r9
    da16:	8f 90       	pop	r8
    da18:	7f 90       	pop	r7
    da1a:	6f 90       	pop	r6
    da1c:	5f 90       	pop	r5
    da1e:	4f 90       	pop	r4
    da20:	3f 90       	pop	r3
    da22:	2f 90       	pop	r2
    da24:	08 95       	ret

0000da26 <dds_update>:
    da26:	4f 92       	push	r4
    da28:	5f 92       	push	r5
    da2a:	6f 92       	push	r6
    da2c:	7f 92       	push	r7
    da2e:	8f 92       	push	r8
    da30:	9f 92       	push	r9
    da32:	af 92       	push	r10
    da34:	bf 92       	push	r11
    da36:	cf 92       	push	r12
    da38:	df 92       	push	r13
    da3a:	ef 92       	push	r14
    da3c:	ff 92       	push	r15
    da3e:	0f 93       	push	r16
    da40:	1f 93       	push	r17
    da42:	cf 93       	push	r28
    da44:	df 93       	push	r29
    da46:	cd b7       	in	r28, 0x3d	; 61
    da48:	de b7       	in	r29, 0x3e	; 62
    da4a:	2d 97       	sbiw	r28, 0x0d	; 13
    da4c:	cd bf       	out	0x3d, r28	; 61
    da4e:	de bf       	out	0x3e, r29	; 62
    da50:	6a 83       	std	Y+2, r22	; 0x02
    da52:	7b 83       	std	Y+3, r23	; 0x03
    da54:	8c 83       	std	Y+4, r24	; 0x04
    da56:	9d 83       	std	Y+5, r25	; 0x05
    da58:	2e 83       	std	Y+6, r18	; 0x06
    da5a:	3f 83       	std	Y+7, r19	; 0x07
    da5c:	48 87       	std	Y+8, r20	; 0x08
    da5e:	59 87       	std	Y+9, r21	; 0x09
    da60:	ea 86       	std	Y+10, r14	; 0x0a
    da62:	fb 86       	std	Y+11, r15	; 0x0b
    da64:	0c 87       	std	Y+12, r16	; 0x0c
    da66:	1d 87       	std	Y+13, r17	; 0x0d
    da68:	20 e0       	ldi	r18, 0x00	; 0
    da6a:	30 e0       	ldi	r19, 0x00	; 0
    da6c:	a9 01       	movw	r20, r18
    da6e:	0e 94 81 83 	call	0x10702	; 0x10702 <__gesf2>
    da72:	88 23       	and	r24, r24
    da74:	7c f0       	brlt	.+30     	; 0xda94 <dds_update+0x6e>
    da76:	20 e0       	ldi	r18, 0x00	; 0
    da78:	30 e0       	ldi	r19, 0x00	; 0
    da7a:	4a e7       	ldi	r20, 0x7A	; 122
    da7c:	54 e4       	ldi	r21, 0x44	; 68
    da7e:	6a 81       	ldd	r22, Y+2	; 0x02
    da80:	7b 81       	ldd	r23, Y+3	; 0x03
    da82:	8c 81       	ldd	r24, Y+4	; 0x04
    da84:	9d 81       	ldd	r25, Y+5	; 0x05
    da86:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    da8a:	0e 94 6a 82 	call	0x104d4	; 0x104d4 <__fixunssfsi>
    da8e:	2b 01       	movw	r4, r22
    da90:	3c 01       	movw	r6, r24
    da92:	03 c0       	rjmp	.+6      	; 0xda9a <dds_update+0x74>
    da94:	41 2c       	mov	r4, r1
    da96:	51 2c       	mov	r5, r1
    da98:	32 01       	movw	r6, r4
    da9a:	20 e0       	ldi	r18, 0x00	; 0
    da9c:	30 e0       	ldi	r19, 0x00	; 0
    da9e:	a9 01       	movw	r20, r18
    daa0:	6e 81       	ldd	r22, Y+6	; 0x06
    daa2:	7f 81       	ldd	r23, Y+7	; 0x07
    daa4:	88 85       	ldd	r24, Y+8	; 0x08
    daa6:	99 85       	ldd	r25, Y+9	; 0x09
    daa8:	0e 94 81 83 	call	0x10702	; 0x10702 <__gesf2>
    daac:	88 23       	and	r24, r24
    daae:	7c f0       	brlt	.+30     	; 0xdace <dds_update+0xa8>
    dab0:	20 e0       	ldi	r18, 0x00	; 0
    dab2:	30 e0       	ldi	r19, 0x00	; 0
    dab4:	4a e7       	ldi	r20, 0x7A	; 122
    dab6:	54 e4       	ldi	r21, 0x44	; 68
    dab8:	6e 81       	ldd	r22, Y+6	; 0x06
    daba:	7f 81       	ldd	r23, Y+7	; 0x07
    dabc:	88 85       	ldd	r24, Y+8	; 0x08
    dabe:	99 85       	ldd	r25, Y+9	; 0x09
    dac0:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    dac4:	0e 94 6a 82 	call	0x104d4	; 0x104d4 <__fixunssfsi>
    dac8:	4b 01       	movw	r8, r22
    daca:	5c 01       	movw	r10, r24
    dacc:	03 c0       	rjmp	.+6      	; 0xdad4 <dds_update+0xae>
    dace:	81 2c       	mov	r8, r1
    dad0:	91 2c       	mov	r9, r1
    dad2:	54 01       	movw	r10, r8
    dad4:	20 e0       	ldi	r18, 0x00	; 0
    dad6:	30 e0       	ldi	r19, 0x00	; 0
    dad8:	a9 01       	movw	r20, r18
    dada:	6a 85       	ldd	r22, Y+10	; 0x0a
    dadc:	7b 85       	ldd	r23, Y+11	; 0x0b
    dade:	8c 85       	ldd	r24, Y+12	; 0x0c
    dae0:	9d 85       	ldd	r25, Y+13	; 0x0d
    dae2:	0e 94 81 83 	call	0x10702	; 0x10702 <__gesf2>
    dae6:	88 23       	and	r24, r24
    dae8:	ac f0       	brlt	.+42     	; 0xdb14 <dds_update+0xee>
    daea:	20 e0       	ldi	r18, 0x00	; 0
    daec:	30 e0       	ldi	r19, 0x00	; 0
    daee:	44 eb       	ldi	r20, 0xB4	; 180
    daf0:	52 e4       	ldi	r21, 0x42	; 66
    daf2:	6a 85       	ldd	r22, Y+10	; 0x0a
    daf4:	7b 85       	ldd	r23, Y+11	; 0x0b
    daf6:	8c 85       	ldd	r24, Y+12	; 0x0c
    daf8:	9d 85       	ldd	r25, Y+13	; 0x0d
    dafa:	0e 94 fd 81 	call	0x103fa	; 0x103fa <__divsf3>
    dafe:	20 e0       	ldi	r18, 0x00	; 0
    db00:	30 e0       	ldi	r19, 0x00	; 0
    db02:	40 e8       	ldi	r20, 0x80	; 128
    db04:	5e e4       	ldi	r21, 0x4E	; 78
    db06:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
    db0a:	0e 94 6a 82 	call	0x104d4	; 0x104d4 <__fixunssfsi>
    db0e:	6b 01       	movw	r12, r22
    db10:	7c 01       	movw	r14, r24
    db12:	03 c0       	rjmp	.+6      	; 0xdb1a <dds_update+0xf4>
    db14:	c1 2c       	mov	r12, r1
    db16:	d1 2c       	mov	r13, r1
    db18:	76 01       	movw	r14, r12
    db1a:	8f b7       	in	r24, 0x3f	; 63
    db1c:	89 83       	std	Y+1, r24	; 0x01
    db1e:	f8 94       	cli
    db20:	19 81       	ldd	r17, Y+1	; 0x01
    db22:	20 e0       	ldi	r18, 0x00	; 0
    db24:	30 e0       	ldi	r19, 0x00	; 0
    db26:	a9 01       	movw	r20, r18
    db28:	6a 81       	ldd	r22, Y+2	; 0x02
    db2a:	7b 81       	ldd	r23, Y+3	; 0x03
    db2c:	8c 81       	ldd	r24, Y+4	; 0x04
    db2e:	9d 81       	ldd	r25, Y+5	; 0x05
    db30:	0e 94 81 83 	call	0x10702	; 0x10702 <__gesf2>
    db34:	88 23       	and	r24, r24
    db36:	44 f0       	brlt	.+16     	; 0xdb48 <dds_update+0x122>
    db38:	40 92 13 20 	sts	0x2013, r4	; 0x802013 <dds0_freq_mHz>
    db3c:	50 92 14 20 	sts	0x2014, r5	; 0x802014 <dds0_freq_mHz+0x1>
    db40:	60 92 15 20 	sts	0x2015, r6	; 0x802015 <dds0_freq_mHz+0x2>
    db44:	70 92 16 20 	sts	0x2016, r7	; 0x802016 <dds0_freq_mHz+0x3>
    db48:	20 e0       	ldi	r18, 0x00	; 0
    db4a:	30 e0       	ldi	r19, 0x00	; 0
    db4c:	a9 01       	movw	r20, r18
    db4e:	6e 81       	ldd	r22, Y+6	; 0x06
    db50:	7f 81       	ldd	r23, Y+7	; 0x07
    db52:	88 85       	ldd	r24, Y+8	; 0x08
    db54:	99 85       	ldd	r25, Y+9	; 0x09
    db56:	0e 94 81 83 	call	0x10702	; 0x10702 <__gesf2>
    db5a:	88 23       	and	r24, r24
    db5c:	44 f0       	brlt	.+16     	; 0xdb6e <dds_update+0x148>
    db5e:	80 92 0f 20 	sts	0x200F, r8	; 0x80200f <dds1_freq_mHz>
    db62:	90 92 10 20 	sts	0x2010, r9	; 0x802010 <dds1_freq_mHz+0x1>
    db66:	a0 92 11 20 	sts	0x2011, r10	; 0x802011 <dds1_freq_mHz+0x2>
    db6a:	b0 92 12 20 	sts	0x2012, r11	; 0x802012 <dds1_freq_mHz+0x3>
    db6e:	20 e0       	ldi	r18, 0x00	; 0
    db70:	30 e0       	ldi	r19, 0x00	; 0
    db72:	a9 01       	movw	r20, r18
    db74:	6a 85       	ldd	r22, Y+10	; 0x0a
    db76:	7b 85       	ldd	r23, Y+11	; 0x0b
    db78:	8c 85       	ldd	r24, Y+12	; 0x0c
    db7a:	9d 85       	ldd	r25, Y+13	; 0x0d
    db7c:	0e 94 81 83 	call	0x10702	; 0x10702 <__gesf2>
    db80:	88 23       	and	r24, r24
    db82:	84 f0       	brlt	.+32     	; 0xdba4 <dds_update+0x17e>
    db84:	10 92 e9 24 	sts	0x24E9, r1	; 0x8024e9 <dds0_reg>
    db88:	10 92 ea 24 	sts	0x24EA, r1	; 0x8024ea <dds0_reg+0x1>
    db8c:	10 92 eb 24 	sts	0x24EB, r1	; 0x8024eb <dds0_reg+0x2>
    db90:	10 92 ec 24 	sts	0x24EC, r1	; 0x8024ec <dds0_reg+0x3>
    db94:	c0 92 0b 20 	sts	0x200B, r12	; 0x80200b <dds1_reg>
    db98:	d0 92 0c 20 	sts	0x200C, r13	; 0x80200c <dds1_reg+0x1>
    db9c:	e0 92 0d 20 	sts	0x200D, r14	; 0x80200d <dds1_reg+0x2>
    dba0:	f0 92 0e 20 	sts	0x200E, r15	; 0x80200e <dds1_reg+0x3>
    dba4:	1f bf       	out	0x3f, r17	; 63
    dba6:	c1 2c       	mov	r12, r1
    dba8:	e1 2c       	mov	r14, r1
    dbaa:	01 e0       	ldi	r16, 0x01	; 1
    dbac:	2a e0       	ldi	r18, 0x0A	; 10
    dbae:	30 e0       	ldi	r19, 0x00	; 0
    dbb0:	40 e0       	ldi	r20, 0x00	; 0
    dbb2:	50 e0       	ldi	r21, 0x00	; 0
    dbb4:	60 e0       	ldi	r22, 0x00	; 0
    dbb6:	8a e5       	ldi	r24, 0x5A	; 90
    dbb8:	90 e6       	ldi	r25, 0x60	; 96
    dbba:	d4 dc       	rcall	.-1624   	; 0xd564 <sched_push>
    dbbc:	2d 96       	adiw	r28, 0x0d	; 13
    dbbe:	cd bf       	out	0x3d, r28	; 61
    dbc0:	de bf       	out	0x3e, r29	; 62
    dbc2:	df 91       	pop	r29
    dbc4:	cf 91       	pop	r28
    dbc6:	1f 91       	pop	r17
    dbc8:	0f 91       	pop	r16
    dbca:	ff 90       	pop	r15
    dbcc:	ef 90       	pop	r14
    dbce:	df 90       	pop	r13
    dbd0:	cf 90       	pop	r12
    dbd2:	bf 90       	pop	r11
    dbd4:	af 90       	pop	r10
    dbd6:	9f 90       	pop	r9
    dbd8:	8f 90       	pop	r8
    dbda:	7f 90       	pop	r7
    dbdc:	6f 90       	pop	r6
    dbde:	5f 90       	pop	r5
    dbe0:	4f 90       	pop	r4
    dbe2:	08 95       	ret

0000dbe4 <isr_tcc0_ovfl>:
    dbe4:	cf 92       	push	r12
    dbe6:	df 92       	push	r13
    dbe8:	ef 92       	push	r14
    dbea:	ff 92       	push	r15
    dbec:	0f 93       	push	r16
    dbee:	1f 93       	push	r17
    dbf0:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <rtc_get_time>
    dbf4:	21 e0       	ldi	r18, 0x01	; 1
    dbf6:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    dbfa:	20 91 7e 28 	lds	r18, 0x287E	; 0x80287e <g_workmode>
    dbfe:	22 30       	cpi	r18, 0x02	; 2
    dc00:	09 f0       	breq	.+2      	; 0xdc04 <isr_tcc0_ovfl+0x20>
    dc02:	65 c0       	rjmp	.+202    	; 0xdcce <isr_tcc0_ovfl+0xea>
    dc04:	00 91 99 24 	lds	r16, 0x2499	; 0x802499 <last_100ms.8154>
    dc08:	10 91 9a 24 	lds	r17, 0x249A	; 0x80249a <last_100ms.8154+0x1>
    dc0c:	20 91 9b 24 	lds	r18, 0x249B	; 0x80249b <last_100ms.8154+0x2>
    dc10:	30 91 9c 24 	lds	r19, 0x249C	; 0x80249c <last_100ms.8154+0x3>
    dc14:	6b 01       	movw	r12, r22
    dc16:	7c 01       	movw	r14, r24
    dc18:	c0 1a       	sub	r12, r16
    dc1a:	d1 0a       	sbc	r13, r17
    dc1c:	e2 0a       	sbc	r14, r18
    dc1e:	f3 0a       	sbc	r15, r19
    dc20:	46 e6       	ldi	r20, 0x66	; 102
    dc22:	c4 16       	cp	r12, r20
    dc24:	d1 04       	cpc	r13, r1
    dc26:	e1 04       	cpc	r14, r1
    dc28:	f1 04       	cpc	r15, r1
    dc2a:	28 f4       	brcc	.+10     	; 0xdc36 <isr_tcc0_ovfl+0x52>
    dc2c:	60 17       	cp	r22, r16
    dc2e:	71 07       	cpc	r23, r17
    dc30:	82 07       	cpc	r24, r18
    dc32:	93 07       	cpc	r25, r19
    dc34:	58 f4       	brcc	.+22     	; 0xdc4c <isr_tcc0_ovfl+0x68>
    dc36:	60 93 99 24 	sts	0x2499, r22	; 0x802499 <last_100ms.8154>
    dc3a:	70 93 9a 24 	sts	0x249A, r23	; 0x80249a <last_100ms.8154+0x1>
    dc3e:	80 93 9b 24 	sts	0x249B, r24	; 0x80249b <last_100ms.8154+0x2>
    dc42:	90 93 9c 24 	sts	0x249C, r25	; 0x80249c <last_100ms.8154+0x3>
    dc46:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <isr_100ms_twi1_onboard>
    dc4a:	41 c0       	rjmp	.+130    	; 0xdcce <isr_tcc0_ovfl+0xea>
    dc4c:	00 91 95 24 	lds	r16, 0x2495	; 0x802495 <last_500ms.8155>
    dc50:	10 91 96 24 	lds	r17, 0x2496	; 0x802496 <last_500ms.8155+0x1>
    dc54:	20 91 97 24 	lds	r18, 0x2497	; 0x802497 <last_500ms.8155+0x2>
    dc58:	30 91 98 24 	lds	r19, 0x2498	; 0x802498 <last_500ms.8155+0x3>
    dc5c:	6b 01       	movw	r12, r22
    dc5e:	7c 01       	movw	r14, r24
    dc60:	c0 1a       	sub	r12, r16
    dc62:	d1 0a       	sbc	r13, r17
    dc64:	e2 0a       	sbc	r14, r18
    dc66:	f3 0a       	sbc	r15, r19
    dc68:	c1 14       	cp	r12, r1
    dc6a:	42 e0       	ldi	r20, 0x02	; 2
    dc6c:	d4 06       	cpc	r13, r20
    dc6e:	e1 04       	cpc	r14, r1
    dc70:	f1 04       	cpc	r15, r1
    dc72:	28 f4       	brcc	.+10     	; 0xdc7e <isr_tcc0_ovfl+0x9a>
    dc74:	60 17       	cp	r22, r16
    dc76:	71 07       	cpc	r23, r17
    dc78:	82 07       	cpc	r24, r18
    dc7a:	93 07       	cpc	r25, r19
    dc7c:	30 f5       	brcc	.+76     	; 0xdcca <isr_tcc0_ovfl+0xe6>
    dc7e:	60 93 95 24 	sts	0x2495, r22	; 0x802495 <last_500ms.8155>
    dc82:	70 93 96 24 	sts	0x2496, r23	; 0x802496 <last_500ms.8155+0x1>
    dc86:	80 93 97 24 	sts	0x2497, r24	; 0x802497 <last_500ms.8155+0x2>
    dc8a:	90 93 98 24 	sts	0x2498, r25	; 0x802498 <last_500ms.8155+0x3>
    dc8e:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <isr_500ms_twi1_onboard>
    dc92:	c1 2c       	mov	r12, r1
    dc94:	e1 2c       	mov	r14, r1
    dc96:	01 e0       	ldi	r16, 0x01	; 1
    dc98:	24 e6       	ldi	r18, 0x64	; 100
    dc9a:	30 e0       	ldi	r19, 0x00	; 0
    dc9c:	40 e0       	ldi	r20, 0x00	; 0
    dc9e:	50 e0       	ldi	r21, 0x00	; 0
    dca0:	60 e0       	ldi	r22, 0x00	; 0
    dca2:	8c e5       	ldi	r24, 0x5C	; 92
    dca4:	91 e6       	ldi	r25, 0x61	; 97
    dca6:	5e dc       	rcall	.-1860   	; 0xd564 <sched_push>
    dca8:	24 e6       	ldi	r18, 0x64	; 100
    dcaa:	30 e0       	ldi	r19, 0x00	; 0
    dcac:	40 e0       	ldi	r20, 0x00	; 0
    dcae:	50 e0       	ldi	r21, 0x00	; 0
    dcb0:	60 e0       	ldi	r22, 0x00	; 0
    dcb2:	8a e5       	ldi	r24, 0x5A	; 90
    dcb4:	90 e6       	ldi	r25, 0x60	; 96
    dcb6:	56 dc       	rcall	.-1876   	; 0xd564 <sched_push>
    dcb8:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <rtc_get_time>
    dcbc:	6e 5f       	subi	r22, 0xFE	; 254
    dcbe:	7f 4f       	sbci	r23, 0xFF	; 255
    dcc0:	8f 4f       	sbci	r24, 0xFF	; 255
    dcc2:	9f 4f       	sbci	r25, 0xFF	; 255
    dcc4:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <rtc_set_alarm>
    dcc8:	02 c0       	rjmp	.+4      	; 0xdcce <isr_tcc0_ovfl+0xea>
    dcca:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <isr_sparetime_twi1_onboard>
    dcce:	1f 91       	pop	r17
    dcd0:	0f 91       	pop	r16
    dcd2:	ff 90       	pop	r15
    dcd4:	ef 90       	pop	r14
    dcd6:	df 90       	pop	r13
    dcd8:	cf 90       	pop	r12
    dcda:	08 95       	ret

0000dcdc <sched_pop>:
    dcdc:	7f 92       	push	r7
    dcde:	8f 92       	push	r8
    dce0:	9f 92       	push	r9
    dce2:	af 92       	push	r10
    dce4:	bf 92       	push	r11
    dce6:	cf 92       	push	r12
    dce8:	df 92       	push	r13
    dcea:	ef 92       	push	r14
    dcec:	ff 92       	push	r15
    dcee:	0f 93       	push	r16
    dcf0:	1f 93       	push	r17
    dcf2:	cf 93       	push	r28
    dcf4:	df 93       	push	r29
    dcf6:	1f 92       	push	r1
    dcf8:	cd b7       	in	r28, 0x3d	; 61
    dcfa:	de b7       	in	r29, 0x3e	; 62
    dcfc:	4b 01       	movw	r8, r22
    dcfe:	5c 01       	movw	r10, r24
    dd00:	8f e5       	ldi	r24, 0x5F	; 95
    dd02:	96 e2       	ldi	r25, 0x26	; 38
    dd04:	ca db       	rcall	.-2156   	; 0xd49a <sched_getLock>
    dd06:	81 11       	cpse	r24, r1
    dd08:	04 c0       	rjmp	.+8      	; 0xdd12 <sched_pop+0x36>
    dd0a:	81 e0       	ldi	r24, 0x01	; 1
    dd0c:	80 93 5b 26 	sts	0x265B, r24	; 0x80265b <g_sched_pop_again>
    dd10:	bd c0       	rjmp	.+378    	; 0xde8c <sched_pop+0x1b0>
    dd12:	70 90 5b 25 	lds	r7, 0x255B	; 0x80255b <g_sched_sort>
    dd16:	77 20       	and	r7, r7
    dd18:	09 f4       	brne	.+2      	; 0xdd1c <sched_pop+0x40>
    dd1a:	b4 c0       	rjmp	.+360    	; 0xde84 <sched_pop+0x1a8>
    dd1c:	87 2d       	mov	r24, r7
    dd1e:	90 e0       	ldi	r25, 0x00	; 0
    dd20:	01 97       	sbiw	r24, 0x01	; 1
    dd22:	fc 01       	movw	r30, r24
    dd24:	ee 0f       	add	r30, r30
    dd26:	ff 1f       	adc	r31, r31
    dd28:	ee 0f       	add	r30, r30
    dd2a:	ff 1f       	adc	r31, r31
    dd2c:	ee 0f       	add	r30, r30
    dd2e:	ff 1f       	adc	r31, r31
    dd30:	e8 1b       	sub	r30, r24
    dd32:	f9 0b       	sbc	r31, r25
    dd34:	ef 57       	subi	r30, 0x7F	; 127
    dd36:	fa 4d       	sbci	r31, 0xDA	; 218
    dd38:	20 81       	ld	r18, Z
    dd3a:	20 ff       	sbrs	r18, 0
    dd3c:	a3 c0       	rjmp	.+326    	; 0xde84 <sched_pop+0x1a8>
    dd3e:	fc 01       	movw	r30, r24
    dd40:	ee 0f       	add	r30, r30
    dd42:	ff 1f       	adc	r31, r31
    dd44:	ee 0f       	add	r30, r30
    dd46:	ff 1f       	adc	r31, r31
    dd48:	ee 0f       	add	r30, r30
    dd4a:	ff 1f       	adc	r31, r31
    dd4c:	e8 1b       	sub	r30, r24
    dd4e:	f9 0b       	sbc	r31, r25
    dd50:	e5 58       	subi	r30, 0x85	; 133
    dd52:	fa 4d       	sbci	r31, 0xDA	; 218
    dd54:	c0 80       	ld	r12, Z
    dd56:	d1 80       	ldd	r13, Z+1	; 0x01
    dd58:	e2 80       	ldd	r14, Z+2	; 0x02
    dd5a:	f3 80       	ldd	r15, Z+3	; 0x03
    dd5c:	0b e5       	ldi	r16, 0x5B	; 91
    dd5e:	15 e2       	ldi	r17, 0x25	; 37
    dd60:	74 c0       	rjmp	.+232    	; 0xde4a <sched_pop+0x16e>
    dd62:	87 2d       	mov	r24, r7
    dd64:	90 e0       	ldi	r25, 0x00	; 0
    dd66:	01 97       	sbiw	r24, 0x01	; 1
    dd68:	dc 01       	movw	r26, r24
    dd6a:	aa 0f       	add	r26, r26
    dd6c:	bb 1f       	adc	r27, r27
    dd6e:	aa 0f       	add	r26, r26
    dd70:	bb 1f       	adc	r27, r27
    dd72:	aa 0f       	add	r26, r26
    dd74:	bb 1f       	adc	r27, r27
    dd76:	a8 1b       	sub	r26, r24
    dd78:	b9 0b       	sbc	r27, r25
    dd7a:	fd 01       	movw	r30, r26
    dd7c:	e5 58       	subi	r30, 0x85	; 133
    dd7e:	fa 4d       	sbci	r31, 0xDA	; 218
    dd80:	04 80       	ldd	r0, Z+4	; 0x04
    dd82:	f5 81       	ldd	r31, Z+5	; 0x05
    dd84:	e0 2d       	mov	r30, r0
    dd86:	af 57       	subi	r26, 0x7F	; 127
    dd88:	ba 4d       	sbci	r27, 0xDA	; 218
    dd8a:	6c 91       	ld	r22, X
    dd8c:	66 95       	lsr	r22
    dd8e:	66 95       	lsr	r22
    dd90:	66 95       	lsr	r22
    dd92:	63 70       	andi	r22, 0x03	; 3
    dd94:	8c 91       	ld	r24, X
    dd96:	81 fb       	bst	r24, 1
    dd98:	77 27       	eor	r23, r23
    dd9a:	70 f9       	bld	r23, 0
    dd9c:	4c 91       	ld	r20, X
    dd9e:	42 fb       	bst	r20, 2
    dda0:	44 27       	eor	r20, r20
    dda2:	40 f9       	bld	r20, 0
    dda4:	8c 91       	ld	r24, X
    dda6:	8e 7f       	andi	r24, 0xFE	; 254
    dda8:	8c 93       	st	X, r24
    ddaa:	80 e0       	ldi	r24, 0x00	; 0
    ddac:	90 e0       	ldi	r25, 0x00	; 0
    ddae:	9c 01       	movw	r18, r24
    ddb0:	2f 5f       	subi	r18, 0xFF	; 255
    ddb2:	3f 4f       	sbci	r19, 0xFF	; 255
    ddb4:	d9 01       	movw	r26, r18
    ddb6:	a5 5a       	subi	r26, 0xA5	; 165
    ddb8:	ba 4d       	sbci	r27, 0xDA	; 218
    ddba:	5c 91       	ld	r21, X
    ddbc:	dc 01       	movw	r26, r24
    ddbe:	a5 5a       	subi	r26, 0xA5	; 165
    ddc0:	ba 4d       	sbci	r27, 0xDA	; 218
    ddc2:	5c 93       	st	X, r21
    ddc4:	c9 01       	movw	r24, r18
    ddc6:	2f 31       	cpi	r18, 0x1F	; 31
    ddc8:	31 05       	cpc	r19, r1
    ddca:	89 f7       	brne	.-30     	; 0xddae <sched_pop+0xd2>
    ddcc:	d8 01       	movw	r26, r16
    ddce:	5f 96       	adiw	r26, 0x1f	; 31
    ddd0:	1c 92       	st	X, r1
    ddd2:	30 97       	sbiw	r30, 0x00	; 0
    ddd4:	b1 f0       	breq	.+44     	; 0xde02 <sched_pop+0x126>
    ddd6:	8f b7       	in	r24, 0x3f	; 63
    ddd8:	89 83       	std	Y+1, r24	; 0x01
    ddda:	f8 94       	cli
    dddc:	79 80       	ldd	r7, Y+1	; 0x01
    ddde:	77 23       	and	r23, r23
    dde0:	11 f0       	breq	.+4      	; 0xdde6 <sched_pop+0x10a>
    dde2:	f8 94       	cli
    dde4:	01 c0       	rjmp	.+2      	; 0xdde8 <sched_pop+0x10c>
    dde6:	78 94       	sei
    dde8:	66 23       	and	r22, r22
    ddea:	19 f0       	breq	.+6      	; 0xddf2 <sched_pop+0x116>
    ddec:	61 30       	cpi	r22, 0x01	; 1
    ddee:	29 f0       	breq	.+10     	; 0xddfa <sched_pop+0x11e>
    ddf0:	07 c0       	rjmp	.+14     	; 0xde00 <sched_pop+0x124>
    ddf2:	c7 01       	movw	r24, r14
    ddf4:	b6 01       	movw	r22, r12
    ddf6:	19 95       	eicall
    ddf8:	03 c0       	rjmp	.+6      	; 0xde00 <sched_pop+0x124>
    ddfa:	c7 01       	movw	r24, r14
    ddfc:	b6 01       	movw	r22, r12
    ddfe:	19 95       	eicall
    de00:	7f be       	out	0x3f, r7	; 63
    de02:	f8 01       	movw	r30, r16
    de04:	70 80       	ld	r7, Z
    de06:	77 20       	and	r7, r7
    de08:	41 f1       	breq	.+80     	; 0xde5a <sched_pop+0x17e>
    de0a:	87 2d       	mov	r24, r7
    de0c:	90 e0       	ldi	r25, 0x00	; 0
    de0e:	01 97       	sbiw	r24, 0x01	; 1
    de10:	fc 01       	movw	r30, r24
    de12:	ee 0f       	add	r30, r30
    de14:	ff 1f       	adc	r31, r31
    de16:	ee 0f       	add	r30, r30
    de18:	ff 1f       	adc	r31, r31
    de1a:	ee 0f       	add	r30, r30
    de1c:	ff 1f       	adc	r31, r31
    de1e:	e8 1b       	sub	r30, r24
    de20:	f9 0b       	sbc	r31, r25
    de22:	ef 57       	subi	r30, 0x7F	; 127
    de24:	fa 4d       	sbci	r31, 0xDA	; 218
    de26:	20 81       	ld	r18, Z
    de28:	20 ff       	sbrs	r18, 0
    de2a:	17 c0       	rjmp	.+46     	; 0xde5a <sched_pop+0x17e>
    de2c:	fc 01       	movw	r30, r24
    de2e:	ee 0f       	add	r30, r30
    de30:	ff 1f       	adc	r31, r31
    de32:	ee 0f       	add	r30, r30
    de34:	ff 1f       	adc	r31, r31
    de36:	ee 0f       	add	r30, r30
    de38:	ff 1f       	adc	r31, r31
    de3a:	e8 1b       	sub	r30, r24
    de3c:	f9 0b       	sbc	r31, r25
    de3e:	e5 58       	subi	r30, 0x85	; 133
    de40:	fa 4d       	sbci	r31, 0xDA	; 218
    de42:	c0 80       	ld	r12, Z
    de44:	d1 80       	ldd	r13, Z+1	; 0x01
    de46:	e2 80       	ldd	r14, Z+2	; 0x02
    de48:	f3 80       	ldd	r15, Z+3	; 0x03
    de4a:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <rtc_get_time>
    de4e:	6c 15       	cp	r22, r12
    de50:	7d 05       	cpc	r23, r13
    de52:	8e 05       	cpc	r24, r14
    de54:	9f 05       	cpc	r25, r15
    de56:	08 f0       	brcs	.+2      	; 0xde5a <sched_pop+0x17e>
    de58:	84 cf       	rjmp	.-248    	; 0xdd62 <sched_pop+0x86>
    de5a:	8f e5       	ldi	r24, 0x5F	; 95
    de5c:	96 e2       	ldi	r25, 0x26	; 38
    de5e:	35 db       	rcall	.-2454   	; 0xd4ca <sched_freeLock>
    de60:	c1 14       	cp	r12, r1
    de62:	d1 04       	cpc	r13, r1
    de64:	e1 04       	cpc	r14, r1
    de66:	f1 04       	cpc	r15, r1
    de68:	19 f0       	breq	.+6      	; 0xde70 <sched_pop+0x194>
    de6a:	c7 01       	movw	r24, r14
    de6c:	b6 01       	movw	r22, r12
    de6e:	3d db       	rcall	.-2438   	; 0xd4ea <sched_set_alarm>
    de70:	80 91 5b 26 	lds	r24, 0x265B	; 0x80265b <g_sched_pop_again>
    de74:	88 23       	and	r24, r24
    de76:	51 f0       	breq	.+20     	; 0xde8c <sched_pop+0x1b0>
    de78:	10 92 5b 26 	sts	0x265B, r1	; 0x80265b <g_sched_pop_again>
    de7c:	c5 01       	movw	r24, r10
    de7e:	b4 01       	movw	r22, r8
    de80:	2d df       	rcall	.-422    	; 0xdcdc <sched_pop>
    de82:	04 c0       	rjmp	.+8      	; 0xde8c <sched_pop+0x1b0>
    de84:	8f e5       	ldi	r24, 0x5F	; 95
    de86:	96 e2       	ldi	r25, 0x26	; 38
    de88:	20 db       	rcall	.-2496   	; 0xd4ca <sched_freeLock>
    de8a:	f2 cf       	rjmp	.-28     	; 0xde70 <sched_pop+0x194>
    de8c:	0f 90       	pop	r0
    de8e:	df 91       	pop	r29
    de90:	cf 91       	pop	r28
    de92:	1f 91       	pop	r17
    de94:	0f 91       	pop	r16
    de96:	ff 90       	pop	r15
    de98:	ef 90       	pop	r14
    de9a:	df 90       	pop	r13
    de9c:	cf 90       	pop	r12
    de9e:	bf 90       	pop	r11
    dea0:	af 90       	pop	r10
    dea2:	9f 90       	pop	r9
    dea4:	8f 90       	pop	r8
    dea6:	7f 90       	pop	r7
    dea8:	08 95       	ret

0000deaa <isr_rtc_alarm>:
    deaa:	78 94       	sei
    deac:	17 cf       	rjmp	.-466    	; 0xdcdc <sched_pop>
    deae:	08 95       	ret

0000deb0 <yield_ms>:
    deb0:	cf 92       	push	r12
    deb2:	ef 92       	push	r14
    deb4:	0f 93       	push	r16
    deb6:	1f 93       	push	r17
    deb8:	cf 93       	push	r28
    deba:	df 93       	push	r29
    debc:	1f 92       	push	r1
    debe:	cd b7       	in	r28, 0x3d	; 61
    dec0:	de b7       	in	r29, 0x3e	; 62
    dec2:	2f b7       	in	r18, 0x3f	; 63
    dec4:	29 83       	std	Y+1, r18	; 0x01
    dec6:	f8 94       	cli
    dec8:	19 81       	ldd	r17, Y+1	; 0x01
    deca:	78 94       	sei
    decc:	21 e0       	ldi	r18, 0x01	; 1
    dece:	20 93 5c 26 	sts	0x265C, r18	; 0x80265c <g_sched_yield>
    ded2:	9c 01       	movw	r18, r24
    ded4:	40 e0       	ldi	r20, 0x00	; 0
    ded6:	50 e0       	ldi	r21, 0x00	; 0
    ded8:	c1 2c       	mov	r12, r1
    deda:	e1 2c       	mov	r14, r1
    dedc:	01 e0       	ldi	r16, 0x01	; 1
    dede:	60 e0       	ldi	r22, 0x00	; 0
    dee0:	82 e4       	ldi	r24, 0x42	; 66
    dee2:	9e e5       	ldi	r25, 0x5E	; 94
    dee4:	3f db       	rcall	.-2434   	; 0xd564 <sched_push>
    dee6:	1b db       	rcall	.-2506   	; 0xd51e <sched_doSleep>
    dee8:	80 91 5c 26 	lds	r24, 0x265C	; 0x80265c <g_sched_yield>
    deec:	81 11       	cpse	r24, r1
    deee:	fb cf       	rjmp	.-10     	; 0xdee6 <yield_ms+0x36>
    def0:	1f bf       	out	0x3f, r17	; 63
    def2:	0f 90       	pop	r0
    def4:	df 91       	pop	r29
    def6:	cf 91       	pop	r28
    def8:	1f 91       	pop	r17
    defa:	0f 91       	pop	r16
    defc:	ef 90       	pop	r14
    defe:	cf 90       	pop	r12
    df00:	08 95       	ret

0000df02 <__vector_4>:
    df02:	1f 92       	push	r1
    df04:	0f 92       	push	r0
    df06:	0f b6       	in	r0, 0x3f	; 63
    df08:	0f 92       	push	r0
    df0a:	11 24       	eor	r1, r1
    df0c:	8f 93       	push	r24
    df0e:	9f 93       	push	r25
    df10:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    df14:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    df18:	80 93 8e 28 	sts	0x288E, r24	; 0x80288e <g_1pps_last_lo>
    df1c:	90 93 8f 28 	sts	0x288F, r25	; 0x80288f <g_1pps_last_lo+0x1>
    df20:	80 91 90 28 	lds	r24, 0x2890	; 0x802890 <g_milliseconds_cnt64>
    df24:	80 93 86 28 	sts	0x2886, r24	; 0x802886 <g_1pps_last_hi>
    df28:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <g_milliseconds_cnt64+0x1>
    df2c:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <g_1pps_last_hi+0x1>
    df30:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <g_milliseconds_cnt64+0x2>
    df34:	80 93 88 28 	sts	0x2888, r24	; 0x802888 <g_1pps_last_hi+0x2>
    df38:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <g_milliseconds_cnt64+0x3>
    df3c:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <g_1pps_last_hi+0x3>
    df40:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <g_milliseconds_cnt64+0x4>
    df44:	80 93 8a 28 	sts	0x288A, r24	; 0x80288a <g_1pps_last_hi+0x4>
    df48:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <g_milliseconds_cnt64+0x5>
    df4c:	80 93 8b 28 	sts	0x288B, r24	; 0x80288b <g_1pps_last_hi+0x5>
    df50:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <g_milliseconds_cnt64+0x6>
    df54:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <g_1pps_last_hi+0x6>
    df58:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <g_milliseconds_cnt64+0x7>
    df5c:	80 93 8d 28 	sts	0x288D, r24	; 0x80288d <g_1pps_last_hi+0x7>
    df60:	81 e0       	ldi	r24, 0x01	; 1
    df62:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <g_1pps_last_new>
    df66:	9f 91       	pop	r25
    df68:	8f 91       	pop	r24
    df6a:	0f 90       	pop	r0
    df6c:	0f be       	out	0x3f, r0	; 63
    df6e:	0f 90       	pop	r0
    df70:	1f 90       	pop	r1
    df72:	18 95       	reti

0000df74 <main>:
    df74:	cf 92       	push	r12
    df76:	df 92       	push	r13
    df78:	ef 92       	push	r14
    df7a:	ff 92       	push	r15
    df7c:	0f 93       	push	r16
    df7e:	1f 93       	push	r17
    df80:	cf 93       	push	r28
    df82:	df 93       	push	r29
    df84:	cd b7       	in	r28, 0x3d	; 61
    df86:	de b7       	in	r29, 0x3e	; 62
    df88:	a4 97       	sbiw	r28, 0x24	; 36
    df8a:	cd bf       	out	0x3d, r28	; 61
    df8c:	de bf       	out	0x3e, r29	; 62
    df8e:	40 e2       	ldi	r20, 0x20	; 32
    df90:	6b ef       	ldi	r22, 0xFB	; 251
    df92:	7d e2       	ldi	r23, 0x2D	; 45
    df94:	85 ef       	ldi	r24, 0xF5	; 245
    df96:	9d e2       	ldi	r25, 0x2D	; 45
    df98:	0e 94 13 26 	call	0x4c26	; 0x4c26 <fifo_init>
    df9c:	11 e0       	ldi	r17, 0x01	; 1
    df9e:	10 93 7e 28 	sts	0x287E, r17	; 0x80287e <g_workmode>
    dfa2:	e0 ea       	ldi	r30, 0xA0	; 160
    dfa4:	f0 e0       	ldi	r31, 0x00	; 0
    dfa6:	87 e0       	ldi	r24, 0x07	; 7
    dfa8:	82 83       	std	Z+2, r24	; 0x02
    dfaa:	82 83       	std	Z+2, r24	; 0x02
    dfac:	82 81       	ldd	r24, Z+2	; 0x02
    dfae:	8f 77       	andi	r24, 0x7F	; 127
    dfb0:	82 83       	std	Z+2, r24	; 0x02
    dfb2:	11 82       	std	Z+1, r1	; 0x01
    dfb4:	80 d2       	rcall	.+1280   	; 0xe4b6 <sysclk_init>
    dfb6:	eb e7       	ldi	r30, 0x7B	; 123
    dfb8:	fe e2       	ldi	r31, 0x2E	; 46
    dfba:	10 82       	st	Z, r1
    dfbc:	11 82       	std	Z+1, r1	; 0x01
    dfbe:	12 82       	std	Z+2, r1	; 0x02
    dfc0:	13 82       	std	Z+3, r1	; 0x03
    dfc2:	14 82       	std	Z+4, r1	; 0x04
    dfc4:	15 83       	std	Z+5, r17	; 0x05
    dfc6:	0e 94 d7 27 	call	0x4fae	; 0x4fae <rtc_init>
    dfca:	85 e5       	ldi	r24, 0x55	; 85
    dfcc:	9f e6       	ldi	r25, 0x6F	; 111
    dfce:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <rtc_set_callback>
    dfd2:	19 82       	std	Y+1, r1	; 0x01
    dfd4:	1a 82       	std	Y+2, r1	; 0x02
    dfd6:	1b 82       	std	Y+3, r1	; 0x03
    dfd8:	1c 82       	std	Y+4, r1	; 0x04
    dfda:	14 e0       	ldi	r17, 0x04	; 4
    dfdc:	e1 2e       	mov	r14, r17
    dfde:	f1 2c       	mov	r15, r1
    dfe0:	00 e0       	ldi	r16, 0x00	; 0
    dfe2:	10 e0       	ldi	r17, 0x00	; 0
    dfe4:	9e 01       	movw	r18, r28
    dfe6:	2f 5f       	subi	r18, 0xFF	; 255
    dfe8:	3f 4f       	sbci	r19, 0xFF	; 255
    dfea:	40 e1       	ldi	r20, 0x10	; 16
    dfec:	50 e0       	ldi	r21, 0x00	; 0
    dfee:	60 e0       	ldi	r22, 0x00	; 0
    dff0:	70 e0       	ldi	r23, 0x00	; 0
    dff2:	82 e0       	ldi	r24, 0x02	; 2
    dff4:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    dff8:	81 11       	cpse	r24, r1
    dffa:	11 c0       	rjmp	.+34     	; 0xe01e <main+0xaa>
    dffc:	8f b7       	in	r24, 0x3f	; 63
    dffe:	8c a3       	std	Y+36, r24	; 0x24
    e000:	f8 94       	cli
    e002:	8c a1       	ldd	r24, Y+36	; 0x24
    e004:	49 81       	ldd	r20, Y+1	; 0x01
    e006:	5a 81       	ldd	r21, Y+2	; 0x02
    e008:	6b 81       	ldd	r22, Y+3	; 0x03
    e00a:	7c 81       	ldd	r23, Y+4	; 0x04
    e00c:	40 93 e4 26 	sts	0x26E4, r20	; 0x8026e4 <g_xo_mode_pwm>
    e010:	50 93 e5 26 	sts	0x26E5, r21	; 0x8026e5 <g_xo_mode_pwm+0x1>
    e014:	60 93 e6 26 	sts	0x26E6, r22	; 0x8026e6 <g_xo_mode_pwm+0x2>
    e018:	70 93 e7 26 	sts	0x26E7, r23	; 0x8026e7 <g_xo_mode_pwm+0x3>
    e01c:	8f bf       	out	0x3f, r24	; 63
    e01e:	19 82       	std	Y+1, r1	; 0x01
    e020:	1a 82       	std	Y+2, r1	; 0x02
    e022:	12 e0       	ldi	r17, 0x02	; 2
    e024:	e1 2e       	mov	r14, r17
    e026:	f1 2c       	mov	r15, r1
    e028:	00 e0       	ldi	r16, 0x00	; 0
    e02a:	10 e0       	ldi	r17, 0x00	; 0
    e02c:	9e 01       	movw	r18, r28
    e02e:	2f 5f       	subi	r18, 0xFF	; 255
    e030:	3f 4f       	sbci	r19, 0xFF	; 255
    e032:	44 e1       	ldi	r20, 0x14	; 20
    e034:	50 e0       	ldi	r21, 0x00	; 0
    e036:	60 e0       	ldi	r22, 0x00	; 0
    e038:	70 e0       	ldi	r23, 0x00	; 0
    e03a:	82 e0       	ldi	r24, 0x02	; 2
    e03c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e040:	81 11       	cpse	r24, r1
    e042:	0b c0       	rjmp	.+22     	; 0xe05a <main+0xe6>
    e044:	8f b7       	in	r24, 0x3f	; 63
    e046:	8b a3       	std	Y+35, r24	; 0x23
    e048:	f8 94       	cli
    e04a:	8b a1       	ldd	r24, Y+35	; 0x23
    e04c:	29 81       	ldd	r18, Y+1	; 0x01
    e04e:	3a 81       	ldd	r19, Y+2	; 0x02
    e050:	20 93 9b 28 	sts	0x289B, r18	; 0x80289b <g_backlight_mode_pwm>
    e054:	30 93 9c 28 	sts	0x289C, r19	; 0x80289c <g_backlight_mode_pwm+0x1>
    e058:	8f bf       	out	0x3f, r24	; 63
    e05a:	19 82       	std	Y+1, r1	; 0x01
    e05c:	e1 2c       	mov	r14, r1
    e05e:	f1 2c       	mov	r15, r1
    e060:	87 01       	movw	r16, r14
    e062:	e3 94       	inc	r14
    e064:	9e 01       	movw	r18, r28
    e066:	2f 5f       	subi	r18, 0xFF	; 255
    e068:	3f 4f       	sbci	r19, 0xFF	; 255
    e06a:	46 e1       	ldi	r20, 0x16	; 22
    e06c:	50 e0       	ldi	r21, 0x00	; 0
    e06e:	60 e0       	ldi	r22, 0x00	; 0
    e070:	70 e0       	ldi	r23, 0x00	; 0
    e072:	82 e0       	ldi	r24, 0x02	; 2
    e074:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e078:	81 11       	cpse	r24, r1
    e07a:	0e c0       	rjmp	.+28     	; 0xe098 <main+0x124>
    e07c:	8f b7       	in	r24, 0x3f	; 63
    e07e:	8a a3       	std	Y+34, r24	; 0x22
    e080:	f8 94       	cli
    e082:	9a a1       	ldd	r25, Y+34	; 0x22
    e084:	89 81       	ldd	r24, Y+1	; 0x01
    e086:	28 2f       	mov	r18, r24
    e088:	21 70       	andi	r18, 0x01	; 1
    e08a:	20 93 99 28 	sts	0x2899, r18	; 0x802899 <g_errorBeep_enable>
    e08e:	86 95       	lsr	r24
    e090:	81 70       	andi	r24, 0x01	; 1
    e092:	80 93 98 28 	sts	0x2898, r24	; 0x802898 <g_keyBeep_enable>
    e096:	9f bf       	out	0x3f, r25	; 63
    e098:	19 82       	std	Y+1, r1	; 0x01
    e09a:	e1 2c       	mov	r14, r1
    e09c:	f1 2c       	mov	r15, r1
    e09e:	87 01       	movw	r16, r14
    e0a0:	e3 94       	inc	r14
    e0a2:	9e 01       	movw	r18, r28
    e0a4:	2f 5f       	subi	r18, 0xFF	; 255
    e0a6:	3f 4f       	sbci	r19, 0xFF	; 255
    e0a8:	47 e1       	ldi	r20, 0x17	; 23
    e0aa:	50 e0       	ldi	r21, 0x00	; 0
    e0ac:	60 e0       	ldi	r22, 0x00	; 0
    e0ae:	70 e0       	ldi	r23, 0x00	; 0
    e0b0:	82 e0       	ldi	r24, 0x02	; 2
    e0b2:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e0b6:	81 11       	cpse	r24, r1
    e0b8:	08 c0       	rjmp	.+16     	; 0xe0ca <main+0x156>
    e0ba:	8f b7       	in	r24, 0x3f	; 63
    e0bc:	89 a3       	std	Y+33, r24	; 0x21
    e0be:	f8 94       	cli
    e0c0:	89 a1       	ldd	r24, Y+33	; 0x21
    e0c2:	99 81       	ldd	r25, Y+1	; 0x01
    e0c4:	90 93 9a 28 	sts	0x289A, r25	; 0x80289a <g_pitch_tone_mode>
    e0c8:	8f bf       	out	0x3f, r24	; 63
    e0ca:	19 82       	std	Y+1, r1	; 0x01
    e0cc:	e1 2c       	mov	r14, r1
    e0ce:	f1 2c       	mov	r15, r1
    e0d0:	87 01       	movw	r16, r14
    e0d2:	e3 94       	inc	r14
    e0d4:	9e 01       	movw	r18, r28
    e0d6:	2f 5f       	subi	r18, 0xFF	; 255
    e0d8:	3f 4f       	sbci	r19, 0xFF	; 255
    e0da:	48 e1       	ldi	r20, 0x18	; 24
    e0dc:	50 e0       	ldi	r21, 0x00	; 0
    e0de:	60 e0       	ldi	r22, 0x00	; 0
    e0e0:	70 e0       	ldi	r23, 0x00	; 0
    e0e2:	82 e0       	ldi	r24, 0x02	; 2
    e0e4:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e0e8:	81 11       	cpse	r24, r1
    e0ea:	0e c0       	rjmp	.+28     	; 0xe108 <main+0x194>
    e0ec:	8f b7       	in	r24, 0x3f	; 63
    e0ee:	88 a3       	std	Y+32, r24	; 0x20
    e0f0:	f8 94       	cli
    e0f2:	98 a1       	ldd	r25, Y+32	; 0x20
    e0f4:	89 81       	ldd	r24, Y+1	; 0x01
    e0f6:	28 2f       	mov	r18, r24
    e0f8:	21 70       	andi	r18, 0x01	; 1
    e0fa:	20 93 83 28 	sts	0x2883, r18	; 0x802883 <g_usb_cdc_printStatusLines_atxmega>
    e0fe:	86 95       	lsr	r24
    e100:	81 70       	andi	r24, 0x01	; 1
    e102:	80 93 82 28 	sts	0x2882, r24	; 0x802882 <g_usb_cdc_printStatusLines_sim808>
    e106:	9f bf       	out	0x3f, r25	; 63
    e108:	1d 8e       	std	Y+29, r1	; 0x1d
    e10a:	1e 8e       	std	Y+30, r1	; 0x1e
    e10c:	1b 8e       	std	Y+27, r1	; 0x1b
    e10e:	1c 8e       	std	Y+28, r1	; 0x1c
    e110:	19 8e       	std	Y+25, r1	; 0x19
    e112:	1a 8e       	std	Y+26, r1	; 0x1a
    e114:	1f 8a       	std	Y+23, r1	; 0x17
    e116:	18 8e       	std	Y+24, r1	; 0x18
    e118:	1d 8a       	std	Y+21, r1	; 0x15
    e11a:	1e 8a       	std	Y+22, r1	; 0x16
    e11c:	1b 8a       	std	Y+19, r1	; 0x13
    e11e:	1c 8a       	std	Y+20, r1	; 0x14
    e120:	19 8a       	std	Y+17, r1	; 0x11
    e122:	1a 8a       	std	Y+18, r1	; 0x12
    e124:	1f 86       	std	Y+15, r1	; 0x0f
    e126:	18 8a       	std	Y+16, r1	; 0x10
    e128:	1d 86       	std	Y+13, r1	; 0x0d
    e12a:	1e 86       	std	Y+14, r1	; 0x0e
    e12c:	1b 86       	std	Y+11, r1	; 0x0b
    e12e:	1c 86       	std	Y+12, r1	; 0x0c
    e130:	19 86       	std	Y+9, r1	; 0x09
    e132:	1a 86       	std	Y+10, r1	; 0x0a
    e134:	1f 82       	std	Y+7, r1	; 0x07
    e136:	18 86       	std	Y+8, r1	; 0x08
    e138:	1d 82       	std	Y+5, r1	; 0x05
    e13a:	1e 82       	std	Y+6, r1	; 0x06
    e13c:	19 82       	std	Y+1, r1	; 0x01
    e13e:	1a 82       	std	Y+2, r1	; 0x02
    e140:	12 e0       	ldi	r17, 0x02	; 2
    e142:	e1 2e       	mov	r14, r17
    e144:	f1 2c       	mov	r15, r1
    e146:	00 e0       	ldi	r16, 0x00	; 0
    e148:	10 e0       	ldi	r17, 0x00	; 0
    e14a:	9e 01       	movw	r18, r28
    e14c:	23 5e       	subi	r18, 0xE3	; 227
    e14e:	3f 4f       	sbci	r19, 0xFF	; 255
    e150:	4c e1       	ldi	r20, 0x1C	; 28
    e152:	50 e0       	ldi	r21, 0x00	; 0
    e154:	60 e0       	ldi	r22, 0x00	; 0
    e156:	70 e0       	ldi	r23, 0x00	; 0
    e158:	82 e0       	ldi	r24, 0x02	; 2
    e15a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e15e:	9e 01       	movw	r18, r28
    e160:	25 5e       	subi	r18, 0xE5	; 229
    e162:	3f 4f       	sbci	r19, 0xFF	; 255
    e164:	4e e1       	ldi	r20, 0x1E	; 30
    e166:	50 e0       	ldi	r21, 0x00	; 0
    e168:	60 e0       	ldi	r22, 0x00	; 0
    e16a:	70 e0       	ldi	r23, 0x00	; 0
    e16c:	82 e0       	ldi	r24, 0x02	; 2
    e16e:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e172:	9e 01       	movw	r18, r28
    e174:	27 5e       	subi	r18, 0xE7	; 231
    e176:	3f 4f       	sbci	r19, 0xFF	; 255
    e178:	40 e2       	ldi	r20, 0x20	; 32
    e17a:	50 e0       	ldi	r21, 0x00	; 0
    e17c:	60 e0       	ldi	r22, 0x00	; 0
    e17e:	70 e0       	ldi	r23, 0x00	; 0
    e180:	82 e0       	ldi	r24, 0x02	; 2
    e182:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e186:	9e 01       	movw	r18, r28
    e188:	29 5e       	subi	r18, 0xE9	; 233
    e18a:	3f 4f       	sbci	r19, 0xFF	; 255
    e18c:	42 e2       	ldi	r20, 0x22	; 34
    e18e:	50 e0       	ldi	r21, 0x00	; 0
    e190:	60 e0       	ldi	r22, 0x00	; 0
    e192:	70 e0       	ldi	r23, 0x00	; 0
    e194:	82 e0       	ldi	r24, 0x02	; 2
    e196:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e19a:	9e 01       	movw	r18, r28
    e19c:	2b 5e       	subi	r18, 0xEB	; 235
    e19e:	3f 4f       	sbci	r19, 0xFF	; 255
    e1a0:	44 e2       	ldi	r20, 0x24	; 36
    e1a2:	50 e0       	ldi	r21, 0x00	; 0
    e1a4:	60 e0       	ldi	r22, 0x00	; 0
    e1a6:	70 e0       	ldi	r23, 0x00	; 0
    e1a8:	82 e0       	ldi	r24, 0x02	; 2
    e1aa:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e1ae:	9e 01       	movw	r18, r28
    e1b0:	2d 5e       	subi	r18, 0xED	; 237
    e1b2:	3f 4f       	sbci	r19, 0xFF	; 255
    e1b4:	48 e2       	ldi	r20, 0x28	; 40
    e1b6:	50 e0       	ldi	r21, 0x00	; 0
    e1b8:	60 e0       	ldi	r22, 0x00	; 0
    e1ba:	70 e0       	ldi	r23, 0x00	; 0
    e1bc:	82 e0       	ldi	r24, 0x02	; 2
    e1be:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e1c2:	9e 01       	movw	r18, r28
    e1c4:	2f 5e       	subi	r18, 0xEF	; 239
    e1c6:	3f 4f       	sbci	r19, 0xFF	; 255
    e1c8:	4a e2       	ldi	r20, 0x2A	; 42
    e1ca:	50 e0       	ldi	r21, 0x00	; 0
    e1cc:	60 e0       	ldi	r22, 0x00	; 0
    e1ce:	70 e0       	ldi	r23, 0x00	; 0
    e1d0:	82 e0       	ldi	r24, 0x02	; 2
    e1d2:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e1d6:	9e 01       	movw	r18, r28
    e1d8:	21 5f       	subi	r18, 0xF1	; 241
    e1da:	3f 4f       	sbci	r19, 0xFF	; 255
    e1dc:	4c e2       	ldi	r20, 0x2C	; 44
    e1de:	50 e0       	ldi	r21, 0x00	; 0
    e1e0:	60 e0       	ldi	r22, 0x00	; 0
    e1e2:	70 e0       	ldi	r23, 0x00	; 0
    e1e4:	82 e0       	ldi	r24, 0x02	; 2
    e1e6:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e1ea:	9e 01       	movw	r18, r28
    e1ec:	23 5f       	subi	r18, 0xF3	; 243
    e1ee:	3f 4f       	sbci	r19, 0xFF	; 255
    e1f0:	40 e3       	ldi	r20, 0x30	; 48
    e1f2:	50 e0       	ldi	r21, 0x00	; 0
    e1f4:	60 e0       	ldi	r22, 0x00	; 0
    e1f6:	70 e0       	ldi	r23, 0x00	; 0
    e1f8:	82 e0       	ldi	r24, 0x02	; 2
    e1fa:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e1fe:	9e 01       	movw	r18, r28
    e200:	25 5f       	subi	r18, 0xF5	; 245
    e202:	3f 4f       	sbci	r19, 0xFF	; 255
    e204:	42 e3       	ldi	r20, 0x32	; 50
    e206:	50 e0       	ldi	r21, 0x00	; 0
    e208:	60 e0       	ldi	r22, 0x00	; 0
    e20a:	70 e0       	ldi	r23, 0x00	; 0
    e20c:	82 e0       	ldi	r24, 0x02	; 2
    e20e:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e212:	9e 01       	movw	r18, r28
    e214:	27 5f       	subi	r18, 0xF7	; 247
    e216:	3f 4f       	sbci	r19, 0xFF	; 255
    e218:	44 e3       	ldi	r20, 0x34	; 52
    e21a:	50 e0       	ldi	r21, 0x00	; 0
    e21c:	60 e0       	ldi	r22, 0x00	; 0
    e21e:	70 e0       	ldi	r23, 0x00	; 0
    e220:	82 e0       	ldi	r24, 0x02	; 2
    e222:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e226:	9e 01       	movw	r18, r28
    e228:	29 5f       	subi	r18, 0xF9	; 249
    e22a:	3f 4f       	sbci	r19, 0xFF	; 255
    e22c:	48 e4       	ldi	r20, 0x48	; 72
    e22e:	50 e0       	ldi	r21, 0x00	; 0
    e230:	60 e0       	ldi	r22, 0x00	; 0
    e232:	70 e0       	ldi	r23, 0x00	; 0
    e234:	82 e0       	ldi	r24, 0x02	; 2
    e236:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e23a:	9e 01       	movw	r18, r28
    e23c:	2b 5f       	subi	r18, 0xFB	; 251
    e23e:	3f 4f       	sbci	r19, 0xFF	; 255
    e240:	4a e4       	ldi	r20, 0x4A	; 74
    e242:	50 e0       	ldi	r21, 0x00	; 0
    e244:	60 e0       	ldi	r22, 0x00	; 0
    e246:	70 e0       	ldi	r23, 0x00	; 0
    e248:	82 e0       	ldi	r24, 0x02	; 2
    e24a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e24e:	9e 01       	movw	r18, r28
    e250:	2f 5f       	subi	r18, 0xFF	; 255
    e252:	3f 4f       	sbci	r19, 0xFF	; 255
    e254:	4c e4       	ldi	r20, 0x4C	; 76
    e256:	50 e0       	ldi	r21, 0x00	; 0
    e258:	60 e0       	ldi	r22, 0x00	; 0
    e25a:	70 e0       	ldi	r23, 0x00	; 0
    e25c:	82 e0       	ldi	r24, 0x02	; 2
    e25e:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <nvm_read>
    e262:	8b 89       	ldd	r24, Y+19	; 0x13
    e264:	9c 89       	ldd	r25, Y+20	; 0x14
    e266:	89 2b       	or	r24, r25
    e268:	a1 f0       	breq	.+40     	; 0xe292 <main+0x31e>
    e26a:	89 89       	ldd	r24, Y+17	; 0x11
    e26c:	9a 89       	ldd	r25, Y+18	; 0x12
    e26e:	89 2b       	or	r24, r25
    e270:	81 f0       	breq	.+32     	; 0xe292 <main+0x31e>
    e272:	8f 85       	ldd	r24, Y+15	; 0x0f
    e274:	98 89       	ldd	r25, Y+16	; 0x10
    e276:	89 2b       	or	r24, r25
    e278:	61 f0       	breq	.+24     	; 0xe292 <main+0x31e>
    e27a:	8f 81       	ldd	r24, Y+7	; 0x07
    e27c:	98 85       	ldd	r25, Y+8	; 0x08
    e27e:	89 2b       	or	r24, r25
    e280:	41 f0       	breq	.+16     	; 0xe292 <main+0x31e>
    e282:	8d 81       	ldd	r24, Y+5	; 0x05
    e284:	9e 81       	ldd	r25, Y+6	; 0x06
    e286:	89 2b       	or	r24, r25
    e288:	21 f0       	breq	.+8      	; 0xe292 <main+0x31e>
    e28a:	89 81       	ldd	r24, Y+1	; 0x01
    e28c:	9a 81       	ldd	r25, Y+2	; 0x02
    e28e:	89 2b       	or	r24, r25
    e290:	21 f4       	brne	.+8      	; 0xe29a <main+0x326>
    e292:	80 e0       	ldi	r24, 0x00	; 0
    e294:	0e 94 bf 68 	call	0xd17e	; 0xd17e <calibration_mode>
    e298:	59 c0       	rjmp	.+178    	; 0xe34c <main+0x3d8>
    e29a:	8f b7       	in	r24, 0x3f	; 63
    e29c:	8f 8f       	std	Y+31, r24	; 0x1f
    e29e:	f8 94       	cli
    e2a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    e2a2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    e2a4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    e2a6:	20 93 6e 27 	sts	0x276E, r18	; 0x80276e <g_twi1_gyro_1_temp_RTofs>
    e2aa:	30 93 6f 27 	sts	0x276F, r19	; 0x80276f <g_twi1_gyro_1_temp_RTofs+0x1>
    e2ae:	2b 8d       	ldd	r18, Y+27	; 0x1b
    e2b0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    e2b2:	20 93 6c 27 	sts	0x276C, r18	; 0x80276c <g_twi1_gyro_1_temp_sens>
    e2b6:	30 93 6d 27 	sts	0x276D, r19	; 0x80276d <g_twi1_gyro_1_temp_sens+0x1>
    e2ba:	29 8d       	ldd	r18, Y+25	; 0x19
    e2bc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    e2be:	20 93 62 27 	sts	0x2762, r18	; 0x802762 <g_twi1_gyro_1_accel_ofsx>
    e2c2:	30 93 63 27 	sts	0x2763, r19	; 0x802763 <g_twi1_gyro_1_accel_ofsx+0x1>
    e2c6:	2f 89       	ldd	r18, Y+23	; 0x17
    e2c8:	38 8d       	ldd	r19, Y+24	; 0x18
    e2ca:	20 93 60 27 	sts	0x2760, r18	; 0x802760 <g_twi1_gyro_1_accel_ofsy>
    e2ce:	30 93 61 27 	sts	0x2761, r19	; 0x802761 <g_twi1_gyro_1_accel_ofsy+0x1>
    e2d2:	2d 89       	ldd	r18, Y+21	; 0x15
    e2d4:	3e 89       	ldd	r19, Y+22	; 0x16
    e2d6:	20 93 5e 27 	sts	0x275E, r18	; 0x80275e <g_twi1_gyro_1_accel_ofsz>
    e2da:	30 93 5f 27 	sts	0x275F, r19	; 0x80275f <g_twi1_gyro_1_accel_ofsz+0x1>
    e2de:	2b 89       	ldd	r18, Y+19	; 0x13
    e2e0:	3c 89       	ldd	r19, Y+20	; 0x14
    e2e2:	20 93 5c 27 	sts	0x275C, r18	; 0x80275c <g_twi1_gyro_1_accel_factx>
    e2e6:	30 93 5d 27 	sts	0x275D, r19	; 0x80275d <g_twi1_gyro_1_accel_factx+0x1>
    e2ea:	29 89       	ldd	r18, Y+17	; 0x11
    e2ec:	3a 89       	ldd	r19, Y+18	; 0x12
    e2ee:	20 93 5a 27 	sts	0x275A, r18	; 0x80275a <g_twi1_gyro_1_accel_facty>
    e2f2:	30 93 5b 27 	sts	0x275B, r19	; 0x80275b <g_twi1_gyro_1_accel_facty+0x1>
    e2f6:	2f 85       	ldd	r18, Y+15	; 0x0f
    e2f8:	38 89       	ldd	r19, Y+16	; 0x10
    e2fa:	20 93 58 27 	sts	0x2758, r18	; 0x802758 <g_twi1_gyro_1_accel_factz>
    e2fe:	30 93 59 27 	sts	0x2759, r19	; 0x802759 <g_twi1_gyro_1_accel_factz+0x1>
    e302:	2d 85       	ldd	r18, Y+13	; 0x0d
    e304:	3e 85       	ldd	r19, Y+14	; 0x0e
    e306:	20 93 4a 27 	sts	0x274A, r18	; 0x80274a <g_twi1_gyro_1_gyro_ofsx>
    e30a:	30 93 4b 27 	sts	0x274B, r19	; 0x80274b <g_twi1_gyro_1_gyro_ofsx+0x1>
    e30e:	2b 85       	ldd	r18, Y+11	; 0x0b
    e310:	3c 85       	ldd	r19, Y+12	; 0x0c
    e312:	20 93 48 27 	sts	0x2748, r18	; 0x802748 <g_twi1_gyro_1_gyro_ofsy>
    e316:	30 93 49 27 	sts	0x2749, r19	; 0x802749 <g_twi1_gyro_1_gyro_ofsy+0x1>
    e31a:	29 85       	ldd	r18, Y+9	; 0x09
    e31c:	3a 85       	ldd	r19, Y+10	; 0x0a
    e31e:	20 93 46 27 	sts	0x2746, r18	; 0x802746 <g_twi1_gyro_1_gyro_ofsz>
    e322:	30 93 47 27 	sts	0x2747, r19	; 0x802747 <g_twi1_gyro_1_gyro_ofsz+0x1>
    e326:	2f 81       	ldd	r18, Y+7	; 0x07
    e328:	38 85       	ldd	r19, Y+8	; 0x08
    e32a:	20 93 27 27 	sts	0x2727, r18	; 0x802727 <g_twi1_gyro_2_mag_factx>
    e32e:	30 93 28 27 	sts	0x2728, r19	; 0x802728 <g_twi1_gyro_2_mag_factx+0x1>
    e332:	2d 81       	ldd	r18, Y+5	; 0x05
    e334:	3e 81       	ldd	r19, Y+6	; 0x06
    e336:	20 93 25 27 	sts	0x2725, r18	; 0x802725 <g_twi1_gyro_2_mag_facty>
    e33a:	30 93 26 27 	sts	0x2726, r19	; 0x802726 <g_twi1_gyro_2_mag_facty+0x1>
    e33e:	29 81       	ldd	r18, Y+1	; 0x01
    e340:	3a 81       	ldd	r19, Y+2	; 0x02
    e342:	20 93 23 27 	sts	0x2723, r18	; 0x802723 <g_twi1_gyro_2_mag_factz>
    e346:	30 93 24 27 	sts	0x2724, r19	; 0x802724 <g_twi1_gyro_2_mag_factz+0x1>
    e34a:	8f bf       	out	0x3f, r24	; 63
    e34c:	81 e0       	ldi	r24, 0x01	; 1
    e34e:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7007e2>
    e352:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7007f0>
    e356:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7007ea>
    e35a:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7007eb>
    e35e:	80 93 e9 07 	sts	0x07E9, r24	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7007e9>
    e362:	62 e0       	ldi	r22, 0x02	; 2
    e364:	80 e0       	ldi	r24, 0x00	; 0
    e366:	28 d1       	rcall	.+592    	; 0xe5b8 <sysclk_enable_module>
    e368:	e0 e8       	ldi	r30, 0x80	; 128
    e36a:	f1 e0       	ldi	r31, 0x01	; 1
    e36c:	86 ec       	ldi	r24, 0xC6	; 198
    e36e:	80 83       	st	Z, r24
    e370:	10 86       	std	Z+8, r1	; 0x08
    e372:	81 83       	std	Z+1, r24	; 0x01
    e374:	11 86       	std	Z+9, r1	; 0x09
    e376:	82 83       	std	Z+2, r24	; 0x02
    e378:	12 86       	std	Z+10, r1	; 0x0a
    e37a:	83 83       	std	Z+3, r24	; 0x03
    e37c:	13 86       	std	Z+11, r1	; 0x0b
    e37e:	88 ee       	ldi	r24, 0xE8	; 232
    e380:	84 83       	std	Z+4, r24	; 0x04
    e382:	14 86       	std	Z+12, r1	; 0x0c
    e384:	0e 94 b5 62 	call	0xc56a	; 0xc56a <tc_init>
    e388:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <serial_init>
    e38c:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    e390:	81 11       	cpse	r24, r1
    e392:	0e 94 c4 64 	call	0xc988	; 0xc988 <adc_init>
    e396:	80 91 9d 28 	lds	r24, 0x289D	; 0x80289d <g_dac_enabled>
    e39a:	81 11       	cpse	r24, r1
    e39c:	0e 94 46 63 	call	0xc68c	; 0xc68c <dac_init>
    e3a0:	0e 94 b8 35 	call	0x6b70	; 0x6b70 <twi_init>
    e3a4:	0e 94 d6 47 	call	0x8fac	; 0x8fac <board_init>
    e3a8:	80 e0       	ldi	r24, 0x00	; 0
    e3aa:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <nvm_init>
    e3ae:	78 94       	sei
    e3b0:	0e 94 17 63 	call	0xc62e	; 0xc62e <tc_start>
    e3b4:	80 91 9d 28 	lds	r24, 0x289D	; 0x80289d <g_dac_enabled>
    e3b8:	81 11       	cpse	r24, r1
    e3ba:	0e 94 0f 64 	call	0xc81e	; 0xc81e <dac_start>
    e3be:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    e3c2:	88 23       	and	r24, r24
    e3c4:	09 f4       	brne	.+2      	; 0xe3c8 <main+0x454>
    e3c6:	57 c0       	rjmp	.+174    	; 0xe476 <main+0x502>
    e3c8:	80 e0       	ldi	r24, 0x00	; 0
    e3ca:	92 e0       	ldi	r25, 0x02	; 2
    e3cc:	0e 94 37 48 	call	0x906e	; 0x906e <adc_enable>
    e3d0:	80 e4       	ldi	r24, 0x40	; 64
    e3d2:	92 e0       	ldi	r25, 0x02	; 2
    e3d4:	0e 94 37 48 	call	0x906e	; 0x906e <adc_enable>
    e3d8:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <usb_init>
    e3dc:	0e 94 2d 3b 	call	0x765a	; 0x765a <twi_start>
    e3e0:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <serial_start>
    e3e4:	0e 94 81 28 	call	0x5102	; 0x5102 <printHelp>
    e3e8:	82 e0       	ldi	r24, 0x02	; 2
    e3ea:	0e 94 b9 34 	call	0x6972	; 0x6972 <twi2_set_leds>
    e3ee:	81 e0       	ldi	r24, 0x01	; 1
    e3f0:	80 93 e8 26 	sts	0x26E8, r24	; 0x8026e8 <g_twi2_lcd_repaint>
    e3f4:	82 e0       	ldi	r24, 0x02	; 2
    e3f6:	80 93 7e 28 	sts	0x287E, r24	; 0x80287e <g_workmode>
    e3fa:	82 e0       	ldi	r24, 0x02	; 2
    e3fc:	82 30       	cpi	r24, 0x02	; 2
    e3fe:	71 f4       	brne	.+28     	; 0xe41c <main+0x4a8>
    e400:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <rtc_get_time>
    e404:	6b 01       	movw	r12, r22
    e406:	7c 01       	movw	r14, r24
    e408:	0e 94 26 20 	call	0x404c	; 0x404c <task_serial>
    e40c:	c7 01       	movw	r24, r14
    e40e:	b6 01       	movw	r22, r12
    e410:	0e 94 37 46 	call	0x8c6e	; 0x8c6e <task_twi>
    e414:	c7 01       	movw	r24, r14
    e416:	b6 01       	movw	r22, r12
    e418:	0e 94 67 21 	call	0x42ce	; 0x42ce <task_usb>
    e41c:	80 e0       	ldi	r24, 0x00	; 0
    e41e:	90 e0       	ldi	r25, 0x00	; 0
    e420:	47 dd       	rcall	.-1394   	; 0xdeb0 <yield_ms>
    e422:	80 91 7e 28 	lds	r24, 0x287E	; 0x80287e <g_workmode>
    e426:	81 11       	cpse	r24, r1
    e428:	e9 cf       	rjmp	.-46     	; 0xe3fc <main+0x488>
    e42a:	0e 94 b9 34 	call	0x6972	; 0x6972 <twi2_set_leds>
    e42e:	f8 94       	cli
    e430:	f8 94       	cli
    e432:	80 91 7b 2e 	lds	r24, 0x2E7B	; 0x802e7b <sleepmgr_locks>
    e436:	81 11       	cpse	r24, r1
    e438:	09 c0       	rjmp	.+18     	; 0xe44c <main+0x4d8>
    e43a:	ac e7       	ldi	r26, 0x7C	; 124
    e43c:	be e2       	ldi	r27, 0x2E	; 46
    e43e:	e0 e0       	ldi	r30, 0x00	; 0
    e440:	ef 5f       	subi	r30, 0xFF	; 255
    e442:	8d 91       	ld	r24, X+
    e444:	88 23       	and	r24, r24
    e446:	e1 f3       	breq	.-8      	; 0xe440 <main+0x4cc>
    e448:	e1 11       	cpse	r30, r1
    e44a:	02 c0       	rjmp	.+4      	; 0xe450 <main+0x4dc>
    e44c:	78 94       	sei
    e44e:	25 c0       	rjmp	.+74     	; 0xe49a <main+0x526>
    e450:	a8 e4       	ldi	r26, 0x48	; 72
    e452:	b0 e0       	ldi	r27, 0x00	; 0
    e454:	8c 91       	ld	r24, X
    e456:	f0 e0       	ldi	r31, 0x00	; 0
    e458:	e0 5c       	subi	r30, 0xC0	; 192
    e45a:	ff 4d       	sbci	r31, 0xDF	; 223
    e45c:	81 7f       	andi	r24, 0xF1	; 241
    e45e:	90 81       	ld	r25, Z
    e460:	89 2b       	or	r24, r25
    e462:	8c 93       	st	X, r24
    e464:	8c 91       	ld	r24, X
    e466:	81 60       	ori	r24, 0x01	; 1
    e468:	8c 93       	st	X, r24
    e46a:	78 94       	sei
    e46c:	88 95       	sleep
    e46e:	8c 91       	ld	r24, X
    e470:	8e 7f       	andi	r24, 0xFE	; 254
    e472:	8c 93       	st	X, r24
    e474:	12 c0       	rjmp	.+36     	; 0xe49a <main+0x526>
    e476:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <usb_init>
    e47a:	0e 94 2d 3b 	call	0x765a	; 0x765a <twi_start>
    e47e:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <serial_start>
    e482:	0e 94 81 28 	call	0x5102	; 0x5102 <printHelp>
    e486:	82 e0       	ldi	r24, 0x02	; 2
    e488:	0e 94 b9 34 	call	0x6972	; 0x6972 <twi2_set_leds>
    e48c:	81 e0       	ldi	r24, 0x01	; 1
    e48e:	80 93 e8 26 	sts	0x26E8, r24	; 0x8026e8 <g_twi2_lcd_repaint>
    e492:	82 e0       	ldi	r24, 0x02	; 2
    e494:	80 93 7e 28 	sts	0x287E, r24	; 0x80287e <g_workmode>
    e498:	b0 cf       	rjmp	.-160    	; 0xe3fa <main+0x486>
    e49a:	80 e0       	ldi	r24, 0x00	; 0
    e49c:	90 e0       	ldi	r25, 0x00	; 0
    e49e:	a4 96       	adiw	r28, 0x24	; 36
    e4a0:	cd bf       	out	0x3d, r28	; 61
    e4a2:	de bf       	out	0x3e, r29	; 62
    e4a4:	df 91       	pop	r29
    e4a6:	cf 91       	pop	r28
    e4a8:	1f 91       	pop	r17
    e4aa:	0f 91       	pop	r16
    e4ac:	ff 90       	pop	r15
    e4ae:	ef 90       	pop	r14
    e4b0:	df 90       	pop	r13
    e4b2:	cf 90       	pop	r12
    e4b4:	08 95       	ret

0000e4b6 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    e4b6:	cf 93       	push	r28
    e4b8:	df 93       	push	r29
    e4ba:	cd b7       	in	r28, 0x3d	; 61
    e4bc:	de b7       	in	r29, 0x3e	; 62
    e4be:	28 97       	sbiw	r28, 0x08	; 8
    e4c0:	cd bf       	out	0x3d, r28	; 61
    e4c2:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    e4c4:	8f ef       	ldi	r24, 0xFF	; 255
    e4c6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    e4ca:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    e4ce:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    e4d2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    e4d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    e4da:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    e4de:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    e4e2:	61 e0       	ldi	r22, 0x01	; 1
    e4e4:	81 e4       	ldi	r24, 0x41	; 65
    e4e6:	90 e0       	ldi	r25, 0x00	; 0
    e4e8:	0e 94 eb 7d 	call	0xfbd6	; 0xfbd6 <ccp_write_io>
    e4ec:	6c e1       	ldi	r22, 0x1C	; 28
    e4ee:	70 e0       	ldi	r23, 0x00	; 0
    e4f0:	82 e0       	ldi	r24, 0x02	; 2
    e4f2:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    e4f6:	8a 83       	std	Y+2, r24	; 0x02
    e4f8:	6d e1       	ldi	r22, 0x1D	; 29
    e4fa:	70 e0       	ldi	r23, 0x00	; 0
    e4fc:	82 e0       	ldi	r24, 0x02	; 2
    e4fe:	0e 94 e1 7d 	call	0xfbc2	; 0xfbc2 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    e502:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    e504:	89 81       	ldd	r24, Y+1	; 0x01
    e506:	9a 81       	ldd	r25, Y+2	; 0x02
    e508:	01 96       	adiw	r24, 0x01	; 1
    e50a:	21 f4       	brne	.+8      	; 0xe514 <sysclk_init+0x5e>
		cal = 0x2340;
    e50c:	80 e4       	ldi	r24, 0x40	; 64
    e50e:	93 e2       	ldi	r25, 0x23	; 35
    e510:	89 83       	std	Y+1, r24	; 0x01
    e512:	9a 83       	std	Y+2, r25	; 0x02
    e514:	89 81       	ldd	r24, Y+1	; 0x01
    e516:	9a 81       	ldd	r25, Y+2	; 0x02
    e518:	8b 83       	std	Y+3, r24	; 0x03
    e51a:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    e51c:	e0 e6       	ldi	r30, 0x60	; 96
    e51e:	f0 e0       	ldi	r31, 0x00	; 0
    e520:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    e522:	8c 81       	ldd	r24, Y+4	; 0x04
    e524:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    e526:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    e52a:	84 fd       	sbrc	r24, 4
    e52c:	21 c0       	rjmp	.+66     	; 0xe570 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    e52e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    e532:	83 fd       	sbrc	r24, 3
    e534:	0e c0       	rjmp	.+28     	; 0xe552 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    e536:	e0 e5       	ldi	r30, 0x50	; 80
    e538:	f0 e0       	ldi	r31, 0x00	; 0
    e53a:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e53c:	8f b7       	in	r24, 0x3f	; 63
    e53e:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    e540:	f8 94       	cli
	return flags;
    e542:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    e544:	80 81       	ld	r24, Z
    e546:	88 60       	ori	r24, 0x08	; 8
    e548:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e54a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    e54c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    e54e:	83 ff       	sbrs	r24, 3
    e550:	fd cf       	rjmp	.-6      	; 0xe54c <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e552:	8f b7       	in	r24, 0x3f	; 63
    e554:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    e556:	f8 94       	cli
	return flags;
    e558:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    e55a:	e0 e5       	ldi	r30, 0x50	; 80
    e55c:	f0 e0       	ldi	r31, 0x00	; 0
    e55e:	83 ec       	ldi	r24, 0xC3	; 195
    e560:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    e562:	80 81       	ld	r24, Z
    e564:	80 61       	ori	r24, 0x10	; 16
    e566:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e568:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    e56a:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    e56c:	84 ff       	sbrs	r24, 4
    e56e:	fd cf       	rjmp	.-6      	; 0xe56a <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    e570:	64 e0       	ldi	r22, 0x04	; 4
    e572:	80 e4       	ldi	r24, 0x40	; 64
    e574:	90 e0       	ldi	r25, 0x00	; 0
    e576:	0e 94 eb 7d 	call	0xfbd6	; 0xfbd6 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e57a:	8f b7       	in	r24, 0x3f	; 63
    e57c:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    e57e:	f8 94       	cli
	return flags;
    e580:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    e582:	e0 e5       	ldi	r30, 0x50	; 80
    e584:	f0 e0       	ldi	r31, 0x00	; 0
    e586:	80 81       	ld	r24, Z
    e588:	8e 7f       	andi	r24, 0xFE	; 254
    e58a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e58c:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    e58e:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e590:	8f b7       	in	r24, 0x3f	; 63
    e592:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    e594:	f8 94       	cli
	return flags;
    e596:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    e598:	80 81       	ld	r24, Z
    e59a:	88 60       	ori	r24, 0x08	; 8
    e59c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e59e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    e5a0:	81 81       	ldd	r24, Z+1	; 0x01
    e5a2:	83 ff       	sbrs	r24, 3
    e5a4:	fd cf       	rjmp	.-6      	; 0xe5a0 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    e5a6:	8b e0       	ldi	r24, 0x0B	; 11
    e5a8:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    e5ac:	28 96       	adiw	r28, 0x08	; 8
    e5ae:	cd bf       	out	0x3d, r28	; 61
    e5b0:	de bf       	out	0x3e, r29	; 62
    e5b2:	df 91       	pop	r29
    e5b4:	cf 91       	pop	r28
    e5b6:	08 95       	ret

0000e5b8 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    e5b8:	cf 93       	push	r28
    e5ba:	df 93       	push	r29
    e5bc:	1f 92       	push	r1
    e5be:	cd b7       	in	r28, 0x3d	; 61
    e5c0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e5c2:	9f b7       	in	r25, 0x3f	; 63
    e5c4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    e5c6:	f8 94       	cli
	return flags;
    e5c8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    e5ca:	e8 2f       	mov	r30, r24
    e5cc:	f0 e0       	ldi	r31, 0x00	; 0
    e5ce:	e0 59       	subi	r30, 0x90	; 144
    e5d0:	ff 4f       	sbci	r31, 0xFF	; 255
    e5d2:	60 95       	com	r22
    e5d4:	80 81       	ld	r24, Z
    e5d6:	68 23       	and	r22, r24
    e5d8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e5da:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    e5dc:	0f 90       	pop	r0
    e5de:	df 91       	pop	r29
    e5e0:	cf 91       	pop	r28
    e5e2:	08 95       	ret

0000e5e4 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    e5e4:	cf 93       	push	r28
    e5e6:	df 93       	push	r29
    e5e8:	1f 92       	push	r1
    e5ea:	cd b7       	in	r28, 0x3d	; 61
    e5ec:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e5ee:	9f b7       	in	r25, 0x3f	; 63
    e5f0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    e5f2:	f8 94       	cli
	return flags;
    e5f4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    e5f6:	e8 2f       	mov	r30, r24
    e5f8:	f0 e0       	ldi	r31, 0x00	; 0
    e5fa:	e0 59       	subi	r30, 0x90	; 144
    e5fc:	ff 4f       	sbci	r31, 0xFF	; 255
    e5fe:	80 81       	ld	r24, Z
    e600:	68 2b       	or	r22, r24
    e602:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e604:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    e606:	0f 90       	pop	r0
    e608:	df 91       	pop	r29
    e60a:	cf 91       	pop	r28
    e60c:	08 95       	ret

0000e60e <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    e60e:	cf 93       	push	r28
    e610:	df 93       	push	r29
    e612:	1f 92       	push	r1
    e614:	1f 92       	push	r1
    e616:	cd b7       	in	r28, 0x3d	; 61
    e618:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    e61a:	86 30       	cpi	r24, 0x06	; 6
    e61c:	11 f0       	breq	.+4      	; 0xe622 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    e61e:	60 e0       	ldi	r22, 0x00	; 0
    e620:	01 c0       	rjmp	.+2      	; 0xe624 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    e622:	68 e1       	ldi	r22, 0x18	; 24
    e624:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    e628:	81 fd       	sbrc	r24, 1
    e62a:	2a c0       	rjmp	.+84     	; 0xe680 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e62c:	8f b7       	in	r24, 0x3f	; 63
    e62e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    e630:	f8 94       	cli
	return flags;
    e632:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    e634:	e0 e5       	ldi	r30, 0x50	; 80
    e636:	f0 e0       	ldi	r31, 0x00	; 0
    e638:	80 81       	ld	r24, Z
    e63a:	82 60       	ori	r24, 0x02	; 2
    e63c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e63e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    e640:	81 81       	ldd	r24, Z+1	; 0x01
    e642:	81 ff       	sbrs	r24, 1
    e644:	fd cf       	rjmp	.-6      	; 0xe640 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e646:	8f b7       	in	r24, 0x3f	; 63
    e648:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    e64a:	f8 94       	cli
	return flags;
    e64c:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    e64e:	a0 e5       	ldi	r26, 0x50	; 80
    e650:	b0 e0       	ldi	r27, 0x00	; 0
    e652:	16 96       	adiw	r26, 0x06	; 6
    e654:	8c 91       	ld	r24, X
    e656:	16 97       	sbiw	r26, 0x06	; 6
    e658:	89 7f       	andi	r24, 0xF9	; 249
    e65a:	16 96       	adiw	r26, 0x06	; 6
    e65c:	8c 93       	st	X, r24
    e65e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    e660:	e0 e6       	ldi	r30, 0x60	; 96
    e662:	f0 e0       	ldi	r31, 0x00	; 0
    e664:	80 e8       	ldi	r24, 0x80	; 128
    e666:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    e668:	8b eb       	ldi	r24, 0xBB	; 187
    e66a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    e66c:	16 96       	adiw	r26, 0x06	; 6
    e66e:	8c 91       	ld	r24, X
    e670:	16 97       	sbiw	r26, 0x06	; 6
    e672:	84 60       	ori	r24, 0x04	; 4
    e674:	16 96       	adiw	r26, 0x06	; 6
    e676:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    e678:	80 81       	ld	r24, Z
    e67a:	81 60       	ori	r24, 0x01	; 1
    e67c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e67e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    e680:	63 60       	ori	r22, 0x03	; 3
    e682:	84 e4       	ldi	r24, 0x44	; 68
    e684:	90 e0       	ldi	r25, 0x00	; 0
    e686:	0e 94 eb 7d 	call	0xfbd6	; 0xfbd6 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    e68a:	60 e4       	ldi	r22, 0x40	; 64
    e68c:	80 e0       	ldi	r24, 0x00	; 0
    e68e:	94 df       	rcall	.-216    	; 0xe5b8 <sysclk_enable_module>
}
    e690:	0f 90       	pop	r0
    e692:	0f 90       	pop	r0
    e694:	df 91       	pop	r29
    e696:	cf 91       	pop	r28
    e698:	08 95       	ret

0000e69a <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    e69a:	60 e4       	ldi	r22, 0x40	; 64
    e69c:	80 e0       	ldi	r24, 0x00	; 0
    e69e:	a2 df       	rcall	.-188    	; 0xe5e4 <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    e6a0:	60 e0       	ldi	r22, 0x00	; 0
    e6a2:	84 e4       	ldi	r24, 0x44	; 68
    e6a4:	90 e0       	ldi	r25, 0x00	; 0
    e6a6:	0c 94 eb 7d 	jmp	0xfbd6	; 0xfbd6 <ccp_write_io>
    e6aa:	08 95       	ret

0000e6ac <udi_cdc_comm_disable>:
    e6ac:	80 91 b4 2d 	lds	r24, 0x2DB4	; 0x802db4 <udi_cdc_nb_comm_enabled>
    e6b0:	81 50       	subi	r24, 0x01	; 1
    e6b2:	80 93 b4 2d 	sts	0x2DB4, r24	; 0x802db4 <udi_cdc_nb_comm_enabled>
    e6b6:	08 95       	ret

0000e6b8 <udi_cdc_data_setup>:
    e6b8:	80 e0       	ldi	r24, 0x00	; 0
    e6ba:	08 95       	ret

0000e6bc <udi_cdc_getsetting>:
    e6bc:	80 e0       	ldi	r24, 0x00	; 0
    e6be:	08 95       	ret

0000e6c0 <udi_cdc_line_coding_received>:
    e6c0:	62 ec       	ldi	r22, 0xC2	; 194
    e6c2:	7d e2       	ldi	r23, 0x2D	; 45
    e6c4:	80 e0       	ldi	r24, 0x00	; 0
    e6c6:	0c 94 5d 21 	jmp	0x42ba	; 0x42ba <usb_callback_config>
    e6ca:	08 95       	ret

0000e6cc <udi_cdc_comm_enable>:
    e6cc:	10 92 b4 2d 	sts	0x2DB4, r1	; 0x802db4 <udi_cdc_nb_comm_enabled>
    e6d0:	10 92 c0 2d 	sts	0x2DC0, r1	; 0x802dc0 <udi_cdc_state>
    e6d4:	10 92 c1 2d 	sts	0x2DC1, r1	; 0x802dc1 <udi_cdc_state+0x1>
    e6d8:	e6 eb       	ldi	r30, 0xB6	; 182
    e6da:	fd e2       	ldi	r31, 0x2D	; 45
    e6dc:	81 ea       	ldi	r24, 0xA1	; 161
    e6de:	80 83       	st	Z, r24
    e6e0:	80 e2       	ldi	r24, 0x20	; 32
    e6e2:	81 83       	std	Z+1, r24	; 0x01
    e6e4:	12 82       	std	Z+2, r1	; 0x02
    e6e6:	13 82       	std	Z+3, r1	; 0x03
    e6e8:	14 82       	std	Z+4, r1	; 0x04
    e6ea:	15 82       	std	Z+5, r1	; 0x05
    e6ec:	82 e0       	ldi	r24, 0x02	; 2
    e6ee:	90 e0       	ldi	r25, 0x00	; 0
    e6f0:	86 83       	std	Z+6, r24	; 0x06
    e6f2:	97 83       	std	Z+7, r25	; 0x07
    e6f4:	10 86       	std	Z+8, r1	; 0x08
    e6f6:	11 86       	std	Z+9, r1	; 0x09
    e6f8:	e2 ec       	ldi	r30, 0xC2	; 194
    e6fa:	fd e2       	ldi	r31, 0x2D	; 45
    e6fc:	80 e0       	ldi	r24, 0x00	; 0
    e6fe:	92 ec       	ldi	r25, 0xC2	; 194
    e700:	a1 e0       	ldi	r26, 0x01	; 1
    e702:	b0 e0       	ldi	r27, 0x00	; 0
    e704:	80 83       	st	Z, r24
    e706:	91 83       	std	Z+1, r25	; 0x01
    e708:	a2 83       	std	Z+2, r26	; 0x02
    e70a:	b3 83       	std	Z+3, r27	; 0x03
    e70c:	14 82       	std	Z+4, r1	; 0x04
    e70e:	15 82       	std	Z+5, r1	; 0x05
    e710:	88 e0       	ldi	r24, 0x08	; 8
    e712:	86 83       	std	Z+6, r24	; 0x06
    e714:	bf 01       	movw	r22, r30
    e716:	80 e0       	ldi	r24, 0x00	; 0
    e718:	0e 94 5d 21 	call	0x42ba	; 0x42ba <usb_callback_config>
    e71c:	0e 94 56 21 	call	0x42ac	; 0x42ac <usb_callback_cdc_enable>
    e720:	88 23       	and	r24, r24
    e722:	29 f0       	breq	.+10     	; 0xe72e <udi_cdc_comm_enable+0x62>
    e724:	90 91 b4 2d 	lds	r25, 0x2DB4	; 0x802db4 <udi_cdc_nb_comm_enabled>
    e728:	9f 5f       	subi	r25, 0xFF	; 255
    e72a:	90 93 b4 2d 	sts	0x2DB4, r25	; 0x802db4 <udi_cdc_nb_comm_enabled>
    e72e:	08 95       	ret

0000e730 <udi_cdc_tx_send>:
    e730:	ff 92       	push	r15
    e732:	0f 93       	push	r16
    e734:	1f 93       	push	r17
    e736:	cf 93       	push	r28
    e738:	df 93       	push	r29
    e73a:	1f 92       	push	r1
    e73c:	cd b7       	in	r28, 0x3d	; 61
    e73e:	de b7       	in	r29, 0x3e	; 62
    e740:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <udi_cdc_tx_trans_ongoing>
    e744:	81 11       	cpse	r24, r1
    e746:	9f c0       	rjmp	.+318    	; 0xe886 <udi_cdc_tx_send+0x156>
    e748:	0e 94 c3 58 	call	0xb186	; 0xb186 <udd_is_high_speed>
    e74c:	88 23       	and	r24, r24
    e74e:	51 f0       	breq	.+20     	; 0xe764 <udi_cdc_tx_send+0x34>
    e750:	00 91 a2 28 	lds	r16, 0x28A2	; 0x8028a2 <udi_cdc_tx_sof_num>
    e754:	10 91 a3 28 	lds	r17, 0x28A3	; 0x8028a3 <udi_cdc_tx_sof_num+0x1>
    e758:	0e 94 d0 58 	call	0xb1a0	; 0xb1a0 <udd_get_micro_frame_number>
    e75c:	08 17       	cp	r16, r24
    e75e:	19 07       	cpc	r17, r25
    e760:	59 f4       	brne	.+22     	; 0xe778 <udi_cdc_tx_send+0x48>
    e762:	91 c0       	rjmp	.+290    	; 0xe886 <udi_cdc_tx_send+0x156>
    e764:	00 91 a2 28 	lds	r16, 0x28A2	; 0x8028a2 <udi_cdc_tx_sof_num>
    e768:	10 91 a3 28 	lds	r17, 0x28A3	; 0x8028a3 <udi_cdc_tx_sof_num+0x1>
    e76c:	0e 94 cb 58 	call	0xb196	; 0xb196 <udd_get_frame_number>
    e770:	08 17       	cp	r16, r24
    e772:	19 07       	cpc	r17, r25
    e774:	09 f4       	brne	.+2      	; 0xe778 <udi_cdc_tx_send+0x48>
    e776:	87 c0       	rjmp	.+270    	; 0xe886 <udi_cdc_tx_send+0x156>
    e778:	8f b7       	in	r24, 0x3f	; 63
    e77a:	89 83       	std	Y+1, r24	; 0x01
    e77c:	f8 94       	cli
    e77e:	19 81       	ldd	r17, Y+1	; 0x01
    e780:	00 91 a4 28 	lds	r16, 0x28A4	; 0x8028a4 <udi_cdc_tx_buf_sel>
    e784:	e0 2f       	mov	r30, r16
    e786:	f0 e0       	ldi	r31, 0x00	; 0
    e788:	ee 0f       	add	r30, r30
    e78a:	ff 1f       	adc	r31, r31
    e78c:	eb 55       	subi	r30, 0x5B	; 91
    e78e:	f7 4d       	sbci	r31, 0xD7	; 215
    e790:	80 81       	ld	r24, Z
    e792:	91 81       	ldd	r25, Z+1	; 0x01
    e794:	89 2b       	or	r24, r25
    e796:	09 f5       	brne	.+66     	; 0xe7da <udi_cdc_tx_send+0xaa>
    e798:	80 91 9e 28 	lds	r24, 0x289E	; 0x80289e <sof_zlp_counter.5059>
    e79c:	90 91 9f 28 	lds	r25, 0x289F	; 0x80289f <sof_zlp_counter.5059+0x1>
    e7a0:	01 96       	adiw	r24, 0x01	; 1
    e7a2:	80 93 9e 28 	sts	0x289E, r24	; 0x80289e <sof_zlp_counter.5059>
    e7a6:	90 93 9f 28 	sts	0x289F, r25	; 0x80289f <sof_zlp_counter.5059+0x1>
    e7aa:	0e 94 c3 58 	call	0xb186	; 0xb186 <udd_is_high_speed>
    e7ae:	81 11       	cpse	r24, r1
    e7b0:	07 c0       	rjmp	.+14     	; 0xe7c0 <udi_cdc_tx_send+0x90>
    e7b2:	80 91 9e 28 	lds	r24, 0x289E	; 0x80289e <sof_zlp_counter.5059>
    e7b6:	90 91 9f 28 	lds	r25, 0x289F	; 0x80289f <sof_zlp_counter.5059+0x1>
    e7ba:	84 36       	cpi	r24, 0x64	; 100
    e7bc:	91 05       	cpc	r25, r1
    e7be:	58 f0       	brcs	.+22     	; 0xe7d6 <udi_cdc_tx_send+0xa6>
    e7c0:	0e 94 c3 58 	call	0xb186	; 0xb186 <udd_is_high_speed>
    e7c4:	88 23       	and	r24, r24
    e7c6:	49 f0       	breq	.+18     	; 0xe7da <udi_cdc_tx_send+0xaa>
    e7c8:	80 91 9e 28 	lds	r24, 0x289E	; 0x80289e <sof_zlp_counter.5059>
    e7cc:	90 91 9f 28 	lds	r25, 0x289F	; 0x80289f <sof_zlp_counter.5059+0x1>
    e7d0:	80 32       	cpi	r24, 0x20	; 32
    e7d2:	93 40       	sbci	r25, 0x03	; 3
    e7d4:	10 f4       	brcc	.+4      	; 0xe7da <udi_cdc_tx_send+0xaa>
    e7d6:	1f bf       	out	0x3f, r17	; 63
    e7d8:	56 c0       	rjmp	.+172    	; 0xe886 <udi_cdc_tx_send+0x156>
    e7da:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <sof_zlp_counter.5059>
    e7de:	10 92 9f 28 	sts	0x289F, r1	; 0x80289f <sof_zlp_counter.5059+0x1>
    e7e2:	80 91 a0 28 	lds	r24, 0x28A0	; 0x8028a0 <udi_cdc_tx_both_buf_to_send>
    e7e6:	81 11       	cpse	r24, r1
    e7e8:	06 c0       	rjmp	.+12     	; 0xe7f6 <udi_cdc_tx_send+0xc6>
    e7ea:	81 e0       	ldi	r24, 0x01	; 1
    e7ec:	01 11       	cpse	r16, r1
    e7ee:	80 e0       	ldi	r24, 0x00	; 0
    e7f0:	80 93 a4 28 	sts	0x28A4, r24	; 0x8028a4 <udi_cdc_tx_buf_sel>
    e7f4:	04 c0       	rjmp	.+8      	; 0xe7fe <udi_cdc_tx_send+0xce>
    e7f6:	81 e0       	ldi	r24, 0x01	; 1
    e7f8:	01 11       	cpse	r16, r1
    e7fa:	80 e0       	ldi	r24, 0x00	; 0
    e7fc:	08 2f       	mov	r16, r24
    e7fe:	81 e0       	ldi	r24, 0x01	; 1
    e800:	80 93 a1 28 	sts	0x28A1, r24	; 0x8028a1 <udi_cdc_tx_trans_ongoing>
    e804:	1f bf       	out	0x3f, r17	; 63
    e806:	10 e0       	ldi	r17, 0x00	; 0
    e808:	f8 01       	movw	r30, r16
    e80a:	ee 0f       	add	r30, r30
    e80c:	ff 1f       	adc	r31, r31
    e80e:	eb 55       	subi	r30, 0x5B	; 91
    e810:	f7 4d       	sbci	r31, 0xD7	; 215
    e812:	80 81       	ld	r24, Z
    e814:	91 81       	ldd	r25, Z+1	; 0x01
    e816:	ff 24       	eor	r15, r15
    e818:	f3 94       	inc	r15
    e81a:	80 34       	cpi	r24, 0x40	; 64
    e81c:	21 e0       	ldi	r18, 0x01	; 1
    e81e:	92 07       	cpc	r25, r18
    e820:	09 f4       	brne	.+2      	; 0xe824 <udi_cdc_tx_send+0xf4>
    e822:	f1 2c       	mov	r15, r1
    e824:	80 34       	cpi	r24, 0x40	; 64
    e826:	91 40       	sbci	r25, 0x01	; 1
    e828:	91 f0       	breq	.+36     	; 0xe84e <udi_cdc_tx_send+0x11e>
    e82a:	0e 94 c3 58 	call	0xb186	; 0xb186 <udd_is_high_speed>
    e82e:	88 23       	and	r24, r24
    e830:	39 f0       	breq	.+14     	; 0xe840 <udi_cdc_tx_send+0x110>
    e832:	0e 94 d0 58 	call	0xb1a0	; 0xb1a0 <udd_get_micro_frame_number>
    e836:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <udi_cdc_tx_sof_num>
    e83a:	90 93 a3 28 	sts	0x28A3, r25	; 0x8028a3 <udi_cdc_tx_sof_num+0x1>
    e83e:	0b c0       	rjmp	.+22     	; 0xe856 <udi_cdc_tx_send+0x126>
    e840:	0e 94 cb 58 	call	0xb196	; 0xb196 <udd_get_frame_number>
    e844:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <udi_cdc_tx_sof_num>
    e848:	90 93 a3 28 	sts	0x28A3, r25	; 0x8028a3 <udi_cdc_tx_sof_num+0x1>
    e84c:	04 c0       	rjmp	.+8      	; 0xe856 <udi_cdc_tx_send+0x126>
    e84e:	10 92 a2 28 	sts	0x28A2, r1	; 0x8028a2 <udi_cdc_tx_sof_num>
    e852:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <udi_cdc_tx_sof_num+0x1>
    e856:	f8 01       	movw	r30, r16
    e858:	ee 0f       	add	r30, r30
    e85a:	ff 1f       	adc	r31, r31
    e85c:	eb 55       	subi	r30, 0x5B	; 91
    e85e:	f7 4d       	sbci	r31, 0xD7	; 215
    e860:	20 81       	ld	r18, Z
    e862:	31 81       	ldd	r19, Z+1	; 0x01
    e864:	80 e4       	ldi	r24, 0x40	; 64
    e866:	91 e0       	ldi	r25, 0x01	; 1
    e868:	08 9f       	mul	r16, r24
    e86a:	a0 01       	movw	r20, r0
    e86c:	09 9f       	mul	r16, r25
    e86e:	50 0d       	add	r21, r0
    e870:	18 9f       	mul	r17, r24
    e872:	50 0d       	add	r21, r0
    e874:	11 24       	eor	r1, r1
    e876:	46 55       	subi	r20, 0x56	; 86
    e878:	57 4d       	sbci	r21, 0xD7	; 215
    e87a:	0d e4       	ldi	r16, 0x4D	; 77
    e87c:	14 e7       	ldi	r17, 0x74	; 116
    e87e:	6f 2d       	mov	r22, r15
    e880:	81 e8       	ldi	r24, 0x81	; 129
    e882:	0e 94 b4 59 	call	0xb368	; 0xb368 <udd_ep_run>
    e886:	0f 90       	pop	r0
    e888:	df 91       	pop	r29
    e88a:	cf 91       	pop	r28
    e88c:	1f 91       	pop	r17
    e88e:	0f 91       	pop	r16
    e890:	ff 90       	pop	r15
    e892:	08 95       	ret

0000e894 <udi_cdc_data_sof_notify>:
    e894:	80 e0       	ldi	r24, 0x00	; 0
    e896:	4c cf       	rjmp	.-360    	; 0xe730 <udi_cdc_tx_send>
    e898:	08 95       	ret

0000e89a <udi_cdc_data_sent>:
    e89a:	81 11       	cpse	r24, r1
    e89c:	1a c0       	rjmp	.+52     	; 0xe8d2 <udi_cdc_data_sent+0x38>
    e89e:	20 91 a4 28 	lds	r18, 0x28A4	; 0x8028a4 <udi_cdc_tx_buf_sel>
    e8a2:	81 e0       	ldi	r24, 0x01	; 1
    e8a4:	90 e0       	ldi	r25, 0x00	; 0
    e8a6:	22 23       	and	r18, r18
    e8a8:	11 f0       	breq	.+4      	; 0xe8ae <udi_cdc_data_sent+0x14>
    e8aa:	80 e0       	ldi	r24, 0x00	; 0
    e8ac:	90 e0       	ldi	r25, 0x00	; 0
    e8ae:	88 0f       	add	r24, r24
    e8b0:	99 1f       	adc	r25, r25
    e8b2:	fc 01       	movw	r30, r24
    e8b4:	eb 55       	subi	r30, 0x5B	; 91
    e8b6:	f7 4d       	sbci	r31, 0xD7	; 215
    e8b8:	10 82       	st	Z, r1
    e8ba:	11 82       	std	Z+1, r1	; 0x01
    e8bc:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <udi_cdc_tx_both_buf_to_send>
    e8c0:	10 92 a1 28 	sts	0x28A1, r1	; 0x8028a1 <udi_cdc_tx_trans_ongoing>
    e8c4:	67 2b       	or	r22, r23
    e8c6:	19 f0       	breq	.+6      	; 0xe8ce <udi_cdc_data_sent+0x34>
    e8c8:	80 e0       	ldi	r24, 0x00	; 0
    e8ca:	0e 94 64 21 	call	0x42c8	; 0x42c8 <usb_callback_tx_empty_notify>
    e8ce:	80 e0       	ldi	r24, 0x00	; 0
    e8d0:	2f cf       	rjmp	.-418    	; 0xe730 <udi_cdc_tx_send>
    e8d2:	08 95       	ret

0000e8d4 <udi_cdc_data_disable>:
    e8d4:	80 91 b3 2d 	lds	r24, 0x2DB3	; 0x802db3 <udi_cdc_nb_data_enabled>
    e8d8:	81 50       	subi	r24, 0x01	; 1
    e8da:	80 93 b3 2d 	sts	0x2DB3, r24	; 0x802db3 <udi_cdc_nb_data_enabled>
    e8de:	80 91 b3 2d 	lds	r24, 0x2DB3	; 0x802db3 <udi_cdc_nb_data_enabled>
    e8e2:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <usb_callback_cdc_disable>
    e8e6:	10 92 b2 2d 	sts	0x2DB2, r1	; 0x802db2 <udi_cdc_data_running>
    e8ea:	08 95       	ret

0000e8ec <udi_cdc_comm_setup>:
    e8ec:	cf 93       	push	r28
    e8ee:	df 93       	push	r29
    e8f0:	80 91 e5 2d 	lds	r24, 0x2DE5	; 0x802de5 <udd_g_ctrlreq>
    e8f4:	88 23       	and	r24, r24
    e8f6:	e4 f4       	brge	.+56     	; 0xe930 <udi_cdc_comm_setup+0x44>
    e8f8:	80 76       	andi	r24, 0x60	; 96
    e8fa:	80 32       	cpi	r24, 0x20	; 32
    e8fc:	09 f0       	breq	.+2      	; 0xe900 <udi_cdc_comm_setup+0x14>
    e8fe:	49 c0       	rjmp	.+146    	; 0xe992 <udi_cdc_comm_setup+0xa6>
    e900:	80 91 e6 2d 	lds	r24, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    e904:	81 32       	cpi	r24, 0x21	; 33
    e906:	09 f0       	breq	.+2      	; 0xe90a <udi_cdc_comm_setup+0x1e>
    e908:	46 c0       	rjmp	.+140    	; 0xe996 <udi_cdc_comm_setup+0xaa>
    e90a:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    e90e:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    e912:	07 97       	sbiw	r24, 0x07	; 7
    e914:	09 f0       	breq	.+2      	; 0xe918 <udi_cdc_comm_setup+0x2c>
    e916:	41 c0       	rjmp	.+130    	; 0xe99a <udi_cdc_comm_setup+0xae>
    e918:	e5 ee       	ldi	r30, 0xE5	; 229
    e91a:	fd e2       	ldi	r31, 0x2D	; 45
    e91c:	82 ec       	ldi	r24, 0xC2	; 194
    e91e:	9d e2       	ldi	r25, 0x2D	; 45
    e920:	80 87       	std	Z+8, r24	; 0x08
    e922:	91 87       	std	Z+9, r25	; 0x09
    e924:	87 e0       	ldi	r24, 0x07	; 7
    e926:	90 e0       	ldi	r25, 0x00	; 0
    e928:	82 87       	std	Z+10, r24	; 0x0a
    e92a:	93 87       	std	Z+11, r25	; 0x0b
    e92c:	81 e0       	ldi	r24, 0x01	; 1
    e92e:	3c c0       	rjmp	.+120    	; 0xe9a8 <udi_cdc_comm_setup+0xbc>
    e930:	80 76       	andi	r24, 0x60	; 96
    e932:	80 32       	cpi	r24, 0x20	; 32
    e934:	a1 f5       	brne	.+104    	; 0xe99e <udi_cdc_comm_setup+0xb2>
    e936:	80 91 e6 2d 	lds	r24, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    e93a:	80 32       	cpi	r24, 0x20	; 32
    e93c:	19 f0       	breq	.+6      	; 0xe944 <udi_cdc_comm_setup+0x58>
    e93e:	82 32       	cpi	r24, 0x22	; 34
    e940:	b9 f0       	breq	.+46     	; 0xe970 <udi_cdc_comm_setup+0x84>
    e942:	2f c0       	rjmp	.+94     	; 0xe9a2 <udi_cdc_comm_setup+0xb6>
    e944:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    e948:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    e94c:	07 97       	sbiw	r24, 0x07	; 7
    e94e:	59 f5       	brne	.+86     	; 0xe9a6 <udi_cdc_comm_setup+0xba>
    e950:	e5 ee       	ldi	r30, 0xE5	; 229
    e952:	fd e2       	ldi	r31, 0x2D	; 45
    e954:	80 e6       	ldi	r24, 0x60	; 96
    e956:	93 e7       	ldi	r25, 0x73	; 115
    e958:	84 87       	std	Z+12, r24	; 0x0c
    e95a:	95 87       	std	Z+13, r25	; 0x0d
    e95c:	82 ec       	ldi	r24, 0xC2	; 194
    e95e:	9d e2       	ldi	r25, 0x2D	; 45
    e960:	80 87       	std	Z+8, r24	; 0x08
    e962:	91 87       	std	Z+9, r25	; 0x09
    e964:	87 e0       	ldi	r24, 0x07	; 7
    e966:	90 e0       	ldi	r25, 0x00	; 0
    e968:	82 87       	std	Z+10, r24	; 0x0a
    e96a:	93 87       	std	Z+11, r25	; 0x0b
    e96c:	81 e0       	ldi	r24, 0x01	; 1
    e96e:	1c c0       	rjmp	.+56     	; 0xe9a8 <udi_cdc_comm_setup+0xbc>
    e970:	c5 ee       	ldi	r28, 0xE5	; 229
    e972:	dd e2       	ldi	r29, 0x2D	; 45
    e974:	6a 81       	ldd	r22, Y+2	; 0x02
    e976:	61 70       	andi	r22, 0x01	; 1
    e978:	80 e0       	ldi	r24, 0x00	; 0
    e97a:	0e 94 5e 21 	call	0x42bc	; 0x42bc <usb_callback_cdc_set_dtr>
    e97e:	6a 81       	ldd	r22, Y+2	; 0x02
    e980:	7b 81       	ldd	r23, Y+3	; 0x03
    e982:	76 95       	lsr	r23
    e984:	67 95       	ror	r22
    e986:	61 70       	andi	r22, 0x01	; 1
    e988:	80 e0       	ldi	r24, 0x00	; 0
    e98a:	0e 94 5f 21 	call	0x42be	; 0x42be <usb_callback_cdc_set_rts>
    e98e:	81 e0       	ldi	r24, 0x01	; 1
    e990:	0b c0       	rjmp	.+22     	; 0xe9a8 <udi_cdc_comm_setup+0xbc>
    e992:	80 e0       	ldi	r24, 0x00	; 0
    e994:	09 c0       	rjmp	.+18     	; 0xe9a8 <udi_cdc_comm_setup+0xbc>
    e996:	80 e0       	ldi	r24, 0x00	; 0
    e998:	07 c0       	rjmp	.+14     	; 0xe9a8 <udi_cdc_comm_setup+0xbc>
    e99a:	80 e0       	ldi	r24, 0x00	; 0
    e99c:	05 c0       	rjmp	.+10     	; 0xe9a8 <udi_cdc_comm_setup+0xbc>
    e99e:	80 e0       	ldi	r24, 0x00	; 0
    e9a0:	03 c0       	rjmp	.+6      	; 0xe9a8 <udi_cdc_comm_setup+0xbc>
    e9a2:	80 e0       	ldi	r24, 0x00	; 0
    e9a4:	01 c0       	rjmp	.+2      	; 0xe9a8 <udi_cdc_comm_setup+0xbc>
    e9a6:	80 e0       	ldi	r24, 0x00	; 0
    e9a8:	df 91       	pop	r29
    e9aa:	cf 91       	pop	r28
    e9ac:	08 95       	ret

0000e9ae <udi_cdc_multi_get_nb_received_data>:
    e9ae:	cf 93       	push	r28
    e9b0:	df 93       	push	r29
    e9b2:	1f 92       	push	r1
    e9b4:	cd b7       	in	r28, 0x3d	; 61
    e9b6:	de b7       	in	r29, 0x3e	; 62
    e9b8:	8f b7       	in	r24, 0x3f	; 63
    e9ba:	89 83       	std	Y+1, r24	; 0x01
    e9bc:	f8 94       	cli
    e9be:	49 81       	ldd	r20, Y+1	; 0x01
    e9c0:	20 91 2b 2b 	lds	r18, 0x2B2B	; 0x802b2b <udi_cdc_rx_pos>
    e9c4:	30 91 2c 2b 	lds	r19, 0x2B2C	; 0x802b2c <udi_cdc_rx_pos+0x1>
    e9c8:	e0 91 2d 2b 	lds	r30, 0x2B2D	; 0x802b2d <udi_cdc_rx_buf_sel>
    e9cc:	f0 e0       	ldi	r31, 0x00	; 0
    e9ce:	ee 0f       	add	r30, r30
    e9d0:	ff 1f       	adc	r31, r31
    e9d2:	e2 5d       	subi	r30, 0xD2	; 210
    e9d4:	f4 4d       	sbci	r31, 0xD4	; 212
    e9d6:	80 81       	ld	r24, Z
    e9d8:	91 81       	ldd	r25, Z+1	; 0x01
    e9da:	4f bf       	out	0x3f, r20	; 63
    e9dc:	82 1b       	sub	r24, r18
    e9de:	93 0b       	sbc	r25, r19
    e9e0:	0f 90       	pop	r0
    e9e2:	df 91       	pop	r29
    e9e4:	cf 91       	pop	r28
    e9e6:	08 95       	ret

0000e9e8 <udi_cdc_get_nb_received_data>:
    e9e8:	80 e0       	ldi	r24, 0x00	; 0
    e9ea:	e1 cf       	rjmp	.-62     	; 0xe9ae <udi_cdc_multi_get_nb_received_data>
    e9ec:	08 95       	ret

0000e9ee <udi_cdc_multi_is_rx_ready>:
    e9ee:	df df       	rcall	.-66     	; 0xe9ae <udi_cdc_multi_get_nb_received_data>
    e9f0:	21 e0       	ldi	r18, 0x01	; 1
    e9f2:	89 2b       	or	r24, r25
    e9f4:	09 f4       	brne	.+2      	; 0xe9f8 <udi_cdc_multi_is_rx_ready+0xa>
    e9f6:	20 e0       	ldi	r18, 0x00	; 0
    e9f8:	82 2f       	mov	r24, r18
    e9fa:	08 95       	ret

0000e9fc <udi_cdc_rx_start>:
    e9fc:	0f 93       	push	r16
    e9fe:	1f 93       	push	r17
    ea00:	cf 93       	push	r28
    ea02:	df 93       	push	r29
    ea04:	1f 92       	push	r1
    ea06:	cd b7       	in	r28, 0x3d	; 61
    ea08:	de b7       	in	r29, 0x3e	; 62
    ea0a:	8f b7       	in	r24, 0x3f	; 63
    ea0c:	89 83       	std	Y+1, r24	; 0x01
    ea0e:	f8 94       	cli
    ea10:	99 81       	ldd	r25, Y+1	; 0x01
    ea12:	20 91 2d 2b 	lds	r18, 0x2B2D	; 0x802b2d <udi_cdc_rx_buf_sel>
    ea16:	80 91 2a 2b 	lds	r24, 0x2B2A	; 0x802b2a <udi_cdc_rx_trans_ongoing>
    ea1a:	81 11       	cpse	r24, r1
    ea1c:	10 c0       	rjmp	.+32     	; 0xea3e <udi_cdc_rx_start+0x42>
    ea1e:	60 91 2b 2b 	lds	r22, 0x2B2B	; 0x802b2b <udi_cdc_rx_pos>
    ea22:	70 91 2c 2b 	lds	r23, 0x2B2C	; 0x802b2c <udi_cdc_rx_pos+0x1>
    ea26:	02 2f       	mov	r16, r18
    ea28:	10 e0       	ldi	r17, 0x00	; 0
    ea2a:	f8 01       	movw	r30, r16
    ea2c:	ee 0f       	add	r30, r30
    ea2e:	ff 1f       	adc	r31, r31
    ea30:	e2 5d       	subi	r30, 0xD2	; 210
    ea32:	f4 4d       	sbci	r31, 0xD4	; 212
    ea34:	40 81       	ld	r20, Z
    ea36:	51 81       	ldd	r21, Z+1	; 0x01
    ea38:	64 17       	cp	r22, r20
    ea3a:	75 07       	cpc	r23, r21
    ea3c:	18 f4       	brcc	.+6      	; 0xea44 <udi_cdc_rx_start+0x48>
    ea3e:	9f bf       	out	0x3f, r25	; 63
    ea40:	80 e0       	ldi	r24, 0x00	; 0
    ea42:	27 c0       	rjmp	.+78     	; 0xea92 <udi_cdc_rx_start+0x96>
    ea44:	10 92 2b 2b 	sts	0x2B2B, r1	; 0x802b2b <udi_cdc_rx_pos>
    ea48:	10 92 2c 2b 	sts	0x2B2C, r1	; 0x802b2c <udi_cdc_rx_pos+0x1>
    ea4c:	81 e0       	ldi	r24, 0x01	; 1
    ea4e:	21 11       	cpse	r18, r1
    ea50:	80 e0       	ldi	r24, 0x00	; 0
    ea52:	80 93 2d 2b 	sts	0x2B2D, r24	; 0x802b2d <udi_cdc_rx_buf_sel>
    ea56:	81 e0       	ldi	r24, 0x01	; 1
    ea58:	80 93 2a 2b 	sts	0x2B2A, r24	; 0x802b2a <udi_cdc_rx_trans_ongoing>
    ea5c:	9f bf       	out	0x3f, r25	; 63
    ea5e:	80 e0       	ldi	r24, 0x00	; 0
    ea60:	c6 df       	rcall	.-116    	; 0xe9ee <udi_cdc_multi_is_rx_ready>
    ea62:	88 23       	and	r24, r24
    ea64:	19 f0       	breq	.+6      	; 0xea6c <udi_cdc_rx_start+0x70>
    ea66:	80 e0       	ldi	r24, 0x00	; 0
    ea68:	0e 94 60 21 	call	0x42c0	; 0x42c0 <usb_callback_rx_notify>
    ea6c:	80 e4       	ldi	r24, 0x40	; 64
    ea6e:	91 e0       	ldi	r25, 0x01	; 1
    ea70:	08 9f       	mul	r16, r24
    ea72:	a0 01       	movw	r20, r0
    ea74:	09 9f       	mul	r16, r25
    ea76:	50 0d       	add	r21, r0
    ea78:	18 9f       	mul	r17, r24
    ea7a:	50 0d       	add	r21, r0
    ea7c:	11 24       	eor	r1, r1
    ea7e:	4e 5c       	subi	r20, 0xCE	; 206
    ea80:	54 4d       	sbci	r21, 0xD4	; 212
    ea82:	01 e8       	ldi	r16, 0x81	; 129
    ea84:	15 e7       	ldi	r17, 0x75	; 117
    ea86:	20 e4       	ldi	r18, 0x40	; 64
    ea88:	31 e0       	ldi	r19, 0x01	; 1
    ea8a:	61 e0       	ldi	r22, 0x01	; 1
    ea8c:	82 e0       	ldi	r24, 0x02	; 2
    ea8e:	0e 94 b4 59 	call	0xb368	; 0xb368 <udd_ep_run>
    ea92:	0f 90       	pop	r0
    ea94:	df 91       	pop	r29
    ea96:	cf 91       	pop	r28
    ea98:	1f 91       	pop	r17
    ea9a:	0f 91       	pop	r16
    ea9c:	08 95       	ret

0000ea9e <udi_cdc_data_enable>:
    ea9e:	10 92 b3 2d 	sts	0x2DB3, r1	; 0x802db3 <udi_cdc_nb_data_enabled>
    eaa2:	10 92 a1 28 	sts	0x28A1, r1	; 0x8028a1 <udi_cdc_tx_trans_ongoing>
    eaa6:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <udi_cdc_tx_both_buf_to_send>
    eaaa:	10 92 a4 28 	sts	0x28A4, r1	; 0x8028a4 <udi_cdc_tx_buf_sel>
    eaae:	e5 ea       	ldi	r30, 0xA5	; 165
    eab0:	f8 e2       	ldi	r31, 0x28	; 40
    eab2:	10 82       	st	Z, r1
    eab4:	11 82       	std	Z+1, r1	; 0x01
    eab6:	12 82       	std	Z+2, r1	; 0x02
    eab8:	13 82       	std	Z+3, r1	; 0x03
    eaba:	10 92 a2 28 	sts	0x28A2, r1	; 0x8028a2 <udi_cdc_tx_sof_num>
    eabe:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <udi_cdc_tx_sof_num+0x1>
    eac2:	80 e0       	ldi	r24, 0x00	; 0
    eac4:	35 de       	rcall	.-918    	; 0xe730 <udi_cdc_tx_send>
    eac6:	10 92 2a 2b 	sts	0x2B2A, r1	; 0x802b2a <udi_cdc_rx_trans_ongoing>
    eaca:	10 92 2d 2b 	sts	0x2B2D, r1	; 0x802b2d <udi_cdc_rx_buf_sel>
    eace:	ee e2       	ldi	r30, 0x2E	; 46
    ead0:	fb e2       	ldi	r31, 0x2B	; 43
    ead2:	10 82       	st	Z, r1
    ead4:	11 82       	std	Z+1, r1	; 0x01
    ead6:	12 82       	std	Z+2, r1	; 0x02
    ead8:	13 82       	std	Z+3, r1	; 0x03
    eada:	10 92 2b 2b 	sts	0x2B2B, r1	; 0x802b2b <udi_cdc_rx_pos>
    eade:	10 92 2c 2b 	sts	0x2B2C, r1	; 0x802b2c <udi_cdc_rx_pos+0x1>
    eae2:	80 e0       	ldi	r24, 0x00	; 0
    eae4:	8b df       	rcall	.-234    	; 0xe9fc <udi_cdc_rx_start>
    eae6:	88 23       	and	r24, r24
    eae8:	59 f0       	breq	.+22     	; 0xeb00 <udi_cdc_data_enable+0x62>
    eaea:	90 91 b3 2d 	lds	r25, 0x2DB3	; 0x802db3 <udi_cdc_nb_data_enabled>
    eaee:	9f 5f       	subi	r25, 0xFF	; 255
    eaf0:	90 93 b3 2d 	sts	0x2DB3, r25	; 0x802db3 <udi_cdc_nb_data_enabled>
    eaf4:	90 91 b3 2d 	lds	r25, 0x2DB3	; 0x802db3 <udi_cdc_nb_data_enabled>
    eaf8:	91 30       	cpi	r25, 0x01	; 1
    eafa:	11 f4       	brne	.+4      	; 0xeb00 <udi_cdc_data_enable+0x62>
    eafc:	90 93 b2 2d 	sts	0x2DB2, r25	; 0x802db2 <udi_cdc_data_running>
    eb00:	08 95       	ret

0000eb02 <udi_cdc_data_received>:
    eb02:	0f 93       	push	r16
    eb04:	1f 93       	push	r17
    eb06:	81 11       	cpse	r24, r1
    eb08:	26 c0       	rjmp	.+76     	; 0xeb56 <udi_cdc_data_received+0x54>
    eb0a:	80 91 2d 2b 	lds	r24, 0x2B2D	; 0x802b2d <udi_cdc_rx_buf_sel>
    eb0e:	e1 e0       	ldi	r30, 0x01	; 1
    eb10:	81 11       	cpse	r24, r1
    eb12:	e0 e0       	ldi	r30, 0x00	; 0
    eb14:	84 2f       	mov	r24, r20
    eb16:	61 15       	cp	r22, r1
    eb18:	71 05       	cpc	r23, r1
    eb1a:	91 f4       	brne	.+36     	; 0xeb40 <udi_cdc_data_received+0x3e>
    eb1c:	f0 e0       	ldi	r31, 0x00	; 0
    eb1e:	20 e4       	ldi	r18, 0x40	; 64
    eb20:	31 e0       	ldi	r19, 0x01	; 1
    eb22:	e2 9f       	mul	r30, r18
    eb24:	a0 01       	movw	r20, r0
    eb26:	e3 9f       	mul	r30, r19
    eb28:	50 0d       	add	r21, r0
    eb2a:	f2 9f       	mul	r31, r18
    eb2c:	50 0d       	add	r21, r0
    eb2e:	11 24       	eor	r1, r1
    eb30:	4e 5c       	subi	r20, 0xCE	; 206
    eb32:	54 4d       	sbci	r21, 0xD4	; 212
    eb34:	01 e8       	ldi	r16, 0x81	; 129
    eb36:	15 e7       	ldi	r17, 0x75	; 117
    eb38:	61 e0       	ldi	r22, 0x01	; 1
    eb3a:	0e 94 b4 59 	call	0xb368	; 0xb368 <udd_ep_run>
    eb3e:	0b c0       	rjmp	.+22     	; 0xeb56 <udi_cdc_data_received+0x54>
    eb40:	f0 e0       	ldi	r31, 0x00	; 0
    eb42:	ee 0f       	add	r30, r30
    eb44:	ff 1f       	adc	r31, r31
    eb46:	e2 5d       	subi	r30, 0xD2	; 210
    eb48:	f4 4d       	sbci	r31, 0xD4	; 212
    eb4a:	60 83       	st	Z, r22
    eb4c:	71 83       	std	Z+1, r23	; 0x01
    eb4e:	10 92 2a 2b 	sts	0x2B2A, r1	; 0x802b2a <udi_cdc_rx_trans_ongoing>
    eb52:	80 e0       	ldi	r24, 0x00	; 0
    eb54:	53 df       	rcall	.-346    	; 0xe9fc <udi_cdc_rx_start>
    eb56:	1f 91       	pop	r17
    eb58:	0f 91       	pop	r16
    eb5a:	08 95       	ret

0000eb5c <udi_cdc_multi_getc>:
    eb5c:	cf 92       	push	r12
    eb5e:	df 92       	push	r13
    eb60:	ff 92       	push	r15
    eb62:	0f 93       	push	r16
    eb64:	1f 93       	push	r17
    eb66:	cf 93       	push	r28
    eb68:	df 93       	push	r29
    eb6a:	1f 92       	push	r1
    eb6c:	cd b7       	in	r28, 0x3d	; 61
    eb6e:	de b7       	in	r29, 0x3e	; 62
    eb70:	ff 24       	eor	r15, r15
    eb72:	f3 94       	inc	r15
    eb74:	80 91 c8 2d 	lds	r24, 0x2DC8	; 0x802dc8 <udi_cdc_line_coding+0x6>
    eb78:	89 30       	cpi	r24, 0x09	; 9
    eb7a:	09 f0       	breq	.+2      	; 0xeb7e <udi_cdc_multi_getc+0x22>
    eb7c:	f1 2c       	mov	r15, r1
    eb7e:	a0 e0       	ldi	r26, 0x00	; 0
    eb80:	b0 e0       	ldi	r27, 0x00	; 0
    eb82:	00 e4       	ldi	r16, 0x40	; 64
    eb84:	11 e0       	ldi	r17, 0x01	; 1
    eb86:	8f b7       	in	r24, 0x3f	; 63
    eb88:	89 83       	std	Y+1, r24	; 0x01
    eb8a:	f8 94       	cli
    eb8c:	69 81       	ldd	r22, Y+1	; 0x01
    eb8e:	20 91 2b 2b 	lds	r18, 0x2B2B	; 0x802b2b <udi_cdc_rx_pos>
    eb92:	30 91 2c 2b 	lds	r19, 0x2B2C	; 0x802b2c <udi_cdc_rx_pos+0x1>
    eb96:	80 91 2d 2b 	lds	r24, 0x2B2D	; 0x802b2d <udi_cdc_rx_buf_sel>
    eb9a:	90 e0       	ldi	r25, 0x00	; 0
    eb9c:	fc 01       	movw	r30, r24
    eb9e:	ee 0f       	add	r30, r30
    eba0:	ff 1f       	adc	r31, r31
    eba2:	e2 5d       	subi	r30, 0xD2	; 210
    eba4:	f4 4d       	sbci	r31, 0xD4	; 212
    eba6:	40 81       	ld	r20, Z
    eba8:	51 81       	ldd	r21, Z+1	; 0x01
    ebaa:	6f bf       	out	0x3f, r22	; 63
    ebac:	24 17       	cp	r18, r20
    ebae:	35 07       	cpc	r19, r21
    ebb0:	30 f0       	brcs	.+12     	; 0xebbe <udi_cdc_multi_getc+0x62>
    ebb2:	80 91 b2 2d 	lds	r24, 0x2DB2	; 0x802db2 <udi_cdc_data_running>
    ebb6:	81 11       	cpse	r24, r1
    ebb8:	e6 cf       	rjmp	.-52     	; 0xeb86 <udi_cdc_multi_getc+0x2a>
    ebba:	90 e0       	ldi	r25, 0x00	; 0
    ebbc:	1e c0       	rjmp	.+60     	; 0xebfa <udi_cdc_multi_getc+0x9e>
    ebbe:	80 9f       	mul	r24, r16
    ebc0:	f0 01       	movw	r30, r0
    ebc2:	81 9f       	mul	r24, r17
    ebc4:	f0 0d       	add	r31, r0
    ebc6:	90 9f       	mul	r25, r16
    ebc8:	f0 0d       	add	r31, r0
    ebca:	11 24       	eor	r1, r1
    ebcc:	ee 5c       	subi	r30, 0xCE	; 206
    ebce:	f4 4d       	sbci	r31, 0xD4	; 212
    ebd0:	e2 0f       	add	r30, r18
    ebd2:	f3 1f       	adc	r31, r19
    ebd4:	80 81       	ld	r24, Z
    ebd6:	6d 01       	movw	r12, r26
    ebd8:	c8 2a       	or	r12, r24
    ebda:	2f 5f       	subi	r18, 0xFF	; 255
    ebdc:	3f 4f       	sbci	r19, 0xFF	; 255
    ebde:	20 93 2b 2b 	sts	0x2B2B, r18	; 0x802b2b <udi_cdc_rx_pos>
    ebe2:	30 93 2c 2b 	sts	0x2B2C, r19	; 0x802b2c <udi_cdc_rx_pos+0x1>
    ebe6:	80 e0       	ldi	r24, 0x00	; 0
    ebe8:	09 df       	rcall	.-494    	; 0xe9fc <udi_cdc_rx_start>
    ebea:	ff 20       	and	r15, r15
    ebec:	21 f0       	breq	.+8      	; 0xebf6 <udi_cdc_multi_getc+0x9a>
    ebee:	bc 2d       	mov	r27, r12
    ebf0:	aa 27       	eor	r26, r26
    ebf2:	f1 2c       	mov	r15, r1
    ebf4:	c8 cf       	rjmp	.-112    	; 0xeb86 <udi_cdc_multi_getc+0x2a>
    ebf6:	8c 2d       	mov	r24, r12
    ebf8:	9d 2d       	mov	r25, r13
    ebfa:	0f 90       	pop	r0
    ebfc:	df 91       	pop	r29
    ebfe:	cf 91       	pop	r28
    ec00:	1f 91       	pop	r17
    ec02:	0f 91       	pop	r16
    ec04:	ff 90       	pop	r15
    ec06:	df 90       	pop	r13
    ec08:	cf 90       	pop	r12
    ec0a:	08 95       	ret

0000ec0c <udi_cdc_getc>:
    ec0c:	80 e0       	ldi	r24, 0x00	; 0
    ec0e:	a6 cf       	rjmp	.-180    	; 0xeb5c <udi_cdc_multi_getc>
    ec10:	08 95       	ret

0000ec12 <udi_cdc_read_no_polling>:
    ec12:	ef 92       	push	r14
    ec14:	ff 92       	push	r15
    ec16:	0f 93       	push	r16
    ec18:	1f 93       	push	r17
    ec1a:	cf 93       	push	r28
    ec1c:	df 93       	push	r29
    ec1e:	1f 92       	push	r1
    ec20:	1f 92       	push	r1
    ec22:	cd b7       	in	r28, 0x3d	; 61
    ec24:	de b7       	in	r29, 0x3e	; 62
    ec26:	dc 01       	movw	r26, r24
    ec28:	90 91 b2 2d 	lds	r25, 0x2DB2	; 0x802db2 <udi_cdc_data_running>
    ec2c:	99 23       	and	r25, r25
    ec2e:	09 f4       	brne	.+2      	; 0xec32 <udi_cdc_read_no_polling+0x20>
    ec30:	43 c0       	rjmp	.+134    	; 0xecb8 <udi_cdc_read_no_polling+0xa6>
    ec32:	8f b7       	in	r24, 0x3f	; 63
    ec34:	89 83       	std	Y+1, r24	; 0x01
    ec36:	f8 94       	cli
    ec38:	89 81       	ldd	r24, Y+1	; 0x01
    ec3a:	40 91 2b 2b 	lds	r20, 0x2B2B	; 0x802b2b <udi_cdc_rx_pos>
    ec3e:	50 91 2c 2b 	lds	r21, 0x2B2C	; 0x802b2c <udi_cdc_rx_pos+0x1>
    ec42:	20 91 2d 2b 	lds	r18, 0x2B2D	; 0x802b2d <udi_cdc_rx_buf_sel>
    ec46:	30 e0       	ldi	r19, 0x00	; 0
    ec48:	f9 01       	movw	r30, r18
    ec4a:	ee 0f       	add	r30, r30
    ec4c:	ff 1f       	adc	r31, r31
    ec4e:	e2 5d       	subi	r30, 0xD2	; 210
    ec50:	f4 4d       	sbci	r31, 0xD4	; 212
    ec52:	e0 80       	ld	r14, Z
    ec54:	f1 80       	ldd	r15, Z+1	; 0x01
    ec56:	e4 1a       	sub	r14, r20
    ec58:	f5 0a       	sbc	r15, r21
    ec5a:	8f bf       	out	0x3f, r24	; 63
    ec5c:	06 2f       	mov	r16, r22
    ec5e:	17 2f       	mov	r17, r23
    ec60:	e0 16       	cp	r14, r16
    ec62:	f1 06       	cpc	r15, r17
    ec64:	08 f4       	brcc	.+2      	; 0xec68 <udi_cdc_read_no_polling+0x56>
    ec66:	87 01       	movw	r16, r14
    ec68:	01 15       	cp	r16, r1
    ec6a:	11 05       	cpc	r17, r1
    ec6c:	41 f1       	breq	.+80     	; 0xecbe <udi_cdc_read_no_polling+0xac>
    ec6e:	cd 01       	movw	r24, r26
    ec70:	e0 e4       	ldi	r30, 0x40	; 64
    ec72:	f1 e0       	ldi	r31, 0x01	; 1
    ec74:	2e 9f       	mul	r18, r30
    ec76:	b0 01       	movw	r22, r0
    ec78:	2f 9f       	mul	r18, r31
    ec7a:	70 0d       	add	r23, r0
    ec7c:	3e 9f       	mul	r19, r30
    ec7e:	70 0d       	add	r23, r0
    ec80:	11 24       	eor	r1, r1
    ec82:	64 0f       	add	r22, r20
    ec84:	75 1f       	adc	r23, r21
    ec86:	6e 5c       	subi	r22, 0xCE	; 206
    ec88:	74 4d       	sbci	r23, 0xD4	; 212
    ec8a:	a8 01       	movw	r20, r16
    ec8c:	0e 94 eb 88 	call	0x111d6	; 0x111d6 <memcpy>
    ec90:	8f b7       	in	r24, 0x3f	; 63
    ec92:	8a 83       	std	Y+2, r24	; 0x02
    ec94:	f8 94       	cli
    ec96:	8a 81       	ldd	r24, Y+2	; 0x02
    ec98:	20 91 2b 2b 	lds	r18, 0x2B2B	; 0x802b2b <udi_cdc_rx_pos>
    ec9c:	30 91 2c 2b 	lds	r19, 0x2B2C	; 0x802b2c <udi_cdc_rx_pos+0x1>
    eca0:	02 0f       	add	r16, r18
    eca2:	13 1f       	adc	r17, r19
    eca4:	00 93 2b 2b 	sts	0x2B2B, r16	; 0x802b2b <udi_cdc_rx_pos>
    eca8:	10 93 2c 2b 	sts	0x2B2C, r17	; 0x802b2c <udi_cdc_rx_pos+0x1>
    ecac:	8f bf       	out	0x3f, r24	; 63
    ecae:	80 e0       	ldi	r24, 0x00	; 0
    ecb0:	a5 de       	rcall	.-694    	; 0xe9fc <udi_cdc_rx_start>
    ecb2:	8e 2d       	mov	r24, r14
    ecb4:	9f 2d       	mov	r25, r15
    ecb6:	05 c0       	rjmp	.+10     	; 0xecc2 <udi_cdc_read_no_polling+0xb0>
    ecb8:	80 e0       	ldi	r24, 0x00	; 0
    ecba:	90 e0       	ldi	r25, 0x00	; 0
    ecbc:	02 c0       	rjmp	.+4      	; 0xecc2 <udi_cdc_read_no_polling+0xb0>
    ecbe:	8e 2d       	mov	r24, r14
    ecc0:	9f 2d       	mov	r25, r15
    ecc2:	0f 90       	pop	r0
    ecc4:	0f 90       	pop	r0
    ecc6:	df 91       	pop	r29
    ecc8:	cf 91       	pop	r28
    ecca:	1f 91       	pop	r17
    eccc:	0f 91       	pop	r16
    ecce:	ff 90       	pop	r15
    ecd0:	ef 90       	pop	r14
    ecd2:	08 95       	ret

0000ecd4 <udi_cdc_multi_get_free_tx_buffer>:
    ecd4:	cf 93       	push	r28
    ecd6:	df 93       	push	r29
    ecd8:	1f 92       	push	r1
    ecda:	cd b7       	in	r28, 0x3d	; 61
    ecdc:	de b7       	in	r29, 0x3e	; 62
    ecde:	8f b7       	in	r24, 0x3f	; 63
    ece0:	89 83       	std	Y+1, r24	; 0x01
    ece2:	f8 94       	cli
    ece4:	99 81       	ldd	r25, Y+1	; 0x01
    ece6:	80 91 a4 28 	lds	r24, 0x28A4	; 0x8028a4 <udi_cdc_tx_buf_sel>
    ecea:	e8 2f       	mov	r30, r24
    ecec:	f0 e0       	ldi	r31, 0x00	; 0
    ecee:	ee 0f       	add	r30, r30
    ecf0:	ff 1f       	adc	r31, r31
    ecf2:	eb 55       	subi	r30, 0x5B	; 91
    ecf4:	f7 4d       	sbci	r31, 0xD7	; 215
    ecf6:	20 81       	ld	r18, Z
    ecf8:	31 81       	ldd	r19, Z+1	; 0x01
    ecfa:	20 34       	cpi	r18, 0x40	; 64
    ecfc:	41 e0       	ldi	r20, 0x01	; 1
    ecfe:	34 07       	cpc	r19, r20
    ed00:	89 f4       	brne	.+34     	; 0xed24 <udi_cdc_multi_get_free_tx_buffer+0x50>
    ed02:	40 91 a1 28 	lds	r20, 0x28A1	; 0x8028a1 <udi_cdc_tx_trans_ongoing>
    ed06:	41 11       	cpse	r20, r1
    ed08:	0d c0       	rjmp	.+26     	; 0xed24 <udi_cdc_multi_get_free_tx_buffer+0x50>
    ed0a:	40 91 a0 28 	lds	r20, 0x28A0	; 0x8028a0 <udi_cdc_tx_both_buf_to_send>
    ed0e:	41 11       	cpse	r20, r1
    ed10:	09 c0       	rjmp	.+18     	; 0xed24 <udi_cdc_multi_get_free_tx_buffer+0x50>
    ed12:	21 e0       	ldi	r18, 0x01	; 1
    ed14:	20 93 a0 28 	sts	0x28A0, r18	; 0x8028a0 <udi_cdc_tx_both_buf_to_send>
    ed18:	81 11       	cpse	r24, r1
    ed1a:	20 e0       	ldi	r18, 0x00	; 0
    ed1c:	20 93 a4 28 	sts	0x28A4, r18	; 0x8028a4 <udi_cdc_tx_buf_sel>
    ed20:	20 e0       	ldi	r18, 0x00	; 0
    ed22:	30 e0       	ldi	r19, 0x00	; 0
    ed24:	9f bf       	out	0x3f, r25	; 63
    ed26:	80 e4       	ldi	r24, 0x40	; 64
    ed28:	91 e0       	ldi	r25, 0x01	; 1
    ed2a:	82 1b       	sub	r24, r18
    ed2c:	93 0b       	sbc	r25, r19
    ed2e:	0f 90       	pop	r0
    ed30:	df 91       	pop	r29
    ed32:	cf 91       	pop	r28
    ed34:	08 95       	ret

0000ed36 <udi_cdc_multi_is_tx_ready>:
    ed36:	ce df       	rcall	.-100    	; 0xecd4 <udi_cdc_multi_get_free_tx_buffer>
    ed38:	21 e0       	ldi	r18, 0x01	; 1
    ed3a:	89 2b       	or	r24, r25
    ed3c:	09 f4       	brne	.+2      	; 0xed40 <udi_cdc_multi_is_tx_ready+0xa>
    ed3e:	20 e0       	ldi	r18, 0x00	; 0
    ed40:	82 2f       	mov	r24, r18
    ed42:	08 95       	ret

0000ed44 <udi_cdc_is_tx_ready>:
    ed44:	80 e0       	ldi	r24, 0x00	; 0
    ed46:	f7 cf       	rjmp	.-18     	; 0xed36 <udi_cdc_multi_is_tx_ready>
    ed48:	08 95       	ret

0000ed4a <udi_cdc_multi_putc>:
    ed4a:	df 92       	push	r13
    ed4c:	ef 92       	push	r14
    ed4e:	ff 92       	push	r15
    ed50:	0f 93       	push	r16
    ed52:	1f 93       	push	r17
    ed54:	cf 93       	push	r28
    ed56:	df 93       	push	r29
    ed58:	1f 92       	push	r1
    ed5a:	cd b7       	in	r28, 0x3d	; 61
    ed5c:	de b7       	in	r29, 0x3e	; 62
    ed5e:	d6 2e       	mov	r13, r22
    ed60:	f7 2e       	mov	r15, r23
    ed62:	ee 24       	eor	r14, r14
    ed64:	e3 94       	inc	r14
    ed66:	80 91 c8 2d 	lds	r24, 0x2DC8	; 0x802dc8 <udi_cdc_line_coding+0x6>
    ed6a:	89 30       	cpi	r24, 0x09	; 9
    ed6c:	09 f0       	breq	.+2      	; 0xed70 <udi_cdc_multi_putc+0x26>
    ed6e:	e1 2c       	mov	r14, r1
    ed70:	00 e4       	ldi	r16, 0x40	; 64
    ed72:	11 e0       	ldi	r17, 0x01	; 1
    ed74:	80 e0       	ldi	r24, 0x00	; 0
    ed76:	df df       	rcall	.-66     	; 0xed36 <udi_cdc_multi_is_tx_ready>
    ed78:	81 11       	cpse	r24, r1
    ed7a:	07 c0       	rjmp	.+14     	; 0xed8a <udi_cdc_multi_putc+0x40>
    ed7c:	80 91 b2 2d 	lds	r24, 0x2DB2	; 0x802db2 <udi_cdc_data_running>
    ed80:	81 11       	cpse	r24, r1
    ed82:	f8 cf       	rjmp	.-16     	; 0xed74 <udi_cdc_multi_putc+0x2a>
    ed84:	80 e0       	ldi	r24, 0x00	; 0
    ed86:	90 e0       	ldi	r25, 0x00	; 0
    ed88:	2b c0       	rjmp	.+86     	; 0xede0 <udi_cdc_multi_putc+0x96>
    ed8a:	8f b7       	in	r24, 0x3f	; 63
    ed8c:	89 83       	std	Y+1, r24	; 0x01
    ed8e:	f8 94       	cli
    ed90:	69 81       	ldd	r22, Y+1	; 0x01
    ed92:	20 91 a4 28 	lds	r18, 0x28A4	; 0x8028a4 <udi_cdc_tx_buf_sel>
    ed96:	30 e0       	ldi	r19, 0x00	; 0
    ed98:	f9 01       	movw	r30, r18
    ed9a:	ee 0f       	add	r30, r30
    ed9c:	ff 1f       	adc	r31, r31
    ed9e:	eb 55       	subi	r30, 0x5B	; 91
    eda0:	f7 4d       	sbci	r31, 0xD7	; 215
    eda2:	80 81       	ld	r24, Z
    eda4:	91 81       	ldd	r25, Z+1	; 0x01
    eda6:	ac 01       	movw	r20, r24
    eda8:	4f 5f       	subi	r20, 0xFF	; 255
    edaa:	5f 4f       	sbci	r21, 0xFF	; 255
    edac:	40 83       	st	Z, r20
    edae:	51 83       	std	Z+1, r21	; 0x01
    edb0:	20 9f       	mul	r18, r16
    edb2:	a0 01       	movw	r20, r0
    edb4:	21 9f       	mul	r18, r17
    edb6:	50 0d       	add	r21, r0
    edb8:	30 9f       	mul	r19, r16
    edba:	50 0d       	add	r21, r0
    edbc:	11 24       	eor	r1, r1
    edbe:	9a 01       	movw	r18, r20
    edc0:	26 55       	subi	r18, 0x56	; 86
    edc2:	37 4d       	sbci	r19, 0xD7	; 215
    edc4:	f9 01       	movw	r30, r18
    edc6:	e8 0f       	add	r30, r24
    edc8:	f9 1f       	adc	r31, r25
    edca:	d0 82       	st	Z, r13
    edcc:	6f bf       	out	0x3f, r22	; 63
    edce:	ee 20       	and	r14, r14
    edd0:	29 f0       	breq	.+10     	; 0xeddc <udi_cdc_multi_putc+0x92>
    edd2:	df 2c       	mov	r13, r15
    edd4:	ff 0c       	add	r15, r15
    edd6:	ff 08       	sbc	r15, r15
    edd8:	e1 2c       	mov	r14, r1
    edda:	cc cf       	rjmp	.-104    	; 0xed74 <udi_cdc_multi_putc+0x2a>
    eddc:	81 e0       	ldi	r24, 0x01	; 1
    edde:	90 e0       	ldi	r25, 0x00	; 0
    ede0:	0f 90       	pop	r0
    ede2:	df 91       	pop	r29
    ede4:	cf 91       	pop	r28
    ede6:	1f 91       	pop	r17
    ede8:	0f 91       	pop	r16
    edea:	ff 90       	pop	r15
    edec:	ef 90       	pop	r14
    edee:	df 90       	pop	r13
    edf0:	08 95       	ret

0000edf2 <udi_cdc_putc>:
    edf2:	bc 01       	movw	r22, r24
    edf4:	80 e0       	ldi	r24, 0x00	; 0
    edf6:	a9 cf       	rjmp	.-174    	; 0xed4a <udi_cdc_multi_putc>
    edf8:	08 95       	ret

0000edfa <udc_next_desc_in_iface>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
    edfa:	e0 91 ce 2d 	lds	r30, 0x2DCE	; 0x802dce <udc_ptr_conf>
    edfe:	f0 91 cf 2d 	lds	r31, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    ee02:	01 90       	ld	r0, Z+
    ee04:	f0 81       	ld	r31, Z
    ee06:	e0 2d       	mov	r30, r0
    ee08:	22 81       	ldd	r18, Z+2	; 0x02
    ee0a:	33 81       	ldd	r19, Z+3	; 0x03
    ee0c:	2e 0f       	add	r18, r30
    ee0e:	3f 1f       	adc	r19, r31
    ee10:	fc 01       	movw	r30, r24
    ee12:	40 81       	ld	r20, Z
    ee14:	e4 0f       	add	r30, r20
    ee16:	f1 1d       	adc	r31, r1
    ee18:	e2 17       	cp	r30, r18
    ee1a:	f3 07       	cpc	r31, r19
    ee1c:	a0 f4       	brcc	.+40     	; 0xee46 <udc_next_desc_in_iface+0x4c>
    ee1e:	81 81       	ldd	r24, Z+1	; 0x01
    ee20:	84 30       	cpi	r24, 0x04	; 4
    ee22:	a1 f0       	breq	.+40     	; 0xee4c <udc_next_desc_in_iface+0x52>
    ee24:	86 13       	cpse	r24, r22
    ee26:	06 c0       	rjmp	.+12     	; 0xee34 <udc_next_desc_in_iface+0x3a>
    ee28:	14 c0       	rjmp	.+40     	; 0xee52 <udc_next_desc_in_iface+0x58>
    ee2a:	81 81       	ldd	r24, Z+1	; 0x01
    ee2c:	84 30       	cpi	r24, 0x04	; 4
    ee2e:	a1 f0       	breq	.+40     	; 0xee58 <udc_next_desc_in_iface+0x5e>
    ee30:	86 17       	cp	r24, r22
    ee32:	a9 f0       	breq	.+42     	; 0xee5e <udc_next_desc_in_iface+0x64>
    ee34:	80 81       	ld	r24, Z
    ee36:	e8 0f       	add	r30, r24
    ee38:	f1 1d       	adc	r31, r1
    ee3a:	e2 17       	cp	r30, r18
    ee3c:	f3 07       	cpc	r31, r19
    ee3e:	a8 f3       	brcs	.-22     	; 0xee2a <udc_next_desc_in_iface+0x30>
    ee40:	80 e0       	ldi	r24, 0x00	; 0
    ee42:	90 e0       	ldi	r25, 0x00	; 0
    ee44:	08 95       	ret
    ee46:	80 e0       	ldi	r24, 0x00	; 0
    ee48:	90 e0       	ldi	r25, 0x00	; 0
    ee4a:	08 95       	ret
    ee4c:	80 e0       	ldi	r24, 0x00	; 0
    ee4e:	90 e0       	ldi	r25, 0x00	; 0
    ee50:	08 95       	ret
    ee52:	8e 2f       	mov	r24, r30
    ee54:	9f 2f       	mov	r25, r31
    ee56:	08 95       	ret
    ee58:	80 e0       	ldi	r24, 0x00	; 0
    ee5a:	90 e0       	ldi	r25, 0x00	; 0
    ee5c:	08 95       	ret
    ee5e:	8e 2f       	mov	r24, r30
    ee60:	9f 2f       	mov	r25, r31
    ee62:	08 95       	ret

0000ee64 <udc_valid_address>:
    ee64:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    ee68:	8f 77       	andi	r24, 0x7F	; 127
    ee6a:	0c 94 c5 58 	jmp	0xb18a	; 0xb18a <udd_set_address>
    ee6e:	08 95       	ret

0000ee70 <udc_update_iface_desc>:
    ee70:	90 91 d0 2d 	lds	r25, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    ee74:	99 23       	and	r25, r25
    ee76:	81 f1       	breq	.+96     	; 0xeed8 <udc_update_iface_desc+0x68>
    ee78:	e0 91 ce 2d 	lds	r30, 0x2DCE	; 0x802dce <udc_ptr_conf>
    ee7c:	f0 91 cf 2d 	lds	r31, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    ee80:	01 90       	ld	r0, Z+
    ee82:	f0 81       	ld	r31, Z
    ee84:	e0 2d       	mov	r30, r0
    ee86:	94 81       	ldd	r25, Z+4	; 0x04
    ee88:	89 17       	cp	r24, r25
    ee8a:	40 f5       	brcc	.+80     	; 0xeedc <udc_update_iface_desc+0x6c>
    ee8c:	e0 93 cc 2d 	sts	0x2DCC, r30	; 0x802dcc <udc_ptr_iface>
    ee90:	f0 93 cd 2d 	sts	0x2DCD, r31	; 0x802dcd <udc_ptr_iface+0x1>
    ee94:	22 81       	ldd	r18, Z+2	; 0x02
    ee96:	33 81       	ldd	r19, Z+3	; 0x03
    ee98:	2e 0f       	add	r18, r30
    ee9a:	3f 1f       	adc	r19, r31
    ee9c:	e2 17       	cp	r30, r18
    ee9e:	f3 07       	cpc	r31, r19
    eea0:	f8 f4       	brcc	.+62     	; 0xeee0 <udc_update_iface_desc+0x70>
    eea2:	91 81       	ldd	r25, Z+1	; 0x01
    eea4:	94 30       	cpi	r25, 0x04	; 4
    eea6:	61 f4       	brne	.+24     	; 0xeec0 <udc_update_iface_desc+0x50>
    eea8:	92 81       	ldd	r25, Z+2	; 0x02
    eeaa:	89 13       	cpse	r24, r25
    eeac:	09 c0       	rjmp	.+18     	; 0xeec0 <udc_update_iface_desc+0x50>
    eeae:	93 81       	ldd	r25, Z+3	; 0x03
    eeb0:	96 13       	cpse	r25, r22
    eeb2:	06 c0       	rjmp	.+12     	; 0xeec0 <udc_update_iface_desc+0x50>
    eeb4:	e0 93 cc 2d 	sts	0x2DCC, r30	; 0x802dcc <udc_ptr_iface>
    eeb8:	f0 93 cd 2d 	sts	0x2DCD, r31	; 0x802dcd <udc_ptr_iface+0x1>
    eebc:	81 e0       	ldi	r24, 0x01	; 1
    eebe:	08 95       	ret
    eec0:	90 81       	ld	r25, Z
    eec2:	e9 0f       	add	r30, r25
    eec4:	f1 1d       	adc	r31, r1
    eec6:	e2 17       	cp	r30, r18
    eec8:	f3 07       	cpc	r31, r19
    eeca:	58 f3       	brcs	.-42     	; 0xeea2 <udc_update_iface_desc+0x32>
    eecc:	e0 93 cc 2d 	sts	0x2DCC, r30	; 0x802dcc <udc_ptr_iface>
    eed0:	f0 93 cd 2d 	sts	0x2DCD, r31	; 0x802dcd <udc_ptr_iface+0x1>
    eed4:	80 e0       	ldi	r24, 0x00	; 0
    eed6:	08 95       	ret
    eed8:	80 e0       	ldi	r24, 0x00	; 0
    eeda:	08 95       	ret
    eedc:	80 e0       	ldi	r24, 0x00	; 0
    eede:	08 95       	ret
    eee0:	80 e0       	ldi	r24, 0x00	; 0
    eee2:	08 95       	ret

0000eee4 <udc_iface_disable>:
    eee4:	ef 92       	push	r14
    eee6:	ff 92       	push	r15
    eee8:	1f 93       	push	r17
    eeea:	cf 93       	push	r28
    eeec:	df 93       	push	r29
    eeee:	c8 2f       	mov	r28, r24
    eef0:	60 e0       	ldi	r22, 0x00	; 0
    eef2:	be df       	rcall	.-132    	; 0xee70 <udc_update_iface_desc>
    eef4:	18 2f       	mov	r17, r24
    eef6:	88 23       	and	r24, r24
    eef8:	81 f1       	breq	.+96     	; 0xef5a <udc_iface_disable+0x76>
    eefa:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    eefe:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    ef02:	ec 2f       	mov	r30, r28
    ef04:	f0 e0       	ldi	r31, 0x00	; 0
    ef06:	ee 0f       	add	r30, r30
    ef08:	ff 1f       	adc	r31, r31
    ef0a:	12 96       	adiw	r26, 0x02	; 2
    ef0c:	8d 91       	ld	r24, X+
    ef0e:	9c 91       	ld	r25, X
    ef10:	13 97       	sbiw	r26, 0x03	; 3
    ef12:	e8 0f       	add	r30, r24
    ef14:	f9 1f       	adc	r31, r25
    ef16:	e0 80       	ld	r14, Z
    ef18:	f1 80       	ldd	r15, Z+1	; 0x01
    ef1a:	d7 01       	movw	r26, r14
    ef1c:	16 96       	adiw	r26, 0x06	; 6
    ef1e:	ed 91       	ld	r30, X+
    ef20:	fc 91       	ld	r31, X
    ef22:	17 97       	sbiw	r26, 0x07	; 7
    ef24:	19 95       	eicall
    ef26:	68 2f       	mov	r22, r24
    ef28:	8c 2f       	mov	r24, r28
    ef2a:	a2 df       	rcall	.-188    	; 0xee70 <udc_update_iface_desc>
    ef2c:	18 2f       	mov	r17, r24
    ef2e:	88 23       	and	r24, r24
    ef30:	a1 f0       	breq	.+40     	; 0xef5a <udc_iface_disable+0x76>
    ef32:	c0 91 cc 2d 	lds	r28, 0x2DCC	; 0x802dcc <udc_ptr_iface>
    ef36:	d0 91 cd 2d 	lds	r29, 0x2DCD	; 0x802dcd <udc_ptr_iface+0x1>
    ef3a:	65 e0       	ldi	r22, 0x05	; 5
    ef3c:	ce 01       	movw	r24, r28
    ef3e:	5d df       	rcall	.-326    	; 0xedfa <udc_next_desc_in_iface>
    ef40:	ec 01       	movw	r28, r24
    ef42:	89 2b       	or	r24, r25
    ef44:	21 f0       	breq	.+8      	; 0xef4e <udc_iface_disable+0x6a>
    ef46:	8a 81       	ldd	r24, Y+2	; 0x02
    ef48:	0e 94 ce 5a 	call	0xb59c	; 0xb59c <udd_ep_free>
    ef4c:	f6 cf       	rjmp	.-20     	; 0xef3a <udc_iface_disable+0x56>
    ef4e:	d7 01       	movw	r26, r14
    ef50:	12 96       	adiw	r26, 0x02	; 2
    ef52:	ed 91       	ld	r30, X+
    ef54:	fc 91       	ld	r31, X
    ef56:	13 97       	sbiw	r26, 0x03	; 3
    ef58:	19 95       	eicall
    ef5a:	81 2f       	mov	r24, r17
    ef5c:	df 91       	pop	r29
    ef5e:	cf 91       	pop	r28
    ef60:	1f 91       	pop	r17
    ef62:	ff 90       	pop	r15
    ef64:	ef 90       	pop	r14
    ef66:	08 95       	ret

0000ef68 <udc_iface_enable>:
    ef68:	1f 93       	push	r17
    ef6a:	cf 93       	push	r28
    ef6c:	df 93       	push	r29
    ef6e:	18 2f       	mov	r17, r24
    ef70:	7f df       	rcall	.-258    	; 0xee70 <udc_update_iface_desc>
    ef72:	88 23       	and	r24, r24
    ef74:	41 f1       	breq	.+80     	; 0xefc6 <udc_iface_enable+0x5e>
    ef76:	c0 91 cc 2d 	lds	r28, 0x2DCC	; 0x802dcc <udc_ptr_iface>
    ef7a:	d0 91 cd 2d 	lds	r29, 0x2DCD	; 0x802dcd <udc_ptr_iface+0x1>
    ef7e:	65 e0       	ldi	r22, 0x05	; 5
    ef80:	ce 01       	movw	r24, r28
    ef82:	3b df       	rcall	.-394    	; 0xedfa <udc_next_desc_in_iface>
    ef84:	ec 01       	movw	r28, r24
    ef86:	89 2b       	or	r24, r25
    ef88:	49 f0       	breq	.+18     	; 0xef9c <udc_iface_enable+0x34>
    ef8a:	4c 81       	ldd	r20, Y+4	; 0x04
    ef8c:	5d 81       	ldd	r21, Y+5	; 0x05
    ef8e:	6b 81       	ldd	r22, Y+3	; 0x03
    ef90:	8a 81       	ldd	r24, Y+2	; 0x02
    ef92:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <udd_ep_alloc>
    ef96:	81 11       	cpse	r24, r1
    ef98:	f2 cf       	rjmp	.-28     	; 0xef7e <udc_iface_enable+0x16>
    ef9a:	15 c0       	rjmp	.+42     	; 0xefc6 <udc_iface_enable+0x5e>
    ef9c:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    efa0:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    efa4:	e1 2f       	mov	r30, r17
    efa6:	f0 e0       	ldi	r31, 0x00	; 0
    efa8:	ee 0f       	add	r30, r30
    efaa:	ff 1f       	adc	r31, r31
    efac:	12 96       	adiw	r26, 0x02	; 2
    efae:	8d 91       	ld	r24, X+
    efb0:	9c 91       	ld	r25, X
    efb2:	13 97       	sbiw	r26, 0x03	; 3
    efb4:	e8 0f       	add	r30, r24
    efb6:	f9 1f       	adc	r31, r25
    efb8:	01 90       	ld	r0, Z+
    efba:	f0 81       	ld	r31, Z
    efbc:	e0 2d       	mov	r30, r0
    efbe:	01 90       	ld	r0, Z+
    efc0:	f0 81       	ld	r31, Z
    efc2:	e0 2d       	mov	r30, r0
    efc4:	19 95       	eicall
    efc6:	df 91       	pop	r29
    efc8:	cf 91       	pop	r28
    efca:	1f 91       	pop	r17
    efcc:	08 95       	ret

0000efce <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
    efce:	0c 94 3e 58 	jmp	0xb07c	; 0xb07c <udd_enable>
    efd2:	08 95       	ret

0000efd4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    efd4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    efd6:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    efda:	88 23       	and	r24, r24
    efdc:	c1 f0       	breq	.+48     	; 0xf00e <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    efde:	e0 91 ce 2d 	lds	r30, 0x2DCE	; 0x802dce <udc_ptr_conf>
    efe2:	f0 91 cf 2d 	lds	r31, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    efe6:	01 90       	ld	r0, Z+
    efe8:	f0 81       	ld	r31, Z
    efea:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    efec:	84 81       	ldd	r24, Z+4	; 0x04
    efee:	88 23       	and	r24, r24
    eff0:	71 f0       	breq	.+28     	; 0xf00e <udc_reset+0x3a>
    eff2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    eff4:	8c 2f       	mov	r24, r28
    eff6:	76 df       	rcall	.-276    	; 0xeee4 <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    eff8:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    effa:	e0 91 ce 2d 	lds	r30, 0x2DCE	; 0x802dce <udc_ptr_conf>
    effe:	f0 91 cf 2d 	lds	r31, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f002:	01 90       	ld	r0, Z+
    f004:	f0 81       	ld	r31, Z
    f006:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    f008:	84 81       	ldd	r24, Z+4	; 0x04
    f00a:	c8 17       	cp	r28, r24
    f00c:	98 f3       	brcs	.-26     	; 0xeff4 <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    f00e:	10 92 d0 2d 	sts	0x2DD0, r1	; 0x802dd0 <udc_num_configuration>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    f012:	80 91 d4 2d 	lds	r24, 0x2DD4	; 0x802dd4 <udc_device_status>
    f016:	81 fd       	sbrc	r24, 1
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    f018:	0e 94 55 21 	call	0x42aa	; 0x42aa <usb_callback_remotewakeup_disable>
	}
#endif
	udc_device_status =
    f01c:	10 92 d4 2d 	sts	0x2DD4, r1	; 0x802dd4 <udc_device_status>
    f020:	10 92 d5 2d 	sts	0x2DD5, r1	; 0x802dd5 <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    f024:	cf 91       	pop	r28
    f026:	08 95       	ret

0000f028 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    f028:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <udd_disable>
	udc_reset();
    f02c:	d3 cf       	rjmp	.-90     	; 0xefd4 <udc_reset>
    f02e:	08 95       	ret

0000f030 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    f030:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    f032:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f036:	88 23       	and	r24, r24
    f038:	49 f1       	breq	.+82     	; 0xf08c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f03a:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f03e:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f042:	ed 91       	ld	r30, X+
    f044:	fc 91       	ld	r31, X
    f046:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    f048:	84 81       	ldd	r24, Z+4	; 0x04
    f04a:	88 23       	and	r24, r24
    f04c:	f9 f0       	breq	.+62     	; 0xf08c <udc_sof_notify+0x5c>
    f04e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    f050:	ec 2f       	mov	r30, r28
    f052:	f0 e0       	ldi	r31, 0x00	; 0
    f054:	ee 0f       	add	r30, r30
    f056:	ff 1f       	adc	r31, r31
    f058:	12 96       	adiw	r26, 0x02	; 2
    f05a:	8d 91       	ld	r24, X+
    f05c:	9c 91       	ld	r25, X
    f05e:	13 97       	sbiw	r26, 0x03	; 3
    f060:	e8 0f       	add	r30, r24
    f062:	f9 1f       	adc	r31, r25
    f064:	01 90       	ld	r0, Z+
    f066:	f0 81       	ld	r31, Z
    f068:	e0 2d       	mov	r30, r0
    f06a:	00 84       	ldd	r0, Z+8	; 0x08
    f06c:	f1 85       	ldd	r31, Z+9	; 0x09
    f06e:	e0 2d       	mov	r30, r0
    f070:	30 97       	sbiw	r30, 0x00	; 0
    f072:	09 f0       	breq	.+2      	; 0xf076 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    f074:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    f076:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f078:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f07c:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f080:	ed 91       	ld	r30, X+
    f082:	fc 91       	ld	r31, X
    f084:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    f086:	84 81       	ldd	r24, Z+4	; 0x04
    f088:	c8 17       	cp	r28, r24
    f08a:	10 f3       	brcs	.-60     	; 0xf050 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    f08c:	cf 91       	pop	r28
    f08e:	08 95       	ret

0000f090 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    f090:	0f 93       	push	r16
    f092:	1f 93       	push	r17
    f094:	cf 93       	push	r28
    f096:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    f098:	e5 ee       	ldi	r30, 0xE5	; 229
    f09a:	fd e2       	ldi	r31, 0x2D	; 45
    f09c:	12 86       	std	Z+10, r1	; 0x0a
    f09e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    f0a0:	14 86       	std	Z+12, r1	; 0x0c
    f0a2:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    f0a4:	16 86       	std	Z+14, r1	; 0x0e
    f0a6:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    f0a8:	80 81       	ld	r24, Z
    f0aa:	88 23       	and	r24, r24
    f0ac:	0c f0       	brlt	.+2      	; 0xf0b0 <udc_process_setup+0x20>
    f0ae:	95 c2       	rjmp	.+1322   	; 0xf5da <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    f0b0:	20 91 eb 2d 	lds	r18, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f0b4:	30 91 ec 2d 	lds	r19, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f0b8:	21 15       	cp	r18, r1
    f0ba:	31 05       	cpc	r19, r1
    f0bc:	09 f0       	breq	.+2      	; 0xf0c0 <udc_process_setup+0x30>
    f0be:	88 c2       	rjmp	.+1296   	; 0xf5d0 <udc_process_setup+0x540>
    f0c0:	7f c2       	rjmp	.+1278   	; 0xf5c0 <udc_process_setup+0x530>
    f0c2:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    f0c4:	09 f0       	breq	.+2      	; 0xf0c8 <udc_process_setup+0x38>
    f0c6:	ab c0       	rjmp	.+342    	; 0xf21e <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    f0c8:	90 91 e6 2d 	lds	r25, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f0cc:	96 30       	cpi	r25, 0x06	; 6
    f0ce:	81 f0       	breq	.+32     	; 0xf0f0 <udc_process_setup+0x60>
    f0d0:	98 30       	cpi	r25, 0x08	; 8
    f0d2:	09 f4       	brne	.+2      	; 0xf0d6 <udc_process_setup+0x46>
    f0d4:	99 c0       	rjmp	.+306    	; 0xf208 <udc_process_setup+0x178>
    f0d6:	91 11       	cpse	r25, r1
    f0d8:	a2 c0       	rjmp	.+324    	; 0xf21e <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    f0da:	22 30       	cpi	r18, 0x02	; 2
    f0dc:	31 05       	cpc	r19, r1
    f0de:	09 f0       	breq	.+2      	; 0xf0e2 <udc_process_setup+0x52>
    f0e0:	2b c2       	rjmp	.+1110   	; 0xf538 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    f0e2:	62 e0       	ldi	r22, 0x02	; 2
    f0e4:	70 e0       	ldi	r23, 0x00	; 0
    f0e6:	84 ed       	ldi	r24, 0xD4	; 212
    f0e8:	9d e2       	ldi	r25, 0x2D	; 45
    f0ea:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <udd_set_setup_payload>
    f0ee:	7e c2       	rjmp	.+1276   	; 0xf5ec <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    f0f0:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f0f4:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    f0f8:	29 2f       	mov	r18, r25
    f0fa:	33 27       	eor	r19, r19
    f0fc:	22 30       	cpi	r18, 0x02	; 2
    f0fe:	31 05       	cpc	r19, r1
    f100:	b1 f0       	breq	.+44     	; 0xf12e <udc_process_setup+0x9e>
    f102:	20 f4       	brcc	.+8      	; 0xf10c <udc_process_setup+0x7c>
    f104:	21 30       	cpi	r18, 0x01	; 1
    f106:	31 05       	cpc	r19, r1
    f108:	41 f0       	breq	.+16     	; 0xf11a <udc_process_setup+0x8a>
    f10a:	d8 c1       	rjmp	.+944    	; 0xf4bc <udc_process_setup+0x42c>
    f10c:	23 30       	cpi	r18, 0x03	; 3
    f10e:	31 05       	cpc	r19, r1
    f110:	f1 f1       	breq	.+124    	; 0xf18e <udc_process_setup+0xfe>
    f112:	2f 30       	cpi	r18, 0x0F	; 15
    f114:	31 05       	cpc	r19, r1
    f116:	61 f1       	breq	.+88     	; 0xf170 <udc_process_setup+0xe0>
    f118:	d1 c1       	rjmp	.+930    	; 0xf4bc <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    f11a:	80 91 5b 20 	lds	r24, 0x205B	; 0x80205b <udc_config>
    f11e:	90 91 5c 20 	lds	r25, 0x205C	; 0x80205c <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    f122:	dc 01       	movw	r26, r24
    f124:	6c 91       	ld	r22, X
    f126:	70 e0       	ldi	r23, 0x00	; 0
    f128:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <udd_set_setup_payload>
    f12c:	5e c0       	rjmp	.+188    	; 0xf1ea <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    f12e:	e0 91 5b 20 	lds	r30, 0x205B	; 0x80205b <udc_config>
    f132:	f0 91 5c 20 	lds	r31, 0x205C	; 0x80205c <udc_config+0x1>
    f136:	21 89       	ldd	r18, Z+17	; 0x11
    f138:	82 17       	cp	r24, r18
    f13a:	08 f0       	brcs	.+2      	; 0xf13e <udc_process_setup+0xae>
    f13c:	fd c1       	rjmp	.+1018   	; 0xf538 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    f13e:	99 27       	eor	r25, r25
    f140:	88 0f       	add	r24, r24
    f142:	99 1f       	adc	r25, r25
    f144:	88 0f       	add	r24, r24
    f146:	99 1f       	adc	r25, r25
    f148:	e0 91 5d 20 	lds	r30, 0x205D	; 0x80205d <udc_config+0x2>
    f14c:	f0 91 5e 20 	lds	r31, 0x205E	; 0x80205e <udc_config+0x3>
    f150:	e8 0f       	add	r30, r24
    f152:	f9 1f       	adc	r31, r25
    f154:	80 81       	ld	r24, Z
    f156:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    f158:	fc 01       	movw	r30, r24
    f15a:	62 81       	ldd	r22, Z+2	; 0x02
    f15c:	73 81       	ldd	r23, Z+3	; 0x03
    f15e:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    f162:	e0 91 ed 2d 	lds	r30, 0x2DED	; 0x802ded <udd_g_ctrlreq+0x8>
    f166:	f0 91 ee 2d 	lds	r31, 0x2DEE	; 0x802dee <udd_g_ctrlreq+0x9>
    f16a:	82 e0       	ldi	r24, 0x02	; 2
    f16c:	81 83       	std	Z+1, r24	; 0x01
    f16e:	3d c0       	rjmp	.+122    	; 0xf1ea <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    f170:	80 91 5f 20 	lds	r24, 0x205F	; 0x80205f <udc_config+0x4>
    f174:	90 91 60 20 	lds	r25, 0x2060	; 0x802060 <udc_config+0x5>
    f178:	00 97       	sbiw	r24, 0x00	; 0
    f17a:	09 f4       	brne	.+2      	; 0xf17e <udc_process_setup+0xee>
    f17c:	dd c1       	rjmp	.+954    	; 0xf538 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    f17e:	dc 01       	movw	r26, r24
    f180:	12 96       	adiw	r26, 0x02	; 2
    f182:	6d 91       	ld	r22, X+
    f184:	7c 91       	ld	r23, X
    f186:	13 97       	sbiw	r26, 0x03	; 3
    f188:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <udd_set_setup_payload>
    f18c:	2e c0       	rjmp	.+92     	; 0xf1ea <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    f18e:	99 27       	eor	r25, r25
    f190:	81 30       	cpi	r24, 0x01	; 1
    f192:	91 05       	cpc	r25, r1
    f194:	99 f0       	breq	.+38     	; 0xf1bc <udc_process_setup+0x12c>
    f196:	58 f0       	brcs	.+22     	; 0xf1ae <udc_process_setup+0x11e>
    f198:	82 30       	cpi	r24, 0x02	; 2
    f19a:	91 05       	cpc	r25, r1
    f19c:	09 f4       	brne	.+2      	; 0xf1a0 <udc_process_setup+0x110>
    f19e:	22 c2       	rjmp	.+1092   	; 0xf5e4 <udc_process_setup+0x554>
    f1a0:	03 97       	sbiw	r24, 0x03	; 3
    f1a2:	09 f0       	breq	.+2      	; 0xf1a6 <udc_process_setup+0x116>
    f1a4:	94 c1       	rjmp	.+808    	; 0xf4ce <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    f1a6:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    f1a8:	ea ea       	ldi	r30, 0xAA	; 170
    f1aa:	f1 e2       	ldi	r31, 0x21	; 33
    f1ac:	0a c0       	rjmp	.+20     	; 0xf1c2 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    f1ae:	64 e0       	ldi	r22, 0x04	; 4
    f1b0:	70 e0       	ldi	r23, 0x00	; 0
    f1b2:	80 e0       	ldi	r24, 0x00	; 0
    f1b4:	91 e2       	ldi	r25, 0x21	; 33
    f1b6:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <udd_set_setup_payload>
    f1ba:	17 c0       	rjmp	.+46     	; 0xf1ea <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    f1bc:	ef ee       	ldi	r30, 0xEF	; 239
    f1be:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    f1c0:	30 e1       	ldi	r19, 0x10	; 16
    f1c2:	a2 ec       	ldi	r26, 0xC2	; 194
    f1c4:	b0 e2       	ldi	r27, 0x20	; 32
    f1c6:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    f1c8:	81 91       	ld	r24, Z+
    f1ca:	90 e0       	ldi	r25, 0x00	; 0
    f1cc:	8d 93       	st	X+, r24
    f1ce:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    f1d0:	2f 5f       	subi	r18, 0xFF	; 255
    f1d2:	23 17       	cp	r18, r19
    f1d4:	c8 f3       	brcs	.-14     	; 0xf1c8 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    f1d6:	63 2f       	mov	r22, r19
    f1d8:	66 0f       	add	r22, r22
    f1da:	6e 5f       	subi	r22, 0xFE	; 254
    f1dc:	60 93 c0 20 	sts	0x20C0, r22	; 0x8020c0 <udc_string_desc>
		udd_set_setup_payload(
    f1e0:	70 e0       	ldi	r23, 0x00	; 0
    f1e2:	80 ec       	ldi	r24, 0xC0	; 192
    f1e4:	90 e2       	ldi	r25, 0x20	; 32
    f1e6:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    f1ea:	e5 ee       	ldi	r30, 0xE5	; 229
    f1ec:	fd e2       	ldi	r31, 0x2D	; 45
    f1ee:	86 81       	ldd	r24, Z+6	; 0x06
    f1f0:	97 81       	ldd	r25, Z+7	; 0x07
    f1f2:	22 85       	ldd	r18, Z+10	; 0x0a
    f1f4:	33 85       	ldd	r19, Z+11	; 0x0b
    f1f6:	82 17       	cp	r24, r18
    f1f8:	93 07       	cpc	r25, r19
    f1fa:	08 f0       	brcs	.+2      	; 0xf1fe <udc_process_setup+0x16e>
    f1fc:	f7 c1       	rjmp	.+1006   	; 0xf5ec <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    f1fe:	80 93 ef 2d 	sts	0x2DEF, r24	; 0x802def <udd_g_ctrlreq+0xa>
    f202:	90 93 f0 2d 	sts	0x2DF0, r25	; 0x802df0 <udd_g_ctrlreq+0xb>
    f206:	f2 c1       	rjmp	.+996    	; 0xf5ec <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    f208:	21 30       	cpi	r18, 0x01	; 1
    f20a:	31 05       	cpc	r19, r1
    f20c:	09 f0       	breq	.+2      	; 0xf210 <udc_process_setup+0x180>
    f20e:	94 c1       	rjmp	.+808    	; 0xf538 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    f210:	61 e0       	ldi	r22, 0x01	; 1
    f212:	70 e0       	ldi	r23, 0x00	; 0
    f214:	80 ed       	ldi	r24, 0xD0	; 208
    f216:	9d e2       	ldi	r25, 0x2D	; 45
    f218:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <udd_set_setup_payload>
    f21c:	e7 c1       	rjmp	.+974    	; 0xf5ec <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    f21e:	81 30       	cpi	r24, 0x01	; 1
    f220:	e9 f5       	brne	.+122    	; 0xf29c <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    f222:	90 91 e6 2d 	lds	r25, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f226:	9a 30       	cpi	r25, 0x0A	; 10
    f228:	c9 f5       	brne	.+114    	; 0xf29c <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    f22a:	21 30       	cpi	r18, 0x01	; 1
    f22c:	31 05       	cpc	r19, r1
    f22e:	09 f0       	breq	.+2      	; 0xf232 <udc_process_setup+0x1a2>
    f230:	53 c1       	rjmp	.+678    	; 0xf4d8 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    f232:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f236:	88 23       	and	r24, r24
    f238:	09 f4       	brne	.+2      	; 0xf23c <udc_process_setup+0x1ac>
    f23a:	4e c1       	rjmp	.+668    	; 0xf4d8 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    f23c:	c0 91 e9 2d 	lds	r28, 0x2DE9	; 0x802de9 <udd_g_ctrlreq+0x4>
    f240:	d0 91 ea 2d 	lds	r29, 0x2DEA	; 0x802dea <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    f244:	00 91 ce 2d 	lds	r16, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f248:	10 91 cf 2d 	lds	r17, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f24c:	d8 01       	movw	r26, r16
    f24e:	ed 91       	ld	r30, X+
    f250:	fc 91       	ld	r31, X
    f252:	84 81       	ldd	r24, Z+4	; 0x04
    f254:	c8 17       	cp	r28, r24
    f256:	08 f0       	brcs	.+2      	; 0xf25a <udc_process_setup+0x1ca>
    f258:	3f c1       	rjmp	.+638    	; 0xf4d8 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    f25a:	60 e0       	ldi	r22, 0x00	; 0
    f25c:	8c 2f       	mov	r24, r28
    f25e:	08 de       	rcall	.-1008   	; 0xee70 <udc_update_iface_desc>
    f260:	88 23       	and	r24, r24
    f262:	09 f4       	brne	.+2      	; 0xf266 <udc_process_setup+0x1d6>
    f264:	34 c1       	rjmp	.+616    	; 0xf4ce <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    f266:	ce 01       	movw	r24, r28
    f268:	99 27       	eor	r25, r25
    f26a:	88 0f       	add	r24, r24
    f26c:	99 1f       	adc	r25, r25
    f26e:	d8 01       	movw	r26, r16
    f270:	12 96       	adiw	r26, 0x02	; 2
    f272:	ed 91       	ld	r30, X+
    f274:	fc 91       	ld	r31, X
    f276:	13 97       	sbiw	r26, 0x03	; 3
    f278:	e8 0f       	add	r30, r24
    f27a:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    f27c:	01 90       	ld	r0, Z+
    f27e:	f0 81       	ld	r31, Z
    f280:	e0 2d       	mov	r30, r0
    f282:	86 81       	ldd	r24, Z+6	; 0x06
    f284:	97 81       	ldd	r25, Z+7	; 0x07
    f286:	fc 01       	movw	r30, r24
    f288:	19 95       	eicall
    f28a:	80 93 d2 2d 	sts	0x2DD2, r24	; 0x802dd2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    f28e:	61 e0       	ldi	r22, 0x01	; 1
    f290:	70 e0       	ldi	r23, 0x00	; 0
    f292:	82 ed       	ldi	r24, 0xD2	; 210
    f294:	9d e2       	ldi	r25, 0x2D	; 45
    f296:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <udd_set_setup_payload>
    f29a:	a8 c1       	rjmp	.+848    	; 0xf5ec <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    f29c:	82 30       	cpi	r24, 0x02	; 2
    f29e:	09 f0       	breq	.+2      	; 0xf2a2 <udc_process_setup+0x212>
    f2a0:	16 c1       	rjmp	.+556    	; 0xf4ce <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    f2a2:	80 91 e6 2d 	lds	r24, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f2a6:	81 11       	cpse	r24, r1
    f2a8:	0b c1       	rjmp	.+534    	; 0xf4c0 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    f2aa:	22 30       	cpi	r18, 0x02	; 2
    f2ac:	31 05       	cpc	r19, r1
    f2ae:	09 f0       	breq	.+2      	; 0xf2b2 <udc_process_setup+0x222>
    f2b0:	43 c1       	rjmp	.+646    	; 0xf538 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    f2b2:	80 91 e9 2d 	lds	r24, 0x2DE9	; 0x802de9 <udd_g_ctrlreq+0x4>
    f2b6:	0e 94 62 59 	call	0xb2c4	; 0xb2c4 <udd_ep_is_halted>
    f2ba:	90 e0       	ldi	r25, 0x00	; 0
    f2bc:	80 93 ca 2d 	sts	0x2DCA, r24	; 0x802dca <udc_ep_status.4757>
    f2c0:	90 93 cb 2d 	sts	0x2DCB, r25	; 0x802dcb <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    f2c4:	62 e0       	ldi	r22, 0x02	; 2
    f2c6:	70 e0       	ldi	r23, 0x00	; 0
    f2c8:	8a ec       	ldi	r24, 0xCA	; 202
    f2ca:	9d e2       	ldi	r25, 0x2D	; 45
    f2cc:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <udd_set_setup_payload>
    f2d0:	8d c1       	rjmp	.+794    	; 0xf5ec <udc_process_setup+0x55c>
    f2d2:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    f2d4:	09 f0       	breq	.+2      	; 0xf2d8 <udc_process_setup+0x248>
    f2d6:	a0 c0       	rjmp	.+320    	; 0xf418 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    f2d8:	90 91 e6 2d 	lds	r25, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f2dc:	93 30       	cpi	r25, 0x03	; 3
    f2de:	91 f1       	breq	.+100    	; 0xf344 <udc_process_setup+0x2b4>
    f2e0:	18 f4       	brcc	.+6      	; 0xf2e8 <udc_process_setup+0x258>
    f2e2:	91 30       	cpi	r25, 0x01	; 1
    f2e4:	a9 f0       	breq	.+42     	; 0xf310 <udc_process_setup+0x280>
    f2e6:	98 c0       	rjmp	.+304    	; 0xf418 <udc_process_setup+0x388>
    f2e8:	95 30       	cpi	r25, 0x05	; 5
    f2ea:	21 f0       	breq	.+8      	; 0xf2f4 <udc_process_setup+0x264>
    f2ec:	99 30       	cpi	r25, 0x09	; 9
    f2ee:	09 f4       	brne	.+2      	; 0xf2f2 <udc_process_setup+0x262>
    f2f0:	43 c0       	rjmp	.+134    	; 0xf378 <udc_process_setup+0x2e8>
    f2f2:	92 c0       	rjmp	.+292    	; 0xf418 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    f2f4:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f2f8:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f2fc:	89 2b       	or	r24, r25
    f2fe:	09 f0       	breq	.+2      	; 0xf302 <udc_process_setup+0x272>
    f300:	1b c1       	rjmp	.+566    	; 0xf538 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    f302:	82 e3       	ldi	r24, 0x32	; 50
    f304:	97 e7       	ldi	r25, 0x77	; 119
    f306:	80 93 f1 2d 	sts	0x2DF1, r24	; 0x802df1 <udd_g_ctrlreq+0xc>
    f30a:	90 93 f2 2d 	sts	0x2DF2, r25	; 0x802df2 <udd_g_ctrlreq+0xd>
    f30e:	6e c1       	rjmp	.+732    	; 0xf5ec <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    f310:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f314:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f318:	89 2b       	or	r24, r25
    f31a:	09 f0       	breq	.+2      	; 0xf31e <udc_process_setup+0x28e>
    f31c:	0d c1       	rjmp	.+538    	; 0xf538 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    f31e:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f322:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f326:	01 97       	sbiw	r24, 0x01	; 1
    f328:	09 f0       	breq	.+2      	; 0xf32c <udc_process_setup+0x29c>
    f32a:	06 c1       	rjmp	.+524    	; 0xf538 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    f32c:	80 91 d4 2d 	lds	r24, 0x2DD4	; 0x802dd4 <udc_device_status>
    f330:	90 91 d5 2d 	lds	r25, 0x2DD5	; 0x802dd5 <udc_device_status+0x1>
    f334:	8d 7f       	andi	r24, 0xFD	; 253
    f336:	80 93 d4 2d 	sts	0x2DD4, r24	; 0x802dd4 <udc_device_status>
    f33a:	90 93 d5 2d 	sts	0x2DD5, r25	; 0x802dd5 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    f33e:	0e 94 55 21 	call	0x42aa	; 0x42aa <usb_callback_remotewakeup_disable>
    f342:	54 c1       	rjmp	.+680    	; 0xf5ec <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    f344:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f348:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f34c:	89 2b       	or	r24, r25
    f34e:	09 f0       	breq	.+2      	; 0xf352 <udc_process_setup+0x2c2>
    f350:	f3 c0       	rjmp	.+486    	; 0xf538 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    f352:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f356:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f35a:	01 97       	sbiw	r24, 0x01	; 1
    f35c:	09 f0       	breq	.+2      	; 0xf360 <udc_process_setup+0x2d0>
    f35e:	b2 c0       	rjmp	.+356    	; 0xf4c4 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    f360:	80 91 d4 2d 	lds	r24, 0x2DD4	; 0x802dd4 <udc_device_status>
    f364:	90 91 d5 2d 	lds	r25, 0x2DD5	; 0x802dd5 <udc_device_status+0x1>
    f368:	82 60       	ori	r24, 0x02	; 2
    f36a:	80 93 d4 2d 	sts	0x2DD4, r24	; 0x802dd4 <udc_device_status>
    f36e:	90 93 d5 2d 	sts	0x2DD5, r25	; 0x802dd5 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    f372:	0e 94 54 21 	call	0x42a8	; 0x42a8 <usb_callback_remotewakeup_enable>
    f376:	3a c1       	rjmp	.+628    	; 0xf5ec <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    f378:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f37c:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f380:	89 2b       	or	r24, r25
    f382:	09 f0       	breq	.+2      	; 0xf386 <udc_process_setup+0x2f6>
    f384:	d9 c0       	rjmp	.+434    	; 0xf538 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    f386:	0e 94 c8 58 	call	0xb190	; 0xb190 <udd_getaddress>
    f38a:	88 23       	and	r24, r24
    f38c:	09 f4       	brne	.+2      	; 0xf390 <udc_process_setup+0x300>
    f38e:	9f c0       	rjmp	.+318    	; 0xf4ce <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    f390:	20 91 e7 2d 	lds	r18, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f394:	30 91 e8 2d 	lds	r19, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f398:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    f39a:	e0 91 5b 20 	lds	r30, 0x205B	; 0x80205b <udc_config>
    f39e:	f0 91 5c 20 	lds	r31, 0x205C	; 0x80205c <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    f3a2:	81 89       	ldd	r24, Z+17	; 0x11
    f3a4:	90 e0       	ldi	r25, 0x00	; 0
    f3a6:	82 17       	cp	r24, r18
    f3a8:	93 07       	cpc	r25, r19
    f3aa:	08 f4       	brcc	.+2      	; 0xf3ae <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    f3ac:	90 c0       	rjmp	.+288    	; 0xf4ce <udc_process_setup+0x43e>
    f3ae:	12 de       	rcall	.-988    	; 0xefd4 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    f3b0:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f3b4:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f3b8:	80 93 d0 2d 	sts	0x2DD0, r24	; 0x802dd0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    f3bc:	88 23       	and	r24, r24
    f3be:	09 f4       	brne	.+2      	; 0xf3c2 <udc_process_setup+0x332>
    f3c0:	15 c1       	rjmp	.+554    	; 0xf5ec <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    f3c2:	99 27       	eor	r25, r25
    f3c4:	81 50       	subi	r24, 0x01	; 1
    f3c6:	90 4c       	sbci	r25, 0xC0	; 192
    f3c8:	88 0f       	add	r24, r24
    f3ca:	99 1f       	adc	r25, r25
    f3cc:	88 0f       	add	r24, r24
    f3ce:	99 1f       	adc	r25, r25
    f3d0:	e0 91 5d 20 	lds	r30, 0x205D	; 0x80205d <udc_config+0x2>
    f3d4:	f0 91 5e 20 	lds	r31, 0x205E	; 0x80205e <udc_config+0x3>
    f3d8:	e8 0f       	add	r30, r24
    f3da:	f9 1f       	adc	r31, r25
    f3dc:	e0 93 ce 2d 	sts	0x2DCE, r30	; 0x802dce <udc_ptr_conf>
    f3e0:	f0 93 cf 2d 	sts	0x2DCF, r31	; 0x802dcf <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f3e4:	01 90       	ld	r0, Z+
    f3e6:	f0 81       	ld	r31, Z
    f3e8:	e0 2d       	mov	r30, r0
    f3ea:	84 81       	ldd	r24, Z+4	; 0x04
    f3ec:	88 23       	and	r24, r24
    f3ee:	09 f4       	brne	.+2      	; 0xf3f2 <udc_process_setup+0x362>
    f3f0:	fd c0       	rjmp	.+506    	; 0xf5ec <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    f3f2:	c0 e0       	ldi	r28, 0x00	; 0
    f3f4:	60 e0       	ldi	r22, 0x00	; 0
    f3f6:	8c 2f       	mov	r24, r28
    f3f8:	b7 dd       	rcall	.-1170   	; 0xef68 <udc_iface_enable>
    f3fa:	88 23       	and	r24, r24
    f3fc:	09 f4       	brne	.+2      	; 0xf400 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    f3fe:	67 c0       	rjmp	.+206    	; 0xf4ce <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f400:	cf 5f       	subi	r28, 0xFF	; 255
    f402:	e0 91 ce 2d 	lds	r30, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f406:	f0 91 cf 2d 	lds	r31, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f40a:	01 90       	ld	r0, Z+
    f40c:	f0 81       	ld	r31, Z
    f40e:	e0 2d       	mov	r30, r0
    f410:	84 81       	ldd	r24, Z+4	; 0x04
    f412:	c8 17       	cp	r28, r24
    f414:	78 f3       	brcs	.-34     	; 0xf3f4 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    f416:	ea c0       	rjmp	.+468    	; 0xf5ec <udc_process_setup+0x55c>
    f418:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    f41a:	e9 f4       	brne	.+58     	; 0xf456 <udc_process_setup+0x3c6>
    f41c:	90 91 e6 2d 	lds	r25, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f420:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    f422:	c9 f4       	brne	.+50     	; 0xf456 <udc_process_setup+0x3c6>
    f424:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f428:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f42c:	89 2b       	or	r24, r25
    f42e:	09 f0       	breq	.+2      	; 0xf432 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    f430:	53 c0       	rjmp	.+166    	; 0xf4d8 <udc_process_setup+0x448>
    f432:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f436:	88 23       	and	r24, r24
    f438:	09 f4       	brne	.+2      	; 0xf43c <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    f43a:	4e c0       	rjmp	.+156    	; 0xf4d8 <udc_process_setup+0x448>
    f43c:	e5 ee       	ldi	r30, 0xE5	; 229
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    f43e:	fd e2       	ldi	r31, 0x2D	; 45

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    f440:	c4 81       	ldd	r28, Z+4	; 0x04
    f442:	d2 81       	ldd	r29, Z+2	; 0x02
    f444:	8c 2f       	mov	r24, r28
    f446:	4e dd       	rcall	.-1380   	; 0xeee4 <udc_iface_disable>
    f448:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    f44a:	09 f4       	brne	.+2      	; 0xf44e <udc_process_setup+0x3be>
    f44c:	40 c0       	rjmp	.+128    	; 0xf4ce <udc_process_setup+0x43e>
    f44e:	6d 2f       	mov	r22, r29
    f450:	8c 2f       	mov	r24, r28
    f452:	8a dd       	rcall	.-1260   	; 0xef68 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    f454:	3a c0       	rjmp	.+116    	; 0xf4ca <udc_process_setup+0x43a>
    f456:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    f458:	d1 f5       	brne	.+116    	; 0xf4ce <udc_process_setup+0x43e>
    f45a:	80 91 e6 2d 	lds	r24, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f45e:	81 30       	cpi	r24, 0x01	; 1
    f460:	19 f0       	breq	.+6      	; 0xf468 <udc_process_setup+0x3d8>
    f462:	83 30       	cpi	r24, 0x03	; 3
    f464:	a1 f0       	breq	.+40     	; 0xf48e <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    f466:	30 c0       	rjmp	.+96     	; 0xf4c8 <udc_process_setup+0x438>
    f468:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f46c:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f470:	89 2b       	or	r24, r25
    f472:	09 f0       	breq	.+2      	; 0xf476 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    f474:	61 c0       	rjmp	.+194    	; 0xf538 <udc_process_setup+0x4a8>
    f476:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f47a:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f47e:	89 2b       	or	r24, r25
    f480:	09 f0       	breq	.+2      	; 0xf484 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    f482:	5a c0       	rjmp	.+180    	; 0xf538 <udc_process_setup+0x4a8>
    f484:	80 91 e9 2d 	lds	r24, 0x2DE9	; 0x802de9 <udd_g_ctrlreq+0x4>
    f488:	0e 94 7d 59 	call	0xb2fa	; 0xb2fa <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    f48c:	1e c0       	rjmp	.+60     	; 0xf4ca <udc_process_setup+0x43a>
    f48e:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f492:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f496:	89 2b       	or	r24, r25
    f498:	09 f0       	breq	.+2      	; 0xf49c <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    f49a:	4e c0       	rjmp	.+156    	; 0xf538 <udc_process_setup+0x4a8>
    f49c:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f4a0:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f4a4:	89 2b       	or	r24, r25
    f4a6:	09 f0       	breq	.+2      	; 0xf4aa <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    f4a8:	47 c0       	rjmp	.+142    	; 0xf538 <udc_process_setup+0x4a8>
    f4aa:	c5 ee       	ldi	r28, 0xE5	; 229
    f4ac:	dd e2       	ldi	r29, 0x2D	; 45
    f4ae:	8c 81       	ldd	r24, Y+4	; 0x04
    f4b0:	0e 94 7f 5a 	call	0xb4fe	; 0xb4fe <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    f4b4:	8c 81       	ldd	r24, Y+4	; 0x04
    f4b6:	0e 94 ea 5a 	call	0xb5d4	; 0xb5d4 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    f4ba:	07 c0       	rjmp	.+14     	; 0xf4ca <udc_process_setup+0x43a>
    f4bc:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    f4be:	05 c0       	rjmp	.+10     	; 0xf4ca <udc_process_setup+0x43a>
    f4c0:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    f4c2:	03 c0       	rjmp	.+6      	; 0xf4ca <udc_process_setup+0x43a>
    f4c4:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    f4c6:	01 c0       	rjmp	.+2      	; 0xf4ca <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    f4c8:	80 e0       	ldi	r24, 0x00	; 0
    f4ca:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    f4cc:	90 c0       	rjmp	.+288    	; 0xf5ee <udc_process_setup+0x55e>
    f4ce:	80 91 e5 2d 	lds	r24, 0x2DE5	; 0x802de5 <udd_g_ctrlreq>
    f4d2:	8f 71       	andi	r24, 0x1F	; 31
    f4d4:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    f4d6:	81 f5       	brne	.+96     	; 0xf538 <udc_process_setup+0x4a8>
    f4d8:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f4dc:	88 23       	and	r24, r24
    f4de:	09 f4       	brne	.+2      	; 0xf4e2 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    f4e0:	71 c0       	rjmp	.+226    	; 0xf5c4 <udc_process_setup+0x534>
    f4e2:	00 91 e9 2d 	lds	r16, 0x2DE9	; 0x802de9 <udd_g_ctrlreq+0x4>
    f4e6:	10 91 ea 2d 	lds	r17, 0x2DEA	; 0x802dea <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    f4ea:	c0 91 ce 2d 	lds	r28, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f4ee:	d0 91 cf 2d 	lds	r29, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f4f2:	e8 81       	ld	r30, Y
    f4f4:	f9 81       	ldd	r31, Y+1	; 0x01
    f4f6:	84 81       	ldd	r24, Z+4	; 0x04
    f4f8:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    f4fa:	08 f0       	brcs	.+2      	; 0xf4fe <udc_process_setup+0x46e>
    f4fc:	65 c0       	rjmp	.+202    	; 0xf5c8 <udc_process_setup+0x538>
    f4fe:	60 e0       	ldi	r22, 0x00	; 0
    f500:	80 2f       	mov	r24, r16
    f502:	b6 dc       	rcall	.-1684   	; 0xee70 <udc_update_iface_desc>
    f504:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    f506:	c1 f0       	breq	.+48     	; 0xf538 <udc_process_setup+0x4a8>
    f508:	f8 01       	movw	r30, r16
    f50a:	ff 27       	eor	r31, r31
    f50c:	cf 01       	movw	r24, r30
    f50e:	88 0f       	add	r24, r24
    f510:	99 1f       	adc	r25, r25
    f512:	ea 81       	ldd	r30, Y+2	; 0x02
    f514:	fb 81       	ldd	r31, Y+3	; 0x03
    f516:	e8 0f       	add	r30, r24
    f518:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    f51a:	c0 81       	ld	r28, Z
    f51c:	d1 81       	ldd	r29, Z+1	; 0x01
    f51e:	ee 81       	ldd	r30, Y+6	; 0x06
    f520:	ff 81       	ldd	r31, Y+7	; 0x07
    f522:	19 95       	eicall
    f524:	68 2f       	mov	r22, r24
    f526:	80 2f       	mov	r24, r16
    f528:	a3 dc       	rcall	.-1722   	; 0xee70 <udc_update_iface_desc>
    f52a:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    f52c:	29 f0       	breq	.+10     	; 0xf538 <udc_process_setup+0x4a8>
    f52e:	ec 81       	ldd	r30, Y+4	; 0x04
    f530:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    f532:	19 95       	eicall
    f534:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    f536:	5b c0       	rjmp	.+182    	; 0xf5ee <udc_process_setup+0x55e>
    f538:	80 91 e5 2d 	lds	r24, 0x2DE5	; 0x802de5 <udd_g_ctrlreq>
    f53c:	8f 71       	andi	r24, 0x1F	; 31
    f53e:	82 30       	cpi	r24, 0x02	; 2
    f540:	09 f0       	breq	.+2      	; 0xf544 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    f542:	44 c0       	rjmp	.+136    	; 0xf5cc <udc_process_setup+0x53c>
    f544:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f548:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f54a:	b1 f1       	breq	.+108    	; 0xf5b8 <udc_process_setup+0x528>
    f54c:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f550:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f554:	ed 91       	ld	r30, X+
    f556:	fc 91       	ld	r31, X
    f558:	11 97       	sbiw	r26, 0x01	; 1
    f55a:	84 81       	ldd	r24, Z+4	; 0x04
    f55c:	88 23       	and	r24, r24
    f55e:	71 f1       	breq	.+92     	; 0xf5bc <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    f560:	c0 e0       	ldi	r28, 0x00	; 0
    f562:	ec 2f       	mov	r30, r28
    f564:	f0 e0       	ldi	r31, 0x00	; 0
    f566:	ee 0f       	add	r30, r30
    f568:	ff 1f       	adc	r31, r31
    f56a:	12 96       	adiw	r26, 0x02	; 2
    f56c:	8d 91       	ld	r24, X+
    f56e:	9c 91       	ld	r25, X
    f570:	13 97       	sbiw	r26, 0x03	; 3
    f572:	e8 0f       	add	r30, r24
    f574:	f9 1f       	adc	r31, r25
    f576:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    f578:	11 81       	ldd	r17, Z+1	; 0x01
    f57a:	d8 01       	movw	r26, r16
    f57c:	16 96       	adiw	r26, 0x06	; 6
    f57e:	ed 91       	ld	r30, X+
    f580:	fc 91       	ld	r31, X
    f582:	17 97       	sbiw	r26, 0x07	; 7
    f584:	19 95       	eicall
    f586:	68 2f       	mov	r22, r24
    f588:	8c 2f       	mov	r24, r28
    f58a:	72 dc       	rcall	.-1820   	; 0xee70 <udc_update_iface_desc>
    f58c:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    f58e:	79 f1       	breq	.+94     	; 0xf5ee <udc_process_setup+0x55e>
    f590:	d8 01       	movw	r26, r16
    f592:	14 96       	adiw	r26, 0x04	; 4
    f594:	ed 91       	ld	r30, X+
    f596:	fc 91       	ld	r31, X
    f598:	15 97       	sbiw	r26, 0x05	; 5
    f59a:	19 95       	eicall
    f59c:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    f59e:	27 c0       	rjmp	.+78     	; 0xf5ee <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f5a0:	cf 5f       	subi	r28, 0xFF	; 255
    f5a2:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f5a6:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f5aa:	ed 91       	ld	r30, X+
    f5ac:	fc 91       	ld	r31, X
    f5ae:	11 97       	sbiw	r26, 0x01	; 1
    f5b0:	94 81       	ldd	r25, Z+4	; 0x04
    f5b2:	c9 17       	cp	r28, r25
    f5b4:	b0 f2       	brcs	.-84     	; 0xf562 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    f5b6:	1b c0       	rjmp	.+54     	; 0xf5ee <udc_process_setup+0x55e>
    f5b8:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    f5ba:	19 c0       	rjmp	.+50     	; 0xf5ee <udc_process_setup+0x55e>
    f5bc:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    f5be:	17 c0       	rjmp	.+46     	; 0xf5ee <udc_process_setup+0x55e>
    f5c0:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    f5c2:	15 c0       	rjmp	.+42     	; 0xf5ee <udc_process_setup+0x55e>
    f5c4:	80 e0       	ldi	r24, 0x00	; 0
    f5c6:	13 c0       	rjmp	.+38     	; 0xf5ee <udc_process_setup+0x55e>
    f5c8:	80 e0       	ldi	r24, 0x00	; 0
    f5ca:	11 c0       	rjmp	.+34     	; 0xf5ee <udc_process_setup+0x55e>
    f5cc:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    f5ce:	0f c0       	rjmp	.+30     	; 0xf5ee <udc_process_setup+0x55e>
    f5d0:	98 2f       	mov	r25, r24
    f5d2:	90 76       	andi	r25, 0x60	; 96
    f5d4:	09 f0       	breq	.+2      	; 0xf5d8 <udc_process_setup+0x548>
    f5d6:	7b cf       	rjmp	.-266    	; 0xf4ce <udc_process_setup+0x43e>
    f5d8:	74 cd       	rjmp	.-1304   	; 0xf0c2 <udc_process_setup+0x32>
    f5da:	98 2f       	mov	r25, r24
    f5dc:	90 76       	andi	r25, 0x60	; 96
    f5de:	09 f0       	breq	.+2      	; 0xf5e2 <udc_process_setup+0x552>
    f5e0:	76 cf       	rjmp	.-276    	; 0xf4ce <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    f5e2:	77 ce       	rjmp	.-786    	; 0xf2d2 <udc_process_setup+0x242>
		str = udc_string_product_name;
    f5e4:	3c e0       	ldi	r19, 0x0C	; 12
    f5e6:	e2 ee       	ldi	r30, 0xE2	; 226
    f5e8:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    f5ea:	eb cd       	rjmp	.-1066   	; 0xf1c2 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    f5ec:	81 e0       	ldi	r24, 0x01	; 1
    f5ee:	df 91       	pop	r29
    f5f0:	cf 91       	pop	r28
    f5f2:	1f 91       	pop	r17
    f5f4:	0f 91       	pop	r16
    f5f6:	08 95       	ret

0000f5f8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    f5f8:	cf 93       	push	r28
    f5fa:	df 93       	push	r29
    f5fc:	1f 92       	push	r1
    f5fe:	cd b7       	in	r28, 0x3d	; 61
    f600:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    f602:	80 91 85 2e 	lds	r24, 0x2E85	; 0x802e85 <stdio_base>
    f606:	90 91 86 2e 	lds	r25, 0x2E86	; 0x802e86 <stdio_base+0x1>
    f60a:	e0 91 81 2e 	lds	r30, 0x2E81	; 0x802e81 <ptr_get>
    f60e:	f0 91 82 2e 	lds	r31, 0x2E82	; 0x802e82 <ptr_get+0x1>
    f612:	be 01       	movw	r22, r28
    f614:	6f 5f       	subi	r22, 0xFF	; 255
    f616:	7f 4f       	sbci	r23, 0xFF	; 255
    f618:	19 95       	eicall
	return c;
    f61a:	89 81       	ldd	r24, Y+1	; 0x01
}
    f61c:	08 2e       	mov	r0, r24
    f61e:	00 0c       	add	r0, r0
    f620:	99 0b       	sbc	r25, r25
    f622:	0f 90       	pop	r0
    f624:	df 91       	pop	r29
    f626:	cf 91       	pop	r28
    f628:	08 95       	ret

0000f62a <stdio_usb_putchar>:
int stdio_usb_putchar (volatile void * unused, char data)
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    f62a:	80 91 d6 2d 	lds	r24, 0x2DD6	; 0x802dd6 <stdio_usb_interface_enable>
    f62e:	88 23       	and	r24, r24
    f630:	81 f0       	breq	.+32     	; 0xf652 <stdio_usb_putchar+0x28>
    f632:	86 2f       	mov	r24, r22
		return 0;  // -1
	}

	return udi_cdc_putc(data) ? 0 : -1;
    f634:	08 2e       	mov	r0, r24
    f636:	00 0c       	add	r0, r0
    f638:	99 0b       	sbc	r25, r25
    f63a:	db db       	rcall	.-2122   	; 0xedf2 <udi_cdc_putc>
    f63c:	21 e0       	ldi	r18, 0x01	; 1
    f63e:	30 e0       	ldi	r19, 0x00	; 0
    f640:	89 2b       	or	r24, r25
    f642:	11 f0       	breq	.+4      	; 0xf648 <stdio_usb_putchar+0x1e>
    f644:	20 e0       	ldi	r18, 0x00	; 0
    f646:	30 e0       	ldi	r19, 0x00	; 0
    f648:	88 27       	eor	r24, r24
    f64a:	99 27       	eor	r25, r25
    f64c:	82 1b       	sub	r24, r18
    f64e:	93 0b       	sbc	r25, r19
    f650:	08 95       	ret
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
		return 0;  // -1
    f652:	80 e0       	ldi	r24, 0x00	; 0
    f654:	90 e0       	ldi	r25, 0x00	; 0
	}

	return udi_cdc_putc(data) ? 0 : -1;
}
    f656:	08 95       	ret

0000f658 <stdio_usb_getchar>:

void stdio_usb_getchar (void volatile * unused, char *data)
{
    f658:	cf 93       	push	r28
    f65a:	df 93       	push	r29
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    f65c:	80 91 d6 2d 	lds	r24, 0x2DD6	; 0x802dd6 <stdio_usb_interface_enable>
    f660:	81 11       	cpse	r24, r1
    f662:	03 c0       	rjmp	.+6      	; 0xf66a <stdio_usb_getchar+0x12>
		*data = 0;  // -1
    f664:	fb 01       	movw	r30, r22
    f666:	10 82       	st	Z, r1
		return;
    f668:	03 c0       	rjmp	.+6      	; 0xf670 <stdio_usb_getchar+0x18>
	}

	*data = (char)udi_cdc_getc();
    f66a:	eb 01       	movw	r28, r22
    f66c:	cf da       	rcall	.-2658   	; 0xec0c <udi_cdc_getc>
}
    f66e:	88 83       	st	Y, r24
    f670:	df 91       	pop	r29
    f672:	cf 91       	pop	r28
    f674:	08 95       	ret

0000f676 <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
    f676:	81 e0       	ldi	r24, 0x01	; 1
    f678:	80 93 d6 2d 	sts	0x2DD6, r24	; 0x802dd6 <stdio_usb_interface_enable>
	return true;
}
    f67c:	08 95       	ret

0000f67e <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    f67e:	10 92 d6 2d 	sts	0x2DD6, r1	; 0x802dd6 <stdio_usb_interface_enable>
    f682:	08 95       	ret

0000f684 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    f684:	10 92 85 2e 	sts	0x2E85, r1	; 0x802e85 <stdio_base>
    f688:	10 92 86 2e 	sts	0x2E86, r1	; 0x802e86 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    f68c:	85 e1       	ldi	r24, 0x15	; 21
    f68e:	9b e7       	ldi	r25, 0x7B	; 123
    f690:	80 93 83 2e 	sts	0x2E83, r24	; 0x802e83 <ptr_put>
    f694:	90 93 84 2e 	sts	0x2E84, r25	; 0x802e84 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    f698:	8c e2       	ldi	r24, 0x2C	; 44
    f69a:	9b e7       	ldi	r25, 0x7B	; 123
    f69c:	80 93 81 2e 	sts	0x2E81, r24	; 0x802e81 <ptr_get>
    f6a0:	90 93 82 2e 	sts	0x2E82, r25	; 0x802e82 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    f6a4:	94 dc       	rcall	.-1752   	; 0xefce <udc_start>
    f6a6:	6c ef       	ldi	r22, 0xFC	; 252
    f6a8:	7a e7       	ldi	r23, 0x7A	; 122
    f6aa:	8a e5       	ldi	r24, 0x5A	; 90
    f6ac:	9b e7       	ldi	r25, 0x7B	; 123
    f6ae:	0c 94 27 89 	jmp	0x1124e	; 0x1124e <fdevopen>
    f6b2:	08 95       	ret

0000f6b4 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    f6b4:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    f6b6:	80 91 85 2e 	lds	r24, 0x2E85	; 0x802e85 <stdio_base>
    f6ba:	90 91 86 2e 	lds	r25, 0x2E86	; 0x802e86 <stdio_base+0x1>
    f6be:	e0 91 83 2e 	lds	r30, 0x2E83	; 0x802e83 <ptr_put>
    f6c2:	f0 91 84 2e 	lds	r31, 0x2E84	; 0x802e84 <ptr_put+0x1>
    f6c6:	19 95       	eicall
    f6c8:	99 23       	and	r25, r25
    f6ca:	1c f0       	brlt	.+6      	; 0xf6d2 <_write+0x1e>
		return -1;
	}
	return 1;
    f6cc:	81 e0       	ldi	r24, 0x01	; 1
    f6ce:	90 e0       	ldi	r25, 0x00	; 0
    f6d0:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    f6d2:	8f ef       	ldi	r24, 0xFF	; 255
    f6d4:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    f6d6:	08 95       	ret

0000f6d8 <nvm_eeprom_read_buffer>:
    f6d8:	cf 93       	push	r28
    f6da:	df 93       	push	r29
    f6dc:	9c 01       	movw	r18, r24
    f6de:	db 01       	movw	r26, r22
    f6e0:	e0 ec       	ldi	r30, 0xC0	; 192
    f6e2:	f1 e0       	ldi	r31, 0x01	; 1
    f6e4:	97 85       	ldd	r25, Z+15	; 0x0f
    f6e6:	99 23       	and	r25, r25
    f6e8:	ec f3       	brlt	.-6      	; 0xf6e4 <nvm_eeprom_read_buffer+0xc>
    f6ea:	cc ec       	ldi	r28, 0xCC	; 204
    f6ec:	d1 e0       	ldi	r29, 0x01	; 1
    f6ee:	98 81       	ld	r25, Y
    f6f0:	98 60       	ori	r25, 0x08	; 8
    f6f2:	98 83       	st	Y, r25
    f6f4:	b9 01       	movw	r22, r18
    f6f6:	70 5f       	subi	r23, 0xF0	; 240
    f6f8:	cd 01       	movw	r24, r26
    f6fa:	0e 94 eb 88 	call	0x111d6	; 0x111d6 <memcpy>
    f6fe:	88 81       	ld	r24, Y
    f700:	87 7f       	andi	r24, 0xF7	; 247
    f702:	88 83       	st	Y, r24
    f704:	df 91       	pop	r29
    f706:	cf 91       	pop	r28
    f708:	08 95       	ret

0000f70a <nvm_eeprom_flush_buffer>:
    f70a:	e0 ec       	ldi	r30, 0xC0	; 192
    f70c:	f1 e0       	ldi	r31, 0x01	; 1
    f70e:	87 85       	ldd	r24, Z+15	; 0x0f
    f710:	88 23       	and	r24, r24
    f712:	ec f3       	brlt	.-6      	; 0xf70e <nvm_eeprom_flush_buffer+0x4>
    f714:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    f718:	81 ff       	sbrs	r24, 1
    f71a:	07 c0       	rjmp	.+14     	; 0xf72a <nvm_eeprom_flush_buffer+0x20>
    f71c:	86 e3       	ldi	r24, 0x36	; 54
    f71e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    f722:	61 e0       	ldi	r22, 0x01	; 1
    f724:	8b ec       	ldi	r24, 0xCB	; 203
    f726:	91 e0       	ldi	r25, 0x01	; 1
    f728:	56 c2       	rjmp	.+1196   	; 0xfbd6 <ccp_write_io>
    f72a:	08 95       	ret

0000f72c <nvm_eeprom_load_byte_to_buffer>:
    f72c:	e0 ec       	ldi	r30, 0xC0	; 192
    f72e:	f1 e0       	ldi	r31, 0x01	; 1
    f730:	97 85       	ldd	r25, Z+15	; 0x0f
    f732:	99 23       	and	r25, r25
    f734:	ec f3       	brlt	.-6      	; 0xf730 <nvm_eeprom_load_byte_to_buffer+0x4>
    f736:	ac ec       	ldi	r26, 0xCC	; 204
    f738:	b1 e0       	ldi	r27, 0x01	; 1
    f73a:	9c 91       	ld	r25, X
    f73c:	98 60       	ori	r25, 0x08	; 8
    f73e:	9c 93       	st	X, r25
    f740:	e8 2f       	mov	r30, r24
    f742:	f0 e0       	ldi	r31, 0x00	; 0
    f744:	f0 5f       	subi	r31, 0xF0	; 240
    f746:	60 83       	st	Z, r22
    f748:	8c 91       	ld	r24, X
    f74a:	87 7f       	andi	r24, 0xF7	; 247
    f74c:	8c 93       	st	X, r24
    f74e:	08 95       	ret

0000f750 <nvm_eeprom_write_byte>:
    f750:	ff 92       	push	r15
    f752:	0f 93       	push	r16
    f754:	1f 93       	push	r17
    f756:	cf 93       	push	r28
    f758:	df 93       	push	r29
    f75a:	18 2f       	mov	r17, r24
    f75c:	f9 2e       	mov	r15, r25
    f75e:	c6 2f       	mov	r28, r22
    f760:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    f764:	d2 df       	rcall	.-92     	; 0xf70a <nvm_eeprom_flush_buffer>
    f766:	e0 ec       	ldi	r30, 0xC0	; 192
    f768:	f1 e0       	ldi	r31, 0x01	; 1
    f76a:	87 85       	ldd	r24, Z+15	; 0x0f
    f76c:	88 23       	and	r24, r24
    f76e:	ec f3       	brlt	.-6      	; 0xf76a <nvm_eeprom_write_byte+0x1a>
    f770:	6c 2f       	mov	r22, r28
    f772:	81 2f       	mov	r24, r17
    f774:	db df       	rcall	.-74     	; 0xf72c <nvm_eeprom_load_byte_to_buffer>
    f776:	c0 ec       	ldi	r28, 0xC0	; 192
    f778:	d1 e0       	ldi	r29, 0x01	; 1
    f77a:	1a 82       	std	Y+2, r1	; 0x02
    f77c:	f9 82       	std	Y+1, r15	; 0x01
    f77e:	18 83       	st	Y, r17
    f780:	85 e3       	ldi	r24, 0x35	; 53
    f782:	8a 87       	std	Y+10, r24	; 0x0a
    f784:	61 e0       	ldi	r22, 0x01	; 1
    f786:	8b ec       	ldi	r24, 0xCB	; 203
    f788:	91 e0       	ldi	r25, 0x01	; 1
    f78a:	25 d2       	rcall	.+1098   	; 0xfbd6 <ccp_write_io>
    f78c:	0a 87       	std	Y+10, r16	; 0x0a
    f78e:	df 91       	pop	r29
    f790:	cf 91       	pop	r28
    f792:	1f 91       	pop	r17
    f794:	0f 91       	pop	r16
    f796:	ff 90       	pop	r15
    f798:	08 95       	ret

0000f79a <nvm_eeprom_load_page_to_buffer>:
    f79a:	0f 93       	push	r16
    f79c:	1f 93       	push	r17
    f79e:	cf 93       	push	r28
    f7a0:	8c 01       	movw	r16, r24
    f7a2:	e0 ec       	ldi	r30, 0xC0	; 192
    f7a4:	f1 e0       	ldi	r31, 0x01	; 1
    f7a6:	87 85       	ldd	r24, Z+15	; 0x0f
    f7a8:	88 23       	and	r24, r24
    f7aa:	ec f3       	brlt	.-6      	; 0xf7a6 <nvm_eeprom_load_page_to_buffer+0xc>
    f7ac:	c0 e0       	ldi	r28, 0x00	; 0
    f7ae:	f8 01       	movw	r30, r16
    f7b0:	61 91       	ld	r22, Z+
    f7b2:	8f 01       	movw	r16, r30
    f7b4:	8c 2f       	mov	r24, r28
    f7b6:	ba df       	rcall	.-140    	; 0xf72c <nvm_eeprom_load_byte_to_buffer>
    f7b8:	cf 5f       	subi	r28, 0xFF	; 255
    f7ba:	c0 32       	cpi	r28, 0x20	; 32
    f7bc:	c1 f7       	brne	.-16     	; 0xf7ae <nvm_eeprom_load_page_to_buffer+0x14>
    f7be:	cf 91       	pop	r28
    f7c0:	1f 91       	pop	r17
    f7c2:	0f 91       	pop	r16
    f7c4:	08 95       	ret

0000f7c6 <nvm_eeprom_atomic_write_page>:
    f7c6:	1f 93       	push	r17
    f7c8:	cf 93       	push	r28
    f7ca:	df 93       	push	r29
    f7cc:	e0 ec       	ldi	r30, 0xC0	; 192
    f7ce:	f1 e0       	ldi	r31, 0x01	; 1
    f7d0:	97 85       	ldd	r25, Z+15	; 0x0f
    f7d2:	99 23       	and	r25, r25
    f7d4:	ec f3       	brlt	.-6      	; 0xf7d0 <nvm_eeprom_atomic_write_page+0xa>
    f7d6:	20 e2       	ldi	r18, 0x20	; 32
    f7d8:	82 9f       	mul	r24, r18
    f7da:	c0 01       	movw	r24, r0
    f7dc:	11 24       	eor	r1, r1
    f7de:	c0 ec       	ldi	r28, 0xC0	; 192
    f7e0:	d1 e0       	ldi	r29, 0x01	; 1
    f7e2:	1a 82       	std	Y+2, r1	; 0x02
    f7e4:	99 83       	std	Y+1, r25	; 0x01
    f7e6:	88 83       	st	Y, r24
    f7e8:	1a 85       	ldd	r17, Y+10	; 0x0a
    f7ea:	85 e3       	ldi	r24, 0x35	; 53
    f7ec:	8a 87       	std	Y+10, r24	; 0x0a
    f7ee:	61 e0       	ldi	r22, 0x01	; 1
    f7f0:	8b ec       	ldi	r24, 0xCB	; 203
    f7f2:	91 e0       	ldi	r25, 0x01	; 1
    f7f4:	f0 d1       	rcall	.+992    	; 0xfbd6 <ccp_write_io>
    f7f6:	1a 87       	std	Y+10, r17	; 0x0a
    f7f8:	df 91       	pop	r29
    f7fa:	cf 91       	pop	r28
    f7fc:	1f 91       	pop	r17
    f7fe:	08 95       	ret

0000f800 <nvm_eeprom_erase_and_write_buffer>:
    f800:	cf 92       	push	r12
    f802:	df 92       	push	r13
    f804:	ef 92       	push	r14
    f806:	ff 92       	push	r15
    f808:	0f 93       	push	r16
    f80a:	1f 93       	push	r17
    f80c:	cf 93       	push	r28
    f80e:	df 93       	push	r29
    f810:	ec 01       	movw	r28, r24
    f812:	7b 01       	movw	r14, r22
    f814:	8a 01       	movw	r16, r20
    f816:	45 2b       	or	r20, r21
    f818:	51 f1       	breq	.+84     	; 0xf86e <nvm_eeprom_erase_and_write_buffer+0x6e>
    f81a:	ce 01       	movw	r24, r28
    f81c:	8f 71       	andi	r24, 0x1F	; 31
    f81e:	99 27       	eor	r25, r25
    f820:	89 2b       	or	r24, r25
    f822:	b1 f4       	brne	.+44     	; 0xf850 <nvm_eeprom_erase_and_write_buffer+0x50>
    f824:	00 32       	cpi	r16, 0x20	; 32
    f826:	11 05       	cpc	r17, r1
    f828:	98 f0       	brcs	.+38     	; 0xf850 <nvm_eeprom_erase_and_write_buffer+0x50>
    f82a:	c7 01       	movw	r24, r14
    f82c:	b6 df       	rcall	.-148    	; 0xf79a <nvm_eeprom_load_page_to_buffer>
    f82e:	ce 01       	movw	r24, r28
    f830:	96 95       	lsr	r25
    f832:	87 95       	ror	r24
    f834:	92 95       	swap	r25
    f836:	82 95       	swap	r24
    f838:	8f 70       	andi	r24, 0x0F	; 15
    f83a:	89 27       	eor	r24, r25
    f83c:	9f 70       	andi	r25, 0x0F	; 15
    f83e:	89 27       	eor	r24, r25
    f840:	c2 df       	rcall	.-124    	; 0xf7c6 <nvm_eeprom_atomic_write_page>
    f842:	a0 96       	adiw	r28, 0x20	; 32
    f844:	80 e2       	ldi	r24, 0x20	; 32
    f846:	e8 0e       	add	r14, r24
    f848:	f1 1c       	adc	r15, r1
    f84a:	00 52       	subi	r16, 0x20	; 32
    f84c:	11 09       	sbc	r17, r1
    f84e:	0c c0       	rjmp	.+24     	; 0xf868 <nvm_eeprom_erase_and_write_buffer+0x68>
    f850:	6e 01       	movw	r12, r28
    f852:	ef ef       	ldi	r30, 0xFF	; 255
    f854:	ce 1a       	sub	r12, r30
    f856:	de 0a       	sbc	r13, r30
    f858:	f7 01       	movw	r30, r14
    f85a:	61 91       	ld	r22, Z+
    f85c:	7f 01       	movw	r14, r30
    f85e:	ce 01       	movw	r24, r28
    f860:	77 df       	rcall	.-274    	; 0xf750 <nvm_eeprom_write_byte>
    f862:	01 50       	subi	r16, 0x01	; 1
    f864:	11 09       	sbc	r17, r1
    f866:	e6 01       	movw	r28, r12
    f868:	01 15       	cp	r16, r1
    f86a:	11 05       	cpc	r17, r1
    f86c:	b1 f6       	brne	.-84     	; 0xf81a <nvm_eeprom_erase_and_write_buffer+0x1a>
    f86e:	df 91       	pop	r29
    f870:	cf 91       	pop	r28
    f872:	1f 91       	pop	r17
    f874:	0f 91       	pop	r16
    f876:	ff 90       	pop	r15
    f878:	ef 90       	pop	r14
    f87a:	df 90       	pop	r13
    f87c:	cf 90       	pop	r12
    f87e:	08 95       	ret

0000f880 <nvm_flash_read_buffer>:
    f880:	da 01       	movw	r26, r20
    f882:	a9 01       	movw	r20, r18
    f884:	e0 ec       	ldi	r30, 0xC0	; 192
    f886:	f1 e0       	ldi	r31, 0x01	; 1
    f888:	37 85       	ldd	r19, Z+15	; 0x0f
    f88a:	33 23       	and	r19, r19
    f88c:	ec f3       	brlt	.-6      	; 0xf888 <nvm_flash_read_buffer+0x8>
    f88e:	41 15       	cp	r20, r1
    f890:	51 05       	cpc	r21, r1
    f892:	69 f0       	breq	.+26     	; 0xf8ae <nvm_flash_read_buffer+0x2e>
    f894:	4a 0f       	add	r20, r26
    f896:	5b 1f       	adc	r21, r27
    f898:	8b bf       	out	0x3b, r24	; 59
    f89a:	fb 01       	movw	r30, r22
    f89c:	37 91       	elpm	r19, Z+
    f89e:	3d 93       	st	X+, r19
    f8a0:	6f 5f       	subi	r22, 0xFF	; 255
    f8a2:	7f 4f       	sbci	r23, 0xFF	; 255
    f8a4:	8f 4f       	sbci	r24, 0xFF	; 255
    f8a6:	9f 4f       	sbci	r25, 0xFF	; 255
    f8a8:	a4 17       	cp	r26, r20
    f8aa:	b5 07       	cpc	r27, r21
    f8ac:	a9 f7       	brne	.-22     	; 0xf898 <nvm_flash_read_buffer+0x18>
    f8ae:	08 95       	ret

0000f8b0 <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    f8b0:	ef 92       	push	r14
    f8b2:	ff 92       	push	r15
    f8b4:	0f 93       	push	r16
    f8b6:	1f 93       	push	r17
    f8b8:	cf 93       	push	r28
    f8ba:	df 93       	push	r29
    f8bc:	7a 01       	movw	r14, r20
    f8be:	89 01       	movw	r16, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    f8c0:	eb 01       	movw	r28, r22
    f8c2:	d1 70       	andi	r29, 0x01	; 1
	while ( len ) {
    f8c4:	23 2b       	or	r18, r19
    f8c6:	51 f0       	breq	.+20     	; 0xf8dc <nvm_user_sig_read_buffer+0x2c>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    f8c8:	be 01       	movw	r22, r28
    f8ca:	81 e0       	ldi	r24, 0x01	; 1
    f8cc:	7a d1       	rcall	.+756    	; 0xfbc2 <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    f8ce:	f7 01       	movw	r30, r14
    f8d0:	81 93       	st	Z+, r24
    f8d2:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    f8d4:	21 96       	adiw	r28, 0x01	; 1
		len--;
    f8d6:	01 50       	subi	r16, 0x01	; 1
    f8d8:	11 09       	sbc	r17, r1
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
    f8da:	b1 f7       	brne	.-20     	; 0xf8c8 <nvm_user_sig_read_buffer+0x18>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    f8dc:	df 91       	pop	r29
    f8de:	cf 91       	pop	r28
    f8e0:	1f 91       	pop	r17
    f8e2:	0f 91       	pop	r16
    f8e4:	ff 90       	pop	r15
    f8e6:	ef 90       	pop	r14
    f8e8:	08 95       	ret

0000f8ea <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    f8ea:	2f 92       	push	r2
    f8ec:	3f 92       	push	r3
    f8ee:	4f 92       	push	r4
    f8f0:	5f 92       	push	r5
    f8f2:	6f 92       	push	r6
    f8f4:	7f 92       	push	r7
    f8f6:	8f 92       	push	r8
    f8f8:	9f 92       	push	r9
    f8fa:	af 92       	push	r10
    f8fc:	bf 92       	push	r11
    f8fe:	cf 92       	push	r12
    f900:	df 92       	push	r13
    f902:	ef 92       	push	r14
    f904:	ff 92       	push	r15
    f906:	0f 93       	push	r16
    f908:	1f 93       	push	r17
    f90a:	cf 93       	push	r28
    f90c:	df 93       	push	r29
    f90e:	00 d0       	rcall	.+0      	; 0xf910 <nvm_user_sig_write_buffer+0x26>
    f910:	1f 92       	push	r1
    f912:	cd b7       	in	r28, 0x3d	; 61
    f914:	de b7       	in	r29, 0x3e	; 62
    f916:	4b 83       	std	Y+3, r20	; 0x03
    f918:	5c 83       	std	Y+4, r21	; 0x04
    f91a:	79 01       	movw	r14, r18
    f91c:	30 2e       	mov	r3, r16
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    f91e:	6b 01       	movw	r12, r22
	bool b_flag_erase = false;

	while ( len ) {
    f920:	23 2b       	or	r18, r19
    f922:	09 f0       	breq	.+2      	; 0xf926 <nvm_user_sig_write_buffer+0x3c>
    f924:	4f c0       	rjmp	.+158    	; 0xf9c4 <nvm_user_sig_write_buffer+0xda>
    f926:	65 c0       	rjmp	.+202    	; 0xf9f2 <nvm_user_sig_write_buffer+0x108>
    f928:	52 01       	movw	r10, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    f92a:	33 20       	and	r3, r3
    f92c:	79 f0       	breq	.+30     	; 0xf94c <nvm_user_sig_write_buffer+0x62>
    f92e:	b2 01       	movw	r22, r4
    f930:	81 e0       	ldi	r24, 0x01	; 1
    f932:	47 d1       	rcall	.+654    	; 0xfbc2 <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    f934:	89 83       	std	Y+1, r24	; 0x01
    f936:	b8 01       	movw	r22, r16
    f938:	81 e0       	ldi	r24, 0x01	; 1
    f93a:	43 d1       	rcall	.+646    	; 0xfbc2 <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    f93c:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    f93e:	89 81       	ldd	r24, Y+1	; 0x01
    f940:	9a 81       	ldd	r25, Y+2	; 0x02
    f942:	01 96       	adiw	r24, 0x01	; 1
    f944:	29 f0       	breq	.+10     	; 0xf950 <nvm_user_sig_write_buffer+0x66>
					b_flag_erase = true; // The page is not empty
    f946:	22 24       	eor	r2, r2
    f948:	23 94       	inc	r2
    f94a:	02 c0       	rjmp	.+4      	; 0xf950 <nvm_user_sig_write_buffer+0x66>
				}
			}else{
				w_value = 0xFFFF;
    f94c:	89 82       	std	Y+1, r8	; 0x01
    f94e:	9a 82       	std	Y+2, r9	; 0x02
			}
			// Update flash buffer
			if (len) {
    f950:	e1 14       	cp	r14, r1
    f952:	f1 04       	cpc	r15, r1
    f954:	09 f1       	breq	.+66     	; 0xf998 <nvm_user_sig_write_buffer+0xae>
				if (opt_address == page_pos) {
    f956:	ac 14       	cp	r10, r12
    f958:	bd 04       	cpc	r11, r13
    f95a:	79 f4       	brne	.+30     	; 0xf97a <nvm_user_sig_write_buffer+0x90>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    f95c:	81 e0       	ldi	r24, 0x01	; 1
    f95e:	e8 1a       	sub	r14, r24
    f960:	f1 08       	sbc	r15, r1
					opt_address++;
    f962:	ef ef       	ldi	r30, 0xFF	; 255
    f964:	ce 1a       	sub	r12, r30
    f966:	de 0a       	sbc	r13, r30
					LSB(w_value)=*(uint8_t*)buf;
    f968:	eb 81       	ldd	r30, Y+3	; 0x03
    f96a:	fc 81       	ldd	r31, Y+4	; 0x04
    f96c:	81 91       	ld	r24, Z+
    f96e:	eb 83       	std	Y+3, r30	; 0x03
    f970:	fc 83       	std	Y+4, r31	; 0x04
    f972:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    f974:	e1 14       	cp	r14, r1
    f976:	f1 04       	cpc	r15, r1
    f978:	79 f0       	breq	.+30     	; 0xf998 <nvm_user_sig_write_buffer+0xae>
				if (opt_address == (page_pos+1)) {
    f97a:	c0 16       	cp	r12, r16
    f97c:	d1 06       	cpc	r13, r17
    f97e:	61 f4       	brne	.+24     	; 0xf998 <nvm_user_sig_write_buffer+0xae>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    f980:	f1 e0       	ldi	r31, 0x01	; 1
    f982:	ef 1a       	sub	r14, r31
    f984:	f1 08       	sbc	r15, r1
					opt_address++;
    f986:	2f ef       	ldi	r18, 0xFF	; 255
    f988:	c2 1a       	sub	r12, r18
    f98a:	d2 0a       	sbc	r13, r18
					MSB(w_value)=*(uint8_t*)buf;
    f98c:	eb 81       	ldd	r30, Y+3	; 0x03
    f98e:	fc 81       	ldd	r31, Y+4	; 0x04
    f990:	81 91       	ld	r24, Z+
    f992:	eb 83       	std	Y+3, r30	; 0x03
    f994:	fc 83       	std	Y+4, r31	; 0x04
    f996:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
    f998:	49 81       	ldd	r20, Y+1	; 0x01
    f99a:	5a 81       	ldd	r21, Y+2	; 0x02
    f99c:	c3 01       	movw	r24, r6
    f99e:	b2 01       	movw	r22, r4
    f9a0:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <nvm_flash_load_word_to_buffer>
    f9a4:	f2 e0       	ldi	r31, 0x02	; 2
    f9a6:	4f 0e       	add	r4, r31
    f9a8:	51 1c       	adc	r5, r1
    f9aa:	61 1c       	adc	r6, r1
    f9ac:	71 1c       	adc	r7, r1
    f9ae:	0e 5f       	subi	r16, 0xFE	; 254
    f9b0:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    f9b2:	01 30       	cpi	r16, 0x01	; 1
    f9b4:	22 e0       	ldi	r18, 0x02	; 2
    f9b6:	12 07       	cpc	r17, r18
    f9b8:	09 f0       	breq	.+2      	; 0xf9bc <nvm_user_sig_write_buffer+0xd2>
    f9ba:	b6 cf       	rjmp	.-148    	; 0xf928 <nvm_user_sig_write_buffer+0x3e>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
    f9bc:	e1 14       	cp	r14, r1
    f9be:	f1 04       	cpc	r15, r1
    f9c0:	29 f4       	brne	.+10     	; 0xf9cc <nvm_user_sig_write_buffer+0xe2>
    f9c2:	0a c0       	rjmp	.+20     	; 0xf9d8 <nvm_user_sig_write_buffer+0xee>
    f9c4:	21 2c       	mov	r2, r1
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    f9c6:	88 24       	eor	r8, r8
    f9c8:	8a 94       	dec	r8
    f9ca:	98 2c       	mov	r9, r8
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    f9cc:	01 e0       	ldi	r16, 0x01	; 1
    f9ce:	10 e0       	ldi	r17, 0x00	; 0
    f9d0:	41 2c       	mov	r4, r1
    f9d2:	51 2c       	mov	r5, r1
    f9d4:	32 01       	movw	r6, r4
    f9d6:	a8 cf       	rjmp	.-176    	; 0xf928 <nvm_user_sig_write_buffer+0x3e>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
    f9d8:	22 20       	and	r2, r2
    f9da:	59 f0       	breq	.+22     	; 0xf9f2 <nvm_user_sig_write_buffer+0x108>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    f9dc:	e0 ec       	ldi	r30, 0xC0	; 192
    f9de:	f1 e0       	ldi	r31, 0x01	; 1
    f9e0:	87 85       	ldd	r24, Z+15	; 0x0f
    f9e2:	88 23       	and	r24, r24
    f9e4:	ec f3       	brlt	.-6      	; 0xf9e0 <nvm_user_sig_write_buffer+0xf6>
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
    f9e6:	48 e1       	ldi	r20, 0x18	; 24
    f9e8:	60 e0       	ldi	r22, 0x00	; 0
    f9ea:	70 e0       	ldi	r23, 0x00	; 0
    f9ec:	cb 01       	movw	r24, r22
    f9ee:	0e 94 11 8d 	call	0x11a22	; 0x11a22 <_etext>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    f9f2:	e0 ec       	ldi	r30, 0xC0	; 192
    f9f4:	f1 e0       	ldi	r31, 0x01	; 1
    f9f6:	87 85       	ldd	r24, Z+15	; 0x0f
    f9f8:	88 23       	and	r24, r24
    f9fa:	ec f3       	brlt	.-6      	; 0xf9f6 <nvm_user_sig_write_buffer+0x10c>
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
    f9fc:	4a e1       	ldi	r20, 0x1A	; 26
    f9fe:	60 e0       	ldi	r22, 0x00	; 0
    fa00:	70 e0       	ldi	r23, 0x00	; 0
    fa02:	cb 01       	movw	r24, r22
    fa04:	0e 94 11 8d 	call	0x11a22	; 0x11a22 <_etext>
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    fa08:	24 96       	adiw	r28, 0x04	; 4
    fa0a:	cd bf       	out	0x3d, r28	; 61
    fa0c:	de bf       	out	0x3e, r29	; 62
    fa0e:	df 91       	pop	r29
    fa10:	cf 91       	pop	r28
    fa12:	1f 91       	pop	r17
    fa14:	0f 91       	pop	r16
    fa16:	ff 90       	pop	r15
    fa18:	ef 90       	pop	r14
    fa1a:	df 90       	pop	r13
    fa1c:	cf 90       	pop	r12
    fa1e:	bf 90       	pop	r11
    fa20:	af 90       	pop	r10
    fa22:	9f 90       	pop	r9
    fa24:	8f 90       	pop	r8
    fa26:	7f 90       	pop	r7
    fa28:	6f 90       	pop	r6
    fa2a:	5f 90       	pop	r5
    fa2c:	4f 90       	pop	r4
    fa2e:	3f 90       	pop	r3
    fa30:	2f 90       	pop	r2
    fa32:	08 95       	ret

0000fa34 <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    fa34:	2f 92       	push	r2
    fa36:	3f 92       	push	r3
    fa38:	4f 92       	push	r4
    fa3a:	5f 92       	push	r5
    fa3c:	6f 92       	push	r6
    fa3e:	7f 92       	push	r7
    fa40:	8f 92       	push	r8
    fa42:	9f 92       	push	r9
    fa44:	af 92       	push	r10
    fa46:	bf 92       	push	r11
    fa48:	cf 92       	push	r12
    fa4a:	df 92       	push	r13
    fa4c:	ef 92       	push	r14
    fa4e:	ff 92       	push	r15
    fa50:	0f 93       	push	r16
    fa52:	1f 93       	push	r17
    fa54:	cf 93       	push	r28
    fa56:	df 93       	push	r29
    fa58:	cd b7       	in	r28, 0x3d	; 61
    fa5a:	de b7       	in	r29, 0x3e	; 62
    fa5c:	2a 97       	sbiw	r28, 0x0a	; 10
    fa5e:	cd bf       	out	0x3d, r28	; 61
    fa60:	de bf       	out	0x3e, r29	; 62
    fa62:	2b 01       	movw	r4, r22
    fa64:	3c 01       	movw	r6, r24
    fa66:	1a 01       	movw	r2, r20
    fa68:	59 01       	movw	r10, r18
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    fa6a:	dc 01       	movw	r26, r24
    fa6c:	cb 01       	movw	r24, r22
    fa6e:	88 27       	eor	r24, r24
    fa70:	9e 7f       	andi	r25, 0xFE	; 254
    fa72:	8f 83       	std	Y+7, r24	; 0x07
    fa74:	98 87       	std	Y+8, r25	; 0x08
    fa76:	a9 87       	std	Y+9, r26	; 0x09
    fa78:	ba 87       	std	Y+10, r27	; 0x0a

	// For each page
	while ( len ) {
    fa7a:	23 2b       	or	r18, r19
    fa7c:	09 f4       	brne	.+2      	; 0xfa80 <nvm_flash_erase_and_write_buffer+0x4c>
    fa7e:	8b c0       	rjmp	.+278    	; 0xfb96 <nvm_flash_erase_and_write_buffer+0x162>
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    fa80:	88 24       	eor	r8, r8
    fa82:	8a 94       	dec	r8
    fa84:	98 2c       	mov	r9, r8
    fa86:	04 c0       	rjmp	.+8      	; 0xfa90 <nvm_flash_erase_and_write_buffer+0x5c>
    fa88:	cf 82       	std	Y+7, r12	; 0x07
    fa8a:	d8 86       	std	Y+8, r13	; 0x08
    fa8c:	e9 86       	std	Y+9, r14	; 0x09
    fa8e:	fa 86       	std	Y+10, r15	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    fa90:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    fa94:	88 23       	and	r24, r24
    fa96:	e4 f3       	brlt	.-8      	; 0xfa90 <nvm_flash_erase_and_write_buffer+0x5c>
    fa98:	8f 81       	ldd	r24, Y+7	; 0x07
    fa9a:	98 85       	ldd	r25, Y+8	; 0x08
    fa9c:	a9 85       	ldd	r26, Y+9	; 0x09
    fa9e:	ba 85       	ldd	r27, Y+10	; 0x0a
    faa0:	9e 5f       	subi	r25, 0xFE	; 254
    faa2:	af 4f       	sbci	r26, 0xFF	; 255
    faa4:	bf 4f       	sbci	r27, 0xFF	; 255
    faa6:	8b 83       	std	Y+3, r24	; 0x03
    faa8:	9c 83       	std	Y+4, r25	; 0x04
    faaa:	ad 83       	std	Y+5, r26	; 0x05
    faac:	be 83       	std	Y+6, r27	; 0x06
    faae:	cf 80       	ldd	r12, Y+7	; 0x07
    fab0:	d8 84       	ldd	r13, Y+8	; 0x08
    fab2:	e9 84       	ldd	r14, Y+9	; 0x09
    fab4:	fa 84       	ldd	r15, Y+10	; 0x0a
    fab6:	10 e0       	ldi	r17, 0x00	; 0
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    fab8:	00 23       	and	r16, r16
    faba:	51 f0       	breq	.+20     	; 0xfad0 <nvm_flash_erase_and_write_buffer+0x9c>
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_word_far(addr);
    fabc:	eb be       	out	0x3b, r14	; 59
    fabe:	f6 01       	movw	r30, r12
    fac0:	87 91       	elpm	r24, Z+
    fac2:	96 91       	elpm	r25, Z
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    fac4:	89 83       	std	Y+1, r24	; 0x01
    fac6:	9a 83       	std	Y+2, r25	; 0x02
				if (w_value!=0xFFFF) {
    fac8:	01 96       	adiw	r24, 0x01	; 1
    faca:	21 f0       	breq	.+8      	; 0xfad4 <nvm_flash_erase_and_write_buffer+0xa0>
					b_flag_erase = true; // The page is not empty
    facc:	11 e0       	ldi	r17, 0x01	; 1
    face:	02 c0       	rjmp	.+4      	; 0xfad4 <nvm_flash_erase_and_write_buffer+0xa0>
				}
			}else{
				w_value = 0xFFFF;
    fad0:	89 82       	std	Y+1, r8	; 0x01
    fad2:	9a 82       	std	Y+2, r9	; 0x02
			}

			// Update flash buffer
			if (len) {
    fad4:	a1 14       	cp	r10, r1
    fad6:	b1 04       	cpc	r11, r1
    fad8:	61 f1       	breq	.+88     	; 0xfb32 <nvm_flash_erase_and_write_buffer+0xfe>
				if (opt_address == page_address) {
    fada:	c4 14       	cp	r12, r4
    fadc:	d5 04       	cpc	r13, r5
    fade:	e6 04       	cpc	r14, r6
    fae0:	f7 04       	cpc	r15, r7
    fae2:	79 f4       	brne	.+30     	; 0xfb02 <nvm_flash_erase_and_write_buffer+0xce>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    fae4:	b1 e0       	ldi	r27, 0x01	; 1
    fae6:	ab 1a       	sub	r10, r27
    fae8:	b1 08       	sbc	r11, r1
					opt_address++;
    faea:	ef ef       	ldi	r30, 0xFF	; 255
    faec:	4e 1a       	sub	r4, r30
    faee:	5e 0a       	sbc	r5, r30
    faf0:	6e 0a       	sbc	r6, r30
    faf2:	7e 0a       	sbc	r7, r30
					LSB(w_value)=*(uint8_t*)buf;
    faf4:	d1 01       	movw	r26, r2
    faf6:	8d 91       	ld	r24, X+
    faf8:	1d 01       	movw	r2, r26
    fafa:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    fafc:	a1 14       	cp	r10, r1
    fafe:	b1 04       	cpc	r11, r1
    fb00:	c1 f0       	breq	.+48     	; 0xfb32 <nvm_flash_erase_and_write_buffer+0xfe>
				if (opt_address == (page_address+1)) {
    fb02:	d7 01       	movw	r26, r14
    fb04:	c6 01       	movw	r24, r12
    fb06:	01 96       	adiw	r24, 0x01	; 1
    fb08:	a1 1d       	adc	r26, r1
    fb0a:	b1 1d       	adc	r27, r1
    fb0c:	84 15       	cp	r24, r4
    fb0e:	95 05       	cpc	r25, r5
    fb10:	a6 05       	cpc	r26, r6
    fb12:	b7 05       	cpc	r27, r7
    fb14:	71 f4       	brne	.+28     	; 0xfb32 <nvm_flash_erase_and_write_buffer+0xfe>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    fb16:	b1 e0       	ldi	r27, 0x01	; 1
    fb18:	ab 1a       	sub	r10, r27
    fb1a:	b1 08       	sbc	r11, r1
					opt_address++;
    fb1c:	26 01       	movw	r4, r12
    fb1e:	37 01       	movw	r6, r14
    fb20:	e2 e0       	ldi	r30, 0x02	; 2
    fb22:	4e 0e       	add	r4, r30
    fb24:	51 1c       	adc	r5, r1
    fb26:	61 1c       	adc	r6, r1
    fb28:	71 1c       	adc	r7, r1
					MSB(w_value)=*(uint8_t*)buf;
    fb2a:	d1 01       	movw	r26, r2
    fb2c:	8d 91       	ld	r24, X+
    fb2e:	1d 01       	movw	r2, r26
    fb30:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    fb32:	49 81       	ldd	r20, Y+1	; 0x01
    fb34:	5a 81       	ldd	r21, Y+2	; 0x02
    fb36:	c7 01       	movw	r24, r14
    fb38:	b6 01       	movw	r22, r12
    fb3a:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <nvm_flash_load_word_to_buffer>
			page_address+=2;
    fb3e:	b2 e0       	ldi	r27, 0x02	; 2
    fb40:	cb 0e       	add	r12, r27
    fb42:	d1 1c       	adc	r13, r1
    fb44:	e1 1c       	adc	r14, r1
    fb46:	f1 1c       	adc	r15, r1
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    fb48:	8b 81       	ldd	r24, Y+3	; 0x03
    fb4a:	9c 81       	ldd	r25, Y+4	; 0x04
    fb4c:	ad 81       	ldd	r26, Y+5	; 0x05
    fb4e:	be 81       	ldd	r27, Y+6	; 0x06
    fb50:	c8 16       	cp	r12, r24
    fb52:	d9 06       	cpc	r13, r25
    fb54:	ea 06       	cpc	r14, r26
    fb56:	fb 06       	cpc	r15, r27
    fb58:	09 f0       	breq	.+2      	; 0xfb5c <nvm_flash_erase_and_write_buffer+0x128>
    fb5a:	ae cf       	rjmp	.-164    	; 0xfab8 <nvm_flash_erase_and_write_buffer+0x84>
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    fb5c:	11 23       	and	r17, r17
    fb5e:	61 f0       	breq	.+24     	; 0xfb78 <nvm_flash_erase_and_write_buffer+0x144>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
    fb60:	6f 81       	ldd	r22, Y+7	; 0x07
    fb62:	78 85       	ldd	r23, Y+8	; 0x08
    fb64:	89 85       	ldd	r24, Y+9	; 0x09
    fb66:	9a 85       	ldd	r25, Y+10	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    fb68:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    fb6c:	22 23       	and	r18, r18
    fb6e:	e4 f3       	brlt	.-8      	; 0xfb68 <nvm_flash_erase_and_write_buffer+0x134>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    fb70:	45 e2       	ldi	r20, 0x25	; 37
    fb72:	0e 94 11 8d 	call	0x11a22	; 0x11a22 <_etext>
    fb76:	0b c0       	rjmp	.+22     	; 0xfb8e <nvm_flash_erase_and_write_buffer+0x15a>
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
    fb78:	6f 81       	ldd	r22, Y+7	; 0x07
    fb7a:	78 85       	ldd	r23, Y+8	; 0x08
    fb7c:	89 85       	ldd	r24, Y+9	; 0x09
    fb7e:	9a 85       	ldd	r25, Y+10	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    fb80:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    fb84:	22 23       	and	r18, r18
    fb86:	e4 f3       	brlt	.-8      	; 0xfb80 <nvm_flash_erase_and_write_buffer+0x14c>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    fb88:	44 e2       	ldi	r20, 0x24	; 36
    fb8a:	0e 94 11 8d 	call	0x11a22	; 0x11a22 <_etext>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    fb8e:	a1 14       	cp	r10, r1
    fb90:	b1 04       	cpc	r11, r1
    fb92:	09 f0       	breq	.+2      	; 0xfb96 <nvm_flash_erase_and_write_buffer+0x162>
    fb94:	79 cf       	rjmp	.-270    	; 0xfa88 <nvm_flash_erase_and_write_buffer+0x54>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
    fb96:	2a 96       	adiw	r28, 0x0a	; 10
    fb98:	cd bf       	out	0x3d, r28	; 61
    fb9a:	de bf       	out	0x3e, r29	; 62
    fb9c:	df 91       	pop	r29
    fb9e:	cf 91       	pop	r28
    fba0:	1f 91       	pop	r17
    fba2:	0f 91       	pop	r16
    fba4:	ff 90       	pop	r15
    fba6:	ef 90       	pop	r14
    fba8:	df 90       	pop	r13
    fbaa:	cf 90       	pop	r12
    fbac:	bf 90       	pop	r11
    fbae:	af 90       	pop	r10
    fbb0:	9f 90       	pop	r9
    fbb2:	8f 90       	pop	r8
    fbb4:	7f 90       	pop	r7
    fbb6:	6f 90       	pop	r6
    fbb8:	5f 90       	pop	r5
    fbba:	4f 90       	pop	r4
    fbbc:	3f 90       	pop	r3
    fbbe:	2f 90       	pop	r2
    fbc0:	08 95       	ret

0000fbc2 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    fbc2:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    fbc6:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    fbc8:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    fbca:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    fbce:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    fbd0:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    fbd4:	08 95       	ret

0000fbd6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    fbd6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    fbd8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    fbda:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    fbdc:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    fbde:	60 83       	st	Z, r22
	ret                             // Return to caller
    fbe0:	08 95       	ret

0000fbe2 <vfprintf>:
    fbe2:	2f 92       	push	r2
    fbe4:	3f 92       	push	r3
    fbe6:	4f 92       	push	r4
    fbe8:	5f 92       	push	r5
    fbea:	6f 92       	push	r6
    fbec:	7f 92       	push	r7
    fbee:	8f 92       	push	r8
    fbf0:	9f 92       	push	r9
    fbf2:	af 92       	push	r10
    fbf4:	bf 92       	push	r11
    fbf6:	cf 92       	push	r12
    fbf8:	df 92       	push	r13
    fbfa:	ef 92       	push	r14
    fbfc:	ff 92       	push	r15
    fbfe:	0f 93       	push	r16
    fc00:	1f 93       	push	r17
    fc02:	cf 93       	push	r28
    fc04:	df 93       	push	r29
    fc06:	cd b7       	in	r28, 0x3d	; 61
    fc08:	de b7       	in	r29, 0x3e	; 62
    fc0a:	60 97       	sbiw	r28, 0x10	; 16
    fc0c:	cd bf       	out	0x3d, r28	; 61
    fc0e:	de bf       	out	0x3e, r29	; 62
    fc10:	7c 01       	movw	r14, r24
    fc12:	1b 01       	movw	r2, r22
    fc14:	6a 01       	movw	r12, r20
    fc16:	fc 01       	movw	r30, r24
    fc18:	16 82       	std	Z+6, r1	; 0x06
    fc1a:	17 82       	std	Z+7, r1	; 0x07
    fc1c:	83 81       	ldd	r24, Z+3	; 0x03
    fc1e:	81 ff       	sbrs	r24, 1
    fc20:	44 c3       	rjmp	.+1672   	; 0x102aa <__EEPROM_REGION_LENGTH__+0x2aa>
    fc22:	9e 01       	movw	r18, r28
    fc24:	2f 5f       	subi	r18, 0xFF	; 255
    fc26:	3f 4f       	sbci	r19, 0xFF	; 255
    fc28:	39 01       	movw	r6, r18
    fc2a:	f7 01       	movw	r30, r14
    fc2c:	93 81       	ldd	r25, Z+3	; 0x03
    fc2e:	f1 01       	movw	r30, r2
    fc30:	93 fd       	sbrc	r25, 3
    fc32:	85 91       	lpm	r24, Z+
    fc34:	93 ff       	sbrs	r25, 3
    fc36:	81 91       	ld	r24, Z+
    fc38:	1f 01       	movw	r2, r30
    fc3a:	88 23       	and	r24, r24
    fc3c:	09 f4       	brne	.+2      	; 0xfc40 <vfprintf+0x5e>
    fc3e:	31 c3       	rjmp	.+1634   	; 0x102a2 <__EEPROM_REGION_LENGTH__+0x2a2>
    fc40:	85 32       	cpi	r24, 0x25	; 37
    fc42:	39 f4       	brne	.+14     	; 0xfc52 <vfprintf+0x70>
    fc44:	93 fd       	sbrc	r25, 3
    fc46:	85 91       	lpm	r24, Z+
    fc48:	93 ff       	sbrs	r25, 3
    fc4a:	81 91       	ld	r24, Z+
    fc4c:	1f 01       	movw	r2, r30
    fc4e:	85 32       	cpi	r24, 0x25	; 37
    fc50:	39 f4       	brne	.+14     	; 0xfc60 <vfprintf+0x7e>
    fc52:	b7 01       	movw	r22, r14
    fc54:	90 e0       	ldi	r25, 0x00	; 0
    fc56:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    fc5a:	56 01       	movw	r10, r12
    fc5c:	65 01       	movw	r12, r10
    fc5e:	e5 cf       	rjmp	.-54     	; 0xfc2a <vfprintf+0x48>
    fc60:	10 e0       	ldi	r17, 0x00	; 0
    fc62:	51 2c       	mov	r5, r1
    fc64:	91 2c       	mov	r9, r1
    fc66:	ff e1       	ldi	r31, 0x1F	; 31
    fc68:	f9 15       	cp	r31, r9
    fc6a:	d8 f0       	brcs	.+54     	; 0xfca2 <vfprintf+0xc0>
    fc6c:	8b 32       	cpi	r24, 0x2B	; 43
    fc6e:	79 f0       	breq	.+30     	; 0xfc8e <vfprintf+0xac>
    fc70:	38 f4       	brcc	.+14     	; 0xfc80 <vfprintf+0x9e>
    fc72:	80 32       	cpi	r24, 0x20	; 32
    fc74:	79 f0       	breq	.+30     	; 0xfc94 <vfprintf+0xb2>
    fc76:	83 32       	cpi	r24, 0x23	; 35
    fc78:	a1 f4       	brne	.+40     	; 0xfca2 <vfprintf+0xc0>
    fc7a:	f9 2d       	mov	r31, r9
    fc7c:	f0 61       	ori	r31, 0x10	; 16
    fc7e:	2e c0       	rjmp	.+92     	; 0xfcdc <vfprintf+0xfa>
    fc80:	8d 32       	cpi	r24, 0x2D	; 45
    fc82:	61 f0       	breq	.+24     	; 0xfc9c <vfprintf+0xba>
    fc84:	80 33       	cpi	r24, 0x30	; 48
    fc86:	69 f4       	brne	.+26     	; 0xfca2 <vfprintf+0xc0>
    fc88:	29 2d       	mov	r18, r9
    fc8a:	21 60       	ori	r18, 0x01	; 1
    fc8c:	2d c0       	rjmp	.+90     	; 0xfce8 <vfprintf+0x106>
    fc8e:	39 2d       	mov	r19, r9
    fc90:	32 60       	ori	r19, 0x02	; 2
    fc92:	93 2e       	mov	r9, r19
    fc94:	89 2d       	mov	r24, r9
    fc96:	84 60       	ori	r24, 0x04	; 4
    fc98:	98 2e       	mov	r9, r24
    fc9a:	2a c0       	rjmp	.+84     	; 0xfcf0 <vfprintf+0x10e>
    fc9c:	e9 2d       	mov	r30, r9
    fc9e:	e8 60       	ori	r30, 0x08	; 8
    fca0:	15 c0       	rjmp	.+42     	; 0xfccc <vfprintf+0xea>
    fca2:	97 fc       	sbrc	r9, 7
    fca4:	2d c0       	rjmp	.+90     	; 0xfd00 <vfprintf+0x11e>
    fca6:	20 ed       	ldi	r18, 0xD0	; 208
    fca8:	28 0f       	add	r18, r24
    fcaa:	2a 30       	cpi	r18, 0x0A	; 10
    fcac:	88 f4       	brcc	.+34     	; 0xfcd0 <vfprintf+0xee>
    fcae:	96 fe       	sbrs	r9, 6
    fcb0:	06 c0       	rjmp	.+12     	; 0xfcbe <vfprintf+0xdc>
    fcb2:	3a e0       	ldi	r19, 0x0A	; 10
    fcb4:	13 9f       	mul	r17, r19
    fcb6:	20 0d       	add	r18, r0
    fcb8:	11 24       	eor	r1, r1
    fcba:	12 2f       	mov	r17, r18
    fcbc:	19 c0       	rjmp	.+50     	; 0xfcf0 <vfprintf+0x10e>
    fcbe:	8a e0       	ldi	r24, 0x0A	; 10
    fcc0:	58 9e       	mul	r5, r24
    fcc2:	20 0d       	add	r18, r0
    fcc4:	11 24       	eor	r1, r1
    fcc6:	52 2e       	mov	r5, r18
    fcc8:	e9 2d       	mov	r30, r9
    fcca:	e0 62       	ori	r30, 0x20	; 32
    fccc:	9e 2e       	mov	r9, r30
    fcce:	10 c0       	rjmp	.+32     	; 0xfcf0 <vfprintf+0x10e>
    fcd0:	8e 32       	cpi	r24, 0x2E	; 46
    fcd2:	31 f4       	brne	.+12     	; 0xfce0 <vfprintf+0xfe>
    fcd4:	96 fc       	sbrc	r9, 6
    fcd6:	e5 c2       	rjmp	.+1482   	; 0x102a2 <__EEPROM_REGION_LENGTH__+0x2a2>
    fcd8:	f9 2d       	mov	r31, r9
    fcda:	f0 64       	ori	r31, 0x40	; 64
    fcdc:	9f 2e       	mov	r9, r31
    fcde:	08 c0       	rjmp	.+16     	; 0xfcf0 <vfprintf+0x10e>
    fce0:	8c 36       	cpi	r24, 0x6C	; 108
    fce2:	21 f4       	brne	.+8      	; 0xfcec <vfprintf+0x10a>
    fce4:	29 2d       	mov	r18, r9
    fce6:	20 68       	ori	r18, 0x80	; 128
    fce8:	92 2e       	mov	r9, r18
    fcea:	02 c0       	rjmp	.+4      	; 0xfcf0 <vfprintf+0x10e>
    fcec:	88 36       	cpi	r24, 0x68	; 104
    fcee:	41 f4       	brne	.+16     	; 0xfd00 <vfprintf+0x11e>
    fcf0:	f1 01       	movw	r30, r2
    fcf2:	93 fd       	sbrc	r25, 3
    fcf4:	85 91       	lpm	r24, Z+
    fcf6:	93 ff       	sbrs	r25, 3
    fcf8:	81 91       	ld	r24, Z+
    fcfa:	1f 01       	movw	r2, r30
    fcfc:	81 11       	cpse	r24, r1
    fcfe:	b3 cf       	rjmp	.-154    	; 0xfc66 <vfprintf+0x84>
    fd00:	9b eb       	ldi	r25, 0xBB	; 187
    fd02:	98 0f       	add	r25, r24
    fd04:	93 30       	cpi	r25, 0x03	; 3
    fd06:	20 f4       	brcc	.+8      	; 0xfd10 <vfprintf+0x12e>
    fd08:	99 2d       	mov	r25, r9
    fd0a:	90 61       	ori	r25, 0x10	; 16
    fd0c:	80 5e       	subi	r24, 0xE0	; 224
    fd0e:	07 c0       	rjmp	.+14     	; 0xfd1e <vfprintf+0x13c>
    fd10:	9b e9       	ldi	r25, 0x9B	; 155
    fd12:	98 0f       	add	r25, r24
    fd14:	93 30       	cpi	r25, 0x03	; 3
    fd16:	08 f0       	brcs	.+2      	; 0xfd1a <vfprintf+0x138>
    fd18:	66 c1       	rjmp	.+716    	; 0xffe6 <__DATA_REGION_LENGTH__+0x46>
    fd1a:	99 2d       	mov	r25, r9
    fd1c:	9f 7e       	andi	r25, 0xEF	; 239
    fd1e:	96 ff       	sbrs	r25, 6
    fd20:	16 e0       	ldi	r17, 0x06	; 6
    fd22:	9f 73       	andi	r25, 0x3F	; 63
    fd24:	99 2e       	mov	r9, r25
    fd26:	85 36       	cpi	r24, 0x65	; 101
    fd28:	19 f4       	brne	.+6      	; 0xfd30 <vfprintf+0x14e>
    fd2a:	90 64       	ori	r25, 0x40	; 64
    fd2c:	99 2e       	mov	r9, r25
    fd2e:	08 c0       	rjmp	.+16     	; 0xfd40 <vfprintf+0x15e>
    fd30:	86 36       	cpi	r24, 0x66	; 102
    fd32:	21 f4       	brne	.+8      	; 0xfd3c <vfprintf+0x15a>
    fd34:	39 2f       	mov	r19, r25
    fd36:	30 68       	ori	r19, 0x80	; 128
    fd38:	93 2e       	mov	r9, r19
    fd3a:	02 c0       	rjmp	.+4      	; 0xfd40 <vfprintf+0x15e>
    fd3c:	11 11       	cpse	r17, r1
    fd3e:	11 50       	subi	r17, 0x01	; 1
    fd40:	97 fe       	sbrs	r9, 7
    fd42:	07 c0       	rjmp	.+14     	; 0xfd52 <vfprintf+0x170>
    fd44:	1c 33       	cpi	r17, 0x3C	; 60
    fd46:	50 f4       	brcc	.+20     	; 0xfd5c <vfprintf+0x17a>
    fd48:	44 24       	eor	r4, r4
    fd4a:	43 94       	inc	r4
    fd4c:	41 0e       	add	r4, r17
    fd4e:	27 e0       	ldi	r18, 0x07	; 7
    fd50:	0b c0       	rjmp	.+22     	; 0xfd68 <vfprintf+0x186>
    fd52:	18 30       	cpi	r17, 0x08	; 8
    fd54:	38 f0       	brcs	.+14     	; 0xfd64 <vfprintf+0x182>
    fd56:	27 e0       	ldi	r18, 0x07	; 7
    fd58:	17 e0       	ldi	r17, 0x07	; 7
    fd5a:	05 c0       	rjmp	.+10     	; 0xfd66 <vfprintf+0x184>
    fd5c:	27 e0       	ldi	r18, 0x07	; 7
    fd5e:	9c e3       	ldi	r25, 0x3C	; 60
    fd60:	49 2e       	mov	r4, r25
    fd62:	02 c0       	rjmp	.+4      	; 0xfd68 <vfprintf+0x186>
    fd64:	21 2f       	mov	r18, r17
    fd66:	41 2c       	mov	r4, r1
    fd68:	56 01       	movw	r10, r12
    fd6a:	84 e0       	ldi	r24, 0x04	; 4
    fd6c:	a8 0e       	add	r10, r24
    fd6e:	b1 1c       	adc	r11, r1
    fd70:	f6 01       	movw	r30, r12
    fd72:	60 81       	ld	r22, Z
    fd74:	71 81       	ldd	r23, Z+1	; 0x01
    fd76:	82 81       	ldd	r24, Z+2	; 0x02
    fd78:	93 81       	ldd	r25, Z+3	; 0x03
    fd7a:	04 2d       	mov	r16, r4
    fd7c:	a3 01       	movw	r20, r6
    fd7e:	0e 94 bb 87 	call	0x10f76	; 0x10f76 <__ftoa_engine>
    fd82:	6c 01       	movw	r12, r24
    fd84:	f9 81       	ldd	r31, Y+1	; 0x01
    fd86:	fc 87       	std	Y+12, r31	; 0x0c
    fd88:	f0 ff       	sbrs	r31, 0
    fd8a:	02 c0       	rjmp	.+4      	; 0xfd90 <vfprintf+0x1ae>
    fd8c:	f3 ff       	sbrs	r31, 3
    fd8e:	06 c0       	rjmp	.+12     	; 0xfd9c <vfprintf+0x1ba>
    fd90:	91 fc       	sbrc	r9, 1
    fd92:	06 c0       	rjmp	.+12     	; 0xfda0 <vfprintf+0x1be>
    fd94:	92 fe       	sbrs	r9, 2
    fd96:	06 c0       	rjmp	.+12     	; 0xfda4 <vfprintf+0x1c2>
    fd98:	00 e2       	ldi	r16, 0x20	; 32
    fd9a:	05 c0       	rjmp	.+10     	; 0xfda6 <vfprintf+0x1c4>
    fd9c:	0d e2       	ldi	r16, 0x2D	; 45
    fd9e:	03 c0       	rjmp	.+6      	; 0xfda6 <vfprintf+0x1c4>
    fda0:	0b e2       	ldi	r16, 0x2B	; 43
    fda2:	01 c0       	rjmp	.+2      	; 0xfda6 <vfprintf+0x1c4>
    fda4:	00 e0       	ldi	r16, 0x00	; 0
    fda6:	8c 85       	ldd	r24, Y+12	; 0x0c
    fda8:	8c 70       	andi	r24, 0x0C	; 12
    fdaa:	19 f0       	breq	.+6      	; 0xfdb2 <vfprintf+0x1d0>
    fdac:	01 11       	cpse	r16, r1
    fdae:	5a c2       	rjmp	.+1204   	; 0x10264 <__EEPROM_REGION_LENGTH__+0x264>
    fdb0:	9b c2       	rjmp	.+1334   	; 0x102e8 <__EEPROM_REGION_LENGTH__+0x2e8>
    fdb2:	97 fe       	sbrs	r9, 7
    fdb4:	10 c0       	rjmp	.+32     	; 0xfdd6 <vfprintf+0x1f4>
    fdb6:	4c 0c       	add	r4, r12
    fdb8:	fc 85       	ldd	r31, Y+12	; 0x0c
    fdba:	f4 ff       	sbrs	r31, 4
    fdbc:	04 c0       	rjmp	.+8      	; 0xfdc6 <vfprintf+0x1e4>
    fdbe:	8a 81       	ldd	r24, Y+2	; 0x02
    fdc0:	81 33       	cpi	r24, 0x31	; 49
    fdc2:	09 f4       	brne	.+2      	; 0xfdc6 <vfprintf+0x1e4>
    fdc4:	4a 94       	dec	r4
    fdc6:	14 14       	cp	r1, r4
    fdc8:	74 f5       	brge	.+92     	; 0xfe26 <vfprintf+0x244>
    fdca:	28 e0       	ldi	r18, 0x08	; 8
    fdcc:	24 15       	cp	r18, r4
    fdce:	78 f5       	brcc	.+94     	; 0xfe2e <vfprintf+0x24c>
    fdd0:	88 e0       	ldi	r24, 0x08	; 8
    fdd2:	48 2e       	mov	r4, r24
    fdd4:	2c c0       	rjmp	.+88     	; 0xfe2e <vfprintf+0x24c>
    fdd6:	96 fc       	sbrc	r9, 6
    fdd8:	2a c0       	rjmp	.+84     	; 0xfe2e <vfprintf+0x24c>
    fdda:	81 2f       	mov	r24, r17
    fddc:	90 e0       	ldi	r25, 0x00	; 0
    fdde:	8c 15       	cp	r24, r12
    fde0:	9d 05       	cpc	r25, r13
    fde2:	9c f0       	brlt	.+38     	; 0xfe0a <vfprintf+0x228>
    fde4:	3c ef       	ldi	r19, 0xFC	; 252
    fde6:	c3 16       	cp	r12, r19
    fde8:	3f ef       	ldi	r19, 0xFF	; 255
    fdea:	d3 06       	cpc	r13, r19
    fdec:	74 f0       	brlt	.+28     	; 0xfe0a <vfprintf+0x228>
    fdee:	89 2d       	mov	r24, r9
    fdf0:	80 68       	ori	r24, 0x80	; 128
    fdf2:	98 2e       	mov	r9, r24
    fdf4:	0a c0       	rjmp	.+20     	; 0xfe0a <vfprintf+0x228>
    fdf6:	e2 e0       	ldi	r30, 0x02	; 2
    fdf8:	f0 e0       	ldi	r31, 0x00	; 0
    fdfa:	ec 0f       	add	r30, r28
    fdfc:	fd 1f       	adc	r31, r29
    fdfe:	e1 0f       	add	r30, r17
    fe00:	f1 1d       	adc	r31, r1
    fe02:	80 81       	ld	r24, Z
    fe04:	80 33       	cpi	r24, 0x30	; 48
    fe06:	19 f4       	brne	.+6      	; 0xfe0e <vfprintf+0x22c>
    fe08:	11 50       	subi	r17, 0x01	; 1
    fe0a:	11 11       	cpse	r17, r1
    fe0c:	f4 cf       	rjmp	.-24     	; 0xfdf6 <vfprintf+0x214>
    fe0e:	97 fe       	sbrs	r9, 7
    fe10:	0e c0       	rjmp	.+28     	; 0xfe2e <vfprintf+0x24c>
    fe12:	44 24       	eor	r4, r4
    fe14:	43 94       	inc	r4
    fe16:	41 0e       	add	r4, r17
    fe18:	81 2f       	mov	r24, r17
    fe1a:	90 e0       	ldi	r25, 0x00	; 0
    fe1c:	c8 16       	cp	r12, r24
    fe1e:	d9 06       	cpc	r13, r25
    fe20:	2c f4       	brge	.+10     	; 0xfe2c <vfprintf+0x24a>
    fe22:	1c 19       	sub	r17, r12
    fe24:	04 c0       	rjmp	.+8      	; 0xfe2e <vfprintf+0x24c>
    fe26:	44 24       	eor	r4, r4
    fe28:	43 94       	inc	r4
    fe2a:	01 c0       	rjmp	.+2      	; 0xfe2e <vfprintf+0x24c>
    fe2c:	10 e0       	ldi	r17, 0x00	; 0
    fe2e:	97 fe       	sbrs	r9, 7
    fe30:	06 c0       	rjmp	.+12     	; 0xfe3e <vfprintf+0x25c>
    fe32:	1c 14       	cp	r1, r12
    fe34:	1d 04       	cpc	r1, r13
    fe36:	34 f4       	brge	.+12     	; 0xfe44 <vfprintf+0x262>
    fe38:	c6 01       	movw	r24, r12
    fe3a:	01 96       	adiw	r24, 0x01	; 1
    fe3c:	05 c0       	rjmp	.+10     	; 0xfe48 <vfprintf+0x266>
    fe3e:	85 e0       	ldi	r24, 0x05	; 5
    fe40:	90 e0       	ldi	r25, 0x00	; 0
    fe42:	02 c0       	rjmp	.+4      	; 0xfe48 <vfprintf+0x266>
    fe44:	81 e0       	ldi	r24, 0x01	; 1
    fe46:	90 e0       	ldi	r25, 0x00	; 0
    fe48:	01 11       	cpse	r16, r1
    fe4a:	01 96       	adiw	r24, 0x01	; 1
    fe4c:	11 23       	and	r17, r17
    fe4e:	31 f0       	breq	.+12     	; 0xfe5c <vfprintf+0x27a>
    fe50:	21 2f       	mov	r18, r17
    fe52:	30 e0       	ldi	r19, 0x00	; 0
    fe54:	2f 5f       	subi	r18, 0xFF	; 255
    fe56:	3f 4f       	sbci	r19, 0xFF	; 255
    fe58:	82 0f       	add	r24, r18
    fe5a:	93 1f       	adc	r25, r19
    fe5c:	25 2d       	mov	r18, r5
    fe5e:	30 e0       	ldi	r19, 0x00	; 0
    fe60:	82 17       	cp	r24, r18
    fe62:	93 07       	cpc	r25, r19
    fe64:	14 f4       	brge	.+4      	; 0xfe6a <vfprintf+0x288>
    fe66:	58 1a       	sub	r5, r24
    fe68:	01 c0       	rjmp	.+2      	; 0xfe6c <vfprintf+0x28a>
    fe6a:	51 2c       	mov	r5, r1
    fe6c:	89 2d       	mov	r24, r9
    fe6e:	89 70       	andi	r24, 0x09	; 9
    fe70:	49 f4       	brne	.+18     	; 0xfe84 <vfprintf+0x2a2>
    fe72:	55 20       	and	r5, r5
    fe74:	39 f0       	breq	.+14     	; 0xfe84 <vfprintf+0x2a2>
    fe76:	b7 01       	movw	r22, r14
    fe78:	80 e2       	ldi	r24, 0x20	; 32
    fe7a:	90 e0       	ldi	r25, 0x00	; 0
    fe7c:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    fe80:	5a 94       	dec	r5
    fe82:	f7 cf       	rjmp	.-18     	; 0xfe72 <vfprintf+0x290>
    fe84:	00 23       	and	r16, r16
    fe86:	29 f0       	breq	.+10     	; 0xfe92 <vfprintf+0x2b0>
    fe88:	b7 01       	movw	r22, r14
    fe8a:	80 2f       	mov	r24, r16
    fe8c:	90 e0       	ldi	r25, 0x00	; 0
    fe8e:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    fe92:	93 fc       	sbrc	r9, 3
    fe94:	09 c0       	rjmp	.+18     	; 0xfea8 <vfprintf+0x2c6>
    fe96:	55 20       	and	r5, r5
    fe98:	39 f0       	breq	.+14     	; 0xfea8 <vfprintf+0x2c6>
    fe9a:	b7 01       	movw	r22, r14
    fe9c:	80 e3       	ldi	r24, 0x30	; 48
    fe9e:	90 e0       	ldi	r25, 0x00	; 0
    fea0:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    fea4:	5a 94       	dec	r5
    fea6:	f7 cf       	rjmp	.-18     	; 0xfe96 <vfprintf+0x2b4>
    fea8:	97 fe       	sbrs	r9, 7
    feaa:	4c c0       	rjmp	.+152    	; 0xff44 <vfprintf+0x362>
    feac:	46 01       	movw	r8, r12
    feae:	d7 fe       	sbrs	r13, 7
    feb0:	02 c0       	rjmp	.+4      	; 0xfeb6 <vfprintf+0x2d4>
    feb2:	81 2c       	mov	r8, r1
    feb4:	91 2c       	mov	r9, r1
    feb6:	c6 01       	movw	r24, r12
    feb8:	88 19       	sub	r24, r8
    feba:	99 09       	sbc	r25, r9
    febc:	f3 01       	movw	r30, r6
    febe:	e8 0f       	add	r30, r24
    fec0:	f9 1f       	adc	r31, r25
    fec2:	ed 87       	std	Y+13, r30	; 0x0d
    fec4:	fe 87       	std	Y+14, r31	; 0x0e
    fec6:	96 01       	movw	r18, r12
    fec8:	24 19       	sub	r18, r4
    feca:	31 09       	sbc	r19, r1
    fecc:	2f 87       	std	Y+15, r18	; 0x0f
    fece:	38 8b       	std	Y+16, r19	; 0x10
    fed0:	01 2f       	mov	r16, r17
    fed2:	10 e0       	ldi	r17, 0x00	; 0
    fed4:	11 95       	neg	r17
    fed6:	01 95       	neg	r16
    fed8:	11 09       	sbc	r17, r1
    feda:	3f ef       	ldi	r19, 0xFF	; 255
    fedc:	83 16       	cp	r8, r19
    fede:	93 06       	cpc	r9, r19
    fee0:	29 f4       	brne	.+10     	; 0xfeec <vfprintf+0x30a>
    fee2:	b7 01       	movw	r22, r14
    fee4:	8e e2       	ldi	r24, 0x2E	; 46
    fee6:	90 e0       	ldi	r25, 0x00	; 0
    fee8:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    feec:	c8 14       	cp	r12, r8
    feee:	d9 04       	cpc	r13, r9
    fef0:	4c f0       	brlt	.+18     	; 0xff04 <vfprintf+0x322>
    fef2:	8f 85       	ldd	r24, Y+15	; 0x0f
    fef4:	98 89       	ldd	r25, Y+16	; 0x10
    fef6:	88 15       	cp	r24, r8
    fef8:	99 05       	cpc	r25, r9
    fefa:	24 f4       	brge	.+8      	; 0xff04 <vfprintf+0x322>
    fefc:	ed 85       	ldd	r30, Y+13	; 0x0d
    fefe:	fe 85       	ldd	r31, Y+14	; 0x0e
    ff00:	81 81       	ldd	r24, Z+1	; 0x01
    ff02:	01 c0       	rjmp	.+2      	; 0xff06 <vfprintf+0x324>
    ff04:	80 e3       	ldi	r24, 0x30	; 48
    ff06:	f1 e0       	ldi	r31, 0x01	; 1
    ff08:	8f 1a       	sub	r8, r31
    ff0a:	91 08       	sbc	r9, r1
    ff0c:	2d 85       	ldd	r18, Y+13	; 0x0d
    ff0e:	3e 85       	ldd	r19, Y+14	; 0x0e
    ff10:	2f 5f       	subi	r18, 0xFF	; 255
    ff12:	3f 4f       	sbci	r19, 0xFF	; 255
    ff14:	2d 87       	std	Y+13, r18	; 0x0d
    ff16:	3e 87       	std	Y+14, r19	; 0x0e
    ff18:	80 16       	cp	r8, r16
    ff1a:	91 06       	cpc	r9, r17
    ff1c:	2c f0       	brlt	.+10     	; 0xff28 <vfprintf+0x346>
    ff1e:	b7 01       	movw	r22, r14
    ff20:	90 e0       	ldi	r25, 0x00	; 0
    ff22:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    ff26:	d9 cf       	rjmp	.-78     	; 0xfeda <vfprintf+0x2f8>
    ff28:	c8 14       	cp	r12, r8
    ff2a:	d9 04       	cpc	r13, r9
    ff2c:	41 f4       	brne	.+16     	; 0xff3e <vfprintf+0x35c>
    ff2e:	9a 81       	ldd	r25, Y+2	; 0x02
    ff30:	96 33       	cpi	r25, 0x36	; 54
    ff32:	20 f4       	brcc	.+8      	; 0xff3c <vfprintf+0x35a>
    ff34:	95 33       	cpi	r25, 0x35	; 53
    ff36:	19 f4       	brne	.+6      	; 0xff3e <vfprintf+0x35c>
    ff38:	3c 85       	ldd	r19, Y+12	; 0x0c
    ff3a:	34 ff       	sbrs	r19, 4
    ff3c:	81 e3       	ldi	r24, 0x31	; 49
    ff3e:	b7 01       	movw	r22, r14
    ff40:	90 e0       	ldi	r25, 0x00	; 0
    ff42:	4e c0       	rjmp	.+156    	; 0xffe0 <__DATA_REGION_LENGTH__+0x40>
    ff44:	8a 81       	ldd	r24, Y+2	; 0x02
    ff46:	81 33       	cpi	r24, 0x31	; 49
    ff48:	19 f0       	breq	.+6      	; 0xff50 <vfprintf+0x36e>
    ff4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    ff4c:	9f 7e       	andi	r25, 0xEF	; 239
    ff4e:	9c 87       	std	Y+12, r25	; 0x0c
    ff50:	b7 01       	movw	r22, r14
    ff52:	90 e0       	ldi	r25, 0x00	; 0
    ff54:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    ff58:	11 11       	cpse	r17, r1
    ff5a:	05 c0       	rjmp	.+10     	; 0xff66 <vfprintf+0x384>
    ff5c:	94 fc       	sbrc	r9, 4
    ff5e:	18 c0       	rjmp	.+48     	; 0xff90 <vfprintf+0x3ae>
    ff60:	85 e6       	ldi	r24, 0x65	; 101
    ff62:	90 e0       	ldi	r25, 0x00	; 0
    ff64:	17 c0       	rjmp	.+46     	; 0xff94 <vfprintf+0x3b2>
    ff66:	b7 01       	movw	r22, r14
    ff68:	8e e2       	ldi	r24, 0x2E	; 46
    ff6a:	90 e0       	ldi	r25, 0x00	; 0
    ff6c:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    ff70:	1e 5f       	subi	r17, 0xFE	; 254
    ff72:	82 e0       	ldi	r24, 0x02	; 2
    ff74:	01 e0       	ldi	r16, 0x01	; 1
    ff76:	08 0f       	add	r16, r24
    ff78:	f3 01       	movw	r30, r6
    ff7a:	e8 0f       	add	r30, r24
    ff7c:	f1 1d       	adc	r31, r1
    ff7e:	80 81       	ld	r24, Z
    ff80:	b7 01       	movw	r22, r14
    ff82:	90 e0       	ldi	r25, 0x00	; 0
    ff84:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    ff88:	80 2f       	mov	r24, r16
    ff8a:	01 13       	cpse	r16, r17
    ff8c:	f3 cf       	rjmp	.-26     	; 0xff74 <vfprintf+0x392>
    ff8e:	e6 cf       	rjmp	.-52     	; 0xff5c <vfprintf+0x37a>
    ff90:	85 e4       	ldi	r24, 0x45	; 69
    ff92:	90 e0       	ldi	r25, 0x00	; 0
    ff94:	b7 01       	movw	r22, r14
    ff96:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    ff9a:	d7 fc       	sbrc	r13, 7
    ff9c:	06 c0       	rjmp	.+12     	; 0xffaa <__DATA_REGION_LENGTH__+0xa>
    ff9e:	c1 14       	cp	r12, r1
    ffa0:	d1 04       	cpc	r13, r1
    ffa2:	41 f4       	brne	.+16     	; 0xffb4 <__DATA_REGION_LENGTH__+0x14>
    ffa4:	ec 85       	ldd	r30, Y+12	; 0x0c
    ffa6:	e4 ff       	sbrs	r30, 4
    ffa8:	05 c0       	rjmp	.+10     	; 0xffb4 <__DATA_REGION_LENGTH__+0x14>
    ffaa:	d1 94       	neg	r13
    ffac:	c1 94       	neg	r12
    ffae:	d1 08       	sbc	r13, r1
    ffb0:	8d e2       	ldi	r24, 0x2D	; 45
    ffb2:	01 c0       	rjmp	.+2      	; 0xffb6 <__DATA_REGION_LENGTH__+0x16>
    ffb4:	8b e2       	ldi	r24, 0x2B	; 43
    ffb6:	b7 01       	movw	r22, r14
    ffb8:	90 e0       	ldi	r25, 0x00	; 0
    ffba:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    ffbe:	80 e3       	ldi	r24, 0x30	; 48
    ffc0:	2a e0       	ldi	r18, 0x0A	; 10
    ffc2:	c2 16       	cp	r12, r18
    ffc4:	d1 04       	cpc	r13, r1
    ffc6:	2c f0       	brlt	.+10     	; 0xffd2 <__DATA_REGION_LENGTH__+0x32>
    ffc8:	8f 5f       	subi	r24, 0xFF	; 255
    ffca:	fa e0       	ldi	r31, 0x0A	; 10
    ffcc:	cf 1a       	sub	r12, r31
    ffce:	d1 08       	sbc	r13, r1
    ffd0:	f7 cf       	rjmp	.-18     	; 0xffc0 <__DATA_REGION_LENGTH__+0x20>
    ffd2:	b7 01       	movw	r22, r14
    ffd4:	90 e0       	ldi	r25, 0x00	; 0
    ffd6:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    ffda:	b7 01       	movw	r22, r14
    ffdc:	c6 01       	movw	r24, r12
    ffde:	c0 96       	adiw	r24, 0x30	; 48
    ffe0:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
    ffe4:	54 c1       	rjmp	.+680    	; 0x1028e <__EEPROM_REGION_LENGTH__+0x28e>
    ffe6:	83 36       	cpi	r24, 0x63	; 99
    ffe8:	31 f0       	breq	.+12     	; 0xfff6 <__DATA_REGION_LENGTH__+0x56>
    ffea:	83 37       	cpi	r24, 0x73	; 115
    ffec:	79 f0       	breq	.+30     	; 0x1000c <__EEPROM_REGION_LENGTH__+0xc>
    ffee:	83 35       	cpi	r24, 0x53	; 83
    fff0:	09 f0       	breq	.+2      	; 0xfff4 <__DATA_REGION_LENGTH__+0x54>
    fff2:	56 c0       	rjmp	.+172    	; 0x100a0 <__EEPROM_REGION_LENGTH__+0xa0>
    fff4:	20 c0       	rjmp	.+64     	; 0x10036 <__EEPROM_REGION_LENGTH__+0x36>
    fff6:	56 01       	movw	r10, r12
    fff8:	32 e0       	ldi	r19, 0x02	; 2
    fffa:	a3 0e       	add	r10, r19
    fffc:	b1 1c       	adc	r11, r1
    fffe:	f6 01       	movw	r30, r12
   10000:	80 81       	ld	r24, Z
   10002:	89 83       	std	Y+1, r24	; 0x01
   10004:	01 e0       	ldi	r16, 0x01	; 1
   10006:	10 e0       	ldi	r17, 0x00	; 0
   10008:	63 01       	movw	r12, r6
   1000a:	12 c0       	rjmp	.+36     	; 0x10030 <__EEPROM_REGION_LENGTH__+0x30>
   1000c:	56 01       	movw	r10, r12
   1000e:	f2 e0       	ldi	r31, 0x02	; 2
   10010:	af 0e       	add	r10, r31
   10012:	b1 1c       	adc	r11, r1
   10014:	f6 01       	movw	r30, r12
   10016:	c0 80       	ld	r12, Z
   10018:	d1 80       	ldd	r13, Z+1	; 0x01
   1001a:	96 fe       	sbrs	r9, 6
   1001c:	03 c0       	rjmp	.+6      	; 0x10024 <__EEPROM_REGION_LENGTH__+0x24>
   1001e:	61 2f       	mov	r22, r17
   10020:	70 e0       	ldi	r23, 0x00	; 0
   10022:	02 c0       	rjmp	.+4      	; 0x10028 <__EEPROM_REGION_LENGTH__+0x28>
   10024:	6f ef       	ldi	r22, 0xFF	; 255
   10026:	7f ef       	ldi	r23, 0xFF	; 255
   10028:	c6 01       	movw	r24, r12
   1002a:	0e 94 ff 88 	call	0x111fe	; 0x111fe <strnlen>
   1002e:	8c 01       	movw	r16, r24
   10030:	f9 2d       	mov	r31, r9
   10032:	ff 77       	andi	r31, 0x7F	; 127
   10034:	14 c0       	rjmp	.+40     	; 0x1005e <__EEPROM_REGION_LENGTH__+0x5e>
   10036:	56 01       	movw	r10, r12
   10038:	22 e0       	ldi	r18, 0x02	; 2
   1003a:	a2 0e       	add	r10, r18
   1003c:	b1 1c       	adc	r11, r1
   1003e:	f6 01       	movw	r30, r12
   10040:	c0 80       	ld	r12, Z
   10042:	d1 80       	ldd	r13, Z+1	; 0x01
   10044:	96 fe       	sbrs	r9, 6
   10046:	03 c0       	rjmp	.+6      	; 0x1004e <__EEPROM_REGION_LENGTH__+0x4e>
   10048:	61 2f       	mov	r22, r17
   1004a:	70 e0       	ldi	r23, 0x00	; 0
   1004c:	02 c0       	rjmp	.+4      	; 0x10052 <__EEPROM_REGION_LENGTH__+0x52>
   1004e:	6f ef       	ldi	r22, 0xFF	; 255
   10050:	7f ef       	ldi	r23, 0xFF	; 255
   10052:	c6 01       	movw	r24, r12
   10054:	0e 94 b9 88 	call	0x11172	; 0x11172 <strnlen_P>
   10058:	8c 01       	movw	r16, r24
   1005a:	f9 2d       	mov	r31, r9
   1005c:	f0 68       	ori	r31, 0x80	; 128
   1005e:	9f 2e       	mov	r9, r31
   10060:	f3 fd       	sbrc	r31, 3
   10062:	1a c0       	rjmp	.+52     	; 0x10098 <__EEPROM_REGION_LENGTH__+0x98>
   10064:	85 2d       	mov	r24, r5
   10066:	90 e0       	ldi	r25, 0x00	; 0
   10068:	08 17       	cp	r16, r24
   1006a:	19 07       	cpc	r17, r25
   1006c:	a8 f4       	brcc	.+42     	; 0x10098 <__EEPROM_REGION_LENGTH__+0x98>
   1006e:	b7 01       	movw	r22, r14
   10070:	80 e2       	ldi	r24, 0x20	; 32
   10072:	90 e0       	ldi	r25, 0x00	; 0
   10074:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
   10078:	5a 94       	dec	r5
   1007a:	f4 cf       	rjmp	.-24     	; 0x10064 <__EEPROM_REGION_LENGTH__+0x64>
   1007c:	f6 01       	movw	r30, r12
   1007e:	97 fc       	sbrc	r9, 7
   10080:	85 91       	lpm	r24, Z+
   10082:	97 fe       	sbrs	r9, 7
   10084:	81 91       	ld	r24, Z+
   10086:	6f 01       	movw	r12, r30
   10088:	b7 01       	movw	r22, r14
   1008a:	90 e0       	ldi	r25, 0x00	; 0
   1008c:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
   10090:	51 10       	cpse	r5, r1
   10092:	5a 94       	dec	r5
   10094:	01 50       	subi	r16, 0x01	; 1
   10096:	11 09       	sbc	r17, r1
   10098:	01 15       	cp	r16, r1
   1009a:	11 05       	cpc	r17, r1
   1009c:	79 f7       	brne	.-34     	; 0x1007c <__EEPROM_REGION_LENGTH__+0x7c>
   1009e:	f7 c0       	rjmp	.+494    	; 0x1028e <__EEPROM_REGION_LENGTH__+0x28e>
   100a0:	84 36       	cpi	r24, 0x64	; 100
   100a2:	11 f0       	breq	.+4      	; 0x100a8 <__EEPROM_REGION_LENGTH__+0xa8>
   100a4:	89 36       	cpi	r24, 0x69	; 105
   100a6:	61 f5       	brne	.+88     	; 0x10100 <__EEPROM_REGION_LENGTH__+0x100>
   100a8:	56 01       	movw	r10, r12
   100aa:	97 fe       	sbrs	r9, 7
   100ac:	09 c0       	rjmp	.+18     	; 0x100c0 <__EEPROM_REGION_LENGTH__+0xc0>
   100ae:	24 e0       	ldi	r18, 0x04	; 4
   100b0:	a2 0e       	add	r10, r18
   100b2:	b1 1c       	adc	r11, r1
   100b4:	f6 01       	movw	r30, r12
   100b6:	60 81       	ld	r22, Z
   100b8:	71 81       	ldd	r23, Z+1	; 0x01
   100ba:	82 81       	ldd	r24, Z+2	; 0x02
   100bc:	93 81       	ldd	r25, Z+3	; 0x03
   100be:	0a c0       	rjmp	.+20     	; 0x100d4 <__EEPROM_REGION_LENGTH__+0xd4>
   100c0:	f2 e0       	ldi	r31, 0x02	; 2
   100c2:	af 0e       	add	r10, r31
   100c4:	b1 1c       	adc	r11, r1
   100c6:	f6 01       	movw	r30, r12
   100c8:	60 81       	ld	r22, Z
   100ca:	71 81       	ldd	r23, Z+1	; 0x01
   100cc:	07 2e       	mov	r0, r23
   100ce:	00 0c       	add	r0, r0
   100d0:	88 0b       	sbc	r24, r24
   100d2:	99 0b       	sbc	r25, r25
   100d4:	f9 2d       	mov	r31, r9
   100d6:	ff 76       	andi	r31, 0x6F	; 111
   100d8:	9f 2e       	mov	r9, r31
   100da:	97 ff       	sbrs	r25, 7
   100dc:	09 c0       	rjmp	.+18     	; 0x100f0 <__EEPROM_REGION_LENGTH__+0xf0>
   100de:	90 95       	com	r25
   100e0:	80 95       	com	r24
   100e2:	70 95       	com	r23
   100e4:	61 95       	neg	r22
   100e6:	7f 4f       	sbci	r23, 0xFF	; 255
   100e8:	8f 4f       	sbci	r24, 0xFF	; 255
   100ea:	9f 4f       	sbci	r25, 0xFF	; 255
   100ec:	f0 68       	ori	r31, 0x80	; 128
   100ee:	9f 2e       	mov	r9, r31
   100f0:	2a e0       	ldi	r18, 0x0A	; 10
   100f2:	30 e0       	ldi	r19, 0x00	; 0
   100f4:	a3 01       	movw	r20, r6
   100f6:	0e 94 0d 8a 	call	0x1141a	; 0x1141a <__ultoa_invert>
   100fa:	c8 2e       	mov	r12, r24
   100fc:	c6 18       	sub	r12, r6
   100fe:	3f c0       	rjmp	.+126    	; 0x1017e <__EEPROM_REGION_LENGTH__+0x17e>
   10100:	09 2d       	mov	r16, r9
   10102:	85 37       	cpi	r24, 0x75	; 117
   10104:	21 f4       	brne	.+8      	; 0x1010e <__EEPROM_REGION_LENGTH__+0x10e>
   10106:	0f 7e       	andi	r16, 0xEF	; 239
   10108:	2a e0       	ldi	r18, 0x0A	; 10
   1010a:	30 e0       	ldi	r19, 0x00	; 0
   1010c:	1d c0       	rjmp	.+58     	; 0x10148 <__EEPROM_REGION_LENGTH__+0x148>
   1010e:	09 7f       	andi	r16, 0xF9	; 249
   10110:	8f 36       	cpi	r24, 0x6F	; 111
   10112:	91 f0       	breq	.+36     	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
   10114:	18 f4       	brcc	.+6      	; 0x1011c <__EEPROM_REGION_LENGTH__+0x11c>
   10116:	88 35       	cpi	r24, 0x58	; 88
   10118:	59 f0       	breq	.+22     	; 0x10130 <__EEPROM_REGION_LENGTH__+0x130>
   1011a:	c3 c0       	rjmp	.+390    	; 0x102a2 <__EEPROM_REGION_LENGTH__+0x2a2>
   1011c:	80 37       	cpi	r24, 0x70	; 112
   1011e:	19 f0       	breq	.+6      	; 0x10126 <__EEPROM_REGION_LENGTH__+0x126>
   10120:	88 37       	cpi	r24, 0x78	; 120
   10122:	11 f0       	breq	.+4      	; 0x10128 <__EEPROM_REGION_LENGTH__+0x128>
   10124:	be c0       	rjmp	.+380    	; 0x102a2 <__EEPROM_REGION_LENGTH__+0x2a2>
   10126:	00 61       	ori	r16, 0x10	; 16
   10128:	04 ff       	sbrs	r16, 4
   1012a:	09 c0       	rjmp	.+18     	; 0x1013e <__EEPROM_REGION_LENGTH__+0x13e>
   1012c:	04 60       	ori	r16, 0x04	; 4
   1012e:	07 c0       	rjmp	.+14     	; 0x1013e <__EEPROM_REGION_LENGTH__+0x13e>
   10130:	94 fe       	sbrs	r9, 4
   10132:	08 c0       	rjmp	.+16     	; 0x10144 <__EEPROM_REGION_LENGTH__+0x144>
   10134:	06 60       	ori	r16, 0x06	; 6
   10136:	06 c0       	rjmp	.+12     	; 0x10144 <__EEPROM_REGION_LENGTH__+0x144>
   10138:	28 e0       	ldi	r18, 0x08	; 8
   1013a:	30 e0       	ldi	r19, 0x00	; 0
   1013c:	05 c0       	rjmp	.+10     	; 0x10148 <__EEPROM_REGION_LENGTH__+0x148>
   1013e:	20 e1       	ldi	r18, 0x10	; 16
   10140:	30 e0       	ldi	r19, 0x00	; 0
   10142:	02 c0       	rjmp	.+4      	; 0x10148 <__EEPROM_REGION_LENGTH__+0x148>
   10144:	20 e1       	ldi	r18, 0x10	; 16
   10146:	32 e0       	ldi	r19, 0x02	; 2
   10148:	56 01       	movw	r10, r12
   1014a:	07 ff       	sbrs	r16, 7
   1014c:	09 c0       	rjmp	.+18     	; 0x10160 <__EEPROM_REGION_LENGTH__+0x160>
   1014e:	84 e0       	ldi	r24, 0x04	; 4
   10150:	a8 0e       	add	r10, r24
   10152:	b1 1c       	adc	r11, r1
   10154:	f6 01       	movw	r30, r12
   10156:	60 81       	ld	r22, Z
   10158:	71 81       	ldd	r23, Z+1	; 0x01
   1015a:	82 81       	ldd	r24, Z+2	; 0x02
   1015c:	93 81       	ldd	r25, Z+3	; 0x03
   1015e:	08 c0       	rjmp	.+16     	; 0x10170 <__EEPROM_REGION_LENGTH__+0x170>
   10160:	f2 e0       	ldi	r31, 0x02	; 2
   10162:	af 0e       	add	r10, r31
   10164:	b1 1c       	adc	r11, r1
   10166:	f6 01       	movw	r30, r12
   10168:	60 81       	ld	r22, Z
   1016a:	71 81       	ldd	r23, Z+1	; 0x01
   1016c:	80 e0       	ldi	r24, 0x00	; 0
   1016e:	90 e0       	ldi	r25, 0x00	; 0
   10170:	a3 01       	movw	r20, r6
   10172:	0e 94 0d 8a 	call	0x1141a	; 0x1141a <__ultoa_invert>
   10176:	c8 2e       	mov	r12, r24
   10178:	c6 18       	sub	r12, r6
   1017a:	0f 77       	andi	r16, 0x7F	; 127
   1017c:	90 2e       	mov	r9, r16
   1017e:	96 fe       	sbrs	r9, 6
   10180:	0b c0       	rjmp	.+22     	; 0x10198 <__EEPROM_REGION_LENGTH__+0x198>
   10182:	09 2d       	mov	r16, r9
   10184:	0e 7f       	andi	r16, 0xFE	; 254
   10186:	c1 16       	cp	r12, r17
   10188:	50 f4       	brcc	.+20     	; 0x1019e <__EEPROM_REGION_LENGTH__+0x19e>
   1018a:	94 fe       	sbrs	r9, 4
   1018c:	0a c0       	rjmp	.+20     	; 0x101a2 <__EEPROM_REGION_LENGTH__+0x1a2>
   1018e:	92 fc       	sbrc	r9, 2
   10190:	08 c0       	rjmp	.+16     	; 0x101a2 <__EEPROM_REGION_LENGTH__+0x1a2>
   10192:	09 2d       	mov	r16, r9
   10194:	0e 7e       	andi	r16, 0xEE	; 238
   10196:	05 c0       	rjmp	.+10     	; 0x101a2 <__EEPROM_REGION_LENGTH__+0x1a2>
   10198:	dc 2c       	mov	r13, r12
   1019a:	09 2d       	mov	r16, r9
   1019c:	03 c0       	rjmp	.+6      	; 0x101a4 <__EEPROM_REGION_LENGTH__+0x1a4>
   1019e:	dc 2c       	mov	r13, r12
   101a0:	01 c0       	rjmp	.+2      	; 0x101a4 <__EEPROM_REGION_LENGTH__+0x1a4>
   101a2:	d1 2e       	mov	r13, r17
   101a4:	04 ff       	sbrs	r16, 4
   101a6:	0d c0       	rjmp	.+26     	; 0x101c2 <__EEPROM_REGION_LENGTH__+0x1c2>
   101a8:	fe 01       	movw	r30, r28
   101aa:	ec 0d       	add	r30, r12
   101ac:	f1 1d       	adc	r31, r1
   101ae:	80 81       	ld	r24, Z
   101b0:	80 33       	cpi	r24, 0x30	; 48
   101b2:	11 f4       	brne	.+4      	; 0x101b8 <__EEPROM_REGION_LENGTH__+0x1b8>
   101b4:	09 7e       	andi	r16, 0xE9	; 233
   101b6:	09 c0       	rjmp	.+18     	; 0x101ca <__EEPROM_REGION_LENGTH__+0x1ca>
   101b8:	02 ff       	sbrs	r16, 2
   101ba:	06 c0       	rjmp	.+12     	; 0x101c8 <__EEPROM_REGION_LENGTH__+0x1c8>
   101bc:	d3 94       	inc	r13
   101be:	d3 94       	inc	r13
   101c0:	04 c0       	rjmp	.+8      	; 0x101ca <__EEPROM_REGION_LENGTH__+0x1ca>
   101c2:	80 2f       	mov	r24, r16
   101c4:	86 78       	andi	r24, 0x86	; 134
   101c6:	09 f0       	breq	.+2      	; 0x101ca <__EEPROM_REGION_LENGTH__+0x1ca>
   101c8:	d3 94       	inc	r13
   101ca:	03 fd       	sbrc	r16, 3
   101cc:	11 c0       	rjmp	.+34     	; 0x101f0 <__EEPROM_REGION_LENGTH__+0x1f0>
   101ce:	00 ff       	sbrs	r16, 0
   101d0:	06 c0       	rjmp	.+12     	; 0x101de <__EEPROM_REGION_LENGTH__+0x1de>
   101d2:	1c 2d       	mov	r17, r12
   101d4:	d5 14       	cp	r13, r5
   101d6:	80 f4       	brcc	.+32     	; 0x101f8 <__EEPROM_REGION_LENGTH__+0x1f8>
   101d8:	15 0d       	add	r17, r5
   101da:	1d 19       	sub	r17, r13
   101dc:	0d c0       	rjmp	.+26     	; 0x101f8 <__EEPROM_REGION_LENGTH__+0x1f8>
   101de:	d5 14       	cp	r13, r5
   101e0:	58 f4       	brcc	.+22     	; 0x101f8 <__EEPROM_REGION_LENGTH__+0x1f8>
   101e2:	b7 01       	movw	r22, r14
   101e4:	80 e2       	ldi	r24, 0x20	; 32
   101e6:	90 e0       	ldi	r25, 0x00	; 0
   101e8:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
   101ec:	d3 94       	inc	r13
   101ee:	f7 cf       	rjmp	.-18     	; 0x101de <__EEPROM_REGION_LENGTH__+0x1de>
   101f0:	d5 14       	cp	r13, r5
   101f2:	10 f4       	brcc	.+4      	; 0x101f8 <__EEPROM_REGION_LENGTH__+0x1f8>
   101f4:	5d 18       	sub	r5, r13
   101f6:	01 c0       	rjmp	.+2      	; 0x101fa <__EEPROM_REGION_LENGTH__+0x1fa>
   101f8:	51 2c       	mov	r5, r1
   101fa:	04 ff       	sbrs	r16, 4
   101fc:	10 c0       	rjmp	.+32     	; 0x1021e <__EEPROM_REGION_LENGTH__+0x21e>
   101fe:	b7 01       	movw	r22, r14
   10200:	80 e3       	ldi	r24, 0x30	; 48
   10202:	90 e0       	ldi	r25, 0x00	; 0
   10204:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
   10208:	02 ff       	sbrs	r16, 2
   1020a:	17 c0       	rjmp	.+46     	; 0x1023a <__EEPROM_REGION_LENGTH__+0x23a>
   1020c:	01 fd       	sbrc	r16, 1
   1020e:	03 c0       	rjmp	.+6      	; 0x10216 <__EEPROM_REGION_LENGTH__+0x216>
   10210:	88 e7       	ldi	r24, 0x78	; 120
   10212:	90 e0       	ldi	r25, 0x00	; 0
   10214:	02 c0       	rjmp	.+4      	; 0x1021a <__EEPROM_REGION_LENGTH__+0x21a>
   10216:	88 e5       	ldi	r24, 0x58	; 88
   10218:	90 e0       	ldi	r25, 0x00	; 0
   1021a:	b7 01       	movw	r22, r14
   1021c:	0c c0       	rjmp	.+24     	; 0x10236 <__EEPROM_REGION_LENGTH__+0x236>
   1021e:	80 2f       	mov	r24, r16
   10220:	86 78       	andi	r24, 0x86	; 134
   10222:	59 f0       	breq	.+22     	; 0x1023a <__EEPROM_REGION_LENGTH__+0x23a>
   10224:	01 ff       	sbrs	r16, 1
   10226:	02 c0       	rjmp	.+4      	; 0x1022c <__EEPROM_REGION_LENGTH__+0x22c>
   10228:	8b e2       	ldi	r24, 0x2B	; 43
   1022a:	01 c0       	rjmp	.+2      	; 0x1022e <__EEPROM_REGION_LENGTH__+0x22e>
   1022c:	80 e2       	ldi	r24, 0x20	; 32
   1022e:	07 fd       	sbrc	r16, 7
   10230:	8d e2       	ldi	r24, 0x2D	; 45
   10232:	b7 01       	movw	r22, r14
   10234:	90 e0       	ldi	r25, 0x00	; 0
   10236:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
   1023a:	c1 16       	cp	r12, r17
   1023c:	38 f4       	brcc	.+14     	; 0x1024c <__EEPROM_REGION_LENGTH__+0x24c>
   1023e:	b7 01       	movw	r22, r14
   10240:	80 e3       	ldi	r24, 0x30	; 48
   10242:	90 e0       	ldi	r25, 0x00	; 0
   10244:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
   10248:	11 50       	subi	r17, 0x01	; 1
   1024a:	f7 cf       	rjmp	.-18     	; 0x1023a <__EEPROM_REGION_LENGTH__+0x23a>
   1024c:	ca 94       	dec	r12
   1024e:	f3 01       	movw	r30, r6
   10250:	ec 0d       	add	r30, r12
   10252:	f1 1d       	adc	r31, r1
   10254:	80 81       	ld	r24, Z
   10256:	b7 01       	movw	r22, r14
   10258:	90 e0       	ldi	r25, 0x00	; 0
   1025a:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
   1025e:	c1 10       	cpse	r12, r1
   10260:	f5 cf       	rjmp	.-22     	; 0x1024c <__EEPROM_REGION_LENGTH__+0x24c>
   10262:	15 c0       	rjmp	.+42     	; 0x1028e <__EEPROM_REGION_LENGTH__+0x28e>
   10264:	f4 e0       	ldi	r31, 0x04	; 4
   10266:	f5 15       	cp	r31, r5
   10268:	60 f5       	brcc	.+88     	; 0x102c2 <__EEPROM_REGION_LENGTH__+0x2c2>
   1026a:	84 e0       	ldi	r24, 0x04	; 4
   1026c:	58 1a       	sub	r5, r24
   1026e:	93 fe       	sbrs	r9, 3
   10270:	1f c0       	rjmp	.+62     	; 0x102b0 <__EEPROM_REGION_LENGTH__+0x2b0>
   10272:	01 11       	cpse	r16, r1
   10274:	27 c0       	rjmp	.+78     	; 0x102c4 <__EEPROM_REGION_LENGTH__+0x2c4>
   10276:	2c 85       	ldd	r18, Y+12	; 0x0c
   10278:	23 ff       	sbrs	r18, 3
   1027a:	2a c0       	rjmp	.+84     	; 0x102d0 <__EEPROM_REGION_LENGTH__+0x2d0>
   1027c:	08 eb       	ldi	r16, 0xB8	; 184
   1027e:	12 e0       	ldi	r17, 0x02	; 2
   10280:	39 2d       	mov	r19, r9
   10282:	30 71       	andi	r19, 0x10	; 16
   10284:	93 2e       	mov	r9, r19
   10286:	f8 01       	movw	r30, r16
   10288:	84 91       	lpm	r24, Z
   1028a:	81 11       	cpse	r24, r1
   1028c:	24 c0       	rjmp	.+72     	; 0x102d6 <__EEPROM_REGION_LENGTH__+0x2d6>
   1028e:	55 20       	and	r5, r5
   10290:	09 f4       	brne	.+2      	; 0x10294 <__EEPROM_REGION_LENGTH__+0x294>
   10292:	e4 cc       	rjmp	.-1592   	; 0xfc5c <vfprintf+0x7a>
   10294:	b7 01       	movw	r22, r14
   10296:	80 e2       	ldi	r24, 0x20	; 32
   10298:	90 e0       	ldi	r25, 0x00	; 0
   1029a:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
   1029e:	5a 94       	dec	r5
   102a0:	f6 cf       	rjmp	.-20     	; 0x1028e <__EEPROM_REGION_LENGTH__+0x28e>
   102a2:	f7 01       	movw	r30, r14
   102a4:	86 81       	ldd	r24, Z+6	; 0x06
   102a6:	97 81       	ldd	r25, Z+7	; 0x07
   102a8:	26 c0       	rjmp	.+76     	; 0x102f6 <__EEPROM_REGION_LENGTH__+0x2f6>
   102aa:	8f ef       	ldi	r24, 0xFF	; 255
   102ac:	9f ef       	ldi	r25, 0xFF	; 255
   102ae:	23 c0       	rjmp	.+70     	; 0x102f6 <__EEPROM_REGION_LENGTH__+0x2f6>
   102b0:	b7 01       	movw	r22, r14
   102b2:	80 e2       	ldi	r24, 0x20	; 32
   102b4:	90 e0       	ldi	r25, 0x00	; 0
   102b6:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
   102ba:	5a 94       	dec	r5
   102bc:	51 10       	cpse	r5, r1
   102be:	f8 cf       	rjmp	.-16     	; 0x102b0 <__EEPROM_REGION_LENGTH__+0x2b0>
   102c0:	d8 cf       	rjmp	.-80     	; 0x10272 <__EEPROM_REGION_LENGTH__+0x272>
   102c2:	51 2c       	mov	r5, r1
   102c4:	b7 01       	movw	r22, r14
   102c6:	80 2f       	mov	r24, r16
   102c8:	90 e0       	ldi	r25, 0x00	; 0
   102ca:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
   102ce:	d3 cf       	rjmp	.-90     	; 0x10276 <__EEPROM_REGION_LENGTH__+0x276>
   102d0:	0c eb       	ldi	r16, 0xBC	; 188
   102d2:	12 e0       	ldi	r17, 0x02	; 2
   102d4:	d5 cf       	rjmp	.-86     	; 0x10280 <__EEPROM_REGION_LENGTH__+0x280>
   102d6:	91 10       	cpse	r9, r1
   102d8:	80 52       	subi	r24, 0x20	; 32
   102da:	b7 01       	movw	r22, r14
   102dc:	90 e0       	ldi	r25, 0x00	; 0
   102de:	0e 94 71 89 	call	0x112e2	; 0x112e2 <fputc>
   102e2:	0f 5f       	subi	r16, 0xFF	; 255
   102e4:	1f 4f       	sbci	r17, 0xFF	; 255
   102e6:	cf cf       	rjmp	.-98     	; 0x10286 <__EEPROM_REGION_LENGTH__+0x286>
   102e8:	23 e0       	ldi	r18, 0x03	; 3
   102ea:	25 15       	cp	r18, r5
   102ec:	10 f4       	brcc	.+4      	; 0x102f2 <__EEPROM_REGION_LENGTH__+0x2f2>
   102ee:	83 e0       	ldi	r24, 0x03	; 3
   102f0:	bd cf       	rjmp	.-134    	; 0x1026c <__EEPROM_REGION_LENGTH__+0x26c>
   102f2:	51 2c       	mov	r5, r1
   102f4:	c0 cf       	rjmp	.-128    	; 0x10276 <__EEPROM_REGION_LENGTH__+0x276>
   102f6:	60 96       	adiw	r28, 0x10	; 16
   102f8:	cd bf       	out	0x3d, r28	; 61
   102fa:	de bf       	out	0x3e, r29	; 62
   102fc:	df 91       	pop	r29
   102fe:	cf 91       	pop	r28
   10300:	1f 91       	pop	r17
   10302:	0f 91       	pop	r16
   10304:	ff 90       	pop	r15
   10306:	ef 90       	pop	r14
   10308:	df 90       	pop	r13
   1030a:	cf 90       	pop	r12
   1030c:	bf 90       	pop	r11
   1030e:	af 90       	pop	r10
   10310:	9f 90       	pop	r9
   10312:	8f 90       	pop	r8
   10314:	7f 90       	pop	r7
   10316:	6f 90       	pop	r6
   10318:	5f 90       	pop	r5
   1031a:	4f 90       	pop	r4
   1031c:	3f 90       	pop	r3
   1031e:	2f 90       	pop	r2
   10320:	08 95       	ret

00010322 <__subsf3>:
   10322:	50 58       	subi	r21, 0x80	; 128

00010324 <__addsf3>:
   10324:	bb 27       	eor	r27, r27
   10326:	aa 27       	eor	r26, r26
   10328:	0e d0       	rcall	.+28     	; 0x10346 <__addsf3x>
   1032a:	a0 c1       	rjmp	.+832    	; 0x1066c <__fp_round>
   1032c:	69 d1       	rcall	.+722    	; 0x10600 <__fp_pscA>
   1032e:	30 f0       	brcs	.+12     	; 0x1033c <__addsf3+0x18>
   10330:	6e d1       	rcall	.+732    	; 0x1060e <__fp_pscB>
   10332:	20 f0       	brcs	.+8      	; 0x1033c <__addsf3+0x18>
   10334:	31 f4       	brne	.+12     	; 0x10342 <__addsf3+0x1e>
   10336:	9f 3f       	cpi	r25, 0xFF	; 255
   10338:	11 f4       	brne	.+4      	; 0x1033e <__addsf3+0x1a>
   1033a:	1e f4       	brtc	.+6      	; 0x10342 <__addsf3+0x1e>
   1033c:	5e c1       	rjmp	.+700    	; 0x105fa <__fp_nan>
   1033e:	0e f4       	brtc	.+2      	; 0x10342 <__addsf3+0x1e>
   10340:	e0 95       	com	r30
   10342:	e7 fb       	bst	r30, 7
   10344:	54 c1       	rjmp	.+680    	; 0x105ee <__fp_inf>

00010346 <__addsf3x>:
   10346:	e9 2f       	mov	r30, r25
   10348:	b3 d1       	rcall	.+870    	; 0x106b0 <__fp_split3>
   1034a:	80 f3       	brcs	.-32     	; 0x1032c <__addsf3+0x8>
   1034c:	ba 17       	cp	r27, r26
   1034e:	62 07       	cpc	r22, r18
   10350:	73 07       	cpc	r23, r19
   10352:	84 07       	cpc	r24, r20
   10354:	95 07       	cpc	r25, r21
   10356:	18 f0       	brcs	.+6      	; 0x1035e <__addsf3x+0x18>
   10358:	71 f4       	brne	.+28     	; 0x10376 <__addsf3x+0x30>
   1035a:	9e f5       	brtc	.+102    	; 0x103c2 <__addsf3x+0x7c>
   1035c:	cb c1       	rjmp	.+918    	; 0x106f4 <__fp_zero>
   1035e:	0e f4       	brtc	.+2      	; 0x10362 <__addsf3x+0x1c>
   10360:	e0 95       	com	r30
   10362:	0b 2e       	mov	r0, r27
   10364:	ba 2f       	mov	r27, r26
   10366:	a0 2d       	mov	r26, r0
   10368:	0b 01       	movw	r0, r22
   1036a:	b9 01       	movw	r22, r18
   1036c:	90 01       	movw	r18, r0
   1036e:	0c 01       	movw	r0, r24
   10370:	ca 01       	movw	r24, r20
   10372:	a0 01       	movw	r20, r0
   10374:	11 24       	eor	r1, r1
   10376:	ff 27       	eor	r31, r31
   10378:	59 1b       	sub	r21, r25
   1037a:	99 f0       	breq	.+38     	; 0x103a2 <__addsf3x+0x5c>
   1037c:	59 3f       	cpi	r21, 0xF9	; 249
   1037e:	50 f4       	brcc	.+20     	; 0x10394 <__addsf3x+0x4e>
   10380:	50 3e       	cpi	r21, 0xE0	; 224
   10382:	68 f1       	brcs	.+90     	; 0x103de <__addsf3x+0x98>
   10384:	1a 16       	cp	r1, r26
   10386:	f0 40       	sbci	r31, 0x00	; 0
   10388:	a2 2f       	mov	r26, r18
   1038a:	23 2f       	mov	r18, r19
   1038c:	34 2f       	mov	r19, r20
   1038e:	44 27       	eor	r20, r20
   10390:	58 5f       	subi	r21, 0xF8	; 248
   10392:	f3 cf       	rjmp	.-26     	; 0x1037a <__addsf3x+0x34>
   10394:	46 95       	lsr	r20
   10396:	37 95       	ror	r19
   10398:	27 95       	ror	r18
   1039a:	a7 95       	ror	r26
   1039c:	f0 40       	sbci	r31, 0x00	; 0
   1039e:	53 95       	inc	r21
   103a0:	c9 f7       	brne	.-14     	; 0x10394 <__addsf3x+0x4e>
   103a2:	7e f4       	brtc	.+30     	; 0x103c2 <__addsf3x+0x7c>
   103a4:	1f 16       	cp	r1, r31
   103a6:	ba 0b       	sbc	r27, r26
   103a8:	62 0b       	sbc	r22, r18
   103aa:	73 0b       	sbc	r23, r19
   103ac:	84 0b       	sbc	r24, r20
   103ae:	ba f0       	brmi	.+46     	; 0x103de <__addsf3x+0x98>
   103b0:	91 50       	subi	r25, 0x01	; 1
   103b2:	a1 f0       	breq	.+40     	; 0x103dc <__addsf3x+0x96>
   103b4:	ff 0f       	add	r31, r31
   103b6:	bb 1f       	adc	r27, r27
   103b8:	66 1f       	adc	r22, r22
   103ba:	77 1f       	adc	r23, r23
   103bc:	88 1f       	adc	r24, r24
   103be:	c2 f7       	brpl	.-16     	; 0x103b0 <__addsf3x+0x6a>
   103c0:	0e c0       	rjmp	.+28     	; 0x103de <__addsf3x+0x98>
   103c2:	ba 0f       	add	r27, r26
   103c4:	62 1f       	adc	r22, r18
   103c6:	73 1f       	adc	r23, r19
   103c8:	84 1f       	adc	r24, r20
   103ca:	48 f4       	brcc	.+18     	; 0x103de <__addsf3x+0x98>
   103cc:	87 95       	ror	r24
   103ce:	77 95       	ror	r23
   103d0:	67 95       	ror	r22
   103d2:	b7 95       	ror	r27
   103d4:	f7 95       	ror	r31
   103d6:	9e 3f       	cpi	r25, 0xFE	; 254
   103d8:	08 f0       	brcs	.+2      	; 0x103dc <__addsf3x+0x96>
   103da:	b3 cf       	rjmp	.-154    	; 0x10342 <__addsf3+0x1e>
   103dc:	93 95       	inc	r25
   103de:	88 0f       	add	r24, r24
   103e0:	08 f0       	brcs	.+2      	; 0x103e4 <__addsf3x+0x9e>
   103e2:	99 27       	eor	r25, r25
   103e4:	ee 0f       	add	r30, r30
   103e6:	97 95       	ror	r25
   103e8:	87 95       	ror	r24
   103ea:	08 95       	ret

000103ec <__cmpsf2>:
   103ec:	dc d0       	rcall	.+440    	; 0x105a6 <__fp_cmp>
   103ee:	08 f4       	brcc	.+2      	; 0x103f2 <__cmpsf2+0x6>
   103f0:	81 e0       	ldi	r24, 0x01	; 1
   103f2:	08 95       	ret

000103f4 <cos>:
   103f4:	14 d1       	rcall	.+552    	; 0x1061e <__fp_rempio2>
   103f6:	e3 95       	inc	r30
   103f8:	4a c1       	rjmp	.+660    	; 0x1068e <__fp_sinus>

000103fa <__divsf3>:
   103fa:	0c d0       	rcall	.+24     	; 0x10414 <__divsf3x>
   103fc:	37 c1       	rjmp	.+622    	; 0x1066c <__fp_round>
   103fe:	07 d1       	rcall	.+526    	; 0x1060e <__fp_pscB>
   10400:	40 f0       	brcs	.+16     	; 0x10412 <__divsf3+0x18>
   10402:	fe d0       	rcall	.+508    	; 0x10600 <__fp_pscA>
   10404:	30 f0       	brcs	.+12     	; 0x10412 <__divsf3+0x18>
   10406:	21 f4       	brne	.+8      	; 0x10410 <__divsf3+0x16>
   10408:	5f 3f       	cpi	r21, 0xFF	; 255
   1040a:	19 f0       	breq	.+6      	; 0x10412 <__divsf3+0x18>
   1040c:	f0 c0       	rjmp	.+480    	; 0x105ee <__fp_inf>
   1040e:	51 11       	cpse	r21, r1
   10410:	72 c1       	rjmp	.+740    	; 0x106f6 <__fp_szero>
   10412:	f3 c0       	rjmp	.+486    	; 0x105fa <__fp_nan>

00010414 <__divsf3x>:
   10414:	4d d1       	rcall	.+666    	; 0x106b0 <__fp_split3>
   10416:	98 f3       	brcs	.-26     	; 0x103fe <__divsf3+0x4>

00010418 <__divsf3_pse>:
   10418:	99 23       	and	r25, r25
   1041a:	c9 f3       	breq	.-14     	; 0x1040e <__divsf3+0x14>
   1041c:	55 23       	and	r21, r21
   1041e:	b1 f3       	breq	.-20     	; 0x1040c <__divsf3+0x12>
   10420:	95 1b       	sub	r25, r21
   10422:	55 0b       	sbc	r21, r21
   10424:	bb 27       	eor	r27, r27
   10426:	aa 27       	eor	r26, r26
   10428:	62 17       	cp	r22, r18
   1042a:	73 07       	cpc	r23, r19
   1042c:	84 07       	cpc	r24, r20
   1042e:	38 f0       	brcs	.+14     	; 0x1043e <__divsf3_pse+0x26>
   10430:	9f 5f       	subi	r25, 0xFF	; 255
   10432:	5f 4f       	sbci	r21, 0xFF	; 255
   10434:	22 0f       	add	r18, r18
   10436:	33 1f       	adc	r19, r19
   10438:	44 1f       	adc	r20, r20
   1043a:	aa 1f       	adc	r26, r26
   1043c:	a9 f3       	breq	.-22     	; 0x10428 <__divsf3_pse+0x10>
   1043e:	33 d0       	rcall	.+102    	; 0x104a6 <__divsf3_pse+0x8e>
   10440:	0e 2e       	mov	r0, r30
   10442:	3a f0       	brmi	.+14     	; 0x10452 <__divsf3_pse+0x3a>
   10444:	e0 e8       	ldi	r30, 0x80	; 128
   10446:	30 d0       	rcall	.+96     	; 0x104a8 <__divsf3_pse+0x90>
   10448:	91 50       	subi	r25, 0x01	; 1
   1044a:	50 40       	sbci	r21, 0x00	; 0
   1044c:	e6 95       	lsr	r30
   1044e:	00 1c       	adc	r0, r0
   10450:	ca f7       	brpl	.-14     	; 0x10444 <__divsf3_pse+0x2c>
   10452:	29 d0       	rcall	.+82     	; 0x104a6 <__divsf3_pse+0x8e>
   10454:	fe 2f       	mov	r31, r30
   10456:	27 d0       	rcall	.+78     	; 0x104a6 <__divsf3_pse+0x8e>
   10458:	66 0f       	add	r22, r22
   1045a:	77 1f       	adc	r23, r23
   1045c:	88 1f       	adc	r24, r24
   1045e:	bb 1f       	adc	r27, r27
   10460:	26 17       	cp	r18, r22
   10462:	37 07       	cpc	r19, r23
   10464:	48 07       	cpc	r20, r24
   10466:	ab 07       	cpc	r26, r27
   10468:	b0 e8       	ldi	r27, 0x80	; 128
   1046a:	09 f0       	breq	.+2      	; 0x1046e <__divsf3_pse+0x56>
   1046c:	bb 0b       	sbc	r27, r27
   1046e:	80 2d       	mov	r24, r0
   10470:	bf 01       	movw	r22, r30
   10472:	ff 27       	eor	r31, r31
   10474:	93 58       	subi	r25, 0x83	; 131
   10476:	5f 4f       	sbci	r21, 0xFF	; 255
   10478:	2a f0       	brmi	.+10     	; 0x10484 <__divsf3_pse+0x6c>
   1047a:	9e 3f       	cpi	r25, 0xFE	; 254
   1047c:	51 05       	cpc	r21, r1
   1047e:	68 f0       	brcs	.+26     	; 0x1049a <__divsf3_pse+0x82>
   10480:	b6 c0       	rjmp	.+364    	; 0x105ee <__fp_inf>
   10482:	39 c1       	rjmp	.+626    	; 0x106f6 <__fp_szero>
   10484:	5f 3f       	cpi	r21, 0xFF	; 255
   10486:	ec f3       	brlt	.-6      	; 0x10482 <__divsf3_pse+0x6a>
   10488:	98 3e       	cpi	r25, 0xE8	; 232
   1048a:	dc f3       	brlt	.-10     	; 0x10482 <__divsf3_pse+0x6a>
   1048c:	86 95       	lsr	r24
   1048e:	77 95       	ror	r23
   10490:	67 95       	ror	r22
   10492:	b7 95       	ror	r27
   10494:	f7 95       	ror	r31
   10496:	9f 5f       	subi	r25, 0xFF	; 255
   10498:	c9 f7       	brne	.-14     	; 0x1048c <__divsf3_pse+0x74>
   1049a:	88 0f       	add	r24, r24
   1049c:	91 1d       	adc	r25, r1
   1049e:	96 95       	lsr	r25
   104a0:	87 95       	ror	r24
   104a2:	97 f9       	bld	r25, 7
   104a4:	08 95       	ret
   104a6:	e1 e0       	ldi	r30, 0x01	; 1
   104a8:	66 0f       	add	r22, r22
   104aa:	77 1f       	adc	r23, r23
   104ac:	88 1f       	adc	r24, r24
   104ae:	bb 1f       	adc	r27, r27
   104b0:	62 17       	cp	r22, r18
   104b2:	73 07       	cpc	r23, r19
   104b4:	84 07       	cpc	r24, r20
   104b6:	ba 07       	cpc	r27, r26
   104b8:	20 f0       	brcs	.+8      	; 0x104c2 <__divsf3_pse+0xaa>
   104ba:	62 1b       	sub	r22, r18
   104bc:	73 0b       	sbc	r23, r19
   104be:	84 0b       	sbc	r24, r20
   104c0:	ba 0b       	sbc	r27, r26
   104c2:	ee 1f       	adc	r30, r30
   104c4:	88 f7       	brcc	.-30     	; 0x104a8 <__divsf3_pse+0x90>
   104c6:	e0 95       	com	r30
   104c8:	08 95       	ret

000104ca <__fixsfsi>:
   104ca:	04 d0       	rcall	.+8      	; 0x104d4 <__fixunssfsi>
   104cc:	68 94       	set
   104ce:	b1 11       	cpse	r27, r1
   104d0:	12 c1       	rjmp	.+548    	; 0x106f6 <__fp_szero>
   104d2:	08 95       	ret

000104d4 <__fixunssfsi>:
   104d4:	f5 d0       	rcall	.+490    	; 0x106c0 <__fp_splitA>
   104d6:	88 f0       	brcs	.+34     	; 0x104fa <__fixunssfsi+0x26>
   104d8:	9f 57       	subi	r25, 0x7F	; 127
   104da:	90 f0       	brcs	.+36     	; 0x10500 <__fixunssfsi+0x2c>
   104dc:	b9 2f       	mov	r27, r25
   104de:	99 27       	eor	r25, r25
   104e0:	b7 51       	subi	r27, 0x17	; 23
   104e2:	a0 f0       	brcs	.+40     	; 0x1050c <__fixunssfsi+0x38>
   104e4:	d1 f0       	breq	.+52     	; 0x1051a <__fixunssfsi+0x46>
   104e6:	66 0f       	add	r22, r22
   104e8:	77 1f       	adc	r23, r23
   104ea:	88 1f       	adc	r24, r24
   104ec:	99 1f       	adc	r25, r25
   104ee:	1a f0       	brmi	.+6      	; 0x104f6 <__fixunssfsi+0x22>
   104f0:	ba 95       	dec	r27
   104f2:	c9 f7       	brne	.-14     	; 0x104e6 <__fixunssfsi+0x12>
   104f4:	12 c0       	rjmp	.+36     	; 0x1051a <__fixunssfsi+0x46>
   104f6:	b1 30       	cpi	r27, 0x01	; 1
   104f8:	81 f0       	breq	.+32     	; 0x1051a <__fixunssfsi+0x46>
   104fa:	fc d0       	rcall	.+504    	; 0x106f4 <__fp_zero>
   104fc:	b1 e0       	ldi	r27, 0x01	; 1
   104fe:	08 95       	ret
   10500:	f9 c0       	rjmp	.+498    	; 0x106f4 <__fp_zero>
   10502:	67 2f       	mov	r22, r23
   10504:	78 2f       	mov	r23, r24
   10506:	88 27       	eor	r24, r24
   10508:	b8 5f       	subi	r27, 0xF8	; 248
   1050a:	39 f0       	breq	.+14     	; 0x1051a <__fixunssfsi+0x46>
   1050c:	b9 3f       	cpi	r27, 0xF9	; 249
   1050e:	cc f3       	brlt	.-14     	; 0x10502 <__fixunssfsi+0x2e>
   10510:	86 95       	lsr	r24
   10512:	77 95       	ror	r23
   10514:	67 95       	ror	r22
   10516:	b3 95       	inc	r27
   10518:	d9 f7       	brne	.-10     	; 0x10510 <__fixunssfsi+0x3c>
   1051a:	3e f4       	brtc	.+14     	; 0x1052a <__fixunssfsi+0x56>
   1051c:	90 95       	com	r25
   1051e:	80 95       	com	r24
   10520:	70 95       	com	r23
   10522:	61 95       	neg	r22
   10524:	7f 4f       	sbci	r23, 0xFF	; 255
   10526:	8f 4f       	sbci	r24, 0xFF	; 255
   10528:	9f 4f       	sbci	r25, 0xFF	; 255
   1052a:	08 95       	ret

0001052c <__floatunsisf>:
   1052c:	e8 94       	clt
   1052e:	09 c0       	rjmp	.+18     	; 0x10542 <__floatsisf+0x12>

00010530 <__floatsisf>:
   10530:	97 fb       	bst	r25, 7
   10532:	3e f4       	brtc	.+14     	; 0x10542 <__floatsisf+0x12>
   10534:	90 95       	com	r25
   10536:	80 95       	com	r24
   10538:	70 95       	com	r23
   1053a:	61 95       	neg	r22
   1053c:	7f 4f       	sbci	r23, 0xFF	; 255
   1053e:	8f 4f       	sbci	r24, 0xFF	; 255
   10540:	9f 4f       	sbci	r25, 0xFF	; 255
   10542:	99 23       	and	r25, r25
   10544:	a9 f0       	breq	.+42     	; 0x10570 <__floatsisf+0x40>
   10546:	f9 2f       	mov	r31, r25
   10548:	96 e9       	ldi	r25, 0x96	; 150
   1054a:	bb 27       	eor	r27, r27
   1054c:	93 95       	inc	r25
   1054e:	f6 95       	lsr	r31
   10550:	87 95       	ror	r24
   10552:	77 95       	ror	r23
   10554:	67 95       	ror	r22
   10556:	b7 95       	ror	r27
   10558:	f1 11       	cpse	r31, r1
   1055a:	f8 cf       	rjmp	.-16     	; 0x1054c <__floatsisf+0x1c>
   1055c:	fa f4       	brpl	.+62     	; 0x1059c <__floatsisf+0x6c>
   1055e:	bb 0f       	add	r27, r27
   10560:	11 f4       	brne	.+4      	; 0x10566 <__floatsisf+0x36>
   10562:	60 ff       	sbrs	r22, 0
   10564:	1b c0       	rjmp	.+54     	; 0x1059c <__floatsisf+0x6c>
   10566:	6f 5f       	subi	r22, 0xFF	; 255
   10568:	7f 4f       	sbci	r23, 0xFF	; 255
   1056a:	8f 4f       	sbci	r24, 0xFF	; 255
   1056c:	9f 4f       	sbci	r25, 0xFF	; 255
   1056e:	16 c0       	rjmp	.+44     	; 0x1059c <__floatsisf+0x6c>
   10570:	88 23       	and	r24, r24
   10572:	11 f0       	breq	.+4      	; 0x10578 <__floatsisf+0x48>
   10574:	96 e9       	ldi	r25, 0x96	; 150
   10576:	11 c0       	rjmp	.+34     	; 0x1059a <__floatsisf+0x6a>
   10578:	77 23       	and	r23, r23
   1057a:	21 f0       	breq	.+8      	; 0x10584 <__floatsisf+0x54>
   1057c:	9e e8       	ldi	r25, 0x8E	; 142
   1057e:	87 2f       	mov	r24, r23
   10580:	76 2f       	mov	r23, r22
   10582:	05 c0       	rjmp	.+10     	; 0x1058e <__floatsisf+0x5e>
   10584:	66 23       	and	r22, r22
   10586:	71 f0       	breq	.+28     	; 0x105a4 <__floatsisf+0x74>
   10588:	96 e8       	ldi	r25, 0x86	; 134
   1058a:	86 2f       	mov	r24, r22
   1058c:	70 e0       	ldi	r23, 0x00	; 0
   1058e:	60 e0       	ldi	r22, 0x00	; 0
   10590:	2a f0       	brmi	.+10     	; 0x1059c <__floatsisf+0x6c>
   10592:	9a 95       	dec	r25
   10594:	66 0f       	add	r22, r22
   10596:	77 1f       	adc	r23, r23
   10598:	88 1f       	adc	r24, r24
   1059a:	da f7       	brpl	.-10     	; 0x10592 <__floatsisf+0x62>
   1059c:	88 0f       	add	r24, r24
   1059e:	96 95       	lsr	r25
   105a0:	87 95       	ror	r24
   105a2:	97 f9       	bld	r25, 7
   105a4:	08 95       	ret

000105a6 <__fp_cmp>:
   105a6:	99 0f       	add	r25, r25
   105a8:	00 08       	sbc	r0, r0
   105aa:	55 0f       	add	r21, r21
   105ac:	aa 0b       	sbc	r26, r26
   105ae:	e0 e8       	ldi	r30, 0x80	; 128
   105b0:	fe ef       	ldi	r31, 0xFE	; 254
   105b2:	16 16       	cp	r1, r22
   105b4:	17 06       	cpc	r1, r23
   105b6:	e8 07       	cpc	r30, r24
   105b8:	f9 07       	cpc	r31, r25
   105ba:	c0 f0       	brcs	.+48     	; 0x105ec <__fp_cmp+0x46>
   105bc:	12 16       	cp	r1, r18
   105be:	13 06       	cpc	r1, r19
   105c0:	e4 07       	cpc	r30, r20
   105c2:	f5 07       	cpc	r31, r21
   105c4:	98 f0       	brcs	.+38     	; 0x105ec <__fp_cmp+0x46>
   105c6:	62 1b       	sub	r22, r18
   105c8:	73 0b       	sbc	r23, r19
   105ca:	84 0b       	sbc	r24, r20
   105cc:	95 0b       	sbc	r25, r21
   105ce:	39 f4       	brne	.+14     	; 0x105de <__fp_cmp+0x38>
   105d0:	0a 26       	eor	r0, r26
   105d2:	61 f0       	breq	.+24     	; 0x105ec <__fp_cmp+0x46>
   105d4:	23 2b       	or	r18, r19
   105d6:	24 2b       	or	r18, r20
   105d8:	25 2b       	or	r18, r21
   105da:	21 f4       	brne	.+8      	; 0x105e4 <__fp_cmp+0x3e>
   105dc:	08 95       	ret
   105de:	0a 26       	eor	r0, r26
   105e0:	09 f4       	brne	.+2      	; 0x105e4 <__fp_cmp+0x3e>
   105e2:	a1 40       	sbci	r26, 0x01	; 1
   105e4:	a6 95       	lsr	r26
   105e6:	8f ef       	ldi	r24, 0xFF	; 255
   105e8:	81 1d       	adc	r24, r1
   105ea:	81 1d       	adc	r24, r1
   105ec:	08 95       	ret

000105ee <__fp_inf>:
   105ee:	97 f9       	bld	r25, 7
   105f0:	9f 67       	ori	r25, 0x7F	; 127
   105f2:	80 e8       	ldi	r24, 0x80	; 128
   105f4:	70 e0       	ldi	r23, 0x00	; 0
   105f6:	60 e0       	ldi	r22, 0x00	; 0
   105f8:	08 95       	ret

000105fa <__fp_nan>:
   105fa:	9f ef       	ldi	r25, 0xFF	; 255
   105fc:	80 ec       	ldi	r24, 0xC0	; 192
   105fe:	08 95       	ret

00010600 <__fp_pscA>:
   10600:	00 24       	eor	r0, r0
   10602:	0a 94       	dec	r0
   10604:	16 16       	cp	r1, r22
   10606:	17 06       	cpc	r1, r23
   10608:	18 06       	cpc	r1, r24
   1060a:	09 06       	cpc	r0, r25
   1060c:	08 95       	ret

0001060e <__fp_pscB>:
   1060e:	00 24       	eor	r0, r0
   10610:	0a 94       	dec	r0
   10612:	12 16       	cp	r1, r18
   10614:	13 06       	cpc	r1, r19
   10616:	14 06       	cpc	r1, r20
   10618:	05 06       	cpc	r0, r21
   1061a:	08 95       	ret
   1061c:	ee cf       	rjmp	.-36     	; 0x105fa <__fp_nan>

0001061e <__fp_rempio2>:
   1061e:	50 d0       	rcall	.+160    	; 0x106c0 <__fp_splitA>
   10620:	e8 f3       	brcs	.-6      	; 0x1061c <__fp_pscB+0xe>
   10622:	e8 94       	clt
   10624:	e0 e0       	ldi	r30, 0x00	; 0
   10626:	bb 27       	eor	r27, r27
   10628:	9f 57       	subi	r25, 0x7F	; 127
   1062a:	f0 f0       	brcs	.+60     	; 0x10668 <__fp_rempio2+0x4a>
   1062c:	2a ed       	ldi	r18, 0xDA	; 218
   1062e:	3f e0       	ldi	r19, 0x0F	; 15
   10630:	49 ec       	ldi	r20, 0xC9	; 201
   10632:	06 c0       	rjmp	.+12     	; 0x10640 <__fp_rempio2+0x22>
   10634:	ee 0f       	add	r30, r30
   10636:	bb 0f       	add	r27, r27
   10638:	66 1f       	adc	r22, r22
   1063a:	77 1f       	adc	r23, r23
   1063c:	88 1f       	adc	r24, r24
   1063e:	28 f0       	brcs	.+10     	; 0x1064a <__fp_rempio2+0x2c>
   10640:	b2 3a       	cpi	r27, 0xA2	; 162
   10642:	62 07       	cpc	r22, r18
   10644:	73 07       	cpc	r23, r19
   10646:	84 07       	cpc	r24, r20
   10648:	28 f0       	brcs	.+10     	; 0x10654 <__fp_rempio2+0x36>
   1064a:	b2 5a       	subi	r27, 0xA2	; 162
   1064c:	62 0b       	sbc	r22, r18
   1064e:	73 0b       	sbc	r23, r19
   10650:	84 0b       	sbc	r24, r20
   10652:	e3 95       	inc	r30
   10654:	9a 95       	dec	r25
   10656:	72 f7       	brpl	.-36     	; 0x10634 <__fp_rempio2+0x16>
   10658:	80 38       	cpi	r24, 0x80	; 128
   1065a:	30 f4       	brcc	.+12     	; 0x10668 <__fp_rempio2+0x4a>
   1065c:	9a 95       	dec	r25
   1065e:	bb 0f       	add	r27, r27
   10660:	66 1f       	adc	r22, r22
   10662:	77 1f       	adc	r23, r23
   10664:	88 1f       	adc	r24, r24
   10666:	d2 f7       	brpl	.-12     	; 0x1065c <__fp_rempio2+0x3e>
   10668:	90 48       	sbci	r25, 0x80	; 128
   1066a:	37 c1       	rjmp	.+622    	; 0x108da <__fp_mpack_finite>

0001066c <__fp_round>:
   1066c:	09 2e       	mov	r0, r25
   1066e:	03 94       	inc	r0
   10670:	00 0c       	add	r0, r0
   10672:	11 f4       	brne	.+4      	; 0x10678 <__fp_round+0xc>
   10674:	88 23       	and	r24, r24
   10676:	52 f0       	brmi	.+20     	; 0x1068c <__fp_round+0x20>
   10678:	bb 0f       	add	r27, r27
   1067a:	40 f4       	brcc	.+16     	; 0x1068c <__fp_round+0x20>
   1067c:	bf 2b       	or	r27, r31
   1067e:	11 f4       	brne	.+4      	; 0x10684 <__fp_round+0x18>
   10680:	60 ff       	sbrs	r22, 0
   10682:	04 c0       	rjmp	.+8      	; 0x1068c <__fp_round+0x20>
   10684:	6f 5f       	subi	r22, 0xFF	; 255
   10686:	7f 4f       	sbci	r23, 0xFF	; 255
   10688:	8f 4f       	sbci	r24, 0xFF	; 255
   1068a:	9f 4f       	sbci	r25, 0xFF	; 255
   1068c:	08 95       	ret

0001068e <__fp_sinus>:
   1068e:	ef 93       	push	r30
   10690:	e0 ff       	sbrs	r30, 0
   10692:	06 c0       	rjmp	.+12     	; 0x106a0 <__fp_sinus+0x12>
   10694:	a2 ea       	ldi	r26, 0xA2	; 162
   10696:	2a ed       	ldi	r18, 0xDA	; 218
   10698:	3f e0       	ldi	r19, 0x0F	; 15
   1069a:	49 ec       	ldi	r20, 0xC9	; 201
   1069c:	5f eb       	ldi	r21, 0xBF	; 191
   1069e:	53 de       	rcall	.-858    	; 0x10346 <__addsf3x>
   106a0:	e5 df       	rcall	.-54     	; 0x1066c <__fp_round>
   106a2:	0f 90       	pop	r0
   106a4:	03 94       	inc	r0
   106a6:	01 fc       	sbrc	r0, 1
   106a8:	90 58       	subi	r25, 0x80	; 128
   106aa:	e8 e1       	ldi	r30, 0x18	; 24
   106ac:	f2 e0       	ldi	r31, 0x02	; 2
   106ae:	46 c1       	rjmp	.+652    	; 0x1093c <__fp_powsodd>

000106b0 <__fp_split3>:
   106b0:	57 fd       	sbrc	r21, 7
   106b2:	90 58       	subi	r25, 0x80	; 128
   106b4:	44 0f       	add	r20, r20
   106b6:	55 1f       	adc	r21, r21
   106b8:	59 f0       	breq	.+22     	; 0x106d0 <__fp_splitA+0x10>
   106ba:	5f 3f       	cpi	r21, 0xFF	; 255
   106bc:	71 f0       	breq	.+28     	; 0x106da <__fp_splitA+0x1a>
   106be:	47 95       	ror	r20

000106c0 <__fp_splitA>:
   106c0:	88 0f       	add	r24, r24
   106c2:	97 fb       	bst	r25, 7
   106c4:	99 1f       	adc	r25, r25
   106c6:	61 f0       	breq	.+24     	; 0x106e0 <__fp_splitA+0x20>
   106c8:	9f 3f       	cpi	r25, 0xFF	; 255
   106ca:	79 f0       	breq	.+30     	; 0x106ea <__fp_splitA+0x2a>
   106cc:	87 95       	ror	r24
   106ce:	08 95       	ret
   106d0:	12 16       	cp	r1, r18
   106d2:	13 06       	cpc	r1, r19
   106d4:	14 06       	cpc	r1, r20
   106d6:	55 1f       	adc	r21, r21
   106d8:	f2 cf       	rjmp	.-28     	; 0x106be <__fp_split3+0xe>
   106da:	46 95       	lsr	r20
   106dc:	f1 df       	rcall	.-30     	; 0x106c0 <__fp_splitA>
   106de:	08 c0       	rjmp	.+16     	; 0x106f0 <__fp_splitA+0x30>
   106e0:	16 16       	cp	r1, r22
   106e2:	17 06       	cpc	r1, r23
   106e4:	18 06       	cpc	r1, r24
   106e6:	99 1f       	adc	r25, r25
   106e8:	f1 cf       	rjmp	.-30     	; 0x106cc <__fp_splitA+0xc>
   106ea:	86 95       	lsr	r24
   106ec:	71 05       	cpc	r23, r1
   106ee:	61 05       	cpc	r22, r1
   106f0:	08 94       	sec
   106f2:	08 95       	ret

000106f4 <__fp_zero>:
   106f4:	e8 94       	clt

000106f6 <__fp_szero>:
   106f6:	bb 27       	eor	r27, r27
   106f8:	66 27       	eor	r22, r22
   106fa:	77 27       	eor	r23, r23
   106fc:	cb 01       	movw	r24, r22
   106fe:	97 f9       	bld	r25, 7
   10700:	08 95       	ret

00010702 <__gesf2>:
   10702:	51 df       	rcall	.-350    	; 0x105a6 <__fp_cmp>
   10704:	08 f4       	brcc	.+2      	; 0x10708 <__gesf2+0x6>
   10706:	8f ef       	ldi	r24, 0xFF	; 255
   10708:	08 95       	ret

0001070a <__mulsf3>:
   1070a:	0b d0       	rcall	.+22     	; 0x10722 <__mulsf3x>
   1070c:	af cf       	rjmp	.-162    	; 0x1066c <__fp_round>
   1070e:	78 df       	rcall	.-272    	; 0x10600 <__fp_pscA>
   10710:	28 f0       	brcs	.+10     	; 0x1071c <__mulsf3+0x12>
   10712:	7d df       	rcall	.-262    	; 0x1060e <__fp_pscB>
   10714:	18 f0       	brcs	.+6      	; 0x1071c <__mulsf3+0x12>
   10716:	95 23       	and	r25, r21
   10718:	09 f0       	breq	.+2      	; 0x1071c <__mulsf3+0x12>
   1071a:	69 cf       	rjmp	.-302    	; 0x105ee <__fp_inf>
   1071c:	6e cf       	rjmp	.-292    	; 0x105fa <__fp_nan>
   1071e:	11 24       	eor	r1, r1
   10720:	ea cf       	rjmp	.-44     	; 0x106f6 <__fp_szero>

00010722 <__mulsf3x>:
   10722:	c6 df       	rcall	.-116    	; 0x106b0 <__fp_split3>
   10724:	a0 f3       	brcs	.-24     	; 0x1070e <__mulsf3+0x4>

00010726 <__mulsf3_pse>:
   10726:	95 9f       	mul	r25, r21
   10728:	d1 f3       	breq	.-12     	; 0x1071e <__mulsf3+0x14>
   1072a:	95 0f       	add	r25, r21
   1072c:	50 e0       	ldi	r21, 0x00	; 0
   1072e:	55 1f       	adc	r21, r21
   10730:	62 9f       	mul	r22, r18
   10732:	f0 01       	movw	r30, r0
   10734:	72 9f       	mul	r23, r18
   10736:	bb 27       	eor	r27, r27
   10738:	f0 0d       	add	r31, r0
   1073a:	b1 1d       	adc	r27, r1
   1073c:	63 9f       	mul	r22, r19
   1073e:	aa 27       	eor	r26, r26
   10740:	f0 0d       	add	r31, r0
   10742:	b1 1d       	adc	r27, r1
   10744:	aa 1f       	adc	r26, r26
   10746:	64 9f       	mul	r22, r20
   10748:	66 27       	eor	r22, r22
   1074a:	b0 0d       	add	r27, r0
   1074c:	a1 1d       	adc	r26, r1
   1074e:	66 1f       	adc	r22, r22
   10750:	82 9f       	mul	r24, r18
   10752:	22 27       	eor	r18, r18
   10754:	b0 0d       	add	r27, r0
   10756:	a1 1d       	adc	r26, r1
   10758:	62 1f       	adc	r22, r18
   1075a:	73 9f       	mul	r23, r19
   1075c:	b0 0d       	add	r27, r0
   1075e:	a1 1d       	adc	r26, r1
   10760:	62 1f       	adc	r22, r18
   10762:	83 9f       	mul	r24, r19
   10764:	a0 0d       	add	r26, r0
   10766:	61 1d       	adc	r22, r1
   10768:	22 1f       	adc	r18, r18
   1076a:	74 9f       	mul	r23, r20
   1076c:	33 27       	eor	r19, r19
   1076e:	a0 0d       	add	r26, r0
   10770:	61 1d       	adc	r22, r1
   10772:	23 1f       	adc	r18, r19
   10774:	84 9f       	mul	r24, r20
   10776:	60 0d       	add	r22, r0
   10778:	21 1d       	adc	r18, r1
   1077a:	82 2f       	mov	r24, r18
   1077c:	76 2f       	mov	r23, r22
   1077e:	6a 2f       	mov	r22, r26
   10780:	11 24       	eor	r1, r1
   10782:	9f 57       	subi	r25, 0x7F	; 127
   10784:	50 40       	sbci	r21, 0x00	; 0
   10786:	8a f0       	brmi	.+34     	; 0x107aa <__mulsf3_pse+0x84>
   10788:	e1 f0       	breq	.+56     	; 0x107c2 <__mulsf3_pse+0x9c>
   1078a:	88 23       	and	r24, r24
   1078c:	4a f0       	brmi	.+18     	; 0x107a0 <__mulsf3_pse+0x7a>
   1078e:	ee 0f       	add	r30, r30
   10790:	ff 1f       	adc	r31, r31
   10792:	bb 1f       	adc	r27, r27
   10794:	66 1f       	adc	r22, r22
   10796:	77 1f       	adc	r23, r23
   10798:	88 1f       	adc	r24, r24
   1079a:	91 50       	subi	r25, 0x01	; 1
   1079c:	50 40       	sbci	r21, 0x00	; 0
   1079e:	a9 f7       	brne	.-22     	; 0x1078a <__mulsf3_pse+0x64>
   107a0:	9e 3f       	cpi	r25, 0xFE	; 254
   107a2:	51 05       	cpc	r21, r1
   107a4:	70 f0       	brcs	.+28     	; 0x107c2 <__mulsf3_pse+0x9c>
   107a6:	23 cf       	rjmp	.-442    	; 0x105ee <__fp_inf>
   107a8:	a6 cf       	rjmp	.-180    	; 0x106f6 <__fp_szero>
   107aa:	5f 3f       	cpi	r21, 0xFF	; 255
   107ac:	ec f3       	brlt	.-6      	; 0x107a8 <__mulsf3_pse+0x82>
   107ae:	98 3e       	cpi	r25, 0xE8	; 232
   107b0:	dc f3       	brlt	.-10     	; 0x107a8 <__mulsf3_pse+0x82>
   107b2:	86 95       	lsr	r24
   107b4:	77 95       	ror	r23
   107b6:	67 95       	ror	r22
   107b8:	b7 95       	ror	r27
   107ba:	f7 95       	ror	r31
   107bc:	e7 95       	ror	r30
   107be:	9f 5f       	subi	r25, 0xFF	; 255
   107c0:	c1 f7       	brne	.-16     	; 0x107b2 <__mulsf3_pse+0x8c>
   107c2:	fe 2b       	or	r31, r30
   107c4:	88 0f       	add	r24, r24
   107c6:	91 1d       	adc	r25, r1
   107c8:	96 95       	lsr	r25
   107ca:	87 95       	ror	r24
   107cc:	97 f9       	bld	r25, 7
   107ce:	08 95       	ret

000107d0 <pow>:
   107d0:	fa 01       	movw	r30, r20
   107d2:	ee 0f       	add	r30, r30
   107d4:	ff 1f       	adc	r31, r31
   107d6:	30 96       	adiw	r30, 0x00	; 0
   107d8:	21 05       	cpc	r18, r1
   107da:	31 05       	cpc	r19, r1
   107dc:	99 f1       	breq	.+102    	; 0x10844 <pow+0x74>
   107de:	61 15       	cp	r22, r1
   107e0:	71 05       	cpc	r23, r1
   107e2:	61 f4       	brne	.+24     	; 0x107fc <pow+0x2c>
   107e4:	80 38       	cpi	r24, 0x80	; 128
   107e6:	bf e3       	ldi	r27, 0x3F	; 63
   107e8:	9b 07       	cpc	r25, r27
   107ea:	49 f1       	breq	.+82     	; 0x1083e <pow+0x6e>
   107ec:	68 94       	set
   107ee:	90 38       	cpi	r25, 0x80	; 128
   107f0:	81 05       	cpc	r24, r1
   107f2:	61 f0       	breq	.+24     	; 0x1080c <pow+0x3c>
   107f4:	80 38       	cpi	r24, 0x80	; 128
   107f6:	bf ef       	ldi	r27, 0xFF	; 255
   107f8:	9b 07       	cpc	r25, r27
   107fa:	41 f0       	breq	.+16     	; 0x1080c <pow+0x3c>
   107fc:	99 23       	and	r25, r25
   107fe:	42 f5       	brpl	.+80     	; 0x10850 <pow+0x80>
   10800:	ff 3f       	cpi	r31, 0xFF	; 255
   10802:	e1 05       	cpc	r30, r1
   10804:	31 05       	cpc	r19, r1
   10806:	21 05       	cpc	r18, r1
   10808:	11 f1       	breq	.+68     	; 0x1084e <pow+0x7e>
   1080a:	e8 94       	clt
   1080c:	08 94       	sec
   1080e:	e7 95       	ror	r30
   10810:	d9 01       	movw	r26, r18
   10812:	aa 23       	and	r26, r26
   10814:	29 f4       	brne	.+10     	; 0x10820 <pow+0x50>
   10816:	ab 2f       	mov	r26, r27
   10818:	be 2f       	mov	r27, r30
   1081a:	f8 5f       	subi	r31, 0xF8	; 248
   1081c:	d0 f3       	brcs	.-12     	; 0x10812 <pow+0x42>
   1081e:	10 c0       	rjmp	.+32     	; 0x10840 <pow+0x70>
   10820:	ff 5f       	subi	r31, 0xFF	; 255
   10822:	70 f4       	brcc	.+28     	; 0x10840 <pow+0x70>
   10824:	a6 95       	lsr	r26
   10826:	e0 f7       	brcc	.-8      	; 0x10820 <pow+0x50>
   10828:	f7 39       	cpi	r31, 0x97	; 151
   1082a:	50 f0       	brcs	.+20     	; 0x10840 <pow+0x70>
   1082c:	19 f0       	breq	.+6      	; 0x10834 <pow+0x64>
   1082e:	ff 3a       	cpi	r31, 0xAF	; 175
   10830:	38 f4       	brcc	.+14     	; 0x10840 <pow+0x70>
   10832:	9f 77       	andi	r25, 0x7F	; 127
   10834:	9f 93       	push	r25
   10836:	0c d0       	rcall	.+24     	; 0x10850 <pow+0x80>
   10838:	0f 90       	pop	r0
   1083a:	07 fc       	sbrc	r0, 7
   1083c:	90 58       	subi	r25, 0x80	; 128
   1083e:	08 95       	ret
   10840:	3e f0       	brts	.+14     	; 0x10850 <pow+0x80>
   10842:	db ce       	rjmp	.-586    	; 0x105fa <__fp_nan>
   10844:	60 e0       	ldi	r22, 0x00	; 0
   10846:	70 e0       	ldi	r23, 0x00	; 0
   10848:	80 e8       	ldi	r24, 0x80	; 128
   1084a:	9f e3       	ldi	r25, 0x3F	; 63
   1084c:	08 95       	ret
   1084e:	4f e7       	ldi	r20, 0x7F	; 127
   10850:	9f 77       	andi	r25, 0x7F	; 127
   10852:	5f 93       	push	r21
   10854:	4f 93       	push	r20
   10856:	3f 93       	push	r19
   10858:	2f 93       	push	r18
   1085a:	c3 d0       	rcall	.+390    	; 0x109e2 <log>
   1085c:	2f 91       	pop	r18
   1085e:	3f 91       	pop	r19
   10860:	4f 91       	pop	r20
   10862:	5f 91       	pop	r21
   10864:	52 df       	rcall	.-348    	; 0x1070a <__mulsf3>
   10866:	0b c0       	rjmp	.+22     	; 0x1087e <exp>

00010868 <sin>:
   10868:	9f 93       	push	r25
   1086a:	d9 de       	rcall	.-590    	; 0x1061e <__fp_rempio2>
   1086c:	0f 90       	pop	r0
   1086e:	07 fc       	sbrc	r0, 7
   10870:	ee 5f       	subi	r30, 0xFE	; 254
   10872:	0d cf       	rjmp	.-486    	; 0x1068e <__fp_sinus>
   10874:	19 f4       	brne	.+6      	; 0x1087c <sin+0x14>
   10876:	0e f0       	brts	.+2      	; 0x1087a <sin+0x12>
   10878:	ba ce       	rjmp	.-652    	; 0x105ee <__fp_inf>
   1087a:	3c cf       	rjmp	.-392    	; 0x106f4 <__fp_zero>
   1087c:	be ce       	rjmp	.-644    	; 0x105fa <__fp_nan>

0001087e <exp>:
   1087e:	20 df       	rcall	.-448    	; 0x106c0 <__fp_splitA>
   10880:	c8 f3       	brcs	.-14     	; 0x10874 <sin+0xc>
   10882:	96 38       	cpi	r25, 0x86	; 134
   10884:	c0 f7       	brcc	.-16     	; 0x10876 <sin+0xe>
   10886:	07 f8       	bld	r0, 7
   10888:	0f 92       	push	r0
   1088a:	e8 94       	clt
   1088c:	2b e3       	ldi	r18, 0x3B	; 59
   1088e:	3a ea       	ldi	r19, 0xAA	; 170
   10890:	48 eb       	ldi	r20, 0xB8	; 184
   10892:	5f e7       	ldi	r21, 0x7F	; 127
   10894:	48 df       	rcall	.-368    	; 0x10726 <__mulsf3_pse>
   10896:	0f 92       	push	r0
   10898:	0f 92       	push	r0
   1089a:	0f 92       	push	r0
   1089c:	4d b7       	in	r20, 0x3d	; 61
   1089e:	5e b7       	in	r21, 0x3e	; 62
   108a0:	0f 92       	push	r0
   108a2:	df d0       	rcall	.+446    	; 0x10a62 <modf>
   108a4:	e6 e3       	ldi	r30, 0x36	; 54
   108a6:	f2 e0       	ldi	r31, 0x02	; 2
   108a8:	24 d0       	rcall	.+72     	; 0x108f2 <__fp_powser>
   108aa:	4f 91       	pop	r20
   108ac:	5f 91       	pop	r21
   108ae:	ef 91       	pop	r30
   108b0:	ff 91       	pop	r31
   108b2:	e5 95       	asr	r30
   108b4:	ee 1f       	adc	r30, r30
   108b6:	ff 1f       	adc	r31, r31
   108b8:	49 f0       	breq	.+18     	; 0x108cc <exp+0x4e>
   108ba:	fe 57       	subi	r31, 0x7E	; 126
   108bc:	e0 68       	ori	r30, 0x80	; 128
   108be:	44 27       	eor	r20, r20
   108c0:	ee 0f       	add	r30, r30
   108c2:	44 1f       	adc	r20, r20
   108c4:	fa 95       	dec	r31
   108c6:	e1 f7       	brne	.-8      	; 0x108c0 <exp+0x42>
   108c8:	41 95       	neg	r20
   108ca:	55 0b       	sbc	r21, r21
   108cc:	51 d0       	rcall	.+162    	; 0x10970 <ldexp>
   108ce:	0f 90       	pop	r0
   108d0:	07 fe       	sbrs	r0, 7
   108d2:	45 c0       	rjmp	.+138    	; 0x1095e <inverse>
   108d4:	08 95       	ret

000108d6 <__fp_mpack>:
   108d6:	9f 3f       	cpi	r25, 0xFF	; 255
   108d8:	31 f0       	breq	.+12     	; 0x108e6 <__fp_mpack_finite+0xc>

000108da <__fp_mpack_finite>:
   108da:	91 50       	subi	r25, 0x01	; 1
   108dc:	20 f4       	brcc	.+8      	; 0x108e6 <__fp_mpack_finite+0xc>
   108de:	87 95       	ror	r24
   108e0:	77 95       	ror	r23
   108e2:	67 95       	ror	r22
   108e4:	b7 95       	ror	r27
   108e6:	88 0f       	add	r24, r24
   108e8:	91 1d       	adc	r25, r1
   108ea:	96 95       	lsr	r25
   108ec:	87 95       	ror	r24
   108ee:	97 f9       	bld	r25, 7
   108f0:	08 95       	ret

000108f2 <__fp_powser>:
   108f2:	df 93       	push	r29
   108f4:	cf 93       	push	r28
   108f6:	1f 93       	push	r17
   108f8:	0f 93       	push	r16
   108fa:	ff 92       	push	r15
   108fc:	ef 92       	push	r14
   108fe:	df 92       	push	r13
   10900:	7b 01       	movw	r14, r22
   10902:	8c 01       	movw	r16, r24
   10904:	68 94       	set
   10906:	05 c0       	rjmp	.+10     	; 0x10912 <__fp_powser+0x20>
   10908:	da 2e       	mov	r13, r26
   1090a:	ef 01       	movw	r28, r30
   1090c:	0a df       	rcall	.-492    	; 0x10722 <__mulsf3x>
   1090e:	fe 01       	movw	r30, r28
   10910:	e8 94       	clt
   10912:	a5 91       	lpm	r26, Z+
   10914:	25 91       	lpm	r18, Z+
   10916:	35 91       	lpm	r19, Z+
   10918:	45 91       	lpm	r20, Z+
   1091a:	55 91       	lpm	r21, Z+
   1091c:	ae f3       	brts	.-22     	; 0x10908 <__fp_powser+0x16>
   1091e:	ef 01       	movw	r28, r30
   10920:	12 dd       	rcall	.-1500   	; 0x10346 <__addsf3x>
   10922:	fe 01       	movw	r30, r28
   10924:	97 01       	movw	r18, r14
   10926:	a8 01       	movw	r20, r16
   10928:	da 94       	dec	r13
   1092a:	79 f7       	brne	.-34     	; 0x1090a <__fp_powser+0x18>
   1092c:	df 90       	pop	r13
   1092e:	ef 90       	pop	r14
   10930:	ff 90       	pop	r15
   10932:	0f 91       	pop	r16
   10934:	1f 91       	pop	r17
   10936:	cf 91       	pop	r28
   10938:	df 91       	pop	r29
   1093a:	08 95       	ret

0001093c <__fp_powsodd>:
   1093c:	9f 93       	push	r25
   1093e:	8f 93       	push	r24
   10940:	7f 93       	push	r23
   10942:	6f 93       	push	r22
   10944:	ff 93       	push	r31
   10946:	ef 93       	push	r30
   10948:	9b 01       	movw	r18, r22
   1094a:	ac 01       	movw	r20, r24
   1094c:	de de       	rcall	.-580    	; 0x1070a <__mulsf3>
   1094e:	ef 91       	pop	r30
   10950:	ff 91       	pop	r31
   10952:	cf df       	rcall	.-98     	; 0x108f2 <__fp_powser>
   10954:	2f 91       	pop	r18
   10956:	3f 91       	pop	r19
   10958:	4f 91       	pop	r20
   1095a:	5f 91       	pop	r21
   1095c:	d6 ce       	rjmp	.-596    	; 0x1070a <__mulsf3>

0001095e <inverse>:
   1095e:	9b 01       	movw	r18, r22
   10960:	ac 01       	movw	r20, r24
   10962:	60 e0       	ldi	r22, 0x00	; 0
   10964:	70 e0       	ldi	r23, 0x00	; 0
   10966:	80 e8       	ldi	r24, 0x80	; 128
   10968:	9f e3       	ldi	r25, 0x3F	; 63
   1096a:	47 cd       	rjmp	.-1394   	; 0x103fa <__divsf3>
   1096c:	40 ce       	rjmp	.-896    	; 0x105ee <__fp_inf>
   1096e:	b3 cf       	rjmp	.-154    	; 0x108d6 <__fp_mpack>

00010970 <ldexp>:
   10970:	a7 de       	rcall	.-690    	; 0x106c0 <__fp_splitA>
   10972:	e8 f3       	brcs	.-6      	; 0x1096e <inverse+0x10>
   10974:	99 23       	and	r25, r25
   10976:	d9 f3       	breq	.-10     	; 0x1096e <inverse+0x10>
   10978:	94 0f       	add	r25, r20
   1097a:	51 1d       	adc	r21, r1
   1097c:	bb f3       	brvs	.-18     	; 0x1096c <inverse+0xe>
   1097e:	91 50       	subi	r25, 0x01	; 1
   10980:	50 40       	sbci	r21, 0x00	; 0
   10982:	94 f0       	brlt	.+36     	; 0x109a8 <ldexp+0x38>
   10984:	59 f0       	breq	.+22     	; 0x1099c <ldexp+0x2c>
   10986:	88 23       	and	r24, r24
   10988:	32 f0       	brmi	.+12     	; 0x10996 <ldexp+0x26>
   1098a:	66 0f       	add	r22, r22
   1098c:	77 1f       	adc	r23, r23
   1098e:	88 1f       	adc	r24, r24
   10990:	91 50       	subi	r25, 0x01	; 1
   10992:	50 40       	sbci	r21, 0x00	; 0
   10994:	c1 f7       	brne	.-16     	; 0x10986 <ldexp+0x16>
   10996:	9e 3f       	cpi	r25, 0xFE	; 254
   10998:	51 05       	cpc	r21, r1
   1099a:	44 f7       	brge	.-48     	; 0x1096c <inverse+0xe>
   1099c:	88 0f       	add	r24, r24
   1099e:	91 1d       	adc	r25, r1
   109a0:	96 95       	lsr	r25
   109a2:	87 95       	ror	r24
   109a4:	97 f9       	bld	r25, 7
   109a6:	08 95       	ret
   109a8:	5f 3f       	cpi	r21, 0xFF	; 255
   109aa:	ac f0       	brlt	.+42     	; 0x109d6 <ldexp+0x66>
   109ac:	98 3e       	cpi	r25, 0xE8	; 232
   109ae:	9c f0       	brlt	.+38     	; 0x109d6 <ldexp+0x66>
   109b0:	bb 27       	eor	r27, r27
   109b2:	86 95       	lsr	r24
   109b4:	77 95       	ror	r23
   109b6:	67 95       	ror	r22
   109b8:	b7 95       	ror	r27
   109ba:	08 f4       	brcc	.+2      	; 0x109be <ldexp+0x4e>
   109bc:	b1 60       	ori	r27, 0x01	; 1
   109be:	93 95       	inc	r25
   109c0:	c1 f7       	brne	.-16     	; 0x109b2 <ldexp+0x42>
   109c2:	bb 0f       	add	r27, r27
   109c4:	58 f7       	brcc	.-42     	; 0x1099c <ldexp+0x2c>
   109c6:	11 f4       	brne	.+4      	; 0x109cc <ldexp+0x5c>
   109c8:	60 ff       	sbrs	r22, 0
   109ca:	e8 cf       	rjmp	.-48     	; 0x1099c <ldexp+0x2c>
   109cc:	6f 5f       	subi	r22, 0xFF	; 255
   109ce:	7f 4f       	sbci	r23, 0xFF	; 255
   109d0:	8f 4f       	sbci	r24, 0xFF	; 255
   109d2:	9f 4f       	sbci	r25, 0xFF	; 255
   109d4:	e3 cf       	rjmp	.-58     	; 0x1099c <ldexp+0x2c>
   109d6:	8f ce       	rjmp	.-738    	; 0x106f6 <__fp_szero>
   109d8:	0e f0       	brts	.+2      	; 0x109dc <ldexp+0x6c>
   109da:	7d cf       	rjmp	.-262    	; 0x108d6 <__fp_mpack>
   109dc:	0e ce       	rjmp	.-996    	; 0x105fa <__fp_nan>
   109de:	68 94       	set
   109e0:	06 ce       	rjmp	.-1012   	; 0x105ee <__fp_inf>

000109e2 <log>:
   109e2:	6e de       	rcall	.-804    	; 0x106c0 <__fp_splitA>
   109e4:	c8 f3       	brcs	.-14     	; 0x109d8 <ldexp+0x68>
   109e6:	99 23       	and	r25, r25
   109e8:	d1 f3       	breq	.-12     	; 0x109de <ldexp+0x6e>
   109ea:	c6 f3       	brts	.-16     	; 0x109dc <ldexp+0x6c>
   109ec:	df 93       	push	r29
   109ee:	cf 93       	push	r28
   109f0:	1f 93       	push	r17
   109f2:	0f 93       	push	r16
   109f4:	ff 92       	push	r15
   109f6:	c9 2f       	mov	r28, r25
   109f8:	dd 27       	eor	r29, r29
   109fa:	88 23       	and	r24, r24
   109fc:	2a f0       	brmi	.+10     	; 0x10a08 <log+0x26>
   109fe:	21 97       	sbiw	r28, 0x01	; 1
   10a00:	66 0f       	add	r22, r22
   10a02:	77 1f       	adc	r23, r23
   10a04:	88 1f       	adc	r24, r24
   10a06:	da f7       	brpl	.-10     	; 0x109fe <log+0x1c>
   10a08:	20 e0       	ldi	r18, 0x00	; 0
   10a0a:	30 e0       	ldi	r19, 0x00	; 0
   10a0c:	40 e8       	ldi	r20, 0x80	; 128
   10a0e:	5f eb       	ldi	r21, 0xBF	; 191
   10a10:	9f e3       	ldi	r25, 0x3F	; 63
   10a12:	88 39       	cpi	r24, 0x98	; 152
   10a14:	20 f0       	brcs	.+8      	; 0x10a1e <log+0x3c>
   10a16:	80 3e       	cpi	r24, 0xE0	; 224
   10a18:	30 f0       	brcs	.+12     	; 0x10a26 <log+0x44>
   10a1a:	21 96       	adiw	r28, 0x01	; 1
   10a1c:	8f 77       	andi	r24, 0x7F	; 127
   10a1e:	82 dc       	rcall	.-1788   	; 0x10324 <__addsf3>
   10a20:	ee e5       	ldi	r30, 0x5E	; 94
   10a22:	f2 e0       	ldi	r31, 0x02	; 2
   10a24:	03 c0       	rjmp	.+6      	; 0x10a2c <log+0x4a>
   10a26:	7e dc       	rcall	.-1796   	; 0x10324 <__addsf3>
   10a28:	eb e8       	ldi	r30, 0x8B	; 139
   10a2a:	f2 e0       	ldi	r31, 0x02	; 2
   10a2c:	62 df       	rcall	.-316    	; 0x108f2 <__fp_powser>
   10a2e:	8b 01       	movw	r16, r22
   10a30:	be 01       	movw	r22, r28
   10a32:	ec 01       	movw	r28, r24
   10a34:	fb 2e       	mov	r15, r27
   10a36:	6f 57       	subi	r22, 0x7F	; 127
   10a38:	71 09       	sbc	r23, r1
   10a3a:	75 95       	asr	r23
   10a3c:	77 1f       	adc	r23, r23
   10a3e:	88 0b       	sbc	r24, r24
   10a40:	99 0b       	sbc	r25, r25
   10a42:	76 dd       	rcall	.-1300   	; 0x10530 <__floatsisf>
   10a44:	28 e1       	ldi	r18, 0x18	; 24
   10a46:	32 e7       	ldi	r19, 0x72	; 114
   10a48:	41 e3       	ldi	r20, 0x31	; 49
   10a4a:	5f e3       	ldi	r21, 0x3F	; 63
   10a4c:	6a de       	rcall	.-812    	; 0x10722 <__mulsf3x>
   10a4e:	af 2d       	mov	r26, r15
   10a50:	98 01       	movw	r18, r16
   10a52:	ae 01       	movw	r20, r28
   10a54:	ff 90       	pop	r15
   10a56:	0f 91       	pop	r16
   10a58:	1f 91       	pop	r17
   10a5a:	cf 91       	pop	r28
   10a5c:	df 91       	pop	r29
   10a5e:	73 dc       	rcall	.-1818   	; 0x10346 <__addsf3x>
   10a60:	05 ce       	rjmp	.-1014   	; 0x1066c <__fp_round>

00010a62 <modf>:
   10a62:	fa 01       	movw	r30, r20
   10a64:	dc 01       	movw	r26, r24
   10a66:	aa 0f       	add	r26, r26
   10a68:	bb 1f       	adc	r27, r27
   10a6a:	9b 01       	movw	r18, r22
   10a6c:	ac 01       	movw	r20, r24
   10a6e:	bf 57       	subi	r27, 0x7F	; 127
   10a70:	28 f4       	brcc	.+10     	; 0x10a7c <modf+0x1a>
   10a72:	22 27       	eor	r18, r18
   10a74:	33 27       	eor	r19, r19
   10a76:	44 27       	eor	r20, r20
   10a78:	50 78       	andi	r21, 0x80	; 128
   10a7a:	1f c0       	rjmp	.+62     	; 0x10aba <modf+0x58>
   10a7c:	b7 51       	subi	r27, 0x17	; 23
   10a7e:	88 f4       	brcc	.+34     	; 0x10aa2 <modf+0x40>
   10a80:	ab 2f       	mov	r26, r27
   10a82:	00 24       	eor	r0, r0
   10a84:	46 95       	lsr	r20
   10a86:	37 95       	ror	r19
   10a88:	27 95       	ror	r18
   10a8a:	01 1c       	adc	r0, r1
   10a8c:	a3 95       	inc	r26
   10a8e:	d2 f3       	brmi	.-12     	; 0x10a84 <modf+0x22>
   10a90:	00 20       	and	r0, r0
   10a92:	69 f0       	breq	.+26     	; 0x10aae <modf+0x4c>
   10a94:	22 0f       	add	r18, r18
   10a96:	33 1f       	adc	r19, r19
   10a98:	44 1f       	adc	r20, r20
   10a9a:	b3 95       	inc	r27
   10a9c:	da f3       	brmi	.-10     	; 0x10a94 <modf+0x32>
   10a9e:	0d d0       	rcall	.+26     	; 0x10aba <modf+0x58>
   10aa0:	40 cc       	rjmp	.-1920   	; 0x10322 <__subsf3>
   10aa2:	61 30       	cpi	r22, 0x01	; 1
   10aa4:	71 05       	cpc	r23, r1
   10aa6:	a0 e8       	ldi	r26, 0x80	; 128
   10aa8:	8a 07       	cpc	r24, r26
   10aaa:	b9 46       	sbci	r27, 0x69	; 105
   10aac:	30 f4       	brcc	.+12     	; 0x10aba <modf+0x58>
   10aae:	9b 01       	movw	r18, r22
   10ab0:	ac 01       	movw	r20, r24
   10ab2:	66 27       	eor	r22, r22
   10ab4:	77 27       	eor	r23, r23
   10ab6:	88 27       	eor	r24, r24
   10ab8:	90 78       	andi	r25, 0x80	; 128
   10aba:	30 96       	adiw	r30, 0x00	; 0
   10abc:	21 f0       	breq	.+8      	; 0x10ac6 <modf+0x64>
   10abe:	20 83       	st	Z, r18
   10ac0:	31 83       	std	Z+1, r19	; 0x01
   10ac2:	42 83       	std	Z+2, r20	; 0x02
   10ac4:	53 83       	std	Z+3, r21	; 0x03
   10ac6:	08 95       	ret

00010ac8 <__mulsi3>:
   10ac8:	db 01       	movw	r26, r22
   10aca:	8f 93       	push	r24
   10acc:	9f 93       	push	r25
   10ace:	93 d0       	rcall	.+294    	; 0x10bf6 <__muluhisi3>
   10ad0:	bf 91       	pop	r27
   10ad2:	af 91       	pop	r26
   10ad4:	a2 9f       	mul	r26, r18
   10ad6:	80 0d       	add	r24, r0
   10ad8:	91 1d       	adc	r25, r1
   10ada:	a3 9f       	mul	r26, r19
   10adc:	90 0d       	add	r25, r0
   10ade:	b2 9f       	mul	r27, r18
   10ae0:	90 0d       	add	r25, r0
   10ae2:	11 24       	eor	r1, r1
   10ae4:	08 95       	ret

00010ae6 <__udivmodhi4>:
   10ae6:	aa 1b       	sub	r26, r26
   10ae8:	bb 1b       	sub	r27, r27
   10aea:	51 e1       	ldi	r21, 0x11	; 17
   10aec:	07 c0       	rjmp	.+14     	; 0x10afc <__udivmodhi4_ep>

00010aee <__udivmodhi4_loop>:
   10aee:	aa 1f       	adc	r26, r26
   10af0:	bb 1f       	adc	r27, r27
   10af2:	a6 17       	cp	r26, r22
   10af4:	b7 07       	cpc	r27, r23
   10af6:	10 f0       	brcs	.+4      	; 0x10afc <__udivmodhi4_ep>
   10af8:	a6 1b       	sub	r26, r22
   10afa:	b7 0b       	sbc	r27, r23

00010afc <__udivmodhi4_ep>:
   10afc:	88 1f       	adc	r24, r24
   10afe:	99 1f       	adc	r25, r25
   10b00:	5a 95       	dec	r21
   10b02:	a9 f7       	brne	.-22     	; 0x10aee <__udivmodhi4_loop>
   10b04:	80 95       	com	r24
   10b06:	90 95       	com	r25
   10b08:	bc 01       	movw	r22, r24
   10b0a:	cd 01       	movw	r24, r26
   10b0c:	08 95       	ret

00010b0e <__divmodhi4>:
   10b0e:	97 fb       	bst	r25, 7
   10b10:	07 2e       	mov	r0, r23
   10b12:	16 f4       	brtc	.+4      	; 0x10b18 <__divmodhi4+0xa>
   10b14:	00 94       	com	r0
   10b16:	06 d0       	rcall	.+12     	; 0x10b24 <__divmodhi4_neg1>
   10b18:	77 fd       	sbrc	r23, 7
   10b1a:	08 d0       	rcall	.+16     	; 0x10b2c <__divmodhi4_neg2>
   10b1c:	e4 df       	rcall	.-56     	; 0x10ae6 <__udivmodhi4>
   10b1e:	07 fc       	sbrc	r0, 7
   10b20:	05 d0       	rcall	.+10     	; 0x10b2c <__divmodhi4_neg2>
   10b22:	3e f4       	brtc	.+14     	; 0x10b32 <__divmodhi4_exit>

00010b24 <__divmodhi4_neg1>:
   10b24:	90 95       	com	r25
   10b26:	81 95       	neg	r24
   10b28:	9f 4f       	sbci	r25, 0xFF	; 255
   10b2a:	08 95       	ret

00010b2c <__divmodhi4_neg2>:
   10b2c:	70 95       	com	r23
   10b2e:	61 95       	neg	r22
   10b30:	7f 4f       	sbci	r23, 0xFF	; 255

00010b32 <__divmodhi4_exit>:
   10b32:	08 95       	ret

00010b34 <__udivmodsi4>:
   10b34:	a1 e2       	ldi	r26, 0x21	; 33
   10b36:	1a 2e       	mov	r1, r26
   10b38:	aa 1b       	sub	r26, r26
   10b3a:	bb 1b       	sub	r27, r27
   10b3c:	fd 01       	movw	r30, r26
   10b3e:	0d c0       	rjmp	.+26     	; 0x10b5a <__udivmodsi4_ep>

00010b40 <__udivmodsi4_loop>:
   10b40:	aa 1f       	adc	r26, r26
   10b42:	bb 1f       	adc	r27, r27
   10b44:	ee 1f       	adc	r30, r30
   10b46:	ff 1f       	adc	r31, r31
   10b48:	a2 17       	cp	r26, r18
   10b4a:	b3 07       	cpc	r27, r19
   10b4c:	e4 07       	cpc	r30, r20
   10b4e:	f5 07       	cpc	r31, r21
   10b50:	20 f0       	brcs	.+8      	; 0x10b5a <__udivmodsi4_ep>
   10b52:	a2 1b       	sub	r26, r18
   10b54:	b3 0b       	sbc	r27, r19
   10b56:	e4 0b       	sbc	r30, r20
   10b58:	f5 0b       	sbc	r31, r21

00010b5a <__udivmodsi4_ep>:
   10b5a:	66 1f       	adc	r22, r22
   10b5c:	77 1f       	adc	r23, r23
   10b5e:	88 1f       	adc	r24, r24
   10b60:	99 1f       	adc	r25, r25
   10b62:	1a 94       	dec	r1
   10b64:	69 f7       	brne	.-38     	; 0x10b40 <__udivmodsi4_loop>
   10b66:	60 95       	com	r22
   10b68:	70 95       	com	r23
   10b6a:	80 95       	com	r24
   10b6c:	90 95       	com	r25
   10b6e:	9b 01       	movw	r18, r22
   10b70:	ac 01       	movw	r20, r24
   10b72:	bd 01       	movw	r22, r26
   10b74:	cf 01       	movw	r24, r30
   10b76:	08 95       	ret

00010b78 <__divmodsi4>:
   10b78:	05 2e       	mov	r0, r21
   10b7a:	97 fb       	bst	r25, 7
   10b7c:	16 f4       	brtc	.+4      	; 0x10b82 <__divmodsi4+0xa>
   10b7e:	00 94       	com	r0
   10b80:	0f d0       	rcall	.+30     	; 0x10ba0 <__negsi2>
   10b82:	57 fd       	sbrc	r21, 7
   10b84:	05 d0       	rcall	.+10     	; 0x10b90 <__divmodsi4_neg2>
   10b86:	d6 df       	rcall	.-84     	; 0x10b34 <__udivmodsi4>
   10b88:	07 fc       	sbrc	r0, 7
   10b8a:	02 d0       	rcall	.+4      	; 0x10b90 <__divmodsi4_neg2>
   10b8c:	46 f4       	brtc	.+16     	; 0x10b9e <__divmodsi4_exit>
   10b8e:	08 c0       	rjmp	.+16     	; 0x10ba0 <__negsi2>

00010b90 <__divmodsi4_neg2>:
   10b90:	50 95       	com	r21
   10b92:	40 95       	com	r20
   10b94:	30 95       	com	r19
   10b96:	21 95       	neg	r18
   10b98:	3f 4f       	sbci	r19, 0xFF	; 255
   10b9a:	4f 4f       	sbci	r20, 0xFF	; 255
   10b9c:	5f 4f       	sbci	r21, 0xFF	; 255

00010b9e <__divmodsi4_exit>:
   10b9e:	08 95       	ret

00010ba0 <__negsi2>:
   10ba0:	90 95       	com	r25
   10ba2:	80 95       	com	r24
   10ba4:	70 95       	com	r23
   10ba6:	61 95       	neg	r22
   10ba8:	7f 4f       	sbci	r23, 0xFF	; 255
   10baa:	8f 4f       	sbci	r24, 0xFF	; 255
   10bac:	9f 4f       	sbci	r25, 0xFF	; 255
   10bae:	08 95       	ret

00010bb0 <__tablejump2__>:
   10bb0:	ee 0f       	add	r30, r30
   10bb2:	ff 1f       	adc	r31, r31
   10bb4:	88 1f       	adc	r24, r24
   10bb6:	8b bf       	out	0x3b, r24	; 59
   10bb8:	07 90       	elpm	r0, Z+
   10bba:	f6 91       	elpm	r31, Z
   10bbc:	e0 2d       	mov	r30, r0
   10bbe:	19 94       	eijmp

00010bc0 <__mulhisi3>:
   10bc0:	05 d0       	rcall	.+10     	; 0x10bcc <__umulhisi3>
   10bc2:	33 23       	and	r19, r19
   10bc4:	12 f4       	brpl	.+4      	; 0x10bca <__mulhisi3+0xa>
   10bc6:	8a 1b       	sub	r24, r26
   10bc8:	9b 0b       	sbc	r25, r27
   10bca:	10 c0       	rjmp	.+32     	; 0x10bec <__usmulhisi3_tail>

00010bcc <__umulhisi3>:
   10bcc:	a2 9f       	mul	r26, r18
   10bce:	b0 01       	movw	r22, r0
   10bd0:	b3 9f       	mul	r27, r19
   10bd2:	c0 01       	movw	r24, r0
   10bd4:	a3 9f       	mul	r26, r19
   10bd6:	70 0d       	add	r23, r0
   10bd8:	81 1d       	adc	r24, r1
   10bda:	11 24       	eor	r1, r1
   10bdc:	91 1d       	adc	r25, r1
   10bde:	b2 9f       	mul	r27, r18
   10be0:	70 0d       	add	r23, r0
   10be2:	81 1d       	adc	r24, r1
   10be4:	11 24       	eor	r1, r1
   10be6:	91 1d       	adc	r25, r1
   10be8:	08 95       	ret

00010bea <__usmulhisi3>:
   10bea:	f0 df       	rcall	.-32     	; 0x10bcc <__umulhisi3>

00010bec <__usmulhisi3_tail>:
   10bec:	b7 ff       	sbrs	r27, 7
   10bee:	08 95       	ret
   10bf0:	82 1b       	sub	r24, r18
   10bf2:	93 0b       	sbc	r25, r19
   10bf4:	08 95       	ret

00010bf6 <__muluhisi3>:
   10bf6:	ea df       	rcall	.-44     	; 0x10bcc <__umulhisi3>
   10bf8:	a5 9f       	mul	r26, r21
   10bfa:	90 0d       	add	r25, r0
   10bfc:	b4 9f       	mul	r27, r20
   10bfe:	90 0d       	add	r25, r0
   10c00:	a4 9f       	mul	r26, r20
   10c02:	80 0d       	add	r24, r0
   10c04:	91 1d       	adc	r25, r1
   10c06:	11 24       	eor	r1, r1
   10c08:	08 95       	ret

00010c0a <__muldi3>:
   10c0a:	df 93       	push	r29
   10c0c:	cf 93       	push	r28
   10c0e:	1f 93       	push	r17
   10c10:	0f 93       	push	r16
   10c12:	9a 9d       	mul	r25, r10
   10c14:	f0 2d       	mov	r31, r0
   10c16:	21 9f       	mul	r18, r17
   10c18:	f0 0d       	add	r31, r0
   10c1a:	8b 9d       	mul	r24, r11
   10c1c:	f0 0d       	add	r31, r0
   10c1e:	8a 9d       	mul	r24, r10
   10c20:	e0 2d       	mov	r30, r0
   10c22:	f1 0d       	add	r31, r1
   10c24:	03 9f       	mul	r16, r19
   10c26:	f0 0d       	add	r31, r0
   10c28:	02 9f       	mul	r16, r18
   10c2a:	e0 0d       	add	r30, r0
   10c2c:	f1 1d       	adc	r31, r1
   10c2e:	4e 9d       	mul	r20, r14
   10c30:	e0 0d       	add	r30, r0
   10c32:	f1 1d       	adc	r31, r1
   10c34:	5e 9d       	mul	r21, r14
   10c36:	f0 0d       	add	r31, r0
   10c38:	4f 9d       	mul	r20, r15
   10c3a:	f0 0d       	add	r31, r0
   10c3c:	7f 93       	push	r23
   10c3e:	6f 93       	push	r22
   10c40:	bf 92       	push	r11
   10c42:	af 92       	push	r10
   10c44:	5f 93       	push	r21
   10c46:	4f 93       	push	r20
   10c48:	d5 01       	movw	r26, r10
   10c4a:	c0 df       	rcall	.-128    	; 0x10bcc <__umulhisi3>
   10c4c:	8b 01       	movw	r16, r22
   10c4e:	ac 01       	movw	r20, r24
   10c50:	d7 01       	movw	r26, r14
   10c52:	bc df       	rcall	.-136    	; 0x10bcc <__umulhisi3>
   10c54:	eb 01       	movw	r28, r22
   10c56:	e8 0f       	add	r30, r24
   10c58:	f9 1f       	adc	r31, r25
   10c5a:	d6 01       	movw	r26, r12
   10c5c:	1f d0       	rcall	.+62     	; 0x10c9c <__muldi3_6>
   10c5e:	2f 91       	pop	r18
   10c60:	3f 91       	pop	r19
   10c62:	d6 01       	movw	r26, r12
   10c64:	b3 df       	rcall	.-154    	; 0x10bcc <__umulhisi3>
   10c66:	c6 0f       	add	r28, r22
   10c68:	d7 1f       	adc	r29, r23
   10c6a:	e8 1f       	adc	r30, r24
   10c6c:	f9 1f       	adc	r31, r25
   10c6e:	af 91       	pop	r26
   10c70:	bf 91       	pop	r27
   10c72:	14 d0       	rcall	.+40     	; 0x10c9c <__muldi3_6>
   10c74:	2f 91       	pop	r18
   10c76:	3f 91       	pop	r19
   10c78:	a9 df       	rcall	.-174    	; 0x10bcc <__umulhisi3>
   10c7a:	c6 0f       	add	r28, r22
   10c7c:	d7 1f       	adc	r29, r23
   10c7e:	e8 1f       	adc	r30, r24
   10c80:	f9 1f       	adc	r31, r25
   10c82:	d6 01       	movw	r26, r12
   10c84:	a3 df       	rcall	.-186    	; 0x10bcc <__umulhisi3>
   10c86:	e6 0f       	add	r30, r22
   10c88:	f7 1f       	adc	r31, r23
   10c8a:	98 01       	movw	r18, r16
   10c8c:	be 01       	movw	r22, r28
   10c8e:	cf 01       	movw	r24, r30
   10c90:	11 24       	eor	r1, r1
   10c92:	0f 91       	pop	r16
   10c94:	1f 91       	pop	r17
   10c96:	cf 91       	pop	r28
   10c98:	df 91       	pop	r29
   10c9a:	08 95       	ret

00010c9c <__muldi3_6>:
   10c9c:	97 df       	rcall	.-210    	; 0x10bcc <__umulhisi3>
   10c9e:	46 0f       	add	r20, r22
   10ca0:	57 1f       	adc	r21, r23
   10ca2:	c8 1f       	adc	r28, r24
   10ca4:	d9 1f       	adc	r29, r25
   10ca6:	08 f4       	brcc	.+2      	; 0x10caa <__muldi3_6+0xe>
   10ca8:	31 96       	adiw	r30, 0x01	; 1
   10caa:	08 95       	ret

00010cac <__moddi3>:
   10cac:	68 94       	set
   10cae:	01 c0       	rjmp	.+2      	; 0x10cb2 <__divdi3_moddi3>

00010cb0 <__divdi3>:
   10cb0:	e8 94       	clt

00010cb2 <__divdi3_moddi3>:
   10cb2:	f9 2f       	mov	r31, r25
   10cb4:	f1 2b       	or	r31, r17
   10cb6:	0a f0       	brmi	.+2      	; 0x10cba <__divdi3_moddi3+0x8>
   10cb8:	27 c0       	rjmp	.+78     	; 0x10d08 <__udivdi3_umoddi3>
   10cba:	a0 e0       	ldi	r26, 0x00	; 0
   10cbc:	b0 e0       	ldi	r27, 0x00	; 0
   10cbe:	e2 e6       	ldi	r30, 0x62	; 98
   10cc0:	f6 e8       	ldi	r31, 0x86	; 134
   10cc2:	93 c0       	rjmp	.+294    	; 0x10dea <__prologue_saves__+0xc>
   10cc4:	09 2e       	mov	r0, r25
   10cc6:	05 94       	asr	r0
   10cc8:	1a f4       	brpl	.+6      	; 0x10cd0 <__divdi3_moddi3+0x1e>
   10cca:	79 d0       	rcall	.+242    	; 0x10dbe <__negdi2>
   10ccc:	11 23       	and	r17, r17
   10cce:	92 f4       	brpl	.+36     	; 0x10cf4 <__divdi3_moddi3+0x42>
   10cd0:	f0 e8       	ldi	r31, 0x80	; 128
   10cd2:	0f 26       	eor	r0, r31
   10cd4:	ff ef       	ldi	r31, 0xFF	; 255
   10cd6:	e0 94       	com	r14
   10cd8:	f0 94       	com	r15
   10cda:	00 95       	com	r16
   10cdc:	10 95       	com	r17
   10cde:	b0 94       	com	r11
   10ce0:	c0 94       	com	r12
   10ce2:	d0 94       	com	r13
   10ce4:	a1 94       	neg	r10
   10ce6:	bf 0a       	sbc	r11, r31
   10ce8:	cf 0a       	sbc	r12, r31
   10cea:	df 0a       	sbc	r13, r31
   10cec:	ef 0a       	sbc	r14, r31
   10cee:	ff 0a       	sbc	r15, r31
   10cf0:	0f 0b       	sbc	r16, r31
   10cf2:	1f 0b       	sbc	r17, r31
   10cf4:	13 d0       	rcall	.+38     	; 0x10d1c <__udivmod64>
   10cf6:	07 fc       	sbrc	r0, 7
   10cf8:	62 d0       	rcall	.+196    	; 0x10dbe <__negdi2>
   10cfa:	cd b7       	in	r28, 0x3d	; 61
   10cfc:	de b7       	in	r29, 0x3e	; 62
   10cfe:	ec e0       	ldi	r30, 0x0C	; 12
   10d00:	8d c0       	rjmp	.+282    	; 0x10e1c <__epilogue_restores__+0xc>

00010d02 <__umoddi3>:
   10d02:	68 94       	set
   10d04:	01 c0       	rjmp	.+2      	; 0x10d08 <__udivdi3_umoddi3>

00010d06 <__udivdi3>:
   10d06:	e8 94       	clt

00010d08 <__udivdi3_umoddi3>:
   10d08:	8f 92       	push	r8
   10d0a:	9f 92       	push	r9
   10d0c:	cf 93       	push	r28
   10d0e:	df 93       	push	r29
   10d10:	05 d0       	rcall	.+10     	; 0x10d1c <__udivmod64>
   10d12:	df 91       	pop	r29
   10d14:	cf 91       	pop	r28
   10d16:	9f 90       	pop	r9
   10d18:	8f 90       	pop	r8
   10d1a:	08 95       	ret

00010d1c <__udivmod64>:
   10d1c:	88 24       	eor	r8, r8
   10d1e:	99 24       	eor	r9, r9
   10d20:	f4 01       	movw	r30, r8
   10d22:	e4 01       	movw	r28, r8
   10d24:	b0 e4       	ldi	r27, 0x40	; 64
   10d26:	9f 93       	push	r25
   10d28:	aa 27       	eor	r26, r26
   10d2a:	9a 15       	cp	r25, r10
   10d2c:	8b 04       	cpc	r8, r11
   10d2e:	9c 04       	cpc	r9, r12
   10d30:	ed 05       	cpc	r30, r13
   10d32:	fe 05       	cpc	r31, r14
   10d34:	cf 05       	cpc	r28, r15
   10d36:	d0 07       	cpc	r29, r16
   10d38:	a1 07       	cpc	r26, r17
   10d3a:	98 f4       	brcc	.+38     	; 0x10d62 <__udivmod64+0x46>
   10d3c:	ad 2f       	mov	r26, r29
   10d3e:	dc 2f       	mov	r29, r28
   10d40:	cf 2f       	mov	r28, r31
   10d42:	fe 2f       	mov	r31, r30
   10d44:	e9 2d       	mov	r30, r9
   10d46:	98 2c       	mov	r9, r8
   10d48:	89 2e       	mov	r8, r25
   10d4a:	98 2f       	mov	r25, r24
   10d4c:	87 2f       	mov	r24, r23
   10d4e:	76 2f       	mov	r23, r22
   10d50:	65 2f       	mov	r22, r21
   10d52:	54 2f       	mov	r21, r20
   10d54:	43 2f       	mov	r20, r19
   10d56:	32 2f       	mov	r19, r18
   10d58:	22 27       	eor	r18, r18
   10d5a:	b8 50       	subi	r27, 0x08	; 8
   10d5c:	31 f7       	brne	.-52     	; 0x10d2a <__udivmod64+0xe>
   10d5e:	bf 91       	pop	r27
   10d60:	27 c0       	rjmp	.+78     	; 0x10db0 <__udivmod64+0x94>
   10d62:	1b 2e       	mov	r1, r27
   10d64:	bf 91       	pop	r27
   10d66:	bb 27       	eor	r27, r27
   10d68:	22 0f       	add	r18, r18
   10d6a:	33 1f       	adc	r19, r19
   10d6c:	44 1f       	adc	r20, r20
   10d6e:	55 1f       	adc	r21, r21
   10d70:	66 1f       	adc	r22, r22
   10d72:	77 1f       	adc	r23, r23
   10d74:	88 1f       	adc	r24, r24
   10d76:	99 1f       	adc	r25, r25
   10d78:	88 1c       	adc	r8, r8
   10d7a:	99 1c       	adc	r9, r9
   10d7c:	ee 1f       	adc	r30, r30
   10d7e:	ff 1f       	adc	r31, r31
   10d80:	cc 1f       	adc	r28, r28
   10d82:	dd 1f       	adc	r29, r29
   10d84:	aa 1f       	adc	r26, r26
   10d86:	bb 1f       	adc	r27, r27
   10d88:	8a 14       	cp	r8, r10
   10d8a:	9b 04       	cpc	r9, r11
   10d8c:	ec 05       	cpc	r30, r12
   10d8e:	fd 05       	cpc	r31, r13
   10d90:	ce 05       	cpc	r28, r14
   10d92:	df 05       	cpc	r29, r15
   10d94:	a0 07       	cpc	r26, r16
   10d96:	b1 07       	cpc	r27, r17
   10d98:	48 f0       	brcs	.+18     	; 0x10dac <__udivmod64+0x90>
   10d9a:	8a 18       	sub	r8, r10
   10d9c:	9b 08       	sbc	r9, r11
   10d9e:	ec 09       	sbc	r30, r12
   10da0:	fd 09       	sbc	r31, r13
   10da2:	ce 09       	sbc	r28, r14
   10da4:	df 09       	sbc	r29, r15
   10da6:	a0 0b       	sbc	r26, r16
   10da8:	b1 0b       	sbc	r27, r17
   10daa:	21 60       	ori	r18, 0x01	; 1
   10dac:	1a 94       	dec	r1
   10dae:	e1 f6       	brne	.-72     	; 0x10d68 <__udivmod64+0x4c>
   10db0:	2e f4       	brtc	.+10     	; 0x10dbc <__udivmod64+0xa0>
   10db2:	94 01       	movw	r18, r8
   10db4:	af 01       	movw	r20, r30
   10db6:	be 01       	movw	r22, r28
   10db8:	cd 01       	movw	r24, r26
   10dba:	00 0c       	add	r0, r0
   10dbc:	08 95       	ret

00010dbe <__negdi2>:
   10dbe:	60 95       	com	r22
   10dc0:	70 95       	com	r23
   10dc2:	80 95       	com	r24
   10dc4:	90 95       	com	r25
   10dc6:	30 95       	com	r19
   10dc8:	40 95       	com	r20
   10dca:	50 95       	com	r21
   10dcc:	21 95       	neg	r18
   10dce:	3f 4f       	sbci	r19, 0xFF	; 255
   10dd0:	4f 4f       	sbci	r20, 0xFF	; 255
   10dd2:	5f 4f       	sbci	r21, 0xFF	; 255
   10dd4:	6f 4f       	sbci	r22, 0xFF	; 255
   10dd6:	7f 4f       	sbci	r23, 0xFF	; 255
   10dd8:	8f 4f       	sbci	r24, 0xFF	; 255
   10dda:	9f 4f       	sbci	r25, 0xFF	; 255
   10ddc:	08 95       	ret

00010dde <__prologue_saves__>:
   10dde:	2f 92       	push	r2
   10de0:	3f 92       	push	r3
   10de2:	4f 92       	push	r4
   10de4:	5f 92       	push	r5
   10de6:	6f 92       	push	r6
   10de8:	7f 92       	push	r7
   10dea:	8f 92       	push	r8
   10dec:	9f 92       	push	r9
   10dee:	af 92       	push	r10
   10df0:	bf 92       	push	r11
   10df2:	cf 92       	push	r12
   10df4:	df 92       	push	r13
   10df6:	ef 92       	push	r14
   10df8:	ff 92       	push	r15
   10dfa:	0f 93       	push	r16
   10dfc:	1f 93       	push	r17
   10dfe:	cf 93       	push	r28
   10e00:	df 93       	push	r29
   10e02:	cd b7       	in	r28, 0x3d	; 61
   10e04:	de b7       	in	r29, 0x3e	; 62
   10e06:	ca 1b       	sub	r28, r26
   10e08:	db 0b       	sbc	r29, r27
   10e0a:	cd bf       	out	0x3d, r28	; 61
   10e0c:	de bf       	out	0x3e, r29	; 62
   10e0e:	19 94       	eijmp

00010e10 <__epilogue_restores__>:
   10e10:	2a 88       	ldd	r2, Y+18	; 0x12
   10e12:	39 88       	ldd	r3, Y+17	; 0x11
   10e14:	48 88       	ldd	r4, Y+16	; 0x10
   10e16:	5f 84       	ldd	r5, Y+15	; 0x0f
   10e18:	6e 84       	ldd	r6, Y+14	; 0x0e
   10e1a:	7d 84       	ldd	r7, Y+13	; 0x0d
   10e1c:	8c 84       	ldd	r8, Y+12	; 0x0c
   10e1e:	9b 84       	ldd	r9, Y+11	; 0x0b
   10e20:	aa 84       	ldd	r10, Y+10	; 0x0a
   10e22:	b9 84       	ldd	r11, Y+9	; 0x09
   10e24:	c8 84       	ldd	r12, Y+8	; 0x08
   10e26:	df 80       	ldd	r13, Y+7	; 0x07
   10e28:	ee 80       	ldd	r14, Y+6	; 0x06
   10e2a:	fd 80       	ldd	r15, Y+5	; 0x05
   10e2c:	0c 81       	ldd	r16, Y+4	; 0x04
   10e2e:	1b 81       	ldd	r17, Y+3	; 0x03
   10e30:	aa 81       	ldd	r26, Y+2	; 0x02
   10e32:	b9 81       	ldd	r27, Y+1	; 0x01
   10e34:	ce 0f       	add	r28, r30
   10e36:	d1 1d       	adc	r29, r1
   10e38:	cd bf       	out	0x3d, r28	; 61
   10e3a:	de bf       	out	0x3e, r29	; 62
   10e3c:	ed 01       	movw	r28, r26
   10e3e:	08 95       	ret

00010e40 <__ashldi3>:
   10e40:	0f 93       	push	r16
   10e42:	08 30       	cpi	r16, 0x08	; 8
   10e44:	90 f0       	brcs	.+36     	; 0x10e6a <__ashldi3+0x2a>
   10e46:	98 2f       	mov	r25, r24
   10e48:	87 2f       	mov	r24, r23
   10e4a:	76 2f       	mov	r23, r22
   10e4c:	65 2f       	mov	r22, r21
   10e4e:	54 2f       	mov	r21, r20
   10e50:	43 2f       	mov	r20, r19
   10e52:	32 2f       	mov	r19, r18
   10e54:	22 27       	eor	r18, r18
   10e56:	08 50       	subi	r16, 0x08	; 8
   10e58:	f4 cf       	rjmp	.-24     	; 0x10e42 <__ashldi3+0x2>
   10e5a:	22 0f       	add	r18, r18
   10e5c:	33 1f       	adc	r19, r19
   10e5e:	44 1f       	adc	r20, r20
   10e60:	55 1f       	adc	r21, r21
   10e62:	66 1f       	adc	r22, r22
   10e64:	77 1f       	adc	r23, r23
   10e66:	88 1f       	adc	r24, r24
   10e68:	99 1f       	adc	r25, r25
   10e6a:	0a 95       	dec	r16
   10e6c:	b2 f7       	brpl	.-20     	; 0x10e5a <__ashldi3+0x1a>
   10e6e:	0f 91       	pop	r16
   10e70:	08 95       	ret

00010e72 <__ashrdi3>:
   10e72:	97 fb       	bst	r25, 7
   10e74:	10 f8       	bld	r1, 0

00010e76 <__lshrdi3>:
   10e76:	16 94       	lsr	r1
   10e78:	00 08       	sbc	r0, r0
   10e7a:	0f 93       	push	r16
   10e7c:	08 30       	cpi	r16, 0x08	; 8
   10e7e:	98 f0       	brcs	.+38     	; 0x10ea6 <__lshrdi3+0x30>
   10e80:	08 50       	subi	r16, 0x08	; 8
   10e82:	23 2f       	mov	r18, r19
   10e84:	34 2f       	mov	r19, r20
   10e86:	45 2f       	mov	r20, r21
   10e88:	56 2f       	mov	r21, r22
   10e8a:	67 2f       	mov	r22, r23
   10e8c:	78 2f       	mov	r23, r24
   10e8e:	89 2f       	mov	r24, r25
   10e90:	90 2d       	mov	r25, r0
   10e92:	f4 cf       	rjmp	.-24     	; 0x10e7c <__lshrdi3+0x6>
   10e94:	05 94       	asr	r0
   10e96:	97 95       	ror	r25
   10e98:	87 95       	ror	r24
   10e9a:	77 95       	ror	r23
   10e9c:	67 95       	ror	r22
   10e9e:	57 95       	ror	r21
   10ea0:	47 95       	ror	r20
   10ea2:	37 95       	ror	r19
   10ea4:	27 95       	ror	r18
   10ea6:	0a 95       	dec	r16
   10ea8:	aa f7       	brpl	.-22     	; 0x10e94 <__lshrdi3+0x1e>
   10eaa:	0f 91       	pop	r16
   10eac:	08 95       	ret

00010eae <__adddi3>:
   10eae:	2a 0d       	add	r18, r10
   10eb0:	3b 1d       	adc	r19, r11
   10eb2:	4c 1d       	adc	r20, r12
   10eb4:	5d 1d       	adc	r21, r13
   10eb6:	6e 1d       	adc	r22, r14
   10eb8:	7f 1d       	adc	r23, r15
   10eba:	80 1f       	adc	r24, r16
   10ebc:	91 1f       	adc	r25, r17
   10ebe:	08 95       	ret

00010ec0 <__adddi3_s8>:
   10ec0:	00 24       	eor	r0, r0
   10ec2:	a7 fd       	sbrc	r26, 7
   10ec4:	00 94       	com	r0
   10ec6:	2a 0f       	add	r18, r26
   10ec8:	30 1d       	adc	r19, r0
   10eca:	40 1d       	adc	r20, r0
   10ecc:	50 1d       	adc	r21, r0
   10ece:	60 1d       	adc	r22, r0
   10ed0:	70 1d       	adc	r23, r0
   10ed2:	80 1d       	adc	r24, r0
   10ed4:	90 1d       	adc	r25, r0
   10ed6:	08 95       	ret

00010ed8 <__subdi3>:
   10ed8:	2a 19       	sub	r18, r10
   10eda:	3b 09       	sbc	r19, r11
   10edc:	4c 09       	sbc	r20, r12
   10ede:	5d 09       	sbc	r21, r13
   10ee0:	6e 09       	sbc	r22, r14
   10ee2:	7f 09       	sbc	r23, r15
   10ee4:	80 0b       	sbc	r24, r16
   10ee6:	91 0b       	sbc	r25, r17
   10ee8:	08 95       	ret

00010eea <atof>:
   10eea:	66 27       	eor	r22, r22
   10eec:	77 27       	eor	r23, r23
   10eee:	2e c4       	rjmp	.+2140   	; 0x1174c <strtod>

00010ef0 <atoi>:
   10ef0:	fc 01       	movw	r30, r24
   10ef2:	88 27       	eor	r24, r24
   10ef4:	99 27       	eor	r25, r25
   10ef6:	e8 94       	clt
   10ef8:	21 91       	ld	r18, Z+
   10efa:	20 32       	cpi	r18, 0x20	; 32
   10efc:	e9 f3       	breq	.-6      	; 0x10ef8 <atoi+0x8>
   10efe:	29 30       	cpi	r18, 0x09	; 9
   10f00:	10 f0       	brcs	.+4      	; 0x10f06 <atoi+0x16>
   10f02:	2e 30       	cpi	r18, 0x0E	; 14
   10f04:	c8 f3       	brcs	.-14     	; 0x10ef8 <atoi+0x8>
   10f06:	2b 32       	cpi	r18, 0x2B	; 43
   10f08:	39 f0       	breq	.+14     	; 0x10f18 <atoi+0x28>
   10f0a:	2d 32       	cpi	r18, 0x2D	; 45
   10f0c:	31 f4       	brne	.+12     	; 0x10f1a <atoi+0x2a>
   10f0e:	68 94       	set
   10f10:	03 c0       	rjmp	.+6      	; 0x10f18 <atoi+0x28>
   10f12:	95 d1       	rcall	.+810    	; 0x1123e <__mulhi_const_10>
   10f14:	82 0f       	add	r24, r18
   10f16:	91 1d       	adc	r25, r1
   10f18:	21 91       	ld	r18, Z+
   10f1a:	20 53       	subi	r18, 0x30	; 48
   10f1c:	2a 30       	cpi	r18, 0x0A	; 10
   10f1e:	c8 f3       	brcs	.-14     	; 0x10f12 <atoi+0x22>
   10f20:	1e f4       	brtc	.+6      	; 0x10f28 <atoi+0x38>
   10f22:	90 95       	com	r25
   10f24:	81 95       	neg	r24
   10f26:	9f 4f       	sbci	r25, 0xFF	; 255
   10f28:	08 95       	ret

00010f2a <atol>:
   10f2a:	1f 93       	push	r17
   10f2c:	fc 01       	movw	r30, r24
   10f2e:	99 27       	eor	r25, r25
   10f30:	88 27       	eor	r24, r24
   10f32:	bc 01       	movw	r22, r24
   10f34:	e8 94       	clt
   10f36:	11 91       	ld	r17, Z+
   10f38:	10 32       	cpi	r17, 0x20	; 32
   10f3a:	e9 f3       	breq	.-6      	; 0x10f36 <atol+0xc>
   10f3c:	19 30       	cpi	r17, 0x09	; 9
   10f3e:	10 f0       	brcs	.+4      	; 0x10f44 <atol+0x1a>
   10f40:	1e 30       	cpi	r17, 0x0E	; 14
   10f42:	c8 f3       	brcs	.-14     	; 0x10f36 <atol+0xc>
   10f44:	1b 32       	cpi	r17, 0x2B	; 43
   10f46:	49 f0       	breq	.+18     	; 0x10f5a <atol+0x30>
   10f48:	1d 32       	cpi	r17, 0x2D	; 45
   10f4a:	41 f4       	brne	.+16     	; 0x10f5c <atol+0x32>
   10f4c:	68 94       	set
   10f4e:	05 c0       	rjmp	.+10     	; 0x10f5a <atol+0x30>
   10f50:	61 d1       	rcall	.+706    	; 0x11214 <__mulsi_const_10>
   10f52:	61 0f       	add	r22, r17
   10f54:	71 1d       	adc	r23, r1
   10f56:	81 1d       	adc	r24, r1
   10f58:	91 1d       	adc	r25, r1
   10f5a:	11 91       	ld	r17, Z+
   10f5c:	10 53       	subi	r17, 0x30	; 48
   10f5e:	1a 30       	cpi	r17, 0x0A	; 10
   10f60:	b8 f3       	brcs	.-18     	; 0x10f50 <atol+0x26>
   10f62:	3e f4       	brtc	.+14     	; 0x10f72 <atol+0x48>
   10f64:	90 95       	com	r25
   10f66:	80 95       	com	r24
   10f68:	70 95       	com	r23
   10f6a:	61 95       	neg	r22
   10f6c:	7f 4f       	sbci	r23, 0xFF	; 255
   10f6e:	8f 4f       	sbci	r24, 0xFF	; 255
   10f70:	9f 4f       	sbci	r25, 0xFF	; 255
   10f72:	1f 91       	pop	r17
   10f74:	08 95       	ret

00010f76 <__ftoa_engine>:
   10f76:	28 30       	cpi	r18, 0x08	; 8
   10f78:	08 f0       	brcs	.+2      	; 0x10f7c <__ftoa_engine+0x6>
   10f7a:	27 e0       	ldi	r18, 0x07	; 7
   10f7c:	33 27       	eor	r19, r19
   10f7e:	da 01       	movw	r26, r20
   10f80:	99 0f       	add	r25, r25
   10f82:	31 1d       	adc	r19, r1
   10f84:	87 fd       	sbrc	r24, 7
   10f86:	91 60       	ori	r25, 0x01	; 1
   10f88:	00 96       	adiw	r24, 0x00	; 0
   10f8a:	61 05       	cpc	r22, r1
   10f8c:	71 05       	cpc	r23, r1
   10f8e:	39 f4       	brne	.+14     	; 0x10f9e <__ftoa_engine+0x28>
   10f90:	32 60       	ori	r19, 0x02	; 2
   10f92:	2e 5f       	subi	r18, 0xFE	; 254
   10f94:	3d 93       	st	X+, r19
   10f96:	30 e3       	ldi	r19, 0x30	; 48
   10f98:	2a 95       	dec	r18
   10f9a:	e1 f7       	brne	.-8      	; 0x10f94 <__ftoa_engine+0x1e>
   10f9c:	08 95       	ret
   10f9e:	9f 3f       	cpi	r25, 0xFF	; 255
   10fa0:	30 f0       	brcs	.+12     	; 0x10fae <__ftoa_engine+0x38>
   10fa2:	80 38       	cpi	r24, 0x80	; 128
   10fa4:	71 05       	cpc	r23, r1
   10fa6:	61 05       	cpc	r22, r1
   10fa8:	09 f0       	breq	.+2      	; 0x10fac <__ftoa_engine+0x36>
   10faa:	3c 5f       	subi	r19, 0xFC	; 252
   10fac:	3c 5f       	subi	r19, 0xFC	; 252
   10fae:	3d 93       	st	X+, r19
   10fb0:	91 30       	cpi	r25, 0x01	; 1
   10fb2:	08 f0       	brcs	.+2      	; 0x10fb6 <__ftoa_engine+0x40>
   10fb4:	80 68       	ori	r24, 0x80	; 128
   10fb6:	91 1d       	adc	r25, r1
   10fb8:	df 93       	push	r29
   10fba:	cf 93       	push	r28
   10fbc:	1f 93       	push	r17
   10fbe:	0f 93       	push	r16
   10fc0:	ff 92       	push	r15
   10fc2:	ef 92       	push	r14
   10fc4:	19 2f       	mov	r17, r25
   10fc6:	98 7f       	andi	r25, 0xF8	; 248
   10fc8:	96 95       	lsr	r25
   10fca:	e9 2f       	mov	r30, r25
   10fcc:	96 95       	lsr	r25
   10fce:	96 95       	lsr	r25
   10fd0:	e9 0f       	add	r30, r25
   10fd2:	ff 27       	eor	r31, r31
   10fd4:	e6 5e       	subi	r30, 0xE6	; 230
   10fd6:	fc 4f       	sbci	r31, 0xFC	; 252
   10fd8:	99 27       	eor	r25, r25
   10fda:	33 27       	eor	r19, r19
   10fdc:	ee 24       	eor	r14, r14
   10fde:	ff 24       	eor	r15, r15
   10fe0:	a7 01       	movw	r20, r14
   10fe2:	e7 01       	movw	r28, r14
   10fe4:	05 90       	lpm	r0, Z+
   10fe6:	08 94       	sec
   10fe8:	07 94       	ror	r0
   10fea:	28 f4       	brcc	.+10     	; 0x10ff6 <__ftoa_engine+0x80>
   10fec:	36 0f       	add	r19, r22
   10fee:	e7 1e       	adc	r14, r23
   10ff0:	f8 1e       	adc	r15, r24
   10ff2:	49 1f       	adc	r20, r25
   10ff4:	51 1d       	adc	r21, r1
   10ff6:	66 0f       	add	r22, r22
   10ff8:	77 1f       	adc	r23, r23
   10ffa:	88 1f       	adc	r24, r24
   10ffc:	99 1f       	adc	r25, r25
   10ffe:	06 94       	lsr	r0
   11000:	a1 f7       	brne	.-24     	; 0x10fea <__ftoa_engine+0x74>
   11002:	05 90       	lpm	r0, Z+
   11004:	07 94       	ror	r0
   11006:	28 f4       	brcc	.+10     	; 0x11012 <__ftoa_engine+0x9c>
   11008:	e7 0e       	add	r14, r23
   1100a:	f8 1e       	adc	r15, r24
   1100c:	49 1f       	adc	r20, r25
   1100e:	56 1f       	adc	r21, r22
   11010:	c1 1d       	adc	r28, r1
   11012:	77 0f       	add	r23, r23
   11014:	88 1f       	adc	r24, r24
   11016:	99 1f       	adc	r25, r25
   11018:	66 1f       	adc	r22, r22
   1101a:	06 94       	lsr	r0
   1101c:	a1 f7       	brne	.-24     	; 0x11006 <__ftoa_engine+0x90>
   1101e:	05 90       	lpm	r0, Z+
   11020:	07 94       	ror	r0
   11022:	28 f4       	brcc	.+10     	; 0x1102e <__ftoa_engine+0xb8>
   11024:	f8 0e       	add	r15, r24
   11026:	49 1f       	adc	r20, r25
   11028:	56 1f       	adc	r21, r22
   1102a:	c7 1f       	adc	r28, r23
   1102c:	d1 1d       	adc	r29, r1
   1102e:	88 0f       	add	r24, r24
   11030:	99 1f       	adc	r25, r25
   11032:	66 1f       	adc	r22, r22
   11034:	77 1f       	adc	r23, r23
   11036:	06 94       	lsr	r0
   11038:	a1 f7       	brne	.-24     	; 0x11022 <__ftoa_engine+0xac>
   1103a:	05 90       	lpm	r0, Z+
   1103c:	07 94       	ror	r0
   1103e:	20 f4       	brcc	.+8      	; 0x11048 <__ftoa_engine+0xd2>
   11040:	49 0f       	add	r20, r25
   11042:	56 1f       	adc	r21, r22
   11044:	c7 1f       	adc	r28, r23
   11046:	d8 1f       	adc	r29, r24
   11048:	99 0f       	add	r25, r25
   1104a:	66 1f       	adc	r22, r22
   1104c:	77 1f       	adc	r23, r23
   1104e:	88 1f       	adc	r24, r24
   11050:	06 94       	lsr	r0
   11052:	a9 f7       	brne	.-22     	; 0x1103e <__ftoa_engine+0xc8>
   11054:	84 91       	lpm	r24, Z
   11056:	10 95       	com	r17
   11058:	17 70       	andi	r17, 0x07	; 7
   1105a:	41 f0       	breq	.+16     	; 0x1106c <__ftoa_engine+0xf6>
   1105c:	d6 95       	lsr	r29
   1105e:	c7 95       	ror	r28
   11060:	57 95       	ror	r21
   11062:	47 95       	ror	r20
   11064:	f7 94       	ror	r15
   11066:	e7 94       	ror	r14
   11068:	1a 95       	dec	r17
   1106a:	c1 f7       	brne	.-16     	; 0x1105c <__ftoa_engine+0xe6>
   1106c:	e0 ec       	ldi	r30, 0xC0	; 192
   1106e:	f2 e0       	ldi	r31, 0x02	; 2
   11070:	68 94       	set
   11072:	15 90       	lpm	r1, Z+
   11074:	15 91       	lpm	r17, Z+
   11076:	35 91       	lpm	r19, Z+
   11078:	65 91       	lpm	r22, Z+
   1107a:	95 91       	lpm	r25, Z+
   1107c:	05 90       	lpm	r0, Z+
   1107e:	7f e2       	ldi	r23, 0x2F	; 47
   11080:	73 95       	inc	r23
   11082:	e1 18       	sub	r14, r1
   11084:	f1 0a       	sbc	r15, r17
   11086:	43 0b       	sbc	r20, r19
   11088:	56 0b       	sbc	r21, r22
   1108a:	c9 0b       	sbc	r28, r25
   1108c:	d0 09       	sbc	r29, r0
   1108e:	c0 f7       	brcc	.-16     	; 0x11080 <__ftoa_engine+0x10a>
   11090:	e1 0c       	add	r14, r1
   11092:	f1 1e       	adc	r15, r17
   11094:	43 1f       	adc	r20, r19
   11096:	56 1f       	adc	r21, r22
   11098:	c9 1f       	adc	r28, r25
   1109a:	d0 1d       	adc	r29, r0
   1109c:	7e f4       	brtc	.+30     	; 0x110bc <__ftoa_engine+0x146>
   1109e:	70 33       	cpi	r23, 0x30	; 48
   110a0:	11 f4       	brne	.+4      	; 0x110a6 <__ftoa_engine+0x130>
   110a2:	8a 95       	dec	r24
   110a4:	e6 cf       	rjmp	.-52     	; 0x11072 <__ftoa_engine+0xfc>
   110a6:	e8 94       	clt
   110a8:	01 50       	subi	r16, 0x01	; 1
   110aa:	30 f0       	brcs	.+12     	; 0x110b8 <__ftoa_engine+0x142>
   110ac:	08 0f       	add	r16, r24
   110ae:	0a f4       	brpl	.+2      	; 0x110b2 <__ftoa_engine+0x13c>
   110b0:	00 27       	eor	r16, r16
   110b2:	02 17       	cp	r16, r18
   110b4:	08 f4       	brcc	.+2      	; 0x110b8 <__ftoa_engine+0x142>
   110b6:	20 2f       	mov	r18, r16
   110b8:	23 95       	inc	r18
   110ba:	02 2f       	mov	r16, r18
   110bc:	7a 33       	cpi	r23, 0x3A	; 58
   110be:	28 f0       	brcs	.+10     	; 0x110ca <__ftoa_engine+0x154>
   110c0:	79 e3       	ldi	r23, 0x39	; 57
   110c2:	7d 93       	st	X+, r23
   110c4:	2a 95       	dec	r18
   110c6:	e9 f7       	brne	.-6      	; 0x110c2 <__ftoa_engine+0x14c>
   110c8:	10 c0       	rjmp	.+32     	; 0x110ea <__ftoa_engine+0x174>
   110ca:	7d 93       	st	X+, r23
   110cc:	2a 95       	dec	r18
   110ce:	89 f6       	brne	.-94     	; 0x11072 <__ftoa_engine+0xfc>
   110d0:	06 94       	lsr	r0
   110d2:	97 95       	ror	r25
   110d4:	67 95       	ror	r22
   110d6:	37 95       	ror	r19
   110d8:	17 95       	ror	r17
   110da:	17 94       	ror	r1
   110dc:	e1 18       	sub	r14, r1
   110de:	f1 0a       	sbc	r15, r17
   110e0:	43 0b       	sbc	r20, r19
   110e2:	56 0b       	sbc	r21, r22
   110e4:	c9 0b       	sbc	r28, r25
   110e6:	d0 09       	sbc	r29, r0
   110e8:	98 f0       	brcs	.+38     	; 0x11110 <__ftoa_engine+0x19a>
   110ea:	23 95       	inc	r18
   110ec:	7e 91       	ld	r23, -X
   110ee:	73 95       	inc	r23
   110f0:	7a 33       	cpi	r23, 0x3A	; 58
   110f2:	08 f0       	brcs	.+2      	; 0x110f6 <__ftoa_engine+0x180>
   110f4:	70 e3       	ldi	r23, 0x30	; 48
   110f6:	7c 93       	st	X, r23
   110f8:	20 13       	cpse	r18, r16
   110fa:	b8 f7       	brcc	.-18     	; 0x110ea <__ftoa_engine+0x174>
   110fc:	7e 91       	ld	r23, -X
   110fe:	70 61       	ori	r23, 0x10	; 16
   11100:	7d 93       	st	X+, r23
   11102:	30 f0       	brcs	.+12     	; 0x11110 <__ftoa_engine+0x19a>
   11104:	83 95       	inc	r24
   11106:	71 e3       	ldi	r23, 0x31	; 49
   11108:	7d 93       	st	X+, r23
   1110a:	70 e3       	ldi	r23, 0x30	; 48
   1110c:	2a 95       	dec	r18
   1110e:	e1 f7       	brne	.-8      	; 0x11108 <__ftoa_engine+0x192>
   11110:	11 24       	eor	r1, r1
   11112:	ef 90       	pop	r14
   11114:	ff 90       	pop	r15
   11116:	0f 91       	pop	r16
   11118:	1f 91       	pop	r17
   1111a:	cf 91       	pop	r28
   1111c:	df 91       	pop	r29
   1111e:	99 27       	eor	r25, r25
   11120:	87 fd       	sbrc	r24, 7
   11122:	90 95       	com	r25
   11124:	08 95       	ret

00011126 <strncasecmp_P>:
   11126:	fb 01       	movw	r30, r22
   11128:	dc 01       	movw	r26, r24
   1112a:	41 50       	subi	r20, 0x01	; 1
   1112c:	50 40       	sbci	r21, 0x00	; 0
   1112e:	88 f0       	brcs	.+34     	; 0x11152 <strncasecmp_P+0x2c>
   11130:	8d 91       	ld	r24, X+
   11132:	81 34       	cpi	r24, 0x41	; 65
   11134:	1c f0       	brlt	.+6      	; 0x1113c <strncasecmp_P+0x16>
   11136:	8b 35       	cpi	r24, 0x5B	; 91
   11138:	0c f4       	brge	.+2      	; 0x1113c <strncasecmp_P+0x16>
   1113a:	80 5e       	subi	r24, 0xE0	; 224
   1113c:	65 91       	lpm	r22, Z+
   1113e:	61 34       	cpi	r22, 0x41	; 65
   11140:	1c f0       	brlt	.+6      	; 0x11148 <strncasecmp_P+0x22>
   11142:	6b 35       	cpi	r22, 0x5B	; 91
   11144:	0c f4       	brge	.+2      	; 0x11148 <strncasecmp_P+0x22>
   11146:	60 5e       	subi	r22, 0xE0	; 224
   11148:	86 1b       	sub	r24, r22
   1114a:	61 11       	cpse	r22, r1
   1114c:	71 f3       	breq	.-36     	; 0x1112a <strncasecmp_P+0x4>
   1114e:	99 0b       	sbc	r25, r25
   11150:	08 95       	ret
   11152:	88 1b       	sub	r24, r24
   11154:	fc cf       	rjmp	.-8      	; 0x1114e <strncasecmp_P+0x28>

00011156 <strncmp_P>:
   11156:	fb 01       	movw	r30, r22
   11158:	dc 01       	movw	r26, r24
   1115a:	41 50       	subi	r20, 0x01	; 1
   1115c:	50 40       	sbci	r21, 0x00	; 0
   1115e:	30 f0       	brcs	.+12     	; 0x1116c <strncmp_P+0x16>
   11160:	8d 91       	ld	r24, X+
   11162:	05 90       	lpm	r0, Z+
   11164:	80 19       	sub	r24, r0
   11166:	19 f4       	brne	.+6      	; 0x1116e <strncmp_P+0x18>
   11168:	00 20       	and	r0, r0
   1116a:	b9 f7       	brne	.-18     	; 0x1115a <strncmp_P+0x4>
   1116c:	88 1b       	sub	r24, r24
   1116e:	99 0b       	sbc	r25, r25
   11170:	08 95       	ret

00011172 <strnlen_P>:
   11172:	fc 01       	movw	r30, r24
   11174:	05 90       	lpm	r0, Z+
   11176:	61 50       	subi	r22, 0x01	; 1
   11178:	70 40       	sbci	r23, 0x00	; 0
   1117a:	01 10       	cpse	r0, r1
   1117c:	d8 f7       	brcc	.-10     	; 0x11174 <strnlen_P+0x2>
   1117e:	80 95       	com	r24
   11180:	90 95       	com	r25
   11182:	8e 0f       	add	r24, r30
   11184:	9f 1f       	adc	r25, r31
   11186:	08 95       	ret

00011188 <strstr_P>:
   11188:	fb 01       	movw	r30, r22
   1118a:	55 91       	lpm	r21, Z+
   1118c:	55 23       	and	r21, r21
   1118e:	a9 f0       	breq	.+42     	; 0x111ba <strstr_P+0x32>
   11190:	bf 01       	movw	r22, r30
   11192:	dc 01       	movw	r26, r24
   11194:	4d 91       	ld	r20, X+
   11196:	45 17       	cp	r20, r21
   11198:	41 11       	cpse	r20, r1
   1119a:	e1 f7       	brne	.-8      	; 0x11194 <strstr_P+0xc>
   1119c:	59 f4       	brne	.+22     	; 0x111b4 <strstr_P+0x2c>
   1119e:	cd 01       	movw	r24, r26
   111a0:	05 90       	lpm	r0, Z+
   111a2:	00 20       	and	r0, r0
   111a4:	49 f0       	breq	.+18     	; 0x111b8 <strstr_P+0x30>
   111a6:	4d 91       	ld	r20, X+
   111a8:	40 15       	cp	r20, r0
   111aa:	41 11       	cpse	r20, r1
   111ac:	c9 f3       	breq	.-14     	; 0x111a0 <strstr_P+0x18>
   111ae:	fb 01       	movw	r30, r22
   111b0:	41 11       	cpse	r20, r1
   111b2:	ef cf       	rjmp	.-34     	; 0x11192 <strstr_P+0xa>
   111b4:	81 e0       	ldi	r24, 0x01	; 1
   111b6:	90 e0       	ldi	r25, 0x00	; 0
   111b8:	01 97       	sbiw	r24, 0x01	; 1
   111ba:	08 95       	ret

000111bc <memchr>:
   111bc:	fc 01       	movw	r30, r24
   111be:	41 50       	subi	r20, 0x01	; 1
   111c0:	50 40       	sbci	r21, 0x00	; 0
   111c2:	30 f0       	brcs	.+12     	; 0x111d0 <memchr+0x14>
   111c4:	01 90       	ld	r0, Z+
   111c6:	06 16       	cp	r0, r22
   111c8:	d1 f7       	brne	.-12     	; 0x111be <memchr+0x2>
   111ca:	31 97       	sbiw	r30, 0x01	; 1
   111cc:	cf 01       	movw	r24, r30
   111ce:	08 95       	ret
   111d0:	88 27       	eor	r24, r24
   111d2:	99 27       	eor	r25, r25
   111d4:	08 95       	ret

000111d6 <memcpy>:
   111d6:	fb 01       	movw	r30, r22
   111d8:	dc 01       	movw	r26, r24
   111da:	02 c0       	rjmp	.+4      	; 0x111e0 <memcpy+0xa>
   111dc:	01 90       	ld	r0, Z+
   111de:	0d 92       	st	X+, r0
   111e0:	41 50       	subi	r20, 0x01	; 1
   111e2:	50 40       	sbci	r21, 0x00	; 0
   111e4:	d8 f7       	brcc	.-10     	; 0x111dc <memcpy+0x6>
   111e6:	08 95       	ret

000111e8 <strchr>:
   111e8:	fc 01       	movw	r30, r24
   111ea:	81 91       	ld	r24, Z+
   111ec:	86 17       	cp	r24, r22
   111ee:	21 f0       	breq	.+8      	; 0x111f8 <strchr+0x10>
   111f0:	88 23       	and	r24, r24
   111f2:	d9 f7       	brne	.-10     	; 0x111ea <strchr+0x2>
   111f4:	99 27       	eor	r25, r25
   111f6:	08 95       	ret
   111f8:	31 97       	sbiw	r30, 0x01	; 1
   111fa:	cf 01       	movw	r24, r30
   111fc:	08 95       	ret

000111fe <strnlen>:
   111fe:	fc 01       	movw	r30, r24
   11200:	61 50       	subi	r22, 0x01	; 1
   11202:	70 40       	sbci	r23, 0x00	; 0
   11204:	01 90       	ld	r0, Z+
   11206:	01 10       	cpse	r0, r1
   11208:	d8 f7       	brcc	.-10     	; 0x11200 <strnlen+0x2>
   1120a:	80 95       	com	r24
   1120c:	90 95       	com	r25
   1120e:	8e 0f       	add	r24, r30
   11210:	9f 1f       	adc	r25, r31
   11212:	08 95       	ret

00011214 <__mulsi_const_10>:
   11214:	59 2f       	mov	r21, r25
   11216:	48 2f       	mov	r20, r24
   11218:	37 2f       	mov	r19, r23
   1121a:	26 2f       	mov	r18, r22
   1121c:	66 0f       	add	r22, r22
   1121e:	77 1f       	adc	r23, r23
   11220:	88 1f       	adc	r24, r24
   11222:	99 1f       	adc	r25, r25
   11224:	66 0f       	add	r22, r22
   11226:	77 1f       	adc	r23, r23
   11228:	88 1f       	adc	r24, r24
   1122a:	99 1f       	adc	r25, r25
   1122c:	62 0f       	add	r22, r18
   1122e:	73 1f       	adc	r23, r19
   11230:	84 1f       	adc	r24, r20
   11232:	95 1f       	adc	r25, r21
   11234:	66 0f       	add	r22, r22
   11236:	77 1f       	adc	r23, r23
   11238:	88 1f       	adc	r24, r24
   1123a:	99 1f       	adc	r25, r25
   1123c:	08 95       	ret

0001123e <__mulhi_const_10>:
   1123e:	7a e0       	ldi	r23, 0x0A	; 10
   11240:	97 9f       	mul	r25, r23
   11242:	90 2d       	mov	r25, r0
   11244:	87 9f       	mul	r24, r23
   11246:	80 2d       	mov	r24, r0
   11248:	91 0d       	add	r25, r1
   1124a:	11 24       	eor	r1, r1
   1124c:	08 95       	ret

0001124e <fdevopen>:
   1124e:	0f 93       	push	r16
   11250:	1f 93       	push	r17
   11252:	cf 93       	push	r28
   11254:	df 93       	push	r29
   11256:	00 97       	sbiw	r24, 0x00	; 0
   11258:	31 f4       	brne	.+12     	; 0x11266 <fdevopen+0x18>
   1125a:	61 15       	cp	r22, r1
   1125c:	71 05       	cpc	r23, r1
   1125e:	19 f4       	brne	.+6      	; 0x11266 <fdevopen+0x18>
   11260:	80 e0       	ldi	r24, 0x00	; 0
   11262:	90 e0       	ldi	r25, 0x00	; 0
   11264:	39 c0       	rjmp	.+114    	; 0x112d8 <fdevopen+0x8a>
   11266:	8b 01       	movw	r16, r22
   11268:	ec 01       	movw	r28, r24
   1126a:	6e e0       	ldi	r22, 0x0E	; 14
   1126c:	70 e0       	ldi	r23, 0x00	; 0
   1126e:	81 e0       	ldi	r24, 0x01	; 1
   11270:	90 e0       	ldi	r25, 0x00	; 0
   11272:	31 d1       	rcall	.+610    	; 0x114d6 <calloc>
   11274:	fc 01       	movw	r30, r24
   11276:	89 2b       	or	r24, r25
   11278:	99 f3       	breq	.-26     	; 0x11260 <fdevopen+0x12>
   1127a:	80 e8       	ldi	r24, 0x80	; 128
   1127c:	83 83       	std	Z+3, r24	; 0x03
   1127e:	01 15       	cp	r16, r1
   11280:	11 05       	cpc	r17, r1
   11282:	71 f0       	breq	.+28     	; 0x112a0 <fdevopen+0x52>
   11284:	02 87       	std	Z+10, r16	; 0x0a
   11286:	13 87       	std	Z+11, r17	; 0x0b
   11288:	81 e8       	ldi	r24, 0x81	; 129
   1128a:	83 83       	std	Z+3, r24	; 0x03
   1128c:	80 91 87 2e 	lds	r24, 0x2E87	; 0x802e87 <__iob>
   11290:	90 91 88 2e 	lds	r25, 0x2E88	; 0x802e88 <__iob+0x1>
   11294:	89 2b       	or	r24, r25
   11296:	21 f4       	brne	.+8      	; 0x112a0 <fdevopen+0x52>
   11298:	e0 93 87 2e 	sts	0x2E87, r30	; 0x802e87 <__iob>
   1129c:	f0 93 88 2e 	sts	0x2E88, r31	; 0x802e88 <__iob+0x1>
   112a0:	20 97       	sbiw	r28, 0x00	; 0
   112a2:	c9 f0       	breq	.+50     	; 0x112d6 <fdevopen+0x88>
   112a4:	c0 87       	std	Z+8, r28	; 0x08
   112a6:	d1 87       	std	Z+9, r29	; 0x09
   112a8:	83 81       	ldd	r24, Z+3	; 0x03
   112aa:	82 60       	ori	r24, 0x02	; 2
   112ac:	83 83       	std	Z+3, r24	; 0x03
   112ae:	80 91 89 2e 	lds	r24, 0x2E89	; 0x802e89 <__iob+0x2>
   112b2:	90 91 8a 2e 	lds	r25, 0x2E8A	; 0x802e8a <__iob+0x3>
   112b6:	89 2b       	or	r24, r25
   112b8:	71 f4       	brne	.+28     	; 0x112d6 <fdevopen+0x88>
   112ba:	e0 93 89 2e 	sts	0x2E89, r30	; 0x802e89 <__iob+0x2>
   112be:	f0 93 8a 2e 	sts	0x2E8A, r31	; 0x802e8a <__iob+0x3>
   112c2:	80 91 8b 2e 	lds	r24, 0x2E8B	; 0x802e8b <__iob+0x4>
   112c6:	90 91 8c 2e 	lds	r25, 0x2E8C	; 0x802e8c <__iob+0x5>
   112ca:	89 2b       	or	r24, r25
   112cc:	21 f4       	brne	.+8      	; 0x112d6 <fdevopen+0x88>
   112ce:	e0 93 8b 2e 	sts	0x2E8B, r30	; 0x802e8b <__iob+0x4>
   112d2:	f0 93 8c 2e 	sts	0x2E8C, r31	; 0x802e8c <__iob+0x5>
   112d6:	cf 01       	movw	r24, r30
   112d8:	df 91       	pop	r29
   112da:	cf 91       	pop	r28
   112dc:	1f 91       	pop	r17
   112de:	0f 91       	pop	r16
   112e0:	08 95       	ret

000112e2 <fputc>:
   112e2:	0f 93       	push	r16
   112e4:	1f 93       	push	r17
   112e6:	cf 93       	push	r28
   112e8:	df 93       	push	r29
   112ea:	fb 01       	movw	r30, r22
   112ec:	23 81       	ldd	r18, Z+3	; 0x03
   112ee:	21 fd       	sbrc	r18, 1
   112f0:	03 c0       	rjmp	.+6      	; 0x112f8 <fputc+0x16>
   112f2:	8f ef       	ldi	r24, 0xFF	; 255
   112f4:	9f ef       	ldi	r25, 0xFF	; 255
   112f6:	2c c0       	rjmp	.+88     	; 0x11350 <fputc+0x6e>
   112f8:	22 ff       	sbrs	r18, 2
   112fa:	16 c0       	rjmp	.+44     	; 0x11328 <fputc+0x46>
   112fc:	46 81       	ldd	r20, Z+6	; 0x06
   112fe:	57 81       	ldd	r21, Z+7	; 0x07
   11300:	24 81       	ldd	r18, Z+4	; 0x04
   11302:	35 81       	ldd	r19, Z+5	; 0x05
   11304:	42 17       	cp	r20, r18
   11306:	53 07       	cpc	r21, r19
   11308:	44 f4       	brge	.+16     	; 0x1131a <fputc+0x38>
   1130a:	a0 81       	ld	r26, Z
   1130c:	b1 81       	ldd	r27, Z+1	; 0x01
   1130e:	9d 01       	movw	r18, r26
   11310:	2f 5f       	subi	r18, 0xFF	; 255
   11312:	3f 4f       	sbci	r19, 0xFF	; 255
   11314:	20 83       	st	Z, r18
   11316:	31 83       	std	Z+1, r19	; 0x01
   11318:	8c 93       	st	X, r24
   1131a:	26 81       	ldd	r18, Z+6	; 0x06
   1131c:	37 81       	ldd	r19, Z+7	; 0x07
   1131e:	2f 5f       	subi	r18, 0xFF	; 255
   11320:	3f 4f       	sbci	r19, 0xFF	; 255
   11322:	26 83       	std	Z+6, r18	; 0x06
   11324:	37 83       	std	Z+7, r19	; 0x07
   11326:	14 c0       	rjmp	.+40     	; 0x11350 <fputc+0x6e>
   11328:	8b 01       	movw	r16, r22
   1132a:	ec 01       	movw	r28, r24
   1132c:	fb 01       	movw	r30, r22
   1132e:	00 84       	ldd	r0, Z+8	; 0x08
   11330:	f1 85       	ldd	r31, Z+9	; 0x09
   11332:	e0 2d       	mov	r30, r0
   11334:	19 95       	eicall
   11336:	89 2b       	or	r24, r25
   11338:	e1 f6       	brne	.-72     	; 0x112f2 <fputc+0x10>
   1133a:	d8 01       	movw	r26, r16
   1133c:	16 96       	adiw	r26, 0x06	; 6
   1133e:	8d 91       	ld	r24, X+
   11340:	9c 91       	ld	r25, X
   11342:	17 97       	sbiw	r26, 0x07	; 7
   11344:	01 96       	adiw	r24, 0x01	; 1
   11346:	16 96       	adiw	r26, 0x06	; 6
   11348:	8d 93       	st	X+, r24
   1134a:	9c 93       	st	X, r25
   1134c:	17 97       	sbiw	r26, 0x07	; 7
   1134e:	ce 01       	movw	r24, r28
   11350:	df 91       	pop	r29
   11352:	cf 91       	pop	r28
   11354:	1f 91       	pop	r17
   11356:	0f 91       	pop	r16
   11358:	08 95       	ret

0001135a <snprintf_P>:
   1135a:	0f 93       	push	r16
   1135c:	1f 93       	push	r17
   1135e:	cf 93       	push	r28
   11360:	df 93       	push	r29
   11362:	cd b7       	in	r28, 0x3d	; 61
   11364:	de b7       	in	r29, 0x3e	; 62
   11366:	2e 97       	sbiw	r28, 0x0e	; 14
   11368:	cd bf       	out	0x3d, r28	; 61
   1136a:	de bf       	out	0x3e, r29	; 62
   1136c:	0e 89       	ldd	r16, Y+22	; 0x16
   1136e:	1f 89       	ldd	r17, Y+23	; 0x17
   11370:	88 8d       	ldd	r24, Y+24	; 0x18
   11372:	99 8d       	ldd	r25, Y+25	; 0x19
   11374:	2e e0       	ldi	r18, 0x0E	; 14
   11376:	2c 83       	std	Y+4, r18	; 0x04
   11378:	09 83       	std	Y+1, r16	; 0x01
   1137a:	1a 83       	std	Y+2, r17	; 0x02
   1137c:	97 ff       	sbrs	r25, 7
   1137e:	02 c0       	rjmp	.+4      	; 0x11384 <snprintf_P+0x2a>
   11380:	80 e0       	ldi	r24, 0x00	; 0
   11382:	90 e8       	ldi	r25, 0x80	; 128
   11384:	01 97       	sbiw	r24, 0x01	; 1
   11386:	8d 83       	std	Y+5, r24	; 0x05
   11388:	9e 83       	std	Y+6, r25	; 0x06
   1138a:	ae 01       	movw	r20, r28
   1138c:	44 5e       	subi	r20, 0xE4	; 228
   1138e:	5f 4f       	sbci	r21, 0xFF	; 255
   11390:	6a 8d       	ldd	r22, Y+26	; 0x1a
   11392:	7b 8d       	ldd	r23, Y+27	; 0x1b
   11394:	ce 01       	movw	r24, r28
   11396:	01 96       	adiw	r24, 0x01	; 1
   11398:	0e 94 f1 7d 	call	0xfbe2	; 0xfbe2 <vfprintf>
   1139c:	4d 81       	ldd	r20, Y+5	; 0x05
   1139e:	5e 81       	ldd	r21, Y+6	; 0x06
   113a0:	57 fd       	sbrc	r21, 7
   113a2:	0a c0       	rjmp	.+20     	; 0x113b8 <snprintf_P+0x5e>
   113a4:	2f 81       	ldd	r18, Y+7	; 0x07
   113a6:	38 85       	ldd	r19, Y+8	; 0x08
   113a8:	42 17       	cp	r20, r18
   113aa:	53 07       	cpc	r21, r19
   113ac:	0c f4       	brge	.+2      	; 0x113b0 <snprintf_P+0x56>
   113ae:	9a 01       	movw	r18, r20
   113b0:	f8 01       	movw	r30, r16
   113b2:	e2 0f       	add	r30, r18
   113b4:	f3 1f       	adc	r31, r19
   113b6:	10 82       	st	Z, r1
   113b8:	2e 96       	adiw	r28, 0x0e	; 14
   113ba:	cd bf       	out	0x3d, r28	; 61
   113bc:	de bf       	out	0x3e, r29	; 62
   113be:	df 91       	pop	r29
   113c0:	cf 91       	pop	r28
   113c2:	1f 91       	pop	r17
   113c4:	0f 91       	pop	r16
   113c6:	08 95       	ret

000113c8 <sprintf_P>:
   113c8:	0f 93       	push	r16
   113ca:	1f 93       	push	r17
   113cc:	cf 93       	push	r28
   113ce:	df 93       	push	r29
   113d0:	cd b7       	in	r28, 0x3d	; 61
   113d2:	de b7       	in	r29, 0x3e	; 62
   113d4:	2e 97       	sbiw	r28, 0x0e	; 14
   113d6:	cd bf       	out	0x3d, r28	; 61
   113d8:	de bf       	out	0x3e, r29	; 62
   113da:	0e 89       	ldd	r16, Y+22	; 0x16
   113dc:	1f 89       	ldd	r17, Y+23	; 0x17
   113de:	8e e0       	ldi	r24, 0x0E	; 14
   113e0:	8c 83       	std	Y+4, r24	; 0x04
   113e2:	09 83       	std	Y+1, r16	; 0x01
   113e4:	1a 83       	std	Y+2, r17	; 0x02
   113e6:	8f ef       	ldi	r24, 0xFF	; 255
   113e8:	9f e7       	ldi	r25, 0x7F	; 127
   113ea:	8d 83       	std	Y+5, r24	; 0x05
   113ec:	9e 83       	std	Y+6, r25	; 0x06
   113ee:	ae 01       	movw	r20, r28
   113f0:	46 5e       	subi	r20, 0xE6	; 230
   113f2:	5f 4f       	sbci	r21, 0xFF	; 255
   113f4:	68 8d       	ldd	r22, Y+24	; 0x18
   113f6:	79 8d       	ldd	r23, Y+25	; 0x19
   113f8:	ce 01       	movw	r24, r28
   113fa:	01 96       	adiw	r24, 0x01	; 1
   113fc:	0e 94 f1 7d 	call	0xfbe2	; 0xfbe2 <vfprintf>
   11400:	ef 81       	ldd	r30, Y+7	; 0x07
   11402:	f8 85       	ldd	r31, Y+8	; 0x08
   11404:	e0 0f       	add	r30, r16
   11406:	f1 1f       	adc	r31, r17
   11408:	10 82       	st	Z, r1
   1140a:	2e 96       	adiw	r28, 0x0e	; 14
   1140c:	cd bf       	out	0x3d, r28	; 61
   1140e:	de bf       	out	0x3e, r29	; 62
   11410:	df 91       	pop	r29
   11412:	cf 91       	pop	r28
   11414:	1f 91       	pop	r17
   11416:	0f 91       	pop	r16
   11418:	08 95       	ret

0001141a <__ultoa_invert>:
   1141a:	fa 01       	movw	r30, r20
   1141c:	aa 27       	eor	r26, r26
   1141e:	28 30       	cpi	r18, 0x08	; 8
   11420:	51 f1       	breq	.+84     	; 0x11476 <__ultoa_invert+0x5c>
   11422:	20 31       	cpi	r18, 0x10	; 16
   11424:	81 f1       	breq	.+96     	; 0x11486 <__ultoa_invert+0x6c>
   11426:	e8 94       	clt
   11428:	6f 93       	push	r22
   1142a:	6e 7f       	andi	r22, 0xFE	; 254
   1142c:	6e 5f       	subi	r22, 0xFE	; 254
   1142e:	7f 4f       	sbci	r23, 0xFF	; 255
   11430:	8f 4f       	sbci	r24, 0xFF	; 255
   11432:	9f 4f       	sbci	r25, 0xFF	; 255
   11434:	af 4f       	sbci	r26, 0xFF	; 255
   11436:	b1 e0       	ldi	r27, 0x01	; 1
   11438:	3e d0       	rcall	.+124    	; 0x114b6 <__ultoa_invert+0x9c>
   1143a:	b4 e0       	ldi	r27, 0x04	; 4
   1143c:	3c d0       	rcall	.+120    	; 0x114b6 <__ultoa_invert+0x9c>
   1143e:	67 0f       	add	r22, r23
   11440:	78 1f       	adc	r23, r24
   11442:	89 1f       	adc	r24, r25
   11444:	9a 1f       	adc	r25, r26
   11446:	a1 1d       	adc	r26, r1
   11448:	68 0f       	add	r22, r24
   1144a:	79 1f       	adc	r23, r25
   1144c:	8a 1f       	adc	r24, r26
   1144e:	91 1d       	adc	r25, r1
   11450:	a1 1d       	adc	r26, r1
   11452:	6a 0f       	add	r22, r26
   11454:	71 1d       	adc	r23, r1
   11456:	81 1d       	adc	r24, r1
   11458:	91 1d       	adc	r25, r1
   1145a:	a1 1d       	adc	r26, r1
   1145c:	20 d0       	rcall	.+64     	; 0x1149e <__ultoa_invert+0x84>
   1145e:	09 f4       	brne	.+2      	; 0x11462 <__ultoa_invert+0x48>
   11460:	68 94       	set
   11462:	3f 91       	pop	r19
   11464:	2a e0       	ldi	r18, 0x0A	; 10
   11466:	26 9f       	mul	r18, r22
   11468:	11 24       	eor	r1, r1
   1146a:	30 19       	sub	r19, r0
   1146c:	30 5d       	subi	r19, 0xD0	; 208
   1146e:	31 93       	st	Z+, r19
   11470:	de f6       	brtc	.-74     	; 0x11428 <__ultoa_invert+0xe>
   11472:	cf 01       	movw	r24, r30
   11474:	08 95       	ret
   11476:	46 2f       	mov	r20, r22
   11478:	47 70       	andi	r20, 0x07	; 7
   1147a:	40 5d       	subi	r20, 0xD0	; 208
   1147c:	41 93       	st	Z+, r20
   1147e:	b3 e0       	ldi	r27, 0x03	; 3
   11480:	0f d0       	rcall	.+30     	; 0x114a0 <__ultoa_invert+0x86>
   11482:	c9 f7       	brne	.-14     	; 0x11476 <__ultoa_invert+0x5c>
   11484:	f6 cf       	rjmp	.-20     	; 0x11472 <__ultoa_invert+0x58>
   11486:	46 2f       	mov	r20, r22
   11488:	4f 70       	andi	r20, 0x0F	; 15
   1148a:	40 5d       	subi	r20, 0xD0	; 208
   1148c:	4a 33       	cpi	r20, 0x3A	; 58
   1148e:	18 f0       	brcs	.+6      	; 0x11496 <__ultoa_invert+0x7c>
   11490:	49 5d       	subi	r20, 0xD9	; 217
   11492:	31 fd       	sbrc	r19, 1
   11494:	40 52       	subi	r20, 0x20	; 32
   11496:	41 93       	st	Z+, r20
   11498:	02 d0       	rcall	.+4      	; 0x1149e <__ultoa_invert+0x84>
   1149a:	a9 f7       	brne	.-22     	; 0x11486 <__ultoa_invert+0x6c>
   1149c:	ea cf       	rjmp	.-44     	; 0x11472 <__ultoa_invert+0x58>
   1149e:	b4 e0       	ldi	r27, 0x04	; 4
   114a0:	a6 95       	lsr	r26
   114a2:	97 95       	ror	r25
   114a4:	87 95       	ror	r24
   114a6:	77 95       	ror	r23
   114a8:	67 95       	ror	r22
   114aa:	ba 95       	dec	r27
   114ac:	c9 f7       	brne	.-14     	; 0x114a0 <__ultoa_invert+0x86>
   114ae:	00 97       	sbiw	r24, 0x00	; 0
   114b0:	61 05       	cpc	r22, r1
   114b2:	71 05       	cpc	r23, r1
   114b4:	08 95       	ret
   114b6:	9b 01       	movw	r18, r22
   114b8:	ac 01       	movw	r20, r24
   114ba:	0a 2e       	mov	r0, r26
   114bc:	06 94       	lsr	r0
   114be:	57 95       	ror	r21
   114c0:	47 95       	ror	r20
   114c2:	37 95       	ror	r19
   114c4:	27 95       	ror	r18
   114c6:	ba 95       	dec	r27
   114c8:	c9 f7       	brne	.-14     	; 0x114bc <__ultoa_invert+0xa2>
   114ca:	62 0f       	add	r22, r18
   114cc:	73 1f       	adc	r23, r19
   114ce:	84 1f       	adc	r24, r20
   114d0:	95 1f       	adc	r25, r21
   114d2:	a0 1d       	adc	r26, r0
   114d4:	08 95       	ret

000114d6 <calloc>:
   114d6:	0f 93       	push	r16
   114d8:	1f 93       	push	r17
   114da:	cf 93       	push	r28
   114dc:	df 93       	push	r29
   114de:	86 9f       	mul	r24, r22
   114e0:	80 01       	movw	r16, r0
   114e2:	87 9f       	mul	r24, r23
   114e4:	10 0d       	add	r17, r0
   114e6:	96 9f       	mul	r25, r22
   114e8:	10 0d       	add	r17, r0
   114ea:	11 24       	eor	r1, r1
   114ec:	c8 01       	movw	r24, r16
   114ee:	0d d0       	rcall	.+26     	; 0x1150a <malloc>
   114f0:	ec 01       	movw	r28, r24
   114f2:	00 97       	sbiw	r24, 0x00	; 0
   114f4:	21 f0       	breq	.+8      	; 0x114fe <calloc+0x28>
   114f6:	a8 01       	movw	r20, r16
   114f8:	60 e0       	ldi	r22, 0x00	; 0
   114fa:	70 e0       	ldi	r23, 0x00	; 0
   114fc:	86 d2       	rcall	.+1292   	; 0x11a0a <memset>
   114fe:	ce 01       	movw	r24, r28
   11500:	df 91       	pop	r29
   11502:	cf 91       	pop	r28
   11504:	1f 91       	pop	r17
   11506:	0f 91       	pop	r16
   11508:	08 95       	ret

0001150a <malloc>:
   1150a:	0f 93       	push	r16
   1150c:	1f 93       	push	r17
   1150e:	cf 93       	push	r28
   11510:	df 93       	push	r29
   11512:	82 30       	cpi	r24, 0x02	; 2
   11514:	91 05       	cpc	r25, r1
   11516:	10 f4       	brcc	.+4      	; 0x1151c <malloc+0x12>
   11518:	82 e0       	ldi	r24, 0x02	; 2
   1151a:	90 e0       	ldi	r25, 0x00	; 0
   1151c:	e0 91 8f 2e 	lds	r30, 0x2E8F	; 0x802e8f <__flp>
   11520:	f0 91 90 2e 	lds	r31, 0x2E90	; 0x802e90 <__flp+0x1>
   11524:	20 e0       	ldi	r18, 0x00	; 0
   11526:	30 e0       	ldi	r19, 0x00	; 0
   11528:	a0 e0       	ldi	r26, 0x00	; 0
   1152a:	b0 e0       	ldi	r27, 0x00	; 0
   1152c:	30 97       	sbiw	r30, 0x00	; 0
   1152e:	19 f1       	breq	.+70     	; 0x11576 <malloc+0x6c>
   11530:	40 81       	ld	r20, Z
   11532:	51 81       	ldd	r21, Z+1	; 0x01
   11534:	02 81       	ldd	r16, Z+2	; 0x02
   11536:	13 81       	ldd	r17, Z+3	; 0x03
   11538:	48 17       	cp	r20, r24
   1153a:	59 07       	cpc	r21, r25
   1153c:	c8 f0       	brcs	.+50     	; 0x11570 <malloc+0x66>
   1153e:	84 17       	cp	r24, r20
   11540:	95 07       	cpc	r25, r21
   11542:	69 f4       	brne	.+26     	; 0x1155e <malloc+0x54>
   11544:	10 97       	sbiw	r26, 0x00	; 0
   11546:	31 f0       	breq	.+12     	; 0x11554 <malloc+0x4a>
   11548:	12 96       	adiw	r26, 0x02	; 2
   1154a:	0c 93       	st	X, r16
   1154c:	12 97       	sbiw	r26, 0x02	; 2
   1154e:	13 96       	adiw	r26, 0x03	; 3
   11550:	1c 93       	st	X, r17
   11552:	27 c0       	rjmp	.+78     	; 0x115a2 <malloc+0x98>
   11554:	00 93 8f 2e 	sts	0x2E8F, r16	; 0x802e8f <__flp>
   11558:	10 93 90 2e 	sts	0x2E90, r17	; 0x802e90 <__flp+0x1>
   1155c:	22 c0       	rjmp	.+68     	; 0x115a2 <malloc+0x98>
   1155e:	21 15       	cp	r18, r1
   11560:	31 05       	cpc	r19, r1
   11562:	19 f0       	breq	.+6      	; 0x1156a <malloc+0x60>
   11564:	42 17       	cp	r20, r18
   11566:	53 07       	cpc	r21, r19
   11568:	18 f4       	brcc	.+6      	; 0x11570 <malloc+0x66>
   1156a:	9a 01       	movw	r18, r20
   1156c:	bd 01       	movw	r22, r26
   1156e:	ef 01       	movw	r28, r30
   11570:	df 01       	movw	r26, r30
   11572:	f8 01       	movw	r30, r16
   11574:	db cf       	rjmp	.-74     	; 0x1152c <malloc+0x22>
   11576:	21 15       	cp	r18, r1
   11578:	31 05       	cpc	r19, r1
   1157a:	f9 f0       	breq	.+62     	; 0x115ba <malloc+0xb0>
   1157c:	28 1b       	sub	r18, r24
   1157e:	39 0b       	sbc	r19, r25
   11580:	24 30       	cpi	r18, 0x04	; 4
   11582:	31 05       	cpc	r19, r1
   11584:	80 f4       	brcc	.+32     	; 0x115a6 <malloc+0x9c>
   11586:	8a 81       	ldd	r24, Y+2	; 0x02
   11588:	9b 81       	ldd	r25, Y+3	; 0x03
   1158a:	61 15       	cp	r22, r1
   1158c:	71 05       	cpc	r23, r1
   1158e:	21 f0       	breq	.+8      	; 0x11598 <malloc+0x8e>
   11590:	fb 01       	movw	r30, r22
   11592:	82 83       	std	Z+2, r24	; 0x02
   11594:	93 83       	std	Z+3, r25	; 0x03
   11596:	04 c0       	rjmp	.+8      	; 0x115a0 <malloc+0x96>
   11598:	80 93 8f 2e 	sts	0x2E8F, r24	; 0x802e8f <__flp>
   1159c:	90 93 90 2e 	sts	0x2E90, r25	; 0x802e90 <__flp+0x1>
   115a0:	fe 01       	movw	r30, r28
   115a2:	32 96       	adiw	r30, 0x02	; 2
   115a4:	44 c0       	rjmp	.+136    	; 0x1162e <malloc+0x124>
   115a6:	fe 01       	movw	r30, r28
   115a8:	e2 0f       	add	r30, r18
   115aa:	f3 1f       	adc	r31, r19
   115ac:	81 93       	st	Z+, r24
   115ae:	91 93       	st	Z+, r25
   115b0:	22 50       	subi	r18, 0x02	; 2
   115b2:	31 09       	sbc	r19, r1
   115b4:	28 83       	st	Y, r18
   115b6:	39 83       	std	Y+1, r19	; 0x01
   115b8:	3a c0       	rjmp	.+116    	; 0x1162e <malloc+0x124>
   115ba:	20 91 8d 2e 	lds	r18, 0x2E8D	; 0x802e8d <__brkval>
   115be:	30 91 8e 2e 	lds	r19, 0x2E8E	; 0x802e8e <__brkval+0x1>
   115c2:	23 2b       	or	r18, r19
   115c4:	41 f4       	brne	.+16     	; 0x115d6 <malloc+0xcc>
   115c6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
   115ca:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
   115ce:	20 93 8d 2e 	sts	0x2E8D, r18	; 0x802e8d <__brkval>
   115d2:	30 93 8e 2e 	sts	0x2E8E, r19	; 0x802e8e <__brkval+0x1>
   115d6:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
   115da:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
   115de:	21 15       	cp	r18, r1
   115e0:	31 05       	cpc	r19, r1
   115e2:	41 f4       	brne	.+16     	; 0x115f4 <malloc+0xea>
   115e4:	2d b7       	in	r18, 0x3d	; 61
   115e6:	3e b7       	in	r19, 0x3e	; 62
   115e8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
   115ec:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
   115f0:	24 1b       	sub	r18, r20
   115f2:	35 0b       	sbc	r19, r21
   115f4:	e0 91 8d 2e 	lds	r30, 0x2E8D	; 0x802e8d <__brkval>
   115f8:	f0 91 8e 2e 	lds	r31, 0x2E8E	; 0x802e8e <__brkval+0x1>
   115fc:	e2 17       	cp	r30, r18
   115fe:	f3 07       	cpc	r31, r19
   11600:	a0 f4       	brcc	.+40     	; 0x1162a <malloc+0x120>
   11602:	2e 1b       	sub	r18, r30
   11604:	3f 0b       	sbc	r19, r31
   11606:	28 17       	cp	r18, r24
   11608:	39 07       	cpc	r19, r25
   1160a:	78 f0       	brcs	.+30     	; 0x1162a <malloc+0x120>
   1160c:	ac 01       	movw	r20, r24
   1160e:	4e 5f       	subi	r20, 0xFE	; 254
   11610:	5f 4f       	sbci	r21, 0xFF	; 255
   11612:	24 17       	cp	r18, r20
   11614:	35 07       	cpc	r19, r21
   11616:	48 f0       	brcs	.+18     	; 0x1162a <malloc+0x120>
   11618:	4e 0f       	add	r20, r30
   1161a:	5f 1f       	adc	r21, r31
   1161c:	40 93 8d 2e 	sts	0x2E8D, r20	; 0x802e8d <__brkval>
   11620:	50 93 8e 2e 	sts	0x2E8E, r21	; 0x802e8e <__brkval+0x1>
   11624:	81 93       	st	Z+, r24
   11626:	91 93       	st	Z+, r25
   11628:	02 c0       	rjmp	.+4      	; 0x1162e <malloc+0x124>
   1162a:	e0 e0       	ldi	r30, 0x00	; 0
   1162c:	f0 e0       	ldi	r31, 0x00	; 0
   1162e:	cf 01       	movw	r24, r30
   11630:	df 91       	pop	r29
   11632:	cf 91       	pop	r28
   11634:	1f 91       	pop	r17
   11636:	0f 91       	pop	r16
   11638:	08 95       	ret

0001163a <free>:
   1163a:	cf 93       	push	r28
   1163c:	df 93       	push	r29
   1163e:	00 97       	sbiw	r24, 0x00	; 0
   11640:	09 f4       	brne	.+2      	; 0x11644 <free+0xa>
   11642:	81 c0       	rjmp	.+258    	; 0x11746 <free+0x10c>
   11644:	fc 01       	movw	r30, r24
   11646:	32 97       	sbiw	r30, 0x02	; 2
   11648:	12 82       	std	Z+2, r1	; 0x02
   1164a:	13 82       	std	Z+3, r1	; 0x03
   1164c:	a0 91 8f 2e 	lds	r26, 0x2E8F	; 0x802e8f <__flp>
   11650:	b0 91 90 2e 	lds	r27, 0x2E90	; 0x802e90 <__flp+0x1>
   11654:	10 97       	sbiw	r26, 0x00	; 0
   11656:	81 f4       	brne	.+32     	; 0x11678 <free+0x3e>
   11658:	20 81       	ld	r18, Z
   1165a:	31 81       	ldd	r19, Z+1	; 0x01
   1165c:	82 0f       	add	r24, r18
   1165e:	93 1f       	adc	r25, r19
   11660:	20 91 8d 2e 	lds	r18, 0x2E8D	; 0x802e8d <__brkval>
   11664:	30 91 8e 2e 	lds	r19, 0x2E8E	; 0x802e8e <__brkval+0x1>
   11668:	28 17       	cp	r18, r24
   1166a:	39 07       	cpc	r19, r25
   1166c:	51 f5       	brne	.+84     	; 0x116c2 <free+0x88>
   1166e:	e0 93 8d 2e 	sts	0x2E8D, r30	; 0x802e8d <__brkval>
   11672:	f0 93 8e 2e 	sts	0x2E8E, r31	; 0x802e8e <__brkval+0x1>
   11676:	67 c0       	rjmp	.+206    	; 0x11746 <free+0x10c>
   11678:	ed 01       	movw	r28, r26
   1167a:	20 e0       	ldi	r18, 0x00	; 0
   1167c:	30 e0       	ldi	r19, 0x00	; 0
   1167e:	ce 17       	cp	r28, r30
   11680:	df 07       	cpc	r29, r31
   11682:	40 f4       	brcc	.+16     	; 0x11694 <free+0x5a>
   11684:	4a 81       	ldd	r20, Y+2	; 0x02
   11686:	5b 81       	ldd	r21, Y+3	; 0x03
   11688:	9e 01       	movw	r18, r28
   1168a:	41 15       	cp	r20, r1
   1168c:	51 05       	cpc	r21, r1
   1168e:	f1 f0       	breq	.+60     	; 0x116cc <free+0x92>
   11690:	ea 01       	movw	r28, r20
   11692:	f5 cf       	rjmp	.-22     	; 0x1167e <free+0x44>
   11694:	c2 83       	std	Z+2, r28	; 0x02
   11696:	d3 83       	std	Z+3, r29	; 0x03
   11698:	40 81       	ld	r20, Z
   1169a:	51 81       	ldd	r21, Z+1	; 0x01
   1169c:	84 0f       	add	r24, r20
   1169e:	95 1f       	adc	r25, r21
   116a0:	c8 17       	cp	r28, r24
   116a2:	d9 07       	cpc	r29, r25
   116a4:	59 f4       	brne	.+22     	; 0x116bc <free+0x82>
   116a6:	88 81       	ld	r24, Y
   116a8:	99 81       	ldd	r25, Y+1	; 0x01
   116aa:	84 0f       	add	r24, r20
   116ac:	95 1f       	adc	r25, r21
   116ae:	02 96       	adiw	r24, 0x02	; 2
   116b0:	80 83       	st	Z, r24
   116b2:	91 83       	std	Z+1, r25	; 0x01
   116b4:	8a 81       	ldd	r24, Y+2	; 0x02
   116b6:	9b 81       	ldd	r25, Y+3	; 0x03
   116b8:	82 83       	std	Z+2, r24	; 0x02
   116ba:	93 83       	std	Z+3, r25	; 0x03
   116bc:	21 15       	cp	r18, r1
   116be:	31 05       	cpc	r19, r1
   116c0:	29 f4       	brne	.+10     	; 0x116cc <free+0x92>
   116c2:	e0 93 8f 2e 	sts	0x2E8F, r30	; 0x802e8f <__flp>
   116c6:	f0 93 90 2e 	sts	0x2E90, r31	; 0x802e90 <__flp+0x1>
   116ca:	3d c0       	rjmp	.+122    	; 0x11746 <free+0x10c>
   116cc:	e9 01       	movw	r28, r18
   116ce:	ea 83       	std	Y+2, r30	; 0x02
   116d0:	fb 83       	std	Y+3, r31	; 0x03
   116d2:	49 91       	ld	r20, Y+
   116d4:	59 91       	ld	r21, Y+
   116d6:	c4 0f       	add	r28, r20
   116d8:	d5 1f       	adc	r29, r21
   116da:	ec 17       	cp	r30, r28
   116dc:	fd 07       	cpc	r31, r29
   116de:	61 f4       	brne	.+24     	; 0x116f8 <free+0xbe>
   116e0:	80 81       	ld	r24, Z
   116e2:	91 81       	ldd	r25, Z+1	; 0x01
   116e4:	84 0f       	add	r24, r20
   116e6:	95 1f       	adc	r25, r21
   116e8:	02 96       	adiw	r24, 0x02	; 2
   116ea:	e9 01       	movw	r28, r18
   116ec:	88 83       	st	Y, r24
   116ee:	99 83       	std	Y+1, r25	; 0x01
   116f0:	82 81       	ldd	r24, Z+2	; 0x02
   116f2:	93 81       	ldd	r25, Z+3	; 0x03
   116f4:	8a 83       	std	Y+2, r24	; 0x02
   116f6:	9b 83       	std	Y+3, r25	; 0x03
   116f8:	e0 e0       	ldi	r30, 0x00	; 0
   116fa:	f0 e0       	ldi	r31, 0x00	; 0
   116fc:	12 96       	adiw	r26, 0x02	; 2
   116fe:	8d 91       	ld	r24, X+
   11700:	9c 91       	ld	r25, X
   11702:	13 97       	sbiw	r26, 0x03	; 3
   11704:	00 97       	sbiw	r24, 0x00	; 0
   11706:	19 f0       	breq	.+6      	; 0x1170e <free+0xd4>
   11708:	fd 01       	movw	r30, r26
   1170a:	dc 01       	movw	r26, r24
   1170c:	f7 cf       	rjmp	.-18     	; 0x116fc <free+0xc2>
   1170e:	8d 91       	ld	r24, X+
   11710:	9c 91       	ld	r25, X
   11712:	11 97       	sbiw	r26, 0x01	; 1
   11714:	9d 01       	movw	r18, r26
   11716:	2e 5f       	subi	r18, 0xFE	; 254
   11718:	3f 4f       	sbci	r19, 0xFF	; 255
   1171a:	82 0f       	add	r24, r18
   1171c:	93 1f       	adc	r25, r19
   1171e:	20 91 8d 2e 	lds	r18, 0x2E8D	; 0x802e8d <__brkval>
   11722:	30 91 8e 2e 	lds	r19, 0x2E8E	; 0x802e8e <__brkval+0x1>
   11726:	28 17       	cp	r18, r24
   11728:	39 07       	cpc	r19, r25
   1172a:	69 f4       	brne	.+26     	; 0x11746 <free+0x10c>
   1172c:	30 97       	sbiw	r30, 0x00	; 0
   1172e:	29 f4       	brne	.+10     	; 0x1173a <free+0x100>
   11730:	10 92 8f 2e 	sts	0x2E8F, r1	; 0x802e8f <__flp>
   11734:	10 92 90 2e 	sts	0x2E90, r1	; 0x802e90 <__flp+0x1>
   11738:	02 c0       	rjmp	.+4      	; 0x1173e <free+0x104>
   1173a:	12 82       	std	Z+2, r1	; 0x02
   1173c:	13 82       	std	Z+3, r1	; 0x03
   1173e:	a0 93 8d 2e 	sts	0x2E8D, r26	; 0x802e8d <__brkval>
   11742:	b0 93 8e 2e 	sts	0x2E8E, r27	; 0x802e8e <__brkval+0x1>
   11746:	df 91       	pop	r29
   11748:	cf 91       	pop	r28
   1174a:	08 95       	ret

0001174c <strtod>:
   1174c:	8f 92       	push	r8
   1174e:	9f 92       	push	r9
   11750:	af 92       	push	r10
   11752:	bf 92       	push	r11
   11754:	cf 92       	push	r12
   11756:	df 92       	push	r13
   11758:	ef 92       	push	r14
   1175a:	ff 92       	push	r15
   1175c:	0f 93       	push	r16
   1175e:	1f 93       	push	r17
   11760:	cf 93       	push	r28
   11762:	df 93       	push	r29
   11764:	ec 01       	movw	r28, r24
   11766:	6b 01       	movw	r12, r22
   11768:	61 15       	cp	r22, r1
   1176a:	71 05       	cpc	r23, r1
   1176c:	19 f0       	breq	.+6      	; 0x11774 <strtod+0x28>
   1176e:	fb 01       	movw	r30, r22
   11770:	80 83       	st	Z, r24
   11772:	91 83       	std	Z+1, r25	; 0x01
   11774:	7e 01       	movw	r14, r28
   11776:	ff ef       	ldi	r31, 0xFF	; 255
   11778:	ef 1a       	sub	r14, r31
   1177a:	ff 0a       	sbc	r15, r31
   1177c:	08 81       	ld	r16, Y
   1177e:	80 2f       	mov	r24, r16
   11780:	90 e0       	ldi	r25, 0x00	; 0
   11782:	3b d1       	rcall	.+630    	; 0x119fa <isspace>
   11784:	89 2b       	or	r24, r25
   11786:	11 f0       	breq	.+4      	; 0x1178c <strtod+0x40>
   11788:	e7 01       	movw	r28, r14
   1178a:	f4 cf       	rjmp	.-24     	; 0x11774 <strtod+0x28>
   1178c:	0d 32       	cpi	r16, 0x2D	; 45
   1178e:	39 f4       	brne	.+14     	; 0x1179e <strtod+0x52>
   11790:	7e 01       	movw	r14, r28
   11792:	82 e0       	ldi	r24, 0x02	; 2
   11794:	e8 0e       	add	r14, r24
   11796:	f1 1c       	adc	r15, r1
   11798:	09 81       	ldd	r16, Y+1	; 0x01
   1179a:	11 e0       	ldi	r17, 0x01	; 1
   1179c:	08 c0       	rjmp	.+16     	; 0x117ae <strtod+0x62>
   1179e:	0b 32       	cpi	r16, 0x2B	; 43
   117a0:	29 f4       	brne	.+10     	; 0x117ac <strtod+0x60>
   117a2:	7e 01       	movw	r14, r28
   117a4:	92 e0       	ldi	r25, 0x02	; 2
   117a6:	e9 0e       	add	r14, r25
   117a8:	f1 1c       	adc	r15, r1
   117aa:	09 81       	ldd	r16, Y+1	; 0x01
   117ac:	10 e0       	ldi	r17, 0x00	; 0
   117ae:	e7 01       	movw	r28, r14
   117b0:	21 97       	sbiw	r28, 0x01	; 1
   117b2:	43 e0       	ldi	r20, 0x03	; 3
   117b4:	50 e0       	ldi	r21, 0x00	; 0
   117b6:	62 ec       	ldi	r22, 0xC2	; 194
   117b8:	73 e0       	ldi	r23, 0x03	; 3
   117ba:	ce 01       	movw	r24, r28
   117bc:	b4 dc       	rcall	.-1688   	; 0x11126 <strncasecmp_P>
   117be:	89 2b       	or	r24, r25
   117c0:	b9 f4       	brne	.+46     	; 0x117f0 <strtod+0xa4>
   117c2:	23 96       	adiw	r28, 0x03	; 3
   117c4:	45 e0       	ldi	r20, 0x05	; 5
   117c6:	50 e0       	ldi	r21, 0x00	; 0
   117c8:	6d eb       	ldi	r22, 0xBD	; 189
   117ca:	73 e0       	ldi	r23, 0x03	; 3
   117cc:	ce 01       	movw	r24, r28
   117ce:	ab dc       	rcall	.-1706   	; 0x11126 <strncasecmp_P>
   117d0:	89 2b       	or	r24, r25
   117d2:	09 f4       	brne	.+2      	; 0x117d6 <strtod+0x8a>
   117d4:	25 96       	adiw	r28, 0x05	; 5
   117d6:	c1 14       	cp	r12, r1
   117d8:	d1 04       	cpc	r13, r1
   117da:	19 f0       	breq	.+6      	; 0x117e2 <strtod+0x96>
   117dc:	f6 01       	movw	r30, r12
   117de:	c0 83       	st	Z, r28
   117e0:	d1 83       	std	Z+1, r29	; 0x01
   117e2:	11 11       	cpse	r17, r1
   117e4:	f4 c0       	rjmp	.+488    	; 0x119ce <strtod+0x282>
   117e6:	60 e0       	ldi	r22, 0x00	; 0
   117e8:	70 e0       	ldi	r23, 0x00	; 0
   117ea:	80 e8       	ldi	r24, 0x80	; 128
   117ec:	9f e7       	ldi	r25, 0x7F	; 127
   117ee:	f8 c0       	rjmp	.+496    	; 0x119e0 <strtod+0x294>
   117f0:	43 e0       	ldi	r20, 0x03	; 3
   117f2:	50 e0       	ldi	r21, 0x00	; 0
   117f4:	6a eb       	ldi	r22, 0xBA	; 186
   117f6:	73 e0       	ldi	r23, 0x03	; 3
   117f8:	ce 01       	movw	r24, r28
   117fa:	95 dc       	rcall	.-1750   	; 0x11126 <strncasecmp_P>
   117fc:	89 2b       	or	r24, r25
   117fe:	59 f4       	brne	.+22     	; 0x11816 <strtod+0xca>
   11800:	c1 14       	cp	r12, r1
   11802:	d1 04       	cpc	r13, r1
   11804:	09 f4       	brne	.+2      	; 0x11808 <strtod+0xbc>
   11806:	e8 c0       	rjmp	.+464    	; 0x119d8 <strtod+0x28c>
   11808:	f2 e0       	ldi	r31, 0x02	; 2
   1180a:	ef 0e       	add	r14, r31
   1180c:	f1 1c       	adc	r15, r1
   1180e:	f6 01       	movw	r30, r12
   11810:	e0 82       	st	Z, r14
   11812:	f1 82       	std	Z+1, r15	; 0x01
   11814:	e1 c0       	rjmp	.+450    	; 0x119d8 <strtod+0x28c>
   11816:	20 e0       	ldi	r18, 0x00	; 0
   11818:	30 e0       	ldi	r19, 0x00	; 0
   1181a:	a9 01       	movw	r20, r18
   1181c:	c0 e0       	ldi	r28, 0x00	; 0
   1181e:	d0 e0       	ldi	r29, 0x00	; 0
   11820:	f7 01       	movw	r30, r14
   11822:	60 ed       	ldi	r22, 0xD0	; 208
   11824:	a6 2e       	mov	r10, r22
   11826:	a0 0e       	add	r10, r16
   11828:	89 e0       	ldi	r24, 0x09	; 9
   1182a:	8a 15       	cp	r24, r10
   1182c:	28 f1       	brcs	.+74     	; 0x11878 <strtod+0x12c>
   1182e:	91 2f       	mov	r25, r17
   11830:	92 60       	ori	r25, 0x02	; 2
   11832:	b9 2e       	mov	r11, r25
   11834:	81 2f       	mov	r24, r17
   11836:	88 70       	andi	r24, 0x08	; 8
   11838:	12 ff       	sbrs	r17, 2
   1183a:	04 c0       	rjmp	.+8      	; 0x11844 <strtod+0xf8>
   1183c:	81 11       	cpse	r24, r1
   1183e:	23 c0       	rjmp	.+70     	; 0x11886 <strtod+0x13a>
   11840:	21 96       	adiw	r28, 0x01	; 1
   11842:	21 c0       	rjmp	.+66     	; 0x11886 <strtod+0x13a>
   11844:	81 11       	cpse	r24, r1
   11846:	21 97       	sbiw	r28, 0x01	; 1
   11848:	a5 e0       	ldi	r26, 0x05	; 5
   1184a:	b0 e0       	ldi	r27, 0x00	; 0
   1184c:	d4 d9       	rcall	.-3160   	; 0x10bf6 <__muluhisi3>
   1184e:	dc 01       	movw	r26, r24
   11850:	cb 01       	movw	r24, r22
   11852:	88 0f       	add	r24, r24
   11854:	99 1f       	adc	r25, r25
   11856:	aa 1f       	adc	r26, r26
   11858:	bb 1f       	adc	r27, r27
   1185a:	9c 01       	movw	r18, r24
   1185c:	ad 01       	movw	r20, r26
   1185e:	2a 0d       	add	r18, r10
   11860:	31 1d       	adc	r19, r1
   11862:	41 1d       	adc	r20, r1
   11864:	51 1d       	adc	r21, r1
   11866:	28 39       	cpi	r18, 0x98	; 152
   11868:	89 e9       	ldi	r24, 0x99	; 153
   1186a:	38 07       	cpc	r19, r24
   1186c:	48 07       	cpc	r20, r24
   1186e:	89 e1       	ldi	r24, 0x19	; 25
   11870:	58 07       	cpc	r21, r24
   11872:	48 f0       	brcs	.+18     	; 0x11886 <strtod+0x13a>
   11874:	16 60       	ori	r17, 0x06	; 6
   11876:	06 c0       	rjmp	.+12     	; 0x11884 <strtod+0x138>
   11878:	9e ef       	ldi	r25, 0xFE	; 254
   1187a:	a9 12       	cpse	r10, r25
   1187c:	0a c0       	rjmp	.+20     	; 0x11892 <strtod+0x146>
   1187e:	13 fd       	sbrc	r17, 3
   11880:	40 c0       	rjmp	.+128    	; 0x11902 <strtod+0x1b6>
   11882:	18 60       	ori	r17, 0x08	; 8
   11884:	b1 2e       	mov	r11, r17
   11886:	8f ef       	ldi	r24, 0xFF	; 255
   11888:	e8 1a       	sub	r14, r24
   1188a:	f8 0a       	sbc	r15, r24
   1188c:	00 81       	ld	r16, Z
   1188e:	1b 2d       	mov	r17, r11
   11890:	c7 cf       	rjmp	.-114    	; 0x11820 <strtod+0xd4>
   11892:	80 2f       	mov	r24, r16
   11894:	8f 7d       	andi	r24, 0xDF	; 223
   11896:	85 34       	cpi	r24, 0x45	; 69
   11898:	a1 f5       	brne	.+104    	; 0x11902 <strtod+0x1b6>
   1189a:	80 81       	ld	r24, Z
   1189c:	8d 32       	cpi	r24, 0x2D	; 45
   1189e:	11 f4       	brne	.+4      	; 0x118a4 <strtod+0x158>
   118a0:	10 61       	ori	r17, 0x10	; 16
   118a2:	06 c0       	rjmp	.+12     	; 0x118b0 <strtod+0x164>
   118a4:	8b 32       	cpi	r24, 0x2B	; 43
   118a6:	21 f0       	breq	.+8      	; 0x118b0 <strtod+0x164>
   118a8:	31 96       	adiw	r30, 0x01	; 1
   118aa:	61 e0       	ldi	r22, 0x01	; 1
   118ac:	70 e0       	ldi	r23, 0x00	; 0
   118ae:	04 c0       	rjmp	.+8      	; 0x118b8 <strtod+0x16c>
   118b0:	81 81       	ldd	r24, Z+1	; 0x01
   118b2:	32 96       	adiw	r30, 0x02	; 2
   118b4:	62 e0       	ldi	r22, 0x02	; 2
   118b6:	70 e0       	ldi	r23, 0x00	; 0
   118b8:	80 53       	subi	r24, 0x30	; 48
   118ba:	8a 30       	cpi	r24, 0x0A	; 10
   118bc:	18 f0       	brcs	.+6      	; 0x118c4 <strtod+0x178>
   118be:	e6 1b       	sub	r30, r22
   118c0:	f7 0b       	sbc	r31, r23
   118c2:	1f c0       	rjmp	.+62     	; 0x11902 <strtod+0x1b6>
   118c4:	60 e0       	ldi	r22, 0x00	; 0
   118c6:	70 e0       	ldi	r23, 0x00	; 0
   118c8:	60 38       	cpi	r22, 0x80	; 128
   118ca:	9c e0       	ldi	r25, 0x0C	; 12
   118cc:	79 07       	cpc	r23, r25
   118ce:	5c f4       	brge	.+22     	; 0x118e6 <strtod+0x19a>
   118d0:	db 01       	movw	r26, r22
   118d2:	aa 0f       	add	r26, r26
   118d4:	bb 1f       	adc	r27, r27
   118d6:	aa 0f       	add	r26, r26
   118d8:	bb 1f       	adc	r27, r27
   118da:	6a 0f       	add	r22, r26
   118dc:	7b 1f       	adc	r23, r27
   118de:	66 0f       	add	r22, r22
   118e0:	77 1f       	adc	r23, r23
   118e2:	68 0f       	add	r22, r24
   118e4:	71 1d       	adc	r23, r1
   118e6:	31 96       	adiw	r30, 0x01	; 1
   118e8:	df 01       	movw	r26, r30
   118ea:	11 97       	sbiw	r26, 0x01	; 1
   118ec:	8c 91       	ld	r24, X
   118ee:	80 53       	subi	r24, 0x30	; 48
   118f0:	8a 30       	cpi	r24, 0x0A	; 10
   118f2:	50 f3       	brcs	.-44     	; 0x118c8 <strtod+0x17c>
   118f4:	14 ff       	sbrs	r17, 4
   118f6:	03 c0       	rjmp	.+6      	; 0x118fe <strtod+0x1b2>
   118f8:	71 95       	neg	r23
   118fa:	61 95       	neg	r22
   118fc:	71 09       	sbc	r23, r1
   118fe:	c6 0f       	add	r28, r22
   11900:	d7 1f       	adc	r29, r23
   11902:	11 ff       	sbrs	r17, 1
   11904:	08 c0       	rjmp	.+16     	; 0x11916 <strtod+0x1ca>
   11906:	c1 14       	cp	r12, r1
   11908:	d1 04       	cpc	r13, r1
   1190a:	29 f0       	breq	.+10     	; 0x11916 <strtod+0x1ca>
   1190c:	cf 01       	movw	r24, r30
   1190e:	01 97       	sbiw	r24, 0x01	; 1
   11910:	f6 01       	movw	r30, r12
   11912:	80 83       	st	Z, r24
   11914:	91 83       	std	Z+1, r25	; 0x01
   11916:	ca 01       	movw	r24, r20
   11918:	b9 01       	movw	r22, r18
   1191a:	0e 94 96 82 	call	0x1052c	; 0x1052c <__floatunsisf>
   1191e:	21 2f       	mov	r18, r17
   11920:	23 70       	andi	r18, 0x03	; 3
   11922:	23 30       	cpi	r18, 0x03	; 3
   11924:	19 f0       	breq	.+6      	; 0x1192c <strtod+0x1e0>
   11926:	4b 01       	movw	r8, r22
   11928:	5c 01       	movw	r10, r24
   1192a:	06 c0       	rjmp	.+12     	; 0x11938 <strtod+0x1ec>
   1192c:	4b 01       	movw	r8, r22
   1192e:	5c 01       	movw	r10, r24
   11930:	b7 fa       	bst	r11, 7
   11932:	b0 94       	com	r11
   11934:	b7 f8       	bld	r11, 7
   11936:	b0 94       	com	r11
   11938:	20 e0       	ldi	r18, 0x00	; 0
   1193a:	30 e0       	ldi	r19, 0x00	; 0
   1193c:	a9 01       	movw	r20, r18
   1193e:	c5 01       	movw	r24, r10
   11940:	b4 01       	movw	r22, r8
   11942:	0e 94 f6 81 	call	0x103ec	; 0x103ec <__cmpsf2>
   11946:	88 23       	and	r24, r24
   11948:	09 f4       	brne	.+2      	; 0x1194c <strtod+0x200>
   1194a:	3e c0       	rjmp	.+124    	; 0x119c8 <strtod+0x27c>
   1194c:	d7 ff       	sbrs	r29, 7
   1194e:	06 c0       	rjmp	.+12     	; 0x1195c <strtod+0x210>
   11950:	d1 95       	neg	r29
   11952:	c1 95       	neg	r28
   11954:	d1 09       	sbc	r29, r1
   11956:	09 ed       	ldi	r16, 0xD9	; 217
   11958:	13 e0       	ldi	r17, 0x03	; 3
   1195a:	02 c0       	rjmp	.+4      	; 0x11960 <strtod+0x214>
   1195c:	01 ef       	ldi	r16, 0xF1	; 241
   1195e:	13 e0       	ldi	r17, 0x03	; 3
   11960:	68 01       	movw	r12, r16
   11962:	f8 e1       	ldi	r31, 0x18	; 24
   11964:	cf 1a       	sub	r12, r31
   11966:	d1 08       	sbc	r13, r1
   11968:	90 e2       	ldi	r25, 0x20	; 32
   1196a:	e9 2e       	mov	r14, r25
   1196c:	f1 2c       	mov	r15, r1
   1196e:	ce 15       	cp	r28, r14
   11970:	df 05       	cpc	r29, r15
   11972:	74 f0       	brlt	.+28     	; 0x11990 <strtod+0x244>
   11974:	f8 01       	movw	r30, r16
   11976:	25 91       	lpm	r18, Z+
   11978:	35 91       	lpm	r19, Z+
   1197a:	45 91       	lpm	r20, Z+
   1197c:	54 91       	lpm	r21, Z
   1197e:	c5 01       	movw	r24, r10
   11980:	b4 01       	movw	r22, r8
   11982:	0e 94 85 83 	call	0x1070a	; 0x1070a <__mulsf3>
   11986:	4b 01       	movw	r8, r22
   11988:	5c 01       	movw	r10, r24
   1198a:	ce 19       	sub	r28, r14
   1198c:	df 09       	sbc	r29, r15
   1198e:	ef cf       	rjmp	.-34     	; 0x1196e <strtod+0x222>
   11990:	04 50       	subi	r16, 0x04	; 4
   11992:	11 09       	sbc	r17, r1
   11994:	f5 94       	asr	r15
   11996:	e7 94       	ror	r14
   11998:	0c 15       	cp	r16, r12
   1199a:	1d 05       	cpc	r17, r13
   1199c:	41 f7       	brne	.-48     	; 0x1196e <strtod+0x222>
   1199e:	8a 2d       	mov	r24, r10
   119a0:	88 0f       	add	r24, r24
   119a2:	8b 2d       	mov	r24, r11
   119a4:	88 1f       	adc	r24, r24
   119a6:	8f 3f       	cpi	r24, 0xFF	; 255
   119a8:	49 f0       	breq	.+18     	; 0x119bc <strtod+0x270>
   119aa:	20 e0       	ldi	r18, 0x00	; 0
   119ac:	30 e0       	ldi	r19, 0x00	; 0
   119ae:	a9 01       	movw	r20, r18
   119b0:	c5 01       	movw	r24, r10
   119b2:	b4 01       	movw	r22, r8
   119b4:	0e 94 f6 81 	call	0x103ec	; 0x103ec <__cmpsf2>
   119b8:	81 11       	cpse	r24, r1
   119ba:	06 c0       	rjmp	.+12     	; 0x119c8 <strtod+0x27c>
   119bc:	82 e2       	ldi	r24, 0x22	; 34
   119be:	90 e0       	ldi	r25, 0x00	; 0
   119c0:	80 93 91 2e 	sts	0x2E91, r24	; 0x802e91 <errno>
   119c4:	90 93 92 2e 	sts	0x2E92, r25	; 0x802e92 <errno+0x1>
   119c8:	c5 01       	movw	r24, r10
   119ca:	b4 01       	movw	r22, r8
   119cc:	09 c0       	rjmp	.+18     	; 0x119e0 <strtod+0x294>
   119ce:	60 e0       	ldi	r22, 0x00	; 0
   119d0:	70 e0       	ldi	r23, 0x00	; 0
   119d2:	80 e8       	ldi	r24, 0x80	; 128
   119d4:	9f ef       	ldi	r25, 0xFF	; 255
   119d6:	04 c0       	rjmp	.+8      	; 0x119e0 <strtod+0x294>
   119d8:	60 e0       	ldi	r22, 0x00	; 0
   119da:	70 e0       	ldi	r23, 0x00	; 0
   119dc:	80 ec       	ldi	r24, 0xC0	; 192
   119de:	9f e7       	ldi	r25, 0x7F	; 127
   119e0:	df 91       	pop	r29
   119e2:	cf 91       	pop	r28
   119e4:	1f 91       	pop	r17
   119e6:	0f 91       	pop	r16
   119e8:	ff 90       	pop	r15
   119ea:	ef 90       	pop	r14
   119ec:	df 90       	pop	r13
   119ee:	cf 90       	pop	r12
   119f0:	bf 90       	pop	r11
   119f2:	af 90       	pop	r10
   119f4:	9f 90       	pop	r9
   119f6:	8f 90       	pop	r8
   119f8:	08 95       	ret

000119fa <isspace>:
   119fa:	91 11       	cpse	r25, r1
   119fc:	0d c0       	rjmp	.+26     	; 0x11a18 <__ctype_isfalse>
   119fe:	80 32       	cpi	r24, 0x20	; 32
   11a00:	19 f0       	breq	.+6      	; 0x11a08 <isspace+0xe>
   11a02:	89 50       	subi	r24, 0x09	; 9
   11a04:	85 50       	subi	r24, 0x05	; 5
   11a06:	d0 f7       	brcc	.-12     	; 0x119fc <isspace+0x2>
   11a08:	08 95       	ret

00011a0a <memset>:
   11a0a:	dc 01       	movw	r26, r24
   11a0c:	01 c0       	rjmp	.+2      	; 0x11a10 <memset+0x6>
   11a0e:	6d 93       	st	X+, r22
   11a10:	41 50       	subi	r20, 0x01	; 1
   11a12:	50 40       	sbci	r21, 0x00	; 0
   11a14:	e0 f7       	brcc	.-8      	; 0x11a0e <memset+0x4>
   11a16:	08 95       	ret

00011a18 <__ctype_isfalse>:
   11a18:	99 27       	eor	r25, r25
   11a1a:	88 27       	eor	r24, r24

00011a1c <__ctype_istrue>:
   11a1c:	08 95       	ret

00011a1e <_exit>:
   11a1e:	f8 94       	cli

00011a20 <__stop_program>:
   11a20:	ff cf       	rjmp	.-2      	; 0x11a20 <__stop_program>

Disassembly of section .BOOT:

00011a22 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   11a22:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   11a24:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   11a26:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   11a28:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   11a2c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   11a30:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   11a32:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   11a36:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   11a38:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   11a3c:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   11a3e:	08 95       	ret

00011a40 <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   11a40:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   11a44:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   11a46:	fc cf       	rjmp	.-8      	; 0x11a40 <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   11a48:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   11a4a:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   11a4c:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   11a4e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   11a52:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   11a54:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   11a58:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   11a5a:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   11a5c:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   11a5e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   11a62:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   11a64:	08 95       	ret
