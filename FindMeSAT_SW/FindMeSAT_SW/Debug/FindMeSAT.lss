
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000083a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00802000  000083a6  0000843a  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000497  00802154  00802154  00008590  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000858e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000085ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000958  00000000  00000000  00008630  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001849a  00000000  00000000  00008f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006563  00000000  00000000  00021422  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000da86  00000000  00000000  00027985  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002668  00000000  00000000  0003540c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003e70d  00000000  00000000  00037a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000088b7  00000000  00000000  00076181  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000900  00000000  00000000  0007ea38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000055cc  00000000  00000000  0007f338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__ctors_end>
       4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      10:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      14:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      18:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__vector_6>
      1c:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__vector_7>
      20:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__vector_8>
      24:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__vector_9>
      28:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      2c:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__vector_11>
      30:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      34:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <__vector_13>
      38:	0c 94 4f 19 	jmp	0x329e	; 0x329e <__vector_14>
      3c:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__vector_15>
      40:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__vector_16>
      44:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__vector_17>
      48:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__vector_18>
      4c:	0c 94 30 1a 	jmp	0x3460	; 0x3460 <__vector_19>
      50:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__vector_20>
      54:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <__vector_21>
      58:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__vector_22>
      5c:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__vector_23>
      60:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      64:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      68:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      6c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      70:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      74:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      78:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      7c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      80:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      84:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      88:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      8c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      90:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      94:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      98:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      9c:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <__vector_39>
      a0:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__vector_40>
      a4:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__vector_41>
      a8:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__vector_42>
      ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b8:	0c 94 e0 20 	jmp	0x41c0	; 0x41c0 <__vector_46>
      bc:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__vector_47>
      c0:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__vector_48>
      c4:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <__vector_49>
      c8:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <__vector_50>
      cc:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <__vector_51>
      d0:	0c 94 b4 1d 	jmp	0x3b68	; 0x3b68 <__vector_52>
      d4:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__vector_53>
      d8:	0c 94 0e 1e 	jmp	0x3c1c	; 0x3c1c <__vector_54>
      dc:	0c 94 3b 1e 	jmp	0x3c76	; 0x3c76 <__vector_55>
      e0:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__vector_56>
      e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      fc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     100:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     104:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     108:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     10c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     110:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     114:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     118:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     11c:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__vector_71>
     120:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__vector_72>
     124:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__vector_73>
     128:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__vector_74>
     12c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     130:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     134:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <__vector_77>
     138:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__vector_78>
     13c:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__vector_79>
     140:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <__vector_80>
     144:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__vector_81>
     148:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__vector_82>
     14c:	0c 94 1f 1c 	jmp	0x383e	; 0x383e <__vector_83>
     150:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__vector_84>
     154:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <__vector_85>
     158:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <__vector_86>
     15c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     160:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     164:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     168:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     16c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     170:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     174:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     178:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     17c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     180:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     184:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     188:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     18c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     190:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     194:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     198:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     19c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1b0:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__vector_108>
     1b4:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__vector_109>
     1b8:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <__vector_110>
     1bc:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__vector_111>
     1c0:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <__vector_112>
     1c4:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__vector_113>
     1c8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1cc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1dc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f4:	0c 94 9d 27 	jmp	0x4f3a	; 0x4f3a <__vector_125>
     1f8:	0c 94 57 28 	jmp	0x50ae	; 0x50ae <__vector_126>
     1fc:	7e 22       	and	r7, r30
     1fe:	81 22       	and	r8, r17
     200:	84 22       	and	r8, r20
     202:	87 22       	and	r8, r23
     204:	8a 22       	and	r8, r26
     206:	8d 22       	and	r8, r29
     208:	90 22       	and	r9, r16
     20a:	cf 29       	or	r28, r15
     20c:	e2 29       	or	r30, r2
     20e:	f5 29       	or	r31, r5
     210:	08 2a       	or	r0, r24
     212:	1b 2a       	or	r1, r27
     214:	2e 2a       	or	r2, r30
     216:	41 2a       	or	r4, r17

00000218 <PM_SINE>:
     218:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     228:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     238:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     248:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     258:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     268:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     278:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     288:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     298:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     2a8:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     2b8:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     2c8:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     2d8:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     2e8:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     2f8:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     308:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     318:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     328:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     338:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     348:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     358:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     368:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     378:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     388:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     398:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     3a8:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     3b8:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     3c8:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     3d8:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     3e8:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     3f8:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     408:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     418:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     428:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     438:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     448:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     458:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     468:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     478:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     488:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     498:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     4a8:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     4b8:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
     4c8:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
     4d8:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
     4e8:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
     4f8:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
     508:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
     518:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
     528:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
     538:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
     548:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
     558:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
     568:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
     578:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
     588:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
     598:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
     5a8:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
     5b8:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
     5c8:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
     5d8:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
     5e8:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
     5f8:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
     608:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
     618:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
     628:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
     638:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
     648:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
     658:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
     668:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
     678:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
     688:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
     698:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
     6a8:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
     6b8:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
     6c8:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
     6d8:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
     6e8:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
     6f8:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
     708:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
     718:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
     728:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
     738:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
     748:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
     758:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
     768:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
     778:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
     788:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
     798:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
     7a8:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
     7b8:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
     7c8:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
     7d8:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
     7e8:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
     7f8:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
     808:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
     818:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
     828:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
     838:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
     848:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
     858:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
     868:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
     878:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
     888:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
     898:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
     8a8:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
     8b8:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
     8c8:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
     8d8:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
     8e8:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
     8f8:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
     908:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
     918:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
     928:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
     938:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
     948:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
     958:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
     968:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
     978:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
     988:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
     998:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
     9a8:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
     9b8:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
     9c8:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
     9d8:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
     9e8:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
     9f8:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
     a08:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
     a18:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
     a28:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
     a38:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
     a48:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
     a58:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
     a68:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
     a78:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
     a88:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
     a98:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
     aa8:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
     ab8:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
     ac8:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
     ad8:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
     ae8:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
     af8:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
     b08:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
     b18:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
     b28:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
     b38:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
     b48:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
     b58:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
     b68:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
     b78:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
     b88:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
     b98:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
     ba8:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
     bb8:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
     bc8:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
     bd8:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
     be8:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
     bf8:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
     c08:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
     c18:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
     c28:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
     c38:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
     c48:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
     c58:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
     c68:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
     c78:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
     c88:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
     c98:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
     ca8:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
     cb8:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
     cc8:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
     cd8:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
     ce8:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
     cf8:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
     d08:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
     d18:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
     d28:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
     d38:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
     d48:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
     d58:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
     d68:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
     d78:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
     d88:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
     d98:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
     da8:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
     db8:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
     dc8:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
     dd8:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
     de8:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
     df8:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
     e08:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
     e18:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
     e28:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
     e38:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
     e48:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
     e58:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
     e68:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
     e78:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
     e88:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
     e98:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
     ea8:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
     eb8:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
     ec8:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
     ed8:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
     ee8:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
     ef8:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
     f08:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
     f18:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
     f28:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
     f38:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
     f48:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
     f58:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
     f68:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
     f78:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
     f88:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
     f98:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
     fa8:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
     fb8:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
     fc8:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
     fd8:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
     fe8:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
     ff8:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1008:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1018:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    1028:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    1038:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    1048:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    1058:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1068:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1078:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1088:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1098:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    10a8:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    10b8:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    10c8:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    10d8:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    10e8:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    10f8:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1108:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1118:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    1128:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    1138:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    1148:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    1158:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1168:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1178:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1188:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1198:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    11a8:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    11b8:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    11c8:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    11d8:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    11e8:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    11f8:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1208:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1218:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    1228:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    1238:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    1248:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    1258:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1268:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1278:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1288:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1298:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    12a8:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    12b8:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    12c8:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    12d8:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    12e8:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    12f8:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1308:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1318:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    1328:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    1338:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    1348:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    1358:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1368:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1378:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1388:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1398:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    13a8:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    13b8:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    13c8:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    13d8:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    13e8:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    13f8:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1408:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1418:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1428:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1438:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1448:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1458:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    1468:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    1478:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    1488:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    1498:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    14a8:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    14b8:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    14c8:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    14d8:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    14e8:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    14f8:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    1508:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    1518:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    1528:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    1538:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    1548:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    1558:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    1568:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    1578:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    1588:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    1598:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    15a8:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    15b8:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    15c8:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    15d8:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    15e8:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    15f8:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    1608:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    1618:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    1628:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    1638:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    1648:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    1658:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    1668:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    1678:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    1688:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    1698:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    16a8:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    16b8:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    16c8:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    16d8:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    16e8:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    16f8:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    1708:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    1718:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    1728:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    1738:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    1748:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    1758:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    1768:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    1778:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    1788:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    1798:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    17a8:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    17b8:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    17c8:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    17d8:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    17e8:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    17f8:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    1808:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    1818:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    1828:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    1838:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    1848:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    1858:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    1868:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    1878:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    1888:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    1898:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    18a8:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    18b8:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    18c8:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    18d8:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    18e8:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    18f8:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    1908:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    1918:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    1928:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    1938:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    1948:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    1958:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    1968:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    1978:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    1988:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    1998:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    19a8:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    19b8:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    19c8:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    19d8:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    19e8:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    19f8:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    1a08:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    1a18:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    1a28:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    1a38:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    1a48:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    1a58:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    1a68:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    1a78:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    1a88:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    1a98:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    1aa8:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    1ab8:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    1ac8:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    1ad8:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    1ae8:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    1af8:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    1b08:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    1b18:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    1b28:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    1b38:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    1b48:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    1b58:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    1b68:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    1b78:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    1b88:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    1b98:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    1ba8:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    1bb8:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    1bc8:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    1bd8:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    1be8:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    1bf8:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    1c08:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    1c18:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    1c28:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    1c38:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    1c48:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    1c58:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    1c68:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    1c78:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    1c88:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    1c98:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    1ca8:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    1cb8:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    1cc8:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    1cd8:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    1ce8:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    1cf8:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    1d08:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    1d18:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    1d28:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    1d38:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    1d48:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    1d58:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    1d68:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    1d78:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    1d88:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    1d98:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    1da8:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    1db8:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    1dc8:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    1dd8:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    1de8:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    1df8:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    1e08:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    1e18:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    1e28:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    1e38:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    1e48:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    1e58:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    1e68:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    1e78:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    1e88:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    1e98:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    1ea8:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    1eb8:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    1ec8:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    1ed8:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    1ee8:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    1ef8:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    1f08:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    1f18:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    1f28:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    1f38:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    1f48:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    1f58:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    1f68:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    1f78:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    1f88:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    1f98:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    1fa8:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    1fb8:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    1fc8:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    1fd8:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    1fe8:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    1ff8:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2008:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2018:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    2028:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    2038:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    2048:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    2058:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2068:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2078:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2088:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2098:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    20a8:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    20b8:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    20c8:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    20d8:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    20e8:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    20f8:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2108:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2118:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    2128:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    2138:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    2148:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    2158:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2168:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2178:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2188:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2198:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    21a8:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    21b8:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    21c8:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    21d8:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    21e8:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    21f8:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2208:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002218 <__ctors_end>:
    2218:	11 24       	eor	r1, r1
    221a:	1f be       	out	0x3f, r1	; 63
    221c:	cf ef       	ldi	r28, 0xFF	; 255
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	df e5       	ldi	r29, 0x5F	; 95
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	0c bf       	out	0x3c, r16	; 60

00002228 <__do_copy_data>:
    2228:	11 e2       	ldi	r17, 0x21	; 33
    222a:	a0 e0       	ldi	r26, 0x00	; 0
    222c:	b0 e2       	ldi	r27, 0x20	; 32
    222e:	e6 ea       	ldi	r30, 0xA6	; 166
    2230:	f3 e8       	ldi	r31, 0x83	; 131
    2232:	00 e0       	ldi	r16, 0x00	; 0
    2234:	0b bf       	out	0x3b, r16	; 59
    2236:	02 c0       	rjmp	.+4      	; 0x223c <__do_copy_data+0x14>
    2238:	07 90       	elpm	r0, Z+
    223a:	0d 92       	st	X+, r0
    223c:	a4 35       	cpi	r26, 0x54	; 84
    223e:	b1 07       	cpc	r27, r17
    2240:	d9 f7       	brne	.-10     	; 0x2238 <__do_copy_data+0x10>

00002242 <__do_clear_bss>:
    2242:	25 e2       	ldi	r18, 0x25	; 37
    2244:	a4 e5       	ldi	r26, 0x54	; 84
    2246:	b1 e2       	ldi	r27, 0x21	; 33
    2248:	01 c0       	rjmp	.+2      	; 0x224c <.do_clear_bss_start>

0000224a <.do_clear_bss_loop>:
    224a:	1d 92       	st	X+, r1

0000224c <.do_clear_bss_start>:
    224c:	ab 3e       	cpi	r26, 0xEB	; 235
    224e:	b2 07       	cpc	r27, r18
    2250:	e1 f7       	brne	.-8      	; 0x224a <.do_clear_bss_loop>
    2252:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <main>
    2256:	0c 94 d1 41 	jmp	0x83a2	; 0x83a2 <_exit>

0000225a <__bad_interrupt>:
    225a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000225e <dma_interrupt>:
void dma_disable(void)
{
	DMA.CTRL = 0;
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	48 2f       	mov	r20, r24
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	fa 01       	movw	r30, r20
    2268:	71 96       	adiw	r30, 0x11	; 17
    226a:	e2 95       	swap	r30
    226c:	f2 95       	swap	r31
    226e:	f0 7f       	andi	r31, 0xF0	; 240
    2270:	fe 27       	eor	r31, r30
    2272:	e0 7f       	andi	r30, 0xF0	; 240
    2274:	fe 27       	eor	r31, r30
    2276:	a0 e0       	ldi	r26, 0x00	; 0
    2278:	b1 e0       	ldi	r27, 0x01	; 1
    227a:	14 96       	adiw	r26, 0x04	; 4
    227c:	9c 91       	ld	r25, X
    227e:	14 97       	sbiw	r26, 0x04	; 4
    2280:	13 96       	adiw	r26, 0x03	; 3
    2282:	6c 91       	ld	r22, X
    2284:	da 01       	movw	r26, r20
    2286:	14 96       	adiw	r26, 0x04	; 4
    2288:	21 e0       	ldi	r18, 0x01	; 1
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	e9 01       	movw	r28, r18
    228e:	08 2e       	mov	r0, r24
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <dma_interrupt+0x38>
    2292:	cc 0f       	add	r28, r28
    2294:	dd 1f       	adc	r29, r29
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <dma_interrupt+0x34>
    229a:	0a 2e       	mov	r0, r26
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <dma_interrupt+0x44>
    229e:	22 0f       	add	r18, r18
    22a0:	33 1f       	adc	r19, r19
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <dma_interrupt+0x40>
    22a6:	2c 2b       	or	r18, r28
    22a8:	62 23       	and	r22, r18
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	eb 01       	movw	r28, r22
    22ae:	0a 2e       	mov	r0, r26
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <dma_interrupt+0x58>
    22b2:	d5 95       	asr	r29
    22b4:	c7 95       	ror	r28
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <dma_interrupt+0x54>
    22ba:	c0 fd       	sbrc	r28, 0
    22bc:	1a c0       	rjmp	.+52     	; 0x22f2 <dma_interrupt+0x94>
    22be:	08 2e       	mov	r0, r24
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <dma_interrupt+0x68>
    22c2:	75 95       	asr	r23
    22c4:	67 95       	ror	r22
    22c6:	0a 94       	dec	r0
    22c8:	e2 f7       	brpl	.-8      	; 0x22c2 <dma_interrupt+0x64>
    22ca:	60 fd       	sbrc	r22, 0
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <dma_interrupt+0x98>
    22ce:	29 23       	and	r18, r25
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	b9 01       	movw	r22, r18
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <dma_interrupt+0x7c>
    22d6:	75 95       	asr	r23
    22d8:	67 95       	ror	r22
    22da:	aa 95       	dec	r26
    22dc:	e2 f7       	brpl	.-8      	; 0x22d6 <dma_interrupt+0x78>
    22de:	60 fd       	sbrc	r22, 0
    22e0:	0c c0       	rjmp	.+24     	; 0x22fa <dma_interrupt+0x9c>
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <dma_interrupt+0x8a>
    22e4:	35 95       	asr	r19
    22e6:	27 95       	ror	r18
    22e8:	8a 95       	dec	r24
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <dma_interrupt+0x86>
    22ec:	82 2f       	mov	r24, r18
    22ee:	81 70       	andi	r24, 0x01	; 1
    22f0:	05 c0       	rjmp	.+10     	; 0x22fc <dma_interrupt+0x9e>
    22f2:	84 e0       	ldi	r24, 0x04	; 4
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <dma_interrupt+0x9e>
    22f6:	83 e0       	ldi	r24, 0x03	; 3
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <dma_interrupt+0x9e>
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	91 81       	ldd	r25, Z+1	; 0x01
    22fe:	90 63       	ori	r25, 0x30	; 48
    2300:	91 83       	std	Z+1, r25	; 0x01
    2302:	44 0f       	add	r20, r20
    2304:	55 1f       	adc	r21, r21
    2306:	fa 01       	movw	r30, r20
    2308:	e9 54       	subi	r30, 0x49	; 73
    230a:	fa 4d       	sbci	r31, 0xDA	; 218
    230c:	01 90       	ld	r0, Z+
    230e:	f0 81       	ld	r31, Z
    2310:	e0 2d       	mov	r30, r0
    2312:	30 97       	sbiw	r30, 0x00	; 0
    2314:	09 f0       	breq	.+2      	; 0x2318 <dma_interrupt+0xba>
    2316:	19 95       	eicall
    2318:	df 91       	pop	r29
    231a:	cf 91       	pop	r28
    231c:	08 95       	ret

0000231e <dma_enable>:
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	1f 92       	push	r1
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	61 e0       	ldi	r22, 0x01	; 1
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
    2330:	80 91 d6 25 	lds	r24, 0x25D6	; 0x8025d6 <sleepmgr_locks+0x1>
    2334:	8f 3f       	cpi	r24, 0xFF	; 255
    2336:	09 f4       	brne	.+2      	; 0x233a <dma_enable+0x1c>
    2338:	ff cf       	rjmp	.-2      	; 0x2338 <dma_enable+0x1a>
    233a:	8f b7       	in	r24, 0x3f	; 63
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	f8 94       	cli
    2340:	99 81       	ldd	r25, Y+1	; 0x01
    2342:	e5 ed       	ldi	r30, 0xD5	; 213
    2344:	f5 e2       	ldi	r31, 0x25	; 37
    2346:	81 81       	ldd	r24, Z+1	; 0x01
    2348:	8f 5f       	subi	r24, 0xFF	; 255
    234a:	81 83       	std	Z+1, r24	; 0x01
    234c:	9f bf       	out	0x3f, r25	; 63
    234e:	e0 e0       	ldi	r30, 0x00	; 0
    2350:	f1 e0       	ldi	r31, 0x01	; 1
    2352:	80 e4       	ldi	r24, 0x40	; 64
    2354:	80 83       	st	Z, r24
    2356:	80 e8       	ldi	r24, 0x80	; 128
    2358:	80 83       	st	Z, r24
    235a:	0f 90       	pop	r0
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	08 95       	ret

00002362 <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    2362:	e8 2f       	mov	r30, r24
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	ee 0f       	add	r30, r30
    2368:	ff 1f       	adc	r31, r31
    236a:	e9 54       	subi	r30, 0x49	; 73
    236c:	fa 4d       	sbci	r31, 0xDA	; 218
    236e:	60 83       	st	Z, r22
    2370:	71 83       	std	Z+1, r23	; 0x01
    2372:	08 95       	ret

00002374 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    2374:	1f 92       	push	r1
    2376:	0f 92       	push	r0
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	0f 92       	push	r0
    237c:	11 24       	eor	r1, r1
    237e:	0b b6       	in	r0, 0x3b	; 59
    2380:	0f 92       	push	r0
    2382:	2f 93       	push	r18
    2384:	3f 93       	push	r19
    2386:	4f 93       	push	r20
    2388:	5f 93       	push	r21
    238a:	6f 93       	push	r22
    238c:	7f 93       	push	r23
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
	dma_interrupt(0);
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	60 df       	rcall	.-320    	; 0x225e <dma_interrupt>
}
    239e:	ff 91       	pop	r31
    23a0:	ef 91       	pop	r30
    23a2:	bf 91       	pop	r27
    23a4:	af 91       	pop	r26
    23a6:	9f 91       	pop	r25
    23a8:	8f 91       	pop	r24
    23aa:	7f 91       	pop	r23
    23ac:	6f 91       	pop	r22
    23ae:	5f 91       	pop	r21
    23b0:	4f 91       	pop	r20
    23b2:	3f 91       	pop	r19
    23b4:	2f 91       	pop	r18
    23b6:	0f 90       	pop	r0
    23b8:	0b be       	out	0x3b, r0	; 59
    23ba:	0f 90       	pop	r0
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	0f 90       	pop	r0
    23c0:	1f 90       	pop	r1
    23c2:	18 95       	reti

000023c4 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    23c4:	1f 92       	push	r1
    23c6:	0f 92       	push	r0
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	0f 92       	push	r0
    23cc:	11 24       	eor	r1, r1
    23ce:	0b b6       	in	r0, 0x3b	; 59
    23d0:	0f 92       	push	r0
    23d2:	2f 93       	push	r18
    23d4:	3f 93       	push	r19
    23d6:	4f 93       	push	r20
    23d8:	5f 93       	push	r21
    23da:	6f 93       	push	r22
    23dc:	7f 93       	push	r23
    23de:	8f 93       	push	r24
    23e0:	9f 93       	push	r25
    23e2:	af 93       	push	r26
    23e4:	bf 93       	push	r27
    23e6:	ef 93       	push	r30
    23e8:	ff 93       	push	r31
	dma_interrupt(1);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	38 df       	rcall	.-400    	; 0x225e <dma_interrupt>
}
    23ee:	ff 91       	pop	r31
    23f0:	ef 91       	pop	r30
    23f2:	bf 91       	pop	r27
    23f4:	af 91       	pop	r26
    23f6:	9f 91       	pop	r25
    23f8:	8f 91       	pop	r24
    23fa:	7f 91       	pop	r23
    23fc:	6f 91       	pop	r22
    23fe:	5f 91       	pop	r21
    2400:	4f 91       	pop	r20
    2402:	3f 91       	pop	r19
    2404:	2f 91       	pop	r18
    2406:	0f 90       	pop	r0
    2408:	0b be       	out	0x3b, r0	; 59
    240a:	0f 90       	pop	r0
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	0f 90       	pop	r0
    2410:	1f 90       	pop	r1
    2412:	18 95       	reti

00002414 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    2414:	1f 92       	push	r1
    2416:	0f 92       	push	r0
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	0f 92       	push	r0
    241c:	11 24       	eor	r1, r1
    241e:	0b b6       	in	r0, 0x3b	; 59
    2420:	0f 92       	push	r0
    2422:	2f 93       	push	r18
    2424:	3f 93       	push	r19
    2426:	4f 93       	push	r20
    2428:	5f 93       	push	r21
    242a:	6f 93       	push	r22
    242c:	7f 93       	push	r23
    242e:	8f 93       	push	r24
    2430:	9f 93       	push	r25
    2432:	af 93       	push	r26
    2434:	bf 93       	push	r27
    2436:	ef 93       	push	r30
    2438:	ff 93       	push	r31
	dma_interrupt(2);
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	10 df       	rcall	.-480    	; 0x225e <dma_interrupt>
}
    243e:	ff 91       	pop	r31
    2440:	ef 91       	pop	r30
    2442:	bf 91       	pop	r27
    2444:	af 91       	pop	r26
    2446:	9f 91       	pop	r25
    2448:	8f 91       	pop	r24
    244a:	7f 91       	pop	r23
    244c:	6f 91       	pop	r22
    244e:	5f 91       	pop	r21
    2450:	4f 91       	pop	r20
    2452:	3f 91       	pop	r19
    2454:	2f 91       	pop	r18
    2456:	0f 90       	pop	r0
    2458:	0b be       	out	0x3b, r0	; 59
    245a:	0f 90       	pop	r0
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	0f 90       	pop	r0
    2460:	1f 90       	pop	r1
    2462:	18 95       	reti

00002464 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    2464:	1f 92       	push	r1
    2466:	0f 92       	push	r0
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	0f 92       	push	r0
    246c:	11 24       	eor	r1, r1
    246e:	0b b6       	in	r0, 0x3b	; 59
    2470:	0f 92       	push	r0
    2472:	2f 93       	push	r18
    2474:	3f 93       	push	r19
    2476:	4f 93       	push	r20
    2478:	5f 93       	push	r21
    247a:	6f 93       	push	r22
    247c:	7f 93       	push	r23
    247e:	8f 93       	push	r24
    2480:	9f 93       	push	r25
    2482:	af 93       	push	r26
    2484:	bf 93       	push	r27
    2486:	ef 93       	push	r30
    2488:	ff 93       	push	r31
	dma_interrupt(3);
    248a:	83 e0       	ldi	r24, 0x03	; 3
    248c:	e8 de       	rcall	.-560    	; 0x225e <dma_interrupt>
}
    248e:	ff 91       	pop	r31
    2490:	ef 91       	pop	r30
    2492:	bf 91       	pop	r27
    2494:	af 91       	pop	r26
    2496:	9f 91       	pop	r25
    2498:	8f 91       	pop	r24
    249a:	7f 91       	pop	r23
    249c:	6f 91       	pop	r22
    249e:	5f 91       	pop	r21
    24a0:	4f 91       	pop	r20
    24a2:	3f 91       	pop	r19
    24a4:	2f 91       	pop	r18
    24a6:	0f 90       	pop	r0
    24a8:	0b be       	out	0x3b, r0	; 59
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	0f 90       	pop	r0
    24b0:	1f 90       	pop	r1
    24b2:	18 95       	reti

000024b4 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	1f 92       	push	r1
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    24c0:	e8 2f       	mov	r30, r24
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	71 96       	adiw	r30, 0x11	; 17
    24c6:	e2 95       	swap	r30
    24c8:	f2 95       	swap	r31
    24ca:	f0 7f       	andi	r31, 0xF0	; 240
    24cc:	fe 27       	eor	r31, r30
    24ce:	e0 7f       	andi	r30, 0xF0	; 240
    24d0:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    24d2:	8f b7       	in	r24, 0x3f	; 63
    24d4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    24d6:	f8 94       	cli
	return flags;
    24d8:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    24da:	19 96       	adiw	r26, 0x09	; 9
    24dc:	8c 91       	ld	r24, X
    24de:	19 97       	sbiw	r26, 0x09	; 9
    24e0:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    24e2:	1a 96       	adiw	r26, 0x0a	; 10
    24e4:	8c 91       	ld	r24, X
    24e6:	1a 97       	sbiw	r26, 0x0a	; 10
    24e8:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    24ea:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    24ec:	17 96       	adiw	r26, 0x07	; 7
    24ee:	8c 91       	ld	r24, X
    24f0:	17 97       	sbiw	r26, 0x07	; 7
    24f2:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    24f4:	18 96       	adiw	r26, 0x08	; 8
    24f6:	8c 91       	ld	r24, X
    24f8:	18 97       	sbiw	r26, 0x08	; 8
    24fa:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    24fc:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    24fe:	12 96       	adiw	r26, 0x02	; 2
    2500:	8c 91       	ld	r24, X
    2502:	12 97       	sbiw	r26, 0x02	; 2
    2504:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    2506:	13 96       	adiw	r26, 0x03	; 3
    2508:	8c 91       	ld	r24, X
    250a:	13 97       	sbiw	r26, 0x03	; 3
    250c:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    250e:	14 96       	adiw	r26, 0x04	; 4
    2510:	2d 91       	ld	r18, X+
    2512:	3c 91       	ld	r19, X
    2514:	15 97       	sbiw	r26, 0x05	; 5
    2516:	24 83       	std	Z+4, r18	; 0x04
    2518:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    251a:	16 96       	adiw	r26, 0x06	; 6
    251c:	8c 91       	ld	r24, X
    251e:	16 97       	sbiw	r26, 0x06	; 6
    2520:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    2522:	11 96       	adiw	r26, 0x01	; 1
    2524:	8c 91       	ld	r24, X
    2526:	11 97       	sbiw	r26, 0x01	; 1
    2528:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    252a:	8c 91       	ld	r24, X
    252c:	8f 77       	andi	r24, 0x7F	; 127
    252e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2530:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    2532:	0f 90       	pop	r0
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	08 95       	ret

0000253a <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <__portable_avr_delay_cycles+0xa>
    253c:	61 50       	subi	r22, 0x01	; 1
    253e:	71 09       	sbc	r23, r1
    2540:	81 09       	sbc	r24, r1
    2542:	91 09       	sbc	r25, r1
    2544:	61 15       	cp	r22, r1
    2546:	71 05       	cpc	r23, r1
    2548:	81 05       	cpc	r24, r1
    254a:	91 05       	cpc	r25, r1
    254c:	b9 f7       	brne	.-18     	; 0x253c <__portable_avr_delay_cycles+0x2>
    254e:	08 95       	ret

00002550 <rtc_get_time>:
    2550:	80 e1       	ldi	r24, 0x10	; 16
    2552:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    2556:	e0 e2       	ldi	r30, 0x20	; 32
    2558:	f4 e0       	ldi	r31, 0x04	; 4
    255a:	81 81       	ldd	r24, Z+1	; 0x01
    255c:	84 fd       	sbrc	r24, 4
    255e:	fd cf       	rjmp	.-6      	; 0x255a <rtc_get_time+0xa>
    2560:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    2564:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    2568:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    256c:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    2570:	08 95       	ret

00002572 <rtc_set_callback>:
    2572:	80 93 bf 25 	sts	0x25BF, r24	; 0x8025bf <rtc_data>
    2576:	90 93 c0 25 	sts	0x25C0, r25	; 0x8025c0 <rtc_data+0x1>
    257a:	08 95       	ret

0000257c <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2580:	64 e0       	ldi	r22, 0x04	; 4
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    2588:	c0 ef       	ldi	r28, 0xF0	; 240
    258a:	d0 e0       	ldi	r29, 0x00	; 0
    258c:	88 81       	ld	r24, Y
    258e:	82 60       	ori	r24, 0x02	; 2
    2590:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    2592:	61 e0       	ldi	r22, 0x01	; 1
    2594:	80 ef       	ldi	r24, 0xF0	; 240
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 96 3a 	call	0x752c	; 0x752c <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    259c:	88 81       	ld	r24, Y
    259e:	84 60       	ori	r24, 0x04	; 4
    25a0:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    25a2:	69 ee       	ldi	r22, 0xE9	; 233
    25a4:	73 e0       	ldi	r23, 0x03	; 3
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	c7 df       	rcall	.-114    	; 0x253a <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    25ac:	88 81       	ld	r24, Y
    25ae:	88 61       	ori	r24, 0x18	; 24
    25b0:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    25b2:	e0 ef       	ldi	r30, 0xF0	; 240
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	81 81       	ldd	r24, Z+1	; 0x01
    25b8:	83 ff       	sbrs	r24, 3
    25ba:	fd cf       	rjmp	.-6      	; 0x25b6 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    25bc:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    25c0:	e0 e2       	ldi	r30, 0x20	; 32
    25c2:	f4 e0       	ldi	r31, 0x04	; 4
    25c4:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    25c6:	80 fd       	sbrc	r24, 0
    25c8:	fd cf       	rjmp	.-6      	; 0x25c4 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    25ca:	e0 e2       	ldi	r30, 0x20	; 32
    25cc:	f4 e0       	ldi	r31, 0x04	; 4
    25ce:	8f ef       	ldi	r24, 0xFF	; 255
    25d0:	9f ef       	ldi	r25, 0xFF	; 255
    25d2:	dc 01       	movw	r26, r24
    25d4:	80 87       	std	Z+8, r24	; 0x08
    25d6:	91 87       	std	Z+9, r25	; 0x09
    25d8:	a2 87       	std	Z+10, r26	; 0x0a
    25da:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    25dc:	14 82       	std	Z+4, r1	; 0x04
    25de:	15 82       	std	Z+5, r1	; 0x05
    25e0:	16 82       	std	Z+6, r1	; 0x06
    25e2:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    25e4:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    25e6:	80 fd       	sbrc	r24, 0
    25e8:	fd cf       	rjmp	.-6      	; 0x25e4 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    25ea:	e0 e2       	ldi	r30, 0x20	; 32
    25ec:	f4 e0       	ldi	r31, 0x04	; 4
    25ee:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    25f4:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    25f6:	80 fd       	sbrc	r24, 0
    25f8:	fd cf       	rjmp	.-6      	; 0x25f4 <rtc_init+0x78>
}
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	08 95       	ret

00002600 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    2600:	1f 92       	push	r1
    2602:	0f 92       	push	r0
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	0f 92       	push	r0
    2608:	11 24       	eor	r1, r1
    260a:	0b b6       	in	r0, 0x3b	; 59
    260c:	0f 92       	push	r0
    260e:	2f 93       	push	r18
    2610:	3f 93       	push	r19
    2612:	4f 93       	push	r20
    2614:	5f 93       	push	r21
    2616:	6f 93       	push	r22
    2618:	7f 93       	push	r23
    261a:	8f 93       	push	r24
    261c:	9f 93       	push	r25
    261e:	af 93       	push	r26
    2620:	bf 93       	push	r27
    2622:	cf 93       	push	r28
    2624:	df 93       	push	r29
    2626:	ef 93       	push	r30
    2628:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    262a:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    262e:	c0 91 bf 25 	lds	r28, 0x25BF	; 0x8025bf <rtc_data>
    2632:	d0 91 c0 25 	lds	r29, 0x25C0	; 0x8025c0 <rtc_data+0x1>
    2636:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    2638:	19 f0       	breq	.+6      	; 0x2640 <__vector_11+0x40>
    263a:	8a df       	rcall	.-236    	; 0x2550 <rtc_get_time>
    263c:	fe 01       	movw	r30, r28
}
    263e:	19 95       	eicall
    2640:	ff 91       	pop	r31
    2642:	ef 91       	pop	r30
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	bf 91       	pop	r27
    264a:	af 91       	pop	r26
    264c:	9f 91       	pop	r25
    264e:	8f 91       	pop	r24
    2650:	7f 91       	pop	r23
    2652:	6f 91       	pop	r22
    2654:	5f 91       	pop	r21
    2656:	4f 91       	pop	r20
    2658:	3f 91       	pop	r19
    265a:	2f 91       	pop	r18
    265c:	0f 90       	pop	r0
    265e:	0b be       	out	0x3b, r0	; 59
    2660:	0f 90       	pop	r0
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	0f 90       	pop	r0
    2666:	1f 90       	pop	r1
    2668:	18 95       	reti

0000266a <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* Interpolate result */
	uint16_t left_x       = phase >> 4;												// left side
	int16_t  left_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[left_x])) - 0x8000;
    266a:	fc 01       	movw	r30, r24
    266c:	f2 95       	swap	r31
    266e:	e2 95       	swap	r30
    2670:	ef 70       	andi	r30, 0x0F	; 15
    2672:	ef 27       	eor	r30, r31
    2674:	ff 70       	andi	r31, 0x0F	; 15
    2676:	ef 27       	eor	r30, r31
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	e8 5e       	subi	r30, 0xE8	; 232
    267e:	fd 4f       	sbci	r31, 0xFD	; 253
    2680:	25 91       	lpm	r18, Z+
    2682:	34 91       	lpm	r19, Z
    2684:	30 58       	subi	r19, 0x80	; 128
	uint16_t rght_x       = (phase + 16) >> 4;										// right side
	int16_t  rght_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[rght_x])) - 0x8000;
    2686:	fc 01       	movw	r30, r24
    2688:	70 96       	adiw	r30, 0x10	; 16
    268a:	f2 95       	swap	r31
    268c:	e2 95       	swap	r30
    268e:	ef 70       	andi	r30, 0x0F	; 15
    2690:	ef 27       	eor	r30, r31
    2692:	ff 70       	andi	r31, 0x0F	; 15
    2694:	ef 27       	eor	r30, r31
    2696:	ee 0f       	add	r30, r30
    2698:	ff 1f       	adc	r31, r31
    269a:	e8 5e       	subi	r30, 0xE8	; 232
    269c:	fd 4f       	sbci	r31, 0xFD	; 253
    269e:	45 91       	lpm	r20, Z+
    26a0:	54 91       	lpm	r21, Z
	int16_t  prob         = phase & 0x0f;											// phase fraction
	int16_t  delta_frac_y = (int16_t) (((rght_y - left_y) * prob) >> 4);			// interpolation
	int16_t  val          = left_y + delta_frac_y;

	return 0x8000U + (uint16_t)val;
    26a2:	50 58       	subi	r21, 0x80	; 128
    26a4:	42 1b       	sub	r20, r18
    26a6:	53 0b       	sbc	r21, r19
    26a8:	8f 70       	andi	r24, 0x0F	; 15
    26aa:	99 27       	eor	r25, r25
    26ac:	48 9f       	mul	r20, r24
    26ae:	b0 01       	movw	r22, r0
    26b0:	49 9f       	mul	r20, r25
    26b2:	70 0d       	add	r23, r0
    26b4:	58 9f       	mul	r21, r24
    26b6:	70 0d       	add	r23, r0
    26b8:	11 24       	eor	r1, r1
    26ba:	cb 01       	movw	r24, r22
    26bc:	95 95       	asr	r25
    26be:	87 95       	ror	r24
    26c0:	95 95       	asr	r25
    26c2:	87 95       	ror	r24
    26c4:	95 95       	asr	r25
    26c6:	87 95       	ror	r24
    26c8:	95 95       	asr	r25
    26ca:	87 95       	ror	r24
    26cc:	82 0f       	add	r24, r18
    26ce:	93 1f       	adc	r25, r19
}
    26d0:	90 58       	subi	r25, 0x80	; 128
    26d2:	08 95       	ret

000026d4 <__portable_avr_delay_cycles>:
	start_twi_lcd();
}

/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void start_twi_onboard()
{
    26d4:	04 c0       	rjmp	.+8      	; 0x26de <__portable_avr_delay_cycles+0xa>
    26d6:	61 50       	subi	r22, 0x01	; 1
    26d8:	71 09       	sbc	r23, r1
    26da:	81 09       	sbc	r24, r1
    26dc:	91 09       	sbc	r25, r1
    26de:	61 15       	cp	r22, r1
    26e0:	71 05       	cpc	r23, r1
    26e2:	81 05       	cpc	r24, r1
    26e4:	91 05       	cpc	r25, r1
    26e6:	b9 f7       	brne	.-18     	; 0x26d6 <__portable_avr_delay_cycles+0x2>
    26e8:	08 95       	ret

000026ea <twi_waitUntilReady>:
    26ea:	cf 92       	push	r12
    26ec:	df 92       	push	r13
    26ee:	ef 92       	push	r14
    26f0:	ff 92       	push	r15
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	e6 e0       	ldi	r30, 0x06	; 6
    26fa:	f0 e2       	ldi	r31, 0x20	; 32
    26fc:	83 e0       	ldi	r24, 0x03	; 3
    26fe:	81 83       	std	Z+1, r24	; 0x01
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	84 83       	std	Z+4, r24	; 0x04
    2706:	95 83       	std	Z+5, r25	; 0x05
    2708:	8f 01       	movw	r16, r30
    270a:	cc 24       	eor	r12, r12
    270c:	c3 94       	inc	r12
    270e:	d1 2c       	mov	r13, r1
    2710:	0f 2e       	mov	r0, r31
    2712:	f1 e1       	ldi	r31, 0x11	; 17
    2714:	ef 2e       	mov	r14, r31
    2716:	f4 e2       	ldi	r31, 0x24	; 36
    2718:	ff 2e       	mov	r15, r31
    271a:	f0 2d       	mov	r31, r0
    271c:	f8 01       	movw	r30, r16
    271e:	c0 86       	std	Z+8, r12	; 0x08
    2720:	d1 86       	std	Z+9, r13	; 0x09
    2722:	41 e0       	ldi	r20, 0x01	; 1
    2724:	b8 01       	movw	r22, r16
    2726:	80 e8       	ldi	r24, 0x80	; 128
    2728:	94 e0       	ldi	r25, 0x04	; 4
    272a:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
    272e:	f7 01       	movw	r30, r14
    2730:	c0 81       	ld	r28, Z
    2732:	9c 2f       	mov	r25, r28
    2734:	90 78       	andi	r25, 0x80	; 128
    2736:	81 11       	cpse	r24, r1
    2738:	0d c0       	rjmp	.+26     	; 0x2754 <twi_waitUntilReady+0x6a>
    273a:	91 f0       	breq	.+36     	; 0x2760 <twi_waitUntilReady+0x76>
    273c:	8c 2f       	mov	r24, r28
    273e:	81 78       	andi	r24, 0x81	; 129
    2740:	81 38       	cpi	r24, 0x81	; 129
    2742:	29 f4       	brne	.+10     	; 0x274e <twi_waitUntilReady+0x64>
    2744:	65 ef       	ldi	r22, 0xF5	; 245
    2746:	71 e0       	ldi	r23, 0x01	; 1
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	c3 df       	rcall	.-122    	; 0x26d4 <__portable_avr_delay_cycles>
    274e:	c0 fd       	sbrc	r28, 0
    2750:	e5 cf       	rjmp	.-54     	; 0x271c <twi_waitUntilReady+0x32>
    2752:	0c c0       	rjmp	.+24     	; 0x276c <twi_waitUntilReady+0x82>
    2754:	65 e0       	ldi	r22, 0x05	; 5
    2756:	70 e0       	ldi	r23, 0x00	; 0
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	bb df       	rcall	.-138    	; 0x26d4 <__portable_avr_delay_cycles>
    275e:	de cf       	rjmp	.-68     	; 0x271c <twi_waitUntilReady+0x32>
    2760:	65 e0       	ldi	r22, 0x05	; 5
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	b5 df       	rcall	.-150    	; 0x26d4 <__portable_avr_delay_cycles>
    276a:	d8 cf       	rjmp	.-80     	; 0x271c <twi_waitUntilReady+0x32>
    276c:	cf 91       	pop	r28
    276e:	1f 91       	pop	r17
    2770:	0f 91       	pop	r16
    2772:	ff 90       	pop	r15
    2774:	ef 90       	pop	r14
    2776:	df 90       	pop	r13
    2778:	cf 90       	pop	r12
    277a:	08 95       	ret

0000277c <twi_init>:
    277c:	e0 e8       	ldi	r30, 0x80	; 128
    277e:	f6 e0       	ldi	r31, 0x06	; 6
    2780:	88 e3       	ldi	r24, 0x38	; 56
    2782:	80 8b       	std	Z+16, r24	; 0x10
    2784:	81 8b       	std	Z+17, r24	; 0x11
    2786:	e0 e4       	ldi	r30, 0x40	; 64
    2788:	f6 e0       	ldi	r31, 0x06	; 6
    278a:	80 8b       	std	Z+16, r24	; 0x10
    278c:	81 8b       	std	Z+17, r24	; 0x11
    278e:	08 95       	ret

00002790 <start_twi_lcd>:

}

/* TWI2 - LCD Port */
void start_twi_lcd()
{
    2790:	ef 92       	push	r14
    2792:	ff 92       	push	r15
    2794:	0f 93       	push	r16
    2796:	1f 93       	push	r17
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
    279c:	e6 e0       	ldi	r30, 0x06	; 6
    279e:	f0 e2       	ldi	r31, 0x20	; 32
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	84 83       	std	Z+4, r24	; 0x04
    27aa:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
    27ac:	80 87       	std	Z+8, r24	; 0x08
    27ae:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    27b0:	41 e0       	ldi	r20, 0x01	; 1
    27b2:	bf 01       	movw	r22, r30
    27b4:	80 e8       	ldi	r24, 0x80	; 128
    27b6:	94 e0       	ldi	r25, 0x04	; 4
    27b8:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
    27bc:	80 91 11 24 	lds	r24, 0x2411	; 0x802411 <twi2_m_data>
    27c0:	80 93 7c 24 	sts	0x247C, r24	; 0x80247c <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
    27c4:	81 31       	cpi	r24, 0x11	; 17
    27c6:	78 f1       	brcs	.+94     	; 0x2826 <start_twi_lcd+0x96>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
    27c8:	c6 e0       	ldi	r28, 0x06	; 6
    27ca:	d0 e2       	ldi	r29, 0x20	; 32
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
    27d0:	0f 2e       	mov	r0, r31
    27d2:	f1 e1       	ldi	r31, 0x11	; 17
    27d4:	ef 2e       	mov	r14, r31
    27d6:	f4 e2       	ldi	r31, 0x24	; 36
    27d8:	ff 2e       	mov	r15, r31
    27da:	f0 2d       	mov	r31, r0
    27dc:	80 e1       	ldi	r24, 0x10	; 16
    27de:	f7 01       	movw	r30, r14
    27e0:	80 83       	st	Z, r24
		twi2_packet.length = 1;
    27e2:	01 e0       	ldi	r16, 0x01	; 1
    27e4:	10 e0       	ldi	r17, 0x00	; 0
    27e6:	08 87       	std	Y+8, r16	; 0x08
    27e8:	19 87       	std	Y+9, r17	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	be 01       	movw	r22, r28
    27ee:	80 e8       	ldi	r24, 0x80	; 128
    27f0:	94 e0       	ldi	r25, 0x04	; 4
    27f2:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    27f6:	65 e0       	ldi	r22, 0x05	; 5
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	90 e0       	ldi	r25, 0x00	; 0

		twi_waitUntilReady();
    27fe:	6a df       	rcall	.-300    	; 0x26d4 <__portable_avr_delay_cycles>
    2800:	74 df       	rcall	.-280    	; 0x26ea <twi_waitUntilReady>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
    2802:	84 e1       	ldi	r24, 0x14	; 20
    2804:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = GFX_PIXEL_SET;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	f7 01       	movw	r30, r14
    280a:	80 83       	st	Z, r24
		twi2_packet.length = 1;
    280c:	08 87       	std	Y+8, r16	; 0x08
    280e:	19 87       	std	Y+9, r17	; 0x09
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	be 01       	movw	r22, r28
    2814:	80 e8       	ldi	r24, 0x80	; 128
    2816:	94 e0       	ldi	r25, 0x04	; 4
    2818:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    281c:	65 e0       	ldi	r22, 0x05	; 5
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	57 df       	rcall	.-338    	; 0x26d4 <__portable_avr_delay_cycles>
	}
}
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	ff 90       	pop	r15
    2830:	ef 90       	pop	r14
    2832:	08 95       	ret

00002834 <twi_start>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2834:	60 e4       	ldi	r22, 0x40	; 64
    2836:	85 e0       	ldi	r24, 0x05	; 5
    2838:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
#else
#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
    283c:	6a e1       	ldi	r22, 0x1A	; 26
    283e:	70 e2       	ldi	r23, 0x20	; 32
    2840:	80 ea       	ldi	r24, 0xA0	; 160
    2842:	94 e0       	ldi	r25, 0x04	; 4
    2844:	0e 94 07 21 	call	0x420e	; 0x420e <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    2848:	e0 ea       	ldi	r30, 0xA0	; 160
    284a:	f4 e0       	ldi	r31, 0x04	; 4
    284c:	81 81       	ldd	r24, Z+1	; 0x01
    284e:	88 60       	ori	r24, 0x08	; 8
    2850:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2852:	60 e4       	ldi	r22, 0x40	; 64
    2854:	83 e0       	ldi	r24, 0x03	; 3
    2856:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
#else
#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
    285a:	61 e1       	ldi	r22, 0x11	; 17
    285c:	70 e2       	ldi	r23, 0x20	; 32
    285e:	80 e8       	ldi	r24, 0x80	; 128
    2860:	94 e0       	ldi	r25, 0x04	; 4
    2862:	0e 94 07 21 	call	0x420e	; 0x420e <twi_master_init>
    2866:	e0 e8       	ldi	r30, 0x80	; 128
    2868:	f4 e0       	ldi	r31, 0x04	; 4
    286a:	81 81       	ldd	r24, Z+1	; 0x01
    286c:	88 60       	ori	r24, 0x08	; 8
    286e:	81 83       	std	Z+1, r24	; 0x01
#endif

	/* Start each TWI channel devices */
	start_twi_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
    2870:	61 ed       	ldi	r22, 0xD1	; 209
    2872:	72 e1       	ldi	r23, 0x12	; 18
    2874:	83 e1       	ldi	r24, 0x13	; 19
    2876:	90 e0       	ldi	r25, 0x00	; 0
	start_twi_lcd();
    2878:	2d df       	rcall	.-422    	; 0x26d4 <__portable_avr_delay_cycles>
    287a:	8a cf       	rjmp	.-236    	; 0x2790 <start_twi_lcd>
    287c:	08 95       	ret

0000287e <task_twi_onboard>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void task_twi_onboard(uint32_t now)
{
    287e:	08 95       	ret

00002880 <task_twi_lcd>:

}

/* TWI2 - LCD Port */
void task_twi_lcd(uint32_t now)
{
    2880:	df 92       	push	r13
    2882:	ef 92       	push	r14
    2884:	ff 92       	push	r15
    2886:	0f 93       	push	r16
    2888:	1f 93       	push	r17
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
	if (g_twi2_lcd_version >= 0x11) {
    288e:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <g_twi2_lcd_version>
    2892:	81 31       	cpi	r24, 0x11	; 17
    2894:	08 f4       	brcc	.+2      	; 0x2898 <task_twi_lcd+0x18>
		static uint8_t ofs = 0;

		twi_waitUntilReady();
    2896:	b2 c0       	rjmp	.+356    	; 0x29fc <task_twi_lcd+0x17c>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2898:	28 df       	rcall	.-432    	; 0x26ea <twi_waitUntilReady>
    289a:	06 e0       	ldi	r16, 0x06	; 6
    289c:	10 e2       	ldi	r17, 0x20	; 32
    289e:	68 94       	set
    28a0:	dd 24       	eor	r13, r13
    28a2:	d5 f8       	bld	r13, 5
    28a4:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 16 + ofs;
    28a6:	d1 82       	std	Z+1, r13	; 0x01
    28a8:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <__data_end>
    28ac:	80 5f       	subi	r24, 0xF0	; 240
    28ae:	c1 e1       	ldi	r28, 0x11	; 17
    28b0:	d4 e2       	ldi	r29, 0x24	; 36
		twi2_m_data[1] = 16 + ofs;
    28b2:	88 83       	st	Y, r24
		twi2_packet.length = 2;
    28b4:	89 83       	std	Y+1, r24	; 0x01
    28b6:	68 94       	set
    28b8:	ee 24       	eor	r14, r14
    28ba:	e1 f8       	bld	r14, 1
    28bc:	f1 2c       	mov	r15, r1
    28be:	e0 86       	std	Z+8, r14	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    28c0:	f1 86       	std	Z+9, r15	; 0x09
    28c2:	40 e0       	ldi	r20, 0x00	; 0
    28c4:	b8 01       	movw	r22, r16
    28c6:	80 e8       	ldi	r24, 0x80	; 128
    28c8:	94 e0       	ldi	r25, 0x04	; 4
    28ca:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    28ce:	65 e0       	ldi	r22, 0x05	; 5
    28d0:	70 e0       	ldi	r23, 0x00	; 0
    28d2:	80 e0       	ldi	r24, 0x00	; 0

#if 1
		twi_waitUntilReady();
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	fe de       	rcall	.-516    	; 0x26d4 <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
    28d8:	08 df       	rcall	.-496    	; 0x26ea <twi_waitUntilReady>
    28da:	82 e3       	ldi	r24, 0x32	; 50
    28dc:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 150 + ofs;
    28de:	81 83       	std	Z+1, r24	; 0x01
    28e0:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <__data_end>
    28e4:	96 e9       	ldi	r25, 0x96	; 150
    28e6:	98 0f       	add	r25, r24
		twi2_m_data[1] =  60 + ofs;
    28e8:	98 83       	st	Y, r25
    28ea:	84 5c       	subi	r24, 0xC4	; 196
		twi2_packet.length = 2;
    28ec:	89 83       	std	Y+1, r24	; 0x01
    28ee:	e0 86       	std	Z+8, r14	; 0x08
    28f0:	f1 86       	std	Z+9, r15	; 0x09
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	b8 01       	movw	r22, r16
    28f6:	80 e8       	ldi	r24, 0x80	; 128
    28f8:	94 e0       	ldi	r25, 0x04	; 4
    28fa:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    28fe:	65 e0       	ldi	r22, 0x05	; 5
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	80 e0       	ldi	r24, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	e6 de       	rcall	.-564    	; 0x26d4 <__portable_avr_delay_cycles>
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_RECT;
    2908:	f0 de       	rcall	.-544    	; 0x26ea <twi_waitUntilReady>
    290a:	84 e3       	ldi	r24, 0x34	; 52
    290c:	f8 01       	movw	r30, r16
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_RECT;
# endif
		twi2_m_data[0] = 30;
    290e:	81 83       	std	Z+1, r24	; 0x01
    2910:	8e e1       	ldi	r24, 0x1E	; 30
		twi2_m_data[1] =  30;
    2912:	88 83       	st	Y, r24
		twi2_packet.length = 2;
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	e0 86       	std	Z+8, r14	; 0x08
    2918:	f1 86       	std	Z+9, r15	; 0x09
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	b8 01       	movw	r22, r16
    291e:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2920:	94 e0       	ldi	r25, 0x04	; 4
    2922:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
    2926:	65 e0       	ldi	r22, 0x05	; 5
    2928:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_CIRC;
    292e:	d2 de       	rcall	.-604    	; 0x26d4 <__portable_avr_delay_cycles>
    2930:	dc de       	rcall	.-584    	; 0x26ea <twi_waitUntilReady>
    2932:	88 e3       	ldi	r24, 0x38	; 56
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC;
# endif
		twi2_m_data[0] = 20;
    2934:	f8 01       	movw	r30, r16
    2936:	81 83       	std	Z+1, r24	; 0x01
		twi2_packet.length = 1;
    2938:	84 e1       	ldi	r24, 0x14	; 20
    293a:	88 83       	st	Y, r24
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	80 87       	std	Z+8, r24	; 0x08
    2942:	91 87       	std	Z+9, r25	; 0x09
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2948:	80 e8       	ldi	r24, 0x80	; 128
    294a:	94 e0       	ldi	r25, 0x04	; 4
    294c:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
    2950:	65 e0       	ldi	r22, 0x05	; 5
    2952:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2958:	bd de       	rcall	.-646    	; 0x26d4 <__portable_avr_delay_cycles>
    295a:	c7 de       	rcall	.-626    	; 0x26ea <twi_waitUntilReady>
		twi2_m_data[0] = 116 + ofs;
    295c:	f8 01       	movw	r30, r16
    295e:	d1 82       	std	Z+1, r13	; 0x01
    2960:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <__data_end>
    2964:	94 e7       	ldi	r25, 0x74	; 116
		twi2_m_data[1] =  16 + ofs;
    2966:	98 0f       	add	r25, r24
    2968:	98 83       	st	Y, r25
		twi2_packet.length = 2;
    296a:	80 5f       	subi	r24, 0xF0	; 240
    296c:	89 83       	std	Y+1, r24	; 0x01
    296e:	e0 86       	std	Z+8, r14	; 0x08
    2970:	f1 86       	std	Z+9, r15	; 0x09
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2976:	80 e8       	ldi	r24, 0x80	; 128
    2978:	94 e0       	ldi	r25, 0x04	; 4
    297a:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
    297e:	65 e0       	ldi	r22, 0x05	; 5
    2980:	70 e0       	ldi	r23, 0x00	; 0

		twi_waitUntilReady();
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    2986:	a6 de       	rcall	.-692    	; 0x26d4 <__portable_avr_delay_cycles>
    2988:	b0 de       	rcall	.-672    	; 0x26ea <twi_waitUntilReady>
    298a:	80 e3       	ldi	r24, 0x30	; 48
		twi2_m_data[0] = 4;
    298c:	f8 01       	movw	r30, r16
    298e:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[1] = 'A';
    2990:	84 e0       	ldi	r24, 0x04	; 4
    2992:	88 83       	st	Y, r24
		twi2_m_data[2] = 'B';
    2994:	81 e4       	ldi	r24, 0x41	; 65
    2996:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[3] = 'C';
    2998:	82 e4       	ldi	r24, 0x42	; 66
    299a:	8a 83       	std	Y+2, r24	; 0x02
		twi2_m_data[4] = 'D';
    299c:	83 e4       	ldi	r24, 0x43	; 67
    299e:	8b 83       	std	Y+3, r24	; 0x03
		twi2_packet.length = twi2_m_data[0] + 1;
    29a0:	84 e4       	ldi	r24, 0x44	; 68
    29a2:	8c 83       	std	Y+4, r24	; 0x04
    29a4:	85 e0       	ldi	r24, 0x05	; 5
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	80 87       	std	Z+8, r24	; 0x08
    29aa:	91 87       	std	Z+9, r25	; 0x09
    29ac:	40 e0       	ldi	r20, 0x00	; 0
    29ae:	b8 01       	movw	r22, r16
    29b0:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    29b2:	94 e0       	ldi	r25, 0x04	; 4
    29b4:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
    29b8:	65 e0       	ldi	r22, 0x05	; 5
    29ba:	70 e0       	ldi	r23, 0x00	; 0
#endif

		if (++ofs > 64) {
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	89 de       	rcall	.-750    	; 0x26d4 <__portable_avr_delay_cycles>
    29c2:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <__data_end>
    29c6:	8f 5f       	subi	r24, 0xFF	; 255
    29c8:	81 34       	cpi	r24, 0x41	; 65
    29ca:	18 f4       	brcc	.+6      	; 0x29d2 <task_twi_lcd+0x152>
			ofs = 0;
    29cc:	80 93 54 21 	sts	0x2154, r24	; 0x802154 <__data_end>

			twi_waitUntilReady();
    29d0:	32 c0       	rjmp	.+100    	; 0x2a36 <task_twi_lcd+0x1b6>
    29d2:	10 92 54 21 	sts	0x2154, r1	; 0x802154 <__data_end>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
    29d6:	89 de       	rcall	.-750    	; 0x26ea <twi_waitUntilReady>
    29d8:	e6 e0       	ldi	r30, 0x06	; 6
			twi2_packet.length = 0;
    29da:	f0 e2       	ldi	r31, 0x20	; 32
    29dc:	80 e1       	ldi	r24, 0x10	; 16
    29de:	81 83       	std	Z+1, r24	; 0x01
    29e0:	10 86       	std	Z+8, r1	; 0x08
    29e2:	11 86       	std	Z+9, r1	; 0x09
    29e4:	40 e0       	ldi	r20, 0x00	; 0
    29e6:	bf 01       	movw	r22, r30
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    29e8:	80 e8       	ldi	r24, 0x80	; 128
    29ea:	94 e0       	ldi	r25, 0x04	; 4
    29ec:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
    29f0:	65 e0       	ldi	r22, 0x05	; 5
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	80 e0       	ldi	r24, 0x00	; 0
		}

	} else if (g_twi2_lcd_version == 0x10) {
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	6d de       	rcall	.-806    	; 0x26d4 <__portable_avr_delay_cycles>
#if 1
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi_waitUntilReady();
    29fa:	1d c0       	rjmp	.+58     	; 0x2a36 <task_twi_lcd+0x1b6>
    29fc:	80 31       	cpi	r24, 0x10	; 16
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
    29fe:	d9 f4       	brne	.+54     	; 0x2a36 <task_twi_lcd+0x1b6>
    2a00:	74 de       	rcall	.-792    	; 0x26ea <twi_waitUntilReady>
    2a02:	e6 e0       	ldi	r30, 0x06	; 6
    2a04:	f0 e2       	ldi	r31, 0x20	; 32
		twi2_m_data[0] = 1;
    2a06:	84 e8       	ldi	r24, 0x84	; 132
    2a08:	81 83       	std	Z+1, r24	; 0x01
    2a0a:	a1 e1       	ldi	r26, 0x11	; 17
    2a0c:	b4 e2       	ldi	r27, 0x24	; 36
		twi2_m_data[1] = 128;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	8c 93       	st	X, r24
		twi2_packet.length = 2;
    2a12:	80 e8       	ldi	r24, 0x80	; 128
    2a14:	11 96       	adiw	r26, 0x01	; 1
    2a16:	8c 93       	st	X, r24
    2a18:	82 e0       	ldi	r24, 0x02	; 2
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	80 87       	std	Z+8, r24	; 0x08
    2a1e:	91 87       	std	Z+9, r25	; 0x09
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	bf 01       	movw	r22, r30
    2a24:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
    2a26:	94 e0       	ldi	r25, 0x04	; 4
    2a28:	0e 94 1c 21 	call	0x4238	; 0x4238 <twi_master_transfer>
    2a2c:	69 e8       	ldi	r22, 0x89	; 137
    2a2e:	73 e1       	ldi	r23, 0x13	; 19
    2a30:	80 e0       	ldi	r24, 0x00	; 0
#endif
	}
}
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	4f de       	rcall	.-866    	; 0x26d4 <__portable_avr_delay_cycles>
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	ff 90       	pop	r15
    2a40:	ef 90       	pop	r14
    2a42:	df 90       	pop	r13
    2a44:	08 95       	ret

00002a46 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    2a46:	08 95       	ret

00002a48 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	1f 92       	push	r1
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2a52:	2f b7       	in	r18, 0x3f	; 63
    2a54:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2a56:	f8 94       	cli
	return flags;
    2a58:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	39 2f       	mov	r19, r25
    2a5e:	21 15       	cp	r18, r1
    2a60:	82 e0       	ldi	r24, 0x02	; 2
    2a62:	38 07       	cpc	r19, r24
    2a64:	29 f4       	brne	.+10     	; 0x2a70 <adc_set_callback+0x28>
		adca_callback = callback;
    2a66:	60 93 c3 25 	sts	0x25C3, r22	; 0x8025c3 <adca_callback>
    2a6a:	70 93 c4 25 	sts	0x25C4, r23	; 0x8025c4 <adca_callback+0x1>
    2a6e:	07 c0       	rjmp	.+14     	; 0x2a7e <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    2a70:	20 34       	cpi	r18, 0x40	; 64
    2a72:	32 40       	sbci	r19, 0x02	; 2
    2a74:	21 f4       	brne	.+8      	; 0x2a7e <adc_set_callback+0x36>
		adcb_callback = callback;
    2a76:	60 93 c1 25 	sts	0x25C1, r22	; 0x8025c1 <adcb_callback>
    2a7a:	70 93 c2 25 	sts	0x25C2, r23	; 0x8025c2 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a7e:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    2a80:	0f 90       	pop	r0
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	08 95       	ret

00002a88 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2a88:	81 15       	cp	r24, r1
    2a8a:	22 e0       	ldi	r18, 0x02	; 2
    2a8c:	92 07       	cpc	r25, r18
    2a8e:	69 f4       	brne	.+26     	; 0x2aaa <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    2a90:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <adca_enable_count>
    2a94:	91 e0       	ldi	r25, 0x01	; 1
    2a96:	98 0f       	add	r25, r24
    2a98:	90 93 56 21 	sts	0x2156, r25	; 0x802156 <adca_enable_count>
    2a9c:	81 11       	cpse	r24, r1
    2a9e:	14 c0       	rjmp	.+40     	; 0x2ac8 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2aa0:	62 e0       	ldi	r22, 0x02	; 2
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	0c 94 84 32 	jmp	0x6508	; 0x6508 <sysclk_enable_module>
    2aa8:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2aaa:	80 34       	cpi	r24, 0x40	; 64
    2aac:	92 40       	sbci	r25, 0x02	; 2
    2aae:	61 f4       	brne	.+24     	; 0x2ac8 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    2ab0:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <adcb_enable_count>
    2ab4:	91 e0       	ldi	r25, 0x01	; 1
    2ab6:	98 0f       	add	r25, r24
    2ab8:	90 93 55 21 	sts	0x2155, r25	; 0x802155 <adcb_enable_count>
    2abc:	81 11       	cpse	r24, r1
    2abe:	04 c0       	rjmp	.+8      	; 0x2ac8 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2ac0:	62 e0       	ldi	r22, 0x02	; 2
    2ac2:	82 e0       	ldi	r24, 0x02	; 2
    2ac4:	0c 94 84 32 	jmp	0x6508	; 0x6508 <sysclk_enable_module>
    2ac8:	08 95       	ret

00002aca <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2aca:	81 15       	cp	r24, r1
    2acc:	22 e0       	ldi	r18, 0x02	; 2
    2ace:	92 07       	cpc	r25, r18
    2ad0:	61 f4       	brne	.+24     	; 0x2aea <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    2ad2:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <adca_enable_count>
    2ad6:	81 50       	subi	r24, 0x01	; 1
    2ad8:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <adca_enable_count>
    2adc:	81 11       	cpse	r24, r1
    2ade:	13 c0       	rjmp	.+38     	; 0x2b06 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2ae0:	62 e0       	ldi	r22, 0x02	; 2
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	0c 94 9a 32 	jmp	0x6534	; 0x6534 <sysclk_disable_module>
    2ae8:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2aea:	80 34       	cpi	r24, 0x40	; 64
    2aec:	92 40       	sbci	r25, 0x02	; 2
    2aee:	59 f4       	brne	.+22     	; 0x2b06 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    2af0:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <adcb_enable_count>
    2af4:	81 50       	subi	r24, 0x01	; 1
    2af6:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <adcb_enable_count>
    2afa:	81 11       	cpse	r24, r1
    2afc:	04 c0       	rjmp	.+8      	; 0x2b06 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2afe:	62 e0       	ldi	r22, 0x02	; 2
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	0c 94 9a 32 	jmp	0x6534	; 0x6534 <sysclk_disable_module>
    2b06:	08 95       	ret

00002b08 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	1f 92       	push	r1
    2b14:	1f 92       	push	r1
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2b1c:	8f b7       	in	r24, 0x3f	; 63
    2b1e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2b20:	f8 94       	cli
	return flags;
    2b22:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    2b24:	c7 01       	movw	r24, r14
    2b26:	b0 df       	rcall	.-160    	; 0x2a88 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    2b28:	f7 01       	movw	r30, r14
    2b2a:	80 81       	ld	r24, Z
    2b2c:	81 60       	ori	r24, 0x01	; 1
    2b2e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b30:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2b32:	80 91 d6 25 	lds	r24, 0x25D6	; 0x8025d6 <sleepmgr_locks+0x1>
    2b36:	8f 3f       	cpi	r24, 0xFF	; 255
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <adc_enable+0x34>
    2b3a:	ff cf       	rjmp	.-2      	; 0x2b3a <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2b3c:	8f b7       	in	r24, 0x3f	; 63
    2b3e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2b40:	f8 94       	cli
	return flags;
    2b42:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2b44:	e5 ed       	ldi	r30, 0xD5	; 213
    2b46:	f5 e2       	ldi	r31, 0x25	; 37
    2b48:	81 81       	ldd	r24, Z+1	; 0x01
    2b4a:	8f 5f       	subi	r24, 0xFF	; 255
    2b4c:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b4e:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	1f 91       	pop	r17
    2b5a:	ff 90       	pop	r15
    2b5c:	ef 90       	pop	r14
    2b5e:	08 95       	ret

00002b60 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2b60:	1f 92       	push	r1
    2b62:	0f 92       	push	r0
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	0f 92       	push	r0
    2b68:	11 24       	eor	r1, r1
    2b6a:	0b b6       	in	r0, 0x3b	; 59
    2b6c:	0f 92       	push	r0
    2b6e:	2f 93       	push	r18
    2b70:	3f 93       	push	r19
    2b72:	4f 93       	push	r20
    2b74:	5f 93       	push	r21
    2b76:	6f 93       	push	r22
    2b78:	7f 93       	push	r23
    2b7a:	8f 93       	push	r24
    2b7c:	9f 93       	push	r25
    2b7e:	af 93       	push	r26
    2b80:	bf 93       	push	r27
    2b82:	ef 93       	push	r30
    2b84:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2b86:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    2b8a:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    2b8e:	e0 91 c3 25 	lds	r30, 0x25C3	; 0x8025c3 <adca_callback>
    2b92:	f0 91 c4 25 	lds	r31, 0x25C4	; 0x8025c4 <adca_callback+0x1>
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	92 e0       	ldi	r25, 0x02	; 2
    2b9c:	19 95       	eicall
}
    2b9e:	ff 91       	pop	r31
    2ba0:	ef 91       	pop	r30
    2ba2:	bf 91       	pop	r27
    2ba4:	af 91       	pop	r26
    2ba6:	9f 91       	pop	r25
    2ba8:	8f 91       	pop	r24
    2baa:	7f 91       	pop	r23
    2bac:	6f 91       	pop	r22
    2bae:	5f 91       	pop	r21
    2bb0:	4f 91       	pop	r20
    2bb2:	3f 91       	pop	r19
    2bb4:	2f 91       	pop	r18
    2bb6:	0f 90       	pop	r0
    2bb8:	0b be       	out	0x3b, r0	; 59
    2bba:	0f 90       	pop	r0
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	0f 90       	pop	r0
    2bc0:	1f 90       	pop	r1
    2bc2:	18 95       	reti

00002bc4 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    2bc4:	1f 92       	push	r1
    2bc6:	0f 92       	push	r0
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	0f 92       	push	r0
    2bcc:	11 24       	eor	r1, r1
    2bce:	0b b6       	in	r0, 0x3b	; 59
    2bd0:	0f 92       	push	r0
    2bd2:	2f 93       	push	r18
    2bd4:	3f 93       	push	r19
    2bd6:	4f 93       	push	r20
    2bd8:	5f 93       	push	r21
    2bda:	6f 93       	push	r22
    2bdc:	7f 93       	push	r23
    2bde:	8f 93       	push	r24
    2be0:	9f 93       	push	r25
    2be2:	af 93       	push	r26
    2be4:	bf 93       	push	r27
    2be6:	ef 93       	push	r30
    2be8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    2bea:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    2bee:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    2bf2:	e0 91 c3 25 	lds	r30, 0x25C3	; 0x8025c3 <adca_callback>
    2bf6:	f0 91 c4 25 	lds	r31, 0x25C4	; 0x8025c4 <adca_callback+0x1>
    2bfa:	62 e0       	ldi	r22, 0x02	; 2
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	92 e0       	ldi	r25, 0x02	; 2
    2c00:	19 95       	eicall
}
    2c02:	ff 91       	pop	r31
    2c04:	ef 91       	pop	r30
    2c06:	bf 91       	pop	r27
    2c08:	af 91       	pop	r26
    2c0a:	9f 91       	pop	r25
    2c0c:	8f 91       	pop	r24
    2c0e:	7f 91       	pop	r23
    2c10:	6f 91       	pop	r22
    2c12:	5f 91       	pop	r21
    2c14:	4f 91       	pop	r20
    2c16:	3f 91       	pop	r19
    2c18:	2f 91       	pop	r18
    2c1a:	0f 90       	pop	r0
    2c1c:	0b be       	out	0x3b, r0	; 59
    2c1e:	0f 90       	pop	r0
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	0f 90       	pop	r0
    2c24:	1f 90       	pop	r1
    2c26:	18 95       	reti

00002c28 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    2c28:	1f 92       	push	r1
    2c2a:	0f 92       	push	r0
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	0f 92       	push	r0
    2c30:	11 24       	eor	r1, r1
    2c32:	0b b6       	in	r0, 0x3b	; 59
    2c34:	0f 92       	push	r0
    2c36:	2f 93       	push	r18
    2c38:	3f 93       	push	r19
    2c3a:	4f 93       	push	r20
    2c3c:	5f 93       	push	r21
    2c3e:	6f 93       	push	r22
    2c40:	7f 93       	push	r23
    2c42:	8f 93       	push	r24
    2c44:	9f 93       	push	r25
    2c46:	af 93       	push	r26
    2c48:	bf 93       	push	r27
    2c4a:	ef 93       	push	r30
    2c4c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    2c4e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    2c52:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    2c56:	e0 91 c3 25 	lds	r30, 0x25C3	; 0x8025c3 <adca_callback>
    2c5a:	f0 91 c4 25 	lds	r31, 0x25C4	; 0x8025c4 <adca_callback+0x1>
    2c5e:	64 e0       	ldi	r22, 0x04	; 4
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	92 e0       	ldi	r25, 0x02	; 2
    2c64:	19 95       	eicall
}
    2c66:	ff 91       	pop	r31
    2c68:	ef 91       	pop	r30
    2c6a:	bf 91       	pop	r27
    2c6c:	af 91       	pop	r26
    2c6e:	9f 91       	pop	r25
    2c70:	8f 91       	pop	r24
    2c72:	7f 91       	pop	r23
    2c74:	6f 91       	pop	r22
    2c76:	5f 91       	pop	r21
    2c78:	4f 91       	pop	r20
    2c7a:	3f 91       	pop	r19
    2c7c:	2f 91       	pop	r18
    2c7e:	0f 90       	pop	r0
    2c80:	0b be       	out	0x3b, r0	; 59
    2c82:	0f 90       	pop	r0
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	0f 90       	pop	r0
    2c88:	1f 90       	pop	r1
    2c8a:	18 95       	reti

00002c8c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    2c8c:	1f 92       	push	r1
    2c8e:	0f 92       	push	r0
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	0f 92       	push	r0
    2c94:	11 24       	eor	r1, r1
    2c96:	0b b6       	in	r0, 0x3b	; 59
    2c98:	0f 92       	push	r0
    2c9a:	2f 93       	push	r18
    2c9c:	3f 93       	push	r19
    2c9e:	4f 93       	push	r20
    2ca0:	5f 93       	push	r21
    2ca2:	6f 93       	push	r22
    2ca4:	7f 93       	push	r23
    2ca6:	8f 93       	push	r24
    2ca8:	9f 93       	push	r25
    2caa:	af 93       	push	r26
    2cac:	bf 93       	push	r27
    2cae:	ef 93       	push	r30
    2cb0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    2cb2:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    2cb6:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    2cba:	e0 91 c3 25 	lds	r30, 0x25C3	; 0x8025c3 <adca_callback>
    2cbe:	f0 91 c4 25 	lds	r31, 0x25C4	; 0x8025c4 <adca_callback+0x1>
    2cc2:	68 e0       	ldi	r22, 0x08	; 8
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	92 e0       	ldi	r25, 0x02	; 2
    2cc8:	19 95       	eicall
}
    2cca:	ff 91       	pop	r31
    2ccc:	ef 91       	pop	r30
    2cce:	bf 91       	pop	r27
    2cd0:	af 91       	pop	r26
    2cd2:	9f 91       	pop	r25
    2cd4:	8f 91       	pop	r24
    2cd6:	7f 91       	pop	r23
    2cd8:	6f 91       	pop	r22
    2cda:	5f 91       	pop	r21
    2cdc:	4f 91       	pop	r20
    2cde:	3f 91       	pop	r19
    2ce0:	2f 91       	pop	r18
    2ce2:	0f 90       	pop	r0
    2ce4:	0b be       	out	0x3b, r0	; 59
    2ce6:	0f 90       	pop	r0
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	0f 90       	pop	r0
    2cec:	1f 90       	pop	r1
    2cee:	18 95       	reti

00002cf0 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    2cf0:	1f 92       	push	r1
    2cf2:	0f 92       	push	r0
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	0f 92       	push	r0
    2cf8:	11 24       	eor	r1, r1
    2cfa:	0b b6       	in	r0, 0x3b	; 59
    2cfc:	0f 92       	push	r0
    2cfe:	2f 93       	push	r18
    2d00:	3f 93       	push	r19
    2d02:	4f 93       	push	r20
    2d04:	5f 93       	push	r21
    2d06:	6f 93       	push	r22
    2d08:	7f 93       	push	r23
    2d0a:	8f 93       	push	r24
    2d0c:	9f 93       	push	r25
    2d0e:	af 93       	push	r26
    2d10:	bf 93       	push	r27
    2d12:	ef 93       	push	r30
    2d14:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    2d16:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    2d1a:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    2d1e:	e0 91 c1 25 	lds	r30, 0x25C1	; 0x8025c1 <adcb_callback>
    2d22:	f0 91 c2 25 	lds	r31, 0x25C2	; 0x8025c2 <adcb_callback+0x1>
    2d26:	61 e0       	ldi	r22, 0x01	; 1
    2d28:	80 e4       	ldi	r24, 0x40	; 64
    2d2a:	92 e0       	ldi	r25, 0x02	; 2
    2d2c:	19 95       	eicall
}
    2d2e:	ff 91       	pop	r31
    2d30:	ef 91       	pop	r30
    2d32:	bf 91       	pop	r27
    2d34:	af 91       	pop	r26
    2d36:	9f 91       	pop	r25
    2d38:	8f 91       	pop	r24
    2d3a:	7f 91       	pop	r23
    2d3c:	6f 91       	pop	r22
    2d3e:	5f 91       	pop	r21
    2d40:	4f 91       	pop	r20
    2d42:	3f 91       	pop	r19
    2d44:	2f 91       	pop	r18
    2d46:	0f 90       	pop	r0
    2d48:	0b be       	out	0x3b, r0	; 59
    2d4a:	0f 90       	pop	r0
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	0f 90       	pop	r0
    2d50:	1f 90       	pop	r1
    2d52:	18 95       	reti

00002d54 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    2d54:	1f 92       	push	r1
    2d56:	0f 92       	push	r0
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	0f 92       	push	r0
    2d5c:	11 24       	eor	r1, r1
    2d5e:	0b b6       	in	r0, 0x3b	; 59
    2d60:	0f 92       	push	r0
    2d62:	2f 93       	push	r18
    2d64:	3f 93       	push	r19
    2d66:	4f 93       	push	r20
    2d68:	5f 93       	push	r21
    2d6a:	6f 93       	push	r22
    2d6c:	7f 93       	push	r23
    2d6e:	8f 93       	push	r24
    2d70:	9f 93       	push	r25
    2d72:	af 93       	push	r26
    2d74:	bf 93       	push	r27
    2d76:	ef 93       	push	r30
    2d78:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    2d7a:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    2d7e:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    2d82:	e0 91 c1 25 	lds	r30, 0x25C1	; 0x8025c1 <adcb_callback>
    2d86:	f0 91 c2 25 	lds	r31, 0x25C2	; 0x8025c2 <adcb_callback+0x1>
    2d8a:	62 e0       	ldi	r22, 0x02	; 2
    2d8c:	80 e4       	ldi	r24, 0x40	; 64
    2d8e:	92 e0       	ldi	r25, 0x02	; 2
    2d90:	19 95       	eicall
}
    2d92:	ff 91       	pop	r31
    2d94:	ef 91       	pop	r30
    2d96:	bf 91       	pop	r27
    2d98:	af 91       	pop	r26
    2d9a:	9f 91       	pop	r25
    2d9c:	8f 91       	pop	r24
    2d9e:	7f 91       	pop	r23
    2da0:	6f 91       	pop	r22
    2da2:	5f 91       	pop	r21
    2da4:	4f 91       	pop	r20
    2da6:	3f 91       	pop	r19
    2da8:	2f 91       	pop	r18
    2daa:	0f 90       	pop	r0
    2dac:	0b be       	out	0x3b, r0	; 59
    2dae:	0f 90       	pop	r0
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	0f 90       	pop	r0
    2db4:	1f 90       	pop	r1
    2db6:	18 95       	reti

00002db8 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    2db8:	1f 92       	push	r1
    2dba:	0f 92       	push	r0
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	0f 92       	push	r0
    2dc0:	11 24       	eor	r1, r1
    2dc2:	0b b6       	in	r0, 0x3b	; 59
    2dc4:	0f 92       	push	r0
    2dc6:	2f 93       	push	r18
    2dc8:	3f 93       	push	r19
    2dca:	4f 93       	push	r20
    2dcc:	5f 93       	push	r21
    2dce:	6f 93       	push	r22
    2dd0:	7f 93       	push	r23
    2dd2:	8f 93       	push	r24
    2dd4:	9f 93       	push	r25
    2dd6:	af 93       	push	r26
    2dd8:	bf 93       	push	r27
    2dda:	ef 93       	push	r30
    2ddc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    2dde:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    2de2:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    2de6:	e0 91 c1 25 	lds	r30, 0x25C1	; 0x8025c1 <adcb_callback>
    2dea:	f0 91 c2 25 	lds	r31, 0x25C2	; 0x8025c2 <adcb_callback+0x1>
    2dee:	64 e0       	ldi	r22, 0x04	; 4
    2df0:	80 e4       	ldi	r24, 0x40	; 64
    2df2:	92 e0       	ldi	r25, 0x02	; 2
    2df4:	19 95       	eicall
}
    2df6:	ff 91       	pop	r31
    2df8:	ef 91       	pop	r30
    2dfa:	bf 91       	pop	r27
    2dfc:	af 91       	pop	r26
    2dfe:	9f 91       	pop	r25
    2e00:	8f 91       	pop	r24
    2e02:	7f 91       	pop	r23
    2e04:	6f 91       	pop	r22
    2e06:	5f 91       	pop	r21
    2e08:	4f 91       	pop	r20
    2e0a:	3f 91       	pop	r19
    2e0c:	2f 91       	pop	r18
    2e0e:	0f 90       	pop	r0
    2e10:	0b be       	out	0x3b, r0	; 59
    2e12:	0f 90       	pop	r0
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	0f 90       	pop	r0
    2e18:	1f 90       	pop	r1
    2e1a:	18 95       	reti

00002e1c <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    2e1c:	1f 92       	push	r1
    2e1e:	0f 92       	push	r0
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	0f 92       	push	r0
    2e24:	11 24       	eor	r1, r1
    2e26:	0b b6       	in	r0, 0x3b	; 59
    2e28:	0f 92       	push	r0
    2e2a:	2f 93       	push	r18
    2e2c:	3f 93       	push	r19
    2e2e:	4f 93       	push	r20
    2e30:	5f 93       	push	r21
    2e32:	6f 93       	push	r22
    2e34:	7f 93       	push	r23
    2e36:	8f 93       	push	r24
    2e38:	9f 93       	push	r25
    2e3a:	af 93       	push	r26
    2e3c:	bf 93       	push	r27
    2e3e:	ef 93       	push	r30
    2e40:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    2e42:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    2e46:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    2e4a:	e0 91 c1 25 	lds	r30, 0x25C1	; 0x8025c1 <adcb_callback>
    2e4e:	f0 91 c2 25 	lds	r31, 0x25C2	; 0x8025c2 <adcb_callback+0x1>
    2e52:	68 e0       	ldi	r22, 0x08	; 8
    2e54:	80 e4       	ldi	r24, 0x40	; 64
    2e56:	92 e0       	ldi	r25, 0x02	; 2
    2e58:	19 95       	eicall
}
    2e5a:	ff 91       	pop	r31
    2e5c:	ef 91       	pop	r30
    2e5e:	bf 91       	pop	r27
    2e60:	af 91       	pop	r26
    2e62:	9f 91       	pop	r25
    2e64:	8f 91       	pop	r24
    2e66:	7f 91       	pop	r23
    2e68:	6f 91       	pop	r22
    2e6a:	5f 91       	pop	r21
    2e6c:	4f 91       	pop	r20
    2e6e:	3f 91       	pop	r19
    2e70:	2f 91       	pop	r18
    2e72:	0f 90       	pop	r0
    2e74:	0b be       	out	0x3b, r0	; 59
    2e76:	0f 90       	pop	r0
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	0f 90       	pop	r0
    2e7c:	1f 90       	pop	r1
    2e7e:	18 95       	reti

00002e80 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    2e80:	bf 92       	push	r11
    2e82:	cf 92       	push	r12
    2e84:	df 92       	push	r13
    2e86:	ef 92       	push	r14
    2e88:	ff 92       	push	r15
    2e8a:	0f 93       	push	r16
    2e8c:	1f 93       	push	r17
    2e8e:	cf 93       	push	r28
    2e90:	df 93       	push	r29
    2e92:	1f 92       	push	r1
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	8c 01       	movw	r16, r24
    2e9a:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2e9c:	81 15       	cp	r24, r1
    2e9e:	22 e0       	ldi	r18, 0x02	; 2
    2ea0:	92 07       	cpc	r25, r18
    2ea2:	81 f4       	brne	.+32     	; 0x2ec4 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    2ea4:	61 e2       	ldi	r22, 0x21	; 33
    2ea6:	70 e0       	ldi	r23, 0x00	; 0
    2ea8:	82 e0       	ldi	r24, 0x02	; 2
    2eaa:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    2eae:	c8 2e       	mov	r12, r24
    2eb0:	d1 2c       	mov	r13, r1
    2eb2:	60 e2       	ldi	r22, 0x20	; 32
    2eb4:	70 e0       	ldi	r23, 0x00	; 0
    2eb6:	82 e0       	ldi	r24, 0x02	; 2
    2eb8:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    2ebc:	dc 2c       	mov	r13, r12
    2ebe:	cc 24       	eor	r12, r12
    2ec0:	c8 2a       	or	r12, r24
    2ec2:	12 c0       	rjmp	.+36     	; 0x2ee8 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    2ec4:	80 34       	cpi	r24, 0x40	; 64
    2ec6:	92 40       	sbci	r25, 0x02	; 2
    2ec8:	d1 f5       	brne	.+116    	; 0x2f3e <adc_write_configuration+0xbe>
    2eca:	65 e2       	ldi	r22, 0x25	; 37
    2ecc:	70 e0       	ldi	r23, 0x00	; 0
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    2ed4:	c8 2e       	mov	r12, r24
    2ed6:	d1 2c       	mov	r13, r1
    2ed8:	64 e2       	ldi	r22, 0x24	; 36
    2eda:	70 e0       	ldi	r23, 0x00	; 0
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    2ee2:	dc 2c       	mov	r13, r12
    2ee4:	cc 24       	eor	r12, r12
    2ee6:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2ee8:	8f b7       	in	r24, 0x3f	; 63
    2eea:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2eec:	f8 94       	cli
	return flags;
    2eee:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    2ef0:	c8 01       	movw	r24, r16
    2ef2:	ca dd       	rcall	.-1132   	; 0x2a88 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    2ef4:	f8 01       	movw	r30, r16
    2ef6:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    2ef8:	92 e0       	ldi	r25, 0x02	; 2
    2efa:	90 83       	st	Z, r25
	adc->CAL = cal;
    2efc:	c4 86       	std	Z+12, r12	; 0x0c
    2efe:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    2f00:	f7 01       	movw	r30, r14
    2f02:	25 81       	ldd	r18, Z+5	; 0x05
    2f04:	36 81       	ldd	r19, Z+6	; 0x06
    2f06:	f8 01       	movw	r30, r16
    2f08:	20 8f       	std	Z+24, r18	; 0x18
    2f0a:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    2f0c:	f7 01       	movw	r30, r14
    2f0e:	92 81       	ldd	r25, Z+2	; 0x02
    2f10:	f8 01       	movw	r30, r16
    2f12:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    2f14:	f7 01       	movw	r30, r14
    2f16:	94 81       	ldd	r25, Z+4	; 0x04
    2f18:	f8 01       	movw	r30, r16
    2f1a:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    2f1c:	f7 01       	movw	r30, r14
    2f1e:	93 81       	ldd	r25, Z+3	; 0x03
    2f20:	f8 01       	movw	r30, r16
    2f22:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    2f24:	f7 01       	movw	r30, r14
    2f26:	91 81       	ldd	r25, Z+1	; 0x01
    2f28:	f8 01       	movw	r30, r16
    2f2a:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    2f2c:	81 70       	andi	r24, 0x01	; 1
    2f2e:	f7 01       	movw	r30, r14
    2f30:	90 81       	ld	r25, Z
    2f32:	89 2b       	or	r24, r25
    2f34:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    2f36:	80 83       	st	Z, r24
    2f38:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f3a:	c7 dd       	rcall	.-1138   	; 0x2aca <adc_disable_clock>

	cpu_irq_restore(flags);
}
    2f3c:	bf be       	out	0x3f, r11	; 63
    2f3e:	0f 90       	pop	r0
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	1f 91       	pop	r17
    2f46:	0f 91       	pop	r16
    2f48:	ff 90       	pop	r15
    2f4a:	ef 90       	pop	r14
    2f4c:	df 90       	pop	r13
    2f4e:	cf 90       	pop	r12
    2f50:	bf 90       	pop	r11
    2f52:	08 95       	ret

00002f54 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    2f54:	df 92       	push	r13
    2f56:	ef 92       	push	r14
    2f58:	ff 92       	push	r15
    2f5a:	0f 93       	push	r16
    2f5c:	1f 93       	push	r17
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	1f 92       	push	r1
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	8c 01       	movw	r16, r24
    2f6a:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f6c:	8f b7       	in	r24, 0x3f	; 63
    2f6e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2f70:	f8 94       	cli
	return flags;
    2f72:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    2f74:	c8 01       	movw	r24, r16
    2f76:	88 dd       	rcall	.-1264   	; 0x2a88 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    2f78:	f8 01       	movw	r30, r16
    2f7a:	80 81       	ld	r24, Z
    2f7c:	80 7c       	andi	r24, 0xC0	; 192
    2f7e:	f7 01       	movw	r30, r14
    2f80:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    2f82:	f8 01       	movw	r30, r16
    2f84:	80 8d       	ldd	r24, Z+24	; 0x18
    2f86:	91 8d       	ldd	r25, Z+25	; 0x19
    2f88:	f7 01       	movw	r30, r14
    2f8a:	85 83       	std	Z+5, r24	; 0x05
    2f8c:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    2f8e:	f8 01       	movw	r30, r16
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	f7 01       	movw	r30, r14
    2f94:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    2f96:	f8 01       	movw	r30, r16
    2f98:	84 81       	ldd	r24, Z+4	; 0x04
    2f9a:	f7 01       	movw	r30, r14
    2f9c:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	83 81       	ldd	r24, Z+3	; 0x03
    2fa2:	f7 01       	movw	r30, r14
    2fa4:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    2fa6:	f8 01       	movw	r30, r16
    2fa8:	81 81       	ldd	r24, Z+1	; 0x01
    2faa:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    2fac:	81 83       	std	Z+1, r24	; 0x01
    2fae:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2fb0:	8c dd       	rcall	.-1256   	; 0x2aca <adc_disable_clock>

	cpu_irq_restore(flags);
}
    2fb2:	df be       	out	0x3f, r13	; 63
    2fb4:	0f 90       	pop	r0
    2fb6:	df 91       	pop	r29
    2fb8:	cf 91       	pop	r28
    2fba:	1f 91       	pop	r17
    2fbc:	0f 91       	pop	r16
    2fbe:	ff 90       	pop	r15
    2fc0:	ef 90       	pop	r14
    2fc2:	df 90       	pop	r13
    2fc4:	08 95       	ret

00002fc6 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    2fc6:	af 92       	push	r10
    2fc8:	bf 92       	push	r11
    2fca:	cf 92       	push	r12
    2fcc:	df 92       	push	r13
    2fce:	ef 92       	push	r14
    2fd0:	ff 92       	push	r15
    2fd2:	0f 93       	push	r16
    2fd4:	1f 93       	push	r17
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	1f 92       	push	r1
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	6c 01       	movw	r12, r24
    2fe2:	b6 2e       	mov	r11, r22
    2fe4:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    2fe6:	86 2f       	mov	r24, r22
    2fe8:	83 70       	andi	r24, 0x03	; 3
    2fea:	29 f4       	brne	.+10     	; 0x2ff6 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    2fec:	96 2f       	mov	r25, r22
    2fee:	96 95       	lsr	r25
    2ff0:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    2ff2:	82 e0       	ldi	r24, 0x02	; 2
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    2ff6:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    2ffa:	90 ff       	sbrs	r25, 0
		index++;
    2ffc:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    2ffe:	86 01       	movw	r16, r12
    3000:	00 5e       	subi	r16, 0xE0	; 224
    3002:	1f 4f       	sbci	r17, 0xFF	; 255
    3004:	98 e0       	ldi	r25, 0x08	; 8
    3006:	89 9f       	mul	r24, r25
    3008:	00 0d       	add	r16, r0
    300a:	11 1d       	adc	r17, r1
    300c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    300e:	8f b7       	in	r24, 0x3f	; 63
    3010:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3012:	f8 94       	cli
	return flags;
    3014:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    3016:	c6 01       	movw	r24, r12
    3018:	37 dd       	rcall	.-1426   	; 0x2a88 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    301a:	f7 01       	movw	r30, r14
    301c:	80 81       	ld	r24, Z
    301e:	f8 01       	movw	r30, r16
    3020:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    3022:	f7 01       	movw	r30, r14
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	f8 01       	movw	r30, r16
    3028:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    302a:	f7 01       	movw	r30, r14
    302c:	81 81       	ldd	r24, Z+1	; 0x01
    302e:	f8 01       	movw	r30, r16
    3030:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    3032:	b0 fe       	sbrs	r11, 0
    3034:	04 c0       	rjmp	.+8      	; 0x303e <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    3036:	f7 01       	movw	r30, r14
    3038:	83 81       	ldd	r24, Z+3	; 0x03
    303a:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    303c:	86 83       	std	Z+6, r24	; 0x06
    303e:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3040:	44 dd       	rcall	.-1400   	; 0x2aca <adc_disable_clock>

	cpu_irq_restore(flags);
}
    3042:	af be       	out	0x3f, r10	; 63
    3044:	0f 90       	pop	r0
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	1f 91       	pop	r17
    304c:	0f 91       	pop	r16
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	df 90       	pop	r13
    3054:	cf 90       	pop	r12
    3056:	bf 90       	pop	r11
    3058:	af 90       	pop	r10
    305a:	08 95       	ret

0000305c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    305c:	af 92       	push	r10
    305e:	bf 92       	push	r11
    3060:	cf 92       	push	r12
    3062:	df 92       	push	r13
    3064:	ef 92       	push	r14
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	1f 92       	push	r1
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	6c 01       	movw	r12, r24
    3078:	b6 2e       	mov	r11, r22
    307a:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    307c:	86 2f       	mov	r24, r22
    307e:	83 70       	andi	r24, 0x03	; 3
    3080:	29 f4       	brne	.+10     	; 0x308c <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    3082:	96 2f       	mov	r25, r22
    3084:	96 95       	lsr	r25
    3086:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    3088:	82 e0       	ldi	r24, 0x02	; 2
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    308c:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    308e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3090:	90 ff       	sbrs	r25, 0
		index++;
    3092:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    3094:	86 01       	movw	r16, r12
    3096:	00 5e       	subi	r16, 0xE0	; 224
    3098:	1f 4f       	sbci	r17, 0xFF	; 255
    309a:	98 e0       	ldi	r25, 0x08	; 8
    309c:	89 9f       	mul	r24, r25
    309e:	00 0d       	add	r16, r0
    30a0:	11 1d       	adc	r17, r1
    30a2:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    30a4:	8f b7       	in	r24, 0x3f	; 63
    30a6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    30a8:	f8 94       	cli
	return flags;
    30aa:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    30ac:	c6 01       	movw	r24, r12
    30ae:	ec dc       	rcall	.-1576   	; 0x2a88 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    30b0:	f8 01       	movw	r30, r16
    30b2:	80 81       	ld	r24, Z
    30b4:	f7 01       	movw	r30, r14
    30b6:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    30b8:	f8 01       	movw	r30, r16
    30ba:	82 81       	ldd	r24, Z+2	; 0x02
    30bc:	f7 01       	movw	r30, r14
    30be:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    30c0:	f8 01       	movw	r30, r16
    30c2:	81 81       	ldd	r24, Z+1	; 0x01
    30c4:	f7 01       	movw	r30, r14
    30c6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    30c8:	b0 fe       	sbrs	r11, 0
    30ca:	04 c0       	rjmp	.+8      	; 0x30d4 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    30cc:	f8 01       	movw	r30, r16
    30ce:	86 81       	ldd	r24, Z+6	; 0x06
    30d0:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    30d2:	83 83       	std	Z+3, r24	; 0x03
    30d4:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    30d6:	f9 dc       	rcall	.-1550   	; 0x2aca <adc_disable_clock>

	cpu_irq_restore(flags);
}
    30d8:	af be       	out	0x3f, r10	; 63
    30da:	0f 90       	pop	r0
    30dc:	df 91       	pop	r29
    30de:	cf 91       	pop	r28
    30e0:	1f 91       	pop	r17
    30e2:	0f 91       	pop	r16
    30e4:	ff 90       	pop	r15
    30e6:	ef 90       	pop	r14
    30e8:	df 90       	pop	r13
    30ea:	cf 90       	pop	r12
    30ec:	bf 90       	pop	r11
    30ee:	af 90       	pop	r10
    30f0:	08 95       	ret

000030f2 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    30f2:	80 32       	cpi	r24, 0x20	; 32
    30f4:	93 40       	sbci	r25, 0x03	; 3
    30f6:	61 f4       	brne	.+24     	; 0x3110 <dac_enable_clock+0x1e>
    30f8:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <dacb_enable_count>
    30fc:	91 e0       	ldi	r25, 0x01	; 1
    30fe:	98 0f       	add	r25, r24
    3100:	90 93 57 21 	sts	0x2157, r25	; 0x802157 <dacb_enable_count>
    3104:	81 11       	cpse	r24, r1
    3106:	04 c0       	rjmp	.+8      	; 0x3110 <dac_enable_clock+0x1e>
    3108:	64 e0       	ldi	r22, 0x04	; 4
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	0c 94 84 32 	jmp	0x6508	; 0x6508 <sysclk_enable_module>
    3110:	08 95       	ret

00003112 <dac_disable_clock>:
    3112:	80 32       	cpi	r24, 0x20	; 32
    3114:	93 40       	sbci	r25, 0x03	; 3
    3116:	59 f4       	brne	.+22     	; 0x312e <dac_disable_clock+0x1c>
    3118:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <dacb_enable_count>
    311c:	81 50       	subi	r24, 0x01	; 1
    311e:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <dacb_enable_count>
    3122:	81 11       	cpse	r24, r1
    3124:	04 c0       	rjmp	.+8      	; 0x312e <dac_disable_clock+0x1c>
    3126:	64 e0       	ldi	r22, 0x04	; 4
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	0c 94 9a 32 	jmp	0x6534	; 0x6534 <sysclk_disable_module>
    312e:	08 95       	ret

00003130 <dac_enable>:
    3130:	ef 92       	push	r14
    3132:	ff 92       	push	r15
    3134:	1f 93       	push	r17
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	1f 92       	push	r1
    313c:	1f 92       	push	r1
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	2f b7       	in	r18, 0x3f	; 63
    3144:	29 83       	std	Y+1, r18	; 0x01
    3146:	f8 94       	cli
    3148:	19 81       	ldd	r17, Y+1	; 0x01
    314a:	20 91 d6 25 	lds	r18, 0x25D6	; 0x8025d6 <sleepmgr_locks+0x1>
    314e:	2f 3f       	cpi	r18, 0xFF	; 255
    3150:	09 f4       	brne	.+2      	; 0x3154 <dac_enable+0x24>
    3152:	ff cf       	rjmp	.-2      	; 0x3152 <dac_enable+0x22>
    3154:	7c 01       	movw	r14, r24
    3156:	8f b7       	in	r24, 0x3f	; 63
    3158:	8a 83       	std	Y+2, r24	; 0x02
    315a:	f8 94       	cli
    315c:	9a 81       	ldd	r25, Y+2	; 0x02
    315e:	e5 ed       	ldi	r30, 0xD5	; 213
    3160:	f5 e2       	ldi	r31, 0x25	; 37
    3162:	81 81       	ldd	r24, Z+1	; 0x01
    3164:	8f 5f       	subi	r24, 0xFF	; 255
    3166:	81 83       	std	Z+1, r24	; 0x01
    3168:	9f bf       	out	0x3f, r25	; 63
    316a:	c7 01       	movw	r24, r14
    316c:	c2 df       	rcall	.-124    	; 0x30f2 <dac_enable_clock>
    316e:	f7 01       	movw	r30, r14
    3170:	80 81       	ld	r24, Z
    3172:	81 60       	ori	r24, 0x01	; 1
    3174:	80 83       	st	Z, r24
    3176:	1f bf       	out	0x3f, r17	; 63
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	ff 90       	pop	r15
    3184:	ef 90       	pop	r14
    3186:	08 95       	ret

00003188 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    3188:	9f 92       	push	r9
    318a:	af 92       	push	r10
    318c:	bf 92       	push	r11
    318e:	cf 92       	push	r12
    3190:	df 92       	push	r13
    3192:	ef 92       	push	r14
    3194:	ff 92       	push	r15
    3196:	0f 93       	push	r16
    3198:	1f 93       	push	r17
    319a:	cf 93       	push	r28
    319c:	df 93       	push	r29
    319e:	1f 92       	push	r1
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    31a4:	80 32       	cpi	r24, 0x20	; 32
    31a6:	23 e0       	ldi	r18, 0x03	; 3
    31a8:	92 07       	cpc	r25, r18
    31aa:	09 f0       	breq	.+2      	; 0x31ae <dac_write_configuration+0x26>
    31ac:	3c c0       	rjmp	.+120    	; 0x3226 <dac_write_configuration+0x9e>
    31ae:	7b 01       	movw	r14, r22
    31b0:	8c 01       	movw	r16, r24
    31b2:	63 e3       	ldi	r22, 0x33	; 51
    31b4:	70 e0       	ldi	r23, 0x00	; 0
    31b6:	82 e0       	ldi	r24, 0x02	; 2
    31b8:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
    31bc:	98 2e       	mov	r9, r24
    31be:	62 e3       	ldi	r22, 0x32	; 50
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	82 e0       	ldi	r24, 0x02	; 2
    31c4:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
    31c8:	a8 2e       	mov	r10, r24
    31ca:	67 e3       	ldi	r22, 0x37	; 55
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	82 e0       	ldi	r24, 0x02	; 2
    31d0:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
    31d4:	b8 2e       	mov	r11, r24
    31d6:	66 e3       	ldi	r22, 0x36	; 54
    31d8:	70 e0       	ldi	r23, 0x00	; 0
    31da:	82 e0       	ldi	r24, 0x02	; 2
    31dc:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
    31e0:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    31e2:	8f b7       	in	r24, 0x3f	; 63
    31e4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    31e6:	f8 94       	cli
	return flags;
    31e8:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    31ea:	c8 01       	movw	r24, r16
    31ec:	82 df       	rcall	.-252    	; 0x30f2 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    31ee:	f8 01       	movw	r30, r16
    31f0:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    31f2:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    31f4:	f7 01       	movw	r30, r14
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	f8 01       	movw	r30, r16
    31fa:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    31fc:	f7 01       	movw	r30, r14
    31fe:	92 81       	ldd	r25, Z+2	; 0x02
    3200:	f8 01       	movw	r30, r16
    3202:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    3204:	f7 01       	movw	r30, r14
    3206:	93 81       	ldd	r25, Z+3	; 0x03
    3208:	f8 01       	movw	r30, r16
    320a:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    320c:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    320e:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    3210:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    3212:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    3214:	81 70       	andi	r24, 0x01	; 1
    3216:	f7 01       	movw	r30, r14
    3218:	90 81       	ld	r25, Z
    321a:	89 2b       	or	r24, r25
    321c:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    321e:	80 83       	st	Z, r24
    3220:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3222:	77 df       	rcall	.-274    	; 0x3112 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    3224:	df be       	out	0x3f, r13	; 63
    3226:	0f 90       	pop	r0
    3228:	df 91       	pop	r29
    322a:	cf 91       	pop	r28
    322c:	1f 91       	pop	r17
    322e:	0f 91       	pop	r16
    3230:	ff 90       	pop	r15
    3232:	ef 90       	pop	r14
    3234:	df 90       	pop	r13
    3236:	cf 90       	pop	r12
    3238:	bf 90       	pop	r11
    323a:	af 90       	pop	r10
    323c:	9f 90       	pop	r9
    323e:	08 95       	ret

00003240 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    3240:	df 92       	push	r13
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	1f 92       	push	r1
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	8c 01       	movw	r16, r24
    3256:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3258:	8f b7       	in	r24, 0x3f	; 63
    325a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    325c:	f8 94       	cli
	return flags;
    325e:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    3260:	c8 01       	movw	r24, r16
    3262:	47 df       	rcall	.-370    	; 0x30f2 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    3264:	f8 01       	movw	r30, r16
    3266:	80 81       	ld	r24, Z
    3268:	8e 7f       	andi	r24, 0xFE	; 254
    326a:	f7 01       	movw	r30, r14
    326c:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    326e:	f8 01       	movw	r30, r16
    3270:	81 81       	ldd	r24, Z+1	; 0x01
    3272:	f7 01       	movw	r30, r14
    3274:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    3276:	f8 01       	movw	r30, r16
    3278:	82 81       	ldd	r24, Z+2	; 0x02
    327a:	f7 01       	movw	r30, r14
    327c:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    327e:	f8 01       	movw	r30, r16
    3280:	83 81       	ldd	r24, Z+3	; 0x03
    3282:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    3284:	83 83       	std	Z+3, r24	; 0x03
    3286:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3288:	44 df       	rcall	.-376    	; 0x3112 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    328a:	df be       	out	0x3f, r13	; 63
    328c:	0f 90       	pop	r0
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	1f 91       	pop	r17
    3294:	0f 91       	pop	r16
    3296:	ff 90       	pop	r15
    3298:	ef 90       	pop	r14
    329a:	df 90       	pop	r13
    329c:	08 95       	ret

0000329e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    329e:	1f 92       	push	r1
    32a0:	0f 92       	push	r0
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	0f 92       	push	r0
    32a6:	11 24       	eor	r1, r1
    32a8:	0b b6       	in	r0, 0x3b	; 59
    32aa:	0f 92       	push	r0
    32ac:	2f 93       	push	r18
    32ae:	3f 93       	push	r19
    32b0:	4f 93       	push	r20
    32b2:	5f 93       	push	r21
    32b4:	6f 93       	push	r22
    32b6:	7f 93       	push	r23
    32b8:	8f 93       	push	r24
    32ba:	9f 93       	push	r25
    32bc:	af 93       	push	r26
    32be:	bf 93       	push	r27
    32c0:	ef 93       	push	r30
    32c2:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    32c4:	e0 91 9e 21 	lds	r30, 0x219E	; 0x80219e <tc_tcc0_ovf_callback>
    32c8:	f0 91 9f 21 	lds	r31, 0x219F	; 0x80219f <tc_tcc0_ovf_callback+0x1>
    32cc:	30 97       	sbiw	r30, 0x00	; 0
    32ce:	09 f0       	breq	.+2      	; 0x32d2 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
    32d0:	19 95       	eicall
	}
}
    32d2:	ff 91       	pop	r31
    32d4:	ef 91       	pop	r30
    32d6:	bf 91       	pop	r27
    32d8:	af 91       	pop	r26
    32da:	9f 91       	pop	r25
    32dc:	8f 91       	pop	r24
    32de:	7f 91       	pop	r23
    32e0:	6f 91       	pop	r22
    32e2:	5f 91       	pop	r21
    32e4:	4f 91       	pop	r20
    32e6:	3f 91       	pop	r19
    32e8:	2f 91       	pop	r18
    32ea:	0f 90       	pop	r0
    32ec:	0b be       	out	0x3b, r0	; 59
    32ee:	0f 90       	pop	r0
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	0f 90       	pop	r0
    32f4:	1f 90       	pop	r1
    32f6:	18 95       	reti

000032f8 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    32f8:	1f 92       	push	r1
    32fa:	0f 92       	push	r0
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	0f 92       	push	r0
    3300:	11 24       	eor	r1, r1
    3302:	0b b6       	in	r0, 0x3b	; 59
    3304:	0f 92       	push	r0
    3306:	2f 93       	push	r18
    3308:	3f 93       	push	r19
    330a:	4f 93       	push	r20
    330c:	5f 93       	push	r21
    330e:	6f 93       	push	r22
    3310:	7f 93       	push	r23
    3312:	8f 93       	push	r24
    3314:	9f 93       	push	r25
    3316:	af 93       	push	r26
    3318:	bf 93       	push	r27
    331a:	ef 93       	push	r30
    331c:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    331e:	e0 91 9c 21 	lds	r30, 0x219C	; 0x80219c <tc_tcc0_err_callback>
    3322:	f0 91 9d 21 	lds	r31, 0x219D	; 0x80219d <tc_tcc0_err_callback+0x1>
    3326:	30 97       	sbiw	r30, 0x00	; 0
    3328:	09 f0       	breq	.+2      	; 0x332c <__vector_15+0x34>
		tc_tcc0_err_callback();
    332a:	19 95       	eicall
	}
}
    332c:	ff 91       	pop	r31
    332e:	ef 91       	pop	r30
    3330:	bf 91       	pop	r27
    3332:	af 91       	pop	r26
    3334:	9f 91       	pop	r25
    3336:	8f 91       	pop	r24
    3338:	7f 91       	pop	r23
    333a:	6f 91       	pop	r22
    333c:	5f 91       	pop	r21
    333e:	4f 91       	pop	r20
    3340:	3f 91       	pop	r19
    3342:	2f 91       	pop	r18
    3344:	0f 90       	pop	r0
    3346:	0b be       	out	0x3b, r0	; 59
    3348:	0f 90       	pop	r0
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	0f 90       	pop	r0
    334e:	1f 90       	pop	r1
    3350:	18 95       	reti

00003352 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    3352:	1f 92       	push	r1
    3354:	0f 92       	push	r0
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	0f 92       	push	r0
    335a:	11 24       	eor	r1, r1
    335c:	0b b6       	in	r0, 0x3b	; 59
    335e:	0f 92       	push	r0
    3360:	2f 93       	push	r18
    3362:	3f 93       	push	r19
    3364:	4f 93       	push	r20
    3366:	5f 93       	push	r21
    3368:	6f 93       	push	r22
    336a:	7f 93       	push	r23
    336c:	8f 93       	push	r24
    336e:	9f 93       	push	r25
    3370:	af 93       	push	r26
    3372:	bf 93       	push	r27
    3374:	ef 93       	push	r30
    3376:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    3378:	e0 91 9a 21 	lds	r30, 0x219A	; 0x80219a <tc_tcc0_cca_callback>
    337c:	f0 91 9b 21 	lds	r31, 0x219B	; 0x80219b <tc_tcc0_cca_callback+0x1>
    3380:	30 97       	sbiw	r30, 0x00	; 0
    3382:	09 f0       	breq	.+2      	; 0x3386 <__vector_16+0x34>
		tc_tcc0_cca_callback();
    3384:	19 95       	eicall
	}
}
    3386:	ff 91       	pop	r31
    3388:	ef 91       	pop	r30
    338a:	bf 91       	pop	r27
    338c:	af 91       	pop	r26
    338e:	9f 91       	pop	r25
    3390:	8f 91       	pop	r24
    3392:	7f 91       	pop	r23
    3394:	6f 91       	pop	r22
    3396:	5f 91       	pop	r21
    3398:	4f 91       	pop	r20
    339a:	3f 91       	pop	r19
    339c:	2f 91       	pop	r18
    339e:	0f 90       	pop	r0
    33a0:	0b be       	out	0x3b, r0	; 59
    33a2:	0f 90       	pop	r0
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	0f 90       	pop	r0
    33a8:	1f 90       	pop	r1
    33aa:	18 95       	reti

000033ac <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    33ac:	1f 92       	push	r1
    33ae:	0f 92       	push	r0
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	0f 92       	push	r0
    33b4:	11 24       	eor	r1, r1
    33b6:	0b b6       	in	r0, 0x3b	; 59
    33b8:	0f 92       	push	r0
    33ba:	2f 93       	push	r18
    33bc:	3f 93       	push	r19
    33be:	4f 93       	push	r20
    33c0:	5f 93       	push	r21
    33c2:	6f 93       	push	r22
    33c4:	7f 93       	push	r23
    33c6:	8f 93       	push	r24
    33c8:	9f 93       	push	r25
    33ca:	af 93       	push	r26
    33cc:	bf 93       	push	r27
    33ce:	ef 93       	push	r30
    33d0:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    33d2:	e0 91 98 21 	lds	r30, 0x2198	; 0x802198 <tc_tcc0_ccb_callback>
    33d6:	f0 91 99 21 	lds	r31, 0x2199	; 0x802199 <tc_tcc0_ccb_callback+0x1>
    33da:	30 97       	sbiw	r30, 0x00	; 0
    33dc:	09 f0       	breq	.+2      	; 0x33e0 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    33de:	19 95       	eicall
	}
}
    33e0:	ff 91       	pop	r31
    33e2:	ef 91       	pop	r30
    33e4:	bf 91       	pop	r27
    33e6:	af 91       	pop	r26
    33e8:	9f 91       	pop	r25
    33ea:	8f 91       	pop	r24
    33ec:	7f 91       	pop	r23
    33ee:	6f 91       	pop	r22
    33f0:	5f 91       	pop	r21
    33f2:	4f 91       	pop	r20
    33f4:	3f 91       	pop	r19
    33f6:	2f 91       	pop	r18
    33f8:	0f 90       	pop	r0
    33fa:	0b be       	out	0x3b, r0	; 59
    33fc:	0f 90       	pop	r0
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	0f 90       	pop	r0
    3402:	1f 90       	pop	r1
    3404:	18 95       	reti

00003406 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    3406:	1f 92       	push	r1
    3408:	0f 92       	push	r0
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	0f 92       	push	r0
    340e:	11 24       	eor	r1, r1
    3410:	0b b6       	in	r0, 0x3b	; 59
    3412:	0f 92       	push	r0
    3414:	2f 93       	push	r18
    3416:	3f 93       	push	r19
    3418:	4f 93       	push	r20
    341a:	5f 93       	push	r21
    341c:	6f 93       	push	r22
    341e:	7f 93       	push	r23
    3420:	8f 93       	push	r24
    3422:	9f 93       	push	r25
    3424:	af 93       	push	r26
    3426:	bf 93       	push	r27
    3428:	ef 93       	push	r30
    342a:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    342c:	e0 91 96 21 	lds	r30, 0x2196	; 0x802196 <tc_tcc0_ccc_callback>
    3430:	f0 91 97 21 	lds	r31, 0x2197	; 0x802197 <tc_tcc0_ccc_callback+0x1>
    3434:	30 97       	sbiw	r30, 0x00	; 0
    3436:	09 f0       	breq	.+2      	; 0x343a <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    3438:	19 95       	eicall
	}
}
    343a:	ff 91       	pop	r31
    343c:	ef 91       	pop	r30
    343e:	bf 91       	pop	r27
    3440:	af 91       	pop	r26
    3442:	9f 91       	pop	r25
    3444:	8f 91       	pop	r24
    3446:	7f 91       	pop	r23
    3448:	6f 91       	pop	r22
    344a:	5f 91       	pop	r21
    344c:	4f 91       	pop	r20
    344e:	3f 91       	pop	r19
    3450:	2f 91       	pop	r18
    3452:	0f 90       	pop	r0
    3454:	0b be       	out	0x3b, r0	; 59
    3456:	0f 90       	pop	r0
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	0f 90       	pop	r0
    345c:	1f 90       	pop	r1
    345e:	18 95       	reti

00003460 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    3460:	1f 92       	push	r1
    3462:	0f 92       	push	r0
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	0f 92       	push	r0
    3468:	11 24       	eor	r1, r1
    346a:	0b b6       	in	r0, 0x3b	; 59
    346c:	0f 92       	push	r0
    346e:	2f 93       	push	r18
    3470:	3f 93       	push	r19
    3472:	4f 93       	push	r20
    3474:	5f 93       	push	r21
    3476:	6f 93       	push	r22
    3478:	7f 93       	push	r23
    347a:	8f 93       	push	r24
    347c:	9f 93       	push	r25
    347e:	af 93       	push	r26
    3480:	bf 93       	push	r27
    3482:	ef 93       	push	r30
    3484:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    3486:	e0 91 94 21 	lds	r30, 0x2194	; 0x802194 <tc_tcc0_ccd_callback>
    348a:	f0 91 95 21 	lds	r31, 0x2195	; 0x802195 <tc_tcc0_ccd_callback+0x1>
    348e:	30 97       	sbiw	r30, 0x00	; 0
    3490:	09 f0       	breq	.+2      	; 0x3494 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    3492:	19 95       	eicall
	}
}
    3494:	ff 91       	pop	r31
    3496:	ef 91       	pop	r30
    3498:	bf 91       	pop	r27
    349a:	af 91       	pop	r26
    349c:	9f 91       	pop	r25
    349e:	8f 91       	pop	r24
    34a0:	7f 91       	pop	r23
    34a2:	6f 91       	pop	r22
    34a4:	5f 91       	pop	r21
    34a6:	4f 91       	pop	r20
    34a8:	3f 91       	pop	r19
    34aa:	2f 91       	pop	r18
    34ac:	0f 90       	pop	r0
    34ae:	0b be       	out	0x3b, r0	; 59
    34b0:	0f 90       	pop	r0
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	0f 90       	pop	r0
    34b6:	1f 90       	pop	r1
    34b8:	18 95       	reti

000034ba <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    34ba:	1f 92       	push	r1
    34bc:	0f 92       	push	r0
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	0f 92       	push	r0
    34c2:	11 24       	eor	r1, r1
    34c4:	0b b6       	in	r0, 0x3b	; 59
    34c6:	0f 92       	push	r0
    34c8:	2f 93       	push	r18
    34ca:	3f 93       	push	r19
    34cc:	4f 93       	push	r20
    34ce:	5f 93       	push	r21
    34d0:	6f 93       	push	r22
    34d2:	7f 93       	push	r23
    34d4:	8f 93       	push	r24
    34d6:	9f 93       	push	r25
    34d8:	af 93       	push	r26
    34da:	bf 93       	push	r27
    34dc:	ef 93       	push	r30
    34de:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    34e0:	e0 91 92 21 	lds	r30, 0x2192	; 0x802192 <tc_tcc1_ovf_callback>
    34e4:	f0 91 93 21 	lds	r31, 0x2193	; 0x802193 <tc_tcc1_ovf_callback+0x1>
    34e8:	30 97       	sbiw	r30, 0x00	; 0
    34ea:	09 f0       	breq	.+2      	; 0x34ee <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    34ec:	19 95       	eicall
	}
}
    34ee:	ff 91       	pop	r31
    34f0:	ef 91       	pop	r30
    34f2:	bf 91       	pop	r27
    34f4:	af 91       	pop	r26
    34f6:	9f 91       	pop	r25
    34f8:	8f 91       	pop	r24
    34fa:	7f 91       	pop	r23
    34fc:	6f 91       	pop	r22
    34fe:	5f 91       	pop	r21
    3500:	4f 91       	pop	r20
    3502:	3f 91       	pop	r19
    3504:	2f 91       	pop	r18
    3506:	0f 90       	pop	r0
    3508:	0b be       	out	0x3b, r0	; 59
    350a:	0f 90       	pop	r0
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	0f 90       	pop	r0
    3510:	1f 90       	pop	r1
    3512:	18 95       	reti

00003514 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    3514:	1f 92       	push	r1
    3516:	0f 92       	push	r0
    3518:	0f b6       	in	r0, 0x3f	; 63
    351a:	0f 92       	push	r0
    351c:	11 24       	eor	r1, r1
    351e:	0b b6       	in	r0, 0x3b	; 59
    3520:	0f 92       	push	r0
    3522:	2f 93       	push	r18
    3524:	3f 93       	push	r19
    3526:	4f 93       	push	r20
    3528:	5f 93       	push	r21
    352a:	6f 93       	push	r22
    352c:	7f 93       	push	r23
    352e:	8f 93       	push	r24
    3530:	9f 93       	push	r25
    3532:	af 93       	push	r26
    3534:	bf 93       	push	r27
    3536:	ef 93       	push	r30
    3538:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    353a:	e0 91 90 21 	lds	r30, 0x2190	; 0x802190 <tc_tcc1_err_callback>
    353e:	f0 91 91 21 	lds	r31, 0x2191	; 0x802191 <tc_tcc1_err_callback+0x1>
    3542:	30 97       	sbiw	r30, 0x00	; 0
    3544:	09 f0       	breq	.+2      	; 0x3548 <__vector_21+0x34>
		tc_tcc1_err_callback();
    3546:	19 95       	eicall
	}
}
    3548:	ff 91       	pop	r31
    354a:	ef 91       	pop	r30
    354c:	bf 91       	pop	r27
    354e:	af 91       	pop	r26
    3550:	9f 91       	pop	r25
    3552:	8f 91       	pop	r24
    3554:	7f 91       	pop	r23
    3556:	6f 91       	pop	r22
    3558:	5f 91       	pop	r21
    355a:	4f 91       	pop	r20
    355c:	3f 91       	pop	r19
    355e:	2f 91       	pop	r18
    3560:	0f 90       	pop	r0
    3562:	0b be       	out	0x3b, r0	; 59
    3564:	0f 90       	pop	r0
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	0f 90       	pop	r0
    356a:	1f 90       	pop	r1
    356c:	18 95       	reti

0000356e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    356e:	1f 92       	push	r1
    3570:	0f 92       	push	r0
    3572:	0f b6       	in	r0, 0x3f	; 63
    3574:	0f 92       	push	r0
    3576:	11 24       	eor	r1, r1
    3578:	0b b6       	in	r0, 0x3b	; 59
    357a:	0f 92       	push	r0
    357c:	2f 93       	push	r18
    357e:	3f 93       	push	r19
    3580:	4f 93       	push	r20
    3582:	5f 93       	push	r21
    3584:	6f 93       	push	r22
    3586:	7f 93       	push	r23
    3588:	8f 93       	push	r24
    358a:	9f 93       	push	r25
    358c:	af 93       	push	r26
    358e:	bf 93       	push	r27
    3590:	ef 93       	push	r30
    3592:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    3594:	e0 91 8e 21 	lds	r30, 0x218E	; 0x80218e <tc_tcc1_cca_callback>
    3598:	f0 91 8f 21 	lds	r31, 0x218F	; 0x80218f <tc_tcc1_cca_callback+0x1>
    359c:	30 97       	sbiw	r30, 0x00	; 0
    359e:	09 f0       	breq	.+2      	; 0x35a2 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    35a0:	19 95       	eicall
	}
}
    35a2:	ff 91       	pop	r31
    35a4:	ef 91       	pop	r30
    35a6:	bf 91       	pop	r27
    35a8:	af 91       	pop	r26
    35aa:	9f 91       	pop	r25
    35ac:	8f 91       	pop	r24
    35ae:	7f 91       	pop	r23
    35b0:	6f 91       	pop	r22
    35b2:	5f 91       	pop	r21
    35b4:	4f 91       	pop	r20
    35b6:	3f 91       	pop	r19
    35b8:	2f 91       	pop	r18
    35ba:	0f 90       	pop	r0
    35bc:	0b be       	out	0x3b, r0	; 59
    35be:	0f 90       	pop	r0
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	0f 90       	pop	r0
    35c4:	1f 90       	pop	r1
    35c6:	18 95       	reti

000035c8 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    35c8:	1f 92       	push	r1
    35ca:	0f 92       	push	r0
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	0f 92       	push	r0
    35d0:	11 24       	eor	r1, r1
    35d2:	0b b6       	in	r0, 0x3b	; 59
    35d4:	0f 92       	push	r0
    35d6:	2f 93       	push	r18
    35d8:	3f 93       	push	r19
    35da:	4f 93       	push	r20
    35dc:	5f 93       	push	r21
    35de:	6f 93       	push	r22
    35e0:	7f 93       	push	r23
    35e2:	8f 93       	push	r24
    35e4:	9f 93       	push	r25
    35e6:	af 93       	push	r26
    35e8:	bf 93       	push	r27
    35ea:	ef 93       	push	r30
    35ec:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    35ee:	e0 91 8c 21 	lds	r30, 0x218C	; 0x80218c <tc_tcc1_ccb_callback>
    35f2:	f0 91 8d 21 	lds	r31, 0x218D	; 0x80218d <tc_tcc1_ccb_callback+0x1>
    35f6:	30 97       	sbiw	r30, 0x00	; 0
    35f8:	09 f0       	breq	.+2      	; 0x35fc <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    35fa:	19 95       	eicall
	}
}
    35fc:	ff 91       	pop	r31
    35fe:	ef 91       	pop	r30
    3600:	bf 91       	pop	r27
    3602:	af 91       	pop	r26
    3604:	9f 91       	pop	r25
    3606:	8f 91       	pop	r24
    3608:	7f 91       	pop	r23
    360a:	6f 91       	pop	r22
    360c:	5f 91       	pop	r21
    360e:	4f 91       	pop	r20
    3610:	3f 91       	pop	r19
    3612:	2f 91       	pop	r18
    3614:	0f 90       	pop	r0
    3616:	0b be       	out	0x3b, r0	; 59
    3618:	0f 90       	pop	r0
    361a:	0f be       	out	0x3f, r0	; 63
    361c:	0f 90       	pop	r0
    361e:	1f 90       	pop	r1
    3620:	18 95       	reti

00003622 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    3622:	1f 92       	push	r1
    3624:	0f 92       	push	r0
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	0f 92       	push	r0
    362a:	11 24       	eor	r1, r1
    362c:	0b b6       	in	r0, 0x3b	; 59
    362e:	0f 92       	push	r0
    3630:	2f 93       	push	r18
    3632:	3f 93       	push	r19
    3634:	4f 93       	push	r20
    3636:	5f 93       	push	r21
    3638:	6f 93       	push	r22
    363a:	7f 93       	push	r23
    363c:	8f 93       	push	r24
    363e:	9f 93       	push	r25
    3640:	af 93       	push	r26
    3642:	bf 93       	push	r27
    3644:	ef 93       	push	r30
    3646:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    3648:	e0 91 8a 21 	lds	r30, 0x218A	; 0x80218a <tc_tcd0_ovf_callback>
    364c:	f0 91 8b 21 	lds	r31, 0x218B	; 0x80218b <tc_tcd0_ovf_callback+0x1>
    3650:	30 97       	sbiw	r30, 0x00	; 0
    3652:	09 f0       	breq	.+2      	; 0x3656 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    3654:	19 95       	eicall
	}
}
    3656:	ff 91       	pop	r31
    3658:	ef 91       	pop	r30
    365a:	bf 91       	pop	r27
    365c:	af 91       	pop	r26
    365e:	9f 91       	pop	r25
    3660:	8f 91       	pop	r24
    3662:	7f 91       	pop	r23
    3664:	6f 91       	pop	r22
    3666:	5f 91       	pop	r21
    3668:	4f 91       	pop	r20
    366a:	3f 91       	pop	r19
    366c:	2f 91       	pop	r18
    366e:	0f 90       	pop	r0
    3670:	0b be       	out	0x3b, r0	; 59
    3672:	0f 90       	pop	r0
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	0f 90       	pop	r0
    3678:	1f 90       	pop	r1
    367a:	18 95       	reti

0000367c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    367c:	1f 92       	push	r1
    367e:	0f 92       	push	r0
    3680:	0f b6       	in	r0, 0x3f	; 63
    3682:	0f 92       	push	r0
    3684:	11 24       	eor	r1, r1
    3686:	0b b6       	in	r0, 0x3b	; 59
    3688:	0f 92       	push	r0
    368a:	2f 93       	push	r18
    368c:	3f 93       	push	r19
    368e:	4f 93       	push	r20
    3690:	5f 93       	push	r21
    3692:	6f 93       	push	r22
    3694:	7f 93       	push	r23
    3696:	8f 93       	push	r24
    3698:	9f 93       	push	r25
    369a:	af 93       	push	r26
    369c:	bf 93       	push	r27
    369e:	ef 93       	push	r30
    36a0:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    36a2:	e0 91 88 21 	lds	r30, 0x2188	; 0x802188 <tc_tcd0_err_callback>
    36a6:	f0 91 89 21 	lds	r31, 0x2189	; 0x802189 <tc_tcd0_err_callback+0x1>
    36aa:	30 97       	sbiw	r30, 0x00	; 0
    36ac:	09 f0       	breq	.+2      	; 0x36b0 <__vector_78+0x34>
		tc_tcd0_err_callback();
    36ae:	19 95       	eicall
	}
}
    36b0:	ff 91       	pop	r31
    36b2:	ef 91       	pop	r30
    36b4:	bf 91       	pop	r27
    36b6:	af 91       	pop	r26
    36b8:	9f 91       	pop	r25
    36ba:	8f 91       	pop	r24
    36bc:	7f 91       	pop	r23
    36be:	6f 91       	pop	r22
    36c0:	5f 91       	pop	r21
    36c2:	4f 91       	pop	r20
    36c4:	3f 91       	pop	r19
    36c6:	2f 91       	pop	r18
    36c8:	0f 90       	pop	r0
    36ca:	0b be       	out	0x3b, r0	; 59
    36cc:	0f 90       	pop	r0
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	0f 90       	pop	r0
    36d2:	1f 90       	pop	r1
    36d4:	18 95       	reti

000036d6 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    36d6:	1f 92       	push	r1
    36d8:	0f 92       	push	r0
    36da:	0f b6       	in	r0, 0x3f	; 63
    36dc:	0f 92       	push	r0
    36de:	11 24       	eor	r1, r1
    36e0:	0b b6       	in	r0, 0x3b	; 59
    36e2:	0f 92       	push	r0
    36e4:	2f 93       	push	r18
    36e6:	3f 93       	push	r19
    36e8:	4f 93       	push	r20
    36ea:	5f 93       	push	r21
    36ec:	6f 93       	push	r22
    36ee:	7f 93       	push	r23
    36f0:	8f 93       	push	r24
    36f2:	9f 93       	push	r25
    36f4:	af 93       	push	r26
    36f6:	bf 93       	push	r27
    36f8:	ef 93       	push	r30
    36fa:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    36fc:	e0 91 86 21 	lds	r30, 0x2186	; 0x802186 <tc_tcd0_cca_callback>
    3700:	f0 91 87 21 	lds	r31, 0x2187	; 0x802187 <tc_tcd0_cca_callback+0x1>
    3704:	30 97       	sbiw	r30, 0x00	; 0
    3706:	09 f0       	breq	.+2      	; 0x370a <__vector_79+0x34>
		tc_tcd0_cca_callback();
    3708:	19 95       	eicall
	}
}
    370a:	ff 91       	pop	r31
    370c:	ef 91       	pop	r30
    370e:	bf 91       	pop	r27
    3710:	af 91       	pop	r26
    3712:	9f 91       	pop	r25
    3714:	8f 91       	pop	r24
    3716:	7f 91       	pop	r23
    3718:	6f 91       	pop	r22
    371a:	5f 91       	pop	r21
    371c:	4f 91       	pop	r20
    371e:	3f 91       	pop	r19
    3720:	2f 91       	pop	r18
    3722:	0f 90       	pop	r0
    3724:	0b be       	out	0x3b, r0	; 59
    3726:	0f 90       	pop	r0
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	0f 90       	pop	r0
    372c:	1f 90       	pop	r1
    372e:	18 95       	reti

00003730 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    3730:	1f 92       	push	r1
    3732:	0f 92       	push	r0
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	0f 92       	push	r0
    3738:	11 24       	eor	r1, r1
    373a:	0b b6       	in	r0, 0x3b	; 59
    373c:	0f 92       	push	r0
    373e:	2f 93       	push	r18
    3740:	3f 93       	push	r19
    3742:	4f 93       	push	r20
    3744:	5f 93       	push	r21
    3746:	6f 93       	push	r22
    3748:	7f 93       	push	r23
    374a:	8f 93       	push	r24
    374c:	9f 93       	push	r25
    374e:	af 93       	push	r26
    3750:	bf 93       	push	r27
    3752:	ef 93       	push	r30
    3754:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    3756:	e0 91 84 21 	lds	r30, 0x2184	; 0x802184 <tc_tcd0_ccb_callback>
    375a:	f0 91 85 21 	lds	r31, 0x2185	; 0x802185 <tc_tcd0_ccb_callback+0x1>
    375e:	30 97       	sbiw	r30, 0x00	; 0
    3760:	09 f0       	breq	.+2      	; 0x3764 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    3762:	19 95       	eicall
	}
}
    3764:	ff 91       	pop	r31
    3766:	ef 91       	pop	r30
    3768:	bf 91       	pop	r27
    376a:	af 91       	pop	r26
    376c:	9f 91       	pop	r25
    376e:	8f 91       	pop	r24
    3770:	7f 91       	pop	r23
    3772:	6f 91       	pop	r22
    3774:	5f 91       	pop	r21
    3776:	4f 91       	pop	r20
    3778:	3f 91       	pop	r19
    377a:	2f 91       	pop	r18
    377c:	0f 90       	pop	r0
    377e:	0b be       	out	0x3b, r0	; 59
    3780:	0f 90       	pop	r0
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	0f 90       	pop	r0
    3786:	1f 90       	pop	r1
    3788:	18 95       	reti

0000378a <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    378a:	1f 92       	push	r1
    378c:	0f 92       	push	r0
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	0f 92       	push	r0
    3792:	11 24       	eor	r1, r1
    3794:	0b b6       	in	r0, 0x3b	; 59
    3796:	0f 92       	push	r0
    3798:	2f 93       	push	r18
    379a:	3f 93       	push	r19
    379c:	4f 93       	push	r20
    379e:	5f 93       	push	r21
    37a0:	6f 93       	push	r22
    37a2:	7f 93       	push	r23
    37a4:	8f 93       	push	r24
    37a6:	9f 93       	push	r25
    37a8:	af 93       	push	r26
    37aa:	bf 93       	push	r27
    37ac:	ef 93       	push	r30
    37ae:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    37b0:	e0 91 82 21 	lds	r30, 0x2182	; 0x802182 <tc_tcd0_ccc_callback>
    37b4:	f0 91 83 21 	lds	r31, 0x2183	; 0x802183 <tc_tcd0_ccc_callback+0x1>
    37b8:	30 97       	sbiw	r30, 0x00	; 0
    37ba:	09 f0       	breq	.+2      	; 0x37be <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    37bc:	19 95       	eicall
	}
}
    37be:	ff 91       	pop	r31
    37c0:	ef 91       	pop	r30
    37c2:	bf 91       	pop	r27
    37c4:	af 91       	pop	r26
    37c6:	9f 91       	pop	r25
    37c8:	8f 91       	pop	r24
    37ca:	7f 91       	pop	r23
    37cc:	6f 91       	pop	r22
    37ce:	5f 91       	pop	r21
    37d0:	4f 91       	pop	r20
    37d2:	3f 91       	pop	r19
    37d4:	2f 91       	pop	r18
    37d6:	0f 90       	pop	r0
    37d8:	0b be       	out	0x3b, r0	; 59
    37da:	0f 90       	pop	r0
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	0f 90       	pop	r0
    37e0:	1f 90       	pop	r1
    37e2:	18 95       	reti

000037e4 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    37e4:	1f 92       	push	r1
    37e6:	0f 92       	push	r0
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	0f 92       	push	r0
    37ec:	11 24       	eor	r1, r1
    37ee:	0b b6       	in	r0, 0x3b	; 59
    37f0:	0f 92       	push	r0
    37f2:	2f 93       	push	r18
    37f4:	3f 93       	push	r19
    37f6:	4f 93       	push	r20
    37f8:	5f 93       	push	r21
    37fa:	6f 93       	push	r22
    37fc:	7f 93       	push	r23
    37fe:	8f 93       	push	r24
    3800:	9f 93       	push	r25
    3802:	af 93       	push	r26
    3804:	bf 93       	push	r27
    3806:	ef 93       	push	r30
    3808:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    380a:	e0 91 80 21 	lds	r30, 0x2180	; 0x802180 <tc_tcd0_ccd_callback>
    380e:	f0 91 81 21 	lds	r31, 0x2181	; 0x802181 <tc_tcd0_ccd_callback+0x1>
    3812:	30 97       	sbiw	r30, 0x00	; 0
    3814:	09 f0       	breq	.+2      	; 0x3818 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    3816:	19 95       	eicall
	}
}
    3818:	ff 91       	pop	r31
    381a:	ef 91       	pop	r30
    381c:	bf 91       	pop	r27
    381e:	af 91       	pop	r26
    3820:	9f 91       	pop	r25
    3822:	8f 91       	pop	r24
    3824:	7f 91       	pop	r23
    3826:	6f 91       	pop	r22
    3828:	5f 91       	pop	r21
    382a:	4f 91       	pop	r20
    382c:	3f 91       	pop	r19
    382e:	2f 91       	pop	r18
    3830:	0f 90       	pop	r0
    3832:	0b be       	out	0x3b, r0	; 59
    3834:	0f 90       	pop	r0
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	0f 90       	pop	r0
    383a:	1f 90       	pop	r1
    383c:	18 95       	reti

0000383e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    383e:	1f 92       	push	r1
    3840:	0f 92       	push	r0
    3842:	0f b6       	in	r0, 0x3f	; 63
    3844:	0f 92       	push	r0
    3846:	11 24       	eor	r1, r1
    3848:	0b b6       	in	r0, 0x3b	; 59
    384a:	0f 92       	push	r0
    384c:	2f 93       	push	r18
    384e:	3f 93       	push	r19
    3850:	4f 93       	push	r20
    3852:	5f 93       	push	r21
    3854:	6f 93       	push	r22
    3856:	7f 93       	push	r23
    3858:	8f 93       	push	r24
    385a:	9f 93       	push	r25
    385c:	af 93       	push	r26
    385e:	bf 93       	push	r27
    3860:	ef 93       	push	r30
    3862:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    3864:	e0 91 7e 21 	lds	r30, 0x217E	; 0x80217e <tc_tcd1_ovf_callback>
    3868:	f0 91 7f 21 	lds	r31, 0x217F	; 0x80217f <tc_tcd1_ovf_callback+0x1>
    386c:	30 97       	sbiw	r30, 0x00	; 0
    386e:	09 f0       	breq	.+2      	; 0x3872 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    3870:	19 95       	eicall
	}
}
    3872:	ff 91       	pop	r31
    3874:	ef 91       	pop	r30
    3876:	bf 91       	pop	r27
    3878:	af 91       	pop	r26
    387a:	9f 91       	pop	r25
    387c:	8f 91       	pop	r24
    387e:	7f 91       	pop	r23
    3880:	6f 91       	pop	r22
    3882:	5f 91       	pop	r21
    3884:	4f 91       	pop	r20
    3886:	3f 91       	pop	r19
    3888:	2f 91       	pop	r18
    388a:	0f 90       	pop	r0
    388c:	0b be       	out	0x3b, r0	; 59
    388e:	0f 90       	pop	r0
    3890:	0f be       	out	0x3f, r0	; 63
    3892:	0f 90       	pop	r0
    3894:	1f 90       	pop	r1
    3896:	18 95       	reti

00003898 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    3898:	1f 92       	push	r1
    389a:	0f 92       	push	r0
    389c:	0f b6       	in	r0, 0x3f	; 63
    389e:	0f 92       	push	r0
    38a0:	11 24       	eor	r1, r1
    38a2:	0b b6       	in	r0, 0x3b	; 59
    38a4:	0f 92       	push	r0
    38a6:	2f 93       	push	r18
    38a8:	3f 93       	push	r19
    38aa:	4f 93       	push	r20
    38ac:	5f 93       	push	r21
    38ae:	6f 93       	push	r22
    38b0:	7f 93       	push	r23
    38b2:	8f 93       	push	r24
    38b4:	9f 93       	push	r25
    38b6:	af 93       	push	r26
    38b8:	bf 93       	push	r27
    38ba:	ef 93       	push	r30
    38bc:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    38be:	e0 91 7c 21 	lds	r30, 0x217C	; 0x80217c <tc_tcd1_err_callback>
    38c2:	f0 91 7d 21 	lds	r31, 0x217D	; 0x80217d <tc_tcd1_err_callback+0x1>
    38c6:	30 97       	sbiw	r30, 0x00	; 0
    38c8:	09 f0       	breq	.+2      	; 0x38cc <__vector_84+0x34>
		tc_tcd1_err_callback();
    38ca:	19 95       	eicall
	}
}
    38cc:	ff 91       	pop	r31
    38ce:	ef 91       	pop	r30
    38d0:	bf 91       	pop	r27
    38d2:	af 91       	pop	r26
    38d4:	9f 91       	pop	r25
    38d6:	8f 91       	pop	r24
    38d8:	7f 91       	pop	r23
    38da:	6f 91       	pop	r22
    38dc:	5f 91       	pop	r21
    38de:	4f 91       	pop	r20
    38e0:	3f 91       	pop	r19
    38e2:	2f 91       	pop	r18
    38e4:	0f 90       	pop	r0
    38e6:	0b be       	out	0x3b, r0	; 59
    38e8:	0f 90       	pop	r0
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	0f 90       	pop	r0
    38ee:	1f 90       	pop	r1
    38f0:	18 95       	reti

000038f2 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    38f2:	1f 92       	push	r1
    38f4:	0f 92       	push	r0
    38f6:	0f b6       	in	r0, 0x3f	; 63
    38f8:	0f 92       	push	r0
    38fa:	11 24       	eor	r1, r1
    38fc:	0b b6       	in	r0, 0x3b	; 59
    38fe:	0f 92       	push	r0
    3900:	2f 93       	push	r18
    3902:	3f 93       	push	r19
    3904:	4f 93       	push	r20
    3906:	5f 93       	push	r21
    3908:	6f 93       	push	r22
    390a:	7f 93       	push	r23
    390c:	8f 93       	push	r24
    390e:	9f 93       	push	r25
    3910:	af 93       	push	r26
    3912:	bf 93       	push	r27
    3914:	ef 93       	push	r30
    3916:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    3918:	e0 91 7a 21 	lds	r30, 0x217A	; 0x80217a <tc_tcd1_cca_callback>
    391c:	f0 91 7b 21 	lds	r31, 0x217B	; 0x80217b <tc_tcd1_cca_callback+0x1>
    3920:	30 97       	sbiw	r30, 0x00	; 0
    3922:	09 f0       	breq	.+2      	; 0x3926 <__vector_85+0x34>
		tc_tcd1_cca_callback();
    3924:	19 95       	eicall
	}
}
    3926:	ff 91       	pop	r31
    3928:	ef 91       	pop	r30
    392a:	bf 91       	pop	r27
    392c:	af 91       	pop	r26
    392e:	9f 91       	pop	r25
    3930:	8f 91       	pop	r24
    3932:	7f 91       	pop	r23
    3934:	6f 91       	pop	r22
    3936:	5f 91       	pop	r21
    3938:	4f 91       	pop	r20
    393a:	3f 91       	pop	r19
    393c:	2f 91       	pop	r18
    393e:	0f 90       	pop	r0
    3940:	0b be       	out	0x3b, r0	; 59
    3942:	0f 90       	pop	r0
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	0f 90       	pop	r0
    3948:	1f 90       	pop	r1
    394a:	18 95       	reti

0000394c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    394c:	1f 92       	push	r1
    394e:	0f 92       	push	r0
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	0f 92       	push	r0
    3954:	11 24       	eor	r1, r1
    3956:	0b b6       	in	r0, 0x3b	; 59
    3958:	0f 92       	push	r0
    395a:	2f 93       	push	r18
    395c:	3f 93       	push	r19
    395e:	4f 93       	push	r20
    3960:	5f 93       	push	r21
    3962:	6f 93       	push	r22
    3964:	7f 93       	push	r23
    3966:	8f 93       	push	r24
    3968:	9f 93       	push	r25
    396a:	af 93       	push	r26
    396c:	bf 93       	push	r27
    396e:	ef 93       	push	r30
    3970:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    3972:	e0 91 78 21 	lds	r30, 0x2178	; 0x802178 <tc_tcd1_ccb_callback>
    3976:	f0 91 79 21 	lds	r31, 0x2179	; 0x802179 <tc_tcd1_ccb_callback+0x1>
    397a:	30 97       	sbiw	r30, 0x00	; 0
    397c:	09 f0       	breq	.+2      	; 0x3980 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    397e:	19 95       	eicall
	}
}
    3980:	ff 91       	pop	r31
    3982:	ef 91       	pop	r30
    3984:	bf 91       	pop	r27
    3986:	af 91       	pop	r26
    3988:	9f 91       	pop	r25
    398a:	8f 91       	pop	r24
    398c:	7f 91       	pop	r23
    398e:	6f 91       	pop	r22
    3990:	5f 91       	pop	r21
    3992:	4f 91       	pop	r20
    3994:	3f 91       	pop	r19
    3996:	2f 91       	pop	r18
    3998:	0f 90       	pop	r0
    399a:	0b be       	out	0x3b, r0	; 59
    399c:	0f 90       	pop	r0
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	0f 90       	pop	r0
    39a2:	1f 90       	pop	r1
    39a4:	18 95       	reti

000039a6 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    39a6:	1f 92       	push	r1
    39a8:	0f 92       	push	r0
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	0f 92       	push	r0
    39ae:	11 24       	eor	r1, r1
    39b0:	0b b6       	in	r0, 0x3b	; 59
    39b2:	0f 92       	push	r0
    39b4:	2f 93       	push	r18
    39b6:	3f 93       	push	r19
    39b8:	4f 93       	push	r20
    39ba:	5f 93       	push	r21
    39bc:	6f 93       	push	r22
    39be:	7f 93       	push	r23
    39c0:	8f 93       	push	r24
    39c2:	9f 93       	push	r25
    39c4:	af 93       	push	r26
    39c6:	bf 93       	push	r27
    39c8:	ef 93       	push	r30
    39ca:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    39cc:	e0 91 76 21 	lds	r30, 0x2176	; 0x802176 <tc_tce0_ovf_callback>
    39d0:	f0 91 77 21 	lds	r31, 0x2177	; 0x802177 <tc_tce0_ovf_callback+0x1>
    39d4:	30 97       	sbiw	r30, 0x00	; 0
    39d6:	09 f0       	breq	.+2      	; 0x39da <__vector_47+0x34>
		tc_tce0_ovf_callback();
    39d8:	19 95       	eicall
	}
}
    39da:	ff 91       	pop	r31
    39dc:	ef 91       	pop	r30
    39de:	bf 91       	pop	r27
    39e0:	af 91       	pop	r26
    39e2:	9f 91       	pop	r25
    39e4:	8f 91       	pop	r24
    39e6:	7f 91       	pop	r23
    39e8:	6f 91       	pop	r22
    39ea:	5f 91       	pop	r21
    39ec:	4f 91       	pop	r20
    39ee:	3f 91       	pop	r19
    39f0:	2f 91       	pop	r18
    39f2:	0f 90       	pop	r0
    39f4:	0b be       	out	0x3b, r0	; 59
    39f6:	0f 90       	pop	r0
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	0f 90       	pop	r0
    39fc:	1f 90       	pop	r1
    39fe:	18 95       	reti

00003a00 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    3a00:	1f 92       	push	r1
    3a02:	0f 92       	push	r0
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	0f 92       	push	r0
    3a08:	11 24       	eor	r1, r1
    3a0a:	0b b6       	in	r0, 0x3b	; 59
    3a0c:	0f 92       	push	r0
    3a0e:	2f 93       	push	r18
    3a10:	3f 93       	push	r19
    3a12:	4f 93       	push	r20
    3a14:	5f 93       	push	r21
    3a16:	6f 93       	push	r22
    3a18:	7f 93       	push	r23
    3a1a:	8f 93       	push	r24
    3a1c:	9f 93       	push	r25
    3a1e:	af 93       	push	r26
    3a20:	bf 93       	push	r27
    3a22:	ef 93       	push	r30
    3a24:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    3a26:	e0 91 74 21 	lds	r30, 0x2174	; 0x802174 <tc_tce0_err_callback>
    3a2a:	f0 91 75 21 	lds	r31, 0x2175	; 0x802175 <tc_tce0_err_callback+0x1>
    3a2e:	30 97       	sbiw	r30, 0x00	; 0
    3a30:	09 f0       	breq	.+2      	; 0x3a34 <__vector_48+0x34>
		tc_tce0_err_callback();
    3a32:	19 95       	eicall
	}
}
    3a34:	ff 91       	pop	r31
    3a36:	ef 91       	pop	r30
    3a38:	bf 91       	pop	r27
    3a3a:	af 91       	pop	r26
    3a3c:	9f 91       	pop	r25
    3a3e:	8f 91       	pop	r24
    3a40:	7f 91       	pop	r23
    3a42:	6f 91       	pop	r22
    3a44:	5f 91       	pop	r21
    3a46:	4f 91       	pop	r20
    3a48:	3f 91       	pop	r19
    3a4a:	2f 91       	pop	r18
    3a4c:	0f 90       	pop	r0
    3a4e:	0b be       	out	0x3b, r0	; 59
    3a50:	0f 90       	pop	r0
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	0f 90       	pop	r0
    3a56:	1f 90       	pop	r1
    3a58:	18 95       	reti

00003a5a <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    3a5a:	1f 92       	push	r1
    3a5c:	0f 92       	push	r0
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	0f 92       	push	r0
    3a62:	11 24       	eor	r1, r1
    3a64:	0b b6       	in	r0, 0x3b	; 59
    3a66:	0f 92       	push	r0
    3a68:	2f 93       	push	r18
    3a6a:	3f 93       	push	r19
    3a6c:	4f 93       	push	r20
    3a6e:	5f 93       	push	r21
    3a70:	6f 93       	push	r22
    3a72:	7f 93       	push	r23
    3a74:	8f 93       	push	r24
    3a76:	9f 93       	push	r25
    3a78:	af 93       	push	r26
    3a7a:	bf 93       	push	r27
    3a7c:	ef 93       	push	r30
    3a7e:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    3a80:	e0 91 72 21 	lds	r30, 0x2172	; 0x802172 <tc_tce0_cca_callback>
    3a84:	f0 91 73 21 	lds	r31, 0x2173	; 0x802173 <tc_tce0_cca_callback+0x1>
    3a88:	30 97       	sbiw	r30, 0x00	; 0
    3a8a:	09 f0       	breq	.+2      	; 0x3a8e <__vector_49+0x34>
		tc_tce0_cca_callback();
    3a8c:	19 95       	eicall
	}
}
    3a8e:	ff 91       	pop	r31
    3a90:	ef 91       	pop	r30
    3a92:	bf 91       	pop	r27
    3a94:	af 91       	pop	r26
    3a96:	9f 91       	pop	r25
    3a98:	8f 91       	pop	r24
    3a9a:	7f 91       	pop	r23
    3a9c:	6f 91       	pop	r22
    3a9e:	5f 91       	pop	r21
    3aa0:	4f 91       	pop	r20
    3aa2:	3f 91       	pop	r19
    3aa4:	2f 91       	pop	r18
    3aa6:	0f 90       	pop	r0
    3aa8:	0b be       	out	0x3b, r0	; 59
    3aaa:	0f 90       	pop	r0
    3aac:	0f be       	out	0x3f, r0	; 63
    3aae:	0f 90       	pop	r0
    3ab0:	1f 90       	pop	r1
    3ab2:	18 95       	reti

00003ab4 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    3ab4:	1f 92       	push	r1
    3ab6:	0f 92       	push	r0
    3ab8:	0f b6       	in	r0, 0x3f	; 63
    3aba:	0f 92       	push	r0
    3abc:	11 24       	eor	r1, r1
    3abe:	0b b6       	in	r0, 0x3b	; 59
    3ac0:	0f 92       	push	r0
    3ac2:	2f 93       	push	r18
    3ac4:	3f 93       	push	r19
    3ac6:	4f 93       	push	r20
    3ac8:	5f 93       	push	r21
    3aca:	6f 93       	push	r22
    3acc:	7f 93       	push	r23
    3ace:	8f 93       	push	r24
    3ad0:	9f 93       	push	r25
    3ad2:	af 93       	push	r26
    3ad4:	bf 93       	push	r27
    3ad6:	ef 93       	push	r30
    3ad8:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    3ada:	e0 91 70 21 	lds	r30, 0x2170	; 0x802170 <tc_tce0_ccb_callback>
    3ade:	f0 91 71 21 	lds	r31, 0x2171	; 0x802171 <tc_tce0_ccb_callback+0x1>
    3ae2:	30 97       	sbiw	r30, 0x00	; 0
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    3ae6:	19 95       	eicall
	}
}
    3ae8:	ff 91       	pop	r31
    3aea:	ef 91       	pop	r30
    3aec:	bf 91       	pop	r27
    3aee:	af 91       	pop	r26
    3af0:	9f 91       	pop	r25
    3af2:	8f 91       	pop	r24
    3af4:	7f 91       	pop	r23
    3af6:	6f 91       	pop	r22
    3af8:	5f 91       	pop	r21
    3afa:	4f 91       	pop	r20
    3afc:	3f 91       	pop	r19
    3afe:	2f 91       	pop	r18
    3b00:	0f 90       	pop	r0
    3b02:	0b be       	out	0x3b, r0	; 59
    3b04:	0f 90       	pop	r0
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	0f 90       	pop	r0
    3b0a:	1f 90       	pop	r1
    3b0c:	18 95       	reti

00003b0e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    3b0e:	1f 92       	push	r1
    3b10:	0f 92       	push	r0
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	0f 92       	push	r0
    3b16:	11 24       	eor	r1, r1
    3b18:	0b b6       	in	r0, 0x3b	; 59
    3b1a:	0f 92       	push	r0
    3b1c:	2f 93       	push	r18
    3b1e:	3f 93       	push	r19
    3b20:	4f 93       	push	r20
    3b22:	5f 93       	push	r21
    3b24:	6f 93       	push	r22
    3b26:	7f 93       	push	r23
    3b28:	8f 93       	push	r24
    3b2a:	9f 93       	push	r25
    3b2c:	af 93       	push	r26
    3b2e:	bf 93       	push	r27
    3b30:	ef 93       	push	r30
    3b32:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    3b34:	e0 91 6e 21 	lds	r30, 0x216E	; 0x80216e <tc_tce0_ccc_callback>
    3b38:	f0 91 6f 21 	lds	r31, 0x216F	; 0x80216f <tc_tce0_ccc_callback+0x1>
    3b3c:	30 97       	sbiw	r30, 0x00	; 0
    3b3e:	09 f0       	breq	.+2      	; 0x3b42 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    3b40:	19 95       	eicall
	}
}
    3b42:	ff 91       	pop	r31
    3b44:	ef 91       	pop	r30
    3b46:	bf 91       	pop	r27
    3b48:	af 91       	pop	r26
    3b4a:	9f 91       	pop	r25
    3b4c:	8f 91       	pop	r24
    3b4e:	7f 91       	pop	r23
    3b50:	6f 91       	pop	r22
    3b52:	5f 91       	pop	r21
    3b54:	4f 91       	pop	r20
    3b56:	3f 91       	pop	r19
    3b58:	2f 91       	pop	r18
    3b5a:	0f 90       	pop	r0
    3b5c:	0b be       	out	0x3b, r0	; 59
    3b5e:	0f 90       	pop	r0
    3b60:	0f be       	out	0x3f, r0	; 63
    3b62:	0f 90       	pop	r0
    3b64:	1f 90       	pop	r1
    3b66:	18 95       	reti

00003b68 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    3b68:	1f 92       	push	r1
    3b6a:	0f 92       	push	r0
    3b6c:	0f b6       	in	r0, 0x3f	; 63
    3b6e:	0f 92       	push	r0
    3b70:	11 24       	eor	r1, r1
    3b72:	0b b6       	in	r0, 0x3b	; 59
    3b74:	0f 92       	push	r0
    3b76:	2f 93       	push	r18
    3b78:	3f 93       	push	r19
    3b7a:	4f 93       	push	r20
    3b7c:	5f 93       	push	r21
    3b7e:	6f 93       	push	r22
    3b80:	7f 93       	push	r23
    3b82:	8f 93       	push	r24
    3b84:	9f 93       	push	r25
    3b86:	af 93       	push	r26
    3b88:	bf 93       	push	r27
    3b8a:	ef 93       	push	r30
    3b8c:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    3b8e:	e0 91 6c 21 	lds	r30, 0x216C	; 0x80216c <tc_tce0_ccd_callback>
    3b92:	f0 91 6d 21 	lds	r31, 0x216D	; 0x80216d <tc_tce0_ccd_callback+0x1>
    3b96:	30 97       	sbiw	r30, 0x00	; 0
    3b98:	09 f0       	breq	.+2      	; 0x3b9c <__vector_52+0x34>
		tc_tce0_ccd_callback();
    3b9a:	19 95       	eicall
	}
}
    3b9c:	ff 91       	pop	r31
    3b9e:	ef 91       	pop	r30
    3ba0:	bf 91       	pop	r27
    3ba2:	af 91       	pop	r26
    3ba4:	9f 91       	pop	r25
    3ba6:	8f 91       	pop	r24
    3ba8:	7f 91       	pop	r23
    3baa:	6f 91       	pop	r22
    3bac:	5f 91       	pop	r21
    3bae:	4f 91       	pop	r20
    3bb0:	3f 91       	pop	r19
    3bb2:	2f 91       	pop	r18
    3bb4:	0f 90       	pop	r0
    3bb6:	0b be       	out	0x3b, r0	; 59
    3bb8:	0f 90       	pop	r0
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	0f 90       	pop	r0
    3bbe:	1f 90       	pop	r1
    3bc0:	18 95       	reti

00003bc2 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    3bc2:	1f 92       	push	r1
    3bc4:	0f 92       	push	r0
    3bc6:	0f b6       	in	r0, 0x3f	; 63
    3bc8:	0f 92       	push	r0
    3bca:	11 24       	eor	r1, r1
    3bcc:	0b b6       	in	r0, 0x3b	; 59
    3bce:	0f 92       	push	r0
    3bd0:	2f 93       	push	r18
    3bd2:	3f 93       	push	r19
    3bd4:	4f 93       	push	r20
    3bd6:	5f 93       	push	r21
    3bd8:	6f 93       	push	r22
    3bda:	7f 93       	push	r23
    3bdc:	8f 93       	push	r24
    3bde:	9f 93       	push	r25
    3be0:	af 93       	push	r26
    3be2:	bf 93       	push	r27
    3be4:	ef 93       	push	r30
    3be6:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    3be8:	e0 91 6a 21 	lds	r30, 0x216A	; 0x80216a <tc_tce1_ovf_callback>
    3bec:	f0 91 6b 21 	lds	r31, 0x216B	; 0x80216b <tc_tce1_ovf_callback+0x1>
    3bf0:	30 97       	sbiw	r30, 0x00	; 0
    3bf2:	09 f0       	breq	.+2      	; 0x3bf6 <__vector_53+0x34>
		tc_tce1_ovf_callback();
    3bf4:	19 95       	eicall
	}
}
    3bf6:	ff 91       	pop	r31
    3bf8:	ef 91       	pop	r30
    3bfa:	bf 91       	pop	r27
    3bfc:	af 91       	pop	r26
    3bfe:	9f 91       	pop	r25
    3c00:	8f 91       	pop	r24
    3c02:	7f 91       	pop	r23
    3c04:	6f 91       	pop	r22
    3c06:	5f 91       	pop	r21
    3c08:	4f 91       	pop	r20
    3c0a:	3f 91       	pop	r19
    3c0c:	2f 91       	pop	r18
    3c0e:	0f 90       	pop	r0
    3c10:	0b be       	out	0x3b, r0	; 59
    3c12:	0f 90       	pop	r0
    3c14:	0f be       	out	0x3f, r0	; 63
    3c16:	0f 90       	pop	r0
    3c18:	1f 90       	pop	r1
    3c1a:	18 95       	reti

00003c1c <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    3c1c:	1f 92       	push	r1
    3c1e:	0f 92       	push	r0
    3c20:	0f b6       	in	r0, 0x3f	; 63
    3c22:	0f 92       	push	r0
    3c24:	11 24       	eor	r1, r1
    3c26:	0b b6       	in	r0, 0x3b	; 59
    3c28:	0f 92       	push	r0
    3c2a:	2f 93       	push	r18
    3c2c:	3f 93       	push	r19
    3c2e:	4f 93       	push	r20
    3c30:	5f 93       	push	r21
    3c32:	6f 93       	push	r22
    3c34:	7f 93       	push	r23
    3c36:	8f 93       	push	r24
    3c38:	9f 93       	push	r25
    3c3a:	af 93       	push	r26
    3c3c:	bf 93       	push	r27
    3c3e:	ef 93       	push	r30
    3c40:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    3c42:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <tc_tce1_err_callback>
    3c46:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <tc_tce1_err_callback+0x1>
    3c4a:	30 97       	sbiw	r30, 0x00	; 0
    3c4c:	09 f0       	breq	.+2      	; 0x3c50 <__vector_54+0x34>
		tc_tce1_err_callback();
    3c4e:	19 95       	eicall
	}
}
    3c50:	ff 91       	pop	r31
    3c52:	ef 91       	pop	r30
    3c54:	bf 91       	pop	r27
    3c56:	af 91       	pop	r26
    3c58:	9f 91       	pop	r25
    3c5a:	8f 91       	pop	r24
    3c5c:	7f 91       	pop	r23
    3c5e:	6f 91       	pop	r22
    3c60:	5f 91       	pop	r21
    3c62:	4f 91       	pop	r20
    3c64:	3f 91       	pop	r19
    3c66:	2f 91       	pop	r18
    3c68:	0f 90       	pop	r0
    3c6a:	0b be       	out	0x3b, r0	; 59
    3c6c:	0f 90       	pop	r0
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	0f 90       	pop	r0
    3c72:	1f 90       	pop	r1
    3c74:	18 95       	reti

00003c76 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    3c76:	1f 92       	push	r1
    3c78:	0f 92       	push	r0
    3c7a:	0f b6       	in	r0, 0x3f	; 63
    3c7c:	0f 92       	push	r0
    3c7e:	11 24       	eor	r1, r1
    3c80:	0b b6       	in	r0, 0x3b	; 59
    3c82:	0f 92       	push	r0
    3c84:	2f 93       	push	r18
    3c86:	3f 93       	push	r19
    3c88:	4f 93       	push	r20
    3c8a:	5f 93       	push	r21
    3c8c:	6f 93       	push	r22
    3c8e:	7f 93       	push	r23
    3c90:	8f 93       	push	r24
    3c92:	9f 93       	push	r25
    3c94:	af 93       	push	r26
    3c96:	bf 93       	push	r27
    3c98:	ef 93       	push	r30
    3c9a:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    3c9c:	e0 91 66 21 	lds	r30, 0x2166	; 0x802166 <tc_tce1_cca_callback>
    3ca0:	f0 91 67 21 	lds	r31, 0x2167	; 0x802167 <tc_tce1_cca_callback+0x1>
    3ca4:	30 97       	sbiw	r30, 0x00	; 0
    3ca6:	09 f0       	breq	.+2      	; 0x3caa <__vector_55+0x34>
		tc_tce1_cca_callback();
    3ca8:	19 95       	eicall
	}
}
    3caa:	ff 91       	pop	r31
    3cac:	ef 91       	pop	r30
    3cae:	bf 91       	pop	r27
    3cb0:	af 91       	pop	r26
    3cb2:	9f 91       	pop	r25
    3cb4:	8f 91       	pop	r24
    3cb6:	7f 91       	pop	r23
    3cb8:	6f 91       	pop	r22
    3cba:	5f 91       	pop	r21
    3cbc:	4f 91       	pop	r20
    3cbe:	3f 91       	pop	r19
    3cc0:	2f 91       	pop	r18
    3cc2:	0f 90       	pop	r0
    3cc4:	0b be       	out	0x3b, r0	; 59
    3cc6:	0f 90       	pop	r0
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	0f 90       	pop	r0
    3ccc:	1f 90       	pop	r1
    3cce:	18 95       	reti

00003cd0 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    3cd0:	1f 92       	push	r1
    3cd2:	0f 92       	push	r0
    3cd4:	0f b6       	in	r0, 0x3f	; 63
    3cd6:	0f 92       	push	r0
    3cd8:	11 24       	eor	r1, r1
    3cda:	0b b6       	in	r0, 0x3b	; 59
    3cdc:	0f 92       	push	r0
    3cde:	2f 93       	push	r18
    3ce0:	3f 93       	push	r19
    3ce2:	4f 93       	push	r20
    3ce4:	5f 93       	push	r21
    3ce6:	6f 93       	push	r22
    3ce8:	7f 93       	push	r23
    3cea:	8f 93       	push	r24
    3cec:	9f 93       	push	r25
    3cee:	af 93       	push	r26
    3cf0:	bf 93       	push	r27
    3cf2:	ef 93       	push	r30
    3cf4:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    3cf6:	e0 91 64 21 	lds	r30, 0x2164	; 0x802164 <tc_tce1_ccb_callback>
    3cfa:	f0 91 65 21 	lds	r31, 0x2165	; 0x802165 <tc_tce1_ccb_callback+0x1>
    3cfe:	30 97       	sbiw	r30, 0x00	; 0
    3d00:	09 f0       	breq	.+2      	; 0x3d04 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    3d02:	19 95       	eicall
	}
}
    3d04:	ff 91       	pop	r31
    3d06:	ef 91       	pop	r30
    3d08:	bf 91       	pop	r27
    3d0a:	af 91       	pop	r26
    3d0c:	9f 91       	pop	r25
    3d0e:	8f 91       	pop	r24
    3d10:	7f 91       	pop	r23
    3d12:	6f 91       	pop	r22
    3d14:	5f 91       	pop	r21
    3d16:	4f 91       	pop	r20
    3d18:	3f 91       	pop	r19
    3d1a:	2f 91       	pop	r18
    3d1c:	0f 90       	pop	r0
    3d1e:	0b be       	out	0x3b, r0	; 59
    3d20:	0f 90       	pop	r0
    3d22:	0f be       	out	0x3f, r0	; 63
    3d24:	0f 90       	pop	r0
    3d26:	1f 90       	pop	r1
    3d28:	18 95       	reti

00003d2a <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    3d2a:	1f 92       	push	r1
    3d2c:	0f 92       	push	r0
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	0f 92       	push	r0
    3d32:	11 24       	eor	r1, r1
    3d34:	0b b6       	in	r0, 0x3b	; 59
    3d36:	0f 92       	push	r0
    3d38:	2f 93       	push	r18
    3d3a:	3f 93       	push	r19
    3d3c:	4f 93       	push	r20
    3d3e:	5f 93       	push	r21
    3d40:	6f 93       	push	r22
    3d42:	7f 93       	push	r23
    3d44:	8f 93       	push	r24
    3d46:	9f 93       	push	r25
    3d48:	af 93       	push	r26
    3d4a:	bf 93       	push	r27
    3d4c:	ef 93       	push	r30
    3d4e:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    3d50:	e0 91 62 21 	lds	r30, 0x2162	; 0x802162 <tc_tcf0_ovf_callback>
    3d54:	f0 91 63 21 	lds	r31, 0x2163	; 0x802163 <tc_tcf0_ovf_callback+0x1>
    3d58:	30 97       	sbiw	r30, 0x00	; 0
    3d5a:	09 f0       	breq	.+2      	; 0x3d5e <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    3d5c:	19 95       	eicall
	}
}
    3d5e:	ff 91       	pop	r31
    3d60:	ef 91       	pop	r30
    3d62:	bf 91       	pop	r27
    3d64:	af 91       	pop	r26
    3d66:	9f 91       	pop	r25
    3d68:	8f 91       	pop	r24
    3d6a:	7f 91       	pop	r23
    3d6c:	6f 91       	pop	r22
    3d6e:	5f 91       	pop	r21
    3d70:	4f 91       	pop	r20
    3d72:	3f 91       	pop	r19
    3d74:	2f 91       	pop	r18
    3d76:	0f 90       	pop	r0
    3d78:	0b be       	out	0x3b, r0	; 59
    3d7a:	0f 90       	pop	r0
    3d7c:	0f be       	out	0x3f, r0	; 63
    3d7e:	0f 90       	pop	r0
    3d80:	1f 90       	pop	r1
    3d82:	18 95       	reti

00003d84 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    3d84:	1f 92       	push	r1
    3d86:	0f 92       	push	r0
    3d88:	0f b6       	in	r0, 0x3f	; 63
    3d8a:	0f 92       	push	r0
    3d8c:	11 24       	eor	r1, r1
    3d8e:	0b b6       	in	r0, 0x3b	; 59
    3d90:	0f 92       	push	r0
    3d92:	2f 93       	push	r18
    3d94:	3f 93       	push	r19
    3d96:	4f 93       	push	r20
    3d98:	5f 93       	push	r21
    3d9a:	6f 93       	push	r22
    3d9c:	7f 93       	push	r23
    3d9e:	8f 93       	push	r24
    3da0:	9f 93       	push	r25
    3da2:	af 93       	push	r26
    3da4:	bf 93       	push	r27
    3da6:	ef 93       	push	r30
    3da8:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    3daa:	e0 91 60 21 	lds	r30, 0x2160	; 0x802160 <tc_tcf0_err_callback>
    3dae:	f0 91 61 21 	lds	r31, 0x2161	; 0x802161 <tc_tcf0_err_callback+0x1>
    3db2:	30 97       	sbiw	r30, 0x00	; 0
    3db4:	09 f0       	breq	.+2      	; 0x3db8 <__vector_109+0x34>
		tc_tcf0_err_callback();
    3db6:	19 95       	eicall
	}
}
    3db8:	ff 91       	pop	r31
    3dba:	ef 91       	pop	r30
    3dbc:	bf 91       	pop	r27
    3dbe:	af 91       	pop	r26
    3dc0:	9f 91       	pop	r25
    3dc2:	8f 91       	pop	r24
    3dc4:	7f 91       	pop	r23
    3dc6:	6f 91       	pop	r22
    3dc8:	5f 91       	pop	r21
    3dca:	4f 91       	pop	r20
    3dcc:	3f 91       	pop	r19
    3dce:	2f 91       	pop	r18
    3dd0:	0f 90       	pop	r0
    3dd2:	0b be       	out	0x3b, r0	; 59
    3dd4:	0f 90       	pop	r0
    3dd6:	0f be       	out	0x3f, r0	; 63
    3dd8:	0f 90       	pop	r0
    3dda:	1f 90       	pop	r1
    3ddc:	18 95       	reti

00003dde <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    3dde:	1f 92       	push	r1
    3de0:	0f 92       	push	r0
    3de2:	0f b6       	in	r0, 0x3f	; 63
    3de4:	0f 92       	push	r0
    3de6:	11 24       	eor	r1, r1
    3de8:	0b b6       	in	r0, 0x3b	; 59
    3dea:	0f 92       	push	r0
    3dec:	2f 93       	push	r18
    3dee:	3f 93       	push	r19
    3df0:	4f 93       	push	r20
    3df2:	5f 93       	push	r21
    3df4:	6f 93       	push	r22
    3df6:	7f 93       	push	r23
    3df8:	8f 93       	push	r24
    3dfa:	9f 93       	push	r25
    3dfc:	af 93       	push	r26
    3dfe:	bf 93       	push	r27
    3e00:	ef 93       	push	r30
    3e02:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    3e04:	e0 91 5e 21 	lds	r30, 0x215E	; 0x80215e <tc_tcf0_cca_callback>
    3e08:	f0 91 5f 21 	lds	r31, 0x215F	; 0x80215f <tc_tcf0_cca_callback+0x1>
    3e0c:	30 97       	sbiw	r30, 0x00	; 0
    3e0e:	09 f0       	breq	.+2      	; 0x3e12 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    3e10:	19 95       	eicall
	}
}
    3e12:	ff 91       	pop	r31
    3e14:	ef 91       	pop	r30
    3e16:	bf 91       	pop	r27
    3e18:	af 91       	pop	r26
    3e1a:	9f 91       	pop	r25
    3e1c:	8f 91       	pop	r24
    3e1e:	7f 91       	pop	r23
    3e20:	6f 91       	pop	r22
    3e22:	5f 91       	pop	r21
    3e24:	4f 91       	pop	r20
    3e26:	3f 91       	pop	r19
    3e28:	2f 91       	pop	r18
    3e2a:	0f 90       	pop	r0
    3e2c:	0b be       	out	0x3b, r0	; 59
    3e2e:	0f 90       	pop	r0
    3e30:	0f be       	out	0x3f, r0	; 63
    3e32:	0f 90       	pop	r0
    3e34:	1f 90       	pop	r1
    3e36:	18 95       	reti

00003e38 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    3e38:	1f 92       	push	r1
    3e3a:	0f 92       	push	r0
    3e3c:	0f b6       	in	r0, 0x3f	; 63
    3e3e:	0f 92       	push	r0
    3e40:	11 24       	eor	r1, r1
    3e42:	0b b6       	in	r0, 0x3b	; 59
    3e44:	0f 92       	push	r0
    3e46:	2f 93       	push	r18
    3e48:	3f 93       	push	r19
    3e4a:	4f 93       	push	r20
    3e4c:	5f 93       	push	r21
    3e4e:	6f 93       	push	r22
    3e50:	7f 93       	push	r23
    3e52:	8f 93       	push	r24
    3e54:	9f 93       	push	r25
    3e56:	af 93       	push	r26
    3e58:	bf 93       	push	r27
    3e5a:	ef 93       	push	r30
    3e5c:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    3e5e:	e0 91 5c 21 	lds	r30, 0x215C	; 0x80215c <tc_tcf0_ccb_callback>
    3e62:	f0 91 5d 21 	lds	r31, 0x215D	; 0x80215d <tc_tcf0_ccb_callback+0x1>
    3e66:	30 97       	sbiw	r30, 0x00	; 0
    3e68:	09 f0       	breq	.+2      	; 0x3e6c <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    3e6a:	19 95       	eicall
	}
}
    3e6c:	ff 91       	pop	r31
    3e6e:	ef 91       	pop	r30
    3e70:	bf 91       	pop	r27
    3e72:	af 91       	pop	r26
    3e74:	9f 91       	pop	r25
    3e76:	8f 91       	pop	r24
    3e78:	7f 91       	pop	r23
    3e7a:	6f 91       	pop	r22
    3e7c:	5f 91       	pop	r21
    3e7e:	4f 91       	pop	r20
    3e80:	3f 91       	pop	r19
    3e82:	2f 91       	pop	r18
    3e84:	0f 90       	pop	r0
    3e86:	0b be       	out	0x3b, r0	; 59
    3e88:	0f 90       	pop	r0
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	0f 90       	pop	r0
    3e8e:	1f 90       	pop	r1
    3e90:	18 95       	reti

00003e92 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    3e92:	1f 92       	push	r1
    3e94:	0f 92       	push	r0
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	0f 92       	push	r0
    3e9a:	11 24       	eor	r1, r1
    3e9c:	0b b6       	in	r0, 0x3b	; 59
    3e9e:	0f 92       	push	r0
    3ea0:	2f 93       	push	r18
    3ea2:	3f 93       	push	r19
    3ea4:	4f 93       	push	r20
    3ea6:	5f 93       	push	r21
    3ea8:	6f 93       	push	r22
    3eaa:	7f 93       	push	r23
    3eac:	8f 93       	push	r24
    3eae:	9f 93       	push	r25
    3eb0:	af 93       	push	r26
    3eb2:	bf 93       	push	r27
    3eb4:	ef 93       	push	r30
    3eb6:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    3eb8:	e0 91 5a 21 	lds	r30, 0x215A	; 0x80215a <tc_tcf0_ccc_callback>
    3ebc:	f0 91 5b 21 	lds	r31, 0x215B	; 0x80215b <tc_tcf0_ccc_callback+0x1>
    3ec0:	30 97       	sbiw	r30, 0x00	; 0
    3ec2:	09 f0       	breq	.+2      	; 0x3ec6 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    3ec4:	19 95       	eicall
	}
}
    3ec6:	ff 91       	pop	r31
    3ec8:	ef 91       	pop	r30
    3eca:	bf 91       	pop	r27
    3ecc:	af 91       	pop	r26
    3ece:	9f 91       	pop	r25
    3ed0:	8f 91       	pop	r24
    3ed2:	7f 91       	pop	r23
    3ed4:	6f 91       	pop	r22
    3ed6:	5f 91       	pop	r21
    3ed8:	4f 91       	pop	r20
    3eda:	3f 91       	pop	r19
    3edc:	2f 91       	pop	r18
    3ede:	0f 90       	pop	r0
    3ee0:	0b be       	out	0x3b, r0	; 59
    3ee2:	0f 90       	pop	r0
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	0f 90       	pop	r0
    3ee8:	1f 90       	pop	r1
    3eea:	18 95       	reti

00003eec <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    3eec:	1f 92       	push	r1
    3eee:	0f 92       	push	r0
    3ef0:	0f b6       	in	r0, 0x3f	; 63
    3ef2:	0f 92       	push	r0
    3ef4:	11 24       	eor	r1, r1
    3ef6:	0b b6       	in	r0, 0x3b	; 59
    3ef8:	0f 92       	push	r0
    3efa:	2f 93       	push	r18
    3efc:	3f 93       	push	r19
    3efe:	4f 93       	push	r20
    3f00:	5f 93       	push	r21
    3f02:	6f 93       	push	r22
    3f04:	7f 93       	push	r23
    3f06:	8f 93       	push	r24
    3f08:	9f 93       	push	r25
    3f0a:	af 93       	push	r26
    3f0c:	bf 93       	push	r27
    3f0e:	ef 93       	push	r30
    3f10:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    3f12:	e0 91 58 21 	lds	r30, 0x2158	; 0x802158 <tc_tcf0_ccd_callback>
    3f16:	f0 91 59 21 	lds	r31, 0x2159	; 0x802159 <tc_tcf0_ccd_callback+0x1>
    3f1a:	30 97       	sbiw	r30, 0x00	; 0
    3f1c:	09 f0       	breq	.+2      	; 0x3f20 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    3f1e:	19 95       	eicall
	}
}
    3f20:	ff 91       	pop	r31
    3f22:	ef 91       	pop	r30
    3f24:	bf 91       	pop	r27
    3f26:	af 91       	pop	r26
    3f28:	9f 91       	pop	r25
    3f2a:	8f 91       	pop	r24
    3f2c:	7f 91       	pop	r23
    3f2e:	6f 91       	pop	r22
    3f30:	5f 91       	pop	r21
    3f32:	4f 91       	pop	r20
    3f34:	3f 91       	pop	r19
    3f36:	2f 91       	pop	r18
    3f38:	0f 90       	pop	r0
    3f3a:	0b be       	out	0x3b, r0	; 59
    3f3c:	0f 90       	pop	r0
    3f3e:	0f be       	out	0x3f, r0	; 63
    3f40:	0f 90       	pop	r0
    3f42:	1f 90       	pop	r1
    3f44:	18 95       	reti

00003f46 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    3f46:	1f 93       	push	r17
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	1f 92       	push	r1
    3f4e:	1f 92       	push	r1
    3f50:	cd b7       	in	r28, 0x3d	; 61
    3f52:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3f54:	2f b7       	in	r18, 0x3f	; 63
    3f56:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    3f58:	f8 94       	cli
	return flags;
    3f5a:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    3f5c:	28 2f       	mov	r18, r24
    3f5e:	39 2f       	mov	r19, r25
    3f60:	21 15       	cp	r18, r1
    3f62:	88 e0       	ldi	r24, 0x08	; 8
    3f64:	38 07       	cpc	r19, r24
    3f66:	49 f4       	brne	.+18     	; 0x3f7a <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    3f68:	61 e0       	ldi	r22, 0x01	; 1
    3f6a:	83 e0       	ldi	r24, 0x03	; 3
    3f6c:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3f70:	64 e0       	ldi	r22, 0x04	; 4
    3f72:	83 e0       	ldi	r24, 0x03	; 3
    3f74:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
    3f78:	4f c0       	rjmp	.+158    	; 0x4018 <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    3f7a:	20 34       	cpi	r18, 0x40	; 64
    3f7c:	88 e0       	ldi	r24, 0x08	; 8
    3f7e:	38 07       	cpc	r19, r24
    3f80:	49 f4       	brne	.+18     	; 0x3f94 <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    3f82:	62 e0       	ldi	r22, 0x02	; 2
    3f84:	83 e0       	ldi	r24, 0x03	; 3
    3f86:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3f8a:	64 e0       	ldi	r22, 0x04	; 4
    3f8c:	83 e0       	ldi	r24, 0x03	; 3
    3f8e:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
    3f92:	42 c0       	rjmp	.+132    	; 0x4018 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    3f94:	21 15       	cp	r18, r1
    3f96:	89 e0       	ldi	r24, 0x09	; 9
    3f98:	38 07       	cpc	r19, r24
    3f9a:	49 f4       	brne	.+18     	; 0x3fae <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    3f9c:	61 e0       	ldi	r22, 0x01	; 1
    3f9e:	84 e0       	ldi	r24, 0x04	; 4
    3fa0:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3fa4:	64 e0       	ldi	r22, 0x04	; 4
    3fa6:	84 e0       	ldi	r24, 0x04	; 4
    3fa8:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
    3fac:	35 c0       	rjmp	.+106    	; 0x4018 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    3fae:	20 34       	cpi	r18, 0x40	; 64
    3fb0:	89 e0       	ldi	r24, 0x09	; 9
    3fb2:	38 07       	cpc	r19, r24
    3fb4:	49 f4       	brne	.+18     	; 0x3fc8 <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    3fb6:	62 e0       	ldi	r22, 0x02	; 2
    3fb8:	84 e0       	ldi	r24, 0x04	; 4
    3fba:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3fbe:	64 e0       	ldi	r22, 0x04	; 4
    3fc0:	84 e0       	ldi	r24, 0x04	; 4
    3fc2:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
    3fc6:	28 c0       	rjmp	.+80     	; 0x4018 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    3fc8:	21 15       	cp	r18, r1
    3fca:	8a e0       	ldi	r24, 0x0A	; 10
    3fcc:	38 07       	cpc	r19, r24
    3fce:	49 f4       	brne	.+18     	; 0x3fe2 <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    3fd0:	61 e0       	ldi	r22, 0x01	; 1
    3fd2:	85 e0       	ldi	r24, 0x05	; 5
    3fd4:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    3fd8:	64 e0       	ldi	r22, 0x04	; 4
    3fda:	85 e0       	ldi	r24, 0x05	; 5
    3fdc:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
    3fe0:	1b c0       	rjmp	.+54     	; 0x4018 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    3fe2:	20 34       	cpi	r18, 0x40	; 64
    3fe4:	8a e0       	ldi	r24, 0x0A	; 10
    3fe6:	38 07       	cpc	r19, r24
    3fe8:	49 f4       	brne	.+18     	; 0x3ffc <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    3fea:	62 e0       	ldi	r22, 0x02	; 2
    3fec:	85 e0       	ldi	r24, 0x05	; 5
    3fee:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    3ff2:	64 e0       	ldi	r22, 0x04	; 4
    3ff4:	85 e0       	ldi	r24, 0x05	; 5
    3ff6:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
    3ffa:	0e c0       	rjmp	.+28     	; 0x4018 <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    3ffc:	21 15       	cp	r18, r1
    3ffe:	3b 40       	sbci	r19, 0x0B	; 11
    4000:	49 f4       	brne	.+18     	; 0x4014 <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    4002:	61 e0       	ldi	r22, 0x01	; 1
    4004:	86 e0       	ldi	r24, 0x06	; 6
    4006:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    400a:	64 e0       	ldi	r22, 0x04	; 4
    400c:	86 e0       	ldi	r24, 0x06	; 6
    400e:	0e 94 84 32 	call	0x6508	; 0x6508 <sysclk_enable_module>
    4012:	02 c0       	rjmp	.+4      	; 0x4018 <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4014:	1f bf       	out	0x3f, r17	; 63
    4016:	10 c0       	rjmp	.+32     	; 0x4038 <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4018:	80 91 d6 25 	lds	r24, 0x25D6	; 0x8025d6 <sleepmgr_locks+0x1>
    401c:	8f 3f       	cpi	r24, 0xFF	; 255
    401e:	09 f4       	brne	.+2      	; 0x4022 <tc_enable+0xdc>
    4020:	ff cf       	rjmp	.-2      	; 0x4020 <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4022:	8f b7       	in	r24, 0x3f	; 63
    4024:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4026:	f8 94       	cli
	return flags;
    4028:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    402a:	e5 ed       	ldi	r30, 0xD5	; 213
    402c:	f5 e2       	ldi	r31, 0x25	; 37
    402e:	81 81       	ldd	r24, Z+1	; 0x01
    4030:	8f 5f       	subi	r24, 0xFF	; 255
    4032:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4034:	9f bf       	out	0x3f, r25	; 63
    4036:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    4038:	0f 90       	pop	r0
    403a:	0f 90       	pop	r0
    403c:	df 91       	pop	r29
    403e:	cf 91       	pop	r28
    4040:	1f 91       	pop	r17
    4042:	08 95       	ret

00004044 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    4044:	cf 93       	push	r28
    4046:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    4048:	e0 91 a0 21 	lds	r30, 0x21A0	; 0x8021a0 <transfer>
    404c:	f0 91 a1 21 	lds	r31, 0x21A1	; 0x8021a1 <transfer+0x1>
    4050:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    4052:	83 ff       	sbrs	r24, 3
    4054:	08 c0       	rjmp	.+16     	; 0x4066 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    4056:	88 60       	ori	r24, 0x08	; 8
    4058:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    405a:	83 e0       	ldi	r24, 0x03	; 3
    405c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    405e:	86 ef       	ldi	r24, 0xF6	; 246
    4060:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <transfer+0xa>
    4064:	83 c0       	rjmp	.+262    	; 0x416c <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    4066:	98 2f       	mov	r25, r24
    4068:	94 71       	andi	r25, 0x14	; 20
    406a:	31 f0       	breq	.+12     	; 0x4078 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    406c:	83 e0       	ldi	r24, 0x03	; 3
    406e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    4070:	8f ef       	ldi	r24, 0xFF	; 255
    4072:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <transfer+0xa>
    4076:	7a c0       	rjmp	.+244    	; 0x416c <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    4078:	86 ff       	sbrs	r24, 6
    407a:	43 c0       	rjmp	.+134    	; 0x4102 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    407c:	c0 ea       	ldi	r28, 0xA0	; 160
    407e:	d1 e2       	ldi	r29, 0x21	; 33
    4080:	aa 81       	ldd	r26, Y+2	; 0x02
    4082:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    4084:	8c 81       	ldd	r24, Y+4	; 0x04
    4086:	9d 81       	ldd	r25, Y+5	; 0x05
    4088:	14 96       	adiw	r26, 0x04	; 4
    408a:	2d 91       	ld	r18, X+
    408c:	3c 91       	ld	r19, X
    408e:	15 97       	sbiw	r26, 0x05	; 5
    4090:	82 17       	cp	r24, r18
    4092:	93 07       	cpc	r25, r19
    4094:	6c f4       	brge	.+26     	; 0x40b0 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    4096:	9c 01       	movw	r18, r24
    4098:	2f 5f       	subi	r18, 0xFF	; 255
    409a:	3f 4f       	sbci	r19, 0xFF	; 255
    409c:	20 93 a4 21 	sts	0x21A4, r18	; 0x8021a4 <transfer+0x4>
    40a0:	30 93 a5 21 	sts	0x21A5, r19	; 0x8021a5 <transfer+0x5>
    40a4:	a8 0f       	add	r26, r24
    40a6:	b9 1f       	adc	r27, r25
    40a8:	11 96       	adiw	r26, 0x01	; 1
    40aa:	8c 91       	ld	r24, X
    40ac:	87 83       	std	Z+7, r24	; 0x07
    40ae:	5e c0       	rjmp	.+188    	; 0x416c <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    40b0:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <transfer+0x6>
    40b4:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <transfer+0x7>
    40b8:	18 96       	adiw	r26, 0x08	; 8
    40ba:	2d 91       	ld	r18, X+
    40bc:	3c 91       	ld	r19, X
    40be:	19 97       	sbiw	r26, 0x09	; 9
    40c0:	82 17       	cp	r24, r18
    40c2:	93 07       	cpc	r25, r19
    40c4:	c8 f4       	brcc	.+50     	; 0x40f8 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    40c6:	20 91 a8 21 	lds	r18, 0x21A8	; 0x8021a8 <transfer+0x8>
    40ca:	22 23       	and	r18, r18
    40cc:	21 f0       	breq	.+8      	; 0x40d6 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    40ce:	86 81       	ldd	r24, Z+6	; 0x06
    40d0:	81 60       	ori	r24, 0x01	; 1
    40d2:	86 83       	std	Z+6, r24	; 0x06
    40d4:	4b c0       	rjmp	.+150    	; 0x416c <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    40d6:	16 96       	adiw	r26, 0x06	; 6
    40d8:	2d 91       	ld	r18, X+
    40da:	3c 91       	ld	r19, X
    40dc:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    40de:	ac 01       	movw	r20, r24
    40e0:	4f 5f       	subi	r20, 0xFF	; 255
    40e2:	5f 4f       	sbci	r21, 0xFF	; 255
    40e4:	40 93 a6 21 	sts	0x21A6, r20	; 0x8021a6 <transfer+0x6>
    40e8:	50 93 a7 21 	sts	0x21A7, r21	; 0x8021a7 <transfer+0x7>
    40ec:	d9 01       	movw	r26, r18
    40ee:	a8 0f       	add	r26, r24
    40f0:	b9 1f       	adc	r27, r25
    40f2:	8c 91       	ld	r24, X
    40f4:	87 83       	std	Z+7, r24	; 0x07
    40f6:	3a c0       	rjmp	.+116    	; 0x416c <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    40f8:	83 e0       	ldi	r24, 0x03	; 3
    40fa:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    40fc:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <transfer+0xa>
    4100:	35 c0       	rjmp	.+106    	; 0x416c <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    4102:	88 23       	and	r24, r24
    4104:	84 f5       	brge	.+96     	; 0x4166 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    4106:	a0 ea       	ldi	r26, 0xA0	; 160
    4108:	b1 e2       	ldi	r27, 0x21	; 33
    410a:	12 96       	adiw	r26, 0x02	; 2
    410c:	cd 91       	ld	r28, X+
    410e:	dc 91       	ld	r29, X
    4110:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    4112:	16 96       	adiw	r26, 0x06	; 6
    4114:	8d 91       	ld	r24, X+
    4116:	9c 91       	ld	r25, X
    4118:	17 97       	sbiw	r26, 0x07	; 7
    411a:	28 85       	ldd	r18, Y+8	; 0x08
    411c:	39 85       	ldd	r19, Y+9	; 0x09
    411e:	82 17       	cp	r24, r18
    4120:	93 07       	cpc	r25, r19
    4122:	d8 f4       	brcc	.+54     	; 0x415a <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    4124:	6e 81       	ldd	r22, Y+6	; 0x06
    4126:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    4128:	9c 01       	movw	r18, r24
    412a:	2f 5f       	subi	r18, 0xFF	; 255
    412c:	3f 4f       	sbci	r19, 0xFF	; 255
    412e:	20 93 a6 21 	sts	0x21A6, r18	; 0x8021a6 <transfer+0x6>
    4132:	30 93 a7 21 	sts	0x21A7, r19	; 0x8021a7 <transfer+0x7>
    4136:	47 81       	ldd	r20, Z+7	; 0x07
    4138:	db 01       	movw	r26, r22
    413a:	a8 0f       	add	r26, r24
    413c:	b9 1f       	adc	r27, r25
    413e:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    4140:	88 85       	ldd	r24, Y+8	; 0x08
    4142:	99 85       	ldd	r25, Y+9	; 0x09
    4144:	28 17       	cp	r18, r24
    4146:	39 07       	cpc	r19, r25
    4148:	18 f4       	brcc	.+6      	; 0x4150 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    414a:	82 e0       	ldi	r24, 0x02	; 2
    414c:	83 83       	std	Z+3, r24	; 0x03
    414e:	0e c0       	rjmp	.+28     	; 0x416c <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    4150:	87 e0       	ldi	r24, 0x07	; 7
    4152:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    4154:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <transfer+0xa>
    4158:	09 c0       	rjmp	.+18     	; 0x416c <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    415a:	83 e0       	ldi	r24, 0x03	; 3
    415c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    415e:	89 ef       	ldi	r24, 0xF9	; 249
    4160:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <transfer+0xa>
    4164:	03 c0       	rjmp	.+6      	; 0x416c <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    4166:	8b ef       	ldi	r24, 0xFB	; 251
    4168:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <transfer+0xa>
	}
}
    416c:	df 91       	pop	r29
    416e:	cf 91       	pop	r28
    4170:	08 95       	ret

00004172 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    4172:	1f 92       	push	r1
    4174:	0f 92       	push	r0
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	0f 92       	push	r0
    417a:	11 24       	eor	r1, r1
    417c:	0b b6       	in	r0, 0x3b	; 59
    417e:	0f 92       	push	r0
    4180:	2f 93       	push	r18
    4182:	3f 93       	push	r19
    4184:	4f 93       	push	r20
    4186:	5f 93       	push	r21
    4188:	6f 93       	push	r22
    418a:	7f 93       	push	r23
    418c:	8f 93       	push	r24
    418e:	9f 93       	push	r25
    4190:	af 93       	push	r26
    4192:	bf 93       	push	r27
    4194:	ef 93       	push	r30
    4196:	ff 93       	push	r31
    4198:	55 df       	rcall	.-342    	; 0x4044 <twim_interrupt_handler>
    419a:	ff 91       	pop	r31
    419c:	ef 91       	pop	r30
    419e:	bf 91       	pop	r27
    41a0:	af 91       	pop	r26
    41a2:	9f 91       	pop	r25
    41a4:	8f 91       	pop	r24
    41a6:	7f 91       	pop	r23
    41a8:	6f 91       	pop	r22
    41aa:	5f 91       	pop	r21
    41ac:	4f 91       	pop	r20
    41ae:	3f 91       	pop	r19
    41b0:	2f 91       	pop	r18
    41b2:	0f 90       	pop	r0
    41b4:	0b be       	out	0x3b, r0	; 59
    41b6:	0f 90       	pop	r0
    41b8:	0f be       	out	0x3f, r0	; 63
    41ba:	0f 90       	pop	r0
    41bc:	1f 90       	pop	r1
    41be:	18 95       	reti

000041c0 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    41c0:	1f 92       	push	r1
    41c2:	0f 92       	push	r0
    41c4:	0f b6       	in	r0, 0x3f	; 63
    41c6:	0f 92       	push	r0
    41c8:	11 24       	eor	r1, r1
    41ca:	0b b6       	in	r0, 0x3b	; 59
    41cc:	0f 92       	push	r0
    41ce:	2f 93       	push	r18
    41d0:	3f 93       	push	r19
    41d2:	4f 93       	push	r20
    41d4:	5f 93       	push	r21
    41d6:	6f 93       	push	r22
    41d8:	7f 93       	push	r23
    41da:	8f 93       	push	r24
    41dc:	9f 93       	push	r25
    41de:	af 93       	push	r26
    41e0:	bf 93       	push	r27
    41e2:	ef 93       	push	r30
    41e4:	ff 93       	push	r31
    41e6:	2e df       	rcall	.-420    	; 0x4044 <twim_interrupt_handler>
    41e8:	ff 91       	pop	r31
    41ea:	ef 91       	pop	r30
    41ec:	bf 91       	pop	r27
    41ee:	af 91       	pop	r26
    41f0:	9f 91       	pop	r25
    41f2:	8f 91       	pop	r24
    41f4:	7f 91       	pop	r23
    41f6:	6f 91       	pop	r22
    41f8:	5f 91       	pop	r21
    41fa:	4f 91       	pop	r20
    41fc:	3f 91       	pop	r19
    41fe:	2f 91       	pop	r18
    4200:	0f 90       	pop	r0
    4202:	0b be       	out	0x3b, r0	; 59
    4204:	0f 90       	pop	r0
    4206:	0f be       	out	0x3f, r0	; 63
    4208:	0f 90       	pop	r0
    420a:	1f 90       	pop	r1
    420c:	18 95       	reti

0000420e <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    420e:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    4210:	db 01       	movw	r26, r22
    4212:	14 96       	adiw	r26, 0x04	; 4
    4214:	8c 91       	ld	r24, X
    4216:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    4218:	88 eb       	ldi	r24, 0xB8	; 184
    421a:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    4220:	e0 ea       	ldi	r30, 0xA0	; 160
    4222:	f1 e2       	ldi	r31, 0x21	; 33
    4224:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    4226:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    4228:	e0 ea       	ldi	r30, 0xA0	; 160
    422a:	f0 e0       	ldi	r31, 0x00	; 0
    422c:	82 81       	ldd	r24, Z+2	; 0x02
    422e:	82 60       	ori	r24, 0x02	; 2
    4230:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    4232:	78 94       	sei

	return STATUS_OK;
}
    4234:	80 e0       	ldi	r24, 0x00	; 0
    4236:	08 95       	ret

00004238 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    4238:	cf 93       	push	r28
    423a:	df 93       	push	r29
    423c:	1f 92       	push	r1
    423e:	cd b7       	in	r28, 0x3d	; 61
    4240:	de b7       	in	r29, 0x3e	; 62
    4242:	9c 01       	movw	r18, r24
    4244:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    4246:	89 2b       	or	r24, r25
    4248:	09 f4       	brne	.+2      	; 0x424c <twi_master_transfer+0x14>
    424a:	51 c0       	rjmp	.+162    	; 0x42ee <twi_master_transfer+0xb6>
    424c:	30 97       	sbiw	r30, 0x00	; 0
    424e:	09 f4       	brne	.+2      	; 0x4252 <twi_master_transfer+0x1a>
    4250:	50 c0       	rjmp	.+160    	; 0x42f2 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    4252:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    4254:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <transfer+0x9>
    4258:	88 23       	and	r24, r24
    425a:	19 f0       	breq	.+6      	; 0x4262 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    425c:	99 23       	and	r25, r25
    425e:	f1 f3       	breq	.-4      	; 0x425c <twi_master_transfer+0x24>
    4260:	4a c0       	rjmp	.+148    	; 0x42f6 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4262:	8f b7       	in	r24, 0x3f	; 63
    4264:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4266:	f8 94       	cli
	return flags;
    4268:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    426a:	a0 ea       	ldi	r26, 0xA0	; 160
    426c:	b1 e2       	ldi	r27, 0x21	; 33
    426e:	91 e0       	ldi	r25, 0x01	; 1
    4270:	19 96       	adiw	r26, 0x09	; 9
    4272:	9c 93       	st	X, r25
    4274:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    4276:	90 e8       	ldi	r25, 0x80	; 128
    4278:	1a 96       	adiw	r26, 0x0a	; 10
    427a:	9c 93       	st	X, r25
    427c:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    427e:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    4280:	2d 93       	st	X+, r18
    4282:	3c 93       	st	X, r19
    4284:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    4286:	12 96       	adiw	r26, 0x02	; 2
    4288:	6d 93       	st	X+, r22
    428a:	7c 93       	st	X, r23
    428c:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    428e:	14 96       	adiw	r26, 0x04	; 4
    4290:	1d 92       	st	X+, r1
    4292:	1c 92       	st	X, r1
    4294:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    4296:	16 96       	adiw	r26, 0x06	; 6
    4298:	1d 92       	st	X+, r1
    429a:	1c 92       	st	X, r1
    429c:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    429e:	18 96       	adiw	r26, 0x08	; 8
    42a0:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    42a2:	80 81       	ld	r24, Z
    42a4:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    42a6:	64 81       	ldd	r22, Z+4	; 0x04
    42a8:	75 81       	ldd	r23, Z+5	; 0x05
    42aa:	67 2b       	or	r22, r23
    42ac:	11 f4       	brne	.+4      	; 0x42b2 <twi_master_transfer+0x7a>
    42ae:	41 11       	cpse	r20, r1
    42b0:	03 c0       	rjmp	.+6      	; 0x42b8 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    42b2:	f9 01       	movw	r30, r18
    42b4:	86 83       	std	Z+6, r24	; 0x06
    42b6:	03 c0       	rjmp	.+6      	; 0x42be <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    42b8:	81 60       	ori	r24, 0x01	; 1
    42ba:	f9 01       	movw	r30, r18
    42bc:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    42be:	e0 ea       	ldi	r30, 0xA0	; 160
    42c0:	f1 e2       	ldi	r31, 0x21	; 33
    42c2:	92 85       	ldd	r25, Z+10	; 0x0a
    42c4:	90 38       	cpi	r25, 0x80	; 128
    42c6:	e9 f3       	breq	.-6      	; 0x42c2 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    42c8:	f9 01       	movw	r30, r18
    42ca:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    42cc:	83 70       	andi	r24, 0x03	; 3
    42ce:	81 30       	cpi	r24, 0x01	; 1
    42d0:	49 f0       	breq	.+18     	; 0x42e4 <twi_master_transfer+0xac>
    42d2:	a0 ea       	ldi	r26, 0xA0	; 160
    42d4:	b1 e2       	ldi	r27, 0x21	; 33
    42d6:	ed 91       	ld	r30, X+
    42d8:	fc 91       	ld	r31, X
    42da:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    42dc:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    42de:	83 70       	andi	r24, 0x03	; 3
    42e0:	81 30       	cpi	r24, 0x01	; 1
    42e2:	c9 f7       	brne	.-14     	; 0x42d6 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    42e4:	e0 ea       	ldi	r30, 0xA0	; 160
    42e6:	f1 e2       	ldi	r31, 0x21	; 33
    42e8:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    42ea:	11 86       	std	Z+9, r1	; 0x09
    42ec:	05 c0       	rjmp	.+10     	; 0x42f8 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    42ee:	88 ef       	ldi	r24, 0xF8	; 248
    42f0:	03 c0       	rjmp	.+6      	; 0x42f8 <twi_master_transfer+0xc0>
    42f2:	88 ef       	ldi	r24, 0xF8	; 248
    42f4:	01 c0       	rjmp	.+2      	; 0x42f8 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    42f6:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    42f8:	0f 90       	pop	r0
    42fa:	df 91       	pop	r29
    42fc:	cf 91       	pop	r28
    42fe:	08 95       	ret

00004300 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    4300:	cf 93       	push	r28
    4302:	df 93       	push	r29
    4304:	1f 92       	push	r1
    4306:	1f 92       	push	r1
    4308:	cd b7       	in	r28, 0x3d	; 61
    430a:	de b7       	in	r29, 0x3e	; 62
    430c:	81 11       	cpse	r24, r1
    430e:	26 c0       	rjmp	.+76     	; 0x435c <udd_sleep_mode+0x5c>
    4310:	90 91 d8 22 	lds	r25, 0x22D8	; 0x8022d8 <udd_b_idle>
    4314:	99 23       	and	r25, r25
    4316:	f9 f0       	breq	.+62     	; 0x4356 <udd_sleep_mode+0x56>
    4318:	90 91 d6 25 	lds	r25, 0x25D6	; 0x8025d6 <sleepmgr_locks+0x1>
    431c:	91 11       	cpse	r25, r1
    431e:	01 c0       	rjmp	.+2      	; 0x4322 <udd_sleep_mode+0x22>
    4320:	ff cf       	rjmp	.-2      	; 0x4320 <udd_sleep_mode+0x20>
    4322:	9f b7       	in	r25, 0x3f	; 63
    4324:	9a 83       	std	Y+2, r25	; 0x02
    4326:	f8 94       	cli
    4328:	2a 81       	ldd	r18, Y+2	; 0x02
    432a:	e5 ed       	ldi	r30, 0xD5	; 213
    432c:	f5 e2       	ldi	r31, 0x25	; 37
    432e:	91 81       	ldd	r25, Z+1	; 0x01
    4330:	91 50       	subi	r25, 0x01	; 1
    4332:	91 83       	std	Z+1, r25	; 0x01
    4334:	2f bf       	out	0x3f, r18	; 63
    4336:	0f c0       	rjmp	.+30     	; 0x4356 <udd_sleep_mode+0x56>
    4338:	90 91 d6 25 	lds	r25, 0x25D6	; 0x8025d6 <sleepmgr_locks+0x1>
    433c:	9f 3f       	cpi	r25, 0xFF	; 255
    433e:	09 f4       	brne	.+2      	; 0x4342 <udd_sleep_mode+0x42>
    4340:	ff cf       	rjmp	.-2      	; 0x4340 <udd_sleep_mode+0x40>
    4342:	9f b7       	in	r25, 0x3f	; 63
    4344:	99 83       	std	Y+1, r25	; 0x01
    4346:	f8 94       	cli
    4348:	29 81       	ldd	r18, Y+1	; 0x01
    434a:	e5 ed       	ldi	r30, 0xD5	; 213
    434c:	f5 e2       	ldi	r31, 0x25	; 37
    434e:	91 81       	ldd	r25, Z+1	; 0x01
    4350:	9f 5f       	subi	r25, 0xFF	; 255
    4352:	91 83       	std	Z+1, r25	; 0x01
    4354:	2f bf       	out	0x3f, r18	; 63
    4356:	80 93 d8 22 	sts	0x22D8, r24	; 0x8022d8 <udd_b_idle>
    435a:	05 c0       	rjmp	.+10     	; 0x4366 <udd_sleep_mode+0x66>
    435c:	90 91 d8 22 	lds	r25, 0x22D8	; 0x8022d8 <udd_b_idle>
    4360:	99 23       	and	r25, r25
    4362:	51 f3       	breq	.-44     	; 0x4338 <udd_sleep_mode+0x38>
    4364:	f8 cf       	rjmp	.-16     	; 0x4356 <udd_sleep_mode+0x56>
    4366:	0f 90       	pop	r0
    4368:	0f 90       	pop	r0
    436a:	df 91       	pop	r29
    436c:	cf 91       	pop	r28
    436e:	08 95       	ret

00004370 <udd_ctrl_init>:
    4370:	0f 93       	push	r16
    4372:	e8 ec       	ldi	r30, 0xC8	; 200
    4374:	f4 e0       	ldi	r31, 0x04	; 4
    4376:	80 81       	ld	r24, Z
    4378:	8f 7d       	andi	r24, 0xDF	; 223
    437a:	80 83       	st	Z, r24
    437c:	80 81       	ld	r24, Z
    437e:	8f 7d       	andi	r24, 0xDF	; 223
    4380:	80 83       	st	Z, r24
    4382:	ec ea       	ldi	r30, 0xAC	; 172
    4384:	f2 e2       	ldi	r31, 0x22	; 34
    4386:	02 e0       	ldi	r16, 0x02	; 2
    4388:	05 93       	las	Z, r16
    438a:	10 92 ae 22 	sts	0x22AE, r1	; 0x8022ae <udd_sram+0x16>
    438e:	10 92 af 22 	sts	0x22AF, r1	; 0x8022af <udd_sram+0x17>
    4392:	00 e2       	ldi	r16, 0x20	; 32
    4394:	06 93       	lac	Z, r16
    4396:	00 e4       	ldi	r16, 0x40	; 64
    4398:	06 93       	lac	Z, r16
    439a:	e4 ea       	ldi	r30, 0xA4	; 164
    439c:	f2 e2       	ldi	r31, 0x22	; 34
    439e:	00 e4       	ldi	r16, 0x40	; 64
    43a0:	06 93       	lac	Z, r16
    43a2:	e5 ec       	ldi	r30, 0xC5	; 197
    43a4:	f5 e2       	ldi	r31, 0x25	; 37
    43a6:	14 86       	std	Z+12, r1	; 0x0c
    43a8:	15 86       	std	Z+13, r1	; 0x0d
    43aa:	16 86       	std	Z+14, r1	; 0x0e
    43ac:	17 86       	std	Z+15, r1	; 0x0f
    43ae:	12 86       	std	Z+10, r1	; 0x0a
    43b0:	13 86       	std	Z+11, r1	; 0x0b
    43b2:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <udd_ep_control_state>
    43b6:	0f 91       	pop	r16
    43b8:	08 95       	ret

000043ba <udd_ctrl_stall_data>:
    43ba:	0f 93       	push	r16
    43bc:	85 e0       	ldi	r24, 0x05	; 5
    43be:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <udd_ep_control_state>
    43c2:	ed ea       	ldi	r30, 0xAD	; 173
    43c4:	f2 e2       	ldi	r31, 0x22	; 34
    43c6:	04 e0       	ldi	r16, 0x04	; 4
    43c8:	05 93       	las	Z, r16
    43ca:	e5 ea       	ldi	r30, 0xA5	; 165
    43cc:	f2 e2       	ldi	r31, 0x22	; 34
    43ce:	04 e0       	ldi	r16, 0x04	; 4
    43d0:	05 93       	las	Z, r16
    43d2:	0f 91       	pop	r16
    43d4:	08 95       	ret

000043d6 <udd_ctrl_send_zlp_in>:
    43d6:	0f 93       	push	r16
    43d8:	83 e0       	ldi	r24, 0x03	; 3
    43da:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <udd_ep_control_state>
    43de:	10 92 ae 22 	sts	0x22AE, r1	; 0x8022ae <udd_sram+0x16>
    43e2:	10 92 af 22 	sts	0x22AF, r1	; 0x8022af <udd_sram+0x17>
    43e6:	ec ea       	ldi	r30, 0xAC	; 172
    43e8:	f2 e2       	ldi	r31, 0x22	; 34
    43ea:	02 e0       	ldi	r16, 0x02	; 2
    43ec:	06 93       	lac	Z, r16
    43ee:	0f 91       	pop	r16
    43f0:	08 95       	ret

000043f2 <udd_ctrl_endofrequest>:
    43f2:	e0 91 d1 25 	lds	r30, 0x25D1	; 0x8025d1 <udd_g_ctrlreq+0xc>
    43f6:	f0 91 d2 25 	lds	r31, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0xd>
    43fa:	30 97       	sbiw	r30, 0x00	; 0
    43fc:	09 f0       	breq	.+2      	; 0x4400 <udd_ctrl_endofrequest+0xe>
    43fe:	19 95       	eicall
    4400:	08 95       	ret

00004402 <udd_ctrl_in_sent>:
    4402:	0f 93       	push	r16
    4404:	cf 93       	push	r28
    4406:	df 93       	push	r29
    4408:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <udd_ep_control_state>
    440c:	83 30       	cpi	r24, 0x03	; 3
    440e:	19 f4       	brne	.+6      	; 0x4416 <udd_ctrl_in_sent+0x14>
    4410:	f0 df       	rcall	.-32     	; 0x43f2 <udd_ctrl_endofrequest>
    4412:	ae df       	rcall	.-164    	; 0x4370 <udd_ctrl_init>
    4414:	5e c0       	rjmp	.+188    	; 0x44d2 <udd_ctrl_in_sent+0xd0>
    4416:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <udd_ctrl_payload_nb_trans>
    441a:	90 91 91 22 	lds	r25, 0x2291	; 0x802291 <udd_ctrl_payload_nb_trans+0x1>
    441e:	c0 91 cf 25 	lds	r28, 0x25CF	; 0x8025cf <udd_g_ctrlreq+0xa>
    4422:	d0 91 d0 25 	lds	r29, 0x25D0	; 0x8025d0 <udd_g_ctrlreq+0xb>
    4426:	c8 1b       	sub	r28, r24
    4428:	d9 0b       	sbc	r29, r25
    442a:	71 f5       	brne	.+92     	; 0x4488 <udd_ctrl_in_sent+0x86>
    442c:	20 91 92 22 	lds	r18, 0x2292	; 0x802292 <udd_ctrl_prev_payload_nb_trans>
    4430:	30 91 93 22 	lds	r19, 0x2293	; 0x802293 <udd_ctrl_prev_payload_nb_trans+0x1>
    4434:	82 0f       	add	r24, r18
    4436:	93 1f       	adc	r25, r19
    4438:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <udd_ctrl_prev_payload_nb_trans>
    443c:	90 93 93 22 	sts	0x2293, r25	; 0x802293 <udd_ctrl_prev_payload_nb_trans+0x1>
    4440:	20 91 cb 25 	lds	r18, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    4444:	30 91 cc 25 	lds	r19, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    4448:	82 17       	cp	r24, r18
    444a:	93 07       	cpc	r25, r19
    444c:	21 f0       	breq	.+8      	; 0x4456 <udd_ctrl_in_sent+0x54>
    444e:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <b_shortpacket.5472>
    4452:	88 23       	and	r24, r24
    4454:	41 f0       	breq	.+16     	; 0x4466 <udd_ctrl_in_sent+0x64>
    4456:	84 e0       	ldi	r24, 0x04	; 4
    4458:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <udd_ep_control_state>
    445c:	e4 ea       	ldi	r30, 0xA4	; 164
    445e:	f2 e2       	ldi	r31, 0x22	; 34
    4460:	02 e0       	ldi	r16, 0x02	; 2
    4462:	06 93       	lac	Z, r16
    4464:	36 c0       	rjmp	.+108    	; 0x44d2 <udd_ctrl_in_sent+0xd0>
    4466:	e0 91 d3 25 	lds	r30, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0xe>
    446a:	f0 91 d4 25 	lds	r31, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0xf>
    446e:	30 97       	sbiw	r30, 0x00	; 0
    4470:	99 f0       	breq	.+38     	; 0x4498 <udd_ctrl_in_sent+0x96>
    4472:	19 95       	eicall
    4474:	88 23       	and	r24, r24
    4476:	81 f0       	breq	.+32     	; 0x4498 <udd_ctrl_in_sent+0x96>
    4478:	10 92 90 22 	sts	0x2290, r1	; 0x802290 <udd_ctrl_payload_nb_trans>
    447c:	10 92 91 22 	sts	0x2291, r1	; 0x802291 <udd_ctrl_payload_nb_trans+0x1>
    4480:	c0 91 cf 25 	lds	r28, 0x25CF	; 0x8025cf <udd_g_ctrlreq+0xa>
    4484:	d0 91 d0 25 	lds	r29, 0x25D0	; 0x8025d0 <udd_g_ctrlreq+0xb>
    4488:	c0 34       	cpi	r28, 0x40	; 64
    448a:	d1 05       	cpc	r29, r1
    448c:	28 f0       	brcs	.+10     	; 0x4498 <udd_ctrl_in_sent+0x96>
    448e:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <b_shortpacket.5472>
    4492:	c0 e4       	ldi	r28, 0x40	; 64
    4494:	d0 e0       	ldi	r29, 0x00	; 0
    4496:	03 c0       	rjmp	.+6      	; 0x449e <udd_ctrl_in_sent+0x9c>
    4498:	81 e0       	ldi	r24, 0x01	; 1
    449a:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <b_shortpacket.5472>
    449e:	e8 e9       	ldi	r30, 0x98	; 152
    44a0:	f2 e2       	ldi	r31, 0x22	; 34
    44a2:	c6 8b       	std	Z+22, r28	; 0x16
    44a4:	d7 8b       	std	Z+23, r29	; 0x17
    44a6:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <udd_ctrl_payload_nb_trans>
    44aa:	90 91 91 22 	lds	r25, 0x2291	; 0x802291 <udd_ctrl_payload_nb_trans+0x1>
    44ae:	20 91 cd 25 	lds	r18, 0x25CD	; 0x8025cd <udd_g_ctrlreq+0x8>
    44b2:	30 91 ce 25 	lds	r19, 0x25CE	; 0x8025ce <udd_g_ctrlreq+0x9>
    44b6:	28 0f       	add	r18, r24
    44b8:	39 1f       	adc	r19, r25
    44ba:	20 8f       	std	Z+24, r18	; 0x18
    44bc:	31 8f       	std	Z+25, r19	; 0x19
    44be:	c8 0f       	add	r28, r24
    44c0:	d9 1f       	adc	r29, r25
    44c2:	c0 93 90 22 	sts	0x2290, r28	; 0x802290 <udd_ctrl_payload_nb_trans>
    44c6:	d0 93 91 22 	sts	0x2291, r29	; 0x802291 <udd_ctrl_payload_nb_trans+0x1>
    44ca:	ec ea       	ldi	r30, 0xAC	; 172
    44cc:	f2 e2       	ldi	r31, 0x22	; 34
    44ce:	02 e0       	ldi	r16, 0x02	; 2
    44d0:	06 93       	lac	Z, r16
    44d2:	df 91       	pop	r29
    44d4:	cf 91       	pop	r28
    44d6:	0f 91       	pop	r16
    44d8:	08 95       	ret

000044da <udd_ep_get_size>:
    44da:	fc 01       	movw	r30, r24
    44dc:	81 81       	ldd	r24, Z+1	; 0x01
    44de:	e8 2f       	mov	r30, r24
    44e0:	e7 70       	andi	r30, 0x07	; 7
    44e2:	8e 2f       	mov	r24, r30
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	fc 01       	movw	r30, r24
    44e8:	31 97       	sbiw	r30, 0x01	; 1
    44ea:	e7 30       	cpi	r30, 0x07	; 7
    44ec:	f1 05       	cpc	r31, r1
    44ee:	d8 f4       	brcc	.+54     	; 0x4526 <udd_ep_get_size+0x4c>
    44f0:	88 27       	eor	r24, r24
    44f2:	e2 50       	subi	r30, 0x02	; 2
    44f4:	ff 4f       	sbci	r31, 0xFF	; 255
    44f6:	8f 4f       	sbci	r24, 0xFF	; 255
    44f8:	0c 94 d2 3a 	jmp	0x75a4	; 0x75a4 <__tablejump2__>
    44fc:	80 e1       	ldi	r24, 0x10	; 16
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	08 95       	ret
    4502:	80 e2       	ldi	r24, 0x20	; 32
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	08 95       	ret
    4508:	80 e4       	ldi	r24, 0x40	; 64
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	08 95       	ret
    450e:	80 e8       	ldi	r24, 0x80	; 128
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	08 95       	ret
    4514:	80 e0       	ldi	r24, 0x00	; 0
    4516:	91 e0       	ldi	r25, 0x01	; 1
    4518:	08 95       	ret
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	92 e0       	ldi	r25, 0x02	; 2
    451e:	08 95       	ret
    4520:	8f ef       	ldi	r24, 0xFF	; 255
    4522:	93 e0       	ldi	r25, 0x03	; 3
    4524:	08 95       	ret
    4526:	88 e0       	ldi	r24, 0x08	; 8
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	08 95       	ret

0000452c <udd_ep_get_job>:
    452c:	28 2f       	mov	r18, r24
    452e:	2f 70       	andi	r18, 0x0F	; 15
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	22 0f       	add	r18, r18
    4534:	33 1f       	adc	r19, r19
    4536:	08 2e       	mov	r0, r24
    4538:	00 0c       	add	r0, r0
    453a:	99 0b       	sbc	r25, r25
    453c:	88 27       	eor	r24, r24
    453e:	99 0f       	add	r25, r25
    4540:	88 1f       	adc	r24, r24
    4542:	99 27       	eor	r25, r25
    4544:	82 0f       	add	r24, r18
    4546:	93 1f       	adc	r25, r19
    4548:	02 97       	sbiw	r24, 0x02	; 2
    454a:	9c 01       	movw	r18, r24
    454c:	22 0f       	add	r18, r18
    454e:	33 1f       	adc	r19, r19
    4550:	22 0f       	add	r18, r18
    4552:	33 1f       	adc	r19, r19
    4554:	22 0f       	add	r18, r18
    4556:	33 1f       	adc	r19, r19
    4558:	82 0f       	add	r24, r18
    455a:	93 1f       	adc	r25, r19
    455c:	84 5d       	subi	r24, 0xD4	; 212
    455e:	9d 4d       	sbci	r25, 0xDD	; 221
    4560:	08 95       	ret

00004562 <udd_ctrl_interrupt_tc_setup>:
    4562:	0f 93       	push	r16
    4564:	cf 93       	push	r28
    4566:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    456a:	80 ff       	sbrs	r24, 0
    456c:	65 c0       	rjmp	.+202    	; 0x4638 <udd_ctrl_interrupt_tc_setup+0xd6>
    456e:	81 e0       	ldi	r24, 0x01	; 1
    4570:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    4574:	e4 ea       	ldi	r30, 0xA4	; 164
    4576:	f2 e2       	ldi	r31, 0x22	; 34
    4578:	00 e8       	ldi	r16, 0x80	; 128
    457a:	06 93       	lac	Z, r16
    457c:	ec ea       	ldi	r30, 0xAC	; 172
    457e:	f2 e2       	ldi	r31, 0x22	; 34
    4580:	00 e8       	ldi	r16, 0x80	; 128
    4582:	06 93       	lac	Z, r16
    4584:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    4588:	e4 ea       	ldi	r30, 0xA4	; 164
    458a:	f2 e2       	ldi	r31, 0x22	; 34
    458c:	00 e1       	ldi	r16, 0x10	; 16
    458e:	06 93       	lac	Z, r16
    4590:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <udd_ep_control_state>
    4594:	88 23       	and	r24, r24
    4596:	29 f0       	breq	.+10     	; 0x45a2 <udd_ctrl_interrupt_tc_setup+0x40>
    4598:	83 50       	subi	r24, 0x03	; 3
    459a:	82 30       	cpi	r24, 0x02	; 2
    459c:	08 f4       	brcc	.+2      	; 0x45a0 <udd_ctrl_interrupt_tc_setup+0x3e>
    459e:	29 df       	rcall	.-430    	; 0x43f2 <udd_ctrl_endofrequest>
    45a0:	e7 de       	rcall	.-562    	; 0x4370 <udd_ctrl_init>
    45a2:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <udd_sram+0xe>
    45a6:	90 91 a7 22 	lds	r25, 0x22A7	; 0x8022a7 <udd_sram+0xf>
    45aa:	08 97       	sbiw	r24, 0x08	; 8
    45ac:	09 f0       	breq	.+2      	; 0x45b0 <udd_ctrl_interrupt_tc_setup+0x4e>
    45ae:	46 c0       	rjmp	.+140    	; 0x463c <udd_ctrl_interrupt_tc_setup+0xda>
    45b0:	88 e0       	ldi	r24, 0x08	; 8
    45b2:	e0 e5       	ldi	r30, 0x50	; 80
    45b4:	f2 e2       	ldi	r31, 0x22	; 34
    45b6:	a5 ec       	ldi	r26, 0xC5	; 197
    45b8:	b5 e2       	ldi	r27, 0x25	; 37
    45ba:	01 90       	ld	r0, Z+
    45bc:	0d 92       	st	X+, r0
    45be:	8a 95       	dec	r24
    45c0:	e1 f7       	brne	.-8      	; 0x45ba <udd_ctrl_interrupt_tc_setup+0x58>
    45c2:	e8 ec       	ldi	r30, 0xC8	; 200
    45c4:	f4 e0       	ldi	r31, 0x04	; 4
    45c6:	80 81       	ld	r24, Z
    45c8:	80 62       	ori	r24, 0x20	; 32
    45ca:	80 83       	st	Z, r24
    45cc:	80 81       	ld	r24, Z
    45ce:	80 62       	ori	r24, 0x20	; 32
    45d0:	80 83       	st	Z, r24
    45d2:	0e 94 6c 37 	call	0x6ed8	; 0x6ed8 <udc_process_setup>
    45d6:	c8 2f       	mov	r28, r24
    45d8:	81 11       	cpse	r24, r1
    45da:	03 c0       	rjmp	.+6      	; 0x45e2 <udd_ctrl_interrupt_tc_setup+0x80>
    45dc:	ee de       	rcall	.-548    	; 0x43ba <udd_ctrl_stall_data>
    45de:	c1 e0       	ldi	r28, 0x01	; 1
    45e0:	2e c0       	rjmp	.+92     	; 0x463e <udd_ctrl_interrupt_tc_setup+0xdc>
    45e2:	80 91 c5 25 	lds	r24, 0x25C5	; 0x8025c5 <udd_g_ctrlreq>
    45e6:	88 23       	and	r24, r24
    45e8:	6c f4       	brge	.+26     	; 0x4604 <udd_ctrl_interrupt_tc_setup+0xa2>
    45ea:	10 92 92 22 	sts	0x2292, r1	; 0x802292 <udd_ctrl_prev_payload_nb_trans>
    45ee:	10 92 93 22 	sts	0x2293, r1	; 0x802293 <udd_ctrl_prev_payload_nb_trans+0x1>
    45f2:	10 92 90 22 	sts	0x2290, r1	; 0x802290 <udd_ctrl_payload_nb_trans>
    45f6:	10 92 91 22 	sts	0x2291, r1	; 0x802291 <udd_ctrl_payload_nb_trans+0x1>
    45fa:	82 e0       	ldi	r24, 0x02	; 2
    45fc:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <udd_ep_control_state>
    4600:	00 df       	rcall	.-512    	; 0x4402 <udd_ctrl_in_sent>
    4602:	1d c0       	rjmp	.+58     	; 0x463e <udd_ctrl_interrupt_tc_setup+0xdc>
    4604:	80 91 cb 25 	lds	r24, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    4608:	90 91 cc 25 	lds	r25, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    460c:	89 2b       	or	r24, r25
    460e:	11 f4       	brne	.+4      	; 0x4614 <udd_ctrl_interrupt_tc_setup+0xb2>
    4610:	e2 de       	rcall	.-572    	; 0x43d6 <udd_ctrl_send_zlp_in>
    4612:	15 c0       	rjmp	.+42     	; 0x463e <udd_ctrl_interrupt_tc_setup+0xdc>
    4614:	10 92 92 22 	sts	0x2292, r1	; 0x802292 <udd_ctrl_prev_payload_nb_trans>
    4618:	10 92 93 22 	sts	0x2293, r1	; 0x802293 <udd_ctrl_prev_payload_nb_trans+0x1>
    461c:	10 92 90 22 	sts	0x2290, r1	; 0x802290 <udd_ctrl_payload_nb_trans>
    4620:	10 92 91 22 	sts	0x2291, r1	; 0x802291 <udd_ctrl_payload_nb_trans+0x1>
    4624:	81 e0       	ldi	r24, 0x01	; 1
    4626:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <udd_ep_control_state>
    462a:	e4 ea       	ldi	r30, 0xA4	; 164
    462c:	f2 e2       	ldi	r31, 0x22	; 34
    462e:	02 e0       	ldi	r16, 0x02	; 2
    4630:	06 93       	lac	Z, r16
    4632:	00 e2       	ldi	r16, 0x20	; 32
    4634:	06 93       	lac	Z, r16
    4636:	03 c0       	rjmp	.+6      	; 0x463e <udd_ctrl_interrupt_tc_setup+0xdc>
    4638:	c0 e0       	ldi	r28, 0x00	; 0
    463a:	01 c0       	rjmp	.+2      	; 0x463e <udd_ctrl_interrupt_tc_setup+0xdc>
    463c:	c1 e0       	ldi	r28, 0x01	; 1
    463e:	8c 2f       	mov	r24, r28
    4640:	cf 91       	pop	r28
    4642:	0f 91       	pop	r16
    4644:	08 95       	ret

00004646 <udd_ep_trans_complet>:
    4646:	8f 92       	push	r8
    4648:	9f 92       	push	r9
    464a:	af 92       	push	r10
    464c:	bf 92       	push	r11
    464e:	df 92       	push	r13
    4650:	ef 92       	push	r14
    4652:	ff 92       	push	r15
    4654:	0f 93       	push	r16
    4656:	1f 93       	push	r17
    4658:	cf 93       	push	r28
    465a:	df 93       	push	r29
    465c:	d8 2e       	mov	r13, r24
    465e:	66 df       	rcall	.-308    	; 0x452c <udd_ep_get_job>
    4660:	8c 01       	movw	r16, r24
    4662:	cd 2d       	mov	r28, r13
    4664:	cf 70       	andi	r28, 0x0F	; 15
    4666:	d0 e0       	ldi	r29, 0x00	; 0
    4668:	ce 01       	movw	r24, r28
    466a:	88 0f       	add	r24, r24
    466c:	99 1f       	adc	r25, r25
    466e:	cd 2d       	mov	r28, r13
    4670:	0d 2c       	mov	r0, r13
    4672:	00 0c       	add	r0, r0
    4674:	dd 0b       	sbc	r29, r29
    4676:	cc 27       	eor	r28, r28
    4678:	dd 0f       	add	r29, r29
    467a:	cc 1f       	adc	r28, r28
    467c:	dd 27       	eor	r29, r29
    467e:	c8 0f       	add	r28, r24
    4680:	d9 1f       	adc	r29, r25
    4682:	ce 01       	movw	r24, r28
    4684:	88 0f       	add	r24, r24
    4686:	99 1f       	adc	r25, r25
    4688:	88 0f       	add	r24, r24
    468a:	99 1f       	adc	r25, r25
    468c:	88 0f       	add	r24, r24
    468e:	99 1f       	adc	r25, r25
    4690:	9c 01       	movw	r18, r24
    4692:	2c 55       	subi	r18, 0x5C	; 92
    4694:	3d 4d       	sbci	r19, 0xDD	; 221
    4696:	79 01       	movw	r14, r18
    4698:	c9 01       	movw	r24, r18
    469a:	1f df       	rcall	.-450    	; 0x44da <udd_ep_get_size>
    469c:	4c 01       	movw	r8, r24
    469e:	dd 20       	and	r13, r13
    46a0:	0c f0       	brlt	.+2      	; 0x46a4 <udd_ep_trans_complet+0x5e>
    46a2:	7b c0       	rjmp	.+246    	; 0x479a <udd_ep_trans_complet+0x154>
    46a4:	fe 01       	movw	r30, r28
    46a6:	ee 0f       	add	r30, r30
    46a8:	ff 1f       	adc	r31, r31
    46aa:	ee 0f       	add	r30, r30
    46ac:	ff 1f       	adc	r31, r31
    46ae:	ee 0f       	add	r30, r30
    46b0:	ff 1f       	adc	r31, r31
    46b2:	e8 56       	subi	r30, 0x68	; 104
    46b4:	fd 4d       	sbci	r31, 0xDD	; 221
    46b6:	22 89       	ldd	r18, Z+18	; 0x12
    46b8:	33 89       	ldd	r19, Z+19	; 0x13
    46ba:	d8 01       	movw	r26, r16
    46bc:	15 96       	adiw	r26, 0x05	; 5
    46be:	8d 91       	ld	r24, X+
    46c0:	9c 91       	ld	r25, X
    46c2:	16 97       	sbiw	r26, 0x06	; 6
    46c4:	82 0f       	add	r24, r18
    46c6:	93 1f       	adc	r25, r19
    46c8:	15 96       	adiw	r26, 0x05	; 5
    46ca:	8d 93       	st	X+, r24
    46cc:	9c 93       	st	X, r25
    46ce:	16 97       	sbiw	r26, 0x06	; 6
    46d0:	13 96       	adiw	r26, 0x03	; 3
    46d2:	2d 91       	ld	r18, X+
    46d4:	3c 91       	ld	r19, X
    46d6:	14 97       	sbiw	r26, 0x04	; 4
    46d8:	82 17       	cp	r24, r18
    46da:	93 07       	cpc	r25, r19
    46dc:	09 f4       	brne	.+2      	; 0x46e0 <udd_ep_trans_complet+0x9a>
    46de:	47 c0       	rjmp	.+142    	; 0x476e <udd_ep_trans_complet+0x128>
    46e0:	28 1b       	sub	r18, r24
    46e2:	39 0b       	sbc	r19, r25
    46e4:	21 15       	cp	r18, r1
    46e6:	b4 e0       	ldi	r27, 0x04	; 4
    46e8:	3b 07       	cpc	r19, r27
    46ea:	40 f0       	brcs	.+16     	; 0x46fc <udd_ep_trans_complet+0xb6>
    46ec:	2f ef       	ldi	r18, 0xFF	; 255
    46ee:	33 e0       	ldi	r19, 0x03	; 3
    46f0:	c9 01       	movw	r24, r18
    46f2:	b4 01       	movw	r22, r8
    46f4:	0e 94 9c 3a 	call	0x7538	; 0x7538 <__udivmodhi4>
    46f8:	28 1b       	sub	r18, r24
    46fa:	39 0b       	sbc	r19, r25
    46fc:	f8 01       	movw	r30, r16
    46fe:	80 81       	ld	r24, Z
    4700:	81 ff       	sbrs	r24, 1
    4702:	0a c0       	rjmp	.+20     	; 0x4718 <udd_ep_trans_complet+0xd2>
    4704:	c9 01       	movw	r24, r18
    4706:	b4 01       	movw	r22, r8
    4708:	0e 94 9c 3a 	call	0x7538	; 0x7538 <__udivmodhi4>
    470c:	41 e0       	ldi	r20, 0x01	; 1
    470e:	89 2b       	or	r24, r25
    4710:	09 f0       	breq	.+2      	; 0x4714 <udd_ep_trans_complet+0xce>
    4712:	40 e0       	ldi	r20, 0x00	; 0
    4714:	84 2f       	mov	r24, r20
    4716:	01 c0       	rjmp	.+2      	; 0x471a <udd_ep_trans_complet+0xd4>
    4718:	80 e0       	ldi	r24, 0x00	; 0
    471a:	d8 01       	movw	r26, r16
    471c:	9c 91       	ld	r25, X
    471e:	80 fb       	bst	r24, 0
    4720:	91 f9       	bld	r25, 1
    4722:	9c 93       	st	X, r25
    4724:	fe 01       	movw	r30, r28
    4726:	ee 0f       	add	r30, r30
    4728:	ff 1f       	adc	r31, r31
    472a:	ee 0f       	add	r30, r30
    472c:	ff 1f       	adc	r31, r31
    472e:	ee 0f       	add	r30, r30
    4730:	ff 1f       	adc	r31, r31
    4732:	e8 56       	subi	r30, 0x68	; 104
    4734:	fd 4d       	sbci	r31, 0xDD	; 221
    4736:	12 8a       	std	Z+18, r1	; 0x12
    4738:	13 8a       	std	Z+19, r1	; 0x13
    473a:	26 87       	std	Z+14, r18	; 0x0e
    473c:	37 87       	std	Z+15, r19	; 0x0f
    473e:	11 96       	adiw	r26, 0x01	; 1
    4740:	2d 91       	ld	r18, X+
    4742:	3c 91       	ld	r19, X
    4744:	12 97       	sbiw	r26, 0x02	; 2
    4746:	15 96       	adiw	r26, 0x05	; 5
    4748:	8d 91       	ld	r24, X+
    474a:	9c 91       	ld	r25, X
    474c:	16 97       	sbiw	r26, 0x06	; 6
    474e:	82 0f       	add	r24, r18
    4750:	93 1f       	adc	r25, r19
    4752:	cc 0f       	add	r28, r28
    4754:	dd 1f       	adc	r29, r29
    4756:	cc 0f       	add	r28, r28
    4758:	dd 1f       	adc	r29, r29
    475a:	cc 0f       	add	r28, r28
    475c:	dd 1f       	adc	r29, r29
    475e:	c8 55       	subi	r28, 0x58	; 88
    4760:	dd 4d       	sbci	r29, 0xDD	; 221
    4762:	88 83       	st	Y, r24
    4764:	99 83       	std	Y+1, r25	; 0x01
    4766:	f7 01       	movw	r30, r14
    4768:	02 e0       	ldi	r16, 0x02	; 2
    476a:	06 93       	lac	Z, r16
    476c:	e4 c0       	rjmp	.+456    	; 0x4936 <udd_ep_trans_complet+0x2f0>
    476e:	d8 01       	movw	r26, r16
    4770:	8c 91       	ld	r24, X
    4772:	81 ff       	sbrs	r24, 1
    4774:	cd c0       	rjmp	.+410    	; 0x4910 <udd_ep_trans_complet+0x2ca>
    4776:	8d 7f       	andi	r24, 0xFD	; 253
    4778:	8c 93       	st	X, r24
    477a:	cc 0f       	add	r28, r28
    477c:	dd 1f       	adc	r29, r29
    477e:	cc 0f       	add	r28, r28
    4780:	dd 1f       	adc	r29, r29
    4782:	cc 0f       	add	r28, r28
    4784:	dd 1f       	adc	r29, r29
    4786:	c8 56       	subi	r28, 0x68	; 104
    4788:	dd 4d       	sbci	r29, 0xDD	; 221
    478a:	1a 8a       	std	Y+18, r1	; 0x12
    478c:	1b 8a       	std	Y+19, r1	; 0x13
    478e:	1e 86       	std	Y+14, r1	; 0x0e
    4790:	1f 86       	std	Y+15, r1	; 0x0f
    4792:	f7 01       	movw	r30, r14
    4794:	02 e0       	ldi	r16, 0x02	; 2
    4796:	06 93       	lac	Z, r16
    4798:	ce c0       	rjmp	.+412    	; 0x4936 <udd_ep_trans_complet+0x2f0>
    479a:	fe 01       	movw	r30, r28
    479c:	ee 0f       	add	r30, r30
    479e:	ff 1f       	adc	r31, r31
    47a0:	ee 0f       	add	r30, r30
    47a2:	ff 1f       	adc	r31, r31
    47a4:	ee 0f       	add	r30, r30
    47a6:	ff 1f       	adc	r31, r31
    47a8:	e8 56       	subi	r30, 0x68	; 104
    47aa:	fd 4d       	sbci	r31, 0xDD	; 221
    47ac:	a6 84       	ldd	r10, Z+14	; 0x0e
    47ae:	b7 84       	ldd	r11, Z+15	; 0x0f
    47b0:	d8 01       	movw	r26, r16
    47b2:	8c 91       	ld	r24, X
    47b4:	82 ff       	sbrs	r24, 2
    47b6:	1b c0       	rjmp	.+54     	; 0x47ee <udd_ep_trans_complet+0x1a8>
    47b8:	11 96       	adiw	r26, 0x01	; 1
    47ba:	ed 91       	ld	r30, X+
    47bc:	fc 91       	ld	r31, X
    47be:	12 97       	sbiw	r26, 0x02	; 2
    47c0:	15 96       	adiw	r26, 0x05	; 5
    47c2:	2d 91       	ld	r18, X+
    47c4:	3c 91       	ld	r19, X
    47c6:	16 97       	sbiw	r26, 0x06	; 6
    47c8:	13 96       	adiw	r26, 0x03	; 3
    47ca:	8d 91       	ld	r24, X+
    47cc:	9c 91       	ld	r25, X
    47ce:	14 97       	sbiw	r26, 0x04	; 4
    47d0:	b4 01       	movw	r22, r8
    47d2:	0e 94 9c 3a 	call	0x7538	; 0x7538 <__udivmodhi4>
    47d6:	b0 e4       	ldi	r27, 0x40	; 64
    47d8:	db 9e       	mul	r13, r27
    47da:	b0 01       	movw	r22, r0
    47dc:	11 24       	eor	r1, r1
    47de:	64 59       	subi	r22, 0x94	; 148
    47e0:	7e 4d       	sbci	r23, 0xDE	; 222
    47e2:	ac 01       	movw	r20, r24
    47e4:	cf 01       	movw	r24, r30
    47e6:	82 0f       	add	r24, r18
    47e8:	93 1f       	adc	r25, r19
    47ea:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <memcpy>
    47ee:	f8 01       	movw	r30, r16
    47f0:	25 81       	ldd	r18, Z+5	; 0x05
    47f2:	36 81       	ldd	r19, Z+6	; 0x06
    47f4:	2a 0d       	add	r18, r10
    47f6:	3b 1d       	adc	r19, r11
    47f8:	25 83       	std	Z+5, r18	; 0x05
    47fa:	36 83       	std	Z+6, r19	; 0x06
    47fc:	83 81       	ldd	r24, Z+3	; 0x03
    47fe:	94 81       	ldd	r25, Z+4	; 0x04
    4800:	82 17       	cp	r24, r18
    4802:	93 07       	cpc	r25, r19
    4804:	68 f4       	brcc	.+26     	; 0x4820 <udd_ep_trans_complet+0x1da>
    4806:	85 83       	std	Z+5, r24	; 0x05
    4808:	96 83       	std	Z+6, r25	; 0x06
    480a:	cc 0f       	add	r28, r28
    480c:	dd 1f       	adc	r29, r29
    480e:	cc 0f       	add	r28, r28
    4810:	dd 1f       	adc	r29, r29
    4812:	cc 0f       	add	r28, r28
    4814:	dd 1f       	adc	r29, r29
    4816:	c8 56       	subi	r28, 0x68	; 104
    4818:	dd 4d       	sbci	r29, 0xDD	; 221
    481a:	8a 89       	ldd	r24, Y+18	; 0x12
    481c:	9b 89       	ldd	r25, Y+19	; 0x13
    481e:	78 c0       	rjmp	.+240    	; 0x4910 <udd_ep_trans_complet+0x2ca>
    4820:	fe 01       	movw	r30, r28
    4822:	ee 0f       	add	r30, r30
    4824:	ff 1f       	adc	r31, r31
    4826:	ee 0f       	add	r30, r30
    4828:	ff 1f       	adc	r31, r31
    482a:	ee 0f       	add	r30, r30
    482c:	ff 1f       	adc	r31, r31
    482e:	e8 56       	subi	r30, 0x68	; 104
    4830:	fd 4d       	sbci	r31, 0xDD	; 221
    4832:	42 89       	ldd	r20, Z+18	; 0x12
    4834:	53 89       	ldd	r21, Z+19	; 0x13
    4836:	a4 16       	cp	r10, r20
    4838:	b5 06       	cpc	r11, r21
    483a:	09 f0       	breq	.+2      	; 0x483e <udd_ep_trans_complet+0x1f8>
    483c:	69 c0       	rjmp	.+210    	; 0x4910 <udd_ep_trans_complet+0x2ca>
    483e:	28 17       	cp	r18, r24
    4840:	39 07       	cpc	r19, r25
    4842:	09 f4       	brne	.+2      	; 0x4846 <udd_ep_trans_complet+0x200>
    4844:	65 c0       	rjmp	.+202    	; 0x4910 <udd_ep_trans_complet+0x2ca>
    4846:	ac 01       	movw	r20, r24
    4848:	42 1b       	sub	r20, r18
    484a:	53 0b       	sbc	r21, r19
    484c:	9a 01       	movw	r18, r20
    484e:	21 15       	cp	r18, r1
    4850:	54 e0       	ldi	r21, 0x04	; 4
    4852:	35 07       	cpc	r19, r21
    4854:	48 f0       	brcs	.+18     	; 0x4868 <udd_ep_trans_complet+0x222>
    4856:	2f ef       	ldi	r18, 0xFF	; 255
    4858:	33 e0       	ldi	r19, 0x03	; 3
    485a:	c9 01       	movw	r24, r18
    485c:	b4 01       	movw	r22, r8
    485e:	0e 94 9c 3a 	call	0x7538	; 0x7538 <__udivmodhi4>
    4862:	28 1b       	sub	r18, r24
    4864:	39 0b       	sbc	r19, r25
    4866:	06 c0       	rjmp	.+12     	; 0x4874 <udd_ep_trans_complet+0x22e>
    4868:	c9 01       	movw	r24, r18
    486a:	b4 01       	movw	r22, r8
    486c:	0e 94 9c 3a 	call	0x7538	; 0x7538 <__udivmodhi4>
    4870:	28 1b       	sub	r18, r24
    4872:	39 0b       	sbc	r19, r25
    4874:	fe 01       	movw	r30, r28
    4876:	ee 0f       	add	r30, r30
    4878:	ff 1f       	adc	r31, r31
    487a:	ee 0f       	add	r30, r30
    487c:	ff 1f       	adc	r31, r31
    487e:	ee 0f       	add	r30, r30
    4880:	ff 1f       	adc	r31, r31
    4882:	e8 56       	subi	r30, 0x68	; 104
    4884:	fd 4d       	sbci	r31, 0xDD	; 221
    4886:	16 86       	std	Z+14, r1	; 0x0e
    4888:	17 86       	std	Z+15, r1	; 0x0f
    488a:	28 15       	cp	r18, r8
    488c:	39 05       	cpc	r19, r9
    488e:	00 f5       	brcc	.+64     	; 0x48d0 <udd_ep_trans_complet+0x28a>
    4890:	d8 01       	movw	r26, r16
    4892:	8c 91       	ld	r24, X
    4894:	84 60       	ori	r24, 0x04	; 4
    4896:	8c 93       	st	X, r24
    4898:	b0 e4       	ldi	r27, 0x40	; 64
    489a:	db 9e       	mul	r13, r27
    489c:	c0 01       	movw	r24, r0
    489e:	11 24       	eor	r1, r1
    48a0:	84 59       	subi	r24, 0x94	; 148
    48a2:	9e 4d       	sbci	r25, 0xDE	; 222
    48a4:	fe 01       	movw	r30, r28
    48a6:	ee 0f       	add	r30, r30
    48a8:	ff 1f       	adc	r31, r31
    48aa:	ee 0f       	add	r30, r30
    48ac:	ff 1f       	adc	r31, r31
    48ae:	ee 0f       	add	r30, r30
    48b0:	ff 1f       	adc	r31, r31
    48b2:	e8 55       	subi	r30, 0x58	; 88
    48b4:	fd 4d       	sbci	r31, 0xDD	; 221
    48b6:	80 83       	st	Z, r24
    48b8:	91 83       	std	Z+1, r25	; 0x01
    48ba:	cc 0f       	add	r28, r28
    48bc:	dd 1f       	adc	r29, r29
    48be:	cc 0f       	add	r28, r28
    48c0:	dd 1f       	adc	r29, r29
    48c2:	cc 0f       	add	r28, r28
    48c4:	dd 1f       	adc	r29, r29
    48c6:	c8 56       	subi	r28, 0x68	; 104
    48c8:	dd 4d       	sbci	r29, 0xDD	; 221
    48ca:	8a 8a       	std	Y+18, r8	; 0x12
    48cc:	9b 8a       	std	Y+19, r9	; 0x13
    48ce:	1c c0       	rjmp	.+56     	; 0x4908 <udd_ep_trans_complet+0x2c2>
    48d0:	f8 01       	movw	r30, r16
    48d2:	41 81       	ldd	r20, Z+1	; 0x01
    48d4:	52 81       	ldd	r21, Z+2	; 0x02
    48d6:	85 81       	ldd	r24, Z+5	; 0x05
    48d8:	96 81       	ldd	r25, Z+6	; 0x06
    48da:	84 0f       	add	r24, r20
    48dc:	95 1f       	adc	r25, r21
    48de:	fe 01       	movw	r30, r28
    48e0:	ee 0f       	add	r30, r30
    48e2:	ff 1f       	adc	r31, r31
    48e4:	ee 0f       	add	r30, r30
    48e6:	ff 1f       	adc	r31, r31
    48e8:	ee 0f       	add	r30, r30
    48ea:	ff 1f       	adc	r31, r31
    48ec:	e8 55       	subi	r30, 0x58	; 88
    48ee:	fd 4d       	sbci	r31, 0xDD	; 221
    48f0:	80 83       	st	Z, r24
    48f2:	91 83       	std	Z+1, r25	; 0x01
    48f4:	cc 0f       	add	r28, r28
    48f6:	dd 1f       	adc	r29, r29
    48f8:	cc 0f       	add	r28, r28
    48fa:	dd 1f       	adc	r29, r29
    48fc:	cc 0f       	add	r28, r28
    48fe:	dd 1f       	adc	r29, r29
    4900:	c8 56       	subi	r28, 0x68	; 104
    4902:	dd 4d       	sbci	r29, 0xDD	; 221
    4904:	2a 8b       	std	Y+18, r18	; 0x12
    4906:	3b 8b       	std	Y+19, r19	; 0x13
    4908:	f7 01       	movw	r30, r14
    490a:	02 e0       	ldi	r16, 0x02	; 2
    490c:	06 93       	lac	Z, r16
    490e:	13 c0       	rjmp	.+38     	; 0x4936 <udd_ep_trans_complet+0x2f0>
    4910:	d8 01       	movw	r26, r16
    4912:	8c 91       	ld	r24, X
    4914:	80 ff       	sbrs	r24, 0
    4916:	0f c0       	rjmp	.+30     	; 0x4936 <udd_ep_trans_complet+0x2f0>
    4918:	8e 7f       	andi	r24, 0xFE	; 254
    491a:	8c 93       	st	X, r24
    491c:	17 96       	adiw	r26, 0x07	; 7
    491e:	ed 91       	ld	r30, X+
    4920:	fc 91       	ld	r31, X
    4922:	18 97       	sbiw	r26, 0x08	; 8
    4924:	30 97       	sbiw	r30, 0x00	; 0
    4926:	39 f0       	breq	.+14     	; 0x4936 <udd_ep_trans_complet+0x2f0>
    4928:	15 96       	adiw	r26, 0x05	; 5
    492a:	6d 91       	ld	r22, X+
    492c:	7c 91       	ld	r23, X
    492e:	16 97       	sbiw	r26, 0x06	; 6
    4930:	4d 2d       	mov	r20, r13
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	19 95       	eicall
    4936:	df 91       	pop	r29
    4938:	cf 91       	pop	r28
    493a:	1f 91       	pop	r17
    493c:	0f 91       	pop	r16
    493e:	ff 90       	pop	r15
    4940:	ef 90       	pop	r14
    4942:	df 90       	pop	r13
    4944:	bf 90       	pop	r11
    4946:	af 90       	pop	r10
    4948:	9f 90       	pop	r9
    494a:	8f 90       	pop	r8
    494c:	08 95       	ret

0000494e <udd_attach>:
    494e:	1f 93       	push	r17
    4950:	cf 93       	push	r28
    4952:	df 93       	push	r29
    4954:	1f 92       	push	r1
    4956:	cd b7       	in	r28, 0x3d	; 61
    4958:	de b7       	in	r29, 0x3e	; 62
    495a:	8f b7       	in	r24, 0x3f	; 63
    495c:	89 83       	std	Y+1, r24	; 0x01
    495e:	f8 94       	cli
    4960:	19 81       	ldd	r17, Y+1	; 0x01
    4962:	81 e0       	ldi	r24, 0x01	; 1
    4964:	cd dc       	rcall	.-1638   	; 0x4300 <udd_sleep_mode>
    4966:	ea ec       	ldi	r30, 0xCA	; 202
    4968:	f4 e0       	ldi	r31, 0x04	; 4
    496a:	80 e4       	ldi	r24, 0x40	; 64
    496c:	80 83       	st	Z, r24
    496e:	80 e2       	ldi	r24, 0x20	; 32
    4970:	80 83       	st	Z, r24
    4972:	e1 ec       	ldi	r30, 0xC1	; 193
    4974:	f4 e0       	ldi	r31, 0x04	; 4
    4976:	80 81       	ld	r24, Z
    4978:	81 60       	ori	r24, 0x01	; 1
    497a:	80 83       	st	Z, r24
    497c:	a9 ec       	ldi	r26, 0xC9	; 201
    497e:	b4 e0       	ldi	r27, 0x04	; 4
    4980:	8c 91       	ld	r24, X
    4982:	82 60       	ori	r24, 0x02	; 2
    4984:	8c 93       	st	X, r24
    4986:	e8 ec       	ldi	r30, 0xC8	; 200
    4988:	f4 e0       	ldi	r31, 0x04	; 4
    498a:	80 81       	ld	r24, Z
    498c:	80 64       	ori	r24, 0x40	; 64
    498e:	80 83       	st	Z, r24
    4990:	8c 91       	ld	r24, X
    4992:	81 60       	ori	r24, 0x01	; 1
    4994:	8c 93       	st	X, r24
    4996:	80 81       	ld	r24, Z
    4998:	80 68       	ori	r24, 0x80	; 128
    499a:	80 83       	st	Z, r24
    499c:	1f bf       	out	0x3f, r17	; 63
    499e:	0f 90       	pop	r0
    49a0:	df 91       	pop	r29
    49a2:	cf 91       	pop	r28
    49a4:	1f 91       	pop	r17
    49a6:	08 95       	ret

000049a8 <udd_enable>:
    49a8:	0f 93       	push	r16
    49aa:	1f 93       	push	r17
    49ac:	cf 93       	push	r28
    49ae:	df 93       	push	r29
    49b0:	1f 92       	push	r1
    49b2:	1f 92       	push	r1
    49b4:	cd b7       	in	r28, 0x3d	; 61
    49b6:	de b7       	in	r29, 0x3e	; 62
    49b8:	00 e6       	ldi	r16, 0x60	; 96
    49ba:	10 e0       	ldi	r17, 0x00	; 0
    49bc:	f8 01       	movw	r30, r16
    49be:	10 82       	st	Z, r1
    49c0:	80 e3       	ldi	r24, 0x30	; 48
    49c2:	0e 94 af 32 	call	0x655e	; 0x655e <sysclk_enable_usb>
    49c6:	e0 ec       	ldi	r30, 0xC0	; 192
    49c8:	f4 e0       	ldi	r31, 0x04	; 4
    49ca:	80 81       	ld	r24, Z
    49cc:	80 64       	ori	r24, 0x40	; 64
    49ce:	80 83       	st	Z, r24
    49d0:	81 e0       	ldi	r24, 0x01	; 1
    49d2:	f8 01       	movw	r30, r16
    49d4:	80 83       	st	Z, r24
    49d6:	8f b7       	in	r24, 0x3f	; 63
    49d8:	8a 83       	std	Y+2, r24	; 0x02
    49da:	f8 94       	cli
    49dc:	1a 81       	ldd	r17, Y+2	; 0x02
    49de:	e8 e9       	ldi	r30, 0x98	; 152
    49e0:	f2 e2       	ldi	r31, 0x22	; 34
    49e2:	15 86       	std	Z+13, r1	; 0x0d
    49e4:	15 8a       	std	Z+21, r1	; 0x15
    49e6:	15 8e       	std	Z+29, r1	; 0x1d
    49e8:	15 a2       	std	Z+37, r1	; 0x25
    49ea:	15 a6       	std	Z+45, r1	; 0x2d
    49ec:	15 aa       	std	Z+53, r1	; 0x35
    49ee:	ec e2       	ldi	r30, 0x2C	; 44
    49f0:	f2 e2       	ldi	r31, 0x22	; 34
    49f2:	80 81       	ld	r24, Z
    49f4:	8e 7f       	andi	r24, 0xFE	; 254
    49f6:	80 83       	st	Z, r24
    49f8:	e5 e3       	ldi	r30, 0x35	; 53
    49fa:	f2 e2       	ldi	r31, 0x22	; 34
    49fc:	80 81       	ld	r24, Z
    49fe:	8e 7f       	andi	r24, 0xFE	; 254
    4a00:	80 83       	st	Z, r24
    4a02:	ee e3       	ldi	r30, 0x3E	; 62
    4a04:	f2 e2       	ldi	r31, 0x22	; 34
    4a06:	80 81       	ld	r24, Z
    4a08:	8e 7f       	andi	r24, 0xFE	; 254
    4a0a:	80 83       	st	Z, r24
    4a0c:	e7 e4       	ldi	r30, 0x47	; 71
    4a0e:	f2 e2       	ldi	r31, 0x22	; 34
    4a10:	80 81       	ld	r24, Z
    4a12:	8e 7f       	andi	r24, 0xFE	; 254
    4a14:	80 83       	st	Z, r24
    4a16:	6a e1       	ldi	r22, 0x1A	; 26
    4a18:	70 e0       	ldi	r23, 0x00	; 0
    4a1a:	82 e0       	ldi	r24, 0x02	; 2
    4a1c:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
    4a20:	8f 3f       	cpi	r24, 0xFF	; 255
    4a22:	19 f0       	breq	.+6      	; 0x4a2a <udd_enable+0x82>
    4a24:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4a28:	03 c0       	rjmp	.+6      	; 0x4a30 <udd_enable+0x88>
    4a2a:	8f e1       	ldi	r24, 0x1F	; 31
    4a2c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4a30:	6b e1       	ldi	r22, 0x1B	; 27
    4a32:	70 e0       	ldi	r23, 0x00	; 0
    4a34:	82 e0       	ldi	r24, 0x02	; 2
    4a36:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
    4a3a:	8f 3f       	cpi	r24, 0xFF	; 255
    4a3c:	19 f0       	breq	.+6      	; 0x4a44 <udd_enable+0x9c>
    4a3e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    4a42:	03 c0       	rjmp	.+6      	; 0x4a4a <udd_enable+0xa2>
    4a44:	8f e1       	ldi	r24, 0x1F	; 31
    4a46:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    4a4a:	e0 ec       	ldi	r30, 0xC0	; 192
    4a4c:	f4 e0       	ldi	r31, 0x04	; 4
    4a4e:	80 81       	ld	r24, Z
    4a50:	82 60       	ori	r24, 0x02	; 2
    4a52:	80 83       	st	Z, r24
    4a54:	80 81       	ld	r24, Z
    4a56:	80 68       	ori	r24, 0x80	; 128
    4a58:	80 83       	st	Z, r24
    4a5a:	80 81       	ld	r24, Z
    4a5c:	80 61       	ori	r24, 0x10	; 16
    4a5e:	80 83       	st	Z, r24
    4a60:	84 ea       	ldi	r24, 0xA4	; 164
    4a62:	92 e2       	ldi	r25, 0x22	; 34
    4a64:	86 83       	std	Z+6, r24	; 0x06
    4a66:	97 83       	std	Z+7, r25	; 0x07
    4a68:	80 81       	ld	r24, Z
    4a6a:	80 62       	ori	r24, 0x20	; 32
    4a6c:	80 83       	st	Z, r24
    4a6e:	8f ef       	ldi	r24, 0xFF	; 255
    4a70:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    4a74:	e8 ec       	ldi	r30, 0xC8	; 200
    4a76:	f4 e0       	ldi	r31, 0x04	; 4
    4a78:	80 81       	ld	r24, Z
    4a7a:	81 60       	ori	r24, 0x01	; 1
    4a7c:	80 83       	st	Z, r24
    4a7e:	10 92 d8 22 	sts	0x22D8, r1	; 0x8022d8 <udd_b_idle>
    4a82:	80 91 da 25 	lds	r24, 0x25DA	; 0x8025da <sleepmgr_locks+0x5>
    4a86:	8f 3f       	cpi	r24, 0xFF	; 255
    4a88:	09 f4       	brne	.+2      	; 0x4a8c <udd_enable+0xe4>
    4a8a:	ff cf       	rjmp	.-2      	; 0x4a8a <udd_enable+0xe2>
    4a8c:	8f b7       	in	r24, 0x3f	; 63
    4a8e:	89 83       	std	Y+1, r24	; 0x01
    4a90:	f8 94       	cli
    4a92:	99 81       	ldd	r25, Y+1	; 0x01
    4a94:	e5 ed       	ldi	r30, 0xD5	; 213
    4a96:	f5 e2       	ldi	r31, 0x25	; 37
    4a98:	85 81       	ldd	r24, Z+5	; 0x05
    4a9a:	8f 5f       	subi	r24, 0xFF	; 255
    4a9c:	85 83       	std	Z+5, r24	; 0x05
    4a9e:	9f bf       	out	0x3f, r25	; 63
    4aa0:	56 df       	rcall	.-340    	; 0x494e <udd_attach>
    4aa2:	1f bf       	out	0x3f, r17	; 63
    4aa4:	0f 90       	pop	r0
    4aa6:	0f 90       	pop	r0
    4aa8:	df 91       	pop	r29
    4aaa:	cf 91       	pop	r28
    4aac:	1f 91       	pop	r17
    4aae:	0f 91       	pop	r16
    4ab0:	08 95       	ret

00004ab2 <udd_is_high_speed>:
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	08 95       	ret

00004ab6 <udd_set_address>:
    4ab6:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    4aba:	08 95       	ret

00004abc <udd_getaddress>:
    4abc:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    4ac0:	08 95       	ret

00004ac2 <udd_get_frame_number>:
    4ac2:	80 91 d4 22 	lds	r24, 0x22D4	; 0x8022d4 <udd_sram+0x3c>
    4ac6:	90 91 d5 22 	lds	r25, 0x22D5	; 0x8022d5 <udd_sram+0x3d>
    4aca:	08 95       	ret

00004acc <udd_get_micro_frame_number>:
    4acc:	80 e0       	ldi	r24, 0x00	; 0
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	08 95       	ret

00004ad2 <udd_set_setup_payload>:
    4ad2:	e5 ec       	ldi	r30, 0xC5	; 197
    4ad4:	f5 e2       	ldi	r31, 0x25	; 37
    4ad6:	80 87       	std	Z+8, r24	; 0x08
    4ad8:	91 87       	std	Z+9, r25	; 0x09
    4ada:	62 87       	std	Z+10, r22	; 0x0a
    4adc:	73 87       	std	Z+11, r23	; 0x0b
    4ade:	08 95       	ret

00004ae0 <udd_ep_alloc>:
    4ae0:	28 2f       	mov	r18, r24
    4ae2:	2f 70       	andi	r18, 0x0F	; 15
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	22 0f       	add	r18, r18
    4ae8:	33 1f       	adc	r19, r19
    4aea:	08 2e       	mov	r0, r24
    4aec:	00 0c       	add	r0, r0
    4aee:	99 0b       	sbc	r25, r25
    4af0:	88 27       	eor	r24, r24
    4af2:	99 0f       	add	r25, r25
    4af4:	88 1f       	adc	r24, r24
    4af6:	99 27       	eor	r25, r25
    4af8:	82 0f       	add	r24, r18
    4afa:	93 1f       	adc	r25, r19
    4afc:	fc 01       	movw	r30, r24
    4afe:	ee 0f       	add	r30, r30
    4b00:	ff 1f       	adc	r31, r31
    4b02:	ee 0f       	add	r30, r30
    4b04:	ff 1f       	adc	r31, r31
    4b06:	ee 0f       	add	r30, r30
    4b08:	ff 1f       	adc	r31, r31
    4b0a:	e8 56       	subi	r30, 0x68	; 104
    4b0c:	fd 4d       	sbci	r31, 0xDD	; 221
    4b0e:	25 85       	ldd	r18, Z+13	; 0x0d
    4b10:	20 7c       	andi	r18, 0xC0	; 192
    4b12:	09 f0       	breq	.+2      	; 0x4b16 <udd_ep_alloc+0x36>
    4b14:	69 c0       	rjmp	.+210    	; 0x4be8 <udd_ep_alloc+0x108>
    4b16:	63 70       	andi	r22, 0x03	; 3
    4b18:	61 30       	cpi	r22, 0x01	; 1
    4b1a:	11 f0       	breq	.+4      	; 0x4b20 <udd_ep_alloc+0x40>
    4b1c:	18 f4       	brcc	.+6      	; 0x4b24 <udd_ep_alloc+0x44>
    4b1e:	04 c0       	rjmp	.+8      	; 0x4b28 <udd_ep_alloc+0x48>
    4b20:	60 ec       	ldi	r22, 0xC0	; 192
    4b22:	03 c0       	rjmp	.+6      	; 0x4b2a <udd_ep_alloc+0x4a>
    4b24:	60 e8       	ldi	r22, 0x80	; 128
    4b26:	01 c0       	rjmp	.+2      	; 0x4b2a <udd_ep_alloc+0x4a>
    4b28:	60 e4       	ldi	r22, 0x40	; 64
    4b2a:	40 38       	cpi	r20, 0x80	; 128
    4b2c:	51 05       	cpc	r21, r1
    4b2e:	e9 f0       	breq	.+58     	; 0x4b6a <udd_ep_alloc+0x8a>
    4b30:	50 f4       	brcc	.+20     	; 0x4b46 <udd_ep_alloc+0x66>
    4b32:	40 32       	cpi	r20, 0x20	; 32
    4b34:	51 05       	cpc	r21, r1
    4b36:	a9 f0       	breq	.+42     	; 0x4b62 <udd_ep_alloc+0x82>
    4b38:	40 34       	cpi	r20, 0x40	; 64
    4b3a:	51 05       	cpc	r21, r1
    4b3c:	a1 f0       	breq	.+40     	; 0x4b66 <udd_ep_alloc+0x86>
    4b3e:	40 31       	cpi	r20, 0x10	; 16
    4b40:	51 05       	cpc	r21, r1
    4b42:	d9 f4       	brne	.+54     	; 0x4b7a <udd_ep_alloc+0x9a>
    4b44:	0c c0       	rjmp	.+24     	; 0x4b5e <udd_ep_alloc+0x7e>
    4b46:	41 15       	cp	r20, r1
    4b48:	22 e0       	ldi	r18, 0x02	; 2
    4b4a:	52 07       	cpc	r21, r18
    4b4c:	91 f0       	breq	.+36     	; 0x4b72 <udd_ep_alloc+0x92>
    4b4e:	4f 3f       	cpi	r20, 0xFF	; 255
    4b50:	23 e0       	ldi	r18, 0x03	; 3
    4b52:	52 07       	cpc	r21, r18
    4b54:	81 f0       	breq	.+32     	; 0x4b76 <udd_ep_alloc+0x96>
    4b56:	41 15       	cp	r20, r1
    4b58:	51 40       	sbci	r21, 0x01	; 1
    4b5a:	79 f4       	brne	.+30     	; 0x4b7a <udd_ep_alloc+0x9a>
    4b5c:	08 c0       	rjmp	.+16     	; 0x4b6e <udd_ep_alloc+0x8e>
    4b5e:	21 e0       	ldi	r18, 0x01	; 1
    4b60:	0d c0       	rjmp	.+26     	; 0x4b7c <udd_ep_alloc+0x9c>
    4b62:	22 e0       	ldi	r18, 0x02	; 2
    4b64:	0b c0       	rjmp	.+22     	; 0x4b7c <udd_ep_alloc+0x9c>
    4b66:	23 e0       	ldi	r18, 0x03	; 3
    4b68:	09 c0       	rjmp	.+18     	; 0x4b7c <udd_ep_alloc+0x9c>
    4b6a:	24 e0       	ldi	r18, 0x04	; 4
    4b6c:	07 c0       	rjmp	.+14     	; 0x4b7c <udd_ep_alloc+0x9c>
    4b6e:	25 e0       	ldi	r18, 0x05	; 5
    4b70:	05 c0       	rjmp	.+10     	; 0x4b7c <udd_ep_alloc+0x9c>
    4b72:	26 e0       	ldi	r18, 0x06	; 6
    4b74:	03 c0       	rjmp	.+6      	; 0x4b7c <udd_ep_alloc+0x9c>
    4b76:	27 e0       	ldi	r18, 0x07	; 7
    4b78:	01 c0       	rjmp	.+2      	; 0x4b7c <udd_ep_alloc+0x9c>
    4b7a:	20 e0       	ldi	r18, 0x00	; 0
    4b7c:	fc 01       	movw	r30, r24
    4b7e:	ee 0f       	add	r30, r30
    4b80:	ff 1f       	adc	r31, r31
    4b82:	ee 0f       	add	r30, r30
    4b84:	ff 1f       	adc	r31, r31
    4b86:	ee 0f       	add	r30, r30
    4b88:	ff 1f       	adc	r31, r31
    4b8a:	e8 56       	subi	r30, 0x68	; 104
    4b8c:	fd 4d       	sbci	r31, 0xDD	; 221
    4b8e:	15 86       	std	Z+13, r1	; 0x0d
    4b90:	36 e0       	ldi	r19, 0x06	; 6
    4b92:	34 87       	std	Z+12, r19	; 0x0c
    4b94:	26 2b       	or	r18, r22
    4b96:	25 87       	std	Z+13, r18	; 0x0d
    4b98:	fc 01       	movw	r30, r24
    4b9a:	ee 0f       	add	r30, r30
    4b9c:	ff 1f       	adc	r31, r31
    4b9e:	ee 0f       	add	r30, r30
    4ba0:	ff 1f       	adc	r31, r31
    4ba2:	ee 0f       	add	r30, r30
    4ba4:	ff 1f       	adc	r31, r31
    4ba6:	e8 56       	subi	r30, 0x68	; 104
    4ba8:	fd 4d       	sbci	r31, 0xDD	; 221
    4baa:	25 85       	ldd	r18, Z+13	; 0x0d
    4bac:	20 7c       	andi	r18, 0xC0	; 192
    4bae:	20 3c       	cpi	r18, 0xC0	; 192
    4bb0:	69 f4       	brne	.+26     	; 0x4bcc <udd_ep_alloc+0xec>
    4bb2:	fc 01       	movw	r30, r24
    4bb4:	ee 0f       	add	r30, r30
    4bb6:	ff 1f       	adc	r31, r31
    4bb8:	ee 0f       	add	r30, r30
    4bba:	ff 1f       	adc	r31, r31
    4bbc:	ee 0f       	add	r30, r30
    4bbe:	ff 1f       	adc	r31, r31
    4bc0:	e8 56       	subi	r30, 0x68	; 104
    4bc2:	fd 4d       	sbci	r31, 0xDD	; 221
    4bc4:	25 85       	ldd	r18, Z+13	; 0x0d
    4bc6:	27 70       	andi	r18, 0x07	; 7
    4bc8:	27 30       	cpi	r18, 0x07	; 7
    4bca:	81 f0       	breq	.+32     	; 0x4bec <udd_ep_alloc+0x10c>
    4bcc:	88 0f       	add	r24, r24
    4bce:	99 1f       	adc	r25, r25
    4bd0:	88 0f       	add	r24, r24
    4bd2:	99 1f       	adc	r25, r25
    4bd4:	88 0f       	add	r24, r24
    4bd6:	99 1f       	adc	r25, r25
    4bd8:	fc 01       	movw	r30, r24
    4bda:	e8 56       	subi	r30, 0x68	; 104
    4bdc:	fd 4d       	sbci	r31, 0xDD	; 221
    4bde:	85 85       	ldd	r24, Z+13	; 0x0d
    4be0:	80 62       	ori	r24, 0x20	; 32
    4be2:	85 87       	std	Z+13, r24	; 0x0d
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	08 95       	ret
    4be8:	80 e0       	ldi	r24, 0x00	; 0
    4bea:	08 95       	ret
    4bec:	81 e0       	ldi	r24, 0x01	; 1
    4bee:	08 95       	ret

00004bf0 <udd_ep_is_halted>:
    4bf0:	e8 2f       	mov	r30, r24
    4bf2:	ef 70       	andi	r30, 0x0F	; 15
    4bf4:	f0 e0       	ldi	r31, 0x00	; 0
    4bf6:	ee 0f       	add	r30, r30
    4bf8:	ff 1f       	adc	r31, r31
    4bfa:	08 2e       	mov	r0, r24
    4bfc:	00 0c       	add	r0, r0
    4bfe:	99 0b       	sbc	r25, r25
    4c00:	88 27       	eor	r24, r24
    4c02:	99 0f       	add	r25, r25
    4c04:	88 1f       	adc	r24, r24
    4c06:	99 27       	eor	r25, r25
    4c08:	e8 0f       	add	r30, r24
    4c0a:	f9 1f       	adc	r31, r25
    4c0c:	ee 0f       	add	r30, r30
    4c0e:	ff 1f       	adc	r31, r31
    4c10:	ee 0f       	add	r30, r30
    4c12:	ff 1f       	adc	r31, r31
    4c14:	ee 0f       	add	r30, r30
    4c16:	ff 1f       	adc	r31, r31
    4c18:	e8 56       	subi	r30, 0x68	; 104
    4c1a:	fd 4d       	sbci	r31, 0xDD	; 221
    4c1c:	85 85       	ldd	r24, Z+13	; 0x0d
    4c1e:	82 fb       	bst	r24, 2
    4c20:	88 27       	eor	r24, r24
    4c22:	80 f9       	bld	r24, 0
    4c24:	08 95       	ret

00004c26 <udd_ep_clear_halt>:
    4c26:	0f 93       	push	r16
    4c28:	28 2f       	mov	r18, r24
    4c2a:	2f 70       	andi	r18, 0x0F	; 15
    4c2c:	30 e0       	ldi	r19, 0x00	; 0
    4c2e:	a9 01       	movw	r20, r18
    4c30:	44 0f       	add	r20, r20
    4c32:	55 1f       	adc	r21, r21
    4c34:	28 2f       	mov	r18, r24
    4c36:	08 2e       	mov	r0, r24
    4c38:	00 0c       	add	r0, r0
    4c3a:	33 0b       	sbc	r19, r19
    4c3c:	22 27       	eor	r18, r18
    4c3e:	33 0f       	add	r19, r19
    4c40:	22 1f       	adc	r18, r18
    4c42:	33 27       	eor	r19, r19
    4c44:	24 0f       	add	r18, r20
    4c46:	35 1f       	adc	r19, r21
    4c48:	a9 01       	movw	r20, r18
    4c4a:	44 0f       	add	r20, r20
    4c4c:	55 1f       	adc	r21, r21
    4c4e:	44 0f       	add	r20, r20
    4c50:	55 1f       	adc	r21, r21
    4c52:	44 0f       	add	r20, r20
    4c54:	55 1f       	adc	r21, r21
    4c56:	fa 01       	movw	r30, r20
    4c58:	ec 55       	subi	r30, 0x5C	; 92
    4c5a:	fd 4d       	sbci	r31, 0xDD	; 221
    4c5c:	01 e0       	ldi	r16, 0x01	; 1
    4c5e:	06 93       	lac	Z, r16
    4c60:	fa 01       	movw	r30, r20
    4c62:	e8 56       	subi	r30, 0x68	; 104
    4c64:	fd 4d       	sbci	r31, 0xDD	; 221
    4c66:	95 85       	ldd	r25, Z+13	; 0x0d
    4c68:	92 ff       	sbrs	r25, 2
    4c6a:	11 c0       	rjmp	.+34     	; 0x4c8e <udd_ep_clear_halt+0x68>
    4c6c:	fa 01       	movw	r30, r20
    4c6e:	e8 56       	subi	r30, 0x68	; 104
    4c70:	fd 4d       	sbci	r31, 0xDD	; 221
    4c72:	95 85       	ldd	r25, Z+13	; 0x0d
    4c74:	9b 7f       	andi	r25, 0xFB	; 251
    4c76:	95 87       	std	Z+13, r25	; 0x0d
    4c78:	59 dc       	rcall	.-1870   	; 0x452c <udd_ep_get_job>
    4c7a:	fc 01       	movw	r30, r24
    4c7c:	80 81       	ld	r24, Z
    4c7e:	80 ff       	sbrs	r24, 0
    4c80:	06 c0       	rjmp	.+12     	; 0x4c8e <udd_ep_clear_halt+0x68>
    4c82:	8e 7f       	andi	r24, 0xFE	; 254
    4c84:	80 83       	st	Z, r24
    4c86:	07 80       	ldd	r0, Z+7	; 0x07
    4c88:	f0 85       	ldd	r31, Z+8	; 0x08
    4c8a:	e0 2d       	mov	r30, r0
    4c8c:	19 95       	eicall
    4c8e:	81 e0       	ldi	r24, 0x01	; 1
    4c90:	0f 91       	pop	r16
    4c92:	08 95       	ret

00004c94 <udd_ep_run>:
    4c94:	6f 92       	push	r6
    4c96:	7f 92       	push	r7
    4c98:	8f 92       	push	r8
    4c9a:	9f 92       	push	r9
    4c9c:	af 92       	push	r10
    4c9e:	bf 92       	push	r11
    4ca0:	cf 92       	push	r12
    4ca2:	df 92       	push	r13
    4ca4:	ef 92       	push	r14
    4ca6:	ff 92       	push	r15
    4ca8:	0f 93       	push	r16
    4caa:	1f 93       	push	r17
    4cac:	cf 93       	push	r28
    4cae:	df 93       	push	r29
    4cb0:	1f 92       	push	r1
    4cb2:	cd b7       	in	r28, 0x3d	; 61
    4cb4:	de b7       	in	r29, 0x3e	; 62
    4cb6:	78 2e       	mov	r7, r24
    4cb8:	66 2e       	mov	r6, r22
    4cba:	4a 01       	movw	r8, r20
    4cbc:	59 01       	movw	r10, r18
    4cbe:	36 dc       	rcall	.-1940   	; 0x452c <udd_ep_get_job>
    4cc0:	6c 01       	movw	r12, r24
    4cc2:	27 2d       	mov	r18, r7
    4cc4:	87 2d       	mov	r24, r7
    4cc6:	8f 70       	andi	r24, 0x0F	; 15
    4cc8:	e8 2e       	mov	r14, r24
    4cca:	f1 2c       	mov	r15, r1
    4ccc:	c7 01       	movw	r24, r14
    4cce:	88 0f       	add	r24, r24
    4cd0:	99 1f       	adc	r25, r25
    4cd2:	e7 2c       	mov	r14, r7
    4cd4:	07 2c       	mov	r0, r7
    4cd6:	00 0c       	add	r0, r0
    4cd8:	ff 08       	sbc	r15, r15
    4cda:	ee 24       	eor	r14, r14
    4cdc:	ff 0c       	add	r15, r15
    4cde:	ee 1c       	adc	r14, r14
    4ce0:	ff 24       	eor	r15, r15
    4ce2:	e8 0e       	add	r14, r24
    4ce4:	f9 1e       	adc	r15, r25
    4ce6:	f7 01       	movw	r30, r14
    4ce8:	ee 0f       	add	r30, r30
    4cea:	ff 1f       	adc	r31, r31
    4cec:	ee 0f       	add	r30, r30
    4cee:	ff 1f       	adc	r31, r31
    4cf0:	ee 0f       	add	r30, r30
    4cf2:	ff 1f       	adc	r31, r31
    4cf4:	e8 56       	subi	r30, 0x68	; 104
    4cf6:	fd 4d       	sbci	r31, 0xDD	; 221
    4cf8:	85 85       	ldd	r24, Z+13	; 0x0d
    4cfa:	80 7c       	andi	r24, 0xC0	; 192
    4cfc:	09 f4       	brne	.+2      	; 0x4d00 <udd_ep_run+0x6c>
    4cfe:	82 c0       	rjmp	.+260    	; 0x4e04 <udd_ep_run+0x170>
    4d00:	f7 01       	movw	r30, r14
    4d02:	ee 0f       	add	r30, r30
    4d04:	ff 1f       	adc	r31, r31
    4d06:	ee 0f       	add	r30, r30
    4d08:	ff 1f       	adc	r31, r31
    4d0a:	ee 0f       	add	r30, r30
    4d0c:	ff 1f       	adc	r31, r31
    4d0e:	e8 56       	subi	r30, 0x68	; 104
    4d10:	fd 4d       	sbci	r31, 0xDD	; 221
    4d12:	85 85       	ldd	r24, Z+13	; 0x0d
    4d14:	80 7c       	andi	r24, 0xC0	; 192
    4d16:	80 3c       	cpi	r24, 0xC0	; 192
    4d18:	61 f0       	breq	.+24     	; 0x4d32 <udd_ep_run+0x9e>
    4d1a:	f7 01       	movw	r30, r14
    4d1c:	ee 0f       	add	r30, r30
    4d1e:	ff 1f       	adc	r31, r31
    4d20:	ee 0f       	add	r30, r30
    4d22:	ff 1f       	adc	r31, r31
    4d24:	ee 0f       	add	r30, r30
    4d26:	ff 1f       	adc	r31, r31
    4d28:	e8 56       	subi	r30, 0x68	; 104
    4d2a:	fd 4d       	sbci	r31, 0xDD	; 221
    4d2c:	85 85       	ldd	r24, Z+13	; 0x0d
    4d2e:	82 fd       	sbrc	r24, 2
    4d30:	6b c0       	rjmp	.+214    	; 0x4e08 <udd_ep_run+0x174>
    4d32:	8f b7       	in	r24, 0x3f	; 63
    4d34:	89 83       	std	Y+1, r24	; 0x01
    4d36:	f8 94       	cli
    4d38:	89 81       	ldd	r24, Y+1	; 0x01
    4d3a:	f6 01       	movw	r30, r12
    4d3c:	90 81       	ld	r25, Z
    4d3e:	90 ff       	sbrs	r25, 0
    4d40:	03 c0       	rjmp	.+6      	; 0x4d48 <udd_ep_run+0xb4>
    4d42:	8f bf       	out	0x3f, r24	; 63
    4d44:	80 e0       	ldi	r24, 0x00	; 0
    4d46:	61 c0       	rjmp	.+194    	; 0x4e0a <udd_ep_run+0x176>
    4d48:	f6 01       	movw	r30, r12
    4d4a:	90 81       	ld	r25, Z
    4d4c:	91 60       	ori	r25, 0x01	; 1
    4d4e:	90 83       	st	Z, r25
    4d50:	8f bf       	out	0x3f, r24	; 63
    4d52:	81 82       	std	Z+1, r8	; 0x01
    4d54:	92 82       	std	Z+2, r9	; 0x02
    4d56:	a3 82       	std	Z+3, r10	; 0x03
    4d58:	b4 82       	std	Z+4, r11	; 0x04
    4d5a:	15 82       	std	Z+5, r1	; 0x05
    4d5c:	16 82       	std	Z+6, r1	; 0x06
    4d5e:	07 83       	std	Z+7, r16	; 0x07
    4d60:	10 87       	std	Z+8, r17	; 0x08
    4d62:	61 10       	cpse	r6, r1
    4d64:	06 c0       	rjmp	.+12     	; 0x4d72 <udd_ep_run+0xde>
    4d66:	91 e0       	ldi	r25, 0x01	; 1
    4d68:	a1 14       	cp	r10, r1
    4d6a:	b1 04       	cpc	r11, r1
    4d6c:	19 f0       	breq	.+6      	; 0x4d74 <udd_ep_run+0xe0>
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	01 c0       	rjmp	.+2      	; 0x4d74 <udd_ep_run+0xe0>
    4d72:	91 e0       	ldi	r25, 0x01	; 1
    4d74:	f6 01       	movw	r30, r12
    4d76:	80 81       	ld	r24, Z
    4d78:	90 fb       	bst	r25, 0
    4d7a:	81 f9       	bld	r24, 1
    4d7c:	8b 7f       	andi	r24, 0xFB	; 251
    4d7e:	80 83       	st	Z, r24
    4d80:	22 23       	and	r18, r18
    4d82:	64 f4       	brge	.+24     	; 0x4d9c <udd_ep_run+0x108>
    4d84:	f7 01       	movw	r30, r14
    4d86:	ee 0f       	add	r30, r30
    4d88:	ff 1f       	adc	r31, r31
    4d8a:	ee 0f       	add	r30, r30
    4d8c:	ff 1f       	adc	r31, r31
    4d8e:	ee 0f       	add	r30, r30
    4d90:	ff 1f       	adc	r31, r31
    4d92:	e8 56       	subi	r30, 0x68	; 104
    4d94:	fd 4d       	sbci	r31, 0xDD	; 221
    4d96:	12 8a       	std	Z+18, r1	; 0x12
    4d98:	13 8a       	std	Z+19, r1	; 0x13
    4d9a:	30 c0       	rjmp	.+96     	; 0x4dfc <udd_ep_run+0x168>
    4d9c:	f7 01       	movw	r30, r14
    4d9e:	ee 0f       	add	r30, r30
    4da0:	ff 1f       	adc	r31, r31
    4da2:	ee 0f       	add	r30, r30
    4da4:	ff 1f       	adc	r31, r31
    4da6:	ee 0f       	add	r30, r30
    4da8:	ff 1f       	adc	r31, r31
    4daa:	e8 56       	subi	r30, 0x68	; 104
    4dac:	fd 4d       	sbci	r31, 0xDD	; 221
    4dae:	85 85       	ldd	r24, Z+13	; 0x0d
    4db0:	80 7c       	andi	r24, 0xC0	; 192
    4db2:	80 3c       	cpi	r24, 0xC0	; 192
    4db4:	b1 f4       	brne	.+44     	; 0x4de2 <udd_ep_run+0x14e>
    4db6:	c7 01       	movw	r24, r14
    4db8:	88 0f       	add	r24, r24
    4dba:	99 1f       	adc	r25, r25
    4dbc:	88 0f       	add	r24, r24
    4dbe:	99 1f       	adc	r25, r25
    4dc0:	88 0f       	add	r24, r24
    4dc2:	99 1f       	adc	r25, r25
    4dc4:	8c 55       	subi	r24, 0x5C	; 92
    4dc6:	9d 4d       	sbci	r25, 0xDD	; 221
    4dc8:	88 db       	rcall	.-2288   	; 0x44da <udd_ep_get_size>
    4dca:	bc 01       	movw	r22, r24
    4dcc:	c5 01       	movw	r24, r10
    4dce:	0e 94 9c 3a 	call	0x7538	; 0x7538 <__udivmodhi4>
    4dd2:	89 2b       	or	r24, r25
    4dd4:	31 f0       	breq	.+12     	; 0x4de2 <udd_ep_run+0x14e>
    4dd6:	f6 01       	movw	r30, r12
    4dd8:	80 81       	ld	r24, Z
    4dda:	8e 7f       	andi	r24, 0xFE	; 254
    4ddc:	80 83       	st	Z, r24
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	14 c0       	rjmp	.+40     	; 0x4e0a <udd_ep_run+0x176>
    4de2:	f7 01       	movw	r30, r14
    4de4:	ee 0f       	add	r30, r30
    4de6:	ff 1f       	adc	r31, r31
    4de8:	ee 0f       	add	r30, r30
    4dea:	ff 1f       	adc	r31, r31
    4dec:	ee 0f       	add	r30, r30
    4dee:	ff 1f       	adc	r31, r31
    4df0:	e8 56       	subi	r30, 0x68	; 104
    4df2:	fd 4d       	sbci	r31, 0xDD	; 221
    4df4:	16 86       	std	Z+14, r1	; 0x0e
    4df6:	17 86       	std	Z+15, r1	; 0x0f
    4df8:	12 8a       	std	Z+18, r1	; 0x12
    4dfa:	13 8a       	std	Z+19, r1	; 0x13
    4dfc:	87 2d       	mov	r24, r7
    4dfe:	23 dc       	rcall	.-1978   	; 0x4646 <udd_ep_trans_complet>
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	03 c0       	rjmp	.+6      	; 0x4e0a <udd_ep_run+0x176>
    4e04:	80 e0       	ldi	r24, 0x00	; 0
    4e06:	01 c0       	rjmp	.+2      	; 0x4e0a <udd_ep_run+0x176>
    4e08:	80 e0       	ldi	r24, 0x00	; 0
    4e0a:	0f 90       	pop	r0
    4e0c:	df 91       	pop	r29
    4e0e:	cf 91       	pop	r28
    4e10:	1f 91       	pop	r17
    4e12:	0f 91       	pop	r16
    4e14:	ff 90       	pop	r15
    4e16:	ef 90       	pop	r14
    4e18:	df 90       	pop	r13
    4e1a:	cf 90       	pop	r12
    4e1c:	bf 90       	pop	r11
    4e1e:	af 90       	pop	r10
    4e20:	9f 90       	pop	r9
    4e22:	8f 90       	pop	r8
    4e24:	7f 90       	pop	r7
    4e26:	6f 90       	pop	r6
    4e28:	08 95       	ret

00004e2a <udd_ep_abort>:
    4e2a:	ff 92       	push	r15
    4e2c:	0f 93       	push	r16
    4e2e:	1f 93       	push	r17
    4e30:	cf 93       	push	r28
    4e32:	df 93       	push	r29
    4e34:	18 2f       	mov	r17, r24
    4e36:	c8 2f       	mov	r28, r24
    4e38:	cf 70       	andi	r28, 0x0F	; 15
    4e3a:	d0 e0       	ldi	r29, 0x00	; 0
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	88 0f       	add	r24, r24
    4e40:	99 1f       	adc	r25, r25
    4e42:	c1 2f       	mov	r28, r17
    4e44:	01 2e       	mov	r0, r17
    4e46:	00 0c       	add	r0, r0
    4e48:	dd 0b       	sbc	r29, r29
    4e4a:	cc 27       	eor	r28, r28
    4e4c:	dd 0f       	add	r29, r29
    4e4e:	cc 1f       	adc	r28, r28
    4e50:	dd 27       	eor	r29, r29
    4e52:	c8 0f       	add	r28, r24
    4e54:	d9 1f       	adc	r29, r25
    4e56:	81 2f       	mov	r24, r17
    4e58:	69 db       	rcall	.-2350   	; 0x452c <udd_ep_get_job>
    4e5a:	dc 01       	movw	r26, r24
    4e5c:	fe 01       	movw	r30, r28
    4e5e:	ee 0f       	add	r30, r30
    4e60:	ff 1f       	adc	r31, r31
    4e62:	ee 0f       	add	r30, r30
    4e64:	ff 1f       	adc	r31, r31
    4e66:	ee 0f       	add	r30, r30
    4e68:	ff 1f       	adc	r31, r31
    4e6a:	ec 55       	subi	r30, 0x5C	; 92
    4e6c:	fd 4d       	sbci	r31, 0xDD	; 221
    4e6e:	02 e0       	ldi	r16, 0x02	; 2
    4e70:	05 93       	las	Z, r16
    4e72:	8c 91       	ld	r24, X
    4e74:	80 ff       	sbrs	r24, 0
    4e76:	22 c0       	rjmp	.+68     	; 0x4ebc <udd_ep_abort+0x92>
    4e78:	8e 7f       	andi	r24, 0xFE	; 254
    4e7a:	8c 93       	st	X, r24
    4e7c:	17 96       	adiw	r26, 0x07	; 7
    4e7e:	ed 91       	ld	r30, X+
    4e80:	fc 91       	ld	r31, X
    4e82:	18 97       	sbiw	r26, 0x08	; 8
    4e84:	30 97       	sbiw	r30, 0x00	; 0
    4e86:	d1 f0       	breq	.+52     	; 0x4ebc <udd_ep_abort+0x92>
    4e88:	11 23       	and	r17, r17
    4e8a:	5c f4       	brge	.+22     	; 0x4ea2 <udd_ep_abort+0x78>
    4e8c:	cc 0f       	add	r28, r28
    4e8e:	dd 1f       	adc	r29, r29
    4e90:	cc 0f       	add	r28, r28
    4e92:	dd 1f       	adc	r29, r29
    4e94:	cc 0f       	add	r28, r28
    4e96:	dd 1f       	adc	r29, r29
    4e98:	c8 56       	subi	r28, 0x68	; 104
    4e9a:	dd 4d       	sbci	r29, 0xDD	; 221
    4e9c:	6a 89       	ldd	r22, Y+18	; 0x12
    4e9e:	7b 89       	ldd	r23, Y+19	; 0x13
    4ea0:	0a c0       	rjmp	.+20     	; 0x4eb6 <udd_ep_abort+0x8c>
    4ea2:	cc 0f       	add	r28, r28
    4ea4:	dd 1f       	adc	r29, r29
    4ea6:	cc 0f       	add	r28, r28
    4ea8:	dd 1f       	adc	r29, r29
    4eaa:	cc 0f       	add	r28, r28
    4eac:	dd 1f       	adc	r29, r29
    4eae:	c8 56       	subi	r28, 0x68	; 104
    4eb0:	dd 4d       	sbci	r29, 0xDD	; 221
    4eb2:	6e 85       	ldd	r22, Y+14	; 0x0e
    4eb4:	7f 85       	ldd	r23, Y+15	; 0x0f
    4eb6:	41 2f       	mov	r20, r17
    4eb8:	81 e0       	ldi	r24, 0x01	; 1
    4eba:	19 95       	eicall
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	1f 91       	pop	r17
    4ec2:	0f 91       	pop	r16
    4ec4:	ff 90       	pop	r15
    4ec6:	08 95       	ret

00004ec8 <udd_ep_free>:
    4ec8:	cf 93       	push	r28
    4eca:	c8 2f       	mov	r28, r24
    4ecc:	ae df       	rcall	.-164    	; 0x4e2a <udd_ep_abort>
    4ece:	ec 2f       	mov	r30, r28
    4ed0:	ef 70       	andi	r30, 0x0F	; 15
    4ed2:	f0 e0       	ldi	r31, 0x00	; 0
    4ed4:	ee 0f       	add	r30, r30
    4ed6:	ff 1f       	adc	r31, r31
    4ed8:	8c 2f       	mov	r24, r28
    4eda:	cc 0f       	add	r28, r28
    4edc:	99 0b       	sbc	r25, r25
    4ede:	88 27       	eor	r24, r24
    4ee0:	99 0f       	add	r25, r25
    4ee2:	88 1f       	adc	r24, r24
    4ee4:	99 27       	eor	r25, r25
    4ee6:	e8 0f       	add	r30, r24
    4ee8:	f9 1f       	adc	r31, r25
    4eea:	ee 0f       	add	r30, r30
    4eec:	ff 1f       	adc	r31, r31
    4eee:	ee 0f       	add	r30, r30
    4ef0:	ff 1f       	adc	r31, r31
    4ef2:	ee 0f       	add	r30, r30
    4ef4:	ff 1f       	adc	r31, r31
    4ef6:	e8 56       	subi	r30, 0x68	; 104
    4ef8:	fd 4d       	sbci	r31, 0xDD	; 221
    4efa:	15 86       	std	Z+13, r1	; 0x0d
    4efc:	cf 91       	pop	r28
    4efe:	08 95       	ret

00004f00 <udd_ep_set_halt>:
    4f00:	e8 2f       	mov	r30, r24
    4f02:	ef 70       	andi	r30, 0x0F	; 15
    4f04:	f0 e0       	ldi	r31, 0x00	; 0
    4f06:	ee 0f       	add	r30, r30
    4f08:	ff 1f       	adc	r31, r31
    4f0a:	28 2f       	mov	r18, r24
    4f0c:	08 2e       	mov	r0, r24
    4f0e:	00 0c       	add	r0, r0
    4f10:	33 0b       	sbc	r19, r19
    4f12:	22 27       	eor	r18, r18
    4f14:	33 0f       	add	r19, r19
    4f16:	22 1f       	adc	r18, r18
    4f18:	33 27       	eor	r19, r19
    4f1a:	e2 0f       	add	r30, r18
    4f1c:	f3 1f       	adc	r31, r19
    4f1e:	ee 0f       	add	r30, r30
    4f20:	ff 1f       	adc	r31, r31
    4f22:	ee 0f       	add	r30, r30
    4f24:	ff 1f       	adc	r31, r31
    4f26:	ee 0f       	add	r30, r30
    4f28:	ff 1f       	adc	r31, r31
    4f2a:	e8 56       	subi	r30, 0x68	; 104
    4f2c:	fd 4d       	sbci	r31, 0xDD	; 221
    4f2e:	95 85       	ldd	r25, Z+13	; 0x0d
    4f30:	94 60       	ori	r25, 0x04	; 4
    4f32:	95 87       	std	Z+13, r25	; 0x0d
    4f34:	7a df       	rcall	.-268    	; 0x4e2a <udd_ep_abort>
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	08 95       	ret

00004f3a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    4f3a:	1f 92       	push	r1
    4f3c:	0f 92       	push	r0
    4f3e:	0f b6       	in	r0, 0x3f	; 63
    4f40:	0f 92       	push	r0
    4f42:	11 24       	eor	r1, r1
    4f44:	0b b6       	in	r0, 0x3b	; 59
    4f46:	0f 92       	push	r0
    4f48:	0f 93       	push	r16
    4f4a:	2f 93       	push	r18
    4f4c:	3f 93       	push	r19
    4f4e:	4f 93       	push	r20
    4f50:	5f 93       	push	r21
    4f52:	6f 93       	push	r22
    4f54:	7f 93       	push	r23
    4f56:	8f 93       	push	r24
    4f58:	9f 93       	push	r25
    4f5a:	af 93       	push	r26
    4f5c:	bf 93       	push	r27
    4f5e:	ef 93       	push	r30
    4f60:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    4f62:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    4f66:	88 23       	and	r24, r24
    4f68:	34 f4       	brge	.+12     	; 0x4f76 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    4f6a:	80 e8       	ldi	r24, 0x80	; 128
    4f6c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    4f70:	0e 94 3c 37 	call	0x6e78	; 0x6e78 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    4f74:	88 c0       	rjmp	.+272    	; 0x5086 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    4f76:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    4f7a:	82 ff       	sbrs	r24, 2
    4f7c:	20 c0       	rjmp	.+64     	; 0x4fbe <__vector_125+0x84>
		udd_ack_underflow_event();
    4f7e:	84 e0       	ldi	r24, 0x04	; 4
    4f80:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    4f84:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <udd_sram+0x14>
    4f88:	86 ff       	sbrs	r24, 6
    4f8a:	7d c0       	rjmp	.+250    	; 0x5086 <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    4f8c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    4f90:	81 fd       	sbrc	r24, 1
    4f92:	79 c0       	rjmp	.+242    	; 0x5086 <__vector_125+0x14c>
    4f94:	e6 da       	rcall	.-2612   	; 0x4562 <udd_ctrl_interrupt_tc_setup>
    4f96:	81 11       	cpse	r24, r1
    4f98:	76 c0       	rjmp	.+236    	; 0x5086 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    4f9a:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <udd_ep_control_state>
    4f9e:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    4fa0:	11 f4       	brne	.+4      	; 0x4fa6 <__vector_125+0x6c>
    4fa2:	19 da       	rcall	.-3022   	; 0x43d6 <udd_ctrl_send_zlp_in>
    4fa4:	70 c0       	rjmp	.+224    	; 0x5086 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    4fa6:	84 30       	cpi	r24, 0x04	; 4
    4fa8:	09 f0       	breq	.+2      	; 0x4fac <__vector_125+0x72>
    4faa:	6d c0       	rjmp	.+218    	; 0x5086 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    4fac:	ed ea       	ldi	r30, 0xAD	; 173
    4fae:	f2 e2       	ldi	r31, 0x22	; 34
    4fb0:	04 e0       	ldi	r16, 0x04	; 4
    4fb2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    4fb4:	e5 ea       	ldi	r30, 0xA5	; 165
    4fb6:	f2 e2       	ldi	r31, 0x22	; 34
    4fb8:	04 e0       	ldi	r16, 0x04	; 4
    4fba:	05 93       	las	Z, r16
    4fbc:	64 c0       	rjmp	.+200    	; 0x5086 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    4fbe:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    4fc2:	81 ff       	sbrs	r24, 1
    4fc4:	5b c0       	rjmp	.+182    	; 0x507c <__vector_125+0x142>
		udd_ack_overflow_event();
    4fc6:	82 e0       	ldi	r24, 0x02	; 2
    4fc8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    4fcc:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <udd_sram+0xc>
    4fd0:	86 ff       	sbrs	r24, 6
    4fd2:	59 c0       	rjmp	.+178    	; 0x5086 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    4fd4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    4fd8:	81 fd       	sbrc	r24, 1
    4fda:	55 c0       	rjmp	.+170    	; 0x5086 <__vector_125+0x14c>
    4fdc:	c2 da       	rcall	.-2684   	; 0x4562 <udd_ctrl_interrupt_tc_setup>
    4fde:	81 11       	cpse	r24, r1
    4fe0:	52 c0       	rjmp	.+164    	; 0x5086 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    4fe2:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <udd_ep_control_state>
    4fe6:	82 30       	cpi	r24, 0x02	; 2
    4fe8:	41 f4       	brne	.+16     	; 0x4ffa <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    4fea:	84 e0       	ldi	r24, 0x04	; 4
    4fec:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    4ff0:	e4 ea       	ldi	r30, 0xA4	; 164
    4ff2:	f2 e2       	ldi	r31, 0x22	; 34
    4ff4:	02 e0       	ldi	r16, 0x02	; 2
    4ff6:	06 93       	lac	Z, r16
    4ff8:	46 c0       	rjmp	.+140    	; 0x5086 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    4ffa:	83 30       	cpi	r24, 0x03	; 3
    4ffc:	09 f0       	breq	.+2      	; 0x5000 <__vector_125+0xc6>
    4ffe:	43 c0       	rjmp	.+134    	; 0x5086 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    5000:	ed ea       	ldi	r30, 0xAD	; 173
    5002:	f2 e2       	ldi	r31, 0x22	; 34
    5004:	04 e0       	ldi	r16, 0x04	; 4
    5006:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5008:	e5 ea       	ldi	r30, 0xA5	; 165
    500a:	f2 e2       	ldi	r31, 0x22	; 34
    500c:	04 e0       	ldi	r16, 0x04	; 4
    500e:	05 93       	las	Z, r16
    5010:	3a c0       	rjmp	.+116    	; 0x5086 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    5012:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    5014:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5018:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    501a:	07 df       	rcall	.-498    	; 0x4e2a <udd_ep_abort>
    501c:	81 e8       	ldi	r24, 0x81	; 129
    501e:	05 df       	rcall	.-502    	; 0x4e2a <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5020:	82 e0       	ldi	r24, 0x02	; 2
    5022:	03 df       	rcall	.-506    	; 0x4e2a <udd_ep_abort>
    5024:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    5026:	01 df       	rcall	.-510    	; 0x4e2a <udd_ep_abort>
    5028:	0e 94 12 37 	call	0x6e24	; 0x6e24 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    502c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    5030:	e8 e9       	ldi	r30, 0x98	; 152
    5032:	f2 e2       	ldi	r31, 0x22	; 34
	udd_endpoint_clear_status(ep_ctrl);
    5034:	15 86       	std	Z+13, r1	; 0x0d
    5036:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5038:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    503a:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    503c:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    503e:	15 8a       	std	Z+21, r1	; 0x15
    5040:	94 8b       	std	Z+20, r25	; 0x14
    5042:	85 8b       	std	Z+21, r24	; 0x15
    5044:	80 e5       	ldi	r24, 0x50	; 80
		// Reset endpoint control management
		udd_ctrl_init();
    5046:	92 e2       	ldi	r25, 0x22	; 34
    5048:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    504a:	91 8b       	std	Z+17, r25	; 0x11
    504c:	91 d9       	rcall	.-3294   	; 0x4370 <udd_ctrl_init>
		udd_ack_suspend_event();
    504e:	1b c0       	rjmp	.+54     	; 0x5086 <__vector_125+0x14c>
    5050:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    5054:	86 ff       	sbrs	r24, 6
    5056:	07 c0       	rjmp	.+14     	; 0x5066 <__vector_125+0x12c>
    5058:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    505a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	4f d9       	rcall	.-3426   	; 0x4300 <udd_sleep_mode>
		udd_ack_resume_event();
    5062:	f1 d5       	rcall	.+3042   	; 0x5c46 <usb_callback_suspend_action>
    5064:	10 c0       	rjmp	.+32     	; 0x5086 <__vector_125+0x14c>
    5066:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    506a:	85 ff       	sbrs	r24, 5
    506c:	0c c0       	rjmp	.+24     	; 0x5086 <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    506e:	80 e2       	ldi	r24, 0x20	; 32
    5070:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    5074:	81 e0       	ldi	r24, 0x01	; 1
    5076:	44 d9       	rcall	.-3448   	; 0x4300 <udd_sleep_mode>
    5078:	e7 d5       	rcall	.+3022   	; 0x5c48 <usb_callback_resume_action>
    507a:	05 c0       	rjmp	.+10     	; 0x5086 <__vector_125+0x14c>
    507c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    5080:	84 fd       	sbrc	r24, 4
    5082:	c7 cf       	rjmp	.-114    	; 0x5012 <__vector_125+0xd8>
    5084:	e5 cf       	rjmp	.-54     	; 0x5050 <__vector_125+0x116>
    5086:	ff 91       	pop	r31
    5088:	ef 91       	pop	r30
    508a:	bf 91       	pop	r27
    508c:	af 91       	pop	r26
    508e:	9f 91       	pop	r25
    5090:	8f 91       	pop	r24
    5092:	7f 91       	pop	r23
    5094:	6f 91       	pop	r22
    5096:	5f 91       	pop	r21
    5098:	4f 91       	pop	r20
    509a:	3f 91       	pop	r19
    509c:	2f 91       	pop	r18
    509e:	0f 91       	pop	r16
    50a0:	0f 90       	pop	r0
    50a2:	0b be       	out	0x3b, r0	; 59
    50a4:	0f 90       	pop	r0
    50a6:	0f be       	out	0x3f, r0	; 63
    50a8:	0f 90       	pop	r0
    50aa:	1f 90       	pop	r1
    50ac:	18 95       	reti

000050ae <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    50ae:	1f 92       	push	r1
    50b0:	0f 92       	push	r0
    50b2:	0f b6       	in	r0, 0x3f	; 63
    50b4:	0f 92       	push	r0
    50b6:	11 24       	eor	r1, r1
    50b8:	0b b6       	in	r0, 0x3b	; 59
    50ba:	0f 92       	push	r0
    50bc:	0f 93       	push	r16
    50be:	1f 93       	push	r17
    50c0:	2f 93       	push	r18
    50c2:	3f 93       	push	r19
    50c4:	4f 93       	push	r20
    50c6:	5f 93       	push	r21
    50c8:	6f 93       	push	r22
    50ca:	7f 93       	push	r23
    50cc:	8f 93       	push	r24
    50ce:	9f 93       	push	r25
    50d0:	af 93       	push	r26
    50d2:	bf 93       	push	r27
    50d4:	cf 93       	push	r28
    50d6:	df 93       	push	r29
    50d8:	ef 93       	push	r30
    50da:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    50dc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    50e0:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    50e2:	03 c0       	rjmp	.+6      	; 0x50ea <__vector_126+0x3c>
    50e4:	3e da       	rcall	.-2948   	; 0x4562 <udd_ctrl_interrupt_tc_setup>
    50e6:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    50e8:	c4 c0       	rjmp	.+392    	; 0x5272 <__vector_126+0x1c4>
    50ea:	82 e0       	ldi	r24, 0x02	; 2
    50ec:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    50f0:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    50f4:	81 95       	neg	r24
    50f6:	88 0f       	add	r24, r24
    50f8:	e4 ea       	ldi	r30, 0xA4	; 164
    50fa:	f2 e2       	ldi	r31, 0x22	; 34
    50fc:	e8 1b       	sub	r30, r24
    50fe:	f1 09       	sbc	r31, r1
    5100:	20 81       	ld	r18, Z
    5102:	31 81       	ldd	r19, Z+1	; 0x01
    5104:	24 5a       	subi	r18, 0xA4	; 164
    5106:	32 42       	sbci	r19, 0x22	; 34
    5108:	36 95       	lsr	r19
    510a:	27 95       	ror	r18
    510c:	36 95       	lsr	r19
    510e:	27 95       	ror	r18
    5110:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    5112:	27 95       	ror	r18
    5114:	82 2f       	mov	r24, r18
    5116:	86 95       	lsr	r24
    5118:	20 fd       	sbrc	r18, 0
    511a:	02 c0       	rjmp	.+4      	; 0x5120 <__vector_126+0x72>
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	01 c0       	rjmp	.+2      	; 0x5122 <__vector_126+0x74>
    5120:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    5122:	89 0f       	add	r24, r25
    5124:	e8 2f       	mov	r30, r24
    5126:	ef 70       	andi	r30, 0x0F	; 15
    5128:	f0 e0       	ldi	r31, 0x00	; 0
    512a:	ee 0f       	add	r30, r30
    512c:	ff 1f       	adc	r31, r31
    512e:	28 2f       	mov	r18, r24
    5130:	08 2e       	mov	r0, r24
    5132:	00 0c       	add	r0, r0
    5134:	33 0b       	sbc	r19, r19
    5136:	22 27       	eor	r18, r18
    5138:	33 0f       	add	r19, r19
    513a:	22 1f       	adc	r18, r18
    513c:	33 27       	eor	r19, r19
    513e:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    5140:	f3 1f       	adc	r31, r19
    5142:	df 01       	movw	r26, r30
    5144:	aa 0f       	add	r26, r26
    5146:	bb 1f       	adc	r27, r27
    5148:	aa 0f       	add	r26, r26
    514a:	bb 1f       	adc	r27, r27
    514c:	aa 0f       	add	r26, r26
    514e:	bb 1f       	adc	r27, r27
    5150:	a8 56       	subi	r26, 0x68	; 104
    5152:	bd 4d       	sbci	r27, 0xDD	; 221
    5154:	1c 96       	adiw	r26, 0x0c	; 12
    5156:	9c 91       	ld	r25, X
    5158:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    515a:	8b c0       	rjmp	.+278    	; 0x5272 <__vector_126+0x1c4>
    515c:	ee 0f       	add	r30, r30
    515e:	ff 1f       	adc	r31, r31
    5160:	ee 0f       	add	r30, r30
    5162:	ff 1f       	adc	r31, r31
    5164:	ee 0f       	add	r30, r30
    5166:	ff 1f       	adc	r31, r31
    5168:	ec 55       	subi	r30, 0x5C	; 92
    516a:	fd 4d       	sbci	r31, 0xDD	; 221
    516c:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    516e:	06 93       	lac	Z, r16
    5170:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    5172:	7a c0       	rjmp	.+244    	; 0x5268 <__vector_126+0x1ba>
    5174:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    5178:	84 30       	cpi	r24, 0x04	; 4
    517a:	19 f4       	brne	.+6      	; 0x5182 <__vector_126+0xd4>
    517c:	3a d9       	rcall	.-3468   	; 0x43f2 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    517e:	f8 d8       	rcall	.-3600   	; 0x4370 <udd_ctrl_init>
    5180:	78 c0       	rjmp	.+240    	; 0x5272 <__vector_126+0x1c4>
    5182:	00 91 a6 22 	lds	r16, 0x22A6	; 0x8022a6 <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    5186:	10 91 a7 22 	lds	r17, 0x22A7	; 0x8022a7 <udd_sram+0xf>
    518a:	80 91 cf 25 	lds	r24, 0x25CF	; 0x8025cf <udd_g_ctrlreq+0xa>
    518e:	90 91 d0 25 	lds	r25, 0x25D0	; 0x8025d0 <udd_g_ctrlreq+0xb>
    5192:	c0 91 90 22 	lds	r28, 0x2290	; 0x802290 <udd_ctrl_payload_nb_trans>
    5196:	d0 91 91 22 	lds	r29, 0x2291	; 0x802291 <udd_ctrl_payload_nb_trans+0x1>
    519a:	98 01       	movw	r18, r16
    519c:	2c 0f       	add	r18, r28
    519e:	3d 1f       	adc	r19, r29
    51a0:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    51a2:	93 07       	cpc	r25, r19
    51a4:	18 f4       	brcc	.+6      	; 0x51ac <__vector_126+0xfe>
    51a6:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    51a8:	0c 1b       	sub	r16, r28
    51aa:	1d 0b       	sbc	r17, r29
    51ac:	80 91 cd 25 	lds	r24, 0x25CD	; 0x8025cd <udd_g_ctrlreq+0x8>
    51b0:	90 91 ce 25 	lds	r25, 0x25CE	; 0x8025ce <udd_g_ctrlreq+0x9>
    51b4:	a8 01       	movw	r20, r16
    51b6:	60 e5       	ldi	r22, 0x50	; 80
    51b8:	72 e2       	ldi	r23, 0x22	; 34
    51ba:	8c 0f       	add	r24, r28
    51bc:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    51be:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <memcpy>
    51c2:	c0 0f       	add	r28, r16
    51c4:	d1 1f       	adc	r29, r17
    51c6:	c0 93 90 22 	sts	0x2290, r28	; 0x802290 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    51ca:	d0 93 91 22 	sts	0x2291, r29	; 0x802291 <udd_ctrl_payload_nb_trans+0x1>
    51ce:	00 34       	cpi	r16, 0x40	; 64
    51d0:	11 05       	cpc	r17, r1
    51d2:	69 f4       	brne	.+26     	; 0x51ee <__vector_126+0x140>
    51d4:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <udd_ctrl_prev_payload_nb_trans>
    51d8:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <udd_ctrl_prev_payload_nb_trans+0x1>
    51dc:	8c 0f       	add	r24, r28
    51de:	9d 1f       	adc	r25, r29
    51e0:	20 91 cb 25 	lds	r18, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    51e4:	30 91 cc 25 	lds	r19, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    51e8:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    51ea:	93 07       	cpc	r25, r19
    51ec:	80 f0       	brcs	.+32     	; 0x520e <__vector_126+0x160>
    51ee:	e5 ec       	ldi	r30, 0xC5	; 197
    51f0:	f5 e2       	ldi	r31, 0x25	; 37
		if (NULL != udd_g_ctrlreq.over_under_run) {
    51f2:	c2 87       	std	Z+10, r28	; 0x0a
    51f4:	d3 87       	std	Z+11, r29	; 0x0b
    51f6:	06 84       	ldd	r0, Z+14	; 0x0e
    51f8:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    51fa:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    51fc:	30 97       	sbiw	r30, 0x00	; 0
    51fe:	29 f0       	breq	.+10     	; 0x520a <__vector_126+0x15c>
    5200:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    5202:	81 11       	cpse	r24, r1
    5204:	02 c0       	rjmp	.+4      	; 0x520a <__vector_126+0x15c>
    5206:	d9 d8       	rcall	.-3662   	; 0x43ba <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    5208:	34 c0       	rjmp	.+104    	; 0x5272 <__vector_126+0x1c4>
    520a:	e5 d8       	rcall	.-3638   	; 0x43d6 <udd_ctrl_send_zlp_in>
    520c:	32 c0       	rjmp	.+100    	; 0x5272 <__vector_126+0x1c4>
    520e:	80 91 cf 25 	lds	r24, 0x25CF	; 0x8025cf <udd_g_ctrlreq+0xa>
    5212:	90 91 d0 25 	lds	r25, 0x25D0	; 0x8025d0 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    5216:	c8 17       	cp	r28, r24
    5218:	d9 07       	cpc	r29, r25
    521a:	f9 f4       	brne	.+62     	; 0x525a <__vector_126+0x1ac>
    521c:	e0 91 d3 25 	lds	r30, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    5220:	f0 91 d4 25 	lds	r31, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    5224:	30 97       	sbiw	r30, 0x00	; 0
    5226:	11 f4       	brne	.+4      	; 0x522c <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    5228:	c8 d8       	rcall	.-3696   	; 0x43ba <udd_ctrl_stall_data>
    522a:	23 c0       	rjmp	.+70     	; 0x5272 <__vector_126+0x1c4>
    522c:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    522e:	81 11       	cpse	r24, r1
    5230:	02 c0       	rjmp	.+4      	; 0x5236 <__vector_126+0x188>
    5232:	c3 d8       	rcall	.-3706   	; 0x43ba <udd_ctrl_stall_data>
    5234:	1e c0       	rjmp	.+60     	; 0x5272 <__vector_126+0x1c4>
    5236:	20 91 92 22 	lds	r18, 0x2292	; 0x802292 <udd_ctrl_prev_payload_nb_trans>
    523a:	30 91 93 22 	lds	r19, 0x2293	; 0x802293 <udd_ctrl_prev_payload_nb_trans+0x1>
    523e:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <udd_ctrl_payload_nb_trans>
    5242:	90 91 91 22 	lds	r25, 0x2291	; 0x802291 <udd_ctrl_payload_nb_trans+0x1>
    5246:	82 0f       	add	r24, r18
    5248:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    524a:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <udd_ctrl_prev_payload_nb_trans>
    524e:	90 93 93 22 	sts	0x2293, r25	; 0x802293 <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    5252:	10 92 90 22 	sts	0x2290, r1	; 0x802290 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    5256:	10 92 91 22 	sts	0x2291, r1	; 0x802291 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    525a:	e4 ea       	ldi	r30, 0xA4	; 164
    525c:	f2 e2       	ldi	r31, 0x22	; 34
		udd_ctrl_in_sent();
    525e:	02 e0       	ldi	r16, 0x02	; 2
    5260:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    5262:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    5264:	06 93       	lac	Z, r16
    5266:	05 c0       	rjmp	.+10     	; 0x5272 <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    5268:	80 38       	cpi	r24, 0x80	; 128
    526a:	11 f4       	brne	.+4      	; 0x5270 <__vector_126+0x1c2>
    526c:	ca d8       	rcall	.-3692   	; 0x4402 <udd_ctrl_in_sent>
    526e:	01 c0       	rjmp	.+2      	; 0x5272 <__vector_126+0x1c4>
    5270:	ea d9       	rcall	.-3116   	; 0x4646 <udd_ep_trans_complet>
    5272:	ff 91       	pop	r31
    5274:	ef 91       	pop	r30
    5276:	df 91       	pop	r29
    5278:	cf 91       	pop	r28
    527a:	bf 91       	pop	r27
    527c:	af 91       	pop	r26
    527e:	9f 91       	pop	r25
    5280:	8f 91       	pop	r24
    5282:	7f 91       	pop	r23
    5284:	6f 91       	pop	r22
    5286:	5f 91       	pop	r21
    5288:	4f 91       	pop	r20
    528a:	3f 91       	pop	r19
    528c:	2f 91       	pop	r18
    528e:	1f 91       	pop	r17
    5290:	0f 91       	pop	r16
    5292:	0f 90       	pop	r0
    5294:	0b be       	out	0x3b, r0	; 59
    5296:	0f 90       	pop	r0
    5298:	0f be       	out	0x3f, r0	; 63
    529a:	0f 90       	pop	r0
    529c:	1f 90       	pop	r1
    529e:	18 95       	reti

000052a0 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    52a0:	cf 92       	push	r12
    52a2:	df 92       	push	r13
    52a4:	ef 92       	push	r14
    52a6:	ff 92       	push	r15
    52a8:	cf 93       	push	r28
    52aa:	df 93       	push	r29
    52ac:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    52ae:	6b 01       	movw	r12, r22
    52b0:	e1 2c       	mov	r14, r1
    52b2:	f1 2c       	mov	r15, r1
    52b4:	60 e8       	ldi	r22, 0x80	; 128
    52b6:	73 ec       	ldi	r23, 0xC3	; 195
    52b8:	89 ec       	ldi	r24, 0xC9	; 201
    52ba:	91 e0       	ldi	r25, 0x01	; 1
    52bc:	a7 01       	movw	r20, r14
    52be:	96 01       	movw	r18, r12
    52c0:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__udivmodsi4>
    52c4:	ca 01       	movw	r24, r20
    52c6:	b9 01       	movw	r22, r18
    52c8:	2f ef       	ldi	r18, 0xFF	; 255
    52ca:	3f ef       	ldi	r19, 0xFF	; 255
    52cc:	40 e0       	ldi	r20, 0x00	; 0
    52ce:	50 e0       	ldi	r21, 0x00	; 0
    52d0:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__udivmodsi4>
	if (smallest_div < 1) {
    52d4:	21 15       	cp	r18, r1
    52d6:	31 05       	cpc	r19, r1
    52d8:	29 f4       	brne	.+10     	; 0x52e4 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    52da:	81 e0       	ldi	r24, 0x01	; 1
    52dc:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    52de:	21 e0       	ldi	r18, 0x01	; 1
    52e0:	30 e0       	ldi	r19, 0x00	; 0
    52e2:	2d c0       	rjmp	.+90     	; 0x533e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    52e4:	22 30       	cpi	r18, 0x02	; 2
    52e6:	31 05       	cpc	r19, r1
    52e8:	28 f4       	brcc	.+10     	; 0x52f4 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    52ea:	82 e0       	ldi	r24, 0x02	; 2
    52ec:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    52ee:	22 e0       	ldi	r18, 0x02	; 2
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	25 c0       	rjmp	.+74     	; 0x533e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    52f4:	24 30       	cpi	r18, 0x04	; 4
    52f6:	31 05       	cpc	r19, r1
    52f8:	28 f4       	brcc	.+10     	; 0x5304 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    52fa:	83 e0       	ldi	r24, 0x03	; 3
    52fc:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    52fe:	24 e0       	ldi	r18, 0x04	; 4
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	1d c0       	rjmp	.+58     	; 0x533e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    5304:	28 30       	cpi	r18, 0x08	; 8
    5306:	31 05       	cpc	r19, r1
    5308:	28 f4       	brcc	.+10     	; 0x5314 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    530a:	84 e0       	ldi	r24, 0x04	; 4
    530c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    530e:	28 e0       	ldi	r18, 0x08	; 8
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	15 c0       	rjmp	.+42     	; 0x533e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    5314:	20 34       	cpi	r18, 0x40	; 64
    5316:	31 05       	cpc	r19, r1
    5318:	28 f4       	brcc	.+10     	; 0x5324 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    531a:	85 e0       	ldi	r24, 0x05	; 5
    531c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    531e:	20 e4       	ldi	r18, 0x40	; 64
    5320:	30 e0       	ldi	r19, 0x00	; 0
    5322:	0d c0       	rjmp	.+26     	; 0x533e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    5324:	2f 3f       	cpi	r18, 0xFF	; 255
    5326:	31 05       	cpc	r19, r1
    5328:	09 f0       	breq	.+2      	; 0x532c <pwm_set_frequency+0x8c>
    532a:	28 f4       	brcc	.+10     	; 0x5336 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    532c:	86 e0       	ldi	r24, 0x06	; 6
    532e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    5330:	20 e0       	ldi	r18, 0x00	; 0
    5332:	31 e0       	ldi	r19, 0x01	; 1
    5334:	04 c0       	rjmp	.+8      	; 0x533e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    5336:	87 e0       	ldi	r24, 0x07	; 7
    5338:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    533e:	40 e0       	ldi	r20, 0x00	; 0
    5340:	50 e0       	ldi	r21, 0x00	; 0
    5342:	60 e8       	ldi	r22, 0x80	; 128
    5344:	73 ec       	ldi	r23, 0xC3	; 195
    5346:	89 ec       	ldi	r24, 0xC9	; 201
    5348:	91 e0       	ldi	r25, 0x01	; 1
    534a:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__udivmodsi4>
    534e:	ca 01       	movw	r24, r20
    5350:	b9 01       	movw	r22, r18
    5352:	a7 01       	movw	r20, r14
    5354:	96 01       	movw	r18, r12
    5356:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__udivmodsi4>
    535a:	2d 83       	std	Y+5, r18	; 0x05
    535c:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    535e:	24 36       	cpi	r18, 0x64	; 100
    5360:	31 05       	cpc	r19, r1
    5362:	18 f4       	brcc	.+6      	; 0x536a <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    5364:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    5366:	1d 82       	std	Y+5, r1	; 0x05
    5368:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    536a:	df 91       	pop	r29
    536c:	cf 91       	pop	r28
    536e:	ff 90       	pop	r15
    5370:	ef 90       	pop	r14
    5372:	df 90       	pop	r13
    5374:	cf 90       	pop	r12
    5376:	08 95       	ret

00005378 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    5378:	0f 93       	push	r16
    537a:	1f 93       	push	r17
    537c:	cf 93       	push	r28
    537e:	df 93       	push	r29
    5380:	ec 01       	movw	r28, r24
    5382:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    5384:	86 2f       	mov	r24, r22
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	87 30       	cpi	r24, 0x07	; 7
    538a:	91 05       	cpc	r25, r1
    538c:	08 f0       	brcs	.+2      	; 0x5390 <pwm_init+0x18>
    538e:	8b c0       	rjmp	.+278    	; 0x54a6 <pwm_init+0x12e>
    5390:	fc 01       	movw	r30, r24
    5392:	88 27       	eor	r24, r24
    5394:	eb 5f       	subi	r30, 0xFB	; 251
    5396:	fe 4f       	sbci	r31, 0xFE	; 254
    5398:	8f 4f       	sbci	r24, 0xFF	; 255
    539a:	0c 94 d2 3a 	jmp	0x75a4	; 0x75a4 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    539e:	80 e0       	ldi	r24, 0x00	; 0
    53a0:	98 e0       	ldi	r25, 0x08	; 8
    53a2:	88 83       	st	Y, r24
    53a4:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    53a6:	e0 e4       	ldi	r30, 0x40	; 64
    53a8:	f6 e0       	ldi	r31, 0x06	; 6
    53aa:	30 81       	ld	r19, Z
    53ac:	81 e0       	ldi	r24, 0x01	; 1
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	2f ef       	ldi	r18, 0xFF	; 255
    53b2:	24 0f       	add	r18, r20
    53b4:	02 c0       	rjmp	.+4      	; 0x53ba <pwm_init+0x42>
    53b6:	88 0f       	add	r24, r24
    53b8:	99 1f       	adc	r25, r25
    53ba:	2a 95       	dec	r18
    53bc:	e2 f7       	brpl	.-8      	; 0x53b6 <pwm_init+0x3e>
    53be:	83 2b       	or	r24, r19
    53c0:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    53c2:	71 c0       	rjmp	.+226    	; 0x54a6 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    53c4:	80 e4       	ldi	r24, 0x40	; 64
    53c6:	98 e0       	ldi	r25, 0x08	; 8
    53c8:	88 83       	st	Y, r24
    53ca:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    53cc:	e0 e4       	ldi	r30, 0x40	; 64
    53ce:	f6 e0       	ldi	r31, 0x06	; 6
    53d0:	30 81       	ld	r19, Z
    53d2:	81 e0       	ldi	r24, 0x01	; 1
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	23 e0       	ldi	r18, 0x03	; 3
    53d8:	24 0f       	add	r18, r20
    53da:	02 c0       	rjmp	.+4      	; 0x53e0 <pwm_init+0x68>
    53dc:	88 0f       	add	r24, r24
    53de:	99 1f       	adc	r25, r25
    53e0:	2a 95       	dec	r18
    53e2:	e2 f7       	brpl	.-8      	; 0x53dc <pwm_init+0x64>
    53e4:	83 2b       	or	r24, r19
    53e6:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    53e8:	5e c0       	rjmp	.+188    	; 0x54a6 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    53ea:	80 e0       	ldi	r24, 0x00	; 0
    53ec:	99 e0       	ldi	r25, 0x09	; 9
    53ee:	88 83       	st	Y, r24
    53f0:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    53f2:	e0 e6       	ldi	r30, 0x60	; 96
    53f4:	f6 e0       	ldi	r31, 0x06	; 6
    53f6:	30 81       	ld	r19, Z
    53f8:	81 e0       	ldi	r24, 0x01	; 1
    53fa:	90 e0       	ldi	r25, 0x00	; 0
    53fc:	2f ef       	ldi	r18, 0xFF	; 255
    53fe:	24 0f       	add	r18, r20
    5400:	02 c0       	rjmp	.+4      	; 0x5406 <pwm_init+0x8e>
    5402:	88 0f       	add	r24, r24
    5404:	99 1f       	adc	r25, r25
    5406:	2a 95       	dec	r18
    5408:	e2 f7       	brpl	.-8      	; 0x5402 <pwm_init+0x8a>
    540a:	83 2b       	or	r24, r19
    540c:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    540e:	4b c0       	rjmp	.+150    	; 0x54a6 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    5410:	80 e4       	ldi	r24, 0x40	; 64
    5412:	99 e0       	ldi	r25, 0x09	; 9
    5414:	88 83       	st	Y, r24
    5416:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    5418:	e0 e6       	ldi	r30, 0x60	; 96
    541a:	f6 e0       	ldi	r31, 0x06	; 6
    541c:	30 81       	ld	r19, Z
    541e:	81 e0       	ldi	r24, 0x01	; 1
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	23 e0       	ldi	r18, 0x03	; 3
    5424:	24 0f       	add	r18, r20
    5426:	02 c0       	rjmp	.+4      	; 0x542c <pwm_init+0xb4>
    5428:	88 0f       	add	r24, r24
    542a:	99 1f       	adc	r25, r25
    542c:	2a 95       	dec	r18
    542e:	e2 f7       	brpl	.-8      	; 0x5428 <pwm_init+0xb0>
    5430:	83 2b       	or	r24, r19
    5432:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    5434:	38 c0       	rjmp	.+112    	; 0x54a6 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	9a e0       	ldi	r25, 0x0A	; 10
    543a:	88 83       	st	Y, r24
    543c:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    543e:	e0 e8       	ldi	r30, 0x80	; 128
    5440:	f6 e0       	ldi	r31, 0x06	; 6
    5442:	30 81       	ld	r19, Z
    5444:	81 e0       	ldi	r24, 0x01	; 1
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	2f ef       	ldi	r18, 0xFF	; 255
    544a:	24 0f       	add	r18, r20
    544c:	02 c0       	rjmp	.+4      	; 0x5452 <pwm_init+0xda>
    544e:	88 0f       	add	r24, r24
    5450:	99 1f       	adc	r25, r25
    5452:	2a 95       	dec	r18
    5454:	e2 f7       	brpl	.-8      	; 0x544e <pwm_init+0xd6>
    5456:	83 2b       	or	r24, r19
    5458:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    545a:	25 c0       	rjmp	.+74     	; 0x54a6 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    545c:	80 e4       	ldi	r24, 0x40	; 64
    545e:	9a e0       	ldi	r25, 0x0A	; 10
    5460:	88 83       	st	Y, r24
    5462:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    5464:	e0 e8       	ldi	r30, 0x80	; 128
    5466:	f6 e0       	ldi	r31, 0x06	; 6
    5468:	30 81       	ld	r19, Z
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	23 e0       	ldi	r18, 0x03	; 3
    5470:	24 0f       	add	r18, r20
    5472:	02 c0       	rjmp	.+4      	; 0x5478 <pwm_init+0x100>
    5474:	88 0f       	add	r24, r24
    5476:	99 1f       	adc	r25, r25
    5478:	2a 95       	dec	r18
    547a:	e2 f7       	brpl	.-8      	; 0x5474 <pwm_init+0xfc>
    547c:	83 2b       	or	r24, r19
    547e:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    5480:	12 c0       	rjmp	.+36     	; 0x54a6 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    5482:	80 e0       	ldi	r24, 0x00	; 0
    5484:	9b e0       	ldi	r25, 0x0B	; 11
    5486:	88 83       	st	Y, r24
    5488:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    548a:	e0 ea       	ldi	r30, 0xA0	; 160
    548c:	f6 e0       	ldi	r31, 0x06	; 6
    548e:	30 81       	ld	r19, Z
    5490:	81 e0       	ldi	r24, 0x01	; 1
    5492:	90 e0       	ldi	r25, 0x00	; 0
    5494:	2f ef       	ldi	r18, 0xFF	; 255
    5496:	24 0f       	add	r18, r20
    5498:	02 c0       	rjmp	.+4      	; 0x549e <pwm_init+0x126>
    549a:	88 0f       	add	r24, r24
    549c:	99 1f       	adc	r25, r25
    549e:	2a 95       	dec	r18
    54a0:	e2 f7       	brpl	.-8      	; 0x549a <pwm_init+0x122>
    54a2:	83 2b       	or	r24, r19
    54a4:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    54a6:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    54a8:	42 30       	cpi	r20, 0x02	; 2
    54aa:	61 f0       	breq	.+24     	; 0x54c4 <pwm_init+0x14c>
    54ac:	18 f4       	brcc	.+6      	; 0x54b4 <pwm_init+0x13c>
    54ae:	41 30       	cpi	r20, 0x01	; 1
    54b0:	31 f0       	breq	.+12     	; 0x54be <pwm_init+0x146>
    54b2:	10 c0       	rjmp	.+32     	; 0x54d4 <pwm_init+0x15c>
    54b4:	43 30       	cpi	r20, 0x03	; 3
    54b6:	49 f0       	breq	.+18     	; 0x54ca <pwm_init+0x152>
    54b8:	44 30       	cpi	r20, 0x04	; 4
    54ba:	51 f0       	breq	.+20     	; 0x54d0 <pwm_init+0x158>
    54bc:	0b c0       	rjmp	.+22     	; 0x54d4 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    54be:	80 e1       	ldi	r24, 0x10	; 16
    54c0:	8b 83       	std	Y+3, r24	; 0x03
		break;
    54c2:	08 c0       	rjmp	.+16     	; 0x54d4 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    54c4:	80 e2       	ldi	r24, 0x20	; 32
    54c6:	8b 83       	std	Y+3, r24	; 0x03
		break;
    54c8:	05 c0       	rjmp	.+10     	; 0x54d4 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    54ca:	80 e4       	ldi	r24, 0x40	; 64
    54cc:	8b 83       	std	Y+3, r24	; 0x03
		break;
    54ce:	02 c0       	rjmp	.+4      	; 0x54d4 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    54d0:	80 e8       	ldi	r24, 0x80	; 128
    54d2:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    54d4:	88 81       	ld	r24, Y
    54d6:	99 81       	ldd	r25, Y+1	; 0x01
    54d8:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    54dc:	e8 81       	ld	r30, Y
    54de:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    54e0:	81 81       	ldd	r24, Z+1	; 0x01
    54e2:	88 7f       	andi	r24, 0xF8	; 248
    54e4:	83 60       	ori	r24, 0x03	; 3
    54e6:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    54e8:	1d 82       	std	Y+5, r1	; 0x05
    54ea:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    54ec:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    54ee:	e8 81       	ld	r30, Y
    54f0:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    54f2:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    54f4:	80 7f       	andi	r24, 0xF0	; 240
    54f6:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    54f8:	b8 01       	movw	r22, r16
    54fa:	ce 01       	movw	r24, r28
    54fc:	d1 de       	rcall	.-606    	; 0x52a0 <pwm_set_frequency>
}
    54fe:	df 91       	pop	r29
    5500:	cf 91       	pop	r28
    5502:	1f 91       	pop	r17
    5504:	0f 91       	pop	r16
    5506:	08 95       	ret

00005508 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    5508:	cf 93       	push	r28
    550a:	df 93       	push	r29
    550c:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    550e:	2d 81       	ldd	r18, Y+5	; 0x05
    5510:	3e 81       	ldd	r19, Y+6	; 0x06
    5512:	a6 2f       	mov	r26, r22
    5514:	b0 e0       	ldi	r27, 0x00	; 0
    5516:	0e 94 da 3a 	call	0x75b4	; 0x75b4 <__umulhisi3>
    551a:	24 e6       	ldi	r18, 0x64	; 100
    551c:	30 e0       	ldi	r19, 0x00	; 0
    551e:	40 e0       	ldi	r20, 0x00	; 0
    5520:	50 e0       	ldi	r21, 0x00	; 0
    5522:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__udivmodsi4>
    5526:	8a 81       	ldd	r24, Y+2	; 0x02
    5528:	e8 81       	ld	r30, Y
    552a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    552c:	e6 fd       	sbrc	r30, 6
    552e:	17 c0       	rjmp	.+46     	; 0x555e <pwm_start+0x56>
		switch (channel_index) {
    5530:	82 30       	cpi	r24, 0x02	; 2
    5532:	61 f0       	breq	.+24     	; 0x554c <pwm_start+0x44>
    5534:	18 f4       	brcc	.+6      	; 0x553c <pwm_start+0x34>
    5536:	81 30       	cpi	r24, 0x01	; 1
    5538:	31 f0       	breq	.+12     	; 0x5546 <pwm_start+0x3e>
    553a:	1b c0       	rjmp	.+54     	; 0x5572 <pwm_start+0x6a>
    553c:	83 30       	cpi	r24, 0x03	; 3
    553e:	49 f0       	breq	.+18     	; 0x5552 <pwm_start+0x4a>
    5540:	84 30       	cpi	r24, 0x04	; 4
    5542:	51 f0       	breq	.+20     	; 0x5558 <pwm_start+0x50>
    5544:	16 c0       	rjmp	.+44     	; 0x5572 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    5546:	20 af       	std	Z+56, r18	; 0x38
    5548:	31 af       	std	Z+57, r19	; 0x39
    554a:	13 c0       	rjmp	.+38     	; 0x5572 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    554c:	22 af       	std	Z+58, r18	; 0x3a
    554e:	33 af       	std	Z+59, r19	; 0x3b
    5550:	10 c0       	rjmp	.+32     	; 0x5572 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    5552:	24 af       	std	Z+60, r18	; 0x3c
    5554:	35 af       	std	Z+61, r19	; 0x3d
    5556:	0d c0       	rjmp	.+26     	; 0x5572 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    5558:	26 af       	std	Z+62, r18	; 0x3e
    555a:	37 af       	std	Z+63, r19	; 0x3f
    555c:	0a c0       	rjmp	.+20     	; 0x5572 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    555e:	81 30       	cpi	r24, 0x01	; 1
    5560:	19 f0       	breq	.+6      	; 0x5568 <pwm_start+0x60>
    5562:	82 30       	cpi	r24, 0x02	; 2
    5564:	21 f0       	breq	.+8      	; 0x556e <pwm_start+0x66>
    5566:	05 c0       	rjmp	.+10     	; 0x5572 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    5568:	20 af       	std	Z+56, r18	; 0x38
    556a:	31 af       	std	Z+57, r19	; 0x39
    556c:	02 c0       	rjmp	.+4      	; 0x5572 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    556e:	22 af       	std	Z+58, r18	; 0x3a
    5570:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    5572:	8d 81       	ldd	r24, Y+5	; 0x05
    5574:	9e 81       	ldd	r25, Y+6	; 0x06
    5576:	e8 81       	ld	r30, Y
    5578:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    557a:	86 a3       	std	Z+38, r24	; 0x26
    557c:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    557e:	8b 81       	ldd	r24, Y+3	; 0x03
    5580:	e8 81       	ld	r30, Y
    5582:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    5584:	e6 fd       	sbrc	r30, 6
    5586:	04 c0       	rjmp	.+8      	; 0x5590 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    5588:	91 81       	ldd	r25, Z+1	; 0x01
    558a:	89 2b       	or	r24, r25
    558c:	81 83       	std	Z+1, r24	; 0x01
    558e:	04 c0       	rjmp	.+8      	; 0x5598 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    5590:	91 81       	ldd	r25, Z+1	; 0x01
    5592:	80 73       	andi	r24, 0x30	; 48
    5594:	89 2b       	or	r24, r25
    5596:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    5598:	e8 81       	ld	r30, Y
    559a:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    559c:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    559e:	80 7f       	andi	r24, 0xF0	; 240
    55a0:	9c 81       	ldd	r25, Y+4	; 0x04
    55a2:	89 2b       	or	r24, r25
    55a4:	80 83       	st	Z, r24
}
    55a6:	df 91       	pop	r29
    55a8:	cf 91       	pop	r28
    55aa:	08 95       	ret

000055ac <cb_rtc_alarm>:

void halt(void)
{
	/* MAIN Loop Shutdown */

	runmode = 0;
    55ac:	08 95       	ret

000055ae <cb_adc_a>:
    55ae:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    55b2:	4e 5b       	subi	r20, 0xBE	; 190
    55b4:	51 09       	sbc	r21, r1
    55b6:	60 ff       	sbrs	r22, 0
    55b8:	d3 c0       	rjmp	.+422    	; 0x5760 <cb_adc_a+0x1b2>
    55ba:	82 95       	swap	r24
    55bc:	8f 70       	andi	r24, 0x0F	; 15
    55be:	81 30       	cpi	r24, 0x01	; 1
    55c0:	31 f0       	breq	.+12     	; 0x55ce <cb_adc_a+0x20>
    55c2:	08 f4       	brcc	.+2      	; 0x55c6 <cb_adc_a+0x18>
    55c4:	8a c0       	rjmp	.+276    	; 0x56da <cb_adc_a+0x12c>
    55c6:	82 30       	cpi	r24, 0x02	; 2
    55c8:	09 f4       	brne	.+2      	; 0x55cc <cb_adc_a+0x1e>
    55ca:	44 c0       	rjmp	.+136    	; 0x5654 <cb_adc_a+0xa6>
    55cc:	08 95       	ret
    55ce:	05 2e       	mov	r0, r21
    55d0:	00 0c       	add	r0, r0
    55d2:	66 0b       	sbc	r22, r22
    55d4:	77 0b       	sbc	r23, r23
    55d6:	80 91 5d 24 	lds	r24, 0x245D	; 0x80245d <g_adc_vctcxo_sum>
    55da:	90 91 5e 24 	lds	r25, 0x245E	; 0x80245e <g_adc_vctcxo_sum+0x1>
    55de:	a0 91 5f 24 	lds	r26, 0x245F	; 0x80245f <g_adc_vctcxo_sum+0x2>
    55e2:	b0 91 60 24 	lds	r27, 0x2460	; 0x802460 <g_adc_vctcxo_sum+0x3>
    55e6:	48 0f       	add	r20, r24
    55e8:	59 1f       	adc	r21, r25
    55ea:	6a 1f       	adc	r22, r26
    55ec:	7b 1f       	adc	r23, r27
    55ee:	40 93 5d 24 	sts	0x245D, r20	; 0x80245d <g_adc_vctcxo_sum>
    55f2:	50 93 5e 24 	sts	0x245E, r21	; 0x80245e <g_adc_vctcxo_sum+0x1>
    55f6:	60 93 5f 24 	sts	0x245F, r22	; 0x80245f <g_adc_vctcxo_sum+0x2>
    55fa:	70 93 60 24 	sts	0x2460, r23	; 0x802460 <g_adc_vctcxo_sum+0x3>
    55fe:	80 91 5b 24 	lds	r24, 0x245B	; 0x80245b <g_adc_vctcxo_cnt>
    5602:	90 91 5c 24 	lds	r25, 0x245C	; 0x80245c <g_adc_vctcxo_cnt+0x1>
    5606:	01 96       	adiw	r24, 0x01	; 1
    5608:	80 93 5b 24 	sts	0x245B, r24	; 0x80245b <g_adc_vctcxo_cnt>
    560c:	90 93 5c 24 	sts	0x245C, r25	; 0x80245c <g_adc_vctcxo_cnt+0x1>
    5610:	8f 3f       	cpi	r24, 0xFF	; 255
    5612:	91 05       	cpc	r25, r1
    5614:	09 f0       	breq	.+2      	; 0x5618 <cb_adc_a+0x6a>
    5616:	08 f4       	brcc	.+2      	; 0x561a <cb_adc_a+0x6c>
    5618:	70 c1       	rjmp	.+736    	; 0x58fa <cb_adc_a+0x34c>
    561a:	68 94       	set
    561c:	16 f8       	bld	r1, 6
    561e:	75 95       	asr	r23
    5620:	67 95       	ror	r22
    5622:	57 95       	ror	r21
    5624:	47 95       	ror	r20
    5626:	16 94       	lsr	r1
    5628:	d1 f7       	brne	.-12     	; 0x561e <cb_adc_a+0x70>
    562a:	40 93 61 24 	sts	0x2461, r20	; 0x802461 <g_adc_vctcxo_cur>
    562e:	50 93 62 24 	sts	0x2462, r21	; 0x802462 <g_adc_vctcxo_cur+0x1>
    5632:	60 93 63 24 	sts	0x2463, r22	; 0x802463 <g_adc_vctcxo_cur+0x2>
    5636:	70 93 64 24 	sts	0x2464, r23	; 0x802464 <g_adc_vctcxo_cur+0x3>
    563a:	10 92 5b 24 	sts	0x245B, r1	; 0x80245b <g_adc_vctcxo_cnt>
    563e:	10 92 5c 24 	sts	0x245C, r1	; 0x80245c <g_adc_vctcxo_cnt+0x1>
    5642:	10 92 5d 24 	sts	0x245D, r1	; 0x80245d <g_adc_vctcxo_sum>
    5646:	10 92 5e 24 	sts	0x245E, r1	; 0x80245e <g_adc_vctcxo_sum+0x1>
    564a:	10 92 5f 24 	sts	0x245F, r1	; 0x80245f <g_adc_vctcxo_sum+0x2>
    564e:	10 92 60 24 	sts	0x2460, r1	; 0x802460 <g_adc_vctcxo_sum+0x3>
    5652:	08 95       	ret
    5654:	05 2e       	mov	r0, r21
    5656:	00 0c       	add	r0, r0
    5658:	66 0b       	sbc	r22, r22
    565a:	77 0b       	sbc	r23, r23
    565c:	80 91 53 24 	lds	r24, 0x2453	; 0x802453 <g_adc_5v0_sum>
    5660:	90 91 54 24 	lds	r25, 0x2454	; 0x802454 <g_adc_5v0_sum+0x1>
    5664:	a0 91 55 24 	lds	r26, 0x2455	; 0x802455 <g_adc_5v0_sum+0x2>
    5668:	b0 91 56 24 	lds	r27, 0x2456	; 0x802456 <g_adc_5v0_sum+0x3>
    566c:	48 0f       	add	r20, r24
    566e:	59 1f       	adc	r21, r25
    5670:	6a 1f       	adc	r22, r26
    5672:	7b 1f       	adc	r23, r27
    5674:	40 93 53 24 	sts	0x2453, r20	; 0x802453 <g_adc_5v0_sum>
    5678:	50 93 54 24 	sts	0x2454, r21	; 0x802454 <g_adc_5v0_sum+0x1>
    567c:	60 93 55 24 	sts	0x2455, r22	; 0x802455 <g_adc_5v0_sum+0x2>
    5680:	70 93 56 24 	sts	0x2456, r23	; 0x802456 <g_adc_5v0_sum+0x3>
    5684:	80 91 51 24 	lds	r24, 0x2451	; 0x802451 <g_adc_5v0_cnt>
    5688:	90 91 52 24 	lds	r25, 0x2452	; 0x802452 <g_adc_5v0_cnt+0x1>
    568c:	01 96       	adiw	r24, 0x01	; 1
    568e:	80 93 51 24 	sts	0x2451, r24	; 0x802451 <g_adc_5v0_cnt>
    5692:	90 93 52 24 	sts	0x2452, r25	; 0x802452 <g_adc_5v0_cnt+0x1>
    5696:	8f 3f       	cpi	r24, 0xFF	; 255
    5698:	91 05       	cpc	r25, r1
    569a:	09 f0       	breq	.+2      	; 0x569e <cb_adc_a+0xf0>
    569c:	08 f4       	brcc	.+2      	; 0x56a0 <cb_adc_a+0xf2>
    569e:	2d c1       	rjmp	.+602    	; 0x58fa <cb_adc_a+0x34c>
    56a0:	68 94       	set
    56a2:	16 f8       	bld	r1, 6
    56a4:	75 95       	asr	r23
    56a6:	67 95       	ror	r22
    56a8:	57 95       	ror	r21
    56aa:	47 95       	ror	r20
    56ac:	16 94       	lsr	r1
    56ae:	d1 f7       	brne	.-12     	; 0x56a4 <cb_adc_a+0xf6>
    56b0:	40 93 57 24 	sts	0x2457, r20	; 0x802457 <g_adc_5v0_cur>
    56b4:	50 93 58 24 	sts	0x2458, r21	; 0x802458 <g_adc_5v0_cur+0x1>
    56b8:	60 93 59 24 	sts	0x2459, r22	; 0x802459 <g_adc_5v0_cur+0x2>
    56bc:	70 93 5a 24 	sts	0x245A, r23	; 0x80245a <g_adc_5v0_cur+0x3>
    56c0:	10 92 51 24 	sts	0x2451, r1	; 0x802451 <g_adc_5v0_cnt>
    56c4:	10 92 52 24 	sts	0x2452, r1	; 0x802452 <g_adc_5v0_cnt+0x1>
    56c8:	10 92 53 24 	sts	0x2453, r1	; 0x802453 <g_adc_5v0_sum>
    56cc:	10 92 54 24 	sts	0x2454, r1	; 0x802454 <g_adc_5v0_sum+0x1>
    56d0:	10 92 55 24 	sts	0x2455, r1	; 0x802455 <g_adc_5v0_sum+0x2>
    56d4:	10 92 56 24 	sts	0x2456, r1	; 0x802456 <g_adc_5v0_sum+0x3>
    56d8:	08 95       	ret
    56da:	05 2e       	mov	r0, r21
    56dc:	00 0c       	add	r0, r0
    56de:	66 0b       	sbc	r22, r22
    56e0:	77 0b       	sbc	r23, r23
    56e2:	80 91 49 24 	lds	r24, 0x2449	; 0x802449 <g_adc_vbat_sum>
    56e6:	90 91 4a 24 	lds	r25, 0x244A	; 0x80244a <g_adc_vbat_sum+0x1>
    56ea:	a0 91 4b 24 	lds	r26, 0x244B	; 0x80244b <g_adc_vbat_sum+0x2>
    56ee:	b0 91 4c 24 	lds	r27, 0x244C	; 0x80244c <g_adc_vbat_sum+0x3>
    56f2:	48 0f       	add	r20, r24
    56f4:	59 1f       	adc	r21, r25
    56f6:	6a 1f       	adc	r22, r26
    56f8:	7b 1f       	adc	r23, r27
    56fa:	40 93 49 24 	sts	0x2449, r20	; 0x802449 <g_adc_vbat_sum>
    56fe:	50 93 4a 24 	sts	0x244A, r21	; 0x80244a <g_adc_vbat_sum+0x1>
    5702:	60 93 4b 24 	sts	0x244B, r22	; 0x80244b <g_adc_vbat_sum+0x2>
    5706:	70 93 4c 24 	sts	0x244C, r23	; 0x80244c <g_adc_vbat_sum+0x3>
    570a:	80 91 47 24 	lds	r24, 0x2447	; 0x802447 <g_adc_vbat_cnt>
    570e:	90 91 48 24 	lds	r25, 0x2448	; 0x802448 <g_adc_vbat_cnt+0x1>
    5712:	01 96       	adiw	r24, 0x01	; 1
    5714:	80 93 47 24 	sts	0x2447, r24	; 0x802447 <g_adc_vbat_cnt>
    5718:	90 93 48 24 	sts	0x2448, r25	; 0x802448 <g_adc_vbat_cnt+0x1>
    571c:	8f 3f       	cpi	r24, 0xFF	; 255
    571e:	91 05       	cpc	r25, r1
    5720:	09 f0       	breq	.+2      	; 0x5724 <cb_adc_a+0x176>
    5722:	08 f4       	brcc	.+2      	; 0x5726 <cb_adc_a+0x178>
    5724:	ea c0       	rjmp	.+468    	; 0x58fa <cb_adc_a+0x34c>
    5726:	68 94       	set
    5728:	16 f8       	bld	r1, 6
    572a:	75 95       	asr	r23
    572c:	67 95       	ror	r22
    572e:	57 95       	ror	r21
    5730:	47 95       	ror	r20
    5732:	16 94       	lsr	r1
    5734:	d1 f7       	brne	.-12     	; 0x572a <cb_adc_a+0x17c>
    5736:	40 93 4d 24 	sts	0x244D, r20	; 0x80244d <g_adc_vbat_cur>
    573a:	50 93 4e 24 	sts	0x244E, r21	; 0x80244e <g_adc_vbat_cur+0x1>
    573e:	60 93 4f 24 	sts	0x244F, r22	; 0x80244f <g_adc_vbat_cur+0x2>
    5742:	70 93 50 24 	sts	0x2450, r23	; 0x802450 <g_adc_vbat_cur+0x3>
    5746:	10 92 47 24 	sts	0x2447, r1	; 0x802447 <g_adc_vbat_cnt>
    574a:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <g_adc_vbat_cnt+0x1>
    574e:	10 92 49 24 	sts	0x2449, r1	; 0x802449 <g_adc_vbat_sum>
    5752:	10 92 4a 24 	sts	0x244A, r1	; 0x80244a <g_adc_vbat_sum+0x1>
    5756:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <g_adc_vbat_sum+0x2>
    575a:	10 92 4c 24 	sts	0x244C, r1	; 0x80244c <g_adc_vbat_sum+0x3>
    575e:	08 95       	ret
    5760:	61 ff       	sbrs	r22, 1
    5762:	43 c0       	rjmp	.+134    	; 0x57ea <cb_adc_a+0x23c>
    5764:	05 2e       	mov	r0, r21
    5766:	00 0c       	add	r0, r0
    5768:	66 0b       	sbc	r22, r22
    576a:	77 0b       	sbc	r23, r23
    576c:	80 91 3f 24 	lds	r24, 0x243F	; 0x80243f <g_adc_io_adc4_sum>
    5770:	90 91 40 24 	lds	r25, 0x2440	; 0x802440 <g_adc_io_adc4_sum+0x1>
    5774:	a0 91 41 24 	lds	r26, 0x2441	; 0x802441 <g_adc_io_adc4_sum+0x2>
    5778:	b0 91 42 24 	lds	r27, 0x2442	; 0x802442 <g_adc_io_adc4_sum+0x3>
    577c:	48 0f       	add	r20, r24
    577e:	59 1f       	adc	r21, r25
    5780:	6a 1f       	adc	r22, r26
    5782:	7b 1f       	adc	r23, r27
    5784:	40 93 3f 24 	sts	0x243F, r20	; 0x80243f <g_adc_io_adc4_sum>
    5788:	50 93 40 24 	sts	0x2440, r21	; 0x802440 <g_adc_io_adc4_sum+0x1>
    578c:	60 93 41 24 	sts	0x2441, r22	; 0x802441 <g_adc_io_adc4_sum+0x2>
    5790:	70 93 42 24 	sts	0x2442, r23	; 0x802442 <g_adc_io_adc4_sum+0x3>
    5794:	80 91 3d 24 	lds	r24, 0x243D	; 0x80243d <g_adc_io_adc4_cnt>
    5798:	90 91 3e 24 	lds	r25, 0x243E	; 0x80243e <g_adc_io_adc4_cnt+0x1>
    579c:	01 96       	adiw	r24, 0x01	; 1
    579e:	80 93 3d 24 	sts	0x243D, r24	; 0x80243d <g_adc_io_adc4_cnt>
    57a2:	90 93 3e 24 	sts	0x243E, r25	; 0x80243e <g_adc_io_adc4_cnt+0x1>
    57a6:	8f 3f       	cpi	r24, 0xFF	; 255
    57a8:	91 05       	cpc	r25, r1
    57aa:	09 f0       	breq	.+2      	; 0x57ae <cb_adc_a+0x200>
    57ac:	08 f4       	brcc	.+2      	; 0x57b0 <cb_adc_a+0x202>
    57ae:	a5 c0       	rjmp	.+330    	; 0x58fa <cb_adc_a+0x34c>
    57b0:	68 94       	set
    57b2:	16 f8       	bld	r1, 6
    57b4:	75 95       	asr	r23
    57b6:	67 95       	ror	r22
    57b8:	57 95       	ror	r21
    57ba:	47 95       	ror	r20
    57bc:	16 94       	lsr	r1
    57be:	d1 f7       	brne	.-12     	; 0x57b4 <cb_adc_a+0x206>
    57c0:	40 93 43 24 	sts	0x2443, r20	; 0x802443 <g_adc_io_adc4_cur>
    57c4:	50 93 44 24 	sts	0x2444, r21	; 0x802444 <g_adc_io_adc4_cur+0x1>
    57c8:	60 93 45 24 	sts	0x2445, r22	; 0x802445 <g_adc_io_adc4_cur+0x2>
    57cc:	70 93 46 24 	sts	0x2446, r23	; 0x802446 <g_adc_io_adc4_cur+0x3>
    57d0:	10 92 3d 24 	sts	0x243D, r1	; 0x80243d <g_adc_io_adc4_cnt>
    57d4:	10 92 3e 24 	sts	0x243E, r1	; 0x80243e <g_adc_io_adc4_cnt+0x1>
    57d8:	10 92 3f 24 	sts	0x243F, r1	; 0x80243f <g_adc_io_adc4_sum>
    57dc:	10 92 40 24 	sts	0x2440, r1	; 0x802440 <g_adc_io_adc4_sum+0x1>
    57e0:	10 92 41 24 	sts	0x2441, r1	; 0x802441 <g_adc_io_adc4_sum+0x2>
    57e4:	10 92 42 24 	sts	0x2442, r1	; 0x802442 <g_adc_io_adc4_sum+0x3>
    57e8:	08 95       	ret
    57ea:	62 ff       	sbrs	r22, 2
    57ec:	43 c0       	rjmp	.+134    	; 0x5874 <cb_adc_a+0x2c6>
    57ee:	05 2e       	mov	r0, r21
    57f0:	00 0c       	add	r0, r0
    57f2:	66 0b       	sbc	r22, r22
    57f4:	77 0b       	sbc	r23, r23
    57f6:	80 91 35 24 	lds	r24, 0x2435	; 0x802435 <g_adc_io_adc5_sum>
    57fa:	90 91 36 24 	lds	r25, 0x2436	; 0x802436 <g_adc_io_adc5_sum+0x1>
    57fe:	a0 91 37 24 	lds	r26, 0x2437	; 0x802437 <g_adc_io_adc5_sum+0x2>
    5802:	b0 91 38 24 	lds	r27, 0x2438	; 0x802438 <g_adc_io_adc5_sum+0x3>
    5806:	48 0f       	add	r20, r24
    5808:	59 1f       	adc	r21, r25
    580a:	6a 1f       	adc	r22, r26
    580c:	7b 1f       	adc	r23, r27
    580e:	40 93 35 24 	sts	0x2435, r20	; 0x802435 <g_adc_io_adc5_sum>
    5812:	50 93 36 24 	sts	0x2436, r21	; 0x802436 <g_adc_io_adc5_sum+0x1>
    5816:	60 93 37 24 	sts	0x2437, r22	; 0x802437 <g_adc_io_adc5_sum+0x2>
    581a:	70 93 38 24 	sts	0x2438, r23	; 0x802438 <g_adc_io_adc5_sum+0x3>
    581e:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <g_adc_io_adc5_cnt>
    5822:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <g_adc_io_adc5_cnt+0x1>
    5826:	01 96       	adiw	r24, 0x01	; 1
    5828:	80 93 33 24 	sts	0x2433, r24	; 0x802433 <g_adc_io_adc5_cnt>
    582c:	90 93 34 24 	sts	0x2434, r25	; 0x802434 <g_adc_io_adc5_cnt+0x1>
    5830:	8f 3f       	cpi	r24, 0xFF	; 255
    5832:	91 05       	cpc	r25, r1
    5834:	09 f0       	breq	.+2      	; 0x5838 <cb_adc_a+0x28a>
    5836:	08 f4       	brcc	.+2      	; 0x583a <cb_adc_a+0x28c>
    5838:	60 c0       	rjmp	.+192    	; 0x58fa <cb_adc_a+0x34c>
    583a:	68 94       	set
    583c:	16 f8       	bld	r1, 6
    583e:	75 95       	asr	r23
    5840:	67 95       	ror	r22
    5842:	57 95       	ror	r21
    5844:	47 95       	ror	r20
    5846:	16 94       	lsr	r1
    5848:	d1 f7       	brne	.-12     	; 0x583e <cb_adc_a+0x290>
    584a:	40 93 39 24 	sts	0x2439, r20	; 0x802439 <g_adc_io_adc5_cur>
    584e:	50 93 3a 24 	sts	0x243A, r21	; 0x80243a <g_adc_io_adc5_cur+0x1>
    5852:	60 93 3b 24 	sts	0x243B, r22	; 0x80243b <g_adc_io_adc5_cur+0x2>
    5856:	70 93 3c 24 	sts	0x243C, r23	; 0x80243c <g_adc_io_adc5_cur+0x3>
    585a:	10 92 33 24 	sts	0x2433, r1	; 0x802433 <g_adc_io_adc5_cnt>
    585e:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <g_adc_io_adc5_cnt+0x1>
    5862:	10 92 35 24 	sts	0x2435, r1	; 0x802435 <g_adc_io_adc5_sum>
    5866:	10 92 36 24 	sts	0x2436, r1	; 0x802436 <g_adc_io_adc5_sum+0x1>
    586a:	10 92 37 24 	sts	0x2437, r1	; 0x802437 <g_adc_io_adc5_sum+0x2>
    586e:	10 92 38 24 	sts	0x2438, r1	; 0x802438 <g_adc_io_adc5_sum+0x3>
    5872:	08 95       	ret
    5874:	63 ff       	sbrs	r22, 3
    5876:	41 c0       	rjmp	.+130    	; 0x58fa <cb_adc_a+0x34c>
    5878:	05 2e       	mov	r0, r21
    587a:	00 0c       	add	r0, r0
    587c:	66 0b       	sbc	r22, r22
    587e:	77 0b       	sbc	r23, r23
    5880:	80 91 2b 24 	lds	r24, 0x242B	; 0x80242b <g_adc_temp_sum>
    5884:	90 91 2c 24 	lds	r25, 0x242C	; 0x80242c <g_adc_temp_sum+0x1>
    5888:	a0 91 2d 24 	lds	r26, 0x242D	; 0x80242d <g_adc_temp_sum+0x2>
    588c:	b0 91 2e 24 	lds	r27, 0x242E	; 0x80242e <g_adc_temp_sum+0x3>
    5890:	48 0f       	add	r20, r24
    5892:	59 1f       	adc	r21, r25
    5894:	6a 1f       	adc	r22, r26
    5896:	7b 1f       	adc	r23, r27
    5898:	40 93 2b 24 	sts	0x242B, r20	; 0x80242b <g_adc_temp_sum>
    589c:	50 93 2c 24 	sts	0x242C, r21	; 0x80242c <g_adc_temp_sum+0x1>
    58a0:	60 93 2d 24 	sts	0x242D, r22	; 0x80242d <g_adc_temp_sum+0x2>
    58a4:	70 93 2e 24 	sts	0x242E, r23	; 0x80242e <g_adc_temp_sum+0x3>
    58a8:	80 91 29 24 	lds	r24, 0x2429	; 0x802429 <g_adc_temp_cnt>
    58ac:	90 91 2a 24 	lds	r25, 0x242A	; 0x80242a <g_adc_temp_cnt+0x1>
    58b0:	01 96       	adiw	r24, 0x01	; 1
    58b2:	80 93 29 24 	sts	0x2429, r24	; 0x802429 <g_adc_temp_cnt>
    58b6:	90 93 2a 24 	sts	0x242A, r25	; 0x80242a <g_adc_temp_cnt+0x1>
    58ba:	8f 3f       	cpi	r24, 0xFF	; 255
    58bc:	91 05       	cpc	r25, r1
    58be:	e9 f0       	breq	.+58     	; 0x58fa <cb_adc_a+0x34c>
    58c0:	e0 f0       	brcs	.+56     	; 0x58fa <cb_adc_a+0x34c>
    58c2:	68 94       	set
    58c4:	16 f8       	bld	r1, 6
    58c6:	75 95       	asr	r23
    58c8:	67 95       	ror	r22
    58ca:	57 95       	ror	r21
    58cc:	47 95       	ror	r20
    58ce:	16 94       	lsr	r1
    58d0:	d1 f7       	brne	.-12     	; 0x58c6 <cb_adc_a+0x318>
    58d2:	40 93 2f 24 	sts	0x242F, r20	; 0x80242f <g_adc_temp_cur>
    58d6:	50 93 30 24 	sts	0x2430, r21	; 0x802430 <g_adc_temp_cur+0x1>
    58da:	60 93 31 24 	sts	0x2431, r22	; 0x802431 <g_adc_temp_cur+0x2>
    58de:	70 93 32 24 	sts	0x2432, r23	; 0x802432 <g_adc_temp_cur+0x3>
    58e2:	10 92 29 24 	sts	0x2429, r1	; 0x802429 <g_adc_temp_cnt>
    58e6:	10 92 2a 24 	sts	0x242A, r1	; 0x80242a <g_adc_temp_cnt+0x1>
    58ea:	10 92 2b 24 	sts	0x242B, r1	; 0x80242b <g_adc_temp_sum>
    58ee:	10 92 2c 24 	sts	0x242C, r1	; 0x80242c <g_adc_temp_sum+0x1>
    58f2:	10 92 2d 24 	sts	0x242D, r1	; 0x80242d <g_adc_temp_sum+0x2>
    58f6:	10 92 2e 24 	sts	0x242E, r1	; 0x80242e <g_adc_temp_sum+0x3>
    58fa:	08 95       	ret

000058fc <task_dac>:
    58fc:	2f 92       	push	r2
    58fe:	3f 92       	push	r3
    5900:	4f 92       	push	r4
    5902:	5f 92       	push	r5
    5904:	6f 92       	push	r6
    5906:	7f 92       	push	r7
    5908:	8f 92       	push	r8
    590a:	9f 92       	push	r9
    590c:	af 92       	push	r10
    590e:	bf 92       	push	r11
    5910:	cf 92       	push	r12
    5912:	df 92       	push	r13
    5914:	ef 92       	push	r14
    5916:	ff 92       	push	r15
    5918:	0f 93       	push	r16
    591a:	1f 93       	push	r17
    591c:	cf 93       	push	r28
    591e:	df 93       	push	r29
    5920:	cd b7       	in	r28, 0x3d	; 61
    5922:	de b7       	in	r29, 0x3e	; 62
    5924:	2e 97       	sbiw	r28, 0x0e	; 14
    5926:	cd bf       	out	0x3d, r28	; 61
    5928:	de bf       	out	0x3e, r29	; 62
    592a:	8f b7       	in	r24, 0x3f	; 63
    592c:	8a 83       	std	Y+2, r24	; 0x02
    592e:	f8 94       	cli
    5930:	8a 81       	ldd	r24, Y+2	; 0x02
    5932:	40 90 2b 20 	lds	r4, 0x202B	; 0x80202b <g_dds0_freq_mHz>
    5936:	50 90 2c 20 	lds	r5, 0x202C	; 0x80202c <g_dds0_freq_mHz+0x1>
    593a:	60 90 2d 20 	lds	r6, 0x202D	; 0x80202d <g_dds0_freq_mHz+0x2>
    593e:	70 90 2e 20 	lds	r7, 0x202E	; 0x80202e <g_dds0_freq_mHz+0x3>
    5942:	00 91 27 20 	lds	r16, 0x2027	; 0x802027 <g_dds1_freq_mHz>
    5946:	10 91 28 20 	lds	r17, 0x2028	; 0x802028 <g_dds1_freq_mHz+0x1>
    594a:	20 91 29 20 	lds	r18, 0x2029	; 0x802029 <g_dds1_freq_mHz+0x2>
    594e:	30 91 2a 20 	lds	r19, 0x202A	; 0x80202a <g_dds1_freq_mHz+0x3>
    5952:	0b 87       	std	Y+11, r16	; 0x0b
    5954:	1c 87       	std	Y+12, r17	; 0x0c
    5956:	2d 87       	std	Y+13, r18	; 0x0d
    5958:	3e 87       	std	Y+14, r19	; 0x0e
    595a:	8f bf       	out	0x3f, r24	; 63
    595c:	80 91 e1 22 	lds	r24, 0x22E1	; 0x8022e1 <s_dds0_freq_mHz.7374>
    5960:	90 91 e2 22 	lds	r25, 0x22E2	; 0x8022e2 <s_dds0_freq_mHz.7374+0x1>
    5964:	a0 91 e3 22 	lds	r26, 0x22E3	; 0x8022e3 <s_dds0_freq_mHz.7374+0x2>
    5968:	b0 91 e4 22 	lds	r27, 0x22E4	; 0x8022e4 <s_dds0_freq_mHz.7374+0x3>
    596c:	48 16       	cp	r4, r24
    596e:	59 06       	cpc	r5, r25
    5970:	6a 06       	cpc	r6, r26
    5972:	7b 06       	cpc	r7, r27
    5974:	71 f4       	brne	.+28     	; 0x5992 <task_dac+0x96>
    5976:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <s_dds1_freq_mHz.7375>
    597a:	90 91 de 22 	lds	r25, 0x22DE	; 0x8022de <s_dds1_freq_mHz.7375+0x1>
    597e:	a0 91 df 22 	lds	r26, 0x22DF	; 0x8022df <s_dds1_freq_mHz.7375+0x2>
    5982:	b0 91 e0 22 	lds	r27, 0x22E0	; 0x8022e0 <s_dds1_freq_mHz.7375+0x3>
    5986:	08 17       	cp	r16, r24
    5988:	19 07       	cpc	r17, r25
    598a:	2a 07       	cpc	r18, r26
    598c:	3b 07       	cpc	r19, r27
    598e:	09 f4       	brne	.+2      	; 0x5992 <task_dac+0x96>
    5990:	a3 c0       	rjmp	.+326    	; 0x5ad8 <task_dac+0x1dc>
    5992:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <g_dds0_freq_mHz>
    5996:	90 91 2c 20 	lds	r25, 0x202C	; 0x80202c <g_dds0_freq_mHz+0x1>
    599a:	a0 91 2d 20 	lds	r26, 0x202D	; 0x80202d <g_dds0_freq_mHz+0x2>
    599e:	b0 91 2e 20 	lds	r27, 0x202E	; 0x80202e <g_dds0_freq_mHz+0x3>
    59a2:	8c 01       	movw	r16, r24
    59a4:	9d 01       	movw	r18, r26
    59a6:	40 e0       	ldi	r20, 0x00	; 0
    59a8:	50 e0       	ldi	r21, 0x00	; 0
    59aa:	ba 01       	movw	r22, r20
    59ac:	8b 83       	std	Y+3, r24	; 0x03
    59ae:	1c 83       	std	Y+4, r17	; 0x04
    59b0:	2d 83       	std	Y+5, r18	; 0x05
    59b2:	3e 83       	std	Y+6, r19	; 0x06
    59b4:	4f 83       	std	Y+7, r20	; 0x07
    59b6:	58 87       	std	Y+8, r21	; 0x08
    59b8:	69 87       	std	Y+9, r22	; 0x09
    59ba:	7a 87       	std	Y+10, r23	; 0x0a
    59bc:	aa 24       	eor	r10, r10
    59be:	aa 94       	dec	r10
    59c0:	bb 24       	eor	r11, r11
    59c2:	ba 94       	dec	r11
    59c4:	cc 24       	eor	r12, r12
    59c6:	ca 94       	dec	r12
    59c8:	dd 24       	eor	r13, r13
    59ca:	da 94       	dec	r13
    59cc:	e1 2c       	mov	r14, r1
    59ce:	f1 2c       	mov	r15, r1
    59d0:	00 e0       	ldi	r16, 0x00	; 0
    59d2:	10 e0       	ldi	r17, 0x00	; 0
    59d4:	2b 81       	ldd	r18, Y+3	; 0x03
    59d6:	3c 81       	ldd	r19, Y+4	; 0x04
    59d8:	4d 81       	ldd	r20, Y+5	; 0x05
    59da:	5e 81       	ldd	r21, Y+6	; 0x06
    59dc:	60 e0       	ldi	r22, 0x00	; 0
    59de:	70 e0       	ldi	r23, 0x00	; 0
    59e0:	80 e0       	ldi	r24, 0x00	; 0
    59e2:	90 e0       	ldi	r25, 0x00	; 0
    59e4:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <__muldi3>
    59e8:	a1 2c       	mov	r10, r1
    59ea:	0f 2e       	mov	r0, r31
    59ec:	f1 ee       	ldi	r31, 0xE1	; 225
    59ee:	bf 2e       	mov	r11, r31
    59f0:	f0 2d       	mov	r31, r0
    59f2:	0f 2e       	mov	r0, r31
    59f4:	f5 ef       	ldi	r31, 0xF5	; 245
    59f6:	cf 2e       	mov	r12, r31
    59f8:	f0 2d       	mov	r31, r0
    59fa:	0f 2e       	mov	r0, r31
    59fc:	f5 e0       	ldi	r31, 0x05	; 5
    59fe:	df 2e       	mov	r13, r31
    5a00:	f0 2d       	mov	r31, r0
    5a02:	0e 94 3c 3b 	call	0x7678	; 0x7678 <__udivdi3>
    5a06:	92 2e       	mov	r9, r18
    5a08:	83 2e       	mov	r8, r19
    5a0a:	34 2e       	mov	r3, r20
    5a0c:	25 2e       	mov	r2, r21
    5a0e:	80 91 27 20 	lds	r24, 0x2027	; 0x802027 <g_dds1_freq_mHz>
    5a12:	90 91 28 20 	lds	r25, 0x2028	; 0x802028 <g_dds1_freq_mHz+0x1>
    5a16:	a0 91 29 20 	lds	r26, 0x2029	; 0x802029 <g_dds1_freq_mHz+0x2>
    5a1a:	b0 91 2a 20 	lds	r27, 0x202A	; 0x80202a <g_dds1_freq_mHz+0x3>
    5a1e:	8c 01       	movw	r16, r24
    5a20:	9d 01       	movw	r18, r26
    5a22:	40 e0       	ldi	r20, 0x00	; 0
    5a24:	50 e0       	ldi	r21, 0x00	; 0
    5a26:	ba 01       	movw	r22, r20
    5a28:	8b 83       	std	Y+3, r24	; 0x03
    5a2a:	1c 83       	std	Y+4, r17	; 0x04
    5a2c:	2d 83       	std	Y+5, r18	; 0x05
    5a2e:	3e 83       	std	Y+6, r19	; 0x06
    5a30:	4f 83       	std	Y+7, r20	; 0x07
    5a32:	58 87       	std	Y+8, r21	; 0x08
    5a34:	69 87       	std	Y+9, r22	; 0x09
    5a36:	7a 87       	std	Y+10, r23	; 0x0a
    5a38:	aa 24       	eor	r10, r10
    5a3a:	aa 94       	dec	r10
    5a3c:	bb 24       	eor	r11, r11
    5a3e:	ba 94       	dec	r11
    5a40:	cc 24       	eor	r12, r12
    5a42:	ca 94       	dec	r12
    5a44:	dd 24       	eor	r13, r13
    5a46:	da 94       	dec	r13
    5a48:	00 e0       	ldi	r16, 0x00	; 0
    5a4a:	10 e0       	ldi	r17, 0x00	; 0
    5a4c:	2b 81       	ldd	r18, Y+3	; 0x03
    5a4e:	3c 81       	ldd	r19, Y+4	; 0x04
    5a50:	4d 81       	ldd	r20, Y+5	; 0x05
    5a52:	5e 81       	ldd	r21, Y+6	; 0x06
    5a54:	60 e0       	ldi	r22, 0x00	; 0
    5a56:	70 e0       	ldi	r23, 0x00	; 0
    5a58:	80 e0       	ldi	r24, 0x00	; 0
    5a5a:	90 e0       	ldi	r25, 0x00	; 0
    5a5c:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <__muldi3>
    5a60:	a1 2c       	mov	r10, r1
    5a62:	0f 2e       	mov	r0, r31
    5a64:	f1 ee       	ldi	r31, 0xE1	; 225
    5a66:	bf 2e       	mov	r11, r31
    5a68:	f0 2d       	mov	r31, r0
    5a6a:	0f 2e       	mov	r0, r31
    5a6c:	f5 ef       	ldi	r31, 0xF5	; 245
    5a6e:	cf 2e       	mov	r12, r31
    5a70:	f0 2d       	mov	r31, r0
    5a72:	0f 2e       	mov	r0, r31
    5a74:	f5 e0       	ldi	r31, 0x05	; 5
    5a76:	df 2e       	mov	r13, r31
    5a78:	f0 2d       	mov	r31, r0
    5a7a:	0e 94 3c 3b 	call	0x7678	; 0x7678 <__udivdi3>
    5a7e:	72 2f       	mov	r23, r18
    5a80:	63 2f       	mov	r22, r19
    5a82:	94 2f       	mov	r25, r20
    5a84:	85 2f       	mov	r24, r21
    5a86:	40 92 e1 22 	sts	0x22E1, r4	; 0x8022e1 <s_dds0_freq_mHz.7374>
    5a8a:	50 92 e2 22 	sts	0x22E2, r5	; 0x8022e2 <s_dds0_freq_mHz.7374+0x1>
    5a8e:	60 92 e3 22 	sts	0x22E3, r6	; 0x8022e3 <s_dds0_freq_mHz.7374+0x2>
    5a92:	70 92 e4 22 	sts	0x22E4, r7	; 0x8022e4 <s_dds0_freq_mHz.7374+0x3>
    5a96:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a98:	3c 85       	ldd	r19, Y+12	; 0x0c
    5a9a:	4d 85       	ldd	r20, Y+13	; 0x0d
    5a9c:	5e 85       	ldd	r21, Y+14	; 0x0e
    5a9e:	20 93 dd 22 	sts	0x22DD, r18	; 0x8022dd <s_dds1_freq_mHz.7375>
    5aa2:	30 93 de 22 	sts	0x22DE, r19	; 0x8022de <s_dds1_freq_mHz.7375+0x1>
    5aa6:	40 93 df 22 	sts	0x22DF, r20	; 0x8022df <s_dds1_freq_mHz.7375+0x2>
    5aaa:	50 93 e0 22 	sts	0x22E0, r21	; 0x8022e0 <s_dds1_freq_mHz.7375+0x3>
    5aae:	2f b7       	in	r18, 0x3f	; 63
    5ab0:	29 83       	std	Y+1, r18	; 0x01
    5ab2:	f8 94       	cli
    5ab4:	29 81       	ldd	r18, Y+1	; 0x01
    5ab6:	90 92 21 24 	sts	0x2421, r9	; 0x802421 <g_dds0_inc>
    5aba:	80 92 22 24 	sts	0x2422, r8	; 0x802422 <g_dds0_inc+0x1>
    5abe:	30 92 23 24 	sts	0x2423, r3	; 0x802423 <g_dds0_inc+0x2>
    5ac2:	20 92 24 24 	sts	0x2424, r2	; 0x802424 <g_dds0_inc+0x3>
    5ac6:	70 93 19 24 	sts	0x2419, r23	; 0x802419 <g_dds1_inc>
    5aca:	60 93 1a 24 	sts	0x241A, r22	; 0x80241a <g_dds1_inc+0x1>
    5ace:	90 93 1b 24 	sts	0x241B, r25	; 0x80241b <g_dds1_inc+0x2>
    5ad2:	80 93 1c 24 	sts	0x241C, r24	; 0x80241c <g_dds1_inc+0x3>
    5ad6:	2f bf       	out	0x3f, r18	; 63
    5ad8:	2e 96       	adiw	r28, 0x0e	; 14
    5ada:	cd bf       	out	0x3d, r28	; 61
    5adc:	de bf       	out	0x3e, r29	; 62
    5ade:	df 91       	pop	r29
    5ae0:	cf 91       	pop	r28
    5ae2:	1f 91       	pop	r17
    5ae4:	0f 91       	pop	r16
    5ae6:	ff 90       	pop	r15
    5ae8:	ef 90       	pop	r14
    5aea:	df 90       	pop	r13
    5aec:	cf 90       	pop	r12
    5aee:	bf 90       	pop	r11
    5af0:	af 90       	pop	r10
    5af2:	9f 90       	pop	r9
    5af4:	8f 90       	pop	r8
    5af6:	7f 90       	pop	r7
    5af8:	6f 90       	pop	r6
    5afa:	5f 90       	pop	r5
    5afc:	4f 90       	pop	r4
    5afe:	3f 90       	pop	r3
    5b00:	2f 90       	pop	r2
    5b02:	08 95       	ret

00005b04 <isr_calc_next_frame>:
    5b04:	cf 92       	push	r12
    5b06:	df 92       	push	r13
    5b08:	ef 92       	push	r14
    5b0a:	ff 92       	push	r15
    5b0c:	0f 93       	push	r16
    5b0e:	1f 93       	push	r17
    5b10:	cf 93       	push	r28
    5b12:	df 93       	push	r29
    5b14:	8b 01       	movw	r16, r22
    5b16:	6a 01       	movw	r12, r20
    5b18:	ec 01       	movw	r28, r24
    5b1a:	7c 01       	movw	r14, r24
    5b1c:	20 e4       	ldi	r18, 0x40	; 64
    5b1e:	e2 0e       	add	r14, r18
    5b20:	f1 1c       	adc	r15, r1
    5b22:	f8 01       	movw	r30, r16
    5b24:	82 81       	ldd	r24, Z+2	; 0x02
    5b26:	93 81       	ldd	r25, Z+3	; 0x03
    5b28:	0e 94 35 13 	call	0x266a	; 0x266a <get_interpolated_sine>
    5b2c:	89 93       	st	Y+, r24
    5b2e:	99 93       	st	Y+, r25
    5b30:	f8 01       	movw	r30, r16
    5b32:	40 81       	ld	r20, Z
    5b34:	51 81       	ldd	r21, Z+1	; 0x01
    5b36:	62 81       	ldd	r22, Z+2	; 0x02
    5b38:	73 81       	ldd	r23, Z+3	; 0x03
    5b3a:	f6 01       	movw	r30, r12
    5b3c:	80 81       	ld	r24, Z
    5b3e:	91 81       	ldd	r25, Z+1	; 0x01
    5b40:	a2 81       	ldd	r26, Z+2	; 0x02
    5b42:	b3 81       	ldd	r27, Z+3	; 0x03
    5b44:	84 0f       	add	r24, r20
    5b46:	95 1f       	adc	r25, r21
    5b48:	a6 1f       	adc	r26, r22
    5b4a:	b7 1f       	adc	r27, r23
    5b4c:	f8 01       	movw	r30, r16
    5b4e:	80 83       	st	Z, r24
    5b50:	91 83       	std	Z+1, r25	; 0x01
    5b52:	a2 83       	std	Z+2, r26	; 0x02
    5b54:	b3 83       	std	Z+3, r27	; 0x03
    5b56:	ce 15       	cp	r28, r14
    5b58:	df 05       	cpc	r29, r15
    5b5a:	19 f7       	brne	.-58     	; 0x5b22 <isr_calc_next_frame+0x1e>
    5b5c:	df 91       	pop	r29
    5b5e:	cf 91       	pop	r28
    5b60:	1f 91       	pop	r17
    5b62:	0f 91       	pop	r16
    5b64:	ff 90       	pop	r15
    5b66:	ef 90       	pop	r14
    5b68:	df 90       	pop	r13
    5b6a:	cf 90       	pop	r12
    5b6c:	08 95       	ret

00005b6e <cb_dma_dac_ch1_B>:
    5b6e:	cf 93       	push	r28
    5b70:	df 93       	push	r29
    5b72:	1f 92       	push	r1
    5b74:	cd b7       	in	r28, 0x3d	; 61
    5b76:	de b7       	in	r29, 0x3e	; 62
    5b78:	8f b7       	in	r24, 0x3f	; 63
    5b7a:	89 83       	std	Y+1, r24	; 0x01
    5b7c:	f8 94       	cli
    5b7e:	99 81       	ldd	r25, Y+1	; 0x01
    5b80:	e0 e3       	ldi	r30, 0x30	; 48
    5b82:	f1 e0       	ldi	r31, 0x01	; 1
    5b84:	80 81       	ld	r24, Z
    5b86:	80 68       	ori	r24, 0x80	; 128
    5b88:	80 83       	st	Z, r24
    5b8a:	9f bf       	out	0x3f, r25	; 63
    5b8c:	78 94       	sei
    5b8e:	49 e1       	ldi	r20, 0x19	; 25
    5b90:	54 e2       	ldi	r21, 0x24	; 36
    5b92:	63 e2       	ldi	r22, 0x23	; 35
    5b94:	70 e2       	ldi	r23, 0x20	; 32
    5b96:	81 e5       	ldi	r24, 0x51	; 81
    5b98:	93 e2       	ldi	r25, 0x23	; 35
    5b9a:	b4 df       	rcall	.-152    	; 0x5b04 <isr_calc_next_frame>
    5b9c:	0f 90       	pop	r0
    5b9e:	df 91       	pop	r29
    5ba0:	cf 91       	pop	r28
    5ba2:	08 95       	ret

00005ba4 <cb_dma_dac_ch1_A>:
    5ba4:	cf 93       	push	r28
    5ba6:	df 93       	push	r29
    5ba8:	1f 92       	push	r1
    5baa:	cd b7       	in	r28, 0x3d	; 61
    5bac:	de b7       	in	r29, 0x3e	; 62
    5bae:	8f b7       	in	r24, 0x3f	; 63
    5bb0:	89 83       	std	Y+1, r24	; 0x01
    5bb2:	f8 94       	cli
    5bb4:	99 81       	ldd	r25, Y+1	; 0x01
    5bb6:	e0 e4       	ldi	r30, 0x40	; 64
    5bb8:	f1 e0       	ldi	r31, 0x01	; 1
    5bba:	80 81       	ld	r24, Z
    5bbc:	80 68       	ori	r24, 0x80	; 128
    5bbe:	80 83       	st	Z, r24
    5bc0:	9f bf       	out	0x3f, r25	; 63
    5bc2:	78 94       	sei
    5bc4:	49 e1       	ldi	r20, 0x19	; 25
    5bc6:	54 e2       	ldi	r21, 0x24	; 36
    5bc8:	63 e2       	ldi	r22, 0x23	; 35
    5bca:	70 e2       	ldi	r23, 0x20	; 32
    5bcc:	81 e1       	ldi	r24, 0x11	; 17
    5bce:	93 e2       	ldi	r25, 0x23	; 35
    5bd0:	99 df       	rcall	.-206    	; 0x5b04 <isr_calc_next_frame>
    5bd2:	0f 90       	pop	r0
    5bd4:	df 91       	pop	r29
    5bd6:	cf 91       	pop	r28
    5bd8:	08 95       	ret

00005bda <cb_dma_dac_ch0_B>:
    5bda:	cf 93       	push	r28
    5bdc:	df 93       	push	r29
    5bde:	1f 92       	push	r1
    5be0:	cd b7       	in	r28, 0x3d	; 61
    5be2:	de b7       	in	r29, 0x3e	; 62
    5be4:	8f b7       	in	r24, 0x3f	; 63
    5be6:	89 83       	std	Y+1, r24	; 0x01
    5be8:	f8 94       	cli
    5bea:	99 81       	ldd	r25, Y+1	; 0x01
    5bec:	e0 e1       	ldi	r30, 0x10	; 16
    5bee:	f1 e0       	ldi	r31, 0x01	; 1
    5bf0:	80 81       	ld	r24, Z
    5bf2:	80 68       	ori	r24, 0x80	; 128
    5bf4:	80 83       	st	Z, r24
    5bf6:	9f bf       	out	0x3f, r25	; 63
    5bf8:	78 94       	sei
    5bfa:	41 e2       	ldi	r20, 0x21	; 33
    5bfc:	54 e2       	ldi	r21, 0x24	; 36
    5bfe:	6d e1       	ldi	r22, 0x1D	; 29
    5c00:	74 e2       	ldi	r23, 0x24	; 36
    5c02:	81 ed       	ldi	r24, 0xD1	; 209
    5c04:	93 e2       	ldi	r25, 0x23	; 35
    5c06:	7e df       	rcall	.-260    	; 0x5b04 <isr_calc_next_frame>
    5c08:	0f 90       	pop	r0
    5c0a:	df 91       	pop	r29
    5c0c:	cf 91       	pop	r28
    5c0e:	08 95       	ret

00005c10 <cb_dma_dac_ch0_A>:
    5c10:	cf 93       	push	r28
    5c12:	df 93       	push	r29
    5c14:	1f 92       	push	r1
    5c16:	cd b7       	in	r28, 0x3d	; 61
    5c18:	de b7       	in	r29, 0x3e	; 62
    5c1a:	8f b7       	in	r24, 0x3f	; 63
    5c1c:	89 83       	std	Y+1, r24	; 0x01
    5c1e:	f8 94       	cli
    5c20:	99 81       	ldd	r25, Y+1	; 0x01
    5c22:	e0 e2       	ldi	r30, 0x20	; 32
    5c24:	f1 e0       	ldi	r31, 0x01	; 1
    5c26:	80 81       	ld	r24, Z
    5c28:	80 68       	ori	r24, 0x80	; 128
    5c2a:	80 83       	st	Z, r24
    5c2c:	9f bf       	out	0x3f, r25	; 63
    5c2e:	78 94       	sei
    5c30:	41 e2       	ldi	r20, 0x21	; 33
    5c32:	54 e2       	ldi	r21, 0x24	; 36
    5c34:	6d e1       	ldi	r22, 0x1D	; 29
    5c36:	74 e2       	ldi	r23, 0x24	; 36
    5c38:	81 e9       	ldi	r24, 0x91	; 145
    5c3a:	93 e2       	ldi	r25, 0x23	; 35
    5c3c:	63 df       	rcall	.-314    	; 0x5b04 <isr_calc_next_frame>
    5c3e:	0f 90       	pop	r0
    5c40:	df 91       	pop	r29
    5c42:	cf 91       	pop	r28
    5c44:	08 95       	ret

00005c46 <usb_callback_suspend_action>:
    5c46:	08 95       	ret

00005c48 <usb_callback_resume_action>:
    5c48:	08 95       	ret

00005c4a <usb_callback_remotewakeup_enable>:
    5c4a:	08 95       	ret

00005c4c <usb_callback_remotewakeup_disable>:
    5c4c:	08 95       	ret

00005c4e <usb_callback_cdc_enable>:
    5c4e:	81 e0       	ldi	r24, 0x01	; 1
    5c50:	80 93 7d 24 	sts	0x247D, r24	; 0x80247d <usb_cdc_transfers_autorized>
    5c54:	08 95       	ret

00005c56 <usb_callback_cdc_disable>:
    5c56:	10 92 7d 24 	sts	0x247D, r1	; 0x80247d <usb_cdc_transfers_autorized>
    5c5a:	08 95       	ret

00005c5c <usb_callback_config>:
    5c5c:	08 95       	ret

00005c5e <usb_callback_cdc_set_dtr>:
    5c5e:	08 95       	ret

00005c60 <usb_callback_cdc_set_rts>:
    5c60:	08 95       	ret

00005c62 <usb_callback_rx_notify>:
    5c62:	08 95       	ret

00005c64 <usb_callback_tx_empty_notify>:
    5c64:	08 95       	ret

00005c66 <main>:
}


int main(void)
{
    5c66:	2f 92       	push	r2
    5c68:	3f 92       	push	r3
    5c6a:	4f 92       	push	r4
    5c6c:	5f 92       	push	r5
    5c6e:	6f 92       	push	r6
    5c70:	7f 92       	push	r7
    5c72:	8f 92       	push	r8
    5c74:	9f 92       	push	r9
    5c76:	af 92       	push	r10
    5c78:	bf 92       	push	r11
    5c7a:	cf 92       	push	r12
    5c7c:	df 92       	push	r13
    5c7e:	ef 92       	push	r14
    5c80:	ff 92       	push	r15
    5c82:	0f 93       	push	r16
    5c84:	1f 93       	push	r17
    5c86:	cf 93       	push	r28
    5c88:	df 93       	push	r29
    5c8a:	cd b7       	in	r28, 0x3d	; 61
    5c8c:	de b7       	in	r29, 0x3e	; 62
    5c8e:	a2 97       	sbiw	r28, 0x22	; 34
    5c90:	cd bf       	out	0x3d, r28	; 61
    5c92:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	irq_initialize_vectors();
    5c94:	e0 ea       	ldi	r30, 0xA0	; 160
    5c96:	f0 e0       	ldi	r31, 0x00	; 0
    5c98:	0f 2e       	mov	r0, r31
    5c9a:	f7 e0       	ldi	r31, 0x07	; 7
    5c9c:	8f 2e       	mov	r8, r31
    5c9e:	f0 2d       	mov	r31, r0
    5ca0:	82 82       	std	Z+2, r8	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    5ca2:	82 82       	std	Z+2, r8	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    5ca4:	82 81       	ldd	r24, Z+2	; 0x02
    5ca6:	8f 77       	andi	r24, 0x7F	; 127
    5ca8:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    5caa:	11 82       	std	Z+1, r1	; 0x01
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    5cac:	ac d3       	rcall	.+1880   	; 0x6406 <sysclk_init>
    5cae:	e5 ed       	ldi	r30, 0xD5	; 213
    5cb0:	f5 e2       	ldi	r31, 0x25	; 37
    5cb2:	10 82       	st	Z, r1
    5cb4:	11 82       	std	Z+1, r1	; 0x01
    5cb6:	12 82       	std	Z+2, r1	; 0x02
    5cb8:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    5cba:	14 82       	std	Z+4, r1	; 0x04
    5cbc:	99 24       	eor	r9, r9
    5cbe:	93 94       	inc	r9

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    5cc0:	95 82       	std	Z+5, r9	; 0x05
    5cc2:	0e 94 be 12 	call	0x257c	; 0x257c <rtc_init>
	rtc_set_callback(cb_rtc_alarm);
    5cc6:	86 ed       	ldi	r24, 0xD6	; 214
    5cc8:	9a e2       	ldi	r25, 0x2A	; 42
    5cca:	0e 94 b9 12 	call	0x2572	; 0x2572 <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    5cce:	62 e0       	ldi	r22, 0x02	; 2
    5cd0:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH0
    5cd2:	1a d4       	rcall	.+2100   	; 0x6508 <sysclk_enable_module>
    5cd4:	e0 e8       	ldi	r30, 0x80	; 128
    5cd6:	f1 e0       	ldi	r31, 0x01	; 1
    5cd8:	86 ec       	ldi	r24, 0xC6	; 198
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    5cda:	80 83       	st	Z, r24
	EVSYS.CH1MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH1
    5cdc:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH1 no digital filtering
    5cde:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH2MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH2
    5ce0:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
    5ce2:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH3
    5ce4:	12 86       	std	Z+10, r1	; 0x0a
	EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering
    5ce6:	83 83       	std	Z+3, r24	; 0x03

	/* DAC - event 7 */
	EVSYS.CH7MUX  = EVSYS_CHMUX_TCE1_OVF_gc;									// TCE1 overflow goes to EVSYS CH7
    5ce8:	13 86       	std	Z+11, r1	; 0x0b
    5cea:	88 ee       	ldi	r24, 0xE8	; 232
	EVSYS.CH7CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH7 no digital filtering
    5cec:	87 83       	std	Z+7, r24	; 0x07

static void tc_init(void)
{
	/* TCC0: VCTCXO PWM signal generation and ADCA CH0 */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 2560);						// Init PWM structure and enable timer
    5cee:	17 86       	std	Z+15, r1	; 0x0f
    5cf0:	20 e0       	ldi	r18, 0x00	; 0
    5cf2:	3a e0       	ldi	r19, 0x0A	; 10
    5cf4:	43 e0       	ldi	r20, 0x03	; 3
    5cf6:	60 e0       	ldi	r22, 0x00	; 0
    5cf8:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    5cfa:	01 96       	adiw	r24, 0x01	; 1
    5cfc:	3d db       	rcall	.-2438   	; 0x5378 <pwm_init>
    5cfe:	6d e2       	ldi	r22, 0x2D	; 45
    5d00:	ce 01       	movw	r24, r28
	tc_write_cc_buffer(&TCC0, TC_CCC, (uint16_t) (0.5f + pwm_vctcxo_cfg.period * C_VCTCXO_DEFAULT_VOLTS / C_VCTCXO_PWM_HI_VOLTS));	// Initial value for VCTCXO
    5d02:	01 96       	adiw	r24, 0x01	; 1
    5d04:	01 dc       	rcall	.-2046   	; 0x5508 <pwm_start>
    5d06:	6e 81       	ldd	r22, Y+6	; 0x06
    5d08:	7f 81       	ldd	r23, Y+7	; 0x07
    5d0a:	80 e0       	ldi	r24, 0x00	; 0
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	0e 94 91 3c 	call	0x7922	; 0x7922 <__floatunsisf>
    5d12:	20 e0       	ldi	r18, 0x00	; 0
    5d14:	30 e0       	ldi	r19, 0x00	; 0
    5d16:	40 ec       	ldi	r20, 0xC0	; 192
    5d18:	5f e3       	ldi	r21, 0x3F	; 63
    5d1a:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <__mulsf3>
    5d1e:	27 e2       	ldi	r18, 0x27	; 39
    5d20:	31 e3       	ldi	r19, 0x31	; 49
    5d22:	40 e5       	ldi	r20, 0x50	; 80
    5d24:	50 e4       	ldi	r21, 0x40	; 64
    5d26:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <__divsf3>
    5d2a:	20 e0       	ldi	r18, 0x00	; 0
    5d2c:	30 e0       	ldi	r19, 0x00	; 0
    5d2e:	40 e0       	ldi	r20, 0x00	; 0
    5d30:	5f e3       	ldi	r21, 0x3F	; 63
    5d32:	0e 94 99 3b 	call	0x7732	; 0x7732 <__addsf3>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    5d36:	0e 94 65 3c 	call	0x78ca	; 0x78ca <__fixunssfsi>
    5d3a:	41 2c       	mov	r4, r1
    5d3c:	68 94       	set
    5d3e:	55 24       	eor	r5, r5
    5d40:	53 f8       	bld	r5, 3
    5d42:	d2 01       	movw	r26, r4
    5d44:	dc 96       	adiw	r26, 0x3c	; 60
    5d46:	6d 93       	st	X+, r22

	/* TCE1: DAC clock */
	tc_enable(&TCE1);
    5d48:	7c 93       	st	X, r23
    5d4a:	dd 97       	sbiw	r26, 0x3d	; 61
    5d4c:	80 e4       	ldi	r24, 0x40	; 64
    5d4e:	9a e0       	ldi	r25, 0x0A	; 10
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    5d50:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <tc_enable>
    5d54:	0f 2e       	mov	r0, r31
    5d56:	f0 e4       	ldi	r31, 0x40	; 64
    5d58:	6f 2e       	mov	r6, r31
    5d5a:	fa e0       	ldi	r31, 0x0A	; 10
    5d5c:	7f 2e       	mov	r7, r31
    5d5e:	f0 2d       	mov	r31, r0
    5d60:	f3 01       	movw	r30, r6
    5d62:	81 81       	ldd	r24, Z+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    5d64:	88 7f       	andi	r24, 0xF8	; 248
    5d66:	81 83       	std	Z+1, r24	; 0x01
    5d68:	8b e2       	ldi	r24, 0x2B	; 43
    5d6a:	91 e0       	ldi	r25, 0x01	; 1
}

static void adc_init(void)
{
	/* Disable input pins */
	PORTA_PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5d6c:	86 a3       	std	Z+38, r24	; 0x26
    5d6e:	97 a3       	std	Z+39, r25	; 0x27
    5d70:	e0 e1       	ldi	r30, 0x10	; 16
    5d72:	f6 e0       	ldi	r31, 0x06	; 6
    5d74:	80 81       	ld	r24, Z
	PORTA_PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5d76:	87 60       	ori	r24, 0x07	; 7
    5d78:	80 83       	st	Z, r24
    5d7a:	e1 e1       	ldi	r30, 0x11	; 17
    5d7c:	f6 e0       	ldi	r31, 0x06	; 6
    5d7e:	80 81       	ld	r24, Z
	PORTA_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5d80:	87 60       	ori	r24, 0x07	; 7
    5d82:	80 83       	st	Z, r24
    5d84:	e2 e1       	ldi	r30, 0x12	; 18
    5d86:	f6 e0       	ldi	r31, 0x06	; 6
    5d88:	80 81       	ld	r24, Z
	PORTA_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5d8a:	87 60       	ori	r24, 0x07	; 7
    5d8c:	80 83       	st	Z, r24
    5d8e:	e3 e1       	ldi	r30, 0x13	; 19
    5d90:	f6 e0       	ldi	r31, 0x06	; 6
    5d92:	80 81       	ld	r24, Z
	PORTA_PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5d94:	87 60       	ori	r24, 0x07	; 7
    5d96:	80 83       	st	Z, r24
    5d98:	e4 e1       	ldi	r30, 0x14	; 20
    5d9a:	f6 e0       	ldi	r31, 0x06	; 6
    5d9c:	80 81       	ld	r24, Z
	PORTA_PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5d9e:	87 60       	ori	r24, 0x07	; 7
    5da0:	80 83       	st	Z, r24
    5da2:	e5 e1       	ldi	r30, 0x15	; 21
    5da4:	f6 e0       	ldi	r31, 0x06	; 6
    5da6:	80 81       	ld	r24, Z
	PORTB_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5da8:	87 60       	ori	r24, 0x07	; 7
    5daa:	80 83       	st	Z, r24
    5dac:	e2 e3       	ldi	r30, 0x32	; 50
    5dae:	f6 e0       	ldi	r31, 0x06	; 6
    5db0:	80 81       	ld	r24, Z
	PORTB_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5db2:	87 60       	ori	r24, 0x07	; 7
    5db4:	80 83       	st	Z, r24
    5db6:	e3 e3       	ldi	r30, 0x33	; 51
    5db8:	f6 e0       	ldi	r31, 0x06	; 6
    5dba:	80 81       	ld	r24, Z

	/* Prepare the structures */
	adc_read_configuration(&ADC_VCTCXO_5V0_VBAT,							&g_adc_a_conf);
    5dbc:	87 60       	ori	r24, 0x07	; 7
    5dbe:	80 83       	st	Z, r24
    5dc0:	65 e7       	ldi	r22, 0x75	; 117
    5dc2:	74 e2       	ldi	r23, 0x24	; 36
    5dc4:	80 e0       	ldi	r24, 0x00	; 0
    5dc6:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    5dc8:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <adc_read_configuration>
    5dcc:	41 e7       	ldi	r20, 0x71	; 113
    5dce:	54 e2       	ldi	r21, 0x24	; 36
    5dd0:	61 e0       	ldi	r22, 0x01	; 1
    5dd2:	80 e0       	ldi	r24, 0x00	; 0
    5dd4:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    5dd6:	0e 94 2e 18 	call	0x305c	; 0x305c <adcch_read_configuration>
    5dda:	4d e6       	ldi	r20, 0x6D	; 109
    5ddc:	54 e2       	ldi	r21, 0x24	; 36
    5dde:	62 e0       	ldi	r22, 0x02	; 2
    5de0:	80 e0       	ldi	r24, 0x00	; 0
    5de2:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    5de4:	0e 94 2e 18 	call	0x305c	; 0x305c <adcch_read_configuration>
    5de8:	49 e6       	ldi	r20, 0x69	; 105
    5dea:	54 e2       	ldi	r21, 0x24	; 36
    5dec:	64 e0       	ldi	r22, 0x04	; 4
    5dee:	80 e0       	ldi	r24, 0x00	; 0
    5df0:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    5df2:	0e 94 2e 18 	call	0x305c	; 0x305c <adcch_read_configuration>
    5df6:	45 e6       	ldi	r20, 0x65	; 101
    5df8:	54 e2       	ldi	r21, 0x24	; 36
    5dfa:	68 e0       	ldi	r22, 0x08	; 8
    5dfc:	80 e0       	ldi	r24, 0x00	; 0
    5dfe:	92 e0       	ldi	r25, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    5e00:	0e 94 2e 18 	call	0x305c	; 0x305c <adcch_read_configuration>
    5e04:	e5 e7       	ldi	r30, 0x75	; 117
    5e06:	f4 e2       	ldi	r31, 0x24	; 36
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    5e08:	24 e0       	ldi	r18, 0x04	; 4
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    5e0a:	24 83       	std	Z+4, r18	; 0x04
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    5e0c:	92 81       	ldd	r25, Z+2	; 0x02
    5e0e:	81 81       	ldd	r24, Z+1	; 0x01
    5e10:	0f 2e       	mov	r0, r31
    5e12:	f1 e7       	ldi	r31, 0x71	; 113
    5e14:	af 2e       	mov	r10, r31
    5e16:	f4 e2       	ldi	r31, 0x24	; 36
    5e18:	bf 2e       	mov	r11, r31
    5e1a:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    5e1c:	d5 01       	movw	r26, r10
    5e1e:	9c 92       	st	X, r9
    5e20:	38 e0       	ldi	r19, 0x08	; 8
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    5e22:	11 96       	adiw	r26, 0x01	; 1
    5e24:	3c 93       	st	X, r19
    5e26:	0f 2e       	mov	r0, r31
    5e28:	fd e6       	ldi	r31, 0x6D	; 109
    5e2a:	cf 2e       	mov	r12, r31
    5e2c:	f4 e2       	ldi	r31, 0x24	; 36
    5e2e:	df 2e       	mov	r13, r31
    5e30:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    5e32:	d6 01       	movw	r26, r12
    5e34:	9c 92       	st	X, r9
    5e36:	30 e2       	ldi	r19, 0x20	; 32
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    5e38:	11 96       	adiw	r26, 0x01	; 1
    5e3a:	3c 93       	st	X, r19
    5e3c:	0f 2e       	mov	r0, r31
    5e3e:	f9 e6       	ldi	r31, 0x69	; 105
    5e40:	ef 2e       	mov	r14, r31
    5e42:	f4 e2       	ldi	r31, 0x24	; 36
    5e44:	ff 2e       	mov	r15, r31
    5e46:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    5e48:	d7 01       	movw	r26, r14
    5e4a:	9c 92       	st	X, r9
    5e4c:	38 e2       	ldi	r19, 0x28	; 40
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    5e4e:	11 96       	adiw	r26, 0x01	; 1
    5e50:	3c 93       	st	X, r19
    5e52:	05 e6       	ldi	r16, 0x65	; 101
    5e54:	14 e2       	ldi	r17, 0x24	; 36
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    5e56:	d8 01       	movw	r26, r16
    5e58:	1c 92       	st	X, r1
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    5e5a:	11 96       	adiw	r26, 0x01	; 1
    5e5c:	1c 92       	st	X, r1
    5e5e:	9f 78       	andi	r25, 0x8F	; 143
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    5e60:	93 62       	ori	r25, 0x23	; 35
    5e62:	92 83       	std	Z+2, r25	; 0x02
    5e64:	92 e0       	ldi	r25, 0x02	; 2
    5e66:	d5 01       	movw	r26, r10
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    5e68:	13 96       	adiw	r26, 0x03	; 3
    5e6a:	9c 93       	st	X, r25
    5e6c:	81 70       	andi	r24, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    5e6e:	80 62       	ori	r24, 0x20	; 32

	/* Trigger */
	adc_set_conversion_trigger(&g_adc_a_conf, ADC_TRIG_EVENT_SINGLE, 4, 0);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, cb_adc_a);
    5e70:	81 83       	std	Z+1, r24	; 0x01
    5e72:	23 83       	std	Z+3, r18	; 0x03
    5e74:	67 ed       	ldi	r22, 0xD7	; 215
    5e76:	7a e2       	ldi	r23, 0x2A	; 42
    5e78:	80 e0       	ldi	r24, 0x00	; 0
    5e7a:	92 e0       	ldi	r25, 0x02	; 2
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    5e7c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <adc_set_callback>
    5e80:	f6 01       	movw	r30, r12
    5e82:	22 81       	ldd	r18, Z+2	; 0x02
    5e84:	d7 01       	movw	r26, r14
    5e86:	12 96       	adiw	r26, 0x02	; 2
    5e88:	9c 91       	ld	r25, X
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    5e8a:	f8 01       	movw	r30, r16
    5e8c:	82 81       	ldd	r24, Z+2	; 0x02
    5e8e:	d5 01       	movw	r26, r10
    5e90:	12 96       	adiw	r26, 0x02	; 2
    5e92:	3c 91       	ld	r19, X
    5e94:	12 97       	sbiw	r26, 0x02	; 2
    5e96:	30 7f       	andi	r19, 0xF0	; 240
    5e98:	31 60       	ori	r19, 0x01	; 1
    5e9a:	12 96       	adiw	r26, 0x02	; 2
    5e9c:	3c 93       	st	X, r19
    5e9e:	20 7f       	andi	r18, 0xF0	; 240
    5ea0:	21 60       	ori	r18, 0x01	; 1
    5ea2:	f6 01       	movw	r30, r12
    5ea4:	22 83       	std	Z+2, r18	; 0x02
    5ea6:	90 7f       	andi	r25, 0xF0	; 240
    5ea8:	91 60       	ori	r25, 0x01	; 1
    5eaa:	d7 01       	movw	r26, r14
    5eac:	12 96       	adiw	r26, 0x02	; 2
    5eae:	9c 93       	st	X, r25
    5eb0:	80 7f       	andi	r24, 0xF0	; 240
    5eb2:	81 60       	ori	r24, 0x01	; 1
	adcch_enable_interrupt(&g_adcch_io_adc4_conf);
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);
	adcch_enable_interrupt(&g_adcch_temp_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,											&g_adc_a_conf);
    5eb4:	f8 01       	movw	r30, r16
    5eb6:	82 83       	std	Z+2, r24	; 0x02
    5eb8:	65 e7       	ldi	r22, 0x75	; 117
    5eba:	74 e2       	ldi	r23, 0x24	; 36
    5ebc:	80 e0       	ldi	r24, 0x00	; 0
    5ebe:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    5ec0:	0e 94 40 17 	call	0x2e80	; 0x2e80 <adc_write_configuration>
    5ec4:	a5 01       	movw	r20, r10
    5ec6:	61 e0       	ldi	r22, 0x01	; 1
    5ec8:	80 e0       	ldi	r24, 0x00	; 0
    5eca:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    5ecc:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <adcch_write_configuration>
    5ed0:	a6 01       	movw	r20, r12
    5ed2:	62 e0       	ldi	r22, 0x02	; 2
    5ed4:	80 e0       	ldi	r24, 0x00	; 0
    5ed6:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    5ed8:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <adcch_write_configuration>
    5edc:	a7 01       	movw	r20, r14
    5ede:	64 e0       	ldi	r22, 0x04	; 4
    5ee0:	80 e0       	ldi	r24, 0x00	; 0
    5ee2:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    5ee4:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <adcch_write_configuration>
    5ee8:	a8 01       	movw	r20, r16
    5eea:	68 e0       	ldi	r22, 0x08	; 8
    5eec:	80 e0       	ldi	r24, 0x00	; 0
    5eee:	92 e0       	ldi	r25, 0x02	; 2
	dma_channel_write_config(DMA_CHANNEL_DACB_CH1_B, &dmach_dma3_conf);
}

static void dac_init(void)
{
    dac_read_configuration(&DAC_DAC, &g_dac_conf);
    5ef0:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <adcch_write_configuration>
    5ef4:	65 e2       	ldi	r22, 0x25	; 37
    5ef6:	74 e2       	ldi	r23, 0x24	; 36
    5ef8:	80 e2       	ldi	r24, 0x20	; 32
    5efa:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    5efc:	0e 94 20 19 	call	0x3240	; 0x3240 <dac_read_configuration>
    5f00:	e5 e2       	ldi	r30, 0x25	; 37
    5f02:	f4 e2       	ldi	r31, 0x24	; 36
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    5f04:	81 e1       	ldi	r24, 0x11	; 17
    5f06:	82 83       	std	Z+2, r24	; 0x02
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    5f08:	8c e0       	ldi	r24, 0x0C	; 12
    5f0a:	80 83       	st	Z, r24
    5f0c:	81 81       	ldd	r24, Z+1	; 0x01
    5f0e:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    5f10:	83 64       	ori	r24, 0x43	; 67
    dac_set_conversion_parameters(&g_dac_conf, DAC_REF_AREFA, DAC_ADJ_LEFT);
    dac_set_active_channel(&g_dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 0);
    dac_set_conversion_trigger(&g_dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 7);
    dac_write_configuration(&DAC_DAC, &g_dac_conf);
    5f12:	81 83       	std	Z+1, r24	; 0x01
    5f14:	83 82       	std	Z+3, r8	; 0x03
    5f16:	bf 01       	movw	r22, r30
    5f18:	80 e2       	ldi	r24, 0x20	; 32
    5f1a:	93 e0       	ldi	r25, 0x03	; 3
static void cb_dma_dac_ch1_A(enum dma_channel_status status);
static void cb_dma_dac_ch1_B(enum dma_channel_status status);

static void dma_init(void)
{
	memset(&dmach_dma0_conf, 0, sizeof(dmach_dma0_conf));	// DACB channel 0 - linked with dma1
    5f1c:	0e 94 c4 18 	call	0x3188	; 0x3188 <dac_write_configuration>
    5f20:	0f 2e       	mov	r0, r31
    5f22:	f6 e0       	ldi	r31, 0x06	; 6
    5f24:	af 2e       	mov	r10, r31
    5f26:	f3 e2       	ldi	r31, 0x23	; 35
    5f28:	bf 2e       	mov	r11, r31
    5f2a:	f0 2d       	mov	r31, r0
    5f2c:	8b e0       	ldi	r24, 0x0B	; 11
    5f2e:	d5 01       	movw	r26, r10
    5f30:	e8 2f       	mov	r30, r24
    5f32:	1d 92       	st	X+, r1
	memset(&dmach_dma1_conf, 0, sizeof(dmach_dma1_conf));	// DACB channel 0 - linked with dma0
    5f34:	ea 95       	dec	r30
    5f36:	e9 f7       	brne	.-6      	; 0x5f32 <main+0x2cc>
    5f38:	0f 2e       	mov	r0, r31
    5f3a:	fb ef       	ldi	r31, 0xFB	; 251
    5f3c:	cf 2e       	mov	r12, r31
    5f3e:	f2 e2       	ldi	r31, 0x22	; 34
    5f40:	df 2e       	mov	r13, r31
    5f42:	f0 2d       	mov	r31, r0
    5f44:	d6 01       	movw	r26, r12
    5f46:	e8 2f       	mov	r30, r24
    5f48:	1d 92       	st	X+, r1
	memset(&dmach_dma2_conf, 0, sizeof(dmach_dma2_conf));	// DACB channel 1 - linked with dma3
    5f4a:	ea 95       	dec	r30
    5f4c:	e9 f7       	brne	.-6      	; 0x5f48 <main+0x2e2>
    5f4e:	0f 2e       	mov	r0, r31
    5f50:	f0 ef       	ldi	r31, 0xF0	; 240
    5f52:	ef 2e       	mov	r14, r31
    5f54:	f2 e2       	ldi	r31, 0x22	; 34
    5f56:	ff 2e       	mov	r15, r31
    5f58:	f0 2d       	mov	r31, r0
    5f5a:	d7 01       	movw	r26, r14
    5f5c:	e8 2f       	mov	r30, r24
    5f5e:	1d 92       	st	X+, r1
	memset(&dmach_dma3_conf, 0, sizeof(dmach_dma3_conf));	// DACB channel 1 - linked with dma2
    5f60:	ea 95       	dec	r30
    5f62:	e9 f7       	brne	.-6      	; 0x5f5e <main+0x2f8>
    5f64:	05 ee       	ldi	r16, 0xE5	; 229
    5f66:	12 e2       	ldi	r17, 0x22	; 34
    5f68:	d8 01       	movw	r26, r16
    5f6a:	1d 92       	st	X+, r1
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    5f6c:	8a 95       	dec	r24
    5f6e:	e9 f7       	brne	.-6      	; 0x5f6a <main+0x304>
    5f70:	80 e4       	ldi	r24, 0x40	; 64
    5f72:	90 e0       	ldi	r25, 0x00	; 0
    5f74:	f5 01       	movw	r30, r10
    5f76:	84 83       	std	Z+4, r24	; 0x04
    5f78:	95 83       	std	Z+5, r25	; 0x05
    5f7a:	d6 01       	movw	r26, r12
    5f7c:	14 96       	adiw	r26, 0x04	; 4
    5f7e:	8d 93       	st	X+, r24
    5f80:	9c 93       	st	X, r25
    5f82:	15 97       	sbiw	r26, 0x05	; 5
    5f84:	f7 01       	movw	r30, r14
    5f86:	84 83       	std	Z+4, r24	; 0x04
    5f88:	95 83       	std	Z+5, r25	; 0x05
    5f8a:	d8 01       	movw	r26, r16
    5f8c:	14 96       	adiw	r26, 0x04	; 4
    5f8e:	8d 93       	st	X+, r24
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    5f90:	9c 93       	st	X, r25
    5f92:	15 97       	sbiw	r26, 0x05	; 5
    5f94:	81 e9       	ldi	r24, 0x91	; 145
    5f96:	93 e2       	ldi	r25, 0x23	; 35
    5f98:	f5 01       	movw	r30, r10
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    5f9a:	87 83       	std	Z+7, r24	; 0x07
    5f9c:	90 87       	std	Z+8, r25	; 0x08
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    5f9e:	89 ed       	ldi	r24, 0xD9	; 217
    5fa0:	82 83       	std	Z+2, r24	; 0x02
    5fa2:	28 e3       	ldi	r18, 0x38	; 56
    5fa4:	33 e0       	ldi	r19, 0x03	; 3
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    5fa6:	21 87       	std	Z+9, r18	; 0x09
    5fa8:	32 87       	std	Z+10, r19	; 0x0a
    5faa:	41 ed       	ldi	r20, 0xD1	; 209
    5fac:	53 e2       	ldi	r21, 0x23	; 35
    5fae:	d6 01       	movw	r26, r12
    5fb0:	17 96       	adiw	r26, 0x07	; 7
    5fb2:	4d 93       	st	X+, r20
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    5fb4:	5c 93       	st	X, r21
    5fb6:	18 97       	sbiw	r26, 0x08	; 8
    5fb8:	12 96       	adiw	r26, 0x02	; 2
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    5fba:	8c 93       	st	X, r24
    5fbc:	12 97       	sbiw	r26, 0x02	; 2
    5fbe:	19 96       	adiw	r26, 0x09	; 9
    5fc0:	2d 93       	st	X+, r18
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    5fc2:	3c 93       	st	X, r19
    5fc4:	1a 97       	sbiw	r26, 0x0a	; 10
    5fc6:	21 e1       	ldi	r18, 0x11	; 17
    5fc8:	33 e2       	ldi	r19, 0x23	; 35
    5fca:	f7 01       	movw	r30, r14
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    5fcc:	27 83       	std	Z+7, r18	; 0x07
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    5fce:	30 87       	std	Z+8, r19	; 0x08
    5fd0:	82 83       	std	Z+2, r24	; 0x02
    5fd2:	2a e3       	ldi	r18, 0x3A	; 58
    5fd4:	33 e0       	ldi	r19, 0x03	; 3
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    5fd6:	21 87       	std	Z+9, r18	; 0x09
    5fd8:	32 87       	std	Z+10, r19	; 0x0a
    5fda:	41 e5       	ldi	r20, 0x51	; 81
    5fdc:	53 e2       	ldi	r21, 0x23	; 35
    5fde:	d8 01       	movw	r26, r16
    5fe0:	17 96       	adiw	r26, 0x07	; 7
    5fe2:	4d 93       	st	X+, r20
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    5fe4:	5c 93       	st	X, r21
    5fe6:	18 97       	sbiw	r26, 0x08	; 8
    5fe8:	12 96       	adiw	r26, 0x02	; 2
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    5fea:	8c 93       	st	X, r24
    5fec:	12 97       	sbiw	r26, 0x02	; 2
    5fee:	19 96       	adiw	r26, 0x09	; 9
    5ff0:	2d 93       	st	X+, r18
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    5ff2:	3c 93       	st	X, r19
    5ff4:	1a 97       	sbiw	r26, 0x0a	; 10
    5ff6:	95 e2       	ldi	r25, 0x25	; 37
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    5ff8:	f5 01       	movw	r30, r10
    5ffa:	93 83       	std	Z+3, r25	; 0x03
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    5ffc:	85 e0       	ldi	r24, 0x05	; 5
    5ffe:	80 83       	st	Z, r24
    6000:	d6 01       	movw	r26, r12
    6002:	13 96       	adiw	r26, 0x03	; 3
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    6004:	9c 93       	st	X, r25
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    6006:	13 97       	sbiw	r26, 0x03	; 3
    6008:	8c 93       	st	X, r24
    600a:	96 e2       	ldi	r25, 0x26	; 38
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    600c:	f7 01       	movw	r30, r14
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    600e:	93 83       	std	Z+3, r25	; 0x03
    6010:	80 83       	st	Z, r24
    6012:	d8 01       	movw	r26, r16
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    6014:	13 96       	adiw	r26, 0x03	; 3
	dma_channel_set_single_shot(&dmach_dma2_conf);

	dma_channel_set_trigger_source(&dmach_dma3_conf, DMA_CH_TRIGSRC_DACB_CH1_gc);
	dma_channel_set_single_shot(&dmach_dma3_conf);

	task_dac(rtc_get_time());
    6016:	9c 93       	st	X, r25
    6018:	13 97       	sbiw	r26, 0x03	; 3
    601a:	8c 93       	st	X, r24
    601c:	0e 94 a8 12 	call	0x2550	; 0x2550 <rtc_get_time>

	evsys_init();		// Event system
	tc_init();			// Timers
	adc_init();			// ADC
	dac_init();			// DAC
	twi_init();			// I2C / TWI
    6020:	6d dc       	rcall	.-1830   	; 0x58fc <task_dac>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    6022:	0e 94 be 13 	call	0x277c	; 0x277c <twi_init>

	/* All interrupt sources & PMIC are prepared until here - IRQ activation follows */
	cpu_irq_enable();
    6026:	0e 94 23 15 	call	0x2a46	; 0x2a46 <board_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    602a:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    602c:	f2 01       	movw	r30, r4
    602e:	80 81       	ld	r24, Z
    6030:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    6032:	81 60       	ori	r24, 0x01	; 1
    6034:	80 83       	st	Z, r24
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6036:	d3 01       	movw	r26, r6
    6038:	8c 91       	ld	r24, X
    603a:	80 7f       	andi	r24, 0xF0	; 240
	dma_init();
}

static void dac_start(void)
{
	dac_enable(&DACB);
    603c:	81 60       	ori	r24, 0x01	; 1
    603e:	8c 93       	st	X, r24
    6040:	80 e2       	ldi	r24, 0x20	; 32
    6042:	93 e0       	ldi	r25, 0x03	; 3
	task_dac(rtc_get_time());
}

static void dma_start(void)
{
	dma_enable();
    6044:	0e 94 98 18 	call	0x3130	; 0x3130 <dac_enable>

	dma_set_callback(DMA_CHANNEL_DACB_CH0_A, cb_dma_dac_ch0_A);
    6048:	0e 94 8f 11 	call	0x231e	; 0x231e <dma_enable>
    604c:	68 e0       	ldi	r22, 0x08	; 8
    604e:	7e e2       	ldi	r23, 0x2E	; 46
    6050:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
    6052:	0e 94 b1 11 	call	0x2362	; 0x2362 <dma_set_callback>
    6056:	f5 01       	movw	r30, r10
    6058:	81 81       	ldd	r24, Z+1	; 0x01
    605a:	80 7f       	andi	r24, 0xF0	; 240
	dma_channel_set_interrupt_level(&dmach_dma0_conf, DMA_INT_LVL_MED);

	dma_set_callback(DMA_CHANNEL_DACB_CH0_B, cb_dma_dac_ch0_B);
    605c:	8a 60       	ori	r24, 0x0A	; 10
    605e:	81 83       	std	Z+1, r24	; 0x01
    6060:	6d ee       	ldi	r22, 0xED	; 237
    6062:	7d e2       	ldi	r23, 0x2D	; 45
    6064:	81 e0       	ldi	r24, 0x01	; 1
    6066:	0e 94 b1 11 	call	0x2362	; 0x2362 <dma_set_callback>
    606a:	d6 01       	movw	r26, r12
    606c:	11 96       	adiw	r26, 0x01	; 1
    606e:	8c 91       	ld	r24, X
    6070:	11 97       	sbiw	r26, 0x01	; 1
    6072:	80 7f       	andi	r24, 0xF0	; 240
    6074:	8a 60       	ori	r24, 0x0A	; 10
	dma_channel_set_interrupt_level(&dmach_dma1_conf, DMA_INT_LVL_MED);

	dma_set_callback(DMA_CHANNEL_DACB_CH1_A, cb_dma_dac_ch1_A);
    6076:	11 96       	adiw	r26, 0x01	; 1
    6078:	8c 93       	st	X, r24
    607a:	62 ed       	ldi	r22, 0xD2	; 210
    607c:	7d e2       	ldi	r23, 0x2D	; 45
    607e:	82 e0       	ldi	r24, 0x02	; 2
    6080:	0e 94 b1 11 	call	0x2362	; 0x2362 <dma_set_callback>
    6084:	f7 01       	movw	r30, r14
    6086:	81 81       	ldd	r24, Z+1	; 0x01
    6088:	80 7f       	andi	r24, 0xF0	; 240
	dma_channel_set_interrupt_level(&dmach_dma2_conf, DMA_INT_LVL_MED);

	dma_set_callback(DMA_CHANNEL_DACB_CH1_B, cb_dma_dac_ch1_B);
    608a:	8a 60       	ori	r24, 0x0A	; 10
    608c:	81 83       	std	Z+1, r24	; 0x01
    608e:	67 eb       	ldi	r22, 0xB7	; 183
    6090:	7d e2       	ldi	r23, 0x2D	; 45
    6092:	83 e0       	ldi	r24, 0x03	; 3
    6094:	0e 94 b1 11 	call	0x2362	; 0x2362 <dma_set_callback>
    6098:	d8 01       	movw	r26, r16
    609a:	11 96       	adiw	r26, 0x01	; 1
    609c:	8c 91       	ld	r24, X
    609e:	11 97       	sbiw	r26, 0x01	; 1
    60a0:	80 7f       	andi	r24, 0xF0	; 240
    60a2:	8a 60       	ori	r24, 0x0A	; 10

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    60a4:	11 96       	adiw	r26, 0x01	; 1
    60a6:	8c 93       	st	X, r24
	cpu_irq_disable();
    60a8:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    60aa:	89 87       	std	Y+9, r24	; 0x09
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_PRIMODE_gm) | primode;
    60ac:	f8 94       	cli
    60ae:	99 85       	ldd	r25, Y+9	; 0x09
    60b0:	e0 e0       	ldi	r30, 0x00	; 0
    60b2:	f1 e0       	ldi	r31, 0x01	; 1
    60b4:	80 81       	ld	r24, Z
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    60b6:	8c 7f       	andi	r24, 0xFC	; 252

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    60b8:	80 83       	st	Z, r24
    60ba:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_disable();
    60bc:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    60be:	88 87       	std	Y+8, r24	; 0x08
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_DBUFMODE_gm) | dbufmode;
    60c0:	f8 94       	cli
    60c2:	98 85       	ldd	r25, Y+8	; 0x08
    60c4:	80 81       	ld	r24, Z
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    60c6:	8c 60       	ori	r24, 0x0C	; 12
	dma_channel_set_interrupt_level(&dmach_dma3_conf, DMA_INT_LVL_MED);

	dma_set_priority_mode(DMA_PRIMODE_RR0123_gc);
	dma_set_double_buffer_mode(DMA_DBUFMODE_CH01CH23_gc);

	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_A, &dmach_dma0_conf);
    60c8:	80 83       	st	Z, r24
    60ca:	9f bf       	out	0x3f, r25	; 63
    60cc:	b5 01       	movw	r22, r10
    60ce:	80 e0       	ldi	r24, 0x00	; 0
	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_B, &dmach_dma1_conf);
    60d0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <dma_channel_write_config>
    60d4:	b6 01       	movw	r22, r12
    60d6:	81 e0       	ldi	r24, 0x01	; 1
	dma_channel_write_config(DMA_CHANNEL_DACB_CH1_A, &dmach_dma2_conf);
    60d8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <dma_channel_write_config>
    60dc:	b7 01       	movw	r22, r14
    60de:	82 e0       	ldi	r24, 0x02	; 2
	dma_channel_write_config(DMA_CHANNEL_DACB_CH1_B, &dmach_dma3_conf);
    60e0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <dma_channel_write_config>
    60e4:	b8 01       	movw	r22, r16
    60e6:	83 e0       	ldi	r24, 0x03	; 3

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    60e8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <dma_channel_write_config>
	cpu_irq_disable();
    60ec:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    60ee:	8c 87       	std	Y+12, r24	; 0x0c
	/* IRQ disabled section */
	{
		irqflags_t flags = cpu_irq_save();

		/* Prepare DMA blocks */
		isr_calc_next_frame(&dac_io_dac0_buf[0][0], &g_dds0_reg, &g_dds0_inc);
    60f0:	f8 94       	cli
    60f2:	1c 85       	ldd	r17, Y+12	; 0x0c
    60f4:	41 e2       	ldi	r20, 0x21	; 33
    60f6:	54 e2       	ldi	r21, 0x24	; 36
    60f8:	6d e1       	ldi	r22, 0x1D	; 29
    60fa:	74 e2       	ldi	r23, 0x24	; 36
		isr_calc_next_frame(&dac_io_dac1_buf[0][0], &g_dds1_reg, &g_dds1_inc);
    60fc:	81 e9       	ldi	r24, 0x91	; 145
    60fe:	93 e2       	ldi	r25, 0x23	; 35
    6100:	01 dd       	rcall	.-1534   	; 0x5b04 <isr_calc_next_frame>
    6102:	49 e1       	ldi	r20, 0x19	; 25
    6104:	54 e2       	ldi	r21, 0x24	; 36
    6106:	63 e2       	ldi	r22, 0x23	; 35
    6108:	70 e2       	ldi	r23, 0x20	; 32

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    610a:	81 e1       	ldi	r24, 0x11	; 17
    610c:	93 e2       	ldi	r25, 0x23	; 35
	cpu_irq_disable();
    610e:	fa dc       	rcall	.-1548   	; 0x5b04 <isr_calc_next_frame>
	return flags;
    6110:	8f b7       	in	r24, 0x3f	; 63
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    6112:	8b 87       	std	Y+11, r24	; 0x0b
    6114:	f8 94       	cli
    6116:	9b 85       	ldd	r25, Y+11	; 0x0b
    6118:	e0 e1       	ldi	r30, 0x10	; 16
    611a:	f1 e0       	ldi	r31, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    611c:	80 81       	ld	r24, Z

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    611e:	80 68       	ori	r24, 0x80	; 128
    6120:	80 83       	st	Z, r24
	cpu_irq_disable();
    6122:	9f bf       	out	0x3f, r25	; 63
	return flags;
    6124:	8f b7       	in	r24, 0x3f	; 63
    6126:	8a 87       	std	Y+10, r24	; 0x0a
    6128:	f8 94       	cli
    612a:	9a 85       	ldd	r25, Y+10	; 0x0a
    612c:	e0 e3       	ldi	r30, 0x30	; 48
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    612e:	f1 e0       	ldi	r31, 0x01	; 1
    6130:	80 81       	ld	r24, Z
}

static void adc_start(void)
{
	/* Power up after configurations are being set */
	adc_enable(&ADCA);
    6132:	80 68       	ori	r24, 0x80	; 128
    6134:	80 83       	st	Z, r24
    6136:	9f bf       	out	0x3f, r25	; 63
    6138:	1f bf       	out	0x3f, r17	; 63
}


static void usb_init(void)
{
	udc_start();
    613a:	80 e0       	ldi	r24, 0x00	; 0
    613c:	92 e0       	ldi	r25, 0x02	; 2

#if 1
	stdio_usb_init();	// Init and enable stdio_usb
    613e:	0e 94 84 15 	call	0x2b08	; 0x2b08 <adc_enable>
	stdio_usb_enable();
    6142:	6d d6       	rcall	.+3290   	; 0x6e1e <udc_start>
    6144:	0e 94 63 3a 	call	0x74c6	; 0x74c6 <stdio_usb_init>

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB

	/* Start TWI channels */
	twi_start();		// Start TWI
    6148:	0e 94 5f 3a 	call	0x74be	; 0x74be <stdio_usb_enable>

	/* The application code */
	runmode = 1;
    614c:	0e 94 1a 14 	call	0x2834	; 0x2834 <twi_start>
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    6150:	90 92 7e 24 	sts	0x247E, r9	; 0x80247e <runmode>
    6154:	0f 2e       	mov	r0, r31
	task_twi_lcd(now);
}

static void task(void)
{
	uint32_t now = rtc_get_time();
    6156:	f8 e4       	ldi	r31, 0x48	; 72
    6158:	4f 2e       	mov	r4, r31
    615a:	51 2c       	mov	r5, r1
    615c:	f0 2d       	mov	r31, r0

	/* TASK when woken up */
	task_dac(now);
    615e:	0e 94 a8 12 	call	0x2550	; 0x2550 <rtc_get_time>
			 l_adc_temp_cur;
	float	 l_temp;
	uint16_t l_temp_i;
	uint8_t	 l_temp_f;

	if ((now - adc_last) >= 512) {
    6162:	6b 01       	movw	r12, r22
    6164:	7c 01       	movw	r14, r24
    6166:	ca db       	rcall	.-2156   	; 0x58fc <task_dac>
    6168:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <adc_last.7384>
    616c:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <adc_last.7384+0x1>
    6170:	a0 91 db 22 	lds	r26, 0x22DB	; 0x8022db <adc_last.7384+0x2>
    6174:	b0 91 dc 22 	lds	r27, 0x22DC	; 0x8022dc <adc_last.7384+0x3>
    6178:	a7 01       	movw	r20, r14
    617a:	96 01       	movw	r18, r12
    617c:	28 1b       	sub	r18, r24
    617e:	39 0b       	sbc	r19, r25
    6180:	4a 0b       	sbc	r20, r26
    6182:	5b 0b       	sbc	r21, r27
    6184:	da 01       	movw	r26, r20
    6186:	c9 01       	movw	r24, r18
    6188:	81 15       	cp	r24, r1
    618a:	92 40       	sbci	r25, 0x02	; 2
    618c:	a1 05       	cpc	r26, r1
		adc_last = now;
    618e:	b1 05       	cpc	r27, r1
    6190:	08 f4       	brcc	.+2      	; 0x6194 <__stack+0x195>
    6192:	ce c0       	rjmp	.+412    	; 0x6330 <__stack+0x331>
    6194:	c0 92 d9 22 	sts	0x22D9, r12	; 0x8022d9 <adc_last.7384>
    6198:	d0 92 da 22 	sts	0x22DA, r13	; 0x8022da <adc_last.7384+0x1>
    619c:	e0 92 db 22 	sts	0x22DB, r14	; 0x8022db <adc_last.7384+0x2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    61a0:	f0 92 dc 22 	sts	0x22DC, r15	; 0x8022dc <adc_last.7384+0x3>
	cpu_irq_disable();
	return flags;
    61a4:	8f b7       	in	r24, 0x3f	; 63

		irqflags_t flags = cpu_irq_save();
		l_adc_vctcxo_cur = g_adc_vctcxo_cur;
    61a6:	89 83       	std	Y+1, r24	; 0x01
    61a8:	f8 94       	cli
    61aa:	89 81       	ldd	r24, Y+1	; 0x01
    61ac:	40 91 61 24 	lds	r20, 0x2461	; 0x802461 <g_adc_vctcxo_cur>
    61b0:	49 8b       	std	Y+17, r20	; 0x11
    61b2:	50 91 62 24 	lds	r21, 0x2462	; 0x802462 <g_adc_vctcxo_cur+0x1>
    61b6:	5a 8b       	std	Y+18, r21	; 0x12
    61b8:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <g_adc_vctcxo_cur+0x2>
    61bc:	9b 8b       	std	Y+19, r25	; 0x13
		l_adc_5v0_cur = g_adc_5v0_cur;
    61be:	a0 91 64 24 	lds	r26, 0x2464	; 0x802464 <g_adc_vctcxo_cur+0x3>
    61c2:	ac 8b       	std	Y+20, r26	; 0x14
    61c4:	b0 91 57 24 	lds	r27, 0x2457	; 0x802457 <g_adc_5v0_cur>
    61c8:	bd 8b       	std	Y+21, r27	; 0x15
    61ca:	e0 91 58 24 	lds	r30, 0x2458	; 0x802458 <g_adc_5v0_cur+0x1>
    61ce:	ee 8b       	std	Y+22, r30	; 0x16
    61d0:	f0 91 59 24 	lds	r31, 0x2459	; 0x802459 <g_adc_5v0_cur+0x2>
    61d4:	ff 8b       	std	Y+23, r31	; 0x17
		l_adc_vbat_cur = g_adc_vbat_cur;
    61d6:	20 91 5a 24 	lds	r18, 0x245A	; 0x80245a <g_adc_5v0_cur+0x3>
    61da:	28 8f       	std	Y+24, r18	; 0x18
    61dc:	30 91 4d 24 	lds	r19, 0x244D	; 0x80244d <g_adc_vbat_cur>
    61e0:	39 8f       	std	Y+25, r19	; 0x19
    61e2:	40 91 4e 24 	lds	r20, 0x244E	; 0x80244e <g_adc_vbat_cur+0x1>
    61e6:	4a 8f       	std	Y+26, r20	; 0x1a
    61e8:	50 91 4f 24 	lds	r21, 0x244F	; 0x80244f <g_adc_vbat_cur+0x2>
    61ec:	5b 8f       	std	Y+27, r21	; 0x1b
		l_adc_io_adc4_cur = g_adc_io_adc4_cur;
    61ee:	90 91 50 24 	lds	r25, 0x2450	; 0x802450 <g_adc_vbat_cur+0x3>
    61f2:	9c 8f       	std	Y+28, r25	; 0x1c
    61f4:	a0 91 43 24 	lds	r26, 0x2443	; 0x802443 <g_adc_io_adc4_cur>
    61f8:	ad 8f       	std	Y+29, r26	; 0x1d
    61fa:	b0 91 44 24 	lds	r27, 0x2444	; 0x802444 <g_adc_io_adc4_cur+0x1>
    61fe:	be 8f       	std	Y+30, r27	; 0x1e
    6200:	e0 91 45 24 	lds	r30, 0x2445	; 0x802445 <g_adc_io_adc4_cur+0x2>
    6204:	ef 8f       	std	Y+31, r30	; 0x1f
		l_adc_io_adc5_cur = g_adc_io_adc5_cur;
    6206:	f0 91 46 24 	lds	r31, 0x2446	; 0x802446 <g_adc_io_adc4_cur+0x3>
    620a:	f8 a3       	std	Y+32, r31	; 0x20
    620c:	20 91 39 24 	lds	r18, 0x2439	; 0x802439 <g_adc_io_adc5_cur>
    6210:	29 a3       	std	Y+33, r18	; 0x21
    6212:	30 91 3a 24 	lds	r19, 0x243A	; 0x80243a <g_adc_io_adc5_cur+0x1>
    6216:	3a a3       	std	Y+34, r19	; 0x22
    6218:	20 90 3b 24 	lds	r2, 0x243B	; 0x80243b <g_adc_io_adc5_cur+0x2>
		l_adc_temp_cur = g_adc_temp_cur;
    621c:	30 90 3c 24 	lds	r3, 0x243C	; 0x80243c <g_adc_io_adc5_cur+0x3>
    6220:	60 90 2f 24 	lds	r6, 0x242F	; 0x80242f <g_adc_temp_cur>
    6224:	10 91 30 24 	lds	r17, 0x2430	; 0x802430 <g_adc_temp_cur+0x1>
    6228:	00 91 31 24 	lds	r16, 0x2431	; 0x802431 <g_adc_temp_cur+0x2>
		cpu_irq_restore(flags);

		l_temp = (((l_adc_temp_cur / ((float)C_ADC_STEPS)) * C_VCC_3V0_AREF_VOLTS) / C_TEMPSENSE_MULT) - C_0DEGC_K;
    622c:	70 90 32 24 	lds	r7, 0x2432	; 0x802432 <g_adc_temp_cur+0x3>
    6230:	8f bf       	out	0x3f, r24	; 63
    6232:	66 2d       	mov	r22, r6
    6234:	71 2f       	mov	r23, r17
    6236:	80 2f       	mov	r24, r16
    6238:	97 2d       	mov	r25, r7
    623a:	0e 94 93 3c 	call	0x7926	; 0x7926 <__floatsisf>
    623e:	20 e0       	ldi	r18, 0x00	; 0
    6240:	30 e0       	ldi	r19, 0x00	; 0
    6242:	40 e0       	ldi	r20, 0x00	; 0
    6244:	59 e3       	ldi	r21, 0x39	; 57
    6246:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <__mulsf3>
    624a:	20 e0       	ldi	r18, 0x00	; 0
    624c:	30 e0       	ldi	r19, 0x00	; 0
    624e:	40 e4       	ldi	r20, 0x40	; 64
    6250:	50 e4       	ldi	r21, 0x40	; 64
    6252:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <__mulsf3>
    6256:	24 e7       	ldi	r18, 0x74	; 116
    6258:	3d ea       	ldi	r19, 0xAD	; 173
    625a:	46 ee       	ldi	r20, 0xE6	; 230
    625c:	5a e3       	ldi	r21, 0x3A	; 58
    625e:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <__divsf3>
    6262:	23 e3       	ldi	r18, 0x33	; 51
    6264:	33 e9       	ldi	r19, 0x93	; 147
    6266:	48 e8       	ldi	r20, 0x88	; 136
    6268:	53 e4       	ldi	r21, 0x43	; 67
    626a:	0e 94 98 3b 	call	0x7730	; 0x7730 <__subsf3>
    626e:	6d 87       	std	Y+13, r22	; 0x0d
		l_temp_i = (uint16_t)l_temp;
    6270:	7e 87       	std	Y+14, r23	; 0x0e
    6272:	8f 87       	std	Y+15, r24	; 0x0f
    6274:	98 8b       	std	Y+16, r25	; 0x10
    6276:	0e 94 65 3c 	call	0x78ca	; 0x78ca <__fixunssfsi>
		l_temp_f = (uint8_t)(10 * (l_temp - l_temp_i));

		printf("time = %5ld: vctcxo=%04ld, 5v0=%04ld, vbat=%04ld, adc4=%04ld, adc5=%04ld, temp=%04ld = %d.%dC\r\n",
    627a:	4b 01       	movw	r8, r22
    627c:	5c 01       	movw	r10, r24
    627e:	80 e0       	ldi	r24, 0x00	; 0
    6280:	90 e0       	ldi	r25, 0x00	; 0
    6282:	0e 94 91 3c 	call	0x7922	; 0x7922 <__floatunsisf>
    6286:	9b 01       	movw	r18, r22
    6288:	ac 01       	movw	r20, r24
    628a:	6d 85       	ldd	r22, Y+13	; 0x0d
    628c:	7e 85       	ldd	r23, Y+14	; 0x0e
    628e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6290:	98 89       	ldd	r25, Y+16	; 0x10
    6292:	0e 94 98 3b 	call	0x7730	; 0x7730 <__subsf3>
    6296:	20 e0       	ldi	r18, 0x00	; 0
    6298:	30 e0       	ldi	r19, 0x00	; 0
    629a:	40 e2       	ldi	r20, 0x20	; 32
    629c:	51 e4       	ldi	r21, 0x41	; 65
    629e:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <__mulsf3>
    62a2:	0e 94 65 3c 	call	0x78ca	; 0x78ca <__fixunssfsi>
    62a6:	1f 92       	push	r1
    62a8:	6f 93       	push	r22
    62aa:	9f 92       	push	r9
    62ac:	8f 92       	push	r8
    62ae:	7f 92       	push	r7
    62b0:	0f 93       	push	r16
    62b2:	1f 93       	push	r17
    62b4:	6f 92       	push	r6
    62b6:	3f 92       	push	r3
    62b8:	2f 92       	push	r2
    62ba:	4a a1       	ldd	r20, Y+34	; 0x22
    62bc:	4f 93       	push	r20
    62be:	59 a1       	ldd	r21, Y+33	; 0x21
    62c0:	5f 93       	push	r21
    62c2:	88 a1       	ldd	r24, Y+32	; 0x20
    62c4:	8f 93       	push	r24
    62c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    62c8:	9f 93       	push	r25
    62ca:	ae 8d       	ldd	r26, Y+30	; 0x1e
    62cc:	af 93       	push	r26
    62ce:	bd 8d       	ldd	r27, Y+29	; 0x1d
    62d0:	bf 93       	push	r27
    62d2:	ec 8d       	ldd	r30, Y+28	; 0x1c
    62d4:	ef 93       	push	r30
    62d6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    62d8:	ff 93       	push	r31
    62da:	2a 8d       	ldd	r18, Y+26	; 0x1a
    62dc:	2f 93       	push	r18
    62de:	39 8d       	ldd	r19, Y+25	; 0x19
    62e0:	3f 93       	push	r19
    62e2:	48 8d       	ldd	r20, Y+24	; 0x18
    62e4:	4f 93       	push	r20
    62e6:	5f 89       	ldd	r21, Y+23	; 0x17
    62e8:	5f 93       	push	r21
    62ea:	8e 89       	ldd	r24, Y+22	; 0x16
    62ec:	8f 93       	push	r24
    62ee:	9d 89       	ldd	r25, Y+21	; 0x15
    62f0:	9f 93       	push	r25
    62f2:	ac 89       	ldd	r26, Y+20	; 0x14
    62f4:	af 93       	push	r26
    62f6:	bb 89       	ldd	r27, Y+19	; 0x13
    62f8:	bf 93       	push	r27
    62fa:	ea 89       	ldd	r30, Y+18	; 0x12
    62fc:	ef 93       	push	r30
    62fe:	f9 89       	ldd	r31, Y+17	; 0x11
    6300:	ff 93       	push	r31
    6302:	d7 01       	movw	r26, r14
    6304:	c6 01       	movw	r24, r12
    6306:	07 2e       	mov	r0, r23
    6308:	7a e0       	ldi	r23, 0x0A	; 10
    630a:	b6 95       	lsr	r27
    630c:	a7 95       	ror	r26
    630e:	97 95       	ror	r25
    6310:	87 95       	ror	r24
    6312:	7a 95       	dec	r23
    6314:	d1 f7       	brne	.-12     	; 0x630a <__stack+0x30b>
    6316:	70 2d       	mov	r23, r0
    6318:	bf 93       	push	r27
    631a:	af 93       	push	r26
    631c:	9f 93       	push	r25
    631e:	8f 93       	push	r24
    6320:	22 ef       	ldi	r18, 0xF2	; 242
    6322:	30 e2       	ldi	r19, 0x20	; 32
    6324:	3f 93       	push	r19
    6326:	2f 93       	push	r18
    6328:	0e 94 d5 3d 	call	0x7baa	; 0x7baa <printf>
}

static void task_twi(uint32_t now)
{
	/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
	task_twi_onboard(now);
    632c:	cd bf       	out	0x3d, r28	; 61
    632e:	de bf       	out	0x3e, r29	; 62
    6330:	c7 01       	movw	r24, r14

	/* TWI2 - LCD Port */
	task_twi_lcd(now);
    6332:	b6 01       	movw	r22, r12
    6334:	0e 94 3f 14 	call	0x287e	; 0x287e <task_twi_onboard>
    6338:	c7 01       	movw	r24, r14
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    633a:	b6 01       	movw	r22, r12

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    633c:	0e 94 40 14 	call	0x2880	; 0x2880 <task_twi_lcd>
    6340:	f8 94       	cli
    6342:	a5 ed       	ldi	r26, 0xD5	; 213
    6344:	b5 e2       	ldi	r27, 0x25	; 37
    6346:	8c 91       	ld	r24, X
    6348:	81 11       	cpse	r24, r1
    634a:	09 c0       	rjmp	.+18     	; 0x635e <__stack+0x35f>
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    634c:	a6 ed       	ldi	r26, 0xD6	; 214

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    634e:	b5 e2       	ldi	r27, 0x25	; 37
    6350:	e0 e0       	ldi	r30, 0x00	; 0
    6352:	ef 5f       	subi	r30, 0xFF	; 255
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    6354:	8d 91       	ld	r24, X+
    6356:	88 23       	and	r24, r24
		cpu_irq_enable();
    6358:	e1 f3       	breq	.-8      	; 0x6352 <__stack+0x353>
    635a:	e1 11       	cpse	r30, r1
    635c:	02 c0       	rjmp	.+4      	; 0x6362 <__stack+0x363>
    635e:	78 94       	sei

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    6360:	12 c0       	rjmp	.+36     	; 0x6386 <__stack+0x387>
    6362:	d2 01       	movw	r26, r4
    6364:	8c 91       	ld	r24, X
    6366:	f0 e0       	ldi	r31, 0x00	; 0
    6368:	e2 5d       	subi	r30, 0xD2	; 210
    636a:	ff 4d       	sbci	r31, 0xDF	; 223
    636c:	81 7f       	andi	r24, 0xF1	; 241
	sleep_enable();
    636e:	90 81       	ld	r25, Z
    6370:	89 2b       	or	r24, r25
    6372:	8c 93       	st	X, r24

	cpu_irq_enable();
    6374:	8c 91       	ld	r24, X
	sleep_enter();
    6376:	81 60       	ori	r24, 0x01	; 1

	sleep_disable();
    6378:	8c 93       	st	X, r24
    637a:	78 94       	sei
    637c:	88 95       	sleep
    637e:	f2 01       	movw	r30, r4
	/* Start TWI channels */
	twi_start();		// Start TWI

	/* The application code */
	runmode = 1;
    while (runmode) {
    6380:	80 81       	ld	r24, Z
    6382:	8e 7f       	andi	r24, 0xFE	; 254
    6384:	80 83       	st	Z, r24
    6386:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <runmode>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    638a:	81 11       	cpse	r24, r1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    638c:	e8 ce       	rjmp	.-560    	; 0x615e <__stack+0x15f>
    638e:	f8 94       	cli
    6390:	f8 94       	cli
    6392:	80 91 d5 25 	lds	r24, 0x25D5	; 0x8025d5 <sleepmgr_locks>
    6396:	81 11       	cpse	r24, r1
    6398:	09 c0       	rjmp	.+18     	; 0x63ac <__stack+0x3ad>
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    639a:	a6 ed       	ldi	r26, 0xD6	; 214

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    639c:	b5 e2       	ldi	r27, 0x25	; 37
    639e:	e0 e0       	ldi	r30, 0x00	; 0
    63a0:	ef 5f       	subi	r30, 0xFF	; 255
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    63a2:	8d 91       	ld	r24, X+
    63a4:	88 23       	and	r24, r24
		cpu_irq_enable();
    63a6:	e1 f3       	breq	.-8      	; 0x63a0 <__stack+0x3a1>
    63a8:	e1 11       	cpse	r30, r1
    63aa:	02 c0       	rjmp	.+4      	; 0x63b0 <__stack+0x3b1>
    63ac:	78 94       	sei
    63ae:	13 c0       	rjmp	.+38     	; 0x63d6 <__stack+0x3d7>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    63b0:	a8 e4       	ldi	r26, 0x48	; 72
    63b2:	b0 e0       	ldi	r27, 0x00	; 0
    63b4:	8c 91       	ld	r24, X
    63b6:	f0 e0       	ldi	r31, 0x00	; 0
    63b8:	e2 5d       	subi	r30, 0xD2	; 210
    63ba:	ff 4d       	sbci	r31, 0xDF	; 223
    63bc:	98 2f       	mov	r25, r24
    63be:	91 7f       	andi	r25, 0xF1	; 241
	sleep_enable();
    63c0:	80 81       	ld	r24, Z
    63c2:	89 2b       	or	r24, r25
    63c4:	8c 93       	st	X, r24

	cpu_irq_enable();
    63c6:	8c 91       	ld	r24, X
	sleep_enter();
    63c8:	81 60       	ori	r24, 0x01	; 1

	sleep_disable();
    63ca:	8c 93       	st	X, r24
    63cc:	78 94       	sei
    63ce:	88 95       	sleep

	cpu_irq_disable();
	sleepmgr_enter_sleep();

	return retcode;
}
    63d0:	8c 91       	ld	r24, X
    63d2:	8e 7f       	andi	r24, 0xFE	; 254
    63d4:	8c 93       	st	X, r24
    63d6:	80 e0       	ldi	r24, 0x00	; 0
    63d8:	90 e0       	ldi	r25, 0x00	; 0
    63da:	a2 96       	adiw	r28, 0x22	; 34
    63dc:	cd bf       	out	0x3d, r28	; 61
    63de:	de bf       	out	0x3e, r29	; 62
    63e0:	df 91       	pop	r29
    63e2:	cf 91       	pop	r28
    63e4:	1f 91       	pop	r17
    63e6:	0f 91       	pop	r16
    63e8:	ff 90       	pop	r15
    63ea:	ef 90       	pop	r14
    63ec:	df 90       	pop	r13
    63ee:	cf 90       	pop	r12
    63f0:	bf 90       	pop	r11
    63f2:	af 90       	pop	r10
    63f4:	9f 90       	pop	r9
    63f6:	8f 90       	pop	r8
    63f8:	7f 90       	pop	r7
    63fa:	6f 90       	pop	r6
    63fc:	5f 90       	pop	r5
    63fe:	4f 90       	pop	r4
    6400:	3f 90       	pop	r3
    6402:	2f 90       	pop	r2
    6404:	08 95       	ret

00006406 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    6406:	cf 93       	push	r28
    6408:	df 93       	push	r29
    640a:	cd b7       	in	r28, 0x3d	; 61
    640c:	de b7       	in	r29, 0x3e	; 62
    640e:	28 97       	sbiw	r28, 0x08	; 8
    6410:	cd bf       	out	0x3d, r28	; 61
    6412:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    6414:	8f ef       	ldi	r24, 0xFF	; 255
    6416:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    641a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    641e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    6422:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    6426:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    642a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    642e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    6432:	61 e0       	ldi	r22, 0x01	; 1
    6434:	81 e4       	ldi	r24, 0x41	; 65
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	0e 94 96 3a 	call	0x752c	; 0x752c <ccp_write_io>
    643c:	6c e1       	ldi	r22, 0x1C	; 28
    643e:	70 e0       	ldi	r23, 0x00	; 0
    6440:	82 e0       	ldi	r24, 0x02	; 2
    6442:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    6446:	8a 83       	std	Y+2, r24	; 0x02
    6448:	6d e1       	ldi	r22, 0x1D	; 29
    644a:	70 e0       	ldi	r23, 0x00	; 0
    644c:	82 e0       	ldi	r24, 0x02	; 2
    644e:	0e 94 8c 3a 	call	0x7518	; 0x7518 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    6452:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    6454:	89 81       	ldd	r24, Y+1	; 0x01
    6456:	9a 81       	ldd	r25, Y+2	; 0x02
    6458:	01 96       	adiw	r24, 0x01	; 1
    645a:	21 f4       	brne	.+8      	; 0x6464 <sysclk_init+0x5e>
		cal = 0x2340;
    645c:	80 e4       	ldi	r24, 0x40	; 64
    645e:	93 e2       	ldi	r25, 0x23	; 35
    6460:	89 83       	std	Y+1, r24	; 0x01
    6462:	9a 83       	std	Y+2, r25	; 0x02
    6464:	89 81       	ldd	r24, Y+1	; 0x01
    6466:	9a 81       	ldd	r25, Y+2	; 0x02
    6468:	8b 83       	std	Y+3, r24	; 0x03
    646a:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    646c:	e0 e6       	ldi	r30, 0x60	; 96
    646e:	f0 e0       	ldi	r31, 0x00	; 0
    6470:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    6472:	8c 81       	ldd	r24, Y+4	; 0x04
    6474:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    6476:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    647a:	84 fd       	sbrc	r24, 4
    647c:	21 c0       	rjmp	.+66     	; 0x64c0 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    647e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    6482:	83 fd       	sbrc	r24, 3
    6484:	0e c0       	rjmp	.+28     	; 0x64a2 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    6486:	e0 e5       	ldi	r30, 0x50	; 80
    6488:	f0 e0       	ldi	r31, 0x00	; 0
    648a:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    648c:	8f b7       	in	r24, 0x3f	; 63
    648e:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    6490:	f8 94       	cli
	return flags;
    6492:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    6494:	80 81       	ld	r24, Z
    6496:	88 60       	ori	r24, 0x08	; 8
    6498:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    649a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    649c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    649e:	83 ff       	sbrs	r24, 3
    64a0:	fd cf       	rjmp	.-6      	; 0x649c <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    64a2:	8f b7       	in	r24, 0x3f	; 63
    64a4:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    64a6:	f8 94       	cli
	return flags;
    64a8:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    64aa:	e0 e5       	ldi	r30, 0x50	; 80
    64ac:	f0 e0       	ldi	r31, 0x00	; 0
    64ae:	83 ec       	ldi	r24, 0xC3	; 195
    64b0:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    64b2:	80 81       	ld	r24, Z
    64b4:	80 61       	ori	r24, 0x10	; 16
    64b6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    64b8:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    64ba:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    64bc:	84 ff       	sbrs	r24, 4
    64be:	fd cf       	rjmp	.-6      	; 0x64ba <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    64c0:	64 e0       	ldi	r22, 0x04	; 4
    64c2:	80 e4       	ldi	r24, 0x40	; 64
    64c4:	90 e0       	ldi	r25, 0x00	; 0
    64c6:	0e 94 96 3a 	call	0x752c	; 0x752c <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    64ca:	8f b7       	in	r24, 0x3f	; 63
    64cc:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    64ce:	f8 94       	cli
	return flags;
    64d0:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    64d2:	e0 e5       	ldi	r30, 0x50	; 80
    64d4:	f0 e0       	ldi	r31, 0x00	; 0
    64d6:	80 81       	ld	r24, Z
    64d8:	8e 7f       	andi	r24, 0xFE	; 254
    64da:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    64dc:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    64de:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    64e0:	8f b7       	in	r24, 0x3f	; 63
    64e2:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    64e4:	f8 94       	cli
	return flags;
    64e6:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    64e8:	80 81       	ld	r24, Z
    64ea:	88 60       	ori	r24, 0x08	; 8
    64ec:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    64ee:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    64f0:	81 81       	ldd	r24, Z+1	; 0x01
    64f2:	83 ff       	sbrs	r24, 3
    64f4:	fd cf       	rjmp	.-6      	; 0x64f0 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    64f6:	8b e0       	ldi	r24, 0x0B	; 11
    64f8:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    64fc:	28 96       	adiw	r28, 0x08	; 8
    64fe:	cd bf       	out	0x3d, r28	; 61
    6500:	de bf       	out	0x3e, r29	; 62
    6502:	df 91       	pop	r29
    6504:	cf 91       	pop	r28
    6506:	08 95       	ret

00006508 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    6508:	cf 93       	push	r28
    650a:	df 93       	push	r29
    650c:	1f 92       	push	r1
    650e:	cd b7       	in	r28, 0x3d	; 61
    6510:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6512:	9f b7       	in	r25, 0x3f	; 63
    6514:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    6516:	f8 94       	cli
	return flags;
    6518:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    651a:	e8 2f       	mov	r30, r24
    651c:	f0 e0       	ldi	r31, 0x00	; 0
    651e:	e0 59       	subi	r30, 0x90	; 144
    6520:	ff 4f       	sbci	r31, 0xFF	; 255
    6522:	60 95       	com	r22
    6524:	80 81       	ld	r24, Z
    6526:	68 23       	and	r22, r24
    6528:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    652a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    652c:	0f 90       	pop	r0
    652e:	df 91       	pop	r29
    6530:	cf 91       	pop	r28
    6532:	08 95       	ret

00006534 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    6534:	cf 93       	push	r28
    6536:	df 93       	push	r29
    6538:	1f 92       	push	r1
    653a:	cd b7       	in	r28, 0x3d	; 61
    653c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    653e:	9f b7       	in	r25, 0x3f	; 63
    6540:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    6542:	f8 94       	cli
	return flags;
    6544:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    6546:	e8 2f       	mov	r30, r24
    6548:	f0 e0       	ldi	r31, 0x00	; 0
    654a:	e0 59       	subi	r30, 0x90	; 144
    654c:	ff 4f       	sbci	r31, 0xFF	; 255
    654e:	80 81       	ld	r24, Z
    6550:	68 2b       	or	r22, r24
    6552:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6554:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    6556:	0f 90       	pop	r0
    6558:	df 91       	pop	r29
    655a:	cf 91       	pop	r28
    655c:	08 95       	ret

0000655e <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    655e:	cf 93       	push	r28
    6560:	df 93       	push	r29
    6562:	1f 92       	push	r1
    6564:	1f 92       	push	r1
    6566:	cd b7       	in	r28, 0x3d	; 61
    6568:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    656a:	86 30       	cpi	r24, 0x06	; 6
    656c:	11 f0       	breq	.+4      	; 0x6572 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    656e:	60 e0       	ldi	r22, 0x00	; 0
    6570:	01 c0       	rjmp	.+2      	; 0x6574 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    6572:	68 e1       	ldi	r22, 0x18	; 24
    6574:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    6578:	81 fd       	sbrc	r24, 1
    657a:	2a c0       	rjmp	.+84     	; 0x65d0 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    657c:	8f b7       	in	r24, 0x3f	; 63
    657e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    6580:	f8 94       	cli
	return flags;
    6582:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    6584:	e0 e5       	ldi	r30, 0x50	; 80
    6586:	f0 e0       	ldi	r31, 0x00	; 0
    6588:	80 81       	ld	r24, Z
    658a:	82 60       	ori	r24, 0x02	; 2
    658c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    658e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    6590:	81 81       	ldd	r24, Z+1	; 0x01
    6592:	81 ff       	sbrs	r24, 1
    6594:	fd cf       	rjmp	.-6      	; 0x6590 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6596:	8f b7       	in	r24, 0x3f	; 63
    6598:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    659a:	f8 94       	cli
	return flags;
    659c:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    659e:	a0 e5       	ldi	r26, 0x50	; 80
    65a0:	b0 e0       	ldi	r27, 0x00	; 0
    65a2:	16 96       	adiw	r26, 0x06	; 6
    65a4:	8c 91       	ld	r24, X
    65a6:	16 97       	sbiw	r26, 0x06	; 6
    65a8:	89 7f       	andi	r24, 0xF9	; 249
    65aa:	16 96       	adiw	r26, 0x06	; 6
    65ac:	8c 93       	st	X, r24
    65ae:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    65b0:	e0 e6       	ldi	r30, 0x60	; 96
    65b2:	f0 e0       	ldi	r31, 0x00	; 0
    65b4:	80 e8       	ldi	r24, 0x80	; 128
    65b6:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    65b8:	8b eb       	ldi	r24, 0xBB	; 187
    65ba:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    65bc:	16 96       	adiw	r26, 0x06	; 6
    65be:	8c 91       	ld	r24, X
    65c0:	16 97       	sbiw	r26, 0x06	; 6
    65c2:	84 60       	ori	r24, 0x04	; 4
    65c4:	16 96       	adiw	r26, 0x06	; 6
    65c6:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    65c8:	80 81       	ld	r24, Z
    65ca:	81 60       	ori	r24, 0x01	; 1
    65cc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    65ce:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    65d0:	63 60       	ori	r22, 0x03	; 3
    65d2:	84 e4       	ldi	r24, 0x44	; 68
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	aa d7       	rcall	.+3924   	; 0x752c <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    65d8:	60 e4       	ldi	r22, 0x40	; 64
    65da:	80 e0       	ldi	r24, 0x00	; 0
    65dc:	95 df       	rcall	.-214    	; 0x6508 <sysclk_enable_module>
}
    65de:	0f 90       	pop	r0
    65e0:	0f 90       	pop	r0
    65e2:	df 91       	pop	r29
    65e4:	cf 91       	pop	r28
    65e6:	08 95       	ret

000065e8 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    65e8:	80 91 94 25 	lds	r24, 0x2594	; 0x802594 <udi_cdc_nb_comm_enabled>
    65ec:	81 50       	subi	r24, 0x01	; 1
    65ee:	80 93 94 25 	sts	0x2594, r24	; 0x802594 <udi_cdc_nb_comm_enabled>
    65f2:	08 95       	ret

000065f4 <udi_cdc_data_setup>:
    65f4:	80 e0       	ldi	r24, 0x00	; 0
    65f6:	08 95       	ret

000065f8 <udi_cdc_getsetting>:
    65f8:	80 e0       	ldi	r24, 0x00	; 0
    65fa:	08 95       	ret

000065fc <udi_cdc_line_coding_received>:
    65fc:	62 ea       	ldi	r22, 0xA2	; 162
    65fe:	75 e2       	ldi	r23, 0x25	; 37
    6600:	80 e0       	ldi	r24, 0x00	; 0
    6602:	2c cb       	rjmp	.-2472   	; 0x5c5c <usb_callback_config>
    6604:	08 95       	ret

00006606 <udi_cdc_comm_enable>:
    6606:	10 92 94 25 	sts	0x2594, r1	; 0x802594 <udi_cdc_nb_comm_enabled>
    660a:	10 92 a0 25 	sts	0x25A0, r1	; 0x8025a0 <udi_cdc_state>
    660e:	10 92 a1 25 	sts	0x25A1, r1	; 0x8025a1 <udi_cdc_state+0x1>
    6612:	e6 e9       	ldi	r30, 0x96	; 150
    6614:	f5 e2       	ldi	r31, 0x25	; 37
    6616:	81 ea       	ldi	r24, 0xA1	; 161
    6618:	80 83       	st	Z, r24
    661a:	80 e2       	ldi	r24, 0x20	; 32
    661c:	81 83       	std	Z+1, r24	; 0x01
    661e:	12 82       	std	Z+2, r1	; 0x02
    6620:	13 82       	std	Z+3, r1	; 0x03
    6622:	14 82       	std	Z+4, r1	; 0x04
    6624:	15 82       	std	Z+5, r1	; 0x05
    6626:	82 e0       	ldi	r24, 0x02	; 2
    6628:	90 e0       	ldi	r25, 0x00	; 0
    662a:	86 83       	std	Z+6, r24	; 0x06
    662c:	97 83       	std	Z+7, r25	; 0x07
    662e:	10 86       	std	Z+8, r1	; 0x08
    6630:	11 86       	std	Z+9, r1	; 0x09
    6632:	e2 ea       	ldi	r30, 0xA2	; 162
    6634:	f5 e2       	ldi	r31, 0x25	; 37
    6636:	80 e0       	ldi	r24, 0x00	; 0
    6638:	92 ec       	ldi	r25, 0xC2	; 194
    663a:	a1 e0       	ldi	r26, 0x01	; 1
    663c:	b0 e0       	ldi	r27, 0x00	; 0
    663e:	80 83       	st	Z, r24
    6640:	91 83       	std	Z+1, r25	; 0x01
    6642:	a2 83       	std	Z+2, r26	; 0x02
    6644:	b3 83       	std	Z+3, r27	; 0x03
    6646:	14 82       	std	Z+4, r1	; 0x04
    6648:	15 82       	std	Z+5, r1	; 0x05
    664a:	88 e0       	ldi	r24, 0x08	; 8
    664c:	86 83       	std	Z+6, r24	; 0x06
    664e:	bf 01       	movw	r22, r30
    6650:	80 e0       	ldi	r24, 0x00	; 0
    6652:	04 db       	rcall	.-2552   	; 0x5c5c <usb_callback_config>
    6654:	fc da       	rcall	.-2568   	; 0x5c4e <usb_callback_cdc_enable>
    6656:	88 23       	and	r24, r24
    6658:	29 f0       	breq	.+10     	; 0x6664 <udi_cdc_comm_enable+0x5e>
    665a:	90 91 94 25 	lds	r25, 0x2594	; 0x802594 <udi_cdc_nb_comm_enabled>
    665e:	9f 5f       	subi	r25, 0xFF	; 255
    6660:	90 93 94 25 	sts	0x2594, r25	; 0x802594 <udi_cdc_nb_comm_enabled>
    6664:	08 95       	ret

00006666 <udi_cdc_tx_send>:
    6666:	ff 92       	push	r15
    6668:	0f 93       	push	r16
    666a:	1f 93       	push	r17
    666c:	cf 93       	push	r28
    666e:	df 93       	push	r29
    6670:	1f 92       	push	r1
    6672:	cd b7       	in	r28, 0x3d	; 61
    6674:	de b7       	in	r29, 0x3e	; 62
    6676:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udi_cdc_tx_trans_ongoing>
    667a:	81 11       	cpse	r24, r1
    667c:	9f c0       	rjmp	.+318    	; 0x67bc <udi_cdc_tx_send+0x156>
    667e:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <udd_is_high_speed>
    6682:	88 23       	and	r24, r24
    6684:	51 f0       	breq	.+20     	; 0x669a <udi_cdc_tx_send+0x34>
    6686:	00 91 83 24 	lds	r16, 0x2483	; 0x802483 <udi_cdc_tx_sof_num>
    668a:	10 91 84 24 	lds	r17, 0x2484	; 0x802484 <udi_cdc_tx_sof_num+0x1>
    668e:	0e 94 66 25 	call	0x4acc	; 0x4acc <udd_get_micro_frame_number>
    6692:	08 17       	cp	r16, r24
    6694:	19 07       	cpc	r17, r25
    6696:	59 f4       	brne	.+22     	; 0x66ae <udi_cdc_tx_send+0x48>
    6698:	91 c0       	rjmp	.+290    	; 0x67bc <udi_cdc_tx_send+0x156>
    669a:	00 91 83 24 	lds	r16, 0x2483	; 0x802483 <udi_cdc_tx_sof_num>
    669e:	10 91 84 24 	lds	r17, 0x2484	; 0x802484 <udi_cdc_tx_sof_num+0x1>
    66a2:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <udd_get_frame_number>
    66a6:	08 17       	cp	r16, r24
    66a8:	19 07       	cpc	r17, r25
    66aa:	09 f4       	brne	.+2      	; 0x66ae <udi_cdc_tx_send+0x48>
    66ac:	87 c0       	rjmp	.+270    	; 0x67bc <udi_cdc_tx_send+0x156>
    66ae:	8f b7       	in	r24, 0x3f	; 63
    66b0:	89 83       	std	Y+1, r24	; 0x01
    66b2:	f8 94       	cli
    66b4:	19 81       	ldd	r17, Y+1	; 0x01
    66b6:	00 91 85 24 	lds	r16, 0x2485	; 0x802485 <udi_cdc_tx_buf_sel>
    66ba:	e0 2f       	mov	r30, r16
    66bc:	f0 e0       	ldi	r31, 0x00	; 0
    66be:	ee 0f       	add	r30, r30
    66c0:	ff 1f       	adc	r31, r31
    66c2:	ea 57       	subi	r30, 0x7A	; 122
    66c4:	fb 4d       	sbci	r31, 0xDB	; 219
    66c6:	80 81       	ld	r24, Z
    66c8:	91 81       	ldd	r25, Z+1	; 0x01
    66ca:	89 2b       	or	r24, r25
    66cc:	09 f5       	brne	.+66     	; 0x6710 <udi_cdc_tx_send+0xaa>
    66ce:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <sof_zlp_counter.5059>
    66d2:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <sof_zlp_counter.5059+0x1>
    66d6:	01 96       	adiw	r24, 0x01	; 1
    66d8:	80 93 7f 24 	sts	0x247F, r24	; 0x80247f <sof_zlp_counter.5059>
    66dc:	90 93 80 24 	sts	0x2480, r25	; 0x802480 <sof_zlp_counter.5059+0x1>
    66e0:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <udd_is_high_speed>
    66e4:	81 11       	cpse	r24, r1
    66e6:	07 c0       	rjmp	.+14     	; 0x66f6 <udi_cdc_tx_send+0x90>
    66e8:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <sof_zlp_counter.5059>
    66ec:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <sof_zlp_counter.5059+0x1>
    66f0:	84 36       	cpi	r24, 0x64	; 100
    66f2:	91 05       	cpc	r25, r1
    66f4:	58 f0       	brcs	.+22     	; 0x670c <udi_cdc_tx_send+0xa6>
    66f6:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <udd_is_high_speed>
    66fa:	88 23       	and	r24, r24
    66fc:	49 f0       	breq	.+18     	; 0x6710 <udi_cdc_tx_send+0xaa>
    66fe:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <sof_zlp_counter.5059>
    6702:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <sof_zlp_counter.5059+0x1>
    6706:	80 32       	cpi	r24, 0x20	; 32
    6708:	93 40       	sbci	r25, 0x03	; 3
    670a:	10 f4       	brcc	.+4      	; 0x6710 <udi_cdc_tx_send+0xaa>
    670c:	1f bf       	out	0x3f, r17	; 63
    670e:	56 c0       	rjmp	.+172    	; 0x67bc <udi_cdc_tx_send+0x156>
    6710:	10 92 7f 24 	sts	0x247F, r1	; 0x80247f <sof_zlp_counter.5059>
    6714:	10 92 80 24 	sts	0x2480, r1	; 0x802480 <sof_zlp_counter.5059+0x1>
    6718:	80 91 81 24 	lds	r24, 0x2481	; 0x802481 <udi_cdc_tx_both_buf_to_send>
    671c:	81 11       	cpse	r24, r1
    671e:	06 c0       	rjmp	.+12     	; 0x672c <udi_cdc_tx_send+0xc6>
    6720:	81 e0       	ldi	r24, 0x01	; 1
    6722:	01 11       	cpse	r16, r1
    6724:	80 e0       	ldi	r24, 0x00	; 0
    6726:	80 93 85 24 	sts	0x2485, r24	; 0x802485 <udi_cdc_tx_buf_sel>
    672a:	04 c0       	rjmp	.+8      	; 0x6734 <udi_cdc_tx_send+0xce>
    672c:	81 e0       	ldi	r24, 0x01	; 1
    672e:	01 11       	cpse	r16, r1
    6730:	80 e0       	ldi	r24, 0x00	; 0
    6732:	08 2f       	mov	r16, r24
    6734:	81 e0       	ldi	r24, 0x01	; 1
    6736:	80 93 82 24 	sts	0x2482, r24	; 0x802482 <udi_cdc_tx_trans_ongoing>
    673a:	1f bf       	out	0x3f, r17	; 63
    673c:	10 e0       	ldi	r17, 0x00	; 0
    673e:	f8 01       	movw	r30, r16
    6740:	ee 0f       	add	r30, r30
    6742:	ff 1f       	adc	r31, r31
    6744:	ea 57       	subi	r30, 0x7A	; 122
    6746:	fb 4d       	sbci	r31, 0xDB	; 219
    6748:	80 81       	ld	r24, Z
    674a:	91 81       	ldd	r25, Z+1	; 0x01
    674c:	ff 24       	eor	r15, r15
    674e:	f3 94       	inc	r15
    6750:	80 34       	cpi	r24, 0x40	; 64
    6752:	91 05       	cpc	r25, r1
    6754:	09 f4       	brne	.+2      	; 0x6758 <udi_cdc_tx_send+0xf2>
    6756:	f1 2c       	mov	r15, r1
    6758:	80 34       	cpi	r24, 0x40	; 64
    675a:	91 05       	cpc	r25, r1
    675c:	91 f0       	breq	.+36     	; 0x6782 <udi_cdc_tx_send+0x11c>
    675e:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <udd_is_high_speed>
    6762:	88 23       	and	r24, r24
    6764:	39 f0       	breq	.+14     	; 0x6774 <udi_cdc_tx_send+0x10e>
    6766:	0e 94 66 25 	call	0x4acc	; 0x4acc <udd_get_micro_frame_number>
    676a:	80 93 83 24 	sts	0x2483, r24	; 0x802483 <udi_cdc_tx_sof_num>
    676e:	90 93 84 24 	sts	0x2484, r25	; 0x802484 <udi_cdc_tx_sof_num+0x1>
    6772:	0b c0       	rjmp	.+22     	; 0x678a <udi_cdc_tx_send+0x124>
    6774:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <udd_get_frame_number>
    6778:	80 93 83 24 	sts	0x2483, r24	; 0x802483 <udi_cdc_tx_sof_num>
    677c:	90 93 84 24 	sts	0x2484, r25	; 0x802484 <udi_cdc_tx_sof_num+0x1>
    6780:	04 c0       	rjmp	.+8      	; 0x678a <udi_cdc_tx_send+0x124>
    6782:	10 92 83 24 	sts	0x2483, r1	; 0x802483 <udi_cdc_tx_sof_num>
    6786:	10 92 84 24 	sts	0x2484, r1	; 0x802484 <udi_cdc_tx_sof_num+0x1>
    678a:	f8 01       	movw	r30, r16
    678c:	ee 0f       	add	r30, r30
    678e:	ff 1f       	adc	r31, r31
    6790:	ea 57       	subi	r30, 0x7A	; 122
    6792:	fb 4d       	sbci	r31, 0xDB	; 219
    6794:	20 81       	ld	r18, Z
    6796:	31 81       	ldd	r19, Z+1	; 0x01
    6798:	a8 01       	movw	r20, r16
    679a:	00 24       	eor	r0, r0
    679c:	56 95       	lsr	r21
    679e:	47 95       	ror	r20
    67a0:	07 94       	ror	r0
    67a2:	56 95       	lsr	r21
    67a4:	47 95       	ror	r20
    67a6:	07 94       	ror	r0
    67a8:	54 2f       	mov	r21, r20
    67aa:	40 2d       	mov	r20, r0
    67ac:	46 57       	subi	r20, 0x76	; 118
    67ae:	5b 4d       	sbci	r21, 0xDB	; 219
    67b0:	08 ee       	ldi	r16, 0xE8	; 232
    67b2:	13 e3       	ldi	r17, 0x33	; 51
    67b4:	6f 2d       	mov	r22, r15
    67b6:	81 e8       	ldi	r24, 0x81	; 129
    67b8:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <udd_ep_run>
    67bc:	0f 90       	pop	r0
    67be:	df 91       	pop	r29
    67c0:	cf 91       	pop	r28
    67c2:	1f 91       	pop	r17
    67c4:	0f 91       	pop	r16
    67c6:	ff 90       	pop	r15
    67c8:	08 95       	ret

000067ca <udi_cdc_data_sof_notify>:
    67ca:	80 e0       	ldi	r24, 0x00	; 0
    67cc:	4c cf       	rjmp	.-360    	; 0x6666 <udi_cdc_tx_send>
    67ce:	08 95       	ret

000067d0 <udi_cdc_data_sent>:
    67d0:	81 11       	cpse	r24, r1
    67d2:	19 c0       	rjmp	.+50     	; 0x6806 <udi_cdc_data_sent+0x36>
    67d4:	20 91 85 24 	lds	r18, 0x2485	; 0x802485 <udi_cdc_tx_buf_sel>
    67d8:	81 e0       	ldi	r24, 0x01	; 1
    67da:	90 e0       	ldi	r25, 0x00	; 0
    67dc:	22 23       	and	r18, r18
    67de:	11 f0       	breq	.+4      	; 0x67e4 <udi_cdc_data_sent+0x14>
    67e0:	80 e0       	ldi	r24, 0x00	; 0
    67e2:	90 e0       	ldi	r25, 0x00	; 0
    67e4:	88 0f       	add	r24, r24
    67e6:	99 1f       	adc	r25, r25
    67e8:	fc 01       	movw	r30, r24
    67ea:	ea 57       	subi	r30, 0x7A	; 122
    67ec:	fb 4d       	sbci	r31, 0xDB	; 219
    67ee:	10 82       	st	Z, r1
    67f0:	11 82       	std	Z+1, r1	; 0x01
    67f2:	10 92 81 24 	sts	0x2481, r1	; 0x802481 <udi_cdc_tx_both_buf_to_send>
    67f6:	10 92 82 24 	sts	0x2482, r1	; 0x802482 <udi_cdc_tx_trans_ongoing>
    67fa:	67 2b       	or	r22, r23
    67fc:	11 f0       	breq	.+4      	; 0x6802 <udi_cdc_data_sent+0x32>
    67fe:	80 e0       	ldi	r24, 0x00	; 0
    6800:	31 da       	rcall	.-2974   	; 0x5c64 <usb_callback_tx_empty_notify>
    6802:	80 e0       	ldi	r24, 0x00	; 0
    6804:	30 cf       	rjmp	.-416    	; 0x6666 <udi_cdc_tx_send>
    6806:	08 95       	ret

00006808 <udi_cdc_data_disable>:
    6808:	80 91 93 25 	lds	r24, 0x2593	; 0x802593 <udi_cdc_nb_data_enabled>
    680c:	81 50       	subi	r24, 0x01	; 1
    680e:	80 93 93 25 	sts	0x2593, r24	; 0x802593 <udi_cdc_nb_data_enabled>
    6812:	80 91 93 25 	lds	r24, 0x2593	; 0x802593 <udi_cdc_nb_data_enabled>
    6816:	1f da       	rcall	.-3010   	; 0x5c56 <usb_callback_cdc_disable>
    6818:	10 92 92 25 	sts	0x2592, r1	; 0x802592 <udi_cdc_data_running>
    681c:	08 95       	ret

0000681e <udi_cdc_comm_setup>:
    681e:	cf 93       	push	r28
    6820:	df 93       	push	r29
    6822:	80 91 c5 25 	lds	r24, 0x25C5	; 0x8025c5 <udd_g_ctrlreq>
    6826:	88 23       	and	r24, r24
    6828:	e4 f4       	brge	.+56     	; 0x6862 <udi_cdc_comm_setup+0x44>
    682a:	80 76       	andi	r24, 0x60	; 96
    682c:	80 32       	cpi	r24, 0x20	; 32
    682e:	09 f0       	breq	.+2      	; 0x6832 <udi_cdc_comm_setup+0x14>
    6830:	47 c0       	rjmp	.+142    	; 0x68c0 <udi_cdc_comm_setup+0xa2>
    6832:	80 91 c6 25 	lds	r24, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0x1>
    6836:	81 32       	cpi	r24, 0x21	; 33
    6838:	09 f0       	breq	.+2      	; 0x683c <udi_cdc_comm_setup+0x1e>
    683a:	44 c0       	rjmp	.+136    	; 0x68c4 <udi_cdc_comm_setup+0xa6>
    683c:	80 91 cb 25 	lds	r24, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    6840:	90 91 cc 25 	lds	r25, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    6844:	07 97       	sbiw	r24, 0x07	; 7
    6846:	09 f0       	breq	.+2      	; 0x684a <udi_cdc_comm_setup+0x2c>
    6848:	3f c0       	rjmp	.+126    	; 0x68c8 <udi_cdc_comm_setup+0xaa>
    684a:	e5 ec       	ldi	r30, 0xC5	; 197
    684c:	f5 e2       	ldi	r31, 0x25	; 37
    684e:	82 ea       	ldi	r24, 0xA2	; 162
    6850:	95 e2       	ldi	r25, 0x25	; 37
    6852:	80 87       	std	Z+8, r24	; 0x08
    6854:	91 87       	std	Z+9, r25	; 0x09
    6856:	87 e0       	ldi	r24, 0x07	; 7
    6858:	90 e0       	ldi	r25, 0x00	; 0
    685a:	82 87       	std	Z+10, r24	; 0x0a
    685c:	93 87       	std	Z+11, r25	; 0x0b
    685e:	81 e0       	ldi	r24, 0x01	; 1
    6860:	3a c0       	rjmp	.+116    	; 0x68d6 <udi_cdc_comm_setup+0xb8>
    6862:	80 76       	andi	r24, 0x60	; 96
    6864:	80 32       	cpi	r24, 0x20	; 32
    6866:	91 f5       	brne	.+100    	; 0x68cc <udi_cdc_comm_setup+0xae>
    6868:	80 91 c6 25 	lds	r24, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0x1>
    686c:	80 32       	cpi	r24, 0x20	; 32
    686e:	19 f0       	breq	.+6      	; 0x6876 <udi_cdc_comm_setup+0x58>
    6870:	82 32       	cpi	r24, 0x22	; 34
    6872:	b9 f0       	breq	.+46     	; 0x68a2 <udi_cdc_comm_setup+0x84>
    6874:	2d c0       	rjmp	.+90     	; 0x68d0 <udi_cdc_comm_setup+0xb2>
    6876:	80 91 cb 25 	lds	r24, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    687a:	90 91 cc 25 	lds	r25, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    687e:	07 97       	sbiw	r24, 0x07	; 7
    6880:	49 f5       	brne	.+82     	; 0x68d4 <udi_cdc_comm_setup+0xb6>
    6882:	e5 ec       	ldi	r30, 0xC5	; 197
    6884:	f5 e2       	ldi	r31, 0x25	; 37
    6886:	8e ef       	ldi	r24, 0xFE	; 254
    6888:	92 e3       	ldi	r25, 0x32	; 50
    688a:	84 87       	std	Z+12, r24	; 0x0c
    688c:	95 87       	std	Z+13, r25	; 0x0d
    688e:	82 ea       	ldi	r24, 0xA2	; 162
    6890:	95 e2       	ldi	r25, 0x25	; 37
    6892:	80 87       	std	Z+8, r24	; 0x08
    6894:	91 87       	std	Z+9, r25	; 0x09
    6896:	87 e0       	ldi	r24, 0x07	; 7
    6898:	90 e0       	ldi	r25, 0x00	; 0
    689a:	82 87       	std	Z+10, r24	; 0x0a
    689c:	93 87       	std	Z+11, r25	; 0x0b
    689e:	81 e0       	ldi	r24, 0x01	; 1
    68a0:	1a c0       	rjmp	.+52     	; 0x68d6 <udi_cdc_comm_setup+0xb8>
    68a2:	c5 ec       	ldi	r28, 0xC5	; 197
    68a4:	d5 e2       	ldi	r29, 0x25	; 37
    68a6:	6a 81       	ldd	r22, Y+2	; 0x02
    68a8:	61 70       	andi	r22, 0x01	; 1
    68aa:	80 e0       	ldi	r24, 0x00	; 0
    68ac:	d8 d9       	rcall	.-3152   	; 0x5c5e <usb_callback_cdc_set_dtr>
    68ae:	6a 81       	ldd	r22, Y+2	; 0x02
    68b0:	7b 81       	ldd	r23, Y+3	; 0x03
    68b2:	76 95       	lsr	r23
    68b4:	67 95       	ror	r22
    68b6:	61 70       	andi	r22, 0x01	; 1
    68b8:	80 e0       	ldi	r24, 0x00	; 0
    68ba:	d2 d9       	rcall	.-3164   	; 0x5c60 <usb_callback_cdc_set_rts>
    68bc:	81 e0       	ldi	r24, 0x01	; 1
    68be:	0b c0       	rjmp	.+22     	; 0x68d6 <udi_cdc_comm_setup+0xb8>
    68c0:	80 e0       	ldi	r24, 0x00	; 0
    68c2:	09 c0       	rjmp	.+18     	; 0x68d6 <udi_cdc_comm_setup+0xb8>
    68c4:	80 e0       	ldi	r24, 0x00	; 0
    68c6:	07 c0       	rjmp	.+14     	; 0x68d6 <udi_cdc_comm_setup+0xb8>
    68c8:	80 e0       	ldi	r24, 0x00	; 0
    68ca:	05 c0       	rjmp	.+10     	; 0x68d6 <udi_cdc_comm_setup+0xb8>
    68cc:	80 e0       	ldi	r24, 0x00	; 0
    68ce:	03 c0       	rjmp	.+6      	; 0x68d6 <udi_cdc_comm_setup+0xb8>
    68d0:	80 e0       	ldi	r24, 0x00	; 0
    68d2:	01 c0       	rjmp	.+2      	; 0x68d6 <udi_cdc_comm_setup+0xb8>
    68d4:	80 e0       	ldi	r24, 0x00	; 0
    68d6:	df 91       	pop	r29
    68d8:	cf 91       	pop	r28
    68da:	08 95       	ret

000068dc <udi_cdc_multi_get_nb_received_data>:
    68dc:	cf 93       	push	r28
    68de:	df 93       	push	r29
    68e0:	1f 92       	push	r1
    68e2:	cd b7       	in	r28, 0x3d	; 61
    68e4:	de b7       	in	r29, 0x3e	; 62
    68e6:	8f b7       	in	r24, 0x3f	; 63
    68e8:	89 83       	std	Y+1, r24	; 0x01
    68ea:	f8 94       	cli
    68ec:	49 81       	ldd	r20, Y+1	; 0x01
    68ee:	20 91 0b 25 	lds	r18, 0x250B	; 0x80250b <udi_cdc_rx_pos>
    68f2:	30 91 0c 25 	lds	r19, 0x250C	; 0x80250c <udi_cdc_rx_pos+0x1>
    68f6:	e0 91 0d 25 	lds	r30, 0x250D	; 0x80250d <udi_cdc_rx_buf_sel>
    68fa:	f0 e0       	ldi	r31, 0x00	; 0
    68fc:	ee 0f       	add	r30, r30
    68fe:	ff 1f       	adc	r31, r31
    6900:	e2 5f       	subi	r30, 0xF2	; 242
    6902:	fa 4d       	sbci	r31, 0xDA	; 218
    6904:	80 81       	ld	r24, Z
    6906:	91 81       	ldd	r25, Z+1	; 0x01
    6908:	4f bf       	out	0x3f, r20	; 63
    690a:	82 1b       	sub	r24, r18
    690c:	93 0b       	sbc	r25, r19
    690e:	0f 90       	pop	r0
    6910:	df 91       	pop	r29
    6912:	cf 91       	pop	r28
    6914:	08 95       	ret

00006916 <udi_cdc_multi_is_rx_ready>:
    6916:	e2 df       	rcall	.-60     	; 0x68dc <udi_cdc_multi_get_nb_received_data>
    6918:	21 e0       	ldi	r18, 0x01	; 1
    691a:	89 2b       	or	r24, r25
    691c:	09 f4       	brne	.+2      	; 0x6920 <udi_cdc_multi_is_rx_ready+0xa>
    691e:	20 e0       	ldi	r18, 0x00	; 0
    6920:	82 2f       	mov	r24, r18
    6922:	08 95       	ret

00006924 <udi_cdc_rx_start>:
    6924:	0f 93       	push	r16
    6926:	1f 93       	push	r17
    6928:	cf 93       	push	r28
    692a:	df 93       	push	r29
    692c:	1f 92       	push	r1
    692e:	cd b7       	in	r28, 0x3d	; 61
    6930:	de b7       	in	r29, 0x3e	; 62
    6932:	8f b7       	in	r24, 0x3f	; 63
    6934:	89 83       	std	Y+1, r24	; 0x01
    6936:	f8 94       	cli
    6938:	99 81       	ldd	r25, Y+1	; 0x01
    693a:	20 91 0d 25 	lds	r18, 0x250D	; 0x80250d <udi_cdc_rx_buf_sel>
    693e:	80 91 0a 25 	lds	r24, 0x250A	; 0x80250a <udi_cdc_rx_trans_ongoing>
    6942:	81 11       	cpse	r24, r1
    6944:	10 c0       	rjmp	.+32     	; 0x6966 <udi_cdc_rx_start+0x42>
    6946:	60 91 0b 25 	lds	r22, 0x250B	; 0x80250b <udi_cdc_rx_pos>
    694a:	70 91 0c 25 	lds	r23, 0x250C	; 0x80250c <udi_cdc_rx_pos+0x1>
    694e:	02 2f       	mov	r16, r18
    6950:	10 e0       	ldi	r17, 0x00	; 0
    6952:	f8 01       	movw	r30, r16
    6954:	ee 0f       	add	r30, r30
    6956:	ff 1f       	adc	r31, r31
    6958:	e2 5f       	subi	r30, 0xF2	; 242
    695a:	fa 4d       	sbci	r31, 0xDA	; 218
    695c:	40 81       	ld	r20, Z
    695e:	51 81       	ldd	r21, Z+1	; 0x01
    6960:	64 17       	cp	r22, r20
    6962:	75 07       	cpc	r23, r21
    6964:	18 f4       	brcc	.+6      	; 0x696c <udi_cdc_rx_start+0x48>
    6966:	9f bf       	out	0x3f, r25	; 63
    6968:	80 e0       	ldi	r24, 0x00	; 0
    696a:	27 c0       	rjmp	.+78     	; 0x69ba <udi_cdc_rx_start+0x96>
    696c:	10 92 0b 25 	sts	0x250B, r1	; 0x80250b <udi_cdc_rx_pos>
    6970:	10 92 0c 25 	sts	0x250C, r1	; 0x80250c <udi_cdc_rx_pos+0x1>
    6974:	81 e0       	ldi	r24, 0x01	; 1
    6976:	21 11       	cpse	r18, r1
    6978:	80 e0       	ldi	r24, 0x00	; 0
    697a:	80 93 0d 25 	sts	0x250D, r24	; 0x80250d <udi_cdc_rx_buf_sel>
    697e:	81 e0       	ldi	r24, 0x01	; 1
    6980:	80 93 0a 25 	sts	0x250A, r24	; 0x80250a <udi_cdc_rx_trans_ongoing>
    6984:	9f bf       	out	0x3f, r25	; 63
    6986:	80 e0       	ldi	r24, 0x00	; 0
    6988:	c6 df       	rcall	.-116    	; 0x6916 <udi_cdc_multi_is_rx_ready>
    698a:	88 23       	and	r24, r24
    698c:	11 f0       	breq	.+4      	; 0x6992 <udi_cdc_rx_start+0x6e>
    698e:	80 e0       	ldi	r24, 0x00	; 0
    6990:	68 d9       	rcall	.-3376   	; 0x5c62 <usb_callback_rx_notify>
    6992:	a8 01       	movw	r20, r16
    6994:	00 24       	eor	r0, r0
    6996:	56 95       	lsr	r21
    6998:	47 95       	ror	r20
    699a:	07 94       	ror	r0
    699c:	56 95       	lsr	r21
    699e:	47 95       	ror	r20
    69a0:	07 94       	ror	r0
    69a2:	54 2f       	mov	r21, r20
    69a4:	40 2d       	mov	r20, r0
    69a6:	4e 5e       	subi	r20, 0xEE	; 238
    69a8:	5a 4d       	sbci	r21, 0xDA	; 218
    69aa:	05 e1       	ldi	r16, 0x15	; 21
    69ac:	15 e3       	ldi	r17, 0x35	; 53
    69ae:	20 e4       	ldi	r18, 0x40	; 64
    69b0:	30 e0       	ldi	r19, 0x00	; 0
    69b2:	61 e0       	ldi	r22, 0x01	; 1
    69b4:	82 e0       	ldi	r24, 0x02	; 2
    69b6:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <udd_ep_run>
    69ba:	0f 90       	pop	r0
    69bc:	df 91       	pop	r29
    69be:	cf 91       	pop	r28
    69c0:	1f 91       	pop	r17
    69c2:	0f 91       	pop	r16
    69c4:	08 95       	ret

000069c6 <udi_cdc_data_enable>:
    69c6:	10 92 93 25 	sts	0x2593, r1	; 0x802593 <udi_cdc_nb_data_enabled>
    69ca:	10 92 82 24 	sts	0x2482, r1	; 0x802482 <udi_cdc_tx_trans_ongoing>
    69ce:	10 92 81 24 	sts	0x2481, r1	; 0x802481 <udi_cdc_tx_both_buf_to_send>
    69d2:	10 92 85 24 	sts	0x2485, r1	; 0x802485 <udi_cdc_tx_buf_sel>
    69d6:	e6 e8       	ldi	r30, 0x86	; 134
    69d8:	f4 e2       	ldi	r31, 0x24	; 36
    69da:	10 82       	st	Z, r1
    69dc:	11 82       	std	Z+1, r1	; 0x01
    69de:	12 82       	std	Z+2, r1	; 0x02
    69e0:	13 82       	std	Z+3, r1	; 0x03
    69e2:	10 92 83 24 	sts	0x2483, r1	; 0x802483 <udi_cdc_tx_sof_num>
    69e6:	10 92 84 24 	sts	0x2484, r1	; 0x802484 <udi_cdc_tx_sof_num+0x1>
    69ea:	80 e0       	ldi	r24, 0x00	; 0
    69ec:	3c de       	rcall	.-904    	; 0x6666 <udi_cdc_tx_send>
    69ee:	10 92 0a 25 	sts	0x250A, r1	; 0x80250a <udi_cdc_rx_trans_ongoing>
    69f2:	10 92 0d 25 	sts	0x250D, r1	; 0x80250d <udi_cdc_rx_buf_sel>
    69f6:	ee e0       	ldi	r30, 0x0E	; 14
    69f8:	f5 e2       	ldi	r31, 0x25	; 37
    69fa:	10 82       	st	Z, r1
    69fc:	11 82       	std	Z+1, r1	; 0x01
    69fe:	12 82       	std	Z+2, r1	; 0x02
    6a00:	13 82       	std	Z+3, r1	; 0x03
    6a02:	10 92 0b 25 	sts	0x250B, r1	; 0x80250b <udi_cdc_rx_pos>
    6a06:	10 92 0c 25 	sts	0x250C, r1	; 0x80250c <udi_cdc_rx_pos+0x1>
    6a0a:	80 e0       	ldi	r24, 0x00	; 0
    6a0c:	8b df       	rcall	.-234    	; 0x6924 <udi_cdc_rx_start>
    6a0e:	88 23       	and	r24, r24
    6a10:	59 f0       	breq	.+22     	; 0x6a28 <udi_cdc_data_enable+0x62>
    6a12:	90 91 93 25 	lds	r25, 0x2593	; 0x802593 <udi_cdc_nb_data_enabled>
    6a16:	9f 5f       	subi	r25, 0xFF	; 255
    6a18:	90 93 93 25 	sts	0x2593, r25	; 0x802593 <udi_cdc_nb_data_enabled>
    6a1c:	90 91 93 25 	lds	r25, 0x2593	; 0x802593 <udi_cdc_nb_data_enabled>
    6a20:	91 30       	cpi	r25, 0x01	; 1
    6a22:	11 f4       	brne	.+4      	; 0x6a28 <udi_cdc_data_enable+0x62>
    6a24:	90 93 92 25 	sts	0x2592, r25	; 0x802592 <udi_cdc_data_running>
    6a28:	08 95       	ret

00006a2a <udi_cdc_data_received>:
    6a2a:	0f 93       	push	r16
    6a2c:	1f 93       	push	r17
    6a2e:	81 11       	cpse	r24, r1
    6a30:	29 c0       	rjmp	.+82     	; 0x6a84 <udi_cdc_data_received+0x5a>
    6a32:	80 91 0d 25 	lds	r24, 0x250D	; 0x80250d <udi_cdc_rx_buf_sel>
    6a36:	e1 e0       	ldi	r30, 0x01	; 1
    6a38:	81 11       	cpse	r24, r1
    6a3a:	e0 e0       	ldi	r30, 0x00	; 0
    6a3c:	84 2f       	mov	r24, r20
    6a3e:	61 15       	cp	r22, r1
    6a40:	71 05       	cpc	r23, r1
    6a42:	a9 f4       	brne	.+42     	; 0x6a6e <udi_cdc_data_received+0x44>
    6a44:	4e 2f       	mov	r20, r30
    6a46:	50 e0       	ldi	r21, 0x00	; 0
    6a48:	00 24       	eor	r0, r0
    6a4a:	56 95       	lsr	r21
    6a4c:	47 95       	ror	r20
    6a4e:	07 94       	ror	r0
    6a50:	56 95       	lsr	r21
    6a52:	47 95       	ror	r20
    6a54:	07 94       	ror	r0
    6a56:	54 2f       	mov	r21, r20
    6a58:	40 2d       	mov	r20, r0
    6a5a:	4e 5e       	subi	r20, 0xEE	; 238
    6a5c:	5a 4d       	sbci	r21, 0xDA	; 218
    6a5e:	05 e1       	ldi	r16, 0x15	; 21
    6a60:	15 e3       	ldi	r17, 0x35	; 53
    6a62:	20 e4       	ldi	r18, 0x40	; 64
    6a64:	30 e0       	ldi	r19, 0x00	; 0
    6a66:	61 e0       	ldi	r22, 0x01	; 1
    6a68:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <udd_ep_run>
    6a6c:	0b c0       	rjmp	.+22     	; 0x6a84 <udi_cdc_data_received+0x5a>
    6a6e:	f0 e0       	ldi	r31, 0x00	; 0
    6a70:	ee 0f       	add	r30, r30
    6a72:	ff 1f       	adc	r31, r31
    6a74:	e2 5f       	subi	r30, 0xF2	; 242
    6a76:	fa 4d       	sbci	r31, 0xDA	; 218
    6a78:	60 83       	st	Z, r22
    6a7a:	71 83       	std	Z+1, r23	; 0x01
    6a7c:	10 92 0a 25 	sts	0x250A, r1	; 0x80250a <udi_cdc_rx_trans_ongoing>
    6a80:	80 e0       	ldi	r24, 0x00	; 0
    6a82:	50 df       	rcall	.-352    	; 0x6924 <udi_cdc_rx_start>
    6a84:	1f 91       	pop	r17
    6a86:	0f 91       	pop	r16
    6a88:	08 95       	ret

00006a8a <udi_cdc_multi_getc>:
    6a8a:	ef 92       	push	r14
    6a8c:	ff 92       	push	r15
    6a8e:	1f 93       	push	r17
    6a90:	cf 93       	push	r28
    6a92:	df 93       	push	r29
    6a94:	1f 92       	push	r1
    6a96:	cd b7       	in	r28, 0x3d	; 61
    6a98:	de b7       	in	r29, 0x3e	; 62
    6a9a:	11 e0       	ldi	r17, 0x01	; 1
    6a9c:	80 91 a8 25 	lds	r24, 0x25A8	; 0x8025a8 <udi_cdc_line_coding+0x6>
    6aa0:	89 30       	cpi	r24, 0x09	; 9
    6aa2:	09 f0       	breq	.+2      	; 0x6aa6 <udi_cdc_multi_getc+0x1c>
    6aa4:	10 e0       	ldi	r17, 0x00	; 0
    6aa6:	40 e0       	ldi	r20, 0x00	; 0
    6aa8:	50 e0       	ldi	r21, 0x00	; 0
    6aaa:	8f b7       	in	r24, 0x3f	; 63
    6aac:	89 83       	std	Y+1, r24	; 0x01
    6aae:	f8 94       	cli
    6ab0:	a9 81       	ldd	r26, Y+1	; 0x01
    6ab2:	20 91 0b 25 	lds	r18, 0x250B	; 0x80250b <udi_cdc_rx_pos>
    6ab6:	30 91 0c 25 	lds	r19, 0x250C	; 0x80250c <udi_cdc_rx_pos+0x1>
    6aba:	80 91 0d 25 	lds	r24, 0x250D	; 0x80250d <udi_cdc_rx_buf_sel>
    6abe:	90 e0       	ldi	r25, 0x00	; 0
    6ac0:	fc 01       	movw	r30, r24
    6ac2:	ee 0f       	add	r30, r30
    6ac4:	ff 1f       	adc	r31, r31
    6ac6:	e2 5f       	subi	r30, 0xF2	; 242
    6ac8:	fa 4d       	sbci	r31, 0xDA	; 218
    6aca:	60 81       	ld	r22, Z
    6acc:	71 81       	ldd	r23, Z+1	; 0x01
    6ace:	af bf       	out	0x3f, r26	; 63
    6ad0:	26 17       	cp	r18, r22
    6ad2:	37 07       	cpc	r19, r23
    6ad4:	30 f0       	brcs	.+12     	; 0x6ae2 <udi_cdc_multi_getc+0x58>
    6ad6:	80 91 92 25 	lds	r24, 0x2592	; 0x802592 <udi_cdc_data_running>
    6ada:	81 11       	cpse	r24, r1
    6adc:	e6 cf       	rjmp	.-52     	; 0x6aaa <udi_cdc_multi_getc+0x20>
    6ade:	90 e0       	ldi	r25, 0x00	; 0
    6ae0:	21 c0       	rjmp	.+66     	; 0x6b24 <udi_cdc_multi_getc+0x9a>
    6ae2:	fc 01       	movw	r30, r24
    6ae4:	00 24       	eor	r0, r0
    6ae6:	f6 95       	lsr	r31
    6ae8:	e7 95       	ror	r30
    6aea:	07 94       	ror	r0
    6aec:	f6 95       	lsr	r31
    6aee:	e7 95       	ror	r30
    6af0:	07 94       	ror	r0
    6af2:	fe 2f       	mov	r31, r30
    6af4:	e0 2d       	mov	r30, r0
    6af6:	ee 5e       	subi	r30, 0xEE	; 238
    6af8:	fa 4d       	sbci	r31, 0xDA	; 218
    6afa:	e2 0f       	add	r30, r18
    6afc:	f3 1f       	adc	r31, r19
    6afe:	80 81       	ld	r24, Z
    6b00:	7a 01       	movw	r14, r20
    6b02:	e8 2a       	or	r14, r24
    6b04:	2f 5f       	subi	r18, 0xFF	; 255
    6b06:	3f 4f       	sbci	r19, 0xFF	; 255
    6b08:	20 93 0b 25 	sts	0x250B, r18	; 0x80250b <udi_cdc_rx_pos>
    6b0c:	30 93 0c 25 	sts	0x250C, r19	; 0x80250c <udi_cdc_rx_pos+0x1>
    6b10:	80 e0       	ldi	r24, 0x00	; 0
    6b12:	08 df       	rcall	.-496    	; 0x6924 <udi_cdc_rx_start>
    6b14:	11 23       	and	r17, r17
    6b16:	21 f0       	breq	.+8      	; 0x6b20 <udi_cdc_multi_getc+0x96>
    6b18:	5e 2d       	mov	r21, r14
    6b1a:	44 27       	eor	r20, r20
    6b1c:	10 e0       	ldi	r17, 0x00	; 0
    6b1e:	c5 cf       	rjmp	.-118    	; 0x6aaa <udi_cdc_multi_getc+0x20>
    6b20:	8e 2d       	mov	r24, r14
    6b22:	9f 2d       	mov	r25, r15
    6b24:	0f 90       	pop	r0
    6b26:	df 91       	pop	r29
    6b28:	cf 91       	pop	r28
    6b2a:	1f 91       	pop	r17
    6b2c:	ff 90       	pop	r15
    6b2e:	ef 90       	pop	r14
    6b30:	08 95       	ret

00006b32 <udi_cdc_getc>:
    6b32:	80 e0       	ldi	r24, 0x00	; 0
    6b34:	aa cf       	rjmp	.-172    	; 0x6a8a <udi_cdc_multi_getc>
    6b36:	08 95       	ret

00006b38 <udi_cdc_multi_get_free_tx_buffer>:
    6b38:	cf 93       	push	r28
    6b3a:	df 93       	push	r29
    6b3c:	1f 92       	push	r1
    6b3e:	cd b7       	in	r28, 0x3d	; 61
    6b40:	de b7       	in	r29, 0x3e	; 62
    6b42:	8f b7       	in	r24, 0x3f	; 63
    6b44:	89 83       	std	Y+1, r24	; 0x01
    6b46:	f8 94       	cli
    6b48:	99 81       	ldd	r25, Y+1	; 0x01
    6b4a:	80 91 85 24 	lds	r24, 0x2485	; 0x802485 <udi_cdc_tx_buf_sel>
    6b4e:	e8 2f       	mov	r30, r24
    6b50:	f0 e0       	ldi	r31, 0x00	; 0
    6b52:	ee 0f       	add	r30, r30
    6b54:	ff 1f       	adc	r31, r31
    6b56:	ea 57       	subi	r30, 0x7A	; 122
    6b58:	fb 4d       	sbci	r31, 0xDB	; 219
    6b5a:	20 81       	ld	r18, Z
    6b5c:	31 81       	ldd	r19, Z+1	; 0x01
    6b5e:	20 34       	cpi	r18, 0x40	; 64
    6b60:	31 05       	cpc	r19, r1
    6b62:	89 f4       	brne	.+34     	; 0x6b86 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    6b64:	40 91 82 24 	lds	r20, 0x2482	; 0x802482 <udi_cdc_tx_trans_ongoing>
    6b68:	41 11       	cpse	r20, r1
    6b6a:	0d c0       	rjmp	.+26     	; 0x6b86 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    6b6c:	40 91 81 24 	lds	r20, 0x2481	; 0x802481 <udi_cdc_tx_both_buf_to_send>
    6b70:	41 11       	cpse	r20, r1
    6b72:	09 c0       	rjmp	.+18     	; 0x6b86 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    6b74:	21 e0       	ldi	r18, 0x01	; 1
    6b76:	20 93 81 24 	sts	0x2481, r18	; 0x802481 <udi_cdc_tx_both_buf_to_send>
    6b7a:	81 11       	cpse	r24, r1
    6b7c:	20 e0       	ldi	r18, 0x00	; 0
    6b7e:	20 93 85 24 	sts	0x2485, r18	; 0x802485 <udi_cdc_tx_buf_sel>
    6b82:	20 e0       	ldi	r18, 0x00	; 0
    6b84:	30 e0       	ldi	r19, 0x00	; 0
    6b86:	9f bf       	out	0x3f, r25	; 63
    6b88:	80 e4       	ldi	r24, 0x40	; 64
    6b8a:	90 e0       	ldi	r25, 0x00	; 0
    6b8c:	82 1b       	sub	r24, r18
    6b8e:	93 0b       	sbc	r25, r19
    6b90:	0f 90       	pop	r0
    6b92:	df 91       	pop	r29
    6b94:	cf 91       	pop	r28
    6b96:	08 95       	ret

00006b98 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    6b98:	cf df       	rcall	.-98     	; 0x6b38 <udi_cdc_multi_get_free_tx_buffer>
    6b9a:	21 e0       	ldi	r18, 0x01	; 1
    6b9c:	89 2b       	or	r24, r25
    6b9e:	09 f4       	brne	.+2      	; 0x6ba2 <udi_cdc_multi_is_tx_ready+0xa>
    6ba0:	20 e0       	ldi	r18, 0x00	; 0
    6ba2:	82 2f       	mov	r24, r18
    6ba4:	08 95       	ret

00006ba6 <udi_cdc_multi_putc>:
    6ba6:	ff 92       	push	r15
    6ba8:	0f 93       	push	r16
    6baa:	1f 93       	push	r17
    6bac:	cf 93       	push	r28
    6bae:	df 93       	push	r29
    6bb0:	1f 92       	push	r1
    6bb2:	cd b7       	in	r28, 0x3d	; 61
    6bb4:	de b7       	in	r29, 0x3e	; 62
    6bb6:	f6 2e       	mov	r15, r22
    6bb8:	17 2f       	mov	r17, r23
    6bba:	01 e0       	ldi	r16, 0x01	; 1
    6bbc:	80 91 a8 25 	lds	r24, 0x25A8	; 0x8025a8 <udi_cdc_line_coding+0x6>
    6bc0:	89 30       	cpi	r24, 0x09	; 9
    6bc2:	09 f0       	breq	.+2      	; 0x6bc6 <udi_cdc_multi_putc+0x20>
    6bc4:	00 e0       	ldi	r16, 0x00	; 0
    6bc6:	80 e0       	ldi	r24, 0x00	; 0
    6bc8:	e7 df       	rcall	.-50     	; 0x6b98 <udi_cdc_multi_is_tx_ready>
    6bca:	81 11       	cpse	r24, r1
    6bcc:	07 c0       	rjmp	.+14     	; 0x6bdc <udi_cdc_multi_putc+0x36>
    6bce:	80 91 92 25 	lds	r24, 0x2592	; 0x802592 <udi_cdc_data_running>
    6bd2:	81 11       	cpse	r24, r1
    6bd4:	f8 cf       	rjmp	.-16     	; 0x6bc6 <udi_cdc_multi_putc+0x20>
    6bd6:	80 e0       	ldi	r24, 0x00	; 0
    6bd8:	90 e0       	ldi	r25, 0x00	; 0
    6bda:	2c c0       	rjmp	.+88     	; 0x6c34 <udi_cdc_multi_putc+0x8e>
    6bdc:	8f b7       	in	r24, 0x3f	; 63
    6bde:	89 83       	std	Y+1, r24	; 0x01
    6be0:	f8 94       	cli
    6be2:	49 81       	ldd	r20, Y+1	; 0x01
    6be4:	80 91 85 24 	lds	r24, 0x2485	; 0x802485 <udi_cdc_tx_buf_sel>
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    6bea:	fc 01       	movw	r30, r24
    6bec:	ee 0f       	add	r30, r30
    6bee:	ff 1f       	adc	r31, r31
    6bf0:	ea 57       	subi	r30, 0x7A	; 122
    6bf2:	fb 4d       	sbci	r31, 0xDB	; 219
    6bf4:	20 81       	ld	r18, Z
    6bf6:	31 81       	ldd	r19, Z+1	; 0x01
    6bf8:	b9 01       	movw	r22, r18
    6bfa:	6f 5f       	subi	r22, 0xFF	; 255
    6bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    6bfe:	60 83       	st	Z, r22
    6c00:	71 83       	std	Z+1, r23	; 0x01
    6c02:	00 24       	eor	r0, r0
    6c04:	96 95       	lsr	r25
    6c06:	87 95       	ror	r24
    6c08:	07 94       	ror	r0
    6c0a:	96 95       	lsr	r25
    6c0c:	87 95       	ror	r24
    6c0e:	07 94       	ror	r0
    6c10:	98 2f       	mov	r25, r24
    6c12:	80 2d       	mov	r24, r0
    6c14:	86 57       	subi	r24, 0x76	; 118
    6c16:	9b 4d       	sbci	r25, 0xDB	; 219
    6c18:	fc 01       	movw	r30, r24
    6c1a:	e2 0f       	add	r30, r18
    6c1c:	f3 1f       	adc	r31, r19
    6c1e:	f0 82       	st	Z, r15
    6c20:	4f bf       	out	0x3f, r20	; 63
    6c22:	00 23       	and	r16, r16
    6c24:	29 f0       	breq	.+10     	; 0x6c30 <udi_cdc_multi_putc+0x8a>
    6c26:	f1 2e       	mov	r15, r17
    6c28:	11 0f       	add	r17, r17
    6c2a:	11 0b       	sbc	r17, r17
    6c2c:	00 e0       	ldi	r16, 0x00	; 0
    6c2e:	cb cf       	rjmp	.-106    	; 0x6bc6 <udi_cdc_multi_putc+0x20>
    6c30:	81 e0       	ldi	r24, 0x01	; 1
    6c32:	90 e0       	ldi	r25, 0x00	; 0
    6c34:	0f 90       	pop	r0
    6c36:	df 91       	pop	r29
    6c38:	cf 91       	pop	r28
    6c3a:	1f 91       	pop	r17
    6c3c:	0f 91       	pop	r16
    6c3e:	ff 90       	pop	r15
    6c40:	08 95       	ret

00006c42 <udi_cdc_putc>:
    6c42:	bc 01       	movw	r22, r24
    6c44:	80 e0       	ldi	r24, 0x00	; 0
    6c46:	af cf       	rjmp	.-162    	; 0x6ba6 <udi_cdc_multi_putc>
    6c48:	08 95       	ret

00006c4a <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    6c4a:	e0 91 ae 25 	lds	r30, 0x25AE	; 0x8025ae <udc_ptr_conf>
    6c4e:	f0 91 af 25 	lds	r31, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    6c52:	01 90       	ld	r0, Z+
    6c54:	f0 81       	ld	r31, Z
    6c56:	e0 2d       	mov	r30, r0
    6c58:	22 81       	ldd	r18, Z+2	; 0x02
    6c5a:	33 81       	ldd	r19, Z+3	; 0x03
    6c5c:	2e 0f       	add	r18, r30
    6c5e:	3f 1f       	adc	r19, r31
    6c60:	fc 01       	movw	r30, r24
    6c62:	40 81       	ld	r20, Z
    6c64:	e4 0f       	add	r30, r20
    6c66:	f1 1d       	adc	r31, r1
    6c68:	e2 17       	cp	r30, r18
    6c6a:	f3 07       	cpc	r31, r19
    6c6c:	a0 f4       	brcc	.+40     	; 0x6c96 <udc_next_desc_in_iface+0x4c>
    6c6e:	81 81       	ldd	r24, Z+1	; 0x01
    6c70:	84 30       	cpi	r24, 0x04	; 4
    6c72:	a1 f0       	breq	.+40     	; 0x6c9c <udc_next_desc_in_iface+0x52>
    6c74:	86 13       	cpse	r24, r22
    6c76:	06 c0       	rjmp	.+12     	; 0x6c84 <udc_next_desc_in_iface+0x3a>
    6c78:	14 c0       	rjmp	.+40     	; 0x6ca2 <udc_next_desc_in_iface+0x58>
    6c7a:	81 81       	ldd	r24, Z+1	; 0x01
    6c7c:	84 30       	cpi	r24, 0x04	; 4
    6c7e:	a1 f0       	breq	.+40     	; 0x6ca8 <udc_next_desc_in_iface+0x5e>
    6c80:	86 17       	cp	r24, r22
    6c82:	a9 f0       	breq	.+42     	; 0x6cae <udc_next_desc_in_iface+0x64>
    6c84:	80 81       	ld	r24, Z
    6c86:	e8 0f       	add	r30, r24
    6c88:	f1 1d       	adc	r31, r1
    6c8a:	e2 17       	cp	r30, r18
    6c8c:	f3 07       	cpc	r31, r19
    6c8e:	a8 f3       	brcs	.-22     	; 0x6c7a <udc_next_desc_in_iface+0x30>
    6c90:	80 e0       	ldi	r24, 0x00	; 0
    6c92:	90 e0       	ldi	r25, 0x00	; 0
    6c94:	08 95       	ret
    6c96:	80 e0       	ldi	r24, 0x00	; 0
    6c98:	90 e0       	ldi	r25, 0x00	; 0
    6c9a:	08 95       	ret
    6c9c:	80 e0       	ldi	r24, 0x00	; 0
    6c9e:	90 e0       	ldi	r25, 0x00	; 0
    6ca0:	08 95       	ret
    6ca2:	8e 2f       	mov	r24, r30
    6ca4:	9f 2f       	mov	r25, r31
    6ca6:	08 95       	ret
    6ca8:	80 e0       	ldi	r24, 0x00	; 0
    6caa:	90 e0       	ldi	r25, 0x00	; 0
    6cac:	08 95       	ret
    6cae:	8e 2f       	mov	r24, r30
    6cb0:	9f 2f       	mov	r25, r31
    6cb2:	08 95       	ret

00006cb4 <udc_valid_address>:
    6cb4:	80 91 c7 25 	lds	r24, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0x2>
    6cb8:	8f 77       	andi	r24, 0x7F	; 127
    6cba:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <udd_set_address>
    6cbe:	08 95       	ret

00006cc0 <udc_update_iface_desc>:
    6cc0:	90 91 b0 25 	lds	r25, 0x25B0	; 0x8025b0 <udc_num_configuration>
    6cc4:	99 23       	and	r25, r25
    6cc6:	81 f1       	breq	.+96     	; 0x6d28 <udc_update_iface_desc+0x68>
    6cc8:	e0 91 ae 25 	lds	r30, 0x25AE	; 0x8025ae <udc_ptr_conf>
    6ccc:	f0 91 af 25 	lds	r31, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    6cd0:	01 90       	ld	r0, Z+
    6cd2:	f0 81       	ld	r31, Z
    6cd4:	e0 2d       	mov	r30, r0
    6cd6:	94 81       	ldd	r25, Z+4	; 0x04
    6cd8:	89 17       	cp	r24, r25
    6cda:	40 f5       	brcc	.+80     	; 0x6d2c <udc_update_iface_desc+0x6c>
    6cdc:	e0 93 ac 25 	sts	0x25AC, r30	; 0x8025ac <udc_ptr_iface>
    6ce0:	f0 93 ad 25 	sts	0x25AD, r31	; 0x8025ad <udc_ptr_iface+0x1>
    6ce4:	22 81       	ldd	r18, Z+2	; 0x02
    6ce6:	33 81       	ldd	r19, Z+3	; 0x03
    6ce8:	2e 0f       	add	r18, r30
    6cea:	3f 1f       	adc	r19, r31
    6cec:	e2 17       	cp	r30, r18
    6cee:	f3 07       	cpc	r31, r19
    6cf0:	f8 f4       	brcc	.+62     	; 0x6d30 <udc_update_iface_desc+0x70>
    6cf2:	91 81       	ldd	r25, Z+1	; 0x01
    6cf4:	94 30       	cpi	r25, 0x04	; 4
    6cf6:	61 f4       	brne	.+24     	; 0x6d10 <udc_update_iface_desc+0x50>
    6cf8:	92 81       	ldd	r25, Z+2	; 0x02
    6cfa:	89 13       	cpse	r24, r25
    6cfc:	09 c0       	rjmp	.+18     	; 0x6d10 <udc_update_iface_desc+0x50>
    6cfe:	93 81       	ldd	r25, Z+3	; 0x03
    6d00:	96 13       	cpse	r25, r22
    6d02:	06 c0       	rjmp	.+12     	; 0x6d10 <udc_update_iface_desc+0x50>
    6d04:	e0 93 ac 25 	sts	0x25AC, r30	; 0x8025ac <udc_ptr_iface>
    6d08:	f0 93 ad 25 	sts	0x25AD, r31	; 0x8025ad <udc_ptr_iface+0x1>
    6d0c:	81 e0       	ldi	r24, 0x01	; 1
    6d0e:	08 95       	ret
    6d10:	90 81       	ld	r25, Z
    6d12:	e9 0f       	add	r30, r25
    6d14:	f1 1d       	adc	r31, r1
    6d16:	e2 17       	cp	r30, r18
    6d18:	f3 07       	cpc	r31, r19
    6d1a:	58 f3       	brcs	.-42     	; 0x6cf2 <udc_update_iface_desc+0x32>
    6d1c:	e0 93 ac 25 	sts	0x25AC, r30	; 0x8025ac <udc_ptr_iface>
    6d20:	f0 93 ad 25 	sts	0x25AD, r31	; 0x8025ad <udc_ptr_iface+0x1>
    6d24:	80 e0       	ldi	r24, 0x00	; 0
    6d26:	08 95       	ret
    6d28:	80 e0       	ldi	r24, 0x00	; 0
    6d2a:	08 95       	ret
    6d2c:	80 e0       	ldi	r24, 0x00	; 0
    6d2e:	08 95       	ret
    6d30:	80 e0       	ldi	r24, 0x00	; 0
    6d32:	08 95       	ret

00006d34 <udc_iface_disable>:
    6d34:	ef 92       	push	r14
    6d36:	ff 92       	push	r15
    6d38:	1f 93       	push	r17
    6d3a:	cf 93       	push	r28
    6d3c:	df 93       	push	r29
    6d3e:	c8 2f       	mov	r28, r24
    6d40:	60 e0       	ldi	r22, 0x00	; 0
    6d42:	be df       	rcall	.-132    	; 0x6cc0 <udc_update_iface_desc>
    6d44:	18 2f       	mov	r17, r24
    6d46:	88 23       	and	r24, r24
    6d48:	81 f1       	breq	.+96     	; 0x6daa <udc_iface_disable+0x76>
    6d4a:	a0 91 ae 25 	lds	r26, 0x25AE	; 0x8025ae <udc_ptr_conf>
    6d4e:	b0 91 af 25 	lds	r27, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    6d52:	ec 2f       	mov	r30, r28
    6d54:	f0 e0       	ldi	r31, 0x00	; 0
    6d56:	ee 0f       	add	r30, r30
    6d58:	ff 1f       	adc	r31, r31
    6d5a:	12 96       	adiw	r26, 0x02	; 2
    6d5c:	8d 91       	ld	r24, X+
    6d5e:	9c 91       	ld	r25, X
    6d60:	13 97       	sbiw	r26, 0x03	; 3
    6d62:	e8 0f       	add	r30, r24
    6d64:	f9 1f       	adc	r31, r25
    6d66:	e0 80       	ld	r14, Z
    6d68:	f1 80       	ldd	r15, Z+1	; 0x01
    6d6a:	d7 01       	movw	r26, r14
    6d6c:	16 96       	adiw	r26, 0x06	; 6
    6d6e:	ed 91       	ld	r30, X+
    6d70:	fc 91       	ld	r31, X
    6d72:	17 97       	sbiw	r26, 0x07	; 7
    6d74:	19 95       	eicall
    6d76:	68 2f       	mov	r22, r24
    6d78:	8c 2f       	mov	r24, r28
    6d7a:	a2 df       	rcall	.-188    	; 0x6cc0 <udc_update_iface_desc>
    6d7c:	18 2f       	mov	r17, r24
    6d7e:	88 23       	and	r24, r24
    6d80:	a1 f0       	breq	.+40     	; 0x6daa <udc_iface_disable+0x76>
    6d82:	c0 91 ac 25 	lds	r28, 0x25AC	; 0x8025ac <udc_ptr_iface>
    6d86:	d0 91 ad 25 	lds	r29, 0x25AD	; 0x8025ad <udc_ptr_iface+0x1>
    6d8a:	65 e0       	ldi	r22, 0x05	; 5
    6d8c:	ce 01       	movw	r24, r28
    6d8e:	5d df       	rcall	.-326    	; 0x6c4a <udc_next_desc_in_iface>
    6d90:	ec 01       	movw	r28, r24
    6d92:	89 2b       	or	r24, r25
    6d94:	21 f0       	breq	.+8      	; 0x6d9e <udc_iface_disable+0x6a>
    6d96:	8a 81       	ldd	r24, Y+2	; 0x02
    6d98:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <udd_ep_free>
    6d9c:	f6 cf       	rjmp	.-20     	; 0x6d8a <udc_iface_disable+0x56>
    6d9e:	d7 01       	movw	r26, r14
    6da0:	12 96       	adiw	r26, 0x02	; 2
    6da2:	ed 91       	ld	r30, X+
    6da4:	fc 91       	ld	r31, X
    6da6:	13 97       	sbiw	r26, 0x03	; 3
    6da8:	19 95       	eicall
    6daa:	81 2f       	mov	r24, r17
    6dac:	df 91       	pop	r29
    6dae:	cf 91       	pop	r28
    6db0:	1f 91       	pop	r17
    6db2:	ff 90       	pop	r15
    6db4:	ef 90       	pop	r14
    6db6:	08 95       	ret

00006db8 <udc_iface_enable>:
    6db8:	1f 93       	push	r17
    6dba:	cf 93       	push	r28
    6dbc:	df 93       	push	r29
    6dbe:	18 2f       	mov	r17, r24
    6dc0:	7f df       	rcall	.-258    	; 0x6cc0 <udc_update_iface_desc>
    6dc2:	88 23       	and	r24, r24
    6dc4:	41 f1       	breq	.+80     	; 0x6e16 <udc_iface_enable+0x5e>
    6dc6:	c0 91 ac 25 	lds	r28, 0x25AC	; 0x8025ac <udc_ptr_iface>
    6dca:	d0 91 ad 25 	lds	r29, 0x25AD	; 0x8025ad <udc_ptr_iface+0x1>
    6dce:	65 e0       	ldi	r22, 0x05	; 5
    6dd0:	ce 01       	movw	r24, r28
    6dd2:	3b df       	rcall	.-394    	; 0x6c4a <udc_next_desc_in_iface>
    6dd4:	ec 01       	movw	r28, r24
    6dd6:	89 2b       	or	r24, r25
    6dd8:	49 f0       	breq	.+18     	; 0x6dec <udc_iface_enable+0x34>
    6dda:	4c 81       	ldd	r20, Y+4	; 0x04
    6ddc:	5d 81       	ldd	r21, Y+5	; 0x05
    6dde:	6b 81       	ldd	r22, Y+3	; 0x03
    6de0:	8a 81       	ldd	r24, Y+2	; 0x02
    6de2:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <udd_ep_alloc>
    6de6:	81 11       	cpse	r24, r1
    6de8:	f2 cf       	rjmp	.-28     	; 0x6dce <udc_iface_enable+0x16>
    6dea:	15 c0       	rjmp	.+42     	; 0x6e16 <udc_iface_enable+0x5e>
    6dec:	a0 91 ae 25 	lds	r26, 0x25AE	; 0x8025ae <udc_ptr_conf>
    6df0:	b0 91 af 25 	lds	r27, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    6df4:	e1 2f       	mov	r30, r17
    6df6:	f0 e0       	ldi	r31, 0x00	; 0
    6df8:	ee 0f       	add	r30, r30
    6dfa:	ff 1f       	adc	r31, r31
    6dfc:	12 96       	adiw	r26, 0x02	; 2
    6dfe:	8d 91       	ld	r24, X+
    6e00:	9c 91       	ld	r25, X
    6e02:	13 97       	sbiw	r26, 0x03	; 3
    6e04:	e8 0f       	add	r30, r24
    6e06:	f9 1f       	adc	r31, r25
    6e08:	01 90       	ld	r0, Z+
    6e0a:	f0 81       	ld	r31, Z
    6e0c:	e0 2d       	mov	r30, r0
    6e0e:	01 90       	ld	r0, Z+
    6e10:	f0 81       	ld	r31, Z
    6e12:	e0 2d       	mov	r30, r0
    6e14:	19 95       	eicall
    6e16:	df 91       	pop	r29
    6e18:	cf 91       	pop	r28
    6e1a:	1f 91       	pop	r17
    6e1c:	08 95       	ret

00006e1e <udc_start>:
    6e1e:	0c 94 d4 24 	jmp	0x49a8	; 0x49a8 <udd_enable>
    6e22:	08 95       	ret

00006e24 <udc_reset>:
    6e24:	cf 93       	push	r28
    6e26:	80 91 b0 25 	lds	r24, 0x25B0	; 0x8025b0 <udc_num_configuration>
    6e2a:	88 23       	and	r24, r24
    6e2c:	c1 f0       	breq	.+48     	; 0x6e5e <udc_reset+0x3a>
    6e2e:	e0 91 ae 25 	lds	r30, 0x25AE	; 0x8025ae <udc_ptr_conf>
    6e32:	f0 91 af 25 	lds	r31, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    6e36:	01 90       	ld	r0, Z+
    6e38:	f0 81       	ld	r31, Z
    6e3a:	e0 2d       	mov	r30, r0
    6e3c:	84 81       	ldd	r24, Z+4	; 0x04
    6e3e:	88 23       	and	r24, r24
    6e40:	71 f0       	breq	.+28     	; 0x6e5e <udc_reset+0x3a>
    6e42:	c0 e0       	ldi	r28, 0x00	; 0
    6e44:	8c 2f       	mov	r24, r28
    6e46:	76 df       	rcall	.-276    	; 0x6d34 <udc_iface_disable>
    6e48:	cf 5f       	subi	r28, 0xFF	; 255
    6e4a:	e0 91 ae 25 	lds	r30, 0x25AE	; 0x8025ae <udc_ptr_conf>
    6e4e:	f0 91 af 25 	lds	r31, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    6e52:	01 90       	ld	r0, Z+
    6e54:	f0 81       	ld	r31, Z
    6e56:	e0 2d       	mov	r30, r0
    6e58:	84 81       	ldd	r24, Z+4	; 0x04
    6e5a:	c8 17       	cp	r28, r24
    6e5c:	98 f3       	brcs	.-26     	; 0x6e44 <udc_reset+0x20>
    6e5e:	10 92 b0 25 	sts	0x25B0, r1	; 0x8025b0 <udc_num_configuration>
    6e62:	80 91 b4 25 	lds	r24, 0x25B4	; 0x8025b4 <udc_device_status>
    6e66:	81 fd       	sbrc	r24, 1
    6e68:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <usb_callback_remotewakeup_disable>
    6e6c:	10 92 b4 25 	sts	0x25B4, r1	; 0x8025b4 <udc_device_status>
    6e70:	10 92 b5 25 	sts	0x25B5, r1	; 0x8025b5 <udc_device_status+0x1>
    6e74:	cf 91       	pop	r28
    6e76:	08 95       	ret

00006e78 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    6e78:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    6e7a:	80 91 b0 25 	lds	r24, 0x25B0	; 0x8025b0 <udc_num_configuration>
    6e7e:	88 23       	and	r24, r24
    6e80:	49 f1       	breq	.+82     	; 0x6ed4 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    6e82:	a0 91 ae 25 	lds	r26, 0x25AE	; 0x8025ae <udc_ptr_conf>
    6e86:	b0 91 af 25 	lds	r27, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    6e8a:	ed 91       	ld	r30, X+
    6e8c:	fc 91       	ld	r31, X
    6e8e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    6e90:	84 81       	ldd	r24, Z+4	; 0x04
    6e92:	88 23       	and	r24, r24
    6e94:	f9 f0       	breq	.+62     	; 0x6ed4 <udc_sof_notify+0x5c>
    6e96:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    6e98:	ec 2f       	mov	r30, r28
    6e9a:	f0 e0       	ldi	r31, 0x00	; 0
    6e9c:	ee 0f       	add	r30, r30
    6e9e:	ff 1f       	adc	r31, r31
    6ea0:	12 96       	adiw	r26, 0x02	; 2
    6ea2:	8d 91       	ld	r24, X+
    6ea4:	9c 91       	ld	r25, X
    6ea6:	13 97       	sbiw	r26, 0x03	; 3
    6ea8:	e8 0f       	add	r30, r24
    6eaa:	f9 1f       	adc	r31, r25
    6eac:	01 90       	ld	r0, Z+
    6eae:	f0 81       	ld	r31, Z
    6eb0:	e0 2d       	mov	r30, r0
    6eb2:	00 84       	ldd	r0, Z+8	; 0x08
    6eb4:	f1 85       	ldd	r31, Z+9	; 0x09
    6eb6:	e0 2d       	mov	r30, r0
    6eb8:	30 97       	sbiw	r30, 0x00	; 0
    6eba:	09 f0       	breq	.+2      	; 0x6ebe <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    6ebc:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    6ebe:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    6ec0:	a0 91 ae 25 	lds	r26, 0x25AE	; 0x8025ae <udc_ptr_conf>
    6ec4:	b0 91 af 25 	lds	r27, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    6ec8:	ed 91       	ld	r30, X+
    6eca:	fc 91       	ld	r31, X
    6ecc:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    6ece:	84 81       	ldd	r24, Z+4	; 0x04
    6ed0:	c8 17       	cp	r28, r24
    6ed2:	10 f3       	brcs	.-60     	; 0x6e98 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    6ed4:	cf 91       	pop	r28
    6ed6:	08 95       	ret

00006ed8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    6ed8:	0f 93       	push	r16
    6eda:	1f 93       	push	r17
    6edc:	cf 93       	push	r28
    6ede:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    6ee0:	e5 ec       	ldi	r30, 0xC5	; 197
    6ee2:	f5 e2       	ldi	r31, 0x25	; 37
    6ee4:	12 86       	std	Z+10, r1	; 0x0a
    6ee6:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    6ee8:	14 86       	std	Z+12, r1	; 0x0c
    6eea:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    6eec:	16 86       	std	Z+14, r1	; 0x0e
    6eee:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    6ef0:	80 81       	ld	r24, Z
    6ef2:	88 23       	and	r24, r24
    6ef4:	0c f0       	brlt	.+2      	; 0x6ef8 <udc_process_setup+0x20>
    6ef6:	95 c2       	rjmp	.+1322   	; 0x7422 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    6ef8:	20 91 cb 25 	lds	r18, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    6efc:	30 91 cc 25 	lds	r19, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    6f00:	21 15       	cp	r18, r1
    6f02:	31 05       	cpc	r19, r1
    6f04:	09 f0       	breq	.+2      	; 0x6f08 <udc_process_setup+0x30>
    6f06:	88 c2       	rjmp	.+1296   	; 0x7418 <udc_process_setup+0x540>
    6f08:	7f c2       	rjmp	.+1278   	; 0x7408 <udc_process_setup+0x530>
    6f0a:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    6f0c:	09 f0       	breq	.+2      	; 0x6f10 <udc_process_setup+0x38>
    6f0e:	ab c0       	rjmp	.+342    	; 0x7066 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    6f10:	90 91 c6 25 	lds	r25, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0x1>
    6f14:	96 30       	cpi	r25, 0x06	; 6
    6f16:	81 f0       	breq	.+32     	; 0x6f38 <udc_process_setup+0x60>
    6f18:	98 30       	cpi	r25, 0x08	; 8
    6f1a:	09 f4       	brne	.+2      	; 0x6f1e <udc_process_setup+0x46>
    6f1c:	99 c0       	rjmp	.+306    	; 0x7050 <udc_process_setup+0x178>
    6f1e:	91 11       	cpse	r25, r1
    6f20:	a2 c0       	rjmp	.+324    	; 0x7066 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    6f22:	22 30       	cpi	r18, 0x02	; 2
    6f24:	31 05       	cpc	r19, r1
    6f26:	09 f0       	breq	.+2      	; 0x6f2a <udc_process_setup+0x52>
    6f28:	2b c2       	rjmp	.+1110   	; 0x7380 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    6f2a:	62 e0       	ldi	r22, 0x02	; 2
    6f2c:	70 e0       	ldi	r23, 0x00	; 0
    6f2e:	84 eb       	ldi	r24, 0xB4	; 180
    6f30:	95 e2       	ldi	r25, 0x25	; 37
    6f32:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <udd_set_setup_payload>
    6f36:	7e c2       	rjmp	.+1276   	; 0x7434 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    6f38:	80 91 c7 25 	lds	r24, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0x2>
    6f3c:	90 91 c8 25 	lds	r25, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    6f40:	29 2f       	mov	r18, r25
    6f42:	33 27       	eor	r19, r19
    6f44:	22 30       	cpi	r18, 0x02	; 2
    6f46:	31 05       	cpc	r19, r1
    6f48:	b1 f0       	breq	.+44     	; 0x6f76 <udc_process_setup+0x9e>
    6f4a:	20 f4       	brcc	.+8      	; 0x6f54 <udc_process_setup+0x7c>
    6f4c:	21 30       	cpi	r18, 0x01	; 1
    6f4e:	31 05       	cpc	r19, r1
    6f50:	41 f0       	breq	.+16     	; 0x6f62 <udc_process_setup+0x8a>
    6f52:	d8 c1       	rjmp	.+944    	; 0x7304 <udc_process_setup+0x42c>
    6f54:	23 30       	cpi	r18, 0x03	; 3
    6f56:	31 05       	cpc	r19, r1
    6f58:	f1 f1       	breq	.+124    	; 0x6fd6 <udc_process_setup+0xfe>
    6f5a:	2f 30       	cpi	r18, 0x0F	; 15
    6f5c:	31 05       	cpc	r19, r1
    6f5e:	61 f1       	breq	.+88     	; 0x6fb8 <udc_process_setup+0xe0>
    6f60:	d1 c1       	rjmp	.+930    	; 0x7304 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    6f62:	80 91 49 20 	lds	r24, 0x2049	; 0x802049 <udc_config>
    6f66:	90 91 4a 20 	lds	r25, 0x204A	; 0x80204a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    6f6a:	dc 01       	movw	r26, r24
    6f6c:	6c 91       	ld	r22, X
    6f6e:	70 e0       	ldi	r23, 0x00	; 0
    6f70:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <udd_set_setup_payload>
    6f74:	5e c0       	rjmp	.+188    	; 0x7032 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    6f76:	e0 91 49 20 	lds	r30, 0x2049	; 0x802049 <udc_config>
    6f7a:	f0 91 4a 20 	lds	r31, 0x204A	; 0x80204a <udc_config+0x1>
    6f7e:	21 89       	ldd	r18, Z+17	; 0x11
    6f80:	82 17       	cp	r24, r18
    6f82:	08 f0       	brcs	.+2      	; 0x6f86 <udc_process_setup+0xae>
    6f84:	fd c1       	rjmp	.+1018   	; 0x7380 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    6f86:	99 27       	eor	r25, r25
    6f88:	88 0f       	add	r24, r24
    6f8a:	99 1f       	adc	r25, r25
    6f8c:	88 0f       	add	r24, r24
    6f8e:	99 1f       	adc	r25, r25
    6f90:	e0 91 4b 20 	lds	r30, 0x204B	; 0x80204b <udc_config+0x2>
    6f94:	f0 91 4c 20 	lds	r31, 0x204C	; 0x80204c <udc_config+0x3>
    6f98:	e8 0f       	add	r30, r24
    6f9a:	f9 1f       	adc	r31, r25
    6f9c:	80 81       	ld	r24, Z
    6f9e:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    6fa0:	fc 01       	movw	r30, r24
    6fa2:	62 81       	ldd	r22, Z+2	; 0x02
    6fa4:	73 81       	ldd	r23, Z+3	; 0x03
    6fa6:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    6faa:	e0 91 cd 25 	lds	r30, 0x25CD	; 0x8025cd <udd_g_ctrlreq+0x8>
    6fae:	f0 91 ce 25 	lds	r31, 0x25CE	; 0x8025ce <udd_g_ctrlreq+0x9>
    6fb2:	82 e0       	ldi	r24, 0x02	; 2
    6fb4:	81 83       	std	Z+1, r24	; 0x01
    6fb6:	3d c0       	rjmp	.+122    	; 0x7032 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    6fb8:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <udc_config+0x4>
    6fbc:	90 91 4e 20 	lds	r25, 0x204E	; 0x80204e <udc_config+0x5>
    6fc0:	00 97       	sbiw	r24, 0x00	; 0
    6fc2:	09 f4       	brne	.+2      	; 0x6fc6 <udc_process_setup+0xee>
    6fc4:	dd c1       	rjmp	.+954    	; 0x7380 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    6fc6:	dc 01       	movw	r26, r24
    6fc8:	12 96       	adiw	r26, 0x02	; 2
    6fca:	6d 91       	ld	r22, X+
    6fcc:	7c 91       	ld	r23, X
    6fce:	13 97       	sbiw	r26, 0x03	; 3
    6fd0:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <udd_set_setup_payload>
    6fd4:	2e c0       	rjmp	.+92     	; 0x7032 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    6fd6:	99 27       	eor	r25, r25
    6fd8:	81 30       	cpi	r24, 0x01	; 1
    6fda:	91 05       	cpc	r25, r1
    6fdc:	99 f0       	breq	.+38     	; 0x7004 <udc_process_setup+0x12c>
    6fde:	58 f0       	brcs	.+22     	; 0x6ff6 <udc_process_setup+0x11e>
    6fe0:	82 30       	cpi	r24, 0x02	; 2
    6fe2:	91 05       	cpc	r25, r1
    6fe4:	09 f4       	brne	.+2      	; 0x6fe8 <udc_process_setup+0x110>
    6fe6:	22 c2       	rjmp	.+1092   	; 0x742c <udc_process_setup+0x554>
    6fe8:	03 97       	sbiw	r24, 0x03	; 3
    6fea:	09 f0       	breq	.+2      	; 0x6fee <udc_process_setup+0x116>
    6fec:	94 c1       	rjmp	.+808    	; 0x7316 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    6fee:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    6ff0:	e2 e5       	ldi	r30, 0x52	; 82
    6ff2:	f1 e2       	ldi	r31, 0x21	; 33
    6ff4:	0a c0       	rjmp	.+20     	; 0x700a <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    6ff6:	64 e0       	ldi	r22, 0x04	; 4
    6ff8:	70 e0       	ldi	r23, 0x00	; 0
    6ffa:	8e ee       	ldi	r24, 0xEE	; 238
    6ffc:	90 e2       	ldi	r25, 0x20	; 32
    6ffe:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <udd_set_setup_payload>
    7002:	17 c0       	rjmp	.+46     	; 0x7032 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    7004:	ed ed       	ldi	r30, 0xDD	; 221
    7006:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    7008:	30 e1       	ldi	r19, 0x10	; 16
    700a:	a0 eb       	ldi	r26, 0xB0	; 176
    700c:	b0 e2       	ldi	r27, 0x20	; 32
    700e:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    7010:	81 91       	ld	r24, Z+
    7012:	90 e0       	ldi	r25, 0x00	; 0
    7014:	8d 93       	st	X+, r24
    7016:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    7018:	2f 5f       	subi	r18, 0xFF	; 255
    701a:	23 17       	cp	r18, r19
    701c:	c8 f3       	brcs	.-14     	; 0x7010 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    701e:	63 2f       	mov	r22, r19
    7020:	66 0f       	add	r22, r22
    7022:	6e 5f       	subi	r22, 0xFE	; 254
    7024:	60 93 ae 20 	sts	0x20AE, r22	; 0x8020ae <udc_string_desc>
		udd_set_setup_payload(
    7028:	70 e0       	ldi	r23, 0x00	; 0
    702a:	8e ea       	ldi	r24, 0xAE	; 174
    702c:	90 e2       	ldi	r25, 0x20	; 32
    702e:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    7032:	e5 ec       	ldi	r30, 0xC5	; 197
    7034:	f5 e2       	ldi	r31, 0x25	; 37
    7036:	86 81       	ldd	r24, Z+6	; 0x06
    7038:	97 81       	ldd	r25, Z+7	; 0x07
    703a:	22 85       	ldd	r18, Z+10	; 0x0a
    703c:	33 85       	ldd	r19, Z+11	; 0x0b
    703e:	82 17       	cp	r24, r18
    7040:	93 07       	cpc	r25, r19
    7042:	08 f0       	brcs	.+2      	; 0x7046 <udc_process_setup+0x16e>
    7044:	f7 c1       	rjmp	.+1006   	; 0x7434 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    7046:	80 93 cf 25 	sts	0x25CF, r24	; 0x8025cf <udd_g_ctrlreq+0xa>
    704a:	90 93 d0 25 	sts	0x25D0, r25	; 0x8025d0 <udd_g_ctrlreq+0xb>
    704e:	f2 c1       	rjmp	.+996    	; 0x7434 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    7050:	21 30       	cpi	r18, 0x01	; 1
    7052:	31 05       	cpc	r19, r1
    7054:	09 f0       	breq	.+2      	; 0x7058 <udc_process_setup+0x180>
    7056:	94 c1       	rjmp	.+808    	; 0x7380 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    7058:	61 e0       	ldi	r22, 0x01	; 1
    705a:	70 e0       	ldi	r23, 0x00	; 0
    705c:	80 eb       	ldi	r24, 0xB0	; 176
    705e:	95 e2       	ldi	r25, 0x25	; 37
    7060:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <udd_set_setup_payload>
    7064:	e7 c1       	rjmp	.+974    	; 0x7434 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    7066:	81 30       	cpi	r24, 0x01	; 1
    7068:	e9 f5       	brne	.+122    	; 0x70e4 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    706a:	90 91 c6 25 	lds	r25, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0x1>
    706e:	9a 30       	cpi	r25, 0x0A	; 10
    7070:	c9 f5       	brne	.+114    	; 0x70e4 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    7072:	21 30       	cpi	r18, 0x01	; 1
    7074:	31 05       	cpc	r19, r1
    7076:	09 f0       	breq	.+2      	; 0x707a <udc_process_setup+0x1a2>
    7078:	53 c1       	rjmp	.+678    	; 0x7320 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    707a:	80 91 b0 25 	lds	r24, 0x25B0	; 0x8025b0 <udc_num_configuration>
    707e:	88 23       	and	r24, r24
    7080:	09 f4       	brne	.+2      	; 0x7084 <udc_process_setup+0x1ac>
    7082:	4e c1       	rjmp	.+668    	; 0x7320 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7084:	c0 91 c9 25 	lds	r28, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0x4>
    7088:	d0 91 ca 25 	lds	r29, 0x25CA	; 0x8025ca <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    708c:	00 91 ae 25 	lds	r16, 0x25AE	; 0x8025ae <udc_ptr_conf>
    7090:	10 91 af 25 	lds	r17, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    7094:	d8 01       	movw	r26, r16
    7096:	ed 91       	ld	r30, X+
    7098:	fc 91       	ld	r31, X
    709a:	84 81       	ldd	r24, Z+4	; 0x04
    709c:	c8 17       	cp	r28, r24
    709e:	08 f0       	brcs	.+2      	; 0x70a2 <udc_process_setup+0x1ca>
    70a0:	3f c1       	rjmp	.+638    	; 0x7320 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    70a2:	60 e0       	ldi	r22, 0x00	; 0
    70a4:	8c 2f       	mov	r24, r28
    70a6:	0c de       	rcall	.-1000   	; 0x6cc0 <udc_update_iface_desc>
    70a8:	88 23       	and	r24, r24
    70aa:	09 f4       	brne	.+2      	; 0x70ae <udc_process_setup+0x1d6>
    70ac:	34 c1       	rjmp	.+616    	; 0x7316 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    70ae:	ce 01       	movw	r24, r28
    70b0:	99 27       	eor	r25, r25
    70b2:	88 0f       	add	r24, r24
    70b4:	99 1f       	adc	r25, r25
    70b6:	d8 01       	movw	r26, r16
    70b8:	12 96       	adiw	r26, 0x02	; 2
    70ba:	ed 91       	ld	r30, X+
    70bc:	fc 91       	ld	r31, X
    70be:	13 97       	sbiw	r26, 0x03	; 3
    70c0:	e8 0f       	add	r30, r24
    70c2:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    70c4:	01 90       	ld	r0, Z+
    70c6:	f0 81       	ld	r31, Z
    70c8:	e0 2d       	mov	r30, r0
    70ca:	86 81       	ldd	r24, Z+6	; 0x06
    70cc:	97 81       	ldd	r25, Z+7	; 0x07
    70ce:	fc 01       	movw	r30, r24
    70d0:	19 95       	eicall
    70d2:	80 93 b2 25 	sts	0x25B2, r24	; 0x8025b2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    70d6:	61 e0       	ldi	r22, 0x01	; 1
    70d8:	70 e0       	ldi	r23, 0x00	; 0
    70da:	82 eb       	ldi	r24, 0xB2	; 178
    70dc:	95 e2       	ldi	r25, 0x25	; 37
    70de:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <udd_set_setup_payload>
    70e2:	a8 c1       	rjmp	.+848    	; 0x7434 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    70e4:	82 30       	cpi	r24, 0x02	; 2
    70e6:	09 f0       	breq	.+2      	; 0x70ea <udc_process_setup+0x212>
    70e8:	16 c1       	rjmp	.+556    	; 0x7316 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    70ea:	80 91 c6 25 	lds	r24, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0x1>
    70ee:	81 11       	cpse	r24, r1
    70f0:	0b c1       	rjmp	.+534    	; 0x7308 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    70f2:	22 30       	cpi	r18, 0x02	; 2
    70f4:	31 05       	cpc	r19, r1
    70f6:	09 f0       	breq	.+2      	; 0x70fa <udc_process_setup+0x222>
    70f8:	43 c1       	rjmp	.+646    	; 0x7380 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    70fa:	80 91 c9 25 	lds	r24, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0x4>
    70fe:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <udd_ep_is_halted>
    7102:	90 e0       	ldi	r25, 0x00	; 0
    7104:	80 93 aa 25 	sts	0x25AA, r24	; 0x8025aa <udc_ep_status.4757>
    7108:	90 93 ab 25 	sts	0x25AB, r25	; 0x8025ab <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    710c:	62 e0       	ldi	r22, 0x02	; 2
    710e:	70 e0       	ldi	r23, 0x00	; 0
    7110:	8a ea       	ldi	r24, 0xAA	; 170
    7112:	95 e2       	ldi	r25, 0x25	; 37
    7114:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <udd_set_setup_payload>
    7118:	8d c1       	rjmp	.+794    	; 0x7434 <udc_process_setup+0x55c>
    711a:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    711c:	09 f0       	breq	.+2      	; 0x7120 <udc_process_setup+0x248>
    711e:	a0 c0       	rjmp	.+320    	; 0x7260 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    7120:	90 91 c6 25 	lds	r25, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0x1>
    7124:	93 30       	cpi	r25, 0x03	; 3
    7126:	91 f1       	breq	.+100    	; 0x718c <udc_process_setup+0x2b4>
    7128:	18 f4       	brcc	.+6      	; 0x7130 <udc_process_setup+0x258>
    712a:	91 30       	cpi	r25, 0x01	; 1
    712c:	a9 f0       	breq	.+42     	; 0x7158 <udc_process_setup+0x280>
    712e:	98 c0       	rjmp	.+304    	; 0x7260 <udc_process_setup+0x388>
    7130:	95 30       	cpi	r25, 0x05	; 5
    7132:	21 f0       	breq	.+8      	; 0x713c <udc_process_setup+0x264>
    7134:	99 30       	cpi	r25, 0x09	; 9
    7136:	09 f4       	brne	.+2      	; 0x713a <udc_process_setup+0x262>
    7138:	43 c0       	rjmp	.+134    	; 0x71c0 <udc_process_setup+0x2e8>
    713a:	92 c0       	rjmp	.+292    	; 0x7260 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    713c:	80 91 cb 25 	lds	r24, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    7140:	90 91 cc 25 	lds	r25, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    7144:	89 2b       	or	r24, r25
    7146:	09 f0       	breq	.+2      	; 0x714a <udc_process_setup+0x272>
    7148:	1b c1       	rjmp	.+566    	; 0x7380 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    714a:	8a e5       	ldi	r24, 0x5A	; 90
    714c:	96 e3       	ldi	r25, 0x36	; 54
    714e:	80 93 d1 25 	sts	0x25D1, r24	; 0x8025d1 <udd_g_ctrlreq+0xc>
    7152:	90 93 d2 25 	sts	0x25D2, r25	; 0x8025d2 <udd_g_ctrlreq+0xd>
    7156:	6e c1       	rjmp	.+732    	; 0x7434 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    7158:	80 91 cb 25 	lds	r24, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    715c:	90 91 cc 25 	lds	r25, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    7160:	89 2b       	or	r24, r25
    7162:	09 f0       	breq	.+2      	; 0x7166 <udc_process_setup+0x28e>
    7164:	0d c1       	rjmp	.+538    	; 0x7380 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    7166:	80 91 c7 25 	lds	r24, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0x2>
    716a:	90 91 c8 25 	lds	r25, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0x3>
    716e:	01 97       	sbiw	r24, 0x01	; 1
    7170:	09 f0       	breq	.+2      	; 0x7174 <udc_process_setup+0x29c>
    7172:	06 c1       	rjmp	.+524    	; 0x7380 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    7174:	80 91 b4 25 	lds	r24, 0x25B4	; 0x8025b4 <udc_device_status>
    7178:	90 91 b5 25 	lds	r25, 0x25B5	; 0x8025b5 <udc_device_status+0x1>
    717c:	8d 7f       	andi	r24, 0xFD	; 253
    717e:	80 93 b4 25 	sts	0x25B4, r24	; 0x8025b4 <udc_device_status>
    7182:	90 93 b5 25 	sts	0x25B5, r25	; 0x8025b5 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    7186:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <usb_callback_remotewakeup_disable>
    718a:	54 c1       	rjmp	.+680    	; 0x7434 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    718c:	80 91 cb 25 	lds	r24, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    7190:	90 91 cc 25 	lds	r25, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    7194:	89 2b       	or	r24, r25
    7196:	09 f0       	breq	.+2      	; 0x719a <udc_process_setup+0x2c2>
    7198:	f3 c0       	rjmp	.+486    	; 0x7380 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    719a:	80 91 c7 25 	lds	r24, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0x2>
    719e:	90 91 c8 25 	lds	r25, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0x3>
    71a2:	01 97       	sbiw	r24, 0x01	; 1
    71a4:	09 f0       	breq	.+2      	; 0x71a8 <udc_process_setup+0x2d0>
    71a6:	b2 c0       	rjmp	.+356    	; 0x730c <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    71a8:	80 91 b4 25 	lds	r24, 0x25B4	; 0x8025b4 <udc_device_status>
    71ac:	90 91 b5 25 	lds	r25, 0x25B5	; 0x8025b5 <udc_device_status+0x1>
    71b0:	82 60       	ori	r24, 0x02	; 2
    71b2:	80 93 b4 25 	sts	0x25B4, r24	; 0x8025b4 <udc_device_status>
    71b6:	90 93 b5 25 	sts	0x25B5, r25	; 0x8025b5 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    71ba:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <usb_callback_remotewakeup_enable>
    71be:	3a c1       	rjmp	.+628    	; 0x7434 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    71c0:	80 91 cb 25 	lds	r24, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    71c4:	90 91 cc 25 	lds	r25, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    71c8:	89 2b       	or	r24, r25
    71ca:	09 f0       	breq	.+2      	; 0x71ce <udc_process_setup+0x2f6>
    71cc:	d9 c0       	rjmp	.+434    	; 0x7380 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    71ce:	0e 94 5e 25 	call	0x4abc	; 0x4abc <udd_getaddress>
    71d2:	88 23       	and	r24, r24
    71d4:	09 f4       	brne	.+2      	; 0x71d8 <udc_process_setup+0x300>
    71d6:	9f c0       	rjmp	.+318    	; 0x7316 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    71d8:	20 91 c7 25 	lds	r18, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0x2>
    71dc:	30 91 c8 25 	lds	r19, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0x3>
    71e0:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    71e2:	e0 91 49 20 	lds	r30, 0x2049	; 0x802049 <udc_config>
    71e6:	f0 91 4a 20 	lds	r31, 0x204A	; 0x80204a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    71ea:	81 89       	ldd	r24, Z+17	; 0x11
    71ec:	90 e0       	ldi	r25, 0x00	; 0
    71ee:	82 17       	cp	r24, r18
    71f0:	93 07       	cpc	r25, r19
    71f2:	08 f4       	brcc	.+2      	; 0x71f6 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    71f4:	90 c0       	rjmp	.+288    	; 0x7316 <udc_process_setup+0x43e>
    71f6:	16 de       	rcall	.-980    	; 0x6e24 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    71f8:	80 91 c7 25 	lds	r24, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0x2>
    71fc:	90 91 c8 25 	lds	r25, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0x3>
    7200:	80 93 b0 25 	sts	0x25B0, r24	; 0x8025b0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    7204:	88 23       	and	r24, r24
    7206:	09 f4       	brne	.+2      	; 0x720a <udc_process_setup+0x332>
    7208:	15 c1       	rjmp	.+554    	; 0x7434 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    720a:	99 27       	eor	r25, r25
    720c:	81 50       	subi	r24, 0x01	; 1
    720e:	90 4c       	sbci	r25, 0xC0	; 192
    7210:	88 0f       	add	r24, r24
    7212:	99 1f       	adc	r25, r25
    7214:	88 0f       	add	r24, r24
    7216:	99 1f       	adc	r25, r25
    7218:	e0 91 4b 20 	lds	r30, 0x204B	; 0x80204b <udc_config+0x2>
    721c:	f0 91 4c 20 	lds	r31, 0x204C	; 0x80204c <udc_config+0x3>
    7220:	e8 0f       	add	r30, r24
    7222:	f9 1f       	adc	r31, r25
    7224:	e0 93 ae 25 	sts	0x25AE, r30	; 0x8025ae <udc_ptr_conf>
    7228:	f0 93 af 25 	sts	0x25AF, r31	; 0x8025af <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    722c:	01 90       	ld	r0, Z+
    722e:	f0 81       	ld	r31, Z
    7230:	e0 2d       	mov	r30, r0
    7232:	84 81       	ldd	r24, Z+4	; 0x04
    7234:	88 23       	and	r24, r24
    7236:	09 f4       	brne	.+2      	; 0x723a <udc_process_setup+0x362>
    7238:	fd c0       	rjmp	.+506    	; 0x7434 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    723a:	c0 e0       	ldi	r28, 0x00	; 0
    723c:	60 e0       	ldi	r22, 0x00	; 0
    723e:	8c 2f       	mov	r24, r28
    7240:	bb dd       	rcall	.-1162   	; 0x6db8 <udc_iface_enable>
    7242:	88 23       	and	r24, r24
    7244:	09 f4       	brne	.+2      	; 0x7248 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    7246:	67 c0       	rjmp	.+206    	; 0x7316 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7248:	cf 5f       	subi	r28, 0xFF	; 255
    724a:	e0 91 ae 25 	lds	r30, 0x25AE	; 0x8025ae <udc_ptr_conf>
    724e:	f0 91 af 25 	lds	r31, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    7252:	01 90       	ld	r0, Z+
    7254:	f0 81       	ld	r31, Z
    7256:	e0 2d       	mov	r30, r0
    7258:	84 81       	ldd	r24, Z+4	; 0x04
    725a:	c8 17       	cp	r28, r24
    725c:	78 f3       	brcs	.-34     	; 0x723c <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    725e:	ea c0       	rjmp	.+468    	; 0x7434 <udc_process_setup+0x55c>
    7260:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    7262:	e9 f4       	brne	.+58     	; 0x729e <udc_process_setup+0x3c6>
    7264:	90 91 c6 25 	lds	r25, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0x1>
    7268:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    726a:	c9 f4       	brne	.+50     	; 0x729e <udc_process_setup+0x3c6>
    726c:	80 91 cb 25 	lds	r24, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    7270:	90 91 cc 25 	lds	r25, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    7274:	89 2b       	or	r24, r25
    7276:	09 f0       	breq	.+2      	; 0x727a <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    7278:	53 c0       	rjmp	.+166    	; 0x7320 <udc_process_setup+0x448>
    727a:	80 91 b0 25 	lds	r24, 0x25B0	; 0x8025b0 <udc_num_configuration>
    727e:	88 23       	and	r24, r24
    7280:	09 f4       	brne	.+2      	; 0x7284 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7282:	4e c0       	rjmp	.+156    	; 0x7320 <udc_process_setup+0x448>
    7284:	e5 ec       	ldi	r30, 0xC5	; 197
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    7286:	f5 e2       	ldi	r31, 0x25	; 37

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    7288:	c4 81       	ldd	r28, Z+4	; 0x04
    728a:	d2 81       	ldd	r29, Z+2	; 0x02
    728c:	8c 2f       	mov	r24, r28
    728e:	52 dd       	rcall	.-1372   	; 0x6d34 <udc_iface_disable>
    7290:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    7292:	09 f4       	brne	.+2      	; 0x7296 <udc_process_setup+0x3be>
    7294:	40 c0       	rjmp	.+128    	; 0x7316 <udc_process_setup+0x43e>
    7296:	6d 2f       	mov	r22, r29
    7298:	8c 2f       	mov	r24, r28
    729a:	8e dd       	rcall	.-1252   	; 0x6db8 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    729c:	3a c0       	rjmp	.+116    	; 0x7312 <udc_process_setup+0x43a>
    729e:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    72a0:	d1 f5       	brne	.+116    	; 0x7316 <udc_process_setup+0x43e>
    72a2:	80 91 c6 25 	lds	r24, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0x1>
    72a6:	81 30       	cpi	r24, 0x01	; 1
    72a8:	19 f0       	breq	.+6      	; 0x72b0 <udc_process_setup+0x3d8>
    72aa:	83 30       	cpi	r24, 0x03	; 3
    72ac:	a1 f0       	breq	.+40     	; 0x72d6 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    72ae:	30 c0       	rjmp	.+96     	; 0x7310 <udc_process_setup+0x438>
    72b0:	80 91 cb 25 	lds	r24, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    72b4:	90 91 cc 25 	lds	r25, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    72b8:	89 2b       	or	r24, r25
    72ba:	09 f0       	breq	.+2      	; 0x72be <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    72bc:	61 c0       	rjmp	.+194    	; 0x7380 <udc_process_setup+0x4a8>
    72be:	80 91 c7 25 	lds	r24, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0x2>
    72c2:	90 91 c8 25 	lds	r25, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0x3>
    72c6:	89 2b       	or	r24, r25
    72c8:	09 f0       	breq	.+2      	; 0x72cc <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    72ca:	5a c0       	rjmp	.+180    	; 0x7380 <udc_process_setup+0x4a8>
    72cc:	80 91 c9 25 	lds	r24, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0x4>
    72d0:	0e 94 13 26 	call	0x4c26	; 0x4c26 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    72d4:	1e c0       	rjmp	.+60     	; 0x7312 <udc_process_setup+0x43a>
    72d6:	80 91 cb 25 	lds	r24, 0x25CB	; 0x8025cb <udd_g_ctrlreq+0x6>
    72da:	90 91 cc 25 	lds	r25, 0x25CC	; 0x8025cc <udd_g_ctrlreq+0x7>
    72de:	89 2b       	or	r24, r25
    72e0:	09 f0       	breq	.+2      	; 0x72e4 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    72e2:	4e c0       	rjmp	.+156    	; 0x7380 <udc_process_setup+0x4a8>
    72e4:	80 91 c7 25 	lds	r24, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0x2>
    72e8:	90 91 c8 25 	lds	r25, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0x3>
    72ec:	89 2b       	or	r24, r25
    72ee:	09 f0       	breq	.+2      	; 0x72f2 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    72f0:	47 c0       	rjmp	.+142    	; 0x7380 <udc_process_setup+0x4a8>
    72f2:	c5 ec       	ldi	r28, 0xC5	; 197
    72f4:	d5 e2       	ldi	r29, 0x25	; 37
    72f6:	8c 81       	ldd	r24, Y+4	; 0x04
    72f8:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    72fc:	8c 81       	ldd	r24, Y+4	; 0x04
    72fe:	0e 94 80 27 	call	0x4f00	; 0x4f00 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    7302:	07 c0       	rjmp	.+14     	; 0x7312 <udc_process_setup+0x43a>
    7304:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    7306:	05 c0       	rjmp	.+10     	; 0x7312 <udc_process_setup+0x43a>
    7308:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    730a:	03 c0       	rjmp	.+6      	; 0x7312 <udc_process_setup+0x43a>
    730c:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    730e:	01 c0       	rjmp	.+2      	; 0x7312 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    7310:	80 e0       	ldi	r24, 0x00	; 0
    7312:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    7314:	90 c0       	rjmp	.+288    	; 0x7436 <udc_process_setup+0x55e>
    7316:	80 91 c5 25 	lds	r24, 0x25C5	; 0x8025c5 <udd_g_ctrlreq>
    731a:	8f 71       	andi	r24, 0x1F	; 31
    731c:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    731e:	81 f5       	brne	.+96     	; 0x7380 <udc_process_setup+0x4a8>
    7320:	80 91 b0 25 	lds	r24, 0x25B0	; 0x8025b0 <udc_num_configuration>
    7324:	88 23       	and	r24, r24
    7326:	09 f4       	brne	.+2      	; 0x732a <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7328:	71 c0       	rjmp	.+226    	; 0x740c <udc_process_setup+0x534>
    732a:	00 91 c9 25 	lds	r16, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0x4>
    732e:	10 91 ca 25 	lds	r17, 0x25CA	; 0x8025ca <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    7332:	c0 91 ae 25 	lds	r28, 0x25AE	; 0x8025ae <udc_ptr_conf>
    7336:	d0 91 af 25 	lds	r29, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    733a:	e8 81       	ld	r30, Y
    733c:	f9 81       	ldd	r31, Y+1	; 0x01
    733e:	84 81       	ldd	r24, Z+4	; 0x04
    7340:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    7342:	08 f0       	brcs	.+2      	; 0x7346 <udc_process_setup+0x46e>
    7344:	65 c0       	rjmp	.+202    	; 0x7410 <udc_process_setup+0x538>
    7346:	60 e0       	ldi	r22, 0x00	; 0
    7348:	80 2f       	mov	r24, r16
    734a:	ba dc       	rcall	.-1676   	; 0x6cc0 <udc_update_iface_desc>
    734c:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    734e:	c1 f0       	breq	.+48     	; 0x7380 <udc_process_setup+0x4a8>
    7350:	f8 01       	movw	r30, r16
    7352:	ff 27       	eor	r31, r31
    7354:	cf 01       	movw	r24, r30
    7356:	88 0f       	add	r24, r24
    7358:	99 1f       	adc	r25, r25
    735a:	ea 81       	ldd	r30, Y+2	; 0x02
    735c:	fb 81       	ldd	r31, Y+3	; 0x03
    735e:	e8 0f       	add	r30, r24
    7360:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    7362:	c0 81       	ld	r28, Z
    7364:	d1 81       	ldd	r29, Z+1	; 0x01
    7366:	ee 81       	ldd	r30, Y+6	; 0x06
    7368:	ff 81       	ldd	r31, Y+7	; 0x07
    736a:	19 95       	eicall
    736c:	68 2f       	mov	r22, r24
    736e:	80 2f       	mov	r24, r16
    7370:	a7 dc       	rcall	.-1714   	; 0x6cc0 <udc_update_iface_desc>
    7372:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    7374:	29 f0       	breq	.+10     	; 0x7380 <udc_process_setup+0x4a8>
    7376:	ec 81       	ldd	r30, Y+4	; 0x04
    7378:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    737a:	19 95       	eicall
    737c:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    737e:	5b c0       	rjmp	.+182    	; 0x7436 <udc_process_setup+0x55e>
    7380:	80 91 c5 25 	lds	r24, 0x25C5	; 0x8025c5 <udd_g_ctrlreq>
    7384:	8f 71       	andi	r24, 0x1F	; 31
    7386:	82 30       	cpi	r24, 0x02	; 2
    7388:	09 f0       	breq	.+2      	; 0x738c <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    738a:	44 c0       	rjmp	.+136    	; 0x7414 <udc_process_setup+0x53c>
    738c:	80 91 b0 25 	lds	r24, 0x25B0	; 0x8025b0 <udc_num_configuration>
    7390:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7392:	b1 f1       	breq	.+108    	; 0x7400 <udc_process_setup+0x528>
    7394:	a0 91 ae 25 	lds	r26, 0x25AE	; 0x8025ae <udc_ptr_conf>
    7398:	b0 91 af 25 	lds	r27, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    739c:	ed 91       	ld	r30, X+
    739e:	fc 91       	ld	r31, X
    73a0:	11 97       	sbiw	r26, 0x01	; 1
    73a2:	84 81       	ldd	r24, Z+4	; 0x04
    73a4:	88 23       	and	r24, r24
    73a6:	71 f1       	breq	.+92     	; 0x7404 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    73a8:	c0 e0       	ldi	r28, 0x00	; 0
    73aa:	ec 2f       	mov	r30, r28
    73ac:	f0 e0       	ldi	r31, 0x00	; 0
    73ae:	ee 0f       	add	r30, r30
    73b0:	ff 1f       	adc	r31, r31
    73b2:	12 96       	adiw	r26, 0x02	; 2
    73b4:	8d 91       	ld	r24, X+
    73b6:	9c 91       	ld	r25, X
    73b8:	13 97       	sbiw	r26, 0x03	; 3
    73ba:	e8 0f       	add	r30, r24
    73bc:	f9 1f       	adc	r31, r25
    73be:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    73c0:	11 81       	ldd	r17, Z+1	; 0x01
    73c2:	d8 01       	movw	r26, r16
    73c4:	16 96       	adiw	r26, 0x06	; 6
    73c6:	ed 91       	ld	r30, X+
    73c8:	fc 91       	ld	r31, X
    73ca:	17 97       	sbiw	r26, 0x07	; 7
    73cc:	19 95       	eicall
    73ce:	68 2f       	mov	r22, r24
    73d0:	8c 2f       	mov	r24, r28
    73d2:	76 dc       	rcall	.-1812   	; 0x6cc0 <udc_update_iface_desc>
    73d4:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    73d6:	79 f1       	breq	.+94     	; 0x7436 <udc_process_setup+0x55e>
    73d8:	d8 01       	movw	r26, r16
    73da:	14 96       	adiw	r26, 0x04	; 4
    73dc:	ed 91       	ld	r30, X+
    73de:	fc 91       	ld	r31, X
    73e0:	15 97       	sbiw	r26, 0x05	; 5
    73e2:	19 95       	eicall
    73e4:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    73e6:	27 c0       	rjmp	.+78     	; 0x7436 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    73e8:	cf 5f       	subi	r28, 0xFF	; 255
    73ea:	a0 91 ae 25 	lds	r26, 0x25AE	; 0x8025ae <udc_ptr_conf>
    73ee:	b0 91 af 25 	lds	r27, 0x25AF	; 0x8025af <udc_ptr_conf+0x1>
    73f2:	ed 91       	ld	r30, X+
    73f4:	fc 91       	ld	r31, X
    73f6:	11 97       	sbiw	r26, 0x01	; 1
    73f8:	94 81       	ldd	r25, Z+4	; 0x04
    73fa:	c9 17       	cp	r28, r25
    73fc:	b0 f2       	brcs	.-84     	; 0x73aa <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    73fe:	1b c0       	rjmp	.+54     	; 0x7436 <udc_process_setup+0x55e>
    7400:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    7402:	19 c0       	rjmp	.+50     	; 0x7436 <udc_process_setup+0x55e>
    7404:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    7406:	17 c0       	rjmp	.+46     	; 0x7436 <udc_process_setup+0x55e>
    7408:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    740a:	15 c0       	rjmp	.+42     	; 0x7436 <udc_process_setup+0x55e>
    740c:	80 e0       	ldi	r24, 0x00	; 0
    740e:	13 c0       	rjmp	.+38     	; 0x7436 <udc_process_setup+0x55e>
    7410:	80 e0       	ldi	r24, 0x00	; 0
    7412:	11 c0       	rjmp	.+34     	; 0x7436 <udc_process_setup+0x55e>
    7414:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    7416:	0f c0       	rjmp	.+30     	; 0x7436 <udc_process_setup+0x55e>
    7418:	98 2f       	mov	r25, r24
    741a:	90 76       	andi	r25, 0x60	; 96
    741c:	09 f0       	breq	.+2      	; 0x7420 <udc_process_setup+0x548>
    741e:	7b cf       	rjmp	.-266    	; 0x7316 <udc_process_setup+0x43e>
    7420:	74 cd       	rjmp	.-1304   	; 0x6f0a <udc_process_setup+0x32>
    7422:	98 2f       	mov	r25, r24
    7424:	90 76       	andi	r25, 0x60	; 96
    7426:	09 f0       	breq	.+2      	; 0x742a <udc_process_setup+0x552>
    7428:	76 cf       	rjmp	.-276    	; 0x7316 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    742a:	77 ce       	rjmp	.-786    	; 0x711a <udc_process_setup+0x242>
		str = udc_string_product_name;
    742c:	3c e0       	ldi	r19, 0x0C	; 12
    742e:	e0 ed       	ldi	r30, 0xD0	; 208
    7430:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    7432:	eb cd       	rjmp	.-1066   	; 0x700a <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    7434:	81 e0       	ldi	r24, 0x01	; 1
    7436:	df 91       	pop	r29
    7438:	cf 91       	pop	r28
    743a:	1f 91       	pop	r17
    743c:	0f 91       	pop	r16
    743e:	08 95       	ret

00007440 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    7440:	cf 93       	push	r28
    7442:	df 93       	push	r29
    7444:	1f 92       	push	r1
    7446:	cd b7       	in	r28, 0x3d	; 61
    7448:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    744a:	80 91 df 25 	lds	r24, 0x25DF	; 0x8025df <stdio_base>
    744e:	90 91 e0 25 	lds	r25, 0x25E0	; 0x8025e0 <stdio_base+0x1>
    7452:	e0 91 db 25 	lds	r30, 0x25DB	; 0x8025db <ptr_get>
    7456:	f0 91 dc 25 	lds	r31, 0x25DC	; 0x8025dc <ptr_get+0x1>
    745a:	be 01       	movw	r22, r28
    745c:	6f 5f       	subi	r22, 0xFF	; 255
    745e:	7f 4f       	sbci	r23, 0xFF	; 255
    7460:	19 95       	eicall
	return c;
    7462:	89 81       	ldd	r24, Y+1	; 0x01
}
    7464:	08 2e       	mov	r0, r24
    7466:	00 0c       	add	r0, r0
    7468:	99 0b       	sbc	r25, r25
    746a:	0f 90       	pop	r0
    746c:	df 91       	pop	r29
    746e:	cf 91       	pop	r28
    7470:	08 95       	ret

00007472 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    7472:	80 91 b6 25 	lds	r24, 0x25B6	; 0x8025b6 <stdio_usb_interface_enable>
    7476:	88 23       	and	r24, r24
    7478:	81 f0       	breq	.+32     	; 0x749a <stdio_usb_putchar+0x28>
    747a:	86 2f       	mov	r24, r22
    747c:	08 2e       	mov	r0, r24
    747e:	00 0c       	add	r0, r0
    7480:	99 0b       	sbc	r25, r25
    7482:	df db       	rcall	.-2114   	; 0x6c42 <udi_cdc_putc>
    7484:	21 e0       	ldi	r18, 0x01	; 1
    7486:	30 e0       	ldi	r19, 0x00	; 0
    7488:	89 2b       	or	r24, r25
    748a:	11 f0       	breq	.+4      	; 0x7490 <stdio_usb_putchar+0x1e>
    748c:	20 e0       	ldi	r18, 0x00	; 0
    748e:	30 e0       	ldi	r19, 0x00	; 0
    7490:	88 27       	eor	r24, r24
    7492:	99 27       	eor	r25, r25
    7494:	82 1b       	sub	r24, r18
    7496:	93 0b       	sbc	r25, r19
    7498:	08 95       	ret
    749a:	80 e0       	ldi	r24, 0x00	; 0
    749c:	90 e0       	ldi	r25, 0x00	; 0
    749e:	08 95       	ret

000074a0 <stdio_usb_getchar>:
    74a0:	cf 93       	push	r28
    74a2:	df 93       	push	r29
    74a4:	80 91 b6 25 	lds	r24, 0x25B6	; 0x8025b6 <stdio_usb_interface_enable>
    74a8:	81 11       	cpse	r24, r1
    74aa:	03 c0       	rjmp	.+6      	; 0x74b2 <stdio_usb_getchar+0x12>
    74ac:	fb 01       	movw	r30, r22
    74ae:	10 82       	st	Z, r1
    74b0:	03 c0       	rjmp	.+6      	; 0x74b8 <stdio_usb_getchar+0x18>
    74b2:	eb 01       	movw	r28, r22
    74b4:	3e db       	rcall	.-2436   	; 0x6b32 <udi_cdc_getc>
    74b6:	88 83       	st	Y, r24
    74b8:	df 91       	pop	r29
    74ba:	cf 91       	pop	r28
    74bc:	08 95       	ret

000074be <stdio_usb_enable>:
    74be:	81 e0       	ldi	r24, 0x01	; 1
    74c0:	80 93 b6 25 	sts	0x25B6, r24	; 0x8025b6 <stdio_usb_interface_enable>
    74c4:	08 95       	ret

000074c6 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    74c6:	10 92 df 25 	sts	0x25DF, r1	; 0x8025df <stdio_base>
    74ca:	10 92 e0 25 	sts	0x25E0, r1	; 0x8025e0 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    74ce:	89 e3       	ldi	r24, 0x39	; 57
    74d0:	9a e3       	ldi	r25, 0x3A	; 58
    74d2:	80 93 dd 25 	sts	0x25DD, r24	; 0x8025dd <ptr_put>
    74d6:	90 93 de 25 	sts	0x25DE, r25	; 0x8025de <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    74da:	80 e5       	ldi	r24, 0x50	; 80
    74dc:	9a e3       	ldi	r25, 0x3A	; 58
    74de:	80 93 db 25 	sts	0x25DB, r24	; 0x8025db <ptr_get>
    74e2:	90 93 dc 25 	sts	0x25DC, r25	; 0x8025dc <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    74e6:	9b dc       	rcall	.-1738   	; 0x6e1e <udc_start>
    74e8:	60 e2       	ldi	r22, 0x20	; 32
    74ea:	7a e3       	ldi	r23, 0x3A	; 58
    74ec:	8a e7       	ldi	r24, 0x7A	; 122
    74ee:	9a e3       	ldi	r25, 0x3A	; 58
    74f0:	12 c3       	rjmp	.+1572   	; 0x7b16 <fdevopen>
    74f2:	08 95       	ret

000074f4 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    74f4:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    74f6:	80 91 df 25 	lds	r24, 0x25DF	; 0x8025df <stdio_base>
    74fa:	90 91 e0 25 	lds	r25, 0x25E0	; 0x8025e0 <stdio_base+0x1>
    74fe:	e0 91 dd 25 	lds	r30, 0x25DD	; 0x8025dd <ptr_put>
    7502:	f0 91 de 25 	lds	r31, 0x25DE	; 0x8025de <ptr_put+0x1>
    7506:	19 95       	eicall
    7508:	99 23       	and	r25, r25
    750a:	1c f0       	brlt	.+6      	; 0x7512 <_write+0x1e>
		return -1;
	}
	return 1;
    750c:	81 e0       	ldi	r24, 0x01	; 1
    750e:	90 e0       	ldi	r25, 0x00	; 0
    7510:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    7512:	8f ef       	ldi	r24, 0xFF	; 255
    7514:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    7516:	08 95       	ret

00007518 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    7518:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    751c:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    751e:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    7520:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    7524:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    7526:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    752a:	08 95       	ret

0000752c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    752c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    752e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    7530:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    7532:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    7534:	60 83       	st	Z, r22
	ret                             // Return to caller
    7536:	08 95       	ret

00007538 <__udivmodhi4>:
    7538:	aa 1b       	sub	r26, r26
    753a:	bb 1b       	sub	r27, r27
    753c:	51 e1       	ldi	r21, 0x11	; 17
    753e:	07 c0       	rjmp	.+14     	; 0x754e <__udivmodhi4_ep>

00007540 <__udivmodhi4_loop>:
    7540:	aa 1f       	adc	r26, r26
    7542:	bb 1f       	adc	r27, r27
    7544:	a6 17       	cp	r26, r22
    7546:	b7 07       	cpc	r27, r23
    7548:	10 f0       	brcs	.+4      	; 0x754e <__udivmodhi4_ep>
    754a:	a6 1b       	sub	r26, r22
    754c:	b7 0b       	sbc	r27, r23

0000754e <__udivmodhi4_ep>:
    754e:	88 1f       	adc	r24, r24
    7550:	99 1f       	adc	r25, r25
    7552:	5a 95       	dec	r21
    7554:	a9 f7       	brne	.-22     	; 0x7540 <__udivmodhi4_loop>
    7556:	80 95       	com	r24
    7558:	90 95       	com	r25
    755a:	bc 01       	movw	r22, r24
    755c:	cd 01       	movw	r24, r26
    755e:	08 95       	ret

00007560 <__udivmodsi4>:
    7560:	a1 e2       	ldi	r26, 0x21	; 33
    7562:	1a 2e       	mov	r1, r26
    7564:	aa 1b       	sub	r26, r26
    7566:	bb 1b       	sub	r27, r27
    7568:	fd 01       	movw	r30, r26
    756a:	0d c0       	rjmp	.+26     	; 0x7586 <__udivmodsi4_ep>

0000756c <__udivmodsi4_loop>:
    756c:	aa 1f       	adc	r26, r26
    756e:	bb 1f       	adc	r27, r27
    7570:	ee 1f       	adc	r30, r30
    7572:	ff 1f       	adc	r31, r31
    7574:	a2 17       	cp	r26, r18
    7576:	b3 07       	cpc	r27, r19
    7578:	e4 07       	cpc	r30, r20
    757a:	f5 07       	cpc	r31, r21
    757c:	20 f0       	brcs	.+8      	; 0x7586 <__udivmodsi4_ep>
    757e:	a2 1b       	sub	r26, r18
    7580:	b3 0b       	sbc	r27, r19
    7582:	e4 0b       	sbc	r30, r20
    7584:	f5 0b       	sbc	r31, r21

00007586 <__udivmodsi4_ep>:
    7586:	66 1f       	adc	r22, r22
    7588:	77 1f       	adc	r23, r23
    758a:	88 1f       	adc	r24, r24
    758c:	99 1f       	adc	r25, r25
    758e:	1a 94       	dec	r1
    7590:	69 f7       	brne	.-38     	; 0x756c <__udivmodsi4_loop>
    7592:	60 95       	com	r22
    7594:	70 95       	com	r23
    7596:	80 95       	com	r24
    7598:	90 95       	com	r25
    759a:	9b 01       	movw	r18, r22
    759c:	ac 01       	movw	r20, r24
    759e:	bd 01       	movw	r22, r26
    75a0:	cf 01       	movw	r24, r30
    75a2:	08 95       	ret

000075a4 <__tablejump2__>:
    75a4:	ee 0f       	add	r30, r30
    75a6:	ff 1f       	adc	r31, r31
    75a8:	88 1f       	adc	r24, r24
    75aa:	8b bf       	out	0x3b, r24	; 59
    75ac:	07 90       	elpm	r0, Z+
    75ae:	f6 91       	elpm	r31, Z
    75b0:	e0 2d       	mov	r30, r0
    75b2:	19 94       	eijmp

000075b4 <__umulhisi3>:
    75b4:	a2 9f       	mul	r26, r18
    75b6:	b0 01       	movw	r22, r0
    75b8:	b3 9f       	mul	r27, r19
    75ba:	c0 01       	movw	r24, r0
    75bc:	a3 9f       	mul	r26, r19
    75be:	70 0d       	add	r23, r0
    75c0:	81 1d       	adc	r24, r1
    75c2:	11 24       	eor	r1, r1
    75c4:	91 1d       	adc	r25, r1
    75c6:	b2 9f       	mul	r27, r18
    75c8:	70 0d       	add	r23, r0
    75ca:	81 1d       	adc	r24, r1
    75cc:	11 24       	eor	r1, r1
    75ce:	91 1d       	adc	r25, r1
    75d0:	08 95       	ret

000075d2 <__muldi3>:
    75d2:	df 93       	push	r29
    75d4:	cf 93       	push	r28
    75d6:	1f 93       	push	r17
    75d8:	0f 93       	push	r16
    75da:	9a 9d       	mul	r25, r10
    75dc:	f0 2d       	mov	r31, r0
    75de:	21 9f       	mul	r18, r17
    75e0:	f0 0d       	add	r31, r0
    75e2:	8b 9d       	mul	r24, r11
    75e4:	f0 0d       	add	r31, r0
    75e6:	8a 9d       	mul	r24, r10
    75e8:	e0 2d       	mov	r30, r0
    75ea:	f1 0d       	add	r31, r1
    75ec:	03 9f       	mul	r16, r19
    75ee:	f0 0d       	add	r31, r0
    75f0:	02 9f       	mul	r16, r18
    75f2:	e0 0d       	add	r30, r0
    75f4:	f1 1d       	adc	r31, r1
    75f6:	4e 9d       	mul	r20, r14
    75f8:	e0 0d       	add	r30, r0
    75fa:	f1 1d       	adc	r31, r1
    75fc:	5e 9d       	mul	r21, r14
    75fe:	f0 0d       	add	r31, r0
    7600:	4f 9d       	mul	r20, r15
    7602:	f0 0d       	add	r31, r0
    7604:	7f 93       	push	r23
    7606:	6f 93       	push	r22
    7608:	bf 92       	push	r11
    760a:	af 92       	push	r10
    760c:	5f 93       	push	r21
    760e:	4f 93       	push	r20
    7610:	d5 01       	movw	r26, r10
    7612:	d0 df       	rcall	.-96     	; 0x75b4 <__umulhisi3>
    7614:	8b 01       	movw	r16, r22
    7616:	ac 01       	movw	r20, r24
    7618:	d7 01       	movw	r26, r14
    761a:	cc df       	rcall	.-104    	; 0x75b4 <__umulhisi3>
    761c:	eb 01       	movw	r28, r22
    761e:	e8 0f       	add	r30, r24
    7620:	f9 1f       	adc	r31, r25
    7622:	d6 01       	movw	r26, r12
    7624:	1f d0       	rcall	.+62     	; 0x7664 <__muldi3_6>
    7626:	2f 91       	pop	r18
    7628:	3f 91       	pop	r19
    762a:	d6 01       	movw	r26, r12
    762c:	c3 df       	rcall	.-122    	; 0x75b4 <__umulhisi3>
    762e:	c6 0f       	add	r28, r22
    7630:	d7 1f       	adc	r29, r23
    7632:	e8 1f       	adc	r30, r24
    7634:	f9 1f       	adc	r31, r25
    7636:	af 91       	pop	r26
    7638:	bf 91       	pop	r27
    763a:	14 d0       	rcall	.+40     	; 0x7664 <__muldi3_6>
    763c:	2f 91       	pop	r18
    763e:	3f 91       	pop	r19
    7640:	b9 df       	rcall	.-142    	; 0x75b4 <__umulhisi3>
    7642:	c6 0f       	add	r28, r22
    7644:	d7 1f       	adc	r29, r23
    7646:	e8 1f       	adc	r30, r24
    7648:	f9 1f       	adc	r31, r25
    764a:	d6 01       	movw	r26, r12
    764c:	b3 df       	rcall	.-154    	; 0x75b4 <__umulhisi3>
    764e:	e6 0f       	add	r30, r22
    7650:	f7 1f       	adc	r31, r23
    7652:	98 01       	movw	r18, r16
    7654:	be 01       	movw	r22, r28
    7656:	cf 01       	movw	r24, r30
    7658:	11 24       	eor	r1, r1
    765a:	0f 91       	pop	r16
    765c:	1f 91       	pop	r17
    765e:	cf 91       	pop	r28
    7660:	df 91       	pop	r29
    7662:	08 95       	ret

00007664 <__muldi3_6>:
    7664:	a7 df       	rcall	.-178    	; 0x75b4 <__umulhisi3>
    7666:	46 0f       	add	r20, r22
    7668:	57 1f       	adc	r21, r23
    766a:	c8 1f       	adc	r28, r24
    766c:	d9 1f       	adc	r29, r25
    766e:	08 f4       	brcc	.+2      	; 0x7672 <__muldi3_6+0xe>
    7670:	31 96       	adiw	r30, 0x01	; 1
    7672:	08 95       	ret

00007674 <__umoddi3>:
    7674:	68 94       	set
    7676:	01 c0       	rjmp	.+2      	; 0x767a <__udivdi3_umoddi3>

00007678 <__udivdi3>:
    7678:	e8 94       	clt

0000767a <__udivdi3_umoddi3>:
    767a:	8f 92       	push	r8
    767c:	9f 92       	push	r9
    767e:	cf 93       	push	r28
    7680:	df 93       	push	r29
    7682:	05 d0       	rcall	.+10     	; 0x768e <__udivmod64>
    7684:	df 91       	pop	r29
    7686:	cf 91       	pop	r28
    7688:	9f 90       	pop	r9
    768a:	8f 90       	pop	r8
    768c:	08 95       	ret

0000768e <__udivmod64>:
    768e:	88 24       	eor	r8, r8
    7690:	99 24       	eor	r9, r9
    7692:	f4 01       	movw	r30, r8
    7694:	e4 01       	movw	r28, r8
    7696:	b0 e4       	ldi	r27, 0x40	; 64
    7698:	9f 93       	push	r25
    769a:	aa 27       	eor	r26, r26
    769c:	9a 15       	cp	r25, r10
    769e:	8b 04       	cpc	r8, r11
    76a0:	9c 04       	cpc	r9, r12
    76a2:	ed 05       	cpc	r30, r13
    76a4:	fe 05       	cpc	r31, r14
    76a6:	cf 05       	cpc	r28, r15
    76a8:	d0 07       	cpc	r29, r16
    76aa:	a1 07       	cpc	r26, r17
    76ac:	98 f4       	brcc	.+38     	; 0x76d4 <__udivmod64+0x46>
    76ae:	ad 2f       	mov	r26, r29
    76b0:	dc 2f       	mov	r29, r28
    76b2:	cf 2f       	mov	r28, r31
    76b4:	fe 2f       	mov	r31, r30
    76b6:	e9 2d       	mov	r30, r9
    76b8:	98 2c       	mov	r9, r8
    76ba:	89 2e       	mov	r8, r25
    76bc:	98 2f       	mov	r25, r24
    76be:	87 2f       	mov	r24, r23
    76c0:	76 2f       	mov	r23, r22
    76c2:	65 2f       	mov	r22, r21
    76c4:	54 2f       	mov	r21, r20
    76c6:	43 2f       	mov	r20, r19
    76c8:	32 2f       	mov	r19, r18
    76ca:	22 27       	eor	r18, r18
    76cc:	b8 50       	subi	r27, 0x08	; 8
    76ce:	31 f7       	brne	.-52     	; 0x769c <__udivmod64+0xe>
    76d0:	bf 91       	pop	r27
    76d2:	27 c0       	rjmp	.+78     	; 0x7722 <__udivmod64+0x94>
    76d4:	1b 2e       	mov	r1, r27
    76d6:	bf 91       	pop	r27
    76d8:	bb 27       	eor	r27, r27
    76da:	22 0f       	add	r18, r18
    76dc:	33 1f       	adc	r19, r19
    76de:	44 1f       	adc	r20, r20
    76e0:	55 1f       	adc	r21, r21
    76e2:	66 1f       	adc	r22, r22
    76e4:	77 1f       	adc	r23, r23
    76e6:	88 1f       	adc	r24, r24
    76e8:	99 1f       	adc	r25, r25
    76ea:	88 1c       	adc	r8, r8
    76ec:	99 1c       	adc	r9, r9
    76ee:	ee 1f       	adc	r30, r30
    76f0:	ff 1f       	adc	r31, r31
    76f2:	cc 1f       	adc	r28, r28
    76f4:	dd 1f       	adc	r29, r29
    76f6:	aa 1f       	adc	r26, r26
    76f8:	bb 1f       	adc	r27, r27
    76fa:	8a 14       	cp	r8, r10
    76fc:	9b 04       	cpc	r9, r11
    76fe:	ec 05       	cpc	r30, r12
    7700:	fd 05       	cpc	r31, r13
    7702:	ce 05       	cpc	r28, r14
    7704:	df 05       	cpc	r29, r15
    7706:	a0 07       	cpc	r26, r16
    7708:	b1 07       	cpc	r27, r17
    770a:	48 f0       	brcs	.+18     	; 0x771e <__udivmod64+0x90>
    770c:	8a 18       	sub	r8, r10
    770e:	9b 08       	sbc	r9, r11
    7710:	ec 09       	sbc	r30, r12
    7712:	fd 09       	sbc	r31, r13
    7714:	ce 09       	sbc	r28, r14
    7716:	df 09       	sbc	r29, r15
    7718:	a0 0b       	sbc	r26, r16
    771a:	b1 0b       	sbc	r27, r17
    771c:	21 60       	ori	r18, 0x01	; 1
    771e:	1a 94       	dec	r1
    7720:	e1 f6       	brne	.-72     	; 0x76da <__udivmod64+0x4c>
    7722:	2e f4       	brtc	.+10     	; 0x772e <__udivmod64+0xa0>
    7724:	94 01       	movw	r18, r8
    7726:	af 01       	movw	r20, r30
    7728:	be 01       	movw	r22, r28
    772a:	cd 01       	movw	r24, r26
    772c:	00 0c       	add	r0, r0
    772e:	08 95       	ret

00007730 <__subsf3>:
    7730:	50 58       	subi	r21, 0x80	; 128

00007732 <__addsf3>:
    7732:	bb 27       	eor	r27, r27
    7734:	aa 27       	eor	r26, r26
    7736:	0e d0       	rcall	.+28     	; 0x7754 <__addsf3x>
    7738:	48 c1       	rjmp	.+656    	; 0x79ca <__fp_round>
    773a:	39 d1       	rcall	.+626    	; 0x79ae <__fp_pscA>
    773c:	30 f0       	brcs	.+12     	; 0x774a <__addsf3+0x18>
    773e:	3e d1       	rcall	.+636    	; 0x79bc <__fp_pscB>
    7740:	20 f0       	brcs	.+8      	; 0x774a <__addsf3+0x18>
    7742:	31 f4       	brne	.+12     	; 0x7750 <__addsf3+0x1e>
    7744:	9f 3f       	cpi	r25, 0xFF	; 255
    7746:	11 f4       	brne	.+4      	; 0x774c <__addsf3+0x1a>
    7748:	1e f4       	brtc	.+6      	; 0x7750 <__addsf3+0x1e>
    774a:	2e c1       	rjmp	.+604    	; 0x79a8 <__fp_nan>
    774c:	0e f4       	brtc	.+2      	; 0x7750 <__addsf3+0x1e>
    774e:	e0 95       	com	r30
    7750:	e7 fb       	bst	r30, 7
    7752:	24 c1       	rjmp	.+584    	; 0x799c <__fp_inf>

00007754 <__addsf3x>:
    7754:	e9 2f       	mov	r30, r25
    7756:	4a d1       	rcall	.+660    	; 0x79ec <__fp_split3>
    7758:	80 f3       	brcs	.-32     	; 0x773a <__addsf3+0x8>
    775a:	ba 17       	cp	r27, r26
    775c:	62 07       	cpc	r22, r18
    775e:	73 07       	cpc	r23, r19
    7760:	84 07       	cpc	r24, r20
    7762:	95 07       	cpc	r25, r21
    7764:	18 f0       	brcs	.+6      	; 0x776c <__addsf3x+0x18>
    7766:	71 f4       	brne	.+28     	; 0x7784 <__addsf3x+0x30>
    7768:	9e f5       	brtc	.+102    	; 0x77d0 <__addsf3x+0x7c>
    776a:	62 c1       	rjmp	.+708    	; 0x7a30 <__fp_zero>
    776c:	0e f4       	brtc	.+2      	; 0x7770 <__addsf3x+0x1c>
    776e:	e0 95       	com	r30
    7770:	0b 2e       	mov	r0, r27
    7772:	ba 2f       	mov	r27, r26
    7774:	a0 2d       	mov	r26, r0
    7776:	0b 01       	movw	r0, r22
    7778:	b9 01       	movw	r22, r18
    777a:	90 01       	movw	r18, r0
    777c:	0c 01       	movw	r0, r24
    777e:	ca 01       	movw	r24, r20
    7780:	a0 01       	movw	r20, r0
    7782:	11 24       	eor	r1, r1
    7784:	ff 27       	eor	r31, r31
    7786:	59 1b       	sub	r21, r25
    7788:	99 f0       	breq	.+38     	; 0x77b0 <__addsf3x+0x5c>
    778a:	59 3f       	cpi	r21, 0xF9	; 249
    778c:	50 f4       	brcc	.+20     	; 0x77a2 <__addsf3x+0x4e>
    778e:	50 3e       	cpi	r21, 0xE0	; 224
    7790:	68 f1       	brcs	.+90     	; 0x77ec <__addsf3x+0x98>
    7792:	1a 16       	cp	r1, r26
    7794:	f0 40       	sbci	r31, 0x00	; 0
    7796:	a2 2f       	mov	r26, r18
    7798:	23 2f       	mov	r18, r19
    779a:	34 2f       	mov	r19, r20
    779c:	44 27       	eor	r20, r20
    779e:	58 5f       	subi	r21, 0xF8	; 248
    77a0:	f3 cf       	rjmp	.-26     	; 0x7788 <__addsf3x+0x34>
    77a2:	46 95       	lsr	r20
    77a4:	37 95       	ror	r19
    77a6:	27 95       	ror	r18
    77a8:	a7 95       	ror	r26
    77aa:	f0 40       	sbci	r31, 0x00	; 0
    77ac:	53 95       	inc	r21
    77ae:	c9 f7       	brne	.-14     	; 0x77a2 <__addsf3x+0x4e>
    77b0:	7e f4       	brtc	.+30     	; 0x77d0 <__addsf3x+0x7c>
    77b2:	1f 16       	cp	r1, r31
    77b4:	ba 0b       	sbc	r27, r26
    77b6:	62 0b       	sbc	r22, r18
    77b8:	73 0b       	sbc	r23, r19
    77ba:	84 0b       	sbc	r24, r20
    77bc:	ba f0       	brmi	.+46     	; 0x77ec <__addsf3x+0x98>
    77be:	91 50       	subi	r25, 0x01	; 1
    77c0:	a1 f0       	breq	.+40     	; 0x77ea <__addsf3x+0x96>
    77c2:	ff 0f       	add	r31, r31
    77c4:	bb 1f       	adc	r27, r27
    77c6:	66 1f       	adc	r22, r22
    77c8:	77 1f       	adc	r23, r23
    77ca:	88 1f       	adc	r24, r24
    77cc:	c2 f7       	brpl	.-16     	; 0x77be <__addsf3x+0x6a>
    77ce:	0e c0       	rjmp	.+28     	; 0x77ec <__addsf3x+0x98>
    77d0:	ba 0f       	add	r27, r26
    77d2:	62 1f       	adc	r22, r18
    77d4:	73 1f       	adc	r23, r19
    77d6:	84 1f       	adc	r24, r20
    77d8:	48 f4       	brcc	.+18     	; 0x77ec <__addsf3x+0x98>
    77da:	87 95       	ror	r24
    77dc:	77 95       	ror	r23
    77de:	67 95       	ror	r22
    77e0:	b7 95       	ror	r27
    77e2:	f7 95       	ror	r31
    77e4:	9e 3f       	cpi	r25, 0xFE	; 254
    77e6:	08 f0       	brcs	.+2      	; 0x77ea <__addsf3x+0x96>
    77e8:	b3 cf       	rjmp	.-154    	; 0x7750 <__addsf3+0x1e>
    77ea:	93 95       	inc	r25
    77ec:	88 0f       	add	r24, r24
    77ee:	08 f0       	brcs	.+2      	; 0x77f2 <__addsf3x+0x9e>
    77f0:	99 27       	eor	r25, r25
    77f2:	ee 0f       	add	r30, r30
    77f4:	97 95       	ror	r25
    77f6:	87 95       	ror	r24
    77f8:	08 95       	ret

000077fa <__divsf3>:
    77fa:	0c d0       	rcall	.+24     	; 0x7814 <__divsf3x>
    77fc:	e6 c0       	rjmp	.+460    	; 0x79ca <__fp_round>
    77fe:	de d0       	rcall	.+444    	; 0x79bc <__fp_pscB>
    7800:	40 f0       	brcs	.+16     	; 0x7812 <__divsf3+0x18>
    7802:	d5 d0       	rcall	.+426    	; 0x79ae <__fp_pscA>
    7804:	30 f0       	brcs	.+12     	; 0x7812 <__divsf3+0x18>
    7806:	21 f4       	brne	.+8      	; 0x7810 <__divsf3+0x16>
    7808:	5f 3f       	cpi	r21, 0xFF	; 255
    780a:	19 f0       	breq	.+6      	; 0x7812 <__divsf3+0x18>
    780c:	c7 c0       	rjmp	.+398    	; 0x799c <__fp_inf>
    780e:	51 11       	cpse	r21, r1
    7810:	10 c1       	rjmp	.+544    	; 0x7a32 <__fp_szero>
    7812:	ca c0       	rjmp	.+404    	; 0x79a8 <__fp_nan>

00007814 <__divsf3x>:
    7814:	eb d0       	rcall	.+470    	; 0x79ec <__fp_split3>
    7816:	98 f3       	brcs	.-26     	; 0x77fe <__divsf3+0x4>

00007818 <__divsf3_pse>:
    7818:	99 23       	and	r25, r25
    781a:	c9 f3       	breq	.-14     	; 0x780e <__divsf3+0x14>
    781c:	55 23       	and	r21, r21
    781e:	b1 f3       	breq	.-20     	; 0x780c <__divsf3+0x12>
    7820:	95 1b       	sub	r25, r21
    7822:	55 0b       	sbc	r21, r21
    7824:	bb 27       	eor	r27, r27
    7826:	aa 27       	eor	r26, r26
    7828:	62 17       	cp	r22, r18
    782a:	73 07       	cpc	r23, r19
    782c:	84 07       	cpc	r24, r20
    782e:	38 f0       	brcs	.+14     	; 0x783e <__divsf3_pse+0x26>
    7830:	9f 5f       	subi	r25, 0xFF	; 255
    7832:	5f 4f       	sbci	r21, 0xFF	; 255
    7834:	22 0f       	add	r18, r18
    7836:	33 1f       	adc	r19, r19
    7838:	44 1f       	adc	r20, r20
    783a:	aa 1f       	adc	r26, r26
    783c:	a9 f3       	breq	.-22     	; 0x7828 <__divsf3_pse+0x10>
    783e:	33 d0       	rcall	.+102    	; 0x78a6 <__divsf3_pse+0x8e>
    7840:	0e 2e       	mov	r0, r30
    7842:	3a f0       	brmi	.+14     	; 0x7852 <__divsf3_pse+0x3a>
    7844:	e0 e8       	ldi	r30, 0x80	; 128
    7846:	30 d0       	rcall	.+96     	; 0x78a8 <__divsf3_pse+0x90>
    7848:	91 50       	subi	r25, 0x01	; 1
    784a:	50 40       	sbci	r21, 0x00	; 0
    784c:	e6 95       	lsr	r30
    784e:	00 1c       	adc	r0, r0
    7850:	ca f7       	brpl	.-14     	; 0x7844 <__divsf3_pse+0x2c>
    7852:	29 d0       	rcall	.+82     	; 0x78a6 <__divsf3_pse+0x8e>
    7854:	fe 2f       	mov	r31, r30
    7856:	27 d0       	rcall	.+78     	; 0x78a6 <__divsf3_pse+0x8e>
    7858:	66 0f       	add	r22, r22
    785a:	77 1f       	adc	r23, r23
    785c:	88 1f       	adc	r24, r24
    785e:	bb 1f       	adc	r27, r27
    7860:	26 17       	cp	r18, r22
    7862:	37 07       	cpc	r19, r23
    7864:	48 07       	cpc	r20, r24
    7866:	ab 07       	cpc	r26, r27
    7868:	b0 e8       	ldi	r27, 0x80	; 128
    786a:	09 f0       	breq	.+2      	; 0x786e <__divsf3_pse+0x56>
    786c:	bb 0b       	sbc	r27, r27
    786e:	80 2d       	mov	r24, r0
    7870:	bf 01       	movw	r22, r30
    7872:	ff 27       	eor	r31, r31
    7874:	93 58       	subi	r25, 0x83	; 131
    7876:	5f 4f       	sbci	r21, 0xFF	; 255
    7878:	2a f0       	brmi	.+10     	; 0x7884 <__divsf3_pse+0x6c>
    787a:	9e 3f       	cpi	r25, 0xFE	; 254
    787c:	51 05       	cpc	r21, r1
    787e:	68 f0       	brcs	.+26     	; 0x789a <__divsf3_pse+0x82>
    7880:	8d c0       	rjmp	.+282    	; 0x799c <__fp_inf>
    7882:	d7 c0       	rjmp	.+430    	; 0x7a32 <__fp_szero>
    7884:	5f 3f       	cpi	r21, 0xFF	; 255
    7886:	ec f3       	brlt	.-6      	; 0x7882 <__divsf3_pse+0x6a>
    7888:	98 3e       	cpi	r25, 0xE8	; 232
    788a:	dc f3       	brlt	.-10     	; 0x7882 <__divsf3_pse+0x6a>
    788c:	86 95       	lsr	r24
    788e:	77 95       	ror	r23
    7890:	67 95       	ror	r22
    7892:	b7 95       	ror	r27
    7894:	f7 95       	ror	r31
    7896:	9f 5f       	subi	r25, 0xFF	; 255
    7898:	c9 f7       	brne	.-14     	; 0x788c <__divsf3_pse+0x74>
    789a:	88 0f       	add	r24, r24
    789c:	91 1d       	adc	r25, r1
    789e:	96 95       	lsr	r25
    78a0:	87 95       	ror	r24
    78a2:	97 f9       	bld	r25, 7
    78a4:	08 95       	ret
    78a6:	e1 e0       	ldi	r30, 0x01	; 1
    78a8:	66 0f       	add	r22, r22
    78aa:	77 1f       	adc	r23, r23
    78ac:	88 1f       	adc	r24, r24
    78ae:	bb 1f       	adc	r27, r27
    78b0:	62 17       	cp	r22, r18
    78b2:	73 07       	cpc	r23, r19
    78b4:	84 07       	cpc	r24, r20
    78b6:	ba 07       	cpc	r27, r26
    78b8:	20 f0       	brcs	.+8      	; 0x78c2 <__divsf3_pse+0xaa>
    78ba:	62 1b       	sub	r22, r18
    78bc:	73 0b       	sbc	r23, r19
    78be:	84 0b       	sbc	r24, r20
    78c0:	ba 0b       	sbc	r27, r26
    78c2:	ee 1f       	adc	r30, r30
    78c4:	88 f7       	brcc	.-30     	; 0x78a8 <__divsf3_pse+0x90>
    78c6:	e0 95       	com	r30
    78c8:	08 95       	ret

000078ca <__fixunssfsi>:
    78ca:	98 d0       	rcall	.+304    	; 0x79fc <__fp_splitA>
    78cc:	88 f0       	brcs	.+34     	; 0x78f0 <__fixunssfsi+0x26>
    78ce:	9f 57       	subi	r25, 0x7F	; 127
    78d0:	90 f0       	brcs	.+36     	; 0x78f6 <__fixunssfsi+0x2c>
    78d2:	b9 2f       	mov	r27, r25
    78d4:	99 27       	eor	r25, r25
    78d6:	b7 51       	subi	r27, 0x17	; 23
    78d8:	a0 f0       	brcs	.+40     	; 0x7902 <__fixunssfsi+0x38>
    78da:	d1 f0       	breq	.+52     	; 0x7910 <__fixunssfsi+0x46>
    78dc:	66 0f       	add	r22, r22
    78de:	77 1f       	adc	r23, r23
    78e0:	88 1f       	adc	r24, r24
    78e2:	99 1f       	adc	r25, r25
    78e4:	1a f0       	brmi	.+6      	; 0x78ec <__fixunssfsi+0x22>
    78e6:	ba 95       	dec	r27
    78e8:	c9 f7       	brne	.-14     	; 0x78dc <__fixunssfsi+0x12>
    78ea:	12 c0       	rjmp	.+36     	; 0x7910 <__fixunssfsi+0x46>
    78ec:	b1 30       	cpi	r27, 0x01	; 1
    78ee:	81 f0       	breq	.+32     	; 0x7910 <__fixunssfsi+0x46>
    78f0:	9f d0       	rcall	.+318    	; 0x7a30 <__fp_zero>
    78f2:	b1 e0       	ldi	r27, 0x01	; 1
    78f4:	08 95       	ret
    78f6:	9c c0       	rjmp	.+312    	; 0x7a30 <__fp_zero>
    78f8:	67 2f       	mov	r22, r23
    78fa:	78 2f       	mov	r23, r24
    78fc:	88 27       	eor	r24, r24
    78fe:	b8 5f       	subi	r27, 0xF8	; 248
    7900:	39 f0       	breq	.+14     	; 0x7910 <__fixunssfsi+0x46>
    7902:	b9 3f       	cpi	r27, 0xF9	; 249
    7904:	cc f3       	brlt	.-14     	; 0x78f8 <__fixunssfsi+0x2e>
    7906:	86 95       	lsr	r24
    7908:	77 95       	ror	r23
    790a:	67 95       	ror	r22
    790c:	b3 95       	inc	r27
    790e:	d9 f7       	brne	.-10     	; 0x7906 <__fixunssfsi+0x3c>
    7910:	3e f4       	brtc	.+14     	; 0x7920 <__fixunssfsi+0x56>
    7912:	90 95       	com	r25
    7914:	80 95       	com	r24
    7916:	70 95       	com	r23
    7918:	61 95       	neg	r22
    791a:	7f 4f       	sbci	r23, 0xFF	; 255
    791c:	8f 4f       	sbci	r24, 0xFF	; 255
    791e:	9f 4f       	sbci	r25, 0xFF	; 255
    7920:	08 95       	ret

00007922 <__floatunsisf>:
    7922:	e8 94       	clt
    7924:	09 c0       	rjmp	.+18     	; 0x7938 <__floatsisf+0x12>

00007926 <__floatsisf>:
    7926:	97 fb       	bst	r25, 7
    7928:	3e f4       	brtc	.+14     	; 0x7938 <__floatsisf+0x12>
    792a:	90 95       	com	r25
    792c:	80 95       	com	r24
    792e:	70 95       	com	r23
    7930:	61 95       	neg	r22
    7932:	7f 4f       	sbci	r23, 0xFF	; 255
    7934:	8f 4f       	sbci	r24, 0xFF	; 255
    7936:	9f 4f       	sbci	r25, 0xFF	; 255
    7938:	99 23       	and	r25, r25
    793a:	a9 f0       	breq	.+42     	; 0x7966 <__floatsisf+0x40>
    793c:	f9 2f       	mov	r31, r25
    793e:	96 e9       	ldi	r25, 0x96	; 150
    7940:	bb 27       	eor	r27, r27
    7942:	93 95       	inc	r25
    7944:	f6 95       	lsr	r31
    7946:	87 95       	ror	r24
    7948:	77 95       	ror	r23
    794a:	67 95       	ror	r22
    794c:	b7 95       	ror	r27
    794e:	f1 11       	cpse	r31, r1
    7950:	f8 cf       	rjmp	.-16     	; 0x7942 <__floatsisf+0x1c>
    7952:	fa f4       	brpl	.+62     	; 0x7992 <__floatsisf+0x6c>
    7954:	bb 0f       	add	r27, r27
    7956:	11 f4       	brne	.+4      	; 0x795c <__floatsisf+0x36>
    7958:	60 ff       	sbrs	r22, 0
    795a:	1b c0       	rjmp	.+54     	; 0x7992 <__floatsisf+0x6c>
    795c:	6f 5f       	subi	r22, 0xFF	; 255
    795e:	7f 4f       	sbci	r23, 0xFF	; 255
    7960:	8f 4f       	sbci	r24, 0xFF	; 255
    7962:	9f 4f       	sbci	r25, 0xFF	; 255
    7964:	16 c0       	rjmp	.+44     	; 0x7992 <__floatsisf+0x6c>
    7966:	88 23       	and	r24, r24
    7968:	11 f0       	breq	.+4      	; 0x796e <__floatsisf+0x48>
    796a:	96 e9       	ldi	r25, 0x96	; 150
    796c:	11 c0       	rjmp	.+34     	; 0x7990 <__floatsisf+0x6a>
    796e:	77 23       	and	r23, r23
    7970:	21 f0       	breq	.+8      	; 0x797a <__floatsisf+0x54>
    7972:	9e e8       	ldi	r25, 0x8E	; 142
    7974:	87 2f       	mov	r24, r23
    7976:	76 2f       	mov	r23, r22
    7978:	05 c0       	rjmp	.+10     	; 0x7984 <__floatsisf+0x5e>
    797a:	66 23       	and	r22, r22
    797c:	71 f0       	breq	.+28     	; 0x799a <__floatsisf+0x74>
    797e:	96 e8       	ldi	r25, 0x86	; 134
    7980:	86 2f       	mov	r24, r22
    7982:	70 e0       	ldi	r23, 0x00	; 0
    7984:	60 e0       	ldi	r22, 0x00	; 0
    7986:	2a f0       	brmi	.+10     	; 0x7992 <__floatsisf+0x6c>
    7988:	9a 95       	dec	r25
    798a:	66 0f       	add	r22, r22
    798c:	77 1f       	adc	r23, r23
    798e:	88 1f       	adc	r24, r24
    7990:	da f7       	brpl	.-10     	; 0x7988 <__floatsisf+0x62>
    7992:	88 0f       	add	r24, r24
    7994:	96 95       	lsr	r25
    7996:	87 95       	ror	r24
    7998:	97 f9       	bld	r25, 7
    799a:	08 95       	ret

0000799c <__fp_inf>:
    799c:	97 f9       	bld	r25, 7
    799e:	9f 67       	ori	r25, 0x7F	; 127
    79a0:	80 e8       	ldi	r24, 0x80	; 128
    79a2:	70 e0       	ldi	r23, 0x00	; 0
    79a4:	60 e0       	ldi	r22, 0x00	; 0
    79a6:	08 95       	ret

000079a8 <__fp_nan>:
    79a8:	9f ef       	ldi	r25, 0xFF	; 255
    79aa:	80 ec       	ldi	r24, 0xC0	; 192
    79ac:	08 95       	ret

000079ae <__fp_pscA>:
    79ae:	00 24       	eor	r0, r0
    79b0:	0a 94       	dec	r0
    79b2:	16 16       	cp	r1, r22
    79b4:	17 06       	cpc	r1, r23
    79b6:	18 06       	cpc	r1, r24
    79b8:	09 06       	cpc	r0, r25
    79ba:	08 95       	ret

000079bc <__fp_pscB>:
    79bc:	00 24       	eor	r0, r0
    79be:	0a 94       	dec	r0
    79c0:	12 16       	cp	r1, r18
    79c2:	13 06       	cpc	r1, r19
    79c4:	14 06       	cpc	r1, r20
    79c6:	05 06       	cpc	r0, r21
    79c8:	08 95       	ret

000079ca <__fp_round>:
    79ca:	09 2e       	mov	r0, r25
    79cc:	03 94       	inc	r0
    79ce:	00 0c       	add	r0, r0
    79d0:	11 f4       	brne	.+4      	; 0x79d6 <__fp_round+0xc>
    79d2:	88 23       	and	r24, r24
    79d4:	52 f0       	brmi	.+20     	; 0x79ea <__fp_round+0x20>
    79d6:	bb 0f       	add	r27, r27
    79d8:	40 f4       	brcc	.+16     	; 0x79ea <__fp_round+0x20>
    79da:	bf 2b       	or	r27, r31
    79dc:	11 f4       	brne	.+4      	; 0x79e2 <__fp_round+0x18>
    79de:	60 ff       	sbrs	r22, 0
    79e0:	04 c0       	rjmp	.+8      	; 0x79ea <__fp_round+0x20>
    79e2:	6f 5f       	subi	r22, 0xFF	; 255
    79e4:	7f 4f       	sbci	r23, 0xFF	; 255
    79e6:	8f 4f       	sbci	r24, 0xFF	; 255
    79e8:	9f 4f       	sbci	r25, 0xFF	; 255
    79ea:	08 95       	ret

000079ec <__fp_split3>:
    79ec:	57 fd       	sbrc	r21, 7
    79ee:	90 58       	subi	r25, 0x80	; 128
    79f0:	44 0f       	add	r20, r20
    79f2:	55 1f       	adc	r21, r21
    79f4:	59 f0       	breq	.+22     	; 0x7a0c <__fp_splitA+0x10>
    79f6:	5f 3f       	cpi	r21, 0xFF	; 255
    79f8:	71 f0       	breq	.+28     	; 0x7a16 <__fp_splitA+0x1a>
    79fa:	47 95       	ror	r20

000079fc <__fp_splitA>:
    79fc:	88 0f       	add	r24, r24
    79fe:	97 fb       	bst	r25, 7
    7a00:	99 1f       	adc	r25, r25
    7a02:	61 f0       	breq	.+24     	; 0x7a1c <__fp_splitA+0x20>
    7a04:	9f 3f       	cpi	r25, 0xFF	; 255
    7a06:	79 f0       	breq	.+30     	; 0x7a26 <__fp_splitA+0x2a>
    7a08:	87 95       	ror	r24
    7a0a:	08 95       	ret
    7a0c:	12 16       	cp	r1, r18
    7a0e:	13 06       	cpc	r1, r19
    7a10:	14 06       	cpc	r1, r20
    7a12:	55 1f       	adc	r21, r21
    7a14:	f2 cf       	rjmp	.-28     	; 0x79fa <__fp_split3+0xe>
    7a16:	46 95       	lsr	r20
    7a18:	f1 df       	rcall	.-30     	; 0x79fc <__fp_splitA>
    7a1a:	08 c0       	rjmp	.+16     	; 0x7a2c <__fp_splitA+0x30>
    7a1c:	16 16       	cp	r1, r22
    7a1e:	17 06       	cpc	r1, r23
    7a20:	18 06       	cpc	r1, r24
    7a22:	99 1f       	adc	r25, r25
    7a24:	f1 cf       	rjmp	.-30     	; 0x7a08 <__fp_splitA+0xc>
    7a26:	86 95       	lsr	r24
    7a28:	71 05       	cpc	r23, r1
    7a2a:	61 05       	cpc	r22, r1
    7a2c:	08 94       	sec
    7a2e:	08 95       	ret

00007a30 <__fp_zero>:
    7a30:	e8 94       	clt

00007a32 <__fp_szero>:
    7a32:	bb 27       	eor	r27, r27
    7a34:	66 27       	eor	r22, r22
    7a36:	77 27       	eor	r23, r23
    7a38:	cb 01       	movw	r24, r22
    7a3a:	97 f9       	bld	r25, 7
    7a3c:	08 95       	ret

00007a3e <__mulsf3>:
    7a3e:	0b d0       	rcall	.+22     	; 0x7a56 <__mulsf3x>
    7a40:	c4 cf       	rjmp	.-120    	; 0x79ca <__fp_round>
    7a42:	b5 df       	rcall	.-150    	; 0x79ae <__fp_pscA>
    7a44:	28 f0       	brcs	.+10     	; 0x7a50 <__mulsf3+0x12>
    7a46:	ba df       	rcall	.-140    	; 0x79bc <__fp_pscB>
    7a48:	18 f0       	brcs	.+6      	; 0x7a50 <__mulsf3+0x12>
    7a4a:	95 23       	and	r25, r21
    7a4c:	09 f0       	breq	.+2      	; 0x7a50 <__mulsf3+0x12>
    7a4e:	a6 cf       	rjmp	.-180    	; 0x799c <__fp_inf>
    7a50:	ab cf       	rjmp	.-170    	; 0x79a8 <__fp_nan>
    7a52:	11 24       	eor	r1, r1
    7a54:	ee cf       	rjmp	.-36     	; 0x7a32 <__fp_szero>

00007a56 <__mulsf3x>:
    7a56:	ca df       	rcall	.-108    	; 0x79ec <__fp_split3>
    7a58:	a0 f3       	brcs	.-24     	; 0x7a42 <__mulsf3+0x4>

00007a5a <__mulsf3_pse>:
    7a5a:	95 9f       	mul	r25, r21
    7a5c:	d1 f3       	breq	.-12     	; 0x7a52 <__mulsf3+0x14>
    7a5e:	95 0f       	add	r25, r21
    7a60:	50 e0       	ldi	r21, 0x00	; 0
    7a62:	55 1f       	adc	r21, r21
    7a64:	62 9f       	mul	r22, r18
    7a66:	f0 01       	movw	r30, r0
    7a68:	72 9f       	mul	r23, r18
    7a6a:	bb 27       	eor	r27, r27
    7a6c:	f0 0d       	add	r31, r0
    7a6e:	b1 1d       	adc	r27, r1
    7a70:	63 9f       	mul	r22, r19
    7a72:	aa 27       	eor	r26, r26
    7a74:	f0 0d       	add	r31, r0
    7a76:	b1 1d       	adc	r27, r1
    7a78:	aa 1f       	adc	r26, r26
    7a7a:	64 9f       	mul	r22, r20
    7a7c:	66 27       	eor	r22, r22
    7a7e:	b0 0d       	add	r27, r0
    7a80:	a1 1d       	adc	r26, r1
    7a82:	66 1f       	adc	r22, r22
    7a84:	82 9f       	mul	r24, r18
    7a86:	22 27       	eor	r18, r18
    7a88:	b0 0d       	add	r27, r0
    7a8a:	a1 1d       	adc	r26, r1
    7a8c:	62 1f       	adc	r22, r18
    7a8e:	73 9f       	mul	r23, r19
    7a90:	b0 0d       	add	r27, r0
    7a92:	a1 1d       	adc	r26, r1
    7a94:	62 1f       	adc	r22, r18
    7a96:	83 9f       	mul	r24, r19
    7a98:	a0 0d       	add	r26, r0
    7a9a:	61 1d       	adc	r22, r1
    7a9c:	22 1f       	adc	r18, r18
    7a9e:	74 9f       	mul	r23, r20
    7aa0:	33 27       	eor	r19, r19
    7aa2:	a0 0d       	add	r26, r0
    7aa4:	61 1d       	adc	r22, r1
    7aa6:	23 1f       	adc	r18, r19
    7aa8:	84 9f       	mul	r24, r20
    7aaa:	60 0d       	add	r22, r0
    7aac:	21 1d       	adc	r18, r1
    7aae:	82 2f       	mov	r24, r18
    7ab0:	76 2f       	mov	r23, r22
    7ab2:	6a 2f       	mov	r22, r26
    7ab4:	11 24       	eor	r1, r1
    7ab6:	9f 57       	subi	r25, 0x7F	; 127
    7ab8:	50 40       	sbci	r21, 0x00	; 0
    7aba:	8a f0       	brmi	.+34     	; 0x7ade <__mulsf3_pse+0x84>
    7abc:	e1 f0       	breq	.+56     	; 0x7af6 <__mulsf3_pse+0x9c>
    7abe:	88 23       	and	r24, r24
    7ac0:	4a f0       	brmi	.+18     	; 0x7ad4 <__mulsf3_pse+0x7a>
    7ac2:	ee 0f       	add	r30, r30
    7ac4:	ff 1f       	adc	r31, r31
    7ac6:	bb 1f       	adc	r27, r27
    7ac8:	66 1f       	adc	r22, r22
    7aca:	77 1f       	adc	r23, r23
    7acc:	88 1f       	adc	r24, r24
    7ace:	91 50       	subi	r25, 0x01	; 1
    7ad0:	50 40       	sbci	r21, 0x00	; 0
    7ad2:	a9 f7       	brne	.-22     	; 0x7abe <__mulsf3_pse+0x64>
    7ad4:	9e 3f       	cpi	r25, 0xFE	; 254
    7ad6:	51 05       	cpc	r21, r1
    7ad8:	70 f0       	brcs	.+28     	; 0x7af6 <__mulsf3_pse+0x9c>
    7ada:	60 cf       	rjmp	.-320    	; 0x799c <__fp_inf>
    7adc:	aa cf       	rjmp	.-172    	; 0x7a32 <__fp_szero>
    7ade:	5f 3f       	cpi	r21, 0xFF	; 255
    7ae0:	ec f3       	brlt	.-6      	; 0x7adc <__mulsf3_pse+0x82>
    7ae2:	98 3e       	cpi	r25, 0xE8	; 232
    7ae4:	dc f3       	brlt	.-10     	; 0x7adc <__mulsf3_pse+0x82>
    7ae6:	86 95       	lsr	r24
    7ae8:	77 95       	ror	r23
    7aea:	67 95       	ror	r22
    7aec:	b7 95       	ror	r27
    7aee:	f7 95       	ror	r31
    7af0:	e7 95       	ror	r30
    7af2:	9f 5f       	subi	r25, 0xFF	; 255
    7af4:	c1 f7       	brne	.-16     	; 0x7ae6 <__mulsf3_pse+0x8c>
    7af6:	fe 2b       	or	r31, r30
    7af8:	88 0f       	add	r24, r24
    7afa:	91 1d       	adc	r25, r1
    7afc:	96 95       	lsr	r25
    7afe:	87 95       	ror	r24
    7b00:	97 f9       	bld	r25, 7
    7b02:	08 95       	ret

00007b04 <memcpy>:
    7b04:	fb 01       	movw	r30, r22
    7b06:	dc 01       	movw	r26, r24
    7b08:	02 c0       	rjmp	.+4      	; 0x7b0e <memcpy+0xa>
    7b0a:	01 90       	ld	r0, Z+
    7b0c:	0d 92       	st	X+, r0
    7b0e:	41 50       	subi	r20, 0x01	; 1
    7b10:	50 40       	sbci	r21, 0x00	; 0
    7b12:	d8 f7       	brcc	.-10     	; 0x7b0a <memcpy+0x6>
    7b14:	08 95       	ret

00007b16 <fdevopen>:
    7b16:	0f 93       	push	r16
    7b18:	1f 93       	push	r17
    7b1a:	cf 93       	push	r28
    7b1c:	df 93       	push	r29
    7b1e:	00 97       	sbiw	r24, 0x00	; 0
    7b20:	31 f4       	brne	.+12     	; 0x7b2e <fdevopen+0x18>
    7b22:	61 15       	cp	r22, r1
    7b24:	71 05       	cpc	r23, r1
    7b26:	19 f4       	brne	.+6      	; 0x7b2e <fdevopen+0x18>
    7b28:	80 e0       	ldi	r24, 0x00	; 0
    7b2a:	90 e0       	ldi	r25, 0x00	; 0
    7b2c:	39 c0       	rjmp	.+114    	; 0x7ba0 <fdevopen+0x8a>
    7b2e:	8b 01       	movw	r16, r22
    7b30:	ec 01       	movw	r28, r24
    7b32:	6e e0       	ldi	r22, 0x0E	; 14
    7b34:	70 e0       	ldi	r23, 0x00	; 0
    7b36:	81 e0       	ldi	r24, 0x01	; 1
    7b38:	90 e0       	ldi	r25, 0x00	; 0
    7b3a:	41 d2       	rcall	.+1154   	; 0x7fbe <calloc>
    7b3c:	fc 01       	movw	r30, r24
    7b3e:	89 2b       	or	r24, r25
    7b40:	99 f3       	breq	.-26     	; 0x7b28 <fdevopen+0x12>
    7b42:	80 e8       	ldi	r24, 0x80	; 128
    7b44:	83 83       	std	Z+3, r24	; 0x03
    7b46:	01 15       	cp	r16, r1
    7b48:	11 05       	cpc	r17, r1
    7b4a:	71 f0       	breq	.+28     	; 0x7b68 <fdevopen+0x52>
    7b4c:	02 87       	std	Z+10, r16	; 0x0a
    7b4e:	13 87       	std	Z+11, r17	; 0x0b
    7b50:	81 e8       	ldi	r24, 0x81	; 129
    7b52:	83 83       	std	Z+3, r24	; 0x03
    7b54:	80 91 e1 25 	lds	r24, 0x25E1	; 0x8025e1 <__iob>
    7b58:	90 91 e2 25 	lds	r25, 0x25E2	; 0x8025e2 <__iob+0x1>
    7b5c:	89 2b       	or	r24, r25
    7b5e:	21 f4       	brne	.+8      	; 0x7b68 <fdevopen+0x52>
    7b60:	e0 93 e1 25 	sts	0x25E1, r30	; 0x8025e1 <__iob>
    7b64:	f0 93 e2 25 	sts	0x25E2, r31	; 0x8025e2 <__iob+0x1>
    7b68:	20 97       	sbiw	r28, 0x00	; 0
    7b6a:	c9 f0       	breq	.+50     	; 0x7b9e <fdevopen+0x88>
    7b6c:	c0 87       	std	Z+8, r28	; 0x08
    7b6e:	d1 87       	std	Z+9, r29	; 0x09
    7b70:	83 81       	ldd	r24, Z+3	; 0x03
    7b72:	82 60       	ori	r24, 0x02	; 2
    7b74:	83 83       	std	Z+3, r24	; 0x03
    7b76:	80 91 e3 25 	lds	r24, 0x25E3	; 0x8025e3 <__iob+0x2>
    7b7a:	90 91 e4 25 	lds	r25, 0x25E4	; 0x8025e4 <__iob+0x3>
    7b7e:	89 2b       	or	r24, r25
    7b80:	71 f4       	brne	.+28     	; 0x7b9e <fdevopen+0x88>
    7b82:	e0 93 e3 25 	sts	0x25E3, r30	; 0x8025e3 <__iob+0x2>
    7b86:	f0 93 e4 25 	sts	0x25E4, r31	; 0x8025e4 <__iob+0x3>
    7b8a:	80 91 e5 25 	lds	r24, 0x25E5	; 0x8025e5 <__iob+0x4>
    7b8e:	90 91 e6 25 	lds	r25, 0x25E6	; 0x8025e6 <__iob+0x5>
    7b92:	89 2b       	or	r24, r25
    7b94:	21 f4       	brne	.+8      	; 0x7b9e <fdevopen+0x88>
    7b96:	e0 93 e5 25 	sts	0x25E5, r30	; 0x8025e5 <__iob+0x4>
    7b9a:	f0 93 e6 25 	sts	0x25E6, r31	; 0x8025e6 <__iob+0x5>
    7b9e:	cf 01       	movw	r24, r30
    7ba0:	df 91       	pop	r29
    7ba2:	cf 91       	pop	r28
    7ba4:	1f 91       	pop	r17
    7ba6:	0f 91       	pop	r16
    7ba8:	08 95       	ret

00007baa <printf>:
    7baa:	cf 93       	push	r28
    7bac:	df 93       	push	r29
    7bae:	cd b7       	in	r28, 0x3d	; 61
    7bb0:	de b7       	in	r29, 0x3e	; 62
    7bb2:	ae 01       	movw	r20, r28
    7bb4:	4a 5f       	subi	r20, 0xFA	; 250
    7bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    7bb8:	fa 01       	movw	r30, r20
    7bba:	61 91       	ld	r22, Z+
    7bbc:	71 91       	ld	r23, Z+
    7bbe:	af 01       	movw	r20, r30
    7bc0:	80 91 e3 25 	lds	r24, 0x25E3	; 0x8025e3 <__iob+0x2>
    7bc4:	90 91 e4 25 	lds	r25, 0x25E4	; 0x8025e4 <__iob+0x3>
    7bc8:	03 d0       	rcall	.+6      	; 0x7bd0 <vfprintf>
    7bca:	df 91       	pop	r29
    7bcc:	cf 91       	pop	r28
    7bce:	08 95       	ret

00007bd0 <vfprintf>:
    7bd0:	2f 92       	push	r2
    7bd2:	3f 92       	push	r3
    7bd4:	4f 92       	push	r4
    7bd6:	5f 92       	push	r5
    7bd8:	6f 92       	push	r6
    7bda:	7f 92       	push	r7
    7bdc:	8f 92       	push	r8
    7bde:	9f 92       	push	r9
    7be0:	af 92       	push	r10
    7be2:	bf 92       	push	r11
    7be4:	cf 92       	push	r12
    7be6:	df 92       	push	r13
    7be8:	ef 92       	push	r14
    7bea:	ff 92       	push	r15
    7bec:	0f 93       	push	r16
    7bee:	1f 93       	push	r17
    7bf0:	cf 93       	push	r28
    7bf2:	df 93       	push	r29
    7bf4:	cd b7       	in	r28, 0x3d	; 61
    7bf6:	de b7       	in	r29, 0x3e	; 62
    7bf8:	2b 97       	sbiw	r28, 0x0b	; 11
    7bfa:	cd bf       	out	0x3d, r28	; 61
    7bfc:	de bf       	out	0x3e, r29	; 62
    7bfe:	6c 01       	movw	r12, r24
    7c00:	7b 01       	movw	r14, r22
    7c02:	8a 01       	movw	r16, r20
    7c04:	fc 01       	movw	r30, r24
    7c06:	16 82       	std	Z+6, r1	; 0x06
    7c08:	17 82       	std	Z+7, r1	; 0x07
    7c0a:	83 81       	ldd	r24, Z+3	; 0x03
    7c0c:	81 ff       	sbrs	r24, 1
    7c0e:	bf c1       	rjmp	.+894    	; 0x7f8e <vfprintf+0x3be>
    7c10:	ce 01       	movw	r24, r28
    7c12:	01 96       	adiw	r24, 0x01	; 1
    7c14:	3c 01       	movw	r6, r24
    7c16:	f6 01       	movw	r30, r12
    7c18:	93 81       	ldd	r25, Z+3	; 0x03
    7c1a:	f7 01       	movw	r30, r14
    7c1c:	93 fd       	sbrc	r25, 3
    7c1e:	85 91       	lpm	r24, Z+
    7c20:	93 ff       	sbrs	r25, 3
    7c22:	81 91       	ld	r24, Z+
    7c24:	7f 01       	movw	r14, r30
    7c26:	88 23       	and	r24, r24
    7c28:	09 f4       	brne	.+2      	; 0x7c2c <vfprintf+0x5c>
    7c2a:	ad c1       	rjmp	.+858    	; 0x7f86 <vfprintf+0x3b6>
    7c2c:	85 32       	cpi	r24, 0x25	; 37
    7c2e:	39 f4       	brne	.+14     	; 0x7c3e <vfprintf+0x6e>
    7c30:	93 fd       	sbrc	r25, 3
    7c32:	85 91       	lpm	r24, Z+
    7c34:	93 ff       	sbrs	r25, 3
    7c36:	81 91       	ld	r24, Z+
    7c38:	7f 01       	movw	r14, r30
    7c3a:	85 32       	cpi	r24, 0x25	; 37
    7c3c:	21 f4       	brne	.+8      	; 0x7c46 <vfprintf+0x76>
    7c3e:	b6 01       	movw	r22, r12
    7c40:	90 e0       	ldi	r25, 0x00	; 0
    7c42:	15 d3       	rcall	.+1578   	; 0x826e <fputc>
    7c44:	e8 cf       	rjmp	.-48     	; 0x7c16 <vfprintf+0x46>
    7c46:	91 2c       	mov	r9, r1
    7c48:	21 2c       	mov	r2, r1
    7c4a:	31 2c       	mov	r3, r1
    7c4c:	ff e1       	ldi	r31, 0x1F	; 31
    7c4e:	f3 15       	cp	r31, r3
    7c50:	d8 f0       	brcs	.+54     	; 0x7c88 <vfprintf+0xb8>
    7c52:	8b 32       	cpi	r24, 0x2B	; 43
    7c54:	79 f0       	breq	.+30     	; 0x7c74 <vfprintf+0xa4>
    7c56:	38 f4       	brcc	.+14     	; 0x7c66 <vfprintf+0x96>
    7c58:	80 32       	cpi	r24, 0x20	; 32
    7c5a:	79 f0       	breq	.+30     	; 0x7c7a <vfprintf+0xaa>
    7c5c:	83 32       	cpi	r24, 0x23	; 35
    7c5e:	a1 f4       	brne	.+40     	; 0x7c88 <vfprintf+0xb8>
    7c60:	23 2d       	mov	r18, r3
    7c62:	20 61       	ori	r18, 0x10	; 16
    7c64:	1d c0       	rjmp	.+58     	; 0x7ca0 <vfprintf+0xd0>
    7c66:	8d 32       	cpi	r24, 0x2D	; 45
    7c68:	61 f0       	breq	.+24     	; 0x7c82 <vfprintf+0xb2>
    7c6a:	80 33       	cpi	r24, 0x30	; 48
    7c6c:	69 f4       	brne	.+26     	; 0x7c88 <vfprintf+0xb8>
    7c6e:	23 2d       	mov	r18, r3
    7c70:	21 60       	ori	r18, 0x01	; 1
    7c72:	16 c0       	rjmp	.+44     	; 0x7ca0 <vfprintf+0xd0>
    7c74:	83 2d       	mov	r24, r3
    7c76:	82 60       	ori	r24, 0x02	; 2
    7c78:	38 2e       	mov	r3, r24
    7c7a:	e3 2d       	mov	r30, r3
    7c7c:	e4 60       	ori	r30, 0x04	; 4
    7c7e:	3e 2e       	mov	r3, r30
    7c80:	2a c0       	rjmp	.+84     	; 0x7cd6 <vfprintf+0x106>
    7c82:	f3 2d       	mov	r31, r3
    7c84:	f8 60       	ori	r31, 0x08	; 8
    7c86:	1d c0       	rjmp	.+58     	; 0x7cc2 <vfprintf+0xf2>
    7c88:	37 fc       	sbrc	r3, 7
    7c8a:	2d c0       	rjmp	.+90     	; 0x7ce6 <vfprintf+0x116>
    7c8c:	20 ed       	ldi	r18, 0xD0	; 208
    7c8e:	28 0f       	add	r18, r24
    7c90:	2a 30       	cpi	r18, 0x0A	; 10
    7c92:	40 f0       	brcs	.+16     	; 0x7ca4 <vfprintf+0xd4>
    7c94:	8e 32       	cpi	r24, 0x2E	; 46
    7c96:	b9 f4       	brne	.+46     	; 0x7cc6 <vfprintf+0xf6>
    7c98:	36 fc       	sbrc	r3, 6
    7c9a:	75 c1       	rjmp	.+746    	; 0x7f86 <vfprintf+0x3b6>
    7c9c:	23 2d       	mov	r18, r3
    7c9e:	20 64       	ori	r18, 0x40	; 64
    7ca0:	32 2e       	mov	r3, r18
    7ca2:	19 c0       	rjmp	.+50     	; 0x7cd6 <vfprintf+0x106>
    7ca4:	36 fe       	sbrs	r3, 6
    7ca6:	06 c0       	rjmp	.+12     	; 0x7cb4 <vfprintf+0xe4>
    7ca8:	8a e0       	ldi	r24, 0x0A	; 10
    7caa:	98 9e       	mul	r9, r24
    7cac:	20 0d       	add	r18, r0
    7cae:	11 24       	eor	r1, r1
    7cb0:	92 2e       	mov	r9, r18
    7cb2:	11 c0       	rjmp	.+34     	; 0x7cd6 <vfprintf+0x106>
    7cb4:	ea e0       	ldi	r30, 0x0A	; 10
    7cb6:	2e 9e       	mul	r2, r30
    7cb8:	20 0d       	add	r18, r0
    7cba:	11 24       	eor	r1, r1
    7cbc:	22 2e       	mov	r2, r18
    7cbe:	f3 2d       	mov	r31, r3
    7cc0:	f0 62       	ori	r31, 0x20	; 32
    7cc2:	3f 2e       	mov	r3, r31
    7cc4:	08 c0       	rjmp	.+16     	; 0x7cd6 <vfprintf+0x106>
    7cc6:	8c 36       	cpi	r24, 0x6C	; 108
    7cc8:	21 f4       	brne	.+8      	; 0x7cd2 <vfprintf+0x102>
    7cca:	83 2d       	mov	r24, r3
    7ccc:	80 68       	ori	r24, 0x80	; 128
    7cce:	38 2e       	mov	r3, r24
    7cd0:	02 c0       	rjmp	.+4      	; 0x7cd6 <vfprintf+0x106>
    7cd2:	88 36       	cpi	r24, 0x68	; 104
    7cd4:	41 f4       	brne	.+16     	; 0x7ce6 <vfprintf+0x116>
    7cd6:	f7 01       	movw	r30, r14
    7cd8:	93 fd       	sbrc	r25, 3
    7cda:	85 91       	lpm	r24, Z+
    7cdc:	93 ff       	sbrs	r25, 3
    7cde:	81 91       	ld	r24, Z+
    7ce0:	7f 01       	movw	r14, r30
    7ce2:	81 11       	cpse	r24, r1
    7ce4:	b3 cf       	rjmp	.-154    	; 0x7c4c <vfprintf+0x7c>
    7ce6:	98 2f       	mov	r25, r24
    7ce8:	9f 7d       	andi	r25, 0xDF	; 223
    7cea:	95 54       	subi	r25, 0x45	; 69
    7cec:	93 30       	cpi	r25, 0x03	; 3
    7cee:	28 f4       	brcc	.+10     	; 0x7cfa <vfprintf+0x12a>
    7cf0:	0c 5f       	subi	r16, 0xFC	; 252
    7cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    7cf4:	9f e3       	ldi	r25, 0x3F	; 63
    7cf6:	99 83       	std	Y+1, r25	; 0x01
    7cf8:	0d c0       	rjmp	.+26     	; 0x7d14 <vfprintf+0x144>
    7cfa:	83 36       	cpi	r24, 0x63	; 99
    7cfc:	31 f0       	breq	.+12     	; 0x7d0a <vfprintf+0x13a>
    7cfe:	83 37       	cpi	r24, 0x73	; 115
    7d00:	71 f0       	breq	.+28     	; 0x7d1e <vfprintf+0x14e>
    7d02:	83 35       	cpi	r24, 0x53	; 83
    7d04:	09 f0       	breq	.+2      	; 0x7d08 <vfprintf+0x138>
    7d06:	55 c0       	rjmp	.+170    	; 0x7db2 <vfprintf+0x1e2>
    7d08:	20 c0       	rjmp	.+64     	; 0x7d4a <vfprintf+0x17a>
    7d0a:	f8 01       	movw	r30, r16
    7d0c:	80 81       	ld	r24, Z
    7d0e:	89 83       	std	Y+1, r24	; 0x01
    7d10:	0e 5f       	subi	r16, 0xFE	; 254
    7d12:	1f 4f       	sbci	r17, 0xFF	; 255
    7d14:	88 24       	eor	r8, r8
    7d16:	83 94       	inc	r8
    7d18:	91 2c       	mov	r9, r1
    7d1a:	53 01       	movw	r10, r6
    7d1c:	12 c0       	rjmp	.+36     	; 0x7d42 <vfprintf+0x172>
    7d1e:	28 01       	movw	r4, r16
    7d20:	f2 e0       	ldi	r31, 0x02	; 2
    7d22:	4f 0e       	add	r4, r31
    7d24:	51 1c       	adc	r5, r1
    7d26:	f8 01       	movw	r30, r16
    7d28:	a0 80       	ld	r10, Z
    7d2a:	b1 80       	ldd	r11, Z+1	; 0x01
    7d2c:	36 fe       	sbrs	r3, 6
    7d2e:	03 c0       	rjmp	.+6      	; 0x7d36 <vfprintf+0x166>
    7d30:	69 2d       	mov	r22, r9
    7d32:	70 e0       	ldi	r23, 0x00	; 0
    7d34:	02 c0       	rjmp	.+4      	; 0x7d3a <vfprintf+0x16a>
    7d36:	6f ef       	ldi	r22, 0xFF	; 255
    7d38:	7f ef       	ldi	r23, 0xFF	; 255
    7d3a:	c5 01       	movw	r24, r10
    7d3c:	8d d2       	rcall	.+1306   	; 0x8258 <strnlen>
    7d3e:	4c 01       	movw	r8, r24
    7d40:	82 01       	movw	r16, r4
    7d42:	f3 2d       	mov	r31, r3
    7d44:	ff 77       	andi	r31, 0x7F	; 127
    7d46:	3f 2e       	mov	r3, r31
    7d48:	15 c0       	rjmp	.+42     	; 0x7d74 <vfprintf+0x1a4>
    7d4a:	28 01       	movw	r4, r16
    7d4c:	22 e0       	ldi	r18, 0x02	; 2
    7d4e:	42 0e       	add	r4, r18
    7d50:	51 1c       	adc	r5, r1
    7d52:	f8 01       	movw	r30, r16
    7d54:	a0 80       	ld	r10, Z
    7d56:	b1 80       	ldd	r11, Z+1	; 0x01
    7d58:	36 fe       	sbrs	r3, 6
    7d5a:	03 c0       	rjmp	.+6      	; 0x7d62 <vfprintf+0x192>
    7d5c:	69 2d       	mov	r22, r9
    7d5e:	70 e0       	ldi	r23, 0x00	; 0
    7d60:	02 c0       	rjmp	.+4      	; 0x7d66 <vfprintf+0x196>
    7d62:	6f ef       	ldi	r22, 0xFF	; 255
    7d64:	7f ef       	ldi	r23, 0xFF	; 255
    7d66:	c5 01       	movw	r24, r10
    7d68:	65 d2       	rcall	.+1226   	; 0x8234 <strnlen_P>
    7d6a:	4c 01       	movw	r8, r24
    7d6c:	f3 2d       	mov	r31, r3
    7d6e:	f0 68       	ori	r31, 0x80	; 128
    7d70:	3f 2e       	mov	r3, r31
    7d72:	82 01       	movw	r16, r4
    7d74:	33 fc       	sbrc	r3, 3
    7d76:	19 c0       	rjmp	.+50     	; 0x7daa <vfprintf+0x1da>
    7d78:	82 2d       	mov	r24, r2
    7d7a:	90 e0       	ldi	r25, 0x00	; 0
    7d7c:	88 16       	cp	r8, r24
    7d7e:	99 06       	cpc	r9, r25
    7d80:	a0 f4       	brcc	.+40     	; 0x7daa <vfprintf+0x1da>
    7d82:	b6 01       	movw	r22, r12
    7d84:	80 e2       	ldi	r24, 0x20	; 32
    7d86:	90 e0       	ldi	r25, 0x00	; 0
    7d88:	72 d2       	rcall	.+1252   	; 0x826e <fputc>
    7d8a:	2a 94       	dec	r2
    7d8c:	f5 cf       	rjmp	.-22     	; 0x7d78 <vfprintf+0x1a8>
    7d8e:	f5 01       	movw	r30, r10
    7d90:	37 fc       	sbrc	r3, 7
    7d92:	85 91       	lpm	r24, Z+
    7d94:	37 fe       	sbrs	r3, 7
    7d96:	81 91       	ld	r24, Z+
    7d98:	5f 01       	movw	r10, r30
    7d9a:	b6 01       	movw	r22, r12
    7d9c:	90 e0       	ldi	r25, 0x00	; 0
    7d9e:	67 d2       	rcall	.+1230   	; 0x826e <fputc>
    7da0:	21 10       	cpse	r2, r1
    7da2:	2a 94       	dec	r2
    7da4:	21 e0       	ldi	r18, 0x01	; 1
    7da6:	82 1a       	sub	r8, r18
    7da8:	91 08       	sbc	r9, r1
    7daa:	81 14       	cp	r8, r1
    7dac:	91 04       	cpc	r9, r1
    7dae:	79 f7       	brne	.-34     	; 0x7d8e <vfprintf+0x1be>
    7db0:	e1 c0       	rjmp	.+450    	; 0x7f74 <vfprintf+0x3a4>
    7db2:	84 36       	cpi	r24, 0x64	; 100
    7db4:	11 f0       	breq	.+4      	; 0x7dba <vfprintf+0x1ea>
    7db6:	89 36       	cpi	r24, 0x69	; 105
    7db8:	39 f5       	brne	.+78     	; 0x7e08 <vfprintf+0x238>
    7dba:	f8 01       	movw	r30, r16
    7dbc:	37 fe       	sbrs	r3, 7
    7dbe:	07 c0       	rjmp	.+14     	; 0x7dce <vfprintf+0x1fe>
    7dc0:	60 81       	ld	r22, Z
    7dc2:	71 81       	ldd	r23, Z+1	; 0x01
    7dc4:	82 81       	ldd	r24, Z+2	; 0x02
    7dc6:	93 81       	ldd	r25, Z+3	; 0x03
    7dc8:	0c 5f       	subi	r16, 0xFC	; 252
    7dca:	1f 4f       	sbci	r17, 0xFF	; 255
    7dcc:	08 c0       	rjmp	.+16     	; 0x7dde <vfprintf+0x20e>
    7dce:	60 81       	ld	r22, Z
    7dd0:	71 81       	ldd	r23, Z+1	; 0x01
    7dd2:	07 2e       	mov	r0, r23
    7dd4:	00 0c       	add	r0, r0
    7dd6:	88 0b       	sbc	r24, r24
    7dd8:	99 0b       	sbc	r25, r25
    7dda:	0e 5f       	subi	r16, 0xFE	; 254
    7ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    7dde:	f3 2d       	mov	r31, r3
    7de0:	ff 76       	andi	r31, 0x6F	; 111
    7de2:	3f 2e       	mov	r3, r31
    7de4:	97 ff       	sbrs	r25, 7
    7de6:	09 c0       	rjmp	.+18     	; 0x7dfa <vfprintf+0x22a>
    7de8:	90 95       	com	r25
    7dea:	80 95       	com	r24
    7dec:	70 95       	com	r23
    7dee:	61 95       	neg	r22
    7df0:	7f 4f       	sbci	r23, 0xFF	; 255
    7df2:	8f 4f       	sbci	r24, 0xFF	; 255
    7df4:	9f 4f       	sbci	r25, 0xFF	; 255
    7df6:	f0 68       	ori	r31, 0x80	; 128
    7df8:	3f 2e       	mov	r3, r31
    7dfa:	2a e0       	ldi	r18, 0x0A	; 10
    7dfc:	30 e0       	ldi	r19, 0x00	; 0
    7dfe:	a3 01       	movw	r20, r6
    7e00:	72 d2       	rcall	.+1252   	; 0x82e6 <__ultoa_invert>
    7e02:	88 2e       	mov	r8, r24
    7e04:	86 18       	sub	r8, r6
    7e06:	44 c0       	rjmp	.+136    	; 0x7e90 <vfprintf+0x2c0>
    7e08:	85 37       	cpi	r24, 0x75	; 117
    7e0a:	31 f4       	brne	.+12     	; 0x7e18 <vfprintf+0x248>
    7e0c:	23 2d       	mov	r18, r3
    7e0e:	2f 7e       	andi	r18, 0xEF	; 239
    7e10:	b2 2e       	mov	r11, r18
    7e12:	2a e0       	ldi	r18, 0x0A	; 10
    7e14:	30 e0       	ldi	r19, 0x00	; 0
    7e16:	25 c0       	rjmp	.+74     	; 0x7e62 <vfprintf+0x292>
    7e18:	93 2d       	mov	r25, r3
    7e1a:	99 7f       	andi	r25, 0xF9	; 249
    7e1c:	b9 2e       	mov	r11, r25
    7e1e:	8f 36       	cpi	r24, 0x6F	; 111
    7e20:	c1 f0       	breq	.+48     	; 0x7e52 <vfprintf+0x282>
    7e22:	18 f4       	brcc	.+6      	; 0x7e2a <vfprintf+0x25a>
    7e24:	88 35       	cpi	r24, 0x58	; 88
    7e26:	79 f0       	breq	.+30     	; 0x7e46 <vfprintf+0x276>
    7e28:	ae c0       	rjmp	.+348    	; 0x7f86 <vfprintf+0x3b6>
    7e2a:	80 37       	cpi	r24, 0x70	; 112
    7e2c:	19 f0       	breq	.+6      	; 0x7e34 <vfprintf+0x264>
    7e2e:	88 37       	cpi	r24, 0x78	; 120
    7e30:	21 f0       	breq	.+8      	; 0x7e3a <vfprintf+0x26a>
    7e32:	a9 c0       	rjmp	.+338    	; 0x7f86 <vfprintf+0x3b6>
    7e34:	e9 2f       	mov	r30, r25
    7e36:	e0 61       	ori	r30, 0x10	; 16
    7e38:	be 2e       	mov	r11, r30
    7e3a:	b4 fe       	sbrs	r11, 4
    7e3c:	0d c0       	rjmp	.+26     	; 0x7e58 <vfprintf+0x288>
    7e3e:	fb 2d       	mov	r31, r11
    7e40:	f4 60       	ori	r31, 0x04	; 4
    7e42:	bf 2e       	mov	r11, r31
    7e44:	09 c0       	rjmp	.+18     	; 0x7e58 <vfprintf+0x288>
    7e46:	34 fe       	sbrs	r3, 4
    7e48:	0a c0       	rjmp	.+20     	; 0x7e5e <vfprintf+0x28e>
    7e4a:	29 2f       	mov	r18, r25
    7e4c:	26 60       	ori	r18, 0x06	; 6
    7e4e:	b2 2e       	mov	r11, r18
    7e50:	06 c0       	rjmp	.+12     	; 0x7e5e <vfprintf+0x28e>
    7e52:	28 e0       	ldi	r18, 0x08	; 8
    7e54:	30 e0       	ldi	r19, 0x00	; 0
    7e56:	05 c0       	rjmp	.+10     	; 0x7e62 <vfprintf+0x292>
    7e58:	20 e1       	ldi	r18, 0x10	; 16
    7e5a:	30 e0       	ldi	r19, 0x00	; 0
    7e5c:	02 c0       	rjmp	.+4      	; 0x7e62 <vfprintf+0x292>
    7e5e:	20 e1       	ldi	r18, 0x10	; 16
    7e60:	32 e0       	ldi	r19, 0x02	; 2
    7e62:	f8 01       	movw	r30, r16
    7e64:	b7 fe       	sbrs	r11, 7
    7e66:	07 c0       	rjmp	.+14     	; 0x7e76 <vfprintf+0x2a6>
    7e68:	60 81       	ld	r22, Z
    7e6a:	71 81       	ldd	r23, Z+1	; 0x01
    7e6c:	82 81       	ldd	r24, Z+2	; 0x02
    7e6e:	93 81       	ldd	r25, Z+3	; 0x03
    7e70:	0c 5f       	subi	r16, 0xFC	; 252
    7e72:	1f 4f       	sbci	r17, 0xFF	; 255
    7e74:	06 c0       	rjmp	.+12     	; 0x7e82 <vfprintf+0x2b2>
    7e76:	60 81       	ld	r22, Z
    7e78:	71 81       	ldd	r23, Z+1	; 0x01
    7e7a:	80 e0       	ldi	r24, 0x00	; 0
    7e7c:	90 e0       	ldi	r25, 0x00	; 0
    7e7e:	0e 5f       	subi	r16, 0xFE	; 254
    7e80:	1f 4f       	sbci	r17, 0xFF	; 255
    7e82:	a3 01       	movw	r20, r6
    7e84:	30 d2       	rcall	.+1120   	; 0x82e6 <__ultoa_invert>
    7e86:	88 2e       	mov	r8, r24
    7e88:	86 18       	sub	r8, r6
    7e8a:	fb 2d       	mov	r31, r11
    7e8c:	ff 77       	andi	r31, 0x7F	; 127
    7e8e:	3f 2e       	mov	r3, r31
    7e90:	36 fe       	sbrs	r3, 6
    7e92:	0d c0       	rjmp	.+26     	; 0x7eae <vfprintf+0x2de>
    7e94:	23 2d       	mov	r18, r3
    7e96:	2e 7f       	andi	r18, 0xFE	; 254
    7e98:	a2 2e       	mov	r10, r18
    7e9a:	89 14       	cp	r8, r9
    7e9c:	58 f4       	brcc	.+22     	; 0x7eb4 <vfprintf+0x2e4>
    7e9e:	34 fe       	sbrs	r3, 4
    7ea0:	0b c0       	rjmp	.+22     	; 0x7eb8 <vfprintf+0x2e8>
    7ea2:	32 fc       	sbrc	r3, 2
    7ea4:	09 c0       	rjmp	.+18     	; 0x7eb8 <vfprintf+0x2e8>
    7ea6:	83 2d       	mov	r24, r3
    7ea8:	8e 7e       	andi	r24, 0xEE	; 238
    7eaa:	a8 2e       	mov	r10, r24
    7eac:	05 c0       	rjmp	.+10     	; 0x7eb8 <vfprintf+0x2e8>
    7eae:	b8 2c       	mov	r11, r8
    7eb0:	a3 2c       	mov	r10, r3
    7eb2:	03 c0       	rjmp	.+6      	; 0x7eba <vfprintf+0x2ea>
    7eb4:	b8 2c       	mov	r11, r8
    7eb6:	01 c0       	rjmp	.+2      	; 0x7eba <vfprintf+0x2ea>
    7eb8:	b9 2c       	mov	r11, r9
    7eba:	a4 fe       	sbrs	r10, 4
    7ebc:	0f c0       	rjmp	.+30     	; 0x7edc <vfprintf+0x30c>
    7ebe:	fe 01       	movw	r30, r28
    7ec0:	e8 0d       	add	r30, r8
    7ec2:	f1 1d       	adc	r31, r1
    7ec4:	80 81       	ld	r24, Z
    7ec6:	80 33       	cpi	r24, 0x30	; 48
    7ec8:	21 f4       	brne	.+8      	; 0x7ed2 <vfprintf+0x302>
    7eca:	9a 2d       	mov	r25, r10
    7ecc:	99 7e       	andi	r25, 0xE9	; 233
    7ece:	a9 2e       	mov	r10, r25
    7ed0:	09 c0       	rjmp	.+18     	; 0x7ee4 <vfprintf+0x314>
    7ed2:	a2 fe       	sbrs	r10, 2
    7ed4:	06 c0       	rjmp	.+12     	; 0x7ee2 <vfprintf+0x312>
    7ed6:	b3 94       	inc	r11
    7ed8:	b3 94       	inc	r11
    7eda:	04 c0       	rjmp	.+8      	; 0x7ee4 <vfprintf+0x314>
    7edc:	8a 2d       	mov	r24, r10
    7ede:	86 78       	andi	r24, 0x86	; 134
    7ee0:	09 f0       	breq	.+2      	; 0x7ee4 <vfprintf+0x314>
    7ee2:	b3 94       	inc	r11
    7ee4:	a3 fc       	sbrc	r10, 3
    7ee6:	10 c0       	rjmp	.+32     	; 0x7f08 <vfprintf+0x338>
    7ee8:	a0 fe       	sbrs	r10, 0
    7eea:	06 c0       	rjmp	.+12     	; 0x7ef8 <vfprintf+0x328>
    7eec:	b2 14       	cp	r11, r2
    7eee:	80 f4       	brcc	.+32     	; 0x7f10 <vfprintf+0x340>
    7ef0:	28 0c       	add	r2, r8
    7ef2:	92 2c       	mov	r9, r2
    7ef4:	9b 18       	sub	r9, r11
    7ef6:	0d c0       	rjmp	.+26     	; 0x7f12 <vfprintf+0x342>
    7ef8:	b2 14       	cp	r11, r2
    7efa:	58 f4       	brcc	.+22     	; 0x7f12 <vfprintf+0x342>
    7efc:	b6 01       	movw	r22, r12
    7efe:	80 e2       	ldi	r24, 0x20	; 32
    7f00:	90 e0       	ldi	r25, 0x00	; 0
    7f02:	b5 d1       	rcall	.+874    	; 0x826e <fputc>
    7f04:	b3 94       	inc	r11
    7f06:	f8 cf       	rjmp	.-16     	; 0x7ef8 <vfprintf+0x328>
    7f08:	b2 14       	cp	r11, r2
    7f0a:	18 f4       	brcc	.+6      	; 0x7f12 <vfprintf+0x342>
    7f0c:	2b 18       	sub	r2, r11
    7f0e:	02 c0       	rjmp	.+4      	; 0x7f14 <vfprintf+0x344>
    7f10:	98 2c       	mov	r9, r8
    7f12:	21 2c       	mov	r2, r1
    7f14:	a4 fe       	sbrs	r10, 4
    7f16:	0f c0       	rjmp	.+30     	; 0x7f36 <vfprintf+0x366>
    7f18:	b6 01       	movw	r22, r12
    7f1a:	80 e3       	ldi	r24, 0x30	; 48
    7f1c:	90 e0       	ldi	r25, 0x00	; 0
    7f1e:	a7 d1       	rcall	.+846    	; 0x826e <fputc>
    7f20:	a2 fe       	sbrs	r10, 2
    7f22:	16 c0       	rjmp	.+44     	; 0x7f50 <vfprintf+0x380>
    7f24:	a1 fc       	sbrc	r10, 1
    7f26:	03 c0       	rjmp	.+6      	; 0x7f2e <vfprintf+0x35e>
    7f28:	88 e7       	ldi	r24, 0x78	; 120
    7f2a:	90 e0       	ldi	r25, 0x00	; 0
    7f2c:	02 c0       	rjmp	.+4      	; 0x7f32 <vfprintf+0x362>
    7f2e:	88 e5       	ldi	r24, 0x58	; 88
    7f30:	90 e0       	ldi	r25, 0x00	; 0
    7f32:	b6 01       	movw	r22, r12
    7f34:	0c c0       	rjmp	.+24     	; 0x7f4e <vfprintf+0x37e>
    7f36:	8a 2d       	mov	r24, r10
    7f38:	86 78       	andi	r24, 0x86	; 134
    7f3a:	51 f0       	breq	.+20     	; 0x7f50 <vfprintf+0x380>
    7f3c:	a1 fe       	sbrs	r10, 1
    7f3e:	02 c0       	rjmp	.+4      	; 0x7f44 <vfprintf+0x374>
    7f40:	8b e2       	ldi	r24, 0x2B	; 43
    7f42:	01 c0       	rjmp	.+2      	; 0x7f46 <vfprintf+0x376>
    7f44:	80 e2       	ldi	r24, 0x20	; 32
    7f46:	a7 fc       	sbrc	r10, 7
    7f48:	8d e2       	ldi	r24, 0x2D	; 45
    7f4a:	b6 01       	movw	r22, r12
    7f4c:	90 e0       	ldi	r25, 0x00	; 0
    7f4e:	8f d1       	rcall	.+798    	; 0x826e <fputc>
    7f50:	89 14       	cp	r8, r9
    7f52:	30 f4       	brcc	.+12     	; 0x7f60 <vfprintf+0x390>
    7f54:	b6 01       	movw	r22, r12
    7f56:	80 e3       	ldi	r24, 0x30	; 48
    7f58:	90 e0       	ldi	r25, 0x00	; 0
    7f5a:	89 d1       	rcall	.+786    	; 0x826e <fputc>
    7f5c:	9a 94       	dec	r9
    7f5e:	f8 cf       	rjmp	.-16     	; 0x7f50 <vfprintf+0x380>
    7f60:	8a 94       	dec	r8
    7f62:	f3 01       	movw	r30, r6
    7f64:	e8 0d       	add	r30, r8
    7f66:	f1 1d       	adc	r31, r1
    7f68:	80 81       	ld	r24, Z
    7f6a:	b6 01       	movw	r22, r12
    7f6c:	90 e0       	ldi	r25, 0x00	; 0
    7f6e:	7f d1       	rcall	.+766    	; 0x826e <fputc>
    7f70:	81 10       	cpse	r8, r1
    7f72:	f6 cf       	rjmp	.-20     	; 0x7f60 <vfprintf+0x390>
    7f74:	22 20       	and	r2, r2
    7f76:	09 f4       	brne	.+2      	; 0x7f7a <vfprintf+0x3aa>
    7f78:	4e ce       	rjmp	.-868    	; 0x7c16 <vfprintf+0x46>
    7f7a:	b6 01       	movw	r22, r12
    7f7c:	80 e2       	ldi	r24, 0x20	; 32
    7f7e:	90 e0       	ldi	r25, 0x00	; 0
    7f80:	76 d1       	rcall	.+748    	; 0x826e <fputc>
    7f82:	2a 94       	dec	r2
    7f84:	f7 cf       	rjmp	.-18     	; 0x7f74 <vfprintf+0x3a4>
    7f86:	f6 01       	movw	r30, r12
    7f88:	86 81       	ldd	r24, Z+6	; 0x06
    7f8a:	97 81       	ldd	r25, Z+7	; 0x07
    7f8c:	02 c0       	rjmp	.+4      	; 0x7f92 <vfprintf+0x3c2>
    7f8e:	8f ef       	ldi	r24, 0xFF	; 255
    7f90:	9f ef       	ldi	r25, 0xFF	; 255
    7f92:	2b 96       	adiw	r28, 0x0b	; 11
    7f94:	cd bf       	out	0x3d, r28	; 61
    7f96:	de bf       	out	0x3e, r29	; 62
    7f98:	df 91       	pop	r29
    7f9a:	cf 91       	pop	r28
    7f9c:	1f 91       	pop	r17
    7f9e:	0f 91       	pop	r16
    7fa0:	ff 90       	pop	r15
    7fa2:	ef 90       	pop	r14
    7fa4:	df 90       	pop	r13
    7fa6:	cf 90       	pop	r12
    7fa8:	bf 90       	pop	r11
    7faa:	af 90       	pop	r10
    7fac:	9f 90       	pop	r9
    7fae:	8f 90       	pop	r8
    7fb0:	7f 90       	pop	r7
    7fb2:	6f 90       	pop	r6
    7fb4:	5f 90       	pop	r5
    7fb6:	4f 90       	pop	r4
    7fb8:	3f 90       	pop	r3
    7fba:	2f 90       	pop	r2
    7fbc:	08 95       	ret

00007fbe <calloc>:
    7fbe:	0f 93       	push	r16
    7fc0:	1f 93       	push	r17
    7fc2:	cf 93       	push	r28
    7fc4:	df 93       	push	r29
    7fc6:	86 9f       	mul	r24, r22
    7fc8:	80 01       	movw	r16, r0
    7fca:	87 9f       	mul	r24, r23
    7fcc:	10 0d       	add	r17, r0
    7fce:	96 9f       	mul	r25, r22
    7fd0:	10 0d       	add	r17, r0
    7fd2:	11 24       	eor	r1, r1
    7fd4:	c8 01       	movw	r24, r16
    7fd6:	0d d0       	rcall	.+26     	; 0x7ff2 <malloc>
    7fd8:	ec 01       	movw	r28, r24
    7fda:	00 97       	sbiw	r24, 0x00	; 0
    7fdc:	21 f0       	breq	.+8      	; 0x7fe6 <calloc+0x28>
    7fde:	a8 01       	movw	r20, r16
    7fe0:	60 e0       	ldi	r22, 0x00	; 0
    7fe2:	70 e0       	ldi	r23, 0x00	; 0
    7fe4:	32 d1       	rcall	.+612    	; 0x824a <memset>
    7fe6:	ce 01       	movw	r24, r28
    7fe8:	df 91       	pop	r29
    7fea:	cf 91       	pop	r28
    7fec:	1f 91       	pop	r17
    7fee:	0f 91       	pop	r16
    7ff0:	08 95       	ret

00007ff2 <malloc>:
    7ff2:	0f 93       	push	r16
    7ff4:	1f 93       	push	r17
    7ff6:	cf 93       	push	r28
    7ff8:	df 93       	push	r29
    7ffa:	82 30       	cpi	r24, 0x02	; 2
    7ffc:	91 05       	cpc	r25, r1
    7ffe:	10 f4       	brcc	.+4      	; 0x8004 <malloc+0x12>
    8000:	82 e0       	ldi	r24, 0x02	; 2
    8002:	90 e0       	ldi	r25, 0x00	; 0
    8004:	e0 91 e9 25 	lds	r30, 0x25E9	; 0x8025e9 <__flp>
    8008:	f0 91 ea 25 	lds	r31, 0x25EA	; 0x8025ea <__flp+0x1>
    800c:	20 e0       	ldi	r18, 0x00	; 0
    800e:	30 e0       	ldi	r19, 0x00	; 0
    8010:	a0 e0       	ldi	r26, 0x00	; 0
    8012:	b0 e0       	ldi	r27, 0x00	; 0
    8014:	30 97       	sbiw	r30, 0x00	; 0
    8016:	19 f1       	breq	.+70     	; 0x805e <malloc+0x6c>
    8018:	40 81       	ld	r20, Z
    801a:	51 81       	ldd	r21, Z+1	; 0x01
    801c:	02 81       	ldd	r16, Z+2	; 0x02
    801e:	13 81       	ldd	r17, Z+3	; 0x03
    8020:	48 17       	cp	r20, r24
    8022:	59 07       	cpc	r21, r25
    8024:	c8 f0       	brcs	.+50     	; 0x8058 <malloc+0x66>
    8026:	84 17       	cp	r24, r20
    8028:	95 07       	cpc	r25, r21
    802a:	69 f4       	brne	.+26     	; 0x8046 <malloc+0x54>
    802c:	10 97       	sbiw	r26, 0x00	; 0
    802e:	31 f0       	breq	.+12     	; 0x803c <malloc+0x4a>
    8030:	12 96       	adiw	r26, 0x02	; 2
    8032:	0c 93       	st	X, r16
    8034:	12 97       	sbiw	r26, 0x02	; 2
    8036:	13 96       	adiw	r26, 0x03	; 3
    8038:	1c 93       	st	X, r17
    803a:	27 c0       	rjmp	.+78     	; 0x808a <malloc+0x98>
    803c:	00 93 e9 25 	sts	0x25E9, r16	; 0x8025e9 <__flp>
    8040:	10 93 ea 25 	sts	0x25EA, r17	; 0x8025ea <__flp+0x1>
    8044:	22 c0       	rjmp	.+68     	; 0x808a <malloc+0x98>
    8046:	21 15       	cp	r18, r1
    8048:	31 05       	cpc	r19, r1
    804a:	19 f0       	breq	.+6      	; 0x8052 <malloc+0x60>
    804c:	42 17       	cp	r20, r18
    804e:	53 07       	cpc	r21, r19
    8050:	18 f4       	brcc	.+6      	; 0x8058 <malloc+0x66>
    8052:	9a 01       	movw	r18, r20
    8054:	bd 01       	movw	r22, r26
    8056:	ef 01       	movw	r28, r30
    8058:	df 01       	movw	r26, r30
    805a:	f8 01       	movw	r30, r16
    805c:	db cf       	rjmp	.-74     	; 0x8014 <malloc+0x22>
    805e:	21 15       	cp	r18, r1
    8060:	31 05       	cpc	r19, r1
    8062:	f9 f0       	breq	.+62     	; 0x80a2 <malloc+0xb0>
    8064:	28 1b       	sub	r18, r24
    8066:	39 0b       	sbc	r19, r25
    8068:	24 30       	cpi	r18, 0x04	; 4
    806a:	31 05       	cpc	r19, r1
    806c:	80 f4       	brcc	.+32     	; 0x808e <malloc+0x9c>
    806e:	8a 81       	ldd	r24, Y+2	; 0x02
    8070:	9b 81       	ldd	r25, Y+3	; 0x03
    8072:	61 15       	cp	r22, r1
    8074:	71 05       	cpc	r23, r1
    8076:	21 f0       	breq	.+8      	; 0x8080 <malloc+0x8e>
    8078:	fb 01       	movw	r30, r22
    807a:	82 83       	std	Z+2, r24	; 0x02
    807c:	93 83       	std	Z+3, r25	; 0x03
    807e:	04 c0       	rjmp	.+8      	; 0x8088 <malloc+0x96>
    8080:	80 93 e9 25 	sts	0x25E9, r24	; 0x8025e9 <__flp>
    8084:	90 93 ea 25 	sts	0x25EA, r25	; 0x8025ea <__flp+0x1>
    8088:	fe 01       	movw	r30, r28
    808a:	32 96       	adiw	r30, 0x02	; 2
    808c:	44 c0       	rjmp	.+136    	; 0x8116 <malloc+0x124>
    808e:	fe 01       	movw	r30, r28
    8090:	e2 0f       	add	r30, r18
    8092:	f3 1f       	adc	r31, r19
    8094:	81 93       	st	Z+, r24
    8096:	91 93       	st	Z+, r25
    8098:	22 50       	subi	r18, 0x02	; 2
    809a:	31 09       	sbc	r19, r1
    809c:	28 83       	st	Y, r18
    809e:	39 83       	std	Y+1, r19	; 0x01
    80a0:	3a c0       	rjmp	.+116    	; 0x8116 <malloc+0x124>
    80a2:	20 91 e7 25 	lds	r18, 0x25E7	; 0x8025e7 <__brkval>
    80a6:	30 91 e8 25 	lds	r19, 0x25E8	; 0x8025e8 <__brkval+0x1>
    80aa:	23 2b       	or	r18, r19
    80ac:	41 f4       	brne	.+16     	; 0x80be <malloc+0xcc>
    80ae:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    80b2:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    80b6:	20 93 e7 25 	sts	0x25E7, r18	; 0x8025e7 <__brkval>
    80ba:	30 93 e8 25 	sts	0x25E8, r19	; 0x8025e8 <__brkval+0x1>
    80be:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    80c2:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    80c6:	21 15       	cp	r18, r1
    80c8:	31 05       	cpc	r19, r1
    80ca:	41 f4       	brne	.+16     	; 0x80dc <malloc+0xea>
    80cc:	2d b7       	in	r18, 0x3d	; 61
    80ce:	3e b7       	in	r19, 0x3e	; 62
    80d0:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    80d4:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    80d8:	24 1b       	sub	r18, r20
    80da:	35 0b       	sbc	r19, r21
    80dc:	e0 91 e7 25 	lds	r30, 0x25E7	; 0x8025e7 <__brkval>
    80e0:	f0 91 e8 25 	lds	r31, 0x25E8	; 0x8025e8 <__brkval+0x1>
    80e4:	e2 17       	cp	r30, r18
    80e6:	f3 07       	cpc	r31, r19
    80e8:	a0 f4       	brcc	.+40     	; 0x8112 <malloc+0x120>
    80ea:	2e 1b       	sub	r18, r30
    80ec:	3f 0b       	sbc	r19, r31
    80ee:	28 17       	cp	r18, r24
    80f0:	39 07       	cpc	r19, r25
    80f2:	78 f0       	brcs	.+30     	; 0x8112 <malloc+0x120>
    80f4:	ac 01       	movw	r20, r24
    80f6:	4e 5f       	subi	r20, 0xFE	; 254
    80f8:	5f 4f       	sbci	r21, 0xFF	; 255
    80fa:	24 17       	cp	r18, r20
    80fc:	35 07       	cpc	r19, r21
    80fe:	48 f0       	brcs	.+18     	; 0x8112 <malloc+0x120>
    8100:	4e 0f       	add	r20, r30
    8102:	5f 1f       	adc	r21, r31
    8104:	40 93 e7 25 	sts	0x25E7, r20	; 0x8025e7 <__brkval>
    8108:	50 93 e8 25 	sts	0x25E8, r21	; 0x8025e8 <__brkval+0x1>
    810c:	81 93       	st	Z+, r24
    810e:	91 93       	st	Z+, r25
    8110:	02 c0       	rjmp	.+4      	; 0x8116 <malloc+0x124>
    8112:	e0 e0       	ldi	r30, 0x00	; 0
    8114:	f0 e0       	ldi	r31, 0x00	; 0
    8116:	cf 01       	movw	r24, r30
    8118:	df 91       	pop	r29
    811a:	cf 91       	pop	r28
    811c:	1f 91       	pop	r17
    811e:	0f 91       	pop	r16
    8120:	08 95       	ret

00008122 <free>:
    8122:	cf 93       	push	r28
    8124:	df 93       	push	r29
    8126:	00 97       	sbiw	r24, 0x00	; 0
    8128:	09 f4       	brne	.+2      	; 0x812c <free+0xa>
    812a:	81 c0       	rjmp	.+258    	; 0x822e <free+0x10c>
    812c:	fc 01       	movw	r30, r24
    812e:	32 97       	sbiw	r30, 0x02	; 2
    8130:	12 82       	std	Z+2, r1	; 0x02
    8132:	13 82       	std	Z+3, r1	; 0x03
    8134:	a0 91 e9 25 	lds	r26, 0x25E9	; 0x8025e9 <__flp>
    8138:	b0 91 ea 25 	lds	r27, 0x25EA	; 0x8025ea <__flp+0x1>
    813c:	10 97       	sbiw	r26, 0x00	; 0
    813e:	81 f4       	brne	.+32     	; 0x8160 <free+0x3e>
    8140:	20 81       	ld	r18, Z
    8142:	31 81       	ldd	r19, Z+1	; 0x01
    8144:	82 0f       	add	r24, r18
    8146:	93 1f       	adc	r25, r19
    8148:	20 91 e7 25 	lds	r18, 0x25E7	; 0x8025e7 <__brkval>
    814c:	30 91 e8 25 	lds	r19, 0x25E8	; 0x8025e8 <__brkval+0x1>
    8150:	28 17       	cp	r18, r24
    8152:	39 07       	cpc	r19, r25
    8154:	51 f5       	brne	.+84     	; 0x81aa <free+0x88>
    8156:	e0 93 e7 25 	sts	0x25E7, r30	; 0x8025e7 <__brkval>
    815a:	f0 93 e8 25 	sts	0x25E8, r31	; 0x8025e8 <__brkval+0x1>
    815e:	67 c0       	rjmp	.+206    	; 0x822e <free+0x10c>
    8160:	ed 01       	movw	r28, r26
    8162:	20 e0       	ldi	r18, 0x00	; 0
    8164:	30 e0       	ldi	r19, 0x00	; 0
    8166:	ce 17       	cp	r28, r30
    8168:	df 07       	cpc	r29, r31
    816a:	40 f4       	brcc	.+16     	; 0x817c <free+0x5a>
    816c:	4a 81       	ldd	r20, Y+2	; 0x02
    816e:	5b 81       	ldd	r21, Y+3	; 0x03
    8170:	9e 01       	movw	r18, r28
    8172:	41 15       	cp	r20, r1
    8174:	51 05       	cpc	r21, r1
    8176:	f1 f0       	breq	.+60     	; 0x81b4 <free+0x92>
    8178:	ea 01       	movw	r28, r20
    817a:	f5 cf       	rjmp	.-22     	; 0x8166 <free+0x44>
    817c:	c2 83       	std	Z+2, r28	; 0x02
    817e:	d3 83       	std	Z+3, r29	; 0x03
    8180:	40 81       	ld	r20, Z
    8182:	51 81       	ldd	r21, Z+1	; 0x01
    8184:	84 0f       	add	r24, r20
    8186:	95 1f       	adc	r25, r21
    8188:	c8 17       	cp	r28, r24
    818a:	d9 07       	cpc	r29, r25
    818c:	59 f4       	brne	.+22     	; 0x81a4 <free+0x82>
    818e:	88 81       	ld	r24, Y
    8190:	99 81       	ldd	r25, Y+1	; 0x01
    8192:	84 0f       	add	r24, r20
    8194:	95 1f       	adc	r25, r21
    8196:	02 96       	adiw	r24, 0x02	; 2
    8198:	80 83       	st	Z, r24
    819a:	91 83       	std	Z+1, r25	; 0x01
    819c:	8a 81       	ldd	r24, Y+2	; 0x02
    819e:	9b 81       	ldd	r25, Y+3	; 0x03
    81a0:	82 83       	std	Z+2, r24	; 0x02
    81a2:	93 83       	std	Z+3, r25	; 0x03
    81a4:	21 15       	cp	r18, r1
    81a6:	31 05       	cpc	r19, r1
    81a8:	29 f4       	brne	.+10     	; 0x81b4 <free+0x92>
    81aa:	e0 93 e9 25 	sts	0x25E9, r30	; 0x8025e9 <__flp>
    81ae:	f0 93 ea 25 	sts	0x25EA, r31	; 0x8025ea <__flp+0x1>
    81b2:	3d c0       	rjmp	.+122    	; 0x822e <free+0x10c>
    81b4:	e9 01       	movw	r28, r18
    81b6:	ea 83       	std	Y+2, r30	; 0x02
    81b8:	fb 83       	std	Y+3, r31	; 0x03
    81ba:	49 91       	ld	r20, Y+
    81bc:	59 91       	ld	r21, Y+
    81be:	c4 0f       	add	r28, r20
    81c0:	d5 1f       	adc	r29, r21
    81c2:	ec 17       	cp	r30, r28
    81c4:	fd 07       	cpc	r31, r29
    81c6:	61 f4       	brne	.+24     	; 0x81e0 <free+0xbe>
    81c8:	80 81       	ld	r24, Z
    81ca:	91 81       	ldd	r25, Z+1	; 0x01
    81cc:	84 0f       	add	r24, r20
    81ce:	95 1f       	adc	r25, r21
    81d0:	02 96       	adiw	r24, 0x02	; 2
    81d2:	e9 01       	movw	r28, r18
    81d4:	88 83       	st	Y, r24
    81d6:	99 83       	std	Y+1, r25	; 0x01
    81d8:	82 81       	ldd	r24, Z+2	; 0x02
    81da:	93 81       	ldd	r25, Z+3	; 0x03
    81dc:	8a 83       	std	Y+2, r24	; 0x02
    81de:	9b 83       	std	Y+3, r25	; 0x03
    81e0:	e0 e0       	ldi	r30, 0x00	; 0
    81e2:	f0 e0       	ldi	r31, 0x00	; 0
    81e4:	12 96       	adiw	r26, 0x02	; 2
    81e6:	8d 91       	ld	r24, X+
    81e8:	9c 91       	ld	r25, X
    81ea:	13 97       	sbiw	r26, 0x03	; 3
    81ec:	00 97       	sbiw	r24, 0x00	; 0
    81ee:	19 f0       	breq	.+6      	; 0x81f6 <free+0xd4>
    81f0:	fd 01       	movw	r30, r26
    81f2:	dc 01       	movw	r26, r24
    81f4:	f7 cf       	rjmp	.-18     	; 0x81e4 <free+0xc2>
    81f6:	8d 91       	ld	r24, X+
    81f8:	9c 91       	ld	r25, X
    81fa:	11 97       	sbiw	r26, 0x01	; 1
    81fc:	9d 01       	movw	r18, r26
    81fe:	2e 5f       	subi	r18, 0xFE	; 254
    8200:	3f 4f       	sbci	r19, 0xFF	; 255
    8202:	82 0f       	add	r24, r18
    8204:	93 1f       	adc	r25, r19
    8206:	20 91 e7 25 	lds	r18, 0x25E7	; 0x8025e7 <__brkval>
    820a:	30 91 e8 25 	lds	r19, 0x25E8	; 0x8025e8 <__brkval+0x1>
    820e:	28 17       	cp	r18, r24
    8210:	39 07       	cpc	r19, r25
    8212:	69 f4       	brne	.+26     	; 0x822e <free+0x10c>
    8214:	30 97       	sbiw	r30, 0x00	; 0
    8216:	29 f4       	brne	.+10     	; 0x8222 <free+0x100>
    8218:	10 92 e9 25 	sts	0x25E9, r1	; 0x8025e9 <__flp>
    821c:	10 92 ea 25 	sts	0x25EA, r1	; 0x8025ea <__flp+0x1>
    8220:	02 c0       	rjmp	.+4      	; 0x8226 <free+0x104>
    8222:	12 82       	std	Z+2, r1	; 0x02
    8224:	13 82       	std	Z+3, r1	; 0x03
    8226:	a0 93 e7 25 	sts	0x25E7, r26	; 0x8025e7 <__brkval>
    822a:	b0 93 e8 25 	sts	0x25E8, r27	; 0x8025e8 <__brkval+0x1>
    822e:	df 91       	pop	r29
    8230:	cf 91       	pop	r28
    8232:	08 95       	ret

00008234 <strnlen_P>:
    8234:	fc 01       	movw	r30, r24
    8236:	05 90       	lpm	r0, Z+
    8238:	61 50       	subi	r22, 0x01	; 1
    823a:	70 40       	sbci	r23, 0x00	; 0
    823c:	01 10       	cpse	r0, r1
    823e:	d8 f7       	brcc	.-10     	; 0x8236 <strnlen_P+0x2>
    8240:	80 95       	com	r24
    8242:	90 95       	com	r25
    8244:	8e 0f       	add	r24, r30
    8246:	9f 1f       	adc	r25, r31
    8248:	08 95       	ret

0000824a <memset>:
    824a:	dc 01       	movw	r26, r24
    824c:	01 c0       	rjmp	.+2      	; 0x8250 <memset+0x6>
    824e:	6d 93       	st	X+, r22
    8250:	41 50       	subi	r20, 0x01	; 1
    8252:	50 40       	sbci	r21, 0x00	; 0
    8254:	e0 f7       	brcc	.-8      	; 0x824e <memset+0x4>
    8256:	08 95       	ret

00008258 <strnlen>:
    8258:	fc 01       	movw	r30, r24
    825a:	61 50       	subi	r22, 0x01	; 1
    825c:	70 40       	sbci	r23, 0x00	; 0
    825e:	01 90       	ld	r0, Z+
    8260:	01 10       	cpse	r0, r1
    8262:	d8 f7       	brcc	.-10     	; 0x825a <strnlen+0x2>
    8264:	80 95       	com	r24
    8266:	90 95       	com	r25
    8268:	8e 0f       	add	r24, r30
    826a:	9f 1f       	adc	r25, r31
    826c:	08 95       	ret

0000826e <fputc>:
    826e:	0f 93       	push	r16
    8270:	1f 93       	push	r17
    8272:	cf 93       	push	r28
    8274:	df 93       	push	r29
    8276:	fb 01       	movw	r30, r22
    8278:	23 81       	ldd	r18, Z+3	; 0x03
    827a:	21 fd       	sbrc	r18, 1
    827c:	03 c0       	rjmp	.+6      	; 0x8284 <fputc+0x16>
    827e:	8f ef       	ldi	r24, 0xFF	; 255
    8280:	9f ef       	ldi	r25, 0xFF	; 255
    8282:	2c c0       	rjmp	.+88     	; 0x82dc <fputc+0x6e>
    8284:	22 ff       	sbrs	r18, 2
    8286:	16 c0       	rjmp	.+44     	; 0x82b4 <fputc+0x46>
    8288:	46 81       	ldd	r20, Z+6	; 0x06
    828a:	57 81       	ldd	r21, Z+7	; 0x07
    828c:	24 81       	ldd	r18, Z+4	; 0x04
    828e:	35 81       	ldd	r19, Z+5	; 0x05
    8290:	42 17       	cp	r20, r18
    8292:	53 07       	cpc	r21, r19
    8294:	44 f4       	brge	.+16     	; 0x82a6 <fputc+0x38>
    8296:	a0 81       	ld	r26, Z
    8298:	b1 81       	ldd	r27, Z+1	; 0x01
    829a:	9d 01       	movw	r18, r26
    829c:	2f 5f       	subi	r18, 0xFF	; 255
    829e:	3f 4f       	sbci	r19, 0xFF	; 255
    82a0:	20 83       	st	Z, r18
    82a2:	31 83       	std	Z+1, r19	; 0x01
    82a4:	8c 93       	st	X, r24
    82a6:	26 81       	ldd	r18, Z+6	; 0x06
    82a8:	37 81       	ldd	r19, Z+7	; 0x07
    82aa:	2f 5f       	subi	r18, 0xFF	; 255
    82ac:	3f 4f       	sbci	r19, 0xFF	; 255
    82ae:	26 83       	std	Z+6, r18	; 0x06
    82b0:	37 83       	std	Z+7, r19	; 0x07
    82b2:	14 c0       	rjmp	.+40     	; 0x82dc <fputc+0x6e>
    82b4:	8b 01       	movw	r16, r22
    82b6:	ec 01       	movw	r28, r24
    82b8:	fb 01       	movw	r30, r22
    82ba:	00 84       	ldd	r0, Z+8	; 0x08
    82bc:	f1 85       	ldd	r31, Z+9	; 0x09
    82be:	e0 2d       	mov	r30, r0
    82c0:	19 95       	eicall
    82c2:	89 2b       	or	r24, r25
    82c4:	e1 f6       	brne	.-72     	; 0x827e <fputc+0x10>
    82c6:	d8 01       	movw	r26, r16
    82c8:	16 96       	adiw	r26, 0x06	; 6
    82ca:	8d 91       	ld	r24, X+
    82cc:	9c 91       	ld	r25, X
    82ce:	17 97       	sbiw	r26, 0x07	; 7
    82d0:	01 96       	adiw	r24, 0x01	; 1
    82d2:	16 96       	adiw	r26, 0x06	; 6
    82d4:	8d 93       	st	X+, r24
    82d6:	9c 93       	st	X, r25
    82d8:	17 97       	sbiw	r26, 0x07	; 7
    82da:	ce 01       	movw	r24, r28
    82dc:	df 91       	pop	r29
    82de:	cf 91       	pop	r28
    82e0:	1f 91       	pop	r17
    82e2:	0f 91       	pop	r16
    82e4:	08 95       	ret

000082e6 <__ultoa_invert>:
    82e6:	fa 01       	movw	r30, r20
    82e8:	aa 27       	eor	r26, r26
    82ea:	28 30       	cpi	r18, 0x08	; 8
    82ec:	51 f1       	breq	.+84     	; 0x8342 <__ultoa_invert+0x5c>
    82ee:	20 31       	cpi	r18, 0x10	; 16
    82f0:	81 f1       	breq	.+96     	; 0x8352 <__ultoa_invert+0x6c>
    82f2:	e8 94       	clt
    82f4:	6f 93       	push	r22
    82f6:	6e 7f       	andi	r22, 0xFE	; 254
    82f8:	6e 5f       	subi	r22, 0xFE	; 254
    82fa:	7f 4f       	sbci	r23, 0xFF	; 255
    82fc:	8f 4f       	sbci	r24, 0xFF	; 255
    82fe:	9f 4f       	sbci	r25, 0xFF	; 255
    8300:	af 4f       	sbci	r26, 0xFF	; 255
    8302:	b1 e0       	ldi	r27, 0x01	; 1
    8304:	3e d0       	rcall	.+124    	; 0x8382 <__ultoa_invert+0x9c>
    8306:	b4 e0       	ldi	r27, 0x04	; 4
    8308:	3c d0       	rcall	.+120    	; 0x8382 <__ultoa_invert+0x9c>
    830a:	67 0f       	add	r22, r23
    830c:	78 1f       	adc	r23, r24
    830e:	89 1f       	adc	r24, r25
    8310:	9a 1f       	adc	r25, r26
    8312:	a1 1d       	adc	r26, r1
    8314:	68 0f       	add	r22, r24
    8316:	79 1f       	adc	r23, r25
    8318:	8a 1f       	adc	r24, r26
    831a:	91 1d       	adc	r25, r1
    831c:	a1 1d       	adc	r26, r1
    831e:	6a 0f       	add	r22, r26
    8320:	71 1d       	adc	r23, r1
    8322:	81 1d       	adc	r24, r1
    8324:	91 1d       	adc	r25, r1
    8326:	a1 1d       	adc	r26, r1
    8328:	20 d0       	rcall	.+64     	; 0x836a <__ultoa_invert+0x84>
    832a:	09 f4       	brne	.+2      	; 0x832e <__ultoa_invert+0x48>
    832c:	68 94       	set
    832e:	3f 91       	pop	r19
    8330:	2a e0       	ldi	r18, 0x0A	; 10
    8332:	26 9f       	mul	r18, r22
    8334:	11 24       	eor	r1, r1
    8336:	30 19       	sub	r19, r0
    8338:	30 5d       	subi	r19, 0xD0	; 208
    833a:	31 93       	st	Z+, r19
    833c:	de f6       	brtc	.-74     	; 0x82f4 <__ultoa_invert+0xe>
    833e:	cf 01       	movw	r24, r30
    8340:	08 95       	ret
    8342:	46 2f       	mov	r20, r22
    8344:	47 70       	andi	r20, 0x07	; 7
    8346:	40 5d       	subi	r20, 0xD0	; 208
    8348:	41 93       	st	Z+, r20
    834a:	b3 e0       	ldi	r27, 0x03	; 3
    834c:	0f d0       	rcall	.+30     	; 0x836c <__ultoa_invert+0x86>
    834e:	c9 f7       	brne	.-14     	; 0x8342 <__ultoa_invert+0x5c>
    8350:	f6 cf       	rjmp	.-20     	; 0x833e <__ultoa_invert+0x58>
    8352:	46 2f       	mov	r20, r22
    8354:	4f 70       	andi	r20, 0x0F	; 15
    8356:	40 5d       	subi	r20, 0xD0	; 208
    8358:	4a 33       	cpi	r20, 0x3A	; 58
    835a:	18 f0       	brcs	.+6      	; 0x8362 <__ultoa_invert+0x7c>
    835c:	49 5d       	subi	r20, 0xD9	; 217
    835e:	31 fd       	sbrc	r19, 1
    8360:	40 52       	subi	r20, 0x20	; 32
    8362:	41 93       	st	Z+, r20
    8364:	02 d0       	rcall	.+4      	; 0x836a <__ultoa_invert+0x84>
    8366:	a9 f7       	brne	.-22     	; 0x8352 <__ultoa_invert+0x6c>
    8368:	ea cf       	rjmp	.-44     	; 0x833e <__ultoa_invert+0x58>
    836a:	b4 e0       	ldi	r27, 0x04	; 4
    836c:	a6 95       	lsr	r26
    836e:	97 95       	ror	r25
    8370:	87 95       	ror	r24
    8372:	77 95       	ror	r23
    8374:	67 95       	ror	r22
    8376:	ba 95       	dec	r27
    8378:	c9 f7       	brne	.-14     	; 0x836c <__ultoa_invert+0x86>
    837a:	00 97       	sbiw	r24, 0x00	; 0
    837c:	61 05       	cpc	r22, r1
    837e:	71 05       	cpc	r23, r1
    8380:	08 95       	ret
    8382:	9b 01       	movw	r18, r22
    8384:	ac 01       	movw	r20, r24
    8386:	0a 2e       	mov	r0, r26
    8388:	06 94       	lsr	r0
    838a:	57 95       	ror	r21
    838c:	47 95       	ror	r20
    838e:	37 95       	ror	r19
    8390:	27 95       	ror	r18
    8392:	ba 95       	dec	r27
    8394:	c9 f7       	brne	.-14     	; 0x8388 <__ultoa_invert+0xa2>
    8396:	62 0f       	add	r22, r18
    8398:	73 1f       	adc	r23, r19
    839a:	84 1f       	adc	r24, r20
    839c:	95 1f       	adc	r25, r21
    839e:	a0 1d       	adc	r26, r0
    83a0:	08 95       	ret

000083a2 <_exit>:
    83a2:	f8 94       	cli

000083a4 <__stop_program>:
    83a4:	ff cf       	rjmp	.-2      	; 0x83a4 <__stop_program>
