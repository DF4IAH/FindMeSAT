
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005078  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00802000  00005078  0000510c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f7  008021a8  008021a8  000052b4  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000052b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00005310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000890  00000000  00000000  00005358  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001631e  00000000  00000000  00005be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000060c5  00000000  00000000  0001bf06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000bb8d  00000000  00000000  00021fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000022a8  00000000  00000000  0002db58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003ce5d  00000000  00000000  0002fe00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007ca4  00000000  00000000  0006cc5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008b8  00000000  00000000  00074908  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d929  00000000  00000000  000751c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__vector_11>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <__vector_13>
      38:	5d c6       	rjmp	.+3258   	; 0xcf4 <__vector_14>
      3a:	00 00       	nop
      3c:	88 c6       	rjmp	.+3344   	; 0xd4e <__vector_15>
      3e:	00 00       	nop
      40:	b3 c6       	rjmp	.+3430   	; 0xda8 <__vector_16>
      42:	00 00       	nop
      44:	de c6       	rjmp	.+3516   	; 0xe02 <__vector_17>
      46:	00 00       	nop
      48:	09 c7       	rjmp	.+3602   	; 0xe5c <__vector_18>
      4a:	00 00       	nop
      4c:	34 c7       	rjmp	.+3688   	; 0xeb6 <__vector_19>
      4e:	00 00       	nop
      50:	5f c7       	rjmp	.+3774   	; 0xf10 <__vector_20>
      52:	00 00       	nop
      54:	8a c7       	rjmp	.+3860   	; 0xf6a <__vector_21>
      56:	00 00       	nop
      58:	b5 c7       	rjmp	.+3946   	; 0xfc4 <__vector_22>
      5a:	00 00       	nop
      5c:	e0 c7       	rjmp	.+4032   	; 0x101e <__vector_23>
      5e:	00 00       	nop
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	80 c3       	rjmp	.+1792   	; 0x79e <__vector_39>
      9e:	00 00       	nop
      a0:	b0 c3       	rjmp	.+1888   	; 0x802 <__vector_40>
      a2:	00 00       	nop
      a4:	e0 c3       	rjmp	.+1984   	; 0x866 <__vector_41>
      a6:	00 00       	nop
      a8:	10 c4       	rjmp	.+2080   	; 0x8ca <__vector_42>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__vector_46>
      bc:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__vector_47>
      c0:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__vector_48>
      c4:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__vector_49>
      c8:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__vector_50>
      cc:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__vector_51>
      d0:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_52>
      d4:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__vector_53>
      d8:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__vector_54>
      dc:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__vector_55>
      e0:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__vector_56>
      e4:	ba c0       	rjmp	.+372    	; 0x25a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b6 c0       	rjmp	.+364    	; 0x25a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b4 c0       	rjmp	.+360    	; 0x25a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b2 c0       	rjmp	.+356    	; 0x25a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b0 c0       	rjmp	.+352    	; 0x25a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ae c0       	rjmp	.+348    	; 0x25a <__bad_interrupt>
      fe:	00 00       	nop
     100:	ac c0       	rjmp	.+344    	; 0x25a <__bad_interrupt>
     102:	00 00       	nop
     104:	aa c0       	rjmp	.+340    	; 0x25a <__bad_interrupt>
     106:	00 00       	nop
     108:	a8 c0       	rjmp	.+336    	; 0x25a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a6 c0       	rjmp	.+332    	; 0x25a <__bad_interrupt>
     10e:	00 00       	nop
     110:	a4 c0       	rjmp	.+328    	; 0x25a <__bad_interrupt>
     112:	00 00       	nop
     114:	a2 c0       	rjmp	.+324    	; 0x25a <__bad_interrupt>
     116:	00 00       	nop
     118:	a0 c0       	rjmp	.+320    	; 0x25a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	78 c2       	rjmp	.+1264   	; 0x60e <__vector_71>
     11e:	00 00       	nop
     120:	a8 c2       	rjmp	.+1360   	; 0x672 <__vector_72>
     122:	00 00       	nop
     124:	d8 c2       	rjmp	.+1456   	; 0x6d6 <__vector_73>
     126:	00 00       	nop
     128:	08 c3       	rjmp	.+1552   	; 0x73a <__vector_74>
     12a:	00 00       	nop
     12c:	96 c0       	rjmp	.+300    	; 0x25a <__bad_interrupt>
     12e:	00 00       	nop
     130:	94 c0       	rjmp	.+296    	; 0x25a <__bad_interrupt>
     132:	00 00       	nop
     134:	a1 c7       	rjmp	.+3906   	; 0x1078 <__vector_77>
     136:	00 00       	nop
     138:	cc c7       	rjmp	.+3992   	; 0x10d2 <__vector_78>
     13a:	00 00       	nop
     13c:	f7 c7       	rjmp	.+4078   	; 0x112c <__vector_79>
     13e:	00 00       	nop
     140:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_80>
     144:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_81>
     148:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_82>
     14c:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_83>
     150:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__vector_84>
     154:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_85>
     158:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__vector_86>
     15c:	7e c0       	rjmp	.+252    	; 0x25a <__bad_interrupt>
     15e:	00 00       	nop
     160:	7c c0       	rjmp	.+248    	; 0x25a <__bad_interrupt>
     162:	00 00       	nop
     164:	7a c0       	rjmp	.+244    	; 0x25a <__bad_interrupt>
     166:	00 00       	nop
     168:	78 c0       	rjmp	.+240    	; 0x25a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	76 c0       	rjmp	.+236    	; 0x25a <__bad_interrupt>
     16e:	00 00       	nop
     170:	74 c0       	rjmp	.+232    	; 0x25a <__bad_interrupt>
     172:	00 00       	nop
     174:	72 c0       	rjmp	.+228    	; 0x25a <__bad_interrupt>
     176:	00 00       	nop
     178:	70 c0       	rjmp	.+224    	; 0x25a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6e c0       	rjmp	.+220    	; 0x25a <__bad_interrupt>
     17e:	00 00       	nop
     180:	6c c0       	rjmp	.+216    	; 0x25a <__bad_interrupt>
     182:	00 00       	nop
     184:	6a c0       	rjmp	.+212    	; 0x25a <__bad_interrupt>
     186:	00 00       	nop
     188:	68 c0       	rjmp	.+208    	; 0x25a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	66 c0       	rjmp	.+204    	; 0x25a <__bad_interrupt>
     18e:	00 00       	nop
     190:	64 c0       	rjmp	.+200    	; 0x25a <__bad_interrupt>
     192:	00 00       	nop
     194:	62 c0       	rjmp	.+196    	; 0x25a <__bad_interrupt>
     196:	00 00       	nop
     198:	60 c0       	rjmp	.+192    	; 0x25a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5e c0       	rjmp	.+188    	; 0x25a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5c c0       	rjmp	.+184    	; 0x25a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5a c0       	rjmp	.+180    	; 0x25a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	58 c0       	rjmp	.+176    	; 0x25a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	56 c0       	rjmp	.+172    	; 0x25a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__vector_108>
     1b4:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_109>
     1b8:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__vector_110>
     1bc:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__vector_111>
     1c0:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__vector_112>
     1c4:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_113>
     1c8:	48 c0       	rjmp	.+144    	; 0x25a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	46 c0       	rjmp	.+140    	; 0x25a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	44 c0       	rjmp	.+136    	; 0x25a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	42 c0       	rjmp	.+132    	; 0x25a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3c c0       	rjmp	.+120    	; 0x25a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3a c0       	rjmp	.+116    	; 0x25a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	36 c0       	rjmp	.+108    	; 0x25a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__vector_125>
     1f8:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__vector_126>
     1fc:	a9 0f       	add	r26, r25
     1fe:	ac 0f       	add	r26, r28
     200:	af 0f       	add	r26, r31
     202:	b2 0f       	add	r27, r18
     204:	b5 0f       	add	r27, r21
     206:	b8 0f       	add	r27, r24
     208:	bb 0f       	add	r27, r27
     20a:	fa 16       	cp	r15, r26
     20c:	0d 17       	cp	r16, r29
     20e:	20 17       	cp	r18, r16
     210:	33 17       	cp	r19, r19
     212:	46 17       	cp	r20, r22
     214:	59 17       	cp	r21, r25
     216:	6c 17       	cp	r22, r28

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e5       	ldi	r29, 0x5F	; 95
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e8 e7       	ldi	r30, 0x78	; 120
     230:	f0 e5       	ldi	r31, 0x50	; 80
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a8 3a       	cpi	r26, 0xA8	; 168
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	24 e2       	ldi	r18, 0x24	; 36
     244:	a8 ea       	ldi	r26, 0xA8	; 168
     246:	b1 e2       	ldi	r27, 0x21	; 33
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	af 39       	cpi	r26, 0x9F	; 159
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 12 18 	call	0x3024	; 0x3024 <main>
     256:	0c 94 3a 28 	jmp	0x5074	; 0x5074 <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
     25c:	04 c0       	rjmp	.+8      	; 0x266 <__portable_avr_delay_cycles+0xa>
     25e:	61 50       	subi	r22, 0x01	; 1
     260:	71 09       	sbc	r23, r1
     262:	81 09       	sbc	r24, r1
     264:	91 09       	sbc	r25, r1
     266:	61 15       	cp	r22, r1
     268:	71 05       	cpc	r23, r1
     26a:	81 05       	cpc	r24, r1
     26c:	91 05       	cpc	r25, r1
     26e:	b9 f7       	brne	.-18     	; 0x25e <__portable_avr_delay_cycles+0x2>
     270:	08 95       	ret

00000272 <rtc_get_time>:
     272:	80 e1       	ldi	r24, 0x10	; 16
     274:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     278:	e0 e2       	ldi	r30, 0x20	; 32
     27a:	f4 e0       	ldi	r31, 0x04	; 4
     27c:	81 81       	ldd	r24, Z+1	; 0x01
     27e:	84 fd       	sbrc	r24, 4
     280:	fd cf       	rjmp	.-6      	; 0x27c <rtc_get_time+0xa>
     282:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
     286:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     28a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     28e:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     292:	08 95       	ret

00000294 <rtc_set_callback>:
     294:	80 93 73 24 	sts	0x2473, r24	; 0x802473 <rtc_data>
     298:	90 93 74 24 	sts	0x2474, r25	; 0x802474 <rtc_data+0x1>
     29c:	08 95       	ret

0000029e <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
     2aa:	c0 ef       	ldi	r28, 0xF0	; 240
     2ac:	d0 e0       	ldi	r29, 0x00	; 0
     2ae:	88 81       	ld	r24, Y
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	80 ef       	ldi	r24, 0xF0	; 240
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 68 23 	call	0x46d0	; 0x46d0 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
     2be:	88 81       	ld	r24, Y
     2c0:	84 60       	ori	r24, 0x04	; 4
     2c2:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
     2c4:	69 ee       	ldi	r22, 0xE9	; 233
     2c6:	73 e0       	ldi	r23, 0x03	; 3
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	c7 df       	rcall	.-114    	; 0x25c <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
     2ce:	88 81       	ld	r24, Y
     2d0:	88 61       	ori	r24, 0x18	; 24
     2d2:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
     2d4:	e0 ef       	ldi	r30, 0xF0	; 240
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	83 ff       	sbrs	r24, 3
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
     2de:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     2e2:	e0 e2       	ldi	r30, 0x20	; 32
     2e4:	f4 e0       	ldi	r31, 0x04	; 4
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
     2e8:	80 fd       	sbrc	r24, 0
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
     2ec:	e0 e2       	ldi	r30, 0x20	; 32
     2ee:	f4 e0       	ldi	r31, 0x04	; 4
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
     2f4:	dc 01       	movw	r26, r24
     2f6:	80 87       	std	Z+8, r24	; 0x08
     2f8:	91 87       	std	Z+9, r25	; 0x09
     2fa:	a2 87       	std	Z+10, r26	; 0x0a
     2fc:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
     2fe:	14 82       	std	Z+4, r1	; 0x04
     300:	15 82       	std	Z+5, r1	; 0x05
     302:	16 82       	std	Z+6, r1	; 0x06
     304:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     306:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
     308:	80 fd       	sbrc	r24, 0
     30a:	fd cf       	rjmp	.-6      	; 0x306 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
     30c:	e0 e2       	ldi	r30, 0x20	; 32
     30e:	f4 e0       	ldi	r31, 0x04	; 4
     310:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     316:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
     318:	80 fd       	sbrc	r24, 0
     31a:	fd cf       	rjmp	.-6      	; 0x316 <rtc_init+0x78>
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	0b b6       	in	r0, 0x3b	; 59
     32e:	0f 92       	push	r0
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ef 93       	push	r30
     34a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
     34c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
     350:	c0 91 73 24 	lds	r28, 0x2473	; 0x802473 <rtc_data>
     354:	d0 91 74 24 	lds	r29, 0x2474	; 0x802474 <rtc_data+0x1>
     358:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
     35a:	19 f0       	breq	.+6      	; 0x362 <__vector_11+0x40>
     35c:	8a df       	rcall	.-236    	; 0x272 <rtc_get_time>
     35e:	fe 01       	movw	r30, r28
}
     360:	19 95       	eicall
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <__portable_avr_delay_cycles>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void start_twi_onboard()
{
     38c:	04 c0       	rjmp	.+8      	; 0x396 <__portable_avr_delay_cycles+0xa>
     38e:	61 50       	subi	r22, 0x01	; 1
     390:	71 09       	sbc	r23, r1
     392:	81 09       	sbc	r24, r1
     394:	91 09       	sbc	r25, r1
     396:	61 15       	cp	r22, r1
     398:	71 05       	cpc	r23, r1
     39a:	81 05       	cpc	r24, r1
     39c:	91 05       	cpc	r25, r1
     39e:	b9 f7       	brne	.-18     	; 0x38e <__portable_avr_delay_cycles+0x2>
     3a0:	08 95       	ret

000003a2 <twi_init>:
     3a2:	e0 e8       	ldi	r30, 0x80	; 128
     3a4:	f6 e0       	ldi	r31, 0x06	; 6
     3a6:	88 e3       	ldi	r24, 0x38	; 56
     3a8:	80 8b       	std	Z+16, r24	; 0x10
     3aa:	81 8b       	std	Z+17, r24	; 0x11
     3ac:	e0 e4       	ldi	r30, 0x40	; 64
     3ae:	f6 e0       	ldi	r31, 0x06	; 6
     3b0:	80 8b       	std	Z+16, r24	; 0x10
     3b2:	81 8b       	std	Z+17, r24	; 0x11
     3b4:	08 95       	ret

000003b6 <start_twi_lcd>:

}

/* TWI2 - LCD Port */
void start_twi_lcd()
{
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
	/* Read the version number */
	printf("DBG001\r\n");
     3be:	86 ee       	ldi	r24, 0xE6	; 230
     3c0:	90 e2       	ldi	r25, 0x20	; 32
     3c2:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
     3c6:	e6 e0       	ldi	r30, 0x06	; 6
     3c8:	f0 e2       	ldi	r31, 0x20	; 32
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	84 83       	std	Z+4, r24	; 0x04
     3d4:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
     3d6:	80 87       	std	Z+8, r24	; 0x08
     3d8:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
     3da:	41 e0       	ldi	r20, 0x01	; 1
     3dc:	bf 01       	movw	r22, r30
     3de:	80 e8       	ldi	r24, 0x80	; 128
     3e0:	94 e0       	ldi	r25, 0x04	; 4
     3e2:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
     3e6:	80 91 2f 23 	lds	r24, 0x232F	; 0x80232f <twi2_m_data>
     3ea:	80 93 37 23 	sts	0x2337, r24	; 0x802337 <g_twi2_lcd_version>
	printf("DBG002\r\n");
     3ee:	8e ee       	ldi	r24, 0xEE	; 238
     3f0:	90 e2       	ldi	r25, 0x20	; 32
     3f2:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>

	if (g_twi2_lcd_version >= 0x11) {
     3f6:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <g_twi2_lcd_version>
     3fa:	81 31       	cpi	r24, 0x11	; 17
     3fc:	38 f1       	brcs	.+78     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		printf("DBG011\r\n");
     3fe:	86 ef       	ldi	r24, 0xF6	; 246
     400:	90 e2       	ldi	r25, 0x20	; 32
     402:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
     406:	c6 e0       	ldi	r28, 0x06	; 6
     408:	d0 e2       	ldi	r29, 0x20	; 32
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
     40e:	80 e1       	ldi	r24, 0x10	; 16
     410:	80 93 2f 23 	sts	0x232F, r24	; 0x80232f <twi2_m_data>
		twi2_packet.length = 1;
     414:	01 e0       	ldi	r16, 0x01	; 1
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	08 87       	std	Y+8, r16	; 0x08
     41a:	19 87       	std	Y+9, r17	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	be 01       	movw	r22, r28
     420:	80 e8       	ldi	r24, 0x80	; 128
     422:	94 e0       	ldi	r25, 0x04	; 4
     424:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		printf("DBG012\r\n");
     428:	8e ef       	ldi	r24, 0xFE	; 254
     42a:	90 e2       	ldi	r25, 0x20	; 32
     42c:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>
		
		/* delay until ready */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	89 83       	std	Y+1, r24	; 0x01
		twi2_packet.length = 1;
     434:	08 87       	std	Y+8, r16	; 0x08
     436:	19 87       	std	Y+9, r17	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	be 01       	movw	r22, r28
     43c:	80 e8       	ldi	r24, 0x80	; 128
     43e:	94 e0       	ldi	r25, 0x04	; 4
     440:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <twi_master_transfer>
		twi_master_read(&TWI2_MASTER, &twi2_packet);
		printf("DBG013\r\n");
     444:	86 e0       	ldi	r24, 0x06	; 6
     446:	91 e2       	ldi	r25, 0x21	; 33
     448:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>
	}
}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	08 95       	ret

00000456 <twi_start>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     456:	60 e4       	ldi	r22, 0x40	; 64
     458:	85 e0       	ldi	r24, 0x05	; 5
     45a:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
#else
#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
     45e:	6a e1       	ldi	r22, 0x1A	; 26
     460:	70 e2       	ldi	r23, 0x20	; 32
     462:	80 ea       	ldi	r24, 0xA0	; 160
     464:	94 e0       	ldi	r25, 0x04	; 4
     466:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
     46a:	e0 ea       	ldi	r30, 0xA0	; 160
     46c:	f4 e0       	ldi	r31, 0x04	; 4
     46e:	81 81       	ldd	r24, Z+1	; 0x01
     470:	88 60       	ori	r24, 0x08	; 8
     472:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     474:	60 e4       	ldi	r22, 0x40	; 64
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
#else
#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
     47c:	61 e1       	ldi	r22, 0x11	; 17
     47e:	70 e2       	ldi	r23, 0x20	; 32
     480:	80 e8       	ldi	r24, 0x80	; 128
     482:	94 e0       	ldi	r25, 0x04	; 4
     484:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <twi_master_init>
     488:	e0 e8       	ldi	r30, 0x80	; 128
     48a:	f4 e0       	ldi	r31, 0x04	; 4
     48c:	81 81       	ldd	r24, Z+1	; 0x01
     48e:	88 60       	ori	r24, 0x08	; 8
     490:	81 83       	std	Z+1, r24	; 0x01
	twi_master_enable(&TWI2_MASTER);
#endif
#endif

	// Give Smart-LCD some time to be ready
	delay_ms(500);
     492:	61 ea       	ldi	r22, 0xA1	; 161
     494:	75 e2       	ldi	r23, 0x25	; 37
     496:	86 e2       	ldi	r24, 0x26	; 38
     498:	90 e0       	ldi	r25, 0x00	; 0

	/* Start each TWI channel devices */
	start_twi_onboard();
	start_twi_lcd();
     49a:	78 df       	rcall	.-272    	; 0x38c <__portable_avr_delay_cycles>
     49c:	8c cf       	rjmp	.-232    	; 0x3b6 <start_twi_lcd>
     49e:	08 95       	ret

000004a0 <task_twi_onboard>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void task_twi_onboard(uint32_t now, uint32_t last)
{
     4a0:	08 95       	ret

000004a2 <task_twi_lcd>:
	
}

/* TWI2 - LCD Port */	
void task_twi_lcd(uint32_t now, uint32_t last)
{
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
	if (g_twi2_lcd_version >= 0x11) {
     4ae:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <g_twi2_lcd_version>
     4b2:	81 31       	cpi	r24, 0x11	; 17
     4b4:	08 f4       	brcc	.+2      	; 0x4b8 <task_twi_lcd+0x16>
     4b6:	44 c0       	rjmp	.+136    	; 0x540 <task_twi_lcd+0x9e>
		printf("DBG021\r\n");
     4b8:	8e e0       	ldi	r24, 0x0E	; 14
     4ba:	91 e2       	ldi	r25, 0x21	; 33
     4bc:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
     4c0:	c6 e0       	ldi	r28, 0x06	; 6
     4c2:	d0 e2       	ldi	r29, 0x20	; 32
     4c4:	84 e1       	ldi	r24, 0x14	; 20
     4c6:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = GFX_PIXEL_SET;
     4c8:	0f e2       	ldi	r16, 0x2F	; 47
     4ca:	13 e2       	ldi	r17, 0x23	; 35
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	f8 01       	movw	r30, r16
     4d0:	80 83       	st	Z, r24
		twi2_packet.length = 1;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	88 87       	std	Y+8, r24	; 0x08
     4d8:	99 87       	std	Y+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	be 01       	movw	r22, r28
     4de:	80 e8       	ldi	r24, 0x80	; 128
     4e0:	94 e0       	ldi	r25, 0x04	; 4
     4e2:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		printf("DBG022\r\n");
     4e6:	86 e1       	ldi	r24, 0x16	; 22
     4e8:	91 e2       	ldi	r25, 0x21	; 33
     4ea:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>
		
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
     4ee:	80 e2       	ldi	r24, 0x20	; 32
     4f0:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 32;
     4f2:	f8 01       	movw	r30, r16
     4f4:	80 83       	st	Z, r24
		twi2_m_data[1] = 16;
     4f6:	80 e1       	ldi	r24, 0x10	; 16
     4f8:	81 83       	std	Z+1, r24	; 0x01
		twi2_packet.length = 2;
     4fa:	68 94       	set
     4fc:	ee 24       	eor	r14, r14
     4fe:	e1 f8       	bld	r14, 1
     500:	f1 2c       	mov	r15, r1
     502:	e8 86       	std	Y+8, r14	; 0x08
     504:	f9 86       	std	Y+9, r15	; 0x09
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	be 01       	movw	r22, r28
     50a:	80 e8       	ldi	r24, 0x80	; 128
     50c:	94 e0       	ldi	r25, 0x04	; 4
     50e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		printf("DBG023\r\n");
     512:	8e e1       	ldi	r24, 0x1E	; 30
     514:	91 e2       	ldi	r25, 0x21	; 33
     516:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>
		
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
     51a:	82 e3       	ldi	r24, 0x32	; 50
     51c:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 150;
     51e:	96 e9       	ldi	r25, 0x96	; 150
     520:	f8 01       	movw	r30, r16
     522:	90 83       	st	Z, r25
		twi2_m_data[1] = 50;
     524:	81 83       	std	Z+1, r24	; 0x01
		twi2_packet.length = 2;
     526:	e8 86       	std	Y+8, r14	; 0x08
     528:	f9 86       	std	Y+9, r15	; 0x09
     52a:	40 e0       	ldi	r20, 0x00	; 0
     52c:	be 01       	movw	r22, r28
     52e:	80 e8       	ldi	r24, 0x80	; 128
     530:	94 e0       	ldi	r25, 0x04	; 4
     532:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		printf("DBG024\r\n");
     536:	86 e2       	ldi	r24, 0x26	; 38
     538:	91 e2       	ldi	r25, 0x21	; 33
     53a:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>
     53e:	1f c0       	rjmp	.+62     	; 0x57e <task_twi_lcd+0xdc>
		twi2_packet.length = twi2_m_data[0] + 1;
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		printf("DBG026\r\n");
#endif

	} else if (g_twi2_lcd_version == 0x10) {
     540:	80 31       	cpi	r24, 0x10	; 16
     542:	e9 f4       	brne	.+58     	; 0x57e <task_twi_lcd+0xdc>
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
#if 1
		printf("DBG091\r\n");
     544:	8e e2       	ldi	r24, 0x2E	; 46
     546:	91 e2       	ldi	r25, 0x21	; 33
     548:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
     54c:	e6 e0       	ldi	r30, 0x06	; 6
     54e:	f0 e2       	ldi	r31, 0x20	; 32
     550:	84 e8       	ldi	r24, 0x84	; 132
     552:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[0] = 1;
     554:	af e2       	ldi	r26, 0x2F	; 47
     556:	b3 e2       	ldi	r27, 0x23	; 35
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	8c 93       	st	X, r24
		twi2_m_data[1] = 128;
     55c:	80 e8       	ldi	r24, 0x80	; 128
     55e:	11 96       	adiw	r26, 0x01	; 1
     560:	8c 93       	st	X, r24
		twi2_packet.length = 2;
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	80 87       	std	Z+8, r24	; 0x08
     568:	91 87       	std	Z+9, r25	; 0x09
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	bf 01       	movw	r22, r30
     56e:	80 e8       	ldi	r24, 0x80	; 128
     570:	94 e0       	ldi	r25, 0x04	; 4
     572:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		printf("DBG092\r\n");
     576:	86 e3       	ldi	r24, 0x36	; 54
     578:	91 e2       	ldi	r25, 0x21	; 33
     57a:	0e 94 21 24 	call	0x4842	; 0x4842 <puts>
#endif
	}
}
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	ff 90       	pop	r15
     588:	ef 90       	pop	r14
     58a:	08 95       	ret

0000058c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     58c:	08 95       	ret

0000058e <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     58e:	81 15       	cp	r24, r1
     590:	22 e0       	ldi	r18, 0x02	; 2
     592:	92 07       	cpc	r25, r18
     594:	69 f4       	brne	.+26     	; 0x5b0 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     596:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <adca_enable_count>
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	98 0f       	add	r25, r24
     59e:	90 93 a9 21 	sts	0x21A9, r25	; 0x8021a9 <adca_enable_count>
     5a2:	81 11       	cpse	r24, r1
     5a4:	14 c0       	rjmp	.+40     	; 0x5ce <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     5a6:	62 e0       	ldi	r22, 0x02	; 2
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <sysclk_enable_module>
     5ae:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     5b0:	80 34       	cpi	r24, 0x40	; 64
     5b2:	92 40       	sbci	r25, 0x02	; 2
     5b4:	61 f4       	brne	.+24     	; 0x5ce <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     5b6:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <__data_end>
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	98 0f       	add	r25, r24
     5be:	90 93 a8 21 	sts	0x21A8, r25	; 0x8021a8 <__data_end>
     5c2:	81 11       	cpse	r24, r1
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     5c6:	62 e0       	ldi	r22, 0x02	; 2
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <sysclk_enable_module>
     5ce:	08 95       	ret

000005d0 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     5d0:	81 15       	cp	r24, r1
     5d2:	22 e0       	ldi	r18, 0x02	; 2
     5d4:	92 07       	cpc	r25, r18
     5d6:	61 f4       	brne	.+24     	; 0x5f0 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     5d8:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <adca_enable_count>
     5dc:	81 50       	subi	r24, 0x01	; 1
     5de:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <adca_enable_count>
     5e2:	81 11       	cpse	r24, r1
     5e4:	13 c0       	rjmp	.+38     	; 0x60c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     5e6:	62 e0       	ldi	r22, 0x02	; 2
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <sysclk_disable_module>
     5ee:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     5f0:	80 34       	cpi	r24, 0x40	; 64
     5f2:	92 40       	sbci	r25, 0x02	; 2
     5f4:	59 f4       	brne	.+22     	; 0x60c <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     5f6:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <__data_end>
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <__data_end>
     600:	81 11       	cpse	r24, r1
     602:	04 c0       	rjmp	.+8      	; 0x60c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     604:	62 e0       	ldi	r22, 0x02	; 2
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <sysclk_disable_module>
     60c:	08 95       	ret

0000060e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     60e:	1f 92       	push	r1
     610:	0f 92       	push	r0
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	0f 92       	push	r0
     616:	11 24       	eor	r1, r1
     618:	0b b6       	in	r0, 0x3b	; 59
     61a:	0f 92       	push	r0
     61c:	2f 93       	push	r18
     61e:	3f 93       	push	r19
     620:	4f 93       	push	r20
     622:	5f 93       	push	r21
     624:	6f 93       	push	r22
     626:	7f 93       	push	r23
     628:	8f 93       	push	r24
     62a:	9f 93       	push	r25
     62c:	af 93       	push	r26
     62e:	bf 93       	push	r27
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     634:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     638:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     63c:	e0 91 77 24 	lds	r30, 0x2477	; 0x802477 <adca_callback>
     640:	f0 91 78 24 	lds	r31, 0x2478	; 0x802478 <adca_callback+0x1>
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	19 95       	eicall
}
     64c:	ff 91       	pop	r31
     64e:	ef 91       	pop	r30
     650:	bf 91       	pop	r27
     652:	af 91       	pop	r26
     654:	9f 91       	pop	r25
     656:	8f 91       	pop	r24
     658:	7f 91       	pop	r23
     65a:	6f 91       	pop	r22
     65c:	5f 91       	pop	r21
     65e:	4f 91       	pop	r20
     660:	3f 91       	pop	r19
     662:	2f 91       	pop	r18
     664:	0f 90       	pop	r0
     666:	0b be       	out	0x3b, r0	; 59
     668:	0f 90       	pop	r0
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	0f 90       	pop	r0
     66e:	1f 90       	pop	r1
     670:	18 95       	reti

00000672 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     672:	1f 92       	push	r1
     674:	0f 92       	push	r0
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	0f 92       	push	r0
     67a:	11 24       	eor	r1, r1
     67c:	0b b6       	in	r0, 0x3b	; 59
     67e:	0f 92       	push	r0
     680:	2f 93       	push	r18
     682:	3f 93       	push	r19
     684:	4f 93       	push	r20
     686:	5f 93       	push	r21
     688:	6f 93       	push	r22
     68a:	7f 93       	push	r23
     68c:	8f 93       	push	r24
     68e:	9f 93       	push	r25
     690:	af 93       	push	r26
     692:	bf 93       	push	r27
     694:	ef 93       	push	r30
     696:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     698:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     69c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     6a0:	e0 91 77 24 	lds	r30, 0x2477	; 0x802477 <adca_callback>
     6a4:	f0 91 78 24 	lds	r31, 0x2478	; 0x802478 <adca_callback+0x1>
     6a8:	62 e0       	ldi	r22, 0x02	; 2
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	19 95       	eicall
}
     6b0:	ff 91       	pop	r31
     6b2:	ef 91       	pop	r30
     6b4:	bf 91       	pop	r27
     6b6:	af 91       	pop	r26
     6b8:	9f 91       	pop	r25
     6ba:	8f 91       	pop	r24
     6bc:	7f 91       	pop	r23
     6be:	6f 91       	pop	r22
     6c0:	5f 91       	pop	r21
     6c2:	4f 91       	pop	r20
     6c4:	3f 91       	pop	r19
     6c6:	2f 91       	pop	r18
     6c8:	0f 90       	pop	r0
     6ca:	0b be       	out	0x3b, r0	; 59
     6cc:	0f 90       	pop	r0
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	0f 90       	pop	r0
     6d2:	1f 90       	pop	r1
     6d4:	18 95       	reti

000006d6 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     6d6:	1f 92       	push	r1
     6d8:	0f 92       	push	r0
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	0f 92       	push	r0
     6de:	11 24       	eor	r1, r1
     6e0:	0b b6       	in	r0, 0x3b	; 59
     6e2:	0f 92       	push	r0
     6e4:	2f 93       	push	r18
     6e6:	3f 93       	push	r19
     6e8:	4f 93       	push	r20
     6ea:	5f 93       	push	r21
     6ec:	6f 93       	push	r22
     6ee:	7f 93       	push	r23
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	af 93       	push	r26
     6f6:	bf 93       	push	r27
     6f8:	ef 93       	push	r30
     6fa:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     6fc:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     700:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     704:	e0 91 77 24 	lds	r30, 0x2477	; 0x802477 <adca_callback>
     708:	f0 91 78 24 	lds	r31, 0x2478	; 0x802478 <adca_callback+0x1>
     70c:	64 e0       	ldi	r22, 0x04	; 4
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	19 95       	eicall
}
     714:	ff 91       	pop	r31
     716:	ef 91       	pop	r30
     718:	bf 91       	pop	r27
     71a:	af 91       	pop	r26
     71c:	9f 91       	pop	r25
     71e:	8f 91       	pop	r24
     720:	7f 91       	pop	r23
     722:	6f 91       	pop	r22
     724:	5f 91       	pop	r21
     726:	4f 91       	pop	r20
     728:	3f 91       	pop	r19
     72a:	2f 91       	pop	r18
     72c:	0f 90       	pop	r0
     72e:	0b be       	out	0x3b, r0	; 59
     730:	0f 90       	pop	r0
     732:	0f be       	out	0x3f, r0	; 63
     734:	0f 90       	pop	r0
     736:	1f 90       	pop	r1
     738:	18 95       	reti

0000073a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     73a:	1f 92       	push	r1
     73c:	0f 92       	push	r0
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	0f 92       	push	r0
     742:	11 24       	eor	r1, r1
     744:	0b b6       	in	r0, 0x3b	; 59
     746:	0f 92       	push	r0
     748:	2f 93       	push	r18
     74a:	3f 93       	push	r19
     74c:	4f 93       	push	r20
     74e:	5f 93       	push	r21
     750:	6f 93       	push	r22
     752:	7f 93       	push	r23
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
     75c:	ef 93       	push	r30
     75e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     760:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     764:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     768:	e0 91 77 24 	lds	r30, 0x2477	; 0x802477 <adca_callback>
     76c:	f0 91 78 24 	lds	r31, 0x2478	; 0x802478 <adca_callback+0x1>
     770:	68 e0       	ldi	r22, 0x08	; 8
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	19 95       	eicall
}
     778:	ff 91       	pop	r31
     77a:	ef 91       	pop	r30
     77c:	bf 91       	pop	r27
     77e:	af 91       	pop	r26
     780:	9f 91       	pop	r25
     782:	8f 91       	pop	r24
     784:	7f 91       	pop	r23
     786:	6f 91       	pop	r22
     788:	5f 91       	pop	r21
     78a:	4f 91       	pop	r20
     78c:	3f 91       	pop	r19
     78e:	2f 91       	pop	r18
     790:	0f 90       	pop	r0
     792:	0b be       	out	0x3b, r0	; 59
     794:	0f 90       	pop	r0
     796:	0f be       	out	0x3f, r0	; 63
     798:	0f 90       	pop	r0
     79a:	1f 90       	pop	r1
     79c:	18 95       	reti

0000079e <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     79e:	1f 92       	push	r1
     7a0:	0f 92       	push	r0
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	0f 92       	push	r0
     7a6:	11 24       	eor	r1, r1
     7a8:	0b b6       	in	r0, 0x3b	; 59
     7aa:	0f 92       	push	r0
     7ac:	2f 93       	push	r18
     7ae:	3f 93       	push	r19
     7b0:	4f 93       	push	r20
     7b2:	5f 93       	push	r21
     7b4:	6f 93       	push	r22
     7b6:	7f 93       	push	r23
     7b8:	8f 93       	push	r24
     7ba:	9f 93       	push	r25
     7bc:	af 93       	push	r26
     7be:	bf 93       	push	r27
     7c0:	ef 93       	push	r30
     7c2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     7c4:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     7c8:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     7cc:	e0 91 75 24 	lds	r30, 0x2475	; 0x802475 <adcb_callback>
     7d0:	f0 91 76 24 	lds	r31, 0x2476	; 0x802476 <adcb_callback+0x1>
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	80 e4       	ldi	r24, 0x40	; 64
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	19 95       	eicall
}
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	bf 91       	pop	r27
     7e2:	af 91       	pop	r26
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	7f 91       	pop	r23
     7ea:	6f 91       	pop	r22
     7ec:	5f 91       	pop	r21
     7ee:	4f 91       	pop	r20
     7f0:	3f 91       	pop	r19
     7f2:	2f 91       	pop	r18
     7f4:	0f 90       	pop	r0
     7f6:	0b be       	out	0x3b, r0	; 59
     7f8:	0f 90       	pop	r0
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	0f 90       	pop	r0
     7fe:	1f 90       	pop	r1
     800:	18 95       	reti

00000802 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     802:	1f 92       	push	r1
     804:	0f 92       	push	r0
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	0f 92       	push	r0
     80a:	11 24       	eor	r1, r1
     80c:	0b b6       	in	r0, 0x3b	; 59
     80e:	0f 92       	push	r0
     810:	2f 93       	push	r18
     812:	3f 93       	push	r19
     814:	4f 93       	push	r20
     816:	5f 93       	push	r21
     818:	6f 93       	push	r22
     81a:	7f 93       	push	r23
     81c:	8f 93       	push	r24
     81e:	9f 93       	push	r25
     820:	af 93       	push	r26
     822:	bf 93       	push	r27
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     828:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     82c:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     830:	e0 91 75 24 	lds	r30, 0x2475	; 0x802475 <adcb_callback>
     834:	f0 91 76 24 	lds	r31, 0x2476	; 0x802476 <adcb_callback+0x1>
     838:	62 e0       	ldi	r22, 0x02	; 2
     83a:	80 e4       	ldi	r24, 0x40	; 64
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	19 95       	eicall
}
     840:	ff 91       	pop	r31
     842:	ef 91       	pop	r30
     844:	bf 91       	pop	r27
     846:	af 91       	pop	r26
     848:	9f 91       	pop	r25
     84a:	8f 91       	pop	r24
     84c:	7f 91       	pop	r23
     84e:	6f 91       	pop	r22
     850:	5f 91       	pop	r21
     852:	4f 91       	pop	r20
     854:	3f 91       	pop	r19
     856:	2f 91       	pop	r18
     858:	0f 90       	pop	r0
     85a:	0b be       	out	0x3b, r0	; 59
     85c:	0f 90       	pop	r0
     85e:	0f be       	out	0x3f, r0	; 63
     860:	0f 90       	pop	r0
     862:	1f 90       	pop	r1
     864:	18 95       	reti

00000866 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     866:	1f 92       	push	r1
     868:	0f 92       	push	r0
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	0f 92       	push	r0
     86e:	11 24       	eor	r1, r1
     870:	0b b6       	in	r0, 0x3b	; 59
     872:	0f 92       	push	r0
     874:	2f 93       	push	r18
     876:	3f 93       	push	r19
     878:	4f 93       	push	r20
     87a:	5f 93       	push	r21
     87c:	6f 93       	push	r22
     87e:	7f 93       	push	r23
     880:	8f 93       	push	r24
     882:	9f 93       	push	r25
     884:	af 93       	push	r26
     886:	bf 93       	push	r27
     888:	ef 93       	push	r30
     88a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     88c:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     890:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     894:	e0 91 75 24 	lds	r30, 0x2475	; 0x802475 <adcb_callback>
     898:	f0 91 76 24 	lds	r31, 0x2476	; 0x802476 <adcb_callback+0x1>
     89c:	64 e0       	ldi	r22, 0x04	; 4
     89e:	80 e4       	ldi	r24, 0x40	; 64
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	19 95       	eicall
}
     8a4:	ff 91       	pop	r31
     8a6:	ef 91       	pop	r30
     8a8:	bf 91       	pop	r27
     8aa:	af 91       	pop	r26
     8ac:	9f 91       	pop	r25
     8ae:	8f 91       	pop	r24
     8b0:	7f 91       	pop	r23
     8b2:	6f 91       	pop	r22
     8b4:	5f 91       	pop	r21
     8b6:	4f 91       	pop	r20
     8b8:	3f 91       	pop	r19
     8ba:	2f 91       	pop	r18
     8bc:	0f 90       	pop	r0
     8be:	0b be       	out	0x3b, r0	; 59
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     8ca:	1f 92       	push	r1
     8cc:	0f 92       	push	r0
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	0f 92       	push	r0
     8d2:	11 24       	eor	r1, r1
     8d4:	0b b6       	in	r0, 0x3b	; 59
     8d6:	0f 92       	push	r0
     8d8:	2f 93       	push	r18
     8da:	3f 93       	push	r19
     8dc:	4f 93       	push	r20
     8de:	5f 93       	push	r21
     8e0:	6f 93       	push	r22
     8e2:	7f 93       	push	r23
     8e4:	8f 93       	push	r24
     8e6:	9f 93       	push	r25
     8e8:	af 93       	push	r26
     8ea:	bf 93       	push	r27
     8ec:	ef 93       	push	r30
     8ee:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     8f0:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     8f4:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     8f8:	e0 91 75 24 	lds	r30, 0x2475	; 0x802475 <adcb_callback>
     8fc:	f0 91 76 24 	lds	r31, 0x2476	; 0x802476 <adcb_callback+0x1>
     900:	68 e0       	ldi	r22, 0x08	; 8
     902:	80 e4       	ldi	r24, 0x40	; 64
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	19 95       	eicall
}
     908:	ff 91       	pop	r31
     90a:	ef 91       	pop	r30
     90c:	bf 91       	pop	r27
     90e:	af 91       	pop	r26
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	7f 91       	pop	r23
     916:	6f 91       	pop	r22
     918:	5f 91       	pop	r21
     91a:	4f 91       	pop	r20
     91c:	3f 91       	pop	r19
     91e:	2f 91       	pop	r18
     920:	0f 90       	pop	r0
     922:	0b be       	out	0x3b, r0	; 59
     924:	0f 90       	pop	r0
     926:	0f be       	out	0x3f, r0	; 63
     928:	0f 90       	pop	r0
     92a:	1f 90       	pop	r1
     92c:	18 95       	reti

0000092e <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	1f 92       	push	r1
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	8c 01       	movw	r16, r24
     948:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     94a:	81 15       	cp	r24, r1
     94c:	22 e0       	ldi	r18, 0x02	; 2
     94e:	92 07       	cpc	r25, r18
     950:	81 f4       	brne	.+32     	; 0x972 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     952:	61 e2       	ldi	r22, 0x21	; 33
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     95c:	c8 2e       	mov	r12, r24
     95e:	d1 2c       	mov	r13, r1
     960:	60 e2       	ldi	r22, 0x20	; 32
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     96a:	dc 2c       	mov	r13, r12
     96c:	cc 24       	eor	r12, r12
     96e:	c8 2a       	or	r12, r24
     970:	12 c0       	rjmp	.+36     	; 0x996 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     972:	80 34       	cpi	r24, 0x40	; 64
     974:	92 40       	sbci	r25, 0x02	; 2
     976:	d1 f5       	brne	.+116    	; 0x9ec <adc_write_configuration+0xbe>
     978:	65 e2       	ldi	r22, 0x25	; 37
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     982:	c8 2e       	mov	r12, r24
     984:	d1 2c       	mov	r13, r1
     986:	64 e2       	ldi	r22, 0x24	; 36
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     990:	dc 2c       	mov	r13, r12
     992:	cc 24       	eor	r12, r12
     994:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     996:	8f b7       	in	r24, 0x3f	; 63
     998:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     99a:	f8 94       	cli
	return flags;
     99c:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     99e:	c8 01       	movw	r24, r16
     9a0:	f6 dd       	rcall	.-1044   	; 0x58e <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     9a2:	f8 01       	movw	r30, r16
     9a4:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	90 83       	st	Z, r25
	adc->CAL = cal;
     9aa:	c4 86       	std	Z+12, r12	; 0x0c
     9ac:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     9ae:	f7 01       	movw	r30, r14
     9b0:	25 81       	ldd	r18, Z+5	; 0x05
     9b2:	36 81       	ldd	r19, Z+6	; 0x06
     9b4:	f8 01       	movw	r30, r16
     9b6:	20 8f       	std	Z+24, r18	; 0x18
     9b8:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     9ba:	f7 01       	movw	r30, r14
     9bc:	92 81       	ldd	r25, Z+2	; 0x02
     9be:	f8 01       	movw	r30, r16
     9c0:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     9c2:	f7 01       	movw	r30, r14
     9c4:	94 81       	ldd	r25, Z+4	; 0x04
     9c6:	f8 01       	movw	r30, r16
     9c8:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     9ca:	f7 01       	movw	r30, r14
     9cc:	93 81       	ldd	r25, Z+3	; 0x03
     9ce:	f8 01       	movw	r30, r16
     9d0:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     9d2:	f7 01       	movw	r30, r14
     9d4:	91 81       	ldd	r25, Z+1	; 0x01
     9d6:	f8 01       	movw	r30, r16
     9d8:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     9da:	81 70       	andi	r24, 0x01	; 1
     9dc:	f7 01       	movw	r30, r14
     9de:	90 81       	ld	r25, Z
     9e0:	89 2b       	or	r24, r25
     9e2:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     9e4:	80 83       	st	Z, r24
     9e6:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9e8:	f3 dd       	rcall	.-1050   	; 0x5d0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     9ea:	bf be       	out	0x3f, r11	; 63
     9ec:	0f 90       	pop	r0
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	08 95       	ret

00000a02 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	1f 92       	push	r1
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	8c 01       	movw	r16, r24
     a18:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a1a:	8f b7       	in	r24, 0x3f	; 63
     a1c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     a1e:	f8 94       	cli
	return flags;
     a20:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     a22:	c8 01       	movw	r24, r16
     a24:	b4 dd       	rcall	.-1176   	; 0x58e <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     a26:	f8 01       	movw	r30, r16
     a28:	80 81       	ld	r24, Z
     a2a:	80 7c       	andi	r24, 0xC0	; 192
     a2c:	f7 01       	movw	r30, r14
     a2e:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     a30:	f8 01       	movw	r30, r16
     a32:	80 8d       	ldd	r24, Z+24	; 0x18
     a34:	91 8d       	ldd	r25, Z+25	; 0x19
     a36:	f7 01       	movw	r30, r14
     a38:	85 83       	std	Z+5, r24	; 0x05
     a3a:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     a3c:	f8 01       	movw	r30, r16
     a3e:	82 81       	ldd	r24, Z+2	; 0x02
     a40:	f7 01       	movw	r30, r14
     a42:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     a44:	f8 01       	movw	r30, r16
     a46:	84 81       	ldd	r24, Z+4	; 0x04
     a48:	f7 01       	movw	r30, r14
     a4a:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     a4c:	f8 01       	movw	r30, r16
     a4e:	83 81       	ldd	r24, Z+3	; 0x03
     a50:	f7 01       	movw	r30, r14
     a52:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     a54:	f8 01       	movw	r30, r16
     a56:	81 81       	ldd	r24, Z+1	; 0x01
     a58:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     a5a:	81 83       	std	Z+1, r24	; 0x01
     a5c:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a5e:	b8 dd       	rcall	.-1168   	; 0x5d0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     a60:	df be       	out	0x3f, r13	; 63
     a62:	0f 90       	pop	r0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	08 95       	ret

00000a74 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	1f 92       	push	r1
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	6c 01       	movw	r12, r24
     a90:	b6 2e       	mov	r11, r22
     a92:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     a94:	86 2f       	mov	r24, r22
     a96:	83 70       	andi	r24, 0x03	; 3
     a98:	29 f4       	brne	.+10     	; 0xaa4 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     a9a:	96 2f       	mov	r25, r22
     a9c:	96 95       	lsr	r25
     a9e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     aa4:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     aa6:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     aa8:	90 ff       	sbrs	r25, 0
		index++;
     aaa:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     aac:	86 01       	movw	r16, r12
     aae:	00 5e       	subi	r16, 0xE0	; 224
     ab0:	1f 4f       	sbci	r17, 0xFF	; 255
     ab2:	98 e0       	ldi	r25, 0x08	; 8
     ab4:	89 9f       	mul	r24, r25
     ab6:	00 0d       	add	r16, r0
     ab8:	11 1d       	adc	r17, r1
     aba:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     abc:	8f b7       	in	r24, 0x3f	; 63
     abe:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ac0:	f8 94       	cli
	return flags;
     ac2:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     ac4:	c6 01       	movw	r24, r12
     ac6:	63 dd       	rcall	.-1338   	; 0x58e <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     ac8:	f7 01       	movw	r30, r14
     aca:	80 81       	ld	r24, Z
     acc:	f8 01       	movw	r30, r16
     ace:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     ad0:	f7 01       	movw	r30, r14
     ad2:	82 81       	ldd	r24, Z+2	; 0x02
     ad4:	f8 01       	movw	r30, r16
     ad6:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     ad8:	f7 01       	movw	r30, r14
     ada:	81 81       	ldd	r24, Z+1	; 0x01
     adc:	f8 01       	movw	r30, r16
     ade:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     ae0:	b0 fe       	sbrs	r11, 0
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     ae4:	f7 01       	movw	r30, r14
     ae6:	83 81       	ldd	r24, Z+3	; 0x03
     ae8:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     aea:	86 83       	std	Z+6, r24	; 0x06
     aec:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     aee:	70 dd       	rcall	.-1312   	; 0x5d0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     af0:	af be       	out	0x3f, r10	; 63
     af2:	0f 90       	pop	r0
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	08 95       	ret

00000b0a <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     b0a:	af 92       	push	r10
     b0c:	bf 92       	push	r11
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	1f 92       	push	r1
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	6c 01       	movw	r12, r24
     b26:	b6 2e       	mov	r11, r22
     b28:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     b2a:	86 2f       	mov	r24, r22
     b2c:	83 70       	andi	r24, 0x03	; 3
     b2e:	29 f4       	brne	.+10     	; 0xb3a <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     b30:	96 2f       	mov	r25, r22
     b32:	96 95       	lsr	r25
     b34:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     b3a:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     b3e:	90 ff       	sbrs	r25, 0
		index++;
     b40:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     b42:	86 01       	movw	r16, r12
     b44:	00 5e       	subi	r16, 0xE0	; 224
     b46:	1f 4f       	sbci	r17, 0xFF	; 255
     b48:	98 e0       	ldi	r25, 0x08	; 8
     b4a:	89 9f       	mul	r24, r25
     b4c:	00 0d       	add	r16, r0
     b4e:	11 1d       	adc	r17, r1
     b50:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b52:	8f b7       	in	r24, 0x3f	; 63
     b54:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b56:	f8 94       	cli
	return flags;
     b58:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     b5a:	c6 01       	movw	r24, r12
     b5c:	18 dd       	rcall	.-1488   	; 0x58e <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     b5e:	f8 01       	movw	r30, r16
     b60:	80 81       	ld	r24, Z
     b62:	f7 01       	movw	r30, r14
     b64:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     b66:	f8 01       	movw	r30, r16
     b68:	82 81       	ldd	r24, Z+2	; 0x02
     b6a:	f7 01       	movw	r30, r14
     b6c:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     b6e:	f8 01       	movw	r30, r16
     b70:	81 81       	ldd	r24, Z+1	; 0x01
     b72:	f7 01       	movw	r30, r14
     b74:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     b76:	b0 fe       	sbrs	r11, 0
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     b7a:	f8 01       	movw	r30, r16
     b7c:	86 81       	ldd	r24, Z+6	; 0x06
     b7e:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     b80:	83 83       	std	Z+3, r24	; 0x03
     b82:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b84:	25 dd       	rcall	.-1462   	; 0x5d0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     b86:	af be       	out	0x3f, r10	; 63
     b88:	0f 90       	pop	r0
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	08 95       	ret

00000ba0 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
     ba0:	80 32       	cpi	r24, 0x20	; 32
     ba2:	93 40       	sbci	r25, 0x03	; 3
     ba4:	61 f4       	brne	.+24     	; 0xbbe <dac_enable_clock+0x1e>
     ba6:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <dacb_enable_count>
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	98 0f       	add	r25, r24
     bae:	90 93 aa 21 	sts	0x21AA, r25	; 0x8021aa <dacb_enable_count>
     bb2:	81 11       	cpse	r24, r1
     bb4:	04 c0       	rjmp	.+8      	; 0xbbe <dac_enable_clock+0x1e>
     bb6:	64 e0       	ldi	r22, 0x04	; 4
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <sysclk_enable_module>
     bbe:	08 95       	ret

00000bc0 <dac_disable_clock>:
     bc0:	80 32       	cpi	r24, 0x20	; 32
     bc2:	93 40       	sbci	r25, 0x03	; 3
     bc4:	59 f4       	brne	.+22     	; 0xbdc <dac_disable_clock+0x1c>
     bc6:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <dacb_enable_count>
     bca:	81 50       	subi	r24, 0x01	; 1
     bcc:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <dacb_enable_count>
     bd0:	81 11       	cpse	r24, r1
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <dac_disable_clock+0x1c>
     bd4:	64 e0       	ldi	r22, 0x04	; 4
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <sysclk_disable_module>
     bdc:	08 95       	ret

00000bde <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
     bde:	9f 92       	push	r9
     be0:	af 92       	push	r10
     be2:	bf 92       	push	r11
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	1f 92       	push	r1
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
     bfa:	80 32       	cpi	r24, 0x20	; 32
     bfc:	23 e0       	ldi	r18, 0x03	; 3
     bfe:	92 07       	cpc	r25, r18
     c00:	09 f0       	breq	.+2      	; 0xc04 <dac_write_configuration+0x26>
     c02:	3c c0       	rjmp	.+120    	; 0xc7c <dac_write_configuration+0x9e>
     c04:	7b 01       	movw	r14, r22
     c06:	8c 01       	movw	r16, r24
     c08:	63 e3       	ldi	r22, 0x33	; 51
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
     c12:	98 2e       	mov	r9, r24
     c14:	62 e3       	ldi	r22, 0x32	; 50
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
     c1e:	a8 2e       	mov	r10, r24
     c20:	67 e3       	ldi	r22, 0x37	; 55
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
     c2a:	b8 2e       	mov	r11, r24
     c2c:	66 e3       	ldi	r22, 0x36	; 54
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
     c36:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c38:	8f b7       	in	r24, 0x3f	; 63
     c3a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c3c:	f8 94       	cli
	return flags;
     c3e:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     c40:	c8 01       	movw	r24, r16
     c42:	ae df       	rcall	.-164    	; 0xba0 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
     c44:	f8 01       	movw	r30, r16
     c46:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
     c48:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
     c4a:	f7 01       	movw	r30, r14
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
     c4e:	f8 01       	movw	r30, r16
     c50:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
     c52:	f7 01       	movw	r30, r14
     c54:	92 81       	ldd	r25, Z+2	; 0x02
     c56:	f8 01       	movw	r30, r16
     c58:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
     c5a:	f7 01       	movw	r30, r14
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	f8 01       	movw	r30, r16
     c60:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
     c62:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
     c64:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
     c66:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
     c68:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
     c6a:	81 70       	andi	r24, 0x01	; 1
     c6c:	f7 01       	movw	r30, r14
     c6e:	90 81       	ld	r25, Z
     c70:	89 2b       	or	r24, r25
     c72:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
     c74:	80 83       	st	Z, r24
     c76:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c78:	a3 df       	rcall	.-186    	; 0xbc0 <dac_disable_clock>
	cpu_irq_restore(flags);
}
     c7a:	df be       	out	0x3f, r13	; 63
     c7c:	0f 90       	pop	r0
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
     c8e:	bf 90       	pop	r11
     c90:	af 90       	pop	r10
     c92:	9f 90       	pop	r9
     c94:	08 95       	ret

00000c96 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
     c96:	df 92       	push	r13
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	1f 92       	push	r1
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	8c 01       	movw	r16, r24
     cac:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cae:	8f b7       	in	r24, 0x3f	; 63
     cb0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     cb2:	f8 94       	cli
	return flags;
     cb4:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     cb6:	c8 01       	movw	r24, r16
     cb8:	73 df       	rcall	.-282    	; 0xba0 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
     cba:	f8 01       	movw	r30, r16
     cbc:	80 81       	ld	r24, Z
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	f7 01       	movw	r30, r14
     cc2:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
     cc4:	f8 01       	movw	r30, r16
     cc6:	81 81       	ldd	r24, Z+1	; 0x01
     cc8:	f7 01       	movw	r30, r14
     cca:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
     ccc:	f8 01       	movw	r30, r16
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	f7 01       	movw	r30, r14
     cd2:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
     cd4:	f8 01       	movw	r30, r16
     cd6:	83 81       	ldd	r24, Z+3	; 0x03
     cd8:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
     cda:	83 83       	std	Z+3, r24	; 0x03
     cdc:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cde:	70 df       	rcall	.-288    	; 0xbc0 <dac_disable_clock>
	cpu_irq_restore(flags);
}
     ce0:	df be       	out	0x3f, r13	; 63
     ce2:	0f 90       	pop	r0
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	08 95       	ret

00000cf4 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     cf4:	1f 92       	push	r1
     cf6:	0f 92       	push	r0
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	0f 92       	push	r0
     cfc:	11 24       	eor	r1, r1
     cfe:	0b b6       	in	r0, 0x3b	; 59
     d00:	0f 92       	push	r0
     d02:	2f 93       	push	r18
     d04:	3f 93       	push	r19
     d06:	4f 93       	push	r20
     d08:	5f 93       	push	r21
     d0a:	6f 93       	push	r22
     d0c:	7f 93       	push	r23
     d0e:	8f 93       	push	r24
     d10:	9f 93       	push	r25
     d12:	af 93       	push	r26
     d14:	bf 93       	push	r27
     d16:	ef 93       	push	r30
     d18:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     d1a:	e0 91 f1 21 	lds	r30, 0x21F1	; 0x8021f1 <tc_tcc0_ovf_callback>
     d1e:	f0 91 f2 21 	lds	r31, 0x21F2	; 0x8021f2 <tc_tcc0_ovf_callback+0x1>
     d22:	30 97       	sbiw	r30, 0x00	; 0
     d24:	09 f0       	breq	.+2      	; 0xd28 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     d26:	19 95       	eicall
	}
}
     d28:	ff 91       	pop	r31
     d2a:	ef 91       	pop	r30
     d2c:	bf 91       	pop	r27
     d2e:	af 91       	pop	r26
     d30:	9f 91       	pop	r25
     d32:	8f 91       	pop	r24
     d34:	7f 91       	pop	r23
     d36:	6f 91       	pop	r22
     d38:	5f 91       	pop	r21
     d3a:	4f 91       	pop	r20
     d3c:	3f 91       	pop	r19
     d3e:	2f 91       	pop	r18
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	5f 93       	push	r21
     d64:	6f 93       	push	r22
     d66:	7f 93       	push	r23
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	af 93       	push	r26
     d6e:	bf 93       	push	r27
     d70:	ef 93       	push	r30
     d72:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     d74:	e0 91 ef 21 	lds	r30, 0x21EF	; 0x8021ef <tc_tcc0_err_callback>
     d78:	f0 91 f0 21 	lds	r31, 0x21F0	; 0x8021f0 <tc_tcc0_err_callback+0x1>
     d7c:	30 97       	sbiw	r30, 0x00	; 0
     d7e:	09 f0       	breq	.+2      	; 0xd82 <__vector_15+0x34>
		tc_tcc0_err_callback();
     d80:	19 95       	eicall
	}
}
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	7f 91       	pop	r23
     d90:	6f 91       	pop	r22
     d92:	5f 91       	pop	r21
     d94:	4f 91       	pop	r20
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0b be       	out	0x3b, r0	; 59
     d9e:	0f 90       	pop	r0
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	0f 90       	pop	r0
     da4:	1f 90       	pop	r1
     da6:	18 95       	reti

00000da8 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     da8:	1f 92       	push	r1
     daa:	0f 92       	push	r0
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	0f 92       	push	r0
     db0:	11 24       	eor	r1, r1
     db2:	0b b6       	in	r0, 0x3b	; 59
     db4:	0f 92       	push	r0
     db6:	2f 93       	push	r18
     db8:	3f 93       	push	r19
     dba:	4f 93       	push	r20
     dbc:	5f 93       	push	r21
     dbe:	6f 93       	push	r22
     dc0:	7f 93       	push	r23
     dc2:	8f 93       	push	r24
     dc4:	9f 93       	push	r25
     dc6:	af 93       	push	r26
     dc8:	bf 93       	push	r27
     dca:	ef 93       	push	r30
     dcc:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     dce:	e0 91 ed 21 	lds	r30, 0x21ED	; 0x8021ed <tc_tcc0_cca_callback>
     dd2:	f0 91 ee 21 	lds	r31, 0x21EE	; 0x8021ee <tc_tcc0_cca_callback+0x1>
     dd6:	30 97       	sbiw	r30, 0x00	; 0
     dd8:	09 f0       	breq	.+2      	; 0xddc <__vector_16+0x34>
		tc_tcc0_cca_callback();
     dda:	19 95       	eicall
	}
}
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0b be       	out	0x3b, r0	; 59
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0
     dfe:	1f 90       	pop	r1
     e00:	18 95       	reti

00000e02 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     e02:	1f 92       	push	r1
     e04:	0f 92       	push	r0
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	0f 92       	push	r0
     e0a:	11 24       	eor	r1, r1
     e0c:	0b b6       	in	r0, 0x3b	; 59
     e0e:	0f 92       	push	r0
     e10:	2f 93       	push	r18
     e12:	3f 93       	push	r19
     e14:	4f 93       	push	r20
     e16:	5f 93       	push	r21
     e18:	6f 93       	push	r22
     e1a:	7f 93       	push	r23
     e1c:	8f 93       	push	r24
     e1e:	9f 93       	push	r25
     e20:	af 93       	push	r26
     e22:	bf 93       	push	r27
     e24:	ef 93       	push	r30
     e26:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     e28:	e0 91 eb 21 	lds	r30, 0x21EB	; 0x8021eb <tc_tcc0_ccb_callback>
     e2c:	f0 91 ec 21 	lds	r31, 0x21EC	; 0x8021ec <tc_tcc0_ccb_callback+0x1>
     e30:	30 97       	sbiw	r30, 0x00	; 0
     e32:	09 f0       	breq	.+2      	; 0xe36 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     e34:	19 95       	eicall
	}
}
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	bf 91       	pop	r27
     e3c:	af 91       	pop	r26
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	7f 91       	pop	r23
     e44:	6f 91       	pop	r22
     e46:	5f 91       	pop	r21
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	0f 90       	pop	r0
     e50:	0b be       	out	0x3b, r0	; 59
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	0b b6       	in	r0, 0x3b	; 59
     e68:	0f 92       	push	r0
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     e82:	e0 91 e9 21 	lds	r30, 0x21E9	; 0x8021e9 <tc_tcc0_ccc_callback>
     e86:	f0 91 ea 21 	lds	r31, 0x21EA	; 0x8021ea <tc_tcc0_ccc_callback+0x1>
     e8a:	30 97       	sbiw	r30, 0x00	; 0
     e8c:	09 f0       	breq	.+2      	; 0xe90 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     e8e:	19 95       	eicall
	}
}
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	bf 91       	pop	r27
     e96:	af 91       	pop	r26
     e98:	9f 91       	pop	r25
     e9a:	8f 91       	pop	r24
     e9c:	7f 91       	pop	r23
     e9e:	6f 91       	pop	r22
     ea0:	5f 91       	pop	r21
     ea2:	4f 91       	pop	r20
     ea4:	3f 91       	pop	r19
     ea6:	2f 91       	pop	r18
     ea8:	0f 90       	pop	r0
     eaa:	0b be       	out	0x3b, r0	; 59
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	0f 90       	pop	r0
     eb2:	1f 90       	pop	r1
     eb4:	18 95       	reti

00000eb6 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     eb6:	1f 92       	push	r1
     eb8:	0f 92       	push	r0
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	0f 92       	push	r0
     ebe:	11 24       	eor	r1, r1
     ec0:	0b b6       	in	r0, 0x3b	; 59
     ec2:	0f 92       	push	r0
     ec4:	2f 93       	push	r18
     ec6:	3f 93       	push	r19
     ec8:	4f 93       	push	r20
     eca:	5f 93       	push	r21
     ecc:	6f 93       	push	r22
     ece:	7f 93       	push	r23
     ed0:	8f 93       	push	r24
     ed2:	9f 93       	push	r25
     ed4:	af 93       	push	r26
     ed6:	bf 93       	push	r27
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     edc:	e0 91 e7 21 	lds	r30, 0x21E7	; 0x8021e7 <tc_tcc0_ccd_callback>
     ee0:	f0 91 e8 21 	lds	r31, 0x21E8	; 0x8021e8 <tc_tcc0_ccd_callback+0x1>
     ee4:	30 97       	sbiw	r30, 0x00	; 0
     ee6:	09 f0       	breq	.+2      	; 0xeea <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     ee8:	19 95       	eicall
	}
}
     eea:	ff 91       	pop	r31
     eec:	ef 91       	pop	r30
     eee:	bf 91       	pop	r27
     ef0:	af 91       	pop	r26
     ef2:	9f 91       	pop	r25
     ef4:	8f 91       	pop	r24
     ef6:	7f 91       	pop	r23
     ef8:	6f 91       	pop	r22
     efa:	5f 91       	pop	r21
     efc:	4f 91       	pop	r20
     efe:	3f 91       	pop	r19
     f00:	2f 91       	pop	r18
     f02:	0f 90       	pop	r0
     f04:	0b be       	out	0x3b, r0	; 59
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	0b b6       	in	r0, 0x3b	; 59
     f1c:	0f 92       	push	r0
     f1e:	2f 93       	push	r18
     f20:	3f 93       	push	r19
     f22:	4f 93       	push	r20
     f24:	5f 93       	push	r21
     f26:	6f 93       	push	r22
     f28:	7f 93       	push	r23
     f2a:	8f 93       	push	r24
     f2c:	9f 93       	push	r25
     f2e:	af 93       	push	r26
     f30:	bf 93       	push	r27
     f32:	ef 93       	push	r30
     f34:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     f36:	e0 91 e5 21 	lds	r30, 0x21E5	; 0x8021e5 <tc_tcc1_ovf_callback>
     f3a:	f0 91 e6 21 	lds	r31, 0x21E6	; 0x8021e6 <tc_tcc1_ovf_callback+0x1>
     f3e:	30 97       	sbiw	r30, 0x00	; 0
     f40:	09 f0       	breq	.+2      	; 0xf44 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     f42:	19 95       	eicall
	}
}
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	bf 91       	pop	r27
     f4a:	af 91       	pop	r26
     f4c:	9f 91       	pop	r25
     f4e:	8f 91       	pop	r24
     f50:	7f 91       	pop	r23
     f52:	6f 91       	pop	r22
     f54:	5f 91       	pop	r21
     f56:	4f 91       	pop	r20
     f58:	3f 91       	pop	r19
     f5a:	2f 91       	pop	r18
     f5c:	0f 90       	pop	r0
     f5e:	0b be       	out	0x3b, r0	; 59
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	0b b6       	in	r0, 0x3b	; 59
     f76:	0f 92       	push	r0
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	ef 93       	push	r30
     f8e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     f90:	e0 91 e3 21 	lds	r30, 0x21E3	; 0x8021e3 <tc_tcc1_err_callback>
     f94:	f0 91 e4 21 	lds	r31, 0x21E4	; 0x8021e4 <tc_tcc1_err_callback+0x1>
     f98:	30 97       	sbiw	r30, 0x00	; 0
     f9a:	09 f0       	breq	.+2      	; 0xf9e <__vector_21+0x34>
		tc_tcc1_err_callback();
     f9c:	19 95       	eicall
	}
}
     f9e:	ff 91       	pop	r31
     fa0:	ef 91       	pop	r30
     fa2:	bf 91       	pop	r27
     fa4:	af 91       	pop	r26
     fa6:	9f 91       	pop	r25
     fa8:	8f 91       	pop	r24
     faa:	7f 91       	pop	r23
     fac:	6f 91       	pop	r22
     fae:	5f 91       	pop	r21
     fb0:	4f 91       	pop	r20
     fb2:	3f 91       	pop	r19
     fb4:	2f 91       	pop	r18
     fb6:	0f 90       	pop	r0
     fb8:	0b be       	out	0x3b, r0	; 59
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     fc4:	1f 92       	push	r1
     fc6:	0f 92       	push	r0
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	0f 92       	push	r0
     fcc:	11 24       	eor	r1, r1
     fce:	0b b6       	in	r0, 0x3b	; 59
     fd0:	0f 92       	push	r0
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     fea:	e0 91 e1 21 	lds	r30, 0x21E1	; 0x8021e1 <tc_tcc1_cca_callback>
     fee:	f0 91 e2 21 	lds	r31, 0x21E2	; 0x8021e2 <tc_tcc1_cca_callback+0x1>
     ff2:	30 97       	sbiw	r30, 0x00	; 0
     ff4:	09 f0       	breq	.+2      	; 0xff8 <__vector_22+0x34>
		tc_tcc1_cca_callback();
     ff6:	19 95       	eicall
	}
}
     ff8:	ff 91       	pop	r31
     ffa:	ef 91       	pop	r30
     ffc:	bf 91       	pop	r27
     ffe:	af 91       	pop	r26
    1000:	9f 91       	pop	r25
    1002:	8f 91       	pop	r24
    1004:	7f 91       	pop	r23
    1006:	6f 91       	pop	r22
    1008:	5f 91       	pop	r21
    100a:	4f 91       	pop	r20
    100c:	3f 91       	pop	r19
    100e:	2f 91       	pop	r18
    1010:	0f 90       	pop	r0
    1012:	0b be       	out	0x3b, r0	; 59
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0
    101a:	1f 90       	pop	r1
    101c:	18 95       	reti

0000101e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    101e:	1f 92       	push	r1
    1020:	0f 92       	push	r0
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	0f 92       	push	r0
    1026:	11 24       	eor	r1, r1
    1028:	0b b6       	in	r0, 0x3b	; 59
    102a:	0f 92       	push	r0
    102c:	2f 93       	push	r18
    102e:	3f 93       	push	r19
    1030:	4f 93       	push	r20
    1032:	5f 93       	push	r21
    1034:	6f 93       	push	r22
    1036:	7f 93       	push	r23
    1038:	8f 93       	push	r24
    103a:	9f 93       	push	r25
    103c:	af 93       	push	r26
    103e:	bf 93       	push	r27
    1040:	ef 93       	push	r30
    1042:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    1044:	e0 91 df 21 	lds	r30, 0x21DF	; 0x8021df <tc_tcc1_ccb_callback>
    1048:	f0 91 e0 21 	lds	r31, 0x21E0	; 0x8021e0 <tc_tcc1_ccb_callback+0x1>
    104c:	30 97       	sbiw	r30, 0x00	; 0
    104e:	09 f0       	breq	.+2      	; 0x1052 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    1050:	19 95       	eicall
	}
}
    1052:	ff 91       	pop	r31
    1054:	ef 91       	pop	r30
    1056:	bf 91       	pop	r27
    1058:	af 91       	pop	r26
    105a:	9f 91       	pop	r25
    105c:	8f 91       	pop	r24
    105e:	7f 91       	pop	r23
    1060:	6f 91       	pop	r22
    1062:	5f 91       	pop	r21
    1064:	4f 91       	pop	r20
    1066:	3f 91       	pop	r19
    1068:	2f 91       	pop	r18
    106a:	0f 90       	pop	r0
    106c:	0b be       	out	0x3b, r0	; 59
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	1f 90       	pop	r1
    1076:	18 95       	reti

00001078 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    1078:	1f 92       	push	r1
    107a:	0f 92       	push	r0
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	0f 92       	push	r0
    1080:	11 24       	eor	r1, r1
    1082:	0b b6       	in	r0, 0x3b	; 59
    1084:	0f 92       	push	r0
    1086:	2f 93       	push	r18
    1088:	3f 93       	push	r19
    108a:	4f 93       	push	r20
    108c:	5f 93       	push	r21
    108e:	6f 93       	push	r22
    1090:	7f 93       	push	r23
    1092:	8f 93       	push	r24
    1094:	9f 93       	push	r25
    1096:	af 93       	push	r26
    1098:	bf 93       	push	r27
    109a:	ef 93       	push	r30
    109c:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    109e:	e0 91 dd 21 	lds	r30, 0x21DD	; 0x8021dd <tc_tcd0_ovf_callback>
    10a2:	f0 91 de 21 	lds	r31, 0x21DE	; 0x8021de <tc_tcd0_ovf_callback+0x1>
    10a6:	30 97       	sbiw	r30, 0x00	; 0
    10a8:	09 f0       	breq	.+2      	; 0x10ac <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    10aa:	19 95       	eicall
	}
}
    10ac:	ff 91       	pop	r31
    10ae:	ef 91       	pop	r30
    10b0:	bf 91       	pop	r27
    10b2:	af 91       	pop	r26
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	7f 91       	pop	r23
    10ba:	6f 91       	pop	r22
    10bc:	5f 91       	pop	r21
    10be:	4f 91       	pop	r20
    10c0:	3f 91       	pop	r19
    10c2:	2f 91       	pop	r18
    10c4:	0f 90       	pop	r0
    10c6:	0b be       	out	0x3b, r0	; 59
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti

000010d2 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	0b b6       	in	r0, 0x3b	; 59
    10de:	0f 92       	push	r0
    10e0:	2f 93       	push	r18
    10e2:	3f 93       	push	r19
    10e4:	4f 93       	push	r20
    10e6:	5f 93       	push	r21
    10e8:	6f 93       	push	r22
    10ea:	7f 93       	push	r23
    10ec:	8f 93       	push	r24
    10ee:	9f 93       	push	r25
    10f0:	af 93       	push	r26
    10f2:	bf 93       	push	r27
    10f4:	ef 93       	push	r30
    10f6:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    10f8:	e0 91 db 21 	lds	r30, 0x21DB	; 0x8021db <tc_tcd0_err_callback>
    10fc:	f0 91 dc 21 	lds	r31, 0x21DC	; 0x8021dc <tc_tcd0_err_callback+0x1>
    1100:	30 97       	sbiw	r30, 0x00	; 0
    1102:	09 f0       	breq	.+2      	; 0x1106 <__vector_78+0x34>
		tc_tcd0_err_callback();
    1104:	19 95       	eicall
	}
}
    1106:	ff 91       	pop	r31
    1108:	ef 91       	pop	r30
    110a:	bf 91       	pop	r27
    110c:	af 91       	pop	r26
    110e:	9f 91       	pop	r25
    1110:	8f 91       	pop	r24
    1112:	7f 91       	pop	r23
    1114:	6f 91       	pop	r22
    1116:	5f 91       	pop	r21
    1118:	4f 91       	pop	r20
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	0f 90       	pop	r0
    1120:	0b be       	out	0x3b, r0	; 59
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	0b b6       	in	r0, 0x3b	; 59
    1138:	0f 92       	push	r0
    113a:	2f 93       	push	r18
    113c:	3f 93       	push	r19
    113e:	4f 93       	push	r20
    1140:	5f 93       	push	r21
    1142:	6f 93       	push	r22
    1144:	7f 93       	push	r23
    1146:	8f 93       	push	r24
    1148:	9f 93       	push	r25
    114a:	af 93       	push	r26
    114c:	bf 93       	push	r27
    114e:	ef 93       	push	r30
    1150:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1152:	e0 91 d9 21 	lds	r30, 0x21D9	; 0x8021d9 <tc_tcd0_cca_callback>
    1156:	f0 91 da 21 	lds	r31, 0x21DA	; 0x8021da <tc_tcd0_cca_callback+0x1>
    115a:	30 97       	sbiw	r30, 0x00	; 0
    115c:	09 f0       	breq	.+2      	; 0x1160 <__vector_79+0x34>
		tc_tcd0_cca_callback();
    115e:	19 95       	eicall
	}
}
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	0b be       	out	0x3b, r0	; 59
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	0b b6       	in	r0, 0x3b	; 59
    1192:	0f 92       	push	r0
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    11ac:	e0 91 d7 21 	lds	r30, 0x21D7	; 0x8021d7 <tc_tcd0_ccb_callback>
    11b0:	f0 91 d8 21 	lds	r31, 0x21D8	; 0x8021d8 <tc_tcd0_ccb_callback+0x1>
    11b4:	30 97       	sbiw	r30, 0x00	; 0
    11b6:	09 f0       	breq	.+2      	; 0x11ba <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    11b8:	19 95       	eicall
	}
}
    11ba:	ff 91       	pop	r31
    11bc:	ef 91       	pop	r30
    11be:	bf 91       	pop	r27
    11c0:	af 91       	pop	r26
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	7f 91       	pop	r23
    11c8:	6f 91       	pop	r22
    11ca:	5f 91       	pop	r21
    11cc:	4f 91       	pop	r20
    11ce:	3f 91       	pop	r19
    11d0:	2f 91       	pop	r18
    11d2:	0f 90       	pop	r0
    11d4:	0b be       	out	0x3b, r0	; 59
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti

000011e0 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	0b b6       	in	r0, 0x3b	; 59
    11ec:	0f 92       	push	r0
    11ee:	2f 93       	push	r18
    11f0:	3f 93       	push	r19
    11f2:	4f 93       	push	r20
    11f4:	5f 93       	push	r21
    11f6:	6f 93       	push	r22
    11f8:	7f 93       	push	r23
    11fa:	8f 93       	push	r24
    11fc:	9f 93       	push	r25
    11fe:	af 93       	push	r26
    1200:	bf 93       	push	r27
    1202:	ef 93       	push	r30
    1204:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1206:	e0 91 d5 21 	lds	r30, 0x21D5	; 0x8021d5 <tc_tcd0_ccc_callback>
    120a:	f0 91 d6 21 	lds	r31, 0x21D6	; 0x8021d6 <tc_tcd0_ccc_callback+0x1>
    120e:	30 97       	sbiw	r30, 0x00	; 0
    1210:	09 f0       	breq	.+2      	; 0x1214 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    1212:	19 95       	eicall
	}
}
    1214:	ff 91       	pop	r31
    1216:	ef 91       	pop	r30
    1218:	bf 91       	pop	r27
    121a:	af 91       	pop	r26
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	7f 91       	pop	r23
    1222:	6f 91       	pop	r22
    1224:	5f 91       	pop	r21
    1226:	4f 91       	pop	r20
    1228:	3f 91       	pop	r19
    122a:	2f 91       	pop	r18
    122c:	0f 90       	pop	r0
    122e:	0b be       	out	0x3b, r0	; 59
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	0b b6       	in	r0, 0x3b	; 59
    1246:	0f 92       	push	r0
    1248:	2f 93       	push	r18
    124a:	3f 93       	push	r19
    124c:	4f 93       	push	r20
    124e:	5f 93       	push	r21
    1250:	6f 93       	push	r22
    1252:	7f 93       	push	r23
    1254:	8f 93       	push	r24
    1256:	9f 93       	push	r25
    1258:	af 93       	push	r26
    125a:	bf 93       	push	r27
    125c:	ef 93       	push	r30
    125e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1260:	e0 91 d3 21 	lds	r30, 0x21D3	; 0x8021d3 <tc_tcd0_ccd_callback>
    1264:	f0 91 d4 21 	lds	r31, 0x21D4	; 0x8021d4 <tc_tcd0_ccd_callback+0x1>
    1268:	30 97       	sbiw	r30, 0x00	; 0
    126a:	09 f0       	breq	.+2      	; 0x126e <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    126c:	19 95       	eicall
	}
}
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0b be       	out	0x3b, r0	; 59
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	0b b6       	in	r0, 0x3b	; 59
    12a0:	0f 92       	push	r0
    12a2:	2f 93       	push	r18
    12a4:	3f 93       	push	r19
    12a6:	4f 93       	push	r20
    12a8:	5f 93       	push	r21
    12aa:	6f 93       	push	r22
    12ac:	7f 93       	push	r23
    12ae:	8f 93       	push	r24
    12b0:	9f 93       	push	r25
    12b2:	af 93       	push	r26
    12b4:	bf 93       	push	r27
    12b6:	ef 93       	push	r30
    12b8:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    12ba:	e0 91 d1 21 	lds	r30, 0x21D1	; 0x8021d1 <tc_tcd1_ovf_callback>
    12be:	f0 91 d2 21 	lds	r31, 0x21D2	; 0x8021d2 <tc_tcd1_ovf_callback+0x1>
    12c2:	30 97       	sbiw	r30, 0x00	; 0
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    12c6:	19 95       	eicall
	}
}
    12c8:	ff 91       	pop	r31
    12ca:	ef 91       	pop	r30
    12cc:	bf 91       	pop	r27
    12ce:	af 91       	pop	r26
    12d0:	9f 91       	pop	r25
    12d2:	8f 91       	pop	r24
    12d4:	7f 91       	pop	r23
    12d6:	6f 91       	pop	r22
    12d8:	5f 91       	pop	r21
    12da:	4f 91       	pop	r20
    12dc:	3f 91       	pop	r19
    12de:	2f 91       	pop	r18
    12e0:	0f 90       	pop	r0
    12e2:	0b be       	out	0x3b, r0	; 59
    12e4:	0f 90       	pop	r0
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	0f 90       	pop	r0
    12ea:	1f 90       	pop	r1
    12ec:	18 95       	reti

000012ee <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    12ee:	1f 92       	push	r1
    12f0:	0f 92       	push	r0
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	0f 92       	push	r0
    12f6:	11 24       	eor	r1, r1
    12f8:	0b b6       	in	r0, 0x3b	; 59
    12fa:	0f 92       	push	r0
    12fc:	2f 93       	push	r18
    12fe:	3f 93       	push	r19
    1300:	4f 93       	push	r20
    1302:	5f 93       	push	r21
    1304:	6f 93       	push	r22
    1306:	7f 93       	push	r23
    1308:	8f 93       	push	r24
    130a:	9f 93       	push	r25
    130c:	af 93       	push	r26
    130e:	bf 93       	push	r27
    1310:	ef 93       	push	r30
    1312:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1314:	e0 91 cf 21 	lds	r30, 0x21CF	; 0x8021cf <tc_tcd1_err_callback>
    1318:	f0 91 d0 21 	lds	r31, 0x21D0	; 0x8021d0 <tc_tcd1_err_callback+0x1>
    131c:	30 97       	sbiw	r30, 0x00	; 0
    131e:	09 f0       	breq	.+2      	; 0x1322 <__vector_84+0x34>
		tc_tcd1_err_callback();
    1320:	19 95       	eicall
	}
}
    1322:	ff 91       	pop	r31
    1324:	ef 91       	pop	r30
    1326:	bf 91       	pop	r27
    1328:	af 91       	pop	r26
    132a:	9f 91       	pop	r25
    132c:	8f 91       	pop	r24
    132e:	7f 91       	pop	r23
    1330:	6f 91       	pop	r22
    1332:	5f 91       	pop	r21
    1334:	4f 91       	pop	r20
    1336:	3f 91       	pop	r19
    1338:	2f 91       	pop	r18
    133a:	0f 90       	pop	r0
    133c:	0b be       	out	0x3b, r0	; 59
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	0f 90       	pop	r0
    1344:	1f 90       	pop	r1
    1346:	18 95       	reti

00001348 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	0b b6       	in	r0, 0x3b	; 59
    1354:	0f 92       	push	r0
    1356:	2f 93       	push	r18
    1358:	3f 93       	push	r19
    135a:	4f 93       	push	r20
    135c:	5f 93       	push	r21
    135e:	6f 93       	push	r22
    1360:	7f 93       	push	r23
    1362:	8f 93       	push	r24
    1364:	9f 93       	push	r25
    1366:	af 93       	push	r26
    1368:	bf 93       	push	r27
    136a:	ef 93       	push	r30
    136c:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    136e:	e0 91 cd 21 	lds	r30, 0x21CD	; 0x8021cd <tc_tcd1_cca_callback>
    1372:	f0 91 ce 21 	lds	r31, 0x21CE	; 0x8021ce <tc_tcd1_cca_callback+0x1>
    1376:	30 97       	sbiw	r30, 0x00	; 0
    1378:	09 f0       	breq	.+2      	; 0x137c <__vector_85+0x34>
		tc_tcd1_cca_callback();
    137a:	19 95       	eicall
	}
}
    137c:	ff 91       	pop	r31
    137e:	ef 91       	pop	r30
    1380:	bf 91       	pop	r27
    1382:	af 91       	pop	r26
    1384:	9f 91       	pop	r25
    1386:	8f 91       	pop	r24
    1388:	7f 91       	pop	r23
    138a:	6f 91       	pop	r22
    138c:	5f 91       	pop	r21
    138e:	4f 91       	pop	r20
    1390:	3f 91       	pop	r19
    1392:	2f 91       	pop	r18
    1394:	0f 90       	pop	r0
    1396:	0b be       	out	0x3b, r0	; 59
    1398:	0f 90       	pop	r0
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	0f 90       	pop	r0
    139e:	1f 90       	pop	r1
    13a0:	18 95       	reti

000013a2 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    13a2:	1f 92       	push	r1
    13a4:	0f 92       	push	r0
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	0f 92       	push	r0
    13aa:	11 24       	eor	r1, r1
    13ac:	0b b6       	in	r0, 0x3b	; 59
    13ae:	0f 92       	push	r0
    13b0:	2f 93       	push	r18
    13b2:	3f 93       	push	r19
    13b4:	4f 93       	push	r20
    13b6:	5f 93       	push	r21
    13b8:	6f 93       	push	r22
    13ba:	7f 93       	push	r23
    13bc:	8f 93       	push	r24
    13be:	9f 93       	push	r25
    13c0:	af 93       	push	r26
    13c2:	bf 93       	push	r27
    13c4:	ef 93       	push	r30
    13c6:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    13c8:	e0 91 cb 21 	lds	r30, 0x21CB	; 0x8021cb <tc_tcd1_ccb_callback>
    13cc:	f0 91 cc 21 	lds	r31, 0x21CC	; 0x8021cc <tc_tcd1_ccb_callback+0x1>
    13d0:	30 97       	sbiw	r30, 0x00	; 0
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    13d4:	19 95       	eicall
	}
}
    13d6:	ff 91       	pop	r31
    13d8:	ef 91       	pop	r30
    13da:	bf 91       	pop	r27
    13dc:	af 91       	pop	r26
    13de:	9f 91       	pop	r25
    13e0:	8f 91       	pop	r24
    13e2:	7f 91       	pop	r23
    13e4:	6f 91       	pop	r22
    13e6:	5f 91       	pop	r21
    13e8:	4f 91       	pop	r20
    13ea:	3f 91       	pop	r19
    13ec:	2f 91       	pop	r18
    13ee:	0f 90       	pop	r0
    13f0:	0b be       	out	0x3b, r0	; 59
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    13fc:	1f 92       	push	r1
    13fe:	0f 92       	push	r0
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	0f 92       	push	r0
    1404:	11 24       	eor	r1, r1
    1406:	0b b6       	in	r0, 0x3b	; 59
    1408:	0f 92       	push	r0
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1422:	e0 91 c9 21 	lds	r30, 0x21C9	; 0x8021c9 <tc_tce0_ovf_callback>
    1426:	f0 91 ca 21 	lds	r31, 0x21CA	; 0x8021ca <tc_tce0_ovf_callback+0x1>
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	09 f0       	breq	.+2      	; 0x1430 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    142e:	19 95       	eicall
	}
}
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0b be       	out	0x3b, r0	; 59
    144c:	0f 90       	pop	r0
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	0f 90       	pop	r0
    1452:	1f 90       	pop	r1
    1454:	18 95       	reti

00001456 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1456:	1f 92       	push	r1
    1458:	0f 92       	push	r0
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	0f 92       	push	r0
    145e:	11 24       	eor	r1, r1
    1460:	0b b6       	in	r0, 0x3b	; 59
    1462:	0f 92       	push	r0
    1464:	2f 93       	push	r18
    1466:	3f 93       	push	r19
    1468:	4f 93       	push	r20
    146a:	5f 93       	push	r21
    146c:	6f 93       	push	r22
    146e:	7f 93       	push	r23
    1470:	8f 93       	push	r24
    1472:	9f 93       	push	r25
    1474:	af 93       	push	r26
    1476:	bf 93       	push	r27
    1478:	ef 93       	push	r30
    147a:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    147c:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <tc_tce0_err_callback>
    1480:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <tc_tce0_err_callback+0x1>
    1484:	30 97       	sbiw	r30, 0x00	; 0
    1486:	09 f0       	breq	.+2      	; 0x148a <__vector_48+0x34>
		tc_tce0_err_callback();
    1488:	19 95       	eicall
	}
}
    148a:	ff 91       	pop	r31
    148c:	ef 91       	pop	r30
    148e:	bf 91       	pop	r27
    1490:	af 91       	pop	r26
    1492:	9f 91       	pop	r25
    1494:	8f 91       	pop	r24
    1496:	7f 91       	pop	r23
    1498:	6f 91       	pop	r22
    149a:	5f 91       	pop	r21
    149c:	4f 91       	pop	r20
    149e:	3f 91       	pop	r19
    14a0:	2f 91       	pop	r18
    14a2:	0f 90       	pop	r0
    14a4:	0b be       	out	0x3b, r0	; 59
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	0f 90       	pop	r0
    14ac:	1f 90       	pop	r1
    14ae:	18 95       	reti

000014b0 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    14b0:	1f 92       	push	r1
    14b2:	0f 92       	push	r0
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	0b b6       	in	r0, 0x3b	; 59
    14bc:	0f 92       	push	r0
    14be:	2f 93       	push	r18
    14c0:	3f 93       	push	r19
    14c2:	4f 93       	push	r20
    14c4:	5f 93       	push	r21
    14c6:	6f 93       	push	r22
    14c8:	7f 93       	push	r23
    14ca:	8f 93       	push	r24
    14cc:	9f 93       	push	r25
    14ce:	af 93       	push	r26
    14d0:	bf 93       	push	r27
    14d2:	ef 93       	push	r30
    14d4:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    14d6:	e0 91 c5 21 	lds	r30, 0x21C5	; 0x8021c5 <tc_tce0_cca_callback>
    14da:	f0 91 c6 21 	lds	r31, 0x21C6	; 0x8021c6 <tc_tce0_cca_callback+0x1>
    14de:	30 97       	sbiw	r30, 0x00	; 0
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <__vector_49+0x34>
		tc_tce0_cca_callback();
    14e2:	19 95       	eicall
	}
}
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	0f 90       	pop	r0
    14fe:	0b be       	out	0x3b, r0	; 59
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    150a:	1f 92       	push	r1
    150c:	0f 92       	push	r0
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	0f 92       	push	r0
    1512:	11 24       	eor	r1, r1
    1514:	0b b6       	in	r0, 0x3b	; 59
    1516:	0f 92       	push	r0
    1518:	2f 93       	push	r18
    151a:	3f 93       	push	r19
    151c:	4f 93       	push	r20
    151e:	5f 93       	push	r21
    1520:	6f 93       	push	r22
    1522:	7f 93       	push	r23
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
    1528:	af 93       	push	r26
    152a:	bf 93       	push	r27
    152c:	ef 93       	push	r30
    152e:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1530:	e0 91 c3 21 	lds	r30, 0x21C3	; 0x8021c3 <tc_tce0_ccb_callback>
    1534:	f0 91 c4 21 	lds	r31, 0x21C4	; 0x8021c4 <tc_tce0_ccb_callback+0x1>
    1538:	30 97       	sbiw	r30, 0x00	; 0
    153a:	09 f0       	breq	.+2      	; 0x153e <__vector_50+0x34>
		tc_tce0_ccb_callback();
    153c:	19 95       	eicall
	}
}
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0b be       	out	0x3b, r0	; 59
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti

00001564 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	0b b6       	in	r0, 0x3b	; 59
    1570:	0f 92       	push	r0
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    158a:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <tc_tce0_ccc_callback>
    158e:	f0 91 c2 21 	lds	r31, 0x21C2	; 0x8021c2 <tc_tce0_ccc_callback+0x1>
    1592:	30 97       	sbiw	r30, 0x00	; 0
    1594:	09 f0       	breq	.+2      	; 0x1598 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1596:	19 95       	eicall
	}
}
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	7f 91       	pop	r23
    15a6:	6f 91       	pop	r22
    15a8:	5f 91       	pop	r21
    15aa:	4f 91       	pop	r20
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0b be       	out	0x3b, r0	; 59
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	0b b6       	in	r0, 0x3b	; 59
    15ca:	0f 92       	push	r0
    15cc:	2f 93       	push	r18
    15ce:	3f 93       	push	r19
    15d0:	4f 93       	push	r20
    15d2:	5f 93       	push	r21
    15d4:	6f 93       	push	r22
    15d6:	7f 93       	push	r23
    15d8:	8f 93       	push	r24
    15da:	9f 93       	push	r25
    15dc:	af 93       	push	r26
    15de:	bf 93       	push	r27
    15e0:	ef 93       	push	r30
    15e2:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    15e4:	e0 91 bf 21 	lds	r30, 0x21BF	; 0x8021bf <tc_tce0_ccd_callback>
    15e8:	f0 91 c0 21 	lds	r31, 0x21C0	; 0x8021c0 <tc_tce0_ccd_callback+0x1>
    15ec:	30 97       	sbiw	r30, 0x00	; 0
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    15f0:	19 95       	eicall
	}
}
    15f2:	ff 91       	pop	r31
    15f4:	ef 91       	pop	r30
    15f6:	bf 91       	pop	r27
    15f8:	af 91       	pop	r26
    15fa:	9f 91       	pop	r25
    15fc:	8f 91       	pop	r24
    15fe:	7f 91       	pop	r23
    1600:	6f 91       	pop	r22
    1602:	5f 91       	pop	r21
    1604:	4f 91       	pop	r20
    1606:	3f 91       	pop	r19
    1608:	2f 91       	pop	r18
    160a:	0f 90       	pop	r0
    160c:	0b be       	out	0x3b, r0	; 59
    160e:	0f 90       	pop	r0
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	0f 90       	pop	r0
    1614:	1f 90       	pop	r1
    1616:	18 95       	reti

00001618 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1618:	1f 92       	push	r1
    161a:	0f 92       	push	r0
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	0f 92       	push	r0
    1620:	11 24       	eor	r1, r1
    1622:	0b b6       	in	r0, 0x3b	; 59
    1624:	0f 92       	push	r0
    1626:	2f 93       	push	r18
    1628:	3f 93       	push	r19
    162a:	4f 93       	push	r20
    162c:	5f 93       	push	r21
    162e:	6f 93       	push	r22
    1630:	7f 93       	push	r23
    1632:	8f 93       	push	r24
    1634:	9f 93       	push	r25
    1636:	af 93       	push	r26
    1638:	bf 93       	push	r27
    163a:	ef 93       	push	r30
    163c:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    163e:	e0 91 bd 21 	lds	r30, 0x21BD	; 0x8021bd <tc_tce1_ovf_callback>
    1642:	f0 91 be 21 	lds	r31, 0x21BE	; 0x8021be <tc_tce1_ovf_callback+0x1>
    1646:	30 97       	sbiw	r30, 0x00	; 0
    1648:	09 f0       	breq	.+2      	; 0x164c <__vector_53+0x34>
		tc_tce1_ovf_callback();
    164a:	19 95       	eicall
	}
}
    164c:	ff 91       	pop	r31
    164e:	ef 91       	pop	r30
    1650:	bf 91       	pop	r27
    1652:	af 91       	pop	r26
    1654:	9f 91       	pop	r25
    1656:	8f 91       	pop	r24
    1658:	7f 91       	pop	r23
    165a:	6f 91       	pop	r22
    165c:	5f 91       	pop	r21
    165e:	4f 91       	pop	r20
    1660:	3f 91       	pop	r19
    1662:	2f 91       	pop	r18
    1664:	0f 90       	pop	r0
    1666:	0b be       	out	0x3b, r0	; 59
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	0f 90       	pop	r0
    166e:	1f 90       	pop	r1
    1670:	18 95       	reti

00001672 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1672:	1f 92       	push	r1
    1674:	0f 92       	push	r0
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	0f 92       	push	r0
    167a:	11 24       	eor	r1, r1
    167c:	0b b6       	in	r0, 0x3b	; 59
    167e:	0f 92       	push	r0
    1680:	2f 93       	push	r18
    1682:	3f 93       	push	r19
    1684:	4f 93       	push	r20
    1686:	5f 93       	push	r21
    1688:	6f 93       	push	r22
    168a:	7f 93       	push	r23
    168c:	8f 93       	push	r24
    168e:	9f 93       	push	r25
    1690:	af 93       	push	r26
    1692:	bf 93       	push	r27
    1694:	ef 93       	push	r30
    1696:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1698:	e0 91 bb 21 	lds	r30, 0x21BB	; 0x8021bb <tc_tce1_err_callback>
    169c:	f0 91 bc 21 	lds	r31, 0x21BC	; 0x8021bc <tc_tce1_err_callback+0x1>
    16a0:	30 97       	sbiw	r30, 0x00	; 0
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <__vector_54+0x34>
		tc_tce1_err_callback();
    16a4:	19 95       	eicall
	}
}
    16a6:	ff 91       	pop	r31
    16a8:	ef 91       	pop	r30
    16aa:	bf 91       	pop	r27
    16ac:	af 91       	pop	r26
    16ae:	9f 91       	pop	r25
    16b0:	8f 91       	pop	r24
    16b2:	7f 91       	pop	r23
    16b4:	6f 91       	pop	r22
    16b6:	5f 91       	pop	r21
    16b8:	4f 91       	pop	r20
    16ba:	3f 91       	pop	r19
    16bc:	2f 91       	pop	r18
    16be:	0f 90       	pop	r0
    16c0:	0b be       	out	0x3b, r0	; 59
    16c2:	0f 90       	pop	r0
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	0f 90       	pop	r0
    16c8:	1f 90       	pop	r1
    16ca:	18 95       	reti

000016cc <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    16cc:	1f 92       	push	r1
    16ce:	0f 92       	push	r0
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	0f 92       	push	r0
    16d4:	11 24       	eor	r1, r1
    16d6:	0b b6       	in	r0, 0x3b	; 59
    16d8:	0f 92       	push	r0
    16da:	2f 93       	push	r18
    16dc:	3f 93       	push	r19
    16de:	4f 93       	push	r20
    16e0:	5f 93       	push	r21
    16e2:	6f 93       	push	r22
    16e4:	7f 93       	push	r23
    16e6:	8f 93       	push	r24
    16e8:	9f 93       	push	r25
    16ea:	af 93       	push	r26
    16ec:	bf 93       	push	r27
    16ee:	ef 93       	push	r30
    16f0:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    16f2:	e0 91 b9 21 	lds	r30, 0x21B9	; 0x8021b9 <tc_tce1_cca_callback>
    16f6:	f0 91 ba 21 	lds	r31, 0x21BA	; 0x8021ba <tc_tce1_cca_callback+0x1>
    16fa:	30 97       	sbiw	r30, 0x00	; 0
    16fc:	09 f0       	breq	.+2      	; 0x1700 <__vector_55+0x34>
		tc_tce1_cca_callback();
    16fe:	19 95       	eicall
	}
}
    1700:	ff 91       	pop	r31
    1702:	ef 91       	pop	r30
    1704:	bf 91       	pop	r27
    1706:	af 91       	pop	r26
    1708:	9f 91       	pop	r25
    170a:	8f 91       	pop	r24
    170c:	7f 91       	pop	r23
    170e:	6f 91       	pop	r22
    1710:	5f 91       	pop	r21
    1712:	4f 91       	pop	r20
    1714:	3f 91       	pop	r19
    1716:	2f 91       	pop	r18
    1718:	0f 90       	pop	r0
    171a:	0b be       	out	0x3b, r0	; 59
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	0f 90       	pop	r0
    1722:	1f 90       	pop	r1
    1724:	18 95       	reti

00001726 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1726:	1f 92       	push	r1
    1728:	0f 92       	push	r0
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	0f 92       	push	r0
    172e:	11 24       	eor	r1, r1
    1730:	0b b6       	in	r0, 0x3b	; 59
    1732:	0f 92       	push	r0
    1734:	2f 93       	push	r18
    1736:	3f 93       	push	r19
    1738:	4f 93       	push	r20
    173a:	5f 93       	push	r21
    173c:	6f 93       	push	r22
    173e:	7f 93       	push	r23
    1740:	8f 93       	push	r24
    1742:	9f 93       	push	r25
    1744:	af 93       	push	r26
    1746:	bf 93       	push	r27
    1748:	ef 93       	push	r30
    174a:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    174c:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <tc_tce1_ccb_callback>
    1750:	f0 91 b8 21 	lds	r31, 0x21B8	; 0x8021b8 <tc_tce1_ccb_callback+0x1>
    1754:	30 97       	sbiw	r30, 0x00	; 0
    1756:	09 f0       	breq	.+2      	; 0x175a <__vector_56+0x34>
		tc_tce1_ccb_callback();
    1758:	19 95       	eicall
	}
}
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	bf 91       	pop	r27
    1760:	af 91       	pop	r26
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	7f 91       	pop	r23
    1768:	6f 91       	pop	r22
    176a:	5f 91       	pop	r21
    176c:	4f 91       	pop	r20
    176e:	3f 91       	pop	r19
    1770:	2f 91       	pop	r18
    1772:	0f 90       	pop	r0
    1774:	0b be       	out	0x3b, r0	; 59
    1776:	0f 90       	pop	r0
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	0f 90       	pop	r0
    177c:	1f 90       	pop	r1
    177e:	18 95       	reti

00001780 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1780:	1f 92       	push	r1
    1782:	0f 92       	push	r0
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	0f 92       	push	r0
    1788:	11 24       	eor	r1, r1
    178a:	0b b6       	in	r0, 0x3b	; 59
    178c:	0f 92       	push	r0
    178e:	2f 93       	push	r18
    1790:	3f 93       	push	r19
    1792:	4f 93       	push	r20
    1794:	5f 93       	push	r21
    1796:	6f 93       	push	r22
    1798:	7f 93       	push	r23
    179a:	8f 93       	push	r24
    179c:	9f 93       	push	r25
    179e:	af 93       	push	r26
    17a0:	bf 93       	push	r27
    17a2:	ef 93       	push	r30
    17a4:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    17a6:	e0 91 b5 21 	lds	r30, 0x21B5	; 0x8021b5 <tc_tcf0_ovf_callback>
    17aa:	f0 91 b6 21 	lds	r31, 0x21B6	; 0x8021b6 <tc_tcf0_ovf_callback+0x1>
    17ae:	30 97       	sbiw	r30, 0x00	; 0
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    17b2:	19 95       	eicall
	}
}
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	0f 90       	pop	r0
    17ce:	0b be       	out	0x3b, r0	; 59
    17d0:	0f 90       	pop	r0
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	0f 90       	pop	r0
    17d6:	1f 90       	pop	r1
    17d8:	18 95       	reti

000017da <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	11 24       	eor	r1, r1
    17e4:	0b b6       	in	r0, 0x3b	; 59
    17e6:	0f 92       	push	r0
    17e8:	2f 93       	push	r18
    17ea:	3f 93       	push	r19
    17ec:	4f 93       	push	r20
    17ee:	5f 93       	push	r21
    17f0:	6f 93       	push	r22
    17f2:	7f 93       	push	r23
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	ef 93       	push	r30
    17fe:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1800:	e0 91 b3 21 	lds	r30, 0x21B3	; 0x8021b3 <tc_tcf0_err_callback>
    1804:	f0 91 b4 21 	lds	r31, 0x21B4	; 0x8021b4 <tc_tcf0_err_callback+0x1>
    1808:	30 97       	sbiw	r30, 0x00	; 0
    180a:	09 f0       	breq	.+2      	; 0x180e <__vector_109+0x34>
		tc_tcf0_err_callback();
    180c:	19 95       	eicall
	}
}
    180e:	ff 91       	pop	r31
    1810:	ef 91       	pop	r30
    1812:	bf 91       	pop	r27
    1814:	af 91       	pop	r26
    1816:	9f 91       	pop	r25
    1818:	8f 91       	pop	r24
    181a:	7f 91       	pop	r23
    181c:	6f 91       	pop	r22
    181e:	5f 91       	pop	r21
    1820:	4f 91       	pop	r20
    1822:	3f 91       	pop	r19
    1824:	2f 91       	pop	r18
    1826:	0f 90       	pop	r0
    1828:	0b be       	out	0x3b, r0	; 59
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	0f 90       	pop	r0
    1830:	1f 90       	pop	r1
    1832:	18 95       	reti

00001834 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1834:	1f 92       	push	r1
    1836:	0f 92       	push	r0
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	0f 92       	push	r0
    183c:	11 24       	eor	r1, r1
    183e:	0b b6       	in	r0, 0x3b	; 59
    1840:	0f 92       	push	r0
    1842:	2f 93       	push	r18
    1844:	3f 93       	push	r19
    1846:	4f 93       	push	r20
    1848:	5f 93       	push	r21
    184a:	6f 93       	push	r22
    184c:	7f 93       	push	r23
    184e:	8f 93       	push	r24
    1850:	9f 93       	push	r25
    1852:	af 93       	push	r26
    1854:	bf 93       	push	r27
    1856:	ef 93       	push	r30
    1858:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    185a:	e0 91 b1 21 	lds	r30, 0x21B1	; 0x8021b1 <tc_tcf0_cca_callback>
    185e:	f0 91 b2 21 	lds	r31, 0x21B2	; 0x8021b2 <tc_tcf0_cca_callback+0x1>
    1862:	30 97       	sbiw	r30, 0x00	; 0
    1864:	09 f0       	breq	.+2      	; 0x1868 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    1866:	19 95       	eicall
	}
}
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	7f 91       	pop	r23
    1876:	6f 91       	pop	r22
    1878:	5f 91       	pop	r21
    187a:	4f 91       	pop	r20
    187c:	3f 91       	pop	r19
    187e:	2f 91       	pop	r18
    1880:	0f 90       	pop	r0
    1882:	0b be       	out	0x3b, r0	; 59
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	0f 90       	pop	r0
    188a:	1f 90       	pop	r1
    188c:	18 95       	reti

0000188e <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    188e:	1f 92       	push	r1
    1890:	0f 92       	push	r0
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	0f 92       	push	r0
    1896:	11 24       	eor	r1, r1
    1898:	0b b6       	in	r0, 0x3b	; 59
    189a:	0f 92       	push	r0
    189c:	2f 93       	push	r18
    189e:	3f 93       	push	r19
    18a0:	4f 93       	push	r20
    18a2:	5f 93       	push	r21
    18a4:	6f 93       	push	r22
    18a6:	7f 93       	push	r23
    18a8:	8f 93       	push	r24
    18aa:	9f 93       	push	r25
    18ac:	af 93       	push	r26
    18ae:	bf 93       	push	r27
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    18b4:	e0 91 af 21 	lds	r30, 0x21AF	; 0x8021af <tc_tcf0_ccb_callback>
    18b8:	f0 91 b0 21 	lds	r31, 0x21B0	; 0x8021b0 <tc_tcf0_ccb_callback+0x1>
    18bc:	30 97       	sbiw	r30, 0x00	; 0
    18be:	09 f0       	breq	.+2      	; 0x18c2 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    18c0:	19 95       	eicall
	}
}
    18c2:	ff 91       	pop	r31
    18c4:	ef 91       	pop	r30
    18c6:	bf 91       	pop	r27
    18c8:	af 91       	pop	r26
    18ca:	9f 91       	pop	r25
    18cc:	8f 91       	pop	r24
    18ce:	7f 91       	pop	r23
    18d0:	6f 91       	pop	r22
    18d2:	5f 91       	pop	r21
    18d4:	4f 91       	pop	r20
    18d6:	3f 91       	pop	r19
    18d8:	2f 91       	pop	r18
    18da:	0f 90       	pop	r0
    18dc:	0b be       	out	0x3b, r0	; 59
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    18e8:	1f 92       	push	r1
    18ea:	0f 92       	push	r0
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	0f 92       	push	r0
    18f0:	11 24       	eor	r1, r1
    18f2:	0b b6       	in	r0, 0x3b	; 59
    18f4:	0f 92       	push	r0
    18f6:	2f 93       	push	r18
    18f8:	3f 93       	push	r19
    18fa:	4f 93       	push	r20
    18fc:	5f 93       	push	r21
    18fe:	6f 93       	push	r22
    1900:	7f 93       	push	r23
    1902:	8f 93       	push	r24
    1904:	9f 93       	push	r25
    1906:	af 93       	push	r26
    1908:	bf 93       	push	r27
    190a:	ef 93       	push	r30
    190c:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    190e:	e0 91 ad 21 	lds	r30, 0x21AD	; 0x8021ad <tc_tcf0_ccc_callback>
    1912:	f0 91 ae 21 	lds	r31, 0x21AE	; 0x8021ae <tc_tcf0_ccc_callback+0x1>
    1916:	30 97       	sbiw	r30, 0x00	; 0
    1918:	09 f0       	breq	.+2      	; 0x191c <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    191a:	19 95       	eicall
	}
}
    191c:	ff 91       	pop	r31
    191e:	ef 91       	pop	r30
    1920:	bf 91       	pop	r27
    1922:	af 91       	pop	r26
    1924:	9f 91       	pop	r25
    1926:	8f 91       	pop	r24
    1928:	7f 91       	pop	r23
    192a:	6f 91       	pop	r22
    192c:	5f 91       	pop	r21
    192e:	4f 91       	pop	r20
    1930:	3f 91       	pop	r19
    1932:	2f 91       	pop	r18
    1934:	0f 90       	pop	r0
    1936:	0b be       	out	0x3b, r0	; 59
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	0f 92       	push	r0
    194a:	11 24       	eor	r1, r1
    194c:	0b b6       	in	r0, 0x3b	; 59
    194e:	0f 92       	push	r0
    1950:	2f 93       	push	r18
    1952:	3f 93       	push	r19
    1954:	4f 93       	push	r20
    1956:	5f 93       	push	r21
    1958:	6f 93       	push	r22
    195a:	7f 93       	push	r23
    195c:	8f 93       	push	r24
    195e:	9f 93       	push	r25
    1960:	af 93       	push	r26
    1962:	bf 93       	push	r27
    1964:	ef 93       	push	r30
    1966:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1968:	e0 91 ab 21 	lds	r30, 0x21AB	; 0x8021ab <tc_tcf0_ccd_callback>
    196c:	f0 91 ac 21 	lds	r31, 0x21AC	; 0x8021ac <tc_tcf0_ccd_callback+0x1>
    1970:	30 97       	sbiw	r30, 0x00	; 0
    1972:	09 f0       	breq	.+2      	; 0x1976 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1974:	19 95       	eicall
	}
}
    1976:	ff 91       	pop	r31
    1978:	ef 91       	pop	r30
    197a:	bf 91       	pop	r27
    197c:	af 91       	pop	r26
    197e:	9f 91       	pop	r25
    1980:	8f 91       	pop	r24
    1982:	7f 91       	pop	r23
    1984:	6f 91       	pop	r22
    1986:	5f 91       	pop	r21
    1988:	4f 91       	pop	r20
    198a:	3f 91       	pop	r19
    198c:	2f 91       	pop	r18
    198e:	0f 90       	pop	r0
    1990:	0b be       	out	0x3b, r0	; 59
    1992:	0f 90       	pop	r0
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	0f 90       	pop	r0
    1998:	1f 90       	pop	r1
    199a:	18 95       	reti

0000199c <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	1f 92       	push	r1
    19a4:	1f 92       	push	r1
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    19aa:	2f b7       	in	r18, 0x3f	; 63
    19ac:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    19ae:	f8 94       	cli
	return flags;
    19b0:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    19b2:	28 2f       	mov	r18, r24
    19b4:	39 2f       	mov	r19, r25
    19b6:	21 15       	cp	r18, r1
    19b8:	88 e0       	ldi	r24, 0x08	; 8
    19ba:	38 07       	cpc	r19, r24
    19bc:	49 f4       	brne	.+18     	; 0x19d0 <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	83 e0       	ldi	r24, 0x03	; 3
    19c2:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    19c6:	64 e0       	ldi	r22, 0x04	; 4
    19c8:	83 e0       	ldi	r24, 0x03	; 3
    19ca:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
    19ce:	4f c0       	rjmp	.+158    	; 0x1a6e <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    19d0:	20 34       	cpi	r18, 0x40	; 64
    19d2:	88 e0       	ldi	r24, 0x08	; 8
    19d4:	38 07       	cpc	r19, r24
    19d6:	49 f4       	brne	.+18     	; 0x19ea <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    19e0:	64 e0       	ldi	r22, 0x04	; 4
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
    19e8:	42 c0       	rjmp	.+132    	; 0x1a6e <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    19ea:	21 15       	cp	r18, r1
    19ec:	89 e0       	ldi	r24, 0x09	; 9
    19ee:	38 07       	cpc	r19, r24
    19f0:	49 f4       	brne	.+18     	; 0x1a04 <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	84 e0       	ldi	r24, 0x04	; 4
    19f6:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    19fa:	64 e0       	ldi	r22, 0x04	; 4
    19fc:	84 e0       	ldi	r24, 0x04	; 4
    19fe:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
    1a02:	35 c0       	rjmp	.+106    	; 0x1a6e <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1a04:	20 34       	cpi	r18, 0x40	; 64
    1a06:	89 e0       	ldi	r24, 0x09	; 9
    1a08:	38 07       	cpc	r19, r24
    1a0a:	49 f4       	brne	.+18     	; 0x1a1e <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1a0c:	62 e0       	ldi	r22, 0x02	; 2
    1a0e:	84 e0       	ldi	r24, 0x04	; 4
    1a10:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1a14:	64 e0       	ldi	r22, 0x04	; 4
    1a16:	84 e0       	ldi	r24, 0x04	; 4
    1a18:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
    1a1c:	28 c0       	rjmp	.+80     	; 0x1a6e <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1a1e:	21 15       	cp	r18, r1
    1a20:	8a e0       	ldi	r24, 0x0A	; 10
    1a22:	38 07       	cpc	r19, r24
    1a24:	49 f4       	brne	.+18     	; 0x1a38 <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	85 e0       	ldi	r24, 0x05	; 5
    1a2a:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1a2e:	64 e0       	ldi	r22, 0x04	; 4
    1a30:	85 e0       	ldi	r24, 0x05	; 5
    1a32:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
    1a36:	1b c0       	rjmp	.+54     	; 0x1a6e <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1a38:	20 34       	cpi	r18, 0x40	; 64
    1a3a:	8a e0       	ldi	r24, 0x0A	; 10
    1a3c:	38 07       	cpc	r19, r24
    1a3e:	49 f4       	brne	.+18     	; 0x1a52 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1a40:	62 e0       	ldi	r22, 0x02	; 2
    1a42:	85 e0       	ldi	r24, 0x05	; 5
    1a44:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1a48:	64 e0       	ldi	r22, 0x04	; 4
    1a4a:	85 e0       	ldi	r24, 0x05	; 5
    1a4c:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
    1a50:	0e c0       	rjmp	.+28     	; 0x1a6e <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1a52:	21 15       	cp	r18, r1
    1a54:	3b 40       	sbci	r19, 0x0B	; 11
    1a56:	49 f4       	brne	.+18     	; 0x1a6a <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1a58:	61 e0       	ldi	r22, 0x01	; 1
    1a5a:	86 e0       	ldi	r24, 0x06	; 6
    1a5c:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1a60:	64 e0       	ldi	r22, 0x04	; 4
    1a62:	86 e0       	ldi	r24, 0x06	; 6
    1a64:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sysclk_enable_module>
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a6a:	1f bf       	out	0x3f, r17	; 63
    1a6c:	10 c0       	rjmp	.+32     	; 0x1a8e <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1a6e:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <sleepmgr_locks+0x1>
    1a72:	8f 3f       	cpi	r24, 0xFF	; 255
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <tc_enable+0xdc>
    1a76:	ff cf       	rjmp	.-2      	; 0x1a76 <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a78:	8f b7       	in	r24, 0x3f	; 63
    1a7a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1a7c:	f8 94       	cli
	return flags;
    1a7e:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1a80:	e9 e8       	ldi	r30, 0x89	; 137
    1a82:	f4 e2       	ldi	r31, 0x24	; 36
    1a84:	81 81       	ldd	r24, Z+1	; 0x01
    1a86:	8f 5f       	subi	r24, 0xFF	; 255
    1a88:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a8a:	9f bf       	out	0x3f, r25	; 63
    1a8c:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	08 95       	ret

00001a9a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1a9e:	e0 91 f3 21 	lds	r30, 0x21F3	; 0x8021f3 <transfer>
    1aa2:	f0 91 f4 21 	lds	r31, 0x21F4	; 0x8021f4 <transfer+0x1>
    1aa6:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1aa8:	83 ff       	sbrs	r24, 3
    1aaa:	08 c0       	rjmp	.+16     	; 0x1abc <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1aac:	88 60       	ori	r24, 0x08	; 8
    1aae:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1ab4:	86 ef       	ldi	r24, 0xF6	; 246
    1ab6:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <transfer+0xa>
    1aba:	83 c0       	rjmp	.+262    	; 0x1bc2 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1abc:	98 2f       	mov	r25, r24
    1abe:	94 71       	andi	r25, 0x14	; 20
    1ac0:	31 f0       	breq	.+12     	; 0x1ace <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1ac2:	83 e0       	ldi	r24, 0x03	; 3
    1ac4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <transfer+0xa>
    1acc:	7a c0       	rjmp	.+244    	; 0x1bc2 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1ace:	86 ff       	sbrs	r24, 6
    1ad0:	43 c0       	rjmp	.+134    	; 0x1b58 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1ad2:	c3 ef       	ldi	r28, 0xF3	; 243
    1ad4:	d1 e2       	ldi	r29, 0x21	; 33
    1ad6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ad8:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	14 96       	adiw	r26, 0x04	; 4
    1ae0:	2d 91       	ld	r18, X+
    1ae2:	3c 91       	ld	r19, X
    1ae4:	15 97       	sbiw	r26, 0x05	; 5
    1ae6:	82 17       	cp	r24, r18
    1ae8:	93 07       	cpc	r25, r19
    1aea:	6c f4       	brge	.+26     	; 0x1b06 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1aec:	9c 01       	movw	r18, r24
    1aee:	2f 5f       	subi	r18, 0xFF	; 255
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	20 93 f7 21 	sts	0x21F7, r18	; 0x8021f7 <transfer+0x4>
    1af6:	30 93 f8 21 	sts	0x21F8, r19	; 0x8021f8 <transfer+0x5>
    1afa:	a8 0f       	add	r26, r24
    1afc:	b9 1f       	adc	r27, r25
    1afe:	11 96       	adiw	r26, 0x01	; 1
    1b00:	8c 91       	ld	r24, X
    1b02:	87 83       	std	Z+7, r24	; 0x07
    1b04:	5e c0       	rjmp	.+188    	; 0x1bc2 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1b06:	80 91 f9 21 	lds	r24, 0x21F9	; 0x8021f9 <transfer+0x6>
    1b0a:	90 91 fa 21 	lds	r25, 0x21FA	; 0x8021fa <transfer+0x7>
    1b0e:	18 96       	adiw	r26, 0x08	; 8
    1b10:	2d 91       	ld	r18, X+
    1b12:	3c 91       	ld	r19, X
    1b14:	19 97       	sbiw	r26, 0x09	; 9
    1b16:	82 17       	cp	r24, r18
    1b18:	93 07       	cpc	r25, r19
    1b1a:	c8 f4       	brcc	.+50     	; 0x1b4e <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1b1c:	20 91 fb 21 	lds	r18, 0x21FB	; 0x8021fb <transfer+0x8>
    1b20:	22 23       	and	r18, r18
    1b22:	21 f0       	breq	.+8      	; 0x1b2c <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1b24:	86 81       	ldd	r24, Z+6	; 0x06
    1b26:	81 60       	ori	r24, 0x01	; 1
    1b28:	86 83       	std	Z+6, r24	; 0x06
    1b2a:	4b c0       	rjmp	.+150    	; 0x1bc2 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1b2c:	16 96       	adiw	r26, 0x06	; 6
    1b2e:	2d 91       	ld	r18, X+
    1b30:	3c 91       	ld	r19, X
    1b32:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1b34:	ac 01       	movw	r20, r24
    1b36:	4f 5f       	subi	r20, 0xFF	; 255
    1b38:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3a:	40 93 f9 21 	sts	0x21F9, r20	; 0x8021f9 <transfer+0x6>
    1b3e:	50 93 fa 21 	sts	0x21FA, r21	; 0x8021fa <transfer+0x7>
    1b42:	d9 01       	movw	r26, r18
    1b44:	a8 0f       	add	r26, r24
    1b46:	b9 1f       	adc	r27, r25
    1b48:	8c 91       	ld	r24, X
    1b4a:	87 83       	std	Z+7, r24	; 0x07
    1b4c:	3a c0       	rjmp	.+116    	; 0x1bc2 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1b4e:	83 e0       	ldi	r24, 0x03	; 3
    1b50:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1b52:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <transfer+0xa>
    1b56:	35 c0       	rjmp	.+106    	; 0x1bc2 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1b58:	88 23       	and	r24, r24
    1b5a:	84 f5       	brge	.+96     	; 0x1bbc <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1b5c:	a3 ef       	ldi	r26, 0xF3	; 243
    1b5e:	b1 e2       	ldi	r27, 0x21	; 33
    1b60:	12 96       	adiw	r26, 0x02	; 2
    1b62:	cd 91       	ld	r28, X+
    1b64:	dc 91       	ld	r29, X
    1b66:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1b68:	16 96       	adiw	r26, 0x06	; 6
    1b6a:	8d 91       	ld	r24, X+
    1b6c:	9c 91       	ld	r25, X
    1b6e:	17 97       	sbiw	r26, 0x07	; 7
    1b70:	28 85       	ldd	r18, Y+8	; 0x08
    1b72:	39 85       	ldd	r19, Y+9	; 0x09
    1b74:	82 17       	cp	r24, r18
    1b76:	93 07       	cpc	r25, r19
    1b78:	d8 f4       	brcc	.+54     	; 0x1bb0 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1b7a:	6e 81       	ldd	r22, Y+6	; 0x06
    1b7c:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1b7e:	9c 01       	movw	r18, r24
    1b80:	2f 5f       	subi	r18, 0xFF	; 255
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
    1b84:	20 93 f9 21 	sts	0x21F9, r18	; 0x8021f9 <transfer+0x6>
    1b88:	30 93 fa 21 	sts	0x21FA, r19	; 0x8021fa <transfer+0x7>
    1b8c:	47 81       	ldd	r20, Z+7	; 0x07
    1b8e:	db 01       	movw	r26, r22
    1b90:	a8 0f       	add	r26, r24
    1b92:	b9 1f       	adc	r27, r25
    1b94:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1b96:	88 85       	ldd	r24, Y+8	; 0x08
    1b98:	99 85       	ldd	r25, Y+9	; 0x09
    1b9a:	28 17       	cp	r18, r24
    1b9c:	39 07       	cpc	r19, r25
    1b9e:	18 f4       	brcc	.+6      	; 0x1ba6 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1ba0:	82 e0       	ldi	r24, 0x02	; 2
    1ba2:	83 83       	std	Z+3, r24	; 0x03
    1ba4:	0e c0       	rjmp	.+28     	; 0x1bc2 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1ba6:	87 e0       	ldi	r24, 0x07	; 7
    1ba8:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1baa:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <transfer+0xa>
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1bb0:	83 e0       	ldi	r24, 0x03	; 3
    1bb2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1bb4:	89 ef       	ldi	r24, 0xF9	; 249
    1bb6:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <transfer+0xa>
    1bba:	03 c0       	rjmp	.+6      	; 0x1bc2 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1bbc:	8b ef       	ldi	r24, 0xFB	; 251
    1bbe:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <transfer+0xa>
	}
}
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1bc8:	1f 92       	push	r1
    1bca:	0f 92       	push	r0
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	0f 92       	push	r0
    1bd0:	11 24       	eor	r1, r1
    1bd2:	0b b6       	in	r0, 0x3b	; 59
    1bd4:	0f 92       	push	r0
    1bd6:	2f 93       	push	r18
    1bd8:	3f 93       	push	r19
    1bda:	4f 93       	push	r20
    1bdc:	5f 93       	push	r21
    1bde:	6f 93       	push	r22
    1be0:	7f 93       	push	r23
    1be2:	8f 93       	push	r24
    1be4:	9f 93       	push	r25
    1be6:	af 93       	push	r26
    1be8:	bf 93       	push	r27
    1bea:	ef 93       	push	r30
    1bec:	ff 93       	push	r31
    1bee:	55 df       	rcall	.-342    	; 0x1a9a <twim_interrupt_handler>
    1bf0:	ff 91       	pop	r31
    1bf2:	ef 91       	pop	r30
    1bf4:	bf 91       	pop	r27
    1bf6:	af 91       	pop	r26
    1bf8:	9f 91       	pop	r25
    1bfa:	8f 91       	pop	r24
    1bfc:	7f 91       	pop	r23
    1bfe:	6f 91       	pop	r22
    1c00:	5f 91       	pop	r21
    1c02:	4f 91       	pop	r20
    1c04:	3f 91       	pop	r19
    1c06:	2f 91       	pop	r18
    1c08:	0f 90       	pop	r0
    1c0a:	0b be       	out	0x3b, r0	; 59
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	0f 90       	pop	r0
    1c12:	1f 90       	pop	r1
    1c14:	18 95       	reti

00001c16 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1c16:	1f 92       	push	r1
    1c18:	0f 92       	push	r0
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	0f 92       	push	r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	0b b6       	in	r0, 0x3b	; 59
    1c22:	0f 92       	push	r0
    1c24:	2f 93       	push	r18
    1c26:	3f 93       	push	r19
    1c28:	4f 93       	push	r20
    1c2a:	5f 93       	push	r21
    1c2c:	6f 93       	push	r22
    1c2e:	7f 93       	push	r23
    1c30:	8f 93       	push	r24
    1c32:	9f 93       	push	r25
    1c34:	af 93       	push	r26
    1c36:	bf 93       	push	r27
    1c38:	ef 93       	push	r30
    1c3a:	ff 93       	push	r31
    1c3c:	2e df       	rcall	.-420    	; 0x1a9a <twim_interrupt_handler>
    1c3e:	ff 91       	pop	r31
    1c40:	ef 91       	pop	r30
    1c42:	bf 91       	pop	r27
    1c44:	af 91       	pop	r26
    1c46:	9f 91       	pop	r25
    1c48:	8f 91       	pop	r24
    1c4a:	7f 91       	pop	r23
    1c4c:	6f 91       	pop	r22
    1c4e:	5f 91       	pop	r21
    1c50:	4f 91       	pop	r20
    1c52:	3f 91       	pop	r19
    1c54:	2f 91       	pop	r18
    1c56:	0f 90       	pop	r0
    1c58:	0b be       	out	0x3b, r0	; 59
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1c64:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    1c66:	db 01       	movw	r26, r22
    1c68:	14 96       	adiw	r26, 0x04	; 4
    1c6a:	8c 91       	ld	r24, X
    1c6c:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    1c6e:	88 eb       	ldi	r24, 0xB8	; 184
    1c70:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    1c76:	e3 ef       	ldi	r30, 0xF3	; 243
    1c78:	f1 e2       	ldi	r31, 0x21	; 33
    1c7a:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    1c7c:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    1c7e:	e0 ea       	ldi	r30, 0xA0	; 160
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	82 81       	ldd	r24, Z+2	; 0x02
    1c84:	82 60       	ori	r24, 0x02	; 2
    1c86:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    1c88:	78 94       	sei

	return STATUS_OK;
}
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	08 95       	ret

00001c8e <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	1f 92       	push	r1
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	9c 01       	movw	r18, r24
    1c9a:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1c9c:	89 2b       	or	r24, r25
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <twi_master_transfer+0x14>
    1ca0:	51 c0       	rjmp	.+162    	; 0x1d44 <twi_master_transfer+0xb6>
    1ca2:	30 97       	sbiw	r30, 0x00	; 0
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <twi_master_transfer+0x1a>
    1ca6:	50 c0       	rjmp	.+160    	; 0x1d48 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1ca8:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1caa:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <transfer+0x9>
    1cae:	88 23       	and	r24, r24
    1cb0:	19 f0       	breq	.+6      	; 0x1cb8 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    1cb2:	99 23       	and	r25, r25
    1cb4:	f1 f3       	breq	.-4      	; 0x1cb2 <twi_master_transfer+0x24>
    1cb6:	4a c0       	rjmp	.+148    	; 0x1d4c <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1cb8:	8f b7       	in	r24, 0x3f	; 63
    1cba:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1cbc:	f8 94       	cli
	return flags;
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1cc0:	a3 ef       	ldi	r26, 0xF3	; 243
    1cc2:	b1 e2       	ldi	r27, 0x21	; 33
    1cc4:	91 e0       	ldi	r25, 0x01	; 1
    1cc6:	19 96       	adiw	r26, 0x09	; 9
    1cc8:	9c 93       	st	X, r25
    1cca:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    1ccc:	90 e8       	ldi	r25, 0x80	; 128
    1cce:	1a 96       	adiw	r26, 0x0a	; 10
    1cd0:	9c 93       	st	X, r25
    1cd2:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1cd4:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1cd6:	2d 93       	st	X+, r18
    1cd8:	3c 93       	st	X, r19
    1cda:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    1cdc:	12 96       	adiw	r26, 0x02	; 2
    1cde:	6d 93       	st	X+, r22
    1ce0:	7c 93       	st	X, r23
    1ce2:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    1ce4:	14 96       	adiw	r26, 0x04	; 4
    1ce6:	1d 92       	st	X+, r1
    1ce8:	1c 92       	st	X, r1
    1cea:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    1cec:	16 96       	adiw	r26, 0x06	; 6
    1cee:	1d 92       	st	X+, r1
    1cf0:	1c 92       	st	X, r1
    1cf2:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    1cf4:	18 96       	adiw	r26, 0x08	; 8
    1cf6:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    1cf8:	80 81       	ld	r24, Z
    1cfa:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    1cfc:	64 81       	ldd	r22, Z+4	; 0x04
    1cfe:	75 81       	ldd	r23, Z+5	; 0x05
    1d00:	67 2b       	or	r22, r23
    1d02:	11 f4       	brne	.+4      	; 0x1d08 <twi_master_transfer+0x7a>
    1d04:	41 11       	cpse	r20, r1
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    1d08:	f9 01       	movw	r30, r18
    1d0a:	86 83       	std	Z+6, r24	; 0x06
    1d0c:	03 c0       	rjmp	.+6      	; 0x1d14 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    1d0e:	81 60       	ori	r24, 0x01	; 1
    1d10:	f9 01       	movw	r30, r18
    1d12:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    1d14:	e3 ef       	ldi	r30, 0xF3	; 243
    1d16:	f1 e2       	ldi	r31, 0x21	; 33
    1d18:	92 85       	ldd	r25, Z+10	; 0x0a
    1d1a:	90 38       	cpi	r25, 0x80	; 128
    1d1c:	e9 f3       	breq	.-6      	; 0x1d18 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1d1e:	f9 01       	movw	r30, r18
    1d20:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1d22:	83 70       	andi	r24, 0x03	; 3
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	49 f0       	breq	.+18     	; 0x1d3a <twi_master_transfer+0xac>
    1d28:	a3 ef       	ldi	r26, 0xF3	; 243
    1d2a:	b1 e2       	ldi	r27, 0x21	; 33
    1d2c:	ed 91       	ld	r30, X+
    1d2e:	fc 91       	ld	r31, X
    1d30:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1d32:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1d34:	83 70       	andi	r24, 0x03	; 3
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	c9 f7       	brne	.-14     	; 0x1d2c <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    1d3a:	e3 ef       	ldi	r30, 0xF3	; 243
    1d3c:	f1 e2       	ldi	r31, 0x21	; 33
    1d3e:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    1d40:	11 86       	std	Z+9, r1	; 0x09
    1d42:	05 c0       	rjmp	.+10     	; 0x1d4e <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    1d44:	88 ef       	ldi	r24, 0xF8	; 248
    1d46:	03 c0       	rjmp	.+6      	; 0x1d4e <twi_master_transfer+0xc0>
    1d48:	88 ef       	ldi	r24, 0xF8	; 248
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    1d4c:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1d4e:	0f 90       	pop	r0
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	08 95       	ret

00001d56 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	1f 92       	push	r1
    1d5c:	1f 92       	push	r1
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	81 11       	cpse	r24, r1
    1d64:	26 c0       	rjmp	.+76     	; 0x1db2 <udd_sleep_mode+0x5c>
    1d66:	90 91 28 23 	lds	r25, 0x2328	; 0x802328 <udd_b_idle>
    1d6a:	99 23       	and	r25, r25
    1d6c:	f9 f0       	breq	.+62     	; 0x1dac <udd_sleep_mode+0x56>
    1d6e:	90 91 8a 24 	lds	r25, 0x248A	; 0x80248a <sleepmgr_locks+0x1>
    1d72:	91 11       	cpse	r25, r1
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <udd_sleep_mode+0x22>
    1d76:	ff cf       	rjmp	.-2      	; 0x1d76 <udd_sleep_mode+0x20>
    1d78:	9f b7       	in	r25, 0x3f	; 63
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	f8 94       	cli
    1d7e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d80:	e9 e8       	ldi	r30, 0x89	; 137
    1d82:	f4 e2       	ldi	r31, 0x24	; 36
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	91 50       	subi	r25, 0x01	; 1
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	2f bf       	out	0x3f, r18	; 63
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <udd_sleep_mode+0x56>
    1d8e:	90 91 8a 24 	lds	r25, 0x248A	; 0x80248a <sleepmgr_locks+0x1>
    1d92:	9f 3f       	cpi	r25, 0xFF	; 255
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <udd_sleep_mode+0x42>
    1d96:	ff cf       	rjmp	.-2      	; 0x1d96 <udd_sleep_mode+0x40>
    1d98:	9f b7       	in	r25, 0x3f	; 63
    1d9a:	99 83       	std	Y+1, r25	; 0x01
    1d9c:	f8 94       	cli
    1d9e:	29 81       	ldd	r18, Y+1	; 0x01
    1da0:	e9 e8       	ldi	r30, 0x89	; 137
    1da2:	f4 e2       	ldi	r31, 0x24	; 36
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	9f 5f       	subi	r25, 0xFF	; 255
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	2f bf       	out	0x3f, r18	; 63
    1dac:	80 93 28 23 	sts	0x2328, r24	; 0x802328 <udd_b_idle>
    1db0:	05 c0       	rjmp	.+10     	; 0x1dbc <udd_sleep_mode+0x66>
    1db2:	90 91 28 23 	lds	r25, 0x2328	; 0x802328 <udd_b_idle>
    1db6:	99 23       	and	r25, r25
    1db8:	51 f3       	breq	.-44     	; 0x1d8e <udd_sleep_mode+0x38>
    1dba:	f8 cf       	rjmp	.-16     	; 0x1dac <udd_sleep_mode+0x56>
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	08 95       	ret

00001dc6 <udd_ctrl_init>:
    1dc6:	0f 93       	push	r16
    1dc8:	e8 ec       	ldi	r30, 0xC8	; 200
    1dca:	f4 e0       	ldi	r31, 0x04	; 4
    1dcc:	80 81       	ld	r24, Z
    1dce:	8f 7d       	andi	r24, 0xDF	; 223
    1dd0:	80 83       	st	Z, r24
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8f 7d       	andi	r24, 0xDF	; 223
    1dd6:	80 83       	st	Z, r24
    1dd8:	ec ef       	ldi	r30, 0xFC	; 252
    1dda:	f2 e2       	ldi	r31, 0x22	; 34
    1ddc:	02 e0       	ldi	r16, 0x02	; 2
    1dde:	05 93       	las	Z, r16
    1de0:	10 92 fe 22 	sts	0x22FE, r1	; 0x8022fe <udd_sram+0x16>
    1de4:	10 92 ff 22 	sts	0x22FF, r1	; 0x8022ff <udd_sram+0x17>
    1de8:	00 e2       	ldi	r16, 0x20	; 32
    1dea:	06 93       	lac	Z, r16
    1dec:	00 e4       	ldi	r16, 0x40	; 64
    1dee:	06 93       	lac	Z, r16
    1df0:	e4 ef       	ldi	r30, 0xF4	; 244
    1df2:	f2 e2       	ldi	r31, 0x22	; 34
    1df4:	00 e4       	ldi	r16, 0x40	; 64
    1df6:	06 93       	lac	Z, r16
    1df8:	e9 e7       	ldi	r30, 0x79	; 121
    1dfa:	f4 e2       	ldi	r31, 0x24	; 36
    1dfc:	14 86       	std	Z+12, r1	; 0x0c
    1dfe:	15 86       	std	Z+13, r1	; 0x0d
    1e00:	16 86       	std	Z+14, r1	; 0x0e
    1e02:	17 86       	std	Z+15, r1	; 0x0f
    1e04:	12 86       	std	Z+10, r1	; 0x0a
    1e06:	13 86       	std	Z+11, r1	; 0x0b
    1e08:	10 92 e7 22 	sts	0x22E7, r1	; 0x8022e7 <udd_ep_control_state>
    1e0c:	0f 91       	pop	r16
    1e0e:	08 95       	ret

00001e10 <udd_ctrl_stall_data>:
    1e10:	0f 93       	push	r16
    1e12:	85 e0       	ldi	r24, 0x05	; 5
    1e14:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <udd_ep_control_state>
    1e18:	ed ef       	ldi	r30, 0xFD	; 253
    1e1a:	f2 e2       	ldi	r31, 0x22	; 34
    1e1c:	04 e0       	ldi	r16, 0x04	; 4
    1e1e:	05 93       	las	Z, r16
    1e20:	e5 ef       	ldi	r30, 0xF5	; 245
    1e22:	f2 e2       	ldi	r31, 0x22	; 34
    1e24:	04 e0       	ldi	r16, 0x04	; 4
    1e26:	05 93       	las	Z, r16
    1e28:	0f 91       	pop	r16
    1e2a:	08 95       	ret

00001e2c <udd_ctrl_send_zlp_in>:
    1e2c:	0f 93       	push	r16
    1e2e:	83 e0       	ldi	r24, 0x03	; 3
    1e30:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <udd_ep_control_state>
    1e34:	10 92 fe 22 	sts	0x22FE, r1	; 0x8022fe <udd_sram+0x16>
    1e38:	10 92 ff 22 	sts	0x22FF, r1	; 0x8022ff <udd_sram+0x17>
    1e3c:	ec ef       	ldi	r30, 0xFC	; 252
    1e3e:	f2 e2       	ldi	r31, 0x22	; 34
    1e40:	02 e0       	ldi	r16, 0x02	; 2
    1e42:	06 93       	lac	Z, r16
    1e44:	0f 91       	pop	r16
    1e46:	08 95       	ret

00001e48 <udd_ctrl_endofrequest>:
    1e48:	e0 91 85 24 	lds	r30, 0x2485	; 0x802485 <udd_g_ctrlreq+0xc>
    1e4c:	f0 91 86 24 	lds	r31, 0x2486	; 0x802486 <udd_g_ctrlreq+0xd>
    1e50:	30 97       	sbiw	r30, 0x00	; 0
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <udd_ctrl_endofrequest+0xe>
    1e54:	19 95       	eicall
    1e56:	08 95       	ret

00001e58 <udd_ctrl_in_sent>:
    1e58:	0f 93       	push	r16
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <udd_ep_control_state>
    1e62:	83 30       	cpi	r24, 0x03	; 3
    1e64:	19 f4       	brne	.+6      	; 0x1e6c <udd_ctrl_in_sent+0x14>
    1e66:	f0 df       	rcall	.-32     	; 0x1e48 <udd_ctrl_endofrequest>
    1e68:	ae df       	rcall	.-164    	; 0x1dc6 <udd_ctrl_init>
    1e6a:	5e c0       	rjmp	.+188    	; 0x1f28 <udd_ctrl_in_sent+0xd0>
    1e6c:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <udd_ctrl_payload_nb_trans>
    1e70:	90 91 e4 22 	lds	r25, 0x22E4	; 0x8022e4 <udd_ctrl_payload_nb_trans+0x1>
    1e74:	c0 91 83 24 	lds	r28, 0x2483	; 0x802483 <udd_g_ctrlreq+0xa>
    1e78:	d0 91 84 24 	lds	r29, 0x2484	; 0x802484 <udd_g_ctrlreq+0xb>
    1e7c:	c8 1b       	sub	r28, r24
    1e7e:	d9 0b       	sbc	r29, r25
    1e80:	71 f5       	brne	.+92     	; 0x1ede <udd_ctrl_in_sent+0x86>
    1e82:	20 91 e5 22 	lds	r18, 0x22E5	; 0x8022e5 <udd_ctrl_prev_payload_nb_trans>
    1e86:	30 91 e6 22 	lds	r19, 0x22E6	; 0x8022e6 <udd_ctrl_prev_payload_nb_trans+0x1>
    1e8a:	82 0f       	add	r24, r18
    1e8c:	93 1f       	adc	r25, r19
    1e8e:	80 93 e5 22 	sts	0x22E5, r24	; 0x8022e5 <udd_ctrl_prev_payload_nb_trans>
    1e92:	90 93 e6 22 	sts	0x22E6, r25	; 0x8022e6 <udd_ctrl_prev_payload_nb_trans+0x1>
    1e96:	20 91 7f 24 	lds	r18, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    1e9a:	30 91 80 24 	lds	r19, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    1e9e:	82 17       	cp	r24, r18
    1ea0:	93 07       	cpc	r25, r19
    1ea2:	21 f0       	breq	.+8      	; 0x1eac <udd_ctrl_in_sent+0x54>
    1ea4:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <b_shortpacket.5472>
    1ea8:	88 23       	and	r24, r24
    1eaa:	41 f0       	breq	.+16     	; 0x1ebc <udd_ctrl_in_sent+0x64>
    1eac:	84 e0       	ldi	r24, 0x04	; 4
    1eae:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <udd_ep_control_state>
    1eb2:	e4 ef       	ldi	r30, 0xF4	; 244
    1eb4:	f2 e2       	ldi	r31, 0x22	; 34
    1eb6:	02 e0       	ldi	r16, 0x02	; 2
    1eb8:	06 93       	lac	Z, r16
    1eba:	36 c0       	rjmp	.+108    	; 0x1f28 <udd_ctrl_in_sent+0xd0>
    1ebc:	e0 91 87 24 	lds	r30, 0x2487	; 0x802487 <udd_g_ctrlreq+0xe>
    1ec0:	f0 91 88 24 	lds	r31, 0x2488	; 0x802488 <udd_g_ctrlreq+0xf>
    1ec4:	30 97       	sbiw	r30, 0x00	; 0
    1ec6:	99 f0       	breq	.+38     	; 0x1eee <udd_ctrl_in_sent+0x96>
    1ec8:	19 95       	eicall
    1eca:	88 23       	and	r24, r24
    1ecc:	81 f0       	breq	.+32     	; 0x1eee <udd_ctrl_in_sent+0x96>
    1ece:	10 92 e3 22 	sts	0x22E3, r1	; 0x8022e3 <udd_ctrl_payload_nb_trans>
    1ed2:	10 92 e4 22 	sts	0x22E4, r1	; 0x8022e4 <udd_ctrl_payload_nb_trans+0x1>
    1ed6:	c0 91 83 24 	lds	r28, 0x2483	; 0x802483 <udd_g_ctrlreq+0xa>
    1eda:	d0 91 84 24 	lds	r29, 0x2484	; 0x802484 <udd_g_ctrlreq+0xb>
    1ede:	c0 34       	cpi	r28, 0x40	; 64
    1ee0:	d1 05       	cpc	r29, r1
    1ee2:	28 f0       	brcs	.+10     	; 0x1eee <udd_ctrl_in_sent+0x96>
    1ee4:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <b_shortpacket.5472>
    1ee8:	c0 e4       	ldi	r28, 0x40	; 64
    1eea:	d0 e0       	ldi	r29, 0x00	; 0
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <udd_ctrl_in_sent+0x9c>
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	80 93 fe 21 	sts	0x21FE, r24	; 0x8021fe <b_shortpacket.5472>
    1ef4:	e8 ee       	ldi	r30, 0xE8	; 232
    1ef6:	f2 e2       	ldi	r31, 0x22	; 34
    1ef8:	c6 8b       	std	Z+22, r28	; 0x16
    1efa:	d7 8b       	std	Z+23, r29	; 0x17
    1efc:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <udd_ctrl_payload_nb_trans>
    1f00:	90 91 e4 22 	lds	r25, 0x22E4	; 0x8022e4 <udd_ctrl_payload_nb_trans+0x1>
    1f04:	20 91 81 24 	lds	r18, 0x2481	; 0x802481 <udd_g_ctrlreq+0x8>
    1f08:	30 91 82 24 	lds	r19, 0x2482	; 0x802482 <udd_g_ctrlreq+0x9>
    1f0c:	28 0f       	add	r18, r24
    1f0e:	39 1f       	adc	r19, r25
    1f10:	20 8f       	std	Z+24, r18	; 0x18
    1f12:	31 8f       	std	Z+25, r19	; 0x19
    1f14:	c8 0f       	add	r28, r24
    1f16:	d9 1f       	adc	r29, r25
    1f18:	c0 93 e3 22 	sts	0x22E3, r28	; 0x8022e3 <udd_ctrl_payload_nb_trans>
    1f1c:	d0 93 e4 22 	sts	0x22E4, r29	; 0x8022e4 <udd_ctrl_payload_nb_trans+0x1>
    1f20:	ec ef       	ldi	r30, 0xFC	; 252
    1f22:	f2 e2       	ldi	r31, 0x22	; 34
    1f24:	02 e0       	ldi	r16, 0x02	; 2
    1f26:	06 93       	lac	Z, r16
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	0f 91       	pop	r16
    1f2e:	08 95       	ret

00001f30 <udd_ep_get_size>:
    1f30:	fc 01       	movw	r30, r24
    1f32:	81 81       	ldd	r24, Z+1	; 0x01
    1f34:	e8 2f       	mov	r30, r24
    1f36:	e7 70       	andi	r30, 0x07	; 7
    1f38:	8e 2f       	mov	r24, r30
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	31 97       	sbiw	r30, 0x01	; 1
    1f40:	e7 30       	cpi	r30, 0x07	; 7
    1f42:	f1 05       	cpc	r31, r1
    1f44:	d8 f4       	brcc	.+54     	; 0x1f7c <udd_ep_get_size+0x4c>
    1f46:	88 27       	eor	r24, r24
    1f48:	e2 50       	subi	r30, 0x02	; 2
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4e:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <__tablejump2__>
    1f52:	80 e1       	ldi	r24, 0x10	; 16
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	08 95       	ret
    1f58:	80 e2       	ldi	r24, 0x20	; 32
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	08 95       	ret
    1f5e:	80 e4       	ldi	r24, 0x40	; 64
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	08 95       	ret
    1f64:	80 e8       	ldi	r24, 0x80	; 128
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	08 95       	ret
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	08 95       	ret
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	92 e0       	ldi	r25, 0x02	; 2
    1f74:	08 95       	ret
    1f76:	8f ef       	ldi	r24, 0xFF	; 255
    1f78:	93 e0       	ldi	r25, 0x03	; 3
    1f7a:	08 95       	ret
    1f7c:	88 e0       	ldi	r24, 0x08	; 8
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	08 95       	ret

00001f82 <udd_ep_get_job>:
    1f82:	28 2f       	mov	r18, r24
    1f84:	2f 70       	andi	r18, 0x0F	; 15
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	22 0f       	add	r18, r18
    1f8a:	33 1f       	adc	r19, r19
    1f8c:	08 2e       	mov	r0, r24
    1f8e:	00 0c       	add	r0, r0
    1f90:	99 0b       	sbc	r25, r25
    1f92:	88 27       	eor	r24, r24
    1f94:	99 0f       	add	r25, r25
    1f96:	88 1f       	adc	r24, r24
    1f98:	99 27       	eor	r25, r25
    1f9a:	82 0f       	add	r24, r18
    1f9c:	93 1f       	adc	r25, r19
    1f9e:	02 97       	sbiw	r24, 0x02	; 2
    1fa0:	9c 01       	movw	r18, r24
    1fa2:	22 0f       	add	r18, r18
    1fa4:	33 1f       	adc	r19, r19
    1fa6:	22 0f       	add	r18, r18
    1fa8:	33 1f       	adc	r19, r19
    1faa:	22 0f       	add	r18, r18
    1fac:	33 1f       	adc	r19, r19
    1fae:	82 0f       	add	r24, r18
    1fb0:	93 1f       	adc	r25, r19
    1fb2:	81 58       	subi	r24, 0x81	; 129
    1fb4:	9d 4d       	sbci	r25, 0xDD	; 221
    1fb6:	08 95       	ret

00001fb8 <udd_ctrl_interrupt_tc_setup>:
    1fb8:	0f 93       	push	r16
    1fba:	cf 93       	push	r28
    1fbc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1fc0:	80 ff       	sbrs	r24, 0
    1fc2:	65 c0       	rjmp	.+202    	; 0x208e <udd_ctrl_interrupt_tc_setup+0xd6>
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1fca:	e4 ef       	ldi	r30, 0xF4	; 244
    1fcc:	f2 e2       	ldi	r31, 0x22	; 34
    1fce:	00 e8       	ldi	r16, 0x80	; 128
    1fd0:	06 93       	lac	Z, r16
    1fd2:	ec ef       	ldi	r30, 0xFC	; 252
    1fd4:	f2 e2       	ldi	r31, 0x22	; 34
    1fd6:	00 e8       	ldi	r16, 0x80	; 128
    1fd8:	06 93       	lac	Z, r16
    1fda:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1fde:	e4 ef       	ldi	r30, 0xF4	; 244
    1fe0:	f2 e2       	ldi	r31, 0x22	; 34
    1fe2:	00 e1       	ldi	r16, 0x10	; 16
    1fe4:	06 93       	lac	Z, r16
    1fe6:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <udd_ep_control_state>
    1fea:	88 23       	and	r24, r24
    1fec:	29 f0       	breq	.+10     	; 0x1ff8 <udd_ctrl_interrupt_tc_setup+0x40>
    1fee:	83 50       	subi	r24, 0x03	; 3
    1ff0:	82 30       	cpi	r24, 0x02	; 2
    1ff2:	08 f4       	brcc	.+2      	; 0x1ff6 <udd_ctrl_interrupt_tc_setup+0x3e>
    1ff4:	29 df       	rcall	.-430    	; 0x1e48 <udd_ctrl_endofrequest>
    1ff6:	e7 de       	rcall	.-562    	; 0x1dc6 <udd_ctrl_init>
    1ff8:	80 91 f6 22 	lds	r24, 0x22F6	; 0x8022f6 <udd_sram+0xe>
    1ffc:	90 91 f7 22 	lds	r25, 0x22F7	; 0x8022f7 <udd_sram+0xf>
    2000:	08 97       	sbiw	r24, 0x08	; 8
    2002:	09 f0       	breq	.+2      	; 0x2006 <udd_ctrl_interrupt_tc_setup+0x4e>
    2004:	46 c0       	rjmp	.+140    	; 0x2092 <udd_ctrl_interrupt_tc_setup+0xda>
    2006:	88 e0       	ldi	r24, 0x08	; 8
    2008:	e3 ea       	ldi	r30, 0xA3	; 163
    200a:	f2 e2       	ldi	r31, 0x22	; 34
    200c:	a9 e7       	ldi	r26, 0x79	; 121
    200e:	b4 e2       	ldi	r27, 0x24	; 36
    2010:	01 90       	ld	r0, Z+
    2012:	0d 92       	st	X+, r0
    2014:	8a 95       	dec	r24
    2016:	e1 f7       	brne	.-8      	; 0x2010 <udd_ctrl_interrupt_tc_setup+0x58>
    2018:	e8 ec       	ldi	r30, 0xC8	; 200
    201a:	f4 e0       	ldi	r31, 0x04	; 4
    201c:	80 81       	ld	r24, Z
    201e:	80 62       	ori	r24, 0x20	; 32
    2020:	80 83       	st	Z, r24
    2022:	80 81       	ld	r24, Z
    2024:	80 62       	ori	r24, 0x20	; 32
    2026:	80 83       	st	Z, r24
    2028:	0e 94 3e 20 	call	0x407c	; 0x407c <udc_process_setup>
    202c:	c8 2f       	mov	r28, r24
    202e:	81 11       	cpse	r24, r1
    2030:	03 c0       	rjmp	.+6      	; 0x2038 <udd_ctrl_interrupt_tc_setup+0x80>
    2032:	ee de       	rcall	.-548    	; 0x1e10 <udd_ctrl_stall_data>
    2034:	c1 e0       	ldi	r28, 0x01	; 1
    2036:	2e c0       	rjmp	.+92     	; 0x2094 <udd_ctrl_interrupt_tc_setup+0xdc>
    2038:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq>
    203c:	88 23       	and	r24, r24
    203e:	6c f4       	brge	.+26     	; 0x205a <udd_ctrl_interrupt_tc_setup+0xa2>
    2040:	10 92 e5 22 	sts	0x22E5, r1	; 0x8022e5 <udd_ctrl_prev_payload_nb_trans>
    2044:	10 92 e6 22 	sts	0x22E6, r1	; 0x8022e6 <udd_ctrl_prev_payload_nb_trans+0x1>
    2048:	10 92 e3 22 	sts	0x22E3, r1	; 0x8022e3 <udd_ctrl_payload_nb_trans>
    204c:	10 92 e4 22 	sts	0x22E4, r1	; 0x8022e4 <udd_ctrl_payload_nb_trans+0x1>
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <udd_ep_control_state>
    2056:	00 df       	rcall	.-512    	; 0x1e58 <udd_ctrl_in_sent>
    2058:	1d c0       	rjmp	.+58     	; 0x2094 <udd_ctrl_interrupt_tc_setup+0xdc>
    205a:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    205e:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    2062:	89 2b       	or	r24, r25
    2064:	11 f4       	brne	.+4      	; 0x206a <udd_ctrl_interrupt_tc_setup+0xb2>
    2066:	e2 de       	rcall	.-572    	; 0x1e2c <udd_ctrl_send_zlp_in>
    2068:	15 c0       	rjmp	.+42     	; 0x2094 <udd_ctrl_interrupt_tc_setup+0xdc>
    206a:	10 92 e5 22 	sts	0x22E5, r1	; 0x8022e5 <udd_ctrl_prev_payload_nb_trans>
    206e:	10 92 e6 22 	sts	0x22E6, r1	; 0x8022e6 <udd_ctrl_prev_payload_nb_trans+0x1>
    2072:	10 92 e3 22 	sts	0x22E3, r1	; 0x8022e3 <udd_ctrl_payload_nb_trans>
    2076:	10 92 e4 22 	sts	0x22E4, r1	; 0x8022e4 <udd_ctrl_payload_nb_trans+0x1>
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <udd_ep_control_state>
    2080:	e4 ef       	ldi	r30, 0xF4	; 244
    2082:	f2 e2       	ldi	r31, 0x22	; 34
    2084:	02 e0       	ldi	r16, 0x02	; 2
    2086:	06 93       	lac	Z, r16
    2088:	00 e2       	ldi	r16, 0x20	; 32
    208a:	06 93       	lac	Z, r16
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <udd_ctrl_interrupt_tc_setup+0xdc>
    208e:	c0 e0       	ldi	r28, 0x00	; 0
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <udd_ctrl_interrupt_tc_setup+0xdc>
    2092:	c1 e0       	ldi	r28, 0x01	; 1
    2094:	8c 2f       	mov	r24, r28
    2096:	cf 91       	pop	r28
    2098:	0f 91       	pop	r16
    209a:	08 95       	ret

0000209c <udd_ep_trans_complet>:
    209c:	8f 92       	push	r8
    209e:	9f 92       	push	r9
    20a0:	af 92       	push	r10
    20a2:	bf 92       	push	r11
    20a4:	df 92       	push	r13
    20a6:	ef 92       	push	r14
    20a8:	ff 92       	push	r15
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	d8 2e       	mov	r13, r24
    20b4:	66 df       	rcall	.-308    	; 0x1f82 <udd_ep_get_job>
    20b6:	8c 01       	movw	r16, r24
    20b8:	cd 2d       	mov	r28, r13
    20ba:	cf 70       	andi	r28, 0x0F	; 15
    20bc:	d0 e0       	ldi	r29, 0x00	; 0
    20be:	ce 01       	movw	r24, r28
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	cd 2d       	mov	r28, r13
    20c6:	0d 2c       	mov	r0, r13
    20c8:	00 0c       	add	r0, r0
    20ca:	dd 0b       	sbc	r29, r29
    20cc:	cc 27       	eor	r28, r28
    20ce:	dd 0f       	add	r29, r29
    20d0:	cc 1f       	adc	r28, r28
    20d2:	dd 27       	eor	r29, r29
    20d4:	c8 0f       	add	r28, r24
    20d6:	d9 1f       	adc	r29, r25
    20d8:	ce 01       	movw	r24, r28
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	9c 01       	movw	r18, r24
    20e8:	2c 50       	subi	r18, 0x0C	; 12
    20ea:	3d 4d       	sbci	r19, 0xDD	; 221
    20ec:	79 01       	movw	r14, r18
    20ee:	c9 01       	movw	r24, r18
    20f0:	1f df       	rcall	.-450    	; 0x1f30 <udd_ep_get_size>
    20f2:	4c 01       	movw	r8, r24
    20f4:	dd 20       	and	r13, r13
    20f6:	0c f0       	brlt	.+2      	; 0x20fa <udd_ep_trans_complet+0x5e>
    20f8:	7b c0       	rjmp	.+246    	; 0x21f0 <udd_ep_trans_complet+0x154>
    20fa:	fe 01       	movw	r30, r28
    20fc:	ee 0f       	add	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	ee 0f       	add	r30, r30
    2102:	ff 1f       	adc	r31, r31
    2104:	ee 0f       	add	r30, r30
    2106:	ff 1f       	adc	r31, r31
    2108:	e8 51       	subi	r30, 0x18	; 24
    210a:	fd 4d       	sbci	r31, 0xDD	; 221
    210c:	22 89       	ldd	r18, Z+18	; 0x12
    210e:	33 89       	ldd	r19, Z+19	; 0x13
    2110:	d8 01       	movw	r26, r16
    2112:	15 96       	adiw	r26, 0x05	; 5
    2114:	8d 91       	ld	r24, X+
    2116:	9c 91       	ld	r25, X
    2118:	16 97       	sbiw	r26, 0x06	; 6
    211a:	82 0f       	add	r24, r18
    211c:	93 1f       	adc	r25, r19
    211e:	15 96       	adiw	r26, 0x05	; 5
    2120:	8d 93       	st	X+, r24
    2122:	9c 93       	st	X, r25
    2124:	16 97       	sbiw	r26, 0x06	; 6
    2126:	13 96       	adiw	r26, 0x03	; 3
    2128:	2d 91       	ld	r18, X+
    212a:	3c 91       	ld	r19, X
    212c:	14 97       	sbiw	r26, 0x04	; 4
    212e:	82 17       	cp	r24, r18
    2130:	93 07       	cpc	r25, r19
    2132:	09 f4       	brne	.+2      	; 0x2136 <udd_ep_trans_complet+0x9a>
    2134:	47 c0       	rjmp	.+142    	; 0x21c4 <udd_ep_trans_complet+0x128>
    2136:	28 1b       	sub	r18, r24
    2138:	39 0b       	sbc	r19, r25
    213a:	21 15       	cp	r18, r1
    213c:	b4 e0       	ldi	r27, 0x04	; 4
    213e:	3b 07       	cpc	r19, r27
    2140:	40 f0       	brcs	.+16     	; 0x2152 <udd_ep_trans_complet+0xb6>
    2142:	2f ef       	ldi	r18, 0xFF	; 255
    2144:	33 e0       	ldi	r19, 0x03	; 3
    2146:	c9 01       	movw	r24, r18
    2148:	b4 01       	movw	r22, r8
    214a:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__udivmodhi4>
    214e:	28 1b       	sub	r18, r24
    2150:	39 0b       	sbc	r19, r25
    2152:	f8 01       	movw	r30, r16
    2154:	80 81       	ld	r24, Z
    2156:	81 ff       	sbrs	r24, 1
    2158:	0a c0       	rjmp	.+20     	; 0x216e <udd_ep_trans_complet+0xd2>
    215a:	c9 01       	movw	r24, r18
    215c:	b4 01       	movw	r22, r8
    215e:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__udivmodhi4>
    2162:	41 e0       	ldi	r20, 0x01	; 1
    2164:	89 2b       	or	r24, r25
    2166:	09 f0       	breq	.+2      	; 0x216a <udd_ep_trans_complet+0xce>
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	84 2f       	mov	r24, r20
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <udd_ep_trans_complet+0xd4>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	d8 01       	movw	r26, r16
    2172:	9c 91       	ld	r25, X
    2174:	80 fb       	bst	r24, 0
    2176:	91 f9       	bld	r25, 1
    2178:	9c 93       	st	X, r25
    217a:	fe 01       	movw	r30, r28
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	e8 51       	subi	r30, 0x18	; 24
    218a:	fd 4d       	sbci	r31, 0xDD	; 221
    218c:	12 8a       	std	Z+18, r1	; 0x12
    218e:	13 8a       	std	Z+19, r1	; 0x13
    2190:	26 87       	std	Z+14, r18	; 0x0e
    2192:	37 87       	std	Z+15, r19	; 0x0f
    2194:	11 96       	adiw	r26, 0x01	; 1
    2196:	2d 91       	ld	r18, X+
    2198:	3c 91       	ld	r19, X
    219a:	12 97       	sbiw	r26, 0x02	; 2
    219c:	15 96       	adiw	r26, 0x05	; 5
    219e:	8d 91       	ld	r24, X+
    21a0:	9c 91       	ld	r25, X
    21a2:	16 97       	sbiw	r26, 0x06	; 6
    21a4:	82 0f       	add	r24, r18
    21a6:	93 1f       	adc	r25, r19
    21a8:	cc 0f       	add	r28, r28
    21aa:	dd 1f       	adc	r29, r29
    21ac:	cc 0f       	add	r28, r28
    21ae:	dd 1f       	adc	r29, r29
    21b0:	cc 0f       	add	r28, r28
    21b2:	dd 1f       	adc	r29, r29
    21b4:	c8 50       	subi	r28, 0x08	; 8
    21b6:	dd 4d       	sbci	r29, 0xDD	; 221
    21b8:	88 83       	st	Y, r24
    21ba:	99 83       	std	Y+1, r25	; 0x01
    21bc:	f7 01       	movw	r30, r14
    21be:	02 e0       	ldi	r16, 0x02	; 2
    21c0:	06 93       	lac	Z, r16
    21c2:	e4 c0       	rjmp	.+456    	; 0x238c <udd_ep_trans_complet+0x2f0>
    21c4:	d8 01       	movw	r26, r16
    21c6:	8c 91       	ld	r24, X
    21c8:	81 ff       	sbrs	r24, 1
    21ca:	cd c0       	rjmp	.+410    	; 0x2366 <udd_ep_trans_complet+0x2ca>
    21cc:	8d 7f       	andi	r24, 0xFD	; 253
    21ce:	8c 93       	st	X, r24
    21d0:	cc 0f       	add	r28, r28
    21d2:	dd 1f       	adc	r29, r29
    21d4:	cc 0f       	add	r28, r28
    21d6:	dd 1f       	adc	r29, r29
    21d8:	cc 0f       	add	r28, r28
    21da:	dd 1f       	adc	r29, r29
    21dc:	c8 51       	subi	r28, 0x18	; 24
    21de:	dd 4d       	sbci	r29, 0xDD	; 221
    21e0:	1a 8a       	std	Y+18, r1	; 0x12
    21e2:	1b 8a       	std	Y+19, r1	; 0x13
    21e4:	1e 86       	std	Y+14, r1	; 0x0e
    21e6:	1f 86       	std	Y+15, r1	; 0x0f
    21e8:	f7 01       	movw	r30, r14
    21ea:	02 e0       	ldi	r16, 0x02	; 2
    21ec:	06 93       	lac	Z, r16
    21ee:	ce c0       	rjmp	.+412    	; 0x238c <udd_ep_trans_complet+0x2f0>
    21f0:	fe 01       	movw	r30, r28
    21f2:	ee 0f       	add	r30, r30
    21f4:	ff 1f       	adc	r31, r31
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	ee 0f       	add	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	e8 51       	subi	r30, 0x18	; 24
    2200:	fd 4d       	sbci	r31, 0xDD	; 221
    2202:	a6 84       	ldd	r10, Z+14	; 0x0e
    2204:	b7 84       	ldd	r11, Z+15	; 0x0f
    2206:	d8 01       	movw	r26, r16
    2208:	8c 91       	ld	r24, X
    220a:	82 ff       	sbrs	r24, 2
    220c:	1b c0       	rjmp	.+54     	; 0x2244 <udd_ep_trans_complet+0x1a8>
    220e:	11 96       	adiw	r26, 0x01	; 1
    2210:	ed 91       	ld	r30, X+
    2212:	fc 91       	ld	r31, X
    2214:	12 97       	sbiw	r26, 0x02	; 2
    2216:	15 96       	adiw	r26, 0x05	; 5
    2218:	2d 91       	ld	r18, X+
    221a:	3c 91       	ld	r19, X
    221c:	16 97       	sbiw	r26, 0x06	; 6
    221e:	13 96       	adiw	r26, 0x03	; 3
    2220:	8d 91       	ld	r24, X+
    2222:	9c 91       	ld	r25, X
    2224:	14 97       	sbiw	r26, 0x04	; 4
    2226:	b4 01       	movw	r22, r8
    2228:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__udivmodhi4>
    222c:	b0 e4       	ldi	r27, 0x40	; 64
    222e:	db 9e       	mul	r13, r27
    2230:	b0 01       	movw	r22, r0
    2232:	11 24       	eor	r1, r1
    2234:	61 54       	subi	r22, 0x41	; 65
    2236:	7e 4d       	sbci	r23, 0xDE	; 222
    2238:	ac 01       	movw	r20, r24
    223a:	cf 01       	movw	r24, r30
    223c:	82 0f       	add	r24, r18
    223e:	93 1f       	adc	r25, r19
    2240:	0e 94 bb 23 	call	0x4776	; 0x4776 <memcpy>
    2244:	f8 01       	movw	r30, r16
    2246:	25 81       	ldd	r18, Z+5	; 0x05
    2248:	36 81       	ldd	r19, Z+6	; 0x06
    224a:	2a 0d       	add	r18, r10
    224c:	3b 1d       	adc	r19, r11
    224e:	25 83       	std	Z+5, r18	; 0x05
    2250:	36 83       	std	Z+6, r19	; 0x06
    2252:	83 81       	ldd	r24, Z+3	; 0x03
    2254:	94 81       	ldd	r25, Z+4	; 0x04
    2256:	82 17       	cp	r24, r18
    2258:	93 07       	cpc	r25, r19
    225a:	68 f4       	brcc	.+26     	; 0x2276 <udd_ep_trans_complet+0x1da>
    225c:	85 83       	std	Z+5, r24	; 0x05
    225e:	96 83       	std	Z+6, r25	; 0x06
    2260:	cc 0f       	add	r28, r28
    2262:	dd 1f       	adc	r29, r29
    2264:	cc 0f       	add	r28, r28
    2266:	dd 1f       	adc	r29, r29
    2268:	cc 0f       	add	r28, r28
    226a:	dd 1f       	adc	r29, r29
    226c:	c8 51       	subi	r28, 0x18	; 24
    226e:	dd 4d       	sbci	r29, 0xDD	; 221
    2270:	8a 89       	ldd	r24, Y+18	; 0x12
    2272:	9b 89       	ldd	r25, Y+19	; 0x13
    2274:	78 c0       	rjmp	.+240    	; 0x2366 <udd_ep_trans_complet+0x2ca>
    2276:	fe 01       	movw	r30, r28
    2278:	ee 0f       	add	r30, r30
    227a:	ff 1f       	adc	r31, r31
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	ee 0f       	add	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	e8 51       	subi	r30, 0x18	; 24
    2286:	fd 4d       	sbci	r31, 0xDD	; 221
    2288:	42 89       	ldd	r20, Z+18	; 0x12
    228a:	53 89       	ldd	r21, Z+19	; 0x13
    228c:	a4 16       	cp	r10, r20
    228e:	b5 06       	cpc	r11, r21
    2290:	09 f0       	breq	.+2      	; 0x2294 <udd_ep_trans_complet+0x1f8>
    2292:	69 c0       	rjmp	.+210    	; 0x2366 <udd_ep_trans_complet+0x2ca>
    2294:	28 17       	cp	r18, r24
    2296:	39 07       	cpc	r19, r25
    2298:	09 f4       	brne	.+2      	; 0x229c <udd_ep_trans_complet+0x200>
    229a:	65 c0       	rjmp	.+202    	; 0x2366 <udd_ep_trans_complet+0x2ca>
    229c:	ac 01       	movw	r20, r24
    229e:	42 1b       	sub	r20, r18
    22a0:	53 0b       	sbc	r21, r19
    22a2:	9a 01       	movw	r18, r20
    22a4:	21 15       	cp	r18, r1
    22a6:	54 e0       	ldi	r21, 0x04	; 4
    22a8:	35 07       	cpc	r19, r21
    22aa:	48 f0       	brcs	.+18     	; 0x22be <udd_ep_trans_complet+0x222>
    22ac:	2f ef       	ldi	r18, 0xFF	; 255
    22ae:	33 e0       	ldi	r19, 0x03	; 3
    22b0:	c9 01       	movw	r24, r18
    22b2:	b4 01       	movw	r22, r8
    22b4:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__udivmodhi4>
    22b8:	28 1b       	sub	r18, r24
    22ba:	39 0b       	sbc	r19, r25
    22bc:	06 c0       	rjmp	.+12     	; 0x22ca <udd_ep_trans_complet+0x22e>
    22be:	c9 01       	movw	r24, r18
    22c0:	b4 01       	movw	r22, r8
    22c2:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__udivmodhi4>
    22c6:	28 1b       	sub	r18, r24
    22c8:	39 0b       	sbc	r19, r25
    22ca:	fe 01       	movw	r30, r28
    22cc:	ee 0f       	add	r30, r30
    22ce:	ff 1f       	adc	r31, r31
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	e8 51       	subi	r30, 0x18	; 24
    22da:	fd 4d       	sbci	r31, 0xDD	; 221
    22dc:	16 86       	std	Z+14, r1	; 0x0e
    22de:	17 86       	std	Z+15, r1	; 0x0f
    22e0:	28 15       	cp	r18, r8
    22e2:	39 05       	cpc	r19, r9
    22e4:	00 f5       	brcc	.+64     	; 0x2326 <udd_ep_trans_complet+0x28a>
    22e6:	d8 01       	movw	r26, r16
    22e8:	8c 91       	ld	r24, X
    22ea:	84 60       	ori	r24, 0x04	; 4
    22ec:	8c 93       	st	X, r24
    22ee:	b0 e4       	ldi	r27, 0x40	; 64
    22f0:	db 9e       	mul	r13, r27
    22f2:	c0 01       	movw	r24, r0
    22f4:	11 24       	eor	r1, r1
    22f6:	81 54       	subi	r24, 0x41	; 65
    22f8:	9e 4d       	sbci	r25, 0xDE	; 222
    22fa:	fe 01       	movw	r30, r28
    22fc:	ee 0f       	add	r30, r30
    22fe:	ff 1f       	adc	r31, r31
    2300:	ee 0f       	add	r30, r30
    2302:	ff 1f       	adc	r31, r31
    2304:	ee 0f       	add	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	e8 50       	subi	r30, 0x08	; 8
    230a:	fd 4d       	sbci	r31, 0xDD	; 221
    230c:	80 83       	st	Z, r24
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	cc 0f       	add	r28, r28
    2312:	dd 1f       	adc	r29, r29
    2314:	cc 0f       	add	r28, r28
    2316:	dd 1f       	adc	r29, r29
    2318:	cc 0f       	add	r28, r28
    231a:	dd 1f       	adc	r29, r29
    231c:	c8 51       	subi	r28, 0x18	; 24
    231e:	dd 4d       	sbci	r29, 0xDD	; 221
    2320:	8a 8a       	std	Y+18, r8	; 0x12
    2322:	9b 8a       	std	Y+19, r9	; 0x13
    2324:	1c c0       	rjmp	.+56     	; 0x235e <udd_ep_trans_complet+0x2c2>
    2326:	f8 01       	movw	r30, r16
    2328:	41 81       	ldd	r20, Z+1	; 0x01
    232a:	52 81       	ldd	r21, Z+2	; 0x02
    232c:	85 81       	ldd	r24, Z+5	; 0x05
    232e:	96 81       	ldd	r25, Z+6	; 0x06
    2330:	84 0f       	add	r24, r20
    2332:	95 1f       	adc	r25, r21
    2334:	fe 01       	movw	r30, r28
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	ee 0f       	add	r30, r30
    233c:	ff 1f       	adc	r31, r31
    233e:	ee 0f       	add	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	e8 50       	subi	r30, 0x08	; 8
    2344:	fd 4d       	sbci	r31, 0xDD	; 221
    2346:	80 83       	st	Z, r24
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	cc 0f       	add	r28, r28
    234c:	dd 1f       	adc	r29, r29
    234e:	cc 0f       	add	r28, r28
    2350:	dd 1f       	adc	r29, r29
    2352:	cc 0f       	add	r28, r28
    2354:	dd 1f       	adc	r29, r29
    2356:	c8 51       	subi	r28, 0x18	; 24
    2358:	dd 4d       	sbci	r29, 0xDD	; 221
    235a:	2a 8b       	std	Y+18, r18	; 0x12
    235c:	3b 8b       	std	Y+19, r19	; 0x13
    235e:	f7 01       	movw	r30, r14
    2360:	02 e0       	ldi	r16, 0x02	; 2
    2362:	06 93       	lac	Z, r16
    2364:	13 c0       	rjmp	.+38     	; 0x238c <udd_ep_trans_complet+0x2f0>
    2366:	d8 01       	movw	r26, r16
    2368:	8c 91       	ld	r24, X
    236a:	80 ff       	sbrs	r24, 0
    236c:	0f c0       	rjmp	.+30     	; 0x238c <udd_ep_trans_complet+0x2f0>
    236e:	8e 7f       	andi	r24, 0xFE	; 254
    2370:	8c 93       	st	X, r24
    2372:	17 96       	adiw	r26, 0x07	; 7
    2374:	ed 91       	ld	r30, X+
    2376:	fc 91       	ld	r31, X
    2378:	18 97       	sbiw	r26, 0x08	; 8
    237a:	30 97       	sbiw	r30, 0x00	; 0
    237c:	39 f0       	breq	.+14     	; 0x238c <udd_ep_trans_complet+0x2f0>
    237e:	15 96       	adiw	r26, 0x05	; 5
    2380:	6d 91       	ld	r22, X+
    2382:	7c 91       	ld	r23, X
    2384:	16 97       	sbiw	r26, 0x06	; 6
    2386:	4d 2d       	mov	r20, r13
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	19 95       	eicall
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	1f 91       	pop	r17
    2392:	0f 91       	pop	r16
    2394:	ff 90       	pop	r15
    2396:	ef 90       	pop	r14
    2398:	df 90       	pop	r13
    239a:	bf 90       	pop	r11
    239c:	af 90       	pop	r10
    239e:	9f 90       	pop	r9
    23a0:	8f 90       	pop	r8
    23a2:	08 95       	ret

000023a4 <udd_attach>:
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	1f 92       	push	r1
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	8f b7       	in	r24, 0x3f	; 63
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	f8 94       	cli
    23b6:	19 81       	ldd	r17, Y+1	; 0x01
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	cd dc       	rcall	.-1638   	; 0x1d56 <udd_sleep_mode>
    23bc:	ea ec       	ldi	r30, 0xCA	; 202
    23be:	f4 e0       	ldi	r31, 0x04	; 4
    23c0:	80 e4       	ldi	r24, 0x40	; 64
    23c2:	80 83       	st	Z, r24
    23c4:	80 e2       	ldi	r24, 0x20	; 32
    23c6:	80 83       	st	Z, r24
    23c8:	e1 ec       	ldi	r30, 0xC1	; 193
    23ca:	f4 e0       	ldi	r31, 0x04	; 4
    23cc:	80 81       	ld	r24, Z
    23ce:	81 60       	ori	r24, 0x01	; 1
    23d0:	80 83       	st	Z, r24
    23d2:	a9 ec       	ldi	r26, 0xC9	; 201
    23d4:	b4 e0       	ldi	r27, 0x04	; 4
    23d6:	8c 91       	ld	r24, X
    23d8:	82 60       	ori	r24, 0x02	; 2
    23da:	8c 93       	st	X, r24
    23dc:	e8 ec       	ldi	r30, 0xC8	; 200
    23de:	f4 e0       	ldi	r31, 0x04	; 4
    23e0:	80 81       	ld	r24, Z
    23e2:	80 64       	ori	r24, 0x40	; 64
    23e4:	80 83       	st	Z, r24
    23e6:	8c 91       	ld	r24, X
    23e8:	81 60       	ori	r24, 0x01	; 1
    23ea:	8c 93       	st	X, r24
    23ec:	80 81       	ld	r24, Z
    23ee:	80 68       	ori	r24, 0x80	; 128
    23f0:	80 83       	st	Z, r24
    23f2:	1f bf       	out	0x3f, r17	; 63
    23f4:	0f 90       	pop	r0
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	1f 91       	pop	r17
    23fc:	08 95       	ret

000023fe <udd_enable>:
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	1f 92       	push	r1
    2408:	1f 92       	push	r1
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	00 e6       	ldi	r16, 0x60	; 96
    2410:	10 e0       	ldi	r17, 0x00	; 0
    2412:	f8 01       	movw	r30, r16
    2414:	10 82       	st	Z, r1
    2416:	80 e3       	ldi	r24, 0x30	; 48
    2418:	0e 94 81 1b 	call	0x3702	; 0x3702 <sysclk_enable_usb>
    241c:	e0 ec       	ldi	r30, 0xC0	; 192
    241e:	f4 e0       	ldi	r31, 0x04	; 4
    2420:	80 81       	ld	r24, Z
    2422:	80 64       	ori	r24, 0x40	; 64
    2424:	80 83       	st	Z, r24
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	f8 01       	movw	r30, r16
    242a:	80 83       	st	Z, r24
    242c:	8f b7       	in	r24, 0x3f	; 63
    242e:	8a 83       	std	Y+2, r24	; 0x02
    2430:	f8 94       	cli
    2432:	1a 81       	ldd	r17, Y+2	; 0x02
    2434:	e8 ee       	ldi	r30, 0xE8	; 232
    2436:	f2 e2       	ldi	r31, 0x22	; 34
    2438:	15 86       	std	Z+13, r1	; 0x0d
    243a:	15 8a       	std	Z+21, r1	; 0x15
    243c:	15 8e       	std	Z+29, r1	; 0x1d
    243e:	15 a2       	std	Z+37, r1	; 0x25
    2440:	15 a6       	std	Z+45, r1	; 0x2d
    2442:	15 aa       	std	Z+53, r1	; 0x35
    2444:	ef e7       	ldi	r30, 0x7F	; 127
    2446:	f2 e2       	ldi	r31, 0x22	; 34
    2448:	80 81       	ld	r24, Z
    244a:	8e 7f       	andi	r24, 0xFE	; 254
    244c:	80 83       	st	Z, r24
    244e:	e8 e8       	ldi	r30, 0x88	; 136
    2450:	f2 e2       	ldi	r31, 0x22	; 34
    2452:	80 81       	ld	r24, Z
    2454:	8e 7f       	andi	r24, 0xFE	; 254
    2456:	80 83       	st	Z, r24
    2458:	e1 e9       	ldi	r30, 0x91	; 145
    245a:	f2 e2       	ldi	r31, 0x22	; 34
    245c:	80 81       	ld	r24, Z
    245e:	8e 7f       	andi	r24, 0xFE	; 254
    2460:	80 83       	st	Z, r24
    2462:	ea e9       	ldi	r30, 0x9A	; 154
    2464:	f2 e2       	ldi	r31, 0x22	; 34
    2466:	80 81       	ld	r24, Z
    2468:	8e 7f       	andi	r24, 0xFE	; 254
    246a:	80 83       	st	Z, r24
    246c:	6a e1       	ldi	r22, 0x1A	; 26
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
    2476:	8f 3f       	cpi	r24, 0xFF	; 255
    2478:	19 f0       	breq	.+6      	; 0x2480 <udd_enable+0x82>
    247a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    247e:	03 c0       	rjmp	.+6      	; 0x2486 <udd_enable+0x88>
    2480:	8f e1       	ldi	r24, 0x1F	; 31
    2482:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2486:	6b e1       	ldi	r22, 0x1B	; 27
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	82 e0       	ldi	r24, 0x02	; 2
    248c:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
    2490:	8f 3f       	cpi	r24, 0xFF	; 255
    2492:	19 f0       	breq	.+6      	; 0x249a <udd_enable+0x9c>
    2494:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2498:	03 c0       	rjmp	.+6      	; 0x24a0 <udd_enable+0xa2>
    249a:	8f e1       	ldi	r24, 0x1F	; 31
    249c:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    24a0:	e0 ec       	ldi	r30, 0xC0	; 192
    24a2:	f4 e0       	ldi	r31, 0x04	; 4
    24a4:	80 81       	ld	r24, Z
    24a6:	82 60       	ori	r24, 0x02	; 2
    24a8:	80 83       	st	Z, r24
    24aa:	80 81       	ld	r24, Z
    24ac:	80 68       	ori	r24, 0x80	; 128
    24ae:	80 83       	st	Z, r24
    24b0:	80 81       	ld	r24, Z
    24b2:	80 61       	ori	r24, 0x10	; 16
    24b4:	80 83       	st	Z, r24
    24b6:	84 ef       	ldi	r24, 0xF4	; 244
    24b8:	92 e2       	ldi	r25, 0x22	; 34
    24ba:	86 83       	std	Z+6, r24	; 0x06
    24bc:	97 83       	std	Z+7, r25	; 0x07
    24be:	80 81       	ld	r24, Z
    24c0:	80 62       	ori	r24, 0x20	; 32
    24c2:	80 83       	st	Z, r24
    24c4:	8f ef       	ldi	r24, 0xFF	; 255
    24c6:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    24ca:	e8 ec       	ldi	r30, 0xC8	; 200
    24cc:	f4 e0       	ldi	r31, 0x04	; 4
    24ce:	80 81       	ld	r24, Z
    24d0:	81 60       	ori	r24, 0x01	; 1
    24d2:	80 83       	st	Z, r24
    24d4:	10 92 28 23 	sts	0x2328, r1	; 0x802328 <udd_b_idle>
    24d8:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <sleepmgr_locks+0x5>
    24dc:	8f 3f       	cpi	r24, 0xFF	; 255
    24de:	09 f4       	brne	.+2      	; 0x24e2 <udd_enable+0xe4>
    24e0:	ff cf       	rjmp	.-2      	; 0x24e0 <udd_enable+0xe2>
    24e2:	8f b7       	in	r24, 0x3f	; 63
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	f8 94       	cli
    24e8:	99 81       	ldd	r25, Y+1	; 0x01
    24ea:	e9 e8       	ldi	r30, 0x89	; 137
    24ec:	f4 e2       	ldi	r31, 0x24	; 36
    24ee:	85 81       	ldd	r24, Z+5	; 0x05
    24f0:	8f 5f       	subi	r24, 0xFF	; 255
    24f2:	85 83       	std	Z+5, r24	; 0x05
    24f4:	9f bf       	out	0x3f, r25	; 63
    24f6:	56 df       	rcall	.-340    	; 0x23a4 <udd_attach>
    24f8:	1f bf       	out	0x3f, r17	; 63
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	1f 91       	pop	r17
    2504:	0f 91       	pop	r16
    2506:	08 95       	ret

00002508 <udd_is_high_speed>:
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	08 95       	ret

0000250c <udd_set_address>:
    250c:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2510:	08 95       	ret

00002512 <udd_getaddress>:
    2512:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2516:	08 95       	ret

00002518 <udd_get_frame_number>:
    2518:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <udd_sram+0x3c>
    251c:	90 91 25 23 	lds	r25, 0x2325	; 0x802325 <udd_sram+0x3d>
    2520:	08 95       	ret

00002522 <udd_get_micro_frame_number>:
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	08 95       	ret

00002528 <udd_set_setup_payload>:
    2528:	e9 e7       	ldi	r30, 0x79	; 121
    252a:	f4 e2       	ldi	r31, 0x24	; 36
    252c:	80 87       	std	Z+8, r24	; 0x08
    252e:	91 87       	std	Z+9, r25	; 0x09
    2530:	62 87       	std	Z+10, r22	; 0x0a
    2532:	73 87       	std	Z+11, r23	; 0x0b
    2534:	08 95       	ret

00002536 <udd_ep_alloc>:
    2536:	28 2f       	mov	r18, r24
    2538:	2f 70       	andi	r18, 0x0F	; 15
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	22 0f       	add	r18, r18
    253e:	33 1f       	adc	r19, r19
    2540:	08 2e       	mov	r0, r24
    2542:	00 0c       	add	r0, r0
    2544:	99 0b       	sbc	r25, r25
    2546:	88 27       	eor	r24, r24
    2548:	99 0f       	add	r25, r25
    254a:	88 1f       	adc	r24, r24
    254c:	99 27       	eor	r25, r25
    254e:	82 0f       	add	r24, r18
    2550:	93 1f       	adc	r25, r19
    2552:	fc 01       	movw	r30, r24
    2554:	ee 0f       	add	r30, r30
    2556:	ff 1f       	adc	r31, r31
    2558:	ee 0f       	add	r30, r30
    255a:	ff 1f       	adc	r31, r31
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	e8 51       	subi	r30, 0x18	; 24
    2562:	fd 4d       	sbci	r31, 0xDD	; 221
    2564:	25 85       	ldd	r18, Z+13	; 0x0d
    2566:	20 7c       	andi	r18, 0xC0	; 192
    2568:	09 f0       	breq	.+2      	; 0x256c <udd_ep_alloc+0x36>
    256a:	69 c0       	rjmp	.+210    	; 0x263e <udd_ep_alloc+0x108>
    256c:	63 70       	andi	r22, 0x03	; 3
    256e:	61 30       	cpi	r22, 0x01	; 1
    2570:	11 f0       	breq	.+4      	; 0x2576 <udd_ep_alloc+0x40>
    2572:	18 f4       	brcc	.+6      	; 0x257a <udd_ep_alloc+0x44>
    2574:	04 c0       	rjmp	.+8      	; 0x257e <udd_ep_alloc+0x48>
    2576:	60 ec       	ldi	r22, 0xC0	; 192
    2578:	03 c0       	rjmp	.+6      	; 0x2580 <udd_ep_alloc+0x4a>
    257a:	60 e8       	ldi	r22, 0x80	; 128
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <udd_ep_alloc+0x4a>
    257e:	60 e4       	ldi	r22, 0x40	; 64
    2580:	40 38       	cpi	r20, 0x80	; 128
    2582:	51 05       	cpc	r21, r1
    2584:	e9 f0       	breq	.+58     	; 0x25c0 <udd_ep_alloc+0x8a>
    2586:	50 f4       	brcc	.+20     	; 0x259c <udd_ep_alloc+0x66>
    2588:	40 32       	cpi	r20, 0x20	; 32
    258a:	51 05       	cpc	r21, r1
    258c:	a9 f0       	breq	.+42     	; 0x25b8 <udd_ep_alloc+0x82>
    258e:	40 34       	cpi	r20, 0x40	; 64
    2590:	51 05       	cpc	r21, r1
    2592:	a1 f0       	breq	.+40     	; 0x25bc <udd_ep_alloc+0x86>
    2594:	40 31       	cpi	r20, 0x10	; 16
    2596:	51 05       	cpc	r21, r1
    2598:	d9 f4       	brne	.+54     	; 0x25d0 <udd_ep_alloc+0x9a>
    259a:	0c c0       	rjmp	.+24     	; 0x25b4 <udd_ep_alloc+0x7e>
    259c:	41 15       	cp	r20, r1
    259e:	22 e0       	ldi	r18, 0x02	; 2
    25a0:	52 07       	cpc	r21, r18
    25a2:	91 f0       	breq	.+36     	; 0x25c8 <udd_ep_alloc+0x92>
    25a4:	4f 3f       	cpi	r20, 0xFF	; 255
    25a6:	23 e0       	ldi	r18, 0x03	; 3
    25a8:	52 07       	cpc	r21, r18
    25aa:	81 f0       	breq	.+32     	; 0x25cc <udd_ep_alloc+0x96>
    25ac:	41 15       	cp	r20, r1
    25ae:	51 40       	sbci	r21, 0x01	; 1
    25b0:	79 f4       	brne	.+30     	; 0x25d0 <udd_ep_alloc+0x9a>
    25b2:	08 c0       	rjmp	.+16     	; 0x25c4 <udd_ep_alloc+0x8e>
    25b4:	21 e0       	ldi	r18, 0x01	; 1
    25b6:	0d c0       	rjmp	.+26     	; 0x25d2 <udd_ep_alloc+0x9c>
    25b8:	22 e0       	ldi	r18, 0x02	; 2
    25ba:	0b c0       	rjmp	.+22     	; 0x25d2 <udd_ep_alloc+0x9c>
    25bc:	23 e0       	ldi	r18, 0x03	; 3
    25be:	09 c0       	rjmp	.+18     	; 0x25d2 <udd_ep_alloc+0x9c>
    25c0:	24 e0       	ldi	r18, 0x04	; 4
    25c2:	07 c0       	rjmp	.+14     	; 0x25d2 <udd_ep_alloc+0x9c>
    25c4:	25 e0       	ldi	r18, 0x05	; 5
    25c6:	05 c0       	rjmp	.+10     	; 0x25d2 <udd_ep_alloc+0x9c>
    25c8:	26 e0       	ldi	r18, 0x06	; 6
    25ca:	03 c0       	rjmp	.+6      	; 0x25d2 <udd_ep_alloc+0x9c>
    25cc:	27 e0       	ldi	r18, 0x07	; 7
    25ce:	01 c0       	rjmp	.+2      	; 0x25d2 <udd_ep_alloc+0x9c>
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	fc 01       	movw	r30, r24
    25d4:	ee 0f       	add	r30, r30
    25d6:	ff 1f       	adc	r31, r31
    25d8:	ee 0f       	add	r30, r30
    25da:	ff 1f       	adc	r31, r31
    25dc:	ee 0f       	add	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	e8 51       	subi	r30, 0x18	; 24
    25e2:	fd 4d       	sbci	r31, 0xDD	; 221
    25e4:	15 86       	std	Z+13, r1	; 0x0d
    25e6:	36 e0       	ldi	r19, 0x06	; 6
    25e8:	34 87       	std	Z+12, r19	; 0x0c
    25ea:	26 2b       	or	r18, r22
    25ec:	25 87       	std	Z+13, r18	; 0x0d
    25ee:	fc 01       	movw	r30, r24
    25f0:	ee 0f       	add	r30, r30
    25f2:	ff 1f       	adc	r31, r31
    25f4:	ee 0f       	add	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	ee 0f       	add	r30, r30
    25fa:	ff 1f       	adc	r31, r31
    25fc:	e8 51       	subi	r30, 0x18	; 24
    25fe:	fd 4d       	sbci	r31, 0xDD	; 221
    2600:	25 85       	ldd	r18, Z+13	; 0x0d
    2602:	20 7c       	andi	r18, 0xC0	; 192
    2604:	20 3c       	cpi	r18, 0xC0	; 192
    2606:	69 f4       	brne	.+26     	; 0x2622 <udd_ep_alloc+0xec>
    2608:	fc 01       	movw	r30, r24
    260a:	ee 0f       	add	r30, r30
    260c:	ff 1f       	adc	r31, r31
    260e:	ee 0f       	add	r30, r30
    2610:	ff 1f       	adc	r31, r31
    2612:	ee 0f       	add	r30, r30
    2614:	ff 1f       	adc	r31, r31
    2616:	e8 51       	subi	r30, 0x18	; 24
    2618:	fd 4d       	sbci	r31, 0xDD	; 221
    261a:	25 85       	ldd	r18, Z+13	; 0x0d
    261c:	27 70       	andi	r18, 0x07	; 7
    261e:	27 30       	cpi	r18, 0x07	; 7
    2620:	81 f0       	breq	.+32     	; 0x2642 <udd_ep_alloc+0x10c>
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	88 0f       	add	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	fc 01       	movw	r30, r24
    2630:	e8 51       	subi	r30, 0x18	; 24
    2632:	fd 4d       	sbci	r31, 0xDD	; 221
    2634:	85 85       	ldd	r24, Z+13	; 0x0d
    2636:	80 62       	ori	r24, 0x20	; 32
    2638:	85 87       	std	Z+13, r24	; 0x0d
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	08 95       	ret
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	08 95       	ret
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	08 95       	ret

00002646 <udd_ep_is_halted>:
    2646:	e8 2f       	mov	r30, r24
    2648:	ef 70       	andi	r30, 0x0F	; 15
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	ee 0f       	add	r30, r30
    264e:	ff 1f       	adc	r31, r31
    2650:	08 2e       	mov	r0, r24
    2652:	00 0c       	add	r0, r0
    2654:	99 0b       	sbc	r25, r25
    2656:	88 27       	eor	r24, r24
    2658:	99 0f       	add	r25, r25
    265a:	88 1f       	adc	r24, r24
    265c:	99 27       	eor	r25, r25
    265e:	e8 0f       	add	r30, r24
    2660:	f9 1f       	adc	r31, r25
    2662:	ee 0f       	add	r30, r30
    2664:	ff 1f       	adc	r31, r31
    2666:	ee 0f       	add	r30, r30
    2668:	ff 1f       	adc	r31, r31
    266a:	ee 0f       	add	r30, r30
    266c:	ff 1f       	adc	r31, r31
    266e:	e8 51       	subi	r30, 0x18	; 24
    2670:	fd 4d       	sbci	r31, 0xDD	; 221
    2672:	85 85       	ldd	r24, Z+13	; 0x0d
    2674:	82 fb       	bst	r24, 2
    2676:	88 27       	eor	r24, r24
    2678:	80 f9       	bld	r24, 0
    267a:	08 95       	ret

0000267c <udd_ep_clear_halt>:
    267c:	0f 93       	push	r16
    267e:	28 2f       	mov	r18, r24
    2680:	2f 70       	andi	r18, 0x0F	; 15
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	a9 01       	movw	r20, r18
    2686:	44 0f       	add	r20, r20
    2688:	55 1f       	adc	r21, r21
    268a:	28 2f       	mov	r18, r24
    268c:	08 2e       	mov	r0, r24
    268e:	00 0c       	add	r0, r0
    2690:	33 0b       	sbc	r19, r19
    2692:	22 27       	eor	r18, r18
    2694:	33 0f       	add	r19, r19
    2696:	22 1f       	adc	r18, r18
    2698:	33 27       	eor	r19, r19
    269a:	24 0f       	add	r18, r20
    269c:	35 1f       	adc	r19, r21
    269e:	a9 01       	movw	r20, r18
    26a0:	44 0f       	add	r20, r20
    26a2:	55 1f       	adc	r21, r21
    26a4:	44 0f       	add	r20, r20
    26a6:	55 1f       	adc	r21, r21
    26a8:	44 0f       	add	r20, r20
    26aa:	55 1f       	adc	r21, r21
    26ac:	fa 01       	movw	r30, r20
    26ae:	ec 50       	subi	r30, 0x0C	; 12
    26b0:	fd 4d       	sbci	r31, 0xDD	; 221
    26b2:	01 e0       	ldi	r16, 0x01	; 1
    26b4:	06 93       	lac	Z, r16
    26b6:	fa 01       	movw	r30, r20
    26b8:	e8 51       	subi	r30, 0x18	; 24
    26ba:	fd 4d       	sbci	r31, 0xDD	; 221
    26bc:	95 85       	ldd	r25, Z+13	; 0x0d
    26be:	92 ff       	sbrs	r25, 2
    26c0:	11 c0       	rjmp	.+34     	; 0x26e4 <udd_ep_clear_halt+0x68>
    26c2:	fa 01       	movw	r30, r20
    26c4:	e8 51       	subi	r30, 0x18	; 24
    26c6:	fd 4d       	sbci	r31, 0xDD	; 221
    26c8:	95 85       	ldd	r25, Z+13	; 0x0d
    26ca:	9b 7f       	andi	r25, 0xFB	; 251
    26cc:	95 87       	std	Z+13, r25	; 0x0d
    26ce:	59 dc       	rcall	.-1870   	; 0x1f82 <udd_ep_get_job>
    26d0:	fc 01       	movw	r30, r24
    26d2:	80 81       	ld	r24, Z
    26d4:	80 ff       	sbrs	r24, 0
    26d6:	06 c0       	rjmp	.+12     	; 0x26e4 <udd_ep_clear_halt+0x68>
    26d8:	8e 7f       	andi	r24, 0xFE	; 254
    26da:	80 83       	st	Z, r24
    26dc:	07 80       	ldd	r0, Z+7	; 0x07
    26de:	f0 85       	ldd	r31, Z+8	; 0x08
    26e0:	e0 2d       	mov	r30, r0
    26e2:	19 95       	eicall
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	0f 91       	pop	r16
    26e8:	08 95       	ret

000026ea <udd_ep_run>:
    26ea:	6f 92       	push	r6
    26ec:	7f 92       	push	r7
    26ee:	8f 92       	push	r8
    26f0:	9f 92       	push	r9
    26f2:	af 92       	push	r10
    26f4:	bf 92       	push	r11
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	1f 92       	push	r1
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	78 2e       	mov	r7, r24
    270e:	66 2e       	mov	r6, r22
    2710:	4a 01       	movw	r8, r20
    2712:	59 01       	movw	r10, r18
    2714:	36 dc       	rcall	.-1940   	; 0x1f82 <udd_ep_get_job>
    2716:	6c 01       	movw	r12, r24
    2718:	27 2d       	mov	r18, r7
    271a:	87 2d       	mov	r24, r7
    271c:	8f 70       	andi	r24, 0x0F	; 15
    271e:	e8 2e       	mov	r14, r24
    2720:	f1 2c       	mov	r15, r1
    2722:	c7 01       	movw	r24, r14
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	e7 2c       	mov	r14, r7
    272a:	07 2c       	mov	r0, r7
    272c:	00 0c       	add	r0, r0
    272e:	ff 08       	sbc	r15, r15
    2730:	ee 24       	eor	r14, r14
    2732:	ff 0c       	add	r15, r15
    2734:	ee 1c       	adc	r14, r14
    2736:	ff 24       	eor	r15, r15
    2738:	e8 0e       	add	r14, r24
    273a:	f9 1e       	adc	r15, r25
    273c:	f7 01       	movw	r30, r14
    273e:	ee 0f       	add	r30, r30
    2740:	ff 1f       	adc	r31, r31
    2742:	ee 0f       	add	r30, r30
    2744:	ff 1f       	adc	r31, r31
    2746:	ee 0f       	add	r30, r30
    2748:	ff 1f       	adc	r31, r31
    274a:	e8 51       	subi	r30, 0x18	; 24
    274c:	fd 4d       	sbci	r31, 0xDD	; 221
    274e:	85 85       	ldd	r24, Z+13	; 0x0d
    2750:	80 7c       	andi	r24, 0xC0	; 192
    2752:	09 f4       	brne	.+2      	; 0x2756 <udd_ep_run+0x6c>
    2754:	82 c0       	rjmp	.+260    	; 0x285a <udd_ep_run+0x170>
    2756:	f7 01       	movw	r30, r14
    2758:	ee 0f       	add	r30, r30
    275a:	ff 1f       	adc	r31, r31
    275c:	ee 0f       	add	r30, r30
    275e:	ff 1f       	adc	r31, r31
    2760:	ee 0f       	add	r30, r30
    2762:	ff 1f       	adc	r31, r31
    2764:	e8 51       	subi	r30, 0x18	; 24
    2766:	fd 4d       	sbci	r31, 0xDD	; 221
    2768:	85 85       	ldd	r24, Z+13	; 0x0d
    276a:	80 7c       	andi	r24, 0xC0	; 192
    276c:	80 3c       	cpi	r24, 0xC0	; 192
    276e:	61 f0       	breq	.+24     	; 0x2788 <udd_ep_run+0x9e>
    2770:	f7 01       	movw	r30, r14
    2772:	ee 0f       	add	r30, r30
    2774:	ff 1f       	adc	r31, r31
    2776:	ee 0f       	add	r30, r30
    2778:	ff 1f       	adc	r31, r31
    277a:	ee 0f       	add	r30, r30
    277c:	ff 1f       	adc	r31, r31
    277e:	e8 51       	subi	r30, 0x18	; 24
    2780:	fd 4d       	sbci	r31, 0xDD	; 221
    2782:	85 85       	ldd	r24, Z+13	; 0x0d
    2784:	82 fd       	sbrc	r24, 2
    2786:	6b c0       	rjmp	.+214    	; 0x285e <udd_ep_run+0x174>
    2788:	8f b7       	in	r24, 0x3f	; 63
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	f8 94       	cli
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	f6 01       	movw	r30, r12
    2792:	90 81       	ld	r25, Z
    2794:	90 ff       	sbrs	r25, 0
    2796:	03 c0       	rjmp	.+6      	; 0x279e <udd_ep_run+0xb4>
    2798:	8f bf       	out	0x3f, r24	; 63
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	61 c0       	rjmp	.+194    	; 0x2860 <udd_ep_run+0x176>
    279e:	f6 01       	movw	r30, r12
    27a0:	90 81       	ld	r25, Z
    27a2:	91 60       	ori	r25, 0x01	; 1
    27a4:	90 83       	st	Z, r25
    27a6:	8f bf       	out	0x3f, r24	; 63
    27a8:	81 82       	std	Z+1, r8	; 0x01
    27aa:	92 82       	std	Z+2, r9	; 0x02
    27ac:	a3 82       	std	Z+3, r10	; 0x03
    27ae:	b4 82       	std	Z+4, r11	; 0x04
    27b0:	15 82       	std	Z+5, r1	; 0x05
    27b2:	16 82       	std	Z+6, r1	; 0x06
    27b4:	07 83       	std	Z+7, r16	; 0x07
    27b6:	10 87       	std	Z+8, r17	; 0x08
    27b8:	61 10       	cpse	r6, r1
    27ba:	06 c0       	rjmp	.+12     	; 0x27c8 <udd_ep_run+0xde>
    27bc:	91 e0       	ldi	r25, 0x01	; 1
    27be:	a1 14       	cp	r10, r1
    27c0:	b1 04       	cpc	r11, r1
    27c2:	19 f0       	breq	.+6      	; 0x27ca <udd_ep_run+0xe0>
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <udd_ep_run+0xe0>
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	f6 01       	movw	r30, r12
    27cc:	80 81       	ld	r24, Z
    27ce:	90 fb       	bst	r25, 0
    27d0:	81 f9       	bld	r24, 1
    27d2:	8b 7f       	andi	r24, 0xFB	; 251
    27d4:	80 83       	st	Z, r24
    27d6:	22 23       	and	r18, r18
    27d8:	64 f4       	brge	.+24     	; 0x27f2 <udd_ep_run+0x108>
    27da:	f7 01       	movw	r30, r14
    27dc:	ee 0f       	add	r30, r30
    27de:	ff 1f       	adc	r31, r31
    27e0:	ee 0f       	add	r30, r30
    27e2:	ff 1f       	adc	r31, r31
    27e4:	ee 0f       	add	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	e8 51       	subi	r30, 0x18	; 24
    27ea:	fd 4d       	sbci	r31, 0xDD	; 221
    27ec:	12 8a       	std	Z+18, r1	; 0x12
    27ee:	13 8a       	std	Z+19, r1	; 0x13
    27f0:	30 c0       	rjmp	.+96     	; 0x2852 <udd_ep_run+0x168>
    27f2:	f7 01       	movw	r30, r14
    27f4:	ee 0f       	add	r30, r30
    27f6:	ff 1f       	adc	r31, r31
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	e8 51       	subi	r30, 0x18	; 24
    2802:	fd 4d       	sbci	r31, 0xDD	; 221
    2804:	85 85       	ldd	r24, Z+13	; 0x0d
    2806:	80 7c       	andi	r24, 0xC0	; 192
    2808:	80 3c       	cpi	r24, 0xC0	; 192
    280a:	b1 f4       	brne	.+44     	; 0x2838 <udd_ep_run+0x14e>
    280c:	c7 01       	movw	r24, r14
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	8c 50       	subi	r24, 0x0C	; 12
    281c:	9d 4d       	sbci	r25, 0xDD	; 221
    281e:	88 db       	rcall	.-2288   	; 0x1f30 <udd_ep_get_size>
    2820:	bc 01       	movw	r22, r24
    2822:	c5 01       	movw	r24, r10
    2824:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__udivmodhi4>
    2828:	89 2b       	or	r24, r25
    282a:	31 f0       	breq	.+12     	; 0x2838 <udd_ep_run+0x14e>
    282c:	f6 01       	movw	r30, r12
    282e:	80 81       	ld	r24, Z
    2830:	8e 7f       	andi	r24, 0xFE	; 254
    2832:	80 83       	st	Z, r24
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	14 c0       	rjmp	.+40     	; 0x2860 <udd_ep_run+0x176>
    2838:	f7 01       	movw	r30, r14
    283a:	ee 0f       	add	r30, r30
    283c:	ff 1f       	adc	r31, r31
    283e:	ee 0f       	add	r30, r30
    2840:	ff 1f       	adc	r31, r31
    2842:	ee 0f       	add	r30, r30
    2844:	ff 1f       	adc	r31, r31
    2846:	e8 51       	subi	r30, 0x18	; 24
    2848:	fd 4d       	sbci	r31, 0xDD	; 221
    284a:	16 86       	std	Z+14, r1	; 0x0e
    284c:	17 86       	std	Z+15, r1	; 0x0f
    284e:	12 8a       	std	Z+18, r1	; 0x12
    2850:	13 8a       	std	Z+19, r1	; 0x13
    2852:	87 2d       	mov	r24, r7
    2854:	23 dc       	rcall	.-1978   	; 0x209c <udd_ep_trans_complet>
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	03 c0       	rjmp	.+6      	; 0x2860 <udd_ep_run+0x176>
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	01 c0       	rjmp	.+2      	; 0x2860 <udd_ep_run+0x176>
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	0f 90       	pop	r0
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	ff 90       	pop	r15
    286c:	ef 90       	pop	r14
    286e:	df 90       	pop	r13
    2870:	cf 90       	pop	r12
    2872:	bf 90       	pop	r11
    2874:	af 90       	pop	r10
    2876:	9f 90       	pop	r9
    2878:	8f 90       	pop	r8
    287a:	7f 90       	pop	r7
    287c:	6f 90       	pop	r6
    287e:	08 95       	ret

00002880 <udd_ep_abort>:
    2880:	ff 92       	push	r15
    2882:	0f 93       	push	r16
    2884:	1f 93       	push	r17
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	18 2f       	mov	r17, r24
    288c:	c8 2f       	mov	r28, r24
    288e:	cf 70       	andi	r28, 0x0F	; 15
    2890:	d0 e0       	ldi	r29, 0x00	; 0
    2892:	ce 01       	movw	r24, r28
    2894:	88 0f       	add	r24, r24
    2896:	99 1f       	adc	r25, r25
    2898:	c1 2f       	mov	r28, r17
    289a:	01 2e       	mov	r0, r17
    289c:	00 0c       	add	r0, r0
    289e:	dd 0b       	sbc	r29, r29
    28a0:	cc 27       	eor	r28, r28
    28a2:	dd 0f       	add	r29, r29
    28a4:	cc 1f       	adc	r28, r28
    28a6:	dd 27       	eor	r29, r29
    28a8:	c8 0f       	add	r28, r24
    28aa:	d9 1f       	adc	r29, r25
    28ac:	81 2f       	mov	r24, r17
    28ae:	69 db       	rcall	.-2350   	; 0x1f82 <udd_ep_get_job>
    28b0:	dc 01       	movw	r26, r24
    28b2:	fe 01       	movw	r30, r28
    28b4:	ee 0f       	add	r30, r30
    28b6:	ff 1f       	adc	r31, r31
    28b8:	ee 0f       	add	r30, r30
    28ba:	ff 1f       	adc	r31, r31
    28bc:	ee 0f       	add	r30, r30
    28be:	ff 1f       	adc	r31, r31
    28c0:	ec 50       	subi	r30, 0x0C	; 12
    28c2:	fd 4d       	sbci	r31, 0xDD	; 221
    28c4:	02 e0       	ldi	r16, 0x02	; 2
    28c6:	05 93       	las	Z, r16
    28c8:	8c 91       	ld	r24, X
    28ca:	80 ff       	sbrs	r24, 0
    28cc:	22 c0       	rjmp	.+68     	; 0x2912 <udd_ep_abort+0x92>
    28ce:	8e 7f       	andi	r24, 0xFE	; 254
    28d0:	8c 93       	st	X, r24
    28d2:	17 96       	adiw	r26, 0x07	; 7
    28d4:	ed 91       	ld	r30, X+
    28d6:	fc 91       	ld	r31, X
    28d8:	18 97       	sbiw	r26, 0x08	; 8
    28da:	30 97       	sbiw	r30, 0x00	; 0
    28dc:	d1 f0       	breq	.+52     	; 0x2912 <udd_ep_abort+0x92>
    28de:	11 23       	and	r17, r17
    28e0:	5c f4       	brge	.+22     	; 0x28f8 <udd_ep_abort+0x78>
    28e2:	cc 0f       	add	r28, r28
    28e4:	dd 1f       	adc	r29, r29
    28e6:	cc 0f       	add	r28, r28
    28e8:	dd 1f       	adc	r29, r29
    28ea:	cc 0f       	add	r28, r28
    28ec:	dd 1f       	adc	r29, r29
    28ee:	c8 51       	subi	r28, 0x18	; 24
    28f0:	dd 4d       	sbci	r29, 0xDD	; 221
    28f2:	6a 89       	ldd	r22, Y+18	; 0x12
    28f4:	7b 89       	ldd	r23, Y+19	; 0x13
    28f6:	0a c0       	rjmp	.+20     	; 0x290c <udd_ep_abort+0x8c>
    28f8:	cc 0f       	add	r28, r28
    28fa:	dd 1f       	adc	r29, r29
    28fc:	cc 0f       	add	r28, r28
    28fe:	dd 1f       	adc	r29, r29
    2900:	cc 0f       	add	r28, r28
    2902:	dd 1f       	adc	r29, r29
    2904:	c8 51       	subi	r28, 0x18	; 24
    2906:	dd 4d       	sbci	r29, 0xDD	; 221
    2908:	6e 85       	ldd	r22, Y+14	; 0x0e
    290a:	7f 85       	ldd	r23, Y+15	; 0x0f
    290c:	41 2f       	mov	r20, r17
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	19 95       	eicall
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	ff 90       	pop	r15
    291c:	08 95       	ret

0000291e <udd_ep_free>:
    291e:	cf 93       	push	r28
    2920:	c8 2f       	mov	r28, r24
    2922:	ae df       	rcall	.-164    	; 0x2880 <udd_ep_abort>
    2924:	ec 2f       	mov	r30, r28
    2926:	ef 70       	andi	r30, 0x0F	; 15
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	ee 0f       	add	r30, r30
    292c:	ff 1f       	adc	r31, r31
    292e:	8c 2f       	mov	r24, r28
    2930:	cc 0f       	add	r28, r28
    2932:	99 0b       	sbc	r25, r25
    2934:	88 27       	eor	r24, r24
    2936:	99 0f       	add	r25, r25
    2938:	88 1f       	adc	r24, r24
    293a:	99 27       	eor	r25, r25
    293c:	e8 0f       	add	r30, r24
    293e:	f9 1f       	adc	r31, r25
    2940:	ee 0f       	add	r30, r30
    2942:	ff 1f       	adc	r31, r31
    2944:	ee 0f       	add	r30, r30
    2946:	ff 1f       	adc	r31, r31
    2948:	ee 0f       	add	r30, r30
    294a:	ff 1f       	adc	r31, r31
    294c:	e8 51       	subi	r30, 0x18	; 24
    294e:	fd 4d       	sbci	r31, 0xDD	; 221
    2950:	15 86       	std	Z+13, r1	; 0x0d
    2952:	cf 91       	pop	r28
    2954:	08 95       	ret

00002956 <udd_ep_set_halt>:
    2956:	e8 2f       	mov	r30, r24
    2958:	ef 70       	andi	r30, 0x0F	; 15
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	ee 0f       	add	r30, r30
    295e:	ff 1f       	adc	r31, r31
    2960:	28 2f       	mov	r18, r24
    2962:	08 2e       	mov	r0, r24
    2964:	00 0c       	add	r0, r0
    2966:	33 0b       	sbc	r19, r19
    2968:	22 27       	eor	r18, r18
    296a:	33 0f       	add	r19, r19
    296c:	22 1f       	adc	r18, r18
    296e:	33 27       	eor	r19, r19
    2970:	e2 0f       	add	r30, r18
    2972:	f3 1f       	adc	r31, r19
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	ee 0f       	add	r30, r30
    297a:	ff 1f       	adc	r31, r31
    297c:	ee 0f       	add	r30, r30
    297e:	ff 1f       	adc	r31, r31
    2980:	e8 51       	subi	r30, 0x18	; 24
    2982:	fd 4d       	sbci	r31, 0xDD	; 221
    2984:	95 85       	ldd	r25, Z+13	; 0x0d
    2986:	94 60       	ori	r25, 0x04	; 4
    2988:	95 87       	std	Z+13, r25	; 0x0d
    298a:	7a df       	rcall	.-268    	; 0x2880 <udd_ep_abort>
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	08 95       	ret

00002990 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2990:	1f 92       	push	r1
    2992:	0f 92       	push	r0
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	0f 92       	push	r0
    2998:	11 24       	eor	r1, r1
    299a:	0b b6       	in	r0, 0x3b	; 59
    299c:	0f 92       	push	r0
    299e:	0f 93       	push	r16
    29a0:	2f 93       	push	r18
    29a2:	3f 93       	push	r19
    29a4:	4f 93       	push	r20
    29a6:	5f 93       	push	r21
    29a8:	6f 93       	push	r22
    29aa:	7f 93       	push	r23
    29ac:	8f 93       	push	r24
    29ae:	9f 93       	push	r25
    29b0:	af 93       	push	r26
    29b2:	bf 93       	push	r27
    29b4:	ef 93       	push	r30
    29b6:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    29b8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29bc:	88 23       	and	r24, r24
    29be:	34 f4       	brge	.+12     	; 0x29cc <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    29c0:	80 e8       	ldi	r24, 0x80	; 128
    29c2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    29c6:	0e 94 0e 20 	call	0x401c	; 0x401c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    29ca:	88 c0       	rjmp	.+272    	; 0x2adc <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    29cc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29d0:	82 ff       	sbrs	r24, 2
    29d2:	20 c0       	rjmp	.+64     	; 0x2a14 <__vector_125+0x84>
		udd_ack_underflow_event();
    29d4:	84 e0       	ldi	r24, 0x04	; 4
    29d6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    29da:	80 91 fc 22 	lds	r24, 0x22FC	; 0x8022fc <udd_sram+0x14>
    29de:	86 ff       	sbrs	r24, 6
    29e0:	7d c0       	rjmp	.+250    	; 0x2adc <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    29e2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    29e6:	81 fd       	sbrc	r24, 1
    29e8:	79 c0       	rjmp	.+242    	; 0x2adc <__vector_125+0x14c>
    29ea:	e6 da       	rcall	.-2612   	; 0x1fb8 <udd_ctrl_interrupt_tc_setup>
    29ec:	81 11       	cpse	r24, r1
    29ee:	76 c0       	rjmp	.+236    	; 0x2adc <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    29f0:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <udd_ep_control_state>
    29f4:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    29f6:	11 f4       	brne	.+4      	; 0x29fc <__vector_125+0x6c>
    29f8:	19 da       	rcall	.-3022   	; 0x1e2c <udd_ctrl_send_zlp_in>
    29fa:	70 c0       	rjmp	.+224    	; 0x2adc <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    29fc:	84 30       	cpi	r24, 0x04	; 4
    29fe:	09 f0       	breq	.+2      	; 0x2a02 <__vector_125+0x72>
    2a00:	6d c0       	rjmp	.+218    	; 0x2adc <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2a02:	ed ef       	ldi	r30, 0xFD	; 253
    2a04:	f2 e2       	ldi	r31, 0x22	; 34
    2a06:	04 e0       	ldi	r16, 0x04	; 4
    2a08:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2a0a:	e5 ef       	ldi	r30, 0xF5	; 245
    2a0c:	f2 e2       	ldi	r31, 0x22	; 34
    2a0e:	04 e0       	ldi	r16, 0x04	; 4
    2a10:	05 93       	las	Z, r16
    2a12:	64 c0       	rjmp	.+200    	; 0x2adc <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2a14:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a18:	81 ff       	sbrs	r24, 1
    2a1a:	5b c0       	rjmp	.+182    	; 0x2ad2 <__vector_125+0x142>
		udd_ack_overflow_event();
    2a1c:	82 e0       	ldi	r24, 0x02	; 2
    2a1e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2a22:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <udd_sram+0xc>
    2a26:	86 ff       	sbrs	r24, 6
    2a28:	59 c0       	rjmp	.+178    	; 0x2adc <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2a2a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a2e:	81 fd       	sbrc	r24, 1
    2a30:	55 c0       	rjmp	.+170    	; 0x2adc <__vector_125+0x14c>
    2a32:	c2 da       	rcall	.-2684   	; 0x1fb8 <udd_ctrl_interrupt_tc_setup>
    2a34:	81 11       	cpse	r24, r1
    2a36:	52 c0       	rjmp	.+164    	; 0x2adc <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2a38:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <udd_ep_control_state>
    2a3c:	82 30       	cpi	r24, 0x02	; 2
    2a3e:	41 f4       	brne	.+16     	; 0x2a50 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2a40:	84 e0       	ldi	r24, 0x04	; 4
    2a42:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2a46:	e4 ef       	ldi	r30, 0xF4	; 244
    2a48:	f2 e2       	ldi	r31, 0x22	; 34
    2a4a:	02 e0       	ldi	r16, 0x02	; 2
    2a4c:	06 93       	lac	Z, r16
    2a4e:	46 c0       	rjmp	.+140    	; 0x2adc <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2a50:	83 30       	cpi	r24, 0x03	; 3
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <__vector_125+0xc6>
    2a54:	43 c0       	rjmp	.+134    	; 0x2adc <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2a56:	ed ef       	ldi	r30, 0xFD	; 253
    2a58:	f2 e2       	ldi	r31, 0x22	; 34
    2a5a:	04 e0       	ldi	r16, 0x04	; 4
    2a5c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2a5e:	e5 ef       	ldi	r30, 0xF5	; 245
    2a60:	f2 e2       	ldi	r31, 0x22	; 34
    2a62:	04 e0       	ldi	r16, 0x04	; 4
    2a64:	05 93       	las	Z, r16
    2a66:	3a c0       	rjmp	.+116    	; 0x2adc <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2a68:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2a6a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2a70:	07 df       	rcall	.-498    	; 0x2880 <udd_ep_abort>
    2a72:	81 e8       	ldi	r24, 0x81	; 129
    2a74:	05 df       	rcall	.-502    	; 0x2880 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2a76:	82 e0       	ldi	r24, 0x02	; 2
    2a78:	03 df       	rcall	.-506    	; 0x2880 <udd_ep_abort>
    2a7a:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    2a7c:	01 df       	rcall	.-510    	; 0x2880 <udd_ep_abort>
    2a7e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2a82:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2a86:	e8 ee       	ldi	r30, 0xE8	; 232
    2a88:	f2 e2       	ldi	r31, 0x22	; 34
	udd_endpoint_clear_status(ep_ctrl);
    2a8a:	15 86       	std	Z+13, r1	; 0x0d
    2a8c:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a8e:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    2a90:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2a92:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2a94:	15 8a       	std	Z+21, r1	; 0x15
    2a96:	94 8b       	std	Z+20, r25	; 0x14
    2a98:	85 8b       	std	Z+21, r24	; 0x15
    2a9a:	83 ea       	ldi	r24, 0xA3	; 163
		// Reset endpoint control management
		udd_ctrl_init();
    2a9c:	92 e2       	ldi	r25, 0x22	; 34
    2a9e:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    2aa0:	91 8b       	std	Z+17, r25	; 0x11
    2aa2:	91 d9       	rcall	.-3294   	; 0x1dc6 <udd_ctrl_init>
		udd_ack_suspend_event();
    2aa4:	1b c0       	rjmp	.+54     	; 0x2adc <__vector_125+0x14c>
    2aa6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2aaa:	86 ff       	sbrs	r24, 6
    2aac:	07 c0       	rjmp	.+14     	; 0x2abc <__vector_125+0x12c>
    2aae:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2ab0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	4f d9       	rcall	.-3426   	; 0x1d56 <udd_sleep_mode>
		udd_ack_resume_event();
    2ab8:	a5 d2       	rcall	.+1354   	; 0x3004 <usb_callback_suspend_action>
    2aba:	10 c0       	rjmp	.+32     	; 0x2adc <__vector_125+0x14c>
    2abc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    2ac0:	85 ff       	sbrs	r24, 5
    2ac2:	0c c0       	rjmp	.+24     	; 0x2adc <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2ac4:	80 e2       	ldi	r24, 0x20	; 32
    2ac6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	44 d9       	rcall	.-3448   	; 0x1d56 <udd_sleep_mode>
    2ace:	9b d2       	rcall	.+1334   	; 0x3006 <usb_callback_resume_action>
    2ad0:	05 c0       	rjmp	.+10     	; 0x2adc <__vector_125+0x14c>
    2ad2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2ad6:	84 fd       	sbrc	r24, 4
    2ad8:	c7 cf       	rjmp	.-114    	; 0x2a68 <__vector_125+0xd8>
    2ada:	e5 cf       	rjmp	.-54     	; 0x2aa6 <__vector_125+0x116>
    2adc:	ff 91       	pop	r31
    2ade:	ef 91       	pop	r30
    2ae0:	bf 91       	pop	r27
    2ae2:	af 91       	pop	r26
    2ae4:	9f 91       	pop	r25
    2ae6:	8f 91       	pop	r24
    2ae8:	7f 91       	pop	r23
    2aea:	6f 91       	pop	r22
    2aec:	5f 91       	pop	r21
    2aee:	4f 91       	pop	r20
    2af0:	3f 91       	pop	r19
    2af2:	2f 91       	pop	r18
    2af4:	0f 91       	pop	r16
    2af6:	0f 90       	pop	r0
    2af8:	0b be       	out	0x3b, r0	; 59
    2afa:	0f 90       	pop	r0
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	0f 90       	pop	r0
    2b00:	1f 90       	pop	r1
    2b02:	18 95       	reti

00002b04 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2b04:	1f 92       	push	r1
    2b06:	0f 92       	push	r0
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	0f 92       	push	r0
    2b0c:	11 24       	eor	r1, r1
    2b0e:	0b b6       	in	r0, 0x3b	; 59
    2b10:	0f 92       	push	r0
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	2f 93       	push	r18
    2b18:	3f 93       	push	r19
    2b1a:	4f 93       	push	r20
    2b1c:	5f 93       	push	r21
    2b1e:	6f 93       	push	r22
    2b20:	7f 93       	push	r23
    2b22:	8f 93       	push	r24
    2b24:	9f 93       	push	r25
    2b26:	af 93       	push	r26
    2b28:	bf 93       	push	r27
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	ef 93       	push	r30
    2b30:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2b32:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b36:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2b38:	03 c0       	rjmp	.+6      	; 0x2b40 <__vector_126+0x3c>
    2b3a:	3e da       	rcall	.-2948   	; 0x1fb8 <udd_ctrl_interrupt_tc_setup>
    2b3c:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2b3e:	c4 c0       	rjmp	.+392    	; 0x2cc8 <__vector_126+0x1c4>
    2b40:	82 e0       	ldi	r24, 0x02	; 2
    2b42:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2b46:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2b4a:	81 95       	neg	r24
    2b4c:	88 0f       	add	r24, r24
    2b4e:	e4 ef       	ldi	r30, 0xF4	; 244
    2b50:	f2 e2       	ldi	r31, 0x22	; 34
    2b52:	e8 1b       	sub	r30, r24
    2b54:	f1 09       	sbc	r31, r1
    2b56:	20 81       	ld	r18, Z
    2b58:	31 81       	ldd	r19, Z+1	; 0x01
    2b5a:	24 5f       	subi	r18, 0xF4	; 244
    2b5c:	32 42       	sbci	r19, 0x22	; 34
    2b5e:	36 95       	lsr	r19
    2b60:	27 95       	ror	r18
    2b62:	36 95       	lsr	r19
    2b64:	27 95       	ror	r18
    2b66:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2b68:	27 95       	ror	r18
    2b6a:	82 2f       	mov	r24, r18
    2b6c:	86 95       	lsr	r24
    2b6e:	20 fd       	sbrc	r18, 0
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <__vector_126+0x72>
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	01 c0       	rjmp	.+2      	; 0x2b78 <__vector_126+0x74>
    2b76:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b78:	89 0f       	add	r24, r25
    2b7a:	e8 2f       	mov	r30, r24
    2b7c:	ef 70       	andi	r30, 0x0F	; 15
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	ee 0f       	add	r30, r30
    2b82:	ff 1f       	adc	r31, r31
    2b84:	28 2f       	mov	r18, r24
    2b86:	08 2e       	mov	r0, r24
    2b88:	00 0c       	add	r0, r0
    2b8a:	33 0b       	sbc	r19, r19
    2b8c:	22 27       	eor	r18, r18
    2b8e:	33 0f       	add	r19, r19
    2b90:	22 1f       	adc	r18, r18
    2b92:	33 27       	eor	r19, r19
    2b94:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2b96:	f3 1f       	adc	r31, r19
    2b98:	df 01       	movw	r26, r30
    2b9a:	aa 0f       	add	r26, r26
    2b9c:	bb 1f       	adc	r27, r27
    2b9e:	aa 0f       	add	r26, r26
    2ba0:	bb 1f       	adc	r27, r27
    2ba2:	aa 0f       	add	r26, r26
    2ba4:	bb 1f       	adc	r27, r27
    2ba6:	a8 51       	subi	r26, 0x18	; 24
    2ba8:	bd 4d       	sbci	r27, 0xDD	; 221
    2baa:	1c 96       	adiw	r26, 0x0c	; 12
    2bac:	9c 91       	ld	r25, X
    2bae:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2bb0:	8b c0       	rjmp	.+278    	; 0x2cc8 <__vector_126+0x1c4>
    2bb2:	ee 0f       	add	r30, r30
    2bb4:	ff 1f       	adc	r31, r31
    2bb6:	ee 0f       	add	r30, r30
    2bb8:	ff 1f       	adc	r31, r31
    2bba:	ee 0f       	add	r30, r30
    2bbc:	ff 1f       	adc	r31, r31
    2bbe:	ec 50       	subi	r30, 0x0C	; 12
    2bc0:	fd 4d       	sbci	r31, 0xDD	; 221
    2bc2:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    2bc4:	06 93       	lac	Z, r16
    2bc6:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2bc8:	7a c0       	rjmp	.+244    	; 0x2cbe <__vector_126+0x1ba>
    2bca:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2bce:	84 30       	cpi	r24, 0x04	; 4
    2bd0:	19 f4       	brne	.+6      	; 0x2bd8 <__vector_126+0xd4>
    2bd2:	3a d9       	rcall	.-3468   	; 0x1e48 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2bd4:	f8 d8       	rcall	.-3600   	; 0x1dc6 <udd_ctrl_init>
    2bd6:	78 c0       	rjmp	.+240    	; 0x2cc8 <__vector_126+0x1c4>
    2bd8:	00 91 f6 22 	lds	r16, 0x22F6	; 0x8022f6 <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2bdc:	10 91 f7 22 	lds	r17, 0x22F7	; 0x8022f7 <udd_sram+0xf>
    2be0:	80 91 83 24 	lds	r24, 0x2483	; 0x802483 <udd_g_ctrlreq+0xa>
    2be4:	90 91 84 24 	lds	r25, 0x2484	; 0x802484 <udd_g_ctrlreq+0xb>
    2be8:	c0 91 e3 22 	lds	r28, 0x22E3	; 0x8022e3 <udd_ctrl_payload_nb_trans>
    2bec:	d0 91 e4 22 	lds	r29, 0x22E4	; 0x8022e4 <udd_ctrl_payload_nb_trans+0x1>
    2bf0:	98 01       	movw	r18, r16
    2bf2:	2c 0f       	add	r18, r28
    2bf4:	3d 1f       	adc	r19, r29
    2bf6:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2bf8:	93 07       	cpc	r25, r19
    2bfa:	18 f4       	brcc	.+6      	; 0x2c02 <__vector_126+0xfe>
    2bfc:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2bfe:	0c 1b       	sub	r16, r28
    2c00:	1d 0b       	sbc	r17, r29
    2c02:	80 91 81 24 	lds	r24, 0x2481	; 0x802481 <udd_g_ctrlreq+0x8>
    2c06:	90 91 82 24 	lds	r25, 0x2482	; 0x802482 <udd_g_ctrlreq+0x9>
    2c0a:	a8 01       	movw	r20, r16
    2c0c:	63 ea       	ldi	r22, 0xA3	; 163
    2c0e:	72 e2       	ldi	r23, 0x22	; 34
    2c10:	8c 0f       	add	r24, r28
    2c12:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2c14:	0e 94 bb 23 	call	0x4776	; 0x4776 <memcpy>
    2c18:	c0 0f       	add	r28, r16
    2c1a:	d1 1f       	adc	r29, r17
    2c1c:	c0 93 e3 22 	sts	0x22E3, r28	; 0x8022e3 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2c20:	d0 93 e4 22 	sts	0x22E4, r29	; 0x8022e4 <udd_ctrl_payload_nb_trans+0x1>
    2c24:	00 34       	cpi	r16, 0x40	; 64
    2c26:	11 05       	cpc	r17, r1
    2c28:	69 f4       	brne	.+26     	; 0x2c44 <__vector_126+0x140>
    2c2a:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <udd_ctrl_prev_payload_nb_trans>
    2c2e:	90 91 e6 22 	lds	r25, 0x22E6	; 0x8022e6 <udd_ctrl_prev_payload_nb_trans+0x1>
    2c32:	8c 0f       	add	r24, r28
    2c34:	9d 1f       	adc	r25, r29
    2c36:	20 91 7f 24 	lds	r18, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    2c3a:	30 91 80 24 	lds	r19, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    2c3e:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2c40:	93 07       	cpc	r25, r19
    2c42:	80 f0       	brcs	.+32     	; 0x2c64 <__vector_126+0x160>
    2c44:	e9 e7       	ldi	r30, 0x79	; 121
    2c46:	f4 e2       	ldi	r31, 0x24	; 36
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2c48:	c2 87       	std	Z+10, r28	; 0x0a
    2c4a:	d3 87       	std	Z+11, r29	; 0x0b
    2c4c:	06 84       	ldd	r0, Z+14	; 0x0e
    2c4e:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    2c50:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    2c52:	30 97       	sbiw	r30, 0x00	; 0
    2c54:	29 f0       	breq	.+10     	; 0x2c60 <__vector_126+0x15c>
    2c56:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2c58:	81 11       	cpse	r24, r1
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <__vector_126+0x15c>
    2c5c:	d9 d8       	rcall	.-3662   	; 0x1e10 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2c5e:	34 c0       	rjmp	.+104    	; 0x2cc8 <__vector_126+0x1c4>
    2c60:	e5 d8       	rcall	.-3638   	; 0x1e2c <udd_ctrl_send_zlp_in>
    2c62:	32 c0       	rjmp	.+100    	; 0x2cc8 <__vector_126+0x1c4>
    2c64:	80 91 83 24 	lds	r24, 0x2483	; 0x802483 <udd_g_ctrlreq+0xa>
    2c68:	90 91 84 24 	lds	r25, 0x2484	; 0x802484 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2c6c:	c8 17       	cp	r28, r24
    2c6e:	d9 07       	cpc	r29, r25
    2c70:	f9 f4       	brne	.+62     	; 0x2cb0 <__vector_126+0x1ac>
    2c72:	e0 91 87 24 	lds	r30, 0x2487	; 0x802487 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2c76:	f0 91 88 24 	lds	r31, 0x2488	; 0x802488 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2c7a:	30 97       	sbiw	r30, 0x00	; 0
    2c7c:	11 f4       	brne	.+4      	; 0x2c82 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2c7e:	c8 d8       	rcall	.-3696   	; 0x1e10 <udd_ctrl_stall_data>
    2c80:	23 c0       	rjmp	.+70     	; 0x2cc8 <__vector_126+0x1c4>
    2c82:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2c84:	81 11       	cpse	r24, r1
    2c86:	02 c0       	rjmp	.+4      	; 0x2c8c <__vector_126+0x188>
    2c88:	c3 d8       	rcall	.-3706   	; 0x1e10 <udd_ctrl_stall_data>
    2c8a:	1e c0       	rjmp	.+60     	; 0x2cc8 <__vector_126+0x1c4>
    2c8c:	20 91 e5 22 	lds	r18, 0x22E5	; 0x8022e5 <udd_ctrl_prev_payload_nb_trans>
    2c90:	30 91 e6 22 	lds	r19, 0x22E6	; 0x8022e6 <udd_ctrl_prev_payload_nb_trans+0x1>
    2c94:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <udd_ctrl_payload_nb_trans>
    2c98:	90 91 e4 22 	lds	r25, 0x22E4	; 0x8022e4 <udd_ctrl_payload_nb_trans+0x1>
    2c9c:	82 0f       	add	r24, r18
    2c9e:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2ca0:	80 93 e5 22 	sts	0x22E5, r24	; 0x8022e5 <udd_ctrl_prev_payload_nb_trans>
    2ca4:	90 93 e6 22 	sts	0x22E6, r25	; 0x8022e6 <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2ca8:	10 92 e3 22 	sts	0x22E3, r1	; 0x8022e3 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    2cac:	10 92 e4 22 	sts	0x22E4, r1	; 0x8022e4 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2cb0:	e4 ef       	ldi	r30, 0xF4	; 244
    2cb2:	f2 e2       	ldi	r31, 0x22	; 34
		udd_ctrl_in_sent();
    2cb4:	02 e0       	ldi	r16, 0x02	; 2
    2cb6:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2cb8:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2cba:	06 93       	lac	Z, r16
    2cbc:	05 c0       	rjmp	.+10     	; 0x2cc8 <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2cbe:	80 38       	cpi	r24, 0x80	; 128
    2cc0:	11 f4       	brne	.+4      	; 0x2cc6 <__vector_126+0x1c2>
    2cc2:	ca d8       	rcall	.-3692   	; 0x1e58 <udd_ctrl_in_sent>
    2cc4:	01 c0       	rjmp	.+2      	; 0x2cc8 <__vector_126+0x1c4>
    2cc6:	ea d9       	rcall	.-3116   	; 0x209c <udd_ep_trans_complet>
    2cc8:	ff 91       	pop	r31
    2cca:	ef 91       	pop	r30
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	bf 91       	pop	r27
    2cd2:	af 91       	pop	r26
    2cd4:	9f 91       	pop	r25
    2cd6:	8f 91       	pop	r24
    2cd8:	7f 91       	pop	r23
    2cda:	6f 91       	pop	r22
    2cdc:	5f 91       	pop	r21
    2cde:	4f 91       	pop	r20
    2ce0:	3f 91       	pop	r19
    2ce2:	2f 91       	pop	r18
    2ce4:	1f 91       	pop	r17
    2ce6:	0f 91       	pop	r16
    2ce8:	0f 90       	pop	r0
    2cea:	0b be       	out	0x3b, r0	; 59
    2cec:	0f 90       	pop	r0
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	0f 90       	pop	r0
    2cf2:	1f 90       	pop	r1
    2cf4:	18 95       	reti

00002cf6 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    2cf6:	cf 92       	push	r12
    2cf8:	df 92       	push	r13
    2cfa:	ef 92       	push	r14
    2cfc:	ff 92       	push	r15
    2cfe:	cf 93       	push	r28
    2d00:	df 93       	push	r29
    2d02:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    2d04:	6b 01       	movw	r12, r22
    2d06:	e1 2c       	mov	r14, r1
    2d08:	f1 2c       	mov	r15, r1
    2d0a:	60 e8       	ldi	r22, 0x80	; 128
    2d0c:	73 ec       	ldi	r23, 0xC3	; 195
    2d0e:	89 ec       	ldi	r24, 0xC9	; 201
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	a7 01       	movw	r20, r14
    2d14:	96 01       	movw	r18, r12
    2d16:	0e 94 82 23 	call	0x4704	; 0x4704 <__udivmodsi4>
    2d1a:	ca 01       	movw	r24, r20
    2d1c:	b9 01       	movw	r22, r18
    2d1e:	2f ef       	ldi	r18, 0xFF	; 255
    2d20:	3f ef       	ldi	r19, 0xFF	; 255
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	50 e0       	ldi	r21, 0x00	; 0
    2d26:	0e 94 82 23 	call	0x4704	; 0x4704 <__udivmodsi4>
	if (smallest_div < 1) {
    2d2a:	21 15       	cp	r18, r1
    2d2c:	31 05       	cpc	r19, r1
    2d2e:	29 f4       	brne	.+10     	; 0x2d3a <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    2d34:	21 e0       	ldi	r18, 0x01	; 1
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	2d c0       	rjmp	.+90     	; 0x2d94 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    2d3a:	22 30       	cpi	r18, 0x02	; 2
    2d3c:	31 05       	cpc	r19, r1
    2d3e:	28 f4       	brcc	.+10     	; 0x2d4a <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    2d44:	22 e0       	ldi	r18, 0x02	; 2
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	25 c0       	rjmp	.+74     	; 0x2d94 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    2d4a:	24 30       	cpi	r18, 0x04	; 4
    2d4c:	31 05       	cpc	r19, r1
    2d4e:	28 f4       	brcc	.+10     	; 0x2d5a <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2d50:	83 e0       	ldi	r24, 0x03	; 3
    2d52:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    2d54:	24 e0       	ldi	r18, 0x04	; 4
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	1d c0       	rjmp	.+58     	; 0x2d94 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    2d5a:	28 30       	cpi	r18, 0x08	; 8
    2d5c:	31 05       	cpc	r19, r1
    2d5e:	28 f4       	brcc	.+10     	; 0x2d6a <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2d60:	84 e0       	ldi	r24, 0x04	; 4
    2d62:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    2d64:	28 e0       	ldi	r18, 0x08	; 8
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	15 c0       	rjmp	.+42     	; 0x2d94 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    2d6a:	20 34       	cpi	r18, 0x40	; 64
    2d6c:	31 05       	cpc	r19, r1
    2d6e:	28 f4       	brcc	.+10     	; 0x2d7a <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2d70:	85 e0       	ldi	r24, 0x05	; 5
    2d72:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2d74:	20 e4       	ldi	r18, 0x40	; 64
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	0d c0       	rjmp	.+26     	; 0x2d94 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    2d7a:	2f 3f       	cpi	r18, 0xFF	; 255
    2d7c:	31 05       	cpc	r19, r1
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <pwm_set_frequency+0x8c>
    2d80:	28 f4       	brcc	.+10     	; 0x2d8c <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2d82:	86 e0       	ldi	r24, 0x06	; 6
    2d84:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	31 e0       	ldi	r19, 0x01	; 1
    2d8a:	04 c0       	rjmp	.+8      	; 0x2d94 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2d8c:	87 e0       	ldi	r24, 0x07	; 7
    2d8e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	50 e0       	ldi	r21, 0x00	; 0
    2d98:	60 e8       	ldi	r22, 0x80	; 128
    2d9a:	73 ec       	ldi	r23, 0xC3	; 195
    2d9c:	89 ec       	ldi	r24, 0xC9	; 201
    2d9e:	91 e0       	ldi	r25, 0x01	; 1
    2da0:	0e 94 82 23 	call	0x4704	; 0x4704 <__udivmodsi4>
    2da4:	ca 01       	movw	r24, r20
    2da6:	b9 01       	movw	r22, r18
    2da8:	a7 01       	movw	r20, r14
    2daa:	96 01       	movw	r18, r12
    2dac:	0e 94 82 23 	call	0x4704	; 0x4704 <__udivmodsi4>
    2db0:	2d 83       	std	Y+5, r18	; 0x05
    2db2:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2db4:	24 36       	cpi	r18, 0x64	; 100
    2db6:	31 05       	cpc	r19, r1
    2db8:	18 f4       	brcc	.+6      	; 0x2dc0 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    2dba:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2dbc:	1d 82       	std	Y+5, r1	; 0x05
    2dbe:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2dc0:	df 91       	pop	r29
    2dc2:	cf 91       	pop	r28
    2dc4:	ff 90       	pop	r15
    2dc6:	ef 90       	pop	r14
    2dc8:	df 90       	pop	r13
    2dca:	cf 90       	pop	r12
    2dcc:	08 95       	ret

00002dce <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2dce:	0f 93       	push	r16
    2dd0:	1f 93       	push	r17
    2dd2:	cf 93       	push	r28
    2dd4:	df 93       	push	r29
    2dd6:	ec 01       	movw	r28, r24
    2dd8:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    2dda:	86 2f       	mov	r24, r22
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	87 30       	cpi	r24, 0x07	; 7
    2de0:	91 05       	cpc	r25, r1
    2de2:	08 f0       	brcs	.+2      	; 0x2de6 <pwm_init+0x18>
    2de4:	8b c0       	rjmp	.+278    	; 0x2efc <pwm_init+0x12e>
    2de6:	fc 01       	movw	r30, r24
    2de8:	88 27       	eor	r24, r24
    2dea:	eb 5f       	subi	r30, 0xFB	; 251
    2dec:	fe 4f       	sbci	r31, 0xFE	; 254
    2dee:	8f 4f       	sbci	r24, 0xFF	; 255
    2df0:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	98 e0       	ldi	r25, 0x08	; 8
    2df8:	88 83       	st	Y, r24
    2dfa:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2dfc:	e0 e4       	ldi	r30, 0x40	; 64
    2dfe:	f6 e0       	ldi	r31, 0x06	; 6
    2e00:	30 81       	ld	r19, Z
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	2f ef       	ldi	r18, 0xFF	; 255
    2e08:	24 0f       	add	r18, r20
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <pwm_init+0x42>
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	2a 95       	dec	r18
    2e12:	e2 f7       	brpl	.-8      	; 0x2e0c <pwm_init+0x3e>
    2e14:	83 2b       	or	r24, r19
    2e16:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2e18:	71 c0       	rjmp	.+226    	; 0x2efc <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    2e1a:	80 e4       	ldi	r24, 0x40	; 64
    2e1c:	98 e0       	ldi	r25, 0x08	; 8
    2e1e:	88 83       	st	Y, r24
    2e20:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2e22:	e0 e4       	ldi	r30, 0x40	; 64
    2e24:	f6 e0       	ldi	r31, 0x06	; 6
    2e26:	30 81       	ld	r19, Z
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	23 e0       	ldi	r18, 0x03	; 3
    2e2e:	24 0f       	add	r18, r20
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <pwm_init+0x68>
    2e32:	88 0f       	add	r24, r24
    2e34:	99 1f       	adc	r25, r25
    2e36:	2a 95       	dec	r18
    2e38:	e2 f7       	brpl	.-8      	; 0x2e32 <pwm_init+0x64>
    2e3a:	83 2b       	or	r24, r19
    2e3c:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2e3e:	5e c0       	rjmp	.+188    	; 0x2efc <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	99 e0       	ldi	r25, 0x09	; 9
    2e44:	88 83       	st	Y, r24
    2e46:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    2e48:	e0 e6       	ldi	r30, 0x60	; 96
    2e4a:	f6 e0       	ldi	r31, 0x06	; 6
    2e4c:	30 81       	ld	r19, Z
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	2f ef       	ldi	r18, 0xFF	; 255
    2e54:	24 0f       	add	r18, r20
    2e56:	02 c0       	rjmp	.+4      	; 0x2e5c <pwm_init+0x8e>
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	2a 95       	dec	r18
    2e5e:	e2 f7       	brpl	.-8      	; 0x2e58 <pwm_init+0x8a>
    2e60:	83 2b       	or	r24, r19
    2e62:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2e64:	4b c0       	rjmp	.+150    	; 0x2efc <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2e66:	80 e4       	ldi	r24, 0x40	; 64
    2e68:	99 e0       	ldi	r25, 0x09	; 9
    2e6a:	88 83       	st	Y, r24
    2e6c:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2e6e:	e0 e6       	ldi	r30, 0x60	; 96
    2e70:	f6 e0       	ldi	r31, 0x06	; 6
    2e72:	30 81       	ld	r19, Z
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	23 e0       	ldi	r18, 0x03	; 3
    2e7a:	24 0f       	add	r18, r20
    2e7c:	02 c0       	rjmp	.+4      	; 0x2e82 <pwm_init+0xb4>
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	2a 95       	dec	r18
    2e84:	e2 f7       	brpl	.-8      	; 0x2e7e <pwm_init+0xb0>
    2e86:	83 2b       	or	r24, r19
    2e88:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2e8a:	38 c0       	rjmp	.+112    	; 0x2efc <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	9a e0       	ldi	r25, 0x0A	; 10
    2e90:	88 83       	st	Y, r24
    2e92:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2e94:	e0 e8       	ldi	r30, 0x80	; 128
    2e96:	f6 e0       	ldi	r31, 0x06	; 6
    2e98:	30 81       	ld	r19, Z
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	2f ef       	ldi	r18, 0xFF	; 255
    2ea0:	24 0f       	add	r18, r20
    2ea2:	02 c0       	rjmp	.+4      	; 0x2ea8 <pwm_init+0xda>
    2ea4:	88 0f       	add	r24, r24
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	2a 95       	dec	r18
    2eaa:	e2 f7       	brpl	.-8      	; 0x2ea4 <pwm_init+0xd6>
    2eac:	83 2b       	or	r24, r19
    2eae:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2eb0:	25 c0       	rjmp	.+74     	; 0x2efc <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    2eb2:	80 e4       	ldi	r24, 0x40	; 64
    2eb4:	9a e0       	ldi	r25, 0x0A	; 10
    2eb6:	88 83       	st	Y, r24
    2eb8:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    2eba:	e0 e8       	ldi	r30, 0x80	; 128
    2ebc:	f6 e0       	ldi	r31, 0x06	; 6
    2ebe:	30 81       	ld	r19, Z
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	23 e0       	ldi	r18, 0x03	; 3
    2ec6:	24 0f       	add	r18, r20
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <pwm_init+0x100>
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	2a 95       	dec	r18
    2ed0:	e2 f7       	brpl	.-8      	; 0x2eca <pwm_init+0xfc>
    2ed2:	83 2b       	or	r24, r19
    2ed4:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2ed6:	12 c0       	rjmp	.+36     	; 0x2efc <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	9b e0       	ldi	r25, 0x0B	; 11
    2edc:	88 83       	st	Y, r24
    2ede:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    2ee0:	e0 ea       	ldi	r30, 0xA0	; 160
    2ee2:	f6 e0       	ldi	r31, 0x06	; 6
    2ee4:	30 81       	ld	r19, Z
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	2f ef       	ldi	r18, 0xFF	; 255
    2eec:	24 0f       	add	r18, r20
    2eee:	02 c0       	rjmp	.+4      	; 0x2ef4 <pwm_init+0x126>
    2ef0:	88 0f       	add	r24, r24
    2ef2:	99 1f       	adc	r25, r25
    2ef4:	2a 95       	dec	r18
    2ef6:	e2 f7       	brpl	.-8      	; 0x2ef0 <pwm_init+0x122>
    2ef8:	83 2b       	or	r24, r19
    2efa:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    2efc:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    2efe:	42 30       	cpi	r20, 0x02	; 2
    2f00:	61 f0       	breq	.+24     	; 0x2f1a <pwm_init+0x14c>
    2f02:	18 f4       	brcc	.+6      	; 0x2f0a <pwm_init+0x13c>
    2f04:	41 30       	cpi	r20, 0x01	; 1
    2f06:	31 f0       	breq	.+12     	; 0x2f14 <pwm_init+0x146>
    2f08:	10 c0       	rjmp	.+32     	; 0x2f2a <pwm_init+0x15c>
    2f0a:	43 30       	cpi	r20, 0x03	; 3
    2f0c:	49 f0       	breq	.+18     	; 0x2f20 <pwm_init+0x152>
    2f0e:	44 30       	cpi	r20, 0x04	; 4
    2f10:	51 f0       	breq	.+20     	; 0x2f26 <pwm_init+0x158>
    2f12:	0b c0       	rjmp	.+22     	; 0x2f2a <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    2f14:	80 e1       	ldi	r24, 0x10	; 16
    2f16:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2f18:	08 c0       	rjmp	.+16     	; 0x2f2a <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    2f1a:	80 e2       	ldi	r24, 0x20	; 32
    2f1c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2f1e:	05 c0       	rjmp	.+10     	; 0x2f2a <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    2f20:	80 e4       	ldi	r24, 0x40	; 64
    2f22:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2f24:	02 c0       	rjmp	.+4      	; 0x2f2a <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    2f26:	80 e8       	ldi	r24, 0x80	; 128
    2f28:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    2f2a:	88 81       	ld	r24, Y
    2f2c:	99 81       	ldd	r25, Y+1	; 0x01
    2f2e:	0e 94 ce 0c 	call	0x199c	; 0x199c <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    2f32:	e8 81       	ld	r30, Y
    2f34:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2f36:	81 81       	ldd	r24, Z+1	; 0x01
    2f38:	88 7f       	andi	r24, 0xF8	; 248
    2f3a:	83 60       	ori	r24, 0x03	; 3
    2f3c:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2f3e:	1d 82       	std	Y+5, r1	; 0x05
    2f40:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2f42:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    2f44:	e8 81       	ld	r30, Y
    2f46:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2f48:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2f4a:	80 7f       	andi	r24, 0xF0	; 240
    2f4c:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    2f4e:	b8 01       	movw	r22, r16
    2f50:	ce 01       	movw	r24, r28
    2f52:	d1 de       	rcall	.-606    	; 0x2cf6 <pwm_set_frequency>
}
    2f54:	df 91       	pop	r29
    2f56:	cf 91       	pop	r28
    2f58:	1f 91       	pop	r17
    2f5a:	0f 91       	pop	r16
    2f5c:	08 95       	ret

00002f5e <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    2f64:	2d 81       	ldd	r18, Y+5	; 0x05
    2f66:	3e 81       	ldd	r19, Y+6	; 0x06
    2f68:	a6 2f       	mov	r26, r22
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	0e 94 ac 23 	call	0x4758	; 0x4758 <__umulhisi3>
    2f70:	24 e6       	ldi	r18, 0x64	; 100
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e0       	ldi	r20, 0x00	; 0
    2f76:	50 e0       	ldi	r21, 0x00	; 0
    2f78:	0e 94 82 23 	call	0x4704	; 0x4704 <__udivmodsi4>
    2f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7e:	e8 81       	ld	r30, Y
    2f80:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2f82:	e6 fd       	sbrc	r30, 6
    2f84:	17 c0       	rjmp	.+46     	; 0x2fb4 <pwm_start+0x56>
		switch (channel_index) {
    2f86:	82 30       	cpi	r24, 0x02	; 2
    2f88:	61 f0       	breq	.+24     	; 0x2fa2 <pwm_start+0x44>
    2f8a:	18 f4       	brcc	.+6      	; 0x2f92 <pwm_start+0x34>
    2f8c:	81 30       	cpi	r24, 0x01	; 1
    2f8e:	31 f0       	breq	.+12     	; 0x2f9c <pwm_start+0x3e>
    2f90:	1b c0       	rjmp	.+54     	; 0x2fc8 <pwm_start+0x6a>
    2f92:	83 30       	cpi	r24, 0x03	; 3
    2f94:	49 f0       	breq	.+18     	; 0x2fa8 <pwm_start+0x4a>
    2f96:	84 30       	cpi	r24, 0x04	; 4
    2f98:	51 f0       	breq	.+20     	; 0x2fae <pwm_start+0x50>
    2f9a:	16 c0       	rjmp	.+44     	; 0x2fc8 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    2f9c:	20 af       	std	Z+56, r18	; 0x38
    2f9e:	31 af       	std	Z+57, r19	; 0x39
    2fa0:	13 c0       	rjmp	.+38     	; 0x2fc8 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2fa2:	22 af       	std	Z+58, r18	; 0x3a
    2fa4:	33 af       	std	Z+59, r19	; 0x3b
    2fa6:	10 c0       	rjmp	.+32     	; 0x2fc8 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2fa8:	24 af       	std	Z+60, r18	; 0x3c
    2faa:	35 af       	std	Z+61, r19	; 0x3d
    2fac:	0d c0       	rjmp	.+26     	; 0x2fc8 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2fae:	26 af       	std	Z+62, r18	; 0x3e
    2fb0:	37 af       	std	Z+63, r19	; 0x3f
    2fb2:	0a c0       	rjmp	.+20     	; 0x2fc8 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	19 f0       	breq	.+6      	; 0x2fbe <pwm_start+0x60>
    2fb8:	82 30       	cpi	r24, 0x02	; 2
    2fba:	21 f0       	breq	.+8      	; 0x2fc4 <pwm_start+0x66>
    2fbc:	05 c0       	rjmp	.+10     	; 0x2fc8 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2fbe:	20 af       	std	Z+56, r18	; 0x38
    2fc0:	31 af       	std	Z+57, r19	; 0x39
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    2fc4:	22 af       	std	Z+58, r18	; 0x3a
    2fc6:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    2fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fca:	9e 81       	ldd	r25, Y+6	; 0x06
    2fcc:	e8 81       	ld	r30, Y
    2fce:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2fd0:	86 a3       	std	Z+38, r24	; 0x26
    2fd2:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	e8 81       	ld	r30, Y
    2fd8:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    2fda:	e6 fd       	sbrc	r30, 6
    2fdc:	04 c0       	rjmp	.+8      	; 0x2fe6 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	89 2b       	or	r24, r25
    2fe2:	81 83       	std	Z+1, r24	; 0x01
    2fe4:	04 c0       	rjmp	.+8      	; 0x2fee <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    2fe6:	91 81       	ldd	r25, Z+1	; 0x01
    2fe8:	80 73       	andi	r24, 0x30	; 48
    2fea:	89 2b       	or	r24, r25
    2fec:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    2fee:	e8 81       	ld	r30, Y
    2ff0:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2ff2:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2ff4:	80 7f       	andi	r24, 0xF0	; 240
    2ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff8:	89 2b       	or	r24, r25
    2ffa:	80 83       	st	Z, r24
}
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	08 95       	ret

00003002 <cb_rtc_alarm>:

void halt(void)
{
	/* MAIN Loop Shutdown */
	
	runmode = 0;
    3002:	08 95       	ret

00003004 <usb_callback_suspend_action>:
    3004:	08 95       	ret

00003006 <usb_callback_resume_action>:
    3006:	08 95       	ret

00003008 <usb_callback_remotewakeup_enable>:
    3008:	08 95       	ret

0000300a <usb_callback_remotewakeup_disable>:
    300a:	08 95       	ret

0000300c <usb_callback_cdc_enable>:
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <usb_cdc_transfers_autorized>
    3012:	08 95       	ret

00003014 <usb_callback_cdc_disable>:
    3014:	10 92 38 23 	sts	0x2338, r1	; 0x802338 <usb_cdc_transfers_autorized>
    3018:	08 95       	ret

0000301a <usb_callback_config>:
    301a:	08 95       	ret

0000301c <usb_callback_cdc_set_dtr>:
    301c:	08 95       	ret

0000301e <usb_callback_cdc_set_rts>:
    301e:	08 95       	ret

00003020 <usb_callback_rx_notify>:
    3020:	08 95       	ret

00003022 <usb_callback_tx_empty_notify>:
    3022:	08 95       	ret

00003024 <main>:
}


int main(void)
{
    3024:	2f 92       	push	r2
    3026:	3f 92       	push	r3
    3028:	4f 92       	push	r4
    302a:	5f 92       	push	r5
    302c:	6f 92       	push	r6
    302e:	7f 92       	push	r7
    3030:	8f 92       	push	r8
    3032:	9f 92       	push	r9
    3034:	af 92       	push	r10
    3036:	bf 92       	push	r11
    3038:	cf 92       	push	r12
    303a:	df 92       	push	r13
    303c:	ef 92       	push	r14
    303e:	ff 92       	push	r15
    3040:	0f 93       	push	r16
    3042:	1f 93       	push	r17
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	c2 54       	subi	r28, 0x42	; 66
    304e:	d1 09       	sbc	r29, r1
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	de bf       	out	0x3e, r29	; 62
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    3054:	0f 2e       	mov	r0, r31
    3056:	f0 ea       	ldi	r31, 0xA0	; 160
    3058:	af 2e       	mov	r10, r31
    305a:	b1 2c       	mov	r11, r1
    305c:	f0 2d       	mov	r31, r0
    305e:	07 e0       	ldi	r16, 0x07	; 7
    3060:	d5 01       	movw	r26, r10
    3062:	12 96       	adiw	r26, 0x02	; 2
	uint8_t retcode = 0;
	
	/* Init of sub-modules */
	pmic_init();
	sysclk_init();
    3064:	0c 93       	st	X, r16
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    3066:	a1 d2       	rcall	.+1346   	; 0x35aa <sysclk_init>
    3068:	e9 e8       	ldi	r30, 0x89	; 137
    306a:	f4 e2       	ldi	r31, 0x24	; 36
    306c:	10 82       	st	Z, r1
    306e:	11 82       	std	Z+1, r1	; 0x01
    3070:	12 82       	std	Z+2, r1	; 0x02
    3072:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3074:	14 82       	std	Z+4, r1	; 0x04
    3076:	11 e0       	ldi	r17, 0x01	; 1
	sleepmgr_init();	// Unlocks all sleep mode levels
	rtc_init();
    3078:	15 83       	std	Z+5, r17	; 0x05
    307a:	0e 94 4f 01 	call	0x29e	; 0x29e <rtc_init>
	rtc_set_callback(cb_rtc_alarm);
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	98 e1       	ldi	r25, 0x18	; 24
    3082:	0e 94 4a 01 	call	0x294	; 0x294 <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3086:	62 e0       	ldi	r22, 0x02	; 2
    3088:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event 7 */
	EVSYS.CH7MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    308a:	10 d3       	rcall	.+1568   	; 0x36ac <sysclk_enable_module>
    308c:	e0 e8       	ldi	r30, 0x80	; 128
    308e:	f1 e0       	ldi	r31, 0x01	; 1
    3090:	80 ec       	ldi	r24, 0xC0	; 192

	/* DAC - event 6 */
	EVSYS.CH6MUX = EVSYS_CHMUX_TCE1_OVF_gc;
    3092:	87 83       	std	Z+7, r24	; 0x07
    3094:	88 ee       	ldi	r24, 0xE8	; 232


static void tc_init(void)
{
	/* DAC clock */
	tc_enable(&TCE1);
    3096:	86 83       	std	Z+6, r24	; 0x06
    3098:	80 e4       	ldi	r24, 0x40	; 64
    309a:	9a e0       	ldi	r25, 0x0A	; 10
    309c:	0e 94 ce 0c 	call	0x199c	; 0x199c <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    30a0:	0f 2e       	mov	r0, r31
    30a2:	f0 e4       	ldi	r31, 0x40	; 64
    30a4:	ef 2e       	mov	r14, r31
    30a6:	fa e0       	ldi	r31, 0x0A	; 10
    30a8:	ff 2e       	mov	r15, r31
    30aa:	f0 2d       	mov	r31, r0
    30ac:	f7 01       	movw	r30, r14
    30ae:	81 81       	ldd	r24, Z+1	; 0x01
    30b0:	88 7f       	andi	r24, 0xF8	; 248
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    30b2:	81 83       	std	Z+1, r24	; 0x01
    30b4:	80 e7       	ldi	r24, 0x70	; 112
    30b6:	92 e0       	ldi	r25, 0x02	; 2
    30b8:	86 a3       	std	Z+38, r24	; 0x26
	tc_set_wgm(&TCE1, TC_WG_NORMAL);											// Internal clock for DAC convertion
	tc_write_period(&TCE1, (sysclk_get_per_hz() / DAC_RATE_OF_CONV) - 1);		// DAC clock 48 kHz for audio play-back

	/* VCTCXO PWM signal generation */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 500);							// Init PWM structure and enable timer
    30ba:	97 a3       	std	Z+39, r25	; 0x27
    30bc:	24 ef       	ldi	r18, 0xF4	; 244
    30be:	31 e0       	ldi	r19, 0x01	; 1
    30c0:	43 e0       	ldi	r20, 0x03	; 3
    30c2:	60 e0       	ldi	r22, 0x00	; 0
    30c4:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    30c6:	01 96       	adiw	r24, 0x01	; 1
    30c8:	82 de       	rcall	.-764    	; 0x2dce <pwm_init>
    30ca:	6d e2       	ldi	r22, 0x2D	; 45
    30cc:	ce 01       	movw	r24, r28
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    30ce:	01 96       	adiw	r24, 0x01	; 1
    30d0:	46 df       	rcall	.-372    	; 0x2f5e <pwm_start>
    30d2:	c1 2c       	mov	r12, r1
    30d4:	68 94       	set
    30d6:	dd 24       	eor	r13, r13
    30d8:	d3 f8       	bld	r13, 3
    30da:	8d e5       	ldi	r24, 0x5D	; 93
    30dc:	94 e7       	ldi	r25, 0x74	; 116
    30de:	d6 01       	movw	r26, r12
    30e0:	dc 96       	adiw	r26, 0x3c	; 60
    30e2:	8d 93       	st	X+, r24
	struct adc_channel_config			adcch_vctcxo_conf;
	struct adc_channel_config			adcch_io_adc4_conf;
	struct adc_channel_config			adcch_io_adc5_conf;

	/* Prepare the structures */
	adc_read_configuration(&ADC_5V0,						&adc_5v0_conf);
    30e4:	9c 93       	st	X, r25
    30e6:	dd 97       	sbiw	r26, 0x3d	; 61
    30e8:	be 01       	movw	r22, r28
    30ea:	6c 5d       	subi	r22, 0xDC	; 220
    30ec:	7f 4f       	sbci	r23, 0xFF	; 255
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    30f2:	0e 94 01 05 	call	0xa02	; 0xa02 <adc_read_configuration>
    30f6:	ae 01       	movw	r20, r28
    30f8:	41 5c       	subi	r20, 0xC1	; 193
    30fa:	5f 4f       	sbci	r21, 0xFF	; 255
    30fc:	61 e0       	ldi	r22, 0x01	; 1
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_3V0,						&adc_3v0_conf);
    3102:	0e 94 85 05 	call	0xb0a	; 0xb0a <adcch_read_configuration>
    3106:	be 01       	movw	r22, r28
    3108:	63 5e       	subi	r22, 0xE3	; 227
    310a:	7f 4f       	sbci	r23, 0xFF	; 255
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    3110:	0e 94 01 05 	call	0xa02	; 0xa02 <adc_read_configuration>
    3114:	ae 01       	movw	r20, r28
    3116:	45 5c       	subi	r20, 0xC5	; 197
    3118:	5f 4f       	sbci	r21, 0xFF	; 255
    311a:	61 e0       	ldi	r22, 0x01	; 1
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VBAT,						&adc_vbat_conf);
    3120:	0e 94 85 05 	call	0xb0a	; 0xb0a <adcch_read_configuration>
    3124:	be 01       	movw	r22, r28
    3126:	6a 5e       	subi	r22, 0xEA	; 234
    3128:	7f 4f       	sbci	r23, 0xFF	; 255
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    312e:	0e 94 01 05 	call	0xa02	; 0xa02 <adc_read_configuration>
    3132:	ae 01       	movw	r20, r28
    3134:	49 5c       	subi	r20, 0xC9	; 201
    3136:	5f 4f       	sbci	r21, 0xFF	; 255
    3138:	61 e0       	ldi	r22, 0x01	; 1
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VCTCXO,						&adc_vctcxo_conf);
    313e:	0e 94 85 05 	call	0xb0a	; 0xb0a <adcch_read_configuration>
    3142:	be 01       	movw	r22, r28
    3144:	61 5f       	subi	r22, 0xF1	; 241
    3146:	7f 4f       	sbci	r23, 0xFF	; 255
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    314c:	0e 94 01 05 	call	0xa02	; 0xa02 <adc_read_configuration>
    3150:	ae 01       	movw	r20, r28
    3152:	4d 5c       	subi	r20, 0xCD	; 205
    3154:	5f 4f       	sbci	r21, 0xFF	; 255
    3156:	62 e0       	ldi	r22, 0x02	; 2
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC4,					&adc_io_adc4_conf);
    315c:	0e 94 85 05 	call	0xb0a	; 0xb0a <adcch_read_configuration>
    3160:	be 01       	movw	r22, r28
    3162:	68 5f       	subi	r22, 0xF8	; 248
    3164:	7f 4f       	sbci	r23, 0xFF	; 255
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_io_adc4_conf);
    316a:	0e 94 01 05 	call	0xa02	; 0xa02 <adc_read_configuration>
    316e:	ae 01       	movw	r20, r28
    3170:	41 5d       	subi	r20, 0xD1	; 209
    3172:	5f 4f       	sbci	r21, 0xFF	; 255
    3174:	64 e0       	ldi	r22, 0x04	; 4
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC5,					&adc_io_adc5_conf);
    317a:	0e 94 85 05 	call	0xb0a	; 0xb0a <adcch_read_configuration>
    317e:	be 01       	movw	r22, r28
    3180:	6f 5f       	subi	r22, 0xFF	; 255
    3182:	7f 4f       	sbci	r23, 0xFF	; 255
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_io_adc5_conf);
    3188:	0e 94 01 05 	call	0xa02	; 0xa02 <adc_read_configuration>
    318c:	ae 01       	movw	r20, r28
    318e:	45 5d       	subi	r20, 0xD5	; 213
    3190:	5f 4f       	sbci	r21, 0xFF	; 255
    3192:	68 e0       	ldi	r22, 0x08	; 8
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	92 e0       	ldi	r25, 0x02	; 2
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3198:	0e 94 85 05 	call	0xb0a	; 0xb0a <adcch_read_configuration>
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    319c:	6d a1       	ldd	r22, Y+37	; 0x25
    319e:	8e a1       	ldd	r24, Y+38	; 0x26
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    31a0:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    31a2:	8e a3       	std	Y+38, r24	; 0x26
    31a4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    31a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    31a8:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    31aa:	8f 8f       	std	Y+31, r24	; 0x1f
    31ac:	4f 89       	ldd	r20, Y+23	; 0x17
    31ae:	88 8d       	ldd	r24, Y+24	; 0x18
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    31b0:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    31b2:	88 8f       	std	Y+24, r24	; 0x18
    31b4:	38 89       	ldd	r19, Y+16	; 0x10
    31b6:	89 89       	ldd	r24, Y+17	; 0x11
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    31b8:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    31ba:	89 8b       	std	Y+17, r24	; 0x11
    31bc:	29 85       	ldd	r18, Y+9	; 0x09
    31be:	8a 85       	ldd	r24, Y+10	; 0x0a
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    31c0:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    31c2:	8a 87       	std	Y+10, r24	; 0x0a
    31c4:	9a 81       	ldd	r25, Y+2	; 0x02
    31c6:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    31c8:	8f 78       	andi	r24, 0x8F	; 143
    31ca:	8b 83       	std	Y+3, r24	; 0x03
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    31cc:	86 ec       	ldi	r24, 0xC6	; 198
    31ce:	8f a3       	std	Y+39, r24	; 0x27
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    31d0:	1b 87       	std	Y+11, r17	; 0x0b
    31d2:	1c 83       	std	Y+4, r17	; 0x04
    31d4:	83 e0       	ldi	r24, 0x03	; 3
    31d6:	88 a7       	std	Y+40, r24	; 0x28
    31d8:	89 a3       	std	Y+33, r24	; 0x21
    31da:	8a 8f       	std	Y+26, r24	; 0x1a
    31dc:	8b 8b       	std	Y+19, r24	; 0x13
static inline void adc_set_gain_impedance_mode(struct adc_config *conf,
		enum adc_gainstage_impmode impmode)
{
	switch (impmode) {
	case ADC_GAIN_HIGHIMPEDANCE:
		conf->ctrlb &= ~ADC_IMPMODE_bm;
    31de:	8c 87       	std	Y+12, r24	; 0x0c
    31e0:	8d 83       	std	Y+5, r24	; 0x05
    31e2:	61 70       	andi	r22, 0x01	; 1
    31e4:	60 64       	ori	r22, 0x40	; 64
    31e6:	6d a3       	std	Y+37, r22	; 0x25
    31e8:	59 70       	andi	r21, 0x09	; 9
    31ea:	50 64       	ori	r21, 0x40	; 64
    31ec:	5e 8f       	std	Y+30, r21	; 0x1e
    31ee:	49 70       	andi	r20, 0x09	; 9
    31f0:	40 64       	ori	r20, 0x40	; 64
    31f2:	4f 8b       	std	Y+23, r20	; 0x17
    31f4:	39 70       	andi	r19, 0x09	; 9
    31f6:	30 64       	ori	r19, 0x40	; 64
    31f8:	38 8b       	std	Y+16, r19	; 0x10
    31fa:	21 70       	andi	r18, 0x01	; 1
    31fc:	20 64       	ori	r18, 0x40	; 64
    31fe:	29 87       	std	Y+9, r18	; 0x09
    3200:	91 70       	andi	r25, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3202:	90 64       	ori	r25, 0x40	; 64
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3204:	9a 83       	std	Y+2, r25	; 0x02
    3206:	1f af       	std	Y+63, r17	; 0x3f
    3208:	90 e1       	ldi	r25, 0x10	; 16
    320a:	21 96       	adiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    320c:	9f af       	std	Y+63, r25	; 0x3f
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    320e:	21 97       	sbiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3210:	1b af       	std	Y+59, r17	; 0x3b
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3212:	1c ae       	std	Y+60, r1	; 0x3c
    3214:	1f ab       	std	Y+55, r17	; 0x37
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3216:	98 e1       	ldi	r25, 0x18	; 24
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3218:	98 af       	std	Y+56, r25	; 0x38
    321a:	1b ab       	std	Y+51, r17	; 0x33
    321c:	68 94       	set
    321e:	99 24       	eor	r9, r9
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3220:	93 f8       	bld	r9, 3
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3222:	9c aa       	std	Y+52, r9	; 0x34
    3224:	1f a7       	std	Y+47, r17	; 0x2f
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3226:	90 e2       	ldi	r25, 0x20	; 32
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3228:	98 ab       	std	Y+48, r25	; 0x30
    322a:	1b a7       	std	Y+43, r17	; 0x2b
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    322c:	98 e2       	ldi	r25, 0x28	; 40
    322e:	9c a7       	std	Y+44, r25	; 0x2c
    3230:	22 96       	adiw	r28, 0x02	; 2
    3232:	9f ad       	ldd	r25, Y+63	; 0x3f
    3234:	22 97       	sbiw	r28, 0x02	; 2
    3236:	93 7f       	andi	r25, 0xF3	; 243
    3238:	22 96       	adiw	r28, 0x02	; 2
    323a:	9f af       	std	Y+63, r25	; 0x3f
    323c:	22 97       	sbiw	r28, 0x02	; 2
    323e:	9d ad       	ldd	r25, Y+61	; 0x3d
    3240:	93 7f       	andi	r25, 0xF3	; 243
    3242:	9d af       	std	Y+61, r25	; 0x3d
    3244:	99 ad       	ldd	r25, Y+57	; 0x39
    3246:	93 7f       	andi	r25, 0xF3	; 243
    3248:	99 af       	std	Y+57, r25	; 0x39
    324a:	9d a9       	ldd	r25, Y+53	; 0x35
    324c:	93 7f       	andi	r25, 0xF3	; 243
    324e:	9d ab       	std	Y+53, r25	; 0x35
    3250:	99 a9       	ldd	r25, Y+49	; 0x31
    3252:	93 7f       	andi	r25, 0xF3	; 243
    3254:	99 ab       	std	Y+49, r25	; 0x31
    3256:	9d a5       	ldd	r25, Y+45	; 0x2d
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    3258:	93 7f       	andi	r25, 0xF3	; 243
    325a:	9d a7       	std	Y+45, r25	; 0x2d
    325c:	23 96       	adiw	r28, 0x03	; 3
    325e:	8f af       	std	Y+63, r24	; 0x3f
    3260:	23 97       	sbiw	r28, 0x03	; 3
	adcch_set_pin_scan(&adcch_5v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_3v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_vbat_conf,	0, 3);

	/* Execute the new settings */
	adc_write_configuration(&ADC_5V0,						&adc_5v0_conf);
    3262:	8e af       	std	Y+62, r24	; 0x3e
    3264:	8a af       	std	Y+58, r24	; 0x3a
    3266:	be 01       	movw	r22, r28
    3268:	6c 5d       	subi	r22, 0xDC	; 220
    326a:	7f 4f       	sbci	r23, 0xFF	; 255
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    3270:	0e 94 97 04 	call	0x92e	; 0x92e <adc_write_configuration>
    3274:	ae 01       	movw	r20, r28
    3276:	41 5c       	subi	r20, 0xC1	; 193
    3278:	5f 4f       	sbci	r21, 0xFF	; 255
    327a:	61 e0       	ldi	r22, 0x01	; 1
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_3V0,						&adc_3v0_conf);
    3280:	0e 94 3a 05 	call	0xa74	; 0xa74 <adcch_write_configuration>
    3284:	be 01       	movw	r22, r28
    3286:	63 5e       	subi	r22, 0xE3	; 227
    3288:	7f 4f       	sbci	r23, 0xFF	; 255
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    328e:	0e 94 97 04 	call	0x92e	; 0x92e <adc_write_configuration>
    3292:	ae 01       	movw	r20, r28
    3294:	45 5c       	subi	r20, 0xC5	; 197
    3296:	5f 4f       	sbci	r21, 0xFF	; 255
    3298:	61 e0       	ldi	r22, 0x01	; 1
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VBAT,						&adc_vbat_conf);
    329e:	0e 94 3a 05 	call	0xa74	; 0xa74 <adcch_write_configuration>
    32a2:	be 01       	movw	r22, r28
    32a4:	6a 5e       	subi	r22, 0xEA	; 234
    32a6:	7f 4f       	sbci	r23, 0xFF	; 255
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    32ac:	0e 94 97 04 	call	0x92e	; 0x92e <adc_write_configuration>
    32b0:	ae 01       	movw	r20, r28
    32b2:	49 5c       	subi	r20, 0xC9	; 201
    32b4:	5f 4f       	sbci	r21, 0xFF	; 255
    32b6:	61 e0       	ldi	r22, 0x01	; 1
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VCTCXO,					&adc_vctcxo_conf);
    32bc:	0e 94 3a 05 	call	0xa74	; 0xa74 <adcch_write_configuration>
    32c0:	be 01       	movw	r22, r28
    32c2:	61 5f       	subi	r22, 0xF1	; 241
    32c4:	7f 4f       	sbci	r23, 0xFF	; 255
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    32ca:	0e 94 97 04 	call	0x92e	; 0x92e <adc_write_configuration>
    32ce:	ae 01       	movw	r20, r28
    32d0:	4d 5c       	subi	r20, 0xCD	; 205
    32d2:	5f 4f       	sbci	r21, 0xFF	; 255
    32d4:	62 e0       	ldi	r22, 0x02	; 2
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC4,					&adc_vctcxo_conf);
    32da:	0e 94 3a 05 	call	0xa74	; 0xa74 <adcch_write_configuration>
    32de:	be 01       	movw	r22, r28
    32e0:	61 5f       	subi	r22, 0xF1	; 241
    32e2:	7f 4f       	sbci	r23, 0xFF	; 255
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_vctcxo_conf);
    32e8:	0e 94 97 04 	call	0x92e	; 0x92e <adc_write_configuration>
    32ec:	ae 01       	movw	r20, r28
    32ee:	4d 5c       	subi	r20, 0xCD	; 205
    32f0:	5f 4f       	sbci	r21, 0xFF	; 255
    32f2:	64 e0       	ldi	r22, 0x04	; 4
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC5,					&adc_vctcxo_conf);
    32f8:	0e 94 3a 05 	call	0xa74	; 0xa74 <adcch_write_configuration>
    32fc:	be 01       	movw	r22, r28
    32fe:	61 5f       	subi	r22, 0xF1	; 241
    3300:	7f 4f       	sbci	r23, 0xFF	; 255
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_vctcxo_conf);
    3306:	0e 94 97 04 	call	0x92e	; 0x92e <adc_write_configuration>
    330a:	ae 01       	movw	r20, r28
    330c:	4d 5c       	subi	r20, 0xCD	; 205
    330e:	5f 4f       	sbci	r21, 0xFF	; 255
    3310:	68 e0       	ldi	r22, 0x08	; 8
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	92 e0       	ldi	r25, 0x02	; 2
static void dac_init(void)
{
    struct dac_config dac_io_dac0_conf;
    struct dac_config dac_io_dac1_conf;

    dac_read_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    3316:	0e 94 3a 05 	call	0xa74	; 0xa74 <adcch_write_configuration>
    331a:	be 01       	movw	r22, r28
    331c:	68 5f       	subi	r22, 0xF8	; 248
    331e:	7f 4f       	sbci	r23, 0xFF	; 255
    3320:	80 e2       	ldi	r24, 0x20	; 32
    3322:	93 e0       	ldi	r25, 0x03	; 3
    dac_read_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    3324:	0e 94 4b 06 	call	0xc96	; 0xc96 <dac_read_configuration>
    3328:	be 01       	movw	r22, r28
    332a:	6f 5f       	subi	r22, 0xFF	; 255
    332c:	7f 4f       	sbci	r23, 0xFF	; 255
    332e:	80 e2       	ldi	r24, 0x20	; 32
    3330:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    3332:	0e 94 4b 06 	call	0xc96	; 0xc96 <dac_read_configuration>
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    3336:	1a 87       	std	Y+10, r17	; 0x0a
    3338:	1b 83       	std	Y+3, r17	; 0x03
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    333a:	84 e0       	ldi	r24, 0x04	; 4
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    333c:	88 87       	std	Y+8, r24	; 0x08
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    333e:	99 85       	ldd	r25, Y+9	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    3340:	99 82       	std	Y+1, r9	; 0x01
    3342:	8a 81       	ldd	r24, Y+2	; 0x02
    3344:	9c 79       	andi	r25, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    3346:	91 60       	ori	r25, 0x01	; 1
    3348:	99 87       	std	Y+9, r25	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    334a:	96 e0       	ldi	r25, 0x06	; 6
    334c:	9b 87       	std	Y+11, r25	; 0x0b
    334e:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    3350:	82 60       	ori	r24, 0x02	; 2
    #ifdef XMEGA_DAC_VERSION_1
    dac_set_conversion_interval(&dac_io_dac0_conf, 2);
    dac_set_conversion_interval(&dac_io_dac1_conf, 2);
    #endif

    dac_write_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    3352:	8a 83       	std	Y+2, r24	; 0x02
    3354:	9c 83       	std	Y+4, r25	; 0x04
    3356:	be 01       	movw	r22, r28
    3358:	68 5f       	subi	r22, 0xF8	; 248
    335a:	7f 4f       	sbci	r23, 0xFF	; 255
    335c:	80 e2       	ldi	r24, 0x20	; 32
    335e:	93 e0       	ldi	r25, 0x03	; 3
    dac_write_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    3360:	0e 94 ef 05 	call	0xbde	; 0xbde <dac_write_configuration>
    3364:	be 01       	movw	r22, r28
    3366:	6f 5f       	subi	r22, 0xFF	; 255
    3368:	7f 4f       	sbci	r23, 0xFF	; 255
    336a:	80 e2       	ldi	r24, 0x20	; 32
    336c:	93 e0       	ldi	r25, 0x03	; 3
	rtc_set_callback(cb_rtc_alarm);
	evsys_init();
	tc_init();
	adc_init();
	dac_init();
	twi_init();
    336e:	0e 94 ef 05 	call	0xbde	; 0xbde <dac_write_configuration>
	
	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    3372:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <twi_init>
	
	/* All interrupt sources prepared here - IRQ activation */
	irq_initialize_vectors();
    3376:	0e 94 c6 02 	call	0x58c	; 0x58c <board_init>
	cpu_irq_enable();
    337a:	f5 01       	movw	r30, r10
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    337c:	02 83       	std	Z+2, r16	; 0x02
    337e:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3380:	d6 01       	movw	r26, r12
    3382:	8c 91       	ld	r24, X
    3384:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3386:	81 60       	ori	r24, 0x01	; 1
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3388:	8c 93       	st	X, r24
    338a:	f7 01       	movw	r30, r14
    338c:	80 81       	ld	r24, Z
}


static void usb_init(void)
{
	udc_start();
    338e:	80 7f       	andi	r24, 0xF0	; 240
    3390:	81 60       	ori	r24, 0x01	; 1
	/* Start of sub-modules */
	tc_start();			// All clocks and PWM timers start here
	
	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB
	stdio_usb_init();	// stdio_usb
    3392:	80 83       	st	Z, r24
    3394:	16 d6       	rcall	.+3116   	; 0x3fc2 <udc_start>
	stdio_usb_enable();
    3396:	0e 94 35 23 	call	0x466a	; 0x466a <stdio_usb_init>
	
	twi_start();
    339a:	0e 94 31 23 	call	0x4662	; 0x4662 <stdio_usb_enable>
	//rtc_start();		// Test for RTC32

	/* The application code */
	runmode = (uint8_t) 1;
    339e:	0e 94 2b 02 	call	0x456	; 0x456 <twi_start>
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    33a2:	10 93 39 23 	sts	0x2339, r17	; 0x802339 <runmode>
    33a6:	0f 2e       	mov	r0, r31
    33a8:	f0 e2       	ldi	r31, 0x20	; 32
    33aa:	8f 2e       	mov	r8, r31
    33ac:	f3 e0       	ldi	r31, 0x03	; 3
	task_twi(now, last);
	
	/* DEBUGGING USB */
	uint32_t now_sec = now >> 10;
	if ((last >> 10) != now_sec) {
		printf("FindMeSAT V1 @USB: RTC32 = %06ld sec\r\n", now_sec);
    33ae:	9f 2e       	mov	r9, r31
    33b0:	f0 2d       	mov	r31, r0
    33b2:	0f 2e       	mov	r0, r31
    33b4:	fe e3       	ldi	r31, 0x3E	; 62
    33b6:	af 2e       	mov	r10, r31
    33b8:	f1 e2       	ldi	r31, 0x21	; 33

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    33ba:	bf 2e       	mov	r11, r31
    33bc:	f0 2d       	mov	r31, r0
    33be:	0f 2e       	mov	r0, r31
    33c0:	f9 e8       	ldi	r31, 0x89	; 137
    33c2:	2f 2e       	mov	r2, r31
    33c4:	f4 e2       	ldi	r31, 0x24	; 36
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    33c6:	3f 2e       	mov	r3, r31
    33c8:	f0 2d       	mov	r31, r0
}

static void task(void)
{
	static uint32_t last = 0;
	uint32_t now = rtc_get_time();
    33ca:	08 e4       	ldi	r16, 0x48	; 72
    33cc:	10 e0       	ldi	r17, 0x00	; 0
    33ce:	0e 94 39 01 	call	0x272	; 0x272 <rtc_get_time>
    33d2:	6b 01       	movw	r12, r22
    33d4:	7c 01       	movw	r14, r24
    33d6:	d4 01       	movw	r26, r8

static void task_dac(void)
{
	static int idx_dacX = 0;
	
	if (dac_channel_is_ready(&DAC_IO_DAC0, DAC_CH0 | DAC_CH1)) {
    33d8:	15 96       	adiw	r26, 0x05	; 5
    33da:	8c 91       	ld	r24, X
    33dc:	83 70       	andi	r24, 0x03	; 3
		dac_set_channel_value(&DAC_IO_DAC0, DAC_IO_DAC0_CHANNEL, dac_io_dac0_buf[idx_dacX]);
    33de:	83 30       	cpi	r24, 0x03	; 3
    33e0:	b1 f5       	brne	.+108    	; 0x344e <main+0x42a>
    33e2:	e0 91 29 23 	lds	r30, 0x2329	; 0x802329 <idx_dacX.6917>
    33e6:	f0 91 2a 23 	lds	r31, 0x232A	; 0x80232a <idx_dacX.6917+0x1>
    33ea:	ee 0f       	add	r30, r30
    33ec:	ff 1f       	adc	r31, r31
    33ee:	eb 59       	subi	r30, 0x9B	; 155
    33f0:	fe 4d       	sbci	r31, 0xDE	; 222

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    33f2:	20 81       	ld	r18, Z
    33f4:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    33f6:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    33f8:	88 87       	std	Y+8, r24	; 0x08
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    33fa:	f8 94       	cli
    33fc:	88 85       	ldd	r24, Y+8	; 0x08
    33fe:	f4 01       	movw	r30, r8
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3400:	20 8f       	std	Z+24, r18	; 0x18
		dac_set_channel_value(&DAC_IO_DAC1, DAC_IO_DAC1_CHANNEL, dac_io_dac1_buf[idx_dacX]);
    3402:	31 8f       	std	Z+25, r19	; 0x19
    3404:	8f bf       	out	0x3f, r24	; 63
    3406:	e0 91 29 23 	lds	r30, 0x2329	; 0x802329 <idx_dacX.6917>
    340a:	f0 91 2a 23 	lds	r31, 0x232A	; 0x80232a <idx_dacX.6917+0x1>
    340e:	ee 0f       	add	r30, r30
    3410:	ff 1f       	adc	r31, r31
    3412:	eb 59       	subi	r30, 0x9B	; 155
    3414:	fe 4d       	sbci	r31, 0xDE	; 222

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3416:	20 81       	ld	r18, Z
    3418:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    341a:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    341c:	89 83       	std	Y+1, r24	; 0x01
    341e:	f8 94       	cli
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	aa e3       	ldi	r26, 0x3A	; 58
    3424:	b3 e0       	ldi	r27, 0x03	; 3
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3426:	2d 93       	st	X+, r18
		
		idx_dacX++;
		idx_dacX %= DAC_NR_OF_SAMPLES;
    3428:	3c 93       	st	X, r19
    342a:	8f bf       	out	0x3f, r24	; 63
    342c:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <idx_dacX.6917>
    3430:	90 91 2a 23 	lds	r25, 0x232A	; 0x80232a <idx_dacX.6917+0x1>
    3434:	01 96       	adiw	r24, 0x01	; 1
    3436:	8f 71       	andi	r24, 0x1F	; 31
    3438:	90 78       	andi	r25, 0x80	; 128
    343a:	99 23       	and	r25, r25
    343c:	24 f4       	brge	.+8      	; 0x3446 <main+0x422>
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	80 6e       	ori	r24, 0xE0	; 224
    3442:	9f 6f       	ori	r25, 0xFF	; 255
    3444:	01 96       	adiw	r24, 0x01	; 1
    3446:	80 93 29 23 	sts	0x2329, r24	; 0x802329 <idx_dacX.6917>
	
	/* Handling the USB connection */
	task_usb();
	
	/* Handle TWI1 and TWI2 communications */
	task_twi(now, last);
    344a:	90 93 2a 23 	sts	0x232A, r25	; 0x80232a <idx_dacX.6917+0x1>
    344e:	40 90 2b 23 	lds	r4, 0x232B	; 0x80232b <last.6928>
    3452:	50 90 2c 23 	lds	r5, 0x232C	; 0x80232c <last.6928+0x1>
    3456:	60 90 2d 23 	lds	r6, 0x232D	; 0x80232d <last.6928+0x2>
}

static void task_twi(uint32_t now, uint32_t last)
{
	/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
	task_twi_onboard(now, last);
    345a:	70 90 2e 23 	lds	r7, 0x232E	; 0x80232e <last.6928+0x3>
    345e:	a3 01       	movw	r20, r6
    3460:	92 01       	movw	r18, r4
    3462:	c7 01       	movw	r24, r14
    3464:	b6 01       	movw	r22, r12
	
	/* TWI2 - LCD Port */
	task_twi_lcd(now, last);
    3466:	0e 94 50 02 	call	0x4a0	; 0x4a0 <task_twi_onboard>
    346a:	a3 01       	movw	r20, r6
    346c:	92 01       	movw	r18, r4
    346e:	c7 01       	movw	r24, r14
    3470:	b6 01       	movw	r22, r12
	
	/* Handle TWI1 and TWI2 communications */
	task_twi(now, last);
	
	/* DEBUGGING USB */
	uint32_t now_sec = now >> 10;
    3472:	0e 94 51 02 	call	0x4a2	; 0x4a2 <task_twi_lcd>
    3476:	d7 01       	movw	r26, r14
    3478:	c6 01       	movw	r24, r12
    347a:	07 2e       	mov	r0, r23
    347c:	7a e0       	ldi	r23, 0x0A	; 10
    347e:	b6 95       	lsr	r27
    3480:	a7 95       	ror	r26
    3482:	97 95       	ror	r25
    3484:	87 95       	ror	r24
    3486:	7a 95       	dec	r23
	if ((last >> 10) != now_sec) {
    3488:	d1 f7       	brne	.-12     	; 0x347e <main+0x45a>
    348a:	70 2d       	mov	r23, r0
    348c:	40 91 2b 23 	lds	r20, 0x232B	; 0x80232b <last.6928>
    3490:	50 91 2c 23 	lds	r21, 0x232C	; 0x80232c <last.6928+0x1>
    3494:	60 91 2d 23 	lds	r22, 0x232D	; 0x80232d <last.6928+0x2>
    3498:	70 91 2e 23 	lds	r23, 0x232E	; 0x80232e <last.6928+0x3>
    349c:	03 2e       	mov	r0, r19
    349e:	3a e0       	ldi	r19, 0x0A	; 10
    34a0:	76 95       	lsr	r23
    34a2:	67 95       	ror	r22
    34a4:	57 95       	ror	r21
    34a6:	47 95       	ror	r20
    34a8:	3a 95       	dec	r19
    34aa:	d1 f7       	brne	.-12     	; 0x34a0 <main+0x47c>
    34ac:	30 2d       	mov	r19, r0
    34ae:	84 17       	cp	r24, r20
    34b0:	95 07       	cpc	r25, r21
    34b2:	a6 07       	cpc	r26, r22
		printf("FindMeSAT V1 @USB: RTC32 = %06ld sec\r\n", now_sec);
    34b4:	b7 07       	cpc	r27, r23
    34b6:	71 f0       	breq	.+28     	; 0x34d4 <main+0x4b0>
    34b8:	bf 93       	push	r27
    34ba:	af 93       	push	r26
    34bc:	9f 93       	push	r25
    34be:	8f 93       	push	r24
    34c0:	bf 92       	push	r11
    34c2:	af 92       	push	r10
    34c4:	0e 94 0e 24 	call	0x481c	; 0x481c <printf>
    34c8:	0f 90       	pop	r0
    34ca:	0f 90       	pop	r0
    34cc:	0f 90       	pop	r0
    34ce:	0f 90       	pop	r0
	}
	
	last = now;
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
    34d4:	c0 92 2b 23 	sts	0x232B, r12	; 0x80232b <last.6928>
    34d8:	d0 92 2c 23 	sts	0x232C, r13	; 0x80232c <last.6928+0x1>
    34dc:	e0 92 2d 23 	sts	0x232D, r14	; 0x80232d <last.6928+0x2>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    34e0:	f0 92 2e 23 	sts	0x232E, r15	; 0x80232e <last.6928+0x3>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    34e4:	f8 94       	cli
    34e6:	f1 01       	movw	r30, r2
    34e8:	80 81       	ld	r24, Z
    34ea:	81 11       	cpse	r24, r1
    34ec:	09 c0       	rjmp	.+18     	; 0x3500 <main+0x4dc>
    34ee:	aa e8       	ldi	r26, 0x8A	; 138
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    34f0:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    34f2:	e0 e0       	ldi	r30, 0x00	; 0
    34f4:	ef 5f       	subi	r30, 0xFF	; 255
    34f6:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    34f8:	88 23       	and	r24, r24
    34fa:	e1 f3       	breq	.-8      	; 0x34f4 <main+0x4d0>
		cpu_irq_enable();
    34fc:	e1 11       	cpse	r30, r1
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <main+0x4e0>
    3500:	78 94       	sei
    3502:	12 c0       	rjmp	.+36     	; 0x3528 <main+0x504>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    3504:	d8 01       	movw	r26, r16
    3506:	8c 91       	ld	r24, X
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	ee 5d       	subi	r30, 0xDE	; 222
    350c:	ff 4d       	sbci	r31, 0xDF	; 223
    350e:	81 7f       	andi	r24, 0xF1	; 241
    3510:	90 81       	ld	r25, Z
	sleep_enable();
    3512:	89 2b       	or	r24, r25
    3514:	8c 93       	st	X, r24
    3516:	8c 91       	ld	r24, X

	cpu_irq_enable();
    3518:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    351a:	8c 93       	st	X, r24

	sleep_disable();
    351c:	78 94       	sei
    351e:	88 95       	sleep
    3520:	f8 01       	movw	r30, r16
    3522:	80 81       	ld	r24, Z
	twi_start();
	//rtc_start();		// Test for RTC32

	/* The application code */
	runmode = (uint8_t) 1;
    while (runmode) {
    3524:	8e 7f       	andi	r24, 0xFE	; 254
    3526:	80 83       	st	Z, r24
    3528:	80 91 39 23 	lds	r24, 0x2339	; 0x802339 <runmode>
		task();
		sleepmgr_enter_sleep();
    }
	
	cpu_irq_disable();
    352c:	81 11       	cpse	r24, r1
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    352e:	4f cf       	rjmp	.-354    	; 0x33ce <main+0x3aa>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3530:	f8 94       	cli
    3532:	f8 94       	cli
    3534:	80 91 89 24 	lds	r24, 0x2489	; 0x802489 <sleepmgr_locks>
    3538:	81 11       	cpse	r24, r1
    353a:	09 c0       	rjmp	.+18     	; 0x354e <main+0x52a>
    353c:	aa e8       	ldi	r26, 0x8A	; 138
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    353e:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3540:	e0 e0       	ldi	r30, 0x00	; 0
    3542:	ef 5f       	subi	r30, 0xFF	; 255
    3544:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3546:	88 23       	and	r24, r24
    3548:	e1 f3       	breq	.-8      	; 0x3542 <main+0x51e>
		cpu_irq_enable();
    354a:	e1 11       	cpse	r30, r1
    354c:	02 c0       	rjmp	.+4      	; 0x3552 <main+0x52e>
    354e:	78 94       	sei
    3550:	13 c0       	rjmp	.+38     	; 0x3578 <main+0x554>
    3552:	a8 e4       	ldi	r26, 0x48	; 72

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	8c 91       	ld	r24, X
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	ee 5d       	subi	r30, 0xDE	; 222
    355c:	ff 4d       	sbci	r31, 0xDF	; 223
    355e:	98 2f       	mov	r25, r24
    3560:	91 7f       	andi	r25, 0xF1	; 241
    3562:	80 81       	ld	r24, Z
	sleep_enable();
    3564:	89 2b       	or	r24, r25
    3566:	8c 93       	st	X, r24
    3568:	8c 91       	ld	r24, X

	cpu_irq_enable();
    356a:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    356c:	8c 93       	st	X, r24

	sleep_disable();
    356e:	78 94       	sei
    3570:	88 95       	sleep
    3572:	8c 91       	ld	r24, X
	sleepmgr_enter_sleep();
	
	return retcode;
}
    3574:	8e 7f       	andi	r24, 0xFE	; 254
    3576:	8c 93       	st	X, r24
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	ce 5b       	subi	r28, 0xBE	; 190
    357e:	df 4f       	sbci	r29, 0xFF	; 255
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	de bf       	out	0x3e, r29	; 62
    3584:	df 91       	pop	r29
    3586:	cf 91       	pop	r28
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16
    358c:	ff 90       	pop	r15
    358e:	ef 90       	pop	r14
    3590:	df 90       	pop	r13
    3592:	cf 90       	pop	r12
    3594:	bf 90       	pop	r11
    3596:	af 90       	pop	r10
    3598:	9f 90       	pop	r9
    359a:	8f 90       	pop	r8
    359c:	7f 90       	pop	r7
    359e:	6f 90       	pop	r6
    35a0:	5f 90       	pop	r5
    35a2:	4f 90       	pop	r4
    35a4:	3f 90       	pop	r3
    35a6:	2f 90       	pop	r2
    35a8:	08 95       	ret

000035aa <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	28 97       	sbiw	r28, 0x08	; 8
    35b4:	cd bf       	out	0x3d, r28	; 61
    35b6:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    35b8:	8f ef       	ldi	r24, 0xFF	; 255
    35ba:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    35be:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    35c2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    35c6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    35ca:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    35ce:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    35d2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    35d6:	61 e0       	ldi	r22, 0x01	; 1
    35d8:	81 e4       	ldi	r24, 0x41	; 65
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	0e 94 68 23 	call	0x46d0	; 0x46d0 <ccp_write_io>
    35e0:	6c e1       	ldi	r22, 0x1C	; 28
    35e2:	70 e0       	ldi	r23, 0x00	; 0
    35e4:	82 e0       	ldi	r24, 0x02	; 2
    35e6:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    35ea:	8a 83       	std	Y+2, r24	; 0x02
    35ec:	6d e1       	ldi	r22, 0x1D	; 29
    35ee:	70 e0       	ldi	r23, 0x00	; 0
    35f0:	82 e0       	ldi	r24, 0x02	; 2
    35f2:	0e 94 5e 23 	call	0x46bc	; 0x46bc <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    35f6:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    35f8:	89 81       	ldd	r24, Y+1	; 0x01
    35fa:	9a 81       	ldd	r25, Y+2	; 0x02
    35fc:	01 96       	adiw	r24, 0x01	; 1
    35fe:	21 f4       	brne	.+8      	; 0x3608 <sysclk_init+0x5e>
		cal = 0x2340;
    3600:	80 e4       	ldi	r24, 0x40	; 64
    3602:	93 e2       	ldi	r25, 0x23	; 35
    3604:	89 83       	std	Y+1, r24	; 0x01
    3606:	9a 83       	std	Y+2, r25	; 0x02
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	9a 81       	ldd	r25, Y+2	; 0x02
    360c:	8b 83       	std	Y+3, r24	; 0x03
    360e:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    3610:	e0 e6       	ldi	r30, 0x60	; 96
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    3616:	8c 81       	ldd	r24, Y+4	; 0x04
    3618:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    361a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    361e:	84 fd       	sbrc	r24, 4
    3620:	21 c0       	rjmp	.+66     	; 0x3664 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3622:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    3626:	83 fd       	sbrc	r24, 3
    3628:	0e c0       	rjmp	.+28     	; 0x3646 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    362a:	e0 e5       	ldi	r30, 0x50	; 80
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3630:	8f b7       	in	r24, 0x3f	; 63
    3632:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    3634:	f8 94       	cli
	return flags;
    3636:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3638:	80 81       	ld	r24, Z
    363a:	88 60       	ori	r24, 0x08	; 8
    363c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    363e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3640:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    3642:	83 ff       	sbrs	r24, 3
    3644:	fd cf       	rjmp	.-6      	; 0x3640 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3646:	8f b7       	in	r24, 0x3f	; 63
    3648:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    364a:	f8 94       	cli
	return flags;
    364c:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    364e:	e0 e5       	ldi	r30, 0x50	; 80
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	83 ec       	ldi	r24, 0xC3	; 195
    3654:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    3656:	80 81       	ld	r24, Z
    3658:	80 61       	ori	r24, 0x10	; 16
    365a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    365c:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    365e:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    3660:	84 ff       	sbrs	r24, 4
    3662:	fd cf       	rjmp	.-6      	; 0x365e <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    3664:	64 e0       	ldi	r22, 0x04	; 4
    3666:	80 e4       	ldi	r24, 0x40	; 64
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	0e 94 68 23 	call	0x46d0	; 0x46d0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    366e:	8f b7       	in	r24, 0x3f	; 63
    3670:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    3672:	f8 94       	cli
	return flags;
    3674:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    3676:	e0 e5       	ldi	r30, 0x50	; 80
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	80 81       	ld	r24, Z
    367c:	8e 7f       	andi	r24, 0xFE	; 254
    367e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3680:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    3682:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3684:	8f b7       	in	r24, 0x3f	; 63
    3686:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    3688:	f8 94       	cli
	return flags;
    368a:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    368c:	80 81       	ld	r24, Z
    368e:	88 60       	ori	r24, 0x08	; 8
    3690:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3692:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3694:	81 81       	ldd	r24, Z+1	; 0x01
    3696:	83 ff       	sbrs	r24, 3
    3698:	fd cf       	rjmp	.-6      	; 0x3694 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    369a:	8b e0       	ldi	r24, 0x0B	; 11
    369c:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    36a0:	28 96       	adiw	r28, 0x08	; 8
    36a2:	cd bf       	out	0x3d, r28	; 61
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	df 91       	pop	r29
    36a8:	cf 91       	pop	r28
    36aa:	08 95       	ret

000036ac <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	1f 92       	push	r1
    36b2:	cd b7       	in	r28, 0x3d	; 61
    36b4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    36b6:	9f b7       	in	r25, 0x3f	; 63
    36b8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    36ba:	f8 94       	cli
	return flags;
    36bc:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    36be:	e8 2f       	mov	r30, r24
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	e0 59       	subi	r30, 0x90	; 144
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	60 95       	com	r22
    36c8:	80 81       	ld	r24, Z
    36ca:	68 23       	and	r22, r24
    36cc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    36ce:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    36d0:	0f 90       	pop	r0
    36d2:	df 91       	pop	r29
    36d4:	cf 91       	pop	r28
    36d6:	08 95       	ret

000036d8 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    36d8:	cf 93       	push	r28
    36da:	df 93       	push	r29
    36dc:	1f 92       	push	r1
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    36e2:	9f b7       	in	r25, 0x3f	; 63
    36e4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    36e6:	f8 94       	cli
	return flags;
    36e8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    36ea:	e8 2f       	mov	r30, r24
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	e0 59       	subi	r30, 0x90	; 144
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	80 81       	ld	r24, Z
    36f4:	68 2b       	or	r22, r24
    36f6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    36f8:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    36fa:	0f 90       	pop	r0
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	08 95       	ret

00003702 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	1f 92       	push	r1
    3708:	1f 92       	push	r1
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    370e:	86 30       	cpi	r24, 0x06	; 6
    3710:	11 f0       	breq	.+4      	; 0x3716 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    3712:	60 e0       	ldi	r22, 0x00	; 0
    3714:	01 c0       	rjmp	.+2      	; 0x3718 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    3716:	68 e1       	ldi	r22, 0x18	; 24
    3718:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    371c:	81 fd       	sbrc	r24, 1
    371e:	2a c0       	rjmp	.+84     	; 0x3774 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3720:	8f b7       	in	r24, 0x3f	; 63
    3722:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3724:	f8 94       	cli
	return flags;
    3726:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3728:	e0 e5       	ldi	r30, 0x50	; 80
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	80 81       	ld	r24, Z
    372e:	82 60       	ori	r24, 0x02	; 2
    3730:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3732:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3734:	81 81       	ldd	r24, Z+1	; 0x01
    3736:	81 ff       	sbrs	r24, 1
    3738:	fd cf       	rjmp	.-6      	; 0x3734 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    373a:	8f b7       	in	r24, 0x3f	; 63
    373c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    373e:	f8 94       	cli
	return flags;
    3740:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    3742:	a0 e5       	ldi	r26, 0x50	; 80
    3744:	b0 e0       	ldi	r27, 0x00	; 0
    3746:	16 96       	adiw	r26, 0x06	; 6
    3748:	8c 91       	ld	r24, X
    374a:	16 97       	sbiw	r26, 0x06	; 6
    374c:	89 7f       	andi	r24, 0xF9	; 249
    374e:	16 96       	adiw	r26, 0x06	; 6
    3750:	8c 93       	st	X, r24
    3752:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    3754:	e0 e6       	ldi	r30, 0x60	; 96
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	80 e8       	ldi	r24, 0x80	; 128
    375a:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    375c:	8b eb       	ldi	r24, 0xBB	; 187
    375e:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    3760:	16 96       	adiw	r26, 0x06	; 6
    3762:	8c 91       	ld	r24, X
    3764:	16 97       	sbiw	r26, 0x06	; 6
    3766:	84 60       	ori	r24, 0x04	; 4
    3768:	16 96       	adiw	r26, 0x06	; 6
    376a:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    376c:	80 81       	ld	r24, Z
    376e:	81 60       	ori	r24, 0x01	; 1
    3770:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3772:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    3774:	63 60       	ori	r22, 0x03	; 3
    3776:	84 e4       	ldi	r24, 0x44	; 68
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	aa d7       	rcall	.+3924   	; 0x46d0 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    377c:	60 e4       	ldi	r22, 0x40	; 64
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	95 df       	rcall	.-214    	; 0x36ac <sysclk_enable_module>
}
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	df 91       	pop	r29
    3788:	cf 91       	pop	r28
    378a:	08 95       	ret

0000378c <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    378c:	80 91 50 24 	lds	r24, 0x2450	; 0x802450 <udi_cdc_nb_comm_enabled>
    3790:	81 50       	subi	r24, 0x01	; 1
    3792:	80 93 50 24 	sts	0x2450, r24	; 0x802450 <udi_cdc_nb_comm_enabled>
    3796:	08 95       	ret

00003798 <udi_cdc_data_setup>:
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	08 95       	ret

0000379c <udi_cdc_getsetting>:
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	08 95       	ret

000037a0 <udi_cdc_line_coding_received>:
    37a0:	6e e5       	ldi	r22, 0x5E	; 94
    37a2:	74 e2       	ldi	r23, 0x24	; 36
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	39 cc       	rjmp	.-1934   	; 0x301a <usb_callback_config>
    37a8:	08 95       	ret

000037aa <udi_cdc_comm_enable>:
    37aa:	10 92 50 24 	sts	0x2450, r1	; 0x802450 <udi_cdc_nb_comm_enabled>
    37ae:	10 92 5c 24 	sts	0x245C, r1	; 0x80245c <udi_cdc_state>
    37b2:	10 92 5d 24 	sts	0x245D, r1	; 0x80245d <udi_cdc_state+0x1>
    37b6:	e2 e5       	ldi	r30, 0x52	; 82
    37b8:	f4 e2       	ldi	r31, 0x24	; 36
    37ba:	81 ea       	ldi	r24, 0xA1	; 161
    37bc:	80 83       	st	Z, r24
    37be:	80 e2       	ldi	r24, 0x20	; 32
    37c0:	81 83       	std	Z+1, r24	; 0x01
    37c2:	12 82       	std	Z+2, r1	; 0x02
    37c4:	13 82       	std	Z+3, r1	; 0x03
    37c6:	14 82       	std	Z+4, r1	; 0x04
    37c8:	15 82       	std	Z+5, r1	; 0x05
    37ca:	82 e0       	ldi	r24, 0x02	; 2
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	86 83       	std	Z+6, r24	; 0x06
    37d0:	97 83       	std	Z+7, r25	; 0x07
    37d2:	10 86       	std	Z+8, r1	; 0x08
    37d4:	11 86       	std	Z+9, r1	; 0x09
    37d6:	ee e5       	ldi	r30, 0x5E	; 94
    37d8:	f4 e2       	ldi	r31, 0x24	; 36
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	92 ec       	ldi	r25, 0xC2	; 194
    37de:	a1 e0       	ldi	r26, 0x01	; 1
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	80 83       	st	Z, r24
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	a2 83       	std	Z+2, r26	; 0x02
    37e8:	b3 83       	std	Z+3, r27	; 0x03
    37ea:	14 82       	std	Z+4, r1	; 0x04
    37ec:	15 82       	std	Z+5, r1	; 0x05
    37ee:	88 e0       	ldi	r24, 0x08	; 8
    37f0:	86 83       	std	Z+6, r24	; 0x06
    37f2:	bf 01       	movw	r22, r30
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	11 dc       	rcall	.-2014   	; 0x301a <usb_callback_config>
    37f8:	09 dc       	rcall	.-2030   	; 0x300c <usb_callback_cdc_enable>
    37fa:	88 23       	and	r24, r24
    37fc:	29 f0       	breq	.+10     	; 0x3808 <udi_cdc_comm_enable+0x5e>
    37fe:	90 91 50 24 	lds	r25, 0x2450	; 0x802450 <udi_cdc_nb_comm_enabled>
    3802:	9f 5f       	subi	r25, 0xFF	; 255
    3804:	90 93 50 24 	sts	0x2450, r25	; 0x802450 <udi_cdc_nb_comm_enabled>
    3808:	08 95       	ret

0000380a <udi_cdc_tx_send>:
    380a:	ff 92       	push	r15
    380c:	0f 93       	push	r16
    380e:	1f 93       	push	r17
    3810:	cf 93       	push	r28
    3812:	df 93       	push	r29
    3814:	1f 92       	push	r1
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <udi_cdc_tx_trans_ongoing>
    381e:	81 11       	cpse	r24, r1
    3820:	9f c0       	rjmp	.+318    	; 0x3960 <udi_cdc_tx_send+0x156>
    3822:	0e 94 84 12 	call	0x2508	; 0x2508 <udd_is_high_speed>
    3826:	88 23       	and	r24, r24
    3828:	51 f0       	breq	.+20     	; 0x383e <udi_cdc_tx_send+0x34>
    382a:	00 91 3e 23 	lds	r16, 0x233E	; 0x80233e <udi_cdc_tx_sof_num>
    382e:	10 91 3f 23 	lds	r17, 0x233F	; 0x80233f <udi_cdc_tx_sof_num+0x1>
    3832:	0e 94 91 12 	call	0x2522	; 0x2522 <udd_get_micro_frame_number>
    3836:	08 17       	cp	r16, r24
    3838:	19 07       	cpc	r17, r25
    383a:	59 f4       	brne	.+22     	; 0x3852 <udi_cdc_tx_send+0x48>
    383c:	91 c0       	rjmp	.+290    	; 0x3960 <udi_cdc_tx_send+0x156>
    383e:	00 91 3e 23 	lds	r16, 0x233E	; 0x80233e <udi_cdc_tx_sof_num>
    3842:	10 91 3f 23 	lds	r17, 0x233F	; 0x80233f <udi_cdc_tx_sof_num+0x1>
    3846:	0e 94 8c 12 	call	0x2518	; 0x2518 <udd_get_frame_number>
    384a:	08 17       	cp	r16, r24
    384c:	19 07       	cpc	r17, r25
    384e:	09 f4       	brne	.+2      	; 0x3852 <udi_cdc_tx_send+0x48>
    3850:	87 c0       	rjmp	.+270    	; 0x3960 <udi_cdc_tx_send+0x156>
    3852:	8f b7       	in	r24, 0x3f	; 63
    3854:	89 83       	std	Y+1, r24	; 0x01
    3856:	f8 94       	cli
    3858:	19 81       	ldd	r17, Y+1	; 0x01
    385a:	00 91 40 23 	lds	r16, 0x2340	; 0x802340 <udi_cdc_tx_buf_sel>
    385e:	e0 2f       	mov	r30, r16
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	ee 0f       	add	r30, r30
    3864:	ff 1f       	adc	r31, r31
    3866:	ef 5b       	subi	r30, 0xBF	; 191
    3868:	fc 4d       	sbci	r31, 0xDC	; 220
    386a:	80 81       	ld	r24, Z
    386c:	91 81       	ldd	r25, Z+1	; 0x01
    386e:	89 2b       	or	r24, r25
    3870:	09 f5       	brne	.+66     	; 0x38b4 <udi_cdc_tx_send+0xaa>
    3872:	80 91 3a 23 	lds	r24, 0x233A	; 0x80233a <sof_zlp_counter.5059>
    3876:	90 91 3b 23 	lds	r25, 0x233B	; 0x80233b <sof_zlp_counter.5059+0x1>
    387a:	01 96       	adiw	r24, 0x01	; 1
    387c:	80 93 3a 23 	sts	0x233A, r24	; 0x80233a <sof_zlp_counter.5059>
    3880:	90 93 3b 23 	sts	0x233B, r25	; 0x80233b <sof_zlp_counter.5059+0x1>
    3884:	0e 94 84 12 	call	0x2508	; 0x2508 <udd_is_high_speed>
    3888:	81 11       	cpse	r24, r1
    388a:	07 c0       	rjmp	.+14     	; 0x389a <udi_cdc_tx_send+0x90>
    388c:	80 91 3a 23 	lds	r24, 0x233A	; 0x80233a <sof_zlp_counter.5059>
    3890:	90 91 3b 23 	lds	r25, 0x233B	; 0x80233b <sof_zlp_counter.5059+0x1>
    3894:	84 36       	cpi	r24, 0x64	; 100
    3896:	91 05       	cpc	r25, r1
    3898:	58 f0       	brcs	.+22     	; 0x38b0 <udi_cdc_tx_send+0xa6>
    389a:	0e 94 84 12 	call	0x2508	; 0x2508 <udd_is_high_speed>
    389e:	88 23       	and	r24, r24
    38a0:	49 f0       	breq	.+18     	; 0x38b4 <udi_cdc_tx_send+0xaa>
    38a2:	80 91 3a 23 	lds	r24, 0x233A	; 0x80233a <sof_zlp_counter.5059>
    38a6:	90 91 3b 23 	lds	r25, 0x233B	; 0x80233b <sof_zlp_counter.5059+0x1>
    38aa:	80 32       	cpi	r24, 0x20	; 32
    38ac:	93 40       	sbci	r25, 0x03	; 3
    38ae:	10 f4       	brcc	.+4      	; 0x38b4 <udi_cdc_tx_send+0xaa>
    38b0:	1f bf       	out	0x3f, r17	; 63
    38b2:	56 c0       	rjmp	.+172    	; 0x3960 <udi_cdc_tx_send+0x156>
    38b4:	10 92 3a 23 	sts	0x233A, r1	; 0x80233a <sof_zlp_counter.5059>
    38b8:	10 92 3b 23 	sts	0x233B, r1	; 0x80233b <sof_zlp_counter.5059+0x1>
    38bc:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <udi_cdc_tx_both_buf_to_send>
    38c0:	81 11       	cpse	r24, r1
    38c2:	06 c0       	rjmp	.+12     	; 0x38d0 <udi_cdc_tx_send+0xc6>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	01 11       	cpse	r16, r1
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	80 93 40 23 	sts	0x2340, r24	; 0x802340 <udi_cdc_tx_buf_sel>
    38ce:	04 c0       	rjmp	.+8      	; 0x38d8 <udi_cdc_tx_send+0xce>
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	01 11       	cpse	r16, r1
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	08 2f       	mov	r16, r24
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	80 93 3d 23 	sts	0x233D, r24	; 0x80233d <udi_cdc_tx_trans_ongoing>
    38de:	1f bf       	out	0x3f, r17	; 63
    38e0:	10 e0       	ldi	r17, 0x00	; 0
    38e2:	f8 01       	movw	r30, r16
    38e4:	ee 0f       	add	r30, r30
    38e6:	ff 1f       	adc	r31, r31
    38e8:	ef 5b       	subi	r30, 0xBF	; 191
    38ea:	fc 4d       	sbci	r31, 0xDC	; 220
    38ec:	80 81       	ld	r24, Z
    38ee:	91 81       	ldd	r25, Z+1	; 0x01
    38f0:	ff 24       	eor	r15, r15
    38f2:	f3 94       	inc	r15
    38f4:	80 34       	cpi	r24, 0x40	; 64
    38f6:	91 05       	cpc	r25, r1
    38f8:	09 f4       	brne	.+2      	; 0x38fc <udi_cdc_tx_send+0xf2>
    38fa:	f1 2c       	mov	r15, r1
    38fc:	80 34       	cpi	r24, 0x40	; 64
    38fe:	91 05       	cpc	r25, r1
    3900:	91 f0       	breq	.+36     	; 0x3926 <udi_cdc_tx_send+0x11c>
    3902:	0e 94 84 12 	call	0x2508	; 0x2508 <udd_is_high_speed>
    3906:	88 23       	and	r24, r24
    3908:	39 f0       	breq	.+14     	; 0x3918 <udi_cdc_tx_send+0x10e>
    390a:	0e 94 91 12 	call	0x2522	; 0x2522 <udd_get_micro_frame_number>
    390e:	80 93 3e 23 	sts	0x233E, r24	; 0x80233e <udi_cdc_tx_sof_num>
    3912:	90 93 3f 23 	sts	0x233F, r25	; 0x80233f <udi_cdc_tx_sof_num+0x1>
    3916:	0b c0       	rjmp	.+22     	; 0x392e <udi_cdc_tx_send+0x124>
    3918:	0e 94 8c 12 	call	0x2518	; 0x2518 <udd_get_frame_number>
    391c:	80 93 3e 23 	sts	0x233E, r24	; 0x80233e <udi_cdc_tx_sof_num>
    3920:	90 93 3f 23 	sts	0x233F, r25	; 0x80233f <udi_cdc_tx_sof_num+0x1>
    3924:	04 c0       	rjmp	.+8      	; 0x392e <udi_cdc_tx_send+0x124>
    3926:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <udi_cdc_tx_sof_num>
    392a:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udi_cdc_tx_sof_num+0x1>
    392e:	f8 01       	movw	r30, r16
    3930:	ee 0f       	add	r30, r30
    3932:	ff 1f       	adc	r31, r31
    3934:	ef 5b       	subi	r30, 0xBF	; 191
    3936:	fc 4d       	sbci	r31, 0xDC	; 220
    3938:	20 81       	ld	r18, Z
    393a:	31 81       	ldd	r19, Z+1	; 0x01
    393c:	a8 01       	movw	r20, r16
    393e:	00 24       	eor	r0, r0
    3940:	56 95       	lsr	r21
    3942:	47 95       	ror	r20
    3944:	07 94       	ror	r0
    3946:	56 95       	lsr	r21
    3948:	47 95       	ror	r20
    394a:	07 94       	ror	r0
    394c:	54 2f       	mov	r21, r20
    394e:	40 2d       	mov	r20, r0
    3950:	4a 5b       	subi	r20, 0xBA	; 186
    3952:	5c 4d       	sbci	r21, 0xDC	; 220
    3954:	0a eb       	ldi	r16, 0xBA	; 186
    3956:	1c e1       	ldi	r17, 0x1C	; 28
    3958:	6f 2d       	mov	r22, r15
    395a:	81 e8       	ldi	r24, 0x81	; 129
    395c:	0e 94 75 13 	call	0x26ea	; 0x26ea <udd_ep_run>
    3960:	0f 90       	pop	r0
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	ff 90       	pop	r15
    396c:	08 95       	ret

0000396e <udi_cdc_data_sof_notify>:
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	4c cf       	rjmp	.-360    	; 0x380a <udi_cdc_tx_send>
    3972:	08 95       	ret

00003974 <udi_cdc_data_sent>:
    3974:	81 11       	cpse	r24, r1
    3976:	19 c0       	rjmp	.+50     	; 0x39aa <udi_cdc_data_sent+0x36>
    3978:	20 91 40 23 	lds	r18, 0x2340	; 0x802340 <udi_cdc_tx_buf_sel>
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	22 23       	and	r18, r18
    3982:	11 f0       	breq	.+4      	; 0x3988 <udi_cdc_data_sent+0x14>
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	fc 01       	movw	r30, r24
    398e:	ef 5b       	subi	r30, 0xBF	; 191
    3990:	fc 4d       	sbci	r31, 0xDC	; 220
    3992:	10 82       	st	Z, r1
    3994:	11 82       	std	Z+1, r1	; 0x01
    3996:	10 92 3c 23 	sts	0x233C, r1	; 0x80233c <udi_cdc_tx_both_buf_to_send>
    399a:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <udi_cdc_tx_trans_ongoing>
    399e:	67 2b       	or	r22, r23
    39a0:	11 f0       	breq	.+4      	; 0x39a6 <udi_cdc_data_sent+0x32>
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	3e db       	rcall	.-2436   	; 0x3022 <usb_callback_tx_empty_notify>
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	30 cf       	rjmp	.-416    	; 0x380a <udi_cdc_tx_send>
    39aa:	08 95       	ret

000039ac <udi_cdc_data_disable>:
    39ac:	80 91 4f 24 	lds	r24, 0x244F	; 0x80244f <udi_cdc_nb_data_enabled>
    39b0:	81 50       	subi	r24, 0x01	; 1
    39b2:	80 93 4f 24 	sts	0x244F, r24	; 0x80244f <udi_cdc_nb_data_enabled>
    39b6:	80 91 4f 24 	lds	r24, 0x244F	; 0x80244f <udi_cdc_nb_data_enabled>
    39ba:	2c db       	rcall	.-2472   	; 0x3014 <usb_callback_cdc_disable>
    39bc:	10 92 4e 24 	sts	0x244E, r1	; 0x80244e <udi_cdc_data_running>
    39c0:	08 95       	ret

000039c2 <udi_cdc_comm_setup>:
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq>
    39ca:	88 23       	and	r24, r24
    39cc:	e4 f4       	brge	.+56     	; 0x3a06 <udi_cdc_comm_setup+0x44>
    39ce:	80 76       	andi	r24, 0x60	; 96
    39d0:	80 32       	cpi	r24, 0x20	; 32
    39d2:	09 f0       	breq	.+2      	; 0x39d6 <udi_cdc_comm_setup+0x14>
    39d4:	47 c0       	rjmp	.+142    	; 0x3a64 <udi_cdc_comm_setup+0xa2>
    39d6:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x1>
    39da:	81 32       	cpi	r24, 0x21	; 33
    39dc:	09 f0       	breq	.+2      	; 0x39e0 <udi_cdc_comm_setup+0x1e>
    39de:	44 c0       	rjmp	.+136    	; 0x3a68 <udi_cdc_comm_setup+0xa6>
    39e0:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    39e4:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    39e8:	07 97       	sbiw	r24, 0x07	; 7
    39ea:	09 f0       	breq	.+2      	; 0x39ee <udi_cdc_comm_setup+0x2c>
    39ec:	3f c0       	rjmp	.+126    	; 0x3a6c <udi_cdc_comm_setup+0xaa>
    39ee:	e9 e7       	ldi	r30, 0x79	; 121
    39f0:	f4 e2       	ldi	r31, 0x24	; 36
    39f2:	8e e5       	ldi	r24, 0x5E	; 94
    39f4:	94 e2       	ldi	r25, 0x24	; 36
    39f6:	80 87       	std	Z+8, r24	; 0x08
    39f8:	91 87       	std	Z+9, r25	; 0x09
    39fa:	87 e0       	ldi	r24, 0x07	; 7
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	82 87       	std	Z+10, r24	; 0x0a
    3a00:	93 87       	std	Z+11, r25	; 0x0b
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	3a c0       	rjmp	.+116    	; 0x3a7a <udi_cdc_comm_setup+0xb8>
    3a06:	80 76       	andi	r24, 0x60	; 96
    3a08:	80 32       	cpi	r24, 0x20	; 32
    3a0a:	91 f5       	brne	.+100    	; 0x3a70 <udi_cdc_comm_setup+0xae>
    3a0c:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x1>
    3a10:	80 32       	cpi	r24, 0x20	; 32
    3a12:	19 f0       	breq	.+6      	; 0x3a1a <udi_cdc_comm_setup+0x58>
    3a14:	82 32       	cpi	r24, 0x22	; 34
    3a16:	b9 f0       	breq	.+46     	; 0x3a46 <udi_cdc_comm_setup+0x84>
    3a18:	2d c0       	rjmp	.+90     	; 0x3a74 <udi_cdc_comm_setup+0xb2>
    3a1a:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    3a1e:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    3a22:	07 97       	sbiw	r24, 0x07	; 7
    3a24:	49 f5       	brne	.+82     	; 0x3a78 <udi_cdc_comm_setup+0xb6>
    3a26:	e9 e7       	ldi	r30, 0x79	; 121
    3a28:	f4 e2       	ldi	r31, 0x24	; 36
    3a2a:	80 ed       	ldi	r24, 0xD0	; 208
    3a2c:	9b e1       	ldi	r25, 0x1B	; 27
    3a2e:	84 87       	std	Z+12, r24	; 0x0c
    3a30:	95 87       	std	Z+13, r25	; 0x0d
    3a32:	8e e5       	ldi	r24, 0x5E	; 94
    3a34:	94 e2       	ldi	r25, 0x24	; 36
    3a36:	80 87       	std	Z+8, r24	; 0x08
    3a38:	91 87       	std	Z+9, r25	; 0x09
    3a3a:	87 e0       	ldi	r24, 0x07	; 7
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	82 87       	std	Z+10, r24	; 0x0a
    3a40:	93 87       	std	Z+11, r25	; 0x0b
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	1a c0       	rjmp	.+52     	; 0x3a7a <udi_cdc_comm_setup+0xb8>
    3a46:	c9 e7       	ldi	r28, 0x79	; 121
    3a48:	d4 e2       	ldi	r29, 0x24	; 36
    3a4a:	6a 81       	ldd	r22, Y+2	; 0x02
    3a4c:	61 70       	andi	r22, 0x01	; 1
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	e5 da       	rcall	.-2614   	; 0x301c <usb_callback_cdc_set_dtr>
    3a52:	6a 81       	ldd	r22, Y+2	; 0x02
    3a54:	7b 81       	ldd	r23, Y+3	; 0x03
    3a56:	76 95       	lsr	r23
    3a58:	67 95       	ror	r22
    3a5a:	61 70       	andi	r22, 0x01	; 1
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	df da       	rcall	.-2626   	; 0x301e <usb_callback_cdc_set_rts>
    3a60:	81 e0       	ldi	r24, 0x01	; 1
    3a62:	0b c0       	rjmp	.+22     	; 0x3a7a <udi_cdc_comm_setup+0xb8>
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	09 c0       	rjmp	.+18     	; 0x3a7a <udi_cdc_comm_setup+0xb8>
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	07 c0       	rjmp	.+14     	; 0x3a7a <udi_cdc_comm_setup+0xb8>
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	05 c0       	rjmp	.+10     	; 0x3a7a <udi_cdc_comm_setup+0xb8>
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	03 c0       	rjmp	.+6      	; 0x3a7a <udi_cdc_comm_setup+0xb8>
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	01 c0       	rjmp	.+2      	; 0x3a7a <udi_cdc_comm_setup+0xb8>
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	df 91       	pop	r29
    3a7c:	cf 91       	pop	r28
    3a7e:	08 95       	ret

00003a80 <udi_cdc_multi_get_nb_received_data>:
    3a80:	cf 93       	push	r28
    3a82:	df 93       	push	r29
    3a84:	1f 92       	push	r1
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
    3a8a:	8f b7       	in	r24, 0x3f	; 63
    3a8c:	89 83       	std	Y+1, r24	; 0x01
    3a8e:	f8 94       	cli
    3a90:	49 81       	ldd	r20, Y+1	; 0x01
    3a92:	20 91 c7 23 	lds	r18, 0x23C7	; 0x8023c7 <udi_cdc_rx_pos>
    3a96:	30 91 c8 23 	lds	r19, 0x23C8	; 0x8023c8 <udi_cdc_rx_pos+0x1>
    3a9a:	e0 91 c9 23 	lds	r30, 0x23C9	; 0x8023c9 <udi_cdc_rx_buf_sel>
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	ee 0f       	add	r30, r30
    3aa2:	ff 1f       	adc	r31, r31
    3aa4:	e6 53       	subi	r30, 0x36	; 54
    3aa6:	fc 4d       	sbci	r31, 0xDC	; 220
    3aa8:	80 81       	ld	r24, Z
    3aaa:	91 81       	ldd	r25, Z+1	; 0x01
    3aac:	4f bf       	out	0x3f, r20	; 63
    3aae:	82 1b       	sub	r24, r18
    3ab0:	93 0b       	sbc	r25, r19
    3ab2:	0f 90       	pop	r0
    3ab4:	df 91       	pop	r29
    3ab6:	cf 91       	pop	r28
    3ab8:	08 95       	ret

00003aba <udi_cdc_multi_is_rx_ready>:
    3aba:	e2 df       	rcall	.-60     	; 0x3a80 <udi_cdc_multi_get_nb_received_data>
    3abc:	21 e0       	ldi	r18, 0x01	; 1
    3abe:	89 2b       	or	r24, r25
    3ac0:	09 f4       	brne	.+2      	; 0x3ac4 <udi_cdc_multi_is_rx_ready+0xa>
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	82 2f       	mov	r24, r18
    3ac6:	08 95       	ret

00003ac8 <udi_cdc_rx_start>:
    3ac8:	0f 93       	push	r16
    3aca:	1f 93       	push	r17
    3acc:	cf 93       	push	r28
    3ace:	df 93       	push	r29
    3ad0:	1f 92       	push	r1
    3ad2:	cd b7       	in	r28, 0x3d	; 61
    3ad4:	de b7       	in	r29, 0x3e	; 62
    3ad6:	8f b7       	in	r24, 0x3f	; 63
    3ad8:	89 83       	std	Y+1, r24	; 0x01
    3ada:	f8 94       	cli
    3adc:	99 81       	ldd	r25, Y+1	; 0x01
    3ade:	20 91 c9 23 	lds	r18, 0x23C9	; 0x8023c9 <udi_cdc_rx_buf_sel>
    3ae2:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udi_cdc_rx_trans_ongoing>
    3ae6:	81 11       	cpse	r24, r1
    3ae8:	10 c0       	rjmp	.+32     	; 0x3b0a <udi_cdc_rx_start+0x42>
    3aea:	60 91 c7 23 	lds	r22, 0x23C7	; 0x8023c7 <udi_cdc_rx_pos>
    3aee:	70 91 c8 23 	lds	r23, 0x23C8	; 0x8023c8 <udi_cdc_rx_pos+0x1>
    3af2:	02 2f       	mov	r16, r18
    3af4:	10 e0       	ldi	r17, 0x00	; 0
    3af6:	f8 01       	movw	r30, r16
    3af8:	ee 0f       	add	r30, r30
    3afa:	ff 1f       	adc	r31, r31
    3afc:	e6 53       	subi	r30, 0x36	; 54
    3afe:	fc 4d       	sbci	r31, 0xDC	; 220
    3b00:	40 81       	ld	r20, Z
    3b02:	51 81       	ldd	r21, Z+1	; 0x01
    3b04:	64 17       	cp	r22, r20
    3b06:	75 07       	cpc	r23, r21
    3b08:	18 f4       	brcc	.+6      	; 0x3b10 <udi_cdc_rx_start+0x48>
    3b0a:	9f bf       	out	0x3f, r25	; 63
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	27 c0       	rjmp	.+78     	; 0x3b5e <udi_cdc_rx_start+0x96>
    3b10:	10 92 c7 23 	sts	0x23C7, r1	; 0x8023c7 <udi_cdc_rx_pos>
    3b14:	10 92 c8 23 	sts	0x23C8, r1	; 0x8023c8 <udi_cdc_rx_pos+0x1>
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	21 11       	cpse	r18, r1
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	80 93 c9 23 	sts	0x23C9, r24	; 0x8023c9 <udi_cdc_rx_buf_sel>
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	80 93 c6 23 	sts	0x23C6, r24	; 0x8023c6 <udi_cdc_rx_trans_ongoing>
    3b28:	9f bf       	out	0x3f, r25	; 63
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	c6 df       	rcall	.-116    	; 0x3aba <udi_cdc_multi_is_rx_ready>
    3b2e:	88 23       	and	r24, r24
    3b30:	11 f0       	breq	.+4      	; 0x3b36 <udi_cdc_rx_start+0x6e>
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	75 da       	rcall	.-2838   	; 0x3020 <usb_callback_rx_notify>
    3b36:	a8 01       	movw	r20, r16
    3b38:	00 24       	eor	r0, r0
    3b3a:	56 95       	lsr	r21
    3b3c:	47 95       	ror	r20
    3b3e:	07 94       	ror	r0
    3b40:	56 95       	lsr	r21
    3b42:	47 95       	ror	r20
    3b44:	07 94       	ror	r0
    3b46:	54 2f       	mov	r21, r20
    3b48:	40 2d       	mov	r20, r0
    3b4a:	42 53       	subi	r20, 0x32	; 50
    3b4c:	5c 4d       	sbci	r21, 0xDC	; 220
    3b4e:	07 ee       	ldi	r16, 0xE7	; 231
    3b50:	1d e1       	ldi	r17, 0x1D	; 29
    3b52:	20 e4       	ldi	r18, 0x40	; 64
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	61 e0       	ldi	r22, 0x01	; 1
    3b58:	82 e0       	ldi	r24, 0x02	; 2
    3b5a:	0e 94 75 13 	call	0x26ea	; 0x26ea <udd_ep_run>
    3b5e:	0f 90       	pop	r0
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	1f 91       	pop	r17
    3b66:	0f 91       	pop	r16
    3b68:	08 95       	ret

00003b6a <udi_cdc_data_enable>:
    3b6a:	10 92 4f 24 	sts	0x244F, r1	; 0x80244f <udi_cdc_nb_data_enabled>
    3b6e:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <udi_cdc_tx_trans_ongoing>
    3b72:	10 92 3c 23 	sts	0x233C, r1	; 0x80233c <udi_cdc_tx_both_buf_to_send>
    3b76:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udi_cdc_tx_buf_sel>
    3b7a:	e1 e4       	ldi	r30, 0x41	; 65
    3b7c:	f3 e2       	ldi	r31, 0x23	; 35
    3b7e:	10 82       	st	Z, r1
    3b80:	11 82       	std	Z+1, r1	; 0x01
    3b82:	12 82       	std	Z+2, r1	; 0x02
    3b84:	13 82       	std	Z+3, r1	; 0x03
    3b86:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <udi_cdc_tx_sof_num>
    3b8a:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udi_cdc_tx_sof_num+0x1>
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	3c de       	rcall	.-904    	; 0x380a <udi_cdc_tx_send>
    3b92:	10 92 c6 23 	sts	0x23C6, r1	; 0x8023c6 <udi_cdc_rx_trans_ongoing>
    3b96:	10 92 c9 23 	sts	0x23C9, r1	; 0x8023c9 <udi_cdc_rx_buf_sel>
    3b9a:	ea ec       	ldi	r30, 0xCA	; 202
    3b9c:	f3 e2       	ldi	r31, 0x23	; 35
    3b9e:	10 82       	st	Z, r1
    3ba0:	11 82       	std	Z+1, r1	; 0x01
    3ba2:	12 82       	std	Z+2, r1	; 0x02
    3ba4:	13 82       	std	Z+3, r1	; 0x03
    3ba6:	10 92 c7 23 	sts	0x23C7, r1	; 0x8023c7 <udi_cdc_rx_pos>
    3baa:	10 92 c8 23 	sts	0x23C8, r1	; 0x8023c8 <udi_cdc_rx_pos+0x1>
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	8b df       	rcall	.-234    	; 0x3ac8 <udi_cdc_rx_start>
    3bb2:	88 23       	and	r24, r24
    3bb4:	59 f0       	breq	.+22     	; 0x3bcc <udi_cdc_data_enable+0x62>
    3bb6:	90 91 4f 24 	lds	r25, 0x244F	; 0x80244f <udi_cdc_nb_data_enabled>
    3bba:	9f 5f       	subi	r25, 0xFF	; 255
    3bbc:	90 93 4f 24 	sts	0x244F, r25	; 0x80244f <udi_cdc_nb_data_enabled>
    3bc0:	90 91 4f 24 	lds	r25, 0x244F	; 0x80244f <udi_cdc_nb_data_enabled>
    3bc4:	91 30       	cpi	r25, 0x01	; 1
    3bc6:	11 f4       	brne	.+4      	; 0x3bcc <udi_cdc_data_enable+0x62>
    3bc8:	90 93 4e 24 	sts	0x244E, r25	; 0x80244e <udi_cdc_data_running>
    3bcc:	08 95       	ret

00003bce <udi_cdc_data_received>:
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
    3bd2:	81 11       	cpse	r24, r1
    3bd4:	29 c0       	rjmp	.+82     	; 0x3c28 <udi_cdc_data_received+0x5a>
    3bd6:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udi_cdc_rx_buf_sel>
    3bda:	e1 e0       	ldi	r30, 0x01	; 1
    3bdc:	81 11       	cpse	r24, r1
    3bde:	e0 e0       	ldi	r30, 0x00	; 0
    3be0:	84 2f       	mov	r24, r20
    3be2:	61 15       	cp	r22, r1
    3be4:	71 05       	cpc	r23, r1
    3be6:	a9 f4       	brne	.+42     	; 0x3c12 <udi_cdc_data_received+0x44>
    3be8:	4e 2f       	mov	r20, r30
    3bea:	50 e0       	ldi	r21, 0x00	; 0
    3bec:	00 24       	eor	r0, r0
    3bee:	56 95       	lsr	r21
    3bf0:	47 95       	ror	r20
    3bf2:	07 94       	ror	r0
    3bf4:	56 95       	lsr	r21
    3bf6:	47 95       	ror	r20
    3bf8:	07 94       	ror	r0
    3bfa:	54 2f       	mov	r21, r20
    3bfc:	40 2d       	mov	r20, r0
    3bfe:	42 53       	subi	r20, 0x32	; 50
    3c00:	5c 4d       	sbci	r21, 0xDC	; 220
    3c02:	07 ee       	ldi	r16, 0xE7	; 231
    3c04:	1d e1       	ldi	r17, 0x1D	; 29
    3c06:	20 e4       	ldi	r18, 0x40	; 64
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	61 e0       	ldi	r22, 0x01	; 1
    3c0c:	0e 94 75 13 	call	0x26ea	; 0x26ea <udd_ep_run>
    3c10:	0b c0       	rjmp	.+22     	; 0x3c28 <udi_cdc_data_received+0x5a>
    3c12:	f0 e0       	ldi	r31, 0x00	; 0
    3c14:	ee 0f       	add	r30, r30
    3c16:	ff 1f       	adc	r31, r31
    3c18:	e6 53       	subi	r30, 0x36	; 54
    3c1a:	fc 4d       	sbci	r31, 0xDC	; 220
    3c1c:	60 83       	st	Z, r22
    3c1e:	71 83       	std	Z+1, r23	; 0x01
    3c20:	10 92 c6 23 	sts	0x23C6, r1	; 0x8023c6 <udi_cdc_rx_trans_ongoing>
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	50 df       	rcall	.-352    	; 0x3ac8 <udi_cdc_rx_start>
    3c28:	1f 91       	pop	r17
    3c2a:	0f 91       	pop	r16
    3c2c:	08 95       	ret

00003c2e <udi_cdc_multi_getc>:
    3c2e:	ef 92       	push	r14
    3c30:	ff 92       	push	r15
    3c32:	1f 93       	push	r17
    3c34:	cf 93       	push	r28
    3c36:	df 93       	push	r29
    3c38:	1f 92       	push	r1
    3c3a:	cd b7       	in	r28, 0x3d	; 61
    3c3c:	de b7       	in	r29, 0x3e	; 62
    3c3e:	11 e0       	ldi	r17, 0x01	; 1
    3c40:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udi_cdc_line_coding+0x6>
    3c44:	89 30       	cpi	r24, 0x09	; 9
    3c46:	09 f0       	breq	.+2      	; 0x3c4a <udi_cdc_multi_getc+0x1c>
    3c48:	10 e0       	ldi	r17, 0x00	; 0
    3c4a:	40 e0       	ldi	r20, 0x00	; 0
    3c4c:	50 e0       	ldi	r21, 0x00	; 0
    3c4e:	8f b7       	in	r24, 0x3f	; 63
    3c50:	89 83       	std	Y+1, r24	; 0x01
    3c52:	f8 94       	cli
    3c54:	a9 81       	ldd	r26, Y+1	; 0x01
    3c56:	20 91 c7 23 	lds	r18, 0x23C7	; 0x8023c7 <udi_cdc_rx_pos>
    3c5a:	30 91 c8 23 	lds	r19, 0x23C8	; 0x8023c8 <udi_cdc_rx_pos+0x1>
    3c5e:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udi_cdc_rx_buf_sel>
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	fc 01       	movw	r30, r24
    3c66:	ee 0f       	add	r30, r30
    3c68:	ff 1f       	adc	r31, r31
    3c6a:	e6 53       	subi	r30, 0x36	; 54
    3c6c:	fc 4d       	sbci	r31, 0xDC	; 220
    3c6e:	60 81       	ld	r22, Z
    3c70:	71 81       	ldd	r23, Z+1	; 0x01
    3c72:	af bf       	out	0x3f, r26	; 63
    3c74:	26 17       	cp	r18, r22
    3c76:	37 07       	cpc	r19, r23
    3c78:	30 f0       	brcs	.+12     	; 0x3c86 <udi_cdc_multi_getc+0x58>
    3c7a:	80 91 4e 24 	lds	r24, 0x244E	; 0x80244e <udi_cdc_data_running>
    3c7e:	81 11       	cpse	r24, r1
    3c80:	e6 cf       	rjmp	.-52     	; 0x3c4e <udi_cdc_multi_getc+0x20>
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	21 c0       	rjmp	.+66     	; 0x3cc8 <udi_cdc_multi_getc+0x9a>
    3c86:	fc 01       	movw	r30, r24
    3c88:	00 24       	eor	r0, r0
    3c8a:	f6 95       	lsr	r31
    3c8c:	e7 95       	ror	r30
    3c8e:	07 94       	ror	r0
    3c90:	f6 95       	lsr	r31
    3c92:	e7 95       	ror	r30
    3c94:	07 94       	ror	r0
    3c96:	fe 2f       	mov	r31, r30
    3c98:	e0 2d       	mov	r30, r0
    3c9a:	e2 53       	subi	r30, 0x32	; 50
    3c9c:	fc 4d       	sbci	r31, 0xDC	; 220
    3c9e:	e2 0f       	add	r30, r18
    3ca0:	f3 1f       	adc	r31, r19
    3ca2:	80 81       	ld	r24, Z
    3ca4:	7a 01       	movw	r14, r20
    3ca6:	e8 2a       	or	r14, r24
    3ca8:	2f 5f       	subi	r18, 0xFF	; 255
    3caa:	3f 4f       	sbci	r19, 0xFF	; 255
    3cac:	20 93 c7 23 	sts	0x23C7, r18	; 0x8023c7 <udi_cdc_rx_pos>
    3cb0:	30 93 c8 23 	sts	0x23C8, r19	; 0x8023c8 <udi_cdc_rx_pos+0x1>
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	08 df       	rcall	.-496    	; 0x3ac8 <udi_cdc_rx_start>
    3cb8:	11 23       	and	r17, r17
    3cba:	21 f0       	breq	.+8      	; 0x3cc4 <udi_cdc_multi_getc+0x96>
    3cbc:	5e 2d       	mov	r21, r14
    3cbe:	44 27       	eor	r20, r20
    3cc0:	10 e0       	ldi	r17, 0x00	; 0
    3cc2:	c5 cf       	rjmp	.-118    	; 0x3c4e <udi_cdc_multi_getc+0x20>
    3cc4:	8e 2d       	mov	r24, r14
    3cc6:	9f 2d       	mov	r25, r15
    3cc8:	0f 90       	pop	r0
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	1f 91       	pop	r17
    3cd0:	ff 90       	pop	r15
    3cd2:	ef 90       	pop	r14
    3cd4:	08 95       	ret

00003cd6 <udi_cdc_getc>:
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
    3cd8:	aa cf       	rjmp	.-172    	; 0x3c2e <udi_cdc_multi_getc>
    3cda:	08 95       	ret

00003cdc <udi_cdc_multi_get_free_tx_buffer>:
    3cdc:	cf 93       	push	r28
    3cde:	df 93       	push	r29
    3ce0:	1f 92       	push	r1
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
    3ce6:	8f b7       	in	r24, 0x3f	; 63
    3ce8:	89 83       	std	Y+1, r24	; 0x01
    3cea:	f8 94       	cli
    3cec:	99 81       	ldd	r25, Y+1	; 0x01
    3cee:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <udi_cdc_tx_buf_sel>
    3cf2:	e8 2f       	mov	r30, r24
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	ee 0f       	add	r30, r30
    3cf8:	ff 1f       	adc	r31, r31
    3cfa:	ef 5b       	subi	r30, 0xBF	; 191
    3cfc:	fc 4d       	sbci	r31, 0xDC	; 220
    3cfe:	20 81       	ld	r18, Z
    3d00:	31 81       	ldd	r19, Z+1	; 0x01
    3d02:	20 34       	cpi	r18, 0x40	; 64
    3d04:	31 05       	cpc	r19, r1
    3d06:	89 f4       	brne	.+34     	; 0x3d2a <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3d08:	40 91 3d 23 	lds	r20, 0x233D	; 0x80233d <udi_cdc_tx_trans_ongoing>
    3d0c:	41 11       	cpse	r20, r1
    3d0e:	0d c0       	rjmp	.+26     	; 0x3d2a <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3d10:	40 91 3c 23 	lds	r20, 0x233C	; 0x80233c <udi_cdc_tx_both_buf_to_send>
    3d14:	41 11       	cpse	r20, r1
    3d16:	09 c0       	rjmp	.+18     	; 0x3d2a <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3d18:	21 e0       	ldi	r18, 0x01	; 1
    3d1a:	20 93 3c 23 	sts	0x233C, r18	; 0x80233c <udi_cdc_tx_both_buf_to_send>
    3d1e:	81 11       	cpse	r24, r1
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	20 93 40 23 	sts	0x2340, r18	; 0x802340 <udi_cdc_tx_buf_sel>
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	9f bf       	out	0x3f, r25	; 63
    3d2c:	80 e4       	ldi	r24, 0x40	; 64
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	82 1b       	sub	r24, r18
    3d32:	93 0b       	sbc	r25, r19
    3d34:	0f 90       	pop	r0
    3d36:	df 91       	pop	r29
    3d38:	cf 91       	pop	r28
    3d3a:	08 95       	ret

00003d3c <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    3d3c:	cf df       	rcall	.-98     	; 0x3cdc <udi_cdc_multi_get_free_tx_buffer>
    3d3e:	21 e0       	ldi	r18, 0x01	; 1
    3d40:	89 2b       	or	r24, r25
    3d42:	09 f4       	brne	.+2      	; 0x3d46 <udi_cdc_multi_is_tx_ready+0xa>
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	82 2f       	mov	r24, r18
    3d48:	08 95       	ret

00003d4a <udi_cdc_multi_putc>:
    3d4a:	ff 92       	push	r15
    3d4c:	0f 93       	push	r16
    3d4e:	1f 93       	push	r17
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
    3d54:	1f 92       	push	r1
    3d56:	cd b7       	in	r28, 0x3d	; 61
    3d58:	de b7       	in	r29, 0x3e	; 62
    3d5a:	f6 2e       	mov	r15, r22
    3d5c:	17 2f       	mov	r17, r23
    3d5e:	01 e0       	ldi	r16, 0x01	; 1
    3d60:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udi_cdc_line_coding+0x6>
    3d64:	89 30       	cpi	r24, 0x09	; 9
    3d66:	09 f0       	breq	.+2      	; 0x3d6a <udi_cdc_multi_putc+0x20>
    3d68:	00 e0       	ldi	r16, 0x00	; 0
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	e7 df       	rcall	.-50     	; 0x3d3c <udi_cdc_multi_is_tx_ready>
    3d6e:	81 11       	cpse	r24, r1
    3d70:	07 c0       	rjmp	.+14     	; 0x3d80 <udi_cdc_multi_putc+0x36>
    3d72:	80 91 4e 24 	lds	r24, 0x244E	; 0x80244e <udi_cdc_data_running>
    3d76:	81 11       	cpse	r24, r1
    3d78:	f8 cf       	rjmp	.-16     	; 0x3d6a <udi_cdc_multi_putc+0x20>
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	2c c0       	rjmp	.+88     	; 0x3dd8 <udi_cdc_multi_putc+0x8e>
    3d80:	8f b7       	in	r24, 0x3f	; 63
    3d82:	89 83       	std	Y+1, r24	; 0x01
    3d84:	f8 94       	cli
    3d86:	49 81       	ldd	r20, Y+1	; 0x01
    3d88:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <udi_cdc_tx_buf_sel>
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	fc 01       	movw	r30, r24
    3d90:	ee 0f       	add	r30, r30
    3d92:	ff 1f       	adc	r31, r31
    3d94:	ef 5b       	subi	r30, 0xBF	; 191
    3d96:	fc 4d       	sbci	r31, 0xDC	; 220
    3d98:	20 81       	ld	r18, Z
    3d9a:	31 81       	ldd	r19, Z+1	; 0x01
    3d9c:	b9 01       	movw	r22, r18
    3d9e:	6f 5f       	subi	r22, 0xFF	; 255
    3da0:	7f 4f       	sbci	r23, 0xFF	; 255
    3da2:	60 83       	st	Z, r22
    3da4:	71 83       	std	Z+1, r23	; 0x01
    3da6:	00 24       	eor	r0, r0
    3da8:	96 95       	lsr	r25
    3daa:	87 95       	ror	r24
    3dac:	07 94       	ror	r0
    3dae:	96 95       	lsr	r25
    3db0:	87 95       	ror	r24
    3db2:	07 94       	ror	r0
    3db4:	98 2f       	mov	r25, r24
    3db6:	80 2d       	mov	r24, r0
    3db8:	8a 5b       	subi	r24, 0xBA	; 186
    3dba:	9c 4d       	sbci	r25, 0xDC	; 220
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	e2 0f       	add	r30, r18
    3dc0:	f3 1f       	adc	r31, r19
    3dc2:	f0 82       	st	Z, r15
    3dc4:	4f bf       	out	0x3f, r20	; 63
    3dc6:	00 23       	and	r16, r16
    3dc8:	29 f0       	breq	.+10     	; 0x3dd4 <udi_cdc_multi_putc+0x8a>
    3dca:	f1 2e       	mov	r15, r17
    3dcc:	11 0f       	add	r17, r17
    3dce:	11 0b       	sbc	r17, r17
    3dd0:	00 e0       	ldi	r16, 0x00	; 0
    3dd2:	cb cf       	rjmp	.-106    	; 0x3d6a <udi_cdc_multi_putc+0x20>
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	0f 90       	pop	r0
    3dda:	df 91       	pop	r29
    3ddc:	cf 91       	pop	r28
    3dde:	1f 91       	pop	r17
    3de0:	0f 91       	pop	r16
    3de2:	ff 90       	pop	r15
    3de4:	08 95       	ret

00003de6 <udi_cdc_putc>:
    3de6:	bc 01       	movw	r22, r24
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	af cf       	rjmp	.-162    	; 0x3d4a <udi_cdc_multi_putc>
    3dec:	08 95       	ret

00003dee <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    3dee:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <udc_ptr_conf>
    3df2:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    3df6:	01 90       	ld	r0, Z+
    3df8:	f0 81       	ld	r31, Z
    3dfa:	e0 2d       	mov	r30, r0
    3dfc:	22 81       	ldd	r18, Z+2	; 0x02
    3dfe:	33 81       	ldd	r19, Z+3	; 0x03
    3e00:	2e 0f       	add	r18, r30
    3e02:	3f 1f       	adc	r19, r31
    3e04:	fc 01       	movw	r30, r24
    3e06:	40 81       	ld	r20, Z
    3e08:	e4 0f       	add	r30, r20
    3e0a:	f1 1d       	adc	r31, r1
    3e0c:	e2 17       	cp	r30, r18
    3e0e:	f3 07       	cpc	r31, r19
    3e10:	a0 f4       	brcc	.+40     	; 0x3e3a <udc_next_desc_in_iface+0x4c>
    3e12:	81 81       	ldd	r24, Z+1	; 0x01
    3e14:	84 30       	cpi	r24, 0x04	; 4
    3e16:	a1 f0       	breq	.+40     	; 0x3e40 <udc_next_desc_in_iface+0x52>
    3e18:	86 13       	cpse	r24, r22
    3e1a:	06 c0       	rjmp	.+12     	; 0x3e28 <udc_next_desc_in_iface+0x3a>
    3e1c:	14 c0       	rjmp	.+40     	; 0x3e46 <udc_next_desc_in_iface+0x58>
    3e1e:	81 81       	ldd	r24, Z+1	; 0x01
    3e20:	84 30       	cpi	r24, 0x04	; 4
    3e22:	a1 f0       	breq	.+40     	; 0x3e4c <udc_next_desc_in_iface+0x5e>
    3e24:	86 17       	cp	r24, r22
    3e26:	a9 f0       	breq	.+42     	; 0x3e52 <udc_next_desc_in_iface+0x64>
    3e28:	80 81       	ld	r24, Z
    3e2a:	e8 0f       	add	r30, r24
    3e2c:	f1 1d       	adc	r31, r1
    3e2e:	e2 17       	cp	r30, r18
    3e30:	f3 07       	cpc	r31, r19
    3e32:	a8 f3       	brcs	.-22     	; 0x3e1e <udc_next_desc_in_iface+0x30>
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	08 95       	ret
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	08 95       	ret
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	08 95       	ret
    3e46:	8e 2f       	mov	r24, r30
    3e48:	9f 2f       	mov	r25, r31
    3e4a:	08 95       	ret
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	08 95       	ret
    3e52:	8e 2f       	mov	r24, r30
    3e54:	9f 2f       	mov	r25, r31
    3e56:	08 95       	ret

00003e58 <udc_valid_address>:
    3e58:	80 91 7b 24 	lds	r24, 0x247B	; 0x80247b <udd_g_ctrlreq+0x2>
    3e5c:	8f 77       	andi	r24, 0x7F	; 127
    3e5e:	0c 94 86 12 	jmp	0x250c	; 0x250c <udd_set_address>
    3e62:	08 95       	ret

00003e64 <udc_update_iface_desc>:
    3e64:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <udc_num_configuration>
    3e68:	99 23       	and	r25, r25
    3e6a:	81 f1       	breq	.+96     	; 0x3ecc <udc_update_iface_desc+0x68>
    3e6c:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <udc_ptr_conf>
    3e70:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    3e74:	01 90       	ld	r0, Z+
    3e76:	f0 81       	ld	r31, Z
    3e78:	e0 2d       	mov	r30, r0
    3e7a:	94 81       	ldd	r25, Z+4	; 0x04
    3e7c:	89 17       	cp	r24, r25
    3e7e:	40 f5       	brcc	.+80     	; 0x3ed0 <udc_update_iface_desc+0x6c>
    3e80:	e0 93 68 24 	sts	0x2468, r30	; 0x802468 <udc_ptr_iface>
    3e84:	f0 93 69 24 	sts	0x2469, r31	; 0x802469 <udc_ptr_iface+0x1>
    3e88:	22 81       	ldd	r18, Z+2	; 0x02
    3e8a:	33 81       	ldd	r19, Z+3	; 0x03
    3e8c:	2e 0f       	add	r18, r30
    3e8e:	3f 1f       	adc	r19, r31
    3e90:	e2 17       	cp	r30, r18
    3e92:	f3 07       	cpc	r31, r19
    3e94:	f8 f4       	brcc	.+62     	; 0x3ed4 <udc_update_iface_desc+0x70>
    3e96:	91 81       	ldd	r25, Z+1	; 0x01
    3e98:	94 30       	cpi	r25, 0x04	; 4
    3e9a:	61 f4       	brne	.+24     	; 0x3eb4 <udc_update_iface_desc+0x50>
    3e9c:	92 81       	ldd	r25, Z+2	; 0x02
    3e9e:	89 13       	cpse	r24, r25
    3ea0:	09 c0       	rjmp	.+18     	; 0x3eb4 <udc_update_iface_desc+0x50>
    3ea2:	93 81       	ldd	r25, Z+3	; 0x03
    3ea4:	96 13       	cpse	r25, r22
    3ea6:	06 c0       	rjmp	.+12     	; 0x3eb4 <udc_update_iface_desc+0x50>
    3ea8:	e0 93 68 24 	sts	0x2468, r30	; 0x802468 <udc_ptr_iface>
    3eac:	f0 93 69 24 	sts	0x2469, r31	; 0x802469 <udc_ptr_iface+0x1>
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	08 95       	ret
    3eb4:	90 81       	ld	r25, Z
    3eb6:	e9 0f       	add	r30, r25
    3eb8:	f1 1d       	adc	r31, r1
    3eba:	e2 17       	cp	r30, r18
    3ebc:	f3 07       	cpc	r31, r19
    3ebe:	58 f3       	brcs	.-42     	; 0x3e96 <udc_update_iface_desc+0x32>
    3ec0:	e0 93 68 24 	sts	0x2468, r30	; 0x802468 <udc_ptr_iface>
    3ec4:	f0 93 69 24 	sts	0x2469, r31	; 0x802469 <udc_ptr_iface+0x1>
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	08 95       	ret
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	08 95       	ret
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	08 95       	ret
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	08 95       	ret

00003ed8 <udc_iface_disable>:
    3ed8:	ef 92       	push	r14
    3eda:	ff 92       	push	r15
    3edc:	1f 93       	push	r17
    3ede:	cf 93       	push	r28
    3ee0:	df 93       	push	r29
    3ee2:	c8 2f       	mov	r28, r24
    3ee4:	60 e0       	ldi	r22, 0x00	; 0
    3ee6:	be df       	rcall	.-132    	; 0x3e64 <udc_update_iface_desc>
    3ee8:	18 2f       	mov	r17, r24
    3eea:	88 23       	and	r24, r24
    3eec:	81 f1       	breq	.+96     	; 0x3f4e <udc_iface_disable+0x76>
    3eee:	a0 91 6a 24 	lds	r26, 0x246A	; 0x80246a <udc_ptr_conf>
    3ef2:	b0 91 6b 24 	lds	r27, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    3ef6:	ec 2f       	mov	r30, r28
    3ef8:	f0 e0       	ldi	r31, 0x00	; 0
    3efa:	ee 0f       	add	r30, r30
    3efc:	ff 1f       	adc	r31, r31
    3efe:	12 96       	adiw	r26, 0x02	; 2
    3f00:	8d 91       	ld	r24, X+
    3f02:	9c 91       	ld	r25, X
    3f04:	13 97       	sbiw	r26, 0x03	; 3
    3f06:	e8 0f       	add	r30, r24
    3f08:	f9 1f       	adc	r31, r25
    3f0a:	e0 80       	ld	r14, Z
    3f0c:	f1 80       	ldd	r15, Z+1	; 0x01
    3f0e:	d7 01       	movw	r26, r14
    3f10:	16 96       	adiw	r26, 0x06	; 6
    3f12:	ed 91       	ld	r30, X+
    3f14:	fc 91       	ld	r31, X
    3f16:	17 97       	sbiw	r26, 0x07	; 7
    3f18:	19 95       	eicall
    3f1a:	68 2f       	mov	r22, r24
    3f1c:	8c 2f       	mov	r24, r28
    3f1e:	a2 df       	rcall	.-188    	; 0x3e64 <udc_update_iface_desc>
    3f20:	18 2f       	mov	r17, r24
    3f22:	88 23       	and	r24, r24
    3f24:	a1 f0       	breq	.+40     	; 0x3f4e <udc_iface_disable+0x76>
    3f26:	c0 91 68 24 	lds	r28, 0x2468	; 0x802468 <udc_ptr_iface>
    3f2a:	d0 91 69 24 	lds	r29, 0x2469	; 0x802469 <udc_ptr_iface+0x1>
    3f2e:	65 e0       	ldi	r22, 0x05	; 5
    3f30:	ce 01       	movw	r24, r28
    3f32:	5d df       	rcall	.-326    	; 0x3dee <udc_next_desc_in_iface>
    3f34:	ec 01       	movw	r28, r24
    3f36:	89 2b       	or	r24, r25
    3f38:	21 f0       	breq	.+8      	; 0x3f42 <udc_iface_disable+0x6a>
    3f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3c:	0e 94 8f 14 	call	0x291e	; 0x291e <udd_ep_free>
    3f40:	f6 cf       	rjmp	.-20     	; 0x3f2e <udc_iface_disable+0x56>
    3f42:	d7 01       	movw	r26, r14
    3f44:	12 96       	adiw	r26, 0x02	; 2
    3f46:	ed 91       	ld	r30, X+
    3f48:	fc 91       	ld	r31, X
    3f4a:	13 97       	sbiw	r26, 0x03	; 3
    3f4c:	19 95       	eicall
    3f4e:	81 2f       	mov	r24, r17
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	1f 91       	pop	r17
    3f56:	ff 90       	pop	r15
    3f58:	ef 90       	pop	r14
    3f5a:	08 95       	ret

00003f5c <udc_iface_enable>:
    3f5c:	1f 93       	push	r17
    3f5e:	cf 93       	push	r28
    3f60:	df 93       	push	r29
    3f62:	18 2f       	mov	r17, r24
    3f64:	7f df       	rcall	.-258    	; 0x3e64 <udc_update_iface_desc>
    3f66:	88 23       	and	r24, r24
    3f68:	41 f1       	breq	.+80     	; 0x3fba <udc_iface_enable+0x5e>
    3f6a:	c0 91 68 24 	lds	r28, 0x2468	; 0x802468 <udc_ptr_iface>
    3f6e:	d0 91 69 24 	lds	r29, 0x2469	; 0x802469 <udc_ptr_iface+0x1>
    3f72:	65 e0       	ldi	r22, 0x05	; 5
    3f74:	ce 01       	movw	r24, r28
    3f76:	3b df       	rcall	.-394    	; 0x3dee <udc_next_desc_in_iface>
    3f78:	ec 01       	movw	r28, r24
    3f7a:	89 2b       	or	r24, r25
    3f7c:	49 f0       	breq	.+18     	; 0x3f90 <udc_iface_enable+0x34>
    3f7e:	4c 81       	ldd	r20, Y+4	; 0x04
    3f80:	5d 81       	ldd	r21, Y+5	; 0x05
    3f82:	6b 81       	ldd	r22, Y+3	; 0x03
    3f84:	8a 81       	ldd	r24, Y+2	; 0x02
    3f86:	0e 94 9b 12 	call	0x2536	; 0x2536 <udd_ep_alloc>
    3f8a:	81 11       	cpse	r24, r1
    3f8c:	f2 cf       	rjmp	.-28     	; 0x3f72 <udc_iface_enable+0x16>
    3f8e:	15 c0       	rjmp	.+42     	; 0x3fba <udc_iface_enable+0x5e>
    3f90:	a0 91 6a 24 	lds	r26, 0x246A	; 0x80246a <udc_ptr_conf>
    3f94:	b0 91 6b 24 	lds	r27, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    3f98:	e1 2f       	mov	r30, r17
    3f9a:	f0 e0       	ldi	r31, 0x00	; 0
    3f9c:	ee 0f       	add	r30, r30
    3f9e:	ff 1f       	adc	r31, r31
    3fa0:	12 96       	adiw	r26, 0x02	; 2
    3fa2:	8d 91       	ld	r24, X+
    3fa4:	9c 91       	ld	r25, X
    3fa6:	13 97       	sbiw	r26, 0x03	; 3
    3fa8:	e8 0f       	add	r30, r24
    3faa:	f9 1f       	adc	r31, r25
    3fac:	01 90       	ld	r0, Z+
    3fae:	f0 81       	ld	r31, Z
    3fb0:	e0 2d       	mov	r30, r0
    3fb2:	01 90       	ld	r0, Z+
    3fb4:	f0 81       	ld	r31, Z
    3fb6:	e0 2d       	mov	r30, r0
    3fb8:	19 95       	eicall
    3fba:	df 91       	pop	r29
    3fbc:	cf 91       	pop	r28
    3fbe:	1f 91       	pop	r17
    3fc0:	08 95       	ret

00003fc2 <udc_start>:
    3fc2:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <udd_enable>
    3fc6:	08 95       	ret

00003fc8 <udc_reset>:
    3fc8:	cf 93       	push	r28
    3fca:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udc_num_configuration>
    3fce:	88 23       	and	r24, r24
    3fd0:	c1 f0       	breq	.+48     	; 0x4002 <udc_reset+0x3a>
    3fd2:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <udc_ptr_conf>
    3fd6:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    3fda:	01 90       	ld	r0, Z+
    3fdc:	f0 81       	ld	r31, Z
    3fde:	e0 2d       	mov	r30, r0
    3fe0:	84 81       	ldd	r24, Z+4	; 0x04
    3fe2:	88 23       	and	r24, r24
    3fe4:	71 f0       	breq	.+28     	; 0x4002 <udc_reset+0x3a>
    3fe6:	c0 e0       	ldi	r28, 0x00	; 0
    3fe8:	8c 2f       	mov	r24, r28
    3fea:	76 df       	rcall	.-276    	; 0x3ed8 <udc_iface_disable>
    3fec:	cf 5f       	subi	r28, 0xFF	; 255
    3fee:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <udc_ptr_conf>
    3ff2:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    3ff6:	01 90       	ld	r0, Z+
    3ff8:	f0 81       	ld	r31, Z
    3ffa:	e0 2d       	mov	r30, r0
    3ffc:	84 81       	ldd	r24, Z+4	; 0x04
    3ffe:	c8 17       	cp	r28, r24
    4000:	98 f3       	brcs	.-26     	; 0x3fe8 <udc_reset+0x20>
    4002:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udc_num_configuration>
    4006:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udc_device_status>
    400a:	81 fd       	sbrc	r24, 1
    400c:	0e 94 05 18 	call	0x300a	; 0x300a <usb_callback_remotewakeup_disable>
    4010:	10 92 70 24 	sts	0x2470, r1	; 0x802470 <udc_device_status>
    4014:	10 92 71 24 	sts	0x2471, r1	; 0x802471 <udc_device_status+0x1>
    4018:	cf 91       	pop	r28
    401a:	08 95       	ret

0000401c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    401c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    401e:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udc_num_configuration>
    4022:	88 23       	and	r24, r24
    4024:	49 f1       	breq	.+82     	; 0x4078 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4026:	a0 91 6a 24 	lds	r26, 0x246A	; 0x80246a <udc_ptr_conf>
    402a:	b0 91 6b 24 	lds	r27, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    402e:	ed 91       	ld	r30, X+
    4030:	fc 91       	ld	r31, X
    4032:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4034:	84 81       	ldd	r24, Z+4	; 0x04
    4036:	88 23       	and	r24, r24
    4038:	f9 f0       	breq	.+62     	; 0x4078 <udc_sof_notify+0x5c>
    403a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    403c:	ec 2f       	mov	r30, r28
    403e:	f0 e0       	ldi	r31, 0x00	; 0
    4040:	ee 0f       	add	r30, r30
    4042:	ff 1f       	adc	r31, r31
    4044:	12 96       	adiw	r26, 0x02	; 2
    4046:	8d 91       	ld	r24, X+
    4048:	9c 91       	ld	r25, X
    404a:	13 97       	sbiw	r26, 0x03	; 3
    404c:	e8 0f       	add	r30, r24
    404e:	f9 1f       	adc	r31, r25
    4050:	01 90       	ld	r0, Z+
    4052:	f0 81       	ld	r31, Z
    4054:	e0 2d       	mov	r30, r0
    4056:	00 84       	ldd	r0, Z+8	; 0x08
    4058:	f1 85       	ldd	r31, Z+9	; 0x09
    405a:	e0 2d       	mov	r30, r0
    405c:	30 97       	sbiw	r30, 0x00	; 0
    405e:	09 f0       	breq	.+2      	; 0x4062 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    4060:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    4062:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4064:	a0 91 6a 24 	lds	r26, 0x246A	; 0x80246a <udc_ptr_conf>
    4068:	b0 91 6b 24 	lds	r27, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    406c:	ed 91       	ld	r30, X+
    406e:	fc 91       	ld	r31, X
    4070:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4072:	84 81       	ldd	r24, Z+4	; 0x04
    4074:	c8 17       	cp	r28, r24
    4076:	10 f3       	brcs	.-60     	; 0x403c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    4078:	cf 91       	pop	r28
    407a:	08 95       	ret

0000407c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    407c:	0f 93       	push	r16
    407e:	1f 93       	push	r17
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    4084:	e9 e7       	ldi	r30, 0x79	; 121
    4086:	f4 e2       	ldi	r31, 0x24	; 36
    4088:	12 86       	std	Z+10, r1	; 0x0a
    408a:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    408c:	14 86       	std	Z+12, r1	; 0x0c
    408e:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    4090:	16 86       	std	Z+14, r1	; 0x0e
    4092:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    4094:	80 81       	ld	r24, Z
    4096:	88 23       	and	r24, r24
    4098:	0c f0       	brlt	.+2      	; 0x409c <udc_process_setup+0x20>
    409a:	95 c2       	rjmp	.+1322   	; 0x45c6 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    409c:	20 91 7f 24 	lds	r18, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    40a0:	30 91 80 24 	lds	r19, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    40a4:	21 15       	cp	r18, r1
    40a6:	31 05       	cpc	r19, r1
    40a8:	09 f0       	breq	.+2      	; 0x40ac <udc_process_setup+0x30>
    40aa:	88 c2       	rjmp	.+1296   	; 0x45bc <udc_process_setup+0x540>
    40ac:	7f c2       	rjmp	.+1278   	; 0x45ac <udc_process_setup+0x530>
    40ae:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    40b0:	09 f0       	breq	.+2      	; 0x40b4 <udc_process_setup+0x38>
    40b2:	ab c0       	rjmp	.+342    	; 0x420a <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    40b4:	90 91 7a 24 	lds	r25, 0x247A	; 0x80247a <udd_g_ctrlreq+0x1>
    40b8:	96 30       	cpi	r25, 0x06	; 6
    40ba:	81 f0       	breq	.+32     	; 0x40dc <udc_process_setup+0x60>
    40bc:	98 30       	cpi	r25, 0x08	; 8
    40be:	09 f4       	brne	.+2      	; 0x40c2 <udc_process_setup+0x46>
    40c0:	99 c0       	rjmp	.+306    	; 0x41f4 <udc_process_setup+0x178>
    40c2:	91 11       	cpse	r25, r1
    40c4:	a2 c0       	rjmp	.+324    	; 0x420a <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    40c6:	22 30       	cpi	r18, 0x02	; 2
    40c8:	31 05       	cpc	r19, r1
    40ca:	09 f0       	breq	.+2      	; 0x40ce <udc_process_setup+0x52>
    40cc:	2b c2       	rjmp	.+1110   	; 0x4524 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    40ce:	62 e0       	ldi	r22, 0x02	; 2
    40d0:	70 e0       	ldi	r23, 0x00	; 0
    40d2:	80 e7       	ldi	r24, 0x70	; 112
    40d4:	94 e2       	ldi	r25, 0x24	; 36
    40d6:	0e 94 94 12 	call	0x2528	; 0x2528 <udd_set_setup_payload>
    40da:	7e c2       	rjmp	.+1276   	; 0x45d8 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    40dc:	80 91 7b 24 	lds	r24, 0x247B	; 0x80247b <udd_g_ctrlreq+0x2>
    40e0:	90 91 7c 24 	lds	r25, 0x247C	; 0x80247c <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    40e4:	29 2f       	mov	r18, r25
    40e6:	33 27       	eor	r19, r19
    40e8:	22 30       	cpi	r18, 0x02	; 2
    40ea:	31 05       	cpc	r19, r1
    40ec:	b1 f0       	breq	.+44     	; 0x411a <udc_process_setup+0x9e>
    40ee:	20 f4       	brcc	.+8      	; 0x40f8 <udc_process_setup+0x7c>
    40f0:	21 30       	cpi	r18, 0x01	; 1
    40f2:	31 05       	cpc	r19, r1
    40f4:	41 f0       	breq	.+16     	; 0x4106 <udc_process_setup+0x8a>
    40f6:	d8 c1       	rjmp	.+944    	; 0x44a8 <udc_process_setup+0x42c>
    40f8:	23 30       	cpi	r18, 0x03	; 3
    40fa:	31 05       	cpc	r19, r1
    40fc:	f1 f1       	breq	.+124    	; 0x417a <udc_process_setup+0xfe>
    40fe:	2f 30       	cpi	r18, 0x0F	; 15
    4100:	31 05       	cpc	r19, r1
    4102:	61 f1       	breq	.+88     	; 0x415c <udc_process_setup+0xe0>
    4104:	d1 c1       	rjmp	.+930    	; 0x44a8 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    4106:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <udc_config>
    410a:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    410e:	dc 01       	movw	r26, r24
    4110:	6c 91       	ld	r22, X
    4112:	70 e0       	ldi	r23, 0x00	; 0
    4114:	0e 94 94 12 	call	0x2528	; 0x2528 <udd_set_setup_payload>
    4118:	5e c0       	rjmp	.+188    	; 0x41d6 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    411a:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    411e:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
    4122:	21 89       	ldd	r18, Z+17	; 0x11
    4124:	82 17       	cp	r24, r18
    4126:	08 f0       	brcs	.+2      	; 0x412a <udc_process_setup+0xae>
    4128:	fd c1       	rjmp	.+1018   	; 0x4524 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    412a:	99 27       	eor	r25, r25
    412c:	88 0f       	add	r24, r24
    412e:	99 1f       	adc	r25, r25
    4130:	88 0f       	add	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    4138:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    413c:	e8 0f       	add	r30, r24
    413e:	f9 1f       	adc	r31, r25
    4140:	80 81       	ld	r24, Z
    4142:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    4144:	fc 01       	movw	r30, r24
    4146:	62 81       	ldd	r22, Z+2	; 0x02
    4148:	73 81       	ldd	r23, Z+3	; 0x03
    414a:	0e 94 94 12 	call	0x2528	; 0x2528 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    414e:	e0 91 81 24 	lds	r30, 0x2481	; 0x802481 <udd_g_ctrlreq+0x8>
    4152:	f0 91 82 24 	lds	r31, 0x2482	; 0x802482 <udd_g_ctrlreq+0x9>
    4156:	82 e0       	ldi	r24, 0x02	; 2
    4158:	81 83       	std	Z+1, r24	; 0x01
    415a:	3d c0       	rjmp	.+122    	; 0x41d6 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    415c:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <udc_config+0x4>
    4160:	90 91 42 20 	lds	r25, 0x2042	; 0x802042 <udc_config+0x5>
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	09 f4       	brne	.+2      	; 0x416a <udc_process_setup+0xee>
    4168:	dd c1       	rjmp	.+954    	; 0x4524 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    416a:	dc 01       	movw	r26, r24
    416c:	12 96       	adiw	r26, 0x02	; 2
    416e:	6d 91       	ld	r22, X+
    4170:	7c 91       	ld	r23, X
    4172:	13 97       	sbiw	r26, 0x03	; 3
    4174:	0e 94 94 12 	call	0x2528	; 0x2528 <udd_set_setup_payload>
    4178:	2e c0       	rjmp	.+92     	; 0x41d6 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    417a:	99 27       	eor	r25, r25
    417c:	81 30       	cpi	r24, 0x01	; 1
    417e:	91 05       	cpc	r25, r1
    4180:	99 f0       	breq	.+38     	; 0x41a8 <udc_process_setup+0x12c>
    4182:	58 f0       	brcs	.+22     	; 0x419a <udc_process_setup+0x11e>
    4184:	82 30       	cpi	r24, 0x02	; 2
    4186:	91 05       	cpc	r25, r1
    4188:	09 f4       	brne	.+2      	; 0x418c <udc_process_setup+0x110>
    418a:	22 c2       	rjmp	.+1092   	; 0x45d0 <udc_process_setup+0x554>
    418c:	03 97       	sbiw	r24, 0x03	; 3
    418e:	09 f0       	breq	.+2      	; 0x4192 <udc_process_setup+0x116>
    4190:	94 c1       	rjmp	.+808    	; 0x44ba <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    4192:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    4194:	e5 ea       	ldi	r30, 0xA5	; 165
    4196:	f1 e2       	ldi	r31, 0x21	; 33
    4198:	0a c0       	rjmp	.+20     	; 0x41ae <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    419a:	64 e0       	ldi	r22, 0x04	; 4
    419c:	70 e0       	ldi	r23, 0x00	; 0
    419e:	82 ee       	ldi	r24, 0xE2	; 226
    41a0:	90 e2       	ldi	r25, 0x20	; 32
    41a2:	0e 94 94 12 	call	0x2528	; 0x2528 <udd_set_setup_payload>
    41a6:	17 c0       	rjmp	.+46     	; 0x41d6 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    41a8:	e1 ed       	ldi	r30, 0xD1	; 209
    41aa:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    41ac:	30 e1       	ldi	r19, 0x10	; 16
    41ae:	a4 ea       	ldi	r26, 0xA4	; 164
    41b0:	b0 e2       	ldi	r27, 0x20	; 32
    41b2:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    41b4:	81 91       	ld	r24, Z+
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	8d 93       	st	X+, r24
    41ba:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    41bc:	2f 5f       	subi	r18, 0xFF	; 255
    41be:	23 17       	cp	r18, r19
    41c0:	c8 f3       	brcs	.-14     	; 0x41b4 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    41c2:	63 2f       	mov	r22, r19
    41c4:	66 0f       	add	r22, r22
    41c6:	6e 5f       	subi	r22, 0xFE	; 254
    41c8:	60 93 a2 20 	sts	0x20A2, r22	; 0x8020a2 <udc_string_desc>
		udd_set_setup_payload(
    41cc:	70 e0       	ldi	r23, 0x00	; 0
    41ce:	82 ea       	ldi	r24, 0xA2	; 162
    41d0:	90 e2       	ldi	r25, 0x20	; 32
    41d2:	0e 94 94 12 	call	0x2528	; 0x2528 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    41d6:	e9 e7       	ldi	r30, 0x79	; 121
    41d8:	f4 e2       	ldi	r31, 0x24	; 36
    41da:	86 81       	ldd	r24, Z+6	; 0x06
    41dc:	97 81       	ldd	r25, Z+7	; 0x07
    41de:	22 85       	ldd	r18, Z+10	; 0x0a
    41e0:	33 85       	ldd	r19, Z+11	; 0x0b
    41e2:	82 17       	cp	r24, r18
    41e4:	93 07       	cpc	r25, r19
    41e6:	08 f0       	brcs	.+2      	; 0x41ea <udc_process_setup+0x16e>
    41e8:	f7 c1       	rjmp	.+1006   	; 0x45d8 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    41ea:	80 93 83 24 	sts	0x2483, r24	; 0x802483 <udd_g_ctrlreq+0xa>
    41ee:	90 93 84 24 	sts	0x2484, r25	; 0x802484 <udd_g_ctrlreq+0xb>
    41f2:	f2 c1       	rjmp	.+996    	; 0x45d8 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    41f4:	21 30       	cpi	r18, 0x01	; 1
    41f6:	31 05       	cpc	r19, r1
    41f8:	09 f0       	breq	.+2      	; 0x41fc <udc_process_setup+0x180>
    41fa:	94 c1       	rjmp	.+808    	; 0x4524 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    41fc:	61 e0       	ldi	r22, 0x01	; 1
    41fe:	70 e0       	ldi	r23, 0x00	; 0
    4200:	8c e6       	ldi	r24, 0x6C	; 108
    4202:	94 e2       	ldi	r25, 0x24	; 36
    4204:	0e 94 94 12 	call	0x2528	; 0x2528 <udd_set_setup_payload>
    4208:	e7 c1       	rjmp	.+974    	; 0x45d8 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    420a:	81 30       	cpi	r24, 0x01	; 1
    420c:	e9 f5       	brne	.+122    	; 0x4288 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    420e:	90 91 7a 24 	lds	r25, 0x247A	; 0x80247a <udd_g_ctrlreq+0x1>
    4212:	9a 30       	cpi	r25, 0x0A	; 10
    4214:	c9 f5       	brne	.+114    	; 0x4288 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    4216:	21 30       	cpi	r18, 0x01	; 1
    4218:	31 05       	cpc	r19, r1
    421a:	09 f0       	breq	.+2      	; 0x421e <udc_process_setup+0x1a2>
    421c:	53 c1       	rjmp	.+678    	; 0x44c4 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    421e:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udc_num_configuration>
    4222:	88 23       	and	r24, r24
    4224:	09 f4       	brne	.+2      	; 0x4228 <udc_process_setup+0x1ac>
    4226:	4e c1       	rjmp	.+668    	; 0x44c4 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4228:	c0 91 7d 24 	lds	r28, 0x247D	; 0x80247d <udd_g_ctrlreq+0x4>
    422c:	d0 91 7e 24 	lds	r29, 0x247E	; 0x80247e <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4230:	00 91 6a 24 	lds	r16, 0x246A	; 0x80246a <udc_ptr_conf>
    4234:	10 91 6b 24 	lds	r17, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    4238:	d8 01       	movw	r26, r16
    423a:	ed 91       	ld	r30, X+
    423c:	fc 91       	ld	r31, X
    423e:	84 81       	ldd	r24, Z+4	; 0x04
    4240:	c8 17       	cp	r28, r24
    4242:	08 f0       	brcs	.+2      	; 0x4246 <udc_process_setup+0x1ca>
    4244:	3f c1       	rjmp	.+638    	; 0x44c4 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4246:	60 e0       	ldi	r22, 0x00	; 0
    4248:	8c 2f       	mov	r24, r28
    424a:	0c de       	rcall	.-1000   	; 0x3e64 <udc_update_iface_desc>
    424c:	88 23       	and	r24, r24
    424e:	09 f4       	brne	.+2      	; 0x4252 <udc_process_setup+0x1d6>
    4250:	34 c1       	rjmp	.+616    	; 0x44ba <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4252:	ce 01       	movw	r24, r28
    4254:	99 27       	eor	r25, r25
    4256:	88 0f       	add	r24, r24
    4258:	99 1f       	adc	r25, r25
    425a:	d8 01       	movw	r26, r16
    425c:	12 96       	adiw	r26, 0x02	; 2
    425e:	ed 91       	ld	r30, X+
    4260:	fc 91       	ld	r31, X
    4262:	13 97       	sbiw	r26, 0x03	; 3
    4264:	e8 0f       	add	r30, r24
    4266:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    4268:	01 90       	ld	r0, Z+
    426a:	f0 81       	ld	r31, Z
    426c:	e0 2d       	mov	r30, r0
    426e:	86 81       	ldd	r24, Z+6	; 0x06
    4270:	97 81       	ldd	r25, Z+7	; 0x07
    4272:	fc 01       	movw	r30, r24
    4274:	19 95       	eicall
    4276:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    427a:	61 e0       	ldi	r22, 0x01	; 1
    427c:	70 e0       	ldi	r23, 0x00	; 0
    427e:	8e e6       	ldi	r24, 0x6E	; 110
    4280:	94 e2       	ldi	r25, 0x24	; 36
    4282:	0e 94 94 12 	call	0x2528	; 0x2528 <udd_set_setup_payload>
    4286:	a8 c1       	rjmp	.+848    	; 0x45d8 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4288:	82 30       	cpi	r24, 0x02	; 2
    428a:	09 f0       	breq	.+2      	; 0x428e <udc_process_setup+0x212>
    428c:	16 c1       	rjmp	.+556    	; 0x44ba <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    428e:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x1>
    4292:	81 11       	cpse	r24, r1
    4294:	0b c1       	rjmp	.+534    	; 0x44ac <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    4296:	22 30       	cpi	r18, 0x02	; 2
    4298:	31 05       	cpc	r19, r1
    429a:	09 f0       	breq	.+2      	; 0x429e <udc_process_setup+0x222>
    429c:	43 c1       	rjmp	.+646    	; 0x4524 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    429e:	80 91 7d 24 	lds	r24, 0x247D	; 0x80247d <udd_g_ctrlreq+0x4>
    42a2:	0e 94 23 13 	call	0x2646	; 0x2646 <udd_ep_is_halted>
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	80 93 66 24 	sts	0x2466, r24	; 0x802466 <udc_ep_status.4757>
    42ac:	90 93 67 24 	sts	0x2467, r25	; 0x802467 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    42b0:	62 e0       	ldi	r22, 0x02	; 2
    42b2:	70 e0       	ldi	r23, 0x00	; 0
    42b4:	86 e6       	ldi	r24, 0x66	; 102
    42b6:	94 e2       	ldi	r25, 0x24	; 36
    42b8:	0e 94 94 12 	call	0x2528	; 0x2528 <udd_set_setup_payload>
    42bc:	8d c1       	rjmp	.+794    	; 0x45d8 <udc_process_setup+0x55c>
    42be:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    42c0:	09 f0       	breq	.+2      	; 0x42c4 <udc_process_setup+0x248>
    42c2:	a0 c0       	rjmp	.+320    	; 0x4404 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    42c4:	90 91 7a 24 	lds	r25, 0x247A	; 0x80247a <udd_g_ctrlreq+0x1>
    42c8:	93 30       	cpi	r25, 0x03	; 3
    42ca:	91 f1       	breq	.+100    	; 0x4330 <udc_process_setup+0x2b4>
    42cc:	18 f4       	brcc	.+6      	; 0x42d4 <udc_process_setup+0x258>
    42ce:	91 30       	cpi	r25, 0x01	; 1
    42d0:	a9 f0       	breq	.+42     	; 0x42fc <udc_process_setup+0x280>
    42d2:	98 c0       	rjmp	.+304    	; 0x4404 <udc_process_setup+0x388>
    42d4:	95 30       	cpi	r25, 0x05	; 5
    42d6:	21 f0       	breq	.+8      	; 0x42e0 <udc_process_setup+0x264>
    42d8:	99 30       	cpi	r25, 0x09	; 9
    42da:	09 f4       	brne	.+2      	; 0x42de <udc_process_setup+0x262>
    42dc:	43 c0       	rjmp	.+134    	; 0x4364 <udc_process_setup+0x2e8>
    42de:	92 c0       	rjmp	.+292    	; 0x4404 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    42e0:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    42e4:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    42e8:	89 2b       	or	r24, r25
    42ea:	09 f0       	breq	.+2      	; 0x42ee <udc_process_setup+0x272>
    42ec:	1b c1       	rjmp	.+566    	; 0x4524 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    42ee:	8c e2       	ldi	r24, 0x2C	; 44
    42f0:	9f e1       	ldi	r25, 0x1F	; 31
    42f2:	80 93 85 24 	sts	0x2485, r24	; 0x802485 <udd_g_ctrlreq+0xc>
    42f6:	90 93 86 24 	sts	0x2486, r25	; 0x802486 <udd_g_ctrlreq+0xd>
    42fa:	6e c1       	rjmp	.+732    	; 0x45d8 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    42fc:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    4300:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    4304:	89 2b       	or	r24, r25
    4306:	09 f0       	breq	.+2      	; 0x430a <udc_process_setup+0x28e>
    4308:	0d c1       	rjmp	.+538    	; 0x4524 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    430a:	80 91 7b 24 	lds	r24, 0x247B	; 0x80247b <udd_g_ctrlreq+0x2>
    430e:	90 91 7c 24 	lds	r25, 0x247C	; 0x80247c <udd_g_ctrlreq+0x3>
    4312:	01 97       	sbiw	r24, 0x01	; 1
    4314:	09 f0       	breq	.+2      	; 0x4318 <udc_process_setup+0x29c>
    4316:	06 c1       	rjmp	.+524    	; 0x4524 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    4318:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udc_device_status>
    431c:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udc_device_status+0x1>
    4320:	8d 7f       	andi	r24, 0xFD	; 253
    4322:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udc_device_status>
    4326:	90 93 71 24 	sts	0x2471, r25	; 0x802471 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    432a:	0e 94 05 18 	call	0x300a	; 0x300a <usb_callback_remotewakeup_disable>
    432e:	54 c1       	rjmp	.+680    	; 0x45d8 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4330:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    4334:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    4338:	89 2b       	or	r24, r25
    433a:	09 f0       	breq	.+2      	; 0x433e <udc_process_setup+0x2c2>
    433c:	f3 c0       	rjmp	.+486    	; 0x4524 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    433e:	80 91 7b 24 	lds	r24, 0x247B	; 0x80247b <udd_g_ctrlreq+0x2>
    4342:	90 91 7c 24 	lds	r25, 0x247C	; 0x80247c <udd_g_ctrlreq+0x3>
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	09 f0       	breq	.+2      	; 0x434c <udc_process_setup+0x2d0>
    434a:	b2 c0       	rjmp	.+356    	; 0x44b0 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    434c:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <udc_device_status>
    4350:	90 91 71 24 	lds	r25, 0x2471	; 0x802471 <udc_device_status+0x1>
    4354:	82 60       	ori	r24, 0x02	; 2
    4356:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <udc_device_status>
    435a:	90 93 71 24 	sts	0x2471, r25	; 0x802471 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    435e:	0e 94 04 18 	call	0x3008	; 0x3008 <usb_callback_remotewakeup_enable>
    4362:	3a c1       	rjmp	.+628    	; 0x45d8 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    4364:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    4368:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    436c:	89 2b       	or	r24, r25
    436e:	09 f0       	breq	.+2      	; 0x4372 <udc_process_setup+0x2f6>
    4370:	d9 c0       	rjmp	.+434    	; 0x4524 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    4372:	0e 94 89 12 	call	0x2512	; 0x2512 <udd_getaddress>
    4376:	88 23       	and	r24, r24
    4378:	09 f4       	brne	.+2      	; 0x437c <udc_process_setup+0x300>
    437a:	9f c0       	rjmp	.+318    	; 0x44ba <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    437c:	20 91 7b 24 	lds	r18, 0x247B	; 0x80247b <udd_g_ctrlreq+0x2>
    4380:	30 91 7c 24 	lds	r19, 0x247C	; 0x80247c <udd_g_ctrlreq+0x3>
    4384:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    4386:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    438a:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    438e:	81 89       	ldd	r24, Z+17	; 0x11
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	82 17       	cp	r24, r18
    4394:	93 07       	cpc	r25, r19
    4396:	08 f4       	brcc	.+2      	; 0x439a <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    4398:	90 c0       	rjmp	.+288    	; 0x44ba <udc_process_setup+0x43e>
    439a:	16 de       	rcall	.-980    	; 0x3fc8 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    439c:	80 91 7b 24 	lds	r24, 0x247B	; 0x80247b <udd_g_ctrlreq+0x2>
    43a0:	90 91 7c 24 	lds	r25, 0x247C	; 0x80247c <udd_g_ctrlreq+0x3>
    43a4:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <udc_num_configuration>
	if (udc_num_configuration == 0) {
    43a8:	88 23       	and	r24, r24
    43aa:	09 f4       	brne	.+2      	; 0x43ae <udc_process_setup+0x332>
    43ac:	15 c1       	rjmp	.+554    	; 0x45d8 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    43ae:	99 27       	eor	r25, r25
    43b0:	81 50       	subi	r24, 0x01	; 1
    43b2:	90 4c       	sbci	r25, 0xC0	; 192
    43b4:	88 0f       	add	r24, r24
    43b6:	99 1f       	adc	r25, r25
    43b8:	88 0f       	add	r24, r24
    43ba:	99 1f       	adc	r25, r25
    43bc:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    43c0:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    43c4:	e8 0f       	add	r30, r24
    43c6:	f9 1f       	adc	r31, r25
    43c8:	e0 93 6a 24 	sts	0x246A, r30	; 0x80246a <udc_ptr_conf>
    43cc:	f0 93 6b 24 	sts	0x246B, r31	; 0x80246b <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    43d0:	01 90       	ld	r0, Z+
    43d2:	f0 81       	ld	r31, Z
    43d4:	e0 2d       	mov	r30, r0
    43d6:	84 81       	ldd	r24, Z+4	; 0x04
    43d8:	88 23       	and	r24, r24
    43da:	09 f4       	brne	.+2      	; 0x43de <udc_process_setup+0x362>
    43dc:	fd c0       	rjmp	.+506    	; 0x45d8 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    43de:	c0 e0       	ldi	r28, 0x00	; 0
    43e0:	60 e0       	ldi	r22, 0x00	; 0
    43e2:	8c 2f       	mov	r24, r28
    43e4:	bb dd       	rcall	.-1162   	; 0x3f5c <udc_iface_enable>
    43e6:	88 23       	and	r24, r24
    43e8:	09 f4       	brne	.+2      	; 0x43ec <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    43ea:	67 c0       	rjmp	.+206    	; 0x44ba <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    43ec:	cf 5f       	subi	r28, 0xFF	; 255
    43ee:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <udc_ptr_conf>
    43f2:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    43f6:	01 90       	ld	r0, Z+
    43f8:	f0 81       	ld	r31, Z
    43fa:	e0 2d       	mov	r30, r0
    43fc:	84 81       	ldd	r24, Z+4	; 0x04
    43fe:	c8 17       	cp	r28, r24
    4400:	78 f3       	brcs	.-34     	; 0x43e0 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4402:	ea c0       	rjmp	.+468    	; 0x45d8 <udc_process_setup+0x55c>
    4404:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4406:	e9 f4       	brne	.+58     	; 0x4442 <udc_process_setup+0x3c6>
    4408:	90 91 7a 24 	lds	r25, 0x247A	; 0x80247a <udd_g_ctrlreq+0x1>
    440c:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    440e:	c9 f4       	brne	.+50     	; 0x4442 <udc_process_setup+0x3c6>
    4410:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    4414:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    4418:	89 2b       	or	r24, r25
    441a:	09 f0       	breq	.+2      	; 0x441e <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    441c:	53 c0       	rjmp	.+166    	; 0x44c4 <udc_process_setup+0x448>
    441e:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udc_num_configuration>
    4422:	88 23       	and	r24, r24
    4424:	09 f4       	brne	.+2      	; 0x4428 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4426:	4e c0       	rjmp	.+156    	; 0x44c4 <udc_process_setup+0x448>
    4428:	e9 e7       	ldi	r30, 0x79	; 121
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    442a:	f4 e2       	ldi	r31, 0x24	; 36

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    442c:	c4 81       	ldd	r28, Z+4	; 0x04
    442e:	d2 81       	ldd	r29, Z+2	; 0x02
    4430:	8c 2f       	mov	r24, r28
    4432:	52 dd       	rcall	.-1372   	; 0x3ed8 <udc_iface_disable>
    4434:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    4436:	09 f4       	brne	.+2      	; 0x443a <udc_process_setup+0x3be>
    4438:	40 c0       	rjmp	.+128    	; 0x44ba <udc_process_setup+0x43e>
    443a:	6d 2f       	mov	r22, r29
    443c:	8c 2f       	mov	r24, r28
    443e:	8e dd       	rcall	.-1252   	; 0x3f5c <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4440:	3a c0       	rjmp	.+116    	; 0x44b6 <udc_process_setup+0x43a>
    4442:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4444:	d1 f5       	brne	.+116    	; 0x44ba <udc_process_setup+0x43e>
    4446:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x1>
    444a:	81 30       	cpi	r24, 0x01	; 1
    444c:	19 f0       	breq	.+6      	; 0x4454 <udc_process_setup+0x3d8>
    444e:	83 30       	cpi	r24, 0x03	; 3
    4450:	a1 f0       	breq	.+40     	; 0x447a <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4452:	30 c0       	rjmp	.+96     	; 0x44b4 <udc_process_setup+0x438>
    4454:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    4458:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    445c:	89 2b       	or	r24, r25
    445e:	09 f0       	breq	.+2      	; 0x4462 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4460:	61 c0       	rjmp	.+194    	; 0x4524 <udc_process_setup+0x4a8>
    4462:	80 91 7b 24 	lds	r24, 0x247B	; 0x80247b <udd_g_ctrlreq+0x2>
    4466:	90 91 7c 24 	lds	r25, 0x247C	; 0x80247c <udd_g_ctrlreq+0x3>
    446a:	89 2b       	or	r24, r25
    446c:	09 f0       	breq	.+2      	; 0x4470 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    446e:	5a c0       	rjmp	.+180    	; 0x4524 <udc_process_setup+0x4a8>
    4470:	80 91 7d 24 	lds	r24, 0x247D	; 0x80247d <udd_g_ctrlreq+0x4>
    4474:	0e 94 3e 13 	call	0x267c	; 0x267c <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4478:	1e c0       	rjmp	.+60     	; 0x44b6 <udc_process_setup+0x43a>
    447a:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <udd_g_ctrlreq+0x6>
    447e:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <udd_g_ctrlreq+0x7>
    4482:	89 2b       	or	r24, r25
    4484:	09 f0       	breq	.+2      	; 0x4488 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4486:	4e c0       	rjmp	.+156    	; 0x4524 <udc_process_setup+0x4a8>
    4488:	80 91 7b 24 	lds	r24, 0x247B	; 0x80247b <udd_g_ctrlreq+0x2>
    448c:	90 91 7c 24 	lds	r25, 0x247C	; 0x80247c <udd_g_ctrlreq+0x3>
    4490:	89 2b       	or	r24, r25
    4492:	09 f0       	breq	.+2      	; 0x4496 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    4494:	47 c0       	rjmp	.+142    	; 0x4524 <udc_process_setup+0x4a8>
    4496:	c9 e7       	ldi	r28, 0x79	; 121
    4498:	d4 e2       	ldi	r29, 0x24	; 36
    449a:	8c 81       	ldd	r24, Y+4	; 0x04
    449c:	0e 94 40 14 	call	0x2880	; 0x2880 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    44a0:	8c 81       	ldd	r24, Y+4	; 0x04
    44a2:	0e 94 ab 14 	call	0x2956	; 0x2956 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    44a6:	07 c0       	rjmp	.+14     	; 0x44b6 <udc_process_setup+0x43a>
    44a8:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    44aa:	05 c0       	rjmp	.+10     	; 0x44b6 <udc_process_setup+0x43a>
    44ac:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    44ae:	03 c0       	rjmp	.+6      	; 0x44b6 <udc_process_setup+0x43a>
    44b0:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    44b2:	01 c0       	rjmp	.+2      	; 0x44b6 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    44b8:	90 c0       	rjmp	.+288    	; 0x45da <udc_process_setup+0x55e>
    44ba:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq>
    44be:	8f 71       	andi	r24, 0x1F	; 31
    44c0:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    44c2:	81 f5       	brne	.+96     	; 0x4524 <udc_process_setup+0x4a8>
    44c4:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udc_num_configuration>
    44c8:	88 23       	and	r24, r24
    44ca:	09 f4       	brne	.+2      	; 0x44ce <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    44cc:	71 c0       	rjmp	.+226    	; 0x45b0 <udc_process_setup+0x534>
    44ce:	00 91 7d 24 	lds	r16, 0x247D	; 0x80247d <udd_g_ctrlreq+0x4>
    44d2:	10 91 7e 24 	lds	r17, 0x247E	; 0x80247e <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    44d6:	c0 91 6a 24 	lds	r28, 0x246A	; 0x80246a <udc_ptr_conf>
    44da:	d0 91 6b 24 	lds	r29, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    44de:	e8 81       	ld	r30, Y
    44e0:	f9 81       	ldd	r31, Y+1	; 0x01
    44e2:	84 81       	ldd	r24, Z+4	; 0x04
    44e4:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    44e6:	08 f0       	brcs	.+2      	; 0x44ea <udc_process_setup+0x46e>
    44e8:	65 c0       	rjmp	.+202    	; 0x45b4 <udc_process_setup+0x538>
    44ea:	60 e0       	ldi	r22, 0x00	; 0
    44ec:	80 2f       	mov	r24, r16
    44ee:	ba dc       	rcall	.-1676   	; 0x3e64 <udc_update_iface_desc>
    44f0:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    44f2:	c1 f0       	breq	.+48     	; 0x4524 <udc_process_setup+0x4a8>
    44f4:	f8 01       	movw	r30, r16
    44f6:	ff 27       	eor	r31, r31
    44f8:	cf 01       	movw	r24, r30
    44fa:	88 0f       	add	r24, r24
    44fc:	99 1f       	adc	r25, r25
    44fe:	ea 81       	ldd	r30, Y+2	; 0x02
    4500:	fb 81       	ldd	r31, Y+3	; 0x03
    4502:	e8 0f       	add	r30, r24
    4504:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4506:	c0 81       	ld	r28, Z
    4508:	d1 81       	ldd	r29, Z+1	; 0x01
    450a:	ee 81       	ldd	r30, Y+6	; 0x06
    450c:	ff 81       	ldd	r31, Y+7	; 0x07
    450e:	19 95       	eicall
    4510:	68 2f       	mov	r22, r24
    4512:	80 2f       	mov	r24, r16
    4514:	a7 dc       	rcall	.-1714   	; 0x3e64 <udc_update_iface_desc>
    4516:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    4518:	29 f0       	breq	.+10     	; 0x4524 <udc_process_setup+0x4a8>
    451a:	ec 81       	ldd	r30, Y+4	; 0x04
    451c:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    451e:	19 95       	eicall
    4520:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    4522:	5b c0       	rjmp	.+182    	; 0x45da <udc_process_setup+0x55e>
    4524:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq>
    4528:	8f 71       	andi	r24, 0x1F	; 31
    452a:	82 30       	cpi	r24, 0x02	; 2
    452c:	09 f0       	breq	.+2      	; 0x4530 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    452e:	44 c0       	rjmp	.+136    	; 0x45b8 <udc_process_setup+0x53c>
    4530:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udc_num_configuration>
    4534:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4536:	b1 f1       	breq	.+108    	; 0x45a4 <udc_process_setup+0x528>
    4538:	a0 91 6a 24 	lds	r26, 0x246A	; 0x80246a <udc_ptr_conf>
    453c:	b0 91 6b 24 	lds	r27, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    4540:	ed 91       	ld	r30, X+
    4542:	fc 91       	ld	r31, X
    4544:	11 97       	sbiw	r26, 0x01	; 1
    4546:	84 81       	ldd	r24, Z+4	; 0x04
    4548:	88 23       	and	r24, r24
    454a:	71 f1       	breq	.+92     	; 0x45a8 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    454c:	c0 e0       	ldi	r28, 0x00	; 0
    454e:	ec 2f       	mov	r30, r28
    4550:	f0 e0       	ldi	r31, 0x00	; 0
    4552:	ee 0f       	add	r30, r30
    4554:	ff 1f       	adc	r31, r31
    4556:	12 96       	adiw	r26, 0x02	; 2
    4558:	8d 91       	ld	r24, X+
    455a:	9c 91       	ld	r25, X
    455c:	13 97       	sbiw	r26, 0x03	; 3
    455e:	e8 0f       	add	r30, r24
    4560:	f9 1f       	adc	r31, r25
    4562:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4564:	11 81       	ldd	r17, Z+1	; 0x01
    4566:	d8 01       	movw	r26, r16
    4568:	16 96       	adiw	r26, 0x06	; 6
    456a:	ed 91       	ld	r30, X+
    456c:	fc 91       	ld	r31, X
    456e:	17 97       	sbiw	r26, 0x07	; 7
    4570:	19 95       	eicall
    4572:	68 2f       	mov	r22, r24
    4574:	8c 2f       	mov	r24, r28
    4576:	76 dc       	rcall	.-1812   	; 0x3e64 <udc_update_iface_desc>
    4578:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    457a:	79 f1       	breq	.+94     	; 0x45da <udc_process_setup+0x55e>
    457c:	d8 01       	movw	r26, r16
    457e:	14 96       	adiw	r26, 0x04	; 4
    4580:	ed 91       	ld	r30, X+
    4582:	fc 91       	ld	r31, X
    4584:	15 97       	sbiw	r26, 0x05	; 5
    4586:	19 95       	eicall
    4588:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    458a:	27 c0       	rjmp	.+78     	; 0x45da <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    458c:	cf 5f       	subi	r28, 0xFF	; 255
    458e:	a0 91 6a 24 	lds	r26, 0x246A	; 0x80246a <udc_ptr_conf>
    4592:	b0 91 6b 24 	lds	r27, 0x246B	; 0x80246b <udc_ptr_conf+0x1>
    4596:	ed 91       	ld	r30, X+
    4598:	fc 91       	ld	r31, X
    459a:	11 97       	sbiw	r26, 0x01	; 1
    459c:	94 81       	ldd	r25, Z+4	; 0x04
    459e:	c9 17       	cp	r28, r25
    45a0:	b0 f2       	brcs	.-84     	; 0x454e <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    45a2:	1b c0       	rjmp	.+54     	; 0x45da <udc_process_setup+0x55e>
    45a4:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    45a6:	19 c0       	rjmp	.+50     	; 0x45da <udc_process_setup+0x55e>
    45a8:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    45aa:	17 c0       	rjmp	.+46     	; 0x45da <udc_process_setup+0x55e>
    45ac:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    45ae:	15 c0       	rjmp	.+42     	; 0x45da <udc_process_setup+0x55e>
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	13 c0       	rjmp	.+38     	; 0x45da <udc_process_setup+0x55e>
    45b4:	80 e0       	ldi	r24, 0x00	; 0
    45b6:	11 c0       	rjmp	.+34     	; 0x45da <udc_process_setup+0x55e>
    45b8:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    45ba:	0f c0       	rjmp	.+30     	; 0x45da <udc_process_setup+0x55e>
    45bc:	98 2f       	mov	r25, r24
    45be:	90 76       	andi	r25, 0x60	; 96
    45c0:	09 f0       	breq	.+2      	; 0x45c4 <udc_process_setup+0x548>
    45c2:	7b cf       	rjmp	.-266    	; 0x44ba <udc_process_setup+0x43e>
    45c4:	74 cd       	rjmp	.-1304   	; 0x40ae <udc_process_setup+0x32>
    45c6:	98 2f       	mov	r25, r24
    45c8:	90 76       	andi	r25, 0x60	; 96
    45ca:	09 f0       	breq	.+2      	; 0x45ce <udc_process_setup+0x552>
    45cc:	76 cf       	rjmp	.-276    	; 0x44ba <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    45ce:	77 ce       	rjmp	.-786    	; 0x42be <udc_process_setup+0x242>
		str = udc_string_product_name;
    45d0:	3c e0       	ldi	r19, 0x0C	; 12
    45d2:	e4 ec       	ldi	r30, 0xC4	; 196
    45d4:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    45d6:	eb cd       	rjmp	.-1066   	; 0x41ae <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    45d8:	81 e0       	ldi	r24, 0x01	; 1
    45da:	df 91       	pop	r29
    45dc:	cf 91       	pop	r28
    45de:	1f 91       	pop	r17
    45e0:	0f 91       	pop	r16
    45e2:	08 95       	ret

000045e4 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    45e4:	cf 93       	push	r28
    45e6:	df 93       	push	r29
    45e8:	1f 92       	push	r1
    45ea:	cd b7       	in	r28, 0x3d	; 61
    45ec:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    45ee:	80 91 93 24 	lds	r24, 0x2493	; 0x802493 <stdio_base>
    45f2:	90 91 94 24 	lds	r25, 0x2494	; 0x802494 <stdio_base+0x1>
    45f6:	e0 91 8f 24 	lds	r30, 0x248F	; 0x80248f <ptr_get>
    45fa:	f0 91 90 24 	lds	r31, 0x2490	; 0x802490 <ptr_get+0x1>
    45fe:	be 01       	movw	r22, r28
    4600:	6f 5f       	subi	r22, 0xFF	; 255
    4602:	7f 4f       	sbci	r23, 0xFF	; 255
    4604:	19 95       	eicall
	return c;
    4606:	89 81       	ldd	r24, Y+1	; 0x01
}
    4608:	08 2e       	mov	r0, r24
    460a:	00 0c       	add	r0, r0
    460c:	99 0b       	sbc	r25, r25
    460e:	0f 90       	pop	r0
    4610:	df 91       	pop	r29
    4612:	cf 91       	pop	r28
    4614:	08 95       	ret

00004616 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    4616:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <stdio_usb_interface_enable>
    461a:	88 23       	and	r24, r24
    461c:	81 f0       	breq	.+32     	; 0x463e <stdio_usb_putchar+0x28>
    461e:	86 2f       	mov	r24, r22
    4620:	08 2e       	mov	r0, r24
    4622:	00 0c       	add	r0, r0
    4624:	99 0b       	sbc	r25, r25
    4626:	df db       	rcall	.-2114   	; 0x3de6 <udi_cdc_putc>
    4628:	21 e0       	ldi	r18, 0x01	; 1
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	89 2b       	or	r24, r25
    462e:	11 f0       	breq	.+4      	; 0x4634 <stdio_usb_putchar+0x1e>
    4630:	20 e0       	ldi	r18, 0x00	; 0
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	88 27       	eor	r24, r24
    4636:	99 27       	eor	r25, r25
    4638:	82 1b       	sub	r24, r18
    463a:	93 0b       	sbc	r25, r19
    463c:	08 95       	ret
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	08 95       	ret

00004644 <stdio_usb_getchar>:
    4644:	cf 93       	push	r28
    4646:	df 93       	push	r29
    4648:	80 91 72 24 	lds	r24, 0x2472	; 0x802472 <stdio_usb_interface_enable>
    464c:	81 11       	cpse	r24, r1
    464e:	03 c0       	rjmp	.+6      	; 0x4656 <stdio_usb_getchar+0x12>
    4650:	fb 01       	movw	r30, r22
    4652:	10 82       	st	Z, r1
    4654:	03 c0       	rjmp	.+6      	; 0x465c <stdio_usb_getchar+0x18>
    4656:	eb 01       	movw	r28, r22
    4658:	3e db       	rcall	.-2436   	; 0x3cd6 <udi_cdc_getc>
    465a:	88 83       	st	Y, r24
    465c:	df 91       	pop	r29
    465e:	cf 91       	pop	r28
    4660:	08 95       	ret

00004662 <stdio_usb_enable>:
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	80 93 72 24 	sts	0x2472, r24	; 0x802472 <stdio_usb_interface_enable>
    4668:	08 95       	ret

0000466a <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    466a:	10 92 93 24 	sts	0x2493, r1	; 0x802493 <stdio_base>
    466e:	10 92 94 24 	sts	0x2494, r1	; 0x802494 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    4672:	8b e0       	ldi	r24, 0x0B	; 11
    4674:	93 e2       	ldi	r25, 0x23	; 35
    4676:	80 93 91 24 	sts	0x2491, r24	; 0x802491 <ptr_put>
    467a:	90 93 92 24 	sts	0x2492, r25	; 0x802492 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    467e:	82 e2       	ldi	r24, 0x22	; 34
    4680:	93 e2       	ldi	r25, 0x23	; 35
    4682:	80 93 8f 24 	sts	0x248F, r24	; 0x80248f <ptr_get>
    4686:	90 93 90 24 	sts	0x2490, r25	; 0x802490 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    468a:	9b dc       	rcall	.-1738   	; 0x3fc2 <udc_start>
    468c:	62 ef       	ldi	r22, 0xF2	; 242
    468e:	72 e2       	ldi	r23, 0x22	; 34
    4690:	8c e4       	ldi	r24, 0x4C	; 76
    4692:	93 e2       	ldi	r25, 0x23	; 35
    4694:	79 c0       	rjmp	.+242    	; 0x4788 <fdevopen>
    4696:	08 95       	ret

00004698 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    4698:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    469a:	80 91 93 24 	lds	r24, 0x2493	; 0x802493 <stdio_base>
    469e:	90 91 94 24 	lds	r25, 0x2494	; 0x802494 <stdio_base+0x1>
    46a2:	e0 91 91 24 	lds	r30, 0x2491	; 0x802491 <ptr_put>
    46a6:	f0 91 92 24 	lds	r31, 0x2492	; 0x802492 <ptr_put+0x1>
    46aa:	19 95       	eicall
    46ac:	99 23       	and	r25, r25
    46ae:	1c f0       	brlt	.+6      	; 0x46b6 <_write+0x1e>
		return -1;
	}
	return 1;
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	90 e0       	ldi	r25, 0x00	; 0
    46b4:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    46b6:	8f ef       	ldi	r24, 0xFF	; 255
    46b8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    46ba:	08 95       	ret

000046bc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    46bc:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    46c0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    46c2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    46c4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    46c8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    46ca:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    46ce:	08 95       	ret

000046d0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    46d0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    46d2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    46d4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    46d6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    46d8:	60 83       	st	Z, r22
	ret                             // Return to caller
    46da:	08 95       	ret

000046dc <__udivmodhi4>:
    46dc:	aa 1b       	sub	r26, r26
    46de:	bb 1b       	sub	r27, r27
    46e0:	51 e1       	ldi	r21, 0x11	; 17
    46e2:	07 c0       	rjmp	.+14     	; 0x46f2 <__udivmodhi4_ep>

000046e4 <__udivmodhi4_loop>:
    46e4:	aa 1f       	adc	r26, r26
    46e6:	bb 1f       	adc	r27, r27
    46e8:	a6 17       	cp	r26, r22
    46ea:	b7 07       	cpc	r27, r23
    46ec:	10 f0       	brcs	.+4      	; 0x46f2 <__udivmodhi4_ep>
    46ee:	a6 1b       	sub	r26, r22
    46f0:	b7 0b       	sbc	r27, r23

000046f2 <__udivmodhi4_ep>:
    46f2:	88 1f       	adc	r24, r24
    46f4:	99 1f       	adc	r25, r25
    46f6:	5a 95       	dec	r21
    46f8:	a9 f7       	brne	.-22     	; 0x46e4 <__udivmodhi4_loop>
    46fa:	80 95       	com	r24
    46fc:	90 95       	com	r25
    46fe:	bc 01       	movw	r22, r24
    4700:	cd 01       	movw	r24, r26
    4702:	08 95       	ret

00004704 <__udivmodsi4>:
    4704:	a1 e2       	ldi	r26, 0x21	; 33
    4706:	1a 2e       	mov	r1, r26
    4708:	aa 1b       	sub	r26, r26
    470a:	bb 1b       	sub	r27, r27
    470c:	fd 01       	movw	r30, r26
    470e:	0d c0       	rjmp	.+26     	; 0x472a <__udivmodsi4_ep>

00004710 <__udivmodsi4_loop>:
    4710:	aa 1f       	adc	r26, r26
    4712:	bb 1f       	adc	r27, r27
    4714:	ee 1f       	adc	r30, r30
    4716:	ff 1f       	adc	r31, r31
    4718:	a2 17       	cp	r26, r18
    471a:	b3 07       	cpc	r27, r19
    471c:	e4 07       	cpc	r30, r20
    471e:	f5 07       	cpc	r31, r21
    4720:	20 f0       	brcs	.+8      	; 0x472a <__udivmodsi4_ep>
    4722:	a2 1b       	sub	r26, r18
    4724:	b3 0b       	sbc	r27, r19
    4726:	e4 0b       	sbc	r30, r20
    4728:	f5 0b       	sbc	r31, r21

0000472a <__udivmodsi4_ep>:
    472a:	66 1f       	adc	r22, r22
    472c:	77 1f       	adc	r23, r23
    472e:	88 1f       	adc	r24, r24
    4730:	99 1f       	adc	r25, r25
    4732:	1a 94       	dec	r1
    4734:	69 f7       	brne	.-38     	; 0x4710 <__udivmodsi4_loop>
    4736:	60 95       	com	r22
    4738:	70 95       	com	r23
    473a:	80 95       	com	r24
    473c:	90 95       	com	r25
    473e:	9b 01       	movw	r18, r22
    4740:	ac 01       	movw	r20, r24
    4742:	bd 01       	movw	r22, r26
    4744:	cf 01       	movw	r24, r30
    4746:	08 95       	ret

00004748 <__tablejump2__>:
    4748:	ee 0f       	add	r30, r30
    474a:	ff 1f       	adc	r31, r31
    474c:	88 1f       	adc	r24, r24
    474e:	8b bf       	out	0x3b, r24	; 59
    4750:	07 90       	elpm	r0, Z+
    4752:	f6 91       	elpm	r31, Z
    4754:	e0 2d       	mov	r30, r0
    4756:	19 94       	eijmp

00004758 <__umulhisi3>:
    4758:	a2 9f       	mul	r26, r18
    475a:	b0 01       	movw	r22, r0
    475c:	b3 9f       	mul	r27, r19
    475e:	c0 01       	movw	r24, r0
    4760:	a3 9f       	mul	r26, r19
    4762:	70 0d       	add	r23, r0
    4764:	81 1d       	adc	r24, r1
    4766:	11 24       	eor	r1, r1
    4768:	91 1d       	adc	r25, r1
    476a:	b2 9f       	mul	r27, r18
    476c:	70 0d       	add	r23, r0
    476e:	81 1d       	adc	r24, r1
    4770:	11 24       	eor	r1, r1
    4772:	91 1d       	adc	r25, r1
    4774:	08 95       	ret

00004776 <memcpy>:
    4776:	fb 01       	movw	r30, r22
    4778:	dc 01       	movw	r26, r24
    477a:	02 c0       	rjmp	.+4      	; 0x4780 <memcpy+0xa>
    477c:	01 90       	ld	r0, Z+
    477e:	0d 92       	st	X+, r0
    4780:	41 50       	subi	r20, 0x01	; 1
    4782:	50 40       	sbci	r21, 0x00	; 0
    4784:	d8 f7       	brcc	.-10     	; 0x477c <memcpy+0x6>
    4786:	08 95       	ret

00004788 <fdevopen>:
    4788:	0f 93       	push	r16
    478a:	1f 93       	push	r17
    478c:	cf 93       	push	r28
    478e:	df 93       	push	r29
    4790:	00 97       	sbiw	r24, 0x00	; 0
    4792:	31 f4       	brne	.+12     	; 0x47a0 <fdevopen+0x18>
    4794:	61 15       	cp	r22, r1
    4796:	71 05       	cpc	r23, r1
    4798:	19 f4       	brne	.+6      	; 0x47a0 <fdevopen+0x18>
    479a:	80 e0       	ldi	r24, 0x00	; 0
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	39 c0       	rjmp	.+114    	; 0x4812 <fdevopen+0x8a>
    47a0:	8b 01       	movw	r16, r22
    47a2:	ec 01       	movw	r28, r24
    47a4:	6e e0       	ldi	r22, 0x0E	; 14
    47a6:	70 e0       	ldi	r23, 0x00	; 0
    47a8:	81 e0       	ldi	r24, 0x01	; 1
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	71 d2       	rcall	.+1250   	; 0x4c90 <calloc>
    47ae:	fc 01       	movw	r30, r24
    47b0:	89 2b       	or	r24, r25
    47b2:	99 f3       	breq	.-26     	; 0x479a <fdevopen+0x12>
    47b4:	80 e8       	ldi	r24, 0x80	; 128
    47b6:	83 83       	std	Z+3, r24	; 0x03
    47b8:	01 15       	cp	r16, r1
    47ba:	11 05       	cpc	r17, r1
    47bc:	71 f0       	breq	.+28     	; 0x47da <fdevopen+0x52>
    47be:	02 87       	std	Z+10, r16	; 0x0a
    47c0:	13 87       	std	Z+11, r17	; 0x0b
    47c2:	81 e8       	ldi	r24, 0x81	; 129
    47c4:	83 83       	std	Z+3, r24	; 0x03
    47c6:	80 91 95 24 	lds	r24, 0x2495	; 0x802495 <__iob>
    47ca:	90 91 96 24 	lds	r25, 0x2496	; 0x802496 <__iob+0x1>
    47ce:	89 2b       	or	r24, r25
    47d0:	21 f4       	brne	.+8      	; 0x47da <fdevopen+0x52>
    47d2:	e0 93 95 24 	sts	0x2495, r30	; 0x802495 <__iob>
    47d6:	f0 93 96 24 	sts	0x2496, r31	; 0x802496 <__iob+0x1>
    47da:	20 97       	sbiw	r28, 0x00	; 0
    47dc:	c9 f0       	breq	.+50     	; 0x4810 <fdevopen+0x88>
    47de:	c0 87       	std	Z+8, r28	; 0x08
    47e0:	d1 87       	std	Z+9, r29	; 0x09
    47e2:	83 81       	ldd	r24, Z+3	; 0x03
    47e4:	82 60       	ori	r24, 0x02	; 2
    47e6:	83 83       	std	Z+3, r24	; 0x03
    47e8:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <__iob+0x2>
    47ec:	90 91 98 24 	lds	r25, 0x2498	; 0x802498 <__iob+0x3>
    47f0:	89 2b       	or	r24, r25
    47f2:	71 f4       	brne	.+28     	; 0x4810 <fdevopen+0x88>
    47f4:	e0 93 97 24 	sts	0x2497, r30	; 0x802497 <__iob+0x2>
    47f8:	f0 93 98 24 	sts	0x2498, r31	; 0x802498 <__iob+0x3>
    47fc:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <__iob+0x4>
    4800:	90 91 9a 24 	lds	r25, 0x249A	; 0x80249a <__iob+0x5>
    4804:	89 2b       	or	r24, r25
    4806:	21 f4       	brne	.+8      	; 0x4810 <fdevopen+0x88>
    4808:	e0 93 99 24 	sts	0x2499, r30	; 0x802499 <__iob+0x4>
    480c:	f0 93 9a 24 	sts	0x249A, r31	; 0x80249a <__iob+0x5>
    4810:	cf 01       	movw	r24, r30
    4812:	df 91       	pop	r29
    4814:	cf 91       	pop	r28
    4816:	1f 91       	pop	r17
    4818:	0f 91       	pop	r16
    481a:	08 95       	ret

0000481c <printf>:
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	cd b7       	in	r28, 0x3d	; 61
    4822:	de b7       	in	r29, 0x3e	; 62
    4824:	ae 01       	movw	r20, r28
    4826:	4a 5f       	subi	r20, 0xFA	; 250
    4828:	5f 4f       	sbci	r21, 0xFF	; 255
    482a:	fa 01       	movw	r30, r20
    482c:	61 91       	ld	r22, Z+
    482e:	71 91       	ld	r23, Z+
    4830:	af 01       	movw	r20, r30
    4832:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <__iob+0x2>
    4836:	90 91 98 24 	lds	r25, 0x2498	; 0x802498 <__iob+0x3>
    483a:	33 d0       	rcall	.+102    	; 0x48a2 <vfprintf>
    483c:	df 91       	pop	r29
    483e:	cf 91       	pop	r28
    4840:	08 95       	ret

00004842 <puts>:
    4842:	0f 93       	push	r16
    4844:	1f 93       	push	r17
    4846:	cf 93       	push	r28
    4848:	df 93       	push	r29
    484a:	e0 91 97 24 	lds	r30, 0x2497	; 0x802497 <__iob+0x2>
    484e:	f0 91 98 24 	lds	r31, 0x2498	; 0x802498 <__iob+0x3>
    4852:	23 81       	ldd	r18, Z+3	; 0x03
    4854:	21 ff       	sbrs	r18, 1
    4856:	1b c0       	rjmp	.+54     	; 0x488e <puts+0x4c>
    4858:	8c 01       	movw	r16, r24
    485a:	d0 e0       	ldi	r29, 0x00	; 0
    485c:	c0 e0       	ldi	r28, 0x00	; 0
    485e:	f8 01       	movw	r30, r16
    4860:	81 91       	ld	r24, Z+
    4862:	8f 01       	movw	r16, r30
    4864:	60 91 97 24 	lds	r22, 0x2497	; 0x802497 <__iob+0x2>
    4868:	70 91 98 24 	lds	r23, 0x2498	; 0x802498 <__iob+0x3>
    486c:	db 01       	movw	r26, r22
    486e:	18 96       	adiw	r26, 0x08	; 8
    4870:	ed 91       	ld	r30, X+
    4872:	fc 91       	ld	r31, X
    4874:	19 97       	sbiw	r26, 0x09	; 9
    4876:	88 23       	and	r24, r24
    4878:	31 f0       	breq	.+12     	; 0x4886 <puts+0x44>
    487a:	19 95       	eicall
    487c:	89 2b       	or	r24, r25
    487e:	79 f3       	breq	.-34     	; 0x485e <puts+0x1c>
    4880:	df ef       	ldi	r29, 0xFF	; 255
    4882:	cf ef       	ldi	r28, 0xFF	; 255
    4884:	ec cf       	rjmp	.-40     	; 0x485e <puts+0x1c>
    4886:	8a e0       	ldi	r24, 0x0A	; 10
    4888:	19 95       	eicall
    488a:	89 2b       	or	r24, r25
    488c:	19 f0       	breq	.+6      	; 0x4894 <puts+0x52>
    488e:	8f ef       	ldi	r24, 0xFF	; 255
    4890:	9f ef       	ldi	r25, 0xFF	; 255
    4892:	02 c0       	rjmp	.+4      	; 0x4898 <puts+0x56>
    4894:	8d 2f       	mov	r24, r29
    4896:	9c 2f       	mov	r25, r28
    4898:	df 91       	pop	r29
    489a:	cf 91       	pop	r28
    489c:	1f 91       	pop	r17
    489e:	0f 91       	pop	r16
    48a0:	08 95       	ret

000048a2 <vfprintf>:
    48a2:	2f 92       	push	r2
    48a4:	3f 92       	push	r3
    48a6:	4f 92       	push	r4
    48a8:	5f 92       	push	r5
    48aa:	6f 92       	push	r6
    48ac:	7f 92       	push	r7
    48ae:	8f 92       	push	r8
    48b0:	9f 92       	push	r9
    48b2:	af 92       	push	r10
    48b4:	bf 92       	push	r11
    48b6:	cf 92       	push	r12
    48b8:	df 92       	push	r13
    48ba:	ef 92       	push	r14
    48bc:	ff 92       	push	r15
    48be:	0f 93       	push	r16
    48c0:	1f 93       	push	r17
    48c2:	cf 93       	push	r28
    48c4:	df 93       	push	r29
    48c6:	cd b7       	in	r28, 0x3d	; 61
    48c8:	de b7       	in	r29, 0x3e	; 62
    48ca:	2b 97       	sbiw	r28, 0x0b	; 11
    48cc:	cd bf       	out	0x3d, r28	; 61
    48ce:	de bf       	out	0x3e, r29	; 62
    48d0:	6c 01       	movw	r12, r24
    48d2:	7b 01       	movw	r14, r22
    48d4:	8a 01       	movw	r16, r20
    48d6:	fc 01       	movw	r30, r24
    48d8:	16 82       	std	Z+6, r1	; 0x06
    48da:	17 82       	std	Z+7, r1	; 0x07
    48dc:	83 81       	ldd	r24, Z+3	; 0x03
    48de:	81 ff       	sbrs	r24, 1
    48e0:	bf c1       	rjmp	.+894    	; 0x4c60 <vfprintf+0x3be>
    48e2:	ce 01       	movw	r24, r28
    48e4:	01 96       	adiw	r24, 0x01	; 1
    48e6:	3c 01       	movw	r6, r24
    48e8:	f6 01       	movw	r30, r12
    48ea:	93 81       	ldd	r25, Z+3	; 0x03
    48ec:	f7 01       	movw	r30, r14
    48ee:	93 fd       	sbrc	r25, 3
    48f0:	85 91       	lpm	r24, Z+
    48f2:	93 ff       	sbrs	r25, 3
    48f4:	81 91       	ld	r24, Z+
    48f6:	7f 01       	movw	r14, r30
    48f8:	88 23       	and	r24, r24
    48fa:	09 f4       	brne	.+2      	; 0x48fe <vfprintf+0x5c>
    48fc:	ad c1       	rjmp	.+858    	; 0x4c58 <vfprintf+0x3b6>
    48fe:	85 32       	cpi	r24, 0x25	; 37
    4900:	39 f4       	brne	.+14     	; 0x4910 <vfprintf+0x6e>
    4902:	93 fd       	sbrc	r25, 3
    4904:	85 91       	lpm	r24, Z+
    4906:	93 ff       	sbrs	r25, 3
    4908:	81 91       	ld	r24, Z+
    490a:	7f 01       	movw	r14, r30
    490c:	85 32       	cpi	r24, 0x25	; 37
    490e:	21 f4       	brne	.+8      	; 0x4918 <vfprintf+0x76>
    4910:	b6 01       	movw	r22, r12
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	15 d3       	rcall	.+1578   	; 0x4f40 <fputc>
    4916:	e8 cf       	rjmp	.-48     	; 0x48e8 <vfprintf+0x46>
    4918:	91 2c       	mov	r9, r1
    491a:	21 2c       	mov	r2, r1
    491c:	31 2c       	mov	r3, r1
    491e:	ff e1       	ldi	r31, 0x1F	; 31
    4920:	f3 15       	cp	r31, r3
    4922:	d8 f0       	brcs	.+54     	; 0x495a <vfprintf+0xb8>
    4924:	8b 32       	cpi	r24, 0x2B	; 43
    4926:	79 f0       	breq	.+30     	; 0x4946 <vfprintf+0xa4>
    4928:	38 f4       	brcc	.+14     	; 0x4938 <vfprintf+0x96>
    492a:	80 32       	cpi	r24, 0x20	; 32
    492c:	79 f0       	breq	.+30     	; 0x494c <vfprintf+0xaa>
    492e:	83 32       	cpi	r24, 0x23	; 35
    4930:	a1 f4       	brne	.+40     	; 0x495a <vfprintf+0xb8>
    4932:	23 2d       	mov	r18, r3
    4934:	20 61       	ori	r18, 0x10	; 16
    4936:	1d c0       	rjmp	.+58     	; 0x4972 <vfprintf+0xd0>
    4938:	8d 32       	cpi	r24, 0x2D	; 45
    493a:	61 f0       	breq	.+24     	; 0x4954 <vfprintf+0xb2>
    493c:	80 33       	cpi	r24, 0x30	; 48
    493e:	69 f4       	brne	.+26     	; 0x495a <vfprintf+0xb8>
    4940:	23 2d       	mov	r18, r3
    4942:	21 60       	ori	r18, 0x01	; 1
    4944:	16 c0       	rjmp	.+44     	; 0x4972 <vfprintf+0xd0>
    4946:	83 2d       	mov	r24, r3
    4948:	82 60       	ori	r24, 0x02	; 2
    494a:	38 2e       	mov	r3, r24
    494c:	e3 2d       	mov	r30, r3
    494e:	e4 60       	ori	r30, 0x04	; 4
    4950:	3e 2e       	mov	r3, r30
    4952:	2a c0       	rjmp	.+84     	; 0x49a8 <vfprintf+0x106>
    4954:	f3 2d       	mov	r31, r3
    4956:	f8 60       	ori	r31, 0x08	; 8
    4958:	1d c0       	rjmp	.+58     	; 0x4994 <vfprintf+0xf2>
    495a:	37 fc       	sbrc	r3, 7
    495c:	2d c0       	rjmp	.+90     	; 0x49b8 <vfprintf+0x116>
    495e:	20 ed       	ldi	r18, 0xD0	; 208
    4960:	28 0f       	add	r18, r24
    4962:	2a 30       	cpi	r18, 0x0A	; 10
    4964:	40 f0       	brcs	.+16     	; 0x4976 <vfprintf+0xd4>
    4966:	8e 32       	cpi	r24, 0x2E	; 46
    4968:	b9 f4       	brne	.+46     	; 0x4998 <vfprintf+0xf6>
    496a:	36 fc       	sbrc	r3, 6
    496c:	75 c1       	rjmp	.+746    	; 0x4c58 <vfprintf+0x3b6>
    496e:	23 2d       	mov	r18, r3
    4970:	20 64       	ori	r18, 0x40	; 64
    4972:	32 2e       	mov	r3, r18
    4974:	19 c0       	rjmp	.+50     	; 0x49a8 <vfprintf+0x106>
    4976:	36 fe       	sbrs	r3, 6
    4978:	06 c0       	rjmp	.+12     	; 0x4986 <vfprintf+0xe4>
    497a:	8a e0       	ldi	r24, 0x0A	; 10
    497c:	98 9e       	mul	r9, r24
    497e:	20 0d       	add	r18, r0
    4980:	11 24       	eor	r1, r1
    4982:	92 2e       	mov	r9, r18
    4984:	11 c0       	rjmp	.+34     	; 0x49a8 <vfprintf+0x106>
    4986:	ea e0       	ldi	r30, 0x0A	; 10
    4988:	2e 9e       	mul	r2, r30
    498a:	20 0d       	add	r18, r0
    498c:	11 24       	eor	r1, r1
    498e:	22 2e       	mov	r2, r18
    4990:	f3 2d       	mov	r31, r3
    4992:	f0 62       	ori	r31, 0x20	; 32
    4994:	3f 2e       	mov	r3, r31
    4996:	08 c0       	rjmp	.+16     	; 0x49a8 <vfprintf+0x106>
    4998:	8c 36       	cpi	r24, 0x6C	; 108
    499a:	21 f4       	brne	.+8      	; 0x49a4 <vfprintf+0x102>
    499c:	83 2d       	mov	r24, r3
    499e:	80 68       	ori	r24, 0x80	; 128
    49a0:	38 2e       	mov	r3, r24
    49a2:	02 c0       	rjmp	.+4      	; 0x49a8 <vfprintf+0x106>
    49a4:	88 36       	cpi	r24, 0x68	; 104
    49a6:	41 f4       	brne	.+16     	; 0x49b8 <vfprintf+0x116>
    49a8:	f7 01       	movw	r30, r14
    49aa:	93 fd       	sbrc	r25, 3
    49ac:	85 91       	lpm	r24, Z+
    49ae:	93 ff       	sbrs	r25, 3
    49b0:	81 91       	ld	r24, Z+
    49b2:	7f 01       	movw	r14, r30
    49b4:	81 11       	cpse	r24, r1
    49b6:	b3 cf       	rjmp	.-154    	; 0x491e <vfprintf+0x7c>
    49b8:	98 2f       	mov	r25, r24
    49ba:	9f 7d       	andi	r25, 0xDF	; 223
    49bc:	95 54       	subi	r25, 0x45	; 69
    49be:	93 30       	cpi	r25, 0x03	; 3
    49c0:	28 f4       	brcc	.+10     	; 0x49cc <vfprintf+0x12a>
    49c2:	0c 5f       	subi	r16, 0xFC	; 252
    49c4:	1f 4f       	sbci	r17, 0xFF	; 255
    49c6:	9f e3       	ldi	r25, 0x3F	; 63
    49c8:	99 83       	std	Y+1, r25	; 0x01
    49ca:	0d c0       	rjmp	.+26     	; 0x49e6 <vfprintf+0x144>
    49cc:	83 36       	cpi	r24, 0x63	; 99
    49ce:	31 f0       	breq	.+12     	; 0x49dc <vfprintf+0x13a>
    49d0:	83 37       	cpi	r24, 0x73	; 115
    49d2:	71 f0       	breq	.+28     	; 0x49f0 <vfprintf+0x14e>
    49d4:	83 35       	cpi	r24, 0x53	; 83
    49d6:	09 f0       	breq	.+2      	; 0x49da <vfprintf+0x138>
    49d8:	55 c0       	rjmp	.+170    	; 0x4a84 <vfprintf+0x1e2>
    49da:	20 c0       	rjmp	.+64     	; 0x4a1c <vfprintf+0x17a>
    49dc:	f8 01       	movw	r30, r16
    49de:	80 81       	ld	r24, Z
    49e0:	89 83       	std	Y+1, r24	; 0x01
    49e2:	0e 5f       	subi	r16, 0xFE	; 254
    49e4:	1f 4f       	sbci	r17, 0xFF	; 255
    49e6:	88 24       	eor	r8, r8
    49e8:	83 94       	inc	r8
    49ea:	91 2c       	mov	r9, r1
    49ec:	53 01       	movw	r10, r6
    49ee:	12 c0       	rjmp	.+36     	; 0x4a14 <vfprintf+0x172>
    49f0:	28 01       	movw	r4, r16
    49f2:	f2 e0       	ldi	r31, 0x02	; 2
    49f4:	4f 0e       	add	r4, r31
    49f6:	51 1c       	adc	r5, r1
    49f8:	f8 01       	movw	r30, r16
    49fa:	a0 80       	ld	r10, Z
    49fc:	b1 80       	ldd	r11, Z+1	; 0x01
    49fe:	36 fe       	sbrs	r3, 6
    4a00:	03 c0       	rjmp	.+6      	; 0x4a08 <vfprintf+0x166>
    4a02:	69 2d       	mov	r22, r9
    4a04:	70 e0       	ldi	r23, 0x00	; 0
    4a06:	02 c0       	rjmp	.+4      	; 0x4a0c <vfprintf+0x16a>
    4a08:	6f ef       	ldi	r22, 0xFF	; 255
    4a0a:	7f ef       	ldi	r23, 0xFF	; 255
    4a0c:	c5 01       	movw	r24, r10
    4a0e:	8d d2       	rcall	.+1306   	; 0x4f2a <strnlen>
    4a10:	4c 01       	movw	r8, r24
    4a12:	82 01       	movw	r16, r4
    4a14:	f3 2d       	mov	r31, r3
    4a16:	ff 77       	andi	r31, 0x7F	; 127
    4a18:	3f 2e       	mov	r3, r31
    4a1a:	15 c0       	rjmp	.+42     	; 0x4a46 <vfprintf+0x1a4>
    4a1c:	28 01       	movw	r4, r16
    4a1e:	22 e0       	ldi	r18, 0x02	; 2
    4a20:	42 0e       	add	r4, r18
    4a22:	51 1c       	adc	r5, r1
    4a24:	f8 01       	movw	r30, r16
    4a26:	a0 80       	ld	r10, Z
    4a28:	b1 80       	ldd	r11, Z+1	; 0x01
    4a2a:	36 fe       	sbrs	r3, 6
    4a2c:	03 c0       	rjmp	.+6      	; 0x4a34 <vfprintf+0x192>
    4a2e:	69 2d       	mov	r22, r9
    4a30:	70 e0       	ldi	r23, 0x00	; 0
    4a32:	02 c0       	rjmp	.+4      	; 0x4a38 <vfprintf+0x196>
    4a34:	6f ef       	ldi	r22, 0xFF	; 255
    4a36:	7f ef       	ldi	r23, 0xFF	; 255
    4a38:	c5 01       	movw	r24, r10
    4a3a:	65 d2       	rcall	.+1226   	; 0x4f06 <strnlen_P>
    4a3c:	4c 01       	movw	r8, r24
    4a3e:	f3 2d       	mov	r31, r3
    4a40:	f0 68       	ori	r31, 0x80	; 128
    4a42:	3f 2e       	mov	r3, r31
    4a44:	82 01       	movw	r16, r4
    4a46:	33 fc       	sbrc	r3, 3
    4a48:	19 c0       	rjmp	.+50     	; 0x4a7c <vfprintf+0x1da>
    4a4a:	82 2d       	mov	r24, r2
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	88 16       	cp	r8, r24
    4a50:	99 06       	cpc	r9, r25
    4a52:	a0 f4       	brcc	.+40     	; 0x4a7c <vfprintf+0x1da>
    4a54:	b6 01       	movw	r22, r12
    4a56:	80 e2       	ldi	r24, 0x20	; 32
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	72 d2       	rcall	.+1252   	; 0x4f40 <fputc>
    4a5c:	2a 94       	dec	r2
    4a5e:	f5 cf       	rjmp	.-22     	; 0x4a4a <vfprintf+0x1a8>
    4a60:	f5 01       	movw	r30, r10
    4a62:	37 fc       	sbrc	r3, 7
    4a64:	85 91       	lpm	r24, Z+
    4a66:	37 fe       	sbrs	r3, 7
    4a68:	81 91       	ld	r24, Z+
    4a6a:	5f 01       	movw	r10, r30
    4a6c:	b6 01       	movw	r22, r12
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	67 d2       	rcall	.+1230   	; 0x4f40 <fputc>
    4a72:	21 10       	cpse	r2, r1
    4a74:	2a 94       	dec	r2
    4a76:	21 e0       	ldi	r18, 0x01	; 1
    4a78:	82 1a       	sub	r8, r18
    4a7a:	91 08       	sbc	r9, r1
    4a7c:	81 14       	cp	r8, r1
    4a7e:	91 04       	cpc	r9, r1
    4a80:	79 f7       	brne	.-34     	; 0x4a60 <vfprintf+0x1be>
    4a82:	e1 c0       	rjmp	.+450    	; 0x4c46 <vfprintf+0x3a4>
    4a84:	84 36       	cpi	r24, 0x64	; 100
    4a86:	11 f0       	breq	.+4      	; 0x4a8c <vfprintf+0x1ea>
    4a88:	89 36       	cpi	r24, 0x69	; 105
    4a8a:	39 f5       	brne	.+78     	; 0x4ada <vfprintf+0x238>
    4a8c:	f8 01       	movw	r30, r16
    4a8e:	37 fe       	sbrs	r3, 7
    4a90:	07 c0       	rjmp	.+14     	; 0x4aa0 <vfprintf+0x1fe>
    4a92:	60 81       	ld	r22, Z
    4a94:	71 81       	ldd	r23, Z+1	; 0x01
    4a96:	82 81       	ldd	r24, Z+2	; 0x02
    4a98:	93 81       	ldd	r25, Z+3	; 0x03
    4a9a:	0c 5f       	subi	r16, 0xFC	; 252
    4a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a9e:	08 c0       	rjmp	.+16     	; 0x4ab0 <vfprintf+0x20e>
    4aa0:	60 81       	ld	r22, Z
    4aa2:	71 81       	ldd	r23, Z+1	; 0x01
    4aa4:	07 2e       	mov	r0, r23
    4aa6:	00 0c       	add	r0, r0
    4aa8:	88 0b       	sbc	r24, r24
    4aaa:	99 0b       	sbc	r25, r25
    4aac:	0e 5f       	subi	r16, 0xFE	; 254
    4aae:	1f 4f       	sbci	r17, 0xFF	; 255
    4ab0:	f3 2d       	mov	r31, r3
    4ab2:	ff 76       	andi	r31, 0x6F	; 111
    4ab4:	3f 2e       	mov	r3, r31
    4ab6:	97 ff       	sbrs	r25, 7
    4ab8:	09 c0       	rjmp	.+18     	; 0x4acc <vfprintf+0x22a>
    4aba:	90 95       	com	r25
    4abc:	80 95       	com	r24
    4abe:	70 95       	com	r23
    4ac0:	61 95       	neg	r22
    4ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac8:	f0 68       	ori	r31, 0x80	; 128
    4aca:	3f 2e       	mov	r3, r31
    4acc:	2a e0       	ldi	r18, 0x0A	; 10
    4ace:	30 e0       	ldi	r19, 0x00	; 0
    4ad0:	a3 01       	movw	r20, r6
    4ad2:	72 d2       	rcall	.+1252   	; 0x4fb8 <__ultoa_invert>
    4ad4:	88 2e       	mov	r8, r24
    4ad6:	86 18       	sub	r8, r6
    4ad8:	44 c0       	rjmp	.+136    	; 0x4b62 <vfprintf+0x2c0>
    4ada:	85 37       	cpi	r24, 0x75	; 117
    4adc:	31 f4       	brne	.+12     	; 0x4aea <vfprintf+0x248>
    4ade:	23 2d       	mov	r18, r3
    4ae0:	2f 7e       	andi	r18, 0xEF	; 239
    4ae2:	b2 2e       	mov	r11, r18
    4ae4:	2a e0       	ldi	r18, 0x0A	; 10
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	25 c0       	rjmp	.+74     	; 0x4b34 <vfprintf+0x292>
    4aea:	93 2d       	mov	r25, r3
    4aec:	99 7f       	andi	r25, 0xF9	; 249
    4aee:	b9 2e       	mov	r11, r25
    4af0:	8f 36       	cpi	r24, 0x6F	; 111
    4af2:	c1 f0       	breq	.+48     	; 0x4b24 <vfprintf+0x282>
    4af4:	18 f4       	brcc	.+6      	; 0x4afc <vfprintf+0x25a>
    4af6:	88 35       	cpi	r24, 0x58	; 88
    4af8:	79 f0       	breq	.+30     	; 0x4b18 <vfprintf+0x276>
    4afa:	ae c0       	rjmp	.+348    	; 0x4c58 <vfprintf+0x3b6>
    4afc:	80 37       	cpi	r24, 0x70	; 112
    4afe:	19 f0       	breq	.+6      	; 0x4b06 <vfprintf+0x264>
    4b00:	88 37       	cpi	r24, 0x78	; 120
    4b02:	21 f0       	breq	.+8      	; 0x4b0c <vfprintf+0x26a>
    4b04:	a9 c0       	rjmp	.+338    	; 0x4c58 <vfprintf+0x3b6>
    4b06:	e9 2f       	mov	r30, r25
    4b08:	e0 61       	ori	r30, 0x10	; 16
    4b0a:	be 2e       	mov	r11, r30
    4b0c:	b4 fe       	sbrs	r11, 4
    4b0e:	0d c0       	rjmp	.+26     	; 0x4b2a <vfprintf+0x288>
    4b10:	fb 2d       	mov	r31, r11
    4b12:	f4 60       	ori	r31, 0x04	; 4
    4b14:	bf 2e       	mov	r11, r31
    4b16:	09 c0       	rjmp	.+18     	; 0x4b2a <vfprintf+0x288>
    4b18:	34 fe       	sbrs	r3, 4
    4b1a:	0a c0       	rjmp	.+20     	; 0x4b30 <vfprintf+0x28e>
    4b1c:	29 2f       	mov	r18, r25
    4b1e:	26 60       	ori	r18, 0x06	; 6
    4b20:	b2 2e       	mov	r11, r18
    4b22:	06 c0       	rjmp	.+12     	; 0x4b30 <vfprintf+0x28e>
    4b24:	28 e0       	ldi	r18, 0x08	; 8
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	05 c0       	rjmp	.+10     	; 0x4b34 <vfprintf+0x292>
    4b2a:	20 e1       	ldi	r18, 0x10	; 16
    4b2c:	30 e0       	ldi	r19, 0x00	; 0
    4b2e:	02 c0       	rjmp	.+4      	; 0x4b34 <vfprintf+0x292>
    4b30:	20 e1       	ldi	r18, 0x10	; 16
    4b32:	32 e0       	ldi	r19, 0x02	; 2
    4b34:	f8 01       	movw	r30, r16
    4b36:	b7 fe       	sbrs	r11, 7
    4b38:	07 c0       	rjmp	.+14     	; 0x4b48 <vfprintf+0x2a6>
    4b3a:	60 81       	ld	r22, Z
    4b3c:	71 81       	ldd	r23, Z+1	; 0x01
    4b3e:	82 81       	ldd	r24, Z+2	; 0x02
    4b40:	93 81       	ldd	r25, Z+3	; 0x03
    4b42:	0c 5f       	subi	r16, 0xFC	; 252
    4b44:	1f 4f       	sbci	r17, 0xFF	; 255
    4b46:	06 c0       	rjmp	.+12     	; 0x4b54 <vfprintf+0x2b2>
    4b48:	60 81       	ld	r22, Z
    4b4a:	71 81       	ldd	r23, Z+1	; 0x01
    4b4c:	80 e0       	ldi	r24, 0x00	; 0
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	0e 5f       	subi	r16, 0xFE	; 254
    4b52:	1f 4f       	sbci	r17, 0xFF	; 255
    4b54:	a3 01       	movw	r20, r6
    4b56:	30 d2       	rcall	.+1120   	; 0x4fb8 <__ultoa_invert>
    4b58:	88 2e       	mov	r8, r24
    4b5a:	86 18       	sub	r8, r6
    4b5c:	fb 2d       	mov	r31, r11
    4b5e:	ff 77       	andi	r31, 0x7F	; 127
    4b60:	3f 2e       	mov	r3, r31
    4b62:	36 fe       	sbrs	r3, 6
    4b64:	0d c0       	rjmp	.+26     	; 0x4b80 <vfprintf+0x2de>
    4b66:	23 2d       	mov	r18, r3
    4b68:	2e 7f       	andi	r18, 0xFE	; 254
    4b6a:	a2 2e       	mov	r10, r18
    4b6c:	89 14       	cp	r8, r9
    4b6e:	58 f4       	brcc	.+22     	; 0x4b86 <vfprintf+0x2e4>
    4b70:	34 fe       	sbrs	r3, 4
    4b72:	0b c0       	rjmp	.+22     	; 0x4b8a <vfprintf+0x2e8>
    4b74:	32 fc       	sbrc	r3, 2
    4b76:	09 c0       	rjmp	.+18     	; 0x4b8a <vfprintf+0x2e8>
    4b78:	83 2d       	mov	r24, r3
    4b7a:	8e 7e       	andi	r24, 0xEE	; 238
    4b7c:	a8 2e       	mov	r10, r24
    4b7e:	05 c0       	rjmp	.+10     	; 0x4b8a <vfprintf+0x2e8>
    4b80:	b8 2c       	mov	r11, r8
    4b82:	a3 2c       	mov	r10, r3
    4b84:	03 c0       	rjmp	.+6      	; 0x4b8c <vfprintf+0x2ea>
    4b86:	b8 2c       	mov	r11, r8
    4b88:	01 c0       	rjmp	.+2      	; 0x4b8c <vfprintf+0x2ea>
    4b8a:	b9 2c       	mov	r11, r9
    4b8c:	a4 fe       	sbrs	r10, 4
    4b8e:	0f c0       	rjmp	.+30     	; 0x4bae <vfprintf+0x30c>
    4b90:	fe 01       	movw	r30, r28
    4b92:	e8 0d       	add	r30, r8
    4b94:	f1 1d       	adc	r31, r1
    4b96:	80 81       	ld	r24, Z
    4b98:	80 33       	cpi	r24, 0x30	; 48
    4b9a:	21 f4       	brne	.+8      	; 0x4ba4 <vfprintf+0x302>
    4b9c:	9a 2d       	mov	r25, r10
    4b9e:	99 7e       	andi	r25, 0xE9	; 233
    4ba0:	a9 2e       	mov	r10, r25
    4ba2:	09 c0       	rjmp	.+18     	; 0x4bb6 <vfprintf+0x314>
    4ba4:	a2 fe       	sbrs	r10, 2
    4ba6:	06 c0       	rjmp	.+12     	; 0x4bb4 <vfprintf+0x312>
    4ba8:	b3 94       	inc	r11
    4baa:	b3 94       	inc	r11
    4bac:	04 c0       	rjmp	.+8      	; 0x4bb6 <vfprintf+0x314>
    4bae:	8a 2d       	mov	r24, r10
    4bb0:	86 78       	andi	r24, 0x86	; 134
    4bb2:	09 f0       	breq	.+2      	; 0x4bb6 <vfprintf+0x314>
    4bb4:	b3 94       	inc	r11
    4bb6:	a3 fc       	sbrc	r10, 3
    4bb8:	10 c0       	rjmp	.+32     	; 0x4bda <vfprintf+0x338>
    4bba:	a0 fe       	sbrs	r10, 0
    4bbc:	06 c0       	rjmp	.+12     	; 0x4bca <vfprintf+0x328>
    4bbe:	b2 14       	cp	r11, r2
    4bc0:	80 f4       	brcc	.+32     	; 0x4be2 <vfprintf+0x340>
    4bc2:	28 0c       	add	r2, r8
    4bc4:	92 2c       	mov	r9, r2
    4bc6:	9b 18       	sub	r9, r11
    4bc8:	0d c0       	rjmp	.+26     	; 0x4be4 <vfprintf+0x342>
    4bca:	b2 14       	cp	r11, r2
    4bcc:	58 f4       	brcc	.+22     	; 0x4be4 <vfprintf+0x342>
    4bce:	b6 01       	movw	r22, r12
    4bd0:	80 e2       	ldi	r24, 0x20	; 32
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	b5 d1       	rcall	.+874    	; 0x4f40 <fputc>
    4bd6:	b3 94       	inc	r11
    4bd8:	f8 cf       	rjmp	.-16     	; 0x4bca <vfprintf+0x328>
    4bda:	b2 14       	cp	r11, r2
    4bdc:	18 f4       	brcc	.+6      	; 0x4be4 <vfprintf+0x342>
    4bde:	2b 18       	sub	r2, r11
    4be0:	02 c0       	rjmp	.+4      	; 0x4be6 <vfprintf+0x344>
    4be2:	98 2c       	mov	r9, r8
    4be4:	21 2c       	mov	r2, r1
    4be6:	a4 fe       	sbrs	r10, 4
    4be8:	0f c0       	rjmp	.+30     	; 0x4c08 <vfprintf+0x366>
    4bea:	b6 01       	movw	r22, r12
    4bec:	80 e3       	ldi	r24, 0x30	; 48
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	a7 d1       	rcall	.+846    	; 0x4f40 <fputc>
    4bf2:	a2 fe       	sbrs	r10, 2
    4bf4:	16 c0       	rjmp	.+44     	; 0x4c22 <vfprintf+0x380>
    4bf6:	a1 fc       	sbrc	r10, 1
    4bf8:	03 c0       	rjmp	.+6      	; 0x4c00 <vfprintf+0x35e>
    4bfa:	88 e7       	ldi	r24, 0x78	; 120
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	02 c0       	rjmp	.+4      	; 0x4c04 <vfprintf+0x362>
    4c00:	88 e5       	ldi	r24, 0x58	; 88
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	b6 01       	movw	r22, r12
    4c06:	0c c0       	rjmp	.+24     	; 0x4c20 <vfprintf+0x37e>
    4c08:	8a 2d       	mov	r24, r10
    4c0a:	86 78       	andi	r24, 0x86	; 134
    4c0c:	51 f0       	breq	.+20     	; 0x4c22 <vfprintf+0x380>
    4c0e:	a1 fe       	sbrs	r10, 1
    4c10:	02 c0       	rjmp	.+4      	; 0x4c16 <vfprintf+0x374>
    4c12:	8b e2       	ldi	r24, 0x2B	; 43
    4c14:	01 c0       	rjmp	.+2      	; 0x4c18 <vfprintf+0x376>
    4c16:	80 e2       	ldi	r24, 0x20	; 32
    4c18:	a7 fc       	sbrc	r10, 7
    4c1a:	8d e2       	ldi	r24, 0x2D	; 45
    4c1c:	b6 01       	movw	r22, r12
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	8f d1       	rcall	.+798    	; 0x4f40 <fputc>
    4c22:	89 14       	cp	r8, r9
    4c24:	30 f4       	brcc	.+12     	; 0x4c32 <vfprintf+0x390>
    4c26:	b6 01       	movw	r22, r12
    4c28:	80 e3       	ldi	r24, 0x30	; 48
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	89 d1       	rcall	.+786    	; 0x4f40 <fputc>
    4c2e:	9a 94       	dec	r9
    4c30:	f8 cf       	rjmp	.-16     	; 0x4c22 <vfprintf+0x380>
    4c32:	8a 94       	dec	r8
    4c34:	f3 01       	movw	r30, r6
    4c36:	e8 0d       	add	r30, r8
    4c38:	f1 1d       	adc	r31, r1
    4c3a:	80 81       	ld	r24, Z
    4c3c:	b6 01       	movw	r22, r12
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	7f d1       	rcall	.+766    	; 0x4f40 <fputc>
    4c42:	81 10       	cpse	r8, r1
    4c44:	f6 cf       	rjmp	.-20     	; 0x4c32 <vfprintf+0x390>
    4c46:	22 20       	and	r2, r2
    4c48:	09 f4       	brne	.+2      	; 0x4c4c <vfprintf+0x3aa>
    4c4a:	4e ce       	rjmp	.-868    	; 0x48e8 <vfprintf+0x46>
    4c4c:	b6 01       	movw	r22, r12
    4c4e:	80 e2       	ldi	r24, 0x20	; 32
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	76 d1       	rcall	.+748    	; 0x4f40 <fputc>
    4c54:	2a 94       	dec	r2
    4c56:	f7 cf       	rjmp	.-18     	; 0x4c46 <vfprintf+0x3a4>
    4c58:	f6 01       	movw	r30, r12
    4c5a:	86 81       	ldd	r24, Z+6	; 0x06
    4c5c:	97 81       	ldd	r25, Z+7	; 0x07
    4c5e:	02 c0       	rjmp	.+4      	; 0x4c64 <vfprintf+0x3c2>
    4c60:	8f ef       	ldi	r24, 0xFF	; 255
    4c62:	9f ef       	ldi	r25, 0xFF	; 255
    4c64:	2b 96       	adiw	r28, 0x0b	; 11
    4c66:	cd bf       	out	0x3d, r28	; 61
    4c68:	de bf       	out	0x3e, r29	; 62
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	1f 91       	pop	r17
    4c70:	0f 91       	pop	r16
    4c72:	ff 90       	pop	r15
    4c74:	ef 90       	pop	r14
    4c76:	df 90       	pop	r13
    4c78:	cf 90       	pop	r12
    4c7a:	bf 90       	pop	r11
    4c7c:	af 90       	pop	r10
    4c7e:	9f 90       	pop	r9
    4c80:	8f 90       	pop	r8
    4c82:	7f 90       	pop	r7
    4c84:	6f 90       	pop	r6
    4c86:	5f 90       	pop	r5
    4c88:	4f 90       	pop	r4
    4c8a:	3f 90       	pop	r3
    4c8c:	2f 90       	pop	r2
    4c8e:	08 95       	ret

00004c90 <calloc>:
    4c90:	0f 93       	push	r16
    4c92:	1f 93       	push	r17
    4c94:	cf 93       	push	r28
    4c96:	df 93       	push	r29
    4c98:	86 9f       	mul	r24, r22
    4c9a:	80 01       	movw	r16, r0
    4c9c:	87 9f       	mul	r24, r23
    4c9e:	10 0d       	add	r17, r0
    4ca0:	96 9f       	mul	r25, r22
    4ca2:	10 0d       	add	r17, r0
    4ca4:	11 24       	eor	r1, r1
    4ca6:	c8 01       	movw	r24, r16
    4ca8:	0d d0       	rcall	.+26     	; 0x4cc4 <malloc>
    4caa:	ec 01       	movw	r28, r24
    4cac:	00 97       	sbiw	r24, 0x00	; 0
    4cae:	21 f0       	breq	.+8      	; 0x4cb8 <calloc+0x28>
    4cb0:	a8 01       	movw	r20, r16
    4cb2:	60 e0       	ldi	r22, 0x00	; 0
    4cb4:	70 e0       	ldi	r23, 0x00	; 0
    4cb6:	32 d1       	rcall	.+612    	; 0x4f1c <memset>
    4cb8:	ce 01       	movw	r24, r28
    4cba:	df 91       	pop	r29
    4cbc:	cf 91       	pop	r28
    4cbe:	1f 91       	pop	r17
    4cc0:	0f 91       	pop	r16
    4cc2:	08 95       	ret

00004cc4 <malloc>:
    4cc4:	0f 93       	push	r16
    4cc6:	1f 93       	push	r17
    4cc8:	cf 93       	push	r28
    4cca:	df 93       	push	r29
    4ccc:	82 30       	cpi	r24, 0x02	; 2
    4cce:	91 05       	cpc	r25, r1
    4cd0:	10 f4       	brcc	.+4      	; 0x4cd6 <malloc+0x12>
    4cd2:	82 e0       	ldi	r24, 0x02	; 2
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	e0 91 9d 24 	lds	r30, 0x249D	; 0x80249d <__flp>
    4cda:	f0 91 9e 24 	lds	r31, 0x249E	; 0x80249e <__flp+0x1>
    4cde:	20 e0       	ldi	r18, 0x00	; 0
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	a0 e0       	ldi	r26, 0x00	; 0
    4ce4:	b0 e0       	ldi	r27, 0x00	; 0
    4ce6:	30 97       	sbiw	r30, 0x00	; 0
    4ce8:	19 f1       	breq	.+70     	; 0x4d30 <malloc+0x6c>
    4cea:	40 81       	ld	r20, Z
    4cec:	51 81       	ldd	r21, Z+1	; 0x01
    4cee:	02 81       	ldd	r16, Z+2	; 0x02
    4cf0:	13 81       	ldd	r17, Z+3	; 0x03
    4cf2:	48 17       	cp	r20, r24
    4cf4:	59 07       	cpc	r21, r25
    4cf6:	c8 f0       	brcs	.+50     	; 0x4d2a <malloc+0x66>
    4cf8:	84 17       	cp	r24, r20
    4cfa:	95 07       	cpc	r25, r21
    4cfc:	69 f4       	brne	.+26     	; 0x4d18 <malloc+0x54>
    4cfe:	10 97       	sbiw	r26, 0x00	; 0
    4d00:	31 f0       	breq	.+12     	; 0x4d0e <malloc+0x4a>
    4d02:	12 96       	adiw	r26, 0x02	; 2
    4d04:	0c 93       	st	X, r16
    4d06:	12 97       	sbiw	r26, 0x02	; 2
    4d08:	13 96       	adiw	r26, 0x03	; 3
    4d0a:	1c 93       	st	X, r17
    4d0c:	27 c0       	rjmp	.+78     	; 0x4d5c <malloc+0x98>
    4d0e:	00 93 9d 24 	sts	0x249D, r16	; 0x80249d <__flp>
    4d12:	10 93 9e 24 	sts	0x249E, r17	; 0x80249e <__flp+0x1>
    4d16:	22 c0       	rjmp	.+68     	; 0x4d5c <malloc+0x98>
    4d18:	21 15       	cp	r18, r1
    4d1a:	31 05       	cpc	r19, r1
    4d1c:	19 f0       	breq	.+6      	; 0x4d24 <malloc+0x60>
    4d1e:	42 17       	cp	r20, r18
    4d20:	53 07       	cpc	r21, r19
    4d22:	18 f4       	brcc	.+6      	; 0x4d2a <malloc+0x66>
    4d24:	9a 01       	movw	r18, r20
    4d26:	bd 01       	movw	r22, r26
    4d28:	ef 01       	movw	r28, r30
    4d2a:	df 01       	movw	r26, r30
    4d2c:	f8 01       	movw	r30, r16
    4d2e:	db cf       	rjmp	.-74     	; 0x4ce6 <malloc+0x22>
    4d30:	21 15       	cp	r18, r1
    4d32:	31 05       	cpc	r19, r1
    4d34:	f9 f0       	breq	.+62     	; 0x4d74 <malloc+0xb0>
    4d36:	28 1b       	sub	r18, r24
    4d38:	39 0b       	sbc	r19, r25
    4d3a:	24 30       	cpi	r18, 0x04	; 4
    4d3c:	31 05       	cpc	r19, r1
    4d3e:	80 f4       	brcc	.+32     	; 0x4d60 <malloc+0x9c>
    4d40:	8a 81       	ldd	r24, Y+2	; 0x02
    4d42:	9b 81       	ldd	r25, Y+3	; 0x03
    4d44:	61 15       	cp	r22, r1
    4d46:	71 05       	cpc	r23, r1
    4d48:	21 f0       	breq	.+8      	; 0x4d52 <malloc+0x8e>
    4d4a:	fb 01       	movw	r30, r22
    4d4c:	82 83       	std	Z+2, r24	; 0x02
    4d4e:	93 83       	std	Z+3, r25	; 0x03
    4d50:	04 c0       	rjmp	.+8      	; 0x4d5a <malloc+0x96>
    4d52:	80 93 9d 24 	sts	0x249D, r24	; 0x80249d <__flp>
    4d56:	90 93 9e 24 	sts	0x249E, r25	; 0x80249e <__flp+0x1>
    4d5a:	fe 01       	movw	r30, r28
    4d5c:	32 96       	adiw	r30, 0x02	; 2
    4d5e:	44 c0       	rjmp	.+136    	; 0x4de8 <malloc+0x124>
    4d60:	fe 01       	movw	r30, r28
    4d62:	e2 0f       	add	r30, r18
    4d64:	f3 1f       	adc	r31, r19
    4d66:	81 93       	st	Z+, r24
    4d68:	91 93       	st	Z+, r25
    4d6a:	22 50       	subi	r18, 0x02	; 2
    4d6c:	31 09       	sbc	r19, r1
    4d6e:	28 83       	st	Y, r18
    4d70:	39 83       	std	Y+1, r19	; 0x01
    4d72:	3a c0       	rjmp	.+116    	; 0x4de8 <malloc+0x124>
    4d74:	20 91 9b 24 	lds	r18, 0x249B	; 0x80249b <__brkval>
    4d78:	30 91 9c 24 	lds	r19, 0x249C	; 0x80249c <__brkval+0x1>
    4d7c:	23 2b       	or	r18, r19
    4d7e:	41 f4       	brne	.+16     	; 0x4d90 <malloc+0xcc>
    4d80:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4d84:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4d88:	20 93 9b 24 	sts	0x249B, r18	; 0x80249b <__brkval>
    4d8c:	30 93 9c 24 	sts	0x249C, r19	; 0x80249c <__brkval+0x1>
    4d90:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4d94:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4d98:	21 15       	cp	r18, r1
    4d9a:	31 05       	cpc	r19, r1
    4d9c:	41 f4       	brne	.+16     	; 0x4dae <malloc+0xea>
    4d9e:	2d b7       	in	r18, 0x3d	; 61
    4da0:	3e b7       	in	r19, 0x3e	; 62
    4da2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4da6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4daa:	24 1b       	sub	r18, r20
    4dac:	35 0b       	sbc	r19, r21
    4dae:	e0 91 9b 24 	lds	r30, 0x249B	; 0x80249b <__brkval>
    4db2:	f0 91 9c 24 	lds	r31, 0x249C	; 0x80249c <__brkval+0x1>
    4db6:	e2 17       	cp	r30, r18
    4db8:	f3 07       	cpc	r31, r19
    4dba:	a0 f4       	brcc	.+40     	; 0x4de4 <malloc+0x120>
    4dbc:	2e 1b       	sub	r18, r30
    4dbe:	3f 0b       	sbc	r19, r31
    4dc0:	28 17       	cp	r18, r24
    4dc2:	39 07       	cpc	r19, r25
    4dc4:	78 f0       	brcs	.+30     	; 0x4de4 <malloc+0x120>
    4dc6:	ac 01       	movw	r20, r24
    4dc8:	4e 5f       	subi	r20, 0xFE	; 254
    4dca:	5f 4f       	sbci	r21, 0xFF	; 255
    4dcc:	24 17       	cp	r18, r20
    4dce:	35 07       	cpc	r19, r21
    4dd0:	48 f0       	brcs	.+18     	; 0x4de4 <malloc+0x120>
    4dd2:	4e 0f       	add	r20, r30
    4dd4:	5f 1f       	adc	r21, r31
    4dd6:	40 93 9b 24 	sts	0x249B, r20	; 0x80249b <__brkval>
    4dda:	50 93 9c 24 	sts	0x249C, r21	; 0x80249c <__brkval+0x1>
    4dde:	81 93       	st	Z+, r24
    4de0:	91 93       	st	Z+, r25
    4de2:	02 c0       	rjmp	.+4      	; 0x4de8 <malloc+0x124>
    4de4:	e0 e0       	ldi	r30, 0x00	; 0
    4de6:	f0 e0       	ldi	r31, 0x00	; 0
    4de8:	cf 01       	movw	r24, r30
    4dea:	df 91       	pop	r29
    4dec:	cf 91       	pop	r28
    4dee:	1f 91       	pop	r17
    4df0:	0f 91       	pop	r16
    4df2:	08 95       	ret

00004df4 <free>:
    4df4:	cf 93       	push	r28
    4df6:	df 93       	push	r29
    4df8:	00 97       	sbiw	r24, 0x00	; 0
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <free+0xa>
    4dfc:	81 c0       	rjmp	.+258    	; 0x4f00 <free+0x10c>
    4dfe:	fc 01       	movw	r30, r24
    4e00:	32 97       	sbiw	r30, 0x02	; 2
    4e02:	12 82       	std	Z+2, r1	; 0x02
    4e04:	13 82       	std	Z+3, r1	; 0x03
    4e06:	a0 91 9d 24 	lds	r26, 0x249D	; 0x80249d <__flp>
    4e0a:	b0 91 9e 24 	lds	r27, 0x249E	; 0x80249e <__flp+0x1>
    4e0e:	10 97       	sbiw	r26, 0x00	; 0
    4e10:	81 f4       	brne	.+32     	; 0x4e32 <free+0x3e>
    4e12:	20 81       	ld	r18, Z
    4e14:	31 81       	ldd	r19, Z+1	; 0x01
    4e16:	82 0f       	add	r24, r18
    4e18:	93 1f       	adc	r25, r19
    4e1a:	20 91 9b 24 	lds	r18, 0x249B	; 0x80249b <__brkval>
    4e1e:	30 91 9c 24 	lds	r19, 0x249C	; 0x80249c <__brkval+0x1>
    4e22:	28 17       	cp	r18, r24
    4e24:	39 07       	cpc	r19, r25
    4e26:	51 f5       	brne	.+84     	; 0x4e7c <free+0x88>
    4e28:	e0 93 9b 24 	sts	0x249B, r30	; 0x80249b <__brkval>
    4e2c:	f0 93 9c 24 	sts	0x249C, r31	; 0x80249c <__brkval+0x1>
    4e30:	67 c0       	rjmp	.+206    	; 0x4f00 <free+0x10c>
    4e32:	ed 01       	movw	r28, r26
    4e34:	20 e0       	ldi	r18, 0x00	; 0
    4e36:	30 e0       	ldi	r19, 0x00	; 0
    4e38:	ce 17       	cp	r28, r30
    4e3a:	df 07       	cpc	r29, r31
    4e3c:	40 f4       	brcc	.+16     	; 0x4e4e <free+0x5a>
    4e3e:	4a 81       	ldd	r20, Y+2	; 0x02
    4e40:	5b 81       	ldd	r21, Y+3	; 0x03
    4e42:	9e 01       	movw	r18, r28
    4e44:	41 15       	cp	r20, r1
    4e46:	51 05       	cpc	r21, r1
    4e48:	f1 f0       	breq	.+60     	; 0x4e86 <free+0x92>
    4e4a:	ea 01       	movw	r28, r20
    4e4c:	f5 cf       	rjmp	.-22     	; 0x4e38 <free+0x44>
    4e4e:	c2 83       	std	Z+2, r28	; 0x02
    4e50:	d3 83       	std	Z+3, r29	; 0x03
    4e52:	40 81       	ld	r20, Z
    4e54:	51 81       	ldd	r21, Z+1	; 0x01
    4e56:	84 0f       	add	r24, r20
    4e58:	95 1f       	adc	r25, r21
    4e5a:	c8 17       	cp	r28, r24
    4e5c:	d9 07       	cpc	r29, r25
    4e5e:	59 f4       	brne	.+22     	; 0x4e76 <free+0x82>
    4e60:	88 81       	ld	r24, Y
    4e62:	99 81       	ldd	r25, Y+1	; 0x01
    4e64:	84 0f       	add	r24, r20
    4e66:	95 1f       	adc	r25, r21
    4e68:	02 96       	adiw	r24, 0x02	; 2
    4e6a:	80 83       	st	Z, r24
    4e6c:	91 83       	std	Z+1, r25	; 0x01
    4e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e70:	9b 81       	ldd	r25, Y+3	; 0x03
    4e72:	82 83       	std	Z+2, r24	; 0x02
    4e74:	93 83       	std	Z+3, r25	; 0x03
    4e76:	21 15       	cp	r18, r1
    4e78:	31 05       	cpc	r19, r1
    4e7a:	29 f4       	brne	.+10     	; 0x4e86 <free+0x92>
    4e7c:	e0 93 9d 24 	sts	0x249D, r30	; 0x80249d <__flp>
    4e80:	f0 93 9e 24 	sts	0x249E, r31	; 0x80249e <__flp+0x1>
    4e84:	3d c0       	rjmp	.+122    	; 0x4f00 <free+0x10c>
    4e86:	e9 01       	movw	r28, r18
    4e88:	ea 83       	std	Y+2, r30	; 0x02
    4e8a:	fb 83       	std	Y+3, r31	; 0x03
    4e8c:	49 91       	ld	r20, Y+
    4e8e:	59 91       	ld	r21, Y+
    4e90:	c4 0f       	add	r28, r20
    4e92:	d5 1f       	adc	r29, r21
    4e94:	ec 17       	cp	r30, r28
    4e96:	fd 07       	cpc	r31, r29
    4e98:	61 f4       	brne	.+24     	; 0x4eb2 <free+0xbe>
    4e9a:	80 81       	ld	r24, Z
    4e9c:	91 81       	ldd	r25, Z+1	; 0x01
    4e9e:	84 0f       	add	r24, r20
    4ea0:	95 1f       	adc	r25, r21
    4ea2:	02 96       	adiw	r24, 0x02	; 2
    4ea4:	e9 01       	movw	r28, r18
    4ea6:	88 83       	st	Y, r24
    4ea8:	99 83       	std	Y+1, r25	; 0x01
    4eaa:	82 81       	ldd	r24, Z+2	; 0x02
    4eac:	93 81       	ldd	r25, Z+3	; 0x03
    4eae:	8a 83       	std	Y+2, r24	; 0x02
    4eb0:	9b 83       	std	Y+3, r25	; 0x03
    4eb2:	e0 e0       	ldi	r30, 0x00	; 0
    4eb4:	f0 e0       	ldi	r31, 0x00	; 0
    4eb6:	12 96       	adiw	r26, 0x02	; 2
    4eb8:	8d 91       	ld	r24, X+
    4eba:	9c 91       	ld	r25, X
    4ebc:	13 97       	sbiw	r26, 0x03	; 3
    4ebe:	00 97       	sbiw	r24, 0x00	; 0
    4ec0:	19 f0       	breq	.+6      	; 0x4ec8 <free+0xd4>
    4ec2:	fd 01       	movw	r30, r26
    4ec4:	dc 01       	movw	r26, r24
    4ec6:	f7 cf       	rjmp	.-18     	; 0x4eb6 <free+0xc2>
    4ec8:	8d 91       	ld	r24, X+
    4eca:	9c 91       	ld	r25, X
    4ecc:	11 97       	sbiw	r26, 0x01	; 1
    4ece:	9d 01       	movw	r18, r26
    4ed0:	2e 5f       	subi	r18, 0xFE	; 254
    4ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ed4:	82 0f       	add	r24, r18
    4ed6:	93 1f       	adc	r25, r19
    4ed8:	20 91 9b 24 	lds	r18, 0x249B	; 0x80249b <__brkval>
    4edc:	30 91 9c 24 	lds	r19, 0x249C	; 0x80249c <__brkval+0x1>
    4ee0:	28 17       	cp	r18, r24
    4ee2:	39 07       	cpc	r19, r25
    4ee4:	69 f4       	brne	.+26     	; 0x4f00 <free+0x10c>
    4ee6:	30 97       	sbiw	r30, 0x00	; 0
    4ee8:	29 f4       	brne	.+10     	; 0x4ef4 <free+0x100>
    4eea:	10 92 9d 24 	sts	0x249D, r1	; 0x80249d <__flp>
    4eee:	10 92 9e 24 	sts	0x249E, r1	; 0x80249e <__flp+0x1>
    4ef2:	02 c0       	rjmp	.+4      	; 0x4ef8 <free+0x104>
    4ef4:	12 82       	std	Z+2, r1	; 0x02
    4ef6:	13 82       	std	Z+3, r1	; 0x03
    4ef8:	a0 93 9b 24 	sts	0x249B, r26	; 0x80249b <__brkval>
    4efc:	b0 93 9c 24 	sts	0x249C, r27	; 0x80249c <__brkval+0x1>
    4f00:	df 91       	pop	r29
    4f02:	cf 91       	pop	r28
    4f04:	08 95       	ret

00004f06 <strnlen_P>:
    4f06:	fc 01       	movw	r30, r24
    4f08:	05 90       	lpm	r0, Z+
    4f0a:	61 50       	subi	r22, 0x01	; 1
    4f0c:	70 40       	sbci	r23, 0x00	; 0
    4f0e:	01 10       	cpse	r0, r1
    4f10:	d8 f7       	brcc	.-10     	; 0x4f08 <strnlen_P+0x2>
    4f12:	80 95       	com	r24
    4f14:	90 95       	com	r25
    4f16:	8e 0f       	add	r24, r30
    4f18:	9f 1f       	adc	r25, r31
    4f1a:	08 95       	ret

00004f1c <memset>:
    4f1c:	dc 01       	movw	r26, r24
    4f1e:	01 c0       	rjmp	.+2      	; 0x4f22 <memset+0x6>
    4f20:	6d 93       	st	X+, r22
    4f22:	41 50       	subi	r20, 0x01	; 1
    4f24:	50 40       	sbci	r21, 0x00	; 0
    4f26:	e0 f7       	brcc	.-8      	; 0x4f20 <memset+0x4>
    4f28:	08 95       	ret

00004f2a <strnlen>:
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	61 50       	subi	r22, 0x01	; 1
    4f2e:	70 40       	sbci	r23, 0x00	; 0
    4f30:	01 90       	ld	r0, Z+
    4f32:	01 10       	cpse	r0, r1
    4f34:	d8 f7       	brcc	.-10     	; 0x4f2c <strnlen+0x2>
    4f36:	80 95       	com	r24
    4f38:	90 95       	com	r25
    4f3a:	8e 0f       	add	r24, r30
    4f3c:	9f 1f       	adc	r25, r31
    4f3e:	08 95       	ret

00004f40 <fputc>:
    4f40:	0f 93       	push	r16
    4f42:	1f 93       	push	r17
    4f44:	cf 93       	push	r28
    4f46:	df 93       	push	r29
    4f48:	fb 01       	movw	r30, r22
    4f4a:	23 81       	ldd	r18, Z+3	; 0x03
    4f4c:	21 fd       	sbrc	r18, 1
    4f4e:	03 c0       	rjmp	.+6      	; 0x4f56 <fputc+0x16>
    4f50:	8f ef       	ldi	r24, 0xFF	; 255
    4f52:	9f ef       	ldi	r25, 0xFF	; 255
    4f54:	2c c0       	rjmp	.+88     	; 0x4fae <fputc+0x6e>
    4f56:	22 ff       	sbrs	r18, 2
    4f58:	16 c0       	rjmp	.+44     	; 0x4f86 <fputc+0x46>
    4f5a:	46 81       	ldd	r20, Z+6	; 0x06
    4f5c:	57 81       	ldd	r21, Z+7	; 0x07
    4f5e:	24 81       	ldd	r18, Z+4	; 0x04
    4f60:	35 81       	ldd	r19, Z+5	; 0x05
    4f62:	42 17       	cp	r20, r18
    4f64:	53 07       	cpc	r21, r19
    4f66:	44 f4       	brge	.+16     	; 0x4f78 <fputc+0x38>
    4f68:	a0 81       	ld	r26, Z
    4f6a:	b1 81       	ldd	r27, Z+1	; 0x01
    4f6c:	9d 01       	movw	r18, r26
    4f6e:	2f 5f       	subi	r18, 0xFF	; 255
    4f70:	3f 4f       	sbci	r19, 0xFF	; 255
    4f72:	20 83       	st	Z, r18
    4f74:	31 83       	std	Z+1, r19	; 0x01
    4f76:	8c 93       	st	X, r24
    4f78:	26 81       	ldd	r18, Z+6	; 0x06
    4f7a:	37 81       	ldd	r19, Z+7	; 0x07
    4f7c:	2f 5f       	subi	r18, 0xFF	; 255
    4f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f80:	26 83       	std	Z+6, r18	; 0x06
    4f82:	37 83       	std	Z+7, r19	; 0x07
    4f84:	14 c0       	rjmp	.+40     	; 0x4fae <fputc+0x6e>
    4f86:	8b 01       	movw	r16, r22
    4f88:	ec 01       	movw	r28, r24
    4f8a:	fb 01       	movw	r30, r22
    4f8c:	00 84       	ldd	r0, Z+8	; 0x08
    4f8e:	f1 85       	ldd	r31, Z+9	; 0x09
    4f90:	e0 2d       	mov	r30, r0
    4f92:	19 95       	eicall
    4f94:	89 2b       	or	r24, r25
    4f96:	e1 f6       	brne	.-72     	; 0x4f50 <fputc+0x10>
    4f98:	d8 01       	movw	r26, r16
    4f9a:	16 96       	adiw	r26, 0x06	; 6
    4f9c:	8d 91       	ld	r24, X+
    4f9e:	9c 91       	ld	r25, X
    4fa0:	17 97       	sbiw	r26, 0x07	; 7
    4fa2:	01 96       	adiw	r24, 0x01	; 1
    4fa4:	16 96       	adiw	r26, 0x06	; 6
    4fa6:	8d 93       	st	X+, r24
    4fa8:	9c 93       	st	X, r25
    4faa:	17 97       	sbiw	r26, 0x07	; 7
    4fac:	ce 01       	movw	r24, r28
    4fae:	df 91       	pop	r29
    4fb0:	cf 91       	pop	r28
    4fb2:	1f 91       	pop	r17
    4fb4:	0f 91       	pop	r16
    4fb6:	08 95       	ret

00004fb8 <__ultoa_invert>:
    4fb8:	fa 01       	movw	r30, r20
    4fba:	aa 27       	eor	r26, r26
    4fbc:	28 30       	cpi	r18, 0x08	; 8
    4fbe:	51 f1       	breq	.+84     	; 0x5014 <__ultoa_invert+0x5c>
    4fc0:	20 31       	cpi	r18, 0x10	; 16
    4fc2:	81 f1       	breq	.+96     	; 0x5024 <__ultoa_invert+0x6c>
    4fc4:	e8 94       	clt
    4fc6:	6f 93       	push	r22
    4fc8:	6e 7f       	andi	r22, 0xFE	; 254
    4fca:	6e 5f       	subi	r22, 0xFE	; 254
    4fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    4fce:	8f 4f       	sbci	r24, 0xFF	; 255
    4fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd2:	af 4f       	sbci	r26, 0xFF	; 255
    4fd4:	b1 e0       	ldi	r27, 0x01	; 1
    4fd6:	3e d0       	rcall	.+124    	; 0x5054 <__ultoa_invert+0x9c>
    4fd8:	b4 e0       	ldi	r27, 0x04	; 4
    4fda:	3c d0       	rcall	.+120    	; 0x5054 <__ultoa_invert+0x9c>
    4fdc:	67 0f       	add	r22, r23
    4fde:	78 1f       	adc	r23, r24
    4fe0:	89 1f       	adc	r24, r25
    4fe2:	9a 1f       	adc	r25, r26
    4fe4:	a1 1d       	adc	r26, r1
    4fe6:	68 0f       	add	r22, r24
    4fe8:	79 1f       	adc	r23, r25
    4fea:	8a 1f       	adc	r24, r26
    4fec:	91 1d       	adc	r25, r1
    4fee:	a1 1d       	adc	r26, r1
    4ff0:	6a 0f       	add	r22, r26
    4ff2:	71 1d       	adc	r23, r1
    4ff4:	81 1d       	adc	r24, r1
    4ff6:	91 1d       	adc	r25, r1
    4ff8:	a1 1d       	adc	r26, r1
    4ffa:	20 d0       	rcall	.+64     	; 0x503c <__ultoa_invert+0x84>
    4ffc:	09 f4       	brne	.+2      	; 0x5000 <__ultoa_invert+0x48>
    4ffe:	68 94       	set
    5000:	3f 91       	pop	r19
    5002:	2a e0       	ldi	r18, 0x0A	; 10
    5004:	26 9f       	mul	r18, r22
    5006:	11 24       	eor	r1, r1
    5008:	30 19       	sub	r19, r0
    500a:	30 5d       	subi	r19, 0xD0	; 208
    500c:	31 93       	st	Z+, r19
    500e:	de f6       	brtc	.-74     	; 0x4fc6 <__ultoa_invert+0xe>
    5010:	cf 01       	movw	r24, r30
    5012:	08 95       	ret
    5014:	46 2f       	mov	r20, r22
    5016:	47 70       	andi	r20, 0x07	; 7
    5018:	40 5d       	subi	r20, 0xD0	; 208
    501a:	41 93       	st	Z+, r20
    501c:	b3 e0       	ldi	r27, 0x03	; 3
    501e:	0f d0       	rcall	.+30     	; 0x503e <__ultoa_invert+0x86>
    5020:	c9 f7       	brne	.-14     	; 0x5014 <__ultoa_invert+0x5c>
    5022:	f6 cf       	rjmp	.-20     	; 0x5010 <__ultoa_invert+0x58>
    5024:	46 2f       	mov	r20, r22
    5026:	4f 70       	andi	r20, 0x0F	; 15
    5028:	40 5d       	subi	r20, 0xD0	; 208
    502a:	4a 33       	cpi	r20, 0x3A	; 58
    502c:	18 f0       	brcs	.+6      	; 0x5034 <__ultoa_invert+0x7c>
    502e:	49 5d       	subi	r20, 0xD9	; 217
    5030:	31 fd       	sbrc	r19, 1
    5032:	40 52       	subi	r20, 0x20	; 32
    5034:	41 93       	st	Z+, r20
    5036:	02 d0       	rcall	.+4      	; 0x503c <__ultoa_invert+0x84>
    5038:	a9 f7       	brne	.-22     	; 0x5024 <__ultoa_invert+0x6c>
    503a:	ea cf       	rjmp	.-44     	; 0x5010 <__ultoa_invert+0x58>
    503c:	b4 e0       	ldi	r27, 0x04	; 4
    503e:	a6 95       	lsr	r26
    5040:	97 95       	ror	r25
    5042:	87 95       	ror	r24
    5044:	77 95       	ror	r23
    5046:	67 95       	ror	r22
    5048:	ba 95       	dec	r27
    504a:	c9 f7       	brne	.-14     	; 0x503e <__ultoa_invert+0x86>
    504c:	00 97       	sbiw	r24, 0x00	; 0
    504e:	61 05       	cpc	r22, r1
    5050:	71 05       	cpc	r23, r1
    5052:	08 95       	ret
    5054:	9b 01       	movw	r18, r22
    5056:	ac 01       	movw	r20, r24
    5058:	0a 2e       	mov	r0, r26
    505a:	06 94       	lsr	r0
    505c:	57 95       	ror	r21
    505e:	47 95       	ror	r20
    5060:	37 95       	ror	r19
    5062:	27 95       	ror	r18
    5064:	ba 95       	dec	r27
    5066:	c9 f7       	brne	.-14     	; 0x505a <__ultoa_invert+0xa2>
    5068:	62 0f       	add	r22, r18
    506a:	73 1f       	adc	r23, r19
    506c:	84 1f       	adc	r24, r20
    506e:	95 1f       	adc	r25, r21
    5070:	a0 1d       	adc	r26, r0
    5072:	08 95       	ret

00005074 <_exit>:
    5074:	f8 94       	cli

00005076 <__stop_program>:
    5076:	ff cf       	rjmp	.-2      	; 0x5076 <__stop_program>
