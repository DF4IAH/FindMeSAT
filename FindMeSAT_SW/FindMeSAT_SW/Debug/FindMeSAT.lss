
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00802000  00004f12  00004fa6  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f7  00802150  00802150  000050f8  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000050f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00005154  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000890  00000000  00000000  00005198  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000160a1  00000000  00000000  00005a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006096  00000000  00000000  0001bac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000baa7  00000000  00000000  00021b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002274  00000000  00000000  0002d608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003ce15  00000000  00000000  0002f87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007b00  00000000  00000000  0006c691  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008b8  00000000  00000000  00074198  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d929  00000000  00000000  00074a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__vector_11>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__vector_13>
      38:	da c5       	rjmp	.+2996   	; 0xbee <__vector_14>
      3a:	00 00       	nop
      3c:	05 c6       	rjmp	.+3082   	; 0xc48 <__vector_15>
      3e:	00 00       	nop
      40:	30 c6       	rjmp	.+3168   	; 0xca2 <__vector_16>
      42:	00 00       	nop
      44:	5b c6       	rjmp	.+3254   	; 0xcfc <__vector_17>
      46:	00 00       	nop
      48:	86 c6       	rjmp	.+3340   	; 0xd56 <__vector_18>
      4a:	00 00       	nop
      4c:	b1 c6       	rjmp	.+3426   	; 0xdb0 <__vector_19>
      4e:	00 00       	nop
      50:	dc c6       	rjmp	.+3512   	; 0xe0a <__vector_20>
      52:	00 00       	nop
      54:	07 c7       	rjmp	.+3598   	; 0xe64 <__vector_21>
      56:	00 00       	nop
      58:	32 c7       	rjmp	.+3684   	; 0xebe <__vector_22>
      5a:	00 00       	nop
      5c:	5d c7       	rjmp	.+3770   	; 0xf18 <__vector_23>
      5e:	00 00       	nop
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fd c2       	rjmp	.+1530   	; 0x698 <__vector_39>
      9e:	00 00       	nop
      a0:	2d c3       	rjmp	.+1626   	; 0x6fc <__vector_40>
      a2:	00 00       	nop
      a4:	5d c3       	rjmp	.+1722   	; 0x760 <__vector_41>
      a6:	00 00       	nop
      a8:	8d c3       	rjmp	.+1818   	; 0x7c4 <__vector_42>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__vector_46>
      bc:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__vector_47>
      c0:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__vector_48>
      c4:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__vector_49>
      c8:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_50>
      cc:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_51>
      d0:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__vector_52>
      d4:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <__vector_53>
      d8:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__vector_54>
      dc:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__vector_55>
      e0:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__vector_56>
      e4:	ba c0       	rjmp	.+372    	; 0x25a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b6 c0       	rjmp	.+364    	; 0x25a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b4 c0       	rjmp	.+360    	; 0x25a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b2 c0       	rjmp	.+356    	; 0x25a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b0 c0       	rjmp	.+352    	; 0x25a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ae c0       	rjmp	.+348    	; 0x25a <__bad_interrupt>
      fe:	00 00       	nop
     100:	ac c0       	rjmp	.+344    	; 0x25a <__bad_interrupt>
     102:	00 00       	nop
     104:	aa c0       	rjmp	.+340    	; 0x25a <__bad_interrupt>
     106:	00 00       	nop
     108:	a8 c0       	rjmp	.+336    	; 0x25a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a6 c0       	rjmp	.+332    	; 0x25a <__bad_interrupt>
     10e:	00 00       	nop
     110:	a4 c0       	rjmp	.+328    	; 0x25a <__bad_interrupt>
     112:	00 00       	nop
     114:	a2 c0       	rjmp	.+324    	; 0x25a <__bad_interrupt>
     116:	00 00       	nop
     118:	a0 c0       	rjmp	.+320    	; 0x25a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	f5 c1       	rjmp	.+1002   	; 0x508 <__vector_71>
     11e:	00 00       	nop
     120:	25 c2       	rjmp	.+1098   	; 0x56c <__vector_72>
     122:	00 00       	nop
     124:	55 c2       	rjmp	.+1194   	; 0x5d0 <__vector_73>
     126:	00 00       	nop
     128:	85 c2       	rjmp	.+1290   	; 0x634 <__vector_74>
     12a:	00 00       	nop
     12c:	96 c0       	rjmp	.+300    	; 0x25a <__bad_interrupt>
     12e:	00 00       	nop
     130:	94 c0       	rjmp	.+296    	; 0x25a <__bad_interrupt>
     132:	00 00       	nop
     134:	1e c7       	rjmp	.+3644   	; 0xf72 <__vector_77>
     136:	00 00       	nop
     138:	49 c7       	rjmp	.+3730   	; 0xfcc <__vector_78>
     13a:	00 00       	nop
     13c:	74 c7       	rjmp	.+3816   	; 0x1026 <__vector_79>
     13e:	00 00       	nop
     140:	9f c7       	rjmp	.+3902   	; 0x1080 <__vector_80>
     142:	00 00       	nop
     144:	ca c7       	rjmp	.+3988   	; 0x10da <__vector_81>
     146:	00 00       	nop
     148:	f5 c7       	rjmp	.+4074   	; 0x1134 <__vector_82>
     14a:	00 00       	nop
     14c:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__vector_83>
     150:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__vector_84>
     154:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__vector_85>
     158:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_86>
     15c:	7e c0       	rjmp	.+252    	; 0x25a <__bad_interrupt>
     15e:	00 00       	nop
     160:	7c c0       	rjmp	.+248    	; 0x25a <__bad_interrupt>
     162:	00 00       	nop
     164:	7a c0       	rjmp	.+244    	; 0x25a <__bad_interrupt>
     166:	00 00       	nop
     168:	78 c0       	rjmp	.+240    	; 0x25a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	76 c0       	rjmp	.+236    	; 0x25a <__bad_interrupt>
     16e:	00 00       	nop
     170:	74 c0       	rjmp	.+232    	; 0x25a <__bad_interrupt>
     172:	00 00       	nop
     174:	72 c0       	rjmp	.+228    	; 0x25a <__bad_interrupt>
     176:	00 00       	nop
     178:	70 c0       	rjmp	.+224    	; 0x25a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6e c0       	rjmp	.+220    	; 0x25a <__bad_interrupt>
     17e:	00 00       	nop
     180:	6c c0       	rjmp	.+216    	; 0x25a <__bad_interrupt>
     182:	00 00       	nop
     184:	6a c0       	rjmp	.+212    	; 0x25a <__bad_interrupt>
     186:	00 00       	nop
     188:	68 c0       	rjmp	.+208    	; 0x25a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	66 c0       	rjmp	.+204    	; 0x25a <__bad_interrupt>
     18e:	00 00       	nop
     190:	64 c0       	rjmp	.+200    	; 0x25a <__bad_interrupt>
     192:	00 00       	nop
     194:	62 c0       	rjmp	.+196    	; 0x25a <__bad_interrupt>
     196:	00 00       	nop
     198:	60 c0       	rjmp	.+192    	; 0x25a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5e c0       	rjmp	.+188    	; 0x25a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5c c0       	rjmp	.+184    	; 0x25a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5a c0       	rjmp	.+180    	; 0x25a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	58 c0       	rjmp	.+176    	; 0x25a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	56 c0       	rjmp	.+172    	; 0x25a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_108>
     1b4:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__vector_109>
     1b8:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__vector_110>
     1bc:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_111>
     1c0:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__vector_112>
     1c4:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__vector_113>
     1c8:	48 c0       	rjmp	.+144    	; 0x25a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	46 c0       	rjmp	.+140    	; 0x25a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	44 c0       	rjmp	.+136    	; 0x25a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	42 c0       	rjmp	.+132    	; 0x25a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3c c0       	rjmp	.+120    	; 0x25a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3a c0       	rjmp	.+116    	; 0x25a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	36 c0       	rjmp	.+108    	; 0x25a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 45 14 	jmp	0x288a	; 0x288a <__vector_125>
     1f8:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__vector_126>
     1fc:	26 0f       	add	r18, r22
     1fe:	29 0f       	add	r18, r25
     200:	2c 0f       	add	r18, r28
     202:	2f 0f       	add	r18, r31
     204:	32 0f       	add	r19, r18
     206:	35 0f       	add	r19, r21
     208:	38 0f       	add	r19, r24
     20a:	77 16       	cp	r7, r23
     20c:	8a 16       	cp	r8, r26
     20e:	9d 16       	cp	r9, r29
     210:	b0 16       	cp	r11, r16
     212:	c3 16       	cp	r12, r19
     214:	d6 16       	cp	r13, r22
     216:	e9 16       	cp	r14, r25

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e5       	ldi	r29, 0x5F	; 95
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e2 e1       	ldi	r30, 0x12	; 18
     230:	ff e4       	ldi	r31, 0x4F	; 79
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a0 35       	cpi	r26, 0x50	; 80
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	24 e2       	ldi	r18, 0x24	; 36
     244:	a0 e5       	ldi	r26, 0x50	; 80
     246:	b1 e2       	ldi	r27, 0x21	; 33
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a7 34       	cpi	r26, 0x47	; 71
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <main>
     256:	0c 94 87 27 	jmp	0x4f0e	; 0x4f0e <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
     25c:	04 c0       	rjmp	.+8      	; 0x266 <__portable_avr_delay_cycles+0xa>
     25e:	61 50       	subi	r22, 0x01	; 1
     260:	71 09       	sbc	r23, r1
     262:	81 09       	sbc	r24, r1
     264:	91 09       	sbc	r25, r1
     266:	61 15       	cp	r22, r1
     268:	71 05       	cpc	r23, r1
     26a:	81 05       	cpc	r24, r1
     26c:	91 05       	cpc	r25, r1
     26e:	b9 f7       	brne	.-18     	; 0x25e <__portable_avr_delay_cycles+0x2>
     270:	08 95       	ret

00000272 <rtc_get_time>:
     272:	80 e1       	ldi	r24, 0x10	; 16
     274:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     278:	e0 e2       	ldi	r30, 0x20	; 32
     27a:	f4 e0       	ldi	r31, 0x04	; 4
     27c:	81 81       	ldd	r24, Z+1	; 0x01
     27e:	84 fd       	sbrc	r24, 4
     280:	fd cf       	rjmp	.-6      	; 0x27c <rtc_get_time+0xa>
     282:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
     286:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     28a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     28e:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     292:	08 95       	ret

00000294 <rtc_set_callback>:
     294:	80 93 1b 24 	sts	0x241B, r24	; 0x80241b <rtc_data>
     298:	90 93 1c 24 	sts	0x241C, r25	; 0x80241c <rtc_data+0x1>
     29c:	08 95       	ret

0000029e <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
     2aa:	c0 ef       	ldi	r28, 0xF0	; 240
     2ac:	d0 e0       	ldi	r29, 0x00	; 0
     2ae:	88 81       	ld	r24, Y
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	80 ef       	ldi	r24, 0xF0	; 240
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 e5 22 	call	0x45ca	; 0x45ca <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
     2be:	88 81       	ld	r24, Y
     2c0:	84 60       	ori	r24, 0x04	; 4
     2c2:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
     2c4:	69 ee       	ldi	r22, 0xE9	; 233
     2c6:	73 e0       	ldi	r23, 0x03	; 3
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	c7 df       	rcall	.-114    	; 0x25c <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
     2ce:	88 81       	ld	r24, Y
     2d0:	88 61       	ori	r24, 0x18	; 24
     2d2:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
     2d4:	e0 ef       	ldi	r30, 0xF0	; 240
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	83 ff       	sbrs	r24, 3
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
     2de:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     2e2:	e0 e2       	ldi	r30, 0x20	; 32
     2e4:	f4 e0       	ldi	r31, 0x04	; 4
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
     2e8:	80 fd       	sbrc	r24, 0
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
     2ec:	e0 e2       	ldi	r30, 0x20	; 32
     2ee:	f4 e0       	ldi	r31, 0x04	; 4
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
     2f4:	dc 01       	movw	r26, r24
     2f6:	80 87       	std	Z+8, r24	; 0x08
     2f8:	91 87       	std	Z+9, r25	; 0x09
     2fa:	a2 87       	std	Z+10, r26	; 0x0a
     2fc:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
     2fe:	14 82       	std	Z+4, r1	; 0x04
     300:	15 82       	std	Z+5, r1	; 0x05
     302:	16 82       	std	Z+6, r1	; 0x06
     304:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     306:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
     308:	80 fd       	sbrc	r24, 0
     30a:	fd cf       	rjmp	.-6      	; 0x306 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
     30c:	e0 e2       	ldi	r30, 0x20	; 32
     30e:	f4 e0       	ldi	r31, 0x04	; 4
     310:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     316:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
     318:	80 fd       	sbrc	r24, 0
     31a:	fd cf       	rjmp	.-6      	; 0x316 <rtc_init+0x78>
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	0b b6       	in	r0, 0x3b	; 59
     32e:	0f 92       	push	r0
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ef 93       	push	r30
     34a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
     34c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
     350:	c0 91 1b 24 	lds	r28, 0x241B	; 0x80241b <rtc_data>
     354:	d0 91 1c 24 	lds	r29, 0x241C	; 0x80241c <rtc_data+0x1>
     358:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
     35a:	19 f0       	breq	.+6      	; 0x362 <__vector_11+0x40>
     35c:	8a df       	rcall	.-236    	; 0x272 <rtc_get_time>
     35e:	fe 01       	movw	r30, r28
}
     360:	19 95       	eicall
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <__portable_avr_delay_cycles>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void start_twi_onboard()
{
     38c:	04 c0       	rjmp	.+8      	; 0x396 <__portable_avr_delay_cycles+0xa>
     38e:	61 50       	subi	r22, 0x01	; 1
     390:	71 09       	sbc	r23, r1
     392:	81 09       	sbc	r24, r1
     394:	91 09       	sbc	r25, r1
     396:	61 15       	cp	r22, r1
     398:	71 05       	cpc	r23, r1
     39a:	81 05       	cpc	r24, r1
     39c:	91 05       	cpc	r25, r1
     39e:	b9 f7       	brne	.-18     	; 0x38e <__portable_avr_delay_cycles+0x2>
     3a0:	08 95       	ret

000003a2 <twi_init>:
     3a2:	e0 e8       	ldi	r30, 0x80	; 128
     3a4:	f6 e0       	ldi	r31, 0x06	; 6
     3a6:	88 e3       	ldi	r24, 0x38	; 56
     3a8:	80 8b       	std	Z+16, r24	; 0x10
     3aa:	81 8b       	std	Z+17, r24	; 0x11
     3ac:	e0 e4       	ldi	r30, 0x40	; 64
     3ae:	f6 e0       	ldi	r31, 0x06	; 6
     3b0:	80 8b       	std	Z+16, r24	; 0x10
     3b2:	81 8b       	std	Z+17, r24	; 0x11
     3b4:	08 95       	ret

000003b6 <start_twi_lcd>:

/* TWI2 - LCD Port */
void start_twi_lcd()
{
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
     3b6:	e6 e0       	ldi	r30, 0x06	; 6
     3b8:	f0 e2       	ldi	r31, 0x20	; 32
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	84 83       	std	Z+4, r24	; 0x04
     3c4:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
     3c6:	80 87       	std	Z+8, r24	; 0x08
     3c8:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
     3ca:	41 e0       	ldi	r20, 0x01	; 1
     3cc:	bf 01       	movw	r22, r30
     3ce:	80 e8       	ldi	r24, 0x80	; 128
     3d0:	94 e0       	ldi	r25, 0x04	; 4
     3d2:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
     3d6:	80 91 d7 22 	lds	r24, 0x22D7	; 0x8022d7 <twi2_m_data>
     3da:	80 93 df 22 	sts	0x22DF, r24	; 0x8022df <g_twi2_lcd_version>
	
	if (g_twi2_lcd_version >= 0x11) {
     3de:	81 31       	cpi	r24, 0x11	; 17
     3e0:	88 f0       	brcs	.+34     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
     3e2:	e6 e0       	ldi	r30, 0x06	; 6
     3e4:	f0 e2       	ldi	r31, 0x20	; 32
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
     3ea:	80 e1       	ldi	r24, 0x10	; 16
     3ec:	80 93 d7 22 	sts	0x22D7, r24	; 0x8022d7 <twi2_m_data>
		twi2_packet.length = 1;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	80 87       	std	Z+8, r24	; 0x08
     3f6:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	bf 01       	movw	r22, r30
     3fc:	80 e8       	ldi	r24, 0x80	; 128
     3fe:	94 e0       	ldi	r25, 0x04	; 4
     400:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
	}
	
#if 1
	/* Show PWM in % when mode 0x20 is selected */
	if (g_twi2_lcd_version == 0x10) {
     404:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <g_twi2_lcd_version>
     408:	80 31       	cpi	r24, 0x10	; 16
     40a:	a9 f4       	brne	.+42     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
     40c:	e6 e0       	ldi	r30, 0x06	; 6
     40e:	f0 e2       	ldi	r31, 0x20	; 32
     410:	84 e8       	ldi	r24, 0x84	; 132
     412:	81 83       	std	Z+1, r24	; 0x01
	twi2_m_data[0] = 1;
     414:	a7 ed       	ldi	r26, 0xD7	; 215
     416:	b2 e2       	ldi	r27, 0x22	; 34
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	8c 93       	st	X, r24
	twi2_m_data[1] = 128;
     41c:	80 e8       	ldi	r24, 0x80	; 128
     41e:	11 96       	adiw	r26, 0x01	; 1
     420:	8c 93       	st	X, r24
	twi2_packet.length = 2;
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	80 87       	std	Z+8, r24	; 0x08
     428:	91 87       	std	Z+9, r25	; 0x09
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	bf 01       	movw	r22, r30
     42e:	80 e8       	ldi	r24, 0x80	; 128
     430:	94 e0       	ldi	r25, 0x04	; 4
     432:	0c 94 c4 0d 	jmp	0x1b88	; 0x1b88 <twi_master_transfer>
     436:	08 95       	ret

00000438 <twi_start>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     438:	60 e4       	ldi	r22, 0x40	; 64
     43a:	85 e0       	ldi	r24, 0x05	; 5
     43c:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
#else
#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
     440:	6a e1       	ldi	r22, 0x1A	; 26
     442:	70 e2       	ldi	r23, 0x20	; 32
     444:	80 ea       	ldi	r24, 0xA0	; 160
     446:	94 e0       	ldi	r25, 0x04	; 4
     448:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
     44c:	e0 ea       	ldi	r30, 0xA0	; 160
     44e:	f4 e0       	ldi	r31, 0x04	; 4
     450:	81 81       	ldd	r24, Z+1	; 0x01
     452:	88 60       	ori	r24, 0x08	; 8
     454:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     456:	60 e4       	ldi	r22, 0x40	; 64
     458:	83 e0       	ldi	r24, 0x03	; 3
     45a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
#else
#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
     45e:	61 e1       	ldi	r22, 0x11	; 17
     460:	70 e2       	ldi	r23, 0x20	; 32
     462:	80 e8       	ldi	r24, 0x80	; 128
     464:	94 e0       	ldi	r25, 0x04	; 4
     466:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <twi_master_init>
     46a:	e0 e8       	ldi	r30, 0x80	; 128
     46c:	f4 e0       	ldi	r31, 0x04	; 4
     46e:	81 81       	ldd	r24, Z+1	; 0x01
     470:	88 60       	ori	r24, 0x08	; 8
     472:	81 83       	std	Z+1, r24	; 0x01
	twi_master_enable(&TWI2_MASTER);
#endif
#endif

	// Give Smart-LCD some time to be ready
	delay_ms(300);
     474:	61 e6       	ldi	r22, 0x61	; 97
     476:	73 ee       	ldi	r23, 0xE3	; 227
     478:	86 e1       	ldi	r24, 0x16	; 22
     47a:	90 e0       	ldi	r25, 0x00	; 0

	/* Start each TWI channel devices */
	start_twi_onboard();
	start_twi_lcd();
     47c:	87 df       	rcall	.-242    	; 0x38c <__portable_avr_delay_cycles>
     47e:	9b cf       	rjmp	.-202    	; 0x3b6 <start_twi_lcd>
     480:	08 95       	ret

00000482 <task_twi_onboard>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void task_twi_onboard(uint32_t now, uint32_t last)
{
     482:	08 95       	ret

00000484 <task_twi_lcd>:
	
}

/* TWI2 - LCD Port */	
void task_twi_lcd(uint32_t now, uint32_t last)
{
     484:	08 95       	ret

00000486 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     486:	08 95       	ret

00000488 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     488:	81 15       	cp	r24, r1
     48a:	22 e0       	ldi	r18, 0x02	; 2
     48c:	92 07       	cpc	r25, r18
     48e:	69 f4       	brne	.+26     	; 0x4aa <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     490:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <adca_enable_count>
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	98 0f       	add	r25, r24
     498:	90 93 51 21 	sts	0x2151, r25	; 0x802151 <adca_enable_count>
     49c:	81 11       	cpse	r24, r1
     49e:	14 c0       	rjmp	.+40     	; 0x4c8 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     4a0:	62 e0       	ldi	r22, 0x02	; 2
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <sysclk_enable_module>
     4a8:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     4aa:	80 34       	cpi	r24, 0x40	; 64
     4ac:	92 40       	sbci	r25, 0x02	; 2
     4ae:	61 f4       	brne	.+24     	; 0x4c8 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     4b0:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <__data_end>
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	98 0f       	add	r25, r24
     4b8:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <__data_end>
     4bc:	81 11       	cpse	r24, r1
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     4c0:	62 e0       	ldi	r22, 0x02	; 2
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <sysclk_enable_module>
     4c8:	08 95       	ret

000004ca <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     4ca:	81 15       	cp	r24, r1
     4cc:	22 e0       	ldi	r18, 0x02	; 2
     4ce:	92 07       	cpc	r25, r18
     4d0:	61 f4       	brne	.+24     	; 0x4ea <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     4d2:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <adca_enable_count>
     4d6:	81 50       	subi	r24, 0x01	; 1
     4d8:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <adca_enable_count>
     4dc:	81 11       	cpse	r24, r1
     4de:	13 c0       	rjmp	.+38     	; 0x506 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     4e0:	62 e0       	ldi	r22, 0x02	; 2
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <sysclk_disable_module>
     4e8:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     4ea:	80 34       	cpi	r24, 0x40	; 64
     4ec:	92 40       	sbci	r25, 0x02	; 2
     4ee:	59 f4       	brne	.+22     	; 0x506 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     4f0:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <__data_end>
     4f4:	81 50       	subi	r24, 0x01	; 1
     4f6:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <__data_end>
     4fa:	81 11       	cpse	r24, r1
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <sysclk_disable_module>
     506:	08 95       	ret

00000508 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	0b b6       	in	r0, 0x3b	; 59
     514:	0f 92       	push	r0
     516:	2f 93       	push	r18
     518:	3f 93       	push	r19
     51a:	4f 93       	push	r20
     51c:	5f 93       	push	r21
     51e:	6f 93       	push	r22
     520:	7f 93       	push	r23
     522:	8f 93       	push	r24
     524:	9f 93       	push	r25
     526:	af 93       	push	r26
     528:	bf 93       	push	r27
     52a:	ef 93       	push	r30
     52c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     52e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     532:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     536:	e0 91 1f 24 	lds	r30, 0x241F	; 0x80241f <adca_callback>
     53a:	f0 91 20 24 	lds	r31, 0x2420	; 0x802420 <adca_callback+0x1>
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	19 95       	eicall
}
     546:	ff 91       	pop	r31
     548:	ef 91       	pop	r30
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0b be       	out	0x3b, r0	; 59
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     56c:	1f 92       	push	r1
     56e:	0f 92       	push	r0
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	0f 92       	push	r0
     574:	11 24       	eor	r1, r1
     576:	0b b6       	in	r0, 0x3b	; 59
     578:	0f 92       	push	r0
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     592:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     596:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     59a:	e0 91 1f 24 	lds	r30, 0x241F	; 0x80241f <adca_callback>
     59e:	f0 91 20 24 	lds	r31, 0x2420	; 0x802420 <adca_callback+0x1>
     5a2:	62 e0       	ldi	r22, 0x02	; 2
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	19 95       	eicall
}
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	7f 91       	pop	r23
     5b8:	6f 91       	pop	r22
     5ba:	5f 91       	pop	r21
     5bc:	4f 91       	pop	r20
     5be:	3f 91       	pop	r19
     5c0:	2f 91       	pop	r18
     5c2:	0f 90       	pop	r0
     5c4:	0b be       	out	0x3b, r0	; 59
     5c6:	0f 90       	pop	r0
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	0f 90       	pop	r0
     5cc:	1f 90       	pop	r1
     5ce:	18 95       	reti

000005d0 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     5d0:	1f 92       	push	r1
     5d2:	0f 92       	push	r0
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	0f 92       	push	r0
     5d8:	11 24       	eor	r1, r1
     5da:	0b b6       	in	r0, 0x3b	; 59
     5dc:	0f 92       	push	r0
     5de:	2f 93       	push	r18
     5e0:	3f 93       	push	r19
     5e2:	4f 93       	push	r20
     5e4:	5f 93       	push	r21
     5e6:	6f 93       	push	r22
     5e8:	7f 93       	push	r23
     5ea:	8f 93       	push	r24
     5ec:	9f 93       	push	r25
     5ee:	af 93       	push	r26
     5f0:	bf 93       	push	r27
     5f2:	ef 93       	push	r30
     5f4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     5f6:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     5fa:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     5fe:	e0 91 1f 24 	lds	r30, 0x241F	; 0x80241f <adca_callback>
     602:	f0 91 20 24 	lds	r31, 0x2420	; 0x802420 <adca_callback+0x1>
     606:	64 e0       	ldi	r22, 0x04	; 4
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	19 95       	eicall
}
     60e:	ff 91       	pop	r31
     610:	ef 91       	pop	r30
     612:	bf 91       	pop	r27
     614:	af 91       	pop	r26
     616:	9f 91       	pop	r25
     618:	8f 91       	pop	r24
     61a:	7f 91       	pop	r23
     61c:	6f 91       	pop	r22
     61e:	5f 91       	pop	r21
     620:	4f 91       	pop	r20
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0b be       	out	0x3b, r0	; 59
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     634:	1f 92       	push	r1
     636:	0f 92       	push	r0
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	0f 92       	push	r0
     63c:	11 24       	eor	r1, r1
     63e:	0b b6       	in	r0, 0x3b	; 59
     640:	0f 92       	push	r0
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	4f 93       	push	r20
     648:	5f 93       	push	r21
     64a:	6f 93       	push	r22
     64c:	7f 93       	push	r23
     64e:	8f 93       	push	r24
     650:	9f 93       	push	r25
     652:	af 93       	push	r26
     654:	bf 93       	push	r27
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     65a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     65e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     662:	e0 91 1f 24 	lds	r30, 0x241F	; 0x80241f <adca_callback>
     666:	f0 91 20 24 	lds	r31, 0x2420	; 0x802420 <adca_callback+0x1>
     66a:	68 e0       	ldi	r22, 0x08	; 8
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	92 e0       	ldi	r25, 0x02	; 2
     670:	19 95       	eicall
}
     672:	ff 91       	pop	r31
     674:	ef 91       	pop	r30
     676:	bf 91       	pop	r27
     678:	af 91       	pop	r26
     67a:	9f 91       	pop	r25
     67c:	8f 91       	pop	r24
     67e:	7f 91       	pop	r23
     680:	6f 91       	pop	r22
     682:	5f 91       	pop	r21
     684:	4f 91       	pop	r20
     686:	3f 91       	pop	r19
     688:	2f 91       	pop	r18
     68a:	0f 90       	pop	r0
     68c:	0b be       	out	0x3b, r0	; 59
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     698:	1f 92       	push	r1
     69a:	0f 92       	push	r0
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	0f 92       	push	r0
     6a0:	11 24       	eor	r1, r1
     6a2:	0b b6       	in	r0, 0x3b	; 59
     6a4:	0f 92       	push	r0
     6a6:	2f 93       	push	r18
     6a8:	3f 93       	push	r19
     6aa:	4f 93       	push	r20
     6ac:	5f 93       	push	r21
     6ae:	6f 93       	push	r22
     6b0:	7f 93       	push	r23
     6b2:	8f 93       	push	r24
     6b4:	9f 93       	push	r25
     6b6:	af 93       	push	r26
     6b8:	bf 93       	push	r27
     6ba:	ef 93       	push	r30
     6bc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     6be:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     6c2:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     6c6:	e0 91 1d 24 	lds	r30, 0x241D	; 0x80241d <adcb_callback>
     6ca:	f0 91 1e 24 	lds	r31, 0x241E	; 0x80241e <adcb_callback+0x1>
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	80 e4       	ldi	r24, 0x40	; 64
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	19 95       	eicall
}
     6d6:	ff 91       	pop	r31
     6d8:	ef 91       	pop	r30
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	7f 91       	pop	r23
     6e4:	6f 91       	pop	r22
     6e6:	5f 91       	pop	r21
     6e8:	4f 91       	pop	r20
     6ea:	3f 91       	pop	r19
     6ec:	2f 91       	pop	r18
     6ee:	0f 90       	pop	r0
     6f0:	0b be       	out	0x3b, r0	; 59
     6f2:	0f 90       	pop	r0
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	0f 90       	pop	r0
     6f8:	1f 90       	pop	r1
     6fa:	18 95       	reti

000006fc <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     6fc:	1f 92       	push	r1
     6fe:	0f 92       	push	r0
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	0f 92       	push	r0
     704:	11 24       	eor	r1, r1
     706:	0b b6       	in	r0, 0x3b	; 59
     708:	0f 92       	push	r0
     70a:	2f 93       	push	r18
     70c:	3f 93       	push	r19
     70e:	4f 93       	push	r20
     710:	5f 93       	push	r21
     712:	6f 93       	push	r22
     714:	7f 93       	push	r23
     716:	8f 93       	push	r24
     718:	9f 93       	push	r25
     71a:	af 93       	push	r26
     71c:	bf 93       	push	r27
     71e:	ef 93       	push	r30
     720:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     722:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     726:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     72a:	e0 91 1d 24 	lds	r30, 0x241D	; 0x80241d <adcb_callback>
     72e:	f0 91 1e 24 	lds	r31, 0x241E	; 0x80241e <adcb_callback+0x1>
     732:	62 e0       	ldi	r22, 0x02	; 2
     734:	80 e4       	ldi	r24, 0x40	; 64
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	19 95       	eicall
}
     73a:	ff 91       	pop	r31
     73c:	ef 91       	pop	r30
     73e:	bf 91       	pop	r27
     740:	af 91       	pop	r26
     742:	9f 91       	pop	r25
     744:	8f 91       	pop	r24
     746:	7f 91       	pop	r23
     748:	6f 91       	pop	r22
     74a:	5f 91       	pop	r21
     74c:	4f 91       	pop	r20
     74e:	3f 91       	pop	r19
     750:	2f 91       	pop	r18
     752:	0f 90       	pop	r0
     754:	0b be       	out	0x3b, r0	; 59
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	0b b6       	in	r0, 0x3b	; 59
     76c:	0f 92       	push	r0
     76e:	2f 93       	push	r18
     770:	3f 93       	push	r19
     772:	4f 93       	push	r20
     774:	5f 93       	push	r21
     776:	6f 93       	push	r22
     778:	7f 93       	push	r23
     77a:	8f 93       	push	r24
     77c:	9f 93       	push	r25
     77e:	af 93       	push	r26
     780:	bf 93       	push	r27
     782:	ef 93       	push	r30
     784:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     786:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     78a:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     78e:	e0 91 1d 24 	lds	r30, 0x241D	; 0x80241d <adcb_callback>
     792:	f0 91 1e 24 	lds	r31, 0x241E	; 0x80241e <adcb_callback+0x1>
     796:	64 e0       	ldi	r22, 0x04	; 4
     798:	80 e4       	ldi	r24, 0x40	; 64
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	19 95       	eicall
}
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	7f 91       	pop	r23
     7ac:	6f 91       	pop	r22
     7ae:	5f 91       	pop	r21
     7b0:	4f 91       	pop	r20
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	0f 90       	pop	r0
     7b8:	0b be       	out	0x3b, r0	; 59
     7ba:	0f 90       	pop	r0
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	0f 90       	pop	r0
     7c0:	1f 90       	pop	r1
     7c2:	18 95       	reti

000007c4 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     7c4:	1f 92       	push	r1
     7c6:	0f 92       	push	r0
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	0f 92       	push	r0
     7cc:	11 24       	eor	r1, r1
     7ce:	0b b6       	in	r0, 0x3b	; 59
     7d0:	0f 92       	push	r0
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     7ea:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     7ee:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     7f2:	e0 91 1d 24 	lds	r30, 0x241D	; 0x80241d <adcb_callback>
     7f6:	f0 91 1e 24 	lds	r31, 0x241E	; 0x80241e <adcb_callback+0x1>
     7fa:	68 e0       	ldi	r22, 0x08	; 8
     7fc:	80 e4       	ldi	r24, 0x40	; 64
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	19 95       	eicall
}
     802:	ff 91       	pop	r31
     804:	ef 91       	pop	r30
     806:	bf 91       	pop	r27
     808:	af 91       	pop	r26
     80a:	9f 91       	pop	r25
     80c:	8f 91       	pop	r24
     80e:	7f 91       	pop	r23
     810:	6f 91       	pop	r22
     812:	5f 91       	pop	r21
     814:	4f 91       	pop	r20
     816:	3f 91       	pop	r19
     818:	2f 91       	pop	r18
     81a:	0f 90       	pop	r0
     81c:	0b be       	out	0x3b, r0	; 59
     81e:	0f 90       	pop	r0
     820:	0f be       	out	0x3f, r0	; 63
     822:	0f 90       	pop	r0
     824:	1f 90       	pop	r1
     826:	18 95       	reti

00000828 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	1f 92       	push	r1
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	8c 01       	movw	r16, r24
     842:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     844:	81 15       	cp	r24, r1
     846:	22 e0       	ldi	r18, 0x02	; 2
     848:	92 07       	cpc	r25, r18
     84a:	81 f4       	brne	.+32     	; 0x86c <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     84c:	61 e2       	ldi	r22, 0x21	; 33
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     856:	c8 2e       	mov	r12, r24
     858:	d1 2c       	mov	r13, r1
     85a:	60 e2       	ldi	r22, 0x20	; 32
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     864:	dc 2c       	mov	r13, r12
     866:	cc 24       	eor	r12, r12
     868:	c8 2a       	or	r12, r24
     86a:	12 c0       	rjmp	.+36     	; 0x890 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     86c:	80 34       	cpi	r24, 0x40	; 64
     86e:	92 40       	sbci	r25, 0x02	; 2
     870:	d1 f5       	brne	.+116    	; 0x8e6 <adc_write_configuration+0xbe>
     872:	65 e2       	ldi	r22, 0x25	; 37
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     87c:	c8 2e       	mov	r12, r24
     87e:	d1 2c       	mov	r13, r1
     880:	64 e2       	ldi	r22, 0x24	; 36
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     88a:	dc 2c       	mov	r13, r12
     88c:	cc 24       	eor	r12, r12
     88e:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     890:	8f b7       	in	r24, 0x3f	; 63
     892:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     894:	f8 94       	cli
	return flags;
     896:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     898:	c8 01       	movw	r24, r16
     89a:	f6 dd       	rcall	.-1044   	; 0x488 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     89c:	f8 01       	movw	r30, r16
     89e:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	90 83       	st	Z, r25
	adc->CAL = cal;
     8a4:	c4 86       	std	Z+12, r12	; 0x0c
     8a6:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     8a8:	f7 01       	movw	r30, r14
     8aa:	25 81       	ldd	r18, Z+5	; 0x05
     8ac:	36 81       	ldd	r19, Z+6	; 0x06
     8ae:	f8 01       	movw	r30, r16
     8b0:	20 8f       	std	Z+24, r18	; 0x18
     8b2:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     8b4:	f7 01       	movw	r30, r14
     8b6:	92 81       	ldd	r25, Z+2	; 0x02
     8b8:	f8 01       	movw	r30, r16
     8ba:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     8bc:	f7 01       	movw	r30, r14
     8be:	94 81       	ldd	r25, Z+4	; 0x04
     8c0:	f8 01       	movw	r30, r16
     8c2:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     8c4:	f7 01       	movw	r30, r14
     8c6:	93 81       	ldd	r25, Z+3	; 0x03
     8c8:	f8 01       	movw	r30, r16
     8ca:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     8cc:	f7 01       	movw	r30, r14
     8ce:	91 81       	ldd	r25, Z+1	; 0x01
     8d0:	f8 01       	movw	r30, r16
     8d2:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     8d4:	81 70       	andi	r24, 0x01	; 1
     8d6:	f7 01       	movw	r30, r14
     8d8:	90 81       	ld	r25, Z
     8da:	89 2b       	or	r24, r25
     8dc:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     8de:	80 83       	st	Z, r24
     8e0:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8e2:	f3 dd       	rcall	.-1050   	; 0x4ca <adc_disable_clock>

	cpu_irq_restore(flags);
}
     8e4:	bf be       	out	0x3f, r11	; 63
     8e6:	0f 90       	pop	r0
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	08 95       	ret

000008fc <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	1f 92       	push	r1
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	8c 01       	movw	r16, r24
     912:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     914:	8f b7       	in	r24, 0x3f	; 63
     916:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     918:	f8 94       	cli
	return flags;
     91a:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     91c:	c8 01       	movw	r24, r16
     91e:	b4 dd       	rcall	.-1176   	; 0x488 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     920:	f8 01       	movw	r30, r16
     922:	80 81       	ld	r24, Z
     924:	80 7c       	andi	r24, 0xC0	; 192
     926:	f7 01       	movw	r30, r14
     928:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     92a:	f8 01       	movw	r30, r16
     92c:	80 8d       	ldd	r24, Z+24	; 0x18
     92e:	91 8d       	ldd	r25, Z+25	; 0x19
     930:	f7 01       	movw	r30, r14
     932:	85 83       	std	Z+5, r24	; 0x05
     934:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     936:	f8 01       	movw	r30, r16
     938:	82 81       	ldd	r24, Z+2	; 0x02
     93a:	f7 01       	movw	r30, r14
     93c:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     93e:	f8 01       	movw	r30, r16
     940:	84 81       	ldd	r24, Z+4	; 0x04
     942:	f7 01       	movw	r30, r14
     944:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     946:	f8 01       	movw	r30, r16
     948:	83 81       	ldd	r24, Z+3	; 0x03
     94a:	f7 01       	movw	r30, r14
     94c:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     94e:	f8 01       	movw	r30, r16
     950:	81 81       	ldd	r24, Z+1	; 0x01
     952:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     954:	81 83       	std	Z+1, r24	; 0x01
     956:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     958:	b8 dd       	rcall	.-1168   	; 0x4ca <adc_disable_clock>

	cpu_irq_restore(flags);
}
     95a:	df be       	out	0x3f, r13	; 63
     95c:	0f 90       	pop	r0
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	08 95       	ret

0000096e <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     96e:	af 92       	push	r10
     970:	bf 92       	push	r11
     972:	cf 92       	push	r12
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	1f 92       	push	r1
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	6c 01       	movw	r12, r24
     98a:	b6 2e       	mov	r11, r22
     98c:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     98e:	86 2f       	mov	r24, r22
     990:	83 70       	andi	r24, 0x03	; 3
     992:	29 f4       	brne	.+10     	; 0x99e <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     994:	96 2f       	mov	r25, r22
     996:	96 95       	lsr	r25
     998:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     99e:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     9a0:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     9a2:	90 ff       	sbrs	r25, 0
		index++;
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     9a6:	86 01       	movw	r16, r12
     9a8:	00 5e       	subi	r16, 0xE0	; 224
     9aa:	1f 4f       	sbci	r17, 0xFF	; 255
     9ac:	98 e0       	ldi	r25, 0x08	; 8
     9ae:	89 9f       	mul	r24, r25
     9b0:	00 0d       	add	r16, r0
     9b2:	11 1d       	adc	r17, r1
     9b4:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     9b6:	8f b7       	in	r24, 0x3f	; 63
     9b8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     9ba:	f8 94       	cli
	return flags;
     9bc:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     9be:	c6 01       	movw	r24, r12
     9c0:	63 dd       	rcall	.-1338   	; 0x488 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     9c2:	f7 01       	movw	r30, r14
     9c4:	80 81       	ld	r24, Z
     9c6:	f8 01       	movw	r30, r16
     9c8:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     9ca:	f7 01       	movw	r30, r14
     9cc:	82 81       	ldd	r24, Z+2	; 0x02
     9ce:	f8 01       	movw	r30, r16
     9d0:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     9d2:	f7 01       	movw	r30, r14
     9d4:	81 81       	ldd	r24, Z+1	; 0x01
     9d6:	f8 01       	movw	r30, r16
     9d8:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     9da:	b0 fe       	sbrs	r11, 0
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     9de:	f7 01       	movw	r30, r14
     9e0:	83 81       	ldd	r24, Z+3	; 0x03
     9e2:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     9e4:	86 83       	std	Z+6, r24	; 0x06
     9e6:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9e8:	70 dd       	rcall	.-1312   	; 0x4ca <adc_disable_clock>

	cpu_irq_restore(flags);
}
     9ea:	af be       	out	0x3f, r10	; 63
     9ec:	0f 90       	pop	r0
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	08 95       	ret

00000a04 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     a04:	af 92       	push	r10
     a06:	bf 92       	push	r11
     a08:	cf 92       	push	r12
     a0a:	df 92       	push	r13
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	1f 92       	push	r1
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	6c 01       	movw	r12, r24
     a20:	b6 2e       	mov	r11, r22
     a22:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     a24:	86 2f       	mov	r24, r22
     a26:	83 70       	andi	r24, 0x03	; 3
     a28:	29 f4       	brne	.+10     	; 0xa34 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     a2a:	96 2f       	mov	r25, r22
     a2c:	96 95       	lsr	r25
     a2e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     a34:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     a36:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     a38:	90 ff       	sbrs	r25, 0
		index++;
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     a3c:	86 01       	movw	r16, r12
     a3e:	00 5e       	subi	r16, 0xE0	; 224
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	98 e0       	ldi	r25, 0x08	; 8
     a44:	89 9f       	mul	r24, r25
     a46:	00 0d       	add	r16, r0
     a48:	11 1d       	adc	r17, r1
     a4a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a4c:	8f b7       	in	r24, 0x3f	; 63
     a4e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     a50:	f8 94       	cli
	return flags;
     a52:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     a54:	c6 01       	movw	r24, r12
     a56:	18 dd       	rcall	.-1488   	; 0x488 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     a58:	f8 01       	movw	r30, r16
     a5a:	80 81       	ld	r24, Z
     a5c:	f7 01       	movw	r30, r14
     a5e:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     a60:	f8 01       	movw	r30, r16
     a62:	82 81       	ldd	r24, Z+2	; 0x02
     a64:	f7 01       	movw	r30, r14
     a66:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     a68:	f8 01       	movw	r30, r16
     a6a:	81 81       	ldd	r24, Z+1	; 0x01
     a6c:	f7 01       	movw	r30, r14
     a6e:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     a70:	b0 fe       	sbrs	r11, 0
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     a74:	f8 01       	movw	r30, r16
     a76:	86 81       	ldd	r24, Z+6	; 0x06
     a78:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     a7a:	83 83       	std	Z+3, r24	; 0x03
     a7c:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a7e:	25 dd       	rcall	.-1462   	; 0x4ca <adc_disable_clock>

	cpu_irq_restore(flags);
}
     a80:	af be       	out	0x3f, r10	; 63
     a82:	0f 90       	pop	r0
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	bf 90       	pop	r11
     a96:	af 90       	pop	r10
     a98:	08 95       	ret

00000a9a <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
     a9a:	80 32       	cpi	r24, 0x20	; 32
     a9c:	93 40       	sbci	r25, 0x03	; 3
     a9e:	61 f4       	brne	.+24     	; 0xab8 <dac_enable_clock+0x1e>
     aa0:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <dacb_enable_count>
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	98 0f       	add	r25, r24
     aa8:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <dacb_enable_count>
     aac:	81 11       	cpse	r24, r1
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <dac_enable_clock+0x1e>
     ab0:	64 e0       	ldi	r22, 0x04	; 4
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <sysclk_enable_module>
     ab8:	08 95       	ret

00000aba <dac_disable_clock>:
     aba:	80 32       	cpi	r24, 0x20	; 32
     abc:	93 40       	sbci	r25, 0x03	; 3
     abe:	59 f4       	brne	.+22     	; 0xad6 <dac_disable_clock+0x1c>
     ac0:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <dacb_enable_count>
     ac4:	81 50       	subi	r24, 0x01	; 1
     ac6:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <dacb_enable_count>
     aca:	81 11       	cpse	r24, r1
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <dac_disable_clock+0x1c>
     ace:	64 e0       	ldi	r22, 0x04	; 4
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <sysclk_disable_module>
     ad6:	08 95       	ret

00000ad8 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
     ad8:	9f 92       	push	r9
     ada:	af 92       	push	r10
     adc:	bf 92       	push	r11
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	1f 92       	push	r1
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
     af4:	80 32       	cpi	r24, 0x20	; 32
     af6:	23 e0       	ldi	r18, 0x03	; 3
     af8:	92 07       	cpc	r25, r18
     afa:	09 f0       	breq	.+2      	; 0xafe <dac_write_configuration+0x26>
     afc:	3c c0       	rjmp	.+120    	; 0xb76 <dac_write_configuration+0x9e>
     afe:	7b 01       	movw	r14, r22
     b00:	8c 01       	movw	r16, r24
     b02:	63 e3       	ldi	r22, 0x33	; 51
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
     b0c:	98 2e       	mov	r9, r24
     b0e:	62 e3       	ldi	r22, 0x32	; 50
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
     b18:	a8 2e       	mov	r10, r24
     b1a:	67 e3       	ldi	r22, 0x37	; 55
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
     b24:	b8 2e       	mov	r11, r24
     b26:	66 e3       	ldi	r22, 0x36	; 54
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
     b30:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b32:	8f b7       	in	r24, 0x3f	; 63
     b34:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b36:	f8 94       	cli
	return flags;
     b38:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     b3a:	c8 01       	movw	r24, r16
     b3c:	ae df       	rcall	.-164    	; 0xa9a <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
     b3e:	f8 01       	movw	r30, r16
     b40:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
     b42:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
     b44:	f7 01       	movw	r30, r14
     b46:	91 81       	ldd	r25, Z+1	; 0x01
     b48:	f8 01       	movw	r30, r16
     b4a:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
     b4c:	f7 01       	movw	r30, r14
     b4e:	92 81       	ldd	r25, Z+2	; 0x02
     b50:	f8 01       	movw	r30, r16
     b52:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
     b54:	f7 01       	movw	r30, r14
     b56:	93 81       	ldd	r25, Z+3	; 0x03
     b58:	f8 01       	movw	r30, r16
     b5a:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
     b5c:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
     b5e:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
     b60:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
     b62:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
     b64:	81 70       	andi	r24, 0x01	; 1
     b66:	f7 01       	movw	r30, r14
     b68:	90 81       	ld	r25, Z
     b6a:	89 2b       	or	r24, r25
     b6c:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
     b6e:	80 83       	st	Z, r24
     b70:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b72:	a3 df       	rcall	.-186    	; 0xaba <dac_disable_clock>
	cpu_irq_restore(flags);
}
     b74:	df be       	out	0x3f, r13	; 63
     b76:	0f 90       	pop	r0
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	9f 90       	pop	r9
     b8e:	08 95       	ret

00000b90 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
     b90:	df 92       	push	r13
     b92:	ef 92       	push	r14
     b94:	ff 92       	push	r15
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	1f 92       	push	r1
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	8c 01       	movw	r16, r24
     ba6:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ba8:	8f b7       	in	r24, 0x3f	; 63
     baa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     bac:	f8 94       	cli
	return flags;
     bae:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     bb0:	c8 01       	movw	r24, r16
     bb2:	73 df       	rcall	.-282    	; 0xa9a <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
     bb4:	f8 01       	movw	r30, r16
     bb6:	80 81       	ld	r24, Z
     bb8:	8e 7f       	andi	r24, 0xFE	; 254
     bba:	f7 01       	movw	r30, r14
     bbc:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
     bbe:	f8 01       	movw	r30, r16
     bc0:	81 81       	ldd	r24, Z+1	; 0x01
     bc2:	f7 01       	movw	r30, r14
     bc4:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
     bc6:	f8 01       	movw	r30, r16
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	f7 01       	movw	r30, r14
     bcc:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
     bce:	f8 01       	movw	r30, r16
     bd0:	83 81       	ldd	r24, Z+3	; 0x03
     bd2:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
     bd4:	83 83       	std	Z+3, r24	; 0x03
     bd6:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bd8:	70 df       	rcall	.-288    	; 0xaba <dac_disable_clock>
	cpu_irq_restore(flags);
}
     bda:	df be       	out	0x3f, r13	; 63
     bdc:	0f 90       	pop	r0
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	08 95       	ret

00000bee <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	0b b6       	in	r0, 0x3b	; 59
     bfa:	0f 92       	push	r0
     bfc:	2f 93       	push	r18
     bfe:	3f 93       	push	r19
     c00:	4f 93       	push	r20
     c02:	5f 93       	push	r21
     c04:	6f 93       	push	r22
     c06:	7f 93       	push	r23
     c08:	8f 93       	push	r24
     c0a:	9f 93       	push	r25
     c0c:	af 93       	push	r26
     c0e:	bf 93       	push	r27
     c10:	ef 93       	push	r30
     c12:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     c14:	e0 91 99 21 	lds	r30, 0x2199	; 0x802199 <tc_tcc0_ovf_callback>
     c18:	f0 91 9a 21 	lds	r31, 0x219A	; 0x80219a <tc_tcc0_ovf_callback+0x1>
     c1c:	30 97       	sbiw	r30, 0x00	; 0
     c1e:	09 f0       	breq	.+2      	; 0xc22 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     c20:	19 95       	eicall
	}
}
     c22:	ff 91       	pop	r31
     c24:	ef 91       	pop	r30
     c26:	bf 91       	pop	r27
     c28:	af 91       	pop	r26
     c2a:	9f 91       	pop	r25
     c2c:	8f 91       	pop	r24
     c2e:	7f 91       	pop	r23
     c30:	6f 91       	pop	r22
     c32:	5f 91       	pop	r21
     c34:	4f 91       	pop	r20
     c36:	3f 91       	pop	r19
     c38:	2f 91       	pop	r18
     c3a:	0f 90       	pop	r0
     c3c:	0b be       	out	0x3b, r0	; 59
     c3e:	0f 90       	pop	r0
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	0f 90       	pop	r0
     c44:	1f 90       	pop	r1
     c46:	18 95       	reti

00000c48 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     c48:	1f 92       	push	r1
     c4a:	0f 92       	push	r0
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	0f 92       	push	r0
     c50:	11 24       	eor	r1, r1
     c52:	0b b6       	in	r0, 0x3b	; 59
     c54:	0f 92       	push	r0
     c56:	2f 93       	push	r18
     c58:	3f 93       	push	r19
     c5a:	4f 93       	push	r20
     c5c:	5f 93       	push	r21
     c5e:	6f 93       	push	r22
     c60:	7f 93       	push	r23
     c62:	8f 93       	push	r24
     c64:	9f 93       	push	r25
     c66:	af 93       	push	r26
     c68:	bf 93       	push	r27
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     c6e:	e0 91 97 21 	lds	r30, 0x2197	; 0x802197 <tc_tcc0_err_callback>
     c72:	f0 91 98 21 	lds	r31, 0x2198	; 0x802198 <tc_tcc0_err_callback+0x1>
     c76:	30 97       	sbiw	r30, 0x00	; 0
     c78:	09 f0       	breq	.+2      	; 0xc7c <__vector_15+0x34>
		tc_tcc0_err_callback();
     c7a:	19 95       	eicall
	}
}
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	bf 91       	pop	r27
     c82:	af 91       	pop	r26
     c84:	9f 91       	pop	r25
     c86:	8f 91       	pop	r24
     c88:	7f 91       	pop	r23
     c8a:	6f 91       	pop	r22
     c8c:	5f 91       	pop	r21
     c8e:	4f 91       	pop	r20
     c90:	3f 91       	pop	r19
     c92:	2f 91       	pop	r18
     c94:	0f 90       	pop	r0
     c96:	0b be       	out	0x3b, r0	; 59
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	0b b6       	in	r0, 0x3b	; 59
     cae:	0f 92       	push	r0
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     cc8:	e0 91 95 21 	lds	r30, 0x2195	; 0x802195 <tc_tcc0_cca_callback>
     ccc:	f0 91 96 21 	lds	r31, 0x2196	; 0x802196 <tc_tcc0_cca_callback+0x1>
     cd0:	30 97       	sbiw	r30, 0x00	; 0
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     cd4:	19 95       	eicall
	}
}
     cd6:	ff 91       	pop	r31
     cd8:	ef 91       	pop	r30
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	0f 90       	pop	r0
     cf0:	0b be       	out	0x3b, r0	; 59
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     cfc:	1f 92       	push	r1
     cfe:	0f 92       	push	r0
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	0f 92       	push	r0
     d04:	11 24       	eor	r1, r1
     d06:	0b b6       	in	r0, 0x3b	; 59
     d08:	0f 92       	push	r0
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     d22:	e0 91 93 21 	lds	r30, 0x2193	; 0x802193 <tc_tcc0_ccb_callback>
     d26:	f0 91 94 21 	lds	r31, 0x2194	; 0x802194 <tc_tcc0_ccb_callback+0x1>
     d2a:	30 97       	sbiw	r30, 0x00	; 0
     d2c:	09 f0       	breq	.+2      	; 0xd30 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     d2e:	19 95       	eicall
	}
}
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0b be       	out	0x3b, r0	; 59
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	0b b6       	in	r0, 0x3b	; 59
     d62:	0f 92       	push	r0
     d64:	2f 93       	push	r18
     d66:	3f 93       	push	r19
     d68:	4f 93       	push	r20
     d6a:	5f 93       	push	r21
     d6c:	6f 93       	push	r22
     d6e:	7f 93       	push	r23
     d70:	8f 93       	push	r24
     d72:	9f 93       	push	r25
     d74:	af 93       	push	r26
     d76:	bf 93       	push	r27
     d78:	ef 93       	push	r30
     d7a:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     d7c:	e0 91 91 21 	lds	r30, 0x2191	; 0x802191 <tc_tcc0_ccc_callback>
     d80:	f0 91 92 21 	lds	r31, 0x2192	; 0x802192 <tc_tcc0_ccc_callback+0x1>
     d84:	30 97       	sbiw	r30, 0x00	; 0
     d86:	09 f0       	breq	.+2      	; 0xd8a <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     d88:	19 95       	eicall
	}
}
     d8a:	ff 91       	pop	r31
     d8c:	ef 91       	pop	r30
     d8e:	bf 91       	pop	r27
     d90:	af 91       	pop	r26
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	7f 91       	pop	r23
     d98:	6f 91       	pop	r22
     d9a:	5f 91       	pop	r21
     d9c:	4f 91       	pop	r20
     d9e:	3f 91       	pop	r19
     da0:	2f 91       	pop	r18
     da2:	0f 90       	pop	r0
     da4:	0b be       	out	0x3b, r0	; 59
     da6:	0f 90       	pop	r0
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	0f 90       	pop	r0
     dac:	1f 90       	pop	r1
     dae:	18 95       	reti

00000db0 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     db0:	1f 92       	push	r1
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	0f 92       	push	r0
     db8:	11 24       	eor	r1, r1
     dba:	0b b6       	in	r0, 0x3b	; 59
     dbc:	0f 92       	push	r0
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	4f 93       	push	r20
     dc4:	5f 93       	push	r21
     dc6:	6f 93       	push	r22
     dc8:	7f 93       	push	r23
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	af 93       	push	r26
     dd0:	bf 93       	push	r27
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     dd6:	e0 91 8f 21 	lds	r30, 0x218F	; 0x80218f <tc_tcc0_ccd_callback>
     dda:	f0 91 90 21 	lds	r31, 0x2190	; 0x802190 <tc_tcc0_ccd_callback+0x1>
     dde:	30 97       	sbiw	r30, 0x00	; 0
     de0:	09 f0       	breq	.+2      	; 0xde4 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     de2:	19 95       	eicall
	}
}
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	9f 91       	pop	r25
     dee:	8f 91       	pop	r24
     df0:	7f 91       	pop	r23
     df2:	6f 91       	pop	r22
     df4:	5f 91       	pop	r21
     df6:	4f 91       	pop	r20
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	0b be       	out	0x3b, r0	; 59
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	0b b6       	in	r0, 0x3b	; 59
     e16:	0f 92       	push	r0
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	ef 93       	push	r30
     e2e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     e30:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <tc_tcc1_ovf_callback>
     e34:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <tc_tcc1_ovf_callback+0x1>
     e38:	30 97       	sbiw	r30, 0x00	; 0
     e3a:	09 f0       	breq	.+2      	; 0xe3e <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     e3c:	19 95       	eicall
	}
}
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0b be       	out	0x3b, r0	; 59
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	0b b6       	in	r0, 0x3b	; 59
     e70:	0f 92       	push	r0
     e72:	2f 93       	push	r18
     e74:	3f 93       	push	r19
     e76:	4f 93       	push	r20
     e78:	5f 93       	push	r21
     e7a:	6f 93       	push	r22
     e7c:	7f 93       	push	r23
     e7e:	8f 93       	push	r24
     e80:	9f 93       	push	r25
     e82:	af 93       	push	r26
     e84:	bf 93       	push	r27
     e86:	ef 93       	push	r30
     e88:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     e8a:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <tc_tcc1_err_callback>
     e8e:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <tc_tcc1_err_callback+0x1>
     e92:	30 97       	sbiw	r30, 0x00	; 0
     e94:	09 f0       	breq	.+2      	; 0xe98 <__vector_21+0x34>
		tc_tcc1_err_callback();
     e96:	19 95       	eicall
	}
}
     e98:	ff 91       	pop	r31
     e9a:	ef 91       	pop	r30
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	0f 90       	pop	r0
     eb2:	0b be       	out	0x3b, r0	; 59
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	0b b6       	in	r0, 0x3b	; 59
     eca:	0f 92       	push	r0
     ecc:	2f 93       	push	r18
     ece:	3f 93       	push	r19
     ed0:	4f 93       	push	r20
     ed2:	5f 93       	push	r21
     ed4:	6f 93       	push	r22
     ed6:	7f 93       	push	r23
     ed8:	8f 93       	push	r24
     eda:	9f 93       	push	r25
     edc:	af 93       	push	r26
     ede:	bf 93       	push	r27
     ee0:	ef 93       	push	r30
     ee2:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     ee4:	e0 91 89 21 	lds	r30, 0x2189	; 0x802189 <tc_tcc1_cca_callback>
     ee8:	f0 91 8a 21 	lds	r31, 0x218A	; 0x80218a <tc_tcc1_cca_callback+0x1>
     eec:	30 97       	sbiw	r30, 0x00	; 0
     eee:	09 f0       	breq	.+2      	; 0xef2 <__vector_22+0x34>
		tc_tcc1_cca_callback();
     ef0:	19 95       	eicall
	}
}
     ef2:	ff 91       	pop	r31
     ef4:	ef 91       	pop	r30
     ef6:	bf 91       	pop	r27
     ef8:	af 91       	pop	r26
     efa:	9f 91       	pop	r25
     efc:	8f 91       	pop	r24
     efe:	7f 91       	pop	r23
     f00:	6f 91       	pop	r22
     f02:	5f 91       	pop	r21
     f04:	4f 91       	pop	r20
     f06:	3f 91       	pop	r19
     f08:	2f 91       	pop	r18
     f0a:	0f 90       	pop	r0
     f0c:	0b be       	out	0x3b, r0	; 59
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	0b b6       	in	r0, 0x3b	; 59
     f24:	0f 92       	push	r0
     f26:	2f 93       	push	r18
     f28:	3f 93       	push	r19
     f2a:	4f 93       	push	r20
     f2c:	5f 93       	push	r21
     f2e:	6f 93       	push	r22
     f30:	7f 93       	push	r23
     f32:	8f 93       	push	r24
     f34:	9f 93       	push	r25
     f36:	af 93       	push	r26
     f38:	bf 93       	push	r27
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     f3e:	e0 91 87 21 	lds	r30, 0x2187	; 0x802187 <tc_tcc1_ccb_callback>
     f42:	f0 91 88 21 	lds	r31, 0x2188	; 0x802188 <tc_tcc1_ccb_callback+0x1>
     f46:	30 97       	sbiw	r30, 0x00	; 0
     f48:	09 f0       	breq	.+2      	; 0xf4c <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     f4a:	19 95       	eicall
	}
}
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	bf 91       	pop	r27
     f52:	af 91       	pop	r26
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	7f 91       	pop	r23
     f5a:	6f 91       	pop	r22
     f5c:	5f 91       	pop	r21
     f5e:	4f 91       	pop	r20
     f60:	3f 91       	pop	r19
     f62:	2f 91       	pop	r18
     f64:	0f 90       	pop	r0
     f66:	0b be       	out	0x3b, r0	; 59
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	0b b6       	in	r0, 0x3b	; 59
     f7e:	0f 92       	push	r0
     f80:	2f 93       	push	r18
     f82:	3f 93       	push	r19
     f84:	4f 93       	push	r20
     f86:	5f 93       	push	r21
     f88:	6f 93       	push	r22
     f8a:	7f 93       	push	r23
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
     f90:	af 93       	push	r26
     f92:	bf 93       	push	r27
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     f98:	e0 91 85 21 	lds	r30, 0x2185	; 0x802185 <tc_tcd0_ovf_callback>
     f9c:	f0 91 86 21 	lds	r31, 0x2186	; 0x802186 <tc_tcd0_ovf_callback+0x1>
     fa0:	30 97       	sbiw	r30, 0x00	; 0
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     fa4:	19 95       	eicall
	}
}
     fa6:	ff 91       	pop	r31
     fa8:	ef 91       	pop	r30
     faa:	bf 91       	pop	r27
     fac:	af 91       	pop	r26
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	7f 91       	pop	r23
     fb4:	6f 91       	pop	r22
     fb6:	5f 91       	pop	r21
     fb8:	4f 91       	pop	r20
     fba:	3f 91       	pop	r19
     fbc:	2f 91       	pop	r18
     fbe:	0f 90       	pop	r0
     fc0:	0b be       	out	0x3b, r0	; 59
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	0b b6       	in	r0, 0x3b	; 59
     fd8:	0f 92       	push	r0
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	4f 93       	push	r20
     fe0:	5f 93       	push	r21
     fe2:	6f 93       	push	r22
     fe4:	7f 93       	push	r23
     fe6:	8f 93       	push	r24
     fe8:	9f 93       	push	r25
     fea:	af 93       	push	r26
     fec:	bf 93       	push	r27
     fee:	ef 93       	push	r30
     ff0:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     ff2:	e0 91 83 21 	lds	r30, 0x2183	; 0x802183 <tc_tcd0_err_callback>
     ff6:	f0 91 84 21 	lds	r31, 0x2184	; 0x802184 <tc_tcd0_err_callback+0x1>
     ffa:	30 97       	sbiw	r30, 0x00	; 0
     ffc:	09 f0       	breq	.+2      	; 0x1000 <__vector_78+0x34>
		tc_tcd0_err_callback();
     ffe:	19 95       	eicall
	}
}
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0b be       	out	0x3b, r0	; 59
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	0b b6       	in	r0, 0x3b	; 59
    1032:	0f 92       	push	r0
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    104c:	e0 91 81 21 	lds	r30, 0x2181	; 0x802181 <tc_tcd0_cca_callback>
    1050:	f0 91 82 21 	lds	r31, 0x2182	; 0x802182 <tc_tcd0_cca_callback+0x1>
    1054:	30 97       	sbiw	r30, 0x00	; 0
    1056:	09 f0       	breq	.+2      	; 0x105a <__vector_79+0x34>
		tc_tcd0_cca_callback();
    1058:	19 95       	eicall
	}
}
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0b be       	out	0x3b, r0	; 59
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	0f 90       	pop	r0
    107c:	1f 90       	pop	r1
    107e:	18 95       	reti

00001080 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1080:	1f 92       	push	r1
    1082:	0f 92       	push	r0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	0f 92       	push	r0
    1088:	11 24       	eor	r1, r1
    108a:	0b b6       	in	r0, 0x3b	; 59
    108c:	0f 92       	push	r0
    108e:	2f 93       	push	r18
    1090:	3f 93       	push	r19
    1092:	4f 93       	push	r20
    1094:	5f 93       	push	r21
    1096:	6f 93       	push	r22
    1098:	7f 93       	push	r23
    109a:	8f 93       	push	r24
    109c:	9f 93       	push	r25
    109e:	af 93       	push	r26
    10a0:	bf 93       	push	r27
    10a2:	ef 93       	push	r30
    10a4:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    10a6:	e0 91 7f 21 	lds	r30, 0x217F	; 0x80217f <tc_tcd0_ccb_callback>
    10aa:	f0 91 80 21 	lds	r31, 0x2180	; 0x802180 <tc_tcd0_ccb_callback+0x1>
    10ae:	30 97       	sbiw	r30, 0x00	; 0
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    10b2:	19 95       	eicall
	}
}
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0b be       	out	0x3b, r0	; 59
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti

000010da <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    10da:	1f 92       	push	r1
    10dc:	0f 92       	push	r0
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	0f 92       	push	r0
    10e2:	11 24       	eor	r1, r1
    10e4:	0b b6       	in	r0, 0x3b	; 59
    10e6:	0f 92       	push	r0
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1100:	e0 91 7d 21 	lds	r30, 0x217D	; 0x80217d <tc_tcd0_ccc_callback>
    1104:	f0 91 7e 21 	lds	r31, 0x217E	; 0x80217e <tc_tcd0_ccc_callback+0x1>
    1108:	30 97       	sbiw	r30, 0x00	; 0
    110a:	09 f0       	breq	.+2      	; 0x110e <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    110c:	19 95       	eicall
	}
}
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	bf 91       	pop	r27
    1114:	af 91       	pop	r26
    1116:	9f 91       	pop	r25
    1118:	8f 91       	pop	r24
    111a:	7f 91       	pop	r23
    111c:	6f 91       	pop	r22
    111e:	5f 91       	pop	r21
    1120:	4f 91       	pop	r20
    1122:	3f 91       	pop	r19
    1124:	2f 91       	pop	r18
    1126:	0f 90       	pop	r0
    1128:	0b be       	out	0x3b, r0	; 59
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti

00001134 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    1134:	1f 92       	push	r1
    1136:	0f 92       	push	r0
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	0f 92       	push	r0
    113c:	11 24       	eor	r1, r1
    113e:	0b b6       	in	r0, 0x3b	; 59
    1140:	0f 92       	push	r0
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    115a:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <tc_tcd0_ccd_callback>
    115e:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <tc_tcd0_ccd_callback+0x1>
    1162:	30 97       	sbiw	r30, 0x00	; 0
    1164:	09 f0       	breq	.+2      	; 0x1168 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    1166:	19 95       	eicall
	}
}
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	bf 91       	pop	r27
    116e:	af 91       	pop	r26
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	7f 91       	pop	r23
    1176:	6f 91       	pop	r22
    1178:	5f 91       	pop	r21
    117a:	4f 91       	pop	r20
    117c:	3f 91       	pop	r19
    117e:	2f 91       	pop	r18
    1180:	0f 90       	pop	r0
    1182:	0b be       	out	0x3b, r0	; 59
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    118e:	1f 92       	push	r1
    1190:	0f 92       	push	r0
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	0f 92       	push	r0
    1196:	11 24       	eor	r1, r1
    1198:	0b b6       	in	r0, 0x3b	; 59
    119a:	0f 92       	push	r0
    119c:	2f 93       	push	r18
    119e:	3f 93       	push	r19
    11a0:	4f 93       	push	r20
    11a2:	5f 93       	push	r21
    11a4:	6f 93       	push	r22
    11a6:	7f 93       	push	r23
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	af 93       	push	r26
    11ae:	bf 93       	push	r27
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    11b4:	e0 91 79 21 	lds	r30, 0x2179	; 0x802179 <tc_tcd1_ovf_callback>
    11b8:	f0 91 7a 21 	lds	r31, 0x217A	; 0x80217a <tc_tcd1_ovf_callback+0x1>
    11bc:	30 97       	sbiw	r30, 0x00	; 0
    11be:	09 f0       	breq	.+2      	; 0x11c2 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    11c0:	19 95       	eicall
	}
}
    11c2:	ff 91       	pop	r31
    11c4:	ef 91       	pop	r30
    11c6:	bf 91       	pop	r27
    11c8:	af 91       	pop	r26
    11ca:	9f 91       	pop	r25
    11cc:	8f 91       	pop	r24
    11ce:	7f 91       	pop	r23
    11d0:	6f 91       	pop	r22
    11d2:	5f 91       	pop	r21
    11d4:	4f 91       	pop	r20
    11d6:	3f 91       	pop	r19
    11d8:	2f 91       	pop	r18
    11da:	0f 90       	pop	r0
    11dc:	0b be       	out	0x3b, r0	; 59
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	0f 90       	pop	r0
    11e4:	1f 90       	pop	r1
    11e6:	18 95       	reti

000011e8 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    11e8:	1f 92       	push	r1
    11ea:	0f 92       	push	r0
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	0f 92       	push	r0
    11f0:	11 24       	eor	r1, r1
    11f2:	0b b6       	in	r0, 0x3b	; 59
    11f4:	0f 92       	push	r0
    11f6:	2f 93       	push	r18
    11f8:	3f 93       	push	r19
    11fa:	4f 93       	push	r20
    11fc:	5f 93       	push	r21
    11fe:	6f 93       	push	r22
    1200:	7f 93       	push	r23
    1202:	8f 93       	push	r24
    1204:	9f 93       	push	r25
    1206:	af 93       	push	r26
    1208:	bf 93       	push	r27
    120a:	ef 93       	push	r30
    120c:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    120e:	e0 91 77 21 	lds	r30, 0x2177	; 0x802177 <tc_tcd1_err_callback>
    1212:	f0 91 78 21 	lds	r31, 0x2178	; 0x802178 <tc_tcd1_err_callback+0x1>
    1216:	30 97       	sbiw	r30, 0x00	; 0
    1218:	09 f0       	breq	.+2      	; 0x121c <__vector_84+0x34>
		tc_tcd1_err_callback();
    121a:	19 95       	eicall
	}
}
    121c:	ff 91       	pop	r31
    121e:	ef 91       	pop	r30
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	0f 90       	pop	r0
    1236:	0b be       	out	0x3b, r0	; 59
    1238:	0f 90       	pop	r0
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	0f 90       	pop	r0
    123e:	1f 90       	pop	r1
    1240:	18 95       	reti

00001242 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1242:	1f 92       	push	r1
    1244:	0f 92       	push	r0
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	0f 92       	push	r0
    124a:	11 24       	eor	r1, r1
    124c:	0b b6       	in	r0, 0x3b	; 59
    124e:	0f 92       	push	r0
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	4f 93       	push	r20
    1256:	5f 93       	push	r21
    1258:	6f 93       	push	r22
    125a:	7f 93       	push	r23
    125c:	8f 93       	push	r24
    125e:	9f 93       	push	r25
    1260:	af 93       	push	r26
    1262:	bf 93       	push	r27
    1264:	ef 93       	push	r30
    1266:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1268:	e0 91 75 21 	lds	r30, 0x2175	; 0x802175 <tc_tcd1_cca_callback>
    126c:	f0 91 76 21 	lds	r31, 0x2176	; 0x802176 <tc_tcd1_cca_callback+0x1>
    1270:	30 97       	sbiw	r30, 0x00	; 0
    1272:	09 f0       	breq	.+2      	; 0x1276 <__vector_85+0x34>
		tc_tcd1_cca_callback();
    1274:	19 95       	eicall
	}
}
    1276:	ff 91       	pop	r31
    1278:	ef 91       	pop	r30
    127a:	bf 91       	pop	r27
    127c:	af 91       	pop	r26
    127e:	9f 91       	pop	r25
    1280:	8f 91       	pop	r24
    1282:	7f 91       	pop	r23
    1284:	6f 91       	pop	r22
    1286:	5f 91       	pop	r21
    1288:	4f 91       	pop	r20
    128a:	3f 91       	pop	r19
    128c:	2f 91       	pop	r18
    128e:	0f 90       	pop	r0
    1290:	0b be       	out	0x3b, r0	; 59
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	0f 90       	pop	r0
    1298:	1f 90       	pop	r1
    129a:	18 95       	reti

0000129c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	0b b6       	in	r0, 0x3b	; 59
    12a8:	0f 92       	push	r0
    12aa:	2f 93       	push	r18
    12ac:	3f 93       	push	r19
    12ae:	4f 93       	push	r20
    12b0:	5f 93       	push	r21
    12b2:	6f 93       	push	r22
    12b4:	7f 93       	push	r23
    12b6:	8f 93       	push	r24
    12b8:	9f 93       	push	r25
    12ba:	af 93       	push	r26
    12bc:	bf 93       	push	r27
    12be:	ef 93       	push	r30
    12c0:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    12c2:	e0 91 73 21 	lds	r30, 0x2173	; 0x802173 <tc_tcd1_ccb_callback>
    12c6:	f0 91 74 21 	lds	r31, 0x2174	; 0x802174 <tc_tcd1_ccb_callback+0x1>
    12ca:	30 97       	sbiw	r30, 0x00	; 0
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    12ce:	19 95       	eicall
	}
}
    12d0:	ff 91       	pop	r31
    12d2:	ef 91       	pop	r30
    12d4:	bf 91       	pop	r27
    12d6:	af 91       	pop	r26
    12d8:	9f 91       	pop	r25
    12da:	8f 91       	pop	r24
    12dc:	7f 91       	pop	r23
    12de:	6f 91       	pop	r22
    12e0:	5f 91       	pop	r21
    12e2:	4f 91       	pop	r20
    12e4:	3f 91       	pop	r19
    12e6:	2f 91       	pop	r18
    12e8:	0f 90       	pop	r0
    12ea:	0b be       	out	0x3b, r0	; 59
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	1f 90       	pop	r1
    12f4:	18 95       	reti

000012f6 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    12f6:	1f 92       	push	r1
    12f8:	0f 92       	push	r0
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	0f 92       	push	r0
    12fe:	11 24       	eor	r1, r1
    1300:	0b b6       	in	r0, 0x3b	; 59
    1302:	0f 92       	push	r0
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	4f 93       	push	r20
    130a:	5f 93       	push	r21
    130c:	6f 93       	push	r22
    130e:	7f 93       	push	r23
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	af 93       	push	r26
    1316:	bf 93       	push	r27
    1318:	ef 93       	push	r30
    131a:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    131c:	e0 91 71 21 	lds	r30, 0x2171	; 0x802171 <tc_tce0_ovf_callback>
    1320:	f0 91 72 21 	lds	r31, 0x2172	; 0x802172 <tc_tce0_ovf_callback+0x1>
    1324:	30 97       	sbiw	r30, 0x00	; 0
    1326:	09 f0       	breq	.+2      	; 0x132a <__vector_47+0x34>
		tc_tce0_ovf_callback();
    1328:	19 95       	eicall
	}
}
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	bf 91       	pop	r27
    1330:	af 91       	pop	r26
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	7f 91       	pop	r23
    1338:	6f 91       	pop	r22
    133a:	5f 91       	pop	r21
    133c:	4f 91       	pop	r20
    133e:	3f 91       	pop	r19
    1340:	2f 91       	pop	r18
    1342:	0f 90       	pop	r0
    1344:	0b be       	out	0x3b, r0	; 59
    1346:	0f 90       	pop	r0
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	0f 90       	pop	r0
    134c:	1f 90       	pop	r1
    134e:	18 95       	reti

00001350 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1350:	1f 92       	push	r1
    1352:	0f 92       	push	r0
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	0f 92       	push	r0
    1358:	11 24       	eor	r1, r1
    135a:	0b b6       	in	r0, 0x3b	; 59
    135c:	0f 92       	push	r0
    135e:	2f 93       	push	r18
    1360:	3f 93       	push	r19
    1362:	4f 93       	push	r20
    1364:	5f 93       	push	r21
    1366:	6f 93       	push	r22
    1368:	7f 93       	push	r23
    136a:	8f 93       	push	r24
    136c:	9f 93       	push	r25
    136e:	af 93       	push	r26
    1370:	bf 93       	push	r27
    1372:	ef 93       	push	r30
    1374:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1376:	e0 91 6f 21 	lds	r30, 0x216F	; 0x80216f <tc_tce0_err_callback>
    137a:	f0 91 70 21 	lds	r31, 0x2170	; 0x802170 <tc_tce0_err_callback+0x1>
    137e:	30 97       	sbiw	r30, 0x00	; 0
    1380:	09 f0       	breq	.+2      	; 0x1384 <__vector_48+0x34>
		tc_tce0_err_callback();
    1382:	19 95       	eicall
	}
}
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	9f 91       	pop	r25
    138e:	8f 91       	pop	r24
    1390:	7f 91       	pop	r23
    1392:	6f 91       	pop	r22
    1394:	5f 91       	pop	r21
    1396:	4f 91       	pop	r20
    1398:	3f 91       	pop	r19
    139a:	2f 91       	pop	r18
    139c:	0f 90       	pop	r0
    139e:	0b be       	out	0x3b, r0	; 59
    13a0:	0f 90       	pop	r0
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	0f 90       	pop	r0
    13a6:	1f 90       	pop	r1
    13a8:	18 95       	reti

000013aa <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    13aa:	1f 92       	push	r1
    13ac:	0f 92       	push	r0
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	0f 92       	push	r0
    13b2:	11 24       	eor	r1, r1
    13b4:	0b b6       	in	r0, 0x3b	; 59
    13b6:	0f 92       	push	r0
    13b8:	2f 93       	push	r18
    13ba:	3f 93       	push	r19
    13bc:	4f 93       	push	r20
    13be:	5f 93       	push	r21
    13c0:	6f 93       	push	r22
    13c2:	7f 93       	push	r23
    13c4:	8f 93       	push	r24
    13c6:	9f 93       	push	r25
    13c8:	af 93       	push	r26
    13ca:	bf 93       	push	r27
    13cc:	ef 93       	push	r30
    13ce:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    13d0:	e0 91 6d 21 	lds	r30, 0x216D	; 0x80216d <tc_tce0_cca_callback>
    13d4:	f0 91 6e 21 	lds	r31, 0x216E	; 0x80216e <tc_tce0_cca_callback+0x1>
    13d8:	30 97       	sbiw	r30, 0x00	; 0
    13da:	09 f0       	breq	.+2      	; 0x13de <__vector_49+0x34>
		tc_tce0_cca_callback();
    13dc:	19 95       	eicall
	}
}
    13de:	ff 91       	pop	r31
    13e0:	ef 91       	pop	r30
    13e2:	bf 91       	pop	r27
    13e4:	af 91       	pop	r26
    13e6:	9f 91       	pop	r25
    13e8:	8f 91       	pop	r24
    13ea:	7f 91       	pop	r23
    13ec:	6f 91       	pop	r22
    13ee:	5f 91       	pop	r21
    13f0:	4f 91       	pop	r20
    13f2:	3f 91       	pop	r19
    13f4:	2f 91       	pop	r18
    13f6:	0f 90       	pop	r0
    13f8:	0b be       	out	0x3b, r0	; 59
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	0f 90       	pop	r0
    1400:	1f 90       	pop	r1
    1402:	18 95       	reti

00001404 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	0b b6       	in	r0, 0x3b	; 59
    1410:	0f 92       	push	r0
    1412:	2f 93       	push	r18
    1414:	3f 93       	push	r19
    1416:	4f 93       	push	r20
    1418:	5f 93       	push	r21
    141a:	6f 93       	push	r22
    141c:	7f 93       	push	r23
    141e:	8f 93       	push	r24
    1420:	9f 93       	push	r25
    1422:	af 93       	push	r26
    1424:	bf 93       	push	r27
    1426:	ef 93       	push	r30
    1428:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    142a:	e0 91 6b 21 	lds	r30, 0x216B	; 0x80216b <tc_tce0_ccb_callback>
    142e:	f0 91 6c 21 	lds	r31, 0x216C	; 0x80216c <tc_tce0_ccb_callback+0x1>
    1432:	30 97       	sbiw	r30, 0x00	; 0
    1434:	09 f0       	breq	.+2      	; 0x1438 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    1436:	19 95       	eicall
	}
}
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0b be       	out	0x3b, r0	; 59
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	0b b6       	in	r0, 0x3b	; 59
    146a:	0f 92       	push	r0
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	ef 93       	push	r30
    1482:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1484:	e0 91 69 21 	lds	r30, 0x2169	; 0x802169 <tc_tce0_ccc_callback>
    1488:	f0 91 6a 21 	lds	r31, 0x216A	; 0x80216a <tc_tce0_ccc_callback+0x1>
    148c:	30 97       	sbiw	r30, 0x00	; 0
    148e:	09 f0       	breq	.+2      	; 0x1492 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1490:	19 95       	eicall
	}
}
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0b be       	out	0x3b, r0	; 59
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	0f 90       	pop	r0
    14b4:	1f 90       	pop	r1
    14b6:	18 95       	reti

000014b8 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    14b8:	1f 92       	push	r1
    14ba:	0f 92       	push	r0
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	0f 92       	push	r0
    14c0:	11 24       	eor	r1, r1
    14c2:	0b b6       	in	r0, 0x3b	; 59
    14c4:	0f 92       	push	r0
    14c6:	2f 93       	push	r18
    14c8:	3f 93       	push	r19
    14ca:	4f 93       	push	r20
    14cc:	5f 93       	push	r21
    14ce:	6f 93       	push	r22
    14d0:	7f 93       	push	r23
    14d2:	8f 93       	push	r24
    14d4:	9f 93       	push	r25
    14d6:	af 93       	push	r26
    14d8:	bf 93       	push	r27
    14da:	ef 93       	push	r30
    14dc:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    14de:	e0 91 67 21 	lds	r30, 0x2167	; 0x802167 <tc_tce0_ccd_callback>
    14e2:	f0 91 68 21 	lds	r31, 0x2168	; 0x802168 <tc_tce0_ccd_callback+0x1>
    14e6:	30 97       	sbiw	r30, 0x00	; 0
    14e8:	09 f0       	breq	.+2      	; 0x14ec <__vector_52+0x34>
		tc_tce0_ccd_callback();
    14ea:	19 95       	eicall
	}
}
    14ec:	ff 91       	pop	r31
    14ee:	ef 91       	pop	r30
    14f0:	bf 91       	pop	r27
    14f2:	af 91       	pop	r26
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	7f 91       	pop	r23
    14fa:	6f 91       	pop	r22
    14fc:	5f 91       	pop	r21
    14fe:	4f 91       	pop	r20
    1500:	3f 91       	pop	r19
    1502:	2f 91       	pop	r18
    1504:	0f 90       	pop	r0
    1506:	0b be       	out	0x3b, r0	; 59
    1508:	0f 90       	pop	r0
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	0f 90       	pop	r0
    150e:	1f 90       	pop	r1
    1510:	18 95       	reti

00001512 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1512:	1f 92       	push	r1
    1514:	0f 92       	push	r0
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	0f 92       	push	r0
    151a:	11 24       	eor	r1, r1
    151c:	0b b6       	in	r0, 0x3b	; 59
    151e:	0f 92       	push	r0
    1520:	2f 93       	push	r18
    1522:	3f 93       	push	r19
    1524:	4f 93       	push	r20
    1526:	5f 93       	push	r21
    1528:	6f 93       	push	r22
    152a:	7f 93       	push	r23
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
    1534:	ef 93       	push	r30
    1536:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1538:	e0 91 65 21 	lds	r30, 0x2165	; 0x802165 <tc_tce1_ovf_callback>
    153c:	f0 91 66 21 	lds	r31, 0x2166	; 0x802166 <tc_tce1_ovf_callback+0x1>
    1540:	30 97       	sbiw	r30, 0x00	; 0
    1542:	09 f0       	breq	.+2      	; 0x1546 <__vector_53+0x34>
		tc_tce1_ovf_callback();
    1544:	19 95       	eicall
	}
}
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	7f 91       	pop	r23
    1554:	6f 91       	pop	r22
    1556:	5f 91       	pop	r21
    1558:	4f 91       	pop	r20
    155a:	3f 91       	pop	r19
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0b be       	out	0x3b, r0	; 59
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	0f 90       	pop	r0
    1568:	1f 90       	pop	r1
    156a:	18 95       	reti

0000156c <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    156c:	1f 92       	push	r1
    156e:	0f 92       	push	r0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	0f 92       	push	r0
    1574:	11 24       	eor	r1, r1
    1576:	0b b6       	in	r0, 0x3b	; 59
    1578:	0f 92       	push	r0
    157a:	2f 93       	push	r18
    157c:	3f 93       	push	r19
    157e:	4f 93       	push	r20
    1580:	5f 93       	push	r21
    1582:	6f 93       	push	r22
    1584:	7f 93       	push	r23
    1586:	8f 93       	push	r24
    1588:	9f 93       	push	r25
    158a:	af 93       	push	r26
    158c:	bf 93       	push	r27
    158e:	ef 93       	push	r30
    1590:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1592:	e0 91 63 21 	lds	r30, 0x2163	; 0x802163 <tc_tce1_err_callback>
    1596:	f0 91 64 21 	lds	r31, 0x2164	; 0x802164 <tc_tce1_err_callback+0x1>
    159a:	30 97       	sbiw	r30, 0x00	; 0
    159c:	09 f0       	breq	.+2      	; 0x15a0 <__vector_54+0x34>
		tc_tce1_err_callback();
    159e:	19 95       	eicall
	}
}
    15a0:	ff 91       	pop	r31
    15a2:	ef 91       	pop	r30
    15a4:	bf 91       	pop	r27
    15a6:	af 91       	pop	r26
    15a8:	9f 91       	pop	r25
    15aa:	8f 91       	pop	r24
    15ac:	7f 91       	pop	r23
    15ae:	6f 91       	pop	r22
    15b0:	5f 91       	pop	r21
    15b2:	4f 91       	pop	r20
    15b4:	3f 91       	pop	r19
    15b6:	2f 91       	pop	r18
    15b8:	0f 90       	pop	r0
    15ba:	0b be       	out	0x3b, r0	; 59
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    15c6:	1f 92       	push	r1
    15c8:	0f 92       	push	r0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	0f 92       	push	r0
    15ce:	11 24       	eor	r1, r1
    15d0:	0b b6       	in	r0, 0x3b	; 59
    15d2:	0f 92       	push	r0
    15d4:	2f 93       	push	r18
    15d6:	3f 93       	push	r19
    15d8:	4f 93       	push	r20
    15da:	5f 93       	push	r21
    15dc:	6f 93       	push	r22
    15de:	7f 93       	push	r23
    15e0:	8f 93       	push	r24
    15e2:	9f 93       	push	r25
    15e4:	af 93       	push	r26
    15e6:	bf 93       	push	r27
    15e8:	ef 93       	push	r30
    15ea:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    15ec:	e0 91 61 21 	lds	r30, 0x2161	; 0x802161 <tc_tce1_cca_callback>
    15f0:	f0 91 62 21 	lds	r31, 0x2162	; 0x802162 <tc_tce1_cca_callback+0x1>
    15f4:	30 97       	sbiw	r30, 0x00	; 0
    15f6:	09 f0       	breq	.+2      	; 0x15fa <__vector_55+0x34>
		tc_tce1_cca_callback();
    15f8:	19 95       	eicall
	}
}
    15fa:	ff 91       	pop	r31
    15fc:	ef 91       	pop	r30
    15fe:	bf 91       	pop	r27
    1600:	af 91       	pop	r26
    1602:	9f 91       	pop	r25
    1604:	8f 91       	pop	r24
    1606:	7f 91       	pop	r23
    1608:	6f 91       	pop	r22
    160a:	5f 91       	pop	r21
    160c:	4f 91       	pop	r20
    160e:	3f 91       	pop	r19
    1610:	2f 91       	pop	r18
    1612:	0f 90       	pop	r0
    1614:	0b be       	out	0x3b, r0	; 59
    1616:	0f 90       	pop	r0
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	0f 90       	pop	r0
    161c:	1f 90       	pop	r1
    161e:	18 95       	reti

00001620 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1620:	1f 92       	push	r1
    1622:	0f 92       	push	r0
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	0f 92       	push	r0
    1628:	11 24       	eor	r1, r1
    162a:	0b b6       	in	r0, 0x3b	; 59
    162c:	0f 92       	push	r0
    162e:	2f 93       	push	r18
    1630:	3f 93       	push	r19
    1632:	4f 93       	push	r20
    1634:	5f 93       	push	r21
    1636:	6f 93       	push	r22
    1638:	7f 93       	push	r23
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	af 93       	push	r26
    1640:	bf 93       	push	r27
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1646:	e0 91 5f 21 	lds	r30, 0x215F	; 0x80215f <tc_tce1_ccb_callback>
    164a:	f0 91 60 21 	lds	r31, 0x2160	; 0x802160 <tc_tce1_ccb_callback+0x1>
    164e:	30 97       	sbiw	r30, 0x00	; 0
    1650:	09 f0       	breq	.+2      	; 0x1654 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    1652:	19 95       	eicall
	}
}
    1654:	ff 91       	pop	r31
    1656:	ef 91       	pop	r30
    1658:	bf 91       	pop	r27
    165a:	af 91       	pop	r26
    165c:	9f 91       	pop	r25
    165e:	8f 91       	pop	r24
    1660:	7f 91       	pop	r23
    1662:	6f 91       	pop	r22
    1664:	5f 91       	pop	r21
    1666:	4f 91       	pop	r20
    1668:	3f 91       	pop	r19
    166a:	2f 91       	pop	r18
    166c:	0f 90       	pop	r0
    166e:	0b be       	out	0x3b, r0	; 59
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	0f 90       	pop	r0
    1676:	1f 90       	pop	r1
    1678:	18 95       	reti

0000167a <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	0b b6       	in	r0, 0x3b	; 59
    1686:	0f 92       	push	r0
    1688:	2f 93       	push	r18
    168a:	3f 93       	push	r19
    168c:	4f 93       	push	r20
    168e:	5f 93       	push	r21
    1690:	6f 93       	push	r22
    1692:	7f 93       	push	r23
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
    169c:	ef 93       	push	r30
    169e:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    16a0:	e0 91 5d 21 	lds	r30, 0x215D	; 0x80215d <tc_tcf0_ovf_callback>
    16a4:	f0 91 5e 21 	lds	r31, 0x215E	; 0x80215e <tc_tcf0_ovf_callback+0x1>
    16a8:	30 97       	sbiw	r30, 0x00	; 0
    16aa:	09 f0       	breq	.+2      	; 0x16ae <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    16ac:	19 95       	eicall
	}
}
    16ae:	ff 91       	pop	r31
    16b0:	ef 91       	pop	r30
    16b2:	bf 91       	pop	r27
    16b4:	af 91       	pop	r26
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	7f 91       	pop	r23
    16bc:	6f 91       	pop	r22
    16be:	5f 91       	pop	r21
    16c0:	4f 91       	pop	r20
    16c2:	3f 91       	pop	r19
    16c4:	2f 91       	pop	r18
    16c6:	0f 90       	pop	r0
    16c8:	0b be       	out	0x3b, r0	; 59
    16ca:	0f 90       	pop	r0
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	0f 90       	pop	r0
    16d0:	1f 90       	pop	r1
    16d2:	18 95       	reti

000016d4 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    16d4:	1f 92       	push	r1
    16d6:	0f 92       	push	r0
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	0f 92       	push	r0
    16dc:	11 24       	eor	r1, r1
    16de:	0b b6       	in	r0, 0x3b	; 59
    16e0:	0f 92       	push	r0
    16e2:	2f 93       	push	r18
    16e4:	3f 93       	push	r19
    16e6:	4f 93       	push	r20
    16e8:	5f 93       	push	r21
    16ea:	6f 93       	push	r22
    16ec:	7f 93       	push	r23
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    16fa:	e0 91 5b 21 	lds	r30, 0x215B	; 0x80215b <tc_tcf0_err_callback>
    16fe:	f0 91 5c 21 	lds	r31, 0x215C	; 0x80215c <tc_tcf0_err_callback+0x1>
    1702:	30 97       	sbiw	r30, 0x00	; 0
    1704:	09 f0       	breq	.+2      	; 0x1708 <__vector_109+0x34>
		tc_tcf0_err_callback();
    1706:	19 95       	eicall
	}
}
    1708:	ff 91       	pop	r31
    170a:	ef 91       	pop	r30
    170c:	bf 91       	pop	r27
    170e:	af 91       	pop	r26
    1710:	9f 91       	pop	r25
    1712:	8f 91       	pop	r24
    1714:	7f 91       	pop	r23
    1716:	6f 91       	pop	r22
    1718:	5f 91       	pop	r21
    171a:	4f 91       	pop	r20
    171c:	3f 91       	pop	r19
    171e:	2f 91       	pop	r18
    1720:	0f 90       	pop	r0
    1722:	0b be       	out	0x3b, r0	; 59
    1724:	0f 90       	pop	r0
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	0f 90       	pop	r0
    172a:	1f 90       	pop	r1
    172c:	18 95       	reti

0000172e <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    172e:	1f 92       	push	r1
    1730:	0f 92       	push	r0
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	0f 92       	push	r0
    1736:	11 24       	eor	r1, r1
    1738:	0b b6       	in	r0, 0x3b	; 59
    173a:	0f 92       	push	r0
    173c:	2f 93       	push	r18
    173e:	3f 93       	push	r19
    1740:	4f 93       	push	r20
    1742:	5f 93       	push	r21
    1744:	6f 93       	push	r22
    1746:	7f 93       	push	r23
    1748:	8f 93       	push	r24
    174a:	9f 93       	push	r25
    174c:	af 93       	push	r26
    174e:	bf 93       	push	r27
    1750:	ef 93       	push	r30
    1752:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1754:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <tc_tcf0_cca_callback>
    1758:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <tc_tcf0_cca_callback+0x1>
    175c:	30 97       	sbiw	r30, 0x00	; 0
    175e:	09 f0       	breq	.+2      	; 0x1762 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    1760:	19 95       	eicall
	}
}
    1762:	ff 91       	pop	r31
    1764:	ef 91       	pop	r30
    1766:	bf 91       	pop	r27
    1768:	af 91       	pop	r26
    176a:	9f 91       	pop	r25
    176c:	8f 91       	pop	r24
    176e:	7f 91       	pop	r23
    1770:	6f 91       	pop	r22
    1772:	5f 91       	pop	r21
    1774:	4f 91       	pop	r20
    1776:	3f 91       	pop	r19
    1778:	2f 91       	pop	r18
    177a:	0f 90       	pop	r0
    177c:	0b be       	out	0x3b, r0	; 59
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	0f 90       	pop	r0
    1784:	1f 90       	pop	r1
    1786:	18 95       	reti

00001788 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	0b b6       	in	r0, 0x3b	; 59
    1794:	0f 92       	push	r0
    1796:	2f 93       	push	r18
    1798:	3f 93       	push	r19
    179a:	4f 93       	push	r20
    179c:	5f 93       	push	r21
    179e:	6f 93       	push	r22
    17a0:	7f 93       	push	r23
    17a2:	8f 93       	push	r24
    17a4:	9f 93       	push	r25
    17a6:	af 93       	push	r26
    17a8:	bf 93       	push	r27
    17aa:	ef 93       	push	r30
    17ac:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    17ae:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <tc_tcf0_ccb_callback>
    17b2:	f0 91 58 21 	lds	r31, 0x2158	; 0x802158 <tc_tcf0_ccb_callback+0x1>
    17b6:	30 97       	sbiw	r30, 0x00	; 0
    17b8:	09 f0       	breq	.+2      	; 0x17bc <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    17ba:	19 95       	eicall
	}
}
    17bc:	ff 91       	pop	r31
    17be:	ef 91       	pop	r30
    17c0:	bf 91       	pop	r27
    17c2:	af 91       	pop	r26
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	7f 91       	pop	r23
    17ca:	6f 91       	pop	r22
    17cc:	5f 91       	pop	r21
    17ce:	4f 91       	pop	r20
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0b be       	out	0x3b, r0	; 59
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    17e2:	1f 92       	push	r1
    17e4:	0f 92       	push	r0
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	0f 92       	push	r0
    17ea:	11 24       	eor	r1, r1
    17ec:	0b b6       	in	r0, 0x3b	; 59
    17ee:	0f 92       	push	r0
    17f0:	2f 93       	push	r18
    17f2:	3f 93       	push	r19
    17f4:	4f 93       	push	r20
    17f6:	5f 93       	push	r21
    17f8:	6f 93       	push	r22
    17fa:	7f 93       	push	r23
    17fc:	8f 93       	push	r24
    17fe:	9f 93       	push	r25
    1800:	af 93       	push	r26
    1802:	bf 93       	push	r27
    1804:	ef 93       	push	r30
    1806:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1808:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <tc_tcf0_ccc_callback>
    180c:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <tc_tcf0_ccc_callback+0x1>
    1810:	30 97       	sbiw	r30, 0x00	; 0
    1812:	09 f0       	breq	.+2      	; 0x1816 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    1814:	19 95       	eicall
	}
}
    1816:	ff 91       	pop	r31
    1818:	ef 91       	pop	r30
    181a:	bf 91       	pop	r27
    181c:	af 91       	pop	r26
    181e:	9f 91       	pop	r25
    1820:	8f 91       	pop	r24
    1822:	7f 91       	pop	r23
    1824:	6f 91       	pop	r22
    1826:	5f 91       	pop	r21
    1828:	4f 91       	pop	r20
    182a:	3f 91       	pop	r19
    182c:	2f 91       	pop	r18
    182e:	0f 90       	pop	r0
    1830:	0b be       	out	0x3b, r0	; 59
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	0f 90       	pop	r0
    1838:	1f 90       	pop	r1
    183a:	18 95       	reti

0000183c <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    183c:	1f 92       	push	r1
    183e:	0f 92       	push	r0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	0f 92       	push	r0
    1844:	11 24       	eor	r1, r1
    1846:	0b b6       	in	r0, 0x3b	; 59
    1848:	0f 92       	push	r0
    184a:	2f 93       	push	r18
    184c:	3f 93       	push	r19
    184e:	4f 93       	push	r20
    1850:	5f 93       	push	r21
    1852:	6f 93       	push	r22
    1854:	7f 93       	push	r23
    1856:	8f 93       	push	r24
    1858:	9f 93       	push	r25
    185a:	af 93       	push	r26
    185c:	bf 93       	push	r27
    185e:	ef 93       	push	r30
    1860:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1862:	e0 91 53 21 	lds	r30, 0x2153	; 0x802153 <tc_tcf0_ccd_callback>
    1866:	f0 91 54 21 	lds	r31, 0x2154	; 0x802154 <tc_tcf0_ccd_callback+0x1>
    186a:	30 97       	sbiw	r30, 0x00	; 0
    186c:	09 f0       	breq	.+2      	; 0x1870 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    186e:	19 95       	eicall
	}
}
    1870:	ff 91       	pop	r31
    1872:	ef 91       	pop	r30
    1874:	bf 91       	pop	r27
    1876:	af 91       	pop	r26
    1878:	9f 91       	pop	r25
    187a:	8f 91       	pop	r24
    187c:	7f 91       	pop	r23
    187e:	6f 91       	pop	r22
    1880:	5f 91       	pop	r21
    1882:	4f 91       	pop	r20
    1884:	3f 91       	pop	r19
    1886:	2f 91       	pop	r18
    1888:	0f 90       	pop	r0
    188a:	0b be       	out	0x3b, r0	; 59
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	0f 90       	pop	r0
    1892:	1f 90       	pop	r1
    1894:	18 95       	reti

00001896 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1896:	1f 93       	push	r17
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	1f 92       	push	r1
    189e:	1f 92       	push	r1
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    18a4:	2f b7       	in	r18, 0x3f	; 63
    18a6:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    18a8:	f8 94       	cli
	return flags;
    18aa:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    18ac:	28 2f       	mov	r18, r24
    18ae:	39 2f       	mov	r19, r25
    18b0:	21 15       	cp	r18, r1
    18b2:	88 e0       	ldi	r24, 0x08	; 8
    18b4:	38 07       	cpc	r19, r24
    18b6:	49 f4       	brne	.+18     	; 0x18ca <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    18c0:	64 e0       	ldi	r22, 0x04	; 4
    18c2:	83 e0       	ldi	r24, 0x03	; 3
    18c4:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
    18c8:	4f c0       	rjmp	.+158    	; 0x1968 <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    18ca:	20 34       	cpi	r18, 0x40	; 64
    18cc:	88 e0       	ldi	r24, 0x08	; 8
    18ce:	38 07       	cpc	r19, r24
    18d0:	49 f4       	brne	.+18     	; 0x18e4 <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    18da:	64 e0       	ldi	r22, 0x04	; 4
    18dc:	83 e0       	ldi	r24, 0x03	; 3
    18de:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
    18e2:	42 c0       	rjmp	.+132    	; 0x1968 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    18e4:	21 15       	cp	r18, r1
    18e6:	89 e0       	ldi	r24, 0x09	; 9
    18e8:	38 07       	cpc	r19, r24
    18ea:	49 f4       	brne	.+18     	; 0x18fe <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	84 e0       	ldi	r24, 0x04	; 4
    18f0:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    18f4:	64 e0       	ldi	r22, 0x04	; 4
    18f6:	84 e0       	ldi	r24, 0x04	; 4
    18f8:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
    18fc:	35 c0       	rjmp	.+106    	; 0x1968 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    18fe:	20 34       	cpi	r18, 0x40	; 64
    1900:	89 e0       	ldi	r24, 0x09	; 9
    1902:	38 07       	cpc	r19, r24
    1904:	49 f4       	brne	.+18     	; 0x1918 <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1906:	62 e0       	ldi	r22, 0x02	; 2
    1908:	84 e0       	ldi	r24, 0x04	; 4
    190a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    190e:	64 e0       	ldi	r22, 0x04	; 4
    1910:	84 e0       	ldi	r24, 0x04	; 4
    1912:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
    1916:	28 c0       	rjmp	.+80     	; 0x1968 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1918:	21 15       	cp	r18, r1
    191a:	8a e0       	ldi	r24, 0x0A	; 10
    191c:	38 07       	cpc	r19, r24
    191e:	49 f4       	brne	.+18     	; 0x1932 <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	85 e0       	ldi	r24, 0x05	; 5
    1924:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1928:	64 e0       	ldi	r22, 0x04	; 4
    192a:	85 e0       	ldi	r24, 0x05	; 5
    192c:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
    1930:	1b c0       	rjmp	.+54     	; 0x1968 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1932:	20 34       	cpi	r18, 0x40	; 64
    1934:	8a e0       	ldi	r24, 0x0A	; 10
    1936:	38 07       	cpc	r19, r24
    1938:	49 f4       	brne	.+18     	; 0x194c <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    193a:	62 e0       	ldi	r22, 0x02	; 2
    193c:	85 e0       	ldi	r24, 0x05	; 5
    193e:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1942:	64 e0       	ldi	r22, 0x04	; 4
    1944:	85 e0       	ldi	r24, 0x05	; 5
    1946:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
    194a:	0e c0       	rjmp	.+28     	; 0x1968 <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    194c:	21 15       	cp	r18, r1
    194e:	3b 40       	sbci	r19, 0x0B	; 11
    1950:	49 f4       	brne	.+18     	; 0x1964 <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	86 e0       	ldi	r24, 0x06	; 6
    1956:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    195a:	64 e0       	ldi	r22, 0x04	; 4
    195c:	86 e0       	ldi	r24, 0x06	; 6
    195e:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sysclk_enable_module>
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1964:	1f bf       	out	0x3f, r17	; 63
    1966:	10 c0       	rjmp	.+32     	; 0x1988 <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1968:	80 91 32 24 	lds	r24, 0x2432	; 0x802432 <sleepmgr_locks+0x1>
    196c:	8f 3f       	cpi	r24, 0xFF	; 255
    196e:	09 f4       	brne	.+2      	; 0x1972 <tc_enable+0xdc>
    1970:	ff cf       	rjmp	.-2      	; 0x1970 <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1972:	8f b7       	in	r24, 0x3f	; 63
    1974:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1976:	f8 94       	cli
	return flags;
    1978:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    197a:	e1 e3       	ldi	r30, 0x31	; 49
    197c:	f4 e2       	ldi	r31, 0x24	; 36
    197e:	81 81       	ldd	r24, Z+1	; 0x01
    1980:	8f 5f       	subi	r24, 0xFF	; 255
    1982:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1984:	9f bf       	out	0x3f, r25	; 63
    1986:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	08 95       	ret

00001994 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1998:	e0 91 9b 21 	lds	r30, 0x219B	; 0x80219b <transfer>
    199c:	f0 91 9c 21 	lds	r31, 0x219C	; 0x80219c <transfer+0x1>
    19a0:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    19a2:	83 ff       	sbrs	r24, 3
    19a4:	08 c0       	rjmp	.+16     	; 0x19b6 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    19a6:	88 60       	ori	r24, 0x08	; 8
    19a8:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    19ae:	86 ef       	ldi	r24, 0xF6	; 246
    19b0:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <transfer+0xa>
    19b4:	83 c0       	rjmp	.+262    	; 0x1abc <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    19b6:	98 2f       	mov	r25, r24
    19b8:	94 71       	andi	r25, 0x14	; 20
    19ba:	31 f0       	breq	.+12     	; 0x19c8 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    19c0:	8f ef       	ldi	r24, 0xFF	; 255
    19c2:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <transfer+0xa>
    19c6:	7a c0       	rjmp	.+244    	; 0x1abc <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    19c8:	86 ff       	sbrs	r24, 6
    19ca:	43 c0       	rjmp	.+134    	; 0x1a52 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    19cc:	cb e9       	ldi	r28, 0x9B	; 155
    19ce:	d1 e2       	ldi	r29, 0x21	; 33
    19d0:	aa 81       	ldd	r26, Y+2	; 0x02
    19d2:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    19d4:	8c 81       	ldd	r24, Y+4	; 0x04
    19d6:	9d 81       	ldd	r25, Y+5	; 0x05
    19d8:	14 96       	adiw	r26, 0x04	; 4
    19da:	2d 91       	ld	r18, X+
    19dc:	3c 91       	ld	r19, X
    19de:	15 97       	sbiw	r26, 0x05	; 5
    19e0:	82 17       	cp	r24, r18
    19e2:	93 07       	cpc	r25, r19
    19e4:	6c f4       	brge	.+26     	; 0x1a00 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    19e6:	9c 01       	movw	r18, r24
    19e8:	2f 5f       	subi	r18, 0xFF	; 255
    19ea:	3f 4f       	sbci	r19, 0xFF	; 255
    19ec:	20 93 9f 21 	sts	0x219F, r18	; 0x80219f <transfer+0x4>
    19f0:	30 93 a0 21 	sts	0x21A0, r19	; 0x8021a0 <transfer+0x5>
    19f4:	a8 0f       	add	r26, r24
    19f6:	b9 1f       	adc	r27, r25
    19f8:	11 96       	adiw	r26, 0x01	; 1
    19fa:	8c 91       	ld	r24, X
    19fc:	87 83       	std	Z+7, r24	; 0x07
    19fe:	5e c0       	rjmp	.+188    	; 0x1abc <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1a00:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <transfer+0x6>
    1a04:	90 91 a2 21 	lds	r25, 0x21A2	; 0x8021a2 <transfer+0x7>
    1a08:	18 96       	adiw	r26, 0x08	; 8
    1a0a:	2d 91       	ld	r18, X+
    1a0c:	3c 91       	ld	r19, X
    1a0e:	19 97       	sbiw	r26, 0x09	; 9
    1a10:	82 17       	cp	r24, r18
    1a12:	93 07       	cpc	r25, r19
    1a14:	c8 f4       	brcc	.+50     	; 0x1a48 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1a16:	20 91 a3 21 	lds	r18, 0x21A3	; 0x8021a3 <transfer+0x8>
    1a1a:	22 23       	and	r18, r18
    1a1c:	21 f0       	breq	.+8      	; 0x1a26 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1a1e:	86 81       	ldd	r24, Z+6	; 0x06
    1a20:	81 60       	ori	r24, 0x01	; 1
    1a22:	86 83       	std	Z+6, r24	; 0x06
    1a24:	4b c0       	rjmp	.+150    	; 0x1abc <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1a26:	16 96       	adiw	r26, 0x06	; 6
    1a28:	2d 91       	ld	r18, X+
    1a2a:	3c 91       	ld	r19, X
    1a2c:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1a2e:	ac 01       	movw	r20, r24
    1a30:	4f 5f       	subi	r20, 0xFF	; 255
    1a32:	5f 4f       	sbci	r21, 0xFF	; 255
    1a34:	40 93 a1 21 	sts	0x21A1, r20	; 0x8021a1 <transfer+0x6>
    1a38:	50 93 a2 21 	sts	0x21A2, r21	; 0x8021a2 <transfer+0x7>
    1a3c:	d9 01       	movw	r26, r18
    1a3e:	a8 0f       	add	r26, r24
    1a40:	b9 1f       	adc	r27, r25
    1a42:	8c 91       	ld	r24, X
    1a44:	87 83       	std	Z+7, r24	; 0x07
    1a46:	3a c0       	rjmp	.+116    	; 0x1abc <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1a4c:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <transfer+0xa>
    1a50:	35 c0       	rjmp	.+106    	; 0x1abc <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1a52:	88 23       	and	r24, r24
    1a54:	84 f5       	brge	.+96     	; 0x1ab6 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1a56:	ab e9       	ldi	r26, 0x9B	; 155
    1a58:	b1 e2       	ldi	r27, 0x21	; 33
    1a5a:	12 96       	adiw	r26, 0x02	; 2
    1a5c:	cd 91       	ld	r28, X+
    1a5e:	dc 91       	ld	r29, X
    1a60:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1a62:	16 96       	adiw	r26, 0x06	; 6
    1a64:	8d 91       	ld	r24, X+
    1a66:	9c 91       	ld	r25, X
    1a68:	17 97       	sbiw	r26, 0x07	; 7
    1a6a:	28 85       	ldd	r18, Y+8	; 0x08
    1a6c:	39 85       	ldd	r19, Y+9	; 0x09
    1a6e:	82 17       	cp	r24, r18
    1a70:	93 07       	cpc	r25, r19
    1a72:	d8 f4       	brcc	.+54     	; 0x1aaa <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1a74:	6e 81       	ldd	r22, Y+6	; 0x06
    1a76:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1a78:	9c 01       	movw	r18, r24
    1a7a:	2f 5f       	subi	r18, 0xFF	; 255
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	20 93 a1 21 	sts	0x21A1, r18	; 0x8021a1 <transfer+0x6>
    1a82:	30 93 a2 21 	sts	0x21A2, r19	; 0x8021a2 <transfer+0x7>
    1a86:	47 81       	ldd	r20, Z+7	; 0x07
    1a88:	db 01       	movw	r26, r22
    1a8a:	a8 0f       	add	r26, r24
    1a8c:	b9 1f       	adc	r27, r25
    1a8e:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1a90:	88 85       	ldd	r24, Y+8	; 0x08
    1a92:	99 85       	ldd	r25, Y+9	; 0x09
    1a94:	28 17       	cp	r18, r24
    1a96:	39 07       	cpc	r19, r25
    1a98:	18 f4       	brcc	.+6      	; 0x1aa0 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	83 83       	std	Z+3, r24	; 0x03
    1a9e:	0e c0       	rjmp	.+28     	; 0x1abc <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1aa0:	87 e0       	ldi	r24, 0x07	; 7
    1aa2:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1aa4:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <transfer+0xa>
    1aa8:	09 c0       	rjmp	.+18     	; 0x1abc <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1aaa:	83 e0       	ldi	r24, 0x03	; 3
    1aac:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1aae:	89 ef       	ldi	r24, 0xF9	; 249
    1ab0:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <transfer+0xa>
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1ab6:	8b ef       	ldi	r24, 0xFB	; 251
    1ab8:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <transfer+0xa>
	}
}
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	08 95       	ret

00001ac2 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1ac2:	1f 92       	push	r1
    1ac4:	0f 92       	push	r0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	0f 92       	push	r0
    1aca:	11 24       	eor	r1, r1
    1acc:	0b b6       	in	r0, 0x3b	; 59
    1ace:	0f 92       	push	r0
    1ad0:	2f 93       	push	r18
    1ad2:	3f 93       	push	r19
    1ad4:	4f 93       	push	r20
    1ad6:	5f 93       	push	r21
    1ad8:	6f 93       	push	r22
    1ada:	7f 93       	push	r23
    1adc:	8f 93       	push	r24
    1ade:	9f 93       	push	r25
    1ae0:	af 93       	push	r26
    1ae2:	bf 93       	push	r27
    1ae4:	ef 93       	push	r30
    1ae6:	ff 93       	push	r31
    1ae8:	55 df       	rcall	.-342    	; 0x1994 <twim_interrupt_handler>
    1aea:	ff 91       	pop	r31
    1aec:	ef 91       	pop	r30
    1aee:	bf 91       	pop	r27
    1af0:	af 91       	pop	r26
    1af2:	9f 91       	pop	r25
    1af4:	8f 91       	pop	r24
    1af6:	7f 91       	pop	r23
    1af8:	6f 91       	pop	r22
    1afa:	5f 91       	pop	r21
    1afc:	4f 91       	pop	r20
    1afe:	3f 91       	pop	r19
    1b00:	2f 91       	pop	r18
    1b02:	0f 90       	pop	r0
    1b04:	0b be       	out	0x3b, r0	; 59
    1b06:	0f 90       	pop	r0
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	0f 90       	pop	r0
    1b0c:	1f 90       	pop	r1
    1b0e:	18 95       	reti

00001b10 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1b10:	1f 92       	push	r1
    1b12:	0f 92       	push	r0
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	0f 92       	push	r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	0b b6       	in	r0, 0x3b	; 59
    1b1c:	0f 92       	push	r0
    1b1e:	2f 93       	push	r18
    1b20:	3f 93       	push	r19
    1b22:	4f 93       	push	r20
    1b24:	5f 93       	push	r21
    1b26:	6f 93       	push	r22
    1b28:	7f 93       	push	r23
    1b2a:	8f 93       	push	r24
    1b2c:	9f 93       	push	r25
    1b2e:	af 93       	push	r26
    1b30:	bf 93       	push	r27
    1b32:	ef 93       	push	r30
    1b34:	ff 93       	push	r31
    1b36:	2e df       	rcall	.-420    	; 0x1994 <twim_interrupt_handler>
    1b38:	ff 91       	pop	r31
    1b3a:	ef 91       	pop	r30
    1b3c:	bf 91       	pop	r27
    1b3e:	af 91       	pop	r26
    1b40:	9f 91       	pop	r25
    1b42:	8f 91       	pop	r24
    1b44:	7f 91       	pop	r23
    1b46:	6f 91       	pop	r22
    1b48:	5f 91       	pop	r21
    1b4a:	4f 91       	pop	r20
    1b4c:	3f 91       	pop	r19
    1b4e:	2f 91       	pop	r18
    1b50:	0f 90       	pop	r0
    1b52:	0b be       	out	0x3b, r0	; 59
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1b5e:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    1b60:	db 01       	movw	r26, r22
    1b62:	14 96       	adiw	r26, 0x04	; 4
    1b64:	8c 91       	ld	r24, X
    1b66:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    1b68:	88 eb       	ldi	r24, 0xB8	; 184
    1b6a:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    1b70:	eb e9       	ldi	r30, 0x9B	; 155
    1b72:	f1 e2       	ldi	r31, 0x21	; 33
    1b74:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    1b76:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    1b78:	e0 ea       	ldi	r30, 0xA0	; 160
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	82 60       	ori	r24, 0x02	; 2
    1b80:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    1b82:	78 94       	sei

	return STATUS_OK;
}
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	08 95       	ret

00001b88 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	1f 92       	push	r1
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	9c 01       	movw	r18, r24
    1b94:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1b96:	89 2b       	or	r24, r25
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <twi_master_transfer+0x14>
    1b9a:	51 c0       	rjmp	.+162    	; 0x1c3e <twi_master_transfer+0xb6>
    1b9c:	30 97       	sbiw	r30, 0x00	; 0
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <twi_master_transfer+0x1a>
    1ba0:	50 c0       	rjmp	.+160    	; 0x1c42 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1ba2:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1ba4:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <transfer+0x9>
    1ba8:	88 23       	and	r24, r24
    1baa:	19 f0       	breq	.+6      	; 0x1bb2 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    1bac:	99 23       	and	r25, r25
    1bae:	f1 f3       	breq	.-4      	; 0x1bac <twi_master_transfer+0x24>
    1bb0:	4a c0       	rjmp	.+148    	; 0x1c46 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1bb2:	8f b7       	in	r24, 0x3f	; 63
    1bb4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1bb6:	f8 94       	cli
	return flags;
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1bba:	ab e9       	ldi	r26, 0x9B	; 155
    1bbc:	b1 e2       	ldi	r27, 0x21	; 33
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	19 96       	adiw	r26, 0x09	; 9
    1bc2:	9c 93       	st	X, r25
    1bc4:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    1bc6:	90 e8       	ldi	r25, 0x80	; 128
    1bc8:	1a 96       	adiw	r26, 0x0a	; 10
    1bca:	9c 93       	st	X, r25
    1bcc:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bce:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1bd0:	2d 93       	st	X+, r18
    1bd2:	3c 93       	st	X, r19
    1bd4:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    1bd6:	12 96       	adiw	r26, 0x02	; 2
    1bd8:	6d 93       	st	X+, r22
    1bda:	7c 93       	st	X, r23
    1bdc:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    1bde:	14 96       	adiw	r26, 0x04	; 4
    1be0:	1d 92       	st	X+, r1
    1be2:	1c 92       	st	X, r1
    1be4:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    1be6:	16 96       	adiw	r26, 0x06	; 6
    1be8:	1d 92       	st	X+, r1
    1bea:	1c 92       	st	X, r1
    1bec:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    1bee:	18 96       	adiw	r26, 0x08	; 8
    1bf0:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    1bf2:	80 81       	ld	r24, Z
    1bf4:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    1bf6:	64 81       	ldd	r22, Z+4	; 0x04
    1bf8:	75 81       	ldd	r23, Z+5	; 0x05
    1bfa:	67 2b       	or	r22, r23
    1bfc:	11 f4       	brne	.+4      	; 0x1c02 <twi_master_transfer+0x7a>
    1bfe:	41 11       	cpse	r20, r1
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    1c02:	f9 01       	movw	r30, r18
    1c04:	86 83       	std	Z+6, r24	; 0x06
    1c06:	03 c0       	rjmp	.+6      	; 0x1c0e <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    1c08:	81 60       	ori	r24, 0x01	; 1
    1c0a:	f9 01       	movw	r30, r18
    1c0c:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    1c0e:	eb e9       	ldi	r30, 0x9B	; 155
    1c10:	f1 e2       	ldi	r31, 0x21	; 33
    1c12:	92 85       	ldd	r25, Z+10	; 0x0a
    1c14:	90 38       	cpi	r25, 0x80	; 128
    1c16:	e9 f3       	breq	.-6      	; 0x1c12 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1c18:	f9 01       	movw	r30, r18
    1c1a:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1c1c:	83 70       	andi	r24, 0x03	; 3
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	49 f0       	breq	.+18     	; 0x1c34 <twi_master_transfer+0xac>
    1c22:	ab e9       	ldi	r26, 0x9B	; 155
    1c24:	b1 e2       	ldi	r27, 0x21	; 33
    1c26:	ed 91       	ld	r30, X+
    1c28:	fc 91       	ld	r31, X
    1c2a:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1c2c:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1c2e:	83 70       	andi	r24, 0x03	; 3
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	c9 f7       	brne	.-14     	; 0x1c26 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    1c34:	eb e9       	ldi	r30, 0x9B	; 155
    1c36:	f1 e2       	ldi	r31, 0x21	; 33
    1c38:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    1c3a:	11 86       	std	Z+9, r1	; 0x09
    1c3c:	05 c0       	rjmp	.+10     	; 0x1c48 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    1c3e:	88 ef       	ldi	r24, 0xF8	; 248
    1c40:	03 c0       	rjmp	.+6      	; 0x1c48 <twi_master_transfer+0xc0>
    1c42:	88 ef       	ldi	r24, 0xF8	; 248
    1c44:	01 c0       	rjmp	.+2      	; 0x1c48 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    1c46:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1c48:	0f 90       	pop	r0
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	08 95       	ret

00001c50 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	1f 92       	push	r1
    1c56:	1f 92       	push	r1
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	81 11       	cpse	r24, r1
    1c5e:	26 c0       	rjmp	.+76     	; 0x1cac <udd_sleep_mode+0x5c>
    1c60:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <udd_b_idle>
    1c64:	99 23       	and	r25, r25
    1c66:	f9 f0       	breq	.+62     	; 0x1ca6 <udd_sleep_mode+0x56>
    1c68:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <sleepmgr_locks+0x1>
    1c6c:	91 11       	cpse	r25, r1
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <udd_sleep_mode+0x22>
    1c70:	ff cf       	rjmp	.-2      	; 0x1c70 <udd_sleep_mode+0x20>
    1c72:	9f b7       	in	r25, 0x3f	; 63
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	f8 94       	cli
    1c78:	2a 81       	ldd	r18, Y+2	; 0x02
    1c7a:	e1 e3       	ldi	r30, 0x31	; 49
    1c7c:	f4 e2       	ldi	r31, 0x24	; 36
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	91 50       	subi	r25, 0x01	; 1
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	2f bf       	out	0x3f, r18	; 63
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <udd_sleep_mode+0x56>
    1c88:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <sleepmgr_locks+0x1>
    1c8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <udd_sleep_mode+0x42>
    1c90:	ff cf       	rjmp	.-2      	; 0x1c90 <udd_sleep_mode+0x40>
    1c92:	9f b7       	in	r25, 0x3f	; 63
    1c94:	99 83       	std	Y+1, r25	; 0x01
    1c96:	f8 94       	cli
    1c98:	29 81       	ldd	r18, Y+1	; 0x01
    1c9a:	e1 e3       	ldi	r30, 0x31	; 49
    1c9c:	f4 e2       	ldi	r31, 0x24	; 36
    1c9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ca0:	9f 5f       	subi	r25, 0xFF	; 255
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	2f bf       	out	0x3f, r18	; 63
    1ca6:	80 93 d0 22 	sts	0x22D0, r24	; 0x8022d0 <udd_b_idle>
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <udd_sleep_mode+0x66>
    1cac:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <udd_b_idle>
    1cb0:	99 23       	and	r25, r25
    1cb2:	51 f3       	breq	.-44     	; 0x1c88 <udd_sleep_mode+0x38>
    1cb4:	f8 cf       	rjmp	.-16     	; 0x1ca6 <udd_sleep_mode+0x56>
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	08 95       	ret

00001cc0 <udd_ctrl_init>:
    1cc0:	0f 93       	push	r16
    1cc2:	e8 ec       	ldi	r30, 0xC8	; 200
    1cc4:	f4 e0       	ldi	r31, 0x04	; 4
    1cc6:	80 81       	ld	r24, Z
    1cc8:	8f 7d       	andi	r24, 0xDF	; 223
    1cca:	80 83       	st	Z, r24
    1ccc:	80 81       	ld	r24, Z
    1cce:	8f 7d       	andi	r24, 0xDF	; 223
    1cd0:	80 83       	st	Z, r24
    1cd2:	e4 ea       	ldi	r30, 0xA4	; 164
    1cd4:	f2 e2       	ldi	r31, 0x22	; 34
    1cd6:	02 e0       	ldi	r16, 0x02	; 2
    1cd8:	05 93       	las	Z, r16
    1cda:	10 92 a6 22 	sts	0x22A6, r1	; 0x8022a6 <udd_sram+0x16>
    1cde:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udd_sram+0x17>
    1ce2:	00 e2       	ldi	r16, 0x20	; 32
    1ce4:	06 93       	lac	Z, r16
    1ce6:	00 e4       	ldi	r16, 0x40	; 64
    1ce8:	06 93       	lac	Z, r16
    1cea:	ec e9       	ldi	r30, 0x9C	; 156
    1cec:	f2 e2       	ldi	r31, 0x22	; 34
    1cee:	00 e4       	ldi	r16, 0x40	; 64
    1cf0:	06 93       	lac	Z, r16
    1cf2:	e1 e2       	ldi	r30, 0x21	; 33
    1cf4:	f4 e2       	ldi	r31, 0x24	; 36
    1cf6:	14 86       	std	Z+12, r1	; 0x0c
    1cf8:	15 86       	std	Z+13, r1	; 0x0d
    1cfa:	16 86       	std	Z+14, r1	; 0x0e
    1cfc:	17 86       	std	Z+15, r1	; 0x0f
    1cfe:	12 86       	std	Z+10, r1	; 0x0a
    1d00:	13 86       	std	Z+11, r1	; 0x0b
    1d02:	10 92 8f 22 	sts	0x228F, r1	; 0x80228f <udd_ep_control_state>
    1d06:	0f 91       	pop	r16
    1d08:	08 95       	ret

00001d0a <udd_ctrl_stall_data>:
    1d0a:	0f 93       	push	r16
    1d0c:	85 e0       	ldi	r24, 0x05	; 5
    1d0e:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
    1d12:	e5 ea       	ldi	r30, 0xA5	; 165
    1d14:	f2 e2       	ldi	r31, 0x22	; 34
    1d16:	04 e0       	ldi	r16, 0x04	; 4
    1d18:	05 93       	las	Z, r16
    1d1a:	ed e9       	ldi	r30, 0x9D	; 157
    1d1c:	f2 e2       	ldi	r31, 0x22	; 34
    1d1e:	04 e0       	ldi	r16, 0x04	; 4
    1d20:	05 93       	las	Z, r16
    1d22:	0f 91       	pop	r16
    1d24:	08 95       	ret

00001d26 <udd_ctrl_send_zlp_in>:
    1d26:	0f 93       	push	r16
    1d28:	83 e0       	ldi	r24, 0x03	; 3
    1d2a:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
    1d2e:	10 92 a6 22 	sts	0x22A6, r1	; 0x8022a6 <udd_sram+0x16>
    1d32:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udd_sram+0x17>
    1d36:	e4 ea       	ldi	r30, 0xA4	; 164
    1d38:	f2 e2       	ldi	r31, 0x22	; 34
    1d3a:	02 e0       	ldi	r16, 0x02	; 2
    1d3c:	06 93       	lac	Z, r16
    1d3e:	0f 91       	pop	r16
    1d40:	08 95       	ret

00001d42 <udd_ctrl_endofrequest>:
    1d42:	e0 91 2d 24 	lds	r30, 0x242D	; 0x80242d <udd_g_ctrlreq+0xc>
    1d46:	f0 91 2e 24 	lds	r31, 0x242E	; 0x80242e <udd_g_ctrlreq+0xd>
    1d4a:	30 97       	sbiw	r30, 0x00	; 0
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <udd_ctrl_endofrequest+0xe>
    1d4e:	19 95       	eicall
    1d50:	08 95       	ret

00001d52 <udd_ctrl_in_sent>:
    1d52:	0f 93       	push	r16
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	80 91 8f 22 	lds	r24, 0x228F	; 0x80228f <udd_ep_control_state>
    1d5c:	83 30       	cpi	r24, 0x03	; 3
    1d5e:	19 f4       	brne	.+6      	; 0x1d66 <udd_ctrl_in_sent+0x14>
    1d60:	f0 df       	rcall	.-32     	; 0x1d42 <udd_ctrl_endofrequest>
    1d62:	ae df       	rcall	.-164    	; 0x1cc0 <udd_ctrl_init>
    1d64:	5e c0       	rjmp	.+188    	; 0x1e22 <udd_ctrl_in_sent+0xd0>
    1d66:	80 91 8b 22 	lds	r24, 0x228B	; 0x80228b <udd_ctrl_payload_nb_trans>
    1d6a:	90 91 8c 22 	lds	r25, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1d6e:	c0 91 2b 24 	lds	r28, 0x242B	; 0x80242b <udd_g_ctrlreq+0xa>
    1d72:	d0 91 2c 24 	lds	r29, 0x242C	; 0x80242c <udd_g_ctrlreq+0xb>
    1d76:	c8 1b       	sub	r28, r24
    1d78:	d9 0b       	sbc	r29, r25
    1d7a:	71 f5       	brne	.+92     	; 0x1dd8 <udd_ctrl_in_sent+0x86>
    1d7c:	20 91 8d 22 	lds	r18, 0x228D	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    1d80:	30 91 8e 22 	lds	r19, 0x228E	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    1d84:	82 0f       	add	r24, r18
    1d86:	93 1f       	adc	r25, r19
    1d88:	80 93 8d 22 	sts	0x228D, r24	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    1d8c:	90 93 8e 22 	sts	0x228E, r25	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    1d90:	20 91 27 24 	lds	r18, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    1d94:	30 91 28 24 	lds	r19, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    1d98:	82 17       	cp	r24, r18
    1d9a:	93 07       	cpc	r25, r19
    1d9c:	21 f0       	breq	.+8      	; 0x1da6 <udd_ctrl_in_sent+0x54>
    1d9e:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <b_shortpacket.5472>
    1da2:	88 23       	and	r24, r24
    1da4:	41 f0       	breq	.+16     	; 0x1db6 <udd_ctrl_in_sent+0x64>
    1da6:	84 e0       	ldi	r24, 0x04	; 4
    1da8:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
    1dac:	ec e9       	ldi	r30, 0x9C	; 156
    1dae:	f2 e2       	ldi	r31, 0x22	; 34
    1db0:	02 e0       	ldi	r16, 0x02	; 2
    1db2:	06 93       	lac	Z, r16
    1db4:	36 c0       	rjmp	.+108    	; 0x1e22 <udd_ctrl_in_sent+0xd0>
    1db6:	e0 91 2f 24 	lds	r30, 0x242F	; 0x80242f <udd_g_ctrlreq+0xe>
    1dba:	f0 91 30 24 	lds	r31, 0x2430	; 0x802430 <udd_g_ctrlreq+0xf>
    1dbe:	30 97       	sbiw	r30, 0x00	; 0
    1dc0:	99 f0       	breq	.+38     	; 0x1de8 <udd_ctrl_in_sent+0x96>
    1dc2:	19 95       	eicall
    1dc4:	88 23       	and	r24, r24
    1dc6:	81 f0       	breq	.+32     	; 0x1de8 <udd_ctrl_in_sent+0x96>
    1dc8:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <udd_ctrl_payload_nb_trans>
    1dcc:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1dd0:	c0 91 2b 24 	lds	r28, 0x242B	; 0x80242b <udd_g_ctrlreq+0xa>
    1dd4:	d0 91 2c 24 	lds	r29, 0x242C	; 0x80242c <udd_g_ctrlreq+0xb>
    1dd8:	c0 34       	cpi	r28, 0x40	; 64
    1dda:	d1 05       	cpc	r29, r1
    1ddc:	28 f0       	brcs	.+10     	; 0x1de8 <udd_ctrl_in_sent+0x96>
    1dde:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <b_shortpacket.5472>
    1de2:	c0 e4       	ldi	r28, 0x40	; 64
    1de4:	d0 e0       	ldi	r29, 0x00	; 0
    1de6:	03 c0       	rjmp	.+6      	; 0x1dee <udd_ctrl_in_sent+0x9c>
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <b_shortpacket.5472>
    1dee:	e0 e9       	ldi	r30, 0x90	; 144
    1df0:	f2 e2       	ldi	r31, 0x22	; 34
    1df2:	c6 8b       	std	Z+22, r28	; 0x16
    1df4:	d7 8b       	std	Z+23, r29	; 0x17
    1df6:	80 91 8b 22 	lds	r24, 0x228B	; 0x80228b <udd_ctrl_payload_nb_trans>
    1dfa:	90 91 8c 22 	lds	r25, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1dfe:	20 91 29 24 	lds	r18, 0x2429	; 0x802429 <udd_g_ctrlreq+0x8>
    1e02:	30 91 2a 24 	lds	r19, 0x242A	; 0x80242a <udd_g_ctrlreq+0x9>
    1e06:	28 0f       	add	r18, r24
    1e08:	39 1f       	adc	r19, r25
    1e0a:	20 8f       	std	Z+24, r18	; 0x18
    1e0c:	31 8f       	std	Z+25, r19	; 0x19
    1e0e:	c8 0f       	add	r28, r24
    1e10:	d9 1f       	adc	r29, r25
    1e12:	c0 93 8b 22 	sts	0x228B, r28	; 0x80228b <udd_ctrl_payload_nb_trans>
    1e16:	d0 93 8c 22 	sts	0x228C, r29	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1e1a:	e4 ea       	ldi	r30, 0xA4	; 164
    1e1c:	f2 e2       	ldi	r31, 0x22	; 34
    1e1e:	02 e0       	ldi	r16, 0x02	; 2
    1e20:	06 93       	lac	Z, r16
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	0f 91       	pop	r16
    1e28:	08 95       	ret

00001e2a <udd_ep_get_size>:
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	81 81       	ldd	r24, Z+1	; 0x01
    1e2e:	e8 2f       	mov	r30, r24
    1e30:	e7 70       	andi	r30, 0x07	; 7
    1e32:	8e 2f       	mov	r24, r30
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	fc 01       	movw	r30, r24
    1e38:	31 97       	sbiw	r30, 0x01	; 1
    1e3a:	e7 30       	cpi	r30, 0x07	; 7
    1e3c:	f1 05       	cpc	r31, r1
    1e3e:	d8 f4       	brcc	.+54     	; 0x1e76 <udd_ep_get_size+0x4c>
    1e40:	88 27       	eor	r24, r24
    1e42:	e2 50       	subi	r30, 0x02	; 2
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	8f 4f       	sbci	r24, 0xFF	; 255
    1e48:	0c 94 21 23 	jmp	0x4642	; 0x4642 <__tablejump2__>
    1e4c:	80 e1       	ldi	r24, 0x10	; 16
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	08 95       	ret
    1e52:	80 e2       	ldi	r24, 0x20	; 32
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	08 95       	ret
    1e58:	80 e4       	ldi	r24, 0x40	; 64
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	08 95       	ret
    1e5e:	80 e8       	ldi	r24, 0x80	; 128
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	08 95       	ret
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	91 e0       	ldi	r25, 0x01	; 1
    1e68:	08 95       	ret
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	92 e0       	ldi	r25, 0x02	; 2
    1e6e:	08 95       	ret
    1e70:	8f ef       	ldi	r24, 0xFF	; 255
    1e72:	93 e0       	ldi	r25, 0x03	; 3
    1e74:	08 95       	ret
    1e76:	88 e0       	ldi	r24, 0x08	; 8
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	08 95       	ret

00001e7c <udd_ep_get_job>:
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	2f 70       	andi	r18, 0x0F	; 15
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	08 2e       	mov	r0, r24
    1e88:	00 0c       	add	r0, r0
    1e8a:	99 0b       	sbc	r25, r25
    1e8c:	88 27       	eor	r24, r24
    1e8e:	99 0f       	add	r25, r25
    1e90:	88 1f       	adc	r24, r24
    1e92:	99 27       	eor	r25, r25
    1e94:	82 0f       	add	r24, r18
    1e96:	93 1f       	adc	r25, r19
    1e98:	02 97       	sbiw	r24, 0x02	; 2
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	22 0f       	add	r18, r18
    1e9e:	33 1f       	adc	r19, r19
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	22 0f       	add	r18, r18
    1ea6:	33 1f       	adc	r19, r19
    1ea8:	82 0f       	add	r24, r18
    1eaa:	93 1f       	adc	r25, r19
    1eac:	89 5d       	subi	r24, 0xD9	; 217
    1eae:	9d 4d       	sbci	r25, 0xDD	; 221
    1eb0:	08 95       	ret

00001eb2 <udd_ctrl_interrupt_tc_setup>:
    1eb2:	0f 93       	push	r16
    1eb4:	cf 93       	push	r28
    1eb6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1eba:	80 ff       	sbrs	r24, 0
    1ebc:	65 c0       	rjmp	.+202    	; 0x1f88 <udd_ctrl_interrupt_tc_setup+0xd6>
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1ec4:	ec e9       	ldi	r30, 0x9C	; 156
    1ec6:	f2 e2       	ldi	r31, 0x22	; 34
    1ec8:	00 e8       	ldi	r16, 0x80	; 128
    1eca:	06 93       	lac	Z, r16
    1ecc:	e4 ea       	ldi	r30, 0xA4	; 164
    1ece:	f2 e2       	ldi	r31, 0x22	; 34
    1ed0:	00 e8       	ldi	r16, 0x80	; 128
    1ed2:	06 93       	lac	Z, r16
    1ed4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1ed8:	ec e9       	ldi	r30, 0x9C	; 156
    1eda:	f2 e2       	ldi	r31, 0x22	; 34
    1edc:	00 e1       	ldi	r16, 0x10	; 16
    1ede:	06 93       	lac	Z, r16
    1ee0:	80 91 8f 22 	lds	r24, 0x228F	; 0x80228f <udd_ep_control_state>
    1ee4:	88 23       	and	r24, r24
    1ee6:	29 f0       	breq	.+10     	; 0x1ef2 <udd_ctrl_interrupt_tc_setup+0x40>
    1ee8:	83 50       	subi	r24, 0x03	; 3
    1eea:	82 30       	cpi	r24, 0x02	; 2
    1eec:	08 f4       	brcc	.+2      	; 0x1ef0 <udd_ctrl_interrupt_tc_setup+0x3e>
    1eee:	29 df       	rcall	.-430    	; 0x1d42 <udd_ctrl_endofrequest>
    1ef0:	e7 de       	rcall	.-562    	; 0x1cc0 <udd_ctrl_init>
    1ef2:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <udd_sram+0xe>
    1ef6:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <udd_sram+0xf>
    1efa:	08 97       	sbiw	r24, 0x08	; 8
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <udd_ctrl_interrupt_tc_setup+0x4e>
    1efe:	46 c0       	rjmp	.+140    	; 0x1f8c <udd_ctrl_interrupt_tc_setup+0xda>
    1f00:	88 e0       	ldi	r24, 0x08	; 8
    1f02:	eb e4       	ldi	r30, 0x4B	; 75
    1f04:	f2 e2       	ldi	r31, 0x22	; 34
    1f06:	a1 e2       	ldi	r26, 0x21	; 33
    1f08:	b4 e2       	ldi	r27, 0x24	; 36
    1f0a:	01 90       	ld	r0, Z+
    1f0c:	0d 92       	st	X+, r0
    1f0e:	8a 95       	dec	r24
    1f10:	e1 f7       	brne	.-8      	; 0x1f0a <udd_ctrl_interrupt_tc_setup+0x58>
    1f12:	e8 ec       	ldi	r30, 0xC8	; 200
    1f14:	f4 e0       	ldi	r31, 0x04	; 4
    1f16:	80 81       	ld	r24, Z
    1f18:	80 62       	ori	r24, 0x20	; 32
    1f1a:	80 83       	st	Z, r24
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 62       	ori	r24, 0x20	; 32
    1f20:	80 83       	st	Z, r24
    1f22:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <udc_process_setup>
    1f26:	c8 2f       	mov	r28, r24
    1f28:	81 11       	cpse	r24, r1
    1f2a:	03 c0       	rjmp	.+6      	; 0x1f32 <udd_ctrl_interrupt_tc_setup+0x80>
    1f2c:	ee de       	rcall	.-548    	; 0x1d0a <udd_ctrl_stall_data>
    1f2e:	c1 e0       	ldi	r28, 0x01	; 1
    1f30:	2e c0       	rjmp	.+92     	; 0x1f8e <udd_ctrl_interrupt_tc_setup+0xdc>
    1f32:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq>
    1f36:	88 23       	and	r24, r24
    1f38:	6c f4       	brge	.+26     	; 0x1f54 <udd_ctrl_interrupt_tc_setup+0xa2>
    1f3a:	10 92 8d 22 	sts	0x228D, r1	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    1f3e:	10 92 8e 22 	sts	0x228E, r1	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    1f42:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <udd_ctrl_payload_nb_trans>
    1f46:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
    1f50:	00 df       	rcall	.-512    	; 0x1d52 <udd_ctrl_in_sent>
    1f52:	1d c0       	rjmp	.+58     	; 0x1f8e <udd_ctrl_interrupt_tc_setup+0xdc>
    1f54:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    1f58:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    1f5c:	89 2b       	or	r24, r25
    1f5e:	11 f4       	brne	.+4      	; 0x1f64 <udd_ctrl_interrupt_tc_setup+0xb2>
    1f60:	e2 de       	rcall	.-572    	; 0x1d26 <udd_ctrl_send_zlp_in>
    1f62:	15 c0       	rjmp	.+42     	; 0x1f8e <udd_ctrl_interrupt_tc_setup+0xdc>
    1f64:	10 92 8d 22 	sts	0x228D, r1	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    1f68:	10 92 8e 22 	sts	0x228E, r1	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    1f6c:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <udd_ctrl_payload_nb_trans>
    1f70:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
    1f7a:	ec e9       	ldi	r30, 0x9C	; 156
    1f7c:	f2 e2       	ldi	r31, 0x22	; 34
    1f7e:	02 e0       	ldi	r16, 0x02	; 2
    1f80:	06 93       	lac	Z, r16
    1f82:	00 e2       	ldi	r16, 0x20	; 32
    1f84:	06 93       	lac	Z, r16
    1f86:	03 c0       	rjmp	.+6      	; 0x1f8e <udd_ctrl_interrupt_tc_setup+0xdc>
    1f88:	c0 e0       	ldi	r28, 0x00	; 0
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <udd_ctrl_interrupt_tc_setup+0xdc>
    1f8c:	c1 e0       	ldi	r28, 0x01	; 1
    1f8e:	8c 2f       	mov	r24, r28
    1f90:	cf 91       	pop	r28
    1f92:	0f 91       	pop	r16
    1f94:	08 95       	ret

00001f96 <udd_ep_trans_complet>:
    1f96:	8f 92       	push	r8
    1f98:	9f 92       	push	r9
    1f9a:	af 92       	push	r10
    1f9c:	bf 92       	push	r11
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	d8 2e       	mov	r13, r24
    1fae:	66 df       	rcall	.-308    	; 0x1e7c <udd_ep_get_job>
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	cd 2d       	mov	r28, r13
    1fb4:	cf 70       	andi	r28, 0x0F	; 15
    1fb6:	d0 e0       	ldi	r29, 0x00	; 0
    1fb8:	ce 01       	movw	r24, r28
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	cd 2d       	mov	r28, r13
    1fc0:	0d 2c       	mov	r0, r13
    1fc2:	00 0c       	add	r0, r0
    1fc4:	dd 0b       	sbc	r29, r29
    1fc6:	cc 27       	eor	r28, r28
    1fc8:	dd 0f       	add	r29, r29
    1fca:	cc 1f       	adc	r28, r28
    1fcc:	dd 27       	eor	r29, r29
    1fce:	c8 0f       	add	r28, r24
    1fd0:	d9 1f       	adc	r29, r25
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	9c 01       	movw	r18, r24
    1fe2:	24 56       	subi	r18, 0x64	; 100
    1fe4:	3d 4d       	sbci	r19, 0xDD	; 221
    1fe6:	79 01       	movw	r14, r18
    1fe8:	c9 01       	movw	r24, r18
    1fea:	1f df       	rcall	.-450    	; 0x1e2a <udd_ep_get_size>
    1fec:	4c 01       	movw	r8, r24
    1fee:	dd 20       	and	r13, r13
    1ff0:	0c f0       	brlt	.+2      	; 0x1ff4 <udd_ep_trans_complet+0x5e>
    1ff2:	7b c0       	rjmp	.+246    	; 0x20ea <udd_ep_trans_complet+0x154>
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ee 0f       	add	r30, r30
    1ff8:	ff 1f       	adc	r31, r31
    1ffa:	ee 0f       	add	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	e0 57       	subi	r30, 0x70	; 112
    2004:	fd 4d       	sbci	r31, 0xDD	; 221
    2006:	22 89       	ldd	r18, Z+18	; 0x12
    2008:	33 89       	ldd	r19, Z+19	; 0x13
    200a:	d8 01       	movw	r26, r16
    200c:	15 96       	adiw	r26, 0x05	; 5
    200e:	8d 91       	ld	r24, X+
    2010:	9c 91       	ld	r25, X
    2012:	16 97       	sbiw	r26, 0x06	; 6
    2014:	82 0f       	add	r24, r18
    2016:	93 1f       	adc	r25, r19
    2018:	15 96       	adiw	r26, 0x05	; 5
    201a:	8d 93       	st	X+, r24
    201c:	9c 93       	st	X, r25
    201e:	16 97       	sbiw	r26, 0x06	; 6
    2020:	13 96       	adiw	r26, 0x03	; 3
    2022:	2d 91       	ld	r18, X+
    2024:	3c 91       	ld	r19, X
    2026:	14 97       	sbiw	r26, 0x04	; 4
    2028:	82 17       	cp	r24, r18
    202a:	93 07       	cpc	r25, r19
    202c:	09 f4       	brne	.+2      	; 0x2030 <udd_ep_trans_complet+0x9a>
    202e:	47 c0       	rjmp	.+142    	; 0x20be <udd_ep_trans_complet+0x128>
    2030:	28 1b       	sub	r18, r24
    2032:	39 0b       	sbc	r19, r25
    2034:	21 15       	cp	r18, r1
    2036:	b4 e0       	ldi	r27, 0x04	; 4
    2038:	3b 07       	cpc	r19, r27
    203a:	40 f0       	brcs	.+16     	; 0x204c <udd_ep_trans_complet+0xb6>
    203c:	2f ef       	ldi	r18, 0xFF	; 255
    203e:	33 e0       	ldi	r19, 0x03	; 3
    2040:	c9 01       	movw	r24, r18
    2042:	b4 01       	movw	r22, r8
    2044:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <__udivmodhi4>
    2048:	28 1b       	sub	r18, r24
    204a:	39 0b       	sbc	r19, r25
    204c:	f8 01       	movw	r30, r16
    204e:	80 81       	ld	r24, Z
    2050:	81 ff       	sbrs	r24, 1
    2052:	0a c0       	rjmp	.+20     	; 0x2068 <udd_ep_trans_complet+0xd2>
    2054:	c9 01       	movw	r24, r18
    2056:	b4 01       	movw	r22, r8
    2058:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <__udivmodhi4>
    205c:	41 e0       	ldi	r20, 0x01	; 1
    205e:	89 2b       	or	r24, r25
    2060:	09 f0       	breq	.+2      	; 0x2064 <udd_ep_trans_complet+0xce>
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	84 2f       	mov	r24, r20
    2066:	01 c0       	rjmp	.+2      	; 0x206a <udd_ep_trans_complet+0xd4>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	d8 01       	movw	r26, r16
    206c:	9c 91       	ld	r25, X
    206e:	80 fb       	bst	r24, 0
    2070:	91 f9       	bld	r25, 1
    2072:	9c 93       	st	X, r25
    2074:	fe 01       	movw	r30, r28
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	ee 0f       	add	r30, r30
    207c:	ff 1f       	adc	r31, r31
    207e:	ee 0f       	add	r30, r30
    2080:	ff 1f       	adc	r31, r31
    2082:	e0 57       	subi	r30, 0x70	; 112
    2084:	fd 4d       	sbci	r31, 0xDD	; 221
    2086:	12 8a       	std	Z+18, r1	; 0x12
    2088:	13 8a       	std	Z+19, r1	; 0x13
    208a:	26 87       	std	Z+14, r18	; 0x0e
    208c:	37 87       	std	Z+15, r19	; 0x0f
    208e:	11 96       	adiw	r26, 0x01	; 1
    2090:	2d 91       	ld	r18, X+
    2092:	3c 91       	ld	r19, X
    2094:	12 97       	sbiw	r26, 0x02	; 2
    2096:	15 96       	adiw	r26, 0x05	; 5
    2098:	8d 91       	ld	r24, X+
    209a:	9c 91       	ld	r25, X
    209c:	16 97       	sbiw	r26, 0x06	; 6
    209e:	82 0f       	add	r24, r18
    20a0:	93 1f       	adc	r25, r19
    20a2:	cc 0f       	add	r28, r28
    20a4:	dd 1f       	adc	r29, r29
    20a6:	cc 0f       	add	r28, r28
    20a8:	dd 1f       	adc	r29, r29
    20aa:	cc 0f       	add	r28, r28
    20ac:	dd 1f       	adc	r29, r29
    20ae:	c0 56       	subi	r28, 0x60	; 96
    20b0:	dd 4d       	sbci	r29, 0xDD	; 221
    20b2:	88 83       	st	Y, r24
    20b4:	99 83       	std	Y+1, r25	; 0x01
    20b6:	f7 01       	movw	r30, r14
    20b8:	02 e0       	ldi	r16, 0x02	; 2
    20ba:	06 93       	lac	Z, r16
    20bc:	e4 c0       	rjmp	.+456    	; 0x2286 <udd_ep_trans_complet+0x2f0>
    20be:	d8 01       	movw	r26, r16
    20c0:	8c 91       	ld	r24, X
    20c2:	81 ff       	sbrs	r24, 1
    20c4:	cd c0       	rjmp	.+410    	; 0x2260 <udd_ep_trans_complet+0x2ca>
    20c6:	8d 7f       	andi	r24, 0xFD	; 253
    20c8:	8c 93       	st	X, r24
    20ca:	cc 0f       	add	r28, r28
    20cc:	dd 1f       	adc	r29, r29
    20ce:	cc 0f       	add	r28, r28
    20d0:	dd 1f       	adc	r29, r29
    20d2:	cc 0f       	add	r28, r28
    20d4:	dd 1f       	adc	r29, r29
    20d6:	c0 57       	subi	r28, 0x70	; 112
    20d8:	dd 4d       	sbci	r29, 0xDD	; 221
    20da:	1a 8a       	std	Y+18, r1	; 0x12
    20dc:	1b 8a       	std	Y+19, r1	; 0x13
    20de:	1e 86       	std	Y+14, r1	; 0x0e
    20e0:	1f 86       	std	Y+15, r1	; 0x0f
    20e2:	f7 01       	movw	r30, r14
    20e4:	02 e0       	ldi	r16, 0x02	; 2
    20e6:	06 93       	lac	Z, r16
    20e8:	ce c0       	rjmp	.+412    	; 0x2286 <udd_ep_trans_complet+0x2f0>
    20ea:	fe 01       	movw	r30, r28
    20ec:	ee 0f       	add	r30, r30
    20ee:	ff 1f       	adc	r31, r31
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	e0 57       	subi	r30, 0x70	; 112
    20fa:	fd 4d       	sbci	r31, 0xDD	; 221
    20fc:	a6 84       	ldd	r10, Z+14	; 0x0e
    20fe:	b7 84       	ldd	r11, Z+15	; 0x0f
    2100:	d8 01       	movw	r26, r16
    2102:	8c 91       	ld	r24, X
    2104:	82 ff       	sbrs	r24, 2
    2106:	1b c0       	rjmp	.+54     	; 0x213e <udd_ep_trans_complet+0x1a8>
    2108:	11 96       	adiw	r26, 0x01	; 1
    210a:	ed 91       	ld	r30, X+
    210c:	fc 91       	ld	r31, X
    210e:	12 97       	sbiw	r26, 0x02	; 2
    2110:	15 96       	adiw	r26, 0x05	; 5
    2112:	2d 91       	ld	r18, X+
    2114:	3c 91       	ld	r19, X
    2116:	16 97       	sbiw	r26, 0x06	; 6
    2118:	13 96       	adiw	r26, 0x03	; 3
    211a:	8d 91       	ld	r24, X+
    211c:	9c 91       	ld	r25, X
    211e:	14 97       	sbiw	r26, 0x04	; 4
    2120:	b4 01       	movw	r22, r8
    2122:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <__udivmodhi4>
    2126:	b0 e4       	ldi	r27, 0x40	; 64
    2128:	db 9e       	mul	r13, r27
    212a:	b0 01       	movw	r22, r0
    212c:	11 24       	eor	r1, r1
    212e:	69 59       	subi	r22, 0x99	; 153
    2130:	7e 4d       	sbci	r23, 0xDE	; 222
    2132:	ac 01       	movw	r20, r24
    2134:	cf 01       	movw	r24, r30
    2136:	82 0f       	add	r24, r18
    2138:	93 1f       	adc	r25, r19
    213a:	0e 94 38 23 	call	0x4670	; 0x4670 <memcpy>
    213e:	f8 01       	movw	r30, r16
    2140:	25 81       	ldd	r18, Z+5	; 0x05
    2142:	36 81       	ldd	r19, Z+6	; 0x06
    2144:	2a 0d       	add	r18, r10
    2146:	3b 1d       	adc	r19, r11
    2148:	25 83       	std	Z+5, r18	; 0x05
    214a:	36 83       	std	Z+6, r19	; 0x06
    214c:	83 81       	ldd	r24, Z+3	; 0x03
    214e:	94 81       	ldd	r25, Z+4	; 0x04
    2150:	82 17       	cp	r24, r18
    2152:	93 07       	cpc	r25, r19
    2154:	68 f4       	brcc	.+26     	; 0x2170 <udd_ep_trans_complet+0x1da>
    2156:	85 83       	std	Z+5, r24	; 0x05
    2158:	96 83       	std	Z+6, r25	; 0x06
    215a:	cc 0f       	add	r28, r28
    215c:	dd 1f       	adc	r29, r29
    215e:	cc 0f       	add	r28, r28
    2160:	dd 1f       	adc	r29, r29
    2162:	cc 0f       	add	r28, r28
    2164:	dd 1f       	adc	r29, r29
    2166:	c0 57       	subi	r28, 0x70	; 112
    2168:	dd 4d       	sbci	r29, 0xDD	; 221
    216a:	8a 89       	ldd	r24, Y+18	; 0x12
    216c:	9b 89       	ldd	r25, Y+19	; 0x13
    216e:	78 c0       	rjmp	.+240    	; 0x2260 <udd_ep_trans_complet+0x2ca>
    2170:	fe 01       	movw	r30, r28
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	ee 0f       	add	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	ee 0f       	add	r30, r30
    217c:	ff 1f       	adc	r31, r31
    217e:	e0 57       	subi	r30, 0x70	; 112
    2180:	fd 4d       	sbci	r31, 0xDD	; 221
    2182:	42 89       	ldd	r20, Z+18	; 0x12
    2184:	53 89       	ldd	r21, Z+19	; 0x13
    2186:	a4 16       	cp	r10, r20
    2188:	b5 06       	cpc	r11, r21
    218a:	09 f0       	breq	.+2      	; 0x218e <udd_ep_trans_complet+0x1f8>
    218c:	69 c0       	rjmp	.+210    	; 0x2260 <udd_ep_trans_complet+0x2ca>
    218e:	28 17       	cp	r18, r24
    2190:	39 07       	cpc	r19, r25
    2192:	09 f4       	brne	.+2      	; 0x2196 <udd_ep_trans_complet+0x200>
    2194:	65 c0       	rjmp	.+202    	; 0x2260 <udd_ep_trans_complet+0x2ca>
    2196:	ac 01       	movw	r20, r24
    2198:	42 1b       	sub	r20, r18
    219a:	53 0b       	sbc	r21, r19
    219c:	9a 01       	movw	r18, r20
    219e:	21 15       	cp	r18, r1
    21a0:	54 e0       	ldi	r21, 0x04	; 4
    21a2:	35 07       	cpc	r19, r21
    21a4:	48 f0       	brcs	.+18     	; 0x21b8 <udd_ep_trans_complet+0x222>
    21a6:	2f ef       	ldi	r18, 0xFF	; 255
    21a8:	33 e0       	ldi	r19, 0x03	; 3
    21aa:	c9 01       	movw	r24, r18
    21ac:	b4 01       	movw	r22, r8
    21ae:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <__udivmodhi4>
    21b2:	28 1b       	sub	r18, r24
    21b4:	39 0b       	sbc	r19, r25
    21b6:	06 c0       	rjmp	.+12     	; 0x21c4 <udd_ep_trans_complet+0x22e>
    21b8:	c9 01       	movw	r24, r18
    21ba:	b4 01       	movw	r22, r8
    21bc:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <__udivmodhi4>
    21c0:	28 1b       	sub	r18, r24
    21c2:	39 0b       	sbc	r19, r25
    21c4:	fe 01       	movw	r30, r28
    21c6:	ee 0f       	add	r30, r30
    21c8:	ff 1f       	adc	r31, r31
    21ca:	ee 0f       	add	r30, r30
    21cc:	ff 1f       	adc	r31, r31
    21ce:	ee 0f       	add	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	e0 57       	subi	r30, 0x70	; 112
    21d4:	fd 4d       	sbci	r31, 0xDD	; 221
    21d6:	16 86       	std	Z+14, r1	; 0x0e
    21d8:	17 86       	std	Z+15, r1	; 0x0f
    21da:	28 15       	cp	r18, r8
    21dc:	39 05       	cpc	r19, r9
    21de:	00 f5       	brcc	.+64     	; 0x2220 <udd_ep_trans_complet+0x28a>
    21e0:	d8 01       	movw	r26, r16
    21e2:	8c 91       	ld	r24, X
    21e4:	84 60       	ori	r24, 0x04	; 4
    21e6:	8c 93       	st	X, r24
    21e8:	b0 e4       	ldi	r27, 0x40	; 64
    21ea:	db 9e       	mul	r13, r27
    21ec:	c0 01       	movw	r24, r0
    21ee:	11 24       	eor	r1, r1
    21f0:	89 59       	subi	r24, 0x99	; 153
    21f2:	9e 4d       	sbci	r25, 0xDE	; 222
    21f4:	fe 01       	movw	r30, r28
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	ee 0f       	add	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	e0 56       	subi	r30, 0x60	; 96
    2204:	fd 4d       	sbci	r31, 0xDD	; 221
    2206:	80 83       	st	Z, r24
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	cc 0f       	add	r28, r28
    220c:	dd 1f       	adc	r29, r29
    220e:	cc 0f       	add	r28, r28
    2210:	dd 1f       	adc	r29, r29
    2212:	cc 0f       	add	r28, r28
    2214:	dd 1f       	adc	r29, r29
    2216:	c0 57       	subi	r28, 0x70	; 112
    2218:	dd 4d       	sbci	r29, 0xDD	; 221
    221a:	8a 8a       	std	Y+18, r8	; 0x12
    221c:	9b 8a       	std	Y+19, r9	; 0x13
    221e:	1c c0       	rjmp	.+56     	; 0x2258 <udd_ep_trans_complet+0x2c2>
    2220:	f8 01       	movw	r30, r16
    2222:	41 81       	ldd	r20, Z+1	; 0x01
    2224:	52 81       	ldd	r21, Z+2	; 0x02
    2226:	85 81       	ldd	r24, Z+5	; 0x05
    2228:	96 81       	ldd	r25, Z+6	; 0x06
    222a:	84 0f       	add	r24, r20
    222c:	95 1f       	adc	r25, r21
    222e:	fe 01       	movw	r30, r28
    2230:	ee 0f       	add	r30, r30
    2232:	ff 1f       	adc	r31, r31
    2234:	ee 0f       	add	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	ee 0f       	add	r30, r30
    223a:	ff 1f       	adc	r31, r31
    223c:	e0 56       	subi	r30, 0x60	; 96
    223e:	fd 4d       	sbci	r31, 0xDD	; 221
    2240:	80 83       	st	Z, r24
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	cc 0f       	add	r28, r28
    2246:	dd 1f       	adc	r29, r29
    2248:	cc 0f       	add	r28, r28
    224a:	dd 1f       	adc	r29, r29
    224c:	cc 0f       	add	r28, r28
    224e:	dd 1f       	adc	r29, r29
    2250:	c0 57       	subi	r28, 0x70	; 112
    2252:	dd 4d       	sbci	r29, 0xDD	; 221
    2254:	2a 8b       	std	Y+18, r18	; 0x12
    2256:	3b 8b       	std	Y+19, r19	; 0x13
    2258:	f7 01       	movw	r30, r14
    225a:	02 e0       	ldi	r16, 0x02	; 2
    225c:	06 93       	lac	Z, r16
    225e:	13 c0       	rjmp	.+38     	; 0x2286 <udd_ep_trans_complet+0x2f0>
    2260:	d8 01       	movw	r26, r16
    2262:	8c 91       	ld	r24, X
    2264:	80 ff       	sbrs	r24, 0
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <udd_ep_trans_complet+0x2f0>
    2268:	8e 7f       	andi	r24, 0xFE	; 254
    226a:	8c 93       	st	X, r24
    226c:	17 96       	adiw	r26, 0x07	; 7
    226e:	ed 91       	ld	r30, X+
    2270:	fc 91       	ld	r31, X
    2272:	18 97       	sbiw	r26, 0x08	; 8
    2274:	30 97       	sbiw	r30, 0x00	; 0
    2276:	39 f0       	breq	.+14     	; 0x2286 <udd_ep_trans_complet+0x2f0>
    2278:	15 96       	adiw	r26, 0x05	; 5
    227a:	6d 91       	ld	r22, X+
    227c:	7c 91       	ld	r23, X
    227e:	16 97       	sbiw	r26, 0x06	; 6
    2280:	4d 2d       	mov	r20, r13
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	19 95       	eicall
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	bf 90       	pop	r11
    2296:	af 90       	pop	r10
    2298:	9f 90       	pop	r9
    229a:	8f 90       	pop	r8
    229c:	08 95       	ret

0000229e <udd_attach>:
    229e:	1f 93       	push	r17
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	1f 92       	push	r1
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	8f b7       	in	r24, 0x3f	; 63
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	f8 94       	cli
    22b0:	19 81       	ldd	r17, Y+1	; 0x01
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	cd dc       	rcall	.-1638   	; 0x1c50 <udd_sleep_mode>
    22b6:	ea ec       	ldi	r30, 0xCA	; 202
    22b8:	f4 e0       	ldi	r31, 0x04	; 4
    22ba:	80 e4       	ldi	r24, 0x40	; 64
    22bc:	80 83       	st	Z, r24
    22be:	80 e2       	ldi	r24, 0x20	; 32
    22c0:	80 83       	st	Z, r24
    22c2:	e1 ec       	ldi	r30, 0xC1	; 193
    22c4:	f4 e0       	ldi	r31, 0x04	; 4
    22c6:	80 81       	ld	r24, Z
    22c8:	81 60       	ori	r24, 0x01	; 1
    22ca:	80 83       	st	Z, r24
    22cc:	a9 ec       	ldi	r26, 0xC9	; 201
    22ce:	b4 e0       	ldi	r27, 0x04	; 4
    22d0:	8c 91       	ld	r24, X
    22d2:	82 60       	ori	r24, 0x02	; 2
    22d4:	8c 93       	st	X, r24
    22d6:	e8 ec       	ldi	r30, 0xC8	; 200
    22d8:	f4 e0       	ldi	r31, 0x04	; 4
    22da:	80 81       	ld	r24, Z
    22dc:	80 64       	ori	r24, 0x40	; 64
    22de:	80 83       	st	Z, r24
    22e0:	8c 91       	ld	r24, X
    22e2:	81 60       	ori	r24, 0x01	; 1
    22e4:	8c 93       	st	X, r24
    22e6:	80 81       	ld	r24, Z
    22e8:	80 68       	ori	r24, 0x80	; 128
    22ea:	80 83       	st	Z, r24
    22ec:	1f bf       	out	0x3f, r17	; 63
    22ee:	0f 90       	pop	r0
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	08 95       	ret

000022f8 <udd_enable>:
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	1f 92       	push	r1
    2302:	1f 92       	push	r1
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	00 e6       	ldi	r16, 0x60	; 96
    230a:	10 e0       	ldi	r17, 0x00	; 0
    230c:	f8 01       	movw	r30, r16
    230e:	10 82       	st	Z, r1
    2310:	80 e3       	ldi	r24, 0x30	; 48
    2312:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <sysclk_enable_usb>
    2316:	e0 ec       	ldi	r30, 0xC0	; 192
    2318:	f4 e0       	ldi	r31, 0x04	; 4
    231a:	80 81       	ld	r24, Z
    231c:	80 64       	ori	r24, 0x40	; 64
    231e:	80 83       	st	Z, r24
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	f8 01       	movw	r30, r16
    2324:	80 83       	st	Z, r24
    2326:	8f b7       	in	r24, 0x3f	; 63
    2328:	8a 83       	std	Y+2, r24	; 0x02
    232a:	f8 94       	cli
    232c:	1a 81       	ldd	r17, Y+2	; 0x02
    232e:	e0 e9       	ldi	r30, 0x90	; 144
    2330:	f2 e2       	ldi	r31, 0x22	; 34
    2332:	15 86       	std	Z+13, r1	; 0x0d
    2334:	15 8a       	std	Z+21, r1	; 0x15
    2336:	15 8e       	std	Z+29, r1	; 0x1d
    2338:	15 a2       	std	Z+37, r1	; 0x25
    233a:	15 a6       	std	Z+45, r1	; 0x2d
    233c:	15 aa       	std	Z+53, r1	; 0x35
    233e:	e7 e2       	ldi	r30, 0x27	; 39
    2340:	f2 e2       	ldi	r31, 0x22	; 34
    2342:	80 81       	ld	r24, Z
    2344:	8e 7f       	andi	r24, 0xFE	; 254
    2346:	80 83       	st	Z, r24
    2348:	e0 e3       	ldi	r30, 0x30	; 48
    234a:	f2 e2       	ldi	r31, 0x22	; 34
    234c:	80 81       	ld	r24, Z
    234e:	8e 7f       	andi	r24, 0xFE	; 254
    2350:	80 83       	st	Z, r24
    2352:	e9 e3       	ldi	r30, 0x39	; 57
    2354:	f2 e2       	ldi	r31, 0x22	; 34
    2356:	80 81       	ld	r24, Z
    2358:	8e 7f       	andi	r24, 0xFE	; 254
    235a:	80 83       	st	Z, r24
    235c:	e2 e4       	ldi	r30, 0x42	; 66
    235e:	f2 e2       	ldi	r31, 0x22	; 34
    2360:	80 81       	ld	r24, Z
    2362:	8e 7f       	andi	r24, 0xFE	; 254
    2364:	80 83       	st	Z, r24
    2366:	6a e1       	ldi	r22, 0x1A	; 26
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
    2370:	8f 3f       	cpi	r24, 0xFF	; 255
    2372:	19 f0       	breq	.+6      	; 0x237a <udd_enable+0x82>
    2374:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2378:	03 c0       	rjmp	.+6      	; 0x2380 <udd_enable+0x88>
    237a:	8f e1       	ldi	r24, 0x1F	; 31
    237c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2380:	6b e1       	ldi	r22, 0x1B	; 27
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	82 e0       	ldi	r24, 0x02	; 2
    2386:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
    238a:	8f 3f       	cpi	r24, 0xFF	; 255
    238c:	19 f0       	breq	.+6      	; 0x2394 <udd_enable+0x9c>
    238e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2392:	03 c0       	rjmp	.+6      	; 0x239a <udd_enable+0xa2>
    2394:	8f e1       	ldi	r24, 0x1F	; 31
    2396:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    239a:	e0 ec       	ldi	r30, 0xC0	; 192
    239c:	f4 e0       	ldi	r31, 0x04	; 4
    239e:	80 81       	ld	r24, Z
    23a0:	82 60       	ori	r24, 0x02	; 2
    23a2:	80 83       	st	Z, r24
    23a4:	80 81       	ld	r24, Z
    23a6:	80 68       	ori	r24, 0x80	; 128
    23a8:	80 83       	st	Z, r24
    23aa:	80 81       	ld	r24, Z
    23ac:	80 61       	ori	r24, 0x10	; 16
    23ae:	80 83       	st	Z, r24
    23b0:	8c e9       	ldi	r24, 0x9C	; 156
    23b2:	92 e2       	ldi	r25, 0x22	; 34
    23b4:	86 83       	std	Z+6, r24	; 0x06
    23b6:	97 83       	std	Z+7, r25	; 0x07
    23b8:	80 81       	ld	r24, Z
    23ba:	80 62       	ori	r24, 0x20	; 32
    23bc:	80 83       	st	Z, r24
    23be:	8f ef       	ldi	r24, 0xFF	; 255
    23c0:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    23c4:	e8 ec       	ldi	r30, 0xC8	; 200
    23c6:	f4 e0       	ldi	r31, 0x04	; 4
    23c8:	80 81       	ld	r24, Z
    23ca:	81 60       	ori	r24, 0x01	; 1
    23cc:	80 83       	st	Z, r24
    23ce:	10 92 d0 22 	sts	0x22D0, r1	; 0x8022d0 <udd_b_idle>
    23d2:	80 91 36 24 	lds	r24, 0x2436	; 0x802436 <sleepmgr_locks+0x5>
    23d6:	8f 3f       	cpi	r24, 0xFF	; 255
    23d8:	09 f4       	brne	.+2      	; 0x23dc <udd_enable+0xe4>
    23da:	ff cf       	rjmp	.-2      	; 0x23da <udd_enable+0xe2>
    23dc:	8f b7       	in	r24, 0x3f	; 63
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	f8 94       	cli
    23e2:	99 81       	ldd	r25, Y+1	; 0x01
    23e4:	e1 e3       	ldi	r30, 0x31	; 49
    23e6:	f4 e2       	ldi	r31, 0x24	; 36
    23e8:	85 81       	ldd	r24, Z+5	; 0x05
    23ea:	8f 5f       	subi	r24, 0xFF	; 255
    23ec:	85 83       	std	Z+5, r24	; 0x05
    23ee:	9f bf       	out	0x3f, r25	; 63
    23f0:	56 df       	rcall	.-340    	; 0x229e <udd_attach>
    23f2:	1f bf       	out	0x3f, r17	; 63
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	08 95       	ret

00002402 <udd_is_high_speed>:
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	08 95       	ret

00002406 <udd_set_address>:
    2406:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    240a:	08 95       	ret

0000240c <udd_getaddress>:
    240c:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2410:	08 95       	ret

00002412 <udd_get_frame_number>:
    2412:	80 91 cc 22 	lds	r24, 0x22CC	; 0x8022cc <udd_sram+0x3c>
    2416:	90 91 cd 22 	lds	r25, 0x22CD	; 0x8022cd <udd_sram+0x3d>
    241a:	08 95       	ret

0000241c <udd_get_micro_frame_number>:
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	08 95       	ret

00002422 <udd_set_setup_payload>:
    2422:	e1 e2       	ldi	r30, 0x21	; 33
    2424:	f4 e2       	ldi	r31, 0x24	; 36
    2426:	80 87       	std	Z+8, r24	; 0x08
    2428:	91 87       	std	Z+9, r25	; 0x09
    242a:	62 87       	std	Z+10, r22	; 0x0a
    242c:	73 87       	std	Z+11, r23	; 0x0b
    242e:	08 95       	ret

00002430 <udd_ep_alloc>:
    2430:	28 2f       	mov	r18, r24
    2432:	2f 70       	andi	r18, 0x0F	; 15
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	22 0f       	add	r18, r18
    2438:	33 1f       	adc	r19, r19
    243a:	08 2e       	mov	r0, r24
    243c:	00 0c       	add	r0, r0
    243e:	99 0b       	sbc	r25, r25
    2440:	88 27       	eor	r24, r24
    2442:	99 0f       	add	r25, r25
    2444:	88 1f       	adc	r24, r24
    2446:	99 27       	eor	r25, r25
    2448:	82 0f       	add	r24, r18
    244a:	93 1f       	adc	r25, r19
    244c:	fc 01       	movw	r30, r24
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	ee 0f       	add	r30, r30
    2458:	ff 1f       	adc	r31, r31
    245a:	e0 57       	subi	r30, 0x70	; 112
    245c:	fd 4d       	sbci	r31, 0xDD	; 221
    245e:	25 85       	ldd	r18, Z+13	; 0x0d
    2460:	20 7c       	andi	r18, 0xC0	; 192
    2462:	09 f0       	breq	.+2      	; 0x2466 <udd_ep_alloc+0x36>
    2464:	69 c0       	rjmp	.+210    	; 0x2538 <udd_ep_alloc+0x108>
    2466:	63 70       	andi	r22, 0x03	; 3
    2468:	61 30       	cpi	r22, 0x01	; 1
    246a:	11 f0       	breq	.+4      	; 0x2470 <udd_ep_alloc+0x40>
    246c:	18 f4       	brcc	.+6      	; 0x2474 <udd_ep_alloc+0x44>
    246e:	04 c0       	rjmp	.+8      	; 0x2478 <udd_ep_alloc+0x48>
    2470:	60 ec       	ldi	r22, 0xC0	; 192
    2472:	03 c0       	rjmp	.+6      	; 0x247a <udd_ep_alloc+0x4a>
    2474:	60 e8       	ldi	r22, 0x80	; 128
    2476:	01 c0       	rjmp	.+2      	; 0x247a <udd_ep_alloc+0x4a>
    2478:	60 e4       	ldi	r22, 0x40	; 64
    247a:	40 38       	cpi	r20, 0x80	; 128
    247c:	51 05       	cpc	r21, r1
    247e:	e9 f0       	breq	.+58     	; 0x24ba <udd_ep_alloc+0x8a>
    2480:	50 f4       	brcc	.+20     	; 0x2496 <udd_ep_alloc+0x66>
    2482:	40 32       	cpi	r20, 0x20	; 32
    2484:	51 05       	cpc	r21, r1
    2486:	a9 f0       	breq	.+42     	; 0x24b2 <udd_ep_alloc+0x82>
    2488:	40 34       	cpi	r20, 0x40	; 64
    248a:	51 05       	cpc	r21, r1
    248c:	a1 f0       	breq	.+40     	; 0x24b6 <udd_ep_alloc+0x86>
    248e:	40 31       	cpi	r20, 0x10	; 16
    2490:	51 05       	cpc	r21, r1
    2492:	d9 f4       	brne	.+54     	; 0x24ca <udd_ep_alloc+0x9a>
    2494:	0c c0       	rjmp	.+24     	; 0x24ae <udd_ep_alloc+0x7e>
    2496:	41 15       	cp	r20, r1
    2498:	22 e0       	ldi	r18, 0x02	; 2
    249a:	52 07       	cpc	r21, r18
    249c:	91 f0       	breq	.+36     	; 0x24c2 <udd_ep_alloc+0x92>
    249e:	4f 3f       	cpi	r20, 0xFF	; 255
    24a0:	23 e0       	ldi	r18, 0x03	; 3
    24a2:	52 07       	cpc	r21, r18
    24a4:	81 f0       	breq	.+32     	; 0x24c6 <udd_ep_alloc+0x96>
    24a6:	41 15       	cp	r20, r1
    24a8:	51 40       	sbci	r21, 0x01	; 1
    24aa:	79 f4       	brne	.+30     	; 0x24ca <udd_ep_alloc+0x9a>
    24ac:	08 c0       	rjmp	.+16     	; 0x24be <udd_ep_alloc+0x8e>
    24ae:	21 e0       	ldi	r18, 0x01	; 1
    24b0:	0d c0       	rjmp	.+26     	; 0x24cc <udd_ep_alloc+0x9c>
    24b2:	22 e0       	ldi	r18, 0x02	; 2
    24b4:	0b c0       	rjmp	.+22     	; 0x24cc <udd_ep_alloc+0x9c>
    24b6:	23 e0       	ldi	r18, 0x03	; 3
    24b8:	09 c0       	rjmp	.+18     	; 0x24cc <udd_ep_alloc+0x9c>
    24ba:	24 e0       	ldi	r18, 0x04	; 4
    24bc:	07 c0       	rjmp	.+14     	; 0x24cc <udd_ep_alloc+0x9c>
    24be:	25 e0       	ldi	r18, 0x05	; 5
    24c0:	05 c0       	rjmp	.+10     	; 0x24cc <udd_ep_alloc+0x9c>
    24c2:	26 e0       	ldi	r18, 0x06	; 6
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <udd_ep_alloc+0x9c>
    24c6:	27 e0       	ldi	r18, 0x07	; 7
    24c8:	01 c0       	rjmp	.+2      	; 0x24cc <udd_ep_alloc+0x9c>
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	fc 01       	movw	r30, r24
    24ce:	ee 0f       	add	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	ee 0f       	add	r30, r30
    24d4:	ff 1f       	adc	r31, r31
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	e0 57       	subi	r30, 0x70	; 112
    24dc:	fd 4d       	sbci	r31, 0xDD	; 221
    24de:	15 86       	std	Z+13, r1	; 0x0d
    24e0:	36 e0       	ldi	r19, 0x06	; 6
    24e2:	34 87       	std	Z+12, r19	; 0x0c
    24e4:	26 2b       	or	r18, r22
    24e6:	25 87       	std	Z+13, r18	; 0x0d
    24e8:	fc 01       	movw	r30, r24
    24ea:	ee 0f       	add	r30, r30
    24ec:	ff 1f       	adc	r31, r31
    24ee:	ee 0f       	add	r30, r30
    24f0:	ff 1f       	adc	r31, r31
    24f2:	ee 0f       	add	r30, r30
    24f4:	ff 1f       	adc	r31, r31
    24f6:	e0 57       	subi	r30, 0x70	; 112
    24f8:	fd 4d       	sbci	r31, 0xDD	; 221
    24fa:	25 85       	ldd	r18, Z+13	; 0x0d
    24fc:	20 7c       	andi	r18, 0xC0	; 192
    24fe:	20 3c       	cpi	r18, 0xC0	; 192
    2500:	69 f4       	brne	.+26     	; 0x251c <udd_ep_alloc+0xec>
    2502:	fc 01       	movw	r30, r24
    2504:	ee 0f       	add	r30, r30
    2506:	ff 1f       	adc	r31, r31
    2508:	ee 0f       	add	r30, r30
    250a:	ff 1f       	adc	r31, r31
    250c:	ee 0f       	add	r30, r30
    250e:	ff 1f       	adc	r31, r31
    2510:	e0 57       	subi	r30, 0x70	; 112
    2512:	fd 4d       	sbci	r31, 0xDD	; 221
    2514:	25 85       	ldd	r18, Z+13	; 0x0d
    2516:	27 70       	andi	r18, 0x07	; 7
    2518:	27 30       	cpi	r18, 0x07	; 7
    251a:	81 f0       	breq	.+32     	; 0x253c <udd_ep_alloc+0x10c>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	88 0f       	add	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	fc 01       	movw	r30, r24
    252a:	e0 57       	subi	r30, 0x70	; 112
    252c:	fd 4d       	sbci	r31, 0xDD	; 221
    252e:	85 85       	ldd	r24, Z+13	; 0x0d
    2530:	80 62       	ori	r24, 0x20	; 32
    2532:	85 87       	std	Z+13, r24	; 0x0d
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	08 95       	ret
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	08 95       	ret
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	08 95       	ret

00002540 <udd_ep_is_halted>:
    2540:	e8 2f       	mov	r30, r24
    2542:	ef 70       	andi	r30, 0x0F	; 15
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	ee 0f       	add	r30, r30
    2548:	ff 1f       	adc	r31, r31
    254a:	08 2e       	mov	r0, r24
    254c:	00 0c       	add	r0, r0
    254e:	99 0b       	sbc	r25, r25
    2550:	88 27       	eor	r24, r24
    2552:	99 0f       	add	r25, r25
    2554:	88 1f       	adc	r24, r24
    2556:	99 27       	eor	r25, r25
    2558:	e8 0f       	add	r30, r24
    255a:	f9 1f       	adc	r31, r25
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	ee 0f       	add	r30, r30
    2562:	ff 1f       	adc	r31, r31
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	e0 57       	subi	r30, 0x70	; 112
    256a:	fd 4d       	sbci	r31, 0xDD	; 221
    256c:	85 85       	ldd	r24, Z+13	; 0x0d
    256e:	82 fb       	bst	r24, 2
    2570:	88 27       	eor	r24, r24
    2572:	80 f9       	bld	r24, 0
    2574:	08 95       	ret

00002576 <udd_ep_clear_halt>:
    2576:	0f 93       	push	r16
    2578:	28 2f       	mov	r18, r24
    257a:	2f 70       	andi	r18, 0x0F	; 15
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	a9 01       	movw	r20, r18
    2580:	44 0f       	add	r20, r20
    2582:	55 1f       	adc	r21, r21
    2584:	28 2f       	mov	r18, r24
    2586:	08 2e       	mov	r0, r24
    2588:	00 0c       	add	r0, r0
    258a:	33 0b       	sbc	r19, r19
    258c:	22 27       	eor	r18, r18
    258e:	33 0f       	add	r19, r19
    2590:	22 1f       	adc	r18, r18
    2592:	33 27       	eor	r19, r19
    2594:	24 0f       	add	r18, r20
    2596:	35 1f       	adc	r19, r21
    2598:	a9 01       	movw	r20, r18
    259a:	44 0f       	add	r20, r20
    259c:	55 1f       	adc	r21, r21
    259e:	44 0f       	add	r20, r20
    25a0:	55 1f       	adc	r21, r21
    25a2:	44 0f       	add	r20, r20
    25a4:	55 1f       	adc	r21, r21
    25a6:	fa 01       	movw	r30, r20
    25a8:	e4 56       	subi	r30, 0x64	; 100
    25aa:	fd 4d       	sbci	r31, 0xDD	; 221
    25ac:	01 e0       	ldi	r16, 0x01	; 1
    25ae:	06 93       	lac	Z, r16
    25b0:	fa 01       	movw	r30, r20
    25b2:	e0 57       	subi	r30, 0x70	; 112
    25b4:	fd 4d       	sbci	r31, 0xDD	; 221
    25b6:	95 85       	ldd	r25, Z+13	; 0x0d
    25b8:	92 ff       	sbrs	r25, 2
    25ba:	11 c0       	rjmp	.+34     	; 0x25de <udd_ep_clear_halt+0x68>
    25bc:	fa 01       	movw	r30, r20
    25be:	e0 57       	subi	r30, 0x70	; 112
    25c0:	fd 4d       	sbci	r31, 0xDD	; 221
    25c2:	95 85       	ldd	r25, Z+13	; 0x0d
    25c4:	9b 7f       	andi	r25, 0xFB	; 251
    25c6:	95 87       	std	Z+13, r25	; 0x0d
    25c8:	59 dc       	rcall	.-1870   	; 0x1e7c <udd_ep_get_job>
    25ca:	fc 01       	movw	r30, r24
    25cc:	80 81       	ld	r24, Z
    25ce:	80 ff       	sbrs	r24, 0
    25d0:	06 c0       	rjmp	.+12     	; 0x25de <udd_ep_clear_halt+0x68>
    25d2:	8e 7f       	andi	r24, 0xFE	; 254
    25d4:	80 83       	st	Z, r24
    25d6:	07 80       	ldd	r0, Z+7	; 0x07
    25d8:	f0 85       	ldd	r31, Z+8	; 0x08
    25da:	e0 2d       	mov	r30, r0
    25dc:	19 95       	eicall
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	0f 91       	pop	r16
    25e2:	08 95       	ret

000025e4 <udd_ep_run>:
    25e4:	6f 92       	push	r6
    25e6:	7f 92       	push	r7
    25e8:	8f 92       	push	r8
    25ea:	9f 92       	push	r9
    25ec:	af 92       	push	r10
    25ee:	bf 92       	push	r11
    25f0:	cf 92       	push	r12
    25f2:	df 92       	push	r13
    25f4:	ef 92       	push	r14
    25f6:	ff 92       	push	r15
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	1f 92       	push	r1
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	78 2e       	mov	r7, r24
    2608:	66 2e       	mov	r6, r22
    260a:	4a 01       	movw	r8, r20
    260c:	59 01       	movw	r10, r18
    260e:	36 dc       	rcall	.-1940   	; 0x1e7c <udd_ep_get_job>
    2610:	6c 01       	movw	r12, r24
    2612:	27 2d       	mov	r18, r7
    2614:	87 2d       	mov	r24, r7
    2616:	8f 70       	andi	r24, 0x0F	; 15
    2618:	e8 2e       	mov	r14, r24
    261a:	f1 2c       	mov	r15, r1
    261c:	c7 01       	movw	r24, r14
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	e7 2c       	mov	r14, r7
    2624:	07 2c       	mov	r0, r7
    2626:	00 0c       	add	r0, r0
    2628:	ff 08       	sbc	r15, r15
    262a:	ee 24       	eor	r14, r14
    262c:	ff 0c       	add	r15, r15
    262e:	ee 1c       	adc	r14, r14
    2630:	ff 24       	eor	r15, r15
    2632:	e8 0e       	add	r14, r24
    2634:	f9 1e       	adc	r15, r25
    2636:	f7 01       	movw	r30, r14
    2638:	ee 0f       	add	r30, r30
    263a:	ff 1f       	adc	r31, r31
    263c:	ee 0f       	add	r30, r30
    263e:	ff 1f       	adc	r31, r31
    2640:	ee 0f       	add	r30, r30
    2642:	ff 1f       	adc	r31, r31
    2644:	e0 57       	subi	r30, 0x70	; 112
    2646:	fd 4d       	sbci	r31, 0xDD	; 221
    2648:	85 85       	ldd	r24, Z+13	; 0x0d
    264a:	80 7c       	andi	r24, 0xC0	; 192
    264c:	09 f4       	brne	.+2      	; 0x2650 <udd_ep_run+0x6c>
    264e:	82 c0       	rjmp	.+260    	; 0x2754 <udd_ep_run+0x170>
    2650:	f7 01       	movw	r30, r14
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	ee 0f       	add	r30, r30
    265c:	ff 1f       	adc	r31, r31
    265e:	e0 57       	subi	r30, 0x70	; 112
    2660:	fd 4d       	sbci	r31, 0xDD	; 221
    2662:	85 85       	ldd	r24, Z+13	; 0x0d
    2664:	80 7c       	andi	r24, 0xC0	; 192
    2666:	80 3c       	cpi	r24, 0xC0	; 192
    2668:	61 f0       	breq	.+24     	; 0x2682 <udd_ep_run+0x9e>
    266a:	f7 01       	movw	r30, r14
    266c:	ee 0f       	add	r30, r30
    266e:	ff 1f       	adc	r31, r31
    2670:	ee 0f       	add	r30, r30
    2672:	ff 1f       	adc	r31, r31
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	e0 57       	subi	r30, 0x70	; 112
    267a:	fd 4d       	sbci	r31, 0xDD	; 221
    267c:	85 85       	ldd	r24, Z+13	; 0x0d
    267e:	82 fd       	sbrc	r24, 2
    2680:	6b c0       	rjmp	.+214    	; 0x2758 <udd_ep_run+0x174>
    2682:	8f b7       	in	r24, 0x3f	; 63
    2684:	89 83       	std	Y+1, r24	; 0x01
    2686:	f8 94       	cli
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	f6 01       	movw	r30, r12
    268c:	90 81       	ld	r25, Z
    268e:	90 ff       	sbrs	r25, 0
    2690:	03 c0       	rjmp	.+6      	; 0x2698 <udd_ep_run+0xb4>
    2692:	8f bf       	out	0x3f, r24	; 63
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	61 c0       	rjmp	.+194    	; 0x275a <udd_ep_run+0x176>
    2698:	f6 01       	movw	r30, r12
    269a:	90 81       	ld	r25, Z
    269c:	91 60       	ori	r25, 0x01	; 1
    269e:	90 83       	st	Z, r25
    26a0:	8f bf       	out	0x3f, r24	; 63
    26a2:	81 82       	std	Z+1, r8	; 0x01
    26a4:	92 82       	std	Z+2, r9	; 0x02
    26a6:	a3 82       	std	Z+3, r10	; 0x03
    26a8:	b4 82       	std	Z+4, r11	; 0x04
    26aa:	15 82       	std	Z+5, r1	; 0x05
    26ac:	16 82       	std	Z+6, r1	; 0x06
    26ae:	07 83       	std	Z+7, r16	; 0x07
    26b0:	10 87       	std	Z+8, r17	; 0x08
    26b2:	61 10       	cpse	r6, r1
    26b4:	06 c0       	rjmp	.+12     	; 0x26c2 <udd_ep_run+0xde>
    26b6:	91 e0       	ldi	r25, 0x01	; 1
    26b8:	a1 14       	cp	r10, r1
    26ba:	b1 04       	cpc	r11, r1
    26bc:	19 f0       	breq	.+6      	; 0x26c4 <udd_ep_run+0xe0>
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	01 c0       	rjmp	.+2      	; 0x26c4 <udd_ep_run+0xe0>
    26c2:	91 e0       	ldi	r25, 0x01	; 1
    26c4:	f6 01       	movw	r30, r12
    26c6:	80 81       	ld	r24, Z
    26c8:	90 fb       	bst	r25, 0
    26ca:	81 f9       	bld	r24, 1
    26cc:	8b 7f       	andi	r24, 0xFB	; 251
    26ce:	80 83       	st	Z, r24
    26d0:	22 23       	and	r18, r18
    26d2:	64 f4       	brge	.+24     	; 0x26ec <udd_ep_run+0x108>
    26d4:	f7 01       	movw	r30, r14
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	ee 0f       	add	r30, r30
    26dc:	ff 1f       	adc	r31, r31
    26de:	ee 0f       	add	r30, r30
    26e0:	ff 1f       	adc	r31, r31
    26e2:	e0 57       	subi	r30, 0x70	; 112
    26e4:	fd 4d       	sbci	r31, 0xDD	; 221
    26e6:	12 8a       	std	Z+18, r1	; 0x12
    26e8:	13 8a       	std	Z+19, r1	; 0x13
    26ea:	30 c0       	rjmp	.+96     	; 0x274c <udd_ep_run+0x168>
    26ec:	f7 01       	movw	r30, r14
    26ee:	ee 0f       	add	r30, r30
    26f0:	ff 1f       	adc	r31, r31
    26f2:	ee 0f       	add	r30, r30
    26f4:	ff 1f       	adc	r31, r31
    26f6:	ee 0f       	add	r30, r30
    26f8:	ff 1f       	adc	r31, r31
    26fa:	e0 57       	subi	r30, 0x70	; 112
    26fc:	fd 4d       	sbci	r31, 0xDD	; 221
    26fe:	85 85       	ldd	r24, Z+13	; 0x0d
    2700:	80 7c       	andi	r24, 0xC0	; 192
    2702:	80 3c       	cpi	r24, 0xC0	; 192
    2704:	b1 f4       	brne	.+44     	; 0x2732 <udd_ep_run+0x14e>
    2706:	c7 01       	movw	r24, r14
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	84 56       	subi	r24, 0x64	; 100
    2716:	9d 4d       	sbci	r25, 0xDD	; 221
    2718:	88 db       	rcall	.-2288   	; 0x1e2a <udd_ep_get_size>
    271a:	bc 01       	movw	r22, r24
    271c:	c5 01       	movw	r24, r10
    271e:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <__udivmodhi4>
    2722:	89 2b       	or	r24, r25
    2724:	31 f0       	breq	.+12     	; 0x2732 <udd_ep_run+0x14e>
    2726:	f6 01       	movw	r30, r12
    2728:	80 81       	ld	r24, Z
    272a:	8e 7f       	andi	r24, 0xFE	; 254
    272c:	80 83       	st	Z, r24
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	14 c0       	rjmp	.+40     	; 0x275a <udd_ep_run+0x176>
    2732:	f7 01       	movw	r30, r14
    2734:	ee 0f       	add	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	ee 0f       	add	r30, r30
    273a:	ff 1f       	adc	r31, r31
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	e0 57       	subi	r30, 0x70	; 112
    2742:	fd 4d       	sbci	r31, 0xDD	; 221
    2744:	16 86       	std	Z+14, r1	; 0x0e
    2746:	17 86       	std	Z+15, r1	; 0x0f
    2748:	12 8a       	std	Z+18, r1	; 0x12
    274a:	13 8a       	std	Z+19, r1	; 0x13
    274c:	87 2d       	mov	r24, r7
    274e:	23 dc       	rcall	.-1978   	; 0x1f96 <udd_ep_trans_complet>
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	03 c0       	rjmp	.+6      	; 0x275a <udd_ep_run+0x176>
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	01 c0       	rjmp	.+2      	; 0x275a <udd_ep_run+0x176>
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	0f 90       	pop	r0
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	ff 90       	pop	r15
    2766:	ef 90       	pop	r14
    2768:	df 90       	pop	r13
    276a:	cf 90       	pop	r12
    276c:	bf 90       	pop	r11
    276e:	af 90       	pop	r10
    2770:	9f 90       	pop	r9
    2772:	8f 90       	pop	r8
    2774:	7f 90       	pop	r7
    2776:	6f 90       	pop	r6
    2778:	08 95       	ret

0000277a <udd_ep_abort>:
    277a:	ff 92       	push	r15
    277c:	0f 93       	push	r16
    277e:	1f 93       	push	r17
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	18 2f       	mov	r17, r24
    2786:	c8 2f       	mov	r28, r24
    2788:	cf 70       	andi	r28, 0x0F	; 15
    278a:	d0 e0       	ldi	r29, 0x00	; 0
    278c:	ce 01       	movw	r24, r28
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	c1 2f       	mov	r28, r17
    2794:	01 2e       	mov	r0, r17
    2796:	00 0c       	add	r0, r0
    2798:	dd 0b       	sbc	r29, r29
    279a:	cc 27       	eor	r28, r28
    279c:	dd 0f       	add	r29, r29
    279e:	cc 1f       	adc	r28, r28
    27a0:	dd 27       	eor	r29, r29
    27a2:	c8 0f       	add	r28, r24
    27a4:	d9 1f       	adc	r29, r25
    27a6:	81 2f       	mov	r24, r17
    27a8:	69 db       	rcall	.-2350   	; 0x1e7c <udd_ep_get_job>
    27aa:	dc 01       	movw	r26, r24
    27ac:	fe 01       	movw	r30, r28
    27ae:	ee 0f       	add	r30, r30
    27b0:	ff 1f       	adc	r31, r31
    27b2:	ee 0f       	add	r30, r30
    27b4:	ff 1f       	adc	r31, r31
    27b6:	ee 0f       	add	r30, r30
    27b8:	ff 1f       	adc	r31, r31
    27ba:	e4 56       	subi	r30, 0x64	; 100
    27bc:	fd 4d       	sbci	r31, 0xDD	; 221
    27be:	02 e0       	ldi	r16, 0x02	; 2
    27c0:	05 93       	las	Z, r16
    27c2:	8c 91       	ld	r24, X
    27c4:	80 ff       	sbrs	r24, 0
    27c6:	22 c0       	rjmp	.+68     	; 0x280c <udd_ep_abort+0x92>
    27c8:	8e 7f       	andi	r24, 0xFE	; 254
    27ca:	8c 93       	st	X, r24
    27cc:	17 96       	adiw	r26, 0x07	; 7
    27ce:	ed 91       	ld	r30, X+
    27d0:	fc 91       	ld	r31, X
    27d2:	18 97       	sbiw	r26, 0x08	; 8
    27d4:	30 97       	sbiw	r30, 0x00	; 0
    27d6:	d1 f0       	breq	.+52     	; 0x280c <udd_ep_abort+0x92>
    27d8:	11 23       	and	r17, r17
    27da:	5c f4       	brge	.+22     	; 0x27f2 <udd_ep_abort+0x78>
    27dc:	cc 0f       	add	r28, r28
    27de:	dd 1f       	adc	r29, r29
    27e0:	cc 0f       	add	r28, r28
    27e2:	dd 1f       	adc	r29, r29
    27e4:	cc 0f       	add	r28, r28
    27e6:	dd 1f       	adc	r29, r29
    27e8:	c0 57       	subi	r28, 0x70	; 112
    27ea:	dd 4d       	sbci	r29, 0xDD	; 221
    27ec:	6a 89       	ldd	r22, Y+18	; 0x12
    27ee:	7b 89       	ldd	r23, Y+19	; 0x13
    27f0:	0a c0       	rjmp	.+20     	; 0x2806 <udd_ep_abort+0x8c>
    27f2:	cc 0f       	add	r28, r28
    27f4:	dd 1f       	adc	r29, r29
    27f6:	cc 0f       	add	r28, r28
    27f8:	dd 1f       	adc	r29, r29
    27fa:	cc 0f       	add	r28, r28
    27fc:	dd 1f       	adc	r29, r29
    27fe:	c0 57       	subi	r28, 0x70	; 112
    2800:	dd 4d       	sbci	r29, 0xDD	; 221
    2802:	6e 85       	ldd	r22, Y+14	; 0x0e
    2804:	7f 85       	ldd	r23, Y+15	; 0x0f
    2806:	41 2f       	mov	r20, r17
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	19 95       	eicall
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
    2814:	ff 90       	pop	r15
    2816:	08 95       	ret

00002818 <udd_ep_free>:
    2818:	cf 93       	push	r28
    281a:	c8 2f       	mov	r28, r24
    281c:	ae df       	rcall	.-164    	; 0x277a <udd_ep_abort>
    281e:	ec 2f       	mov	r30, r28
    2820:	ef 70       	andi	r30, 0x0F	; 15
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	ee 0f       	add	r30, r30
    2826:	ff 1f       	adc	r31, r31
    2828:	8c 2f       	mov	r24, r28
    282a:	cc 0f       	add	r28, r28
    282c:	99 0b       	sbc	r25, r25
    282e:	88 27       	eor	r24, r24
    2830:	99 0f       	add	r25, r25
    2832:	88 1f       	adc	r24, r24
    2834:	99 27       	eor	r25, r25
    2836:	e8 0f       	add	r30, r24
    2838:	f9 1f       	adc	r31, r25
    283a:	ee 0f       	add	r30, r30
    283c:	ff 1f       	adc	r31, r31
    283e:	ee 0f       	add	r30, r30
    2840:	ff 1f       	adc	r31, r31
    2842:	ee 0f       	add	r30, r30
    2844:	ff 1f       	adc	r31, r31
    2846:	e0 57       	subi	r30, 0x70	; 112
    2848:	fd 4d       	sbci	r31, 0xDD	; 221
    284a:	15 86       	std	Z+13, r1	; 0x0d
    284c:	cf 91       	pop	r28
    284e:	08 95       	ret

00002850 <udd_ep_set_halt>:
    2850:	e8 2f       	mov	r30, r24
    2852:	ef 70       	andi	r30, 0x0F	; 15
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	ee 0f       	add	r30, r30
    2858:	ff 1f       	adc	r31, r31
    285a:	28 2f       	mov	r18, r24
    285c:	08 2e       	mov	r0, r24
    285e:	00 0c       	add	r0, r0
    2860:	33 0b       	sbc	r19, r19
    2862:	22 27       	eor	r18, r18
    2864:	33 0f       	add	r19, r19
    2866:	22 1f       	adc	r18, r18
    2868:	33 27       	eor	r19, r19
    286a:	e2 0f       	add	r30, r18
    286c:	f3 1f       	adc	r31, r19
    286e:	ee 0f       	add	r30, r30
    2870:	ff 1f       	adc	r31, r31
    2872:	ee 0f       	add	r30, r30
    2874:	ff 1f       	adc	r31, r31
    2876:	ee 0f       	add	r30, r30
    2878:	ff 1f       	adc	r31, r31
    287a:	e0 57       	subi	r30, 0x70	; 112
    287c:	fd 4d       	sbci	r31, 0xDD	; 221
    287e:	95 85       	ldd	r25, Z+13	; 0x0d
    2880:	94 60       	ori	r25, 0x04	; 4
    2882:	95 87       	std	Z+13, r25	; 0x0d
    2884:	7a df       	rcall	.-268    	; 0x277a <udd_ep_abort>
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	08 95       	ret

0000288a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    288a:	1f 92       	push	r1
    288c:	0f 92       	push	r0
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	0f 92       	push	r0
    2892:	11 24       	eor	r1, r1
    2894:	0b b6       	in	r0, 0x3b	; 59
    2896:	0f 92       	push	r0
    2898:	0f 93       	push	r16
    289a:	2f 93       	push	r18
    289c:	3f 93       	push	r19
    289e:	4f 93       	push	r20
    28a0:	5f 93       	push	r21
    28a2:	6f 93       	push	r22
    28a4:	7f 93       	push	r23
    28a6:	8f 93       	push	r24
    28a8:	9f 93       	push	r25
    28aa:	af 93       	push	r26
    28ac:	bf 93       	push	r27
    28ae:	ef 93       	push	r30
    28b0:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    28b2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28b6:	88 23       	and	r24, r24
    28b8:	34 f4       	brge	.+12     	; 0x28c6 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    28ba:	80 e8       	ldi	r24, 0x80	; 128
    28bc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    28c0:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    28c4:	88 c0       	rjmp	.+272    	; 0x29d6 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    28c6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28ca:	82 ff       	sbrs	r24, 2
    28cc:	20 c0       	rjmp	.+64     	; 0x290e <__vector_125+0x84>
		udd_ack_underflow_event();
    28ce:	84 e0       	ldi	r24, 0x04	; 4
    28d0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    28d4:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <udd_sram+0x14>
    28d8:	86 ff       	sbrs	r24, 6
    28da:	7d c0       	rjmp	.+250    	; 0x29d6 <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    28dc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    28e0:	81 fd       	sbrc	r24, 1
    28e2:	79 c0       	rjmp	.+242    	; 0x29d6 <__vector_125+0x14c>
    28e4:	e6 da       	rcall	.-2612   	; 0x1eb2 <udd_ctrl_interrupt_tc_setup>
    28e6:	81 11       	cpse	r24, r1
    28e8:	76 c0       	rjmp	.+236    	; 0x29d6 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    28ea:	80 91 8f 22 	lds	r24, 0x228F	; 0x80228f <udd_ep_control_state>
    28ee:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    28f0:	11 f4       	brne	.+4      	; 0x28f6 <__vector_125+0x6c>
    28f2:	19 da       	rcall	.-3022   	; 0x1d26 <udd_ctrl_send_zlp_in>
    28f4:	70 c0       	rjmp	.+224    	; 0x29d6 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    28f6:	84 30       	cpi	r24, 0x04	; 4
    28f8:	09 f0       	breq	.+2      	; 0x28fc <__vector_125+0x72>
    28fa:	6d c0       	rjmp	.+218    	; 0x29d6 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    28fc:	e5 ea       	ldi	r30, 0xA5	; 165
    28fe:	f2 e2       	ldi	r31, 0x22	; 34
    2900:	04 e0       	ldi	r16, 0x04	; 4
    2902:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2904:	ed e9       	ldi	r30, 0x9D	; 157
    2906:	f2 e2       	ldi	r31, 0x22	; 34
    2908:	04 e0       	ldi	r16, 0x04	; 4
    290a:	05 93       	las	Z, r16
    290c:	64 c0       	rjmp	.+200    	; 0x29d6 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    290e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2912:	81 ff       	sbrs	r24, 1
    2914:	5b c0       	rjmp	.+182    	; 0x29cc <__vector_125+0x142>
		udd_ack_overflow_event();
    2916:	82 e0       	ldi	r24, 0x02	; 2
    2918:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    291c:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <udd_sram+0xc>
    2920:	86 ff       	sbrs	r24, 6
    2922:	59 c0       	rjmp	.+178    	; 0x29d6 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2924:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2928:	81 fd       	sbrc	r24, 1
    292a:	55 c0       	rjmp	.+170    	; 0x29d6 <__vector_125+0x14c>
    292c:	c2 da       	rcall	.-2684   	; 0x1eb2 <udd_ctrl_interrupt_tc_setup>
    292e:	81 11       	cpse	r24, r1
    2930:	52 c0       	rjmp	.+164    	; 0x29d6 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2932:	80 91 8f 22 	lds	r24, 0x228F	; 0x80228f <udd_ep_control_state>
    2936:	82 30       	cpi	r24, 0x02	; 2
    2938:	41 f4       	brne	.+16     	; 0x294a <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    293a:	84 e0       	ldi	r24, 0x04	; 4
    293c:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2940:	ec e9       	ldi	r30, 0x9C	; 156
    2942:	f2 e2       	ldi	r31, 0x22	; 34
    2944:	02 e0       	ldi	r16, 0x02	; 2
    2946:	06 93       	lac	Z, r16
    2948:	46 c0       	rjmp	.+140    	; 0x29d6 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    294a:	83 30       	cpi	r24, 0x03	; 3
    294c:	09 f0       	breq	.+2      	; 0x2950 <__vector_125+0xc6>
    294e:	43 c0       	rjmp	.+134    	; 0x29d6 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2950:	e5 ea       	ldi	r30, 0xA5	; 165
    2952:	f2 e2       	ldi	r31, 0x22	; 34
    2954:	04 e0       	ldi	r16, 0x04	; 4
    2956:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2958:	ed e9       	ldi	r30, 0x9D	; 157
    295a:	f2 e2       	ldi	r31, 0x22	; 34
    295c:	04 e0       	ldi	r16, 0x04	; 4
    295e:	05 93       	las	Z, r16
    2960:	3a c0       	rjmp	.+116    	; 0x29d6 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2962:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2964:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2968:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    296a:	07 df       	rcall	.-498    	; 0x277a <udd_ep_abort>
    296c:	81 e8       	ldi	r24, 0x81	; 129
    296e:	05 df       	rcall	.-502    	; 0x277a <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2970:	82 e0       	ldi	r24, 0x02	; 2
    2972:	03 df       	rcall	.-506    	; 0x277a <udd_ep_abort>
    2974:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    2976:	01 df       	rcall	.-510    	; 0x277a <udd_ep_abort>
    2978:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    297c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2980:	e0 e9       	ldi	r30, 0x90	; 144
    2982:	f2 e2       	ldi	r31, 0x22	; 34
	udd_endpoint_clear_status(ep_ctrl);
    2984:	15 86       	std	Z+13, r1	; 0x0d
    2986:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2988:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    298a:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    298c:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    298e:	15 8a       	std	Z+21, r1	; 0x15
    2990:	94 8b       	std	Z+20, r25	; 0x14
    2992:	85 8b       	std	Z+21, r24	; 0x15
    2994:	8b e4       	ldi	r24, 0x4B	; 75
		// Reset endpoint control management
		udd_ctrl_init();
    2996:	92 e2       	ldi	r25, 0x22	; 34
    2998:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    299a:	91 8b       	std	Z+17, r25	; 0x11
    299c:	91 d9       	rcall	.-3294   	; 0x1cc0 <udd_ctrl_init>
		udd_ack_suspend_event();
    299e:	1b c0       	rjmp	.+54     	; 0x29d6 <__vector_125+0x14c>
    29a0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    29a4:	86 ff       	sbrs	r24, 6
    29a6:	07 c0       	rjmp	.+14     	; 0x29b6 <__vector_125+0x12c>
    29a8:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    29aa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	4f d9       	rcall	.-3426   	; 0x1c50 <udd_sleep_mode>
		udd_ack_resume_event();
    29b2:	a5 d2       	rcall	.+1354   	; 0x2efe <usb_callback_suspend_action>
    29b4:	10 c0       	rjmp	.+32     	; 0x29d6 <__vector_125+0x14c>
    29b6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    29ba:	85 ff       	sbrs	r24, 5
    29bc:	0c c0       	rjmp	.+24     	; 0x29d6 <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    29be:	80 e2       	ldi	r24, 0x20	; 32
    29c0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	44 d9       	rcall	.-3448   	; 0x1c50 <udd_sleep_mode>
    29c8:	9b d2       	rcall	.+1334   	; 0x2f00 <usb_callback_resume_action>
    29ca:	05 c0       	rjmp	.+10     	; 0x29d6 <__vector_125+0x14c>
    29cc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    29d0:	84 fd       	sbrc	r24, 4
    29d2:	c7 cf       	rjmp	.-114    	; 0x2962 <__vector_125+0xd8>
    29d4:	e5 cf       	rjmp	.-54     	; 0x29a0 <__vector_125+0x116>
    29d6:	ff 91       	pop	r31
    29d8:	ef 91       	pop	r30
    29da:	bf 91       	pop	r27
    29dc:	af 91       	pop	r26
    29de:	9f 91       	pop	r25
    29e0:	8f 91       	pop	r24
    29e2:	7f 91       	pop	r23
    29e4:	6f 91       	pop	r22
    29e6:	5f 91       	pop	r21
    29e8:	4f 91       	pop	r20
    29ea:	3f 91       	pop	r19
    29ec:	2f 91       	pop	r18
    29ee:	0f 91       	pop	r16
    29f0:	0f 90       	pop	r0
    29f2:	0b be       	out	0x3b, r0	; 59
    29f4:	0f 90       	pop	r0
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	0f 90       	pop	r0
    29fa:	1f 90       	pop	r1
    29fc:	18 95       	reti

000029fe <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    29fe:	1f 92       	push	r1
    2a00:	0f 92       	push	r0
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	0f 92       	push	r0
    2a06:	11 24       	eor	r1, r1
    2a08:	0b b6       	in	r0, 0x3b	; 59
    2a0a:	0f 92       	push	r0
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	2f 93       	push	r18
    2a12:	3f 93       	push	r19
    2a14:	4f 93       	push	r20
    2a16:	5f 93       	push	r21
    2a18:	6f 93       	push	r22
    2a1a:	7f 93       	push	r23
    2a1c:	8f 93       	push	r24
    2a1e:	9f 93       	push	r25
    2a20:	af 93       	push	r26
    2a22:	bf 93       	push	r27
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
    2a28:	ef 93       	push	r30
    2a2a:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2a2c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a30:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2a32:	03 c0       	rjmp	.+6      	; 0x2a3a <__vector_126+0x3c>
    2a34:	3e da       	rcall	.-2948   	; 0x1eb2 <udd_ctrl_interrupt_tc_setup>
    2a36:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2a38:	c4 c0       	rjmp	.+392    	; 0x2bc2 <__vector_126+0x1c4>
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2a40:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2a44:	81 95       	neg	r24
    2a46:	88 0f       	add	r24, r24
    2a48:	ec e9       	ldi	r30, 0x9C	; 156
    2a4a:	f2 e2       	ldi	r31, 0x22	; 34
    2a4c:	e8 1b       	sub	r30, r24
    2a4e:	f1 09       	sbc	r31, r1
    2a50:	20 81       	ld	r18, Z
    2a52:	31 81       	ldd	r19, Z+1	; 0x01
    2a54:	2c 59       	subi	r18, 0x9C	; 156
    2a56:	32 42       	sbci	r19, 0x22	; 34
    2a58:	36 95       	lsr	r19
    2a5a:	27 95       	ror	r18
    2a5c:	36 95       	lsr	r19
    2a5e:	27 95       	ror	r18
    2a60:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2a62:	27 95       	ror	r18
    2a64:	82 2f       	mov	r24, r18
    2a66:	86 95       	lsr	r24
    2a68:	20 fd       	sbrc	r18, 0
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <__vector_126+0x72>
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	01 c0       	rjmp	.+2      	; 0x2a72 <__vector_126+0x74>
    2a70:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2a72:	89 0f       	add	r24, r25
    2a74:	e8 2f       	mov	r30, r24
    2a76:	ef 70       	andi	r30, 0x0F	; 15
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	ee 0f       	add	r30, r30
    2a7c:	ff 1f       	adc	r31, r31
    2a7e:	28 2f       	mov	r18, r24
    2a80:	08 2e       	mov	r0, r24
    2a82:	00 0c       	add	r0, r0
    2a84:	33 0b       	sbc	r19, r19
    2a86:	22 27       	eor	r18, r18
    2a88:	33 0f       	add	r19, r19
    2a8a:	22 1f       	adc	r18, r18
    2a8c:	33 27       	eor	r19, r19
    2a8e:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2a90:	f3 1f       	adc	r31, r19
    2a92:	df 01       	movw	r26, r30
    2a94:	aa 0f       	add	r26, r26
    2a96:	bb 1f       	adc	r27, r27
    2a98:	aa 0f       	add	r26, r26
    2a9a:	bb 1f       	adc	r27, r27
    2a9c:	aa 0f       	add	r26, r26
    2a9e:	bb 1f       	adc	r27, r27
    2aa0:	a0 57       	subi	r26, 0x70	; 112
    2aa2:	bd 4d       	sbci	r27, 0xDD	; 221
    2aa4:	1c 96       	adiw	r26, 0x0c	; 12
    2aa6:	9c 91       	ld	r25, X
    2aa8:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2aaa:	8b c0       	rjmp	.+278    	; 0x2bc2 <__vector_126+0x1c4>
    2aac:	ee 0f       	add	r30, r30
    2aae:	ff 1f       	adc	r31, r31
    2ab0:	ee 0f       	add	r30, r30
    2ab2:	ff 1f       	adc	r31, r31
    2ab4:	ee 0f       	add	r30, r30
    2ab6:	ff 1f       	adc	r31, r31
    2ab8:	e4 56       	subi	r30, 0x64	; 100
    2aba:	fd 4d       	sbci	r31, 0xDD	; 221
    2abc:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    2abe:	06 93       	lac	Z, r16
    2ac0:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2ac2:	7a c0       	rjmp	.+244    	; 0x2bb8 <__vector_126+0x1ba>
    2ac4:	80 91 8f 22 	lds	r24, 0x228F	; 0x80228f <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2ac8:	84 30       	cpi	r24, 0x04	; 4
    2aca:	19 f4       	brne	.+6      	; 0x2ad2 <__vector_126+0xd4>
    2acc:	3a d9       	rcall	.-3468   	; 0x1d42 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2ace:	f8 d8       	rcall	.-3600   	; 0x1cc0 <udd_ctrl_init>
    2ad0:	78 c0       	rjmp	.+240    	; 0x2bc2 <__vector_126+0x1c4>
    2ad2:	00 91 9e 22 	lds	r16, 0x229E	; 0x80229e <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2ad6:	10 91 9f 22 	lds	r17, 0x229F	; 0x80229f <udd_sram+0xf>
    2ada:	80 91 2b 24 	lds	r24, 0x242B	; 0x80242b <udd_g_ctrlreq+0xa>
    2ade:	90 91 2c 24 	lds	r25, 0x242C	; 0x80242c <udd_g_ctrlreq+0xb>
    2ae2:	c0 91 8b 22 	lds	r28, 0x228B	; 0x80228b <udd_ctrl_payload_nb_trans>
    2ae6:	d0 91 8c 22 	lds	r29, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    2aea:	98 01       	movw	r18, r16
    2aec:	2c 0f       	add	r18, r28
    2aee:	3d 1f       	adc	r19, r29
    2af0:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2af2:	93 07       	cpc	r25, r19
    2af4:	18 f4       	brcc	.+6      	; 0x2afc <__vector_126+0xfe>
    2af6:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2af8:	0c 1b       	sub	r16, r28
    2afa:	1d 0b       	sbc	r17, r29
    2afc:	80 91 29 24 	lds	r24, 0x2429	; 0x802429 <udd_g_ctrlreq+0x8>
    2b00:	90 91 2a 24 	lds	r25, 0x242A	; 0x80242a <udd_g_ctrlreq+0x9>
    2b04:	a8 01       	movw	r20, r16
    2b06:	6b e4       	ldi	r22, 0x4B	; 75
    2b08:	72 e2       	ldi	r23, 0x22	; 34
    2b0a:	8c 0f       	add	r24, r28
    2b0c:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2b0e:	0e 94 38 23 	call	0x4670	; 0x4670 <memcpy>
    2b12:	c0 0f       	add	r28, r16
    2b14:	d1 1f       	adc	r29, r17
    2b16:	c0 93 8b 22 	sts	0x228B, r28	; 0x80228b <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2b1a:	d0 93 8c 22 	sts	0x228C, r29	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    2b1e:	00 34       	cpi	r16, 0x40	; 64
    2b20:	11 05       	cpc	r17, r1
    2b22:	69 f4       	brne	.+26     	; 0x2b3e <__vector_126+0x140>
    2b24:	80 91 8d 22 	lds	r24, 0x228D	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    2b28:	90 91 8e 22 	lds	r25, 0x228E	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    2b2c:	8c 0f       	add	r24, r28
    2b2e:	9d 1f       	adc	r25, r29
    2b30:	20 91 27 24 	lds	r18, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    2b34:	30 91 28 24 	lds	r19, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    2b38:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2b3a:	93 07       	cpc	r25, r19
    2b3c:	80 f0       	brcs	.+32     	; 0x2b5e <__vector_126+0x160>
    2b3e:	e1 e2       	ldi	r30, 0x21	; 33
    2b40:	f4 e2       	ldi	r31, 0x24	; 36
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2b42:	c2 87       	std	Z+10, r28	; 0x0a
    2b44:	d3 87       	std	Z+11, r29	; 0x0b
    2b46:	06 84       	ldd	r0, Z+14	; 0x0e
    2b48:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    2b4a:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    2b4c:	30 97       	sbiw	r30, 0x00	; 0
    2b4e:	29 f0       	breq	.+10     	; 0x2b5a <__vector_126+0x15c>
    2b50:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2b52:	81 11       	cpse	r24, r1
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <__vector_126+0x15c>
    2b56:	d9 d8       	rcall	.-3662   	; 0x1d0a <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2b58:	34 c0       	rjmp	.+104    	; 0x2bc2 <__vector_126+0x1c4>
    2b5a:	e5 d8       	rcall	.-3638   	; 0x1d26 <udd_ctrl_send_zlp_in>
    2b5c:	32 c0       	rjmp	.+100    	; 0x2bc2 <__vector_126+0x1c4>
    2b5e:	80 91 2b 24 	lds	r24, 0x242B	; 0x80242b <udd_g_ctrlreq+0xa>
    2b62:	90 91 2c 24 	lds	r25, 0x242C	; 0x80242c <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2b66:	c8 17       	cp	r28, r24
    2b68:	d9 07       	cpc	r29, r25
    2b6a:	f9 f4       	brne	.+62     	; 0x2baa <__vector_126+0x1ac>
    2b6c:	e0 91 2f 24 	lds	r30, 0x242F	; 0x80242f <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2b70:	f0 91 30 24 	lds	r31, 0x2430	; 0x802430 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2b74:	30 97       	sbiw	r30, 0x00	; 0
    2b76:	11 f4       	brne	.+4      	; 0x2b7c <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2b78:	c8 d8       	rcall	.-3696   	; 0x1d0a <udd_ctrl_stall_data>
    2b7a:	23 c0       	rjmp	.+70     	; 0x2bc2 <__vector_126+0x1c4>
    2b7c:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2b7e:	81 11       	cpse	r24, r1
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <__vector_126+0x188>
    2b82:	c3 d8       	rcall	.-3706   	; 0x1d0a <udd_ctrl_stall_data>
    2b84:	1e c0       	rjmp	.+60     	; 0x2bc2 <__vector_126+0x1c4>
    2b86:	20 91 8d 22 	lds	r18, 0x228D	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    2b8a:	30 91 8e 22 	lds	r19, 0x228E	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
    2b8e:	80 91 8b 22 	lds	r24, 0x228B	; 0x80228b <udd_ctrl_payload_nb_trans>
    2b92:	90 91 8c 22 	lds	r25, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
    2b96:	82 0f       	add	r24, r18
    2b98:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2b9a:	80 93 8d 22 	sts	0x228D, r24	; 0x80228d <udd_ctrl_prev_payload_nb_trans>
    2b9e:	90 93 8e 22 	sts	0x228E, r25	; 0x80228e <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2ba2:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    2ba6:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2baa:	ec e9       	ldi	r30, 0x9C	; 156
    2bac:	f2 e2       	ldi	r31, 0x22	; 34
		udd_ctrl_in_sent();
    2bae:	02 e0       	ldi	r16, 0x02	; 2
    2bb0:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2bb2:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2bb4:	06 93       	lac	Z, r16
    2bb6:	05 c0       	rjmp	.+10     	; 0x2bc2 <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2bb8:	80 38       	cpi	r24, 0x80	; 128
    2bba:	11 f4       	brne	.+4      	; 0x2bc0 <__vector_126+0x1c2>
    2bbc:	ca d8       	rcall	.-3692   	; 0x1d52 <udd_ctrl_in_sent>
    2bbe:	01 c0       	rjmp	.+2      	; 0x2bc2 <__vector_126+0x1c4>
    2bc0:	ea d9       	rcall	.-3116   	; 0x1f96 <udd_ep_trans_complet>
    2bc2:	ff 91       	pop	r31
    2bc4:	ef 91       	pop	r30
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	bf 91       	pop	r27
    2bcc:	af 91       	pop	r26
    2bce:	9f 91       	pop	r25
    2bd0:	8f 91       	pop	r24
    2bd2:	7f 91       	pop	r23
    2bd4:	6f 91       	pop	r22
    2bd6:	5f 91       	pop	r21
    2bd8:	4f 91       	pop	r20
    2bda:	3f 91       	pop	r19
    2bdc:	2f 91       	pop	r18
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	0f 90       	pop	r0
    2be4:	0b be       	out	0x3b, r0	; 59
    2be6:	0f 90       	pop	r0
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	0f 90       	pop	r0
    2bec:	1f 90       	pop	r1
    2bee:	18 95       	reti

00002bf0 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    2bf0:	cf 92       	push	r12
    2bf2:	df 92       	push	r13
    2bf4:	ef 92       	push	r14
    2bf6:	ff 92       	push	r15
    2bf8:	cf 93       	push	r28
    2bfa:	df 93       	push	r29
    2bfc:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    2bfe:	6b 01       	movw	r12, r22
    2c00:	e1 2c       	mov	r14, r1
    2c02:	f1 2c       	mov	r15, r1
    2c04:	60 e8       	ldi	r22, 0x80	; 128
    2c06:	73 ec       	ldi	r23, 0xC3	; 195
    2c08:	89 ec       	ldi	r24, 0xC9	; 201
    2c0a:	91 e0       	ldi	r25, 0x01	; 1
    2c0c:	a7 01       	movw	r20, r14
    2c0e:	96 01       	movw	r18, r12
    2c10:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__udivmodsi4>
    2c14:	ca 01       	movw	r24, r20
    2c16:	b9 01       	movw	r22, r18
    2c18:	2f ef       	ldi	r18, 0xFF	; 255
    2c1a:	3f ef       	ldi	r19, 0xFF	; 255
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
    2c20:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__udivmodsi4>
	if (smallest_div < 1) {
    2c24:	21 15       	cp	r18, r1
    2c26:	31 05       	cpc	r19, r1
    2c28:	29 f4       	brne	.+10     	; 0x2c34 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    2c2e:	21 e0       	ldi	r18, 0x01	; 1
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	2d c0       	rjmp	.+90     	; 0x2c8e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    2c34:	22 30       	cpi	r18, 0x02	; 2
    2c36:	31 05       	cpc	r19, r1
    2c38:	28 f4       	brcc	.+10     	; 0x2c44 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    2c3a:	82 e0       	ldi	r24, 0x02	; 2
    2c3c:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    2c3e:	22 e0       	ldi	r18, 0x02	; 2
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	25 c0       	rjmp	.+74     	; 0x2c8e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    2c44:	24 30       	cpi	r18, 0x04	; 4
    2c46:	31 05       	cpc	r19, r1
    2c48:	28 f4       	brcc	.+10     	; 0x2c54 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2c4a:	83 e0       	ldi	r24, 0x03	; 3
    2c4c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    2c4e:	24 e0       	ldi	r18, 0x04	; 4
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	1d c0       	rjmp	.+58     	; 0x2c8e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    2c54:	28 30       	cpi	r18, 0x08	; 8
    2c56:	31 05       	cpc	r19, r1
    2c58:	28 f4       	brcc	.+10     	; 0x2c64 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2c5a:	84 e0       	ldi	r24, 0x04	; 4
    2c5c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    2c5e:	28 e0       	ldi	r18, 0x08	; 8
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	15 c0       	rjmp	.+42     	; 0x2c8e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    2c64:	20 34       	cpi	r18, 0x40	; 64
    2c66:	31 05       	cpc	r19, r1
    2c68:	28 f4       	brcc	.+10     	; 0x2c74 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2c6a:	85 e0       	ldi	r24, 0x05	; 5
    2c6c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2c6e:	20 e4       	ldi	r18, 0x40	; 64
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	0d c0       	rjmp	.+26     	; 0x2c8e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    2c74:	2f 3f       	cpi	r18, 0xFF	; 255
    2c76:	31 05       	cpc	r19, r1
    2c78:	09 f0       	breq	.+2      	; 0x2c7c <pwm_set_frequency+0x8c>
    2c7a:	28 f4       	brcc	.+10     	; 0x2c86 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2c7c:	86 e0       	ldi	r24, 0x06	; 6
    2c7e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	31 e0       	ldi	r19, 0x01	; 1
    2c84:	04 c0       	rjmp	.+8      	; 0x2c8e <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2c86:	87 e0       	ldi	r24, 0x07	; 7
    2c88:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	60 e8       	ldi	r22, 0x80	; 128
    2c94:	73 ec       	ldi	r23, 0xC3	; 195
    2c96:	89 ec       	ldi	r24, 0xC9	; 201
    2c98:	91 e0       	ldi	r25, 0x01	; 1
    2c9a:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__udivmodsi4>
    2c9e:	ca 01       	movw	r24, r20
    2ca0:	b9 01       	movw	r22, r18
    2ca2:	a7 01       	movw	r20, r14
    2ca4:	96 01       	movw	r18, r12
    2ca6:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__udivmodsi4>
    2caa:	2d 83       	std	Y+5, r18	; 0x05
    2cac:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2cae:	24 36       	cpi	r18, 0x64	; 100
    2cb0:	31 05       	cpc	r19, r1
    2cb2:	18 f4       	brcc	.+6      	; 0x2cba <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    2cb4:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2cb6:	1d 82       	std	Y+5, r1	; 0x05
    2cb8:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	ff 90       	pop	r15
    2cc0:	ef 90       	pop	r14
    2cc2:	df 90       	pop	r13
    2cc4:	cf 90       	pop	r12
    2cc6:	08 95       	ret

00002cc8 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2cc8:	0f 93       	push	r16
    2cca:	1f 93       	push	r17
    2ccc:	cf 93       	push	r28
    2cce:	df 93       	push	r29
    2cd0:	ec 01       	movw	r28, r24
    2cd2:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    2cd4:	86 2f       	mov	r24, r22
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	87 30       	cpi	r24, 0x07	; 7
    2cda:	91 05       	cpc	r25, r1
    2cdc:	08 f0       	brcs	.+2      	; 0x2ce0 <pwm_init+0x18>
    2cde:	8b c0       	rjmp	.+278    	; 0x2df6 <pwm_init+0x12e>
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	88 27       	eor	r24, r24
    2ce4:	eb 5f       	subi	r30, 0xFB	; 251
    2ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cea:	0c 94 21 23 	jmp	0x4642	; 0x4642 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	98 e0       	ldi	r25, 0x08	; 8
    2cf2:	88 83       	st	Y, r24
    2cf4:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2cf6:	e0 e4       	ldi	r30, 0x40	; 64
    2cf8:	f6 e0       	ldi	r31, 0x06	; 6
    2cfa:	30 81       	ld	r19, Z
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	2f ef       	ldi	r18, 0xFF	; 255
    2d02:	24 0f       	add	r18, r20
    2d04:	02 c0       	rjmp	.+4      	; 0x2d0a <pwm_init+0x42>
    2d06:	88 0f       	add	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	2a 95       	dec	r18
    2d0c:	e2 f7       	brpl	.-8      	; 0x2d06 <pwm_init+0x3e>
    2d0e:	83 2b       	or	r24, r19
    2d10:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2d12:	71 c0       	rjmp	.+226    	; 0x2df6 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    2d14:	80 e4       	ldi	r24, 0x40	; 64
    2d16:	98 e0       	ldi	r25, 0x08	; 8
    2d18:	88 83       	st	Y, r24
    2d1a:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2d1c:	e0 e4       	ldi	r30, 0x40	; 64
    2d1e:	f6 e0       	ldi	r31, 0x06	; 6
    2d20:	30 81       	ld	r19, Z
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	23 e0       	ldi	r18, 0x03	; 3
    2d28:	24 0f       	add	r18, r20
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <pwm_init+0x68>
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	2a 95       	dec	r18
    2d32:	e2 f7       	brpl	.-8      	; 0x2d2c <pwm_init+0x64>
    2d34:	83 2b       	or	r24, r19
    2d36:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2d38:	5e c0       	rjmp	.+188    	; 0x2df6 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	99 e0       	ldi	r25, 0x09	; 9
    2d3e:	88 83       	st	Y, r24
    2d40:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    2d42:	e0 e6       	ldi	r30, 0x60	; 96
    2d44:	f6 e0       	ldi	r31, 0x06	; 6
    2d46:	30 81       	ld	r19, Z
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	2f ef       	ldi	r18, 0xFF	; 255
    2d4e:	24 0f       	add	r18, r20
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <pwm_init+0x8e>
    2d52:	88 0f       	add	r24, r24
    2d54:	99 1f       	adc	r25, r25
    2d56:	2a 95       	dec	r18
    2d58:	e2 f7       	brpl	.-8      	; 0x2d52 <pwm_init+0x8a>
    2d5a:	83 2b       	or	r24, r19
    2d5c:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2d5e:	4b c0       	rjmp	.+150    	; 0x2df6 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2d60:	80 e4       	ldi	r24, 0x40	; 64
    2d62:	99 e0       	ldi	r25, 0x09	; 9
    2d64:	88 83       	st	Y, r24
    2d66:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2d68:	e0 e6       	ldi	r30, 0x60	; 96
    2d6a:	f6 e0       	ldi	r31, 0x06	; 6
    2d6c:	30 81       	ld	r19, Z
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	23 e0       	ldi	r18, 0x03	; 3
    2d74:	24 0f       	add	r18, r20
    2d76:	02 c0       	rjmp	.+4      	; 0x2d7c <pwm_init+0xb4>
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	2a 95       	dec	r18
    2d7e:	e2 f7       	brpl	.-8      	; 0x2d78 <pwm_init+0xb0>
    2d80:	83 2b       	or	r24, r19
    2d82:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2d84:	38 c0       	rjmp	.+112    	; 0x2df6 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	9a e0       	ldi	r25, 0x0A	; 10
    2d8a:	88 83       	st	Y, r24
    2d8c:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2d8e:	e0 e8       	ldi	r30, 0x80	; 128
    2d90:	f6 e0       	ldi	r31, 0x06	; 6
    2d92:	30 81       	ld	r19, Z
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	2f ef       	ldi	r18, 0xFF	; 255
    2d9a:	24 0f       	add	r18, r20
    2d9c:	02 c0       	rjmp	.+4      	; 0x2da2 <pwm_init+0xda>
    2d9e:	88 0f       	add	r24, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	2a 95       	dec	r18
    2da4:	e2 f7       	brpl	.-8      	; 0x2d9e <pwm_init+0xd6>
    2da6:	83 2b       	or	r24, r19
    2da8:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2daa:	25 c0       	rjmp	.+74     	; 0x2df6 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    2dac:	80 e4       	ldi	r24, 0x40	; 64
    2dae:	9a e0       	ldi	r25, 0x0A	; 10
    2db0:	88 83       	st	Y, r24
    2db2:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    2db4:	e0 e8       	ldi	r30, 0x80	; 128
    2db6:	f6 e0       	ldi	r31, 0x06	; 6
    2db8:	30 81       	ld	r19, Z
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	23 e0       	ldi	r18, 0x03	; 3
    2dc0:	24 0f       	add	r18, r20
    2dc2:	02 c0       	rjmp	.+4      	; 0x2dc8 <pwm_init+0x100>
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	2a 95       	dec	r18
    2dca:	e2 f7       	brpl	.-8      	; 0x2dc4 <pwm_init+0xfc>
    2dcc:	83 2b       	or	r24, r19
    2dce:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2dd0:	12 c0       	rjmp	.+36     	; 0x2df6 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	9b e0       	ldi	r25, 0x0B	; 11
    2dd6:	88 83       	st	Y, r24
    2dd8:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    2dda:	e0 ea       	ldi	r30, 0xA0	; 160
    2ddc:	f6 e0       	ldi	r31, 0x06	; 6
    2dde:	30 81       	ld	r19, Z
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	2f ef       	ldi	r18, 0xFF	; 255
    2de6:	24 0f       	add	r18, r20
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <pwm_init+0x126>
    2dea:	88 0f       	add	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	2a 95       	dec	r18
    2df0:	e2 f7       	brpl	.-8      	; 0x2dea <pwm_init+0x122>
    2df2:	83 2b       	or	r24, r19
    2df4:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    2df6:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    2df8:	42 30       	cpi	r20, 0x02	; 2
    2dfa:	61 f0       	breq	.+24     	; 0x2e14 <pwm_init+0x14c>
    2dfc:	18 f4       	brcc	.+6      	; 0x2e04 <pwm_init+0x13c>
    2dfe:	41 30       	cpi	r20, 0x01	; 1
    2e00:	31 f0       	breq	.+12     	; 0x2e0e <pwm_init+0x146>
    2e02:	10 c0       	rjmp	.+32     	; 0x2e24 <pwm_init+0x15c>
    2e04:	43 30       	cpi	r20, 0x03	; 3
    2e06:	49 f0       	breq	.+18     	; 0x2e1a <pwm_init+0x152>
    2e08:	44 30       	cpi	r20, 0x04	; 4
    2e0a:	51 f0       	breq	.+20     	; 0x2e20 <pwm_init+0x158>
    2e0c:	0b c0       	rjmp	.+22     	; 0x2e24 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    2e0e:	80 e1       	ldi	r24, 0x10	; 16
    2e10:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2e12:	08 c0       	rjmp	.+16     	; 0x2e24 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    2e14:	80 e2       	ldi	r24, 0x20	; 32
    2e16:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2e18:	05 c0       	rjmp	.+10     	; 0x2e24 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    2e1a:	80 e4       	ldi	r24, 0x40	; 64
    2e1c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2e1e:	02 c0       	rjmp	.+4      	; 0x2e24 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    2e20:	80 e8       	ldi	r24, 0x80	; 128
    2e22:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    2e24:	88 81       	ld	r24, Y
    2e26:	99 81       	ldd	r25, Y+1	; 0x01
    2e28:	0e 94 4b 0c 	call	0x1896	; 0x1896 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    2e2c:	e8 81       	ld	r30, Y
    2e2e:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2e30:	81 81       	ldd	r24, Z+1	; 0x01
    2e32:	88 7f       	andi	r24, 0xF8	; 248
    2e34:	83 60       	ori	r24, 0x03	; 3
    2e36:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2e38:	1d 82       	std	Y+5, r1	; 0x05
    2e3a:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2e3c:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    2e3e:	e8 81       	ld	r30, Y
    2e40:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2e42:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2e44:	80 7f       	andi	r24, 0xF0	; 240
    2e46:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    2e48:	b8 01       	movw	r22, r16
    2e4a:	ce 01       	movw	r24, r28
    2e4c:	d1 de       	rcall	.-606    	; 0x2bf0 <pwm_set_frequency>
}
    2e4e:	df 91       	pop	r29
    2e50:	cf 91       	pop	r28
    2e52:	1f 91       	pop	r17
    2e54:	0f 91       	pop	r16
    2e56:	08 95       	ret

00002e58 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    2e5e:	2d 81       	ldd	r18, Y+5	; 0x05
    2e60:	3e 81       	ldd	r19, Y+6	; 0x06
    2e62:	a6 2f       	mov	r26, r22
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	0e 94 29 23 	call	0x4652	; 0x4652 <__umulhisi3>
    2e6a:	24 e6       	ldi	r18, 0x64	; 100
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e0       	ldi	r20, 0x00	; 0
    2e70:	50 e0       	ldi	r21, 0x00	; 0
    2e72:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__udivmodsi4>
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	e8 81       	ld	r30, Y
    2e7a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2e7c:	e6 fd       	sbrc	r30, 6
    2e7e:	17 c0       	rjmp	.+46     	; 0x2eae <pwm_start+0x56>
		switch (channel_index) {
    2e80:	82 30       	cpi	r24, 0x02	; 2
    2e82:	61 f0       	breq	.+24     	; 0x2e9c <pwm_start+0x44>
    2e84:	18 f4       	brcc	.+6      	; 0x2e8c <pwm_start+0x34>
    2e86:	81 30       	cpi	r24, 0x01	; 1
    2e88:	31 f0       	breq	.+12     	; 0x2e96 <pwm_start+0x3e>
    2e8a:	1b c0       	rjmp	.+54     	; 0x2ec2 <pwm_start+0x6a>
    2e8c:	83 30       	cpi	r24, 0x03	; 3
    2e8e:	49 f0       	breq	.+18     	; 0x2ea2 <pwm_start+0x4a>
    2e90:	84 30       	cpi	r24, 0x04	; 4
    2e92:	51 f0       	breq	.+20     	; 0x2ea8 <pwm_start+0x50>
    2e94:	16 c0       	rjmp	.+44     	; 0x2ec2 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    2e96:	20 af       	std	Z+56, r18	; 0x38
    2e98:	31 af       	std	Z+57, r19	; 0x39
    2e9a:	13 c0       	rjmp	.+38     	; 0x2ec2 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2e9c:	22 af       	std	Z+58, r18	; 0x3a
    2e9e:	33 af       	std	Z+59, r19	; 0x3b
    2ea0:	10 c0       	rjmp	.+32     	; 0x2ec2 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2ea2:	24 af       	std	Z+60, r18	; 0x3c
    2ea4:	35 af       	std	Z+61, r19	; 0x3d
    2ea6:	0d c0       	rjmp	.+26     	; 0x2ec2 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2ea8:	26 af       	std	Z+62, r18	; 0x3e
    2eaa:	37 af       	std	Z+63, r19	; 0x3f
    2eac:	0a c0       	rjmp	.+20     	; 0x2ec2 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2eae:	81 30       	cpi	r24, 0x01	; 1
    2eb0:	19 f0       	breq	.+6      	; 0x2eb8 <pwm_start+0x60>
    2eb2:	82 30       	cpi	r24, 0x02	; 2
    2eb4:	21 f0       	breq	.+8      	; 0x2ebe <pwm_start+0x66>
    2eb6:	05 c0       	rjmp	.+10     	; 0x2ec2 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2eb8:	20 af       	std	Z+56, r18	; 0x38
    2eba:	31 af       	std	Z+57, r19	; 0x39
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    2ebe:	22 af       	std	Z+58, r18	; 0x3a
    2ec0:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec6:	e8 81       	ld	r30, Y
    2ec8:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2eca:	86 a3       	std	Z+38, r24	; 0x26
    2ecc:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	e8 81       	ld	r30, Y
    2ed2:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    2ed4:	e6 fd       	sbrc	r30, 6
    2ed6:	04 c0       	rjmp	.+8      	; 0x2ee0 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    2ed8:	91 81       	ldd	r25, Z+1	; 0x01
    2eda:	89 2b       	or	r24, r25
    2edc:	81 83       	std	Z+1, r24	; 0x01
    2ede:	04 c0       	rjmp	.+8      	; 0x2ee8 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    2ee0:	91 81       	ldd	r25, Z+1	; 0x01
    2ee2:	80 73       	andi	r24, 0x30	; 48
    2ee4:	89 2b       	or	r24, r25
    2ee6:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    2ee8:	e8 81       	ld	r30, Y
    2eea:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2eec:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2eee:	80 7f       	andi	r24, 0xF0	; 240
    2ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef2:	89 2b       	or	r24, r25
    2ef4:	80 83       	st	Z, r24
}
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	08 95       	ret

00002efc <cb_rtc_alarm>:

void halt(void)
{
	/* MAIN Loop Shutdown */
	
	runmode = 0;
    2efc:	08 95       	ret

00002efe <usb_callback_suspend_action>:
    2efe:	08 95       	ret

00002f00 <usb_callback_resume_action>:
    2f00:	08 95       	ret

00002f02 <usb_callback_remotewakeup_enable>:
    2f02:	08 95       	ret

00002f04 <usb_callback_remotewakeup_disable>:
    2f04:	08 95       	ret

00002f06 <usb_callback_cdc_enable>:
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	80 93 e0 22 	sts	0x22E0, r24	; 0x8022e0 <usb_cdc_transfers_autorized>
    2f0c:	08 95       	ret

00002f0e <usb_callback_cdc_disable>:
    2f0e:	10 92 e0 22 	sts	0x22E0, r1	; 0x8022e0 <usb_cdc_transfers_autorized>
    2f12:	08 95       	ret

00002f14 <usb_callback_config>:
    2f14:	08 95       	ret

00002f16 <usb_callback_cdc_set_dtr>:
    2f16:	08 95       	ret

00002f18 <usb_callback_cdc_set_rts>:
    2f18:	08 95       	ret

00002f1a <usb_callback_rx_notify>:
    2f1a:	08 95       	ret

00002f1c <usb_callback_tx_empty_notify>:
    2f1c:	08 95       	ret

00002f1e <main>:
}


int main(void)
{
    2f1e:	2f 92       	push	r2
    2f20:	3f 92       	push	r3
    2f22:	4f 92       	push	r4
    2f24:	5f 92       	push	r5
    2f26:	6f 92       	push	r6
    2f28:	7f 92       	push	r7
    2f2a:	8f 92       	push	r8
    2f2c:	9f 92       	push	r9
    2f2e:	af 92       	push	r10
    2f30:	bf 92       	push	r11
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	c2 54       	subi	r28, 0x42	; 66
    2f48:	d1 09       	sbc	r29, r1
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	de bf       	out	0x3e, r29	; 62
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2f4e:	0f 2e       	mov	r0, r31
    2f50:	f0 ea       	ldi	r31, 0xA0	; 160
    2f52:	af 2e       	mov	r10, r31
    2f54:	b1 2c       	mov	r11, r1
    2f56:	f0 2d       	mov	r31, r0
    2f58:	07 e0       	ldi	r16, 0x07	; 7
    2f5a:	d5 01       	movw	r26, r10
    2f5c:	12 96       	adiw	r26, 0x02	; 2
	uint8_t retcode = 0;
	
	/* Init of sub-modules */
	pmic_init();
	sysclk_init();
    2f5e:	0c 93       	st	X, r16
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2f60:	a1 d2       	rcall	.+1346   	; 0x34a4 <sysclk_init>
    2f62:	e1 e3       	ldi	r30, 0x31	; 49
    2f64:	f4 e2       	ldi	r31, 0x24	; 36
    2f66:	10 82       	st	Z, r1
    2f68:	11 82       	std	Z+1, r1	; 0x01
    2f6a:	12 82       	std	Z+2, r1	; 0x02
    2f6c:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2f6e:	14 82       	std	Z+4, r1	; 0x04
    2f70:	11 e0       	ldi	r17, 0x01	; 1
	sleepmgr_init();	// Unlocks all sleep mode levels
	rtc_init();
    2f72:	15 83       	std	Z+5, r17	; 0x05
    2f74:	0e 94 4f 01 	call	0x29e	; 0x29e <rtc_init>
	rtc_set_callback(cb_rtc_alarm);
    2f78:	8e e7       	ldi	r24, 0x7E	; 126
    2f7a:	97 e1       	ldi	r25, 0x17	; 23
    2f7c:	0e 94 4a 01 	call	0x294	; 0x294 <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2f80:	62 e0       	ldi	r22, 0x02	; 2
    2f82:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event 7 */
	EVSYS.CH7MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    2f84:	10 d3       	rcall	.+1568   	; 0x35a6 <sysclk_enable_module>
    2f86:	e0 e8       	ldi	r30, 0x80	; 128
    2f88:	f1 e0       	ldi	r31, 0x01	; 1
    2f8a:	80 ec       	ldi	r24, 0xC0	; 192

	/* DAC - event 6 */
	EVSYS.CH6MUX = EVSYS_CHMUX_TCE1_OVF_gc;
    2f8c:	87 83       	std	Z+7, r24	; 0x07
    2f8e:	88 ee       	ldi	r24, 0xE8	; 232


static void tc_init(void)
{
	/* DAC clock */
	tc_enable(&TCE1);
    2f90:	86 83       	std	Z+6, r24	; 0x06
    2f92:	80 e4       	ldi	r24, 0x40	; 64
    2f94:	9a e0       	ldi	r25, 0x0A	; 10
    2f96:	0e 94 4b 0c 	call	0x1896	; 0x1896 <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2f9a:	0f 2e       	mov	r0, r31
    2f9c:	f0 e4       	ldi	r31, 0x40	; 64
    2f9e:	ef 2e       	mov	r14, r31
    2fa0:	fa e0       	ldi	r31, 0x0A	; 10
    2fa2:	ff 2e       	mov	r15, r31
    2fa4:	f0 2d       	mov	r31, r0
    2fa6:	f7 01       	movw	r30, r14
    2fa8:	81 81       	ldd	r24, Z+1	; 0x01
    2faa:	88 7f       	andi	r24, 0xF8	; 248
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2fac:	81 83       	std	Z+1, r24	; 0x01
    2fae:	80 e7       	ldi	r24, 0x70	; 112
    2fb0:	92 e0       	ldi	r25, 0x02	; 2
    2fb2:	86 a3       	std	Z+38, r24	; 0x26
	tc_set_wgm(&TCE1, TC_WG_NORMAL);											// Internal clock for DAC convertion
	tc_write_period(&TCE1, (sysclk_get_per_hz() / DAC_RATE_OF_CONV) - 1);		// DAC clock 48 kHz for audio play-back

	/* VCTCXO PWM signal generation */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 500);							// Init PWM structure and enable timer
    2fb4:	97 a3       	std	Z+39, r25	; 0x27
    2fb6:	24 ef       	ldi	r18, 0xF4	; 244
    2fb8:	31 e0       	ldi	r19, 0x01	; 1
    2fba:	43 e0       	ldi	r20, 0x03	; 3
    2fbc:	60 e0       	ldi	r22, 0x00	; 0
    2fbe:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    2fc0:	01 96       	adiw	r24, 0x01	; 1
    2fc2:	82 de       	rcall	.-764    	; 0x2cc8 <pwm_init>
    2fc4:	6d e2       	ldi	r22, 0x2D	; 45
    2fc6:	ce 01       	movw	r24, r28
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2fc8:	01 96       	adiw	r24, 0x01	; 1
    2fca:	46 df       	rcall	.-372    	; 0x2e58 <pwm_start>
    2fcc:	c1 2c       	mov	r12, r1
    2fce:	68 94       	set
    2fd0:	dd 24       	eor	r13, r13
    2fd2:	d3 f8       	bld	r13, 3
    2fd4:	8d e5       	ldi	r24, 0x5D	; 93
    2fd6:	94 e7       	ldi	r25, 0x74	; 116
    2fd8:	d6 01       	movw	r26, r12
    2fda:	dc 96       	adiw	r26, 0x3c	; 60
    2fdc:	8d 93       	st	X+, r24
	struct adc_channel_config			adcch_vctcxo_conf;
	struct adc_channel_config			adcch_io_adc4_conf;
	struct adc_channel_config			adcch_io_adc5_conf;

	/* Prepare the structures */
	adc_read_configuration(&ADC_5V0,						&adc_5v0_conf);
    2fde:	9c 93       	st	X, r25
    2fe0:	dd 97       	sbiw	r26, 0x3d	; 61
    2fe2:	be 01       	movw	r22, r28
    2fe4:	6c 5d       	subi	r22, 0xDC	; 220
    2fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    2fec:	0e 94 7e 04 	call	0x8fc	; 0x8fc <adc_read_configuration>
    2ff0:	ae 01       	movw	r20, r28
    2ff2:	41 5c       	subi	r20, 0xC1	; 193
    2ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff6:	61 e0       	ldi	r22, 0x01	; 1
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_3V0,						&adc_3v0_conf);
    2ffc:	0e 94 02 05 	call	0xa04	; 0xa04 <adcch_read_configuration>
    3000:	be 01       	movw	r22, r28
    3002:	63 5e       	subi	r22, 0xE3	; 227
    3004:	7f 4f       	sbci	r23, 0xFF	; 255
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    300a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <adc_read_configuration>
    300e:	ae 01       	movw	r20, r28
    3010:	45 5c       	subi	r20, 0xC5	; 197
    3012:	5f 4f       	sbci	r21, 0xFF	; 255
    3014:	61 e0       	ldi	r22, 0x01	; 1
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VBAT,						&adc_vbat_conf);
    301a:	0e 94 02 05 	call	0xa04	; 0xa04 <adcch_read_configuration>
    301e:	be 01       	movw	r22, r28
    3020:	6a 5e       	subi	r22, 0xEA	; 234
    3022:	7f 4f       	sbci	r23, 0xFF	; 255
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    3028:	0e 94 7e 04 	call	0x8fc	; 0x8fc <adc_read_configuration>
    302c:	ae 01       	movw	r20, r28
    302e:	49 5c       	subi	r20, 0xC9	; 201
    3030:	5f 4f       	sbci	r21, 0xFF	; 255
    3032:	61 e0       	ldi	r22, 0x01	; 1
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VCTCXO,						&adc_vctcxo_conf);
    3038:	0e 94 02 05 	call	0xa04	; 0xa04 <adcch_read_configuration>
    303c:	be 01       	movw	r22, r28
    303e:	61 5f       	subi	r22, 0xF1	; 241
    3040:	7f 4f       	sbci	r23, 0xFF	; 255
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    3046:	0e 94 7e 04 	call	0x8fc	; 0x8fc <adc_read_configuration>
    304a:	ae 01       	movw	r20, r28
    304c:	4d 5c       	subi	r20, 0xCD	; 205
    304e:	5f 4f       	sbci	r21, 0xFF	; 255
    3050:	62 e0       	ldi	r22, 0x02	; 2
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC4,					&adc_io_adc4_conf);
    3056:	0e 94 02 05 	call	0xa04	; 0xa04 <adcch_read_configuration>
    305a:	be 01       	movw	r22, r28
    305c:	68 5f       	subi	r22, 0xF8	; 248
    305e:	7f 4f       	sbci	r23, 0xFF	; 255
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_io_adc4_conf);
    3064:	0e 94 7e 04 	call	0x8fc	; 0x8fc <adc_read_configuration>
    3068:	ae 01       	movw	r20, r28
    306a:	41 5d       	subi	r20, 0xD1	; 209
    306c:	5f 4f       	sbci	r21, 0xFF	; 255
    306e:	64 e0       	ldi	r22, 0x04	; 4
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC5,					&adc_io_adc5_conf);
    3074:	0e 94 02 05 	call	0xa04	; 0xa04 <adcch_read_configuration>
    3078:	be 01       	movw	r22, r28
    307a:	6f 5f       	subi	r22, 0xFF	; 255
    307c:	7f 4f       	sbci	r23, 0xFF	; 255
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_io_adc5_conf);
    3082:	0e 94 7e 04 	call	0x8fc	; 0x8fc <adc_read_configuration>
    3086:	ae 01       	movw	r20, r28
    3088:	45 5d       	subi	r20, 0xD5	; 213
    308a:	5f 4f       	sbci	r21, 0xFF	; 255
    308c:	68 e0       	ldi	r22, 0x08	; 8
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	92 e0       	ldi	r25, 0x02	; 2
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3092:	0e 94 02 05 	call	0xa04	; 0xa04 <adcch_read_configuration>
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3096:	6d a1       	ldd	r22, Y+37	; 0x25
    3098:	8e a1       	ldd	r24, Y+38	; 0x26
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    309a:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    309c:	8e a3       	std	Y+38, r24	; 0x26
    309e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    30a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    30a2:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    30a4:	8f 8f       	std	Y+31, r24	; 0x1f
    30a6:	4f 89       	ldd	r20, Y+23	; 0x17
    30a8:	88 8d       	ldd	r24, Y+24	; 0x18
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    30aa:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    30ac:	88 8f       	std	Y+24, r24	; 0x18
    30ae:	38 89       	ldd	r19, Y+16	; 0x10
    30b0:	89 89       	ldd	r24, Y+17	; 0x11
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    30b2:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    30b4:	89 8b       	std	Y+17, r24	; 0x11
    30b6:	29 85       	ldd	r18, Y+9	; 0x09
    30b8:	8a 85       	ldd	r24, Y+10	; 0x0a
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    30ba:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    30bc:	8a 87       	std	Y+10, r24	; 0x0a
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    30c2:	8f 78       	andi	r24, 0x8F	; 143
    30c4:	8b 83       	std	Y+3, r24	; 0x03
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    30c6:	86 ec       	ldi	r24, 0xC6	; 198
    30c8:	8f a3       	std	Y+39, r24	; 0x27
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    30ca:	1b 87       	std	Y+11, r17	; 0x0b
    30cc:	1c 83       	std	Y+4, r17	; 0x04
    30ce:	83 e0       	ldi	r24, 0x03	; 3
    30d0:	88 a7       	std	Y+40, r24	; 0x28
    30d2:	89 a3       	std	Y+33, r24	; 0x21
    30d4:	8a 8f       	std	Y+26, r24	; 0x1a
    30d6:	8b 8b       	std	Y+19, r24	; 0x13
static inline void adc_set_gain_impedance_mode(struct adc_config *conf,
		enum adc_gainstage_impmode impmode)
{
	switch (impmode) {
	case ADC_GAIN_HIGHIMPEDANCE:
		conf->ctrlb &= ~ADC_IMPMODE_bm;
    30d8:	8c 87       	std	Y+12, r24	; 0x0c
    30da:	8d 83       	std	Y+5, r24	; 0x05
    30dc:	61 70       	andi	r22, 0x01	; 1
    30de:	60 64       	ori	r22, 0x40	; 64
    30e0:	6d a3       	std	Y+37, r22	; 0x25
    30e2:	59 70       	andi	r21, 0x09	; 9
    30e4:	50 64       	ori	r21, 0x40	; 64
    30e6:	5e 8f       	std	Y+30, r21	; 0x1e
    30e8:	49 70       	andi	r20, 0x09	; 9
    30ea:	40 64       	ori	r20, 0x40	; 64
    30ec:	4f 8b       	std	Y+23, r20	; 0x17
    30ee:	39 70       	andi	r19, 0x09	; 9
    30f0:	30 64       	ori	r19, 0x40	; 64
    30f2:	38 8b       	std	Y+16, r19	; 0x10
    30f4:	21 70       	andi	r18, 0x01	; 1
    30f6:	20 64       	ori	r18, 0x40	; 64
    30f8:	29 87       	std	Y+9, r18	; 0x09
    30fa:	91 70       	andi	r25, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    30fc:	90 64       	ori	r25, 0x40	; 64
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    30fe:	9a 83       	std	Y+2, r25	; 0x02
    3100:	1f af       	std	Y+63, r17	; 0x3f
    3102:	90 e1       	ldi	r25, 0x10	; 16
    3104:	21 96       	adiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3106:	9f af       	std	Y+63, r25	; 0x3f
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3108:	21 97       	sbiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    310a:	1b af       	std	Y+59, r17	; 0x3b
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    310c:	1c ae       	std	Y+60, r1	; 0x3c
    310e:	1f ab       	std	Y+55, r17	; 0x37
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3110:	98 e1       	ldi	r25, 0x18	; 24
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3112:	98 af       	std	Y+56, r25	; 0x38
    3114:	1b ab       	std	Y+51, r17	; 0x33
    3116:	68 94       	set
    3118:	99 24       	eor	r9, r9
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    311a:	93 f8       	bld	r9, 3
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    311c:	9c aa       	std	Y+52, r9	; 0x34
    311e:	1f a7       	std	Y+47, r17	; 0x2f
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    3120:	90 e2       	ldi	r25, 0x20	; 32
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3122:	98 ab       	std	Y+48, r25	; 0x30
    3124:	1b a7       	std	Y+43, r17	; 0x2b
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    3126:	98 e2       	ldi	r25, 0x28	; 40
    3128:	9c a7       	std	Y+44, r25	; 0x2c
    312a:	22 96       	adiw	r28, 0x02	; 2
    312c:	9f ad       	ldd	r25, Y+63	; 0x3f
    312e:	22 97       	sbiw	r28, 0x02	; 2
    3130:	93 7f       	andi	r25, 0xF3	; 243
    3132:	22 96       	adiw	r28, 0x02	; 2
    3134:	9f af       	std	Y+63, r25	; 0x3f
    3136:	22 97       	sbiw	r28, 0x02	; 2
    3138:	9d ad       	ldd	r25, Y+61	; 0x3d
    313a:	93 7f       	andi	r25, 0xF3	; 243
    313c:	9d af       	std	Y+61, r25	; 0x3d
    313e:	99 ad       	ldd	r25, Y+57	; 0x39
    3140:	93 7f       	andi	r25, 0xF3	; 243
    3142:	99 af       	std	Y+57, r25	; 0x39
    3144:	9d a9       	ldd	r25, Y+53	; 0x35
    3146:	93 7f       	andi	r25, 0xF3	; 243
    3148:	9d ab       	std	Y+53, r25	; 0x35
    314a:	99 a9       	ldd	r25, Y+49	; 0x31
    314c:	93 7f       	andi	r25, 0xF3	; 243
    314e:	99 ab       	std	Y+49, r25	; 0x31
    3150:	9d a5       	ldd	r25, Y+45	; 0x2d
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    3152:	93 7f       	andi	r25, 0xF3	; 243
    3154:	9d a7       	std	Y+45, r25	; 0x2d
    3156:	23 96       	adiw	r28, 0x03	; 3
    3158:	8f af       	std	Y+63, r24	; 0x3f
    315a:	23 97       	sbiw	r28, 0x03	; 3
	adcch_set_pin_scan(&adcch_5v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_3v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_vbat_conf,	0, 3);

	/* Execute the new settings */
	adc_write_configuration(&ADC_5V0,						&adc_5v0_conf);
    315c:	8e af       	std	Y+62, r24	; 0x3e
    315e:	8a af       	std	Y+58, r24	; 0x3a
    3160:	be 01       	movw	r22, r28
    3162:	6c 5d       	subi	r22, 0xDC	; 220
    3164:	7f 4f       	sbci	r23, 0xFF	; 255
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    316a:	0e 94 14 04 	call	0x828	; 0x828 <adc_write_configuration>
    316e:	ae 01       	movw	r20, r28
    3170:	41 5c       	subi	r20, 0xC1	; 193
    3172:	5f 4f       	sbci	r21, 0xFF	; 255
    3174:	61 e0       	ldi	r22, 0x01	; 1
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_3V0,						&adc_3v0_conf);
    317a:	0e 94 b7 04 	call	0x96e	; 0x96e <adcch_write_configuration>
    317e:	be 01       	movw	r22, r28
    3180:	63 5e       	subi	r22, 0xE3	; 227
    3182:	7f 4f       	sbci	r23, 0xFF	; 255
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    3188:	0e 94 14 04 	call	0x828	; 0x828 <adc_write_configuration>
    318c:	ae 01       	movw	r20, r28
    318e:	45 5c       	subi	r20, 0xC5	; 197
    3190:	5f 4f       	sbci	r21, 0xFF	; 255
    3192:	61 e0       	ldi	r22, 0x01	; 1
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VBAT,						&adc_vbat_conf);
    3198:	0e 94 b7 04 	call	0x96e	; 0x96e <adcch_write_configuration>
    319c:	be 01       	movw	r22, r28
    319e:	6a 5e       	subi	r22, 0xEA	; 234
    31a0:	7f 4f       	sbci	r23, 0xFF	; 255
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    31a6:	0e 94 14 04 	call	0x828	; 0x828 <adc_write_configuration>
    31aa:	ae 01       	movw	r20, r28
    31ac:	49 5c       	subi	r20, 0xC9	; 201
    31ae:	5f 4f       	sbci	r21, 0xFF	; 255
    31b0:	61 e0       	ldi	r22, 0x01	; 1
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VCTCXO,					&adc_vctcxo_conf);
    31b6:	0e 94 b7 04 	call	0x96e	; 0x96e <adcch_write_configuration>
    31ba:	be 01       	movw	r22, r28
    31bc:	61 5f       	subi	r22, 0xF1	; 241
    31be:	7f 4f       	sbci	r23, 0xFF	; 255
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    31c4:	0e 94 14 04 	call	0x828	; 0x828 <adc_write_configuration>
    31c8:	ae 01       	movw	r20, r28
    31ca:	4d 5c       	subi	r20, 0xCD	; 205
    31cc:	5f 4f       	sbci	r21, 0xFF	; 255
    31ce:	62 e0       	ldi	r22, 0x02	; 2
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC4,					&adc_vctcxo_conf);
    31d4:	0e 94 b7 04 	call	0x96e	; 0x96e <adcch_write_configuration>
    31d8:	be 01       	movw	r22, r28
    31da:	61 5f       	subi	r22, 0xF1	; 241
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_vctcxo_conf);
    31e2:	0e 94 14 04 	call	0x828	; 0x828 <adc_write_configuration>
    31e6:	ae 01       	movw	r20, r28
    31e8:	4d 5c       	subi	r20, 0xCD	; 205
    31ea:	5f 4f       	sbci	r21, 0xFF	; 255
    31ec:	64 e0       	ldi	r22, 0x04	; 4
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC5,					&adc_vctcxo_conf);
    31f2:	0e 94 b7 04 	call	0x96e	; 0x96e <adcch_write_configuration>
    31f6:	be 01       	movw	r22, r28
    31f8:	61 5f       	subi	r22, 0xF1	; 241
    31fa:	7f 4f       	sbci	r23, 0xFF	; 255
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_vctcxo_conf);
    3200:	0e 94 14 04 	call	0x828	; 0x828 <adc_write_configuration>
    3204:	ae 01       	movw	r20, r28
    3206:	4d 5c       	subi	r20, 0xCD	; 205
    3208:	5f 4f       	sbci	r21, 0xFF	; 255
    320a:	68 e0       	ldi	r22, 0x08	; 8
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	92 e0       	ldi	r25, 0x02	; 2
static void dac_init(void)
{
    struct dac_config dac_io_dac0_conf;
    struct dac_config dac_io_dac1_conf;

    dac_read_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    3210:	0e 94 b7 04 	call	0x96e	; 0x96e <adcch_write_configuration>
    3214:	be 01       	movw	r22, r28
    3216:	68 5f       	subi	r22, 0xF8	; 248
    3218:	7f 4f       	sbci	r23, 0xFF	; 255
    321a:	80 e2       	ldi	r24, 0x20	; 32
    321c:	93 e0       	ldi	r25, 0x03	; 3
    dac_read_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    321e:	0e 94 c8 05 	call	0xb90	; 0xb90 <dac_read_configuration>
    3222:	be 01       	movw	r22, r28
    3224:	6f 5f       	subi	r22, 0xFF	; 255
    3226:	7f 4f       	sbci	r23, 0xFF	; 255
    3228:	80 e2       	ldi	r24, 0x20	; 32
    322a:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    322c:	0e 94 c8 05 	call	0xb90	; 0xb90 <dac_read_configuration>
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    3230:	1a 87       	std	Y+10, r17	; 0x0a
    3232:	1b 83       	std	Y+3, r17	; 0x03
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    3234:	84 e0       	ldi	r24, 0x04	; 4
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    3236:	88 87       	std	Y+8, r24	; 0x08
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    3238:	99 85       	ldd	r25, Y+9	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    323a:	99 82       	std	Y+1, r9	; 0x01
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	9c 79       	andi	r25, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    3240:	91 60       	ori	r25, 0x01	; 1
    3242:	99 87       	std	Y+9, r25	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    3244:	96 e0       	ldi	r25, 0x06	; 6
    3246:	9b 87       	std	Y+11, r25	; 0x0b
    3248:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    324a:	82 60       	ori	r24, 0x02	; 2
    #ifdef XMEGA_DAC_VERSION_1
    dac_set_conversion_interval(&dac_io_dac0_conf, 2);
    dac_set_conversion_interval(&dac_io_dac1_conf, 2);
    #endif

    dac_write_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    324c:	8a 83       	std	Y+2, r24	; 0x02
    324e:	9c 83       	std	Y+4, r25	; 0x04
    3250:	be 01       	movw	r22, r28
    3252:	68 5f       	subi	r22, 0xF8	; 248
    3254:	7f 4f       	sbci	r23, 0xFF	; 255
    3256:	80 e2       	ldi	r24, 0x20	; 32
    3258:	93 e0       	ldi	r25, 0x03	; 3
    dac_write_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    325a:	0e 94 6c 05 	call	0xad8	; 0xad8 <dac_write_configuration>
    325e:	be 01       	movw	r22, r28
    3260:	6f 5f       	subi	r22, 0xFF	; 255
    3262:	7f 4f       	sbci	r23, 0xFF	; 255
    3264:	80 e2       	ldi	r24, 0x20	; 32
    3266:	93 e0       	ldi	r25, 0x03	; 3
	rtc_set_callback(cb_rtc_alarm);
	evsys_init();
	tc_init();
	adc_init();
	dac_init();
	twi_init();
    3268:	0e 94 6c 05 	call	0xad8	; 0xad8 <dac_write_configuration>
	
	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    326c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <twi_init>
	
	/* All interrupt sources prepared here - IRQ activation */
	irq_initialize_vectors();
    3270:	0e 94 43 02 	call	0x486	; 0x486 <board_init>
	cpu_irq_enable();
    3274:	f5 01       	movw	r30, r10
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3276:	02 83       	std	Z+2, r16	; 0x02
    3278:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    327a:	d6 01       	movw	r26, r12
    327c:	8c 91       	ld	r24, X
    327e:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3280:	81 60       	ori	r24, 0x01	; 1
    3282:	8c 93       	st	X, r24
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3284:	f7 01       	movw	r30, r14
    3286:	80 81       	ld	r24, Z
	
	/* Start of sub-modules */
	tc_start();			// All clocks and PWM timers start here
	twi_start();
    3288:	80 7f       	andi	r24, 0xF0	; 240
    328a:	81 60       	ori	r24, 0x01	; 1
}


static void usb_init(void)
{
	udc_start();
    328c:	80 83       	st	Z, r24
    328e:	0e 94 1c 02 	call	0x438	; 0x438 <twi_start>
	twi_start();
	//rtc_start();		// Test for RTC32
	
	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB
	stdio_usb_init();	// stdio_usb
    3292:	14 d6       	rcall	.+3112   	; 0x3ebc <udc_start>
	stdio_usb_enable();
    3294:	0e 94 b2 22 	call	0x4564	; 0x4564 <stdio_usb_init>
	
	/* The application code */
	runmode = (uint8_t) 1;
    3298:	0e 94 ae 22 	call	0x455c	; 0x455c <stdio_usb_enable>
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    329c:	10 93 e1 22 	sts	0x22E1, r17	; 0x8022e1 <runmode>
    32a0:	0f 2e       	mov	r0, r31
    32a2:	f0 e2       	ldi	r31, 0x20	; 32
    32a4:	8f 2e       	mov	r8, r31
    32a6:	f3 e0       	ldi	r31, 0x03	; 3
	task_twi(now, last);
	
	/* DEBUGGING USB */
	uint32_t now_sec = now >> 10;
	if ((last >> 10) != now_sec) {
		printf("FindMeSAT V1 @USB: RTC32 = %06ld sec\r\n", now_sec);
    32a8:	9f 2e       	mov	r9, r31
    32aa:	f0 2d       	mov	r31, r0
    32ac:	0f 2e       	mov	r0, r31
    32ae:	f6 ee       	ldi	r31, 0xE6	; 230
    32b0:	af 2e       	mov	r10, r31
    32b2:	f0 e2       	ldi	r31, 0x20	; 32

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    32b4:	bf 2e       	mov	r11, r31
    32b6:	f0 2d       	mov	r31, r0
    32b8:	0f 2e       	mov	r0, r31
    32ba:	f1 e3       	ldi	r31, 0x31	; 49
    32bc:	2f 2e       	mov	r2, r31
    32be:	f4 e2       	ldi	r31, 0x24	; 36
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    32c0:	3f 2e       	mov	r3, r31
    32c2:	f0 2d       	mov	r31, r0
}

static void task(void)
{
	static uint32_t last = 0;
	uint32_t now = rtc_get_time();
    32c4:	08 e4       	ldi	r16, 0x48	; 72
    32c6:	10 e0       	ldi	r17, 0x00	; 0
    32c8:	0e 94 39 01 	call	0x272	; 0x272 <rtc_get_time>
    32cc:	6b 01       	movw	r12, r22
    32ce:	7c 01       	movw	r14, r24
    32d0:	d4 01       	movw	r26, r8

static void task_dac(void)
{
	static int idx_dacX = 0;
	
	if (dac_channel_is_ready(&DAC_IO_DAC0, DAC_CH0 | DAC_CH1)) {
    32d2:	15 96       	adiw	r26, 0x05	; 5
    32d4:	8c 91       	ld	r24, X
    32d6:	83 70       	andi	r24, 0x03	; 3
		dac_set_channel_value(&DAC_IO_DAC0, DAC_IO_DAC0_CHANNEL, dac_io_dac0_buf[idx_dacX]);
    32d8:	83 30       	cpi	r24, 0x03	; 3
    32da:	b1 f5       	brne	.+108    	; 0x3348 <main+0x42a>
    32dc:	e0 91 d1 22 	lds	r30, 0x22D1	; 0x8022d1 <idx_dacX.6917>
    32e0:	f0 91 d2 22 	lds	r31, 0x22D2	; 0x8022d2 <idx_dacX.6917+0x1>
    32e4:	ee 0f       	add	r30, r30
    32e6:	ff 1f       	adc	r31, r31
    32e8:	e3 5f       	subi	r30, 0xF3	; 243
    32ea:	fe 4d       	sbci	r31, 0xDE	; 222

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    32ec:	20 81       	ld	r18, Z
    32ee:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    32f0:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    32f2:	88 87       	std	Y+8, r24	; 0x08
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    32f4:	f8 94       	cli
    32f6:	88 85       	ldd	r24, Y+8	; 0x08
    32f8:	f4 01       	movw	r30, r8
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    32fa:	20 8f       	std	Z+24, r18	; 0x18
		dac_set_channel_value(&DAC_IO_DAC1, DAC_IO_DAC1_CHANNEL, dac_io_dac1_buf[idx_dacX]);
    32fc:	31 8f       	std	Z+25, r19	; 0x19
    32fe:	8f bf       	out	0x3f, r24	; 63
    3300:	e0 91 d1 22 	lds	r30, 0x22D1	; 0x8022d1 <idx_dacX.6917>
    3304:	f0 91 d2 22 	lds	r31, 0x22D2	; 0x8022d2 <idx_dacX.6917+0x1>
    3308:	ee 0f       	add	r30, r30
    330a:	ff 1f       	adc	r31, r31
    330c:	e3 5f       	subi	r30, 0xF3	; 243
    330e:	fe 4d       	sbci	r31, 0xDE	; 222

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3310:	20 81       	ld	r18, Z
    3312:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    3314:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    3316:	89 83       	std	Y+1, r24	; 0x01
    3318:	f8 94       	cli
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	aa e3       	ldi	r26, 0x3A	; 58
    331e:	b3 e0       	ldi	r27, 0x03	; 3
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3320:	2d 93       	st	X+, r18
		
		idx_dacX++;
		idx_dacX %= DAC_NR_OF_SAMPLES;
    3322:	3c 93       	st	X, r19
    3324:	8f bf       	out	0x3f, r24	; 63
    3326:	80 91 d1 22 	lds	r24, 0x22D1	; 0x8022d1 <idx_dacX.6917>
    332a:	90 91 d2 22 	lds	r25, 0x22D2	; 0x8022d2 <idx_dacX.6917+0x1>
    332e:	01 96       	adiw	r24, 0x01	; 1
    3330:	8f 71       	andi	r24, 0x1F	; 31
    3332:	90 78       	andi	r25, 0x80	; 128
    3334:	99 23       	and	r25, r25
    3336:	24 f4       	brge	.+8      	; 0x3340 <main+0x422>
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	80 6e       	ori	r24, 0xE0	; 224
    333c:	9f 6f       	ori	r25, 0xFF	; 255
    333e:	01 96       	adiw	r24, 0x01	; 1
    3340:	80 93 d1 22 	sts	0x22D1, r24	; 0x8022d1 <idx_dacX.6917>
	
	/* Handling the USB connection */
	task_usb();
	
	/* Handle TWI1 and TWI2 communications */
	task_twi(now, last);
    3344:	90 93 d2 22 	sts	0x22D2, r25	; 0x8022d2 <idx_dacX.6917+0x1>
    3348:	40 90 d3 22 	lds	r4, 0x22D3	; 0x8022d3 <last.6928>
    334c:	50 90 d4 22 	lds	r5, 0x22D4	; 0x8022d4 <last.6928+0x1>
    3350:	60 90 d5 22 	lds	r6, 0x22D5	; 0x8022d5 <last.6928+0x2>
}

static void task_twi(uint32_t now, uint32_t last)
{
	/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
	task_twi_onboard(now, last);
    3354:	70 90 d6 22 	lds	r7, 0x22D6	; 0x8022d6 <last.6928+0x3>
    3358:	a3 01       	movw	r20, r6
    335a:	92 01       	movw	r18, r4
    335c:	c7 01       	movw	r24, r14
    335e:	b6 01       	movw	r22, r12
	
	/* TWI2 - LCD Port */
	task_twi_lcd(now, last);
    3360:	0e 94 41 02 	call	0x482	; 0x482 <task_twi_onboard>
    3364:	a3 01       	movw	r20, r6
    3366:	92 01       	movw	r18, r4
    3368:	c7 01       	movw	r24, r14
    336a:	b6 01       	movw	r22, r12
	
	/* Handle TWI1 and TWI2 communications */
	task_twi(now, last);
	
	/* DEBUGGING USB */
	uint32_t now_sec = now >> 10;
    336c:	0e 94 42 02 	call	0x484	; 0x484 <task_twi_lcd>
    3370:	d7 01       	movw	r26, r14
    3372:	c6 01       	movw	r24, r12
    3374:	07 2e       	mov	r0, r23
    3376:	7a e0       	ldi	r23, 0x0A	; 10
    3378:	b6 95       	lsr	r27
    337a:	a7 95       	ror	r26
    337c:	97 95       	ror	r25
    337e:	87 95       	ror	r24
    3380:	7a 95       	dec	r23
	if ((last >> 10) != now_sec) {
    3382:	d1 f7       	brne	.-12     	; 0x3378 <main+0x45a>
    3384:	70 2d       	mov	r23, r0
    3386:	40 91 d3 22 	lds	r20, 0x22D3	; 0x8022d3 <last.6928>
    338a:	50 91 d4 22 	lds	r21, 0x22D4	; 0x8022d4 <last.6928+0x1>
    338e:	60 91 d5 22 	lds	r22, 0x22D5	; 0x8022d5 <last.6928+0x2>
    3392:	70 91 d6 22 	lds	r23, 0x22D6	; 0x8022d6 <last.6928+0x3>
    3396:	03 2e       	mov	r0, r19
    3398:	3a e0       	ldi	r19, 0x0A	; 10
    339a:	76 95       	lsr	r23
    339c:	67 95       	ror	r22
    339e:	57 95       	ror	r21
    33a0:	47 95       	ror	r20
    33a2:	3a 95       	dec	r19
    33a4:	d1 f7       	brne	.-12     	; 0x339a <main+0x47c>
    33a6:	30 2d       	mov	r19, r0
    33a8:	84 17       	cp	r24, r20
    33aa:	95 07       	cpc	r25, r21
    33ac:	a6 07       	cpc	r26, r22
		printf("FindMeSAT V1 @USB: RTC32 = %06ld sec\r\n", now_sec);
    33ae:	b7 07       	cpc	r27, r23
    33b0:	71 f0       	breq	.+28     	; 0x33ce <main+0x4b0>
    33b2:	bf 93       	push	r27
    33b4:	af 93       	push	r26
    33b6:	9f 93       	push	r25
    33b8:	8f 93       	push	r24
    33ba:	bf 92       	push	r11
    33bc:	af 92       	push	r10
    33be:	0e 94 8b 23 	call	0x4716	; 0x4716 <printf>
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
	}
	
	last = now;
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	c0 92 d3 22 	sts	0x22D3, r12	; 0x8022d3 <last.6928>
    33d2:	d0 92 d4 22 	sts	0x22D4, r13	; 0x8022d4 <last.6928+0x1>
    33d6:	e0 92 d5 22 	sts	0x22D5, r14	; 0x8022d5 <last.6928+0x2>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    33da:	f0 92 d6 22 	sts	0x22D6, r15	; 0x8022d6 <last.6928+0x3>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    33de:	f8 94       	cli
    33e0:	f1 01       	movw	r30, r2
    33e2:	80 81       	ld	r24, Z
    33e4:	81 11       	cpse	r24, r1
    33e6:	09 c0       	rjmp	.+18     	; 0x33fa <main+0x4dc>
    33e8:	a2 e3       	ldi	r26, 0x32	; 50
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    33ea:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    33ec:	e0 e0       	ldi	r30, 0x00	; 0
    33ee:	ef 5f       	subi	r30, 0xFF	; 255
    33f0:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    33f2:	88 23       	and	r24, r24
    33f4:	e1 f3       	breq	.-8      	; 0x33ee <main+0x4d0>
		cpu_irq_enable();
    33f6:	e1 11       	cpse	r30, r1
    33f8:	02 c0       	rjmp	.+4      	; 0x33fe <main+0x4e0>
    33fa:	78 94       	sei
    33fc:	12 c0       	rjmp	.+36     	; 0x3422 <main+0x504>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    33fe:	d8 01       	movw	r26, r16
    3400:	8c 91       	ld	r24, X
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	ee 5d       	subi	r30, 0xDE	; 222
    3406:	ff 4d       	sbci	r31, 0xDF	; 223
    3408:	81 7f       	andi	r24, 0xF1	; 241
    340a:	90 81       	ld	r25, Z
	sleep_enable();
    340c:	89 2b       	or	r24, r25
    340e:	8c 93       	st	X, r24
    3410:	8c 91       	ld	r24, X

	cpu_irq_enable();
    3412:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    3414:	8c 93       	st	X, r24

	sleep_disable();
    3416:	78 94       	sei
    3418:	88 95       	sleep
    341a:	f8 01       	movw	r30, r16
    341c:	80 81       	ld	r24, Z
	stdio_usb_init();	// stdio_usb
	stdio_usb_enable();
	
	/* The application code */
	runmode = (uint8_t) 1;
    while (runmode) {
    341e:	8e 7f       	andi	r24, 0xFE	; 254
    3420:	80 83       	st	Z, r24
    3422:	80 91 e1 22 	lds	r24, 0x22E1	; 0x8022e1 <runmode>
		task();
		sleepmgr_enter_sleep();
    }
	
	cpu_irq_disable();
    3426:	81 11       	cpse	r24, r1
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    3428:	4f cf       	rjmp	.-354    	; 0x32c8 <main+0x3aa>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    342a:	f8 94       	cli
    342c:	f8 94       	cli
    342e:	80 91 31 24 	lds	r24, 0x2431	; 0x802431 <sleepmgr_locks>
    3432:	81 11       	cpse	r24, r1
    3434:	09 c0       	rjmp	.+18     	; 0x3448 <main+0x52a>
    3436:	a2 e3       	ldi	r26, 0x32	; 50
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3438:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    343a:	e0 e0       	ldi	r30, 0x00	; 0
    343c:	ef 5f       	subi	r30, 0xFF	; 255
    343e:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3440:	88 23       	and	r24, r24
    3442:	e1 f3       	breq	.-8      	; 0x343c <main+0x51e>
		cpu_irq_enable();
    3444:	e1 11       	cpse	r30, r1
    3446:	02 c0       	rjmp	.+4      	; 0x344c <main+0x52e>
    3448:	78 94       	sei
    344a:	13 c0       	rjmp	.+38     	; 0x3472 <main+0x554>
    344c:	a8 e4       	ldi	r26, 0x48	; 72

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    344e:	b0 e0       	ldi	r27, 0x00	; 0
    3450:	8c 91       	ld	r24, X
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	ee 5d       	subi	r30, 0xDE	; 222
    3456:	ff 4d       	sbci	r31, 0xDF	; 223
    3458:	98 2f       	mov	r25, r24
    345a:	91 7f       	andi	r25, 0xF1	; 241
    345c:	80 81       	ld	r24, Z
	sleep_enable();
    345e:	89 2b       	or	r24, r25
    3460:	8c 93       	st	X, r24
    3462:	8c 91       	ld	r24, X

	cpu_irq_enable();
    3464:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    3466:	8c 93       	st	X, r24

	sleep_disable();
    3468:	78 94       	sei
    346a:	88 95       	sleep
    346c:	8c 91       	ld	r24, X
	sleepmgr_enter_sleep();
	
	return retcode;
}
    346e:	8e 7f       	andi	r24, 0xFE	; 254
    3470:	8c 93       	st	X, r24
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	ce 5b       	subi	r28, 0xBE	; 190
    3478:	df 4f       	sbci	r29, 0xFF	; 255
    347a:	cd bf       	out	0x3d, r28	; 61
    347c:	de bf       	out	0x3e, r29	; 62
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	df 90       	pop	r13
    348c:	cf 90       	pop	r12
    348e:	bf 90       	pop	r11
    3490:	af 90       	pop	r10
    3492:	9f 90       	pop	r9
    3494:	8f 90       	pop	r8
    3496:	7f 90       	pop	r7
    3498:	6f 90       	pop	r6
    349a:	5f 90       	pop	r5
    349c:	4f 90       	pop	r4
    349e:	3f 90       	pop	r3
    34a0:	2f 90       	pop	r2
    34a2:	08 95       	ret

000034a4 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    34a4:	cf 93       	push	r28
    34a6:	df 93       	push	r29
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
    34ac:	28 97       	sbiw	r28, 0x08	; 8
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    34b2:	8f ef       	ldi	r24, 0xFF	; 255
    34b4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    34b8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    34bc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    34c0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    34c4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    34c8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    34cc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    34d0:	61 e0       	ldi	r22, 0x01	; 1
    34d2:	81 e4       	ldi	r24, 0x41	; 65
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	0e 94 e5 22 	call	0x45ca	; 0x45ca <ccp_write_io>
    34da:	6c e1       	ldi	r22, 0x1C	; 28
    34dc:	70 e0       	ldi	r23, 0x00	; 0
    34de:	82 e0       	ldi	r24, 0x02	; 2
    34e0:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    34e4:	8a 83       	std	Y+2, r24	; 0x02
    34e6:	6d e1       	ldi	r22, 0x1D	; 29
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	82 e0       	ldi	r24, 0x02	; 2
    34ec:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    34f0:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	9a 81       	ldd	r25, Y+2	; 0x02
    34f6:	01 96       	adiw	r24, 0x01	; 1
    34f8:	21 f4       	brne	.+8      	; 0x3502 <sysclk_init+0x5e>
		cal = 0x2340;
    34fa:	80 e4       	ldi	r24, 0x40	; 64
    34fc:	93 e2       	ldi	r25, 0x23	; 35
    34fe:	89 83       	std	Y+1, r24	; 0x01
    3500:	9a 83       	std	Y+2, r25	; 0x02
    3502:	89 81       	ldd	r24, Y+1	; 0x01
    3504:	9a 81       	ldd	r25, Y+2	; 0x02
    3506:	8b 83       	std	Y+3, r24	; 0x03
    3508:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    350a:	e0 e6       	ldi	r30, 0x60	; 96
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    3510:	8c 81       	ldd	r24, Y+4	; 0x04
    3512:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    3514:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    3518:	84 fd       	sbrc	r24, 4
    351a:	21 c0       	rjmp	.+66     	; 0x355e <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    351c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    3520:	83 fd       	sbrc	r24, 3
    3522:	0e c0       	rjmp	.+28     	; 0x3540 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    3524:	e0 e5       	ldi	r30, 0x50	; 80
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    352a:	8f b7       	in	r24, 0x3f	; 63
    352c:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    352e:	f8 94       	cli
	return flags;
    3530:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3532:	80 81       	ld	r24, Z
    3534:	88 60       	ori	r24, 0x08	; 8
    3536:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3538:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    353a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    353c:	83 ff       	sbrs	r24, 3
    353e:	fd cf       	rjmp	.-6      	; 0x353a <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3540:	8f b7       	in	r24, 0x3f	; 63
    3542:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    3544:	f8 94       	cli
	return flags;
    3546:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    3548:	e0 e5       	ldi	r30, 0x50	; 80
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	83 ec       	ldi	r24, 0xC3	; 195
    354e:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    3550:	80 81       	ld	r24, Z
    3552:	80 61       	ori	r24, 0x10	; 16
    3554:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3556:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    3558:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    355a:	84 ff       	sbrs	r24, 4
    355c:	fd cf       	rjmp	.-6      	; 0x3558 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    355e:	64 e0       	ldi	r22, 0x04	; 4
    3560:	80 e4       	ldi	r24, 0x40	; 64
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	0e 94 e5 22 	call	0x45ca	; 0x45ca <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3568:	8f b7       	in	r24, 0x3f	; 63
    356a:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    356c:	f8 94       	cli
	return flags;
    356e:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    3570:	e0 e5       	ldi	r30, 0x50	; 80
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	80 81       	ld	r24, Z
    3576:	8e 7f       	andi	r24, 0xFE	; 254
    3578:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    357a:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    357c:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    357e:	8f b7       	in	r24, 0x3f	; 63
    3580:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    3582:	f8 94       	cli
	return flags;
    3584:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3586:	80 81       	ld	r24, Z
    3588:	88 60       	ori	r24, 0x08	; 8
    358a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    358c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    358e:	81 81       	ldd	r24, Z+1	; 0x01
    3590:	83 ff       	sbrs	r24, 3
    3592:	fd cf       	rjmp	.-6      	; 0x358e <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    3594:	8b e0       	ldi	r24, 0x0B	; 11
    3596:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    359a:	28 96       	adiw	r28, 0x08	; 8
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	df 91       	pop	r29
    35a2:	cf 91       	pop	r28
    35a4:	08 95       	ret

000035a6 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
    35aa:	1f 92       	push	r1
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    35b0:	9f b7       	in	r25, 0x3f	; 63
    35b2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    35b4:	f8 94       	cli
	return flags;
    35b6:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    35b8:	e8 2f       	mov	r30, r24
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	e0 59       	subi	r30, 0x90	; 144
    35be:	ff 4f       	sbci	r31, 0xFF	; 255
    35c0:	60 95       	com	r22
    35c2:	80 81       	ld	r24, Z
    35c4:	68 23       	and	r22, r24
    35c6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35c8:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    35ca:	0f 90       	pop	r0
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	08 95       	ret

000035d2 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    35d2:	cf 93       	push	r28
    35d4:	df 93       	push	r29
    35d6:	1f 92       	push	r1
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    35dc:	9f b7       	in	r25, 0x3f	; 63
    35de:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    35e0:	f8 94       	cli
	return flags;
    35e2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    35e4:	e8 2f       	mov	r30, r24
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	e0 59       	subi	r30, 0x90	; 144
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	80 81       	ld	r24, Z
    35ee:	68 2b       	or	r22, r24
    35f0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35f2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    35f4:	0f 90       	pop	r0
    35f6:	df 91       	pop	r29
    35f8:	cf 91       	pop	r28
    35fa:	08 95       	ret

000035fc <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    35fc:	cf 93       	push	r28
    35fe:	df 93       	push	r29
    3600:	1f 92       	push	r1
    3602:	1f 92       	push	r1
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    3608:	86 30       	cpi	r24, 0x06	; 6
    360a:	11 f0       	breq	.+4      	; 0x3610 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    360c:	60 e0       	ldi	r22, 0x00	; 0
    360e:	01 c0       	rjmp	.+2      	; 0x3612 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    3610:	68 e1       	ldi	r22, 0x18	; 24
    3612:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    3616:	81 fd       	sbrc	r24, 1
    3618:	2a c0       	rjmp	.+84     	; 0x366e <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    361a:	8f b7       	in	r24, 0x3f	; 63
    361c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    361e:	f8 94       	cli
	return flags;
    3620:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3622:	e0 e5       	ldi	r30, 0x50	; 80
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	82 60       	ori	r24, 0x02	; 2
    362a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    362c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    362e:	81 81       	ldd	r24, Z+1	; 0x01
    3630:	81 ff       	sbrs	r24, 1
    3632:	fd cf       	rjmp	.-6      	; 0x362e <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3634:	8f b7       	in	r24, 0x3f	; 63
    3636:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3638:	f8 94       	cli
	return flags;
    363a:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    363c:	a0 e5       	ldi	r26, 0x50	; 80
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	16 96       	adiw	r26, 0x06	; 6
    3642:	8c 91       	ld	r24, X
    3644:	16 97       	sbiw	r26, 0x06	; 6
    3646:	89 7f       	andi	r24, 0xF9	; 249
    3648:	16 96       	adiw	r26, 0x06	; 6
    364a:	8c 93       	st	X, r24
    364c:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    364e:	e0 e6       	ldi	r30, 0x60	; 96
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 e8       	ldi	r24, 0x80	; 128
    3654:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    3656:	8b eb       	ldi	r24, 0xBB	; 187
    3658:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    365a:	16 96       	adiw	r26, 0x06	; 6
    365c:	8c 91       	ld	r24, X
    365e:	16 97       	sbiw	r26, 0x06	; 6
    3660:	84 60       	ori	r24, 0x04	; 4
    3662:	16 96       	adiw	r26, 0x06	; 6
    3664:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    3666:	80 81       	ld	r24, Z
    3668:	81 60       	ori	r24, 0x01	; 1
    366a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    366c:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    366e:	63 60       	ori	r22, 0x03	; 3
    3670:	84 e4       	ldi	r24, 0x44	; 68
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	aa d7       	rcall	.+3924   	; 0x45ca <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    3676:	60 e4       	ldi	r22, 0x40	; 64
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	95 df       	rcall	.-214    	; 0x35a6 <sysclk_enable_module>
}
    367c:	0f 90       	pop	r0
    367e:	0f 90       	pop	r0
    3680:	df 91       	pop	r29
    3682:	cf 91       	pop	r28
    3684:	08 95       	ret

00003686 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    3686:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udi_cdc_nb_comm_enabled>
    368a:	81 50       	subi	r24, 0x01	; 1
    368c:	80 93 f8 23 	sts	0x23F8, r24	; 0x8023f8 <udi_cdc_nb_comm_enabled>
    3690:	08 95       	ret

00003692 <udi_cdc_data_setup>:
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	08 95       	ret

00003696 <udi_cdc_getsetting>:
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	08 95       	ret

0000369a <udi_cdc_line_coding_received>:
    369a:	66 e0       	ldi	r22, 0x06	; 6
    369c:	74 e2       	ldi	r23, 0x24	; 36
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	39 cc       	rjmp	.-1934   	; 0x2f14 <usb_callback_config>
    36a2:	08 95       	ret

000036a4 <udi_cdc_comm_enable>:
    36a4:	10 92 f8 23 	sts	0x23F8, r1	; 0x8023f8 <udi_cdc_nb_comm_enabled>
    36a8:	10 92 04 24 	sts	0x2404, r1	; 0x802404 <udi_cdc_state>
    36ac:	10 92 05 24 	sts	0x2405, r1	; 0x802405 <udi_cdc_state+0x1>
    36b0:	ea ef       	ldi	r30, 0xFA	; 250
    36b2:	f3 e2       	ldi	r31, 0x23	; 35
    36b4:	81 ea       	ldi	r24, 0xA1	; 161
    36b6:	80 83       	st	Z, r24
    36b8:	80 e2       	ldi	r24, 0x20	; 32
    36ba:	81 83       	std	Z+1, r24	; 0x01
    36bc:	12 82       	std	Z+2, r1	; 0x02
    36be:	13 82       	std	Z+3, r1	; 0x03
    36c0:	14 82       	std	Z+4, r1	; 0x04
    36c2:	15 82       	std	Z+5, r1	; 0x05
    36c4:	82 e0       	ldi	r24, 0x02	; 2
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	86 83       	std	Z+6, r24	; 0x06
    36ca:	97 83       	std	Z+7, r25	; 0x07
    36cc:	10 86       	std	Z+8, r1	; 0x08
    36ce:	11 86       	std	Z+9, r1	; 0x09
    36d0:	e6 e0       	ldi	r30, 0x06	; 6
    36d2:	f4 e2       	ldi	r31, 0x24	; 36
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	92 ec       	ldi	r25, 0xC2	; 194
    36d8:	a1 e0       	ldi	r26, 0x01	; 1
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	80 83       	st	Z, r24
    36de:	91 83       	std	Z+1, r25	; 0x01
    36e0:	a2 83       	std	Z+2, r26	; 0x02
    36e2:	b3 83       	std	Z+3, r27	; 0x03
    36e4:	14 82       	std	Z+4, r1	; 0x04
    36e6:	15 82       	std	Z+5, r1	; 0x05
    36e8:	88 e0       	ldi	r24, 0x08	; 8
    36ea:	86 83       	std	Z+6, r24	; 0x06
    36ec:	bf 01       	movw	r22, r30
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	11 dc       	rcall	.-2014   	; 0x2f14 <usb_callback_config>
    36f2:	09 dc       	rcall	.-2030   	; 0x2f06 <usb_callback_cdc_enable>
    36f4:	88 23       	and	r24, r24
    36f6:	29 f0       	breq	.+10     	; 0x3702 <udi_cdc_comm_enable+0x5e>
    36f8:	90 91 f8 23 	lds	r25, 0x23F8	; 0x8023f8 <udi_cdc_nb_comm_enabled>
    36fc:	9f 5f       	subi	r25, 0xFF	; 255
    36fe:	90 93 f8 23 	sts	0x23F8, r25	; 0x8023f8 <udi_cdc_nb_comm_enabled>
    3702:	08 95       	ret

00003704 <udi_cdc_tx_send>:
    3704:	ff 92       	push	r15
    3706:	0f 93       	push	r16
    3708:	1f 93       	push	r17
    370a:	cf 93       	push	r28
    370c:	df 93       	push	r29
    370e:	1f 92       	push	r1
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <udi_cdc_tx_trans_ongoing>
    3718:	81 11       	cpse	r24, r1
    371a:	9f c0       	rjmp	.+318    	; 0x385a <udi_cdc_tx_send+0x156>
    371c:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_is_high_speed>
    3720:	88 23       	and	r24, r24
    3722:	51 f0       	breq	.+20     	; 0x3738 <udi_cdc_tx_send+0x34>
    3724:	00 91 e6 22 	lds	r16, 0x22E6	; 0x8022e6 <udi_cdc_tx_sof_num>
    3728:	10 91 e7 22 	lds	r17, 0x22E7	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    372c:	0e 94 0e 12 	call	0x241c	; 0x241c <udd_get_micro_frame_number>
    3730:	08 17       	cp	r16, r24
    3732:	19 07       	cpc	r17, r25
    3734:	59 f4       	brne	.+22     	; 0x374c <udi_cdc_tx_send+0x48>
    3736:	91 c0       	rjmp	.+290    	; 0x385a <udi_cdc_tx_send+0x156>
    3738:	00 91 e6 22 	lds	r16, 0x22E6	; 0x8022e6 <udi_cdc_tx_sof_num>
    373c:	10 91 e7 22 	lds	r17, 0x22E7	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    3740:	0e 94 09 12 	call	0x2412	; 0x2412 <udd_get_frame_number>
    3744:	08 17       	cp	r16, r24
    3746:	19 07       	cpc	r17, r25
    3748:	09 f4       	brne	.+2      	; 0x374c <udi_cdc_tx_send+0x48>
    374a:	87 c0       	rjmp	.+270    	; 0x385a <udi_cdc_tx_send+0x156>
    374c:	8f b7       	in	r24, 0x3f	; 63
    374e:	89 83       	std	Y+1, r24	; 0x01
    3750:	f8 94       	cli
    3752:	19 81       	ldd	r17, Y+1	; 0x01
    3754:	00 91 e8 22 	lds	r16, 0x22E8	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3758:	e0 2f       	mov	r30, r16
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	ee 0f       	add	r30, r30
    375e:	ff 1f       	adc	r31, r31
    3760:	e7 51       	subi	r30, 0x17	; 23
    3762:	fd 4d       	sbci	r31, 0xDD	; 221
    3764:	80 81       	ld	r24, Z
    3766:	91 81       	ldd	r25, Z+1	; 0x01
    3768:	89 2b       	or	r24, r25
    376a:	09 f5       	brne	.+66     	; 0x37ae <udi_cdc_tx_send+0xaa>
    376c:	80 91 e2 22 	lds	r24, 0x22E2	; 0x8022e2 <sof_zlp_counter.5059>
    3770:	90 91 e3 22 	lds	r25, 0x22E3	; 0x8022e3 <sof_zlp_counter.5059+0x1>
    3774:	01 96       	adiw	r24, 0x01	; 1
    3776:	80 93 e2 22 	sts	0x22E2, r24	; 0x8022e2 <sof_zlp_counter.5059>
    377a:	90 93 e3 22 	sts	0x22E3, r25	; 0x8022e3 <sof_zlp_counter.5059+0x1>
    377e:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_is_high_speed>
    3782:	81 11       	cpse	r24, r1
    3784:	07 c0       	rjmp	.+14     	; 0x3794 <udi_cdc_tx_send+0x90>
    3786:	80 91 e2 22 	lds	r24, 0x22E2	; 0x8022e2 <sof_zlp_counter.5059>
    378a:	90 91 e3 22 	lds	r25, 0x22E3	; 0x8022e3 <sof_zlp_counter.5059+0x1>
    378e:	84 36       	cpi	r24, 0x64	; 100
    3790:	91 05       	cpc	r25, r1
    3792:	58 f0       	brcs	.+22     	; 0x37aa <udi_cdc_tx_send+0xa6>
    3794:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_is_high_speed>
    3798:	88 23       	and	r24, r24
    379a:	49 f0       	breq	.+18     	; 0x37ae <udi_cdc_tx_send+0xaa>
    379c:	80 91 e2 22 	lds	r24, 0x22E2	; 0x8022e2 <sof_zlp_counter.5059>
    37a0:	90 91 e3 22 	lds	r25, 0x22E3	; 0x8022e3 <sof_zlp_counter.5059+0x1>
    37a4:	80 32       	cpi	r24, 0x20	; 32
    37a6:	93 40       	sbci	r25, 0x03	; 3
    37a8:	10 f4       	brcc	.+4      	; 0x37ae <udi_cdc_tx_send+0xaa>
    37aa:	1f bf       	out	0x3f, r17	; 63
    37ac:	56 c0       	rjmp	.+172    	; 0x385a <udi_cdc_tx_send+0x156>
    37ae:	10 92 e2 22 	sts	0x22E2, r1	; 0x8022e2 <sof_zlp_counter.5059>
    37b2:	10 92 e3 22 	sts	0x22E3, r1	; 0x8022e3 <sof_zlp_counter.5059+0x1>
    37b6:	80 91 e4 22 	lds	r24, 0x22E4	; 0x8022e4 <udi_cdc_tx_both_buf_to_send>
    37ba:	81 11       	cpse	r24, r1
    37bc:	06 c0       	rjmp	.+12     	; 0x37ca <udi_cdc_tx_send+0xc6>
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	01 11       	cpse	r16, r1
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	80 93 e8 22 	sts	0x22E8, r24	; 0x8022e8 <udi_cdc_tx_buf_sel>
    37c8:	04 c0       	rjmp	.+8      	; 0x37d2 <udi_cdc_tx_send+0xce>
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	01 11       	cpse	r16, r1
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	08 2f       	mov	r16, r24
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	80 93 e5 22 	sts	0x22E5, r24	; 0x8022e5 <udi_cdc_tx_trans_ongoing>
    37d8:	1f bf       	out	0x3f, r17	; 63
    37da:	10 e0       	ldi	r17, 0x00	; 0
    37dc:	f8 01       	movw	r30, r16
    37de:	ee 0f       	add	r30, r30
    37e0:	ff 1f       	adc	r31, r31
    37e2:	e7 51       	subi	r30, 0x17	; 23
    37e4:	fd 4d       	sbci	r31, 0xDD	; 221
    37e6:	80 81       	ld	r24, Z
    37e8:	91 81       	ldd	r25, Z+1	; 0x01
    37ea:	ff 24       	eor	r15, r15
    37ec:	f3 94       	inc	r15
    37ee:	80 34       	cpi	r24, 0x40	; 64
    37f0:	91 05       	cpc	r25, r1
    37f2:	09 f4       	brne	.+2      	; 0x37f6 <udi_cdc_tx_send+0xf2>
    37f4:	f1 2c       	mov	r15, r1
    37f6:	80 34       	cpi	r24, 0x40	; 64
    37f8:	91 05       	cpc	r25, r1
    37fa:	91 f0       	breq	.+36     	; 0x3820 <udi_cdc_tx_send+0x11c>
    37fc:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_is_high_speed>
    3800:	88 23       	and	r24, r24
    3802:	39 f0       	breq	.+14     	; 0x3812 <udi_cdc_tx_send+0x10e>
    3804:	0e 94 0e 12 	call	0x241c	; 0x241c <udd_get_micro_frame_number>
    3808:	80 93 e6 22 	sts	0x22E6, r24	; 0x8022e6 <udi_cdc_tx_sof_num>
    380c:	90 93 e7 22 	sts	0x22E7, r25	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    3810:	0b c0       	rjmp	.+22     	; 0x3828 <udi_cdc_tx_send+0x124>
    3812:	0e 94 09 12 	call	0x2412	; 0x2412 <udd_get_frame_number>
    3816:	80 93 e6 22 	sts	0x22E6, r24	; 0x8022e6 <udi_cdc_tx_sof_num>
    381a:	90 93 e7 22 	sts	0x22E7, r25	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    381e:	04 c0       	rjmp	.+8      	; 0x3828 <udi_cdc_tx_send+0x124>
    3820:	10 92 e6 22 	sts	0x22E6, r1	; 0x8022e6 <udi_cdc_tx_sof_num>
    3824:	10 92 e7 22 	sts	0x22E7, r1	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    3828:	f8 01       	movw	r30, r16
    382a:	ee 0f       	add	r30, r30
    382c:	ff 1f       	adc	r31, r31
    382e:	e7 51       	subi	r30, 0x17	; 23
    3830:	fd 4d       	sbci	r31, 0xDD	; 221
    3832:	20 81       	ld	r18, Z
    3834:	31 81       	ldd	r19, Z+1	; 0x01
    3836:	a8 01       	movw	r20, r16
    3838:	00 24       	eor	r0, r0
    383a:	56 95       	lsr	r21
    383c:	47 95       	ror	r20
    383e:	07 94       	ror	r0
    3840:	56 95       	lsr	r21
    3842:	47 95       	ror	r20
    3844:	07 94       	ror	r0
    3846:	54 2f       	mov	r21, r20
    3848:	40 2d       	mov	r20, r0
    384a:	42 51       	subi	r20, 0x12	; 18
    384c:	5d 4d       	sbci	r21, 0xDD	; 221
    384e:	07 e3       	ldi	r16, 0x37	; 55
    3850:	1c e1       	ldi	r17, 0x1C	; 28
    3852:	6f 2d       	mov	r22, r15
    3854:	81 e8       	ldi	r24, 0x81	; 129
    3856:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <udd_ep_run>
    385a:	0f 90       	pop	r0
    385c:	df 91       	pop	r29
    385e:	cf 91       	pop	r28
    3860:	1f 91       	pop	r17
    3862:	0f 91       	pop	r16
    3864:	ff 90       	pop	r15
    3866:	08 95       	ret

00003868 <udi_cdc_data_sof_notify>:
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	4c cf       	rjmp	.-360    	; 0x3704 <udi_cdc_tx_send>
    386c:	08 95       	ret

0000386e <udi_cdc_data_sent>:
    386e:	81 11       	cpse	r24, r1
    3870:	19 c0       	rjmp	.+50     	; 0x38a4 <udi_cdc_data_sent+0x36>
    3872:	20 91 e8 22 	lds	r18, 0x22E8	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	22 23       	and	r18, r18
    387c:	11 f0       	breq	.+4      	; 0x3882 <udi_cdc_data_sent+0x14>
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	88 0f       	add	r24, r24
    3884:	99 1f       	adc	r25, r25
    3886:	fc 01       	movw	r30, r24
    3888:	e7 51       	subi	r30, 0x17	; 23
    388a:	fd 4d       	sbci	r31, 0xDD	; 221
    388c:	10 82       	st	Z, r1
    388e:	11 82       	std	Z+1, r1	; 0x01
    3890:	10 92 e4 22 	sts	0x22E4, r1	; 0x8022e4 <udi_cdc_tx_both_buf_to_send>
    3894:	10 92 e5 22 	sts	0x22E5, r1	; 0x8022e5 <udi_cdc_tx_trans_ongoing>
    3898:	67 2b       	or	r22, r23
    389a:	11 f0       	breq	.+4      	; 0x38a0 <udi_cdc_data_sent+0x32>
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	3e db       	rcall	.-2436   	; 0x2f1c <usb_callback_tx_empty_notify>
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	30 cf       	rjmp	.-416    	; 0x3704 <udi_cdc_tx_send>
    38a4:	08 95       	ret

000038a6 <udi_cdc_data_disable>:
    38a6:	80 91 f7 23 	lds	r24, 0x23F7	; 0x8023f7 <udi_cdc_nb_data_enabled>
    38aa:	81 50       	subi	r24, 0x01	; 1
    38ac:	80 93 f7 23 	sts	0x23F7, r24	; 0x8023f7 <udi_cdc_nb_data_enabled>
    38b0:	80 91 f7 23 	lds	r24, 0x23F7	; 0x8023f7 <udi_cdc_nb_data_enabled>
    38b4:	2c db       	rcall	.-2472   	; 0x2f0e <usb_callback_cdc_disable>
    38b6:	10 92 f6 23 	sts	0x23F6, r1	; 0x8023f6 <udi_cdc_data_running>
    38ba:	08 95       	ret

000038bc <udi_cdc_comm_setup>:
    38bc:	cf 93       	push	r28
    38be:	df 93       	push	r29
    38c0:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq>
    38c4:	88 23       	and	r24, r24
    38c6:	e4 f4       	brge	.+56     	; 0x3900 <udi_cdc_comm_setup+0x44>
    38c8:	80 76       	andi	r24, 0x60	; 96
    38ca:	80 32       	cpi	r24, 0x20	; 32
    38cc:	09 f0       	breq	.+2      	; 0x38d0 <udi_cdc_comm_setup+0x14>
    38ce:	47 c0       	rjmp	.+142    	; 0x395e <udi_cdc_comm_setup+0xa2>
    38d0:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    38d4:	81 32       	cpi	r24, 0x21	; 33
    38d6:	09 f0       	breq	.+2      	; 0x38da <udi_cdc_comm_setup+0x1e>
    38d8:	44 c0       	rjmp	.+136    	; 0x3962 <udi_cdc_comm_setup+0xa6>
    38da:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    38de:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    38e2:	07 97       	sbiw	r24, 0x07	; 7
    38e4:	09 f0       	breq	.+2      	; 0x38e8 <udi_cdc_comm_setup+0x2c>
    38e6:	3f c0       	rjmp	.+126    	; 0x3966 <udi_cdc_comm_setup+0xaa>
    38e8:	e1 e2       	ldi	r30, 0x21	; 33
    38ea:	f4 e2       	ldi	r31, 0x24	; 36
    38ec:	86 e0       	ldi	r24, 0x06	; 6
    38ee:	94 e2       	ldi	r25, 0x24	; 36
    38f0:	80 87       	std	Z+8, r24	; 0x08
    38f2:	91 87       	std	Z+9, r25	; 0x09
    38f4:	87 e0       	ldi	r24, 0x07	; 7
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	82 87       	std	Z+10, r24	; 0x0a
    38fa:	93 87       	std	Z+11, r25	; 0x0b
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	3a c0       	rjmp	.+116    	; 0x3974 <udi_cdc_comm_setup+0xb8>
    3900:	80 76       	andi	r24, 0x60	; 96
    3902:	80 32       	cpi	r24, 0x20	; 32
    3904:	91 f5       	brne	.+100    	; 0x396a <udi_cdc_comm_setup+0xae>
    3906:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    390a:	80 32       	cpi	r24, 0x20	; 32
    390c:	19 f0       	breq	.+6      	; 0x3914 <udi_cdc_comm_setup+0x58>
    390e:	82 32       	cpi	r24, 0x22	; 34
    3910:	b9 f0       	breq	.+46     	; 0x3940 <udi_cdc_comm_setup+0x84>
    3912:	2d c0       	rjmp	.+90     	; 0x396e <udi_cdc_comm_setup+0xb2>
    3914:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    3918:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    391c:	07 97       	sbiw	r24, 0x07	; 7
    391e:	49 f5       	brne	.+82     	; 0x3972 <udi_cdc_comm_setup+0xb6>
    3920:	e1 e2       	ldi	r30, 0x21	; 33
    3922:	f4 e2       	ldi	r31, 0x24	; 36
    3924:	8d e4       	ldi	r24, 0x4D	; 77
    3926:	9b e1       	ldi	r25, 0x1B	; 27
    3928:	84 87       	std	Z+12, r24	; 0x0c
    392a:	95 87       	std	Z+13, r25	; 0x0d
    392c:	86 e0       	ldi	r24, 0x06	; 6
    392e:	94 e2       	ldi	r25, 0x24	; 36
    3930:	80 87       	std	Z+8, r24	; 0x08
    3932:	91 87       	std	Z+9, r25	; 0x09
    3934:	87 e0       	ldi	r24, 0x07	; 7
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	82 87       	std	Z+10, r24	; 0x0a
    393a:	93 87       	std	Z+11, r25	; 0x0b
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	1a c0       	rjmp	.+52     	; 0x3974 <udi_cdc_comm_setup+0xb8>
    3940:	c1 e2       	ldi	r28, 0x21	; 33
    3942:	d4 e2       	ldi	r29, 0x24	; 36
    3944:	6a 81       	ldd	r22, Y+2	; 0x02
    3946:	61 70       	andi	r22, 0x01	; 1
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	e5 da       	rcall	.-2614   	; 0x2f16 <usb_callback_cdc_set_dtr>
    394c:	6a 81       	ldd	r22, Y+2	; 0x02
    394e:	7b 81       	ldd	r23, Y+3	; 0x03
    3950:	76 95       	lsr	r23
    3952:	67 95       	ror	r22
    3954:	61 70       	andi	r22, 0x01	; 1
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	df da       	rcall	.-2626   	; 0x2f18 <usb_callback_cdc_set_rts>
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	0b c0       	rjmp	.+22     	; 0x3974 <udi_cdc_comm_setup+0xb8>
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	09 c0       	rjmp	.+18     	; 0x3974 <udi_cdc_comm_setup+0xb8>
    3962:	80 e0       	ldi	r24, 0x00	; 0
    3964:	07 c0       	rjmp	.+14     	; 0x3974 <udi_cdc_comm_setup+0xb8>
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	05 c0       	rjmp	.+10     	; 0x3974 <udi_cdc_comm_setup+0xb8>
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	03 c0       	rjmp	.+6      	; 0x3974 <udi_cdc_comm_setup+0xb8>
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	01 c0       	rjmp	.+2      	; 0x3974 <udi_cdc_comm_setup+0xb8>
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	df 91       	pop	r29
    3976:	cf 91       	pop	r28
    3978:	08 95       	ret

0000397a <udi_cdc_multi_get_nb_received_data>:
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	1f 92       	push	r1
    3980:	cd b7       	in	r28, 0x3d	; 61
    3982:	de b7       	in	r29, 0x3e	; 62
    3984:	8f b7       	in	r24, 0x3f	; 63
    3986:	89 83       	std	Y+1, r24	; 0x01
    3988:	f8 94       	cli
    398a:	49 81       	ldd	r20, Y+1	; 0x01
    398c:	20 91 6f 23 	lds	r18, 0x236F	; 0x80236f <udi_cdc_rx_pos>
    3990:	30 91 70 23 	lds	r19, 0x2370	; 0x802370 <udi_cdc_rx_pos+0x1>
    3994:	e0 91 71 23 	lds	r30, 0x2371	; 0x802371 <udi_cdc_rx_buf_sel>
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	ee 0f       	add	r30, r30
    399c:	ff 1f       	adc	r31, r31
    399e:	ee 58       	subi	r30, 0x8E	; 142
    39a0:	fc 4d       	sbci	r31, 0xDC	; 220
    39a2:	80 81       	ld	r24, Z
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
    39a6:	4f bf       	out	0x3f, r20	; 63
    39a8:	82 1b       	sub	r24, r18
    39aa:	93 0b       	sbc	r25, r19
    39ac:	0f 90       	pop	r0
    39ae:	df 91       	pop	r29
    39b0:	cf 91       	pop	r28
    39b2:	08 95       	ret

000039b4 <udi_cdc_multi_is_rx_ready>:
    39b4:	e2 df       	rcall	.-60     	; 0x397a <udi_cdc_multi_get_nb_received_data>
    39b6:	21 e0       	ldi	r18, 0x01	; 1
    39b8:	89 2b       	or	r24, r25
    39ba:	09 f4       	brne	.+2      	; 0x39be <udi_cdc_multi_is_rx_ready+0xa>
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	82 2f       	mov	r24, r18
    39c0:	08 95       	ret

000039c2 <udi_cdc_rx_start>:
    39c2:	0f 93       	push	r16
    39c4:	1f 93       	push	r17
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	1f 92       	push	r1
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	8f b7       	in	r24, 0x3f	; 63
    39d2:	89 83       	std	Y+1, r24	; 0x01
    39d4:	f8 94       	cli
    39d6:	99 81       	ldd	r25, Y+1	; 0x01
    39d8:	20 91 71 23 	lds	r18, 0x2371	; 0x802371 <udi_cdc_rx_buf_sel>
    39dc:	80 91 6e 23 	lds	r24, 0x236E	; 0x80236e <udi_cdc_rx_trans_ongoing>
    39e0:	81 11       	cpse	r24, r1
    39e2:	10 c0       	rjmp	.+32     	; 0x3a04 <udi_cdc_rx_start+0x42>
    39e4:	60 91 6f 23 	lds	r22, 0x236F	; 0x80236f <udi_cdc_rx_pos>
    39e8:	70 91 70 23 	lds	r23, 0x2370	; 0x802370 <udi_cdc_rx_pos+0x1>
    39ec:	02 2f       	mov	r16, r18
    39ee:	10 e0       	ldi	r17, 0x00	; 0
    39f0:	f8 01       	movw	r30, r16
    39f2:	ee 0f       	add	r30, r30
    39f4:	ff 1f       	adc	r31, r31
    39f6:	ee 58       	subi	r30, 0x8E	; 142
    39f8:	fc 4d       	sbci	r31, 0xDC	; 220
    39fa:	40 81       	ld	r20, Z
    39fc:	51 81       	ldd	r21, Z+1	; 0x01
    39fe:	64 17       	cp	r22, r20
    3a00:	75 07       	cpc	r23, r21
    3a02:	18 f4       	brcc	.+6      	; 0x3a0a <udi_cdc_rx_start+0x48>
    3a04:	9f bf       	out	0x3f, r25	; 63
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	27 c0       	rjmp	.+78     	; 0x3a58 <udi_cdc_rx_start+0x96>
    3a0a:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udi_cdc_rx_pos>
    3a0e:	10 92 70 23 	sts	0x2370, r1	; 0x802370 <udi_cdc_rx_pos+0x1>
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	21 11       	cpse	r18, r1
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	80 93 71 23 	sts	0x2371, r24	; 0x802371 <udi_cdc_rx_buf_sel>
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	80 93 6e 23 	sts	0x236E, r24	; 0x80236e <udi_cdc_rx_trans_ongoing>
    3a22:	9f bf       	out	0x3f, r25	; 63
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	c6 df       	rcall	.-116    	; 0x39b4 <udi_cdc_multi_is_rx_ready>
    3a28:	88 23       	and	r24, r24
    3a2a:	11 f0       	breq	.+4      	; 0x3a30 <udi_cdc_rx_start+0x6e>
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	75 da       	rcall	.-2838   	; 0x2f1a <usb_callback_rx_notify>
    3a30:	a8 01       	movw	r20, r16
    3a32:	00 24       	eor	r0, r0
    3a34:	56 95       	lsr	r21
    3a36:	47 95       	ror	r20
    3a38:	07 94       	ror	r0
    3a3a:	56 95       	lsr	r21
    3a3c:	47 95       	ror	r20
    3a3e:	07 94       	ror	r0
    3a40:	54 2f       	mov	r21, r20
    3a42:	40 2d       	mov	r20, r0
    3a44:	4a 58       	subi	r20, 0x8A	; 138
    3a46:	5c 4d       	sbci	r21, 0xDC	; 220
    3a48:	04 e6       	ldi	r16, 0x64	; 100
    3a4a:	1d e1       	ldi	r17, 0x1D	; 29
    3a4c:	20 e4       	ldi	r18, 0x40	; 64
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	61 e0       	ldi	r22, 0x01	; 1
    3a52:	82 e0       	ldi	r24, 0x02	; 2
    3a54:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <udd_ep_run>
    3a58:	0f 90       	pop	r0
    3a5a:	df 91       	pop	r29
    3a5c:	cf 91       	pop	r28
    3a5e:	1f 91       	pop	r17
    3a60:	0f 91       	pop	r16
    3a62:	08 95       	ret

00003a64 <udi_cdc_data_enable>:
    3a64:	10 92 f7 23 	sts	0x23F7, r1	; 0x8023f7 <udi_cdc_nb_data_enabled>
    3a68:	10 92 e5 22 	sts	0x22E5, r1	; 0x8022e5 <udi_cdc_tx_trans_ongoing>
    3a6c:	10 92 e4 22 	sts	0x22E4, r1	; 0x8022e4 <udi_cdc_tx_both_buf_to_send>
    3a70:	10 92 e8 22 	sts	0x22E8, r1	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3a74:	e9 ee       	ldi	r30, 0xE9	; 233
    3a76:	f2 e2       	ldi	r31, 0x22	; 34
    3a78:	10 82       	st	Z, r1
    3a7a:	11 82       	std	Z+1, r1	; 0x01
    3a7c:	12 82       	std	Z+2, r1	; 0x02
    3a7e:	13 82       	std	Z+3, r1	; 0x03
    3a80:	10 92 e6 22 	sts	0x22E6, r1	; 0x8022e6 <udi_cdc_tx_sof_num>
    3a84:	10 92 e7 22 	sts	0x22E7, r1	; 0x8022e7 <udi_cdc_tx_sof_num+0x1>
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	3c de       	rcall	.-904    	; 0x3704 <udi_cdc_tx_send>
    3a8c:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udi_cdc_rx_trans_ongoing>
    3a90:	10 92 71 23 	sts	0x2371, r1	; 0x802371 <udi_cdc_rx_buf_sel>
    3a94:	e2 e7       	ldi	r30, 0x72	; 114
    3a96:	f3 e2       	ldi	r31, 0x23	; 35
    3a98:	10 82       	st	Z, r1
    3a9a:	11 82       	std	Z+1, r1	; 0x01
    3a9c:	12 82       	std	Z+2, r1	; 0x02
    3a9e:	13 82       	std	Z+3, r1	; 0x03
    3aa0:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <udi_cdc_rx_pos>
    3aa4:	10 92 70 23 	sts	0x2370, r1	; 0x802370 <udi_cdc_rx_pos+0x1>
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	8b df       	rcall	.-234    	; 0x39c2 <udi_cdc_rx_start>
    3aac:	88 23       	and	r24, r24
    3aae:	59 f0       	breq	.+22     	; 0x3ac6 <udi_cdc_data_enable+0x62>
    3ab0:	90 91 f7 23 	lds	r25, 0x23F7	; 0x8023f7 <udi_cdc_nb_data_enabled>
    3ab4:	9f 5f       	subi	r25, 0xFF	; 255
    3ab6:	90 93 f7 23 	sts	0x23F7, r25	; 0x8023f7 <udi_cdc_nb_data_enabled>
    3aba:	90 91 f7 23 	lds	r25, 0x23F7	; 0x8023f7 <udi_cdc_nb_data_enabled>
    3abe:	91 30       	cpi	r25, 0x01	; 1
    3ac0:	11 f4       	brne	.+4      	; 0x3ac6 <udi_cdc_data_enable+0x62>
    3ac2:	90 93 f6 23 	sts	0x23F6, r25	; 0x8023f6 <udi_cdc_data_running>
    3ac6:	08 95       	ret

00003ac8 <udi_cdc_data_received>:
    3ac8:	0f 93       	push	r16
    3aca:	1f 93       	push	r17
    3acc:	81 11       	cpse	r24, r1
    3ace:	29 c0       	rjmp	.+82     	; 0x3b22 <udi_cdc_data_received+0x5a>
    3ad0:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udi_cdc_rx_buf_sel>
    3ad4:	e1 e0       	ldi	r30, 0x01	; 1
    3ad6:	81 11       	cpse	r24, r1
    3ad8:	e0 e0       	ldi	r30, 0x00	; 0
    3ada:	84 2f       	mov	r24, r20
    3adc:	61 15       	cp	r22, r1
    3ade:	71 05       	cpc	r23, r1
    3ae0:	a9 f4       	brne	.+42     	; 0x3b0c <udi_cdc_data_received+0x44>
    3ae2:	4e 2f       	mov	r20, r30
    3ae4:	50 e0       	ldi	r21, 0x00	; 0
    3ae6:	00 24       	eor	r0, r0
    3ae8:	56 95       	lsr	r21
    3aea:	47 95       	ror	r20
    3aec:	07 94       	ror	r0
    3aee:	56 95       	lsr	r21
    3af0:	47 95       	ror	r20
    3af2:	07 94       	ror	r0
    3af4:	54 2f       	mov	r21, r20
    3af6:	40 2d       	mov	r20, r0
    3af8:	4a 58       	subi	r20, 0x8A	; 138
    3afa:	5c 4d       	sbci	r21, 0xDC	; 220
    3afc:	04 e6       	ldi	r16, 0x64	; 100
    3afe:	1d e1       	ldi	r17, 0x1D	; 29
    3b00:	20 e4       	ldi	r18, 0x40	; 64
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	61 e0       	ldi	r22, 0x01	; 1
    3b06:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <udd_ep_run>
    3b0a:	0b c0       	rjmp	.+22     	; 0x3b22 <udi_cdc_data_received+0x5a>
    3b0c:	f0 e0       	ldi	r31, 0x00	; 0
    3b0e:	ee 0f       	add	r30, r30
    3b10:	ff 1f       	adc	r31, r31
    3b12:	ee 58       	subi	r30, 0x8E	; 142
    3b14:	fc 4d       	sbci	r31, 0xDC	; 220
    3b16:	60 83       	st	Z, r22
    3b18:	71 83       	std	Z+1, r23	; 0x01
    3b1a:	10 92 6e 23 	sts	0x236E, r1	; 0x80236e <udi_cdc_rx_trans_ongoing>
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	50 df       	rcall	.-352    	; 0x39c2 <udi_cdc_rx_start>
    3b22:	1f 91       	pop	r17
    3b24:	0f 91       	pop	r16
    3b26:	08 95       	ret

00003b28 <udi_cdc_multi_getc>:
    3b28:	ef 92       	push	r14
    3b2a:	ff 92       	push	r15
    3b2c:	1f 93       	push	r17
    3b2e:	cf 93       	push	r28
    3b30:	df 93       	push	r29
    3b32:	1f 92       	push	r1
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	11 e0       	ldi	r17, 0x01	; 1
    3b3a:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <udi_cdc_line_coding+0x6>
    3b3e:	89 30       	cpi	r24, 0x09	; 9
    3b40:	09 f0       	breq	.+2      	; 0x3b44 <udi_cdc_multi_getc+0x1c>
    3b42:	10 e0       	ldi	r17, 0x00	; 0
    3b44:	40 e0       	ldi	r20, 0x00	; 0
    3b46:	50 e0       	ldi	r21, 0x00	; 0
    3b48:	8f b7       	in	r24, 0x3f	; 63
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    3b4c:	f8 94       	cli
    3b4e:	a9 81       	ldd	r26, Y+1	; 0x01
    3b50:	20 91 6f 23 	lds	r18, 0x236F	; 0x80236f <udi_cdc_rx_pos>
    3b54:	30 91 70 23 	lds	r19, 0x2370	; 0x802370 <udi_cdc_rx_pos+0x1>
    3b58:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <udi_cdc_rx_buf_sel>
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	fc 01       	movw	r30, r24
    3b60:	ee 0f       	add	r30, r30
    3b62:	ff 1f       	adc	r31, r31
    3b64:	ee 58       	subi	r30, 0x8E	; 142
    3b66:	fc 4d       	sbci	r31, 0xDC	; 220
    3b68:	60 81       	ld	r22, Z
    3b6a:	71 81       	ldd	r23, Z+1	; 0x01
    3b6c:	af bf       	out	0x3f, r26	; 63
    3b6e:	26 17       	cp	r18, r22
    3b70:	37 07       	cpc	r19, r23
    3b72:	30 f0       	brcs	.+12     	; 0x3b80 <udi_cdc_multi_getc+0x58>
    3b74:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <udi_cdc_data_running>
    3b78:	81 11       	cpse	r24, r1
    3b7a:	e6 cf       	rjmp	.-52     	; 0x3b48 <udi_cdc_multi_getc+0x20>
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	21 c0       	rjmp	.+66     	; 0x3bc2 <udi_cdc_multi_getc+0x9a>
    3b80:	fc 01       	movw	r30, r24
    3b82:	00 24       	eor	r0, r0
    3b84:	f6 95       	lsr	r31
    3b86:	e7 95       	ror	r30
    3b88:	07 94       	ror	r0
    3b8a:	f6 95       	lsr	r31
    3b8c:	e7 95       	ror	r30
    3b8e:	07 94       	ror	r0
    3b90:	fe 2f       	mov	r31, r30
    3b92:	e0 2d       	mov	r30, r0
    3b94:	ea 58       	subi	r30, 0x8A	; 138
    3b96:	fc 4d       	sbci	r31, 0xDC	; 220
    3b98:	e2 0f       	add	r30, r18
    3b9a:	f3 1f       	adc	r31, r19
    3b9c:	80 81       	ld	r24, Z
    3b9e:	7a 01       	movw	r14, r20
    3ba0:	e8 2a       	or	r14, r24
    3ba2:	2f 5f       	subi	r18, 0xFF	; 255
    3ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ba6:	20 93 6f 23 	sts	0x236F, r18	; 0x80236f <udi_cdc_rx_pos>
    3baa:	30 93 70 23 	sts	0x2370, r19	; 0x802370 <udi_cdc_rx_pos+0x1>
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	08 df       	rcall	.-496    	; 0x39c2 <udi_cdc_rx_start>
    3bb2:	11 23       	and	r17, r17
    3bb4:	21 f0       	breq	.+8      	; 0x3bbe <udi_cdc_multi_getc+0x96>
    3bb6:	5e 2d       	mov	r21, r14
    3bb8:	44 27       	eor	r20, r20
    3bba:	10 e0       	ldi	r17, 0x00	; 0
    3bbc:	c5 cf       	rjmp	.-118    	; 0x3b48 <udi_cdc_multi_getc+0x20>
    3bbe:	8e 2d       	mov	r24, r14
    3bc0:	9f 2d       	mov	r25, r15
    3bc2:	0f 90       	pop	r0
    3bc4:	df 91       	pop	r29
    3bc6:	cf 91       	pop	r28
    3bc8:	1f 91       	pop	r17
    3bca:	ff 90       	pop	r15
    3bcc:	ef 90       	pop	r14
    3bce:	08 95       	ret

00003bd0 <udi_cdc_getc>:
    3bd0:	80 e0       	ldi	r24, 0x00	; 0
    3bd2:	aa cf       	rjmp	.-172    	; 0x3b28 <udi_cdc_multi_getc>
    3bd4:	08 95       	ret

00003bd6 <udi_cdc_multi_get_free_tx_buffer>:
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	1f 92       	push	r1
    3bdc:	cd b7       	in	r28, 0x3d	; 61
    3bde:	de b7       	in	r29, 0x3e	; 62
    3be0:	8f b7       	in	r24, 0x3f	; 63
    3be2:	89 83       	std	Y+1, r24	; 0x01
    3be4:	f8 94       	cli
    3be6:	99 81       	ldd	r25, Y+1	; 0x01
    3be8:	80 91 e8 22 	lds	r24, 0x22E8	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3bec:	e8 2f       	mov	r30, r24
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	ee 0f       	add	r30, r30
    3bf2:	ff 1f       	adc	r31, r31
    3bf4:	e7 51       	subi	r30, 0x17	; 23
    3bf6:	fd 4d       	sbci	r31, 0xDD	; 221
    3bf8:	20 81       	ld	r18, Z
    3bfa:	31 81       	ldd	r19, Z+1	; 0x01
    3bfc:	20 34       	cpi	r18, 0x40	; 64
    3bfe:	31 05       	cpc	r19, r1
    3c00:	89 f4       	brne	.+34     	; 0x3c24 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3c02:	40 91 e5 22 	lds	r20, 0x22E5	; 0x8022e5 <udi_cdc_tx_trans_ongoing>
    3c06:	41 11       	cpse	r20, r1
    3c08:	0d c0       	rjmp	.+26     	; 0x3c24 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3c0a:	40 91 e4 22 	lds	r20, 0x22E4	; 0x8022e4 <udi_cdc_tx_both_buf_to_send>
    3c0e:	41 11       	cpse	r20, r1
    3c10:	09 c0       	rjmp	.+18     	; 0x3c24 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3c12:	21 e0       	ldi	r18, 0x01	; 1
    3c14:	20 93 e4 22 	sts	0x22E4, r18	; 0x8022e4 <udi_cdc_tx_both_buf_to_send>
    3c18:	81 11       	cpse	r24, r1
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	20 93 e8 22 	sts	0x22E8, r18	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	9f bf       	out	0x3f, r25	; 63
    3c26:	80 e4       	ldi	r24, 0x40	; 64
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	82 1b       	sub	r24, r18
    3c2c:	93 0b       	sbc	r25, r19
    3c2e:	0f 90       	pop	r0
    3c30:	df 91       	pop	r29
    3c32:	cf 91       	pop	r28
    3c34:	08 95       	ret

00003c36 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    3c36:	cf df       	rcall	.-98     	; 0x3bd6 <udi_cdc_multi_get_free_tx_buffer>
    3c38:	21 e0       	ldi	r18, 0x01	; 1
    3c3a:	89 2b       	or	r24, r25
    3c3c:	09 f4       	brne	.+2      	; 0x3c40 <udi_cdc_multi_is_tx_ready+0xa>
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	82 2f       	mov	r24, r18
    3c42:	08 95       	ret

00003c44 <udi_cdc_multi_putc>:
    3c44:	ff 92       	push	r15
    3c46:	0f 93       	push	r16
    3c48:	1f 93       	push	r17
    3c4a:	cf 93       	push	r28
    3c4c:	df 93       	push	r29
    3c4e:	1f 92       	push	r1
    3c50:	cd b7       	in	r28, 0x3d	; 61
    3c52:	de b7       	in	r29, 0x3e	; 62
    3c54:	f6 2e       	mov	r15, r22
    3c56:	17 2f       	mov	r17, r23
    3c58:	01 e0       	ldi	r16, 0x01	; 1
    3c5a:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <udi_cdc_line_coding+0x6>
    3c5e:	89 30       	cpi	r24, 0x09	; 9
    3c60:	09 f0       	breq	.+2      	; 0x3c64 <udi_cdc_multi_putc+0x20>
    3c62:	00 e0       	ldi	r16, 0x00	; 0
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	e7 df       	rcall	.-50     	; 0x3c36 <udi_cdc_multi_is_tx_ready>
    3c68:	81 11       	cpse	r24, r1
    3c6a:	07 c0       	rjmp	.+14     	; 0x3c7a <udi_cdc_multi_putc+0x36>
    3c6c:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <udi_cdc_data_running>
    3c70:	81 11       	cpse	r24, r1
    3c72:	f8 cf       	rjmp	.-16     	; 0x3c64 <udi_cdc_multi_putc+0x20>
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	2c c0       	rjmp	.+88     	; 0x3cd2 <udi_cdc_multi_putc+0x8e>
    3c7a:	8f b7       	in	r24, 0x3f	; 63
    3c7c:	89 83       	std	Y+1, r24	; 0x01
    3c7e:	f8 94       	cli
    3c80:	49 81       	ldd	r20, Y+1	; 0x01
    3c82:	80 91 e8 22 	lds	r24, 0x22E8	; 0x8022e8 <udi_cdc_tx_buf_sel>
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	fc 01       	movw	r30, r24
    3c8a:	ee 0f       	add	r30, r30
    3c8c:	ff 1f       	adc	r31, r31
    3c8e:	e7 51       	subi	r30, 0x17	; 23
    3c90:	fd 4d       	sbci	r31, 0xDD	; 221
    3c92:	20 81       	ld	r18, Z
    3c94:	31 81       	ldd	r19, Z+1	; 0x01
    3c96:	b9 01       	movw	r22, r18
    3c98:	6f 5f       	subi	r22, 0xFF	; 255
    3c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c9c:	60 83       	st	Z, r22
    3c9e:	71 83       	std	Z+1, r23	; 0x01
    3ca0:	00 24       	eor	r0, r0
    3ca2:	96 95       	lsr	r25
    3ca4:	87 95       	ror	r24
    3ca6:	07 94       	ror	r0
    3ca8:	96 95       	lsr	r25
    3caa:	87 95       	ror	r24
    3cac:	07 94       	ror	r0
    3cae:	98 2f       	mov	r25, r24
    3cb0:	80 2d       	mov	r24, r0
    3cb2:	82 51       	subi	r24, 0x12	; 18
    3cb4:	9d 4d       	sbci	r25, 0xDD	; 221
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	e2 0f       	add	r30, r18
    3cba:	f3 1f       	adc	r31, r19
    3cbc:	f0 82       	st	Z, r15
    3cbe:	4f bf       	out	0x3f, r20	; 63
    3cc0:	00 23       	and	r16, r16
    3cc2:	29 f0       	breq	.+10     	; 0x3cce <udi_cdc_multi_putc+0x8a>
    3cc4:	f1 2e       	mov	r15, r17
    3cc6:	11 0f       	add	r17, r17
    3cc8:	11 0b       	sbc	r17, r17
    3cca:	00 e0       	ldi	r16, 0x00	; 0
    3ccc:	cb cf       	rjmp	.-106    	; 0x3c64 <udi_cdc_multi_putc+0x20>
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	0f 90       	pop	r0
    3cd4:	df 91       	pop	r29
    3cd6:	cf 91       	pop	r28
    3cd8:	1f 91       	pop	r17
    3cda:	0f 91       	pop	r16
    3cdc:	ff 90       	pop	r15
    3cde:	08 95       	ret

00003ce0 <udi_cdc_putc>:
    3ce0:	bc 01       	movw	r22, r24
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	af cf       	rjmp	.-162    	; 0x3c44 <udi_cdc_multi_putc>
    3ce6:	08 95       	ret

00003ce8 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    3ce8:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udc_ptr_conf>
    3cec:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3cf0:	01 90       	ld	r0, Z+
    3cf2:	f0 81       	ld	r31, Z
    3cf4:	e0 2d       	mov	r30, r0
    3cf6:	22 81       	ldd	r18, Z+2	; 0x02
    3cf8:	33 81       	ldd	r19, Z+3	; 0x03
    3cfa:	2e 0f       	add	r18, r30
    3cfc:	3f 1f       	adc	r19, r31
    3cfe:	fc 01       	movw	r30, r24
    3d00:	40 81       	ld	r20, Z
    3d02:	e4 0f       	add	r30, r20
    3d04:	f1 1d       	adc	r31, r1
    3d06:	e2 17       	cp	r30, r18
    3d08:	f3 07       	cpc	r31, r19
    3d0a:	a0 f4       	brcc	.+40     	; 0x3d34 <udc_next_desc_in_iface+0x4c>
    3d0c:	81 81       	ldd	r24, Z+1	; 0x01
    3d0e:	84 30       	cpi	r24, 0x04	; 4
    3d10:	a1 f0       	breq	.+40     	; 0x3d3a <udc_next_desc_in_iface+0x52>
    3d12:	86 13       	cpse	r24, r22
    3d14:	06 c0       	rjmp	.+12     	; 0x3d22 <udc_next_desc_in_iface+0x3a>
    3d16:	14 c0       	rjmp	.+40     	; 0x3d40 <udc_next_desc_in_iface+0x58>
    3d18:	81 81       	ldd	r24, Z+1	; 0x01
    3d1a:	84 30       	cpi	r24, 0x04	; 4
    3d1c:	a1 f0       	breq	.+40     	; 0x3d46 <udc_next_desc_in_iface+0x5e>
    3d1e:	86 17       	cp	r24, r22
    3d20:	a9 f0       	breq	.+42     	; 0x3d4c <udc_next_desc_in_iface+0x64>
    3d22:	80 81       	ld	r24, Z
    3d24:	e8 0f       	add	r30, r24
    3d26:	f1 1d       	adc	r31, r1
    3d28:	e2 17       	cp	r30, r18
    3d2a:	f3 07       	cpc	r31, r19
    3d2c:	a8 f3       	brcs	.-22     	; 0x3d18 <udc_next_desc_in_iface+0x30>
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	08 95       	ret
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	08 95       	ret
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	08 95       	ret
    3d40:	8e 2f       	mov	r24, r30
    3d42:	9f 2f       	mov	r25, r31
    3d44:	08 95       	ret
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	08 95       	ret
    3d4c:	8e 2f       	mov	r24, r30
    3d4e:	9f 2f       	mov	r25, r31
    3d50:	08 95       	ret

00003d52 <udc_valid_address>:
    3d52:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    3d56:	8f 77       	andi	r24, 0x7F	; 127
    3d58:	0c 94 03 12 	jmp	0x2406	; 0x2406 <udd_set_address>
    3d5c:	08 95       	ret

00003d5e <udc_update_iface_desc>:
    3d5e:	90 91 14 24 	lds	r25, 0x2414	; 0x802414 <udc_num_configuration>
    3d62:	99 23       	and	r25, r25
    3d64:	81 f1       	breq	.+96     	; 0x3dc6 <udc_update_iface_desc+0x68>
    3d66:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udc_ptr_conf>
    3d6a:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3d6e:	01 90       	ld	r0, Z+
    3d70:	f0 81       	ld	r31, Z
    3d72:	e0 2d       	mov	r30, r0
    3d74:	94 81       	ldd	r25, Z+4	; 0x04
    3d76:	89 17       	cp	r24, r25
    3d78:	40 f5       	brcc	.+80     	; 0x3dca <udc_update_iface_desc+0x6c>
    3d7a:	e0 93 10 24 	sts	0x2410, r30	; 0x802410 <udc_ptr_iface>
    3d7e:	f0 93 11 24 	sts	0x2411, r31	; 0x802411 <udc_ptr_iface+0x1>
    3d82:	22 81       	ldd	r18, Z+2	; 0x02
    3d84:	33 81       	ldd	r19, Z+3	; 0x03
    3d86:	2e 0f       	add	r18, r30
    3d88:	3f 1f       	adc	r19, r31
    3d8a:	e2 17       	cp	r30, r18
    3d8c:	f3 07       	cpc	r31, r19
    3d8e:	f8 f4       	brcc	.+62     	; 0x3dce <udc_update_iface_desc+0x70>
    3d90:	91 81       	ldd	r25, Z+1	; 0x01
    3d92:	94 30       	cpi	r25, 0x04	; 4
    3d94:	61 f4       	brne	.+24     	; 0x3dae <udc_update_iface_desc+0x50>
    3d96:	92 81       	ldd	r25, Z+2	; 0x02
    3d98:	89 13       	cpse	r24, r25
    3d9a:	09 c0       	rjmp	.+18     	; 0x3dae <udc_update_iface_desc+0x50>
    3d9c:	93 81       	ldd	r25, Z+3	; 0x03
    3d9e:	96 13       	cpse	r25, r22
    3da0:	06 c0       	rjmp	.+12     	; 0x3dae <udc_update_iface_desc+0x50>
    3da2:	e0 93 10 24 	sts	0x2410, r30	; 0x802410 <udc_ptr_iface>
    3da6:	f0 93 11 24 	sts	0x2411, r31	; 0x802411 <udc_ptr_iface+0x1>
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	08 95       	ret
    3dae:	90 81       	ld	r25, Z
    3db0:	e9 0f       	add	r30, r25
    3db2:	f1 1d       	adc	r31, r1
    3db4:	e2 17       	cp	r30, r18
    3db6:	f3 07       	cpc	r31, r19
    3db8:	58 f3       	brcs	.-42     	; 0x3d90 <udc_update_iface_desc+0x32>
    3dba:	e0 93 10 24 	sts	0x2410, r30	; 0x802410 <udc_ptr_iface>
    3dbe:	f0 93 11 24 	sts	0x2411, r31	; 0x802411 <udc_ptr_iface+0x1>
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	08 95       	ret
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	08 95       	ret
    3dca:	80 e0       	ldi	r24, 0x00	; 0
    3dcc:	08 95       	ret
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	08 95       	ret

00003dd2 <udc_iface_disable>:
    3dd2:	ef 92       	push	r14
    3dd4:	ff 92       	push	r15
    3dd6:	1f 93       	push	r17
    3dd8:	cf 93       	push	r28
    3dda:	df 93       	push	r29
    3ddc:	c8 2f       	mov	r28, r24
    3dde:	60 e0       	ldi	r22, 0x00	; 0
    3de0:	be df       	rcall	.-132    	; 0x3d5e <udc_update_iface_desc>
    3de2:	18 2f       	mov	r17, r24
    3de4:	88 23       	and	r24, r24
    3de6:	81 f1       	breq	.+96     	; 0x3e48 <udc_iface_disable+0x76>
    3de8:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    3dec:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3df0:	ec 2f       	mov	r30, r28
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	ee 0f       	add	r30, r30
    3df6:	ff 1f       	adc	r31, r31
    3df8:	12 96       	adiw	r26, 0x02	; 2
    3dfa:	8d 91       	ld	r24, X+
    3dfc:	9c 91       	ld	r25, X
    3dfe:	13 97       	sbiw	r26, 0x03	; 3
    3e00:	e8 0f       	add	r30, r24
    3e02:	f9 1f       	adc	r31, r25
    3e04:	e0 80       	ld	r14, Z
    3e06:	f1 80       	ldd	r15, Z+1	; 0x01
    3e08:	d7 01       	movw	r26, r14
    3e0a:	16 96       	adiw	r26, 0x06	; 6
    3e0c:	ed 91       	ld	r30, X+
    3e0e:	fc 91       	ld	r31, X
    3e10:	17 97       	sbiw	r26, 0x07	; 7
    3e12:	19 95       	eicall
    3e14:	68 2f       	mov	r22, r24
    3e16:	8c 2f       	mov	r24, r28
    3e18:	a2 df       	rcall	.-188    	; 0x3d5e <udc_update_iface_desc>
    3e1a:	18 2f       	mov	r17, r24
    3e1c:	88 23       	and	r24, r24
    3e1e:	a1 f0       	breq	.+40     	; 0x3e48 <udc_iface_disable+0x76>
    3e20:	c0 91 10 24 	lds	r28, 0x2410	; 0x802410 <udc_ptr_iface>
    3e24:	d0 91 11 24 	lds	r29, 0x2411	; 0x802411 <udc_ptr_iface+0x1>
    3e28:	65 e0       	ldi	r22, 0x05	; 5
    3e2a:	ce 01       	movw	r24, r28
    3e2c:	5d df       	rcall	.-326    	; 0x3ce8 <udc_next_desc_in_iface>
    3e2e:	ec 01       	movw	r28, r24
    3e30:	89 2b       	or	r24, r25
    3e32:	21 f0       	breq	.+8      	; 0x3e3c <udc_iface_disable+0x6a>
    3e34:	8a 81       	ldd	r24, Y+2	; 0x02
    3e36:	0e 94 0c 14 	call	0x2818	; 0x2818 <udd_ep_free>
    3e3a:	f6 cf       	rjmp	.-20     	; 0x3e28 <udc_iface_disable+0x56>
    3e3c:	d7 01       	movw	r26, r14
    3e3e:	12 96       	adiw	r26, 0x02	; 2
    3e40:	ed 91       	ld	r30, X+
    3e42:	fc 91       	ld	r31, X
    3e44:	13 97       	sbiw	r26, 0x03	; 3
    3e46:	19 95       	eicall
    3e48:	81 2f       	mov	r24, r17
    3e4a:	df 91       	pop	r29
    3e4c:	cf 91       	pop	r28
    3e4e:	1f 91       	pop	r17
    3e50:	ff 90       	pop	r15
    3e52:	ef 90       	pop	r14
    3e54:	08 95       	ret

00003e56 <udc_iface_enable>:
    3e56:	1f 93       	push	r17
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
    3e5c:	18 2f       	mov	r17, r24
    3e5e:	7f df       	rcall	.-258    	; 0x3d5e <udc_update_iface_desc>
    3e60:	88 23       	and	r24, r24
    3e62:	41 f1       	breq	.+80     	; 0x3eb4 <udc_iface_enable+0x5e>
    3e64:	c0 91 10 24 	lds	r28, 0x2410	; 0x802410 <udc_ptr_iface>
    3e68:	d0 91 11 24 	lds	r29, 0x2411	; 0x802411 <udc_ptr_iface+0x1>
    3e6c:	65 e0       	ldi	r22, 0x05	; 5
    3e6e:	ce 01       	movw	r24, r28
    3e70:	3b df       	rcall	.-394    	; 0x3ce8 <udc_next_desc_in_iface>
    3e72:	ec 01       	movw	r28, r24
    3e74:	89 2b       	or	r24, r25
    3e76:	49 f0       	breq	.+18     	; 0x3e8a <udc_iface_enable+0x34>
    3e78:	4c 81       	ldd	r20, Y+4	; 0x04
    3e7a:	5d 81       	ldd	r21, Y+5	; 0x05
    3e7c:	6b 81       	ldd	r22, Y+3	; 0x03
    3e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e80:	0e 94 18 12 	call	0x2430	; 0x2430 <udd_ep_alloc>
    3e84:	81 11       	cpse	r24, r1
    3e86:	f2 cf       	rjmp	.-28     	; 0x3e6c <udc_iface_enable+0x16>
    3e88:	15 c0       	rjmp	.+42     	; 0x3eb4 <udc_iface_enable+0x5e>
    3e8a:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    3e8e:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3e92:	e1 2f       	mov	r30, r17
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	ee 0f       	add	r30, r30
    3e98:	ff 1f       	adc	r31, r31
    3e9a:	12 96       	adiw	r26, 0x02	; 2
    3e9c:	8d 91       	ld	r24, X+
    3e9e:	9c 91       	ld	r25, X
    3ea0:	13 97       	sbiw	r26, 0x03	; 3
    3ea2:	e8 0f       	add	r30, r24
    3ea4:	f9 1f       	adc	r31, r25
    3ea6:	01 90       	ld	r0, Z+
    3ea8:	f0 81       	ld	r31, Z
    3eaa:	e0 2d       	mov	r30, r0
    3eac:	01 90       	ld	r0, Z+
    3eae:	f0 81       	ld	r31, Z
    3eb0:	e0 2d       	mov	r30, r0
    3eb2:	19 95       	eicall
    3eb4:	df 91       	pop	r29
    3eb6:	cf 91       	pop	r28
    3eb8:	1f 91       	pop	r17
    3eba:	08 95       	ret

00003ebc <udc_start>:
    3ebc:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <udd_enable>
    3ec0:	08 95       	ret

00003ec2 <udc_reset>:
    3ec2:	cf 93       	push	r28
    3ec4:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    3ec8:	88 23       	and	r24, r24
    3eca:	c1 f0       	breq	.+48     	; 0x3efc <udc_reset+0x3a>
    3ecc:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udc_ptr_conf>
    3ed0:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3ed4:	01 90       	ld	r0, Z+
    3ed6:	f0 81       	ld	r31, Z
    3ed8:	e0 2d       	mov	r30, r0
    3eda:	84 81       	ldd	r24, Z+4	; 0x04
    3edc:	88 23       	and	r24, r24
    3ede:	71 f0       	breq	.+28     	; 0x3efc <udc_reset+0x3a>
    3ee0:	c0 e0       	ldi	r28, 0x00	; 0
    3ee2:	8c 2f       	mov	r24, r28
    3ee4:	76 df       	rcall	.-276    	; 0x3dd2 <udc_iface_disable>
    3ee6:	cf 5f       	subi	r28, 0xFF	; 255
    3ee8:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udc_ptr_conf>
    3eec:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3ef0:	01 90       	ld	r0, Z+
    3ef2:	f0 81       	ld	r31, Z
    3ef4:	e0 2d       	mov	r30, r0
    3ef6:	84 81       	ldd	r24, Z+4	; 0x04
    3ef8:	c8 17       	cp	r28, r24
    3efa:	98 f3       	brcs	.-26     	; 0x3ee2 <udc_reset+0x20>
    3efc:	10 92 14 24 	sts	0x2414, r1	; 0x802414 <udc_num_configuration>
    3f00:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <udc_device_status>
    3f04:	81 fd       	sbrc	r24, 1
    3f06:	0e 94 82 17 	call	0x2f04	; 0x2f04 <usb_callback_remotewakeup_disable>
    3f0a:	10 92 18 24 	sts	0x2418, r1	; 0x802418 <udc_device_status>
    3f0e:	10 92 19 24 	sts	0x2419, r1	; 0x802419 <udc_device_status+0x1>
    3f12:	cf 91       	pop	r28
    3f14:	08 95       	ret

00003f16 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    3f16:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    3f18:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    3f1c:	88 23       	and	r24, r24
    3f1e:	49 f1       	breq	.+82     	; 0x3f72 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3f20:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    3f24:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3f28:	ed 91       	ld	r30, X+
    3f2a:	fc 91       	ld	r31, X
    3f2c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3f2e:	84 81       	ldd	r24, Z+4	; 0x04
    3f30:	88 23       	and	r24, r24
    3f32:	f9 f0       	breq	.+62     	; 0x3f72 <udc_sof_notify+0x5c>
    3f34:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3f36:	ec 2f       	mov	r30, r28
    3f38:	f0 e0       	ldi	r31, 0x00	; 0
    3f3a:	ee 0f       	add	r30, r30
    3f3c:	ff 1f       	adc	r31, r31
    3f3e:	12 96       	adiw	r26, 0x02	; 2
    3f40:	8d 91       	ld	r24, X+
    3f42:	9c 91       	ld	r25, X
    3f44:	13 97       	sbiw	r26, 0x03	; 3
    3f46:	e8 0f       	add	r30, r24
    3f48:	f9 1f       	adc	r31, r25
    3f4a:	01 90       	ld	r0, Z+
    3f4c:	f0 81       	ld	r31, Z
    3f4e:	e0 2d       	mov	r30, r0
    3f50:	00 84       	ldd	r0, Z+8	; 0x08
    3f52:	f1 85       	ldd	r31, Z+9	; 0x09
    3f54:	e0 2d       	mov	r30, r0
    3f56:	30 97       	sbiw	r30, 0x00	; 0
    3f58:	09 f0       	breq	.+2      	; 0x3f5c <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3f5a:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3f5c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3f5e:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    3f62:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    3f66:	ed 91       	ld	r30, X+
    3f68:	fc 91       	ld	r31, X
    3f6a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3f6c:	84 81       	ldd	r24, Z+4	; 0x04
    3f6e:	c8 17       	cp	r28, r24
    3f70:	10 f3       	brcs	.-60     	; 0x3f36 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    3f72:	cf 91       	pop	r28
    3f74:	08 95       	ret

00003f76 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    3f76:	0f 93       	push	r16
    3f78:	1f 93       	push	r17
    3f7a:	cf 93       	push	r28
    3f7c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3f7e:	e1 e2       	ldi	r30, 0x21	; 33
    3f80:	f4 e2       	ldi	r31, 0x24	; 36
    3f82:	12 86       	std	Z+10, r1	; 0x0a
    3f84:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    3f86:	14 86       	std	Z+12, r1	; 0x0c
    3f88:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    3f8a:	16 86       	std	Z+14, r1	; 0x0e
    3f8c:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    3f8e:	80 81       	ld	r24, Z
    3f90:	88 23       	and	r24, r24
    3f92:	0c f0       	brlt	.+2      	; 0x3f96 <udc_process_setup+0x20>
    3f94:	95 c2       	rjmp	.+1322   	; 0x44c0 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    3f96:	20 91 27 24 	lds	r18, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    3f9a:	30 91 28 24 	lds	r19, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    3f9e:	21 15       	cp	r18, r1
    3fa0:	31 05       	cpc	r19, r1
    3fa2:	09 f0       	breq	.+2      	; 0x3fa6 <udc_process_setup+0x30>
    3fa4:	88 c2       	rjmp	.+1296   	; 0x44b6 <udc_process_setup+0x540>
    3fa6:	7f c2       	rjmp	.+1278   	; 0x44a6 <udc_process_setup+0x530>
    3fa8:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3faa:	09 f0       	breq	.+2      	; 0x3fae <udc_process_setup+0x38>
    3fac:	ab c0       	rjmp	.+342    	; 0x4104 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3fae:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    3fb2:	96 30       	cpi	r25, 0x06	; 6
    3fb4:	81 f0       	breq	.+32     	; 0x3fd6 <udc_process_setup+0x60>
    3fb6:	98 30       	cpi	r25, 0x08	; 8
    3fb8:	09 f4       	brne	.+2      	; 0x3fbc <udc_process_setup+0x46>
    3fba:	99 c0       	rjmp	.+306    	; 0x40ee <udc_process_setup+0x178>
    3fbc:	91 11       	cpse	r25, r1
    3fbe:	a2 c0       	rjmp	.+324    	; 0x4104 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3fc0:	22 30       	cpi	r18, 0x02	; 2
    3fc2:	31 05       	cpc	r19, r1
    3fc4:	09 f0       	breq	.+2      	; 0x3fc8 <udc_process_setup+0x52>
    3fc6:	2b c2       	rjmp	.+1110   	; 0x441e <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    3fc8:	62 e0       	ldi	r22, 0x02	; 2
    3fca:	70 e0       	ldi	r23, 0x00	; 0
    3fcc:	88 e1       	ldi	r24, 0x18	; 24
    3fce:	94 e2       	ldi	r25, 0x24	; 36
    3fd0:	0e 94 11 12 	call	0x2422	; 0x2422 <udd_set_setup_payload>
    3fd4:	7e c2       	rjmp	.+1276   	; 0x44d2 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    3fd6:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    3fda:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3fde:	29 2f       	mov	r18, r25
    3fe0:	33 27       	eor	r19, r19
    3fe2:	22 30       	cpi	r18, 0x02	; 2
    3fe4:	31 05       	cpc	r19, r1
    3fe6:	b1 f0       	breq	.+44     	; 0x4014 <udc_process_setup+0x9e>
    3fe8:	20 f4       	brcc	.+8      	; 0x3ff2 <udc_process_setup+0x7c>
    3fea:	21 30       	cpi	r18, 0x01	; 1
    3fec:	31 05       	cpc	r19, r1
    3fee:	41 f0       	breq	.+16     	; 0x4000 <udc_process_setup+0x8a>
    3ff0:	d8 c1       	rjmp	.+944    	; 0x43a2 <udc_process_setup+0x42c>
    3ff2:	23 30       	cpi	r18, 0x03	; 3
    3ff4:	31 05       	cpc	r19, r1
    3ff6:	f1 f1       	breq	.+124    	; 0x4074 <udc_process_setup+0xfe>
    3ff8:	2f 30       	cpi	r18, 0x0F	; 15
    3ffa:	31 05       	cpc	r19, r1
    3ffc:	61 f1       	breq	.+88     	; 0x4056 <udc_process_setup+0xe0>
    3ffe:	d1 c1       	rjmp	.+930    	; 0x43a2 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    4000:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <udc_config>
    4004:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    4008:	dc 01       	movw	r26, r24
    400a:	6c 91       	ld	r22, X
    400c:	70 e0       	ldi	r23, 0x00	; 0
    400e:	0e 94 11 12 	call	0x2422	; 0x2422 <udd_set_setup_payload>
    4012:	5e c0       	rjmp	.+188    	; 0x40d0 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    4014:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    4018:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
    401c:	21 89       	ldd	r18, Z+17	; 0x11
    401e:	82 17       	cp	r24, r18
    4020:	08 f0       	brcs	.+2      	; 0x4024 <udc_process_setup+0xae>
    4022:	fd c1       	rjmp	.+1018   	; 0x441e <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    4024:	99 27       	eor	r25, r25
    4026:	88 0f       	add	r24, r24
    4028:	99 1f       	adc	r25, r25
    402a:	88 0f       	add	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    4032:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    4036:	e8 0f       	add	r30, r24
    4038:	f9 1f       	adc	r31, r25
    403a:	80 81       	ld	r24, Z
    403c:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    403e:	fc 01       	movw	r30, r24
    4040:	62 81       	ldd	r22, Z+2	; 0x02
    4042:	73 81       	ldd	r23, Z+3	; 0x03
    4044:	0e 94 11 12 	call	0x2422	; 0x2422 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    4048:	e0 91 29 24 	lds	r30, 0x2429	; 0x802429 <udd_g_ctrlreq+0x8>
    404c:	f0 91 2a 24 	lds	r31, 0x242A	; 0x80242a <udd_g_ctrlreq+0x9>
    4050:	82 e0       	ldi	r24, 0x02	; 2
    4052:	81 83       	std	Z+1, r24	; 0x01
    4054:	3d c0       	rjmp	.+122    	; 0x40d0 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    4056:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <udc_config+0x4>
    405a:	90 91 42 20 	lds	r25, 0x2042	; 0x802042 <udc_config+0x5>
    405e:	00 97       	sbiw	r24, 0x00	; 0
    4060:	09 f4       	brne	.+2      	; 0x4064 <udc_process_setup+0xee>
    4062:	dd c1       	rjmp	.+954    	; 0x441e <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    4064:	dc 01       	movw	r26, r24
    4066:	12 96       	adiw	r26, 0x02	; 2
    4068:	6d 91       	ld	r22, X+
    406a:	7c 91       	ld	r23, X
    406c:	13 97       	sbiw	r26, 0x03	; 3
    406e:	0e 94 11 12 	call	0x2422	; 0x2422 <udd_set_setup_payload>
    4072:	2e c0       	rjmp	.+92     	; 0x40d0 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    4074:	99 27       	eor	r25, r25
    4076:	81 30       	cpi	r24, 0x01	; 1
    4078:	91 05       	cpc	r25, r1
    407a:	99 f0       	breq	.+38     	; 0x40a2 <udc_process_setup+0x12c>
    407c:	58 f0       	brcs	.+22     	; 0x4094 <udc_process_setup+0x11e>
    407e:	82 30       	cpi	r24, 0x02	; 2
    4080:	91 05       	cpc	r25, r1
    4082:	09 f4       	brne	.+2      	; 0x4086 <udc_process_setup+0x110>
    4084:	22 c2       	rjmp	.+1092   	; 0x44ca <udc_process_setup+0x554>
    4086:	03 97       	sbiw	r24, 0x03	; 3
    4088:	09 f0       	breq	.+2      	; 0x408c <udc_process_setup+0x116>
    408a:	94 c1       	rjmp	.+808    	; 0x43b4 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    408c:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    408e:	ed e4       	ldi	r30, 0x4D	; 77
    4090:	f1 e2       	ldi	r31, 0x21	; 33
    4092:	0a c0       	rjmp	.+20     	; 0x40a8 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    4094:	64 e0       	ldi	r22, 0x04	; 4
    4096:	70 e0       	ldi	r23, 0x00	; 0
    4098:	82 ee       	ldi	r24, 0xE2	; 226
    409a:	90 e2       	ldi	r25, 0x20	; 32
    409c:	0e 94 11 12 	call	0x2422	; 0x2422 <udd_set_setup_payload>
    40a0:	17 c0       	rjmp	.+46     	; 0x40d0 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    40a2:	e1 ed       	ldi	r30, 0xD1	; 209
    40a4:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    40a6:	30 e1       	ldi	r19, 0x10	; 16
    40a8:	a4 ea       	ldi	r26, 0xA4	; 164
    40aa:	b0 e2       	ldi	r27, 0x20	; 32
    40ac:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    40ae:	81 91       	ld	r24, Z+
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	8d 93       	st	X+, r24
    40b4:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    40b6:	2f 5f       	subi	r18, 0xFF	; 255
    40b8:	23 17       	cp	r18, r19
    40ba:	c8 f3       	brcs	.-14     	; 0x40ae <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    40bc:	63 2f       	mov	r22, r19
    40be:	66 0f       	add	r22, r22
    40c0:	6e 5f       	subi	r22, 0xFE	; 254
    40c2:	60 93 a2 20 	sts	0x20A2, r22	; 0x8020a2 <udc_string_desc>
		udd_set_setup_payload(
    40c6:	70 e0       	ldi	r23, 0x00	; 0
    40c8:	82 ea       	ldi	r24, 0xA2	; 162
    40ca:	90 e2       	ldi	r25, 0x20	; 32
    40cc:	0e 94 11 12 	call	0x2422	; 0x2422 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    40d0:	e1 e2       	ldi	r30, 0x21	; 33
    40d2:	f4 e2       	ldi	r31, 0x24	; 36
    40d4:	86 81       	ldd	r24, Z+6	; 0x06
    40d6:	97 81       	ldd	r25, Z+7	; 0x07
    40d8:	22 85       	ldd	r18, Z+10	; 0x0a
    40da:	33 85       	ldd	r19, Z+11	; 0x0b
    40dc:	82 17       	cp	r24, r18
    40de:	93 07       	cpc	r25, r19
    40e0:	08 f0       	brcs	.+2      	; 0x40e4 <udc_process_setup+0x16e>
    40e2:	f7 c1       	rjmp	.+1006   	; 0x44d2 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    40e4:	80 93 2b 24 	sts	0x242B, r24	; 0x80242b <udd_g_ctrlreq+0xa>
    40e8:	90 93 2c 24 	sts	0x242C, r25	; 0x80242c <udd_g_ctrlreq+0xb>
    40ec:	f2 c1       	rjmp	.+996    	; 0x44d2 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    40ee:	21 30       	cpi	r18, 0x01	; 1
    40f0:	31 05       	cpc	r19, r1
    40f2:	09 f0       	breq	.+2      	; 0x40f6 <udc_process_setup+0x180>
    40f4:	94 c1       	rjmp	.+808    	; 0x441e <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    40f6:	61 e0       	ldi	r22, 0x01	; 1
    40f8:	70 e0       	ldi	r23, 0x00	; 0
    40fa:	84 e1       	ldi	r24, 0x14	; 20
    40fc:	94 e2       	ldi	r25, 0x24	; 36
    40fe:	0e 94 11 12 	call	0x2422	; 0x2422 <udd_set_setup_payload>
    4102:	e7 c1       	rjmp	.+974    	; 0x44d2 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4104:	81 30       	cpi	r24, 0x01	; 1
    4106:	e9 f5       	brne	.+122    	; 0x4182 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4108:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    410c:	9a 30       	cpi	r25, 0x0A	; 10
    410e:	c9 f5       	brne	.+114    	; 0x4182 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    4110:	21 30       	cpi	r18, 0x01	; 1
    4112:	31 05       	cpc	r19, r1
    4114:	09 f0       	breq	.+2      	; 0x4118 <udc_process_setup+0x1a2>
    4116:	53 c1       	rjmp	.+678    	; 0x43be <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4118:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    411c:	88 23       	and	r24, r24
    411e:	09 f4       	brne	.+2      	; 0x4122 <udc_process_setup+0x1ac>
    4120:	4e c1       	rjmp	.+668    	; 0x43be <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4122:	c0 91 25 24 	lds	r28, 0x2425	; 0x802425 <udd_g_ctrlreq+0x4>
    4126:	d0 91 26 24 	lds	r29, 0x2426	; 0x802426 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    412a:	00 91 12 24 	lds	r16, 0x2412	; 0x802412 <udc_ptr_conf>
    412e:	10 91 13 24 	lds	r17, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    4132:	d8 01       	movw	r26, r16
    4134:	ed 91       	ld	r30, X+
    4136:	fc 91       	ld	r31, X
    4138:	84 81       	ldd	r24, Z+4	; 0x04
    413a:	c8 17       	cp	r28, r24
    413c:	08 f0       	brcs	.+2      	; 0x4140 <udc_process_setup+0x1ca>
    413e:	3f c1       	rjmp	.+638    	; 0x43be <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4140:	60 e0       	ldi	r22, 0x00	; 0
    4142:	8c 2f       	mov	r24, r28
    4144:	0c de       	rcall	.-1000   	; 0x3d5e <udc_update_iface_desc>
    4146:	88 23       	and	r24, r24
    4148:	09 f4       	brne	.+2      	; 0x414c <udc_process_setup+0x1d6>
    414a:	34 c1       	rjmp	.+616    	; 0x43b4 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    414c:	ce 01       	movw	r24, r28
    414e:	99 27       	eor	r25, r25
    4150:	88 0f       	add	r24, r24
    4152:	99 1f       	adc	r25, r25
    4154:	d8 01       	movw	r26, r16
    4156:	12 96       	adiw	r26, 0x02	; 2
    4158:	ed 91       	ld	r30, X+
    415a:	fc 91       	ld	r31, X
    415c:	13 97       	sbiw	r26, 0x03	; 3
    415e:	e8 0f       	add	r30, r24
    4160:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    4162:	01 90       	ld	r0, Z+
    4164:	f0 81       	ld	r31, Z
    4166:	e0 2d       	mov	r30, r0
    4168:	86 81       	ldd	r24, Z+6	; 0x06
    416a:	97 81       	ldd	r25, Z+7	; 0x07
    416c:	fc 01       	movw	r30, r24
    416e:	19 95       	eicall
    4170:	80 93 16 24 	sts	0x2416, r24	; 0x802416 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    4174:	61 e0       	ldi	r22, 0x01	; 1
    4176:	70 e0       	ldi	r23, 0x00	; 0
    4178:	86 e1       	ldi	r24, 0x16	; 22
    417a:	94 e2       	ldi	r25, 0x24	; 36
    417c:	0e 94 11 12 	call	0x2422	; 0x2422 <udd_set_setup_payload>
    4180:	a8 c1       	rjmp	.+848    	; 0x44d2 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4182:	82 30       	cpi	r24, 0x02	; 2
    4184:	09 f0       	breq	.+2      	; 0x4188 <udc_process_setup+0x212>
    4186:	16 c1       	rjmp	.+556    	; 0x43b4 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4188:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    418c:	81 11       	cpse	r24, r1
    418e:	0b c1       	rjmp	.+534    	; 0x43a6 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    4190:	22 30       	cpi	r18, 0x02	; 2
    4192:	31 05       	cpc	r19, r1
    4194:	09 f0       	breq	.+2      	; 0x4198 <udc_process_setup+0x222>
    4196:	43 c1       	rjmp	.+646    	; 0x441e <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    4198:	80 91 25 24 	lds	r24, 0x2425	; 0x802425 <udd_g_ctrlreq+0x4>
    419c:	0e 94 a0 12 	call	0x2540	; 0x2540 <udd_ep_is_halted>
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	80 93 0e 24 	sts	0x240E, r24	; 0x80240e <udc_ep_status.4757>
    41a6:	90 93 0f 24 	sts	0x240F, r25	; 0x80240f <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    41aa:	62 e0       	ldi	r22, 0x02	; 2
    41ac:	70 e0       	ldi	r23, 0x00	; 0
    41ae:	8e e0       	ldi	r24, 0x0E	; 14
    41b0:	94 e2       	ldi	r25, 0x24	; 36
    41b2:	0e 94 11 12 	call	0x2422	; 0x2422 <udd_set_setup_payload>
    41b6:	8d c1       	rjmp	.+794    	; 0x44d2 <udc_process_setup+0x55c>
    41b8:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    41ba:	09 f0       	breq	.+2      	; 0x41be <udc_process_setup+0x248>
    41bc:	a0 c0       	rjmp	.+320    	; 0x42fe <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    41be:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    41c2:	93 30       	cpi	r25, 0x03	; 3
    41c4:	91 f1       	breq	.+100    	; 0x422a <udc_process_setup+0x2b4>
    41c6:	18 f4       	brcc	.+6      	; 0x41ce <udc_process_setup+0x258>
    41c8:	91 30       	cpi	r25, 0x01	; 1
    41ca:	a9 f0       	breq	.+42     	; 0x41f6 <udc_process_setup+0x280>
    41cc:	98 c0       	rjmp	.+304    	; 0x42fe <udc_process_setup+0x388>
    41ce:	95 30       	cpi	r25, 0x05	; 5
    41d0:	21 f0       	breq	.+8      	; 0x41da <udc_process_setup+0x264>
    41d2:	99 30       	cpi	r25, 0x09	; 9
    41d4:	09 f4       	brne	.+2      	; 0x41d8 <udc_process_setup+0x262>
    41d6:	43 c0       	rjmp	.+134    	; 0x425e <udc_process_setup+0x2e8>
    41d8:	92 c0       	rjmp	.+292    	; 0x42fe <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    41da:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    41de:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    41e2:	89 2b       	or	r24, r25
    41e4:	09 f0       	breq	.+2      	; 0x41e8 <udc_process_setup+0x272>
    41e6:	1b c1       	rjmp	.+566    	; 0x441e <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    41e8:	89 ea       	ldi	r24, 0xA9	; 169
    41ea:	9e e1       	ldi	r25, 0x1E	; 30
    41ec:	80 93 2d 24 	sts	0x242D, r24	; 0x80242d <udd_g_ctrlreq+0xc>
    41f0:	90 93 2e 24 	sts	0x242E, r25	; 0x80242e <udd_g_ctrlreq+0xd>
    41f4:	6e c1       	rjmp	.+732    	; 0x44d2 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    41f6:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    41fa:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    41fe:	89 2b       	or	r24, r25
    4200:	09 f0       	breq	.+2      	; 0x4204 <udc_process_setup+0x28e>
    4202:	0d c1       	rjmp	.+538    	; 0x441e <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    4204:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    4208:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    420c:	01 97       	sbiw	r24, 0x01	; 1
    420e:	09 f0       	breq	.+2      	; 0x4212 <udc_process_setup+0x29c>
    4210:	06 c1       	rjmp	.+524    	; 0x441e <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    4212:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <udc_device_status>
    4216:	90 91 19 24 	lds	r25, 0x2419	; 0x802419 <udc_device_status+0x1>
    421a:	8d 7f       	andi	r24, 0xFD	; 253
    421c:	80 93 18 24 	sts	0x2418, r24	; 0x802418 <udc_device_status>
    4220:	90 93 19 24 	sts	0x2419, r25	; 0x802419 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    4224:	0e 94 82 17 	call	0x2f04	; 0x2f04 <usb_callback_remotewakeup_disable>
    4228:	54 c1       	rjmp	.+680    	; 0x44d2 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    422a:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    422e:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    4232:	89 2b       	or	r24, r25
    4234:	09 f0       	breq	.+2      	; 0x4238 <udc_process_setup+0x2c2>
    4236:	f3 c0       	rjmp	.+486    	; 0x441e <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    4238:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    423c:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	09 f0       	breq	.+2      	; 0x4246 <udc_process_setup+0x2d0>
    4244:	b2 c0       	rjmp	.+356    	; 0x43aa <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    4246:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <udc_device_status>
    424a:	90 91 19 24 	lds	r25, 0x2419	; 0x802419 <udc_device_status+0x1>
    424e:	82 60       	ori	r24, 0x02	; 2
    4250:	80 93 18 24 	sts	0x2418, r24	; 0x802418 <udc_device_status>
    4254:	90 93 19 24 	sts	0x2419, r25	; 0x802419 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    4258:	0e 94 81 17 	call	0x2f02	; 0x2f02 <usb_callback_remotewakeup_enable>
    425c:	3a c1       	rjmp	.+628    	; 0x44d2 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    425e:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    4262:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    4266:	89 2b       	or	r24, r25
    4268:	09 f0       	breq	.+2      	; 0x426c <udc_process_setup+0x2f6>
    426a:	d9 c0       	rjmp	.+434    	; 0x441e <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    426c:	0e 94 06 12 	call	0x240c	; 0x240c <udd_getaddress>
    4270:	88 23       	and	r24, r24
    4272:	09 f4       	brne	.+2      	; 0x4276 <udc_process_setup+0x300>
    4274:	9f c0       	rjmp	.+318    	; 0x43b4 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    4276:	20 91 23 24 	lds	r18, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    427a:	30 91 24 24 	lds	r19, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    427e:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    4280:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    4284:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    4288:	81 89       	ldd	r24, Z+17	; 0x11
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	82 17       	cp	r24, r18
    428e:	93 07       	cpc	r25, r19
    4290:	08 f4       	brcc	.+2      	; 0x4294 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    4292:	90 c0       	rjmp	.+288    	; 0x43b4 <udc_process_setup+0x43e>
    4294:	16 de       	rcall	.-980    	; 0x3ec2 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    4296:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    429a:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    429e:	80 93 14 24 	sts	0x2414, r24	; 0x802414 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    42a2:	88 23       	and	r24, r24
    42a4:	09 f4       	brne	.+2      	; 0x42a8 <udc_process_setup+0x332>
    42a6:	15 c1       	rjmp	.+554    	; 0x44d2 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    42a8:	99 27       	eor	r25, r25
    42aa:	81 50       	subi	r24, 0x01	; 1
    42ac:	90 4c       	sbci	r25, 0xC0	; 192
    42ae:	88 0f       	add	r24, r24
    42b0:	99 1f       	adc	r25, r25
    42b2:	88 0f       	add	r24, r24
    42b4:	99 1f       	adc	r25, r25
    42b6:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    42ba:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    42be:	e8 0f       	add	r30, r24
    42c0:	f9 1f       	adc	r31, r25
    42c2:	e0 93 12 24 	sts	0x2412, r30	; 0x802412 <udc_ptr_conf>
    42c6:	f0 93 13 24 	sts	0x2413, r31	; 0x802413 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    42ca:	01 90       	ld	r0, Z+
    42cc:	f0 81       	ld	r31, Z
    42ce:	e0 2d       	mov	r30, r0
    42d0:	84 81       	ldd	r24, Z+4	; 0x04
    42d2:	88 23       	and	r24, r24
    42d4:	09 f4       	brne	.+2      	; 0x42d8 <udc_process_setup+0x362>
    42d6:	fd c0       	rjmp	.+506    	; 0x44d2 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    42d8:	c0 e0       	ldi	r28, 0x00	; 0
    42da:	60 e0       	ldi	r22, 0x00	; 0
    42dc:	8c 2f       	mov	r24, r28
    42de:	bb dd       	rcall	.-1162   	; 0x3e56 <udc_iface_enable>
    42e0:	88 23       	and	r24, r24
    42e2:	09 f4       	brne	.+2      	; 0x42e6 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    42e4:	67 c0       	rjmp	.+206    	; 0x43b4 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    42e6:	cf 5f       	subi	r28, 0xFF	; 255
    42e8:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <udc_ptr_conf>
    42ec:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    42f0:	01 90       	ld	r0, Z+
    42f2:	f0 81       	ld	r31, Z
    42f4:	e0 2d       	mov	r30, r0
    42f6:	84 81       	ldd	r24, Z+4	; 0x04
    42f8:	c8 17       	cp	r28, r24
    42fa:	78 f3       	brcs	.-34     	; 0x42da <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    42fc:	ea c0       	rjmp	.+468    	; 0x44d2 <udc_process_setup+0x55c>
    42fe:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4300:	e9 f4       	brne	.+58     	; 0x433c <udc_process_setup+0x3c6>
    4302:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    4306:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    4308:	c9 f4       	brne	.+50     	; 0x433c <udc_process_setup+0x3c6>
    430a:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    430e:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    4312:	89 2b       	or	r24, r25
    4314:	09 f0       	breq	.+2      	; 0x4318 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4316:	53 c0       	rjmp	.+166    	; 0x43be <udc_process_setup+0x448>
    4318:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    431c:	88 23       	and	r24, r24
    431e:	09 f4       	brne	.+2      	; 0x4322 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4320:	4e c0       	rjmp	.+156    	; 0x43be <udc_process_setup+0x448>
    4322:	e1 e2       	ldi	r30, 0x21	; 33
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    4324:	f4 e2       	ldi	r31, 0x24	; 36

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    4326:	c4 81       	ldd	r28, Z+4	; 0x04
    4328:	d2 81       	ldd	r29, Z+2	; 0x02
    432a:	8c 2f       	mov	r24, r28
    432c:	52 dd       	rcall	.-1372   	; 0x3dd2 <udc_iface_disable>
    432e:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    4330:	09 f4       	brne	.+2      	; 0x4334 <udc_process_setup+0x3be>
    4332:	40 c0       	rjmp	.+128    	; 0x43b4 <udc_process_setup+0x43e>
    4334:	6d 2f       	mov	r22, r29
    4336:	8c 2f       	mov	r24, r28
    4338:	8e dd       	rcall	.-1252   	; 0x3e56 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    433a:	3a c0       	rjmp	.+116    	; 0x43b0 <udc_process_setup+0x43a>
    433c:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    433e:	d1 f5       	brne	.+116    	; 0x43b4 <udc_process_setup+0x43e>
    4340:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <udd_g_ctrlreq+0x1>
    4344:	81 30       	cpi	r24, 0x01	; 1
    4346:	19 f0       	breq	.+6      	; 0x434e <udc_process_setup+0x3d8>
    4348:	83 30       	cpi	r24, 0x03	; 3
    434a:	a1 f0       	breq	.+40     	; 0x4374 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    434c:	30 c0       	rjmp	.+96     	; 0x43ae <udc_process_setup+0x438>
    434e:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    4352:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    4356:	89 2b       	or	r24, r25
    4358:	09 f0       	breq	.+2      	; 0x435c <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    435a:	61 c0       	rjmp	.+194    	; 0x441e <udc_process_setup+0x4a8>
    435c:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    4360:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    4364:	89 2b       	or	r24, r25
    4366:	09 f0       	breq	.+2      	; 0x436a <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4368:	5a c0       	rjmp	.+180    	; 0x441e <udc_process_setup+0x4a8>
    436a:	80 91 25 24 	lds	r24, 0x2425	; 0x802425 <udd_g_ctrlreq+0x4>
    436e:	0e 94 bb 12 	call	0x2576	; 0x2576 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4372:	1e c0       	rjmp	.+60     	; 0x43b0 <udc_process_setup+0x43a>
    4374:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <udd_g_ctrlreq+0x6>
    4378:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <udd_g_ctrlreq+0x7>
    437c:	89 2b       	or	r24, r25
    437e:	09 f0       	breq	.+2      	; 0x4382 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4380:	4e c0       	rjmp	.+156    	; 0x441e <udc_process_setup+0x4a8>
    4382:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x2>
    4386:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x3>
    438a:	89 2b       	or	r24, r25
    438c:	09 f0       	breq	.+2      	; 0x4390 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    438e:	47 c0       	rjmp	.+142    	; 0x441e <udc_process_setup+0x4a8>
    4390:	c1 e2       	ldi	r28, 0x21	; 33
    4392:	d4 e2       	ldi	r29, 0x24	; 36
    4394:	8c 81       	ldd	r24, Y+4	; 0x04
    4396:	0e 94 bd 13 	call	0x277a	; 0x277a <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    439a:	8c 81       	ldd	r24, Y+4	; 0x04
    439c:	0e 94 28 14 	call	0x2850	; 0x2850 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    43a0:	07 c0       	rjmp	.+14     	; 0x43b0 <udc_process_setup+0x43a>
    43a2:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    43a4:	05 c0       	rjmp	.+10     	; 0x43b0 <udc_process_setup+0x43a>
    43a6:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    43a8:	03 c0       	rjmp	.+6      	; 0x43b0 <udc_process_setup+0x43a>
    43aa:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    43ac:	01 c0       	rjmp	.+2      	; 0x43b0 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    43b2:	90 c0       	rjmp	.+288    	; 0x44d4 <udc_process_setup+0x55e>
    43b4:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq>
    43b8:	8f 71       	andi	r24, 0x1F	; 31
    43ba:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    43bc:	81 f5       	brne	.+96     	; 0x441e <udc_process_setup+0x4a8>
    43be:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    43c2:	88 23       	and	r24, r24
    43c4:	09 f4       	brne	.+2      	; 0x43c8 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    43c6:	71 c0       	rjmp	.+226    	; 0x44aa <udc_process_setup+0x534>
    43c8:	00 91 25 24 	lds	r16, 0x2425	; 0x802425 <udd_g_ctrlreq+0x4>
    43cc:	10 91 26 24 	lds	r17, 0x2426	; 0x802426 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    43d0:	c0 91 12 24 	lds	r28, 0x2412	; 0x802412 <udc_ptr_conf>
    43d4:	d0 91 13 24 	lds	r29, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    43d8:	e8 81       	ld	r30, Y
    43da:	f9 81       	ldd	r31, Y+1	; 0x01
    43dc:	84 81       	ldd	r24, Z+4	; 0x04
    43de:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    43e0:	08 f0       	brcs	.+2      	; 0x43e4 <udc_process_setup+0x46e>
    43e2:	65 c0       	rjmp	.+202    	; 0x44ae <udc_process_setup+0x538>
    43e4:	60 e0       	ldi	r22, 0x00	; 0
    43e6:	80 2f       	mov	r24, r16
    43e8:	ba dc       	rcall	.-1676   	; 0x3d5e <udc_update_iface_desc>
    43ea:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    43ec:	c1 f0       	breq	.+48     	; 0x441e <udc_process_setup+0x4a8>
    43ee:	f8 01       	movw	r30, r16
    43f0:	ff 27       	eor	r31, r31
    43f2:	cf 01       	movw	r24, r30
    43f4:	88 0f       	add	r24, r24
    43f6:	99 1f       	adc	r25, r25
    43f8:	ea 81       	ldd	r30, Y+2	; 0x02
    43fa:	fb 81       	ldd	r31, Y+3	; 0x03
    43fc:	e8 0f       	add	r30, r24
    43fe:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4400:	c0 81       	ld	r28, Z
    4402:	d1 81       	ldd	r29, Z+1	; 0x01
    4404:	ee 81       	ldd	r30, Y+6	; 0x06
    4406:	ff 81       	ldd	r31, Y+7	; 0x07
    4408:	19 95       	eicall
    440a:	68 2f       	mov	r22, r24
    440c:	80 2f       	mov	r24, r16
    440e:	a7 dc       	rcall	.-1714   	; 0x3d5e <udc_update_iface_desc>
    4410:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    4412:	29 f0       	breq	.+10     	; 0x441e <udc_process_setup+0x4a8>
    4414:	ec 81       	ldd	r30, Y+4	; 0x04
    4416:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    4418:	19 95       	eicall
    441a:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    441c:	5b c0       	rjmp	.+182    	; 0x44d4 <udc_process_setup+0x55e>
    441e:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq>
    4422:	8f 71       	andi	r24, 0x1F	; 31
    4424:	82 30       	cpi	r24, 0x02	; 2
    4426:	09 f0       	breq	.+2      	; 0x442a <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4428:	44 c0       	rjmp	.+136    	; 0x44b2 <udc_process_setup+0x53c>
    442a:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <udc_num_configuration>
    442e:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4430:	b1 f1       	breq	.+108    	; 0x449e <udc_process_setup+0x528>
    4432:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    4436:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    443a:	ed 91       	ld	r30, X+
    443c:	fc 91       	ld	r31, X
    443e:	11 97       	sbiw	r26, 0x01	; 1
    4440:	84 81       	ldd	r24, Z+4	; 0x04
    4442:	88 23       	and	r24, r24
    4444:	71 f1       	breq	.+92     	; 0x44a2 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    4446:	c0 e0       	ldi	r28, 0x00	; 0
    4448:	ec 2f       	mov	r30, r28
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	ee 0f       	add	r30, r30
    444e:	ff 1f       	adc	r31, r31
    4450:	12 96       	adiw	r26, 0x02	; 2
    4452:	8d 91       	ld	r24, X+
    4454:	9c 91       	ld	r25, X
    4456:	13 97       	sbiw	r26, 0x03	; 3
    4458:	e8 0f       	add	r30, r24
    445a:	f9 1f       	adc	r31, r25
    445c:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    445e:	11 81       	ldd	r17, Z+1	; 0x01
    4460:	d8 01       	movw	r26, r16
    4462:	16 96       	adiw	r26, 0x06	; 6
    4464:	ed 91       	ld	r30, X+
    4466:	fc 91       	ld	r31, X
    4468:	17 97       	sbiw	r26, 0x07	; 7
    446a:	19 95       	eicall
    446c:	68 2f       	mov	r22, r24
    446e:	8c 2f       	mov	r24, r28
    4470:	76 dc       	rcall	.-1812   	; 0x3d5e <udc_update_iface_desc>
    4472:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    4474:	79 f1       	breq	.+94     	; 0x44d4 <udc_process_setup+0x55e>
    4476:	d8 01       	movw	r26, r16
    4478:	14 96       	adiw	r26, 0x04	; 4
    447a:	ed 91       	ld	r30, X+
    447c:	fc 91       	ld	r31, X
    447e:	15 97       	sbiw	r26, 0x05	; 5
    4480:	19 95       	eicall
    4482:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    4484:	27 c0       	rjmp	.+78     	; 0x44d4 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4486:	cf 5f       	subi	r28, 0xFF	; 255
    4488:	a0 91 12 24 	lds	r26, 0x2412	; 0x802412 <udc_ptr_conf>
    448c:	b0 91 13 24 	lds	r27, 0x2413	; 0x802413 <udc_ptr_conf+0x1>
    4490:	ed 91       	ld	r30, X+
    4492:	fc 91       	ld	r31, X
    4494:	11 97       	sbiw	r26, 0x01	; 1
    4496:	94 81       	ldd	r25, Z+4	; 0x04
    4498:	c9 17       	cp	r28, r25
    449a:	b0 f2       	brcs	.-84     	; 0x4448 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    449c:	1b c0       	rjmp	.+54     	; 0x44d4 <udc_process_setup+0x55e>
    449e:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    44a0:	19 c0       	rjmp	.+50     	; 0x44d4 <udc_process_setup+0x55e>
    44a2:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    44a4:	17 c0       	rjmp	.+46     	; 0x44d4 <udc_process_setup+0x55e>
    44a6:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    44a8:	15 c0       	rjmp	.+42     	; 0x44d4 <udc_process_setup+0x55e>
    44aa:	80 e0       	ldi	r24, 0x00	; 0
    44ac:	13 c0       	rjmp	.+38     	; 0x44d4 <udc_process_setup+0x55e>
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	11 c0       	rjmp	.+34     	; 0x44d4 <udc_process_setup+0x55e>
    44b2:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    44b4:	0f c0       	rjmp	.+30     	; 0x44d4 <udc_process_setup+0x55e>
    44b6:	98 2f       	mov	r25, r24
    44b8:	90 76       	andi	r25, 0x60	; 96
    44ba:	09 f0       	breq	.+2      	; 0x44be <udc_process_setup+0x548>
    44bc:	7b cf       	rjmp	.-266    	; 0x43b4 <udc_process_setup+0x43e>
    44be:	74 cd       	rjmp	.-1304   	; 0x3fa8 <udc_process_setup+0x32>
    44c0:	98 2f       	mov	r25, r24
    44c2:	90 76       	andi	r25, 0x60	; 96
    44c4:	09 f0       	breq	.+2      	; 0x44c8 <udc_process_setup+0x552>
    44c6:	76 cf       	rjmp	.-276    	; 0x43b4 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    44c8:	77 ce       	rjmp	.-786    	; 0x41b8 <udc_process_setup+0x242>
		str = udc_string_product_name;
    44ca:	3c e0       	ldi	r19, 0x0C	; 12
    44cc:	e4 ec       	ldi	r30, 0xC4	; 196
    44ce:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    44d0:	eb cd       	rjmp	.-1066   	; 0x40a8 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	df 91       	pop	r29
    44d6:	cf 91       	pop	r28
    44d8:	1f 91       	pop	r17
    44da:	0f 91       	pop	r16
    44dc:	08 95       	ret

000044de <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    44de:	cf 93       	push	r28
    44e0:	df 93       	push	r29
    44e2:	1f 92       	push	r1
    44e4:	cd b7       	in	r28, 0x3d	; 61
    44e6:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    44e8:	80 91 3b 24 	lds	r24, 0x243B	; 0x80243b <stdio_base>
    44ec:	90 91 3c 24 	lds	r25, 0x243C	; 0x80243c <stdio_base+0x1>
    44f0:	e0 91 37 24 	lds	r30, 0x2437	; 0x802437 <ptr_get>
    44f4:	f0 91 38 24 	lds	r31, 0x2438	; 0x802438 <ptr_get+0x1>
    44f8:	be 01       	movw	r22, r28
    44fa:	6f 5f       	subi	r22, 0xFF	; 255
    44fc:	7f 4f       	sbci	r23, 0xFF	; 255
    44fe:	19 95       	eicall
	return c;
    4500:	89 81       	ldd	r24, Y+1	; 0x01
}
    4502:	08 2e       	mov	r0, r24
    4504:	00 0c       	add	r0, r0
    4506:	99 0b       	sbc	r25, r25
    4508:	0f 90       	pop	r0
    450a:	df 91       	pop	r29
    450c:	cf 91       	pop	r28
    450e:	08 95       	ret

00004510 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    4510:	80 91 1a 24 	lds	r24, 0x241A	; 0x80241a <stdio_usb_interface_enable>
    4514:	88 23       	and	r24, r24
    4516:	81 f0       	breq	.+32     	; 0x4538 <stdio_usb_putchar+0x28>
    4518:	86 2f       	mov	r24, r22
    451a:	08 2e       	mov	r0, r24
    451c:	00 0c       	add	r0, r0
    451e:	99 0b       	sbc	r25, r25
    4520:	df db       	rcall	.-2114   	; 0x3ce0 <udi_cdc_putc>
    4522:	21 e0       	ldi	r18, 0x01	; 1
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	89 2b       	or	r24, r25
    4528:	11 f0       	breq	.+4      	; 0x452e <stdio_usb_putchar+0x1e>
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	88 27       	eor	r24, r24
    4530:	99 27       	eor	r25, r25
    4532:	82 1b       	sub	r24, r18
    4534:	93 0b       	sbc	r25, r19
    4536:	08 95       	ret
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	08 95       	ret

0000453e <stdio_usb_getchar>:
    453e:	cf 93       	push	r28
    4540:	df 93       	push	r29
    4542:	80 91 1a 24 	lds	r24, 0x241A	; 0x80241a <stdio_usb_interface_enable>
    4546:	81 11       	cpse	r24, r1
    4548:	03 c0       	rjmp	.+6      	; 0x4550 <stdio_usb_getchar+0x12>
    454a:	fb 01       	movw	r30, r22
    454c:	10 82       	st	Z, r1
    454e:	03 c0       	rjmp	.+6      	; 0x4556 <stdio_usb_getchar+0x18>
    4550:	eb 01       	movw	r28, r22
    4552:	3e db       	rcall	.-2436   	; 0x3bd0 <udi_cdc_getc>
    4554:	88 83       	st	Y, r24
    4556:	df 91       	pop	r29
    4558:	cf 91       	pop	r28
    455a:	08 95       	ret

0000455c <stdio_usb_enable>:
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	80 93 1a 24 	sts	0x241A, r24	; 0x80241a <stdio_usb_interface_enable>
    4562:	08 95       	ret

00004564 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    4564:	10 92 3b 24 	sts	0x243B, r1	; 0x80243b <stdio_base>
    4568:	10 92 3c 24 	sts	0x243C, r1	; 0x80243c <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    456c:	88 e8       	ldi	r24, 0x88	; 136
    456e:	92 e2       	ldi	r25, 0x22	; 34
    4570:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <ptr_put>
    4574:	90 93 3a 24 	sts	0x243A, r25	; 0x80243a <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    4578:	8f e9       	ldi	r24, 0x9F	; 159
    457a:	92 e2       	ldi	r25, 0x22	; 34
    457c:	80 93 37 24 	sts	0x2437, r24	; 0x802437 <ptr_get>
    4580:	90 93 38 24 	sts	0x2438, r25	; 0x802438 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    4584:	9b dc       	rcall	.-1738   	; 0x3ebc <udc_start>
    4586:	6f e6       	ldi	r22, 0x6F	; 111
    4588:	72 e2       	ldi	r23, 0x22	; 34
    458a:	89 ec       	ldi	r24, 0xC9	; 201
    458c:	92 e2       	ldi	r25, 0x22	; 34
    458e:	79 c0       	rjmp	.+242    	; 0x4682 <fdevopen>
    4590:	08 95       	ret

00004592 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    4592:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    4594:	80 91 3b 24 	lds	r24, 0x243B	; 0x80243b <stdio_base>
    4598:	90 91 3c 24 	lds	r25, 0x243C	; 0x80243c <stdio_base+0x1>
    459c:	e0 91 39 24 	lds	r30, 0x2439	; 0x802439 <ptr_put>
    45a0:	f0 91 3a 24 	lds	r31, 0x243A	; 0x80243a <ptr_put+0x1>
    45a4:	19 95       	eicall
    45a6:	99 23       	and	r25, r25
    45a8:	1c f0       	brlt	.+6      	; 0x45b0 <_write+0x1e>
		return -1;
	}
	return 1;
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    45b0:	8f ef       	ldi	r24, 0xFF	; 255
    45b2:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    45b4:	08 95       	ret

000045b6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    45b6:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    45ba:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    45bc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    45be:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    45c2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    45c4:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    45c8:	08 95       	ret

000045ca <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    45ca:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    45cc:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    45ce:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    45d0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    45d2:	60 83       	st	Z, r22
	ret                             // Return to caller
    45d4:	08 95       	ret

000045d6 <__udivmodhi4>:
    45d6:	aa 1b       	sub	r26, r26
    45d8:	bb 1b       	sub	r27, r27
    45da:	51 e1       	ldi	r21, 0x11	; 17
    45dc:	07 c0       	rjmp	.+14     	; 0x45ec <__udivmodhi4_ep>

000045de <__udivmodhi4_loop>:
    45de:	aa 1f       	adc	r26, r26
    45e0:	bb 1f       	adc	r27, r27
    45e2:	a6 17       	cp	r26, r22
    45e4:	b7 07       	cpc	r27, r23
    45e6:	10 f0       	brcs	.+4      	; 0x45ec <__udivmodhi4_ep>
    45e8:	a6 1b       	sub	r26, r22
    45ea:	b7 0b       	sbc	r27, r23

000045ec <__udivmodhi4_ep>:
    45ec:	88 1f       	adc	r24, r24
    45ee:	99 1f       	adc	r25, r25
    45f0:	5a 95       	dec	r21
    45f2:	a9 f7       	brne	.-22     	; 0x45de <__udivmodhi4_loop>
    45f4:	80 95       	com	r24
    45f6:	90 95       	com	r25
    45f8:	bc 01       	movw	r22, r24
    45fa:	cd 01       	movw	r24, r26
    45fc:	08 95       	ret

000045fe <__udivmodsi4>:
    45fe:	a1 e2       	ldi	r26, 0x21	; 33
    4600:	1a 2e       	mov	r1, r26
    4602:	aa 1b       	sub	r26, r26
    4604:	bb 1b       	sub	r27, r27
    4606:	fd 01       	movw	r30, r26
    4608:	0d c0       	rjmp	.+26     	; 0x4624 <__udivmodsi4_ep>

0000460a <__udivmodsi4_loop>:
    460a:	aa 1f       	adc	r26, r26
    460c:	bb 1f       	adc	r27, r27
    460e:	ee 1f       	adc	r30, r30
    4610:	ff 1f       	adc	r31, r31
    4612:	a2 17       	cp	r26, r18
    4614:	b3 07       	cpc	r27, r19
    4616:	e4 07       	cpc	r30, r20
    4618:	f5 07       	cpc	r31, r21
    461a:	20 f0       	brcs	.+8      	; 0x4624 <__udivmodsi4_ep>
    461c:	a2 1b       	sub	r26, r18
    461e:	b3 0b       	sbc	r27, r19
    4620:	e4 0b       	sbc	r30, r20
    4622:	f5 0b       	sbc	r31, r21

00004624 <__udivmodsi4_ep>:
    4624:	66 1f       	adc	r22, r22
    4626:	77 1f       	adc	r23, r23
    4628:	88 1f       	adc	r24, r24
    462a:	99 1f       	adc	r25, r25
    462c:	1a 94       	dec	r1
    462e:	69 f7       	brne	.-38     	; 0x460a <__udivmodsi4_loop>
    4630:	60 95       	com	r22
    4632:	70 95       	com	r23
    4634:	80 95       	com	r24
    4636:	90 95       	com	r25
    4638:	9b 01       	movw	r18, r22
    463a:	ac 01       	movw	r20, r24
    463c:	bd 01       	movw	r22, r26
    463e:	cf 01       	movw	r24, r30
    4640:	08 95       	ret

00004642 <__tablejump2__>:
    4642:	ee 0f       	add	r30, r30
    4644:	ff 1f       	adc	r31, r31
    4646:	88 1f       	adc	r24, r24
    4648:	8b bf       	out	0x3b, r24	; 59
    464a:	07 90       	elpm	r0, Z+
    464c:	f6 91       	elpm	r31, Z
    464e:	e0 2d       	mov	r30, r0
    4650:	19 94       	eijmp

00004652 <__umulhisi3>:
    4652:	a2 9f       	mul	r26, r18
    4654:	b0 01       	movw	r22, r0
    4656:	b3 9f       	mul	r27, r19
    4658:	c0 01       	movw	r24, r0
    465a:	a3 9f       	mul	r26, r19
    465c:	70 0d       	add	r23, r0
    465e:	81 1d       	adc	r24, r1
    4660:	11 24       	eor	r1, r1
    4662:	91 1d       	adc	r25, r1
    4664:	b2 9f       	mul	r27, r18
    4666:	70 0d       	add	r23, r0
    4668:	81 1d       	adc	r24, r1
    466a:	11 24       	eor	r1, r1
    466c:	91 1d       	adc	r25, r1
    466e:	08 95       	ret

00004670 <memcpy>:
    4670:	fb 01       	movw	r30, r22
    4672:	dc 01       	movw	r26, r24
    4674:	02 c0       	rjmp	.+4      	; 0x467a <memcpy+0xa>
    4676:	01 90       	ld	r0, Z+
    4678:	0d 92       	st	X+, r0
    467a:	41 50       	subi	r20, 0x01	; 1
    467c:	50 40       	sbci	r21, 0x00	; 0
    467e:	d8 f7       	brcc	.-10     	; 0x4676 <memcpy+0x6>
    4680:	08 95       	ret

00004682 <fdevopen>:
    4682:	0f 93       	push	r16
    4684:	1f 93       	push	r17
    4686:	cf 93       	push	r28
    4688:	df 93       	push	r29
    468a:	00 97       	sbiw	r24, 0x00	; 0
    468c:	31 f4       	brne	.+12     	; 0x469a <fdevopen+0x18>
    468e:	61 15       	cp	r22, r1
    4690:	71 05       	cpc	r23, r1
    4692:	19 f4       	brne	.+6      	; 0x469a <fdevopen+0x18>
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	39 c0       	rjmp	.+114    	; 0x470c <fdevopen+0x8a>
    469a:	8b 01       	movw	r16, r22
    469c:	ec 01       	movw	r28, r24
    469e:	6e e0       	ldi	r22, 0x0E	; 14
    46a0:	70 e0       	ldi	r23, 0x00	; 0
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	41 d2       	rcall	.+1154   	; 0x4b2a <calloc>
    46a8:	fc 01       	movw	r30, r24
    46aa:	89 2b       	or	r24, r25
    46ac:	99 f3       	breq	.-26     	; 0x4694 <fdevopen+0x12>
    46ae:	80 e8       	ldi	r24, 0x80	; 128
    46b0:	83 83       	std	Z+3, r24	; 0x03
    46b2:	01 15       	cp	r16, r1
    46b4:	11 05       	cpc	r17, r1
    46b6:	71 f0       	breq	.+28     	; 0x46d4 <fdevopen+0x52>
    46b8:	02 87       	std	Z+10, r16	; 0x0a
    46ba:	13 87       	std	Z+11, r17	; 0x0b
    46bc:	81 e8       	ldi	r24, 0x81	; 129
    46be:	83 83       	std	Z+3, r24	; 0x03
    46c0:	80 91 3d 24 	lds	r24, 0x243D	; 0x80243d <__iob>
    46c4:	90 91 3e 24 	lds	r25, 0x243E	; 0x80243e <__iob+0x1>
    46c8:	89 2b       	or	r24, r25
    46ca:	21 f4       	brne	.+8      	; 0x46d4 <fdevopen+0x52>
    46cc:	e0 93 3d 24 	sts	0x243D, r30	; 0x80243d <__iob>
    46d0:	f0 93 3e 24 	sts	0x243E, r31	; 0x80243e <__iob+0x1>
    46d4:	20 97       	sbiw	r28, 0x00	; 0
    46d6:	c9 f0       	breq	.+50     	; 0x470a <fdevopen+0x88>
    46d8:	c0 87       	std	Z+8, r28	; 0x08
    46da:	d1 87       	std	Z+9, r29	; 0x09
    46dc:	83 81       	ldd	r24, Z+3	; 0x03
    46de:	82 60       	ori	r24, 0x02	; 2
    46e0:	83 83       	std	Z+3, r24	; 0x03
    46e2:	80 91 3f 24 	lds	r24, 0x243F	; 0x80243f <__iob+0x2>
    46e6:	90 91 40 24 	lds	r25, 0x2440	; 0x802440 <__iob+0x3>
    46ea:	89 2b       	or	r24, r25
    46ec:	71 f4       	brne	.+28     	; 0x470a <fdevopen+0x88>
    46ee:	e0 93 3f 24 	sts	0x243F, r30	; 0x80243f <__iob+0x2>
    46f2:	f0 93 40 24 	sts	0x2440, r31	; 0x802440 <__iob+0x3>
    46f6:	80 91 41 24 	lds	r24, 0x2441	; 0x802441 <__iob+0x4>
    46fa:	90 91 42 24 	lds	r25, 0x2442	; 0x802442 <__iob+0x5>
    46fe:	89 2b       	or	r24, r25
    4700:	21 f4       	brne	.+8      	; 0x470a <fdevopen+0x88>
    4702:	e0 93 41 24 	sts	0x2441, r30	; 0x802441 <__iob+0x4>
    4706:	f0 93 42 24 	sts	0x2442, r31	; 0x802442 <__iob+0x5>
    470a:	cf 01       	movw	r24, r30
    470c:	df 91       	pop	r29
    470e:	cf 91       	pop	r28
    4710:	1f 91       	pop	r17
    4712:	0f 91       	pop	r16
    4714:	08 95       	ret

00004716 <printf>:
    4716:	cf 93       	push	r28
    4718:	df 93       	push	r29
    471a:	cd b7       	in	r28, 0x3d	; 61
    471c:	de b7       	in	r29, 0x3e	; 62
    471e:	ae 01       	movw	r20, r28
    4720:	4a 5f       	subi	r20, 0xFA	; 250
    4722:	5f 4f       	sbci	r21, 0xFF	; 255
    4724:	fa 01       	movw	r30, r20
    4726:	61 91       	ld	r22, Z+
    4728:	71 91       	ld	r23, Z+
    472a:	af 01       	movw	r20, r30
    472c:	80 91 3f 24 	lds	r24, 0x243F	; 0x80243f <__iob+0x2>
    4730:	90 91 40 24 	lds	r25, 0x2440	; 0x802440 <__iob+0x3>
    4734:	03 d0       	rcall	.+6      	; 0x473c <vfprintf>
    4736:	df 91       	pop	r29
    4738:	cf 91       	pop	r28
    473a:	08 95       	ret

0000473c <vfprintf>:
    473c:	2f 92       	push	r2
    473e:	3f 92       	push	r3
    4740:	4f 92       	push	r4
    4742:	5f 92       	push	r5
    4744:	6f 92       	push	r6
    4746:	7f 92       	push	r7
    4748:	8f 92       	push	r8
    474a:	9f 92       	push	r9
    474c:	af 92       	push	r10
    474e:	bf 92       	push	r11
    4750:	cf 92       	push	r12
    4752:	df 92       	push	r13
    4754:	ef 92       	push	r14
    4756:	ff 92       	push	r15
    4758:	0f 93       	push	r16
    475a:	1f 93       	push	r17
    475c:	cf 93       	push	r28
    475e:	df 93       	push	r29
    4760:	cd b7       	in	r28, 0x3d	; 61
    4762:	de b7       	in	r29, 0x3e	; 62
    4764:	2b 97       	sbiw	r28, 0x0b	; 11
    4766:	cd bf       	out	0x3d, r28	; 61
    4768:	de bf       	out	0x3e, r29	; 62
    476a:	6c 01       	movw	r12, r24
    476c:	7b 01       	movw	r14, r22
    476e:	8a 01       	movw	r16, r20
    4770:	fc 01       	movw	r30, r24
    4772:	16 82       	std	Z+6, r1	; 0x06
    4774:	17 82       	std	Z+7, r1	; 0x07
    4776:	83 81       	ldd	r24, Z+3	; 0x03
    4778:	81 ff       	sbrs	r24, 1
    477a:	bf c1       	rjmp	.+894    	; 0x4afa <vfprintf+0x3be>
    477c:	ce 01       	movw	r24, r28
    477e:	01 96       	adiw	r24, 0x01	; 1
    4780:	3c 01       	movw	r6, r24
    4782:	f6 01       	movw	r30, r12
    4784:	93 81       	ldd	r25, Z+3	; 0x03
    4786:	f7 01       	movw	r30, r14
    4788:	93 fd       	sbrc	r25, 3
    478a:	85 91       	lpm	r24, Z+
    478c:	93 ff       	sbrs	r25, 3
    478e:	81 91       	ld	r24, Z+
    4790:	7f 01       	movw	r14, r30
    4792:	88 23       	and	r24, r24
    4794:	09 f4       	brne	.+2      	; 0x4798 <vfprintf+0x5c>
    4796:	ad c1       	rjmp	.+858    	; 0x4af2 <vfprintf+0x3b6>
    4798:	85 32       	cpi	r24, 0x25	; 37
    479a:	39 f4       	brne	.+14     	; 0x47aa <vfprintf+0x6e>
    479c:	93 fd       	sbrc	r25, 3
    479e:	85 91       	lpm	r24, Z+
    47a0:	93 ff       	sbrs	r25, 3
    47a2:	81 91       	ld	r24, Z+
    47a4:	7f 01       	movw	r14, r30
    47a6:	85 32       	cpi	r24, 0x25	; 37
    47a8:	21 f4       	brne	.+8      	; 0x47b2 <vfprintf+0x76>
    47aa:	b6 01       	movw	r22, r12
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	15 d3       	rcall	.+1578   	; 0x4dda <fputc>
    47b0:	e8 cf       	rjmp	.-48     	; 0x4782 <vfprintf+0x46>
    47b2:	91 2c       	mov	r9, r1
    47b4:	21 2c       	mov	r2, r1
    47b6:	31 2c       	mov	r3, r1
    47b8:	ff e1       	ldi	r31, 0x1F	; 31
    47ba:	f3 15       	cp	r31, r3
    47bc:	d8 f0       	brcs	.+54     	; 0x47f4 <vfprintf+0xb8>
    47be:	8b 32       	cpi	r24, 0x2B	; 43
    47c0:	79 f0       	breq	.+30     	; 0x47e0 <vfprintf+0xa4>
    47c2:	38 f4       	brcc	.+14     	; 0x47d2 <vfprintf+0x96>
    47c4:	80 32       	cpi	r24, 0x20	; 32
    47c6:	79 f0       	breq	.+30     	; 0x47e6 <vfprintf+0xaa>
    47c8:	83 32       	cpi	r24, 0x23	; 35
    47ca:	a1 f4       	brne	.+40     	; 0x47f4 <vfprintf+0xb8>
    47cc:	23 2d       	mov	r18, r3
    47ce:	20 61       	ori	r18, 0x10	; 16
    47d0:	1d c0       	rjmp	.+58     	; 0x480c <vfprintf+0xd0>
    47d2:	8d 32       	cpi	r24, 0x2D	; 45
    47d4:	61 f0       	breq	.+24     	; 0x47ee <vfprintf+0xb2>
    47d6:	80 33       	cpi	r24, 0x30	; 48
    47d8:	69 f4       	brne	.+26     	; 0x47f4 <vfprintf+0xb8>
    47da:	23 2d       	mov	r18, r3
    47dc:	21 60       	ori	r18, 0x01	; 1
    47de:	16 c0       	rjmp	.+44     	; 0x480c <vfprintf+0xd0>
    47e0:	83 2d       	mov	r24, r3
    47e2:	82 60       	ori	r24, 0x02	; 2
    47e4:	38 2e       	mov	r3, r24
    47e6:	e3 2d       	mov	r30, r3
    47e8:	e4 60       	ori	r30, 0x04	; 4
    47ea:	3e 2e       	mov	r3, r30
    47ec:	2a c0       	rjmp	.+84     	; 0x4842 <vfprintf+0x106>
    47ee:	f3 2d       	mov	r31, r3
    47f0:	f8 60       	ori	r31, 0x08	; 8
    47f2:	1d c0       	rjmp	.+58     	; 0x482e <vfprintf+0xf2>
    47f4:	37 fc       	sbrc	r3, 7
    47f6:	2d c0       	rjmp	.+90     	; 0x4852 <vfprintf+0x116>
    47f8:	20 ed       	ldi	r18, 0xD0	; 208
    47fa:	28 0f       	add	r18, r24
    47fc:	2a 30       	cpi	r18, 0x0A	; 10
    47fe:	40 f0       	brcs	.+16     	; 0x4810 <vfprintf+0xd4>
    4800:	8e 32       	cpi	r24, 0x2E	; 46
    4802:	b9 f4       	brne	.+46     	; 0x4832 <vfprintf+0xf6>
    4804:	36 fc       	sbrc	r3, 6
    4806:	75 c1       	rjmp	.+746    	; 0x4af2 <vfprintf+0x3b6>
    4808:	23 2d       	mov	r18, r3
    480a:	20 64       	ori	r18, 0x40	; 64
    480c:	32 2e       	mov	r3, r18
    480e:	19 c0       	rjmp	.+50     	; 0x4842 <vfprintf+0x106>
    4810:	36 fe       	sbrs	r3, 6
    4812:	06 c0       	rjmp	.+12     	; 0x4820 <vfprintf+0xe4>
    4814:	8a e0       	ldi	r24, 0x0A	; 10
    4816:	98 9e       	mul	r9, r24
    4818:	20 0d       	add	r18, r0
    481a:	11 24       	eor	r1, r1
    481c:	92 2e       	mov	r9, r18
    481e:	11 c0       	rjmp	.+34     	; 0x4842 <vfprintf+0x106>
    4820:	ea e0       	ldi	r30, 0x0A	; 10
    4822:	2e 9e       	mul	r2, r30
    4824:	20 0d       	add	r18, r0
    4826:	11 24       	eor	r1, r1
    4828:	22 2e       	mov	r2, r18
    482a:	f3 2d       	mov	r31, r3
    482c:	f0 62       	ori	r31, 0x20	; 32
    482e:	3f 2e       	mov	r3, r31
    4830:	08 c0       	rjmp	.+16     	; 0x4842 <vfprintf+0x106>
    4832:	8c 36       	cpi	r24, 0x6C	; 108
    4834:	21 f4       	brne	.+8      	; 0x483e <vfprintf+0x102>
    4836:	83 2d       	mov	r24, r3
    4838:	80 68       	ori	r24, 0x80	; 128
    483a:	38 2e       	mov	r3, r24
    483c:	02 c0       	rjmp	.+4      	; 0x4842 <vfprintf+0x106>
    483e:	88 36       	cpi	r24, 0x68	; 104
    4840:	41 f4       	brne	.+16     	; 0x4852 <vfprintf+0x116>
    4842:	f7 01       	movw	r30, r14
    4844:	93 fd       	sbrc	r25, 3
    4846:	85 91       	lpm	r24, Z+
    4848:	93 ff       	sbrs	r25, 3
    484a:	81 91       	ld	r24, Z+
    484c:	7f 01       	movw	r14, r30
    484e:	81 11       	cpse	r24, r1
    4850:	b3 cf       	rjmp	.-154    	; 0x47b8 <vfprintf+0x7c>
    4852:	98 2f       	mov	r25, r24
    4854:	9f 7d       	andi	r25, 0xDF	; 223
    4856:	95 54       	subi	r25, 0x45	; 69
    4858:	93 30       	cpi	r25, 0x03	; 3
    485a:	28 f4       	brcc	.+10     	; 0x4866 <vfprintf+0x12a>
    485c:	0c 5f       	subi	r16, 0xFC	; 252
    485e:	1f 4f       	sbci	r17, 0xFF	; 255
    4860:	9f e3       	ldi	r25, 0x3F	; 63
    4862:	99 83       	std	Y+1, r25	; 0x01
    4864:	0d c0       	rjmp	.+26     	; 0x4880 <vfprintf+0x144>
    4866:	83 36       	cpi	r24, 0x63	; 99
    4868:	31 f0       	breq	.+12     	; 0x4876 <vfprintf+0x13a>
    486a:	83 37       	cpi	r24, 0x73	; 115
    486c:	71 f0       	breq	.+28     	; 0x488a <vfprintf+0x14e>
    486e:	83 35       	cpi	r24, 0x53	; 83
    4870:	09 f0       	breq	.+2      	; 0x4874 <vfprintf+0x138>
    4872:	55 c0       	rjmp	.+170    	; 0x491e <vfprintf+0x1e2>
    4874:	20 c0       	rjmp	.+64     	; 0x48b6 <vfprintf+0x17a>
    4876:	f8 01       	movw	r30, r16
    4878:	80 81       	ld	r24, Z
    487a:	89 83       	std	Y+1, r24	; 0x01
    487c:	0e 5f       	subi	r16, 0xFE	; 254
    487e:	1f 4f       	sbci	r17, 0xFF	; 255
    4880:	88 24       	eor	r8, r8
    4882:	83 94       	inc	r8
    4884:	91 2c       	mov	r9, r1
    4886:	53 01       	movw	r10, r6
    4888:	12 c0       	rjmp	.+36     	; 0x48ae <vfprintf+0x172>
    488a:	28 01       	movw	r4, r16
    488c:	f2 e0       	ldi	r31, 0x02	; 2
    488e:	4f 0e       	add	r4, r31
    4890:	51 1c       	adc	r5, r1
    4892:	f8 01       	movw	r30, r16
    4894:	a0 80       	ld	r10, Z
    4896:	b1 80       	ldd	r11, Z+1	; 0x01
    4898:	36 fe       	sbrs	r3, 6
    489a:	03 c0       	rjmp	.+6      	; 0x48a2 <vfprintf+0x166>
    489c:	69 2d       	mov	r22, r9
    489e:	70 e0       	ldi	r23, 0x00	; 0
    48a0:	02 c0       	rjmp	.+4      	; 0x48a6 <vfprintf+0x16a>
    48a2:	6f ef       	ldi	r22, 0xFF	; 255
    48a4:	7f ef       	ldi	r23, 0xFF	; 255
    48a6:	c5 01       	movw	r24, r10
    48a8:	8d d2       	rcall	.+1306   	; 0x4dc4 <strnlen>
    48aa:	4c 01       	movw	r8, r24
    48ac:	82 01       	movw	r16, r4
    48ae:	f3 2d       	mov	r31, r3
    48b0:	ff 77       	andi	r31, 0x7F	; 127
    48b2:	3f 2e       	mov	r3, r31
    48b4:	15 c0       	rjmp	.+42     	; 0x48e0 <vfprintf+0x1a4>
    48b6:	28 01       	movw	r4, r16
    48b8:	22 e0       	ldi	r18, 0x02	; 2
    48ba:	42 0e       	add	r4, r18
    48bc:	51 1c       	adc	r5, r1
    48be:	f8 01       	movw	r30, r16
    48c0:	a0 80       	ld	r10, Z
    48c2:	b1 80       	ldd	r11, Z+1	; 0x01
    48c4:	36 fe       	sbrs	r3, 6
    48c6:	03 c0       	rjmp	.+6      	; 0x48ce <vfprintf+0x192>
    48c8:	69 2d       	mov	r22, r9
    48ca:	70 e0       	ldi	r23, 0x00	; 0
    48cc:	02 c0       	rjmp	.+4      	; 0x48d2 <vfprintf+0x196>
    48ce:	6f ef       	ldi	r22, 0xFF	; 255
    48d0:	7f ef       	ldi	r23, 0xFF	; 255
    48d2:	c5 01       	movw	r24, r10
    48d4:	65 d2       	rcall	.+1226   	; 0x4da0 <strnlen_P>
    48d6:	4c 01       	movw	r8, r24
    48d8:	f3 2d       	mov	r31, r3
    48da:	f0 68       	ori	r31, 0x80	; 128
    48dc:	3f 2e       	mov	r3, r31
    48de:	82 01       	movw	r16, r4
    48e0:	33 fc       	sbrc	r3, 3
    48e2:	19 c0       	rjmp	.+50     	; 0x4916 <vfprintf+0x1da>
    48e4:	82 2d       	mov	r24, r2
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	88 16       	cp	r8, r24
    48ea:	99 06       	cpc	r9, r25
    48ec:	a0 f4       	brcc	.+40     	; 0x4916 <vfprintf+0x1da>
    48ee:	b6 01       	movw	r22, r12
    48f0:	80 e2       	ldi	r24, 0x20	; 32
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	72 d2       	rcall	.+1252   	; 0x4dda <fputc>
    48f6:	2a 94       	dec	r2
    48f8:	f5 cf       	rjmp	.-22     	; 0x48e4 <vfprintf+0x1a8>
    48fa:	f5 01       	movw	r30, r10
    48fc:	37 fc       	sbrc	r3, 7
    48fe:	85 91       	lpm	r24, Z+
    4900:	37 fe       	sbrs	r3, 7
    4902:	81 91       	ld	r24, Z+
    4904:	5f 01       	movw	r10, r30
    4906:	b6 01       	movw	r22, r12
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	67 d2       	rcall	.+1230   	; 0x4dda <fputc>
    490c:	21 10       	cpse	r2, r1
    490e:	2a 94       	dec	r2
    4910:	21 e0       	ldi	r18, 0x01	; 1
    4912:	82 1a       	sub	r8, r18
    4914:	91 08       	sbc	r9, r1
    4916:	81 14       	cp	r8, r1
    4918:	91 04       	cpc	r9, r1
    491a:	79 f7       	brne	.-34     	; 0x48fa <vfprintf+0x1be>
    491c:	e1 c0       	rjmp	.+450    	; 0x4ae0 <vfprintf+0x3a4>
    491e:	84 36       	cpi	r24, 0x64	; 100
    4920:	11 f0       	breq	.+4      	; 0x4926 <vfprintf+0x1ea>
    4922:	89 36       	cpi	r24, 0x69	; 105
    4924:	39 f5       	brne	.+78     	; 0x4974 <vfprintf+0x238>
    4926:	f8 01       	movw	r30, r16
    4928:	37 fe       	sbrs	r3, 7
    492a:	07 c0       	rjmp	.+14     	; 0x493a <vfprintf+0x1fe>
    492c:	60 81       	ld	r22, Z
    492e:	71 81       	ldd	r23, Z+1	; 0x01
    4930:	82 81       	ldd	r24, Z+2	; 0x02
    4932:	93 81       	ldd	r25, Z+3	; 0x03
    4934:	0c 5f       	subi	r16, 0xFC	; 252
    4936:	1f 4f       	sbci	r17, 0xFF	; 255
    4938:	08 c0       	rjmp	.+16     	; 0x494a <vfprintf+0x20e>
    493a:	60 81       	ld	r22, Z
    493c:	71 81       	ldd	r23, Z+1	; 0x01
    493e:	07 2e       	mov	r0, r23
    4940:	00 0c       	add	r0, r0
    4942:	88 0b       	sbc	r24, r24
    4944:	99 0b       	sbc	r25, r25
    4946:	0e 5f       	subi	r16, 0xFE	; 254
    4948:	1f 4f       	sbci	r17, 0xFF	; 255
    494a:	f3 2d       	mov	r31, r3
    494c:	ff 76       	andi	r31, 0x6F	; 111
    494e:	3f 2e       	mov	r3, r31
    4950:	97 ff       	sbrs	r25, 7
    4952:	09 c0       	rjmp	.+18     	; 0x4966 <vfprintf+0x22a>
    4954:	90 95       	com	r25
    4956:	80 95       	com	r24
    4958:	70 95       	com	r23
    495a:	61 95       	neg	r22
    495c:	7f 4f       	sbci	r23, 0xFF	; 255
    495e:	8f 4f       	sbci	r24, 0xFF	; 255
    4960:	9f 4f       	sbci	r25, 0xFF	; 255
    4962:	f0 68       	ori	r31, 0x80	; 128
    4964:	3f 2e       	mov	r3, r31
    4966:	2a e0       	ldi	r18, 0x0A	; 10
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	a3 01       	movw	r20, r6
    496c:	72 d2       	rcall	.+1252   	; 0x4e52 <__ultoa_invert>
    496e:	88 2e       	mov	r8, r24
    4970:	86 18       	sub	r8, r6
    4972:	44 c0       	rjmp	.+136    	; 0x49fc <vfprintf+0x2c0>
    4974:	85 37       	cpi	r24, 0x75	; 117
    4976:	31 f4       	brne	.+12     	; 0x4984 <vfprintf+0x248>
    4978:	23 2d       	mov	r18, r3
    497a:	2f 7e       	andi	r18, 0xEF	; 239
    497c:	b2 2e       	mov	r11, r18
    497e:	2a e0       	ldi	r18, 0x0A	; 10
    4980:	30 e0       	ldi	r19, 0x00	; 0
    4982:	25 c0       	rjmp	.+74     	; 0x49ce <vfprintf+0x292>
    4984:	93 2d       	mov	r25, r3
    4986:	99 7f       	andi	r25, 0xF9	; 249
    4988:	b9 2e       	mov	r11, r25
    498a:	8f 36       	cpi	r24, 0x6F	; 111
    498c:	c1 f0       	breq	.+48     	; 0x49be <vfprintf+0x282>
    498e:	18 f4       	brcc	.+6      	; 0x4996 <vfprintf+0x25a>
    4990:	88 35       	cpi	r24, 0x58	; 88
    4992:	79 f0       	breq	.+30     	; 0x49b2 <vfprintf+0x276>
    4994:	ae c0       	rjmp	.+348    	; 0x4af2 <vfprintf+0x3b6>
    4996:	80 37       	cpi	r24, 0x70	; 112
    4998:	19 f0       	breq	.+6      	; 0x49a0 <vfprintf+0x264>
    499a:	88 37       	cpi	r24, 0x78	; 120
    499c:	21 f0       	breq	.+8      	; 0x49a6 <vfprintf+0x26a>
    499e:	a9 c0       	rjmp	.+338    	; 0x4af2 <vfprintf+0x3b6>
    49a0:	e9 2f       	mov	r30, r25
    49a2:	e0 61       	ori	r30, 0x10	; 16
    49a4:	be 2e       	mov	r11, r30
    49a6:	b4 fe       	sbrs	r11, 4
    49a8:	0d c0       	rjmp	.+26     	; 0x49c4 <vfprintf+0x288>
    49aa:	fb 2d       	mov	r31, r11
    49ac:	f4 60       	ori	r31, 0x04	; 4
    49ae:	bf 2e       	mov	r11, r31
    49b0:	09 c0       	rjmp	.+18     	; 0x49c4 <vfprintf+0x288>
    49b2:	34 fe       	sbrs	r3, 4
    49b4:	0a c0       	rjmp	.+20     	; 0x49ca <vfprintf+0x28e>
    49b6:	29 2f       	mov	r18, r25
    49b8:	26 60       	ori	r18, 0x06	; 6
    49ba:	b2 2e       	mov	r11, r18
    49bc:	06 c0       	rjmp	.+12     	; 0x49ca <vfprintf+0x28e>
    49be:	28 e0       	ldi	r18, 0x08	; 8
    49c0:	30 e0       	ldi	r19, 0x00	; 0
    49c2:	05 c0       	rjmp	.+10     	; 0x49ce <vfprintf+0x292>
    49c4:	20 e1       	ldi	r18, 0x10	; 16
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	02 c0       	rjmp	.+4      	; 0x49ce <vfprintf+0x292>
    49ca:	20 e1       	ldi	r18, 0x10	; 16
    49cc:	32 e0       	ldi	r19, 0x02	; 2
    49ce:	f8 01       	movw	r30, r16
    49d0:	b7 fe       	sbrs	r11, 7
    49d2:	07 c0       	rjmp	.+14     	; 0x49e2 <vfprintf+0x2a6>
    49d4:	60 81       	ld	r22, Z
    49d6:	71 81       	ldd	r23, Z+1	; 0x01
    49d8:	82 81       	ldd	r24, Z+2	; 0x02
    49da:	93 81       	ldd	r25, Z+3	; 0x03
    49dc:	0c 5f       	subi	r16, 0xFC	; 252
    49de:	1f 4f       	sbci	r17, 0xFF	; 255
    49e0:	06 c0       	rjmp	.+12     	; 0x49ee <vfprintf+0x2b2>
    49e2:	60 81       	ld	r22, Z
    49e4:	71 81       	ldd	r23, Z+1	; 0x01
    49e6:	80 e0       	ldi	r24, 0x00	; 0
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	0e 5f       	subi	r16, 0xFE	; 254
    49ec:	1f 4f       	sbci	r17, 0xFF	; 255
    49ee:	a3 01       	movw	r20, r6
    49f0:	30 d2       	rcall	.+1120   	; 0x4e52 <__ultoa_invert>
    49f2:	88 2e       	mov	r8, r24
    49f4:	86 18       	sub	r8, r6
    49f6:	fb 2d       	mov	r31, r11
    49f8:	ff 77       	andi	r31, 0x7F	; 127
    49fa:	3f 2e       	mov	r3, r31
    49fc:	36 fe       	sbrs	r3, 6
    49fe:	0d c0       	rjmp	.+26     	; 0x4a1a <vfprintf+0x2de>
    4a00:	23 2d       	mov	r18, r3
    4a02:	2e 7f       	andi	r18, 0xFE	; 254
    4a04:	a2 2e       	mov	r10, r18
    4a06:	89 14       	cp	r8, r9
    4a08:	58 f4       	brcc	.+22     	; 0x4a20 <vfprintf+0x2e4>
    4a0a:	34 fe       	sbrs	r3, 4
    4a0c:	0b c0       	rjmp	.+22     	; 0x4a24 <vfprintf+0x2e8>
    4a0e:	32 fc       	sbrc	r3, 2
    4a10:	09 c0       	rjmp	.+18     	; 0x4a24 <vfprintf+0x2e8>
    4a12:	83 2d       	mov	r24, r3
    4a14:	8e 7e       	andi	r24, 0xEE	; 238
    4a16:	a8 2e       	mov	r10, r24
    4a18:	05 c0       	rjmp	.+10     	; 0x4a24 <vfprintf+0x2e8>
    4a1a:	b8 2c       	mov	r11, r8
    4a1c:	a3 2c       	mov	r10, r3
    4a1e:	03 c0       	rjmp	.+6      	; 0x4a26 <vfprintf+0x2ea>
    4a20:	b8 2c       	mov	r11, r8
    4a22:	01 c0       	rjmp	.+2      	; 0x4a26 <vfprintf+0x2ea>
    4a24:	b9 2c       	mov	r11, r9
    4a26:	a4 fe       	sbrs	r10, 4
    4a28:	0f c0       	rjmp	.+30     	; 0x4a48 <vfprintf+0x30c>
    4a2a:	fe 01       	movw	r30, r28
    4a2c:	e8 0d       	add	r30, r8
    4a2e:	f1 1d       	adc	r31, r1
    4a30:	80 81       	ld	r24, Z
    4a32:	80 33       	cpi	r24, 0x30	; 48
    4a34:	21 f4       	brne	.+8      	; 0x4a3e <vfprintf+0x302>
    4a36:	9a 2d       	mov	r25, r10
    4a38:	99 7e       	andi	r25, 0xE9	; 233
    4a3a:	a9 2e       	mov	r10, r25
    4a3c:	09 c0       	rjmp	.+18     	; 0x4a50 <vfprintf+0x314>
    4a3e:	a2 fe       	sbrs	r10, 2
    4a40:	06 c0       	rjmp	.+12     	; 0x4a4e <vfprintf+0x312>
    4a42:	b3 94       	inc	r11
    4a44:	b3 94       	inc	r11
    4a46:	04 c0       	rjmp	.+8      	; 0x4a50 <vfprintf+0x314>
    4a48:	8a 2d       	mov	r24, r10
    4a4a:	86 78       	andi	r24, 0x86	; 134
    4a4c:	09 f0       	breq	.+2      	; 0x4a50 <vfprintf+0x314>
    4a4e:	b3 94       	inc	r11
    4a50:	a3 fc       	sbrc	r10, 3
    4a52:	10 c0       	rjmp	.+32     	; 0x4a74 <vfprintf+0x338>
    4a54:	a0 fe       	sbrs	r10, 0
    4a56:	06 c0       	rjmp	.+12     	; 0x4a64 <vfprintf+0x328>
    4a58:	b2 14       	cp	r11, r2
    4a5a:	80 f4       	brcc	.+32     	; 0x4a7c <vfprintf+0x340>
    4a5c:	28 0c       	add	r2, r8
    4a5e:	92 2c       	mov	r9, r2
    4a60:	9b 18       	sub	r9, r11
    4a62:	0d c0       	rjmp	.+26     	; 0x4a7e <vfprintf+0x342>
    4a64:	b2 14       	cp	r11, r2
    4a66:	58 f4       	brcc	.+22     	; 0x4a7e <vfprintf+0x342>
    4a68:	b6 01       	movw	r22, r12
    4a6a:	80 e2       	ldi	r24, 0x20	; 32
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	b5 d1       	rcall	.+874    	; 0x4dda <fputc>
    4a70:	b3 94       	inc	r11
    4a72:	f8 cf       	rjmp	.-16     	; 0x4a64 <vfprintf+0x328>
    4a74:	b2 14       	cp	r11, r2
    4a76:	18 f4       	brcc	.+6      	; 0x4a7e <vfprintf+0x342>
    4a78:	2b 18       	sub	r2, r11
    4a7a:	02 c0       	rjmp	.+4      	; 0x4a80 <vfprintf+0x344>
    4a7c:	98 2c       	mov	r9, r8
    4a7e:	21 2c       	mov	r2, r1
    4a80:	a4 fe       	sbrs	r10, 4
    4a82:	0f c0       	rjmp	.+30     	; 0x4aa2 <vfprintf+0x366>
    4a84:	b6 01       	movw	r22, r12
    4a86:	80 e3       	ldi	r24, 0x30	; 48
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	a7 d1       	rcall	.+846    	; 0x4dda <fputc>
    4a8c:	a2 fe       	sbrs	r10, 2
    4a8e:	16 c0       	rjmp	.+44     	; 0x4abc <vfprintf+0x380>
    4a90:	a1 fc       	sbrc	r10, 1
    4a92:	03 c0       	rjmp	.+6      	; 0x4a9a <vfprintf+0x35e>
    4a94:	88 e7       	ldi	r24, 0x78	; 120
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	02 c0       	rjmp	.+4      	; 0x4a9e <vfprintf+0x362>
    4a9a:	88 e5       	ldi	r24, 0x58	; 88
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	b6 01       	movw	r22, r12
    4aa0:	0c c0       	rjmp	.+24     	; 0x4aba <vfprintf+0x37e>
    4aa2:	8a 2d       	mov	r24, r10
    4aa4:	86 78       	andi	r24, 0x86	; 134
    4aa6:	51 f0       	breq	.+20     	; 0x4abc <vfprintf+0x380>
    4aa8:	a1 fe       	sbrs	r10, 1
    4aaa:	02 c0       	rjmp	.+4      	; 0x4ab0 <vfprintf+0x374>
    4aac:	8b e2       	ldi	r24, 0x2B	; 43
    4aae:	01 c0       	rjmp	.+2      	; 0x4ab2 <vfprintf+0x376>
    4ab0:	80 e2       	ldi	r24, 0x20	; 32
    4ab2:	a7 fc       	sbrc	r10, 7
    4ab4:	8d e2       	ldi	r24, 0x2D	; 45
    4ab6:	b6 01       	movw	r22, r12
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	8f d1       	rcall	.+798    	; 0x4dda <fputc>
    4abc:	89 14       	cp	r8, r9
    4abe:	30 f4       	brcc	.+12     	; 0x4acc <vfprintf+0x390>
    4ac0:	b6 01       	movw	r22, r12
    4ac2:	80 e3       	ldi	r24, 0x30	; 48
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	89 d1       	rcall	.+786    	; 0x4dda <fputc>
    4ac8:	9a 94       	dec	r9
    4aca:	f8 cf       	rjmp	.-16     	; 0x4abc <vfprintf+0x380>
    4acc:	8a 94       	dec	r8
    4ace:	f3 01       	movw	r30, r6
    4ad0:	e8 0d       	add	r30, r8
    4ad2:	f1 1d       	adc	r31, r1
    4ad4:	80 81       	ld	r24, Z
    4ad6:	b6 01       	movw	r22, r12
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	7f d1       	rcall	.+766    	; 0x4dda <fputc>
    4adc:	81 10       	cpse	r8, r1
    4ade:	f6 cf       	rjmp	.-20     	; 0x4acc <vfprintf+0x390>
    4ae0:	22 20       	and	r2, r2
    4ae2:	09 f4       	brne	.+2      	; 0x4ae6 <vfprintf+0x3aa>
    4ae4:	4e ce       	rjmp	.-868    	; 0x4782 <vfprintf+0x46>
    4ae6:	b6 01       	movw	r22, r12
    4ae8:	80 e2       	ldi	r24, 0x20	; 32
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	76 d1       	rcall	.+748    	; 0x4dda <fputc>
    4aee:	2a 94       	dec	r2
    4af0:	f7 cf       	rjmp	.-18     	; 0x4ae0 <vfprintf+0x3a4>
    4af2:	f6 01       	movw	r30, r12
    4af4:	86 81       	ldd	r24, Z+6	; 0x06
    4af6:	97 81       	ldd	r25, Z+7	; 0x07
    4af8:	02 c0       	rjmp	.+4      	; 0x4afe <vfprintf+0x3c2>
    4afa:	8f ef       	ldi	r24, 0xFF	; 255
    4afc:	9f ef       	ldi	r25, 0xFF	; 255
    4afe:	2b 96       	adiw	r28, 0x0b	; 11
    4b00:	cd bf       	out	0x3d, r28	; 61
    4b02:	de bf       	out	0x3e, r29	; 62
    4b04:	df 91       	pop	r29
    4b06:	cf 91       	pop	r28
    4b08:	1f 91       	pop	r17
    4b0a:	0f 91       	pop	r16
    4b0c:	ff 90       	pop	r15
    4b0e:	ef 90       	pop	r14
    4b10:	df 90       	pop	r13
    4b12:	cf 90       	pop	r12
    4b14:	bf 90       	pop	r11
    4b16:	af 90       	pop	r10
    4b18:	9f 90       	pop	r9
    4b1a:	8f 90       	pop	r8
    4b1c:	7f 90       	pop	r7
    4b1e:	6f 90       	pop	r6
    4b20:	5f 90       	pop	r5
    4b22:	4f 90       	pop	r4
    4b24:	3f 90       	pop	r3
    4b26:	2f 90       	pop	r2
    4b28:	08 95       	ret

00004b2a <calloc>:
    4b2a:	0f 93       	push	r16
    4b2c:	1f 93       	push	r17
    4b2e:	cf 93       	push	r28
    4b30:	df 93       	push	r29
    4b32:	86 9f       	mul	r24, r22
    4b34:	80 01       	movw	r16, r0
    4b36:	87 9f       	mul	r24, r23
    4b38:	10 0d       	add	r17, r0
    4b3a:	96 9f       	mul	r25, r22
    4b3c:	10 0d       	add	r17, r0
    4b3e:	11 24       	eor	r1, r1
    4b40:	c8 01       	movw	r24, r16
    4b42:	0d d0       	rcall	.+26     	; 0x4b5e <malloc>
    4b44:	ec 01       	movw	r28, r24
    4b46:	00 97       	sbiw	r24, 0x00	; 0
    4b48:	21 f0       	breq	.+8      	; 0x4b52 <calloc+0x28>
    4b4a:	a8 01       	movw	r20, r16
    4b4c:	60 e0       	ldi	r22, 0x00	; 0
    4b4e:	70 e0       	ldi	r23, 0x00	; 0
    4b50:	32 d1       	rcall	.+612    	; 0x4db6 <memset>
    4b52:	ce 01       	movw	r24, r28
    4b54:	df 91       	pop	r29
    4b56:	cf 91       	pop	r28
    4b58:	1f 91       	pop	r17
    4b5a:	0f 91       	pop	r16
    4b5c:	08 95       	ret

00004b5e <malloc>:
    4b5e:	0f 93       	push	r16
    4b60:	1f 93       	push	r17
    4b62:	cf 93       	push	r28
    4b64:	df 93       	push	r29
    4b66:	82 30       	cpi	r24, 0x02	; 2
    4b68:	91 05       	cpc	r25, r1
    4b6a:	10 f4       	brcc	.+4      	; 0x4b70 <malloc+0x12>
    4b6c:	82 e0       	ldi	r24, 0x02	; 2
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	e0 91 45 24 	lds	r30, 0x2445	; 0x802445 <__flp>
    4b74:	f0 91 46 24 	lds	r31, 0x2446	; 0x802446 <__flp+0x1>
    4b78:	20 e0       	ldi	r18, 0x00	; 0
    4b7a:	30 e0       	ldi	r19, 0x00	; 0
    4b7c:	a0 e0       	ldi	r26, 0x00	; 0
    4b7e:	b0 e0       	ldi	r27, 0x00	; 0
    4b80:	30 97       	sbiw	r30, 0x00	; 0
    4b82:	19 f1       	breq	.+70     	; 0x4bca <malloc+0x6c>
    4b84:	40 81       	ld	r20, Z
    4b86:	51 81       	ldd	r21, Z+1	; 0x01
    4b88:	02 81       	ldd	r16, Z+2	; 0x02
    4b8a:	13 81       	ldd	r17, Z+3	; 0x03
    4b8c:	48 17       	cp	r20, r24
    4b8e:	59 07       	cpc	r21, r25
    4b90:	c8 f0       	brcs	.+50     	; 0x4bc4 <malloc+0x66>
    4b92:	84 17       	cp	r24, r20
    4b94:	95 07       	cpc	r25, r21
    4b96:	69 f4       	brne	.+26     	; 0x4bb2 <malloc+0x54>
    4b98:	10 97       	sbiw	r26, 0x00	; 0
    4b9a:	31 f0       	breq	.+12     	; 0x4ba8 <malloc+0x4a>
    4b9c:	12 96       	adiw	r26, 0x02	; 2
    4b9e:	0c 93       	st	X, r16
    4ba0:	12 97       	sbiw	r26, 0x02	; 2
    4ba2:	13 96       	adiw	r26, 0x03	; 3
    4ba4:	1c 93       	st	X, r17
    4ba6:	27 c0       	rjmp	.+78     	; 0x4bf6 <malloc+0x98>
    4ba8:	00 93 45 24 	sts	0x2445, r16	; 0x802445 <__flp>
    4bac:	10 93 46 24 	sts	0x2446, r17	; 0x802446 <__flp+0x1>
    4bb0:	22 c0       	rjmp	.+68     	; 0x4bf6 <malloc+0x98>
    4bb2:	21 15       	cp	r18, r1
    4bb4:	31 05       	cpc	r19, r1
    4bb6:	19 f0       	breq	.+6      	; 0x4bbe <malloc+0x60>
    4bb8:	42 17       	cp	r20, r18
    4bba:	53 07       	cpc	r21, r19
    4bbc:	18 f4       	brcc	.+6      	; 0x4bc4 <malloc+0x66>
    4bbe:	9a 01       	movw	r18, r20
    4bc0:	bd 01       	movw	r22, r26
    4bc2:	ef 01       	movw	r28, r30
    4bc4:	df 01       	movw	r26, r30
    4bc6:	f8 01       	movw	r30, r16
    4bc8:	db cf       	rjmp	.-74     	; 0x4b80 <malloc+0x22>
    4bca:	21 15       	cp	r18, r1
    4bcc:	31 05       	cpc	r19, r1
    4bce:	f9 f0       	breq	.+62     	; 0x4c0e <malloc+0xb0>
    4bd0:	28 1b       	sub	r18, r24
    4bd2:	39 0b       	sbc	r19, r25
    4bd4:	24 30       	cpi	r18, 0x04	; 4
    4bd6:	31 05       	cpc	r19, r1
    4bd8:	80 f4       	brcc	.+32     	; 0x4bfa <malloc+0x9c>
    4bda:	8a 81       	ldd	r24, Y+2	; 0x02
    4bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bde:	61 15       	cp	r22, r1
    4be0:	71 05       	cpc	r23, r1
    4be2:	21 f0       	breq	.+8      	; 0x4bec <malloc+0x8e>
    4be4:	fb 01       	movw	r30, r22
    4be6:	82 83       	std	Z+2, r24	; 0x02
    4be8:	93 83       	std	Z+3, r25	; 0x03
    4bea:	04 c0       	rjmp	.+8      	; 0x4bf4 <malloc+0x96>
    4bec:	80 93 45 24 	sts	0x2445, r24	; 0x802445 <__flp>
    4bf0:	90 93 46 24 	sts	0x2446, r25	; 0x802446 <__flp+0x1>
    4bf4:	fe 01       	movw	r30, r28
    4bf6:	32 96       	adiw	r30, 0x02	; 2
    4bf8:	44 c0       	rjmp	.+136    	; 0x4c82 <malloc+0x124>
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e2 0f       	add	r30, r18
    4bfe:	f3 1f       	adc	r31, r19
    4c00:	81 93       	st	Z+, r24
    4c02:	91 93       	st	Z+, r25
    4c04:	22 50       	subi	r18, 0x02	; 2
    4c06:	31 09       	sbc	r19, r1
    4c08:	28 83       	st	Y, r18
    4c0a:	39 83       	std	Y+1, r19	; 0x01
    4c0c:	3a c0       	rjmp	.+116    	; 0x4c82 <malloc+0x124>
    4c0e:	20 91 43 24 	lds	r18, 0x2443	; 0x802443 <__brkval>
    4c12:	30 91 44 24 	lds	r19, 0x2444	; 0x802444 <__brkval+0x1>
    4c16:	23 2b       	or	r18, r19
    4c18:	41 f4       	brne	.+16     	; 0x4c2a <malloc+0xcc>
    4c1a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4c1e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4c22:	20 93 43 24 	sts	0x2443, r18	; 0x802443 <__brkval>
    4c26:	30 93 44 24 	sts	0x2444, r19	; 0x802444 <__brkval+0x1>
    4c2a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4c2e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4c32:	21 15       	cp	r18, r1
    4c34:	31 05       	cpc	r19, r1
    4c36:	41 f4       	brne	.+16     	; 0x4c48 <malloc+0xea>
    4c38:	2d b7       	in	r18, 0x3d	; 61
    4c3a:	3e b7       	in	r19, 0x3e	; 62
    4c3c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4c40:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4c44:	24 1b       	sub	r18, r20
    4c46:	35 0b       	sbc	r19, r21
    4c48:	e0 91 43 24 	lds	r30, 0x2443	; 0x802443 <__brkval>
    4c4c:	f0 91 44 24 	lds	r31, 0x2444	; 0x802444 <__brkval+0x1>
    4c50:	e2 17       	cp	r30, r18
    4c52:	f3 07       	cpc	r31, r19
    4c54:	a0 f4       	brcc	.+40     	; 0x4c7e <malloc+0x120>
    4c56:	2e 1b       	sub	r18, r30
    4c58:	3f 0b       	sbc	r19, r31
    4c5a:	28 17       	cp	r18, r24
    4c5c:	39 07       	cpc	r19, r25
    4c5e:	78 f0       	brcs	.+30     	; 0x4c7e <malloc+0x120>
    4c60:	ac 01       	movw	r20, r24
    4c62:	4e 5f       	subi	r20, 0xFE	; 254
    4c64:	5f 4f       	sbci	r21, 0xFF	; 255
    4c66:	24 17       	cp	r18, r20
    4c68:	35 07       	cpc	r19, r21
    4c6a:	48 f0       	brcs	.+18     	; 0x4c7e <malloc+0x120>
    4c6c:	4e 0f       	add	r20, r30
    4c6e:	5f 1f       	adc	r21, r31
    4c70:	40 93 43 24 	sts	0x2443, r20	; 0x802443 <__brkval>
    4c74:	50 93 44 24 	sts	0x2444, r21	; 0x802444 <__brkval+0x1>
    4c78:	81 93       	st	Z+, r24
    4c7a:	91 93       	st	Z+, r25
    4c7c:	02 c0       	rjmp	.+4      	; 0x4c82 <malloc+0x124>
    4c7e:	e0 e0       	ldi	r30, 0x00	; 0
    4c80:	f0 e0       	ldi	r31, 0x00	; 0
    4c82:	cf 01       	movw	r24, r30
    4c84:	df 91       	pop	r29
    4c86:	cf 91       	pop	r28
    4c88:	1f 91       	pop	r17
    4c8a:	0f 91       	pop	r16
    4c8c:	08 95       	ret

00004c8e <free>:
    4c8e:	cf 93       	push	r28
    4c90:	df 93       	push	r29
    4c92:	00 97       	sbiw	r24, 0x00	; 0
    4c94:	09 f4       	brne	.+2      	; 0x4c98 <free+0xa>
    4c96:	81 c0       	rjmp	.+258    	; 0x4d9a <free+0x10c>
    4c98:	fc 01       	movw	r30, r24
    4c9a:	32 97       	sbiw	r30, 0x02	; 2
    4c9c:	12 82       	std	Z+2, r1	; 0x02
    4c9e:	13 82       	std	Z+3, r1	; 0x03
    4ca0:	a0 91 45 24 	lds	r26, 0x2445	; 0x802445 <__flp>
    4ca4:	b0 91 46 24 	lds	r27, 0x2446	; 0x802446 <__flp+0x1>
    4ca8:	10 97       	sbiw	r26, 0x00	; 0
    4caa:	81 f4       	brne	.+32     	; 0x4ccc <free+0x3e>
    4cac:	20 81       	ld	r18, Z
    4cae:	31 81       	ldd	r19, Z+1	; 0x01
    4cb0:	82 0f       	add	r24, r18
    4cb2:	93 1f       	adc	r25, r19
    4cb4:	20 91 43 24 	lds	r18, 0x2443	; 0x802443 <__brkval>
    4cb8:	30 91 44 24 	lds	r19, 0x2444	; 0x802444 <__brkval+0x1>
    4cbc:	28 17       	cp	r18, r24
    4cbe:	39 07       	cpc	r19, r25
    4cc0:	51 f5       	brne	.+84     	; 0x4d16 <free+0x88>
    4cc2:	e0 93 43 24 	sts	0x2443, r30	; 0x802443 <__brkval>
    4cc6:	f0 93 44 24 	sts	0x2444, r31	; 0x802444 <__brkval+0x1>
    4cca:	67 c0       	rjmp	.+206    	; 0x4d9a <free+0x10c>
    4ccc:	ed 01       	movw	r28, r26
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	ce 17       	cp	r28, r30
    4cd4:	df 07       	cpc	r29, r31
    4cd6:	40 f4       	brcc	.+16     	; 0x4ce8 <free+0x5a>
    4cd8:	4a 81       	ldd	r20, Y+2	; 0x02
    4cda:	5b 81       	ldd	r21, Y+3	; 0x03
    4cdc:	9e 01       	movw	r18, r28
    4cde:	41 15       	cp	r20, r1
    4ce0:	51 05       	cpc	r21, r1
    4ce2:	f1 f0       	breq	.+60     	; 0x4d20 <free+0x92>
    4ce4:	ea 01       	movw	r28, r20
    4ce6:	f5 cf       	rjmp	.-22     	; 0x4cd2 <free+0x44>
    4ce8:	c2 83       	std	Z+2, r28	; 0x02
    4cea:	d3 83       	std	Z+3, r29	; 0x03
    4cec:	40 81       	ld	r20, Z
    4cee:	51 81       	ldd	r21, Z+1	; 0x01
    4cf0:	84 0f       	add	r24, r20
    4cf2:	95 1f       	adc	r25, r21
    4cf4:	c8 17       	cp	r28, r24
    4cf6:	d9 07       	cpc	r29, r25
    4cf8:	59 f4       	brne	.+22     	; 0x4d10 <free+0x82>
    4cfa:	88 81       	ld	r24, Y
    4cfc:	99 81       	ldd	r25, Y+1	; 0x01
    4cfe:	84 0f       	add	r24, r20
    4d00:	95 1f       	adc	r25, r21
    4d02:	02 96       	adiw	r24, 0x02	; 2
    4d04:	80 83       	st	Z, r24
    4d06:	91 83       	std	Z+1, r25	; 0x01
    4d08:	8a 81       	ldd	r24, Y+2	; 0x02
    4d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d0c:	82 83       	std	Z+2, r24	; 0x02
    4d0e:	93 83       	std	Z+3, r25	; 0x03
    4d10:	21 15       	cp	r18, r1
    4d12:	31 05       	cpc	r19, r1
    4d14:	29 f4       	brne	.+10     	; 0x4d20 <free+0x92>
    4d16:	e0 93 45 24 	sts	0x2445, r30	; 0x802445 <__flp>
    4d1a:	f0 93 46 24 	sts	0x2446, r31	; 0x802446 <__flp+0x1>
    4d1e:	3d c0       	rjmp	.+122    	; 0x4d9a <free+0x10c>
    4d20:	e9 01       	movw	r28, r18
    4d22:	ea 83       	std	Y+2, r30	; 0x02
    4d24:	fb 83       	std	Y+3, r31	; 0x03
    4d26:	49 91       	ld	r20, Y+
    4d28:	59 91       	ld	r21, Y+
    4d2a:	c4 0f       	add	r28, r20
    4d2c:	d5 1f       	adc	r29, r21
    4d2e:	ec 17       	cp	r30, r28
    4d30:	fd 07       	cpc	r31, r29
    4d32:	61 f4       	brne	.+24     	; 0x4d4c <free+0xbe>
    4d34:	80 81       	ld	r24, Z
    4d36:	91 81       	ldd	r25, Z+1	; 0x01
    4d38:	84 0f       	add	r24, r20
    4d3a:	95 1f       	adc	r25, r21
    4d3c:	02 96       	adiw	r24, 0x02	; 2
    4d3e:	e9 01       	movw	r28, r18
    4d40:	88 83       	st	Y, r24
    4d42:	99 83       	std	Y+1, r25	; 0x01
    4d44:	82 81       	ldd	r24, Z+2	; 0x02
    4d46:	93 81       	ldd	r25, Z+3	; 0x03
    4d48:	8a 83       	std	Y+2, r24	; 0x02
    4d4a:	9b 83       	std	Y+3, r25	; 0x03
    4d4c:	e0 e0       	ldi	r30, 0x00	; 0
    4d4e:	f0 e0       	ldi	r31, 0x00	; 0
    4d50:	12 96       	adiw	r26, 0x02	; 2
    4d52:	8d 91       	ld	r24, X+
    4d54:	9c 91       	ld	r25, X
    4d56:	13 97       	sbiw	r26, 0x03	; 3
    4d58:	00 97       	sbiw	r24, 0x00	; 0
    4d5a:	19 f0       	breq	.+6      	; 0x4d62 <free+0xd4>
    4d5c:	fd 01       	movw	r30, r26
    4d5e:	dc 01       	movw	r26, r24
    4d60:	f7 cf       	rjmp	.-18     	; 0x4d50 <free+0xc2>
    4d62:	8d 91       	ld	r24, X+
    4d64:	9c 91       	ld	r25, X
    4d66:	11 97       	sbiw	r26, 0x01	; 1
    4d68:	9d 01       	movw	r18, r26
    4d6a:	2e 5f       	subi	r18, 0xFE	; 254
    4d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6e:	82 0f       	add	r24, r18
    4d70:	93 1f       	adc	r25, r19
    4d72:	20 91 43 24 	lds	r18, 0x2443	; 0x802443 <__brkval>
    4d76:	30 91 44 24 	lds	r19, 0x2444	; 0x802444 <__brkval+0x1>
    4d7a:	28 17       	cp	r18, r24
    4d7c:	39 07       	cpc	r19, r25
    4d7e:	69 f4       	brne	.+26     	; 0x4d9a <free+0x10c>
    4d80:	30 97       	sbiw	r30, 0x00	; 0
    4d82:	29 f4       	brne	.+10     	; 0x4d8e <free+0x100>
    4d84:	10 92 45 24 	sts	0x2445, r1	; 0x802445 <__flp>
    4d88:	10 92 46 24 	sts	0x2446, r1	; 0x802446 <__flp+0x1>
    4d8c:	02 c0       	rjmp	.+4      	; 0x4d92 <free+0x104>
    4d8e:	12 82       	std	Z+2, r1	; 0x02
    4d90:	13 82       	std	Z+3, r1	; 0x03
    4d92:	a0 93 43 24 	sts	0x2443, r26	; 0x802443 <__brkval>
    4d96:	b0 93 44 24 	sts	0x2444, r27	; 0x802444 <__brkval+0x1>
    4d9a:	df 91       	pop	r29
    4d9c:	cf 91       	pop	r28
    4d9e:	08 95       	ret

00004da0 <strnlen_P>:
    4da0:	fc 01       	movw	r30, r24
    4da2:	05 90       	lpm	r0, Z+
    4da4:	61 50       	subi	r22, 0x01	; 1
    4da6:	70 40       	sbci	r23, 0x00	; 0
    4da8:	01 10       	cpse	r0, r1
    4daa:	d8 f7       	brcc	.-10     	; 0x4da2 <strnlen_P+0x2>
    4dac:	80 95       	com	r24
    4dae:	90 95       	com	r25
    4db0:	8e 0f       	add	r24, r30
    4db2:	9f 1f       	adc	r25, r31
    4db4:	08 95       	ret

00004db6 <memset>:
    4db6:	dc 01       	movw	r26, r24
    4db8:	01 c0       	rjmp	.+2      	; 0x4dbc <memset+0x6>
    4dba:	6d 93       	st	X+, r22
    4dbc:	41 50       	subi	r20, 0x01	; 1
    4dbe:	50 40       	sbci	r21, 0x00	; 0
    4dc0:	e0 f7       	brcc	.-8      	; 0x4dba <memset+0x4>
    4dc2:	08 95       	ret

00004dc4 <strnlen>:
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	61 50       	subi	r22, 0x01	; 1
    4dc8:	70 40       	sbci	r23, 0x00	; 0
    4dca:	01 90       	ld	r0, Z+
    4dcc:	01 10       	cpse	r0, r1
    4dce:	d8 f7       	brcc	.-10     	; 0x4dc6 <strnlen+0x2>
    4dd0:	80 95       	com	r24
    4dd2:	90 95       	com	r25
    4dd4:	8e 0f       	add	r24, r30
    4dd6:	9f 1f       	adc	r25, r31
    4dd8:	08 95       	ret

00004dda <fputc>:
    4dda:	0f 93       	push	r16
    4ddc:	1f 93       	push	r17
    4dde:	cf 93       	push	r28
    4de0:	df 93       	push	r29
    4de2:	fb 01       	movw	r30, r22
    4de4:	23 81       	ldd	r18, Z+3	; 0x03
    4de6:	21 fd       	sbrc	r18, 1
    4de8:	03 c0       	rjmp	.+6      	; 0x4df0 <fputc+0x16>
    4dea:	8f ef       	ldi	r24, 0xFF	; 255
    4dec:	9f ef       	ldi	r25, 0xFF	; 255
    4dee:	2c c0       	rjmp	.+88     	; 0x4e48 <fputc+0x6e>
    4df0:	22 ff       	sbrs	r18, 2
    4df2:	16 c0       	rjmp	.+44     	; 0x4e20 <fputc+0x46>
    4df4:	46 81       	ldd	r20, Z+6	; 0x06
    4df6:	57 81       	ldd	r21, Z+7	; 0x07
    4df8:	24 81       	ldd	r18, Z+4	; 0x04
    4dfa:	35 81       	ldd	r19, Z+5	; 0x05
    4dfc:	42 17       	cp	r20, r18
    4dfe:	53 07       	cpc	r21, r19
    4e00:	44 f4       	brge	.+16     	; 0x4e12 <fputc+0x38>
    4e02:	a0 81       	ld	r26, Z
    4e04:	b1 81       	ldd	r27, Z+1	; 0x01
    4e06:	9d 01       	movw	r18, r26
    4e08:	2f 5f       	subi	r18, 0xFF	; 255
    4e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e0c:	20 83       	st	Z, r18
    4e0e:	31 83       	std	Z+1, r19	; 0x01
    4e10:	8c 93       	st	X, r24
    4e12:	26 81       	ldd	r18, Z+6	; 0x06
    4e14:	37 81       	ldd	r19, Z+7	; 0x07
    4e16:	2f 5f       	subi	r18, 0xFF	; 255
    4e18:	3f 4f       	sbci	r19, 0xFF	; 255
    4e1a:	26 83       	std	Z+6, r18	; 0x06
    4e1c:	37 83       	std	Z+7, r19	; 0x07
    4e1e:	14 c0       	rjmp	.+40     	; 0x4e48 <fputc+0x6e>
    4e20:	8b 01       	movw	r16, r22
    4e22:	ec 01       	movw	r28, r24
    4e24:	fb 01       	movw	r30, r22
    4e26:	00 84       	ldd	r0, Z+8	; 0x08
    4e28:	f1 85       	ldd	r31, Z+9	; 0x09
    4e2a:	e0 2d       	mov	r30, r0
    4e2c:	19 95       	eicall
    4e2e:	89 2b       	or	r24, r25
    4e30:	e1 f6       	brne	.-72     	; 0x4dea <fputc+0x10>
    4e32:	d8 01       	movw	r26, r16
    4e34:	16 96       	adiw	r26, 0x06	; 6
    4e36:	8d 91       	ld	r24, X+
    4e38:	9c 91       	ld	r25, X
    4e3a:	17 97       	sbiw	r26, 0x07	; 7
    4e3c:	01 96       	adiw	r24, 0x01	; 1
    4e3e:	16 96       	adiw	r26, 0x06	; 6
    4e40:	8d 93       	st	X+, r24
    4e42:	9c 93       	st	X, r25
    4e44:	17 97       	sbiw	r26, 0x07	; 7
    4e46:	ce 01       	movw	r24, r28
    4e48:	df 91       	pop	r29
    4e4a:	cf 91       	pop	r28
    4e4c:	1f 91       	pop	r17
    4e4e:	0f 91       	pop	r16
    4e50:	08 95       	ret

00004e52 <__ultoa_invert>:
    4e52:	fa 01       	movw	r30, r20
    4e54:	aa 27       	eor	r26, r26
    4e56:	28 30       	cpi	r18, 0x08	; 8
    4e58:	51 f1       	breq	.+84     	; 0x4eae <__ultoa_invert+0x5c>
    4e5a:	20 31       	cpi	r18, 0x10	; 16
    4e5c:	81 f1       	breq	.+96     	; 0x4ebe <__ultoa_invert+0x6c>
    4e5e:	e8 94       	clt
    4e60:	6f 93       	push	r22
    4e62:	6e 7f       	andi	r22, 0xFE	; 254
    4e64:	6e 5f       	subi	r22, 0xFE	; 254
    4e66:	7f 4f       	sbci	r23, 0xFF	; 255
    4e68:	8f 4f       	sbci	r24, 0xFF	; 255
    4e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e6c:	af 4f       	sbci	r26, 0xFF	; 255
    4e6e:	b1 e0       	ldi	r27, 0x01	; 1
    4e70:	3e d0       	rcall	.+124    	; 0x4eee <__ultoa_invert+0x9c>
    4e72:	b4 e0       	ldi	r27, 0x04	; 4
    4e74:	3c d0       	rcall	.+120    	; 0x4eee <__ultoa_invert+0x9c>
    4e76:	67 0f       	add	r22, r23
    4e78:	78 1f       	adc	r23, r24
    4e7a:	89 1f       	adc	r24, r25
    4e7c:	9a 1f       	adc	r25, r26
    4e7e:	a1 1d       	adc	r26, r1
    4e80:	68 0f       	add	r22, r24
    4e82:	79 1f       	adc	r23, r25
    4e84:	8a 1f       	adc	r24, r26
    4e86:	91 1d       	adc	r25, r1
    4e88:	a1 1d       	adc	r26, r1
    4e8a:	6a 0f       	add	r22, r26
    4e8c:	71 1d       	adc	r23, r1
    4e8e:	81 1d       	adc	r24, r1
    4e90:	91 1d       	adc	r25, r1
    4e92:	a1 1d       	adc	r26, r1
    4e94:	20 d0       	rcall	.+64     	; 0x4ed6 <__ultoa_invert+0x84>
    4e96:	09 f4       	brne	.+2      	; 0x4e9a <__ultoa_invert+0x48>
    4e98:	68 94       	set
    4e9a:	3f 91       	pop	r19
    4e9c:	2a e0       	ldi	r18, 0x0A	; 10
    4e9e:	26 9f       	mul	r18, r22
    4ea0:	11 24       	eor	r1, r1
    4ea2:	30 19       	sub	r19, r0
    4ea4:	30 5d       	subi	r19, 0xD0	; 208
    4ea6:	31 93       	st	Z+, r19
    4ea8:	de f6       	brtc	.-74     	; 0x4e60 <__ultoa_invert+0xe>
    4eaa:	cf 01       	movw	r24, r30
    4eac:	08 95       	ret
    4eae:	46 2f       	mov	r20, r22
    4eb0:	47 70       	andi	r20, 0x07	; 7
    4eb2:	40 5d       	subi	r20, 0xD0	; 208
    4eb4:	41 93       	st	Z+, r20
    4eb6:	b3 e0       	ldi	r27, 0x03	; 3
    4eb8:	0f d0       	rcall	.+30     	; 0x4ed8 <__ultoa_invert+0x86>
    4eba:	c9 f7       	brne	.-14     	; 0x4eae <__ultoa_invert+0x5c>
    4ebc:	f6 cf       	rjmp	.-20     	; 0x4eaa <__ultoa_invert+0x58>
    4ebe:	46 2f       	mov	r20, r22
    4ec0:	4f 70       	andi	r20, 0x0F	; 15
    4ec2:	40 5d       	subi	r20, 0xD0	; 208
    4ec4:	4a 33       	cpi	r20, 0x3A	; 58
    4ec6:	18 f0       	brcs	.+6      	; 0x4ece <__ultoa_invert+0x7c>
    4ec8:	49 5d       	subi	r20, 0xD9	; 217
    4eca:	31 fd       	sbrc	r19, 1
    4ecc:	40 52       	subi	r20, 0x20	; 32
    4ece:	41 93       	st	Z+, r20
    4ed0:	02 d0       	rcall	.+4      	; 0x4ed6 <__ultoa_invert+0x84>
    4ed2:	a9 f7       	brne	.-22     	; 0x4ebe <__ultoa_invert+0x6c>
    4ed4:	ea cf       	rjmp	.-44     	; 0x4eaa <__ultoa_invert+0x58>
    4ed6:	b4 e0       	ldi	r27, 0x04	; 4
    4ed8:	a6 95       	lsr	r26
    4eda:	97 95       	ror	r25
    4edc:	87 95       	ror	r24
    4ede:	77 95       	ror	r23
    4ee0:	67 95       	ror	r22
    4ee2:	ba 95       	dec	r27
    4ee4:	c9 f7       	brne	.-14     	; 0x4ed8 <__ultoa_invert+0x86>
    4ee6:	00 97       	sbiw	r24, 0x00	; 0
    4ee8:	61 05       	cpc	r22, r1
    4eea:	71 05       	cpc	r23, r1
    4eec:	08 95       	ret
    4eee:	9b 01       	movw	r18, r22
    4ef0:	ac 01       	movw	r20, r24
    4ef2:	0a 2e       	mov	r0, r26
    4ef4:	06 94       	lsr	r0
    4ef6:	57 95       	ror	r21
    4ef8:	47 95       	ror	r20
    4efa:	37 95       	ror	r19
    4efc:	27 95       	ror	r18
    4efe:	ba 95       	dec	r27
    4f00:	c9 f7       	brne	.-14     	; 0x4ef4 <__ultoa_invert+0xa2>
    4f02:	62 0f       	add	r22, r18
    4f04:	73 1f       	adc	r23, r19
    4f06:	84 1f       	adc	r24, r20
    4f08:	95 1f       	adc	r25, r21
    4f0a:	a0 1d       	adc	r26, r0
    4f0c:	08 95       	ret

00004f0e <_exit>:
    4f0e:	f8 94       	cli

00004f10 <__stop_program>:
    4f10:	ff cf       	rjmp	.-2      	; 0x4f10 <__stop_program>
