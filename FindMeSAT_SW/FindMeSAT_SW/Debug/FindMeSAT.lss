
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b9e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000068a  00802000  0000b9e0  0000ba74  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000471  0080268a  0080268a  0000c0fe  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000c0fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000c15c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a10  00000000  00000000  0000c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001d122  00000000  00000000  0000cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006a12  00000000  00000000  00029cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000f6e3  00000000  00000000  000306e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002adc  00000000  00000000  0003fdc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00041d7e  00000000  00000000  000428a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c00b  00000000  00000000  00084622  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a8  00000000  00000000  00090630  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ef5b  00000000  00000000  00090fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__ctors_end>
       4:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
       8:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
       c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      10:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      14:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      18:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__vector_6>
      1c:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <__vector_7>
      20:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__vector_8>
      24:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__vector_9>
      28:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      2c:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <__vector_11>
      30:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      34:	0c 94 1b 34 	jmp	0x6836	; 0x6836 <__vector_13>
      38:	0c 94 73 2c 	jmp	0x58e6	; 0x58e6 <__vector_14>
      3c:	0c 94 a0 2c 	jmp	0x5940	; 0x5940 <__vector_15>
      40:	0c 94 cd 2c 	jmp	0x599a	; 0x599a <__vector_16>
      44:	0c 94 fa 2c 	jmp	0x59f4	; 0x59f4 <__vector_17>
      48:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__vector_18>
      4c:	0c 94 54 2d 	jmp	0x5aa8	; 0x5aa8 <__vector_19>
      50:	0c 94 81 2d 	jmp	0x5b02	; 0x5b02 <__vector_20>
      54:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <__vector_21>
      58:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <__vector_22>
      5c:	0c 94 08 2e 	jmp	0x5c10	; 0x5c10 <__vector_23>
      60:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      64:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      68:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      6c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      70:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      74:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      78:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      7c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      80:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      84:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      88:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      8c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      90:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      94:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      98:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      9c:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <__vector_39>
      a0:	0c 94 ce 29 	jmp	0x539c	; 0x539c <__vector_40>
      a4:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__vector_41>
      a8:	0c 94 32 2a 	jmp	0x5464	; 0x5464 <__vector_42>
      ac:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      b0:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      b4:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      b8:	0c 94 42 34 	jmp	0x6884	; 0x6884 <__vector_46>
      bc:	0c 94 f7 2f 	jmp	0x5fee	; 0x5fee <__vector_47>
      c0:	0c 94 24 30 	jmp	0x6048	; 0x6048 <__vector_48>
      c4:	0c 94 51 30 	jmp	0x60a2	; 0x60a2 <__vector_49>
      c8:	0c 94 7e 30 	jmp	0x60fc	; 0x60fc <__vector_50>
      cc:	0c 94 ab 30 	jmp	0x6156	; 0x6156 <__vector_51>
      d0:	0c 94 d8 30 	jmp	0x61b0	; 0x61b0 <__vector_52>
      d4:	0c 94 05 31 	jmp	0x620a	; 0x620a <__vector_53>
      d8:	0c 94 32 31 	jmp	0x6264	; 0x6264 <__vector_54>
      dc:	0c 94 5f 31 	jmp	0x62be	; 0x62be <__vector_55>
      e0:	0c 94 8c 31 	jmp	0x6318	; 0x6318 <__vector_56>
      e4:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      e8:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      ec:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      f0:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      f4:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      f8:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
      fc:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     100:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     104:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     108:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     10c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     110:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     114:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     118:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     11c:	0c 94 d4 28 	jmp	0x51a8	; 0x51a8 <__vector_71>
     120:	0c 94 06 29 	jmp	0x520c	; 0x520c <__vector_72>
     124:	0c 94 38 29 	jmp	0x5270	; 0x5270 <__vector_73>
     128:	0c 94 6a 29 	jmp	0x52d4	; 0x52d4 <__vector_74>
     12c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     130:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     134:	0c 94 35 2e 	jmp	0x5c6a	; 0x5c6a <__vector_77>
     138:	0c 94 62 2e 	jmp	0x5cc4	; 0x5cc4 <__vector_78>
     13c:	0c 94 8f 2e 	jmp	0x5d1e	; 0x5d1e <__vector_79>
     140:	0c 94 bc 2e 	jmp	0x5d78	; 0x5d78 <__vector_80>
     144:	0c 94 e9 2e 	jmp	0x5dd2	; 0x5dd2 <__vector_81>
     148:	0c 94 16 2f 	jmp	0x5e2c	; 0x5e2c <__vector_82>
     14c:	0c 94 43 2f 	jmp	0x5e86	; 0x5e86 <__vector_83>
     150:	0c 94 70 2f 	jmp	0x5ee0	; 0x5ee0 <__vector_84>
     154:	0c 94 9d 2f 	jmp	0x5f3a	; 0x5f3a <__vector_85>
     158:	0c 94 ca 2f 	jmp	0x5f94	; 0x5f94 <__vector_86>
     15c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     160:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     164:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     168:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     16c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     170:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     174:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     178:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     17c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     180:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     184:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     188:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     18c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     190:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     194:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     198:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     19c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1a0:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1a4:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1a8:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1ac:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1b0:	0c 94 b9 31 	jmp	0x6372	; 0x6372 <__vector_108>
     1b4:	0c 94 e6 31 	jmp	0x63cc	; 0x63cc <__vector_109>
     1b8:	0c 94 13 32 	jmp	0x6426	; 0x6426 <__vector_110>
     1bc:	0c 94 40 32 	jmp	0x6480	; 0x6480 <__vector_111>
     1c0:	0c 94 6d 32 	jmp	0x64da	; 0x64da <__vector_112>
     1c4:	0c 94 9a 32 	jmp	0x6534	; 0x6534 <__vector_113>
     1c8:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1cc:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1d0:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1d4:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1d8:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1dc:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1e0:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1e4:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1e8:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1ec:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1f0:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__bad_interrupt>
     1f4:	0c 94 ff 3a 	jmp	0x75fe	; 0x75fe <__vector_125>
     1f8:	0c 94 b9 3b 	jmp	0x7772	; 0x7772 <__vector_126>
     1fc:	e0 35       	cpi	r30, 0x50	; 80
     1fe:	e3 35       	cpi	r30, 0x53	; 83
     200:	e6 35       	cpi	r30, 0x56	; 86
     202:	e9 35       	cpi	r30, 0x59	; 89
     204:	ec 35       	cpi	r30, 0x5C	; 92
     206:	ef 35       	cpi	r30, 0x5F	; 95
     208:	f2 35       	cpi	r31, 0x52	; 82
     20a:	31 3d       	cpi	r19, 0xD1	; 209
     20c:	44 3d       	cpi	r20, 0xD4	; 212
     20e:	57 3d       	cpi	r21, 0xD7	; 215
     210:	6a 3d       	cpi	r22, 0xDA	; 218
     212:	7d 3d       	cpi	r23, 0xDD	; 221
     214:	90 3d       	cpi	r25, 0xD0	; 208
     216:	a3 3d       	cpi	r26, 0xD3	; 211
     218:	05 a8       	ldd	r0, Z+53	; 0x35
     21a:	4c cd       	rjmp	.-1384   	; 0xfffffcb4 <__eeprom_end+0xff7efcb4>
     21c:	b2 d4       	rcall	.+2404   	; 0xb82 <PM_SINE+0x2cc>
     21e:	4e b9       	out	0x0e, r20	; 14
     220:	38 36       	cpi	r19, 0x68	; 104
     222:	a9 02       	muls	r26, r25
     224:	0c 50       	subi	r16, 0x0C	; 12
     226:	b9 91       	ld	r27, Y+
     228:	86 88       	ldd	r8, Z+22	; 0x16
     22a:	08 3c       	cpi	r16, 0xC8	; 200
     22c:	a6 aa       	std	Z+54, r10	; 0x36
     22e:	aa 2a       	or	r10, r26
     230:	be 00       	.word	0x00be	; ????
     232:	00 00       	nop
     234:	80 3f       	cpi	r24, 0xF0	; 240

00000236 <PM_SINE_IP>:
     236:	00 fd f9 f6 f3 f0 ec e9 e6 e3 df dc d9 d6 d2 cf     ................
     246:	00 fd fa f6 f3 f0 ed ea e6 e3 e0 dd da d7 d3 d0     ................
     256:	00 fd fa f7 f3 f0 ed ea e7 e4 e1 de da d7 d4 d1     ................
     266:	00 fd fa f7 f4 f1 ee eb e7 e4 e1 de db d8 d5 d2     ................
     276:	00 fd fa f7 f4 f1 ee eb e8 e5 e2 df dc d9 d6 d3     ................
     286:	00 fd fa f7 f4 f1 ee eb e8 e6 e3 e0 dd da d7 d4     ................
     296:	00 fd fa f7 f4 f2 ef ec e9 e6 e3 e0 dd db d8 d5     ................
     2a6:	00 fd fa f8 f5 f2 ef ec e9 e7 e4 e1 de db d9 d6     ................
     2b6:	00 fd fa f8 f5 f2 ef ed ea e7 e4 e2 df dc d9 d7     ................
     2c6:	00 fd fb f8 f5 f3 f0 ed ea e8 e5 e2 e0 dd da d8     ................
     2d6:	00 fd fb f8 f5 f3 f0 ee eb e8 e6 e3 e0 de db d9     ................
     2e6:	00 fd fb f8 f6 f3 f1 ee eb e9 e6 e4 e1 df dc da     ................
     2f6:	00 fd fb f8 f6 f3 f1 ee ec e9 e7 e4 e2 df dd da     ................
     306:	00 fe fb f9 f6 f4 f1 ef ec ea e8 e5 e3 e0 de db     ................
     316:	00 fe fb f9 f6 f4 f2 ef ed eb e8 e6 e3 e1 df dc     ................
     326:	00 fe fb f9 f7 f4 f2 f0 ed eb e9 e7 e4 e2 e0 dd     ................
     336:	00 fe fb f9 f7 f5 f2 f0 ee ec e9 e7 e5 e3 e0 de     ................
     346:	00 fe fc f9 f7 f5 f3 f1 ee ec ea e8 e6 e4 e1 df     ................
     356:	00 fe fc fa f7 f5 f3 f1 ef ed eb e9 e6 e4 e2 e0     ................
     366:	00 fe fc fa f8 f6 f4 f2 ef ed eb e9 e7 e5 e3 e1     ................
     376:	00 fe fc fa f8 f6 f4 f2 f0 ee ec ea e8 e6 e4 e2     ................
     386:	00 fe fc fa f8 f6 f4 f2 f0 ef ed eb e9 e7 e5 e3     ................
     396:	00 fe fc fa f8 f7 f5 f3 f1 ef ed eb e9 e8 e6 e4     ................
     3a6:	00 fe fc fb f9 f7 f5 f3 f1 f0 ee ec ea e8 e7 e5     ................
     3b6:	00 fe fc fb f9 f7 f5 f4 f2 f0 ee ed eb e9 e7 e6     ................
     3c6:	00 fe fd fb f9 f8 f6 f4 f2 f1 ef ed ec ea e8 e7     ................
     3d6:	00 fe fd fb f9 f8 f6 f5 f3 f1 f0 ee ec eb e9 e8     ................
     3e6:	00 fe fd fb fa f8 f7 f5 f3 f2 f0 ef ed ec ea e9     ................
     3f6:	00 fe fd fb fa f8 f7 f5 f4 f2 f1 ef ee ec eb e9     ................
     406:	00 ff fd fc fa f9 f7 f6 f4 f3 f2 f0 ef ed ec ea     ................
     416:	00 ff fd fc fa f9 f8 f6 f5 f4 f2 f1 ef ee ed eb     ................
     426:	00 ff fd fc fb f9 f8 f7 f5 f4 f3 f2 f0 ef ee ec     ................
     436:	00 ff fd fc fb fa f8 f7 f6 f5 f3 f2 f1 f0 ee ed     ................
     446:	00 ff fe fc fb fa f9 f8 f6 f5 f4 f3 f2 f1 ef ee     ................
     456:	00 ff fe fd fb fa f9 f8 f7 f6 f5 f4 f2 f1 f0 ef     ................
     466:	00 ff fe fd fc fb fa f9 f7 f6 f5 f4 f3 f2 f1 f0     ................
     476:	00 ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1     ................
     486:	00 ff fe fd fc fb fa f9 f8 f8 f7 f6 f5 f4 f3 f2     ................
     496:	00 ff fe fd fc fc fb fa f9 f8 f7 f6 f5 f5 f4 f3     ................
     4a6:	00 ff fe fe fd fc fb fa f9 f9 f8 f7 f6 f5 f5 f4     ................
     4b6:	00 ff fe fe fd fc fb fb fa f9 f8 f8 f7 f6 f5 f5     ................
     4c6:	00 ff ff fe fd fd fc fb fa fa f9 f8 f8 f7 f6 f6     ................
     4d6:	00 ff ff fe fd fd fc fc fb fa fa f9 f8 f8 f7 f7     ................
     4e6:	00 ff ff fe fe fd fd fc fb fb fa fa f9 f9 f8 f8     ................
     4f6:	00 ff ff fe fe fd fd fc fc fb fb fa fa f9 f9 f8     ................
     506:	00 00 ff ff fe fe fd fd fc fc fc fb fb fa fa f9     ................
     516:	00 00 ff ff fe fe fe fd fd fd fc fc fb fb fb fa     ................
     526:	00 00 ff ff ff fe fe fe fd fd fd fd fc fc fc fb     ................
     536:	00 00 ff ff ff ff fe fe fe fe fd fd fd fd fc fc     ................
     546:	00 00 00 ff ff ff ff ff fe fe fe fe fe fe fd fd     ................
     556:	00 00 00 00 ff ff ff ff ff ff ff ff fe fe fe fe     ................
	...
     56e:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     58e:	01 01 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
     59e:	01 01 01 01 02 02 02 02 00 00 00 01 01 01 01 01     ................
     5ae:	02 02 02 02 02 02 03 03 00 00 01 01 01 01 02 02     ................
     5be:	02 02 03 03 03 03 04 04 00 00 01 01 01 02 02 02     ................
     5ce:	03 03 03 03 04 04 04 05 00 00 01 01 02 02 02 03     ................
     5de:	03 03 04 04 05 05 05 06 00 00 01 01 02 02 03 03     ................
     5ee:	04 04 04 05 05 06 06 07 00 01 01 02 02 03 03 04     ................
     5fe:	04 05 05 06 06 07 07 08 00 01 01 02 02 03 03 04     ................
     60e:	05 05 06 06 07 07 08 08 00 01 01 02 03 03 04 04     ................
     61e:	05 06 06 07 08 08 09 09 00 01 01 02 03 03 04 05     ................
     62e:	06 06 07 08 08 09 0a 0a 00 01 02 02 03 04 05 05     ................
     63e:	06 07 08 08 09 0a 0b 0b 00 01 02 02 03 04 05 06     ................
     64e:	07 07 08 09 0a 0b 0b 0c 00 01 02 03 04 04 05 06     ................
     65e:	07 08 09 0a 0b 0b 0c 0d 00 01 02 03 04 05 06 07     ................
     66e:	08 08 09 0a 0b 0c 0d 0e 00 01 02 03 04 05 06 07     ................
     67e:	08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 04 05 06 07     ................
     68e:	09 0a 0b 0c 0d 0e 0f 10 00 01 02 03 05 06 07 08     ................
     69e:	09 0a 0b 0c 0e 0f 10 11 00 01 02 04 05 06 07 08     ................
     6ae:	0a 0b 0c 0d 0e 0f 11 12 00 01 03 04 05 06 08 09     ................
     6be:	0a 0b 0d 0e 0f 10 12 13 00 01 03 04 05 07 08 09     ................
     6ce:	0b 0c 0d 0e 10 11 12 14 00 01 03 04 06 07 08 0a     ................
     6de:	0b 0c 0e 0f 11 12 13 15 00 01 03 04 06 07 09 0a     ................
     6ee:	0c 0d 0e 10 11 13 14 16 00 02 03 05 06 08 09 0b     ................
     6fe:	0c 0e 0f 11 12 14 15 17 00 02 03 05 06 08 09 0b     ................
     70e:	0d 0e 10 11 13 14 16 17 00 02 03 05 07 08 0a 0b     ................
     71e:	0d 0f 10 12 14 15 17 18 00 02 03 05 07 08 0a 0c     ................
     72e:	0e 0f 11 13 14 16 18 19 00 02 04 05 07 09 0b 0c     ................
     73e:	0e 10 12 13 15 17 19 1a 00 02 04 05 07 09 0b 0d     ................
     74e:	0f 10 12 14 16 18 19 1b 00 02 04 06 08 09 0b 0d     ................
     75e:	0f 11 13 15 17 18 1a 1c 00 02 04 06 08 0a 0c 0e     ................
     76e:	10 11 13 15 17 19 1b 1d 00 02 04 06 08 0a 0c 0e     ................
     77e:	10 12 14 16 18 1a 1c 1e 00 02 04 06 08 0a 0c 0e     ................
     78e:	11 13 15 17 19 1b 1d 1f 00 02 04 06 09 0b 0d 0f     ................
     79e:	11 13 15 17 1a 1c 1e 20 00 02 04 07 09 0b 0d 0f     ....... ........
     7ae:	12 14 16 18 1a 1c 1f 21 00 02 05 07 09 0b 0e 10     .......!........
     7be:	12 14 17 19 1b 1d 20 22 00 02 05 07 09 0c 0e 10     ...... "........
     7ce:	13 15 17 19 1c 1e 20 23 00 02 05 07 0a 0c 0e 11     ...... #........
     7de:	13 15 18 1a 1d 1f 21 24 00 02 05 07 0a 0c 0f 11     ......!$........
     7ee:	14 16 18 1b 1d 20 22 25 00 03 05 08 0a 0d 0f 12     ..... "%........
     7fe:	14 17 19 1c 1e 21 23 26 00 03 05 08 0a 0d 0f 12     .....!#&........
     80e:	15 17 1a 1c 1f 21 24 26 00 03 05 08 0b 0d 10 12     .....!$&........
     81e:	15 18 1a 1d 20 22 25 27 00 03 05 08 0b 0d 10 13     .... "%'........
     82e:	16 18 1b 1e 20 23 26 28 00 03 06 08 0b 0e 11 13     .... #&(........
     83e:	16 19 1c 1e 21 24 27 29 00 03 06 08 0b 0e 11 14     ....!$')........
     84e:	17 19 1c 1f 22 25 27 2a 00 03 06 09 0c 0e 11 14     ...."%'*........
     85e:	17 1a 1d 20 23 25 28 2b 00 03 06 09 0c 0f 12 15     ... #%(+........
     86e:	18 1a 1d 20 23 26 29 2c 00 03 06 09 0c 0f 12 15     ... #&),........
     87e:	18 1b 1e 21 24 27 2a 2d 00 03 06 09 0c 0f 12 15     ...!$'*-........
     88e:	19 1c 1f 22 25 28 2b 2e 00 03 06 09 0d 10 13 16     ..."%(+.........
     89e:	19 1c 1f 22 26 29 2c 2f 00 03 06 0a 0d 10 13 16     ..."&),/........
     8ae:	1a 1d 20 23 26 29 2d 30                             .. #&)-0

000008b6 <PM_SINE>:
     8b6:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     8c6:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     8d6:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     8e6:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     8f6:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     906:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     916:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     926:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     936:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     946:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     956:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     966:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     976:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     986:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     996:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     9a6:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     9b6:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     9c6:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     9d6:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     9e6:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     9f6:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     a06:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     a16:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     a26:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     a36:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     a46:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     a56:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     a66:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     a76:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     a86:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     a96:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     aa6:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     ab6:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     ac6:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     ad6:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     ae6:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     af6:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     b06:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     b16:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     b26:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     b36:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     b46:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     b56:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
     b66:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
     b76:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
     b86:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
     b96:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
     ba6:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
     bb6:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
     bc6:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
     bd6:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
     be6:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
     bf6:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
     c06:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
     c16:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
     c26:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
     c36:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
     c46:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
     c56:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
     c66:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
     c76:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
     c86:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
     c96:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
     ca6:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
     cb6:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
     cc6:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
     cd6:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
     ce6:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
     cf6:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
     d06:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
     d16:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
     d26:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
     d36:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
     d46:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
     d56:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
     d66:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
     d76:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
     d86:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
     d96:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
     da6:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
     db6:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
     dc6:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
     dd6:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
     de6:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
     df6:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
     e06:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
     e16:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
     e26:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
     e36:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
     e46:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
     e56:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
     e66:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
     e76:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
     e86:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
     e96:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
     ea6:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
     eb6:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
     ec6:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
     ed6:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
     ee6:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
     ef6:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
     f06:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
     f16:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
     f26:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
     f36:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
     f46:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
     f56:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
     f66:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
     f76:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
     f86:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
     f96:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
     fa6:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
     fb6:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
     fc6:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
     fd6:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
     fe6:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
     ff6:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
    1006:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
    1016:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
    1026:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
    1036:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
    1046:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
    1056:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
    1066:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
    1076:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
    1086:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
    1096:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
    10a6:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
    10b6:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
    10c6:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
    10d6:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
    10e6:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
    10f6:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
    1106:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
    1116:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
    1126:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
    1136:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
    1146:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
    1156:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
    1166:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
    1176:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
    1186:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
    1196:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
    11a6:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
    11b6:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
    11c6:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
    11d6:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
    11e6:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
    11f6:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
    1206:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
    1216:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
    1226:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
    1236:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
    1246:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
    1256:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
    1266:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
    1276:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
    1286:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
    1296:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
    12a6:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
    12b6:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
    12c6:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
    12d6:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
    12e6:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
    12f6:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
    1306:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
    1316:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
    1326:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
    1336:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
    1346:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
    1356:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
    1366:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
    1376:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
    1386:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
    1396:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
    13a6:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
    13b6:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
    13c6:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
    13d6:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
    13e6:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
    13f6:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
    1406:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
    1416:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
    1426:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
    1436:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
    1446:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
    1456:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
    1466:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
    1476:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
    1486:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
    1496:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
    14a6:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
    14b6:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
    14c6:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
    14d6:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
    14e6:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
    14f6:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
    1506:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
    1516:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
    1526:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
    1536:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
    1546:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
    1556:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
    1566:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
    1576:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
    1586:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
    1596:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
    15a6:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
    15b6:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
    15c6:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
    15d6:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
    15e6:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
    15f6:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
    1606:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
    1616:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
    1626:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
    1636:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
    1646:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
    1656:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
    1666:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
    1676:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
    1686:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
    1696:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    16a6:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    16b6:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    16c6:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    16d6:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    16e6:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    16f6:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1706:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1716:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1726:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1736:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    1746:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    1756:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    1766:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    1776:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    1786:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    1796:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    17a6:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    17b6:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    17c6:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    17d6:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    17e6:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    17f6:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1806:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1816:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1826:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1836:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    1846:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    1856:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    1866:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    1876:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    1886:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    1896:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    18a6:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    18b6:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    18c6:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    18d6:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    18e6:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    18f6:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1906:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1916:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1926:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1936:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    1946:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    1956:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    1966:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    1976:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    1986:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    1996:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    19a6:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    19b6:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    19c6:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    19d6:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    19e6:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    19f6:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1a06:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1a16:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1a26:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1a36:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    1a46:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    1a56:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    1a66:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    1a76:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    1a86:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    1a96:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1aa6:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1ab6:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1ac6:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1ad6:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1ae6:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1af6:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    1b06:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    1b16:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    1b26:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    1b36:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    1b46:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    1b56:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    1b66:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    1b76:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    1b86:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    1b96:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    1ba6:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    1bb6:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    1bc6:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    1bd6:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    1be6:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    1bf6:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    1c06:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    1c16:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    1c26:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    1c36:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    1c46:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    1c56:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    1c66:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    1c76:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    1c86:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    1c96:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    1ca6:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    1cb6:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    1cc6:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    1cd6:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    1ce6:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    1cf6:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    1d06:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    1d16:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    1d26:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    1d36:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    1d46:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    1d56:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    1d66:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    1d76:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    1d86:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    1d96:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    1da6:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    1db6:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    1dc6:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    1dd6:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    1de6:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    1df6:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    1e06:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    1e16:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    1e26:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    1e36:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    1e46:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    1e56:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    1e66:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    1e76:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    1e86:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    1e96:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    1ea6:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    1eb6:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    1ec6:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    1ed6:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    1ee6:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    1ef6:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    1f06:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    1f16:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    1f26:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    1f36:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    1f46:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    1f56:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    1f66:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    1f76:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    1f86:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    1f96:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    1fa6:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    1fb6:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    1fc6:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    1fd6:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    1fe6:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    1ff6:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    2006:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    2016:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    2026:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    2036:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    2046:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    2056:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    2066:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    2076:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    2086:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    2096:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    20a6:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    20b6:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    20c6:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    20d6:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    20e6:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    20f6:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    2106:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    2116:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    2126:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    2136:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    2146:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    2156:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    2166:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    2176:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    2186:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    2196:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    21a6:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    21b6:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    21c6:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    21d6:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    21e6:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    21f6:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    2206:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    2216:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    2226:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    2236:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    2246:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    2256:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    2266:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    2276:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    2286:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    2296:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    22a6:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    22b6:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    22c6:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    22d6:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    22e6:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    22f6:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    2306:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    2316:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    2326:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    2336:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    2346:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    2356:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    2366:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    2376:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    2386:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    2396:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    23a6:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    23b6:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    23c6:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    23d6:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    23e6:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    23f6:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    2406:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    2416:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    2426:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    2436:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    2446:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    2456:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    2466:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    2476:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    2486:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    2496:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    24a6:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    24b6:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    24c6:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    24d6:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    24e6:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    24f6:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    2506:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    2516:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    2526:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    2536:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    2546:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    2556:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    2566:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    2576:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    2586:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    2596:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    25a6:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    25b6:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    25c6:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    25d6:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    25e6:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    25f6:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    2606:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    2616:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    2626:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    2636:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    2646:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    2656:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    2666:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    2676:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    2686:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    2696:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    26a6:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    26b6:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    26c6:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    26d6:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    26e6:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    26f6:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2706:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2716:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2726:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2736:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    2746:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    2756:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    2766:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    2776:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    2786:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    2796:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    27a6:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    27b6:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    27c6:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    27d6:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    27e6:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    27f6:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2806:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2816:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2826:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2836:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    2846:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    2856:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    2866:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    2876:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    2886:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    2896:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    28a6:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

000028b6 <__ctors_end>:
    28b6:	11 24       	eor	r1, r1
    28b8:	1f be       	out	0x3f, r1	; 63
    28ba:	cf ef       	ldi	r28, 0xFF	; 255
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	df e5       	ldi	r29, 0x5F	; 95
    28c0:	de bf       	out	0x3e, r29	; 62
    28c2:	00 e0       	ldi	r16, 0x00	; 0
    28c4:	0c bf       	out	0x3c, r16	; 60

000028c6 <__do_copy_data>:
    28c6:	16 e2       	ldi	r17, 0x26	; 38
    28c8:	a0 e0       	ldi	r26, 0x00	; 0
    28ca:	b0 e2       	ldi	r27, 0x20	; 32
    28cc:	e0 ee       	ldi	r30, 0xE0	; 224
    28ce:	f9 eb       	ldi	r31, 0xB9	; 185
    28d0:	00 e0       	ldi	r16, 0x00	; 0
    28d2:	0b bf       	out	0x3b, r16	; 59
    28d4:	02 c0       	rjmp	.+4      	; 0x28da <__do_copy_data+0x14>
    28d6:	07 90       	elpm	r0, Z+
    28d8:	0d 92       	st	X+, r0
    28da:	aa 38       	cpi	r26, 0x8A	; 138
    28dc:	b1 07       	cpc	r27, r17
    28de:	d9 f7       	brne	.-10     	; 0x28d6 <__do_copy_data+0x10>

000028e0 <__do_clear_bss>:
    28e0:	2a e2       	ldi	r18, 0x2A	; 42
    28e2:	aa e8       	ldi	r26, 0x8A	; 138
    28e4:	b6 e2       	ldi	r27, 0x26	; 38
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <.do_clear_bss_start>

000028e8 <.do_clear_bss_loop>:
    28e8:	1d 92       	st	X+, r1

000028ea <.do_clear_bss_start>:
    28ea:	ab 3f       	cpi	r26, 0xFB	; 251
    28ec:	b2 07       	cpc	r27, r18
    28ee:	e1 f7       	brne	.-8      	; 0x28e8 <.do_clear_bss_loop>
    28f0:	0e 94 6f 41 	call	0x82de	; 0x82de <main>
    28f4:	0c 94 ee 5c 	jmp	0xb9dc	; 0xb9dc <_exit>

000028f8 <__bad_interrupt>:
    28f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000028fc <nvm_init>:
#include "conf_nvm.h"
#include "nvm.h"

status_code_t nvm_init(mem_type_t mem)
{
	switch (mem) {
    28fc:	83 30       	cpi	r24, 0x03	; 3
    28fe:	10 f4       	brcc	.+4      	; 0x2904 <nvm_init+0x8>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	08 95       	ret
		}
		break;
#endif

	default:
		return ERR_INVALID_ARG;
    2904:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    2906:	08 95       	ret

00002908 <dma_interrupt>:
void dma_disable(void)
{
	DMA.CTRL = 0;
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	48 2f       	mov	r20, r24
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	fa 01       	movw	r30, r20
    2912:	71 96       	adiw	r30, 0x11	; 17
    2914:	e2 95       	swap	r30
    2916:	f2 95       	swap	r31
    2918:	f0 7f       	andi	r31, 0xF0	; 240
    291a:	fe 27       	eor	r31, r30
    291c:	e0 7f       	andi	r30, 0xF0	; 240
    291e:	fe 27       	eor	r31, r30
    2920:	a0 e0       	ldi	r26, 0x00	; 0
    2922:	b1 e0       	ldi	r27, 0x01	; 1
    2924:	14 96       	adiw	r26, 0x04	; 4
    2926:	9c 91       	ld	r25, X
    2928:	14 97       	sbiw	r26, 0x04	; 4
    292a:	13 96       	adiw	r26, 0x03	; 3
    292c:	6c 91       	ld	r22, X
    292e:	da 01       	movw	r26, r20
    2930:	14 96       	adiw	r26, 0x04	; 4
    2932:	21 e0       	ldi	r18, 0x01	; 1
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	e9 01       	movw	r28, r18
    2938:	08 2e       	mov	r0, r24
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <dma_interrupt+0x38>
    293c:	cc 0f       	add	r28, r28
    293e:	dd 1f       	adc	r29, r29
    2940:	0a 94       	dec	r0
    2942:	e2 f7       	brpl	.-8      	; 0x293c <dma_interrupt+0x34>
    2944:	0a 2e       	mov	r0, r26
    2946:	02 c0       	rjmp	.+4      	; 0x294c <dma_interrupt+0x44>
    2948:	22 0f       	add	r18, r18
    294a:	33 1f       	adc	r19, r19
    294c:	0a 94       	dec	r0
    294e:	e2 f7       	brpl	.-8      	; 0x2948 <dma_interrupt+0x40>
    2950:	2c 2b       	or	r18, r28
    2952:	62 23       	and	r22, r18
    2954:	70 e0       	ldi	r23, 0x00	; 0
    2956:	eb 01       	movw	r28, r22
    2958:	0a 2e       	mov	r0, r26
    295a:	02 c0       	rjmp	.+4      	; 0x2960 <dma_interrupt+0x58>
    295c:	d5 95       	asr	r29
    295e:	c7 95       	ror	r28
    2960:	0a 94       	dec	r0
    2962:	e2 f7       	brpl	.-8      	; 0x295c <dma_interrupt+0x54>
    2964:	c0 fd       	sbrc	r28, 0
    2966:	1a c0       	rjmp	.+52     	; 0x299c <dma_interrupt+0x94>
    2968:	08 2e       	mov	r0, r24
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <dma_interrupt+0x68>
    296c:	75 95       	asr	r23
    296e:	67 95       	ror	r22
    2970:	0a 94       	dec	r0
    2972:	e2 f7       	brpl	.-8      	; 0x296c <dma_interrupt+0x64>
    2974:	60 fd       	sbrc	r22, 0
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <dma_interrupt+0x98>
    2978:	29 23       	and	r18, r25
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	b9 01       	movw	r22, r18
    297e:	02 c0       	rjmp	.+4      	; 0x2984 <dma_interrupt+0x7c>
    2980:	75 95       	asr	r23
    2982:	67 95       	ror	r22
    2984:	aa 95       	dec	r26
    2986:	e2 f7       	brpl	.-8      	; 0x2980 <dma_interrupt+0x78>
    2988:	60 fd       	sbrc	r22, 0
    298a:	0c c0       	rjmp	.+24     	; 0x29a4 <dma_interrupt+0x9c>
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <dma_interrupt+0x8a>
    298e:	35 95       	asr	r19
    2990:	27 95       	ror	r18
    2992:	8a 95       	dec	r24
    2994:	e2 f7       	brpl	.-8      	; 0x298e <dma_interrupt+0x86>
    2996:	82 2f       	mov	r24, r18
    2998:	81 70       	andi	r24, 0x01	; 1
    299a:	05 c0       	rjmp	.+10     	; 0x29a6 <dma_interrupt+0x9e>
    299c:	84 e0       	ldi	r24, 0x04	; 4
    299e:	03 c0       	rjmp	.+6      	; 0x29a6 <dma_interrupt+0x9e>
    29a0:	83 e0       	ldi	r24, 0x03	; 3
    29a2:	01 c0       	rjmp	.+2      	; 0x29a6 <dma_interrupt+0x9e>
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	90 63       	ori	r25, 0x30	; 48
    29aa:	91 83       	std	Z+1, r25	; 0x01
    29ac:	44 0f       	add	r20, r20
    29ae:	55 1f       	adc	r21, r21
    29b0:	fa 01       	movw	r30, r20
    29b2:	e9 53       	subi	r30, 0x39	; 57
    29b4:	f5 4d       	sbci	r31, 0xD5	; 213
    29b6:	01 90       	ld	r0, Z+
    29b8:	f0 81       	ld	r31, Z
    29ba:	e0 2d       	mov	r30, r0
    29bc:	30 97       	sbiw	r30, 0x00	; 0
    29be:	09 f0       	breq	.+2      	; 0x29c2 <dma_interrupt+0xba>
    29c0:	19 95       	eicall
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	08 95       	ret

000029c8 <dma_enable>:
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	1f 92       	push	r1
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	61 e0       	ldi	r22, 0x01	; 1
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    29da:	80 91 e6 2a 	lds	r24, 0x2AE6	; 0x802ae6 <sleepmgr_locks+0x1>
    29de:	8f 3f       	cpi	r24, 0xFF	; 255
    29e0:	09 f4       	brne	.+2      	; 0x29e4 <dma_enable+0x1c>
    29e2:	ff cf       	rjmp	.-2      	; 0x29e2 <dma_enable+0x1a>
    29e4:	8f b7       	in	r24, 0x3f	; 63
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	f8 94       	cli
    29ea:	99 81       	ldd	r25, Y+1	; 0x01
    29ec:	e5 ee       	ldi	r30, 0xE5	; 229
    29ee:	fa e2       	ldi	r31, 0x2A	; 42
    29f0:	81 81       	ldd	r24, Z+1	; 0x01
    29f2:	8f 5f       	subi	r24, 0xFF	; 255
    29f4:	81 83       	std	Z+1, r24	; 0x01
    29f6:	9f bf       	out	0x3f, r25	; 63
    29f8:	e0 e0       	ldi	r30, 0x00	; 0
    29fa:	f1 e0       	ldi	r31, 0x01	; 1
    29fc:	80 e4       	ldi	r24, 0x40	; 64
    29fe:	80 83       	st	Z, r24
    2a00:	80 e8       	ldi	r24, 0x80	; 128
    2a02:	80 83       	st	Z, r24
    2a04:	0f 90       	pop	r0
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	08 95       	ret

00002a0c <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    2a0c:	e8 2f       	mov	r30, r24
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	ee 0f       	add	r30, r30
    2a12:	ff 1f       	adc	r31, r31
    2a14:	e9 53       	subi	r30, 0x39	; 57
    2a16:	f5 4d       	sbci	r31, 0xD5	; 213
    2a18:	60 83       	st	Z, r22
    2a1a:	71 83       	std	Z+1, r23	; 0x01
    2a1c:	08 95       	ret

00002a1e <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    2a1e:	1f 92       	push	r1
    2a20:	0f 92       	push	r0
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	0f 92       	push	r0
    2a26:	11 24       	eor	r1, r1
    2a28:	0b b6       	in	r0, 0x3b	; 59
    2a2a:	0f 92       	push	r0
    2a2c:	2f 93       	push	r18
    2a2e:	3f 93       	push	r19
    2a30:	4f 93       	push	r20
    2a32:	5f 93       	push	r21
    2a34:	6f 93       	push	r22
    2a36:	7f 93       	push	r23
    2a38:	8f 93       	push	r24
    2a3a:	9f 93       	push	r25
    2a3c:	af 93       	push	r26
    2a3e:	bf 93       	push	r27
    2a40:	ef 93       	push	r30
    2a42:	ff 93       	push	r31
	dma_interrupt(0);
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	60 df       	rcall	.-320    	; 0x2908 <dma_interrupt>
}
    2a48:	ff 91       	pop	r31
    2a4a:	ef 91       	pop	r30
    2a4c:	bf 91       	pop	r27
    2a4e:	af 91       	pop	r26
    2a50:	9f 91       	pop	r25
    2a52:	8f 91       	pop	r24
    2a54:	7f 91       	pop	r23
    2a56:	6f 91       	pop	r22
    2a58:	5f 91       	pop	r21
    2a5a:	4f 91       	pop	r20
    2a5c:	3f 91       	pop	r19
    2a5e:	2f 91       	pop	r18
    2a60:	0f 90       	pop	r0
    2a62:	0b be       	out	0x3b, r0	; 59
    2a64:	0f 90       	pop	r0
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	0f 90       	pop	r0
    2a6a:	1f 90       	pop	r1
    2a6c:	18 95       	reti

00002a6e <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    2a6e:	1f 92       	push	r1
    2a70:	0f 92       	push	r0
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	0f 92       	push	r0
    2a76:	11 24       	eor	r1, r1
    2a78:	0b b6       	in	r0, 0x3b	; 59
    2a7a:	0f 92       	push	r0
    2a7c:	2f 93       	push	r18
    2a7e:	3f 93       	push	r19
    2a80:	4f 93       	push	r20
    2a82:	5f 93       	push	r21
    2a84:	6f 93       	push	r22
    2a86:	7f 93       	push	r23
    2a88:	8f 93       	push	r24
    2a8a:	9f 93       	push	r25
    2a8c:	af 93       	push	r26
    2a8e:	bf 93       	push	r27
    2a90:	ef 93       	push	r30
    2a92:	ff 93       	push	r31
	dma_interrupt(1);
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	38 df       	rcall	.-400    	; 0x2908 <dma_interrupt>
}
    2a98:	ff 91       	pop	r31
    2a9a:	ef 91       	pop	r30
    2a9c:	bf 91       	pop	r27
    2a9e:	af 91       	pop	r26
    2aa0:	9f 91       	pop	r25
    2aa2:	8f 91       	pop	r24
    2aa4:	7f 91       	pop	r23
    2aa6:	6f 91       	pop	r22
    2aa8:	5f 91       	pop	r21
    2aaa:	4f 91       	pop	r20
    2aac:	3f 91       	pop	r19
    2aae:	2f 91       	pop	r18
    2ab0:	0f 90       	pop	r0
    2ab2:	0b be       	out	0x3b, r0	; 59
    2ab4:	0f 90       	pop	r0
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	0f 90       	pop	r0
    2aba:	1f 90       	pop	r1
    2abc:	18 95       	reti

00002abe <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    2abe:	1f 92       	push	r1
    2ac0:	0f 92       	push	r0
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	0f 92       	push	r0
    2ac6:	11 24       	eor	r1, r1
    2ac8:	0b b6       	in	r0, 0x3b	; 59
    2aca:	0f 92       	push	r0
    2acc:	2f 93       	push	r18
    2ace:	3f 93       	push	r19
    2ad0:	4f 93       	push	r20
    2ad2:	5f 93       	push	r21
    2ad4:	6f 93       	push	r22
    2ad6:	7f 93       	push	r23
    2ad8:	8f 93       	push	r24
    2ada:	9f 93       	push	r25
    2adc:	af 93       	push	r26
    2ade:	bf 93       	push	r27
    2ae0:	ef 93       	push	r30
    2ae2:	ff 93       	push	r31
	dma_interrupt(2);
    2ae4:	82 e0       	ldi	r24, 0x02	; 2
    2ae6:	10 df       	rcall	.-480    	; 0x2908 <dma_interrupt>
}
    2ae8:	ff 91       	pop	r31
    2aea:	ef 91       	pop	r30
    2aec:	bf 91       	pop	r27
    2aee:	af 91       	pop	r26
    2af0:	9f 91       	pop	r25
    2af2:	8f 91       	pop	r24
    2af4:	7f 91       	pop	r23
    2af6:	6f 91       	pop	r22
    2af8:	5f 91       	pop	r21
    2afa:	4f 91       	pop	r20
    2afc:	3f 91       	pop	r19
    2afe:	2f 91       	pop	r18
    2b00:	0f 90       	pop	r0
    2b02:	0b be       	out	0x3b, r0	; 59
    2b04:	0f 90       	pop	r0
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	0f 90       	pop	r0
    2b0a:	1f 90       	pop	r1
    2b0c:	18 95       	reti

00002b0e <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    2b0e:	1f 92       	push	r1
    2b10:	0f 92       	push	r0
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	0f 92       	push	r0
    2b16:	11 24       	eor	r1, r1
    2b18:	0b b6       	in	r0, 0x3b	; 59
    2b1a:	0f 92       	push	r0
    2b1c:	2f 93       	push	r18
    2b1e:	3f 93       	push	r19
    2b20:	4f 93       	push	r20
    2b22:	5f 93       	push	r21
    2b24:	6f 93       	push	r22
    2b26:	7f 93       	push	r23
    2b28:	8f 93       	push	r24
    2b2a:	9f 93       	push	r25
    2b2c:	af 93       	push	r26
    2b2e:	bf 93       	push	r27
    2b30:	ef 93       	push	r30
    2b32:	ff 93       	push	r31
	dma_interrupt(3);
    2b34:	83 e0       	ldi	r24, 0x03	; 3
    2b36:	e8 de       	rcall	.-560    	; 0x2908 <dma_interrupt>
}
    2b38:	ff 91       	pop	r31
    2b3a:	ef 91       	pop	r30
    2b3c:	bf 91       	pop	r27
    2b3e:	af 91       	pop	r26
    2b40:	9f 91       	pop	r25
    2b42:	8f 91       	pop	r24
    2b44:	7f 91       	pop	r23
    2b46:	6f 91       	pop	r22
    2b48:	5f 91       	pop	r21
    2b4a:	4f 91       	pop	r20
    2b4c:	3f 91       	pop	r19
    2b4e:	2f 91       	pop	r18
    2b50:	0f 90       	pop	r0
    2b52:	0b be       	out	0x3b, r0	; 59
    2b54:	0f 90       	pop	r0
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	0f 90       	pop	r0
    2b5a:	1f 90       	pop	r1
    2b5c:	18 95       	reti

00002b5e <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    2b5e:	cf 93       	push	r28
    2b60:	df 93       	push	r29
    2b62:	1f 92       	push	r1
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    2b6a:	e8 2f       	mov	r30, r24
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	71 96       	adiw	r30, 0x11	; 17
    2b70:	e2 95       	swap	r30
    2b72:	f2 95       	swap	r31
    2b74:	f0 7f       	andi	r31, 0xF0	; 240
    2b76:	fe 27       	eor	r31, r30
    2b78:	e0 7f       	andi	r30, 0xF0	; 240
    2b7a:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2b7c:	8f b7       	in	r24, 0x3f	; 63
    2b7e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2b80:	f8 94       	cli
	return flags;
    2b82:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    2b84:	19 96       	adiw	r26, 0x09	; 9
    2b86:	8c 91       	ld	r24, X
    2b88:	19 97       	sbiw	r26, 0x09	; 9
    2b8a:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    2b8c:	1a 96       	adiw	r26, 0x0a	; 10
    2b8e:	8c 91       	ld	r24, X
    2b90:	1a 97       	sbiw	r26, 0x0a	; 10
    2b92:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    2b94:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    2b96:	17 96       	adiw	r26, 0x07	; 7
    2b98:	8c 91       	ld	r24, X
    2b9a:	17 97       	sbiw	r26, 0x07	; 7
    2b9c:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    2b9e:	18 96       	adiw	r26, 0x08	; 8
    2ba0:	8c 91       	ld	r24, X
    2ba2:	18 97       	sbiw	r26, 0x08	; 8
    2ba4:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    2ba6:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    2ba8:	12 96       	adiw	r26, 0x02	; 2
    2baa:	8c 91       	ld	r24, X
    2bac:	12 97       	sbiw	r26, 0x02	; 2
    2bae:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    2bb0:	13 96       	adiw	r26, 0x03	; 3
    2bb2:	8c 91       	ld	r24, X
    2bb4:	13 97       	sbiw	r26, 0x03	; 3
    2bb6:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    2bb8:	14 96       	adiw	r26, 0x04	; 4
    2bba:	2d 91       	ld	r18, X+
    2bbc:	3c 91       	ld	r19, X
    2bbe:	15 97       	sbiw	r26, 0x05	; 5
    2bc0:	24 83       	std	Z+4, r18	; 0x04
    2bc2:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    2bc4:	16 96       	adiw	r26, 0x06	; 6
    2bc6:	8c 91       	ld	r24, X
    2bc8:	16 97       	sbiw	r26, 0x06	; 6
    2bca:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    2bcc:	11 96       	adiw	r26, 0x01	; 1
    2bce:	8c 91       	ld	r24, X
    2bd0:	11 97       	sbiw	r26, 0x01	; 1
    2bd2:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    2bd4:	8c 91       	ld	r24, X
    2bd6:	8f 77       	andi	r24, 0x7F	; 127
    2bd8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2bda:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    2bdc:	0f 90       	pop	r0
    2bde:	df 91       	pop	r29
    2be0:	cf 91       	pop	r28
    2be2:	08 95       	ret

00002be4 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    2be4:	04 c0       	rjmp	.+8      	; 0x2bee <__portable_avr_delay_cycles+0xa>
    2be6:	61 50       	subi	r22, 0x01	; 1
    2be8:	71 09       	sbc	r23, r1
    2bea:	81 09       	sbc	r24, r1
    2bec:	91 09       	sbc	r25, r1
    2bee:	61 15       	cp	r22, r1
    2bf0:	71 05       	cpc	r23, r1
    2bf2:	81 05       	cpc	r24, r1
    2bf4:	91 05       	cpc	r25, r1
    2bf6:	b9 f7       	brne	.-18     	; 0x2be6 <__portable_avr_delay_cycles+0x2>
    2bf8:	08 95       	ret

00002bfa <rtc_get_time>:
    2bfa:	80 e1       	ldi	r24, 0x10	; 16
    2bfc:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    2c00:	e0 e2       	ldi	r30, 0x20	; 32
    2c02:	f4 e0       	ldi	r31, 0x04	; 4
    2c04:	81 81       	ldd	r24, Z+1	; 0x01
    2c06:	84 fd       	sbrc	r24, 4
    2c08:	fd cf       	rjmp	.-6      	; 0x2c04 <rtc_get_time+0xa>
    2c0a:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    2c0e:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    2c12:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    2c16:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    2c1a:	08 95       	ret

00002c1c <rtc_set_callback>:
    2c1c:	80 93 cf 2a 	sts	0x2ACF, r24	; 0x802acf <rtc_data>
    2c20:	90 93 d0 2a 	sts	0x2AD0, r25	; 0x802ad0 <rtc_data+0x1>
    2c24:	08 95       	ret

00002c26 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2c2a:	64 e0       	ldi	r22, 0x04	; 4
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    2c32:	c0 ef       	ldi	r28, 0xF0	; 240
    2c34:	d0 e0       	ldi	r29, 0x00	; 0
    2c36:	88 81       	ld	r24, Y
    2c38:	82 60       	ori	r24, 0x02	; 2
    2c3a:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    2c3c:	61 e0       	ldi	r22, 0x01	; 1
    2c3e:	80 ef       	ldi	r24, 0xF0	; 240
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	0e 94 c1 53 	call	0xa782	; 0xa782 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    2c46:	88 81       	ld	r24, Y
    2c48:	84 60       	ori	r24, 0x04	; 4
    2c4a:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    2c4c:	69 ee       	ldi	r22, 0xE9	; 233
    2c4e:	73 e0       	ldi	r23, 0x03	; 3
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	c7 df       	rcall	.-114    	; 0x2be4 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    2c56:	88 81       	ld	r24, Y
    2c58:	88 61       	ori	r24, 0x18	; 24
    2c5a:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    2c5c:	e0 ef       	ldi	r30, 0xF0	; 240
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	81 81       	ldd	r24, Z+1	; 0x01
    2c62:	83 ff       	sbrs	r24, 3
    2c64:	fd cf       	rjmp	.-6      	; 0x2c60 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    2c66:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c6a:	e0 e2       	ldi	r30, 0x20	; 32
    2c6c:	f4 e0       	ldi	r31, 0x04	; 4
    2c6e:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    2c70:	80 fd       	sbrc	r24, 0
    2c72:	fd cf       	rjmp	.-6      	; 0x2c6e <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    2c74:	e0 e2       	ldi	r30, 0x20	; 32
    2c76:	f4 e0       	ldi	r31, 0x04	; 4
    2c78:	8f ef       	ldi	r24, 0xFF	; 255
    2c7a:	9f ef       	ldi	r25, 0xFF	; 255
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	80 87       	std	Z+8, r24	; 0x08
    2c80:	91 87       	std	Z+9, r25	; 0x09
    2c82:	a2 87       	std	Z+10, r26	; 0x0a
    2c84:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    2c86:	14 82       	std	Z+4, r1	; 0x04
    2c88:	15 82       	std	Z+5, r1	; 0x05
    2c8a:	16 82       	std	Z+6, r1	; 0x06
    2c8c:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c8e:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    2c90:	80 fd       	sbrc	r24, 0
    2c92:	fd cf       	rjmp	.-6      	; 0x2c8e <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    2c94:	e0 e2       	ldi	r30, 0x20	; 32
    2c96:	f4 e0       	ldi	r31, 0x04	; 4
    2c98:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c9e:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    2ca0:	80 fd       	sbrc	r24, 0
    2ca2:	fd cf       	rjmp	.-6      	; 0x2c9e <rtc_init+0x78>
}
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	08 95       	ret

00002caa <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    2caa:	1f 92       	push	r1
    2cac:	0f 92       	push	r0
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	0f 92       	push	r0
    2cb2:	11 24       	eor	r1, r1
    2cb4:	0b b6       	in	r0, 0x3b	; 59
    2cb6:	0f 92       	push	r0
    2cb8:	2f 93       	push	r18
    2cba:	3f 93       	push	r19
    2cbc:	4f 93       	push	r20
    2cbe:	5f 93       	push	r21
    2cc0:	6f 93       	push	r22
    2cc2:	7f 93       	push	r23
    2cc4:	8f 93       	push	r24
    2cc6:	9f 93       	push	r25
    2cc8:	af 93       	push	r26
    2cca:	bf 93       	push	r27
    2ccc:	cf 93       	push	r28
    2cce:	df 93       	push	r29
    2cd0:	ef 93       	push	r30
    2cd2:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    2cd4:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    2cd8:	c0 91 cf 2a 	lds	r28, 0x2ACF	; 0x802acf <rtc_data>
    2cdc:	d0 91 d0 2a 	lds	r29, 0x2AD0	; 0x802ad0 <rtc_data+0x1>
    2ce0:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    2ce2:	19 f0       	breq	.+6      	; 0x2cea <__vector_11+0x40>
    2ce4:	8a df       	rcall	.-236    	; 0x2bfa <rtc_get_time>
    2ce6:	fe 01       	movw	r30, r28
}
    2ce8:	19 95       	eicall
    2cea:	ff 91       	pop	r31
    2cec:	ef 91       	pop	r30
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	bf 91       	pop	r27
    2cf4:	af 91       	pop	r26
    2cf6:	9f 91       	pop	r25
    2cf8:	8f 91       	pop	r24
    2cfa:	7f 91       	pop	r23
    2cfc:	6f 91       	pop	r22
    2cfe:	5f 91       	pop	r21
    2d00:	4f 91       	pop	r20
    2d02:	3f 91       	pop	r19
    2d04:	2f 91       	pop	r18
    2d06:	0f 90       	pop	r0
    2d08:	0b be       	out	0x3b, r0	; 59
    2d0a:	0f 90       	pop	r0
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	0f 90       	pop	r0
    2d10:	1f 90       	pop	r1
    2d12:	18 95       	reti

00002d14 <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* SINE LUT */
	uint16_t left_x, rght_x, left_y, rght_y;
	rght_x = left_x = phase >> 4;
    2d14:	fc 01       	movw	r30, r24
    2d16:	f2 95       	swap	r31
    2d18:	e2 95       	swap	r30
    2d1a:	ef 70       	andi	r30, 0x0F	; 15
    2d1c:	ef 27       	eor	r30, r31
    2d1e:	ff 70       	andi	r31, 0x0F	; 15
    2d20:	ef 27       	eor	r30, r31
	if (++rght_x >= PM_SINE_COUNT) {
    2d22:	9f 01       	movw	r18, r30
    2d24:	2f 5f       	subi	r18, 0xFF	; 255
    2d26:	3f 4f       	sbci	r19, 0xFF	; 255
    2d28:	21 15       	cp	r18, r1
    2d2a:	40 e1       	ldi	r20, 0x10	; 16
    2d2c:	34 07       	cpc	r19, r20
    2d2e:	08 f0       	brcs	.+2      	; 0x2d32 <get_interpolated_sine+0x1e>
		rght_x -= PM_SINE_COUNT;
    2d30:	30 51       	subi	r19, 0x10	; 16
	}
	left_y = PGM_READ_WORD(&(PM_SINE[left_x]));
    2d32:	ee 0f       	add	r30, r30
    2d34:	ff 1f       	adc	r31, r31
    2d36:	ea 54       	subi	r30, 0x4A	; 74
    2d38:	f7 4f       	sbci	r31, 0xF7	; 247
    2d3a:	45 91       	lpm	r20, Z+
    2d3c:	54 91       	lpm	r21, Z
	rght_y = PGM_READ_WORD(&(PM_SINE[rght_x]));
    2d3e:	f9 01       	movw	r30, r18
    2d40:	ee 0f       	add	r30, r30
    2d42:	ff 1f       	adc	r31, r31
    2d44:	ea 54       	subi	r30, 0x4A	; 74
    2d46:	f7 4f       	sbci	r31, 0xF7	; 247
    2d48:	25 91       	lpm	r18, Z+
    2d4a:	34 91       	lpm	r19, Z

	/* INTERPOLATION LUT */
	uint16_t idx_y	= (uint16_t)((uint32_t)PM_SINE_MAX_STEP + rght_y - left_y);		// PM_SINE_MAX_STEP = +/-50
	uint16_t idx	= (idx_y << 4) | (phase & 0x0f);
	return left_y + (int8_t)PGM_READ_BYTE(&(PM_SINE_IP[idx]));
    2d4c:	f9 01       	movw	r30, r18
    2d4e:	f4 96       	adiw	r30, 0x34	; 52
    2d50:	e4 1b       	sub	r30, r20
    2d52:	f5 0b       	sbc	r31, r21
    2d54:	e2 95       	swap	r30
    2d56:	f2 95       	swap	r31
    2d58:	f0 7f       	andi	r31, 0xF0	; 240
    2d5a:	fe 27       	eor	r31, r30
    2d5c:	e0 7f       	andi	r30, 0xF0	; 240
    2d5e:	fe 27       	eor	r31, r30
    2d60:	8f 70       	andi	r24, 0x0F	; 15
    2d62:	99 27       	eor	r25, r25
    2d64:	e8 2b       	or	r30, r24
    2d66:	f9 2b       	or	r31, r25
    2d68:	ea 5c       	subi	r30, 0xCA	; 202
    2d6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d6c:	e4 91       	lpm	r30, Z
}
    2d6e:	ca 01       	movw	r24, r20
    2d70:	8e 0f       	add	r24, r30
    2d72:	91 1d       	adc	r25, r1
    2d74:	e7 fd       	sbrc	r30, 7
    2d76:	9a 95       	dec	r25
    2d78:	08 95       	ret

00002d7a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2d7a:	04 c0       	rjmp	.+8      	; 0x2d84 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2d7c:	61 50       	subi	r22, 0x01	; 1
    2d7e:	71 09       	sbc	r23, r1
    2d80:	81 09       	sbc	r24, r1
    2d82:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2d84:	61 15       	cp	r22, r1
    2d86:	71 05       	cpc	r23, r1
    2d88:	81 05       	cpc	r24, r1
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	b9 f7       	brne	.-18     	; 0x2d7c <__portable_avr_delay_cycles+0x2>
    2d8e:	08 95       	ret

00002d90 <twi2_waitUntilReady>:
		return (((int32_t)raw * factor * ((int32_t)asa + 128) / 10) - 128) >> 8;
	}
}

static void twi2_waitUntilReady(void)
{
    2d90:	cf 92       	push	r12
    2d92:	df 92       	push	r13
    2d94:	ef 92       	push	r14
    2d96:	ff 92       	push	r15
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	cf 93       	push	r28
	status_code_t status;
	uint8_t isBusy;
	uint8_t isValid;

	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_STATE;
    2d9e:	eb e0       	ldi	r30, 0x0B	; 11
    2da0:	f0 e2       	ldi	r31, 0x20	; 32
    2da2:	83 e0       	ldi	r24, 0x03	; 3
    2da4:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	84 83       	std	Z+4, r24	; 0x04
    2dac:	95 83       	std	Z+5, r25	; 0x05

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2dae:	8f 01       	movw	r16, r30
    2db0:	cc 24       	eor	r12, r12
    2db2:	c3 94       	inc	r12
    2db4:	d1 2c       	mov	r13, r1
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    2db6:	0f 2e       	mov	r0, r31
    2db8:	f7 e9       	ldi	r31, 0x97	; 151
    2dba:	ef 2e       	mov	r14, r31
    2dbc:	f8 e2       	ldi	r31, 0x28	; 40
    2dbe:	ff 2e       	mov	r15, r31
    2dc0:	f0 2d       	mov	r31, r0
	twi2_packet.addr_length = 1;

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	c0 86       	std	Z+8, r12	; 0x08
    2dc6:	d1 86       	std	Z+9, r13	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	b8 01       	movw	r22, r16
    2dcc:	80 e8       	ldi	r24, 0x80	; 128
    2dce:	94 e0       	ldi	r25, 0x04	; 4
    2dd0:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    2dd4:	f7 01       	movw	r30, r14
    2dd6:	c0 81       	ld	r28, Z
    2dd8:	9c 2f       	mov	r25, r28
    2dda:	90 78       	andi	r25, 0x80	; 128
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
    2ddc:	81 11       	cpse	r24, r1
    2dde:	0d c0       	rjmp	.+26     	; 0x2dfa <twi2_waitUntilReady+0x6a>
    2de0:	91 f0       	breq	.+36     	; 0x2e06 <twi2_waitUntilReady+0x76>
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
		} else {
			if (isBusy && isValid) {
    2de2:	8c 2f       	mov	r24, r28
    2de4:	81 78       	andi	r24, 0x81	; 129
    2de6:	81 38       	cpi	r24, 0x81	; 129
    2de8:	29 f4       	brne	.+10     	; 0x2df4 <twi2_waitUntilReady+0x64>
				delay_us(TWI_SMART_LCD_DEVICE_BUSY_DELAY_MIN_US);
    2dea:	65 ef       	ldi	r22, 0xF5	; 245
    2dec:	71 e0       	ldi	r23, 0x01	; 1
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	c3 df       	rcall	.-122    	; 0x2d7a <__portable_avr_delay_cycles>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
    2df4:	c0 fd       	sbrc	r28, 0
    2df6:	e5 cf       	rjmp	.-54     	; 0x2dc2 <twi2_waitUntilReady+0x32>
    2df8:	0c c0       	rjmp	.+24     	; 0x2e12 <twi2_waitUntilReady+0x82>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2dfa:	65 e0       	ldi	r22, 0x05	; 5
    2dfc:	70 e0       	ldi	r23, 0x00	; 0
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	bb df       	rcall	.-138    	; 0x2d7a <__portable_avr_delay_cycles>
    2e04:	de cf       	rjmp	.-68     	; 0x2dc2 <twi2_waitUntilReady+0x32>
    2e06:	65 e0       	ldi	r22, 0x05	; 5
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	b5 df       	rcall	.-150    	; 0x2d7a <__portable_avr_delay_cycles>
    2e10:	d8 cf       	rjmp	.-80     	; 0x2dc2 <twi2_waitUntilReady+0x32>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
	//printf("DBG909\r\n");
}
    2e12:	cf 91       	pop	r28
    2e14:	1f 91       	pop	r17
    2e16:	0f 91       	pop	r16
    2e18:	ff 90       	pop	r15
    2e1a:	ef 90       	pop	r14
    2e1c:	df 90       	pop	r13
    2e1e:	cf 90       	pop	r12
    2e20:	08 95       	ret

00002e22 <isr_twi1_baro>:
		}
	} while (false);
}

static void isr_twi1_baro(uint32_t now, bool sync)
{
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	1f 92       	push	r1
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t  s_step = 100;
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
    2e2c:	44 23       	and	r20, r20
    2e2e:	41 f0       	breq	.+16     	; 0x2e40 <isr_twi1_baro+0x1e>
    2e30:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7492>
    2e34:	84 36       	cpi	r24, 0x64	; 100
    2e36:	08 f4       	brcc	.+2      	; 0x2e3a <isr_twi1_baro+0x18>
    2e38:	bb c0       	rjmp	.+374    	; 0x2fb0 <isr_twi1_baro+0x18e>
		s_step = 0;
    2e3a:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <s_step.7492>
    2e3e:	09 c0       	rjmp	.+18     	; 0x2e52 <isr_twi1_baro+0x30>
	}

	switch (s_step) {
    2e40:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7492>
    2e44:	85 31       	cpi	r24, 0x15	; 21
    2e46:	09 f1       	breq	.+66     	; 0x2e8a <isr_twi1_baro+0x68>
    2e48:	8b 32       	cpi	r24, 0x2B	; 43
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <isr_twi1_baro+0x2c>
    2e4c:	59 c0       	rjmp	.+178    	; 0x2f00 <isr_twi1_baro+0xde>
    2e4e:	81 11       	cpse	r24, r1
    2e50:	a9 c0       	rjmp	.+338    	; 0x2fa4 <isr_twi1_baro+0x182>
		case 0:
			/* Request D1 */
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    2e52:	ef e1       	ldi	r30, 0x1F	; 31
    2e54:	f0 e2       	ldi	r31, 0x20	; 32
    2e56:	86 e7       	ldi	r24, 0x76	; 118
    2e58:	80 83       	st	Z, r24
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D1_4096;
    2e5a:	88 e4       	ldi	r24, 0x48	; 72
    2e5c:	81 83       	std	Z+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	84 83       	std	Z+4, r24	; 0x04
    2e64:	95 83       	std	Z+5, r25	; 0x05
			twi1_packet.length = 0;
    2e66:	10 86       	std	Z+8, r1	; 0x08
    2e68:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2e6a:	40 e0       	ldi	r20, 0x00	; 0
    2e6c:	bf 01       	movw	r22, r30
    2e6e:	80 ea       	ldi	r24, 0xA0	; 160
    2e70:	94 e0       	ldi	r25, 0x04	; 4
    2e72:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
			status_code_t sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2e76:	81 11       	cpse	r24, r1
    2e78:	04 c0       	rjmp	.+8      	; 0x2e82 <isr_twi1_baro+0x60>
				s_step = 1;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7492>
				return;
    2e80:	a0 c0       	rjmp	.+320    	; 0x2fc2 <isr_twi1_baro+0x1a0>
			}

			s_step = 200;										// Failed, stay until new sync triggers
    2e82:	88 ec       	ldi	r24, 0xC8	; 200
    2e84:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7492>
			return;
    2e88:	9c c0       	rjmp	.+312    	; 0x2fc2 <isr_twi1_baro+0x1a0>
		break;

		case 21:
			/* Get data */
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2e8a:	ef e1       	ldi	r30, 0x1F	; 31
    2e8c:	f0 e2       	ldi	r31, 0x20	; 32
    2e8e:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    2e90:	83 e0       	ldi	r24, 0x03	; 3
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	80 87       	std	Z+8, r24	; 0x08
    2e96:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2e98:	41 e0       	ldi	r20, 0x01	; 1
    2e9a:	bf 01       	movw	r22, r30
    2e9c:	80 ea       	ldi	r24, 0xA0	; 160
    2e9e:	94 e0       	ldi	r25, 0x04	; 4
    2ea0:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2ea4:	81 11       	cpse	r24, r1
    2ea6:	28 c0       	rjmp	.+80     	; 0x2ef8 <isr_twi1_baro+0xd6>
				s_twi1_baro_d1 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    2ea8:	ef e9       	ldi	r30, 0x9F	; 159
    2eaa:	f8 e2       	ldi	r31, 0x28	; 40
    2eac:	20 81       	ld	r18, Z
    2eae:	81 81       	ldd	r24, Z+1	; 0x01
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	a0 e0       	ldi	r26, 0x00	; 0
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	ba 2f       	mov	r27, r26
    2eb8:	a9 2f       	mov	r26, r25
    2eba:	98 2f       	mov	r25, r24
    2ebc:	88 27       	eor	r24, r24
    2ebe:	a2 2b       	or	r26, r18
    2ec0:	22 81       	ldd	r18, Z+2	; 0x02
    2ec2:	82 2b       	or	r24, r18
    2ec4:	80 93 94 26 	sts	0x2694, r24	; 0x802694 <s_twi1_baro_d1.7493>
    2ec8:	90 93 95 26 	sts	0x2695, r25	; 0x802695 <s_twi1_baro_d1.7493+0x1>
    2ecc:	a0 93 96 26 	sts	0x2696, r26	; 0x802696 <s_twi1_baro_d1.7493+0x2>
    2ed0:	b0 93 97 26 	sts	0x2697, r27	; 0x802697 <s_twi1_baro_d1.7493+0x3>

				/* Request D2 */
				twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D2_4096;
    2ed4:	ef e1       	ldi	r30, 0x1F	; 31
    2ed6:	f0 e2       	ldi	r31, 0x20	; 32
    2ed8:	88 e5       	ldi	r24, 0x58	; 88
    2eda:	81 83       	std	Z+1, r24	; 0x01
				twi1_packet.length = 0;
    2edc:	10 86       	std	Z+8, r1	; 0x08
    2ede:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	bf 01       	movw	r22, r30
    2ee4:	80 ea       	ldi	r24, 0xA0	; 160
    2ee6:	94 e0       	ldi	r25, 0x04	; 4
    2ee8:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
				sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
				if (sc == STATUS_OK) {
    2eec:	81 11       	cpse	r24, r1
    2eee:	04 c0       	rjmp	.+8      	; 0x2ef8 <isr_twi1_baro+0xd6>
					s_step = 22;
    2ef0:	86 e1       	ldi	r24, 0x16	; 22
    2ef2:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7492>
					return;
    2ef6:	65 c0       	rjmp	.+202    	; 0x2fc2 <isr_twi1_baro+0x1a0>
				}
			}

			s_step = 211;										// Failed, stay until new sync triggers
    2ef8:	83 ed       	ldi	r24, 0xD3	; 211
    2efa:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7492>
			return;
    2efe:	61 c0       	rjmp	.+194    	; 0x2fc2 <isr_twi1_baro+0x1a0>
		break;

		case 43:
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2f00:	ef e1       	ldi	r30, 0x1F	; 31
    2f02:	f0 e2       	ldi	r31, 0x20	; 32
    2f04:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    2f06:	83 e0       	ldi	r24, 0x03	; 3
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	80 87       	std	Z+8, r24	; 0x08
    2f0c:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2f0e:	41 e0       	ldi	r20, 0x01	; 1
    2f10:	bf 01       	movw	r22, r30
    2f12:	80 ea       	ldi	r24, 0xA0	; 160
    2f14:	94 e0       	ldi	r25, 0x04	; 4
    2f16:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2f1a:	81 11       	cpse	r24, r1
    2f1c:	3f c0       	rjmp	.+126    	; 0x2f9c <isr_twi1_baro+0x17a>
				s_twi1_baro_d2 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    2f1e:	ef e9       	ldi	r30, 0x9F	; 159
    2f20:	f8 e2       	ldi	r31, 0x28	; 40
    2f22:	20 81       	ld	r18, Z
    2f24:	81 81       	ldd	r24, Z+1	; 0x01
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a0 e0       	ldi	r26, 0x00	; 0
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	ba 2f       	mov	r27, r26
    2f2e:	a9 2f       	mov	r26, r25
    2f30:	98 2f       	mov	r25, r24
    2f32:	88 27       	eor	r24, r24
    2f34:	a2 2b       	or	r26, r18
    2f36:	22 81       	ldd	r18, Z+2	; 0x02
    2f38:	82 2b       	or	r24, r18
    2f3a:	80 93 90 26 	sts	0x2690, r24	; 0x802690 <s_twi1_baro_d2.7494>
    2f3e:	90 93 91 26 	sts	0x2691, r25	; 0x802691 <s_twi1_baro_d2.7494+0x1>
    2f42:	a0 93 92 26 	sts	0x2692, r26	; 0x802692 <s_twi1_baro_d2.7494+0x2>
    2f46:	b0 93 93 26 	sts	0x2693, r27	; 0x802693 <s_twi1_baro_d2.7494+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f4a:	8f b7       	in	r24, 0x3f	; 63
    2f4c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2f4e:	f8 94       	cli
	return flags;
    2f50:	89 81       	ldd	r24, Y+1	; 0x01

				irqflags_t flags = cpu_irq_save();
				g_twi1_baro_d1 = s_twi1_baro_d1;
    2f52:	40 91 94 26 	lds	r20, 0x2694	; 0x802694 <s_twi1_baro_d1.7493>
    2f56:	50 91 95 26 	lds	r21, 0x2695	; 0x802695 <s_twi1_baro_d1.7493+0x1>
    2f5a:	60 91 96 26 	lds	r22, 0x2696	; 0x802696 <s_twi1_baro_d1.7493+0x2>
    2f5e:	70 91 97 26 	lds	r23, 0x2697	; 0x802697 <s_twi1_baro_d1.7493+0x3>
    2f62:	40 93 34 29 	sts	0x2934, r20	; 0x802934 <g_twi1_baro_d1>
    2f66:	50 93 35 29 	sts	0x2935, r21	; 0x802935 <g_twi1_baro_d1+0x1>
    2f6a:	60 93 36 29 	sts	0x2936, r22	; 0x802936 <g_twi1_baro_d1+0x2>
    2f6e:	70 93 37 29 	sts	0x2937, r23	; 0x802937 <g_twi1_baro_d1+0x3>
				g_twi1_baro_d2 = s_twi1_baro_d2;
    2f72:	40 91 90 26 	lds	r20, 0x2690	; 0x802690 <s_twi1_baro_d2.7494>
    2f76:	50 91 91 26 	lds	r21, 0x2691	; 0x802691 <s_twi1_baro_d2.7494+0x1>
    2f7a:	60 91 92 26 	lds	r22, 0x2692	; 0x802692 <s_twi1_baro_d2.7494+0x2>
    2f7e:	70 91 93 26 	lds	r23, 0x2693	; 0x802693 <s_twi1_baro_d2.7494+0x3>
    2f82:	40 93 30 29 	sts	0x2930, r20	; 0x802930 <g_twi1_baro_d2>
    2f86:	50 93 31 29 	sts	0x2931, r21	; 0x802931 <g_twi1_baro_d2+0x1>
    2f8a:	60 93 32 29 	sts	0x2932, r22	; 0x802932 <g_twi1_baro_d2+0x2>
    2f8e:	70 93 33 29 	sts	0x2933, r23	; 0x802933 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f92:	8f bf       	out	0x3f, r24	; 63
				cpu_irq_restore(flags);

				s_step = 123;									// Success, stay until new sync triggers
    2f94:	8b e7       	ldi	r24, 0x7B	; 123
    2f96:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7492>
				return;
    2f9a:	13 c0       	rjmp	.+38     	; 0x2fc2 <isr_twi1_baro+0x1a0>
			}

			s_step = 223;										// Failed, stay until new sync triggers
    2f9c:	8f ed       	ldi	r24, 0xDF	; 223
    2f9e:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7492>
			return;
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <isr_twi1_baro+0x1a0>
		break;

		default:
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
    2fa4:	84 36       	cpi	r24, 0x64	; 100
    2fa6:	68 f4       	brcc	.+26     	; 0x2fc2 <isr_twi1_baro+0x1a0>
				s_step++;
    2fa8:	8f 5f       	subi	r24, 0xFF	; 255
    2faa:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7492>
    2fae:	09 c0       	rjmp	.+18     	; 0x2fc2 <isr_twi1_baro+0x1a0>
	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
		s_step = 0;
	}

	switch (s_step) {
    2fb0:	85 31       	cpi	r24, 0x15	; 21
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <isr_twi1_baro+0x194>
    2fb4:	6a cf       	rjmp	.-300    	; 0x2e8a <isr_twi1_baro+0x68>
    2fb6:	8b 32       	cpi	r24, 0x2B	; 43
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <isr_twi1_baro+0x19a>
    2fba:	a2 cf       	rjmp	.-188    	; 0x2f00 <isr_twi1_baro+0xde>
    2fbc:	81 11       	cpse	r24, r1
    2fbe:	f4 cf       	rjmp	.-24     	; 0x2fa8 <isr_twi1_baro+0x186>
    2fc0:	48 cf       	rjmp	.-368    	; 0x2e52 <isr_twi1_baro+0x30>
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
				s_step++;
			}
	}
}
    2fc2:	0f 90       	pop	r0
    2fc4:	df 91       	pop	r29
    2fc6:	cf 91       	pop	r28
    2fc8:	08 95       	ret

00002fca <task_twi2_lcd_pos_xy>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_pos_xy(uint8_t x, uint8_t y)
{
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
    2fce:	d8 2f       	mov	r29, r24
	twi2_waitUntilReady();
    2fd0:	c6 2f       	mov	r28, r22
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2fd2:	de de       	rcall	.-580    	; 0x2d90 <twi2_waitUntilReady>
    2fd4:	eb e0       	ldi	r30, 0x0B	; 11
    2fd6:	f0 e2       	ldi	r31, 0x20	; 32
    2fd8:	80 e2       	ldi	r24, 0x20	; 32
	twi2_m_data[0] = x;
    2fda:	81 83       	std	Z+1, r24	; 0x01
    2fdc:	a7 e9       	ldi	r26, 0x97	; 151
    2fde:	b8 e2       	ldi	r27, 0x28	; 40
	twi2_m_data[1] = y;
    2fe0:	dc 93       	st	X, r29
    2fe2:	11 96       	adiw	r26, 0x01	; 1
	twi2_packet.length = 2;
    2fe4:	cc 93       	st	X, r28
    2fe6:	82 e0       	ldi	r24, 0x02	; 2
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	80 87       	std	Z+8, r24	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2fec:	91 87       	std	Z+9, r25	; 0x09
    2fee:	40 e0       	ldi	r20, 0x00	; 0
    2ff0:	bf 01       	movw	r22, r30
    2ff2:	80 e8       	ldi	r24, 0x80	; 128
    2ff4:	94 e0       	ldi	r25, 0x04	; 4
    2ff6:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2ffa:	65 e0       	ldi	r22, 0x05	; 5
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	90 e0       	ldi	r25, 0x00	; 0
}
    3002:	bb de       	rcall	.-650    	; 0x2d7a <__portable_avr_delay_cycles>
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	08 95       	ret

0000300a <task_twi2_lcd_circ>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_circ(uint8_t x, uint8_t y, uint8_t radius, bool filled, uint8_t color)
{
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
    300e:	c4 2f       	mov	r28, r20
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    3010:	d2 2f       	mov	r29, r18
    3012:	db df       	rcall	.-74     	; 0x2fca <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC : TWI_SMART_LCD_CMD_DRAW_CIRC;
    3014:	bd de       	rcall	.-646    	; 0x2d90 <twi2_waitUntilReady>
    3016:	d1 11       	cpse	r29, r1
    3018:	02 c0       	rjmp	.+4      	; 0x301e <task_twi2_lcd_circ+0x14>
    301a:	88 e3       	ldi	r24, 0x38	; 56
    301c:	01 c0       	rjmp	.+2      	; 0x3020 <task_twi2_lcd_circ+0x16>
    301e:	8a e3       	ldi	r24, 0x3A	; 58
    3020:	eb e0       	ldi	r30, 0x0B	; 11
    3022:	f0 e2       	ldi	r31, 0x20	; 32
	twi2_m_data[0] = radius;
    3024:	81 83       	std	Z+1, r24	; 0x01
    3026:	c0 93 97 28 	sts	0x2897, r28	; 0x802897 <twi2_m_data>
	//twi2_m_data[1] = color;
	twi2_packet.length = 1;
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	80 87       	std	Z+8, r24	; 0x08
    3030:	91 87       	std	Z+9, r25	; 0x09
    3032:	40 e0       	ldi	r20, 0x00	; 0
    3034:	bf 01       	movw	r22, r30
    3036:	80 e8       	ldi	r24, 0x80	; 128
    3038:	94 e0       	ldi	r25, 0x04	; 4
    303a:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    303e:	65 e0       	ldi	r22, 0x05	; 5
    3040:	70 e0       	ldi	r23, 0x00	; 0
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	90 e0       	ldi	r25, 0x00	; 0
}
    3046:	99 de       	rcall	.-718    	; 0x2d7a <__portable_avr_delay_cycles>
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	08 95       	ret

0000304e <task_twi2_lcd_line>:
		slen -= this_len;
	}
}

static void task_twi2_lcd_line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t color)
{
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	d4 2f       	mov	r29, r20
	task_twi2_lcd_pos_xy(x1, y1);

	twi2_waitUntilReady();
    3054:	c2 2f       	mov	r28, r18
    3056:	b9 df       	rcall	.-142    	; 0x2fca <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
    3058:	9b de       	rcall	.-714    	; 0x2d90 <twi2_waitUntilReady>
    305a:	eb e0       	ldi	r30, 0x0B	; 11
    305c:	f0 e2       	ldi	r31, 0x20	; 32
    305e:	82 e3       	ldi	r24, 0x32	; 50
	twi2_m_data[0] = x2;
    3060:	81 83       	std	Z+1, r24	; 0x01
    3062:	a7 e9       	ldi	r26, 0x97	; 151
    3064:	b8 e2       	ldi	r27, 0x28	; 40
	twi2_m_data[1] = y2;
    3066:	dc 93       	st	X, r29
    3068:	11 96       	adiw	r26, 0x01	; 1
	//twi2_m_data[2] = color;
	twi2_packet.length = 2;
    306a:	cc 93       	st	X, r28
    306c:	82 e0       	ldi	r24, 0x02	; 2
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	80 87       	std	Z+8, r24	; 0x08
    3072:	91 87       	std	Z+9, r25	; 0x09
    3074:	40 e0       	ldi	r20, 0x00	; 0
    3076:	bf 01       	movw	r22, r30
    3078:	80 e8       	ldi	r24, 0x80	; 128
    307a:	94 e0       	ldi	r25, 0x04	; 4
    307c:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3080:	65 e0       	ldi	r22, 0x05	; 5
    3082:	70 e0       	ldi	r23, 0x00	; 0
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	90 e0       	ldi	r25, 0x00	; 0
}
    3088:	78 de       	rcall	.-784    	; 0x2d7a <__portable_avr_delay_cycles>
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	08 95       	ret

00003090 <task_twi2_lcd_str>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_str(uint8_t x, uint8_t y, const char* str)
{
    3090:	9f 92       	push	r9
    3092:	af 92       	push	r10
    3094:	bf 92       	push	r11
    3096:	cf 92       	push	r12
    3098:	df 92       	push	r13
    309a:	ef 92       	push	r14
    309c:	ff 92       	push	r15
    309e:	0f 93       	push	r16
    30a0:	1f 93       	push	r17
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	b8 2e       	mov	r11, r24
    30a8:	a6 2e       	mov	r10, r22
    30aa:	ea 01       	movw	r28, r20
	uint8_t slen = strlen(str);
    30ac:	fa 01       	movw	r30, r20
    30ae:	01 90       	ld	r0, Z+
    30b0:	00 20       	and	r0, r0
    30b2:	e9 f7       	brne	.-6      	; 0x30ae <task_twi2_lcd_str+0x1e>
    30b4:	31 97       	sbiw	r30, 0x01	; 1
    30b6:	ce 2e       	mov	r12, r30
    30b8:	c4 1a       	sub	r12, r20
	if (!slen) {
    30ba:	09 f4       	brne	.+2      	; 0x30be <task_twi2_lcd_str+0x2e>
    30bc:	43 c0       	rjmp	.+134    	; 0x3144 <task_twi2_lcd_str+0xb4>
		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    30be:	0b e0       	ldi	r16, 0x0B	; 11
    30c0:	10 e2       	ldi	r17, 0x20	; 32
    30c2:	0f 2e       	mov	r0, r31
    30c4:	f0 e3       	ldi	r31, 0x30	; 48
    30c6:	9f 2e       	mov	r9, r31
    30c8:	f0 2d       	mov	r31, r0
			twi2_m_data[0] = this_len;
    30ca:	0f 2e       	mov	r0, r31
    30cc:	f7 e9       	ldi	r31, 0x97	; 151
    30ce:	ef 2e       	mov	r14, r31
    30d0:	f8 e2       	ldi	r31, 0x28	; 40
    30d2:	ff 2e       	mov	r15, r31
    30d4:	f0 2d       	mov	r31, r0
    30d6:	dc 2c       	mov	r13, r12
    30d8:	e6 e0       	ldi	r30, 0x06	; 6
    30da:	ec 15       	cp	r30, r12
    30dc:	20 f4       	brcc	.+8      	; 0x30e6 <task_twi2_lcd_str+0x56>
    30de:	0f 2e       	mov	r0, r31
    30e0:	f6 e0       	ldi	r31, 0x06	; 6
    30e2:	df 2e       	mov	r13, r31
    30e4:	f0 2d       	mov	r31, r0
			this_len = TWI2_STR_MAXLEN;
		}

		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);
    30e6:	6a 2d       	mov	r22, r10
    30e8:	8b 2d       	mov	r24, r11

			twi2_waitUntilReady();
    30ea:	6f df       	rcall	.-290    	; 0x2fca <task_twi2_lcd_pos_xy>
    30ec:	51 de       	rcall	.-862    	; 0x2d90 <twi2_waitUntilReady>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    30ee:	f8 01       	movw	r30, r16
    30f0:	91 82       	std	Z+1, r9	; 0x01
			twi2_m_data[0] = this_len;
    30f2:	f7 01       	movw	r30, r14
    30f4:	d0 82       	st	Z, r13
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    30f6:	dd 20       	and	r13, r13
    30f8:	69 f0       	breq	.+26     	; 0x3114 <task_twi2_lcd_str+0x84>
    30fa:	81 e0       	ldi	r24, 0x01	; 1
				twi2_m_data[idx] = *(str++);
    30fc:	21 96       	adiw	r28, 0x01	; 1
    30fe:	e8 2f       	mov	r30, r24
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	e9 56       	subi	r30, 0x69	; 105
    3104:	f7 4d       	sbci	r31, 0xD7	; 215
    3106:	de 01       	movw	r26, r28
    3108:	11 97       	sbiw	r26, 0x01	; 1
    310a:	9c 91       	ld	r25, X
    310c:	90 83       	st	Z, r25
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
			twi2_m_data[0] = this_len;
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    310e:	8f 5f       	subi	r24, 0xFF	; 255
    3110:	d8 16       	cp	r13, r24
    3112:	a0 f7       	brcc	.-24     	; 0x30fc <task_twi2_lcd_str+0x6c>
				twi2_m_data[idx] = *(str++);
			}
			twi2_packet.length = this_len + 1;
    3114:	8d 2d       	mov	r24, r13
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	01 96       	adiw	r24, 0x01	; 1
    311a:	f8 01       	movw	r30, r16
    311c:	80 87       	std	Z+8, r24	; 0x08
    311e:	91 87       	std	Z+9, r25	; 0x09
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	b8 01       	movw	r22, r16
    3124:	80 e8       	ldi	r24, 0x80	; 128
    3126:	94 e0       	ldi	r25, 0x04	; 4
    3128:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    312c:	65 e0       	ldi	r22, 0x05	; 5
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	22 de       	rcall	.-956    	; 0x2d7a <__portable_avr_delay_cycles>
		}

		x    += this_len * 6;
    3136:	8d 2d       	mov	r24, r13
    3138:	88 0f       	add	r24, r24
    313a:	8d 0d       	add	r24, r13
    313c:	88 0f       	add	r24, r24
    313e:	b8 0e       	add	r11, r24
		slen -= this_len;
    3140:	cd 18       	sub	r12, r13
	uint8_t slen = strlen(str);
	if (!slen) {
		return;
	}

	while (slen) {
    3142:	49 f6       	brne	.-110    	; 0x30d6 <task_twi2_lcd_str+0x46>
		}

		x    += this_len * 6;
		slen -= this_len;
	}
}
    3144:	df 91       	pop	r29
    3146:	cf 91       	pop	r28
    3148:	1f 91       	pop	r17
    314a:	0f 91       	pop	r16
    314c:	ff 90       	pop	r15
    314e:	ef 90       	pop	r14
    3150:	df 90       	pop	r13
    3152:	cf 90       	pop	r12
    3154:	bf 90       	pop	r11
    3156:	af 90       	pop	r10
    3158:	9f 90       	pop	r9
    315a:	08 95       	ret

0000315c <task_twi2_lcd_print_format_uint32>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_print_format_uint32(uint8_t x, uint8_t y, int32_t adc_i, int32_t adc_f, const char* fmt)
{
    315c:	8f 92       	push	r8
    315e:	9f 92       	push	r9
    3160:	af 92       	push	r10
    3162:	bf 92       	push	r11
    3164:	cf 92       	push	r12
    3166:	df 92       	push	r13
    3168:	ef 92       	push	r14
    316a:	ff 92       	push	r15
    316c:	0f 93       	push	r16
    316e:	1f 93       	push	r17
    3170:	cf 93       	push	r28
    3172:	df 93       	push	r29
    3174:	b2 2e       	mov	r11, r18
    3176:	a3 2e       	mov	r10, r19
    3178:	94 2e       	mov	r9, r20
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    317a:	85 2e       	mov	r8, r21
    317c:	26 df       	rcall	.-436    	; 0x2fca <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    317e:	08 de       	rcall	.-1008   	; 0x2d90 <twi2_waitUntilReady>
    3180:	cb e0       	ldi	r28, 0x0B	; 11
    3182:	d0 e2       	ldi	r29, 0x20	; 32
    3184:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    3186:	89 83       	std	Y+1, r24	; 0x01
    3188:	1f 93       	push	r17
    318a:	0f 93       	push	r16
    318c:	ff 92       	push	r15
    318e:	ef 92       	push	r14
    3190:	8f 92       	push	r8
    3192:	9f 92       	push	r9
    3194:	af 92       	push	r10
    3196:	bf 92       	push	r11
    3198:	df 92       	push	r13
    319a:	cf 92       	push	r12
    319c:	88 e9       	ldi	r24, 0x98	; 152
    319e:	98 e2       	ldi	r25, 0x28	; 40
    31a0:	9f 93       	push	r25
    31a2:	8f 93       	push	r24
    31a4:	0e 94 dd 58 	call	0xb1ba	; 0xb1ba <sprintf>
    31a8:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    31ac:	99 27       	eor	r25, r25
    31ae:	01 96       	adiw	r24, 0x01	; 1
    31b0:	88 87       	std	Y+8, r24	; 0x08
    31b2:	99 87       	std	Y+9, r25	; 0x09
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	be 01       	movw	r22, r28
    31b8:	80 e8       	ldi	r24, 0x80	; 128
    31ba:	94 e0       	ldi	r25, 0x04	; 4
    31bc:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    31c0:	65 e0       	ldi	r22, 0x05	; 5
    31c2:	70 e0       	ldi	r23, 0x00	; 0
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
}
    31c8:	d8 dd       	rcall	.-1104   	; 0x2d7a <__portable_avr_delay_cycles>
    31ca:	8d b7       	in	r24, 0x3d	; 61
    31cc:	9e b7       	in	r25, 0x3e	; 62
    31ce:	0c 96       	adiw	r24, 0x0c	; 12
    31d0:	8d bf       	out	0x3d, r24	; 61
    31d2:	9e bf       	out	0x3e, r25	; 62
    31d4:	df 91       	pop	r29
    31d6:	cf 91       	pop	r28
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	ff 90       	pop	r15
    31de:	ef 90       	pop	r14
    31e0:	df 90       	pop	r13
    31e2:	cf 90       	pop	r12
    31e4:	bf 90       	pop	r11
    31e6:	af 90       	pop	r10
    31e8:	9f 90       	pop	r9
    31ea:	8f 90       	pop	r8
    31ec:	08 95       	ret

000031ee <task_twi2_lcd_print_format_uint16>:
		task_twi2_lcd_circ(plot_gyro_center_x_Z, plot_gyro_center_y, plot_gyro_radius, false, 1);
	}
}

static void task_twi2_lcd_print_format_uint16(uint8_t x, uint8_t y, int16_t adc_i, int16_t adc_f, const char* fmt)
{
    31ee:	cf 92       	push	r12
    31f0:	df 92       	push	r13
    31f2:	ef 92       	push	r14
    31f4:	ff 92       	push	r15
    31f6:	0f 93       	push	r16
    31f8:	1f 93       	push	r17
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	f4 2e       	mov	r15, r20
    3200:	e5 2e       	mov	r14, r21
    3202:	d2 2e       	mov	r13, r18
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    3204:	c3 2e       	mov	r12, r19
    3206:	e1 de       	rcall	.-574    	; 0x2fca <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    3208:	c3 dd       	rcall	.-1146   	; 0x2d90 <twi2_waitUntilReady>
    320a:	cb e0       	ldi	r28, 0x0B	; 11
    320c:	d0 e2       	ldi	r29, 0x20	; 32
    320e:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    3210:	89 83       	std	Y+1, r24	; 0x01
    3212:	cf 92       	push	r12
    3214:	df 92       	push	r13
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	1f 93       	push	r17
    321c:	0f 93       	push	r16
    321e:	88 e9       	ldi	r24, 0x98	; 152
    3220:	98 e2       	ldi	r25, 0x28	; 40
    3222:	9f 93       	push	r25
    3224:	8f 93       	push	r24
    3226:	0e 94 dd 58 	call	0xb1ba	; 0xb1ba <sprintf>
    322a:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    322e:	99 27       	eor	r25, r25
    3230:	01 96       	adiw	r24, 0x01	; 1
    3232:	88 87       	std	Y+8, r24	; 0x08
    3234:	99 87       	std	Y+9, r25	; 0x09
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	be 01       	movw	r22, r28
    323a:	80 e8       	ldi	r24, 0x80	; 128
    323c:	94 e0       	ldi	r25, 0x04	; 4
    323e:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3242:	65 e0       	ldi	r22, 0x05	; 5
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	90 e0       	ldi	r25, 0x00	; 0
}
    324a:	97 dd       	rcall	.-1234   	; 0x2d7a <__portable_avr_delay_cycles>
    324c:	8d b7       	in	r24, 0x3d	; 61
    324e:	9e b7       	in	r25, 0x3e	; 62
    3250:	08 96       	adiw	r24, 0x08	; 8
    3252:	8d bf       	out	0x3d, r24	; 61
    3254:	9e bf       	out	0x3e, r25	; 62
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	ff 90       	pop	r15
    3260:	ef 90       	pop	r14
    3262:	df 90       	pop	r13
    3264:	cf 90       	pop	r12
    3266:	08 95       	ret

00003268 <twi_init>:
}


void twi_init(void) {
	#ifdef TWI1_MASTER
	TWI1_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA1
    3268:	e0 e8       	ldi	r30, 0x80	; 128
    326a:	f6 e0       	ldi	r31, 0x06	; 6
    326c:	88 e3       	ldi	r24, 0x38	; 56
    326e:	80 8b       	std	Z+16, r24	; 0x10
	TWI1_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL1
    3270:	81 8b       	std	Z+17, r24	; 0x11
	#endif

	#ifdef TWI2_MASTER
	TWI2_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA2
    3272:	e0 e4       	ldi	r30, 0x40	; 64
    3274:	f6 e0       	ldi	r31, 0x06	; 6
    3276:	80 8b       	std	Z+16, r24	; 0x10
	TWI2_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL2
    3278:	81 8b       	std	Z+17, r24	; 0x11
    327a:	08 95       	ret

0000327c <twi_start>:
	#endif
}

void twi_start(void) {
    327c:	7f 92       	push	r7
    327e:	8f 92       	push	r8
    3280:	9f 92       	push	r9
    3282:	af 92       	push	r10
    3284:	bf 92       	push	r11
    3286:	cf 92       	push	r12
    3288:	df 92       	push	r13
    328a:	ef 92       	push	r14
    328c:	ff 92       	push	r15
    328e:	0f 93       	push	r16
    3290:	1f 93       	push	r17
    3292:	cf 93       	push	r28
    3294:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    3296:	60 e4       	ldi	r22, 0x40	; 64
    3298:	85 e0       	ldi	r24, 0x05	; 5
    329a:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
	#else
	#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
    329e:	6a e2       	ldi	r22, 0x2A	; 42
    32a0:	70 e2       	ldi	r23, 0x20	; 32
    32a2:	80 ea       	ldi	r24, 0xA0	; 160
    32a4:	94 e0       	ldi	r25, 0x04	; 4
    32a6:	0e 94 69 34 	call	0x68d2	; 0x68d2 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    32aa:	e0 ea       	ldi	r30, 0xA0	; 160
    32ac:	f4 e0       	ldi	r31, 0x04	; 4
    32ae:	81 81       	ldd	r24, Z+1	; 0x01
    32b0:	88 60       	ori	r24, 0x08	; 8
    32b2:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    32b4:	60 e4       	ldi	r22, 0x40	; 64
    32b6:	83 e0       	ldi	r24, 0x03	; 3
    32b8:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
	#else
	#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
    32bc:	66 e1       	ldi	r22, 0x16	; 22
    32be:	70 e2       	ldi	r23, 0x20	; 32
    32c0:	80 e8       	ldi	r24, 0x80	; 128
    32c2:	94 e0       	ldi	r25, 0x04	; 4
    32c4:	0e 94 69 34 	call	0x68d2	; 0x68d2 <twi_master_init>
    32c8:	e0 e8       	ldi	r30, 0x80	; 128
    32ca:	f4 e0       	ldi	r31, 0x04	; 4
    32cc:	81 81       	ldd	r24, Z+1	; 0x01
    32ce:	88 60       	ori	r24, 0x08	; 8
    32d0:	81 83       	std	Z+1, r24	; 0x01

static void init_twi1_hygro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Hygro SHT31-DIS - I2C address: 0x%02X\r\n", TWI1_SLAVE_HYGRO_ADDR);
    32d2:	1f 92       	push	r1
    32d4:	c4 e4       	ldi	r28, 0x44	; 68
    32d6:	cf 93       	push	r28
    32d8:	86 e1       	ldi	r24, 0x16	; 22
    32da:	91 e2       	ldi	r25, 0x21	; 33
    32dc:	9f 93       	push	r25
    32de:	8f 93       	push	r24
    32e0:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>
	g_twi1_hygro_status = 0;
    32e4:	10 92 26 29 	sts	0x2926, r1	; 0x802926 <g_twi1_hygro_status>

	do {
		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    32e8:	ef e1       	ldi	r30, 0x1F	; 31
    32ea:	f0 e2       	ldi	r31, 0x20	; 32
    32ec:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_BREAK_HI;
    32ee:	80 e3       	ldi	r24, 0x30	; 48
    32f0:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_BREAK_LO;
    32f2:	83 e9       	ldi	r24, 0x93	; 147
    32f4:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	84 83       	std	Z+4, r24	; 0x04
    32fc:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    32fe:	10 86       	std	Z+8, r1	; 0x08
    3300:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    3302:	40 e0       	ldi	r20, 0x00	; 0
    3304:	bf 01       	movw	r22, r30
    3306:	80 ea       	ldi	r24, 0xA0	; 160
    3308:	94 e0       	ldi	r25, 0x04	; 4
    330a:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    330e:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	88 23       	and	r24, r24
    331a:	29 f0       	breq	.+10     	; 0x3326 <twi_start+0xaa>
			printf("TWI-onboard: Hygro SHT31-DIS -   address NACK / 'break' bad response\r\n");
    331c:	8d e4       	ldi	r24, 0x4D	; 77
    331e:	91 e2       	ldi	r25, 0x21	; 33
    3320:	0e 94 ad 58 	call	0xb15a	; 0xb15a <puts>
    3324:	67 c0       	rjmp	.+206    	; 0x33f4 <twi_start+0x178>
			break;
		}
		delay_ms(2);
    3326:	60 e1       	ldi	r22, 0x10	; 16
    3328:	77 e2       	ldi	r23, 0x27	; 39
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	25 dd       	rcall	.-1462   	; 0x2d7a <__portable_avr_delay_cycles>

		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    3330:	ef e1       	ldi	r30, 0x1F	; 31
    3332:	f0 e2       	ldi	r31, 0x20	; 32
    3334:	84 e4       	ldi	r24, 0x44	; 68
    3336:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_RESET_HI;
    3338:	80 e3       	ldi	r24, 0x30	; 48
    333a:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_RESET_LO;
    333c:	82 ea       	ldi	r24, 0xA2	; 162
    333e:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    3340:	82 e0       	ldi	r24, 0x02	; 2
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	84 83       	std	Z+4, r24	; 0x04
    3346:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    3348:	10 86       	std	Z+8, r1	; 0x08
    334a:	11 86       	std	Z+9, r1	; 0x09
    334c:	40 e0       	ldi	r20, 0x00	; 0
    334e:	bf 01       	movw	r22, r30
    3350:	80 ea       	ldi	r24, 0xA0	; 160
    3352:	94 e0       	ldi	r25, 0x04	; 4
    3354:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    3358:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    335a:	81 11       	cpse	r24, r1
    335c:	4b c0       	rjmp	.+150    	; 0x33f4 <twi_start+0x178>
			break;
		}
		delay_ms(2);
    335e:	60 e1       	ldi	r22, 0x10	; 16
    3360:	77 e2       	ldi	r23, 0x27	; 39
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	09 dd       	rcall	.-1518   	; 0x2d7a <__portable_avr_delay_cycles>

		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    3368:	ef e1       	ldi	r30, 0x1F	; 31
    336a:	f0 e2       	ldi	r31, 0x20	; 32
    336c:	84 e4       	ldi	r24, 0x44	; 68
    336e:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_STATUS_HI;
    3370:	83 ef       	ldi	r24, 0xF3	; 243
    3372:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_STATUS_LO;
    3374:	8d e2       	ldi	r24, 0x2D	; 45
    3376:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    3378:	82 e0       	ldi	r24, 0x02	; 2
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	84 83       	std	Z+4, r24	; 0x04
    337e:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 2;
    3380:	80 87       	std	Z+8, r24	; 0x08
    3382:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3384:	41 e0       	ldi	r20, 0x01	; 1
    3386:	bf 01       	movw	r22, r30
    3388:	80 ea       	ldi	r24, 0xA0	; 160
    338a:	94 e0       	ldi	r25, 0x04	; 4
    338c:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    3390:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3392:	81 11       	cpse	r24, r1
    3394:	2f c0       	rjmp	.+94     	; 0x33f4 <twi_start+0x178>
			break;
		}
		g_twi1_hygro_status = (twi1_m_data[0] << 8) | twi1_m_data[1];
    3396:	80 91 a0 28 	lds	r24, 0x28A0	; 0x8028a0 <twi1_m_data+0x1>
    339a:	80 93 26 29 	sts	0x2926, r24	; 0x802926 <g_twi1_hygro_status>
		printf("TWI-onboard: Hygro SHT31-DIS -   status: 0x%02X\r\n", g_twi1_hygro_status);
    339e:	1f 92       	push	r1
    33a0:	8f 93       	push	r24
    33a2:	83 e9       	ldi	r24, 0x93	; 147
    33a4:	91 e2       	ldi	r25, 0x21	; 33
    33a6:	9f 93       	push	r25
    33a8:	8f 93       	push	r24
    33aa:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>

		/* Start cyclic measurements with 2 MPS @ high repeatability */
		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    33ae:	ef e1       	ldi	r30, 0x1F	; 31
    33b0:	f0 e2       	ldi	r31, 0x20	; 32
    33b2:	84 e4       	ldi	r24, 0x44	; 68
    33b4:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_PERIODIC_2MPS_HIPREC_HI;
    33b6:	82 e2       	ldi	r24, 0x22	; 34
    33b8:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_PERIODIC_2MPS_HIPREC_LO;
    33ba:	86 e3       	ldi	r24, 0x36	; 54
    33bc:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    33be:	82 e0       	ldi	r24, 0x02	; 2
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	84 83       	std	Z+4, r24	; 0x04
    33c4:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    33c6:	10 86       	std	Z+8, r1	; 0x08
    33c8:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    33ca:	40 e0       	ldi	r20, 0x00	; 0
    33cc:	bf 01       	movw	r22, r30
    33ce:	80 ea       	ldi	r24, 0xA0	; 160
    33d0:	94 e0       	ldi	r25, 0x04	; 4
    33d2:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    33d6:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	81 11       	cpse	r24, r1
    33e2:	08 c0       	rjmp	.+16     	; 0x33f4 <twi_start+0x178>
			break;
		}

		g_twi1_hygro_valid = true;
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	80 93 27 29 	sts	0x2927, r24	; 0x802927 <g_twi1_hygro_valid>
		printf("TWI-onboard:  INIT success.\r\n");
    33ea:	85 ec       	ldi	r24, 0xC5	; 197
    33ec:	91 e2       	ldi	r25, 0x21	; 33
    33ee:	0e 94 ad 58 	call	0xb15a	; 0xb15a <puts>
    33f2:	10 c0       	rjmp	.+32     	; 0x3414 <twi_start+0x198>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    33f4:	8c 2f       	mov	r24, r28
    33f6:	0c 2e       	mov	r0, r28
    33f8:	00 0c       	add	r0, r0
    33fa:	99 0b       	sbc	r25, r25
    33fc:	9f 93       	push	r25
    33fe:	cf 93       	push	r28
    3400:	82 ee       	ldi	r24, 0xE2	; 226
    3402:	91 e2       	ldi	r25, 0x21	; 33
    3404:	9f 93       	push	r25
    3406:	8f 93       	push	r24
    3408:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>
    340c:	0f 90       	pop	r0
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0

static void init_twi1_gyro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Gyro MPU-9250 - I2C address: 0x%02X, 0x%02X\r\n", TWI1_SLAVE_GYRO_ADDR_1, TWI1_SLAVE_GYRO_ADDR_2);
    3414:	1f 92       	push	r1
    3416:	8c e0       	ldi	r24, 0x0C	; 12
    3418:	8f 93       	push	r24
    341a:	1f 92       	push	r1
    341c:	c8 e6       	ldi	r28, 0x68	; 104
    341e:	cf 93       	push	r28
    3420:	83 e1       	ldi	r24, 0x13	; 19
    3422:	92 e2       	ldi	r25, 0x22	; 34
    3424:	9f 93       	push	r25
    3426:	8f 93       	push	r24
    3428:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>
	g_twi1_gyro_1_version = 0;
    342c:	10 92 85 29 	sts	0x2985, r1	; 0x802985 <g_twi1_gyro_1_version>
	g_twi1_gyro_2_version = 0;
    3430:	10 92 60 29 	sts	0x2960, r1	; 0x802960 <g_twi1_gyro_2_version>

	do {
		/* MPU-9250 6 axis: RESET */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3434:	ef e1       	ldi	r30, 0x1F	; 31
    3436:	f0 e2       	ldi	r31, 0x20	; 32
    3438:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_PWR_MGMT_1;
    343a:	8b e6       	ldi	r24, 0x6B	; 107
    343c:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	84 83       	std	Z+4, r24	; 0x04
    3444:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_PWR_MGMT_1__HRESET | TWI1_SLAVE_GYRO_DTA_1_PWR_MGMT_1__CLKSEL_VAL;
    3446:	21 e8       	ldi	r18, 0x81	; 129
    3448:	20 93 9f 28 	sts	0x289F, r18	; 0x80289f <twi1_m_data>
		twi1_packet.length = 1;
    344c:	80 87       	std	Z+8, r24	; 0x08
    344e:	91 87       	std	Z+9, r25	; 0x09
    3450:	40 e0       	ldi	r20, 0x00	; 0
    3452:	bf 01       	movw	r22, r30
    3454:	80 ea       	ldi	r24, 0xA0	; 160
    3456:	94 e0       	ldi	r25, 0x04	; 4
    3458:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    345c:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    345e:	0f 90       	pop	r0
    3460:	0f 90       	pop	r0
    3462:	0f 90       	pop	r0
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	88 23       	and	r24, r24
    346c:	29 f0       	breq	.+10     	; 0x3478 <twi_start+0x1fc>
			printf("TWI-onboard: Gyro MPU-9250   -   'reset 1' bad response\r\n");
    346e:	80 e5       	ldi	r24, 0x50	; 80
    3470:	92 e2       	ldi	r25, 0x22	; 34
    3472:	0e 94 ad 58 	call	0xb15a	; 0xb15a <puts>
    3476:	04 c2       	rjmp	.+1032   	; 0x3880 <twi_start+0x604>
			break;
		}
		delay_ms(10);
    3478:	61 e5       	ldi	r22, 0x51	; 81
    347a:	73 ec       	ldi	r23, 0xC3	; 195
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	7c dc       	rcall	.-1800   	; 0x2d7a <__portable_avr_delay_cycles>

		/* MPU-9250 6 axis: read Who Am I control value */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3482:	ef e1       	ldi	r30, 0x1F	; 31
    3484:	f0 e2       	ldi	r31, 0x20	; 32
    3486:	88 e6       	ldi	r24, 0x68	; 104
    3488:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_WHOAMI;
    348a:	85 e7       	ldi	r24, 0x75	; 117
    348c:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	84 83       	std	Z+4, r24	; 0x04
    3494:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    3496:	80 87       	std	Z+8, r24	; 0x08
    3498:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    349a:	41 e0       	ldi	r20, 0x01	; 1
    349c:	bf 01       	movw	r22, r30
    349e:	80 ea       	ldi	r24, 0xA0	; 160
    34a0:	94 e0       	ldi	r25, 0x04	; 4
    34a2:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    34a6:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    34a8:	81 11       	cpse	r24, r1
    34aa:	ea c1       	rjmp	.+980    	; 0x3880 <twi_start+0x604>
			break;
		}
		g_twi1_gyro_1_version = twi1_m_data[0];
    34ac:	af e9       	ldi	r26, 0x9F	; 159
    34ae:	b8 e2       	ldi	r27, 0x28	; 40
    34b0:	8c 91       	ld	r24, X
    34b2:	80 93 85 29 	sts	0x2985, r24	; 0x802985 <g_twi1_gyro_1_version>

		/* MPU-9250 6 axis: I2C bypass on to access the Magnetometer chip */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    34b6:	ef e1       	ldi	r30, 0x1F	; 31
    34b8:	f0 e2       	ldi	r31, 0x20	; 32
    34ba:	88 e6       	ldi	r24, 0x68	; 104
    34bc:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_INT_PIN_CFG;
    34be:	87 e3       	ldi	r24, 0x37	; 55
    34c0:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	84 83       	std	Z+4, r24	; 0x04
    34c8:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_INT_PIN_CFG__BYPASS_EN;
    34ca:	22 e0       	ldi	r18, 0x02	; 2
    34cc:	2c 93       	st	X, r18
		twi1_packet.length = 1;
    34ce:	80 87       	std	Z+8, r24	; 0x08
    34d0:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    34d2:	40 e0       	ldi	r20, 0x00	; 0
    34d4:	bf 01       	movw	r22, r30
    34d6:	80 ea       	ldi	r24, 0xA0	; 160
    34d8:	94 e0       	ldi	r25, 0x04	; 4
    34da:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    34de:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    34e0:	81 11       	cpse	r24, r1
    34e2:	ce c1       	rjmp	.+924    	; 0x3880 <twi_start+0x604>
			break;
		}

		/* Magnetometer: soft reset */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    34e4:	ef e1       	ldi	r30, 0x1F	; 31
    34e6:	f0 e2       	ldi	r31, 0x20	; 32
    34e8:	8c e0       	ldi	r24, 0x0C	; 12
    34ea:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL2;
    34ec:	8b e0       	ldi	r24, 0x0B	; 11
    34ee:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	84 83       	std	Z+4, r24	; 0x04
    34f6:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL2__SRST;
    34f8:	21 e0       	ldi	r18, 0x01	; 1
    34fa:	20 93 9f 28 	sts	0x289F, r18	; 0x80289f <twi1_m_data>
		twi1_packet.length = 1;
    34fe:	80 87       	std	Z+8, r24	; 0x08
    3500:	91 87       	std	Z+9, r25	; 0x09
    3502:	40 e0       	ldi	r20, 0x00	; 0
    3504:	bf 01       	movw	r22, r30
    3506:	80 ea       	ldi	r24, 0xA0	; 160
    3508:	94 e0       	ldi	r25, 0x04	; 4
    350a:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    350e:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3510:	81 11       	cpse	r24, r1
    3512:	b6 c1       	rjmp	.+876    	; 0x3880 <twi_start+0x604>
			break;
		}
		delay_ms(10);
    3514:	61 e5       	ldi	r22, 0x51	; 81
    3516:	73 ec       	ldi	r23, 0xC3	; 195
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	2e dc       	rcall	.-1956   	; 0x2d7a <__portable_avr_delay_cycles>

		/* Magnetometer: read Device ID */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    351e:	ef e1       	ldi	r30, 0x1F	; 31
    3520:	f0 e2       	ldi	r31, 0x20	; 32
    3522:	8c e0       	ldi	r24, 0x0C	; 12
    3524:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_WIA;
    3526:	11 82       	std	Z+1, r1	; 0x01
		twi1_packet.addr_length = 1;
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	84 83       	std	Z+4, r24	; 0x04
    352e:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    3530:	80 87       	std	Z+8, r24	; 0x08
    3532:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3534:	41 e0       	ldi	r20, 0x01	; 1
    3536:	bf 01       	movw	r22, r30
    3538:	80 ea       	ldi	r24, 0xA0	; 160
    353a:	94 e0       	ldi	r25, 0x04	; 4
    353c:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    3540:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3542:	81 11       	cpse	r24, r1
    3544:	9d c1       	rjmp	.+826    	; 0x3880 <twi_start+0x604>
			break;
		}
		g_twi1_gyro_2_version = twi1_m_data[0];
    3546:	cf e9       	ldi	r28, 0x9F	; 159
    3548:	d8 e2       	ldi	r29, 0x28	; 40
    354a:	88 81       	ld	r24, Y
    354c:	80 93 60 29 	sts	0x2960, r24	; 0x802960 <g_twi1_gyro_2_version>
		g_twi1_gyro_valid = true;
    3550:	91 e0       	ldi	r25, 0x01	; 1
    3552:	90 93 86 29 	sts	0x2986, r25	; 0x802986 <g_twi1_gyro_valid>
		printf("TWI-onboard: Gyro MPU-9250 -     version: 0x%02X, 0x%02X\r\n", g_twi1_gyro_1_version, g_twi1_gyro_2_version);
    3556:	1f 92       	push	r1
    3558:	8f 93       	push	r24
    355a:	80 91 85 29 	lds	r24, 0x2985	; 0x802985 <g_twi1_gyro_1_version>
    355e:	1f 92       	push	r1
    3560:	8f 93       	push	r24
    3562:	89 e8       	ldi	r24, 0x89	; 137
    3564:	92 e2       	ldi	r25, 0x22	; 34
    3566:	9f 93       	push	r25
    3568:	8f 93       	push	r24
    356a:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>

		/* Magnetometer: 16 bit access and prepare for PROM access */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    356e:	ef e1       	ldi	r30, 0x1F	; 31
    3570:	f0 e2       	ldi	r31, 0x20	; 32
    3572:	8c e0       	ldi	r24, 0x0C	; 12
    3574:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL1;
    3576:	8a e0       	ldi	r24, 0x0A	; 10
    3578:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	84 83       	std	Z+4, r24	; 0x04
    3580:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL1__MODE_PROM_VAL;
    3582:	2f e1       	ldi	r18, 0x1F	; 31
    3584:	28 83       	st	Y, r18
		twi1_packet.length = 1;
    3586:	80 87       	std	Z+8, r24	; 0x08
    3588:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    358a:	40 e0       	ldi	r20, 0x00	; 0
    358c:	bf 01       	movw	r22, r30
    358e:	80 ea       	ldi	r24, 0xA0	; 160
    3590:	94 e0       	ldi	r25, 0x04	; 4
    3592:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    3596:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	81 11       	cpse	r24, r1
    35a6:	6c c1       	rjmp	.+728    	; 0x3880 <twi_start+0x604>
			break;
		}

		/* Magnetometer: read correction data for X, Y and Z */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    35a8:	ef e1       	ldi	r30, 0x1F	; 31
    35aa:	f0 e2       	ldi	r31, 0x20	; 32
    35ac:	8c e0       	ldi	r24, 0x0C	; 12
    35ae:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_ASAX;
    35b0:	80 e1       	ldi	r24, 0x10	; 16
    35b2:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	84 83       	std	Z+4, r24	; 0x04
    35ba:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 3;
    35bc:	83 e0       	ldi	r24, 0x03	; 3
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	80 87       	std	Z+8, r24	; 0x08
    35c2:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    35c4:	41 e0       	ldi	r20, 0x01	; 1
    35c6:	bf 01       	movw	r22, r30
    35c8:	80 ea       	ldi	r24, 0xA0	; 160
    35ca:	94 e0       	ldi	r25, 0x04	; 4
    35cc:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    35d0:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    35d2:	81 11       	cpse	r24, r1
    35d4:	55 c1       	rjmp	.+682    	; 0x3880 <twi_start+0x604>
			break;
		}
		g_twi1_gyro_2_asax = twi1_m_data[0];
    35d6:	af e9       	ldi	r26, 0x9F	; 159
    35d8:	b8 e2       	ldi	r27, 0x28	; 40
    35da:	8c 91       	ld	r24, X
    35dc:	80 93 5f 29 	sts	0x295F, r24	; 0x80295f <g_twi1_gyro_2_asax>
		g_twi1_gyro_2_asay = twi1_m_data[1];
    35e0:	11 96       	adiw	r26, 0x01	; 1
    35e2:	8c 91       	ld	r24, X
    35e4:	11 97       	sbiw	r26, 0x01	; 1
    35e6:	80 93 5e 29 	sts	0x295E, r24	; 0x80295e <g_twi1_gyro_2_asay>
		g_twi1_gyro_2_asaz = twi1_m_data[2];
    35ea:	12 96       	adiw	r26, 0x02	; 2
    35ec:	8c 91       	ld	r24, X
    35ee:	12 97       	sbiw	r26, 0x02	; 2
    35f0:	80 93 5d 29 	sts	0x295D, r24	; 0x80295d <g_twi1_gyro_2_asaz>

		/* Magnetometer: mode change via power-down mode */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    35f4:	ef e1       	ldi	r30, 0x1F	; 31
    35f6:	f0 e2       	ldi	r31, 0x20	; 32
    35f8:	8c e0       	ldi	r24, 0x0C	; 12
    35fa:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL1;
    35fc:	8a e0       	ldi	r24, 0x0A	; 10
    35fe:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	84 83       	std	Z+4, r24	; 0x04
    3606:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL1__MODE_16B_POWER_DOWN;
    3608:	20 e1       	ldi	r18, 0x10	; 16
    360a:	2c 93       	st	X, r18
		twi1_packet.length = 1;
    360c:	80 87       	std	Z+8, r24	; 0x08
    360e:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    3610:	40 e0       	ldi	r20, 0x00	; 0
    3612:	bf 01       	movw	r22, r30
    3614:	80 ea       	ldi	r24, 0xA0	; 160
    3616:	94 e0       	ldi	r25, 0x04	; 4
    3618:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    361c:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    361e:	81 11       	cpse	r24, r1
			break;
		}
		delay_ms(10);
    3620:	2f c1       	rjmp	.+606    	; 0x3880 <twi_start+0x604>
    3622:	61 e5       	ldi	r22, 0x51	; 81
    3624:	73 ec       	ldi	r23, 0xC3	; 195
    3626:	80 e0       	ldi	r24, 0x00	; 0
    3628:	90 e0       	ldi	r25, 0x00	; 0

		/* Magnetometer: mode change for 16bit and run all axis at 8 Hz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    362a:	a7 db       	rcall	.-2226   	; 0x2d7a <__portable_avr_delay_cycles>
    362c:	ef e1       	ldi	r30, 0x1F	; 31
    362e:	f0 e2       	ldi	r31, 0x20	; 32
    3630:	8c e0       	ldi	r24, 0x0C	; 12
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_CNTL1;
    3632:	80 83       	st	Z, r24
    3634:	8a e0       	ldi	r24, 0x0A	; 10
		twi1_packet.addr_length = 1;
    3636:	81 83       	std	Z+1, r24	; 0x01
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_CNTL1__MODE_16B_RUN_8HZ_VAL;
    363e:	95 83       	std	Z+5, r25	; 0x05
    3640:	22 e1       	ldi	r18, 0x12	; 18
    3642:	20 93 9f 28 	sts	0x289F, r18	; 0x80289f <twi1_m_data>
		twi1_packet.length = 1;
    3646:	80 87       	std	Z+8, r24	; 0x08
    3648:	91 87       	std	Z+9, r25	; 0x09
    364a:	40 e0       	ldi	r20, 0x00	; 0
    364c:	bf 01       	movw	r22, r30
    364e:	80 ea       	ldi	r24, 0xA0	; 160
    3650:	94 e0       	ldi	r25, 0x04	; 4
    3652:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3656:	c8 2f       	mov	r28, r24
    3658:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: set gyro offset values */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    365a:	12 c1       	rjmp	.+548    	; 0x3880 <twi_start+0x604>
    365c:	af e1       	ldi	r26, 0x1F	; 31
    365e:	b0 e2       	ldi	r27, 0x20	; 32
    3660:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_GYRO_XG_OFFSET_H;
    3662:	8c 93       	st	X, r24
    3664:	83 e1       	ldi	r24, 0x13	; 19
    3666:	11 96       	adiw	r26, 0x01	; 1
    3668:	8c 93       	st	X, r24
		twi1_packet.addr_length = 1;
    366a:	11 97       	sbiw	r26, 0x01	; 1
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	14 96       	adiw	r26, 0x04	; 4
    3672:	8d 93       	st	X+, r24
    3674:	9c 93       	st	X, r25
		twi1_m_data[0] = (uint8_t) (g_twi1_gyro_1_gyro_ofsx >> 8);
    3676:	15 97       	sbiw	r26, 0x05	; 5
    3678:	80 91 43 20 	lds	r24, 0x2043	; 0x802043 <g_twi1_gyro_1_gyro_ofsx>
    367c:	90 91 44 20 	lds	r25, 0x2044	; 0x802044 <g_twi1_gyro_1_gyro_ofsx+0x1>
    3680:	ef e9       	ldi	r30, 0x9F	; 159
    3682:	f8 e2       	ldi	r31, 0x28	; 40
		twi1_m_data[1] = (uint8_t) (g_twi1_gyro_1_gyro_ofsx & 0xFF);
    3684:	90 83       	st	Z, r25
		twi1_m_data[2] = (uint8_t) (g_twi1_gyro_1_gyro_ofsy >> 8);
    3686:	81 83       	std	Z+1, r24	; 0x01
    3688:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <g_twi1_gyro_1_gyro_ofsy>
    368c:	90 91 42 20 	lds	r25, 0x2042	; 0x802042 <g_twi1_gyro_1_gyro_ofsy+0x1>
		twi1_m_data[3] = (uint8_t) (g_twi1_gyro_1_gyro_ofsy & 0xFF);
    3690:	92 83       	std	Z+2, r25	; 0x02
		twi1_m_data[4] = (uint8_t) (g_twi1_gyro_1_gyro_ofsz >> 8);
    3692:	83 83       	std	Z+3, r24	; 0x03
    3694:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <g_twi1_gyro_1_gyro_ofsz>
    3698:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <g_twi1_gyro_1_gyro_ofsz+0x1>
		twi1_m_data[5] = (uint8_t) (g_twi1_gyro_1_gyro_ofsz & 0xFF);
    369c:	94 83       	std	Z+4, r25	; 0x04
		twi1_packet.length = 6;
    369e:	85 83       	std	Z+5, r24	; 0x05
    36a0:	86 e0       	ldi	r24, 0x06	; 6
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	18 96       	adiw	r26, 0x08	; 8
    36a6:	8d 93       	st	X+, r24
    36a8:	9c 93       	st	X, r25
    36aa:	19 97       	sbiw	r26, 0x09	; 9
    36ac:	40 e0       	ldi	r20, 0x00	; 0
    36ae:	bd 01       	movw	r22, r26
    36b0:	80 ea       	ldi	r24, 0xA0	; 160
    36b2:	94 e0       	ldi	r25, 0x04	; 4
    36b4:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    36b8:	c8 2f       	mov	r28, r24
    36ba:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: set accel offset values */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    36bc:	e1 c0       	rjmp	.+450    	; 0x3880 <twi_start+0x604>
    36be:	ef e1       	ldi	r30, 0x1F	; 31
    36c0:	f0 e2       	ldi	r31, 0x20	; 32
    36c2:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_XA_OFFSET_H;
    36c4:	80 83       	st	Z, r24
    36c6:	87 e7       	ldi	r24, 0x77	; 119
		twi1_packet.addr_length = 1;
    36c8:	81 83       	std	Z+1, r24	; 0x01
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = (uint8_t) ((g_twi1_gyro_1_accel_ofsx & 0x7F80) >> 7);
    36d0:	95 83       	std	Z+5, r25	; 0x05
    36d2:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <g_twi1_gyro_1_accel_ofsx>
    36d6:	90 91 50 20 	lds	r25, 0x2050	; 0x802050 <g_twi1_gyro_1_accel_ofsx+0x1>
    36da:	af e9       	ldi	r26, 0x9F	; 159
    36dc:	b8 e2       	ldi	r27, 0x28	; 40
    36de:	9c 01       	movw	r18, r24
    36e0:	22 0f       	add	r18, r18
    36e2:	23 2f       	mov	r18, r19
    36e4:	22 1f       	adc	r18, r18
    36e6:	33 0b       	sbc	r19, r19
    36e8:	31 95       	neg	r19
		twi1_m_data[1] = (uint8_t) ((g_twi1_gyro_1_accel_ofsx &   0x7F) << 1);
    36ea:	2c 93       	st	X, r18
    36ec:	88 0f       	add	r24, r24
    36ee:	11 96       	adiw	r26, 0x01	; 1
		twi1_packet.length = 2;
    36f0:	8c 93       	st	X, r24
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	80 87       	std	Z+8, r24	; 0x08
    36f8:	91 87       	std	Z+9, r25	; 0x09
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	bf 01       	movw	r22, r30
    36fe:	80 ea       	ldi	r24, 0xA0	; 160
    3700:	94 e0       	ldi	r25, 0x04	; 4
    3702:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3706:	c8 2f       	mov	r28, r24
    3708:	81 11       	cpse	r24, r1
			break;
		}

		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_YA_OFFSET_H;
    370a:	ba c0       	rjmp	.+372    	; 0x3880 <twi_start+0x604>
    370c:	8a e7       	ldi	r24, 0x7A	; 122
    370e:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <twi1_packet+0x1>
		twi1_m_data[0] = (uint8_t) ((g_twi1_gyro_1_accel_ofsy & 0x7F80) >> 7);
    3712:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <g_twi1_gyro_1_accel_ofsy>
    3716:	90 91 4e 20 	lds	r25, 0x204E	; 0x80204e <g_twi1_gyro_1_accel_ofsy+0x1>
    371a:	ef e9       	ldi	r30, 0x9F	; 159
    371c:	f8 e2       	ldi	r31, 0x28	; 40
    371e:	9c 01       	movw	r18, r24
    3720:	22 0f       	add	r18, r18
    3722:	23 2f       	mov	r18, r19
    3724:	22 1f       	adc	r18, r18
    3726:	33 0b       	sbc	r19, r19
    3728:	31 95       	neg	r19
		twi1_m_data[1] = (uint8_t) ((g_twi1_gyro_1_accel_ofsy &   0x7F) << 1);
    372a:	20 83       	st	Z, r18
    372c:	88 0f       	add	r24, r24
    372e:	81 83       	std	Z+1, r24	; 0x01
    3730:	40 e0       	ldi	r20, 0x00	; 0
    3732:	6f e1       	ldi	r22, 0x1F	; 31
    3734:	70 e2       	ldi	r23, 0x20	; 32
    3736:	80 ea       	ldi	r24, 0xA0	; 160
    3738:	94 e0       	ldi	r25, 0x04	; 4
    373a:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    373e:	c8 2f       	mov	r28, r24
    3740:	81 11       	cpse	r24, r1
			break;
		}

		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_ZA_OFFSET_H;
    3742:	9e c0       	rjmp	.+316    	; 0x3880 <twi_start+0x604>
    3744:	8d e7       	ldi	r24, 0x7D	; 125
    3746:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <twi1_packet+0x1>
		twi1_m_data[0] = (uint8_t) ((g_twi1_gyro_1_accel_ofsz & 0x7F80) >> 7);
    374a:	80 91 4b 20 	lds	r24, 0x204B	; 0x80204b <g_twi1_gyro_1_accel_ofsz>
    374e:	90 91 4c 20 	lds	r25, 0x204C	; 0x80204c <g_twi1_gyro_1_accel_ofsz+0x1>
    3752:	ef e9       	ldi	r30, 0x9F	; 159
    3754:	f8 e2       	ldi	r31, 0x28	; 40
    3756:	9c 01       	movw	r18, r24
    3758:	22 0f       	add	r18, r18
    375a:	23 2f       	mov	r18, r19
    375c:	22 1f       	adc	r18, r18
    375e:	33 0b       	sbc	r19, r19
    3760:	31 95       	neg	r19
		twi1_m_data[1] = (uint8_t) ((g_twi1_gyro_1_accel_ofsz &   0x7F) << 1);
    3762:	20 83       	st	Z, r18
    3764:	88 0f       	add	r24, r24
    3766:	81 83       	std	Z+1, r24	; 0x01
    3768:	40 e0       	ldi	r20, 0x00	; 0
    376a:	6f e1       	ldi	r22, 0x1F	; 31
    376c:	70 e2       	ldi	r23, 0x20	; 32
    376e:	80 ea       	ldi	r24, 0xA0	; 160
    3770:	94 e0       	ldi	r25, 0x04	; 4
    3772:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3776:	c8 2f       	mov	r28, r24
    3778:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: FIFO frequency = 10 Hz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    377a:	82 c0       	rjmp	.+260    	; 0x3880 <twi_start+0x604>
    377c:	ef e1       	ldi	r30, 0x1F	; 31
    377e:	f0 e2       	ldi	r31, 0x20	; 32
    3780:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_SMPLRT_DIV;
    3782:	80 83       	st	Z, r24
    3784:	89 e1       	ldi	r24, 0x19	; 25
		twi1_packet.addr_length = 1;
    3786:	81 83       	std	Z+1, r24	; 0x01
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 99;
    378e:	95 83       	std	Z+5, r25	; 0x05
    3790:	23 e6       	ldi	r18, 0x63	; 99
    3792:	20 93 9f 28 	sts	0x289F, r18	; 0x80289f <twi1_m_data>
		twi1_packet.length = 1;
    3796:	80 87       	std	Z+8, r24	; 0x08
    3798:	91 87       	std	Z+9, r25	; 0x09
    379a:	40 e0       	ldi	r20, 0x00	; 0
    379c:	bf 01       	movw	r22, r30
    379e:	80 ea       	ldi	r24, 0xA0	; 160
    37a0:	94 e0       	ldi	r25, 0x04	; 4
    37a2:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    37a6:	c8 2f       	mov	r28, r24
    37a8:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: Bandwidth = 5 Hz, Fs = 1 kHz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    37aa:	6a c0       	rjmp	.+212    	; 0x3880 <twi_start+0x604>
    37ac:	ef e1       	ldi	r30, 0x1F	; 31
    37ae:	f0 e2       	ldi	r31, 0x20	; 32
    37b0:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_CONFIG;
    37b2:	80 83       	st	Z, r24
    37b4:	8a e1       	ldi	r24, 0x1A	; 26
		twi1_packet.addr_length = 1;
    37b6:	81 83       	std	Z+1, r24	; 0x01
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 6;
    37be:	95 83       	std	Z+5, r25	; 0x05
    37c0:	26 e0       	ldi	r18, 0x06	; 6
    37c2:	20 93 9f 28 	sts	0x289F, r18	; 0x80289f <twi1_m_data>
		twi1_packet.length = 1;
    37c6:	80 87       	std	Z+8, r24	; 0x08
    37c8:	91 87       	std	Z+9, r25	; 0x09
    37ca:	40 e0       	ldi	r20, 0x00	; 0
    37cc:	bf 01       	movw	r22, r30
    37ce:	80 ea       	ldi	r24, 0xA0	; 160
    37d0:	94 e0       	ldi	r25, 0x04	; 4
    37d2:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    37d6:	c8 2f       	mov	r28, r24
    37d8:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: Bandwidth = 5 Hz, Fs = 1 kHz */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    37da:	52 c0       	rjmp	.+164    	; 0x3880 <twi_start+0x604>
    37dc:	ef e1       	ldi	r30, 0x1F	; 31
    37de:	f0 e2       	ldi	r31, 0x20	; 32
    37e0:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_ACCEL_CONFIG2;
    37e2:	80 83       	st	Z, r24
    37e4:	8d e1       	ldi	r24, 0x1D	; 29
		twi1_packet.addr_length = 1;
    37e6:	81 83       	std	Z+1, r24	; 0x01
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 6;
    37ee:	95 83       	std	Z+5, r25	; 0x05
    37f0:	26 e0       	ldi	r18, 0x06	; 6
    37f2:	20 93 9f 28 	sts	0x289F, r18	; 0x80289f <twi1_m_data>
		twi1_packet.length = 1;
    37f6:	80 87       	std	Z+8, r24	; 0x08
    37f8:	91 87       	std	Z+9, r25	; 0x09
    37fa:	40 e0       	ldi	r20, 0x00	; 0
    37fc:	bf 01       	movw	r22, r30
    37fe:	80 ea       	ldi	r24, 0xA0	; 160
    3800:	94 e0       	ldi	r25, 0x04	; 4
    3802:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3806:	c8 2f       	mov	r28, r24
    3808:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: Wake On Motion interrupt = 0.1 g (1 LSB = 4 mg) */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    380a:	3a c0       	rjmp	.+116    	; 0x3880 <twi_start+0x604>
    380c:	ef e1       	ldi	r30, 0x1F	; 31
    380e:	f0 e2       	ldi	r31, 0x20	; 32
    3810:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_WOM_THR;
    3812:	80 83       	st	Z, r24
    3814:	8f e1       	ldi	r24, 0x1F	; 31
		twi1_packet.addr_length = 1;
    3816:	81 83       	std	Z+1, r24	; 0x01
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = 25;
    381e:	95 83       	std	Z+5, r25	; 0x05
    3820:	29 e1       	ldi	r18, 0x19	; 25
    3822:	20 93 9f 28 	sts	0x289F, r18	; 0x80289f <twi1_m_data>
		twi1_packet.length = 1;
    3826:	80 87       	std	Z+8, r24	; 0x08
    3828:	91 87       	std	Z+9, r25	; 0x09
    382a:	40 e0       	ldi	r20, 0x00	; 0
    382c:	bf 01       	movw	r22, r30
    382e:	80 ea       	ldi	r24, 0xA0	; 160
    3830:	94 e0       	ldi	r25, 0x04	; 4
    3832:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3836:	c8 2f       	mov	r28, r24
    3838:	81 11       	cpse	r24, r1
			break;
		}

		/* MPU-9250 6 axis: RESET all internal data paths */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    383a:	22 c0       	rjmp	.+68     	; 0x3880 <twi_start+0x604>
    383c:	ef e1       	ldi	r30, 0x1F	; 31
    383e:	f0 e2       	ldi	r31, 0x20	; 32
    3840:	88 e6       	ldi	r24, 0x68	; 104
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_USER_CTRL;
    3842:	80 83       	st	Z, r24
    3844:	8a e6       	ldi	r24, 0x6A	; 106
		twi1_packet.addr_length = 1;
    3846:	81 83       	std	Z+1, r24	; 0x01
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	84 83       	std	Z+4, r24	; 0x04
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_USER_CTRL__SIG_COND_RST;  // | TWI1_SLAVE_GYRO_DTA_1_USER_CTRL__FIFO_EN;
    384e:	95 83       	std	Z+5, r25	; 0x05
    3850:	21 e0       	ldi	r18, 0x01	; 1
    3852:	20 93 9f 28 	sts	0x289F, r18	; 0x80289f <twi1_m_data>
		twi1_packet.length = 1;
    3856:	80 87       	std	Z+8, r24	; 0x08
    3858:	91 87       	std	Z+9, r25	; 0x09
    385a:	40 e0       	ldi	r20, 0x00	; 0
    385c:	bf 01       	movw	r22, r30
    385e:	80 ea       	ldi	r24, 0xA0	; 160
    3860:	94 e0       	ldi	r25, 0x04	; 4
    3862:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3866:	c8 2f       	mov	r28, r24
			break;
		}
		delay_ms(10);
    3868:	81 11       	cpse	r24, r1
    386a:	0a c0       	rjmp	.+20     	; 0x3880 <twi_start+0x604>
    386c:	61 e5       	ldi	r22, 0x51	; 81
    386e:	73 ec       	ldi	r23, 0xC3	; 195
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	90 e0       	ldi	r25, 0x00	; 0

		printf("TWI-onboard:  INIT success.\r\n");
    3874:	82 da       	rcall	.-2812   	; 0x2d7a <__portable_avr_delay_cycles>
    3876:	85 ec       	ldi	r24, 0xC5	; 197
    3878:	91 e2       	ldi	r25, 0x21	; 33
    387a:	0e 94 ad 58 	call	0xb15a	; 0xb15a <puts>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    387e:	10 c0       	rjmp	.+32     	; 0x38a0 <twi_start+0x624>
    3880:	8c 2f       	mov	r24, r28
    3882:	0c 2e       	mov	r0, r28
    3884:	00 0c       	add	r0, r0
    3886:	99 0b       	sbc	r25, r25
    3888:	9f 93       	push	r25
    388a:	cf 93       	push	r28
    388c:	82 ee       	ldi	r24, 0xE2	; 226
    388e:	91 e2       	ldi	r25, 0x21	; 33
    3890:	9f 93       	push	r25
    3892:	8f 93       	push	r24
    3894:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	0f 90       	pop	r0

static void init_twi1_baro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Baro MS560702BA03-50 - I2C address: 0x%02X\r\n", TWI1_SLAVE_BARO_ADDR);
    389e:	0f 90       	pop	r0
    38a0:	1f 92       	push	r1
    38a2:	c6 e7       	ldi	r28, 0x76	; 118
    38a4:	cf 93       	push	r28
    38a6:	84 ec       	ldi	r24, 0xC4	; 196
    38a8:	92 e2       	ldi	r25, 0x22	; 34
    38aa:	9f 93       	push	r25
    38ac:	8f 93       	push	r24
    38ae:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>

	do {
		twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    38b2:	ef e1       	ldi	r30, 0x1F	; 31
    38b4:	f0 e2       	ldi	r31, 0x20	; 32
		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_RESET;
    38b6:	c0 83       	st	Z, r28
    38b8:	8e e1       	ldi	r24, 0x1E	; 30
		twi1_packet.addr_length = 1;
    38ba:	81 83       	std	Z+1, r24	; 0x01
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	84 83       	std	Z+4, r24	; 0x04
		twi1_packet.length = 0;
    38c2:	95 83       	std	Z+5, r25	; 0x05
    38c4:	10 86       	std	Z+8, r1	; 0x08
    38c6:	11 86       	std	Z+9, r1	; 0x09
    38c8:	40 e0       	ldi	r20, 0x00	; 0
    38ca:	bf 01       	movw	r22, r30
    38cc:	80 ea       	ldi	r24, 0xA0	; 160
    38ce:	94 e0       	ldi	r25, 0x04	; 4
    38d0:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    38d4:	c8 2f       	mov	r28, r24
    38d6:	0f 90       	pop	r0
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
			break;
		}
		delay_ms(3);
    38de:	81 11       	cpse	r24, r1
    38e0:	8f c0       	rjmp	.+286    	; 0x3a00 <twi_start+0x784>
    38e2:	68 e9       	ldi	r22, 0x98	; 152
    38e4:	7a e3       	ldi	r23, 0x3A	; 58
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	90 e0       	ldi	r25, 0x00	; 0

		twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    38ea:	47 da       	rcall	.-2930   	; 0x2d7a <__portable_avr_delay_cycles>
    38ec:	ef e1       	ldi	r30, 0x1F	; 31
    38ee:	f0 e2       	ldi	r31, 0x20	; 32
    38f0:	86 e7       	ldi	r24, 0x76	; 118
		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_VERSION;
    38f2:	80 83       	st	Z, r24
    38f4:	8e ea       	ldi	r24, 0xAE	; 174
		twi1_packet.addr_length = 1;
    38f6:	81 83       	std	Z+1, r24	; 0x01
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	84 83       	std	Z+4, r24	; 0x04
		twi1_packet.length = 2;
    38fe:	95 83       	std	Z+5, r25	; 0x05
    3900:	82 e0       	ldi	r24, 0x02	; 2
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	80 87       	std	Z+8, r24	; 0x08
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3906:	91 87       	std	Z+9, r25	; 0x09
    3908:	41 e0       	ldi	r20, 0x01	; 1
    390a:	bf 01       	movw	r22, r30
    390c:	80 ea       	ldi	r24, 0xA0	; 160
    390e:	94 e0       	ldi	r25, 0x04	; 4
    3910:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3914:	c8 2f       	mov	r28, r24
    3916:	88 23       	and	r24, r24
			printf("TWI-onboard:  BAD reading serial/CRC word. (sc=%d)\r\n", sc);
    3918:	89 f0       	breq	.+34     	; 0x393c <twi_start+0x6c0>
    391a:	8c 2f       	mov	r24, r28
    391c:	0c 2e       	mov	r0, r28
    391e:	00 0c       	add	r0, r0
    3920:	99 0b       	sbc	r25, r25
    3922:	9f 93       	push	r25
    3924:	cf 93       	push	r28
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	93 e2       	ldi	r25, 0x23	; 35
    392a:	9f 93       	push	r25
    392c:	8f 93       	push	r24
    392e:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
			break;
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
    393a:	62 c0       	rjmp	.+196    	; 0x3a00 <twi_start+0x784>
    393c:	ef e9       	ldi	r30, 0x9F	; 159
    393e:	f8 e2       	ldi	r31, 0x28	; 40
    3940:	80 81       	ld	r24, Z
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	98 2f       	mov	r25, r24
    3946:	88 27       	eor	r24, r24
    3948:	21 81       	ldd	r18, Z+1	; 0x01
    394a:	82 2b       	or	r24, r18
    394c:	92 95       	swap	r25
    394e:	82 95       	swap	r24
    3950:	8f 70       	andi	r24, 0x0F	; 15
    3952:	89 27       	eor	r24, r25
    3954:	9f 70       	andi	r25, 0x0F	; 15
    3956:	89 27       	eor	r24, r25
    3958:	80 93 48 29 	sts	0x2948, r24	; 0x802948 <g_twi1_baro_version>
    395c:	90 93 49 29 	sts	0x2949, r25	; 0x802949 <g_twi1_baro_version+0x1>
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);
    3960:	9f 93       	push	r25
    3962:	8f 93       	push	r24
    3964:	85 e3       	ldi	r24, 0x35	; 53
    3966:	93 e2       	ldi	r25, 0x23	; 35
    3968:	9f 93       	push	r25
    396a:	8f 93       	push	r24
    396c:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>
    3970:	0f 2e       	mov	r0, r31
    3972:	fa e3       	ldi	r31, 0x3A	; 58
    3974:	ef 2e       	mov	r14, r31
    3976:	f9 e2       	ldi	r31, 0x29	; 41
    3978:	ff 2e       	mov	r15, r31
    397a:	f0 2d       	mov	r31, r0
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    3982:	0f 90       	pop	r0
    3984:	88 24       	eor	r8, r8
    3986:	83 94       	inc	r8
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    3988:	91 2c       	mov	r9, r1
    398a:	cf e1       	ldi	r28, 0x1F	; 31
    398c:	d0 e2       	ldi	r29, 0x20	; 32
    398e:	0f 2e       	mov	r0, r31
    3990:	f6 e7       	ldi	r31, 0x76	; 118
    3992:	7f 2e       	mov	r7, r31
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
			twi1_packet.addr_length = 1;
    3994:	f0 2d       	mov	r31, r0
    3996:	aa 24       	eor	r10, r10
    3998:	a3 94       	inc	r10
			twi1_packet.length = 2;
    399a:	b1 2c       	mov	r11, r1
    399c:	68 94       	set
    399e:	cc 24       	eor	r12, r12
    39a0:	c1 f8       	bld	r12, 1
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc != STATUS_OK) {
				//printf("TWI-onboard:  BAD reading PROM address %d. (sc=%d)\r\n", adr, sc);
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    39a2:	d1 2c       	mov	r13, r1
    39a4:	0f e9       	ldi	r16, 0x9F	; 159
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    39a6:	18 e2       	ldi	r17, 0x28	; 40
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
    39a8:	78 82       	st	Y, r7
    39aa:	c4 01       	movw	r24, r8
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	80 6a       	ori	r24, 0xA0	; 160
			twi1_packet.addr_length = 1;
    39b2:	89 83       	std	Y+1, r24	; 0x01
    39b4:	ac 82       	std	Y+4, r10	; 0x04
			twi1_packet.length = 2;
    39b6:	bd 82       	std	Y+5, r11	; 0x05
    39b8:	c8 86       	std	Y+8, r12	; 0x08
    39ba:	d9 86       	std	Y+9, r13	; 0x09
    39bc:	41 e0       	ldi	r20, 0x01	; 1
    39be:	be 01       	movw	r22, r28
    39c0:	80 ea       	ldi	r24, 0xA0	; 160
    39c2:	94 e0       	ldi	r25, 0x04	; 4
    39c4:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc != STATUS_OK) {
    39c8:	81 11       	cpse	r24, r1
				//printf("TWI-onboard:  BAD reading PROM address %d. (sc=%d)\r\n", adr, sc);
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    39ca:	12 c0       	rjmp	.+36     	; 0x39f0 <twi_start+0x774>
    39cc:	f8 01       	movw	r30, r16
    39ce:	80 81       	ld	r24, Z
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	98 2f       	mov	r25, r24
    39d4:	88 27       	eor	r24, r24
    39d6:	21 81       	ldd	r18, Z+1	; 0x01
    39d8:	82 2b       	or	r24, r18
    39da:	f7 01       	movw	r30, r14
    39dc:	81 93       	st	Z+, r24
    39de:	91 93       	st	Z+, r25
			break;
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    39e0:	7f 01       	movw	r14, r30
    39e2:	ff ef       	ldi	r31, 0xFF	; 255
    39e4:	8f 1a       	sub	r8, r31
    39e6:	9f 0a       	sbc	r9, r31
    39e8:	88 e0       	ldi	r24, 0x08	; 8
    39ea:	88 16       	cp	r8, r24
    39ec:	91 04       	cpc	r9, r1
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
		}

		g_twi1_baro_valid = true;
    39ee:	e1 f6       	brne	.-72     	; 0x39a8 <twi_start+0x72c>
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	80 93 4a 29 	sts	0x294A, r24	; 0x80294a <g_twi1_baro_valid>
		printf("TWI-onboard:  INIT success.\r\n");
    39f6:	85 ec       	ldi	r24, 0xC5	; 197
    39f8:	91 e2       	ldi	r25, 0x21	; 33
    39fa:	0e 94 ad 58 	call	0xb15a	; 0xb15a <puts>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    39fe:	10 c0       	rjmp	.+32     	; 0x3a20 <twi_start+0x7a4>
    3a00:	8c 2f       	mov	r24, r28
    3a02:	0c 2e       	mov	r0, r28
    3a04:	00 0c       	add	r0, r0
    3a06:	99 0b       	sbc	r25, r25
    3a08:	9f 93       	push	r25
    3a0a:	cf 93       	push	r28
    3a0c:	82 ee       	ldi	r24, 0xE2	; 226
    3a0e:	91 e2       	ldi	r25, 0x21	; 33
    3a10:	9f 93       	push	r25
    3a12:	8f 93       	push	r24
    3a14:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
	init_twi1_gyro();

	/* Device Baro MS560702BA03-50 - I2C address: 0x76 */
	init_twi1_baro();

	printf("-----------\r\n\r\n");
    3a1e:	0f 90       	pop	r0
    3a20:	8b e6       	ldi	r24, 0x6B	; 107
    3a22:	93 e2       	ldi	r25, 0x23	; 35
	#endif

	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
    3a24:	0e 94 ad 58 	call	0xb15a	; 0xb15a <puts>
    3a28:	61 ed       	ldi	r22, 0xD1	; 209
    3a2a:	72 e1       	ldi	r23, 0x12	; 18
    3a2c:	83 e1       	ldi	r24, 0x13	; 19
    3a2e:	90 e0       	ldi	r25, 0x00	; 0

/* TWI2 - LCD Port */
static void start_twi2_lcd(void)
{
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
    3a30:	a4 d9       	rcall	.-3256   	; 0x2d7a <__portable_avr_delay_cycles>
    3a32:	eb e0       	ldi	r30, 0x0B	; 11
    3a34:	f0 e2       	ldi	r31, 0x20	; 32
    3a36:	81 e0       	ldi	r24, 0x01	; 1
	twi2_packet.addr_length = 1;
    3a38:	81 83       	std	Z+1, r24	; 0x01
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	84 83       	std	Z+4, r24	; 0x04
	twi2_packet.length = 1;
    3a40:	95 83       	std	Z+5, r25	; 0x05
    3a42:	80 87       	std	Z+8, r24	; 0x08
    3a44:	91 87       	std	Z+9, r25	; 0x09
    3a46:	41 e0       	ldi	r20, 0x01	; 1
    3a48:	bf 01       	movw	r22, r30
    3a4a:	80 e8       	ldi	r24, 0x80	; 128
    3a4c:	94 e0       	ldi	r25, 0x04	; 4
    3a4e:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
    3a52:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <twi2_m_data>
    3a56:	80 93 1d 29 	sts	0x291D, r24	; 0x80291d <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
    3a5a:	81 31       	cpi	r24, 0x11	; 17
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
    3a5c:	78 f1       	brcs	.+94     	; 0x3abc <twi_start+0x840>
    3a5e:	cb e0       	ldi	r28, 0x0B	; 11
    3a60:	d0 e2       	ldi	r29, 0x20	; 32
    3a62:	82 e0       	ldi	r24, 0x02	; 2
		twi2_m_data[0] = 0x10;
    3a64:	89 83       	std	Y+1, r24	; 0x01
    3a66:	0f 2e       	mov	r0, r31
    3a68:	f7 e9       	ldi	r31, 0x97	; 151
    3a6a:	ef 2e       	mov	r14, r31
    3a6c:	f8 e2       	ldi	r31, 0x28	; 40
    3a6e:	ff 2e       	mov	r15, r31
    3a70:	f0 2d       	mov	r31, r0
    3a72:	80 e1       	ldi	r24, 0x10	; 16
    3a74:	f7 01       	movw	r30, r14
		twi2_packet.length = 1;
    3a76:	80 83       	st	Z, r24
    3a78:	01 e0       	ldi	r16, 0x01	; 1
    3a7a:	10 e0       	ldi	r17, 0x00	; 0
    3a7c:	08 87       	std	Y+8, r16	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    3a7e:	19 87       	std	Y+9, r17	; 0x09
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	be 01       	movw	r22, r28
    3a84:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3a86:	94 e0       	ldi	r25, 0x04	; 4
    3a88:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    3a8c:	65 e0       	ldi	r22, 0x05	; 5
    3a8e:	70 e0       	ldi	r23, 0x00	; 0
    3a90:	80 e0       	ldi	r24, 0x00	; 0

		twi2_waitUntilReady();
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	72 d9       	rcall	.-3356   	; 0x2d7a <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
    3a96:	7c d9       	rcall	.-3336   	; 0x2d90 <twi2_waitUntilReady>
    3a98:	84 e1       	ldi	r24, 0x14	; 20
		twi2_m_data[0] = GFX_PIXEL_SET;
    3a9a:	89 83       	std	Y+1, r24	; 0x01
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	f7 01       	movw	r30, r14
		twi2_packet.length = 1;
    3aa0:	80 83       	st	Z, r24
    3aa2:	08 87       	std	Y+8, r16	; 0x08
    3aa4:	19 87       	std	Y+9, r17	; 0x09
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	be 01       	movw	r22, r28
    3aaa:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3aac:	94 e0       	ldi	r25, 0x04	; 4
    3aae:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
    3ab2:	65 e0       	ldi	r22, 0x05	; 5
    3ab4:	70 e0       	ldi	r23, 0x00	; 0
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
	start_twi2_lcd();
}
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	5f d9       	rcall	.-3394   	; 0x2d7a <__portable_avr_delay_cycles>
    3abc:	df 91       	pop	r29
    3abe:	cf 91       	pop	r28
    3ac0:	1f 91       	pop	r17
    3ac2:	0f 91       	pop	r16
    3ac4:	ff 90       	pop	r15
    3ac6:	ef 90       	pop	r14
    3ac8:	df 90       	pop	r13
    3aca:	cf 90       	pop	r12
    3acc:	bf 90       	pop	r11
    3ace:	af 90       	pop	r10
    3ad0:	9f 90       	pop	r9
    3ad2:	8f 90       	pop	r8
    3ad4:	7f 90       	pop	r7
    3ad6:	08 95       	ret

00003ad8 <isr_10ms_twi1_onboard>:
	}
}

/* 10ms TWI1 - Gyro device */
void isr_10ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    3ad8:	08 95       	ret

00003ada <isr_500ms_twi1_onboard>:
}

/* 500ms TWI1 - Baro, Hygro devices */
void isr_500ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    3ada:	cf 92       	push	r12
    3adc:	df 92       	push	r13
    3ade:	ef 92       	push	r14
    3ae0:	ff 92       	push	r15
    3ae2:	6b 01       	movw	r12, r22
    3ae4:	7c 01       	movw	r14, r24
	if (g_twi1_hygro_valid) {
    3ae6:	80 91 27 29 	lds	r24, 0x2927	; 0x802927 <g_twi1_hygro_valid>
    3aea:	88 23       	and	r24, r24
    3aec:	69 f1       	breq	.+90     	; 0x3b48 <isr_500ms_twi1_onboard+0x6e>
	if (!sync) {
		return;
	}

	/* Read cyclic measurement data */
	twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    3aee:	ef e1       	ldi	r30, 0x1F	; 31
    3af0:	f0 e2       	ldi	r31, 0x20	; 32
    3af2:	84 e4       	ldi	r24, 0x44	; 68
    3af4:	80 83       	st	Z, r24
	twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_FETCH_DATA_HI;
    3af6:	80 ee       	ldi	r24, 0xE0	; 224
    3af8:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_FETCH_DATA_LO;
    3afa:	12 82       	std	Z+2, r1	; 0x02
	twi1_packet.addr_length = 2;
    3afc:	82 e0       	ldi	r24, 0x02	; 2
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	84 83       	std	Z+4, r24	; 0x04
    3b02:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 5;
    3b04:	85 e0       	ldi	r24, 0x05	; 5
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	80 87       	std	Z+8, r24	; 0x08
    3b0a:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3b0c:	41 e0       	ldi	r20, 0x01	; 1
    3b0e:	bf 01       	movw	r22, r30
    3b10:	80 ea       	ldi	r24, 0xA0	; 160
    3b12:	94 e0       	ldi	r25, 0x04	; 4
    3b14:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
	status_code_t sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    3b18:	81 11       	cpse	r24, r1
    3b1a:	16 c0       	rjmp	.+44     	; 0x3b48 <isr_500ms_twi1_onboard+0x6e>
		g_twi1_hygro_S_T	= ((uint16_t)twi1_m_data[0] << 8) | twi1_m_data[1];
    3b1c:	ef e9       	ldi	r30, 0x9F	; 159
    3b1e:	f8 e2       	ldi	r31, 0x28	; 40
    3b20:	80 81       	ld	r24, Z
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	98 2f       	mov	r25, r24
    3b26:	88 27       	eor	r24, r24
    3b28:	21 81       	ldd	r18, Z+1	; 0x01
    3b2a:	82 2b       	or	r24, r18
    3b2c:	80 93 24 29 	sts	0x2924, r24	; 0x802924 <g_twi1_hygro_S_T>
    3b30:	90 93 25 29 	sts	0x2925, r25	; 0x802925 <g_twi1_hygro_S_T+0x1>
		g_twi1_hygro_S_RH	= ((uint16_t)twi1_m_data[3] << 8) | twi1_m_data[4];
    3b34:	83 81       	ldd	r24, Z+3	; 0x03
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	98 2f       	mov	r25, r24
    3b3a:	88 27       	eor	r24, r24
    3b3c:	24 81       	ldd	r18, Z+4	; 0x04
    3b3e:	82 2b       	or	r24, r18
    3b40:	80 93 22 29 	sts	0x2922, r24	; 0x802922 <g_twi1_hygro_S_RH>
    3b44:	90 93 23 29 	sts	0x2923, r25	; 0x802923 <g_twi1_hygro_S_RH+0x1>
{	/* Service time slot */
	if (g_twi1_hygro_valid) {
		isr_twi1_hygro(now, true);
	}

	if (g_twi1_gyro_valid) {
    3b48:	80 91 86 29 	lds	r24, 0x2986	; 0x802986 <g_twi1_gyro_valid>
    3b4c:	88 23       	and	r24, r24
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <isr_500ms_twi1_onboard+0x78>
    3b50:	fa c0       	rjmp	.+500    	; 0x3d46 <isr_500ms_twi1_onboard+0x26c>
	if (!sync) {
		return;
	}

	do {
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3b52:	ef e1       	ldi	r30, 0x1F	; 31
    3b54:	f0 e2       	ldi	r31, 0x20	; 32
    3b56:	88 e6       	ldi	r24, 0x68	; 104
    3b58:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_ACCEL_XOUT_H;		// Big endian
    3b5a:	8b e3       	ldi	r24, 0x3B	; 59
    3b5c:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	84 83       	std	Z+4, r24	; 0x04
    3b64:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 8;
    3b66:	88 e0       	ldi	r24, 0x08	; 8
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	80 87       	std	Z+8, r24	; 0x08
    3b6c:	91 87       	std	Z+9, r25	; 0x09
    3b6e:	41 e0       	ldi	r20, 0x01	; 1
    3b70:	bf 01       	movw	r22, r30
    3b72:	80 ea       	ldi	r24, 0xA0	; 160
    3b74:	94 e0       	ldi	r25, 0x04	; 4
    3b76:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		status_code_t sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3b7a:	81 11       	cpse	r24, r1
    3b7c:	e4 c0       	rjmp	.+456    	; 0x3d46 <isr_500ms_twi1_onboard+0x26c>
			break;
		}
		g_twi1_gyro_1_accel_x = ((uint16_t)twi1_m_data[0] << 8) | twi1_m_data[1];
    3b7e:	ef e9       	ldi	r30, 0x9F	; 159
    3b80:	f8 e2       	ldi	r31, 0x28	; 40
    3b82:	80 81       	ld	r24, Z
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	98 2f       	mov	r25, r24
    3b88:	88 27       	eor	r24, r24
    3b8a:	21 81       	ldd	r18, Z+1	; 0x01
    3b8c:	82 2b       	or	r24, r18
    3b8e:	80 93 7d 29 	sts	0x297D, r24	; 0x80297d <g_twi1_gyro_1_accel_x>
    3b92:	90 93 7e 29 	sts	0x297E, r25	; 0x80297e <g_twi1_gyro_1_accel_x+0x1>
		g_twi1_gyro_1_accel_y = ((uint16_t)twi1_m_data[2] << 8) | twi1_m_data[3];
    3b96:	82 81       	ldd	r24, Z+2	; 0x02
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	98 2f       	mov	r25, r24
    3b9c:	88 27       	eor	r24, r24
    3b9e:	23 81       	ldd	r18, Z+3	; 0x03
    3ba0:	82 2b       	or	r24, r18
    3ba2:	80 93 7b 29 	sts	0x297B, r24	; 0x80297b <g_twi1_gyro_1_accel_y>
    3ba6:	90 93 7c 29 	sts	0x297C, r25	; 0x80297c <g_twi1_gyro_1_accel_y+0x1>
		g_twi1_gyro_1_accel_z = ((uint16_t)twi1_m_data[4] << 8) | twi1_m_data[5];
    3baa:	84 81       	ldd	r24, Z+4	; 0x04
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	98 2f       	mov	r25, r24
    3bb0:	88 27       	eor	r24, r24
    3bb2:	25 81       	ldd	r18, Z+5	; 0x05
    3bb4:	82 2b       	or	r24, r18
    3bb6:	80 93 79 29 	sts	0x2979, r24	; 0x802979 <g_twi1_gyro_1_accel_z>
    3bba:	90 93 7a 29 	sts	0x297A, r25	; 0x80297a <g_twi1_gyro_1_accel_z+0x1>
		g_twi1_gyro_1_temp    = ((uint16_t)twi1_m_data[6] << 8) | twi1_m_data[7];
    3bbe:	86 81       	ldd	r24, Z+6	; 0x06
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	98 2f       	mov	r25, r24
    3bc4:	88 27       	eor	r24, r24
    3bc6:	27 81       	ldd	r18, Z+7	; 0x07
    3bc8:	82 2b       	or	r24, r18
    3bca:	80 93 83 29 	sts	0x2983, r24	; 0x802983 <g_twi1_gyro_1_temp>
    3bce:	90 93 84 29 	sts	0x2984, r25	; 0x802984 <g_twi1_gyro_1_temp+0x1>

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3bd2:	ef e1       	ldi	r30, 0x1F	; 31
    3bd4:	f0 e2       	ldi	r31, 0x20	; 32
    3bd6:	88 e6       	ldi	r24, 0x68	; 104
    3bd8:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_GYRO_XOUT_H;
    3bda:	83 e4       	ldi	r24, 0x43	; 67
    3bdc:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	84 83       	std	Z+4, r24	; 0x04
    3be4:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 6;
    3be6:	86 e0       	ldi	r24, 0x06	; 6
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	80 87       	std	Z+8, r24	; 0x08
    3bec:	91 87       	std	Z+9, r25	; 0x09
    3bee:	41 e0       	ldi	r20, 0x01	; 1
    3bf0:	bf 01       	movw	r22, r30
    3bf2:	80 ea       	ldi	r24, 0xA0	; 160
    3bf4:	94 e0       	ldi	r25, 0x04	; 4
    3bf6:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3bfa:	81 11       	cpse	r24, r1
    3bfc:	a4 c0       	rjmp	.+328    	; 0x3d46 <isr_500ms_twi1_onboard+0x26c>
			break;
		}
		g_twi1_gyro_1_gyro_x = ((uint16_t)twi1_m_data[0] << 8) | twi1_m_data[1];
    3bfe:	ef e9       	ldi	r30, 0x9F	; 159
    3c00:	f8 e2       	ldi	r31, 0x28	; 40
    3c02:	80 81       	ld	r24, Z
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	98 2f       	mov	r25, r24
    3c08:	88 27       	eor	r24, r24
    3c0a:	21 81       	ldd	r18, Z+1	; 0x01
    3c0c:	82 2b       	or	r24, r18
    3c0e:	80 93 71 29 	sts	0x2971, r24	; 0x802971 <g_twi1_gyro_1_gyro_x>
    3c12:	90 93 72 29 	sts	0x2972, r25	; 0x802972 <g_twi1_gyro_1_gyro_x+0x1>
		g_twi1_gyro_1_gyro_y = ((uint16_t)twi1_m_data[2] << 8) | twi1_m_data[3];
    3c16:	82 81       	ldd	r24, Z+2	; 0x02
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	98 2f       	mov	r25, r24
    3c1c:	88 27       	eor	r24, r24
    3c1e:	23 81       	ldd	r18, Z+3	; 0x03
    3c20:	82 2b       	or	r24, r18
    3c22:	80 93 6f 29 	sts	0x296F, r24	; 0x80296f <g_twi1_gyro_1_gyro_y>
    3c26:	90 93 70 29 	sts	0x2970, r25	; 0x802970 <g_twi1_gyro_1_gyro_y+0x1>
		g_twi1_gyro_1_gyro_z = ((uint16_t)twi1_m_data[4] << 8) | twi1_m_data[5];
    3c2a:	84 81       	ldd	r24, Z+4	; 0x04
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	98 2f       	mov	r25, r24
    3c30:	88 27       	eor	r24, r24
    3c32:	25 81       	ldd	r18, Z+5	; 0x05
    3c34:	82 2b       	or	r24, r18
    3c36:	80 93 6d 29 	sts	0x296D, r24	; 0x80296d <g_twi1_gyro_1_gyro_z>
    3c3a:	90 93 6e 29 	sts	0x296E, r25	; 0x80296e <g_twi1_gyro_1_gyro_z+0x1>

		/* Magnetometer: check if new data is available */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3c3e:	ef e1       	ldi	r30, 0x1F	; 31
    3c40:	f0 e2       	ldi	r31, 0x20	; 32
    3c42:	8c e0       	ldi	r24, 0x0C	; 12
    3c44:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_ST1;
    3c46:	82 e0       	ldi	r24, 0x02	; 2
    3c48:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	84 83       	std	Z+4, r24	; 0x04
    3c50:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    3c52:	80 87       	std	Z+8, r24	; 0x08
    3c54:	91 87       	std	Z+9, r25	; 0x09
    3c56:	41 e0       	ldi	r20, 0x01	; 1
    3c58:	bf 01       	movw	r22, r30
    3c5a:	80 ea       	ldi	r24, 0xA0	; 160
    3c5c:	94 e0       	ldi	r25, 0x04	; 4
    3c5e:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3c62:	81 11       	cpse	r24, r1
    3c64:	70 c0       	rjmp	.+224    	; 0x3d46 <isr_500ms_twi1_onboard+0x26c>
			break;
		}
		if (!(twi1_m_data[0] & TWI1_SLAVE_GYRO_DTA_2_ST1__DRDY)) {
    3c66:	80 91 9f 28 	lds	r24, 0x289F	; 0x80289f <twi1_m_data>
    3c6a:	80 ff       	sbrs	r24, 0
    3c6c:	6c c0       	rjmp	.+216    	; 0x3d46 <isr_500ms_twi1_onboard+0x26c>
			/* Data of Magnetometer AK8963 not ready yet */
			break;
		}

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3c6e:	ef e1       	ldi	r30, 0x1F	; 31
    3c70:	f0 e2       	ldi	r31, 0x20	; 32
    3c72:	8c e0       	ldi	r24, 0x0C	; 12
    3c74:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_HX_L;			// Little endian
    3c76:	83 e0       	ldi	r24, 0x03	; 3
    3c78:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	84 83       	std	Z+4, r24	; 0x04
    3c80:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 6;
    3c82:	86 e0       	ldi	r24, 0x06	; 6
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	80 87       	std	Z+8, r24	; 0x08
    3c88:	91 87       	std	Z+9, r25	; 0x09
    3c8a:	41 e0       	ldi	r20, 0x01	; 1
    3c8c:	bf 01       	movw	r22, r30
    3c8e:	80 ea       	ldi	r24, 0xA0	; 160
    3c90:	94 e0       	ldi	r25, 0x04	; 4
    3c92:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3c96:	81 11       	cpse	r24, r1
    3c98:	56 c0       	rjmp	.+172    	; 0x3d46 <isr_500ms_twi1_onboard+0x26c>
			break;
		}
		g_twi1_gyro_2_mag_x = ((int16_t) ((((uint16_t)twi1_m_data[1]) << 8) | twi1_m_data[0])) + g_twi1_gyro_2_ofsx;
    3c9a:	ef e9       	ldi	r30, 0x9F	; 159
    3c9c:	f8 e2       	ldi	r31, 0x28	; 40
    3c9e:	81 81       	ldd	r24, Z+1	; 0x01
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	98 2f       	mov	r25, r24
    3ca4:	88 27       	eor	r24, r24
    3ca6:	20 81       	ld	r18, Z
    3ca8:	82 2b       	or	r24, r18
    3caa:	20 91 3d 20 	lds	r18, 0x203D	; 0x80203d <g_twi1_gyro_2_ofsx>
    3cae:	30 91 3e 20 	lds	r19, 0x203E	; 0x80203e <g_twi1_gyro_2_ofsx+0x1>
    3cb2:	82 0f       	add	r24, r18
    3cb4:	93 1f       	adc	r25, r19
    3cb6:	80 93 5b 29 	sts	0x295B, r24	; 0x80295b <g_twi1_gyro_2_mag_x>
    3cba:	90 93 5c 29 	sts	0x295C, r25	; 0x80295c <g_twi1_gyro_2_mag_x+0x1>
		g_twi1_gyro_2_mag_y = ((int16_t) ((((uint16_t)twi1_m_data[3]) << 8) | twi1_m_data[2])) + g_twi1_gyro_2_ofsy;
    3cbe:	83 81       	ldd	r24, Z+3	; 0x03
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	98 2f       	mov	r25, r24
    3cc4:	88 27       	eor	r24, r24
    3cc6:	22 81       	ldd	r18, Z+2	; 0x02
    3cc8:	82 2b       	or	r24, r18
    3cca:	20 91 3b 20 	lds	r18, 0x203B	; 0x80203b <g_twi1_gyro_2_ofsy>
    3cce:	30 91 3c 20 	lds	r19, 0x203C	; 0x80203c <g_twi1_gyro_2_ofsy+0x1>
    3cd2:	82 0f       	add	r24, r18
    3cd4:	93 1f       	adc	r25, r19
    3cd6:	80 93 59 29 	sts	0x2959, r24	; 0x802959 <g_twi1_gyro_2_mag_y>
    3cda:	90 93 5a 29 	sts	0x295A, r25	; 0x80295a <g_twi1_gyro_2_mag_y+0x1>
		g_twi1_gyro_2_mag_z = ((int16_t) ((((uint16_t)twi1_m_data[5]) << 8) | twi1_m_data[4])) + g_twi1_gyro_2_ofsz;
    3cde:	85 81       	ldd	r24, Z+5	; 0x05
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	98 2f       	mov	r25, r24
    3ce4:	88 27       	eor	r24, r24
    3ce6:	24 81       	ldd	r18, Z+4	; 0x04
    3ce8:	82 2b       	or	r24, r18
    3cea:	20 91 39 20 	lds	r18, 0x2039	; 0x802039 <g_twi1_gyro_2_ofsz>
    3cee:	30 91 3a 20 	lds	r19, 0x203A	; 0x80203a <g_twi1_gyro_2_ofsz+0x1>
    3cf2:	82 0f       	add	r24, r18
    3cf4:	93 1f       	adc	r25, r19
    3cf6:	80 93 57 29 	sts	0x2957, r24	; 0x802957 <g_twi1_gyro_2_mag_z>
    3cfa:	90 93 58 29 	sts	0x2958, r25	; 0x802958 <g_twi1_gyro_2_mag_z+0x1>

		/* Magnetometer: check for data validity and release cycle */
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3cfe:	ef e1       	ldi	r30, 0x1F	; 31
    3d00:	f0 e2       	ldi	r31, 0x20	; 32
    3d02:	8c e0       	ldi	r24, 0x0C	; 12
    3d04:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_ST2;
    3d06:	89 e0       	ldi	r24, 0x09	; 9
    3d08:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	84 83       	std	Z+4, r24	; 0x04
    3d10:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    3d12:	80 87       	std	Z+8, r24	; 0x08
    3d14:	91 87       	std	Z+9, r25	; 0x09
    3d16:	41 e0       	ldi	r20, 0x01	; 1
    3d18:	bf 01       	movw	r22, r30
    3d1a:	80 ea       	ldi	r24, 0xA0	; 160
    3d1c:	94 e0       	ldi	r25, 0x04	; 4
    3d1e:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3d22:	81 11       	cpse	r24, r1
    3d24:	10 c0       	rjmp	.+32     	; 0x3d46 <isr_500ms_twi1_onboard+0x26c>
			break;
		}
		if (twi1_m_data[0] & TWI1_SLAVE_GYRO_DTA_2_ST2__HOFL) {
    3d26:	80 91 9f 28 	lds	r24, 0x289F	; 0x80289f <twi1_m_data>
    3d2a:	83 ff       	sbrs	r24, 3
    3d2c:	0c c0       	rjmp	.+24     	; 0x3d46 <isr_500ms_twi1_onboard+0x26c>
			/* Data of Magnetometer AK8963 overflowed */
			g_twi1_gyro_2_mag_z = g_twi1_gyro_2_mag_y = g_twi1_gyro_2_mag_x = 0;
    3d2e:	10 92 5b 29 	sts	0x295B, r1	; 0x80295b <g_twi1_gyro_2_mag_x>
    3d32:	10 92 5c 29 	sts	0x295C, r1	; 0x80295c <g_twi1_gyro_2_mag_x+0x1>
    3d36:	10 92 59 29 	sts	0x2959, r1	; 0x802959 <g_twi1_gyro_2_mag_y>
    3d3a:	10 92 5a 29 	sts	0x295A, r1	; 0x80295a <g_twi1_gyro_2_mag_y+0x1>
    3d3e:	10 92 57 29 	sts	0x2957, r1	; 0x802957 <g_twi1_gyro_2_mag_z>
    3d42:	10 92 58 29 	sts	0x2958, r1	; 0x802958 <g_twi1_gyro_2_mag_z+0x1>

	if (g_twi1_gyro_valid) {
		isr_twi1_gyro(now, true);
	}

	if (g_twi1_baro_valid) {
    3d46:	80 91 4a 29 	lds	r24, 0x294A	; 0x80294a <g_twi1_baro_valid>
    3d4a:	88 23       	and	r24, r24
    3d4c:	21 f0       	breq	.+8      	; 0x3d56 <isr_500ms_twi1_onboard+0x27c>
		isr_twi1_baro(now, true);
    3d4e:	41 e0       	ldi	r20, 0x01	; 1
    3d50:	c7 01       	movw	r24, r14
    3d52:	b6 01       	movw	r22, r12
    3d54:	66 d8       	rcall	.-3892   	; 0x2e22 <isr_twi1_baro>
	}
}
    3d56:	ff 90       	pop	r15
    3d58:	ef 90       	pop	r14
    3d5a:	df 90       	pop	r13
    3d5c:	cf 90       	pop	r12
    3d5e:	08 95       	ret

00003d60 <isr_sparetime_twi1_onboard>:

	if (g_twi1_gyro_valid) {
		isr_twi1_gyro(now, false);
	}

	if (g_twi1_baro_valid) {
    3d60:	20 91 4a 29 	lds	r18, 0x294A	; 0x80294a <g_twi1_baro_valid>
    3d64:	22 23       	and	r18, r18
    3d66:	11 f0       	breq	.+4      	; 0x3d6c <isr_sparetime_twi1_onboard+0xc>
		isr_twi1_baro(now, false);
    3d68:	40 e0       	ldi	r20, 0x00	; 0
    3d6a:	5b c8       	rjmp	.-3914   	; 0x2e22 <isr_twi1_baro>
    3d6c:	08 95       	ret

00003d6e <task_twi1_onboard>:
	}
}

/* TWI1 - onboard devices */
void task_twi1_onboard(uint32_t now)
{
    3d6e:	2f 92       	push	r2
    3d70:	3f 92       	push	r3
    3d72:	4f 92       	push	r4
    3d74:	5f 92       	push	r5
    3d76:	6f 92       	push	r6
    3d78:	7f 92       	push	r7
    3d7a:	8f 92       	push	r8
    3d7c:	9f 92       	push	r9
    3d7e:	af 92       	push	r10
    3d80:	bf 92       	push	r11
    3d82:	cf 92       	push	r12
    3d84:	df 92       	push	r13
    3d86:	ef 92       	push	r14
    3d88:	ff 92       	push	r15
    3d8a:	0f 93       	push	r16
    3d8c:	1f 93       	push	r17
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
    3d96:	e0 97       	sbiw	r28, 0x30	; 48
    3d98:	cd bf       	out	0x3d, r28	; 61
    3d9a:	de bf       	out	0x3e, r29	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3d9c:	8f b7       	in	r24, 0x3f	; 63
    3d9e:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    3da0:	f8 94       	cli
	return flags;
    3da2:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags = cpu_irq_save();
	bool l_twi1_hygro_valid	= g_twi1_hygro_valid;
    3da4:	80 91 27 29 	lds	r24, 0x2927	; 0x802927 <g_twi1_hygro_valid>
	bool l_twi1_gyro_valid	= g_twi1_gyro_valid;
    3da8:	10 91 86 29 	lds	r17, 0x2986	; 0x802986 <g_twi1_gyro_valid>
	bool l_twi1_baro_valid	= g_twi1_baro_valid;
    3dac:	20 91 4a 29 	lds	r18, 0x294A	; 0x80294a <g_twi1_baro_valid>
    3db0:	29 87       	std	Y+9, r18	; 0x09
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3db2:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (l_twi1_hygro_valid) {
    3db4:	88 23       	and	r24, r24
    3db6:	09 f4       	brne	.+2      	; 0x3dba <task_twi1_onboard+0x4c>
    3db8:	3c c0       	rjmp	.+120    	; 0x3e32 <task_twi1_onboard+0xc4>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3dba:	8f b7       	in	r24, 0x3f	; 63
    3dbc:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    3dbe:	f8 94       	cli
	return flags;
    3dc0:	8f 81       	ldd	r24, Y+7	; 0x07
{	// Calculations for the presentation layer
	static uint16_t s_twi1_hygro_S_T	= 0UL;
	static uint16_t s_twi1_hygro_S_RH	= 0UL;

	irqflags_t flags = cpu_irq_save();
	uint16_t l_twi1_hygro_S_T	= g_twi1_hygro_S_T;
    3dc2:	20 91 24 29 	lds	r18, 0x2924	; 0x802924 <g_twi1_hygro_S_T>
    3dc6:	30 91 25 29 	lds	r19, 0x2925	; 0x802925 <g_twi1_hygro_S_T+0x1>
	uint16_t l_twi1_hygro_S_RH	= g_twi1_hygro_S_RH;
    3dca:	e0 90 22 29 	lds	r14, 0x2922	; 0x802922 <g_twi1_hygro_S_RH>
    3dce:	f0 90 23 29 	lds	r15, 0x2923	; 0x802923 <g_twi1_hygro_S_RH+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3dd2:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Temp value when a different measurement has arrived */
	if (l_twi1_hygro_S_T != s_twi1_hygro_S_T) {
    3dd4:	21 15       	cp	r18, r1
    3dd6:	31 05       	cpc	r19, r1
    3dd8:	a9 f0       	breq	.+42     	; 0x3e04 <task_twi1_onboard+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3dda:	8f b7       	in	r24, 0x3f	; 63
    3ddc:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    3dde:	f8 94       	cli
	return flags;
    3de0:	0e 81       	ldd	r16, Y+6	; 0x06
		int16_t temp_100 = (int16_t)((((int32_t)l_twi1_hygro_S_T  * 17500) / 0xFFFF) - 4500);

		flags = cpu_irq_save();
		g_twi1_hygro_T_100 = temp_100;
    3de2:	ac e5       	ldi	r26, 0x5C	; 92
    3de4:	b4 e4       	ldi	r27, 0x44	; 68
    3de6:	0e 94 49 54 	call	0xa892	; 0xa892 <__umulhisi3>
    3dea:	2f ef       	ldi	r18, 0xFF	; 255
    3dec:	3f ef       	ldi	r19, 0xFF	; 255
    3dee:	40 e0       	ldi	r20, 0x00	; 0
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    3df6:	24 59       	subi	r18, 0x94	; 148
    3df8:	31 41       	sbci	r19, 0x11	; 17
    3dfa:	20 93 20 29 	sts	0x2920, r18	; 0x802920 <g_twi1_hygro_T_100>
    3dfe:	30 93 21 29 	sts	0x2921, r19	; 0x802921 <g_twi1_hygro_T_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3e02:	0f bf       	out	0x3f, r16	; 63
		cpu_irq_restore(flags);
	}

	/* Calculate and present Hygro value when a different measurement has arrived */
	if (l_twi1_hygro_S_RH != s_twi1_hygro_S_RH) {
    3e04:	e1 14       	cp	r14, r1
    3e06:	f1 04       	cpc	r15, r1
    3e08:	a1 f0       	breq	.+40     	; 0x3e32 <task_twi1_onboard+0xc4>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3e0a:	8f b7       	in	r24, 0x3f	; 63
    3e0c:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    3e0e:	f8 94       	cli
	return flags;
    3e10:	0d 81       	ldd	r16, Y+5	; 0x05
		int16_t rh_100 = (int16_t)( ((int32_t)l_twi1_hygro_S_RH * 10000) / 0xFFFF);

		flags = cpu_irq_save();
		g_twi1_hygro_RH_100 = rh_100;
    3e12:	97 01       	movw	r18, r14
    3e14:	a0 e1       	ldi	r26, 0x10	; 16
    3e16:	b7 e2       	ldi	r27, 0x27	; 39
    3e18:	0e 94 49 54 	call	0xa892	; 0xa892 <__umulhisi3>
    3e1c:	2f ef       	ldi	r18, 0xFF	; 255
    3e1e:	3f ef       	ldi	r19, 0xFF	; 255
    3e20:	40 e0       	ldi	r20, 0x00	; 0
    3e22:	50 e0       	ldi	r21, 0x00	; 0
    3e24:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    3e28:	20 93 1e 29 	sts	0x291E, r18	; 0x80291e <g_twi1_hygro_RH_100>
    3e2c:	30 93 1f 29 	sts	0x291F, r19	; 0x80291f <g_twi1_hygro_RH_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3e30:	0f bf       	out	0x3f, r16	; 63

	if (l_twi1_hygro_valid) {
		task_twi1_hygro(now);
	}

	if (l_twi1_gyro_valid) {
    3e32:	11 23       	and	r17, r17
    3e34:	09 f4       	brne	.+2      	; 0x3e38 <task_twi1_onboard+0xca>
    3e36:	c9 c2       	rjmp	.+1426   	; 0x43ca <task_twi1_onboard+0x65c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3e38:	8f b7       	in	r24, 0x3f	; 63
    3e3a:	8c 83       	std	Y+4, r24	; 0x04
	cpu_irq_disable();
    3e3c:	f8 94       	cli
	return flags;
    3e3e:	9c 81       	ldd	r25, Y+4	; 0x04
}

static void task_twi1_gyro(uint32_t now)
{	// Calculations for the presentation layer
	irqflags_t flags = cpu_irq_save();
	int16_t	l_twi1_gyro_1_accel_x	= g_twi1_gyro_1_accel_x;
    3e40:	80 91 7d 29 	lds	r24, 0x297D	; 0x80297d <g_twi1_gyro_1_accel_x>
    3e44:	f0 91 7e 29 	lds	r31, 0x297E	; 0x80297e <g_twi1_gyro_1_accel_x+0x1>
	int16_t	l_twi1_gyro_1_accel_y	= g_twi1_gyro_1_accel_y;
    3e48:	60 90 7b 29 	lds	r6, 0x297B	; 0x80297b <g_twi1_gyro_1_accel_y>
    3e4c:	70 90 7c 29 	lds	r7, 0x297C	; 0x80297c <g_twi1_gyro_1_accel_y+0x1>
	int16_t	l_twi1_gyro_1_accel_z	= g_twi1_gyro_1_accel_z;
    3e50:	90 90 79 29 	lds	r9, 0x2979	; 0x802979 <g_twi1_gyro_1_accel_z>
    3e54:	80 90 7a 29 	lds	r8, 0x297A	; 0x80297a <g_twi1_gyro_1_accel_z+0x1>
	int16_t l_twi1_gyro_1_gyro_x	= g_twi1_gyro_1_gyro_x;
    3e58:	40 91 71 29 	lds	r20, 0x2971	; 0x802971 <g_twi1_gyro_1_gyro_x>
    3e5c:	50 91 72 29 	lds	r21, 0x2972	; 0x802972 <g_twi1_gyro_1_gyro_x+0x1>
    3e60:	49 8f       	std	Y+25, r20	; 0x19
    3e62:	5a 8f       	std	Y+26, r21	; 0x1a
	int16_t l_twi1_gyro_1_gyro_y	= g_twi1_gyro_1_gyro_y;
    3e64:	60 91 6f 29 	lds	r22, 0x296F	; 0x80296f <g_twi1_gyro_1_gyro_y>
    3e68:	70 91 70 29 	lds	r23, 0x2970	; 0x802970 <g_twi1_gyro_1_gyro_y+0x1>
    3e6c:	6f 8f       	std	Y+31, r22	; 0x1f
    3e6e:	78 a3       	std	Y+32, r23	; 0x20
	int16_t l_twi1_gyro_1_gyro_z	= g_twi1_gyro_1_gyro_z;
    3e70:	a0 91 6d 29 	lds	r26, 0x296D	; 0x80296d <g_twi1_gyro_1_gyro_z>
    3e74:	b0 91 6e 29 	lds	r27, 0x296E	; 0x80296e <g_twi1_gyro_1_gyro_z+0x1>
    3e78:	ad 8b       	std	Y+21, r26	; 0x15
    3e7a:	be 8b       	std	Y+22, r27	; 0x16
	int16_t	l_twi1_gyro_1_temp		= g_twi1_gyro_1_temp;
    3e7c:	20 91 83 29 	lds	r18, 0x2983	; 0x802983 <g_twi1_gyro_1_temp>
    3e80:	30 91 84 29 	lds	r19, 0x2984	; 0x802984 <g_twi1_gyro_1_temp+0x1>
    3e84:	2d 8f       	std	Y+29, r18	; 0x1d
    3e86:	3e 8f       	std	Y+30, r19	; 0x1e
	int16_t l_twi1_gyro_2_mag_x		= g_twi1_gyro_2_mag_x;
    3e88:	20 90 5b 29 	lds	r2, 0x295B	; 0x80295b <g_twi1_gyro_2_mag_x>
    3e8c:	30 90 5c 29 	lds	r3, 0x295C	; 0x80295c <g_twi1_gyro_2_mag_x+0x1>
	int16_t l_twi1_gyro_2_mag_y		= g_twi1_gyro_2_mag_y;
    3e90:	40 90 59 29 	lds	r4, 0x2959	; 0x802959 <g_twi1_gyro_2_mag_y>
    3e94:	50 90 5a 29 	lds	r5, 0x295A	; 0x80295a <g_twi1_gyro_2_mag_y+0x1>
	int16_t l_twi1_gyro_2_mag_z		= g_twi1_gyro_2_mag_z;
    3e98:	40 91 57 29 	lds	r20, 0x2957	; 0x802957 <g_twi1_gyro_2_mag_z>
    3e9c:	50 91 58 29 	lds	r21, 0x2958	; 0x802958 <g_twi1_gyro_2_mag_z+0x1>
    3ea0:	49 8b       	std	Y+17, r20	; 0x11
    3ea2:	5a 8b       	std	Y+18, r21	; 0x12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3ea4:	9f bf       	out	0x3f, r25	; 63


inline
static int16_t calc_gyro1_accel_raw2mg(int16_t raw, int16_t factor)
{
	return (((1000 * TWI1_SLAVE_GYRO_DTA_1_ACCEL_CONFIG__02G) * (int64_t)raw * (int64_t)factor) / 10000LL) >> 15;
    3ea6:	a8 2f       	mov	r26, r24
    3ea8:	ef 2f       	mov	r30, r31
    3eaa:	ee 0f       	add	r30, r30
    3eac:	ee 0b       	sbc	r30, r30
    3eae:	28 2f       	mov	r18, r24
    3eb0:	3f 2f       	mov	r19, r31
    3eb2:	4e 2f       	mov	r20, r30
    3eb4:	5e 2f       	mov	r21, r30
    3eb6:	6e 2f       	mov	r22, r30
    3eb8:	7e 2f       	mov	r23, r30
    3eba:	8e 2f       	mov	r24, r30
    3ebc:	9e 2f       	mov	r25, r30
    3ebe:	02 e0       	ldi	r16, 0x02	; 2
    3ec0:	0e 94 89 55 	call	0xab12	; 0xab12 <__ashldi3>
    3ec4:	a2 2e       	mov	r10, r18
    3ec6:	b3 2e       	mov	r11, r19
    3ec8:	c4 2e       	mov	r12, r20
    3eca:	d5 2e       	mov	r13, r21
    3ecc:	e6 2e       	mov	r14, r22
    3ece:	f7 2e       	mov	r15, r23
    3ed0:	b8 2f       	mov	r27, r24
    3ed2:	19 2f       	mov	r17, r25
    3ed4:	05 e0       	ldi	r16, 0x05	; 5
    3ed6:	0e 94 89 55 	call	0xab12	; 0xab12 <__ashldi3>
    3eda:	0b 2f       	mov	r16, r27
    3edc:	0e 94 c9 55 	call	0xab92	; 0xab92 <__subdi3>
    3ee0:	aa 2e       	mov	r10, r26
    3ee2:	bf 2e       	mov	r11, r31
    3ee4:	ce 2e       	mov	r12, r30
    3ee6:	de 2e       	mov	r13, r30
    3ee8:	ee 2e       	mov	r14, r30
    3eea:	fe 2e       	mov	r15, r30
    3eec:	0e 2f       	mov	r16, r30
    3eee:	1e 2f       	mov	r17, r30
    3ef0:	0e 94 c0 55 	call	0xab80	; 0xab80 <__adddi3>
    3ef4:	04 e0       	ldi	r16, 0x04	; 4
    3ef6:	0e 94 89 55 	call	0xab12	; 0xab12 <__ashldi3>
    3efa:	b0 90 4a 20 	lds	r11, 0x204A	; 0x80204a <g_twi1_gyro_1_accel_factx+0x1>
    3efe:	a0 90 49 20 	lds	r10, 0x2049	; 0x802049 <g_twi1_gyro_1_accel_factx>
    3f02:	1b 2d       	mov	r17, r11
    3f04:	11 0f       	add	r17, r17
    3f06:	11 0b       	sbc	r17, r17
    3f08:	c1 2e       	mov	r12, r17
    3f0a:	d1 2e       	mov	r13, r17
    3f0c:	e1 2e       	mov	r14, r17
    3f0e:	f1 2e       	mov	r15, r17
    3f10:	01 2f       	mov	r16, r17
    3f12:	0e 94 6e 54 	call	0xa8dc	; 0xa8dc <__muldi3>
    3f16:	68 94       	set
    3f18:	aa 24       	eor	r10, r10
    3f1a:	a4 f8       	bld	r10, 4
    3f1c:	0f 2e       	mov	r0, r31
    3f1e:	f7 e2       	ldi	r31, 0x27	; 39
    3f20:	bf 2e       	mov	r11, r31
    3f22:	f0 2d       	mov	r31, r0
    3f24:	c1 2c       	mov	r12, r1
    3f26:	d1 2c       	mov	r13, r1
    3f28:	e1 2c       	mov	r14, r1
    3f2a:	f1 2c       	mov	r15, r1
    3f2c:	00 e0       	ldi	r16, 0x00	; 0
    3f2e:	10 e0       	ldi	r17, 0x00	; 0
    3f30:	0e 94 c1 54 	call	0xa982	; 0xa982 <__divdi3>
    3f34:	0f e0       	ldi	r16, 0x0F	; 15
    3f36:	0e 94 a2 55 	call	0xab44	; 0xab44 <__ashrdi3>
    3f3a:	2d a3       	std	Y+37, r18	; 0x25
    3f3c:	3e a3       	std	Y+38, r19	; 0x26
    3f3e:	e7 2d       	mov	r30, r7
    3f40:	ee 0f       	add	r30, r30
    3f42:	ee 0b       	sbc	r30, r30
    3f44:	26 2d       	mov	r18, r6
    3f46:	37 2d       	mov	r19, r7
    3f48:	4e 2f       	mov	r20, r30
    3f4a:	5e 2f       	mov	r21, r30
    3f4c:	6e 2f       	mov	r22, r30
    3f4e:	7e 2f       	mov	r23, r30
    3f50:	8e 2f       	mov	r24, r30
    3f52:	9e 2f       	mov	r25, r30
    3f54:	02 e0       	ldi	r16, 0x02	; 2
    3f56:	0e 94 89 55 	call	0xab12	; 0xab12 <__ashldi3>
    3f5a:	a2 2e       	mov	r10, r18
    3f5c:	b3 2e       	mov	r11, r19
    3f5e:	c4 2e       	mov	r12, r20
    3f60:	d5 2e       	mov	r13, r21
    3f62:	e6 2e       	mov	r14, r22
    3f64:	f7 2e       	mov	r15, r23
    3f66:	a8 2f       	mov	r26, r24
    3f68:	19 2f       	mov	r17, r25
    3f6a:	05 e0       	ldi	r16, 0x05	; 5
    3f6c:	0e 94 89 55 	call	0xab12	; 0xab12 <__ashldi3>
    3f70:	0a 2f       	mov	r16, r26
    3f72:	0e 94 c9 55 	call	0xab92	; 0xab92 <__subdi3>
    3f76:	a6 2c       	mov	r10, r6
    3f78:	b7 2c       	mov	r11, r7
    3f7a:	ce 2e       	mov	r12, r30
    3f7c:	de 2e       	mov	r13, r30
    3f7e:	ee 2e       	mov	r14, r30
    3f80:	fe 2e       	mov	r15, r30
    3f82:	0e 2f       	mov	r16, r30
    3f84:	1e 2f       	mov	r17, r30
    3f86:	0e 94 c0 55 	call	0xab80	; 0xab80 <__adddi3>
    3f8a:	04 e0       	ldi	r16, 0x04	; 4
    3f8c:	0e 94 89 55 	call	0xab12	; 0xab12 <__ashldi3>
    3f90:	b0 90 48 20 	lds	r11, 0x2048	; 0x802048 <g_twi1_gyro_1_accel_facty+0x1>
    3f94:	a0 90 47 20 	lds	r10, 0x2047	; 0x802047 <g_twi1_gyro_1_accel_facty>
    3f98:	1b 2d       	mov	r17, r11
    3f9a:	11 0f       	add	r17, r17
    3f9c:	11 0b       	sbc	r17, r17
    3f9e:	c1 2e       	mov	r12, r17
    3fa0:	d1 2e       	mov	r13, r17
    3fa2:	e1 2e       	mov	r14, r17
    3fa4:	f1 2e       	mov	r15, r17
    3fa6:	01 2f       	mov	r16, r17
    3fa8:	0e 94 6e 54 	call	0xa8dc	; 0xa8dc <__muldi3>
    3fac:	68 94       	set
    3fae:	aa 24       	eor	r10, r10
    3fb0:	a4 f8       	bld	r10, 4
    3fb2:	0f 2e       	mov	r0, r31
    3fb4:	f7 e2       	ldi	r31, 0x27	; 39
    3fb6:	bf 2e       	mov	r11, r31
    3fb8:	f0 2d       	mov	r31, r0
    3fba:	c1 2c       	mov	r12, r1
    3fbc:	d1 2c       	mov	r13, r1
    3fbe:	e1 2c       	mov	r14, r1
    3fc0:	f1 2c       	mov	r15, r1
    3fc2:	00 e0       	ldi	r16, 0x00	; 0
    3fc4:	10 e0       	ldi	r17, 0x00	; 0
    3fc6:	0e 94 c1 54 	call	0xa982	; 0xa982 <__divdi3>
    3fca:	0f e0       	ldi	r16, 0x0F	; 15
    3fcc:	0e 94 a2 55 	call	0xab44	; 0xab44 <__ashrdi3>
    3fd0:	2f a3       	std	Y+39, r18	; 0x27
    3fd2:	38 a7       	std	Y+40, r19	; 0x28
    3fd4:	e8 2d       	mov	r30, r8
    3fd6:	ee 0f       	add	r30, r30
    3fd8:	ee 0b       	sbc	r30, r30
    3fda:	29 2d       	mov	r18, r9
    3fdc:	38 2d       	mov	r19, r8
    3fde:	4e 2f       	mov	r20, r30
    3fe0:	5e 2f       	mov	r21, r30
    3fe2:	6e 2f       	mov	r22, r30
    3fe4:	7e 2f       	mov	r23, r30
    3fe6:	8e 2f       	mov	r24, r30
    3fe8:	9e 2f       	mov	r25, r30
    3fea:	02 e0       	ldi	r16, 0x02	; 2
    3fec:	0e 94 89 55 	call	0xab12	; 0xab12 <__ashldi3>
    3ff0:	a2 2e       	mov	r10, r18
    3ff2:	b3 2e       	mov	r11, r19
    3ff4:	c4 2e       	mov	r12, r20
    3ff6:	d5 2e       	mov	r13, r21
    3ff8:	e6 2e       	mov	r14, r22
    3ffa:	f7 2e       	mov	r15, r23
    3ffc:	a8 2f       	mov	r26, r24
    3ffe:	19 2f       	mov	r17, r25
    4000:	05 e0       	ldi	r16, 0x05	; 5
    4002:	0e 94 89 55 	call	0xab12	; 0xab12 <__ashldi3>
    4006:	0a 2f       	mov	r16, r26
    4008:	0e 94 c9 55 	call	0xab92	; 0xab92 <__subdi3>
    400c:	a9 2c       	mov	r10, r9
    400e:	b8 2c       	mov	r11, r8
    4010:	ce 2e       	mov	r12, r30
    4012:	de 2e       	mov	r13, r30
    4014:	ee 2e       	mov	r14, r30
    4016:	fe 2e       	mov	r15, r30
    4018:	0e 2f       	mov	r16, r30
    401a:	1e 2f       	mov	r17, r30
    401c:	0e 94 c0 55 	call	0xab80	; 0xab80 <__adddi3>
    4020:	04 e0       	ldi	r16, 0x04	; 4
    4022:	0e 94 89 55 	call	0xab12	; 0xab12 <__ashldi3>
    4026:	b0 90 46 20 	lds	r11, 0x2046	; 0x802046 <g_twi1_gyro_1_accel_factz+0x1>
    402a:	a0 90 45 20 	lds	r10, 0x2045	; 0x802045 <g_twi1_gyro_1_accel_factz>
    402e:	1b 2d       	mov	r17, r11
    4030:	11 0f       	add	r17, r17
    4032:	11 0b       	sbc	r17, r17
    4034:	c1 2e       	mov	r12, r17
    4036:	d1 2e       	mov	r13, r17
    4038:	e1 2e       	mov	r14, r17
    403a:	f1 2e       	mov	r15, r17
    403c:	01 2f       	mov	r16, r17
    403e:	0e 94 6e 54 	call	0xa8dc	; 0xa8dc <__muldi3>
    4042:	68 94       	set
    4044:	aa 24       	eor	r10, r10
    4046:	a4 f8       	bld	r10, 4
    4048:	0f 2e       	mov	r0, r31
    404a:	f7 e2       	ldi	r31, 0x27	; 39
    404c:	bf 2e       	mov	r11, r31
    404e:	f0 2d       	mov	r31, r0
    4050:	c1 2c       	mov	r12, r1
    4052:	d1 2c       	mov	r13, r1
    4054:	e1 2c       	mov	r14, r1
    4056:	f1 2c       	mov	r15, r1
    4058:	00 e0       	ldi	r16, 0x00	; 0
    405a:	10 e0       	ldi	r17, 0x00	; 0
    405c:	0e 94 c1 54 	call	0xa982	; 0xa982 <__divdi3>
    4060:	0f e0       	ldi	r16, 0x0F	; 15
    4062:	0e 94 a2 55 	call	0xab44	; 0xab44 <__ashrdi3>
    4066:	12 2f       	mov	r17, r18
    4068:	03 2f       	mov	r16, r19
}

inline
static int32_t calc_gyro1_gyro_raw2mdps(int16_t raw)
{
	return ((1000L * TWI1_SLAVE_GYRO_DTA_1_GYRO_CONFIG__0250DPS) * (int32_t)raw) >> 15;
    406a:	a9 8d       	ldd	r26, Y+25	; 0x19
    406c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    406e:	20 e9       	ldi	r18, 0x90	; 144
    4070:	30 ed       	ldi	r19, 0xD0	; 208
    4072:	43 e0       	ldi	r20, 0x03	; 3
    4074:	50 e0       	ldi	r21, 0x00	; 0
    4076:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <__mulshisi3>
    407a:	9b 01       	movw	r18, r22
    407c:	ac 01       	movw	r20, r24
    407e:	01 2e       	mov	r0, r17
    4080:	1f e0       	ldi	r17, 0x0F	; 15
    4082:	55 95       	asr	r21
    4084:	47 95       	ror	r20
    4086:	37 95       	ror	r19
    4088:	27 95       	ror	r18
    408a:	1a 95       	dec	r17
    408c:	d1 f7       	brne	.-12     	; 0x4082 <task_twi1_onboard+0x314>
    408e:	10 2d       	mov	r17, r0
    4090:	29 8f       	std	Y+25, r18	; 0x19
    4092:	3a 8f       	std	Y+26, r19	; 0x1a
    4094:	4b 8f       	std	Y+27, r20	; 0x1b
    4096:	5c 8f       	std	Y+28, r21	; 0x1c
    4098:	af 8d       	ldd	r26, Y+31	; 0x1f
    409a:	b8 a1       	ldd	r27, Y+32	; 0x20
    409c:	20 e9       	ldi	r18, 0x90	; 144
    409e:	30 ed       	ldi	r19, 0xD0	; 208
    40a0:	43 e0       	ldi	r20, 0x03	; 3
    40a2:	50 e0       	ldi	r21, 0x00	; 0
    40a4:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <__mulshisi3>
    40a8:	9b 01       	movw	r18, r22
    40aa:	ac 01       	movw	r20, r24
    40ac:	01 2e       	mov	r0, r17
    40ae:	1f e0       	ldi	r17, 0x0F	; 15
    40b0:	55 95       	asr	r21
    40b2:	47 95       	ror	r20
    40b4:	37 95       	ror	r19
    40b6:	27 95       	ror	r18
    40b8:	1a 95       	dec	r17
    40ba:	d1 f7       	brne	.-12     	; 0x40b0 <task_twi1_onboard+0x342>
    40bc:	10 2d       	mov	r17, r0
    40be:	2f 8f       	std	Y+31, r18	; 0x1f
    40c0:	38 a3       	std	Y+32, r19	; 0x20
    40c2:	49 a3       	std	Y+33, r20	; 0x21
    40c4:	5a a3       	std	Y+34, r21	; 0x22
    40c6:	ad 89       	ldd	r26, Y+21	; 0x15
    40c8:	be 89       	ldd	r27, Y+22	; 0x16
    40ca:	20 e9       	ldi	r18, 0x90	; 144
    40cc:	30 ed       	ldi	r19, 0xD0	; 208
    40ce:	43 e0       	ldi	r20, 0x03	; 3
    40d0:	50 e0       	ldi	r21, 0x00	; 0
    40d2:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <__mulshisi3>
    40d6:	4b 01       	movw	r8, r22
    40d8:	5c 01       	movw	r10, r24
    40da:	07 2e       	mov	r0, r23
    40dc:	7f e0       	ldi	r23, 0x0F	; 15
    40de:	b5 94       	asr	r11
    40e0:	a7 94       	ror	r10
    40e2:	97 94       	ror	r9
    40e4:	87 94       	ror	r8
    40e6:	7a 95       	dec	r23
    40e8:	d1 f7       	brne	.-12     	; 0x40de <task_twi1_onboard+0x370>
    40ea:	70 2d       	mov	r23, r0
	int16_t l_twi1_gyro_1_accel_y_mg	= calc_gyro1_accel_raw2mg(l_twi1_gyro_1_accel_y, g_twi1_gyro_1_accel_facty);
	int16_t l_twi1_gyro_1_accel_z_mg	= calc_gyro1_accel_raw2mg(l_twi1_gyro_1_accel_z, g_twi1_gyro_1_accel_factz);
	int32_t l_twi1_gyro_1_gyro_x_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_x);
	int32_t l_twi1_gyro_1_gyro_y_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_y);
	int32_t l_twi1_gyro_1_gyro_z_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_z);
	int32_t l_twi1_gyro_2_mag_x_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_x, g_twi1_gyro_2_asax, g_twi1_gyro_2_mag_factx);
    40ec:	a0 91 37 20 	lds	r26, 0x2037	; 0x802037 <g_twi1_gyro_2_mag_factx>
    40f0:	b0 91 38 20 	lds	r27, 0x2038	; 0x802038 <g_twi1_gyro_2_mag_factx+0x1>
    40f4:	e0 91 5f 29 	lds	r30, 0x295F	; 0x80295f <g_twi1_gyro_2_asax>
}

inline
static int32_t calc_gyro2_correct_mag_2_nT(int16_t raw, int8_t asa, int16_t factor)
{
	if (raw >= 0) {
    40f8:	33 20       	and	r3, r3
    40fa:	4c f1       	brlt	.+82     	; 0x414e <task_twi1_onboard+0x3e0>
		//                                         asa decoding
		//                                                            rounding
		//                                                                    /256
		return (((int32_t)raw * factor * ((int32_t)asa + 128) / 10) + 128) >> 8;
    40fc:	91 01       	movw	r18, r2
    40fe:	0e 94 43 54 	call	0xa886	; 0xa886 <__mulhisi3>
    4102:	9b 01       	movw	r18, r22
    4104:	ac 01       	movw	r20, r24
    4106:	8e 2f       	mov	r24, r30
    4108:	ee 0f       	add	r30, r30
    410a:	99 0b       	sbc	r25, r25
    410c:	aa 0b       	sbc	r26, r26
    410e:	bb 0b       	sbc	r27, r27
    4110:	bc 01       	movw	r22, r24
    4112:	cd 01       	movw	r24, r26
    4114:	60 58       	subi	r22, 0x80	; 128
    4116:	7f 4f       	sbci	r23, 0xFF	; 255
    4118:	8f 4f       	sbci	r24, 0xFF	; 255
    411a:	9f 4f       	sbci	r25, 0xFF	; 255
    411c:	0e 94 c7 53 	call	0xa78e	; 0xa78e <__mulsi3>
    4120:	2a e0       	ldi	r18, 0x0A	; 10
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	40 e0       	ldi	r20, 0x00	; 0
    4126:	50 e0       	ldi	r21, 0x00	; 0
    4128:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    412c:	da 01       	movw	r26, r20
    412e:	c9 01       	movw	r24, r18
    4130:	80 58       	subi	r24, 0x80	; 128
    4132:	9f 4f       	sbci	r25, 0xFF	; 255
    4134:	af 4f       	sbci	r26, 0xFF	; 255
    4136:	bf 4f       	sbci	r27, 0xFF	; 255
    4138:	49 2f       	mov	r20, r25
    413a:	5a 2f       	mov	r21, r26
    413c:	6b 2f       	mov	r22, r27
    413e:	77 27       	eor	r23, r23
    4140:	67 fd       	sbrc	r22, 7
    4142:	7a 95       	dec	r23
    4144:	4d 8b       	std	Y+21, r20	; 0x15
    4146:	5e 8b       	std	Y+22, r21	; 0x16
    4148:	6f 8b       	std	Y+23, r22	; 0x17
    414a:	78 8f       	std	Y+24, r23	; 0x18
    414c:	28 c0       	rjmp	.+80     	; 0x419e <task_twi1_onboard+0x430>
	} else {
		return (((int32_t)raw * factor * ((int32_t)asa + 128) / 10) - 128) >> 8;
    414e:	91 01       	movw	r18, r2
    4150:	0e 94 43 54 	call	0xa886	; 0xa886 <__mulhisi3>
    4154:	9b 01       	movw	r18, r22
    4156:	ac 01       	movw	r20, r24
    4158:	8e 2f       	mov	r24, r30
    415a:	ee 0f       	add	r30, r30
    415c:	99 0b       	sbc	r25, r25
    415e:	aa 0b       	sbc	r26, r26
    4160:	bb 0b       	sbc	r27, r27
    4162:	bc 01       	movw	r22, r24
    4164:	cd 01       	movw	r24, r26
    4166:	60 58       	subi	r22, 0x80	; 128
    4168:	7f 4f       	sbci	r23, 0xFF	; 255
    416a:	8f 4f       	sbci	r24, 0xFF	; 255
    416c:	9f 4f       	sbci	r25, 0xFF	; 255
    416e:	0e 94 c7 53 	call	0xa78e	; 0xa78e <__mulsi3>
    4172:	2a e0       	ldi	r18, 0x0A	; 10
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	40 e0       	ldi	r20, 0x00	; 0
    4178:	50 e0       	ldi	r21, 0x00	; 0
    417a:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    417e:	da 01       	movw	r26, r20
    4180:	c9 01       	movw	r24, r18
    4182:	80 58       	subi	r24, 0x80	; 128
    4184:	91 09       	sbc	r25, r1
    4186:	a1 09       	sbc	r26, r1
    4188:	b1 09       	sbc	r27, r1
    418a:	29 2f       	mov	r18, r25
    418c:	3a 2f       	mov	r19, r26
    418e:	4b 2f       	mov	r20, r27
    4190:	55 27       	eor	r21, r21
    4192:	47 fd       	sbrc	r20, 7
    4194:	5a 95       	dec	r21
    4196:	2d 8b       	std	Y+21, r18	; 0x15
    4198:	3e 8b       	std	Y+22, r19	; 0x16
    419a:	4f 8b       	std	Y+23, r20	; 0x17
    419c:	58 8f       	std	Y+24, r21	; 0x18
	int16_t l_twi1_gyro_1_accel_z_mg	= calc_gyro1_accel_raw2mg(l_twi1_gyro_1_accel_z, g_twi1_gyro_1_accel_factz);
	int32_t l_twi1_gyro_1_gyro_x_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_x);
	int32_t l_twi1_gyro_1_gyro_y_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_y);
	int32_t l_twi1_gyro_1_gyro_z_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_z);
	int32_t l_twi1_gyro_2_mag_x_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_x, g_twi1_gyro_2_asax, g_twi1_gyro_2_mag_factx);
	int32_t l_twi1_gyro_2_mag_y_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_y, g_twi1_gyro_2_asay, g_twi1_gyro_2_mag_facty);
    419e:	a0 91 35 20 	lds	r26, 0x2035	; 0x802035 <g_twi1_gyro_2_mag_facty>
    41a2:	b0 91 36 20 	lds	r27, 0x2036	; 0x802036 <g_twi1_gyro_2_mag_facty+0x1>
    41a6:	e0 91 5e 29 	lds	r30, 0x295E	; 0x80295e <g_twi1_gyro_2_asay>
}

inline
static int32_t calc_gyro2_correct_mag_2_nT(int16_t raw, int8_t asa, int16_t factor)
{
	if (raw >= 0) {
    41aa:	55 20       	and	r5, r5
    41ac:	34 f1       	brlt	.+76     	; 0x41fa <task_twi1_onboard+0x48c>
		//                                         asa decoding
		//                                                            rounding
		//                                                                    /256
		return (((int32_t)raw * factor * ((int32_t)asa + 128) / 10) + 128) >> 8;
    41ae:	92 01       	movw	r18, r4
    41b0:	0e 94 43 54 	call	0xa886	; 0xa886 <__mulhisi3>
    41b4:	9b 01       	movw	r18, r22
    41b6:	ac 01       	movw	r20, r24
    41b8:	8e 2f       	mov	r24, r30
    41ba:	ee 0f       	add	r30, r30
    41bc:	99 0b       	sbc	r25, r25
    41be:	aa 0b       	sbc	r26, r26
    41c0:	bb 0b       	sbc	r27, r27
    41c2:	bc 01       	movw	r22, r24
    41c4:	cd 01       	movw	r24, r26
    41c6:	60 58       	subi	r22, 0x80	; 128
    41c8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ca:	8f 4f       	sbci	r24, 0xFF	; 255
    41cc:	9f 4f       	sbci	r25, 0xFF	; 255
    41ce:	0e 94 c7 53 	call	0xa78e	; 0xa78e <__mulsi3>
    41d2:	2a e0       	ldi	r18, 0x0A	; 10
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	40 e0       	ldi	r20, 0x00	; 0
    41d8:	50 e0       	ldi	r21, 0x00	; 0
    41da:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    41de:	29 01       	movw	r4, r18
    41e0:	3a 01       	movw	r6, r20
    41e2:	60 e8       	ldi	r22, 0x80	; 128
    41e4:	46 0e       	add	r4, r22
    41e6:	51 1c       	adc	r5, r1
    41e8:	61 1c       	adc	r6, r1
    41ea:	71 1c       	adc	r7, r1
    41ec:	45 2c       	mov	r4, r5
    41ee:	56 2c       	mov	r5, r6
    41f0:	67 2c       	mov	r6, r7
    41f2:	77 24       	eor	r7, r7
    41f4:	67 fc       	sbrc	r6, 7
    41f6:	7a 94       	dec	r7
    41f8:	25 c0       	rjmp	.+74     	; 0x4244 <task_twi1_onboard+0x4d6>
	} else {
		return (((int32_t)raw * factor * ((int32_t)asa + 128) / 10) - 128) >> 8;
    41fa:	92 01       	movw	r18, r4
    41fc:	0e 94 43 54 	call	0xa886	; 0xa886 <__mulhisi3>
    4200:	9b 01       	movw	r18, r22
    4202:	ac 01       	movw	r20, r24
    4204:	8e 2f       	mov	r24, r30
    4206:	ee 0f       	add	r30, r30
    4208:	99 0b       	sbc	r25, r25
    420a:	aa 0b       	sbc	r26, r26
    420c:	bb 0b       	sbc	r27, r27
    420e:	bc 01       	movw	r22, r24
    4210:	cd 01       	movw	r24, r26
    4212:	60 58       	subi	r22, 0x80	; 128
    4214:	7f 4f       	sbci	r23, 0xFF	; 255
    4216:	8f 4f       	sbci	r24, 0xFF	; 255
    4218:	9f 4f       	sbci	r25, 0xFF	; 255
    421a:	0e 94 c7 53 	call	0xa78e	; 0xa78e <__mulsi3>
    421e:	2a e0       	ldi	r18, 0x0A	; 10
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	40 e0       	ldi	r20, 0x00	; 0
    4224:	50 e0       	ldi	r21, 0x00	; 0
    4226:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    422a:	29 01       	movw	r4, r18
    422c:	3a 01       	movw	r6, r20
    422e:	70 e8       	ldi	r23, 0x80	; 128
    4230:	47 1a       	sub	r4, r23
    4232:	51 08       	sbc	r5, r1
    4234:	61 08       	sbc	r6, r1
    4236:	71 08       	sbc	r7, r1
    4238:	45 2c       	mov	r4, r5
    423a:	56 2c       	mov	r5, r6
    423c:	67 2c       	mov	r6, r7
    423e:	77 24       	eor	r7, r7
    4240:	67 fc       	sbrc	r6, 7
    4242:	7a 94       	dec	r7
	int32_t l_twi1_gyro_1_gyro_x_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_x);
	int32_t l_twi1_gyro_1_gyro_y_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_y);
	int32_t l_twi1_gyro_1_gyro_z_mdps	= calc_gyro1_gyro_raw2mdps(l_twi1_gyro_1_gyro_z);
	int32_t l_twi1_gyro_2_mag_x_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_x, g_twi1_gyro_2_asax, g_twi1_gyro_2_mag_factx);
	int32_t l_twi1_gyro_2_mag_y_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_y, g_twi1_gyro_2_asay, g_twi1_gyro_2_mag_facty);
	int32_t l_twi1_gyro_2_mag_z_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_z, g_twi1_gyro_2_asaz, g_twi1_gyro_2_mag_factz);
    4244:	a0 91 33 20 	lds	r26, 0x2033	; 0x802033 <g_twi1_gyro_2_mag_factz>
    4248:	b0 91 34 20 	lds	r27, 0x2034	; 0x802034 <g_twi1_gyro_2_mag_factz+0x1>
    424c:	e0 91 5d 29 	lds	r30, 0x295D	; 0x80295d <g_twi1_gyro_2_asaz>
}

inline
static int32_t calc_gyro2_correct_mag_2_nT(int16_t raw, int8_t asa, int16_t factor)
{
	if (raw >= 0) {
    4250:	89 89       	ldd	r24, Y+17	; 0x11
    4252:	9a 89       	ldd	r25, Y+18	; 0x12
    4254:	99 23       	and	r25, r25
    4256:	34 f1       	brlt	.+76     	; 0x42a4 <task_twi1_onboard+0x536>
		//                                         asa decoding
		//                                                            rounding
		//                                                                    /256
		return (((int32_t)raw * factor * ((int32_t)asa + 128) / 10) + 128) >> 8;
    4258:	9c 01       	movw	r18, r24
    425a:	0e 94 43 54 	call	0xa886	; 0xa886 <__mulhisi3>
    425e:	9b 01       	movw	r18, r22
    4260:	ac 01       	movw	r20, r24
    4262:	8e 2f       	mov	r24, r30
    4264:	ee 0f       	add	r30, r30
    4266:	99 0b       	sbc	r25, r25
    4268:	aa 0b       	sbc	r26, r26
    426a:	bb 0b       	sbc	r27, r27
    426c:	bc 01       	movw	r22, r24
    426e:	cd 01       	movw	r24, r26
    4270:	60 58       	subi	r22, 0x80	; 128
    4272:	7f 4f       	sbci	r23, 0xFF	; 255
    4274:	8f 4f       	sbci	r24, 0xFF	; 255
    4276:	9f 4f       	sbci	r25, 0xFF	; 255
    4278:	0e 94 c7 53 	call	0xa78e	; 0xa78e <__mulsi3>
    427c:	2a e0       	ldi	r18, 0x0A	; 10
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	40 e0       	ldi	r20, 0x00	; 0
    4282:	50 e0       	ldi	r21, 0x00	; 0
    4284:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    4288:	69 01       	movw	r12, r18
    428a:	7a 01       	movw	r14, r20
    428c:	90 e8       	ldi	r25, 0x80	; 128
    428e:	c9 0e       	add	r12, r25
    4290:	d1 1c       	adc	r13, r1
    4292:	e1 1c       	adc	r14, r1
    4294:	f1 1c       	adc	r15, r1
    4296:	cd 2c       	mov	r12, r13
    4298:	de 2c       	mov	r13, r14
    429a:	ef 2c       	mov	r14, r15
    429c:	ff 24       	eor	r15, r15
    429e:	e7 fc       	sbrc	r14, 7
    42a0:	fa 94       	dec	r15
    42a2:	26 c0       	rjmp	.+76     	; 0x42f0 <task_twi1_onboard+0x582>
	} else {
		return (((int32_t)raw * factor * ((int32_t)asa + 128) / 10) - 128) >> 8;
    42a4:	29 89       	ldd	r18, Y+17	; 0x11
    42a6:	3a 89       	ldd	r19, Y+18	; 0x12
    42a8:	0e 94 43 54 	call	0xa886	; 0xa886 <__mulhisi3>
    42ac:	9b 01       	movw	r18, r22
    42ae:	ac 01       	movw	r20, r24
    42b0:	8e 2f       	mov	r24, r30
    42b2:	ee 0f       	add	r30, r30
    42b4:	99 0b       	sbc	r25, r25
    42b6:	aa 0b       	sbc	r26, r26
    42b8:	bb 0b       	sbc	r27, r27
    42ba:	bc 01       	movw	r22, r24
    42bc:	cd 01       	movw	r24, r26
    42be:	60 58       	subi	r22, 0x80	; 128
    42c0:	7f 4f       	sbci	r23, 0xFF	; 255
    42c2:	8f 4f       	sbci	r24, 0xFF	; 255
    42c4:	9f 4f       	sbci	r25, 0xFF	; 255
    42c6:	0e 94 c7 53 	call	0xa78e	; 0xa78e <__mulsi3>
    42ca:	2a e0       	ldi	r18, 0x0A	; 10
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	40 e0       	ldi	r20, 0x00	; 0
    42d0:	50 e0       	ldi	r21, 0x00	; 0
    42d2:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    42d6:	69 01       	movw	r12, r18
    42d8:	7a 01       	movw	r14, r20
    42da:	a0 e8       	ldi	r26, 0x80	; 128
    42dc:	ca 1a       	sub	r12, r26
    42de:	d1 08       	sbc	r13, r1
    42e0:	e1 08       	sbc	r14, r1
    42e2:	f1 08       	sbc	r15, r1
    42e4:	cd 2c       	mov	r12, r13
    42e6:	de 2c       	mov	r13, r14
    42e8:	ef 2c       	mov	r14, r15
    42ea:	ff 24       	eor	r15, r15
    42ec:	e7 fc       	sbrc	r14, 7
    42ee:	fa 94       	dec	r15
}

inline
static int16_t calc_gyro1_temp_raw2C100(int16_t raw)
{
	return (int16_t) (((100L * (int32_t)(raw - g_twi1_gyro_1_temp_RTofs)) / (int32_t)g_twi1_gyro_1_temp_sens) + 2100);
    42f0:	80 91 81 29 	lds	r24, 0x2981	; 0x802981 <g_twi1_gyro_1_temp_RTofs>
    42f4:	90 91 82 29 	lds	r25, 0x2982	; 0x802982 <g_twi1_gyro_1_temp_RTofs+0x1>
    42f8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    42fa:	be 8d       	ldd	r27, Y+30	; 0x1e
    42fc:	a8 1b       	sub	r26, r24
    42fe:	b9 0b       	sbc	r27, r25
    4300:	24 e6       	ldi	r18, 0x64	; 100
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	0e 94 58 54 	call	0xa8b0	; 0xa8b0 <__usmulhisi3>
    4308:	20 91 51 20 	lds	r18, 0x2051	; 0x802051 <g_twi1_gyro_1_temp_sens>
    430c:	30 91 52 20 	lds	r19, 0x2052	; 0x802052 <g_twi1_gyro_1_temp_sens+0x1>
    4310:	03 2e       	mov	r0, r19
    4312:	00 0c       	add	r0, r0
    4314:	44 0b       	sbc	r20, r20
    4316:	55 0b       	sbc	r21, r21
    4318:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    431c:	2c 5c       	subi	r18, 0xCC	; 204
    431e:	37 4f       	sbci	r19, 0xF7	; 247

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4320:	8f b7       	in	r24, 0x3f	; 63
    4322:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    4324:	f8 94       	cli
	return flags;
    4326:	8b 81       	ldd	r24, Y+3	; 0x03
	int32_t l_twi1_gyro_2_mag_y_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_y, g_twi1_gyro_2_asay, g_twi1_gyro_2_mag_facty);
	int32_t l_twi1_gyro_2_mag_z_nT		= calc_gyro2_correct_mag_2_nT(l_twi1_gyro_2_mag_z, g_twi1_gyro_2_asaz, g_twi1_gyro_2_mag_factz);
	int16_t	l_twi1_gyro_1_temp_deg_100	= calc_gyro1_temp_raw2C100(l_twi1_gyro_1_temp);

	flags = cpu_irq_save();
	g_twi1_gyro_1_accel_x_mg	= l_twi1_gyro_1_accel_x_mg;
    4328:	bd a1       	ldd	r27, Y+37	; 0x25
    432a:	b0 93 77 29 	sts	0x2977, r27	; 0x802977 <g_twi1_gyro_1_accel_x_mg>
    432e:	ee a1       	ldd	r30, Y+38	; 0x26
    4330:	e0 93 78 29 	sts	0x2978, r30	; 0x802978 <g_twi1_gyro_1_accel_x_mg+0x1>
	g_twi1_gyro_1_accel_y_mg	= l_twi1_gyro_1_accel_y_mg;
    4334:	ff a1       	ldd	r31, Y+39	; 0x27
    4336:	f0 93 75 29 	sts	0x2975, r31	; 0x802975 <g_twi1_gyro_1_accel_y_mg>
    433a:	48 a5       	ldd	r20, Y+40	; 0x28
    433c:	40 93 76 29 	sts	0x2976, r20	; 0x802976 <g_twi1_gyro_1_accel_y_mg+0x1>
	g_twi1_gyro_1_accel_z_mg	= l_twi1_gyro_1_accel_z_mg;
    4340:	10 93 73 29 	sts	0x2973, r17	; 0x802973 <g_twi1_gyro_1_accel_z_mg>
    4344:	00 93 74 29 	sts	0x2974, r16	; 0x802974 <g_twi1_gyro_1_accel_z_mg+0x1>
	g_twi1_gyro_1_gyro_x_mdps	= l_twi1_gyro_1_gyro_x_mdps;
    4348:	49 8d       	ldd	r20, Y+25	; 0x19
    434a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    434c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    434e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4350:	40 93 69 29 	sts	0x2969, r20	; 0x802969 <g_twi1_gyro_1_gyro_x_mdps>
    4354:	50 93 6a 29 	sts	0x296A, r21	; 0x80296a <g_twi1_gyro_1_gyro_x_mdps+0x1>
    4358:	60 93 6b 29 	sts	0x296B, r22	; 0x80296b <g_twi1_gyro_1_gyro_x_mdps+0x2>
    435c:	70 93 6c 29 	sts	0x296C, r23	; 0x80296c <g_twi1_gyro_1_gyro_x_mdps+0x3>
	g_twi1_gyro_1_gyro_y_mdps	= l_twi1_gyro_1_gyro_y_mdps;
    4360:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4362:	58 a1       	ldd	r21, Y+32	; 0x20
    4364:	69 a1       	ldd	r22, Y+33	; 0x21
    4366:	7a a1       	ldd	r23, Y+34	; 0x22
    4368:	40 93 65 29 	sts	0x2965, r20	; 0x802965 <g_twi1_gyro_1_gyro_y_mdps>
    436c:	50 93 66 29 	sts	0x2966, r21	; 0x802966 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    4370:	60 93 67 29 	sts	0x2967, r22	; 0x802967 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    4374:	70 93 68 29 	sts	0x2968, r23	; 0x802968 <g_twi1_gyro_1_gyro_y_mdps+0x3>
	g_twi1_gyro_1_gyro_z_mdps	= l_twi1_gyro_1_gyro_z_mdps;
    4378:	80 92 61 29 	sts	0x2961, r8	; 0x802961 <g_twi1_gyro_1_gyro_z_mdps>
    437c:	90 92 62 29 	sts	0x2962, r9	; 0x802962 <g_twi1_gyro_1_gyro_z_mdps+0x1>
    4380:	a0 92 63 29 	sts	0x2963, r10	; 0x802963 <g_twi1_gyro_1_gyro_z_mdps+0x2>
    4384:	b0 92 64 29 	sts	0x2964, r11	; 0x802964 <g_twi1_gyro_1_gyro_z_mdps+0x3>
	g_twi1_gyro_2_mag_x_nT		= l_twi1_gyro_2_mag_x_nT;
    4388:	4d 89       	ldd	r20, Y+21	; 0x15
    438a:	5e 89       	ldd	r21, Y+22	; 0x16
    438c:	6f 89       	ldd	r22, Y+23	; 0x17
    438e:	78 8d       	ldd	r23, Y+24	; 0x18
    4390:	40 93 53 29 	sts	0x2953, r20	; 0x802953 <g_twi1_gyro_2_mag_x_nT>
    4394:	50 93 54 29 	sts	0x2954, r21	; 0x802954 <g_twi1_gyro_2_mag_x_nT+0x1>
    4398:	60 93 55 29 	sts	0x2955, r22	; 0x802955 <g_twi1_gyro_2_mag_x_nT+0x2>
    439c:	70 93 56 29 	sts	0x2956, r23	; 0x802956 <g_twi1_gyro_2_mag_x_nT+0x3>
	g_twi1_gyro_2_mag_y_nT		= l_twi1_gyro_2_mag_y_nT;
    43a0:	40 92 4f 29 	sts	0x294F, r4	; 0x80294f <g_twi1_gyro_2_mag_y_nT>
    43a4:	50 92 50 29 	sts	0x2950, r5	; 0x802950 <g_twi1_gyro_2_mag_y_nT+0x1>
    43a8:	60 92 51 29 	sts	0x2951, r6	; 0x802951 <g_twi1_gyro_2_mag_y_nT+0x2>
    43ac:	70 92 52 29 	sts	0x2952, r7	; 0x802952 <g_twi1_gyro_2_mag_y_nT+0x3>
	g_twi1_gyro_2_mag_z_nT		= l_twi1_gyro_2_mag_z_nT;
    43b0:	c0 92 4b 29 	sts	0x294B, r12	; 0x80294b <g_twi1_gyro_2_mag_z_nT>
    43b4:	d0 92 4c 29 	sts	0x294C, r13	; 0x80294c <g_twi1_gyro_2_mag_z_nT+0x1>
    43b8:	e0 92 4d 29 	sts	0x294D, r14	; 0x80294d <g_twi1_gyro_2_mag_z_nT+0x2>
    43bc:	f0 92 4e 29 	sts	0x294E, r15	; 0x80294e <g_twi1_gyro_2_mag_z_nT+0x3>
	g_twi1_gyro_1_temp_deg_100	= l_twi1_gyro_1_temp_deg_100;
    43c0:	20 93 7f 29 	sts	0x297F, r18	; 0x80297f <g_twi1_gyro_1_temp_deg_100>
    43c4:	30 93 80 29 	sts	0x2980, r19	; 0x802980 <g_twi1_gyro_1_temp_deg_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    43c8:	8f bf       	out	0x3f, r24	; 63

	if (l_twi1_gyro_valid) {
		task_twi1_gyro(now);
	}

	if (l_twi1_baro_valid) {
    43ca:	59 85       	ldd	r21, Y+9	; 0x09
    43cc:	55 23       	and	r21, r21
    43ce:	09 f4       	brne	.+2      	; 0x43d2 <task_twi1_onboard+0x664>
    43d0:	25 c2       	rjmp	.+1098   	; 0x481c <task_twi1_onboard+0xaae>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    43d2:	8f b7       	in	r24, 0x3f	; 63
    43d4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    43d6:	f8 94       	cli
	return flags;
    43d8:	8a 81       	ldd	r24, Y+2	; 0x02
{	// Calculations for the presentation layer
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	irqflags_t flags = cpu_irq_save();
	uint32_t l_twi1_baro_d1 = g_twi1_baro_d1;
    43da:	20 91 34 29 	lds	r18, 0x2934	; 0x802934 <g_twi1_baro_d1>
    43de:	30 91 35 29 	lds	r19, 0x2935	; 0x802935 <g_twi1_baro_d1+0x1>
    43e2:	40 91 36 29 	lds	r20, 0x2936	; 0x802936 <g_twi1_baro_d1+0x2>
    43e6:	50 91 37 29 	lds	r21, 0x2937	; 0x802937 <g_twi1_baro_d1+0x3>
    43ea:	2f 8f       	std	Y+31, r18	; 0x1f
    43ec:	38 a3       	std	Y+32, r19	; 0x20
    43ee:	49 a3       	std	Y+33, r20	; 0x21
    43f0:	5a a3       	std	Y+34, r21	; 0x22
	uint32_t l_twi1_baro_d2 = g_twi1_baro_d2;
    43f2:	40 91 30 29 	lds	r20, 0x2930	; 0x802930 <g_twi1_baro_d2>
    43f6:	50 91 31 29 	lds	r21, 0x2931	; 0x802931 <g_twi1_baro_d2+0x1>
    43fa:	60 91 32 29 	lds	r22, 0x2932	; 0x802932 <g_twi1_baro_d2+0x2>
    43fe:	70 91 33 29 	lds	r23, 0x2933	; 0x802933 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4402:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Baro and Temp values when a different measurement has arrived */
	if ((l_twi1_baro_d1 != s_twi1_baro_d1) || (l_twi1_baro_d2 != s_twi1_baro_d2)) {
    4404:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4406:	98 a1       	ldd	r25, Y+32	; 0x20
    4408:	a9 a1       	ldd	r26, Y+33	; 0x21
    440a:	ba a1       	ldd	r27, Y+34	; 0x22
    440c:	89 2b       	or	r24, r25
    440e:	8a 2b       	or	r24, r26
    4410:	8b 2b       	or	r24, r27
    4412:	31 f4       	brne	.+12     	; 0x4420 <task_twi1_onboard+0x6b2>
    4414:	41 15       	cp	r20, r1
    4416:	51 05       	cpc	r21, r1
    4418:	61 05       	cpc	r22, r1
    441a:	71 05       	cpc	r23, r1
    441c:	09 f4       	brne	.+2      	; 0x4420 <task_twi1_onboard+0x6b2>
    441e:	fe c1       	rjmp	.+1020   	; 0x481c <task_twi1_onboard+0xaae>
		int32_t dT = (int32_t)l_twi1_baro_d2 - ((int32_t)g_twi1_baro_c[5] << 8);
    4420:	0f 2e       	mov	r0, r31
    4422:	f8 e3       	ldi	r31, 0x38	; 56
    4424:	2f 2e       	mov	r2, r31
    4426:	f9 e2       	ldi	r31, 0x29	; 41
    4428:	3f 2e       	mov	r3, r31
    442a:	f0 2d       	mov	r31, r0
		int32_t temp_p20 = (int32_t)(((int64_t)dT * g_twi1_baro_c[6]) >> 23);
    442c:	d1 01       	movw	r26, r2
    442e:	1a 96       	adiw	r26, 0x0a	; 10
    4430:	8d 91       	ld	r24, X+
    4432:	9c 91       	ld	r25, X
    4434:	1b 97       	sbiw	r26, 0x0b	; 11
    4436:	a0 e0       	ldi	r26, 0x00	; 0
    4438:	b0 e0       	ldi	r27, 0x00	; 0
    443a:	ba 2f       	mov	r27, r26
    443c:	a9 2f       	mov	r26, r25
    443e:	98 2f       	mov	r25, r24
    4440:	88 27       	eor	r24, r24
    4442:	2a 01       	movw	r4, r20
    4444:	3b 01       	movw	r6, r22
    4446:	48 1a       	sub	r4, r24
    4448:	59 0a       	sbc	r5, r25
    444a:	6a 0a       	sbc	r6, r26
    444c:	7b 0a       	sbc	r7, r27
    444e:	a3 01       	movw	r20, r6
    4450:	92 01       	movw	r18, r4
    4452:	55 0f       	add	r21, r21
    4454:	22 0b       	sbc	r18, r18
    4456:	32 2f       	mov	r19, r18
    4458:	a9 01       	movw	r20, r18
    445a:	29 87       	std	Y+9, r18	; 0x09
    445c:	3a 87       	std	Y+10, r19	; 0x0a
    445e:	4b 87       	std	Y+11, r20	; 0x0b
    4460:	5c 87       	std	Y+12, r21	; 0x0c
    4462:	d1 01       	movw	r26, r2
    4464:	1c 96       	adiw	r26, 0x0c	; 12
    4466:	4d 91       	ld	r20, X+
    4468:	5c 91       	ld	r21, X
    446a:	1d 97       	sbiw	r26, 0x0d	; 13
    446c:	a4 2c       	mov	r10, r4
    446e:	b5 2c       	mov	r11, r5
    4470:	c6 2c       	mov	r12, r6
    4472:	d7 2c       	mov	r13, r7
    4474:	e9 84       	ldd	r14, Y+9	; 0x09
    4476:	fe 2c       	mov	r15, r14
    4478:	0e 2d       	mov	r16, r14
    447a:	1e 2d       	mov	r17, r14
    447c:	24 2f       	mov	r18, r20
    447e:	35 2f       	mov	r19, r21
    4480:	40 e0       	ldi	r20, 0x00	; 0
    4482:	50 e0       	ldi	r21, 0x00	; 0
    4484:	60 e0       	ldi	r22, 0x00	; 0
    4486:	70 e0       	ldi	r23, 0x00	; 0
    4488:	80 e0       	ldi	r24, 0x00	; 0
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	0e 94 6e 54 	call	0xa8dc	; 0xa8dc <__muldi3>
    4490:	07 e1       	ldi	r16, 0x17	; 23
    4492:	0e 94 a2 55 	call	0xab44	; 0xab44 <__ashrdi3>
    4496:	29 8b       	std	Y+17, r18	; 0x11
    4498:	3a 8b       	std	Y+18, r19	; 0x12
    449a:	4b 8b       	std	Y+19, r20	; 0x13
    449c:	5c 8b       	std	Y+20, r21	; 0x14
    449e:	29 89       	ldd	r18, Y+17	; 0x11
    44a0:	3a 89       	ldd	r19, Y+18	; 0x12
    44a2:	4b 89       	ldd	r20, Y+19	; 0x13
    44a4:	5c 89       	ldd	r21, Y+20	; 0x14
    44a6:	2d a7       	std	Y+45, r18	; 0x2d
    44a8:	3e a7       	std	Y+46, r19	; 0x2e
    44aa:	4f a7       	std	Y+47, r20	; 0x2f
    44ac:	58 ab       	std	Y+48, r21	; 0x30
		int32_t temp = temp_p20 + 2000L;
    44ae:	ba 01       	movw	r22, r20
    44b0:	a9 01       	movw	r20, r18
    44b2:	40 53       	subi	r20, 0x30	; 48
    44b4:	58 4f       	sbci	r21, 0xF8	; 248
    44b6:	6f 4f       	sbci	r22, 0xFF	; 255
    44b8:	7f 4f       	sbci	r23, 0xFF	; 255
    44ba:	49 8f       	std	Y+25, r20	; 0x19
    44bc:	5a 8f       	std	Y+26, r21	; 0x1a
    44be:	6b 8f       	std	Y+27, r22	; 0x1b
    44c0:	7c 8f       	std	Y+28, r23	; 0x1c
		int64_t off  = ((int64_t)g_twi1_baro_c[2] << 17) + (((int64_t)g_twi1_baro_c[4] * dT) >> 6);
    44c2:	d1 01       	movw	r26, r2
    44c4:	18 96       	adiw	r26, 0x08	; 8
    44c6:	4d 91       	ld	r20, X+
    44c8:	5c 91       	ld	r21, X
    44ca:	19 97       	sbiw	r26, 0x09	; 9
    44cc:	fe 2c       	mov	r15, r14
    44ce:	0e 2d       	mov	r16, r14
    44d0:	24 2f       	mov	r18, r20
    44d2:	35 2f       	mov	r19, r21
    44d4:	40 e0       	ldi	r20, 0x00	; 0
    44d6:	50 e0       	ldi	r21, 0x00	; 0
    44d8:	60 e0       	ldi	r22, 0x00	; 0
    44da:	70 e0       	ldi	r23, 0x00	; 0
    44dc:	80 e0       	ldi	r24, 0x00	; 0
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	0e 94 6e 54 	call	0xa8dc	; 0xa8dc <__muldi3>
    44e4:	06 e0       	ldi	r16, 0x06	; 6
    44e6:	0e 94 a2 55 	call	0xab44	; 0xab44 <__ashrdi3>
    44ea:	2d 8b       	std	Y+21, r18	; 0x15
    44ec:	3d 8f       	std	Y+29, r19	; 0x1d
    44ee:	84 2e       	mov	r8, r20
    44f0:	95 2e       	mov	r9, r21
    44f2:	b6 2f       	mov	r27, r22
    44f4:	a7 2f       	mov	r26, r23
    44f6:	8b a3       	std	Y+35, r24	; 0x23
    44f8:	9c a3       	std	Y+36, r25	; 0x24
    44fa:	f1 01       	movw	r30, r2
    44fc:	a4 80       	ldd	r10, Z+4	; 0x04
    44fe:	b5 80       	ldd	r11, Z+5	; 0x05
    4500:	2a 2d       	mov	r18, r10
    4502:	3b 2d       	mov	r19, r11
    4504:	40 e0       	ldi	r20, 0x00	; 0
    4506:	50 e0       	ldi	r21, 0x00	; 0
    4508:	60 e0       	ldi	r22, 0x00	; 0
    450a:	70 e0       	ldi	r23, 0x00	; 0
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	01 e1       	ldi	r16, 0x11	; 17
    4512:	0e 94 89 55 	call	0xab12	; 0xab12 <__ashldi3>
    4516:	a2 2e       	mov	r10, r18
    4518:	b3 2e       	mov	r11, r19
    451a:	c4 2e       	mov	r12, r20
    451c:	d5 2e       	mov	r13, r21
    451e:	e6 2e       	mov	r14, r22
    4520:	f7 2e       	mov	r15, r23
    4522:	08 2f       	mov	r16, r24
    4524:	19 2f       	mov	r17, r25
    4526:	2d 89       	ldd	r18, Y+21	; 0x15
    4528:	3d 8d       	ldd	r19, Y+29	; 0x1d
    452a:	48 2d       	mov	r20, r8
    452c:	59 2d       	mov	r21, r9
    452e:	6b 2f       	mov	r22, r27
    4530:	7a 2f       	mov	r23, r26
    4532:	8b a1       	ldd	r24, Y+35	; 0x23
    4534:	9c a1       	ldd	r25, Y+36	; 0x24
    4536:	0e 94 c0 55 	call	0xab80	; 0xab80 <__adddi3>
    453a:	2d 8b       	std	Y+21, r18	; 0x15
    453c:	3d 8f       	std	Y+29, r19	; 0x1d
    453e:	4d a3       	std	Y+37, r20	; 0x25
    4540:	5e a3       	std	Y+38, r21	; 0x26
    4542:	6f a3       	std	Y+39, r22	; 0x27
    4544:	78 a7       	std	Y+40, r23	; 0x28
    4546:	89 a7       	std	Y+41, r24	; 0x29
    4548:	9a a7       	std	Y+42, r25	; 0x2a
		int64_t sens = ((int64_t)g_twi1_baro_c[1] << 16) + (((int64_t)g_twi1_baro_c[3] * dT) >> 7);
    454a:	46 81       	ldd	r20, Z+6	; 0x06
    454c:	57 81       	ldd	r21, Z+7	; 0x07
    454e:	a4 2c       	mov	r10, r4
    4550:	b5 2c       	mov	r11, r5
    4552:	c6 2c       	mov	r12, r6
    4554:	d7 2c       	mov	r13, r7
    4556:	e9 84       	ldd	r14, Y+9	; 0x09
    4558:	fe 2c       	mov	r15, r14
    455a:	0e 2d       	mov	r16, r14
    455c:	1e 2d       	mov	r17, r14
    455e:	24 2f       	mov	r18, r20
    4560:	35 2f       	mov	r19, r21
    4562:	40 e0       	ldi	r20, 0x00	; 0
    4564:	50 e0       	ldi	r21, 0x00	; 0
    4566:	60 e0       	ldi	r22, 0x00	; 0
    4568:	70 e0       	ldi	r23, 0x00	; 0
    456a:	80 e0       	ldi	r24, 0x00	; 0
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	0e 94 6e 54 	call	0xa8dc	; 0xa8dc <__muldi3>
    4572:	07 e0       	ldi	r16, 0x07	; 7
    4574:	0e 94 a2 55 	call	0xab44	; 0xab44 <__ashrdi3>
    4578:	2b a3       	std	Y+35, r18	; 0x23
    457a:	3c a3       	std	Y+36, r19	; 0x24
    457c:	84 2e       	mov	r8, r20
    457e:	95 2e       	mov	r9, r21
    4580:	b6 2f       	mov	r27, r22
    4582:	a7 2f       	mov	r26, r23
    4584:	8b a7       	std	Y+43, r24	; 0x2b
    4586:	9c a7       	std	Y+44, r25	; 0x2c
    4588:	f1 01       	movw	r30, r2
    458a:	a2 80       	ldd	r10, Z+2	; 0x02
    458c:	b3 80       	ldd	r11, Z+3	; 0x03
    458e:	2a 2d       	mov	r18, r10
    4590:	3b 2d       	mov	r19, r11
    4592:	40 e0       	ldi	r20, 0x00	; 0
    4594:	50 e0       	ldi	r21, 0x00	; 0
    4596:	60 e0       	ldi	r22, 0x00	; 0
    4598:	70 e0       	ldi	r23, 0x00	; 0
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	00 e1       	ldi	r16, 0x10	; 16
    45a0:	0e 94 89 55 	call	0xab12	; 0xab12 <__ashldi3>
    45a4:	a2 2e       	mov	r10, r18
    45a6:	b3 2e       	mov	r11, r19
    45a8:	c4 2e       	mov	r12, r20
    45aa:	d5 2e       	mov	r13, r21
    45ac:	e6 2e       	mov	r14, r22
    45ae:	f7 2e       	mov	r15, r23
    45b0:	08 2f       	mov	r16, r24
    45b2:	19 2f       	mov	r17, r25
    45b4:	2b a1       	ldd	r18, Y+35	; 0x23
    45b6:	3c a1       	ldd	r19, Y+36	; 0x24
    45b8:	48 2d       	mov	r20, r8
    45ba:	59 2d       	mov	r21, r9
    45bc:	6b 2f       	mov	r22, r27
    45be:	7a 2f       	mov	r23, r26
    45c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    45c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    45c4:	0e 94 c0 55 	call	0xab80	; 0xab80 <__adddi3>
    45c8:	32 2e       	mov	r3, r18
    45ca:	23 2e       	mov	r2, r19
    45cc:	4b a3       	std	Y+35, r20	; 0x23
    45ce:	5c a3       	std	Y+36, r21	; 0x24
    45d0:	6b a7       	std	Y+43, r22	; 0x2b
    45d2:	7c a7       	std	Y+44, r23	; 0x2c
    45d4:	98 2e       	mov	r9, r24
    45d6:	89 2e       	mov	r8, r25

		/* Low temp and very low temp corrections */
		if (temp < 2000L) {
    45d8:	29 8d       	ldd	r18, Y+25	; 0x19
    45da:	3a 8d       	ldd	r19, Y+26	; 0x1a
    45dc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    45de:	5c 8d       	ldd	r21, Y+28	; 0x1c
    45e0:	20 3d       	cpi	r18, 0xD0	; 208
    45e2:	37 40       	sbci	r19, 0x07	; 7
    45e4:	41 05       	cpc	r20, r1
    45e6:	51 05       	cpc	r21, r1
    45e8:	0c f0       	brlt	.+2      	; 0x45ec <task_twi1_onboard+0x87e>
    45ea:	d0 c0       	rjmp	.+416    	; 0x478c <task_twi1_onboard+0xa1e>
			int32_t t2 = (int32_t)(((int64_t)dT * (int64_t)dT) >> 31);
    45ec:	a4 2c       	mov	r10, r4
    45ee:	b5 2c       	mov	r11, r5
    45f0:	c6 2c       	mov	r12, r6
    45f2:	d7 2c       	mov	r13, r7
    45f4:	e9 84       	ldd	r14, Y+9	; 0x09
    45f6:	fe 2c       	mov	r15, r14
    45f8:	0e 2d       	mov	r16, r14
    45fa:	1e 2d       	mov	r17, r14
    45fc:	24 2d       	mov	r18, r4
    45fe:	35 2d       	mov	r19, r5
    4600:	46 2d       	mov	r20, r6
    4602:	57 2d       	mov	r21, r7
    4604:	60 2f       	mov	r22, r16
    4606:	70 2f       	mov	r23, r16
    4608:	80 2f       	mov	r24, r16
    460a:	9e 2d       	mov	r25, r14
    460c:	0e 94 6e 54 	call	0xa8dc	; 0xa8dc <__muldi3>
    4610:	0f e1       	ldi	r16, 0x1F	; 31
    4612:	0e 94 a2 55 	call	0xab44	; 0xab44 <__ashrdi3>
    4616:	29 87       	std	Y+9, r18	; 0x09
    4618:	3a 87       	std	Y+10, r19	; 0x0a
    461a:	4b 87       	std	Y+11, r20	; 0x0b
    461c:	5c 87       	std	Y+12, r21	; 0x0c
			int32_t temp_p20_2 = temp_p20 * temp_p20;
    461e:	29 89       	ldd	r18, Y+17	; 0x11
    4620:	3a 89       	ldd	r19, Y+18	; 0x12
    4622:	4b 89       	ldd	r20, Y+19	; 0x13
    4624:	5c 89       	ldd	r21, Y+20	; 0x14
    4626:	ca 01       	movw	r24, r20
    4628:	b9 01       	movw	r22, r18
    462a:	0e 94 c7 53 	call	0xa78e	; 0xa78e <__mulsi3>
    462e:	2b 01       	movw	r4, r22
    4630:	3c 01       	movw	r6, r24
			int32_t off2 = (61 * temp_p20_2) >> 4;
    4632:	ad e3       	ldi	r26, 0x3D	; 61
    4634:	b0 e0       	ldi	r27, 0x00	; 0
    4636:	9b 01       	movw	r18, r22
    4638:	ac 01       	movw	r20, r24
    463a:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__muluhisi3>
    463e:	7b 01       	movw	r14, r22
    4640:	8c 01       	movw	r16, r24
    4642:	68 94       	set
    4644:	13 f8       	bld	r1, 3
    4646:	15 95       	asr	r17
    4648:	07 95       	ror	r16
    464a:	f7 94       	ror	r15
    464c:	e7 94       	ror	r14
    464e:	16 94       	lsr	r1
    4650:	d1 f7       	brne	.-12     	; 0x4646 <task_twi1_onboard+0x8d8>
			int32_t sens2 = temp_p20_2 << 1;
    4652:	44 0c       	add	r4, r4
    4654:	55 1c       	adc	r5, r5
    4656:	66 1c       	adc	r6, r6
    4658:	77 1c       	adc	r7, r7

			if (temp < -1500L) {
    465a:	89 8d       	ldd	r24, Y+25	; 0x19
    465c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    465e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4660:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4662:	84 32       	cpi	r24, 0x24	; 36
    4664:	9a 4f       	sbci	r25, 0xFA	; 250
    4666:	af 4f       	sbci	r26, 0xFF	; 255
    4668:	bf 4f       	sbci	r27, 0xFF	; 255
    466a:	c4 f5       	brge	.+112    	; 0x46dc <task_twi1_onboard+0x96e>
				int32_t temp_m15 = temp + 1500L;
    466c:	6d a5       	ldd	r22, Y+45	; 0x2d
    466e:	7e a5       	ldd	r23, Y+46	; 0x2e
    4670:	8f a5       	ldd	r24, Y+47	; 0x2f
    4672:	98 a9       	ldd	r25, Y+48	; 0x30
    4674:	64 55       	subi	r22, 0x54	; 84
    4676:	72 4f       	sbci	r23, 0xF2	; 242
    4678:	8f 4f       	sbci	r24, 0xFF	; 255
    467a:	9f 4f       	sbci	r25, 0xFF	; 255
				int32_t temp_m15_2 = temp_m15 * temp_m15;
    467c:	9b 01       	movw	r18, r22
    467e:	ac 01       	movw	r20, r24
    4680:	0e 94 c7 53 	call	0xa78e	; 0xa78e <__mulsi3>
				off2  += 15 * temp_m15_2;
    4684:	9b 01       	movw	r18, r22
    4686:	ac 01       	movw	r20, r24
    4688:	22 0f       	add	r18, r18
    468a:	33 1f       	adc	r19, r19
    468c:	44 1f       	adc	r20, r20
    468e:	55 1f       	adc	r21, r21
    4690:	dc 01       	movw	r26, r24
    4692:	cb 01       	movw	r24, r22
    4694:	82 0f       	add	r24, r18
    4696:	93 1f       	adc	r25, r19
    4698:	a4 1f       	adc	r26, r20
    469a:	b5 1f       	adc	r27, r21
    469c:	5c 01       	movw	r10, r24
    469e:	6d 01       	movw	r12, r26
    46a0:	aa 0c       	add	r10, r10
    46a2:	bb 1c       	adc	r11, r11
    46a4:	cc 1c       	adc	r12, r12
    46a6:	dd 1c       	adc	r13, r13
    46a8:	aa 0c       	add	r10, r10
    46aa:	bb 1c       	adc	r11, r11
    46ac:	cc 1c       	adc	r12, r12
    46ae:	dd 1c       	adc	r13, r13
    46b0:	8a 0d       	add	r24, r10
    46b2:	9b 1d       	adc	r25, r11
    46b4:	ac 1d       	adc	r26, r12
    46b6:	bd 1d       	adc	r27, r13
    46b8:	e8 0e       	add	r14, r24
    46ba:	f9 1e       	adc	r15, r25
    46bc:	0a 1f       	adc	r16, r26
    46be:	1b 1f       	adc	r17, r27
				sens2 +=  8 * temp_m15_2;
    46c0:	da 01       	movw	r26, r20
    46c2:	c9 01       	movw	r24, r18
    46c4:	88 0f       	add	r24, r24
    46c6:	99 1f       	adc	r25, r25
    46c8:	aa 1f       	adc	r26, r26
    46ca:	bb 1f       	adc	r27, r27
    46cc:	88 0f       	add	r24, r24
    46ce:	99 1f       	adc	r25, r25
    46d0:	aa 1f       	adc	r26, r26
    46d2:	bb 1f       	adc	r27, r27
    46d4:	48 0e       	add	r4, r24
    46d6:	59 1e       	adc	r5, r25
    46d8:	6a 1e       	adc	r6, r26
    46da:	7b 1e       	adc	r7, r27
			}
			temp -= t2;
    46dc:	29 8d       	ldd	r18, Y+25	; 0x19
    46de:	3a 8d       	ldd	r19, Y+26	; 0x1a
    46e0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    46e2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    46e4:	69 85       	ldd	r22, Y+9	; 0x09
    46e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    46e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    46ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    46ec:	26 1b       	sub	r18, r22
    46ee:	37 0b       	sbc	r19, r23
    46f0:	48 0b       	sbc	r20, r24
    46f2:	59 0b       	sbc	r21, r25
    46f4:	29 8f       	std	Y+25, r18	; 0x19
    46f6:	3a 8f       	std	Y+26, r19	; 0x1a
    46f8:	4b 8f       	std	Y+27, r20	; 0x1b
    46fa:	5c 8f       	std	Y+28, r21	; 0x1c
			off  -= off2;
    46fc:	d8 01       	movw	r26, r16
    46fe:	c7 01       	movw	r24, r14
    4700:	bb 0f       	add	r27, r27
    4702:	88 0b       	sbc	r24, r24
    4704:	98 2f       	mov	r25, r24
    4706:	dc 01       	movw	r26, r24
    4708:	89 87       	std	Y+9, r24	; 0x09
    470a:	9a 87       	std	Y+10, r25	; 0x0a
    470c:	ab 87       	std	Y+11, r26	; 0x0b
    470e:	bc 87       	std	Y+12, r27	; 0x0c
    4710:	2d 89       	ldd	r18, Y+21	; 0x15
    4712:	3d 8d       	ldd	r19, Y+29	; 0x1d
    4714:	4d a1       	ldd	r20, Y+37	; 0x25
    4716:	5e a1       	ldd	r21, Y+38	; 0x26
    4718:	6f a1       	ldd	r22, Y+39	; 0x27
    471a:	78 a5       	ldd	r23, Y+40	; 0x28
    471c:	89 a5       	ldd	r24, Y+41	; 0x29
    471e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4720:	ae 2c       	mov	r10, r14
    4722:	bf 2c       	mov	r11, r15
    4724:	c0 2e       	mov	r12, r16
    4726:	d1 2e       	mov	r13, r17
    4728:	e9 84       	ldd	r14, Y+9	; 0x09
    472a:	fe 2c       	mov	r15, r14
    472c:	0e 2d       	mov	r16, r14
    472e:	1e 2d       	mov	r17, r14
    4730:	0e 94 c9 55 	call	0xab92	; 0xab92 <__subdi3>
    4734:	2d 8b       	std	Y+21, r18	; 0x15
    4736:	3d 8f       	std	Y+29, r19	; 0x1d
    4738:	4d a3       	std	Y+37, r20	; 0x25
    473a:	5e a3       	std	Y+38, r21	; 0x26
    473c:	6f a3       	std	Y+39, r22	; 0x27
    473e:	78 a7       	std	Y+40, r23	; 0x28
    4740:	89 a7       	std	Y+41, r24	; 0x29
    4742:	9a a7       	std	Y+42, r25	; 0x2a
			sens -= sens2;
    4744:	a3 01       	movw	r20, r6
    4746:	92 01       	movw	r18, r4
    4748:	55 0f       	add	r21, r21
    474a:	22 0b       	sbc	r18, r18
    474c:	32 2f       	mov	r19, r18
    474e:	a9 01       	movw	r20, r18
    4750:	29 87       	std	Y+9, r18	; 0x09
    4752:	3a 87       	std	Y+10, r19	; 0x0a
    4754:	4b 87       	std	Y+11, r20	; 0x0b
    4756:	5c 87       	std	Y+12, r21	; 0x0c
    4758:	23 2d       	mov	r18, r3
    475a:	32 2d       	mov	r19, r2
    475c:	4b a1       	ldd	r20, Y+35	; 0x23
    475e:	5c a1       	ldd	r21, Y+36	; 0x24
    4760:	6b a5       	ldd	r22, Y+43	; 0x2b
    4762:	7c a5       	ldd	r23, Y+44	; 0x2c
    4764:	89 2d       	mov	r24, r9
    4766:	98 2d       	mov	r25, r8
    4768:	a4 2c       	mov	r10, r4
    476a:	b5 2c       	mov	r11, r5
    476c:	c6 2c       	mov	r12, r6
    476e:	d7 2c       	mov	r13, r7
    4770:	e9 84       	ldd	r14, Y+9	; 0x09
    4772:	fe 2c       	mov	r15, r14
    4774:	0e 2d       	mov	r16, r14
    4776:	1e 2d       	mov	r17, r14
    4778:	0e 94 c9 55 	call	0xab92	; 0xab92 <__subdi3>
    477c:	32 2e       	mov	r3, r18
    477e:	23 2e       	mov	r2, r19
    4780:	4b a3       	std	Y+35, r20	; 0x23
    4782:	5c a3       	std	Y+36, r21	; 0x24
    4784:	6b a7       	std	Y+43, r22	; 0x2b
    4786:	7c a7       	std	Y+44, r23	; 0x2c
    4788:	98 2e       	mov	r9, r24
    478a:	89 2e       	mov	r8, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    478c:	8f b7       	in	r24, 0x3f	; 63
    478e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4790:	f8 94       	cli
	return flags;
    4792:	79 80       	ldd	r7, Y+1	; 0x01
		}
		int32_t p = (int32_t)((((l_twi1_baro_d1 * sens) >> 21) - off) >> 15);

		flags = cpu_irq_save();
		g_twi1_baro_temp_100 = temp;
    4794:	49 8d       	ldd	r20, Y+25	; 0x19
    4796:	5a 8d       	ldd	r21, Y+26	; 0x1a
    4798:	6b 8d       	ldd	r22, Y+27	; 0x1b
    479a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    479c:	40 93 2c 29 	sts	0x292C, r20	; 0x80292c <g_twi1_baro_temp_100>
    47a0:	50 93 2d 29 	sts	0x292D, r21	; 0x80292d <g_twi1_baro_temp_100+0x1>
    47a4:	60 93 2e 29 	sts	0x292E, r22	; 0x80292e <g_twi1_baro_temp_100+0x2>
    47a8:	70 93 2f 29 	sts	0x292F, r23	; 0x80292f <g_twi1_baro_temp_100+0x3>
		g_twi1_baro_p_100    = p;
    47ac:	4f 8d       	ldd	r20, Y+31	; 0x1f
    47ae:	58 a1       	ldd	r21, Y+32	; 0x20
    47b0:	69 a1       	ldd	r22, Y+33	; 0x21
    47b2:	7a a1       	ldd	r23, Y+34	; 0x22
    47b4:	9a 01       	movw	r18, r20
    47b6:	ab 01       	movw	r20, r22
    47b8:	60 e0       	ldi	r22, 0x00	; 0
    47ba:	70 e0       	ldi	r23, 0x00	; 0
    47bc:	cb 01       	movw	r24, r22
    47be:	29 87       	std	Y+9, r18	; 0x09
    47c0:	3a 87       	std	Y+10, r19	; 0x0a
    47c2:	4b 87       	std	Y+11, r20	; 0x0b
    47c4:	5c 87       	std	Y+12, r21	; 0x0c
    47c6:	6d 87       	std	Y+13, r22	; 0x0d
    47c8:	7e 87       	std	Y+14, r23	; 0x0e
    47ca:	8f 87       	std	Y+15, r24	; 0x0f
    47cc:	98 8b       	std	Y+16, r25	; 0x10
    47ce:	a3 2c       	mov	r10, r3
    47d0:	b2 2c       	mov	r11, r2
    47d2:	cb a0       	ldd	r12, Y+35	; 0x23
    47d4:	dc a0       	ldd	r13, Y+36	; 0x24
    47d6:	eb a4       	ldd	r14, Y+43	; 0x2b
    47d8:	fc a4       	ldd	r15, Y+44	; 0x2c
    47da:	09 2d       	mov	r16, r9
    47dc:	18 2d       	mov	r17, r8
    47de:	60 e0       	ldi	r22, 0x00	; 0
    47e0:	70 e0       	ldi	r23, 0x00	; 0
    47e2:	80 e0       	ldi	r24, 0x00	; 0
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	0e 94 6e 54 	call	0xa8dc	; 0xa8dc <__muldi3>
    47ea:	05 e1       	ldi	r16, 0x15	; 21
    47ec:	0e 94 a2 55 	call	0xab44	; 0xab44 <__ashrdi3>
    47f0:	ad 88       	ldd	r10, Y+21	; 0x15
    47f2:	bd 8c       	ldd	r11, Y+29	; 0x1d
    47f4:	cd a0       	ldd	r12, Y+37	; 0x25
    47f6:	de a0       	ldd	r13, Y+38	; 0x26
    47f8:	ef a0       	ldd	r14, Y+39	; 0x27
    47fa:	f8 a4       	ldd	r15, Y+40	; 0x28
    47fc:	09 a5       	ldd	r16, Y+41	; 0x29
    47fe:	1a a5       	ldd	r17, Y+42	; 0x2a
    4800:	0e 94 c9 55 	call	0xab92	; 0xab92 <__subdi3>
    4804:	0f e0       	ldi	r16, 0x0F	; 15
    4806:	0e 94 a2 55 	call	0xab44	; 0xab44 <__ashrdi3>
    480a:	20 93 28 29 	sts	0x2928, r18	; 0x802928 <g_twi1_baro_p_100>
    480e:	30 93 29 29 	sts	0x2929, r19	; 0x802929 <g_twi1_baro_p_100+0x1>
    4812:	40 93 2a 29 	sts	0x292A, r20	; 0x80292a <g_twi1_baro_p_100+0x2>
    4816:	50 93 2b 29 	sts	0x292B, r21	; 0x80292b <g_twi1_baro_p_100+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    481a:	7f be       	out	0x3f, r7	; 63
	}

	if (l_twi1_baro_valid) {
		task_twi1_baro(now);
	}
}
    481c:	e0 96       	adiw	r28, 0x30	; 48
    481e:	cd bf       	out	0x3d, r28	; 61
    4820:	de bf       	out	0x3e, r29	; 62
    4822:	df 91       	pop	r29
    4824:	cf 91       	pop	r28
    4826:	1f 91       	pop	r17
    4828:	0f 91       	pop	r16
    482a:	ff 90       	pop	r15
    482c:	ef 90       	pop	r14
    482e:	df 90       	pop	r13
    4830:	cf 90       	pop	r12
    4832:	bf 90       	pop	r11
    4834:	af 90       	pop	r10
    4836:	9f 90       	pop	r9
    4838:	8f 90       	pop	r8
    483a:	7f 90       	pop	r7
    483c:	6f 90       	pop	r6
    483e:	5f 90       	pop	r5
    4840:	4f 90       	pop	r4
    4842:	3f 90       	pop	r3
    4844:	2f 90       	pop	r2
    4846:	08 95       	ret

00004848 <task_twi2_lcd>:
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

/* TWI2 - LCD Port */
void task_twi2_lcd(uint32_t now)
{
    4848:	2f 92       	push	r2
    484a:	3f 92       	push	r3
    484c:	4f 92       	push	r4
    484e:	5f 92       	push	r5
    4850:	6f 92       	push	r6
    4852:	7f 92       	push	r7
    4854:	8f 92       	push	r8
    4856:	9f 92       	push	r9
    4858:	af 92       	push	r10
    485a:	bf 92       	push	r11
    485c:	cf 92       	push	r12
    485e:	df 92       	push	r13
    4860:	ef 92       	push	r14
    4862:	ff 92       	push	r15
    4864:	0f 93       	push	r16
    4866:	1f 93       	push	r17
    4868:	cf 93       	push	r28
    486a:	df 93       	push	r29
    486c:	cd b7       	in	r28, 0x3d	; 61
    486e:	de b7       	in	r29, 0x3e	; 62
    4870:	ad 97       	sbiw	r28, 0x2d	; 45
    4872:	cd bf       	out	0x3d, r28	; 61
    4874:	de bf       	out	0x3e, r29	; 62
	static uint16_t s_lcd_entry_cnt =  0U;
	static uint32_t s_lcd_last		= 0UL;

	if (g_twi2_lcd_version >= 0x11) {
    4876:	20 91 1d 29 	lds	r18, 0x291D	; 0x80291d <g_twi2_lcd_version>
    487a:	21 31       	cpi	r18, 0x11	; 17
    487c:	08 f4       	brcc	.+2      	; 0x4880 <task_twi2_lcd+0x38>
    487e:	d2 c3       	rjmp	.+1956   	; 0x5024 <task_twi2_lcd+0x7dc>
		//static uint8_t s_ofs = 0;

		/* Show current measurement data on the LCD */
		if (((now - s_lcd_last) >= 128) || (now < s_lcd_last)) {
    4880:	c0 90 8c 26 	lds	r12, 0x268C	; 0x80268c <s_lcd_last.7641>
    4884:	d0 90 8d 26 	lds	r13, 0x268D	; 0x80268d <s_lcd_last.7641+0x1>
    4888:	e0 90 8e 26 	lds	r14, 0x268E	; 0x80268e <s_lcd_last.7641+0x2>
    488c:	f0 90 8f 26 	lds	r15, 0x268F	; 0x80268f <s_lcd_last.7641+0x3>
    4890:	8b 01       	movw	r16, r22
    4892:	9c 01       	movw	r18, r24
    4894:	0c 19       	sub	r16, r12
    4896:	1d 09       	sbc	r17, r13
    4898:	2e 09       	sbc	r18, r14
    489a:	3f 09       	sbc	r19, r15
    489c:	00 38       	cpi	r16, 0x80	; 128
    489e:	11 05       	cpc	r17, r1
    48a0:	21 05       	cpc	r18, r1
    48a2:	31 05       	cpc	r19, r1
    48a4:	30 f4       	brcc	.+12     	; 0x48b2 <task_twi2_lcd+0x6a>
    48a6:	6c 15       	cp	r22, r12
    48a8:	7d 05       	cpc	r23, r13
    48aa:	8e 05       	cpc	r24, r14
    48ac:	9f 05       	cpc	r25, r15
    48ae:	08 f0       	brcs	.+2      	; 0x48b2 <task_twi2_lcd+0x6a>
    48b0:	d8 c3       	rjmp	.+1968   	; 0x5062 <task_twi2_lcd+0x81a>
			const uint8_t col_left = 6 * 10;
			uint8_t line = 2;

			s_lcd_last = now;
    48b2:	60 93 8c 26 	sts	0x268C, r22	; 0x80268c <s_lcd_last.7641>
    48b6:	70 93 8d 26 	sts	0x268D, r23	; 0x80268d <s_lcd_last.7641+0x1>
    48ba:	80 93 8e 26 	sts	0x268E, r24	; 0x80268e <s_lcd_last.7641+0x2>
    48be:	90 93 8f 26 	sts	0x268F, r25	; 0x80268f <s_lcd_last.7641+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    48c2:	8f b7       	in	r24, 0x3f	; 63
    48c4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    48c6:	f8 94       	cli
	return flags;
    48c8:	89 81       	ldd	r24, Y+1	; 0x01

			/* Get up-to-date global data */
			irqflags_t flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000		= g_adc_vctcxo_volt_1000;
    48ca:	20 91 b3 28 	lds	r18, 0x28B3	; 0x8028b3 <g_adc_vctcxo_volt_1000>
    48ce:	30 91 b4 28 	lds	r19, 0x28B4	; 0x8028b4 <g_adc_vctcxo_volt_1000+0x1>
    48d2:	2a 83       	std	Y+2, r18	; 0x02
    48d4:	3b 83       	std	Y+3, r19	; 0x03
			int16_t l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    48d6:	40 91 b1 28 	lds	r20, 0x28B1	; 0x8028b1 <g_adc_5v0_volt_1000>
    48da:	50 91 b2 28 	lds	r21, 0x28B2	; 0x8028b2 <g_adc_5v0_volt_1000+0x1>
    48de:	4e 83       	std	Y+6, r20	; 0x06
    48e0:	5f 83       	std	Y+7, r21	; 0x07
			int16_t l_adc_vbat_volt_1000		= g_adc_vbat_volt_1000;
    48e2:	e0 91 af 28 	lds	r30, 0x28AF	; 0x8028af <g_adc_vbat_volt_1000>
    48e6:	f0 91 b0 28 	lds	r31, 0x28B0	; 0x8028b0 <g_adc_vbat_volt_1000+0x1>
    48ea:	ea 87       	std	Y+10, r30	; 0x0a
    48ec:	fb 87       	std	Y+11, r31	; 0x0b
			int16_t l_adc_temp_deg_100			= g_adc_temp_deg_100;
    48ee:	e0 90 a7 28 	lds	r14, 0x28A7	; 0x8028a7 <g_adc_temp_deg_100>
    48f2:	f0 90 a8 28 	lds	r15, 0x28A8	; 0x8028a8 <g_adc_temp_deg_100+0x1>
			int16_t l_adc_io_adc4_volt_1000		= g_adc_io_adc4_volt_1000;
    48f6:	20 91 ad 28 	lds	r18, 0x28AD	; 0x8028ad <g_adc_io_adc4_volt_1000>
    48fa:	30 91 ae 28 	lds	r19, 0x28AE	; 0x8028ae <g_adc_io_adc4_volt_1000+0x1>
    48fe:	2c 87       	std	Y+12, r18	; 0x0c
    4900:	3d 87       	std	Y+13, r19	; 0x0d
			int16_t l_adc_io_adc5_volt_1000		= g_adc_io_adc5_volt_1000;
    4902:	c0 90 ab 28 	lds	r12, 0x28AB	; 0x8028ab <g_adc_io_adc5_volt_1000>
    4906:	d0 90 ac 28 	lds	r13, 0x28AC	; 0x8028ac <g_adc_io_adc5_volt_1000+0x1>
			//int16_t l_adc_silence_volt_1000	= g_adc_silence_volt_1000;
			int32_t l_twi1_baro_temp_100		= g_twi1_baro_temp_100;
    490a:	80 90 2c 29 	lds	r8, 0x292C	; 0x80292c <g_twi1_baro_temp_100>
    490e:	90 90 2d 29 	lds	r9, 0x292D	; 0x80292d <g_twi1_baro_temp_100+0x1>
    4912:	a0 90 2e 29 	lds	r10, 0x292E	; 0x80292e <g_twi1_baro_temp_100+0x2>
    4916:	b0 90 2f 29 	lds	r11, 0x292F	; 0x80292f <g_twi1_baro_temp_100+0x3>
			int32_t l_twi1_baro_p_100			= g_twi1_baro_p_100;
    491a:	20 91 28 29 	lds	r18, 0x2928	; 0x802928 <g_twi1_baro_p_100>
    491e:	30 91 29 29 	lds	r19, 0x2929	; 0x802929 <g_twi1_baro_p_100+0x1>
    4922:	40 91 2a 29 	lds	r20, 0x292A	; 0x80292a <g_twi1_baro_p_100+0x2>
    4926:	50 91 2b 29 	lds	r21, 0x292B	; 0x80292b <g_twi1_baro_p_100+0x3>
    492a:	2e 87       	std	Y+14, r18	; 0x0e
    492c:	3f 87       	std	Y+15, r19	; 0x0f
    492e:	48 8b       	std	Y+16, r20	; 0x10
    4930:	59 8b       	std	Y+17, r21	; 0x11
			int16_t l_twi1_hygro_T_100			= g_twi1_hygro_T_100;
    4932:	40 91 20 29 	lds	r20, 0x2920	; 0x802920 <g_twi1_hygro_T_100>
    4936:	50 91 21 29 	lds	r21, 0x2921	; 0x802921 <g_twi1_hygro_T_100+0x1>
    493a:	4a 8b       	std	Y+18, r20	; 0x12
    493c:	5b 8b       	std	Y+19, r21	; 0x13
			int16_t l_twi1_hygro_RH_100			= g_twi1_hygro_RH_100;
    493e:	e0 91 1e 29 	lds	r30, 0x291E	; 0x80291e <g_twi1_hygro_RH_100>
    4942:	f0 91 1f 29 	lds	r31, 0x291F	; 0x80291f <g_twi1_hygro_RH_100+0x1>
    4946:	ec 8b       	std	Y+20, r30	; 0x14
    4948:	fd 8b       	std	Y+21, r31	; 0x15
			int16_t l_twi1_gyro_1_accel_x_mg	= g_twi1_gyro_1_accel_x_mg;
    494a:	20 91 77 29 	lds	r18, 0x2977	; 0x802977 <g_twi1_gyro_1_accel_x_mg>
    494e:	30 91 78 29 	lds	r19, 0x2978	; 0x802978 <g_twi1_gyro_1_accel_x_mg+0x1>
    4952:	2e 8b       	std	Y+22, r18	; 0x16
    4954:	3f 8b       	std	Y+23, r19	; 0x17
			int16_t l_twi1_gyro_1_accel_y_mg	= g_twi1_gyro_1_accel_y_mg;
    4956:	40 91 75 29 	lds	r20, 0x2975	; 0x802975 <g_twi1_gyro_1_accel_y_mg>
    495a:	50 91 76 29 	lds	r21, 0x2976	; 0x802976 <g_twi1_gyro_1_accel_y_mg+0x1>
    495e:	48 8f       	std	Y+24, r20	; 0x18
    4960:	59 8f       	std	Y+25, r21	; 0x19
			int16_t l_twi1_gyro_1_accel_z_mg	= g_twi1_gyro_1_accel_z_mg;
    4962:	20 90 73 29 	lds	r2, 0x2973	; 0x802973 <g_twi1_gyro_1_accel_z_mg>
    4966:	30 90 74 29 	lds	r3, 0x2974	; 0x802974 <g_twi1_gyro_1_accel_z_mg+0x1>
			int32_t l_twi1_gyro_1_gyro_x_mdps	= g_twi1_gyro_1_gyro_x_mdps;
    496a:	20 91 69 29 	lds	r18, 0x2969	; 0x802969 <g_twi1_gyro_1_gyro_x_mdps>
    496e:	30 91 6a 29 	lds	r19, 0x296A	; 0x80296a <g_twi1_gyro_1_gyro_x_mdps+0x1>
    4972:	40 91 6b 29 	lds	r20, 0x296B	; 0x80296b <g_twi1_gyro_1_gyro_x_mdps+0x2>
    4976:	50 91 6c 29 	lds	r21, 0x296C	; 0x80296c <g_twi1_gyro_1_gyro_x_mdps+0x3>
    497a:	2a 8f       	std	Y+26, r18	; 0x1a
    497c:	3b 8f       	std	Y+27, r19	; 0x1b
    497e:	4c 8f       	std	Y+28, r20	; 0x1c
    4980:	5d 8f       	std	Y+29, r21	; 0x1d
			int32_t l_twi1_gyro_1_gyro_y_mdps	= g_twi1_gyro_1_gyro_y_mdps;
    4982:	20 91 65 29 	lds	r18, 0x2965	; 0x802965 <g_twi1_gyro_1_gyro_y_mdps>
    4986:	30 91 66 29 	lds	r19, 0x2966	; 0x802966 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    498a:	40 91 67 29 	lds	r20, 0x2967	; 0x802967 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    498e:	50 91 68 29 	lds	r21, 0x2968	; 0x802968 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    4992:	2e 8f       	std	Y+30, r18	; 0x1e
    4994:	3f 8f       	std	Y+31, r19	; 0x1f
    4996:	48 a3       	std	Y+32, r20	; 0x20
    4998:	59 a3       	std	Y+33, r21	; 0x21
			int32_t l_twi1_gyro_1_gyro_z_mdps	= g_twi1_gyro_1_gyro_z_mdps;
    499a:	40 90 61 29 	lds	r4, 0x2961	; 0x802961 <g_twi1_gyro_1_gyro_z_mdps>
    499e:	50 90 62 29 	lds	r5, 0x2962	; 0x802962 <g_twi1_gyro_1_gyro_z_mdps+0x1>
    49a2:	60 90 63 29 	lds	r6, 0x2963	; 0x802963 <g_twi1_gyro_1_gyro_z_mdps+0x2>
    49a6:	70 90 64 29 	lds	r7, 0x2964	; 0x802964 <g_twi1_gyro_1_gyro_z_mdps+0x3>
			int32_t l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
    49aa:	20 91 53 29 	lds	r18, 0x2953	; 0x802953 <g_twi1_gyro_2_mag_x_nT>
    49ae:	30 91 54 29 	lds	r19, 0x2954	; 0x802954 <g_twi1_gyro_2_mag_x_nT+0x1>
    49b2:	40 91 55 29 	lds	r20, 0x2955	; 0x802955 <g_twi1_gyro_2_mag_x_nT+0x2>
    49b6:	50 91 56 29 	lds	r21, 0x2956	; 0x802956 <g_twi1_gyro_2_mag_x_nT+0x3>
    49ba:	2a a3       	std	Y+34, r18	; 0x22
    49bc:	3b a3       	std	Y+35, r19	; 0x23
    49be:	4c a3       	std	Y+36, r20	; 0x24
    49c0:	5d a3       	std	Y+37, r21	; 0x25
			int32_t l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
    49c2:	20 91 4f 29 	lds	r18, 0x294F	; 0x80294f <g_twi1_gyro_2_mag_y_nT>
    49c6:	30 91 50 29 	lds	r19, 0x2950	; 0x802950 <g_twi1_gyro_2_mag_y_nT+0x1>
    49ca:	40 91 51 29 	lds	r20, 0x2951	; 0x802951 <g_twi1_gyro_2_mag_y_nT+0x2>
    49ce:	50 91 52 29 	lds	r21, 0x2952	; 0x802952 <g_twi1_gyro_2_mag_y_nT+0x3>
    49d2:	2e a3       	std	Y+38, r18	; 0x26
    49d4:	3f a3       	std	Y+39, r19	; 0x27
    49d6:	48 a7       	std	Y+40, r20	; 0x28
    49d8:	59 a7       	std	Y+41, r21	; 0x29
			int32_t l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
    49da:	20 91 4b 29 	lds	r18, 0x294B	; 0x80294b <g_twi1_gyro_2_mag_z_nT>
    49de:	30 91 4c 29 	lds	r19, 0x294C	; 0x80294c <g_twi1_gyro_2_mag_z_nT+0x1>
    49e2:	40 91 4d 29 	lds	r20, 0x294D	; 0x80294d <g_twi1_gyro_2_mag_z_nT+0x2>
    49e6:	50 91 4e 29 	lds	r21, 0x294E	; 0x80294e <g_twi1_gyro_2_mag_z_nT+0x3>
    49ea:	2a a7       	std	Y+42, r18	; 0x2a
    49ec:	3b a7       	std	Y+43, r19	; 0x2b
    49ee:	4c a7       	std	Y+44, r20	; 0x2c
    49f0:	5d a7       	std	Y+45, r21	; 0x2d
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    49f2:	8f bf       	out	0x3f, r24	; 63
			cpu_irq_restore(flags);

			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
    49f4:	80 91 8a 26 	lds	r24, 0x268A	; 0x80268a <__data_end>
    49f8:	90 91 8b 26 	lds	r25, 0x268B	; 0x80268b <__data_end+0x1>
    49fc:	9c 01       	movw	r18, r24
    49fe:	2f 5f       	subi	r18, 0xFF	; 255
    4a00:	3f 4f       	sbci	r19, 0xFF	; 255
    4a02:	20 93 8a 26 	sts	0x268A, r18	; 0x80268a <__data_end>
    4a06:	30 93 8b 26 	sts	0x268B, r19	; 0x80268b <__data_end+0x1>
    4a0a:	89 2b       	or	r24, r25
    4a0c:	09 f0       	breq	.+2      	; 0x4a10 <task_twi2_lcd+0x1c8>
    4a0e:	ff c0       	rjmp	.+510    	; 0x4c0e <task_twi2_lcd+0x3c6>
}


static void task_twi2_lcd_cls(void)
{
	twi2_waitUntilReady();
    4a10:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <twi2_waitUntilReady>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
    4a14:	80 e1       	ldi	r24, 0x10	; 16
    4a16:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <twi2_packet+0x1>
	twi2_packet.length = 0;
    4a1a:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <twi2_packet+0x8>
    4a1e:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <twi2_packet+0x9>
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    4a22:	40 e0       	ldi	r20, 0x00	; 0
    4a24:	6b e0       	ldi	r22, 0x0B	; 11
    4a26:	70 e2       	ldi	r23, 0x20	; 32
    4a28:	80 e8       	ldi	r24, 0x80	; 128
    4a2a:	94 e0       	ldi	r25, 0x04	; 4
    4a2c:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    4a30:	65 e0       	ldi	r22, 0x05	; 5
    4a32:	70 e0       	ldi	r23, 0x00	; 0
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__portable_avr_delay_cycles>
{
	uint8_t line;

	/* The header line */
	task_twi2_lcd_cls();
	task_twi2_lcd_str(6 * 10, 2, "FindMeSAT");
    4a3c:	4a e7       	ldi	r20, 0x7A	; 122
    4a3e:	53 e2       	ldi	r21, 0x23	; 35
    4a40:	62 e0       	ldi	r22, 0x02	; 2
    4a42:	8c e3       	ldi	r24, 0x3C	; 60
    4a44:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 30, 2, "by DF4IAH");
    4a48:	44 e8       	ldi	r20, 0x84	; 132
    4a4a:	53 e2       	ldi	r21, 0x23	; 35
    4a4c:	62 e0       	ldi	r22, 0x02	; 2
    4a4e:	84 eb       	ldi	r24, 0xB4	; 180
    4a50:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>

	/* A tiny satellite */
	task_twi2_lcd_circ( 9, 4, 3, true, 1);
    4a54:	01 e0       	ldi	r16, 0x01	; 1
    4a56:	21 e0       	ldi	r18, 0x01	; 1
    4a58:	43 e0       	ldi	r20, 0x03	; 3
    4a5a:	64 e0       	ldi	r22, 0x04	; 4
    4a5c:	89 e0       	ldi	r24, 0x09	; 9
    4a5e:	0e 94 05 18 	call	0x300a	; 0x300a <task_twi2_lcd_circ>
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled, uint8_t color)
{
	task_twi2_lcd_pos_xy(x, y);
    4a62:	62 e0       	ldi	r22, 0x02	; 2
    4a64:	81 e0       	ldi	r24, 0x01	; 1
    4a66:	0e 94 e5 17 	call	0x2fca	; 0x2fca <task_twi2_lcd_pos_xy>

	twi2_waitUntilReady();
    4a6a:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    4a6e:	34 e3       	ldi	r19, 0x34	; 52
    4a70:	30 93 0c 20 	sts	0x200C, r19	; 0x80200c <twi2_packet+0x1>
	twi2_m_data[0] = width;
    4a74:	07 e9       	ldi	r16, 0x97	; 151
    4a76:	18 e2       	ldi	r17, 0x28	; 40
    4a78:	26 e0       	ldi	r18, 0x06	; 6
    4a7a:	f8 01       	movw	r30, r16
    4a7c:	20 83       	st	Z, r18
	twi2_m_data[1] = height;
    4a7e:	34 e0       	ldi	r19, 0x04	; 4
    4a80:	31 83       	std	Z+1, r19	; 0x01
	//twi2_m_data[2] = color;
	twi2_packet.length = 2;
    4a82:	42 e0       	ldi	r20, 0x02	; 2
    4a84:	50 e0       	ldi	r21, 0x00	; 0
    4a86:	40 93 13 20 	sts	0x2013, r20	; 0x802013 <twi2_packet+0x8>
    4a8a:	50 93 14 20 	sts	0x2014, r21	; 0x802014 <twi2_packet+0x9>
    4a8e:	40 e0       	ldi	r20, 0x00	; 0
    4a90:	6b e0       	ldi	r22, 0x0B	; 11
    4a92:	70 e2       	ldi	r23, 0x20	; 32
    4a94:	80 e8       	ldi	r24, 0x80	; 128
    4a96:	94 e0       	ldi	r25, 0x04	; 4
    4a98:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    4a9c:	65 e0       	ldi	r22, 0x05	; 5
    4a9e:	70 e0       	ldi	r23, 0x00	; 0
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__portable_avr_delay_cycles>
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled, uint8_t color)
{
	task_twi2_lcd_pos_xy(x, y);
    4aa8:	62 e0       	ldi	r22, 0x02	; 2
    4aaa:	8c e0       	ldi	r24, 0x0C	; 12
    4aac:	0e 94 e5 17 	call	0x2fca	; 0x2fca <task_twi2_lcd_pos_xy>

	twi2_waitUntilReady();
    4ab0:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    4ab4:	54 e3       	ldi	r21, 0x34	; 52
    4ab6:	50 93 0c 20 	sts	0x200C, r21	; 0x80200c <twi2_packet+0x1>
	twi2_m_data[0] = width;
    4aba:	26 e0       	ldi	r18, 0x06	; 6
    4abc:	f8 01       	movw	r30, r16
    4abe:	20 83       	st	Z, r18
	twi2_m_data[1] = height;
    4ac0:	34 e0       	ldi	r19, 0x04	; 4
    4ac2:	31 83       	std	Z+1, r19	; 0x01
	//twi2_m_data[2] = color;
	twi2_packet.length = 2;
    4ac4:	42 e0       	ldi	r20, 0x02	; 2
    4ac6:	50 e0       	ldi	r21, 0x00	; 0
    4ac8:	40 93 13 20 	sts	0x2013, r20	; 0x802013 <twi2_packet+0x8>
    4acc:	50 93 14 20 	sts	0x2014, r21	; 0x802014 <twi2_packet+0x9>
    4ad0:	40 e0       	ldi	r20, 0x00	; 0
    4ad2:	6b e0       	ldi	r22, 0x0B	; 11
    4ad4:	70 e2       	ldi	r23, 0x20	; 32
    4ad6:	80 e8       	ldi	r24, 0x80	; 128
    4ad8:	94 e0       	ldi	r25, 0x04	; 4
    4ada:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    4ade:	65 e0       	ldi	r22, 0x05	; 5
    4ae0:	70 e0       	ldi	r23, 0x00	; 0
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__portable_avr_delay_cycles>
	task_twi2_lcd_circ( 9, 4, 3, true, 1);
	task_twi2_lcd_rect( 1, 2, 6, 4, false, 1);
	task_twi2_lcd_rect(12, 2, 6, 4, false, 1);

	/* Header line separator */
	task_twi2_lcd_line(0, 11, 239, 11, 1);
    4aea:	01 e0       	ldi	r16, 0x01	; 1
    4aec:	2b e0       	ldi	r18, 0x0B	; 11
    4aee:	4f ee       	ldi	r20, 0xEF	; 239
    4af0:	6b e0       	ldi	r22, 0x0B	; 11
    4af2:	80 e0       	ldi	r24, 0x00	; 0
    4af4:	0e 94 27 18 	call	0x304e	; 0x304e <task_twi2_lcd_line>

	/* Left measurement names */
	line = 2;
	task_twi2_lcd_str(6 *  0, (line++) * 10, "mP Temp =");
    4af8:	4e e8       	ldi	r20, 0x8E	; 142
    4afa:	53 e2       	ldi	r21, 0x23	; 35
    4afc:	64 e1       	ldi	r22, 0x14	; 20
    4afe:	80 e0       	ldi	r24, 0x00	; 0
    4b00:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vusb =");
    4b04:	48 e9       	ldi	r20, 0x98	; 152
    4b06:	53 e2       	ldi	r21, 0x23	; 35
    4b08:	6e e1       	ldi	r22, 0x1E	; 30
    4b0a:	82 e1       	ldi	r24, 0x12	; 18
    4b0c:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vbat =");
    4b10:	4f e9       	ldi	r20, 0x9F	; 159
    4b12:	53 e2       	ldi	r21, 0x23	; 35
    4b14:	68 e2       	ldi	r22, 0x28	; 40
    4b16:	82 e1       	ldi	r24, 0x12	; 18
    4b18:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vvctcxo =");
    4b1c:	46 ea       	ldi	r20, 0xA6	; 166
    4b1e:	53 e2       	ldi	r21, 0x23	; 35
    4b20:	62 e3       	ldi	r22, 0x32	; 50
    4b22:	80 e0       	ldi	r24, 0x00	; 0
    4b24:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc4 =");
    4b28:	40 eb       	ldi	r20, 0xB0	; 176
    4b2a:	53 e2       	ldi	r21, 0x23	; 35
    4b2c:	6c e3       	ldi	r22, 0x3C	; 60
    4b2e:	80 e0       	ldi	r24, 0x00	; 0
    4b30:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc5 =");
    4b34:	4a eb       	ldi	r20, 0xBA	; 186
    4b36:	53 e2       	ldi	r21, 0x23	; 35
    4b38:	66 e4       	ldi	r22, 0x46	; 70
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	//task_twi2_lcd_str(6 *  0, (line++) * 10, "Vsilen. =");
	line++;

	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Temp =");
    4b40:	44 ec       	ldi	r20, 0xC4	; 196
    4b42:	53 e2       	ldi	r21, 0x23	; 35
    4b44:	6a e5       	ldi	r22, 0x5A	; 90
    4b46:	80 e0       	ldi	r24, 0x00	; 0
    4b48:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Pres =");
    4b4c:	4e ec       	ldi	r20, 0xCE	; 206
    4b4e:	53 e2       	ldi	r21, 0x23	; 35
    4b50:	64 e6       	ldi	r22, 0x64	; 100
    4b52:	80 e0       	ldi	r24, 0x00	; 0
    4b54:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Hy_Temp =");
    4b58:	48 ed       	ldi	r20, 0xD8	; 216
    4b5a:	53 e2       	ldi	r21, 0x23	; 35
    4b5c:	6e e6       	ldi	r22, 0x6E	; 110
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Hy_RelH =");
    4b64:	42 ee       	ldi	r20, 0xE2	; 226
    4b66:	53 e2       	ldi	r21, 0x23	; 35
    4b68:	68 e7       	ldi	r22, 0x78	; 120
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>

	/* Left measurement units */
	line = 2;
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    4b70:	4c ee       	ldi	r20, 0xEC	; 236
    4b72:	53 e2       	ldi	r21, 0x23	; 35
    4b74:	64 e1       	ldi	r22, 0x14	; 20
    4b76:	80 e6       	ldi	r24, 0x60	; 96
    4b78:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    4b7c:	4e ee       	ldi	r20, 0xEE	; 238
    4b7e:	53 e2       	ldi	r21, 0x23	; 35
    4b80:	6e e1       	ldi	r22, 0x1E	; 30
    4b82:	80 e6       	ldi	r24, 0x60	; 96
    4b84:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    4b88:	4e ee       	ldi	r20, 0xEE	; 238
    4b8a:	53 e2       	ldi	r21, 0x23	; 35
    4b8c:	68 e2       	ldi	r22, 0x28	; 40
    4b8e:	80 e6       	ldi	r24, 0x60	; 96
    4b90:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    4b94:	4e ee       	ldi	r20, 0xEE	; 238
    4b96:	53 e2       	ldi	r21, 0x23	; 35
    4b98:	62 e3       	ldi	r22, 0x32	; 50
    4b9a:	80 e6       	ldi	r24, 0x60	; 96
    4b9c:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    4ba0:	4e ee       	ldi	r20, 0xEE	; 238
    4ba2:	53 e2       	ldi	r21, 0x23	; 35
    4ba4:	6c e3       	ldi	r22, 0x3C	; 60
    4ba6:	80 e6       	ldi	r24, 0x60	; 96
    4ba8:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    4bac:	4e ee       	ldi	r20, 0xEE	; 238
    4bae:	53 e2       	ldi	r21, 0x23	; 35
    4bb0:	66 e4       	ldi	r22, 0x46	; 70
    4bb2:	80 e6       	ldi	r24, 0x60	; 96
    4bb4:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	//task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
	line++;

	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    4bb8:	4c ee       	ldi	r20, 0xEC	; 236
    4bba:	53 e2       	ldi	r21, 0x23	; 35
    4bbc:	6a e5       	ldi	r22, 0x5A	; 90
    4bbe:	80 e6       	ldi	r24, 0x60	; 96
    4bc0:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 18, (line++) * 10, "hPa");
    4bc4:	40 ef       	ldi	r20, 0xF0	; 240
    4bc6:	53 e2       	ldi	r21, 0x23	; 35
    4bc8:	64 e6       	ldi	r22, 0x64	; 100
    4bca:	8c e6       	ldi	r24, 0x6C	; 108
    4bcc:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    4bd0:	4c ee       	ldi	r20, 0xEC	; 236
    4bd2:	53 e2       	ldi	r21, 0x23	; 35
    4bd4:	6e e6       	ldi	r22, 0x6E	; 110
    4bd6:	80 e6       	ldi	r24, 0x60	; 96
    4bd8:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "%");
    4bdc:	44 ef       	ldi	r20, 0xF4	; 244
    4bde:	53 e2       	ldi	r21, 0x23	; 35
    4be0:	68 e7       	ldi	r22, 0x78	; 120
    4be2:	80 e6       	ldi	r24, 0x60	; 96
    4be4:	0e 94 48 18 	call	0x3090	; 0x3090 <task_twi2_lcd_str>
		const uint8_t plot_gyro_center_x_Y	= 150 + 30;
		const uint8_t plot_gyro_center_x_Z	= 150 + 60;
		const uint8_t plot_gyro_center_y	= 100;
		const uint8_t plot_gyro_radius		= 14;

		task_twi2_lcd_circ(plot_gyro_center_x_X, plot_gyro_center_y, plot_gyro_radius, false, 1);
    4be8:	20 e0       	ldi	r18, 0x00	; 0
    4bea:	4e e0       	ldi	r20, 0x0E	; 14
    4bec:	64 e6       	ldi	r22, 0x64	; 100
    4bee:	86 e9       	ldi	r24, 0x96	; 150
    4bf0:	0e 94 05 18 	call	0x300a	; 0x300a <task_twi2_lcd_circ>
		task_twi2_lcd_circ(plot_gyro_center_x_Y, plot_gyro_center_y, plot_gyro_radius, false, 1);
    4bf4:	20 e0       	ldi	r18, 0x00	; 0
    4bf6:	4e e0       	ldi	r20, 0x0E	; 14
    4bf8:	64 e6       	ldi	r22, 0x64	; 100
    4bfa:	84 eb       	ldi	r24, 0xB4	; 180
    4bfc:	0e 94 05 18 	call	0x300a	; 0x300a <task_twi2_lcd_circ>
		task_twi2_lcd_circ(plot_gyro_center_x_Z, plot_gyro_center_y, plot_gyro_radius, false, 1);
    4c00:	20 e0       	ldi	r18, 0x00	; 0
    4c02:	4e e0       	ldi	r20, 0x0E	; 14
    4c04:	64 e6       	ldi	r22, 0x64	; 100
    4c06:	82 ed       	ldi	r24, 0xD2	; 210
    4c08:	0e 94 05 18 	call	0x300a	; 0x300a <task_twi2_lcd_circ>
    4c0c:	08 c0       	rjmp	.+16     	; 0x4c1e <task_twi2_lcd+0x3d6>
			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
				task_twi2_lcd_header();
			#if 1
//			} else if (s_lcd_entry_cnt >= (240 * 8)) {
			} else if (s_lcd_entry_cnt >= ( 10 * 8)) {
    4c0e:	20 35       	cpi	r18, 0x50	; 80
    4c10:	31 05       	cpc	r19, r1
    4c12:	28 f0       	brcs	.+10     	; 0x4c1e <task_twi2_lcd+0x3d6>
				s_lcd_entry_cnt = 0;
    4c14:	10 92 8a 26 	sts	0x268A, r1	; 0x80268a <__data_end>
    4c18:	10 92 8b 26 	sts	0x268B, r1	; 0x80268b <__data_end+0x1>
    4c1c:	09 c0       	rjmp	.+18     	; 0x4c30 <task_twi2_lcd+0x3e8>
			#endif
			}

			/* Text update each second */
			if (!(s_lcd_entry_cnt % 8)) {
    4c1e:	80 91 8a 26 	lds	r24, 0x268A	; 0x80268a <__data_end>
    4c22:	90 91 8b 26 	lds	r25, 0x268B	; 0x80268b <__data_end+0x1>
    4c26:	87 70       	andi	r24, 0x07	; 7
    4c28:	99 27       	eor	r25, r25
    4c2a:	89 2b       	or	r24, r25
    4c2c:	09 f0       	breq	.+2      	; 0x4c30 <task_twi2_lcd+0x3e8>
    4c2e:	99 c0       	rjmp	.+306    	; 0x4d62 <task_twi2_lcd+0x51a>
				/* ADC_TEMP */
				task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_temp_deg_100 / 100,      (l_adc_temp_deg_100 / 10) % 10,  "%02d.%01d");
    4c30:	2a e0       	ldi	r18, 0x0A	; 10
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	c7 01       	movw	r24, r14
    4c36:	b9 01       	movw	r22, r18
    4c38:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4c3c:	cb 01       	movw	r24, r22
    4c3e:	b9 01       	movw	r22, r18
    4c40:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4c44:	9c 01       	movw	r18, r24
    4c46:	c7 01       	movw	r24, r14
    4c48:	64 e6       	ldi	r22, 0x64	; 100
    4c4a:	70 e0       	ldi	r23, 0x00	; 0
    4c4c:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4c50:	ab 01       	movw	r20, r22
    4c52:	06 ef       	ldi	r16, 0xF6	; 246
    4c54:	13 e2       	ldi	r17, 0x23	; 35
    4c56:	64 e1       	ldi	r22, 0x14	; 20
    4c58:	8c e3       	ldi	r24, 0x3C	; 60
    4c5a:	0e 94 f7 18 	call	0x31ee	; 0x31ee <task_twi2_lcd_print_format_uint16>

				/* ADC_5V0 */
				task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_5v0_volt_1000 / 1000,     l_adc_5v0_volt_1000 % 1000,     "%1d.%03d");
    4c5e:	0f 2e       	mov	r0, r31
    4c60:	f8 ee       	ldi	r31, 0xE8	; 232
    4c62:	ef 2e       	mov	r14, r31
    4c64:	f3 e0       	ldi	r31, 0x03	; 3
    4c66:	ff 2e       	mov	r15, r31
    4c68:	f0 2d       	mov	r31, r0
    4c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c6c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c6e:	b7 01       	movw	r22, r14
    4c70:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4c74:	ab 01       	movw	r20, r22
    4c76:	00 e0       	ldi	r16, 0x00	; 0
    4c78:	14 e2       	ldi	r17, 0x24	; 36
    4c7a:	9c 01       	movw	r18, r24
    4c7c:	6e e1       	ldi	r22, 0x1E	; 30
    4c7e:	8c e3       	ldi	r24, 0x3C	; 60
    4c80:	0e 94 f7 18 	call	0x31ee	; 0x31ee <task_twi2_lcd_print_format_uint16>

				/* ADC_VBAT */
				task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vbat_volt_1000 / 1000,    l_adc_vbat_volt_1000 % 1000,    "%1d.%03d");
    4c84:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c86:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c88:	b7 01       	movw	r22, r14
    4c8a:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4c8e:	ab 01       	movw	r20, r22
    4c90:	9c 01       	movw	r18, r24
    4c92:	68 e2       	ldi	r22, 0x28	; 40
    4c94:	8c e3       	ldi	r24, 0x3C	; 60
    4c96:	0e 94 f7 18 	call	0x31ee	; 0x31ee <task_twi2_lcd_print_format_uint16>

				/* ADC_VCTCXO */
				task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vctcxo_volt_1000 / 1000,  l_adc_vctcxo_volt_1000 % 1000,  "%1d.%03d");
    4c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c9e:	b7 01       	movw	r22, r14
    4ca0:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4ca4:	ab 01       	movw	r20, r22
    4ca6:	9c 01       	movw	r18, r24
    4ca8:	62 e3       	ldi	r22, 0x32	; 50
    4caa:	8c e3       	ldi	r24, 0x3C	; 60
    4cac:	0e 94 f7 18 	call	0x31ee	; 0x31ee <task_twi2_lcd_print_format_uint16>

				/* ADC_IO_ADC4 */
				task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc4_volt_1000 / 1000, l_adc_io_adc4_volt_1000 % 1000, "%1d.%03d");
    4cb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    4cb2:	9d 85       	ldd	r25, Y+13	; 0x0d
    4cb4:	b7 01       	movw	r22, r14
    4cb6:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4cba:	ab 01       	movw	r20, r22
    4cbc:	9c 01       	movw	r18, r24
    4cbe:	6c e3       	ldi	r22, 0x3C	; 60
    4cc0:	8c e3       	ldi	r24, 0x3C	; 60
    4cc2:	0e 94 f7 18 	call	0x31ee	; 0x31ee <task_twi2_lcd_print_format_uint16>

				/* ADC_IO_ADC5 */
				task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc5_volt_1000 / 1000, l_adc_io_adc5_volt_1000 % 1000, "%1d.%03d");
    4cc6:	c6 01       	movw	r24, r12
    4cc8:	b7 01       	movw	r22, r14
    4cca:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4cce:	ab 01       	movw	r20, r22
    4cd0:	9c 01       	movw	r18, r24
    4cd2:	66 e4       	ldi	r22, 0x46	; 70
    4cd4:	8c e3       	ldi	r24, 0x3C	; 60
    4cd6:	0e 94 f7 18 	call	0x31ee	; 0x31ee <task_twi2_lcd_print_format_uint16>
				/* ADC_SILENCE */
				//task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_silence_volt_1000 / 1000, l_adc_silence_volt_1000 % 1000, "%1d.%03d");
				line++;

				/* Baro_Temp */
				task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_temp_100 / 100,     l_twi1_baro_temp_100 % 100,     "%02ld.%02ld");
    4cda:	c5 01       	movw	r24, r10
    4cdc:	b4 01       	movw	r22, r8
    4cde:	24 e6       	ldi	r18, 0x64	; 100
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	40 e0       	ldi	r20, 0x00	; 0
    4ce4:	50 e0       	ldi	r21, 0x00	; 0
    4ce6:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    4cea:	0f 2e       	mov	r0, r31
    4cec:	f9 e0       	ldi	r31, 0x09	; 9
    4cee:	cf 2e       	mov	r12, r31
    4cf0:	f4 e2       	ldi	r31, 0x24	; 36
    4cf2:	df 2e       	mov	r13, r31
    4cf4:	f0 2d       	mov	r31, r0
    4cf6:	7b 01       	movw	r14, r22
    4cf8:	8c 01       	movw	r16, r24
    4cfa:	6a e5       	ldi	r22, 0x5A	; 90
    4cfc:	8c e3       	ldi	r24, 0x3C	; 60
    4cfe:	0e 94 ae 18 	call	0x315c	; 0x315c <task_twi2_lcd_print_format_uint32>

				/* Baro_P */
				task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_p_100 / 100,        l_twi1_baro_p_100 % 100,        "%04ld.%02ld");
    4d02:	6e 85       	ldd	r22, Y+14	; 0x0e
    4d04:	7f 85       	ldd	r23, Y+15	; 0x0f
    4d06:	88 89       	ldd	r24, Y+16	; 0x10
    4d08:	99 89       	ldd	r25, Y+17	; 0x11
    4d0a:	24 e6       	ldi	r18, 0x64	; 100
    4d0c:	30 e0       	ldi	r19, 0x00	; 0
    4d0e:	40 e0       	ldi	r20, 0x00	; 0
    4d10:	50 e0       	ldi	r21, 0x00	; 0
    4d12:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    4d16:	0f 2e       	mov	r0, r31
    4d18:	f5 e1       	ldi	r31, 0x15	; 21
    4d1a:	cf 2e       	mov	r12, r31
    4d1c:	f4 e2       	ldi	r31, 0x24	; 36
    4d1e:	df 2e       	mov	r13, r31
    4d20:	f0 2d       	mov	r31, r0
    4d22:	7b 01       	movw	r14, r22
    4d24:	8c 01       	movw	r16, r24
    4d26:	64 e6       	ldi	r22, 0x64	; 100
    4d28:	8c e3       	ldi	r24, 0x3C	; 60
    4d2a:	0e 94 ae 18 	call	0x315c	; 0x315c <task_twi2_lcd_print_format_uint32>

				/* Hygro_Temp */
				task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_twi1_hygro_T_100 / 100,       l_twi1_hygro_T_100 % 100,       "%02d.%02d");
    4d2e:	8a 89       	ldd	r24, Y+18	; 0x12
    4d30:	9b 89       	ldd	r25, Y+19	; 0x13
    4d32:	64 e6       	ldi	r22, 0x64	; 100
    4d34:	70 e0       	ldi	r23, 0x00	; 0
    4d36:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4d3a:	ab 01       	movw	r20, r22
    4d3c:	01 e2       	ldi	r16, 0x21	; 33
    4d3e:	14 e2       	ldi	r17, 0x24	; 36
    4d40:	9c 01       	movw	r18, r24
    4d42:	6e e6       	ldi	r22, 0x6E	; 110
    4d44:	8c e3       	ldi	r24, 0x3C	; 60
    4d46:	0e 94 f7 18 	call	0x31ee	; 0x31ee <task_twi2_lcd_print_format_uint16>

				/* Hygro_RH */
				task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_twi1_hygro_RH_100 / 100,      l_twi1_hygro_RH_100 % 100,      "%02d.%02d");
    4d4a:	8c 89       	ldd	r24, Y+20	; 0x14
    4d4c:	9d 89       	ldd	r25, Y+21	; 0x15
    4d4e:	64 e6       	ldi	r22, 0x64	; 100
    4d50:	70 e0       	ldi	r23, 0x00	; 0
    4d52:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4d56:	ab 01       	movw	r20, r22
    4d58:	9c 01       	movw	r18, r24
    4d5a:	68 e7       	ldi	r22, 0x78	; 120
    4d5c:	8c e3       	ldi	r24, 0x3C	; 60
    4d5e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <task_twi2_lcd_print_format_uint16>
			}

			/* Gfx update twice a second */
			if (!(s_lcd_entry_cnt % 4)) {
    4d62:	80 91 8a 26 	lds	r24, 0x268A	; 0x80268a <__data_end>
    4d66:	90 91 8b 26 	lds	r25, 0x268B	; 0x80268b <__data_end+0x1>
    4d6a:	83 70       	andi	r24, 0x03	; 3
    4d6c:	99 27       	eor	r25, r25
    4d6e:	89 2b       	or	r24, r25
    4d70:	09 f0       	breq	.+2      	; 0x4d74 <task_twi2_lcd+0x52c>
    4d72:	77 c1       	rjmp	.+750    	; 0x5062 <task_twi2_lcd+0x81a>
					task_twi2_lcd_line(plot_mag_center_x, plot_mag_center_y, plot_mag_center_x + (s_twi1_gyro_2_mag_y_nT / 2000),	plot_mag_center_y,										0);
					task_twi2_lcd_line(plot_mag_center_x, plot_mag_center_y, plot_mag_center_x,										plot_mag_center_y + (s_twi1_gyro_2_mag_z_nT / 2000),	0);
					#endif

					/* Center point */
					task_twi2_lcd_circ(plot_mag_center_x, plot_mag_center_y, 1, true, 1);
    4d74:	01 e0       	ldi	r16, 0x01	; 1
    4d76:	21 e0       	ldi	r18, 0x01	; 1
    4d78:	41 e0       	ldi	r20, 0x01	; 1
    4d7a:	68 e2       	ldi	r22, 0x28	; 40
    4d7c:	86 e9       	ldi	r24, 0x96	; 150
    4d7e:	0e 94 05 18 	call	0x300a	; 0x300a <task_twi2_lcd_circ>

					/* Draw new lines */
					task_twi2_lcd_line(plot_mag_center_x, plot_mag_center_y, plot_mag_center_x + (l_twi1_gyro_2_mag_x_nT / 4000),	plot_mag_center_y - (l_twi1_gyro_2_mag_x_nT / 4000),	1);
    4d82:	6a a1       	ldd	r22, Y+34	; 0x22
    4d84:	7b a1       	ldd	r23, Y+35	; 0x23
    4d86:	8c a1       	ldd	r24, Y+36	; 0x24
    4d88:	9d a1       	ldd	r25, Y+37	; 0x25
    4d8a:	20 ea       	ldi	r18, 0xA0	; 160
    4d8c:	3f e0       	ldi	r19, 0x0F	; 15
    4d8e:	40 e0       	ldi	r20, 0x00	; 0
    4d90:	50 e0       	ldi	r21, 0x00	; 0
    4d92:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    4d96:	42 2f       	mov	r20, r18
    4d98:	28 e2       	ldi	r18, 0x28	; 40
    4d9a:	24 1b       	sub	r18, r20
    4d9c:	4a 56       	subi	r20, 0x6A	; 106
    4d9e:	68 e2       	ldi	r22, 0x28	; 40
    4da0:	86 e9       	ldi	r24, 0x96	; 150
    4da2:	0e 94 27 18 	call	0x304e	; 0x304e <task_twi2_lcd_line>
					task_twi2_lcd_line(plot_mag_center_x, plot_mag_center_y, plot_mag_center_x + (l_twi1_gyro_2_mag_y_nT / 2000),	plot_mag_center_y,										1);
    4da6:	0f 2e       	mov	r0, r31
    4da8:	f0 ed       	ldi	r31, 0xD0	; 208
    4daa:	cf 2e       	mov	r12, r31
    4dac:	f7 e0       	ldi	r31, 0x07	; 7
    4dae:	df 2e       	mov	r13, r31
    4db0:	e1 2c       	mov	r14, r1
    4db2:	f1 2c       	mov	r15, r1
    4db4:	f0 2d       	mov	r31, r0
    4db6:	6e a1       	ldd	r22, Y+38	; 0x26
    4db8:	7f a1       	ldd	r23, Y+39	; 0x27
    4dba:	88 a5       	ldd	r24, Y+40	; 0x28
    4dbc:	99 a5       	ldd	r25, Y+41	; 0x29
    4dbe:	a7 01       	movw	r20, r14
    4dc0:	96 01       	movw	r18, r12
    4dc2:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    4dc6:	46 e9       	ldi	r20, 0x96	; 150
    4dc8:	42 0f       	add	r20, r18
    4dca:	28 e2       	ldi	r18, 0x28	; 40
    4dcc:	68 e2       	ldi	r22, 0x28	; 40
    4dce:	86 e9       	ldi	r24, 0x96	; 150
    4dd0:	0e 94 27 18 	call	0x304e	; 0x304e <task_twi2_lcd_line>
					task_twi2_lcd_line(plot_mag_center_x, plot_mag_center_y, plot_mag_center_x,										plot_mag_center_y + (l_twi1_gyro_2_mag_z_nT / 2000),	1);
    4dd4:	6a a5       	ldd	r22, Y+42	; 0x2a
    4dd6:	7b a5       	ldd	r23, Y+43	; 0x2b
    4dd8:	8c a5       	ldd	r24, Y+44	; 0x2c
    4dda:	9d a5       	ldd	r25, Y+45	; 0x2d
    4ddc:	a7 01       	movw	r20, r14
    4dde:	96 01       	movw	r18, r12
    4de0:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    4de4:	28 5d       	subi	r18, 0xD8	; 216
    4de6:	46 e9       	ldi	r20, 0x96	; 150
    4de8:	68 e2       	ldi	r22, 0x28	; 40
    4dea:	86 e9       	ldi	r24, 0x96	; 150
    4dec:	0e 94 27 18 	call	0x304e	; 0x304e <task_twi2_lcd_line>
						task_twi2_lcd_line(p2x, p2y, p3x, p3y, 0);
					}
					#endif

					/* Center point */
					task_twi2_lcd_circ(plot_accel_center_x, plot_accel_center_y, 1, true, 1);
    4df0:	21 e0       	ldi	r18, 0x01	; 1
    4df2:	41 e0       	ldi	r20, 0x01	; 1
    4df4:	68 e2       	ldi	r22, 0x28	; 40
    4df6:	82 ed       	ldi	r24, 0xD2	; 210
    4df8:	0e 94 05 18 	call	0x300a	; 0x300a <task_twi2_lcd_circ>

					/* Draw new lines */
					{
						uint8_t p0x = plot_accel_center_x;
						uint8_t p0y = plot_accel_center_y;
						uint8_t p1x = p0x - (l_twi1_gyro_1_accel_y_mg / 80);
    4dfc:	88 8d       	ldd	r24, Y+24	; 0x18
    4dfe:	99 8d       	ldd	r25, Y+25	; 0x19
    4e00:	60 e5       	ldi	r22, 0x50	; 80
    4e02:	70 e0       	ldi	r23, 0x00	; 0
    4e04:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4e08:	82 ed       	ldi	r24, 0xD2	; 210
    4e0a:	f8 2e       	mov	r15, r24
    4e0c:	f6 1a       	sub	r15, r22
						uint8_t p1y = p0y + (l_twi1_gyro_1_accel_y_mg / 80);
    4e0e:	18 e2       	ldi	r17, 0x28	; 40
    4e10:	16 0f       	add	r17, r22
						uint8_t p2x = p1x - (l_twi1_gyro_1_accel_x_mg / 40);
    4e12:	28 e2       	ldi	r18, 0x28	; 40
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	8e 89       	ldd	r24, Y+22	; 0x16
    4e18:	9f 89       	ldd	r25, Y+23	; 0x17
    4e1a:	b9 01       	movw	r22, r18
    4e1c:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4e20:	ef 2c       	mov	r14, r15
    4e22:	e6 1a       	sub	r14, r22
						uint8_t p2y = p1y;
						uint8_t p3x = p2x;
						uint8_t p3y = p2y + (l_twi1_gyro_1_accel_z_mg / 40);
    4e24:	c1 01       	movw	r24, r2
    4e26:	b9 01       	movw	r22, r18
    4e28:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    4e2c:	d1 2e       	mov	r13, r17
    4e2e:	d6 0e       	add	r13, r22

						task_twi2_lcd_line(p0x, p0y, p1x, p1y, 1);
    4e30:	21 2f       	mov	r18, r17
    4e32:	4f 2d       	mov	r20, r15
    4e34:	68 e2       	ldi	r22, 0x28	; 40
    4e36:	82 ed       	ldi	r24, 0xD2	; 210
    4e38:	0e 94 27 18 	call	0x304e	; 0x304e <task_twi2_lcd_line>
						task_twi2_lcd_line(p1x, p1y, p2x, p2y, 1);
    4e3c:	21 2f       	mov	r18, r17
    4e3e:	4e 2d       	mov	r20, r14
    4e40:	61 2f       	mov	r22, r17
    4e42:	8f 2d       	mov	r24, r15
    4e44:	0e 94 27 18 	call	0x304e	; 0x304e <task_twi2_lcd_line>
						task_twi2_lcd_line(p2x, p2y, p3x, p3y, 1);
    4e48:	2d 2d       	mov	r18, r13
    4e4a:	4e 2d       	mov	r20, r14
    4e4c:	61 2f       	mov	r22, r17
    4e4e:	8e 2d       	mov	r24, r14
    4e50:	0e 94 27 18 	call	0x304e	; 0x304e <task_twi2_lcd_line>
					const uint8_t plot_gyro_center_x_X	= 150;
					const uint8_t plot_gyro_center_x_Y	= 150 + 30;
					const uint8_t plot_gyro_center_x_Z	= 150 + 60;
					const uint8_t plot_gyro_center_y	= 100;
					const uint8_t plot_gyro_radius		= 14;
					float rads_x = (l_twi1_gyro_1_gyro_x_mdps * M_PI) / 180000.f;
    4e54:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4e56:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4e58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4e5c:	0e 94 d5 56 	call	0xadaa	; 0xadaa <__floatsisf>
    4e60:	2b ed       	ldi	r18, 0xDB	; 219
    4e62:	3f e0       	ldi	r19, 0x0F	; 15
    4e64:	49 e4       	ldi	r20, 0x49	; 73
    4e66:	50 e4       	ldi	r21, 0x40	; 64
    4e68:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    4e6c:	20 e0       	ldi	r18, 0x00	; 0
    4e6e:	38 ec       	ldi	r19, 0xC8	; 200
    4e70:	4f e2       	ldi	r20, 0x2F	; 47
    4e72:	58 e4       	ldi	r21, 0x48	; 72
    4e74:	0e 94 3a 56 	call	0xac74	; 0xac74 <__divsf3>
    4e78:	6a 83       	std	Y+2, r22	; 0x02
    4e7a:	7b 83       	std	Y+3, r23	; 0x03
    4e7c:	8c 83       	std	Y+4, r24	; 0x04
    4e7e:	9d 83       	std	Y+5, r25	; 0x05
					float rads_y = (l_twi1_gyro_1_gyro_y_mdps * M_PI) / 180000.f;
    4e80:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4e82:	7f 8d       	ldd	r23, Y+31	; 0x1f
    4e84:	88 a1       	ldd	r24, Y+32	; 0x20
    4e86:	99 a1       	ldd	r25, Y+33	; 0x21
    4e88:	0e 94 d5 56 	call	0xadaa	; 0xadaa <__floatsisf>
    4e8c:	2b ed       	ldi	r18, 0xDB	; 219
    4e8e:	3f e0       	ldi	r19, 0x0F	; 15
    4e90:	49 e4       	ldi	r20, 0x49	; 73
    4e92:	50 e4       	ldi	r21, 0x40	; 64
    4e94:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    4e98:	20 e0       	ldi	r18, 0x00	; 0
    4e9a:	38 ec       	ldi	r19, 0xC8	; 200
    4e9c:	4f e2       	ldi	r20, 0x2F	; 47
    4e9e:	58 e4       	ldi	r21, 0x48	; 72
    4ea0:	0e 94 3a 56 	call	0xac74	; 0xac74 <__divsf3>
    4ea4:	4b 01       	movw	r8, r22
    4ea6:	5c 01       	movw	r10, r24
					float rads_z = (l_twi1_gyro_1_gyro_z_mdps * M_PI) / 180000.f;
    4ea8:	c3 01       	movw	r24, r6
    4eaa:	b2 01       	movw	r22, r4
    4eac:	0e 94 d5 56 	call	0xadaa	; 0xadaa <__floatsisf>
    4eb0:	2b ed       	ldi	r18, 0xDB	; 219
    4eb2:	3f e0       	ldi	r19, 0x0F	; 15
    4eb4:	49 e4       	ldi	r20, 0x49	; 73
    4eb6:	50 e4       	ldi	r21, 0x40	; 64
    4eb8:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	38 ec       	ldi	r19, 0xC8	; 200
    4ec0:	4f e2       	ldi	r20, 0x2F	; 47
    4ec2:	58 e4       	ldi	r21, 0x48	; 72
    4ec4:	0e 94 3a 56 	call	0xac74	; 0xac74 <__divsf3>
    4ec8:	6b 01       	movw	r12, r22
    4eca:	7c 01       	movw	r14, r24
					task_twi2_lcd_circ(plot_gyro_center_x_X, plot_gyro_center_y, plot_gyro_radius, false, 1);
					task_twi2_lcd_circ(plot_gyro_center_x_Y, plot_gyro_center_y, plot_gyro_radius, false, 1);
					task_twi2_lcd_circ(plot_gyro_center_x_Z, plot_gyro_center_y, plot_gyro_radius, false, 1);
					#endif

					task_twi2_lcd_line(plot_gyro_center_x_X, plot_gyro_center_y, plot_gyro_center_x_X - plot_gyro_radius * sin(rads_x), plot_gyro_center_y - plot_gyro_radius * cos(rads_x), 1);
    4ecc:	6a 81       	ldd	r22, Y+2	; 0x02
    4ece:	7b 81       	ldd	r23, Y+3	; 0x03
    4ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    4ed4:	0e 94 37 56 	call	0xac6e	; 0xac6e <cos>
    4ed8:	6e 83       	std	Y+6, r22	; 0x06
    4eda:	7f 83       	std	Y+7, r23	; 0x07
    4edc:	88 87       	std	Y+8, r24	; 0x08
    4ede:	99 87       	std	Y+9, r25	; 0x09
    4ee0:	6a 81       	ldd	r22, Y+2	; 0x02
    4ee2:	7b 81       	ldd	r23, Y+3	; 0x03
    4ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ee8:	0e 94 fd 57 	call	0xaffa	; 0xaffa <sin>
    4eec:	2b 01       	movw	r4, r22
    4eee:	3c 01       	movw	r6, r24
    4ef0:	20 e0       	ldi	r18, 0x00	; 0
    4ef2:	30 e0       	ldi	r19, 0x00	; 0
    4ef4:	40 e6       	ldi	r20, 0x60	; 96
    4ef6:	51 e4       	ldi	r21, 0x41	; 65
    4ef8:	6e 81       	ldd	r22, Y+6	; 0x06
    4efa:	7f 81       	ldd	r23, Y+7	; 0x07
    4efc:	88 85       	ldd	r24, Y+8	; 0x08
    4efe:	99 85       	ldd	r25, Y+9	; 0x09
    4f00:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    4f04:	9b 01       	movw	r18, r22
    4f06:	ac 01       	movw	r20, r24
    4f08:	60 e0       	ldi	r22, 0x00	; 0
    4f0a:	70 e0       	ldi	r23, 0x00	; 0
    4f0c:	88 ec       	ldi	r24, 0xC8	; 200
    4f0e:	92 e4       	ldi	r25, 0x42	; 66
    4f10:	0e 94 d2 55 	call	0xaba4	; 0xaba4 <__subsf3>
    4f14:	0e 94 a7 56 	call	0xad4e	; 0xad4e <__fixunssfsi>
    4f18:	16 2f       	mov	r17, r22
    4f1a:	20 e0       	ldi	r18, 0x00	; 0
    4f1c:	30 e0       	ldi	r19, 0x00	; 0
    4f1e:	40 e6       	ldi	r20, 0x60	; 96
    4f20:	51 e4       	ldi	r21, 0x41	; 65
    4f22:	c3 01       	movw	r24, r6
    4f24:	b2 01       	movw	r22, r4
    4f26:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    4f2a:	9b 01       	movw	r18, r22
    4f2c:	ac 01       	movw	r20, r24
    4f2e:	60 e0       	ldi	r22, 0x00	; 0
    4f30:	70 e0       	ldi	r23, 0x00	; 0
    4f32:	86 e1       	ldi	r24, 0x16	; 22
    4f34:	93 e4       	ldi	r25, 0x43	; 67
    4f36:	0e 94 d2 55 	call	0xaba4	; 0xaba4 <__subsf3>
    4f3a:	0e 94 a7 56 	call	0xad4e	; 0xad4e <__fixunssfsi>
    4f3e:	46 2f       	mov	r20, r22
    4f40:	21 2f       	mov	r18, r17
    4f42:	64 e6       	ldi	r22, 0x64	; 100
    4f44:	86 e9       	ldi	r24, 0x96	; 150
    4f46:	0e 94 27 18 	call	0x304e	; 0x304e <task_twi2_lcd_line>
					task_twi2_lcd_line(plot_gyro_center_x_Y, plot_gyro_center_y, plot_gyro_center_x_Y + plot_gyro_radius * sin(rads_y), plot_gyro_center_y - plot_gyro_radius * cos(rads_y), 1);
    4f4a:	c5 01       	movw	r24, r10
    4f4c:	b4 01       	movw	r22, r8
    4f4e:	0e 94 37 56 	call	0xac6e	; 0xac6e <cos>
    4f52:	2b 01       	movw	r4, r22
    4f54:	3c 01       	movw	r6, r24
    4f56:	c5 01       	movw	r24, r10
    4f58:	b4 01       	movw	r22, r8
    4f5a:	0e 94 fd 57 	call	0xaffa	; 0xaffa <sin>
    4f5e:	4b 01       	movw	r8, r22
    4f60:	5c 01       	movw	r10, r24
    4f62:	20 e0       	ldi	r18, 0x00	; 0
    4f64:	30 e0       	ldi	r19, 0x00	; 0
    4f66:	40 e6       	ldi	r20, 0x60	; 96
    4f68:	51 e4       	ldi	r21, 0x41	; 65
    4f6a:	c3 01       	movw	r24, r6
    4f6c:	b2 01       	movw	r22, r4
    4f6e:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    4f72:	9b 01       	movw	r18, r22
    4f74:	ac 01       	movw	r20, r24
    4f76:	60 e0       	ldi	r22, 0x00	; 0
    4f78:	70 e0       	ldi	r23, 0x00	; 0
    4f7a:	88 ec       	ldi	r24, 0xC8	; 200
    4f7c:	92 e4       	ldi	r25, 0x42	; 66
    4f7e:	0e 94 d2 55 	call	0xaba4	; 0xaba4 <__subsf3>
    4f82:	0e 94 a7 56 	call	0xad4e	; 0xad4e <__fixunssfsi>
    4f86:	16 2f       	mov	r17, r22
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	40 e6       	ldi	r20, 0x60	; 96
    4f8e:	51 e4       	ldi	r21, 0x41	; 65
    4f90:	c5 01       	movw	r24, r10
    4f92:	b4 01       	movw	r22, r8
    4f94:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    4f98:	20 e0       	ldi	r18, 0x00	; 0
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	44 e3       	ldi	r20, 0x34	; 52
    4f9e:	53 e4       	ldi	r21, 0x43	; 67
    4fa0:	0e 94 d3 55 	call	0xaba6	; 0xaba6 <__addsf3>
    4fa4:	0e 94 a7 56 	call	0xad4e	; 0xad4e <__fixunssfsi>
    4fa8:	46 2f       	mov	r20, r22
    4faa:	21 2f       	mov	r18, r17
    4fac:	64 e6       	ldi	r22, 0x64	; 100
    4fae:	84 eb       	ldi	r24, 0xB4	; 180
    4fb0:	0e 94 27 18 	call	0x304e	; 0x304e <task_twi2_lcd_line>
					task_twi2_lcd_line(plot_gyro_center_x_Z, plot_gyro_center_y, plot_gyro_center_x_Z - plot_gyro_radius * sin(rads_z), plot_gyro_center_y - plot_gyro_radius * cos(rads_z), 1);
    4fb4:	c7 01       	movw	r24, r14
    4fb6:	b6 01       	movw	r22, r12
    4fb8:	0e 94 37 56 	call	0xac6e	; 0xac6e <cos>
    4fbc:	4b 01       	movw	r8, r22
    4fbe:	5c 01       	movw	r10, r24
    4fc0:	c7 01       	movw	r24, r14
    4fc2:	b6 01       	movw	r22, r12
    4fc4:	0e 94 fd 57 	call	0xaffa	; 0xaffa <sin>
    4fc8:	6b 01       	movw	r12, r22
    4fca:	7c 01       	movw	r14, r24
    4fcc:	20 e0       	ldi	r18, 0x00	; 0
    4fce:	30 e0       	ldi	r19, 0x00	; 0
    4fd0:	40 e6       	ldi	r20, 0x60	; 96
    4fd2:	51 e4       	ldi	r21, 0x41	; 65
    4fd4:	c5 01       	movw	r24, r10
    4fd6:	b4 01       	movw	r22, r8
    4fd8:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    4fdc:	9b 01       	movw	r18, r22
    4fde:	ac 01       	movw	r20, r24
    4fe0:	60 e0       	ldi	r22, 0x00	; 0
    4fe2:	70 e0       	ldi	r23, 0x00	; 0
    4fe4:	88 ec       	ldi	r24, 0xC8	; 200
    4fe6:	92 e4       	ldi	r25, 0x42	; 66
    4fe8:	0e 94 d2 55 	call	0xaba4	; 0xaba4 <__subsf3>
    4fec:	0e 94 a7 56 	call	0xad4e	; 0xad4e <__fixunssfsi>
    4ff0:	16 2f       	mov	r17, r22
    4ff2:	20 e0       	ldi	r18, 0x00	; 0
    4ff4:	30 e0       	ldi	r19, 0x00	; 0
    4ff6:	40 e6       	ldi	r20, 0x60	; 96
    4ff8:	51 e4       	ldi	r21, 0x41	; 65
    4ffa:	c7 01       	movw	r24, r14
    4ffc:	b6 01       	movw	r22, r12
    4ffe:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    5002:	9b 01       	movw	r18, r22
    5004:	ac 01       	movw	r20, r24
    5006:	60 e0       	ldi	r22, 0x00	; 0
    5008:	70 e0       	ldi	r23, 0x00	; 0
    500a:	82 e5       	ldi	r24, 0x52	; 82
    500c:	93 e4       	ldi	r25, 0x43	; 67
    500e:	0e 94 d2 55 	call	0xaba4	; 0xaba4 <__subsf3>
    5012:	0e 94 a7 56 	call	0xad4e	; 0xad4e <__fixunssfsi>
    5016:	46 2f       	mov	r20, r22
    5018:	21 2f       	mov	r18, r17
    501a:	64 e6       	ldi	r22, 0x64	; 100
    501c:	82 ed       	ldi	r24, 0xD2	; 210
    501e:	0e 94 27 18 	call	0x304e	; 0x304e <task_twi2_lcd_line>
    5022:	1f c0       	rjmp	.+62     	; 0x5062 <task_twi2_lcd+0x81a>
				task_twi2_lcd_cls();
			}
		}
		#endif

	} else if (g_twi2_lcd_version == 0x10) {
    5024:	20 31       	cpi	r18, 0x10	; 16
    5026:	e9 f4       	brne	.+58     	; 0x5062 <task_twi2_lcd+0x81a>
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi2_waitUntilReady();
    5028:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <twi2_waitUntilReady>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
    502c:	eb e0       	ldi	r30, 0x0B	; 11
    502e:	f0 e2       	ldi	r31, 0x20	; 32
    5030:	84 e8       	ldi	r24, 0x84	; 132
    5032:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[0] = 1;
    5034:	a7 e9       	ldi	r26, 0x97	; 151
    5036:	b8 e2       	ldi	r27, 0x28	; 40
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	8c 93       	st	X, r24
		twi2_m_data[1] = 128;
    503c:	80 e8       	ldi	r24, 0x80	; 128
    503e:	11 96       	adiw	r26, 0x01	; 1
    5040:	8c 93       	st	X, r24
		twi2_packet.length = 2;
    5042:	82 e0       	ldi	r24, 0x02	; 2
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	80 87       	std	Z+8, r24	; 0x08
    5048:	91 87       	std	Z+9, r25	; 0x09
    504a:	40 e0       	ldi	r20, 0x00	; 0
    504c:	bf 01       	movw	r22, r30
    504e:	80 e8       	ldi	r24, 0x80	; 128
    5050:	94 e0       	ldi	r25, 0x04	; 4
    5052:	0e 94 7e 34 	call	0x68fc	; 0x68fc <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
    5056:	69 e8       	ldi	r22, 0x89	; 137
    5058:	73 e1       	ldi	r23, 0x13	; 19
    505a:	80 e0       	ldi	r24, 0x00	; 0
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__portable_avr_delay_cycles>
	}
}
    5062:	ad 96       	adiw	r28, 0x2d	; 45
    5064:	cd bf       	out	0x3d, r28	; 61
    5066:	de bf       	out	0x3e, r29	; 62
    5068:	df 91       	pop	r29
    506a:	cf 91       	pop	r28
    506c:	1f 91       	pop	r17
    506e:	0f 91       	pop	r16
    5070:	ff 90       	pop	r15
    5072:	ef 90       	pop	r14
    5074:	df 90       	pop	r13
    5076:	cf 90       	pop	r12
    5078:	bf 90       	pop	r11
    507a:	af 90       	pop	r10
    507c:	9f 90       	pop	r9
    507e:	8f 90       	pop	r8
    5080:	7f 90       	pop	r7
    5082:	6f 90       	pop	r6
    5084:	5f 90       	pop	r5
    5086:	4f 90       	pop	r4
    5088:	3f 90       	pop	r3
    508a:	2f 90       	pop	r2
    508c:	08 95       	ret

0000508e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    508e:	08 95       	ret

00005090 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    5090:	cf 93       	push	r28
    5092:	df 93       	push	r29
    5094:	1f 92       	push	r1
    5096:	cd b7       	in	r28, 0x3d	; 61
    5098:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    509a:	2f b7       	in	r18, 0x3f	; 63
    509c:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    509e:	f8 94       	cli
	return flags;
    50a0:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    50a2:	28 2f       	mov	r18, r24
    50a4:	39 2f       	mov	r19, r25
    50a6:	21 15       	cp	r18, r1
    50a8:	82 e0       	ldi	r24, 0x02	; 2
    50aa:	38 07       	cpc	r19, r24
    50ac:	29 f4       	brne	.+10     	; 0x50b8 <adc_set_callback+0x28>
		adca_callback = callback;
    50ae:	60 93 d3 2a 	sts	0x2AD3, r22	; 0x802ad3 <adca_callback>
    50b2:	70 93 d4 2a 	sts	0x2AD4, r23	; 0x802ad4 <adca_callback+0x1>
    50b6:	07 c0       	rjmp	.+14     	; 0x50c6 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    50b8:	20 34       	cpi	r18, 0x40	; 64
    50ba:	32 40       	sbci	r19, 0x02	; 2
    50bc:	21 f4       	brne	.+8      	; 0x50c6 <adc_set_callback+0x36>
		adcb_callback = callback;
    50be:	60 93 d1 2a 	sts	0x2AD1, r22	; 0x802ad1 <adcb_callback>
    50c2:	70 93 d2 2a 	sts	0x2AD2, r23	; 0x802ad2 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    50c6:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    50c8:	0f 90       	pop	r0
    50ca:	df 91       	pop	r29
    50cc:	cf 91       	pop	r28
    50ce:	08 95       	ret

000050d0 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    50d0:	81 15       	cp	r24, r1
    50d2:	22 e0       	ldi	r18, 0x02	; 2
    50d4:	92 07       	cpc	r25, r18
    50d6:	69 f4       	brne	.+26     	; 0x50f2 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    50d8:	80 91 99 26 	lds	r24, 0x2699	; 0x802699 <adca_enable_count>
    50dc:	91 e0       	ldi	r25, 0x01	; 1
    50de:	98 0f       	add	r25, r24
    50e0:	90 93 99 26 	sts	0x2699, r25	; 0x802699 <adca_enable_count>
    50e4:	81 11       	cpse	r24, r1
    50e6:	14 c0       	rjmp	.+40     	; 0x5110 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    50e8:	62 e0       	ldi	r22, 0x02	; 2
    50ea:	81 e0       	ldi	r24, 0x01	; 1
    50ec:	0c 94 a7 4b 	jmp	0x974e	; 0x974e <sysclk_enable_module>
    50f0:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    50f2:	80 34       	cpi	r24, 0x40	; 64
    50f4:	92 40       	sbci	r25, 0x02	; 2
    50f6:	61 f4       	brne	.+24     	; 0x5110 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    50f8:	80 91 98 26 	lds	r24, 0x2698	; 0x802698 <adcb_enable_count>
    50fc:	91 e0       	ldi	r25, 0x01	; 1
    50fe:	98 0f       	add	r25, r24
    5100:	90 93 98 26 	sts	0x2698, r25	; 0x802698 <adcb_enable_count>
    5104:	81 11       	cpse	r24, r1
    5106:	04 c0       	rjmp	.+8      	; 0x5110 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    5108:	62 e0       	ldi	r22, 0x02	; 2
    510a:	82 e0       	ldi	r24, 0x02	; 2
    510c:	0c 94 a7 4b 	jmp	0x974e	; 0x974e <sysclk_enable_module>
    5110:	08 95       	ret

00005112 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    5112:	81 15       	cp	r24, r1
    5114:	22 e0       	ldi	r18, 0x02	; 2
    5116:	92 07       	cpc	r25, r18
    5118:	61 f4       	brne	.+24     	; 0x5132 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    511a:	80 91 99 26 	lds	r24, 0x2699	; 0x802699 <adca_enable_count>
    511e:	81 50       	subi	r24, 0x01	; 1
    5120:	80 93 99 26 	sts	0x2699, r24	; 0x802699 <adca_enable_count>
    5124:	81 11       	cpse	r24, r1
    5126:	13 c0       	rjmp	.+38     	; 0x514e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    5128:	62 e0       	ldi	r22, 0x02	; 2
    512a:	81 e0       	ldi	r24, 0x01	; 1
    512c:	0c 94 bd 4b 	jmp	0x977a	; 0x977a <sysclk_disable_module>
    5130:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    5132:	80 34       	cpi	r24, 0x40	; 64
    5134:	92 40       	sbci	r25, 0x02	; 2
    5136:	59 f4       	brne	.+22     	; 0x514e <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    5138:	80 91 98 26 	lds	r24, 0x2698	; 0x802698 <adcb_enable_count>
    513c:	81 50       	subi	r24, 0x01	; 1
    513e:	80 93 98 26 	sts	0x2698, r24	; 0x802698 <adcb_enable_count>
    5142:	81 11       	cpse	r24, r1
    5144:	04 c0       	rjmp	.+8      	; 0x514e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    5146:	62 e0       	ldi	r22, 0x02	; 2
    5148:	82 e0       	ldi	r24, 0x02	; 2
    514a:	0c 94 bd 4b 	jmp	0x977a	; 0x977a <sysclk_disable_module>
    514e:	08 95       	ret

00005150 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    5150:	ef 92       	push	r14
    5152:	ff 92       	push	r15
    5154:	1f 93       	push	r17
    5156:	cf 93       	push	r28
    5158:	df 93       	push	r29
    515a:	1f 92       	push	r1
    515c:	1f 92       	push	r1
    515e:	cd b7       	in	r28, 0x3d	; 61
    5160:	de b7       	in	r29, 0x3e	; 62
    5162:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5164:	8f b7       	in	r24, 0x3f	; 63
    5166:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5168:	f8 94       	cli
	return flags;
    516a:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    516c:	c7 01       	movw	r24, r14
    516e:	b0 df       	rcall	.-160    	; 0x50d0 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    5170:	f7 01       	movw	r30, r14
    5172:	80 81       	ld	r24, Z
    5174:	81 60       	ori	r24, 0x01	; 1
    5176:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5178:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    517a:	80 91 e6 2a 	lds	r24, 0x2AE6	; 0x802ae6 <sleepmgr_locks+0x1>
    517e:	8f 3f       	cpi	r24, 0xFF	; 255
    5180:	09 f4       	brne	.+2      	; 0x5184 <adc_enable+0x34>
    5182:	ff cf       	rjmp	.-2      	; 0x5182 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5184:	8f b7       	in	r24, 0x3f	; 63
    5186:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    5188:	f8 94       	cli
	return flags;
    518a:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    518c:	e5 ee       	ldi	r30, 0xE5	; 229
    518e:	fa e2       	ldi	r31, 0x2A	; 42
    5190:	81 81       	ldd	r24, Z+1	; 0x01
    5192:	8f 5f       	subi	r24, 0xFF	; 255
    5194:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5196:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    5198:	0f 90       	pop	r0
    519a:	0f 90       	pop	r0
    519c:	df 91       	pop	r29
    519e:	cf 91       	pop	r28
    51a0:	1f 91       	pop	r17
    51a2:	ff 90       	pop	r15
    51a4:	ef 90       	pop	r14
    51a6:	08 95       	ret

000051a8 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    51a8:	1f 92       	push	r1
    51aa:	0f 92       	push	r0
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	0f 92       	push	r0
    51b0:	11 24       	eor	r1, r1
    51b2:	0b b6       	in	r0, 0x3b	; 59
    51b4:	0f 92       	push	r0
    51b6:	2f 93       	push	r18
    51b8:	3f 93       	push	r19
    51ba:	4f 93       	push	r20
    51bc:	5f 93       	push	r21
    51be:	6f 93       	push	r22
    51c0:	7f 93       	push	r23
    51c2:	8f 93       	push	r24
    51c4:	9f 93       	push	r25
    51c6:	af 93       	push	r26
    51c8:	bf 93       	push	r27
    51ca:	ef 93       	push	r30
    51cc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    51ce:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    51d2:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    51d6:	e0 91 d3 2a 	lds	r30, 0x2AD3	; 0x802ad3 <adca_callback>
    51da:	f0 91 d4 2a 	lds	r31, 0x2AD4	; 0x802ad4 <adca_callback+0x1>
    51de:	61 e0       	ldi	r22, 0x01	; 1
    51e0:	80 e0       	ldi	r24, 0x00	; 0
    51e2:	92 e0       	ldi	r25, 0x02	; 2
    51e4:	19 95       	eicall
}
    51e6:	ff 91       	pop	r31
    51e8:	ef 91       	pop	r30
    51ea:	bf 91       	pop	r27
    51ec:	af 91       	pop	r26
    51ee:	9f 91       	pop	r25
    51f0:	8f 91       	pop	r24
    51f2:	7f 91       	pop	r23
    51f4:	6f 91       	pop	r22
    51f6:	5f 91       	pop	r21
    51f8:	4f 91       	pop	r20
    51fa:	3f 91       	pop	r19
    51fc:	2f 91       	pop	r18
    51fe:	0f 90       	pop	r0
    5200:	0b be       	out	0x3b, r0	; 59
    5202:	0f 90       	pop	r0
    5204:	0f be       	out	0x3f, r0	; 63
    5206:	0f 90       	pop	r0
    5208:	1f 90       	pop	r1
    520a:	18 95       	reti

0000520c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    520c:	1f 92       	push	r1
    520e:	0f 92       	push	r0
    5210:	0f b6       	in	r0, 0x3f	; 63
    5212:	0f 92       	push	r0
    5214:	11 24       	eor	r1, r1
    5216:	0b b6       	in	r0, 0x3b	; 59
    5218:	0f 92       	push	r0
    521a:	2f 93       	push	r18
    521c:	3f 93       	push	r19
    521e:	4f 93       	push	r20
    5220:	5f 93       	push	r21
    5222:	6f 93       	push	r22
    5224:	7f 93       	push	r23
    5226:	8f 93       	push	r24
    5228:	9f 93       	push	r25
    522a:	af 93       	push	r26
    522c:	bf 93       	push	r27
    522e:	ef 93       	push	r30
    5230:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    5232:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    5236:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    523a:	e0 91 d3 2a 	lds	r30, 0x2AD3	; 0x802ad3 <adca_callback>
    523e:	f0 91 d4 2a 	lds	r31, 0x2AD4	; 0x802ad4 <adca_callback+0x1>
    5242:	62 e0       	ldi	r22, 0x02	; 2
    5244:	80 e0       	ldi	r24, 0x00	; 0
    5246:	92 e0       	ldi	r25, 0x02	; 2
    5248:	19 95       	eicall
}
    524a:	ff 91       	pop	r31
    524c:	ef 91       	pop	r30
    524e:	bf 91       	pop	r27
    5250:	af 91       	pop	r26
    5252:	9f 91       	pop	r25
    5254:	8f 91       	pop	r24
    5256:	7f 91       	pop	r23
    5258:	6f 91       	pop	r22
    525a:	5f 91       	pop	r21
    525c:	4f 91       	pop	r20
    525e:	3f 91       	pop	r19
    5260:	2f 91       	pop	r18
    5262:	0f 90       	pop	r0
    5264:	0b be       	out	0x3b, r0	; 59
    5266:	0f 90       	pop	r0
    5268:	0f be       	out	0x3f, r0	; 63
    526a:	0f 90       	pop	r0
    526c:	1f 90       	pop	r1
    526e:	18 95       	reti

00005270 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    5270:	1f 92       	push	r1
    5272:	0f 92       	push	r0
    5274:	0f b6       	in	r0, 0x3f	; 63
    5276:	0f 92       	push	r0
    5278:	11 24       	eor	r1, r1
    527a:	0b b6       	in	r0, 0x3b	; 59
    527c:	0f 92       	push	r0
    527e:	2f 93       	push	r18
    5280:	3f 93       	push	r19
    5282:	4f 93       	push	r20
    5284:	5f 93       	push	r21
    5286:	6f 93       	push	r22
    5288:	7f 93       	push	r23
    528a:	8f 93       	push	r24
    528c:	9f 93       	push	r25
    528e:	af 93       	push	r26
    5290:	bf 93       	push	r27
    5292:	ef 93       	push	r30
    5294:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    5296:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    529a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    529e:	e0 91 d3 2a 	lds	r30, 0x2AD3	; 0x802ad3 <adca_callback>
    52a2:	f0 91 d4 2a 	lds	r31, 0x2AD4	; 0x802ad4 <adca_callback+0x1>
    52a6:	64 e0       	ldi	r22, 0x04	; 4
    52a8:	80 e0       	ldi	r24, 0x00	; 0
    52aa:	92 e0       	ldi	r25, 0x02	; 2
    52ac:	19 95       	eicall
}
    52ae:	ff 91       	pop	r31
    52b0:	ef 91       	pop	r30
    52b2:	bf 91       	pop	r27
    52b4:	af 91       	pop	r26
    52b6:	9f 91       	pop	r25
    52b8:	8f 91       	pop	r24
    52ba:	7f 91       	pop	r23
    52bc:	6f 91       	pop	r22
    52be:	5f 91       	pop	r21
    52c0:	4f 91       	pop	r20
    52c2:	3f 91       	pop	r19
    52c4:	2f 91       	pop	r18
    52c6:	0f 90       	pop	r0
    52c8:	0b be       	out	0x3b, r0	; 59
    52ca:	0f 90       	pop	r0
    52cc:	0f be       	out	0x3f, r0	; 63
    52ce:	0f 90       	pop	r0
    52d0:	1f 90       	pop	r1
    52d2:	18 95       	reti

000052d4 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    52d4:	1f 92       	push	r1
    52d6:	0f 92       	push	r0
    52d8:	0f b6       	in	r0, 0x3f	; 63
    52da:	0f 92       	push	r0
    52dc:	11 24       	eor	r1, r1
    52de:	0b b6       	in	r0, 0x3b	; 59
    52e0:	0f 92       	push	r0
    52e2:	2f 93       	push	r18
    52e4:	3f 93       	push	r19
    52e6:	4f 93       	push	r20
    52e8:	5f 93       	push	r21
    52ea:	6f 93       	push	r22
    52ec:	7f 93       	push	r23
    52ee:	8f 93       	push	r24
    52f0:	9f 93       	push	r25
    52f2:	af 93       	push	r26
    52f4:	bf 93       	push	r27
    52f6:	ef 93       	push	r30
    52f8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    52fa:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    52fe:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    5302:	e0 91 d3 2a 	lds	r30, 0x2AD3	; 0x802ad3 <adca_callback>
    5306:	f0 91 d4 2a 	lds	r31, 0x2AD4	; 0x802ad4 <adca_callback+0x1>
    530a:	68 e0       	ldi	r22, 0x08	; 8
    530c:	80 e0       	ldi	r24, 0x00	; 0
    530e:	92 e0       	ldi	r25, 0x02	; 2
    5310:	19 95       	eicall
}
    5312:	ff 91       	pop	r31
    5314:	ef 91       	pop	r30
    5316:	bf 91       	pop	r27
    5318:	af 91       	pop	r26
    531a:	9f 91       	pop	r25
    531c:	8f 91       	pop	r24
    531e:	7f 91       	pop	r23
    5320:	6f 91       	pop	r22
    5322:	5f 91       	pop	r21
    5324:	4f 91       	pop	r20
    5326:	3f 91       	pop	r19
    5328:	2f 91       	pop	r18
    532a:	0f 90       	pop	r0
    532c:	0b be       	out	0x3b, r0	; 59
    532e:	0f 90       	pop	r0
    5330:	0f be       	out	0x3f, r0	; 63
    5332:	0f 90       	pop	r0
    5334:	1f 90       	pop	r1
    5336:	18 95       	reti

00005338 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    5338:	1f 92       	push	r1
    533a:	0f 92       	push	r0
    533c:	0f b6       	in	r0, 0x3f	; 63
    533e:	0f 92       	push	r0
    5340:	11 24       	eor	r1, r1
    5342:	0b b6       	in	r0, 0x3b	; 59
    5344:	0f 92       	push	r0
    5346:	2f 93       	push	r18
    5348:	3f 93       	push	r19
    534a:	4f 93       	push	r20
    534c:	5f 93       	push	r21
    534e:	6f 93       	push	r22
    5350:	7f 93       	push	r23
    5352:	8f 93       	push	r24
    5354:	9f 93       	push	r25
    5356:	af 93       	push	r26
    5358:	bf 93       	push	r27
    535a:	ef 93       	push	r30
    535c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    535e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    5362:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    5366:	e0 91 d1 2a 	lds	r30, 0x2AD1	; 0x802ad1 <adcb_callback>
    536a:	f0 91 d2 2a 	lds	r31, 0x2AD2	; 0x802ad2 <adcb_callback+0x1>
    536e:	61 e0       	ldi	r22, 0x01	; 1
    5370:	80 e4       	ldi	r24, 0x40	; 64
    5372:	92 e0       	ldi	r25, 0x02	; 2
    5374:	19 95       	eicall
}
    5376:	ff 91       	pop	r31
    5378:	ef 91       	pop	r30
    537a:	bf 91       	pop	r27
    537c:	af 91       	pop	r26
    537e:	9f 91       	pop	r25
    5380:	8f 91       	pop	r24
    5382:	7f 91       	pop	r23
    5384:	6f 91       	pop	r22
    5386:	5f 91       	pop	r21
    5388:	4f 91       	pop	r20
    538a:	3f 91       	pop	r19
    538c:	2f 91       	pop	r18
    538e:	0f 90       	pop	r0
    5390:	0b be       	out	0x3b, r0	; 59
    5392:	0f 90       	pop	r0
    5394:	0f be       	out	0x3f, r0	; 63
    5396:	0f 90       	pop	r0
    5398:	1f 90       	pop	r1
    539a:	18 95       	reti

0000539c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    539c:	1f 92       	push	r1
    539e:	0f 92       	push	r0
    53a0:	0f b6       	in	r0, 0x3f	; 63
    53a2:	0f 92       	push	r0
    53a4:	11 24       	eor	r1, r1
    53a6:	0b b6       	in	r0, 0x3b	; 59
    53a8:	0f 92       	push	r0
    53aa:	2f 93       	push	r18
    53ac:	3f 93       	push	r19
    53ae:	4f 93       	push	r20
    53b0:	5f 93       	push	r21
    53b2:	6f 93       	push	r22
    53b4:	7f 93       	push	r23
    53b6:	8f 93       	push	r24
    53b8:	9f 93       	push	r25
    53ba:	af 93       	push	r26
    53bc:	bf 93       	push	r27
    53be:	ef 93       	push	r30
    53c0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    53c2:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    53c6:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    53ca:	e0 91 d1 2a 	lds	r30, 0x2AD1	; 0x802ad1 <adcb_callback>
    53ce:	f0 91 d2 2a 	lds	r31, 0x2AD2	; 0x802ad2 <adcb_callback+0x1>
    53d2:	62 e0       	ldi	r22, 0x02	; 2
    53d4:	80 e4       	ldi	r24, 0x40	; 64
    53d6:	92 e0       	ldi	r25, 0x02	; 2
    53d8:	19 95       	eicall
}
    53da:	ff 91       	pop	r31
    53dc:	ef 91       	pop	r30
    53de:	bf 91       	pop	r27
    53e0:	af 91       	pop	r26
    53e2:	9f 91       	pop	r25
    53e4:	8f 91       	pop	r24
    53e6:	7f 91       	pop	r23
    53e8:	6f 91       	pop	r22
    53ea:	5f 91       	pop	r21
    53ec:	4f 91       	pop	r20
    53ee:	3f 91       	pop	r19
    53f0:	2f 91       	pop	r18
    53f2:	0f 90       	pop	r0
    53f4:	0b be       	out	0x3b, r0	; 59
    53f6:	0f 90       	pop	r0
    53f8:	0f be       	out	0x3f, r0	; 63
    53fa:	0f 90       	pop	r0
    53fc:	1f 90       	pop	r1
    53fe:	18 95       	reti

00005400 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    5400:	1f 92       	push	r1
    5402:	0f 92       	push	r0
    5404:	0f b6       	in	r0, 0x3f	; 63
    5406:	0f 92       	push	r0
    5408:	11 24       	eor	r1, r1
    540a:	0b b6       	in	r0, 0x3b	; 59
    540c:	0f 92       	push	r0
    540e:	2f 93       	push	r18
    5410:	3f 93       	push	r19
    5412:	4f 93       	push	r20
    5414:	5f 93       	push	r21
    5416:	6f 93       	push	r22
    5418:	7f 93       	push	r23
    541a:	8f 93       	push	r24
    541c:	9f 93       	push	r25
    541e:	af 93       	push	r26
    5420:	bf 93       	push	r27
    5422:	ef 93       	push	r30
    5424:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    5426:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    542a:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    542e:	e0 91 d1 2a 	lds	r30, 0x2AD1	; 0x802ad1 <adcb_callback>
    5432:	f0 91 d2 2a 	lds	r31, 0x2AD2	; 0x802ad2 <adcb_callback+0x1>
    5436:	64 e0       	ldi	r22, 0x04	; 4
    5438:	80 e4       	ldi	r24, 0x40	; 64
    543a:	92 e0       	ldi	r25, 0x02	; 2
    543c:	19 95       	eicall
}
    543e:	ff 91       	pop	r31
    5440:	ef 91       	pop	r30
    5442:	bf 91       	pop	r27
    5444:	af 91       	pop	r26
    5446:	9f 91       	pop	r25
    5448:	8f 91       	pop	r24
    544a:	7f 91       	pop	r23
    544c:	6f 91       	pop	r22
    544e:	5f 91       	pop	r21
    5450:	4f 91       	pop	r20
    5452:	3f 91       	pop	r19
    5454:	2f 91       	pop	r18
    5456:	0f 90       	pop	r0
    5458:	0b be       	out	0x3b, r0	; 59
    545a:	0f 90       	pop	r0
    545c:	0f be       	out	0x3f, r0	; 63
    545e:	0f 90       	pop	r0
    5460:	1f 90       	pop	r1
    5462:	18 95       	reti

00005464 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    5464:	1f 92       	push	r1
    5466:	0f 92       	push	r0
    5468:	0f b6       	in	r0, 0x3f	; 63
    546a:	0f 92       	push	r0
    546c:	11 24       	eor	r1, r1
    546e:	0b b6       	in	r0, 0x3b	; 59
    5470:	0f 92       	push	r0
    5472:	2f 93       	push	r18
    5474:	3f 93       	push	r19
    5476:	4f 93       	push	r20
    5478:	5f 93       	push	r21
    547a:	6f 93       	push	r22
    547c:	7f 93       	push	r23
    547e:	8f 93       	push	r24
    5480:	9f 93       	push	r25
    5482:	af 93       	push	r26
    5484:	bf 93       	push	r27
    5486:	ef 93       	push	r30
    5488:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    548a:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    548e:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    5492:	e0 91 d1 2a 	lds	r30, 0x2AD1	; 0x802ad1 <adcb_callback>
    5496:	f0 91 d2 2a 	lds	r31, 0x2AD2	; 0x802ad2 <adcb_callback+0x1>
    549a:	68 e0       	ldi	r22, 0x08	; 8
    549c:	80 e4       	ldi	r24, 0x40	; 64
    549e:	92 e0       	ldi	r25, 0x02	; 2
    54a0:	19 95       	eicall
}
    54a2:	ff 91       	pop	r31
    54a4:	ef 91       	pop	r30
    54a6:	bf 91       	pop	r27
    54a8:	af 91       	pop	r26
    54aa:	9f 91       	pop	r25
    54ac:	8f 91       	pop	r24
    54ae:	7f 91       	pop	r23
    54b0:	6f 91       	pop	r22
    54b2:	5f 91       	pop	r21
    54b4:	4f 91       	pop	r20
    54b6:	3f 91       	pop	r19
    54b8:	2f 91       	pop	r18
    54ba:	0f 90       	pop	r0
    54bc:	0b be       	out	0x3b, r0	; 59
    54be:	0f 90       	pop	r0
    54c0:	0f be       	out	0x3f, r0	; 63
    54c2:	0f 90       	pop	r0
    54c4:	1f 90       	pop	r1
    54c6:	18 95       	reti

000054c8 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    54c8:	bf 92       	push	r11
    54ca:	cf 92       	push	r12
    54cc:	df 92       	push	r13
    54ce:	ef 92       	push	r14
    54d0:	ff 92       	push	r15
    54d2:	0f 93       	push	r16
    54d4:	1f 93       	push	r17
    54d6:	cf 93       	push	r28
    54d8:	df 93       	push	r29
    54da:	1f 92       	push	r1
    54dc:	cd b7       	in	r28, 0x3d	; 61
    54de:	de b7       	in	r29, 0x3e	; 62
    54e0:	8c 01       	movw	r16, r24
    54e2:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    54e4:	81 15       	cp	r24, r1
    54e6:	22 e0       	ldi	r18, 0x02	; 2
    54e8:	92 07       	cpc	r25, r18
    54ea:	81 f4       	brne	.+32     	; 0x550c <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    54ec:	61 e2       	ldi	r22, 0x21	; 33
    54ee:	70 e0       	ldi	r23, 0x00	; 0
    54f0:	82 e0       	ldi	r24, 0x02	; 2
    54f2:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    54f6:	c8 2e       	mov	r12, r24
    54f8:	d1 2c       	mov	r13, r1
    54fa:	60 e2       	ldi	r22, 0x20	; 32
    54fc:	70 e0       	ldi	r23, 0x00	; 0
    54fe:	82 e0       	ldi	r24, 0x02	; 2
    5500:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    5504:	dc 2c       	mov	r13, r12
    5506:	cc 24       	eor	r12, r12
    5508:	c8 2a       	or	r12, r24
    550a:	12 c0       	rjmp	.+36     	; 0x5530 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    550c:	80 34       	cpi	r24, 0x40	; 64
    550e:	92 40       	sbci	r25, 0x02	; 2
    5510:	d1 f5       	brne	.+116    	; 0x5586 <adc_write_configuration+0xbe>
    5512:	65 e2       	ldi	r22, 0x25	; 37
    5514:	70 e0       	ldi	r23, 0x00	; 0
    5516:	82 e0       	ldi	r24, 0x02	; 2
    5518:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    551c:	c8 2e       	mov	r12, r24
    551e:	d1 2c       	mov	r13, r1
    5520:	64 e2       	ldi	r22, 0x24	; 36
    5522:	70 e0       	ldi	r23, 0x00	; 0
    5524:	82 e0       	ldi	r24, 0x02	; 2
    5526:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    552a:	dc 2c       	mov	r13, r12
    552c:	cc 24       	eor	r12, r12
    552e:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5530:	8f b7       	in	r24, 0x3f	; 63
    5532:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5534:	f8 94       	cli
	return flags;
    5536:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    5538:	c8 01       	movw	r24, r16
    553a:	ca dd       	rcall	.-1132   	; 0x50d0 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    553c:	f8 01       	movw	r30, r16
    553e:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    5540:	92 e0       	ldi	r25, 0x02	; 2
    5542:	90 83       	st	Z, r25
	adc->CAL = cal;
    5544:	c4 86       	std	Z+12, r12	; 0x0c
    5546:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    5548:	f7 01       	movw	r30, r14
    554a:	25 81       	ldd	r18, Z+5	; 0x05
    554c:	36 81       	ldd	r19, Z+6	; 0x06
    554e:	f8 01       	movw	r30, r16
    5550:	20 8f       	std	Z+24, r18	; 0x18
    5552:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    5554:	f7 01       	movw	r30, r14
    5556:	92 81       	ldd	r25, Z+2	; 0x02
    5558:	f8 01       	movw	r30, r16
    555a:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    555c:	f7 01       	movw	r30, r14
    555e:	94 81       	ldd	r25, Z+4	; 0x04
    5560:	f8 01       	movw	r30, r16
    5562:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    5564:	f7 01       	movw	r30, r14
    5566:	93 81       	ldd	r25, Z+3	; 0x03
    5568:	f8 01       	movw	r30, r16
    556a:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    556c:	f7 01       	movw	r30, r14
    556e:	91 81       	ldd	r25, Z+1	; 0x01
    5570:	f8 01       	movw	r30, r16
    5572:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    5574:	81 70       	andi	r24, 0x01	; 1
    5576:	f7 01       	movw	r30, r14
    5578:	90 81       	ld	r25, Z
    557a:	89 2b       	or	r24, r25
    557c:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    557e:	80 83       	st	Z, r24
    5580:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5582:	c7 dd       	rcall	.-1138   	; 0x5112 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    5584:	bf be       	out	0x3f, r11	; 63
    5586:	0f 90       	pop	r0
    5588:	df 91       	pop	r29
    558a:	cf 91       	pop	r28
    558c:	1f 91       	pop	r17
    558e:	0f 91       	pop	r16
    5590:	ff 90       	pop	r15
    5592:	ef 90       	pop	r14
    5594:	df 90       	pop	r13
    5596:	cf 90       	pop	r12
    5598:	bf 90       	pop	r11
    559a:	08 95       	ret

0000559c <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    559c:	df 92       	push	r13
    559e:	ef 92       	push	r14
    55a0:	ff 92       	push	r15
    55a2:	0f 93       	push	r16
    55a4:	1f 93       	push	r17
    55a6:	cf 93       	push	r28
    55a8:	df 93       	push	r29
    55aa:	1f 92       	push	r1
    55ac:	cd b7       	in	r28, 0x3d	; 61
    55ae:	de b7       	in	r29, 0x3e	; 62
    55b0:	8c 01       	movw	r16, r24
    55b2:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    55b4:	8f b7       	in	r24, 0x3f	; 63
    55b6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    55b8:	f8 94       	cli
	return flags;
    55ba:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    55bc:	c8 01       	movw	r24, r16
    55be:	88 dd       	rcall	.-1264   	; 0x50d0 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    55c0:	f8 01       	movw	r30, r16
    55c2:	80 81       	ld	r24, Z
    55c4:	80 7c       	andi	r24, 0xC0	; 192
    55c6:	f7 01       	movw	r30, r14
    55c8:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    55ca:	f8 01       	movw	r30, r16
    55cc:	80 8d       	ldd	r24, Z+24	; 0x18
    55ce:	91 8d       	ldd	r25, Z+25	; 0x19
    55d0:	f7 01       	movw	r30, r14
    55d2:	85 83       	std	Z+5, r24	; 0x05
    55d4:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    55d6:	f8 01       	movw	r30, r16
    55d8:	82 81       	ldd	r24, Z+2	; 0x02
    55da:	f7 01       	movw	r30, r14
    55dc:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    55de:	f8 01       	movw	r30, r16
    55e0:	84 81       	ldd	r24, Z+4	; 0x04
    55e2:	f7 01       	movw	r30, r14
    55e4:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    55e6:	f8 01       	movw	r30, r16
    55e8:	83 81       	ldd	r24, Z+3	; 0x03
    55ea:	f7 01       	movw	r30, r14
    55ec:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    55ee:	f8 01       	movw	r30, r16
    55f0:	81 81       	ldd	r24, Z+1	; 0x01
    55f2:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    55f4:	81 83       	std	Z+1, r24	; 0x01
    55f6:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    55f8:	8c dd       	rcall	.-1256   	; 0x5112 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    55fa:	df be       	out	0x3f, r13	; 63
    55fc:	0f 90       	pop	r0
    55fe:	df 91       	pop	r29
    5600:	cf 91       	pop	r28
    5602:	1f 91       	pop	r17
    5604:	0f 91       	pop	r16
    5606:	ff 90       	pop	r15
    5608:	ef 90       	pop	r14
    560a:	df 90       	pop	r13
    560c:	08 95       	ret

0000560e <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    560e:	af 92       	push	r10
    5610:	bf 92       	push	r11
    5612:	cf 92       	push	r12
    5614:	df 92       	push	r13
    5616:	ef 92       	push	r14
    5618:	ff 92       	push	r15
    561a:	0f 93       	push	r16
    561c:	1f 93       	push	r17
    561e:	cf 93       	push	r28
    5620:	df 93       	push	r29
    5622:	1f 92       	push	r1
    5624:	cd b7       	in	r28, 0x3d	; 61
    5626:	de b7       	in	r29, 0x3e	; 62
    5628:	6c 01       	movw	r12, r24
    562a:	b6 2e       	mov	r11, r22
    562c:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    562e:	86 2f       	mov	r24, r22
    5630:	83 70       	andi	r24, 0x03	; 3
    5632:	29 f4       	brne	.+10     	; 0x563e <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    5634:	96 2f       	mov	r25, r22
    5636:	96 95       	lsr	r25
    5638:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    563a:	82 e0       	ldi	r24, 0x02	; 2
    563c:	02 c0       	rjmp	.+4      	; 0x5642 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    563e:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    5640:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    5642:	90 ff       	sbrs	r25, 0
		index++;
    5644:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    5646:	86 01       	movw	r16, r12
    5648:	00 5e       	subi	r16, 0xE0	; 224
    564a:	1f 4f       	sbci	r17, 0xFF	; 255
    564c:	98 e0       	ldi	r25, 0x08	; 8
    564e:	89 9f       	mul	r24, r25
    5650:	00 0d       	add	r16, r0
    5652:	11 1d       	adc	r17, r1
    5654:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5656:	8f b7       	in	r24, 0x3f	; 63
    5658:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    565a:	f8 94       	cli
	return flags;
    565c:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    565e:	c6 01       	movw	r24, r12
    5660:	37 dd       	rcall	.-1426   	; 0x50d0 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    5662:	f7 01       	movw	r30, r14
    5664:	80 81       	ld	r24, Z
    5666:	f8 01       	movw	r30, r16
    5668:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    566a:	f7 01       	movw	r30, r14
    566c:	82 81       	ldd	r24, Z+2	; 0x02
    566e:	f8 01       	movw	r30, r16
    5670:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    5672:	f7 01       	movw	r30, r14
    5674:	81 81       	ldd	r24, Z+1	; 0x01
    5676:	f8 01       	movw	r30, r16
    5678:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    567a:	b0 fe       	sbrs	r11, 0
    567c:	04 c0       	rjmp	.+8      	; 0x5686 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    567e:	f7 01       	movw	r30, r14
    5680:	83 81       	ldd	r24, Z+3	; 0x03
    5682:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    5684:	86 83       	std	Z+6, r24	; 0x06
    5686:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5688:	44 dd       	rcall	.-1400   	; 0x5112 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    568a:	af be       	out	0x3f, r10	; 63
    568c:	0f 90       	pop	r0
    568e:	df 91       	pop	r29
    5690:	cf 91       	pop	r28
    5692:	1f 91       	pop	r17
    5694:	0f 91       	pop	r16
    5696:	ff 90       	pop	r15
    5698:	ef 90       	pop	r14
    569a:	df 90       	pop	r13
    569c:	cf 90       	pop	r12
    569e:	bf 90       	pop	r11
    56a0:	af 90       	pop	r10
    56a2:	08 95       	ret

000056a4 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    56a4:	af 92       	push	r10
    56a6:	bf 92       	push	r11
    56a8:	cf 92       	push	r12
    56aa:	df 92       	push	r13
    56ac:	ef 92       	push	r14
    56ae:	ff 92       	push	r15
    56b0:	0f 93       	push	r16
    56b2:	1f 93       	push	r17
    56b4:	cf 93       	push	r28
    56b6:	df 93       	push	r29
    56b8:	1f 92       	push	r1
    56ba:	cd b7       	in	r28, 0x3d	; 61
    56bc:	de b7       	in	r29, 0x3e	; 62
    56be:	6c 01       	movw	r12, r24
    56c0:	b6 2e       	mov	r11, r22
    56c2:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    56c4:	86 2f       	mov	r24, r22
    56c6:	83 70       	andi	r24, 0x03	; 3
    56c8:	29 f4       	brne	.+10     	; 0x56d4 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    56ca:	96 2f       	mov	r25, r22
    56cc:	96 95       	lsr	r25
    56ce:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    56d0:	82 e0       	ldi	r24, 0x02	; 2
    56d2:	02 c0       	rjmp	.+4      	; 0x56d8 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    56d4:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    56d6:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    56d8:	90 ff       	sbrs	r25, 0
		index++;
    56da:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    56dc:	86 01       	movw	r16, r12
    56de:	00 5e       	subi	r16, 0xE0	; 224
    56e0:	1f 4f       	sbci	r17, 0xFF	; 255
    56e2:	98 e0       	ldi	r25, 0x08	; 8
    56e4:	89 9f       	mul	r24, r25
    56e6:	00 0d       	add	r16, r0
    56e8:	11 1d       	adc	r17, r1
    56ea:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    56ec:	8f b7       	in	r24, 0x3f	; 63
    56ee:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    56f0:	f8 94       	cli
	return flags;
    56f2:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    56f4:	c6 01       	movw	r24, r12
    56f6:	ec dc       	rcall	.-1576   	; 0x50d0 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    56f8:	f8 01       	movw	r30, r16
    56fa:	80 81       	ld	r24, Z
    56fc:	f7 01       	movw	r30, r14
    56fe:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    5700:	f8 01       	movw	r30, r16
    5702:	82 81       	ldd	r24, Z+2	; 0x02
    5704:	f7 01       	movw	r30, r14
    5706:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    5708:	f8 01       	movw	r30, r16
    570a:	81 81       	ldd	r24, Z+1	; 0x01
    570c:	f7 01       	movw	r30, r14
    570e:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    5710:	b0 fe       	sbrs	r11, 0
    5712:	04 c0       	rjmp	.+8      	; 0x571c <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    5714:	f8 01       	movw	r30, r16
    5716:	86 81       	ldd	r24, Z+6	; 0x06
    5718:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    571a:	83 83       	std	Z+3, r24	; 0x03
    571c:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    571e:	f9 dc       	rcall	.-1550   	; 0x5112 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    5720:	af be       	out	0x3f, r10	; 63
    5722:	0f 90       	pop	r0
    5724:	df 91       	pop	r29
    5726:	cf 91       	pop	r28
    5728:	1f 91       	pop	r17
    572a:	0f 91       	pop	r16
    572c:	ff 90       	pop	r15
    572e:	ef 90       	pop	r14
    5730:	df 90       	pop	r13
    5732:	cf 90       	pop	r12
    5734:	bf 90       	pop	r11
    5736:	af 90       	pop	r10
    5738:	08 95       	ret

0000573a <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    573a:	80 32       	cpi	r24, 0x20	; 32
    573c:	93 40       	sbci	r25, 0x03	; 3
    573e:	61 f4       	brne	.+24     	; 0x5758 <dac_enable_clock+0x1e>
    5740:	80 91 9a 26 	lds	r24, 0x269A	; 0x80269a <dacb_enable_count>
    5744:	91 e0       	ldi	r25, 0x01	; 1
    5746:	98 0f       	add	r25, r24
    5748:	90 93 9a 26 	sts	0x269A, r25	; 0x80269a <dacb_enable_count>
    574c:	81 11       	cpse	r24, r1
    574e:	04 c0       	rjmp	.+8      	; 0x5758 <dac_enable_clock+0x1e>
    5750:	64 e0       	ldi	r22, 0x04	; 4
    5752:	82 e0       	ldi	r24, 0x02	; 2
    5754:	0c 94 a7 4b 	jmp	0x974e	; 0x974e <sysclk_enable_module>
    5758:	08 95       	ret

0000575a <dac_disable_clock>:
    575a:	80 32       	cpi	r24, 0x20	; 32
    575c:	93 40       	sbci	r25, 0x03	; 3
    575e:	59 f4       	brne	.+22     	; 0x5776 <dac_disable_clock+0x1c>
    5760:	80 91 9a 26 	lds	r24, 0x269A	; 0x80269a <dacb_enable_count>
    5764:	81 50       	subi	r24, 0x01	; 1
    5766:	80 93 9a 26 	sts	0x269A, r24	; 0x80269a <dacb_enable_count>
    576a:	81 11       	cpse	r24, r1
    576c:	04 c0       	rjmp	.+8      	; 0x5776 <dac_disable_clock+0x1c>
    576e:	64 e0       	ldi	r22, 0x04	; 4
    5770:	82 e0       	ldi	r24, 0x02	; 2
    5772:	0c 94 bd 4b 	jmp	0x977a	; 0x977a <sysclk_disable_module>
    5776:	08 95       	ret

00005778 <dac_enable>:
    5778:	ef 92       	push	r14
    577a:	ff 92       	push	r15
    577c:	1f 93       	push	r17
    577e:	cf 93       	push	r28
    5780:	df 93       	push	r29
    5782:	1f 92       	push	r1
    5784:	1f 92       	push	r1
    5786:	cd b7       	in	r28, 0x3d	; 61
    5788:	de b7       	in	r29, 0x3e	; 62
    578a:	2f b7       	in	r18, 0x3f	; 63
    578c:	29 83       	std	Y+1, r18	; 0x01
    578e:	f8 94       	cli
    5790:	19 81       	ldd	r17, Y+1	; 0x01
    5792:	20 91 e6 2a 	lds	r18, 0x2AE6	; 0x802ae6 <sleepmgr_locks+0x1>
    5796:	2f 3f       	cpi	r18, 0xFF	; 255
    5798:	09 f4       	brne	.+2      	; 0x579c <dac_enable+0x24>
    579a:	ff cf       	rjmp	.-2      	; 0x579a <dac_enable+0x22>
    579c:	7c 01       	movw	r14, r24
    579e:	8f b7       	in	r24, 0x3f	; 63
    57a0:	8a 83       	std	Y+2, r24	; 0x02
    57a2:	f8 94       	cli
    57a4:	9a 81       	ldd	r25, Y+2	; 0x02
    57a6:	e5 ee       	ldi	r30, 0xE5	; 229
    57a8:	fa e2       	ldi	r31, 0x2A	; 42
    57aa:	81 81       	ldd	r24, Z+1	; 0x01
    57ac:	8f 5f       	subi	r24, 0xFF	; 255
    57ae:	81 83       	std	Z+1, r24	; 0x01
    57b0:	9f bf       	out	0x3f, r25	; 63
    57b2:	c7 01       	movw	r24, r14
    57b4:	c2 df       	rcall	.-124    	; 0x573a <dac_enable_clock>
    57b6:	f7 01       	movw	r30, r14
    57b8:	80 81       	ld	r24, Z
    57ba:	81 60       	ori	r24, 0x01	; 1
    57bc:	80 83       	st	Z, r24
    57be:	1f bf       	out	0x3f, r17	; 63
    57c0:	0f 90       	pop	r0
    57c2:	0f 90       	pop	r0
    57c4:	df 91       	pop	r29
    57c6:	cf 91       	pop	r28
    57c8:	1f 91       	pop	r17
    57ca:	ff 90       	pop	r15
    57cc:	ef 90       	pop	r14
    57ce:	08 95       	ret

000057d0 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    57d0:	9f 92       	push	r9
    57d2:	af 92       	push	r10
    57d4:	bf 92       	push	r11
    57d6:	cf 92       	push	r12
    57d8:	df 92       	push	r13
    57da:	ef 92       	push	r14
    57dc:	ff 92       	push	r15
    57de:	0f 93       	push	r16
    57e0:	1f 93       	push	r17
    57e2:	cf 93       	push	r28
    57e4:	df 93       	push	r29
    57e6:	1f 92       	push	r1
    57e8:	cd b7       	in	r28, 0x3d	; 61
    57ea:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    57ec:	80 32       	cpi	r24, 0x20	; 32
    57ee:	23 e0       	ldi	r18, 0x03	; 3
    57f0:	92 07       	cpc	r25, r18
    57f2:	09 f0       	breq	.+2      	; 0x57f6 <dac_write_configuration+0x26>
    57f4:	3c c0       	rjmp	.+120    	; 0x586e <dac_write_configuration+0x9e>
    57f6:	7b 01       	movw	r14, r22
    57f8:	8c 01       	movw	r16, r24
    57fa:	63 e3       	ldi	r22, 0x33	; 51
    57fc:	70 e0       	ldi	r23, 0x00	; 0
    57fe:	82 e0       	ldi	r24, 0x02	; 2
    5800:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
    5804:	98 2e       	mov	r9, r24
    5806:	62 e3       	ldi	r22, 0x32	; 50
    5808:	70 e0       	ldi	r23, 0x00	; 0
    580a:	82 e0       	ldi	r24, 0x02	; 2
    580c:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
    5810:	a8 2e       	mov	r10, r24
    5812:	67 e3       	ldi	r22, 0x37	; 55
    5814:	70 e0       	ldi	r23, 0x00	; 0
    5816:	82 e0       	ldi	r24, 0x02	; 2
    5818:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
    581c:	b8 2e       	mov	r11, r24
    581e:	66 e3       	ldi	r22, 0x36	; 54
    5820:	70 e0       	ldi	r23, 0x00	; 0
    5822:	82 e0       	ldi	r24, 0x02	; 2
    5824:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
    5828:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    582a:	8f b7       	in	r24, 0x3f	; 63
    582c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    582e:	f8 94       	cli
	return flags;
    5830:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    5832:	c8 01       	movw	r24, r16
    5834:	82 df       	rcall	.-252    	; 0x573a <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    5836:	f8 01       	movw	r30, r16
    5838:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    583a:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    583c:	f7 01       	movw	r30, r14
    583e:	91 81       	ldd	r25, Z+1	; 0x01
    5840:	f8 01       	movw	r30, r16
    5842:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    5844:	f7 01       	movw	r30, r14
    5846:	92 81       	ldd	r25, Z+2	; 0x02
    5848:	f8 01       	movw	r30, r16
    584a:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    584c:	f7 01       	movw	r30, r14
    584e:	93 81       	ldd	r25, Z+3	; 0x03
    5850:	f8 01       	movw	r30, r16
    5852:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    5854:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    5856:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    5858:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    585a:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    585c:	81 70       	andi	r24, 0x01	; 1
    585e:	f7 01       	movw	r30, r14
    5860:	90 81       	ld	r25, Z
    5862:	89 2b       	or	r24, r25
    5864:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    5866:	80 83       	st	Z, r24
    5868:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    586a:	77 df       	rcall	.-274    	; 0x575a <dac_disable_clock>
	cpu_irq_restore(flags);
}
    586c:	df be       	out	0x3f, r13	; 63
    586e:	0f 90       	pop	r0
    5870:	df 91       	pop	r29
    5872:	cf 91       	pop	r28
    5874:	1f 91       	pop	r17
    5876:	0f 91       	pop	r16
    5878:	ff 90       	pop	r15
    587a:	ef 90       	pop	r14
    587c:	df 90       	pop	r13
    587e:	cf 90       	pop	r12
    5880:	bf 90       	pop	r11
    5882:	af 90       	pop	r10
    5884:	9f 90       	pop	r9
    5886:	08 95       	ret

00005888 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    5888:	df 92       	push	r13
    588a:	ef 92       	push	r14
    588c:	ff 92       	push	r15
    588e:	0f 93       	push	r16
    5890:	1f 93       	push	r17
    5892:	cf 93       	push	r28
    5894:	df 93       	push	r29
    5896:	1f 92       	push	r1
    5898:	cd b7       	in	r28, 0x3d	; 61
    589a:	de b7       	in	r29, 0x3e	; 62
    589c:	8c 01       	movw	r16, r24
    589e:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    58a0:	8f b7       	in	r24, 0x3f	; 63
    58a2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    58a4:	f8 94       	cli
	return flags;
    58a6:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    58a8:	c8 01       	movw	r24, r16
    58aa:	47 df       	rcall	.-370    	; 0x573a <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    58ac:	f8 01       	movw	r30, r16
    58ae:	80 81       	ld	r24, Z
    58b0:	8e 7f       	andi	r24, 0xFE	; 254
    58b2:	f7 01       	movw	r30, r14
    58b4:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    58b6:	f8 01       	movw	r30, r16
    58b8:	81 81       	ldd	r24, Z+1	; 0x01
    58ba:	f7 01       	movw	r30, r14
    58bc:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    58be:	f8 01       	movw	r30, r16
    58c0:	82 81       	ldd	r24, Z+2	; 0x02
    58c2:	f7 01       	movw	r30, r14
    58c4:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    58c6:	f8 01       	movw	r30, r16
    58c8:	83 81       	ldd	r24, Z+3	; 0x03
    58ca:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    58cc:	83 83       	std	Z+3, r24	; 0x03
    58ce:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    58d0:	44 df       	rcall	.-376    	; 0x575a <dac_disable_clock>
	cpu_irq_restore(flags);
}
    58d2:	df be       	out	0x3f, r13	; 63
    58d4:	0f 90       	pop	r0
    58d6:	df 91       	pop	r29
    58d8:	cf 91       	pop	r28
    58da:	1f 91       	pop	r17
    58dc:	0f 91       	pop	r16
    58de:	ff 90       	pop	r15
    58e0:	ef 90       	pop	r14
    58e2:	df 90       	pop	r13
    58e4:	08 95       	ret

000058e6 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    58e6:	1f 92       	push	r1
    58e8:	0f 92       	push	r0
    58ea:	0f b6       	in	r0, 0x3f	; 63
    58ec:	0f 92       	push	r0
    58ee:	11 24       	eor	r1, r1
    58f0:	0b b6       	in	r0, 0x3b	; 59
    58f2:	0f 92       	push	r0
    58f4:	2f 93       	push	r18
    58f6:	3f 93       	push	r19
    58f8:	4f 93       	push	r20
    58fa:	5f 93       	push	r21
    58fc:	6f 93       	push	r22
    58fe:	7f 93       	push	r23
    5900:	8f 93       	push	r24
    5902:	9f 93       	push	r25
    5904:	af 93       	push	r26
    5906:	bf 93       	push	r27
    5908:	ef 93       	push	r30
    590a:	ff 93       	push	r31
    590c:	e0 91 e1 26 	lds	r30, 0x26E1	; 0x8026e1 <tc_tcc0_ovf_callback>
    5910:	f0 91 e2 26 	lds	r31, 0x26E2	; 0x8026e2 <tc_tcc0_ovf_callback+0x1>
    5914:	30 97       	sbiw	r30, 0x00	; 0
    5916:	09 f0       	breq	.+2      	; 0x591a <__vector_14+0x34>
    5918:	19 95       	eicall
    591a:	ff 91       	pop	r31
    591c:	ef 91       	pop	r30
    591e:	bf 91       	pop	r27
    5920:	af 91       	pop	r26
    5922:	9f 91       	pop	r25
    5924:	8f 91       	pop	r24
    5926:	7f 91       	pop	r23
    5928:	6f 91       	pop	r22
    592a:	5f 91       	pop	r21
    592c:	4f 91       	pop	r20
    592e:	3f 91       	pop	r19
    5930:	2f 91       	pop	r18
    5932:	0f 90       	pop	r0
    5934:	0b be       	out	0x3b, r0	; 59
    5936:	0f 90       	pop	r0
    5938:	0f be       	out	0x3f, r0	; 63
    593a:	0f 90       	pop	r0
    593c:	1f 90       	pop	r1
    593e:	18 95       	reti

00005940 <__vector_15>:
    5940:	1f 92       	push	r1
    5942:	0f 92       	push	r0
    5944:	0f b6       	in	r0, 0x3f	; 63
    5946:	0f 92       	push	r0
    5948:	11 24       	eor	r1, r1
    594a:	0b b6       	in	r0, 0x3b	; 59
    594c:	0f 92       	push	r0
    594e:	2f 93       	push	r18
    5950:	3f 93       	push	r19
    5952:	4f 93       	push	r20
    5954:	5f 93       	push	r21
    5956:	6f 93       	push	r22
    5958:	7f 93       	push	r23
    595a:	8f 93       	push	r24
    595c:	9f 93       	push	r25
    595e:	af 93       	push	r26
    5960:	bf 93       	push	r27
    5962:	ef 93       	push	r30
    5964:	ff 93       	push	r31
    5966:	e0 91 df 26 	lds	r30, 0x26DF	; 0x8026df <tc_tcc0_err_callback>
    596a:	f0 91 e0 26 	lds	r31, 0x26E0	; 0x8026e0 <tc_tcc0_err_callback+0x1>
    596e:	30 97       	sbiw	r30, 0x00	; 0
    5970:	09 f0       	breq	.+2      	; 0x5974 <__vector_15+0x34>
    5972:	19 95       	eicall
    5974:	ff 91       	pop	r31
    5976:	ef 91       	pop	r30
    5978:	bf 91       	pop	r27
    597a:	af 91       	pop	r26
    597c:	9f 91       	pop	r25
    597e:	8f 91       	pop	r24
    5980:	7f 91       	pop	r23
    5982:	6f 91       	pop	r22
    5984:	5f 91       	pop	r21
    5986:	4f 91       	pop	r20
    5988:	3f 91       	pop	r19
    598a:	2f 91       	pop	r18
    598c:	0f 90       	pop	r0
    598e:	0b be       	out	0x3b, r0	; 59
    5990:	0f 90       	pop	r0
    5992:	0f be       	out	0x3f, r0	; 63
    5994:	0f 90       	pop	r0
    5996:	1f 90       	pop	r1
    5998:	18 95       	reti

0000599a <__vector_16>:
    599a:	1f 92       	push	r1
    599c:	0f 92       	push	r0
    599e:	0f b6       	in	r0, 0x3f	; 63
    59a0:	0f 92       	push	r0
    59a2:	11 24       	eor	r1, r1
    59a4:	0b b6       	in	r0, 0x3b	; 59
    59a6:	0f 92       	push	r0
    59a8:	2f 93       	push	r18
    59aa:	3f 93       	push	r19
    59ac:	4f 93       	push	r20
    59ae:	5f 93       	push	r21
    59b0:	6f 93       	push	r22
    59b2:	7f 93       	push	r23
    59b4:	8f 93       	push	r24
    59b6:	9f 93       	push	r25
    59b8:	af 93       	push	r26
    59ba:	bf 93       	push	r27
    59bc:	ef 93       	push	r30
    59be:	ff 93       	push	r31
    59c0:	e0 91 dd 26 	lds	r30, 0x26DD	; 0x8026dd <tc_tcc0_cca_callback>
    59c4:	f0 91 de 26 	lds	r31, 0x26DE	; 0x8026de <tc_tcc0_cca_callback+0x1>
    59c8:	30 97       	sbiw	r30, 0x00	; 0
    59ca:	09 f0       	breq	.+2      	; 0x59ce <__vector_16+0x34>
    59cc:	19 95       	eicall
    59ce:	ff 91       	pop	r31
    59d0:	ef 91       	pop	r30
    59d2:	bf 91       	pop	r27
    59d4:	af 91       	pop	r26
    59d6:	9f 91       	pop	r25
    59d8:	8f 91       	pop	r24
    59da:	7f 91       	pop	r23
    59dc:	6f 91       	pop	r22
    59de:	5f 91       	pop	r21
    59e0:	4f 91       	pop	r20
    59e2:	3f 91       	pop	r19
    59e4:	2f 91       	pop	r18
    59e6:	0f 90       	pop	r0
    59e8:	0b be       	out	0x3b, r0	; 59
    59ea:	0f 90       	pop	r0
    59ec:	0f be       	out	0x3f, r0	; 63
    59ee:	0f 90       	pop	r0
    59f0:	1f 90       	pop	r1
    59f2:	18 95       	reti

000059f4 <__vector_17>:
    59f4:	1f 92       	push	r1
    59f6:	0f 92       	push	r0
    59f8:	0f b6       	in	r0, 0x3f	; 63
    59fa:	0f 92       	push	r0
    59fc:	11 24       	eor	r1, r1
    59fe:	0b b6       	in	r0, 0x3b	; 59
    5a00:	0f 92       	push	r0
    5a02:	2f 93       	push	r18
    5a04:	3f 93       	push	r19
    5a06:	4f 93       	push	r20
    5a08:	5f 93       	push	r21
    5a0a:	6f 93       	push	r22
    5a0c:	7f 93       	push	r23
    5a0e:	8f 93       	push	r24
    5a10:	9f 93       	push	r25
    5a12:	af 93       	push	r26
    5a14:	bf 93       	push	r27
    5a16:	ef 93       	push	r30
    5a18:	ff 93       	push	r31
    5a1a:	e0 91 db 26 	lds	r30, 0x26DB	; 0x8026db <tc_tcc0_ccb_callback>
    5a1e:	f0 91 dc 26 	lds	r31, 0x26DC	; 0x8026dc <tc_tcc0_ccb_callback+0x1>
    5a22:	30 97       	sbiw	r30, 0x00	; 0
    5a24:	09 f0       	breq	.+2      	; 0x5a28 <__vector_17+0x34>
    5a26:	19 95       	eicall
    5a28:	ff 91       	pop	r31
    5a2a:	ef 91       	pop	r30
    5a2c:	bf 91       	pop	r27
    5a2e:	af 91       	pop	r26
    5a30:	9f 91       	pop	r25
    5a32:	8f 91       	pop	r24
    5a34:	7f 91       	pop	r23
    5a36:	6f 91       	pop	r22
    5a38:	5f 91       	pop	r21
    5a3a:	4f 91       	pop	r20
    5a3c:	3f 91       	pop	r19
    5a3e:	2f 91       	pop	r18
    5a40:	0f 90       	pop	r0
    5a42:	0b be       	out	0x3b, r0	; 59
    5a44:	0f 90       	pop	r0
    5a46:	0f be       	out	0x3f, r0	; 63
    5a48:	0f 90       	pop	r0
    5a4a:	1f 90       	pop	r1
    5a4c:	18 95       	reti

00005a4e <__vector_18>:
    5a4e:	1f 92       	push	r1
    5a50:	0f 92       	push	r0
    5a52:	0f b6       	in	r0, 0x3f	; 63
    5a54:	0f 92       	push	r0
    5a56:	11 24       	eor	r1, r1
    5a58:	0b b6       	in	r0, 0x3b	; 59
    5a5a:	0f 92       	push	r0
    5a5c:	2f 93       	push	r18
    5a5e:	3f 93       	push	r19
    5a60:	4f 93       	push	r20
    5a62:	5f 93       	push	r21
    5a64:	6f 93       	push	r22
    5a66:	7f 93       	push	r23
    5a68:	8f 93       	push	r24
    5a6a:	9f 93       	push	r25
    5a6c:	af 93       	push	r26
    5a6e:	bf 93       	push	r27
    5a70:	ef 93       	push	r30
    5a72:	ff 93       	push	r31
    5a74:	e0 91 d9 26 	lds	r30, 0x26D9	; 0x8026d9 <tc_tcc0_ccc_callback>
    5a78:	f0 91 da 26 	lds	r31, 0x26DA	; 0x8026da <tc_tcc0_ccc_callback+0x1>
    5a7c:	30 97       	sbiw	r30, 0x00	; 0
    5a7e:	09 f0       	breq	.+2      	; 0x5a82 <__vector_18+0x34>
    5a80:	19 95       	eicall
    5a82:	ff 91       	pop	r31
    5a84:	ef 91       	pop	r30
    5a86:	bf 91       	pop	r27
    5a88:	af 91       	pop	r26
    5a8a:	9f 91       	pop	r25
    5a8c:	8f 91       	pop	r24
    5a8e:	7f 91       	pop	r23
    5a90:	6f 91       	pop	r22
    5a92:	5f 91       	pop	r21
    5a94:	4f 91       	pop	r20
    5a96:	3f 91       	pop	r19
    5a98:	2f 91       	pop	r18
    5a9a:	0f 90       	pop	r0
    5a9c:	0b be       	out	0x3b, r0	; 59
    5a9e:	0f 90       	pop	r0
    5aa0:	0f be       	out	0x3f, r0	; 63
    5aa2:	0f 90       	pop	r0
    5aa4:	1f 90       	pop	r1
    5aa6:	18 95       	reti

00005aa8 <__vector_19>:
    5aa8:	1f 92       	push	r1
    5aaa:	0f 92       	push	r0
    5aac:	0f b6       	in	r0, 0x3f	; 63
    5aae:	0f 92       	push	r0
    5ab0:	11 24       	eor	r1, r1
    5ab2:	0b b6       	in	r0, 0x3b	; 59
    5ab4:	0f 92       	push	r0
    5ab6:	2f 93       	push	r18
    5ab8:	3f 93       	push	r19
    5aba:	4f 93       	push	r20
    5abc:	5f 93       	push	r21
    5abe:	6f 93       	push	r22
    5ac0:	7f 93       	push	r23
    5ac2:	8f 93       	push	r24
    5ac4:	9f 93       	push	r25
    5ac6:	af 93       	push	r26
    5ac8:	bf 93       	push	r27
    5aca:	ef 93       	push	r30
    5acc:	ff 93       	push	r31
    5ace:	e0 91 d7 26 	lds	r30, 0x26D7	; 0x8026d7 <tc_tcc0_ccd_callback>
    5ad2:	f0 91 d8 26 	lds	r31, 0x26D8	; 0x8026d8 <tc_tcc0_ccd_callback+0x1>
    5ad6:	30 97       	sbiw	r30, 0x00	; 0
    5ad8:	09 f0       	breq	.+2      	; 0x5adc <__vector_19+0x34>
    5ada:	19 95       	eicall
    5adc:	ff 91       	pop	r31
    5ade:	ef 91       	pop	r30
    5ae0:	bf 91       	pop	r27
    5ae2:	af 91       	pop	r26
    5ae4:	9f 91       	pop	r25
    5ae6:	8f 91       	pop	r24
    5ae8:	7f 91       	pop	r23
    5aea:	6f 91       	pop	r22
    5aec:	5f 91       	pop	r21
    5aee:	4f 91       	pop	r20
    5af0:	3f 91       	pop	r19
    5af2:	2f 91       	pop	r18
    5af4:	0f 90       	pop	r0
    5af6:	0b be       	out	0x3b, r0	; 59
    5af8:	0f 90       	pop	r0
    5afa:	0f be       	out	0x3f, r0	; 63
    5afc:	0f 90       	pop	r0
    5afe:	1f 90       	pop	r1
    5b00:	18 95       	reti

00005b02 <__vector_20>:
    5b02:	1f 92       	push	r1
    5b04:	0f 92       	push	r0
    5b06:	0f b6       	in	r0, 0x3f	; 63
    5b08:	0f 92       	push	r0
    5b0a:	11 24       	eor	r1, r1
    5b0c:	0b b6       	in	r0, 0x3b	; 59
    5b0e:	0f 92       	push	r0
    5b10:	2f 93       	push	r18
    5b12:	3f 93       	push	r19
    5b14:	4f 93       	push	r20
    5b16:	5f 93       	push	r21
    5b18:	6f 93       	push	r22
    5b1a:	7f 93       	push	r23
    5b1c:	8f 93       	push	r24
    5b1e:	9f 93       	push	r25
    5b20:	af 93       	push	r26
    5b22:	bf 93       	push	r27
    5b24:	ef 93       	push	r30
    5b26:	ff 93       	push	r31
    5b28:	e0 91 d5 26 	lds	r30, 0x26D5	; 0x8026d5 <tc_tcc1_ovf_callback>
    5b2c:	f0 91 d6 26 	lds	r31, 0x26D6	; 0x8026d6 <tc_tcc1_ovf_callback+0x1>
    5b30:	30 97       	sbiw	r30, 0x00	; 0
    5b32:	09 f0       	breq	.+2      	; 0x5b36 <__vector_20+0x34>
    5b34:	19 95       	eicall
    5b36:	ff 91       	pop	r31
    5b38:	ef 91       	pop	r30
    5b3a:	bf 91       	pop	r27
    5b3c:	af 91       	pop	r26
    5b3e:	9f 91       	pop	r25
    5b40:	8f 91       	pop	r24
    5b42:	7f 91       	pop	r23
    5b44:	6f 91       	pop	r22
    5b46:	5f 91       	pop	r21
    5b48:	4f 91       	pop	r20
    5b4a:	3f 91       	pop	r19
    5b4c:	2f 91       	pop	r18
    5b4e:	0f 90       	pop	r0
    5b50:	0b be       	out	0x3b, r0	; 59
    5b52:	0f 90       	pop	r0
    5b54:	0f be       	out	0x3f, r0	; 63
    5b56:	0f 90       	pop	r0
    5b58:	1f 90       	pop	r1
    5b5a:	18 95       	reti

00005b5c <__vector_21>:
    5b5c:	1f 92       	push	r1
    5b5e:	0f 92       	push	r0
    5b60:	0f b6       	in	r0, 0x3f	; 63
    5b62:	0f 92       	push	r0
    5b64:	11 24       	eor	r1, r1
    5b66:	0b b6       	in	r0, 0x3b	; 59
    5b68:	0f 92       	push	r0
    5b6a:	2f 93       	push	r18
    5b6c:	3f 93       	push	r19
    5b6e:	4f 93       	push	r20
    5b70:	5f 93       	push	r21
    5b72:	6f 93       	push	r22
    5b74:	7f 93       	push	r23
    5b76:	8f 93       	push	r24
    5b78:	9f 93       	push	r25
    5b7a:	af 93       	push	r26
    5b7c:	bf 93       	push	r27
    5b7e:	ef 93       	push	r30
    5b80:	ff 93       	push	r31
    5b82:	e0 91 d3 26 	lds	r30, 0x26D3	; 0x8026d3 <tc_tcc1_err_callback>
    5b86:	f0 91 d4 26 	lds	r31, 0x26D4	; 0x8026d4 <tc_tcc1_err_callback+0x1>
    5b8a:	30 97       	sbiw	r30, 0x00	; 0
    5b8c:	09 f0       	breq	.+2      	; 0x5b90 <__vector_21+0x34>
    5b8e:	19 95       	eicall
    5b90:	ff 91       	pop	r31
    5b92:	ef 91       	pop	r30
    5b94:	bf 91       	pop	r27
    5b96:	af 91       	pop	r26
    5b98:	9f 91       	pop	r25
    5b9a:	8f 91       	pop	r24
    5b9c:	7f 91       	pop	r23
    5b9e:	6f 91       	pop	r22
    5ba0:	5f 91       	pop	r21
    5ba2:	4f 91       	pop	r20
    5ba4:	3f 91       	pop	r19
    5ba6:	2f 91       	pop	r18
    5ba8:	0f 90       	pop	r0
    5baa:	0b be       	out	0x3b, r0	; 59
    5bac:	0f 90       	pop	r0
    5bae:	0f be       	out	0x3f, r0	; 63
    5bb0:	0f 90       	pop	r0
    5bb2:	1f 90       	pop	r1
    5bb4:	18 95       	reti

00005bb6 <__vector_22>:
    5bb6:	1f 92       	push	r1
    5bb8:	0f 92       	push	r0
    5bba:	0f b6       	in	r0, 0x3f	; 63
    5bbc:	0f 92       	push	r0
    5bbe:	11 24       	eor	r1, r1
    5bc0:	0b b6       	in	r0, 0x3b	; 59
    5bc2:	0f 92       	push	r0
    5bc4:	2f 93       	push	r18
    5bc6:	3f 93       	push	r19
    5bc8:	4f 93       	push	r20
    5bca:	5f 93       	push	r21
    5bcc:	6f 93       	push	r22
    5bce:	7f 93       	push	r23
    5bd0:	8f 93       	push	r24
    5bd2:	9f 93       	push	r25
    5bd4:	af 93       	push	r26
    5bd6:	bf 93       	push	r27
    5bd8:	ef 93       	push	r30
    5bda:	ff 93       	push	r31
    5bdc:	e0 91 d1 26 	lds	r30, 0x26D1	; 0x8026d1 <tc_tcc1_cca_callback>
    5be0:	f0 91 d2 26 	lds	r31, 0x26D2	; 0x8026d2 <tc_tcc1_cca_callback+0x1>
    5be4:	30 97       	sbiw	r30, 0x00	; 0
    5be6:	09 f0       	breq	.+2      	; 0x5bea <__vector_22+0x34>
    5be8:	19 95       	eicall
    5bea:	ff 91       	pop	r31
    5bec:	ef 91       	pop	r30
    5bee:	bf 91       	pop	r27
    5bf0:	af 91       	pop	r26
    5bf2:	9f 91       	pop	r25
    5bf4:	8f 91       	pop	r24
    5bf6:	7f 91       	pop	r23
    5bf8:	6f 91       	pop	r22
    5bfa:	5f 91       	pop	r21
    5bfc:	4f 91       	pop	r20
    5bfe:	3f 91       	pop	r19
    5c00:	2f 91       	pop	r18
    5c02:	0f 90       	pop	r0
    5c04:	0b be       	out	0x3b, r0	; 59
    5c06:	0f 90       	pop	r0
    5c08:	0f be       	out	0x3f, r0	; 63
    5c0a:	0f 90       	pop	r0
    5c0c:	1f 90       	pop	r1
    5c0e:	18 95       	reti

00005c10 <__vector_23>:
    5c10:	1f 92       	push	r1
    5c12:	0f 92       	push	r0
    5c14:	0f b6       	in	r0, 0x3f	; 63
    5c16:	0f 92       	push	r0
    5c18:	11 24       	eor	r1, r1
    5c1a:	0b b6       	in	r0, 0x3b	; 59
    5c1c:	0f 92       	push	r0
    5c1e:	2f 93       	push	r18
    5c20:	3f 93       	push	r19
    5c22:	4f 93       	push	r20
    5c24:	5f 93       	push	r21
    5c26:	6f 93       	push	r22
    5c28:	7f 93       	push	r23
    5c2a:	8f 93       	push	r24
    5c2c:	9f 93       	push	r25
    5c2e:	af 93       	push	r26
    5c30:	bf 93       	push	r27
    5c32:	ef 93       	push	r30
    5c34:	ff 93       	push	r31
    5c36:	e0 91 cf 26 	lds	r30, 0x26CF	; 0x8026cf <tc_tcc1_ccb_callback>
    5c3a:	f0 91 d0 26 	lds	r31, 0x26D0	; 0x8026d0 <tc_tcc1_ccb_callback+0x1>
    5c3e:	30 97       	sbiw	r30, 0x00	; 0
    5c40:	09 f0       	breq	.+2      	; 0x5c44 <__vector_23+0x34>
    5c42:	19 95       	eicall
    5c44:	ff 91       	pop	r31
    5c46:	ef 91       	pop	r30
    5c48:	bf 91       	pop	r27
    5c4a:	af 91       	pop	r26
    5c4c:	9f 91       	pop	r25
    5c4e:	8f 91       	pop	r24
    5c50:	7f 91       	pop	r23
    5c52:	6f 91       	pop	r22
    5c54:	5f 91       	pop	r21
    5c56:	4f 91       	pop	r20
    5c58:	3f 91       	pop	r19
    5c5a:	2f 91       	pop	r18
    5c5c:	0f 90       	pop	r0
    5c5e:	0b be       	out	0x3b, r0	; 59
    5c60:	0f 90       	pop	r0
    5c62:	0f be       	out	0x3f, r0	; 63
    5c64:	0f 90       	pop	r0
    5c66:	1f 90       	pop	r1
    5c68:	18 95       	reti

00005c6a <__vector_77>:
    5c6a:	1f 92       	push	r1
    5c6c:	0f 92       	push	r0
    5c6e:	0f b6       	in	r0, 0x3f	; 63
    5c70:	0f 92       	push	r0
    5c72:	11 24       	eor	r1, r1
    5c74:	0b b6       	in	r0, 0x3b	; 59
    5c76:	0f 92       	push	r0
    5c78:	2f 93       	push	r18
    5c7a:	3f 93       	push	r19
    5c7c:	4f 93       	push	r20
    5c7e:	5f 93       	push	r21
    5c80:	6f 93       	push	r22
    5c82:	7f 93       	push	r23
    5c84:	8f 93       	push	r24
    5c86:	9f 93       	push	r25
    5c88:	af 93       	push	r26
    5c8a:	bf 93       	push	r27
    5c8c:	ef 93       	push	r30
    5c8e:	ff 93       	push	r31
    5c90:	e0 91 cd 26 	lds	r30, 0x26CD	; 0x8026cd <tc_tcd0_ovf_callback>
    5c94:	f0 91 ce 26 	lds	r31, 0x26CE	; 0x8026ce <tc_tcd0_ovf_callback+0x1>
    5c98:	30 97       	sbiw	r30, 0x00	; 0
    5c9a:	09 f0       	breq	.+2      	; 0x5c9e <__vector_77+0x34>
    5c9c:	19 95       	eicall
    5c9e:	ff 91       	pop	r31
    5ca0:	ef 91       	pop	r30
    5ca2:	bf 91       	pop	r27
    5ca4:	af 91       	pop	r26
    5ca6:	9f 91       	pop	r25
    5ca8:	8f 91       	pop	r24
    5caa:	7f 91       	pop	r23
    5cac:	6f 91       	pop	r22
    5cae:	5f 91       	pop	r21
    5cb0:	4f 91       	pop	r20
    5cb2:	3f 91       	pop	r19
    5cb4:	2f 91       	pop	r18
    5cb6:	0f 90       	pop	r0
    5cb8:	0b be       	out	0x3b, r0	; 59
    5cba:	0f 90       	pop	r0
    5cbc:	0f be       	out	0x3f, r0	; 63
    5cbe:	0f 90       	pop	r0
    5cc0:	1f 90       	pop	r1
    5cc2:	18 95       	reti

00005cc4 <__vector_78>:
    5cc4:	1f 92       	push	r1
    5cc6:	0f 92       	push	r0
    5cc8:	0f b6       	in	r0, 0x3f	; 63
    5cca:	0f 92       	push	r0
    5ccc:	11 24       	eor	r1, r1
    5cce:	0b b6       	in	r0, 0x3b	; 59
    5cd0:	0f 92       	push	r0
    5cd2:	2f 93       	push	r18
    5cd4:	3f 93       	push	r19
    5cd6:	4f 93       	push	r20
    5cd8:	5f 93       	push	r21
    5cda:	6f 93       	push	r22
    5cdc:	7f 93       	push	r23
    5cde:	8f 93       	push	r24
    5ce0:	9f 93       	push	r25
    5ce2:	af 93       	push	r26
    5ce4:	bf 93       	push	r27
    5ce6:	ef 93       	push	r30
    5ce8:	ff 93       	push	r31
    5cea:	e0 91 cb 26 	lds	r30, 0x26CB	; 0x8026cb <tc_tcd0_err_callback>
    5cee:	f0 91 cc 26 	lds	r31, 0x26CC	; 0x8026cc <tc_tcd0_err_callback+0x1>
    5cf2:	30 97       	sbiw	r30, 0x00	; 0
    5cf4:	09 f0       	breq	.+2      	; 0x5cf8 <__vector_78+0x34>
    5cf6:	19 95       	eicall
    5cf8:	ff 91       	pop	r31
    5cfa:	ef 91       	pop	r30
    5cfc:	bf 91       	pop	r27
    5cfe:	af 91       	pop	r26
    5d00:	9f 91       	pop	r25
    5d02:	8f 91       	pop	r24
    5d04:	7f 91       	pop	r23
    5d06:	6f 91       	pop	r22
    5d08:	5f 91       	pop	r21
    5d0a:	4f 91       	pop	r20
    5d0c:	3f 91       	pop	r19
    5d0e:	2f 91       	pop	r18
    5d10:	0f 90       	pop	r0
    5d12:	0b be       	out	0x3b, r0	; 59
    5d14:	0f 90       	pop	r0
    5d16:	0f be       	out	0x3f, r0	; 63
    5d18:	0f 90       	pop	r0
    5d1a:	1f 90       	pop	r1
    5d1c:	18 95       	reti

00005d1e <__vector_79>:
    5d1e:	1f 92       	push	r1
    5d20:	0f 92       	push	r0
    5d22:	0f b6       	in	r0, 0x3f	; 63
    5d24:	0f 92       	push	r0
    5d26:	11 24       	eor	r1, r1
    5d28:	0b b6       	in	r0, 0x3b	; 59
    5d2a:	0f 92       	push	r0
    5d2c:	2f 93       	push	r18
    5d2e:	3f 93       	push	r19
    5d30:	4f 93       	push	r20
    5d32:	5f 93       	push	r21
    5d34:	6f 93       	push	r22
    5d36:	7f 93       	push	r23
    5d38:	8f 93       	push	r24
    5d3a:	9f 93       	push	r25
    5d3c:	af 93       	push	r26
    5d3e:	bf 93       	push	r27
    5d40:	ef 93       	push	r30
    5d42:	ff 93       	push	r31
    5d44:	e0 91 c9 26 	lds	r30, 0x26C9	; 0x8026c9 <tc_tcd0_cca_callback>
    5d48:	f0 91 ca 26 	lds	r31, 0x26CA	; 0x8026ca <tc_tcd0_cca_callback+0x1>
    5d4c:	30 97       	sbiw	r30, 0x00	; 0
    5d4e:	09 f0       	breq	.+2      	; 0x5d52 <__vector_79+0x34>
    5d50:	19 95       	eicall
    5d52:	ff 91       	pop	r31
    5d54:	ef 91       	pop	r30
    5d56:	bf 91       	pop	r27
    5d58:	af 91       	pop	r26
    5d5a:	9f 91       	pop	r25
    5d5c:	8f 91       	pop	r24
    5d5e:	7f 91       	pop	r23
    5d60:	6f 91       	pop	r22
    5d62:	5f 91       	pop	r21
    5d64:	4f 91       	pop	r20
    5d66:	3f 91       	pop	r19
    5d68:	2f 91       	pop	r18
    5d6a:	0f 90       	pop	r0
    5d6c:	0b be       	out	0x3b, r0	; 59
    5d6e:	0f 90       	pop	r0
    5d70:	0f be       	out	0x3f, r0	; 63
    5d72:	0f 90       	pop	r0
    5d74:	1f 90       	pop	r1
    5d76:	18 95       	reti

00005d78 <__vector_80>:
    5d78:	1f 92       	push	r1
    5d7a:	0f 92       	push	r0
    5d7c:	0f b6       	in	r0, 0x3f	; 63
    5d7e:	0f 92       	push	r0
    5d80:	11 24       	eor	r1, r1
    5d82:	0b b6       	in	r0, 0x3b	; 59
    5d84:	0f 92       	push	r0
    5d86:	2f 93       	push	r18
    5d88:	3f 93       	push	r19
    5d8a:	4f 93       	push	r20
    5d8c:	5f 93       	push	r21
    5d8e:	6f 93       	push	r22
    5d90:	7f 93       	push	r23
    5d92:	8f 93       	push	r24
    5d94:	9f 93       	push	r25
    5d96:	af 93       	push	r26
    5d98:	bf 93       	push	r27
    5d9a:	ef 93       	push	r30
    5d9c:	ff 93       	push	r31
    5d9e:	e0 91 c7 26 	lds	r30, 0x26C7	; 0x8026c7 <tc_tcd0_ccb_callback>
    5da2:	f0 91 c8 26 	lds	r31, 0x26C8	; 0x8026c8 <tc_tcd0_ccb_callback+0x1>
    5da6:	30 97       	sbiw	r30, 0x00	; 0
    5da8:	09 f0       	breq	.+2      	; 0x5dac <__vector_80+0x34>
    5daa:	19 95       	eicall
    5dac:	ff 91       	pop	r31
    5dae:	ef 91       	pop	r30
    5db0:	bf 91       	pop	r27
    5db2:	af 91       	pop	r26
    5db4:	9f 91       	pop	r25
    5db6:	8f 91       	pop	r24
    5db8:	7f 91       	pop	r23
    5dba:	6f 91       	pop	r22
    5dbc:	5f 91       	pop	r21
    5dbe:	4f 91       	pop	r20
    5dc0:	3f 91       	pop	r19
    5dc2:	2f 91       	pop	r18
    5dc4:	0f 90       	pop	r0
    5dc6:	0b be       	out	0x3b, r0	; 59
    5dc8:	0f 90       	pop	r0
    5dca:	0f be       	out	0x3f, r0	; 63
    5dcc:	0f 90       	pop	r0
    5dce:	1f 90       	pop	r1
    5dd0:	18 95       	reti

00005dd2 <__vector_81>:
    5dd2:	1f 92       	push	r1
    5dd4:	0f 92       	push	r0
    5dd6:	0f b6       	in	r0, 0x3f	; 63
    5dd8:	0f 92       	push	r0
    5dda:	11 24       	eor	r1, r1
    5ddc:	0b b6       	in	r0, 0x3b	; 59
    5dde:	0f 92       	push	r0
    5de0:	2f 93       	push	r18
    5de2:	3f 93       	push	r19
    5de4:	4f 93       	push	r20
    5de6:	5f 93       	push	r21
    5de8:	6f 93       	push	r22
    5dea:	7f 93       	push	r23
    5dec:	8f 93       	push	r24
    5dee:	9f 93       	push	r25
    5df0:	af 93       	push	r26
    5df2:	bf 93       	push	r27
    5df4:	ef 93       	push	r30
    5df6:	ff 93       	push	r31
    5df8:	e0 91 c5 26 	lds	r30, 0x26C5	; 0x8026c5 <tc_tcd0_ccc_callback>
    5dfc:	f0 91 c6 26 	lds	r31, 0x26C6	; 0x8026c6 <tc_tcd0_ccc_callback+0x1>
    5e00:	30 97       	sbiw	r30, 0x00	; 0
    5e02:	09 f0       	breq	.+2      	; 0x5e06 <__vector_81+0x34>
    5e04:	19 95       	eicall
    5e06:	ff 91       	pop	r31
    5e08:	ef 91       	pop	r30
    5e0a:	bf 91       	pop	r27
    5e0c:	af 91       	pop	r26
    5e0e:	9f 91       	pop	r25
    5e10:	8f 91       	pop	r24
    5e12:	7f 91       	pop	r23
    5e14:	6f 91       	pop	r22
    5e16:	5f 91       	pop	r21
    5e18:	4f 91       	pop	r20
    5e1a:	3f 91       	pop	r19
    5e1c:	2f 91       	pop	r18
    5e1e:	0f 90       	pop	r0
    5e20:	0b be       	out	0x3b, r0	; 59
    5e22:	0f 90       	pop	r0
    5e24:	0f be       	out	0x3f, r0	; 63
    5e26:	0f 90       	pop	r0
    5e28:	1f 90       	pop	r1
    5e2a:	18 95       	reti

00005e2c <__vector_82>:
    5e2c:	1f 92       	push	r1
    5e2e:	0f 92       	push	r0
    5e30:	0f b6       	in	r0, 0x3f	; 63
    5e32:	0f 92       	push	r0
    5e34:	11 24       	eor	r1, r1
    5e36:	0b b6       	in	r0, 0x3b	; 59
    5e38:	0f 92       	push	r0
    5e3a:	2f 93       	push	r18
    5e3c:	3f 93       	push	r19
    5e3e:	4f 93       	push	r20
    5e40:	5f 93       	push	r21
    5e42:	6f 93       	push	r22
    5e44:	7f 93       	push	r23
    5e46:	8f 93       	push	r24
    5e48:	9f 93       	push	r25
    5e4a:	af 93       	push	r26
    5e4c:	bf 93       	push	r27
    5e4e:	ef 93       	push	r30
    5e50:	ff 93       	push	r31
    5e52:	e0 91 c3 26 	lds	r30, 0x26C3	; 0x8026c3 <tc_tcd0_ccd_callback>
    5e56:	f0 91 c4 26 	lds	r31, 0x26C4	; 0x8026c4 <tc_tcd0_ccd_callback+0x1>
    5e5a:	30 97       	sbiw	r30, 0x00	; 0
    5e5c:	09 f0       	breq	.+2      	; 0x5e60 <__vector_82+0x34>
    5e5e:	19 95       	eicall
    5e60:	ff 91       	pop	r31
    5e62:	ef 91       	pop	r30
    5e64:	bf 91       	pop	r27
    5e66:	af 91       	pop	r26
    5e68:	9f 91       	pop	r25
    5e6a:	8f 91       	pop	r24
    5e6c:	7f 91       	pop	r23
    5e6e:	6f 91       	pop	r22
    5e70:	5f 91       	pop	r21
    5e72:	4f 91       	pop	r20
    5e74:	3f 91       	pop	r19
    5e76:	2f 91       	pop	r18
    5e78:	0f 90       	pop	r0
    5e7a:	0b be       	out	0x3b, r0	; 59
    5e7c:	0f 90       	pop	r0
    5e7e:	0f be       	out	0x3f, r0	; 63
    5e80:	0f 90       	pop	r0
    5e82:	1f 90       	pop	r1
    5e84:	18 95       	reti

00005e86 <__vector_83>:
    5e86:	1f 92       	push	r1
    5e88:	0f 92       	push	r0
    5e8a:	0f b6       	in	r0, 0x3f	; 63
    5e8c:	0f 92       	push	r0
    5e8e:	11 24       	eor	r1, r1
    5e90:	0b b6       	in	r0, 0x3b	; 59
    5e92:	0f 92       	push	r0
    5e94:	2f 93       	push	r18
    5e96:	3f 93       	push	r19
    5e98:	4f 93       	push	r20
    5e9a:	5f 93       	push	r21
    5e9c:	6f 93       	push	r22
    5e9e:	7f 93       	push	r23
    5ea0:	8f 93       	push	r24
    5ea2:	9f 93       	push	r25
    5ea4:	af 93       	push	r26
    5ea6:	bf 93       	push	r27
    5ea8:	ef 93       	push	r30
    5eaa:	ff 93       	push	r31
    5eac:	e0 91 c1 26 	lds	r30, 0x26C1	; 0x8026c1 <tc_tcd1_ovf_callback>
    5eb0:	f0 91 c2 26 	lds	r31, 0x26C2	; 0x8026c2 <tc_tcd1_ovf_callback+0x1>
    5eb4:	30 97       	sbiw	r30, 0x00	; 0
    5eb6:	09 f0       	breq	.+2      	; 0x5eba <__vector_83+0x34>
    5eb8:	19 95       	eicall
    5eba:	ff 91       	pop	r31
    5ebc:	ef 91       	pop	r30
    5ebe:	bf 91       	pop	r27
    5ec0:	af 91       	pop	r26
    5ec2:	9f 91       	pop	r25
    5ec4:	8f 91       	pop	r24
    5ec6:	7f 91       	pop	r23
    5ec8:	6f 91       	pop	r22
    5eca:	5f 91       	pop	r21
    5ecc:	4f 91       	pop	r20
    5ece:	3f 91       	pop	r19
    5ed0:	2f 91       	pop	r18
    5ed2:	0f 90       	pop	r0
    5ed4:	0b be       	out	0x3b, r0	; 59
    5ed6:	0f 90       	pop	r0
    5ed8:	0f be       	out	0x3f, r0	; 63
    5eda:	0f 90       	pop	r0
    5edc:	1f 90       	pop	r1
    5ede:	18 95       	reti

00005ee0 <__vector_84>:
    5ee0:	1f 92       	push	r1
    5ee2:	0f 92       	push	r0
    5ee4:	0f b6       	in	r0, 0x3f	; 63
    5ee6:	0f 92       	push	r0
    5ee8:	11 24       	eor	r1, r1
    5eea:	0b b6       	in	r0, 0x3b	; 59
    5eec:	0f 92       	push	r0
    5eee:	2f 93       	push	r18
    5ef0:	3f 93       	push	r19
    5ef2:	4f 93       	push	r20
    5ef4:	5f 93       	push	r21
    5ef6:	6f 93       	push	r22
    5ef8:	7f 93       	push	r23
    5efa:	8f 93       	push	r24
    5efc:	9f 93       	push	r25
    5efe:	af 93       	push	r26
    5f00:	bf 93       	push	r27
    5f02:	ef 93       	push	r30
    5f04:	ff 93       	push	r31
    5f06:	e0 91 bf 26 	lds	r30, 0x26BF	; 0x8026bf <tc_tcd1_err_callback>
    5f0a:	f0 91 c0 26 	lds	r31, 0x26C0	; 0x8026c0 <tc_tcd1_err_callback+0x1>
    5f0e:	30 97       	sbiw	r30, 0x00	; 0
    5f10:	09 f0       	breq	.+2      	; 0x5f14 <__vector_84+0x34>
    5f12:	19 95       	eicall
    5f14:	ff 91       	pop	r31
    5f16:	ef 91       	pop	r30
    5f18:	bf 91       	pop	r27
    5f1a:	af 91       	pop	r26
    5f1c:	9f 91       	pop	r25
    5f1e:	8f 91       	pop	r24
    5f20:	7f 91       	pop	r23
    5f22:	6f 91       	pop	r22
    5f24:	5f 91       	pop	r21
    5f26:	4f 91       	pop	r20
    5f28:	3f 91       	pop	r19
    5f2a:	2f 91       	pop	r18
    5f2c:	0f 90       	pop	r0
    5f2e:	0b be       	out	0x3b, r0	; 59
    5f30:	0f 90       	pop	r0
    5f32:	0f be       	out	0x3f, r0	; 63
    5f34:	0f 90       	pop	r0
    5f36:	1f 90       	pop	r1
    5f38:	18 95       	reti

00005f3a <__vector_85>:
    5f3a:	1f 92       	push	r1
    5f3c:	0f 92       	push	r0
    5f3e:	0f b6       	in	r0, 0x3f	; 63
    5f40:	0f 92       	push	r0
    5f42:	11 24       	eor	r1, r1
    5f44:	0b b6       	in	r0, 0x3b	; 59
    5f46:	0f 92       	push	r0
    5f48:	2f 93       	push	r18
    5f4a:	3f 93       	push	r19
    5f4c:	4f 93       	push	r20
    5f4e:	5f 93       	push	r21
    5f50:	6f 93       	push	r22
    5f52:	7f 93       	push	r23
    5f54:	8f 93       	push	r24
    5f56:	9f 93       	push	r25
    5f58:	af 93       	push	r26
    5f5a:	bf 93       	push	r27
    5f5c:	ef 93       	push	r30
    5f5e:	ff 93       	push	r31
    5f60:	e0 91 bd 26 	lds	r30, 0x26BD	; 0x8026bd <tc_tcd1_cca_callback>
    5f64:	f0 91 be 26 	lds	r31, 0x26BE	; 0x8026be <tc_tcd1_cca_callback+0x1>
    5f68:	30 97       	sbiw	r30, 0x00	; 0
    5f6a:	09 f0       	breq	.+2      	; 0x5f6e <__vector_85+0x34>
    5f6c:	19 95       	eicall
    5f6e:	ff 91       	pop	r31
    5f70:	ef 91       	pop	r30
    5f72:	bf 91       	pop	r27
    5f74:	af 91       	pop	r26
    5f76:	9f 91       	pop	r25
    5f78:	8f 91       	pop	r24
    5f7a:	7f 91       	pop	r23
    5f7c:	6f 91       	pop	r22
    5f7e:	5f 91       	pop	r21
    5f80:	4f 91       	pop	r20
    5f82:	3f 91       	pop	r19
    5f84:	2f 91       	pop	r18
    5f86:	0f 90       	pop	r0
    5f88:	0b be       	out	0x3b, r0	; 59
    5f8a:	0f 90       	pop	r0
    5f8c:	0f be       	out	0x3f, r0	; 63
    5f8e:	0f 90       	pop	r0
    5f90:	1f 90       	pop	r1
    5f92:	18 95       	reti

00005f94 <__vector_86>:
    5f94:	1f 92       	push	r1
    5f96:	0f 92       	push	r0
    5f98:	0f b6       	in	r0, 0x3f	; 63
    5f9a:	0f 92       	push	r0
    5f9c:	11 24       	eor	r1, r1
    5f9e:	0b b6       	in	r0, 0x3b	; 59
    5fa0:	0f 92       	push	r0
    5fa2:	2f 93       	push	r18
    5fa4:	3f 93       	push	r19
    5fa6:	4f 93       	push	r20
    5fa8:	5f 93       	push	r21
    5faa:	6f 93       	push	r22
    5fac:	7f 93       	push	r23
    5fae:	8f 93       	push	r24
    5fb0:	9f 93       	push	r25
    5fb2:	af 93       	push	r26
    5fb4:	bf 93       	push	r27
    5fb6:	ef 93       	push	r30
    5fb8:	ff 93       	push	r31
    5fba:	e0 91 bb 26 	lds	r30, 0x26BB	; 0x8026bb <tc_tcd1_ccb_callback>
    5fbe:	f0 91 bc 26 	lds	r31, 0x26BC	; 0x8026bc <tc_tcd1_ccb_callback+0x1>
    5fc2:	30 97       	sbiw	r30, 0x00	; 0
    5fc4:	09 f0       	breq	.+2      	; 0x5fc8 <__vector_86+0x34>
    5fc6:	19 95       	eicall
    5fc8:	ff 91       	pop	r31
    5fca:	ef 91       	pop	r30
    5fcc:	bf 91       	pop	r27
    5fce:	af 91       	pop	r26
    5fd0:	9f 91       	pop	r25
    5fd2:	8f 91       	pop	r24
    5fd4:	7f 91       	pop	r23
    5fd6:	6f 91       	pop	r22
    5fd8:	5f 91       	pop	r21
    5fda:	4f 91       	pop	r20
    5fdc:	3f 91       	pop	r19
    5fde:	2f 91       	pop	r18
    5fe0:	0f 90       	pop	r0
    5fe2:	0b be       	out	0x3b, r0	; 59
    5fe4:	0f 90       	pop	r0
    5fe6:	0f be       	out	0x3f, r0	; 63
    5fe8:	0f 90       	pop	r0
    5fea:	1f 90       	pop	r1
    5fec:	18 95       	reti

00005fee <__vector_47>:
    5fee:	1f 92       	push	r1
    5ff0:	0f 92       	push	r0
    5ff2:	0f b6       	in	r0, 0x3f	; 63
    5ff4:	0f 92       	push	r0
    5ff6:	11 24       	eor	r1, r1
    5ff8:	0b b6       	in	r0, 0x3b	; 59
    5ffa:	0f 92       	push	r0
    5ffc:	2f 93       	push	r18
    5ffe:	3f 93       	push	r19
    6000:	4f 93       	push	r20
    6002:	5f 93       	push	r21
    6004:	6f 93       	push	r22
    6006:	7f 93       	push	r23
    6008:	8f 93       	push	r24
    600a:	9f 93       	push	r25
    600c:	af 93       	push	r26
    600e:	bf 93       	push	r27
    6010:	ef 93       	push	r30
    6012:	ff 93       	push	r31
    6014:	e0 91 b9 26 	lds	r30, 0x26B9	; 0x8026b9 <tc_tce0_ovf_callback>
    6018:	f0 91 ba 26 	lds	r31, 0x26BA	; 0x8026ba <tc_tce0_ovf_callback+0x1>
    601c:	30 97       	sbiw	r30, 0x00	; 0
    601e:	09 f0       	breq	.+2      	; 0x6022 <__stack+0x23>
    6020:	19 95       	eicall
    6022:	ff 91       	pop	r31
    6024:	ef 91       	pop	r30
    6026:	bf 91       	pop	r27
    6028:	af 91       	pop	r26
    602a:	9f 91       	pop	r25
    602c:	8f 91       	pop	r24
    602e:	7f 91       	pop	r23
    6030:	6f 91       	pop	r22
    6032:	5f 91       	pop	r21
    6034:	4f 91       	pop	r20
    6036:	3f 91       	pop	r19
    6038:	2f 91       	pop	r18
    603a:	0f 90       	pop	r0
    603c:	0b be       	out	0x3b, r0	; 59
    603e:	0f 90       	pop	r0
    6040:	0f be       	out	0x3f, r0	; 63
    6042:	0f 90       	pop	r0
    6044:	1f 90       	pop	r1
    6046:	18 95       	reti

00006048 <__vector_48>:
    6048:	1f 92       	push	r1
    604a:	0f 92       	push	r0
    604c:	0f b6       	in	r0, 0x3f	; 63
    604e:	0f 92       	push	r0
    6050:	11 24       	eor	r1, r1
    6052:	0b b6       	in	r0, 0x3b	; 59
    6054:	0f 92       	push	r0
    6056:	2f 93       	push	r18
    6058:	3f 93       	push	r19
    605a:	4f 93       	push	r20
    605c:	5f 93       	push	r21
    605e:	6f 93       	push	r22
    6060:	7f 93       	push	r23
    6062:	8f 93       	push	r24
    6064:	9f 93       	push	r25
    6066:	af 93       	push	r26
    6068:	bf 93       	push	r27
    606a:	ef 93       	push	r30
    606c:	ff 93       	push	r31
    606e:	e0 91 b7 26 	lds	r30, 0x26B7	; 0x8026b7 <tc_tce0_err_callback>
    6072:	f0 91 b8 26 	lds	r31, 0x26B8	; 0x8026b8 <tc_tce0_err_callback+0x1>
    6076:	30 97       	sbiw	r30, 0x00	; 0
    6078:	09 f0       	breq	.+2      	; 0x607c <__vector_48+0x34>
    607a:	19 95       	eicall
    607c:	ff 91       	pop	r31
    607e:	ef 91       	pop	r30
    6080:	bf 91       	pop	r27
    6082:	af 91       	pop	r26
    6084:	9f 91       	pop	r25
    6086:	8f 91       	pop	r24
    6088:	7f 91       	pop	r23
    608a:	6f 91       	pop	r22
    608c:	5f 91       	pop	r21
    608e:	4f 91       	pop	r20
    6090:	3f 91       	pop	r19
    6092:	2f 91       	pop	r18
    6094:	0f 90       	pop	r0
    6096:	0b be       	out	0x3b, r0	; 59
    6098:	0f 90       	pop	r0
    609a:	0f be       	out	0x3f, r0	; 63
    609c:	0f 90       	pop	r0
    609e:	1f 90       	pop	r1
    60a0:	18 95       	reti

000060a2 <__vector_49>:
    60a2:	1f 92       	push	r1
    60a4:	0f 92       	push	r0
    60a6:	0f b6       	in	r0, 0x3f	; 63
    60a8:	0f 92       	push	r0
    60aa:	11 24       	eor	r1, r1
    60ac:	0b b6       	in	r0, 0x3b	; 59
    60ae:	0f 92       	push	r0
    60b0:	2f 93       	push	r18
    60b2:	3f 93       	push	r19
    60b4:	4f 93       	push	r20
    60b6:	5f 93       	push	r21
    60b8:	6f 93       	push	r22
    60ba:	7f 93       	push	r23
    60bc:	8f 93       	push	r24
    60be:	9f 93       	push	r25
    60c0:	af 93       	push	r26
    60c2:	bf 93       	push	r27
    60c4:	ef 93       	push	r30
    60c6:	ff 93       	push	r31
    60c8:	e0 91 b5 26 	lds	r30, 0x26B5	; 0x8026b5 <tc_tce0_cca_callback>
    60cc:	f0 91 b6 26 	lds	r31, 0x26B6	; 0x8026b6 <tc_tce0_cca_callback+0x1>
    60d0:	30 97       	sbiw	r30, 0x00	; 0
    60d2:	09 f0       	breq	.+2      	; 0x60d6 <__vector_49+0x34>
    60d4:	19 95       	eicall
    60d6:	ff 91       	pop	r31
    60d8:	ef 91       	pop	r30
    60da:	bf 91       	pop	r27
    60dc:	af 91       	pop	r26
    60de:	9f 91       	pop	r25
    60e0:	8f 91       	pop	r24
    60e2:	7f 91       	pop	r23
    60e4:	6f 91       	pop	r22
    60e6:	5f 91       	pop	r21
    60e8:	4f 91       	pop	r20
    60ea:	3f 91       	pop	r19
    60ec:	2f 91       	pop	r18
    60ee:	0f 90       	pop	r0
    60f0:	0b be       	out	0x3b, r0	; 59
    60f2:	0f 90       	pop	r0
    60f4:	0f be       	out	0x3f, r0	; 63
    60f6:	0f 90       	pop	r0
    60f8:	1f 90       	pop	r1
    60fa:	18 95       	reti

000060fc <__vector_50>:
    60fc:	1f 92       	push	r1
    60fe:	0f 92       	push	r0
    6100:	0f b6       	in	r0, 0x3f	; 63
    6102:	0f 92       	push	r0
    6104:	11 24       	eor	r1, r1
    6106:	0b b6       	in	r0, 0x3b	; 59
    6108:	0f 92       	push	r0
    610a:	2f 93       	push	r18
    610c:	3f 93       	push	r19
    610e:	4f 93       	push	r20
    6110:	5f 93       	push	r21
    6112:	6f 93       	push	r22
    6114:	7f 93       	push	r23
    6116:	8f 93       	push	r24
    6118:	9f 93       	push	r25
    611a:	af 93       	push	r26
    611c:	bf 93       	push	r27
    611e:	ef 93       	push	r30
    6120:	ff 93       	push	r31
    6122:	e0 91 b3 26 	lds	r30, 0x26B3	; 0x8026b3 <tc_tce0_ccb_callback>
    6126:	f0 91 b4 26 	lds	r31, 0x26B4	; 0x8026b4 <tc_tce0_ccb_callback+0x1>
    612a:	30 97       	sbiw	r30, 0x00	; 0
    612c:	09 f0       	breq	.+2      	; 0x6130 <__vector_50+0x34>
    612e:	19 95       	eicall
    6130:	ff 91       	pop	r31
    6132:	ef 91       	pop	r30
    6134:	bf 91       	pop	r27
    6136:	af 91       	pop	r26
    6138:	9f 91       	pop	r25
    613a:	8f 91       	pop	r24
    613c:	7f 91       	pop	r23
    613e:	6f 91       	pop	r22
    6140:	5f 91       	pop	r21
    6142:	4f 91       	pop	r20
    6144:	3f 91       	pop	r19
    6146:	2f 91       	pop	r18
    6148:	0f 90       	pop	r0
    614a:	0b be       	out	0x3b, r0	; 59
    614c:	0f 90       	pop	r0
    614e:	0f be       	out	0x3f, r0	; 63
    6150:	0f 90       	pop	r0
    6152:	1f 90       	pop	r1
    6154:	18 95       	reti

00006156 <__vector_51>:
    6156:	1f 92       	push	r1
    6158:	0f 92       	push	r0
    615a:	0f b6       	in	r0, 0x3f	; 63
    615c:	0f 92       	push	r0
    615e:	11 24       	eor	r1, r1
    6160:	0b b6       	in	r0, 0x3b	; 59
    6162:	0f 92       	push	r0
    6164:	2f 93       	push	r18
    6166:	3f 93       	push	r19
    6168:	4f 93       	push	r20
    616a:	5f 93       	push	r21
    616c:	6f 93       	push	r22
    616e:	7f 93       	push	r23
    6170:	8f 93       	push	r24
    6172:	9f 93       	push	r25
    6174:	af 93       	push	r26
    6176:	bf 93       	push	r27
    6178:	ef 93       	push	r30
    617a:	ff 93       	push	r31
    617c:	e0 91 b1 26 	lds	r30, 0x26B1	; 0x8026b1 <tc_tce0_ccc_callback>
    6180:	f0 91 b2 26 	lds	r31, 0x26B2	; 0x8026b2 <tc_tce0_ccc_callback+0x1>
    6184:	30 97       	sbiw	r30, 0x00	; 0
    6186:	09 f0       	breq	.+2      	; 0x618a <__vector_51+0x34>
    6188:	19 95       	eicall
    618a:	ff 91       	pop	r31
    618c:	ef 91       	pop	r30
    618e:	bf 91       	pop	r27
    6190:	af 91       	pop	r26
    6192:	9f 91       	pop	r25
    6194:	8f 91       	pop	r24
    6196:	7f 91       	pop	r23
    6198:	6f 91       	pop	r22
    619a:	5f 91       	pop	r21
    619c:	4f 91       	pop	r20
    619e:	3f 91       	pop	r19
    61a0:	2f 91       	pop	r18
    61a2:	0f 90       	pop	r0
    61a4:	0b be       	out	0x3b, r0	; 59
    61a6:	0f 90       	pop	r0
    61a8:	0f be       	out	0x3f, r0	; 63
    61aa:	0f 90       	pop	r0
    61ac:	1f 90       	pop	r1
    61ae:	18 95       	reti

000061b0 <__vector_52>:
    61b0:	1f 92       	push	r1
    61b2:	0f 92       	push	r0
    61b4:	0f b6       	in	r0, 0x3f	; 63
    61b6:	0f 92       	push	r0
    61b8:	11 24       	eor	r1, r1
    61ba:	0b b6       	in	r0, 0x3b	; 59
    61bc:	0f 92       	push	r0
    61be:	2f 93       	push	r18
    61c0:	3f 93       	push	r19
    61c2:	4f 93       	push	r20
    61c4:	5f 93       	push	r21
    61c6:	6f 93       	push	r22
    61c8:	7f 93       	push	r23
    61ca:	8f 93       	push	r24
    61cc:	9f 93       	push	r25
    61ce:	af 93       	push	r26
    61d0:	bf 93       	push	r27
    61d2:	ef 93       	push	r30
    61d4:	ff 93       	push	r31
    61d6:	e0 91 af 26 	lds	r30, 0x26AF	; 0x8026af <tc_tce0_ccd_callback>
    61da:	f0 91 b0 26 	lds	r31, 0x26B0	; 0x8026b0 <tc_tce0_ccd_callback+0x1>
    61de:	30 97       	sbiw	r30, 0x00	; 0
    61e0:	09 f0       	breq	.+2      	; 0x61e4 <__vector_52+0x34>
    61e2:	19 95       	eicall
    61e4:	ff 91       	pop	r31
    61e6:	ef 91       	pop	r30
    61e8:	bf 91       	pop	r27
    61ea:	af 91       	pop	r26
    61ec:	9f 91       	pop	r25
    61ee:	8f 91       	pop	r24
    61f0:	7f 91       	pop	r23
    61f2:	6f 91       	pop	r22
    61f4:	5f 91       	pop	r21
    61f6:	4f 91       	pop	r20
    61f8:	3f 91       	pop	r19
    61fa:	2f 91       	pop	r18
    61fc:	0f 90       	pop	r0
    61fe:	0b be       	out	0x3b, r0	; 59
    6200:	0f 90       	pop	r0
    6202:	0f be       	out	0x3f, r0	; 63
    6204:	0f 90       	pop	r0
    6206:	1f 90       	pop	r1
    6208:	18 95       	reti

0000620a <__vector_53>:
    620a:	1f 92       	push	r1
    620c:	0f 92       	push	r0
    620e:	0f b6       	in	r0, 0x3f	; 63
    6210:	0f 92       	push	r0
    6212:	11 24       	eor	r1, r1
    6214:	0b b6       	in	r0, 0x3b	; 59
    6216:	0f 92       	push	r0
    6218:	2f 93       	push	r18
    621a:	3f 93       	push	r19
    621c:	4f 93       	push	r20
    621e:	5f 93       	push	r21
    6220:	6f 93       	push	r22
    6222:	7f 93       	push	r23
    6224:	8f 93       	push	r24
    6226:	9f 93       	push	r25
    6228:	af 93       	push	r26
    622a:	bf 93       	push	r27
    622c:	ef 93       	push	r30
    622e:	ff 93       	push	r31
    6230:	e0 91 ad 26 	lds	r30, 0x26AD	; 0x8026ad <tc_tce1_ovf_callback>
    6234:	f0 91 ae 26 	lds	r31, 0x26AE	; 0x8026ae <tc_tce1_ovf_callback+0x1>
    6238:	30 97       	sbiw	r30, 0x00	; 0
    623a:	09 f0       	breq	.+2      	; 0x623e <__vector_53+0x34>
    623c:	19 95       	eicall
    623e:	ff 91       	pop	r31
    6240:	ef 91       	pop	r30
    6242:	bf 91       	pop	r27
    6244:	af 91       	pop	r26
    6246:	9f 91       	pop	r25
    6248:	8f 91       	pop	r24
    624a:	7f 91       	pop	r23
    624c:	6f 91       	pop	r22
    624e:	5f 91       	pop	r21
    6250:	4f 91       	pop	r20
    6252:	3f 91       	pop	r19
    6254:	2f 91       	pop	r18
    6256:	0f 90       	pop	r0
    6258:	0b be       	out	0x3b, r0	; 59
    625a:	0f 90       	pop	r0
    625c:	0f be       	out	0x3f, r0	; 63
    625e:	0f 90       	pop	r0
    6260:	1f 90       	pop	r1
    6262:	18 95       	reti

00006264 <__vector_54>:
    6264:	1f 92       	push	r1
    6266:	0f 92       	push	r0
    6268:	0f b6       	in	r0, 0x3f	; 63
    626a:	0f 92       	push	r0
    626c:	11 24       	eor	r1, r1
    626e:	0b b6       	in	r0, 0x3b	; 59
    6270:	0f 92       	push	r0
    6272:	2f 93       	push	r18
    6274:	3f 93       	push	r19
    6276:	4f 93       	push	r20
    6278:	5f 93       	push	r21
    627a:	6f 93       	push	r22
    627c:	7f 93       	push	r23
    627e:	8f 93       	push	r24
    6280:	9f 93       	push	r25
    6282:	af 93       	push	r26
    6284:	bf 93       	push	r27
    6286:	ef 93       	push	r30
    6288:	ff 93       	push	r31
    628a:	e0 91 ab 26 	lds	r30, 0x26AB	; 0x8026ab <tc_tce1_err_callback>
    628e:	f0 91 ac 26 	lds	r31, 0x26AC	; 0x8026ac <tc_tce1_err_callback+0x1>
    6292:	30 97       	sbiw	r30, 0x00	; 0
    6294:	09 f0       	breq	.+2      	; 0x6298 <__vector_54+0x34>
    6296:	19 95       	eicall
    6298:	ff 91       	pop	r31
    629a:	ef 91       	pop	r30
    629c:	bf 91       	pop	r27
    629e:	af 91       	pop	r26
    62a0:	9f 91       	pop	r25
    62a2:	8f 91       	pop	r24
    62a4:	7f 91       	pop	r23
    62a6:	6f 91       	pop	r22
    62a8:	5f 91       	pop	r21
    62aa:	4f 91       	pop	r20
    62ac:	3f 91       	pop	r19
    62ae:	2f 91       	pop	r18
    62b0:	0f 90       	pop	r0
    62b2:	0b be       	out	0x3b, r0	; 59
    62b4:	0f 90       	pop	r0
    62b6:	0f be       	out	0x3f, r0	; 63
    62b8:	0f 90       	pop	r0
    62ba:	1f 90       	pop	r1
    62bc:	18 95       	reti

000062be <__vector_55>:
    62be:	1f 92       	push	r1
    62c0:	0f 92       	push	r0
    62c2:	0f b6       	in	r0, 0x3f	; 63
    62c4:	0f 92       	push	r0
    62c6:	11 24       	eor	r1, r1
    62c8:	0b b6       	in	r0, 0x3b	; 59
    62ca:	0f 92       	push	r0
    62cc:	2f 93       	push	r18
    62ce:	3f 93       	push	r19
    62d0:	4f 93       	push	r20
    62d2:	5f 93       	push	r21
    62d4:	6f 93       	push	r22
    62d6:	7f 93       	push	r23
    62d8:	8f 93       	push	r24
    62da:	9f 93       	push	r25
    62dc:	af 93       	push	r26
    62de:	bf 93       	push	r27
    62e0:	ef 93       	push	r30
    62e2:	ff 93       	push	r31
    62e4:	e0 91 a9 26 	lds	r30, 0x26A9	; 0x8026a9 <tc_tce1_cca_callback>
    62e8:	f0 91 aa 26 	lds	r31, 0x26AA	; 0x8026aa <tc_tce1_cca_callback+0x1>
    62ec:	30 97       	sbiw	r30, 0x00	; 0
    62ee:	09 f0       	breq	.+2      	; 0x62f2 <__vector_55+0x34>
    62f0:	19 95       	eicall
    62f2:	ff 91       	pop	r31
    62f4:	ef 91       	pop	r30
    62f6:	bf 91       	pop	r27
    62f8:	af 91       	pop	r26
    62fa:	9f 91       	pop	r25
    62fc:	8f 91       	pop	r24
    62fe:	7f 91       	pop	r23
    6300:	6f 91       	pop	r22
    6302:	5f 91       	pop	r21
    6304:	4f 91       	pop	r20
    6306:	3f 91       	pop	r19
    6308:	2f 91       	pop	r18
    630a:	0f 90       	pop	r0
    630c:	0b be       	out	0x3b, r0	; 59
    630e:	0f 90       	pop	r0
    6310:	0f be       	out	0x3f, r0	; 63
    6312:	0f 90       	pop	r0
    6314:	1f 90       	pop	r1
    6316:	18 95       	reti

00006318 <__vector_56>:
    6318:	1f 92       	push	r1
    631a:	0f 92       	push	r0
    631c:	0f b6       	in	r0, 0x3f	; 63
    631e:	0f 92       	push	r0
    6320:	11 24       	eor	r1, r1
    6322:	0b b6       	in	r0, 0x3b	; 59
    6324:	0f 92       	push	r0
    6326:	2f 93       	push	r18
    6328:	3f 93       	push	r19
    632a:	4f 93       	push	r20
    632c:	5f 93       	push	r21
    632e:	6f 93       	push	r22
    6330:	7f 93       	push	r23
    6332:	8f 93       	push	r24
    6334:	9f 93       	push	r25
    6336:	af 93       	push	r26
    6338:	bf 93       	push	r27
    633a:	ef 93       	push	r30
    633c:	ff 93       	push	r31
    633e:	e0 91 a7 26 	lds	r30, 0x26A7	; 0x8026a7 <tc_tce1_ccb_callback>
    6342:	f0 91 a8 26 	lds	r31, 0x26A8	; 0x8026a8 <tc_tce1_ccb_callback+0x1>
    6346:	30 97       	sbiw	r30, 0x00	; 0
    6348:	09 f0       	breq	.+2      	; 0x634c <__vector_56+0x34>
    634a:	19 95       	eicall
    634c:	ff 91       	pop	r31
    634e:	ef 91       	pop	r30
    6350:	bf 91       	pop	r27
    6352:	af 91       	pop	r26
    6354:	9f 91       	pop	r25
    6356:	8f 91       	pop	r24
    6358:	7f 91       	pop	r23
    635a:	6f 91       	pop	r22
    635c:	5f 91       	pop	r21
    635e:	4f 91       	pop	r20
    6360:	3f 91       	pop	r19
    6362:	2f 91       	pop	r18
    6364:	0f 90       	pop	r0
    6366:	0b be       	out	0x3b, r0	; 59
    6368:	0f 90       	pop	r0
    636a:	0f be       	out	0x3f, r0	; 63
    636c:	0f 90       	pop	r0
    636e:	1f 90       	pop	r1
    6370:	18 95       	reti

00006372 <__vector_108>:
    6372:	1f 92       	push	r1
    6374:	0f 92       	push	r0
    6376:	0f b6       	in	r0, 0x3f	; 63
    6378:	0f 92       	push	r0
    637a:	11 24       	eor	r1, r1
    637c:	0b b6       	in	r0, 0x3b	; 59
    637e:	0f 92       	push	r0
    6380:	2f 93       	push	r18
    6382:	3f 93       	push	r19
    6384:	4f 93       	push	r20
    6386:	5f 93       	push	r21
    6388:	6f 93       	push	r22
    638a:	7f 93       	push	r23
    638c:	8f 93       	push	r24
    638e:	9f 93       	push	r25
    6390:	af 93       	push	r26
    6392:	bf 93       	push	r27
    6394:	ef 93       	push	r30
    6396:	ff 93       	push	r31
    6398:	e0 91 a5 26 	lds	r30, 0x26A5	; 0x8026a5 <tc_tcf0_ovf_callback>
    639c:	f0 91 a6 26 	lds	r31, 0x26A6	; 0x8026a6 <tc_tcf0_ovf_callback+0x1>
    63a0:	30 97       	sbiw	r30, 0x00	; 0
    63a2:	09 f0       	breq	.+2      	; 0x63a6 <__vector_108+0x34>
    63a4:	19 95       	eicall
    63a6:	ff 91       	pop	r31
    63a8:	ef 91       	pop	r30
    63aa:	bf 91       	pop	r27
    63ac:	af 91       	pop	r26
    63ae:	9f 91       	pop	r25
    63b0:	8f 91       	pop	r24
    63b2:	7f 91       	pop	r23
    63b4:	6f 91       	pop	r22
    63b6:	5f 91       	pop	r21
    63b8:	4f 91       	pop	r20
    63ba:	3f 91       	pop	r19
    63bc:	2f 91       	pop	r18
    63be:	0f 90       	pop	r0
    63c0:	0b be       	out	0x3b, r0	; 59
    63c2:	0f 90       	pop	r0
    63c4:	0f be       	out	0x3f, r0	; 63
    63c6:	0f 90       	pop	r0
    63c8:	1f 90       	pop	r1
    63ca:	18 95       	reti

000063cc <__vector_109>:
    63cc:	1f 92       	push	r1
    63ce:	0f 92       	push	r0
    63d0:	0f b6       	in	r0, 0x3f	; 63
    63d2:	0f 92       	push	r0
    63d4:	11 24       	eor	r1, r1
    63d6:	0b b6       	in	r0, 0x3b	; 59
    63d8:	0f 92       	push	r0
    63da:	2f 93       	push	r18
    63dc:	3f 93       	push	r19
    63de:	4f 93       	push	r20
    63e0:	5f 93       	push	r21
    63e2:	6f 93       	push	r22
    63e4:	7f 93       	push	r23
    63e6:	8f 93       	push	r24
    63e8:	9f 93       	push	r25
    63ea:	af 93       	push	r26
    63ec:	bf 93       	push	r27
    63ee:	ef 93       	push	r30
    63f0:	ff 93       	push	r31
    63f2:	e0 91 a3 26 	lds	r30, 0x26A3	; 0x8026a3 <tc_tcf0_err_callback>
    63f6:	f0 91 a4 26 	lds	r31, 0x26A4	; 0x8026a4 <tc_tcf0_err_callback+0x1>
    63fa:	30 97       	sbiw	r30, 0x00	; 0
    63fc:	09 f0       	breq	.+2      	; 0x6400 <__vector_109+0x34>
    63fe:	19 95       	eicall
    6400:	ff 91       	pop	r31
    6402:	ef 91       	pop	r30
    6404:	bf 91       	pop	r27
    6406:	af 91       	pop	r26
    6408:	9f 91       	pop	r25
    640a:	8f 91       	pop	r24
    640c:	7f 91       	pop	r23
    640e:	6f 91       	pop	r22
    6410:	5f 91       	pop	r21
    6412:	4f 91       	pop	r20
    6414:	3f 91       	pop	r19
    6416:	2f 91       	pop	r18
    6418:	0f 90       	pop	r0
    641a:	0b be       	out	0x3b, r0	; 59
    641c:	0f 90       	pop	r0
    641e:	0f be       	out	0x3f, r0	; 63
    6420:	0f 90       	pop	r0
    6422:	1f 90       	pop	r1
    6424:	18 95       	reti

00006426 <__vector_110>:
    6426:	1f 92       	push	r1
    6428:	0f 92       	push	r0
    642a:	0f b6       	in	r0, 0x3f	; 63
    642c:	0f 92       	push	r0
    642e:	11 24       	eor	r1, r1
    6430:	0b b6       	in	r0, 0x3b	; 59
    6432:	0f 92       	push	r0
    6434:	2f 93       	push	r18
    6436:	3f 93       	push	r19
    6438:	4f 93       	push	r20
    643a:	5f 93       	push	r21
    643c:	6f 93       	push	r22
    643e:	7f 93       	push	r23
    6440:	8f 93       	push	r24
    6442:	9f 93       	push	r25
    6444:	af 93       	push	r26
    6446:	bf 93       	push	r27
    6448:	ef 93       	push	r30
    644a:	ff 93       	push	r31
    644c:	e0 91 a1 26 	lds	r30, 0x26A1	; 0x8026a1 <tc_tcf0_cca_callback>
    6450:	f0 91 a2 26 	lds	r31, 0x26A2	; 0x8026a2 <tc_tcf0_cca_callback+0x1>
    6454:	30 97       	sbiw	r30, 0x00	; 0
    6456:	09 f0       	breq	.+2      	; 0x645a <__vector_110+0x34>
    6458:	19 95       	eicall
    645a:	ff 91       	pop	r31
    645c:	ef 91       	pop	r30
    645e:	bf 91       	pop	r27
    6460:	af 91       	pop	r26
    6462:	9f 91       	pop	r25
    6464:	8f 91       	pop	r24
    6466:	7f 91       	pop	r23
    6468:	6f 91       	pop	r22
    646a:	5f 91       	pop	r21
    646c:	4f 91       	pop	r20
    646e:	3f 91       	pop	r19
    6470:	2f 91       	pop	r18
    6472:	0f 90       	pop	r0
    6474:	0b be       	out	0x3b, r0	; 59
    6476:	0f 90       	pop	r0
    6478:	0f be       	out	0x3f, r0	; 63
    647a:	0f 90       	pop	r0
    647c:	1f 90       	pop	r1
    647e:	18 95       	reti

00006480 <__vector_111>:
    6480:	1f 92       	push	r1
    6482:	0f 92       	push	r0
    6484:	0f b6       	in	r0, 0x3f	; 63
    6486:	0f 92       	push	r0
    6488:	11 24       	eor	r1, r1
    648a:	0b b6       	in	r0, 0x3b	; 59
    648c:	0f 92       	push	r0
    648e:	2f 93       	push	r18
    6490:	3f 93       	push	r19
    6492:	4f 93       	push	r20
    6494:	5f 93       	push	r21
    6496:	6f 93       	push	r22
    6498:	7f 93       	push	r23
    649a:	8f 93       	push	r24
    649c:	9f 93       	push	r25
    649e:	af 93       	push	r26
    64a0:	bf 93       	push	r27
    64a2:	ef 93       	push	r30
    64a4:	ff 93       	push	r31
    64a6:	e0 91 9f 26 	lds	r30, 0x269F	; 0x80269f <tc_tcf0_ccb_callback>
    64aa:	f0 91 a0 26 	lds	r31, 0x26A0	; 0x8026a0 <tc_tcf0_ccb_callback+0x1>
    64ae:	30 97       	sbiw	r30, 0x00	; 0
    64b0:	09 f0       	breq	.+2      	; 0x64b4 <__vector_111+0x34>
    64b2:	19 95       	eicall
    64b4:	ff 91       	pop	r31
    64b6:	ef 91       	pop	r30
    64b8:	bf 91       	pop	r27
    64ba:	af 91       	pop	r26
    64bc:	9f 91       	pop	r25
    64be:	8f 91       	pop	r24
    64c0:	7f 91       	pop	r23
    64c2:	6f 91       	pop	r22
    64c4:	5f 91       	pop	r21
    64c6:	4f 91       	pop	r20
    64c8:	3f 91       	pop	r19
    64ca:	2f 91       	pop	r18
    64cc:	0f 90       	pop	r0
    64ce:	0b be       	out	0x3b, r0	; 59
    64d0:	0f 90       	pop	r0
    64d2:	0f be       	out	0x3f, r0	; 63
    64d4:	0f 90       	pop	r0
    64d6:	1f 90       	pop	r1
    64d8:	18 95       	reti

000064da <__vector_112>:
    64da:	1f 92       	push	r1
    64dc:	0f 92       	push	r0
    64de:	0f b6       	in	r0, 0x3f	; 63
    64e0:	0f 92       	push	r0
    64e2:	11 24       	eor	r1, r1
    64e4:	0b b6       	in	r0, 0x3b	; 59
    64e6:	0f 92       	push	r0
    64e8:	2f 93       	push	r18
    64ea:	3f 93       	push	r19
    64ec:	4f 93       	push	r20
    64ee:	5f 93       	push	r21
    64f0:	6f 93       	push	r22
    64f2:	7f 93       	push	r23
    64f4:	8f 93       	push	r24
    64f6:	9f 93       	push	r25
    64f8:	af 93       	push	r26
    64fa:	bf 93       	push	r27
    64fc:	ef 93       	push	r30
    64fe:	ff 93       	push	r31
    6500:	e0 91 9d 26 	lds	r30, 0x269D	; 0x80269d <tc_tcf0_ccc_callback>
    6504:	f0 91 9e 26 	lds	r31, 0x269E	; 0x80269e <tc_tcf0_ccc_callback+0x1>
    6508:	30 97       	sbiw	r30, 0x00	; 0
    650a:	09 f0       	breq	.+2      	; 0x650e <__vector_112+0x34>
    650c:	19 95       	eicall
    650e:	ff 91       	pop	r31
    6510:	ef 91       	pop	r30
    6512:	bf 91       	pop	r27
    6514:	af 91       	pop	r26
    6516:	9f 91       	pop	r25
    6518:	8f 91       	pop	r24
    651a:	7f 91       	pop	r23
    651c:	6f 91       	pop	r22
    651e:	5f 91       	pop	r21
    6520:	4f 91       	pop	r20
    6522:	3f 91       	pop	r19
    6524:	2f 91       	pop	r18
    6526:	0f 90       	pop	r0
    6528:	0b be       	out	0x3b, r0	; 59
    652a:	0f 90       	pop	r0
    652c:	0f be       	out	0x3f, r0	; 63
    652e:	0f 90       	pop	r0
    6530:	1f 90       	pop	r1
    6532:	18 95       	reti

00006534 <__vector_113>:
    6534:	1f 92       	push	r1
    6536:	0f 92       	push	r0
    6538:	0f b6       	in	r0, 0x3f	; 63
    653a:	0f 92       	push	r0
    653c:	11 24       	eor	r1, r1
    653e:	0b b6       	in	r0, 0x3b	; 59
    6540:	0f 92       	push	r0
    6542:	2f 93       	push	r18
    6544:	3f 93       	push	r19
    6546:	4f 93       	push	r20
    6548:	5f 93       	push	r21
    654a:	6f 93       	push	r22
    654c:	7f 93       	push	r23
    654e:	8f 93       	push	r24
    6550:	9f 93       	push	r25
    6552:	af 93       	push	r26
    6554:	bf 93       	push	r27
    6556:	ef 93       	push	r30
    6558:	ff 93       	push	r31
    655a:	e0 91 9b 26 	lds	r30, 0x269B	; 0x80269b <tc_tcf0_ccd_callback>
    655e:	f0 91 9c 26 	lds	r31, 0x269C	; 0x80269c <tc_tcf0_ccd_callback+0x1>
    6562:	30 97       	sbiw	r30, 0x00	; 0
    6564:	09 f0       	breq	.+2      	; 0x6568 <__vector_113+0x34>
    6566:	19 95       	eicall
    6568:	ff 91       	pop	r31
    656a:	ef 91       	pop	r30
    656c:	bf 91       	pop	r27
    656e:	af 91       	pop	r26
    6570:	9f 91       	pop	r25
    6572:	8f 91       	pop	r24
    6574:	7f 91       	pop	r23
    6576:	6f 91       	pop	r22
    6578:	5f 91       	pop	r21
    657a:	4f 91       	pop	r20
    657c:	3f 91       	pop	r19
    657e:	2f 91       	pop	r18
    6580:	0f 90       	pop	r0
    6582:	0b be       	out	0x3b, r0	; 59
    6584:	0f 90       	pop	r0
    6586:	0f be       	out	0x3f, r0	; 63
    6588:	0f 90       	pop	r0
    658a:	1f 90       	pop	r1
    658c:	18 95       	reti

0000658e <tc_enable>:
    658e:	1f 93       	push	r17
    6590:	cf 93       	push	r28
    6592:	df 93       	push	r29
    6594:	1f 92       	push	r1
    6596:	1f 92       	push	r1
    6598:	cd b7       	in	r28, 0x3d	; 61
    659a:	de b7       	in	r29, 0x3e	; 62
    659c:	2f b7       	in	r18, 0x3f	; 63
    659e:	2a 83       	std	Y+2, r18	; 0x02
    65a0:	f8 94       	cli
    65a2:	1a 81       	ldd	r17, Y+2	; 0x02
    65a4:	28 2f       	mov	r18, r24
    65a6:	39 2f       	mov	r19, r25
    65a8:	21 15       	cp	r18, r1
    65aa:	88 e0       	ldi	r24, 0x08	; 8
    65ac:	38 07       	cpc	r19, r24
    65ae:	49 f4       	brne	.+18     	; 0x65c2 <tc_enable+0x34>
    65b0:	61 e0       	ldi	r22, 0x01	; 1
    65b2:	83 e0       	ldi	r24, 0x03	; 3
    65b4:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    65b8:	64 e0       	ldi	r22, 0x04	; 4
    65ba:	83 e0       	ldi	r24, 0x03	; 3
    65bc:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    65c0:	4f c0       	rjmp	.+158    	; 0x6660 <tc_enable+0xd2>
    65c2:	20 34       	cpi	r18, 0x40	; 64
    65c4:	88 e0       	ldi	r24, 0x08	; 8
    65c6:	38 07       	cpc	r19, r24
    65c8:	49 f4       	brne	.+18     	; 0x65dc <tc_enable+0x4e>
    65ca:	62 e0       	ldi	r22, 0x02	; 2
    65cc:	83 e0       	ldi	r24, 0x03	; 3
    65ce:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    65d2:	64 e0       	ldi	r22, 0x04	; 4
    65d4:	83 e0       	ldi	r24, 0x03	; 3
    65d6:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    65da:	42 c0       	rjmp	.+132    	; 0x6660 <tc_enable+0xd2>
    65dc:	21 15       	cp	r18, r1
    65de:	89 e0       	ldi	r24, 0x09	; 9
    65e0:	38 07       	cpc	r19, r24
    65e2:	49 f4       	brne	.+18     	; 0x65f6 <tc_enable+0x68>
    65e4:	61 e0       	ldi	r22, 0x01	; 1
    65e6:	84 e0       	ldi	r24, 0x04	; 4
    65e8:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    65ec:	64 e0       	ldi	r22, 0x04	; 4
    65ee:	84 e0       	ldi	r24, 0x04	; 4
    65f0:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    65f4:	35 c0       	rjmp	.+106    	; 0x6660 <tc_enable+0xd2>
    65f6:	20 34       	cpi	r18, 0x40	; 64
    65f8:	89 e0       	ldi	r24, 0x09	; 9
    65fa:	38 07       	cpc	r19, r24
    65fc:	49 f4       	brne	.+18     	; 0x6610 <tc_enable+0x82>
    65fe:	62 e0       	ldi	r22, 0x02	; 2
    6600:	84 e0       	ldi	r24, 0x04	; 4
    6602:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    6606:	64 e0       	ldi	r22, 0x04	; 4
    6608:	84 e0       	ldi	r24, 0x04	; 4
    660a:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    660e:	28 c0       	rjmp	.+80     	; 0x6660 <tc_enable+0xd2>
    6610:	21 15       	cp	r18, r1
    6612:	8a e0       	ldi	r24, 0x0A	; 10
    6614:	38 07       	cpc	r19, r24
    6616:	49 f4       	brne	.+18     	; 0x662a <tc_enable+0x9c>
    6618:	61 e0       	ldi	r22, 0x01	; 1
    661a:	85 e0       	ldi	r24, 0x05	; 5
    661c:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    6620:	64 e0       	ldi	r22, 0x04	; 4
    6622:	85 e0       	ldi	r24, 0x05	; 5
    6624:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    6628:	1b c0       	rjmp	.+54     	; 0x6660 <tc_enable+0xd2>
    662a:	20 34       	cpi	r18, 0x40	; 64
    662c:	8a e0       	ldi	r24, 0x0A	; 10
    662e:	38 07       	cpc	r19, r24
    6630:	49 f4       	brne	.+18     	; 0x6644 <tc_enable+0xb6>
    6632:	62 e0       	ldi	r22, 0x02	; 2
    6634:	85 e0       	ldi	r24, 0x05	; 5
    6636:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    663a:	64 e0       	ldi	r22, 0x04	; 4
    663c:	85 e0       	ldi	r24, 0x05	; 5
    663e:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    6642:	0e c0       	rjmp	.+28     	; 0x6660 <tc_enable+0xd2>
    6644:	21 15       	cp	r18, r1
    6646:	3b 40       	sbci	r19, 0x0B	; 11
    6648:	49 f4       	brne	.+18     	; 0x665c <tc_enable+0xce>
    664a:	61 e0       	ldi	r22, 0x01	; 1
    664c:	86 e0       	ldi	r24, 0x06	; 6
    664e:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    6652:	64 e0       	ldi	r22, 0x04	; 4
    6654:	86 e0       	ldi	r24, 0x06	; 6
    6656:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>
    665a:	02 c0       	rjmp	.+4      	; 0x6660 <tc_enable+0xd2>
    665c:	1f bf       	out	0x3f, r17	; 63
    665e:	10 c0       	rjmp	.+32     	; 0x6680 <tc_enable+0xf2>
    6660:	80 91 e6 2a 	lds	r24, 0x2AE6	; 0x802ae6 <sleepmgr_locks+0x1>
    6664:	8f 3f       	cpi	r24, 0xFF	; 255
    6666:	09 f4       	brne	.+2      	; 0x666a <tc_enable+0xdc>
    6668:	ff cf       	rjmp	.-2      	; 0x6668 <tc_enable+0xda>
    666a:	8f b7       	in	r24, 0x3f	; 63
    666c:	89 83       	std	Y+1, r24	; 0x01
    666e:	f8 94       	cli
    6670:	99 81       	ldd	r25, Y+1	; 0x01
    6672:	e5 ee       	ldi	r30, 0xE5	; 229
    6674:	fa e2       	ldi	r31, 0x2A	; 42
    6676:	81 81       	ldd	r24, Z+1	; 0x01
    6678:	8f 5f       	subi	r24, 0xFF	; 255
    667a:	81 83       	std	Z+1, r24	; 0x01
    667c:	9f bf       	out	0x3f, r25	; 63
    667e:	1f bf       	out	0x3f, r17	; 63
    6680:	0f 90       	pop	r0
    6682:	0f 90       	pop	r0
    6684:	df 91       	pop	r29
    6686:	cf 91       	pop	r28
    6688:	1f 91       	pop	r17
    668a:	08 95       	ret

0000668c <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    668c:	81 15       	cp	r24, r1
    668e:	28 e0       	ldi	r18, 0x08	; 8
    6690:	92 07       	cpc	r25, r18
    6692:	29 f4       	brne	.+10     	; 0x669e <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    6694:	60 93 e1 26 	sts	0x26E1, r22	; 0x8026e1 <tc_tcc0_ovf_callback>
    6698:	70 93 e2 26 	sts	0x26E2, r23	; 0x8026e2 <tc_tcc0_ovf_callback+0x1>
    669c:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    669e:	80 34       	cpi	r24, 0x40	; 64
    66a0:	28 e0       	ldi	r18, 0x08	; 8
    66a2:	92 07       	cpc	r25, r18
    66a4:	29 f4       	brne	.+10     	; 0x66b0 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    66a6:	60 93 d5 26 	sts	0x26D5, r22	; 0x8026d5 <tc_tcc1_ovf_callback>
    66aa:	70 93 d6 26 	sts	0x26D6, r23	; 0x8026d6 <tc_tcc1_ovf_callback+0x1>
    66ae:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    66b0:	81 15       	cp	r24, r1
    66b2:	29 e0       	ldi	r18, 0x09	; 9
    66b4:	92 07       	cpc	r25, r18
    66b6:	29 f4       	brne	.+10     	; 0x66c2 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    66b8:	60 93 cd 26 	sts	0x26CD, r22	; 0x8026cd <tc_tcd0_ovf_callback>
    66bc:	70 93 ce 26 	sts	0x26CE, r23	; 0x8026ce <tc_tcd0_ovf_callback+0x1>
    66c0:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    66c2:	80 34       	cpi	r24, 0x40	; 64
    66c4:	29 e0       	ldi	r18, 0x09	; 9
    66c6:	92 07       	cpc	r25, r18
    66c8:	29 f4       	brne	.+10     	; 0x66d4 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    66ca:	60 93 c1 26 	sts	0x26C1, r22	; 0x8026c1 <tc_tcd1_ovf_callback>
    66ce:	70 93 c2 26 	sts	0x26C2, r23	; 0x8026c2 <tc_tcd1_ovf_callback+0x1>
    66d2:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    66d4:	81 15       	cp	r24, r1
    66d6:	2a e0       	ldi	r18, 0x0A	; 10
    66d8:	92 07       	cpc	r25, r18
    66da:	29 f4       	brne	.+10     	; 0x66e6 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    66dc:	60 93 b9 26 	sts	0x26B9, r22	; 0x8026b9 <tc_tce0_ovf_callback>
    66e0:	70 93 ba 26 	sts	0x26BA, r23	; 0x8026ba <tc_tce0_ovf_callback+0x1>
    66e4:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    66e6:	80 34       	cpi	r24, 0x40	; 64
    66e8:	2a e0       	ldi	r18, 0x0A	; 10
    66ea:	92 07       	cpc	r25, r18
    66ec:	29 f4       	brne	.+10     	; 0x66f8 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    66ee:	60 93 ad 26 	sts	0x26AD, r22	; 0x8026ad <tc_tce1_ovf_callback>
    66f2:	70 93 ae 26 	sts	0x26AE, r23	; 0x8026ae <tc_tce1_ovf_callback+0x1>
    66f6:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    66f8:	81 15       	cp	r24, r1
    66fa:	9b 40       	sbci	r25, 0x0B	; 11
    66fc:	21 f4       	brne	.+8      	; 0x6706 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    66fe:	60 93 a5 26 	sts	0x26A5, r22	; 0x8026a5 <tc_tcf0_ovf_callback>
    6702:	70 93 a6 26 	sts	0x26A6, r23	; 0x8026a6 <tc_tcf0_ovf_callback+0x1>
    6706:	08 95       	ret

00006708 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    6708:	cf 93       	push	r28
    670a:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    670c:	e0 91 e3 26 	lds	r30, 0x26E3	; 0x8026e3 <transfer>
    6710:	f0 91 e4 26 	lds	r31, 0x26E4	; 0x8026e4 <transfer+0x1>
    6714:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    6716:	83 ff       	sbrs	r24, 3
    6718:	08 c0       	rjmp	.+16     	; 0x672a <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    671a:	88 60       	ori	r24, 0x08	; 8
    671c:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    671e:	83 e0       	ldi	r24, 0x03	; 3
    6720:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    6722:	86 ef       	ldi	r24, 0xF6	; 246
    6724:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <transfer+0xa>
    6728:	83 c0       	rjmp	.+262    	; 0x6830 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    672a:	98 2f       	mov	r25, r24
    672c:	94 71       	andi	r25, 0x14	; 20
    672e:	31 f0       	breq	.+12     	; 0x673c <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6730:	83 e0       	ldi	r24, 0x03	; 3
    6732:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    6734:	8f ef       	ldi	r24, 0xFF	; 255
    6736:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <transfer+0xa>
    673a:	7a c0       	rjmp	.+244    	; 0x6830 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    673c:	86 ff       	sbrs	r24, 6
    673e:	43 c0       	rjmp	.+134    	; 0x67c6 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    6740:	c3 ee       	ldi	r28, 0xE3	; 227
    6742:	d6 e2       	ldi	r29, 0x26	; 38
    6744:	aa 81       	ldd	r26, Y+2	; 0x02
    6746:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    6748:	8c 81       	ldd	r24, Y+4	; 0x04
    674a:	9d 81       	ldd	r25, Y+5	; 0x05
    674c:	14 96       	adiw	r26, 0x04	; 4
    674e:	2d 91       	ld	r18, X+
    6750:	3c 91       	ld	r19, X
    6752:	15 97       	sbiw	r26, 0x05	; 5
    6754:	82 17       	cp	r24, r18
    6756:	93 07       	cpc	r25, r19
    6758:	6c f4       	brge	.+26     	; 0x6774 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    675a:	9c 01       	movw	r18, r24
    675c:	2f 5f       	subi	r18, 0xFF	; 255
    675e:	3f 4f       	sbci	r19, 0xFF	; 255
    6760:	20 93 e7 26 	sts	0x26E7, r18	; 0x8026e7 <transfer+0x4>
    6764:	30 93 e8 26 	sts	0x26E8, r19	; 0x8026e8 <transfer+0x5>
    6768:	a8 0f       	add	r26, r24
    676a:	b9 1f       	adc	r27, r25
    676c:	11 96       	adiw	r26, 0x01	; 1
    676e:	8c 91       	ld	r24, X
    6770:	87 83       	std	Z+7, r24	; 0x07
    6772:	5e c0       	rjmp	.+188    	; 0x6830 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    6774:	80 91 e9 26 	lds	r24, 0x26E9	; 0x8026e9 <transfer+0x6>
    6778:	90 91 ea 26 	lds	r25, 0x26EA	; 0x8026ea <transfer+0x7>
    677c:	18 96       	adiw	r26, 0x08	; 8
    677e:	2d 91       	ld	r18, X+
    6780:	3c 91       	ld	r19, X
    6782:	19 97       	sbiw	r26, 0x09	; 9
    6784:	82 17       	cp	r24, r18
    6786:	93 07       	cpc	r25, r19
    6788:	c8 f4       	brcc	.+50     	; 0x67bc <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    678a:	20 91 eb 26 	lds	r18, 0x26EB	; 0x8026eb <transfer+0x8>
    678e:	22 23       	and	r18, r18
    6790:	21 f0       	breq	.+8      	; 0x679a <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    6792:	86 81       	ldd	r24, Z+6	; 0x06
    6794:	81 60       	ori	r24, 0x01	; 1
    6796:	86 83       	std	Z+6, r24	; 0x06
    6798:	4b c0       	rjmp	.+150    	; 0x6830 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    679a:	16 96       	adiw	r26, 0x06	; 6
    679c:	2d 91       	ld	r18, X+
    679e:	3c 91       	ld	r19, X
    67a0:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    67a2:	ac 01       	movw	r20, r24
    67a4:	4f 5f       	subi	r20, 0xFF	; 255
    67a6:	5f 4f       	sbci	r21, 0xFF	; 255
    67a8:	40 93 e9 26 	sts	0x26E9, r20	; 0x8026e9 <transfer+0x6>
    67ac:	50 93 ea 26 	sts	0x26EA, r21	; 0x8026ea <transfer+0x7>
    67b0:	d9 01       	movw	r26, r18
    67b2:	a8 0f       	add	r26, r24
    67b4:	b9 1f       	adc	r27, r25
    67b6:	8c 91       	ld	r24, X
    67b8:	87 83       	std	Z+7, r24	; 0x07
    67ba:	3a c0       	rjmp	.+116    	; 0x6830 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    67bc:	83 e0       	ldi	r24, 0x03	; 3
    67be:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    67c0:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <transfer+0xa>
    67c4:	35 c0       	rjmp	.+106    	; 0x6830 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    67c6:	88 23       	and	r24, r24
    67c8:	84 f5       	brge	.+96     	; 0x682a <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    67ca:	a3 ee       	ldi	r26, 0xE3	; 227
    67cc:	b6 e2       	ldi	r27, 0x26	; 38
    67ce:	12 96       	adiw	r26, 0x02	; 2
    67d0:	cd 91       	ld	r28, X+
    67d2:	dc 91       	ld	r29, X
    67d4:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    67d6:	16 96       	adiw	r26, 0x06	; 6
    67d8:	8d 91       	ld	r24, X+
    67da:	9c 91       	ld	r25, X
    67dc:	17 97       	sbiw	r26, 0x07	; 7
    67de:	28 85       	ldd	r18, Y+8	; 0x08
    67e0:	39 85       	ldd	r19, Y+9	; 0x09
    67e2:	82 17       	cp	r24, r18
    67e4:	93 07       	cpc	r25, r19
    67e6:	d8 f4       	brcc	.+54     	; 0x681e <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    67e8:	6e 81       	ldd	r22, Y+6	; 0x06
    67ea:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    67ec:	9c 01       	movw	r18, r24
    67ee:	2f 5f       	subi	r18, 0xFF	; 255
    67f0:	3f 4f       	sbci	r19, 0xFF	; 255
    67f2:	20 93 e9 26 	sts	0x26E9, r18	; 0x8026e9 <transfer+0x6>
    67f6:	30 93 ea 26 	sts	0x26EA, r19	; 0x8026ea <transfer+0x7>
    67fa:	47 81       	ldd	r20, Z+7	; 0x07
    67fc:	db 01       	movw	r26, r22
    67fe:	a8 0f       	add	r26, r24
    6800:	b9 1f       	adc	r27, r25
    6802:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    6804:	88 85       	ldd	r24, Y+8	; 0x08
    6806:	99 85       	ldd	r25, Y+9	; 0x09
    6808:	28 17       	cp	r18, r24
    680a:	39 07       	cpc	r19, r25
    680c:	18 f4       	brcc	.+6      	; 0x6814 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    680e:	82 e0       	ldi	r24, 0x02	; 2
    6810:	83 83       	std	Z+3, r24	; 0x03
    6812:	0e c0       	rjmp	.+28     	; 0x6830 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    6814:	87 e0       	ldi	r24, 0x07	; 7
    6816:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    6818:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <transfer+0xa>
    681c:	09 c0       	rjmp	.+18     	; 0x6830 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    681e:	83 e0       	ldi	r24, 0x03	; 3
    6820:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    6822:	89 ef       	ldi	r24, 0xF9	; 249
    6824:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <transfer+0xa>
    6828:	03 c0       	rjmp	.+6      	; 0x6830 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    682a:	8b ef       	ldi	r24, 0xFB	; 251
    682c:	80 93 ed 26 	sts	0x26ED, r24	; 0x8026ed <transfer+0xa>
	}
}
    6830:	df 91       	pop	r29
    6832:	cf 91       	pop	r28
    6834:	08 95       	ret

00006836 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    6836:	1f 92       	push	r1
    6838:	0f 92       	push	r0
    683a:	0f b6       	in	r0, 0x3f	; 63
    683c:	0f 92       	push	r0
    683e:	11 24       	eor	r1, r1
    6840:	0b b6       	in	r0, 0x3b	; 59
    6842:	0f 92       	push	r0
    6844:	2f 93       	push	r18
    6846:	3f 93       	push	r19
    6848:	4f 93       	push	r20
    684a:	5f 93       	push	r21
    684c:	6f 93       	push	r22
    684e:	7f 93       	push	r23
    6850:	8f 93       	push	r24
    6852:	9f 93       	push	r25
    6854:	af 93       	push	r26
    6856:	bf 93       	push	r27
    6858:	ef 93       	push	r30
    685a:	ff 93       	push	r31
    685c:	55 df       	rcall	.-342    	; 0x6708 <twim_interrupt_handler>
    685e:	ff 91       	pop	r31
    6860:	ef 91       	pop	r30
    6862:	bf 91       	pop	r27
    6864:	af 91       	pop	r26
    6866:	9f 91       	pop	r25
    6868:	8f 91       	pop	r24
    686a:	7f 91       	pop	r23
    686c:	6f 91       	pop	r22
    686e:	5f 91       	pop	r21
    6870:	4f 91       	pop	r20
    6872:	3f 91       	pop	r19
    6874:	2f 91       	pop	r18
    6876:	0f 90       	pop	r0
    6878:	0b be       	out	0x3b, r0	; 59
    687a:	0f 90       	pop	r0
    687c:	0f be       	out	0x3f, r0	; 63
    687e:	0f 90       	pop	r0
    6880:	1f 90       	pop	r1
    6882:	18 95       	reti

00006884 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    6884:	1f 92       	push	r1
    6886:	0f 92       	push	r0
    6888:	0f b6       	in	r0, 0x3f	; 63
    688a:	0f 92       	push	r0
    688c:	11 24       	eor	r1, r1
    688e:	0b b6       	in	r0, 0x3b	; 59
    6890:	0f 92       	push	r0
    6892:	2f 93       	push	r18
    6894:	3f 93       	push	r19
    6896:	4f 93       	push	r20
    6898:	5f 93       	push	r21
    689a:	6f 93       	push	r22
    689c:	7f 93       	push	r23
    689e:	8f 93       	push	r24
    68a0:	9f 93       	push	r25
    68a2:	af 93       	push	r26
    68a4:	bf 93       	push	r27
    68a6:	ef 93       	push	r30
    68a8:	ff 93       	push	r31
    68aa:	2e df       	rcall	.-420    	; 0x6708 <twim_interrupt_handler>
    68ac:	ff 91       	pop	r31
    68ae:	ef 91       	pop	r30
    68b0:	bf 91       	pop	r27
    68b2:	af 91       	pop	r26
    68b4:	9f 91       	pop	r25
    68b6:	8f 91       	pop	r24
    68b8:	7f 91       	pop	r23
    68ba:	6f 91       	pop	r22
    68bc:	5f 91       	pop	r21
    68be:	4f 91       	pop	r20
    68c0:	3f 91       	pop	r19
    68c2:	2f 91       	pop	r18
    68c4:	0f 90       	pop	r0
    68c6:	0b be       	out	0x3b, r0	; 59
    68c8:	0f 90       	pop	r0
    68ca:	0f be       	out	0x3f, r0	; 63
    68cc:	0f 90       	pop	r0
    68ce:	1f 90       	pop	r1
    68d0:	18 95       	reti

000068d2 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    68d2:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    68d4:	db 01       	movw	r26, r22
    68d6:	14 96       	adiw	r26, 0x04	; 4
    68d8:	8c 91       	ld	r24, X
    68da:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    68dc:	88 eb       	ldi	r24, 0xB8	; 184
    68de:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    68e0:	81 e0       	ldi	r24, 0x01	; 1
    68e2:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    68e4:	e3 ee       	ldi	r30, 0xE3	; 227
    68e6:	f6 e2       	ldi	r31, 0x26	; 38
    68e8:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    68ea:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    68ec:	e0 ea       	ldi	r30, 0xA0	; 160
    68ee:	f0 e0       	ldi	r31, 0x00	; 0
    68f0:	82 81       	ldd	r24, Z+2	; 0x02
    68f2:	82 60       	ori	r24, 0x02	; 2
    68f4:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    68f6:	78 94       	sei

	return STATUS_OK;
}
    68f8:	80 e0       	ldi	r24, 0x00	; 0
    68fa:	08 95       	ret

000068fc <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    68fc:	cf 93       	push	r28
    68fe:	df 93       	push	r29
    6900:	1f 92       	push	r1
    6902:	cd b7       	in	r28, 0x3d	; 61
    6904:	de b7       	in	r29, 0x3e	; 62
    6906:	9c 01       	movw	r18, r24
    6908:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    690a:	89 2b       	or	r24, r25
    690c:	09 f4       	brne	.+2      	; 0x6910 <twi_master_transfer+0x14>
    690e:	51 c0       	rjmp	.+162    	; 0x69b2 <twi_master_transfer+0xb6>
    6910:	30 97       	sbiw	r30, 0x00	; 0
    6912:	09 f4       	brne	.+2      	; 0x6916 <twi_master_transfer+0x1a>
    6914:	50 c0       	rjmp	.+160    	; 0x69b6 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    6916:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    6918:	80 91 ec 26 	lds	r24, 0x26EC	; 0x8026ec <transfer+0x9>
    691c:	88 23       	and	r24, r24
    691e:	19 f0       	breq	.+6      	; 0x6926 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    6920:	99 23       	and	r25, r25
    6922:	f1 f3       	breq	.-4      	; 0x6920 <twi_master_transfer+0x24>
    6924:	4a c0       	rjmp	.+148    	; 0x69ba <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6926:	8f b7       	in	r24, 0x3f	; 63
    6928:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    692a:	f8 94       	cli
	return flags;
    692c:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    692e:	a3 ee       	ldi	r26, 0xE3	; 227
    6930:	b6 e2       	ldi	r27, 0x26	; 38
    6932:	91 e0       	ldi	r25, 0x01	; 1
    6934:	19 96       	adiw	r26, 0x09	; 9
    6936:	9c 93       	st	X, r25
    6938:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    693a:	90 e8       	ldi	r25, 0x80	; 128
    693c:	1a 96       	adiw	r26, 0x0a	; 10
    693e:	9c 93       	st	X, r25
    6940:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6942:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    6944:	2d 93       	st	X+, r18
    6946:	3c 93       	st	X, r19
    6948:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    694a:	12 96       	adiw	r26, 0x02	; 2
    694c:	6d 93       	st	X+, r22
    694e:	7c 93       	st	X, r23
    6950:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    6952:	14 96       	adiw	r26, 0x04	; 4
    6954:	1d 92       	st	X+, r1
    6956:	1c 92       	st	X, r1
    6958:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    695a:	16 96       	adiw	r26, 0x06	; 6
    695c:	1d 92       	st	X+, r1
    695e:	1c 92       	st	X, r1
    6960:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    6962:	18 96       	adiw	r26, 0x08	; 8
    6964:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    6966:	80 81       	ld	r24, Z
    6968:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    696a:	64 81       	ldd	r22, Z+4	; 0x04
    696c:	75 81       	ldd	r23, Z+5	; 0x05
    696e:	67 2b       	or	r22, r23
    6970:	11 f4       	brne	.+4      	; 0x6976 <twi_master_transfer+0x7a>
    6972:	41 11       	cpse	r20, r1
    6974:	03 c0       	rjmp	.+6      	; 0x697c <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    6976:	f9 01       	movw	r30, r18
    6978:	86 83       	std	Z+6, r24	; 0x06
    697a:	03 c0       	rjmp	.+6      	; 0x6982 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    697c:	81 60       	ori	r24, 0x01	; 1
    697e:	f9 01       	movw	r30, r18
    6980:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    6982:	e3 ee       	ldi	r30, 0xE3	; 227
    6984:	f6 e2       	ldi	r31, 0x26	; 38
    6986:	92 85       	ldd	r25, Z+10	; 0x0a
    6988:	90 38       	cpi	r25, 0x80	; 128
    698a:	e9 f3       	breq	.-6      	; 0x6986 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    698c:	f9 01       	movw	r30, r18
    698e:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    6990:	83 70       	andi	r24, 0x03	; 3
    6992:	81 30       	cpi	r24, 0x01	; 1
    6994:	49 f0       	breq	.+18     	; 0x69a8 <twi_master_transfer+0xac>
    6996:	a3 ee       	ldi	r26, 0xE3	; 227
    6998:	b6 e2       	ldi	r27, 0x26	; 38
    699a:	ed 91       	ld	r30, X+
    699c:	fc 91       	ld	r31, X
    699e:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    69a0:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    69a2:	83 70       	andi	r24, 0x03	; 3
    69a4:	81 30       	cpi	r24, 0x01	; 1
    69a6:	c9 f7       	brne	.-14     	; 0x699a <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    69a8:	e3 ee       	ldi	r30, 0xE3	; 227
    69aa:	f6 e2       	ldi	r31, 0x26	; 38
    69ac:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    69ae:	11 86       	std	Z+9, r1	; 0x09
    69b0:	05 c0       	rjmp	.+10     	; 0x69bc <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    69b2:	88 ef       	ldi	r24, 0xF8	; 248
    69b4:	03 c0       	rjmp	.+6      	; 0x69bc <twi_master_transfer+0xc0>
    69b6:	88 ef       	ldi	r24, 0xF8	; 248
    69b8:	01 c0       	rjmp	.+2      	; 0x69bc <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    69ba:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    69bc:	0f 90       	pop	r0
    69be:	df 91       	pop	r29
    69c0:	cf 91       	pop	r28
    69c2:	08 95       	ret

000069c4 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    69c4:	cf 93       	push	r28
    69c6:	df 93       	push	r29
    69c8:	1f 92       	push	r1
    69ca:	1f 92       	push	r1
    69cc:	cd b7       	in	r28, 0x3d	; 61
    69ce:	de b7       	in	r29, 0x3e	; 62
    69d0:	81 11       	cpse	r24, r1
    69d2:	26 c0       	rjmp	.+76     	; 0x6a20 <udd_sleep_mode+0x5c>
    69d4:	90 91 18 28 	lds	r25, 0x2818	; 0x802818 <udd_b_idle>
    69d8:	99 23       	and	r25, r25
    69da:	f9 f0       	breq	.+62     	; 0x6a1a <udd_sleep_mode+0x56>
    69dc:	90 91 e6 2a 	lds	r25, 0x2AE6	; 0x802ae6 <sleepmgr_locks+0x1>
    69e0:	91 11       	cpse	r25, r1
    69e2:	01 c0       	rjmp	.+2      	; 0x69e6 <udd_sleep_mode+0x22>
    69e4:	ff cf       	rjmp	.-2      	; 0x69e4 <udd_sleep_mode+0x20>
    69e6:	9f b7       	in	r25, 0x3f	; 63
    69e8:	9a 83       	std	Y+2, r25	; 0x02
    69ea:	f8 94       	cli
    69ec:	2a 81       	ldd	r18, Y+2	; 0x02
    69ee:	e5 ee       	ldi	r30, 0xE5	; 229
    69f0:	fa e2       	ldi	r31, 0x2A	; 42
    69f2:	91 81       	ldd	r25, Z+1	; 0x01
    69f4:	91 50       	subi	r25, 0x01	; 1
    69f6:	91 83       	std	Z+1, r25	; 0x01
    69f8:	2f bf       	out	0x3f, r18	; 63
    69fa:	0f c0       	rjmp	.+30     	; 0x6a1a <udd_sleep_mode+0x56>
    69fc:	90 91 e6 2a 	lds	r25, 0x2AE6	; 0x802ae6 <sleepmgr_locks+0x1>
    6a00:	9f 3f       	cpi	r25, 0xFF	; 255
    6a02:	09 f4       	brne	.+2      	; 0x6a06 <udd_sleep_mode+0x42>
    6a04:	ff cf       	rjmp	.-2      	; 0x6a04 <udd_sleep_mode+0x40>
    6a06:	9f b7       	in	r25, 0x3f	; 63
    6a08:	99 83       	std	Y+1, r25	; 0x01
    6a0a:	f8 94       	cli
    6a0c:	29 81       	ldd	r18, Y+1	; 0x01
    6a0e:	e5 ee       	ldi	r30, 0xE5	; 229
    6a10:	fa e2       	ldi	r31, 0x2A	; 42
    6a12:	91 81       	ldd	r25, Z+1	; 0x01
    6a14:	9f 5f       	subi	r25, 0xFF	; 255
    6a16:	91 83       	std	Z+1, r25	; 0x01
    6a18:	2f bf       	out	0x3f, r18	; 63
    6a1a:	80 93 18 28 	sts	0x2818, r24	; 0x802818 <udd_b_idle>
    6a1e:	05 c0       	rjmp	.+10     	; 0x6a2a <udd_sleep_mode+0x66>
    6a20:	90 91 18 28 	lds	r25, 0x2818	; 0x802818 <udd_b_idle>
    6a24:	99 23       	and	r25, r25
    6a26:	51 f3       	breq	.-44     	; 0x69fc <udd_sleep_mode+0x38>
    6a28:	f8 cf       	rjmp	.-16     	; 0x6a1a <udd_sleep_mode+0x56>
    6a2a:	0f 90       	pop	r0
    6a2c:	0f 90       	pop	r0
    6a2e:	df 91       	pop	r29
    6a30:	cf 91       	pop	r28
    6a32:	08 95       	ret

00006a34 <udd_ctrl_init>:
    6a34:	0f 93       	push	r16
    6a36:	e8 ec       	ldi	r30, 0xC8	; 200
    6a38:	f4 e0       	ldi	r31, 0x04	; 4
    6a3a:	80 81       	ld	r24, Z
    6a3c:	8f 7d       	andi	r24, 0xDF	; 223
    6a3e:	80 83       	st	Z, r24
    6a40:	80 81       	ld	r24, Z
    6a42:	8f 7d       	andi	r24, 0xDF	; 223
    6a44:	80 83       	st	Z, r24
    6a46:	ec ee       	ldi	r30, 0xEC	; 236
    6a48:	f7 e2       	ldi	r31, 0x27	; 39
    6a4a:	02 e0       	ldi	r16, 0x02	; 2
    6a4c:	05 93       	las	Z, r16
    6a4e:	10 92 ee 27 	sts	0x27EE, r1	; 0x8027ee <udd_sram+0x16>
    6a52:	10 92 ef 27 	sts	0x27EF, r1	; 0x8027ef <udd_sram+0x17>
    6a56:	00 e2       	ldi	r16, 0x20	; 32
    6a58:	06 93       	lac	Z, r16
    6a5a:	00 e4       	ldi	r16, 0x40	; 64
    6a5c:	06 93       	lac	Z, r16
    6a5e:	e4 ee       	ldi	r30, 0xE4	; 228
    6a60:	f7 e2       	ldi	r31, 0x27	; 39
    6a62:	00 e4       	ldi	r16, 0x40	; 64
    6a64:	06 93       	lac	Z, r16
    6a66:	e5 ed       	ldi	r30, 0xD5	; 213
    6a68:	fa e2       	ldi	r31, 0x2A	; 42
    6a6a:	14 86       	std	Z+12, r1	; 0x0c
    6a6c:	15 86       	std	Z+13, r1	; 0x0d
    6a6e:	16 86       	std	Z+14, r1	; 0x0e
    6a70:	17 86       	std	Z+15, r1	; 0x0f
    6a72:	12 86       	std	Z+10, r1	; 0x0a
    6a74:	13 86       	std	Z+11, r1	; 0x0b
    6a76:	10 92 d7 27 	sts	0x27D7, r1	; 0x8027d7 <udd_ep_control_state>
    6a7a:	0f 91       	pop	r16
    6a7c:	08 95       	ret

00006a7e <udd_ctrl_stall_data>:
    6a7e:	0f 93       	push	r16
    6a80:	85 e0       	ldi	r24, 0x05	; 5
    6a82:	80 93 d7 27 	sts	0x27D7, r24	; 0x8027d7 <udd_ep_control_state>
    6a86:	ed ee       	ldi	r30, 0xED	; 237
    6a88:	f7 e2       	ldi	r31, 0x27	; 39
    6a8a:	04 e0       	ldi	r16, 0x04	; 4
    6a8c:	05 93       	las	Z, r16
    6a8e:	e5 ee       	ldi	r30, 0xE5	; 229
    6a90:	f7 e2       	ldi	r31, 0x27	; 39
    6a92:	04 e0       	ldi	r16, 0x04	; 4
    6a94:	05 93       	las	Z, r16
    6a96:	0f 91       	pop	r16
    6a98:	08 95       	ret

00006a9a <udd_ctrl_send_zlp_in>:
    6a9a:	0f 93       	push	r16
    6a9c:	83 e0       	ldi	r24, 0x03	; 3
    6a9e:	80 93 d7 27 	sts	0x27D7, r24	; 0x8027d7 <udd_ep_control_state>
    6aa2:	10 92 ee 27 	sts	0x27EE, r1	; 0x8027ee <udd_sram+0x16>
    6aa6:	10 92 ef 27 	sts	0x27EF, r1	; 0x8027ef <udd_sram+0x17>
    6aaa:	ec ee       	ldi	r30, 0xEC	; 236
    6aac:	f7 e2       	ldi	r31, 0x27	; 39
    6aae:	02 e0       	ldi	r16, 0x02	; 2
    6ab0:	06 93       	lac	Z, r16
    6ab2:	0f 91       	pop	r16
    6ab4:	08 95       	ret

00006ab6 <udd_ctrl_endofrequest>:
    6ab6:	e0 91 e1 2a 	lds	r30, 0x2AE1	; 0x802ae1 <udd_g_ctrlreq+0xc>
    6aba:	f0 91 e2 2a 	lds	r31, 0x2AE2	; 0x802ae2 <udd_g_ctrlreq+0xd>
    6abe:	30 97       	sbiw	r30, 0x00	; 0
    6ac0:	09 f0       	breq	.+2      	; 0x6ac4 <udd_ctrl_endofrequest+0xe>
    6ac2:	19 95       	eicall
    6ac4:	08 95       	ret

00006ac6 <udd_ctrl_in_sent>:
    6ac6:	0f 93       	push	r16
    6ac8:	cf 93       	push	r28
    6aca:	df 93       	push	r29
    6acc:	80 91 d7 27 	lds	r24, 0x27D7	; 0x8027d7 <udd_ep_control_state>
    6ad0:	83 30       	cpi	r24, 0x03	; 3
    6ad2:	19 f4       	brne	.+6      	; 0x6ada <udd_ctrl_in_sent+0x14>
    6ad4:	f0 df       	rcall	.-32     	; 0x6ab6 <udd_ctrl_endofrequest>
    6ad6:	ae df       	rcall	.-164    	; 0x6a34 <udd_ctrl_init>
    6ad8:	5e c0       	rjmp	.+188    	; 0x6b96 <udd_ctrl_in_sent+0xd0>
    6ada:	80 91 d3 27 	lds	r24, 0x27D3	; 0x8027d3 <udd_ctrl_payload_nb_trans>
    6ade:	90 91 d4 27 	lds	r25, 0x27D4	; 0x8027d4 <udd_ctrl_payload_nb_trans+0x1>
    6ae2:	c0 91 df 2a 	lds	r28, 0x2ADF	; 0x802adf <udd_g_ctrlreq+0xa>
    6ae6:	d0 91 e0 2a 	lds	r29, 0x2AE0	; 0x802ae0 <udd_g_ctrlreq+0xb>
    6aea:	c8 1b       	sub	r28, r24
    6aec:	d9 0b       	sbc	r29, r25
    6aee:	71 f5       	brne	.+92     	; 0x6b4c <udd_ctrl_in_sent+0x86>
    6af0:	20 91 d5 27 	lds	r18, 0x27D5	; 0x8027d5 <udd_ctrl_prev_payload_nb_trans>
    6af4:	30 91 d6 27 	lds	r19, 0x27D6	; 0x8027d6 <udd_ctrl_prev_payload_nb_trans+0x1>
    6af8:	82 0f       	add	r24, r18
    6afa:	93 1f       	adc	r25, r19
    6afc:	80 93 d5 27 	sts	0x27D5, r24	; 0x8027d5 <udd_ctrl_prev_payload_nb_trans>
    6b00:	90 93 d6 27 	sts	0x27D6, r25	; 0x8027d6 <udd_ctrl_prev_payload_nb_trans+0x1>
    6b04:	20 91 db 2a 	lds	r18, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    6b08:	30 91 dc 2a 	lds	r19, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    6b0c:	82 17       	cp	r24, r18
    6b0e:	93 07       	cpc	r25, r19
    6b10:	21 f0       	breq	.+8      	; 0x6b1a <udd_ctrl_in_sent+0x54>
    6b12:	80 91 ee 26 	lds	r24, 0x26EE	; 0x8026ee <b_shortpacket.5472>
    6b16:	88 23       	and	r24, r24
    6b18:	41 f0       	breq	.+16     	; 0x6b2a <udd_ctrl_in_sent+0x64>
    6b1a:	84 e0       	ldi	r24, 0x04	; 4
    6b1c:	80 93 d7 27 	sts	0x27D7, r24	; 0x8027d7 <udd_ep_control_state>
    6b20:	e4 ee       	ldi	r30, 0xE4	; 228
    6b22:	f7 e2       	ldi	r31, 0x27	; 39
    6b24:	02 e0       	ldi	r16, 0x02	; 2
    6b26:	06 93       	lac	Z, r16
    6b28:	36 c0       	rjmp	.+108    	; 0x6b96 <udd_ctrl_in_sent+0xd0>
    6b2a:	e0 91 e3 2a 	lds	r30, 0x2AE3	; 0x802ae3 <udd_g_ctrlreq+0xe>
    6b2e:	f0 91 e4 2a 	lds	r31, 0x2AE4	; 0x802ae4 <udd_g_ctrlreq+0xf>
    6b32:	30 97       	sbiw	r30, 0x00	; 0
    6b34:	99 f0       	breq	.+38     	; 0x6b5c <udd_ctrl_in_sent+0x96>
    6b36:	19 95       	eicall
    6b38:	88 23       	and	r24, r24
    6b3a:	81 f0       	breq	.+32     	; 0x6b5c <udd_ctrl_in_sent+0x96>
    6b3c:	10 92 d3 27 	sts	0x27D3, r1	; 0x8027d3 <udd_ctrl_payload_nb_trans>
    6b40:	10 92 d4 27 	sts	0x27D4, r1	; 0x8027d4 <udd_ctrl_payload_nb_trans+0x1>
    6b44:	c0 91 df 2a 	lds	r28, 0x2ADF	; 0x802adf <udd_g_ctrlreq+0xa>
    6b48:	d0 91 e0 2a 	lds	r29, 0x2AE0	; 0x802ae0 <udd_g_ctrlreq+0xb>
    6b4c:	c0 34       	cpi	r28, 0x40	; 64
    6b4e:	d1 05       	cpc	r29, r1
    6b50:	28 f0       	brcs	.+10     	; 0x6b5c <udd_ctrl_in_sent+0x96>
    6b52:	10 92 ee 26 	sts	0x26EE, r1	; 0x8026ee <b_shortpacket.5472>
    6b56:	c0 e4       	ldi	r28, 0x40	; 64
    6b58:	d0 e0       	ldi	r29, 0x00	; 0
    6b5a:	03 c0       	rjmp	.+6      	; 0x6b62 <udd_ctrl_in_sent+0x9c>
    6b5c:	81 e0       	ldi	r24, 0x01	; 1
    6b5e:	80 93 ee 26 	sts	0x26EE, r24	; 0x8026ee <b_shortpacket.5472>
    6b62:	e8 ed       	ldi	r30, 0xD8	; 216
    6b64:	f7 e2       	ldi	r31, 0x27	; 39
    6b66:	c6 8b       	std	Z+22, r28	; 0x16
    6b68:	d7 8b       	std	Z+23, r29	; 0x17
    6b6a:	80 91 d3 27 	lds	r24, 0x27D3	; 0x8027d3 <udd_ctrl_payload_nb_trans>
    6b6e:	90 91 d4 27 	lds	r25, 0x27D4	; 0x8027d4 <udd_ctrl_payload_nb_trans+0x1>
    6b72:	20 91 dd 2a 	lds	r18, 0x2ADD	; 0x802add <udd_g_ctrlreq+0x8>
    6b76:	30 91 de 2a 	lds	r19, 0x2ADE	; 0x802ade <udd_g_ctrlreq+0x9>
    6b7a:	28 0f       	add	r18, r24
    6b7c:	39 1f       	adc	r19, r25
    6b7e:	20 8f       	std	Z+24, r18	; 0x18
    6b80:	31 8f       	std	Z+25, r19	; 0x19
    6b82:	c8 0f       	add	r28, r24
    6b84:	d9 1f       	adc	r29, r25
    6b86:	c0 93 d3 27 	sts	0x27D3, r28	; 0x8027d3 <udd_ctrl_payload_nb_trans>
    6b8a:	d0 93 d4 27 	sts	0x27D4, r29	; 0x8027d4 <udd_ctrl_payload_nb_trans+0x1>
    6b8e:	ec ee       	ldi	r30, 0xEC	; 236
    6b90:	f7 e2       	ldi	r31, 0x27	; 39
    6b92:	02 e0       	ldi	r16, 0x02	; 2
    6b94:	06 93       	lac	Z, r16
    6b96:	df 91       	pop	r29
    6b98:	cf 91       	pop	r28
    6b9a:	0f 91       	pop	r16
    6b9c:	08 95       	ret

00006b9e <udd_ep_get_size>:
    6b9e:	fc 01       	movw	r30, r24
    6ba0:	81 81       	ldd	r24, Z+1	; 0x01
    6ba2:	e8 2f       	mov	r30, r24
    6ba4:	e7 70       	andi	r30, 0x07	; 7
    6ba6:	8e 2f       	mov	r24, r30
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	fc 01       	movw	r30, r24
    6bac:	31 97       	sbiw	r30, 0x01	; 1
    6bae:	e7 30       	cpi	r30, 0x07	; 7
    6bb0:	f1 05       	cpc	r31, r1
    6bb2:	d8 f4       	brcc	.+54     	; 0x6bea <udd_ep_get_size+0x4c>
    6bb4:	88 27       	eor	r24, r24
    6bb6:	e2 50       	subi	r30, 0x02	; 2
    6bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    6bba:	8f 4f       	sbci	r24, 0xFF	; 255
    6bbc:	0c 94 3b 54 	jmp	0xa876	; 0xa876 <__tablejump2__>
    6bc0:	80 e1       	ldi	r24, 0x10	; 16
    6bc2:	90 e0       	ldi	r25, 0x00	; 0
    6bc4:	08 95       	ret
    6bc6:	80 e2       	ldi	r24, 0x20	; 32
    6bc8:	90 e0       	ldi	r25, 0x00	; 0
    6bca:	08 95       	ret
    6bcc:	80 e4       	ldi	r24, 0x40	; 64
    6bce:	90 e0       	ldi	r25, 0x00	; 0
    6bd0:	08 95       	ret
    6bd2:	80 e8       	ldi	r24, 0x80	; 128
    6bd4:	90 e0       	ldi	r25, 0x00	; 0
    6bd6:	08 95       	ret
    6bd8:	80 e0       	ldi	r24, 0x00	; 0
    6bda:	91 e0       	ldi	r25, 0x01	; 1
    6bdc:	08 95       	ret
    6bde:	80 e0       	ldi	r24, 0x00	; 0
    6be0:	92 e0       	ldi	r25, 0x02	; 2
    6be2:	08 95       	ret
    6be4:	8f ef       	ldi	r24, 0xFF	; 255
    6be6:	93 e0       	ldi	r25, 0x03	; 3
    6be8:	08 95       	ret
    6bea:	88 e0       	ldi	r24, 0x08	; 8
    6bec:	90 e0       	ldi	r25, 0x00	; 0
    6bee:	08 95       	ret

00006bf0 <udd_ep_get_job>:
    6bf0:	28 2f       	mov	r18, r24
    6bf2:	2f 70       	andi	r18, 0x0F	; 15
    6bf4:	30 e0       	ldi	r19, 0x00	; 0
    6bf6:	22 0f       	add	r18, r18
    6bf8:	33 1f       	adc	r19, r19
    6bfa:	08 2e       	mov	r0, r24
    6bfc:	00 0c       	add	r0, r0
    6bfe:	99 0b       	sbc	r25, r25
    6c00:	88 27       	eor	r24, r24
    6c02:	99 0f       	add	r25, r25
    6c04:	88 1f       	adc	r24, r24
    6c06:	99 27       	eor	r25, r25
    6c08:	82 0f       	add	r24, r18
    6c0a:	93 1f       	adc	r25, r19
    6c0c:	02 97       	sbiw	r24, 0x02	; 2
    6c0e:	9c 01       	movw	r18, r24
    6c10:	22 0f       	add	r18, r18
    6c12:	33 1f       	adc	r19, r19
    6c14:	22 0f       	add	r18, r18
    6c16:	33 1f       	adc	r19, r19
    6c18:	22 0f       	add	r18, r18
    6c1a:	33 1f       	adc	r19, r19
    6c1c:	82 0f       	add	r24, r18
    6c1e:	93 1f       	adc	r25, r19
    6c20:	81 59       	subi	r24, 0x91	; 145
    6c22:	98 4d       	sbci	r25, 0xD8	; 216
    6c24:	08 95       	ret

00006c26 <udd_ctrl_interrupt_tc_setup>:
    6c26:	0f 93       	push	r16
    6c28:	cf 93       	push	r28
    6c2a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6c2e:	80 ff       	sbrs	r24, 0
    6c30:	65 c0       	rjmp	.+202    	; 0x6cfc <udd_ctrl_interrupt_tc_setup+0xd6>
    6c32:	81 e0       	ldi	r24, 0x01	; 1
    6c34:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    6c38:	e4 ee       	ldi	r30, 0xE4	; 228
    6c3a:	f7 e2       	ldi	r31, 0x27	; 39
    6c3c:	00 e8       	ldi	r16, 0x80	; 128
    6c3e:	06 93       	lac	Z, r16
    6c40:	ec ee       	ldi	r30, 0xEC	; 236
    6c42:	f7 e2       	ldi	r31, 0x27	; 39
    6c44:	00 e8       	ldi	r16, 0x80	; 128
    6c46:	06 93       	lac	Z, r16
    6c48:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    6c4c:	e4 ee       	ldi	r30, 0xE4	; 228
    6c4e:	f7 e2       	ldi	r31, 0x27	; 39
    6c50:	00 e1       	ldi	r16, 0x10	; 16
    6c52:	06 93       	lac	Z, r16
    6c54:	80 91 d7 27 	lds	r24, 0x27D7	; 0x8027d7 <udd_ep_control_state>
    6c58:	88 23       	and	r24, r24
    6c5a:	29 f0       	breq	.+10     	; 0x6c66 <udd_ctrl_interrupt_tc_setup+0x40>
    6c5c:	83 50       	subi	r24, 0x03	; 3
    6c5e:	82 30       	cpi	r24, 0x02	; 2
    6c60:	08 f4       	brcc	.+2      	; 0x6c64 <udd_ctrl_interrupt_tc_setup+0x3e>
    6c62:	29 df       	rcall	.-430    	; 0x6ab6 <udd_ctrl_endofrequest>
    6c64:	e7 de       	rcall	.-562    	; 0x6a34 <udd_ctrl_init>
    6c66:	80 91 e6 27 	lds	r24, 0x27E6	; 0x8027e6 <udd_sram+0xe>
    6c6a:	90 91 e7 27 	lds	r25, 0x27E7	; 0x8027e7 <udd_sram+0xf>
    6c6e:	08 97       	sbiw	r24, 0x08	; 8
    6c70:	09 f0       	breq	.+2      	; 0x6c74 <udd_ctrl_interrupt_tc_setup+0x4e>
    6c72:	46 c0       	rjmp	.+140    	; 0x6d00 <udd_ctrl_interrupt_tc_setup+0xda>
    6c74:	88 e0       	ldi	r24, 0x08	; 8
    6c76:	e3 e9       	ldi	r30, 0x93	; 147
    6c78:	f7 e2       	ldi	r31, 0x27	; 39
    6c7a:	a5 ed       	ldi	r26, 0xD5	; 213
    6c7c:	ba e2       	ldi	r27, 0x2A	; 42
    6c7e:	01 90       	ld	r0, Z+
    6c80:	0d 92       	st	X+, r0
    6c82:	8a 95       	dec	r24
    6c84:	e1 f7       	brne	.-8      	; 0x6c7e <udd_ctrl_interrupt_tc_setup+0x58>
    6c86:	e8 ec       	ldi	r30, 0xC8	; 200
    6c88:	f4 e0       	ldi	r31, 0x04	; 4
    6c8a:	80 81       	ld	r24, Z
    6c8c:	80 62       	ori	r24, 0x20	; 32
    6c8e:	80 83       	st	Z, r24
    6c90:	80 81       	ld	r24, Z
    6c92:	80 62       	ori	r24, 0x20	; 32
    6c94:	80 83       	st	Z, r24
    6c96:	0e 94 97 50 	call	0xa12e	; 0xa12e <udc_process_setup>
    6c9a:	c8 2f       	mov	r28, r24
    6c9c:	81 11       	cpse	r24, r1
    6c9e:	03 c0       	rjmp	.+6      	; 0x6ca6 <udd_ctrl_interrupt_tc_setup+0x80>
    6ca0:	ee de       	rcall	.-548    	; 0x6a7e <udd_ctrl_stall_data>
    6ca2:	c1 e0       	ldi	r28, 0x01	; 1
    6ca4:	2e c0       	rjmp	.+92     	; 0x6d02 <udd_ctrl_interrupt_tc_setup+0xdc>
    6ca6:	80 91 d5 2a 	lds	r24, 0x2AD5	; 0x802ad5 <udd_g_ctrlreq>
    6caa:	88 23       	and	r24, r24
    6cac:	6c f4       	brge	.+26     	; 0x6cc8 <udd_ctrl_interrupt_tc_setup+0xa2>
    6cae:	10 92 d5 27 	sts	0x27D5, r1	; 0x8027d5 <udd_ctrl_prev_payload_nb_trans>
    6cb2:	10 92 d6 27 	sts	0x27D6, r1	; 0x8027d6 <udd_ctrl_prev_payload_nb_trans+0x1>
    6cb6:	10 92 d3 27 	sts	0x27D3, r1	; 0x8027d3 <udd_ctrl_payload_nb_trans>
    6cba:	10 92 d4 27 	sts	0x27D4, r1	; 0x8027d4 <udd_ctrl_payload_nb_trans+0x1>
    6cbe:	82 e0       	ldi	r24, 0x02	; 2
    6cc0:	80 93 d7 27 	sts	0x27D7, r24	; 0x8027d7 <udd_ep_control_state>
    6cc4:	00 df       	rcall	.-512    	; 0x6ac6 <udd_ctrl_in_sent>
    6cc6:	1d c0       	rjmp	.+58     	; 0x6d02 <udd_ctrl_interrupt_tc_setup+0xdc>
    6cc8:	80 91 db 2a 	lds	r24, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    6ccc:	90 91 dc 2a 	lds	r25, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    6cd0:	89 2b       	or	r24, r25
    6cd2:	11 f4       	brne	.+4      	; 0x6cd8 <udd_ctrl_interrupt_tc_setup+0xb2>
    6cd4:	e2 de       	rcall	.-572    	; 0x6a9a <udd_ctrl_send_zlp_in>
    6cd6:	15 c0       	rjmp	.+42     	; 0x6d02 <udd_ctrl_interrupt_tc_setup+0xdc>
    6cd8:	10 92 d5 27 	sts	0x27D5, r1	; 0x8027d5 <udd_ctrl_prev_payload_nb_trans>
    6cdc:	10 92 d6 27 	sts	0x27D6, r1	; 0x8027d6 <udd_ctrl_prev_payload_nb_trans+0x1>
    6ce0:	10 92 d3 27 	sts	0x27D3, r1	; 0x8027d3 <udd_ctrl_payload_nb_trans>
    6ce4:	10 92 d4 27 	sts	0x27D4, r1	; 0x8027d4 <udd_ctrl_payload_nb_trans+0x1>
    6ce8:	81 e0       	ldi	r24, 0x01	; 1
    6cea:	80 93 d7 27 	sts	0x27D7, r24	; 0x8027d7 <udd_ep_control_state>
    6cee:	e4 ee       	ldi	r30, 0xE4	; 228
    6cf0:	f7 e2       	ldi	r31, 0x27	; 39
    6cf2:	02 e0       	ldi	r16, 0x02	; 2
    6cf4:	06 93       	lac	Z, r16
    6cf6:	00 e2       	ldi	r16, 0x20	; 32
    6cf8:	06 93       	lac	Z, r16
    6cfa:	03 c0       	rjmp	.+6      	; 0x6d02 <udd_ctrl_interrupt_tc_setup+0xdc>
    6cfc:	c0 e0       	ldi	r28, 0x00	; 0
    6cfe:	01 c0       	rjmp	.+2      	; 0x6d02 <udd_ctrl_interrupt_tc_setup+0xdc>
    6d00:	c1 e0       	ldi	r28, 0x01	; 1
    6d02:	8c 2f       	mov	r24, r28
    6d04:	cf 91       	pop	r28
    6d06:	0f 91       	pop	r16
    6d08:	08 95       	ret

00006d0a <udd_ep_trans_complet>:
    6d0a:	8f 92       	push	r8
    6d0c:	9f 92       	push	r9
    6d0e:	af 92       	push	r10
    6d10:	bf 92       	push	r11
    6d12:	df 92       	push	r13
    6d14:	ef 92       	push	r14
    6d16:	ff 92       	push	r15
    6d18:	0f 93       	push	r16
    6d1a:	1f 93       	push	r17
    6d1c:	cf 93       	push	r28
    6d1e:	df 93       	push	r29
    6d20:	d8 2e       	mov	r13, r24
    6d22:	66 df       	rcall	.-308    	; 0x6bf0 <udd_ep_get_job>
    6d24:	8c 01       	movw	r16, r24
    6d26:	cd 2d       	mov	r28, r13
    6d28:	cf 70       	andi	r28, 0x0F	; 15
    6d2a:	d0 e0       	ldi	r29, 0x00	; 0
    6d2c:	ce 01       	movw	r24, r28
    6d2e:	88 0f       	add	r24, r24
    6d30:	99 1f       	adc	r25, r25
    6d32:	cd 2d       	mov	r28, r13
    6d34:	0d 2c       	mov	r0, r13
    6d36:	00 0c       	add	r0, r0
    6d38:	dd 0b       	sbc	r29, r29
    6d3a:	cc 27       	eor	r28, r28
    6d3c:	dd 0f       	add	r29, r29
    6d3e:	cc 1f       	adc	r28, r28
    6d40:	dd 27       	eor	r29, r29
    6d42:	c8 0f       	add	r28, r24
    6d44:	d9 1f       	adc	r29, r25
    6d46:	ce 01       	movw	r24, r28
    6d48:	88 0f       	add	r24, r24
    6d4a:	99 1f       	adc	r25, r25
    6d4c:	88 0f       	add	r24, r24
    6d4e:	99 1f       	adc	r25, r25
    6d50:	88 0f       	add	r24, r24
    6d52:	99 1f       	adc	r25, r25
    6d54:	9c 01       	movw	r18, r24
    6d56:	2c 51       	subi	r18, 0x1C	; 28
    6d58:	38 4d       	sbci	r19, 0xD8	; 216
    6d5a:	79 01       	movw	r14, r18
    6d5c:	c9 01       	movw	r24, r18
    6d5e:	1f df       	rcall	.-450    	; 0x6b9e <udd_ep_get_size>
    6d60:	4c 01       	movw	r8, r24
    6d62:	dd 20       	and	r13, r13
    6d64:	0c f0       	brlt	.+2      	; 0x6d68 <udd_ep_trans_complet+0x5e>
    6d66:	7b c0       	rjmp	.+246    	; 0x6e5e <udd_ep_trans_complet+0x154>
    6d68:	fe 01       	movw	r30, r28
    6d6a:	ee 0f       	add	r30, r30
    6d6c:	ff 1f       	adc	r31, r31
    6d6e:	ee 0f       	add	r30, r30
    6d70:	ff 1f       	adc	r31, r31
    6d72:	ee 0f       	add	r30, r30
    6d74:	ff 1f       	adc	r31, r31
    6d76:	e8 52       	subi	r30, 0x28	; 40
    6d78:	f8 4d       	sbci	r31, 0xD8	; 216
    6d7a:	22 89       	ldd	r18, Z+18	; 0x12
    6d7c:	33 89       	ldd	r19, Z+19	; 0x13
    6d7e:	d8 01       	movw	r26, r16
    6d80:	15 96       	adiw	r26, 0x05	; 5
    6d82:	8d 91       	ld	r24, X+
    6d84:	9c 91       	ld	r25, X
    6d86:	16 97       	sbiw	r26, 0x06	; 6
    6d88:	82 0f       	add	r24, r18
    6d8a:	93 1f       	adc	r25, r19
    6d8c:	15 96       	adiw	r26, 0x05	; 5
    6d8e:	8d 93       	st	X+, r24
    6d90:	9c 93       	st	X, r25
    6d92:	16 97       	sbiw	r26, 0x06	; 6
    6d94:	13 96       	adiw	r26, 0x03	; 3
    6d96:	2d 91       	ld	r18, X+
    6d98:	3c 91       	ld	r19, X
    6d9a:	14 97       	sbiw	r26, 0x04	; 4
    6d9c:	82 17       	cp	r24, r18
    6d9e:	93 07       	cpc	r25, r19
    6da0:	09 f4       	brne	.+2      	; 0x6da4 <udd_ep_trans_complet+0x9a>
    6da2:	47 c0       	rjmp	.+142    	; 0x6e32 <udd_ep_trans_complet+0x128>
    6da4:	28 1b       	sub	r18, r24
    6da6:	39 0b       	sbc	r19, r25
    6da8:	21 15       	cp	r18, r1
    6daa:	b4 e0       	ldi	r27, 0x04	; 4
    6dac:	3b 07       	cpc	r19, r27
    6dae:	40 f0       	brcs	.+16     	; 0x6dc0 <udd_ep_trans_complet+0xb6>
    6db0:	2f ef       	ldi	r18, 0xFF	; 255
    6db2:	33 e0       	ldi	r19, 0x03	; 3
    6db4:	c9 01       	movw	r24, r18
    6db6:	b4 01       	movw	r22, r8
    6db8:	0e 94 d6 53 	call	0xa7ac	; 0xa7ac <__udivmodhi4>
    6dbc:	28 1b       	sub	r18, r24
    6dbe:	39 0b       	sbc	r19, r25
    6dc0:	f8 01       	movw	r30, r16
    6dc2:	80 81       	ld	r24, Z
    6dc4:	81 ff       	sbrs	r24, 1
    6dc6:	0a c0       	rjmp	.+20     	; 0x6ddc <udd_ep_trans_complet+0xd2>
    6dc8:	c9 01       	movw	r24, r18
    6dca:	b4 01       	movw	r22, r8
    6dcc:	0e 94 d6 53 	call	0xa7ac	; 0xa7ac <__udivmodhi4>
    6dd0:	41 e0       	ldi	r20, 0x01	; 1
    6dd2:	89 2b       	or	r24, r25
    6dd4:	09 f0       	breq	.+2      	; 0x6dd8 <udd_ep_trans_complet+0xce>
    6dd6:	40 e0       	ldi	r20, 0x00	; 0
    6dd8:	84 2f       	mov	r24, r20
    6dda:	01 c0       	rjmp	.+2      	; 0x6dde <udd_ep_trans_complet+0xd4>
    6ddc:	80 e0       	ldi	r24, 0x00	; 0
    6dde:	d8 01       	movw	r26, r16
    6de0:	9c 91       	ld	r25, X
    6de2:	80 fb       	bst	r24, 0
    6de4:	91 f9       	bld	r25, 1
    6de6:	9c 93       	st	X, r25
    6de8:	fe 01       	movw	r30, r28
    6dea:	ee 0f       	add	r30, r30
    6dec:	ff 1f       	adc	r31, r31
    6dee:	ee 0f       	add	r30, r30
    6df0:	ff 1f       	adc	r31, r31
    6df2:	ee 0f       	add	r30, r30
    6df4:	ff 1f       	adc	r31, r31
    6df6:	e8 52       	subi	r30, 0x28	; 40
    6df8:	f8 4d       	sbci	r31, 0xD8	; 216
    6dfa:	12 8a       	std	Z+18, r1	; 0x12
    6dfc:	13 8a       	std	Z+19, r1	; 0x13
    6dfe:	26 87       	std	Z+14, r18	; 0x0e
    6e00:	37 87       	std	Z+15, r19	; 0x0f
    6e02:	11 96       	adiw	r26, 0x01	; 1
    6e04:	2d 91       	ld	r18, X+
    6e06:	3c 91       	ld	r19, X
    6e08:	12 97       	sbiw	r26, 0x02	; 2
    6e0a:	15 96       	adiw	r26, 0x05	; 5
    6e0c:	8d 91       	ld	r24, X+
    6e0e:	9c 91       	ld	r25, X
    6e10:	16 97       	sbiw	r26, 0x06	; 6
    6e12:	82 0f       	add	r24, r18
    6e14:	93 1f       	adc	r25, r19
    6e16:	cc 0f       	add	r28, r28
    6e18:	dd 1f       	adc	r29, r29
    6e1a:	cc 0f       	add	r28, r28
    6e1c:	dd 1f       	adc	r29, r29
    6e1e:	cc 0f       	add	r28, r28
    6e20:	dd 1f       	adc	r29, r29
    6e22:	c8 51       	subi	r28, 0x18	; 24
    6e24:	d8 4d       	sbci	r29, 0xD8	; 216
    6e26:	88 83       	st	Y, r24
    6e28:	99 83       	std	Y+1, r25	; 0x01
    6e2a:	f7 01       	movw	r30, r14
    6e2c:	02 e0       	ldi	r16, 0x02	; 2
    6e2e:	06 93       	lac	Z, r16
    6e30:	e4 c0       	rjmp	.+456    	; 0x6ffa <udd_ep_trans_complet+0x2f0>
    6e32:	d8 01       	movw	r26, r16
    6e34:	8c 91       	ld	r24, X
    6e36:	81 ff       	sbrs	r24, 1
    6e38:	cd c0       	rjmp	.+410    	; 0x6fd4 <udd_ep_trans_complet+0x2ca>
    6e3a:	8d 7f       	andi	r24, 0xFD	; 253
    6e3c:	8c 93       	st	X, r24
    6e3e:	cc 0f       	add	r28, r28
    6e40:	dd 1f       	adc	r29, r29
    6e42:	cc 0f       	add	r28, r28
    6e44:	dd 1f       	adc	r29, r29
    6e46:	cc 0f       	add	r28, r28
    6e48:	dd 1f       	adc	r29, r29
    6e4a:	c8 52       	subi	r28, 0x28	; 40
    6e4c:	d8 4d       	sbci	r29, 0xD8	; 216
    6e4e:	1a 8a       	std	Y+18, r1	; 0x12
    6e50:	1b 8a       	std	Y+19, r1	; 0x13
    6e52:	1e 86       	std	Y+14, r1	; 0x0e
    6e54:	1f 86       	std	Y+15, r1	; 0x0f
    6e56:	f7 01       	movw	r30, r14
    6e58:	02 e0       	ldi	r16, 0x02	; 2
    6e5a:	06 93       	lac	Z, r16
    6e5c:	ce c0       	rjmp	.+412    	; 0x6ffa <udd_ep_trans_complet+0x2f0>
    6e5e:	fe 01       	movw	r30, r28
    6e60:	ee 0f       	add	r30, r30
    6e62:	ff 1f       	adc	r31, r31
    6e64:	ee 0f       	add	r30, r30
    6e66:	ff 1f       	adc	r31, r31
    6e68:	ee 0f       	add	r30, r30
    6e6a:	ff 1f       	adc	r31, r31
    6e6c:	e8 52       	subi	r30, 0x28	; 40
    6e6e:	f8 4d       	sbci	r31, 0xD8	; 216
    6e70:	a6 84       	ldd	r10, Z+14	; 0x0e
    6e72:	b7 84       	ldd	r11, Z+15	; 0x0f
    6e74:	d8 01       	movw	r26, r16
    6e76:	8c 91       	ld	r24, X
    6e78:	82 ff       	sbrs	r24, 2
    6e7a:	1b c0       	rjmp	.+54     	; 0x6eb2 <udd_ep_trans_complet+0x1a8>
    6e7c:	11 96       	adiw	r26, 0x01	; 1
    6e7e:	ed 91       	ld	r30, X+
    6e80:	fc 91       	ld	r31, X
    6e82:	12 97       	sbiw	r26, 0x02	; 2
    6e84:	15 96       	adiw	r26, 0x05	; 5
    6e86:	2d 91       	ld	r18, X+
    6e88:	3c 91       	ld	r19, X
    6e8a:	16 97       	sbiw	r26, 0x06	; 6
    6e8c:	13 96       	adiw	r26, 0x03	; 3
    6e8e:	8d 91       	ld	r24, X+
    6e90:	9c 91       	ld	r25, X
    6e92:	14 97       	sbiw	r26, 0x04	; 4
    6e94:	b4 01       	movw	r22, r8
    6e96:	0e 94 d6 53 	call	0xa7ac	; 0xa7ac <__udivmodhi4>
    6e9a:	b0 e4       	ldi	r27, 0x40	; 64
    6e9c:	db 9e       	mul	r13, r27
    6e9e:	b0 01       	movw	r22, r0
    6ea0:	11 24       	eor	r1, r1
    6ea2:	61 55       	subi	r22, 0x51	; 81
    6ea4:	79 4d       	sbci	r23, 0xD9	; 217
    6ea6:	ac 01       	movw	r20, r24
    6ea8:	cf 01       	movw	r24, r30
    6eaa:	82 0f       	add	r24, r18
    6eac:	93 1f       	adc	r25, r19
    6eae:	0e 94 47 58 	call	0xb08e	; 0xb08e <memcpy>
    6eb2:	f8 01       	movw	r30, r16
    6eb4:	25 81       	ldd	r18, Z+5	; 0x05
    6eb6:	36 81       	ldd	r19, Z+6	; 0x06
    6eb8:	2a 0d       	add	r18, r10
    6eba:	3b 1d       	adc	r19, r11
    6ebc:	25 83       	std	Z+5, r18	; 0x05
    6ebe:	36 83       	std	Z+6, r19	; 0x06
    6ec0:	83 81       	ldd	r24, Z+3	; 0x03
    6ec2:	94 81       	ldd	r25, Z+4	; 0x04
    6ec4:	82 17       	cp	r24, r18
    6ec6:	93 07       	cpc	r25, r19
    6ec8:	68 f4       	brcc	.+26     	; 0x6ee4 <udd_ep_trans_complet+0x1da>
    6eca:	85 83       	std	Z+5, r24	; 0x05
    6ecc:	96 83       	std	Z+6, r25	; 0x06
    6ece:	cc 0f       	add	r28, r28
    6ed0:	dd 1f       	adc	r29, r29
    6ed2:	cc 0f       	add	r28, r28
    6ed4:	dd 1f       	adc	r29, r29
    6ed6:	cc 0f       	add	r28, r28
    6ed8:	dd 1f       	adc	r29, r29
    6eda:	c8 52       	subi	r28, 0x28	; 40
    6edc:	d8 4d       	sbci	r29, 0xD8	; 216
    6ede:	8a 89       	ldd	r24, Y+18	; 0x12
    6ee0:	9b 89       	ldd	r25, Y+19	; 0x13
    6ee2:	78 c0       	rjmp	.+240    	; 0x6fd4 <udd_ep_trans_complet+0x2ca>
    6ee4:	fe 01       	movw	r30, r28
    6ee6:	ee 0f       	add	r30, r30
    6ee8:	ff 1f       	adc	r31, r31
    6eea:	ee 0f       	add	r30, r30
    6eec:	ff 1f       	adc	r31, r31
    6eee:	ee 0f       	add	r30, r30
    6ef0:	ff 1f       	adc	r31, r31
    6ef2:	e8 52       	subi	r30, 0x28	; 40
    6ef4:	f8 4d       	sbci	r31, 0xD8	; 216
    6ef6:	42 89       	ldd	r20, Z+18	; 0x12
    6ef8:	53 89       	ldd	r21, Z+19	; 0x13
    6efa:	a4 16       	cp	r10, r20
    6efc:	b5 06       	cpc	r11, r21
    6efe:	09 f0       	breq	.+2      	; 0x6f02 <udd_ep_trans_complet+0x1f8>
    6f00:	69 c0       	rjmp	.+210    	; 0x6fd4 <udd_ep_trans_complet+0x2ca>
    6f02:	28 17       	cp	r18, r24
    6f04:	39 07       	cpc	r19, r25
    6f06:	09 f4       	brne	.+2      	; 0x6f0a <udd_ep_trans_complet+0x200>
    6f08:	65 c0       	rjmp	.+202    	; 0x6fd4 <udd_ep_trans_complet+0x2ca>
    6f0a:	ac 01       	movw	r20, r24
    6f0c:	42 1b       	sub	r20, r18
    6f0e:	53 0b       	sbc	r21, r19
    6f10:	9a 01       	movw	r18, r20
    6f12:	21 15       	cp	r18, r1
    6f14:	54 e0       	ldi	r21, 0x04	; 4
    6f16:	35 07       	cpc	r19, r21
    6f18:	48 f0       	brcs	.+18     	; 0x6f2c <udd_ep_trans_complet+0x222>
    6f1a:	2f ef       	ldi	r18, 0xFF	; 255
    6f1c:	33 e0       	ldi	r19, 0x03	; 3
    6f1e:	c9 01       	movw	r24, r18
    6f20:	b4 01       	movw	r22, r8
    6f22:	0e 94 d6 53 	call	0xa7ac	; 0xa7ac <__udivmodhi4>
    6f26:	28 1b       	sub	r18, r24
    6f28:	39 0b       	sbc	r19, r25
    6f2a:	06 c0       	rjmp	.+12     	; 0x6f38 <udd_ep_trans_complet+0x22e>
    6f2c:	c9 01       	movw	r24, r18
    6f2e:	b4 01       	movw	r22, r8
    6f30:	0e 94 d6 53 	call	0xa7ac	; 0xa7ac <__udivmodhi4>
    6f34:	28 1b       	sub	r18, r24
    6f36:	39 0b       	sbc	r19, r25
    6f38:	fe 01       	movw	r30, r28
    6f3a:	ee 0f       	add	r30, r30
    6f3c:	ff 1f       	adc	r31, r31
    6f3e:	ee 0f       	add	r30, r30
    6f40:	ff 1f       	adc	r31, r31
    6f42:	ee 0f       	add	r30, r30
    6f44:	ff 1f       	adc	r31, r31
    6f46:	e8 52       	subi	r30, 0x28	; 40
    6f48:	f8 4d       	sbci	r31, 0xD8	; 216
    6f4a:	16 86       	std	Z+14, r1	; 0x0e
    6f4c:	17 86       	std	Z+15, r1	; 0x0f
    6f4e:	28 15       	cp	r18, r8
    6f50:	39 05       	cpc	r19, r9
    6f52:	00 f5       	brcc	.+64     	; 0x6f94 <udd_ep_trans_complet+0x28a>
    6f54:	d8 01       	movw	r26, r16
    6f56:	8c 91       	ld	r24, X
    6f58:	84 60       	ori	r24, 0x04	; 4
    6f5a:	8c 93       	st	X, r24
    6f5c:	b0 e4       	ldi	r27, 0x40	; 64
    6f5e:	db 9e       	mul	r13, r27
    6f60:	c0 01       	movw	r24, r0
    6f62:	11 24       	eor	r1, r1
    6f64:	81 55       	subi	r24, 0x51	; 81
    6f66:	99 4d       	sbci	r25, 0xD9	; 217
    6f68:	fe 01       	movw	r30, r28
    6f6a:	ee 0f       	add	r30, r30
    6f6c:	ff 1f       	adc	r31, r31
    6f6e:	ee 0f       	add	r30, r30
    6f70:	ff 1f       	adc	r31, r31
    6f72:	ee 0f       	add	r30, r30
    6f74:	ff 1f       	adc	r31, r31
    6f76:	e8 51       	subi	r30, 0x18	; 24
    6f78:	f8 4d       	sbci	r31, 0xD8	; 216
    6f7a:	80 83       	st	Z, r24
    6f7c:	91 83       	std	Z+1, r25	; 0x01
    6f7e:	cc 0f       	add	r28, r28
    6f80:	dd 1f       	adc	r29, r29
    6f82:	cc 0f       	add	r28, r28
    6f84:	dd 1f       	adc	r29, r29
    6f86:	cc 0f       	add	r28, r28
    6f88:	dd 1f       	adc	r29, r29
    6f8a:	c8 52       	subi	r28, 0x28	; 40
    6f8c:	d8 4d       	sbci	r29, 0xD8	; 216
    6f8e:	8a 8a       	std	Y+18, r8	; 0x12
    6f90:	9b 8a       	std	Y+19, r9	; 0x13
    6f92:	1c c0       	rjmp	.+56     	; 0x6fcc <udd_ep_trans_complet+0x2c2>
    6f94:	f8 01       	movw	r30, r16
    6f96:	41 81       	ldd	r20, Z+1	; 0x01
    6f98:	52 81       	ldd	r21, Z+2	; 0x02
    6f9a:	85 81       	ldd	r24, Z+5	; 0x05
    6f9c:	96 81       	ldd	r25, Z+6	; 0x06
    6f9e:	84 0f       	add	r24, r20
    6fa0:	95 1f       	adc	r25, r21
    6fa2:	fe 01       	movw	r30, r28
    6fa4:	ee 0f       	add	r30, r30
    6fa6:	ff 1f       	adc	r31, r31
    6fa8:	ee 0f       	add	r30, r30
    6faa:	ff 1f       	adc	r31, r31
    6fac:	ee 0f       	add	r30, r30
    6fae:	ff 1f       	adc	r31, r31
    6fb0:	e8 51       	subi	r30, 0x18	; 24
    6fb2:	f8 4d       	sbci	r31, 0xD8	; 216
    6fb4:	80 83       	st	Z, r24
    6fb6:	91 83       	std	Z+1, r25	; 0x01
    6fb8:	cc 0f       	add	r28, r28
    6fba:	dd 1f       	adc	r29, r29
    6fbc:	cc 0f       	add	r28, r28
    6fbe:	dd 1f       	adc	r29, r29
    6fc0:	cc 0f       	add	r28, r28
    6fc2:	dd 1f       	adc	r29, r29
    6fc4:	c8 52       	subi	r28, 0x28	; 40
    6fc6:	d8 4d       	sbci	r29, 0xD8	; 216
    6fc8:	2a 8b       	std	Y+18, r18	; 0x12
    6fca:	3b 8b       	std	Y+19, r19	; 0x13
    6fcc:	f7 01       	movw	r30, r14
    6fce:	02 e0       	ldi	r16, 0x02	; 2
    6fd0:	06 93       	lac	Z, r16
    6fd2:	13 c0       	rjmp	.+38     	; 0x6ffa <udd_ep_trans_complet+0x2f0>
    6fd4:	d8 01       	movw	r26, r16
    6fd6:	8c 91       	ld	r24, X
    6fd8:	80 ff       	sbrs	r24, 0
    6fda:	0f c0       	rjmp	.+30     	; 0x6ffa <udd_ep_trans_complet+0x2f0>
    6fdc:	8e 7f       	andi	r24, 0xFE	; 254
    6fde:	8c 93       	st	X, r24
    6fe0:	17 96       	adiw	r26, 0x07	; 7
    6fe2:	ed 91       	ld	r30, X+
    6fe4:	fc 91       	ld	r31, X
    6fe6:	18 97       	sbiw	r26, 0x08	; 8
    6fe8:	30 97       	sbiw	r30, 0x00	; 0
    6fea:	39 f0       	breq	.+14     	; 0x6ffa <udd_ep_trans_complet+0x2f0>
    6fec:	15 96       	adiw	r26, 0x05	; 5
    6fee:	6d 91       	ld	r22, X+
    6ff0:	7c 91       	ld	r23, X
    6ff2:	16 97       	sbiw	r26, 0x06	; 6
    6ff4:	4d 2d       	mov	r20, r13
    6ff6:	80 e0       	ldi	r24, 0x00	; 0
    6ff8:	19 95       	eicall
    6ffa:	df 91       	pop	r29
    6ffc:	cf 91       	pop	r28
    6ffe:	1f 91       	pop	r17
    7000:	0f 91       	pop	r16
    7002:	ff 90       	pop	r15
    7004:	ef 90       	pop	r14
    7006:	df 90       	pop	r13
    7008:	bf 90       	pop	r11
    700a:	af 90       	pop	r10
    700c:	9f 90       	pop	r9
    700e:	8f 90       	pop	r8
    7010:	08 95       	ret

00007012 <udd_attach>:
    7012:	1f 93       	push	r17
    7014:	cf 93       	push	r28
    7016:	df 93       	push	r29
    7018:	1f 92       	push	r1
    701a:	cd b7       	in	r28, 0x3d	; 61
    701c:	de b7       	in	r29, 0x3e	; 62
    701e:	8f b7       	in	r24, 0x3f	; 63
    7020:	89 83       	std	Y+1, r24	; 0x01
    7022:	f8 94       	cli
    7024:	19 81       	ldd	r17, Y+1	; 0x01
    7026:	81 e0       	ldi	r24, 0x01	; 1
    7028:	cd dc       	rcall	.-1638   	; 0x69c4 <udd_sleep_mode>
    702a:	ea ec       	ldi	r30, 0xCA	; 202
    702c:	f4 e0       	ldi	r31, 0x04	; 4
    702e:	80 e4       	ldi	r24, 0x40	; 64
    7030:	80 83       	st	Z, r24
    7032:	80 e2       	ldi	r24, 0x20	; 32
    7034:	80 83       	st	Z, r24
    7036:	e1 ec       	ldi	r30, 0xC1	; 193
    7038:	f4 e0       	ldi	r31, 0x04	; 4
    703a:	80 81       	ld	r24, Z
    703c:	81 60       	ori	r24, 0x01	; 1
    703e:	80 83       	st	Z, r24
    7040:	a9 ec       	ldi	r26, 0xC9	; 201
    7042:	b4 e0       	ldi	r27, 0x04	; 4
    7044:	8c 91       	ld	r24, X
    7046:	82 60       	ori	r24, 0x02	; 2
    7048:	8c 93       	st	X, r24
    704a:	e8 ec       	ldi	r30, 0xC8	; 200
    704c:	f4 e0       	ldi	r31, 0x04	; 4
    704e:	80 81       	ld	r24, Z
    7050:	80 64       	ori	r24, 0x40	; 64
    7052:	80 83       	st	Z, r24
    7054:	8c 91       	ld	r24, X
    7056:	81 60       	ori	r24, 0x01	; 1
    7058:	8c 93       	st	X, r24
    705a:	80 81       	ld	r24, Z
    705c:	80 68       	ori	r24, 0x80	; 128
    705e:	80 83       	st	Z, r24
    7060:	1f bf       	out	0x3f, r17	; 63
    7062:	0f 90       	pop	r0
    7064:	df 91       	pop	r29
    7066:	cf 91       	pop	r28
    7068:	1f 91       	pop	r17
    706a:	08 95       	ret

0000706c <udd_enable>:
    706c:	0f 93       	push	r16
    706e:	1f 93       	push	r17
    7070:	cf 93       	push	r28
    7072:	df 93       	push	r29
    7074:	1f 92       	push	r1
    7076:	1f 92       	push	r1
    7078:	cd b7       	in	r28, 0x3d	; 61
    707a:	de b7       	in	r29, 0x3e	; 62
    707c:	00 e6       	ldi	r16, 0x60	; 96
    707e:	10 e0       	ldi	r17, 0x00	; 0
    7080:	f8 01       	movw	r30, r16
    7082:	10 82       	st	Z, r1
    7084:	80 e3       	ldi	r24, 0x30	; 48
    7086:	0e 94 d2 4b 	call	0x97a4	; 0x97a4 <sysclk_enable_usb>
    708a:	e0 ec       	ldi	r30, 0xC0	; 192
    708c:	f4 e0       	ldi	r31, 0x04	; 4
    708e:	80 81       	ld	r24, Z
    7090:	80 64       	ori	r24, 0x40	; 64
    7092:	80 83       	st	Z, r24
    7094:	81 e0       	ldi	r24, 0x01	; 1
    7096:	f8 01       	movw	r30, r16
    7098:	80 83       	st	Z, r24
    709a:	8f b7       	in	r24, 0x3f	; 63
    709c:	8a 83       	std	Y+2, r24	; 0x02
    709e:	f8 94       	cli
    70a0:	1a 81       	ldd	r17, Y+2	; 0x02
    70a2:	e8 ed       	ldi	r30, 0xD8	; 216
    70a4:	f7 e2       	ldi	r31, 0x27	; 39
    70a6:	15 86       	std	Z+13, r1	; 0x0d
    70a8:	15 8a       	std	Z+21, r1	; 0x15
    70aa:	15 8e       	std	Z+29, r1	; 0x1d
    70ac:	15 a2       	std	Z+37, r1	; 0x25
    70ae:	15 a6       	std	Z+45, r1	; 0x2d
    70b0:	15 aa       	std	Z+53, r1	; 0x35
    70b2:	ef e6       	ldi	r30, 0x6F	; 111
    70b4:	f7 e2       	ldi	r31, 0x27	; 39
    70b6:	80 81       	ld	r24, Z
    70b8:	8e 7f       	andi	r24, 0xFE	; 254
    70ba:	80 83       	st	Z, r24
    70bc:	e8 e7       	ldi	r30, 0x78	; 120
    70be:	f7 e2       	ldi	r31, 0x27	; 39
    70c0:	80 81       	ld	r24, Z
    70c2:	8e 7f       	andi	r24, 0xFE	; 254
    70c4:	80 83       	st	Z, r24
    70c6:	e1 e8       	ldi	r30, 0x81	; 129
    70c8:	f7 e2       	ldi	r31, 0x27	; 39
    70ca:	80 81       	ld	r24, Z
    70cc:	8e 7f       	andi	r24, 0xFE	; 254
    70ce:	80 83       	st	Z, r24
    70d0:	ea e8       	ldi	r30, 0x8A	; 138
    70d2:	f7 e2       	ldi	r31, 0x27	; 39
    70d4:	80 81       	ld	r24, Z
    70d6:	8e 7f       	andi	r24, 0xFE	; 254
    70d8:	80 83       	st	Z, r24
    70da:	6a e1       	ldi	r22, 0x1A	; 26
    70dc:	70 e0       	ldi	r23, 0x00	; 0
    70de:	82 e0       	ldi	r24, 0x02	; 2
    70e0:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
    70e4:	8f 3f       	cpi	r24, 0xFF	; 255
    70e6:	19 f0       	breq	.+6      	; 0x70ee <udd_enable+0x82>
    70e8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    70ec:	03 c0       	rjmp	.+6      	; 0x70f4 <udd_enable+0x88>
    70ee:	8f e1       	ldi	r24, 0x1F	; 31
    70f0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    70f4:	6b e1       	ldi	r22, 0x1B	; 27
    70f6:	70 e0       	ldi	r23, 0x00	; 0
    70f8:	82 e0       	ldi	r24, 0x02	; 2
    70fa:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
    70fe:	8f 3f       	cpi	r24, 0xFF	; 255
    7100:	19 f0       	breq	.+6      	; 0x7108 <udd_enable+0x9c>
    7102:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    7106:	03 c0       	rjmp	.+6      	; 0x710e <udd_enable+0xa2>
    7108:	8f e1       	ldi	r24, 0x1F	; 31
    710a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    710e:	e0 ec       	ldi	r30, 0xC0	; 192
    7110:	f4 e0       	ldi	r31, 0x04	; 4
    7112:	80 81       	ld	r24, Z
    7114:	82 60       	ori	r24, 0x02	; 2
    7116:	80 83       	st	Z, r24
    7118:	80 81       	ld	r24, Z
    711a:	80 68       	ori	r24, 0x80	; 128
    711c:	80 83       	st	Z, r24
    711e:	80 81       	ld	r24, Z
    7120:	80 61       	ori	r24, 0x10	; 16
    7122:	80 83       	st	Z, r24
    7124:	84 ee       	ldi	r24, 0xE4	; 228
    7126:	97 e2       	ldi	r25, 0x27	; 39
    7128:	86 83       	std	Z+6, r24	; 0x06
    712a:	97 83       	std	Z+7, r25	; 0x07
    712c:	80 81       	ld	r24, Z
    712e:	80 62       	ori	r24, 0x20	; 32
    7130:	80 83       	st	Z, r24
    7132:	8f ef       	ldi	r24, 0xFF	; 255
    7134:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    7138:	e8 ec       	ldi	r30, 0xC8	; 200
    713a:	f4 e0       	ldi	r31, 0x04	; 4
    713c:	80 81       	ld	r24, Z
    713e:	81 60       	ori	r24, 0x01	; 1
    7140:	80 83       	st	Z, r24
    7142:	10 92 18 28 	sts	0x2818, r1	; 0x802818 <udd_b_idle>
    7146:	80 91 ea 2a 	lds	r24, 0x2AEA	; 0x802aea <sleepmgr_locks+0x5>
    714a:	8f 3f       	cpi	r24, 0xFF	; 255
    714c:	09 f4       	brne	.+2      	; 0x7150 <udd_enable+0xe4>
    714e:	ff cf       	rjmp	.-2      	; 0x714e <udd_enable+0xe2>
    7150:	8f b7       	in	r24, 0x3f	; 63
    7152:	89 83       	std	Y+1, r24	; 0x01
    7154:	f8 94       	cli
    7156:	99 81       	ldd	r25, Y+1	; 0x01
    7158:	e5 ee       	ldi	r30, 0xE5	; 229
    715a:	fa e2       	ldi	r31, 0x2A	; 42
    715c:	85 81       	ldd	r24, Z+5	; 0x05
    715e:	8f 5f       	subi	r24, 0xFF	; 255
    7160:	85 83       	std	Z+5, r24	; 0x05
    7162:	9f bf       	out	0x3f, r25	; 63
    7164:	56 df       	rcall	.-340    	; 0x7012 <udd_attach>
    7166:	1f bf       	out	0x3f, r17	; 63
    7168:	0f 90       	pop	r0
    716a:	0f 90       	pop	r0
    716c:	df 91       	pop	r29
    716e:	cf 91       	pop	r28
    7170:	1f 91       	pop	r17
    7172:	0f 91       	pop	r16
    7174:	08 95       	ret

00007176 <udd_is_high_speed>:
    7176:	80 e0       	ldi	r24, 0x00	; 0
    7178:	08 95       	ret

0000717a <udd_set_address>:
    717a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    717e:	08 95       	ret

00007180 <udd_getaddress>:
    7180:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    7184:	08 95       	ret

00007186 <udd_get_frame_number>:
    7186:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <udd_sram+0x3c>
    718a:	90 91 15 28 	lds	r25, 0x2815	; 0x802815 <udd_sram+0x3d>
    718e:	08 95       	ret

00007190 <udd_get_micro_frame_number>:
    7190:	80 e0       	ldi	r24, 0x00	; 0
    7192:	90 e0       	ldi	r25, 0x00	; 0
    7194:	08 95       	ret

00007196 <udd_set_setup_payload>:
    7196:	e5 ed       	ldi	r30, 0xD5	; 213
    7198:	fa e2       	ldi	r31, 0x2A	; 42
    719a:	80 87       	std	Z+8, r24	; 0x08
    719c:	91 87       	std	Z+9, r25	; 0x09
    719e:	62 87       	std	Z+10, r22	; 0x0a
    71a0:	73 87       	std	Z+11, r23	; 0x0b
    71a2:	08 95       	ret

000071a4 <udd_ep_alloc>:
    71a4:	28 2f       	mov	r18, r24
    71a6:	2f 70       	andi	r18, 0x0F	; 15
    71a8:	30 e0       	ldi	r19, 0x00	; 0
    71aa:	22 0f       	add	r18, r18
    71ac:	33 1f       	adc	r19, r19
    71ae:	08 2e       	mov	r0, r24
    71b0:	00 0c       	add	r0, r0
    71b2:	99 0b       	sbc	r25, r25
    71b4:	88 27       	eor	r24, r24
    71b6:	99 0f       	add	r25, r25
    71b8:	88 1f       	adc	r24, r24
    71ba:	99 27       	eor	r25, r25
    71bc:	82 0f       	add	r24, r18
    71be:	93 1f       	adc	r25, r19
    71c0:	fc 01       	movw	r30, r24
    71c2:	ee 0f       	add	r30, r30
    71c4:	ff 1f       	adc	r31, r31
    71c6:	ee 0f       	add	r30, r30
    71c8:	ff 1f       	adc	r31, r31
    71ca:	ee 0f       	add	r30, r30
    71cc:	ff 1f       	adc	r31, r31
    71ce:	e8 52       	subi	r30, 0x28	; 40
    71d0:	f8 4d       	sbci	r31, 0xD8	; 216
    71d2:	25 85       	ldd	r18, Z+13	; 0x0d
    71d4:	20 7c       	andi	r18, 0xC0	; 192
    71d6:	09 f0       	breq	.+2      	; 0x71da <udd_ep_alloc+0x36>
    71d8:	69 c0       	rjmp	.+210    	; 0x72ac <udd_ep_alloc+0x108>
    71da:	63 70       	andi	r22, 0x03	; 3
    71dc:	61 30       	cpi	r22, 0x01	; 1
    71de:	11 f0       	breq	.+4      	; 0x71e4 <udd_ep_alloc+0x40>
    71e0:	18 f4       	brcc	.+6      	; 0x71e8 <udd_ep_alloc+0x44>
    71e2:	04 c0       	rjmp	.+8      	; 0x71ec <udd_ep_alloc+0x48>
    71e4:	60 ec       	ldi	r22, 0xC0	; 192
    71e6:	03 c0       	rjmp	.+6      	; 0x71ee <udd_ep_alloc+0x4a>
    71e8:	60 e8       	ldi	r22, 0x80	; 128
    71ea:	01 c0       	rjmp	.+2      	; 0x71ee <udd_ep_alloc+0x4a>
    71ec:	60 e4       	ldi	r22, 0x40	; 64
    71ee:	40 38       	cpi	r20, 0x80	; 128
    71f0:	51 05       	cpc	r21, r1
    71f2:	e9 f0       	breq	.+58     	; 0x722e <udd_ep_alloc+0x8a>
    71f4:	50 f4       	brcc	.+20     	; 0x720a <udd_ep_alloc+0x66>
    71f6:	40 32       	cpi	r20, 0x20	; 32
    71f8:	51 05       	cpc	r21, r1
    71fa:	a9 f0       	breq	.+42     	; 0x7226 <udd_ep_alloc+0x82>
    71fc:	40 34       	cpi	r20, 0x40	; 64
    71fe:	51 05       	cpc	r21, r1
    7200:	a1 f0       	breq	.+40     	; 0x722a <udd_ep_alloc+0x86>
    7202:	40 31       	cpi	r20, 0x10	; 16
    7204:	51 05       	cpc	r21, r1
    7206:	d9 f4       	brne	.+54     	; 0x723e <udd_ep_alloc+0x9a>
    7208:	0c c0       	rjmp	.+24     	; 0x7222 <udd_ep_alloc+0x7e>
    720a:	41 15       	cp	r20, r1
    720c:	22 e0       	ldi	r18, 0x02	; 2
    720e:	52 07       	cpc	r21, r18
    7210:	91 f0       	breq	.+36     	; 0x7236 <udd_ep_alloc+0x92>
    7212:	4f 3f       	cpi	r20, 0xFF	; 255
    7214:	23 e0       	ldi	r18, 0x03	; 3
    7216:	52 07       	cpc	r21, r18
    7218:	81 f0       	breq	.+32     	; 0x723a <udd_ep_alloc+0x96>
    721a:	41 15       	cp	r20, r1
    721c:	51 40       	sbci	r21, 0x01	; 1
    721e:	79 f4       	brne	.+30     	; 0x723e <udd_ep_alloc+0x9a>
    7220:	08 c0       	rjmp	.+16     	; 0x7232 <udd_ep_alloc+0x8e>
    7222:	21 e0       	ldi	r18, 0x01	; 1
    7224:	0d c0       	rjmp	.+26     	; 0x7240 <udd_ep_alloc+0x9c>
    7226:	22 e0       	ldi	r18, 0x02	; 2
    7228:	0b c0       	rjmp	.+22     	; 0x7240 <udd_ep_alloc+0x9c>
    722a:	23 e0       	ldi	r18, 0x03	; 3
    722c:	09 c0       	rjmp	.+18     	; 0x7240 <udd_ep_alloc+0x9c>
    722e:	24 e0       	ldi	r18, 0x04	; 4
    7230:	07 c0       	rjmp	.+14     	; 0x7240 <udd_ep_alloc+0x9c>
    7232:	25 e0       	ldi	r18, 0x05	; 5
    7234:	05 c0       	rjmp	.+10     	; 0x7240 <udd_ep_alloc+0x9c>
    7236:	26 e0       	ldi	r18, 0x06	; 6
    7238:	03 c0       	rjmp	.+6      	; 0x7240 <udd_ep_alloc+0x9c>
    723a:	27 e0       	ldi	r18, 0x07	; 7
    723c:	01 c0       	rjmp	.+2      	; 0x7240 <udd_ep_alloc+0x9c>
    723e:	20 e0       	ldi	r18, 0x00	; 0
    7240:	fc 01       	movw	r30, r24
    7242:	ee 0f       	add	r30, r30
    7244:	ff 1f       	adc	r31, r31
    7246:	ee 0f       	add	r30, r30
    7248:	ff 1f       	adc	r31, r31
    724a:	ee 0f       	add	r30, r30
    724c:	ff 1f       	adc	r31, r31
    724e:	e8 52       	subi	r30, 0x28	; 40
    7250:	f8 4d       	sbci	r31, 0xD8	; 216
    7252:	15 86       	std	Z+13, r1	; 0x0d
    7254:	36 e0       	ldi	r19, 0x06	; 6
    7256:	34 87       	std	Z+12, r19	; 0x0c
    7258:	26 2b       	or	r18, r22
    725a:	25 87       	std	Z+13, r18	; 0x0d
    725c:	fc 01       	movw	r30, r24
    725e:	ee 0f       	add	r30, r30
    7260:	ff 1f       	adc	r31, r31
    7262:	ee 0f       	add	r30, r30
    7264:	ff 1f       	adc	r31, r31
    7266:	ee 0f       	add	r30, r30
    7268:	ff 1f       	adc	r31, r31
    726a:	e8 52       	subi	r30, 0x28	; 40
    726c:	f8 4d       	sbci	r31, 0xD8	; 216
    726e:	25 85       	ldd	r18, Z+13	; 0x0d
    7270:	20 7c       	andi	r18, 0xC0	; 192
    7272:	20 3c       	cpi	r18, 0xC0	; 192
    7274:	69 f4       	brne	.+26     	; 0x7290 <udd_ep_alloc+0xec>
    7276:	fc 01       	movw	r30, r24
    7278:	ee 0f       	add	r30, r30
    727a:	ff 1f       	adc	r31, r31
    727c:	ee 0f       	add	r30, r30
    727e:	ff 1f       	adc	r31, r31
    7280:	ee 0f       	add	r30, r30
    7282:	ff 1f       	adc	r31, r31
    7284:	e8 52       	subi	r30, 0x28	; 40
    7286:	f8 4d       	sbci	r31, 0xD8	; 216
    7288:	25 85       	ldd	r18, Z+13	; 0x0d
    728a:	27 70       	andi	r18, 0x07	; 7
    728c:	27 30       	cpi	r18, 0x07	; 7
    728e:	81 f0       	breq	.+32     	; 0x72b0 <udd_ep_alloc+0x10c>
    7290:	88 0f       	add	r24, r24
    7292:	99 1f       	adc	r25, r25
    7294:	88 0f       	add	r24, r24
    7296:	99 1f       	adc	r25, r25
    7298:	88 0f       	add	r24, r24
    729a:	99 1f       	adc	r25, r25
    729c:	fc 01       	movw	r30, r24
    729e:	e8 52       	subi	r30, 0x28	; 40
    72a0:	f8 4d       	sbci	r31, 0xD8	; 216
    72a2:	85 85       	ldd	r24, Z+13	; 0x0d
    72a4:	80 62       	ori	r24, 0x20	; 32
    72a6:	85 87       	std	Z+13, r24	; 0x0d
    72a8:	81 e0       	ldi	r24, 0x01	; 1
    72aa:	08 95       	ret
    72ac:	80 e0       	ldi	r24, 0x00	; 0
    72ae:	08 95       	ret
    72b0:	81 e0       	ldi	r24, 0x01	; 1
    72b2:	08 95       	ret

000072b4 <udd_ep_is_halted>:
    72b4:	e8 2f       	mov	r30, r24
    72b6:	ef 70       	andi	r30, 0x0F	; 15
    72b8:	f0 e0       	ldi	r31, 0x00	; 0
    72ba:	ee 0f       	add	r30, r30
    72bc:	ff 1f       	adc	r31, r31
    72be:	08 2e       	mov	r0, r24
    72c0:	00 0c       	add	r0, r0
    72c2:	99 0b       	sbc	r25, r25
    72c4:	88 27       	eor	r24, r24
    72c6:	99 0f       	add	r25, r25
    72c8:	88 1f       	adc	r24, r24
    72ca:	99 27       	eor	r25, r25
    72cc:	e8 0f       	add	r30, r24
    72ce:	f9 1f       	adc	r31, r25
    72d0:	ee 0f       	add	r30, r30
    72d2:	ff 1f       	adc	r31, r31
    72d4:	ee 0f       	add	r30, r30
    72d6:	ff 1f       	adc	r31, r31
    72d8:	ee 0f       	add	r30, r30
    72da:	ff 1f       	adc	r31, r31
    72dc:	e8 52       	subi	r30, 0x28	; 40
    72de:	f8 4d       	sbci	r31, 0xD8	; 216
    72e0:	85 85       	ldd	r24, Z+13	; 0x0d
    72e2:	82 fb       	bst	r24, 2
    72e4:	88 27       	eor	r24, r24
    72e6:	80 f9       	bld	r24, 0
    72e8:	08 95       	ret

000072ea <udd_ep_clear_halt>:
    72ea:	0f 93       	push	r16
    72ec:	28 2f       	mov	r18, r24
    72ee:	2f 70       	andi	r18, 0x0F	; 15
    72f0:	30 e0       	ldi	r19, 0x00	; 0
    72f2:	a9 01       	movw	r20, r18
    72f4:	44 0f       	add	r20, r20
    72f6:	55 1f       	adc	r21, r21
    72f8:	28 2f       	mov	r18, r24
    72fa:	08 2e       	mov	r0, r24
    72fc:	00 0c       	add	r0, r0
    72fe:	33 0b       	sbc	r19, r19
    7300:	22 27       	eor	r18, r18
    7302:	33 0f       	add	r19, r19
    7304:	22 1f       	adc	r18, r18
    7306:	33 27       	eor	r19, r19
    7308:	24 0f       	add	r18, r20
    730a:	35 1f       	adc	r19, r21
    730c:	a9 01       	movw	r20, r18
    730e:	44 0f       	add	r20, r20
    7310:	55 1f       	adc	r21, r21
    7312:	44 0f       	add	r20, r20
    7314:	55 1f       	adc	r21, r21
    7316:	44 0f       	add	r20, r20
    7318:	55 1f       	adc	r21, r21
    731a:	fa 01       	movw	r30, r20
    731c:	ec 51       	subi	r30, 0x1C	; 28
    731e:	f8 4d       	sbci	r31, 0xD8	; 216
    7320:	01 e0       	ldi	r16, 0x01	; 1
    7322:	06 93       	lac	Z, r16
    7324:	fa 01       	movw	r30, r20
    7326:	e8 52       	subi	r30, 0x28	; 40
    7328:	f8 4d       	sbci	r31, 0xD8	; 216
    732a:	95 85       	ldd	r25, Z+13	; 0x0d
    732c:	92 ff       	sbrs	r25, 2
    732e:	11 c0       	rjmp	.+34     	; 0x7352 <udd_ep_clear_halt+0x68>
    7330:	fa 01       	movw	r30, r20
    7332:	e8 52       	subi	r30, 0x28	; 40
    7334:	f8 4d       	sbci	r31, 0xD8	; 216
    7336:	95 85       	ldd	r25, Z+13	; 0x0d
    7338:	9b 7f       	andi	r25, 0xFB	; 251
    733a:	95 87       	std	Z+13, r25	; 0x0d
    733c:	59 dc       	rcall	.-1870   	; 0x6bf0 <udd_ep_get_job>
    733e:	fc 01       	movw	r30, r24
    7340:	80 81       	ld	r24, Z
    7342:	80 ff       	sbrs	r24, 0
    7344:	06 c0       	rjmp	.+12     	; 0x7352 <udd_ep_clear_halt+0x68>
    7346:	8e 7f       	andi	r24, 0xFE	; 254
    7348:	80 83       	st	Z, r24
    734a:	07 80       	ldd	r0, Z+7	; 0x07
    734c:	f0 85       	ldd	r31, Z+8	; 0x08
    734e:	e0 2d       	mov	r30, r0
    7350:	19 95       	eicall
    7352:	81 e0       	ldi	r24, 0x01	; 1
    7354:	0f 91       	pop	r16
    7356:	08 95       	ret

00007358 <udd_ep_run>:
    7358:	6f 92       	push	r6
    735a:	7f 92       	push	r7
    735c:	8f 92       	push	r8
    735e:	9f 92       	push	r9
    7360:	af 92       	push	r10
    7362:	bf 92       	push	r11
    7364:	cf 92       	push	r12
    7366:	df 92       	push	r13
    7368:	ef 92       	push	r14
    736a:	ff 92       	push	r15
    736c:	0f 93       	push	r16
    736e:	1f 93       	push	r17
    7370:	cf 93       	push	r28
    7372:	df 93       	push	r29
    7374:	1f 92       	push	r1
    7376:	cd b7       	in	r28, 0x3d	; 61
    7378:	de b7       	in	r29, 0x3e	; 62
    737a:	78 2e       	mov	r7, r24
    737c:	66 2e       	mov	r6, r22
    737e:	4a 01       	movw	r8, r20
    7380:	59 01       	movw	r10, r18
    7382:	36 dc       	rcall	.-1940   	; 0x6bf0 <udd_ep_get_job>
    7384:	6c 01       	movw	r12, r24
    7386:	27 2d       	mov	r18, r7
    7388:	87 2d       	mov	r24, r7
    738a:	8f 70       	andi	r24, 0x0F	; 15
    738c:	e8 2e       	mov	r14, r24
    738e:	f1 2c       	mov	r15, r1
    7390:	c7 01       	movw	r24, r14
    7392:	88 0f       	add	r24, r24
    7394:	99 1f       	adc	r25, r25
    7396:	e7 2c       	mov	r14, r7
    7398:	07 2c       	mov	r0, r7
    739a:	00 0c       	add	r0, r0
    739c:	ff 08       	sbc	r15, r15
    739e:	ee 24       	eor	r14, r14
    73a0:	ff 0c       	add	r15, r15
    73a2:	ee 1c       	adc	r14, r14
    73a4:	ff 24       	eor	r15, r15
    73a6:	e8 0e       	add	r14, r24
    73a8:	f9 1e       	adc	r15, r25
    73aa:	f7 01       	movw	r30, r14
    73ac:	ee 0f       	add	r30, r30
    73ae:	ff 1f       	adc	r31, r31
    73b0:	ee 0f       	add	r30, r30
    73b2:	ff 1f       	adc	r31, r31
    73b4:	ee 0f       	add	r30, r30
    73b6:	ff 1f       	adc	r31, r31
    73b8:	e8 52       	subi	r30, 0x28	; 40
    73ba:	f8 4d       	sbci	r31, 0xD8	; 216
    73bc:	85 85       	ldd	r24, Z+13	; 0x0d
    73be:	80 7c       	andi	r24, 0xC0	; 192
    73c0:	09 f4       	brne	.+2      	; 0x73c4 <udd_ep_run+0x6c>
    73c2:	82 c0       	rjmp	.+260    	; 0x74c8 <udd_ep_run+0x170>
    73c4:	f7 01       	movw	r30, r14
    73c6:	ee 0f       	add	r30, r30
    73c8:	ff 1f       	adc	r31, r31
    73ca:	ee 0f       	add	r30, r30
    73cc:	ff 1f       	adc	r31, r31
    73ce:	ee 0f       	add	r30, r30
    73d0:	ff 1f       	adc	r31, r31
    73d2:	e8 52       	subi	r30, 0x28	; 40
    73d4:	f8 4d       	sbci	r31, 0xD8	; 216
    73d6:	85 85       	ldd	r24, Z+13	; 0x0d
    73d8:	80 7c       	andi	r24, 0xC0	; 192
    73da:	80 3c       	cpi	r24, 0xC0	; 192
    73dc:	61 f0       	breq	.+24     	; 0x73f6 <udd_ep_run+0x9e>
    73de:	f7 01       	movw	r30, r14
    73e0:	ee 0f       	add	r30, r30
    73e2:	ff 1f       	adc	r31, r31
    73e4:	ee 0f       	add	r30, r30
    73e6:	ff 1f       	adc	r31, r31
    73e8:	ee 0f       	add	r30, r30
    73ea:	ff 1f       	adc	r31, r31
    73ec:	e8 52       	subi	r30, 0x28	; 40
    73ee:	f8 4d       	sbci	r31, 0xD8	; 216
    73f0:	85 85       	ldd	r24, Z+13	; 0x0d
    73f2:	82 fd       	sbrc	r24, 2
    73f4:	6b c0       	rjmp	.+214    	; 0x74cc <udd_ep_run+0x174>
    73f6:	8f b7       	in	r24, 0x3f	; 63
    73f8:	89 83       	std	Y+1, r24	; 0x01
    73fa:	f8 94       	cli
    73fc:	89 81       	ldd	r24, Y+1	; 0x01
    73fe:	f6 01       	movw	r30, r12
    7400:	90 81       	ld	r25, Z
    7402:	90 ff       	sbrs	r25, 0
    7404:	03 c0       	rjmp	.+6      	; 0x740c <udd_ep_run+0xb4>
    7406:	8f bf       	out	0x3f, r24	; 63
    7408:	80 e0       	ldi	r24, 0x00	; 0
    740a:	61 c0       	rjmp	.+194    	; 0x74ce <udd_ep_run+0x176>
    740c:	f6 01       	movw	r30, r12
    740e:	90 81       	ld	r25, Z
    7410:	91 60       	ori	r25, 0x01	; 1
    7412:	90 83       	st	Z, r25
    7414:	8f bf       	out	0x3f, r24	; 63
    7416:	81 82       	std	Z+1, r8	; 0x01
    7418:	92 82       	std	Z+2, r9	; 0x02
    741a:	a3 82       	std	Z+3, r10	; 0x03
    741c:	b4 82       	std	Z+4, r11	; 0x04
    741e:	15 82       	std	Z+5, r1	; 0x05
    7420:	16 82       	std	Z+6, r1	; 0x06
    7422:	07 83       	std	Z+7, r16	; 0x07
    7424:	10 87       	std	Z+8, r17	; 0x08
    7426:	61 10       	cpse	r6, r1
    7428:	06 c0       	rjmp	.+12     	; 0x7436 <udd_ep_run+0xde>
    742a:	91 e0       	ldi	r25, 0x01	; 1
    742c:	a1 14       	cp	r10, r1
    742e:	b1 04       	cpc	r11, r1
    7430:	19 f0       	breq	.+6      	; 0x7438 <udd_ep_run+0xe0>
    7432:	90 e0       	ldi	r25, 0x00	; 0
    7434:	01 c0       	rjmp	.+2      	; 0x7438 <udd_ep_run+0xe0>
    7436:	91 e0       	ldi	r25, 0x01	; 1
    7438:	f6 01       	movw	r30, r12
    743a:	80 81       	ld	r24, Z
    743c:	90 fb       	bst	r25, 0
    743e:	81 f9       	bld	r24, 1
    7440:	8b 7f       	andi	r24, 0xFB	; 251
    7442:	80 83       	st	Z, r24
    7444:	22 23       	and	r18, r18
    7446:	64 f4       	brge	.+24     	; 0x7460 <udd_ep_run+0x108>
    7448:	f7 01       	movw	r30, r14
    744a:	ee 0f       	add	r30, r30
    744c:	ff 1f       	adc	r31, r31
    744e:	ee 0f       	add	r30, r30
    7450:	ff 1f       	adc	r31, r31
    7452:	ee 0f       	add	r30, r30
    7454:	ff 1f       	adc	r31, r31
    7456:	e8 52       	subi	r30, 0x28	; 40
    7458:	f8 4d       	sbci	r31, 0xD8	; 216
    745a:	12 8a       	std	Z+18, r1	; 0x12
    745c:	13 8a       	std	Z+19, r1	; 0x13
    745e:	30 c0       	rjmp	.+96     	; 0x74c0 <udd_ep_run+0x168>
    7460:	f7 01       	movw	r30, r14
    7462:	ee 0f       	add	r30, r30
    7464:	ff 1f       	adc	r31, r31
    7466:	ee 0f       	add	r30, r30
    7468:	ff 1f       	adc	r31, r31
    746a:	ee 0f       	add	r30, r30
    746c:	ff 1f       	adc	r31, r31
    746e:	e8 52       	subi	r30, 0x28	; 40
    7470:	f8 4d       	sbci	r31, 0xD8	; 216
    7472:	85 85       	ldd	r24, Z+13	; 0x0d
    7474:	80 7c       	andi	r24, 0xC0	; 192
    7476:	80 3c       	cpi	r24, 0xC0	; 192
    7478:	b1 f4       	brne	.+44     	; 0x74a6 <udd_ep_run+0x14e>
    747a:	c7 01       	movw	r24, r14
    747c:	88 0f       	add	r24, r24
    747e:	99 1f       	adc	r25, r25
    7480:	88 0f       	add	r24, r24
    7482:	99 1f       	adc	r25, r25
    7484:	88 0f       	add	r24, r24
    7486:	99 1f       	adc	r25, r25
    7488:	8c 51       	subi	r24, 0x1C	; 28
    748a:	98 4d       	sbci	r25, 0xD8	; 216
    748c:	88 db       	rcall	.-2288   	; 0x6b9e <udd_ep_get_size>
    748e:	bc 01       	movw	r22, r24
    7490:	c5 01       	movw	r24, r10
    7492:	0e 94 d6 53 	call	0xa7ac	; 0xa7ac <__udivmodhi4>
    7496:	89 2b       	or	r24, r25
    7498:	31 f0       	breq	.+12     	; 0x74a6 <udd_ep_run+0x14e>
    749a:	f6 01       	movw	r30, r12
    749c:	80 81       	ld	r24, Z
    749e:	8e 7f       	andi	r24, 0xFE	; 254
    74a0:	80 83       	st	Z, r24
    74a2:	80 e0       	ldi	r24, 0x00	; 0
    74a4:	14 c0       	rjmp	.+40     	; 0x74ce <udd_ep_run+0x176>
    74a6:	f7 01       	movw	r30, r14
    74a8:	ee 0f       	add	r30, r30
    74aa:	ff 1f       	adc	r31, r31
    74ac:	ee 0f       	add	r30, r30
    74ae:	ff 1f       	adc	r31, r31
    74b0:	ee 0f       	add	r30, r30
    74b2:	ff 1f       	adc	r31, r31
    74b4:	e8 52       	subi	r30, 0x28	; 40
    74b6:	f8 4d       	sbci	r31, 0xD8	; 216
    74b8:	16 86       	std	Z+14, r1	; 0x0e
    74ba:	17 86       	std	Z+15, r1	; 0x0f
    74bc:	12 8a       	std	Z+18, r1	; 0x12
    74be:	13 8a       	std	Z+19, r1	; 0x13
    74c0:	87 2d       	mov	r24, r7
    74c2:	23 dc       	rcall	.-1978   	; 0x6d0a <udd_ep_trans_complet>
    74c4:	81 e0       	ldi	r24, 0x01	; 1
    74c6:	03 c0       	rjmp	.+6      	; 0x74ce <udd_ep_run+0x176>
    74c8:	80 e0       	ldi	r24, 0x00	; 0
    74ca:	01 c0       	rjmp	.+2      	; 0x74ce <udd_ep_run+0x176>
    74cc:	80 e0       	ldi	r24, 0x00	; 0
    74ce:	0f 90       	pop	r0
    74d0:	df 91       	pop	r29
    74d2:	cf 91       	pop	r28
    74d4:	1f 91       	pop	r17
    74d6:	0f 91       	pop	r16
    74d8:	ff 90       	pop	r15
    74da:	ef 90       	pop	r14
    74dc:	df 90       	pop	r13
    74de:	cf 90       	pop	r12
    74e0:	bf 90       	pop	r11
    74e2:	af 90       	pop	r10
    74e4:	9f 90       	pop	r9
    74e6:	8f 90       	pop	r8
    74e8:	7f 90       	pop	r7
    74ea:	6f 90       	pop	r6
    74ec:	08 95       	ret

000074ee <udd_ep_abort>:
    74ee:	ff 92       	push	r15
    74f0:	0f 93       	push	r16
    74f2:	1f 93       	push	r17
    74f4:	cf 93       	push	r28
    74f6:	df 93       	push	r29
    74f8:	18 2f       	mov	r17, r24
    74fa:	c8 2f       	mov	r28, r24
    74fc:	cf 70       	andi	r28, 0x0F	; 15
    74fe:	d0 e0       	ldi	r29, 0x00	; 0
    7500:	ce 01       	movw	r24, r28
    7502:	88 0f       	add	r24, r24
    7504:	99 1f       	adc	r25, r25
    7506:	c1 2f       	mov	r28, r17
    7508:	01 2e       	mov	r0, r17
    750a:	00 0c       	add	r0, r0
    750c:	dd 0b       	sbc	r29, r29
    750e:	cc 27       	eor	r28, r28
    7510:	dd 0f       	add	r29, r29
    7512:	cc 1f       	adc	r28, r28
    7514:	dd 27       	eor	r29, r29
    7516:	c8 0f       	add	r28, r24
    7518:	d9 1f       	adc	r29, r25
    751a:	81 2f       	mov	r24, r17
    751c:	69 db       	rcall	.-2350   	; 0x6bf0 <udd_ep_get_job>
    751e:	dc 01       	movw	r26, r24
    7520:	fe 01       	movw	r30, r28
    7522:	ee 0f       	add	r30, r30
    7524:	ff 1f       	adc	r31, r31
    7526:	ee 0f       	add	r30, r30
    7528:	ff 1f       	adc	r31, r31
    752a:	ee 0f       	add	r30, r30
    752c:	ff 1f       	adc	r31, r31
    752e:	ec 51       	subi	r30, 0x1C	; 28
    7530:	f8 4d       	sbci	r31, 0xD8	; 216
    7532:	02 e0       	ldi	r16, 0x02	; 2
    7534:	05 93       	las	Z, r16
    7536:	8c 91       	ld	r24, X
    7538:	80 ff       	sbrs	r24, 0
    753a:	22 c0       	rjmp	.+68     	; 0x7580 <udd_ep_abort+0x92>
    753c:	8e 7f       	andi	r24, 0xFE	; 254
    753e:	8c 93       	st	X, r24
    7540:	17 96       	adiw	r26, 0x07	; 7
    7542:	ed 91       	ld	r30, X+
    7544:	fc 91       	ld	r31, X
    7546:	18 97       	sbiw	r26, 0x08	; 8
    7548:	30 97       	sbiw	r30, 0x00	; 0
    754a:	d1 f0       	breq	.+52     	; 0x7580 <udd_ep_abort+0x92>
    754c:	11 23       	and	r17, r17
    754e:	5c f4       	brge	.+22     	; 0x7566 <udd_ep_abort+0x78>
    7550:	cc 0f       	add	r28, r28
    7552:	dd 1f       	adc	r29, r29
    7554:	cc 0f       	add	r28, r28
    7556:	dd 1f       	adc	r29, r29
    7558:	cc 0f       	add	r28, r28
    755a:	dd 1f       	adc	r29, r29
    755c:	c8 52       	subi	r28, 0x28	; 40
    755e:	d8 4d       	sbci	r29, 0xD8	; 216
    7560:	6a 89       	ldd	r22, Y+18	; 0x12
    7562:	7b 89       	ldd	r23, Y+19	; 0x13
    7564:	0a c0       	rjmp	.+20     	; 0x757a <udd_ep_abort+0x8c>
    7566:	cc 0f       	add	r28, r28
    7568:	dd 1f       	adc	r29, r29
    756a:	cc 0f       	add	r28, r28
    756c:	dd 1f       	adc	r29, r29
    756e:	cc 0f       	add	r28, r28
    7570:	dd 1f       	adc	r29, r29
    7572:	c8 52       	subi	r28, 0x28	; 40
    7574:	d8 4d       	sbci	r29, 0xD8	; 216
    7576:	6e 85       	ldd	r22, Y+14	; 0x0e
    7578:	7f 85       	ldd	r23, Y+15	; 0x0f
    757a:	41 2f       	mov	r20, r17
    757c:	81 e0       	ldi	r24, 0x01	; 1
    757e:	19 95       	eicall
    7580:	df 91       	pop	r29
    7582:	cf 91       	pop	r28
    7584:	1f 91       	pop	r17
    7586:	0f 91       	pop	r16
    7588:	ff 90       	pop	r15
    758a:	08 95       	ret

0000758c <udd_ep_free>:
    758c:	cf 93       	push	r28
    758e:	c8 2f       	mov	r28, r24
    7590:	ae df       	rcall	.-164    	; 0x74ee <udd_ep_abort>
    7592:	ec 2f       	mov	r30, r28
    7594:	ef 70       	andi	r30, 0x0F	; 15
    7596:	f0 e0       	ldi	r31, 0x00	; 0
    7598:	ee 0f       	add	r30, r30
    759a:	ff 1f       	adc	r31, r31
    759c:	8c 2f       	mov	r24, r28
    759e:	cc 0f       	add	r28, r28
    75a0:	99 0b       	sbc	r25, r25
    75a2:	88 27       	eor	r24, r24
    75a4:	99 0f       	add	r25, r25
    75a6:	88 1f       	adc	r24, r24
    75a8:	99 27       	eor	r25, r25
    75aa:	e8 0f       	add	r30, r24
    75ac:	f9 1f       	adc	r31, r25
    75ae:	ee 0f       	add	r30, r30
    75b0:	ff 1f       	adc	r31, r31
    75b2:	ee 0f       	add	r30, r30
    75b4:	ff 1f       	adc	r31, r31
    75b6:	ee 0f       	add	r30, r30
    75b8:	ff 1f       	adc	r31, r31
    75ba:	e8 52       	subi	r30, 0x28	; 40
    75bc:	f8 4d       	sbci	r31, 0xD8	; 216
    75be:	15 86       	std	Z+13, r1	; 0x0d
    75c0:	cf 91       	pop	r28
    75c2:	08 95       	ret

000075c4 <udd_ep_set_halt>:
    75c4:	e8 2f       	mov	r30, r24
    75c6:	ef 70       	andi	r30, 0x0F	; 15
    75c8:	f0 e0       	ldi	r31, 0x00	; 0
    75ca:	ee 0f       	add	r30, r30
    75cc:	ff 1f       	adc	r31, r31
    75ce:	28 2f       	mov	r18, r24
    75d0:	08 2e       	mov	r0, r24
    75d2:	00 0c       	add	r0, r0
    75d4:	33 0b       	sbc	r19, r19
    75d6:	22 27       	eor	r18, r18
    75d8:	33 0f       	add	r19, r19
    75da:	22 1f       	adc	r18, r18
    75dc:	33 27       	eor	r19, r19
    75de:	e2 0f       	add	r30, r18
    75e0:	f3 1f       	adc	r31, r19
    75e2:	ee 0f       	add	r30, r30
    75e4:	ff 1f       	adc	r31, r31
    75e6:	ee 0f       	add	r30, r30
    75e8:	ff 1f       	adc	r31, r31
    75ea:	ee 0f       	add	r30, r30
    75ec:	ff 1f       	adc	r31, r31
    75ee:	e8 52       	subi	r30, 0x28	; 40
    75f0:	f8 4d       	sbci	r31, 0xD8	; 216
    75f2:	95 85       	ldd	r25, Z+13	; 0x0d
    75f4:	94 60       	ori	r25, 0x04	; 4
    75f6:	95 87       	std	Z+13, r25	; 0x0d
    75f8:	7a df       	rcall	.-268    	; 0x74ee <udd_ep_abort>
    75fa:	81 e0       	ldi	r24, 0x01	; 1
    75fc:	08 95       	ret

000075fe <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    75fe:	1f 92       	push	r1
    7600:	0f 92       	push	r0
    7602:	0f b6       	in	r0, 0x3f	; 63
    7604:	0f 92       	push	r0
    7606:	11 24       	eor	r1, r1
    7608:	0b b6       	in	r0, 0x3b	; 59
    760a:	0f 92       	push	r0
    760c:	0f 93       	push	r16
    760e:	2f 93       	push	r18
    7610:	3f 93       	push	r19
    7612:	4f 93       	push	r20
    7614:	5f 93       	push	r21
    7616:	6f 93       	push	r22
    7618:	7f 93       	push	r23
    761a:	8f 93       	push	r24
    761c:	9f 93       	push	r25
    761e:	af 93       	push	r26
    7620:	bf 93       	push	r27
    7622:	ef 93       	push	r30
    7624:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    7626:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    762a:	88 23       	and	r24, r24
    762c:	34 f4       	brge	.+12     	; 0x763a <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    762e:	80 e8       	ldi	r24, 0x80	; 128
    7630:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    7634:	0e 94 67 50 	call	0xa0ce	; 0xa0ce <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    7638:	88 c0       	rjmp	.+272    	; 0x774a <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    763a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    763e:	82 ff       	sbrs	r24, 2
    7640:	20 c0       	rjmp	.+64     	; 0x7682 <__vector_125+0x84>
		udd_ack_underflow_event();
    7642:	84 e0       	ldi	r24, 0x04	; 4
    7644:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    7648:	80 91 ec 27 	lds	r24, 0x27EC	; 0x8027ec <udd_sram+0x14>
    764c:	86 ff       	sbrs	r24, 6
    764e:	7d c0       	rjmp	.+250    	; 0x774a <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    7650:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    7654:	81 fd       	sbrc	r24, 1
    7656:	79 c0       	rjmp	.+242    	; 0x774a <__vector_125+0x14c>
    7658:	e6 da       	rcall	.-2612   	; 0x6c26 <udd_ctrl_interrupt_tc_setup>
    765a:	81 11       	cpse	r24, r1
    765c:	76 c0       	rjmp	.+236    	; 0x774a <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    765e:	80 91 d7 27 	lds	r24, 0x27D7	; 0x8027d7 <udd_ep_control_state>
    7662:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    7664:	11 f4       	brne	.+4      	; 0x766a <__vector_125+0x6c>
    7666:	19 da       	rcall	.-3022   	; 0x6a9a <udd_ctrl_send_zlp_in>
    7668:	70 c0       	rjmp	.+224    	; 0x774a <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    766a:	84 30       	cpi	r24, 0x04	; 4
    766c:	09 f0       	breq	.+2      	; 0x7670 <__vector_125+0x72>
    766e:	6d c0       	rjmp	.+218    	; 0x774a <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    7670:	ed ee       	ldi	r30, 0xED	; 237
    7672:	f7 e2       	ldi	r31, 0x27	; 39
    7674:	04 e0       	ldi	r16, 0x04	; 4
    7676:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    7678:	e5 ee       	ldi	r30, 0xE5	; 229
    767a:	f7 e2       	ldi	r31, 0x27	; 39
    767c:	04 e0       	ldi	r16, 0x04	; 4
    767e:	05 93       	las	Z, r16
    7680:	64 c0       	rjmp	.+200    	; 0x774a <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    7682:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    7686:	81 ff       	sbrs	r24, 1
    7688:	5b c0       	rjmp	.+182    	; 0x7740 <__vector_125+0x142>
		udd_ack_overflow_event();
    768a:	82 e0       	ldi	r24, 0x02	; 2
    768c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    7690:	80 91 e4 27 	lds	r24, 0x27E4	; 0x8027e4 <udd_sram+0xc>
    7694:	86 ff       	sbrs	r24, 6
    7696:	59 c0       	rjmp	.+178    	; 0x774a <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    7698:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    769c:	81 fd       	sbrc	r24, 1
    769e:	55 c0       	rjmp	.+170    	; 0x774a <__vector_125+0x14c>
    76a0:	c2 da       	rcall	.-2684   	; 0x6c26 <udd_ctrl_interrupt_tc_setup>
    76a2:	81 11       	cpse	r24, r1
    76a4:	52 c0       	rjmp	.+164    	; 0x774a <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    76a6:	80 91 d7 27 	lds	r24, 0x27D7	; 0x8027d7 <udd_ep_control_state>
    76aa:	82 30       	cpi	r24, 0x02	; 2
    76ac:	41 f4       	brne	.+16     	; 0x76be <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    76ae:	84 e0       	ldi	r24, 0x04	; 4
    76b0:	80 93 d7 27 	sts	0x27D7, r24	; 0x8027d7 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    76b4:	e4 ee       	ldi	r30, 0xE4	; 228
    76b6:	f7 e2       	ldi	r31, 0x27	; 39
    76b8:	02 e0       	ldi	r16, 0x02	; 2
    76ba:	06 93       	lac	Z, r16
    76bc:	46 c0       	rjmp	.+140    	; 0x774a <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    76be:	83 30       	cpi	r24, 0x03	; 3
    76c0:	09 f0       	breq	.+2      	; 0x76c4 <__vector_125+0xc6>
    76c2:	43 c0       	rjmp	.+134    	; 0x774a <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    76c4:	ed ee       	ldi	r30, 0xED	; 237
    76c6:	f7 e2       	ldi	r31, 0x27	; 39
    76c8:	04 e0       	ldi	r16, 0x04	; 4
    76ca:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    76cc:	e5 ee       	ldi	r30, 0xE5	; 229
    76ce:	f7 e2       	ldi	r31, 0x27	; 39
    76d0:	04 e0       	ldi	r16, 0x04	; 4
    76d2:	05 93       	las	Z, r16
    76d4:	3a c0       	rjmp	.+116    	; 0x774a <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    76d6:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    76d8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    76dc:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    76de:	07 df       	rcall	.-498    	; 0x74ee <udd_ep_abort>
    76e0:	81 e8       	ldi	r24, 0x81	; 129
    76e2:	05 df       	rcall	.-502    	; 0x74ee <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    76e4:	82 e0       	ldi	r24, 0x02	; 2
    76e6:	03 df       	rcall	.-506    	; 0x74ee <udd_ep_abort>
    76e8:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    76ea:	01 df       	rcall	.-510    	; 0x74ee <udd_ep_abort>
    76ec:	0e 94 3d 50 	call	0xa07a	; 0xa07a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    76f0:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    76f4:	e8 ed       	ldi	r30, 0xD8	; 216
    76f6:	f7 e2       	ldi	r31, 0x27	; 39
	udd_endpoint_clear_status(ep_ctrl);
    76f8:	15 86       	std	Z+13, r1	; 0x0d
    76fa:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    76fc:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    76fe:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    7700:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    7702:	15 8a       	std	Z+21, r1	; 0x15
    7704:	94 8b       	std	Z+20, r25	; 0x14
    7706:	85 8b       	std	Z+21, r24	; 0x15
    7708:	83 e9       	ldi	r24, 0x93	; 147
		// Reset endpoint control management
		udd_ctrl_init();
    770a:	97 e2       	ldi	r25, 0x27	; 39
    770c:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    770e:	91 8b       	std	Z+17, r25	; 0x11
    7710:	91 d9       	rcall	.-3294   	; 0x6a34 <udd_ctrl_init>
		udd_ack_suspend_event();
    7712:	1b c0       	rjmp	.+54     	; 0x774a <__vector_125+0x14c>
    7714:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    7718:	86 ff       	sbrs	r24, 6
    771a:	07 c0       	rjmp	.+14     	; 0x772a <__vector_125+0x12c>
    771c:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    771e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    7722:	80 e0       	ldi	r24, 0x00	; 0
    7724:	4f d9       	rcall	.-3426   	; 0x69c4 <udd_sleep_mode>
		udd_ack_resume_event();
    7726:	cb d5       	rcall	.+2966   	; 0x82be <usb_callback_suspend_action>
    7728:	10 c0       	rjmp	.+32     	; 0x774a <__vector_125+0x14c>
    772a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    772e:	85 ff       	sbrs	r24, 5
    7730:	0c c0       	rjmp	.+24     	; 0x774a <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    7732:	80 e2       	ldi	r24, 0x20	; 32
    7734:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    7738:	81 e0       	ldi	r24, 0x01	; 1
    773a:	44 d9       	rcall	.-3448   	; 0x69c4 <udd_sleep_mode>
    773c:	c1 d5       	rcall	.+2946   	; 0x82c0 <usb_callback_resume_action>
    773e:	05 c0       	rjmp	.+10     	; 0x774a <__vector_125+0x14c>
    7740:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    7744:	84 fd       	sbrc	r24, 4
    7746:	c7 cf       	rjmp	.-114    	; 0x76d6 <__vector_125+0xd8>
    7748:	e5 cf       	rjmp	.-54     	; 0x7714 <__vector_125+0x116>
    774a:	ff 91       	pop	r31
    774c:	ef 91       	pop	r30
    774e:	bf 91       	pop	r27
    7750:	af 91       	pop	r26
    7752:	9f 91       	pop	r25
    7754:	8f 91       	pop	r24
    7756:	7f 91       	pop	r23
    7758:	6f 91       	pop	r22
    775a:	5f 91       	pop	r21
    775c:	4f 91       	pop	r20
    775e:	3f 91       	pop	r19
    7760:	2f 91       	pop	r18
    7762:	0f 91       	pop	r16
    7764:	0f 90       	pop	r0
    7766:	0b be       	out	0x3b, r0	; 59
    7768:	0f 90       	pop	r0
    776a:	0f be       	out	0x3f, r0	; 63
    776c:	0f 90       	pop	r0
    776e:	1f 90       	pop	r1
    7770:	18 95       	reti

00007772 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    7772:	1f 92       	push	r1
    7774:	0f 92       	push	r0
    7776:	0f b6       	in	r0, 0x3f	; 63
    7778:	0f 92       	push	r0
    777a:	11 24       	eor	r1, r1
    777c:	0b b6       	in	r0, 0x3b	; 59
    777e:	0f 92       	push	r0
    7780:	0f 93       	push	r16
    7782:	1f 93       	push	r17
    7784:	2f 93       	push	r18
    7786:	3f 93       	push	r19
    7788:	4f 93       	push	r20
    778a:	5f 93       	push	r21
    778c:	6f 93       	push	r22
    778e:	7f 93       	push	r23
    7790:	8f 93       	push	r24
    7792:	9f 93       	push	r25
    7794:	af 93       	push	r26
    7796:	bf 93       	push	r27
    7798:	cf 93       	push	r28
    779a:	df 93       	push	r29
    779c:	ef 93       	push	r30
    779e:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    77a0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    77a4:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    77a6:	03 c0       	rjmp	.+6      	; 0x77ae <__vector_126+0x3c>
    77a8:	3e da       	rcall	.-2948   	; 0x6c26 <udd_ctrl_interrupt_tc_setup>
    77aa:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    77ac:	c4 c0       	rjmp	.+392    	; 0x7936 <__vector_126+0x1c4>
    77ae:	82 e0       	ldi	r24, 0x02	; 2
    77b0:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    77b4:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    77b8:	81 95       	neg	r24
    77ba:	88 0f       	add	r24, r24
    77bc:	e4 ee       	ldi	r30, 0xE4	; 228
    77be:	f7 e2       	ldi	r31, 0x27	; 39
    77c0:	e8 1b       	sub	r30, r24
    77c2:	f1 09       	sbc	r31, r1
    77c4:	20 81       	ld	r18, Z
    77c6:	31 81       	ldd	r19, Z+1	; 0x01
    77c8:	24 5e       	subi	r18, 0xE4	; 228
    77ca:	37 42       	sbci	r19, 0x27	; 39
    77cc:	36 95       	lsr	r19
    77ce:	27 95       	ror	r18
    77d0:	36 95       	lsr	r19
    77d2:	27 95       	ror	r18
    77d4:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    77d6:	27 95       	ror	r18
    77d8:	82 2f       	mov	r24, r18
    77da:	86 95       	lsr	r24
    77dc:	20 fd       	sbrc	r18, 0
    77de:	02 c0       	rjmp	.+4      	; 0x77e4 <__vector_126+0x72>
    77e0:	90 e0       	ldi	r25, 0x00	; 0
    77e2:	01 c0       	rjmp	.+2      	; 0x77e6 <__vector_126+0x74>
    77e4:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    77e6:	89 0f       	add	r24, r25
    77e8:	e8 2f       	mov	r30, r24
    77ea:	ef 70       	andi	r30, 0x0F	; 15
    77ec:	f0 e0       	ldi	r31, 0x00	; 0
    77ee:	ee 0f       	add	r30, r30
    77f0:	ff 1f       	adc	r31, r31
    77f2:	28 2f       	mov	r18, r24
    77f4:	08 2e       	mov	r0, r24
    77f6:	00 0c       	add	r0, r0
    77f8:	33 0b       	sbc	r19, r19
    77fa:	22 27       	eor	r18, r18
    77fc:	33 0f       	add	r19, r19
    77fe:	22 1f       	adc	r18, r18
    7800:	33 27       	eor	r19, r19
    7802:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    7804:	f3 1f       	adc	r31, r19
    7806:	df 01       	movw	r26, r30
    7808:	aa 0f       	add	r26, r26
    780a:	bb 1f       	adc	r27, r27
    780c:	aa 0f       	add	r26, r26
    780e:	bb 1f       	adc	r27, r27
    7810:	aa 0f       	add	r26, r26
    7812:	bb 1f       	adc	r27, r27
    7814:	a8 52       	subi	r26, 0x28	; 40
    7816:	b8 4d       	sbci	r27, 0xD8	; 216
    7818:	1c 96       	adiw	r26, 0x0c	; 12
    781a:	9c 91       	ld	r25, X
    781c:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    781e:	8b c0       	rjmp	.+278    	; 0x7936 <__vector_126+0x1c4>
    7820:	ee 0f       	add	r30, r30
    7822:	ff 1f       	adc	r31, r31
    7824:	ee 0f       	add	r30, r30
    7826:	ff 1f       	adc	r31, r31
    7828:	ee 0f       	add	r30, r30
    782a:	ff 1f       	adc	r31, r31
    782c:	ec 51       	subi	r30, 0x1C	; 28
    782e:	f8 4d       	sbci	r31, 0xD8	; 216
    7830:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    7832:	06 93       	lac	Z, r16
    7834:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    7836:	7a c0       	rjmp	.+244    	; 0x792c <__vector_126+0x1ba>
    7838:	80 91 d7 27 	lds	r24, 0x27D7	; 0x8027d7 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    783c:	84 30       	cpi	r24, 0x04	; 4
    783e:	19 f4       	brne	.+6      	; 0x7846 <__vector_126+0xd4>
    7840:	3a d9       	rcall	.-3468   	; 0x6ab6 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    7842:	f8 d8       	rcall	.-3600   	; 0x6a34 <udd_ctrl_init>
    7844:	78 c0       	rjmp	.+240    	; 0x7936 <__vector_126+0x1c4>
    7846:	00 91 e6 27 	lds	r16, 0x27E6	; 0x8027e6 <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    784a:	10 91 e7 27 	lds	r17, 0x27E7	; 0x8027e7 <udd_sram+0xf>
    784e:	80 91 df 2a 	lds	r24, 0x2ADF	; 0x802adf <udd_g_ctrlreq+0xa>
    7852:	90 91 e0 2a 	lds	r25, 0x2AE0	; 0x802ae0 <udd_g_ctrlreq+0xb>
    7856:	c0 91 d3 27 	lds	r28, 0x27D3	; 0x8027d3 <udd_ctrl_payload_nb_trans>
    785a:	d0 91 d4 27 	lds	r29, 0x27D4	; 0x8027d4 <udd_ctrl_payload_nb_trans+0x1>
    785e:	98 01       	movw	r18, r16
    7860:	2c 0f       	add	r18, r28
    7862:	3d 1f       	adc	r19, r29
    7864:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    7866:	93 07       	cpc	r25, r19
    7868:	18 f4       	brcc	.+6      	; 0x7870 <__vector_126+0xfe>
    786a:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    786c:	0c 1b       	sub	r16, r28
    786e:	1d 0b       	sbc	r17, r29
    7870:	80 91 dd 2a 	lds	r24, 0x2ADD	; 0x802add <udd_g_ctrlreq+0x8>
    7874:	90 91 de 2a 	lds	r25, 0x2ADE	; 0x802ade <udd_g_ctrlreq+0x9>
    7878:	a8 01       	movw	r20, r16
    787a:	63 e9       	ldi	r22, 0x93	; 147
    787c:	77 e2       	ldi	r23, 0x27	; 39
    787e:	8c 0f       	add	r24, r28
    7880:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    7882:	0e 94 47 58 	call	0xb08e	; 0xb08e <memcpy>
    7886:	c0 0f       	add	r28, r16
    7888:	d1 1f       	adc	r29, r17
    788a:	c0 93 d3 27 	sts	0x27D3, r28	; 0x8027d3 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    788e:	d0 93 d4 27 	sts	0x27D4, r29	; 0x8027d4 <udd_ctrl_payload_nb_trans+0x1>
    7892:	00 34       	cpi	r16, 0x40	; 64
    7894:	11 05       	cpc	r17, r1
    7896:	69 f4       	brne	.+26     	; 0x78b2 <__vector_126+0x140>
    7898:	80 91 d5 27 	lds	r24, 0x27D5	; 0x8027d5 <udd_ctrl_prev_payload_nb_trans>
    789c:	90 91 d6 27 	lds	r25, 0x27D6	; 0x8027d6 <udd_ctrl_prev_payload_nb_trans+0x1>
    78a0:	8c 0f       	add	r24, r28
    78a2:	9d 1f       	adc	r25, r29
    78a4:	20 91 db 2a 	lds	r18, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    78a8:	30 91 dc 2a 	lds	r19, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    78ac:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    78ae:	93 07       	cpc	r25, r19
    78b0:	80 f0       	brcs	.+32     	; 0x78d2 <__vector_126+0x160>
    78b2:	e5 ed       	ldi	r30, 0xD5	; 213
    78b4:	fa e2       	ldi	r31, 0x2A	; 42
		if (NULL != udd_g_ctrlreq.over_under_run) {
    78b6:	c2 87       	std	Z+10, r28	; 0x0a
    78b8:	d3 87       	std	Z+11, r29	; 0x0b
    78ba:	06 84       	ldd	r0, Z+14	; 0x0e
    78bc:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    78be:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    78c0:	30 97       	sbiw	r30, 0x00	; 0
    78c2:	29 f0       	breq	.+10     	; 0x78ce <__vector_126+0x15c>
    78c4:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    78c6:	81 11       	cpse	r24, r1
    78c8:	02 c0       	rjmp	.+4      	; 0x78ce <__vector_126+0x15c>
    78ca:	d9 d8       	rcall	.-3662   	; 0x6a7e <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    78cc:	34 c0       	rjmp	.+104    	; 0x7936 <__vector_126+0x1c4>
    78ce:	e5 d8       	rcall	.-3638   	; 0x6a9a <udd_ctrl_send_zlp_in>
    78d0:	32 c0       	rjmp	.+100    	; 0x7936 <__vector_126+0x1c4>
    78d2:	80 91 df 2a 	lds	r24, 0x2ADF	; 0x802adf <udd_g_ctrlreq+0xa>
    78d6:	90 91 e0 2a 	lds	r25, 0x2AE0	; 0x802ae0 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    78da:	c8 17       	cp	r28, r24
    78dc:	d9 07       	cpc	r29, r25
    78de:	f9 f4       	brne	.+62     	; 0x791e <__vector_126+0x1ac>
    78e0:	e0 91 e3 2a 	lds	r30, 0x2AE3	; 0x802ae3 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    78e4:	f0 91 e4 2a 	lds	r31, 0x2AE4	; 0x802ae4 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    78e8:	30 97       	sbiw	r30, 0x00	; 0
    78ea:	11 f4       	brne	.+4      	; 0x78f0 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    78ec:	c8 d8       	rcall	.-3696   	; 0x6a7e <udd_ctrl_stall_data>
    78ee:	23 c0       	rjmp	.+70     	; 0x7936 <__vector_126+0x1c4>
    78f0:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    78f2:	81 11       	cpse	r24, r1
    78f4:	02 c0       	rjmp	.+4      	; 0x78fa <__vector_126+0x188>
    78f6:	c3 d8       	rcall	.-3706   	; 0x6a7e <udd_ctrl_stall_data>
    78f8:	1e c0       	rjmp	.+60     	; 0x7936 <__vector_126+0x1c4>
    78fa:	20 91 d5 27 	lds	r18, 0x27D5	; 0x8027d5 <udd_ctrl_prev_payload_nb_trans>
    78fe:	30 91 d6 27 	lds	r19, 0x27D6	; 0x8027d6 <udd_ctrl_prev_payload_nb_trans+0x1>
    7902:	80 91 d3 27 	lds	r24, 0x27D3	; 0x8027d3 <udd_ctrl_payload_nb_trans>
    7906:	90 91 d4 27 	lds	r25, 0x27D4	; 0x8027d4 <udd_ctrl_payload_nb_trans+0x1>
    790a:	82 0f       	add	r24, r18
    790c:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    790e:	80 93 d5 27 	sts	0x27D5, r24	; 0x8027d5 <udd_ctrl_prev_payload_nb_trans>
    7912:	90 93 d6 27 	sts	0x27D6, r25	; 0x8027d6 <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    7916:	10 92 d3 27 	sts	0x27D3, r1	; 0x8027d3 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    791a:	10 92 d4 27 	sts	0x27D4, r1	; 0x8027d4 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    791e:	e4 ee       	ldi	r30, 0xE4	; 228
    7920:	f7 e2       	ldi	r31, 0x27	; 39
		udd_ctrl_in_sent();
    7922:	02 e0       	ldi	r16, 0x02	; 2
    7924:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    7926:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    7928:	06 93       	lac	Z, r16
    792a:	05 c0       	rjmp	.+10     	; 0x7936 <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    792c:	80 38       	cpi	r24, 0x80	; 128
    792e:	11 f4       	brne	.+4      	; 0x7934 <__vector_126+0x1c2>
    7930:	ca d8       	rcall	.-3692   	; 0x6ac6 <udd_ctrl_in_sent>
    7932:	01 c0       	rjmp	.+2      	; 0x7936 <__vector_126+0x1c4>
    7934:	ea d9       	rcall	.-3116   	; 0x6d0a <udd_ep_trans_complet>
    7936:	ff 91       	pop	r31
    7938:	ef 91       	pop	r30
    793a:	df 91       	pop	r29
    793c:	cf 91       	pop	r28
    793e:	bf 91       	pop	r27
    7940:	af 91       	pop	r26
    7942:	9f 91       	pop	r25
    7944:	8f 91       	pop	r24
    7946:	7f 91       	pop	r23
    7948:	6f 91       	pop	r22
    794a:	5f 91       	pop	r21
    794c:	4f 91       	pop	r20
    794e:	3f 91       	pop	r19
    7950:	2f 91       	pop	r18
    7952:	1f 91       	pop	r17
    7954:	0f 91       	pop	r16
    7956:	0f 90       	pop	r0
    7958:	0b be       	out	0x3b, r0	; 59
    795a:	0f 90       	pop	r0
    795c:	0f be       	out	0x3f, r0	; 63
    795e:	0f 90       	pop	r0
    7960:	1f 90       	pop	r1
    7962:	18 95       	reti

00007964 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    7964:	cf 92       	push	r12
    7966:	df 92       	push	r13
    7968:	ef 92       	push	r14
    796a:	ff 92       	push	r15
    796c:	cf 93       	push	r28
    796e:	df 93       	push	r29
    7970:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    7972:	6b 01       	movw	r12, r22
    7974:	e1 2c       	mov	r14, r1
    7976:	f1 2c       	mov	r15, r1
    7978:	60 e8       	ldi	r22, 0x80	; 128
    797a:	73 ec       	ldi	r23, 0xC3	; 195
    797c:	89 ec       	ldi	r24, 0xC9	; 201
    797e:	91 e0       	ldi	r25, 0x01	; 1
    7980:	a7 01       	movw	r20, r14
    7982:	96 01       	movw	r18, r12
    7984:	0e 94 fd 53 	call	0xa7fa	; 0xa7fa <__udivmodsi4>
    7988:	ca 01       	movw	r24, r20
    798a:	b9 01       	movw	r22, r18
    798c:	2f ef       	ldi	r18, 0xFF	; 255
    798e:	3f ef       	ldi	r19, 0xFF	; 255
    7990:	40 e0       	ldi	r20, 0x00	; 0
    7992:	50 e0       	ldi	r21, 0x00	; 0
    7994:	0e 94 fd 53 	call	0xa7fa	; 0xa7fa <__udivmodsi4>
	if (smallest_div < 1) {
    7998:	21 15       	cp	r18, r1
    799a:	31 05       	cpc	r19, r1
    799c:	29 f4       	brne	.+10     	; 0x79a8 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    799e:	81 e0       	ldi	r24, 0x01	; 1
    79a0:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    79a2:	21 e0       	ldi	r18, 0x01	; 1
    79a4:	30 e0       	ldi	r19, 0x00	; 0
    79a6:	2d c0       	rjmp	.+90     	; 0x7a02 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    79a8:	22 30       	cpi	r18, 0x02	; 2
    79aa:	31 05       	cpc	r19, r1
    79ac:	28 f4       	brcc	.+10     	; 0x79b8 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    79ae:	82 e0       	ldi	r24, 0x02	; 2
    79b0:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    79b2:	22 e0       	ldi	r18, 0x02	; 2
    79b4:	30 e0       	ldi	r19, 0x00	; 0
    79b6:	25 c0       	rjmp	.+74     	; 0x7a02 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    79b8:	24 30       	cpi	r18, 0x04	; 4
    79ba:	31 05       	cpc	r19, r1
    79bc:	28 f4       	brcc	.+10     	; 0x79c8 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    79be:	83 e0       	ldi	r24, 0x03	; 3
    79c0:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    79c2:	24 e0       	ldi	r18, 0x04	; 4
    79c4:	30 e0       	ldi	r19, 0x00	; 0
    79c6:	1d c0       	rjmp	.+58     	; 0x7a02 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    79c8:	28 30       	cpi	r18, 0x08	; 8
    79ca:	31 05       	cpc	r19, r1
    79cc:	28 f4       	brcc	.+10     	; 0x79d8 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    79ce:	84 e0       	ldi	r24, 0x04	; 4
    79d0:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    79d2:	28 e0       	ldi	r18, 0x08	; 8
    79d4:	30 e0       	ldi	r19, 0x00	; 0
    79d6:	15 c0       	rjmp	.+42     	; 0x7a02 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    79d8:	20 34       	cpi	r18, 0x40	; 64
    79da:	31 05       	cpc	r19, r1
    79dc:	28 f4       	brcc	.+10     	; 0x79e8 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    79de:	85 e0       	ldi	r24, 0x05	; 5
    79e0:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    79e2:	20 e4       	ldi	r18, 0x40	; 64
    79e4:	30 e0       	ldi	r19, 0x00	; 0
    79e6:	0d c0       	rjmp	.+26     	; 0x7a02 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    79e8:	2f 3f       	cpi	r18, 0xFF	; 255
    79ea:	31 05       	cpc	r19, r1
    79ec:	09 f0       	breq	.+2      	; 0x79f0 <pwm_set_frequency+0x8c>
    79ee:	28 f4       	brcc	.+10     	; 0x79fa <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    79f0:	86 e0       	ldi	r24, 0x06	; 6
    79f2:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    79f4:	20 e0       	ldi	r18, 0x00	; 0
    79f6:	31 e0       	ldi	r19, 0x01	; 1
    79f8:	04 c0       	rjmp	.+8      	; 0x7a02 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    79fa:	87 e0       	ldi	r24, 0x07	; 7
    79fc:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    79fe:	20 e0       	ldi	r18, 0x00	; 0
    7a00:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    7a02:	40 e0       	ldi	r20, 0x00	; 0
    7a04:	50 e0       	ldi	r21, 0x00	; 0
    7a06:	60 e8       	ldi	r22, 0x80	; 128
    7a08:	73 ec       	ldi	r23, 0xC3	; 195
    7a0a:	89 ec       	ldi	r24, 0xC9	; 201
    7a0c:	91 e0       	ldi	r25, 0x01	; 1
    7a0e:	0e 94 fd 53 	call	0xa7fa	; 0xa7fa <__udivmodsi4>
    7a12:	ca 01       	movw	r24, r20
    7a14:	b9 01       	movw	r22, r18
    7a16:	a7 01       	movw	r20, r14
    7a18:	96 01       	movw	r18, r12
    7a1a:	0e 94 fd 53 	call	0xa7fa	; 0xa7fa <__udivmodsi4>
    7a1e:	2d 83       	std	Y+5, r18	; 0x05
    7a20:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    7a22:	24 36       	cpi	r18, 0x64	; 100
    7a24:	31 05       	cpc	r19, r1
    7a26:	18 f4       	brcc	.+6      	; 0x7a2e <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    7a28:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    7a2a:	1d 82       	std	Y+5, r1	; 0x05
    7a2c:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    7a2e:	df 91       	pop	r29
    7a30:	cf 91       	pop	r28
    7a32:	ff 90       	pop	r15
    7a34:	ef 90       	pop	r14
    7a36:	df 90       	pop	r13
    7a38:	cf 90       	pop	r12
    7a3a:	08 95       	ret

00007a3c <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    7a3c:	0f 93       	push	r16
    7a3e:	1f 93       	push	r17
    7a40:	cf 93       	push	r28
    7a42:	df 93       	push	r29
    7a44:	ec 01       	movw	r28, r24
    7a46:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    7a48:	86 2f       	mov	r24, r22
    7a4a:	90 e0       	ldi	r25, 0x00	; 0
    7a4c:	87 30       	cpi	r24, 0x07	; 7
    7a4e:	91 05       	cpc	r25, r1
    7a50:	08 f0       	brcs	.+2      	; 0x7a54 <pwm_init+0x18>
    7a52:	8b c0       	rjmp	.+278    	; 0x7b6a <pwm_init+0x12e>
    7a54:	fc 01       	movw	r30, r24
    7a56:	88 27       	eor	r24, r24
    7a58:	eb 5f       	subi	r30, 0xFB	; 251
    7a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    7a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    7a5e:	0c 94 3b 54 	jmp	0xa876	; 0xa876 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    7a62:	80 e0       	ldi	r24, 0x00	; 0
    7a64:	98 e0       	ldi	r25, 0x08	; 8
    7a66:	88 83       	st	Y, r24
    7a68:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    7a6a:	e0 e4       	ldi	r30, 0x40	; 64
    7a6c:	f6 e0       	ldi	r31, 0x06	; 6
    7a6e:	30 81       	ld	r19, Z
    7a70:	81 e0       	ldi	r24, 0x01	; 1
    7a72:	90 e0       	ldi	r25, 0x00	; 0
    7a74:	2f ef       	ldi	r18, 0xFF	; 255
    7a76:	24 0f       	add	r18, r20
    7a78:	02 c0       	rjmp	.+4      	; 0x7a7e <pwm_init+0x42>
    7a7a:	88 0f       	add	r24, r24
    7a7c:	99 1f       	adc	r25, r25
    7a7e:	2a 95       	dec	r18
    7a80:	e2 f7       	brpl	.-8      	; 0x7a7a <pwm_init+0x3e>
    7a82:	83 2b       	or	r24, r19
    7a84:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    7a86:	71 c0       	rjmp	.+226    	; 0x7b6a <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    7a88:	80 e4       	ldi	r24, 0x40	; 64
    7a8a:	98 e0       	ldi	r25, 0x08	; 8
    7a8c:	88 83       	st	Y, r24
    7a8e:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    7a90:	e0 e4       	ldi	r30, 0x40	; 64
    7a92:	f6 e0       	ldi	r31, 0x06	; 6
    7a94:	30 81       	ld	r19, Z
    7a96:	81 e0       	ldi	r24, 0x01	; 1
    7a98:	90 e0       	ldi	r25, 0x00	; 0
    7a9a:	23 e0       	ldi	r18, 0x03	; 3
    7a9c:	24 0f       	add	r18, r20
    7a9e:	02 c0       	rjmp	.+4      	; 0x7aa4 <pwm_init+0x68>
    7aa0:	88 0f       	add	r24, r24
    7aa2:	99 1f       	adc	r25, r25
    7aa4:	2a 95       	dec	r18
    7aa6:	e2 f7       	brpl	.-8      	; 0x7aa0 <pwm_init+0x64>
    7aa8:	83 2b       	or	r24, r19
    7aaa:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    7aac:	5e c0       	rjmp	.+188    	; 0x7b6a <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    7aae:	80 e0       	ldi	r24, 0x00	; 0
    7ab0:	99 e0       	ldi	r25, 0x09	; 9
    7ab2:	88 83       	st	Y, r24
    7ab4:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    7ab6:	e0 e6       	ldi	r30, 0x60	; 96
    7ab8:	f6 e0       	ldi	r31, 0x06	; 6
    7aba:	30 81       	ld	r19, Z
    7abc:	81 e0       	ldi	r24, 0x01	; 1
    7abe:	90 e0       	ldi	r25, 0x00	; 0
    7ac0:	2f ef       	ldi	r18, 0xFF	; 255
    7ac2:	24 0f       	add	r18, r20
    7ac4:	02 c0       	rjmp	.+4      	; 0x7aca <pwm_init+0x8e>
    7ac6:	88 0f       	add	r24, r24
    7ac8:	99 1f       	adc	r25, r25
    7aca:	2a 95       	dec	r18
    7acc:	e2 f7       	brpl	.-8      	; 0x7ac6 <pwm_init+0x8a>
    7ace:	83 2b       	or	r24, r19
    7ad0:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    7ad2:	4b c0       	rjmp	.+150    	; 0x7b6a <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    7ad4:	80 e4       	ldi	r24, 0x40	; 64
    7ad6:	99 e0       	ldi	r25, 0x09	; 9
    7ad8:	88 83       	st	Y, r24
    7ada:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    7adc:	e0 e6       	ldi	r30, 0x60	; 96
    7ade:	f6 e0       	ldi	r31, 0x06	; 6
    7ae0:	30 81       	ld	r19, Z
    7ae2:	81 e0       	ldi	r24, 0x01	; 1
    7ae4:	90 e0       	ldi	r25, 0x00	; 0
    7ae6:	23 e0       	ldi	r18, 0x03	; 3
    7ae8:	24 0f       	add	r18, r20
    7aea:	02 c0       	rjmp	.+4      	; 0x7af0 <pwm_init+0xb4>
    7aec:	88 0f       	add	r24, r24
    7aee:	99 1f       	adc	r25, r25
    7af0:	2a 95       	dec	r18
    7af2:	e2 f7       	brpl	.-8      	; 0x7aec <pwm_init+0xb0>
    7af4:	83 2b       	or	r24, r19
    7af6:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    7af8:	38 c0       	rjmp	.+112    	; 0x7b6a <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    7afa:	80 e0       	ldi	r24, 0x00	; 0
    7afc:	9a e0       	ldi	r25, 0x0A	; 10
    7afe:	88 83       	st	Y, r24
    7b00:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    7b02:	e0 e8       	ldi	r30, 0x80	; 128
    7b04:	f6 e0       	ldi	r31, 0x06	; 6
    7b06:	30 81       	ld	r19, Z
    7b08:	81 e0       	ldi	r24, 0x01	; 1
    7b0a:	90 e0       	ldi	r25, 0x00	; 0
    7b0c:	2f ef       	ldi	r18, 0xFF	; 255
    7b0e:	24 0f       	add	r18, r20
    7b10:	02 c0       	rjmp	.+4      	; 0x7b16 <pwm_init+0xda>
    7b12:	88 0f       	add	r24, r24
    7b14:	99 1f       	adc	r25, r25
    7b16:	2a 95       	dec	r18
    7b18:	e2 f7       	brpl	.-8      	; 0x7b12 <pwm_init+0xd6>
    7b1a:	83 2b       	or	r24, r19
    7b1c:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    7b1e:	25 c0       	rjmp	.+74     	; 0x7b6a <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    7b20:	80 e4       	ldi	r24, 0x40	; 64
    7b22:	9a e0       	ldi	r25, 0x0A	; 10
    7b24:	88 83       	st	Y, r24
    7b26:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    7b28:	e0 e8       	ldi	r30, 0x80	; 128
    7b2a:	f6 e0       	ldi	r31, 0x06	; 6
    7b2c:	30 81       	ld	r19, Z
    7b2e:	81 e0       	ldi	r24, 0x01	; 1
    7b30:	90 e0       	ldi	r25, 0x00	; 0
    7b32:	23 e0       	ldi	r18, 0x03	; 3
    7b34:	24 0f       	add	r18, r20
    7b36:	02 c0       	rjmp	.+4      	; 0x7b3c <pwm_init+0x100>
    7b38:	88 0f       	add	r24, r24
    7b3a:	99 1f       	adc	r25, r25
    7b3c:	2a 95       	dec	r18
    7b3e:	e2 f7       	brpl	.-8      	; 0x7b38 <pwm_init+0xfc>
    7b40:	83 2b       	or	r24, r19
    7b42:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    7b44:	12 c0       	rjmp	.+36     	; 0x7b6a <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    7b46:	80 e0       	ldi	r24, 0x00	; 0
    7b48:	9b e0       	ldi	r25, 0x0B	; 11
    7b4a:	88 83       	st	Y, r24
    7b4c:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    7b4e:	e0 ea       	ldi	r30, 0xA0	; 160
    7b50:	f6 e0       	ldi	r31, 0x06	; 6
    7b52:	30 81       	ld	r19, Z
    7b54:	81 e0       	ldi	r24, 0x01	; 1
    7b56:	90 e0       	ldi	r25, 0x00	; 0
    7b58:	2f ef       	ldi	r18, 0xFF	; 255
    7b5a:	24 0f       	add	r18, r20
    7b5c:	02 c0       	rjmp	.+4      	; 0x7b62 <pwm_init+0x126>
    7b5e:	88 0f       	add	r24, r24
    7b60:	99 1f       	adc	r25, r25
    7b62:	2a 95       	dec	r18
    7b64:	e2 f7       	brpl	.-8      	; 0x7b5e <pwm_init+0x122>
    7b66:	83 2b       	or	r24, r19
    7b68:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    7b6a:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    7b6c:	42 30       	cpi	r20, 0x02	; 2
    7b6e:	61 f0       	breq	.+24     	; 0x7b88 <pwm_init+0x14c>
    7b70:	18 f4       	brcc	.+6      	; 0x7b78 <pwm_init+0x13c>
    7b72:	41 30       	cpi	r20, 0x01	; 1
    7b74:	31 f0       	breq	.+12     	; 0x7b82 <pwm_init+0x146>
    7b76:	10 c0       	rjmp	.+32     	; 0x7b98 <pwm_init+0x15c>
    7b78:	43 30       	cpi	r20, 0x03	; 3
    7b7a:	49 f0       	breq	.+18     	; 0x7b8e <pwm_init+0x152>
    7b7c:	44 30       	cpi	r20, 0x04	; 4
    7b7e:	51 f0       	breq	.+20     	; 0x7b94 <pwm_init+0x158>
    7b80:	0b c0       	rjmp	.+22     	; 0x7b98 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    7b82:	80 e1       	ldi	r24, 0x10	; 16
    7b84:	8b 83       	std	Y+3, r24	; 0x03
		break;
    7b86:	08 c0       	rjmp	.+16     	; 0x7b98 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    7b88:	80 e2       	ldi	r24, 0x20	; 32
    7b8a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    7b8c:	05 c0       	rjmp	.+10     	; 0x7b98 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    7b8e:	80 e4       	ldi	r24, 0x40	; 64
    7b90:	8b 83       	std	Y+3, r24	; 0x03
		break;
    7b92:	02 c0       	rjmp	.+4      	; 0x7b98 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    7b94:	80 e8       	ldi	r24, 0x80	; 128
    7b96:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    7b98:	88 81       	ld	r24, Y
    7b9a:	99 81       	ldd	r25, Y+1	; 0x01
    7b9c:	0e 94 c7 32 	call	0x658e	; 0x658e <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    7ba0:	e8 81       	ld	r30, Y
    7ba2:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    7ba4:	81 81       	ldd	r24, Z+1	; 0x01
    7ba6:	88 7f       	andi	r24, 0xF8	; 248
    7ba8:	83 60       	ori	r24, 0x03	; 3
    7baa:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    7bac:	1d 82       	std	Y+5, r1	; 0x05
    7bae:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    7bb0:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    7bb2:	e8 81       	ld	r30, Y
    7bb4:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    7bb6:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    7bb8:	80 7f       	andi	r24, 0xF0	; 240
    7bba:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    7bbc:	b8 01       	movw	r22, r16
    7bbe:	ce 01       	movw	r24, r28
    7bc0:	d1 de       	rcall	.-606    	; 0x7964 <pwm_set_frequency>
}
    7bc2:	df 91       	pop	r29
    7bc4:	cf 91       	pop	r28
    7bc6:	1f 91       	pop	r17
    7bc8:	0f 91       	pop	r16
    7bca:	08 95       	ret

00007bcc <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    7bcc:	cf 93       	push	r28
    7bce:	df 93       	push	r29
    7bd0:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    7bd2:	2d 81       	ldd	r18, Y+5	; 0x05
    7bd4:	3e 81       	ldd	r19, Y+6	; 0x06
    7bd6:	a6 2f       	mov	r26, r22
    7bd8:	b0 e0       	ldi	r27, 0x00	; 0
    7bda:	0e 94 49 54 	call	0xa892	; 0xa892 <__umulhisi3>
    7bde:	24 e6       	ldi	r18, 0x64	; 100
    7be0:	30 e0       	ldi	r19, 0x00	; 0
    7be2:	40 e0       	ldi	r20, 0x00	; 0
    7be4:	50 e0       	ldi	r21, 0x00	; 0
    7be6:	0e 94 fd 53 	call	0xa7fa	; 0xa7fa <__udivmodsi4>
    7bea:	8a 81       	ldd	r24, Y+2	; 0x02
    7bec:	e8 81       	ld	r30, Y
    7bee:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    7bf0:	e6 fd       	sbrc	r30, 6
    7bf2:	17 c0       	rjmp	.+46     	; 0x7c22 <pwm_start+0x56>
		switch (channel_index) {
    7bf4:	82 30       	cpi	r24, 0x02	; 2
    7bf6:	61 f0       	breq	.+24     	; 0x7c10 <pwm_start+0x44>
    7bf8:	18 f4       	brcc	.+6      	; 0x7c00 <pwm_start+0x34>
    7bfa:	81 30       	cpi	r24, 0x01	; 1
    7bfc:	31 f0       	breq	.+12     	; 0x7c0a <pwm_start+0x3e>
    7bfe:	1b c0       	rjmp	.+54     	; 0x7c36 <pwm_start+0x6a>
    7c00:	83 30       	cpi	r24, 0x03	; 3
    7c02:	49 f0       	breq	.+18     	; 0x7c16 <pwm_start+0x4a>
    7c04:	84 30       	cpi	r24, 0x04	; 4
    7c06:	51 f0       	breq	.+20     	; 0x7c1c <pwm_start+0x50>
    7c08:	16 c0       	rjmp	.+44     	; 0x7c36 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    7c0a:	20 af       	std	Z+56, r18	; 0x38
    7c0c:	31 af       	std	Z+57, r19	; 0x39
    7c0e:	13 c0       	rjmp	.+38     	; 0x7c36 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    7c10:	22 af       	std	Z+58, r18	; 0x3a
    7c12:	33 af       	std	Z+59, r19	; 0x3b
    7c14:	10 c0       	rjmp	.+32     	; 0x7c36 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    7c16:	24 af       	std	Z+60, r18	; 0x3c
    7c18:	35 af       	std	Z+61, r19	; 0x3d
    7c1a:	0d c0       	rjmp	.+26     	; 0x7c36 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    7c1c:	26 af       	std	Z+62, r18	; 0x3e
    7c1e:	37 af       	std	Z+63, r19	; 0x3f
    7c20:	0a c0       	rjmp	.+20     	; 0x7c36 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    7c22:	81 30       	cpi	r24, 0x01	; 1
    7c24:	19 f0       	breq	.+6      	; 0x7c2c <pwm_start+0x60>
    7c26:	82 30       	cpi	r24, 0x02	; 2
    7c28:	21 f0       	breq	.+8      	; 0x7c32 <pwm_start+0x66>
    7c2a:	05 c0       	rjmp	.+10     	; 0x7c36 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    7c2c:	20 af       	std	Z+56, r18	; 0x38
    7c2e:	31 af       	std	Z+57, r19	; 0x39
    7c30:	02 c0       	rjmp	.+4      	; 0x7c36 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    7c32:	22 af       	std	Z+58, r18	; 0x3a
    7c34:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    7c36:	8d 81       	ldd	r24, Y+5	; 0x05
    7c38:	9e 81       	ldd	r25, Y+6	; 0x06
    7c3a:	e8 81       	ld	r30, Y
    7c3c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    7c3e:	86 a3       	std	Z+38, r24	; 0x26
    7c40:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    7c42:	8b 81       	ldd	r24, Y+3	; 0x03
    7c44:	e8 81       	ld	r30, Y
    7c46:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    7c48:	e6 fd       	sbrc	r30, 6
    7c4a:	04 c0       	rjmp	.+8      	; 0x7c54 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    7c4c:	91 81       	ldd	r25, Z+1	; 0x01
    7c4e:	89 2b       	or	r24, r25
    7c50:	81 83       	std	Z+1, r24	; 0x01
    7c52:	04 c0       	rjmp	.+8      	; 0x7c5c <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    7c54:	91 81       	ldd	r25, Z+1	; 0x01
    7c56:	80 73       	andi	r24, 0x30	; 48
    7c58:	89 2b       	or	r24, r25
    7c5a:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    7c5c:	e8 81       	ld	r30, Y
    7c5e:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    7c60:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    7c62:	80 7f       	andi	r24, 0xF0	; 240
    7c64:	9c 81       	ldd	r25, Y+4	; 0x04
    7c66:	89 2b       	or	r24, r25
    7c68:	80 83       	st	Z, r24
}
    7c6a:	df 91       	pop	r29
    7c6c:	cf 91       	pop	r28
    7c6e:	08 95       	ret

00007c70 <__portable_avr_delay_cycles>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    7c70:	04 c0       	rjmp	.+8      	; 0x7c7a <__portable_avr_delay_cycles+0xa>
    7c72:	61 50       	subi	r22, 0x01	; 1
    7c74:	71 09       	sbc	r23, r1
    7c76:	81 09       	sbc	r24, r1
    7c78:	91 09       	sbc	r25, r1
    7c7a:	61 15       	cp	r22, r1
    7c7c:	71 05       	cpc	r23, r1
    7c7e:	81 05       	cpc	r24, r1
    7c80:	91 05       	cpc	r25, r1
    7c82:	b9 f7       	brne	.-18     	; 0x7c72 <__portable_avr_delay_cycles+0x2>
    7c84:	08 95       	ret

00007c86 <isr_rtc_alarm>:
    7c86:	10 92 87 29 	sts	0x2987, r1	; 0x802987 <g_rtc_alarm>
    7c8a:	10 92 88 29 	sts	0x2988, r1	; 0x802988 <g_rtc_alarm+0x1>
    7c8e:	10 92 89 29 	sts	0x2989, r1	; 0x802989 <g_rtc_alarm+0x2>
    7c92:	10 92 8a 29 	sts	0x298A, r1	; 0x80298a <g_rtc_alarm+0x3>
    7c96:	08 95       	ret

00007c98 <isr_adc_a>:
    7c98:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    7c9c:	4e 5b       	subi	r20, 0xBE	; 190
    7c9e:	51 09       	sbc	r21, r1
    7ca0:	60 ff       	sbrs	r22, 0
    7ca2:	ba c0       	rjmp	.+372    	; 0x7e18 <isr_adc_a+0x180>
    7ca4:	82 95       	swap	r24
    7ca6:	8f 70       	andi	r24, 0x0F	; 15
    7ca8:	81 30       	cpi	r24, 0x01	; 1
    7caa:	29 f0       	breq	.+10     	; 0x7cb6 <isr_adc_a+0x1e>
    7cac:	08 f4       	brcc	.+2      	; 0x7cb0 <isr_adc_a+0x18>
    7cae:	79 c0       	rjmp	.+242    	; 0x7da2 <isr_adc_a+0x10a>
    7cb0:	82 30       	cpi	r24, 0x02	; 2
    7cb2:	e1 f1       	breq	.+120    	; 0x7d2c <isr_adc_a+0x94>
    7cb4:	08 95       	ret
    7cb6:	05 2e       	mov	r0, r21
    7cb8:	00 0c       	add	r0, r0
    7cba:	66 0b       	sbc	r22, r22
    7cbc:	77 0b       	sbc	r23, r23
    7cbe:	80 91 f3 28 	lds	r24, 0x28F3	; 0x8028f3 <g_adc_vctcxo_sum>
    7cc2:	90 91 f4 28 	lds	r25, 0x28F4	; 0x8028f4 <g_adc_vctcxo_sum+0x1>
    7cc6:	a0 91 f5 28 	lds	r26, 0x28F5	; 0x8028f5 <g_adc_vctcxo_sum+0x2>
    7cca:	b0 91 f6 28 	lds	r27, 0x28F6	; 0x8028f6 <g_adc_vctcxo_sum+0x3>
    7cce:	48 0f       	add	r20, r24
    7cd0:	59 1f       	adc	r21, r25
    7cd2:	6a 1f       	adc	r22, r26
    7cd4:	7b 1f       	adc	r23, r27
    7cd6:	40 93 f3 28 	sts	0x28F3, r20	; 0x8028f3 <g_adc_vctcxo_sum>
    7cda:	50 93 f4 28 	sts	0x28F4, r21	; 0x8028f4 <g_adc_vctcxo_sum+0x1>
    7cde:	60 93 f5 28 	sts	0x28F5, r22	; 0x8028f5 <g_adc_vctcxo_sum+0x2>
    7ce2:	70 93 f6 28 	sts	0x28F6, r23	; 0x8028f6 <g_adc_vctcxo_sum+0x3>
    7ce6:	80 91 f1 28 	lds	r24, 0x28F1	; 0x8028f1 <g_adc_vctcxo_cnt>
    7cea:	90 91 f2 28 	lds	r25, 0x28F2	; 0x8028f2 <g_adc_vctcxo_cnt+0x1>
    7cee:	01 96       	adiw	r24, 0x01	; 1
    7cf0:	80 93 f1 28 	sts	0x28F1, r24	; 0x8028f1 <g_adc_vctcxo_cnt>
    7cf4:	90 93 f2 28 	sts	0x28F2, r25	; 0x8028f2 <g_adc_vctcxo_cnt+0x1>
    7cf8:	8f 3f       	cpi	r24, 0xFF	; 255
    7cfa:	91 05       	cpc	r25, r1
    7cfc:	09 f0       	breq	.+2      	; 0x7d00 <isr_adc_a+0x68>
    7cfe:	08 f4       	brcc	.+2      	; 0x7d02 <isr_adc_a+0x6a>
    7d00:	40 c1       	rjmp	.+640    	; 0x7f82 <isr_adc_a+0x2ea>
    7d02:	40 93 f7 28 	sts	0x28F7, r20	; 0x8028f7 <g_adc_vctcxo_cur>
    7d06:	50 93 f8 28 	sts	0x28F8, r21	; 0x8028f8 <g_adc_vctcxo_cur+0x1>
    7d0a:	60 93 f9 28 	sts	0x28F9, r22	; 0x8028f9 <g_adc_vctcxo_cur+0x2>
    7d0e:	70 93 fa 28 	sts	0x28FA, r23	; 0x8028fa <g_adc_vctcxo_cur+0x3>
    7d12:	10 92 f1 28 	sts	0x28F1, r1	; 0x8028f1 <g_adc_vctcxo_cnt>
    7d16:	10 92 f2 28 	sts	0x28F2, r1	; 0x8028f2 <g_adc_vctcxo_cnt+0x1>
    7d1a:	10 92 f3 28 	sts	0x28F3, r1	; 0x8028f3 <g_adc_vctcxo_sum>
    7d1e:	10 92 f4 28 	sts	0x28F4, r1	; 0x8028f4 <g_adc_vctcxo_sum+0x1>
    7d22:	10 92 f5 28 	sts	0x28F5, r1	; 0x8028f5 <g_adc_vctcxo_sum+0x2>
    7d26:	10 92 f6 28 	sts	0x28F6, r1	; 0x8028f6 <g_adc_vctcxo_sum+0x3>
    7d2a:	08 95       	ret
    7d2c:	05 2e       	mov	r0, r21
    7d2e:	00 0c       	add	r0, r0
    7d30:	66 0b       	sbc	r22, r22
    7d32:	77 0b       	sbc	r23, r23
    7d34:	80 91 e9 28 	lds	r24, 0x28E9	; 0x8028e9 <g_adc_5v0_sum>
    7d38:	90 91 ea 28 	lds	r25, 0x28EA	; 0x8028ea <g_adc_5v0_sum+0x1>
    7d3c:	a0 91 eb 28 	lds	r26, 0x28EB	; 0x8028eb <g_adc_5v0_sum+0x2>
    7d40:	b0 91 ec 28 	lds	r27, 0x28EC	; 0x8028ec <g_adc_5v0_sum+0x3>
    7d44:	48 0f       	add	r20, r24
    7d46:	59 1f       	adc	r21, r25
    7d48:	6a 1f       	adc	r22, r26
    7d4a:	7b 1f       	adc	r23, r27
    7d4c:	40 93 e9 28 	sts	0x28E9, r20	; 0x8028e9 <g_adc_5v0_sum>
    7d50:	50 93 ea 28 	sts	0x28EA, r21	; 0x8028ea <g_adc_5v0_sum+0x1>
    7d54:	60 93 eb 28 	sts	0x28EB, r22	; 0x8028eb <g_adc_5v0_sum+0x2>
    7d58:	70 93 ec 28 	sts	0x28EC, r23	; 0x8028ec <g_adc_5v0_sum+0x3>
    7d5c:	80 91 e7 28 	lds	r24, 0x28E7	; 0x8028e7 <g_adc_5v0_cnt>
    7d60:	90 91 e8 28 	lds	r25, 0x28E8	; 0x8028e8 <g_adc_5v0_cnt+0x1>
    7d64:	01 96       	adiw	r24, 0x01	; 1
    7d66:	80 93 e7 28 	sts	0x28E7, r24	; 0x8028e7 <g_adc_5v0_cnt>
    7d6a:	90 93 e8 28 	sts	0x28E8, r25	; 0x8028e8 <g_adc_5v0_cnt+0x1>
    7d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    7d70:	91 05       	cpc	r25, r1
    7d72:	09 f0       	breq	.+2      	; 0x7d76 <isr_adc_a+0xde>
    7d74:	08 f4       	brcc	.+2      	; 0x7d78 <isr_adc_a+0xe0>
    7d76:	05 c1       	rjmp	.+522    	; 0x7f82 <isr_adc_a+0x2ea>
    7d78:	40 93 ed 28 	sts	0x28ED, r20	; 0x8028ed <g_adc_5v0_cur>
    7d7c:	50 93 ee 28 	sts	0x28EE, r21	; 0x8028ee <g_adc_5v0_cur+0x1>
    7d80:	60 93 ef 28 	sts	0x28EF, r22	; 0x8028ef <g_adc_5v0_cur+0x2>
    7d84:	70 93 f0 28 	sts	0x28F0, r23	; 0x8028f0 <g_adc_5v0_cur+0x3>
    7d88:	10 92 e7 28 	sts	0x28E7, r1	; 0x8028e7 <g_adc_5v0_cnt>
    7d8c:	10 92 e8 28 	sts	0x28E8, r1	; 0x8028e8 <g_adc_5v0_cnt+0x1>
    7d90:	10 92 e9 28 	sts	0x28E9, r1	; 0x8028e9 <g_adc_5v0_sum>
    7d94:	10 92 ea 28 	sts	0x28EA, r1	; 0x8028ea <g_adc_5v0_sum+0x1>
    7d98:	10 92 eb 28 	sts	0x28EB, r1	; 0x8028eb <g_adc_5v0_sum+0x2>
    7d9c:	10 92 ec 28 	sts	0x28EC, r1	; 0x8028ec <g_adc_5v0_sum+0x3>
    7da0:	08 95       	ret
    7da2:	05 2e       	mov	r0, r21
    7da4:	00 0c       	add	r0, r0
    7da6:	66 0b       	sbc	r22, r22
    7da8:	77 0b       	sbc	r23, r23
    7daa:	80 91 df 28 	lds	r24, 0x28DF	; 0x8028df <g_adc_vbat_sum>
    7dae:	90 91 e0 28 	lds	r25, 0x28E0	; 0x8028e0 <g_adc_vbat_sum+0x1>
    7db2:	a0 91 e1 28 	lds	r26, 0x28E1	; 0x8028e1 <g_adc_vbat_sum+0x2>
    7db6:	b0 91 e2 28 	lds	r27, 0x28E2	; 0x8028e2 <g_adc_vbat_sum+0x3>
    7dba:	48 0f       	add	r20, r24
    7dbc:	59 1f       	adc	r21, r25
    7dbe:	6a 1f       	adc	r22, r26
    7dc0:	7b 1f       	adc	r23, r27
    7dc2:	40 93 df 28 	sts	0x28DF, r20	; 0x8028df <g_adc_vbat_sum>
    7dc6:	50 93 e0 28 	sts	0x28E0, r21	; 0x8028e0 <g_adc_vbat_sum+0x1>
    7dca:	60 93 e1 28 	sts	0x28E1, r22	; 0x8028e1 <g_adc_vbat_sum+0x2>
    7dce:	70 93 e2 28 	sts	0x28E2, r23	; 0x8028e2 <g_adc_vbat_sum+0x3>
    7dd2:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <g_adc_vbat_cnt>
    7dd6:	90 91 de 28 	lds	r25, 0x28DE	; 0x8028de <g_adc_vbat_cnt+0x1>
    7dda:	01 96       	adiw	r24, 0x01	; 1
    7ddc:	80 93 dd 28 	sts	0x28DD, r24	; 0x8028dd <g_adc_vbat_cnt>
    7de0:	90 93 de 28 	sts	0x28DE, r25	; 0x8028de <g_adc_vbat_cnt+0x1>
    7de4:	8f 3f       	cpi	r24, 0xFF	; 255
    7de6:	91 05       	cpc	r25, r1
    7de8:	09 f0       	breq	.+2      	; 0x7dec <isr_adc_a+0x154>
    7dea:	08 f4       	brcc	.+2      	; 0x7dee <isr_adc_a+0x156>
    7dec:	ca c0       	rjmp	.+404    	; 0x7f82 <isr_adc_a+0x2ea>
    7dee:	40 93 e3 28 	sts	0x28E3, r20	; 0x8028e3 <g_adc_vbat_cur>
    7df2:	50 93 e4 28 	sts	0x28E4, r21	; 0x8028e4 <g_adc_vbat_cur+0x1>
    7df6:	60 93 e5 28 	sts	0x28E5, r22	; 0x8028e5 <g_adc_vbat_cur+0x2>
    7dfa:	70 93 e6 28 	sts	0x28E6, r23	; 0x8028e6 <g_adc_vbat_cur+0x3>
    7dfe:	10 92 dd 28 	sts	0x28DD, r1	; 0x8028dd <g_adc_vbat_cnt>
    7e02:	10 92 de 28 	sts	0x28DE, r1	; 0x8028de <g_adc_vbat_cnt+0x1>
    7e06:	10 92 df 28 	sts	0x28DF, r1	; 0x8028df <g_adc_vbat_sum>
    7e0a:	10 92 e0 28 	sts	0x28E0, r1	; 0x8028e0 <g_adc_vbat_sum+0x1>
    7e0e:	10 92 e1 28 	sts	0x28E1, r1	; 0x8028e1 <g_adc_vbat_sum+0x2>
    7e12:	10 92 e2 28 	sts	0x28E2, r1	; 0x8028e2 <g_adc_vbat_sum+0x3>
    7e16:	08 95       	ret
    7e18:	61 ff       	sbrs	r22, 1
    7e1a:	3b c0       	rjmp	.+118    	; 0x7e92 <isr_adc_a+0x1fa>
    7e1c:	05 2e       	mov	r0, r21
    7e1e:	00 0c       	add	r0, r0
    7e20:	66 0b       	sbc	r22, r22
    7e22:	77 0b       	sbc	r23, r23
    7e24:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <g_adc_io_adc4_sum>
    7e28:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <g_adc_io_adc4_sum+0x1>
    7e2c:	a0 91 d7 28 	lds	r26, 0x28D7	; 0x8028d7 <g_adc_io_adc4_sum+0x2>
    7e30:	b0 91 d8 28 	lds	r27, 0x28D8	; 0x8028d8 <g_adc_io_adc4_sum+0x3>
    7e34:	48 0f       	add	r20, r24
    7e36:	59 1f       	adc	r21, r25
    7e38:	6a 1f       	adc	r22, r26
    7e3a:	7b 1f       	adc	r23, r27
    7e3c:	40 93 d5 28 	sts	0x28D5, r20	; 0x8028d5 <g_adc_io_adc4_sum>
    7e40:	50 93 d6 28 	sts	0x28D6, r21	; 0x8028d6 <g_adc_io_adc4_sum+0x1>
    7e44:	60 93 d7 28 	sts	0x28D7, r22	; 0x8028d7 <g_adc_io_adc4_sum+0x2>
    7e48:	70 93 d8 28 	sts	0x28D8, r23	; 0x8028d8 <g_adc_io_adc4_sum+0x3>
    7e4c:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <g_adc_io_adc4_cnt>
    7e50:	90 91 d4 28 	lds	r25, 0x28D4	; 0x8028d4 <g_adc_io_adc4_cnt+0x1>
    7e54:	01 96       	adiw	r24, 0x01	; 1
    7e56:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <g_adc_io_adc4_cnt>
    7e5a:	90 93 d4 28 	sts	0x28D4, r25	; 0x8028d4 <g_adc_io_adc4_cnt+0x1>
    7e5e:	8f 3f       	cpi	r24, 0xFF	; 255
    7e60:	91 05       	cpc	r25, r1
    7e62:	09 f0       	breq	.+2      	; 0x7e66 <isr_adc_a+0x1ce>
    7e64:	08 f4       	brcc	.+2      	; 0x7e68 <isr_adc_a+0x1d0>
    7e66:	8d c0       	rjmp	.+282    	; 0x7f82 <isr_adc_a+0x2ea>
    7e68:	40 93 d9 28 	sts	0x28D9, r20	; 0x8028d9 <g_adc_io_adc4_cur>
    7e6c:	50 93 da 28 	sts	0x28DA, r21	; 0x8028da <g_adc_io_adc4_cur+0x1>
    7e70:	60 93 db 28 	sts	0x28DB, r22	; 0x8028db <g_adc_io_adc4_cur+0x2>
    7e74:	70 93 dc 28 	sts	0x28DC, r23	; 0x8028dc <g_adc_io_adc4_cur+0x3>
    7e78:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <g_adc_io_adc4_cnt>
    7e7c:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <g_adc_io_adc4_cnt+0x1>
    7e80:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <g_adc_io_adc4_sum>
    7e84:	10 92 d6 28 	sts	0x28D6, r1	; 0x8028d6 <g_adc_io_adc4_sum+0x1>
    7e88:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <g_adc_io_adc4_sum+0x2>
    7e8c:	10 92 d8 28 	sts	0x28D8, r1	; 0x8028d8 <g_adc_io_adc4_sum+0x3>
    7e90:	08 95       	ret
    7e92:	62 ff       	sbrs	r22, 2
    7e94:	3b c0       	rjmp	.+118    	; 0x7f0c <isr_adc_a+0x274>
    7e96:	05 2e       	mov	r0, r21
    7e98:	00 0c       	add	r0, r0
    7e9a:	66 0b       	sbc	r22, r22
    7e9c:	77 0b       	sbc	r23, r23
    7e9e:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <g_adc_io_adc5_sum>
    7ea2:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <g_adc_io_adc5_sum+0x1>
    7ea6:	a0 91 cd 28 	lds	r26, 0x28CD	; 0x8028cd <g_adc_io_adc5_sum+0x2>
    7eaa:	b0 91 ce 28 	lds	r27, 0x28CE	; 0x8028ce <g_adc_io_adc5_sum+0x3>
    7eae:	48 0f       	add	r20, r24
    7eb0:	59 1f       	adc	r21, r25
    7eb2:	6a 1f       	adc	r22, r26
    7eb4:	7b 1f       	adc	r23, r27
    7eb6:	40 93 cb 28 	sts	0x28CB, r20	; 0x8028cb <g_adc_io_adc5_sum>
    7eba:	50 93 cc 28 	sts	0x28CC, r21	; 0x8028cc <g_adc_io_adc5_sum+0x1>
    7ebe:	60 93 cd 28 	sts	0x28CD, r22	; 0x8028cd <g_adc_io_adc5_sum+0x2>
    7ec2:	70 93 ce 28 	sts	0x28CE, r23	; 0x8028ce <g_adc_io_adc5_sum+0x3>
    7ec6:	80 91 c9 28 	lds	r24, 0x28C9	; 0x8028c9 <g_adc_io_adc5_cnt>
    7eca:	90 91 ca 28 	lds	r25, 0x28CA	; 0x8028ca <g_adc_io_adc5_cnt+0x1>
    7ece:	01 96       	adiw	r24, 0x01	; 1
    7ed0:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <g_adc_io_adc5_cnt>
    7ed4:	90 93 ca 28 	sts	0x28CA, r25	; 0x8028ca <g_adc_io_adc5_cnt+0x1>
    7ed8:	8f 3f       	cpi	r24, 0xFF	; 255
    7eda:	91 05       	cpc	r25, r1
    7edc:	09 f0       	breq	.+2      	; 0x7ee0 <isr_adc_a+0x248>
    7ede:	08 f4       	brcc	.+2      	; 0x7ee2 <isr_adc_a+0x24a>
    7ee0:	50 c0       	rjmp	.+160    	; 0x7f82 <isr_adc_a+0x2ea>
    7ee2:	40 93 cf 28 	sts	0x28CF, r20	; 0x8028cf <g_adc_io_adc5_cur>
    7ee6:	50 93 d0 28 	sts	0x28D0, r21	; 0x8028d0 <g_adc_io_adc5_cur+0x1>
    7eea:	60 93 d1 28 	sts	0x28D1, r22	; 0x8028d1 <g_adc_io_adc5_cur+0x2>
    7eee:	70 93 d2 28 	sts	0x28D2, r23	; 0x8028d2 <g_adc_io_adc5_cur+0x3>
    7ef2:	10 92 c9 28 	sts	0x28C9, r1	; 0x8028c9 <g_adc_io_adc5_cnt>
    7ef6:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <g_adc_io_adc5_cnt+0x1>
    7efa:	10 92 cb 28 	sts	0x28CB, r1	; 0x8028cb <g_adc_io_adc5_sum>
    7efe:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <g_adc_io_adc5_sum+0x1>
    7f02:	10 92 cd 28 	sts	0x28CD, r1	; 0x8028cd <g_adc_io_adc5_sum+0x2>
    7f06:	10 92 ce 28 	sts	0x28CE, r1	; 0x8028ce <g_adc_io_adc5_sum+0x3>
    7f0a:	08 95       	ret
    7f0c:	63 ff       	sbrs	r22, 3
    7f0e:	39 c0       	rjmp	.+114    	; 0x7f82 <isr_adc_a+0x2ea>
    7f10:	05 2e       	mov	r0, r21
    7f12:	00 0c       	add	r0, r0
    7f14:	66 0b       	sbc	r22, r22
    7f16:	77 0b       	sbc	r23, r23
    7f18:	80 91 c1 28 	lds	r24, 0x28C1	; 0x8028c1 <g_adc_silence_sum>
    7f1c:	90 91 c2 28 	lds	r25, 0x28C2	; 0x8028c2 <g_adc_silence_sum+0x1>
    7f20:	a0 91 c3 28 	lds	r26, 0x28C3	; 0x8028c3 <g_adc_silence_sum+0x2>
    7f24:	b0 91 c4 28 	lds	r27, 0x28C4	; 0x8028c4 <g_adc_silence_sum+0x3>
    7f28:	48 0f       	add	r20, r24
    7f2a:	59 1f       	adc	r21, r25
    7f2c:	6a 1f       	adc	r22, r26
    7f2e:	7b 1f       	adc	r23, r27
    7f30:	40 93 c1 28 	sts	0x28C1, r20	; 0x8028c1 <g_adc_silence_sum>
    7f34:	50 93 c2 28 	sts	0x28C2, r21	; 0x8028c2 <g_adc_silence_sum+0x1>
    7f38:	60 93 c3 28 	sts	0x28C3, r22	; 0x8028c3 <g_adc_silence_sum+0x2>
    7f3c:	70 93 c4 28 	sts	0x28C4, r23	; 0x8028c4 <g_adc_silence_sum+0x3>
    7f40:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <g_adc_silence_cnt>
    7f44:	90 91 c0 28 	lds	r25, 0x28C0	; 0x8028c0 <g_adc_silence_cnt+0x1>
    7f48:	01 96       	adiw	r24, 0x01	; 1
    7f4a:	80 93 bf 28 	sts	0x28BF, r24	; 0x8028bf <g_adc_silence_cnt>
    7f4e:	90 93 c0 28 	sts	0x28C0, r25	; 0x8028c0 <g_adc_silence_cnt+0x1>
    7f52:	8f 3f       	cpi	r24, 0xFF	; 255
    7f54:	91 05       	cpc	r25, r1
    7f56:	a9 f0       	breq	.+42     	; 0x7f82 <isr_adc_a+0x2ea>
    7f58:	a0 f0       	brcs	.+40     	; 0x7f82 <isr_adc_a+0x2ea>
    7f5a:	40 93 c5 28 	sts	0x28C5, r20	; 0x8028c5 <g_adc_silence_cur>
    7f5e:	50 93 c6 28 	sts	0x28C6, r21	; 0x8028c6 <g_adc_silence_cur+0x1>
    7f62:	60 93 c7 28 	sts	0x28C7, r22	; 0x8028c7 <g_adc_silence_cur+0x2>
    7f66:	70 93 c8 28 	sts	0x28C8, r23	; 0x8028c8 <g_adc_silence_cur+0x3>
    7f6a:	10 92 bf 28 	sts	0x28BF, r1	; 0x8028bf <g_adc_silence_cnt>
    7f6e:	10 92 c0 28 	sts	0x28C0, r1	; 0x8028c0 <g_adc_silence_cnt+0x1>
    7f72:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <g_adc_silence_sum>
    7f76:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <g_adc_silence_sum+0x1>
    7f7a:	10 92 c3 28 	sts	0x28C3, r1	; 0x8028c3 <g_adc_silence_sum+0x2>
    7f7e:	10 92 c4 28 	sts	0x28C4, r1	; 0x8028c4 <g_adc_silence_sum+0x3>
    7f82:	08 95       	ret

00007f84 <isr_adc_b>:
    7f84:	60 ff       	sbrs	r22, 0
    7f86:	3b c0       	rjmp	.+118    	; 0x7ffe <isr_adc_b+0x7a>
    7f88:	4e 5b       	subi	r20, 0xBE	; 190
    7f8a:	51 09       	sbc	r21, r1
    7f8c:	05 2e       	mov	r0, r21
    7f8e:	00 0c       	add	r0, r0
    7f90:	66 0b       	sbc	r22, r22
    7f92:	77 0b       	sbc	r23, r23
    7f94:	80 91 b7 28 	lds	r24, 0x28B7	; 0x8028b7 <g_adc_temp_sum>
    7f98:	90 91 b8 28 	lds	r25, 0x28B8	; 0x8028b8 <g_adc_temp_sum+0x1>
    7f9c:	a0 91 b9 28 	lds	r26, 0x28B9	; 0x8028b9 <g_adc_temp_sum+0x2>
    7fa0:	b0 91 ba 28 	lds	r27, 0x28BA	; 0x8028ba <g_adc_temp_sum+0x3>
    7fa4:	48 0f       	add	r20, r24
    7fa6:	59 1f       	adc	r21, r25
    7fa8:	6a 1f       	adc	r22, r26
    7faa:	7b 1f       	adc	r23, r27
    7fac:	40 93 b7 28 	sts	0x28B7, r20	; 0x8028b7 <g_adc_temp_sum>
    7fb0:	50 93 b8 28 	sts	0x28B8, r21	; 0x8028b8 <g_adc_temp_sum+0x1>
    7fb4:	60 93 b9 28 	sts	0x28B9, r22	; 0x8028b9 <g_adc_temp_sum+0x2>
    7fb8:	70 93 ba 28 	sts	0x28BA, r23	; 0x8028ba <g_adc_temp_sum+0x3>
    7fbc:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <g_adc_temp_cnt>
    7fc0:	90 91 b6 28 	lds	r25, 0x28B6	; 0x8028b6 <g_adc_temp_cnt+0x1>
    7fc4:	01 96       	adiw	r24, 0x01	; 1
    7fc6:	80 93 b5 28 	sts	0x28B5, r24	; 0x8028b5 <g_adc_temp_cnt>
    7fca:	90 93 b6 28 	sts	0x28B6, r25	; 0x8028b6 <g_adc_temp_cnt+0x1>
    7fce:	8f 3f       	cpi	r24, 0xFF	; 255
    7fd0:	91 05       	cpc	r25, r1
    7fd2:	a9 f0       	breq	.+42     	; 0x7ffe <isr_adc_b+0x7a>
    7fd4:	a0 f0       	brcs	.+40     	; 0x7ffe <isr_adc_b+0x7a>
    7fd6:	40 93 bb 28 	sts	0x28BB, r20	; 0x8028bb <g_adc_temp_cur>
    7fda:	50 93 bc 28 	sts	0x28BC, r21	; 0x8028bc <g_adc_temp_cur+0x1>
    7fde:	60 93 bd 28 	sts	0x28BD, r22	; 0x8028bd <g_adc_temp_cur+0x2>
    7fe2:	70 93 be 28 	sts	0x28BE, r23	; 0x8028be <g_adc_temp_cur+0x3>
    7fe6:	10 92 b5 28 	sts	0x28B5, r1	; 0x8028b5 <g_adc_temp_cnt>
    7fea:	10 92 b6 28 	sts	0x28B6, r1	; 0x8028b6 <g_adc_temp_cnt+0x1>
    7fee:	10 92 b7 28 	sts	0x28B7, r1	; 0x8028b7 <g_adc_temp_sum>
    7ff2:	10 92 b8 28 	sts	0x28B8, r1	; 0x8028b8 <g_adc_temp_sum+0x1>
    7ff6:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <g_adc_temp_sum+0x2>
    7ffa:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <g_adc_temp_sum+0x3>
    7ffe:	08 95       	ret

00008000 <task_dac>:
    8000:	cf 93       	push	r28
    8002:	df 93       	push	r29
    8004:	1f 92       	push	r1
    8006:	1f 92       	push	r1
    8008:	cd b7       	in	r28, 0x3d	; 61
    800a:	de b7       	in	r29, 0x3e	; 62
    800c:	8f b7       	in	r24, 0x3f	; 63
    800e:	8a 83       	std	Y+2, r24	; 0x02
    8010:	f8 94       	cli
    8012:	8a 81       	ldd	r24, Y+2	; 0x02
    8014:	8f bf       	out	0x3f, r24	; 63
    8016:	80 91 25 28 	lds	r24, 0x2825	; 0x802825 <s_dds0_freq_mHz.7540>
    801a:	90 91 26 28 	lds	r25, 0x2826	; 0x802826 <s_dds0_freq_mHz.7540+0x1>
    801e:	a0 91 27 28 	lds	r26, 0x2827	; 0x802827 <s_dds0_freq_mHz.7540+0x2>
    8022:	b0 91 28 28 	lds	r27, 0x2828	; 0x802828 <s_dds0_freq_mHz.7540+0x3>
    8026:	80 38       	cpi	r24, 0x80	; 128
    8028:	94 48       	sbci	r25, 0x84	; 132
    802a:	ae 41       	sbci	r26, 0x1E	; 30
    802c:	b1 05       	cpc	r27, r1
    802e:	69 f4       	brne	.+26     	; 0x804a <task_dac+0x4a>
    8030:	80 91 21 28 	lds	r24, 0x2821	; 0x802821 <s_dds1_freq_mHz.7541>
    8034:	90 91 22 28 	lds	r25, 0x2822	; 0x802822 <s_dds1_freq_mHz.7541+0x1>
    8038:	a0 91 23 28 	lds	r26, 0x2823	; 0x802823 <s_dds1_freq_mHz.7541+0x2>
    803c:	b0 91 24 28 	lds	r27, 0x2824	; 0x802824 <s_dds1_freq_mHz.7541+0x3>
    8040:	8a 30       	cpi	r24, 0x0A	; 10
    8042:	99 40       	sbci	r25, 0x09	; 9
    8044:	ad 43       	sbci	r26, 0x3D	; 61
    8046:	b1 05       	cpc	r27, r1
    8048:	a9 f1       	breq	.+106    	; 0x80b4 <task_dac+0xb4>
    804a:	80 e8       	ldi	r24, 0x80	; 128
    804c:	94 e8       	ldi	r25, 0x84	; 132
    804e:	ae e1       	ldi	r26, 0x1E	; 30
    8050:	b0 e0       	ldi	r27, 0x00	; 0
    8052:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <s_dds0_freq_mHz.7540>
    8056:	90 93 26 28 	sts	0x2826, r25	; 0x802826 <s_dds0_freq_mHz.7540+0x1>
    805a:	a0 93 27 28 	sts	0x2827, r26	; 0x802827 <s_dds0_freq_mHz.7540+0x2>
    805e:	b0 93 28 28 	sts	0x2828, r27	; 0x802828 <s_dds0_freq_mHz.7540+0x3>
    8062:	8a e0       	ldi	r24, 0x0A	; 10
    8064:	99 e0       	ldi	r25, 0x09	; 9
    8066:	ad e3       	ldi	r26, 0x3D	; 61
    8068:	b0 e0       	ldi	r27, 0x00	; 0
    806a:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <s_dds1_freq_mHz.7541>
    806e:	90 93 22 28 	sts	0x2822, r25	; 0x802822 <s_dds1_freq_mHz.7541+0x1>
    8072:	a0 93 23 28 	sts	0x2823, r26	; 0x802823 <s_dds1_freq_mHz.7541+0x2>
    8076:	b0 93 24 28 	sts	0x2824, r27	; 0x802824 <s_dds1_freq_mHz.7541+0x3>
    807a:	8f b7       	in	r24, 0x3f	; 63
    807c:	89 83       	std	Y+1, r24	; 0x01
    807e:	f8 94       	cli
    8080:	89 81       	ldd	r24, Y+1	; 0x01
    8082:	4a ea       	ldi	r20, 0xAA	; 170
    8084:	5a ea       	ldi	r21, 0xAA	; 170
    8086:	6a ea       	ldi	r22, 0xAA	; 170
    8088:	7a e0       	ldi	r23, 0x0A	; 10
    808a:	40 93 79 28 	sts	0x2879, r20	; 0x802879 <dds0_inc>
    808e:	50 93 7a 28 	sts	0x287A, r21	; 0x80287a <dds0_inc+0x1>
    8092:	60 93 7b 28 	sts	0x287B, r22	; 0x80287b <dds0_inc+0x2>
    8096:	70 93 7c 28 	sts	0x287C, r23	; 0x80287c <dds0_inc+0x3>
    809a:	44 ed       	ldi	r20, 0xD4	; 212
    809c:	58 e5       	ldi	r21, 0x58	; 88
    809e:	65 e5       	ldi	r22, 0x55	; 85
    80a0:	75 e1       	ldi	r23, 0x15	; 21
    80a2:	40 93 71 28 	sts	0x2871, r20	; 0x802871 <dds1_inc>
    80a6:	50 93 72 28 	sts	0x2872, r21	; 0x802872 <dds1_inc+0x1>
    80aa:	60 93 73 28 	sts	0x2873, r22	; 0x802873 <dds1_inc+0x2>
    80ae:	70 93 74 28 	sts	0x2874, r23	; 0x802874 <dds1_inc+0x3>
    80b2:	8f bf       	out	0x3f, r24	; 63
    80b4:	0f 90       	pop	r0
    80b6:	0f 90       	pop	r0
    80b8:	df 91       	pop	r29
    80ba:	cf 91       	pop	r28
    80bc:	08 95       	ret

000080be <isr_tcc0_ovfl>:
    80be:	cf 92       	push	r12
    80c0:	df 92       	push	r13
    80c2:	ef 92       	push	r14
    80c4:	ff 92       	push	r15
    80c6:	0f 93       	push	r16
    80c8:	1f 93       	push	r17
    80ca:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <rtc_get_time>
    80ce:	21 e0       	ldi	r18, 0x01	; 1
    80d0:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    80d4:	20 91 8c 29 	lds	r18, 0x298C	; 0x80298c <g_workmode>
    80d8:	22 30       	cpi	r18, 0x02	; 2
    80da:	09 f0       	breq	.+2      	; 0x80de <isr_tcc0_ovfl+0x20>
    80dc:	4a c0       	rjmp	.+148    	; 0x8172 <isr_tcc0_ovfl+0xb4>
    80de:	00 91 2d 28 	lds	r16, 0x282D	; 0x80282d <last_10ms.7425>
    80e2:	10 91 2e 28 	lds	r17, 0x282E	; 0x80282e <last_10ms.7425+0x1>
    80e6:	20 91 2f 28 	lds	r18, 0x282F	; 0x80282f <last_10ms.7425+0x2>
    80ea:	30 91 30 28 	lds	r19, 0x2830	; 0x802830 <last_10ms.7425+0x3>
    80ee:	6b 01       	movw	r12, r22
    80f0:	7c 01       	movw	r14, r24
    80f2:	c0 1a       	sub	r12, r16
    80f4:	d1 0a       	sbc	r13, r17
    80f6:	e2 0a       	sbc	r14, r18
    80f8:	f3 0a       	sbc	r15, r19
    80fa:	4a e0       	ldi	r20, 0x0A	; 10
    80fc:	c4 16       	cp	r12, r20
    80fe:	d1 04       	cpc	r13, r1
    8100:	e1 04       	cpc	r14, r1
    8102:	f1 04       	cpc	r15, r1
    8104:	28 f4       	brcc	.+10     	; 0x8110 <isr_tcc0_ovfl+0x52>
    8106:	60 17       	cp	r22, r16
    8108:	71 07       	cpc	r23, r17
    810a:	82 07       	cpc	r24, r18
    810c:	93 07       	cpc	r25, r19
    810e:	58 f4       	brcc	.+22     	; 0x8126 <isr_tcc0_ovfl+0x68>
    8110:	60 93 2d 28 	sts	0x282D, r22	; 0x80282d <last_10ms.7425>
    8114:	70 93 2e 28 	sts	0x282E, r23	; 0x80282e <last_10ms.7425+0x1>
    8118:	80 93 2f 28 	sts	0x282F, r24	; 0x80282f <last_10ms.7425+0x2>
    811c:	90 93 30 28 	sts	0x2830, r25	; 0x802830 <last_10ms.7425+0x3>
    8120:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <isr_10ms_twi1_onboard>
    8124:	26 c0       	rjmp	.+76     	; 0x8172 <isr_tcc0_ovfl+0xb4>
    8126:	00 91 29 28 	lds	r16, 0x2829	; 0x802829 <last_500ms.7426>
    812a:	10 91 2a 28 	lds	r17, 0x282A	; 0x80282a <last_500ms.7426+0x1>
    812e:	20 91 2b 28 	lds	r18, 0x282B	; 0x80282b <last_500ms.7426+0x2>
    8132:	30 91 2c 28 	lds	r19, 0x282C	; 0x80282c <last_500ms.7426+0x3>
    8136:	6b 01       	movw	r12, r22
    8138:	7c 01       	movw	r14, r24
    813a:	c0 1a       	sub	r12, r16
    813c:	d1 0a       	sbc	r13, r17
    813e:	e2 0a       	sbc	r14, r18
    8140:	f3 0a       	sbc	r15, r19
    8142:	c1 14       	cp	r12, r1
    8144:	42 e0       	ldi	r20, 0x02	; 2
    8146:	d4 06       	cpc	r13, r20
    8148:	e1 04       	cpc	r14, r1
    814a:	f1 04       	cpc	r15, r1
    814c:	28 f4       	brcc	.+10     	; 0x8158 <isr_tcc0_ovfl+0x9a>
    814e:	60 17       	cp	r22, r16
    8150:	71 07       	cpc	r23, r17
    8152:	82 07       	cpc	r24, r18
    8154:	93 07       	cpc	r25, r19
    8156:	58 f4       	brcc	.+22     	; 0x816e <isr_tcc0_ovfl+0xb0>
    8158:	60 93 29 28 	sts	0x2829, r22	; 0x802829 <last_500ms.7426>
    815c:	70 93 2a 28 	sts	0x282A, r23	; 0x80282a <last_500ms.7426+0x1>
    8160:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <last_500ms.7426+0x2>
    8164:	90 93 2c 28 	sts	0x282C, r25	; 0x80282c <last_500ms.7426+0x3>
    8168:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <isr_500ms_twi1_onboard>
    816c:	02 c0       	rjmp	.+4      	; 0x8172 <isr_tcc0_ovfl+0xb4>
    816e:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <isr_sparetime_twi1_onboard>
    8172:	1f 91       	pop	r17
    8174:	0f 91       	pop	r16
    8176:	ff 90       	pop	r15
    8178:	ef 90       	pop	r14
    817a:	df 90       	pop	r13
    817c:	cf 90       	pop	r12
    817e:	08 95       	ret

00008180 <calc_next_frame>:
    8180:	8f 92       	push	r8
    8182:	9f 92       	push	r9
    8184:	af 92       	push	r10
    8186:	bf 92       	push	r11
    8188:	cf 92       	push	r12
    818a:	df 92       	push	r13
    818c:	ef 92       	push	r14
    818e:	ff 92       	push	r15
    8190:	0f 93       	push	r16
    8192:	1f 93       	push	r17
    8194:	cf 93       	push	r28
    8196:	df 93       	push	r29
    8198:	6b 01       	movw	r12, r22
    819a:	5a 01       	movw	r10, r20
    819c:	79 01       	movw	r14, r18
    819e:	48 01       	movw	r8, r16
    81a0:	ec 01       	movw	r28, r24
    81a2:	8c 01       	movw	r16, r24
    81a4:	00 5e       	subi	r16, 0xE0	; 224
    81a6:	1f 4f       	sbci	r17, 0xFF	; 255
    81a8:	f6 01       	movw	r30, r12
    81aa:	82 81       	ldd	r24, Z+2	; 0x02
    81ac:	93 81       	ldd	r25, Z+3	; 0x03
    81ae:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <get_interpolated_sine>
    81b2:	88 83       	st	Y, r24
    81b4:	99 83       	std	Y+1, r25	; 0x01
    81b6:	f7 01       	movw	r30, r14
    81b8:	82 81       	ldd	r24, Z+2	; 0x02
    81ba:	93 81       	ldd	r25, Z+3	; 0x03
    81bc:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <get_interpolated_sine>
    81c0:	8a 83       	std	Y+2, r24	; 0x02
    81c2:	9b 83       	std	Y+3, r25	; 0x03
    81c4:	f6 01       	movw	r30, r12
    81c6:	40 81       	ld	r20, Z
    81c8:	51 81       	ldd	r21, Z+1	; 0x01
    81ca:	62 81       	ldd	r22, Z+2	; 0x02
    81cc:	73 81       	ldd	r23, Z+3	; 0x03
    81ce:	f5 01       	movw	r30, r10
    81d0:	80 81       	ld	r24, Z
    81d2:	91 81       	ldd	r25, Z+1	; 0x01
    81d4:	a2 81       	ldd	r26, Z+2	; 0x02
    81d6:	b3 81       	ldd	r27, Z+3	; 0x03
    81d8:	84 0f       	add	r24, r20
    81da:	95 1f       	adc	r25, r21
    81dc:	a6 1f       	adc	r26, r22
    81de:	b7 1f       	adc	r27, r23
    81e0:	f6 01       	movw	r30, r12
    81e2:	80 83       	st	Z, r24
    81e4:	91 83       	std	Z+1, r25	; 0x01
    81e6:	a2 83       	std	Z+2, r26	; 0x02
    81e8:	b3 83       	std	Z+3, r27	; 0x03
    81ea:	f7 01       	movw	r30, r14
    81ec:	40 81       	ld	r20, Z
    81ee:	51 81       	ldd	r21, Z+1	; 0x01
    81f0:	62 81       	ldd	r22, Z+2	; 0x02
    81f2:	73 81       	ldd	r23, Z+3	; 0x03
    81f4:	f4 01       	movw	r30, r8
    81f6:	80 81       	ld	r24, Z
    81f8:	91 81       	ldd	r25, Z+1	; 0x01
    81fa:	a2 81       	ldd	r26, Z+2	; 0x02
    81fc:	b3 81       	ldd	r27, Z+3	; 0x03
    81fe:	84 0f       	add	r24, r20
    8200:	95 1f       	adc	r25, r21
    8202:	a6 1f       	adc	r26, r22
    8204:	b7 1f       	adc	r27, r23
    8206:	f7 01       	movw	r30, r14
    8208:	80 83       	st	Z, r24
    820a:	91 83       	std	Z+1, r25	; 0x01
    820c:	a2 83       	std	Z+2, r26	; 0x02
    820e:	b3 83       	std	Z+3, r27	; 0x03
    8210:	24 96       	adiw	r28, 0x04	; 4
    8212:	c0 17       	cp	r28, r16
    8214:	d1 07       	cpc	r29, r17
    8216:	41 f6       	brne	.-112    	; 0x81a8 <calc_next_frame+0x28>
    8218:	df 91       	pop	r29
    821a:	cf 91       	pop	r28
    821c:	1f 91       	pop	r17
    821e:	0f 91       	pop	r16
    8220:	ff 90       	pop	r15
    8222:	ef 90       	pop	r14
    8224:	df 90       	pop	r13
    8226:	cf 90       	pop	r12
    8228:	bf 90       	pop	r11
    822a:	af 90       	pop	r10
    822c:	9f 90       	pop	r9
    822e:	8f 90       	pop	r8
    8230:	08 95       	ret

00008232 <isr_dma_dac_ch0_B>:
    8232:	0f 93       	push	r16
    8234:	1f 93       	push	r17
    8236:	cf 93       	push	r28
    8238:	df 93       	push	r29
    823a:	1f 92       	push	r1
    823c:	cd b7       	in	r28, 0x3d	; 61
    823e:	de b7       	in	r29, 0x3e	; 62
    8240:	8f b7       	in	r24, 0x3f	; 63
    8242:	89 83       	std	Y+1, r24	; 0x01
    8244:	f8 94       	cli
    8246:	99 81       	ldd	r25, Y+1	; 0x01
    8248:	e0 e1       	ldi	r30, 0x10	; 16
    824a:	f1 e0       	ldi	r31, 0x01	; 1
    824c:	80 81       	ld	r24, Z
    824e:	80 68       	ori	r24, 0x80	; 128
    8250:	80 83       	st	Z, r24
    8252:	9f bf       	out	0x3f, r25	; 63
    8254:	78 94       	sei
    8256:	01 e7       	ldi	r16, 0x71	; 113
    8258:	18 e2       	ldi	r17, 0x28	; 40
    825a:	27 e0       	ldi	r18, 0x07	; 7
    825c:	30 e2       	ldi	r19, 0x20	; 32
    825e:	49 e7       	ldi	r20, 0x79	; 121
    8260:	58 e2       	ldi	r21, 0x28	; 40
    8262:	65 e7       	ldi	r22, 0x75	; 117
    8264:	78 e2       	ldi	r23, 0x28	; 40
    8266:	81 e5       	ldi	r24, 0x51	; 81
    8268:	98 e2       	ldi	r25, 0x28	; 40
    826a:	8a df       	rcall	.-236    	; 0x8180 <calc_next_frame>
    826c:	0f 90       	pop	r0
    826e:	df 91       	pop	r29
    8270:	cf 91       	pop	r28
    8272:	1f 91       	pop	r17
    8274:	0f 91       	pop	r16
    8276:	08 95       	ret

00008278 <isr_dma_dac_ch0_A>:
    8278:	0f 93       	push	r16
    827a:	1f 93       	push	r17
    827c:	cf 93       	push	r28
    827e:	df 93       	push	r29
    8280:	1f 92       	push	r1
    8282:	cd b7       	in	r28, 0x3d	; 61
    8284:	de b7       	in	r29, 0x3e	; 62
    8286:	8f b7       	in	r24, 0x3f	; 63
    8288:	89 83       	std	Y+1, r24	; 0x01
    828a:	f8 94       	cli
    828c:	99 81       	ldd	r25, Y+1	; 0x01
    828e:	e0 e2       	ldi	r30, 0x20	; 32
    8290:	f1 e0       	ldi	r31, 0x01	; 1
    8292:	80 81       	ld	r24, Z
    8294:	80 68       	ori	r24, 0x80	; 128
    8296:	80 83       	st	Z, r24
    8298:	9f bf       	out	0x3f, r25	; 63
    829a:	78 94       	sei
    829c:	01 e7       	ldi	r16, 0x71	; 113
    829e:	18 e2       	ldi	r17, 0x28	; 40
    82a0:	27 e0       	ldi	r18, 0x07	; 7
    82a2:	30 e2       	ldi	r19, 0x20	; 32
    82a4:	49 e7       	ldi	r20, 0x79	; 121
    82a6:	58 e2       	ldi	r21, 0x28	; 40
    82a8:	65 e7       	ldi	r22, 0x75	; 117
    82aa:	78 e2       	ldi	r23, 0x28	; 40
    82ac:	81 e3       	ldi	r24, 0x31	; 49
    82ae:	98 e2       	ldi	r25, 0x28	; 40
    82b0:	67 df       	rcall	.-306    	; 0x8180 <calc_next_frame>
    82b2:	0f 90       	pop	r0
    82b4:	df 91       	pop	r29
    82b6:	cf 91       	pop	r28
    82b8:	1f 91       	pop	r17
    82ba:	0f 91       	pop	r16
    82bc:	08 95       	ret

000082be <usb_callback_suspend_action>:
    82be:	08 95       	ret

000082c0 <usb_callback_resume_action>:
    82c0:	08 95       	ret

000082c2 <usb_callback_remotewakeup_enable>:
    82c2:	08 95       	ret

000082c4 <usb_callback_remotewakeup_disable>:
    82c4:	08 95       	ret

000082c6 <usb_callback_cdc_enable>:

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = true;
    82c6:	81 e0       	ldi	r24, 0x01	; 1
    82c8:	80 93 8b 29 	sts	0x298B, r24	; 0x80298b <usb_cdc_transfers_autorized>
	return true;
}
    82cc:	08 95       	ret

000082ce <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = false;
    82ce:	10 92 8b 29 	sts	0x298B, r1	; 0x80298b <usb_cdc_transfers_autorized>
    82d2:	08 95       	ret

000082d4 <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    82d4:	08 95       	ret

000082d6 <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    82d6:	08 95       	ret

000082d8 <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    82d8:	08 95       	ret

000082da <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
    82da:	08 95       	ret

000082dc <usb_callback_tx_empty_notify>:

}

void usb_callback_tx_empty_notify(uint8_t port)
{
    82dc:	08 95       	ret

000082de <main>:
	}
}


int main(void)
{
    82de:	2f 92       	push	r2
    82e0:	3f 92       	push	r3
    82e2:	4f 92       	push	r4
    82e4:	5f 92       	push	r5
    82e6:	6f 92       	push	r6
    82e8:	7f 92       	push	r7
    82ea:	8f 92       	push	r8
    82ec:	9f 92       	push	r9
    82ee:	af 92       	push	r10
    82f0:	bf 92       	push	r11
    82f2:	cf 92       	push	r12
    82f4:	df 92       	push	r13
    82f6:	ef 92       	push	r14
    82f8:	ff 92       	push	r15
    82fa:	0f 93       	push	r16
    82fc:	1f 93       	push	r17
    82fe:	cf 93       	push	r28
    8300:	df 93       	push	r29
    8302:	cd b7       	in	r28, 0x3d	; 61
    8304:	de b7       	in	r29, 0x3e	; 62
    8306:	ce 57       	subi	r28, 0x7E	; 126
    8308:	d1 09       	sbc	r29, r1
    830a:	cd bf       	out	0x3d, r28	; 61
    830c:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	g_workmode = WORKMODE_INIT;
    830e:	77 24       	eor	r7, r7
    8310:	73 94       	inc	r7
    8312:	70 92 8c 29 	sts	0x298C, r7	; 0x80298c <g_workmode>
	irq_initialize_vectors();
    8316:	e0 ea       	ldi	r30, 0xA0	; 160
    8318:	f0 e0       	ldi	r31, 0x00	; 0
    831a:	17 e0       	ldi	r17, 0x07	; 7
    831c:	12 83       	std	Z+2, r17	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    831e:	12 83       	std	Z+2, r17	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    8320:	82 81       	ldd	r24, Z+2	; 0x02
    8322:	8f 77       	andi	r24, 0x7F	; 127
    8324:	82 83       	std	Z+2, r24	; 0x02
		PMIC.INTPRI = 0;
    8326:	11 82       	std	Z+1, r1	; 0x01
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    8328:	0e 94 26 4b 	call	0x964c	; 0x964c <sysclk_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    832c:	e5 ee       	ldi	r30, 0xE5	; 229
    832e:	fa e2       	ldi	r31, 0x2A	; 42
    8330:	10 82       	st	Z, r1
    8332:	11 82       	std	Z+1, r1	; 0x01
    8334:	12 82       	std	Z+2, r1	; 0x02
    8336:	13 82       	std	Z+3, r1	; 0x03
    8338:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    833a:	75 82       	std	Z+5, r7	; 0x05

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    833c:	0e 94 13 16 	call	0x2c26	; 0x2c26 <rtc_init>
}


static void rtc_start(void)
{
	rtc_set_callback(isr_rtc_alarm);
    8340:	83 e4       	ldi	r24, 0x43	; 67
    8342:	9e e3       	ldi	r25, 0x3E	; 62
    8344:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    8348:	62 e0       	ldi	r22, 0x02	; 2
    834a:	80 e0       	ldi	r24, 0x00	; 0
    834c:	0e 94 a7 4b 	call	0x974e	; 0x974e <sysclk_enable_module>

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH0
    8350:	e0 e8       	ldi	r30, 0x80	; 128
    8352:	f1 e0       	ldi	r31, 0x01	; 1
    8354:	86 ec       	ldi	r24, 0xC6	; 198
    8356:	80 83       	st	Z, r24
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    8358:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH1MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH1
    835a:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH1 no digital filtering
    835c:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH2MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH2
    835e:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
    8360:	12 86       	std	Z+10, r1	; 0x0a
	EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH3
    8362:	83 83       	std	Z+3, r24	; 0x03
	EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering
    8364:	13 86       	std	Z+11, r1	; 0x0b

	/* DAC - event 4 */
	EVSYS.CH4MUX  = EVSYS_CHMUX_TCE1_OVF_gc;									// TCE1 overflow goes to EVSYS CH4
    8366:	88 ee       	ldi	r24, 0xE8	; 232
    8368:	84 83       	std	Z+4, r24	; 0x04
	EVSYS.CH4CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH4 no digital filtering
    836a:	14 86       	std	Z+12, r1	; 0x0c

static void tc_init(void)
{
	/* TCC0: VCTCXO PWM signal generation and ADCA & ADCB */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 2048);						// Init PWM structure and enable timer - running with 2048 Hz --> 2 Hz averaged data
    836c:	20 e0       	ldi	r18, 0x00	; 0
    836e:	38 e0       	ldi	r19, 0x08	; 8
    8370:	43 e0       	ldi	r20, 0x03	; 3
    8372:	60 e0       	ldi	r22, 0x00	; 0
    8374:	ce 01       	movw	r24, r28
    8376:	01 96       	adiw	r24, 0x01	; 1
    8378:	61 db       	rcall	.-2366   	; 0x7a3c <pwm_init>
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM here. Percentage with 1% granularity is to coarse, use driver access instead
    837a:	6d e2       	ldi	r22, 0x2D	; 45
    837c:	ce 01       	movw	r24, r28
    837e:	01 96       	adiw	r24, 0x01	; 1
    8380:	25 dc       	rcall	.-1974   	; 0x7bcc <pwm_start>
	tc_write_cc_buffer(&TCC0, TC_CCC, (uint16_t) (0.5f + pwm_vctcxo_cfg.period * C_VCTCXO_DEFAULT_VOLTS / C_VCTCXO_PWM_HI_VOLTS));	// Initial value for VCTCXO
    8382:	6e 81       	ldd	r22, Y+6	; 0x06
    8384:	7f 81       	ldd	r23, Y+7	; 0x07
    8386:	80 e0       	ldi	r24, 0x00	; 0
    8388:	90 e0       	ldi	r25, 0x00	; 0
    838a:	0e 94 d3 56 	call	0xada6	; 0xada6 <__floatunsisf>
    838e:	20 e0       	ldi	r18, 0x00	; 0
    8390:	30 e0       	ldi	r19, 0x00	; 0
    8392:	40 ec       	ldi	r20, 0xC0	; 192
    8394:	5f e3       	ldi	r21, 0x3F	; 63
    8396:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    839a:	27 e2       	ldi	r18, 0x27	; 39
    839c:	31 e3       	ldi	r19, 0x31	; 49
    839e:	40 e5       	ldi	r20, 0x50	; 80
    83a0:	50 e4       	ldi	r21, 0x40	; 64
    83a2:	0e 94 3a 56 	call	0xac74	; 0xac74 <__divsf3>
    83a6:	20 e0       	ldi	r18, 0x00	; 0
    83a8:	30 e0       	ldi	r19, 0x00	; 0
    83aa:	40 e0       	ldi	r20, 0x00	; 0
    83ac:	5f e3       	ldi	r21, 0x3F	; 63
    83ae:	0e 94 d3 55 	call	0xaba6	; 0xaba6 <__addsf3>
    83b2:	0e 94 a7 56 	call	0xad4e	; 0xad4e <__fixunssfsi>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    83b6:	60 93 3c 08 	sts	0x083C, r22	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    83ba:	70 93 3d 08 	sts	0x083D, r23	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>

	/* TCE1: DAC clock */
	tc_enable(&TCE1);
    83be:	80 e4       	ldi	r24, 0x40	; 64
    83c0:	9a e0       	ldi	r25, 0x0A	; 10
    83c2:	0e 94 c7 32 	call	0x658e	; 0x658e <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    83c6:	e0 e4       	ldi	r30, 0x40	; 64
    83c8:	fa e0       	ldi	r31, 0x0A	; 10
    83ca:	81 81       	ldd	r24, Z+1	; 0x01
    83cc:	88 7f       	andi	r24, 0xF8	; 248
    83ce:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    83d0:	80 e7       	ldi	r24, 0x70	; 112
    83d2:	92 e0       	ldi	r25, 0x02	; 2
    83d4:	86 a3       	std	Z+38, r24	; 0x26
    83d6:	97 a3       	std	Z+39, r25	; 0x27


static void adc_init(void)
{
	/* Disable digital circuits of ADC pins */
	PORTA_PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    83d8:	e0 e1       	ldi	r30, 0x10	; 16
    83da:	f6 e0       	ldi	r31, 0x06	; 6
    83dc:	80 81       	ld	r24, Z
    83de:	87 60       	ori	r24, 0x07	; 7
    83e0:	80 83       	st	Z, r24
	PORTA_PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    83e2:	e1 e1       	ldi	r30, 0x11	; 17
    83e4:	f6 e0       	ldi	r31, 0x06	; 6
    83e6:	80 81       	ld	r24, Z
    83e8:	87 60       	ori	r24, 0x07	; 7
    83ea:	80 83       	st	Z, r24
	PORTA_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    83ec:	e2 e1       	ldi	r30, 0x12	; 18
    83ee:	f6 e0       	ldi	r31, 0x06	; 6
    83f0:	80 81       	ld	r24, Z
    83f2:	87 60       	ori	r24, 0x07	; 7
    83f4:	80 83       	st	Z, r24
	PORTA_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    83f6:	e3 e1       	ldi	r30, 0x13	; 19
    83f8:	f6 e0       	ldi	r31, 0x06	; 6
    83fa:	80 81       	ld	r24, Z
    83fc:	87 60       	ori	r24, 0x07	; 7
    83fe:	80 83       	st	Z, r24
	PORTA_PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    8400:	e4 e1       	ldi	r30, 0x14	; 20
    8402:	f6 e0       	ldi	r31, 0x06	; 6
    8404:	80 81       	ld	r24, Z
    8406:	87 60       	ori	r24, 0x07	; 7
    8408:	80 83       	st	Z, r24
	PORTA_PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    840a:	e5 e1       	ldi	r30, 0x15	; 21
    840c:	f6 e0       	ldi	r31, 0x06	; 6
    840e:	80 81       	ld	r24, Z
    8410:	87 60       	ori	r24, 0x07	; 7
    8412:	80 83       	st	Z, r24
	PORTB_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    8414:	e2 e3       	ldi	r30, 0x32	; 50
    8416:	f6 e0       	ldi	r31, 0x06	; 6
    8418:	80 81       	ld	r24, Z
    841a:	87 60       	ori	r24, 0x07	; 7
    841c:	80 83       	st	Z, r24
	PORTB_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    841e:	e3 e3       	ldi	r30, 0x33	; 51
    8420:	f6 e0       	ldi	r31, 0x06	; 6
    8422:	80 81       	ld	r24, Z
    8424:	87 60       	ori	r24, 0x07	; 7
    8426:	80 83       	st	Z, r24

	/* Prepare the structures */
	adc_read_configuration(&ADC_VCTCXO_5V0_VBAT,							&g_adc_a_conf);
    8428:	66 e1       	ldi	r22, 0x16	; 22
    842a:	79 e2       	ldi	r23, 0x29	; 41
    842c:	80 e0       	ldi	r24, 0x00	; 0
    842e:	92 e0       	ldi	r25, 0x02	; 2
    8430:	0e 94 ce 2a 	call	0x559c	; 0x559c <adc_read_configuration>
	adcch_read_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    8434:	42 e1       	ldi	r20, 0x12	; 18
    8436:	59 e2       	ldi	r21, 0x29	; 41
    8438:	61 e0       	ldi	r22, 0x01	; 1
    843a:	80 e0       	ldi	r24, 0x00	; 0
    843c:	92 e0       	ldi	r25, 0x02	; 2
    843e:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <adcch_read_configuration>
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    8442:	4e e0       	ldi	r20, 0x0E	; 14
    8444:	59 e2       	ldi	r21, 0x29	; 41
    8446:	62 e0       	ldi	r22, 0x02	; 2
    8448:	80 e0       	ldi	r24, 0x00	; 0
    844a:	92 e0       	ldi	r25, 0x02	; 2
    844c:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <adcch_read_configuration>
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    8450:	4a e0       	ldi	r20, 0x0A	; 10
    8452:	59 e2       	ldi	r21, 0x29	; 41
    8454:	64 e0       	ldi	r22, 0x04	; 4
    8456:	80 e0       	ldi	r24, 0x00	; 0
    8458:	92 e0       	ldi	r25, 0x02	; 2
    845a:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <adcch_read_configuration>
	adcch_read_configuration(&ADC_SILENCE, ADC_SILENCE_CH,					&g_adcch_silence_conf);
    845e:	46 e0       	ldi	r20, 0x06	; 6
    8460:	59 e2       	ldi	r21, 0x29	; 41
    8462:	68 e0       	ldi	r22, 0x08	; 8
    8464:	80 e0       	ldi	r24, 0x00	; 0
    8466:	92 e0       	ldi	r25, 0x02	; 2
    8468:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <adcch_read_configuration>
	adc_read_configuration(&ADC_TEMP,										&g_adc_b_conf);
    846c:	6f ef       	ldi	r22, 0xFF	; 255
    846e:	78 e2       	ldi	r23, 0x28	; 40
    8470:	80 e4       	ldi	r24, 0x40	; 64
    8472:	92 e0       	ldi	r25, 0x02	; 2
    8474:	0e 94 ce 2a 	call	0x559c	; 0x559c <adc_read_configuration>
	adcch_read_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    8478:	4b ef       	ldi	r20, 0xFB	; 251
    847a:	58 e2       	ldi	r21, 0x28	; 40
    847c:	61 e0       	ldi	r22, 0x01	; 1
    847e:	80 e4       	ldi	r24, 0x40	; 64
    8480:	92 e0       	ldi	r25, 0x02	; 2
    8482:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <adcch_read_configuration>
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    8486:	a6 e1       	ldi	r26, 0x16	; 22
    8488:	b9 e2       	ldi	r27, 0x29	; 41
    848a:	83 e0       	ldi	r24, 0x03	; 3
    848c:	14 96       	adiw	r26, 0x04	; 4
    848e:	8c 93       	st	X, r24
    8490:	14 97       	sbiw	r26, 0x04	; 4
    8492:	6f ef       	ldi	r22, 0xFF	; 255
    8494:	78 e2       	ldi	r23, 0x28	; 40
    8496:	fb 01       	movw	r30, r22
    8498:	14 83       	std	Z+4, r17	; 0x04
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_disable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl &= ~int_inp;
    849a:	12 96       	adiw	r26, 0x02	; 2
    849c:	3c 91       	ld	r19, X
    849e:	12 97       	sbiw	r26, 0x02	; 2
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    84a0:	22 81       	ldd	r18, Z+2	; 0x02
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    84a2:	11 96       	adiw	r26, 0x01	; 1
    84a4:	9c 91       	ld	r25, X
    84a6:	11 97       	sbiw	r26, 0x01	; 1
    84a8:	81 81       	ldd	r24, Z+1	; 0x01
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    84aa:	02 e1       	ldi	r16, 0x12	; 18
    84ac:	19 e2       	ldi	r17, 0x29	; 41
    84ae:	f8 01       	movw	r30, r16
    84b0:	70 82       	st	Z, r7
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    84b2:	48 e0       	ldi	r20, 0x08	; 8
    84b4:	41 83       	std	Z+1, r20	; 0x01
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    84b6:	0f 2e       	mov	r0, r31
    84b8:	fe e0       	ldi	r31, 0x0E	; 14
    84ba:	8f 2e       	mov	r8, r31
    84bc:	f9 e2       	ldi	r31, 0x29	; 41
    84be:	9f 2e       	mov	r9, r31
    84c0:	f0 2d       	mov	r31, r0
    84c2:	f4 01       	movw	r30, r8
    84c4:	70 82       	st	Z, r7
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    84c6:	50 e2       	ldi	r21, 0x20	; 32
    84c8:	51 83       	std	Z+1, r21	; 0x01
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    84ca:	0f 2e       	mov	r0, r31
    84cc:	fa e0       	ldi	r31, 0x0A	; 10
    84ce:	af 2e       	mov	r10, r31
    84d0:	f9 e2       	ldi	r31, 0x29	; 41
    84d2:	bf 2e       	mov	r11, r31
    84d4:	f0 2d       	mov	r31, r0
    84d6:	f5 01       	movw	r30, r10
    84d8:	70 82       	st	Z, r7
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    84da:	58 e2       	ldi	r21, 0x28	; 40
    84dc:	51 83       	std	Z+1, r21	; 0x01
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    84de:	0f 2e       	mov	r0, r31
    84e0:	f6 e0       	ldi	r31, 0x06	; 6
    84e2:	cf 2e       	mov	r12, r31
    84e4:	f9 e2       	ldi	r31, 0x29	; 41
    84e6:	df 2e       	mov	r13, r31
    84e8:	f0 2d       	mov	r31, r0
    84ea:	f6 01       	movw	r30, r12
    84ec:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    84ee:	41 83       	std	Z+1, r20	; 0x01
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    84f0:	0f 2e       	mov	r0, r31
    84f2:	fb ef       	ldi	r31, 0xFB	; 251
    84f4:	ef 2e       	mov	r14, r31
    84f6:	f8 e2       	ldi	r31, 0x28	; 40
    84f8:	ff 2e       	mov	r15, r31
    84fa:	f0 2d       	mov	r31, r0
    84fc:	f7 01       	movw	r30, r14
    84fe:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    8500:	11 82       	std	Z+1, r1	; 0x01
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    8502:	3e 78       	andi	r19, 0x8E	; 142
    8504:	32 62       	ori	r19, 0x22	; 34
    8506:	12 96       	adiw	r26, 0x02	; 2
    8508:	3c 93       	st	X, r19
    850a:	12 97       	sbiw	r26, 0x02	; 2
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    850c:	2f 78       	andi	r18, 0x8F	; 143
    850e:	23 60       	ori	r18, 0x03	; 3
    8510:	fb 01       	movw	r30, r22
    8512:	22 83       	std	Z+2, r18	; 0x02
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    8514:	22 e0       	ldi	r18, 0x02	; 2
    8516:	f8 01       	movw	r30, r16
    8518:	23 83       	std	Z+3, r18	; 0x03
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    851a:	91 70       	andi	r25, 0x01	; 1
    851c:	90 64       	ori	r25, 0x40	; 64
    851e:	11 96       	adiw	r26, 0x01	; 1
    8520:	9c 93       	st	X, r25
    8522:	11 97       	sbiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    8524:	9c e0       	ldi	r25, 0x0C	; 12
    8526:	13 96       	adiw	r26, 0x03	; 3
    8528:	9c 93       	st	X, r25
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    852a:	81 70       	andi	r24, 0x01	; 1
    852c:	80 66       	ori	r24, 0x60	; 96
    852e:	db 01       	movw	r26, r22
    8530:	11 96       	adiw	r26, 0x01	; 1
    8532:	8c 93       	st	X, r24
    8534:	11 97       	sbiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    8536:	13 96       	adiw	r26, 0x03	; 3
    8538:	7c 92       	st	X, r7
	/* Trigger */
	adc_set_conversion_trigger(&g_adc_a_conf, ADC_TRIG_EVENT_SINGLE, 4, 1);
	adc_set_conversion_trigger(&g_adc_b_conf, ADC_TRIG_EVENT_SINGLE, 1, 0);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, isr_adc_a);
    853a:	6c e4       	ldi	r22, 0x4C	; 76
    853c:	7e e3       	ldi	r23, 0x3E	; 62
    853e:	80 e0       	ldi	r24, 0x00	; 0
    8540:	92 e0       	ldi	r25, 0x02	; 2
    8542:	0e 94 48 28 	call	0x5090	; 0x5090 <adc_set_callback>
	adc_set_callback(&ADCB, isr_adc_b);
    8546:	62 ec       	ldi	r22, 0xC2	; 194
    8548:	7f e3       	ldi	r23, 0x3F	; 63
    854a:	80 e4       	ldi	r24, 0x40	; 64
    854c:	92 e0       	ldi	r25, 0x02	; 2
    854e:	0e 94 48 28 	call	0x5090	; 0x5090 <adc_set_callback>
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    8552:	f4 01       	movw	r30, r8
    8554:	32 81       	ldd	r19, Z+2	; 0x02
    8556:	d5 01       	movw	r26, r10
    8558:	12 96       	adiw	r26, 0x02	; 2
    855a:	2c 91       	ld	r18, X
    855c:	f6 01       	movw	r30, r12
    855e:	92 81       	ldd	r25, Z+2	; 0x02
    8560:	d7 01       	movw	r26, r14
    8562:	12 96       	adiw	r26, 0x02	; 2
    8564:	8c 91       	ld	r24, X
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    8566:	f8 01       	movw	r30, r16
    8568:	42 81       	ldd	r20, Z+2	; 0x02
    856a:	40 7f       	andi	r20, 0xF0	; 240
    856c:	41 60       	ori	r20, 0x01	; 1
    856e:	42 83       	std	Z+2, r20	; 0x02
    8570:	30 7f       	andi	r19, 0xF0	; 240
    8572:	31 60       	ori	r19, 0x01	; 1
    8574:	d4 01       	movw	r26, r8
    8576:	12 96       	adiw	r26, 0x02	; 2
    8578:	3c 93       	st	X, r19
    857a:	20 7f       	andi	r18, 0xF0	; 240
    857c:	21 60       	ori	r18, 0x01	; 1
    857e:	f5 01       	movw	r30, r10
    8580:	22 83       	std	Z+2, r18	; 0x02
    8582:	90 7f       	andi	r25, 0xF0	; 240
    8584:	91 60       	ori	r25, 0x01	; 1
    8586:	d6 01       	movw	r26, r12
    8588:	12 96       	adiw	r26, 0x02	; 2
    858a:	9c 93       	st	X, r25
    858c:	80 7f       	andi	r24, 0xF0	; 240
    858e:	81 60       	ori	r24, 0x01	; 1
    8590:	f7 01       	movw	r30, r14
    8592:	82 83       	std	Z+2, r24	; 0x02
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);
	adcch_enable_interrupt(&g_adcch_silence_conf);
	adcch_enable_interrupt(&g_adcch_temp_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,											&g_adc_a_conf);
    8594:	66 e1       	ldi	r22, 0x16	; 22
    8596:	79 e2       	ldi	r23, 0x29	; 41
    8598:	80 e0       	ldi	r24, 0x00	; 0
    859a:	92 e0       	ldi	r25, 0x02	; 2
    859c:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <adc_write_configuration>
	adcch_write_configuration(&ADC_VCTCXO_5V0_VBAT,	ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    85a0:	a8 01       	movw	r20, r16
    85a2:	61 e0       	ldi	r22, 0x01	; 1
    85a4:	80 e0       	ldi	r24, 0x00	; 0
    85a6:	92 e0       	ldi	r25, 0x02	; 2
    85a8:	0e 94 07 2b 	call	0x560e	; 0x560e <adcch_write_configuration>
	adcch_write_configuration(&ADC_IO_ADC4,			ADC_IO_ADC4_CH,			&g_adcch_io_adc4_conf);
    85ac:	a4 01       	movw	r20, r8
    85ae:	62 e0       	ldi	r22, 0x02	; 2
    85b0:	80 e0       	ldi	r24, 0x00	; 0
    85b2:	92 e0       	ldi	r25, 0x02	; 2
    85b4:	0e 94 07 2b 	call	0x560e	; 0x560e <adcch_write_configuration>
	adcch_write_configuration(&ADC_IO_ADC5,			ADC_IO_ADC5_CH,			&g_adcch_io_adc5_conf);
    85b8:	a5 01       	movw	r20, r10
    85ba:	64 e0       	ldi	r22, 0x04	; 4
    85bc:	80 e0       	ldi	r24, 0x00	; 0
    85be:	92 e0       	ldi	r25, 0x02	; 2
    85c0:	0e 94 07 2b 	call	0x560e	; 0x560e <adcch_write_configuration>
	adcch_write_configuration(&ADC_SILENCE,			ADC_SILENCE_CH,			&g_adcch_silence_conf);
    85c4:	a6 01       	movw	r20, r12
    85c6:	68 e0       	ldi	r22, 0x08	; 8
    85c8:	80 e0       	ldi	r24, 0x00	; 0
    85ca:	92 e0       	ldi	r25, 0x02	; 2
    85cc:	0e 94 07 2b 	call	0x560e	; 0x560e <adcch_write_configuration>
	adc_write_configuration(&ADCB,											&g_adc_b_conf);
    85d0:	6f ef       	ldi	r22, 0xFF	; 255
    85d2:	78 e2       	ldi	r23, 0x28	; 40
    85d4:	80 e4       	ldi	r24, 0x40	; 64
    85d6:	92 e0       	ldi	r25, 0x02	; 2
    85d8:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <adc_write_configuration>
	adcch_write_configuration(&ADC_TEMP,			ADC_TEMP_CH,			&g_adcch_temp_conf);
    85dc:	a7 01       	movw	r20, r14
    85de:	61 e0       	ldi	r22, 0x01	; 1
    85e0:	80 e4       	ldi	r24, 0x40	; 64
    85e2:	92 e0       	ldi	r25, 0x02	; 2
    85e4:	0e 94 07 2b 	call	0x560e	; 0x560e <adcch_write_configuration>
    85e8:	61 e2       	ldi	r22, 0x21	; 33
    85ea:	70 e0       	ldi	r23, 0x00	; 0
    85ec:	82 e0       	ldi	r24, 0x02	; 2
    85ee:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    85f2:	08 2f       	mov	r16, r24
    85f4:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    85f6:	10 2f       	mov	r17, r16
    85f8:	00 27       	eor	r16, r16
    85fa:	60 e2       	ldi	r22, 0x20	; 32
    85fc:	70 e0       	ldi	r23, 0x00	; 0
    85fe:	82 e0       	ldi	r24, 0x02	; 2
    8600:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    8604:	08 2b       	or	r16, r24

	/* Get production signature for calibration */
	ADCA_CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    8606:	00 93 0c 02 	sts	0x020C, r16	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    860a:	10 93 0d 02 	sts	0x020D, r17	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    860e:	65 e2       	ldi	r22, 0x25	; 37
    8610:	70 e0       	ldi	r23, 0x00	; 0
    8612:	82 e0       	ldi	r24, 0x02	; 2
    8614:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    8618:	08 2f       	mov	r16, r24
    861a:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    861c:	10 2f       	mov	r17, r16
    861e:	00 27       	eor	r16, r16
    8620:	64 e2       	ldi	r22, 0x24	; 36
    8622:	70 e0       	ldi	r23, 0x00	; 0
    8624:	82 e0       	ldi	r24, 0x02	; 2
    8626:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCBCAL0);
    862a:	08 2b       	or	r16, r24
	ADCB_CAL = adc_get_calibration_data(ADC_CAL_ADCB);
    862c:	00 93 4c 02 	sts	0x024C, r16	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
    8630:	10 93 4d 02 	sts	0x024D, r17	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
	//rtc_set_callback(cb_rtc_alarm);

	evsys_init();		// Event system
	tc_init();			// Timers
	adc_init();			// ADC
	if (g_dac_enabled) {
    8634:	80 91 8d 29 	lds	r24, 0x298D	; 0x80298d <g_dac_enabled>
    8638:	88 23       	and	r24, r24
    863a:	09 f4       	brne	.+2      	; 0x863e <main+0x360>
    863c:	6c c0       	rjmp	.+216    	; 0x8716 <main+0x438>
static void isr_dma_dac_ch0_B(enum dma_channel_status status);
static void task_dac(uint32_t now);

static void dac_init(void)
{
	dac_read_configuration(&DAC_DAC, &dac_conf);
    863e:	63 e9       	ldi	r22, 0x93	; 147
    8640:	78 e2       	ldi	r23, 0x28	; 40
    8642:	80 e2       	ldi	r24, 0x20	; 32
    8644:	93 e0       	ldi	r25, 0x03	; 3
    8646:	0e 94 44 2c 	call	0x5888	; 0x5888 <dac_read_configuration>
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    864a:	e3 e9       	ldi	r30, 0x93	; 147
    864c:	f8 e2       	ldi	r31, 0x28	; 40
    864e:	81 e0       	ldi	r24, 0x01	; 1
    8650:	82 83       	std	Z+2, r24	; 0x02
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    8652:	8c e0       	ldi	r24, 0x0C	; 12
    8654:	80 83       	st	Z, r24
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    8656:	81 81       	ldd	r24, Z+1	; 0x01
    8658:	8c 79       	andi	r24, 0x9C	; 156
    865a:	83 64       	ori	r24, 0x43	; 67
    865c:	81 83       	std	Z+1, r24	; 0x01
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    865e:	84 e0       	ldi	r24, 0x04	; 4
    8660:	83 83       	std	Z+3, r24	; 0x03
	dac_set_conversion_parameters(&dac_conf, DAC_REF_BANDGAP, DAC_ADJ_LEFT);
	dac_set_active_channel(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 0);
	dac_set_conversion_trigger(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 4);
	dac_write_configuration(&DAC_DAC, &dac_conf);
    8662:	bf 01       	movw	r22, r30
    8664:	80 e2       	ldi	r24, 0x20	; 32
    8666:	93 e0       	ldi	r25, 0x03	; 3
    8668:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <dac_write_configuration>
    866c:	62 e3       	ldi	r22, 0x32	; 50
    866e:	70 e0       	ldi	r23, 0x00	; 0
    8670:	82 e0       	ldi	r24, 0x02	; 2
    8672:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>

	/* Get production signature for calibration */
	DACB_CH0OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB0_OFFSET);
    8676:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    867a:	63 e3       	ldi	r22, 0x33	; 51
    867c:	70 e0       	ldi	r23, 0x00	; 0
    867e:	82 e0       	ldi	r24, 0x02	; 2
    8680:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
	DACB_CH0GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB0_GAIN);
    8684:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    8688:	66 e3       	ldi	r22, 0x36	; 54
    868a:	70 e0       	ldi	r23, 0x00	; 0
    868c:	82 e0       	ldi	r24, 0x02	; 2
    868e:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
	DACB_CH1OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB1_OFFSET);
    8692:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    8696:	67 e3       	ldi	r22, 0x37	; 55
    8698:	70 e0       	ldi	r23, 0x00	; 0
    869a:	82 e0       	ldi	r24, 0x02	; 2
    869c:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
	DACB_CH1GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB1_GAIN);
    86a0:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
	}
}

static void dma_init(void)
{
	memset(&dmach_dma0_conf, 0, sizeof(dmach_dma0_conf));	// DACB channel 0 - linked with dma1
    86a4:	a8 e8       	ldi	r26, 0x88	; 136
    86a6:	b8 e2       	ldi	r27, 0x28	; 40
    86a8:	8b e0       	ldi	r24, 0x0B	; 11
    86aa:	fd 01       	movw	r30, r26
    86ac:	88 2e       	mov	r8, r24
    86ae:	11 92       	st	Z+, r1
    86b0:	8a 94       	dec	r8
    86b2:	e9 f7       	brne	.-6      	; 0x86ae <main+0x3d0>
	memset(&dmach_dma1_conf, 0, sizeof(dmach_dma1_conf));	// DACB channel 0 - linked with dma0
    86b4:	6d e7       	ldi	r22, 0x7D	; 125
    86b6:	78 e2       	ldi	r23, 0x28	; 40
    86b8:	fb 01       	movw	r30, r22
    86ba:	11 92       	st	Z+, r1
    86bc:	8a 95       	dec	r24
    86be:	e9 f7       	brne	.-6      	; 0x86ba <main+0x3dc>
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    86c0:	80 e2       	ldi	r24, 0x20	; 32
    86c2:	90 e0       	ldi	r25, 0x00	; 0
    86c4:	14 96       	adiw	r26, 0x04	; 4
    86c6:	8d 93       	st	X+, r24
    86c8:	9c 93       	st	X, r25
    86ca:	15 97       	sbiw	r26, 0x05	; 5
    86cc:	fb 01       	movw	r30, r22
    86ce:	84 83       	std	Z+4, r24	; 0x04
    86d0:	95 83       	std	Z+5, r25	; 0x05
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    86d2:	81 e3       	ldi	r24, 0x31	; 49
    86d4:	98 e2       	ldi	r25, 0x28	; 40
    86d6:	17 96       	adiw	r26, 0x07	; 7
    86d8:	8d 93       	st	X+, r24
    86da:	9c 93       	st	X, r25
    86dc:	18 97       	sbiw	r26, 0x08	; 8
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    86de:	29 ed       	ldi	r18, 0xD9	; 217
    86e0:	12 96       	adiw	r26, 0x02	; 2
    86e2:	2c 93       	st	X, r18
    86e4:	12 97       	sbiw	r26, 0x02	; 2
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    86e6:	88 e3       	ldi	r24, 0x38	; 56
    86e8:	93 e0       	ldi	r25, 0x03	; 3
    86ea:	19 96       	adiw	r26, 0x09	; 9
    86ec:	8d 93       	st	X+, r24
    86ee:	9c 93       	st	X, r25
    86f0:	1a 97       	sbiw	r26, 0x0a	; 10
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    86f2:	41 e5       	ldi	r20, 0x51	; 81
    86f4:	58 e2       	ldi	r21, 0x28	; 40
    86f6:	47 83       	std	Z+7, r20	; 0x07
    86f8:	50 87       	std	Z+8, r21	; 0x08
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    86fa:	22 83       	std	Z+2, r18	; 0x02
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    86fc:	81 87       	std	Z+9, r24	; 0x09
    86fe:	92 87       	std	Z+10, r25	; 0x0a
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    8700:	95 e2       	ldi	r25, 0x25	; 37
    8702:	13 96       	adiw	r26, 0x03	; 3
    8704:	9c 93       	st	X, r25
    8706:	13 97       	sbiw	r26, 0x03	; 3
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    8708:	86 e0       	ldi	r24, 0x06	; 6
    870a:	8c 93       	st	X, r24
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    870c:	93 83       	std	Z+3, r25	; 0x03
	dma_channel_set_single_shot(&dmach_dma0_conf);

	dma_channel_set_trigger_source(&dmach_dma1_conf, DMA_CH_TRIGSRC_DACB_CH0_gc);
	dma_channel_set_single_shot(&dmach_dma1_conf);

	task_dac(rtc_get_time());																		// Calculate DDS increments
    870e:	80 83       	st	Z, r24
    8710:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <rtc_get_time>
	tc_init();			// Timers
	adc_init();			// ADC
	if (g_dac_enabled) {
		dac_init();		// DAC
	}
	twi_init();			// I2C / TWI
    8714:	75 dc       	rcall	.-1814   	; 0x8000 <task_dac>
    8716:	0e 94 34 19 	call	0x3268	; 0x3268 <twi_init>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    871a:	0e 94 47 28 	call	0x508e	; 0x508e <board_init>

	nvm_init(INT_FLASH);
    871e:	80 e0       	ldi	r24, 0x00	; 0
    8720:	0e 94 7e 14 	call	0x28fc	; 0x28fc <nvm_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    8724:	78 94       	sei
    8726:	00 e0       	ldi	r16, 0x00	; 0
    8728:	18 e0       	ldi	r17, 0x08	; 8
    872a:	d8 01       	movw	r26, r16
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    872c:	8c 91       	ld	r24, X
    872e:	80 7f       	andi	r24, 0xF0	; 240
    8730:	81 60       	ori	r24, 0x01	; 1

static void tc_start(void)
{
	/* ADC clock */
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);							// VCTCXO PWM start, output still is Z-state
	tc_set_overflow_interrupt_callback(&TCC0, isr_tcc0_ovfl);
    8732:	8c 93       	st	X, r24
    8734:	6f e5       	ldi	r22, 0x5F	; 95
    8736:	70 e4       	ldi	r23, 0x40	; 64
    8738:	80 e0       	ldi	r24, 0x00	; 0
    873a:	98 e0       	ldi	r25, 0x08	; 8
    873c:	0e 94 46 33 	call	0x668c	; 0x668c <tc_set_overflow_interrupt_callback>
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    8740:	f8 01       	movw	r30, r16
    8742:	86 81       	ldd	r24, Z+6	; 0x06
    8744:	8c 7f       	andi	r24, 0xFC	; 252
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    8746:	86 83       	std	Z+6, r24	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    8748:	86 81       	ldd	r24, Z+6	; 0x06
    874a:	81 60       	ori	r24, 0x01	; 1
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    874c:	86 83       	std	Z+6, r24	; 0x06
    874e:	e0 e4       	ldi	r30, 0x40	; 64
    8750:	fa e0       	ldi	r31, 0x0A	; 10
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    8752:	80 81       	ld	r24, Z
    8754:	80 7f       	andi	r24, 0xF0	; 240
    8756:	81 60       	ori	r24, 0x01	; 1
	/* All interrupt sources & PMIC are prepared until here - IRQ activation follows */
	cpu_irq_enable();

	/* Start of sub-modules */
	tc_start();			// All clocks and PWM timers start here
	if (g_dac_enabled) {
    8758:	80 83       	st	Z, r24
    875a:	80 91 8d 29 	lds	r24, 0x298D	; 0x80298d <g_dac_enabled>
    875e:	88 23       	and	r24, r24
    8760:	09 f4       	brne	.+2      	; 0x8764 <main+0x486>
	dma_init();
}

static void dac_start(void)
{
	dac_enable(&DACB);
    8762:	5d c0       	rjmp	.+186    	; 0x881e <main+0x540>
    8764:	80 e2       	ldi	r24, 0x20	; 32
    8766:	93 e0       	ldi	r25, 0x03	; 3
    8768:	0e 94 bc 2b 	call	0x5778	; 0x5778 <dac_enable>
	task_dac(rtc_get_time());																		// Calculate DDS increments
}

static void dma_start(void)
{
	dma_enable();
    876c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <dma_enable>

	dma_set_callback(DMA_CHANNEL_DACB_CH0_A, isr_dma_dac_ch0_A);
    8770:	6c e3       	ldi	r22, 0x3C	; 60
    8772:	71 e4       	ldi	r23, 0x41	; 65
    8774:	80 e0       	ldi	r24, 0x00	; 0
    8776:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <dma_set_callback>
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
    877a:	e8 e8       	ldi	r30, 0x88	; 136
    877c:	f8 e2       	ldi	r31, 0x28	; 40
    877e:	81 81       	ldd	r24, Z+1	; 0x01
    8780:	80 7f       	andi	r24, 0xF0	; 240
    8782:	8a 60       	ori	r24, 0x0A	; 10
	dma_channel_set_interrupt_level(&dmach_dma0_conf, DMA_INT_LVL_MED);

	dma_set_callback(DMA_CHANNEL_DACB_CH0_B, isr_dma_dac_ch0_B);
    8784:	81 83       	std	Z+1, r24	; 0x01
    8786:	69 e1       	ldi	r22, 0x19	; 25
    8788:	71 e4       	ldi	r23, 0x41	; 65
    878a:	81 e0       	ldi	r24, 0x01	; 1
    878c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <dma_set_callback>
    8790:	ed e7       	ldi	r30, 0x7D	; 125
    8792:	f8 e2       	ldi	r31, 0x28	; 40
    8794:	81 81       	ldd	r24, Z+1	; 0x01
    8796:	80 7f       	andi	r24, 0xF0	; 240
    8798:	8a 60       	ori	r24, 0x0A	; 10

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    879a:	81 83       	std	Z+1, r24	; 0x01
    879c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    879e:	8c 87       	std	Y+12, r24	; 0x0c
	return flags;
    87a0:	f8 94       	cli
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_PRIMODE_gm) | primode;
    87a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    87a4:	e0 e0       	ldi	r30, 0x00	; 0
    87a6:	f1 e0       	ldi	r31, 0x01	; 1
    87a8:	80 81       	ld	r24, Z
    87aa:	8c 7f       	andi	r24, 0xFC	; 252
    87ac:	82 60       	ori	r24, 0x02	; 2
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    87ae:	80 83       	st	Z, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    87b0:	9f bf       	out	0x3f, r25	; 63
    87b2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    87b4:	8b 87       	std	Y+11, r24	; 0x0b
	return flags;
    87b6:	f8 94       	cli
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_DBUFMODE_gm) | dbufmode;
    87b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    87ba:	80 81       	ld	r24, Z
    87bc:	83 7f       	andi	r24, 0xF3	; 243
    87be:	84 60       	ori	r24, 0x04	; 4
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    87c0:	80 83       	st	Z, r24
	dma_channel_set_interrupt_level(&dmach_dma1_conf, DMA_INT_LVL_MED);

	dma_set_priority_mode(DMA_PRIMODE_CH01RR23_gc);
	dma_set_double_buffer_mode(DMA_DBUFMODE_CH01_gc);

	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_A, &dmach_dma0_conf);
    87c2:	9f bf       	out	0x3f, r25	; 63
    87c4:	68 e8       	ldi	r22, 0x88	; 136
    87c6:	78 e2       	ldi	r23, 0x28	; 40
    87c8:	80 e0       	ldi	r24, 0x00	; 0
    87ca:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <dma_channel_write_config>
	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_B, &dmach_dma1_conf);
    87ce:	6d e7       	ldi	r22, 0x7D	; 125
    87d0:	78 e2       	ldi	r23, 0x28	; 40
    87d2:	81 e0       	ldi	r24, 0x01	; 1
    87d4:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <dma_channel_write_config>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    87d8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    87da:	8e 87       	std	Y+14, r24	; 0x0e
	return flags;
    87dc:	f8 94       	cli
	/* IRQ disabled section */
	{
		irqflags_t flags = cpu_irq_save();

		/* Prepare DMA blocks */
		calc_next_frame(&dac_io_dac0_buf[0][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    87de:	fe 84       	ldd	r15, Y+14	; 0x0e
    87e0:	01 e7       	ldi	r16, 0x71	; 113
    87e2:	18 e2       	ldi	r17, 0x28	; 40
    87e4:	27 e0       	ldi	r18, 0x07	; 7
    87e6:	30 e2       	ldi	r19, 0x20	; 32
    87e8:	49 e7       	ldi	r20, 0x79	; 121
    87ea:	58 e2       	ldi	r21, 0x28	; 40
    87ec:	65 e7       	ldi	r22, 0x75	; 117
    87ee:	78 e2       	ldi	r23, 0x28	; 40
    87f0:	81 e3       	ldi	r24, 0x31	; 49
    87f2:	98 e2       	ldi	r25, 0x28	; 40
		calc_next_frame(&dac_io_dac0_buf[1][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    87f4:	c5 dc       	rcall	.-1654   	; 0x8180 <calc_next_frame>
    87f6:	27 e0       	ldi	r18, 0x07	; 7
    87f8:	30 e2       	ldi	r19, 0x20	; 32
    87fa:	49 e7       	ldi	r20, 0x79	; 121
    87fc:	58 e2       	ldi	r21, 0x28	; 40
    87fe:	65 e7       	ldi	r22, 0x75	; 117
    8800:	78 e2       	ldi	r23, 0x28	; 40
    8802:	81 e5       	ldi	r24, 0x51	; 81
    8804:	98 e2       	ldi	r25, 0x28	; 40

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8806:	bc dc       	rcall	.-1672   	; 0x8180 <calc_next_frame>
    8808:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    880a:	8d 87       	std	Y+13, r24	; 0x0d
	return flags;
    880c:	f8 94       	cli
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    880e:	9d 85       	ldd	r25, Y+13	; 0x0d
    8810:	e0 e1       	ldi	r30, 0x10	; 16
    8812:	f1 e0       	ldi	r31, 0x01	; 1
    8814:	80 81       	ld	r24, Z
    8816:	80 68       	ori	r24, 0x80	; 128
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8818:	80 83       	st	Z, r24
    881a:	9f bf       	out	0x3f, r25	; 63
}

static void adc_start(void)
{
	/* Power up after configurations are being set */
	adc_enable(&ADCA);
    881c:	ff be       	out	0x3f, r15	; 63
    881e:	80 e0       	ldi	r24, 0x00	; 0
    8820:	92 e0       	ldi	r25, 0x02	; 2
    8822:	0e 94 a8 28 	call	0x5150	; 0x5150 <adc_enable>
	adc_enable(&ADCB);
    8826:	80 e4       	ldi	r24, 0x40	; 64
    8828:	92 e0       	ldi	r25, 0x02	; 2
    882a:	0e 94 a8 28 	call	0x5150	; 0x5150 <adc_enable>
}


static void usb_init(void)
{
	udc_start();
    882e:	0e 94 3a 50 	call	0xa074	; 0xa074 <udc_start>

#if 1
	stdio_usb_init();	// Init and enable stdio_usb
    8832:	0e 94 8e 53 	call	0xa71c	; 0xa71c <stdio_usb_init>
	stdio_usb_enable();
	delay_ms(140);
    8836:	0e 94 8a 53 	call	0xa714	; 0xa714 <stdio_usb_enable>
    883a:	61 e6       	ldi	r22, 0x61	; 97
    883c:	7e ea       	ldi	r23, 0xAE	; 174
    883e:	8a e0       	ldi	r24, 0x0A	; 10
    8840:	90 e0       	ldi	r25, 0x00	; 0

	printf("%c\r\n", 0x0c);
    8842:	16 da       	rcall	.-3028   	; 0x7c70 <__portable_avr_delay_cycles>
    8844:	1f 92       	push	r1
    8846:	8c e0       	ldi	r24, 0x0C	; 12
    8848:	8f 93       	push	r24
    884a:	8b e2       	ldi	r24, 0x2B	; 43
    884c:	94 e2       	ldi	r25, 0x24	; 36
    884e:	9f 93       	push	r25
    8850:	8f 93       	push	r24
    8852:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>
	printf("===============================\r\n");
    8856:	80 e3       	ldi	r24, 0x30	; 48
    8858:	94 e2       	ldi	r25, 0x24	; 36
    885a:	0e 94 ad 58 	call	0xb15a	; 0xb15a <puts>
	printf("FindMeSAT - USB logging started\r\n");
    885e:	81 e5       	ldi	r24, 0x51	; 81
    8860:	94 e2       	ldi	r25, 0x24	; 36
    8862:	0e 94 ad 58 	call	0xb15a	; 0xb15a <puts>
	printf("===============================\r\n\r\n");
    8866:	82 e7       	ldi	r24, 0x72	; 114
    8868:	94 e2       	ldi	r25, 0x24	; 36
    886a:	0e 94 ad 58 	call	0xb15a	; 0xb15a <puts>

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB

	/* Start TWI channels */
	twi_start();		// Start TWI
    886e:	0e 94 3e 19 	call	0x327c	; 0x327c <twi_start>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8872:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    8874:	88 8b       	std	Y+16, r24	; 0x10
	return flags;
    8876:	f8 94       	cli

	/* The application code */
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode = WORKMODE_RUN;
    8878:	88 89       	ldd	r24, Y+16	; 0x10
    887a:	92 e0       	ldi	r25, 0x02	; 2
    887c:	90 93 8c 29 	sts	0x298C, r25	; 0x80298c <g_workmode>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8880:	8f bf       	out	0x3f, r24	; 63
    8882:	0f 90       	pop	r0
    8884:	0f 90       	pop	r0
    8886:	0f 90       	pop	r0
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    8888:	0f 90       	pop	r0
    888a:	0f 2e       	mov	r0, r31
    888c:	f8 e4       	ldi	r31, 0x48	; 72
    888e:	2f 2e       	mov	r2, r31
    8890:	31 2c       	mov	r3, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8892:	f0 2d       	mov	r31, r0
    8894:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    8896:	8a 87       	std	Y+10, r24	; 0x0a
	return flags;
    8898:	f8 94       	cli
}

static void task(void)
{
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode;
    889a:	9a 85       	ldd	r25, Y+10	; 0x0a
    889c:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <g_workmode>
	cpu_irq_restore(flags);

	if (l_workmode == WORKMODE_RUN) {
    88a0:	9f bf       	out	0x3f, r25	; 63
    88a2:	82 30       	cpi	r24, 0x02	; 2
		uint32_t now = rtc_get_time();
    88a4:	09 f0       	breq	.+2      	; 0x88a8 <main+0x5ca>
    88a6:	69 c6       	rjmp	.+3282   	; 0x957a <main+0x129c>
    88a8:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <rtc_get_time>

		/* TASK when woken up and all ISRs are done */
		task_dac(now);
    88ac:	6b 01       	movw	r12, r22
    88ae:	7c 01       	movw	r14, r24

static void task_adc(uint32_t now)
{	/* Calculations of the ADC values for the presentation layer */
	static uint32_t adc_last = 0;

	if ((now - adc_last) >= 512 || (now < adc_last)) {
    88b0:	a7 db       	rcall	.-2226   	; 0x8000 <task_dac>
    88b2:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <adc_last.7550>
    88b6:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <adc_last.7550+0x1>
    88ba:	a0 91 1f 28 	lds	r26, 0x281F	; 0x80281f <adc_last.7550+0x2>
    88be:	b0 91 20 28 	lds	r27, 0x2820	; 0x802820 <adc_last.7550+0x3>
    88c2:	b7 01       	movw	r22, r14
    88c4:	a6 01       	movw	r20, r12
    88c6:	48 1b       	sub	r20, r24
    88c8:	59 0b       	sbc	r21, r25
    88ca:	6a 0b       	sbc	r22, r26
    88cc:	7b 0b       	sbc	r23, r27
    88ce:	41 15       	cp	r20, r1
    88d0:	52 40       	sbci	r21, 0x02	; 2
    88d2:	61 05       	cpc	r22, r1
    88d4:	71 05       	cpc	r23, r1
    88d6:	30 f4       	brcc	.+12     	; 0x88e4 <main+0x606>
    88d8:	c8 16       	cp	r12, r24
    88da:	d9 06       	cpc	r13, r25
    88dc:	ea 06       	cpc	r14, r26
    88de:	fb 06       	cpc	r15, r27
    88e0:	08 f0       	brcs	.+2      	; 0x88e4 <main+0x606>
		adc_last = now;
    88e2:	10 c1       	rjmp	.+544    	; 0x8b04 <main+0x826>
    88e4:	c0 92 1d 28 	sts	0x281D, r12	; 0x80281d <adc_last.7550>
    88e8:	d0 92 1e 28 	sts	0x281E, r13	; 0x80281e <adc_last.7550+0x1>
    88ec:	e0 92 1f 28 	sts	0x281F, r14	; 0x80281f <adc_last.7550+0x2>
    88f0:	f0 92 20 28 	sts	0x2820, r15	; 0x802820 <adc_last.7550+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    88f4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    88f6:	88 87       	std	Y+8, r24	; 0x08
	return flags;
    88f8:	f8 94       	cli

		irqflags_t flags = cpu_irq_save();
		uint32_t l_adc_vctcxo_cur	= g_adc_vctcxo_cur;
    88fa:	68 85       	ldd	r22, Y+8	; 0x08
    88fc:	20 91 f7 28 	lds	r18, 0x28F7	; 0x8028f7 <g_adc_vctcxo_cur>
    8900:	30 91 f8 28 	lds	r19, 0x28F8	; 0x8028f8 <g_adc_vctcxo_cur+0x1>
    8904:	40 91 f9 28 	lds	r20, 0x28F9	; 0x8028f9 <g_adc_vctcxo_cur+0x2>
    8908:	50 91 fa 28 	lds	r21, 0x28FA	; 0x8028fa <g_adc_vctcxo_cur+0x3>
		uint32_t l_adc_5v0_cur		= g_adc_5v0_cur;
    890c:	40 90 ed 28 	lds	r4, 0x28ED	; 0x8028ed <g_adc_5v0_cur>
    8910:	50 90 ee 28 	lds	r5, 0x28EE	; 0x8028ee <g_adc_5v0_cur+0x1>
    8914:	60 90 ef 28 	lds	r6, 0x28EF	; 0x8028ef <g_adc_5v0_cur+0x2>
    8918:	70 90 f0 28 	lds	r7, 0x28F0	; 0x8028f0 <g_adc_5v0_cur+0x3>
		uint32_t l_adc_vbat_cur		= g_adc_vbat_cur;
    891c:	80 90 e3 28 	lds	r8, 0x28E3	; 0x8028e3 <g_adc_vbat_cur>
    8920:	90 90 e4 28 	lds	r9, 0x28E4	; 0x8028e4 <g_adc_vbat_cur+0x1>
    8924:	a0 90 e5 28 	lds	r10, 0x28E5	; 0x8028e5 <g_adc_vbat_cur+0x2>
    8928:	b0 90 e6 28 	lds	r11, 0x28E6	; 0x8028e6 <g_adc_vbat_cur+0x3>
		uint32_t l_adc_io_adc4_cur	= g_adc_io_adc4_cur;
    892c:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <g_adc_io_adc4_cur>
    8930:	90 91 da 28 	lds	r25, 0x28DA	; 0x8028da <g_adc_io_adc4_cur+0x1>
    8934:	a0 91 db 28 	lds	r26, 0x28DB	; 0x8028db <g_adc_io_adc4_cur+0x2>
    8938:	b0 91 dc 28 	lds	r27, 0x28DC	; 0x8028dc <g_adc_io_adc4_cur+0x3>
    893c:	89 8b       	std	Y+17, r24	; 0x11
    893e:	9a 8b       	std	Y+18, r25	; 0x12
    8940:	ab 8b       	std	Y+19, r26	; 0x13
		uint32_t l_adc_io_adc5_cur	= g_adc_io_adc5_cur;
    8942:	bc 8b       	std	Y+20, r27	; 0x14
    8944:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <g_adc_io_adc5_cur>
    8948:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <g_adc_io_adc5_cur+0x1>
    894c:	a0 91 d1 28 	lds	r26, 0x28D1	; 0x8028d1 <g_adc_io_adc5_cur+0x2>
    8950:	b0 91 d2 28 	lds	r27, 0x28D2	; 0x8028d2 <g_adc_io_adc5_cur+0x3>
    8954:	89 8f       	std	Y+25, r24	; 0x19
    8956:	9a 8f       	std	Y+26, r25	; 0x1a
    8958:	ab 8f       	std	Y+27, r26	; 0x1b
		uint32_t l_adc_silence_cur	= g_adc_silence_cur;
    895a:	bc 8f       	std	Y+28, r27	; 0x1c
    895c:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <g_adc_silence_cur>
    8960:	90 91 c6 28 	lds	r25, 0x28C6	; 0x8028c6 <g_adc_silence_cur+0x1>
    8964:	a0 91 c7 28 	lds	r26, 0x28C7	; 0x8028c7 <g_adc_silence_cur+0x2>
    8968:	b0 91 c8 28 	lds	r27, 0x28C8	; 0x8028c8 <g_adc_silence_cur+0x3>
    896c:	8d 8f       	std	Y+29, r24	; 0x1d
    896e:	9e 8f       	std	Y+30, r25	; 0x1e
    8970:	af 8f       	std	Y+31, r26	; 0x1f
		uint32_t l_adc_temp_cur		= g_adc_temp_cur;
    8972:	b8 a3       	std	Y+32, r27	; 0x20
    8974:	80 91 bb 28 	lds	r24, 0x28BB	; 0x8028bb <g_adc_temp_cur>
    8978:	90 91 bc 28 	lds	r25, 0x28BC	; 0x8028bc <g_adc_temp_cur+0x1>
    897c:	a0 91 bd 28 	lds	r26, 0x28BD	; 0x8028bd <g_adc_temp_cur+0x2>
    8980:	b0 91 be 28 	lds	r27, 0x28BE	; 0x8028be <g_adc_temp_cur+0x3>
    8984:	8d 8b       	std	Y+21, r24	; 0x15
    8986:	9e 8b       	std	Y+22, r25	; 0x16
    8988:	af 8b       	std	Y+23, r26	; 0x17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    898a:	b8 8f       	std	Y+24, r27	; 0x18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    898c:	6f bf       	out	0x3f, r22	; 63
    898e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    8990:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    8992:	f8 94       	cli
		int16_t l_adc_io_adc5_volt_1000	= (int16_t) (((  1000UL * l_adc_io_adc5_cur * C_VCC_3V0_AREF_VOLTS                   ) / C_ADC_STEPS));
		int16_t l_adc_silence_volt_1000	= (int16_t) (((  1000UL * l_adc_silence_cur * C_VCC_3V0_AREF_VOLTS                   ) / C_ADC_STEPS));
		int16_t l_adc_temp_deg_100		= (int16_t) ((((  100UL * l_adc_temp_cur                           * C_TEMPSENSE_MULT) / C_ADC_STEPS))  -  100 * C_0DEGC_K);

		flags = cpu_irq_save();
		g_adc_vctcxo_volt_1000	= l_adc_vctcxo_volt_1000;
    8994:	19 81       	ldd	r17, Y+1	; 0x01
    8996:	a8 eb       	ldi	r26, 0xB8	; 184
    8998:	bb e0       	ldi	r27, 0x0B	; 11
    899a:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__muluhisi3>
    899e:	05 2e       	mov	r0, r21
    89a0:	54 e1       	ldi	r21, 0x14	; 20
    89a2:	96 95       	lsr	r25
    89a4:	87 95       	ror	r24
    89a6:	77 95       	ror	r23
    89a8:	67 95       	ror	r22
    89aa:	5a 95       	dec	r21
    89ac:	d1 f7       	brne	.-12     	; 0x89a2 <main+0x6c4>
    89ae:	50 2d       	mov	r21, r0
    89b0:	0e 94 d3 56 	call	0xada6	; 0xada6 <__floatunsisf>
    89b4:	20 e0       	ldi	r18, 0x00	; 0
    89b6:	30 e0       	ldi	r19, 0x00	; 0
    89b8:	4c e3       	ldi	r20, 0x3C	; 60
    89ba:	52 e4       	ldi	r21, 0x42	; 66
    89bc:	0e 94 d2 55 	call	0xaba4	; 0xaba4 <__subsf3>
    89c0:	0e 94 a2 56 	call	0xad44	; 0xad44 <__fixsfsi>
    89c4:	60 93 b3 28 	sts	0x28B3, r22	; 0x8028b3 <g_adc_vctcxo_volt_1000>
    89c8:	70 93 b4 28 	sts	0x28B4, r23	; 0x8028b4 <g_adc_vctcxo_volt_1000+0x1>
		g_adc_5v0_volt_1000		= l_adc_5v0_volt_1000;
    89cc:	a8 eb       	ldi	r26, 0xB8	; 184
    89ce:	bb e0       	ldi	r27, 0x0B	; 11
    89d0:	a3 01       	movw	r20, r6
    89d2:	92 01       	movw	r18, r4
    89d4:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__muluhisi3>
    89d8:	0e 94 d3 56 	call	0xada6	; 0xada6 <__floatunsisf>
    89dc:	29 ed       	ldi	r18, 0xD9	; 217
    89de:	38 ed       	ldi	r19, 0xD8	; 216
    89e0:	4a e1       	ldi	r20, 0x1A	; 26
    89e2:	50 e4       	ldi	r21, 0x40	; 64
    89e4:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    89e8:	20 e0       	ldi	r18, 0x00	; 0
    89ea:	30 e0       	ldi	r19, 0x00	; 0
    89ec:	40 e8       	ldi	r20, 0x80	; 128
    89ee:	55 e3       	ldi	r21, 0x35	; 53
    89f0:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    89f4:	0e 94 a2 56 	call	0xad44	; 0xad44 <__fixsfsi>
    89f8:	60 93 b1 28 	sts	0x28B1, r22	; 0x8028b1 <g_adc_5v0_volt_1000>
    89fc:	70 93 b2 28 	sts	0x28B2, r23	; 0x8028b2 <g_adc_5v0_volt_1000+0x1>
		g_adc_vbat_volt_1000	= l_adc_vbat_volt_1000;
    8a00:	a8 eb       	ldi	r26, 0xB8	; 184
    8a02:	bb e0       	ldi	r27, 0x0B	; 11
    8a04:	a5 01       	movw	r20, r10
    8a06:	94 01       	movw	r18, r8
    8a08:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__muluhisi3>
    8a0c:	0e 94 d3 56 	call	0xada6	; 0xada6 <__floatunsisf>
    8a10:	23 ee       	ldi	r18, 0xE3	; 227
    8a12:	35 e4       	ldi	r19, 0x45	; 69
    8a14:	4b e1       	ldi	r20, 0x1B	; 27
    8a16:	50 e4       	ldi	r21, 0x40	; 64
    8a18:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    8a1c:	20 e0       	ldi	r18, 0x00	; 0
    8a1e:	30 e0       	ldi	r19, 0x00	; 0
    8a20:	40 e8       	ldi	r20, 0x80	; 128
    8a22:	55 e3       	ldi	r21, 0x35	; 53
    8a24:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    8a28:	0e 94 a2 56 	call	0xad44	; 0xad44 <__fixsfsi>
    8a2c:	60 93 af 28 	sts	0x28AF, r22	; 0x8028af <g_adc_vbat_volt_1000>
    8a30:	70 93 b0 28 	sts	0x28B0, r23	; 0x8028b0 <g_adc_vbat_volt_1000+0x1>
		g_adc_io_adc4_volt_1000	= l_adc_io_adc4_volt_1000;
    8a34:	a8 eb       	ldi	r26, 0xB8	; 184
    8a36:	bb e0       	ldi	r27, 0x0B	; 11
    8a38:	29 89       	ldd	r18, Y+17	; 0x11
    8a3a:	3a 89       	ldd	r19, Y+18	; 0x12
    8a3c:	4b 89       	ldd	r20, Y+19	; 0x13
    8a3e:	5c 89       	ldd	r21, Y+20	; 0x14
    8a40:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__muluhisi3>
    8a44:	dc 01       	movw	r26, r24
    8a46:	cb 01       	movw	r24, r22
    8a48:	07 2e       	mov	r0, r23
    8a4a:	74 e1       	ldi	r23, 0x14	; 20
    8a4c:	b6 95       	lsr	r27
    8a4e:	a7 95       	ror	r26
    8a50:	97 95       	ror	r25
    8a52:	87 95       	ror	r24
    8a54:	7a 95       	dec	r23
    8a56:	d1 f7       	brne	.-12     	; 0x8a4c <main+0x76e>
    8a58:	70 2d       	mov	r23, r0
    8a5a:	80 93 ad 28 	sts	0x28AD, r24	; 0x8028ad <g_adc_io_adc4_volt_1000>
    8a5e:	90 93 ae 28 	sts	0x28AE, r25	; 0x8028ae <g_adc_io_adc4_volt_1000+0x1>
		g_adc_io_adc5_volt_1000	= l_adc_io_adc5_volt_1000;
    8a62:	a8 eb       	ldi	r26, 0xB8	; 184
    8a64:	bb e0       	ldi	r27, 0x0B	; 11
    8a66:	29 8d       	ldd	r18, Y+25	; 0x19
    8a68:	3a 8d       	ldd	r19, Y+26	; 0x1a
    8a6a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    8a6c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    8a6e:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__muluhisi3>
    8a72:	dc 01       	movw	r26, r24
    8a74:	cb 01       	movw	r24, r22
    8a76:	07 2e       	mov	r0, r23
    8a78:	74 e1       	ldi	r23, 0x14	; 20
    8a7a:	b6 95       	lsr	r27
    8a7c:	a7 95       	ror	r26
    8a7e:	97 95       	ror	r25
    8a80:	87 95       	ror	r24
    8a82:	7a 95       	dec	r23
    8a84:	d1 f7       	brne	.-12     	; 0x8a7a <main+0x79c>
    8a86:	70 2d       	mov	r23, r0
    8a88:	80 93 ab 28 	sts	0x28AB, r24	; 0x8028ab <g_adc_io_adc5_volt_1000>
    8a8c:	90 93 ac 28 	sts	0x28AC, r25	; 0x8028ac <g_adc_io_adc5_volt_1000+0x1>
		g_adc_silence_volt_1000	= l_adc_silence_volt_1000;
    8a90:	a8 eb       	ldi	r26, 0xB8	; 184
    8a92:	bb e0       	ldi	r27, 0x0B	; 11
    8a94:	2d 8d       	ldd	r18, Y+29	; 0x1d
    8a96:	3e 8d       	ldd	r19, Y+30	; 0x1e
    8a98:	4f 8d       	ldd	r20, Y+31	; 0x1f
    8a9a:	58 a1       	ldd	r21, Y+32	; 0x20
    8a9c:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__muluhisi3>
    8aa0:	dc 01       	movw	r26, r24
    8aa2:	cb 01       	movw	r24, r22
    8aa4:	07 2e       	mov	r0, r23
    8aa6:	74 e1       	ldi	r23, 0x14	; 20
    8aa8:	b6 95       	lsr	r27
    8aaa:	a7 95       	ror	r26
    8aac:	97 95       	ror	r25
    8aae:	87 95       	ror	r24
    8ab0:	7a 95       	dec	r23
    8ab2:	d1 f7       	brne	.-12     	; 0x8aa8 <main+0x7ca>
    8ab4:	70 2d       	mov	r23, r0
    8ab6:	80 93 a9 28 	sts	0x28A9, r24	; 0x8028a9 <g_adc_silence_volt_1000>
    8aba:	90 93 aa 28 	sts	0x28AA, r25	; 0x8028aa <g_adc_silence_volt_1000+0x1>
		g_adc_temp_deg_100		= l_adc_temp_deg_100;
    8abe:	a4 e6       	ldi	r26, 0x64	; 100
    8ac0:	b0 e0       	ldi	r27, 0x00	; 0
    8ac2:	2d 89       	ldd	r18, Y+21	; 0x15
    8ac4:	3e 89       	ldd	r19, Y+22	; 0x16
    8ac6:	4f 89       	ldd	r20, Y+23	; 0x17
    8ac8:	58 8d       	ldd	r21, Y+24	; 0x18
    8aca:	0e 94 5e 54 	call	0xa8bc	; 0xa8bc <__muluhisi3>
    8ace:	0e 94 d3 56 	call	0xada6	; 0xada6 <__floatunsisf>
    8ad2:	2d ec       	ldi	r18, 0xCD	; 205
    8ad4:	3c e4       	ldi	r19, 0x4C	; 76
    8ad6:	4d e1       	ldi	r20, 0x1D	; 29
    8ad8:	54 e4       	ldi	r21, 0x44	; 68
    8ada:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    8ade:	20 e0       	ldi	r18, 0x00	; 0
    8ae0:	30 e0       	ldi	r19, 0x00	; 0
    8ae2:	40 e8       	ldi	r20, 0x80	; 128
    8ae4:	55 e3       	ldi	r21, 0x35	; 53
    8ae6:	0e 94 9a 57 	call	0xaf34	; 0xaf34 <__mulsf3>
    8aea:	20 e0       	ldi	r18, 0x00	; 0
    8aec:	36 e6       	ldi	r19, 0x66	; 102
    8aee:	45 ed       	ldi	r20, 0xD5	; 213
    8af0:	56 e4       	ldi	r21, 0x46	; 70
    8af2:	0e 94 d2 55 	call	0xaba4	; 0xaba4 <__subsf3>
    8af6:	0e 94 a2 56 	call	0xad44	; 0xad44 <__fixsfsi>
    8afa:	60 93 a7 28 	sts	0x28A7, r22	; 0x8028a7 <g_adc_temp_deg_100>
    8afe:	70 93 a8 28 	sts	0x28A8, r23	; 0x8028a8 <g_adc_temp_deg_100+0x1>

static void task_twi(uint32_t now)
{	/* Calculations for the presentation layer and display */

	/* TWI1 - SIM808, Hygro, Gyro, Baro devices */
	task_twi1_onboard(now);
    8b02:	1f bf       	out	0x3f, r17	; 63
    8b04:	c7 01       	movw	r24, r14
    8b06:	b6 01       	movw	r22, r12
    8b08:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <task_twi1_onboard>

	/* TWI2 - LCD Port */
	task_twi2_lcd(now);
    8b0c:	c7 01       	movw	r24, r14
    8b0e:	b6 01       	movw	r22, r12
    8b10:	0e 94 24 24 	call	0x4848	; 0x4848 <task_twi2_lcd>
}

static void task_usb(uint32_t now)
{
	if (usb_cdc_transfers_autorized) {
    8b14:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <usb_cdc_transfers_autorized>
    8b18:	88 23       	and	r24, r24
    8b1a:	09 f4       	brne	.+2      	; 0x8b1e <main+0x840>
		// stdio_usb_init();
		// stdio_usb_enable();
#endif

		/* Monitoring at the USB serial terminal */
		if (((now - usb_last) >= 512) || (now < usb_last)) {
    8b1c:	2e c5       	rjmp	.+2652   	; 0x957a <main+0x129c>
    8b1e:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <usb_last.7572>
    8b22:	90 91 1a 28 	lds	r25, 0x281A	; 0x80281a <usb_last.7572+0x1>
    8b26:	a0 91 1b 28 	lds	r26, 0x281B	; 0x80281b <usb_last.7572+0x2>
    8b2a:	b0 91 1c 28 	lds	r27, 0x281C	; 0x80281c <usb_last.7572+0x3>
    8b2e:	b7 01       	movw	r22, r14
    8b30:	a6 01       	movw	r20, r12
    8b32:	48 1b       	sub	r20, r24
    8b34:	59 0b       	sbc	r21, r25
    8b36:	6a 0b       	sbc	r22, r26
    8b38:	7b 0b       	sbc	r23, r27
    8b3a:	41 15       	cp	r20, r1
    8b3c:	52 40       	sbci	r21, 0x02	; 2
    8b3e:	61 05       	cpc	r22, r1
    8b40:	71 05       	cpc	r23, r1
    8b42:	30 f4       	brcc	.+12     	; 0x8b50 <main+0x872>
    8b44:	c8 16       	cp	r12, r24
    8b46:	d9 06       	cpc	r13, r25
    8b48:	ea 06       	cpc	r14, r26
    8b4a:	fb 06       	cpc	r15, r27
    8b4c:	08 f0       	brcs	.+2      	; 0x8b50 <main+0x872>
			usb_last = now;
    8b4e:	15 c5       	rjmp	.+2602   	; 0x957a <main+0x129c>
    8b50:	c0 92 19 28 	sts	0x2819, r12	; 0x802819 <usb_last.7572>
    8b54:	d0 92 1a 28 	sts	0x281A, r13	; 0x80281a <usb_last.7572+0x1>
    8b58:	e0 92 1b 28 	sts	0x281B, r14	; 0x80281b <usb_last.7572+0x2>
    8b5c:	f0 92 1c 28 	sts	0x281C, r15	; 0x80281c <usb_last.7572+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8b60:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    8b62:	89 87       	std	Y+9, r24	; 0x09
	return flags;
    8b64:	f8 94       	cli

			flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000		= g_adc_vctcxo_volt_1000;
    8b66:	49 85       	ldd	r20, Y+9	; 0x09
    8b68:	80 90 b3 28 	lds	r8, 0x28B3	; 0x8028b3 <g_adc_vctcxo_volt_1000>
    8b6c:	89 ae       	std	Y+57, r8	; 0x39
    8b6e:	90 90 b4 28 	lds	r9, 0x28B4	; 0x8028b4 <g_adc_vctcxo_volt_1000+0x1>
			int16_t l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    8b72:	9a ae       	std	Y+58, r9	; 0x3a
    8b74:	a0 90 b1 28 	lds	r10, 0x28B1	; 0x8028b1 <g_adc_5v0_volt_1000>
    8b78:	ab ae       	std	Y+59, r10	; 0x3b
    8b7a:	b0 90 b2 28 	lds	r11, 0x28B2	; 0x8028b2 <g_adc_5v0_volt_1000+0x1>
			int16_t l_adc_vbat_volt_1000		= g_adc_vbat_volt_1000;
    8b7e:	bc ae       	std	Y+60, r11	; 0x3c
    8b80:	80 90 af 28 	lds	r8, 0x28AF	; 0x8028af <g_adc_vbat_volt_1000>
    8b84:	8d ae       	std	Y+61, r8	; 0x3d
    8b86:	90 90 b0 28 	lds	r9, 0x28B0	; 0x8028b0 <g_adc_vbat_volt_1000+0x1>
			int16_t l_adc_io_adc4_volt_1000		= g_adc_io_adc4_volt_1000;
    8b8a:	9e ae       	std	Y+62, r9	; 0x3e
    8b8c:	a0 90 ad 28 	lds	r10, 0x28AD	; 0x8028ad <g_adc_io_adc4_volt_1000>
    8b90:	af ae       	std	Y+63, r10	; 0x3f
    8b92:	b0 90 ae 28 	lds	r11, 0x28AE	; 0x8028ae <g_adc_io_adc4_volt_1000+0x1>
    8b96:	21 96       	adiw	r28, 0x01	; 1
    8b98:	bf ae       	std	Y+63, r11	; 0x3f
			int16_t l_adc_io_adc5_volt_1000		= g_adc_io_adc5_volt_1000;
    8b9a:	21 97       	sbiw	r28, 0x01	; 1
    8b9c:	80 90 ab 28 	lds	r8, 0x28AB	; 0x8028ab <g_adc_io_adc5_volt_1000>
    8ba0:	22 96       	adiw	r28, 0x02	; 2
    8ba2:	8f ae       	std	Y+63, r8	; 0x3f
    8ba4:	22 97       	sbiw	r28, 0x02	; 2
    8ba6:	90 90 ac 28 	lds	r9, 0x28AC	; 0x8028ac <g_adc_io_adc5_volt_1000+0x1>
    8baa:	23 96       	adiw	r28, 0x03	; 3
    8bac:	9f ae       	std	Y+63, r9	; 0x3f
			int16_t l_adc_silence_volt_1000		= g_adc_silence_volt_1000;
    8bae:	23 97       	sbiw	r28, 0x03	; 3
    8bb0:	a0 90 a9 28 	lds	r10, 0x28A9	; 0x8028a9 <g_adc_silence_volt_1000>
    8bb4:	24 96       	adiw	r28, 0x04	; 4
    8bb6:	af ae       	std	Y+63, r10	; 0x3f
    8bb8:	24 97       	sbiw	r28, 0x04	; 4
    8bba:	b0 90 aa 28 	lds	r11, 0x28AA	; 0x8028aa <g_adc_silence_volt_1000+0x1>
    8bbe:	25 96       	adiw	r28, 0x05	; 5
    8bc0:	bf ae       	std	Y+63, r11	; 0x3f
			int16_t l_adc_temp_deg_100			= g_adc_temp_deg_100;
    8bc2:	25 97       	sbiw	r28, 0x05	; 5
    8bc4:	80 90 a7 28 	lds	r8, 0x28A7	; 0x8028a7 <g_adc_temp_deg_100>
    8bc8:	90 90 a8 28 	lds	r9, 0x28A8	; 0x8028a8 <g_adc_temp_deg_100+0x1>
    8bcc:	89 8a       	std	Y+17, r8	; 0x11
			int32_t l_twi1_baro_temp_100		= g_twi1_baro_temp_100;
    8bce:	9a 8a       	std	Y+18, r9	; 0x12
    8bd0:	40 90 2c 29 	lds	r4, 0x292C	; 0x80292c <g_twi1_baro_temp_100>
    8bd4:	50 90 2d 29 	lds	r5, 0x292D	; 0x80292d <g_twi1_baro_temp_100+0x1>
    8bd8:	60 90 2e 29 	lds	r6, 0x292E	; 0x80292e <g_twi1_baro_temp_100+0x2>
    8bdc:	70 90 2f 29 	lds	r7, 0x292F	; 0x80292f <g_twi1_baro_temp_100+0x3>
			int32_t l_twi1_baro_p_100			= g_twi1_baro_p_100;
    8be0:	00 91 28 29 	lds	r16, 0x2928	; 0x802928 <g_twi1_baro_p_100>
    8be4:	10 91 29 29 	lds	r17, 0x2929	; 0x802929 <g_twi1_baro_p_100+0x1>
    8be8:	20 91 2a 29 	lds	r18, 0x292A	; 0x80292a <g_twi1_baro_p_100+0x2>
    8bec:	30 91 2b 29 	lds	r19, 0x292B	; 0x80292b <g_twi1_baro_p_100+0x3>
			int16_t l_twi1_hygro_T_100			= g_twi1_hygro_T_100;
    8bf0:	e0 91 20 29 	lds	r30, 0x2920	; 0x802920 <g_twi1_hygro_T_100>
    8bf4:	f0 91 21 29 	lds	r31, 0x2921	; 0x802921 <g_twi1_hygro_T_100+0x1>
			int16_t l_twi1_hygro_RH_100			= g_twi1_hygro_RH_100;
    8bf8:	80 91 1e 29 	lds	r24, 0x291E	; 0x80291e <g_twi1_hygro_RH_100>
    8bfc:	90 91 1f 29 	lds	r25, 0x291F	; 0x80291f <g_twi1_hygro_RH_100+0x1>
			int16_t	l_twi1_gyro_1_accel_x		= g_twi1_gyro_1_accel_x;
    8c00:	90 90 7d 29 	lds	r9, 0x297D	; 0x80297d <g_twi1_gyro_1_accel_x>
    8c04:	69 96       	adiw	r28, 0x19	; 25
    8c06:	9f ae       	std	Y+63, r9	; 0x3f
    8c08:	69 97       	sbiw	r28, 0x19	; 25
    8c0a:	a0 90 7e 29 	lds	r10, 0x297E	; 0x80297e <g_twi1_gyro_1_accel_x+0x1>
    8c0e:	6a 96       	adiw	r28, 0x1a	; 26
    8c10:	af ae       	std	Y+63, r10	; 0x3f
			int16_t	l_twi1_gyro_1_accel_y		= g_twi1_gyro_1_accel_y;
    8c12:	6a 97       	sbiw	r28, 0x1a	; 26
    8c14:	b0 90 7b 29 	lds	r11, 0x297B	; 0x80297b <g_twi1_gyro_1_accel_y>
    8c18:	6b 96       	adiw	r28, 0x1b	; 27
    8c1a:	bf ae       	std	Y+63, r11	; 0x3f
    8c1c:	6b 97       	sbiw	r28, 0x1b	; 27
    8c1e:	80 90 7c 29 	lds	r8, 0x297C	; 0x80297c <g_twi1_gyro_1_accel_y+0x1>
    8c22:	6c 96       	adiw	r28, 0x1c	; 28
    8c24:	8f ae       	std	Y+63, r8	; 0x3f
			int16_t	l_twi1_gyro_1_accel_z		= g_twi1_gyro_1_accel_z;
    8c26:	6c 97       	sbiw	r28, 0x1c	; 28
    8c28:	90 90 79 29 	lds	r9, 0x2979	; 0x802979 <g_twi1_gyro_1_accel_z>
    8c2c:	6d 96       	adiw	r28, 0x1d	; 29
    8c2e:	9f ae       	std	Y+63, r9	; 0x3f
    8c30:	6d 97       	sbiw	r28, 0x1d	; 29
    8c32:	a0 90 7a 29 	lds	r10, 0x297A	; 0x80297a <g_twi1_gyro_1_accel_z+0x1>
    8c36:	6e 96       	adiw	r28, 0x1e	; 30
    8c38:	af ae       	std	Y+63, r10	; 0x3f
			int16_t	l_twi1_gyro_1_accel_x_mg	= g_twi1_gyro_1_accel_x_mg;
    8c3a:	6e 97       	sbiw	r28, 0x1e	; 30
    8c3c:	80 90 77 29 	lds	r8, 0x2977	; 0x802977 <g_twi1_gyro_1_accel_x_mg>
    8c40:	90 90 78 29 	lds	r9, 0x2978	; 0x802978 <g_twi1_gyro_1_accel_x_mg+0x1>
    8c44:	89 8e       	std	Y+25, r8	; 0x19
			int16_t	l_twi1_gyro_1_accel_y_mg	= g_twi1_gyro_1_accel_y_mg;
    8c46:	9a 8e       	std	Y+26, r9	; 0x1a
    8c48:	a0 90 75 29 	lds	r10, 0x2975	; 0x802975 <g_twi1_gyro_1_accel_y_mg>
    8c4c:	b0 90 76 29 	lds	r11, 0x2976	; 0x802976 <g_twi1_gyro_1_accel_y_mg+0x1>
    8c50:	ad 8e       	std	Y+29, r10	; 0x1d
			int16_t	l_twi1_gyro_1_accel_z_mg	= g_twi1_gyro_1_accel_z_mg;
    8c52:	be 8e       	std	Y+30, r11	; 0x1e
    8c54:	80 90 73 29 	lds	r8, 0x2973	; 0x802973 <g_twi1_gyro_1_accel_z_mg>
    8c58:	90 90 74 29 	lds	r9, 0x2974	; 0x802974 <g_twi1_gyro_1_accel_z_mg+0x1>
    8c5c:	8d 8a       	std	Y+21, r8	; 0x15
			int16_t l_twi1_gyro_1_gyro_x		= g_twi1_gyro_1_gyro_x;
    8c5e:	9e 8a       	std	Y+22, r9	; 0x16
    8c60:	90 90 71 29 	lds	r9, 0x2971	; 0x802971 <g_twi1_gyro_1_gyro_x>
    8c64:	6f 96       	adiw	r28, 0x1f	; 31
    8c66:	9f ae       	std	Y+63, r9	; 0x3f
    8c68:	6f 97       	sbiw	r28, 0x1f	; 31
    8c6a:	a0 90 72 29 	lds	r10, 0x2972	; 0x802972 <g_twi1_gyro_1_gyro_x+0x1>
    8c6e:	a0 96       	adiw	r28, 0x20	; 32
    8c70:	af ae       	std	Y+63, r10	; 0x3f
			int16_t l_twi1_gyro_1_gyro_y		= g_twi1_gyro_1_gyro_y;
    8c72:	a0 97       	sbiw	r28, 0x20	; 32
    8c74:	b0 90 6f 29 	lds	r11, 0x296F	; 0x80296f <g_twi1_gyro_1_gyro_y>
    8c78:	a1 96       	adiw	r28, 0x21	; 33
    8c7a:	bf ae       	std	Y+63, r11	; 0x3f
    8c7c:	a1 97       	sbiw	r28, 0x21	; 33
    8c7e:	80 90 70 29 	lds	r8, 0x2970	; 0x802970 <g_twi1_gyro_1_gyro_y+0x1>
    8c82:	a2 96       	adiw	r28, 0x22	; 34
    8c84:	8f ae       	std	Y+63, r8	; 0x3f
			int16_t l_twi1_gyro_1_gyro_z		= g_twi1_gyro_1_gyro_z;
    8c86:	a2 97       	sbiw	r28, 0x22	; 34
    8c88:	90 90 6d 29 	lds	r9, 0x296D	; 0x80296d <g_twi1_gyro_1_gyro_z>
    8c8c:	a3 96       	adiw	r28, 0x23	; 35
    8c8e:	9f ae       	std	Y+63, r9	; 0x3f
    8c90:	a3 97       	sbiw	r28, 0x23	; 35
    8c92:	a0 90 6e 29 	lds	r10, 0x296E	; 0x80296e <g_twi1_gyro_1_gyro_z+0x1>
    8c96:	a4 96       	adiw	r28, 0x24	; 36
    8c98:	af ae       	std	Y+63, r10	; 0x3f
			int32_t	l_twi1_gyro_1_gyro_x_mdps	= g_twi1_gyro_1_gyro_x_mdps;
    8c9a:	a4 97       	sbiw	r28, 0x24	; 36
    8c9c:	80 90 69 29 	lds	r8, 0x2969	; 0x802969 <g_twi1_gyro_1_gyro_x_mdps>
    8ca0:	90 90 6a 29 	lds	r9, 0x296A	; 0x80296a <g_twi1_gyro_1_gyro_x_mdps+0x1>
    8ca4:	a0 90 6b 29 	lds	r10, 0x296B	; 0x80296b <g_twi1_gyro_1_gyro_x_mdps+0x2>
    8ca8:	b0 90 6c 29 	lds	r11, 0x296C	; 0x80296c <g_twi1_gyro_1_gyro_x_mdps+0x3>
    8cac:	89 a2       	std	Y+33, r8	; 0x21
    8cae:	9a a2       	std	Y+34, r9	; 0x22
    8cb0:	ab a2       	std	Y+35, r10	; 0x23
			int32_t	l_twi1_gyro_1_gyro_y_mdps	= g_twi1_gyro_1_gyro_y_mdps;
    8cb2:	bc a2       	std	Y+36, r11	; 0x24
    8cb4:	80 90 65 29 	lds	r8, 0x2965	; 0x802965 <g_twi1_gyro_1_gyro_y_mdps>
    8cb8:	90 90 66 29 	lds	r9, 0x2966	; 0x802966 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    8cbc:	a0 90 67 29 	lds	r10, 0x2967	; 0x802967 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    8cc0:	b0 90 68 29 	lds	r11, 0x2968	; 0x802968 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    8cc4:	8d a2       	std	Y+37, r8	; 0x25
    8cc6:	9e a2       	std	Y+38, r9	; 0x26
    8cc8:	af a2       	std	Y+39, r10	; 0x27
			int32_t	l_twi1_gyro_1_gyro_z_mdps	= g_twi1_gyro_1_gyro_z_mdps;
    8cca:	b8 a6       	std	Y+40, r11	; 0x28
    8ccc:	80 90 61 29 	lds	r8, 0x2961	; 0x802961 <g_twi1_gyro_1_gyro_z_mdps>
    8cd0:	90 90 62 29 	lds	r9, 0x2962	; 0x802962 <g_twi1_gyro_1_gyro_z_mdps+0x1>
    8cd4:	a0 90 63 29 	lds	r10, 0x2963	; 0x802963 <g_twi1_gyro_1_gyro_z_mdps+0x2>
    8cd8:	b0 90 64 29 	lds	r11, 0x2964	; 0x802964 <g_twi1_gyro_1_gyro_z_mdps+0x3>
    8cdc:	89 a6       	std	Y+41, r8	; 0x29
    8cde:	9a a6       	std	Y+42, r9	; 0x2a
    8ce0:	ab a6       	std	Y+43, r10	; 0x2b
			int16_t	l_twi1_gyro_1_temp			= g_twi1_gyro_1_temp;
    8ce2:	bc a6       	std	Y+44, r11	; 0x2c
    8ce4:	90 90 83 29 	lds	r9, 0x2983	; 0x802983 <g_twi1_gyro_1_temp>
    8ce8:	a5 96       	adiw	r28, 0x25	; 37
    8cea:	9f ae       	std	Y+63, r9	; 0x3f
    8cec:	a5 97       	sbiw	r28, 0x25	; 37
    8cee:	a0 90 84 29 	lds	r10, 0x2984	; 0x802984 <g_twi1_gyro_1_temp+0x1>
    8cf2:	a6 96       	adiw	r28, 0x26	; 38
    8cf4:	af ae       	std	Y+63, r10	; 0x3f
			int16_t	l_twi1_gyro_1_temp_deg_100	= g_twi1_gyro_1_temp_deg_100;
    8cf6:	a6 97       	sbiw	r28, 0x26	; 38
    8cf8:	80 90 7f 29 	lds	r8, 0x297F	; 0x80297f <g_twi1_gyro_1_temp_deg_100>
    8cfc:	90 90 80 29 	lds	r9, 0x2980	; 0x802980 <g_twi1_gyro_1_temp_deg_100+0x1>
    8d00:	8d a6       	std	Y+45, r8	; 0x2d
			int16_t l_twi1_gyro_2_mag_x			= g_twi1_gyro_2_mag_x;
    8d02:	9e a6       	std	Y+46, r9	; 0x2e
    8d04:	90 90 5b 29 	lds	r9, 0x295B	; 0x80295b <g_twi1_gyro_2_mag_x>
    8d08:	a7 96       	adiw	r28, 0x27	; 39
    8d0a:	9f ae       	std	Y+63, r9	; 0x3f
    8d0c:	a7 97       	sbiw	r28, 0x27	; 39
    8d0e:	a0 90 5c 29 	lds	r10, 0x295C	; 0x80295c <g_twi1_gyro_2_mag_x+0x1>
    8d12:	a8 96       	adiw	r28, 0x28	; 40
    8d14:	af ae       	std	Y+63, r10	; 0x3f
			int16_t l_twi1_gyro_2_mag_y			= g_twi1_gyro_2_mag_y;
    8d16:	a8 97       	sbiw	r28, 0x28	; 40
    8d18:	b0 90 59 29 	lds	r11, 0x2959	; 0x802959 <g_twi1_gyro_2_mag_y>
    8d1c:	a9 96       	adiw	r28, 0x29	; 41
    8d1e:	bf ae       	std	Y+63, r11	; 0x3f
    8d20:	a9 97       	sbiw	r28, 0x29	; 41
    8d22:	80 90 5a 29 	lds	r8, 0x295A	; 0x80295a <g_twi1_gyro_2_mag_y+0x1>
    8d26:	aa 96       	adiw	r28, 0x2a	; 42
    8d28:	8f ae       	std	Y+63, r8	; 0x3f
			int16_t l_twi1_gyro_2_mag_z			= g_twi1_gyro_2_mag_z;
    8d2a:	aa 97       	sbiw	r28, 0x2a	; 42
    8d2c:	90 90 57 29 	lds	r9, 0x2957	; 0x802957 <g_twi1_gyro_2_mag_z>
    8d30:	ab 96       	adiw	r28, 0x2b	; 43
    8d32:	9f ae       	std	Y+63, r9	; 0x3f
    8d34:	ab 97       	sbiw	r28, 0x2b	; 43
    8d36:	a0 90 58 29 	lds	r10, 0x2958	; 0x802958 <g_twi1_gyro_2_mag_z+0x1>
    8d3a:	ac 96       	adiw	r28, 0x2c	; 44
    8d3c:	af ae       	std	Y+63, r10	; 0x3f
			int32_t	l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
    8d3e:	ac 97       	sbiw	r28, 0x2c	; 44
    8d40:	80 90 53 29 	lds	r8, 0x2953	; 0x802953 <g_twi1_gyro_2_mag_x_nT>
    8d44:	90 90 54 29 	lds	r9, 0x2954	; 0x802954 <g_twi1_gyro_2_mag_x_nT+0x1>
    8d48:	a0 90 55 29 	lds	r10, 0x2955	; 0x802955 <g_twi1_gyro_2_mag_x_nT+0x2>
    8d4c:	b0 90 56 29 	lds	r11, 0x2956	; 0x802956 <g_twi1_gyro_2_mag_x_nT+0x3>
    8d50:	8f a6       	std	Y+47, r8	; 0x2f
    8d52:	98 aa       	std	Y+48, r9	; 0x30
    8d54:	a9 aa       	std	Y+49, r10	; 0x31
			int32_t	l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
    8d56:	ba aa       	std	Y+50, r11	; 0x32
    8d58:	80 90 4f 29 	lds	r8, 0x294F	; 0x80294f <g_twi1_gyro_2_mag_y_nT>
    8d5c:	90 90 50 29 	lds	r9, 0x2950	; 0x802950 <g_twi1_gyro_2_mag_y_nT+0x1>
    8d60:	a0 90 51 29 	lds	r10, 0x2951	; 0x802951 <g_twi1_gyro_2_mag_y_nT+0x2>
    8d64:	b0 90 52 29 	lds	r11, 0x2952	; 0x802952 <g_twi1_gyro_2_mag_y_nT+0x3>
    8d68:	8b aa       	std	Y+51, r8	; 0x33
    8d6a:	9c aa       	std	Y+52, r9	; 0x34
    8d6c:	ad aa       	std	Y+53, r10	; 0x35
			int32_t	l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
    8d6e:	be aa       	std	Y+54, r11	; 0x36
    8d70:	80 90 4b 29 	lds	r8, 0x294B	; 0x80294b <g_twi1_gyro_2_mag_z_nT>
    8d74:	90 90 4c 29 	lds	r9, 0x294C	; 0x80294c <g_twi1_gyro_2_mag_z_nT+0x1>
    8d78:	a0 90 4d 29 	lds	r10, 0x294D	; 0x80294d <g_twi1_gyro_2_mag_z_nT+0x2>
    8d7c:	b0 90 4e 29 	lds	r11, 0x294E	; 0x80294e <g_twi1_gyro_2_mag_z_nT+0x3>
			cpu_irq_restore(flags);

			printf("Time = %06ld: Uvco=%4d mV, U5v=%4d mV, Ubat=%4d mV, Uadc4=%4d mV, Uadc5=%4d mV, Usil=%4d mV, mP_Temp=%c%02d.%02dC\t \t" \
    8d80:	4f bf       	out	0x3f, r20	; 63
    8d82:	64 e6       	ldi	r22, 0x64	; 100
    8d84:	70 e0       	ldi	r23, 0x00	; 0
    8d86:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    8d8a:	28 96       	adiw	r28, 0x08	; 8
    8d8c:	6f af       	std	Y+63, r22	; 0x3f
    8d8e:	28 97       	sbiw	r28, 0x08	; 8
    8d90:	29 96       	adiw	r28, 0x09	; 9
    8d92:	7f af       	std	Y+63, r23	; 0x3f
    8d94:	29 97       	sbiw	r28, 0x09	; 9
    8d96:	26 96       	adiw	r28, 0x06	; 6
    8d98:	8f af       	std	Y+63, r24	; 0x3f
    8d9a:	26 97       	sbiw	r28, 0x06	; 6
    8d9c:	27 96       	adiw	r28, 0x07	; 7
    8d9e:	9f af       	std	Y+63, r25	; 0x3f
    8da0:	27 97       	sbiw	r28, 0x07	; 7
    8da2:	cf 01       	movw	r24, r30
    8da4:	ff 23       	and	r31, r31
    8da6:	24 f4       	brge	.+8      	; 0x8db0 <main+0xad2>
    8da8:	88 27       	eor	r24, r24
    8daa:	99 27       	eor	r25, r25
    8dac:	8e 1b       	sub	r24, r30
    8dae:	9f 0b       	sbc	r25, r31
    8db0:	64 e6       	ldi	r22, 0x64	; 100
    8db2:	70 e0       	ldi	r23, 0x00	; 0
    8db4:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    8db8:	2c 96       	adiw	r28, 0x0c	; 12
    8dba:	6f af       	std	Y+63, r22	; 0x3f
    8dbc:	2c 97       	sbiw	r28, 0x0c	; 12
    8dbe:	2d 96       	adiw	r28, 0x0d	; 13
    8dc0:	7f af       	std	Y+63, r23	; 0x3f
    8dc2:	2d 97       	sbiw	r28, 0x0d	; 13
    8dc4:	2a 96       	adiw	r28, 0x0a	; 10
    8dc6:	8f af       	std	Y+63, r24	; 0x3f
    8dc8:	2a 97       	sbiw	r28, 0x0a	; 10
    8dca:	2b 96       	adiw	r28, 0x0b	; 11
    8dcc:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8dce:	2b 97       	sbiw	r28, 0x0b	; 11
    8dd0:	ff 23       	and	r31, r31
    8dd2:	14 f4       	brge	.+4      	; 0x8dd8 <main+0xafa>
    8dd4:	8d e2       	ldi	r24, 0x2D	; 45
    8dd6:	01 c0       	rjmp	.+2      	; 0x8dda <main+0xafc>
			int32_t	l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
			int32_t	l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
			int32_t	l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
			cpu_irq_restore(flags);

			printf("Time = %06ld: Uvco=%4d mV, U5v=%4d mV, Ubat=%4d mV, Uadc4=%4d mV, Uadc5=%4d mV, Usil=%4d mV, mP_Temp=%c%02d.%02dC\t \t" \
    8dd8:	8b e2       	ldi	r24, 0x2B	; 43
    8dda:	48 2f       	mov	r20, r24
    8ddc:	88 0f       	add	r24, r24
    8dde:	55 0b       	sbc	r21, r21
    8de0:	4f ab       	std	Y+55, r20	; 0x37
    8de2:	58 af       	std	Y+56, r21	; 0x38
    8de4:	c9 01       	movw	r24, r18
    8de6:	b8 01       	movw	r22, r16
    8de8:	24 e6       	ldi	r18, 0x64	; 100
    8dea:	30 e0       	ldi	r19, 0x00	; 0
    8dec:	40 e0       	ldi	r20, 0x00	; 0
    8dee:	50 e0       	ldi	r21, 0x00	; 0
    8df0:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    8df4:	60 96       	adiw	r28, 0x10	; 16
    8df6:	2f af       	std	Y+63, r18	; 0x3f
    8df8:	60 97       	sbiw	r28, 0x10	; 16
    8dfa:	61 96       	adiw	r28, 0x11	; 17
    8dfc:	3f af       	std	Y+63, r19	; 0x3f
    8dfe:	61 97       	sbiw	r28, 0x11	; 17
    8e00:	62 96       	adiw	r28, 0x12	; 18
    8e02:	4f af       	std	Y+63, r20	; 0x3f
    8e04:	62 97       	sbiw	r28, 0x12	; 18
    8e06:	63 96       	adiw	r28, 0x13	; 19
    8e08:	5f af       	std	Y+63, r21	; 0x3f
    8e0a:	63 97       	sbiw	r28, 0x13	; 19
    8e0c:	2e 96       	adiw	r28, 0x0e	; 14
    8e0e:	6f af       	std	Y+63, r22	; 0x3f
    8e10:	2e 97       	sbiw	r28, 0x0e	; 14
    8e12:	2f 96       	adiw	r28, 0x0f	; 15
    8e14:	7f af       	std	Y+63, r23	; 0x3f
    8e16:	2f 97       	sbiw	r28, 0x0f	; 15
    8e18:	08 2f       	mov	r16, r24
    8e1a:	19 2f       	mov	r17, r25
    8e1c:	c3 01       	movw	r24, r6
    8e1e:	b2 01       	movw	r22, r4
    8e20:	77 20       	and	r7, r7
    8e22:	3c f4       	brge	.+14     	; 0x8e32 <main+0xb54>
    8e24:	66 27       	eor	r22, r22
    8e26:	77 27       	eor	r23, r23
    8e28:	cb 01       	movw	r24, r22
    8e2a:	64 19       	sub	r22, r4
    8e2c:	75 09       	sbc	r23, r5
    8e2e:	86 09       	sbc	r24, r6
    8e30:	97 09       	sbc	r25, r7
    8e32:	24 e6       	ldi	r18, 0x64	; 100
    8e34:	30 e0       	ldi	r19, 0x00	; 0
    8e36:	40 e0       	ldi	r20, 0x00	; 0
    8e38:	50 e0       	ldi	r21, 0x00	; 0
    8e3a:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    8e3e:	66 96       	adiw	r28, 0x16	; 22
    8e40:	2f af       	std	Y+63, r18	; 0x3f
    8e42:	66 97       	sbiw	r28, 0x16	; 22
    8e44:	67 96       	adiw	r28, 0x17	; 23
    8e46:	3f af       	std	Y+63, r19	; 0x3f
    8e48:	67 97       	sbiw	r28, 0x17	; 23
    8e4a:	68 96       	adiw	r28, 0x18	; 24
    8e4c:	5f af       	std	Y+63, r21	; 0x3f
    8e4e:	68 97       	sbiw	r28, 0x18	; 24
    8e50:	64 96       	adiw	r28, 0x14	; 20
    8e52:	6f af       	std	Y+63, r22	; 0x3f
    8e54:	64 97       	sbiw	r28, 0x14	; 20
    8e56:	f7 2f       	mov	r31, r23
    8e58:	e8 2f       	mov	r30, r24
    8e5a:	65 96       	adiw	r28, 0x15	; 21
    8e5c:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8e5e:	65 97       	sbiw	r28, 0x15	; 21
    8e60:	77 20       	and	r7, r7
    8e62:	14 f4       	brge	.+4      	; 0x8e68 <main+0xb8a>
    8e64:	2d e2       	ldi	r18, 0x2D	; 45
    8e66:	01 c0       	rjmp	.+2      	; 0x8e6a <main+0xb8c>
			int32_t	l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
			int32_t	l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
			int32_t	l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
			cpu_irq_restore(flags);

			printf("Time = %06ld: Uvco=%4d mV, U5v=%4d mV, Ubat=%4d mV, Uadc4=%4d mV, Uadc5=%4d mV, Usil=%4d mV, mP_Temp=%c%02d.%02dC\t \t" \
    8e68:	2b e2       	ldi	r18, 0x2B	; 43
    8e6a:	02 2e       	mov	r0, r18
    8e6c:	00 0c       	add	r0, r0
    8e6e:	33 0b       	sbc	r19, r19
    8e70:	89 89       	ldd	r24, Y+17	; 0x11
    8e72:	9a 89       	ldd	r25, Y+18	; 0x12
    8e74:	99 23       	and	r25, r25
    8e76:	1c f4       	brge	.+6      	; 0x8e7e <main+0xba0>
    8e78:	91 95       	neg	r25
    8e7a:	81 95       	neg	r24
    8e7c:	91 09       	sbc	r25, r1
    8e7e:	64 e6       	ldi	r22, 0x64	; 100
    8e80:	70 e0       	ldi	r23, 0x00	; 0
    8e82:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8e86:	a9 89       	ldd	r26, Y+17	; 0x11
    8e88:	ba 89       	ldd	r27, Y+18	; 0x12
    8e8a:	bb 23       	and	r27, r27
    8e8c:	14 f4       	brge	.+4      	; 0x8e92 <main+0xbb4>
    8e8e:	5d e2       	ldi	r21, 0x2D	; 45
    8e90:	01 c0       	rjmp	.+2      	; 0x8e94 <main+0xbb6>
			int32_t	l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
			int32_t	l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
			int32_t	l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
			cpu_irq_restore(flags);

			printf("Time = %06ld: Uvco=%4d mV, U5v=%4d mV, Ubat=%4d mV, Uadc4=%4d mV, Uadc5=%4d mV, Usil=%4d mV, mP_Temp=%c%02d.%02dC\t \t" \
    8e92:	5b e2       	ldi	r21, 0x2B	; 43
    8e94:	27 96       	adiw	r28, 0x07	; 7
    8e96:	bf ad       	ldd	r27, Y+63	; 0x3f
    8e98:	27 97       	sbiw	r28, 0x07	; 7
    8e9a:	bf 93       	push	r27
    8e9c:	26 96       	adiw	r28, 0x06	; 6
    8e9e:	af ad       	ldd	r26, Y+63	; 0x3f
    8ea0:	26 97       	sbiw	r28, 0x06	; 6
    8ea2:	af 93       	push	r26
    8ea4:	29 96       	adiw	r28, 0x09	; 9
    8ea6:	bf ad       	ldd	r27, Y+63	; 0x3f
    8ea8:	29 97       	sbiw	r28, 0x09	; 9
    8eaa:	bf 93       	push	r27
    8eac:	28 96       	adiw	r28, 0x08	; 8
    8eae:	af ad       	ldd	r26, Y+63	; 0x3f
    8eb0:	28 97       	sbiw	r28, 0x08	; 8
    8eb2:	af 93       	push	r26
    8eb4:	2b 96       	adiw	r28, 0x0b	; 11
    8eb6:	bf ad       	ldd	r27, Y+63	; 0x3f
    8eb8:	2b 97       	sbiw	r28, 0x0b	; 11
    8eba:	bf 93       	push	r27
    8ebc:	2a 96       	adiw	r28, 0x0a	; 10
    8ebe:	af ad       	ldd	r26, Y+63	; 0x3f
    8ec0:	2a 97       	sbiw	r28, 0x0a	; 10
    8ec2:	af 93       	push	r26
    8ec4:	2d 96       	adiw	r28, 0x0d	; 13
    8ec6:	bf ad       	ldd	r27, Y+63	; 0x3f
    8ec8:	2d 97       	sbiw	r28, 0x0d	; 13
    8eca:	bf 93       	push	r27
    8ecc:	2c 96       	adiw	r28, 0x0c	; 12
    8ece:	af ad       	ldd	r26, Y+63	; 0x3f
    8ed0:	2c 97       	sbiw	r28, 0x0c	; 12
    8ed2:	af 93       	push	r26
    8ed4:	b8 ad       	ldd	r27, Y+56	; 0x38
    8ed6:	bf 93       	push	r27
    8ed8:	af a9       	ldd	r26, Y+55	; 0x37
    8eda:	af 93       	push	r26
    8edc:	1f 93       	push	r17
    8ede:	0f 93       	push	r16
    8ee0:	2f 96       	adiw	r28, 0x0f	; 15
    8ee2:	bf ad       	ldd	r27, Y+63	; 0x3f
    8ee4:	2f 97       	sbiw	r28, 0x0f	; 15
    8ee6:	bf 93       	push	r27
    8ee8:	2e 96       	adiw	r28, 0x0e	; 14
    8eea:	af ad       	ldd	r26, Y+63	; 0x3f
    8eec:	2e 97       	sbiw	r28, 0x0e	; 14
    8eee:	af 93       	push	r26
    8ef0:	63 96       	adiw	r28, 0x13	; 19
    8ef2:	bf ad       	ldd	r27, Y+63	; 0x3f
    8ef4:	63 97       	sbiw	r28, 0x13	; 19
    8ef6:	bf 93       	push	r27
    8ef8:	62 96       	adiw	r28, 0x12	; 18
    8efa:	af ad       	ldd	r26, Y+63	; 0x3f
    8efc:	62 97       	sbiw	r28, 0x12	; 18
    8efe:	af 93       	push	r26
    8f00:	61 96       	adiw	r28, 0x11	; 17
    8f02:	bf ad       	ldd	r27, Y+63	; 0x3f
    8f04:	61 97       	sbiw	r28, 0x11	; 17
    8f06:	bf 93       	push	r27
    8f08:	60 96       	adiw	r28, 0x10	; 16
    8f0a:	af ad       	ldd	r26, Y+63	; 0x3f
    8f0c:	60 97       	sbiw	r28, 0x10	; 16
    8f0e:	af 93       	push	r26
    8f10:	65 96       	adiw	r28, 0x15	; 21
    8f12:	bf ad       	ldd	r27, Y+63	; 0x3f
    8f14:	65 97       	sbiw	r28, 0x15	; 21
    8f16:	bf 93       	push	r27
    8f18:	ef 93       	push	r30
    8f1a:	ff 93       	push	r31
    8f1c:	64 96       	adiw	r28, 0x14	; 20
    8f1e:	ef ad       	ldd	r30, Y+63	; 0x3f
    8f20:	64 97       	sbiw	r28, 0x14	; 20
    8f22:	ef 93       	push	r30
    8f24:	68 96       	adiw	r28, 0x18	; 24
    8f26:	ff ad       	ldd	r31, Y+63	; 0x3f
    8f28:	68 97       	sbiw	r28, 0x18	; 24
    8f2a:	ff 93       	push	r31
    8f2c:	4f 93       	push	r20
    8f2e:	67 96       	adiw	r28, 0x17	; 23
    8f30:	ef ad       	ldd	r30, Y+63	; 0x3f
    8f32:	67 97       	sbiw	r28, 0x17	; 23
    8f34:	ef 93       	push	r30
    8f36:	66 96       	adiw	r28, 0x16	; 22
    8f38:	ff ad       	ldd	r31, Y+63	; 0x3f
    8f3a:	66 97       	sbiw	r28, 0x16	; 22
    8f3c:	ff 93       	push	r31
    8f3e:	3f 93       	push	r19
    8f40:	2f 93       	push	r18
    8f42:	9f 93       	push	r25
    8f44:	8f 93       	push	r24
    8f46:	7f 93       	push	r23
    8f48:	6f 93       	push	r22
    8f4a:	85 2f       	mov	r24, r21
    8f4c:	05 2e       	mov	r0, r21
    8f4e:	00 0c       	add	r0, r0
    8f50:	99 0b       	sbc	r25, r25
    8f52:	9f 93       	push	r25
    8f54:	5f 93       	push	r21
    8f56:	25 96       	adiw	r28, 0x05	; 5
    8f58:	2f ad       	ldd	r18, Y+63	; 0x3f
    8f5a:	25 97       	sbiw	r28, 0x05	; 5
    8f5c:	2f 93       	push	r18
    8f5e:	24 96       	adiw	r28, 0x04	; 4
    8f60:	3f ad       	ldd	r19, Y+63	; 0x3f
    8f62:	24 97       	sbiw	r28, 0x04	; 4
    8f64:	3f 93       	push	r19
    8f66:	23 96       	adiw	r28, 0x03	; 3
    8f68:	4f ad       	ldd	r20, Y+63	; 0x3f
    8f6a:	23 97       	sbiw	r28, 0x03	; 3
    8f6c:	4f 93       	push	r20
    8f6e:	22 96       	adiw	r28, 0x02	; 2
    8f70:	5f ad       	ldd	r21, Y+63	; 0x3f
    8f72:	22 97       	sbiw	r28, 0x02	; 2
    8f74:	5f 93       	push	r21
    8f76:	21 96       	adiw	r28, 0x01	; 1
    8f78:	6f ad       	ldd	r22, Y+63	; 0x3f
    8f7a:	21 97       	sbiw	r28, 0x01	; 1
    8f7c:	6f 93       	push	r22
    8f7e:	7f ad       	ldd	r23, Y+63	; 0x3f
    8f80:	7f 93       	push	r23
    8f82:	8e ad       	ldd	r24, Y+62	; 0x3e
    8f84:	8f 93       	push	r24
    8f86:	9d ad       	ldd	r25, Y+61	; 0x3d
    8f88:	9f 93       	push	r25
    8f8a:	ac ad       	ldd	r26, Y+60	; 0x3c
    8f8c:	af 93       	push	r26
    8f8e:	bb ad       	ldd	r27, Y+59	; 0x3b
    8f90:	bf 93       	push	r27
    8f92:	ea ad       	ldd	r30, Y+58	; 0x3a
    8f94:	ef 93       	push	r30
    8f96:	f9 ad       	ldd	r31, Y+57	; 0x39
    8f98:	ff 93       	push	r31
    8f9a:	0b 2e       	mov	r0, r27
    8f9c:	ba e0       	ldi	r27, 0x0A	; 10
    8f9e:	f6 94       	lsr	r15
    8fa0:	e7 94       	ror	r14
    8fa2:	d7 94       	ror	r13
    8fa4:	c7 94       	ror	r12
    8fa6:	ba 95       	dec	r27
    8fa8:	d1 f7       	brne	.-12     	; 0x8f9e <main+0xcc0>
    8faa:	b0 2d       	mov	r27, r0
    8fac:	ff 92       	push	r15
    8fae:	ef 92       	push	r14
    8fb0:	df 92       	push	r13
    8fb2:	cf 92       	push	r12
    8fb4:	25 e9       	ldi	r18, 0x95	; 149
    8fb6:	34 e2       	ldi	r19, 0x24	; 36
    8fb8:	3f 93       	push	r19
    8fba:	2f 93       	push	r18
    8fbc:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>
    8fc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    8fc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    8fc4:	99 23       	and	r25, r25
    8fc6:	1c f4       	brge	.+6      	; 0x8fce <main+0xcf0>
    8fc8:	91 95       	neg	r25
    8fca:	81 95       	neg	r24
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8fcc:	91 09       	sbc	r25, r1
    8fce:	64 e6       	ldi	r22, 0x64	; 100
    8fd0:	70 e0       	ldi	r23, 0x00	; 0
    8fd2:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    8fd6:	69 af       	std	Y+57, r22	; 0x39
    8fd8:	7a af       	std	Y+58, r23	; 0x3a
    8fda:	89 8b       	std	Y+17, r24	; 0x11


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    8fdc:	9f ab       	std	Y+55, r25	; 0x37
    8fde:	cd bf       	out	0x3d, r28	; 61
    8fe0:	de bf       	out	0x3e, r29	; 62
    8fe2:	8d a5       	ldd	r24, Y+45	; 0x2d
    8fe4:	9e a5       	ldd	r25, Y+46	; 0x2e
    8fe6:	99 23       	and	r25, r25
    8fe8:	14 f4       	brge	.+4      	; 0x8fee <main+0xd10>
    8fea:	0d e2       	ldi	r16, 0x2D	; 45
    8fec:	01 c0       	rjmp	.+2      	; 0x8ff0 <main+0xd12>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    8fee:	0b e2       	ldi	r16, 0x2B	; 43
    8ff0:	00 2e       	mov	r0, r16
    8ff2:	00 0c       	add	r0, r0
    8ff4:	11 0b       	sbc	r17, r17
    8ff6:	c5 01       	movw	r24, r10
    8ff8:	b4 01       	movw	r22, r8
    8ffa:	bb 20       	and	r11, r11
    8ffc:	3c f4       	brge	.+14     	; 0x900c <main+0xd2e>
    8ffe:	66 27       	eor	r22, r22
    9000:	77 27       	eor	r23, r23
    9002:	cb 01       	movw	r24, r22
    9004:	68 19       	sub	r22, r8
    9006:	79 09       	sbc	r23, r9
    9008:	8a 09       	sbc	r24, r10
    900a:	9b 09       	sbc	r25, r11
    900c:	28 ee       	ldi	r18, 0xE8	; 232
    900e:	33 e0       	ldi	r19, 0x03	; 3
    9010:	40 e0       	ldi	r20, 0x00	; 0
    9012:	50 e0       	ldi	r21, 0x00	; 0
    9014:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    9018:	2e af       	std	Y+62, r18	; 0x3e
    901a:	3f af       	std	Y+63, r19	; 0x3f
    901c:	21 96       	adiw	r28, 0x01	; 1
    901e:	4f af       	std	Y+63, r20	; 0x3f
    9020:	21 97       	sbiw	r28, 0x01	; 1
    9022:	22 96       	adiw	r28, 0x02	; 2
    9024:	5f af       	std	Y+63, r21	; 0x3f
    9026:	22 97       	sbiw	r28, 0x02	; 2
    9028:	6d a7       	std	Y+45, r22	; 0x2d
    902a:	7b af       	std	Y+59, r23	; 0x3b
    902c:	8c af       	std	Y+60, r24	; 0x3c


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    902e:	9d af       	std	Y+61, r25	; 0x3d
    9030:	bb 20       	and	r11, r11
    9032:	14 f4       	brge	.+4      	; 0x9038 <main+0xd5a>
    9034:	8d e2       	ldi	r24, 0x2D	; 45
    9036:	01 c0       	rjmp	.+2      	; 0x903a <main+0xd5c>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    9038:	8b e2       	ldi	r24, 0x2B	; 43
    903a:	e8 2e       	mov	r14, r24
    903c:	88 0f       	add	r24, r24
    903e:	ff 08       	sbc	r15, r15
    9040:	6b a9       	ldd	r22, Y+51	; 0x33
    9042:	7c a9       	ldd	r23, Y+52	; 0x34
    9044:	8d a9       	ldd	r24, Y+53	; 0x35
    9046:	9e a9       	ldd	r25, Y+54	; 0x36
    9048:	99 23       	and	r25, r25
    904a:	3c f4       	brge	.+14     	; 0x905a <main+0xd7c>
    904c:	90 95       	com	r25
    904e:	80 95       	com	r24
    9050:	70 95       	com	r23
    9052:	61 95       	neg	r22
    9054:	7f 4f       	sbci	r23, 0xFF	; 255
    9056:	8f 4f       	sbci	r24, 0xFF	; 255
    9058:	9f 4f       	sbci	r25, 0xFF	; 255
    905a:	28 ee       	ldi	r18, 0xE8	; 232
    905c:	33 e0       	ldi	r19, 0x03	; 3
    905e:	40 e0       	ldi	r20, 0x00	; 0
    9060:	50 e0       	ldi	r21, 0x00	; 0
    9062:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    9066:	27 96       	adiw	r28, 0x07	; 7
    9068:	2f af       	std	Y+63, r18	; 0x3f
    906a:	27 97       	sbiw	r28, 0x07	; 7
    906c:	28 96       	adiw	r28, 0x08	; 8
    906e:	3f af       	std	Y+63, r19	; 0x3f
    9070:	28 97       	sbiw	r28, 0x08	; 8
    9072:	29 96       	adiw	r28, 0x09	; 9
    9074:	4f af       	std	Y+63, r20	; 0x3f
    9076:	29 97       	sbiw	r28, 0x09	; 9
    9078:	2a 96       	adiw	r28, 0x0a	; 10
    907a:	5f af       	std	Y+63, r21	; 0x3f
    907c:	2a 97       	sbiw	r28, 0x0a	; 10
    907e:	23 96       	adiw	r28, 0x03	; 3
    9080:	6f af       	std	Y+63, r22	; 0x3f
    9082:	23 97       	sbiw	r28, 0x03	; 3
    9084:	24 96       	adiw	r28, 0x04	; 4
    9086:	7f af       	std	Y+63, r23	; 0x3f
    9088:	24 97       	sbiw	r28, 0x04	; 4
    908a:	25 96       	adiw	r28, 0x05	; 5
    908c:	8f af       	std	Y+63, r24	; 0x3f
    908e:	25 97       	sbiw	r28, 0x05	; 5
    9090:	26 96       	adiw	r28, 0x06	; 6
    9092:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    9094:	26 97       	sbiw	r28, 0x06	; 6
    9096:	8b a8       	ldd	r8, Y+51	; 0x33
    9098:	9c a8       	ldd	r9, Y+52	; 0x34
    909a:	ad a8       	ldd	r10, Y+53	; 0x35
    909c:	be a8       	ldd	r11, Y+54	; 0x36
    909e:	bb 20       	and	r11, r11
    90a0:	14 f4       	brge	.+4      	; 0x90a6 <main+0xdc8>
    90a2:	8d e2       	ldi	r24, 0x2D	; 45
    90a4:	01 c0       	rjmp	.+2      	; 0x90a8 <main+0xdca>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    90a6:	8b e2       	ldi	r24, 0x2B	; 43
    90a8:	c8 2e       	mov	r12, r24
    90aa:	88 0f       	add	r24, r24
    90ac:	dd 08       	sbc	r13, r13
    90ae:	6f a5       	ldd	r22, Y+47	; 0x2f
    90b0:	78 a9       	ldd	r23, Y+48	; 0x30
    90b2:	89 a9       	ldd	r24, Y+49	; 0x31
    90b4:	9a a9       	ldd	r25, Y+50	; 0x32
    90b6:	99 23       	and	r25, r25
    90b8:	3c f4       	brge	.+14     	; 0x90c8 <main+0xdea>
    90ba:	90 95       	com	r25
    90bc:	80 95       	com	r24
    90be:	70 95       	com	r23
    90c0:	61 95       	neg	r22
    90c2:	7f 4f       	sbci	r23, 0xFF	; 255
    90c4:	8f 4f       	sbci	r24, 0xFF	; 255
    90c6:	9f 4f       	sbci	r25, 0xFF	; 255
    90c8:	28 ee       	ldi	r18, 0xE8	; 232
    90ca:	33 e0       	ldi	r19, 0x03	; 3
    90cc:	40 e0       	ldi	r20, 0x00	; 0
    90ce:	50 e0       	ldi	r21, 0x00	; 0
    90d0:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    90d4:	2e 96       	adiw	r28, 0x0e	; 14
    90d6:	2f af       	std	Y+63, r18	; 0x3f
    90d8:	2e 97       	sbiw	r28, 0x0e	; 14
    90da:	2f 96       	adiw	r28, 0x0f	; 15
    90dc:	3f af       	std	Y+63, r19	; 0x3f
    90de:	2f 97       	sbiw	r28, 0x0f	; 15
    90e0:	60 96       	adiw	r28, 0x10	; 16
    90e2:	4f af       	std	Y+63, r20	; 0x3f
    90e4:	60 97       	sbiw	r28, 0x10	; 16
    90e6:	61 96       	adiw	r28, 0x11	; 17
    90e8:	5f af       	std	Y+63, r21	; 0x3f
    90ea:	61 97       	sbiw	r28, 0x11	; 17
    90ec:	6b ab       	std	Y+51, r22	; 0x33
    90ee:	2b 96       	adiw	r28, 0x0b	; 11
    90f0:	7f af       	std	Y+63, r23	; 0x3f
    90f2:	2b 97       	sbiw	r28, 0x0b	; 11
    90f4:	2c 96       	adiw	r28, 0x0c	; 12
    90f6:	8f af       	std	Y+63, r24	; 0x3f
    90f8:	2c 97       	sbiw	r28, 0x0c	; 12
    90fa:	2d 96       	adiw	r28, 0x0d	; 13
    90fc:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    90fe:	2d 97       	sbiw	r28, 0x0d	; 13
    9100:	8f a4       	ldd	r8, Y+47	; 0x2f
    9102:	98 a8       	ldd	r9, Y+48	; 0x30
    9104:	a9 a8       	ldd	r10, Y+49	; 0x31
    9106:	ba a8       	ldd	r11, Y+50	; 0x32
    9108:	bb 20       	and	r11, r11
    910a:	14 f4       	brge	.+4      	; 0x9110 <main+0xe32>
    910c:	8d e2       	ldi	r24, 0x2D	; 45
    910e:	01 c0       	rjmp	.+2      	; 0x9112 <main+0xe34>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    9110:	8b e2       	ldi	r24, 0x2B	; 43
    9112:	a8 2e       	mov	r10, r24
    9114:	88 0f       	add	r24, r24
    9116:	bb 08       	sbc	r11, r11
    9118:	69 a5       	ldd	r22, Y+41	; 0x29
    911a:	7a a5       	ldd	r23, Y+42	; 0x2a
    911c:	8b a5       	ldd	r24, Y+43	; 0x2b
    911e:	9c a5       	ldd	r25, Y+44	; 0x2c
    9120:	99 23       	and	r25, r25
    9122:	3c f4       	brge	.+14     	; 0x9132 <main+0xe54>
    9124:	90 95       	com	r25
    9126:	80 95       	com	r24
    9128:	70 95       	com	r23
    912a:	61 95       	neg	r22
    912c:	7f 4f       	sbci	r23, 0xFF	; 255
    912e:	8f 4f       	sbci	r24, 0xFF	; 255
    9130:	9f 4f       	sbci	r25, 0xFF	; 255
    9132:	28 ee       	ldi	r18, 0xE8	; 232
    9134:	33 e0       	ldi	r19, 0x03	; 3
    9136:	40 e0       	ldi	r20, 0x00	; 0
    9138:	50 e0       	ldi	r21, 0x00	; 0
    913a:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    913e:	65 96       	adiw	r28, 0x15	; 21
    9140:	2f af       	std	Y+63, r18	; 0x3f
    9142:	65 97       	sbiw	r28, 0x15	; 21
    9144:	66 96       	adiw	r28, 0x16	; 22
    9146:	3f af       	std	Y+63, r19	; 0x3f
    9148:	66 97       	sbiw	r28, 0x16	; 22
    914a:	67 96       	adiw	r28, 0x17	; 23
    914c:	4f af       	std	Y+63, r20	; 0x3f
    914e:	67 97       	sbiw	r28, 0x17	; 23
    9150:	68 96       	adiw	r28, 0x18	; 24
    9152:	5f af       	std	Y+63, r21	; 0x3f
    9154:	68 97       	sbiw	r28, 0x18	; 24
    9156:	6f a7       	std	Y+47, r22	; 0x2f
    9158:	62 96       	adiw	r28, 0x12	; 18
    915a:	7f af       	std	Y+63, r23	; 0x3f
    915c:	62 97       	sbiw	r28, 0x12	; 18
    915e:	63 96       	adiw	r28, 0x13	; 19
    9160:	8f af       	std	Y+63, r24	; 0x3f
    9162:	63 97       	sbiw	r28, 0x13	; 19
    9164:	64 96       	adiw	r28, 0x14	; 20
    9166:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    9168:	64 97       	sbiw	r28, 0x14	; 20
    916a:	29 a5       	ldd	r18, Y+41	; 0x29
    916c:	3a a5       	ldd	r19, Y+42	; 0x2a
    916e:	4b a5       	ldd	r20, Y+43	; 0x2b
    9170:	5c a5       	ldd	r21, Y+44	; 0x2c
    9172:	55 23       	and	r21, r21
    9174:	14 f4       	brge	.+4      	; 0x917a <main+0xe9c>
    9176:	8d e2       	ldi	r24, 0x2D	; 45
    9178:	01 c0       	rjmp	.+2      	; 0x917c <main+0xe9e>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    917a:	8b e2       	ldi	r24, 0x2B	; 43
    917c:	88 2e       	mov	r8, r24
    917e:	88 0f       	add	r24, r24
    9180:	99 08       	sbc	r9, r9
    9182:	6d a1       	ldd	r22, Y+37	; 0x25
    9184:	7e a1       	ldd	r23, Y+38	; 0x26
    9186:	8f a1       	ldd	r24, Y+39	; 0x27
    9188:	98 a5       	ldd	r25, Y+40	; 0x28
    918a:	99 23       	and	r25, r25
    918c:	3c f4       	brge	.+14     	; 0x919c <main+0xebe>
    918e:	90 95       	com	r25
    9190:	80 95       	com	r24
    9192:	70 95       	com	r23
    9194:	61 95       	neg	r22
    9196:	7f 4f       	sbci	r23, 0xFF	; 255
    9198:	8f 4f       	sbci	r24, 0xFF	; 255
    919a:	9f 4f       	sbci	r25, 0xFF	; 255
    919c:	28 ee       	ldi	r18, 0xE8	; 232
    919e:	33 e0       	ldi	r19, 0x03	; 3
    91a0:	40 e0       	ldi	r20, 0x00	; 0
    91a2:	50 e0       	ldi	r21, 0x00	; 0
    91a4:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    91a8:	e0 96       	adiw	r28, 0x30	; 48
    91aa:	2f af       	std	Y+63, r18	; 0x3f
    91ac:	e0 97       	sbiw	r28, 0x30	; 48
    91ae:	e1 96       	adiw	r28, 0x31	; 49
    91b0:	3f af       	std	Y+63, r19	; 0x3f
    91b2:	e1 97       	sbiw	r28, 0x31	; 49
    91b4:	e2 96       	adiw	r28, 0x32	; 50
    91b6:	4f af       	std	Y+63, r20	; 0x3f
    91b8:	e2 97       	sbiw	r28, 0x32	; 50
    91ba:	e3 96       	adiw	r28, 0x33	; 51
    91bc:	5f af       	std	Y+63, r21	; 0x3f
    91be:	e3 97       	sbiw	r28, 0x33	; 51
    91c0:	69 a7       	std	Y+41, r22	; 0x29
    91c2:	ad 96       	adiw	r28, 0x2d	; 45
    91c4:	7f af       	std	Y+63, r23	; 0x3f
    91c6:	ad 97       	sbiw	r28, 0x2d	; 45
    91c8:	ae 96       	adiw	r28, 0x2e	; 46
    91ca:	8f af       	std	Y+63, r24	; 0x3f
    91cc:	ae 97       	sbiw	r28, 0x2e	; 46
    91ce:	af 96       	adiw	r28, 0x2f	; 47
    91d0:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    91d2:	af 97       	sbiw	r28, 0x2f	; 47
    91d4:	4d a1       	ldd	r20, Y+37	; 0x25
    91d6:	5e a1       	ldd	r21, Y+38	; 0x26
    91d8:	6f a1       	ldd	r22, Y+39	; 0x27
    91da:	78 a5       	ldd	r23, Y+40	; 0x28
    91dc:	77 23       	and	r23, r23
    91de:	14 f4       	brge	.+4      	; 0x91e4 <main+0xf06>
    91e0:	8d e2       	ldi	r24, 0x2D	; 45
    91e2:	01 c0       	rjmp	.+2      	; 0x91e6 <main+0xf08>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    91e4:	8b e2       	ldi	r24, 0x2B	; 43
    91e6:	68 2e       	mov	r6, r24
    91e8:	88 0f       	add	r24, r24
    91ea:	77 08       	sbc	r7, r7
    91ec:	69 a1       	ldd	r22, Y+33	; 0x21
    91ee:	7a a1       	ldd	r23, Y+34	; 0x22
    91f0:	8b a1       	ldd	r24, Y+35	; 0x23
    91f2:	9c a1       	ldd	r25, Y+36	; 0x24
    91f4:	99 23       	and	r25, r25
    91f6:	3c f4       	brge	.+14     	; 0x9206 <main+0xf28>
    91f8:	90 95       	com	r25
    91fa:	80 95       	com	r24
    91fc:	70 95       	com	r23
    91fe:	61 95       	neg	r22
    9200:	7f 4f       	sbci	r23, 0xFF	; 255
    9202:	8f 4f       	sbci	r24, 0xFF	; 255
    9204:	9f 4f       	sbci	r25, 0xFF	; 255
    9206:	28 ee       	ldi	r18, 0xE8	; 232
    9208:	33 e0       	ldi	r19, 0x03	; 3
    920a:	40 e0       	ldi	r20, 0x00	; 0
    920c:	50 e0       	ldi	r21, 0x00	; 0
    920e:	0e 94 1f 54 	call	0xa83e	; 0xa83e <__divmodsi4>
    9212:	e7 96       	adiw	r28, 0x37	; 55
    9214:	2f af       	std	Y+63, r18	; 0x3f
    9216:	e7 97       	sbiw	r28, 0x37	; 55
    9218:	e8 96       	adiw	r28, 0x38	; 56
    921a:	3f af       	std	Y+63, r19	; 0x3f
    921c:	e8 97       	sbiw	r28, 0x38	; 56
    921e:	e9 96       	adiw	r28, 0x39	; 57
    9220:	5f af       	std	Y+63, r21	; 0x3f
    9222:	e9 97       	sbiw	r28, 0x39	; 57
    9224:	6d a3       	std	Y+37, r22	; 0x25
    9226:	e4 96       	adiw	r28, 0x34	; 52
    9228:	7f af       	std	Y+63, r23	; 0x3f
    922a:	e4 97       	sbiw	r28, 0x34	; 52
    922c:	e5 96       	adiw	r28, 0x35	; 53
    922e:	8f af       	std	Y+63, r24	; 0x3f
    9230:	e5 97       	sbiw	r28, 0x35	; 53
    9232:	e6 96       	adiw	r28, 0x36	; 54
    9234:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    9236:	e6 97       	sbiw	r28, 0x36	; 54
    9238:	69 a1       	ldd	r22, Y+33	; 0x21
    923a:	7a a1       	ldd	r23, Y+34	; 0x22
    923c:	8b a1       	ldd	r24, Y+35	; 0x23
    923e:	9c a1       	ldd	r25, Y+36	; 0x24
    9240:	99 23       	and	r25, r25
    9242:	14 f4       	brge	.+4      	; 0x9248 <main+0xf6a>
    9244:	2d e2       	ldi	r18, 0x2D	; 45
    9246:	01 c0       	rjmp	.+2      	; 0x924a <main+0xf6c>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    9248:	2b e2       	ldi	r18, 0x2B	; 43
    924a:	02 2e       	mov	r0, r18
    924c:	00 0c       	add	r0, r0
    924e:	33 0b       	sbc	r19, r19
    9250:	8d 89       	ldd	r24, Y+21	; 0x15
    9252:	9e 89       	ldd	r25, Y+22	; 0x16
    9254:	99 23       	and	r25, r25
    9256:	1c f4       	brge	.+6      	; 0x925e <main+0xf80>
    9258:	91 95       	neg	r25
    925a:	81 95       	neg	r24
    925c:	91 09       	sbc	r25, r1
    925e:	68 ee       	ldi	r22, 0xE8	; 232
    9260:	73 e0       	ldi	r23, 0x03	; 3
    9262:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    9266:	eb 96       	adiw	r28, 0x3b	; 59
    9268:	6f af       	std	Y+63, r22	; 0x3f
    926a:	eb 97       	sbiw	r28, 0x3b	; 59
    926c:	ec 96       	adiw	r28, 0x3c	; 60
    926e:	7f af       	std	Y+63, r23	; 0x3f
    9270:	ec 97       	sbiw	r28, 0x3c	; 60
    9272:	89 a3       	std	Y+33, r24	; 0x21
    9274:	ea 96       	adiw	r28, 0x3a	; 58
    9276:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    9278:	ea 97       	sbiw	r28, 0x3a	; 58
    927a:	8d 89       	ldd	r24, Y+21	; 0x15
    927c:	9e 89       	ldd	r25, Y+22	; 0x16
    927e:	99 23       	and	r25, r25
    9280:	14 f4       	brge	.+4      	; 0x9286 <main+0xfa8>
    9282:	ed e2       	ldi	r30, 0x2D	; 45
    9284:	01 c0       	rjmp	.+2      	; 0x9288 <main+0xfaa>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    9286:	eb e2       	ldi	r30, 0x2B	; 43
    9288:	0e 2e       	mov	r0, r30
    928a:	00 0c       	add	r0, r0
    928c:	ff 0b       	sbc	r31, r31
    928e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9290:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9292:	99 23       	and	r25, r25
    9294:	1c f4       	brge	.+6      	; 0x929c <main+0xfbe>
    9296:	91 95       	neg	r25
    9298:	81 95       	neg	r24
    929a:	91 09       	sbc	r25, r1
    929c:	68 ee       	ldi	r22, 0xE8	; 232
    929e:	73 e0       	ldi	r23, 0x03	; 3
    92a0:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>
    92a4:	ee 96       	adiw	r28, 0x3e	; 62
    92a6:	6f af       	std	Y+63, r22	; 0x3f
    92a8:	ee 97       	sbiw	r28, 0x3e	; 62
    92aa:	ef 96       	adiw	r28, 0x3f	; 63
    92ac:	7f af       	std	Y+63, r23	; 0x3f
    92ae:	ef 97       	sbiw	r28, 0x3f	; 63
    92b0:	8d 8b       	std	Y+21, r24	; 0x15
    92b2:	ed 96       	adiw	r28, 0x3d	; 61
    92b4:	9f af       	std	Y+63, r25	; 0x3f


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    92b6:	ed 97       	sbiw	r28, 0x3d	; 61
    92b8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    92ba:	be 8d       	ldd	r27, Y+30	; 0x1e
    92bc:	bb 23       	and	r27, r27
    92be:	14 f4       	brge	.+4      	; 0x92c4 <main+0xfe6>
    92c0:	8d e2       	ldi	r24, 0x2D	; 45
    92c2:	01 c0       	rjmp	.+2      	; 0x92c6 <main+0xfe8>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    92c4:	8b e2       	ldi	r24, 0x2B	; 43
    92c6:	48 2e       	mov	r4, r24
    92c8:	88 0f       	add	r24, r24
    92ca:	55 08       	sbc	r5, r5
    92cc:	89 8d       	ldd	r24, Y+25	; 0x19
    92ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    92d0:	99 23       	and	r25, r25
    92d2:	1c f4       	brge	.+6      	; 0x92da <main+0xffc>
    92d4:	91 95       	neg	r25
    92d6:	81 95       	neg	r24
    92d8:	91 09       	sbc	r25, r1
    92da:	68 ee       	ldi	r22, 0xE8	; 232
    92dc:	73 e0       	ldi	r23, 0x03	; 3
    92de:	0e 94 ea 53 	call	0xa7d4	; 0xa7d4 <__divmodhi4>


/* UTILS section */

static char sgn_of(long x) {
	return x >= 0 ?  '+' : '-';
    92e2:	a9 8d       	ldd	r26, Y+25	; 0x19
    92e4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    92e6:	bb 23       	and	r27, r27
    92e8:	14 f4       	brge	.+4      	; 0x92ee <main+0x1010>
    92ea:	5d e2       	ldi	r21, 0x2D	; 45
    92ec:	01 c0       	rjmp	.+2      	; 0x92f0 <main+0x1012>
			now >> 10,
			l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000, l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000, sgn_of(l_adc_temp_deg_100), abs_int16(l_adc_temp_deg_100) / 100, abs_int16(l_adc_temp_deg_100) % 100,
			sgn_of(l_twi1_baro_temp_100), abs_int32(l_twi1_baro_temp_100) / 100, abs_int32(l_twi1_baro_temp_100) % 100, l_twi1_baro_p_100 / 100, l_twi1_baro_p_100 % 100,
			sgn_of(l_twi1_hygro_T_100), abs_int16(l_twi1_hygro_T_100) / 100, abs_int16(l_twi1_hygro_T_100) % 100, l_twi1_hygro_RH_100 / 100, l_twi1_hygro_RH_100 % 100);

			printf("\tAx=%c%01d.%03dg (%+06d), Ay=%c%01d.%03dg (%+06d), Az=%c%01d.%03dg (%+06d)\t \t" \
    92ee:	5b e2       	ldi	r21, 0x2B	; 43
    92f0:	a6 96       	adiw	r28, 0x26	; 38
    92f2:	bf ad       	ldd	r27, Y+63	; 0x3f
    92f4:	a6 97       	sbiw	r28, 0x26	; 38
    92f6:	bf 93       	push	r27
    92f8:	a5 96       	adiw	r28, 0x25	; 37
    92fa:	af ad       	ldd	r26, Y+63	; 0x3f
    92fc:	a5 97       	sbiw	r28, 0x25	; 37
    92fe:	af 93       	push	r26
    9300:	bf a9       	ldd	r27, Y+55	; 0x37
    9302:	bf 93       	push	r27
    9304:	a9 89       	ldd	r26, Y+17	; 0x11
    9306:	af 93       	push	r26
    9308:	ba ad       	ldd	r27, Y+58	; 0x3a
    930a:	bf 93       	push	r27
    930c:	a9 ad       	ldd	r26, Y+57	; 0x39
    930e:	af 93       	push	r26
    9310:	1f 93       	push	r17
    9312:	0f 93       	push	r16
    9314:	ac 96       	adiw	r28, 0x2c	; 44
    9316:	bf ad       	ldd	r27, Y+63	; 0x3f
    9318:	ac 97       	sbiw	r28, 0x2c	; 44
    931a:	bf 93       	push	r27
    931c:	ab 96       	adiw	r28, 0x2b	; 43
    931e:	af ad       	ldd	r26, Y+63	; 0x3f
    9320:	ab 97       	sbiw	r28, 0x2b	; 43
    9322:	af 93       	push	r26
    9324:	bd ad       	ldd	r27, Y+61	; 0x3d
    9326:	bf 93       	push	r27
    9328:	ac ad       	ldd	r26, Y+60	; 0x3c
    932a:	af 93       	push	r26
    932c:	bb ad       	ldd	r27, Y+59	; 0x3b
    932e:	bf 93       	push	r27
    9330:	ad a5       	ldd	r26, Y+45	; 0x2d
    9332:	af 93       	push	r26
    9334:	22 96       	adiw	r28, 0x02	; 2
    9336:	bf ad       	ldd	r27, Y+63	; 0x3f
    9338:	22 97       	sbiw	r28, 0x02	; 2
    933a:	bf 93       	push	r27
    933c:	21 96       	adiw	r28, 0x01	; 1
    933e:	af ad       	ldd	r26, Y+63	; 0x3f
    9340:	21 97       	sbiw	r28, 0x01	; 1
    9342:	af 93       	push	r26
    9344:	bf ad       	ldd	r27, Y+63	; 0x3f
    9346:	bf 93       	push	r27
    9348:	ae ad       	ldd	r26, Y+62	; 0x3e
    934a:	af 93       	push	r26
    934c:	ff 92       	push	r15
    934e:	ef 92       	push	r14
    9350:	aa 96       	adiw	r28, 0x2a	; 42
    9352:	bf ad       	ldd	r27, Y+63	; 0x3f
    9354:	aa 97       	sbiw	r28, 0x2a	; 42
    9356:	bf 93       	push	r27
    9358:	a9 96       	adiw	r28, 0x29	; 41
    935a:	af ad       	ldd	r26, Y+63	; 0x3f
    935c:	a9 97       	sbiw	r28, 0x29	; 41
    935e:	af 93       	push	r26
    9360:	26 96       	adiw	r28, 0x06	; 6
    9362:	bf ad       	ldd	r27, Y+63	; 0x3f
    9364:	26 97       	sbiw	r28, 0x06	; 6
    9366:	bf 93       	push	r27
    9368:	25 96       	adiw	r28, 0x05	; 5
    936a:	af ad       	ldd	r26, Y+63	; 0x3f
    936c:	25 97       	sbiw	r28, 0x05	; 5
    936e:	af 93       	push	r26
    9370:	24 96       	adiw	r28, 0x04	; 4
    9372:	bf ad       	ldd	r27, Y+63	; 0x3f
    9374:	24 97       	sbiw	r28, 0x04	; 4
    9376:	bf 93       	push	r27
    9378:	23 96       	adiw	r28, 0x03	; 3
    937a:	af ad       	ldd	r26, Y+63	; 0x3f
    937c:	23 97       	sbiw	r28, 0x03	; 3
    937e:	af 93       	push	r26
    9380:	2a 96       	adiw	r28, 0x0a	; 10
    9382:	bf ad       	ldd	r27, Y+63	; 0x3f
    9384:	2a 97       	sbiw	r28, 0x0a	; 10
    9386:	bf 93       	push	r27
    9388:	29 96       	adiw	r28, 0x09	; 9
    938a:	af ad       	ldd	r26, Y+63	; 0x3f
    938c:	29 97       	sbiw	r28, 0x09	; 9
    938e:	af 93       	push	r26
    9390:	28 96       	adiw	r28, 0x08	; 8
    9392:	bf ad       	ldd	r27, Y+63	; 0x3f
    9394:	28 97       	sbiw	r28, 0x08	; 8
    9396:	bf 93       	push	r27
    9398:	27 96       	adiw	r28, 0x07	; 7
    939a:	af ad       	ldd	r26, Y+63	; 0x3f
    939c:	27 97       	sbiw	r28, 0x07	; 7
    939e:	af 93       	push	r26
    93a0:	df 92       	push	r13
    93a2:	cf 92       	push	r12
    93a4:	a8 96       	adiw	r28, 0x28	; 40
    93a6:	bf ad       	ldd	r27, Y+63	; 0x3f
    93a8:	a8 97       	sbiw	r28, 0x28	; 40
    93aa:	bf 93       	push	r27
    93ac:	a7 96       	adiw	r28, 0x27	; 39
    93ae:	af ad       	ldd	r26, Y+63	; 0x3f
    93b0:	a7 97       	sbiw	r28, 0x27	; 39
    93b2:	af 93       	push	r26
    93b4:	2d 96       	adiw	r28, 0x0d	; 13
    93b6:	bf ad       	ldd	r27, Y+63	; 0x3f
    93b8:	2d 97       	sbiw	r28, 0x0d	; 13
    93ba:	bf 93       	push	r27
    93bc:	2c 96       	adiw	r28, 0x0c	; 12
    93be:	af ad       	ldd	r26, Y+63	; 0x3f
    93c0:	2c 97       	sbiw	r28, 0x0c	; 12
    93c2:	af 93       	push	r26
    93c4:	2b 96       	adiw	r28, 0x0b	; 11
    93c6:	bf ad       	ldd	r27, Y+63	; 0x3f
    93c8:	2b 97       	sbiw	r28, 0x0b	; 11
    93ca:	bf 93       	push	r27
    93cc:	ab a9       	ldd	r26, Y+51	; 0x33
    93ce:	af 93       	push	r26
    93d0:	61 96       	adiw	r28, 0x11	; 17
    93d2:	bf ad       	ldd	r27, Y+63	; 0x3f
    93d4:	61 97       	sbiw	r28, 0x11	; 17
    93d6:	bf 93       	push	r27
    93d8:	60 96       	adiw	r28, 0x10	; 16
    93da:	af ad       	ldd	r26, Y+63	; 0x3f
    93dc:	60 97       	sbiw	r28, 0x10	; 16
    93de:	af 93       	push	r26
    93e0:	2f 96       	adiw	r28, 0x0f	; 15
    93e2:	bf ad       	ldd	r27, Y+63	; 0x3f
    93e4:	2f 97       	sbiw	r28, 0x0f	; 15
    93e6:	bf 93       	push	r27
    93e8:	2e 96       	adiw	r28, 0x0e	; 14
    93ea:	af ad       	ldd	r26, Y+63	; 0x3f
    93ec:	2e 97       	sbiw	r28, 0x0e	; 14
    93ee:	af 93       	push	r26
    93f0:	bf 92       	push	r11
    93f2:	af 92       	push	r10
    93f4:	a4 96       	adiw	r28, 0x24	; 36
    93f6:	af ac       	ldd	r10, Y+63	; 0x3f
    93f8:	a4 97       	sbiw	r28, 0x24	; 36
    93fa:	af 92       	push	r10
    93fc:	a3 96       	adiw	r28, 0x23	; 35
    93fe:	bf ac       	ldd	r11, Y+63	; 0x3f
    9400:	a3 97       	sbiw	r28, 0x23	; 35
    9402:	bf 92       	push	r11
    9404:	64 96       	adiw	r28, 0x14	; 20
    9406:	af ac       	ldd	r10, Y+63	; 0x3f
    9408:	64 97       	sbiw	r28, 0x14	; 20
    940a:	af 92       	push	r10
    940c:	63 96       	adiw	r28, 0x13	; 19
    940e:	bf ac       	ldd	r11, Y+63	; 0x3f
    9410:	63 97       	sbiw	r28, 0x13	; 19
    9412:	bf 92       	push	r11
    9414:	62 96       	adiw	r28, 0x12	; 18
    9416:	af ac       	ldd	r10, Y+63	; 0x3f
    9418:	62 97       	sbiw	r28, 0x12	; 18
    941a:	af 92       	push	r10
    941c:	bf a4       	ldd	r11, Y+47	; 0x2f
    941e:	bf 92       	push	r11
    9420:	68 96       	adiw	r28, 0x18	; 24
    9422:	af ac       	ldd	r10, Y+63	; 0x3f
    9424:	68 97       	sbiw	r28, 0x18	; 24
    9426:	af 92       	push	r10
    9428:	67 96       	adiw	r28, 0x17	; 23
    942a:	bf ac       	ldd	r11, Y+63	; 0x3f
    942c:	67 97       	sbiw	r28, 0x17	; 23
    942e:	bf 92       	push	r11
    9430:	66 96       	adiw	r28, 0x16	; 22
    9432:	af ac       	ldd	r10, Y+63	; 0x3f
    9434:	66 97       	sbiw	r28, 0x16	; 22
    9436:	af 92       	push	r10
    9438:	65 96       	adiw	r28, 0x15	; 21
    943a:	bf ac       	ldd	r11, Y+63	; 0x3f
    943c:	65 97       	sbiw	r28, 0x15	; 21
    943e:	bf 92       	push	r11
    9440:	9f 92       	push	r9
    9442:	8f 92       	push	r8
    9444:	a2 96       	adiw	r28, 0x22	; 34
    9446:	8f ac       	ldd	r8, Y+63	; 0x3f
    9448:	a2 97       	sbiw	r28, 0x22	; 34
    944a:	8f 92       	push	r8
    944c:	a1 96       	adiw	r28, 0x21	; 33
    944e:	9f ac       	ldd	r9, Y+63	; 0x3f
    9450:	a1 97       	sbiw	r28, 0x21	; 33
    9452:	9f 92       	push	r9
    9454:	af 96       	adiw	r28, 0x2f	; 47
    9456:	af ac       	ldd	r10, Y+63	; 0x3f
    9458:	af 97       	sbiw	r28, 0x2f	; 47
    945a:	af 92       	push	r10
    945c:	ae 96       	adiw	r28, 0x2e	; 46
    945e:	bf ac       	ldd	r11, Y+63	; 0x3f
    9460:	ae 97       	sbiw	r28, 0x2e	; 46
    9462:	bf 92       	push	r11
    9464:	ad 96       	adiw	r28, 0x2d	; 45
    9466:	8f ac       	ldd	r8, Y+63	; 0x3f
    9468:	ad 97       	sbiw	r28, 0x2d	; 45
    946a:	8f 92       	push	r8
    946c:	99 a4       	ldd	r9, Y+41	; 0x29
    946e:	9f 92       	push	r9
    9470:	e3 96       	adiw	r28, 0x33	; 51
    9472:	af ac       	ldd	r10, Y+63	; 0x3f
    9474:	e3 97       	sbiw	r28, 0x33	; 51
    9476:	af 92       	push	r10
    9478:	e2 96       	adiw	r28, 0x32	; 50
    947a:	bf ac       	ldd	r11, Y+63	; 0x3f
    947c:	e2 97       	sbiw	r28, 0x32	; 50
    947e:	bf 92       	push	r11
    9480:	e1 96       	adiw	r28, 0x31	; 49
    9482:	8f ac       	ldd	r8, Y+63	; 0x3f
    9484:	e1 97       	sbiw	r28, 0x31	; 49
    9486:	8f 92       	push	r8
    9488:	e0 96       	adiw	r28, 0x30	; 48
    948a:	9f ac       	ldd	r9, Y+63	; 0x3f
    948c:	e0 97       	sbiw	r28, 0x30	; 48
    948e:	9f 92       	push	r9
    9490:	7f 92       	push	r7
    9492:	6f 92       	push	r6
    9494:	a0 96       	adiw	r28, 0x20	; 32
    9496:	af ac       	ldd	r10, Y+63	; 0x3f
    9498:	a0 97       	sbiw	r28, 0x20	; 32
    949a:	af 92       	push	r10
    949c:	6f 96       	adiw	r28, 0x1f	; 31
    949e:	bf ac       	ldd	r11, Y+63	; 0x3f
    94a0:	6f 97       	sbiw	r28, 0x1f	; 31
    94a2:	bf 92       	push	r11
    94a4:	e6 96       	adiw	r28, 0x36	; 54
    94a6:	8f ac       	ldd	r8, Y+63	; 0x3f
    94a8:	e6 97       	sbiw	r28, 0x36	; 54
    94aa:	8f 92       	push	r8
    94ac:	e5 96       	adiw	r28, 0x35	; 53
    94ae:	9f ac       	ldd	r9, Y+63	; 0x3f
    94b0:	e5 97       	sbiw	r28, 0x35	; 53
    94b2:	9f 92       	push	r9
    94b4:	e4 96       	adiw	r28, 0x34	; 52
    94b6:	af ac       	ldd	r10, Y+63	; 0x3f
    94b8:	e4 97       	sbiw	r28, 0x34	; 52
    94ba:	af 92       	push	r10
    94bc:	bd a0       	ldd	r11, Y+37	; 0x25
    94be:	bf 92       	push	r11
    94c0:	e9 96       	adiw	r28, 0x39	; 57
    94c2:	8f ac       	ldd	r8, Y+63	; 0x3f
    94c4:	e9 97       	sbiw	r28, 0x39	; 57
    94c6:	8f 92       	push	r8
    94c8:	4f 93       	push	r20
    94ca:	e8 96       	adiw	r28, 0x38	; 56
    94cc:	9f ac       	ldd	r9, Y+63	; 0x3f
    94ce:	e8 97       	sbiw	r28, 0x38	; 56
    94d0:	9f 92       	push	r9
    94d2:	e7 96       	adiw	r28, 0x37	; 55
    94d4:	af ac       	ldd	r10, Y+63	; 0x3f
    94d6:	e7 97       	sbiw	r28, 0x37	; 55
    94d8:	af 92       	push	r10
    94da:	3f 93       	push	r19
    94dc:	2f 93       	push	r18
    94de:	6e 96       	adiw	r28, 0x1e	; 30
    94e0:	bf ac       	ldd	r11, Y+63	; 0x3f
    94e2:	6e 97       	sbiw	r28, 0x1e	; 30
    94e4:	bf 92       	push	r11
    94e6:	6d 96       	adiw	r28, 0x1d	; 29
    94e8:	8f ac       	ldd	r8, Y+63	; 0x3f
    94ea:	6d 97       	sbiw	r28, 0x1d	; 29
    94ec:	8f 92       	push	r8
    94ee:	ea 96       	adiw	r28, 0x3a	; 58
    94f0:	9f ac       	ldd	r9, Y+63	; 0x3f
    94f2:	ea 97       	sbiw	r28, 0x3a	; 58
    94f4:	9f 92       	push	r9
    94f6:	a9 a0       	ldd	r10, Y+33	; 0x21
    94f8:	af 92       	push	r10
    94fa:	ec 96       	adiw	r28, 0x3c	; 60
    94fc:	bf ac       	ldd	r11, Y+63	; 0x3f
    94fe:	ec 97       	sbiw	r28, 0x3c	; 60
    9500:	bf 92       	push	r11
    9502:	eb 96       	adiw	r28, 0x3b	; 59
    9504:	2f ad       	ldd	r18, Y+63	; 0x3f
    9506:	eb 97       	sbiw	r28, 0x3b	; 59
    9508:	2f 93       	push	r18
    950a:	ff 93       	push	r31
    950c:	ef 93       	push	r30
    950e:	6c 96       	adiw	r28, 0x1c	; 28
    9510:	8f ac       	ldd	r8, Y+63	; 0x3f
    9512:	6c 97       	sbiw	r28, 0x1c	; 28
    9514:	8f 92       	push	r8
    9516:	6b 96       	adiw	r28, 0x1b	; 27
    9518:	9f ac       	ldd	r9, Y+63	; 0x3f
    951a:	6b 97       	sbiw	r28, 0x1b	; 27
    951c:	9f 92       	push	r9
    951e:	ed 96       	adiw	r28, 0x3d	; 61
    9520:	af ac       	ldd	r10, Y+63	; 0x3f
    9522:	ed 97       	sbiw	r28, 0x3d	; 61
    9524:	af 92       	push	r10
    9526:	bd 88       	ldd	r11, Y+21	; 0x15
    9528:	bf 92       	push	r11
    952a:	ef 96       	adiw	r28, 0x3f	; 63
    952c:	2f ad       	ldd	r18, Y+63	; 0x3f
    952e:	ef 97       	sbiw	r28, 0x3f	; 63
    9530:	2f 93       	push	r18
    9532:	ee 96       	adiw	r28, 0x3e	; 62
    9534:	3f ad       	ldd	r19, Y+63	; 0x3f
    9536:	ee 97       	sbiw	r28, 0x3e	; 62
    9538:	3f 93       	push	r19
    953a:	5f 92       	push	r5
    953c:	4f 92       	push	r4
    953e:	6a 96       	adiw	r28, 0x1a	; 26
    9540:	8f ac       	ldd	r8, Y+63	; 0x3f
    9542:	6a 97       	sbiw	r28, 0x1a	; 26
    9544:	8f 92       	push	r8
    9546:	69 96       	adiw	r28, 0x19	; 25
    9548:	9f ac       	ldd	r9, Y+63	; 0x3f
    954a:	69 97       	sbiw	r28, 0x19	; 25
    954c:	9f 92       	push	r9
    954e:	9f 93       	push	r25
    9550:	8f 93       	push	r24
    9552:	7f 93       	push	r23
    9554:	6f 93       	push	r22
    9556:	85 2f       	mov	r24, r21
    9558:	05 2e       	mov	r0, r21
    955a:	00 0c       	add	r0, r0
    955c:	99 0b       	sbc	r25, r25
    955e:	9f 93       	push	r25
    9560:	5f 93       	push	r21
    9562:	0f 2e       	mov	r0, r31
    9564:	fc e6       	ldi	r31, 0x6C	; 108
    9566:	af 2e       	mov	r10, r31
    9568:	f5 e2       	ldi	r31, 0x25	; 37
    956a:	bf 2e       	mov	r11, r31
    956c:	f0 2d       	mov	r31, r0
    956e:	bf 92       	push	r11
    9570:	af 92       	push	r10
    9572:	0e 94 9a 58 	call	0xb134	; 0xb134 <printf>
    9576:	cd bf       	out	0x3d, r28	; 61
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    9578:	de bf       	out	0x3e, r29	; 62

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    957a:	f8 94       	cli
    957c:	a5 ee       	ldi	r26, 0xE5	; 229
    957e:	ba e2       	ldi	r27, 0x2A	; 42
    9580:	8c 91       	ld	r24, X
    9582:	81 11       	cpse	r24, r1
    9584:	09 c0       	rjmp	.+18     	; 0x9598 <main+0x12ba>
    9586:	a6 ee       	ldi	r26, 0xE6	; 230
    9588:	ba e2       	ldi	r27, 0x2A	; 42
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    958a:	e0 e0       	ldi	r30, 0x00	; 0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    958c:	ef 5f       	subi	r30, 0xFF	; 255
    958e:	8d 91       	ld	r24, X+
    9590:	88 23       	and	r24, r24
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    9592:	e1 f3       	breq	.-8      	; 0x958c <main+0x12ae>
    9594:	e1 11       	cpse	r30, r1
		cpu_irq_enable();
    9596:	02 c0       	rjmp	.+4      	; 0x959c <main+0x12be>
    9598:	78 94       	sei
    959a:	12 c0       	rjmp	.+36     	; 0x95c0 <main+0x12e2>
    959c:	d1 01       	movw	r26, r2

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    959e:	8c 91       	ld	r24, X
    95a0:	f0 e0       	ldi	r31, 0x00	; 0
    95a2:	ee 5a       	subi	r30, 0xAE	; 174
    95a4:	ff 4d       	sbci	r31, 0xDF	; 223
    95a6:	81 7f       	andi	r24, 0xF1	; 241
    95a8:	90 81       	ld	r25, Z
    95aa:	89 2b       	or	r24, r25
	sleep_enable();
    95ac:	8c 93       	st	X, r24
    95ae:	8c 91       	ld	r24, X
    95b0:	81 60       	ori	r24, 0x01	; 1

	cpu_irq_enable();
    95b2:	8c 93       	st	X, r24
	sleep_enter();
    95b4:	78 94       	sei

	sleep_disable();
    95b6:	88 95       	sleep
    95b8:	f1 01       	movw	r30, r2
    95ba:	80 81       	ld	r24, Z
    95bc:	8e 7f       	andi	r24, 0xFE	; 254

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    95be:	80 83       	st	Z, r24
    95c0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    95c2:	8f 87       	std	Y+15, r24	; 0x0f
	return flags;
    95c4:	f8 94       	cli
    while (l_workmode) {
		task();
		sleepmgr_enter_sleep();

		flags = cpu_irq_save();
		l_workmode = g_workmode;
    95c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    95c8:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <g_workmode>
	/* The application code */
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode = WORKMODE_RUN;
	cpu_irq_restore(flags);

    while (l_workmode) {
    95cc:	9f bf       	out	0x3f, r25	; 63
    95ce:	81 11       	cpse	r24, r1
		flags = cpu_irq_save();
		l_workmode = g_workmode;
		cpu_irq_restore(flags);
    }

	cpu_irq_disable();
    95d0:	61 c9       	rjmp	.-3390   	; 0x8894 <main+0x5b6>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    95d2:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    95d4:	f8 94       	cli
    95d6:	80 91 e5 2a 	lds	r24, 0x2AE5	; 0x802ae5 <sleepmgr_locks>
    95da:	81 11       	cpse	r24, r1
    95dc:	09 c0       	rjmp	.+18     	; 0x95f0 <main+0x1312>
    95de:	a6 ee       	ldi	r26, 0xE6	; 230
    95e0:	ba e2       	ldi	r27, 0x2A	; 42
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    95e2:	e0 e0       	ldi	r30, 0x00	; 0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    95e4:	ef 5f       	subi	r30, 0xFF	; 255
    95e6:	8d 91       	ld	r24, X+
    95e8:	88 23       	and	r24, r24
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    95ea:	e1 f3       	breq	.-8      	; 0x95e4 <main+0x1306>
    95ec:	e1 11       	cpse	r30, r1
		cpu_irq_enable();
    95ee:	02 c0       	rjmp	.+4      	; 0x95f4 <main+0x1316>
    95f0:	78 94       	sei
    95f2:	13 c0       	rjmp	.+38     	; 0x961a <main+0x133c>
    95f4:	a8 e4       	ldi	r26, 0x48	; 72
    95f6:	b0 e0       	ldi	r27, 0x00	; 0

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    95f8:	8c 91       	ld	r24, X
    95fa:	f0 e0       	ldi	r31, 0x00	; 0
    95fc:	ee 5a       	subi	r30, 0xAE	; 174
    95fe:	ff 4d       	sbci	r31, 0xDF	; 223
    9600:	98 2f       	mov	r25, r24
    9602:	91 7f       	andi	r25, 0xF1	; 241
    9604:	80 81       	ld	r24, Z
    9606:	89 2b       	or	r24, r25
	sleep_enable();
    9608:	8c 93       	st	X, r24
    960a:	8c 91       	ld	r24, X
    960c:	81 60       	ori	r24, 0x01	; 1

	cpu_irq_enable();
    960e:	8c 93       	st	X, r24
	sleep_enter();
    9610:	78 94       	sei

	sleep_disable();
    9612:	88 95       	sleep
    9614:	8c 91       	ld	r24, X
    9616:	8e 7f       	andi	r24, 0xFE	; 254
	sleepmgr_enter_sleep();

	return retcode;
}
    9618:	8c 93       	st	X, r24
    961a:	80 e0       	ldi	r24, 0x00	; 0
    961c:	90 e0       	ldi	r25, 0x00	; 0
    961e:	c2 58       	subi	r28, 0x82	; 130
    9620:	df 4f       	sbci	r29, 0xFF	; 255
    9622:	cd bf       	out	0x3d, r28	; 61
    9624:	de bf       	out	0x3e, r29	; 62
    9626:	df 91       	pop	r29
    9628:	cf 91       	pop	r28
    962a:	1f 91       	pop	r17
    962c:	0f 91       	pop	r16
    962e:	ff 90       	pop	r15
    9630:	ef 90       	pop	r14
    9632:	df 90       	pop	r13
    9634:	cf 90       	pop	r12
    9636:	bf 90       	pop	r11
    9638:	af 90       	pop	r10
    963a:	9f 90       	pop	r9
    963c:	8f 90       	pop	r8
    963e:	7f 90       	pop	r7
    9640:	6f 90       	pop	r6
    9642:	5f 90       	pop	r5
    9644:	4f 90       	pop	r4
    9646:	3f 90       	pop	r3
    9648:	2f 90       	pop	r2
    964a:	08 95       	ret

0000964c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    964c:	cf 93       	push	r28
    964e:	df 93       	push	r29
    9650:	cd b7       	in	r28, 0x3d	; 61
    9652:	de b7       	in	r29, 0x3e	; 62
    9654:	28 97       	sbiw	r28, 0x08	; 8
    9656:	cd bf       	out	0x3d, r28	; 61
    9658:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    965a:	8f ef       	ldi	r24, 0xFF	; 255
    965c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    9660:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    9664:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    9668:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    966c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    9670:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    9674:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    9678:	61 e0       	ldi	r22, 0x01	; 1
    967a:	81 e4       	ldi	r24, 0x41	; 65
    967c:	90 e0       	ldi	r25, 0x00	; 0
    967e:	0e 94 c1 53 	call	0xa782	; 0xa782 <ccp_write_io>
    9682:	6c e1       	ldi	r22, 0x1C	; 28
    9684:	70 e0       	ldi	r23, 0x00	; 0
    9686:	82 e0       	ldi	r24, 0x02	; 2
    9688:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    968c:	8a 83       	std	Y+2, r24	; 0x02
    968e:	6d e1       	ldi	r22, 0x1D	; 29
    9690:	70 e0       	ldi	r23, 0x00	; 0
    9692:	82 e0       	ldi	r24, 0x02	; 2
    9694:	0e 94 b7 53 	call	0xa76e	; 0xa76e <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    9698:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    969a:	89 81       	ldd	r24, Y+1	; 0x01
    969c:	9a 81       	ldd	r25, Y+2	; 0x02
    969e:	01 96       	adiw	r24, 0x01	; 1
    96a0:	21 f4       	brne	.+8      	; 0x96aa <sysclk_init+0x5e>
		cal = 0x2340;
    96a2:	80 e4       	ldi	r24, 0x40	; 64
    96a4:	93 e2       	ldi	r25, 0x23	; 35
    96a6:	89 83       	std	Y+1, r24	; 0x01
    96a8:	9a 83       	std	Y+2, r25	; 0x02
    96aa:	89 81       	ldd	r24, Y+1	; 0x01
    96ac:	9a 81       	ldd	r25, Y+2	; 0x02
    96ae:	8b 83       	std	Y+3, r24	; 0x03
    96b0:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    96b2:	e0 e6       	ldi	r30, 0x60	; 96
    96b4:	f0 e0       	ldi	r31, 0x00	; 0
    96b6:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    96b8:	8c 81       	ldd	r24, Y+4	; 0x04
    96ba:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    96bc:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    96c0:	84 fd       	sbrc	r24, 4
    96c2:	21 c0       	rjmp	.+66     	; 0x9706 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    96c4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    96c8:	83 fd       	sbrc	r24, 3
    96ca:	0e c0       	rjmp	.+28     	; 0x96e8 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    96cc:	e0 e5       	ldi	r30, 0x50	; 80
    96ce:	f0 e0       	ldi	r31, 0x00	; 0
    96d0:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    96d2:	8f b7       	in	r24, 0x3f	; 63
    96d4:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    96d6:	f8 94       	cli
	return flags;
    96d8:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    96da:	80 81       	ld	r24, Z
    96dc:	88 60       	ori	r24, 0x08	; 8
    96de:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    96e0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    96e2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    96e4:	83 ff       	sbrs	r24, 3
    96e6:	fd cf       	rjmp	.-6      	; 0x96e2 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    96e8:	8f b7       	in	r24, 0x3f	; 63
    96ea:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    96ec:	f8 94       	cli
	return flags;
    96ee:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    96f0:	e0 e5       	ldi	r30, 0x50	; 80
    96f2:	f0 e0       	ldi	r31, 0x00	; 0
    96f4:	83 ec       	ldi	r24, 0xC3	; 195
    96f6:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    96f8:	80 81       	ld	r24, Z
    96fa:	80 61       	ori	r24, 0x10	; 16
    96fc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    96fe:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    9700:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    9702:	84 ff       	sbrs	r24, 4
    9704:	fd cf       	rjmp	.-6      	; 0x9700 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    9706:	64 e0       	ldi	r22, 0x04	; 4
    9708:	80 e4       	ldi	r24, 0x40	; 64
    970a:	90 e0       	ldi	r25, 0x00	; 0
    970c:	0e 94 c1 53 	call	0xa782	; 0xa782 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9710:	8f b7       	in	r24, 0x3f	; 63
    9712:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    9714:	f8 94       	cli
	return flags;
    9716:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    9718:	e0 e5       	ldi	r30, 0x50	; 80
    971a:	f0 e0       	ldi	r31, 0x00	; 0
    971c:	80 81       	ld	r24, Z
    971e:	8e 7f       	andi	r24, 0xFE	; 254
    9720:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9722:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    9724:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9726:	8f b7       	in	r24, 0x3f	; 63
    9728:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    972a:	f8 94       	cli
	return flags;
    972c:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    972e:	80 81       	ld	r24, Z
    9730:	88 60       	ori	r24, 0x08	; 8
    9732:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9734:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    9736:	81 81       	ldd	r24, Z+1	; 0x01
    9738:	83 ff       	sbrs	r24, 3
    973a:	fd cf       	rjmp	.-6      	; 0x9736 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    973c:	8b e0       	ldi	r24, 0x0B	; 11
    973e:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    9742:	28 96       	adiw	r28, 0x08	; 8
    9744:	cd bf       	out	0x3d, r28	; 61
    9746:	de bf       	out	0x3e, r29	; 62
    9748:	df 91       	pop	r29
    974a:	cf 91       	pop	r28
    974c:	08 95       	ret

0000974e <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    974e:	cf 93       	push	r28
    9750:	df 93       	push	r29
    9752:	1f 92       	push	r1
    9754:	cd b7       	in	r28, 0x3d	; 61
    9756:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9758:	9f b7       	in	r25, 0x3f	; 63
    975a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    975c:	f8 94       	cli
	return flags;
    975e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    9760:	e8 2f       	mov	r30, r24
    9762:	f0 e0       	ldi	r31, 0x00	; 0
    9764:	e0 59       	subi	r30, 0x90	; 144
    9766:	ff 4f       	sbci	r31, 0xFF	; 255
    9768:	60 95       	com	r22
    976a:	80 81       	ld	r24, Z
    976c:	68 23       	and	r22, r24
    976e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9770:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    9772:	0f 90       	pop	r0
    9774:	df 91       	pop	r29
    9776:	cf 91       	pop	r28
    9778:	08 95       	ret

0000977a <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    977a:	cf 93       	push	r28
    977c:	df 93       	push	r29
    977e:	1f 92       	push	r1
    9780:	cd b7       	in	r28, 0x3d	; 61
    9782:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9784:	9f b7       	in	r25, 0x3f	; 63
    9786:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    9788:	f8 94       	cli
	return flags;
    978a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    978c:	e8 2f       	mov	r30, r24
    978e:	f0 e0       	ldi	r31, 0x00	; 0
    9790:	e0 59       	subi	r30, 0x90	; 144
    9792:	ff 4f       	sbci	r31, 0xFF	; 255
    9794:	80 81       	ld	r24, Z
    9796:	68 2b       	or	r22, r24
    9798:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    979a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    979c:	0f 90       	pop	r0
    979e:	df 91       	pop	r29
    97a0:	cf 91       	pop	r28
    97a2:	08 95       	ret

000097a4 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    97a4:	cf 93       	push	r28
    97a6:	df 93       	push	r29
    97a8:	1f 92       	push	r1
    97aa:	1f 92       	push	r1
    97ac:	cd b7       	in	r28, 0x3d	; 61
    97ae:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    97b0:	86 30       	cpi	r24, 0x06	; 6
    97b2:	11 f0       	breq	.+4      	; 0x97b8 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    97b4:	60 e0       	ldi	r22, 0x00	; 0
    97b6:	01 c0       	rjmp	.+2      	; 0x97ba <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    97b8:	68 e1       	ldi	r22, 0x18	; 24
    97ba:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    97be:	81 fd       	sbrc	r24, 1
    97c0:	2a c0       	rjmp	.+84     	; 0x9816 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    97c2:	8f b7       	in	r24, 0x3f	; 63
    97c4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    97c6:	f8 94       	cli
	return flags;
    97c8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    97ca:	e0 e5       	ldi	r30, 0x50	; 80
    97cc:	f0 e0       	ldi	r31, 0x00	; 0
    97ce:	80 81       	ld	r24, Z
    97d0:	82 60       	ori	r24, 0x02	; 2
    97d2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    97d4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    97d6:	81 81       	ldd	r24, Z+1	; 0x01
    97d8:	81 ff       	sbrs	r24, 1
    97da:	fd cf       	rjmp	.-6      	; 0x97d6 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    97dc:	8f b7       	in	r24, 0x3f	; 63
    97de:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    97e0:	f8 94       	cli
	return flags;
    97e2:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    97e4:	a0 e5       	ldi	r26, 0x50	; 80
    97e6:	b0 e0       	ldi	r27, 0x00	; 0
    97e8:	16 96       	adiw	r26, 0x06	; 6
    97ea:	8c 91       	ld	r24, X
    97ec:	16 97       	sbiw	r26, 0x06	; 6
    97ee:	89 7f       	andi	r24, 0xF9	; 249
    97f0:	16 96       	adiw	r26, 0x06	; 6
    97f2:	8c 93       	st	X, r24
    97f4:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    97f6:	e0 e6       	ldi	r30, 0x60	; 96
    97f8:	f0 e0       	ldi	r31, 0x00	; 0
    97fa:	80 e8       	ldi	r24, 0x80	; 128
    97fc:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    97fe:	8b eb       	ldi	r24, 0xBB	; 187
    9800:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    9802:	16 96       	adiw	r26, 0x06	; 6
    9804:	8c 91       	ld	r24, X
    9806:	16 97       	sbiw	r26, 0x06	; 6
    9808:	84 60       	ori	r24, 0x04	; 4
    980a:	16 96       	adiw	r26, 0x06	; 6
    980c:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    980e:	80 81       	ld	r24, Z
    9810:	81 60       	ori	r24, 0x01	; 1
    9812:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9814:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    9816:	63 60       	ori	r22, 0x03	; 3
    9818:	84 e4       	ldi	r24, 0x44	; 68
    981a:	90 e0       	ldi	r25, 0x00	; 0
    981c:	b2 d7       	rcall	.+3940   	; 0xa782 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    981e:	60 e4       	ldi	r22, 0x40	; 64
    9820:	80 e0       	ldi	r24, 0x00	; 0
    9822:	95 df       	rcall	.-214    	; 0x974e <sysclk_enable_module>
}
    9824:	0f 90       	pop	r0
    9826:	0f 90       	pop	r0
    9828:	df 91       	pop	r29
    982a:	cf 91       	pop	r28
    982c:	08 95       	ret

0000982e <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    982e:	80 91 a4 2a 	lds	r24, 0x2AA4	; 0x802aa4 <udi_cdc_nb_comm_enabled>
    9832:	81 50       	subi	r24, 0x01	; 1
    9834:	80 93 a4 2a 	sts	0x2AA4, r24	; 0x802aa4 <udi_cdc_nb_comm_enabled>
    9838:	08 95       	ret

0000983a <udi_cdc_data_setup>:
    983a:	80 e0       	ldi	r24, 0x00	; 0
    983c:	08 95       	ret

0000983e <udi_cdc_getsetting>:
    983e:	80 e0       	ldi	r24, 0x00	; 0
    9840:	08 95       	ret

00009842 <udi_cdc_line_coding_received>:
    9842:	62 eb       	ldi	r22, 0xB2	; 178
    9844:	7a e2       	ldi	r23, 0x2A	; 42
    9846:	80 e0       	ldi	r24, 0x00	; 0
    9848:	0c 94 6a 41 	jmp	0x82d4	; 0x82d4 <usb_callback_config>
    984c:	08 95       	ret

0000984e <udi_cdc_comm_enable>:
    984e:	10 92 a4 2a 	sts	0x2AA4, r1	; 0x802aa4 <udi_cdc_nb_comm_enabled>
    9852:	10 92 b0 2a 	sts	0x2AB0, r1	; 0x802ab0 <udi_cdc_state>
    9856:	10 92 b1 2a 	sts	0x2AB1, r1	; 0x802ab1 <udi_cdc_state+0x1>
    985a:	e6 ea       	ldi	r30, 0xA6	; 166
    985c:	fa e2       	ldi	r31, 0x2A	; 42
    985e:	81 ea       	ldi	r24, 0xA1	; 161
    9860:	80 83       	st	Z, r24
    9862:	80 e2       	ldi	r24, 0x20	; 32
    9864:	81 83       	std	Z+1, r24	; 0x01
    9866:	12 82       	std	Z+2, r1	; 0x02
    9868:	13 82       	std	Z+3, r1	; 0x03
    986a:	14 82       	std	Z+4, r1	; 0x04
    986c:	15 82       	std	Z+5, r1	; 0x05
    986e:	82 e0       	ldi	r24, 0x02	; 2
    9870:	90 e0       	ldi	r25, 0x00	; 0
    9872:	86 83       	std	Z+6, r24	; 0x06
    9874:	97 83       	std	Z+7, r25	; 0x07
    9876:	10 86       	std	Z+8, r1	; 0x08
    9878:	11 86       	std	Z+9, r1	; 0x09
    987a:	e2 eb       	ldi	r30, 0xB2	; 178
    987c:	fa e2       	ldi	r31, 0x2A	; 42
    987e:	80 e0       	ldi	r24, 0x00	; 0
    9880:	92 ec       	ldi	r25, 0xC2	; 194
    9882:	a1 e0       	ldi	r26, 0x01	; 1
    9884:	b0 e0       	ldi	r27, 0x00	; 0
    9886:	80 83       	st	Z, r24
    9888:	91 83       	std	Z+1, r25	; 0x01
    988a:	a2 83       	std	Z+2, r26	; 0x02
    988c:	b3 83       	std	Z+3, r27	; 0x03
    988e:	14 82       	std	Z+4, r1	; 0x04
    9890:	15 82       	std	Z+5, r1	; 0x05
    9892:	88 e0       	ldi	r24, 0x08	; 8
    9894:	86 83       	std	Z+6, r24	; 0x06
    9896:	bf 01       	movw	r22, r30
    9898:	80 e0       	ldi	r24, 0x00	; 0
    989a:	0e 94 6a 41 	call	0x82d4	; 0x82d4 <usb_callback_config>
    989e:	0e 94 63 41 	call	0x82c6	; 0x82c6 <usb_callback_cdc_enable>
    98a2:	88 23       	and	r24, r24
    98a4:	29 f0       	breq	.+10     	; 0x98b0 <udi_cdc_comm_enable+0x62>
    98a6:	90 91 a4 2a 	lds	r25, 0x2AA4	; 0x802aa4 <udi_cdc_nb_comm_enabled>
    98aa:	9f 5f       	subi	r25, 0xFF	; 255
    98ac:	90 93 a4 2a 	sts	0x2AA4, r25	; 0x802aa4 <udi_cdc_nb_comm_enabled>
    98b0:	08 95       	ret

000098b2 <udi_cdc_tx_send>:
    98b2:	ff 92       	push	r15
    98b4:	0f 93       	push	r16
    98b6:	1f 93       	push	r17
    98b8:	cf 93       	push	r28
    98ba:	df 93       	push	r29
    98bc:	1f 92       	push	r1
    98be:	cd b7       	in	r28, 0x3d	; 61
    98c0:	de b7       	in	r29, 0x3e	; 62
    98c2:	80 91 91 29 	lds	r24, 0x2991	; 0x802991 <udi_cdc_tx_trans_ongoing>
    98c6:	81 11       	cpse	r24, r1
    98c8:	9f c0       	rjmp	.+318    	; 0x9a08 <udi_cdc_tx_send+0x156>
    98ca:	0e 94 bb 38 	call	0x7176	; 0x7176 <udd_is_high_speed>
    98ce:	88 23       	and	r24, r24
    98d0:	51 f0       	breq	.+20     	; 0x98e6 <udi_cdc_tx_send+0x34>
    98d2:	00 91 92 29 	lds	r16, 0x2992	; 0x802992 <udi_cdc_tx_sof_num>
    98d6:	10 91 93 29 	lds	r17, 0x2993	; 0x802993 <udi_cdc_tx_sof_num+0x1>
    98da:	0e 94 c8 38 	call	0x7190	; 0x7190 <udd_get_micro_frame_number>
    98de:	08 17       	cp	r16, r24
    98e0:	19 07       	cpc	r17, r25
    98e2:	59 f4       	brne	.+22     	; 0x98fa <udi_cdc_tx_send+0x48>
    98e4:	91 c0       	rjmp	.+290    	; 0x9a08 <udi_cdc_tx_send+0x156>
    98e6:	00 91 92 29 	lds	r16, 0x2992	; 0x802992 <udi_cdc_tx_sof_num>
    98ea:	10 91 93 29 	lds	r17, 0x2993	; 0x802993 <udi_cdc_tx_sof_num+0x1>
    98ee:	0e 94 c3 38 	call	0x7186	; 0x7186 <udd_get_frame_number>
    98f2:	08 17       	cp	r16, r24
    98f4:	19 07       	cpc	r17, r25
    98f6:	09 f4       	brne	.+2      	; 0x98fa <udi_cdc_tx_send+0x48>
    98f8:	87 c0       	rjmp	.+270    	; 0x9a08 <udi_cdc_tx_send+0x156>
    98fa:	8f b7       	in	r24, 0x3f	; 63
    98fc:	89 83       	std	Y+1, r24	; 0x01
    98fe:	f8 94       	cli
    9900:	19 81       	ldd	r17, Y+1	; 0x01
    9902:	00 91 94 29 	lds	r16, 0x2994	; 0x802994 <udi_cdc_tx_buf_sel>
    9906:	e0 2f       	mov	r30, r16
    9908:	f0 e0       	ldi	r31, 0x00	; 0
    990a:	ee 0f       	add	r30, r30
    990c:	ff 1f       	adc	r31, r31
    990e:	eb 56       	subi	r30, 0x6B	; 107
    9910:	f6 4d       	sbci	r31, 0xD6	; 214
    9912:	80 81       	ld	r24, Z
    9914:	91 81       	ldd	r25, Z+1	; 0x01
    9916:	89 2b       	or	r24, r25
    9918:	09 f5       	brne	.+66     	; 0x995c <udi_cdc_tx_send+0xaa>
    991a:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <sof_zlp_counter.5059>
    991e:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <sof_zlp_counter.5059+0x1>
    9922:	01 96       	adiw	r24, 0x01	; 1
    9924:	80 93 8e 29 	sts	0x298E, r24	; 0x80298e <sof_zlp_counter.5059>
    9928:	90 93 8f 29 	sts	0x298F, r25	; 0x80298f <sof_zlp_counter.5059+0x1>
    992c:	0e 94 bb 38 	call	0x7176	; 0x7176 <udd_is_high_speed>
    9930:	81 11       	cpse	r24, r1
    9932:	07 c0       	rjmp	.+14     	; 0x9942 <udi_cdc_tx_send+0x90>
    9934:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <sof_zlp_counter.5059>
    9938:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <sof_zlp_counter.5059+0x1>
    993c:	84 36       	cpi	r24, 0x64	; 100
    993e:	91 05       	cpc	r25, r1
    9940:	58 f0       	brcs	.+22     	; 0x9958 <udi_cdc_tx_send+0xa6>
    9942:	0e 94 bb 38 	call	0x7176	; 0x7176 <udd_is_high_speed>
    9946:	88 23       	and	r24, r24
    9948:	49 f0       	breq	.+18     	; 0x995c <udi_cdc_tx_send+0xaa>
    994a:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <sof_zlp_counter.5059>
    994e:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <sof_zlp_counter.5059+0x1>
    9952:	80 32       	cpi	r24, 0x20	; 32
    9954:	93 40       	sbci	r25, 0x03	; 3
    9956:	10 f4       	brcc	.+4      	; 0x995c <udi_cdc_tx_send+0xaa>
    9958:	1f bf       	out	0x3f, r17	; 63
    995a:	56 c0       	rjmp	.+172    	; 0x9a08 <udi_cdc_tx_send+0x156>
    995c:	10 92 8e 29 	sts	0x298E, r1	; 0x80298e <sof_zlp_counter.5059>
    9960:	10 92 8f 29 	sts	0x298F, r1	; 0x80298f <sof_zlp_counter.5059+0x1>
    9964:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udi_cdc_tx_both_buf_to_send>
    9968:	81 11       	cpse	r24, r1
    996a:	06 c0       	rjmp	.+12     	; 0x9978 <udi_cdc_tx_send+0xc6>
    996c:	81 e0       	ldi	r24, 0x01	; 1
    996e:	01 11       	cpse	r16, r1
    9970:	80 e0       	ldi	r24, 0x00	; 0
    9972:	80 93 94 29 	sts	0x2994, r24	; 0x802994 <udi_cdc_tx_buf_sel>
    9976:	04 c0       	rjmp	.+8      	; 0x9980 <udi_cdc_tx_send+0xce>
    9978:	81 e0       	ldi	r24, 0x01	; 1
    997a:	01 11       	cpse	r16, r1
    997c:	80 e0       	ldi	r24, 0x00	; 0
    997e:	08 2f       	mov	r16, r24
    9980:	81 e0       	ldi	r24, 0x01	; 1
    9982:	80 93 91 29 	sts	0x2991, r24	; 0x802991 <udi_cdc_tx_trans_ongoing>
    9986:	1f bf       	out	0x3f, r17	; 63
    9988:	10 e0       	ldi	r17, 0x00	; 0
    998a:	f8 01       	movw	r30, r16
    998c:	ee 0f       	add	r30, r30
    998e:	ff 1f       	adc	r31, r31
    9990:	eb 56       	subi	r30, 0x6B	; 107
    9992:	f6 4d       	sbci	r31, 0xD6	; 214
    9994:	80 81       	ld	r24, Z
    9996:	91 81       	ldd	r25, Z+1	; 0x01
    9998:	ff 24       	eor	r15, r15
    999a:	f3 94       	inc	r15
    999c:	80 34       	cpi	r24, 0x40	; 64
    999e:	91 05       	cpc	r25, r1
    99a0:	09 f4       	brne	.+2      	; 0x99a4 <udi_cdc_tx_send+0xf2>
    99a2:	f1 2c       	mov	r15, r1
    99a4:	80 34       	cpi	r24, 0x40	; 64
    99a6:	91 05       	cpc	r25, r1
    99a8:	91 f0       	breq	.+36     	; 0x99ce <udi_cdc_tx_send+0x11c>
    99aa:	0e 94 bb 38 	call	0x7176	; 0x7176 <udd_is_high_speed>
    99ae:	88 23       	and	r24, r24
    99b0:	39 f0       	breq	.+14     	; 0x99c0 <udi_cdc_tx_send+0x10e>
    99b2:	0e 94 c8 38 	call	0x7190	; 0x7190 <udd_get_micro_frame_number>
    99b6:	80 93 92 29 	sts	0x2992, r24	; 0x802992 <udi_cdc_tx_sof_num>
    99ba:	90 93 93 29 	sts	0x2993, r25	; 0x802993 <udi_cdc_tx_sof_num+0x1>
    99be:	0b c0       	rjmp	.+22     	; 0x99d6 <udi_cdc_tx_send+0x124>
    99c0:	0e 94 c3 38 	call	0x7186	; 0x7186 <udd_get_frame_number>
    99c4:	80 93 92 29 	sts	0x2992, r24	; 0x802992 <udi_cdc_tx_sof_num>
    99c8:	90 93 93 29 	sts	0x2993, r25	; 0x802993 <udi_cdc_tx_sof_num+0x1>
    99cc:	04 c0       	rjmp	.+8      	; 0x99d6 <udi_cdc_tx_send+0x124>
    99ce:	10 92 92 29 	sts	0x2992, r1	; 0x802992 <udi_cdc_tx_sof_num>
    99d2:	10 92 93 29 	sts	0x2993, r1	; 0x802993 <udi_cdc_tx_sof_num+0x1>
    99d6:	f8 01       	movw	r30, r16
    99d8:	ee 0f       	add	r30, r30
    99da:	ff 1f       	adc	r31, r31
    99dc:	eb 56       	subi	r30, 0x6B	; 107
    99de:	f6 4d       	sbci	r31, 0xD6	; 214
    99e0:	20 81       	ld	r18, Z
    99e2:	31 81       	ldd	r19, Z+1	; 0x01
    99e4:	a8 01       	movw	r20, r16
    99e6:	00 24       	eor	r0, r0
    99e8:	56 95       	lsr	r21
    99ea:	47 95       	ror	r20
    99ec:	07 94       	ror	r0
    99ee:	56 95       	lsr	r21
    99f0:	47 95       	ror	r20
    99f2:	07 94       	ror	r0
    99f4:	54 2f       	mov	r21, r20
    99f6:	40 2d       	mov	r20, r0
    99f8:	46 56       	subi	r20, 0x66	; 102
    99fa:	56 4d       	sbci	r21, 0xD6	; 214
    99fc:	0e e0       	ldi	r16, 0x0E	; 14
    99fe:	1d e4       	ldi	r17, 0x4D	; 77
    9a00:	6f 2d       	mov	r22, r15
    9a02:	81 e8       	ldi	r24, 0x81	; 129
    9a04:	0e 94 ac 39 	call	0x7358	; 0x7358 <udd_ep_run>
    9a08:	0f 90       	pop	r0
    9a0a:	df 91       	pop	r29
    9a0c:	cf 91       	pop	r28
    9a0e:	1f 91       	pop	r17
    9a10:	0f 91       	pop	r16
    9a12:	ff 90       	pop	r15
    9a14:	08 95       	ret

00009a16 <udi_cdc_data_sof_notify>:
    9a16:	80 e0       	ldi	r24, 0x00	; 0
    9a18:	4c cf       	rjmp	.-360    	; 0x98b2 <udi_cdc_tx_send>
    9a1a:	08 95       	ret

00009a1c <udi_cdc_data_sent>:
    9a1c:	81 11       	cpse	r24, r1
    9a1e:	1a c0       	rjmp	.+52     	; 0x9a54 <udi_cdc_data_sent+0x38>
    9a20:	20 91 94 29 	lds	r18, 0x2994	; 0x802994 <udi_cdc_tx_buf_sel>
    9a24:	81 e0       	ldi	r24, 0x01	; 1
    9a26:	90 e0       	ldi	r25, 0x00	; 0
    9a28:	22 23       	and	r18, r18
    9a2a:	11 f0       	breq	.+4      	; 0x9a30 <udi_cdc_data_sent+0x14>
    9a2c:	80 e0       	ldi	r24, 0x00	; 0
    9a2e:	90 e0       	ldi	r25, 0x00	; 0
    9a30:	88 0f       	add	r24, r24
    9a32:	99 1f       	adc	r25, r25
    9a34:	fc 01       	movw	r30, r24
    9a36:	eb 56       	subi	r30, 0x6B	; 107
    9a38:	f6 4d       	sbci	r31, 0xD6	; 214
    9a3a:	10 82       	st	Z, r1
    9a3c:	11 82       	std	Z+1, r1	; 0x01
    9a3e:	10 92 90 29 	sts	0x2990, r1	; 0x802990 <udi_cdc_tx_both_buf_to_send>
    9a42:	10 92 91 29 	sts	0x2991, r1	; 0x802991 <udi_cdc_tx_trans_ongoing>
    9a46:	67 2b       	or	r22, r23
    9a48:	19 f0       	breq	.+6      	; 0x9a50 <udi_cdc_data_sent+0x34>
    9a4a:	80 e0       	ldi	r24, 0x00	; 0
    9a4c:	0e 94 6e 41 	call	0x82dc	; 0x82dc <usb_callback_tx_empty_notify>
    9a50:	80 e0       	ldi	r24, 0x00	; 0
    9a52:	2f cf       	rjmp	.-418    	; 0x98b2 <udi_cdc_tx_send>
    9a54:	08 95       	ret

00009a56 <udi_cdc_data_disable>:
    9a56:	80 91 a3 2a 	lds	r24, 0x2AA3	; 0x802aa3 <udi_cdc_nb_data_enabled>
    9a5a:	81 50       	subi	r24, 0x01	; 1
    9a5c:	80 93 a3 2a 	sts	0x2AA3, r24	; 0x802aa3 <udi_cdc_nb_data_enabled>
    9a60:	80 91 a3 2a 	lds	r24, 0x2AA3	; 0x802aa3 <udi_cdc_nb_data_enabled>
    9a64:	0e 94 67 41 	call	0x82ce	; 0x82ce <usb_callback_cdc_disable>
    9a68:	10 92 a2 2a 	sts	0x2AA2, r1	; 0x802aa2 <udi_cdc_data_running>
    9a6c:	08 95       	ret

00009a6e <udi_cdc_comm_setup>:
    9a6e:	cf 93       	push	r28
    9a70:	df 93       	push	r29
    9a72:	80 91 d5 2a 	lds	r24, 0x2AD5	; 0x802ad5 <udd_g_ctrlreq>
    9a76:	88 23       	and	r24, r24
    9a78:	e4 f4       	brge	.+56     	; 0x9ab2 <udi_cdc_comm_setup+0x44>
    9a7a:	80 76       	andi	r24, 0x60	; 96
    9a7c:	80 32       	cpi	r24, 0x20	; 32
    9a7e:	09 f0       	breq	.+2      	; 0x9a82 <udi_cdc_comm_setup+0x14>
    9a80:	49 c0       	rjmp	.+146    	; 0x9b14 <udi_cdc_comm_setup+0xa6>
    9a82:	80 91 d6 2a 	lds	r24, 0x2AD6	; 0x802ad6 <udd_g_ctrlreq+0x1>
    9a86:	81 32       	cpi	r24, 0x21	; 33
    9a88:	09 f0       	breq	.+2      	; 0x9a8c <udi_cdc_comm_setup+0x1e>
    9a8a:	46 c0       	rjmp	.+140    	; 0x9b18 <udi_cdc_comm_setup+0xaa>
    9a8c:	80 91 db 2a 	lds	r24, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    9a90:	90 91 dc 2a 	lds	r25, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    9a94:	07 97       	sbiw	r24, 0x07	; 7
    9a96:	09 f0       	breq	.+2      	; 0x9a9a <udi_cdc_comm_setup+0x2c>
    9a98:	41 c0       	rjmp	.+130    	; 0x9b1c <udi_cdc_comm_setup+0xae>
    9a9a:	e5 ed       	ldi	r30, 0xD5	; 213
    9a9c:	fa e2       	ldi	r31, 0x2A	; 42
    9a9e:	82 eb       	ldi	r24, 0xB2	; 178
    9aa0:	9a e2       	ldi	r25, 0x2A	; 42
    9aa2:	80 87       	std	Z+8, r24	; 0x08
    9aa4:	91 87       	std	Z+9, r25	; 0x09
    9aa6:	87 e0       	ldi	r24, 0x07	; 7
    9aa8:	90 e0       	ldi	r25, 0x00	; 0
    9aaa:	82 87       	std	Z+10, r24	; 0x0a
    9aac:	93 87       	std	Z+11, r25	; 0x0b
    9aae:	81 e0       	ldi	r24, 0x01	; 1
    9ab0:	3c c0       	rjmp	.+120    	; 0x9b2a <udi_cdc_comm_setup+0xbc>
    9ab2:	80 76       	andi	r24, 0x60	; 96
    9ab4:	80 32       	cpi	r24, 0x20	; 32
    9ab6:	a1 f5       	brne	.+104    	; 0x9b20 <udi_cdc_comm_setup+0xb2>
    9ab8:	80 91 d6 2a 	lds	r24, 0x2AD6	; 0x802ad6 <udd_g_ctrlreq+0x1>
    9abc:	80 32       	cpi	r24, 0x20	; 32
    9abe:	19 f0       	breq	.+6      	; 0x9ac6 <udi_cdc_comm_setup+0x58>
    9ac0:	82 32       	cpi	r24, 0x22	; 34
    9ac2:	b9 f0       	breq	.+46     	; 0x9af2 <udi_cdc_comm_setup+0x84>
    9ac4:	2f c0       	rjmp	.+94     	; 0x9b24 <udi_cdc_comm_setup+0xb6>
    9ac6:	80 91 db 2a 	lds	r24, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    9aca:	90 91 dc 2a 	lds	r25, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    9ace:	07 97       	sbiw	r24, 0x07	; 7
    9ad0:	59 f5       	brne	.+86     	; 0x9b28 <udi_cdc_comm_setup+0xba>
    9ad2:	e5 ed       	ldi	r30, 0xD5	; 213
    9ad4:	fa e2       	ldi	r31, 0x2A	; 42
    9ad6:	81 e2       	ldi	r24, 0x21	; 33
    9ad8:	9c e4       	ldi	r25, 0x4C	; 76
    9ada:	84 87       	std	Z+12, r24	; 0x0c
    9adc:	95 87       	std	Z+13, r25	; 0x0d
    9ade:	82 eb       	ldi	r24, 0xB2	; 178
    9ae0:	9a e2       	ldi	r25, 0x2A	; 42
    9ae2:	80 87       	std	Z+8, r24	; 0x08
    9ae4:	91 87       	std	Z+9, r25	; 0x09
    9ae6:	87 e0       	ldi	r24, 0x07	; 7
    9ae8:	90 e0       	ldi	r25, 0x00	; 0
    9aea:	82 87       	std	Z+10, r24	; 0x0a
    9aec:	93 87       	std	Z+11, r25	; 0x0b
    9aee:	81 e0       	ldi	r24, 0x01	; 1
    9af0:	1c c0       	rjmp	.+56     	; 0x9b2a <udi_cdc_comm_setup+0xbc>
    9af2:	c5 ed       	ldi	r28, 0xD5	; 213
    9af4:	da e2       	ldi	r29, 0x2A	; 42
    9af6:	6a 81       	ldd	r22, Y+2	; 0x02
    9af8:	61 70       	andi	r22, 0x01	; 1
    9afa:	80 e0       	ldi	r24, 0x00	; 0
    9afc:	0e 94 6b 41 	call	0x82d6	; 0x82d6 <usb_callback_cdc_set_dtr>
    9b00:	6a 81       	ldd	r22, Y+2	; 0x02
    9b02:	7b 81       	ldd	r23, Y+3	; 0x03
    9b04:	76 95       	lsr	r23
    9b06:	67 95       	ror	r22
    9b08:	61 70       	andi	r22, 0x01	; 1
    9b0a:	80 e0       	ldi	r24, 0x00	; 0
    9b0c:	0e 94 6c 41 	call	0x82d8	; 0x82d8 <usb_callback_cdc_set_rts>
    9b10:	81 e0       	ldi	r24, 0x01	; 1
    9b12:	0b c0       	rjmp	.+22     	; 0x9b2a <udi_cdc_comm_setup+0xbc>
    9b14:	80 e0       	ldi	r24, 0x00	; 0
    9b16:	09 c0       	rjmp	.+18     	; 0x9b2a <udi_cdc_comm_setup+0xbc>
    9b18:	80 e0       	ldi	r24, 0x00	; 0
    9b1a:	07 c0       	rjmp	.+14     	; 0x9b2a <udi_cdc_comm_setup+0xbc>
    9b1c:	80 e0       	ldi	r24, 0x00	; 0
    9b1e:	05 c0       	rjmp	.+10     	; 0x9b2a <udi_cdc_comm_setup+0xbc>
    9b20:	80 e0       	ldi	r24, 0x00	; 0
    9b22:	03 c0       	rjmp	.+6      	; 0x9b2a <udi_cdc_comm_setup+0xbc>
    9b24:	80 e0       	ldi	r24, 0x00	; 0
    9b26:	01 c0       	rjmp	.+2      	; 0x9b2a <udi_cdc_comm_setup+0xbc>
    9b28:	80 e0       	ldi	r24, 0x00	; 0
    9b2a:	df 91       	pop	r29
    9b2c:	cf 91       	pop	r28
    9b2e:	08 95       	ret

00009b30 <udi_cdc_multi_get_nb_received_data>:
    9b30:	cf 93       	push	r28
    9b32:	df 93       	push	r29
    9b34:	1f 92       	push	r1
    9b36:	cd b7       	in	r28, 0x3d	; 61
    9b38:	de b7       	in	r29, 0x3e	; 62
    9b3a:	8f b7       	in	r24, 0x3f	; 63
    9b3c:	89 83       	std	Y+1, r24	; 0x01
    9b3e:	f8 94       	cli
    9b40:	49 81       	ldd	r20, Y+1	; 0x01
    9b42:	20 91 1b 2a 	lds	r18, 0x2A1B	; 0x802a1b <udi_cdc_rx_pos>
    9b46:	30 91 1c 2a 	lds	r19, 0x2A1C	; 0x802a1c <udi_cdc_rx_pos+0x1>
    9b4a:	e0 91 1d 2a 	lds	r30, 0x2A1D	; 0x802a1d <udi_cdc_rx_buf_sel>
    9b4e:	f0 e0       	ldi	r31, 0x00	; 0
    9b50:	ee 0f       	add	r30, r30
    9b52:	ff 1f       	adc	r31, r31
    9b54:	e2 5e       	subi	r30, 0xE2	; 226
    9b56:	f5 4d       	sbci	r31, 0xD5	; 213
    9b58:	80 81       	ld	r24, Z
    9b5a:	91 81       	ldd	r25, Z+1	; 0x01
    9b5c:	4f bf       	out	0x3f, r20	; 63
    9b5e:	82 1b       	sub	r24, r18
    9b60:	93 0b       	sbc	r25, r19
    9b62:	0f 90       	pop	r0
    9b64:	df 91       	pop	r29
    9b66:	cf 91       	pop	r28
    9b68:	08 95       	ret

00009b6a <udi_cdc_multi_is_rx_ready>:
    9b6a:	e2 df       	rcall	.-60     	; 0x9b30 <udi_cdc_multi_get_nb_received_data>
    9b6c:	21 e0       	ldi	r18, 0x01	; 1
    9b6e:	89 2b       	or	r24, r25
    9b70:	09 f4       	brne	.+2      	; 0x9b74 <udi_cdc_multi_is_rx_ready+0xa>
    9b72:	20 e0       	ldi	r18, 0x00	; 0
    9b74:	82 2f       	mov	r24, r18
    9b76:	08 95       	ret

00009b78 <udi_cdc_rx_start>:
    9b78:	0f 93       	push	r16
    9b7a:	1f 93       	push	r17
    9b7c:	cf 93       	push	r28
    9b7e:	df 93       	push	r29
    9b80:	1f 92       	push	r1
    9b82:	cd b7       	in	r28, 0x3d	; 61
    9b84:	de b7       	in	r29, 0x3e	; 62
    9b86:	8f b7       	in	r24, 0x3f	; 63
    9b88:	89 83       	std	Y+1, r24	; 0x01
    9b8a:	f8 94       	cli
    9b8c:	99 81       	ldd	r25, Y+1	; 0x01
    9b8e:	20 91 1d 2a 	lds	r18, 0x2A1D	; 0x802a1d <udi_cdc_rx_buf_sel>
    9b92:	80 91 1a 2a 	lds	r24, 0x2A1A	; 0x802a1a <udi_cdc_rx_trans_ongoing>
    9b96:	81 11       	cpse	r24, r1
    9b98:	10 c0       	rjmp	.+32     	; 0x9bba <udi_cdc_rx_start+0x42>
    9b9a:	60 91 1b 2a 	lds	r22, 0x2A1B	; 0x802a1b <udi_cdc_rx_pos>
    9b9e:	70 91 1c 2a 	lds	r23, 0x2A1C	; 0x802a1c <udi_cdc_rx_pos+0x1>
    9ba2:	02 2f       	mov	r16, r18
    9ba4:	10 e0       	ldi	r17, 0x00	; 0
    9ba6:	f8 01       	movw	r30, r16
    9ba8:	ee 0f       	add	r30, r30
    9baa:	ff 1f       	adc	r31, r31
    9bac:	e2 5e       	subi	r30, 0xE2	; 226
    9bae:	f5 4d       	sbci	r31, 0xD5	; 213
    9bb0:	40 81       	ld	r20, Z
    9bb2:	51 81       	ldd	r21, Z+1	; 0x01
    9bb4:	64 17       	cp	r22, r20
    9bb6:	75 07       	cpc	r23, r21
    9bb8:	18 f4       	brcc	.+6      	; 0x9bc0 <udi_cdc_rx_start+0x48>
    9bba:	9f bf       	out	0x3f, r25	; 63
    9bbc:	80 e0       	ldi	r24, 0x00	; 0
    9bbe:	28 c0       	rjmp	.+80     	; 0x9c10 <udi_cdc_rx_start+0x98>
    9bc0:	10 92 1b 2a 	sts	0x2A1B, r1	; 0x802a1b <udi_cdc_rx_pos>
    9bc4:	10 92 1c 2a 	sts	0x2A1C, r1	; 0x802a1c <udi_cdc_rx_pos+0x1>
    9bc8:	81 e0       	ldi	r24, 0x01	; 1
    9bca:	21 11       	cpse	r18, r1
    9bcc:	80 e0       	ldi	r24, 0x00	; 0
    9bce:	80 93 1d 2a 	sts	0x2A1D, r24	; 0x802a1d <udi_cdc_rx_buf_sel>
    9bd2:	81 e0       	ldi	r24, 0x01	; 1
    9bd4:	80 93 1a 2a 	sts	0x2A1A, r24	; 0x802a1a <udi_cdc_rx_trans_ongoing>
    9bd8:	9f bf       	out	0x3f, r25	; 63
    9bda:	80 e0       	ldi	r24, 0x00	; 0
    9bdc:	c6 df       	rcall	.-116    	; 0x9b6a <udi_cdc_multi_is_rx_ready>
    9bde:	88 23       	and	r24, r24
    9be0:	19 f0       	breq	.+6      	; 0x9be8 <udi_cdc_rx_start+0x70>
    9be2:	80 e0       	ldi	r24, 0x00	; 0
    9be4:	0e 94 6d 41 	call	0x82da	; 0x82da <usb_callback_rx_notify>
    9be8:	a8 01       	movw	r20, r16
    9bea:	00 24       	eor	r0, r0
    9bec:	56 95       	lsr	r21
    9bee:	47 95       	ror	r20
    9bf0:	07 94       	ror	r0
    9bf2:	56 95       	lsr	r21
    9bf4:	47 95       	ror	r20
    9bf6:	07 94       	ror	r0
    9bf8:	54 2f       	mov	r21, r20
    9bfa:	40 2d       	mov	r20, r0
    9bfc:	4e 5d       	subi	r20, 0xDE	; 222
    9bfe:	55 4d       	sbci	r21, 0xD5	; 213
    9c00:	00 e4       	ldi	r16, 0x40	; 64
    9c02:	1e e4       	ldi	r17, 0x4E	; 78
    9c04:	20 e4       	ldi	r18, 0x40	; 64
    9c06:	30 e0       	ldi	r19, 0x00	; 0
    9c08:	61 e0       	ldi	r22, 0x01	; 1
    9c0a:	82 e0       	ldi	r24, 0x02	; 2
    9c0c:	0e 94 ac 39 	call	0x7358	; 0x7358 <udd_ep_run>
    9c10:	0f 90       	pop	r0
    9c12:	df 91       	pop	r29
    9c14:	cf 91       	pop	r28
    9c16:	1f 91       	pop	r17
    9c18:	0f 91       	pop	r16
    9c1a:	08 95       	ret

00009c1c <udi_cdc_data_enable>:
    9c1c:	10 92 a3 2a 	sts	0x2AA3, r1	; 0x802aa3 <udi_cdc_nb_data_enabled>
    9c20:	10 92 91 29 	sts	0x2991, r1	; 0x802991 <udi_cdc_tx_trans_ongoing>
    9c24:	10 92 90 29 	sts	0x2990, r1	; 0x802990 <udi_cdc_tx_both_buf_to_send>
    9c28:	10 92 94 29 	sts	0x2994, r1	; 0x802994 <udi_cdc_tx_buf_sel>
    9c2c:	e5 e9       	ldi	r30, 0x95	; 149
    9c2e:	f9 e2       	ldi	r31, 0x29	; 41
    9c30:	10 82       	st	Z, r1
    9c32:	11 82       	std	Z+1, r1	; 0x01
    9c34:	12 82       	std	Z+2, r1	; 0x02
    9c36:	13 82       	std	Z+3, r1	; 0x03
    9c38:	10 92 92 29 	sts	0x2992, r1	; 0x802992 <udi_cdc_tx_sof_num>
    9c3c:	10 92 93 29 	sts	0x2993, r1	; 0x802993 <udi_cdc_tx_sof_num+0x1>
    9c40:	80 e0       	ldi	r24, 0x00	; 0
    9c42:	37 de       	rcall	.-914    	; 0x98b2 <udi_cdc_tx_send>
    9c44:	10 92 1a 2a 	sts	0x2A1A, r1	; 0x802a1a <udi_cdc_rx_trans_ongoing>
    9c48:	10 92 1d 2a 	sts	0x2A1D, r1	; 0x802a1d <udi_cdc_rx_buf_sel>
    9c4c:	ee e1       	ldi	r30, 0x1E	; 30
    9c4e:	fa e2       	ldi	r31, 0x2A	; 42
    9c50:	10 82       	st	Z, r1
    9c52:	11 82       	std	Z+1, r1	; 0x01
    9c54:	12 82       	std	Z+2, r1	; 0x02
    9c56:	13 82       	std	Z+3, r1	; 0x03
    9c58:	10 92 1b 2a 	sts	0x2A1B, r1	; 0x802a1b <udi_cdc_rx_pos>
    9c5c:	10 92 1c 2a 	sts	0x2A1C, r1	; 0x802a1c <udi_cdc_rx_pos+0x1>
    9c60:	80 e0       	ldi	r24, 0x00	; 0
    9c62:	8a df       	rcall	.-236    	; 0x9b78 <udi_cdc_rx_start>
    9c64:	88 23       	and	r24, r24
    9c66:	59 f0       	breq	.+22     	; 0x9c7e <udi_cdc_data_enable+0x62>
    9c68:	90 91 a3 2a 	lds	r25, 0x2AA3	; 0x802aa3 <udi_cdc_nb_data_enabled>
    9c6c:	9f 5f       	subi	r25, 0xFF	; 255
    9c6e:	90 93 a3 2a 	sts	0x2AA3, r25	; 0x802aa3 <udi_cdc_nb_data_enabled>
    9c72:	90 91 a3 2a 	lds	r25, 0x2AA3	; 0x802aa3 <udi_cdc_nb_data_enabled>
    9c76:	91 30       	cpi	r25, 0x01	; 1
    9c78:	11 f4       	brne	.+4      	; 0x9c7e <udi_cdc_data_enable+0x62>
    9c7a:	90 93 a2 2a 	sts	0x2AA2, r25	; 0x802aa2 <udi_cdc_data_running>
    9c7e:	08 95       	ret

00009c80 <udi_cdc_data_received>:
    9c80:	0f 93       	push	r16
    9c82:	1f 93       	push	r17
    9c84:	81 11       	cpse	r24, r1
    9c86:	29 c0       	rjmp	.+82     	; 0x9cda <udi_cdc_data_received+0x5a>
    9c88:	80 91 1d 2a 	lds	r24, 0x2A1D	; 0x802a1d <udi_cdc_rx_buf_sel>
    9c8c:	e1 e0       	ldi	r30, 0x01	; 1
    9c8e:	81 11       	cpse	r24, r1
    9c90:	e0 e0       	ldi	r30, 0x00	; 0
    9c92:	84 2f       	mov	r24, r20
    9c94:	61 15       	cp	r22, r1
    9c96:	71 05       	cpc	r23, r1
    9c98:	a9 f4       	brne	.+42     	; 0x9cc4 <udi_cdc_data_received+0x44>
    9c9a:	4e 2f       	mov	r20, r30
    9c9c:	50 e0       	ldi	r21, 0x00	; 0
    9c9e:	00 24       	eor	r0, r0
    9ca0:	56 95       	lsr	r21
    9ca2:	47 95       	ror	r20
    9ca4:	07 94       	ror	r0
    9ca6:	56 95       	lsr	r21
    9ca8:	47 95       	ror	r20
    9caa:	07 94       	ror	r0
    9cac:	54 2f       	mov	r21, r20
    9cae:	40 2d       	mov	r20, r0
    9cb0:	4e 5d       	subi	r20, 0xDE	; 222
    9cb2:	55 4d       	sbci	r21, 0xD5	; 213
    9cb4:	00 e4       	ldi	r16, 0x40	; 64
    9cb6:	1e e4       	ldi	r17, 0x4E	; 78
    9cb8:	20 e4       	ldi	r18, 0x40	; 64
    9cba:	30 e0       	ldi	r19, 0x00	; 0
    9cbc:	61 e0       	ldi	r22, 0x01	; 1
    9cbe:	0e 94 ac 39 	call	0x7358	; 0x7358 <udd_ep_run>
    9cc2:	0b c0       	rjmp	.+22     	; 0x9cda <udi_cdc_data_received+0x5a>
    9cc4:	f0 e0       	ldi	r31, 0x00	; 0
    9cc6:	ee 0f       	add	r30, r30
    9cc8:	ff 1f       	adc	r31, r31
    9cca:	e2 5e       	subi	r30, 0xE2	; 226
    9ccc:	f5 4d       	sbci	r31, 0xD5	; 213
    9cce:	60 83       	st	Z, r22
    9cd0:	71 83       	std	Z+1, r23	; 0x01
    9cd2:	10 92 1a 2a 	sts	0x2A1A, r1	; 0x802a1a <udi_cdc_rx_trans_ongoing>
    9cd6:	80 e0       	ldi	r24, 0x00	; 0
    9cd8:	4f df       	rcall	.-354    	; 0x9b78 <udi_cdc_rx_start>
    9cda:	1f 91       	pop	r17
    9cdc:	0f 91       	pop	r16
    9cde:	08 95       	ret

00009ce0 <udi_cdc_multi_getc>:
    9ce0:	ef 92       	push	r14
    9ce2:	ff 92       	push	r15
    9ce4:	1f 93       	push	r17
    9ce6:	cf 93       	push	r28
    9ce8:	df 93       	push	r29
    9cea:	1f 92       	push	r1
    9cec:	cd b7       	in	r28, 0x3d	; 61
    9cee:	de b7       	in	r29, 0x3e	; 62
    9cf0:	11 e0       	ldi	r17, 0x01	; 1
    9cf2:	80 91 b8 2a 	lds	r24, 0x2AB8	; 0x802ab8 <udi_cdc_line_coding+0x6>
    9cf6:	89 30       	cpi	r24, 0x09	; 9
    9cf8:	09 f0       	breq	.+2      	; 0x9cfc <udi_cdc_multi_getc+0x1c>
    9cfa:	10 e0       	ldi	r17, 0x00	; 0
    9cfc:	40 e0       	ldi	r20, 0x00	; 0
    9cfe:	50 e0       	ldi	r21, 0x00	; 0
    9d00:	8f b7       	in	r24, 0x3f	; 63
    9d02:	89 83       	std	Y+1, r24	; 0x01
    9d04:	f8 94       	cli
    9d06:	a9 81       	ldd	r26, Y+1	; 0x01
    9d08:	20 91 1b 2a 	lds	r18, 0x2A1B	; 0x802a1b <udi_cdc_rx_pos>
    9d0c:	30 91 1c 2a 	lds	r19, 0x2A1C	; 0x802a1c <udi_cdc_rx_pos+0x1>
    9d10:	80 91 1d 2a 	lds	r24, 0x2A1D	; 0x802a1d <udi_cdc_rx_buf_sel>
    9d14:	90 e0       	ldi	r25, 0x00	; 0
    9d16:	fc 01       	movw	r30, r24
    9d18:	ee 0f       	add	r30, r30
    9d1a:	ff 1f       	adc	r31, r31
    9d1c:	e2 5e       	subi	r30, 0xE2	; 226
    9d1e:	f5 4d       	sbci	r31, 0xD5	; 213
    9d20:	60 81       	ld	r22, Z
    9d22:	71 81       	ldd	r23, Z+1	; 0x01
    9d24:	af bf       	out	0x3f, r26	; 63
    9d26:	26 17       	cp	r18, r22
    9d28:	37 07       	cpc	r19, r23
    9d2a:	30 f0       	brcs	.+12     	; 0x9d38 <udi_cdc_multi_getc+0x58>
    9d2c:	80 91 a2 2a 	lds	r24, 0x2AA2	; 0x802aa2 <udi_cdc_data_running>
    9d30:	81 11       	cpse	r24, r1
    9d32:	e6 cf       	rjmp	.-52     	; 0x9d00 <udi_cdc_multi_getc+0x20>
    9d34:	90 e0       	ldi	r25, 0x00	; 0
    9d36:	21 c0       	rjmp	.+66     	; 0x9d7a <udi_cdc_multi_getc+0x9a>
    9d38:	fc 01       	movw	r30, r24
    9d3a:	00 24       	eor	r0, r0
    9d3c:	f6 95       	lsr	r31
    9d3e:	e7 95       	ror	r30
    9d40:	07 94       	ror	r0
    9d42:	f6 95       	lsr	r31
    9d44:	e7 95       	ror	r30
    9d46:	07 94       	ror	r0
    9d48:	fe 2f       	mov	r31, r30
    9d4a:	e0 2d       	mov	r30, r0
    9d4c:	ee 5d       	subi	r30, 0xDE	; 222
    9d4e:	f5 4d       	sbci	r31, 0xD5	; 213
    9d50:	e2 0f       	add	r30, r18
    9d52:	f3 1f       	adc	r31, r19
    9d54:	80 81       	ld	r24, Z
    9d56:	7a 01       	movw	r14, r20
    9d58:	e8 2a       	or	r14, r24
    9d5a:	2f 5f       	subi	r18, 0xFF	; 255
    9d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    9d5e:	20 93 1b 2a 	sts	0x2A1B, r18	; 0x802a1b <udi_cdc_rx_pos>
    9d62:	30 93 1c 2a 	sts	0x2A1C, r19	; 0x802a1c <udi_cdc_rx_pos+0x1>
    9d66:	80 e0       	ldi	r24, 0x00	; 0
    9d68:	07 df       	rcall	.-498    	; 0x9b78 <udi_cdc_rx_start>
    9d6a:	11 23       	and	r17, r17
    9d6c:	21 f0       	breq	.+8      	; 0x9d76 <udi_cdc_multi_getc+0x96>
    9d6e:	5e 2d       	mov	r21, r14
    9d70:	44 27       	eor	r20, r20
    9d72:	10 e0       	ldi	r17, 0x00	; 0
    9d74:	c5 cf       	rjmp	.-118    	; 0x9d00 <udi_cdc_multi_getc+0x20>
    9d76:	8e 2d       	mov	r24, r14
    9d78:	9f 2d       	mov	r25, r15
    9d7a:	0f 90       	pop	r0
    9d7c:	df 91       	pop	r29
    9d7e:	cf 91       	pop	r28
    9d80:	1f 91       	pop	r17
    9d82:	ff 90       	pop	r15
    9d84:	ef 90       	pop	r14
    9d86:	08 95       	ret

00009d88 <udi_cdc_getc>:
    9d88:	80 e0       	ldi	r24, 0x00	; 0
    9d8a:	aa cf       	rjmp	.-172    	; 0x9ce0 <udi_cdc_multi_getc>
    9d8c:	08 95       	ret

00009d8e <udi_cdc_multi_get_free_tx_buffer>:
    9d8e:	cf 93       	push	r28
    9d90:	df 93       	push	r29
    9d92:	1f 92       	push	r1
    9d94:	cd b7       	in	r28, 0x3d	; 61
    9d96:	de b7       	in	r29, 0x3e	; 62
    9d98:	8f b7       	in	r24, 0x3f	; 63
    9d9a:	89 83       	std	Y+1, r24	; 0x01
    9d9c:	f8 94       	cli
    9d9e:	99 81       	ldd	r25, Y+1	; 0x01
    9da0:	80 91 94 29 	lds	r24, 0x2994	; 0x802994 <udi_cdc_tx_buf_sel>
    9da4:	e8 2f       	mov	r30, r24
    9da6:	f0 e0       	ldi	r31, 0x00	; 0
    9da8:	ee 0f       	add	r30, r30
    9daa:	ff 1f       	adc	r31, r31
    9dac:	eb 56       	subi	r30, 0x6B	; 107
    9dae:	f6 4d       	sbci	r31, 0xD6	; 214
    9db0:	20 81       	ld	r18, Z
    9db2:	31 81       	ldd	r19, Z+1	; 0x01
    9db4:	20 34       	cpi	r18, 0x40	; 64
    9db6:	31 05       	cpc	r19, r1
    9db8:	89 f4       	brne	.+34     	; 0x9ddc <udi_cdc_multi_get_free_tx_buffer+0x4e>
    9dba:	40 91 91 29 	lds	r20, 0x2991	; 0x802991 <udi_cdc_tx_trans_ongoing>
    9dbe:	41 11       	cpse	r20, r1
    9dc0:	0d c0       	rjmp	.+26     	; 0x9ddc <udi_cdc_multi_get_free_tx_buffer+0x4e>
    9dc2:	40 91 90 29 	lds	r20, 0x2990	; 0x802990 <udi_cdc_tx_both_buf_to_send>
    9dc6:	41 11       	cpse	r20, r1
    9dc8:	09 c0       	rjmp	.+18     	; 0x9ddc <udi_cdc_multi_get_free_tx_buffer+0x4e>
    9dca:	21 e0       	ldi	r18, 0x01	; 1
    9dcc:	20 93 90 29 	sts	0x2990, r18	; 0x802990 <udi_cdc_tx_both_buf_to_send>
    9dd0:	81 11       	cpse	r24, r1
    9dd2:	20 e0       	ldi	r18, 0x00	; 0
    9dd4:	20 93 94 29 	sts	0x2994, r18	; 0x802994 <udi_cdc_tx_buf_sel>
    9dd8:	20 e0       	ldi	r18, 0x00	; 0
    9dda:	30 e0       	ldi	r19, 0x00	; 0
    9ddc:	9f bf       	out	0x3f, r25	; 63
    9dde:	80 e4       	ldi	r24, 0x40	; 64
    9de0:	90 e0       	ldi	r25, 0x00	; 0
    9de2:	82 1b       	sub	r24, r18
    9de4:	93 0b       	sbc	r25, r19
    9de6:	0f 90       	pop	r0
    9de8:	df 91       	pop	r29
    9dea:	cf 91       	pop	r28
    9dec:	08 95       	ret

00009dee <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    9dee:	cf df       	rcall	.-98     	; 0x9d8e <udi_cdc_multi_get_free_tx_buffer>
    9df0:	21 e0       	ldi	r18, 0x01	; 1
    9df2:	89 2b       	or	r24, r25
    9df4:	09 f4       	brne	.+2      	; 0x9df8 <udi_cdc_multi_is_tx_ready+0xa>
    9df6:	20 e0       	ldi	r18, 0x00	; 0
    9df8:	82 2f       	mov	r24, r18
    9dfa:	08 95       	ret

00009dfc <udi_cdc_multi_putc>:
    9dfc:	ff 92       	push	r15
    9dfe:	0f 93       	push	r16
    9e00:	1f 93       	push	r17
    9e02:	cf 93       	push	r28
    9e04:	df 93       	push	r29
    9e06:	1f 92       	push	r1
    9e08:	cd b7       	in	r28, 0x3d	; 61
    9e0a:	de b7       	in	r29, 0x3e	; 62
    9e0c:	f6 2e       	mov	r15, r22
    9e0e:	17 2f       	mov	r17, r23
    9e10:	01 e0       	ldi	r16, 0x01	; 1
    9e12:	80 91 b8 2a 	lds	r24, 0x2AB8	; 0x802ab8 <udi_cdc_line_coding+0x6>
    9e16:	89 30       	cpi	r24, 0x09	; 9
    9e18:	09 f0       	breq	.+2      	; 0x9e1c <udi_cdc_multi_putc+0x20>
    9e1a:	00 e0       	ldi	r16, 0x00	; 0
    9e1c:	80 e0       	ldi	r24, 0x00	; 0
    9e1e:	e7 df       	rcall	.-50     	; 0x9dee <udi_cdc_multi_is_tx_ready>
    9e20:	81 11       	cpse	r24, r1
    9e22:	07 c0       	rjmp	.+14     	; 0x9e32 <udi_cdc_multi_putc+0x36>
    9e24:	80 91 a2 2a 	lds	r24, 0x2AA2	; 0x802aa2 <udi_cdc_data_running>
    9e28:	81 11       	cpse	r24, r1
    9e2a:	f8 cf       	rjmp	.-16     	; 0x9e1c <udi_cdc_multi_putc+0x20>
    9e2c:	80 e0       	ldi	r24, 0x00	; 0
    9e2e:	90 e0       	ldi	r25, 0x00	; 0
    9e30:	2c c0       	rjmp	.+88     	; 0x9e8a <udi_cdc_multi_putc+0x8e>
    9e32:	8f b7       	in	r24, 0x3f	; 63
    9e34:	89 83       	std	Y+1, r24	; 0x01
    9e36:	f8 94       	cli
    9e38:	49 81       	ldd	r20, Y+1	; 0x01
    9e3a:	80 91 94 29 	lds	r24, 0x2994	; 0x802994 <udi_cdc_tx_buf_sel>
    9e3e:	90 e0       	ldi	r25, 0x00	; 0
    9e40:	fc 01       	movw	r30, r24
    9e42:	ee 0f       	add	r30, r30
    9e44:	ff 1f       	adc	r31, r31
    9e46:	eb 56       	subi	r30, 0x6B	; 107
    9e48:	f6 4d       	sbci	r31, 0xD6	; 214
    9e4a:	20 81       	ld	r18, Z
    9e4c:	31 81       	ldd	r19, Z+1	; 0x01
    9e4e:	b9 01       	movw	r22, r18
    9e50:	6f 5f       	subi	r22, 0xFF	; 255
    9e52:	7f 4f       	sbci	r23, 0xFF	; 255
    9e54:	60 83       	st	Z, r22
    9e56:	71 83       	std	Z+1, r23	; 0x01
    9e58:	00 24       	eor	r0, r0
    9e5a:	96 95       	lsr	r25
    9e5c:	87 95       	ror	r24
    9e5e:	07 94       	ror	r0
    9e60:	96 95       	lsr	r25
    9e62:	87 95       	ror	r24
    9e64:	07 94       	ror	r0
    9e66:	98 2f       	mov	r25, r24
    9e68:	80 2d       	mov	r24, r0
    9e6a:	86 56       	subi	r24, 0x66	; 102
    9e6c:	96 4d       	sbci	r25, 0xD6	; 214
    9e6e:	fc 01       	movw	r30, r24
    9e70:	e2 0f       	add	r30, r18
    9e72:	f3 1f       	adc	r31, r19
    9e74:	f0 82       	st	Z, r15
    9e76:	4f bf       	out	0x3f, r20	; 63
    9e78:	00 23       	and	r16, r16
    9e7a:	29 f0       	breq	.+10     	; 0x9e86 <udi_cdc_multi_putc+0x8a>
    9e7c:	f1 2e       	mov	r15, r17
    9e7e:	11 0f       	add	r17, r17
    9e80:	11 0b       	sbc	r17, r17
    9e82:	00 e0       	ldi	r16, 0x00	; 0
    9e84:	cb cf       	rjmp	.-106    	; 0x9e1c <udi_cdc_multi_putc+0x20>
    9e86:	81 e0       	ldi	r24, 0x01	; 1
    9e88:	90 e0       	ldi	r25, 0x00	; 0
    9e8a:	0f 90       	pop	r0
    9e8c:	df 91       	pop	r29
    9e8e:	cf 91       	pop	r28
    9e90:	1f 91       	pop	r17
    9e92:	0f 91       	pop	r16
    9e94:	ff 90       	pop	r15
    9e96:	08 95       	ret

00009e98 <udi_cdc_putc>:
    9e98:	bc 01       	movw	r22, r24
    9e9a:	80 e0       	ldi	r24, 0x00	; 0
    9e9c:	af cf       	rjmp	.-162    	; 0x9dfc <udi_cdc_multi_putc>
    9e9e:	08 95       	ret

00009ea0 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    9ea0:	e0 91 be 2a 	lds	r30, 0x2ABE	; 0x802abe <udc_ptr_conf>
    9ea4:	f0 91 bf 2a 	lds	r31, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    9ea8:	01 90       	ld	r0, Z+
    9eaa:	f0 81       	ld	r31, Z
    9eac:	e0 2d       	mov	r30, r0
    9eae:	22 81       	ldd	r18, Z+2	; 0x02
    9eb0:	33 81       	ldd	r19, Z+3	; 0x03
    9eb2:	2e 0f       	add	r18, r30
    9eb4:	3f 1f       	adc	r19, r31
    9eb6:	fc 01       	movw	r30, r24
    9eb8:	40 81       	ld	r20, Z
    9eba:	e4 0f       	add	r30, r20
    9ebc:	f1 1d       	adc	r31, r1
    9ebe:	e2 17       	cp	r30, r18
    9ec0:	f3 07       	cpc	r31, r19
    9ec2:	a0 f4       	brcc	.+40     	; 0x9eec <udc_next_desc_in_iface+0x4c>
    9ec4:	81 81       	ldd	r24, Z+1	; 0x01
    9ec6:	84 30       	cpi	r24, 0x04	; 4
    9ec8:	a1 f0       	breq	.+40     	; 0x9ef2 <udc_next_desc_in_iface+0x52>
    9eca:	86 13       	cpse	r24, r22
    9ecc:	06 c0       	rjmp	.+12     	; 0x9eda <udc_next_desc_in_iface+0x3a>
    9ece:	14 c0       	rjmp	.+40     	; 0x9ef8 <udc_next_desc_in_iface+0x58>
    9ed0:	81 81       	ldd	r24, Z+1	; 0x01
    9ed2:	84 30       	cpi	r24, 0x04	; 4
    9ed4:	a1 f0       	breq	.+40     	; 0x9efe <udc_next_desc_in_iface+0x5e>
    9ed6:	86 17       	cp	r24, r22
    9ed8:	a9 f0       	breq	.+42     	; 0x9f04 <udc_next_desc_in_iface+0x64>
    9eda:	80 81       	ld	r24, Z
    9edc:	e8 0f       	add	r30, r24
    9ede:	f1 1d       	adc	r31, r1
    9ee0:	e2 17       	cp	r30, r18
    9ee2:	f3 07       	cpc	r31, r19
    9ee4:	a8 f3       	brcs	.-22     	; 0x9ed0 <udc_next_desc_in_iface+0x30>
    9ee6:	80 e0       	ldi	r24, 0x00	; 0
    9ee8:	90 e0       	ldi	r25, 0x00	; 0
    9eea:	08 95       	ret
    9eec:	80 e0       	ldi	r24, 0x00	; 0
    9eee:	90 e0       	ldi	r25, 0x00	; 0
    9ef0:	08 95       	ret
    9ef2:	80 e0       	ldi	r24, 0x00	; 0
    9ef4:	90 e0       	ldi	r25, 0x00	; 0
    9ef6:	08 95       	ret
    9ef8:	8e 2f       	mov	r24, r30
    9efa:	9f 2f       	mov	r25, r31
    9efc:	08 95       	ret
    9efe:	80 e0       	ldi	r24, 0x00	; 0
    9f00:	90 e0       	ldi	r25, 0x00	; 0
    9f02:	08 95       	ret
    9f04:	8e 2f       	mov	r24, r30
    9f06:	9f 2f       	mov	r25, r31
    9f08:	08 95       	ret

00009f0a <udc_valid_address>:
    9f0a:	80 91 d7 2a 	lds	r24, 0x2AD7	; 0x802ad7 <udd_g_ctrlreq+0x2>
    9f0e:	8f 77       	andi	r24, 0x7F	; 127
    9f10:	0c 94 bd 38 	jmp	0x717a	; 0x717a <udd_set_address>
    9f14:	08 95       	ret

00009f16 <udc_update_iface_desc>:
    9f16:	90 91 c0 2a 	lds	r25, 0x2AC0	; 0x802ac0 <udc_num_configuration>
    9f1a:	99 23       	and	r25, r25
    9f1c:	81 f1       	breq	.+96     	; 0x9f7e <udc_update_iface_desc+0x68>
    9f1e:	e0 91 be 2a 	lds	r30, 0x2ABE	; 0x802abe <udc_ptr_conf>
    9f22:	f0 91 bf 2a 	lds	r31, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    9f26:	01 90       	ld	r0, Z+
    9f28:	f0 81       	ld	r31, Z
    9f2a:	e0 2d       	mov	r30, r0
    9f2c:	94 81       	ldd	r25, Z+4	; 0x04
    9f2e:	89 17       	cp	r24, r25
    9f30:	40 f5       	brcc	.+80     	; 0x9f82 <udc_update_iface_desc+0x6c>
    9f32:	e0 93 bc 2a 	sts	0x2ABC, r30	; 0x802abc <udc_ptr_iface>
    9f36:	f0 93 bd 2a 	sts	0x2ABD, r31	; 0x802abd <udc_ptr_iface+0x1>
    9f3a:	22 81       	ldd	r18, Z+2	; 0x02
    9f3c:	33 81       	ldd	r19, Z+3	; 0x03
    9f3e:	2e 0f       	add	r18, r30
    9f40:	3f 1f       	adc	r19, r31
    9f42:	e2 17       	cp	r30, r18
    9f44:	f3 07       	cpc	r31, r19
    9f46:	f8 f4       	brcc	.+62     	; 0x9f86 <udc_update_iface_desc+0x70>
    9f48:	91 81       	ldd	r25, Z+1	; 0x01
    9f4a:	94 30       	cpi	r25, 0x04	; 4
    9f4c:	61 f4       	brne	.+24     	; 0x9f66 <udc_update_iface_desc+0x50>
    9f4e:	92 81       	ldd	r25, Z+2	; 0x02
    9f50:	89 13       	cpse	r24, r25
    9f52:	09 c0       	rjmp	.+18     	; 0x9f66 <udc_update_iface_desc+0x50>
    9f54:	93 81       	ldd	r25, Z+3	; 0x03
    9f56:	96 13       	cpse	r25, r22
    9f58:	06 c0       	rjmp	.+12     	; 0x9f66 <udc_update_iface_desc+0x50>
    9f5a:	e0 93 bc 2a 	sts	0x2ABC, r30	; 0x802abc <udc_ptr_iface>
    9f5e:	f0 93 bd 2a 	sts	0x2ABD, r31	; 0x802abd <udc_ptr_iface+0x1>
    9f62:	81 e0       	ldi	r24, 0x01	; 1
    9f64:	08 95       	ret
    9f66:	90 81       	ld	r25, Z
    9f68:	e9 0f       	add	r30, r25
    9f6a:	f1 1d       	adc	r31, r1
    9f6c:	e2 17       	cp	r30, r18
    9f6e:	f3 07       	cpc	r31, r19
    9f70:	58 f3       	brcs	.-42     	; 0x9f48 <udc_update_iface_desc+0x32>
    9f72:	e0 93 bc 2a 	sts	0x2ABC, r30	; 0x802abc <udc_ptr_iface>
    9f76:	f0 93 bd 2a 	sts	0x2ABD, r31	; 0x802abd <udc_ptr_iface+0x1>
    9f7a:	80 e0       	ldi	r24, 0x00	; 0
    9f7c:	08 95       	ret
    9f7e:	80 e0       	ldi	r24, 0x00	; 0
    9f80:	08 95       	ret
    9f82:	80 e0       	ldi	r24, 0x00	; 0
    9f84:	08 95       	ret
    9f86:	80 e0       	ldi	r24, 0x00	; 0
    9f88:	08 95       	ret

00009f8a <udc_iface_disable>:
    9f8a:	ef 92       	push	r14
    9f8c:	ff 92       	push	r15
    9f8e:	1f 93       	push	r17
    9f90:	cf 93       	push	r28
    9f92:	df 93       	push	r29
    9f94:	c8 2f       	mov	r28, r24
    9f96:	60 e0       	ldi	r22, 0x00	; 0
    9f98:	be df       	rcall	.-132    	; 0x9f16 <udc_update_iface_desc>
    9f9a:	18 2f       	mov	r17, r24
    9f9c:	88 23       	and	r24, r24
    9f9e:	81 f1       	breq	.+96     	; 0xa000 <udc_iface_disable+0x76>
    9fa0:	a0 91 be 2a 	lds	r26, 0x2ABE	; 0x802abe <udc_ptr_conf>
    9fa4:	b0 91 bf 2a 	lds	r27, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    9fa8:	ec 2f       	mov	r30, r28
    9faa:	f0 e0       	ldi	r31, 0x00	; 0
    9fac:	ee 0f       	add	r30, r30
    9fae:	ff 1f       	adc	r31, r31
    9fb0:	12 96       	adiw	r26, 0x02	; 2
    9fb2:	8d 91       	ld	r24, X+
    9fb4:	9c 91       	ld	r25, X
    9fb6:	13 97       	sbiw	r26, 0x03	; 3
    9fb8:	e8 0f       	add	r30, r24
    9fba:	f9 1f       	adc	r31, r25
    9fbc:	e0 80       	ld	r14, Z
    9fbe:	f1 80       	ldd	r15, Z+1	; 0x01
    9fc0:	d7 01       	movw	r26, r14
    9fc2:	16 96       	adiw	r26, 0x06	; 6
    9fc4:	ed 91       	ld	r30, X+
    9fc6:	fc 91       	ld	r31, X
    9fc8:	17 97       	sbiw	r26, 0x07	; 7
    9fca:	19 95       	eicall
    9fcc:	68 2f       	mov	r22, r24
    9fce:	8c 2f       	mov	r24, r28
    9fd0:	a2 df       	rcall	.-188    	; 0x9f16 <udc_update_iface_desc>
    9fd2:	18 2f       	mov	r17, r24
    9fd4:	88 23       	and	r24, r24
    9fd6:	a1 f0       	breq	.+40     	; 0xa000 <udc_iface_disable+0x76>
    9fd8:	c0 91 bc 2a 	lds	r28, 0x2ABC	; 0x802abc <udc_ptr_iface>
    9fdc:	d0 91 bd 2a 	lds	r29, 0x2ABD	; 0x802abd <udc_ptr_iface+0x1>
    9fe0:	65 e0       	ldi	r22, 0x05	; 5
    9fe2:	ce 01       	movw	r24, r28
    9fe4:	5d df       	rcall	.-326    	; 0x9ea0 <udc_next_desc_in_iface>
    9fe6:	ec 01       	movw	r28, r24
    9fe8:	89 2b       	or	r24, r25
    9fea:	21 f0       	breq	.+8      	; 0x9ff4 <udc_iface_disable+0x6a>
    9fec:	8a 81       	ldd	r24, Y+2	; 0x02
    9fee:	0e 94 c6 3a 	call	0x758c	; 0x758c <udd_ep_free>
    9ff2:	f6 cf       	rjmp	.-20     	; 0x9fe0 <udc_iface_disable+0x56>
    9ff4:	d7 01       	movw	r26, r14
    9ff6:	12 96       	adiw	r26, 0x02	; 2
    9ff8:	ed 91       	ld	r30, X+
    9ffa:	fc 91       	ld	r31, X
    9ffc:	13 97       	sbiw	r26, 0x03	; 3
    9ffe:	19 95       	eicall
    a000:	81 2f       	mov	r24, r17
    a002:	df 91       	pop	r29
    a004:	cf 91       	pop	r28
    a006:	1f 91       	pop	r17
    a008:	ff 90       	pop	r15
    a00a:	ef 90       	pop	r14
    a00c:	08 95       	ret

0000a00e <udc_iface_enable>:
    a00e:	1f 93       	push	r17
    a010:	cf 93       	push	r28
    a012:	df 93       	push	r29
    a014:	18 2f       	mov	r17, r24
    a016:	7f df       	rcall	.-258    	; 0x9f16 <udc_update_iface_desc>
    a018:	88 23       	and	r24, r24
    a01a:	41 f1       	breq	.+80     	; 0xa06c <udc_iface_enable+0x5e>
    a01c:	c0 91 bc 2a 	lds	r28, 0x2ABC	; 0x802abc <udc_ptr_iface>
    a020:	d0 91 bd 2a 	lds	r29, 0x2ABD	; 0x802abd <udc_ptr_iface+0x1>
    a024:	65 e0       	ldi	r22, 0x05	; 5
    a026:	ce 01       	movw	r24, r28
    a028:	3b df       	rcall	.-394    	; 0x9ea0 <udc_next_desc_in_iface>
    a02a:	ec 01       	movw	r28, r24
    a02c:	89 2b       	or	r24, r25
    a02e:	49 f0       	breq	.+18     	; 0xa042 <udc_iface_enable+0x34>
    a030:	4c 81       	ldd	r20, Y+4	; 0x04
    a032:	5d 81       	ldd	r21, Y+5	; 0x05
    a034:	6b 81       	ldd	r22, Y+3	; 0x03
    a036:	8a 81       	ldd	r24, Y+2	; 0x02
    a038:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <udd_ep_alloc>
    a03c:	81 11       	cpse	r24, r1
    a03e:	f2 cf       	rjmp	.-28     	; 0xa024 <udc_iface_enable+0x16>
    a040:	15 c0       	rjmp	.+42     	; 0xa06c <udc_iface_enable+0x5e>
    a042:	a0 91 be 2a 	lds	r26, 0x2ABE	; 0x802abe <udc_ptr_conf>
    a046:	b0 91 bf 2a 	lds	r27, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    a04a:	e1 2f       	mov	r30, r17
    a04c:	f0 e0       	ldi	r31, 0x00	; 0
    a04e:	ee 0f       	add	r30, r30
    a050:	ff 1f       	adc	r31, r31
    a052:	12 96       	adiw	r26, 0x02	; 2
    a054:	8d 91       	ld	r24, X+
    a056:	9c 91       	ld	r25, X
    a058:	13 97       	sbiw	r26, 0x03	; 3
    a05a:	e8 0f       	add	r30, r24
    a05c:	f9 1f       	adc	r31, r25
    a05e:	01 90       	ld	r0, Z+
    a060:	f0 81       	ld	r31, Z
    a062:	e0 2d       	mov	r30, r0
    a064:	01 90       	ld	r0, Z+
    a066:	f0 81       	ld	r31, Z
    a068:	e0 2d       	mov	r30, r0
    a06a:	19 95       	eicall
    a06c:	df 91       	pop	r29
    a06e:	cf 91       	pop	r28
    a070:	1f 91       	pop	r17
    a072:	08 95       	ret

0000a074 <udc_start>:
    a074:	0c 94 36 38 	jmp	0x706c	; 0x706c <udd_enable>
    a078:	08 95       	ret

0000a07a <udc_reset>:
    a07a:	cf 93       	push	r28
    a07c:	80 91 c0 2a 	lds	r24, 0x2AC0	; 0x802ac0 <udc_num_configuration>
    a080:	88 23       	and	r24, r24
    a082:	c1 f0       	breq	.+48     	; 0xa0b4 <udc_reset+0x3a>
    a084:	e0 91 be 2a 	lds	r30, 0x2ABE	; 0x802abe <udc_ptr_conf>
    a088:	f0 91 bf 2a 	lds	r31, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    a08c:	01 90       	ld	r0, Z+
    a08e:	f0 81       	ld	r31, Z
    a090:	e0 2d       	mov	r30, r0
    a092:	84 81       	ldd	r24, Z+4	; 0x04
    a094:	88 23       	and	r24, r24
    a096:	71 f0       	breq	.+28     	; 0xa0b4 <udc_reset+0x3a>
    a098:	c0 e0       	ldi	r28, 0x00	; 0
    a09a:	8c 2f       	mov	r24, r28
    a09c:	76 df       	rcall	.-276    	; 0x9f8a <udc_iface_disable>
    a09e:	cf 5f       	subi	r28, 0xFF	; 255
    a0a0:	e0 91 be 2a 	lds	r30, 0x2ABE	; 0x802abe <udc_ptr_conf>
    a0a4:	f0 91 bf 2a 	lds	r31, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    a0a8:	01 90       	ld	r0, Z+
    a0aa:	f0 81       	ld	r31, Z
    a0ac:	e0 2d       	mov	r30, r0
    a0ae:	84 81       	ldd	r24, Z+4	; 0x04
    a0b0:	c8 17       	cp	r28, r24
    a0b2:	98 f3       	brcs	.-26     	; 0xa09a <udc_reset+0x20>
    a0b4:	10 92 c0 2a 	sts	0x2AC0, r1	; 0x802ac0 <udc_num_configuration>
    a0b8:	80 91 c4 2a 	lds	r24, 0x2AC4	; 0x802ac4 <udc_device_status>
    a0bc:	81 fd       	sbrc	r24, 1
    a0be:	0e 94 62 41 	call	0x82c4	; 0x82c4 <usb_callback_remotewakeup_disable>
    a0c2:	10 92 c4 2a 	sts	0x2AC4, r1	; 0x802ac4 <udc_device_status>
    a0c6:	10 92 c5 2a 	sts	0x2AC5, r1	; 0x802ac5 <udc_device_status+0x1>
    a0ca:	cf 91       	pop	r28
    a0cc:	08 95       	ret

0000a0ce <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    a0ce:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    a0d0:	80 91 c0 2a 	lds	r24, 0x2AC0	; 0x802ac0 <udc_num_configuration>
    a0d4:	88 23       	and	r24, r24
    a0d6:	49 f1       	breq	.+82     	; 0xa12a <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    a0d8:	a0 91 be 2a 	lds	r26, 0x2ABE	; 0x802abe <udc_ptr_conf>
    a0dc:	b0 91 bf 2a 	lds	r27, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    a0e0:	ed 91       	ld	r30, X+
    a0e2:	fc 91       	ld	r31, X
    a0e4:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    a0e6:	84 81       	ldd	r24, Z+4	; 0x04
    a0e8:	88 23       	and	r24, r24
    a0ea:	f9 f0       	breq	.+62     	; 0xa12a <udc_sof_notify+0x5c>
    a0ec:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    a0ee:	ec 2f       	mov	r30, r28
    a0f0:	f0 e0       	ldi	r31, 0x00	; 0
    a0f2:	ee 0f       	add	r30, r30
    a0f4:	ff 1f       	adc	r31, r31
    a0f6:	12 96       	adiw	r26, 0x02	; 2
    a0f8:	8d 91       	ld	r24, X+
    a0fa:	9c 91       	ld	r25, X
    a0fc:	13 97       	sbiw	r26, 0x03	; 3
    a0fe:	e8 0f       	add	r30, r24
    a100:	f9 1f       	adc	r31, r25
    a102:	01 90       	ld	r0, Z+
    a104:	f0 81       	ld	r31, Z
    a106:	e0 2d       	mov	r30, r0
    a108:	00 84       	ldd	r0, Z+8	; 0x08
    a10a:	f1 85       	ldd	r31, Z+9	; 0x09
    a10c:	e0 2d       	mov	r30, r0
    a10e:	30 97       	sbiw	r30, 0x00	; 0
    a110:	09 f0       	breq	.+2      	; 0xa114 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    a112:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    a114:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    a116:	a0 91 be 2a 	lds	r26, 0x2ABE	; 0x802abe <udc_ptr_conf>
    a11a:	b0 91 bf 2a 	lds	r27, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    a11e:	ed 91       	ld	r30, X+
    a120:	fc 91       	ld	r31, X
    a122:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    a124:	84 81       	ldd	r24, Z+4	; 0x04
    a126:	c8 17       	cp	r28, r24
    a128:	10 f3       	brcs	.-60     	; 0xa0ee <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    a12a:	cf 91       	pop	r28
    a12c:	08 95       	ret

0000a12e <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    a12e:	0f 93       	push	r16
    a130:	1f 93       	push	r17
    a132:	cf 93       	push	r28
    a134:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    a136:	e5 ed       	ldi	r30, 0xD5	; 213
    a138:	fa e2       	ldi	r31, 0x2A	; 42
    a13a:	12 86       	std	Z+10, r1	; 0x0a
    a13c:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    a13e:	14 86       	std	Z+12, r1	; 0x0c
    a140:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    a142:	16 86       	std	Z+14, r1	; 0x0e
    a144:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    a146:	80 81       	ld	r24, Z
    a148:	88 23       	and	r24, r24
    a14a:	0c f0       	brlt	.+2      	; 0xa14e <udc_process_setup+0x20>
    a14c:	95 c2       	rjmp	.+1322   	; 0xa678 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    a14e:	20 91 db 2a 	lds	r18, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    a152:	30 91 dc 2a 	lds	r19, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    a156:	21 15       	cp	r18, r1
    a158:	31 05       	cpc	r19, r1
    a15a:	09 f0       	breq	.+2      	; 0xa15e <udc_process_setup+0x30>
    a15c:	88 c2       	rjmp	.+1296   	; 0xa66e <udc_process_setup+0x540>
    a15e:	7f c2       	rjmp	.+1278   	; 0xa65e <udc_process_setup+0x530>
    a160:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    a162:	09 f0       	breq	.+2      	; 0xa166 <udc_process_setup+0x38>
    a164:	ab c0       	rjmp	.+342    	; 0xa2bc <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    a166:	90 91 d6 2a 	lds	r25, 0x2AD6	; 0x802ad6 <udd_g_ctrlreq+0x1>
    a16a:	96 30       	cpi	r25, 0x06	; 6
    a16c:	81 f0       	breq	.+32     	; 0xa18e <udc_process_setup+0x60>
    a16e:	98 30       	cpi	r25, 0x08	; 8
    a170:	09 f4       	brne	.+2      	; 0xa174 <udc_process_setup+0x46>
    a172:	99 c0       	rjmp	.+306    	; 0xa2a6 <udc_process_setup+0x178>
    a174:	91 11       	cpse	r25, r1
    a176:	a2 c0       	rjmp	.+324    	; 0xa2bc <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    a178:	22 30       	cpi	r18, 0x02	; 2
    a17a:	31 05       	cpc	r19, r1
    a17c:	09 f0       	breq	.+2      	; 0xa180 <udc_process_setup+0x52>
    a17e:	2b c2       	rjmp	.+1110   	; 0xa5d6 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    a180:	62 e0       	ldi	r22, 0x02	; 2
    a182:	70 e0       	ldi	r23, 0x00	; 0
    a184:	84 ec       	ldi	r24, 0xC4	; 196
    a186:	9a e2       	ldi	r25, 0x2A	; 42
    a188:	0e 94 cb 38 	call	0x7196	; 0x7196 <udd_set_setup_payload>
    a18c:	7e c2       	rjmp	.+1276   	; 0xa68a <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    a18e:	80 91 d7 2a 	lds	r24, 0x2AD7	; 0x802ad7 <udd_g_ctrlreq+0x2>
    a192:	90 91 d8 2a 	lds	r25, 0x2AD8	; 0x802ad8 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    a196:	29 2f       	mov	r18, r25
    a198:	33 27       	eor	r19, r19
    a19a:	22 30       	cpi	r18, 0x02	; 2
    a19c:	31 05       	cpc	r19, r1
    a19e:	b1 f0       	breq	.+44     	; 0xa1cc <udc_process_setup+0x9e>
    a1a0:	20 f4       	brcc	.+8      	; 0xa1aa <udc_process_setup+0x7c>
    a1a2:	21 30       	cpi	r18, 0x01	; 1
    a1a4:	31 05       	cpc	r19, r1
    a1a6:	41 f0       	breq	.+16     	; 0xa1b8 <udc_process_setup+0x8a>
    a1a8:	d8 c1       	rjmp	.+944    	; 0xa55a <udc_process_setup+0x42c>
    a1aa:	23 30       	cpi	r18, 0x03	; 3
    a1ac:	31 05       	cpc	r19, r1
    a1ae:	f1 f1       	breq	.+124    	; 0xa22c <udc_process_setup+0xfe>
    a1b0:	2f 30       	cpi	r18, 0x0F	; 15
    a1b2:	31 05       	cpc	r19, r1
    a1b4:	61 f1       	breq	.+88     	; 0xa20e <udc_process_setup+0xe0>
    a1b6:	d1 c1       	rjmp	.+930    	; 0xa55a <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    a1b8:	80 91 6d 20 	lds	r24, 0x206D	; 0x80206d <udc_config>
    a1bc:	90 91 6e 20 	lds	r25, 0x206E	; 0x80206e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    a1c0:	dc 01       	movw	r26, r24
    a1c2:	6c 91       	ld	r22, X
    a1c4:	70 e0       	ldi	r23, 0x00	; 0
    a1c6:	0e 94 cb 38 	call	0x7196	; 0x7196 <udd_set_setup_payload>
    a1ca:	5e c0       	rjmp	.+188    	; 0xa288 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    a1cc:	e0 91 6d 20 	lds	r30, 0x206D	; 0x80206d <udc_config>
    a1d0:	f0 91 6e 20 	lds	r31, 0x206E	; 0x80206e <udc_config+0x1>
    a1d4:	21 89       	ldd	r18, Z+17	; 0x11
    a1d6:	82 17       	cp	r24, r18
    a1d8:	08 f0       	brcs	.+2      	; 0xa1dc <udc_process_setup+0xae>
    a1da:	fd c1       	rjmp	.+1018   	; 0xa5d6 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    a1dc:	99 27       	eor	r25, r25
    a1de:	88 0f       	add	r24, r24
    a1e0:	99 1f       	adc	r25, r25
    a1e2:	88 0f       	add	r24, r24
    a1e4:	99 1f       	adc	r25, r25
    a1e6:	e0 91 6f 20 	lds	r30, 0x206F	; 0x80206f <udc_config+0x2>
    a1ea:	f0 91 70 20 	lds	r31, 0x2070	; 0x802070 <udc_config+0x3>
    a1ee:	e8 0f       	add	r30, r24
    a1f0:	f9 1f       	adc	r31, r25
    a1f2:	80 81       	ld	r24, Z
    a1f4:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    a1f6:	fc 01       	movw	r30, r24
    a1f8:	62 81       	ldd	r22, Z+2	; 0x02
    a1fa:	73 81       	ldd	r23, Z+3	; 0x03
    a1fc:	0e 94 cb 38 	call	0x7196	; 0x7196 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    a200:	e0 91 dd 2a 	lds	r30, 0x2ADD	; 0x802add <udd_g_ctrlreq+0x8>
    a204:	f0 91 de 2a 	lds	r31, 0x2ADE	; 0x802ade <udd_g_ctrlreq+0x9>
    a208:	82 e0       	ldi	r24, 0x02	; 2
    a20a:	81 83       	std	Z+1, r24	; 0x01
    a20c:	3d c0       	rjmp	.+122    	; 0xa288 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    a20e:	80 91 71 20 	lds	r24, 0x2071	; 0x802071 <udc_config+0x4>
    a212:	90 91 72 20 	lds	r25, 0x2072	; 0x802072 <udc_config+0x5>
    a216:	00 97       	sbiw	r24, 0x00	; 0
    a218:	09 f4       	brne	.+2      	; 0xa21c <udc_process_setup+0xee>
    a21a:	dd c1       	rjmp	.+954    	; 0xa5d6 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    a21c:	dc 01       	movw	r26, r24
    a21e:	12 96       	adiw	r26, 0x02	; 2
    a220:	6d 91       	ld	r22, X+
    a222:	7c 91       	ld	r23, X
    a224:	13 97       	sbiw	r26, 0x03	; 3
    a226:	0e 94 cb 38 	call	0x7196	; 0x7196 <udd_set_setup_payload>
    a22a:	2e c0       	rjmp	.+92     	; 0xa288 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    a22c:	99 27       	eor	r25, r25
    a22e:	81 30       	cpi	r24, 0x01	; 1
    a230:	91 05       	cpc	r25, r1
    a232:	99 f0       	breq	.+38     	; 0xa25a <udc_process_setup+0x12c>
    a234:	58 f0       	brcs	.+22     	; 0xa24c <udc_process_setup+0x11e>
    a236:	82 30       	cpi	r24, 0x02	; 2
    a238:	91 05       	cpc	r25, r1
    a23a:	09 f4       	brne	.+2      	; 0xa23e <udc_process_setup+0x110>
    a23c:	22 c2       	rjmp	.+1092   	; 0xa682 <udc_process_setup+0x554>
    a23e:	03 97       	sbiw	r24, 0x03	; 3
    a240:	09 f0       	breq	.+2      	; 0xa244 <udc_process_setup+0x116>
    a242:	94 c1       	rjmp	.+808    	; 0xa56c <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    a244:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    a246:	e8 e8       	ldi	r30, 0x88	; 136
    a248:	f6 e2       	ldi	r31, 0x26	; 38
    a24a:	0a c0       	rjmp	.+20     	; 0xa260 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    a24c:	64 e0       	ldi	r22, 0x04	; 4
    a24e:	70 e0       	ldi	r23, 0x00	; 0
    a250:	82 e1       	ldi	r24, 0x12	; 18
    a252:	91 e2       	ldi	r25, 0x21	; 33
    a254:	0e 94 cb 38 	call	0x7196	; 0x7196 <udd_set_setup_payload>
    a258:	17 c0       	rjmp	.+46     	; 0xa288 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    a25a:	e1 e0       	ldi	r30, 0x01	; 1
    a25c:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    a25e:	30 e1       	ldi	r19, 0x10	; 16
    a260:	a4 ed       	ldi	r26, 0xD4	; 212
    a262:	b0 e2       	ldi	r27, 0x20	; 32
    a264:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    a266:	81 91       	ld	r24, Z+
    a268:	90 e0       	ldi	r25, 0x00	; 0
    a26a:	8d 93       	st	X+, r24
    a26c:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    a26e:	2f 5f       	subi	r18, 0xFF	; 255
    a270:	23 17       	cp	r18, r19
    a272:	c8 f3       	brcs	.-14     	; 0xa266 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    a274:	63 2f       	mov	r22, r19
    a276:	66 0f       	add	r22, r22
    a278:	6e 5f       	subi	r22, 0xFE	; 254
    a27a:	60 93 d2 20 	sts	0x20D2, r22	; 0x8020d2 <udc_string_desc>
		udd_set_setup_payload(
    a27e:	70 e0       	ldi	r23, 0x00	; 0
    a280:	82 ed       	ldi	r24, 0xD2	; 210
    a282:	90 e2       	ldi	r25, 0x20	; 32
    a284:	0e 94 cb 38 	call	0x7196	; 0x7196 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    a288:	e5 ed       	ldi	r30, 0xD5	; 213
    a28a:	fa e2       	ldi	r31, 0x2A	; 42
    a28c:	86 81       	ldd	r24, Z+6	; 0x06
    a28e:	97 81       	ldd	r25, Z+7	; 0x07
    a290:	22 85       	ldd	r18, Z+10	; 0x0a
    a292:	33 85       	ldd	r19, Z+11	; 0x0b
    a294:	82 17       	cp	r24, r18
    a296:	93 07       	cpc	r25, r19
    a298:	08 f0       	brcs	.+2      	; 0xa29c <udc_process_setup+0x16e>
    a29a:	f7 c1       	rjmp	.+1006   	; 0xa68a <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    a29c:	80 93 df 2a 	sts	0x2ADF, r24	; 0x802adf <udd_g_ctrlreq+0xa>
    a2a0:	90 93 e0 2a 	sts	0x2AE0, r25	; 0x802ae0 <udd_g_ctrlreq+0xb>
    a2a4:	f2 c1       	rjmp	.+996    	; 0xa68a <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    a2a6:	21 30       	cpi	r18, 0x01	; 1
    a2a8:	31 05       	cpc	r19, r1
    a2aa:	09 f0       	breq	.+2      	; 0xa2ae <udc_process_setup+0x180>
    a2ac:	94 c1       	rjmp	.+808    	; 0xa5d6 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    a2ae:	61 e0       	ldi	r22, 0x01	; 1
    a2b0:	70 e0       	ldi	r23, 0x00	; 0
    a2b2:	80 ec       	ldi	r24, 0xC0	; 192
    a2b4:	9a e2       	ldi	r25, 0x2A	; 42
    a2b6:	0e 94 cb 38 	call	0x7196	; 0x7196 <udd_set_setup_payload>
    a2ba:	e7 c1       	rjmp	.+974    	; 0xa68a <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    a2bc:	81 30       	cpi	r24, 0x01	; 1
    a2be:	e9 f5       	brne	.+122    	; 0xa33a <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    a2c0:	90 91 d6 2a 	lds	r25, 0x2AD6	; 0x802ad6 <udd_g_ctrlreq+0x1>
    a2c4:	9a 30       	cpi	r25, 0x0A	; 10
    a2c6:	c9 f5       	brne	.+114    	; 0xa33a <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    a2c8:	21 30       	cpi	r18, 0x01	; 1
    a2ca:	31 05       	cpc	r19, r1
    a2cc:	09 f0       	breq	.+2      	; 0xa2d0 <udc_process_setup+0x1a2>
    a2ce:	53 c1       	rjmp	.+678    	; 0xa576 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    a2d0:	80 91 c0 2a 	lds	r24, 0x2AC0	; 0x802ac0 <udc_num_configuration>
    a2d4:	88 23       	and	r24, r24
    a2d6:	09 f4       	brne	.+2      	; 0xa2da <udc_process_setup+0x1ac>
    a2d8:	4e c1       	rjmp	.+668    	; 0xa576 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    a2da:	c0 91 d9 2a 	lds	r28, 0x2AD9	; 0x802ad9 <udd_g_ctrlreq+0x4>
    a2de:	d0 91 da 2a 	lds	r29, 0x2ADA	; 0x802ada <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    a2e2:	00 91 be 2a 	lds	r16, 0x2ABE	; 0x802abe <udc_ptr_conf>
    a2e6:	10 91 bf 2a 	lds	r17, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    a2ea:	d8 01       	movw	r26, r16
    a2ec:	ed 91       	ld	r30, X+
    a2ee:	fc 91       	ld	r31, X
    a2f0:	84 81       	ldd	r24, Z+4	; 0x04
    a2f2:	c8 17       	cp	r28, r24
    a2f4:	08 f0       	brcs	.+2      	; 0xa2f8 <udc_process_setup+0x1ca>
    a2f6:	3f c1       	rjmp	.+638    	; 0xa576 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    a2f8:	60 e0       	ldi	r22, 0x00	; 0
    a2fa:	8c 2f       	mov	r24, r28
    a2fc:	0c de       	rcall	.-1000   	; 0x9f16 <udc_update_iface_desc>
    a2fe:	88 23       	and	r24, r24
    a300:	09 f4       	brne	.+2      	; 0xa304 <udc_process_setup+0x1d6>
    a302:	34 c1       	rjmp	.+616    	; 0xa56c <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    a304:	ce 01       	movw	r24, r28
    a306:	99 27       	eor	r25, r25
    a308:	88 0f       	add	r24, r24
    a30a:	99 1f       	adc	r25, r25
    a30c:	d8 01       	movw	r26, r16
    a30e:	12 96       	adiw	r26, 0x02	; 2
    a310:	ed 91       	ld	r30, X+
    a312:	fc 91       	ld	r31, X
    a314:	13 97       	sbiw	r26, 0x03	; 3
    a316:	e8 0f       	add	r30, r24
    a318:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    a31a:	01 90       	ld	r0, Z+
    a31c:	f0 81       	ld	r31, Z
    a31e:	e0 2d       	mov	r30, r0
    a320:	86 81       	ldd	r24, Z+6	; 0x06
    a322:	97 81       	ldd	r25, Z+7	; 0x07
    a324:	fc 01       	movw	r30, r24
    a326:	19 95       	eicall
    a328:	80 93 c2 2a 	sts	0x2AC2, r24	; 0x802ac2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    a32c:	61 e0       	ldi	r22, 0x01	; 1
    a32e:	70 e0       	ldi	r23, 0x00	; 0
    a330:	82 ec       	ldi	r24, 0xC2	; 194
    a332:	9a e2       	ldi	r25, 0x2A	; 42
    a334:	0e 94 cb 38 	call	0x7196	; 0x7196 <udd_set_setup_payload>
    a338:	a8 c1       	rjmp	.+848    	; 0xa68a <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    a33a:	82 30       	cpi	r24, 0x02	; 2
    a33c:	09 f0       	breq	.+2      	; 0xa340 <udc_process_setup+0x212>
    a33e:	16 c1       	rjmp	.+556    	; 0xa56c <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    a340:	80 91 d6 2a 	lds	r24, 0x2AD6	; 0x802ad6 <udd_g_ctrlreq+0x1>
    a344:	81 11       	cpse	r24, r1
    a346:	0b c1       	rjmp	.+534    	; 0xa55e <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    a348:	22 30       	cpi	r18, 0x02	; 2
    a34a:	31 05       	cpc	r19, r1
    a34c:	09 f0       	breq	.+2      	; 0xa350 <udc_process_setup+0x222>
    a34e:	43 c1       	rjmp	.+646    	; 0xa5d6 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    a350:	80 91 d9 2a 	lds	r24, 0x2AD9	; 0x802ad9 <udd_g_ctrlreq+0x4>
    a354:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <udd_ep_is_halted>
    a358:	90 e0       	ldi	r25, 0x00	; 0
    a35a:	80 93 ba 2a 	sts	0x2ABA, r24	; 0x802aba <udc_ep_status.4757>
    a35e:	90 93 bb 2a 	sts	0x2ABB, r25	; 0x802abb <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    a362:	62 e0       	ldi	r22, 0x02	; 2
    a364:	70 e0       	ldi	r23, 0x00	; 0
    a366:	8a eb       	ldi	r24, 0xBA	; 186
    a368:	9a e2       	ldi	r25, 0x2A	; 42
    a36a:	0e 94 cb 38 	call	0x7196	; 0x7196 <udd_set_setup_payload>
    a36e:	8d c1       	rjmp	.+794    	; 0xa68a <udc_process_setup+0x55c>
    a370:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    a372:	09 f0       	breq	.+2      	; 0xa376 <udc_process_setup+0x248>
    a374:	a0 c0       	rjmp	.+320    	; 0xa4b6 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    a376:	90 91 d6 2a 	lds	r25, 0x2AD6	; 0x802ad6 <udd_g_ctrlreq+0x1>
    a37a:	93 30       	cpi	r25, 0x03	; 3
    a37c:	91 f1       	breq	.+100    	; 0xa3e2 <udc_process_setup+0x2b4>
    a37e:	18 f4       	brcc	.+6      	; 0xa386 <udc_process_setup+0x258>
    a380:	91 30       	cpi	r25, 0x01	; 1
    a382:	a9 f0       	breq	.+42     	; 0xa3ae <udc_process_setup+0x280>
    a384:	98 c0       	rjmp	.+304    	; 0xa4b6 <udc_process_setup+0x388>
    a386:	95 30       	cpi	r25, 0x05	; 5
    a388:	21 f0       	breq	.+8      	; 0xa392 <udc_process_setup+0x264>
    a38a:	99 30       	cpi	r25, 0x09	; 9
    a38c:	09 f4       	brne	.+2      	; 0xa390 <udc_process_setup+0x262>
    a38e:	43 c0       	rjmp	.+134    	; 0xa416 <udc_process_setup+0x2e8>
    a390:	92 c0       	rjmp	.+292    	; 0xa4b6 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    a392:	80 91 db 2a 	lds	r24, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    a396:	90 91 dc 2a 	lds	r25, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    a39a:	89 2b       	or	r24, r25
    a39c:	09 f0       	breq	.+2      	; 0xa3a0 <udc_process_setup+0x272>
    a39e:	1b c1       	rjmp	.+566    	; 0xa5d6 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    a3a0:	85 e8       	ldi	r24, 0x85	; 133
    a3a2:	9f e4       	ldi	r25, 0x4F	; 79
    a3a4:	80 93 e1 2a 	sts	0x2AE1, r24	; 0x802ae1 <udd_g_ctrlreq+0xc>
    a3a8:	90 93 e2 2a 	sts	0x2AE2, r25	; 0x802ae2 <udd_g_ctrlreq+0xd>
    a3ac:	6e c1       	rjmp	.+732    	; 0xa68a <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    a3ae:	80 91 db 2a 	lds	r24, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    a3b2:	90 91 dc 2a 	lds	r25, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    a3b6:	89 2b       	or	r24, r25
    a3b8:	09 f0       	breq	.+2      	; 0xa3bc <udc_process_setup+0x28e>
    a3ba:	0d c1       	rjmp	.+538    	; 0xa5d6 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    a3bc:	80 91 d7 2a 	lds	r24, 0x2AD7	; 0x802ad7 <udd_g_ctrlreq+0x2>
    a3c0:	90 91 d8 2a 	lds	r25, 0x2AD8	; 0x802ad8 <udd_g_ctrlreq+0x3>
    a3c4:	01 97       	sbiw	r24, 0x01	; 1
    a3c6:	09 f0       	breq	.+2      	; 0xa3ca <udc_process_setup+0x29c>
    a3c8:	06 c1       	rjmp	.+524    	; 0xa5d6 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    a3ca:	80 91 c4 2a 	lds	r24, 0x2AC4	; 0x802ac4 <udc_device_status>
    a3ce:	90 91 c5 2a 	lds	r25, 0x2AC5	; 0x802ac5 <udc_device_status+0x1>
    a3d2:	8d 7f       	andi	r24, 0xFD	; 253
    a3d4:	80 93 c4 2a 	sts	0x2AC4, r24	; 0x802ac4 <udc_device_status>
    a3d8:	90 93 c5 2a 	sts	0x2AC5, r25	; 0x802ac5 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    a3dc:	0e 94 62 41 	call	0x82c4	; 0x82c4 <usb_callback_remotewakeup_disable>
    a3e0:	54 c1       	rjmp	.+680    	; 0xa68a <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    a3e2:	80 91 db 2a 	lds	r24, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    a3e6:	90 91 dc 2a 	lds	r25, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    a3ea:	89 2b       	or	r24, r25
    a3ec:	09 f0       	breq	.+2      	; 0xa3f0 <udc_process_setup+0x2c2>
    a3ee:	f3 c0       	rjmp	.+486    	; 0xa5d6 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    a3f0:	80 91 d7 2a 	lds	r24, 0x2AD7	; 0x802ad7 <udd_g_ctrlreq+0x2>
    a3f4:	90 91 d8 2a 	lds	r25, 0x2AD8	; 0x802ad8 <udd_g_ctrlreq+0x3>
    a3f8:	01 97       	sbiw	r24, 0x01	; 1
    a3fa:	09 f0       	breq	.+2      	; 0xa3fe <udc_process_setup+0x2d0>
    a3fc:	b2 c0       	rjmp	.+356    	; 0xa562 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    a3fe:	80 91 c4 2a 	lds	r24, 0x2AC4	; 0x802ac4 <udc_device_status>
    a402:	90 91 c5 2a 	lds	r25, 0x2AC5	; 0x802ac5 <udc_device_status+0x1>
    a406:	82 60       	ori	r24, 0x02	; 2
    a408:	80 93 c4 2a 	sts	0x2AC4, r24	; 0x802ac4 <udc_device_status>
    a40c:	90 93 c5 2a 	sts	0x2AC5, r25	; 0x802ac5 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    a410:	0e 94 61 41 	call	0x82c2	; 0x82c2 <usb_callback_remotewakeup_enable>
    a414:	3a c1       	rjmp	.+628    	; 0xa68a <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    a416:	80 91 db 2a 	lds	r24, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    a41a:	90 91 dc 2a 	lds	r25, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    a41e:	89 2b       	or	r24, r25
    a420:	09 f0       	breq	.+2      	; 0xa424 <udc_process_setup+0x2f6>
    a422:	d9 c0       	rjmp	.+434    	; 0xa5d6 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    a424:	0e 94 c0 38 	call	0x7180	; 0x7180 <udd_getaddress>
    a428:	88 23       	and	r24, r24
    a42a:	09 f4       	brne	.+2      	; 0xa42e <udc_process_setup+0x300>
    a42c:	9f c0       	rjmp	.+318    	; 0xa56c <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    a42e:	20 91 d7 2a 	lds	r18, 0x2AD7	; 0x802ad7 <udd_g_ctrlreq+0x2>
    a432:	30 91 d8 2a 	lds	r19, 0x2AD8	; 0x802ad8 <udd_g_ctrlreq+0x3>
    a436:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    a438:	e0 91 6d 20 	lds	r30, 0x206D	; 0x80206d <udc_config>
    a43c:	f0 91 6e 20 	lds	r31, 0x206E	; 0x80206e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    a440:	81 89       	ldd	r24, Z+17	; 0x11
    a442:	90 e0       	ldi	r25, 0x00	; 0
    a444:	82 17       	cp	r24, r18
    a446:	93 07       	cpc	r25, r19
    a448:	08 f4       	brcc	.+2      	; 0xa44c <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    a44a:	90 c0       	rjmp	.+288    	; 0xa56c <udc_process_setup+0x43e>
    a44c:	16 de       	rcall	.-980    	; 0xa07a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    a44e:	80 91 d7 2a 	lds	r24, 0x2AD7	; 0x802ad7 <udd_g_ctrlreq+0x2>
    a452:	90 91 d8 2a 	lds	r25, 0x2AD8	; 0x802ad8 <udd_g_ctrlreq+0x3>
    a456:	80 93 c0 2a 	sts	0x2AC0, r24	; 0x802ac0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    a45a:	88 23       	and	r24, r24
    a45c:	09 f4       	brne	.+2      	; 0xa460 <udc_process_setup+0x332>
    a45e:	15 c1       	rjmp	.+554    	; 0xa68a <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    a460:	99 27       	eor	r25, r25
    a462:	81 50       	subi	r24, 0x01	; 1
    a464:	90 4c       	sbci	r25, 0xC0	; 192
    a466:	88 0f       	add	r24, r24
    a468:	99 1f       	adc	r25, r25
    a46a:	88 0f       	add	r24, r24
    a46c:	99 1f       	adc	r25, r25
    a46e:	e0 91 6f 20 	lds	r30, 0x206F	; 0x80206f <udc_config+0x2>
    a472:	f0 91 70 20 	lds	r31, 0x2070	; 0x802070 <udc_config+0x3>
    a476:	e8 0f       	add	r30, r24
    a478:	f9 1f       	adc	r31, r25
    a47a:	e0 93 be 2a 	sts	0x2ABE, r30	; 0x802abe <udc_ptr_conf>
    a47e:	f0 93 bf 2a 	sts	0x2ABF, r31	; 0x802abf <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    a482:	01 90       	ld	r0, Z+
    a484:	f0 81       	ld	r31, Z
    a486:	e0 2d       	mov	r30, r0
    a488:	84 81       	ldd	r24, Z+4	; 0x04
    a48a:	88 23       	and	r24, r24
    a48c:	09 f4       	brne	.+2      	; 0xa490 <udc_process_setup+0x362>
    a48e:	fd c0       	rjmp	.+506    	; 0xa68a <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    a490:	c0 e0       	ldi	r28, 0x00	; 0
    a492:	60 e0       	ldi	r22, 0x00	; 0
    a494:	8c 2f       	mov	r24, r28
    a496:	bb dd       	rcall	.-1162   	; 0xa00e <udc_iface_enable>
    a498:	88 23       	and	r24, r24
    a49a:	09 f4       	brne	.+2      	; 0xa49e <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    a49c:	67 c0       	rjmp	.+206    	; 0xa56c <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    a49e:	cf 5f       	subi	r28, 0xFF	; 255
    a4a0:	e0 91 be 2a 	lds	r30, 0x2ABE	; 0x802abe <udc_ptr_conf>
    a4a4:	f0 91 bf 2a 	lds	r31, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    a4a8:	01 90       	ld	r0, Z+
    a4aa:	f0 81       	ld	r31, Z
    a4ac:	e0 2d       	mov	r30, r0
    a4ae:	84 81       	ldd	r24, Z+4	; 0x04
    a4b0:	c8 17       	cp	r28, r24
    a4b2:	78 f3       	brcs	.-34     	; 0xa492 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    a4b4:	ea c0       	rjmp	.+468    	; 0xa68a <udc_process_setup+0x55c>
    a4b6:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    a4b8:	e9 f4       	brne	.+58     	; 0xa4f4 <udc_process_setup+0x3c6>
    a4ba:	90 91 d6 2a 	lds	r25, 0x2AD6	; 0x802ad6 <udd_g_ctrlreq+0x1>
    a4be:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    a4c0:	c9 f4       	brne	.+50     	; 0xa4f4 <udc_process_setup+0x3c6>
    a4c2:	80 91 db 2a 	lds	r24, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    a4c6:	90 91 dc 2a 	lds	r25, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    a4ca:	89 2b       	or	r24, r25
    a4cc:	09 f0       	breq	.+2      	; 0xa4d0 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    a4ce:	53 c0       	rjmp	.+166    	; 0xa576 <udc_process_setup+0x448>
    a4d0:	80 91 c0 2a 	lds	r24, 0x2AC0	; 0x802ac0 <udc_num_configuration>
    a4d4:	88 23       	and	r24, r24
    a4d6:	09 f4       	brne	.+2      	; 0xa4da <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    a4d8:	4e c0       	rjmp	.+156    	; 0xa576 <udc_process_setup+0x448>
    a4da:	e5 ed       	ldi	r30, 0xD5	; 213
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    a4dc:	fa e2       	ldi	r31, 0x2A	; 42

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    a4de:	c4 81       	ldd	r28, Z+4	; 0x04
    a4e0:	d2 81       	ldd	r29, Z+2	; 0x02
    a4e2:	8c 2f       	mov	r24, r28
    a4e4:	52 dd       	rcall	.-1372   	; 0x9f8a <udc_iface_disable>
    a4e6:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    a4e8:	09 f4       	brne	.+2      	; 0xa4ec <udc_process_setup+0x3be>
    a4ea:	40 c0       	rjmp	.+128    	; 0xa56c <udc_process_setup+0x43e>
    a4ec:	6d 2f       	mov	r22, r29
    a4ee:	8c 2f       	mov	r24, r28
    a4f0:	8e dd       	rcall	.-1252   	; 0xa00e <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    a4f2:	3a c0       	rjmp	.+116    	; 0xa568 <udc_process_setup+0x43a>
    a4f4:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    a4f6:	d1 f5       	brne	.+116    	; 0xa56c <udc_process_setup+0x43e>
    a4f8:	80 91 d6 2a 	lds	r24, 0x2AD6	; 0x802ad6 <udd_g_ctrlreq+0x1>
    a4fc:	81 30       	cpi	r24, 0x01	; 1
    a4fe:	19 f0       	breq	.+6      	; 0xa506 <udc_process_setup+0x3d8>
    a500:	83 30       	cpi	r24, 0x03	; 3
    a502:	a1 f0       	breq	.+40     	; 0xa52c <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    a504:	30 c0       	rjmp	.+96     	; 0xa566 <udc_process_setup+0x438>
    a506:	80 91 db 2a 	lds	r24, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    a50a:	90 91 dc 2a 	lds	r25, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    a50e:	89 2b       	or	r24, r25
    a510:	09 f0       	breq	.+2      	; 0xa514 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    a512:	61 c0       	rjmp	.+194    	; 0xa5d6 <udc_process_setup+0x4a8>
    a514:	80 91 d7 2a 	lds	r24, 0x2AD7	; 0x802ad7 <udd_g_ctrlreq+0x2>
    a518:	90 91 d8 2a 	lds	r25, 0x2AD8	; 0x802ad8 <udd_g_ctrlreq+0x3>
    a51c:	89 2b       	or	r24, r25
    a51e:	09 f0       	breq	.+2      	; 0xa522 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    a520:	5a c0       	rjmp	.+180    	; 0xa5d6 <udc_process_setup+0x4a8>
    a522:	80 91 d9 2a 	lds	r24, 0x2AD9	; 0x802ad9 <udd_g_ctrlreq+0x4>
    a526:	0e 94 75 39 	call	0x72ea	; 0x72ea <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    a52a:	1e c0       	rjmp	.+60     	; 0xa568 <udc_process_setup+0x43a>
    a52c:	80 91 db 2a 	lds	r24, 0x2ADB	; 0x802adb <udd_g_ctrlreq+0x6>
    a530:	90 91 dc 2a 	lds	r25, 0x2ADC	; 0x802adc <udd_g_ctrlreq+0x7>
    a534:	89 2b       	or	r24, r25
    a536:	09 f0       	breq	.+2      	; 0xa53a <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    a538:	4e c0       	rjmp	.+156    	; 0xa5d6 <udc_process_setup+0x4a8>
    a53a:	80 91 d7 2a 	lds	r24, 0x2AD7	; 0x802ad7 <udd_g_ctrlreq+0x2>
    a53e:	90 91 d8 2a 	lds	r25, 0x2AD8	; 0x802ad8 <udd_g_ctrlreq+0x3>
    a542:	89 2b       	or	r24, r25
    a544:	09 f0       	breq	.+2      	; 0xa548 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    a546:	47 c0       	rjmp	.+142    	; 0xa5d6 <udc_process_setup+0x4a8>
    a548:	c5 ed       	ldi	r28, 0xD5	; 213
    a54a:	da e2       	ldi	r29, 0x2A	; 42
    a54c:	8c 81       	ldd	r24, Y+4	; 0x04
    a54e:	0e 94 77 3a 	call	0x74ee	; 0x74ee <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    a552:	8c 81       	ldd	r24, Y+4	; 0x04
    a554:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    a558:	07 c0       	rjmp	.+14     	; 0xa568 <udc_process_setup+0x43a>
    a55a:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    a55c:	05 c0       	rjmp	.+10     	; 0xa568 <udc_process_setup+0x43a>
    a55e:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    a560:	03 c0       	rjmp	.+6      	; 0xa568 <udc_process_setup+0x43a>
    a562:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    a564:	01 c0       	rjmp	.+2      	; 0xa568 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    a566:	80 e0       	ldi	r24, 0x00	; 0
    a568:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    a56a:	90 c0       	rjmp	.+288    	; 0xa68c <udc_process_setup+0x55e>
    a56c:	80 91 d5 2a 	lds	r24, 0x2AD5	; 0x802ad5 <udd_g_ctrlreq>
    a570:	8f 71       	andi	r24, 0x1F	; 31
    a572:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    a574:	81 f5       	brne	.+96     	; 0xa5d6 <udc_process_setup+0x4a8>
    a576:	80 91 c0 2a 	lds	r24, 0x2AC0	; 0x802ac0 <udc_num_configuration>
    a57a:	88 23       	and	r24, r24
    a57c:	09 f4       	brne	.+2      	; 0xa580 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    a57e:	71 c0       	rjmp	.+226    	; 0xa662 <udc_process_setup+0x534>
    a580:	00 91 d9 2a 	lds	r16, 0x2AD9	; 0x802ad9 <udd_g_ctrlreq+0x4>
    a584:	10 91 da 2a 	lds	r17, 0x2ADA	; 0x802ada <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    a588:	c0 91 be 2a 	lds	r28, 0x2ABE	; 0x802abe <udc_ptr_conf>
    a58c:	d0 91 bf 2a 	lds	r29, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    a590:	e8 81       	ld	r30, Y
    a592:	f9 81       	ldd	r31, Y+1	; 0x01
    a594:	84 81       	ldd	r24, Z+4	; 0x04
    a596:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    a598:	08 f0       	brcs	.+2      	; 0xa59c <udc_process_setup+0x46e>
    a59a:	65 c0       	rjmp	.+202    	; 0xa666 <udc_process_setup+0x538>
    a59c:	60 e0       	ldi	r22, 0x00	; 0
    a59e:	80 2f       	mov	r24, r16
    a5a0:	ba dc       	rcall	.-1676   	; 0x9f16 <udc_update_iface_desc>
    a5a2:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    a5a4:	c1 f0       	breq	.+48     	; 0xa5d6 <udc_process_setup+0x4a8>
    a5a6:	f8 01       	movw	r30, r16
    a5a8:	ff 27       	eor	r31, r31
    a5aa:	cf 01       	movw	r24, r30
    a5ac:	88 0f       	add	r24, r24
    a5ae:	99 1f       	adc	r25, r25
    a5b0:	ea 81       	ldd	r30, Y+2	; 0x02
    a5b2:	fb 81       	ldd	r31, Y+3	; 0x03
    a5b4:	e8 0f       	add	r30, r24
    a5b6:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    a5b8:	c0 81       	ld	r28, Z
    a5ba:	d1 81       	ldd	r29, Z+1	; 0x01
    a5bc:	ee 81       	ldd	r30, Y+6	; 0x06
    a5be:	ff 81       	ldd	r31, Y+7	; 0x07
    a5c0:	19 95       	eicall
    a5c2:	68 2f       	mov	r22, r24
    a5c4:	80 2f       	mov	r24, r16
    a5c6:	a7 dc       	rcall	.-1714   	; 0x9f16 <udc_update_iface_desc>
    a5c8:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    a5ca:	29 f0       	breq	.+10     	; 0xa5d6 <udc_process_setup+0x4a8>
    a5cc:	ec 81       	ldd	r30, Y+4	; 0x04
    a5ce:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    a5d0:	19 95       	eicall
    a5d2:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    a5d4:	5b c0       	rjmp	.+182    	; 0xa68c <udc_process_setup+0x55e>
    a5d6:	80 91 d5 2a 	lds	r24, 0x2AD5	; 0x802ad5 <udd_g_ctrlreq>
    a5da:	8f 71       	andi	r24, 0x1F	; 31
    a5dc:	82 30       	cpi	r24, 0x02	; 2
    a5de:	09 f0       	breq	.+2      	; 0xa5e2 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    a5e0:	44 c0       	rjmp	.+136    	; 0xa66a <udc_process_setup+0x53c>
    a5e2:	80 91 c0 2a 	lds	r24, 0x2AC0	; 0x802ac0 <udc_num_configuration>
    a5e6:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    a5e8:	b1 f1       	breq	.+108    	; 0xa656 <udc_process_setup+0x528>
    a5ea:	a0 91 be 2a 	lds	r26, 0x2ABE	; 0x802abe <udc_ptr_conf>
    a5ee:	b0 91 bf 2a 	lds	r27, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    a5f2:	ed 91       	ld	r30, X+
    a5f4:	fc 91       	ld	r31, X
    a5f6:	11 97       	sbiw	r26, 0x01	; 1
    a5f8:	84 81       	ldd	r24, Z+4	; 0x04
    a5fa:	88 23       	and	r24, r24
    a5fc:	71 f1       	breq	.+92     	; 0xa65a <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    a5fe:	c0 e0       	ldi	r28, 0x00	; 0
    a600:	ec 2f       	mov	r30, r28
    a602:	f0 e0       	ldi	r31, 0x00	; 0
    a604:	ee 0f       	add	r30, r30
    a606:	ff 1f       	adc	r31, r31
    a608:	12 96       	adiw	r26, 0x02	; 2
    a60a:	8d 91       	ld	r24, X+
    a60c:	9c 91       	ld	r25, X
    a60e:	13 97       	sbiw	r26, 0x03	; 3
    a610:	e8 0f       	add	r30, r24
    a612:	f9 1f       	adc	r31, r25
    a614:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    a616:	11 81       	ldd	r17, Z+1	; 0x01
    a618:	d8 01       	movw	r26, r16
    a61a:	16 96       	adiw	r26, 0x06	; 6
    a61c:	ed 91       	ld	r30, X+
    a61e:	fc 91       	ld	r31, X
    a620:	17 97       	sbiw	r26, 0x07	; 7
    a622:	19 95       	eicall
    a624:	68 2f       	mov	r22, r24
    a626:	8c 2f       	mov	r24, r28
    a628:	76 dc       	rcall	.-1812   	; 0x9f16 <udc_update_iface_desc>
    a62a:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    a62c:	79 f1       	breq	.+94     	; 0xa68c <udc_process_setup+0x55e>
    a62e:	d8 01       	movw	r26, r16
    a630:	14 96       	adiw	r26, 0x04	; 4
    a632:	ed 91       	ld	r30, X+
    a634:	fc 91       	ld	r31, X
    a636:	15 97       	sbiw	r26, 0x05	; 5
    a638:	19 95       	eicall
    a63a:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    a63c:	27 c0       	rjmp	.+78     	; 0xa68c <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    a63e:	cf 5f       	subi	r28, 0xFF	; 255
    a640:	a0 91 be 2a 	lds	r26, 0x2ABE	; 0x802abe <udc_ptr_conf>
    a644:	b0 91 bf 2a 	lds	r27, 0x2ABF	; 0x802abf <udc_ptr_conf+0x1>
    a648:	ed 91       	ld	r30, X+
    a64a:	fc 91       	ld	r31, X
    a64c:	11 97       	sbiw	r26, 0x01	; 1
    a64e:	94 81       	ldd	r25, Z+4	; 0x04
    a650:	c9 17       	cp	r28, r25
    a652:	b0 f2       	brcs	.-84     	; 0xa600 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    a654:	1b c0       	rjmp	.+54     	; 0xa68c <udc_process_setup+0x55e>
    a656:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    a658:	19 c0       	rjmp	.+50     	; 0xa68c <udc_process_setup+0x55e>
    a65a:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    a65c:	17 c0       	rjmp	.+46     	; 0xa68c <udc_process_setup+0x55e>
    a65e:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    a660:	15 c0       	rjmp	.+42     	; 0xa68c <udc_process_setup+0x55e>
    a662:	80 e0       	ldi	r24, 0x00	; 0
    a664:	13 c0       	rjmp	.+38     	; 0xa68c <udc_process_setup+0x55e>
    a666:	80 e0       	ldi	r24, 0x00	; 0
    a668:	11 c0       	rjmp	.+34     	; 0xa68c <udc_process_setup+0x55e>
    a66a:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    a66c:	0f c0       	rjmp	.+30     	; 0xa68c <udc_process_setup+0x55e>
    a66e:	98 2f       	mov	r25, r24
    a670:	90 76       	andi	r25, 0x60	; 96
    a672:	09 f0       	breq	.+2      	; 0xa676 <udc_process_setup+0x548>
    a674:	7b cf       	rjmp	.-266    	; 0xa56c <udc_process_setup+0x43e>
    a676:	74 cd       	rjmp	.-1304   	; 0xa160 <udc_process_setup+0x32>
    a678:	98 2f       	mov	r25, r24
    a67a:	90 76       	andi	r25, 0x60	; 96
    a67c:	09 f0       	breq	.+2      	; 0xa680 <udc_process_setup+0x552>
    a67e:	76 cf       	rjmp	.-276    	; 0xa56c <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    a680:	77 ce       	rjmp	.-786    	; 0xa370 <udc_process_setup+0x242>
		str = udc_string_product_name;
    a682:	3c e0       	ldi	r19, 0x0C	; 12
    a684:	e4 ef       	ldi	r30, 0xF4	; 244
    a686:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    a688:	eb cd       	rjmp	.-1066   	; 0xa260 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    a68a:	81 e0       	ldi	r24, 0x01	; 1
    a68c:	df 91       	pop	r29
    a68e:	cf 91       	pop	r28
    a690:	1f 91       	pop	r17
    a692:	0f 91       	pop	r16
    a694:	08 95       	ret

0000a696 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    a696:	cf 93       	push	r28
    a698:	df 93       	push	r29
    a69a:	1f 92       	push	r1
    a69c:	cd b7       	in	r28, 0x3d	; 61
    a69e:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    a6a0:	80 91 ef 2a 	lds	r24, 0x2AEF	; 0x802aef <stdio_base>
    a6a4:	90 91 f0 2a 	lds	r25, 0x2AF0	; 0x802af0 <stdio_base+0x1>
    a6a8:	e0 91 eb 2a 	lds	r30, 0x2AEB	; 0x802aeb <ptr_get>
    a6ac:	f0 91 ec 2a 	lds	r31, 0x2AEC	; 0x802aec <ptr_get+0x1>
    a6b0:	be 01       	movw	r22, r28
    a6b2:	6f 5f       	subi	r22, 0xFF	; 255
    a6b4:	7f 4f       	sbci	r23, 0xFF	; 255
    a6b6:	19 95       	eicall
	return c;
    a6b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    a6ba:	08 2e       	mov	r0, r24
    a6bc:	00 0c       	add	r0, r0
    a6be:	99 0b       	sbc	r25, r25
    a6c0:	0f 90       	pop	r0
    a6c2:	df 91       	pop	r29
    a6c4:	cf 91       	pop	r28
    a6c6:	08 95       	ret

0000a6c8 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    a6c8:	80 91 c6 2a 	lds	r24, 0x2AC6	; 0x802ac6 <stdio_usb_interface_enable>
    a6cc:	88 23       	and	r24, r24
    a6ce:	81 f0       	breq	.+32     	; 0xa6f0 <stdio_usb_putchar+0x28>
    a6d0:	86 2f       	mov	r24, r22
    a6d2:	08 2e       	mov	r0, r24
    a6d4:	00 0c       	add	r0, r0
    a6d6:	99 0b       	sbc	r25, r25
    a6d8:	df db       	rcall	.-2114   	; 0x9e98 <udi_cdc_putc>
    a6da:	21 e0       	ldi	r18, 0x01	; 1
    a6dc:	30 e0       	ldi	r19, 0x00	; 0
    a6de:	89 2b       	or	r24, r25
    a6e0:	11 f0       	breq	.+4      	; 0xa6e6 <stdio_usb_putchar+0x1e>
    a6e2:	20 e0       	ldi	r18, 0x00	; 0
    a6e4:	30 e0       	ldi	r19, 0x00	; 0
    a6e6:	88 27       	eor	r24, r24
    a6e8:	99 27       	eor	r25, r25
    a6ea:	82 1b       	sub	r24, r18
    a6ec:	93 0b       	sbc	r25, r19
    a6ee:	08 95       	ret
    a6f0:	80 e0       	ldi	r24, 0x00	; 0
    a6f2:	90 e0       	ldi	r25, 0x00	; 0
    a6f4:	08 95       	ret

0000a6f6 <stdio_usb_getchar>:
    a6f6:	cf 93       	push	r28
    a6f8:	df 93       	push	r29
    a6fa:	80 91 c6 2a 	lds	r24, 0x2AC6	; 0x802ac6 <stdio_usb_interface_enable>
    a6fe:	81 11       	cpse	r24, r1
    a700:	03 c0       	rjmp	.+6      	; 0xa708 <stdio_usb_getchar+0x12>
    a702:	fb 01       	movw	r30, r22
    a704:	10 82       	st	Z, r1
    a706:	03 c0       	rjmp	.+6      	; 0xa70e <stdio_usb_getchar+0x18>
    a708:	eb 01       	movw	r28, r22
    a70a:	3e db       	rcall	.-2436   	; 0x9d88 <udi_cdc_getc>
    a70c:	88 83       	st	Y, r24
    a70e:	df 91       	pop	r29
    a710:	cf 91       	pop	r28
    a712:	08 95       	ret

0000a714 <stdio_usb_enable>:
    a714:	81 e0       	ldi	r24, 0x01	; 1
    a716:	80 93 c6 2a 	sts	0x2AC6, r24	; 0x802ac6 <stdio_usb_interface_enable>
    a71a:	08 95       	ret

0000a71c <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    a71c:	10 92 ef 2a 	sts	0x2AEF, r1	; 0x802aef <stdio_base>
    a720:	10 92 f0 2a 	sts	0x2AF0, r1	; 0x802af0 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    a724:	84 e6       	ldi	r24, 0x64	; 100
    a726:	93 e5       	ldi	r25, 0x53	; 83
    a728:	80 93 ed 2a 	sts	0x2AED, r24	; 0x802aed <ptr_put>
    a72c:	90 93 ee 2a 	sts	0x2AEE, r25	; 0x802aee <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    a730:	8b e7       	ldi	r24, 0x7B	; 123
    a732:	93 e5       	ldi	r25, 0x53	; 83
    a734:	80 93 eb 2a 	sts	0x2AEB, r24	; 0x802aeb <ptr_get>
    a738:	90 93 ec 2a 	sts	0x2AEC, r25	; 0x802aec <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    a73c:	9b dc       	rcall	.-1738   	; 0xa074 <udc_start>
    a73e:	6b e4       	ldi	r22, 0x4B	; 75
    a740:	73 e5       	ldi	r23, 0x53	; 83
    a742:	85 ea       	ldi	r24, 0xA5	; 165
    a744:	93 e5       	ldi	r25, 0x53	; 83
    a746:	ac c4       	rjmp	.+2392   	; 0xb0a0 <fdevopen>
    a748:	08 95       	ret

0000a74a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    a74a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    a74c:	80 91 ef 2a 	lds	r24, 0x2AEF	; 0x802aef <stdio_base>
    a750:	90 91 f0 2a 	lds	r25, 0x2AF0	; 0x802af0 <stdio_base+0x1>
    a754:	e0 91 ed 2a 	lds	r30, 0x2AED	; 0x802aed <ptr_put>
    a758:	f0 91 ee 2a 	lds	r31, 0x2AEE	; 0x802aee <ptr_put+0x1>
    a75c:	19 95       	eicall
    a75e:	99 23       	and	r25, r25
    a760:	1c f0       	brlt	.+6      	; 0xa768 <_write+0x1e>
		return -1;
	}
	return 1;
    a762:	81 e0       	ldi	r24, 0x01	; 1
    a764:	90 e0       	ldi	r25, 0x00	; 0
    a766:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    a768:	8f ef       	ldi	r24, 0xFF	; 255
    a76a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    a76c:	08 95       	ret

0000a76e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    a76e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    a772:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    a774:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    a776:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    a77a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    a77c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    a780:	08 95       	ret

0000a782 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    a782:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    a784:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    a786:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    a788:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    a78a:	60 83       	st	Z, r22
	ret                             // Return to caller
    a78c:	08 95       	ret

0000a78e <__mulsi3>:
    a78e:	db 01       	movw	r26, r22
    a790:	8f 93       	push	r24
    a792:	9f 93       	push	r25
    a794:	93 d0       	rcall	.+294    	; 0xa8bc <__muluhisi3>
    a796:	bf 91       	pop	r27
    a798:	af 91       	pop	r26
    a79a:	a2 9f       	mul	r26, r18
    a79c:	80 0d       	add	r24, r0
    a79e:	91 1d       	adc	r25, r1
    a7a0:	a3 9f       	mul	r26, r19
    a7a2:	90 0d       	add	r25, r0
    a7a4:	b2 9f       	mul	r27, r18
    a7a6:	90 0d       	add	r25, r0
    a7a8:	11 24       	eor	r1, r1
    a7aa:	08 95       	ret

0000a7ac <__udivmodhi4>:
    a7ac:	aa 1b       	sub	r26, r26
    a7ae:	bb 1b       	sub	r27, r27
    a7b0:	51 e1       	ldi	r21, 0x11	; 17
    a7b2:	07 c0       	rjmp	.+14     	; 0xa7c2 <__udivmodhi4_ep>

0000a7b4 <__udivmodhi4_loop>:
    a7b4:	aa 1f       	adc	r26, r26
    a7b6:	bb 1f       	adc	r27, r27
    a7b8:	a6 17       	cp	r26, r22
    a7ba:	b7 07       	cpc	r27, r23
    a7bc:	10 f0       	brcs	.+4      	; 0xa7c2 <__udivmodhi4_ep>
    a7be:	a6 1b       	sub	r26, r22
    a7c0:	b7 0b       	sbc	r27, r23

0000a7c2 <__udivmodhi4_ep>:
    a7c2:	88 1f       	adc	r24, r24
    a7c4:	99 1f       	adc	r25, r25
    a7c6:	5a 95       	dec	r21
    a7c8:	a9 f7       	brne	.-22     	; 0xa7b4 <__udivmodhi4_loop>
    a7ca:	80 95       	com	r24
    a7cc:	90 95       	com	r25
    a7ce:	bc 01       	movw	r22, r24
    a7d0:	cd 01       	movw	r24, r26
    a7d2:	08 95       	ret

0000a7d4 <__divmodhi4>:
    a7d4:	97 fb       	bst	r25, 7
    a7d6:	07 2e       	mov	r0, r23
    a7d8:	16 f4       	brtc	.+4      	; 0xa7de <__divmodhi4+0xa>
    a7da:	00 94       	com	r0
    a7dc:	06 d0       	rcall	.+12     	; 0xa7ea <__divmodhi4_neg1>
    a7de:	77 fd       	sbrc	r23, 7
    a7e0:	08 d0       	rcall	.+16     	; 0xa7f2 <__divmodhi4_neg2>
    a7e2:	e4 df       	rcall	.-56     	; 0xa7ac <__udivmodhi4>
    a7e4:	07 fc       	sbrc	r0, 7
    a7e6:	05 d0       	rcall	.+10     	; 0xa7f2 <__divmodhi4_neg2>
    a7e8:	3e f4       	brtc	.+14     	; 0xa7f8 <__divmodhi4_exit>

0000a7ea <__divmodhi4_neg1>:
    a7ea:	90 95       	com	r25
    a7ec:	81 95       	neg	r24
    a7ee:	9f 4f       	sbci	r25, 0xFF	; 255
    a7f0:	08 95       	ret

0000a7f2 <__divmodhi4_neg2>:
    a7f2:	70 95       	com	r23
    a7f4:	61 95       	neg	r22
    a7f6:	7f 4f       	sbci	r23, 0xFF	; 255

0000a7f8 <__divmodhi4_exit>:
    a7f8:	08 95       	ret

0000a7fa <__udivmodsi4>:
    a7fa:	a1 e2       	ldi	r26, 0x21	; 33
    a7fc:	1a 2e       	mov	r1, r26
    a7fe:	aa 1b       	sub	r26, r26
    a800:	bb 1b       	sub	r27, r27
    a802:	fd 01       	movw	r30, r26
    a804:	0d c0       	rjmp	.+26     	; 0xa820 <__udivmodsi4_ep>

0000a806 <__udivmodsi4_loop>:
    a806:	aa 1f       	adc	r26, r26
    a808:	bb 1f       	adc	r27, r27
    a80a:	ee 1f       	adc	r30, r30
    a80c:	ff 1f       	adc	r31, r31
    a80e:	a2 17       	cp	r26, r18
    a810:	b3 07       	cpc	r27, r19
    a812:	e4 07       	cpc	r30, r20
    a814:	f5 07       	cpc	r31, r21
    a816:	20 f0       	brcs	.+8      	; 0xa820 <__udivmodsi4_ep>
    a818:	a2 1b       	sub	r26, r18
    a81a:	b3 0b       	sbc	r27, r19
    a81c:	e4 0b       	sbc	r30, r20
    a81e:	f5 0b       	sbc	r31, r21

0000a820 <__udivmodsi4_ep>:
    a820:	66 1f       	adc	r22, r22
    a822:	77 1f       	adc	r23, r23
    a824:	88 1f       	adc	r24, r24
    a826:	99 1f       	adc	r25, r25
    a828:	1a 94       	dec	r1
    a82a:	69 f7       	brne	.-38     	; 0xa806 <__udivmodsi4_loop>
    a82c:	60 95       	com	r22
    a82e:	70 95       	com	r23
    a830:	80 95       	com	r24
    a832:	90 95       	com	r25
    a834:	9b 01       	movw	r18, r22
    a836:	ac 01       	movw	r20, r24
    a838:	bd 01       	movw	r22, r26
    a83a:	cf 01       	movw	r24, r30
    a83c:	08 95       	ret

0000a83e <__divmodsi4>:
    a83e:	05 2e       	mov	r0, r21
    a840:	97 fb       	bst	r25, 7
    a842:	16 f4       	brtc	.+4      	; 0xa848 <__divmodsi4+0xa>
    a844:	00 94       	com	r0
    a846:	0f d0       	rcall	.+30     	; 0xa866 <__negsi2>
    a848:	57 fd       	sbrc	r21, 7
    a84a:	05 d0       	rcall	.+10     	; 0xa856 <__divmodsi4_neg2>
    a84c:	d6 df       	rcall	.-84     	; 0xa7fa <__udivmodsi4>
    a84e:	07 fc       	sbrc	r0, 7
    a850:	02 d0       	rcall	.+4      	; 0xa856 <__divmodsi4_neg2>
    a852:	46 f4       	brtc	.+16     	; 0xa864 <__divmodsi4_exit>
    a854:	08 c0       	rjmp	.+16     	; 0xa866 <__negsi2>

0000a856 <__divmodsi4_neg2>:
    a856:	50 95       	com	r21
    a858:	40 95       	com	r20
    a85a:	30 95       	com	r19
    a85c:	21 95       	neg	r18
    a85e:	3f 4f       	sbci	r19, 0xFF	; 255
    a860:	4f 4f       	sbci	r20, 0xFF	; 255
    a862:	5f 4f       	sbci	r21, 0xFF	; 255

0000a864 <__divmodsi4_exit>:
    a864:	08 95       	ret

0000a866 <__negsi2>:
    a866:	90 95       	com	r25
    a868:	80 95       	com	r24
    a86a:	70 95       	com	r23
    a86c:	61 95       	neg	r22
    a86e:	7f 4f       	sbci	r23, 0xFF	; 255
    a870:	8f 4f       	sbci	r24, 0xFF	; 255
    a872:	9f 4f       	sbci	r25, 0xFF	; 255
    a874:	08 95       	ret

0000a876 <__tablejump2__>:
    a876:	ee 0f       	add	r30, r30
    a878:	ff 1f       	adc	r31, r31
    a87a:	88 1f       	adc	r24, r24
    a87c:	8b bf       	out	0x3b, r24	; 59
    a87e:	07 90       	elpm	r0, Z+
    a880:	f6 91       	elpm	r31, Z
    a882:	e0 2d       	mov	r30, r0
    a884:	19 94       	eijmp

0000a886 <__mulhisi3>:
    a886:	05 d0       	rcall	.+10     	; 0xa892 <__umulhisi3>
    a888:	33 23       	and	r19, r19
    a88a:	12 f4       	brpl	.+4      	; 0xa890 <__mulhisi3+0xa>
    a88c:	8a 1b       	sub	r24, r26
    a88e:	9b 0b       	sbc	r25, r27
    a890:	10 c0       	rjmp	.+32     	; 0xa8b2 <__usmulhisi3_tail>

0000a892 <__umulhisi3>:
    a892:	a2 9f       	mul	r26, r18
    a894:	b0 01       	movw	r22, r0
    a896:	b3 9f       	mul	r27, r19
    a898:	c0 01       	movw	r24, r0
    a89a:	a3 9f       	mul	r26, r19
    a89c:	70 0d       	add	r23, r0
    a89e:	81 1d       	adc	r24, r1
    a8a0:	11 24       	eor	r1, r1
    a8a2:	91 1d       	adc	r25, r1
    a8a4:	b2 9f       	mul	r27, r18
    a8a6:	70 0d       	add	r23, r0
    a8a8:	81 1d       	adc	r24, r1
    a8aa:	11 24       	eor	r1, r1
    a8ac:	91 1d       	adc	r25, r1
    a8ae:	08 95       	ret

0000a8b0 <__usmulhisi3>:
    a8b0:	f0 df       	rcall	.-32     	; 0xa892 <__umulhisi3>

0000a8b2 <__usmulhisi3_tail>:
    a8b2:	b7 ff       	sbrs	r27, 7
    a8b4:	08 95       	ret
    a8b6:	82 1b       	sub	r24, r18
    a8b8:	93 0b       	sbc	r25, r19
    a8ba:	08 95       	ret

0000a8bc <__muluhisi3>:
    a8bc:	ea df       	rcall	.-44     	; 0xa892 <__umulhisi3>
    a8be:	a5 9f       	mul	r26, r21
    a8c0:	90 0d       	add	r25, r0
    a8c2:	b4 9f       	mul	r27, r20
    a8c4:	90 0d       	add	r25, r0
    a8c6:	a4 9f       	mul	r26, r20
    a8c8:	80 0d       	add	r24, r0
    a8ca:	91 1d       	adc	r25, r1
    a8cc:	11 24       	eor	r1, r1
    a8ce:	08 95       	ret

0000a8d0 <__mulshisi3>:
    a8d0:	b7 ff       	sbrs	r27, 7
    a8d2:	f4 cf       	rjmp	.-24     	; 0xa8bc <__muluhisi3>

0000a8d4 <__mulohisi3>:
    a8d4:	f3 df       	rcall	.-26     	; 0xa8bc <__muluhisi3>
    a8d6:	82 1b       	sub	r24, r18
    a8d8:	93 0b       	sbc	r25, r19
    a8da:	08 95       	ret

0000a8dc <__muldi3>:
    a8dc:	df 93       	push	r29
    a8de:	cf 93       	push	r28
    a8e0:	1f 93       	push	r17
    a8e2:	0f 93       	push	r16
    a8e4:	9a 9d       	mul	r25, r10
    a8e6:	f0 2d       	mov	r31, r0
    a8e8:	21 9f       	mul	r18, r17
    a8ea:	f0 0d       	add	r31, r0
    a8ec:	8b 9d       	mul	r24, r11
    a8ee:	f0 0d       	add	r31, r0
    a8f0:	8a 9d       	mul	r24, r10
    a8f2:	e0 2d       	mov	r30, r0
    a8f4:	f1 0d       	add	r31, r1
    a8f6:	03 9f       	mul	r16, r19
    a8f8:	f0 0d       	add	r31, r0
    a8fa:	02 9f       	mul	r16, r18
    a8fc:	e0 0d       	add	r30, r0
    a8fe:	f1 1d       	adc	r31, r1
    a900:	4e 9d       	mul	r20, r14
    a902:	e0 0d       	add	r30, r0
    a904:	f1 1d       	adc	r31, r1
    a906:	5e 9d       	mul	r21, r14
    a908:	f0 0d       	add	r31, r0
    a90a:	4f 9d       	mul	r20, r15
    a90c:	f0 0d       	add	r31, r0
    a90e:	7f 93       	push	r23
    a910:	6f 93       	push	r22
    a912:	bf 92       	push	r11
    a914:	af 92       	push	r10
    a916:	5f 93       	push	r21
    a918:	4f 93       	push	r20
    a91a:	d5 01       	movw	r26, r10
    a91c:	ba df       	rcall	.-140    	; 0xa892 <__umulhisi3>
    a91e:	8b 01       	movw	r16, r22
    a920:	ac 01       	movw	r20, r24
    a922:	d7 01       	movw	r26, r14
    a924:	b6 df       	rcall	.-148    	; 0xa892 <__umulhisi3>
    a926:	eb 01       	movw	r28, r22
    a928:	e8 0f       	add	r30, r24
    a92a:	f9 1f       	adc	r31, r25
    a92c:	d6 01       	movw	r26, r12
    a92e:	1f d0       	rcall	.+62     	; 0xa96e <__muldi3_6>
    a930:	2f 91       	pop	r18
    a932:	3f 91       	pop	r19
    a934:	d6 01       	movw	r26, r12
    a936:	ad df       	rcall	.-166    	; 0xa892 <__umulhisi3>
    a938:	c6 0f       	add	r28, r22
    a93a:	d7 1f       	adc	r29, r23
    a93c:	e8 1f       	adc	r30, r24
    a93e:	f9 1f       	adc	r31, r25
    a940:	af 91       	pop	r26
    a942:	bf 91       	pop	r27
    a944:	14 d0       	rcall	.+40     	; 0xa96e <__muldi3_6>
    a946:	2f 91       	pop	r18
    a948:	3f 91       	pop	r19
    a94a:	a3 df       	rcall	.-186    	; 0xa892 <__umulhisi3>
    a94c:	c6 0f       	add	r28, r22
    a94e:	d7 1f       	adc	r29, r23
    a950:	e8 1f       	adc	r30, r24
    a952:	f9 1f       	adc	r31, r25
    a954:	d6 01       	movw	r26, r12
    a956:	9d df       	rcall	.-198    	; 0xa892 <__umulhisi3>
    a958:	e6 0f       	add	r30, r22
    a95a:	f7 1f       	adc	r31, r23
    a95c:	98 01       	movw	r18, r16
    a95e:	be 01       	movw	r22, r28
    a960:	cf 01       	movw	r24, r30
    a962:	11 24       	eor	r1, r1
    a964:	0f 91       	pop	r16
    a966:	1f 91       	pop	r17
    a968:	cf 91       	pop	r28
    a96a:	df 91       	pop	r29
    a96c:	08 95       	ret

0000a96e <__muldi3_6>:
    a96e:	91 df       	rcall	.-222    	; 0xa892 <__umulhisi3>
    a970:	46 0f       	add	r20, r22
    a972:	57 1f       	adc	r21, r23
    a974:	c8 1f       	adc	r28, r24
    a976:	d9 1f       	adc	r29, r25
    a978:	08 f4       	brcc	.+2      	; 0xa97c <__muldi3_6+0xe>
    a97a:	31 96       	adiw	r30, 0x01	; 1
    a97c:	08 95       	ret

0000a97e <__moddi3>:
    a97e:	68 94       	set
    a980:	01 c0       	rjmp	.+2      	; 0xa984 <__divdi3_moddi3>

0000a982 <__divdi3>:
    a982:	e8 94       	clt

0000a984 <__divdi3_moddi3>:
    a984:	f9 2f       	mov	r31, r25
    a986:	f1 2b       	or	r31, r17
    a988:	0a f0       	brmi	.+2      	; 0xa98c <__divdi3_moddi3+0x8>
    a98a:	27 c0       	rjmp	.+78     	; 0xa9da <__udivdi3_umoddi3>
    a98c:	a0 e0       	ldi	r26, 0x00	; 0
    a98e:	b0 e0       	ldi	r27, 0x00	; 0
    a990:	eb ec       	ldi	r30, 0xCB	; 203
    a992:	f4 e5       	ldi	r31, 0x54	; 84
    a994:	93 c0       	rjmp	.+294    	; 0xaabc <__prologue_saves__+0xc>
    a996:	09 2e       	mov	r0, r25
    a998:	05 94       	asr	r0
    a99a:	1a f4       	brpl	.+6      	; 0xa9a2 <__divdi3_moddi3+0x1e>
    a99c:	79 d0       	rcall	.+242    	; 0xaa90 <__negdi2>
    a99e:	11 23       	and	r17, r17
    a9a0:	92 f4       	brpl	.+36     	; 0xa9c6 <__divdi3_moddi3+0x42>
    a9a2:	f0 e8       	ldi	r31, 0x80	; 128
    a9a4:	0f 26       	eor	r0, r31
    a9a6:	ff ef       	ldi	r31, 0xFF	; 255
    a9a8:	e0 94       	com	r14
    a9aa:	f0 94       	com	r15
    a9ac:	00 95       	com	r16
    a9ae:	10 95       	com	r17
    a9b0:	b0 94       	com	r11
    a9b2:	c0 94       	com	r12
    a9b4:	d0 94       	com	r13
    a9b6:	a1 94       	neg	r10
    a9b8:	bf 0a       	sbc	r11, r31
    a9ba:	cf 0a       	sbc	r12, r31
    a9bc:	df 0a       	sbc	r13, r31
    a9be:	ef 0a       	sbc	r14, r31
    a9c0:	ff 0a       	sbc	r15, r31
    a9c2:	0f 0b       	sbc	r16, r31
    a9c4:	1f 0b       	sbc	r17, r31
    a9c6:	13 d0       	rcall	.+38     	; 0xa9ee <__udivmod64>
    a9c8:	07 fc       	sbrc	r0, 7
    a9ca:	62 d0       	rcall	.+196    	; 0xaa90 <__negdi2>
    a9cc:	cd b7       	in	r28, 0x3d	; 61
    a9ce:	de b7       	in	r29, 0x3e	; 62
    a9d0:	ec e0       	ldi	r30, 0x0C	; 12
    a9d2:	8d c0       	rjmp	.+282    	; 0xaaee <__epilogue_restores__+0xc>

0000a9d4 <__umoddi3>:
    a9d4:	68 94       	set
    a9d6:	01 c0       	rjmp	.+2      	; 0xa9da <__udivdi3_umoddi3>

0000a9d8 <__udivdi3>:
    a9d8:	e8 94       	clt

0000a9da <__udivdi3_umoddi3>:
    a9da:	8f 92       	push	r8
    a9dc:	9f 92       	push	r9
    a9de:	cf 93       	push	r28
    a9e0:	df 93       	push	r29
    a9e2:	05 d0       	rcall	.+10     	; 0xa9ee <__udivmod64>
    a9e4:	df 91       	pop	r29
    a9e6:	cf 91       	pop	r28
    a9e8:	9f 90       	pop	r9
    a9ea:	8f 90       	pop	r8
    a9ec:	08 95       	ret

0000a9ee <__udivmod64>:
    a9ee:	88 24       	eor	r8, r8
    a9f0:	99 24       	eor	r9, r9
    a9f2:	f4 01       	movw	r30, r8
    a9f4:	e4 01       	movw	r28, r8
    a9f6:	b0 e4       	ldi	r27, 0x40	; 64
    a9f8:	9f 93       	push	r25
    a9fa:	aa 27       	eor	r26, r26
    a9fc:	9a 15       	cp	r25, r10
    a9fe:	8b 04       	cpc	r8, r11
    aa00:	9c 04       	cpc	r9, r12
    aa02:	ed 05       	cpc	r30, r13
    aa04:	fe 05       	cpc	r31, r14
    aa06:	cf 05       	cpc	r28, r15
    aa08:	d0 07       	cpc	r29, r16
    aa0a:	a1 07       	cpc	r26, r17
    aa0c:	98 f4       	brcc	.+38     	; 0xaa34 <__udivmod64+0x46>
    aa0e:	ad 2f       	mov	r26, r29
    aa10:	dc 2f       	mov	r29, r28
    aa12:	cf 2f       	mov	r28, r31
    aa14:	fe 2f       	mov	r31, r30
    aa16:	e9 2d       	mov	r30, r9
    aa18:	98 2c       	mov	r9, r8
    aa1a:	89 2e       	mov	r8, r25
    aa1c:	98 2f       	mov	r25, r24
    aa1e:	87 2f       	mov	r24, r23
    aa20:	76 2f       	mov	r23, r22
    aa22:	65 2f       	mov	r22, r21
    aa24:	54 2f       	mov	r21, r20
    aa26:	43 2f       	mov	r20, r19
    aa28:	32 2f       	mov	r19, r18
    aa2a:	22 27       	eor	r18, r18
    aa2c:	b8 50       	subi	r27, 0x08	; 8
    aa2e:	31 f7       	brne	.-52     	; 0xa9fc <__udivmod64+0xe>
    aa30:	bf 91       	pop	r27
    aa32:	27 c0       	rjmp	.+78     	; 0xaa82 <__udivmod64+0x94>
    aa34:	1b 2e       	mov	r1, r27
    aa36:	bf 91       	pop	r27
    aa38:	bb 27       	eor	r27, r27
    aa3a:	22 0f       	add	r18, r18
    aa3c:	33 1f       	adc	r19, r19
    aa3e:	44 1f       	adc	r20, r20
    aa40:	55 1f       	adc	r21, r21
    aa42:	66 1f       	adc	r22, r22
    aa44:	77 1f       	adc	r23, r23
    aa46:	88 1f       	adc	r24, r24
    aa48:	99 1f       	adc	r25, r25
    aa4a:	88 1c       	adc	r8, r8
    aa4c:	99 1c       	adc	r9, r9
    aa4e:	ee 1f       	adc	r30, r30
    aa50:	ff 1f       	adc	r31, r31
    aa52:	cc 1f       	adc	r28, r28
    aa54:	dd 1f       	adc	r29, r29
    aa56:	aa 1f       	adc	r26, r26
    aa58:	bb 1f       	adc	r27, r27
    aa5a:	8a 14       	cp	r8, r10
    aa5c:	9b 04       	cpc	r9, r11
    aa5e:	ec 05       	cpc	r30, r12
    aa60:	fd 05       	cpc	r31, r13
    aa62:	ce 05       	cpc	r28, r14
    aa64:	df 05       	cpc	r29, r15
    aa66:	a0 07       	cpc	r26, r16
    aa68:	b1 07       	cpc	r27, r17
    aa6a:	48 f0       	brcs	.+18     	; 0xaa7e <__udivmod64+0x90>
    aa6c:	8a 18       	sub	r8, r10
    aa6e:	9b 08       	sbc	r9, r11
    aa70:	ec 09       	sbc	r30, r12
    aa72:	fd 09       	sbc	r31, r13
    aa74:	ce 09       	sbc	r28, r14
    aa76:	df 09       	sbc	r29, r15
    aa78:	a0 0b       	sbc	r26, r16
    aa7a:	b1 0b       	sbc	r27, r17
    aa7c:	21 60       	ori	r18, 0x01	; 1
    aa7e:	1a 94       	dec	r1
    aa80:	e1 f6       	brne	.-72     	; 0xaa3a <__udivmod64+0x4c>
    aa82:	2e f4       	brtc	.+10     	; 0xaa8e <__udivmod64+0xa0>
    aa84:	94 01       	movw	r18, r8
    aa86:	af 01       	movw	r20, r30
    aa88:	be 01       	movw	r22, r28
    aa8a:	cd 01       	movw	r24, r26
    aa8c:	00 0c       	add	r0, r0
    aa8e:	08 95       	ret

0000aa90 <__negdi2>:
    aa90:	60 95       	com	r22
    aa92:	70 95       	com	r23
    aa94:	80 95       	com	r24
    aa96:	90 95       	com	r25
    aa98:	30 95       	com	r19
    aa9a:	40 95       	com	r20
    aa9c:	50 95       	com	r21
    aa9e:	21 95       	neg	r18
    aaa0:	3f 4f       	sbci	r19, 0xFF	; 255
    aaa2:	4f 4f       	sbci	r20, 0xFF	; 255
    aaa4:	5f 4f       	sbci	r21, 0xFF	; 255
    aaa6:	6f 4f       	sbci	r22, 0xFF	; 255
    aaa8:	7f 4f       	sbci	r23, 0xFF	; 255
    aaaa:	8f 4f       	sbci	r24, 0xFF	; 255
    aaac:	9f 4f       	sbci	r25, 0xFF	; 255
    aaae:	08 95       	ret

0000aab0 <__prologue_saves__>:
    aab0:	2f 92       	push	r2
    aab2:	3f 92       	push	r3
    aab4:	4f 92       	push	r4
    aab6:	5f 92       	push	r5
    aab8:	6f 92       	push	r6
    aaba:	7f 92       	push	r7
    aabc:	8f 92       	push	r8
    aabe:	9f 92       	push	r9
    aac0:	af 92       	push	r10
    aac2:	bf 92       	push	r11
    aac4:	cf 92       	push	r12
    aac6:	df 92       	push	r13
    aac8:	ef 92       	push	r14
    aaca:	ff 92       	push	r15
    aacc:	0f 93       	push	r16
    aace:	1f 93       	push	r17
    aad0:	cf 93       	push	r28
    aad2:	df 93       	push	r29
    aad4:	cd b7       	in	r28, 0x3d	; 61
    aad6:	de b7       	in	r29, 0x3e	; 62
    aad8:	ca 1b       	sub	r28, r26
    aada:	db 0b       	sbc	r29, r27
    aadc:	cd bf       	out	0x3d, r28	; 61
    aade:	de bf       	out	0x3e, r29	; 62
    aae0:	19 94       	eijmp

0000aae2 <__epilogue_restores__>:
    aae2:	2a 88       	ldd	r2, Y+18	; 0x12
    aae4:	39 88       	ldd	r3, Y+17	; 0x11
    aae6:	48 88       	ldd	r4, Y+16	; 0x10
    aae8:	5f 84       	ldd	r5, Y+15	; 0x0f
    aaea:	6e 84       	ldd	r6, Y+14	; 0x0e
    aaec:	7d 84       	ldd	r7, Y+13	; 0x0d
    aaee:	8c 84       	ldd	r8, Y+12	; 0x0c
    aaf0:	9b 84       	ldd	r9, Y+11	; 0x0b
    aaf2:	aa 84       	ldd	r10, Y+10	; 0x0a
    aaf4:	b9 84       	ldd	r11, Y+9	; 0x09
    aaf6:	c8 84       	ldd	r12, Y+8	; 0x08
    aaf8:	df 80       	ldd	r13, Y+7	; 0x07
    aafa:	ee 80       	ldd	r14, Y+6	; 0x06
    aafc:	fd 80       	ldd	r15, Y+5	; 0x05
    aafe:	0c 81       	ldd	r16, Y+4	; 0x04
    ab00:	1b 81       	ldd	r17, Y+3	; 0x03
    ab02:	aa 81       	ldd	r26, Y+2	; 0x02
    ab04:	b9 81       	ldd	r27, Y+1	; 0x01
    ab06:	ce 0f       	add	r28, r30
    ab08:	d1 1d       	adc	r29, r1
    ab0a:	cd bf       	out	0x3d, r28	; 61
    ab0c:	de bf       	out	0x3e, r29	; 62
    ab0e:	ed 01       	movw	r28, r26
    ab10:	08 95       	ret

0000ab12 <__ashldi3>:
    ab12:	0f 93       	push	r16
    ab14:	08 30       	cpi	r16, 0x08	; 8
    ab16:	90 f0       	brcs	.+36     	; 0xab3c <__ashldi3+0x2a>
    ab18:	98 2f       	mov	r25, r24
    ab1a:	87 2f       	mov	r24, r23
    ab1c:	76 2f       	mov	r23, r22
    ab1e:	65 2f       	mov	r22, r21
    ab20:	54 2f       	mov	r21, r20
    ab22:	43 2f       	mov	r20, r19
    ab24:	32 2f       	mov	r19, r18
    ab26:	22 27       	eor	r18, r18
    ab28:	08 50       	subi	r16, 0x08	; 8
    ab2a:	f4 cf       	rjmp	.-24     	; 0xab14 <__ashldi3+0x2>
    ab2c:	22 0f       	add	r18, r18
    ab2e:	33 1f       	adc	r19, r19
    ab30:	44 1f       	adc	r20, r20
    ab32:	55 1f       	adc	r21, r21
    ab34:	66 1f       	adc	r22, r22
    ab36:	77 1f       	adc	r23, r23
    ab38:	88 1f       	adc	r24, r24
    ab3a:	99 1f       	adc	r25, r25
    ab3c:	0a 95       	dec	r16
    ab3e:	b2 f7       	brpl	.-20     	; 0xab2c <__ashldi3+0x1a>
    ab40:	0f 91       	pop	r16
    ab42:	08 95       	ret

0000ab44 <__ashrdi3>:
    ab44:	97 fb       	bst	r25, 7
    ab46:	10 f8       	bld	r1, 0

0000ab48 <__lshrdi3>:
    ab48:	16 94       	lsr	r1
    ab4a:	00 08       	sbc	r0, r0
    ab4c:	0f 93       	push	r16
    ab4e:	08 30       	cpi	r16, 0x08	; 8
    ab50:	98 f0       	brcs	.+38     	; 0xab78 <__lshrdi3+0x30>
    ab52:	08 50       	subi	r16, 0x08	; 8
    ab54:	23 2f       	mov	r18, r19
    ab56:	34 2f       	mov	r19, r20
    ab58:	45 2f       	mov	r20, r21
    ab5a:	56 2f       	mov	r21, r22
    ab5c:	67 2f       	mov	r22, r23
    ab5e:	78 2f       	mov	r23, r24
    ab60:	89 2f       	mov	r24, r25
    ab62:	90 2d       	mov	r25, r0
    ab64:	f4 cf       	rjmp	.-24     	; 0xab4e <__lshrdi3+0x6>
    ab66:	05 94       	asr	r0
    ab68:	97 95       	ror	r25
    ab6a:	87 95       	ror	r24
    ab6c:	77 95       	ror	r23
    ab6e:	67 95       	ror	r22
    ab70:	57 95       	ror	r21
    ab72:	47 95       	ror	r20
    ab74:	37 95       	ror	r19
    ab76:	27 95       	ror	r18
    ab78:	0a 95       	dec	r16
    ab7a:	aa f7       	brpl	.-22     	; 0xab66 <__lshrdi3+0x1e>
    ab7c:	0f 91       	pop	r16
    ab7e:	08 95       	ret

0000ab80 <__adddi3>:
    ab80:	2a 0d       	add	r18, r10
    ab82:	3b 1d       	adc	r19, r11
    ab84:	4c 1d       	adc	r20, r12
    ab86:	5d 1d       	adc	r21, r13
    ab88:	6e 1d       	adc	r22, r14
    ab8a:	7f 1d       	adc	r23, r15
    ab8c:	80 1f       	adc	r24, r16
    ab8e:	91 1f       	adc	r25, r17
    ab90:	08 95       	ret

0000ab92 <__subdi3>:
    ab92:	2a 19       	sub	r18, r10
    ab94:	3b 09       	sbc	r19, r11
    ab96:	4c 09       	sbc	r20, r12
    ab98:	5d 09       	sbc	r21, r13
    ab9a:	6e 09       	sbc	r22, r14
    ab9c:	7f 09       	sbc	r23, r15
    ab9e:	80 0b       	sbc	r24, r16
    aba0:	91 0b       	sbc	r25, r17
    aba2:	08 95       	ret

0000aba4 <__subsf3>:
    aba4:	50 58       	subi	r21, 0x80	; 128

0000aba6 <__addsf3>:
    aba6:	bb 27       	eor	r27, r27
    aba8:	aa 27       	eor	r26, r26
    abaa:	0e d0       	rcall	.+28     	; 0xabc8 <__addsf3x>
    abac:	78 c1       	rjmp	.+752    	; 0xae9e <__fp_round>
    abae:	41 d1       	rcall	.+642    	; 0xae32 <__fp_pscA>
    abb0:	30 f0       	brcs	.+12     	; 0xabbe <__addsf3+0x18>
    abb2:	46 d1       	rcall	.+652    	; 0xae40 <__fp_pscB>
    abb4:	20 f0       	brcs	.+8      	; 0xabbe <__addsf3+0x18>
    abb6:	31 f4       	brne	.+12     	; 0xabc4 <__addsf3+0x1e>
    abb8:	9f 3f       	cpi	r25, 0xFF	; 255
    abba:	11 f4       	brne	.+4      	; 0xabc0 <__addsf3+0x1a>
    abbc:	1e f4       	brtc	.+6      	; 0xabc4 <__addsf3+0x1e>
    abbe:	36 c1       	rjmp	.+620    	; 0xae2c <__fp_nan>
    abc0:	0e f4       	brtc	.+2      	; 0xabc4 <__addsf3+0x1e>
    abc2:	e0 95       	com	r30
    abc4:	e7 fb       	bst	r30, 7
    abc6:	2c c1       	rjmp	.+600    	; 0xae20 <__fp_inf>

0000abc8 <__addsf3x>:
    abc8:	e9 2f       	mov	r30, r25
    abca:	8b d1       	rcall	.+790    	; 0xaee2 <__fp_split3>
    abcc:	80 f3       	brcs	.-32     	; 0xabae <__addsf3+0x8>
    abce:	ba 17       	cp	r27, r26
    abd0:	62 07       	cpc	r22, r18
    abd2:	73 07       	cpc	r23, r19
    abd4:	84 07       	cpc	r24, r20
    abd6:	95 07       	cpc	r25, r21
    abd8:	18 f0       	brcs	.+6      	; 0xabe0 <__addsf3x+0x18>
    abda:	71 f4       	brne	.+28     	; 0xabf8 <__addsf3x+0x30>
    abdc:	9e f5       	brtc	.+102    	; 0xac44 <__addsf3x+0x7c>
    abde:	a3 c1       	rjmp	.+838    	; 0xaf26 <__fp_zero>
    abe0:	0e f4       	brtc	.+2      	; 0xabe4 <__addsf3x+0x1c>
    abe2:	e0 95       	com	r30
    abe4:	0b 2e       	mov	r0, r27
    abe6:	ba 2f       	mov	r27, r26
    abe8:	a0 2d       	mov	r26, r0
    abea:	0b 01       	movw	r0, r22
    abec:	b9 01       	movw	r22, r18
    abee:	90 01       	movw	r18, r0
    abf0:	0c 01       	movw	r0, r24
    abf2:	ca 01       	movw	r24, r20
    abf4:	a0 01       	movw	r20, r0
    abf6:	11 24       	eor	r1, r1
    abf8:	ff 27       	eor	r31, r31
    abfa:	59 1b       	sub	r21, r25
    abfc:	99 f0       	breq	.+38     	; 0xac24 <__addsf3x+0x5c>
    abfe:	59 3f       	cpi	r21, 0xF9	; 249
    ac00:	50 f4       	brcc	.+20     	; 0xac16 <__addsf3x+0x4e>
    ac02:	50 3e       	cpi	r21, 0xE0	; 224
    ac04:	68 f1       	brcs	.+90     	; 0xac60 <__addsf3x+0x98>
    ac06:	1a 16       	cp	r1, r26
    ac08:	f0 40       	sbci	r31, 0x00	; 0
    ac0a:	a2 2f       	mov	r26, r18
    ac0c:	23 2f       	mov	r18, r19
    ac0e:	34 2f       	mov	r19, r20
    ac10:	44 27       	eor	r20, r20
    ac12:	58 5f       	subi	r21, 0xF8	; 248
    ac14:	f3 cf       	rjmp	.-26     	; 0xabfc <__addsf3x+0x34>
    ac16:	46 95       	lsr	r20
    ac18:	37 95       	ror	r19
    ac1a:	27 95       	ror	r18
    ac1c:	a7 95       	ror	r26
    ac1e:	f0 40       	sbci	r31, 0x00	; 0
    ac20:	53 95       	inc	r21
    ac22:	c9 f7       	brne	.-14     	; 0xac16 <__addsf3x+0x4e>
    ac24:	7e f4       	brtc	.+30     	; 0xac44 <__addsf3x+0x7c>
    ac26:	1f 16       	cp	r1, r31
    ac28:	ba 0b       	sbc	r27, r26
    ac2a:	62 0b       	sbc	r22, r18
    ac2c:	73 0b       	sbc	r23, r19
    ac2e:	84 0b       	sbc	r24, r20
    ac30:	ba f0       	brmi	.+46     	; 0xac60 <__addsf3x+0x98>
    ac32:	91 50       	subi	r25, 0x01	; 1
    ac34:	a1 f0       	breq	.+40     	; 0xac5e <__addsf3x+0x96>
    ac36:	ff 0f       	add	r31, r31
    ac38:	bb 1f       	adc	r27, r27
    ac3a:	66 1f       	adc	r22, r22
    ac3c:	77 1f       	adc	r23, r23
    ac3e:	88 1f       	adc	r24, r24
    ac40:	c2 f7       	brpl	.-16     	; 0xac32 <__addsf3x+0x6a>
    ac42:	0e c0       	rjmp	.+28     	; 0xac60 <__addsf3x+0x98>
    ac44:	ba 0f       	add	r27, r26
    ac46:	62 1f       	adc	r22, r18
    ac48:	73 1f       	adc	r23, r19
    ac4a:	84 1f       	adc	r24, r20
    ac4c:	48 f4       	brcc	.+18     	; 0xac60 <__addsf3x+0x98>
    ac4e:	87 95       	ror	r24
    ac50:	77 95       	ror	r23
    ac52:	67 95       	ror	r22
    ac54:	b7 95       	ror	r27
    ac56:	f7 95       	ror	r31
    ac58:	9e 3f       	cpi	r25, 0xFE	; 254
    ac5a:	08 f0       	brcs	.+2      	; 0xac5e <__addsf3x+0x96>
    ac5c:	b3 cf       	rjmp	.-154    	; 0xabc4 <__addsf3+0x1e>
    ac5e:	93 95       	inc	r25
    ac60:	88 0f       	add	r24, r24
    ac62:	08 f0       	brcs	.+2      	; 0xac66 <__addsf3x+0x9e>
    ac64:	99 27       	eor	r25, r25
    ac66:	ee 0f       	add	r30, r30
    ac68:	97 95       	ror	r25
    ac6a:	87 95       	ror	r24
    ac6c:	08 95       	ret

0000ac6e <cos>:
    ac6e:	f0 d0       	rcall	.+480    	; 0xae50 <__fp_rempio2>
    ac70:	e3 95       	inc	r30
    ac72:	26 c1       	rjmp	.+588    	; 0xaec0 <__fp_sinus>

0000ac74 <__divsf3>:
    ac74:	0c d0       	rcall	.+24     	; 0xac8e <__divsf3x>
    ac76:	13 c1       	rjmp	.+550    	; 0xae9e <__fp_round>
    ac78:	e3 d0       	rcall	.+454    	; 0xae40 <__fp_pscB>
    ac7a:	40 f0       	brcs	.+16     	; 0xac8c <__divsf3+0x18>
    ac7c:	da d0       	rcall	.+436    	; 0xae32 <__fp_pscA>
    ac7e:	30 f0       	brcs	.+12     	; 0xac8c <__divsf3+0x18>
    ac80:	21 f4       	brne	.+8      	; 0xac8a <__divsf3+0x16>
    ac82:	5f 3f       	cpi	r21, 0xFF	; 255
    ac84:	19 f0       	breq	.+6      	; 0xac8c <__divsf3+0x18>
    ac86:	cc c0       	rjmp	.+408    	; 0xae20 <__fp_inf>
    ac88:	51 11       	cpse	r21, r1
    ac8a:	4e c1       	rjmp	.+668    	; 0xaf28 <__fp_szero>
    ac8c:	cf c0       	rjmp	.+414    	; 0xae2c <__fp_nan>

0000ac8e <__divsf3x>:
    ac8e:	29 d1       	rcall	.+594    	; 0xaee2 <__fp_split3>
    ac90:	98 f3       	brcs	.-26     	; 0xac78 <__divsf3+0x4>

0000ac92 <__divsf3_pse>:
    ac92:	99 23       	and	r25, r25
    ac94:	c9 f3       	breq	.-14     	; 0xac88 <__divsf3+0x14>
    ac96:	55 23       	and	r21, r21
    ac98:	b1 f3       	breq	.-20     	; 0xac86 <__divsf3+0x12>
    ac9a:	95 1b       	sub	r25, r21
    ac9c:	55 0b       	sbc	r21, r21
    ac9e:	bb 27       	eor	r27, r27
    aca0:	aa 27       	eor	r26, r26
    aca2:	62 17       	cp	r22, r18
    aca4:	73 07       	cpc	r23, r19
    aca6:	84 07       	cpc	r24, r20
    aca8:	38 f0       	brcs	.+14     	; 0xacb8 <__divsf3_pse+0x26>
    acaa:	9f 5f       	subi	r25, 0xFF	; 255
    acac:	5f 4f       	sbci	r21, 0xFF	; 255
    acae:	22 0f       	add	r18, r18
    acb0:	33 1f       	adc	r19, r19
    acb2:	44 1f       	adc	r20, r20
    acb4:	aa 1f       	adc	r26, r26
    acb6:	a9 f3       	breq	.-22     	; 0xaca2 <__divsf3_pse+0x10>
    acb8:	33 d0       	rcall	.+102    	; 0xad20 <__divsf3_pse+0x8e>
    acba:	0e 2e       	mov	r0, r30
    acbc:	3a f0       	brmi	.+14     	; 0xaccc <__divsf3_pse+0x3a>
    acbe:	e0 e8       	ldi	r30, 0x80	; 128
    acc0:	30 d0       	rcall	.+96     	; 0xad22 <__divsf3_pse+0x90>
    acc2:	91 50       	subi	r25, 0x01	; 1
    acc4:	50 40       	sbci	r21, 0x00	; 0
    acc6:	e6 95       	lsr	r30
    acc8:	00 1c       	adc	r0, r0
    acca:	ca f7       	brpl	.-14     	; 0xacbe <__divsf3_pse+0x2c>
    accc:	29 d0       	rcall	.+82     	; 0xad20 <__divsf3_pse+0x8e>
    acce:	fe 2f       	mov	r31, r30
    acd0:	27 d0       	rcall	.+78     	; 0xad20 <__divsf3_pse+0x8e>
    acd2:	66 0f       	add	r22, r22
    acd4:	77 1f       	adc	r23, r23
    acd6:	88 1f       	adc	r24, r24
    acd8:	bb 1f       	adc	r27, r27
    acda:	26 17       	cp	r18, r22
    acdc:	37 07       	cpc	r19, r23
    acde:	48 07       	cpc	r20, r24
    ace0:	ab 07       	cpc	r26, r27
    ace2:	b0 e8       	ldi	r27, 0x80	; 128
    ace4:	09 f0       	breq	.+2      	; 0xace8 <__divsf3_pse+0x56>
    ace6:	bb 0b       	sbc	r27, r27
    ace8:	80 2d       	mov	r24, r0
    acea:	bf 01       	movw	r22, r30
    acec:	ff 27       	eor	r31, r31
    acee:	93 58       	subi	r25, 0x83	; 131
    acf0:	5f 4f       	sbci	r21, 0xFF	; 255
    acf2:	2a f0       	brmi	.+10     	; 0xacfe <__divsf3_pse+0x6c>
    acf4:	9e 3f       	cpi	r25, 0xFE	; 254
    acf6:	51 05       	cpc	r21, r1
    acf8:	68 f0       	brcs	.+26     	; 0xad14 <__divsf3_pse+0x82>
    acfa:	92 c0       	rjmp	.+292    	; 0xae20 <__fp_inf>
    acfc:	15 c1       	rjmp	.+554    	; 0xaf28 <__fp_szero>
    acfe:	5f 3f       	cpi	r21, 0xFF	; 255
    ad00:	ec f3       	brlt	.-6      	; 0xacfc <__divsf3_pse+0x6a>
    ad02:	98 3e       	cpi	r25, 0xE8	; 232
    ad04:	dc f3       	brlt	.-10     	; 0xacfc <__divsf3_pse+0x6a>
    ad06:	86 95       	lsr	r24
    ad08:	77 95       	ror	r23
    ad0a:	67 95       	ror	r22
    ad0c:	b7 95       	ror	r27
    ad0e:	f7 95       	ror	r31
    ad10:	9f 5f       	subi	r25, 0xFF	; 255
    ad12:	c9 f7       	brne	.-14     	; 0xad06 <__divsf3_pse+0x74>
    ad14:	88 0f       	add	r24, r24
    ad16:	91 1d       	adc	r25, r1
    ad18:	96 95       	lsr	r25
    ad1a:	87 95       	ror	r24
    ad1c:	97 f9       	bld	r25, 7
    ad1e:	08 95       	ret
    ad20:	e1 e0       	ldi	r30, 0x01	; 1
    ad22:	66 0f       	add	r22, r22
    ad24:	77 1f       	adc	r23, r23
    ad26:	88 1f       	adc	r24, r24
    ad28:	bb 1f       	adc	r27, r27
    ad2a:	62 17       	cp	r22, r18
    ad2c:	73 07       	cpc	r23, r19
    ad2e:	84 07       	cpc	r24, r20
    ad30:	ba 07       	cpc	r27, r26
    ad32:	20 f0       	brcs	.+8      	; 0xad3c <__divsf3_pse+0xaa>
    ad34:	62 1b       	sub	r22, r18
    ad36:	73 0b       	sbc	r23, r19
    ad38:	84 0b       	sbc	r24, r20
    ad3a:	ba 0b       	sbc	r27, r26
    ad3c:	ee 1f       	adc	r30, r30
    ad3e:	88 f7       	brcc	.-30     	; 0xad22 <__divsf3_pse+0x90>
    ad40:	e0 95       	com	r30
    ad42:	08 95       	ret

0000ad44 <__fixsfsi>:
    ad44:	04 d0       	rcall	.+8      	; 0xad4e <__fixunssfsi>
    ad46:	68 94       	set
    ad48:	b1 11       	cpse	r27, r1
    ad4a:	ee c0       	rjmp	.+476    	; 0xaf28 <__fp_szero>
    ad4c:	08 95       	ret

0000ad4e <__fixunssfsi>:
    ad4e:	d1 d0       	rcall	.+418    	; 0xaef2 <__fp_splitA>
    ad50:	88 f0       	brcs	.+34     	; 0xad74 <__fixunssfsi+0x26>
    ad52:	9f 57       	subi	r25, 0x7F	; 127
    ad54:	90 f0       	brcs	.+36     	; 0xad7a <__fixunssfsi+0x2c>
    ad56:	b9 2f       	mov	r27, r25
    ad58:	99 27       	eor	r25, r25
    ad5a:	b7 51       	subi	r27, 0x17	; 23
    ad5c:	a0 f0       	brcs	.+40     	; 0xad86 <__fixunssfsi+0x38>
    ad5e:	d1 f0       	breq	.+52     	; 0xad94 <__fixunssfsi+0x46>
    ad60:	66 0f       	add	r22, r22
    ad62:	77 1f       	adc	r23, r23
    ad64:	88 1f       	adc	r24, r24
    ad66:	99 1f       	adc	r25, r25
    ad68:	1a f0       	brmi	.+6      	; 0xad70 <__fixunssfsi+0x22>
    ad6a:	ba 95       	dec	r27
    ad6c:	c9 f7       	brne	.-14     	; 0xad60 <__fixunssfsi+0x12>
    ad6e:	12 c0       	rjmp	.+36     	; 0xad94 <__fixunssfsi+0x46>
    ad70:	b1 30       	cpi	r27, 0x01	; 1
    ad72:	81 f0       	breq	.+32     	; 0xad94 <__fixunssfsi+0x46>
    ad74:	d8 d0       	rcall	.+432    	; 0xaf26 <__fp_zero>
    ad76:	b1 e0       	ldi	r27, 0x01	; 1
    ad78:	08 95       	ret
    ad7a:	d5 c0       	rjmp	.+426    	; 0xaf26 <__fp_zero>
    ad7c:	67 2f       	mov	r22, r23
    ad7e:	78 2f       	mov	r23, r24
    ad80:	88 27       	eor	r24, r24
    ad82:	b8 5f       	subi	r27, 0xF8	; 248
    ad84:	39 f0       	breq	.+14     	; 0xad94 <__fixunssfsi+0x46>
    ad86:	b9 3f       	cpi	r27, 0xF9	; 249
    ad88:	cc f3       	brlt	.-14     	; 0xad7c <__fixunssfsi+0x2e>
    ad8a:	86 95       	lsr	r24
    ad8c:	77 95       	ror	r23
    ad8e:	67 95       	ror	r22
    ad90:	b3 95       	inc	r27
    ad92:	d9 f7       	brne	.-10     	; 0xad8a <__fixunssfsi+0x3c>
    ad94:	3e f4       	brtc	.+14     	; 0xada4 <__fixunssfsi+0x56>
    ad96:	90 95       	com	r25
    ad98:	80 95       	com	r24
    ad9a:	70 95       	com	r23
    ad9c:	61 95       	neg	r22
    ad9e:	7f 4f       	sbci	r23, 0xFF	; 255
    ada0:	8f 4f       	sbci	r24, 0xFF	; 255
    ada2:	9f 4f       	sbci	r25, 0xFF	; 255
    ada4:	08 95       	ret

0000ada6 <__floatunsisf>:
    ada6:	e8 94       	clt
    ada8:	09 c0       	rjmp	.+18     	; 0xadbc <__floatsisf+0x12>

0000adaa <__floatsisf>:
    adaa:	97 fb       	bst	r25, 7
    adac:	3e f4       	brtc	.+14     	; 0xadbc <__floatsisf+0x12>
    adae:	90 95       	com	r25
    adb0:	80 95       	com	r24
    adb2:	70 95       	com	r23
    adb4:	61 95       	neg	r22
    adb6:	7f 4f       	sbci	r23, 0xFF	; 255
    adb8:	8f 4f       	sbci	r24, 0xFF	; 255
    adba:	9f 4f       	sbci	r25, 0xFF	; 255
    adbc:	99 23       	and	r25, r25
    adbe:	a9 f0       	breq	.+42     	; 0xadea <__floatsisf+0x40>
    adc0:	f9 2f       	mov	r31, r25
    adc2:	96 e9       	ldi	r25, 0x96	; 150
    adc4:	bb 27       	eor	r27, r27
    adc6:	93 95       	inc	r25
    adc8:	f6 95       	lsr	r31
    adca:	87 95       	ror	r24
    adcc:	77 95       	ror	r23
    adce:	67 95       	ror	r22
    add0:	b7 95       	ror	r27
    add2:	f1 11       	cpse	r31, r1
    add4:	f8 cf       	rjmp	.-16     	; 0xadc6 <__floatsisf+0x1c>
    add6:	fa f4       	brpl	.+62     	; 0xae16 <__floatsisf+0x6c>
    add8:	bb 0f       	add	r27, r27
    adda:	11 f4       	brne	.+4      	; 0xade0 <__floatsisf+0x36>
    addc:	60 ff       	sbrs	r22, 0
    adde:	1b c0       	rjmp	.+54     	; 0xae16 <__floatsisf+0x6c>
    ade0:	6f 5f       	subi	r22, 0xFF	; 255
    ade2:	7f 4f       	sbci	r23, 0xFF	; 255
    ade4:	8f 4f       	sbci	r24, 0xFF	; 255
    ade6:	9f 4f       	sbci	r25, 0xFF	; 255
    ade8:	16 c0       	rjmp	.+44     	; 0xae16 <__floatsisf+0x6c>
    adea:	88 23       	and	r24, r24
    adec:	11 f0       	breq	.+4      	; 0xadf2 <__floatsisf+0x48>
    adee:	96 e9       	ldi	r25, 0x96	; 150
    adf0:	11 c0       	rjmp	.+34     	; 0xae14 <__floatsisf+0x6a>
    adf2:	77 23       	and	r23, r23
    adf4:	21 f0       	breq	.+8      	; 0xadfe <__floatsisf+0x54>
    adf6:	9e e8       	ldi	r25, 0x8E	; 142
    adf8:	87 2f       	mov	r24, r23
    adfa:	76 2f       	mov	r23, r22
    adfc:	05 c0       	rjmp	.+10     	; 0xae08 <__floatsisf+0x5e>
    adfe:	66 23       	and	r22, r22
    ae00:	71 f0       	breq	.+28     	; 0xae1e <__floatsisf+0x74>
    ae02:	96 e8       	ldi	r25, 0x86	; 134
    ae04:	86 2f       	mov	r24, r22
    ae06:	70 e0       	ldi	r23, 0x00	; 0
    ae08:	60 e0       	ldi	r22, 0x00	; 0
    ae0a:	2a f0       	brmi	.+10     	; 0xae16 <__floatsisf+0x6c>
    ae0c:	9a 95       	dec	r25
    ae0e:	66 0f       	add	r22, r22
    ae10:	77 1f       	adc	r23, r23
    ae12:	88 1f       	adc	r24, r24
    ae14:	da f7       	brpl	.-10     	; 0xae0c <__floatsisf+0x62>
    ae16:	88 0f       	add	r24, r24
    ae18:	96 95       	lsr	r25
    ae1a:	87 95       	ror	r24
    ae1c:	97 f9       	bld	r25, 7
    ae1e:	08 95       	ret

0000ae20 <__fp_inf>:
    ae20:	97 f9       	bld	r25, 7
    ae22:	9f 67       	ori	r25, 0x7F	; 127
    ae24:	80 e8       	ldi	r24, 0x80	; 128
    ae26:	70 e0       	ldi	r23, 0x00	; 0
    ae28:	60 e0       	ldi	r22, 0x00	; 0
    ae2a:	08 95       	ret

0000ae2c <__fp_nan>:
    ae2c:	9f ef       	ldi	r25, 0xFF	; 255
    ae2e:	80 ec       	ldi	r24, 0xC0	; 192
    ae30:	08 95       	ret

0000ae32 <__fp_pscA>:
    ae32:	00 24       	eor	r0, r0
    ae34:	0a 94       	dec	r0
    ae36:	16 16       	cp	r1, r22
    ae38:	17 06       	cpc	r1, r23
    ae3a:	18 06       	cpc	r1, r24
    ae3c:	09 06       	cpc	r0, r25
    ae3e:	08 95       	ret

0000ae40 <__fp_pscB>:
    ae40:	00 24       	eor	r0, r0
    ae42:	0a 94       	dec	r0
    ae44:	12 16       	cp	r1, r18
    ae46:	13 06       	cpc	r1, r19
    ae48:	14 06       	cpc	r1, r20
    ae4a:	05 06       	cpc	r0, r21
    ae4c:	08 95       	ret
    ae4e:	ee cf       	rjmp	.-36     	; 0xae2c <__fp_nan>

0000ae50 <__fp_rempio2>:
    ae50:	50 d0       	rcall	.+160    	; 0xaef2 <__fp_splitA>
    ae52:	e8 f3       	brcs	.-6      	; 0xae4e <__fp_pscB+0xe>
    ae54:	e8 94       	clt
    ae56:	e0 e0       	ldi	r30, 0x00	; 0
    ae58:	bb 27       	eor	r27, r27
    ae5a:	9f 57       	subi	r25, 0x7F	; 127
    ae5c:	f0 f0       	brcs	.+60     	; 0xae9a <__fp_rempio2+0x4a>
    ae5e:	2a ed       	ldi	r18, 0xDA	; 218
    ae60:	3f e0       	ldi	r19, 0x0F	; 15
    ae62:	49 ec       	ldi	r20, 0xC9	; 201
    ae64:	06 c0       	rjmp	.+12     	; 0xae72 <__fp_rempio2+0x22>
    ae66:	ee 0f       	add	r30, r30
    ae68:	bb 0f       	add	r27, r27
    ae6a:	66 1f       	adc	r22, r22
    ae6c:	77 1f       	adc	r23, r23
    ae6e:	88 1f       	adc	r24, r24
    ae70:	28 f0       	brcs	.+10     	; 0xae7c <__fp_rempio2+0x2c>
    ae72:	b2 3a       	cpi	r27, 0xA2	; 162
    ae74:	62 07       	cpc	r22, r18
    ae76:	73 07       	cpc	r23, r19
    ae78:	84 07       	cpc	r24, r20
    ae7a:	28 f0       	brcs	.+10     	; 0xae86 <__fp_rempio2+0x36>
    ae7c:	b2 5a       	subi	r27, 0xA2	; 162
    ae7e:	62 0b       	sbc	r22, r18
    ae80:	73 0b       	sbc	r23, r19
    ae82:	84 0b       	sbc	r24, r20
    ae84:	e3 95       	inc	r30
    ae86:	9a 95       	dec	r25
    ae88:	72 f7       	brpl	.-36     	; 0xae66 <__fp_rempio2+0x16>
    ae8a:	80 38       	cpi	r24, 0x80	; 128
    ae8c:	30 f4       	brcc	.+12     	; 0xae9a <__fp_rempio2+0x4a>
    ae8e:	9a 95       	dec	r25
    ae90:	bb 0f       	add	r27, r27
    ae92:	66 1f       	adc	r22, r22
    ae94:	77 1f       	adc	r23, r23
    ae96:	88 1f       	adc	r24, r24
    ae98:	d2 f7       	brpl	.-12     	; 0xae8e <__fp_rempio2+0x3e>
    ae9a:	90 48       	sbci	r25, 0x80	; 128
    ae9c:	b6 c0       	rjmp	.+364    	; 0xb00a <__fp_mpack_finite>

0000ae9e <__fp_round>:
    ae9e:	09 2e       	mov	r0, r25
    aea0:	03 94       	inc	r0
    aea2:	00 0c       	add	r0, r0
    aea4:	11 f4       	brne	.+4      	; 0xaeaa <__fp_round+0xc>
    aea6:	88 23       	and	r24, r24
    aea8:	52 f0       	brmi	.+20     	; 0xaebe <__fp_round+0x20>
    aeaa:	bb 0f       	add	r27, r27
    aeac:	40 f4       	brcc	.+16     	; 0xaebe <__fp_round+0x20>
    aeae:	bf 2b       	or	r27, r31
    aeb0:	11 f4       	brne	.+4      	; 0xaeb6 <__fp_round+0x18>
    aeb2:	60 ff       	sbrs	r22, 0
    aeb4:	04 c0       	rjmp	.+8      	; 0xaebe <__fp_round+0x20>
    aeb6:	6f 5f       	subi	r22, 0xFF	; 255
    aeb8:	7f 4f       	sbci	r23, 0xFF	; 255
    aeba:	8f 4f       	sbci	r24, 0xFF	; 255
    aebc:	9f 4f       	sbci	r25, 0xFF	; 255
    aebe:	08 95       	ret

0000aec0 <__fp_sinus>:
    aec0:	ef 93       	push	r30
    aec2:	e0 ff       	sbrs	r30, 0
    aec4:	06 c0       	rjmp	.+12     	; 0xaed2 <__fp_sinus+0x12>
    aec6:	a2 ea       	ldi	r26, 0xA2	; 162
    aec8:	2a ed       	ldi	r18, 0xDA	; 218
    aeca:	3f e0       	ldi	r19, 0x0F	; 15
    aecc:	49 ec       	ldi	r20, 0xC9	; 201
    aece:	5f eb       	ldi	r21, 0xBF	; 191
    aed0:	7b de       	rcall	.-778    	; 0xabc8 <__addsf3x>
    aed2:	e5 df       	rcall	.-54     	; 0xae9e <__fp_round>
    aed4:	0f 90       	pop	r0
    aed6:	03 94       	inc	r0
    aed8:	01 fc       	sbrc	r0, 1
    aeda:	90 58       	subi	r25, 0x80	; 128
    aedc:	e8 e1       	ldi	r30, 0x18	; 24
    aede:	f2 e0       	ldi	r31, 0x02	; 2
    aee0:	a0 c0       	rjmp	.+320    	; 0xb022 <__fp_powsodd>

0000aee2 <__fp_split3>:
    aee2:	57 fd       	sbrc	r21, 7
    aee4:	90 58       	subi	r25, 0x80	; 128
    aee6:	44 0f       	add	r20, r20
    aee8:	55 1f       	adc	r21, r21
    aeea:	59 f0       	breq	.+22     	; 0xaf02 <__fp_splitA+0x10>
    aeec:	5f 3f       	cpi	r21, 0xFF	; 255
    aeee:	71 f0       	breq	.+28     	; 0xaf0c <__fp_splitA+0x1a>
    aef0:	47 95       	ror	r20

0000aef2 <__fp_splitA>:
    aef2:	88 0f       	add	r24, r24
    aef4:	97 fb       	bst	r25, 7
    aef6:	99 1f       	adc	r25, r25
    aef8:	61 f0       	breq	.+24     	; 0xaf12 <__fp_splitA+0x20>
    aefa:	9f 3f       	cpi	r25, 0xFF	; 255
    aefc:	79 f0       	breq	.+30     	; 0xaf1c <__fp_splitA+0x2a>
    aefe:	87 95       	ror	r24
    af00:	08 95       	ret
    af02:	12 16       	cp	r1, r18
    af04:	13 06       	cpc	r1, r19
    af06:	14 06       	cpc	r1, r20
    af08:	55 1f       	adc	r21, r21
    af0a:	f2 cf       	rjmp	.-28     	; 0xaef0 <__fp_split3+0xe>
    af0c:	46 95       	lsr	r20
    af0e:	f1 df       	rcall	.-30     	; 0xaef2 <__fp_splitA>
    af10:	08 c0       	rjmp	.+16     	; 0xaf22 <__fp_splitA+0x30>
    af12:	16 16       	cp	r1, r22
    af14:	17 06       	cpc	r1, r23
    af16:	18 06       	cpc	r1, r24
    af18:	99 1f       	adc	r25, r25
    af1a:	f1 cf       	rjmp	.-30     	; 0xaefe <__fp_splitA+0xc>
    af1c:	86 95       	lsr	r24
    af1e:	71 05       	cpc	r23, r1
    af20:	61 05       	cpc	r22, r1
    af22:	08 94       	sec
    af24:	08 95       	ret

0000af26 <__fp_zero>:
    af26:	e8 94       	clt

0000af28 <__fp_szero>:
    af28:	bb 27       	eor	r27, r27
    af2a:	66 27       	eor	r22, r22
    af2c:	77 27       	eor	r23, r23
    af2e:	cb 01       	movw	r24, r22
    af30:	97 f9       	bld	r25, 7
    af32:	08 95       	ret

0000af34 <__mulsf3>:
    af34:	0b d0       	rcall	.+22     	; 0xaf4c <__mulsf3x>
    af36:	b3 cf       	rjmp	.-154    	; 0xae9e <__fp_round>
    af38:	7c df       	rcall	.-264    	; 0xae32 <__fp_pscA>
    af3a:	28 f0       	brcs	.+10     	; 0xaf46 <__mulsf3+0x12>
    af3c:	81 df       	rcall	.-254    	; 0xae40 <__fp_pscB>
    af3e:	18 f0       	brcs	.+6      	; 0xaf46 <__mulsf3+0x12>
    af40:	95 23       	and	r25, r21
    af42:	09 f0       	breq	.+2      	; 0xaf46 <__mulsf3+0x12>
    af44:	6d cf       	rjmp	.-294    	; 0xae20 <__fp_inf>
    af46:	72 cf       	rjmp	.-284    	; 0xae2c <__fp_nan>
    af48:	11 24       	eor	r1, r1
    af4a:	ee cf       	rjmp	.-36     	; 0xaf28 <__fp_szero>

0000af4c <__mulsf3x>:
    af4c:	ca df       	rcall	.-108    	; 0xaee2 <__fp_split3>
    af4e:	a0 f3       	brcs	.-24     	; 0xaf38 <__mulsf3+0x4>

0000af50 <__mulsf3_pse>:
    af50:	95 9f       	mul	r25, r21
    af52:	d1 f3       	breq	.-12     	; 0xaf48 <__mulsf3+0x14>
    af54:	95 0f       	add	r25, r21
    af56:	50 e0       	ldi	r21, 0x00	; 0
    af58:	55 1f       	adc	r21, r21
    af5a:	62 9f       	mul	r22, r18
    af5c:	f0 01       	movw	r30, r0
    af5e:	72 9f       	mul	r23, r18
    af60:	bb 27       	eor	r27, r27
    af62:	f0 0d       	add	r31, r0
    af64:	b1 1d       	adc	r27, r1
    af66:	63 9f       	mul	r22, r19
    af68:	aa 27       	eor	r26, r26
    af6a:	f0 0d       	add	r31, r0
    af6c:	b1 1d       	adc	r27, r1
    af6e:	aa 1f       	adc	r26, r26
    af70:	64 9f       	mul	r22, r20
    af72:	66 27       	eor	r22, r22
    af74:	b0 0d       	add	r27, r0
    af76:	a1 1d       	adc	r26, r1
    af78:	66 1f       	adc	r22, r22
    af7a:	82 9f       	mul	r24, r18
    af7c:	22 27       	eor	r18, r18
    af7e:	b0 0d       	add	r27, r0
    af80:	a1 1d       	adc	r26, r1
    af82:	62 1f       	adc	r22, r18
    af84:	73 9f       	mul	r23, r19
    af86:	b0 0d       	add	r27, r0
    af88:	a1 1d       	adc	r26, r1
    af8a:	62 1f       	adc	r22, r18
    af8c:	83 9f       	mul	r24, r19
    af8e:	a0 0d       	add	r26, r0
    af90:	61 1d       	adc	r22, r1
    af92:	22 1f       	adc	r18, r18
    af94:	74 9f       	mul	r23, r20
    af96:	33 27       	eor	r19, r19
    af98:	a0 0d       	add	r26, r0
    af9a:	61 1d       	adc	r22, r1
    af9c:	23 1f       	adc	r18, r19
    af9e:	84 9f       	mul	r24, r20
    afa0:	60 0d       	add	r22, r0
    afa2:	21 1d       	adc	r18, r1
    afa4:	82 2f       	mov	r24, r18
    afa6:	76 2f       	mov	r23, r22
    afa8:	6a 2f       	mov	r22, r26
    afaa:	11 24       	eor	r1, r1
    afac:	9f 57       	subi	r25, 0x7F	; 127
    afae:	50 40       	sbci	r21, 0x00	; 0
    afb0:	8a f0       	brmi	.+34     	; 0xafd4 <__mulsf3_pse+0x84>
    afb2:	e1 f0       	breq	.+56     	; 0xafec <__mulsf3_pse+0x9c>
    afb4:	88 23       	and	r24, r24
    afb6:	4a f0       	brmi	.+18     	; 0xafca <__mulsf3_pse+0x7a>
    afb8:	ee 0f       	add	r30, r30
    afba:	ff 1f       	adc	r31, r31
    afbc:	bb 1f       	adc	r27, r27
    afbe:	66 1f       	adc	r22, r22
    afc0:	77 1f       	adc	r23, r23
    afc2:	88 1f       	adc	r24, r24
    afc4:	91 50       	subi	r25, 0x01	; 1
    afc6:	50 40       	sbci	r21, 0x00	; 0
    afc8:	a9 f7       	brne	.-22     	; 0xafb4 <__mulsf3_pse+0x64>
    afca:	9e 3f       	cpi	r25, 0xFE	; 254
    afcc:	51 05       	cpc	r21, r1
    afce:	70 f0       	brcs	.+28     	; 0xafec <__mulsf3_pse+0x9c>
    afd0:	27 cf       	rjmp	.-434    	; 0xae20 <__fp_inf>
    afd2:	aa cf       	rjmp	.-172    	; 0xaf28 <__fp_szero>
    afd4:	5f 3f       	cpi	r21, 0xFF	; 255
    afd6:	ec f3       	brlt	.-6      	; 0xafd2 <__mulsf3_pse+0x82>
    afd8:	98 3e       	cpi	r25, 0xE8	; 232
    afda:	dc f3       	brlt	.-10     	; 0xafd2 <__mulsf3_pse+0x82>
    afdc:	86 95       	lsr	r24
    afde:	77 95       	ror	r23
    afe0:	67 95       	ror	r22
    afe2:	b7 95       	ror	r27
    afe4:	f7 95       	ror	r31
    afe6:	e7 95       	ror	r30
    afe8:	9f 5f       	subi	r25, 0xFF	; 255
    afea:	c1 f7       	brne	.-16     	; 0xafdc <__mulsf3_pse+0x8c>
    afec:	fe 2b       	or	r31, r30
    afee:	88 0f       	add	r24, r24
    aff0:	91 1d       	adc	r25, r1
    aff2:	96 95       	lsr	r25
    aff4:	87 95       	ror	r24
    aff6:	97 f9       	bld	r25, 7
    aff8:	08 95       	ret

0000affa <sin>:
    affa:	9f 93       	push	r25
    affc:	29 df       	rcall	.-430    	; 0xae50 <__fp_rempio2>
    affe:	0f 90       	pop	r0
    b000:	07 fc       	sbrc	r0, 7
    b002:	ee 5f       	subi	r30, 0xFE	; 254
    b004:	5d cf       	rjmp	.-326    	; 0xaec0 <__fp_sinus>

0000b006 <__fp_mpack>:
    b006:	9f 3f       	cpi	r25, 0xFF	; 255
    b008:	31 f0       	breq	.+12     	; 0xb016 <__fp_mpack_finite+0xc>

0000b00a <__fp_mpack_finite>:
    b00a:	91 50       	subi	r25, 0x01	; 1
    b00c:	20 f4       	brcc	.+8      	; 0xb016 <__fp_mpack_finite+0xc>
    b00e:	87 95       	ror	r24
    b010:	77 95       	ror	r23
    b012:	67 95       	ror	r22
    b014:	b7 95       	ror	r27
    b016:	88 0f       	add	r24, r24
    b018:	91 1d       	adc	r25, r1
    b01a:	96 95       	lsr	r25
    b01c:	87 95       	ror	r24
    b01e:	97 f9       	bld	r25, 7
    b020:	08 95       	ret

0000b022 <__fp_powsodd>:
    b022:	9f 93       	push	r25
    b024:	8f 93       	push	r24
    b026:	7f 93       	push	r23
    b028:	6f 93       	push	r22
    b02a:	ff 93       	push	r31
    b02c:	ef 93       	push	r30
    b02e:	9b 01       	movw	r18, r22
    b030:	ac 01       	movw	r20, r24
    b032:	80 df       	rcall	.-256    	; 0xaf34 <__mulsf3>
    b034:	ef 91       	pop	r30
    b036:	ff 91       	pop	r31
    b038:	05 d0       	rcall	.+10     	; 0xb044 <__fp_powser>
    b03a:	2f 91       	pop	r18
    b03c:	3f 91       	pop	r19
    b03e:	4f 91       	pop	r20
    b040:	5f 91       	pop	r21
    b042:	78 cf       	rjmp	.-272    	; 0xaf34 <__mulsf3>

0000b044 <__fp_powser>:
    b044:	df 93       	push	r29
    b046:	cf 93       	push	r28
    b048:	1f 93       	push	r17
    b04a:	0f 93       	push	r16
    b04c:	ff 92       	push	r15
    b04e:	ef 92       	push	r14
    b050:	df 92       	push	r13
    b052:	7b 01       	movw	r14, r22
    b054:	8c 01       	movw	r16, r24
    b056:	68 94       	set
    b058:	05 c0       	rjmp	.+10     	; 0xb064 <__fp_powser+0x20>
    b05a:	da 2e       	mov	r13, r26
    b05c:	ef 01       	movw	r28, r30
    b05e:	76 df       	rcall	.-276    	; 0xaf4c <__mulsf3x>
    b060:	fe 01       	movw	r30, r28
    b062:	e8 94       	clt
    b064:	a5 91       	lpm	r26, Z+
    b066:	25 91       	lpm	r18, Z+
    b068:	35 91       	lpm	r19, Z+
    b06a:	45 91       	lpm	r20, Z+
    b06c:	55 91       	lpm	r21, Z+
    b06e:	ae f3       	brts	.-22     	; 0xb05a <__fp_powser+0x16>
    b070:	ef 01       	movw	r28, r30
    b072:	aa dd       	rcall	.-1196   	; 0xabc8 <__addsf3x>
    b074:	fe 01       	movw	r30, r28
    b076:	97 01       	movw	r18, r14
    b078:	a8 01       	movw	r20, r16
    b07a:	da 94       	dec	r13
    b07c:	79 f7       	brne	.-34     	; 0xb05c <__fp_powser+0x18>
    b07e:	df 90       	pop	r13
    b080:	ef 90       	pop	r14
    b082:	ff 90       	pop	r15
    b084:	0f 91       	pop	r16
    b086:	1f 91       	pop	r17
    b088:	cf 91       	pop	r28
    b08a:	df 91       	pop	r29
    b08c:	08 95       	ret

0000b08e <memcpy>:
    b08e:	fb 01       	movw	r30, r22
    b090:	dc 01       	movw	r26, r24
    b092:	02 c0       	rjmp	.+4      	; 0xb098 <memcpy+0xa>
    b094:	01 90       	ld	r0, Z+
    b096:	0d 92       	st	X+, r0
    b098:	41 50       	subi	r20, 0x01	; 1
    b09a:	50 40       	sbci	r21, 0x00	; 0
    b09c:	d8 f7       	brcc	.-10     	; 0xb094 <memcpy+0x6>
    b09e:	08 95       	ret

0000b0a0 <fdevopen>:
    b0a0:	0f 93       	push	r16
    b0a2:	1f 93       	push	r17
    b0a4:	cf 93       	push	r28
    b0a6:	df 93       	push	r29
    b0a8:	00 97       	sbiw	r24, 0x00	; 0
    b0aa:	31 f4       	brne	.+12     	; 0xb0b8 <fdevopen+0x18>
    b0ac:	61 15       	cp	r22, r1
    b0ae:	71 05       	cpc	r23, r1
    b0b0:	19 f4       	brne	.+6      	; 0xb0b8 <fdevopen+0x18>
    b0b2:	80 e0       	ldi	r24, 0x00	; 0
    b0b4:	90 e0       	ldi	r25, 0x00	; 0
    b0b6:	39 c0       	rjmp	.+114    	; 0xb12a <fdevopen+0x8a>
    b0b8:	8b 01       	movw	r16, r22
    b0ba:	ec 01       	movw	r28, r24
    b0bc:	6e e0       	ldi	r22, 0x0E	; 14
    b0be:	70 e0       	ldi	r23, 0x00	; 0
    b0c0:	81 e0       	ldi	r24, 0x01	; 1
    b0c2:	90 e0       	ldi	r25, 0x00	; 0
    b0c4:	99 d2       	rcall	.+1330   	; 0xb5f8 <calloc>
    b0c6:	fc 01       	movw	r30, r24
    b0c8:	89 2b       	or	r24, r25
    b0ca:	99 f3       	breq	.-26     	; 0xb0b2 <fdevopen+0x12>
    b0cc:	80 e8       	ldi	r24, 0x80	; 128
    b0ce:	83 83       	std	Z+3, r24	; 0x03
    b0d0:	01 15       	cp	r16, r1
    b0d2:	11 05       	cpc	r17, r1
    b0d4:	71 f0       	breq	.+28     	; 0xb0f2 <fdevopen+0x52>
    b0d6:	02 87       	std	Z+10, r16	; 0x0a
    b0d8:	13 87       	std	Z+11, r17	; 0x0b
    b0da:	81 e8       	ldi	r24, 0x81	; 129
    b0dc:	83 83       	std	Z+3, r24	; 0x03
    b0de:	80 91 f1 2a 	lds	r24, 0x2AF1	; 0x802af1 <__iob>
    b0e2:	90 91 f2 2a 	lds	r25, 0x2AF2	; 0x802af2 <__iob+0x1>
    b0e6:	89 2b       	or	r24, r25
    b0e8:	21 f4       	brne	.+8      	; 0xb0f2 <fdevopen+0x52>
    b0ea:	e0 93 f1 2a 	sts	0x2AF1, r30	; 0x802af1 <__iob>
    b0ee:	f0 93 f2 2a 	sts	0x2AF2, r31	; 0x802af2 <__iob+0x1>
    b0f2:	20 97       	sbiw	r28, 0x00	; 0
    b0f4:	c9 f0       	breq	.+50     	; 0xb128 <fdevopen+0x88>
    b0f6:	c0 87       	std	Z+8, r28	; 0x08
    b0f8:	d1 87       	std	Z+9, r29	; 0x09
    b0fa:	83 81       	ldd	r24, Z+3	; 0x03
    b0fc:	82 60       	ori	r24, 0x02	; 2
    b0fe:	83 83       	std	Z+3, r24	; 0x03
    b100:	80 91 f3 2a 	lds	r24, 0x2AF3	; 0x802af3 <__iob+0x2>
    b104:	90 91 f4 2a 	lds	r25, 0x2AF4	; 0x802af4 <__iob+0x3>
    b108:	89 2b       	or	r24, r25
    b10a:	71 f4       	brne	.+28     	; 0xb128 <fdevopen+0x88>
    b10c:	e0 93 f3 2a 	sts	0x2AF3, r30	; 0x802af3 <__iob+0x2>
    b110:	f0 93 f4 2a 	sts	0x2AF4, r31	; 0x802af4 <__iob+0x3>
    b114:	80 91 f5 2a 	lds	r24, 0x2AF5	; 0x802af5 <__iob+0x4>
    b118:	90 91 f6 2a 	lds	r25, 0x2AF6	; 0x802af6 <__iob+0x5>
    b11c:	89 2b       	or	r24, r25
    b11e:	21 f4       	brne	.+8      	; 0xb128 <fdevopen+0x88>
    b120:	e0 93 f5 2a 	sts	0x2AF5, r30	; 0x802af5 <__iob+0x4>
    b124:	f0 93 f6 2a 	sts	0x2AF6, r31	; 0x802af6 <__iob+0x5>
    b128:	cf 01       	movw	r24, r30
    b12a:	df 91       	pop	r29
    b12c:	cf 91       	pop	r28
    b12e:	1f 91       	pop	r17
    b130:	0f 91       	pop	r16
    b132:	08 95       	ret

0000b134 <printf>:
    b134:	cf 93       	push	r28
    b136:	df 93       	push	r29
    b138:	cd b7       	in	r28, 0x3d	; 61
    b13a:	de b7       	in	r29, 0x3e	; 62
    b13c:	ae 01       	movw	r20, r28
    b13e:	4a 5f       	subi	r20, 0xFA	; 250
    b140:	5f 4f       	sbci	r21, 0xFF	; 255
    b142:	fa 01       	movw	r30, r20
    b144:	61 91       	ld	r22, Z+
    b146:	71 91       	ld	r23, Z+
    b148:	af 01       	movw	r20, r30
    b14a:	80 91 f3 2a 	lds	r24, 0x2AF3	; 0x802af3 <__iob+0x2>
    b14e:	90 91 f4 2a 	lds	r25, 0x2AF4	; 0x802af4 <__iob+0x3>
    b152:	5b d0       	rcall	.+182    	; 0xb20a <vfprintf>
    b154:	df 91       	pop	r29
    b156:	cf 91       	pop	r28
    b158:	08 95       	ret

0000b15a <puts>:
    b15a:	0f 93       	push	r16
    b15c:	1f 93       	push	r17
    b15e:	cf 93       	push	r28
    b160:	df 93       	push	r29
    b162:	e0 91 f3 2a 	lds	r30, 0x2AF3	; 0x802af3 <__iob+0x2>
    b166:	f0 91 f4 2a 	lds	r31, 0x2AF4	; 0x802af4 <__iob+0x3>
    b16a:	23 81       	ldd	r18, Z+3	; 0x03
    b16c:	21 ff       	sbrs	r18, 1
    b16e:	1b c0       	rjmp	.+54     	; 0xb1a6 <puts+0x4c>
    b170:	8c 01       	movw	r16, r24
    b172:	d0 e0       	ldi	r29, 0x00	; 0
    b174:	c0 e0       	ldi	r28, 0x00	; 0
    b176:	f8 01       	movw	r30, r16
    b178:	81 91       	ld	r24, Z+
    b17a:	8f 01       	movw	r16, r30
    b17c:	60 91 f3 2a 	lds	r22, 0x2AF3	; 0x802af3 <__iob+0x2>
    b180:	70 91 f4 2a 	lds	r23, 0x2AF4	; 0x802af4 <__iob+0x3>
    b184:	db 01       	movw	r26, r22
    b186:	18 96       	adiw	r26, 0x08	; 8
    b188:	ed 91       	ld	r30, X+
    b18a:	fc 91       	ld	r31, X
    b18c:	19 97       	sbiw	r26, 0x09	; 9
    b18e:	88 23       	and	r24, r24
    b190:	31 f0       	breq	.+12     	; 0xb19e <puts+0x44>
    b192:	19 95       	eicall
    b194:	89 2b       	or	r24, r25
    b196:	79 f3       	breq	.-34     	; 0xb176 <puts+0x1c>
    b198:	df ef       	ldi	r29, 0xFF	; 255
    b19a:	cf ef       	ldi	r28, 0xFF	; 255
    b19c:	ec cf       	rjmp	.-40     	; 0xb176 <puts+0x1c>
    b19e:	8a e0       	ldi	r24, 0x0A	; 10
    b1a0:	19 95       	eicall
    b1a2:	89 2b       	or	r24, r25
    b1a4:	19 f0       	breq	.+6      	; 0xb1ac <puts+0x52>
    b1a6:	8f ef       	ldi	r24, 0xFF	; 255
    b1a8:	9f ef       	ldi	r25, 0xFF	; 255
    b1aa:	02 c0       	rjmp	.+4      	; 0xb1b0 <puts+0x56>
    b1ac:	8d 2f       	mov	r24, r29
    b1ae:	9c 2f       	mov	r25, r28
    b1b0:	df 91       	pop	r29
    b1b2:	cf 91       	pop	r28
    b1b4:	1f 91       	pop	r17
    b1b6:	0f 91       	pop	r16
    b1b8:	08 95       	ret

0000b1ba <sprintf>:
    b1ba:	0f 93       	push	r16
    b1bc:	1f 93       	push	r17
    b1be:	cf 93       	push	r28
    b1c0:	df 93       	push	r29
    b1c2:	cd b7       	in	r28, 0x3d	; 61
    b1c4:	de b7       	in	r29, 0x3e	; 62
    b1c6:	2e 97       	sbiw	r28, 0x0e	; 14
    b1c8:	cd bf       	out	0x3d, r28	; 61
    b1ca:	de bf       	out	0x3e, r29	; 62
    b1cc:	0e 89       	ldd	r16, Y+22	; 0x16
    b1ce:	1f 89       	ldd	r17, Y+23	; 0x17
    b1d0:	86 e0       	ldi	r24, 0x06	; 6
    b1d2:	8c 83       	std	Y+4, r24	; 0x04
    b1d4:	09 83       	std	Y+1, r16	; 0x01
    b1d6:	1a 83       	std	Y+2, r17	; 0x02
    b1d8:	8f ef       	ldi	r24, 0xFF	; 255
    b1da:	9f e7       	ldi	r25, 0x7F	; 127
    b1dc:	8d 83       	std	Y+5, r24	; 0x05
    b1de:	9e 83       	std	Y+6, r25	; 0x06
    b1e0:	ae 01       	movw	r20, r28
    b1e2:	46 5e       	subi	r20, 0xE6	; 230
    b1e4:	5f 4f       	sbci	r21, 0xFF	; 255
    b1e6:	68 8d       	ldd	r22, Y+24	; 0x18
    b1e8:	79 8d       	ldd	r23, Y+25	; 0x19
    b1ea:	ce 01       	movw	r24, r28
    b1ec:	01 96       	adiw	r24, 0x01	; 1
    b1ee:	0d d0       	rcall	.+26     	; 0xb20a <vfprintf>
    b1f0:	ef 81       	ldd	r30, Y+7	; 0x07
    b1f2:	f8 85       	ldd	r31, Y+8	; 0x08
    b1f4:	e0 0f       	add	r30, r16
    b1f6:	f1 1f       	adc	r31, r17
    b1f8:	10 82       	st	Z, r1
    b1fa:	2e 96       	adiw	r28, 0x0e	; 14
    b1fc:	cd bf       	out	0x3d, r28	; 61
    b1fe:	de bf       	out	0x3e, r29	; 62
    b200:	df 91       	pop	r29
    b202:	cf 91       	pop	r28
    b204:	1f 91       	pop	r17
    b206:	0f 91       	pop	r16
    b208:	08 95       	ret

0000b20a <vfprintf>:
    b20a:	2f 92       	push	r2
    b20c:	3f 92       	push	r3
    b20e:	4f 92       	push	r4
    b210:	5f 92       	push	r5
    b212:	6f 92       	push	r6
    b214:	7f 92       	push	r7
    b216:	8f 92       	push	r8
    b218:	9f 92       	push	r9
    b21a:	af 92       	push	r10
    b21c:	bf 92       	push	r11
    b21e:	cf 92       	push	r12
    b220:	df 92       	push	r13
    b222:	ef 92       	push	r14
    b224:	ff 92       	push	r15
    b226:	0f 93       	push	r16
    b228:	1f 93       	push	r17
    b22a:	cf 93       	push	r28
    b22c:	df 93       	push	r29
    b22e:	cd b7       	in	r28, 0x3d	; 61
    b230:	de b7       	in	r29, 0x3e	; 62
    b232:	2b 97       	sbiw	r28, 0x0b	; 11
    b234:	cd bf       	out	0x3d, r28	; 61
    b236:	de bf       	out	0x3e, r29	; 62
    b238:	6c 01       	movw	r12, r24
    b23a:	7b 01       	movw	r14, r22
    b23c:	8a 01       	movw	r16, r20
    b23e:	fc 01       	movw	r30, r24
    b240:	16 82       	std	Z+6, r1	; 0x06
    b242:	17 82       	std	Z+7, r1	; 0x07
    b244:	83 81       	ldd	r24, Z+3	; 0x03
    b246:	81 ff       	sbrs	r24, 1
    b248:	bf c1       	rjmp	.+894    	; 0xb5c8 <vfprintf+0x3be>
    b24a:	ce 01       	movw	r24, r28
    b24c:	01 96       	adiw	r24, 0x01	; 1
    b24e:	3c 01       	movw	r6, r24
    b250:	f6 01       	movw	r30, r12
    b252:	93 81       	ldd	r25, Z+3	; 0x03
    b254:	f7 01       	movw	r30, r14
    b256:	93 fd       	sbrc	r25, 3
    b258:	85 91       	lpm	r24, Z+
    b25a:	93 ff       	sbrs	r25, 3
    b25c:	81 91       	ld	r24, Z+
    b25e:	7f 01       	movw	r14, r30
    b260:	88 23       	and	r24, r24
    b262:	09 f4       	brne	.+2      	; 0xb266 <vfprintf+0x5c>
    b264:	ad c1       	rjmp	.+858    	; 0xb5c0 <vfprintf+0x3b6>
    b266:	85 32       	cpi	r24, 0x25	; 37
    b268:	39 f4       	brne	.+14     	; 0xb278 <vfprintf+0x6e>
    b26a:	93 fd       	sbrc	r25, 3
    b26c:	85 91       	lpm	r24, Z+
    b26e:	93 ff       	sbrs	r25, 3
    b270:	81 91       	ld	r24, Z+
    b272:	7f 01       	movw	r14, r30
    b274:	85 32       	cpi	r24, 0x25	; 37
    b276:	21 f4       	brne	.+8      	; 0xb280 <vfprintf+0x76>
    b278:	b6 01       	movw	r22, r12
    b27a:	90 e0       	ldi	r25, 0x00	; 0
    b27c:	15 d3       	rcall	.+1578   	; 0xb8a8 <fputc>
    b27e:	e8 cf       	rjmp	.-48     	; 0xb250 <vfprintf+0x46>
    b280:	91 2c       	mov	r9, r1
    b282:	21 2c       	mov	r2, r1
    b284:	31 2c       	mov	r3, r1
    b286:	ff e1       	ldi	r31, 0x1F	; 31
    b288:	f3 15       	cp	r31, r3
    b28a:	d8 f0       	brcs	.+54     	; 0xb2c2 <vfprintf+0xb8>
    b28c:	8b 32       	cpi	r24, 0x2B	; 43
    b28e:	79 f0       	breq	.+30     	; 0xb2ae <vfprintf+0xa4>
    b290:	38 f4       	brcc	.+14     	; 0xb2a0 <vfprintf+0x96>
    b292:	80 32       	cpi	r24, 0x20	; 32
    b294:	79 f0       	breq	.+30     	; 0xb2b4 <vfprintf+0xaa>
    b296:	83 32       	cpi	r24, 0x23	; 35
    b298:	a1 f4       	brne	.+40     	; 0xb2c2 <vfprintf+0xb8>
    b29a:	23 2d       	mov	r18, r3
    b29c:	20 61       	ori	r18, 0x10	; 16
    b29e:	1d c0       	rjmp	.+58     	; 0xb2da <vfprintf+0xd0>
    b2a0:	8d 32       	cpi	r24, 0x2D	; 45
    b2a2:	61 f0       	breq	.+24     	; 0xb2bc <vfprintf+0xb2>
    b2a4:	80 33       	cpi	r24, 0x30	; 48
    b2a6:	69 f4       	brne	.+26     	; 0xb2c2 <vfprintf+0xb8>
    b2a8:	23 2d       	mov	r18, r3
    b2aa:	21 60       	ori	r18, 0x01	; 1
    b2ac:	16 c0       	rjmp	.+44     	; 0xb2da <vfprintf+0xd0>
    b2ae:	83 2d       	mov	r24, r3
    b2b0:	82 60       	ori	r24, 0x02	; 2
    b2b2:	38 2e       	mov	r3, r24
    b2b4:	e3 2d       	mov	r30, r3
    b2b6:	e4 60       	ori	r30, 0x04	; 4
    b2b8:	3e 2e       	mov	r3, r30
    b2ba:	2a c0       	rjmp	.+84     	; 0xb310 <vfprintf+0x106>
    b2bc:	f3 2d       	mov	r31, r3
    b2be:	f8 60       	ori	r31, 0x08	; 8
    b2c0:	1d c0       	rjmp	.+58     	; 0xb2fc <vfprintf+0xf2>
    b2c2:	37 fc       	sbrc	r3, 7
    b2c4:	2d c0       	rjmp	.+90     	; 0xb320 <vfprintf+0x116>
    b2c6:	20 ed       	ldi	r18, 0xD0	; 208
    b2c8:	28 0f       	add	r18, r24
    b2ca:	2a 30       	cpi	r18, 0x0A	; 10
    b2cc:	40 f0       	brcs	.+16     	; 0xb2de <vfprintf+0xd4>
    b2ce:	8e 32       	cpi	r24, 0x2E	; 46
    b2d0:	b9 f4       	brne	.+46     	; 0xb300 <vfprintf+0xf6>
    b2d2:	36 fc       	sbrc	r3, 6
    b2d4:	75 c1       	rjmp	.+746    	; 0xb5c0 <vfprintf+0x3b6>
    b2d6:	23 2d       	mov	r18, r3
    b2d8:	20 64       	ori	r18, 0x40	; 64
    b2da:	32 2e       	mov	r3, r18
    b2dc:	19 c0       	rjmp	.+50     	; 0xb310 <vfprintf+0x106>
    b2de:	36 fe       	sbrs	r3, 6
    b2e0:	06 c0       	rjmp	.+12     	; 0xb2ee <vfprintf+0xe4>
    b2e2:	8a e0       	ldi	r24, 0x0A	; 10
    b2e4:	98 9e       	mul	r9, r24
    b2e6:	20 0d       	add	r18, r0
    b2e8:	11 24       	eor	r1, r1
    b2ea:	92 2e       	mov	r9, r18
    b2ec:	11 c0       	rjmp	.+34     	; 0xb310 <vfprintf+0x106>
    b2ee:	ea e0       	ldi	r30, 0x0A	; 10
    b2f0:	2e 9e       	mul	r2, r30
    b2f2:	20 0d       	add	r18, r0
    b2f4:	11 24       	eor	r1, r1
    b2f6:	22 2e       	mov	r2, r18
    b2f8:	f3 2d       	mov	r31, r3
    b2fa:	f0 62       	ori	r31, 0x20	; 32
    b2fc:	3f 2e       	mov	r3, r31
    b2fe:	08 c0       	rjmp	.+16     	; 0xb310 <vfprintf+0x106>
    b300:	8c 36       	cpi	r24, 0x6C	; 108
    b302:	21 f4       	brne	.+8      	; 0xb30c <vfprintf+0x102>
    b304:	83 2d       	mov	r24, r3
    b306:	80 68       	ori	r24, 0x80	; 128
    b308:	38 2e       	mov	r3, r24
    b30a:	02 c0       	rjmp	.+4      	; 0xb310 <vfprintf+0x106>
    b30c:	88 36       	cpi	r24, 0x68	; 104
    b30e:	41 f4       	brne	.+16     	; 0xb320 <vfprintf+0x116>
    b310:	f7 01       	movw	r30, r14
    b312:	93 fd       	sbrc	r25, 3
    b314:	85 91       	lpm	r24, Z+
    b316:	93 ff       	sbrs	r25, 3
    b318:	81 91       	ld	r24, Z+
    b31a:	7f 01       	movw	r14, r30
    b31c:	81 11       	cpse	r24, r1
    b31e:	b3 cf       	rjmp	.-154    	; 0xb286 <vfprintf+0x7c>
    b320:	98 2f       	mov	r25, r24
    b322:	9f 7d       	andi	r25, 0xDF	; 223
    b324:	95 54       	subi	r25, 0x45	; 69
    b326:	93 30       	cpi	r25, 0x03	; 3
    b328:	28 f4       	brcc	.+10     	; 0xb334 <vfprintf+0x12a>
    b32a:	0c 5f       	subi	r16, 0xFC	; 252
    b32c:	1f 4f       	sbci	r17, 0xFF	; 255
    b32e:	9f e3       	ldi	r25, 0x3F	; 63
    b330:	99 83       	std	Y+1, r25	; 0x01
    b332:	0d c0       	rjmp	.+26     	; 0xb34e <vfprintf+0x144>
    b334:	83 36       	cpi	r24, 0x63	; 99
    b336:	31 f0       	breq	.+12     	; 0xb344 <vfprintf+0x13a>
    b338:	83 37       	cpi	r24, 0x73	; 115
    b33a:	71 f0       	breq	.+28     	; 0xb358 <vfprintf+0x14e>
    b33c:	83 35       	cpi	r24, 0x53	; 83
    b33e:	09 f0       	breq	.+2      	; 0xb342 <vfprintf+0x138>
    b340:	55 c0       	rjmp	.+170    	; 0xb3ec <vfprintf+0x1e2>
    b342:	20 c0       	rjmp	.+64     	; 0xb384 <vfprintf+0x17a>
    b344:	f8 01       	movw	r30, r16
    b346:	80 81       	ld	r24, Z
    b348:	89 83       	std	Y+1, r24	; 0x01
    b34a:	0e 5f       	subi	r16, 0xFE	; 254
    b34c:	1f 4f       	sbci	r17, 0xFF	; 255
    b34e:	88 24       	eor	r8, r8
    b350:	83 94       	inc	r8
    b352:	91 2c       	mov	r9, r1
    b354:	53 01       	movw	r10, r6
    b356:	12 c0       	rjmp	.+36     	; 0xb37c <vfprintf+0x172>
    b358:	28 01       	movw	r4, r16
    b35a:	f2 e0       	ldi	r31, 0x02	; 2
    b35c:	4f 0e       	add	r4, r31
    b35e:	51 1c       	adc	r5, r1
    b360:	f8 01       	movw	r30, r16
    b362:	a0 80       	ld	r10, Z
    b364:	b1 80       	ldd	r11, Z+1	; 0x01
    b366:	36 fe       	sbrs	r3, 6
    b368:	03 c0       	rjmp	.+6      	; 0xb370 <vfprintf+0x166>
    b36a:	69 2d       	mov	r22, r9
    b36c:	70 e0       	ldi	r23, 0x00	; 0
    b36e:	02 c0       	rjmp	.+4      	; 0xb374 <vfprintf+0x16a>
    b370:	6f ef       	ldi	r22, 0xFF	; 255
    b372:	7f ef       	ldi	r23, 0xFF	; 255
    b374:	c5 01       	movw	r24, r10
    b376:	8d d2       	rcall	.+1306   	; 0xb892 <strnlen>
    b378:	4c 01       	movw	r8, r24
    b37a:	82 01       	movw	r16, r4
    b37c:	f3 2d       	mov	r31, r3
    b37e:	ff 77       	andi	r31, 0x7F	; 127
    b380:	3f 2e       	mov	r3, r31
    b382:	15 c0       	rjmp	.+42     	; 0xb3ae <vfprintf+0x1a4>
    b384:	28 01       	movw	r4, r16
    b386:	22 e0       	ldi	r18, 0x02	; 2
    b388:	42 0e       	add	r4, r18
    b38a:	51 1c       	adc	r5, r1
    b38c:	f8 01       	movw	r30, r16
    b38e:	a0 80       	ld	r10, Z
    b390:	b1 80       	ldd	r11, Z+1	; 0x01
    b392:	36 fe       	sbrs	r3, 6
    b394:	03 c0       	rjmp	.+6      	; 0xb39c <vfprintf+0x192>
    b396:	69 2d       	mov	r22, r9
    b398:	70 e0       	ldi	r23, 0x00	; 0
    b39a:	02 c0       	rjmp	.+4      	; 0xb3a0 <vfprintf+0x196>
    b39c:	6f ef       	ldi	r22, 0xFF	; 255
    b39e:	7f ef       	ldi	r23, 0xFF	; 255
    b3a0:	c5 01       	movw	r24, r10
    b3a2:	65 d2       	rcall	.+1226   	; 0xb86e <strnlen_P>
    b3a4:	4c 01       	movw	r8, r24
    b3a6:	f3 2d       	mov	r31, r3
    b3a8:	f0 68       	ori	r31, 0x80	; 128
    b3aa:	3f 2e       	mov	r3, r31
    b3ac:	82 01       	movw	r16, r4
    b3ae:	33 fc       	sbrc	r3, 3
    b3b0:	19 c0       	rjmp	.+50     	; 0xb3e4 <vfprintf+0x1da>
    b3b2:	82 2d       	mov	r24, r2
    b3b4:	90 e0       	ldi	r25, 0x00	; 0
    b3b6:	88 16       	cp	r8, r24
    b3b8:	99 06       	cpc	r9, r25
    b3ba:	a0 f4       	brcc	.+40     	; 0xb3e4 <vfprintf+0x1da>
    b3bc:	b6 01       	movw	r22, r12
    b3be:	80 e2       	ldi	r24, 0x20	; 32
    b3c0:	90 e0       	ldi	r25, 0x00	; 0
    b3c2:	72 d2       	rcall	.+1252   	; 0xb8a8 <fputc>
    b3c4:	2a 94       	dec	r2
    b3c6:	f5 cf       	rjmp	.-22     	; 0xb3b2 <vfprintf+0x1a8>
    b3c8:	f5 01       	movw	r30, r10
    b3ca:	37 fc       	sbrc	r3, 7
    b3cc:	85 91       	lpm	r24, Z+
    b3ce:	37 fe       	sbrs	r3, 7
    b3d0:	81 91       	ld	r24, Z+
    b3d2:	5f 01       	movw	r10, r30
    b3d4:	b6 01       	movw	r22, r12
    b3d6:	90 e0       	ldi	r25, 0x00	; 0
    b3d8:	67 d2       	rcall	.+1230   	; 0xb8a8 <fputc>
    b3da:	21 10       	cpse	r2, r1
    b3dc:	2a 94       	dec	r2
    b3de:	21 e0       	ldi	r18, 0x01	; 1
    b3e0:	82 1a       	sub	r8, r18
    b3e2:	91 08       	sbc	r9, r1
    b3e4:	81 14       	cp	r8, r1
    b3e6:	91 04       	cpc	r9, r1
    b3e8:	79 f7       	brne	.-34     	; 0xb3c8 <vfprintf+0x1be>
    b3ea:	e1 c0       	rjmp	.+450    	; 0xb5ae <vfprintf+0x3a4>
    b3ec:	84 36       	cpi	r24, 0x64	; 100
    b3ee:	11 f0       	breq	.+4      	; 0xb3f4 <vfprintf+0x1ea>
    b3f0:	89 36       	cpi	r24, 0x69	; 105
    b3f2:	39 f5       	brne	.+78     	; 0xb442 <vfprintf+0x238>
    b3f4:	f8 01       	movw	r30, r16
    b3f6:	37 fe       	sbrs	r3, 7
    b3f8:	07 c0       	rjmp	.+14     	; 0xb408 <vfprintf+0x1fe>
    b3fa:	60 81       	ld	r22, Z
    b3fc:	71 81       	ldd	r23, Z+1	; 0x01
    b3fe:	82 81       	ldd	r24, Z+2	; 0x02
    b400:	93 81       	ldd	r25, Z+3	; 0x03
    b402:	0c 5f       	subi	r16, 0xFC	; 252
    b404:	1f 4f       	sbci	r17, 0xFF	; 255
    b406:	08 c0       	rjmp	.+16     	; 0xb418 <vfprintf+0x20e>
    b408:	60 81       	ld	r22, Z
    b40a:	71 81       	ldd	r23, Z+1	; 0x01
    b40c:	07 2e       	mov	r0, r23
    b40e:	00 0c       	add	r0, r0
    b410:	88 0b       	sbc	r24, r24
    b412:	99 0b       	sbc	r25, r25
    b414:	0e 5f       	subi	r16, 0xFE	; 254
    b416:	1f 4f       	sbci	r17, 0xFF	; 255
    b418:	f3 2d       	mov	r31, r3
    b41a:	ff 76       	andi	r31, 0x6F	; 111
    b41c:	3f 2e       	mov	r3, r31
    b41e:	97 ff       	sbrs	r25, 7
    b420:	09 c0       	rjmp	.+18     	; 0xb434 <vfprintf+0x22a>
    b422:	90 95       	com	r25
    b424:	80 95       	com	r24
    b426:	70 95       	com	r23
    b428:	61 95       	neg	r22
    b42a:	7f 4f       	sbci	r23, 0xFF	; 255
    b42c:	8f 4f       	sbci	r24, 0xFF	; 255
    b42e:	9f 4f       	sbci	r25, 0xFF	; 255
    b430:	f0 68       	ori	r31, 0x80	; 128
    b432:	3f 2e       	mov	r3, r31
    b434:	2a e0       	ldi	r18, 0x0A	; 10
    b436:	30 e0       	ldi	r19, 0x00	; 0
    b438:	a3 01       	movw	r20, r6
    b43a:	72 d2       	rcall	.+1252   	; 0xb920 <__ultoa_invert>
    b43c:	88 2e       	mov	r8, r24
    b43e:	86 18       	sub	r8, r6
    b440:	44 c0       	rjmp	.+136    	; 0xb4ca <vfprintf+0x2c0>
    b442:	85 37       	cpi	r24, 0x75	; 117
    b444:	31 f4       	brne	.+12     	; 0xb452 <vfprintf+0x248>
    b446:	23 2d       	mov	r18, r3
    b448:	2f 7e       	andi	r18, 0xEF	; 239
    b44a:	b2 2e       	mov	r11, r18
    b44c:	2a e0       	ldi	r18, 0x0A	; 10
    b44e:	30 e0       	ldi	r19, 0x00	; 0
    b450:	25 c0       	rjmp	.+74     	; 0xb49c <vfprintf+0x292>
    b452:	93 2d       	mov	r25, r3
    b454:	99 7f       	andi	r25, 0xF9	; 249
    b456:	b9 2e       	mov	r11, r25
    b458:	8f 36       	cpi	r24, 0x6F	; 111
    b45a:	c1 f0       	breq	.+48     	; 0xb48c <vfprintf+0x282>
    b45c:	18 f4       	brcc	.+6      	; 0xb464 <vfprintf+0x25a>
    b45e:	88 35       	cpi	r24, 0x58	; 88
    b460:	79 f0       	breq	.+30     	; 0xb480 <vfprintf+0x276>
    b462:	ae c0       	rjmp	.+348    	; 0xb5c0 <vfprintf+0x3b6>
    b464:	80 37       	cpi	r24, 0x70	; 112
    b466:	19 f0       	breq	.+6      	; 0xb46e <vfprintf+0x264>
    b468:	88 37       	cpi	r24, 0x78	; 120
    b46a:	21 f0       	breq	.+8      	; 0xb474 <vfprintf+0x26a>
    b46c:	a9 c0       	rjmp	.+338    	; 0xb5c0 <vfprintf+0x3b6>
    b46e:	e9 2f       	mov	r30, r25
    b470:	e0 61       	ori	r30, 0x10	; 16
    b472:	be 2e       	mov	r11, r30
    b474:	b4 fe       	sbrs	r11, 4
    b476:	0d c0       	rjmp	.+26     	; 0xb492 <vfprintf+0x288>
    b478:	fb 2d       	mov	r31, r11
    b47a:	f4 60       	ori	r31, 0x04	; 4
    b47c:	bf 2e       	mov	r11, r31
    b47e:	09 c0       	rjmp	.+18     	; 0xb492 <vfprintf+0x288>
    b480:	34 fe       	sbrs	r3, 4
    b482:	0a c0       	rjmp	.+20     	; 0xb498 <vfprintf+0x28e>
    b484:	29 2f       	mov	r18, r25
    b486:	26 60       	ori	r18, 0x06	; 6
    b488:	b2 2e       	mov	r11, r18
    b48a:	06 c0       	rjmp	.+12     	; 0xb498 <vfprintf+0x28e>
    b48c:	28 e0       	ldi	r18, 0x08	; 8
    b48e:	30 e0       	ldi	r19, 0x00	; 0
    b490:	05 c0       	rjmp	.+10     	; 0xb49c <vfprintf+0x292>
    b492:	20 e1       	ldi	r18, 0x10	; 16
    b494:	30 e0       	ldi	r19, 0x00	; 0
    b496:	02 c0       	rjmp	.+4      	; 0xb49c <vfprintf+0x292>
    b498:	20 e1       	ldi	r18, 0x10	; 16
    b49a:	32 e0       	ldi	r19, 0x02	; 2
    b49c:	f8 01       	movw	r30, r16
    b49e:	b7 fe       	sbrs	r11, 7
    b4a0:	07 c0       	rjmp	.+14     	; 0xb4b0 <vfprintf+0x2a6>
    b4a2:	60 81       	ld	r22, Z
    b4a4:	71 81       	ldd	r23, Z+1	; 0x01
    b4a6:	82 81       	ldd	r24, Z+2	; 0x02
    b4a8:	93 81       	ldd	r25, Z+3	; 0x03
    b4aa:	0c 5f       	subi	r16, 0xFC	; 252
    b4ac:	1f 4f       	sbci	r17, 0xFF	; 255
    b4ae:	06 c0       	rjmp	.+12     	; 0xb4bc <vfprintf+0x2b2>
    b4b0:	60 81       	ld	r22, Z
    b4b2:	71 81       	ldd	r23, Z+1	; 0x01
    b4b4:	80 e0       	ldi	r24, 0x00	; 0
    b4b6:	90 e0       	ldi	r25, 0x00	; 0
    b4b8:	0e 5f       	subi	r16, 0xFE	; 254
    b4ba:	1f 4f       	sbci	r17, 0xFF	; 255
    b4bc:	a3 01       	movw	r20, r6
    b4be:	30 d2       	rcall	.+1120   	; 0xb920 <__ultoa_invert>
    b4c0:	88 2e       	mov	r8, r24
    b4c2:	86 18       	sub	r8, r6
    b4c4:	fb 2d       	mov	r31, r11
    b4c6:	ff 77       	andi	r31, 0x7F	; 127
    b4c8:	3f 2e       	mov	r3, r31
    b4ca:	36 fe       	sbrs	r3, 6
    b4cc:	0d c0       	rjmp	.+26     	; 0xb4e8 <vfprintf+0x2de>
    b4ce:	23 2d       	mov	r18, r3
    b4d0:	2e 7f       	andi	r18, 0xFE	; 254
    b4d2:	a2 2e       	mov	r10, r18
    b4d4:	89 14       	cp	r8, r9
    b4d6:	58 f4       	brcc	.+22     	; 0xb4ee <vfprintf+0x2e4>
    b4d8:	34 fe       	sbrs	r3, 4
    b4da:	0b c0       	rjmp	.+22     	; 0xb4f2 <vfprintf+0x2e8>
    b4dc:	32 fc       	sbrc	r3, 2
    b4de:	09 c0       	rjmp	.+18     	; 0xb4f2 <vfprintf+0x2e8>
    b4e0:	83 2d       	mov	r24, r3
    b4e2:	8e 7e       	andi	r24, 0xEE	; 238
    b4e4:	a8 2e       	mov	r10, r24
    b4e6:	05 c0       	rjmp	.+10     	; 0xb4f2 <vfprintf+0x2e8>
    b4e8:	b8 2c       	mov	r11, r8
    b4ea:	a3 2c       	mov	r10, r3
    b4ec:	03 c0       	rjmp	.+6      	; 0xb4f4 <vfprintf+0x2ea>
    b4ee:	b8 2c       	mov	r11, r8
    b4f0:	01 c0       	rjmp	.+2      	; 0xb4f4 <vfprintf+0x2ea>
    b4f2:	b9 2c       	mov	r11, r9
    b4f4:	a4 fe       	sbrs	r10, 4
    b4f6:	0f c0       	rjmp	.+30     	; 0xb516 <vfprintf+0x30c>
    b4f8:	fe 01       	movw	r30, r28
    b4fa:	e8 0d       	add	r30, r8
    b4fc:	f1 1d       	adc	r31, r1
    b4fe:	80 81       	ld	r24, Z
    b500:	80 33       	cpi	r24, 0x30	; 48
    b502:	21 f4       	brne	.+8      	; 0xb50c <vfprintf+0x302>
    b504:	9a 2d       	mov	r25, r10
    b506:	99 7e       	andi	r25, 0xE9	; 233
    b508:	a9 2e       	mov	r10, r25
    b50a:	09 c0       	rjmp	.+18     	; 0xb51e <vfprintf+0x314>
    b50c:	a2 fe       	sbrs	r10, 2
    b50e:	06 c0       	rjmp	.+12     	; 0xb51c <vfprintf+0x312>
    b510:	b3 94       	inc	r11
    b512:	b3 94       	inc	r11
    b514:	04 c0       	rjmp	.+8      	; 0xb51e <vfprintf+0x314>
    b516:	8a 2d       	mov	r24, r10
    b518:	86 78       	andi	r24, 0x86	; 134
    b51a:	09 f0       	breq	.+2      	; 0xb51e <vfprintf+0x314>
    b51c:	b3 94       	inc	r11
    b51e:	a3 fc       	sbrc	r10, 3
    b520:	10 c0       	rjmp	.+32     	; 0xb542 <vfprintf+0x338>
    b522:	a0 fe       	sbrs	r10, 0
    b524:	06 c0       	rjmp	.+12     	; 0xb532 <vfprintf+0x328>
    b526:	b2 14       	cp	r11, r2
    b528:	80 f4       	brcc	.+32     	; 0xb54a <vfprintf+0x340>
    b52a:	28 0c       	add	r2, r8
    b52c:	92 2c       	mov	r9, r2
    b52e:	9b 18       	sub	r9, r11
    b530:	0d c0       	rjmp	.+26     	; 0xb54c <vfprintf+0x342>
    b532:	b2 14       	cp	r11, r2
    b534:	58 f4       	brcc	.+22     	; 0xb54c <vfprintf+0x342>
    b536:	b6 01       	movw	r22, r12
    b538:	80 e2       	ldi	r24, 0x20	; 32
    b53a:	90 e0       	ldi	r25, 0x00	; 0
    b53c:	b5 d1       	rcall	.+874    	; 0xb8a8 <fputc>
    b53e:	b3 94       	inc	r11
    b540:	f8 cf       	rjmp	.-16     	; 0xb532 <vfprintf+0x328>
    b542:	b2 14       	cp	r11, r2
    b544:	18 f4       	brcc	.+6      	; 0xb54c <vfprintf+0x342>
    b546:	2b 18       	sub	r2, r11
    b548:	02 c0       	rjmp	.+4      	; 0xb54e <vfprintf+0x344>
    b54a:	98 2c       	mov	r9, r8
    b54c:	21 2c       	mov	r2, r1
    b54e:	a4 fe       	sbrs	r10, 4
    b550:	0f c0       	rjmp	.+30     	; 0xb570 <vfprintf+0x366>
    b552:	b6 01       	movw	r22, r12
    b554:	80 e3       	ldi	r24, 0x30	; 48
    b556:	90 e0       	ldi	r25, 0x00	; 0
    b558:	a7 d1       	rcall	.+846    	; 0xb8a8 <fputc>
    b55a:	a2 fe       	sbrs	r10, 2
    b55c:	16 c0       	rjmp	.+44     	; 0xb58a <vfprintf+0x380>
    b55e:	a1 fc       	sbrc	r10, 1
    b560:	03 c0       	rjmp	.+6      	; 0xb568 <vfprintf+0x35e>
    b562:	88 e7       	ldi	r24, 0x78	; 120
    b564:	90 e0       	ldi	r25, 0x00	; 0
    b566:	02 c0       	rjmp	.+4      	; 0xb56c <vfprintf+0x362>
    b568:	88 e5       	ldi	r24, 0x58	; 88
    b56a:	90 e0       	ldi	r25, 0x00	; 0
    b56c:	b6 01       	movw	r22, r12
    b56e:	0c c0       	rjmp	.+24     	; 0xb588 <vfprintf+0x37e>
    b570:	8a 2d       	mov	r24, r10
    b572:	86 78       	andi	r24, 0x86	; 134
    b574:	51 f0       	breq	.+20     	; 0xb58a <vfprintf+0x380>
    b576:	a1 fe       	sbrs	r10, 1
    b578:	02 c0       	rjmp	.+4      	; 0xb57e <vfprintf+0x374>
    b57a:	8b e2       	ldi	r24, 0x2B	; 43
    b57c:	01 c0       	rjmp	.+2      	; 0xb580 <vfprintf+0x376>
    b57e:	80 e2       	ldi	r24, 0x20	; 32
    b580:	a7 fc       	sbrc	r10, 7
    b582:	8d e2       	ldi	r24, 0x2D	; 45
    b584:	b6 01       	movw	r22, r12
    b586:	90 e0       	ldi	r25, 0x00	; 0
    b588:	8f d1       	rcall	.+798    	; 0xb8a8 <fputc>
    b58a:	89 14       	cp	r8, r9
    b58c:	30 f4       	brcc	.+12     	; 0xb59a <vfprintf+0x390>
    b58e:	b6 01       	movw	r22, r12
    b590:	80 e3       	ldi	r24, 0x30	; 48
    b592:	90 e0       	ldi	r25, 0x00	; 0
    b594:	89 d1       	rcall	.+786    	; 0xb8a8 <fputc>
    b596:	9a 94       	dec	r9
    b598:	f8 cf       	rjmp	.-16     	; 0xb58a <vfprintf+0x380>
    b59a:	8a 94       	dec	r8
    b59c:	f3 01       	movw	r30, r6
    b59e:	e8 0d       	add	r30, r8
    b5a0:	f1 1d       	adc	r31, r1
    b5a2:	80 81       	ld	r24, Z
    b5a4:	b6 01       	movw	r22, r12
    b5a6:	90 e0       	ldi	r25, 0x00	; 0
    b5a8:	7f d1       	rcall	.+766    	; 0xb8a8 <fputc>
    b5aa:	81 10       	cpse	r8, r1
    b5ac:	f6 cf       	rjmp	.-20     	; 0xb59a <vfprintf+0x390>
    b5ae:	22 20       	and	r2, r2
    b5b0:	09 f4       	brne	.+2      	; 0xb5b4 <vfprintf+0x3aa>
    b5b2:	4e ce       	rjmp	.-868    	; 0xb250 <vfprintf+0x46>
    b5b4:	b6 01       	movw	r22, r12
    b5b6:	80 e2       	ldi	r24, 0x20	; 32
    b5b8:	90 e0       	ldi	r25, 0x00	; 0
    b5ba:	76 d1       	rcall	.+748    	; 0xb8a8 <fputc>
    b5bc:	2a 94       	dec	r2
    b5be:	f7 cf       	rjmp	.-18     	; 0xb5ae <vfprintf+0x3a4>
    b5c0:	f6 01       	movw	r30, r12
    b5c2:	86 81       	ldd	r24, Z+6	; 0x06
    b5c4:	97 81       	ldd	r25, Z+7	; 0x07
    b5c6:	02 c0       	rjmp	.+4      	; 0xb5cc <vfprintf+0x3c2>
    b5c8:	8f ef       	ldi	r24, 0xFF	; 255
    b5ca:	9f ef       	ldi	r25, 0xFF	; 255
    b5cc:	2b 96       	adiw	r28, 0x0b	; 11
    b5ce:	cd bf       	out	0x3d, r28	; 61
    b5d0:	de bf       	out	0x3e, r29	; 62
    b5d2:	df 91       	pop	r29
    b5d4:	cf 91       	pop	r28
    b5d6:	1f 91       	pop	r17
    b5d8:	0f 91       	pop	r16
    b5da:	ff 90       	pop	r15
    b5dc:	ef 90       	pop	r14
    b5de:	df 90       	pop	r13
    b5e0:	cf 90       	pop	r12
    b5e2:	bf 90       	pop	r11
    b5e4:	af 90       	pop	r10
    b5e6:	9f 90       	pop	r9
    b5e8:	8f 90       	pop	r8
    b5ea:	7f 90       	pop	r7
    b5ec:	6f 90       	pop	r6
    b5ee:	5f 90       	pop	r5
    b5f0:	4f 90       	pop	r4
    b5f2:	3f 90       	pop	r3
    b5f4:	2f 90       	pop	r2
    b5f6:	08 95       	ret

0000b5f8 <calloc>:
    b5f8:	0f 93       	push	r16
    b5fa:	1f 93       	push	r17
    b5fc:	cf 93       	push	r28
    b5fe:	df 93       	push	r29
    b600:	86 9f       	mul	r24, r22
    b602:	80 01       	movw	r16, r0
    b604:	87 9f       	mul	r24, r23
    b606:	10 0d       	add	r17, r0
    b608:	96 9f       	mul	r25, r22
    b60a:	10 0d       	add	r17, r0
    b60c:	11 24       	eor	r1, r1
    b60e:	c8 01       	movw	r24, r16
    b610:	0d d0       	rcall	.+26     	; 0xb62c <malloc>
    b612:	ec 01       	movw	r28, r24
    b614:	00 97       	sbiw	r24, 0x00	; 0
    b616:	21 f0       	breq	.+8      	; 0xb620 <calloc+0x28>
    b618:	a8 01       	movw	r20, r16
    b61a:	60 e0       	ldi	r22, 0x00	; 0
    b61c:	70 e0       	ldi	r23, 0x00	; 0
    b61e:	32 d1       	rcall	.+612    	; 0xb884 <memset>
    b620:	ce 01       	movw	r24, r28
    b622:	df 91       	pop	r29
    b624:	cf 91       	pop	r28
    b626:	1f 91       	pop	r17
    b628:	0f 91       	pop	r16
    b62a:	08 95       	ret

0000b62c <malloc>:
    b62c:	0f 93       	push	r16
    b62e:	1f 93       	push	r17
    b630:	cf 93       	push	r28
    b632:	df 93       	push	r29
    b634:	82 30       	cpi	r24, 0x02	; 2
    b636:	91 05       	cpc	r25, r1
    b638:	10 f4       	brcc	.+4      	; 0xb63e <malloc+0x12>
    b63a:	82 e0       	ldi	r24, 0x02	; 2
    b63c:	90 e0       	ldi	r25, 0x00	; 0
    b63e:	e0 91 f9 2a 	lds	r30, 0x2AF9	; 0x802af9 <__flp>
    b642:	f0 91 fa 2a 	lds	r31, 0x2AFA	; 0x802afa <__flp+0x1>
    b646:	20 e0       	ldi	r18, 0x00	; 0
    b648:	30 e0       	ldi	r19, 0x00	; 0
    b64a:	a0 e0       	ldi	r26, 0x00	; 0
    b64c:	b0 e0       	ldi	r27, 0x00	; 0
    b64e:	30 97       	sbiw	r30, 0x00	; 0
    b650:	19 f1       	breq	.+70     	; 0xb698 <malloc+0x6c>
    b652:	40 81       	ld	r20, Z
    b654:	51 81       	ldd	r21, Z+1	; 0x01
    b656:	02 81       	ldd	r16, Z+2	; 0x02
    b658:	13 81       	ldd	r17, Z+3	; 0x03
    b65a:	48 17       	cp	r20, r24
    b65c:	59 07       	cpc	r21, r25
    b65e:	c8 f0       	brcs	.+50     	; 0xb692 <malloc+0x66>
    b660:	84 17       	cp	r24, r20
    b662:	95 07       	cpc	r25, r21
    b664:	69 f4       	brne	.+26     	; 0xb680 <malloc+0x54>
    b666:	10 97       	sbiw	r26, 0x00	; 0
    b668:	31 f0       	breq	.+12     	; 0xb676 <malloc+0x4a>
    b66a:	12 96       	adiw	r26, 0x02	; 2
    b66c:	0c 93       	st	X, r16
    b66e:	12 97       	sbiw	r26, 0x02	; 2
    b670:	13 96       	adiw	r26, 0x03	; 3
    b672:	1c 93       	st	X, r17
    b674:	27 c0       	rjmp	.+78     	; 0xb6c4 <malloc+0x98>
    b676:	00 93 f9 2a 	sts	0x2AF9, r16	; 0x802af9 <__flp>
    b67a:	10 93 fa 2a 	sts	0x2AFA, r17	; 0x802afa <__flp+0x1>
    b67e:	22 c0       	rjmp	.+68     	; 0xb6c4 <malloc+0x98>
    b680:	21 15       	cp	r18, r1
    b682:	31 05       	cpc	r19, r1
    b684:	19 f0       	breq	.+6      	; 0xb68c <malloc+0x60>
    b686:	42 17       	cp	r20, r18
    b688:	53 07       	cpc	r21, r19
    b68a:	18 f4       	brcc	.+6      	; 0xb692 <malloc+0x66>
    b68c:	9a 01       	movw	r18, r20
    b68e:	bd 01       	movw	r22, r26
    b690:	ef 01       	movw	r28, r30
    b692:	df 01       	movw	r26, r30
    b694:	f8 01       	movw	r30, r16
    b696:	db cf       	rjmp	.-74     	; 0xb64e <malloc+0x22>
    b698:	21 15       	cp	r18, r1
    b69a:	31 05       	cpc	r19, r1
    b69c:	f9 f0       	breq	.+62     	; 0xb6dc <malloc+0xb0>
    b69e:	28 1b       	sub	r18, r24
    b6a0:	39 0b       	sbc	r19, r25
    b6a2:	24 30       	cpi	r18, 0x04	; 4
    b6a4:	31 05       	cpc	r19, r1
    b6a6:	80 f4       	brcc	.+32     	; 0xb6c8 <malloc+0x9c>
    b6a8:	8a 81       	ldd	r24, Y+2	; 0x02
    b6aa:	9b 81       	ldd	r25, Y+3	; 0x03
    b6ac:	61 15       	cp	r22, r1
    b6ae:	71 05       	cpc	r23, r1
    b6b0:	21 f0       	breq	.+8      	; 0xb6ba <malloc+0x8e>
    b6b2:	fb 01       	movw	r30, r22
    b6b4:	82 83       	std	Z+2, r24	; 0x02
    b6b6:	93 83       	std	Z+3, r25	; 0x03
    b6b8:	04 c0       	rjmp	.+8      	; 0xb6c2 <malloc+0x96>
    b6ba:	80 93 f9 2a 	sts	0x2AF9, r24	; 0x802af9 <__flp>
    b6be:	90 93 fa 2a 	sts	0x2AFA, r25	; 0x802afa <__flp+0x1>
    b6c2:	fe 01       	movw	r30, r28
    b6c4:	32 96       	adiw	r30, 0x02	; 2
    b6c6:	44 c0       	rjmp	.+136    	; 0xb750 <malloc+0x124>
    b6c8:	fe 01       	movw	r30, r28
    b6ca:	e2 0f       	add	r30, r18
    b6cc:	f3 1f       	adc	r31, r19
    b6ce:	81 93       	st	Z+, r24
    b6d0:	91 93       	st	Z+, r25
    b6d2:	22 50       	subi	r18, 0x02	; 2
    b6d4:	31 09       	sbc	r19, r1
    b6d6:	28 83       	st	Y, r18
    b6d8:	39 83       	std	Y+1, r19	; 0x01
    b6da:	3a c0       	rjmp	.+116    	; 0xb750 <malloc+0x124>
    b6dc:	20 91 f7 2a 	lds	r18, 0x2AF7	; 0x802af7 <__brkval>
    b6e0:	30 91 f8 2a 	lds	r19, 0x2AF8	; 0x802af8 <__brkval+0x1>
    b6e4:	23 2b       	or	r18, r19
    b6e6:	41 f4       	brne	.+16     	; 0xb6f8 <malloc+0xcc>
    b6e8:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    b6ec:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    b6f0:	20 93 f7 2a 	sts	0x2AF7, r18	; 0x802af7 <__brkval>
    b6f4:	30 93 f8 2a 	sts	0x2AF8, r19	; 0x802af8 <__brkval+0x1>
    b6f8:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    b6fc:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    b700:	21 15       	cp	r18, r1
    b702:	31 05       	cpc	r19, r1
    b704:	41 f4       	brne	.+16     	; 0xb716 <malloc+0xea>
    b706:	2d b7       	in	r18, 0x3d	; 61
    b708:	3e b7       	in	r19, 0x3e	; 62
    b70a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    b70e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    b712:	24 1b       	sub	r18, r20
    b714:	35 0b       	sbc	r19, r21
    b716:	e0 91 f7 2a 	lds	r30, 0x2AF7	; 0x802af7 <__brkval>
    b71a:	f0 91 f8 2a 	lds	r31, 0x2AF8	; 0x802af8 <__brkval+0x1>
    b71e:	e2 17       	cp	r30, r18
    b720:	f3 07       	cpc	r31, r19
    b722:	a0 f4       	brcc	.+40     	; 0xb74c <malloc+0x120>
    b724:	2e 1b       	sub	r18, r30
    b726:	3f 0b       	sbc	r19, r31
    b728:	28 17       	cp	r18, r24
    b72a:	39 07       	cpc	r19, r25
    b72c:	78 f0       	brcs	.+30     	; 0xb74c <malloc+0x120>
    b72e:	ac 01       	movw	r20, r24
    b730:	4e 5f       	subi	r20, 0xFE	; 254
    b732:	5f 4f       	sbci	r21, 0xFF	; 255
    b734:	24 17       	cp	r18, r20
    b736:	35 07       	cpc	r19, r21
    b738:	48 f0       	brcs	.+18     	; 0xb74c <malloc+0x120>
    b73a:	4e 0f       	add	r20, r30
    b73c:	5f 1f       	adc	r21, r31
    b73e:	40 93 f7 2a 	sts	0x2AF7, r20	; 0x802af7 <__brkval>
    b742:	50 93 f8 2a 	sts	0x2AF8, r21	; 0x802af8 <__brkval+0x1>
    b746:	81 93       	st	Z+, r24
    b748:	91 93       	st	Z+, r25
    b74a:	02 c0       	rjmp	.+4      	; 0xb750 <malloc+0x124>
    b74c:	e0 e0       	ldi	r30, 0x00	; 0
    b74e:	f0 e0       	ldi	r31, 0x00	; 0
    b750:	cf 01       	movw	r24, r30
    b752:	df 91       	pop	r29
    b754:	cf 91       	pop	r28
    b756:	1f 91       	pop	r17
    b758:	0f 91       	pop	r16
    b75a:	08 95       	ret

0000b75c <free>:
    b75c:	cf 93       	push	r28
    b75e:	df 93       	push	r29
    b760:	00 97       	sbiw	r24, 0x00	; 0
    b762:	09 f4       	brne	.+2      	; 0xb766 <free+0xa>
    b764:	81 c0       	rjmp	.+258    	; 0xb868 <free+0x10c>
    b766:	fc 01       	movw	r30, r24
    b768:	32 97       	sbiw	r30, 0x02	; 2
    b76a:	12 82       	std	Z+2, r1	; 0x02
    b76c:	13 82       	std	Z+3, r1	; 0x03
    b76e:	a0 91 f9 2a 	lds	r26, 0x2AF9	; 0x802af9 <__flp>
    b772:	b0 91 fa 2a 	lds	r27, 0x2AFA	; 0x802afa <__flp+0x1>
    b776:	10 97       	sbiw	r26, 0x00	; 0
    b778:	81 f4       	brne	.+32     	; 0xb79a <free+0x3e>
    b77a:	20 81       	ld	r18, Z
    b77c:	31 81       	ldd	r19, Z+1	; 0x01
    b77e:	82 0f       	add	r24, r18
    b780:	93 1f       	adc	r25, r19
    b782:	20 91 f7 2a 	lds	r18, 0x2AF7	; 0x802af7 <__brkval>
    b786:	30 91 f8 2a 	lds	r19, 0x2AF8	; 0x802af8 <__brkval+0x1>
    b78a:	28 17       	cp	r18, r24
    b78c:	39 07       	cpc	r19, r25
    b78e:	51 f5       	brne	.+84     	; 0xb7e4 <free+0x88>
    b790:	e0 93 f7 2a 	sts	0x2AF7, r30	; 0x802af7 <__brkval>
    b794:	f0 93 f8 2a 	sts	0x2AF8, r31	; 0x802af8 <__brkval+0x1>
    b798:	67 c0       	rjmp	.+206    	; 0xb868 <free+0x10c>
    b79a:	ed 01       	movw	r28, r26
    b79c:	20 e0       	ldi	r18, 0x00	; 0
    b79e:	30 e0       	ldi	r19, 0x00	; 0
    b7a0:	ce 17       	cp	r28, r30
    b7a2:	df 07       	cpc	r29, r31
    b7a4:	40 f4       	brcc	.+16     	; 0xb7b6 <free+0x5a>
    b7a6:	4a 81       	ldd	r20, Y+2	; 0x02
    b7a8:	5b 81       	ldd	r21, Y+3	; 0x03
    b7aa:	9e 01       	movw	r18, r28
    b7ac:	41 15       	cp	r20, r1
    b7ae:	51 05       	cpc	r21, r1
    b7b0:	f1 f0       	breq	.+60     	; 0xb7ee <free+0x92>
    b7b2:	ea 01       	movw	r28, r20
    b7b4:	f5 cf       	rjmp	.-22     	; 0xb7a0 <free+0x44>
    b7b6:	c2 83       	std	Z+2, r28	; 0x02
    b7b8:	d3 83       	std	Z+3, r29	; 0x03
    b7ba:	40 81       	ld	r20, Z
    b7bc:	51 81       	ldd	r21, Z+1	; 0x01
    b7be:	84 0f       	add	r24, r20
    b7c0:	95 1f       	adc	r25, r21
    b7c2:	c8 17       	cp	r28, r24
    b7c4:	d9 07       	cpc	r29, r25
    b7c6:	59 f4       	brne	.+22     	; 0xb7de <free+0x82>
    b7c8:	88 81       	ld	r24, Y
    b7ca:	99 81       	ldd	r25, Y+1	; 0x01
    b7cc:	84 0f       	add	r24, r20
    b7ce:	95 1f       	adc	r25, r21
    b7d0:	02 96       	adiw	r24, 0x02	; 2
    b7d2:	80 83       	st	Z, r24
    b7d4:	91 83       	std	Z+1, r25	; 0x01
    b7d6:	8a 81       	ldd	r24, Y+2	; 0x02
    b7d8:	9b 81       	ldd	r25, Y+3	; 0x03
    b7da:	82 83       	std	Z+2, r24	; 0x02
    b7dc:	93 83       	std	Z+3, r25	; 0x03
    b7de:	21 15       	cp	r18, r1
    b7e0:	31 05       	cpc	r19, r1
    b7e2:	29 f4       	brne	.+10     	; 0xb7ee <free+0x92>
    b7e4:	e0 93 f9 2a 	sts	0x2AF9, r30	; 0x802af9 <__flp>
    b7e8:	f0 93 fa 2a 	sts	0x2AFA, r31	; 0x802afa <__flp+0x1>
    b7ec:	3d c0       	rjmp	.+122    	; 0xb868 <free+0x10c>
    b7ee:	e9 01       	movw	r28, r18
    b7f0:	ea 83       	std	Y+2, r30	; 0x02
    b7f2:	fb 83       	std	Y+3, r31	; 0x03
    b7f4:	49 91       	ld	r20, Y+
    b7f6:	59 91       	ld	r21, Y+
    b7f8:	c4 0f       	add	r28, r20
    b7fa:	d5 1f       	adc	r29, r21
    b7fc:	ec 17       	cp	r30, r28
    b7fe:	fd 07       	cpc	r31, r29
    b800:	61 f4       	brne	.+24     	; 0xb81a <free+0xbe>
    b802:	80 81       	ld	r24, Z
    b804:	91 81       	ldd	r25, Z+1	; 0x01
    b806:	84 0f       	add	r24, r20
    b808:	95 1f       	adc	r25, r21
    b80a:	02 96       	adiw	r24, 0x02	; 2
    b80c:	e9 01       	movw	r28, r18
    b80e:	88 83       	st	Y, r24
    b810:	99 83       	std	Y+1, r25	; 0x01
    b812:	82 81       	ldd	r24, Z+2	; 0x02
    b814:	93 81       	ldd	r25, Z+3	; 0x03
    b816:	8a 83       	std	Y+2, r24	; 0x02
    b818:	9b 83       	std	Y+3, r25	; 0x03
    b81a:	e0 e0       	ldi	r30, 0x00	; 0
    b81c:	f0 e0       	ldi	r31, 0x00	; 0
    b81e:	12 96       	adiw	r26, 0x02	; 2
    b820:	8d 91       	ld	r24, X+
    b822:	9c 91       	ld	r25, X
    b824:	13 97       	sbiw	r26, 0x03	; 3
    b826:	00 97       	sbiw	r24, 0x00	; 0
    b828:	19 f0       	breq	.+6      	; 0xb830 <free+0xd4>
    b82a:	fd 01       	movw	r30, r26
    b82c:	dc 01       	movw	r26, r24
    b82e:	f7 cf       	rjmp	.-18     	; 0xb81e <free+0xc2>
    b830:	8d 91       	ld	r24, X+
    b832:	9c 91       	ld	r25, X
    b834:	11 97       	sbiw	r26, 0x01	; 1
    b836:	9d 01       	movw	r18, r26
    b838:	2e 5f       	subi	r18, 0xFE	; 254
    b83a:	3f 4f       	sbci	r19, 0xFF	; 255
    b83c:	82 0f       	add	r24, r18
    b83e:	93 1f       	adc	r25, r19
    b840:	20 91 f7 2a 	lds	r18, 0x2AF7	; 0x802af7 <__brkval>
    b844:	30 91 f8 2a 	lds	r19, 0x2AF8	; 0x802af8 <__brkval+0x1>
    b848:	28 17       	cp	r18, r24
    b84a:	39 07       	cpc	r19, r25
    b84c:	69 f4       	brne	.+26     	; 0xb868 <free+0x10c>
    b84e:	30 97       	sbiw	r30, 0x00	; 0
    b850:	29 f4       	brne	.+10     	; 0xb85c <free+0x100>
    b852:	10 92 f9 2a 	sts	0x2AF9, r1	; 0x802af9 <__flp>
    b856:	10 92 fa 2a 	sts	0x2AFA, r1	; 0x802afa <__flp+0x1>
    b85a:	02 c0       	rjmp	.+4      	; 0xb860 <free+0x104>
    b85c:	12 82       	std	Z+2, r1	; 0x02
    b85e:	13 82       	std	Z+3, r1	; 0x03
    b860:	a0 93 f7 2a 	sts	0x2AF7, r26	; 0x802af7 <__brkval>
    b864:	b0 93 f8 2a 	sts	0x2AF8, r27	; 0x802af8 <__brkval+0x1>
    b868:	df 91       	pop	r29
    b86a:	cf 91       	pop	r28
    b86c:	08 95       	ret

0000b86e <strnlen_P>:
    b86e:	fc 01       	movw	r30, r24
    b870:	05 90       	lpm	r0, Z+
    b872:	61 50       	subi	r22, 0x01	; 1
    b874:	70 40       	sbci	r23, 0x00	; 0
    b876:	01 10       	cpse	r0, r1
    b878:	d8 f7       	brcc	.-10     	; 0xb870 <strnlen_P+0x2>
    b87a:	80 95       	com	r24
    b87c:	90 95       	com	r25
    b87e:	8e 0f       	add	r24, r30
    b880:	9f 1f       	adc	r25, r31
    b882:	08 95       	ret

0000b884 <memset>:
    b884:	dc 01       	movw	r26, r24
    b886:	01 c0       	rjmp	.+2      	; 0xb88a <memset+0x6>
    b888:	6d 93       	st	X+, r22
    b88a:	41 50       	subi	r20, 0x01	; 1
    b88c:	50 40       	sbci	r21, 0x00	; 0
    b88e:	e0 f7       	brcc	.-8      	; 0xb888 <memset+0x4>
    b890:	08 95       	ret

0000b892 <strnlen>:
    b892:	fc 01       	movw	r30, r24
    b894:	61 50       	subi	r22, 0x01	; 1
    b896:	70 40       	sbci	r23, 0x00	; 0
    b898:	01 90       	ld	r0, Z+
    b89a:	01 10       	cpse	r0, r1
    b89c:	d8 f7       	brcc	.-10     	; 0xb894 <strnlen+0x2>
    b89e:	80 95       	com	r24
    b8a0:	90 95       	com	r25
    b8a2:	8e 0f       	add	r24, r30
    b8a4:	9f 1f       	adc	r25, r31
    b8a6:	08 95       	ret

0000b8a8 <fputc>:
    b8a8:	0f 93       	push	r16
    b8aa:	1f 93       	push	r17
    b8ac:	cf 93       	push	r28
    b8ae:	df 93       	push	r29
    b8b0:	fb 01       	movw	r30, r22
    b8b2:	23 81       	ldd	r18, Z+3	; 0x03
    b8b4:	21 fd       	sbrc	r18, 1
    b8b6:	03 c0       	rjmp	.+6      	; 0xb8be <fputc+0x16>
    b8b8:	8f ef       	ldi	r24, 0xFF	; 255
    b8ba:	9f ef       	ldi	r25, 0xFF	; 255
    b8bc:	2c c0       	rjmp	.+88     	; 0xb916 <fputc+0x6e>
    b8be:	22 ff       	sbrs	r18, 2
    b8c0:	16 c0       	rjmp	.+44     	; 0xb8ee <fputc+0x46>
    b8c2:	46 81       	ldd	r20, Z+6	; 0x06
    b8c4:	57 81       	ldd	r21, Z+7	; 0x07
    b8c6:	24 81       	ldd	r18, Z+4	; 0x04
    b8c8:	35 81       	ldd	r19, Z+5	; 0x05
    b8ca:	42 17       	cp	r20, r18
    b8cc:	53 07       	cpc	r21, r19
    b8ce:	44 f4       	brge	.+16     	; 0xb8e0 <fputc+0x38>
    b8d0:	a0 81       	ld	r26, Z
    b8d2:	b1 81       	ldd	r27, Z+1	; 0x01
    b8d4:	9d 01       	movw	r18, r26
    b8d6:	2f 5f       	subi	r18, 0xFF	; 255
    b8d8:	3f 4f       	sbci	r19, 0xFF	; 255
    b8da:	20 83       	st	Z, r18
    b8dc:	31 83       	std	Z+1, r19	; 0x01
    b8de:	8c 93       	st	X, r24
    b8e0:	26 81       	ldd	r18, Z+6	; 0x06
    b8e2:	37 81       	ldd	r19, Z+7	; 0x07
    b8e4:	2f 5f       	subi	r18, 0xFF	; 255
    b8e6:	3f 4f       	sbci	r19, 0xFF	; 255
    b8e8:	26 83       	std	Z+6, r18	; 0x06
    b8ea:	37 83       	std	Z+7, r19	; 0x07
    b8ec:	14 c0       	rjmp	.+40     	; 0xb916 <fputc+0x6e>
    b8ee:	8b 01       	movw	r16, r22
    b8f0:	ec 01       	movw	r28, r24
    b8f2:	fb 01       	movw	r30, r22
    b8f4:	00 84       	ldd	r0, Z+8	; 0x08
    b8f6:	f1 85       	ldd	r31, Z+9	; 0x09
    b8f8:	e0 2d       	mov	r30, r0
    b8fa:	19 95       	eicall
    b8fc:	89 2b       	or	r24, r25
    b8fe:	e1 f6       	brne	.-72     	; 0xb8b8 <fputc+0x10>
    b900:	d8 01       	movw	r26, r16
    b902:	16 96       	adiw	r26, 0x06	; 6
    b904:	8d 91       	ld	r24, X+
    b906:	9c 91       	ld	r25, X
    b908:	17 97       	sbiw	r26, 0x07	; 7
    b90a:	01 96       	adiw	r24, 0x01	; 1
    b90c:	16 96       	adiw	r26, 0x06	; 6
    b90e:	8d 93       	st	X+, r24
    b910:	9c 93       	st	X, r25
    b912:	17 97       	sbiw	r26, 0x07	; 7
    b914:	ce 01       	movw	r24, r28
    b916:	df 91       	pop	r29
    b918:	cf 91       	pop	r28
    b91a:	1f 91       	pop	r17
    b91c:	0f 91       	pop	r16
    b91e:	08 95       	ret

0000b920 <__ultoa_invert>:
    b920:	fa 01       	movw	r30, r20
    b922:	aa 27       	eor	r26, r26
    b924:	28 30       	cpi	r18, 0x08	; 8
    b926:	51 f1       	breq	.+84     	; 0xb97c <__ultoa_invert+0x5c>
    b928:	20 31       	cpi	r18, 0x10	; 16
    b92a:	81 f1       	breq	.+96     	; 0xb98c <__ultoa_invert+0x6c>
    b92c:	e8 94       	clt
    b92e:	6f 93       	push	r22
    b930:	6e 7f       	andi	r22, 0xFE	; 254
    b932:	6e 5f       	subi	r22, 0xFE	; 254
    b934:	7f 4f       	sbci	r23, 0xFF	; 255
    b936:	8f 4f       	sbci	r24, 0xFF	; 255
    b938:	9f 4f       	sbci	r25, 0xFF	; 255
    b93a:	af 4f       	sbci	r26, 0xFF	; 255
    b93c:	b1 e0       	ldi	r27, 0x01	; 1
    b93e:	3e d0       	rcall	.+124    	; 0xb9bc <__ultoa_invert+0x9c>
    b940:	b4 e0       	ldi	r27, 0x04	; 4
    b942:	3c d0       	rcall	.+120    	; 0xb9bc <__ultoa_invert+0x9c>
    b944:	67 0f       	add	r22, r23
    b946:	78 1f       	adc	r23, r24
    b948:	89 1f       	adc	r24, r25
    b94a:	9a 1f       	adc	r25, r26
    b94c:	a1 1d       	adc	r26, r1
    b94e:	68 0f       	add	r22, r24
    b950:	79 1f       	adc	r23, r25
    b952:	8a 1f       	adc	r24, r26
    b954:	91 1d       	adc	r25, r1
    b956:	a1 1d       	adc	r26, r1
    b958:	6a 0f       	add	r22, r26
    b95a:	71 1d       	adc	r23, r1
    b95c:	81 1d       	adc	r24, r1
    b95e:	91 1d       	adc	r25, r1
    b960:	a1 1d       	adc	r26, r1
    b962:	20 d0       	rcall	.+64     	; 0xb9a4 <__ultoa_invert+0x84>
    b964:	09 f4       	brne	.+2      	; 0xb968 <__ultoa_invert+0x48>
    b966:	68 94       	set
    b968:	3f 91       	pop	r19
    b96a:	2a e0       	ldi	r18, 0x0A	; 10
    b96c:	26 9f       	mul	r18, r22
    b96e:	11 24       	eor	r1, r1
    b970:	30 19       	sub	r19, r0
    b972:	30 5d       	subi	r19, 0xD0	; 208
    b974:	31 93       	st	Z+, r19
    b976:	de f6       	brtc	.-74     	; 0xb92e <__ultoa_invert+0xe>
    b978:	cf 01       	movw	r24, r30
    b97a:	08 95       	ret
    b97c:	46 2f       	mov	r20, r22
    b97e:	47 70       	andi	r20, 0x07	; 7
    b980:	40 5d       	subi	r20, 0xD0	; 208
    b982:	41 93       	st	Z+, r20
    b984:	b3 e0       	ldi	r27, 0x03	; 3
    b986:	0f d0       	rcall	.+30     	; 0xb9a6 <__ultoa_invert+0x86>
    b988:	c9 f7       	brne	.-14     	; 0xb97c <__ultoa_invert+0x5c>
    b98a:	f6 cf       	rjmp	.-20     	; 0xb978 <__ultoa_invert+0x58>
    b98c:	46 2f       	mov	r20, r22
    b98e:	4f 70       	andi	r20, 0x0F	; 15
    b990:	40 5d       	subi	r20, 0xD0	; 208
    b992:	4a 33       	cpi	r20, 0x3A	; 58
    b994:	18 f0       	brcs	.+6      	; 0xb99c <__ultoa_invert+0x7c>
    b996:	49 5d       	subi	r20, 0xD9	; 217
    b998:	31 fd       	sbrc	r19, 1
    b99a:	40 52       	subi	r20, 0x20	; 32
    b99c:	41 93       	st	Z+, r20
    b99e:	02 d0       	rcall	.+4      	; 0xb9a4 <__ultoa_invert+0x84>
    b9a0:	a9 f7       	brne	.-22     	; 0xb98c <__ultoa_invert+0x6c>
    b9a2:	ea cf       	rjmp	.-44     	; 0xb978 <__ultoa_invert+0x58>
    b9a4:	b4 e0       	ldi	r27, 0x04	; 4
    b9a6:	a6 95       	lsr	r26
    b9a8:	97 95       	ror	r25
    b9aa:	87 95       	ror	r24
    b9ac:	77 95       	ror	r23
    b9ae:	67 95       	ror	r22
    b9b0:	ba 95       	dec	r27
    b9b2:	c9 f7       	brne	.-14     	; 0xb9a6 <__ultoa_invert+0x86>
    b9b4:	00 97       	sbiw	r24, 0x00	; 0
    b9b6:	61 05       	cpc	r22, r1
    b9b8:	71 05       	cpc	r23, r1
    b9ba:	08 95       	ret
    b9bc:	9b 01       	movw	r18, r22
    b9be:	ac 01       	movw	r20, r24
    b9c0:	0a 2e       	mov	r0, r26
    b9c2:	06 94       	lsr	r0
    b9c4:	57 95       	ror	r21
    b9c6:	47 95       	ror	r20
    b9c8:	37 95       	ror	r19
    b9ca:	27 95       	ror	r18
    b9cc:	ba 95       	dec	r27
    b9ce:	c9 f7       	brne	.-14     	; 0xb9c2 <__ultoa_invert+0xa2>
    b9d0:	62 0f       	add	r22, r18
    b9d2:	73 1f       	adc	r23, r19
    b9d4:	84 1f       	adc	r24, r20
    b9d6:	95 1f       	adc	r25, r21
    b9d8:	a0 1d       	adc	r26, r0
    b9da:	08 95       	ret

0000b9dc <_exit>:
    b9dc:	f8 94       	cli

0000b9de <__stop_program>:
    b9de:	ff cf       	rjmp	.-2      	; 0xb9de <__stop_program>
