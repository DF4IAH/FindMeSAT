
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .BOOT         00000044  00011ddc  00011ddc  00011e70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000001ac  00802000  00011e20  00011eb4  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000ce7  008021ac  008021ac  00012060  2**2
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00012060  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000120bc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000d98  00000000  00000000  00012100  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00029b3a  00000000  00000000  00012e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007e14  00000000  00000000  0003c9d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00016585  00000000  00000000  000447e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003f98  00000000  00000000  0005ad6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00045132  00000000  00000000  0005ed04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00012dfd  00000000  00000000  000a3e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e28  00000000  00000000  000b6c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00010636  00000000  00000000  000b7a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__ctors_end>
       4:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
       8:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
       c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      10:	0c 94 5e 71 	jmp	0xe2bc	; 0xe2bc <__vector_4>
      14:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      18:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__vector_6>
      1c:	0c 94 48 27 	jmp	0x4e90	; 0x4e90 <__vector_7>
      20:	0c 94 70 27 	jmp	0x4ee0	; 0x4ee0 <__vector_8>
      24:	0c 94 98 27 	jmp	0x4f30	; 0x4f30 <__vector_9>
      28:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      2c:	0c 94 71 28 	jmp	0x50e2	; 0x50e2 <__vector_11>
      30:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      34:	0c 94 db 54 	jmp	0xa9b6	; 0xa9b6 <__vector_13>
      38:	0c 94 33 4d 	jmp	0x9a66	; 0x9a66 <__vector_14>
      3c:	0c 94 60 4d 	jmp	0x9ac0	; 0x9ac0 <__vector_15>
      40:	0c 94 8d 4d 	jmp	0x9b1a	; 0x9b1a <__vector_16>
      44:	0c 94 ba 4d 	jmp	0x9b74	; 0x9b74 <__vector_17>
      48:	0c 94 e7 4d 	jmp	0x9bce	; 0x9bce <__vector_18>
      4c:	0c 94 14 4e 	jmp	0x9c28	; 0x9c28 <__vector_19>
      50:	0c 94 41 4e 	jmp	0x9c82	; 0x9c82 <__vector_20>
      54:	0c 94 6e 4e 	jmp	0x9cdc	; 0x9cdc <__vector_21>
      58:	0c 94 9b 4e 	jmp	0x9d36	; 0x9d36 <__vector_22>
      5c:	0c 94 c8 4e 	jmp	0x9d90	; 0x9d90 <__vector_23>
      60:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      64:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      68:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      6c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      70:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      74:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      78:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      7c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      80:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      84:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      88:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      8c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      90:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      94:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      98:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      9c:	0c 94 36 4a 	jmp	0x946c	; 0x946c <__vector_39>
      a0:	0c 94 68 4a 	jmp	0x94d0	; 0x94d0 <__vector_40>
      a4:	0c 94 9a 4a 	jmp	0x9534	; 0x9534 <__vector_41>
      a8:	0c 94 cc 4a 	jmp	0x9598	; 0x9598 <__vector_42>
      ac:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      b0:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      b4:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      b8:	0c 94 02 55 	jmp	0xaa04	; 0xaa04 <__vector_46>
      bc:	0c 94 b7 50 	jmp	0xa16e	; 0xa16e <__vector_47>
      c0:	0c 94 e4 50 	jmp	0xa1c8	; 0xa1c8 <__vector_48>
      c4:	0c 94 11 51 	jmp	0xa222	; 0xa222 <__vector_49>
      c8:	0c 94 3e 51 	jmp	0xa27c	; 0xa27c <__vector_50>
      cc:	0c 94 6b 51 	jmp	0xa2d6	; 0xa2d6 <__vector_51>
      d0:	0c 94 98 51 	jmp	0xa330	; 0xa330 <__vector_52>
      d4:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <__vector_53>
      d8:	0c 94 f2 51 	jmp	0xa3e4	; 0xa3e4 <__vector_54>
      dc:	0c 94 1f 52 	jmp	0xa43e	; 0xa43e <__vector_55>
      e0:	0c 94 4c 52 	jmp	0xa498	; 0xa498 <__vector_56>
      e4:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      e8:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      ec:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      f0:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      f4:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      f8:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
      fc:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     100:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     104:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     108:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     10c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     110:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     114:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     118:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     11c:	0c 94 6e 49 	jmp	0x92dc	; 0x92dc <__vector_71>
     120:	0c 94 a0 49 	jmp	0x9340	; 0x9340 <__vector_72>
     124:	0c 94 d2 49 	jmp	0x93a4	; 0x93a4 <__vector_73>
     128:	0c 94 04 4a 	jmp	0x9408	; 0x9408 <__vector_74>
     12c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     130:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     134:	0c 94 f5 4e 	jmp	0x9dea	; 0x9dea <__vector_77>
     138:	0c 94 22 4f 	jmp	0x9e44	; 0x9e44 <__vector_78>
     13c:	0c 94 4f 4f 	jmp	0x9e9e	; 0x9e9e <__vector_79>
     140:	0c 94 7c 4f 	jmp	0x9ef8	; 0x9ef8 <__vector_80>
     144:	0c 94 a9 4f 	jmp	0x9f52	; 0x9f52 <__vector_81>
     148:	0c 94 d6 4f 	jmp	0x9fac	; 0x9fac <__vector_82>
     14c:	0c 94 03 50 	jmp	0xa006	; 0xa006 <__vector_83>
     150:	0c 94 30 50 	jmp	0xa060	; 0xa060 <__vector_84>
     154:	0c 94 5d 50 	jmp	0xa0ba	; 0xa0ba <__vector_85>
     158:	0c 94 8a 50 	jmp	0xa114	; 0xa114 <__vector_86>
     15c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     160:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     164:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     168:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     16c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     170:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     174:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     178:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     17c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     180:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     184:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     188:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     18c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     190:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     194:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     198:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     19c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1a0:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1a4:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1a8:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1ac:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1b0:	0c 94 79 52 	jmp	0xa4f2	; 0xa4f2 <__vector_108>
     1b4:	0c 94 a6 52 	jmp	0xa54c	; 0xa54c <__vector_109>
     1b8:	0c 94 d3 52 	jmp	0xa5a6	; 0xa5a6 <__vector_110>
     1bc:	0c 94 00 53 	jmp	0xa600	; 0xa600 <__vector_111>
     1c0:	0c 94 2d 53 	jmp	0xa65a	; 0xa65a <__vector_112>
     1c4:	0c 94 5a 53 	jmp	0xa6b4	; 0xa6b4 <__vector_113>
     1c8:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1cc:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1d0:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1d4:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1d8:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1dc:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__vector_119>
     1e0:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1e4:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1e8:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1ec:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1f0:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__bad_interrupt>
     1f4:	0c 94 ec 5b 	jmp	0xb7d8	; 0xb7d8 <__vector_125>
     1f8:	0c 94 a8 5c 	jmp	0xb950	; 0xb950 <__vector_126>
     1fc:	a0 56       	subi	r26, 0x60	; 96
     1fe:	a3 56       	subi	r26, 0x63	; 99
     200:	a6 56       	subi	r26, 0x66	; 102
     202:	a9 56       	subi	r26, 0x69	; 105
     204:	ac 56       	subi	r26, 0x6C	; 108
     206:	af 56       	subi	r26, 0x6F	; 111
     208:	b2 56       	subi	r27, 0x62	; 98
     20a:	20 5e       	subi	r18, 0xE0	; 224
     20c:	33 5e       	subi	r19, 0xE3	; 227
     20e:	46 5e       	subi	r20, 0xE6	; 230
     210:	59 5e       	subi	r21, 0xE9	; 233
     212:	6c 5e       	subi	r22, 0xEC	; 236
     214:	7f 5e       	subi	r23, 0xEF	; 239
     216:	92 5e       	subi	r25, 0xE2	; 226
     218:	05 a8       	ldd	r0, Z+53	; 0x35
     21a:	4c cd       	rjmp	.-1384   	; 0xfffffcb4 <__eeprom_end+0xff7efcb4>
     21c:	b2 d4       	rcall	.+2404   	; 0xb82 <PM_SINE_IP+0x431>
     21e:	4e b9       	out	0x0e, r20	; 14
     220:	38 36       	cpi	r19, 0x68	; 104
     222:	a9 02       	muls	r26, r25
     224:	0c 50       	subi	r16, 0x0C	; 12
     226:	b9 91       	ld	r27, Y+
     228:	86 88       	ldd	r8, Z+22	; 0x16
     22a:	08 3c       	cpi	r16, 0xC8	; 200
     22c:	a6 aa       	std	Z+54, r10	; 0x36
     22e:	aa 2a       	or	r10, r26
     230:	be 00       	.word	0x00be	; ????
     232:	00 00       	nop
     234:	80 3f       	cpi	r24, 0xF0	; 240
     236:	07 63       	ori	r16, 0x37	; 55
     238:	42 36       	cpi	r20, 0x62	; 98
     23a:	b7 9b       	sbis	0x16, 7	; 22
     23c:	d8 a7       	std	Y+40, r29	; 0x28
     23e:	1a 39       	cpi	r17, 0x9A	; 154
     240:	68 56       	subi	r22, 0x68	; 104
     242:	18 ae       	std	Y+56, r1	; 0x38
     244:	ba ab       	std	Y+50, r27	; 0x32
     246:	55 8c       	ldd	r5, Z+29	; 0x1d
     248:	1d 3c       	cpi	r17, 0xCD	; 205
     24a:	b7 cc       	rjmp	.-1682   	; 0xfffffbba <__eeprom_end+0xff7efbba>
     24c:	57 63       	ori	r21, 0x37	; 55
     24e:	bd 6d       	ori	r27, 0xDD	; 221
     250:	ed fd       	.word	0xfded	; ????
     252:	75 3e       	cpi	r23, 0xE5	; 229
     254:	f6 17       	cp	r31, r22
     256:	72 31       	cpi	r23, 0x12	; 18
     258:	bf 00       	.word	0x00bf	; ????
     25a:	00 00       	nop
     25c:	80 3f       	cpi	r24, 0xF0	; 240
     25e:	08 00       	.word	0x0008	; ????
     260:	00 00       	nop
     262:	be 92       	st	-X, r11
     264:	24 49       	sbci	r18, 0x94	; 148
     266:	12 3e       	cpi	r17, 0xE2	; 226
     268:	ab aa       	std	Y+51, r10	; 0x33
     26a:	aa 2a       	or	r10, r26
     26c:	be cd       	rjmp	.-1156   	; 0xfffffdea <__eeprom_end+0xff7efdea>
     26e:	cc cc       	rjmp	.-1640   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
     270:	4c 3e       	cpi	r20, 0xEC	; 236
     272:	00 00       	nop
     274:	00 80       	ld	r0, Z
     276:	be ab       	std	Y+54, r27	; 0x36
     278:	aa aa       	std	Y+50, r10	; 0x32
     27a:	aa 3e       	cpi	r26, 0xEA	; 234
     27c:	00 00       	nop
     27e:	00 00       	nop
     280:	bf 00       	.word	0x00bf	; ????
     282:	00 00       	nop
     284:	80 3f       	cpi	r24, 0xF0	; 240
     286:	00 00       	nop
     288:	00 00       	nop
     28a:	00 08       	sbc	r0, r0
     28c:	41 78       	andi	r20, 0x81	; 129
     28e:	d3 bb       	out	0x13, r29	; 19
     290:	43 87       	std	Z+11, r20	; 0x0b
     292:	d1 13       	cpse	r29, r17
     294:	3d 19       	sub	r19, r13
     296:	0e 3c       	cpi	r16, 0xCE	; 206
     298:	c3 bd       	out	0x23, r28	; 35
     29a:	42 82       	std	Z+2, r4	; 0x02
     29c:	ad 2b       	or	r26, r29
     29e:	3e 68       	ori	r19, 0x8E	; 142
     2a0:	ec 82       	std	Y+4, r14	; 0x04
     2a2:	76 be       	out	0x36, r7	; 54
     2a4:	d9 8f       	std	Y+25, r29	; 0x19
     2a6:	e1 a9       	ldd	r30, Z+49	; 0x31
     2a8:	3e 4c       	sbci	r19, 0xCE	; 206
     2aa:	80 ef       	ldi	r24, 0xF0	; 240
     2ac:	ff be       	out	0x3f, r15	; 63
     2ae:	01 c4       	rjmp	.+2050   	; 0xab2 <PM_SINE_IP+0x361>
     2b0:	ff 7f       	andi	r31, 0xFF	; 255
     2b2:	3f 00       	.word	0x003f	; ????
     2b4:	00 00       	nop
	...

000002b8 <__trampolines_end>:
     2b8:	6e 61       	ori	r22, 0x1E	; 30
     2ba:	6e 00       	.word	0x006e	; ????

000002bc <__c.2332>:
     2bc:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2cc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2dc:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2ec:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2fc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     30c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     31c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     32c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     33c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     34c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     35c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     36c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     37c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     38c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     39c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3ac:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003ba <pstr_nan>:
     3ba:	4e 41 4e                                            NAN

000003bd <pstr_inity>:
     3bd:	49 4e 49 54 59                                      INITY

000003c2 <pstr_inf>:
     3c2:	49 4e 46                                            INF

000003c5 <pwr_m10>:
     3c5:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     3d5:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000003dd <pwr_p10>:
     3dd:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3ed:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000003f5 <PM_TWI1_INIT_ONBOARD_SIM808_GPS_02>:
     3f5:	41 54 2b 43 47 4e 53 49 4e 46 0d 0a 00              AT+CGNSINF...

00000402 <PM_TWI1_INIT_ONBOARD_SIM808_GPS_01>:
     402:	41 54 2b 43 47 4e 53 50 57 52 3d 25 64 0d 0a 00     AT+CGNSPWR=%d...

00000412 <PM_TWI1_INIT_ONBOARD_SIM808_INFO_02>:
     412:	41 54 2b 47 53 56 0d 0a 00                          AT+GSV...

0000041b <PM_TWI1_INIT_ONBOARD_SIM808_INFO_01>:
     41b:	41 54 49 0d 0a 00                                   ATI...

00000421 <PM_TWI1_INIT_ONBOARD_SIM808_CFUN1>:
     421:	41 54 2b 43 46 55 4e 3d 31 0d 0a 00                 AT+CFUN=1...

0000042d <PM_TWI1_INIT_ONBOARD_SIM808_CMEE2>:
     42d:	41 54 2b 43 4d 45 45 3d 32 0d 0a 00                 AT+CMEE=2...

00000439 <PM_TWI1_INIT_ONBOARD_SIM808_IPR>:
     439:	41 54 2b 49 50 52 3d 25 6c 64 0d 0a 00              AT+IPR=%ld...

00000446 <PM_TWI1_INIT_ONBOARD_SIM808_OK>:
     446:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 73 75 63     Init: SIM808 suc
     456:	63 65 73 73 00                                      cess.

0000045b <PM_TWI1_INIT_ONBOARD_SIM808_RESTART>:
     45b:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 72 65 73     Init: SIM808 res
     46b:	74 61 72 74 69 6e 67 20 2e 2e 2e 00                 tarting ....

00000477 <PM_TWI1_INIT_ONBOARD_SIM808_START>:
     477:	49 6e 69 74 3a 20 53 49 4d 38 30 38 20 73 74 61     Init: SIM808 sta
     487:	72 74 69 6e 67 20 2e 2e 2e 00                       rting ....

00000491 <PM_SIM808_INFO_SYNCED>:
     491:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 20 62     SIM808 ser1:   b
     4a1:	61 75 64 20 72 61 74 65 20 73 79 6e 63 65 64 0d     aud rate synced.
     4b1:	0a 00                                               ..

000004b3 <PM_SIM808_INFO_RESTART>:
     4b3:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 53 74     SIM808 ser1:  St
     4c3:	61 72 74 69 6e 67 20 74 68 65 20 64 65 76 69 63     arting the devic
     4d3:	65 20 2e 2e 2e 0d 0a 00                             e ......

000004db <PM_SIM808_INFO_START>:
     4db:	53 49 4d 38 30 38 20 73 65 72 31 3a 20 20 53 74     SIM808 ser1:  St
     4eb:	61 72 74 69 6e 67 20 74 68 65 20 64 65 76 69 63     arting the devic
     4fb:	65 20 2e 2e 2e 0d 0a 00                             e ......

00000503 <PM_SIM808_OK>:
     503:	4f 4b 00                                            OK.

00000506 <PM_INFO_PART_PLL1>:
     506:	50 4c 4c 3a 20 25 38 6c 64 2e 25 30 33 6c 64 20     PLL: %8ld.%03ld 
     516:	2b 20 25 30 33 64 2f 33 30 45 2b 36 20 73 65 63     + %03d/30E+6 sec
     526:	0d 0a 0d 0a 00                                      .....

0000052b <PM_INFO_PART_L2P4>:
     52b:	47 79 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e 32     Gyro_Temp=%+06.2
     53b:	66 43 20 28 25 2b 30 36 64 29 0d 0a 0d 0a 00        fC (%+06d).....

0000054a <PM_INFO_PART_L2P3B>:
     54a:	4d 7a 3d 25 2b 30 37 2e 33 66 75 54 20 28 25 2b     Mz=%+07.3fuT (%+
     55a:	30 36 64 29 09 20 09 00                             06d). ..

00000562 <PM_INFO_PART_L2P3A>:
     562:	4d 78 3d 25 2b 30 37 2e 33 66 75 54 20 28 25 2b     Mx=%+07.3fuT (%+
     572:	30 36 64 29 2c 20 4d 79 3d 25 2b 30 37 2e 33 66     06d), My=%+07.3f
     582:	75 54 20 28 25 2b 30 36 64 29 2c 20 00              uT (%+06d), .

0000058f <PM_INFO_PART_L2P2B>:
     58f:	47 7a 3d 25 2b 30 37 2e 32 66 64 70 73 20 28 25     Gz=%+07.2fdps (%
     59f:	30 36 64 29 09 20 09 00                             06d). ..

000005a7 <PM_INFO_PART_L2P2A>:
     5a7:	47 78 3d 25 2b 30 37 2e 32 66 64 70 73 20 28 25     Gx=%+07.2fdps (%
     5b7:	2b 30 36 64 29 2c 20 47 79 3d 25 2b 30 37 2e 32     +06d), Gy=%+07.2
     5c7:	66 64 70 73 20 28 25 2b 30 36 64 29 2c 20 00        fdps (%+06d), .

000005d6 <PM_INFO_PART_L2P1B>:
     5d6:	41 7a 3d 25 2b 30 35 2e 33 66 67 20 28 25 2b 30     Az=%+05.3fg (%+0
     5e6:	36 64 29 09 20 09 00                                6d). ..

000005ed <PM_INFO_PART_L2P1A>:
     5ed:	09 41 78 3d 25 2b 30 35 2e 33 66 67 20 28 25 2b     .Ax=%+05.3fg (%+
     5fd:	30 36 64 29 2c 20 41 79 3d 25 2b 30 35 2e 33 66     06d), Ay=%+05.3f
     60d:	67 20 28 25 2b 30 36 64 29 2c 20 00                 g (%+06d), .

00000619 <PM_INFO_PART_L1P3>:
     619:	48 79 67 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e     Hygro_Temp=%+06.
     629:	32 66 43 2c 20 48 79 67 72 6f 5f 52 65 6c 48 3d     2fC, Hygro_RelH=
     639:	25 30 35 2e 32 66 25 25 0d 0a 00                    %05.2f%%...

00000644 <PM_INFO_PART_L1P2>:
     644:	42 61 72 6f 5f 54 65 6d 70 3d 25 2b 30 36 2e 32     Baro_Temp=%+06.2
     654:	66 43 2c 20 42 61 72 6f 5f 50 3d 25 37 2e 32 66     fC, Baro_P=%7.2f
     664:	68 50 61 09 20 09 00                                hPa. ..

0000066b <PM_INFO_PART_L1P1C>:
     66b:	6d 50 5f 54 65 6d 70 3d 25 2b 30 36 2e 32 66 43     mP_Temp=%+06.2fC
     67b:	09 20 09 00                                         . ..

0000067f <PM_INFO_PART_L1P1B>:
     67f:	55 61 64 63 34 3d 25 34 64 20 6d 56 2c 20 55 61     Uadc4=%4d mV, Ua
     68f:	64 63 35 3d 25 34 64 20 6d 56 2c 20 55 73 69 6c     dc5=%4d mV, Usil
     69f:	3d 25 34 64 20 6d 56 2c 20 00                       =%4d mV, .

000006a9 <PM_INFO_PART_L1P1A>:
     6a9:	54 69 6d 65 20 3d 20 25 30 36 6c 64 3a 20 55 76     Time = %06ld: Uv
     6b9:	63 6f 3d 25 34 64 20 6d 56 2c 20 55 35 76 3d 25     co=%4d mV, U5v=%
     6c9:	34 64 20 6d 56 2c 20 55 62 61 74 3d 25 34 64 20     4d mV, Ubat=%4d 
     6d9:	6d 56 2c 20 00                                      mV, .

000006de <PM_USBINIT_HEADER_4>:
     6de:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     6ee:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0d     ===============.
     6fe:	0a 0d 0a 00                                         ....

00000702 <PM_USBINIT_HEADER_3>:
     702:	46 69 6e 64 4d 65 53 41 54 20 2d 20 55 53 42 20     FindMeSAT - USB 
     712:	6c 6f 67 67 69 6e 67 20 73 74 61 72 74 65 64 0d     logging started.
     722:	0a 00                                               ..

00000724 <PM_USBINIT_HEADER_2>:
     724:	25 63 0d 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     %c..============
     734:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     744:	3d 3d 3d 0d 0a 00                                   ===...

0000074a <PM_USBINIT_HEADER_1>:
     74a:	0d 0a 0d 0a 0d 0a 00                                .......

00000751 <PM_SINE_IP>:
     751:	00 fd f9 f6 f3 f0 ec e9 e6 e3 df dc d9 d6 d2 cf     ................
     761:	00 fd fa f6 f3 f0 ed ea e6 e3 e0 dd da d7 d3 d0     ................
     771:	00 fd fa f7 f3 f0 ed ea e7 e4 e1 de da d7 d4 d1     ................
     781:	00 fd fa f7 f4 f1 ee eb e7 e4 e1 de db d8 d5 d2     ................
     791:	00 fd fa f7 f4 f1 ee eb e8 e5 e2 df dc d9 d6 d3     ................
     7a1:	00 fd fa f7 f4 f1 ee eb e8 e6 e3 e0 dd da d7 d4     ................
     7b1:	00 fd fa f7 f4 f2 ef ec e9 e6 e3 e0 dd db d8 d5     ................
     7c1:	00 fd fa f8 f5 f2 ef ec e9 e7 e4 e1 de db d9 d6     ................
     7d1:	00 fd fa f8 f5 f2 ef ed ea e7 e4 e2 df dc d9 d7     ................
     7e1:	00 fd fb f8 f5 f3 f0 ed ea e8 e5 e2 e0 dd da d8     ................
     7f1:	00 fd fb f8 f5 f3 f0 ee eb e8 e6 e3 e0 de db d9     ................
     801:	00 fd fb f8 f6 f3 f1 ee eb e9 e6 e4 e1 df dc da     ................
     811:	00 fd fb f8 f6 f3 f1 ee ec e9 e7 e4 e2 df dd da     ................
     821:	00 fe fb f9 f6 f4 f1 ef ec ea e8 e5 e3 e0 de db     ................
     831:	00 fe fb f9 f6 f4 f2 ef ed eb e8 e6 e3 e1 df dc     ................
     841:	00 fe fb f9 f7 f4 f2 f0 ed eb e9 e7 e4 e2 e0 dd     ................
     851:	00 fe fb f9 f7 f5 f2 f0 ee ec e9 e7 e5 e3 e0 de     ................
     861:	00 fe fc f9 f7 f5 f3 f1 ee ec ea e8 e6 e4 e1 df     ................
     871:	00 fe fc fa f7 f5 f3 f1 ef ed eb e9 e6 e4 e2 e0     ................
     881:	00 fe fc fa f8 f6 f4 f2 ef ed eb e9 e7 e5 e3 e1     ................
     891:	00 fe fc fa f8 f6 f4 f2 f0 ee ec ea e8 e6 e4 e2     ................
     8a1:	00 fe fc fa f8 f6 f4 f2 f0 ef ed eb e9 e7 e5 e3     ................
     8b1:	00 fe fc fa f8 f7 f5 f3 f1 ef ed eb e9 e8 e6 e4     ................
     8c1:	00 fe fc fb f9 f7 f5 f3 f1 f0 ee ec ea e8 e7 e5     ................
     8d1:	00 fe fc fb f9 f7 f5 f4 f2 f0 ee ed eb e9 e7 e6     ................
     8e1:	00 fe fd fb f9 f8 f6 f4 f2 f1 ef ed ec ea e8 e7     ................
     8f1:	00 fe fd fb f9 f8 f6 f5 f3 f1 f0 ee ec eb e9 e8     ................
     901:	00 fe fd fb fa f8 f7 f5 f3 f2 f0 ef ed ec ea e9     ................
     911:	00 fe fd fb fa f8 f7 f5 f4 f2 f1 ef ee ec eb e9     ................
     921:	00 ff fd fc fa f9 f7 f6 f4 f3 f2 f0 ef ed ec ea     ................
     931:	00 ff fd fc fa f9 f8 f6 f5 f4 f2 f1 ef ee ed eb     ................
     941:	00 ff fd fc fb f9 f8 f7 f5 f4 f3 f2 f0 ef ee ec     ................
     951:	00 ff fd fc fb fa f8 f7 f6 f5 f3 f2 f1 f0 ee ed     ................
     961:	00 ff fe fc fb fa f9 f8 f6 f5 f4 f3 f2 f1 ef ee     ................
     971:	00 ff fe fd fb fa f9 f8 f7 f6 f5 f4 f2 f1 f0 ef     ................
     981:	00 ff fe fd fc fb fa f9 f7 f6 f5 f4 f3 f2 f1 f0     ................
     991:	00 ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1     ................
     9a1:	00 ff fe fd fc fb fa f9 f8 f8 f7 f6 f5 f4 f3 f2     ................
     9b1:	00 ff fe fd fc fc fb fa f9 f8 f7 f6 f5 f5 f4 f3     ................
     9c1:	00 ff fe fe fd fc fb fa f9 f9 f8 f7 f6 f5 f5 f4     ................
     9d1:	00 ff fe fe fd fc fb fb fa f9 f8 f8 f7 f6 f5 f5     ................
     9e1:	00 ff ff fe fd fd fc fb fa fa f9 f8 f8 f7 f6 f6     ................
     9f1:	00 ff ff fe fd fd fc fc fb fa fa f9 f8 f8 f7 f7     ................
     a01:	00 ff ff fe fe fd fd fc fb fb fa fa f9 f9 f8 f8     ................
     a11:	00 ff ff fe fe fd fd fc fc fb fb fa fa f9 f9 f8     ................
     a21:	00 00 ff ff fe fe fd fd fc fc fc fb fb fa fa f9     ................
     a31:	00 00 ff ff fe fe fe fd fd fd fc fc fb fb fb fa     ................
     a41:	00 00 ff ff ff fe fe fe fd fd fd fd fc fc fc fb     ................
     a51:	00 00 ff ff ff ff fe fe fe fe fd fd fd fd fc fc     ................
     a61:	00 00 00 ff ff ff ff ff fe fe fe fe fe fe fd fd     ................
     a71:	00 00 00 00 ff ff ff ff ff ff ff ff fe fe fe fe     ................
	...
     a89:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     aa9:	01 01 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
     ab9:	01 01 01 01 02 02 02 02 00 00 00 01 01 01 01 01     ................
     ac9:	02 02 02 02 02 02 03 03 00 00 01 01 01 01 02 02     ................
     ad9:	02 02 03 03 03 03 04 04 00 00 01 01 01 02 02 02     ................
     ae9:	03 03 03 03 04 04 04 05 00 00 01 01 02 02 02 03     ................
     af9:	03 03 04 04 05 05 05 06 00 00 01 01 02 02 03 03     ................
     b09:	04 04 04 05 05 06 06 07 00 01 01 02 02 03 03 04     ................
     b19:	04 05 05 06 06 07 07 08 00 01 01 02 02 03 03 04     ................
     b29:	05 05 06 06 07 07 08 08 00 01 01 02 03 03 04 04     ................
     b39:	05 06 06 07 08 08 09 09 00 01 01 02 03 03 04 05     ................
     b49:	06 06 07 08 08 09 0a 0a 00 01 02 02 03 04 05 05     ................
     b59:	06 07 08 08 09 0a 0b 0b 00 01 02 02 03 04 05 06     ................
     b69:	07 07 08 09 0a 0b 0b 0c 00 01 02 03 04 04 05 06     ................
     b79:	07 08 09 0a 0b 0b 0c 0d 00 01 02 03 04 05 06 07     ................
     b89:	08 08 09 0a 0b 0c 0d 0e 00 01 02 03 04 05 06 07     ................
     b99:	08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 04 05 06 07     ................
     ba9:	09 0a 0b 0c 0d 0e 0f 10 00 01 02 03 05 06 07 08     ................
     bb9:	09 0a 0b 0c 0e 0f 10 11 00 01 02 04 05 06 07 08     ................
     bc9:	0a 0b 0c 0d 0e 0f 11 12 00 01 03 04 05 06 08 09     ................
     bd9:	0a 0b 0d 0e 0f 10 12 13 00 01 03 04 05 07 08 09     ................
     be9:	0b 0c 0d 0e 10 11 12 14 00 01 03 04 06 07 08 0a     ................
     bf9:	0b 0c 0e 0f 11 12 13 15 00 01 03 04 06 07 09 0a     ................
     c09:	0c 0d 0e 10 11 13 14 16 00 02 03 05 06 08 09 0b     ................
     c19:	0c 0e 0f 11 12 14 15 17 00 02 03 05 06 08 09 0b     ................
     c29:	0d 0e 10 11 13 14 16 17 00 02 03 05 07 08 0a 0b     ................
     c39:	0d 0f 10 12 14 15 17 18 00 02 03 05 07 08 0a 0c     ................
     c49:	0e 0f 11 13 14 16 18 19 00 02 04 05 07 09 0b 0c     ................
     c59:	0e 10 12 13 15 17 19 1a 00 02 04 05 07 09 0b 0d     ................
     c69:	0f 10 12 14 16 18 19 1b 00 02 04 06 08 09 0b 0d     ................
     c79:	0f 11 13 15 17 18 1a 1c 00 02 04 06 08 0a 0c 0e     ................
     c89:	10 11 13 15 17 19 1b 1d 00 02 04 06 08 0a 0c 0e     ................
     c99:	10 12 14 16 18 1a 1c 1e 00 02 04 06 08 0a 0c 0e     ................
     ca9:	11 13 15 17 19 1b 1d 1f 00 02 04 06 09 0b 0d 0f     ................
     cb9:	11 13 15 17 1a 1c 1e 20 00 02 04 07 09 0b 0d 0f     ....... ........
     cc9:	12 14 16 18 1a 1c 1f 21 00 02 05 07 09 0b 0e 10     .......!........
     cd9:	12 14 17 19 1b 1d 20 22 00 02 05 07 09 0c 0e 10     ...... "........
     ce9:	13 15 17 19 1c 1e 20 23 00 02 05 07 0a 0c 0e 11     ...... #........
     cf9:	13 15 18 1a 1d 1f 21 24 00 02 05 07 0a 0c 0f 11     ......!$........
     d09:	14 16 18 1b 1d 20 22 25 00 03 05 08 0a 0d 0f 12     ..... "%........
     d19:	14 17 19 1c 1e 21 23 26 00 03 05 08 0a 0d 0f 12     .....!#&........
     d29:	15 17 1a 1c 1f 21 24 26 00 03 05 08 0b 0d 10 12     .....!$&........
     d39:	15 18 1a 1d 20 22 25 27 00 03 05 08 0b 0d 10 13     .... "%'........
     d49:	16 18 1b 1e 20 23 26 28 00 03 06 08 0b 0e 11 13     .... #&(........
     d59:	16 19 1c 1e 21 24 27 29 00 03 06 08 0b 0e 11 14     ....!$')........
     d69:	17 19 1c 1f 22 25 27 2a 00 03 06 09 0c 0e 11 14     ...."%'*........
     d79:	17 1a 1d 20 23 25 28 2b 00 03 06 09 0c 0f 12 15     ... #%(+........
     d89:	18 1a 1d 20 23 26 29 2c 00 03 06 09 0c 0f 12 15     ... #&),........
     d99:	18 1b 1e 21 24 27 2a 2d 00 03 06 09 0c 0f 12 15     ...!$'*-........
     da9:	19 1c 1f 22 25 28 2b 2e 00 03 06 09 0d 10 13 16     ..."%(+.........
     db9:	19 1c 1f 22 26 29 2c 2f 00 03 06 0a 0d 10 13 16     ..."&),/........
     dc9:	1a 1d 20 23 26 29 2d 30                             .. #&)-0

00000dd1 <PM_SINE>:
     dd1:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     de1:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     df1:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     e01:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     e11:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     e21:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     e31:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     e41:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     e51:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     e61:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     e71:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     e81:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     e91:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     ea1:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     eb1:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     ec1:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     ed1:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     ee1:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     ef1:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     f01:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     f11:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     f21:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     f31:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     f41:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     f51:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     f61:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     f71:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     f81:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     f91:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     fa1:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     fb1:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     fc1:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     fd1:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     fe1:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     ff1:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
    1001:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
    1011:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
    1021:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
    1031:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
    1041:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
    1051:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
    1061:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
    1071:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
    1081:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
    1091:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
    10a1:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
    10b1:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
    10c1:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
    10d1:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
    10e1:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
    10f1:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
    1101:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
    1111:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
    1121:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
    1131:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
    1141:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
    1151:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
    1161:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
    1171:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
    1181:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
    1191:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
    11a1:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
    11b1:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
    11c1:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
    11d1:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
    11e1:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
    11f1:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
    1201:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
    1211:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
    1221:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
    1231:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
    1241:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
    1251:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
    1261:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
    1271:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
    1281:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
    1291:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
    12a1:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
    12b1:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
    12c1:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
    12d1:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
    12e1:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
    12f1:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
    1301:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
    1311:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
    1321:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
    1331:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
    1341:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
    1351:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
    1361:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
    1371:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
    1381:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
    1391:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
    13a1:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
    13b1:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
    13c1:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
    13d1:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
    13e1:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
    13f1:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
    1401:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
    1411:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
    1421:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
    1431:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
    1441:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
    1451:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
    1461:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
    1471:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
    1481:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
    1491:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
    14a1:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
    14b1:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
    14c1:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
    14d1:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
    14e1:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
    14f1:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
    1501:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
    1511:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
    1521:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
    1531:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
    1541:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
    1551:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
    1561:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
    1571:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
    1581:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
    1591:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
    15a1:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
    15b1:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
    15c1:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
    15d1:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
    15e1:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
    15f1:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
    1601:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
    1611:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
    1621:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
    1631:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
    1641:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
    1651:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
    1661:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
    1671:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
    1681:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
    1691:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
    16a1:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
    16b1:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
    16c1:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
    16d1:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
    16e1:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
    16f1:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
    1701:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
    1711:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
    1721:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
    1731:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
    1741:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
    1751:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
    1761:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
    1771:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
    1781:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
    1791:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
    17a1:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
    17b1:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
    17c1:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
    17d1:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
    17e1:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
    17f1:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
    1801:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
    1811:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
    1821:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
    1831:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
    1841:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
    1851:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
    1861:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
    1871:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
    1881:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
    1891:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
    18a1:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
    18b1:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
    18c1:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
    18d1:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
    18e1:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
    18f1:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
    1901:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
    1911:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
    1921:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
    1931:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
    1941:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
    1951:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
    1961:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
    1971:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
    1981:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
    1991:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
    19a1:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
    19b1:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
    19c1:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
    19d1:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
    19e1:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
    19f1:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
    1a01:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
    1a11:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
    1a21:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
    1a31:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
    1a41:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
    1a51:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
    1a61:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
    1a71:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
    1a81:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
    1a91:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
    1aa1:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
    1ab1:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
    1ac1:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
    1ad1:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
    1ae1:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
    1af1:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
    1b01:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
    1b11:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
    1b21:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
    1b31:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
    1b41:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
    1b51:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
    1b61:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
    1b71:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
    1b81:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
    1b91:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
    1ba1:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
    1bb1:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1bc1:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1bd1:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    1be1:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    1bf1:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    1c01:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    1c11:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1c21:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1c31:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1c41:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1c51:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    1c61:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    1c71:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    1c81:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    1c91:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    1ca1:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    1cb1:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1cc1:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1cd1:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    1ce1:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    1cf1:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    1d01:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    1d11:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1d21:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1d31:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1d41:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1d51:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    1d61:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    1d71:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    1d81:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    1d91:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    1da1:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    1db1:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1dc1:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1dd1:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    1de1:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    1df1:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    1e01:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    1e11:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1e21:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1e31:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1e41:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1e51:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    1e61:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    1e71:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    1e81:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    1e91:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    1ea1:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    1eb1:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1ec1:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1ed1:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    1ee1:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    1ef1:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    1f01:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    1f11:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1f21:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1f31:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1f41:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1f51:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    1f61:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    1f71:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    1f81:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    1f91:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    1fa1:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    1fb1:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1fc1:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1fd1:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1fe1:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1ff1:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    2001:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    2011:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    2021:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    2031:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    2041:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    2051:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    2061:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    2071:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    2081:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    2091:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    20a1:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    20b1:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    20c1:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    20d1:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    20e1:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    20f1:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    2101:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    2111:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    2121:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    2131:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    2141:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    2151:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    2161:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    2171:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    2181:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    2191:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    21a1:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    21b1:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    21c1:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    21d1:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    21e1:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    21f1:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    2201:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    2211:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    2221:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    2231:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    2241:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    2251:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    2261:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    2271:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    2281:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    2291:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    22a1:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    22b1:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    22c1:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    22d1:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    22e1:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    22f1:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    2301:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    2311:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    2321:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    2331:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    2341:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    2351:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    2361:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    2371:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    2381:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    2391:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    23a1:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    23b1:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    23c1:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    23d1:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    23e1:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    23f1:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    2401:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    2411:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    2421:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    2431:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    2441:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    2451:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    2461:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    2471:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    2481:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    2491:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    24a1:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    24b1:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    24c1:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    24d1:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    24e1:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    24f1:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    2501:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    2511:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    2521:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    2531:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    2541:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    2551:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    2561:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    2571:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    2581:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    2591:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    25a1:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    25b1:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    25c1:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    25d1:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    25e1:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    25f1:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    2601:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    2611:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    2621:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    2631:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    2641:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    2651:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    2661:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    2671:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    2681:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    2691:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    26a1:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    26b1:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    26c1:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    26d1:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    26e1:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    26f1:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    2701:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    2711:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    2721:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    2731:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    2741:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    2751:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    2761:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    2771:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    2781:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    2791:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    27a1:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    27b1:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    27c1:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    27d1:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    27e1:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    27f1:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    2801:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    2811:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    2821:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    2831:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    2841:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    2851:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    2861:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    2871:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    2881:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    2891:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    28a1:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    28b1:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    28c1:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    28d1:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    28e1:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    28f1:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    2901:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    2911:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    2921:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    2931:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    2941:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    2951:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    2961:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    2971:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    2981:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    2991:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    29a1:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    29b1:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    29c1:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    29d1:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    29e1:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    29f1:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    2a01:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    2a11:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    2a21:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    2a31:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    2a41:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    2a51:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    2a61:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    2a71:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    2a81:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    2a91:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    2aa1:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    2ab1:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    2ac1:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    2ad1:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    2ae1:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    2af1:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    2b01:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    2b11:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    2b21:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    2b31:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    2b41:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    2b51:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    2b61:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    2b71:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    2b81:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    2b91:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    2ba1:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    2bb1:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2bc1:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2bd1:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    2be1:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    2bf1:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    2c01:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    2c11:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2c21:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2c31:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2c41:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2c51:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    2c61:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    2c71:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    2c81:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    2c91:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    2ca1:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    2cb1:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2cc1:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2cd1:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    2ce1:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    2cf1:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    2d01:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    2d11:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2d21:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2d31:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2d41:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2d51:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    2d61:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    2d71:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    2d81:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    2d91:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    2da1:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    2db1:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2dc1:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002dd1 <PM_UNKNOWN_01>:
    2dd1:	0d 0a 3f 3f 3f 20 75 6e 6b 6e 6f 77 6e 20 63 6f     ..??? unknown co
    2de1:	6d 6d 61 6e 64 20 2d 20 66 6f 72 20 61 73 73 69     mmand - for assi
    2df1:	73 74 61 6e 63 65 20 65 6e 74 65 72 20 20 68 65     stance enter  he
    2e01:	6c 70 0d 0a 00                                      lp...

00002e06 <PM_IP_CMD_xo>:
    2e06:	78 6f 3d 00                                         xo=.

00002e0a <PM_IP_CMD_reset>:
    2e0a:	72 65 73 65 74 3d 00                                reset=.

00002e11 <PM_IP_CMD_pt>:
    2e11:	70 74 3d 00                                         pt=.

00002e15 <PM_IP_CMD_kb>:
    2e15:	6b 62 3d 00                                         kb=.

00002e19 <PM_IP_CMD_help>:
    2e19:	68 65 6c 70 00                                      help.

00002e1e <PM_IP_CMD_info>:
    2e1e:	69 6e 66 6f 3d 00                                   info=.

00002e24 <PM_IP_CMD_eb>:
    2e24:	65 62 3d 00                                         eb=.

00002e28 <PM_IP_CMD_dds>:
    2e28:	64 64 73 3d 00                                      dds=.

00002e2d <PM_IP_CMD_dac>:
    2e2d:	64 61 63 3d 00                                      dac=.

00002e32 <PM_IP_CMD_cal_gyro>:
    2e32:	63 61 6c 3d 67 79 72 6f 00                          cal=gyro.

00002e3b <PM_IP_CMD_cal_defaults>:
    2e3b:	63 61 6c 3d 64 65 66 61 75 6c 74 73 00              cal=defaults.

00002e48 <PM_IP_CMD_cal_accelz>:
    2e48:	63 61 6c 3d 61 63 63 65 6c 7a 00                    cal=accelz.

00002e53 <PM_IP_CMD_cal_accely>:
    2e53:	63 61 6c 3d 61 63 63 65 6c 79 00                    cal=accely.

00002e5e <PM_IP_CMD_cal_accelx>:
    2e5e:	63 61 6c 3d 61 63 63 65 6c 78 00                    cal=accelx.

00002e69 <PM_IP_CMD_bl>:
    2e69:	62 6c 3d 00                                         bl=.

00002e6d <PM_IP_CMD_bias>:
    2e6d:	62 69 61 73 3d 00                                   bias=.

00002e73 <PM_IP_CMD_A_slash>:
    2e73:	41 2f 00                                            A/.

00002e76 <PM_IP_CMD_AT>:
    2e76:	41 54 00                                            AT.

00002e79 <PM_IP_CMD_adc>:
    2e79:	61 64 63 3d 00                                      adc=.

00002e7e <PM_IP_CMD_CmdLine>:
    2e7e:	0d 0a 3e 20 00                                      ..> .

00002e83 <PM_IP_CMD_NewLine>:
    2e83:	0d 0a 00                                            ...

00002e86 <PM_HELP_XO_2>:
    2e86:	2d 31 3a 20 50 4c 4c 20 4f 4e 0d 0a 00              -1: PLL ON...

00002e93 <PM_HELP_XO_1>:
    2e93:	78 6f 3d 09 09 30 2d 36 35 35 33 35 3a 20 56 43     xo=..0-65535: VC
    2ea3:	54 43 58 4f 20 70 75 6c 6c 20 76 6f 6c 74 61 67     TCXO pull voltag
    2eb3:	65 2c 20 00                                         e, .

00002eb7 <PM_HELP_RESET_1>:
    2eb7:	72 65 73 65 74 3d 09 09 31 3a 20 72 65 62 6f 6f     reset=..1: reboo
    2ec7:	74 20 41 4c 4c 0d 0a 00                             t ALL...

00002ecf <PM_HELP_PT_2>:
    2ecf:	31 3a 20 74 75 72 6e 20 73 70 65 65 64 2c 20 32     1: turn speed, 2
    2edf:	3a 20 76 61 72 69 6f 6d 65 74 65 72 0d 0a 00        : variometer...

00002eee <PM_HELP_PT_1>:
    2eee:	70 74 3d 09 09 30 3a 20 70 69 74 63 68 20 74 6f     pt=..0: pitch to
    2efe:	6e 65 20 4f 46 46 2c 20 00                          ne OFF, .

00002f07 <PM_HELP_KB_1>:
    2f07:	6b 62 3d 09 09 30 3a 20 6b 65 79 20 62 65 65 70     kb=..0: key beep
    2f17:	20 4f 46 46 2c 20 31 3a 20 4f 4e 0d 0a 00            OFF, 1: ON...

00002f25 <PM_HELP_INFO_2>:
    2f25:	30 78 30 32 3a 20 53 49 4d 38 30 38 0d 0a 00        0x02: SIM808...

00002f34 <PM_HELP_INFO_1>:
    2f34:	69 6e 66 6f 3d 09 09 30 3a 20 4f 46 46 2c 20 30     info=..0: OFF, 0
    2f44:	78 30 31 3a 20 41 54 78 6d 65 67 61 2c 20 00        x01: ATxmega, .

00002f53 <PM_HELP_HELP_2>:
    2f53:	61 62 6f 75 74 20 61 6c 6c 20 61 76 61 69 6c 61     about all availa
    2f63:	62 6c 65 20 63 6f 6d 6d 61 6e 64 73 0d 0a 00        ble commands...

00002f72 <PM_HELP_HELP_1>:
    2f72:	68 65 6c 70 09 09 54 68 69 73 20 69 6e 66 6f 72     help..This infor
    2f82:	6d 61 74 69 6f 6e 20 70 61 67 65 20 00              mation page .

00002f8f <PM_HELP_EB_1>:
    2f8f:	65 62 3d 09 09 30 3a 20 65 72 72 6f 72 20 62 65     eb=..0: error be
    2f9f:	65 70 20 4f 46 46 2c 20 31 3a 20 4f 4e 0d 0a 00     ep OFF, 1: ON...

00002faf <PM_HELP_DDS_3>:
    2faf:	63 3a 20 73 74 61 72 74 69 6e 67 20 70 68 61 73     c: starting phas
    2fbf:	65 20 6f 66 20 44 44 53 31 2d 44 44 53 30 20 64     e of DDS1-DDS0 d
    2fcf:	65 67 0d 0a 00                                      eg...

00002fd4 <PM_HELP_DDS_2>:
    2fd4:	62 3a 20 44 44 53 31 20 6d 48 7a 2c 20 00           b: DDS1 mHz, .

00002fe2 <PM_HELP_DDS_1>:
    2fe2:	64 64 73 3d 61 2c 62 2c 63 09 61 3a 20 44 44 53     dds=a,b,c.a: DDS
    2ff2:	30 20 66 72 65 71 75 65 6e 63 79 20 6d 48 7a 2c     0 frequency mHz,
    3002:	20 00                                                .

00003004 <PM_HELP_DAC_2>:
    3004:	31 3a 20 74 75 72 6e 20 44 41 43 42 20 6f 6e 0d     1: turn DACB on.
    3014:	0a 00                                               ..

00003016 <PM_HELP_DAC_1>:
    3016:	64 61 63 3d 09 09 30 3a 20 74 75 72 6e 20 44 41     dac=..0: turn DA
    3026:	43 42 20 6f 66 66 2c 20 00                          CB off, .

0000302f <PM_HELP_CAL_6>:
    302f:	09 09 67 79 72 6f 3a 20 72 65 64 75 63 65 20 47     ..gyro: reduce G
    303f:	59 52 4f 20 6f 66 66 73 65 74 20 65 72 72 6f 72     YRO offset error
    304f:	73 0d 0a 00                                         s...

00003053 <PM_HELP_CAL_5>:
    3053:	09 09 61 63 63 65 6c 7a 3a 20 5a 2d 61 78 69 73     ..accelz: Z-axis
    3063:	20 31 67 20 66 61 63 74 2d 63 61 6c 2c 20 58 2f      1g fact-cal, X/
    3073:	59 20 6f 66 66 73 65 74 2d 63 61 6c 0d 0a 00        Y offset-cal...

00003082 <PM_HELP_CAL_4>:
    3082:	09 09 61 63 63 65 6c 79 3a 20 59 2d 61 78 69 73     ..accely: Y-axis
    3092:	20 31 67 20 66 61 63 74 2d 63 61 6c 2c 20 58 2f      1g fact-cal, X/
    30a2:	5a 20 6f 66 66 73 65 74 2d 63 61 6c 0d 0a 00        Z offset-cal...

000030b1 <PM_HELP_CAL_3>:
    30b1:	09 09 61 63 63 65 6c 78 3a 20 58 2d 61 78 69 73     ..accelx: X-axis
    30c1:	20 31 67 20 66 61 63 74 2d 63 61 6c 2c 20 59 2f      1g fact-cal, Y/
    30d1:	5a 20 6f 66 66 73 65 74 2d 63 61 6c 0d 0a 00        Z offset-cal...

000030e0 <PM_HELP_CAL_2>:
    30e0:	74 6f 20 45 45 50 52 4f 4d 0d 0a 00                 to EEPROM...

000030ec <PM_HELP_CAL_1>:
    30ec:	63 61 6c 3d 09 09 64 65 66 61 75 6c 74 73 3a 20     cal=..defaults: 
    30fc:	73 61 76 65 20 64 65 66 61 75 6c 74 20 76 61 6c     save default val
    310c:	75 65 73 20 00                                      ues .

00003111 <PM_HELP_BL_2>:
    3111:	2d 31 3a 20 41 55 54 4f 2c 20 2d 32 3a 20 54 55     -1: AUTO, -2: TU
    3121:	52 4e 4c 49 47 48 54 20 73 70 65 63 69 61 6c 0d     RNLIGHT special.
    3131:	0a 00                                               ..

00003133 <PM_HELP_BL_1>:
    3133:	62 6c 3d 09 09 30 2d 32 35 35 3a 20 62 61 63 6b     bl=..0-255: back
    3143:	6c 69 67 68 74 20 50 57 4d 2c 20 00                 light PWM, .

0000314f <PM_HELP_BIAS_2>:
    314f:	66 6f 72 20 4c 43 44 20 63 6f 6e 74 72 61 73 74     for LCD contrast
    315f:	0d 0a 00                                            ...

00003162 <PM_HELP_BIAS_1>:
    3162:	62 69 61 73 3d 09 09 30 2d 36 33 3a 20 62 69 61     bias=..0-63: bia
    3172:	73 20 76 6f 6c 74 61 67 65 20 00                    s voltage .

0000317d <PM_HELP_AT_1>:
    317d:	41 54 09 09 43 4d 44 20 74 6f 20 73 65 6e 64 20     AT..CMD to send 
    318d:	74 6f 20 74 68 65 20 53 49 4d 38 30 38 0d 0a 00     to the SIM808...

0000319d <PM_HELP_ADC_2>:
    319d:	31 3a 20 74 75 72 6e 20 41 44 43 41 20 61 6e 64     1: turn ADCA and
    31ad:	20 41 44 43 42 20 6f 6e 0d 0a 00                     ADCB on...

000031b8 <PM_HELP_ADC_1>:
    31b8:	61 64 63 3d 09 09 30 3a 20 74 75 72 6e 20 41 44     adc=..0: turn AD
    31c8:	43 41 20 61 6e 64 20 41 44 43 42 20 6f 66 66 2c     CA and ADCB off,
    31d8:	20 00                                                .

000031da <PM_HELP_HDR_2>:
    31da:	2a 20 43 4f 4d 4d 41 4e 44 53 20 2a 0d 0a 2a 2a     * COMMANDS *..**
    31ea:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0d 0a 0d 0a 00        **********.....

000031f9 <PM_HELP_HDR_1>:
    31f9:	0d 0a 0d 0a 0d 0a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ......**********
    3209:	2a 2a 0d 0a 00                                      **...

0000320e <PM_FORMAT_5F3>:
    320e:	25 35 2e 33 66 00                                   %5.3f.

00003214 <PM_FORMAT_4F1>:
    3214:	25 34 2e 31 66 00                                   %4.1f.

0000321a <PM_FORMAT_07F2>:
    321a:	25 30 37 2e 32 66 00                                %07.2f.

00003221 <PM_FORMAT_05F2>:
    3221:	25 30 35 2e 32 66 00                                %05.2f.

00003228 <PM_TWI1_INIT_ONBOARD_01>:
    3228:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d 0a 0d 0a 00     -----------.....

00003238 <PM_TWI1_INIT_ONBOARD_BARO_OK>:
    3238:	49 6e 69 74 3a 20 42 61 72 6f 20 20 73 75 63 63     Init: Baro  succ
    3248:	65 73 73 00                                         ess.

0000324c <PM_TWI1_INIT_BARO_06>:
    324c:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    325c:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    326c:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

0000327d <PM_TWI1_INIT_BARO_05>:
    327d:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    328d:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

0000329b <PM_TWI1_INIT_BARO_04>:
    329b:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 42 41     TWI-onboard:  BA
    32ab:	44 20 72 65 61 64 69 6e 67 20 50 52 4f 4d 20 61     D reading PROM a
    32bb:	64 64 72 65 73 73 20 25 64 2e 20 28 73 63 3d 25     ddress %d. (sc=%
    32cb:	64 29 0d 0a 00                                      d)...

000032d0 <PM_TWI1_INIT_BARO_03>:
    32d0:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 42 61 72     TWI-onboard: Bar
    32e0:	6f 20 4d 53 35 36 30 37 30 32 42 41 30 33 2d 35     o MS560702BA03-5
    32f0:	30 20 2d 20 20 20 20 20 73 65 72 69 61 6c 23 3a     0 -     serial#:
    3300:	20 25 64 0d 0a 00                                    %d...

00003306 <PM_TWI1_INIT_BARO_02>:
    3306:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 42 41     TWI-onboard:  BA
    3316:	44 20 72 65 61 64 69 6e 67 20 73 65 72 69 61 6c     D reading serial
    3326:	2f 43 52 43 20 77 6f 72 64 2e 20 28 73 63 3d 25     /CRC word. (sc=%
    3336:	64 29 0d 0a 00                                      d)...

0000333b <PM_TWI1_INIT_BARO_01>:
    333b:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 42     ..TWI-onboard: B
    334b:	61 72 6f 20 4d 53 35 36 30 37 30 32 42 41 30 33     aro MS560702BA03
    335b:	2d 35 30 20 2d 20 49 32 43 20 61 64 64 72 65 73     -50 - I2C addres
    336b:	73 3a 20 30 78 25 30 32 58 0d 0a 00                 s: 0x%02X...

00003377 <PM_TWI1_INIT_ONBOARD_GYRO_OK>:
    3377:	49 6e 69 74 3a 20 47 79 72 6f 20 20 73 75 63 63     Init: Gyro  succ
    3387:	65 73 73 00                                         ess.

0000338b <PM_TWI1_INIT_GYRO_05>:
    338b:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    339b:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    33ab:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

000033bc <PM_TWI1_INIT_GYRO_04>:
    33bc:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    33cc:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

000033da <PM_TWI1_INIT_GYRO_03>:
    33da:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47 79 72     TWI-onboard: Gyr
    33ea:	6f 20 4d 50 55 2d 39 32 35 30 20 2d 20 20 20 20     o MPU-9250 -    
    33fa:	20 76 65 72 73 69 6f 6e 3a 20 30 78 25 30 32 58      version: 0x%02X
    340a:	2c 20 30 78 25 30 32 58 0d 0a 00                    , 0x%02X...

00003415 <PM_TWI1_INIT_GYRO_02>:
    3415:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47 79 72     TWI-onboard: Gyr
    3425:	6f 20 4d 50 55 2d 39 32 35 30 20 20 20 2d 20 20     o MPU-9250   -  
    3435:	20 27 72 65 73 65 74 20 31 27 20 62 61 64 20 72      'reset 1' bad r
    3445:	65 73 70 6f 6e 73 65 0d 0a 00                       esponse...

0000344f <PM_TWI1_INIT_GYRO_01>:
    344f:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 47     ..TWI-onboard: G
    345f:	79 72 6f 20 4d 50 55 2d 39 32 35 30 20 2d 20 49     yro MPU-9250 - I
    346f:	32 43 20 61 64 64 72 65 73 73 3a 20 30 78 25 30     2C address: 0x%0
    347f:	32 58 2c 20 30 78 25 30 32 58 0d 0a 00              2X, 0x%02X...

0000348c <PM_TWI1_INIT_ONBOARD_HYGRO_OK>:
    348c:	49 6e 69 74 3a 20 48 79 67 72 6f 20 73 75 63 63     Init: Hygro succ
    349c:	65 73 73 00                                         ess.

000034a0 <PM_TWI1_INIT_HYGRO_05>:
    34a0:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 2e 2e     TWI-onboard:  ..
    34b0:	2e 20 64 65 76 69 63 65 20 6e 6f 74 20 6f 6e 20     . device not on 
    34c0:	62 6f 61 72 64 2e 20 28 73 63 3d 25 64 29 0d 0a     board. (sc=%d)..
	...

000034d1 <PM_TWI1_INIT_HYGRO_04>:
    34d1:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 20 49 4e     TWI-onboard:  IN
    34e1:	49 54 20 73 75 63 63 65 73 73 2e 0d 0a 00           IT success....

000034ef <PM_TWI1_INIT_HYGRO_03>:
    34ef:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48 79 67     TWI-onboard: Hyg
    34ff:	72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d 20 20     ro SHT31-DIS -  
    350f:	20 73 74 61 74 75 73 3a 20 30 78 25 30 32 58 0d      status: 0x%02X.
    351f:	0a 00                                               ..

00003521 <PM_TWI1_INIT_HYGRO_02>:
    3521:	54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48 79 67     TWI-onboard: Hyg
    3531:	72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d 20 20     ro SHT31-DIS -  
    3541:	20 61 64 64 72 65 73 73 20 4e 41 43 4b 20 2f 20      address NACK / 
    3551:	27 62 72 65 61 6b 27 20 62 61 64 20 72 65 73 70     'break' bad resp
    3561:	6f 6e 73 65 0d 0a 00                                onse...

00003568 <PM_TWI1_INIT_HYGRO_01>:
    3568:	0d 0a 54 57 49 2d 6f 6e 62 6f 61 72 64 3a 20 48     ..TWI-onboard: H
    3578:	79 67 72 6f 20 53 48 54 33 31 2d 44 49 53 20 2d     ygro SHT31-DIS -
    3588:	20 49 32 43 20 61 64 64 72 65 73 73 3a 20 30 78      I2C address: 0x
    3598:	25 30 32 58 0d 0a 00 00                             %02X....

000035a0 <__ctors_end>:
    35a0:	11 24       	eor	r1, r1
    35a2:	1f be       	out	0x3f, r1	; 63
    35a4:	cf ef       	ldi	r28, 0xFF	; 255
    35a6:	cd bf       	out	0x3d, r28	; 61
    35a8:	df e5       	ldi	r29, 0x5F	; 95
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	00 e0       	ldi	r16, 0x00	; 0
    35ae:	0c bf       	out	0x3c, r16	; 60

000035b0 <__do_copy_data>:
    35b0:	11 e2       	ldi	r17, 0x21	; 33
    35b2:	a0 e0       	ldi	r26, 0x00	; 0
    35b4:	b0 e2       	ldi	r27, 0x20	; 32
    35b6:	e0 e2       	ldi	r30, 0x20	; 32
    35b8:	fe e1       	ldi	r31, 0x1E	; 30
    35ba:	01 e0       	ldi	r16, 0x01	; 1
    35bc:	0b bf       	out	0x3b, r16	; 59
    35be:	02 c0       	rjmp	.+4      	; 0x35c4 <__do_copy_data+0x14>
    35c0:	07 90       	elpm	r0, Z+
    35c2:	0d 92       	st	X+, r0
    35c4:	ac 3a       	cpi	r26, 0xAC	; 172
    35c6:	b1 07       	cpc	r27, r17
    35c8:	d9 f7       	brne	.-10     	; 0x35c0 <__do_copy_data+0x10>

000035ca <__do_clear_bss>:
    35ca:	2e e2       	ldi	r18, 0x2E	; 46
    35cc:	ac ea       	ldi	r26, 0xAC	; 172
    35ce:	b1 e2       	ldi	r27, 0x21	; 33
    35d0:	01 c0       	rjmp	.+2      	; 0x35d4 <.do_clear_bss_start>

000035d2 <.do_clear_bss_loop>:
    35d2:	1d 92       	st	X+, r1

000035d4 <.do_clear_bss_start>:
    35d4:	a3 39       	cpi	r26, 0x93	; 147
    35d6:	b2 07       	cpc	r27, r18
    35d8:	e1 f7       	brne	.-8      	; 0x35d2 <.do_clear_bss_loop>
    35da:	0e 94 97 71 	call	0xe32e	; 0xe32e <main>
    35de:	0c 94 ec 8e 	jmp	0x11dd8	; 0x11dd8 <_exit>

000035e2 <__bad_interrupt>:
    35e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000035e6 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    35e6:	ef 92       	push	r14
    35e8:	ff 92       	push	r15
    35ea:	0f 93       	push	r16
    35ec:	1f 93       	push	r17
    35ee:	cf 93       	push	r28
    35f0:	df 93       	push	r29
    35f2:	7c 01       	movw	r14, r24
    35f4:	8b 01       	movw	r16, r22
    35f6:	ea 01       	movw	r28, r20
	while (len) {
    35f8:	20 97       	sbiw	r28, 0x00	; 0
    35fa:	39 f0       	breq	.+14     	; 0x360a <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    35fc:	f8 01       	movw	r30, r16
    35fe:	61 91       	ld	r22, Z+
    3600:	8f 01       	movw	r16, r30
    3602:	c7 01       	movw	r24, r14
    3604:	0a d0       	rcall	.+20     	; 0x361a <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
    3606:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    3608:	c9 f7       	brne	.-14     	; 0x35fc <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	1f 91       	pop	r17
    3612:	0f 91       	pop	r16
    3614:	ff 90       	pop	r15
    3616:	ef 90       	pop	r14
    3618:	08 95       	ret

0000361a <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    361a:	fc 01       	movw	r30, r24
    361c:	91 81       	ldd	r25, Z+1	; 0x01
    361e:	95 ff       	sbrs	r25, 5
    3620:	fd cf       	rjmp	.-6      	; 0x361c <usart_putchar+0x2>
    3622:	60 83       	st	Z, r22
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	08 95       	ret

0000362a <usart_getchar>:
    362a:	fc 01       	movw	r30, r24
    362c:	91 81       	ldd	r25, Z+1	; 0x01
    362e:	99 23       	and	r25, r25
    3630:	ec f7       	brge	.-6      	; 0x362c <usart_getchar+0x2>
    3632:	80 81       	ld	r24, Z
    3634:	08 95       	ret

00003636 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    3636:	4f 92       	push	r4
    3638:	5f 92       	push	r5
    363a:	6f 92       	push	r6
    363c:	7f 92       	push	r7
    363e:	8f 92       	push	r8
    3640:	9f 92       	push	r9
    3642:	af 92       	push	r10
    3644:	bf 92       	push	r11
    3646:	ef 92       	push	r14
    3648:	ff 92       	push	r15
    364a:	0f 93       	push	r16
    364c:	1f 93       	push	r17
    364e:	cf 93       	push	r28
    3650:	7c 01       	movw	r14, r24
    3652:	4a 01       	movw	r8, r20
    3654:	5b 01       	movw	r10, r22
    3656:	28 01       	movw	r4, r16
    3658:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    365a:	fc 01       	movw	r30, r24
    365c:	84 81       	ldd	r24, Z+4	; 0x04
    365e:	82 ff       	sbrs	r24, 2
    3660:	16 c0       	rjmp	.+44     	; 0x368e <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    3662:	d9 01       	movw	r26, r18
    3664:	c8 01       	movw	r24, r16
    3666:	68 94       	set
    3668:	12 f8       	bld	r1, 2
    366a:	b6 95       	lsr	r27
    366c:	a7 95       	ror	r26
    366e:	97 95       	ror	r25
    3670:	87 95       	ror	r24
    3672:	16 94       	lsr	r1
    3674:	d1 f7       	brne	.-12     	; 0x366a <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    3676:	b9 01       	movw	r22, r18
    3678:	a8 01       	movw	r20, r16
    367a:	03 2e       	mov	r0, r19
    367c:	36 e1       	ldi	r19, 0x16	; 22
    367e:	76 95       	lsr	r23
    3680:	67 95       	ror	r22
    3682:	57 95       	ror	r21
    3684:	47 95       	ror	r20
    3686:	3a 95       	dec	r19
    3688:	d1 f7       	brne	.-12     	; 0x367e <usart_set_baudrate+0x48>
    368a:	30 2d       	mov	r19, r0
    368c:	15 c0       	rjmp	.+42     	; 0x36b8 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    368e:	d9 01       	movw	r26, r18
    3690:	c8 01       	movw	r24, r16
    3692:	68 94       	set
    3694:	13 f8       	bld	r1, 3
    3696:	b6 95       	lsr	r27
    3698:	a7 95       	ror	r26
    369a:	97 95       	ror	r25
    369c:	87 95       	ror	r24
    369e:	16 94       	lsr	r1
    36a0:	d1 f7       	brne	.-12     	; 0x3696 <usart_set_baudrate+0x60>
		min_rate /= 2;
    36a2:	b9 01       	movw	r22, r18
    36a4:	a8 01       	movw	r20, r16
    36a6:	03 2e       	mov	r0, r19
    36a8:	37 e1       	ldi	r19, 0x17	; 23
    36aa:	76 95       	lsr	r23
    36ac:	67 95       	ror	r22
    36ae:	57 95       	ror	r21
    36b0:	47 95       	ror	r20
    36b2:	3a 95       	dec	r19
    36b4:	d1 f7       	brne	.-12     	; 0x36aa <usart_set_baudrate+0x74>
    36b6:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    36b8:	88 15       	cp	r24, r8
    36ba:	99 05       	cpc	r25, r9
    36bc:	aa 05       	cpc	r26, r10
    36be:	bb 05       	cpc	r27, r11
    36c0:	08 f4       	brcc	.+2      	; 0x36c4 <usart_set_baudrate+0x8e>
    36c2:	a6 c0       	rjmp	.+332    	; 0x3810 <usart_set_baudrate+0x1da>
    36c4:	84 16       	cp	r8, r20
    36c6:	95 06       	cpc	r9, r21
    36c8:	a6 06       	cpc	r10, r22
    36ca:	b7 06       	cpc	r11, r23
    36cc:	08 f4       	brcc	.+2      	; 0x36d0 <usart_set_baudrate+0x9a>
    36ce:	a2 c0       	rjmp	.+324    	; 0x3814 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    36d0:	f7 01       	movw	r30, r14
    36d2:	84 81       	ldd	r24, Z+4	; 0x04
    36d4:	82 fd       	sbrc	r24, 2
    36d6:	04 c0       	rjmp	.+8      	; 0x36e0 <usart_set_baudrate+0xaa>
		baud *= 2;
    36d8:	88 0c       	add	r8, r8
    36da:	99 1c       	adc	r9, r9
    36dc:	aa 1c       	adc	r10, r10
    36de:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    36e0:	c3 01       	movw	r24, r6
    36e2:	b2 01       	movw	r22, r4
    36e4:	a5 01       	movw	r20, r10
    36e6:	94 01       	movw	r18, r8
    36e8:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    36ec:	2f 3f       	cpi	r18, 0xFF	; 255
    36ee:	31 05       	cpc	r19, r1
    36f0:	41 05       	cpc	r20, r1
    36f2:	51 05       	cpc	r21, r1
    36f4:	08 f4       	brcc	.+2      	; 0x36f8 <usart_set_baudrate+0xc2>
    36f6:	90 c0       	rjmp	.+288    	; 0x3818 <usart_set_baudrate+0x1e2>
    36f8:	8f ef       	ldi	r24, 0xFF	; 255
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	a0 e0       	ldi	r26, 0x00	; 0
    36fe:	b0 e0       	ldi	r27, 0x00	; 0
    3700:	c9 ef       	ldi	r28, 0xF9	; 249
    3702:	05 c0       	rjmp	.+10     	; 0x370e <usart_set_baudrate+0xd8>
    3704:	28 17       	cp	r18, r24
    3706:	39 07       	cpc	r19, r25
    3708:	4a 07       	cpc	r20, r26
    370a:	5b 07       	cpc	r21, r27
    370c:	58 f0       	brcs	.+22     	; 0x3724 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	aa 1f       	adc	r26, r26
    3714:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    3716:	cd 3f       	cpi	r28, 0xFD	; 253
    3718:	0c f4       	brge	.+2      	; 0x371c <usart_set_baudrate+0xe6>
			limit |= 1;
    371a:	81 60       	ori	r24, 0x01	; 1
    371c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    371e:	c7 30       	cpi	r28, 0x07	; 7
    3720:	89 f7       	brne	.-30     	; 0x3704 <usart_set_baudrate+0xce>
    3722:	4f c0       	rjmp	.+158    	; 0x37c2 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    3724:	cc 23       	and	r28, r28
    3726:	0c f0       	brlt	.+2      	; 0x372a <usart_set_baudrate+0xf4>
    3728:	4c c0       	rjmp	.+152    	; 0x37c2 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    372a:	d5 01       	movw	r26, r10
    372c:	c4 01       	movw	r24, r8
    372e:	88 0f       	add	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	aa 1f       	adc	r26, r26
    3734:	bb 1f       	adc	r27, r27
    3736:	88 0f       	add	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	aa 1f       	adc	r26, r26
    373c:	bb 1f       	adc	r27, r27
    373e:	88 0f       	add	r24, r24
    3740:	99 1f       	adc	r25, r25
    3742:	aa 1f       	adc	r26, r26
    3744:	bb 1f       	adc	r27, r27
    3746:	48 1a       	sub	r4, r24
    3748:	59 0a       	sbc	r5, r25
    374a:	6a 0a       	sbc	r6, r26
    374c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    374e:	ce 3f       	cpi	r28, 0xFE	; 254
    3750:	f4 f4       	brge	.+60     	; 0x378e <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3752:	8d ef       	ldi	r24, 0xFD	; 253
    3754:	9f ef       	ldi	r25, 0xFF	; 255
    3756:	8c 1b       	sub	r24, r28
    3758:	91 09       	sbc	r25, r1
    375a:	c7 fd       	sbrc	r28, 7
    375c:	93 95       	inc	r25
    375e:	04 c0       	rjmp	.+8      	; 0x3768 <usart_set_baudrate+0x132>
    3760:	44 0c       	add	r4, r4
    3762:	55 1c       	adc	r5, r5
    3764:	66 1c       	adc	r6, r6
    3766:	77 1c       	adc	r7, r7
    3768:	8a 95       	dec	r24
    376a:	d2 f7       	brpl	.-12     	; 0x3760 <usart_set_baudrate+0x12a>
    376c:	d5 01       	movw	r26, r10
    376e:	c4 01       	movw	r24, r8
    3770:	b6 95       	lsr	r27
    3772:	a7 95       	ror	r26
    3774:	97 95       	ror	r25
    3776:	87 95       	ror	r24
    3778:	bc 01       	movw	r22, r24
    377a:	cd 01       	movw	r24, r26
    377c:	64 0d       	add	r22, r4
    377e:	75 1d       	adc	r23, r5
    3780:	86 1d       	adc	r24, r6
    3782:	97 1d       	adc	r25, r7
    3784:	a5 01       	movw	r20, r10
    3786:	94 01       	movw	r18, r8
    3788:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
    378c:	37 c0       	rjmp	.+110    	; 0x37fc <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    378e:	83 e0       	ldi	r24, 0x03	; 3
    3790:	8c 0f       	add	r24, r28
    3792:	a5 01       	movw	r20, r10
    3794:	94 01       	movw	r18, r8
    3796:	04 c0       	rjmp	.+8      	; 0x37a0 <usart_set_baudrate+0x16a>
    3798:	22 0f       	add	r18, r18
    379a:	33 1f       	adc	r19, r19
    379c:	44 1f       	adc	r20, r20
    379e:	55 1f       	adc	r21, r21
    37a0:	8a 95       	dec	r24
    37a2:	d2 f7       	brpl	.-12     	; 0x3798 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    37a4:	da 01       	movw	r26, r20
    37a6:	c9 01       	movw	r24, r18
    37a8:	b6 95       	lsr	r27
    37aa:	a7 95       	ror	r26
    37ac:	97 95       	ror	r25
    37ae:	87 95       	ror	r24
    37b0:	bc 01       	movw	r22, r24
    37b2:	cd 01       	movw	r24, r26
    37b4:	64 0d       	add	r22, r4
    37b6:	75 1d       	adc	r23, r5
    37b8:	86 1d       	adc	r24, r6
    37ba:	97 1d       	adc	r25, r7
    37bc:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
    37c0:	1d c0       	rjmp	.+58     	; 0x37fc <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    37c2:	83 e0       	ldi	r24, 0x03	; 3
    37c4:	8c 0f       	add	r24, r28
    37c6:	a5 01       	movw	r20, r10
    37c8:	94 01       	movw	r18, r8
    37ca:	04 c0       	rjmp	.+8      	; 0x37d4 <usart_set_baudrate+0x19e>
    37cc:	22 0f       	add	r18, r18
    37ce:	33 1f       	adc	r19, r19
    37d0:	44 1f       	adc	r20, r20
    37d2:	55 1f       	adc	r21, r21
    37d4:	8a 95       	dec	r24
    37d6:	d2 f7       	brpl	.-12     	; 0x37cc <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    37d8:	da 01       	movw	r26, r20
    37da:	c9 01       	movw	r24, r18
    37dc:	b6 95       	lsr	r27
    37de:	a7 95       	ror	r26
    37e0:	97 95       	ror	r25
    37e2:	87 95       	ror	r24
    37e4:	bc 01       	movw	r22, r24
    37e6:	cd 01       	movw	r24, r26
    37e8:	64 0d       	add	r22, r4
    37ea:	75 1d       	adc	r23, r5
    37ec:	86 1d       	adc	r24, r6
    37ee:	97 1d       	adc	r25, r7
    37f0:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
    37f4:	21 50       	subi	r18, 0x01	; 1
    37f6:	31 09       	sbc	r19, r1
    37f8:	41 09       	sbc	r20, r1
    37fa:	51 09       	sbc	r21, r1
	volatile uint8_t reg_b = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	volatile uint8_t reg_a = (uint8_t)div;
	volatile uint16_t pre  = ((uint16_t)reg_b) | ((uint16_t)reg_a << 8);
#endif

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    37fc:	83 2f       	mov	r24, r19
    37fe:	8f 70       	andi	r24, 0x0F	; 15
    3800:	c2 95       	swap	r28
    3802:	c0 7f       	andi	r28, 0xF0	; 240
    3804:	c8 2b       	or	r28, r24
    3806:	f7 01       	movw	r30, r14
    3808:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    380a:	26 83       	std	Z+6, r18	; 0x06

	return true;
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	18 c0       	rjmp	.+48     	; 0x3840 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    3810:	80 e0       	ldi	r24, 0x00	; 0
    3812:	16 c0       	rjmp	.+44     	; 0x3840 <usart_set_baudrate+0x20a>
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	14 c0       	rjmp	.+40     	; 0x3840 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3818:	d5 01       	movw	r26, r10
    381a:	c4 01       	movw	r24, r8
    381c:	88 0f       	add	r24, r24
    381e:	99 1f       	adc	r25, r25
    3820:	aa 1f       	adc	r26, r26
    3822:	bb 1f       	adc	r27, r27
    3824:	88 0f       	add	r24, r24
    3826:	99 1f       	adc	r25, r25
    3828:	aa 1f       	adc	r26, r26
    382a:	bb 1f       	adc	r27, r27
    382c:	88 0f       	add	r24, r24
    382e:	99 1f       	adc	r25, r25
    3830:	aa 1f       	adc	r26, r26
    3832:	bb 1f       	adc	r27, r27
    3834:	48 1a       	sub	r4, r24
    3836:	59 0a       	sbc	r5, r25
    3838:	6a 0a       	sbc	r6, r26
    383a:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    383c:	c9 ef       	ldi	r28, 0xF9	; 249
    383e:	89 cf       	rjmp	.-238    	; 0x3752 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    3840:	cf 91       	pop	r28
    3842:	1f 91       	pop	r17
    3844:	0f 91       	pop	r16
    3846:	ff 90       	pop	r15
    3848:	ef 90       	pop	r14
    384a:	bf 90       	pop	r11
    384c:	af 90       	pop	r10
    384e:	9f 90       	pop	r9
    3850:	8f 90       	pop	r8
    3852:	7f 90       	pop	r7
    3854:	6f 90       	pop	r6
    3856:	5f 90       	pop	r5
    3858:	4f 90       	pop	r4
    385a:	08 95       	ret

0000385c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    385c:	0f 93       	push	r16
    385e:	1f 93       	push	r17
    3860:	cf 93       	push	r28
    3862:	df 93       	push	r29
    3864:	ec 01       	movw	r28, r24
    3866:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    3868:	00 97       	sbiw	r24, 0x00	; 0
    386a:	09 f4       	brne	.+2      	; 0x386e <usart_init_rs232+0x12>
    386c:	03 c1       	rjmp	.+518    	; 0x3a74 <usart_init_rs232+0x218>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    386e:	80 3c       	cpi	r24, 0xC0	; 192
    3870:	91 05       	cpc	r25, r1
    3872:	29 f4       	brne	.+10     	; 0x387e <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    3874:	60 e1       	ldi	r22, 0x10	; 16
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    387c:	fb c0       	rjmp	.+502    	; 0x3a74 <usart_init_rs232+0x218>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    387e:	c0 38       	cpi	r28, 0x80	; 128
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	d8 07       	cpc	r29, r24
    3884:	29 f4       	brne	.+10     	; 0x3890 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3886:	62 e0       	ldi	r22, 0x02	; 2
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    388e:	f2 c0       	rjmp	.+484    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    3890:	c1 15       	cp	r28, r1
    3892:	e1 e0       	ldi	r30, 0x01	; 1
    3894:	de 07       	cpc	r29, r30
    3896:	29 f4       	brne	.+10     	; 0x38a2 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    3898:	61 e0       	ldi	r22, 0x01	; 1
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    38a0:	e9 c0       	rjmp	.+466    	; 0x3a74 <usart_init_rs232+0x218>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    38a2:	c0 38       	cpi	r28, 0x80	; 128
    38a4:	f3 e0       	ldi	r31, 0x03	; 3
    38a6:	df 07       	cpc	r29, r31
    38a8:	29 f4       	brne	.+10     	; 0x38b4 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    38aa:	61 e0       	ldi	r22, 0x01	; 1
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    38b2:	e0 c0       	rjmp	.+448    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    38b4:	c0 39       	cpi	r28, 0x90	; 144
    38b6:	83 e0       	ldi	r24, 0x03	; 3
    38b8:	d8 07       	cpc	r29, r24
    38ba:	29 f4       	brne	.+10     	; 0x38c6 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    38bc:	61 e0       	ldi	r22, 0x01	; 1
    38be:	82 e0       	ldi	r24, 0x02	; 2
    38c0:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    38c4:	d7 c0       	rjmp	.+430    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    38c6:	c1 15       	cp	r28, r1
    38c8:	e2 e0       	ldi	r30, 0x02	; 2
    38ca:	de 07       	cpc	r29, r30
    38cc:	29 f4       	brne	.+10     	; 0x38d8 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    38ce:	62 e0       	ldi	r22, 0x02	; 2
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    38d6:	ce c0       	rjmp	.+412    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    38d8:	c0 34       	cpi	r28, 0x40	; 64
    38da:	f2 e0       	ldi	r31, 0x02	; 2
    38dc:	df 07       	cpc	r29, r31
    38de:	29 f4       	brne	.+10     	; 0x38ea <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    38e0:	62 e0       	ldi	r22, 0x02	; 2
    38e2:	82 e0       	ldi	r24, 0x02	; 2
    38e4:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    38e8:	c5 c0       	rjmp	.+394    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    38ea:	c0 32       	cpi	r28, 0x20	; 32
    38ec:	83 e0       	ldi	r24, 0x03	; 3
    38ee:	d8 07       	cpc	r29, r24
    38f0:	29 f4       	brne	.+10     	; 0x38fc <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    38f2:	64 e0       	ldi	r22, 0x04	; 4
    38f4:	82 e0       	ldi	r24, 0x02	; 2
    38f6:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    38fa:	bc c0       	rjmp	.+376    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    38fc:	c1 15       	cp	r28, r1
    38fe:	e8 e0       	ldi	r30, 0x08	; 8
    3900:	de 07       	cpc	r29, r30
    3902:	29 f4       	brne	.+10     	; 0x390e <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    3904:	61 e0       	ldi	r22, 0x01	; 1
    3906:	83 e0       	ldi	r24, 0x03	; 3
    3908:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    390c:	b3 c0       	rjmp	.+358    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    390e:	c1 15       	cp	r28, r1
    3910:	f9 e0       	ldi	r31, 0x09	; 9
    3912:	df 07       	cpc	r29, r31
    3914:	29 f4       	brne	.+10     	; 0x3920 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    3916:	61 e0       	ldi	r22, 0x01	; 1
    3918:	84 e0       	ldi	r24, 0x04	; 4
    391a:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    391e:	aa c0       	rjmp	.+340    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    3920:	c1 15       	cp	r28, r1
    3922:	8a e0       	ldi	r24, 0x0A	; 10
    3924:	d8 07       	cpc	r29, r24
    3926:	29 f4       	brne	.+10     	; 0x3932 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    3928:	61 e0       	ldi	r22, 0x01	; 1
    392a:	85 e0       	ldi	r24, 0x05	; 5
    392c:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    3930:	a1 c0       	rjmp	.+322    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    3932:	c1 15       	cp	r28, r1
    3934:	eb e0       	ldi	r30, 0x0B	; 11
    3936:	de 07       	cpc	r29, r30
    3938:	29 f4       	brne	.+10     	; 0x3944 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    393a:	61 e0       	ldi	r22, 0x01	; 1
    393c:	86 e0       	ldi	r24, 0x06	; 6
    393e:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    3942:	98 c0       	rjmp	.+304    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    3944:	c0 34       	cpi	r28, 0x40	; 64
    3946:	f8 e0       	ldi	r31, 0x08	; 8
    3948:	df 07       	cpc	r29, r31
    394a:	29 f4       	brne	.+10     	; 0x3956 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    394c:	62 e0       	ldi	r22, 0x02	; 2
    394e:	83 e0       	ldi	r24, 0x03	; 3
    3950:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    3954:	8f c0       	rjmp	.+286    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    3956:	c0 34       	cpi	r28, 0x40	; 64
    3958:	89 e0       	ldi	r24, 0x09	; 9
    395a:	d8 07       	cpc	r29, r24
    395c:	29 f4       	brne	.+10     	; 0x3968 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    395e:	62 e0       	ldi	r22, 0x02	; 2
    3960:	84 e0       	ldi	r24, 0x04	; 4
    3962:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    3966:	86 c0       	rjmp	.+268    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    3968:	c0 34       	cpi	r28, 0x40	; 64
    396a:	ea e0       	ldi	r30, 0x0A	; 10
    396c:	de 07       	cpc	r29, r30
    396e:	29 f4       	brne	.+10     	; 0x397a <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    3970:	62 e0       	ldi	r22, 0x02	; 2
    3972:	85 e0       	ldi	r24, 0x05	; 5
    3974:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    3978:	7d c0       	rjmp	.+250    	; 0x3a74 <usart_init_rs232+0x218>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    397a:	c0 39       	cpi	r28, 0x90	; 144
    397c:	f8 e0       	ldi	r31, 0x08	; 8
    397e:	df 07       	cpc	r29, r31
    3980:	29 f4       	brne	.+10     	; 0x398c <usart_init_rs232+0x130>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3982:	64 e0       	ldi	r22, 0x04	; 4
    3984:	83 e0       	ldi	r24, 0x03	; 3
    3986:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    398a:	74 c0       	rjmp	.+232    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    398c:	c0 39       	cpi	r28, 0x90	; 144
    398e:	89 e0       	ldi	r24, 0x09	; 9
    3990:	d8 07       	cpc	r29, r24
    3992:	29 f4       	brne	.+10     	; 0x399e <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3994:	64 e0       	ldi	r22, 0x04	; 4
    3996:	84 e0       	ldi	r24, 0x04	; 4
    3998:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    399c:	6b c0       	rjmp	.+214    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    399e:	c0 39       	cpi	r28, 0x90	; 144
    39a0:	ea e0       	ldi	r30, 0x0A	; 10
    39a2:	de 07       	cpc	r29, r30
    39a4:	29 f4       	brne	.+10     	; 0x39b0 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    39a6:	64 e0       	ldi	r22, 0x04	; 4
    39a8:	85 e0       	ldi	r24, 0x05	; 5
    39aa:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    39ae:	62 c0       	rjmp	.+196    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    39b0:	c0 39       	cpi	r28, 0x90	; 144
    39b2:	fb e0       	ldi	r31, 0x0B	; 11
    39b4:	df 07       	cpc	r29, r31
    39b6:	29 f4       	brne	.+10     	; 0x39c2 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    39b8:	64 e0       	ldi	r22, 0x04	; 4
    39ba:	86 e0       	ldi	r24, 0x06	; 6
    39bc:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    39c0:	59 c0       	rjmp	.+178    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    39c2:	c0 3c       	cpi	r28, 0xC0	; 192
    39c4:	88 e0       	ldi	r24, 0x08	; 8
    39c6:	d8 07       	cpc	r29, r24
    39c8:	29 f4       	brne	.+10     	; 0x39d4 <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    39ca:	68 e0       	ldi	r22, 0x08	; 8
    39cc:	83 e0       	ldi	r24, 0x03	; 3
    39ce:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    39d2:	50 c0       	rjmp	.+160    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    39d4:	c0 3c       	cpi	r28, 0xC0	; 192
    39d6:	e9 e0       	ldi	r30, 0x09	; 9
    39d8:	de 07       	cpc	r29, r30
    39da:	29 f4       	brne	.+10     	; 0x39e6 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    39dc:	68 e0       	ldi	r22, 0x08	; 8
    39de:	84 e0       	ldi	r24, 0x04	; 4
    39e0:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    39e4:	47 c0       	rjmp	.+142    	; 0x3a74 <usart_init_rs232+0x218>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    39e6:	c0 3a       	cpi	r28, 0xA0	; 160
    39e8:	f8 e0       	ldi	r31, 0x08	; 8
    39ea:	df 07       	cpc	r29, r31
    39ec:	29 f4       	brne	.+10     	; 0x39f8 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    39ee:	60 e1       	ldi	r22, 0x10	; 16
    39f0:	83 e0       	ldi	r24, 0x03	; 3
    39f2:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    39f6:	3e c0       	rjmp	.+124    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    39f8:	c0 3a       	cpi	r28, 0xA0	; 160
    39fa:	89 e0       	ldi	r24, 0x09	; 9
    39fc:	d8 07       	cpc	r29, r24
    39fe:	29 f4       	brne	.+10     	; 0x3a0a <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    3a00:	60 e1       	ldi	r22, 0x10	; 16
    3a02:	84 e0       	ldi	r24, 0x04	; 4
    3a04:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    3a08:	35 c0       	rjmp	.+106    	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    3a0a:	c0 3a       	cpi	r28, 0xA0	; 160
    3a0c:	ea e0       	ldi	r30, 0x0A	; 10
    3a0e:	de 07       	cpc	r29, r30
    3a10:	29 f4       	brne	.+10     	; 0x3a1c <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    3a12:	60 e1       	ldi	r22, 0x10	; 16
    3a14:	85 e0       	ldi	r24, 0x05	; 5
    3a16:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    3a1a:	2c c0       	rjmp	.+88     	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    3a1c:	c0 3a       	cpi	r28, 0xA0	; 160
    3a1e:	fb e0       	ldi	r31, 0x0B	; 11
    3a20:	df 07       	cpc	r29, r31
    3a22:	29 f4       	brne	.+10     	; 0x3a2e <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    3a24:	60 e1       	ldi	r22, 0x10	; 16
    3a26:	86 e0       	ldi	r24, 0x06	; 6
    3a28:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    3a2c:	23 c0       	rjmp	.+70     	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    3a2e:	c0 3b       	cpi	r28, 0xB0	; 176
    3a30:	88 e0       	ldi	r24, 0x08	; 8
    3a32:	d8 07       	cpc	r29, r24
    3a34:	29 f4       	brne	.+10     	; 0x3a40 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    3a36:	60 e2       	ldi	r22, 0x20	; 32
    3a38:	83 e0       	ldi	r24, 0x03	; 3
    3a3a:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    3a3e:	1a c0       	rjmp	.+52     	; 0x3a74 <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    3a40:	c0 3b       	cpi	r28, 0xB0	; 176
    3a42:	e9 e0       	ldi	r30, 0x09	; 9
    3a44:	de 07       	cpc	r29, r30
    3a46:	29 f4       	brne	.+10     	; 0x3a52 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    3a48:	60 e2       	ldi	r22, 0x20	; 32
    3a4a:	84 e0       	ldi	r24, 0x04	; 4
    3a4c:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    3a50:	11 c0       	rjmp	.+34     	; 0x3a74 <usart_init_rs232+0x218>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    3a52:	c0 38       	cpi	r28, 0x80	; 128
    3a54:	f4 e0       	ldi	r31, 0x04	; 4
    3a56:	df 07       	cpc	r29, r31
    3a58:	29 f4       	brne	.+10     	; 0x3a64 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3a5a:	60 e4       	ldi	r22, 0x40	; 64
    3a5c:	83 e0       	ldi	r24, 0x03	; 3
    3a5e:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    3a62:	08 c0       	rjmp	.+16     	; 0x3a74 <usart_init_rs232+0x218>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    3a64:	c0 3a       	cpi	r28, 0xA0	; 160
    3a66:	84 e0       	ldi	r24, 0x04	; 4
    3a68:	d8 07       	cpc	r29, r24
    3a6a:	21 f4       	brne	.+8      	; 0x3a74 <usart_init_rs232+0x218>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    3a6c:	60 e4       	ldi	r22, 0x40	; 64
    3a6e:	85 e0       	ldi	r24, 0x05	; 5
    3a70:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    3a74:	8d 81       	ldd	r24, Y+5	; 0x05
    3a76:	8f 73       	andi	r24, 0x3F	; 63
    3a78:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    3a7a:	f8 01       	movw	r30, r16
    3a7c:	95 81       	ldd	r25, Z+5	; 0x05
    3a7e:	84 81       	ldd	r24, Z+4	; 0x04
    3a80:	89 2b       	or	r24, r25
    3a82:	96 81       	ldd	r25, Z+6	; 0x06
    3a84:	91 11       	cpse	r25, r1
    3a86:	98 e0       	ldi	r25, 0x08	; 8
    3a88:	89 2b       	or	r24, r25
    3a8a:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    3a8c:	f8 01       	movw	r30, r16
    3a8e:	40 81       	ld	r20, Z
    3a90:	51 81       	ldd	r21, Z+1	; 0x01
    3a92:	62 81       	ldd	r22, Z+2	; 0x02
    3a94:	73 81       	ldd	r23, Z+3	; 0x03
    3a96:	00 e8       	ldi	r16, 0x80	; 128
    3a98:	13 ec       	ldi	r17, 0xC3	; 195
    3a9a:	29 ec       	ldi	r18, 0xC9	; 201
    3a9c:	31 e0       	ldi	r19, 0x01	; 1
    3a9e:	ce 01       	movw	r24, r28
    3aa0:	ca dd       	rcall	.-1132   	; 0x3636 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    3aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa4:	98 60       	ori	r25, 0x08	; 8
    3aa6:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    3aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aaa:	90 61       	ori	r25, 0x10	; 16
    3aac:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    3aae:	df 91       	pop	r29
    3ab0:	cf 91       	pop	r28
    3ab2:	1f 91       	pop	r17
    3ab4:	0f 91       	pop	r16
    3ab6:	08 95       	ret

00003ab8 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    3ab8:	04 c0       	rjmp	.+8      	; 0x3ac2 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    3aba:	61 50       	subi	r22, 0x01	; 1
    3abc:	71 09       	sbc	r23, r1
    3abe:	81 09       	sbc	r24, r1
    3ac0:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    3ac2:	61 15       	cp	r22, r1
    3ac4:	71 05       	cpc	r23, r1
    3ac6:	81 05       	cpc	r24, r1
    3ac8:	91 05       	cpc	r25, r1
    3aca:	b9 f7       	brne	.-18     	; 0x3aba <__portable_avr_delay_cycles+0x2>
    3acc:	08 95       	ret

00003ace <__vector_119>:

/* ISR routines */

/* Serial data received */
ISR(USARTF0_RXC_vect)
{
    3ace:	1f 92       	push	r1
    3ad0:	0f 92       	push	r0
    3ad2:	0f b6       	in	r0, 0x3f	; 63
    3ad4:	0f 92       	push	r0
    3ad6:	11 24       	eor	r1, r1
    3ad8:	0b b6       	in	r0, 0x3b	; 59
    3ada:	0f 92       	push	r0
    3adc:	2f 93       	push	r18
    3ade:	3f 93       	push	r19
    3ae0:	4f 93       	push	r20
    3ae2:	5f 93       	push	r21
    3ae4:	6f 93       	push	r22
    3ae6:	7f 93       	push	r23
    3ae8:	8f 93       	push	r24
    3aea:	9f 93       	push	r25
    3aec:	af 93       	push	r26
    3aee:	bf 93       	push	r27
    3af0:	ef 93       	push	r30
    3af2:	ff 93       	push	r31
	/* Byte received */
	uint8_t ser1_rxd = usart_getchar(USART_SERIAL1);
    3af4:	80 ea       	ldi	r24, 0xA0	; 160
    3af6:	9b e0       	ldi	r25, 0x0B	; 11
    3af8:	98 dd       	rcall	.-1232   	; 0x362a <usart_getchar>

	if (g_usart1_rx_idx < C_USART1_RX_BUF_LEN) {
    3afa:	20 91 75 28 	lds	r18, 0x2875	; 0x802875 <g_usart1_rx_idx>
    3afe:	30 91 76 28 	lds	r19, 0x2876	; 0x802876 <g_usart1_rx_idx+0x1>
    3b02:	2f 3f       	cpi	r18, 0xFF	; 255
    3b04:	31 05       	cpc	r19, r1
    3b06:	09 f0       	breq	.+2      	; 0x3b0a <__vector_119+0x3c>
    3b08:	58 f4       	brcc	.+22     	; 0x3b20 <__vector_119+0x52>
		g_usart1_rx_buf[g_usart1_rx_idx++] = ser1_rxd;
    3b0a:	a9 01       	movw	r20, r18
    3b0c:	4f 5f       	subi	r20, 0xFF	; 255
    3b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b10:	40 93 75 28 	sts	0x2875, r20	; 0x802875 <g_usart1_rx_idx>
    3b14:	50 93 76 28 	sts	0x2876, r21	; 0x802876 <g_usart1_rx_idx+0x1>
    3b18:	f9 01       	movw	r30, r18
    3b1a:	eb 58       	subi	r30, 0x8B	; 139
    3b1c:	f8 4d       	sbci	r31, 0xD8	; 216
    3b1e:	80 83       	st	Z, r24
	}

	/* Input string ready to read */
	g_usart1_rx_ready = true;
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	80 93 77 28 	sts	0x2877, r24	; 0x802877 <g_usart1_rx_ready>
}
    3b26:	ff 91       	pop	r31
    3b28:	ef 91       	pop	r30
    3b2a:	bf 91       	pop	r27
    3b2c:	af 91       	pop	r26
    3b2e:	9f 91       	pop	r25
    3b30:	8f 91       	pop	r24
    3b32:	7f 91       	pop	r23
    3b34:	6f 91       	pop	r22
    3b36:	5f 91       	pop	r21
    3b38:	4f 91       	pop	r20
    3b3a:	3f 91       	pop	r19
    3b3c:	2f 91       	pop	r18
    3b3e:	0f 90       	pop	r0
    3b40:	0b be       	out	0x3b, r0	; 59
    3b42:	0f 90       	pop	r0
    3b44:	0f be       	out	0x3f, r0	; 63
    3b46:	0f 90       	pop	r0
    3b48:	1f 90       	pop	r1
    3b4a:	18 95       	reti

00003b4c <serial_sim808_send>:


/* Functions */

void serial_sim808_send(const char* cmd, uint8_t len)
{
    3b4c:	dc 01       	movw	r26, r24
	/* Make a copy */
	for (uint8_t cnt = len, idx = len - 1; cnt; --cnt, --idx) {
    3b4e:	9f ef       	ldi	r25, 0xFF	; 255
    3b50:	96 0f       	add	r25, r22
    3b52:	66 23       	and	r22, r22
    3b54:	61 f0       	breq	.+24     	; 0x3b6e <serial_sim808_send+0x22>
		g_prepare_buf[idx] = cmd[idx];
    3b56:	29 2f       	mov	r18, r25
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	fd 01       	movw	r30, r26
    3b5c:	e2 0f       	add	r30, r18
    3b5e:	f3 1f       	adc	r31, r19
    3b60:	50 81       	ld	r21, Z
    3b62:	f9 01       	movw	r30, r18
    3b64:	e5 5e       	subi	r30, 0xE5	; 229
    3b66:	fa 4d       	sbci	r31, 0xDA	; 218
    3b68:	50 83       	st	Z, r21
/* Functions */

void serial_sim808_send(const char* cmd, uint8_t len)
{
	/* Make a copy */
	for (uint8_t cnt = len, idx = len - 1; cnt; --cnt, --idx) {
    3b6a:	91 50       	subi	r25, 0x01	; 1
    3b6c:	a0 f7       	brcc	.-24     	; 0x3b56 <serial_sim808_send+0xa>
		g_prepare_buf[idx] = cmd[idx];
	}
	g_prepare_buf[len]		= '\r';
    3b6e:	46 2f       	mov	r20, r22
    3b70:	50 e0       	ldi	r21, 0x00	; 0
    3b72:	fa 01       	movw	r30, r20
    3b74:	e5 5e       	subi	r30, 0xE5	; 229
    3b76:	fa 4d       	sbci	r31, 0xDA	; 218
    3b78:	8d e0       	ldi	r24, 0x0D	; 13
    3b7a:	80 83       	st	Z, r24
	g_prepare_buf[len + 1]	= 0;
    3b7c:	11 82       	std	Z+1, r1	; 0x01

	/* Send the string to the SIM808 */
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3b7e:	6b e1       	ldi	r22, 0x1B	; 27
    3b80:	75 e2       	ldi	r23, 0x25	; 37
    3b82:	80 ea       	ldi	r24, 0xA0	; 160
    3b84:	9b e0       	ldi	r25, 0x0B	; 11
    3b86:	2f cd       	rjmp	.-1442   	; 0x35e6 <usart_serial_write_packet>
    3b88:	08 95       	ret

00003b8a <serial_init>:
}

/* Set up serial connection to the SIM808 */
void serial_init(void)
{
    3b8a:	cf 92       	push	r12
    3b8c:	df 92       	push	r13
    3b8e:	ff 92       	push	r15
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	27 97       	sbiw	r28, 0x07	; 7
    3b9e:	cd bf       	out	0x3d, r28	; 61
    3ba0:	de bf       	out	0x3e, r29	; 62
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3ba2:	e0 ea       	ldi	r30, 0xA0	; 160
    3ba4:	f6 e0       	ldi	r31, 0x06	; 6
    3ba6:	92 e0       	ldi	r25, 0x02	; 2
    3ba8:	95 83       	std	Z+5, r25	; 0x05
    3baa:	88 e0       	ldi	r24, 0x08	; 8
    3bac:	85 83       	std	Z+5, r24	; 0x05
    3bae:	60 e8       	ldi	r22, 0x80	; 128
    3bb0:	65 83       	std	Z+5, r22	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3bb2:	20 e8       	ldi	r18, 0x80	; 128
    3bb4:	36 e0       	ldi	r19, 0x06	; 6
    3bb6:	00 e2       	ldi	r16, 0x20	; 32
    3bb8:	d9 01       	movw	r26, r18
    3bba:	16 96       	adiw	r26, 0x06	; 6
    3bbc:	0c 93       	st	X, r16
    3bbe:	16 97       	sbiw	r26, 0x06	; 6
    3bc0:	70 e1       	ldi	r23, 0x10	; 16
    3bc2:	16 96       	adiw	r26, 0x06	; 6
    3bc4:	7c 93       	st	X, r23
    3bc6:	0f 2e       	mov	r0, r31
    3bc8:	f0 e6       	ldi	r31, 0x60	; 96
    3bca:	cf 2e       	mov	r12, r31
    3bcc:	f6 e0       	ldi	r31, 0x06	; 6
    3bce:	df 2e       	mov	r13, r31
    3bd0:	f0 2d       	mov	r31, r0
    3bd2:	d6 01       	movw	r26, r12
    3bd4:	16 96       	adiw	r26, 0x06	; 6
    3bd6:	9c 93       	st	X, r25
    3bd8:	16 97       	sbiw	r26, 0x06	; 6
    3bda:	16 96       	adiw	r26, 0x06	; 6
    3bdc:	8c 93       	st	X, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3bde:	4f b7       	in	r20, 0x3f	; 63
    3be0:	49 83       	std	Y+1, r20	; 0x01
	cpu_irq_disable();
    3be2:	f8 94       	cli
	return flags;
    3be4:	f9 80       	ldd	r15, Y+1	; 0x01
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3be6:	41 eb       	ldi	r20, 0xB1	; 177
    3be8:	56 e0       	ldi	r21, 0x06	; 6
    3bea:	da 01       	movw	r26, r20
    3bec:	1c 91       	ld	r17, X
    3bee:	17 70       	andi	r17, 0x07	; 7
    3bf0:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3bf2:	1c 91       	ld	r17, X
    3bf4:	10 68       	ori	r17, 0x80	; 128
    3bf6:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3bf8:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3bfa:	4f b7       	in	r20, 0x3f	; 63
    3bfc:	4a 83       	std	Y+2, r20	; 0x02
	cpu_irq_disable();
    3bfe:	f8 94       	cli
	return flags;
    3c00:	fa 80       	ldd	r15, Y+2	; 0x02
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3c02:	43 eb       	ldi	r20, 0xB3	; 179
    3c04:	56 e0       	ldi	r21, 0x06	; 6
    3c06:	da 01       	movw	r26, r20
    3c08:	1c 91       	ld	r17, X
    3c0a:	17 70       	andi	r17, 0x07	; 7
    3c0c:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3c0e:	1c 91       	ld	r17, X
    3c10:	10 68       	ori	r17, 0x80	; 128
    3c12:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c14:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c16:	4f b7       	in	r20, 0x3f	; 63
    3c18:	4b 83       	std	Y+3, r20	; 0x03
	cpu_irq_disable();
    3c1a:	f8 94       	cli
	return flags;
    3c1c:	fb 80       	ldd	r15, Y+3	; 0x03
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3c1e:	47 eb       	ldi	r20, 0xB7	; 183
    3c20:	56 e0       	ldi	r21, 0x06	; 6
    3c22:	da 01       	movw	r26, r20
    3c24:	1c 91       	ld	r17, X
    3c26:	17 70       	andi	r17, 0x07	; 7
    3c28:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3c2a:	1c 91       	ld	r17, X
    3c2c:	10 68       	ori	r17, 0x80	; 128
    3c2e:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c30:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c32:	4f b7       	in	r20, 0x3f	; 63
    3c34:	4c 83       	std	Y+4, r20	; 0x04
	cpu_irq_disable();
    3c36:	f8 94       	cli
	return flags;
    3c38:	fc 80       	ldd	r15, Y+4	; 0x04
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3c3a:	45 e9       	ldi	r20, 0x95	; 149
    3c3c:	56 e0       	ldi	r21, 0x06	; 6
    3c3e:	da 01       	movw	r26, r20
    3c40:	1c 91       	ld	r17, X
    3c42:	17 70       	andi	r17, 0x07	; 7
    3c44:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3c46:	1c 91       	ld	r17, X
    3c48:	10 69       	ori	r17, 0x90	; 144
    3c4a:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c4c:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c4e:	4f b7       	in	r20, 0x3f	; 63
    3c50:	4d 83       	std	Y+5, r20	; 0x05
	cpu_irq_disable();
    3c52:	f8 94       	cli
	return flags;
    3c54:	fd 80       	ldd	r15, Y+5	; 0x05
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3c56:	44 e9       	ldi	r20, 0x94	; 148
    3c58:	56 e0       	ldi	r21, 0x06	; 6
    3c5a:	da 01       	movw	r26, r20
    3c5c:	1c 91       	ld	r17, X
    3c5e:	17 70       	andi	r17, 0x07	; 7
    3c60:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3c62:	1c 91       	ld	r17, X
    3c64:	10 69       	ori	r17, 0x90	; 144
    3c66:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c68:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c6a:	4f b7       	in	r20, 0x3f	; 63
    3c6c:	4e 83       	std	Y+6, r20	; 0x06
	cpu_irq_disable();
    3c6e:	f8 94       	cli
	return flags;
    3c70:	fe 80       	ldd	r15, Y+6	; 0x06
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3c72:	41 e7       	ldi	r20, 0x71	; 113
    3c74:	56 e0       	ldi	r21, 0x06	; 6
    3c76:	da 01       	movw	r26, r20
    3c78:	1c 91       	ld	r17, X
    3c7a:	17 70       	andi	r17, 0x07	; 7
    3c7c:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3c7e:	1c 91       	ld	r17, X
    3c80:	10 69       	ori	r17, 0x90	; 144
    3c82:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c84:	ff be       	out	0x3f, r15	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c86:	4f b7       	in	r20, 0x3f	; 63
    3c88:	4f 83       	std	Y+7, r20	; 0x07
	cpu_irq_disable();
    3c8a:	f8 94       	cli
	return flags;
    3c8c:	ff 80       	ldd	r15, Y+7	; 0x07
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    3c8e:	43 e7       	ldi	r20, 0x73	; 115
    3c90:	56 e0       	ldi	r21, 0x06	; 6
    3c92:	da 01       	movw	r26, r20
    3c94:	1c 91       	ld	r17, X
    3c96:	17 70       	andi	r17, 0x07	; 7
    3c98:	1c 93       	st	X, r17
	*pin_ctrl |= mode;
    3c9a:	1c 91       	ld	r17, X
    3c9c:	10 69       	ori	r17, 0x90	; 144
    3c9e:	1c 93       	st	X, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3ca0:	ff be       	out	0x3f, r15	; 63
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3ca2:	91 83       	std	Z+1, r25	; 0x01
    3ca4:	81 83       	std	Z+1, r24	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3ca6:	54 e0       	ldi	r21, 0x04	; 4
    3ca8:	52 83       	std	Z+2, r21	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3caa:	61 83       	std	Z+1, r22	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3cac:	10 e4       	ldi	r17, 0x40	; 64
    3cae:	12 83       	std	Z+2, r17	; 0x02
    3cb0:	72 83       	std	Z+2, r23	; 0x02
    3cb2:	41 e0       	ldi	r20, 0x01	; 1
    3cb4:	42 83       	std	Z+2, r20	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3cb6:	f9 01       	movw	r30, r18
    3cb8:	01 83       	std	Z+1, r16	; 0x01
    3cba:	71 83       	std	Z+1, r23	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3cbc:	82 83       	std	Z+2, r24	; 0x02
    3cbe:	e0 e0       	ldi	r30, 0x00	; 0
    3cc0:	f6 e0       	ldi	r31, 0x06	; 6
    3cc2:	62 83       	std	Z+2, r22	; 0x02
    3cc4:	12 83       	std	Z+2, r17	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    3cc6:	d6 01       	movw	r26, r12
    3cc8:	11 96       	adiw	r26, 0x01	; 1
    3cca:	9c 93       	st	X, r25
    3ccc:	11 97       	sbiw	r26, 0x01	; 1
    3cce:	11 96       	adiw	r26, 0x01	; 1
    3cd0:	8c 93       	st	X, r24
    3cd2:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3cd4:	12 96       	adiw	r26, 0x02	; 2
    3cd6:	5c 93       	st	X, r21
    3cd8:	12 97       	sbiw	r26, 0x02	; 2
    3cda:	12 96       	adiw	r26, 0x02	; 2
    3cdc:	4c 93       	st	X, r20
    3cde:	40 93 e2 07 	sts	0x07E2, r20	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7007e2>

	ioport_set_pin_dir(GPS_GSM_1PPS_GPIO,			IOPORT_DIR_INPUT);


	/* Prepare to use ASF USART service */
	g_usart1_options.baudrate	= USART_SERIAL1_BAUDRATE;
    3ce2:	e8 e7       	ldi	r30, 0x78	; 120
    3ce4:	f8 e2       	ldi	r31, 0x28	; 40
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	96 e9       	ldi	r25, 0x96	; 150
    3cea:	a0 e0       	ldi	r26, 0x00	; 0
    3cec:	b0 e0       	ldi	r27, 0x00	; 0
    3cee:	80 83       	st	Z, r24
    3cf0:	91 83       	std	Z+1, r25	; 0x01
    3cf2:	a2 83       	std	Z+2, r26	; 0x02
    3cf4:	b3 83       	std	Z+3, r27	; 0x03
	g_usart1_options.charlength	= USART_SERIAL1_CHAR_LENGTH;
    3cf6:	83 e0       	ldi	r24, 0x03	; 3
    3cf8:	84 83       	std	Z+4, r24	; 0x04
	g_usart1_options.paritytype	= USART_SERIAL1_PARITY;
    3cfa:	15 82       	std	Z+5, r1	; 0x05
	g_usart1_options.stopbits	= USART_SERIAL1_STOP_BIT;
    3cfc:	16 82       	std	Z+6, r1	; 0x06
}
    3cfe:	27 96       	adiw	r28, 0x07	; 7
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	de bf       	out	0x3e, r29	; 62
    3d04:	df 91       	pop	r29
    3d06:	cf 91       	pop	r28
    3d08:	1f 91       	pop	r17
    3d0a:	0f 91       	pop	r16
    3d0c:	ff 90       	pop	r15
    3d0e:	df 90       	pop	r13
    3d10:	cf 90       	pop	r12
    3d12:	08 95       	ret

00003d14 <serial_start>:
PROGMEM_DECLARE(const char, PM_TWI1_INIT_ONBOARD_SIM808_GPS_01[]);
PROGMEM_DECLARE(const char, PM_TWI1_INIT_ONBOARD_SIM808_GPS_02[]);

/* USB device stack start function to enable stack and start USB */
void serial_start(void)
{
    3d14:	2f 92       	push	r2
    3d16:	3f 92       	push	r3
    3d18:	4f 92       	push	r4
    3d1a:	5f 92       	push	r5
    3d1c:	6f 92       	push	r6
    3d1e:	7f 92       	push	r7
    3d20:	8f 92       	push	r8
    3d22:	9f 92       	push	r9
    3d24:	af 92       	push	r10
    3d26:	bf 92       	push	r11
    3d28:	cf 92       	push	r12
    3d2a:	df 92       	push	r13
    3d2c:	ef 92       	push	r14
    3d2e:	ff 92       	push	r15
    3d30:	0f 93       	push	r16
    3d32:	1f 93       	push	r17
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	27 97       	sbiw	r28, 0x07	; 7
    3d3e:	cd bf       	out	0x3d, r28	; 61
    3d40:	de bf       	out	0x3e, r29	; 62
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    3d42:	e8 e7       	ldi	r30, 0x78	; 120
    3d44:	f8 e2       	ldi	r31, 0x28	; 40
    3d46:	84 81       	ldd	r24, Z+4	; 0x04
    3d48:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    3d4a:	85 81       	ldd	r24, Z+5	; 0x05
    3d4c:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    3d4e:	86 81       	ldd	r24, Z+6	; 0x06
    3d50:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    3d52:	80 81       	ld	r24, Z
    3d54:	91 81       	ldd	r25, Z+1	; 0x01
    3d56:	a2 81       	ldd	r26, Z+2	; 0x02
    3d58:	b3 81       	ldd	r27, Z+3	; 0x03
    3d5a:	89 83       	std	Y+1, r24	; 0x01
    3d5c:	9a 83       	std	Y+2, r25	; 0x02
    3d5e:	ab 83       	std	Y+3, r26	; 0x03
    3d60:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    3d62:	60 e1       	ldi	r22, 0x10	; 16
    3d64:	86 e0       	ldi	r24, 0x06	; 6
    3d66:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    3d6a:	be 01       	movw	r22, r28
    3d6c:	6f 5f       	subi	r22, 0xFF	; 255
    3d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d70:	80 ea       	ldi	r24, 0xA0	; 160
    3d72:	9b e0       	ldi	r25, 0x0B	; 11
    3d74:	73 dd       	rcall	.-1306   	; 0x385c <usart_init_rs232>

	/* Init and start of the ASF USART service/device */
	usart_serial_init(USART_SERIAL1, &g_usart1_options);

	/* ISR interrupt levels */
	((USART_t*)USART_SERIAL1)->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    3d76:	80 e1       	ldi	r24, 0x10	; 16
    3d78:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>

	/* Inform about to start the SIM808 - LCD */
	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_START);
    3d7c:	87 e7       	ldi	r24, 0x77	; 119
    3d7e:	94 e0       	ldi	r25, 0x04	; 4
    3d80:	9f 93       	push	r25
    3d82:	8f 93       	push	r24
    3d84:	1f 92       	push	r1
    3d86:	68 94       	set
    3d88:	ff 24       	eor	r15, r15
    3d8a:	f6 f8       	bld	r15, 6
    3d8c:	ff 92       	push	r15
    3d8e:	0b e1       	ldi	r16, 0x1B	; 27
    3d90:	15 e2       	ldi	r17, 0x25	; 37
    3d92:	1f 93       	push	r17
    3d94:	0f 93       	push	r16
    3d96:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3d9a:	a8 01       	movw	r20, r16
    3d9c:	66 e4       	ldi	r22, 0x46	; 70
    3d9e:	88 e0       	ldi	r24, 0x08	; 8
    3da0:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>

	/* Inform about to start the SIM808 - USB */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_START);
    3da4:	8b ed       	ldi	r24, 0xDB	; 219
    3da6:	94 e0       	ldi	r25, 0x04	; 4
    3da8:	9f 93       	push	r25
    3daa:	8f 93       	push	r24
    3dac:	1f 92       	push	r1
    3dae:	ff 92       	push	r15
    3db0:	1f 93       	push	r17
    3db2:	0f 93       	push	r16
    3db4:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, len, false);
    3db8:	40 e0       	ldi	r20, 0x00	; 0
    3dba:	68 2f       	mov	r22, r24
    3dbc:	c8 01       	movw	r24, r16
    3dbe:	f6 d1       	rcall	.+1004   	; 0x41ac <udi_write_tx_buf>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3dc0:	80 e2       	ldi	r24, 0x20	; 32
    3dc2:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	/* Release the GSM_RESETn */
	ioport_set_pin_level(GSM_RESET_DRV_GPIO, HIGH);
	delay_ms(500);
    3dc6:	61 ea       	ldi	r22, 0xA1	; 161
    3dc8:	75 e2       	ldi	r23, 0x25	; 37
    3dca:	86 e2       	ldi	r24, 0x26	; 38
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	74 de       	rcall	.-792    	; 0x3ab8 <__portable_avr_delay_cycles>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3dd0:	00 ea       	ldi	r16, 0xA0	; 160
    3dd2:	16 e0       	ldi	r17, 0x06	; 6
    3dd4:	82 e0       	ldi	r24, 0x02	; 2
    3dd6:	f8 01       	movw	r30, r16
    3dd8:	86 83       	std	Z+6, r24	; 0x06

	/* Data Terminal Ready is true */
	ioport_set_pin_level(GSM_DTR1_DRV, LOW);	// Activate SIM808 (non SLEEP mode)
	delay_ms(100);
    3dda:	61 e2       	ldi	r22, 0x21	; 33
    3ddc:	71 ea       	ldi	r23, 0xA1	; 161
    3dde:	87 e0       	ldi	r24, 0x07	; 7
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	6a de       	rcall	.-812    	; 0x3ab8 <__portable_avr_delay_cycles>
    3de4:	80 e8       	ldi	r24, 0x80	; 128
    3de6:	f8 01       	movw	r30, r16
	ioport_set_pin_level(GSM_RTS1_DRV, LOW);	// Serial line ready
	delay_ms(1);
    3de8:	86 83       	std	Z+6, r24	; 0x06
    3dea:	68 e8       	ldi	r22, 0x88	; 136
    3dec:	73 e1       	ldi	r23, 0x13	; 19
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	62 de       	rcall	.-828    	; 0x3ab8 <__portable_avr_delay_cycles>
    3df4:	cd bf       	out	0x3d, r28	; 61
	/* ISR interrupt levels */
	((USART_t*)USART_SERIAL1)->CTRLA = USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;

	/* Inform about to start the SIM808 - LCD */
	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_START);
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3df6:	de bf       	out	0x3e, r29	; 62
    3df8:	68 94       	set
    3dfa:	bb 24       	eor	r11, r11
				g_usart1_rx_ready = false;
				cpu_irq_restore(flags);
			}

			/* Leave loop when SIM808 responds */
			if (g_prepare_buf[0] && strstr_P(g_prepare_buf, PM_SIM808_OK))
    3dfc:	b3 f8       	bld	r11, 3
    3dfe:	0f 2e       	mov	r0, r31
    3e00:	fb e1       	ldi	r31, 0x1B	; 27
    3e02:	ef 2e       	mov	r14, r31
    3e04:	f5 e2       	ldi	r31, 0x25	; 37
    3e06:	ff 2e       	mov	r15, r31
    3e08:	f0 2d       	mov	r31, r0
    3e0a:	9e 2c       	mov	r9, r14
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3e0c:	af 2c       	mov	r10, r15
    3e0e:	0f 2e       	mov	r0, r31
    3e10:	f0 ea       	ldi	r31, 0xA0	; 160
    3e12:	cf 2e       	mov	r12, r31
    3e14:	f6 e0       	ldi	r31, 0x06	; 6
    3e16:	df 2e       	mov	r13, r31
    3e18:	f0 2d       	mov	r31, r0
    3e1a:	68 94       	set
    3e1c:	88 24       	eor	r8, r8
    3e1e:	87 f8       	bld	r8, 7
    3e20:	68 94       	set
    3e22:	77 24       	eor	r7, r7
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3e24:	71 f8       	bld	r7, 1
    3e26:	68 94       	set
    3e28:	66 24       	eor	r6, r6
				/* Inform about restart - LCD */
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
    3e2a:	65 f8       	bld	r6, 5
    3e2c:	0f 2e       	mov	r0, r31
    3e2e:	fb e5       	ldi	r31, 0x5B	; 91
    3e30:	4f 2e       	mov	r4, r31
    3e32:	f4 e0       	ldi	r31, 0x04	; 4
    3e34:	5f 2e       	mov	r5, r31
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);

				/* Inform about restart - USB */
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_RESTART);
    3e36:	f0 2d       	mov	r31, r0
    3e38:	0f 2e       	mov	r0, r31
    3e3a:	f3 eb       	ldi	r31, 0xB3	; 179
    3e3c:	2f 2e       	mov	r2, r31
    3e3e:	f4 e0       	ldi	r31, 0x04	; 4
    3e40:	3f 2e       	mov	r3, r31
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3e42:	f0 2d       	mov	r31, r0
    3e44:	0c e0       	ldi	r16, 0x0C	; 12
	ioport_set_pin_level(GSM_RTS1_DRV, LOW);	// Serial line ready
	delay_ms(1);

	/* Synchronize with SIM808 */
	while (true) {
		usart_serial_write_packet(USART_SERIAL1, (const uint8_t*)"AT\r", 3);
    3e46:	10 e0       	ldi	r17, 0x00	; 0
    3e48:	43 e0       	ldi	r20, 0x03	; 3
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	60 e1       	ldi	r22, 0x10	; 16
    3e4e:	71 e2       	ldi	r23, 0x21	; 33
    3e50:	80 ea       	ldi	r24, 0xA0	; 160
		delay_ms(100);
    3e52:	9b e0       	ldi	r25, 0x0B	; 11
    3e54:	c8 db       	rcall	.-2160   	; 0x35e6 <usart_serial_write_packet>
    3e56:	61 e2       	ldi	r22, 0x21	; 33
    3e58:	71 ea       	ldi	r23, 0xA1	; 161
    3e5a:	87 e0       	ldi	r24, 0x07	; 7
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
		if (g_usart1_rx_ready) {
    3e5e:	2c de       	rcall	.-936    	; 0x3ab8 <__portable_avr_delay_cycles>
    3e60:	80 91 77 28 	lds	r24, 0x2877	; 0x802877 <g_usart1_rx_ready>
    3e64:	88 23       	and	r24, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3e66:	81 f3       	breq	.-32     	; 0x3e48 <serial_start+0x134>
    3e68:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    3e6a:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    3e6c:	f8 94       	cli
			{
				irqflags_t flags = cpu_irq_save();
				for (int16_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3e6e:	39 81       	ldd	r19, Y+1	; 0x01
    3e70:	e0 91 75 28 	lds	r30, 0x2875	; 0x802875 <g_usart1_rx_idx>
    3e74:	f0 91 76 28 	lds	r31, 0x2876	; 0x802876 <g_usart1_rx_idx+0x1>
    3e78:	cf 01       	movw	r24, r30
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	4a f0       	brmi	.+18     	; 0x3e90 <serial_start+0x17c>
    3e7e:	df 01       	movw	r26, r30
    3e80:	ab 58       	subi	r26, 0x8B	; 139
    3e82:	b8 4d       	sbci	r27, 0xD8	; 216
    3e84:	e5 5e       	subi	r30, 0xE5	; 229
					g_prepare_buf[idx] = g_usart1_rx_buf[idx];
    3e86:	fa 4d       	sbci	r31, 0xDA	; 218
    3e88:	2e 91       	ld	r18, -X
		usart_serial_write_packet(USART_SERIAL1, (const uint8_t*)"AT\r", 3);
		delay_ms(100);
		if (g_usart1_rx_ready) {
			{
				irqflags_t flags = cpu_irq_save();
				for (int16_t idx = g_usart1_rx_idx - 1; idx >= 0; --idx) {
    3e8a:	22 93       	st	-Z, r18
    3e8c:	01 97       	sbiw	r24, 0x01	; 1
					g_prepare_buf[idx] = g_usart1_rx_buf[idx];
				}
				g_usart1_rx_idx = 0;
    3e8e:	e2 f7       	brpl	.-8      	; 0x3e88 <serial_start+0x174>
    3e90:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <g_usart1_rx_idx>
    3e94:	10 92 76 28 	sts	0x2876, r1	; 0x802876 <g_usart1_rx_idx+0x1>
				g_usart1_rx_ready = false;
    3e98:	10 92 77 28 	sts	0x2877, r1	; 0x802877 <g_usart1_rx_ready>
				cpu_irq_restore(flags);
			}

			/* Leave loop when SIM808 responds */
			if (g_prepare_buf[0] && strstr_P(g_prepare_buf, PM_SIM808_OK))
    3e9c:	3f bf       	out	0x3f, r19	; 63
    3e9e:	f7 01       	movw	r30, r14
    3ea0:	80 81       	ld	r24, Z
    3ea2:	88 23       	and	r24, r24
    3ea4:	49 f0       	breq	.+18     	; 0x3eb8 <serial_start+0x1a4>
    3ea6:	63 e0       	ldi	r22, 0x03	; 3
    3ea8:	75 e0       	ldi	r23, 0x05	; 5
    3eaa:	89 2d       	mov	r24, r9
    3eac:	9a 2d       	mov	r25, r10
    3eae:	0e 94 a1 8a 	call	0x11542	; 0x11542 <strstr_P>
    3eb2:	89 2b       	or	r24, r25
    3eb4:	09 f0       	breq	.+2      	; 0x3eb8 <serial_start+0x1a4>
    3eb6:	52 c0       	rjmp	.+164    	; 0x3f5c <serial_start+0x248>
    3eb8:	01 50       	subi	r16, 0x01	; 1
				break;

			if (loop_ctr++ > 10) {
    3eba:	11 09       	sbc	r17, r1
    3ebc:	09 f0       	breq	.+2      	; 0x3ec0 <serial_start+0x1ac>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3ebe:	c4 cf       	rjmp	.-120    	; 0x3e48 <serial_start+0x134>
    3ec0:	f6 01       	movw	r30, r12
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3ec2:	85 82       	std	Z+5, r8	; 0x05
    3ec4:	75 82       	std	Z+5, r7	; 0x05

				/* Turn off SIM808 */
				ioport_set_pin_level(GSM_RTS1_DRV,			HIGH);	// Serial line NOT ready
				ioport_set_pin_level(GSM_DTR1_DRV,			HIGH);	// DTR inactive
				ioport_set_pin_level(GSM_RESET_DRV_GPIO,	LOW);	// RESETn active
				delay_ms(150);
    3ec6:	60 92 86 06 	sts	0x0686, r6	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    3eca:	61 eb       	ldi	r22, 0xB1	; 177
    3ecc:	71 e7       	ldi	r23, 0x71	; 113
    3ece:	8b e0       	ldi	r24, 0x0B	; 11
    3ed0:	90 e0       	ldi	r25, 0x00	; 0

				/* Inform about restart - LCD */
				if (line > 12) {
    3ed2:	f2 dd       	rcall	.-1052   	; 0x3ab8 <__portable_avr_delay_cycles>
    3ed4:	fc e0       	ldi	r31, 0x0C	; 12
    3ed6:	fb 15       	cp	r31, r11
					task_twi2_lcd_header();
    3ed8:	30 f4       	brcc	.+12     	; 0x3ee6 <serial_start+0x1d2>
    3eda:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <task_twi2_lcd_header>
					line = 3;
    3ede:	0f 2e       	mov	r0, r31
    3ee0:	f3 e0       	ldi	r31, 0x03	; 3
    3ee2:	bf 2e       	mov	r11, r31
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
    3ee4:	f0 2d       	mov	r31, r0
    3ee6:	5f 92       	push	r5
    3ee8:	4f 92       	push	r4
    3eea:	1f 92       	push	r1
    3eec:	20 e4       	ldi	r18, 0x40	; 64
    3eee:	2f 93       	push	r18
    3ef0:	ff 92       	push	r15
    3ef2:	ef 92       	push	r14
    3ef4:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3ef8:	11 e0       	ldi	r17, 0x01	; 1
    3efa:	1b 0d       	add	r17, r11
    3efc:	6b 2d       	mov	r22, r11
    3efe:	66 0f       	add	r22, r22
    3f00:	86 2f       	mov	r24, r22
    3f02:	88 0f       	add	r24, r24
    3f04:	88 0f       	add	r24, r24
    3f06:	68 0f       	add	r22, r24
    3f08:	a7 01       	movw	r20, r14
    3f0a:	88 e0       	ldi	r24, 0x08	; 8
    3f0c:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>

				/* Inform about restart - USB */
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_RESTART);
    3f10:	3f 92       	push	r3
    3f12:	2f 92       	push	r2
    3f14:	1f 92       	push	r1
    3f16:	30 e4       	ldi	r19, 0x40	; 64
    3f18:	3f 93       	push	r19
    3f1a:	ff 92       	push	r15
    3f1c:	ef 92       	push	r14
				udi_write_tx_buf(g_prepare_buf, len, false);
    3f1e:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    3f22:	40 e0       	ldi	r20, 0x00	; 0
    3f24:	68 2f       	mov	r22, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3f26:	c7 01       	movw	r24, r14
    3f28:	41 d1       	rcall	.+642    	; 0x41ac <udi_write_tx_buf>

				/* Restart SIM808 */
				ioport_set_pin_level(GSM_RESET_DRV_GPIO,	HIGH);	// Release the RESETn line
				delay_ms(500);
    3f2a:	60 92 85 06 	sts	0x0685, r6	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    3f2e:	61 ea       	ldi	r22, 0xA1	; 161
    3f30:	75 e2       	ldi	r23, 0x25	; 37
    3f32:	86 e2       	ldi	r24, 0x26	; 38
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	c0 dd       	rcall	.-1152   	; 0x3ab8 <__portable_avr_delay_cycles>
				ioport_set_pin_level(GSM_DTR1_DRV,			LOW);	// DTR active
				delay_ms(100);
    3f38:	f6 01       	movw	r30, r12
    3f3a:	76 82       	std	Z+6, r7	; 0x06
    3f3c:	61 e2       	ldi	r22, 0x21	; 33
    3f3e:	71 ea       	ldi	r23, 0xA1	; 161
    3f40:	87 e0       	ldi	r24, 0x07	; 7
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	b9 dd       	rcall	.-1166   	; 0x3ab8 <__portable_avr_delay_cycles>
				ioport_set_pin_level(GSM_RTS1_DRV,			LOW);	// Serial line ready
				delay_ms(1);
    3f46:	f6 01       	movw	r30, r12
    3f48:	86 82       	std	Z+6, r8	; 0x06
    3f4a:	68 e8       	ldi	r22, 0x88	; 136
    3f4c:	73 e1       	ldi	r23, 0x13	; 19
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	b2 dd       	rcall	.-1180   	; 0x3ab8 <__portable_avr_delay_cycles>
    3f54:	cd bf       	out	0x3d, r28	; 61
				if (line > 12) {
					task_twi2_lcd_header();
					line = 3;
				}
				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_RESTART);
				task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    3f56:	de bf       	out	0x3e, r29	; 62
    3f58:	b1 2e       	mov	r11, r17
			}
		}
	}

	/* Set the auto baud rate to fix rate */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_IPR, USART_SERIAL1_BAUDRATE);
    3f5a:	74 cf       	rjmp	.-280    	; 0x3e44 <serial_start+0x130>
    3f5c:	1f 92       	push	r1
    3f5e:	1f 92       	push	r1
    3f60:	86 e9       	ldi	r24, 0x96	; 150
    3f62:	8f 93       	push	r24
    3f64:	1f 92       	push	r1
    3f66:	89 e3       	ldi	r24, 0x39	; 57
    3f68:	94 e0       	ldi	r25, 0x04	; 4
    3f6a:	9f 93       	push	r25
    3f6c:	8f 93       	push	r24
    3f6e:	1f 92       	push	r1
    3f70:	68 94       	set
    3f72:	ff 24       	eor	r15, r15
    3f74:	f6 f8       	bld	r15, 6
    3f76:	ff 92       	push	r15
    3f78:	0b e1       	ldi	r16, 0x1B	; 27
    3f7a:	15 e2       	ldi	r17, 0x25	; 37
    3f7c:	1f 93       	push	r17
    3f7e:	0f 93       	push	r16
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3f80:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    3f84:	ac 01       	movw	r20, r24
    3f86:	b8 01       	movw	r22, r16
    3f88:	80 ea       	ldi	r24, 0xA0	; 160
    3f8a:	9b e0       	ldi	r25, 0x0B	; 11
	yield_ms(500);
    3f8c:	2c db       	rcall	.-2472   	; 0x35e6 <usart_serial_write_packet>
    3f8e:	84 ef       	ldi	r24, 0xF4	; 244
    3f90:	91 e0       	ldi	r25, 0x01	; 1
    3f92:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>

#if 1
	/* Request the version number of the firmware */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_INFO_01);
    3f96:	8b e1       	ldi	r24, 0x1B	; 27
    3f98:	94 e0       	ldi	r25, 0x04	; 4
    3f9a:	9f 93       	push	r25
    3f9c:	8f 93       	push	r24
    3f9e:	1f 92       	push	r1
    3fa0:	ff 92       	push	r15
    3fa2:	1f 93       	push	r17
    3fa4:	0f 93       	push	r16
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3fa6:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    3faa:	ac 01       	movw	r20, r24
    3fac:	b8 01       	movw	r22, r16
    3fae:	80 ea       	ldi	r24, 0xA0	; 160
    3fb0:	9b e0       	ldi	r25, 0x0B	; 11
	yield_ms(500);
    3fb2:	19 db       	rcall	.-2510   	; 0x35e6 <usart_serial_write_packet>
    3fb4:	84 ef       	ldi	r24, 0xF4	; 244
    3fb6:	91 e0       	ldi	r25, 0x01	; 1
#endif

#if 1
	/* Request more details about the firmware */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_INFO_02);
    3fb8:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    3fbc:	82 e1       	ldi	r24, 0x12	; 18
    3fbe:	94 e0       	ldi	r25, 0x04	; 4
    3fc0:	9f 93       	push	r25
    3fc2:	8f 93       	push	r24
    3fc4:	1f 92       	push	r1
    3fc6:	ff 92       	push	r15
    3fc8:	1f 93       	push	r17
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3fca:	0f 93       	push	r16
    3fcc:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    3fd0:	ac 01       	movw	r20, r24
    3fd2:	b8 01       	movw	r22, r16
    3fd4:	80 ea       	ldi	r24, 0xA0	; 160
	yield_ms(500);
    3fd6:	9b e0       	ldi	r25, 0x0B	; 11
    3fd8:	06 db       	rcall	.-2548   	; 0x35e6 <usart_serial_write_packet>
    3fda:	84 ef       	ldi	r24, 0xF4	; 244
#endif


#if 1
	/* Turn on error descriptions */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_CMEE2);
    3fdc:	91 e0       	ldi	r25, 0x01	; 1
    3fde:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    3fe2:	8d e2       	ldi	r24, 0x2D	; 45
    3fe4:	94 e0       	ldi	r25, 0x04	; 4
    3fe6:	9f 93       	push	r25
    3fe8:	8f 93       	push	r24
    3fea:	1f 92       	push	r1
    3fec:	ff 92       	push	r15
    3fee:	1f 93       	push	r17
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    3ff0:	0f 93       	push	r16
    3ff2:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    3ff6:	ac 01       	movw	r20, r24
    3ff8:	b8 01       	movw	r22, r16
    3ffa:	80 ea       	ldi	r24, 0xA0	; 160
	yield_ms(500);
    3ffc:	9b e0       	ldi	r25, 0x0B	; 11
    3ffe:	f3 da       	rcall	.-2586   	; 0x35e6 <usart_serial_write_packet>
    4000:	84 ef       	ldi	r24, 0xF4	; 244
#endif

#if 1
	/* Activation of all functionalities */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_CFUN1);
    4002:	91 e0       	ldi	r25, 0x01	; 1
    4004:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    4008:	81 e2       	ldi	r24, 0x21	; 33
    400a:	94 e0       	ldi	r25, 0x04	; 4
    400c:	9f 93       	push	r25
    400e:	8f 93       	push	r24
    4010:	1f 92       	push	r1
    4012:	ff 92       	push	r15
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    4014:	1f 93       	push	r17
    4016:	0f 93       	push	r16
    4018:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    401c:	cd bf       	out	0x3d, r28	; 61
    401e:	de bf       	out	0x3e, r29	; 62
    4020:	ac 01       	movw	r20, r24
    4022:	b8 01       	movw	r22, r16
	yield_ms(500);
    4024:	80 ea       	ldi	r24, 0xA0	; 160
    4026:	9b e0       	ldi	r25, 0x0B	; 11
    4028:	de da       	rcall	.-2628   	; 0x35e6 <usart_serial_write_packet>
    402a:	84 ef       	ldi	r24, 0xF4	; 244
#endif

#if 1
	/* Enable GNSS (GPS, Glonass, ...) and send a position fix request */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_GPS_01, 1);
    402c:	91 e0       	ldi	r25, 0x01	; 1
    402e:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    4032:	1f 92       	push	r1
    4034:	ee 24       	eor	r14, r14
    4036:	e3 94       	inc	r14
    4038:	ef 92       	push	r14
    403a:	82 e0       	ldi	r24, 0x02	; 2
    403c:	94 e0       	ldi	r25, 0x04	; 4
    403e:	9f 93       	push	r25
    4040:	8f 93       	push	r24
    4042:	1f 92       	push	r1
    4044:	ff 92       	push	r15
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    4046:	1f 93       	push	r17
    4048:	0f 93       	push	r16
    404a:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    404e:	ac 01       	movw	r20, r24
    4050:	b8 01       	movw	r22, r16
	yield_ms(500);
    4052:	80 ea       	ldi	r24, 0xA0	; 160
    4054:	9b e0       	ldi	r25, 0x0B	; 11
    4056:	c7 da       	rcall	.-2674   	; 0x35e6 <usart_serial_write_packet>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_GPS_02, 1);
    4058:	84 ef       	ldi	r24, 0xF4	; 244
    405a:	91 e0       	ldi	r25, 0x01	; 1
    405c:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    4060:	1f 92       	push	r1
    4062:	ef 92       	push	r14
    4064:	85 ef       	ldi	r24, 0xF5	; 245
    4066:	93 e0       	ldi	r25, 0x03	; 3
    4068:	9f 93       	push	r25
    406a:	8f 93       	push	r24
    406c:	1f 92       	push	r1
    406e:	ff 92       	push	r15
	usart_serial_write_packet(USART_SERIAL1, (const uint8_t*) g_prepare_buf, len);
    4070:	1f 93       	push	r17
    4072:	0f 93       	push	r16
    4074:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    4078:	ac 01       	movw	r20, r24
    407a:	b8 01       	movw	r22, r16
	yield_ms(500);
    407c:	80 ea       	ldi	r24, 0xA0	; 160
    407e:	9b e0       	ldi	r25, 0x0B	; 11
    4080:	b2 da       	rcall	.-2716   	; 0x35e6 <usart_serial_write_packet>
    4082:	84 ef       	ldi	r24, 0xF4	; 244
#endif


	/* Inform about baud rate match - LCD */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_TWI1_INIT_ONBOARD_SIM808_OK);
    4084:	91 e0       	ldi	r25, 0x01	; 1
    4086:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    408a:	86 e4       	ldi	r24, 0x46	; 70
    408c:	94 e0       	ldi	r25, 0x04	; 4
    408e:	9f 93       	push	r25
    4090:	8f 93       	push	r24
    4092:	1f 92       	push	r1
    4094:	ff 92       	push	r15
    4096:	1f 93       	push	r17
	task_twi2_lcd_str(8, (line++) * 10, g_prepare_buf);
    4098:	0f 93       	push	r16
    409a:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    409e:	bb 0c       	add	r11, r11
    40a0:	6b 2d       	mov	r22, r11
    40a2:	66 0f       	add	r22, r22
    40a4:	66 0f       	add	r22, r22
    40a6:	6b 0d       	add	r22, r11

	/* Inform about baud rate match - USB */
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_SIM808_INFO_SYNCED);
    40a8:	a8 01       	movw	r20, r16
    40aa:	88 e0       	ldi	r24, 0x08	; 8
    40ac:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    40b0:	81 e9       	ldi	r24, 0x91	; 145
    40b2:	94 e0       	ldi	r25, 0x04	; 4
    40b4:	9f 93       	push	r25
    40b6:	8f 93       	push	r24
    40b8:	1f 92       	push	r1
    40ba:	ff 92       	push	r15
	udi_write_tx_buf(g_prepare_buf, len, false);
    40bc:	1f 93       	push	r17
    40be:	0f 93       	push	r16
    40c0:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    40c4:	40 e0       	ldi	r20, 0x00	; 0
}
    40c6:	68 2f       	mov	r22, r24
    40c8:	c8 01       	movw	r24, r16
    40ca:	70 d0       	rcall	.+224    	; 0x41ac <udi_write_tx_buf>
    40cc:	cd bf       	out	0x3d, r28	; 61
    40ce:	de bf       	out	0x3e, r29	; 62
    40d0:	27 96       	adiw	r28, 0x07	; 7
    40d2:	cd bf       	out	0x3d, r28	; 61
    40d4:	de bf       	out	0x3e, r29	; 62
    40d6:	df 91       	pop	r29
    40d8:	cf 91       	pop	r28
    40da:	1f 91       	pop	r17
    40dc:	0f 91       	pop	r16
    40de:	ff 90       	pop	r15
    40e0:	ef 90       	pop	r14
    40e2:	df 90       	pop	r13
    40e4:	cf 90       	pop	r12
    40e6:	bf 90       	pop	r11
    40e8:	af 90       	pop	r10
    40ea:	9f 90       	pop	r9
    40ec:	8f 90       	pop	r8
    40ee:	7f 90       	pop	r7
    40f0:	6f 90       	pop	r6
    40f2:	5f 90       	pop	r5
    40f4:	4f 90       	pop	r4
    40f6:	3f 90       	pop	r3
    40f8:	2f 90       	pop	r2
    40fa:	08 95       	ret

000040fc <task_serial>:


void task_serial(uint32_t now)
{
    40fc:	1f 93       	push	r17
    40fe:	cf 93       	push	r28
    4100:	df 93       	push	r29
    4102:	1f 92       	push	r1
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
	uint16_t len = 0;
	uint16_t move = 0;

	/* Leave when nothing to do */
	if (!g_usart1_rx_ready) {
    4108:	80 91 77 28 	lds	r24, 0x2877	; 0x802877 <g_usart1_rx_ready>
    410c:	88 23       	and	r24, r24
    410e:	09 f4       	brne	.+2      	; 0x4112 <task_serial+0x16>
    4110:	48 c0       	rjmp	.+144    	; 0x41a2 <task_serial+0xa6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4112:	8f b7       	in	r24, 0x3f	; 63
    4114:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4116:	f8 94       	cli
	return flags;
    4118:	19 81       	ldd	r17, Y+1	; 0x01
	}

	/* Take out own copy and reset */
	{
		irqflags_t flags = cpu_irq_save();
		if (g_usart1_rx_idx) {
    411a:	60 91 75 28 	lds	r22, 0x2875	; 0x802875 <g_usart1_rx_idx>
    411e:	70 91 76 28 	lds	r23, 0x2876	; 0x802876 <g_usart1_rx_idx+0x1>
    4122:	61 15       	cp	r22, r1
    4124:	71 05       	cpc	r23, r1
    4126:	a9 f1       	breq	.+106    	; 0x4192 <task_serial+0x96>
			/* Do a chunk each time */
			len = g_usart1_rx_idx;
			if (len > C_USART1_RX_BUF_CHUNK) {
    4128:	61 34       	cpi	r22, 0x41	; 65
    412a:	71 05       	cpc	r23, r1
    412c:	40 f0       	brcs	.+16     	; 0x413e <task_serial+0x42>
				move = len - C_USART1_RX_BUF_CHUNK;
    412e:	ab 01       	movw	r20, r22
    4130:	40 54       	subi	r20, 0x40	; 64
    4132:	51 09       	sbc	r21, r1
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    4134:	8f e3       	ldi	r24, 0x3F	; 63
    4136:	90 e0       	ldi	r25, 0x00	; 0
		if (g_usart1_rx_idx) {
			/* Do a chunk each time */
			len = g_usart1_rx_idx;
			if (len > C_USART1_RX_BUF_CHUNK) {
				move = len - C_USART1_RX_BUF_CHUNK;
				len = C_USART1_RX_BUF_CHUNK;
    4138:	60 e4       	ldi	r22, 0x40	; 64
    413a:	70 e0       	ldi	r23, 0x00	; 0
    413c:	05 c0       	rjmp	.+10     	; 0x4148 <task_serial+0x4c>
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    413e:	cb 01       	movw	r24, r22
    4140:	01 97       	sbiw	r24, 0x01	; 1
    4142:	0a f1       	brmi	.+66     	; 0x4186 <task_serial+0x8a>


void task_serial(uint32_t now)
{
	uint16_t len = 0;
	uint16_t move = 0;
    4144:	40 e0       	ldi	r20, 0x00	; 0
    4146:	50 e0       	ldi	r21, 0x00	; 0
    4148:	fc 01       	movw	r30, r24
    414a:	31 96       	adiw	r30, 0x01	; 1
    414c:	df 01       	movw	r26, r30
    414e:	ab 58       	subi	r26, 0x8B	; 139
    4150:	b8 4d       	sbci	r27, 0xD8	; 216
    4152:	e5 5e       	subi	r30, 0xE5	; 229
    4154:	fa 4d       	sbci	r31, 0xDA	; 218
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
    4156:	2e 91       	ld	r18, -X
    4158:	22 93       	st	-Z, r18
				move = len - C_USART1_RX_BUF_CHUNK;
				len = C_USART1_RX_BUF_CHUNK;
			}

			/* Make a copy of the chunk */
			for (int16_t idx = len - 1; idx >= 0; --idx) {
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	e2 f7       	brpl	.-8      	; 0x4156 <task_serial+0x5a>
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
			}

			/* If more data is available move that part down */
			if (move) {
    415e:	41 15       	cp	r20, r1
    4160:	51 05       	cpc	r21, r1
    4162:	89 f0       	breq	.+34     	; 0x4186 <task_serial+0x8a>
    4164:	e5 eb       	ldi	r30, 0xB5	; 181
    4166:	f7 e2       	ldi	r31, 0x27	; 39
    4168:	a5 e7       	ldi	r26, 0x75	; 117
    416a:	b7 e2       	ldi	r27, 0x27	; 39
    416c:	9a 01       	movw	r18, r20
    416e:	2b 54       	subi	r18, 0x4B	; 75
    4170:	38 4d       	sbci	r19, 0xD8	; 216
				for (int16_t mov_idx = 0; mov_idx < move; ++mov_idx) {
					g_usart1_rx_buf[mov_idx] = g_usart1_rx_buf[mov_idx + C_USART1_RX_BUF_CHUNK];
    4172:	81 91       	ld	r24, Z+
    4174:	8d 93       	st	X+, r24
				g_prepare_buf[idx] = g_usart1_rx_buf[idx];
			}

			/* If more data is available move that part down */
			if (move) {
				for (int16_t mov_idx = 0; mov_idx < move; ++mov_idx) {
    4176:	2e 17       	cp	r18, r30
    4178:	3f 07       	cpc	r19, r31
    417a:	d9 f7       	brne	.-10     	; 0x4172 <task_serial+0x76>
					g_usart1_rx_buf[mov_idx] = g_usart1_rx_buf[mov_idx + C_USART1_RX_BUF_CHUNK];
				}
				g_usart1_rx_idx = move;
    417c:	40 93 75 28 	sts	0x2875, r20	; 0x802875 <g_usart1_rx_idx>
    4180:	50 93 76 28 	sts	0x2876, r21	; 0x802876 <g_usart1_rx_idx+0x1>
    4184:	06 c0       	rjmp	.+12     	; 0x4192 <task_serial+0x96>

			} else {
				/* Buffer empty */
				g_usart1_rx_idx = 0;
    4186:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <g_usart1_rx_idx>
    418a:	10 92 76 28 	sts	0x2876, r1	; 0x802876 <g_usart1_rx_idx+0x1>
				g_usart1_rx_ready = false;
    418e:	10 92 77 28 	sts	0x2877, r1	; 0x802877 <g_usart1_rx_ready>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4192:	1f bf       	out	0x3f, r17	; 63
		}
		cpu_irq_restore(flags);
	}

	/* Copy chunk of data to USB_CDC */
	if (len) {
    4194:	61 15       	cp	r22, r1
    4196:	71 05       	cpc	r23, r1
    4198:	21 f0       	breq	.+8      	; 0x41a2 <task_serial+0xa6>
		udi_write_tx_buf(g_prepare_buf, (uint8_t)len, false);
    419a:	40 e0       	ldi	r20, 0x00	; 0
    419c:	8b e1       	ldi	r24, 0x1B	; 27
    419e:	95 e2       	ldi	r25, 0x25	; 37
    41a0:	05 d0       	rcall	.+10     	; 0x41ac <udi_write_tx_buf>
	}
}
    41a2:	0f 90       	pop	r0
    41a4:	df 91       	pop	r29
    41a6:	cf 91       	pop	r28
    41a8:	1f 91       	pop	r17
    41aa:	08 95       	ret

000041ac <udi_write_tx_buf>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    41ac:	ef 92       	push	r14
    41ae:	ff 92       	push	r15
    41b0:	0f 93       	push	r16
    41b2:	1f 93       	push	r17
    41b4:	cf 93       	push	r28
    41b6:	df 93       	push	r29
    41b8:	20 91 81 28 	lds	r18, 0x2881	; 0x802881 <g_usb_cdc_transfers_authorized>
    41bc:	21 11       	cpse	r18, r1
    41be:	3a c0       	rjmp	.+116    	; 0x4234 <udi_write_tx_buf+0x88>
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	3f c0       	rjmp	.+126    	; 0x4242 <udi_write_tx_buf+0x96>
    41c4:	04 2f       	mov	r16, r20
    41c6:	16 2f       	mov	r17, r22
    41c8:	7c 01       	movw	r14, r24
    41ca:	d0 e0       	ldi	r29, 0x00	; 0
    41cc:	c0 e0       	ldi	r28, 0x00	; 0
    41ce:	0e 94 7f 78 	call	0xf0fe	; 0xf0fe <udi_cdc_is_tx_ready>
    41d2:	81 11       	cpse	r24, r1
    41d4:	06 c0       	rjmp	.+12     	; 0x41e2 <udi_write_tx_buf+0x36>
    41d6:	df 5f       	subi	r29, 0xFF	; 255
    41d8:	89 e1       	ldi	r24, 0x19	; 25
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    41e0:	23 c0       	rjmp	.+70     	; 0x4228 <udi_write_tx_buf+0x7c>
    41e2:	f7 01       	movw	r30, r14
    41e4:	ec 0f       	add	r30, r28
    41e6:	f1 1d       	adc	r31, r1
    41e8:	80 81       	ld	r24, Z
    41ea:	00 23       	and	r16, r16
    41ec:	49 f0       	breq	.+18     	; 0x4200 <udi_write_tx_buf+0x54>
    41ee:	28 2f       	mov	r18, r24
    41f0:	08 2e       	mov	r0, r24
    41f2:	00 0c       	add	r0, r0
    41f4:	33 0b       	sbc	r19, r19
    41f6:	20 52       	subi	r18, 0x20	; 32
    41f8:	31 09       	sbc	r19, r1
    41fa:	20 36       	cpi	r18, 0x60	; 96
    41fc:	31 05       	cpc	r19, r1
    41fe:	88 f4       	brcc	.+34     	; 0x4222 <udi_write_tx_buf+0x76>
    4200:	90 91 80 28 	lds	r25, 0x2880	; 0x802880 <g_usb_cdc_access_blocked>
    4204:	91 11       	cpse	r25, r1
    4206:	0d c0       	rjmp	.+26     	; 0x4222 <udi_write_tx_buf+0x76>
    4208:	08 2e       	mov	r0, r24
    420a:	00 0c       	add	r0, r0
    420c:	99 0b       	sbc	r25, r25
    420e:	0e 94 d6 78 	call	0xf1ac	; 0xf1ac <udi_cdc_putc>
    4212:	89 2b       	or	r24, r25
    4214:	31 f4       	brne	.+12     	; 0x4222 <udi_write_tx_buf+0x76>
    4216:	df 5f       	subi	r29, 0xFF	; 255
    4218:	89 e1       	ldi	r24, 0x19	; 25
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    4220:	03 c0       	rjmp	.+6      	; 0x4228 <udi_write_tx_buf+0x7c>
    4222:	cf 5f       	subi	r28, 0xFF	; 255
    4224:	d0 e0       	ldi	r29, 0x00	; 0
    4226:	0a c0       	rjmp	.+20     	; 0x423c <udi_write_tx_buf+0x90>
    4228:	d9 3c       	cpi	r29, 0xC9	; 201
    422a:	40 f0       	brcs	.+16     	; 0x423c <udi_write_tx_buf+0x90>
    422c:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <g_usb_cdc_transfers_authorized>
    4230:	8c 2f       	mov	r24, r28
    4232:	07 c0       	rjmp	.+14     	; 0x4242 <udi_write_tx_buf+0x96>
    4234:	61 11       	cpse	r22, r1
    4236:	c6 cf       	rjmp	.-116    	; 0x41c4 <udi_write_tx_buf+0x18>
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	03 c0       	rjmp	.+6      	; 0x4242 <udi_write_tx_buf+0x96>
    423c:	c1 17       	cp	r28, r17
    423e:	38 f2       	brcs	.-114    	; 0x41ce <udi_write_tx_buf+0x22>
    4240:	8c 2f       	mov	r24, r28
    4242:	df 91       	pop	r29
    4244:	cf 91       	pop	r28
    4246:	1f 91       	pop	r17
    4248:	0f 91       	pop	r16
    424a:	ff 90       	pop	r15
    424c:	ef 90       	pop	r14
    424e:	08 95       	ret

00004250 <usb_init>:
    4250:	0e 94 1f 7d 	call	0xfa3e	; 0xfa3e <stdio_usb_init>
    4254:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <g_usb_cdc_stdout_enabled>
    4258:	81 11       	cpse	r24, r1
    425a:	0e 94 18 7d 	call	0xfa30	; 0xfa30 <stdio_usb_enable>
    425e:	88 ee       	ldi	r24, 0xE8	; 232
    4260:	93 e0       	ldi	r25, 0x03	; 3
    4262:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    4266:	8a e4       	ldi	r24, 0x4A	; 74
    4268:	97 e0       	ldi	r25, 0x07	; 7
    426a:	9f 93       	push	r25
    426c:	8f 93       	push	r24
    426e:	1f 92       	push	r1
    4270:	80 e4       	ldi	r24, 0x40	; 64
    4272:	8f 93       	push	r24
    4274:	8b e1       	ldi	r24, 0x1B	; 27
    4276:	95 e2       	ldi	r25, 0x25	; 37
    4278:	9f 93       	push	r25
    427a:	8f 93       	push	r24
    427c:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    4280:	81 34       	cpi	r24, 0x41	; 65
    4282:	91 05       	cpc	r25, r1
    4284:	10 f0       	brcs	.+4      	; 0x428a <usb_init+0x3a>
    4286:	80 e4       	ldi	r24, 0x40	; 64
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	40 e0       	ldi	r20, 0x00	; 0
    428c:	68 2f       	mov	r22, r24
    428e:	8b e1       	ldi	r24, 0x1B	; 27
    4290:	95 e2       	ldi	r25, 0x25	; 37
    4292:	8c df       	rcall	.-232    	; 0x41ac <udi_write_tx_buf>
    4294:	84 ef       	ldi	r24, 0xF4	; 244
    4296:	91 e0       	ldi	r25, 0x01	; 1
    4298:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    429c:	1f 92       	push	r1
    429e:	8c e0       	ldi	r24, 0x0C	; 12
    42a0:	8f 93       	push	r24
    42a2:	84 e2       	ldi	r24, 0x24	; 36
    42a4:	97 e0       	ldi	r25, 0x07	; 7
    42a6:	9f 93       	push	r25
    42a8:	8f 93       	push	r24
    42aa:	1f 92       	push	r1
    42ac:	80 e4       	ldi	r24, 0x40	; 64
    42ae:	8f 93       	push	r24
    42b0:	8b e1       	ldi	r24, 0x1B	; 27
    42b2:	95 e2       	ldi	r25, 0x25	; 37
    42b4:	9f 93       	push	r25
    42b6:	8f 93       	push	r24
    42b8:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    42bc:	81 34       	cpi	r24, 0x41	; 65
    42be:	91 05       	cpc	r25, r1
    42c0:	10 f0       	brcs	.+4      	; 0x42c6 <usb_init+0x76>
    42c2:	80 e4       	ldi	r24, 0x40	; 64
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	40 e0       	ldi	r20, 0x00	; 0
    42c8:	68 2f       	mov	r22, r24
    42ca:	8b e1       	ldi	r24, 0x1B	; 27
    42cc:	95 e2       	ldi	r25, 0x25	; 37
    42ce:	6e df       	rcall	.-292    	; 0x41ac <udi_write_tx_buf>
    42d0:	8a ef       	ldi	r24, 0xFA	; 250
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    42d8:	82 e0       	ldi	r24, 0x02	; 2
    42da:	97 e0       	ldi	r25, 0x07	; 7
    42dc:	9f 93       	push	r25
    42de:	8f 93       	push	r24
    42e0:	1f 92       	push	r1
    42e2:	80 e4       	ldi	r24, 0x40	; 64
    42e4:	8f 93       	push	r24
    42e6:	8b e1       	ldi	r24, 0x1B	; 27
    42e8:	95 e2       	ldi	r25, 0x25	; 37
    42ea:	9f 93       	push	r25
    42ec:	8f 93       	push	r24
    42ee:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    42f2:	81 34       	cpi	r24, 0x41	; 65
    42f4:	91 05       	cpc	r25, r1
    42f6:	10 f0       	brcs	.+4      	; 0x42fc <usb_init+0xac>
    42f8:	80 e4       	ldi	r24, 0x40	; 64
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	40 e0       	ldi	r20, 0x00	; 0
    42fe:	68 2f       	mov	r22, r24
    4300:	8b e1       	ldi	r24, 0x1B	; 27
    4302:	95 e2       	ldi	r25, 0x25	; 37
    4304:	53 df       	rcall	.-346    	; 0x41ac <udi_write_tx_buf>
    4306:	8a ef       	ldi	r24, 0xFA	; 250
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    430e:	8e ed       	ldi	r24, 0xDE	; 222
    4310:	96 e0       	ldi	r25, 0x06	; 6
    4312:	9f 93       	push	r25
    4314:	8f 93       	push	r24
    4316:	1f 92       	push	r1
    4318:	80 e4       	ldi	r24, 0x40	; 64
    431a:	8f 93       	push	r24
    431c:	8b e1       	ldi	r24, 0x1B	; 27
    431e:	95 e2       	ldi	r25, 0x25	; 37
    4320:	9f 93       	push	r25
    4322:	8f 93       	push	r24
    4324:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    4328:	81 34       	cpi	r24, 0x41	; 65
    432a:	91 05       	cpc	r25, r1
    432c:	10 f0       	brcs	.+4      	; 0x4332 <usb_init+0xe2>
    432e:	80 e4       	ldi	r24, 0x40	; 64
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	40 e0       	ldi	r20, 0x00	; 0
    4334:	68 2f       	mov	r22, r24
    4336:	8b e1       	ldi	r24, 0x1B	; 27
    4338:	95 e2       	ldi	r25, 0x25	; 37
    433a:	38 df       	rcall	.-400    	; 0x41ac <udi_write_tx_buf>
    433c:	8d b7       	in	r24, 0x3d	; 61
    433e:	9e b7       	in	r25, 0x3e	; 62
    4340:	4a 96       	adiw	r24, 0x1a	; 26
    4342:	8d bf       	out	0x3d, r24	; 61
    4344:	9e bf       	out	0x3e, r25	; 62
    4346:	08 95       	ret

00004348 <usb_callback_suspend_action>:
    4348:	83 e0       	ldi	r24, 0x03	; 3
    434a:	80 93 7f 28 	sts	0x287F, r24	; 0x80287f <g_workmode>
    434e:	08 95       	ret

00004350 <usb_callback_resume_action>:
    4350:	82 e0       	ldi	r24, 0x02	; 2
    4352:	80 93 7f 28 	sts	0x287F, r24	; 0x80287f <g_workmode>
    4356:	08 95       	ret

00004358 <usb_callback_remotewakeup_enable>:
    4358:	08 95       	ret

0000435a <usb_callback_remotewakeup_disable>:
    435a:	08 95       	ret

0000435c <usb_callback_cdc_enable>:
}

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */
	g_usb_cdc_transfers_authorized = true;
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	80 93 81 28 	sts	0x2881, r24	; 0x802881 <g_usb_cdc_transfers_authorized>
	return true;
}
    4362:	08 95       	ret

00004364 <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */
	g_usb_cdc_transfers_authorized = false;
    4364:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <g_usb_cdc_transfers_authorized>
    4368:	08 95       	ret

0000436a <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    436a:	08 95       	ret

0000436c <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    436c:	08 95       	ret

0000436e <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    436e:	08 95       	ret

00004370 <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
	g_usb_cdc_rx_received = true;
    4370:	81 e0       	ldi	r24, 0x01	; 1
    4372:	80 93 82 28 	sts	0x2882, r24	; 0x802882 <g_usb_cdc_rx_received>
    4376:	08 95       	ret

00004378 <usb_callback_tx_empty_notify>:
}

void usb_callback_tx_empty_notify(uint8_t port)
{
	g_usb_cdc_access_blocked = false;
    4378:	10 92 80 28 	sts	0x2880, r1	; 0x802880 <g_usb_cdc_access_blocked>
    437c:	08 95       	ret

0000437e <task_usb>:
PROGMEM_DECLARE(const char, PM_INFO_PART_L2P3B[]);
PROGMEM_DECLARE(const char, PM_INFO_PART_L2P4[]);
PROGMEM_DECLARE(const char, PM_INFO_PART_PLL1[]);

void task_usb(uint32_t now)
{
    437e:	2f 92       	push	r2
    4380:	3f 92       	push	r3
    4382:	4f 92       	push	r4
    4384:	5f 92       	push	r5
    4386:	6f 92       	push	r6
    4388:	7f 92       	push	r7
    438a:	8f 92       	push	r8
    438c:	9f 92       	push	r9
    438e:	af 92       	push	r10
    4390:	bf 92       	push	r11
    4392:	cf 92       	push	r12
    4394:	df 92       	push	r13
    4396:	ef 92       	push	r14
    4398:	ff 92       	push	r15
    439a:	0f 93       	push	r16
    439c:	1f 93       	push	r17
    439e:	cf 93       	push	r28
    43a0:	df 93       	push	r29
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
    43a6:	c3 54       	subi	r28, 0x43	; 67
    43a8:	d1 09       	sbc	r29, r1
    43aa:	cd bf       	out	0x3d, r28	; 61
    43ac:	de bf       	out	0x3e, r29	; 62
	/* Monitoring at the USB serial terminal */
	if (g_usb_cdc_transfers_authorized) {
    43ae:	20 91 81 28 	lds	r18, 0x2881	; 0x802881 <g_usb_cdc_transfers_authorized>
    43b2:	22 23       	and	r18, r18
    43b4:	09 f4       	brne	.+2      	; 0x43b8 <task_usb+0x3a>
    43b6:	1e c4       	rjmp	.+2108   	; 0x4bf4 <task_usb+0x876>
    43b8:	2b 01       	movw	r4, r22
    43ba:	3c 01       	movw	r6, r24
		static uint32_t usb_last = 0UL;

		/* Get command lines from the USB host */
		if (g_usb_cdc_rx_received) {
    43bc:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <g_usb_cdc_rx_received>
    43c0:	88 23       	and	r24, r24
    43c2:	d1 f1       	breq	.+116    	; 0x4438 <task_usb+0xba>
			g_usb_cdc_rx_received = false;
    43c4:	10 92 82 28 	sts	0x2882, r1	; 0x802882 <g_usb_cdc_rx_received>
	if (!g_usb_cdc_transfers_authorized) {
		return;
	}

	/* Single thread only */
	if (!sched_getLock(&g_interpreter_lock)) {
    43c8:	8e e5       	ldi	r24, 0x5E	; 94
    43ca:	96 e2       	ldi	r25, 0x26	; 38
    43cc:	0e 94 2a 6c 	call	0xd854	; 0xd854 <sched_getLock>
    43d0:	88 23       	and	r24, r24
    43d2:	91 f1       	breq	.+100    	; 0x4438 <task_usb+0xba>
		return;
	}

	/* Get command lines from the USB host */
	iram_size_t cdc_rx_len = udi_cdc_get_nb_received_data();
    43d4:	0e 94 d1 76 	call	0xeda2	; 0xeda2 <udi_cdc_get_nb_received_data>
    43d8:	8c 01       	movw	r16, r24
	cdc_rx_len = min(cdc_rx_len, sizeof(cdc_rx_buf));
    43da:	05 97       	sbiw	r24, 0x05	; 5
    43dc:	10 f0       	brcs	.+4      	; 0x43e2 <task_usb+0x64>
    43de:	04 e0       	ldi	r16, 0x04	; 4
    43e0:	10 e0       	ldi	r17, 0x00	; 0
	while (cdc_rx_len) {
    43e2:	01 15       	cp	r16, r1
    43e4:	11 05       	cpc	r17, r1
    43e6:	21 f1       	breq	.+72     	; 0x4430 <task_usb+0xb2>
		if (g_keyBeep_enable) {
    43e8:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <g_keyBeep_enable>
    43ec:	88 23       	and	r24, r24
    43ee:	41 f0       	breq	.+16     	; 0x4400 <task_usb+0x82>
			twi2_set_beep(176, 1);  // Click sound
    43f0:	61 e0       	ldi	r22, 0x01	; 1
    43f2:	80 eb       	ldi	r24, 0xB0	; 176
    43f4:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <twi2_set_beep>
			yield_ms(10);
    43f8:	8a e0       	ldi	r24, 0x0A	; 10
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
		}

		/* Read the data block */
		udi_cdc_read_no_polling(cdc_rx_buf, cdc_rx_len);
    4400:	b8 01       	movw	r22, r16
    4402:	ce 01       	movw	r24, r28
    4404:	01 96       	adiw	r24, 0x01	; 1
    4406:	0e 94 e6 77 	call	0xefcc	; 0xefcc <udi_cdc_read_no_polling>

		/* Echo back when not monitoring information are enabled */
		if (!g_usb_cdc_printStatusLines_atxmega) {
    440a:	80 91 84 28 	lds	r24, 0x2884	; 0x802884 <g_usb_cdc_printStatusLines_atxmega>
    440e:	81 11       	cpse	r24, r1
    4410:	05 c0       	rjmp	.+10     	; 0x441c <task_usb+0x9e>
			udi_write_tx_buf(cdc_rx_buf, cdc_rx_len, true);
    4412:	41 e0       	ldi	r20, 0x01	; 1
    4414:	60 2f       	mov	r22, r16
    4416:	ce 01       	movw	r24, r28
    4418:	01 96       	adiw	r24, 0x01	; 1
    441a:	c8 de       	rcall	.-624    	; 0x41ac <udi_write_tx_buf>
		}

		/* Call the interpreter */
		interpreter_doProcess(cdc_rx_buf, cdc_rx_len);
    441c:	b8 01       	movw	r22, r16
    441e:	ce 01       	movw	r24, r28
    4420:	01 96       	adiw	r24, 0x01	; 1
    4422:	0e 94 22 2c 	call	0x5844	; 0x5844 <interpreter_doProcess>

		/* Check for more available data */
		cdc_rx_len = udi_cdc_get_nb_received_data();
    4426:	0e 94 d1 76 	call	0xeda2	; 0xeda2 <udi_cdc_get_nb_received_data>
    442a:	8c 01       	movw	r16, r24
	}

	/* Get command lines from the USB host */
	iram_size_t cdc_rx_len = udi_cdc_get_nb_received_data();
	cdc_rx_len = min(cdc_rx_len, sizeof(cdc_rx_buf));
	while (cdc_rx_len) {
    442c:	89 2b       	or	r24, r25
    442e:	e1 f6       	brne	.-72     	; 0x43e8 <task_usb+0x6a>
		/* Check for more available data */
		cdc_rx_len = udi_cdc_get_nb_received_data();
	}

	/* Release this lock */
	sched_freeLock(&g_interpreter_lock);
    4430:	8e e5       	ldi	r24, 0x5E	; 94
    4432:	96 e2       	ldi	r25, 0x26	; 38
    4434:	0e 94 42 6c 	call	0xd884	; 0xd884 <sched_freeLock>
			g_usb_cdc_rx_received = false;
			usb_rx_process(now);
		}

		/* Status of the PLL unit */
		if (g_usb_cdc_printStatusLines_sim808 && g_1pps_last_new) {
    4438:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <g_usb_cdc_printStatusLines_sim808>
    443c:	88 23       	and	r24, r24
    443e:	09 f4       	brne	.+2      	; 0x4442 <task_usb+0xc4>
    4440:	67 c0       	rjmp	.+206    	; 0x4510 <task_usb+0x192>
    4442:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <g_1pps_last_new>
    4446:	88 23       	and	r24, r24
    4448:	09 f4       	brne	.+2      	; 0x444c <task_usb+0xce>
    444a:	62 c0       	rjmp	.+196    	; 0x4510 <task_usb+0x192>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    444c:	8f b7       	in	r24, 0x3f	; 63
    444e:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    4450:	f8 94       	cli
	return flags;
    4452:	2d 81       	ldd	r18, Y+5	; 0x05
			uint16_t l_pll_lo;
			uint64_t l_pll_hi;
			{
				irqflags_t flags = cpu_irq_save();
				l_pll_lo = g_1pps_last_lo;
    4454:	80 91 8f 28 	lds	r24, 0x288F	; 0x80288f <g_1pps_last_lo>
    4458:	90 91 90 28 	lds	r25, 0x2890	; 0x802890 <g_1pps_last_lo+0x1>
				l_pll_hi = g_1pps_last_hi;
    445c:	20 90 87 28 	lds	r2, 0x2887	; 0x802887 <g_1pps_last_hi>
    4460:	30 90 88 28 	lds	r3, 0x2888	; 0x802888 <g_1pps_last_hi+0x1>
    4464:	c0 90 89 28 	lds	r12, 0x2889	; 0x802889 <g_1pps_last_hi+0x2>
    4468:	ce 82       	std	Y+6, r12	; 0x06
    446a:	d0 90 8a 28 	lds	r13, 0x288A	; 0x80288a <g_1pps_last_hi+0x3>
    446e:	d8 86       	std	Y+8, r13	; 0x08
    4470:	e0 90 8b 28 	lds	r14, 0x288B	; 0x80288b <g_1pps_last_hi+0x4>
    4474:	ec 86       	std	Y+12, r14	; 0x0c
    4476:	f0 90 8c 28 	lds	r15, 0x288C	; 0x80288c <g_1pps_last_hi+0x5>
    447a:	fe 86       	std	Y+14, r15	; 0x0e
    447c:	80 90 8d 28 	lds	r8, 0x288D	; 0x80288d <g_1pps_last_hi+0x6>
    4480:	90 90 8e 28 	lds	r9, 0x288E	; 0x80288e <g_1pps_last_hi+0x7>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4484:	2f bf       	out	0x3f, r18	; 63
				cpu_irq_restore(flags);
			}

			int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_PLL1, (uint32_t)(l_pll_hi / 1000U), (uint32_t) (l_pll_hi % 1000), l_pll_lo);
    4486:	9f 93       	push	r25
    4488:	8f 93       	push	r24
    448a:	0f 2e       	mov	r0, r31
    448c:	f8 ee       	ldi	r31, 0xE8	; 232
    448e:	af 2e       	mov	r10, r31
    4490:	f0 2d       	mov	r31, r0
    4492:	0f 2e       	mov	r0, r31
    4494:	f3 e0       	ldi	r31, 0x03	; 3
    4496:	bf 2e       	mov	r11, r31
    4498:	f0 2d       	mov	r31, r0
    449a:	c1 2c       	mov	r12, r1
    449c:	d1 2c       	mov	r13, r1
    449e:	e1 2c       	mov	r14, r1
    44a0:	f1 2c       	mov	r15, r1
    44a2:	00 e0       	ldi	r16, 0x00	; 0
    44a4:	10 e0       	ldi	r17, 0x00	; 0
    44a6:	22 2d       	mov	r18, r2
    44a8:	33 2d       	mov	r19, r3
    44aa:	4e 81       	ldd	r20, Y+6	; 0x06
    44ac:	58 85       	ldd	r21, Y+8	; 0x08
    44ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    44b0:	7e 85       	ldd	r23, Y+14	; 0x0e
    44b2:	88 2d       	mov	r24, r8
    44b4:	99 2d       	mov	r25, r9
    44b6:	0e 94 5e 88 	call	0x110bc	; 0x110bc <__umoddi3>
    44ba:	5f 93       	push	r21
    44bc:	4f 93       	push	r20
    44be:	3f 93       	push	r19
    44c0:	2f 93       	push	r18
    44c2:	22 2d       	mov	r18, r2
    44c4:	33 2d       	mov	r19, r3
    44c6:	4e 81       	ldd	r20, Y+6	; 0x06
    44c8:	58 85       	ldd	r21, Y+8	; 0x08
    44ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    44cc:	7e 85       	ldd	r23, Y+14	; 0x0e
    44ce:	88 2d       	mov	r24, r8
    44d0:	99 2d       	mov	r25, r9
    44d2:	0e 94 60 88 	call	0x110c0	; 0x110c0 <__udivdi3>
    44d6:	5f 93       	push	r21
    44d8:	4f 93       	push	r20
    44da:	3f 93       	push	r19
    44dc:	2f 93       	push	r18
    44de:	86 e0       	ldi	r24, 0x06	; 6
    44e0:	95 e0       	ldi	r25, 0x05	; 5
    44e2:	9f 93       	push	r25
    44e4:	8f 93       	push	r24
    44e6:	1f 92       	push	r1
    44e8:	80 e4       	ldi	r24, 0x40	; 64
    44ea:	8f 93       	push	r24
    44ec:	8b e1       	ldi	r24, 0x1B	; 27
    44ee:	95 e2       	ldi	r25, 0x25	; 37
    44f0:	9f 93       	push	r25
    44f2:	8f 93       	push	r24
    44f4:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
			udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    44f8:	81 34       	cpi	r24, 0x41	; 65
    44fa:	91 05       	cpc	r25, r1
    44fc:	10 f0       	brcs	.+4      	; 0x4502 <task_usb+0x184>
    44fe:	80 e4       	ldi	r24, 0x40	; 64
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	40 e0       	ldi	r20, 0x00	; 0
    4504:	68 2f       	mov	r22, r24
    4506:	8b e1       	ldi	r24, 0x1B	; 27
    4508:	95 e2       	ldi	r25, 0x25	; 37
    450a:	50 de       	rcall	.-864    	; 0x41ac <udi_write_tx_buf>
    450c:	cd bf       	out	0x3d, r28	; 61
    450e:	de bf       	out	0x3e, r29	; 62
		}

		/* Status output when requested */
		if (g_usb_cdc_printStatusLines_atxmega) {
    4510:	80 91 84 28 	lds	r24, 0x2884	; 0x802884 <g_usb_cdc_printStatusLines_atxmega>
    4514:	88 23       	and	r24, r24
    4516:	09 f4       	brne	.+2      	; 0x451a <task_usb+0x19c>
    4518:	6d c3       	rjmp	.+1754   	; 0x4bf4 <task_usb+0x876>
			if (((now - usb_last) >= 512) || (now < usb_last)) {
    451a:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <__data_end>
    451e:	90 91 ad 21 	lds	r25, 0x21AD	; 0x8021ad <__data_end+0x1>
    4522:	a0 91 ae 21 	lds	r26, 0x21AE	; 0x8021ae <__data_end+0x2>
    4526:	b0 91 af 21 	lds	r27, 0x21AF	; 0x8021af <__data_end+0x3>
    452a:	b3 01       	movw	r22, r6
    452c:	a2 01       	movw	r20, r4
    452e:	48 1b       	sub	r20, r24
    4530:	59 0b       	sbc	r21, r25
    4532:	6a 0b       	sbc	r22, r26
    4534:	7b 0b       	sbc	r23, r27
    4536:	41 15       	cp	r20, r1
    4538:	52 40       	sbci	r21, 0x02	; 2
    453a:	61 05       	cpc	r22, r1
    453c:	71 05       	cpc	r23, r1
    453e:	30 f4       	brcc	.+12     	; 0x454c <task_usb+0x1ce>
    4540:	48 16       	cp	r4, r24
    4542:	59 06       	cpc	r5, r25
    4544:	6a 06       	cpc	r6, r26
    4546:	7b 06       	cpc	r7, r27
    4548:	08 f0       	brcs	.+2      	; 0x454c <task_usb+0x1ce>
    454a:	54 c3       	rjmp	.+1704   	; 0x4bf4 <task_usb+0x876>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    454c:	8f b7       	in	r24, 0x3f	; 63
    454e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4550:	f8 94       	cli
	return flags;
    4552:	69 81       	ldd	r22, Y+1	; 0x01
				int32_t	l_twi1_gyro_2_mag_z_nT;

				/* Getting a copy of the values */
				{
					irqflags_t flags			= cpu_irq_save();
					l_adc_vctcxo_volt_1000		= g_adc_vctcxo_volt_1000;
    4554:	70 91 7a 26 	lds	r23, 0x267A	; 0x80267a <g_adc_vctcxo_volt_1000>
    4558:	23 96       	adiw	r28, 0x03	; 3
    455a:	7f af       	std	Y+63, r23	; 0x3f
    455c:	23 97       	sbiw	r28, 0x03	; 3
    455e:	80 91 7b 26 	lds	r24, 0x267B	; 0x80267b <g_adc_vctcxo_volt_1000+0x1>
    4562:	24 96       	adiw	r28, 0x04	; 4
    4564:	8f af       	std	Y+63, r24	; 0x3f
    4566:	24 97       	sbiw	r28, 0x04	; 4
					l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    4568:	20 91 78 26 	lds	r18, 0x2678	; 0x802678 <g_adc_5v0_volt_1000>
    456c:	30 91 79 26 	lds	r19, 0x2679	; 0x802679 <g_adc_5v0_volt_1000+0x1>
					l_adc_vbat_volt_1000		= g_adc_vbat_volt_1000;
    4570:	40 91 76 26 	lds	r20, 0x2676	; 0x802676 <g_adc_vbat_volt_1000>
    4574:	50 91 77 26 	lds	r21, 0x2677	; 0x802677 <g_adc_vbat_volt_1000+0x1>
					l_adc_io_adc4_volt_1000		= g_adc_io_adc4_volt_1000;
    4578:	c0 90 74 26 	lds	r12, 0x2674	; 0x802674 <g_adc_io_adc4_volt_1000>
    457c:	cc a6       	std	Y+44, r12	; 0x2c
    457e:	d0 90 75 26 	lds	r13, 0x2675	; 0x802675 <g_adc_io_adc4_volt_1000+0x1>
    4582:	dd a6       	std	Y+45, r13	; 0x2d
					l_adc_io_adc5_volt_1000		= g_adc_io_adc5_volt_1000;
    4584:	20 90 72 26 	lds	r2, 0x2672	; 0x802672 <g_adc_io_adc5_volt_1000>
    4588:	30 90 73 26 	lds	r3, 0x2673	; 0x802673 <g_adc_io_adc5_volt_1000+0x1>
					l_adc_silence_volt_1000		= g_adc_silence_volt_1000;
    458c:	00 91 70 26 	lds	r16, 0x2670	; 0x802670 <g_adc_silence_volt_1000>
    4590:	10 91 71 26 	lds	r17, 0x2671	; 0x802671 <g_adc_silence_volt_1000+0x1>
					l_adc_temp_deg_100			= g_adc_temp_deg_100;
    4594:	e0 90 6e 26 	lds	r14, 0x266E	; 0x80266e <g_adc_temp_deg_100>
    4598:	f0 90 6f 26 	lds	r15, 0x266F	; 0x80266f <g_adc_temp_deg_100+0x1>
    459c:	ee 82       	std	Y+6, r14	; 0x06
    459e:	ff 82       	std	Y+7, r15	; 0x07
					l_twi1_baro_temp_100		= g_twi1_baro_temp_100;
    45a0:	80 90 f8 26 	lds	r8, 0x26F8	; 0x8026f8 <g_twi1_baro_temp_100>
    45a4:	90 90 f9 26 	lds	r9, 0x26F9	; 0x8026f9 <g_twi1_baro_temp_100+0x1>
    45a8:	a0 90 fa 26 	lds	r10, 0x26FA	; 0x8026fa <g_twi1_baro_temp_100+0x2>
    45ac:	b0 90 fb 26 	lds	r11, 0x26FB	; 0x8026fb <g_twi1_baro_temp_100+0x3>
					l_twi1_baro_p_100			= g_twi1_baro_p_100;
    45b0:	c0 90 f4 26 	lds	r12, 0x26F4	; 0x8026f4 <g_twi1_baro_p_100>
    45b4:	d0 90 f5 26 	lds	r13, 0x26F5	; 0x8026f5 <g_twi1_baro_p_100+0x1>
    45b8:	e0 90 f6 26 	lds	r14, 0x26F6	; 0x8026f6 <g_twi1_baro_p_100+0x2>
    45bc:	f0 90 f7 26 	lds	r15, 0x26F7	; 0x8026f7 <g_twi1_baro_p_100+0x3>
    45c0:	c8 86       	std	Y+8, r12	; 0x08
    45c2:	d9 86       	std	Y+9, r13	; 0x09
    45c4:	ea 86       	std	Y+10, r14	; 0x0a
    45c6:	fb 86       	std	Y+11, r15	; 0x0b
					l_twi1_hygro_T_100			= g_twi1_hygro_T_100;
    45c8:	e0 90 ec 26 	lds	r14, 0x26EC	; 0x8026ec <g_twi1_hygro_T_100>
    45cc:	f0 90 ed 26 	lds	r15, 0x26ED	; 0x8026ed <g_twi1_hygro_T_100+0x1>
    45d0:	ec 86       	std	Y+12, r14	; 0x0c
    45d2:	fd 86       	std	Y+13, r15	; 0x0d
					l_twi1_hygro_RH_100			= g_twi1_hygro_RH_100;
    45d4:	c0 90 ea 26 	lds	r12, 0x26EA	; 0x8026ea <g_twi1_hygro_RH_100>
    45d8:	d0 90 eb 26 	lds	r13, 0x26EB	; 0x8026eb <g_twi1_hygro_RH_100+0x1>
    45dc:	ce 86       	std	Y+14, r12	; 0x0e
    45de:	df 86       	std	Y+15, r13	; 0x0f
					l_twi1_gyro_1_accel_x		= g_twi1_gyro_1_accel_x;
    45e0:	d0 90 69 27 	lds	r13, 0x2769	; 0x802769 <g_twi1_gyro_1_accel_x>
    45e4:	de a6       	std	Y+46, r13	; 0x2e
    45e6:	e0 90 6a 27 	lds	r14, 0x276A	; 0x80276a <g_twi1_gyro_1_accel_x+0x1>
    45ea:	ef a6       	std	Y+47, r14	; 0x2f
					l_twi1_gyro_1_accel_y		= g_twi1_gyro_1_accel_y;
    45ec:	f0 90 67 27 	lds	r15, 0x2767	; 0x802767 <g_twi1_gyro_1_accel_y>
    45f0:	f8 aa       	std	Y+48, r15	; 0x30
    45f2:	c0 90 68 27 	lds	r12, 0x2768	; 0x802768 <g_twi1_gyro_1_accel_y+0x1>
    45f6:	c9 aa       	std	Y+49, r12	; 0x31
					l_twi1_gyro_1_accel_z		= g_twi1_gyro_1_accel_z;
    45f8:	d0 90 65 27 	lds	r13, 0x2765	; 0x802765 <g_twi1_gyro_1_accel_z>
    45fc:	da aa       	std	Y+50, r13	; 0x32
    45fe:	e0 90 66 27 	lds	r14, 0x2766	; 0x802766 <g_twi1_gyro_1_accel_z+0x1>
    4602:	eb aa       	std	Y+51, r14	; 0x33
					l_twi1_gyro_1_accel_x_mg	= g_twi1_gyro_1_accel_x_mg;
    4604:	c0 90 57 27 	lds	r12, 0x2757	; 0x802757 <g_twi1_gyro_1_accel_x_mg>
    4608:	d0 90 58 27 	lds	r13, 0x2758	; 0x802758 <g_twi1_gyro_1_accel_x_mg+0x1>
    460c:	c8 8a       	std	Y+16, r12	; 0x10
    460e:	d9 8a       	std	Y+17, r13	; 0x11
					l_twi1_gyro_1_accel_y_mg	= g_twi1_gyro_1_accel_y_mg;
    4610:	e0 90 55 27 	lds	r14, 0x2755	; 0x802755 <g_twi1_gyro_1_accel_y_mg>
    4614:	f0 90 56 27 	lds	r15, 0x2756	; 0x802756 <g_twi1_gyro_1_accel_y_mg+0x1>
    4618:	ea 8a       	std	Y+18, r14	; 0x12
    461a:	fb 8a       	std	Y+19, r15	; 0x13
					l_twi1_gyro_1_accel_z_mg	= g_twi1_gyro_1_accel_z_mg;
    461c:	c0 90 53 27 	lds	r12, 0x2753	; 0x802753 <g_twi1_gyro_1_accel_z_mg>
    4620:	d0 90 54 27 	lds	r13, 0x2754	; 0x802754 <g_twi1_gyro_1_accel_z_mg+0x1>
    4624:	cc 8a       	std	Y+20, r12	; 0x14
    4626:	dd 8a       	std	Y+21, r13	; 0x15
					l_twi1_gyro_1_gyro_x		= g_twi1_gyro_1_gyro_x;
    4628:	d0 90 51 27 	lds	r13, 0x2751	; 0x802751 <g_twi1_gyro_1_gyro_x>
    462c:	dc aa       	std	Y+52, r13	; 0x34
    462e:	e0 90 52 27 	lds	r14, 0x2752	; 0x802752 <g_twi1_gyro_1_gyro_x+0x1>
    4632:	ed aa       	std	Y+53, r14	; 0x35
					l_twi1_gyro_1_gyro_y		= g_twi1_gyro_1_gyro_y;
    4634:	f0 90 4f 27 	lds	r15, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_y>
    4638:	fe aa       	std	Y+54, r15	; 0x36
    463a:	c0 90 50 27 	lds	r12, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_y+0x1>
    463e:	cf aa       	std	Y+55, r12	; 0x37
					l_twi1_gyro_1_gyro_z		= g_twi1_gyro_1_gyro_z;
    4640:	d0 90 4d 27 	lds	r13, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_z>
    4644:	d8 ae       	std	Y+56, r13	; 0x38
    4646:	e0 90 4e 27 	lds	r14, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_z+0x1>
    464a:	e9 ae       	std	Y+57, r14	; 0x39
					l_twi1_gyro_1_gyro_x_mdps	= g_twi1_gyro_1_gyro_x_mdps;
    464c:	c0 90 43 27 	lds	r12, 0x2743	; 0x802743 <g_twi1_gyro_1_gyro_x_mdps>
    4650:	d0 90 44 27 	lds	r13, 0x2744	; 0x802744 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    4654:	e0 90 45 27 	lds	r14, 0x2745	; 0x802745 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    4658:	f0 90 46 27 	lds	r15, 0x2746	; 0x802746 <g_twi1_gyro_1_gyro_x_mdps+0x3>
    465c:	ce 8a       	std	Y+22, r12	; 0x16
    465e:	df 8a       	std	Y+23, r13	; 0x17
    4660:	e8 8e       	std	Y+24, r14	; 0x18
    4662:	f9 8e       	std	Y+25, r15	; 0x19
					l_twi1_gyro_1_gyro_y_mdps	= g_twi1_gyro_1_gyro_y_mdps;
    4664:	c0 90 3f 27 	lds	r12, 0x273F	; 0x80273f <g_twi1_gyro_1_gyro_y_mdps>
    4668:	d0 90 40 27 	lds	r13, 0x2740	; 0x802740 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    466c:	e0 90 41 27 	lds	r14, 0x2741	; 0x802741 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    4670:	f0 90 42 27 	lds	r15, 0x2742	; 0x802742 <g_twi1_gyro_1_gyro_y_mdps+0x3>
					l_twi1_gyro_1_gyro_z_mdps	= g_twi1_gyro_1_gyro_z_mdps;
    4674:	80 91 3b 27 	lds	r24, 0x273B	; 0x80273b <g_twi1_gyro_1_gyro_z_mdps>
    4678:	90 91 3c 27 	lds	r25, 0x273C	; 0x80273c <g_twi1_gyro_1_gyro_z_mdps+0x1>
    467c:	a0 91 3d 27 	lds	r26, 0x273D	; 0x80273d <g_twi1_gyro_1_gyro_z_mdps+0x2>
    4680:	b0 91 3e 27 	lds	r27, 0x273E	; 0x80273e <g_twi1_gyro_1_gyro_z_mdps+0x3>
    4684:	8a 8f       	std	Y+26, r24	; 0x1a
    4686:	9b 8f       	std	Y+27, r25	; 0x1b
    4688:	ac 8f       	std	Y+28, r26	; 0x1c
    468a:	bd 8f       	std	Y+29, r27	; 0x1d
					l_twi1_gyro_1_temp			= g_twi1_gyro_1_temp;
    468c:	90 91 71 27 	lds	r25, 0x2771	; 0x802771 <g_twi1_gyro_1_temp>
    4690:	9a af       	std	Y+58, r25	; 0x3a
    4692:	a0 91 72 27 	lds	r26, 0x2772	; 0x802772 <g_twi1_gyro_1_temp+0x1>
    4696:	ab af       	std	Y+59, r26	; 0x3b
					l_twi1_gyro_1_temp_deg_100	= g_twi1_gyro_1_temp_deg_100;
    4698:	e0 91 6b 27 	lds	r30, 0x276B	; 0x80276b <g_twi1_gyro_1_temp_deg_100>
    469c:	f0 91 6c 27 	lds	r31, 0x276C	; 0x80276c <g_twi1_gyro_1_temp_deg_100+0x1>
    46a0:	ee 8f       	std	Y+30, r30	; 0x1e
    46a2:	ff 8f       	std	Y+31, r31	; 0x1f
					l_twi1_gyro_2_mag_x			= g_twi1_gyro_2_mag_x;
    46a4:	f0 91 2d 27 	lds	r31, 0x272D	; 0x80272d <g_twi1_gyro_2_mag_x>
    46a8:	fc af       	std	Y+60, r31	; 0x3c
    46aa:	70 91 2e 27 	lds	r23, 0x272E	; 0x80272e <g_twi1_gyro_2_mag_x+0x1>
    46ae:	7d af       	std	Y+61, r23	; 0x3d
					l_twi1_gyro_2_mag_y			= g_twi1_gyro_2_mag_y;
    46b0:	80 91 2b 27 	lds	r24, 0x272B	; 0x80272b <g_twi1_gyro_2_mag_y>
    46b4:	8e af       	std	Y+62, r24	; 0x3e
    46b6:	90 91 2c 27 	lds	r25, 0x272C	; 0x80272c <g_twi1_gyro_2_mag_y+0x1>
    46ba:	9f af       	std	Y+63, r25	; 0x3f
					l_twi1_gyro_2_mag_z			= g_twi1_gyro_2_mag_z;
    46bc:	a0 91 29 27 	lds	r26, 0x2729	; 0x802729 <g_twi1_gyro_2_mag_z>
    46c0:	21 96       	adiw	r28, 0x01	; 1
    46c2:	af af       	std	Y+63, r26	; 0x3f
    46c4:	21 97       	sbiw	r28, 0x01	; 1
    46c6:	b0 91 2a 27 	lds	r27, 0x272A	; 0x80272a <g_twi1_gyro_2_mag_z+0x1>
    46ca:	22 96       	adiw	r28, 0x02	; 2
    46cc:	bf af       	std	Y+63, r27	; 0x3f
    46ce:	22 97       	sbiw	r28, 0x02	; 2
					l_twi1_gyro_2_mag_x_nT		= g_twi1_gyro_2_mag_x_nT;
    46d0:	80 91 1f 27 	lds	r24, 0x271F	; 0x80271f <g_twi1_gyro_2_mag_x_nT>
    46d4:	90 91 20 27 	lds	r25, 0x2720	; 0x802720 <g_twi1_gyro_2_mag_x_nT+0x1>
    46d8:	a0 91 21 27 	lds	r26, 0x2721	; 0x802721 <g_twi1_gyro_2_mag_x_nT+0x2>
    46dc:	b0 91 22 27 	lds	r27, 0x2722	; 0x802722 <g_twi1_gyro_2_mag_x_nT+0x3>
    46e0:	88 a3       	std	Y+32, r24	; 0x20
    46e2:	99 a3       	std	Y+33, r25	; 0x21
    46e4:	aa a3       	std	Y+34, r26	; 0x22
    46e6:	bb a3       	std	Y+35, r27	; 0x23
					l_twi1_gyro_2_mag_y_nT		= g_twi1_gyro_2_mag_y_nT;
    46e8:	80 91 1b 27 	lds	r24, 0x271B	; 0x80271b <g_twi1_gyro_2_mag_y_nT>
    46ec:	90 91 1c 27 	lds	r25, 0x271C	; 0x80271c <g_twi1_gyro_2_mag_y_nT+0x1>
    46f0:	a0 91 1d 27 	lds	r26, 0x271D	; 0x80271d <g_twi1_gyro_2_mag_y_nT+0x2>
    46f4:	b0 91 1e 27 	lds	r27, 0x271E	; 0x80271e <g_twi1_gyro_2_mag_y_nT+0x3>
    46f8:	8c a3       	std	Y+36, r24	; 0x24
    46fa:	9d a3       	std	Y+37, r25	; 0x25
    46fc:	ae a3       	std	Y+38, r26	; 0x26
    46fe:	bf a3       	std	Y+39, r27	; 0x27
					l_twi1_gyro_2_mag_z_nT		= g_twi1_gyro_2_mag_z_nT;
    4700:	80 91 17 27 	lds	r24, 0x2717	; 0x802717 <g_twi1_gyro_2_mag_z_nT>
    4704:	90 91 18 27 	lds	r25, 0x2718	; 0x802718 <g_twi1_gyro_2_mag_z_nT+0x1>
    4708:	a0 91 19 27 	lds	r26, 0x2719	; 0x802719 <g_twi1_gyro_2_mag_z_nT+0x2>
    470c:	b0 91 1a 27 	lds	r27, 0x271A	; 0x80271a <g_twi1_gyro_2_mag_z_nT+0x3>
    4710:	88 a7       	std	Y+40, r24	; 0x28
    4712:	99 a7       	std	Y+41, r25	; 0x29
    4714:	aa a7       	std	Y+42, r26	; 0x2a
    4716:	bb a7       	std	Y+43, r27	; 0x2b
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4718:	6f bf       	out	0x3f, r22	; 63
					cpu_irq_restore(flags);
				}

				int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1A,
    471a:	5f 93       	push	r21
    471c:	4f 93       	push	r20
    471e:	3f 93       	push	r19
    4720:	2f 93       	push	r18
    4722:	24 96       	adiw	r28, 0x04	; 4
    4724:	9f ad       	ldd	r25, Y+63	; 0x3f
    4726:	24 97       	sbiw	r28, 0x04	; 4
    4728:	9f 93       	push	r25
    472a:	23 96       	adiw	r28, 0x03	; 3
    472c:	af ad       	ldd	r26, Y+63	; 0x3f
    472e:	23 97       	sbiw	r28, 0x03	; 3
    4730:	af 93       	push	r26
    4732:	d3 01       	movw	r26, r6
    4734:	c2 01       	movw	r24, r4
    4736:	07 2e       	mov	r0, r23
    4738:	7a e0       	ldi	r23, 0x0A	; 10
    473a:	b6 95       	lsr	r27
    473c:	a7 95       	ror	r26
    473e:	97 95       	ror	r25
    4740:	87 95       	ror	r24
    4742:	7a 95       	dec	r23
    4744:	d1 f7       	brne	.-12     	; 0x473a <task_usb+0x3bc>
    4746:	70 2d       	mov	r23, r0
    4748:	bf 93       	push	r27
    474a:	af 93       	push	r26
    474c:	9f 93       	push	r25
    474e:	8f 93       	push	r24
    4750:	89 ea       	ldi	r24, 0xA9	; 169
    4752:	96 e0       	ldi	r25, 0x06	; 6
    4754:	9f 93       	push	r25
    4756:	8f 93       	push	r24
    4758:	1f 92       	push	r1
    475a:	80 e4       	ldi	r24, 0x40	; 64
    475c:	8f 93       	push	r24
    475e:	8b e1       	ldi	r24, 0x1B	; 27
    4760:	95 e2       	ldi	r25, 0x25	; 37
    4762:	9f 93       	push	r25
    4764:	8f 93       	push	r24
    4766:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
				now >> 10,
				l_adc_vctcxo_volt_1000, l_adc_5v0_volt_1000, l_adc_vbat_volt_1000);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    476a:	81 34       	cpi	r24, 0x41	; 65
    476c:	91 05       	cpc	r25, r1
    476e:	10 f0       	brcs	.+4      	; 0x4774 <task_usb+0x3f6>
    4770:	80 e4       	ldi	r24, 0x40	; 64
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	40 e0       	ldi	r20, 0x00	; 0
    4776:	68 2f       	mov	r22, r24
    4778:	8b e1       	ldi	r24, 0x1B	; 27
    477a:	95 e2       	ldi	r25, 0x25	; 37
    477c:	17 dd       	rcall	.-1490   	; 0x41ac <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1B,
    477e:	1f 93       	push	r17
    4780:	0f 93       	push	r16
    4782:	3f 92       	push	r3
    4784:	2f 92       	push	r2
    4786:	bd a5       	ldd	r27, Y+45	; 0x2d
    4788:	bf 93       	push	r27
    478a:	ec a5       	ldd	r30, Y+44	; 0x2c
    478c:	ef 93       	push	r30
    478e:	8f e7       	ldi	r24, 0x7F	; 127
    4790:	96 e0       	ldi	r25, 0x06	; 6
    4792:	9f 93       	push	r25
    4794:	8f 93       	push	r24
    4796:	1f 92       	push	r1
    4798:	80 e4       	ldi	r24, 0x40	; 64
    479a:	8f 93       	push	r24
    479c:	8b e1       	ldi	r24, 0x1B	; 27
    479e:	95 e2       	ldi	r25, 0x25	; 37
    47a0:	9f 93       	push	r25
    47a2:	8f 93       	push	r24
    47a4:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
				l_adc_io_adc4_volt_1000, l_adc_io_adc5_volt_1000, l_adc_silence_volt_1000);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    47a8:	81 34       	cpi	r24, 0x41	; 65
    47aa:	91 05       	cpc	r25, r1
    47ac:	10 f0       	brcs	.+4      	; 0x47b2 <task_usb+0x434>
    47ae:	80 e4       	ldi	r24, 0x40	; 64
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	40 e0       	ldi	r20, 0x00	; 0
    47b4:	68 2f       	mov	r22, r24
    47b6:	8b e1       	ldi	r24, 0x1B	; 27
    47b8:	95 e2       	ldi	r25, 0x25	; 37
    47ba:	f8 dc       	rcall	.-1552   	; 0x41ac <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P1C,
    47bc:	2e 81       	ldd	r18, Y+6	; 0x06
    47be:	3f 81       	ldd	r19, Y+7	; 0x07
    47c0:	b9 01       	movw	r22, r18
    47c2:	33 0f       	add	r19, r19
    47c4:	88 0b       	sbc	r24, r24
    47c6:	99 0b       	sbc	r25, r25
    47c8:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    47cc:	20 e0       	ldi	r18, 0x00	; 0
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	48 ec       	ldi	r20, 0xC8	; 200
    47d2:	52 e4       	ldi	r21, 0x42	; 66
    47d4:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    47d8:	9f 93       	push	r25
    47da:	8f 93       	push	r24
    47dc:	7f 93       	push	r23
    47de:	6f 93       	push	r22
    47e0:	8b e6       	ldi	r24, 0x6B	; 107
    47e2:	96 e0       	ldi	r25, 0x06	; 6
    47e4:	9f 93       	push	r25
    47e6:	8f 93       	push	r24
    47e8:	1f 92       	push	r1
    47ea:	80 e4       	ldi	r24, 0x40	; 64
    47ec:	8f 93       	push	r24
    47ee:	8b e1       	ldi	r24, 0x1B	; 27
    47f0:	95 e2       	ldi	r25, 0x25	; 37
    47f2:	9f 93       	push	r25
    47f4:	8f 93       	push	r24
    47f6:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
				l_adc_temp_deg_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    47fa:	cd bf       	out	0x3d, r28	; 61
    47fc:	de bf       	out	0x3e, r29	; 62
    47fe:	81 34       	cpi	r24, 0x41	; 65
    4800:	91 05       	cpc	r25, r1
    4802:	10 f0       	brcs	.+4      	; 0x4808 <task_usb+0x48a>
    4804:	80 e4       	ldi	r24, 0x40	; 64
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	40 e0       	ldi	r20, 0x00	; 0
    480a:	68 2f       	mov	r22, r24
    480c:	8b e1       	ldi	r24, 0x1B	; 27
    480e:	95 e2       	ldi	r25, 0x25	; 37
    4810:	cd dc       	rcall	.-1638   	; 0x41ac <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P2,
    4812:	68 85       	ldd	r22, Y+8	; 0x08
    4814:	79 85       	ldd	r23, Y+9	; 0x09
    4816:	8a 85       	ldd	r24, Y+10	; 0x0a
    4818:	9b 85       	ldd	r25, Y+11	; 0x0b
    481a:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    481e:	20 e0       	ldi	r18, 0x00	; 0
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	48 ec       	ldi	r20, 0xC8	; 200
    4824:	52 e4       	ldi	r21, 0x42	; 66
    4826:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    482a:	9f 93       	push	r25
    482c:	8f 93       	push	r24
    482e:	7f 93       	push	r23
    4830:	6f 93       	push	r22
    4832:	c5 01       	movw	r24, r10
    4834:	b4 01       	movw	r22, r8
    4836:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    483a:	20 e0       	ldi	r18, 0x00	; 0
    483c:	30 e0       	ldi	r19, 0x00	; 0
    483e:	48 ec       	ldi	r20, 0xC8	; 200
    4840:	52 e4       	ldi	r21, 0x42	; 66
    4842:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    4846:	9f 93       	push	r25
    4848:	8f 93       	push	r24
    484a:	7f 93       	push	r23
    484c:	6f 93       	push	r22
    484e:	84 e4       	ldi	r24, 0x44	; 68
    4850:	96 e0       	ldi	r25, 0x06	; 6
    4852:	9f 93       	push	r25
    4854:	8f 93       	push	r24
    4856:	1f 92       	push	r1
    4858:	80 e4       	ldi	r24, 0x40	; 64
    485a:	8f 93       	push	r24
    485c:	8b e1       	ldi	r24, 0x1B	; 27
    485e:	95 e2       	ldi	r25, 0x25	; 37
    4860:	9f 93       	push	r25
    4862:	8f 93       	push	r24
    4864:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
				l_twi1_baro_temp_100 / 100.f, l_twi1_baro_p_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4868:	81 34       	cpi	r24, 0x41	; 65
    486a:	91 05       	cpc	r25, r1
    486c:	10 f0       	brcs	.+4      	; 0x4872 <task_usb+0x4f4>
    486e:	80 e4       	ldi	r24, 0x40	; 64
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	40 e0       	ldi	r20, 0x00	; 0
    4874:	68 2f       	mov	r22, r24
    4876:	8b e1       	ldi	r24, 0x1B	; 27
    4878:	95 e2       	ldi	r25, 0x25	; 37
    487a:	98 dc       	rcall	.-1744   	; 0x41ac <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L1P3,
    487c:	ee 85       	ldd	r30, Y+14	; 0x0e
    487e:	ff 85       	ldd	r31, Y+15	; 0x0f
    4880:	bf 01       	movw	r22, r30
    4882:	ff 0f       	add	r31, r31
    4884:	88 0b       	sbc	r24, r24
    4886:	99 0b       	sbc	r25, r25
    4888:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	48 ec       	ldi	r20, 0xC8	; 200
    4892:	52 e4       	ldi	r21, 0x42	; 66
    4894:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    4898:	9f 93       	push	r25
    489a:	8f 93       	push	r24
    489c:	7f 93       	push	r23
    489e:	6f 93       	push	r22
    48a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    48a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    48a4:	b9 01       	movw	r22, r18
    48a6:	33 0f       	add	r19, r19
    48a8:	88 0b       	sbc	r24, r24
    48aa:	99 0b       	sbc	r25, r25
    48ac:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	48 ec       	ldi	r20, 0xC8	; 200
    48b6:	52 e4       	ldi	r21, 0x42	; 66
    48b8:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    48bc:	9f 93       	push	r25
    48be:	8f 93       	push	r24
    48c0:	7f 93       	push	r23
    48c2:	6f 93       	push	r22
    48c4:	89 e1       	ldi	r24, 0x19	; 25
    48c6:	96 e0       	ldi	r25, 0x06	; 6
    48c8:	9f 93       	push	r25
    48ca:	8f 93       	push	r24
    48cc:	1f 92       	push	r1
    48ce:	80 e4       	ldi	r24, 0x40	; 64
    48d0:	8f 93       	push	r24
    48d2:	8b e1       	ldi	r24, 0x1B	; 27
    48d4:	95 e2       	ldi	r25, 0x25	; 37
    48d6:	9f 93       	push	r25
    48d8:	8f 93       	push	r24
    48da:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
				l_twi1_hygro_T_100 / 100.f, l_twi1_hygro_RH_100 / 100.f);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    48de:	81 34       	cpi	r24, 0x41	; 65
    48e0:	91 05       	cpc	r25, r1
    48e2:	10 f0       	brcs	.+4      	; 0x48e8 <task_usb+0x56a>
    48e4:	80 e4       	ldi	r24, 0x40	; 64
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	40 e0       	ldi	r20, 0x00	; 0
    48ea:	68 2f       	mov	r22, r24
    48ec:	8b e1       	ldi	r24, 0x1B	; 27
    48ee:	95 e2       	ldi	r25, 0x25	; 37
    48f0:	5d dc       	rcall	.-1862   	; 0x41ac <udi_write_tx_buf>


				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P1A,
    48f2:	39 a9       	ldd	r19, Y+49	; 0x31
    48f4:	3f 93       	push	r19
    48f6:	78 a9       	ldd	r23, Y+48	; 0x30
    48f8:	7f 93       	push	r23
    48fa:	aa 89       	ldd	r26, Y+18	; 0x12
    48fc:	bb 89       	ldd	r27, Y+19	; 0x13
    48fe:	bd 01       	movw	r22, r26
    4900:	bb 0f       	add	r27, r27
    4902:	88 0b       	sbc	r24, r24
    4904:	99 0b       	sbc	r25, r25
    4906:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    490a:	20 e0       	ldi	r18, 0x00	; 0
    490c:	30 e0       	ldi	r19, 0x00	; 0
    490e:	4a e7       	ldi	r20, 0x7A	; 122
    4910:	54 e4       	ldi	r21, 0x44	; 68
    4912:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    4916:	9f 93       	push	r25
    4918:	8f 93       	push	r24
    491a:	7f 93       	push	r23
    491c:	6f 93       	push	r22
    491e:	bf a5       	ldd	r27, Y+47	; 0x2f
    4920:	bf 93       	push	r27
    4922:	ee a5       	ldd	r30, Y+46	; 0x2e
    4924:	ef 93       	push	r30
    4926:	28 89       	ldd	r18, Y+16	; 0x10
    4928:	39 89       	ldd	r19, Y+17	; 0x11
    492a:	b9 01       	movw	r22, r18
    492c:	33 0f       	add	r19, r19
    492e:	88 0b       	sbc	r24, r24
    4930:	99 0b       	sbc	r25, r25
    4932:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	4a e7       	ldi	r20, 0x7A	; 122
    493c:	54 e4       	ldi	r21, 0x44	; 68
    493e:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    4942:	9f 93       	push	r25
    4944:	8f 93       	push	r24
    4946:	7f 93       	push	r23
    4948:	6f 93       	push	r22
    494a:	8d ee       	ldi	r24, 0xED	; 237
    494c:	95 e0       	ldi	r25, 0x05	; 5
    494e:	9f 93       	push	r25
    4950:	8f 93       	push	r24
    4952:	1f 92       	push	r1
    4954:	80 e4       	ldi	r24, 0x40	; 64
    4956:	8f 93       	push	r24
    4958:	8b e1       	ldi	r24, 0x1B	; 27
    495a:	95 e2       	ldi	r25, 0x25	; 37
    495c:	9f 93       	push	r25
    495e:	8f 93       	push	r24
    4960:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
				l_twi1_gyro_1_accel_x_mg / 1000.f, l_twi1_gyro_1_accel_x,
				l_twi1_gyro_1_accel_y_mg / 1000.f, l_twi1_gyro_1_accel_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4964:	cd bf       	out	0x3d, r28	; 61
    4966:	de bf       	out	0x3e, r29	; 62
    4968:	81 34       	cpi	r24, 0x41	; 65
    496a:	91 05       	cpc	r25, r1
    496c:	10 f0       	brcs	.+4      	; 0x4972 <task_usb+0x5f4>
    496e:	80 e4       	ldi	r24, 0x40	; 64
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	40 e0       	ldi	r20, 0x00	; 0
    4974:	68 2f       	mov	r22, r24
    4976:	8b e1       	ldi	r24, 0x1B	; 27
    4978:	95 e2       	ldi	r25, 0x25	; 37
    497a:	18 dc       	rcall	.-2000   	; 0x41ac <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P1B,
    497c:	bb a9       	ldd	r27, Y+51	; 0x33
    497e:	bf 93       	push	r27
    4980:	ea a9       	ldd	r30, Y+50	; 0x32
    4982:	ef 93       	push	r30
    4984:	2c 89       	ldd	r18, Y+20	; 0x14
    4986:	3d 89       	ldd	r19, Y+21	; 0x15
    4988:	b9 01       	movw	r22, r18
    498a:	33 0f       	add	r19, r19
    498c:	88 0b       	sbc	r24, r24
    498e:	99 0b       	sbc	r25, r25
    4990:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	30 e0       	ldi	r19, 0x00	; 0
    4998:	4a e7       	ldi	r20, 0x7A	; 122
    499a:	54 e4       	ldi	r21, 0x44	; 68
    499c:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    49a0:	9f 93       	push	r25
    49a2:	8f 93       	push	r24
    49a4:	7f 93       	push	r23
    49a6:	6f 93       	push	r22
    49a8:	86 ed       	ldi	r24, 0xD6	; 214
    49aa:	95 e0       	ldi	r25, 0x05	; 5
    49ac:	9f 93       	push	r25
    49ae:	8f 93       	push	r24
    49b0:	1f 92       	push	r1
    49b2:	80 e4       	ldi	r24, 0x40	; 64
    49b4:	8f 93       	push	r24
    49b6:	8b e1       	ldi	r24, 0x1B	; 27
    49b8:	95 e2       	ldi	r25, 0x25	; 37
    49ba:	9f 93       	push	r25
    49bc:	8f 93       	push	r24
    49be:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
				l_twi1_gyro_1_accel_z_mg / 1000.f, l_twi1_gyro_1_accel_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    49c2:	81 34       	cpi	r24, 0x41	; 65
    49c4:	91 05       	cpc	r25, r1
    49c6:	10 f0       	brcs	.+4      	; 0x49cc <task_usb+0x64e>
    49c8:	80 e4       	ldi	r24, 0x40	; 64
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	40 e0       	ldi	r20, 0x00	; 0
    49ce:	68 2f       	mov	r22, r24
    49d0:	8b e1       	ldi	r24, 0x1B	; 27
    49d2:	95 e2       	ldi	r25, 0x25	; 37
    49d4:	eb db       	rcall	.-2090   	; 0x41ac <udi_write_tx_buf>

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P2A,
    49d6:	3f a9       	ldd	r19, Y+55	; 0x37
    49d8:	3f 93       	push	r19
    49da:	7e a9       	ldd	r23, Y+54	; 0x36
    49dc:	7f 93       	push	r23
    49de:	c7 01       	movw	r24, r14
    49e0:	b6 01       	movw	r22, r12
    49e2:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	4a e7       	ldi	r20, 0x7A	; 122
    49ec:	54 e4       	ldi	r21, 0x44	; 68
    49ee:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    49f2:	9f 93       	push	r25
    49f4:	8f 93       	push	r24
    49f6:	7f 93       	push	r23
    49f8:	6f 93       	push	r22
    49fa:	cd a8       	ldd	r12, Y+53	; 0x35
    49fc:	cf 92       	push	r12
    49fe:	dc a8       	ldd	r13, Y+52	; 0x34
    4a00:	df 92       	push	r13
    4a02:	6e 89       	ldd	r22, Y+22	; 0x16
    4a04:	7f 89       	ldd	r23, Y+23	; 0x17
    4a06:	88 8d       	ldd	r24, Y+24	; 0x18
    4a08:	99 8d       	ldd	r25, Y+25	; 0x19
    4a0a:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	4a e7       	ldi	r20, 0x7A	; 122
    4a14:	54 e4       	ldi	r21, 0x44	; 68
    4a16:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    4a1a:	9f 93       	push	r25
    4a1c:	8f 93       	push	r24
    4a1e:	7f 93       	push	r23
    4a20:	6f 93       	push	r22
    4a22:	87 ea       	ldi	r24, 0xA7	; 167
    4a24:	95 e0       	ldi	r25, 0x05	; 5
    4a26:	9f 93       	push	r25
    4a28:	8f 93       	push	r24
    4a2a:	1f 92       	push	r1
    4a2c:	80 e4       	ldi	r24, 0x40	; 64
    4a2e:	8f 93       	push	r24
    4a30:	8b e1       	ldi	r24, 0x1B	; 27
    4a32:	95 e2       	ldi	r25, 0x25	; 37
    4a34:	9f 93       	push	r25
    4a36:	8f 93       	push	r24
    4a38:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
				l_twi1_gyro_1_gyro_x_mdps / 1000.f, l_twi1_gyro_1_gyro_x,
				l_twi1_gyro_1_gyro_y_mdps / 1000.f, l_twi1_gyro_1_gyro_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4a3c:	81 34       	cpi	r24, 0x41	; 65
    4a3e:	91 05       	cpc	r25, r1
    4a40:	10 f0       	brcs	.+4      	; 0x4a46 <task_usb+0x6c8>
    4a42:	80 e4       	ldi	r24, 0x40	; 64
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	40 e0       	ldi	r20, 0x00	; 0
    4a48:	68 2f       	mov	r22, r24
    4a4a:	8b e1       	ldi	r24, 0x1B	; 27
    4a4c:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P2B,
    4a4e:	ae db       	rcall	.-2212   	; 0x41ac <udi_write_tx_buf>
    4a50:	e9 ac       	ldd	r14, Y+57	; 0x39
    4a52:	ef 92       	push	r14
    4a54:	f8 ac       	ldd	r15, Y+56	; 0x38
    4a56:	ff 92       	push	r15
    4a58:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4a5a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4a5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4a5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4a60:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    4a64:	20 e0       	ldi	r18, 0x00	; 0
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	4a e7       	ldi	r20, 0x7A	; 122
    4a6a:	54 e4       	ldi	r21, 0x44	; 68
    4a6c:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    4a70:	9f 93       	push	r25
    4a72:	8f 93       	push	r24
    4a74:	7f 93       	push	r23
    4a76:	6f 93       	push	r22
    4a78:	8f e8       	ldi	r24, 0x8F	; 143
    4a7a:	95 e0       	ldi	r25, 0x05	; 5
    4a7c:	9f 93       	push	r25
    4a7e:	8f 93       	push	r24
    4a80:	1f 92       	push	r1
    4a82:	80 e4       	ldi	r24, 0x40	; 64
    4a84:	8f 93       	push	r24
    4a86:	8b e1       	ldi	r24, 0x1B	; 27
    4a88:	95 e2       	ldi	r25, 0x25	; 37
    4a8a:	9f 93       	push	r25
    4a8c:	8f 93       	push	r24
    4a8e:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
				l_twi1_gyro_1_gyro_z_mdps / 1000.f, l_twi1_gyro_1_gyro_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4a92:	cd bf       	out	0x3d, r28	; 61
    4a94:	de bf       	out	0x3e, r29	; 62
    4a96:	81 34       	cpi	r24, 0x41	; 65
    4a98:	91 05       	cpc	r25, r1
    4a9a:	10 f0       	brcs	.+4      	; 0x4aa0 <task_usb+0x722>
    4a9c:	80 e4       	ldi	r24, 0x40	; 64
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	40 e0       	ldi	r20, 0x00	; 0
    4aa2:	68 2f       	mov	r22, r24
    4aa4:	8b e1       	ldi	r24, 0x1B	; 27
    4aa6:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P3A,
    4aa8:	81 db       	rcall	.-2302   	; 0x41ac <udi_write_tx_buf>
    4aaa:	cf ac       	ldd	r12, Y+63	; 0x3f
    4aac:	cf 92       	push	r12
    4aae:	de ac       	ldd	r13, Y+62	; 0x3e
    4ab0:	df 92       	push	r13
    4ab2:	6c a1       	ldd	r22, Y+36	; 0x24
    4ab4:	7d a1       	ldd	r23, Y+37	; 0x25
    4ab6:	8e a1       	ldd	r24, Y+38	; 0x26
    4ab8:	9f a1       	ldd	r25, Y+39	; 0x27
    4aba:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    4abe:	20 e0       	ldi	r18, 0x00	; 0
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
    4ac2:	4a e7       	ldi	r20, 0x7A	; 122
    4ac4:	54 e4       	ldi	r21, 0x44	; 68
    4ac6:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    4aca:	9f 93       	push	r25
    4acc:	8f 93       	push	r24
    4ace:	7f 93       	push	r23
    4ad0:	6f 93       	push	r22
    4ad2:	ed ac       	ldd	r14, Y+61	; 0x3d
    4ad4:	ef 92       	push	r14
    4ad6:	fc ac       	ldd	r15, Y+60	; 0x3c
    4ad8:	ff 92       	push	r15
    4ada:	68 a1       	ldd	r22, Y+32	; 0x20
    4adc:	79 a1       	ldd	r23, Y+33	; 0x21
    4ade:	8a a1       	ldd	r24, Y+34	; 0x22
    4ae0:	9b a1       	ldd	r25, Y+35	; 0x23
    4ae2:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    4ae6:	20 e0       	ldi	r18, 0x00	; 0
    4ae8:	30 e0       	ldi	r19, 0x00	; 0
    4aea:	4a e7       	ldi	r20, 0x7A	; 122
    4aec:	54 e4       	ldi	r21, 0x44	; 68
    4aee:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    4af2:	9f 93       	push	r25
    4af4:	8f 93       	push	r24
    4af6:	7f 93       	push	r23
    4af8:	6f 93       	push	r22
    4afa:	82 e6       	ldi	r24, 0x62	; 98
    4afc:	95 e0       	ldi	r25, 0x05	; 5
    4afe:	9f 93       	push	r25
    4b00:	8f 93       	push	r24
    4b02:	1f 92       	push	r1
    4b04:	80 e4       	ldi	r24, 0x40	; 64
    4b06:	8f 93       	push	r24
    4b08:	8b e1       	ldi	r24, 0x1B	; 27
    4b0a:	95 e2       	ldi	r25, 0x25	; 37
    4b0c:	9f 93       	push	r25
    4b0e:	8f 93       	push	r24
				l_twi1_gyro_2_mag_x_nT / 1000.f, l_twi1_gyro_2_mag_x,
				l_twi1_gyro_2_mag_y_nT / 1000.f, l_twi1_gyro_2_mag_y);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4b10:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    4b14:	81 34       	cpi	r24, 0x41	; 65
    4b16:	91 05       	cpc	r25, r1
    4b18:	10 f0       	brcs	.+4      	; 0x4b1e <task_usb+0x7a0>
    4b1a:	80 e4       	ldi	r24, 0x40	; 64
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	40 e0       	ldi	r20, 0x00	; 0
    4b20:	68 2f       	mov	r22, r24
    4b22:	8b e1       	ldi	r24, 0x1B	; 27
    4b24:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P3B,
    4b26:	42 db       	rcall	.-2428   	; 0x41ac <udi_write_tx_buf>
    4b28:	22 96       	adiw	r28, 0x02	; 2
    4b2a:	cf ac       	ldd	r12, Y+63	; 0x3f
    4b2c:	22 97       	sbiw	r28, 0x02	; 2
    4b2e:	cf 92       	push	r12
    4b30:	21 96       	adiw	r28, 0x01	; 1
    4b32:	df ac       	ldd	r13, Y+63	; 0x3f
    4b34:	21 97       	sbiw	r28, 0x01	; 1
    4b36:	df 92       	push	r13
    4b38:	68 a5       	ldd	r22, Y+40	; 0x28
    4b3a:	79 a5       	ldd	r23, Y+41	; 0x29
    4b3c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b3e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b40:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    4b44:	20 e0       	ldi	r18, 0x00	; 0
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	4a e7       	ldi	r20, 0x7A	; 122
    4b4a:	54 e4       	ldi	r21, 0x44	; 68
    4b4c:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    4b50:	9f 93       	push	r25
    4b52:	8f 93       	push	r24
    4b54:	7f 93       	push	r23
    4b56:	6f 93       	push	r22
    4b58:	8a e4       	ldi	r24, 0x4A	; 74
    4b5a:	95 e0       	ldi	r25, 0x05	; 5
    4b5c:	9f 93       	push	r25
    4b5e:	8f 93       	push	r24
    4b60:	1f 92       	push	r1
    4b62:	80 e4       	ldi	r24, 0x40	; 64
    4b64:	8f 93       	push	r24
    4b66:	8b e1       	ldi	r24, 0x1B	; 27
    4b68:	95 e2       	ldi	r25, 0x25	; 37
    4b6a:	9f 93       	push	r25
    4b6c:	8f 93       	push	r24
				l_twi1_gyro_2_mag_z_nT / 1000.f, l_twi1_gyro_2_mag_z);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4b6e:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    4b72:	81 34       	cpi	r24, 0x41	; 65
    4b74:	91 05       	cpc	r25, r1
    4b76:	10 f0       	brcs	.+4      	; 0x4b7c <task_usb+0x7fe>
    4b78:	80 e4       	ldi	r24, 0x40	; 64
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	40 e0       	ldi	r20, 0x00	; 0
    4b7e:	68 2f       	mov	r22, r24
    4b80:	8b e1       	ldi	r24, 0x1B	; 27
    4b82:	95 e2       	ldi	r25, 0x25	; 37

				len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_INFO_PART_L2P4,
    4b84:	13 db       	rcall	.-2522   	; 0x41ac <udi_write_tx_buf>
    4b86:	eb ac       	ldd	r14, Y+59	; 0x3b
    4b88:	ef 92       	push	r14
    4b8a:	fa ac       	ldd	r15, Y+58	; 0x3a
    4b8c:	ff 92       	push	r15
    4b8e:	ce 8c       	ldd	r12, Y+30	; 0x1e
    4b90:	df 8c       	ldd	r13, Y+31	; 0x1f
    4b92:	b6 01       	movw	r22, r12
    4b94:	dd 0c       	add	r13, r13
    4b96:	88 0b       	sbc	r24, r24
    4b98:	99 0b       	sbc	r25, r25
    4b9a:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    4b9e:	20 e0       	ldi	r18, 0x00	; 0
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	48 ec       	ldi	r20, 0xC8	; 200
    4ba4:	52 e4       	ldi	r21, 0x42	; 66
    4ba6:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    4baa:	9f 93       	push	r25
    4bac:	8f 93       	push	r24
    4bae:	7f 93       	push	r23
    4bb0:	6f 93       	push	r22
    4bb2:	8b e2       	ldi	r24, 0x2B	; 43
    4bb4:	95 e0       	ldi	r25, 0x05	; 5
    4bb6:	9f 93       	push	r25
    4bb8:	8f 93       	push	r24
    4bba:	1f 92       	push	r1
    4bbc:	80 e4       	ldi	r24, 0x40	; 64
    4bbe:	8f 93       	push	r24
    4bc0:	8b e1       	ldi	r24, 0x1B	; 27
    4bc2:	95 e2       	ldi	r25, 0x25	; 37
    4bc4:	9f 93       	push	r25
    4bc6:	8f 93       	push	r24
				l_twi1_gyro_1_temp_deg_100 / 100.f, l_twi1_gyro_1_temp);
				udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    4bc8:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    4bcc:	cd bf       	out	0x3d, r28	; 61
    4bce:	de bf       	out	0x3e, r29	; 62
    4bd0:	81 34       	cpi	r24, 0x41	; 65
    4bd2:	91 05       	cpc	r25, r1
    4bd4:	10 f0       	brcs	.+4      	; 0x4bda <task_usb+0x85c>
    4bd6:	80 e4       	ldi	r24, 0x40	; 64
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	40 e0       	ldi	r20, 0x00	; 0
    4bdc:	68 2f       	mov	r22, r24
    4bde:	8b e1       	ldi	r24, 0x1B	; 27
    4be0:	95 e2       	ldi	r25, 0x25	; 37

				/* Store last time of status line */
				usb_last = now;
    4be2:	e4 da       	rcall	.-2616   	; 0x41ac <udi_write_tx_buf>
    4be4:	40 92 ac 21 	sts	0x21AC, r4	; 0x8021ac <__data_end>
    4be8:	50 92 ad 21 	sts	0x21AD, r5	; 0x8021ad <__data_end+0x1>
    4bec:	60 92 ae 21 	sts	0x21AE, r6	; 0x8021ae <__data_end+0x2>
    4bf0:	70 92 af 21 	sts	0x21AF, r7	; 0x8021af <__data_end+0x3>
			}
		}
	}
}
    4bf4:	cd 5b       	subi	r28, 0xBD	; 189
    4bf6:	df 4f       	sbci	r29, 0xFF	; 255
    4bf8:	cd bf       	out	0x3d, r28	; 61
    4bfa:	de bf       	out	0x3e, r29	; 62
    4bfc:	df 91       	pop	r29
    4bfe:	cf 91       	pop	r28
    4c00:	1f 91       	pop	r17
    4c02:	0f 91       	pop	r16
    4c04:	ff 90       	pop	r15
    4c06:	ef 90       	pop	r14
    4c08:	df 90       	pop	r13
    4c0a:	cf 90       	pop	r12
    4c0c:	bf 90       	pop	r11
    4c0e:	af 90       	pop	r10
    4c10:	9f 90       	pop	r9
    4c12:	8f 90       	pop	r8
    4c14:	7f 90       	pop	r7
    4c16:	6f 90       	pop	r6
    4c18:	5f 90       	pop	r5
    4c1a:	4f 90       	pop	r4
    4c1c:	3f 90       	pop	r3
    4c1e:	2f 90       	pop	r2
    4c20:	08 95       	ret

00004c22 <nvm_init>:
	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    4c22:	83 30       	cpi	r24, 0x03	; 3
    4c24:	10 f4       	brcc	.+4      	; 0x4c2a <nvm_init+0x8>
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	08 95       	ret
    4c2a:	88 ef       	ldi	r24, 0xF8	; 248
    4c2c:	08 95       	ret

00004c2e <nvm_read>:

status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    4c2e:	ef 92       	push	r14
    4c30:	ff 92       	push	r15
    4c32:	0f 93       	push	r16
    4c34:	1f 93       	push	r17
    4c36:	e8 2f       	mov	r30, r24
    4c38:	db 01       	movw	r26, r22
    4c3a:	ca 01       	movw	r24, r20
    4c3c:	b9 01       	movw	r22, r18
	switch (mem) {
    4c3e:	e1 30       	cpi	r30, 0x01	; 1
    4c40:	61 f0       	breq	.+24     	; 0x4c5a <nvm_read+0x2c>
    4c42:	18 f0       	brcs	.+6      	; 0x4c4a <nvm_read+0x1c>
    4c44:	e2 30       	cpi	r30, 0x02	; 2
    4c46:	89 f0       	breq	.+34     	; 0x4c6a <nvm_read+0x3c>
    4c48:	15 c0       	rjmp	.+42     	; 0x4c74 <nvm_read+0x46>
	case INT_FLASH:
		nvm_flash_read_buffer((flash_addr_t)address, buffer,
    4c4a:	97 01       	movw	r18, r14
    4c4c:	ab 01       	movw	r20, r22
    4c4e:	bc 01       	movw	r22, r24
    4c50:	cd 01       	movw	r24, r26
    4c52:	0e 94 1d 7e 	call	0xfc3a	; 0xfc3a <nvm_flash_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4c56:	80 e0       	ldi	r24, 0x00	; 0
{
	switch (mem) {
	case INT_FLASH:
		nvm_flash_read_buffer((flash_addr_t)address, buffer,
				(uint16_t)len);
		break;
    4c58:	0e c0       	rjmp	.+28     	; 0x4c76 <nvm_read+0x48>

	case INT_USERPAGE:
		nvm_user_sig_read_buffer((flash_addr_t)address, buffer,
    4c5a:	97 01       	movw	r18, r14
    4c5c:	ab 01       	movw	r20, r22
    4c5e:	bc 01       	movw	r22, r24
    4c60:	cd 01       	movw	r24, r26
    4c62:	0e 94 35 7e 	call	0xfc6a	; 0xfc6a <nvm_user_sig_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4c66:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_USERPAGE:
		nvm_user_sig_read_buffer((flash_addr_t)address, buffer,
				(uint16_t)len);
		break;
    4c68:	06 c0       	rjmp	.+12     	; 0x4c76 <nvm_read+0x48>

	case INT_EEPROM:
		nvm_eeprom_read_buffer((eeprom_addr_t)address, buffer,
    4c6a:	a7 01       	movw	r20, r14
    4c6c:	0e 94 49 7d 	call	0xfa92	; 0xfa92 <nvm_eeprom_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4c70:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_EEPROM:
		nvm_eeprom_read_buffer((eeprom_addr_t)address, buffer,
				(uint16_t)len);
		break;
    4c72:	01 c0       	rjmp	.+2      	; 0x4c76 <nvm_read+0x48>
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
    4c74:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    4c76:	1f 91       	pop	r17
    4c78:	0f 91       	pop	r16
    4c7a:	ff 90       	pop	r15
    4c7c:	ef 90       	pop	r14
    4c7e:	08 95       	ret

00004c80 <nvm_write>:

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    4c80:	ef 92       	push	r14
    4c82:	ff 92       	push	r15
    4c84:	0f 93       	push	r16
    4c86:	1f 93       	push	r17
    4c88:	e8 2f       	mov	r30, r24
    4c8a:	db 01       	movw	r26, r22
    4c8c:	ca 01       	movw	r24, r20
    4c8e:	b9 01       	movw	r22, r18
    4c90:	a8 01       	movw	r20, r16
    4c92:	97 01       	movw	r18, r14
	switch (mem) {
    4c94:	e1 30       	cpi	r30, 0x01	; 1
    4c96:	61 f0       	breq	.+24     	; 0x4cb0 <nvm_write+0x30>
    4c98:	18 f0       	brcs	.+6      	; 0x4ca0 <nvm_write+0x20>
    4c9a:	e2 30       	cpi	r30, 0x02	; 2
    4c9c:	89 f0       	breq	.+34     	; 0x4cc0 <nvm_write+0x40>
    4c9e:	15 c0       	rjmp	.+42     	; 0x4cca <nvm_write+0x4a>
	case INT_FLASH:
		nvm_flash_erase_and_write_buffer((flash_addr_t)address,
    4ca0:	01 e0       	ldi	r16, 0x01	; 1
    4ca2:	ab 01       	movw	r20, r22
    4ca4:	bc 01       	movw	r22, r24
    4ca6:	cd 01       	movw	r24, r26
    4ca8:	0e 94 f7 7e 	call	0xfdee	; 0xfdee <nvm_flash_erase_and_write_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4cac:	80 e0       	ldi	r24, 0x00	; 0
{
	switch (mem) {
	case INT_FLASH:
		nvm_flash_erase_and_write_buffer((flash_addr_t)address,
				(const void *)buffer, len, true);
		break;
    4cae:	0e c0       	rjmp	.+28     	; 0x4ccc <nvm_write+0x4c>

	case INT_USERPAGE:
		nvm_user_sig_write_buffer((flash_addr_t)address,
    4cb0:	01 e0       	ldi	r16, 0x01	; 1
    4cb2:	ab 01       	movw	r20, r22
    4cb4:	bc 01       	movw	r22, r24
    4cb6:	cd 01       	movw	r24, r26
    4cb8:	0e 94 52 7e 	call	0xfca4	; 0xfca4 <nvm_user_sig_write_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4cbc:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_USERPAGE:
		nvm_user_sig_write_buffer((flash_addr_t)address,
				(const void *)buffer, len, true);
		break;
    4cbe:	06 c0       	rjmp	.+12     	; 0x4ccc <nvm_write+0x4c>

	case INT_EEPROM:
		nvm_eeprom_erase_and_write_buffer((eeprom_addr_t)address,
    4cc0:	a7 01       	movw	r20, r14
    4cc2:	0e 94 dd 7d 	call	0xfbba	; 0xfbba <nvm_eeprom_erase_and_write_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4cc6:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_EEPROM:
		nvm_eeprom_erase_and_write_buffer((eeprom_addr_t)address,
				(const void *)buffer, len);
		break;
    4cc8:	01 c0       	rjmp	.+2      	; 0x4ccc <nvm_write+0x4c>
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
    4cca:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    4ccc:	1f 91       	pop	r17
    4cce:	0f 91       	pop	r16
    4cd0:	ff 90       	pop	r15
    4cd2:	ef 90       	pop	r14
    4cd4:	08 95       	ret

00004cd6 <fifo_init>:
 */

#include "fifo.h"

int fifo_init(fifo_desc_t *fifo_desc, void *buffer, uint8_t size)
{
    4cd6:	fc 01       	movw	r30, r24
	// ... and must fit in a uint8_t. Since the read and write indexes are using a
	// double-index range implementation, the max FIFO size is thus 128 items.
	Assert (size <= 128);

	// Fifo starts empty.
	fifo_desc->read_index  = 0;
    4cd8:	12 82       	std	Z+2, r1	; 0x02
	fifo_desc->write_index = 0;
    4cda:	13 82       	std	Z+3, r1	; 0x03

	// Save the size parameter.
	fifo_desc->size = size;
    4cdc:	44 83       	std	Z+4, r20	; 0x04

	// Create a mask to speed up the FIFO management (index swapping).
	fifo_desc->mask = (2 * (uint16_t)size) - 1;
    4cde:	44 0f       	add	r20, r20
    4ce0:	41 50       	subi	r20, 0x01	; 1
    4ce2:	45 83       	std	Z+5, r20	; 0x05

	// Save the buffer pointer.
	fifo_desc->buffer.u8ptr = buffer;
    4ce4:	60 83       	st	Z, r22
    4ce6:	71 83       	std	Z+1, r23	; 0x01

	return FIFO_OK;
}
    4ce8:	80 e0       	ldi	r24, 0x00	; 0
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	08 95       	ret

00004cee <dma_interrupt>:
 * dma_set_callback() function.
 *
 * \param num DMA channel number to handle interrupt for
 */
static void dma_interrupt(const dma_channel_num_t num)
{
    4cee:	cf 93       	push	r28
    4cf0:	df 93       	push	r29
	enum dma_channel_status status;
	DMA_CH_t *channel;

	channel = dma_get_channel_address_from_num(num);
    4cf2:	48 2f       	mov	r20, r24
    4cf4:	50 e0       	ldi	r21, 0x00	; 0
    4cf6:	fa 01       	movw	r30, r20
    4cf8:	71 96       	adiw	r30, 0x11	; 17
    4cfa:	e2 95       	swap	r30
    4cfc:	f2 95       	swap	r31
    4cfe:	f0 7f       	andi	r31, 0xF0	; 240
    4d00:	fe 27       	eor	r31, r30
    4d02:	e0 7f       	andi	r30, 0xF0	; 240
    4d04:	fe 27       	eor	r31, r30
 * \return Channel status given by a \ref dma_channel_status
 */
static inline enum dma_channel_status dma_get_channel_status(
		dma_channel_num_t num)
{
	uint8_t busy_pending    = DMA.STATUS;
    4d06:	a0 e0       	ldi	r26, 0x00	; 0
    4d08:	b1 e0       	ldi	r27, 0x01	; 1
    4d0a:	14 96       	adiw	r26, 0x04	; 4
    4d0c:	9c 91       	ld	r25, X
    4d0e:	14 97       	sbiw	r26, 0x04	; 4
	uint8_t error_completed = DMA.INTFLAGS;
    4d10:	13 96       	adiw	r26, 0x03	; 3
    4d12:	6c 91       	ld	r22, X

	/*
	 * Check lower and upper nibble of INTFLAGS register to find possible
	 * error or transfer completed status.
	 */
	error_completed &= (1 << num) | (1 << (num + 4));
    4d14:	da 01       	movw	r26, r20
    4d16:	14 96       	adiw	r26, 0x04	; 4
    4d18:	21 e0       	ldi	r18, 0x01	; 1
    4d1a:	30 e0       	ldi	r19, 0x00	; 0
    4d1c:	e9 01       	movw	r28, r18
    4d1e:	08 2e       	mov	r0, r24
    4d20:	02 c0       	rjmp	.+4      	; 0x4d26 <dma_interrupt+0x38>
    4d22:	cc 0f       	add	r28, r28
    4d24:	dd 1f       	adc	r29, r29
    4d26:	0a 94       	dec	r0
    4d28:	e2 f7       	brpl	.-8      	; 0x4d22 <dma_interrupt+0x34>
    4d2a:	0a 2e       	mov	r0, r26
    4d2c:	02 c0       	rjmp	.+4      	; 0x4d32 <dma_interrupt+0x44>
    4d2e:	22 0f       	add	r18, r18
    4d30:	33 1f       	adc	r19, r19
    4d32:	0a 94       	dec	r0
    4d34:	e2 f7       	brpl	.-8      	; 0x4d2e <dma_interrupt+0x40>
    4d36:	2c 2b       	or	r18, r28
    4d38:	62 23       	and	r22, r18
	if (error_completed & (1 << (num + 4))) {
    4d3a:	70 e0       	ldi	r23, 0x00	; 0
    4d3c:	eb 01       	movw	r28, r22
    4d3e:	0a 2e       	mov	r0, r26
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <dma_interrupt+0x58>
    4d42:	d5 95       	asr	r29
    4d44:	c7 95       	ror	r28
    4d46:	0a 94       	dec	r0
    4d48:	e2 f7       	brpl	.-8      	; 0x4d42 <dma_interrupt+0x54>
    4d4a:	c0 fd       	sbrc	r28, 0
    4d4c:	1a c0       	rjmp	.+52     	; 0x4d82 <dma_interrupt+0x94>
		return DMA_CH_TRANSFER_ERROR;
	} else if (error_completed & (1 << num)) {
    4d4e:	08 2e       	mov	r0, r24
    4d50:	02 c0       	rjmp	.+4      	; 0x4d56 <dma_interrupt+0x68>
    4d52:	75 95       	asr	r23
    4d54:	67 95       	ror	r22
    4d56:	0a 94       	dec	r0
    4d58:	e2 f7       	brpl	.-8      	; 0x4d52 <dma_interrupt+0x64>
    4d5a:	60 fd       	sbrc	r22, 0
    4d5c:	14 c0       	rjmp	.+40     	; 0x4d86 <dma_interrupt+0x98>

	/*
	 * Check lower and upper nibble of STATUS register to find possible
	 * busy or pending completed status.
	 */
	busy_pending &= (1 << num) | (1 << (num + 4));
    4d5e:	29 23       	and	r18, r25
	if (busy_pending & (1 << (num + 4))) {
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    4d62:	b9 01       	movw	r22, r18
    4d64:	02 c0       	rjmp	.+4      	; 0x4d6a <dma_interrupt+0x7c>
    4d66:	75 95       	asr	r23
    4d68:	67 95       	ror	r22
    4d6a:	aa 95       	dec	r26
    4d6c:	e2 f7       	brpl	.-8      	; 0x4d66 <dma_interrupt+0x78>
    4d6e:	60 fd       	sbrc	r22, 0
    4d70:	0c c0       	rjmp	.+24     	; 0x4d8a <dma_interrupt+0x9c>
	 * Check lower and upper nibble of INTFLAGS register to find possible
	 * error or transfer completed status.
	 */
	error_completed &= (1 << num) | (1 << (num + 4));
	if (error_completed & (1 << (num + 4))) {
		return DMA_CH_TRANSFER_ERROR;
    4d72:	02 c0       	rjmp	.+4      	; 0x4d78 <dma_interrupt+0x8a>
    4d74:	35 95       	asr	r19
    4d76:	27 95       	ror	r18
    4d78:	8a 95       	dec	r24
    4d7a:	e2 f7       	brpl	.-8      	; 0x4d74 <dma_interrupt+0x86>
    4d7c:	82 2f       	mov	r24, r18
    4d7e:	81 70       	andi	r24, 0x01	; 1
    4d80:	05 c0       	rjmp	.+10     	; 0x4d8c <dma_interrupt+0x9e>
    4d82:	84 e0       	ldi	r24, 0x04	; 4
    4d84:	03 c0       	rjmp	.+6      	; 0x4d8c <dma_interrupt+0x9e>
	} else if (error_completed & (1 << num)) {
		return DMA_CH_TRANSFER_COMPLETED;
    4d86:	83 e0       	ldi	r24, 0x03	; 3
    4d88:	01 c0       	rjmp	.+2      	; 0x4d8c <dma_interrupt+0x9e>
	 * Check lower and upper nibble of STATUS register to find possible
	 * busy or pending completed status.
	 */
	busy_pending &= (1 << num) | (1 << (num + 4));
	if (busy_pending & (1 << (num + 4))) {
		return DMA_CH_BUSY;
    4d8a:	82 e0       	ldi	r24, 0x02	; 2
	status  = dma_get_channel_status(num);

	/* Clear all interrupt flags to be sure */
	channel->CTRLB |= DMA_CH_TRNIF_bm | DMA_CH_ERRIF_bm;
    4d8c:	91 81       	ldd	r25, Z+1	; 0x01
    4d8e:	90 63       	ori	r25, 0x30	; 48
    4d90:	91 83       	std	Z+1, r25	; 0x01

	if (dma_data[num].callback) {
    4d92:	44 0f       	add	r20, r20
    4d94:	55 1f       	adc	r21, r21
    4d96:	fa 01       	movw	r30, r20
    4d98:	e9 52       	subi	r30, 0x29	; 41
    4d9a:	f2 4d       	sbci	r31, 0xD2	; 210
    4d9c:	01 90       	ld	r0, Z+
    4d9e:	f0 81       	ld	r31, Z
    4da0:	e0 2d       	mov	r30, r0
    4da2:	30 97       	sbiw	r30, 0x00	; 0
    4da4:	09 f0       	breq	.+2      	; 0x4da8 <dma_interrupt+0xba>
		dma_data[num].callback(status);
    4da6:	19 95       	eicall
	}
}
    4da8:	df 91       	pop	r29
    4daa:	cf 91       	pop	r28
    4dac:	08 95       	ret

00004dae <dma_enable>:
 *
 * \note This function will do a soft reset of the DMA controller, clearing all
 * previous configuration.
 */
void dma_enable(void)
{
    4dae:	cf 93       	push	r28
    4db0:	df 93       	push	r29
    4db2:	1f 92       	push	r1
    4db4:	cd b7       	in	r28, 0x3d	; 61
    4db6:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4db8:	61 e0       	ldi	r22, 0x01	; 1
    4dba:	80 e0       	ldi	r24, 0x00	; 0
    4dbc:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4dc0:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    4dc4:	8f 3f       	cpi	r24, 0xFF	; 255
    4dc6:	09 f4       	brne	.+2      	; 0x4dca <dma_enable+0x1c>
    4dc8:	ff cf       	rjmp	.-2      	; 0x4dc8 <dma_enable+0x1a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4dca:	8f b7       	in	r24, 0x3f	; 63
    4dcc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4dce:	f8 94       	cli
	return flags;
    4dd0:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4dd2:	eb e7       	ldi	r30, 0x7B	; 123
    4dd4:	fe e2       	ldi	r31, 0x2E	; 46
    4dd6:	81 81       	ldd	r24, Z+1	; 0x01
    4dd8:	8f 5f       	subi	r24, 0xFF	; 255
    4dda:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4ddc:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_lock_mode(SLEEPMGR_IDLE);

	/* Reset DMA controller just to make sure everything is from scratch */
	DMA.CTRL = DMA_RESET_bm;
    4dde:	e0 e0       	ldi	r30, 0x00	; 0
    4de0:	f1 e0       	ldi	r31, 0x01	; 1
    4de2:	80 e4       	ldi	r24, 0x40	; 64
    4de4:	80 83       	st	Z, r24
	DMA.CTRL = DMA_ENABLE_bm;
    4de6:	80 e8       	ldi	r24, 0x80	; 128
    4de8:	80 83       	st	Z, r24
}
    4dea:	0f 90       	pop	r0
    4dec:	df 91       	pop	r29
    4dee:	cf 91       	pop	r28
    4df0:	08 95       	ret

00004df2 <dma_disable>:

/**
 * \brief Disable DMA controller
 */
void dma_disable(void)
{
    4df2:	cf 93       	push	r28
    4df4:	df 93       	push	r29
    4df6:	1f 92       	push	r1
    4df8:	cd b7       	in	r28, 0x3d	; 61
    4dfa:	de b7       	in	r29, 0x3e	; 62
	DMA.CTRL = 0;
    4dfc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4e00:	61 e0       	ldi	r22, 0x01	; 1
    4e02:	80 e0       	ldi	r24, 0x00	; 0
    4e04:	0e 94 cf 74 	call	0xe99e	; 0xe99e <sysclk_disable_module>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4e08:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    4e0c:	81 11       	cpse	r24, r1
    4e0e:	01 c0       	rjmp	.+2      	; 0x4e12 <dma_disable+0x20>
    4e10:	ff cf       	rjmp	.-2      	; 0x4e10 <dma_disable+0x1e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4e12:	8f b7       	in	r24, 0x3f	; 63
    4e14:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4e16:	f8 94       	cli
	return flags;
    4e18:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    4e1a:	eb e7       	ldi	r30, 0x7B	; 123
    4e1c:	fe e2       	ldi	r31, 0x2E	; 46
    4e1e:	81 81       	ldd	r24, Z+1	; 0x01
    4e20:	81 50       	subi	r24, 0x01	; 1
    4e22:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4e24:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    4e26:	0f 90       	pop	r0
    4e28:	df 91       	pop	r29
    4e2a:	cf 91       	pop	r28
    4e2c:	08 95       	ret

00004e2e <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    4e2e:	e8 2f       	mov	r30, r24
    4e30:	f0 e0       	ldi	r31, 0x00	; 0
    4e32:	ee 0f       	add	r30, r30
    4e34:	ff 1f       	adc	r31, r31
    4e36:	e9 52       	subi	r30, 0x29	; 41
    4e38:	f2 4d       	sbci	r31, 0xD2	; 210
    4e3a:	60 83       	st	Z, r22
    4e3c:	71 83       	std	Z+1, r23	; 0x01
    4e3e:	08 95       	ret

00004e40 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    4e40:	1f 92       	push	r1
    4e42:	0f 92       	push	r0
    4e44:	0f b6       	in	r0, 0x3f	; 63
    4e46:	0f 92       	push	r0
    4e48:	11 24       	eor	r1, r1
    4e4a:	0b b6       	in	r0, 0x3b	; 59
    4e4c:	0f 92       	push	r0
    4e4e:	2f 93       	push	r18
    4e50:	3f 93       	push	r19
    4e52:	4f 93       	push	r20
    4e54:	5f 93       	push	r21
    4e56:	6f 93       	push	r22
    4e58:	7f 93       	push	r23
    4e5a:	8f 93       	push	r24
    4e5c:	9f 93       	push	r25
    4e5e:	af 93       	push	r26
    4e60:	bf 93       	push	r27
    4e62:	ef 93       	push	r30
    4e64:	ff 93       	push	r31
	dma_interrupt(0);
    4e66:	80 e0       	ldi	r24, 0x00	; 0
    4e68:	42 df       	rcall	.-380    	; 0x4cee <dma_interrupt>
}
    4e6a:	ff 91       	pop	r31
    4e6c:	ef 91       	pop	r30
    4e6e:	bf 91       	pop	r27
    4e70:	af 91       	pop	r26
    4e72:	9f 91       	pop	r25
    4e74:	8f 91       	pop	r24
    4e76:	7f 91       	pop	r23
    4e78:	6f 91       	pop	r22
    4e7a:	5f 91       	pop	r21
    4e7c:	4f 91       	pop	r20
    4e7e:	3f 91       	pop	r19
    4e80:	2f 91       	pop	r18
    4e82:	0f 90       	pop	r0
    4e84:	0b be       	out	0x3b, r0	; 59
    4e86:	0f 90       	pop	r0
    4e88:	0f be       	out	0x3f, r0	; 63
    4e8a:	0f 90       	pop	r0
    4e8c:	1f 90       	pop	r1
    4e8e:	18 95       	reti

00004e90 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    4e90:	1f 92       	push	r1
    4e92:	0f 92       	push	r0
    4e94:	0f b6       	in	r0, 0x3f	; 63
    4e96:	0f 92       	push	r0
    4e98:	11 24       	eor	r1, r1
    4e9a:	0b b6       	in	r0, 0x3b	; 59
    4e9c:	0f 92       	push	r0
    4e9e:	2f 93       	push	r18
    4ea0:	3f 93       	push	r19
    4ea2:	4f 93       	push	r20
    4ea4:	5f 93       	push	r21
    4ea6:	6f 93       	push	r22
    4ea8:	7f 93       	push	r23
    4eaa:	8f 93       	push	r24
    4eac:	9f 93       	push	r25
    4eae:	af 93       	push	r26
    4eb0:	bf 93       	push	r27
    4eb2:	ef 93       	push	r30
    4eb4:	ff 93       	push	r31
	dma_interrupt(1);
    4eb6:	81 e0       	ldi	r24, 0x01	; 1
    4eb8:	1a df       	rcall	.-460    	; 0x4cee <dma_interrupt>
}
    4eba:	ff 91       	pop	r31
    4ebc:	ef 91       	pop	r30
    4ebe:	bf 91       	pop	r27
    4ec0:	af 91       	pop	r26
    4ec2:	9f 91       	pop	r25
    4ec4:	8f 91       	pop	r24
    4ec6:	7f 91       	pop	r23
    4ec8:	6f 91       	pop	r22
    4eca:	5f 91       	pop	r21
    4ecc:	4f 91       	pop	r20
    4ece:	3f 91       	pop	r19
    4ed0:	2f 91       	pop	r18
    4ed2:	0f 90       	pop	r0
    4ed4:	0b be       	out	0x3b, r0	; 59
    4ed6:	0f 90       	pop	r0
    4ed8:	0f be       	out	0x3f, r0	; 63
    4eda:	0f 90       	pop	r0
    4edc:	1f 90       	pop	r1
    4ede:	18 95       	reti

00004ee0 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    4ee0:	1f 92       	push	r1
    4ee2:	0f 92       	push	r0
    4ee4:	0f b6       	in	r0, 0x3f	; 63
    4ee6:	0f 92       	push	r0
    4ee8:	11 24       	eor	r1, r1
    4eea:	0b b6       	in	r0, 0x3b	; 59
    4eec:	0f 92       	push	r0
    4eee:	2f 93       	push	r18
    4ef0:	3f 93       	push	r19
    4ef2:	4f 93       	push	r20
    4ef4:	5f 93       	push	r21
    4ef6:	6f 93       	push	r22
    4ef8:	7f 93       	push	r23
    4efa:	8f 93       	push	r24
    4efc:	9f 93       	push	r25
    4efe:	af 93       	push	r26
    4f00:	bf 93       	push	r27
    4f02:	ef 93       	push	r30
    4f04:	ff 93       	push	r31
	dma_interrupt(2);
    4f06:	82 e0       	ldi	r24, 0x02	; 2
    4f08:	f2 de       	rcall	.-540    	; 0x4cee <dma_interrupt>
}
    4f0a:	ff 91       	pop	r31
    4f0c:	ef 91       	pop	r30
    4f0e:	bf 91       	pop	r27
    4f10:	af 91       	pop	r26
    4f12:	9f 91       	pop	r25
    4f14:	8f 91       	pop	r24
    4f16:	7f 91       	pop	r23
    4f18:	6f 91       	pop	r22
    4f1a:	5f 91       	pop	r21
    4f1c:	4f 91       	pop	r20
    4f1e:	3f 91       	pop	r19
    4f20:	2f 91       	pop	r18
    4f22:	0f 90       	pop	r0
    4f24:	0b be       	out	0x3b, r0	; 59
    4f26:	0f 90       	pop	r0
    4f28:	0f be       	out	0x3f, r0	; 63
    4f2a:	0f 90       	pop	r0
    4f2c:	1f 90       	pop	r1
    4f2e:	18 95       	reti

00004f30 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    4f30:	1f 92       	push	r1
    4f32:	0f 92       	push	r0
    4f34:	0f b6       	in	r0, 0x3f	; 63
    4f36:	0f 92       	push	r0
    4f38:	11 24       	eor	r1, r1
    4f3a:	0b b6       	in	r0, 0x3b	; 59
    4f3c:	0f 92       	push	r0
    4f3e:	2f 93       	push	r18
    4f40:	3f 93       	push	r19
    4f42:	4f 93       	push	r20
    4f44:	5f 93       	push	r21
    4f46:	6f 93       	push	r22
    4f48:	7f 93       	push	r23
    4f4a:	8f 93       	push	r24
    4f4c:	9f 93       	push	r25
    4f4e:	af 93       	push	r26
    4f50:	bf 93       	push	r27
    4f52:	ef 93       	push	r30
    4f54:	ff 93       	push	r31
	dma_interrupt(3);
    4f56:	83 e0       	ldi	r24, 0x03	; 3
    4f58:	ca de       	rcall	.-620    	; 0x4cee <dma_interrupt>
}
    4f5a:	ff 91       	pop	r31
    4f5c:	ef 91       	pop	r30
    4f5e:	bf 91       	pop	r27
    4f60:	af 91       	pop	r26
    4f62:	9f 91       	pop	r25
    4f64:	8f 91       	pop	r24
    4f66:	7f 91       	pop	r23
    4f68:	6f 91       	pop	r22
    4f6a:	5f 91       	pop	r21
    4f6c:	4f 91       	pop	r20
    4f6e:	3f 91       	pop	r19
    4f70:	2f 91       	pop	r18
    4f72:	0f 90       	pop	r0
    4f74:	0b be       	out	0x3b, r0	; 59
    4f76:	0f 90       	pop	r0
    4f78:	0f be       	out	0x3f, r0	; 63
    4f7a:	0f 90       	pop	r0
    4f7c:	1f 90       	pop	r1
    4f7e:	18 95       	reti

00004f80 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    4f80:	cf 93       	push	r28
    4f82:	df 93       	push	r29
    4f84:	1f 92       	push	r1
    4f86:	cd b7       	in	r28, 0x3d	; 61
    4f88:	de b7       	in	r29, 0x3e	; 62
    4f8a:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    4f8c:	e8 2f       	mov	r30, r24
    4f8e:	f0 e0       	ldi	r31, 0x00	; 0
    4f90:	71 96       	adiw	r30, 0x11	; 17
    4f92:	e2 95       	swap	r30
    4f94:	f2 95       	swap	r31
    4f96:	f0 7f       	andi	r31, 0xF0	; 240
    4f98:	fe 27       	eor	r31, r30
    4f9a:	e0 7f       	andi	r30, 0xF0	; 240
    4f9c:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4f9e:	8f b7       	in	r24, 0x3f	; 63
    4fa0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4fa2:	f8 94       	cli
	return flags;
    4fa4:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    4fa6:	19 96       	adiw	r26, 0x09	; 9
    4fa8:	8c 91       	ld	r24, X
    4faa:	19 97       	sbiw	r26, 0x09	; 9
    4fac:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    4fae:	1a 96       	adiw	r26, 0x0a	; 10
    4fb0:	8c 91       	ld	r24, X
    4fb2:	1a 97       	sbiw	r26, 0x0a	; 10
    4fb4:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    4fb6:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    4fb8:	17 96       	adiw	r26, 0x07	; 7
    4fba:	8c 91       	ld	r24, X
    4fbc:	17 97       	sbiw	r26, 0x07	; 7
    4fbe:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    4fc0:	18 96       	adiw	r26, 0x08	; 8
    4fc2:	8c 91       	ld	r24, X
    4fc4:	18 97       	sbiw	r26, 0x08	; 8
    4fc6:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    4fc8:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    4fca:	12 96       	adiw	r26, 0x02	; 2
    4fcc:	8c 91       	ld	r24, X
    4fce:	12 97       	sbiw	r26, 0x02	; 2
    4fd0:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    4fd2:	13 96       	adiw	r26, 0x03	; 3
    4fd4:	8c 91       	ld	r24, X
    4fd6:	13 97       	sbiw	r26, 0x03	; 3
    4fd8:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    4fda:	14 96       	adiw	r26, 0x04	; 4
    4fdc:	2d 91       	ld	r18, X+
    4fde:	3c 91       	ld	r19, X
    4fe0:	15 97       	sbiw	r26, 0x05	; 5
    4fe2:	24 83       	std	Z+4, r18	; 0x04
    4fe4:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    4fe6:	16 96       	adiw	r26, 0x06	; 6
    4fe8:	8c 91       	ld	r24, X
    4fea:	16 97       	sbiw	r26, 0x06	; 6
    4fec:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    4fee:	11 96       	adiw	r26, 0x01	; 1
    4ff0:	8c 91       	ld	r24, X
    4ff2:	11 97       	sbiw	r26, 0x01	; 1
    4ff4:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    4ff6:	8c 91       	ld	r24, X
    4ff8:	8f 77       	andi	r24, 0x7F	; 127
    4ffa:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4ffc:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    4ffe:	0f 90       	pop	r0
    5000:	df 91       	pop	r29
    5002:	cf 91       	pop	r28
    5004:	08 95       	ret

00005006 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    5006:	04 c0       	rjmp	.+8      	; 0x5010 <__portable_avr_delay_cycles+0xa>
    5008:	61 50       	subi	r22, 0x01	; 1
    500a:	71 09       	sbc	r23, r1
    500c:	81 09       	sbc	r24, r1
    500e:	91 09       	sbc	r25, r1
    5010:	61 15       	cp	r22, r1
    5012:	71 05       	cpc	r23, r1
    5014:	81 05       	cpc	r24, r1
    5016:	91 05       	cpc	r25, r1
    5018:	b9 f7       	brne	.-18     	; 0x5008 <__portable_avr_delay_cycles+0x2>
    501a:	08 95       	ret

0000501c <rtc_get_time>:
    501c:	80 e1       	ldi	r24, 0x10	; 16
    501e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    5022:	e0 e2       	ldi	r30, 0x20	; 32
    5024:	f4 e0       	ldi	r31, 0x04	; 4
    5026:	81 81       	ldd	r24, Z+1	; 0x01
    5028:	84 fd       	sbrc	r24, 4
    502a:	fd cf       	rjmp	.-6      	; 0x5026 <rtc_get_time+0xa>
    502c:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    5030:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    5034:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    5038:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    503c:	08 95       	ret

0000503e <rtc_set_alarm>:
    503e:	e0 e2       	ldi	r30, 0x20	; 32
    5040:	f4 e0       	ldi	r31, 0x04	; 4
    5042:	24 e0       	ldi	r18, 0x04	; 4
    5044:	22 83       	std	Z+2, r18	; 0x02
    5046:	64 87       	std	Z+12, r22	; 0x0c
    5048:	75 87       	std	Z+13, r23	; 0x0d
    504a:	86 87       	std	Z+14, r24	; 0x0e
    504c:	97 87       	std	Z+15, r25	; 0x0f
    504e:	82 e0       	ldi	r24, 0x02	; 2
    5050:	83 83       	std	Z+3, r24	; 0x03
    5052:	08 95       	ret

00005054 <rtc_set_callback>:
    5054:	80 93 df 2d 	sts	0x2DDF, r24	; 0x802ddf <rtc_data>
    5058:	90 93 e0 2d 	sts	0x2DE0, r25	; 0x802de0 <rtc_data+0x1>
    505c:	08 95       	ret

0000505e <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    505e:	cf 93       	push	r28
    5060:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    5062:	64 e0       	ldi	r22, 0x04	; 4
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    506a:	c0 ef       	ldi	r28, 0xF0	; 240
    506c:	d0 e0       	ldi	r29, 0x00	; 0
    506e:	88 81       	ld	r24, Y
    5070:	82 60       	ori	r24, 0x02	; 2
    5072:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    5074:	61 e0       	ldi	r22, 0x01	; 1
    5076:	80 ef       	ldi	r24, 0xF0	; 240
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	0e 94 c8 7f 	call	0xff90	; 0xff90 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    507e:	88 81       	ld	r24, Y
    5080:	84 60       	ori	r24, 0x04	; 4
    5082:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    5084:	69 ee       	ldi	r22, 0xE9	; 233
    5086:	73 e0       	ldi	r23, 0x03	; 3
    5088:	80 e0       	ldi	r24, 0x00	; 0
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	bc df       	rcall	.-136    	; 0x5006 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    508e:	88 81       	ld	r24, Y
    5090:	88 61       	ori	r24, 0x18	; 24
    5092:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    5094:	e0 ef       	ldi	r30, 0xF0	; 240
    5096:	f0 e0       	ldi	r31, 0x00	; 0
    5098:	81 81       	ldd	r24, Z+1	; 0x01
    509a:	83 ff       	sbrs	r24, 3
    509c:	fd cf       	rjmp	.-6      	; 0x5098 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    509e:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    50a2:	e0 e2       	ldi	r30, 0x20	; 32
    50a4:	f4 e0       	ldi	r31, 0x04	; 4
    50a6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    50a8:	80 fd       	sbrc	r24, 0
    50aa:	fd cf       	rjmp	.-6      	; 0x50a6 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    50ac:	e0 e2       	ldi	r30, 0x20	; 32
    50ae:	f4 e0       	ldi	r31, 0x04	; 4
    50b0:	8f ef       	ldi	r24, 0xFF	; 255
    50b2:	9f ef       	ldi	r25, 0xFF	; 255
    50b4:	dc 01       	movw	r26, r24
    50b6:	80 87       	std	Z+8, r24	; 0x08
    50b8:	91 87       	std	Z+9, r25	; 0x09
    50ba:	a2 87       	std	Z+10, r26	; 0x0a
    50bc:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    50be:	14 82       	std	Z+4, r1	; 0x04
    50c0:	15 82       	std	Z+5, r1	; 0x05
    50c2:	16 82       	std	Z+6, r1	; 0x06
    50c4:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    50c6:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    50c8:	80 fd       	sbrc	r24, 0
    50ca:	fd cf       	rjmp	.-6      	; 0x50c6 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    50cc:	e0 e2       	ldi	r30, 0x20	; 32
    50ce:	f4 e0       	ldi	r31, 0x04	; 4
    50d0:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    50d6:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    50d8:	80 fd       	sbrc	r24, 0
    50da:	fd cf       	rjmp	.-6      	; 0x50d6 <rtc_init+0x78>
}
    50dc:	df 91       	pop	r29
    50de:	cf 91       	pop	r28
    50e0:	08 95       	ret

000050e2 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    50e2:	1f 92       	push	r1
    50e4:	0f 92       	push	r0
    50e6:	0f b6       	in	r0, 0x3f	; 63
    50e8:	0f 92       	push	r0
    50ea:	11 24       	eor	r1, r1
    50ec:	0b b6       	in	r0, 0x3b	; 59
    50ee:	0f 92       	push	r0
    50f0:	2f 93       	push	r18
    50f2:	3f 93       	push	r19
    50f4:	4f 93       	push	r20
    50f6:	5f 93       	push	r21
    50f8:	6f 93       	push	r22
    50fa:	7f 93       	push	r23
    50fc:	8f 93       	push	r24
    50fe:	9f 93       	push	r25
    5100:	af 93       	push	r26
    5102:	bf 93       	push	r27
    5104:	cf 93       	push	r28
    5106:	df 93       	push	r29
    5108:	ef 93       	push	r30
    510a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    510c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    5110:	c0 91 df 2d 	lds	r28, 0x2DDF	; 0x802ddf <rtc_data>
    5114:	d0 91 e0 2d 	lds	r29, 0x2DE0	; 0x802de0 <rtc_data+0x1>
    5118:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    511a:	19 f0       	breq	.+6      	; 0x5122 <__vector_11+0x40>
    511c:	7f df       	rcall	.-258    	; 0x501c <rtc_get_time>
    511e:	fe 01       	movw	r30, r28
}
    5120:	19 95       	eicall
    5122:	ff 91       	pop	r31
    5124:	ef 91       	pop	r30
    5126:	df 91       	pop	r29
    5128:	cf 91       	pop	r28
    512a:	bf 91       	pop	r27
    512c:	af 91       	pop	r26
    512e:	9f 91       	pop	r25
    5130:	8f 91       	pop	r24
    5132:	7f 91       	pop	r23
    5134:	6f 91       	pop	r22
    5136:	5f 91       	pop	r21
    5138:	4f 91       	pop	r20
    513a:	3f 91       	pop	r19
    513c:	2f 91       	pop	r18
    513e:	0f 90       	pop	r0
    5140:	0b be       	out	0x3b, r0	; 59
    5142:	0f 90       	pop	r0
    5144:	0f be       	out	0x3f, r0	; 63
    5146:	0f 90       	pop	r0
    5148:	1f 90       	pop	r1
    514a:	18 95       	reti

0000514c <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* SINE LUT */
	uint16_t left_x, rght_x, left_y, rght_y;
	rght_x = left_x = phase >> 4;
    514c:	fc 01       	movw	r30, r24
    514e:	f2 95       	swap	r31
    5150:	e2 95       	swap	r30
    5152:	ef 70       	andi	r30, 0x0F	; 15
    5154:	ef 27       	eor	r30, r31
    5156:	ff 70       	andi	r31, 0x0F	; 15
    5158:	ef 27       	eor	r30, r31
	if (++rght_x >= PM_SINE_COUNT) {
    515a:	9f 01       	movw	r18, r30
    515c:	2f 5f       	subi	r18, 0xFF	; 255
    515e:	3f 4f       	sbci	r19, 0xFF	; 255
    5160:	21 15       	cp	r18, r1
    5162:	40 e1       	ldi	r20, 0x10	; 16
    5164:	34 07       	cpc	r19, r20
    5166:	08 f0       	brcs	.+2      	; 0x516a <get_interpolated_sine+0x1e>
		rght_x -= PM_SINE_COUNT;
    5168:	30 51       	subi	r19, 0x10	; 16
	}
	left_y = PGM_READ_WORD(&(PM_SINE[left_x]));
    516a:	ee 0f       	add	r30, r30
    516c:	ff 1f       	adc	r31, r31
    516e:	ef 52       	subi	r30, 0x2F	; 47
    5170:	f2 4f       	sbci	r31, 0xF2	; 242
    5172:	45 91       	lpm	r20, Z+
    5174:	54 91       	lpm	r21, Z
	rght_y = PGM_READ_WORD(&(PM_SINE[rght_x]));
    5176:	f9 01       	movw	r30, r18
    5178:	ee 0f       	add	r30, r30
    517a:	ff 1f       	adc	r31, r31
    517c:	ef 52       	subi	r30, 0x2F	; 47
    517e:	f2 4f       	sbci	r31, 0xF2	; 242
    5180:	25 91       	lpm	r18, Z+
    5182:	34 91       	lpm	r19, Z

	/* INTERPOLATION LUT */
	uint16_t idx_y	= (uint16_t)((uint32_t)PM_SINE_MAX_STEP + rght_y - left_y);		// PM_SINE_MAX_STEP = +/-50
	uint16_t idx	= (idx_y << 4) | (phase & 0x0f);
	return left_y + (int8_t)PGM_READ_BYTE(&(PM_SINE_IP[idx]));
    5184:	f9 01       	movw	r30, r18
    5186:	f4 96       	adiw	r30, 0x34	; 52
    5188:	e4 1b       	sub	r30, r20
    518a:	f5 0b       	sbc	r31, r21
    518c:	e2 95       	swap	r30
    518e:	f2 95       	swap	r31
    5190:	f0 7f       	andi	r31, 0xF0	; 240
    5192:	fe 27       	eor	r31, r30
    5194:	e0 7f       	andi	r30, 0xF0	; 240
    5196:	fe 27       	eor	r31, r30
    5198:	8f 70       	andi	r24, 0x0F	; 15
    519a:	99 27       	eor	r25, r25
    519c:	e8 2b       	or	r30, r24
    519e:	f9 2b       	or	r31, r25
    51a0:	ef 5a       	subi	r30, 0xAF	; 175
    51a2:	f8 4f       	sbci	r31, 0xF8	; 248
    51a4:	e4 91       	lpm	r30, Z
}
    51a6:	ca 01       	movw	r24, r20
    51a8:	8e 0f       	add	r24, r30
    51aa:	91 1d       	adc	r25, r1
    51ac:	e7 fd       	sbrc	r30, 7
    51ae:	9a 95       	dec	r25
    51b0:	08 95       	ret

000051b2 <printHelp>:

void printHelp(void)
{
	static bool s_again = false;

	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HDR_1);
    51b2:	89 ef       	ldi	r24, 0xF9	; 249
    51b4:	91 e3       	ldi	r25, 0x31	; 49
    51b6:	9f 93       	push	r25
    51b8:	8f 93       	push	r24
    51ba:	1f 92       	push	r1
    51bc:	80 e4       	ldi	r24, 0x40	; 64
    51be:	8f 93       	push	r24
    51c0:	8b e1       	ldi	r24, 0x1B	; 27
    51c2:	95 e2       	ldi	r25, 0x25	; 37
    51c4:	9f 93       	push	r25
    51c6:	8f 93       	push	r24
    51c8:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    51cc:	81 34       	cpi	r24, 0x41	; 65
    51ce:	91 05       	cpc	r25, r1
    51d0:	10 f0       	brcs	.+4      	; 0x51d6 <printHelp+0x24>
    51d2:	80 e4       	ldi	r24, 0x40	; 64
    51d4:	90 e0       	ldi	r25, 0x00	; 0
    51d6:	40 e0       	ldi	r20, 0x00	; 0
    51d8:	68 2f       	mov	r22, r24
    51da:	8b e1       	ldi	r24, 0x1B	; 27
    51dc:	95 e2       	ldi	r25, 0x25	; 37
    51de:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HDR_2);
    51e2:	8a ed       	ldi	r24, 0xDA	; 218
    51e4:	91 e3       	ldi	r25, 0x31	; 49
    51e6:	9f 93       	push	r25
    51e8:	8f 93       	push	r24
    51ea:	1f 92       	push	r1
    51ec:	80 e4       	ldi	r24, 0x40	; 64
    51ee:	8f 93       	push	r24
    51f0:	8b e1       	ldi	r24, 0x1B	; 27
    51f2:	95 e2       	ldi	r25, 0x25	; 37
    51f4:	9f 93       	push	r25
    51f6:	8f 93       	push	r24
    51f8:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    51fc:	81 34       	cpi	r24, 0x41	; 65
    51fe:	91 05       	cpc	r25, r1
    5200:	10 f0       	brcs	.+4      	; 0x5206 <printHelp+0x54>
    5202:	80 e4       	ldi	r24, 0x40	; 64
    5204:	90 e0       	ldi	r25, 0x00	; 0
    5206:	40 e0       	ldi	r20, 0x00	; 0
    5208:	68 2f       	mov	r22, r24
    520a:	8b e1       	ldi	r24, 0x1B	; 27
    520c:	95 e2       	ldi	r25, 0x25	; 37
    520e:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_ADC_1);
    5212:	88 eb       	ldi	r24, 0xB8	; 184
    5214:	91 e3       	ldi	r25, 0x31	; 49
    5216:	9f 93       	push	r25
    5218:	8f 93       	push	r24
    521a:	1f 92       	push	r1
    521c:	80 e4       	ldi	r24, 0x40	; 64
    521e:	8f 93       	push	r24
    5220:	8b e1       	ldi	r24, 0x1B	; 27
    5222:	95 e2       	ldi	r25, 0x25	; 37
    5224:	9f 93       	push	r25
    5226:	8f 93       	push	r24
    5228:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    522c:	81 34       	cpi	r24, 0x41	; 65
    522e:	91 05       	cpc	r25, r1
    5230:	10 f0       	brcs	.+4      	; 0x5236 <printHelp+0x84>
    5232:	80 e4       	ldi	r24, 0x40	; 64
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	40 e0       	ldi	r20, 0x00	; 0
    5238:	68 2f       	mov	r22, r24
    523a:	8b e1       	ldi	r24, 0x1B	; 27
    523c:	95 e2       	ldi	r25, 0x25	; 37
    523e:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_ADC_2);
    5242:	8d e9       	ldi	r24, 0x9D	; 157
    5244:	91 e3       	ldi	r25, 0x31	; 49
    5246:	9f 93       	push	r25
    5248:	8f 93       	push	r24
    524a:	1f 92       	push	r1
    524c:	80 e4       	ldi	r24, 0x40	; 64
    524e:	8f 93       	push	r24
    5250:	8b e1       	ldi	r24, 0x1B	; 27
    5252:	95 e2       	ldi	r25, 0x25	; 37
    5254:	9f 93       	push	r25
    5256:	8f 93       	push	r24
    5258:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    525c:	81 34       	cpi	r24, 0x41	; 65
    525e:	91 05       	cpc	r25, r1
    5260:	10 f0       	brcs	.+4      	; 0x5266 <printHelp+0xb4>
    5262:	80 e4       	ldi	r24, 0x40	; 64
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	40 e0       	ldi	r20, 0x00	; 0
    5268:	68 2f       	mov	r22, r24
    526a:	8b e1       	ldi	r24, 0x1B	; 27
    526c:	95 e2       	ldi	r25, 0x25	; 37
    526e:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_AT_1);
    5272:	8d e7       	ldi	r24, 0x7D	; 125
    5274:	91 e3       	ldi	r25, 0x31	; 49
    5276:	9f 93       	push	r25
    5278:	8f 93       	push	r24
    527a:	1f 92       	push	r1
    527c:	80 e4       	ldi	r24, 0x40	; 64
    527e:	8f 93       	push	r24
    5280:	8b e1       	ldi	r24, 0x1B	; 27
    5282:	95 e2       	ldi	r25, 0x25	; 37
    5284:	9f 93       	push	r25
    5286:	8f 93       	push	r24
    5288:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    528c:	81 34       	cpi	r24, 0x41	; 65
    528e:	91 05       	cpc	r25, r1
    5290:	10 f0       	brcs	.+4      	; 0x5296 <printHelp+0xe4>
    5292:	80 e4       	ldi	r24, 0x40	; 64
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	40 e0       	ldi	r20, 0x00	; 0
    5298:	68 2f       	mov	r22, r24
    529a:	8b e1       	ldi	r24, 0x1B	; 27
    529c:	95 e2       	ldi	r25, 0x25	; 37
    529e:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BIAS_1);
    52a2:	82 e6       	ldi	r24, 0x62	; 98
    52a4:	91 e3       	ldi	r25, 0x31	; 49
    52a6:	9f 93       	push	r25
    52a8:	8f 93       	push	r24
    52aa:	1f 92       	push	r1
    52ac:	80 e4       	ldi	r24, 0x40	; 64
    52ae:	8f 93       	push	r24
    52b0:	8b e1       	ldi	r24, 0x1B	; 27
    52b2:	95 e2       	ldi	r25, 0x25	; 37
    52b4:	9f 93       	push	r25
    52b6:	8f 93       	push	r24
    52b8:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    52bc:	2d b7       	in	r18, 0x3d	; 61
    52be:	3e b7       	in	r19, 0x3e	; 62
    52c0:	2c 5d       	subi	r18, 0xDC	; 220
    52c2:	3f 4f       	sbci	r19, 0xFF	; 255
    52c4:	2d bf       	out	0x3d, r18	; 61
    52c6:	3e bf       	out	0x3e, r19	; 62
    52c8:	81 34       	cpi	r24, 0x41	; 65
    52ca:	91 05       	cpc	r25, r1
    52cc:	10 f0       	brcs	.+4      	; 0x52d2 <printHelp+0x120>
    52ce:	80 e4       	ldi	r24, 0x40	; 64
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	40 e0       	ldi	r20, 0x00	; 0
    52d4:	68 2f       	mov	r22, r24
    52d6:	8b e1       	ldi	r24, 0x1B	; 27
    52d8:	95 e2       	ldi	r25, 0x25	; 37
    52da:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BIAS_2);
    52de:	8f e4       	ldi	r24, 0x4F	; 79
    52e0:	91 e3       	ldi	r25, 0x31	; 49
    52e2:	9f 93       	push	r25
    52e4:	8f 93       	push	r24
    52e6:	1f 92       	push	r1
    52e8:	80 e4       	ldi	r24, 0x40	; 64
    52ea:	8f 93       	push	r24
    52ec:	8b e1       	ldi	r24, 0x1B	; 27
    52ee:	95 e2       	ldi	r25, 0x25	; 37
    52f0:	9f 93       	push	r25
    52f2:	8f 93       	push	r24
    52f4:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    52f8:	81 34       	cpi	r24, 0x41	; 65
    52fa:	91 05       	cpc	r25, r1
    52fc:	10 f0       	brcs	.+4      	; 0x5302 <printHelp+0x150>
    52fe:	80 e4       	ldi	r24, 0x40	; 64
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	40 e0       	ldi	r20, 0x00	; 0
    5304:	68 2f       	mov	r22, r24
    5306:	8b e1       	ldi	r24, 0x1B	; 27
    5308:	95 e2       	ldi	r25, 0x25	; 37
    530a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BL_1);
    530e:	83 e3       	ldi	r24, 0x33	; 51
    5310:	91 e3       	ldi	r25, 0x31	; 49
    5312:	9f 93       	push	r25
    5314:	8f 93       	push	r24
    5316:	1f 92       	push	r1
    5318:	80 e4       	ldi	r24, 0x40	; 64
    531a:	8f 93       	push	r24
    531c:	8b e1       	ldi	r24, 0x1B	; 27
    531e:	95 e2       	ldi	r25, 0x25	; 37
    5320:	9f 93       	push	r25
    5322:	8f 93       	push	r24
    5324:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5328:	81 34       	cpi	r24, 0x41	; 65
    532a:	91 05       	cpc	r25, r1
    532c:	10 f0       	brcs	.+4      	; 0x5332 <printHelp+0x180>
    532e:	80 e4       	ldi	r24, 0x40	; 64
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	40 e0       	ldi	r20, 0x00	; 0
    5334:	68 2f       	mov	r22, r24
    5336:	8b e1       	ldi	r24, 0x1B	; 27
    5338:	95 e2       	ldi	r25, 0x25	; 37
    533a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_BL_2);
    533e:	81 e1       	ldi	r24, 0x11	; 17
    5340:	91 e3       	ldi	r25, 0x31	; 49
    5342:	9f 93       	push	r25
    5344:	8f 93       	push	r24
    5346:	1f 92       	push	r1
    5348:	80 e4       	ldi	r24, 0x40	; 64
    534a:	8f 93       	push	r24
    534c:	8b e1       	ldi	r24, 0x1B	; 27
    534e:	95 e2       	ldi	r25, 0x25	; 37
    5350:	9f 93       	push	r25
    5352:	8f 93       	push	r24
    5354:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5358:	81 34       	cpi	r24, 0x41	; 65
    535a:	91 05       	cpc	r25, r1
    535c:	10 f0       	brcs	.+4      	; 0x5362 <printHelp+0x1b0>
    535e:	80 e4       	ldi	r24, 0x40	; 64
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	40 e0       	ldi	r20, 0x00	; 0
    5364:	68 2f       	mov	r22, r24
    5366:	8b e1       	ldi	r24, 0x1B	; 27
    5368:	95 e2       	ldi	r25, 0x25	; 37
    536a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_CAL_1);
    536e:	8c ee       	ldi	r24, 0xEC	; 236
    5370:	90 e3       	ldi	r25, 0x30	; 48
    5372:	9f 93       	push	r25
    5374:	8f 93       	push	r24
    5376:	1f 92       	push	r1
    5378:	80 e4       	ldi	r24, 0x40	; 64
    537a:	8f 93       	push	r24
    537c:	8b e1       	ldi	r24, 0x1B	; 27
    537e:	95 e2       	ldi	r25, 0x25	; 37
    5380:	9f 93       	push	r25
    5382:	8f 93       	push	r24
    5384:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5388:	81 34       	cpi	r24, 0x41	; 65
    538a:	91 05       	cpc	r25, r1
    538c:	10 f0       	brcs	.+4      	; 0x5392 <printHelp+0x1e0>
    538e:	80 e4       	ldi	r24, 0x40	; 64
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	40 e0       	ldi	r20, 0x00	; 0
    5394:	68 2f       	mov	r22, r24
    5396:	8b e1       	ldi	r24, 0x1B	; 27
    5398:	95 e2       	ldi	r25, 0x25	; 37
    539a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_CAL_2);
    539e:	80 ee       	ldi	r24, 0xE0	; 224
    53a0:	90 e3       	ldi	r25, 0x30	; 48
    53a2:	9f 93       	push	r25
    53a4:	8f 93       	push	r24
    53a6:	1f 92       	push	r1
    53a8:	80 e4       	ldi	r24, 0x40	; 64
    53aa:	8f 93       	push	r24
    53ac:	8b e1       	ldi	r24, 0x1B	; 27
    53ae:	95 e2       	ldi	r25, 0x25	; 37
    53b0:	9f 93       	push	r25
    53b2:	8f 93       	push	r24
    53b4:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    53b8:	81 34       	cpi	r24, 0x41	; 65
    53ba:	91 05       	cpc	r25, r1
    53bc:	10 f0       	brcs	.+4      	; 0x53c2 <printHelp+0x210>
    53be:	80 e4       	ldi	r24, 0x40	; 64
    53c0:	90 e0       	ldi	r25, 0x00	; 0
    53c2:	40 e0       	ldi	r20, 0x00	; 0
    53c4:	68 2f       	mov	r22, r24
    53c6:	8b e1       	ldi	r24, 0x1B	; 27
    53c8:	95 e2       	ldi	r25, 0x25	; 37
    53ca:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_CAL_3);
    53ce:	81 eb       	ldi	r24, 0xB1	; 177
    53d0:	90 e3       	ldi	r25, 0x30	; 48
    53d2:	9f 93       	push	r25
    53d4:	8f 93       	push	r24
    53d6:	1f 92       	push	r1
    53d8:	80 e4       	ldi	r24, 0x40	; 64
    53da:	8f 93       	push	r24
    53dc:	8b e1       	ldi	r24, 0x1B	; 27
    53de:	95 e2       	ldi	r25, 0x25	; 37
    53e0:	9f 93       	push	r25
    53e2:	8f 93       	push	r24
    53e4:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    53e8:	2d b7       	in	r18, 0x3d	; 61
    53ea:	3e b7       	in	r19, 0x3e	; 62
    53ec:	2c 5d       	subi	r18, 0xDC	; 220
    53ee:	3f 4f       	sbci	r19, 0xFF	; 255
    53f0:	2d bf       	out	0x3d, r18	; 61
    53f2:	3e bf       	out	0x3e, r19	; 62
    53f4:	81 34       	cpi	r24, 0x41	; 65
    53f6:	91 05       	cpc	r25, r1
    53f8:	10 f0       	brcs	.+4      	; 0x53fe <printHelp+0x24c>
    53fa:	80 e4       	ldi	r24, 0x40	; 64
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	40 e0       	ldi	r20, 0x00	; 0
    5400:	68 2f       	mov	r22, r24
    5402:	8b e1       	ldi	r24, 0x1B	; 27
    5404:	95 e2       	ldi	r25, 0x25	; 37
    5406:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_CAL_4);
    540a:	82 e8       	ldi	r24, 0x82	; 130
    540c:	90 e3       	ldi	r25, 0x30	; 48
    540e:	9f 93       	push	r25
    5410:	8f 93       	push	r24
    5412:	1f 92       	push	r1
    5414:	80 e4       	ldi	r24, 0x40	; 64
    5416:	8f 93       	push	r24
    5418:	8b e1       	ldi	r24, 0x1B	; 27
    541a:	95 e2       	ldi	r25, 0x25	; 37
    541c:	9f 93       	push	r25
    541e:	8f 93       	push	r24
    5420:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5424:	81 34       	cpi	r24, 0x41	; 65
    5426:	91 05       	cpc	r25, r1
    5428:	10 f0       	brcs	.+4      	; 0x542e <printHelp+0x27c>
    542a:	80 e4       	ldi	r24, 0x40	; 64
    542c:	90 e0       	ldi	r25, 0x00	; 0
    542e:	40 e0       	ldi	r20, 0x00	; 0
    5430:	68 2f       	mov	r22, r24
    5432:	8b e1       	ldi	r24, 0x1B	; 27
    5434:	95 e2       	ldi	r25, 0x25	; 37
    5436:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_CAL_5);
    543a:	83 e5       	ldi	r24, 0x53	; 83
    543c:	90 e3       	ldi	r25, 0x30	; 48
    543e:	9f 93       	push	r25
    5440:	8f 93       	push	r24
    5442:	1f 92       	push	r1
    5444:	80 e4       	ldi	r24, 0x40	; 64
    5446:	8f 93       	push	r24
    5448:	8b e1       	ldi	r24, 0x1B	; 27
    544a:	95 e2       	ldi	r25, 0x25	; 37
    544c:	9f 93       	push	r25
    544e:	8f 93       	push	r24
    5450:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5454:	81 34       	cpi	r24, 0x41	; 65
    5456:	91 05       	cpc	r25, r1
    5458:	10 f0       	brcs	.+4      	; 0x545e <printHelp+0x2ac>
    545a:	80 e4       	ldi	r24, 0x40	; 64
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	40 e0       	ldi	r20, 0x00	; 0
    5460:	68 2f       	mov	r22, r24
    5462:	8b e1       	ldi	r24, 0x1B	; 27
    5464:	95 e2       	ldi	r25, 0x25	; 37
    5466:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_CAL_6);
    546a:	8f e2       	ldi	r24, 0x2F	; 47
    546c:	90 e3       	ldi	r25, 0x30	; 48
    546e:	9f 93       	push	r25
    5470:	8f 93       	push	r24
    5472:	1f 92       	push	r1
    5474:	80 e4       	ldi	r24, 0x40	; 64
    5476:	8f 93       	push	r24
    5478:	8b e1       	ldi	r24, 0x1B	; 27
    547a:	95 e2       	ldi	r25, 0x25	; 37
    547c:	9f 93       	push	r25
    547e:	8f 93       	push	r24
    5480:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5484:	81 34       	cpi	r24, 0x41	; 65
    5486:	91 05       	cpc	r25, r1
    5488:	10 f0       	brcs	.+4      	; 0x548e <printHelp+0x2dc>
    548a:	80 e4       	ldi	r24, 0x40	; 64
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	40 e0       	ldi	r20, 0x00	; 0
    5490:	68 2f       	mov	r22, r24
    5492:	8b e1       	ldi	r24, 0x1B	; 27
    5494:	95 e2       	ldi	r25, 0x25	; 37
    5496:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DAC_1);
    549a:	86 e1       	ldi	r24, 0x16	; 22
    549c:	90 e3       	ldi	r25, 0x30	; 48
    549e:	9f 93       	push	r25
    54a0:	8f 93       	push	r24
    54a2:	1f 92       	push	r1
    54a4:	80 e4       	ldi	r24, 0x40	; 64
    54a6:	8f 93       	push	r24
    54a8:	8b e1       	ldi	r24, 0x1B	; 27
    54aa:	95 e2       	ldi	r25, 0x25	; 37
    54ac:	9f 93       	push	r25
    54ae:	8f 93       	push	r24
    54b0:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    54b4:	81 34       	cpi	r24, 0x41	; 65
    54b6:	91 05       	cpc	r25, r1
    54b8:	10 f0       	brcs	.+4      	; 0x54be <printHelp+0x30c>
    54ba:	80 e4       	ldi	r24, 0x40	; 64
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	40 e0       	ldi	r20, 0x00	; 0
    54c0:	68 2f       	mov	r22, r24
    54c2:	8b e1       	ldi	r24, 0x1B	; 27
    54c4:	95 e2       	ldi	r25, 0x25	; 37
    54c6:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DAC_2);
    54ca:	84 e0       	ldi	r24, 0x04	; 4
    54cc:	90 e3       	ldi	r25, 0x30	; 48
    54ce:	9f 93       	push	r25
    54d0:	8f 93       	push	r24
    54d2:	1f 92       	push	r1
    54d4:	80 e4       	ldi	r24, 0x40	; 64
    54d6:	8f 93       	push	r24
    54d8:	8b e1       	ldi	r24, 0x1B	; 27
    54da:	95 e2       	ldi	r25, 0x25	; 37
    54dc:	9f 93       	push	r25
    54de:	8f 93       	push	r24
    54e0:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    54e4:	81 34       	cpi	r24, 0x41	; 65
    54e6:	91 05       	cpc	r25, r1
    54e8:	10 f0       	brcs	.+4      	; 0x54ee <printHelp+0x33c>
    54ea:	80 e4       	ldi	r24, 0x40	; 64
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	40 e0       	ldi	r20, 0x00	; 0
    54f0:	68 2f       	mov	r22, r24
    54f2:	8b e1       	ldi	r24, 0x1B	; 27
    54f4:	95 e2       	ldi	r25, 0x25	; 37
    54f6:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_1);
    54fa:	82 ee       	ldi	r24, 0xE2	; 226
    54fc:	9f e2       	ldi	r25, 0x2F	; 47
    54fe:	9f 93       	push	r25
    5500:	8f 93       	push	r24
    5502:	1f 92       	push	r1
    5504:	80 e4       	ldi	r24, 0x40	; 64
    5506:	8f 93       	push	r24
    5508:	8b e1       	ldi	r24, 0x1B	; 27
    550a:	95 e2       	ldi	r25, 0x25	; 37
    550c:	9f 93       	push	r25
    550e:	8f 93       	push	r24
    5510:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5514:	2d b7       	in	r18, 0x3d	; 61
    5516:	3e b7       	in	r19, 0x3e	; 62
    5518:	2c 5d       	subi	r18, 0xDC	; 220
    551a:	3f 4f       	sbci	r19, 0xFF	; 255
    551c:	2d bf       	out	0x3d, r18	; 61
    551e:	3e bf       	out	0x3e, r19	; 62
    5520:	81 34       	cpi	r24, 0x41	; 65
    5522:	91 05       	cpc	r25, r1
    5524:	10 f0       	brcs	.+4      	; 0x552a <printHelp+0x378>
    5526:	80 e4       	ldi	r24, 0x40	; 64
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	40 e0       	ldi	r20, 0x00	; 0
    552c:	68 2f       	mov	r22, r24
    552e:	8b e1       	ldi	r24, 0x1B	; 27
    5530:	95 e2       	ldi	r25, 0x25	; 37
    5532:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_2);
    5536:	84 ed       	ldi	r24, 0xD4	; 212
    5538:	9f e2       	ldi	r25, 0x2F	; 47
    553a:	9f 93       	push	r25
    553c:	8f 93       	push	r24
    553e:	1f 92       	push	r1
    5540:	80 e4       	ldi	r24, 0x40	; 64
    5542:	8f 93       	push	r24
    5544:	8b e1       	ldi	r24, 0x1B	; 27
    5546:	95 e2       	ldi	r25, 0x25	; 37
    5548:	9f 93       	push	r25
    554a:	8f 93       	push	r24
    554c:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5550:	81 34       	cpi	r24, 0x41	; 65
    5552:	91 05       	cpc	r25, r1
    5554:	10 f0       	brcs	.+4      	; 0x555a <printHelp+0x3a8>
    5556:	80 e4       	ldi	r24, 0x40	; 64
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	40 e0       	ldi	r20, 0x00	; 0
    555c:	68 2f       	mov	r22, r24
    555e:	8b e1       	ldi	r24, 0x1B	; 27
    5560:	95 e2       	ldi	r25, 0x25	; 37
    5562:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_DDS_3);
    5566:	8f ea       	ldi	r24, 0xAF	; 175
    5568:	9f e2       	ldi	r25, 0x2F	; 47
    556a:	9f 93       	push	r25
    556c:	8f 93       	push	r24
    556e:	1f 92       	push	r1
    5570:	80 e4       	ldi	r24, 0x40	; 64
    5572:	8f 93       	push	r24
    5574:	8b e1       	ldi	r24, 0x1B	; 27
    5576:	95 e2       	ldi	r25, 0x25	; 37
    5578:	9f 93       	push	r25
    557a:	8f 93       	push	r24
    557c:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5580:	81 34       	cpi	r24, 0x41	; 65
    5582:	91 05       	cpc	r25, r1
    5584:	10 f0       	brcs	.+4      	; 0x558a <printHelp+0x3d8>
    5586:	80 e4       	ldi	r24, 0x40	; 64
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	40 e0       	ldi	r20, 0x00	; 0
    558c:	68 2f       	mov	r22, r24
    558e:	8b e1       	ldi	r24, 0x1B	; 27
    5590:	95 e2       	ldi	r25, 0x25	; 37
    5592:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_EB_1);
    5596:	8f e8       	ldi	r24, 0x8F	; 143
    5598:	9f e2       	ldi	r25, 0x2F	; 47
    559a:	9f 93       	push	r25
    559c:	8f 93       	push	r24
    559e:	1f 92       	push	r1
    55a0:	80 e4       	ldi	r24, 0x40	; 64
    55a2:	8f 93       	push	r24
    55a4:	8b e1       	ldi	r24, 0x1B	; 27
    55a6:	95 e2       	ldi	r25, 0x25	; 37
    55a8:	9f 93       	push	r25
    55aa:	8f 93       	push	r24
    55ac:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    55b0:	81 34       	cpi	r24, 0x41	; 65
    55b2:	91 05       	cpc	r25, r1
    55b4:	10 f0       	brcs	.+4      	; 0x55ba <printHelp+0x408>
    55b6:	80 e4       	ldi	r24, 0x40	; 64
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	40 e0       	ldi	r20, 0x00	; 0
    55bc:	68 2f       	mov	r22, r24
    55be:	8b e1       	ldi	r24, 0x1B	; 27
    55c0:	95 e2       	ldi	r25, 0x25	; 37
    55c2:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HELP_1);
    55c6:	82 e7       	ldi	r24, 0x72	; 114
    55c8:	9f e2       	ldi	r25, 0x2F	; 47
    55ca:	9f 93       	push	r25
    55cc:	8f 93       	push	r24
    55ce:	1f 92       	push	r1
    55d0:	80 e4       	ldi	r24, 0x40	; 64
    55d2:	8f 93       	push	r24
    55d4:	8b e1       	ldi	r24, 0x1B	; 27
    55d6:	95 e2       	ldi	r25, 0x25	; 37
    55d8:	9f 93       	push	r25
    55da:	8f 93       	push	r24
    55dc:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    55e0:	81 34       	cpi	r24, 0x41	; 65
    55e2:	91 05       	cpc	r25, r1
    55e4:	10 f0       	brcs	.+4      	; 0x55ea <printHelp+0x438>
    55e6:	80 e4       	ldi	r24, 0x40	; 64
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	40 e0       	ldi	r20, 0x00	; 0
    55ec:	68 2f       	mov	r22, r24
    55ee:	8b e1       	ldi	r24, 0x1B	; 27
    55f0:	95 e2       	ldi	r25, 0x25	; 37
    55f2:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_HELP_2);
    55f6:	83 e5       	ldi	r24, 0x53	; 83
    55f8:	9f e2       	ldi	r25, 0x2F	; 47
    55fa:	9f 93       	push	r25
    55fc:	8f 93       	push	r24
    55fe:	1f 92       	push	r1
    5600:	80 e4       	ldi	r24, 0x40	; 64
    5602:	8f 93       	push	r24
    5604:	8b e1       	ldi	r24, 0x1B	; 27
    5606:	95 e2       	ldi	r25, 0x25	; 37
    5608:	9f 93       	push	r25
    560a:	8f 93       	push	r24
    560c:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5610:	81 34       	cpi	r24, 0x41	; 65
    5612:	91 05       	cpc	r25, r1
    5614:	10 f0       	brcs	.+4      	; 0x561a <printHelp+0x468>
    5616:	80 e4       	ldi	r24, 0x40	; 64
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	40 e0       	ldi	r20, 0x00	; 0
    561c:	68 2f       	mov	r22, r24
    561e:	8b e1       	ldi	r24, 0x1B	; 27
    5620:	95 e2       	ldi	r25, 0x25	; 37
    5622:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_INFO_1);
    5626:	84 e3       	ldi	r24, 0x34	; 52
    5628:	9f e2       	ldi	r25, 0x2F	; 47
    562a:	9f 93       	push	r25
    562c:	8f 93       	push	r24
    562e:	1f 92       	push	r1
    5630:	80 e4       	ldi	r24, 0x40	; 64
    5632:	8f 93       	push	r24
    5634:	8b e1       	ldi	r24, 0x1B	; 27
    5636:	95 e2       	ldi	r25, 0x25	; 37
    5638:	9f 93       	push	r25
    563a:	8f 93       	push	r24
    563c:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5640:	2d b7       	in	r18, 0x3d	; 61
    5642:	3e b7       	in	r19, 0x3e	; 62
    5644:	2c 5d       	subi	r18, 0xDC	; 220
    5646:	3f 4f       	sbci	r19, 0xFF	; 255
    5648:	2d bf       	out	0x3d, r18	; 61
    564a:	3e bf       	out	0x3e, r19	; 62
    564c:	81 34       	cpi	r24, 0x41	; 65
    564e:	91 05       	cpc	r25, r1
    5650:	10 f0       	brcs	.+4      	; 0x5656 <printHelp+0x4a4>
    5652:	80 e4       	ldi	r24, 0x40	; 64
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	40 e0       	ldi	r20, 0x00	; 0
    5658:	68 2f       	mov	r22, r24
    565a:	8b e1       	ldi	r24, 0x1B	; 27
    565c:	95 e2       	ldi	r25, 0x25	; 37
    565e:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_INFO_2);
    5662:	85 e2       	ldi	r24, 0x25	; 37
    5664:	9f e2       	ldi	r25, 0x2F	; 47
    5666:	9f 93       	push	r25
    5668:	8f 93       	push	r24
    566a:	1f 92       	push	r1
    566c:	80 e4       	ldi	r24, 0x40	; 64
    566e:	8f 93       	push	r24
    5670:	8b e1       	ldi	r24, 0x1B	; 27
    5672:	95 e2       	ldi	r25, 0x25	; 37
    5674:	9f 93       	push	r25
    5676:	8f 93       	push	r24
    5678:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    567c:	81 34       	cpi	r24, 0x41	; 65
    567e:	91 05       	cpc	r25, r1
    5680:	10 f0       	brcs	.+4      	; 0x5686 <printHelp+0x4d4>
    5682:	80 e4       	ldi	r24, 0x40	; 64
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	40 e0       	ldi	r20, 0x00	; 0
    5688:	68 2f       	mov	r22, r24
    568a:	8b e1       	ldi	r24, 0x1B	; 27
    568c:	95 e2       	ldi	r25, 0x25	; 37
    568e:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_KB_1);
    5692:	87 e0       	ldi	r24, 0x07	; 7
    5694:	9f e2       	ldi	r25, 0x2F	; 47
    5696:	9f 93       	push	r25
    5698:	8f 93       	push	r24
    569a:	1f 92       	push	r1
    569c:	80 e4       	ldi	r24, 0x40	; 64
    569e:	8f 93       	push	r24
    56a0:	8b e1       	ldi	r24, 0x1B	; 27
    56a2:	95 e2       	ldi	r25, 0x25	; 37
    56a4:	9f 93       	push	r25
    56a6:	8f 93       	push	r24
    56a8:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    56ac:	81 34       	cpi	r24, 0x41	; 65
    56ae:	91 05       	cpc	r25, r1
    56b0:	10 f0       	brcs	.+4      	; 0x56b6 <printHelp+0x504>
    56b2:	80 e4       	ldi	r24, 0x40	; 64
    56b4:	90 e0       	ldi	r25, 0x00	; 0
    56b6:	40 e0       	ldi	r20, 0x00	; 0
    56b8:	68 2f       	mov	r22, r24
    56ba:	8b e1       	ldi	r24, 0x1B	; 27
    56bc:	95 e2       	ldi	r25, 0x25	; 37
    56be:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_PT_1);
    56c2:	8e ee       	ldi	r24, 0xEE	; 238
    56c4:	9e e2       	ldi	r25, 0x2E	; 46
    56c6:	9f 93       	push	r25
    56c8:	8f 93       	push	r24
    56ca:	1f 92       	push	r1
    56cc:	80 e4       	ldi	r24, 0x40	; 64
    56ce:	8f 93       	push	r24
    56d0:	8b e1       	ldi	r24, 0x1B	; 27
    56d2:	95 e2       	ldi	r25, 0x25	; 37
    56d4:	9f 93       	push	r25
    56d6:	8f 93       	push	r24
    56d8:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    56dc:	81 34       	cpi	r24, 0x41	; 65
    56de:	91 05       	cpc	r25, r1
    56e0:	10 f0       	brcs	.+4      	; 0x56e6 <printHelp+0x534>
    56e2:	80 e4       	ldi	r24, 0x40	; 64
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	40 e0       	ldi	r20, 0x00	; 0
    56e8:	68 2f       	mov	r22, r24
    56ea:	8b e1       	ldi	r24, 0x1B	; 27
    56ec:	95 e2       	ldi	r25, 0x25	; 37
    56ee:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_PT_2);
    56f2:	8f ec       	ldi	r24, 0xCF	; 207
    56f4:	9e e2       	ldi	r25, 0x2E	; 46
    56f6:	9f 93       	push	r25
    56f8:	8f 93       	push	r24
    56fa:	1f 92       	push	r1
    56fc:	80 e4       	ldi	r24, 0x40	; 64
    56fe:	8f 93       	push	r24
    5700:	8b e1       	ldi	r24, 0x1B	; 27
    5702:	95 e2       	ldi	r25, 0x25	; 37
    5704:	9f 93       	push	r25
    5706:	8f 93       	push	r24
    5708:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    570c:	81 34       	cpi	r24, 0x41	; 65
    570e:	91 05       	cpc	r25, r1
    5710:	10 f0       	brcs	.+4      	; 0x5716 <printHelp+0x564>
    5712:	80 e4       	ldi	r24, 0x40	; 64
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	40 e0       	ldi	r20, 0x00	; 0
    5718:	68 2f       	mov	r22, r24
    571a:	8b e1       	ldi	r24, 0x1B	; 27
    571c:	95 e2       	ldi	r25, 0x25	; 37
    571e:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_RESET_1);
    5722:	87 eb       	ldi	r24, 0xB7	; 183
    5724:	9e e2       	ldi	r25, 0x2E	; 46
    5726:	9f 93       	push	r25
    5728:	8f 93       	push	r24
    572a:	1f 92       	push	r1
    572c:	80 e4       	ldi	r24, 0x40	; 64
    572e:	8f 93       	push	r24
    5730:	8b e1       	ldi	r24, 0x1B	; 27
    5732:	95 e2       	ldi	r25, 0x25	; 37
    5734:	9f 93       	push	r25
    5736:	8f 93       	push	r24
    5738:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    573c:	81 34       	cpi	r24, 0x41	; 65
    573e:	91 05       	cpc	r25, r1
    5740:	10 f0       	brcs	.+4      	; 0x5746 <printHelp+0x594>
    5742:	80 e4       	ldi	r24, 0x40	; 64
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	40 e0       	ldi	r20, 0x00	; 0
    5748:	68 2f       	mov	r22, r24
    574a:	8b e1       	ldi	r24, 0x1B	; 27
    574c:	95 e2       	ldi	r25, 0x25	; 37
    574e:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_XO_1);
    5752:	83 e9       	ldi	r24, 0x93	; 147
    5754:	9e e2       	ldi	r25, 0x2E	; 46
    5756:	9f 93       	push	r25
    5758:	8f 93       	push	r24
    575a:	1f 92       	push	r1
    575c:	80 e4       	ldi	r24, 0x40	; 64
    575e:	8f 93       	push	r24
    5760:	8b e1       	ldi	r24, 0x1B	; 27
    5762:	95 e2       	ldi	r25, 0x25	; 37
    5764:	9f 93       	push	r25
    5766:	8f 93       	push	r24
    5768:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    576c:	2d b7       	in	r18, 0x3d	; 61
    576e:	3e b7       	in	r19, 0x3e	; 62
    5770:	2c 5d       	subi	r18, 0xDC	; 220
    5772:	3f 4f       	sbci	r19, 0xFF	; 255
    5774:	2d bf       	out	0x3d, r18	; 61
    5776:	3e bf       	out	0x3e, r19	; 62
    5778:	81 34       	cpi	r24, 0x41	; 65
    577a:	91 05       	cpc	r25, r1
    577c:	10 f0       	brcs	.+4      	; 0x5782 <printHelp+0x5d0>
    577e:	80 e4       	ldi	r24, 0x40	; 64
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	40 e0       	ldi	r20, 0x00	; 0
    5784:	68 2f       	mov	r22, r24
    5786:	8b e1       	ldi	r24, 0x1B	; 27
    5788:	95 e2       	ldi	r25, 0x25	; 37
    578a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_HELP_XO_2);
    578e:	86 e8       	ldi	r24, 0x86	; 134
    5790:	9e e2       	ldi	r25, 0x2E	; 46
    5792:	9f 93       	push	r25
    5794:	8f 93       	push	r24
    5796:	1f 92       	push	r1
    5798:	80 e4       	ldi	r24, 0x40	; 64
    579a:	8f 93       	push	r24
    579c:	8b e1       	ldi	r24, 0x1B	; 27
    579e:	95 e2       	ldi	r25, 0x25	; 37
    57a0:	9f 93       	push	r25
    57a2:	8f 93       	push	r24
    57a4:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    57a8:	81 34       	cpi	r24, 0x41	; 65
    57aa:	91 05       	cpc	r25, r1
    57ac:	10 f0       	brcs	.+4      	; 0x57b2 <printHelp+0x600>
    57ae:	80 e4       	ldi	r24, 0x40	; 64
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	40 e0       	ldi	r20, 0x00	; 0
    57b4:	68 2f       	mov	r22, r24
    57b6:	8b e1       	ldi	r24, 0x1B	; 27
    57b8:	95 e2       	ldi	r25, 0x25	; 37
    57ba:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_NewLine);
    57be:	83 e8       	ldi	r24, 0x83	; 131
    57c0:	9e e2       	ldi	r25, 0x2E	; 46
    57c2:	9f 93       	push	r25
    57c4:	8f 93       	push	r24
    57c6:	1f 92       	push	r1
    57c8:	80 e4       	ldi	r24, 0x40	; 64
    57ca:	8f 93       	push	r24
    57cc:	8b e1       	ldi	r24, 0x1B	; 27
    57ce:	95 e2       	ldi	r25, 0x25	; 37
    57d0:	9f 93       	push	r25
    57d2:	8f 93       	push	r24
    57d4:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    57d8:	81 34       	cpi	r24, 0x41	; 65
    57da:	91 05       	cpc	r25, r1
    57dc:	10 f0       	brcs	.+4      	; 0x57e2 <printHelp+0x630>
    57de:	80 e4       	ldi	r24, 0x40	; 64
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	40 e0       	ldi	r20, 0x00	; 0
    57e4:	68 2f       	mov	r22, r24
    57e6:	8b e1       	ldi	r24, 0x1B	; 27
    57e8:	95 e2       	ldi	r25, 0x25	; 37
    57ea:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	if (!s_again) {
    57ee:	8d b7       	in	r24, 0x3d	; 61
    57f0:	9e b7       	in	r25, 0x3e	; 62
    57f2:	0c 96       	adiw	r24, 0x0c	; 12
    57f4:	8d bf       	out	0x3d, r24	; 61
    57f6:	9e bf       	out	0x3e, r25	; 62
    57f8:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <s_again.7770>
    57fc:	81 11       	cpse	r24, r1
    57fe:	21 c0       	rjmp	.+66     	; 0x5842 <printHelp+0x690>
		s_again = true;
    5800:	81 e0       	ldi	r24, 0x01	; 1
    5802:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <s_again.7770>
		len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_CmdLine);
    5806:	8e e7       	ldi	r24, 0x7E	; 126
    5808:	9e e2       	ldi	r25, 0x2E	; 46
    580a:	9f 93       	push	r25
    580c:	8f 93       	push	r24
    580e:	1f 92       	push	r1
    5810:	80 e4       	ldi	r24, 0x40	; 64
    5812:	8f 93       	push	r24
    5814:	8b e1       	ldi	r24, 0x1B	; 27
    5816:	95 e2       	ldi	r25, 0x25	; 37
    5818:	9f 93       	push	r25
    581a:	8f 93       	push	r24
    581c:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
		udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5820:	81 34       	cpi	r24, 0x41	; 65
    5822:	91 05       	cpc	r25, r1
    5824:	10 f0       	brcs	.+4      	; 0x582a <printHelp+0x678>
    5826:	80 e4       	ldi	r24, 0x40	; 64
    5828:	90 e0       	ldi	r25, 0x00	; 0
    582a:	40 e0       	ldi	r20, 0x00	; 0
    582c:	68 2f       	mov	r22, r24
    582e:	8b e1       	ldi	r24, 0x1B	; 27
    5830:	95 e2       	ldi	r25, 0x25	; 37
    5832:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    5836:	0f 90       	pop	r0
    5838:	0f 90       	pop	r0
    583a:	0f 90       	pop	r0
    583c:	0f 90       	pop	r0
    583e:	0f 90       	pop	r0
    5840:	0f 90       	pop	r0
    5842:	08 95       	ret

00005844 <interpreter_doProcess>:
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
}


void interpreter_doProcess(char rx_buf[], iram_size_t rx_len)
{
    5844:	df 92       	push	r13
    5846:	ef 92       	push	r14
    5848:	ff 92       	push	r15
    584a:	0f 93       	push	r16
    584c:	1f 93       	push	r17
    584e:	cf 93       	push	r28
    5850:	df 93       	push	r29
    5852:	cd b7       	in	r28, 0x3d	; 61
    5854:	de b7       	in	r29, 0x3e	; 62
    5856:	2c 97       	sbiw	r28, 0x0c	; 12
    5858:	cd bf       	out	0x3d, r28	; 61
    585a:	de bf       	out	0x3e, r29	; 62
    585c:	7c 01       	movw	r14, r24
    585e:	8b 01       	movw	r16, r22
	/* Sanity checks */
	if (!rx_buf || !rx_len || (rx_len >= (C_RX_CMDLINE_BUF_SIZE - 1))) {
    5860:	89 2b       	or	r24, r25
    5862:	09 f4       	brne	.+2      	; 0x5866 <interpreter_doProcess+0x22>
    5864:	9c c2       	rjmp	.+1336   	; 0x5d9e <interpreter_doProcess+0x55a>
    5866:	cb 01       	movw	r24, r22
    5868:	01 97       	sbiw	r24, 0x01	; 1
    586a:	8e 3f       	cpi	r24, 0xFE	; 254
    586c:	91 05       	cpc	r25, r1
    586e:	08 f0       	brcs	.+2      	; 0x5872 <interpreter_doProcess+0x2e>
    5870:	96 c2       	rjmp	.+1324   	; 0x5d9e <interpreter_doProcess+0x55a>
		return;
	}

	/* Look for line termination */
	char* pos = memchr(rx_buf, '\r', rx_len);
    5872:	ab 01       	movw	r20, r22
    5874:	6d e0       	ldi	r22, 0x0D	; 13
    5876:	70 e0       	ldi	r23, 0x00	; 0
    5878:	c7 01       	movw	r24, r14
    587a:	0e 94 bb 8a 	call	0x11576	; 0x11576 <memchr>

	/* Clipping */
	if ((s_rx_cmdLine_idx + rx_len) >= C_RX_CMDLINE_BUF_SIZE) {
    587e:	d0 90 b1 21 	lds	r13, 0x21B1	; 0x8021b1 <s_rx_cmdLine_idx>
    5882:	2d 2d       	mov	r18, r13
    5884:	30 e0       	ldi	r19, 0x00	; 0
    5886:	a8 01       	movw	r20, r16
    5888:	42 0f       	add	r20, r18
    588a:	53 1f       	adc	r21, r19
    588c:	4f 3f       	cpi	r20, 0xFF	; 255
    588e:	51 05       	cpc	r21, r1
    5890:	51 f0       	breq	.+20     	; 0x58a6 <interpreter_doProcess+0x62>
    5892:	48 f0       	brcs	.+18     	; 0x58a6 <interpreter_doProcess+0x62>
		/* Over sized - clip incoming data on the buffer size limit */
		rx_len = (C_RX_CMDLINE_BUF_SIZE - 1) - s_rx_cmdLine_idx;
    5894:	0f ef       	ldi	r16, 0xFF	; 255
    5896:	10 e0       	ldi	r17, 0x00	; 0
    5898:	0d 19       	sub	r16, r13
    589a:	11 09       	sbc	r17, r1

		/* Adjust pos if the line ending exists */
		if (pos) {
    589c:	89 2b       	or	r24, r25
    589e:	f9 f0       	breq	.+62     	; 0x58de <interpreter_doProcess+0x9a>
			pos = rx_buf + rx_len;
    58a0:	c7 01       	movw	r24, r14
    58a2:	80 0f       	add	r24, r16
    58a4:	91 1f       	adc	r25, r17
		}
	}

	/* Add new chunk to buffer */
	uint8_t pos_len = pos ?  ((pos - rx_buf) + 1) : rx_len;
    58a6:	00 97       	sbiw	r24, 0x00	; 0
    58a8:	d1 f0       	breq	.+52     	; 0x58de <interpreter_doProcess+0x9a>
    58aa:	8e 19       	sub	r24, r14
    58ac:	9f 09       	sbc	r25, r15
    58ae:	11 e0       	ldi	r17, 0x01	; 1
    58b0:	18 0f       	add	r17, r24
	memcpy(s_rx_cmdLine_buf + s_rx_cmdLine_idx, rx_buf, pos_len);
    58b2:	41 2f       	mov	r20, r17
    58b4:	50 e0       	ldi	r21, 0x00	; 0
    58b6:	b7 01       	movw	r22, r14
    58b8:	c9 01       	movw	r24, r18
    58ba:	8e 54       	subi	r24, 0x4E	; 78
    58bc:	9e 4d       	sbci	r25, 0xDE	; 222
    58be:	0e 94 c8 8a 	call	0x11590	; 0x11590 <memcpy>
	s_rx_cmdLine_idx += pos_len;
    58c2:	1d 0d       	add	r17, r13
    58c4:	10 93 b1 21 	sts	0x21B1, r17	; 0x8021b1 <s_rx_cmdLine_idx>

static void executeCmdLine(char* cmdLine_buf, uint8_t cmdLine_len)
{
	/* Process command */
	{
		if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_adc, sizeof(PM_IP_CMD_adc) - 1)) {
    58c8:	44 e0       	ldi	r20, 0x04	; 4
    58ca:	50 e0       	ldi	r21, 0x00	; 0
    58cc:	69 e7       	ldi	r22, 0x79	; 121
    58ce:	7e e2       	ldi	r23, 0x2E	; 46
    58d0:	82 eb       	ldi	r24, 0xB2	; 178
    58d2:	91 e2       	ldi	r25, 0x21	; 33
    58d4:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    58d8:	89 2b       	or	r24, r25
    58da:	51 f5       	brne	.+84     	; 0x5930 <interpreter_doProcess+0xec>
    58dc:	0c c0       	rjmp	.+24     	; 0x58f6 <interpreter_doProcess+0xb2>
		}
	}

	/* Add new chunk to buffer */
	uint8_t pos_len = pos ?  ((pos - rx_buf) + 1) : rx_len;
	memcpy(s_rx_cmdLine_buf + s_rx_cmdLine_idx, rx_buf, pos_len);
    58de:	a8 01       	movw	r20, r16
    58e0:	55 27       	eor	r21, r21
    58e2:	b7 01       	movw	r22, r14
    58e4:	c9 01       	movw	r24, r18
    58e6:	8e 54       	subi	r24, 0x4E	; 78
    58e8:	9e 4d       	sbci	r25, 0xDE	; 222
    58ea:	0e 94 c8 8a 	call	0x11590	; 0x11590 <memcpy>
	s_rx_cmdLine_idx += pos_len;
    58ee:	0d 0d       	add	r16, r13
    58f0:	00 93 b1 21 	sts	0x21B1, r16	; 0x8021b1 <s_rx_cmdLine_idx>
    58f4:	54 c2       	rjmp	.+1192   	; 0x5d9e <interpreter_doProcess+0x55a>
static void executeCmdLine(char* cmdLine_buf, uint8_t cmdLine_len)
{
	/* Process command */
	{
		if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_adc, sizeof(PM_IP_CMD_adc) - 1)) {
			int val[1] = { 0 };
    58f6:	19 82       	std	Y+1, r1	; 0x01
    58f8:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_adc) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    58fa:	ce 01       	movw	r24, r28
    58fc:	01 96       	adiw	r24, 0x01	; 1
    58fe:	7c 01       	movw	r14, r24
    5900:	00 e0       	ldi	r16, 0x00	; 0
    5902:	10 e0       	ldi	r17, 0x00	; 0
    5904:	20 e0       	ldi	r18, 0x00	; 0
    5906:	30 e0       	ldi	r19, 0x00	; 0
    5908:	43 e0       	ldi	r20, 0x03	; 3
    590a:	50 e0       	ldi	r21, 0x00	; 0
    590c:	60 e0       	ldi	r22, 0x00	; 0
    590e:	70 e0       	ldi	r23, 0x00	; 0
    5910:	86 eb       	ldi	r24, 0xB6	; 182
    5912:	91 e2       	ldi	r25, 0x21	; 33
    5914:	0e 94 be 68 	call	0xd17c	; 0xd17c <myStringToVar>
    5918:	89 2b       	or	r24, r25
    591a:	09 f4       	brne	.+2      	; 0x591e <interpreter_doProcess+0xda>
    591c:	20 c2       	rjmp	.+1088   	; 0x5d5e <interpreter_doProcess+0x51a>
				adc_app_enable(val[0]);
    591e:	81 e0       	ldi	r24, 0x01	; 1
    5920:	29 81       	ldd	r18, Y+1	; 0x01
    5922:	3a 81       	ldd	r19, Y+2	; 0x02
    5924:	23 2b       	or	r18, r19
    5926:	09 f4       	brne	.+2      	; 0x592a <interpreter_doProcess+0xe6>
    5928:	80 e0       	ldi	r24, 0x00	; 0
    592a:	0e 94 5e 69 	call	0xd2bc	; 0xd2bc <adc_app_enable>
    592e:	17 c2       	rjmp	.+1070   	; 0x5d5e <interpreter_doProcess+0x51a>
			}

		} else if ((!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_AT,		sizeof(PM_IP_CMD_AT) - 1))		||
    5930:	42 e0       	ldi	r20, 0x02	; 2
    5932:	50 e0       	ldi	r21, 0x00	; 0
    5934:	66 e7       	ldi	r22, 0x76	; 118
    5936:	7e e2       	ldi	r23, 0x2E	; 46
    5938:	82 eb       	ldi	r24, 0xB2	; 178
    593a:	91 e2       	ldi	r25, 0x21	; 33
    593c:	0e 94 70 8a 	call	0x114e0	; 0x114e0 <strncasecmp_P>
    5940:	89 2b       	or	r24, r25
    5942:	51 f0       	breq	.+20     	; 0x5958 <interpreter_doProcess+0x114>
				   (!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_A_slash,	sizeof(PM_IP_CMD_A_slash) - 1))) {
    5944:	42 e0       	ldi	r20, 0x02	; 2
    5946:	50 e0       	ldi	r21, 0x00	; 0
    5948:	63 e7       	ldi	r22, 0x73	; 115
    594a:	7e e2       	ldi	r23, 0x2E	; 46
    594c:	82 eb       	ldi	r24, 0xB2	; 178
    594e:	91 e2       	ldi	r25, 0x21	; 33
    5950:	0e 94 70 8a 	call	0x114e0	; 0x114e0 <strncasecmp_P>
			int val[1] = { 0 };
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_adc) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
				adc_app_enable(val[0]);
			}

		} else if ((!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_AT,		sizeof(PM_IP_CMD_AT) - 1))		||
    5954:	89 2b       	or	r24, r25
    5956:	31 f4       	brne	.+12     	; 0x5964 <interpreter_doProcess+0x120>
				   (!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_A_slash,	sizeof(PM_IP_CMD_A_slash) - 1))) {
				serial_sim808_send(cmdLine_buf, cmdLine_len);
    5958:	61 2f       	mov	r22, r17
    595a:	82 eb       	ldi	r24, 0xB2	; 178
    595c:	91 e2       	ldi	r25, 0x21	; 33
    595e:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <serial_sim808_send>
    5962:	fd c1       	rjmp	.+1018   	; 0x5d5e <interpreter_doProcess+0x51a>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_bias, sizeof(PM_IP_CMD_bias) - 1)) {
    5964:	45 e0       	ldi	r20, 0x05	; 5
    5966:	50 e0       	ldi	r21, 0x00	; 0
    5968:	6d e6       	ldi	r22, 0x6D	; 109
    596a:	7e e2       	ldi	r23, 0x2E	; 46
    596c:	82 eb       	ldi	r24, 0xB2	; 178
    596e:	91 e2       	ldi	r25, 0x21	; 33
    5970:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5974:	89 2b       	or	r24, r25
    5976:	c1 f4       	brne	.+48     	; 0x59a8 <interpreter_doProcess+0x164>
			int val[1] = { 0 };
    5978:	19 82       	std	Y+1, r1	; 0x01
    597a:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_bias) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    597c:	ce 01       	movw	r24, r28
    597e:	01 96       	adiw	r24, 0x01	; 1
    5980:	7c 01       	movw	r14, r24
    5982:	00 e0       	ldi	r16, 0x00	; 0
    5984:	10 e0       	ldi	r17, 0x00	; 0
    5986:	20 e0       	ldi	r18, 0x00	; 0
    5988:	30 e0       	ldi	r19, 0x00	; 0
    598a:	43 e0       	ldi	r20, 0x03	; 3
    598c:	50 e0       	ldi	r21, 0x00	; 0
    598e:	60 e0       	ldi	r22, 0x00	; 0
    5990:	70 e0       	ldi	r23, 0x00	; 0
    5992:	87 eb       	ldi	r24, 0xB7	; 183
    5994:	91 e2       	ldi	r25, 0x21	; 33
    5996:	0e 94 be 68 	call	0xd17c	; 0xd17c <myStringToVar>
    599a:	89 2b       	or	r24, r25
    599c:	09 f4       	brne	.+2      	; 0x59a0 <interpreter_doProcess+0x15c>
    599e:	df c1       	rjmp	.+958    	; 0x5d5e <interpreter_doProcess+0x51a>
				bias_update(val[0]);
    59a0:	89 81       	ldd	r24, Y+1	; 0x01
    59a2:	0e 94 9e 69 	call	0xd33c	; 0xd33c <bias_update>
    59a6:	db c1       	rjmp	.+950    	; 0x5d5e <interpreter_doProcess+0x51a>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_bl, sizeof(PM_IP_CMD_bl) - 1)) {
    59a8:	43 e0       	ldi	r20, 0x03	; 3
    59aa:	50 e0       	ldi	r21, 0x00	; 0
    59ac:	69 e6       	ldi	r22, 0x69	; 105
    59ae:	7e e2       	ldi	r23, 0x2E	; 46
    59b0:	82 eb       	ldi	r24, 0xB2	; 178
    59b2:	91 e2       	ldi	r25, 0x21	; 33
    59b4:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    59b8:	89 2b       	or	r24, r25
    59ba:	c9 f4       	brne	.+50     	; 0x59ee <interpreter_doProcess+0x1aa>
			int val[1] = { 0 };
    59bc:	19 82       	std	Y+1, r1	; 0x01
    59be:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_bl) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    59c0:	ce 01       	movw	r24, r28
    59c2:	01 96       	adiw	r24, 0x01	; 1
    59c4:	7c 01       	movw	r14, r24
    59c6:	00 e0       	ldi	r16, 0x00	; 0
    59c8:	10 e0       	ldi	r17, 0x00	; 0
    59ca:	20 e0       	ldi	r18, 0x00	; 0
    59cc:	30 e0       	ldi	r19, 0x00	; 0
    59ce:	43 e0       	ldi	r20, 0x03	; 3
    59d0:	50 e0       	ldi	r21, 0x00	; 0
    59d2:	60 e0       	ldi	r22, 0x00	; 0
    59d4:	70 e0       	ldi	r23, 0x00	; 0
    59d6:	85 eb       	ldi	r24, 0xB5	; 181
    59d8:	91 e2       	ldi	r25, 0x21	; 33
    59da:	0e 94 be 68 	call	0xd17c	; 0xd17c <myStringToVar>
    59de:	89 2b       	or	r24, r25
    59e0:	09 f4       	brne	.+2      	; 0x59e4 <interpreter_doProcess+0x1a0>
    59e2:	bd c1       	rjmp	.+890    	; 0x5d5e <interpreter_doProcess+0x51a>
				backlight_mode_pwm(val[0]);
    59e4:	89 81       	ldd	r24, Y+1	; 0x01
    59e6:	9a 81       	ldd	r25, Y+2	; 0x02
    59e8:	0e 94 81 69 	call	0xd302	; 0xd302 <backlight_mode_pwm>
    59ec:	b8 c1       	rjmp	.+880    	; 0x5d5e <interpreter_doProcess+0x51a>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_cal_defaults, sizeof(PM_IP_CMD_cal_defaults) - 1)) {
    59ee:	4c e0       	ldi	r20, 0x0C	; 12
    59f0:	50 e0       	ldi	r21, 0x00	; 0
    59f2:	6b e3       	ldi	r22, 0x3B	; 59
    59f4:	7e e2       	ldi	r23, 0x2E	; 46
    59f6:	82 eb       	ldi	r24, 0xB2	; 178
    59f8:	91 e2       	ldi	r25, 0x21	; 33
    59fa:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    59fe:	89 2b       	or	r24, r25
    5a00:	21 f4       	brne	.+8      	; 0x5a0a <interpreter_doProcess+0x1c6>
			calibration_mode(CALIBRATION_MODE_ENUM__DEFAULTS);
    5a02:	80 e0       	ldi	r24, 0x00	; 0
    5a04:	0e 94 a4 69 	call	0xd348	; 0xd348 <calibration_mode>
    5a08:	aa c1       	rjmp	.+852    	; 0x5d5e <interpreter_doProcess+0x51a>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_cal_accelx, sizeof(PM_IP_CMD_cal_accelx) - 1)) {
    5a0a:	4a e0       	ldi	r20, 0x0A	; 10
    5a0c:	50 e0       	ldi	r21, 0x00	; 0
    5a0e:	6e e5       	ldi	r22, 0x5E	; 94
    5a10:	7e e2       	ldi	r23, 0x2E	; 46
    5a12:	82 eb       	ldi	r24, 0xB2	; 178
    5a14:	91 e2       	ldi	r25, 0x21	; 33
    5a16:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5a1a:	89 2b       	or	r24, r25
    5a1c:	21 f4       	brne	.+8      	; 0x5a26 <interpreter_doProcess+0x1e2>
			calibration_mode(CALIBRATION_MODE_ENUM__ACCEL_X);
    5a1e:	81 e0       	ldi	r24, 0x01	; 1
    5a20:	0e 94 a4 69 	call	0xd348	; 0xd348 <calibration_mode>
    5a24:	9c c1       	rjmp	.+824    	; 0x5d5e <interpreter_doProcess+0x51a>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_cal_accely, sizeof(PM_IP_CMD_cal_accely) - 1)) {
    5a26:	4a e0       	ldi	r20, 0x0A	; 10
    5a28:	50 e0       	ldi	r21, 0x00	; 0
    5a2a:	63 e5       	ldi	r22, 0x53	; 83
    5a2c:	7e e2       	ldi	r23, 0x2E	; 46
    5a2e:	82 eb       	ldi	r24, 0xB2	; 178
    5a30:	91 e2       	ldi	r25, 0x21	; 33
    5a32:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5a36:	89 2b       	or	r24, r25
    5a38:	21 f4       	brne	.+8      	; 0x5a42 <interpreter_doProcess+0x1fe>
			calibration_mode(CALIBRATION_MODE_ENUM__ACCEL_Y);
    5a3a:	82 e0       	ldi	r24, 0x02	; 2
    5a3c:	0e 94 a4 69 	call	0xd348	; 0xd348 <calibration_mode>
    5a40:	8e c1       	rjmp	.+796    	; 0x5d5e <interpreter_doProcess+0x51a>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_cal_accelz, sizeof(PM_IP_CMD_cal_accelz) - 1)) {
    5a42:	4a e0       	ldi	r20, 0x0A	; 10
    5a44:	50 e0       	ldi	r21, 0x00	; 0
    5a46:	68 e4       	ldi	r22, 0x48	; 72
    5a48:	7e e2       	ldi	r23, 0x2E	; 46
    5a4a:	82 eb       	ldi	r24, 0xB2	; 178
    5a4c:	91 e2       	ldi	r25, 0x21	; 33
    5a4e:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5a52:	89 2b       	or	r24, r25
    5a54:	21 f4       	brne	.+8      	; 0x5a5e <interpreter_doProcess+0x21a>
			calibration_mode(CALIBRATION_MODE_ENUM__ACCEL_Z);
    5a56:	83 e0       	ldi	r24, 0x03	; 3
    5a58:	0e 94 a4 69 	call	0xd348	; 0xd348 <calibration_mode>
    5a5c:	80 c1       	rjmp	.+768    	; 0x5d5e <interpreter_doProcess+0x51a>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_cal_gyro, sizeof(PM_IP_CMD_cal_gyro) - 1)) {
    5a5e:	48 e0       	ldi	r20, 0x08	; 8
    5a60:	50 e0       	ldi	r21, 0x00	; 0
    5a62:	62 e3       	ldi	r22, 0x32	; 50
    5a64:	7e e2       	ldi	r23, 0x2E	; 46
    5a66:	82 eb       	ldi	r24, 0xB2	; 178
    5a68:	91 e2       	ldi	r25, 0x21	; 33
    5a6a:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5a6e:	89 2b       	or	r24, r25
    5a70:	21 f4       	brne	.+8      	; 0x5a7a <interpreter_doProcess+0x236>
			calibration_mode(CALIBRATION_MODE_ENUM__GYRO);
    5a72:	84 e0       	ldi	r24, 0x04	; 4
    5a74:	0e 94 a4 69 	call	0xd348	; 0xd348 <calibration_mode>
    5a78:	72 c1       	rjmp	.+740    	; 0x5d5e <interpreter_doProcess+0x51a>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_dac, sizeof(PM_IP_CMD_dac) - 1)) {
    5a7a:	44 e0       	ldi	r20, 0x04	; 4
    5a7c:	50 e0       	ldi	r21, 0x00	; 0
    5a7e:	6d e2       	ldi	r22, 0x2D	; 45
    5a80:	7e e2       	ldi	r23, 0x2E	; 46
    5a82:	82 eb       	ldi	r24, 0xB2	; 178
    5a84:	91 e2       	ldi	r25, 0x21	; 33
    5a86:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5a8a:	89 2b       	or	r24, r25
    5a8c:	e9 f4       	brne	.+58     	; 0x5ac8 <interpreter_doProcess+0x284>
			int val[1] = { 0 };
    5a8e:	19 82       	std	Y+1, r1	; 0x01
    5a90:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_dac) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5a92:	ce 01       	movw	r24, r28
    5a94:	01 96       	adiw	r24, 0x01	; 1
    5a96:	7c 01       	movw	r14, r24
    5a98:	00 e0       	ldi	r16, 0x00	; 0
    5a9a:	10 e0       	ldi	r17, 0x00	; 0
    5a9c:	20 e0       	ldi	r18, 0x00	; 0
    5a9e:	30 e0       	ldi	r19, 0x00	; 0
    5aa0:	43 e0       	ldi	r20, 0x03	; 3
    5aa2:	50 e0       	ldi	r21, 0x00	; 0
    5aa4:	60 e0       	ldi	r22, 0x00	; 0
    5aa6:	70 e0       	ldi	r23, 0x00	; 0
    5aa8:	86 eb       	ldi	r24, 0xB6	; 182
    5aaa:	91 e2       	ldi	r25, 0x21	; 33
    5aac:	0e 94 be 68 	call	0xd17c	; 0xd17c <myStringToVar>
    5ab0:	89 2b       	or	r24, r25
    5ab2:	09 f4       	brne	.+2      	; 0x5ab6 <interpreter_doProcess+0x272>
    5ab4:	54 c1       	rjmp	.+680    	; 0x5d5e <interpreter_doProcess+0x51a>
				dac_app_enable(val[0]);
    5ab6:	81 e0       	ldi	r24, 0x01	; 1
    5ab8:	29 81       	ldd	r18, Y+1	; 0x01
    5aba:	3a 81       	ldd	r19, Y+2	; 0x02
    5abc:	23 2b       	or	r18, r19
    5abe:	09 f4       	brne	.+2      	; 0x5ac2 <interpreter_doProcess+0x27e>
    5ac0:	80 e0       	ldi	r24, 0x00	; 0
    5ac2:	0e 94 48 6b 	call	0xd690	; 0xd690 <dac_app_enable>
    5ac6:	4b c1       	rjmp	.+662    	; 0x5d5e <interpreter_doProcess+0x51a>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_dds, sizeof(PM_IP_CMD_dds) - 1)) {
    5ac8:	44 e0       	ldi	r20, 0x04	; 4
    5aca:	50 e0       	ldi	r21, 0x00	; 0
    5acc:	68 e2       	ldi	r22, 0x28	; 40
    5ace:	7e e2       	ldi	r23, 0x2E	; 46
    5ad0:	82 eb       	ldi	r24, 0xB2	; 178
    5ad2:	91 e2       	ldi	r25, 0x21	; 33
    5ad4:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5ad8:	89 2b       	or	r24, r25
    5ada:	51 f5       	brne	.+84     	; 0x5b30 <interpreter_doProcess+0x2ec>
			float val[3] = { -1.f, -1.f, -1.f };
    5adc:	8c e0       	ldi	r24, 0x0C	; 12
    5ade:	e4 e0       	ldi	r30, 0x04	; 4
    5ae0:	f1 e2       	ldi	r31, 0x21	; 33
    5ae2:	de 01       	movw	r26, r28
    5ae4:	11 96       	adiw	r26, 0x01	; 1
    5ae6:	01 90       	ld	r0, Z+
    5ae8:	0d 92       	st	X+, r0
    5aea:	8a 95       	dec	r24
    5aec:	e1 f7       	brne	.-8      	; 0x5ae6 <interpreter_doProcess+0x2a2>
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_dds) - 1), MY_STRING_TO_VAR_FLOAT | (MY_STRING_TO_VAR_FLOAT << 2) | (MY_STRING_TO_VAR_FLOAT << 4), &(val[0]), NULL, NULL)) {
    5aee:	e1 2c       	mov	r14, r1
    5af0:	f1 2c       	mov	r15, r1
    5af2:	00 e0       	ldi	r16, 0x00	; 0
    5af4:	10 e0       	ldi	r17, 0x00	; 0
    5af6:	9e 01       	movw	r18, r28
    5af8:	2f 5f       	subi	r18, 0xFF	; 255
    5afa:	3f 4f       	sbci	r19, 0xFF	; 255
    5afc:	45 e1       	ldi	r20, 0x15	; 21
    5afe:	50 e0       	ldi	r21, 0x00	; 0
    5b00:	60 e0       	ldi	r22, 0x00	; 0
    5b02:	70 e0       	ldi	r23, 0x00	; 0
    5b04:	86 eb       	ldi	r24, 0xB6	; 182
    5b06:	91 e2       	ldi	r25, 0x21	; 33
    5b08:	0e 94 be 68 	call	0xd17c	; 0xd17c <myStringToVar>
    5b0c:	89 2b       	or	r24, r25
    5b0e:	09 f4       	brne	.+2      	; 0x5b12 <interpreter_doProcess+0x2ce>
    5b10:	26 c1       	rjmp	.+588    	; 0x5d5e <interpreter_doProcess+0x51a>
				dds_update(val[0], val[1], val[2]);
    5b12:	e9 84       	ldd	r14, Y+9	; 0x09
    5b14:	fa 84       	ldd	r15, Y+10	; 0x0a
    5b16:	0b 85       	ldd	r16, Y+11	; 0x0b
    5b18:	1c 85       	ldd	r17, Y+12	; 0x0c
    5b1a:	2d 81       	ldd	r18, Y+5	; 0x05
    5b1c:	3e 81       	ldd	r19, Y+6	; 0x06
    5b1e:	4f 81       	ldd	r20, Y+7	; 0x07
    5b20:	58 85       	ldd	r21, Y+8	; 0x08
    5b22:	69 81       	ldd	r22, Y+1	; 0x01
    5b24:	7a 81       	ldd	r23, Y+2	; 0x02
    5b26:	8b 81       	ldd	r24, Y+3	; 0x03
    5b28:	9c 81       	ldd	r25, Y+4	; 0x04
    5b2a:	0e 94 f0 6e 	call	0xdde0	; 0xdde0 <dds_update>
    5b2e:	17 c1       	rjmp	.+558    	; 0x5d5e <interpreter_doProcess+0x51a>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_eb, sizeof(PM_IP_CMD_eb) - 1)) {
    5b30:	43 e0       	ldi	r20, 0x03	; 3
    5b32:	50 e0       	ldi	r21, 0x00	; 0
    5b34:	64 e2       	ldi	r22, 0x24	; 36
    5b36:	7e e2       	ldi	r23, 0x2E	; 46
    5b38:	82 eb       	ldi	r24, 0xB2	; 178
    5b3a:	91 e2       	ldi	r25, 0x21	; 33
    5b3c:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5b40:	89 2b       	or	r24, r25
    5b42:	e9 f4       	brne	.+58     	; 0x5b7e <interpreter_doProcess+0x33a>
			int val[1] = { 0 };
    5b44:	19 82       	std	Y+1, r1	; 0x01
    5b46:	1a 82       	std	Y+2, r1	; 0x02
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_eb) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5b48:	ce 01       	movw	r24, r28
    5b4a:	01 96       	adiw	r24, 0x01	; 1
    5b4c:	7c 01       	movw	r14, r24
    5b4e:	00 e0       	ldi	r16, 0x00	; 0
    5b50:	10 e0       	ldi	r17, 0x00	; 0
    5b52:	20 e0       	ldi	r18, 0x00	; 0
    5b54:	30 e0       	ldi	r19, 0x00	; 0
    5b56:	43 e0       	ldi	r20, 0x03	; 3
    5b58:	50 e0       	ldi	r21, 0x00	; 0
    5b5a:	60 e0       	ldi	r22, 0x00	; 0
    5b5c:	70 e0       	ldi	r23, 0x00	; 0
    5b5e:	85 eb       	ldi	r24, 0xB5	; 181
    5b60:	91 e2       	ldi	r25, 0x21	; 33
    5b62:	0e 94 be 68 	call	0xd17c	; 0xd17c <myStringToVar>
    5b66:	89 2b       	or	r24, r25
    5b68:	09 f4       	brne	.+2      	; 0x5b6c <interpreter_doProcess+0x328>
    5b6a:	f9 c0       	rjmp	.+498    	; 0x5d5e <interpreter_doProcess+0x51a>
				errorBeep_enable(val[0]);
    5b6c:	81 e0       	ldi	r24, 0x01	; 1
    5b6e:	29 81       	ldd	r18, Y+1	; 0x01
    5b70:	3a 81       	ldd	r19, Y+2	; 0x02
    5b72:	23 2b       	or	r18, r19
    5b74:	09 f4       	brne	.+2      	; 0x5b78 <interpreter_doProcess+0x334>
    5b76:	80 e0       	ldi	r24, 0x00	; 0
    5b78:	0e 94 98 6b 	call	0xd730	; 0xd730 <errorBeep_enable>
    5b7c:	f0 c0       	rjmp	.+480    	; 0x5d5e <interpreter_doProcess+0x51a>
			}

		} else if (!strncasecmp_P((char*)cmdLine_buf, PM_IP_CMD_help, sizeof(PM_IP_CMD_help) - 1)) {
    5b7e:	44 e0       	ldi	r20, 0x04	; 4
    5b80:	50 e0       	ldi	r21, 0x00	; 0
    5b82:	69 e1       	ldi	r22, 0x19	; 25
    5b84:	7e e2       	ldi	r23, 0x2E	; 46
    5b86:	82 eb       	ldi	r24, 0xB2	; 178
    5b88:	91 e2       	ldi	r25, 0x21	; 33
    5b8a:	0e 94 70 8a 	call	0x114e0	; 0x114e0 <strncasecmp_P>
    5b8e:	89 2b       	or	r24, r25
			printHelp();
    5b90:	11 f4       	brne	.+4      	; 0x5b96 <interpreter_doProcess+0x352>
    5b92:	0f db       	rcall	.-2530   	; 0x51b2 <printHelp>

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_info, sizeof(PM_IP_CMD_info) - 1)) {
    5b94:	e4 c0       	rjmp	.+456    	; 0x5d5e <interpreter_doProcess+0x51a>
    5b96:	45 e0       	ldi	r20, 0x05	; 5
    5b98:	50 e0       	ldi	r21, 0x00	; 0
    5b9a:	6e e1       	ldi	r22, 0x1E	; 30
    5b9c:	7e e2       	ldi	r23, 0x2E	; 46
    5b9e:	82 eb       	ldi	r24, 0xB2	; 178
    5ba0:	91 e2       	ldi	r25, 0x21	; 33
    5ba2:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5ba6:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5ba8:	c1 f4       	brne	.+48     	; 0x5bda <interpreter_doProcess+0x396>
    5baa:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_info) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5bac:	1a 82       	std	Y+2, r1	; 0x02
    5bae:	ce 01       	movw	r24, r28
    5bb0:	01 96       	adiw	r24, 0x01	; 1
    5bb2:	7c 01       	movw	r14, r24
    5bb4:	00 e0       	ldi	r16, 0x00	; 0
    5bb6:	10 e0       	ldi	r17, 0x00	; 0
    5bb8:	20 e0       	ldi	r18, 0x00	; 0
    5bba:	30 e0       	ldi	r19, 0x00	; 0
    5bbc:	43 e0       	ldi	r20, 0x03	; 3
    5bbe:	50 e0       	ldi	r21, 0x00	; 0
    5bc0:	60 e0       	ldi	r22, 0x00	; 0
    5bc2:	70 e0       	ldi	r23, 0x00	; 0
    5bc4:	87 eb       	ldi	r24, 0xB7	; 183
    5bc6:	91 e2       	ldi	r25, 0x21	; 33
    5bc8:	0e 94 be 68 	call	0xd17c	; 0xd17c <myStringToVar>
    5bcc:	89 2b       	or	r24, r25
    5bce:	09 f4       	brne	.+2      	; 0x5bd2 <interpreter_doProcess+0x38e>
				printStatusLines_bitfield(val[0]);
    5bd0:	c6 c0       	rjmp	.+396    	; 0x5d5e <interpreter_doProcess+0x51a>
    5bd2:	89 81       	ldd	r24, Y+1	; 0x01
    5bd4:	0e 94 a7 6b 	call	0xd74e	; 0xd74e <printStatusLines_bitfield>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_kb, sizeof(PM_IP_CMD_kb) - 1)) {
    5bd8:	c2 c0       	rjmp	.+388    	; 0x5d5e <interpreter_doProcess+0x51a>
    5bda:	43 e0       	ldi	r20, 0x03	; 3
    5bdc:	50 e0       	ldi	r21, 0x00	; 0
    5bde:	65 e1       	ldi	r22, 0x15	; 21
    5be0:	7e e2       	ldi	r23, 0x2E	; 46
    5be2:	82 eb       	ldi	r24, 0xB2	; 178
    5be4:	91 e2       	ldi	r25, 0x21	; 33
    5be6:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5bea:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5bec:	e9 f4       	brne	.+58     	; 0x5c28 <interpreter_doProcess+0x3e4>
    5bee:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_kb) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5bf0:	1a 82       	std	Y+2, r1	; 0x02
    5bf2:	ce 01       	movw	r24, r28
    5bf4:	01 96       	adiw	r24, 0x01	; 1
    5bf6:	7c 01       	movw	r14, r24
    5bf8:	00 e0       	ldi	r16, 0x00	; 0
    5bfa:	10 e0       	ldi	r17, 0x00	; 0
    5bfc:	20 e0       	ldi	r18, 0x00	; 0
    5bfe:	30 e0       	ldi	r19, 0x00	; 0
    5c00:	43 e0       	ldi	r20, 0x03	; 3
    5c02:	50 e0       	ldi	r21, 0x00	; 0
    5c04:	60 e0       	ldi	r22, 0x00	; 0
    5c06:	70 e0       	ldi	r23, 0x00	; 0
    5c08:	85 eb       	ldi	r24, 0xB5	; 181
    5c0a:	91 e2       	ldi	r25, 0x21	; 33
    5c0c:	0e 94 be 68 	call	0xd17c	; 0xd17c <myStringToVar>
    5c10:	89 2b       	or	r24, r25
    5c12:	09 f4       	brne	.+2      	; 0x5c16 <interpreter_doProcess+0x3d2>
				keyBeep_enable(val[0]);
    5c14:	a4 c0       	rjmp	.+328    	; 0x5d5e <interpreter_doProcess+0x51a>
    5c16:	81 e0       	ldi	r24, 0x01	; 1
    5c18:	29 81       	ldd	r18, Y+1	; 0x01
    5c1a:	3a 81       	ldd	r19, Y+2	; 0x02
    5c1c:	23 2b       	or	r18, r19
    5c1e:	09 f4       	brne	.+2      	; 0x5c22 <interpreter_doProcess+0x3de>
    5c20:	80 e0       	ldi	r24, 0x00	; 0
    5c22:	0e 94 9d 6b 	call	0xd73a	; 0xd73a <keyBeep_enable>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_pt, sizeof(PM_IP_CMD_pt) - 1)) {
    5c26:	9b c0       	rjmp	.+310    	; 0x5d5e <interpreter_doProcess+0x51a>
    5c28:	43 e0       	ldi	r20, 0x03	; 3
    5c2a:	50 e0       	ldi	r21, 0x00	; 0
    5c2c:	61 e1       	ldi	r22, 0x11	; 17
    5c2e:	7e e2       	ldi	r23, 0x2E	; 46
    5c30:	82 eb       	ldi	r24, 0xB2	; 178
    5c32:	91 e2       	ldi	r25, 0x21	; 33
    5c34:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5c38:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5c3a:	c1 f4       	brne	.+48     	; 0x5c6c <interpreter_doProcess+0x428>
    5c3c:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_pt) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5c3e:	1a 82       	std	Y+2, r1	; 0x02
    5c40:	ce 01       	movw	r24, r28
    5c42:	01 96       	adiw	r24, 0x01	; 1
    5c44:	7c 01       	movw	r14, r24
    5c46:	00 e0       	ldi	r16, 0x00	; 0
    5c48:	10 e0       	ldi	r17, 0x00	; 0
    5c4a:	20 e0       	ldi	r18, 0x00	; 0
    5c4c:	30 e0       	ldi	r19, 0x00	; 0
    5c4e:	43 e0       	ldi	r20, 0x03	; 3
    5c50:	50 e0       	ldi	r21, 0x00	; 0
    5c52:	60 e0       	ldi	r22, 0x00	; 0
    5c54:	70 e0       	ldi	r23, 0x00	; 0
    5c56:	85 eb       	ldi	r24, 0xB5	; 181
    5c58:	91 e2       	ldi	r25, 0x21	; 33
    5c5a:	0e 94 be 68 	call	0xd17c	; 0xd17c <myStringToVar>
    5c5e:	89 2b       	or	r24, r25
    5c60:	09 f4       	brne	.+2      	; 0x5c64 <interpreter_doProcess+0x420>
				pitchTone_mode(val[0]);
    5c62:	7d c0       	rjmp	.+250    	; 0x5d5e <interpreter_doProcess+0x51a>
    5c64:	89 81       	ldd	r24, Y+1	; 0x01
    5c66:	0e 94 a2 6b 	call	0xd744	; 0xd744 <pitchTone_mode>
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_reset, sizeof(PM_IP_CMD_reset) - 1)) {
    5c6a:	79 c0       	rjmp	.+242    	; 0x5d5e <interpreter_doProcess+0x51a>
    5c6c:	46 e0       	ldi	r20, 0x06	; 6
    5c6e:	50 e0       	ldi	r21, 0x00	; 0
    5c70:	6a e0       	ldi	r22, 0x0A	; 10
    5c72:	7e e2       	ldi	r23, 0x2E	; 46
    5c74:	82 eb       	ldi	r24, 0xB2	; 178
    5c76:	91 e2       	ldi	r25, 0x21	; 33
    5c78:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5c7c:	89 2b       	or	r24, r25
			int val[1] = { 0 };
    5c7e:	01 f5       	brne	.+64     	; 0x5cc0 <interpreter_doProcess+0x47c>
    5c80:	19 82       	std	Y+1, r1	; 0x01
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_reset) - 1), MY_STRING_TO_VAR_INT, NULL, NULL, &(val[0]))) {
    5c82:	1a 82       	std	Y+2, r1	; 0x02
    5c84:	ce 01       	movw	r24, r28
    5c86:	01 96       	adiw	r24, 0x01	; 1
    5c88:	7c 01       	movw	r14, r24
    5c8a:	00 e0       	ldi	r16, 0x00	; 0
    5c8c:	10 e0       	ldi	r17, 0x00	; 0
    5c8e:	20 e0       	ldi	r18, 0x00	; 0
    5c90:	30 e0       	ldi	r19, 0x00	; 0
    5c92:	43 e0       	ldi	r20, 0x03	; 3
    5c94:	50 e0       	ldi	r21, 0x00	; 0
    5c96:	60 e0       	ldi	r22, 0x00	; 0
    5c98:	70 e0       	ldi	r23, 0x00	; 0
    5c9a:	88 eb       	ldi	r24, 0xB8	; 184
    5c9c:	91 e2       	ldi	r25, 0x21	; 33
    5c9e:	0e 94 be 68 	call	0xd17c	; 0xd17c <myStringToVar>
    5ca2:	89 2b       	or	r24, r25
    5ca4:	09 f4       	brne	.+2      	; 0x5ca8 <interpreter_doProcess+0x464>
				if (val[0] == 1) {
    5ca6:	5b c0       	rjmp	.+182    	; 0x5d5e <interpreter_doProcess+0x51a>
    5ca8:	89 81       	ldd	r24, Y+1	; 0x01
    5caa:	9a 81       	ldd	r25, Y+2	; 0x02
    5cac:	01 97       	sbiw	r24, 0x01	; 1
    5cae:	09 f0       	breq	.+2      	; 0x5cb2 <interpreter_doProcess+0x46e>
					/* Terminate the USB connection */
					stdio_usb_disable();
    5cb0:	56 c0       	rjmp	.+172    	; 0x5d5e <interpreter_doProcess+0x51a>
    5cb2:	0e 94 1c 7d 	call	0xfa38	; 0xfa38 <stdio_usb_disable>
					udc_stop();
    5cb6:	0e 94 f1 79 	call	0xf3e2	; 0xf3e2 <udc_stop>

					asm volatile(
    5cba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
						:
					);
				}
			}

		} else if (!strncmp_P((char*)cmdLine_buf, PM_IP_CMD_xo, sizeof(PM_IP_CMD_xo) - 1)) {
    5cbe:	4f c0       	rjmp	.+158    	; 0x5d5e <interpreter_doProcess+0x51a>
    5cc0:	43 e0       	ldi	r20, 0x03	; 3
    5cc2:	50 e0       	ldi	r21, 0x00	; 0
    5cc4:	66 e0       	ldi	r22, 0x06	; 6
    5cc6:	7e e2       	ldi	r23, 0x2E	; 46
    5cc8:	82 eb       	ldi	r24, 0xB2	; 178
    5cca:	91 e2       	ldi	r25, 0x21	; 33
    5ccc:	0e 94 88 8a 	call	0x11510	; 0x11510 <strncmp_P>
    5cd0:	89 2b       	or	r24, r25
			long val[1] = { 0 };
    5cd2:	e1 f4       	brne	.+56     	; 0x5d0c <interpreter_doProcess+0x4c8>
    5cd4:	19 82       	std	Y+1, r1	; 0x01
    5cd6:	1a 82       	std	Y+2, r1	; 0x02
    5cd8:	1b 82       	std	Y+3, r1	; 0x03
			if (myStringToVar((char*)cmdLine_buf + (sizeof(PM_IP_CMD_xo) - 1), MY_STRING_TO_VAR_LONG, NULL, &(val[0]), NULL)) {
    5cda:	1c 82       	std	Y+4, r1	; 0x04
    5cdc:	e1 2c       	mov	r14, r1
    5cde:	f1 2c       	mov	r15, r1
    5ce0:	8e 01       	movw	r16, r28
    5ce2:	0f 5f       	subi	r16, 0xFF	; 255
    5ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ce6:	20 e0       	ldi	r18, 0x00	; 0
    5ce8:	30 e0       	ldi	r19, 0x00	; 0
    5cea:	42 e0       	ldi	r20, 0x02	; 2
    5cec:	50 e0       	ldi	r21, 0x00	; 0
    5cee:	60 e0       	ldi	r22, 0x00	; 0
    5cf0:	70 e0       	ldi	r23, 0x00	; 0
    5cf2:	85 eb       	ldi	r24, 0xB5	; 181
    5cf4:	91 e2       	ldi	r25, 0x21	; 33
    5cf6:	0e 94 be 68 	call	0xd17c	; 0xd17c <myStringToVar>
    5cfa:	89 2b       	or	r24, r25
				xoPwm_set(val[0]);
    5cfc:	81 f1       	breq	.+96     	; 0x5d5e <interpreter_doProcess+0x51a>
    5cfe:	69 81       	ldd	r22, Y+1	; 0x01
    5d00:	7a 81       	ldd	r23, Y+2	; 0x02
    5d02:	8b 81       	ldd	r24, Y+3	; 0x03
    5d04:	9c 81       	ldd	r25, Y+4	; 0x04
    5d06:	0e 94 b4 6b 	call	0xd768	; 0xd768 <xoPwm_set>
			}

		} else {
			int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_UNKNOWN_01);
    5d0a:	29 c0       	rjmp	.+82     	; 0x5d5e <interpreter_doProcess+0x51a>
    5d0c:	81 ed       	ldi	r24, 0xD1	; 209
    5d0e:	9d e2       	ldi	r25, 0x2D	; 45
    5d10:	9f 93       	push	r25
    5d12:	8f 93       	push	r24
    5d14:	1f 92       	push	r1
    5d16:	80 e4       	ldi	r24, 0x40	; 64
    5d18:	8f 93       	push	r24
    5d1a:	8b e1       	ldi	r24, 0x1B	; 27
    5d1c:	95 e2       	ldi	r25, 0x25	; 37
    5d1e:	9f 93       	push	r25
    5d20:	8f 93       	push	r24
    5d22:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
			udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5d26:	81 34       	cpi	r24, 0x41	; 65
    5d28:	91 05       	cpc	r25, r1
    5d2a:	10 f0       	brcs	.+4      	; 0x5d30 <interpreter_doProcess+0x4ec>
    5d2c:	80 e4       	ldi	r24, 0x40	; 64
    5d2e:	90 e0       	ldi	r25, 0x00	; 0
    5d30:	40 e0       	ldi	r20, 0x00	; 0
    5d32:	68 2f       	mov	r22, r24
    5d34:	8b e1       	ldi	r24, 0x1B	; 27
    5d36:	95 e2       	ldi	r25, 0x25	; 37
    5d38:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

			if (g_errorBeep_enable) {
    5d3c:	0f 90       	pop	r0
    5d3e:	0f 90       	pop	r0
    5d40:	0f 90       	pop	r0
    5d42:	0f 90       	pop	r0
    5d44:	0f 90       	pop	r0
    5d46:	0f 90       	pop	r0
    5d48:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <g_errorBeep_enable>
    5d4c:	88 23       	and	r24, r24
				twi2_set_beep(100, 10);  // Bad sound
    5d4e:	39 f0       	breq	.+14     	; 0x5d5e <interpreter_doProcess+0x51a>
    5d50:	6a e0       	ldi	r22, 0x0A	; 10
    5d52:	84 e6       	ldi	r24, 0x64	; 100
				yield_ms(125);
    5d54:	41 d7       	rcall	.+3714   	; 0x6bd8 <twi2_set_beep>
    5d56:	8d e7       	ldi	r24, 0x7D	; 125
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
			}
		}
	}

	int len = snprintf_P(g_prepare_buf, sizeof(g_prepare_buf), PM_IP_CMD_CmdLine);
    5d5e:	8e e7       	ldi	r24, 0x7E	; 126
    5d60:	9e e2       	ldi	r25, 0x2E	; 46
    5d62:	9f 93       	push	r25
    5d64:	8f 93       	push	r24
    5d66:	1f 92       	push	r1
    5d68:	80 e4       	ldi	r24, 0x40	; 64
    5d6a:	8f 93       	push	r24
    5d6c:	8b e1       	ldi	r24, 0x1B	; 27
    5d6e:	95 e2       	ldi	r25, 0x25	; 37
    5d70:	9f 93       	push	r25
    5d72:	8f 93       	push	r24
    5d74:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
	udi_write_tx_buf(g_prepare_buf, min(len, sizeof(g_prepare_buf)), false);
    5d78:	81 34       	cpi	r24, 0x41	; 65
    5d7a:	91 05       	cpc	r25, r1
    5d7c:	10 f0       	brcs	.+4      	; 0x5d82 <interpreter_doProcess+0x53e>
    5d7e:	80 e4       	ldi	r24, 0x40	; 64
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	40 e0       	ldi	r20, 0x00	; 0
    5d84:	68 2f       	mov	r22, r24
    5d86:	8b e1       	ldi	r24, 0x1B	; 27
    5d88:	95 e2       	ldi	r25, 0x25	; 37
    5d8a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>

	/* Execute line */
	if (pos) {
		/* Feed interpreter with line data */
		executeCmdLine(s_rx_cmdLine_buf, s_rx_cmdLine_idx);
		s_rx_cmdLine_idx = 0;
    5d8e:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <s_rx_cmdLine_idx>
    5d92:	0f 90       	pop	r0
    5d94:	0f 90       	pop	r0
    5d96:	0f 90       	pop	r0
    5d98:	0f 90       	pop	r0
    5d9a:	0f 90       	pop	r0
	}
}
    5d9c:	0f 90       	pop	r0
    5d9e:	2c 96       	adiw	r28, 0x0c	; 12
    5da0:	cd bf       	out	0x3d, r28	; 61
    5da2:	de bf       	out	0x3e, r29	; 62
    5da4:	df 91       	pop	r29
    5da6:	cf 91       	pop	r28
    5da8:	1f 91       	pop	r17
    5daa:	0f 91       	pop	r16
    5dac:	ff 90       	pop	r15
    5dae:	ef 90       	pop	r14
    5db0:	df 90       	pop	r13
    5db2:	08 95       	ret

00005db4 <__portable_avr_delay_cycles>:
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
	twi2_m_data[0] = sprintf_P((char*)&(twi2_m_data[1]), fmt_P);
	twi2_packet.length = twi2_m_data[0] + 1;
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}
    5db4:	04 c0       	rjmp	.+8      	; 0x5dbe <__portable_avr_delay_cycles+0xa>
    5db6:	61 50       	subi	r22, 0x01	; 1
    5db8:	71 09       	sbc	r23, r1
    5dba:	81 09       	sbc	r24, r1
    5dbc:	91 09       	sbc	r25, r1
    5dbe:	61 15       	cp	r22, r1
    5dc0:	71 05       	cpc	r23, r1
    5dc2:	81 05       	cpc	r24, r1
    5dc4:	91 05       	cpc	r25, r1
    5dc6:	b9 f7       	brne	.-18     	; 0x5db6 <__portable_avr_delay_cycles+0x2>
    5dc8:	08 95       	ret

00005dca <task_twi1_hygro>:
    5dca:	ff 92       	push	r15
    5dcc:	0f 93       	push	r16
    5dce:	1f 93       	push	r17
    5dd0:	cf 93       	push	r28
    5dd2:	df 93       	push	r29
    5dd4:	00 d0       	rcall	.+0      	; 0x5dd6 <task_twi1_hygro+0xc>
    5dd6:	cd b7       	in	r28, 0x3d	; 61
    5dd8:	de b7       	in	r29, 0x3e	; 62
    5dda:	8f b7       	in	r24, 0x3f	; 63
    5ddc:	8b 83       	std	Y+3, r24	; 0x03
    5dde:	f8 94       	cli
    5de0:	8b 81       	ldd	r24, Y+3	; 0x03
    5de2:	20 91 f0 26 	lds	r18, 0x26F0	; 0x8026f0 <g_twi1_hygro_S_T>
    5de6:	30 91 f1 26 	lds	r19, 0x26F1	; 0x8026f1 <g_twi1_hygro_S_T+0x1>
    5dea:	00 91 ee 26 	lds	r16, 0x26EE	; 0x8026ee <g_twi1_hygro_S_RH>
    5dee:	10 91 ef 26 	lds	r17, 0x26EF	; 0x8026ef <g_twi1_hygro_S_RH+0x1>
    5df2:	8f bf       	out	0x3f, r24	; 63
    5df4:	21 15       	cp	r18, r1
    5df6:	31 05       	cpc	r19, r1
    5df8:	a9 f0       	breq	.+42     	; 0x5e24 <task_twi1_hygro+0x5a>
    5dfa:	8f b7       	in	r24, 0x3f	; 63
    5dfc:	8a 83       	std	Y+2, r24	; 0x02
    5dfe:	f8 94       	cli
    5e00:	fa 80       	ldd	r15, Y+2	; 0x02
    5e02:	ac e5       	ldi	r26, 0x5C	; 92
    5e04:	b4 e4       	ldi	r27, 0x44	; 68
    5e06:	0e 94 c3 87 	call	0x10f86	; 0x10f86 <__umulhisi3>
    5e0a:	2f ef       	ldi	r18, 0xFF	; 255
    5e0c:	3f ef       	ldi	r19, 0xFF	; 255
    5e0e:	40 e0       	ldi	r20, 0x00	; 0
    5e10:	50 e0       	ldi	r21, 0x00	; 0
    5e12:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    5e16:	24 59       	subi	r18, 0x94	; 148
    5e18:	31 41       	sbci	r19, 0x11	; 17
    5e1a:	20 93 ec 26 	sts	0x26EC, r18	; 0x8026ec <g_twi1_hygro_T_100>
    5e1e:	30 93 ed 26 	sts	0x26ED, r19	; 0x8026ed <g_twi1_hygro_T_100+0x1>
    5e22:	ff be       	out	0x3f, r15	; 63
    5e24:	01 15       	cp	r16, r1
    5e26:	11 05       	cpc	r17, r1
    5e28:	a1 f0       	breq	.+40     	; 0x5e52 <task_twi1_hygro+0x88>
    5e2a:	8f b7       	in	r24, 0x3f	; 63
    5e2c:	89 83       	std	Y+1, r24	; 0x01
    5e2e:	f8 94       	cli
    5e30:	f9 80       	ldd	r15, Y+1	; 0x01
    5e32:	98 01       	movw	r18, r16
    5e34:	a0 e1       	ldi	r26, 0x10	; 16
    5e36:	b7 e2       	ldi	r27, 0x27	; 39
    5e38:	0e 94 c3 87 	call	0x10f86	; 0x10f86 <__umulhisi3>
    5e3c:	2f ef       	ldi	r18, 0xFF	; 255
    5e3e:	3f ef       	ldi	r19, 0xFF	; 255
    5e40:	40 e0       	ldi	r20, 0x00	; 0
    5e42:	50 e0       	ldi	r21, 0x00	; 0
    5e44:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    5e48:	20 93 ea 26 	sts	0x26EA, r18	; 0x8026ea <g_twi1_hygro_RH_100>
    5e4c:	30 93 eb 26 	sts	0x26EB, r19	; 0x8026eb <g_twi1_hygro_RH_100+0x1>
    5e50:	ff be       	out	0x3f, r15	; 63
    5e52:	23 96       	adiw	r28, 0x03	; 3
    5e54:	cd bf       	out	0x3d, r28	; 61
    5e56:	de bf       	out	0x3e, r29	; 62
    5e58:	df 91       	pop	r29
    5e5a:	cf 91       	pop	r28
    5e5c:	1f 91       	pop	r17
    5e5e:	0f 91       	pop	r16
    5e60:	ff 90       	pop	r15
    5e62:	08 95       	ret

00005e64 <task_twi1_gyro>:
    5e64:	2f 92       	push	r2
    5e66:	3f 92       	push	r3
    5e68:	4f 92       	push	r4
    5e6a:	5f 92       	push	r5
    5e6c:	6f 92       	push	r6
    5e6e:	7f 92       	push	r7
    5e70:	8f 92       	push	r8
    5e72:	9f 92       	push	r9
    5e74:	af 92       	push	r10
    5e76:	bf 92       	push	r11
    5e78:	cf 92       	push	r12
    5e7a:	df 92       	push	r13
    5e7c:	ef 92       	push	r14
    5e7e:	ff 92       	push	r15
    5e80:	0f 93       	push	r16
    5e82:	1f 93       	push	r17
    5e84:	cf 93       	push	r28
    5e86:	df 93       	push	r29
    5e88:	cd b7       	in	r28, 0x3d	; 61
    5e8a:	de b7       	in	r29, 0x3e	; 62
    5e8c:	2a 97       	sbiw	r28, 0x0a	; 10
    5e8e:	cd bf       	out	0x3d, r28	; 61
    5e90:	de bf       	out	0x3e, r29	; 62
    5e92:	8f b7       	in	r24, 0x3f	; 63
    5e94:	89 83       	std	Y+1, r24	; 0x01
    5e96:	f8 94       	cli
    5e98:	99 81       	ldd	r25, Y+1	; 0x01
    5e9a:	80 91 69 27 	lds	r24, 0x2769	; 0x802769 <g_twi1_gyro_1_accel_x>
    5e9e:	f0 91 6a 27 	lds	r31, 0x276A	; 0x80276a <g_twi1_gyro_1_accel_x+0x1>
    5ea2:	20 90 67 27 	lds	r2, 0x2767	; 0x802767 <g_twi1_gyro_1_accel_y>
    5ea6:	80 90 68 27 	lds	r8, 0x2768	; 0x802768 <g_twi1_gyro_1_accel_y+0x1>
    5eaa:	20 91 65 27 	lds	r18, 0x2765	; 0x802765 <g_twi1_gyro_1_accel_z>
    5eae:	2f 83       	std	Y+7, r18	; 0x07
    5eb0:	90 90 66 27 	lds	r9, 0x2766	; 0x802766 <g_twi1_gyro_1_accel_z+0x1>
    5eb4:	30 90 5d 27 	lds	r3, 0x275D	; 0x80275d <g_twi1_gyro_1_accel_factx>
    5eb8:	a0 91 5e 27 	lds	r26, 0x275E	; 0x80275e <g_twi1_gyro_1_accel_factx+0x1>
    5ebc:	40 91 5b 27 	lds	r20, 0x275B	; 0x80275b <g_twi1_gyro_1_accel_facty>
    5ec0:	49 87       	std	Y+9, r20	; 0x09
    5ec2:	60 90 5c 27 	lds	r6, 0x275C	; 0x80275c <g_twi1_gyro_1_accel_facty+0x1>
    5ec6:	50 91 59 27 	lds	r21, 0x2759	; 0x802759 <g_twi1_gyro_1_accel_factz>
    5eca:	5a 87       	std	Y+10, r21	; 0x0a
    5ecc:	70 90 5a 27 	lds	r7, 0x275A	; 0x80275a <g_twi1_gyro_1_accel_factz+0x1>
    5ed0:	9f bf       	out	0x3f, r25	; 63
    5ed2:	9f b7       	in	r25, 0x3f	; 63
    5ed4:	9a 83       	std	Y+2, r25	; 0x02
    5ed6:	f8 94       	cli
    5ed8:	4a 80       	ldd	r4, Y+2	; 0x02
    5eda:	58 2e       	mov	r5, r24
    5edc:	ef 2f       	mov	r30, r31
    5ede:	ee 0f       	add	r30, r30
    5ee0:	ee 0b       	sbc	r30, r30
    5ee2:	28 2f       	mov	r18, r24
    5ee4:	3f 2f       	mov	r19, r31
    5ee6:	4e 2f       	mov	r20, r30
    5ee8:	5e 2f       	mov	r21, r30
    5eea:	6e 2f       	mov	r22, r30
    5eec:	7e 2f       	mov	r23, r30
    5eee:	8e 2f       	mov	r24, r30
    5ef0:	9e 2f       	mov	r25, r30
    5ef2:	02 e0       	ldi	r16, 0x02	; 2
    5ef4:	0e 94 fd 88 	call	0x111fa	; 0x111fa <__ashldi3>
    5ef8:	a2 2e       	mov	r10, r18
    5efa:	b3 2e       	mov	r11, r19
    5efc:	c4 2e       	mov	r12, r20
    5efe:	d5 2e       	mov	r13, r21
    5f00:	e6 2e       	mov	r14, r22
    5f02:	f7 2e       	mov	r15, r23
    5f04:	b8 2f       	mov	r27, r24
    5f06:	19 2f       	mov	r17, r25
    5f08:	05 e0       	ldi	r16, 0x05	; 5
    5f0a:	0e 94 fd 88 	call	0x111fa	; 0x111fa <__ashldi3>
    5f0e:	0b 2f       	mov	r16, r27
    5f10:	0e 94 49 89 	call	0x11292	; 0x11292 <__subdi3>
    5f14:	a5 2c       	mov	r10, r5
    5f16:	bf 2e       	mov	r11, r31
    5f18:	ce 2e       	mov	r12, r30
    5f1a:	de 2e       	mov	r13, r30
    5f1c:	ee 2e       	mov	r14, r30
    5f1e:	fe 2e       	mov	r15, r30
    5f20:	0e 2f       	mov	r16, r30
    5f22:	1e 2f       	mov	r17, r30
    5f24:	0e 94 34 89 	call	0x11268	; 0x11268 <__adddi3>
    5f28:	04 e0       	ldi	r16, 0x04	; 4
    5f2a:	0e 94 fd 88 	call	0x111fa	; 0x111fa <__ashldi3>
    5f2e:	a3 2c       	mov	r10, r3
    5f30:	1a 2f       	mov	r17, r26
    5f32:	11 0f       	add	r17, r17
    5f34:	11 0b       	sbc	r17, r17
    5f36:	ba 2e       	mov	r11, r26
    5f38:	c1 2e       	mov	r12, r17
    5f3a:	d1 2e       	mov	r13, r17
    5f3c:	e1 2e       	mov	r14, r17
    5f3e:	f1 2e       	mov	r15, r17
    5f40:	01 2f       	mov	r16, r17
    5f42:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    5f46:	68 94       	set
    5f48:	aa 24       	eor	r10, r10
    5f4a:	a4 f8       	bld	r10, 4
    5f4c:	0f 2e       	mov	r0, r31
    5f4e:	f7 e2       	ldi	r31, 0x27	; 39
    5f50:	bf 2e       	mov	r11, r31
    5f52:	f0 2d       	mov	r31, r0
    5f54:	c1 2c       	mov	r12, r1
    5f56:	d1 2c       	mov	r13, r1
    5f58:	e1 2c       	mov	r14, r1
    5f5a:	f1 2c       	mov	r15, r1
    5f5c:	00 e0       	ldi	r16, 0x00	; 0
    5f5e:	10 e0       	ldi	r17, 0x00	; 0
    5f60:	0e 94 35 88 	call	0x1106a	; 0x1106a <__divdi3>
    5f64:	0f e0       	ldi	r16, 0x0F	; 15
    5f66:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    5f6a:	20 93 57 27 	sts	0x2757, r18	; 0x802757 <g_twi1_gyro_1_accel_x_mg>
    5f6e:	30 93 58 27 	sts	0x2758, r19	; 0x802758 <g_twi1_gyro_1_accel_x_mg+0x1>
    5f72:	e8 2d       	mov	r30, r8
    5f74:	ee 0f       	add	r30, r30
    5f76:	ee 0b       	sbc	r30, r30
    5f78:	22 2d       	mov	r18, r2
    5f7a:	38 2d       	mov	r19, r8
    5f7c:	4e 2f       	mov	r20, r30
    5f7e:	5e 2f       	mov	r21, r30
    5f80:	6e 2f       	mov	r22, r30
    5f82:	7e 2f       	mov	r23, r30
    5f84:	8e 2f       	mov	r24, r30
    5f86:	9e 2f       	mov	r25, r30
    5f88:	02 e0       	ldi	r16, 0x02	; 2
    5f8a:	0e 94 fd 88 	call	0x111fa	; 0x111fa <__ashldi3>
    5f8e:	a2 2e       	mov	r10, r18
    5f90:	b3 2e       	mov	r11, r19
    5f92:	c4 2e       	mov	r12, r20
    5f94:	d5 2e       	mov	r13, r21
    5f96:	e6 2e       	mov	r14, r22
    5f98:	f7 2e       	mov	r15, r23
    5f9a:	a8 2f       	mov	r26, r24
    5f9c:	19 2f       	mov	r17, r25
    5f9e:	05 e0       	ldi	r16, 0x05	; 5
    5fa0:	0e 94 fd 88 	call	0x111fa	; 0x111fa <__ashldi3>
    5fa4:	0a 2f       	mov	r16, r26
    5fa6:	0e 94 49 89 	call	0x11292	; 0x11292 <__subdi3>
    5faa:	a2 2c       	mov	r10, r2
    5fac:	b8 2c       	mov	r11, r8
    5fae:	ce 2e       	mov	r12, r30
    5fb0:	de 2e       	mov	r13, r30
    5fb2:	ee 2e       	mov	r14, r30
    5fb4:	fe 2e       	mov	r15, r30
    5fb6:	0e 2f       	mov	r16, r30
    5fb8:	1e 2f       	mov	r17, r30
    5fba:	0e 94 34 89 	call	0x11268	; 0x11268 <__adddi3>
    5fbe:	04 e0       	ldi	r16, 0x04	; 4
    5fc0:	0e 94 fd 88 	call	0x111fa	; 0x111fa <__ashldi3>
    5fc4:	a9 84       	ldd	r10, Y+9	; 0x09
    5fc6:	16 2d       	mov	r17, r6
    5fc8:	11 0f       	add	r17, r17
    5fca:	11 0b       	sbc	r17, r17
    5fcc:	b6 2c       	mov	r11, r6
    5fce:	c1 2e       	mov	r12, r17
    5fd0:	d1 2e       	mov	r13, r17
    5fd2:	e1 2e       	mov	r14, r17
    5fd4:	f1 2e       	mov	r15, r17
    5fd6:	01 2f       	mov	r16, r17
    5fd8:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    5fdc:	68 94       	set
    5fde:	aa 24       	eor	r10, r10
    5fe0:	a4 f8       	bld	r10, 4
    5fe2:	0f 2e       	mov	r0, r31
    5fe4:	f7 e2       	ldi	r31, 0x27	; 39
    5fe6:	bf 2e       	mov	r11, r31
    5fe8:	f0 2d       	mov	r31, r0
    5fea:	c1 2c       	mov	r12, r1
    5fec:	d1 2c       	mov	r13, r1
    5fee:	e1 2c       	mov	r14, r1
    5ff0:	f1 2c       	mov	r15, r1
    5ff2:	00 e0       	ldi	r16, 0x00	; 0
    5ff4:	10 e0       	ldi	r17, 0x00	; 0
    5ff6:	0e 94 35 88 	call	0x1106a	; 0x1106a <__divdi3>
    5ffa:	0f e0       	ldi	r16, 0x0F	; 15
    5ffc:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    6000:	20 93 55 27 	sts	0x2755, r18	; 0x802755 <g_twi1_gyro_1_accel_y_mg>
    6004:	30 93 56 27 	sts	0x2756, r19	; 0x802756 <g_twi1_gyro_1_accel_y_mg+0x1>
    6008:	ff 81       	ldd	r31, Y+7	; 0x07
    600a:	e9 2d       	mov	r30, r9
    600c:	ee 0f       	add	r30, r30
    600e:	ee 0b       	sbc	r30, r30
    6010:	2f 2f       	mov	r18, r31
    6012:	39 2d       	mov	r19, r9
    6014:	4e 2f       	mov	r20, r30
    6016:	5e 2f       	mov	r21, r30
    6018:	6e 2f       	mov	r22, r30
    601a:	7e 2f       	mov	r23, r30
    601c:	8e 2f       	mov	r24, r30
    601e:	9e 2f       	mov	r25, r30
    6020:	02 e0       	ldi	r16, 0x02	; 2
    6022:	0e 94 fd 88 	call	0x111fa	; 0x111fa <__ashldi3>
    6026:	a2 2e       	mov	r10, r18
    6028:	b3 2e       	mov	r11, r19
    602a:	c4 2e       	mov	r12, r20
    602c:	d5 2e       	mov	r13, r21
    602e:	e6 2e       	mov	r14, r22
    6030:	f7 2e       	mov	r15, r23
    6032:	a8 2f       	mov	r26, r24
    6034:	19 2f       	mov	r17, r25
    6036:	05 e0       	ldi	r16, 0x05	; 5
    6038:	0e 94 fd 88 	call	0x111fa	; 0x111fa <__ashldi3>
    603c:	0a 2f       	mov	r16, r26
    603e:	0e 94 49 89 	call	0x11292	; 0x11292 <__subdi3>
    6042:	af 2e       	mov	r10, r31
    6044:	b9 2c       	mov	r11, r9
    6046:	ce 2e       	mov	r12, r30
    6048:	de 2e       	mov	r13, r30
    604a:	ee 2e       	mov	r14, r30
    604c:	fe 2e       	mov	r15, r30
    604e:	0e 2f       	mov	r16, r30
    6050:	1e 2f       	mov	r17, r30
    6052:	0e 94 34 89 	call	0x11268	; 0x11268 <__adddi3>
    6056:	04 e0       	ldi	r16, 0x04	; 4
    6058:	0e 94 fd 88 	call	0x111fa	; 0x111fa <__ashldi3>
    605c:	aa 84       	ldd	r10, Y+10	; 0x0a
    605e:	17 2d       	mov	r17, r7
    6060:	11 0f       	add	r17, r17
    6062:	11 0b       	sbc	r17, r17
    6064:	b7 2c       	mov	r11, r7
    6066:	c1 2e       	mov	r12, r17
    6068:	d1 2e       	mov	r13, r17
    606a:	e1 2e       	mov	r14, r17
    606c:	f1 2e       	mov	r15, r17
    606e:	01 2f       	mov	r16, r17
    6070:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    6074:	68 94       	set
    6076:	aa 24       	eor	r10, r10
    6078:	a4 f8       	bld	r10, 4
    607a:	0f 2e       	mov	r0, r31
    607c:	f7 e2       	ldi	r31, 0x27	; 39
    607e:	bf 2e       	mov	r11, r31
    6080:	f0 2d       	mov	r31, r0
    6082:	c1 2c       	mov	r12, r1
    6084:	d1 2c       	mov	r13, r1
    6086:	e1 2c       	mov	r14, r1
    6088:	f1 2c       	mov	r15, r1
    608a:	00 e0       	ldi	r16, 0x00	; 0
    608c:	10 e0       	ldi	r17, 0x00	; 0
    608e:	0e 94 35 88 	call	0x1106a	; 0x1106a <__divdi3>
    6092:	0f e0       	ldi	r16, 0x0F	; 15
    6094:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    6098:	20 93 53 27 	sts	0x2753, r18	; 0x802753 <g_twi1_gyro_1_accel_z_mg>
    609c:	30 93 54 27 	sts	0x2754, r19	; 0x802754 <g_twi1_gyro_1_accel_z_mg+0x1>
    60a0:	4f be       	out	0x3f, r4	; 63
    60a2:	8f b7       	in	r24, 0x3f	; 63
    60a4:	8b 83       	std	Y+3, r24	; 0x03
    60a6:	f8 94       	cli
    60a8:	9b 81       	ldd	r25, Y+3	; 0x03
    60aa:	80 91 51 27 	lds	r24, 0x2751	; 0x802751 <g_twi1_gyro_1_gyro_x>
    60ae:	30 91 52 27 	lds	r19, 0x2752	; 0x802752 <g_twi1_gyro_1_gyro_x+0x1>
    60b2:	50 90 4f 27 	lds	r5, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_y>
    60b6:	60 90 50 27 	lds	r6, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_y+0x1>
    60ba:	70 90 4d 27 	lds	r7, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_z>
    60be:	80 90 4e 27 	lds	r8, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_z+0x1>
    60c2:	9f bf       	out	0x3f, r25	; 63
    60c4:	9f b7       	in	r25, 0x3f	; 63
    60c6:	9c 83       	std	Y+4, r25	; 0x04
    60c8:	f8 94       	cli
    60ca:	9c 80       	ldd	r9, Y+4	; 0x04
    60cc:	28 2f       	mov	r18, r24
    60ce:	93 2f       	mov	r25, r19
    60d0:	99 0f       	add	r25, r25
    60d2:	99 0b       	sbc	r25, r25
    60d4:	0f 2e       	mov	r0, r31
    60d6:	f0 e9       	ldi	r31, 0x90	; 144
    60d8:	af 2e       	mov	r10, r31
    60da:	f0 2d       	mov	r31, r0
    60dc:	0f 2e       	mov	r0, r31
    60de:	f0 ed       	ldi	r31, 0xD0	; 208
    60e0:	bf 2e       	mov	r11, r31
    60e2:	f0 2d       	mov	r31, r0
    60e4:	0f 2e       	mov	r0, r31
    60e6:	f3 e0       	ldi	r31, 0x03	; 3
    60e8:	cf 2e       	mov	r12, r31
    60ea:	f0 2d       	mov	r31, r0
    60ec:	00 e0       	ldi	r16, 0x00	; 0
    60ee:	49 2f       	mov	r20, r25
    60f0:	59 2f       	mov	r21, r25
    60f2:	69 2f       	mov	r22, r25
    60f4:	79 2f       	mov	r23, r25
    60f6:	89 2f       	mov	r24, r25
    60f8:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    60fc:	0f e0       	ldi	r16, 0x0F	; 15
    60fe:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    6102:	20 93 43 27 	sts	0x2743, r18	; 0x802743 <g_twi1_gyro_1_gyro_x_mdps>
    6106:	30 93 44 27 	sts	0x2744, r19	; 0x802744 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    610a:	40 93 45 27 	sts	0x2745, r20	; 0x802745 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    610e:	50 93 46 27 	sts	0x2746, r21	; 0x802746 <g_twi1_gyro_1_gyro_x_mdps+0x3>
    6112:	25 2d       	mov	r18, r5
    6114:	96 2d       	mov	r25, r6
    6116:	99 0f       	add	r25, r25
    6118:	99 0b       	sbc	r25, r25
    611a:	00 e0       	ldi	r16, 0x00	; 0
    611c:	36 2d       	mov	r19, r6
    611e:	49 2f       	mov	r20, r25
    6120:	59 2f       	mov	r21, r25
    6122:	69 2f       	mov	r22, r25
    6124:	79 2f       	mov	r23, r25
    6126:	89 2f       	mov	r24, r25
    6128:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    612c:	0f e0       	ldi	r16, 0x0F	; 15
    612e:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    6132:	20 93 3f 27 	sts	0x273F, r18	; 0x80273f <g_twi1_gyro_1_gyro_y_mdps>
    6136:	30 93 40 27 	sts	0x2740, r19	; 0x802740 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    613a:	40 93 41 27 	sts	0x2741, r20	; 0x802741 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    613e:	50 93 42 27 	sts	0x2742, r21	; 0x802742 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    6142:	27 2d       	mov	r18, r7
    6144:	98 2d       	mov	r25, r8
    6146:	99 0f       	add	r25, r25
    6148:	99 0b       	sbc	r25, r25
    614a:	00 e0       	ldi	r16, 0x00	; 0
    614c:	38 2d       	mov	r19, r8
    614e:	49 2f       	mov	r20, r25
    6150:	59 2f       	mov	r21, r25
    6152:	69 2f       	mov	r22, r25
    6154:	79 2f       	mov	r23, r25
    6156:	89 2f       	mov	r24, r25
    6158:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    615c:	0f e0       	ldi	r16, 0x0F	; 15
    615e:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    6162:	20 93 3b 27 	sts	0x273B, r18	; 0x80273b <g_twi1_gyro_1_gyro_z_mdps>
    6166:	30 93 3c 27 	sts	0x273C, r19	; 0x80273c <g_twi1_gyro_1_gyro_z_mdps+0x1>
    616a:	40 93 3d 27 	sts	0x273D, r20	; 0x80273d <g_twi1_gyro_1_gyro_z_mdps+0x2>
    616e:	50 93 3e 27 	sts	0x273E, r21	; 0x80273e <g_twi1_gyro_1_gyro_z_mdps+0x3>
    6172:	9f be       	out	0x3f, r9	; 63
    6174:	8f b7       	in	r24, 0x3f	; 63
    6176:	8d 83       	std	Y+5, r24	; 0x05
    6178:	f8 94       	cli
    617a:	8d 81       	ldd	r24, Y+5	; 0x05
    617c:	20 91 2d 27 	lds	r18, 0x272D	; 0x80272d <g_twi1_gyro_2_mag_x>
    6180:	30 91 2e 27 	lds	r19, 0x272E	; 0x80272e <g_twi1_gyro_2_mag_x+0x1>
    6184:	c0 90 2b 27 	lds	r12, 0x272B	; 0x80272b <g_twi1_gyro_2_mag_y>
    6188:	d0 90 2c 27 	lds	r13, 0x272C	; 0x80272c <g_twi1_gyro_2_mag_y+0x1>
    618c:	a0 90 29 27 	lds	r10, 0x2729	; 0x802729 <g_twi1_gyro_2_mag_z>
    6190:	b0 90 2a 27 	lds	r11, 0x272A	; 0x80272a <g_twi1_gyro_2_mag_z+0x1>
    6194:	e0 91 37 27 	lds	r30, 0x2737	; 0x802737 <g_twi1_gyro_2_asax>
    6198:	00 91 36 27 	lds	r16, 0x2736	; 0x802736 <g_twi1_gyro_2_asay>
    619c:	10 91 35 27 	lds	r17, 0x2735	; 0x802735 <g_twi1_gyro_2_asaz>
    61a0:	a0 91 27 27 	lds	r26, 0x2727	; 0x802727 <g_twi1_gyro_2_mag_factx>
    61a4:	b0 91 28 27 	lds	r27, 0x2728	; 0x802728 <g_twi1_gyro_2_mag_factx+0x1>
    61a8:	80 90 25 27 	lds	r8, 0x2725	; 0x802725 <g_twi1_gyro_2_mag_facty>
    61ac:	90 90 26 27 	lds	r9, 0x2726	; 0x802726 <g_twi1_gyro_2_mag_facty+0x1>
    61b0:	40 91 23 27 	lds	r20, 0x2723	; 0x802723 <g_twi1_gyro_2_mag_factz>
    61b4:	50 91 24 27 	lds	r21, 0x2724	; 0x802724 <g_twi1_gyro_2_mag_factz+0x1>
    61b8:	4f 83       	std	Y+7, r20	; 0x07
    61ba:	58 87       	std	Y+8, r21	; 0x08
    61bc:	60 90 71 27 	lds	r6, 0x2771	; 0x802771 <g_twi1_gyro_1_temp>
    61c0:	70 90 72 27 	lds	r7, 0x2772	; 0x802772 <g_twi1_gyro_1_temp+0x1>
    61c4:	8f bf       	out	0x3f, r24	; 63
    61c6:	33 23       	and	r19, r19
    61c8:	24 f1       	brlt	.+72     	; 0x6212 <__stack+0x213>
    61ca:	0e 94 bd 87 	call	0x10f7a	; 0x10f7a <__mulhisi3>
    61ce:	9b 01       	movw	r18, r22
    61d0:	ac 01       	movw	r20, r24
    61d2:	8e 2f       	mov	r24, r30
    61d4:	ee 0f       	add	r30, r30
    61d6:	99 0b       	sbc	r25, r25
    61d8:	aa 0b       	sbc	r26, r26
    61da:	bb 0b       	sbc	r27, r27
    61dc:	bc 01       	movw	r22, r24
    61de:	cd 01       	movw	r24, r26
    61e0:	60 58       	subi	r22, 0x80	; 128
    61e2:	7f 4f       	sbci	r23, 0xFF	; 255
    61e4:	8f 4f       	sbci	r24, 0xFF	; 255
    61e6:	9f 4f       	sbci	r25, 0xFF	; 255
    61e8:	0e 94 41 87 	call	0x10e82	; 0x10e82 <__mulsi3>
    61ec:	2a e0       	ldi	r18, 0x0A	; 10
    61ee:	30 e0       	ldi	r19, 0x00	; 0
    61f0:	40 e0       	ldi	r20, 0x00	; 0
    61f2:	50 e0       	ldi	r21, 0x00	; 0
    61f4:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    61f8:	da 01       	movw	r26, r20
    61fa:	c9 01       	movw	r24, r18
    61fc:	80 58       	subi	r24, 0x80	; 128
    61fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6200:	af 4f       	sbci	r26, 0xFF	; 255
    6202:	bf 4f       	sbci	r27, 0xFF	; 255
    6204:	29 2e       	mov	r2, r25
    6206:	3a 2e       	mov	r3, r26
    6208:	4b 2e       	mov	r4, r27
    620a:	55 24       	eor	r5, r5
    620c:	47 fc       	sbrc	r4, 7
    620e:	5a 94       	dec	r5
    6210:	23 c0       	rjmp	.+70     	; 0x6258 <__stack+0x259>
    6212:	0e 94 bd 87 	call	0x10f7a	; 0x10f7a <__mulhisi3>
    6216:	9b 01       	movw	r18, r22
    6218:	ac 01       	movw	r20, r24
    621a:	8e 2f       	mov	r24, r30
    621c:	ee 0f       	add	r30, r30
    621e:	99 0b       	sbc	r25, r25
    6220:	aa 0b       	sbc	r26, r26
    6222:	bb 0b       	sbc	r27, r27
    6224:	bc 01       	movw	r22, r24
    6226:	cd 01       	movw	r24, r26
    6228:	60 58       	subi	r22, 0x80	; 128
    622a:	7f 4f       	sbci	r23, 0xFF	; 255
    622c:	8f 4f       	sbci	r24, 0xFF	; 255
    622e:	9f 4f       	sbci	r25, 0xFF	; 255
    6230:	0e 94 41 87 	call	0x10e82	; 0x10e82 <__mulsi3>
    6234:	2a e0       	ldi	r18, 0x0A	; 10
    6236:	30 e0       	ldi	r19, 0x00	; 0
    6238:	40 e0       	ldi	r20, 0x00	; 0
    623a:	50 e0       	ldi	r21, 0x00	; 0
    623c:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    6240:	da 01       	movw	r26, r20
    6242:	c9 01       	movw	r24, r18
    6244:	80 58       	subi	r24, 0x80	; 128
    6246:	91 09       	sbc	r25, r1
    6248:	a1 09       	sbc	r26, r1
    624a:	b1 09       	sbc	r27, r1
    624c:	29 2e       	mov	r2, r25
    624e:	3a 2e       	mov	r3, r26
    6250:	4b 2e       	mov	r4, r27
    6252:	55 24       	eor	r5, r5
    6254:	47 fc       	sbrc	r4, 7
    6256:	5a 94       	dec	r5
    6258:	dd 20       	and	r13, r13
    625a:	34 f1       	brlt	.+76     	; 0x62a8 <__stack+0x2a9>
    625c:	96 01       	movw	r18, r12
    625e:	d4 01       	movw	r26, r8
    6260:	0e 94 bd 87 	call	0x10f7a	; 0x10f7a <__mulhisi3>
    6264:	9b 01       	movw	r18, r22
    6266:	ac 01       	movw	r20, r24
    6268:	80 2f       	mov	r24, r16
    626a:	00 0f       	add	r16, r16
    626c:	99 0b       	sbc	r25, r25
    626e:	aa 0b       	sbc	r26, r26
    6270:	bb 0b       	sbc	r27, r27
    6272:	bc 01       	movw	r22, r24
    6274:	cd 01       	movw	r24, r26
    6276:	60 58       	subi	r22, 0x80	; 128
    6278:	7f 4f       	sbci	r23, 0xFF	; 255
    627a:	8f 4f       	sbci	r24, 0xFF	; 255
    627c:	9f 4f       	sbci	r25, 0xFF	; 255
    627e:	0e 94 41 87 	call	0x10e82	; 0x10e82 <__mulsi3>
    6282:	2a e0       	ldi	r18, 0x0A	; 10
    6284:	30 e0       	ldi	r19, 0x00	; 0
    6286:	40 e0       	ldi	r20, 0x00	; 0
    6288:	50 e0       	ldi	r21, 0x00	; 0
    628a:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    628e:	da 01       	movw	r26, r20
    6290:	c9 01       	movw	r24, r18
    6292:	80 58       	subi	r24, 0x80	; 128
    6294:	9f 4f       	sbci	r25, 0xFF	; 255
    6296:	af 4f       	sbci	r26, 0xFF	; 255
    6298:	bf 4f       	sbci	r27, 0xFF	; 255
    629a:	c9 2e       	mov	r12, r25
    629c:	da 2e       	mov	r13, r26
    629e:	eb 2e       	mov	r14, r27
    62a0:	ff 24       	eor	r15, r15
    62a2:	e7 fc       	sbrc	r14, 7
    62a4:	fa 94       	dec	r15
    62a6:	25 c0       	rjmp	.+74     	; 0x62f2 <__stack+0x2f3>
    62a8:	96 01       	movw	r18, r12
    62aa:	d4 01       	movw	r26, r8
    62ac:	0e 94 bd 87 	call	0x10f7a	; 0x10f7a <__mulhisi3>
    62b0:	9b 01       	movw	r18, r22
    62b2:	ac 01       	movw	r20, r24
    62b4:	80 2f       	mov	r24, r16
    62b6:	00 0f       	add	r16, r16
    62b8:	99 0b       	sbc	r25, r25
    62ba:	aa 0b       	sbc	r26, r26
    62bc:	bb 0b       	sbc	r27, r27
    62be:	bc 01       	movw	r22, r24
    62c0:	cd 01       	movw	r24, r26
    62c2:	60 58       	subi	r22, 0x80	; 128
    62c4:	7f 4f       	sbci	r23, 0xFF	; 255
    62c6:	8f 4f       	sbci	r24, 0xFF	; 255
    62c8:	9f 4f       	sbci	r25, 0xFF	; 255
    62ca:	0e 94 41 87 	call	0x10e82	; 0x10e82 <__mulsi3>
    62ce:	2a e0       	ldi	r18, 0x0A	; 10
    62d0:	30 e0       	ldi	r19, 0x00	; 0
    62d2:	40 e0       	ldi	r20, 0x00	; 0
    62d4:	50 e0       	ldi	r21, 0x00	; 0
    62d6:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    62da:	da 01       	movw	r26, r20
    62dc:	c9 01       	movw	r24, r18
    62de:	80 58       	subi	r24, 0x80	; 128
    62e0:	91 09       	sbc	r25, r1
    62e2:	a1 09       	sbc	r26, r1
    62e4:	b1 09       	sbc	r27, r1
    62e6:	c9 2e       	mov	r12, r25
    62e8:	da 2e       	mov	r13, r26
    62ea:	eb 2e       	mov	r14, r27
    62ec:	ff 24       	eor	r15, r15
    62ee:	e7 fc       	sbrc	r14, 7
    62f0:	fa 94       	dec	r15
    62f2:	bb 20       	and	r11, r11
    62f4:	44 f1       	brlt	.+80     	; 0x6346 <__stack+0x347>
    62f6:	95 01       	movw	r18, r10
    62f8:	af 81       	ldd	r26, Y+7	; 0x07
    62fa:	b8 85       	ldd	r27, Y+8	; 0x08
    62fc:	0e 94 bd 87 	call	0x10f7a	; 0x10f7a <__mulhisi3>
    6300:	9b 01       	movw	r18, r22
    6302:	ac 01       	movw	r20, r24
    6304:	81 2f       	mov	r24, r17
    6306:	11 0f       	add	r17, r17
    6308:	99 0b       	sbc	r25, r25
    630a:	aa 0b       	sbc	r26, r26
    630c:	bb 0b       	sbc	r27, r27
    630e:	bc 01       	movw	r22, r24
    6310:	cd 01       	movw	r24, r26
    6312:	60 58       	subi	r22, 0x80	; 128
    6314:	7f 4f       	sbci	r23, 0xFF	; 255
    6316:	8f 4f       	sbci	r24, 0xFF	; 255
    6318:	9f 4f       	sbci	r25, 0xFF	; 255
    631a:	0e 94 41 87 	call	0x10e82	; 0x10e82 <__mulsi3>
    631e:	2a e0       	ldi	r18, 0x0A	; 10
    6320:	30 e0       	ldi	r19, 0x00	; 0
    6322:	40 e0       	ldi	r20, 0x00	; 0
    6324:	50 e0       	ldi	r21, 0x00	; 0
    6326:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    632a:	49 01       	movw	r8, r18
    632c:	5a 01       	movw	r10, r20
    632e:	80 e8       	ldi	r24, 0x80	; 128
    6330:	88 0e       	add	r8, r24
    6332:	91 1c       	adc	r9, r1
    6334:	a1 1c       	adc	r10, r1
    6336:	b1 1c       	adc	r11, r1
    6338:	89 2c       	mov	r8, r9
    633a:	9a 2c       	mov	r9, r10
    633c:	ab 2c       	mov	r10, r11
    633e:	bb 24       	eor	r11, r11
    6340:	a7 fc       	sbrc	r10, 7
    6342:	ba 94       	dec	r11
    6344:	27 c0       	rjmp	.+78     	; 0x6394 <__stack+0x395>
    6346:	95 01       	movw	r18, r10
    6348:	af 81       	ldd	r26, Y+7	; 0x07
    634a:	b8 85       	ldd	r27, Y+8	; 0x08
    634c:	0e 94 bd 87 	call	0x10f7a	; 0x10f7a <__mulhisi3>
    6350:	9b 01       	movw	r18, r22
    6352:	ac 01       	movw	r20, r24
    6354:	81 2f       	mov	r24, r17
    6356:	11 0f       	add	r17, r17
    6358:	99 0b       	sbc	r25, r25
    635a:	aa 0b       	sbc	r26, r26
    635c:	bb 0b       	sbc	r27, r27
    635e:	bc 01       	movw	r22, r24
    6360:	cd 01       	movw	r24, r26
    6362:	60 58       	subi	r22, 0x80	; 128
    6364:	7f 4f       	sbci	r23, 0xFF	; 255
    6366:	8f 4f       	sbci	r24, 0xFF	; 255
    6368:	9f 4f       	sbci	r25, 0xFF	; 255
    636a:	0e 94 41 87 	call	0x10e82	; 0x10e82 <__mulsi3>
    636e:	2a e0       	ldi	r18, 0x0A	; 10
    6370:	30 e0       	ldi	r19, 0x00	; 0
    6372:	40 e0       	ldi	r20, 0x00	; 0
    6374:	50 e0       	ldi	r21, 0x00	; 0
    6376:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    637a:	49 01       	movw	r8, r18
    637c:	5a 01       	movw	r10, r20
    637e:	80 e8       	ldi	r24, 0x80	; 128
    6380:	88 1a       	sub	r8, r24
    6382:	91 08       	sbc	r9, r1
    6384:	a1 08       	sbc	r10, r1
    6386:	b1 08       	sbc	r11, r1
    6388:	89 2c       	mov	r8, r9
    638a:	9a 2c       	mov	r9, r10
    638c:	ab 2c       	mov	r10, r11
    638e:	bb 24       	eor	r11, r11
    6390:	a7 fc       	sbrc	r10, 7
    6392:	ba 94       	dec	r11
    6394:	80 91 6f 27 	lds	r24, 0x276F	; 0x80276f <g_twi1_gyro_1_temp_RTofs>
    6398:	90 91 70 27 	lds	r25, 0x2770	; 0x802770 <g_twi1_gyro_1_temp_RTofs+0x1>
    639c:	d3 01       	movw	r26, r6
    639e:	a8 1b       	sub	r26, r24
    63a0:	b9 0b       	sbc	r27, r25
    63a2:	24 e6       	ldi	r18, 0x64	; 100
    63a4:	30 e0       	ldi	r19, 0x00	; 0
    63a6:	0e 94 d2 87 	call	0x10fa4	; 0x10fa4 <__usmulhisi3>
    63aa:	20 91 6d 27 	lds	r18, 0x276D	; 0x80276d <g_twi1_gyro_1_temp_sens>
    63ae:	30 91 6e 27 	lds	r19, 0x276E	; 0x80276e <g_twi1_gyro_1_temp_sens+0x1>
    63b2:	03 2e       	mov	r0, r19
    63b4:	00 0c       	add	r0, r0
    63b6:	44 0b       	sbc	r20, r20
    63b8:	55 0b       	sbc	r21, r21
    63ba:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    63be:	2c 5c       	subi	r18, 0xCC	; 204
    63c0:	37 4f       	sbci	r19, 0xF7	; 247
    63c2:	8f b7       	in	r24, 0x3f	; 63
    63c4:	8e 83       	std	Y+6, r24	; 0x06
    63c6:	f8 94       	cli
    63c8:	8e 81       	ldd	r24, Y+6	; 0x06
    63ca:	20 92 1f 27 	sts	0x271F, r2	; 0x80271f <g_twi1_gyro_2_mag_x_nT>
    63ce:	30 92 20 27 	sts	0x2720, r3	; 0x802720 <g_twi1_gyro_2_mag_x_nT+0x1>
    63d2:	40 92 21 27 	sts	0x2721, r4	; 0x802721 <g_twi1_gyro_2_mag_x_nT+0x2>
    63d6:	50 92 22 27 	sts	0x2722, r5	; 0x802722 <g_twi1_gyro_2_mag_x_nT+0x3>
    63da:	c0 92 1b 27 	sts	0x271B, r12	; 0x80271b <g_twi1_gyro_2_mag_y_nT>
    63de:	d0 92 1c 27 	sts	0x271C, r13	; 0x80271c <g_twi1_gyro_2_mag_y_nT+0x1>
    63e2:	e0 92 1d 27 	sts	0x271D, r14	; 0x80271d <g_twi1_gyro_2_mag_y_nT+0x2>
    63e6:	f0 92 1e 27 	sts	0x271E, r15	; 0x80271e <g_twi1_gyro_2_mag_y_nT+0x3>
    63ea:	80 92 17 27 	sts	0x2717, r8	; 0x802717 <g_twi1_gyro_2_mag_z_nT>
    63ee:	90 92 18 27 	sts	0x2718, r9	; 0x802718 <g_twi1_gyro_2_mag_z_nT+0x1>
    63f2:	a0 92 19 27 	sts	0x2719, r10	; 0x802719 <g_twi1_gyro_2_mag_z_nT+0x2>
    63f6:	b0 92 1a 27 	sts	0x271A, r11	; 0x80271a <g_twi1_gyro_2_mag_z_nT+0x3>
    63fa:	20 93 6b 27 	sts	0x276B, r18	; 0x80276b <g_twi1_gyro_1_temp_deg_100>
    63fe:	30 93 6c 27 	sts	0x276C, r19	; 0x80276c <g_twi1_gyro_1_temp_deg_100+0x1>
    6402:	8f bf       	out	0x3f, r24	; 63
    6404:	2a 96       	adiw	r28, 0x0a	; 10
    6406:	cd bf       	out	0x3d, r28	; 61
    6408:	de bf       	out	0x3e, r29	; 62
    640a:	df 91       	pop	r29
    640c:	cf 91       	pop	r28
    640e:	1f 91       	pop	r17
    6410:	0f 91       	pop	r16
    6412:	ff 90       	pop	r15
    6414:	ef 90       	pop	r14
    6416:	df 90       	pop	r13
    6418:	cf 90       	pop	r12
    641a:	bf 90       	pop	r11
    641c:	af 90       	pop	r10
    641e:	9f 90       	pop	r9
    6420:	8f 90       	pop	r8
    6422:	7f 90       	pop	r7
    6424:	6f 90       	pop	r6
    6426:	5f 90       	pop	r5
    6428:	4f 90       	pop	r4
    642a:	3f 90       	pop	r3
    642c:	2f 90       	pop	r2
    642e:	08 95       	ret

00006430 <task_twi1_baro>:
    6430:	2f 92       	push	r2
    6432:	3f 92       	push	r3
    6434:	4f 92       	push	r4
    6436:	5f 92       	push	r5
    6438:	6f 92       	push	r6
    643a:	7f 92       	push	r7
    643c:	8f 92       	push	r8
    643e:	9f 92       	push	r9
    6440:	af 92       	push	r10
    6442:	bf 92       	push	r11
    6444:	cf 92       	push	r12
    6446:	df 92       	push	r13
    6448:	ef 92       	push	r14
    644a:	ff 92       	push	r15
    644c:	0f 93       	push	r16
    644e:	1f 93       	push	r17
    6450:	cf 93       	push	r28
    6452:	df 93       	push	r29
    6454:	cd b7       	in	r28, 0x3d	; 61
    6456:	de b7       	in	r29, 0x3e	; 62
    6458:	a6 97       	sbiw	r28, 0x26	; 38
    645a:	cd bf       	out	0x3d, r28	; 61
    645c:	de bf       	out	0x3e, r29	; 62
    645e:	8f b7       	in	r24, 0x3f	; 63
    6460:	8a 83       	std	Y+2, r24	; 0x02
    6462:	f8 94       	cli
    6464:	8a 81       	ldd	r24, Y+2	; 0x02
    6466:	20 91 00 27 	lds	r18, 0x2700	; 0x802700 <g_twi1_baro_d1>
    646a:	30 91 01 27 	lds	r19, 0x2701	; 0x802701 <g_twi1_baro_d1+0x1>
    646e:	40 91 02 27 	lds	r20, 0x2702	; 0x802702 <g_twi1_baro_d1+0x2>
    6472:	50 91 03 27 	lds	r21, 0x2703	; 0x802703 <g_twi1_baro_d1+0x3>
    6476:	2f 8b       	std	Y+23, r18	; 0x17
    6478:	38 8f       	std	Y+24, r19	; 0x18
    647a:	49 8f       	std	Y+25, r20	; 0x19
    647c:	5a 8f       	std	Y+26, r21	; 0x1a
    647e:	40 91 fc 26 	lds	r20, 0x26FC	; 0x8026fc <g_twi1_baro_d2>
    6482:	50 91 fd 26 	lds	r21, 0x26FD	; 0x8026fd <g_twi1_baro_d2+0x1>
    6486:	60 91 fe 26 	lds	r22, 0x26FE	; 0x8026fe <g_twi1_baro_d2+0x2>
    648a:	70 91 ff 26 	lds	r23, 0x26FF	; 0x8026ff <g_twi1_baro_d2+0x3>
    648e:	8f bf       	out	0x3f, r24	; 63
    6490:	8f 89       	ldd	r24, Y+23	; 0x17
    6492:	98 8d       	ldd	r25, Y+24	; 0x18
    6494:	a9 8d       	ldd	r26, Y+25	; 0x19
    6496:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6498:	89 2b       	or	r24, r25
    649a:	8a 2b       	or	r24, r26
    649c:	8b 2b       	or	r24, r27
    649e:	31 f4       	brne	.+12     	; 0x64ac <task_twi1_baro+0x7c>
    64a0:	41 15       	cp	r20, r1
    64a2:	51 05       	cpc	r21, r1
    64a4:	61 05       	cpc	r22, r1
    64a6:	71 05       	cpc	r23, r1
    64a8:	09 f4       	brne	.+2      	; 0x64ac <task_twi1_baro+0x7c>
    64aa:	fe c1       	rjmp	.+1020   	; 0x68a8 <task_twi1_baro+0x478>
    64ac:	0f 2e       	mov	r0, r31
    64ae:	f4 e0       	ldi	r31, 0x04	; 4
    64b0:	2f 2e       	mov	r2, r31
    64b2:	f7 e2       	ldi	r31, 0x27	; 39
    64b4:	3f 2e       	mov	r3, r31
    64b6:	f0 2d       	mov	r31, r0
    64b8:	d1 01       	movw	r26, r2
    64ba:	1a 96       	adiw	r26, 0x0a	; 10
    64bc:	8d 91       	ld	r24, X+
    64be:	9c 91       	ld	r25, X
    64c0:	1b 97       	sbiw	r26, 0x0b	; 11
    64c2:	a0 e0       	ldi	r26, 0x00	; 0
    64c4:	b0 e0       	ldi	r27, 0x00	; 0
    64c6:	ba 2f       	mov	r27, r26
    64c8:	a9 2f       	mov	r26, r25
    64ca:	98 2f       	mov	r25, r24
    64cc:	88 27       	eor	r24, r24
    64ce:	2a 01       	movw	r4, r20
    64d0:	3b 01       	movw	r6, r22
    64d2:	48 1a       	sub	r4, r24
    64d4:	59 0a       	sbc	r5, r25
    64d6:	6a 0a       	sbc	r6, r26
    64d8:	7b 0a       	sbc	r7, r27
    64da:	a3 01       	movw	r20, r6
    64dc:	92 01       	movw	r18, r4
    64de:	55 0f       	add	r21, r21
    64e0:	22 0b       	sbc	r18, r18
    64e2:	32 2f       	mov	r19, r18
    64e4:	a9 01       	movw	r20, r18
    64e6:	2b 83       	std	Y+3, r18	; 0x03
    64e8:	3c 83       	std	Y+4, r19	; 0x04
    64ea:	4d 83       	std	Y+5, r20	; 0x05
    64ec:	5e 83       	std	Y+6, r21	; 0x06
    64ee:	d1 01       	movw	r26, r2
    64f0:	1c 96       	adiw	r26, 0x0c	; 12
    64f2:	4d 91       	ld	r20, X+
    64f4:	5c 91       	ld	r21, X
    64f6:	1d 97       	sbiw	r26, 0x0d	; 13
    64f8:	a4 2c       	mov	r10, r4
    64fa:	b5 2c       	mov	r11, r5
    64fc:	c6 2c       	mov	r12, r6
    64fe:	d7 2c       	mov	r13, r7
    6500:	eb 80       	ldd	r14, Y+3	; 0x03
    6502:	fe 2c       	mov	r15, r14
    6504:	0e 2d       	mov	r16, r14
    6506:	1e 2d       	mov	r17, r14
    6508:	24 2f       	mov	r18, r20
    650a:	35 2f       	mov	r19, r21
    650c:	40 e0       	ldi	r20, 0x00	; 0
    650e:	50 e0       	ldi	r21, 0x00	; 0
    6510:	60 e0       	ldi	r22, 0x00	; 0
    6512:	70 e0       	ldi	r23, 0x00	; 0
    6514:	80 e0       	ldi	r24, 0x00	; 0
    6516:	90 e0       	ldi	r25, 0x00	; 0
    6518:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    651c:	07 e1       	ldi	r16, 0x17	; 23
    651e:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    6522:	2b 87       	std	Y+11, r18	; 0x0b
    6524:	3c 87       	std	Y+12, r19	; 0x0c
    6526:	4d 87       	std	Y+13, r20	; 0x0d
    6528:	5e 87       	std	Y+14, r21	; 0x0e
    652a:	2b 85       	ldd	r18, Y+11	; 0x0b
    652c:	3c 85       	ldd	r19, Y+12	; 0x0c
    652e:	4d 85       	ldd	r20, Y+13	; 0x0d
    6530:	5e 85       	ldd	r21, Y+14	; 0x0e
    6532:	2b a3       	std	Y+35, r18	; 0x23
    6534:	3c a3       	std	Y+36, r19	; 0x24
    6536:	4d a3       	std	Y+37, r20	; 0x25
    6538:	5e a3       	std	Y+38, r21	; 0x26
    653a:	ba 01       	movw	r22, r20
    653c:	a9 01       	movw	r20, r18
    653e:	40 53       	subi	r20, 0x30	; 48
    6540:	58 4f       	sbci	r21, 0xF8	; 248
    6542:	6f 4f       	sbci	r22, 0xFF	; 255
    6544:	7f 4f       	sbci	r23, 0xFF	; 255
    6546:	4b 8b       	std	Y+19, r20	; 0x13
    6548:	5c 8b       	std	Y+20, r21	; 0x14
    654a:	6d 8b       	std	Y+21, r22	; 0x15
    654c:	7e 8b       	std	Y+22, r23	; 0x16
    654e:	d1 01       	movw	r26, r2
    6550:	18 96       	adiw	r26, 0x08	; 8
    6552:	4d 91       	ld	r20, X+
    6554:	5c 91       	ld	r21, X
    6556:	19 97       	sbiw	r26, 0x09	; 9
    6558:	fe 2c       	mov	r15, r14
    655a:	0e 2d       	mov	r16, r14
    655c:	24 2f       	mov	r18, r20
    655e:	35 2f       	mov	r19, r21
    6560:	40 e0       	ldi	r20, 0x00	; 0
    6562:	50 e0       	ldi	r21, 0x00	; 0
    6564:	60 e0       	ldi	r22, 0x00	; 0
    6566:	70 e0       	ldi	r23, 0x00	; 0
    6568:	80 e0       	ldi	r24, 0x00	; 0
    656a:	90 e0       	ldi	r25, 0x00	; 0
    656c:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    6570:	06 e0       	ldi	r16, 0x06	; 6
    6572:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    6576:	2f 87       	std	Y+15, r18	; 0x0f
    6578:	38 8b       	std	Y+16, r19	; 0x10
    657a:	84 2e       	mov	r8, r20
    657c:	95 2e       	mov	r9, r21
    657e:	b6 2f       	mov	r27, r22
    6580:	a7 2f       	mov	r26, r23
    6582:	89 8b       	std	Y+17, r24	; 0x11
    6584:	9a 8b       	std	Y+18, r25	; 0x12
    6586:	f1 01       	movw	r30, r2
    6588:	a4 80       	ldd	r10, Z+4	; 0x04
    658a:	b5 80       	ldd	r11, Z+5	; 0x05
    658c:	2a 2d       	mov	r18, r10
    658e:	3b 2d       	mov	r19, r11
    6590:	40 e0       	ldi	r20, 0x00	; 0
    6592:	50 e0       	ldi	r21, 0x00	; 0
    6594:	60 e0       	ldi	r22, 0x00	; 0
    6596:	70 e0       	ldi	r23, 0x00	; 0
    6598:	80 e0       	ldi	r24, 0x00	; 0
    659a:	90 e0       	ldi	r25, 0x00	; 0
    659c:	01 e1       	ldi	r16, 0x11	; 17
    659e:	0e 94 fd 88 	call	0x111fa	; 0x111fa <__ashldi3>
    65a2:	a2 2e       	mov	r10, r18
    65a4:	b3 2e       	mov	r11, r19
    65a6:	c4 2e       	mov	r12, r20
    65a8:	d5 2e       	mov	r13, r21
    65aa:	e6 2e       	mov	r14, r22
    65ac:	f7 2e       	mov	r15, r23
    65ae:	08 2f       	mov	r16, r24
    65b0:	19 2f       	mov	r17, r25
    65b2:	2f 85       	ldd	r18, Y+15	; 0x0f
    65b4:	38 89       	ldd	r19, Y+16	; 0x10
    65b6:	48 2d       	mov	r20, r8
    65b8:	59 2d       	mov	r21, r9
    65ba:	6b 2f       	mov	r22, r27
    65bc:	7a 2f       	mov	r23, r26
    65be:	89 89       	ldd	r24, Y+17	; 0x11
    65c0:	9a 89       	ldd	r25, Y+18	; 0x12
    65c2:	0e 94 34 89 	call	0x11268	; 0x11268 <__adddi3>
    65c6:	2f 87       	std	Y+15, r18	; 0x0f
    65c8:	38 8b       	std	Y+16, r19	; 0x10
    65ca:	4b 8f       	std	Y+27, r20	; 0x1b
    65cc:	5c 8f       	std	Y+28, r21	; 0x1c
    65ce:	6d 8f       	std	Y+29, r22	; 0x1d
    65d0:	7e 8f       	std	Y+30, r23	; 0x1e
    65d2:	8f 8f       	std	Y+31, r24	; 0x1f
    65d4:	98 a3       	std	Y+32, r25	; 0x20
    65d6:	46 81       	ldd	r20, Z+6	; 0x06
    65d8:	57 81       	ldd	r21, Z+7	; 0x07
    65da:	a4 2c       	mov	r10, r4
    65dc:	b5 2c       	mov	r11, r5
    65de:	c6 2c       	mov	r12, r6
    65e0:	d7 2c       	mov	r13, r7
    65e2:	eb 80       	ldd	r14, Y+3	; 0x03
    65e4:	fe 2c       	mov	r15, r14
    65e6:	0e 2d       	mov	r16, r14
    65e8:	1e 2d       	mov	r17, r14
    65ea:	24 2f       	mov	r18, r20
    65ec:	35 2f       	mov	r19, r21
    65ee:	40 e0       	ldi	r20, 0x00	; 0
    65f0:	50 e0       	ldi	r21, 0x00	; 0
    65f2:	60 e0       	ldi	r22, 0x00	; 0
    65f4:	70 e0       	ldi	r23, 0x00	; 0
    65f6:	80 e0       	ldi	r24, 0x00	; 0
    65f8:	90 e0       	ldi	r25, 0x00	; 0
    65fa:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    65fe:	07 e0       	ldi	r16, 0x07	; 7
    6600:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    6604:	29 8b       	std	Y+17, r18	; 0x11
    6606:	3a 8b       	std	Y+18, r19	; 0x12
    6608:	84 2e       	mov	r8, r20
    660a:	95 2e       	mov	r9, r21
    660c:	b6 2f       	mov	r27, r22
    660e:	a7 2f       	mov	r26, r23
    6610:	89 a3       	std	Y+33, r24	; 0x21
    6612:	9a a3       	std	Y+34, r25	; 0x22
    6614:	f1 01       	movw	r30, r2
    6616:	a2 80       	ldd	r10, Z+2	; 0x02
    6618:	b3 80       	ldd	r11, Z+3	; 0x03
    661a:	2a 2d       	mov	r18, r10
    661c:	3b 2d       	mov	r19, r11
    661e:	40 e0       	ldi	r20, 0x00	; 0
    6620:	50 e0       	ldi	r21, 0x00	; 0
    6622:	60 e0       	ldi	r22, 0x00	; 0
    6624:	70 e0       	ldi	r23, 0x00	; 0
    6626:	80 e0       	ldi	r24, 0x00	; 0
    6628:	90 e0       	ldi	r25, 0x00	; 0
    662a:	00 e1       	ldi	r16, 0x10	; 16
    662c:	0e 94 fd 88 	call	0x111fa	; 0x111fa <__ashldi3>
    6630:	a2 2e       	mov	r10, r18
    6632:	b3 2e       	mov	r11, r19
    6634:	c4 2e       	mov	r12, r20
    6636:	d5 2e       	mov	r13, r21
    6638:	e6 2e       	mov	r14, r22
    663a:	f7 2e       	mov	r15, r23
    663c:	08 2f       	mov	r16, r24
    663e:	19 2f       	mov	r17, r25
    6640:	29 89       	ldd	r18, Y+17	; 0x11
    6642:	3a 89       	ldd	r19, Y+18	; 0x12
    6644:	48 2d       	mov	r20, r8
    6646:	59 2d       	mov	r21, r9
    6648:	6b 2f       	mov	r22, r27
    664a:	7a 2f       	mov	r23, r26
    664c:	89 a1       	ldd	r24, Y+33	; 0x21
    664e:	9a a1       	ldd	r25, Y+34	; 0x22
    6650:	0e 94 34 89 	call	0x11268	; 0x11268 <__adddi3>
    6654:	32 2e       	mov	r3, r18
    6656:	23 2e       	mov	r2, r19
    6658:	49 8b       	std	Y+17, r20	; 0x11
    665a:	5a 8b       	std	Y+18, r21	; 0x12
    665c:	69 a3       	std	Y+33, r22	; 0x21
    665e:	7a a3       	std	Y+34, r23	; 0x22
    6660:	98 2e       	mov	r9, r24
    6662:	89 2e       	mov	r8, r25
    6664:	2b 89       	ldd	r18, Y+19	; 0x13
    6666:	3c 89       	ldd	r19, Y+20	; 0x14
    6668:	4d 89       	ldd	r20, Y+21	; 0x15
    666a:	5e 89       	ldd	r21, Y+22	; 0x16
    666c:	20 3d       	cpi	r18, 0xD0	; 208
    666e:	37 40       	sbci	r19, 0x07	; 7
    6670:	41 05       	cpc	r20, r1
    6672:	51 05       	cpc	r21, r1
    6674:	0c f0       	brlt	.+2      	; 0x6678 <task_twi1_baro+0x248>
    6676:	d0 c0       	rjmp	.+416    	; 0x6818 <task_twi1_baro+0x3e8>
    6678:	a4 2c       	mov	r10, r4
    667a:	b5 2c       	mov	r11, r5
    667c:	c6 2c       	mov	r12, r6
    667e:	d7 2c       	mov	r13, r7
    6680:	eb 80       	ldd	r14, Y+3	; 0x03
    6682:	fe 2c       	mov	r15, r14
    6684:	0e 2d       	mov	r16, r14
    6686:	1e 2d       	mov	r17, r14
    6688:	24 2d       	mov	r18, r4
    668a:	35 2d       	mov	r19, r5
    668c:	46 2d       	mov	r20, r6
    668e:	57 2d       	mov	r21, r7
    6690:	60 2f       	mov	r22, r16
    6692:	70 2f       	mov	r23, r16
    6694:	80 2f       	mov	r24, r16
    6696:	9e 2d       	mov	r25, r14
    6698:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    669c:	0f e1       	ldi	r16, 0x1F	; 31
    669e:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    66a2:	2b 83       	std	Y+3, r18	; 0x03
    66a4:	3c 83       	std	Y+4, r19	; 0x04
    66a6:	4d 83       	std	Y+5, r20	; 0x05
    66a8:	5e 83       	std	Y+6, r21	; 0x06
    66aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    66ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    66ae:	4d 85       	ldd	r20, Y+13	; 0x0d
    66b0:	5e 85       	ldd	r21, Y+14	; 0x0e
    66b2:	ca 01       	movw	r24, r20
    66b4:	b9 01       	movw	r22, r18
    66b6:	0e 94 41 87 	call	0x10e82	; 0x10e82 <__mulsi3>
    66ba:	2b 01       	movw	r4, r22
    66bc:	3c 01       	movw	r6, r24
    66be:	ad e3       	ldi	r26, 0x3D	; 61
    66c0:	b0 e0       	ldi	r27, 0x00	; 0
    66c2:	9b 01       	movw	r18, r22
    66c4:	ac 01       	movw	r20, r24
    66c6:	0e 94 d8 87 	call	0x10fb0	; 0x10fb0 <__muluhisi3>
    66ca:	7b 01       	movw	r14, r22
    66cc:	8c 01       	movw	r16, r24
    66ce:	68 94       	set
    66d0:	13 f8       	bld	r1, 3
    66d2:	15 95       	asr	r17
    66d4:	07 95       	ror	r16
    66d6:	f7 94       	ror	r15
    66d8:	e7 94       	ror	r14
    66da:	16 94       	lsr	r1
    66dc:	d1 f7       	brne	.-12     	; 0x66d2 <task_twi1_baro+0x2a2>
    66de:	44 0c       	add	r4, r4
    66e0:	55 1c       	adc	r5, r5
    66e2:	66 1c       	adc	r6, r6
    66e4:	77 1c       	adc	r7, r7
    66e6:	8b 89       	ldd	r24, Y+19	; 0x13
    66e8:	9c 89       	ldd	r25, Y+20	; 0x14
    66ea:	ad 89       	ldd	r26, Y+21	; 0x15
    66ec:	be 89       	ldd	r27, Y+22	; 0x16
    66ee:	84 32       	cpi	r24, 0x24	; 36
    66f0:	9a 4f       	sbci	r25, 0xFA	; 250
    66f2:	af 4f       	sbci	r26, 0xFF	; 255
    66f4:	bf 4f       	sbci	r27, 0xFF	; 255
    66f6:	c4 f5       	brge	.+112    	; 0x6768 <task_twi1_baro+0x338>
    66f8:	6b a1       	ldd	r22, Y+35	; 0x23
    66fa:	7c a1       	ldd	r23, Y+36	; 0x24
    66fc:	8d a1       	ldd	r24, Y+37	; 0x25
    66fe:	9e a1       	ldd	r25, Y+38	; 0x26
    6700:	64 55       	subi	r22, 0x54	; 84
    6702:	72 4f       	sbci	r23, 0xF2	; 242
    6704:	8f 4f       	sbci	r24, 0xFF	; 255
    6706:	9f 4f       	sbci	r25, 0xFF	; 255
    6708:	9b 01       	movw	r18, r22
    670a:	ac 01       	movw	r20, r24
    670c:	0e 94 41 87 	call	0x10e82	; 0x10e82 <__mulsi3>
    6710:	9b 01       	movw	r18, r22
    6712:	ac 01       	movw	r20, r24
    6714:	22 0f       	add	r18, r18
    6716:	33 1f       	adc	r19, r19
    6718:	44 1f       	adc	r20, r20
    671a:	55 1f       	adc	r21, r21
    671c:	dc 01       	movw	r26, r24
    671e:	cb 01       	movw	r24, r22
    6720:	82 0f       	add	r24, r18
    6722:	93 1f       	adc	r25, r19
    6724:	a4 1f       	adc	r26, r20
    6726:	b5 1f       	adc	r27, r21
    6728:	5c 01       	movw	r10, r24
    672a:	6d 01       	movw	r12, r26
    672c:	aa 0c       	add	r10, r10
    672e:	bb 1c       	adc	r11, r11
    6730:	cc 1c       	adc	r12, r12
    6732:	dd 1c       	adc	r13, r13
    6734:	aa 0c       	add	r10, r10
    6736:	bb 1c       	adc	r11, r11
    6738:	cc 1c       	adc	r12, r12
    673a:	dd 1c       	adc	r13, r13
    673c:	8a 0d       	add	r24, r10
    673e:	9b 1d       	adc	r25, r11
    6740:	ac 1d       	adc	r26, r12
    6742:	bd 1d       	adc	r27, r13
    6744:	e8 0e       	add	r14, r24
    6746:	f9 1e       	adc	r15, r25
    6748:	0a 1f       	adc	r16, r26
    674a:	1b 1f       	adc	r17, r27
    674c:	da 01       	movw	r26, r20
    674e:	c9 01       	movw	r24, r18
    6750:	88 0f       	add	r24, r24
    6752:	99 1f       	adc	r25, r25
    6754:	aa 1f       	adc	r26, r26
    6756:	bb 1f       	adc	r27, r27
    6758:	88 0f       	add	r24, r24
    675a:	99 1f       	adc	r25, r25
    675c:	aa 1f       	adc	r26, r26
    675e:	bb 1f       	adc	r27, r27
    6760:	48 0e       	add	r4, r24
    6762:	59 1e       	adc	r5, r25
    6764:	6a 1e       	adc	r6, r26
    6766:	7b 1e       	adc	r7, r27
    6768:	2b 89       	ldd	r18, Y+19	; 0x13
    676a:	3c 89       	ldd	r19, Y+20	; 0x14
    676c:	4d 89       	ldd	r20, Y+21	; 0x15
    676e:	5e 89       	ldd	r21, Y+22	; 0x16
    6770:	6b 81       	ldd	r22, Y+3	; 0x03
    6772:	7c 81       	ldd	r23, Y+4	; 0x04
    6774:	8d 81       	ldd	r24, Y+5	; 0x05
    6776:	9e 81       	ldd	r25, Y+6	; 0x06
    6778:	26 1b       	sub	r18, r22
    677a:	37 0b       	sbc	r19, r23
    677c:	48 0b       	sbc	r20, r24
    677e:	59 0b       	sbc	r21, r25
    6780:	2b 8b       	std	Y+19, r18	; 0x13
    6782:	3c 8b       	std	Y+20, r19	; 0x14
    6784:	4d 8b       	std	Y+21, r20	; 0x15
    6786:	5e 8b       	std	Y+22, r21	; 0x16
    6788:	d8 01       	movw	r26, r16
    678a:	c7 01       	movw	r24, r14
    678c:	bb 0f       	add	r27, r27
    678e:	88 0b       	sbc	r24, r24
    6790:	98 2f       	mov	r25, r24
    6792:	dc 01       	movw	r26, r24
    6794:	8b 83       	std	Y+3, r24	; 0x03
    6796:	9c 83       	std	Y+4, r25	; 0x04
    6798:	ad 83       	std	Y+5, r26	; 0x05
    679a:	be 83       	std	Y+6, r27	; 0x06
    679c:	2f 85       	ldd	r18, Y+15	; 0x0f
    679e:	38 89       	ldd	r19, Y+16	; 0x10
    67a0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    67a2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    67a4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    67a6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    67a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    67aa:	98 a1       	ldd	r25, Y+32	; 0x20
    67ac:	ae 2c       	mov	r10, r14
    67ae:	bf 2c       	mov	r11, r15
    67b0:	c0 2e       	mov	r12, r16
    67b2:	d1 2e       	mov	r13, r17
    67b4:	eb 80       	ldd	r14, Y+3	; 0x03
    67b6:	fe 2c       	mov	r15, r14
    67b8:	0e 2d       	mov	r16, r14
    67ba:	1e 2d       	mov	r17, r14
    67bc:	0e 94 49 89 	call	0x11292	; 0x11292 <__subdi3>
    67c0:	2f 87       	std	Y+15, r18	; 0x0f
    67c2:	38 8b       	std	Y+16, r19	; 0x10
    67c4:	4b 8f       	std	Y+27, r20	; 0x1b
    67c6:	5c 8f       	std	Y+28, r21	; 0x1c
    67c8:	6d 8f       	std	Y+29, r22	; 0x1d
    67ca:	7e 8f       	std	Y+30, r23	; 0x1e
    67cc:	8f 8f       	std	Y+31, r24	; 0x1f
    67ce:	98 a3       	std	Y+32, r25	; 0x20
    67d0:	a3 01       	movw	r20, r6
    67d2:	92 01       	movw	r18, r4
    67d4:	55 0f       	add	r21, r21
    67d6:	22 0b       	sbc	r18, r18
    67d8:	32 2f       	mov	r19, r18
    67da:	a9 01       	movw	r20, r18
    67dc:	2b 83       	std	Y+3, r18	; 0x03
    67de:	3c 83       	std	Y+4, r19	; 0x04
    67e0:	4d 83       	std	Y+5, r20	; 0x05
    67e2:	5e 83       	std	Y+6, r21	; 0x06
    67e4:	23 2d       	mov	r18, r3
    67e6:	32 2d       	mov	r19, r2
    67e8:	49 89       	ldd	r20, Y+17	; 0x11
    67ea:	5a 89       	ldd	r21, Y+18	; 0x12
    67ec:	69 a1       	ldd	r22, Y+33	; 0x21
    67ee:	7a a1       	ldd	r23, Y+34	; 0x22
    67f0:	89 2d       	mov	r24, r9
    67f2:	98 2d       	mov	r25, r8
    67f4:	a4 2c       	mov	r10, r4
    67f6:	b5 2c       	mov	r11, r5
    67f8:	c6 2c       	mov	r12, r6
    67fa:	d7 2c       	mov	r13, r7
    67fc:	eb 80       	ldd	r14, Y+3	; 0x03
    67fe:	fe 2c       	mov	r15, r14
    6800:	0e 2d       	mov	r16, r14
    6802:	1e 2d       	mov	r17, r14
    6804:	0e 94 49 89 	call	0x11292	; 0x11292 <__subdi3>
    6808:	32 2e       	mov	r3, r18
    680a:	23 2e       	mov	r2, r19
    680c:	49 8b       	std	Y+17, r20	; 0x11
    680e:	5a 8b       	std	Y+18, r21	; 0x12
    6810:	69 a3       	std	Y+33, r22	; 0x21
    6812:	7a a3       	std	Y+34, r23	; 0x22
    6814:	98 2e       	mov	r9, r24
    6816:	89 2e       	mov	r8, r25
    6818:	8f b7       	in	r24, 0x3f	; 63
    681a:	89 83       	std	Y+1, r24	; 0x01
    681c:	f8 94       	cli
    681e:	79 80       	ldd	r7, Y+1	; 0x01
    6820:	4b 89       	ldd	r20, Y+19	; 0x13
    6822:	5c 89       	ldd	r21, Y+20	; 0x14
    6824:	6d 89       	ldd	r22, Y+21	; 0x15
    6826:	7e 89       	ldd	r23, Y+22	; 0x16
    6828:	40 93 f8 26 	sts	0x26F8, r20	; 0x8026f8 <g_twi1_baro_temp_100>
    682c:	50 93 f9 26 	sts	0x26F9, r21	; 0x8026f9 <g_twi1_baro_temp_100+0x1>
    6830:	60 93 fa 26 	sts	0x26FA, r22	; 0x8026fa <g_twi1_baro_temp_100+0x2>
    6834:	70 93 fb 26 	sts	0x26FB, r23	; 0x8026fb <g_twi1_baro_temp_100+0x3>
    6838:	4f 89       	ldd	r20, Y+23	; 0x17
    683a:	58 8d       	ldd	r21, Y+24	; 0x18
    683c:	69 8d       	ldd	r22, Y+25	; 0x19
    683e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6840:	9a 01       	movw	r18, r20
    6842:	ab 01       	movw	r20, r22
    6844:	60 e0       	ldi	r22, 0x00	; 0
    6846:	70 e0       	ldi	r23, 0x00	; 0
    6848:	cb 01       	movw	r24, r22
    684a:	2b 83       	std	Y+3, r18	; 0x03
    684c:	3c 83       	std	Y+4, r19	; 0x04
    684e:	4d 83       	std	Y+5, r20	; 0x05
    6850:	5e 83       	std	Y+6, r21	; 0x06
    6852:	6f 83       	std	Y+7, r22	; 0x07
    6854:	78 87       	std	Y+8, r23	; 0x08
    6856:	89 87       	std	Y+9, r24	; 0x09
    6858:	9a 87       	std	Y+10, r25	; 0x0a
    685a:	a3 2c       	mov	r10, r3
    685c:	b2 2c       	mov	r11, r2
    685e:	c9 88       	ldd	r12, Y+17	; 0x11
    6860:	da 88       	ldd	r13, Y+18	; 0x12
    6862:	e9 a0       	ldd	r14, Y+33	; 0x21
    6864:	fa a0       	ldd	r15, Y+34	; 0x22
    6866:	09 2d       	mov	r16, r9
    6868:	18 2d       	mov	r17, r8
    686a:	60 e0       	ldi	r22, 0x00	; 0
    686c:	70 e0       	ldi	r23, 0x00	; 0
    686e:	80 e0       	ldi	r24, 0x00	; 0
    6870:	90 e0       	ldi	r25, 0x00	; 0
    6872:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    6876:	05 e1       	ldi	r16, 0x15	; 21
    6878:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    687c:	af 84       	ldd	r10, Y+15	; 0x0f
    687e:	b8 88       	ldd	r11, Y+16	; 0x10
    6880:	cb 8c       	ldd	r12, Y+27	; 0x1b
    6882:	dc 8c       	ldd	r13, Y+28	; 0x1c
    6884:	ed 8c       	ldd	r14, Y+29	; 0x1d
    6886:	fe 8c       	ldd	r15, Y+30	; 0x1e
    6888:	0f 8d       	ldd	r16, Y+31	; 0x1f
    688a:	18 a1       	ldd	r17, Y+32	; 0x20
    688c:	0e 94 49 89 	call	0x11292	; 0x11292 <__subdi3>
    6890:	0f e0       	ldi	r16, 0x0F	; 15
    6892:	0e 94 16 89 	call	0x1122c	; 0x1122c <__ashrdi3>
    6896:	20 93 f4 26 	sts	0x26F4, r18	; 0x8026f4 <g_twi1_baro_p_100>
    689a:	30 93 f5 26 	sts	0x26F5, r19	; 0x8026f5 <g_twi1_baro_p_100+0x1>
    689e:	40 93 f6 26 	sts	0x26F6, r20	; 0x8026f6 <g_twi1_baro_p_100+0x2>
    68a2:	50 93 f7 26 	sts	0x26F7, r21	; 0x8026f7 <g_twi1_baro_p_100+0x3>
    68a6:	7f be       	out	0x3f, r7	; 63
    68a8:	a6 96       	adiw	r28, 0x26	; 38
    68aa:	cd bf       	out	0x3d, r28	; 61
    68ac:	de bf       	out	0x3e, r29	; 62
    68ae:	df 91       	pop	r29
    68b0:	cf 91       	pop	r28
    68b2:	1f 91       	pop	r17
    68b4:	0f 91       	pop	r16
    68b6:	ff 90       	pop	r15
    68b8:	ef 90       	pop	r14
    68ba:	df 90       	pop	r13
    68bc:	cf 90       	pop	r12
    68be:	bf 90       	pop	r11
    68c0:	af 90       	pop	r10
    68c2:	9f 90       	pop	r9
    68c4:	8f 90       	pop	r8
    68c6:	7f 90       	pop	r7
    68c8:	6f 90       	pop	r6
    68ca:	5f 90       	pop	r5
    68cc:	4f 90       	pop	r4
    68ce:	3f 90       	pop	r3
    68d0:	2f 90       	pop	r2
    68d2:	08 95       	ret

000068d4 <service_twi1_baro>:
    68d4:	cf 93       	push	r28
    68d6:	df 93       	push	r29
    68d8:	1f 92       	push	r1
    68da:	cd b7       	in	r28, 0x3d	; 61
    68dc:	de b7       	in	r29, 0x3e	; 62
    68de:	44 23       	and	r20, r20
    68e0:	59 f0       	breq	.+22     	; 0x68f8 <service_twi1_baro+0x24>
    68e2:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <s_step.8020>
    68e6:	84 36       	cpi	r24, 0x64	; 100
    68e8:	08 f4       	brcc	.+2      	; 0x68ec <service_twi1_baro+0x18>
    68ea:	cb c0       	rjmp	.+406    	; 0x6a82 <service_twi1_baro+0x1ae>
    68ec:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <s_step.8020>
    68f0:	81 e0       	ldi	r24, 0x01	; 1
    68f2:	80 93 5d 26 	sts	0x265D, r24	; 0x80265d <g_twi1_lock>
    68f6:	09 c0       	rjmp	.+18     	; 0x690a <service_twi1_baro+0x36>
    68f8:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <s_step.8020>
    68fc:	85 31       	cpi	r24, 0x15	; 21
    68fe:	19 f1       	breq	.+70     	; 0x6946 <service_twi1_baro+0x72>
    6900:	8b 32       	cpi	r24, 0x2B	; 43
    6902:	09 f4       	brne	.+2      	; 0x6906 <service_twi1_baro+0x32>
    6904:	5d c0       	rjmp	.+186    	; 0x69c0 <service_twi1_baro+0xec>
    6906:	81 11       	cpse	r24, r1
    6908:	b1 c0       	rjmp	.+354    	; 0x6a6c <service_twi1_baro+0x198>
    690a:	eb e2       	ldi	r30, 0x2B	; 43
    690c:	f0 e2       	ldi	r31, 0x20	; 32
    690e:	86 e7       	ldi	r24, 0x76	; 118
    6910:	80 83       	st	Z, r24
    6912:	88 e4       	ldi	r24, 0x48	; 72
    6914:	81 83       	std	Z+1, r24	; 0x01
    6916:	81 e0       	ldi	r24, 0x01	; 1
    6918:	90 e0       	ldi	r25, 0x00	; 0
    691a:	84 83       	std	Z+4, r24	; 0x04
    691c:	95 83       	std	Z+5, r25	; 0x05
    691e:	10 86       	std	Z+8, r1	; 0x08
    6920:	11 86       	std	Z+9, r1	; 0x09
    6922:	40 e0       	ldi	r20, 0x00	; 0
    6924:	bf 01       	movw	r22, r30
    6926:	80 ea       	ldi	r24, 0xA0	; 160
    6928:	94 e0       	ldi	r25, 0x04	; 4
    692a:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    692e:	81 11       	cpse	r24, r1
    6930:	05 c0       	rjmp	.+10     	; 0x693c <service_twi1_baro+0x68>
    6932:	81 e0       	ldi	r24, 0x01	; 1
    6934:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8020>
    6938:	80 e0       	ldi	r24, 0x00	; 0
    693a:	ac c0       	rjmp	.+344    	; 0x6a94 <service_twi1_baro+0x1c0>
    693c:	88 ec       	ldi	r24, 0xC8	; 200
    693e:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8020>
    6942:	80 e0       	ldi	r24, 0x00	; 0
    6944:	a7 c0       	rjmp	.+334    	; 0x6a94 <service_twi1_baro+0x1c0>
    6946:	eb e2       	ldi	r30, 0x2B	; 43
    6948:	f0 e2       	ldi	r31, 0x20	; 32
    694a:	11 82       	std	Z+1, r1	; 0x01
    694c:	83 e0       	ldi	r24, 0x03	; 3
    694e:	90 e0       	ldi	r25, 0x00	; 0
    6950:	80 87       	std	Z+8, r24	; 0x08
    6952:	91 87       	std	Z+9, r25	; 0x09
    6954:	41 e0       	ldi	r20, 0x01	; 1
    6956:	bf 01       	movw	r22, r30
    6958:	80 ea       	ldi	r24, 0xA0	; 160
    695a:	94 e0       	ldi	r25, 0x04	; 4
    695c:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6960:	81 11       	cpse	r24, r1
    6962:	29 c0       	rjmp	.+82     	; 0x69b6 <service_twi1_baro+0xe2>
    6964:	e3 e1       	ldi	r30, 0x13	; 19
    6966:	f5 e2       	ldi	r31, 0x25	; 37
    6968:	20 81       	ld	r18, Z
    696a:	81 81       	ldd	r24, Z+1	; 0x01
    696c:	90 e0       	ldi	r25, 0x00	; 0
    696e:	a0 e0       	ldi	r26, 0x00	; 0
    6970:	b0 e0       	ldi	r27, 0x00	; 0
    6972:	ba 2f       	mov	r27, r26
    6974:	a9 2f       	mov	r26, r25
    6976:	98 2f       	mov	r25, r24
    6978:	88 27       	eor	r24, r24
    697a:	a2 2b       	or	r26, r18
    697c:	22 81       	ldd	r18, Z+2	; 0x02
    697e:	82 2b       	or	r24, r18
    6980:	80 93 09 23 	sts	0x2309, r24	; 0x802309 <s_twi1_baro_d1.8021>
    6984:	90 93 0a 23 	sts	0x230A, r25	; 0x80230a <s_twi1_baro_d1.8021+0x1>
    6988:	a0 93 0b 23 	sts	0x230B, r26	; 0x80230b <s_twi1_baro_d1.8021+0x2>
    698c:	b0 93 0c 23 	sts	0x230C, r27	; 0x80230c <s_twi1_baro_d1.8021+0x3>
    6990:	eb e2       	ldi	r30, 0x2B	; 43
    6992:	f0 e2       	ldi	r31, 0x20	; 32
    6994:	88 e5       	ldi	r24, 0x58	; 88
    6996:	81 83       	std	Z+1, r24	; 0x01
    6998:	10 86       	std	Z+8, r1	; 0x08
    699a:	11 86       	std	Z+9, r1	; 0x09
    699c:	40 e0       	ldi	r20, 0x00	; 0
    699e:	bf 01       	movw	r22, r30
    69a0:	80 ea       	ldi	r24, 0xA0	; 160
    69a2:	94 e0       	ldi	r25, 0x04	; 4
    69a4:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    69a8:	81 11       	cpse	r24, r1
    69aa:	05 c0       	rjmp	.+10     	; 0x69b6 <service_twi1_baro+0xe2>
    69ac:	86 e1       	ldi	r24, 0x16	; 22
    69ae:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8020>
    69b2:	80 e0       	ldi	r24, 0x00	; 0
    69b4:	6f c0       	rjmp	.+222    	; 0x6a94 <service_twi1_baro+0x1c0>
    69b6:	83 ed       	ldi	r24, 0xD3	; 211
    69b8:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8020>
    69bc:	80 e0       	ldi	r24, 0x00	; 0
    69be:	6a c0       	rjmp	.+212    	; 0x6a94 <service_twi1_baro+0x1c0>
    69c0:	eb e2       	ldi	r30, 0x2B	; 43
    69c2:	f0 e2       	ldi	r31, 0x20	; 32
    69c4:	11 82       	std	Z+1, r1	; 0x01
    69c6:	83 e0       	ldi	r24, 0x03	; 3
    69c8:	90 e0       	ldi	r25, 0x00	; 0
    69ca:	80 87       	std	Z+8, r24	; 0x08
    69cc:	91 87       	std	Z+9, r25	; 0x09
    69ce:	41 e0       	ldi	r20, 0x01	; 1
    69d0:	bf 01       	movw	r22, r30
    69d2:	80 ea       	ldi	r24, 0xA0	; 160
    69d4:	94 e0       	ldi	r25, 0x04	; 4
    69d6:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    69da:	81 11       	cpse	r24, r1
    69dc:	42 c0       	rjmp	.+132    	; 0x6a62 <service_twi1_baro+0x18e>
    69de:	e3 e1       	ldi	r30, 0x13	; 19
    69e0:	f5 e2       	ldi	r31, 0x25	; 37
    69e2:	20 81       	ld	r18, Z
    69e4:	81 81       	ldd	r24, Z+1	; 0x01
    69e6:	90 e0       	ldi	r25, 0x00	; 0
    69e8:	a0 e0       	ldi	r26, 0x00	; 0
    69ea:	b0 e0       	ldi	r27, 0x00	; 0
    69ec:	ba 2f       	mov	r27, r26
    69ee:	a9 2f       	mov	r26, r25
    69f0:	98 2f       	mov	r25, r24
    69f2:	88 27       	eor	r24, r24
    69f4:	a2 2b       	or	r26, r18
    69f6:	22 81       	ldd	r18, Z+2	; 0x02
    69f8:	82 2b       	or	r24, r18
    69fa:	80 93 05 23 	sts	0x2305, r24	; 0x802305 <s_twi1_baro_d2.8022>
    69fe:	90 93 06 23 	sts	0x2306, r25	; 0x802306 <s_twi1_baro_d2.8022+0x1>
    6a02:	a0 93 07 23 	sts	0x2307, r26	; 0x802307 <s_twi1_baro_d2.8022+0x2>
    6a06:	b0 93 08 23 	sts	0x2308, r27	; 0x802308 <s_twi1_baro_d2.8022+0x3>
    6a0a:	8f b7       	in	r24, 0x3f	; 63
    6a0c:	89 83       	std	Y+1, r24	; 0x01
    6a0e:	f8 94       	cli
    6a10:	89 81       	ldd	r24, Y+1	; 0x01
    6a12:	40 91 09 23 	lds	r20, 0x2309	; 0x802309 <s_twi1_baro_d1.8021>
    6a16:	50 91 0a 23 	lds	r21, 0x230A	; 0x80230a <s_twi1_baro_d1.8021+0x1>
    6a1a:	60 91 0b 23 	lds	r22, 0x230B	; 0x80230b <s_twi1_baro_d1.8021+0x2>
    6a1e:	70 91 0c 23 	lds	r23, 0x230C	; 0x80230c <s_twi1_baro_d1.8021+0x3>
    6a22:	40 93 00 27 	sts	0x2700, r20	; 0x802700 <g_twi1_baro_d1>
    6a26:	50 93 01 27 	sts	0x2701, r21	; 0x802701 <g_twi1_baro_d1+0x1>
    6a2a:	60 93 02 27 	sts	0x2702, r22	; 0x802702 <g_twi1_baro_d1+0x2>
    6a2e:	70 93 03 27 	sts	0x2703, r23	; 0x802703 <g_twi1_baro_d1+0x3>
    6a32:	40 91 05 23 	lds	r20, 0x2305	; 0x802305 <s_twi1_baro_d2.8022>
    6a36:	50 91 06 23 	lds	r21, 0x2306	; 0x802306 <s_twi1_baro_d2.8022+0x1>
    6a3a:	60 91 07 23 	lds	r22, 0x2307	; 0x802307 <s_twi1_baro_d2.8022+0x2>
    6a3e:	70 91 08 23 	lds	r23, 0x2308	; 0x802308 <s_twi1_baro_d2.8022+0x3>
    6a42:	40 93 fc 26 	sts	0x26FC, r20	; 0x8026fc <g_twi1_baro_d2>
    6a46:	50 93 fd 26 	sts	0x26FD, r21	; 0x8026fd <g_twi1_baro_d2+0x1>
    6a4a:	60 93 fe 26 	sts	0x26FE, r22	; 0x8026fe <g_twi1_baro_d2+0x2>
    6a4e:	70 93 ff 26 	sts	0x26FF, r23	; 0x8026ff <g_twi1_baro_d2+0x3>
    6a52:	8f bf       	out	0x3f, r24	; 63
    6a54:	8b e7       	ldi	r24, 0x7B	; 123
    6a56:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8020>
    6a5a:	10 92 5d 26 	sts	0x265D, r1	; 0x80265d <g_twi1_lock>
    6a5e:	81 e0       	ldi	r24, 0x01	; 1
    6a60:	19 c0       	rjmp	.+50     	; 0x6a94 <service_twi1_baro+0x1c0>
    6a62:	8f ed       	ldi	r24, 0xDF	; 223
    6a64:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8020>
    6a68:	80 e0       	ldi	r24, 0x00	; 0
    6a6a:	14 c0       	rjmp	.+40     	; 0x6a94 <service_twi1_baro+0x1c0>
    6a6c:	84 36       	cpi	r24, 0x64	; 100
    6a6e:	28 f4       	brcc	.+10     	; 0x6a7a <service_twi1_baro+0x1a6>
    6a70:	8f 5f       	subi	r24, 0xFF	; 255
    6a72:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <s_step.8020>
    6a76:	80 e0       	ldi	r24, 0x00	; 0
    6a78:	0d c0       	rjmp	.+26     	; 0x6a94 <service_twi1_baro+0x1c0>
    6a7a:	10 92 5d 26 	sts	0x265D, r1	; 0x80265d <g_twi1_lock>
    6a7e:	80 e0       	ldi	r24, 0x00	; 0
    6a80:	09 c0       	rjmp	.+18     	; 0x6a94 <service_twi1_baro+0x1c0>
    6a82:	85 31       	cpi	r24, 0x15	; 21
    6a84:	09 f4       	brne	.+2      	; 0x6a88 <service_twi1_baro+0x1b4>
    6a86:	5f cf       	rjmp	.-322    	; 0x6946 <service_twi1_baro+0x72>
    6a88:	8b 32       	cpi	r24, 0x2B	; 43
    6a8a:	09 f4       	brne	.+2      	; 0x6a8e <service_twi1_baro+0x1ba>
    6a8c:	99 cf       	rjmp	.-206    	; 0x69c0 <service_twi1_baro+0xec>
    6a8e:	81 11       	cpse	r24, r1
    6a90:	ef cf       	rjmp	.-34     	; 0x6a70 <service_twi1_baro+0x19c>
    6a92:	3b cf       	rjmp	.-394    	; 0x690a <service_twi1_baro+0x36>
    6a94:	0f 90       	pop	r0
    6a96:	df 91       	pop	r29
    6a98:	cf 91       	pop	r28
    6a9a:	08 95       	ret

00006a9c <twi2_waitUntilReady>:
    6a9c:	cf 92       	push	r12
    6a9e:	df 92       	push	r13
    6aa0:	ef 92       	push	r14
    6aa2:	ff 92       	push	r15
    6aa4:	0f 93       	push	r16
    6aa6:	1f 93       	push	r17
    6aa8:	cf 93       	push	r28
    6aaa:	e7 e1       	ldi	r30, 0x17	; 23
    6aac:	f0 e2       	ldi	r31, 0x20	; 32
    6aae:	83 e0       	ldi	r24, 0x03	; 3
    6ab0:	81 83       	std	Z+1, r24	; 0x01
    6ab2:	81 e0       	ldi	r24, 0x01	; 1
    6ab4:	90 e0       	ldi	r25, 0x00	; 0
    6ab6:	84 83       	std	Z+4, r24	; 0x04
    6ab8:	95 83       	std	Z+5, r25	; 0x05
    6aba:	8f 01       	movw	r16, r30
    6abc:	cc 24       	eor	r12, r12
    6abe:	c3 94       	inc	r12
    6ac0:	d1 2c       	mov	r13, r1
    6ac2:	0f 2e       	mov	r0, r31
    6ac4:	fb e0       	ldi	r31, 0x0B	; 11
    6ac6:	ef 2e       	mov	r14, r31
    6ac8:	f5 e2       	ldi	r31, 0x25	; 37
    6aca:	ff 2e       	mov	r15, r31
    6acc:	f0 2d       	mov	r31, r0
    6ace:	f8 01       	movw	r30, r16
    6ad0:	c0 86       	std	Z+8, r12	; 0x08
    6ad2:	d1 86       	std	Z+9, r13	; 0x09
    6ad4:	41 e0       	ldi	r20, 0x01	; 1
    6ad6:	b8 01       	movw	r22, r16
    6ad8:	80 e8       	ldi	r24, 0x80	; 128
    6ada:	94 e0       	ldi	r25, 0x04	; 4
    6adc:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6ae0:	f7 01       	movw	r30, r14
    6ae2:	c0 81       	ld	r28, Z
    6ae4:	9c 2f       	mov	r25, r28
    6ae6:	90 78       	andi	r25, 0x80	; 128
    6ae8:	81 11       	cpse	r24, r1
    6aea:	0d c0       	rjmp	.+26     	; 0x6b06 <twi2_waitUntilReady+0x6a>
    6aec:	91 f0       	breq	.+36     	; 0x6b12 <twi2_waitUntilReady+0x76>
    6aee:	8c 2f       	mov	r24, r28
    6af0:	81 78       	andi	r24, 0x81	; 129
    6af2:	81 38       	cpi	r24, 0x81	; 129
    6af4:	29 f4       	brne	.+10     	; 0x6b00 <twi2_waitUntilReady+0x64>
    6af6:	65 ef       	ldi	r22, 0xF5	; 245
    6af8:	71 e0       	ldi	r23, 0x01	; 1
    6afa:	80 e0       	ldi	r24, 0x00	; 0
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	5a d9       	rcall	.-3404   	; 0x5db4 <__portable_avr_delay_cycles>
    6b00:	c0 fd       	sbrc	r28, 0
    6b02:	e5 cf       	rjmp	.-54     	; 0x6ace <twi2_waitUntilReady+0x32>
    6b04:	0c c0       	rjmp	.+24     	; 0x6b1e <twi2_waitUntilReady+0x82>
    6b06:	65 e0       	ldi	r22, 0x05	; 5
    6b08:	70 e0       	ldi	r23, 0x00	; 0
    6b0a:	80 e0       	ldi	r24, 0x00	; 0
    6b0c:	90 e0       	ldi	r25, 0x00	; 0
    6b0e:	52 d9       	rcall	.-3420   	; 0x5db4 <__portable_avr_delay_cycles>
    6b10:	de cf       	rjmp	.-68     	; 0x6ace <twi2_waitUntilReady+0x32>
    6b12:	65 e0       	ldi	r22, 0x05	; 5
    6b14:	70 e0       	ldi	r23, 0x00	; 0
    6b16:	80 e0       	ldi	r24, 0x00	; 0
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	4c d9       	rcall	.-3432   	; 0x5db4 <__portable_avr_delay_cycles>
    6b1c:	d8 cf       	rjmp	.-80     	; 0x6ace <twi2_waitUntilReady+0x32>
    6b1e:	cf 91       	pop	r28
    6b20:	1f 91       	pop	r17
    6b22:	0f 91       	pop	r16
    6b24:	ff 90       	pop	r15
    6b26:	ef 90       	pop	r14
    6b28:	df 90       	pop	r13
    6b2a:	cf 90       	pop	r12
    6b2c:	08 95       	ret

00006b2e <twi2_set_leds>:
    6b2e:	cf 93       	push	r28
    6b30:	c8 2f       	mov	r28, r24
    6b32:	b4 df       	rcall	.-152    	; 0x6a9c <twi2_waitUntilReady>
    6b34:	e7 e1       	ldi	r30, 0x17	; 23
    6b36:	f0 e2       	ldi	r31, 0x20	; 32
    6b38:	80 e7       	ldi	r24, 0x70	; 112
    6b3a:	81 83       	std	Z+1, r24	; 0x01
    6b3c:	c3 70       	andi	r28, 0x03	; 3
    6b3e:	c0 93 0b 25 	sts	0x250B, r28	; 0x80250b <twi2_m_data>
    6b42:	81 e0       	ldi	r24, 0x01	; 1
    6b44:	90 e0       	ldi	r25, 0x00	; 0
    6b46:	80 87       	std	Z+8, r24	; 0x08
    6b48:	91 87       	std	Z+9, r25	; 0x09
    6b4a:	40 e0       	ldi	r20, 0x00	; 0
    6b4c:	bf 01       	movw	r22, r30
    6b4e:	80 e8       	ldi	r24, 0x80	; 128
    6b50:	94 e0       	ldi	r25, 0x04	; 4
    6b52:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6b56:	65 e0       	ldi	r22, 0x05	; 5
    6b58:	70 e0       	ldi	r23, 0x00	; 0
    6b5a:	80 e0       	ldi	r24, 0x00	; 0
    6b5c:	90 e0       	ldi	r25, 0x00	; 0
    6b5e:	2a d9       	rcall	.-3500   	; 0x5db4 <__portable_avr_delay_cycles>
    6b60:	cf 91       	pop	r28
    6b62:	08 95       	ret

00006b64 <twi2_set_ledbl>:
    6b64:	cf 93       	push	r28
    6b66:	df 93       	push	r29
    6b68:	d8 2f       	mov	r29, r24
    6b6a:	c6 2f       	mov	r28, r22
    6b6c:	97 df       	rcall	.-210    	; 0x6a9c <twi2_waitUntilReady>
    6b6e:	e7 e1       	ldi	r30, 0x17	; 23
    6b70:	f0 e2       	ldi	r31, 0x20	; 32
    6b72:	84 e7       	ldi	r24, 0x74	; 116
    6b74:	81 83       	std	Z+1, r24	; 0x01
    6b76:	ab e0       	ldi	r26, 0x0B	; 11
    6b78:	b5 e2       	ldi	r27, 0x25	; 37
    6b7a:	dc 93       	st	X, r29
    6b7c:	11 96       	adiw	r26, 0x01	; 1
    6b7e:	cc 93       	st	X, r28
    6b80:	82 e0       	ldi	r24, 0x02	; 2
    6b82:	90 e0       	ldi	r25, 0x00	; 0
    6b84:	80 87       	std	Z+8, r24	; 0x08
    6b86:	91 87       	std	Z+9, r25	; 0x09
    6b88:	40 e0       	ldi	r20, 0x00	; 0
    6b8a:	bf 01       	movw	r22, r30
    6b8c:	80 e8       	ldi	r24, 0x80	; 128
    6b8e:	94 e0       	ldi	r25, 0x04	; 4
    6b90:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6b94:	65 e0       	ldi	r22, 0x05	; 5
    6b96:	70 e0       	ldi	r23, 0x00	; 0
    6b98:	80 e0       	ldi	r24, 0x00	; 0
    6b9a:	90 e0       	ldi	r25, 0x00	; 0
    6b9c:	0b d9       	rcall	.-3562   	; 0x5db4 <__portable_avr_delay_cycles>
    6b9e:	df 91       	pop	r29
    6ba0:	cf 91       	pop	r28
    6ba2:	08 95       	ret

00006ba4 <twi2_set_bias>:
    6ba4:	cf 93       	push	r28
    6ba6:	c8 2f       	mov	r28, r24
    6ba8:	79 df       	rcall	.-270    	; 0x6a9c <twi2_waitUntilReady>
    6baa:	e7 e1       	ldi	r30, 0x17	; 23
    6bac:	f0 e2       	ldi	r31, 0x20	; 32
    6bae:	85 e7       	ldi	r24, 0x75	; 117
    6bb0:	81 83       	std	Z+1, r24	; 0x01
    6bb2:	c0 93 0b 25 	sts	0x250B, r28	; 0x80250b <twi2_m_data>
    6bb6:	81 e0       	ldi	r24, 0x01	; 1
    6bb8:	90 e0       	ldi	r25, 0x00	; 0
    6bba:	80 87       	std	Z+8, r24	; 0x08
    6bbc:	91 87       	std	Z+9, r25	; 0x09
    6bbe:	40 e0       	ldi	r20, 0x00	; 0
    6bc0:	bf 01       	movw	r22, r30
    6bc2:	80 e8       	ldi	r24, 0x80	; 128
    6bc4:	94 e0       	ldi	r25, 0x04	; 4
    6bc6:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6bca:	65 e0       	ldi	r22, 0x05	; 5
    6bcc:	70 e0       	ldi	r23, 0x00	; 0
    6bce:	80 e0       	ldi	r24, 0x00	; 0
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	f0 d8       	rcall	.-3616   	; 0x5db4 <__portable_avr_delay_cycles>
    6bd4:	cf 91       	pop	r28
    6bd6:	08 95       	ret

00006bd8 <twi2_set_beep>:
    6bd8:	cf 93       	push	r28
    6bda:	df 93       	push	r29
    6bdc:	c8 2f       	mov	r28, r24
    6bde:	d6 2f       	mov	r29, r22
    6be0:	5d df       	rcall	.-326    	; 0x6a9c <twi2_waitUntilReady>
    6be2:	e7 e1       	ldi	r30, 0x17	; 23
    6be4:	f0 e2       	ldi	r31, 0x20	; 32
    6be6:	81 e7       	ldi	r24, 0x71	; 113
    6be8:	81 83       	std	Z+1, r24	; 0x01
    6bea:	ab e0       	ldi	r26, 0x0B	; 11
    6bec:	b5 e2       	ldi	r27, 0x25	; 37
    6bee:	dc 93       	st	X, r29
    6bf0:	11 96       	adiw	r26, 0x01	; 1
    6bf2:	cc 93       	st	X, r28
    6bf4:	82 e0       	ldi	r24, 0x02	; 2
    6bf6:	90 e0       	ldi	r25, 0x00	; 0
    6bf8:	80 87       	std	Z+8, r24	; 0x08
    6bfa:	91 87       	std	Z+9, r25	; 0x09
    6bfc:	40 e0       	ldi	r20, 0x00	; 0
    6bfe:	bf 01       	movw	r22, r30
    6c00:	80 e8       	ldi	r24, 0x80	; 128
    6c02:	94 e0       	ldi	r25, 0x04	; 4
    6c04:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6c08:	65 e0       	ldi	r22, 0x05	; 5
    6c0a:	70 e0       	ldi	r23, 0x00	; 0
    6c0c:	80 e0       	ldi	r24, 0x00	; 0
    6c0e:	90 e0       	ldi	r25, 0x00	; 0
    6c10:	d1 d8       	rcall	.-3678   	; 0x5db4 <__portable_avr_delay_cycles>
    6c12:	df 91       	pop	r29
    6c14:	cf 91       	pop	r28
    6c16:	08 95       	ret

00006c18 <twi1_gyro_gyro_offset_set>:
    6c18:	ab e2       	ldi	r26, 0x2B	; 43
    6c1a:	b0 e2       	ldi	r27, 0x20	; 32
    6c1c:	88 e6       	ldi	r24, 0x68	; 104
    6c1e:	8c 93       	st	X, r24
    6c20:	83 e1       	ldi	r24, 0x13	; 19
    6c22:	11 96       	adiw	r26, 0x01	; 1
    6c24:	8c 93       	st	X, r24
    6c26:	11 97       	sbiw	r26, 0x01	; 1
    6c28:	81 e0       	ldi	r24, 0x01	; 1
    6c2a:	90 e0       	ldi	r25, 0x00	; 0
    6c2c:	14 96       	adiw	r26, 0x04	; 4
    6c2e:	8d 93       	st	X+, r24
    6c30:	9c 93       	st	X, r25
    6c32:	15 97       	sbiw	r26, 0x05	; 5
    6c34:	80 91 4b 27 	lds	r24, 0x274B	; 0x80274b <g_twi1_gyro_1_gyro_ofsx>
    6c38:	90 91 4c 27 	lds	r25, 0x274C	; 0x80274c <g_twi1_gyro_1_gyro_ofsx+0x1>
    6c3c:	e3 e1       	ldi	r30, 0x13	; 19
    6c3e:	f5 e2       	ldi	r31, 0x25	; 37
    6c40:	90 83       	st	Z, r25
    6c42:	81 83       	std	Z+1, r24	; 0x01
    6c44:	80 91 49 27 	lds	r24, 0x2749	; 0x802749 <g_twi1_gyro_1_gyro_ofsy>
    6c48:	90 91 4a 27 	lds	r25, 0x274A	; 0x80274a <g_twi1_gyro_1_gyro_ofsy+0x1>
    6c4c:	92 83       	std	Z+2, r25	; 0x02
    6c4e:	83 83       	std	Z+3, r24	; 0x03
    6c50:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <g_twi1_gyro_1_gyro_ofsz>
    6c54:	90 91 48 27 	lds	r25, 0x2748	; 0x802748 <g_twi1_gyro_1_gyro_ofsz+0x1>
    6c58:	94 83       	std	Z+4, r25	; 0x04
    6c5a:	85 83       	std	Z+5, r24	; 0x05
    6c5c:	86 e0       	ldi	r24, 0x06	; 6
    6c5e:	90 e0       	ldi	r25, 0x00	; 0
    6c60:	18 96       	adiw	r26, 0x08	; 8
    6c62:	8d 93       	st	X+, r24
    6c64:	9c 93       	st	X, r25
    6c66:	19 97       	sbiw	r26, 0x09	; 9
    6c68:	40 e0       	ldi	r20, 0x00	; 0
    6c6a:	bd 01       	movw	r22, r26
    6c6c:	80 ea       	ldi	r24, 0xA0	; 160
    6c6e:	94 e0       	ldi	r25, 0x04	; 4
    6c70:	0c 94 3e 55 	jmp	0xaa7c	; 0xaa7c <twi_master_transfer>
    6c74:	08 95       	ret

00006c76 <twi1_gyro_accel_offset_set>:
    6c76:	eb e2       	ldi	r30, 0x2B	; 43
    6c78:	f0 e2       	ldi	r31, 0x20	; 32
    6c7a:	88 e6       	ldi	r24, 0x68	; 104
    6c7c:	80 83       	st	Z, r24
    6c7e:	87 e7       	ldi	r24, 0x77	; 119
    6c80:	81 83       	std	Z+1, r24	; 0x01
    6c82:	81 e0       	ldi	r24, 0x01	; 1
    6c84:	90 e0       	ldi	r25, 0x00	; 0
    6c86:	84 83       	std	Z+4, r24	; 0x04
    6c88:	95 83       	std	Z+5, r25	; 0x05
    6c8a:	80 91 63 27 	lds	r24, 0x2763	; 0x802763 <g_twi1_gyro_1_accel_ofsx>
    6c8e:	90 91 64 27 	lds	r25, 0x2764	; 0x802764 <g_twi1_gyro_1_accel_ofsx+0x1>
    6c92:	a3 e1       	ldi	r26, 0x13	; 19
    6c94:	b5 e2       	ldi	r27, 0x25	; 37
    6c96:	9c 01       	movw	r18, r24
    6c98:	22 0f       	add	r18, r18
    6c9a:	23 2f       	mov	r18, r19
    6c9c:	22 1f       	adc	r18, r18
    6c9e:	33 0b       	sbc	r19, r19
    6ca0:	31 95       	neg	r19
    6ca2:	2c 93       	st	X, r18
    6ca4:	88 0f       	add	r24, r24
    6ca6:	11 96       	adiw	r26, 0x01	; 1
    6ca8:	8c 93       	st	X, r24
    6caa:	82 e0       	ldi	r24, 0x02	; 2
    6cac:	90 e0       	ldi	r25, 0x00	; 0
    6cae:	80 87       	std	Z+8, r24	; 0x08
    6cb0:	91 87       	std	Z+9, r25	; 0x09
    6cb2:	40 e0       	ldi	r20, 0x00	; 0
    6cb4:	bf 01       	movw	r22, r30
    6cb6:	80 ea       	ldi	r24, 0xA0	; 160
    6cb8:	94 e0       	ldi	r25, 0x04	; 4
    6cba:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6cbe:	81 11       	cpse	r24, r1
    6cc0:	34 c0       	rjmp	.+104    	; 0x6d2a <twi1_gyro_accel_offset_set+0xb4>
    6cc2:	8a e7       	ldi	r24, 0x7A	; 122
    6cc4:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <twi1_packet+0x1>
    6cc8:	80 91 61 27 	lds	r24, 0x2761	; 0x802761 <g_twi1_gyro_1_accel_ofsy>
    6ccc:	90 91 62 27 	lds	r25, 0x2762	; 0x802762 <g_twi1_gyro_1_accel_ofsy+0x1>
    6cd0:	e3 e1       	ldi	r30, 0x13	; 19
    6cd2:	f5 e2       	ldi	r31, 0x25	; 37
    6cd4:	9c 01       	movw	r18, r24
    6cd6:	22 0f       	add	r18, r18
    6cd8:	23 2f       	mov	r18, r19
    6cda:	22 1f       	adc	r18, r18
    6cdc:	33 0b       	sbc	r19, r19
    6cde:	31 95       	neg	r19
    6ce0:	20 83       	st	Z, r18
    6ce2:	88 0f       	add	r24, r24
    6ce4:	81 83       	std	Z+1, r24	; 0x01
    6ce6:	40 e0       	ldi	r20, 0x00	; 0
    6ce8:	6b e2       	ldi	r22, 0x2B	; 43
    6cea:	70 e2       	ldi	r23, 0x20	; 32
    6cec:	80 ea       	ldi	r24, 0xA0	; 160
    6cee:	94 e0       	ldi	r25, 0x04	; 4
    6cf0:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6cf4:	81 11       	cpse	r24, r1
    6cf6:	19 c0       	rjmp	.+50     	; 0x6d2a <twi1_gyro_accel_offset_set+0xb4>
    6cf8:	8d e7       	ldi	r24, 0x7D	; 125
    6cfa:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <twi1_packet+0x1>
    6cfe:	80 91 5f 27 	lds	r24, 0x275F	; 0x80275f <g_twi1_gyro_1_accel_ofsz>
    6d02:	90 91 60 27 	lds	r25, 0x2760	; 0x802760 <g_twi1_gyro_1_accel_ofsz+0x1>
    6d06:	e3 e1       	ldi	r30, 0x13	; 19
    6d08:	f5 e2       	ldi	r31, 0x25	; 37
    6d0a:	9c 01       	movw	r18, r24
    6d0c:	22 0f       	add	r18, r18
    6d0e:	23 2f       	mov	r18, r19
    6d10:	22 1f       	adc	r18, r18
    6d12:	33 0b       	sbc	r19, r19
    6d14:	31 95       	neg	r19
    6d16:	20 83       	st	Z, r18
    6d18:	88 0f       	add	r24, r24
    6d1a:	81 83       	std	Z+1, r24	; 0x01
    6d1c:	40 e0       	ldi	r20, 0x00	; 0
    6d1e:	6b e2       	ldi	r22, 0x2B	; 43
    6d20:	70 e2       	ldi	r23, 0x20	; 32
    6d22:	80 ea       	ldi	r24, 0xA0	; 160
    6d24:	94 e0       	ldi	r25, 0x04	; 4
    6d26:	0c 94 3e 55 	jmp	0xaa7c	; 0xaa7c <twi_master_transfer>
    6d2a:	08 95       	ret

00006d2c <twi_init>:
    6d2c:	e0 e8       	ldi	r30, 0x80	; 128
    6d2e:	f6 e0       	ldi	r31, 0x06	; 6
    6d30:	88 e3       	ldi	r24, 0x38	; 56
    6d32:	80 8b       	std	Z+16, r24	; 0x10
    6d34:	81 8b       	std	Z+17, r24	; 0x11
    6d36:	e0 e4       	ldi	r30, 0x40	; 64
    6d38:	f6 e0       	ldi	r31, 0x06	; 6
    6d3a:	80 8b       	std	Z+16, r24	; 0x10
    6d3c:	81 8b       	std	Z+17, r24	; 0x11
    6d3e:	08 95       	ret

00006d40 <isr_100ms_twi1_onboard>:
    6d40:	cf 92       	push	r12
    6d42:	ef 92       	push	r14
    6d44:	0f 93       	push	r16
    6d46:	78 94       	sei
    6d48:	80 91 74 27 	lds	r24, 0x2774	; 0x802774 <g_twi1_gyro_valid>
    6d4c:	88 23       	and	r24, r24
    6d4e:	09 f4       	brne	.+2      	; 0x6d52 <isr_100ms_twi1_onboard+0x12>
    6d50:	17 c1       	rjmp	.+558    	; 0x6f80 <isr_100ms_twi1_onboard+0x240>
    6d52:	80 91 5d 26 	lds	r24, 0x265D	; 0x80265d <g_twi1_lock>
    6d56:	81 11       	cpse	r24, r1
    6d58:	13 c1       	rjmp	.+550    	; 0x6f80 <isr_100ms_twi1_onboard+0x240>
    6d5a:	eb e2       	ldi	r30, 0x2B	; 43
    6d5c:	f0 e2       	ldi	r31, 0x20	; 32
    6d5e:	88 e6       	ldi	r24, 0x68	; 104
    6d60:	80 83       	st	Z, r24
    6d62:	8b e3       	ldi	r24, 0x3B	; 59
    6d64:	81 83       	std	Z+1, r24	; 0x01
    6d66:	81 e0       	ldi	r24, 0x01	; 1
    6d68:	90 e0       	ldi	r25, 0x00	; 0
    6d6a:	84 83       	std	Z+4, r24	; 0x04
    6d6c:	95 83       	std	Z+5, r25	; 0x05
    6d6e:	88 e0       	ldi	r24, 0x08	; 8
    6d70:	90 e0       	ldi	r25, 0x00	; 0
    6d72:	80 87       	std	Z+8, r24	; 0x08
    6d74:	91 87       	std	Z+9, r25	; 0x09
    6d76:	41 e0       	ldi	r20, 0x01	; 1
    6d78:	bf 01       	movw	r22, r30
    6d7a:	80 ea       	ldi	r24, 0xA0	; 160
    6d7c:	94 e0       	ldi	r25, 0x04	; 4
    6d7e:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6d82:	81 11       	cpse	r24, r1
    6d84:	fd c0       	rjmp	.+506    	; 0x6f80 <isr_100ms_twi1_onboard+0x240>
    6d86:	e3 e1       	ldi	r30, 0x13	; 19
    6d88:	f5 e2       	ldi	r31, 0x25	; 37
    6d8a:	80 81       	ld	r24, Z
    6d8c:	90 e0       	ldi	r25, 0x00	; 0
    6d8e:	98 2f       	mov	r25, r24
    6d90:	88 27       	eor	r24, r24
    6d92:	21 81       	ldd	r18, Z+1	; 0x01
    6d94:	82 2b       	or	r24, r18
    6d96:	80 93 69 27 	sts	0x2769, r24	; 0x802769 <g_twi1_gyro_1_accel_x>
    6d9a:	90 93 6a 27 	sts	0x276A, r25	; 0x80276a <g_twi1_gyro_1_accel_x+0x1>
    6d9e:	82 81       	ldd	r24, Z+2	; 0x02
    6da0:	90 e0       	ldi	r25, 0x00	; 0
    6da2:	98 2f       	mov	r25, r24
    6da4:	88 27       	eor	r24, r24
    6da6:	23 81       	ldd	r18, Z+3	; 0x03
    6da8:	82 2b       	or	r24, r18
    6daa:	80 93 67 27 	sts	0x2767, r24	; 0x802767 <g_twi1_gyro_1_accel_y>
    6dae:	90 93 68 27 	sts	0x2768, r25	; 0x802768 <g_twi1_gyro_1_accel_y+0x1>
    6db2:	84 81       	ldd	r24, Z+4	; 0x04
    6db4:	90 e0       	ldi	r25, 0x00	; 0
    6db6:	98 2f       	mov	r25, r24
    6db8:	88 27       	eor	r24, r24
    6dba:	25 81       	ldd	r18, Z+5	; 0x05
    6dbc:	82 2b       	or	r24, r18
    6dbe:	80 93 65 27 	sts	0x2765, r24	; 0x802765 <g_twi1_gyro_1_accel_z>
    6dc2:	90 93 66 27 	sts	0x2766, r25	; 0x802766 <g_twi1_gyro_1_accel_z+0x1>
    6dc6:	86 81       	ldd	r24, Z+6	; 0x06
    6dc8:	90 e0       	ldi	r25, 0x00	; 0
    6dca:	98 2f       	mov	r25, r24
    6dcc:	88 27       	eor	r24, r24
    6dce:	27 81       	ldd	r18, Z+7	; 0x07
    6dd0:	82 2b       	or	r24, r18
    6dd2:	80 93 71 27 	sts	0x2771, r24	; 0x802771 <g_twi1_gyro_1_temp>
    6dd6:	90 93 72 27 	sts	0x2772, r25	; 0x802772 <g_twi1_gyro_1_temp+0x1>
    6dda:	eb e2       	ldi	r30, 0x2B	; 43
    6ddc:	f0 e2       	ldi	r31, 0x20	; 32
    6dde:	88 e6       	ldi	r24, 0x68	; 104
    6de0:	80 83       	st	Z, r24
    6de2:	83 e4       	ldi	r24, 0x43	; 67
    6de4:	81 83       	std	Z+1, r24	; 0x01
    6de6:	81 e0       	ldi	r24, 0x01	; 1
    6de8:	90 e0       	ldi	r25, 0x00	; 0
    6dea:	84 83       	std	Z+4, r24	; 0x04
    6dec:	95 83       	std	Z+5, r25	; 0x05
    6dee:	86 e0       	ldi	r24, 0x06	; 6
    6df0:	90 e0       	ldi	r25, 0x00	; 0
    6df2:	80 87       	std	Z+8, r24	; 0x08
    6df4:	91 87       	std	Z+9, r25	; 0x09
    6df6:	41 e0       	ldi	r20, 0x01	; 1
    6df8:	bf 01       	movw	r22, r30
    6dfa:	80 ea       	ldi	r24, 0xA0	; 160
    6dfc:	94 e0       	ldi	r25, 0x04	; 4
    6dfe:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6e02:	81 11       	cpse	r24, r1
    6e04:	bd c0       	rjmp	.+378    	; 0x6f80 <isr_100ms_twi1_onboard+0x240>
    6e06:	e3 e1       	ldi	r30, 0x13	; 19
    6e08:	f5 e2       	ldi	r31, 0x25	; 37
    6e0a:	80 81       	ld	r24, Z
    6e0c:	90 e0       	ldi	r25, 0x00	; 0
    6e0e:	98 2f       	mov	r25, r24
    6e10:	88 27       	eor	r24, r24
    6e12:	21 81       	ldd	r18, Z+1	; 0x01
    6e14:	82 2b       	or	r24, r18
    6e16:	80 93 51 27 	sts	0x2751, r24	; 0x802751 <g_twi1_gyro_1_gyro_x>
    6e1a:	90 93 52 27 	sts	0x2752, r25	; 0x802752 <g_twi1_gyro_1_gyro_x+0x1>
    6e1e:	82 81       	ldd	r24, Z+2	; 0x02
    6e20:	90 e0       	ldi	r25, 0x00	; 0
    6e22:	98 2f       	mov	r25, r24
    6e24:	88 27       	eor	r24, r24
    6e26:	23 81       	ldd	r18, Z+3	; 0x03
    6e28:	82 2b       	or	r24, r18
    6e2a:	80 93 4f 27 	sts	0x274F, r24	; 0x80274f <g_twi1_gyro_1_gyro_y>
    6e2e:	90 93 50 27 	sts	0x2750, r25	; 0x802750 <g_twi1_gyro_1_gyro_y+0x1>
    6e32:	84 81       	ldd	r24, Z+4	; 0x04
    6e34:	90 e0       	ldi	r25, 0x00	; 0
    6e36:	98 2f       	mov	r25, r24
    6e38:	88 27       	eor	r24, r24
    6e3a:	25 81       	ldd	r18, Z+5	; 0x05
    6e3c:	82 2b       	or	r24, r18
    6e3e:	80 93 4d 27 	sts	0x274D, r24	; 0x80274d <g_twi1_gyro_1_gyro_z>
    6e42:	90 93 4e 27 	sts	0x274E, r25	; 0x80274e <g_twi1_gyro_1_gyro_z+0x1>
    6e46:	80 91 3a 27 	lds	r24, 0x273A	; 0x80273a <g_twi1_gyro_gyro_offset_set__flag>
    6e4a:	88 23       	and	r24, r24
    6e4c:	19 f0       	breq	.+6      	; 0x6e54 <isr_100ms_twi1_onboard+0x114>
    6e4e:	10 92 3a 27 	sts	0x273A, r1	; 0x80273a <g_twi1_gyro_gyro_offset_set__flag>
    6e52:	e2 de       	rcall	.-572    	; 0x6c18 <twi1_gyro_gyro_offset_set>
    6e54:	80 91 39 27 	lds	r24, 0x2739	; 0x802739 <g_twi1_gyro_accel_offset_set__flag>
    6e58:	88 23       	and	r24, r24
    6e5a:	19 f0       	breq	.+6      	; 0x6e62 <isr_100ms_twi1_onboard+0x122>
    6e5c:	10 92 39 27 	sts	0x2739, r1	; 0x802739 <g_twi1_gyro_accel_offset_set__flag>
    6e60:	0a df       	rcall	.-492    	; 0x6c76 <twi1_gyro_accel_offset_set>
    6e62:	eb e2       	ldi	r30, 0x2B	; 43
    6e64:	f0 e2       	ldi	r31, 0x20	; 32
    6e66:	8c e0       	ldi	r24, 0x0C	; 12
    6e68:	80 83       	st	Z, r24
    6e6a:	82 e0       	ldi	r24, 0x02	; 2
    6e6c:	81 83       	std	Z+1, r24	; 0x01
    6e6e:	81 e0       	ldi	r24, 0x01	; 1
    6e70:	90 e0       	ldi	r25, 0x00	; 0
    6e72:	84 83       	std	Z+4, r24	; 0x04
    6e74:	95 83       	std	Z+5, r25	; 0x05
    6e76:	80 87       	std	Z+8, r24	; 0x08
    6e78:	91 87       	std	Z+9, r25	; 0x09
    6e7a:	41 e0       	ldi	r20, 0x01	; 1
    6e7c:	bf 01       	movw	r22, r30
    6e7e:	80 ea       	ldi	r24, 0xA0	; 160
    6e80:	94 e0       	ldi	r25, 0x04	; 4
    6e82:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6e86:	81 11       	cpse	r24, r1
    6e88:	7b c0       	rjmp	.+246    	; 0x6f80 <isr_100ms_twi1_onboard+0x240>
    6e8a:	80 91 13 25 	lds	r24, 0x2513	; 0x802513 <twi1_m_data>
    6e8e:	80 ff       	sbrs	r24, 0
    6e90:	77 c0       	rjmp	.+238    	; 0x6f80 <isr_100ms_twi1_onboard+0x240>
    6e92:	eb e2       	ldi	r30, 0x2B	; 43
    6e94:	f0 e2       	ldi	r31, 0x20	; 32
    6e96:	8c e0       	ldi	r24, 0x0C	; 12
    6e98:	80 83       	st	Z, r24
    6e9a:	83 e0       	ldi	r24, 0x03	; 3
    6e9c:	81 83       	std	Z+1, r24	; 0x01
    6e9e:	81 e0       	ldi	r24, 0x01	; 1
    6ea0:	90 e0       	ldi	r25, 0x00	; 0
    6ea2:	84 83       	std	Z+4, r24	; 0x04
    6ea4:	95 83       	std	Z+5, r25	; 0x05
    6ea6:	86 e0       	ldi	r24, 0x06	; 6
    6ea8:	90 e0       	ldi	r25, 0x00	; 0
    6eaa:	80 87       	std	Z+8, r24	; 0x08
    6eac:	91 87       	std	Z+9, r25	; 0x09
    6eae:	41 e0       	ldi	r20, 0x01	; 1
    6eb0:	bf 01       	movw	r22, r30
    6eb2:	80 ea       	ldi	r24, 0xA0	; 160
    6eb4:	94 e0       	ldi	r25, 0x04	; 4
    6eb6:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6eba:	81 11       	cpse	r24, r1
    6ebc:	61 c0       	rjmp	.+194    	; 0x6f80 <isr_100ms_twi1_onboard+0x240>
    6ebe:	e3 e1       	ldi	r30, 0x13	; 19
    6ec0:	f5 e2       	ldi	r31, 0x25	; 37
    6ec2:	81 81       	ldd	r24, Z+1	; 0x01
    6ec4:	90 e0       	ldi	r25, 0x00	; 0
    6ec6:	98 2f       	mov	r25, r24
    6ec8:	88 27       	eor	r24, r24
    6eca:	20 81       	ld	r18, Z
    6ecc:	82 2b       	or	r24, r18
    6ece:	20 91 33 27 	lds	r18, 0x2733	; 0x802733 <g_twi1_gyro_2_ofsx>
    6ed2:	30 91 34 27 	lds	r19, 0x2734	; 0x802734 <g_twi1_gyro_2_ofsx+0x1>
    6ed6:	82 0f       	add	r24, r18
    6ed8:	93 1f       	adc	r25, r19
    6eda:	80 93 2d 27 	sts	0x272D, r24	; 0x80272d <g_twi1_gyro_2_mag_x>
    6ede:	90 93 2e 27 	sts	0x272E, r25	; 0x80272e <g_twi1_gyro_2_mag_x+0x1>
    6ee2:	83 81       	ldd	r24, Z+3	; 0x03
    6ee4:	90 e0       	ldi	r25, 0x00	; 0
    6ee6:	98 2f       	mov	r25, r24
    6ee8:	88 27       	eor	r24, r24
    6eea:	22 81       	ldd	r18, Z+2	; 0x02
    6eec:	82 2b       	or	r24, r18
    6eee:	20 91 31 27 	lds	r18, 0x2731	; 0x802731 <g_twi1_gyro_2_ofsy>
    6ef2:	30 91 32 27 	lds	r19, 0x2732	; 0x802732 <g_twi1_gyro_2_ofsy+0x1>
    6ef6:	82 0f       	add	r24, r18
    6ef8:	93 1f       	adc	r25, r19
    6efa:	80 93 2b 27 	sts	0x272B, r24	; 0x80272b <g_twi1_gyro_2_mag_y>
    6efe:	90 93 2c 27 	sts	0x272C, r25	; 0x80272c <g_twi1_gyro_2_mag_y+0x1>
    6f02:	85 81       	ldd	r24, Z+5	; 0x05
    6f04:	90 e0       	ldi	r25, 0x00	; 0
    6f06:	98 2f       	mov	r25, r24
    6f08:	88 27       	eor	r24, r24
    6f0a:	24 81       	ldd	r18, Z+4	; 0x04
    6f0c:	82 2b       	or	r24, r18
    6f0e:	20 91 2f 27 	lds	r18, 0x272F	; 0x80272f <g_twi1_gyro_2_ofsz>
    6f12:	30 91 30 27 	lds	r19, 0x2730	; 0x802730 <g_twi1_gyro_2_ofsz+0x1>
    6f16:	82 0f       	add	r24, r18
    6f18:	93 1f       	adc	r25, r19
    6f1a:	80 93 29 27 	sts	0x2729, r24	; 0x802729 <g_twi1_gyro_2_mag_z>
    6f1e:	90 93 2a 27 	sts	0x272A, r25	; 0x80272a <g_twi1_gyro_2_mag_z+0x1>
    6f22:	eb e2       	ldi	r30, 0x2B	; 43
    6f24:	f0 e2       	ldi	r31, 0x20	; 32
    6f26:	8c e0       	ldi	r24, 0x0C	; 12
    6f28:	80 83       	st	Z, r24
    6f2a:	89 e0       	ldi	r24, 0x09	; 9
    6f2c:	81 83       	std	Z+1, r24	; 0x01
    6f2e:	81 e0       	ldi	r24, 0x01	; 1
    6f30:	90 e0       	ldi	r25, 0x00	; 0
    6f32:	84 83       	std	Z+4, r24	; 0x04
    6f34:	95 83       	std	Z+5, r25	; 0x05
    6f36:	80 87       	std	Z+8, r24	; 0x08
    6f38:	91 87       	std	Z+9, r25	; 0x09
    6f3a:	41 e0       	ldi	r20, 0x01	; 1
    6f3c:	bf 01       	movw	r22, r30
    6f3e:	80 ea       	ldi	r24, 0xA0	; 160
    6f40:	94 e0       	ldi	r25, 0x04	; 4
    6f42:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6f46:	81 11       	cpse	r24, r1
    6f48:	1b c0       	rjmp	.+54     	; 0x6f80 <isr_100ms_twi1_onboard+0x240>
    6f4a:	80 91 13 25 	lds	r24, 0x2513	; 0x802513 <twi1_m_data>
    6f4e:	83 ff       	sbrs	r24, 3
    6f50:	0c c0       	rjmp	.+24     	; 0x6f6a <isr_100ms_twi1_onboard+0x22a>
    6f52:	10 92 2d 27 	sts	0x272D, r1	; 0x80272d <g_twi1_gyro_2_mag_x>
    6f56:	10 92 2e 27 	sts	0x272E, r1	; 0x80272e <g_twi1_gyro_2_mag_x+0x1>
    6f5a:	10 92 2b 27 	sts	0x272B, r1	; 0x80272b <g_twi1_gyro_2_mag_y>
    6f5e:	10 92 2c 27 	sts	0x272C, r1	; 0x80272c <g_twi1_gyro_2_mag_y+0x1>
    6f62:	10 92 29 27 	sts	0x2729, r1	; 0x802729 <g_twi1_gyro_2_mag_z>
    6f66:	10 92 2a 27 	sts	0x272A, r1	; 0x80272a <g_twi1_gyro_2_mag_z+0x1>
    6f6a:	c1 2c       	mov	r12, r1
    6f6c:	e1 2c       	mov	r14, r1
    6f6e:	01 e0       	ldi	r16, 0x01	; 1
    6f70:	20 e0       	ldi	r18, 0x00	; 0
    6f72:	30 e0       	ldi	r19, 0x00	; 0
    6f74:	a9 01       	movw	r20, r18
    6f76:	60 e0       	ldi	r22, 0x00	; 0
    6f78:	82 e3       	ldi	r24, 0x32	; 50
    6f7a:	9f e2       	ldi	r25, 0x2F	; 47
    6f7c:	0e 94 8f 6c 	call	0xd91e	; 0xd91e <sched_push>
    6f80:	0f 91       	pop	r16
    6f82:	ef 90       	pop	r14
    6f84:	cf 90       	pop	r12
    6f86:	08 95       	ret

00006f88 <isr_500ms_twi1_onboard>:
    6f88:	8f 92       	push	r8
    6f8a:	9f 92       	push	r9
    6f8c:	af 92       	push	r10
    6f8e:	bf 92       	push	r11
    6f90:	cf 92       	push	r12
    6f92:	ef 92       	push	r14
    6f94:	0f 93       	push	r16
    6f96:	4b 01       	movw	r8, r22
    6f98:	5c 01       	movw	r10, r24
    6f9a:	78 94       	sei
    6f9c:	80 91 f3 26 	lds	r24, 0x26F3	; 0x8026f3 <g_twi1_hygro_valid>
    6fa0:	88 23       	and	r24, r24
    6fa2:	09 f4       	brne	.+2      	; 0x6fa6 <isr_500ms_twi1_onboard+0x1e>
    6fa4:	52 c0       	rjmp	.+164    	; 0x704a <isr_500ms_twi1_onboard+0xc2>
    6fa6:	80 91 5d 26 	lds	r24, 0x265D	; 0x80265d <g_twi1_lock>
    6faa:	81 11       	cpse	r24, r1
    6fac:	4e c0       	rjmp	.+156    	; 0x704a <isr_500ms_twi1_onboard+0xc2>
    6fae:	eb e2       	ldi	r30, 0x2B	; 43
    6fb0:	f0 e2       	ldi	r31, 0x20	; 32
    6fb2:	84 e4       	ldi	r24, 0x44	; 68
    6fb4:	80 83       	st	Z, r24
    6fb6:	80 ee       	ldi	r24, 0xE0	; 224
    6fb8:	81 83       	std	Z+1, r24	; 0x01
    6fba:	12 82       	std	Z+2, r1	; 0x02
    6fbc:	82 e0       	ldi	r24, 0x02	; 2
    6fbe:	90 e0       	ldi	r25, 0x00	; 0
    6fc0:	84 83       	std	Z+4, r24	; 0x04
    6fc2:	95 83       	std	Z+5, r25	; 0x05
    6fc4:	85 e0       	ldi	r24, 0x05	; 5
    6fc6:	90 e0       	ldi	r25, 0x00	; 0
    6fc8:	80 87       	std	Z+8, r24	; 0x08
    6fca:	91 87       	std	Z+9, r25	; 0x09
    6fcc:	41 e0       	ldi	r20, 0x01	; 1
    6fce:	bf 01       	movw	r22, r30
    6fd0:	80 ea       	ldi	r24, 0xA0	; 160
    6fd2:	94 e0       	ldi	r25, 0x04	; 4
    6fd4:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    6fd8:	81 11       	cpse	r24, r1
    6fda:	16 c0       	rjmp	.+44     	; 0x7008 <isr_500ms_twi1_onboard+0x80>
    6fdc:	e3 e1       	ldi	r30, 0x13	; 19
    6fde:	f5 e2       	ldi	r31, 0x25	; 37
    6fe0:	80 81       	ld	r24, Z
    6fe2:	90 e0       	ldi	r25, 0x00	; 0
    6fe4:	98 2f       	mov	r25, r24
    6fe6:	88 27       	eor	r24, r24
    6fe8:	21 81       	ldd	r18, Z+1	; 0x01
    6fea:	82 2b       	or	r24, r18
    6fec:	80 93 f0 26 	sts	0x26F0, r24	; 0x8026f0 <g_twi1_hygro_S_T>
    6ff0:	90 93 f1 26 	sts	0x26F1, r25	; 0x8026f1 <g_twi1_hygro_S_T+0x1>
    6ff4:	83 81       	ldd	r24, Z+3	; 0x03
    6ff6:	90 e0       	ldi	r25, 0x00	; 0
    6ff8:	98 2f       	mov	r25, r24
    6ffa:	88 27       	eor	r24, r24
    6ffc:	24 81       	ldd	r18, Z+4	; 0x04
    6ffe:	82 2b       	or	r24, r18
    7000:	80 93 ee 26 	sts	0x26EE, r24	; 0x8026ee <g_twi1_hygro_S_RH>
    7004:	90 93 ef 26 	sts	0x26EF, r25	; 0x8026ef <g_twi1_hygro_S_RH+0x1>
    7008:	eb e2       	ldi	r30, 0x2B	; 43
    700a:	f0 e2       	ldi	r31, 0x20	; 32
    700c:	84 e4       	ldi	r24, 0x44	; 68
    700e:	80 83       	st	Z, r24
    7010:	84 e2       	ldi	r24, 0x24	; 36
    7012:	81 83       	std	Z+1, r24	; 0x01
    7014:	12 82       	std	Z+2, r1	; 0x02
    7016:	82 e0       	ldi	r24, 0x02	; 2
    7018:	90 e0       	ldi	r25, 0x00	; 0
    701a:	84 83       	std	Z+4, r24	; 0x04
    701c:	95 83       	std	Z+5, r25	; 0x05
    701e:	10 86       	std	Z+8, r1	; 0x08
    7020:	11 86       	std	Z+9, r1	; 0x09
    7022:	40 e0       	ldi	r20, 0x00	; 0
    7024:	bf 01       	movw	r22, r30
    7026:	80 ea       	ldi	r24, 0xA0	; 160
    7028:	94 e0       	ldi	r25, 0x04	; 4
    702a:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    702e:	81 11       	cpse	r24, r1
    7030:	0c c0       	rjmp	.+24     	; 0x704a <isr_500ms_twi1_onboard+0xc2>
    7032:	c1 2c       	mov	r12, r1
    7034:	e1 2c       	mov	r14, r1
    7036:	01 e0       	ldi	r16, 0x01	; 1
    7038:	26 e4       	ldi	r18, 0x46	; 70
    703a:	30 e0       	ldi	r19, 0x00	; 0
    703c:	40 e0       	ldi	r20, 0x00	; 0
    703e:	50 e0       	ldi	r21, 0x00	; 0
    7040:	60 e0       	ldi	r22, 0x00	; 0
    7042:	85 ee       	ldi	r24, 0xE5	; 229
    7044:	9e e2       	ldi	r25, 0x2E	; 46
    7046:	0e 94 8f 6c 	call	0xd91e	; 0xd91e <sched_push>
    704a:	80 91 16 27 	lds	r24, 0x2716	; 0x802716 <g_twi1_baro_valid>
    704e:	88 23       	and	r24, r24
    7050:	21 f0       	breq	.+8      	; 0x705a <isr_500ms_twi1_onboard+0xd2>
    7052:	41 e0       	ldi	r20, 0x01	; 1
    7054:	c5 01       	movw	r24, r10
    7056:	b4 01       	movw	r22, r8
    7058:	3d dc       	rcall	.-1926   	; 0x68d4 <service_twi1_baro>
    705a:	0f 91       	pop	r16
    705c:	ef 90       	pop	r14
    705e:	cf 90       	pop	r12
    7060:	bf 90       	pop	r11
    7062:	af 90       	pop	r10
    7064:	9f 90       	pop	r9
    7066:	8f 90       	pop	r8
    7068:	08 95       	ret

0000706a <isr_sparetime_twi1_onboard>:
    706a:	cf 92       	push	r12
    706c:	ef 92       	push	r14
    706e:	0f 93       	push	r16
    7070:	78 94       	sei
    7072:	20 91 16 27 	lds	r18, 0x2716	; 0x802716 <g_twi1_baro_valid>
    7076:	22 23       	and	r18, r18
    7078:	81 f0       	breq	.+32     	; 0x709a <isr_sparetime_twi1_onboard+0x30>
    707a:	40 e0       	ldi	r20, 0x00	; 0
    707c:	2b dc       	rcall	.-1962   	; 0x68d4 <service_twi1_baro>
    707e:	88 23       	and	r24, r24
    7080:	61 f0       	breq	.+24     	; 0x709a <isr_sparetime_twi1_onboard+0x30>
    7082:	c1 2c       	mov	r12, r1
    7084:	e1 2c       	mov	r14, r1
    7086:	01 e0       	ldi	r16, 0x01	; 1
    7088:	26 e4       	ldi	r18, 0x46	; 70
    708a:	30 e0       	ldi	r19, 0x00	; 0
    708c:	40 e0       	ldi	r20, 0x00	; 0
    708e:	50 e0       	ldi	r21, 0x00	; 0
    7090:	60 e0       	ldi	r22, 0x00	; 0
    7092:	88 e1       	ldi	r24, 0x18	; 24
    7094:	92 e3       	ldi	r25, 0x32	; 50
    7096:	0e 94 8f 6c 	call	0xd91e	; 0xd91e <sched_push>
    709a:	0f 91       	pop	r16
    709c:	ef 90       	pop	r14
    709e:	cf 90       	pop	r12
    70a0:	08 95       	ret

000070a2 <task_twi2_lcd_cls>:
    70a2:	fc dc       	rcall	.-1544   	; 0x6a9c <twi2_waitUntilReady>
    70a4:	e7 e1       	ldi	r30, 0x17	; 23
    70a6:	f0 e2       	ldi	r31, 0x20	; 32
    70a8:	81 e1       	ldi	r24, 0x11	; 17
    70aa:	81 83       	std	Z+1, r24	; 0x01
    70ac:	10 86       	std	Z+8, r1	; 0x08
    70ae:	11 86       	std	Z+9, r1	; 0x09
    70b0:	40 e0       	ldi	r20, 0x00	; 0
    70b2:	bf 01       	movw	r22, r30
    70b4:	80 e8       	ldi	r24, 0x80	; 128
    70b6:	94 e0       	ldi	r25, 0x04	; 4
    70b8:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    70bc:	65 e0       	ldi	r22, 0x05	; 5
    70be:	70 e0       	ldi	r23, 0x00	; 0
    70c0:	80 e0       	ldi	r24, 0x00	; 0
    70c2:	90 e0       	ldi	r25, 0x00	; 0
    70c4:	0c 94 da 2e 	jmp	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    70c8:	08 95       	ret

000070ca <task_twi2_lcd_pos_xy>:
    70ca:	cf 93       	push	r28
    70cc:	df 93       	push	r29
    70ce:	d8 2f       	mov	r29, r24
    70d0:	c6 2f       	mov	r28, r22
    70d2:	e4 dc       	rcall	.-1592   	; 0x6a9c <twi2_waitUntilReady>
    70d4:	e7 e1       	ldi	r30, 0x17	; 23
    70d6:	f0 e2       	ldi	r31, 0x20	; 32
    70d8:	80 e2       	ldi	r24, 0x20	; 32
    70da:	81 83       	std	Z+1, r24	; 0x01
    70dc:	ab e0       	ldi	r26, 0x0B	; 11
    70de:	b5 e2       	ldi	r27, 0x25	; 37
    70e0:	dc 93       	st	X, r29
    70e2:	11 96       	adiw	r26, 0x01	; 1
    70e4:	cc 93       	st	X, r28
    70e6:	82 e0       	ldi	r24, 0x02	; 2
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	80 87       	std	Z+8, r24	; 0x08
    70ec:	91 87       	std	Z+9, r25	; 0x09
    70ee:	40 e0       	ldi	r20, 0x00	; 0
    70f0:	bf 01       	movw	r22, r30
    70f2:	80 e8       	ldi	r24, 0x80	; 128
    70f4:	94 e0       	ldi	r25, 0x04	; 4
    70f6:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    70fa:	65 e0       	ldi	r22, 0x05	; 5
    70fc:	70 e0       	ldi	r23, 0x00	; 0
    70fe:	80 e0       	ldi	r24, 0x00	; 0
    7100:	90 e0       	ldi	r25, 0x00	; 0
    7102:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7106:	df 91       	pop	r29
    7108:	cf 91       	pop	r28
    710a:	08 95       	ret

0000710c <task_twi2_lcd_print_format_float_P>:
    710c:	cf 92       	push	r12
    710e:	df 92       	push	r13
    7110:	ef 92       	push	r14
    7112:	ff 92       	push	r15
    7114:	0f 93       	push	r16
    7116:	1f 93       	push	r17
    7118:	cf 93       	push	r28
    711a:	df 93       	push	r29
    711c:	f2 2e       	mov	r15, r18
    711e:	e3 2e       	mov	r14, r19
    7120:	d4 2e       	mov	r13, r20
    7122:	c5 2e       	mov	r12, r21
    7124:	d2 df       	rcall	.-92     	; 0x70ca <task_twi2_lcd_pos_xy>
    7126:	ba dc       	rcall	.-1676   	; 0x6a9c <twi2_waitUntilReady>
    7128:	c7 e1       	ldi	r28, 0x17	; 23
    712a:	d0 e2       	ldi	r29, 0x20	; 32
    712c:	80 e3       	ldi	r24, 0x30	; 48
    712e:	89 83       	std	Y+1, r24	; 0x01
    7130:	cf 92       	push	r12
    7132:	df 92       	push	r13
    7134:	ef 92       	push	r14
    7136:	ff 92       	push	r15
    7138:	1f 93       	push	r17
    713a:	0f 93       	push	r16
    713c:	8c e0       	ldi	r24, 0x0C	; 12
    713e:	95 e2       	ldi	r25, 0x25	; 37
    7140:	9f 93       	push	r25
    7142:	8f 93       	push	r24
    7144:	0e 94 c1 8b 	call	0x11782	; 0x11782 <sprintf_P>
    7148:	80 93 0b 25 	sts	0x250B, r24	; 0x80250b <twi2_m_data>
    714c:	99 27       	eor	r25, r25
    714e:	01 96       	adiw	r24, 0x01	; 1
    7150:	88 87       	std	Y+8, r24	; 0x08
    7152:	99 87       	std	Y+9, r25	; 0x09
    7154:	40 e0       	ldi	r20, 0x00	; 0
    7156:	be 01       	movw	r22, r28
    7158:	80 e8       	ldi	r24, 0x80	; 128
    715a:	94 e0       	ldi	r25, 0x04	; 4
    715c:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7160:	65 e0       	ldi	r22, 0x05	; 5
    7162:	70 e0       	ldi	r23, 0x00	; 0
    7164:	80 e0       	ldi	r24, 0x00	; 0
    7166:	90 e0       	ldi	r25, 0x00	; 0
    7168:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    716c:	8d b7       	in	r24, 0x3d	; 61
    716e:	9e b7       	in	r25, 0x3e	; 62
    7170:	08 96       	adiw	r24, 0x08	; 8
    7172:	8d bf       	out	0x3d, r24	; 61
    7174:	9e bf       	out	0x3e, r25	; 62
    7176:	df 91       	pop	r29
    7178:	cf 91       	pop	r28
    717a:	1f 91       	pop	r17
    717c:	0f 91       	pop	r16
    717e:	ff 90       	pop	r15
    7180:	ef 90       	pop	r14
    7182:	df 90       	pop	r13
    7184:	cf 90       	pop	r12
    7186:	08 95       	ret

00007188 <task_twi2_lcd_str>:
    7188:	9f 92       	push	r9
    718a:	af 92       	push	r10
    718c:	bf 92       	push	r11
    718e:	cf 92       	push	r12
    7190:	df 92       	push	r13
    7192:	ef 92       	push	r14
    7194:	ff 92       	push	r15
    7196:	0f 93       	push	r16
    7198:	1f 93       	push	r17
    719a:	cf 93       	push	r28
    719c:	df 93       	push	r29
    719e:	b8 2e       	mov	r11, r24
    71a0:	a6 2e       	mov	r10, r22
    71a2:	ea 01       	movw	r28, r20
    71a4:	fa 01       	movw	r30, r20
    71a6:	01 90       	ld	r0, Z+
    71a8:	00 20       	and	r0, r0
    71aa:	e9 f7       	brne	.-6      	; 0x71a6 <task_twi2_lcd_str+0x1e>
    71ac:	31 97       	sbiw	r30, 0x01	; 1
    71ae:	ce 2e       	mov	r12, r30
    71b0:	c4 1a       	sub	r12, r20
    71b2:	09 f4       	brne	.+2      	; 0x71b6 <task_twi2_lcd_str+0x2e>
    71b4:	44 c0       	rjmp	.+136    	; 0x723e <task_twi2_lcd_str+0xb6>
    71b6:	07 e1       	ldi	r16, 0x17	; 23
    71b8:	10 e2       	ldi	r17, 0x20	; 32
    71ba:	0f 2e       	mov	r0, r31
    71bc:	f0 e3       	ldi	r31, 0x30	; 48
    71be:	9f 2e       	mov	r9, r31
    71c0:	f0 2d       	mov	r31, r0
    71c2:	0f 2e       	mov	r0, r31
    71c4:	fb e0       	ldi	r31, 0x0B	; 11
    71c6:	ef 2e       	mov	r14, r31
    71c8:	f5 e2       	ldi	r31, 0x25	; 37
    71ca:	ff 2e       	mov	r15, r31
    71cc:	f0 2d       	mov	r31, r0
    71ce:	dc 2c       	mov	r13, r12
    71d0:	e6 e0       	ldi	r30, 0x06	; 6
    71d2:	ec 15       	cp	r30, r12
    71d4:	20 f4       	brcc	.+8      	; 0x71de <task_twi2_lcd_str+0x56>
    71d6:	0f 2e       	mov	r0, r31
    71d8:	f6 e0       	ldi	r31, 0x06	; 6
    71da:	df 2e       	mov	r13, r31
    71dc:	f0 2d       	mov	r31, r0
    71de:	6a 2d       	mov	r22, r10
    71e0:	8b 2d       	mov	r24, r11
    71e2:	73 df       	rcall	.-282    	; 0x70ca <task_twi2_lcd_pos_xy>
    71e4:	5b dc       	rcall	.-1866   	; 0x6a9c <twi2_waitUntilReady>
    71e6:	f8 01       	movw	r30, r16
    71e8:	91 82       	std	Z+1, r9	; 0x01
    71ea:	f7 01       	movw	r30, r14
    71ec:	d0 82       	st	Z, r13
    71ee:	dd 20       	and	r13, r13
    71f0:	69 f0       	breq	.+26     	; 0x720c <task_twi2_lcd_str+0x84>
    71f2:	81 e0       	ldi	r24, 0x01	; 1
    71f4:	21 96       	adiw	r28, 0x01	; 1
    71f6:	e8 2f       	mov	r30, r24
    71f8:	f0 e0       	ldi	r31, 0x00	; 0
    71fa:	e5 5f       	subi	r30, 0xF5	; 245
    71fc:	fa 4d       	sbci	r31, 0xDA	; 218
    71fe:	de 01       	movw	r26, r28
    7200:	11 97       	sbiw	r26, 0x01	; 1
    7202:	9c 91       	ld	r25, X
    7204:	90 83       	st	Z, r25
    7206:	8f 5f       	subi	r24, 0xFF	; 255
    7208:	d8 16       	cp	r13, r24
    720a:	a0 f7       	brcc	.-24     	; 0x71f4 <task_twi2_lcd_str+0x6c>
    720c:	8d 2d       	mov	r24, r13
    720e:	90 e0       	ldi	r25, 0x00	; 0
    7210:	01 96       	adiw	r24, 0x01	; 1
    7212:	f8 01       	movw	r30, r16
    7214:	80 87       	std	Z+8, r24	; 0x08
    7216:	91 87       	std	Z+9, r25	; 0x09
    7218:	40 e0       	ldi	r20, 0x00	; 0
    721a:	b8 01       	movw	r22, r16
    721c:	80 e8       	ldi	r24, 0x80	; 128
    721e:	94 e0       	ldi	r25, 0x04	; 4
    7220:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7224:	65 e0       	ldi	r22, 0x05	; 5
    7226:	70 e0       	ldi	r23, 0x00	; 0
    7228:	80 e0       	ldi	r24, 0x00	; 0
    722a:	90 e0       	ldi	r25, 0x00	; 0
    722c:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7230:	8d 2d       	mov	r24, r13
    7232:	88 0f       	add	r24, r24
    7234:	8d 0d       	add	r24, r13
    7236:	88 0f       	add	r24, r24
    7238:	b8 0e       	add	r11, r24
    723a:	cd 18       	sub	r12, r13
    723c:	41 f6       	brne	.-112    	; 0x71ce <task_twi2_lcd_str+0x46>
    723e:	df 91       	pop	r29
    7240:	cf 91       	pop	r28
    7242:	1f 91       	pop	r17
    7244:	0f 91       	pop	r16
    7246:	ff 90       	pop	r15
    7248:	ef 90       	pop	r14
    724a:	df 90       	pop	r13
    724c:	cf 90       	pop	r12
    724e:	bf 90       	pop	r11
    7250:	af 90       	pop	r10
    7252:	9f 90       	pop	r9
    7254:	08 95       	ret

00007256 <init_twi1_gyro>:
    7256:	1f 93       	push	r17
    7258:	cf 93       	push	r28
    725a:	df 93       	push	r29
    725c:	1f 92       	push	r1
    725e:	8c e0       	ldi	r24, 0x0C	; 12
    7260:	8f 93       	push	r24
    7262:	1f 92       	push	r1
    7264:	88 e6       	ldi	r24, 0x68	; 104
    7266:	8f 93       	push	r24
    7268:	8f e4       	ldi	r24, 0x4F	; 79
    726a:	94 e3       	ldi	r25, 0x34	; 52
    726c:	9f 93       	push	r25
    726e:	8f 93       	push	r24
    7270:	1f 92       	push	r1
    7272:	80 e4       	ldi	r24, 0x40	; 64
    7274:	8f 93       	push	r24
    7276:	8b e1       	ldi	r24, 0x1B	; 27
    7278:	95 e2       	ldi	r25, 0x25	; 37
    727a:	9f 93       	push	r25
    727c:	8f 93       	push	r24
    727e:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7282:	81 34       	cpi	r24, 0x41	; 65
    7284:	91 05       	cpc	r25, r1
    7286:	10 f0       	brcs	.+4      	; 0x728c <init_twi1_gyro+0x36>
    7288:	80 e4       	ldi	r24, 0x40	; 64
    728a:	90 e0       	ldi	r25, 0x00	; 0
    728c:	40 e0       	ldi	r20, 0x00	; 0
    728e:	68 2f       	mov	r22, r24
    7290:	8b e1       	ldi	r24, 0x1B	; 27
    7292:	95 e2       	ldi	r25, 0x25	; 37
    7294:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7298:	10 92 73 27 	sts	0x2773, r1	; 0x802773 <g_twi1_gyro_1_version>
    729c:	10 92 38 27 	sts	0x2738, r1	; 0x802738 <g_twi1_gyro_2_version>
    72a0:	eb e2       	ldi	r30, 0x2B	; 43
    72a2:	f0 e2       	ldi	r31, 0x20	; 32
    72a4:	88 e6       	ldi	r24, 0x68	; 104
    72a6:	80 83       	st	Z, r24
    72a8:	8b e6       	ldi	r24, 0x6B	; 107
    72aa:	81 83       	std	Z+1, r24	; 0x01
    72ac:	81 e0       	ldi	r24, 0x01	; 1
    72ae:	90 e0       	ldi	r25, 0x00	; 0
    72b0:	84 83       	std	Z+4, r24	; 0x04
    72b2:	95 83       	std	Z+5, r25	; 0x05
    72b4:	21 e8       	ldi	r18, 0x81	; 129
    72b6:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    72ba:	80 87       	std	Z+8, r24	; 0x08
    72bc:	91 87       	std	Z+9, r25	; 0x09
    72be:	40 e0       	ldi	r20, 0x00	; 0
    72c0:	bf 01       	movw	r22, r30
    72c2:	80 ea       	ldi	r24, 0xA0	; 160
    72c4:	94 e0       	ldi	r25, 0x04	; 4
    72c6:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    72ca:	c8 2f       	mov	r28, r24
    72cc:	8d b7       	in	r24, 0x3d	; 61
    72ce:	9e b7       	in	r25, 0x3e	; 62
    72d0:	0a 96       	adiw	r24, 0x0a	; 10
    72d2:	8d bf       	out	0x3d, r24	; 61
    72d4:	9e bf       	out	0x3e, r25	; 62
    72d6:	cc 23       	and	r28, r28
    72d8:	f9 f0       	breq	.+62     	; 0x7318 <init_twi1_gyro+0xc2>
    72da:	85 e1       	ldi	r24, 0x15	; 21
    72dc:	94 e3       	ldi	r25, 0x34	; 52
    72de:	9f 93       	push	r25
    72e0:	8f 93       	push	r24
    72e2:	1f 92       	push	r1
    72e4:	80 e4       	ldi	r24, 0x40	; 64
    72e6:	8f 93       	push	r24
    72e8:	8b e1       	ldi	r24, 0x1B	; 27
    72ea:	95 e2       	ldi	r25, 0x25	; 37
    72ec:	9f 93       	push	r25
    72ee:	8f 93       	push	r24
    72f0:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    72f4:	81 34       	cpi	r24, 0x41	; 65
    72f6:	91 05       	cpc	r25, r1
    72f8:	10 f0       	brcs	.+4      	; 0x72fe <init_twi1_gyro+0xa8>
    72fa:	80 e4       	ldi	r24, 0x40	; 64
    72fc:	90 e0       	ldi	r25, 0x00	; 0
    72fe:	40 e0       	ldi	r20, 0x00	; 0
    7300:	68 2f       	mov	r22, r24
    7302:	8b e1       	ldi	r24, 0x1B	; 27
    7304:	95 e2       	ldi	r25, 0x25	; 37
    7306:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    730a:	0f 90       	pop	r0
    730c:	0f 90       	pop	r0
    730e:	0f 90       	pop	r0
    7310:	0f 90       	pop	r0
    7312:	0f 90       	pop	r0
    7314:	0f 90       	pop	r0
    7316:	b8 c1       	rjmp	.+880    	; 0x7688 <init_twi1_gyro+0x432>
    7318:	61 e5       	ldi	r22, 0x51	; 81
    731a:	73 ec       	ldi	r23, 0xC3	; 195
    731c:	80 e0       	ldi	r24, 0x00	; 0
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7324:	eb e2       	ldi	r30, 0x2B	; 43
    7326:	f0 e2       	ldi	r31, 0x20	; 32
    7328:	88 e6       	ldi	r24, 0x68	; 104
    732a:	80 83       	st	Z, r24
    732c:	85 e7       	ldi	r24, 0x75	; 117
    732e:	81 83       	std	Z+1, r24	; 0x01
    7330:	81 e0       	ldi	r24, 0x01	; 1
    7332:	90 e0       	ldi	r25, 0x00	; 0
    7334:	84 83       	std	Z+4, r24	; 0x04
    7336:	95 83       	std	Z+5, r25	; 0x05
    7338:	80 87       	std	Z+8, r24	; 0x08
    733a:	91 87       	std	Z+9, r25	; 0x09
    733c:	41 e0       	ldi	r20, 0x01	; 1
    733e:	bf 01       	movw	r22, r30
    7340:	80 ea       	ldi	r24, 0xA0	; 160
    7342:	94 e0       	ldi	r25, 0x04	; 4
    7344:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7348:	c8 2f       	mov	r28, r24
    734a:	81 11       	cpse	r24, r1
    734c:	9d c1       	rjmp	.+826    	; 0x7688 <init_twi1_gyro+0x432>
    734e:	a3 e1       	ldi	r26, 0x13	; 19
    7350:	b5 e2       	ldi	r27, 0x25	; 37
    7352:	8c 91       	ld	r24, X
    7354:	80 93 73 27 	sts	0x2773, r24	; 0x802773 <g_twi1_gyro_1_version>
    7358:	eb e2       	ldi	r30, 0x2B	; 43
    735a:	f0 e2       	ldi	r31, 0x20	; 32
    735c:	88 e6       	ldi	r24, 0x68	; 104
    735e:	80 83       	st	Z, r24
    7360:	87 e3       	ldi	r24, 0x37	; 55
    7362:	81 83       	std	Z+1, r24	; 0x01
    7364:	81 e0       	ldi	r24, 0x01	; 1
    7366:	90 e0       	ldi	r25, 0x00	; 0
    7368:	84 83       	std	Z+4, r24	; 0x04
    736a:	95 83       	std	Z+5, r25	; 0x05
    736c:	22 e0       	ldi	r18, 0x02	; 2
    736e:	2c 93       	st	X, r18
    7370:	80 87       	std	Z+8, r24	; 0x08
    7372:	91 87       	std	Z+9, r25	; 0x09
    7374:	40 e0       	ldi	r20, 0x00	; 0
    7376:	bf 01       	movw	r22, r30
    7378:	80 ea       	ldi	r24, 0xA0	; 160
    737a:	94 e0       	ldi	r25, 0x04	; 4
    737c:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7380:	c8 2f       	mov	r28, r24
    7382:	81 11       	cpse	r24, r1
    7384:	81 c1       	rjmp	.+770    	; 0x7688 <init_twi1_gyro+0x432>
    7386:	eb e2       	ldi	r30, 0x2B	; 43
    7388:	f0 e2       	ldi	r31, 0x20	; 32
    738a:	8c e0       	ldi	r24, 0x0C	; 12
    738c:	80 83       	st	Z, r24
    738e:	8b e0       	ldi	r24, 0x0B	; 11
    7390:	81 83       	std	Z+1, r24	; 0x01
    7392:	81 e0       	ldi	r24, 0x01	; 1
    7394:	90 e0       	ldi	r25, 0x00	; 0
    7396:	84 83       	std	Z+4, r24	; 0x04
    7398:	95 83       	std	Z+5, r25	; 0x05
    739a:	21 e0       	ldi	r18, 0x01	; 1
    739c:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    73a0:	80 87       	std	Z+8, r24	; 0x08
    73a2:	91 87       	std	Z+9, r25	; 0x09
    73a4:	40 e0       	ldi	r20, 0x00	; 0
    73a6:	bf 01       	movw	r22, r30
    73a8:	80 ea       	ldi	r24, 0xA0	; 160
    73aa:	94 e0       	ldi	r25, 0x04	; 4
    73ac:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    73b0:	c8 2f       	mov	r28, r24
    73b2:	81 11       	cpse	r24, r1
    73b4:	69 c1       	rjmp	.+722    	; 0x7688 <init_twi1_gyro+0x432>
    73b6:	61 e5       	ldi	r22, 0x51	; 81
    73b8:	73 ec       	ldi	r23, 0xC3	; 195
    73ba:	80 e0       	ldi	r24, 0x00	; 0
    73bc:	90 e0       	ldi	r25, 0x00	; 0
    73be:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    73c2:	eb e2       	ldi	r30, 0x2B	; 43
    73c4:	f0 e2       	ldi	r31, 0x20	; 32
    73c6:	8c e0       	ldi	r24, 0x0C	; 12
    73c8:	80 83       	st	Z, r24
    73ca:	11 82       	std	Z+1, r1	; 0x01
    73cc:	81 e0       	ldi	r24, 0x01	; 1
    73ce:	90 e0       	ldi	r25, 0x00	; 0
    73d0:	84 83       	std	Z+4, r24	; 0x04
    73d2:	95 83       	std	Z+5, r25	; 0x05
    73d4:	80 87       	std	Z+8, r24	; 0x08
    73d6:	91 87       	std	Z+9, r25	; 0x09
    73d8:	41 e0       	ldi	r20, 0x01	; 1
    73da:	bf 01       	movw	r22, r30
    73dc:	80 ea       	ldi	r24, 0xA0	; 160
    73de:	94 e0       	ldi	r25, 0x04	; 4
    73e0:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    73e4:	c8 2f       	mov	r28, r24
    73e6:	81 11       	cpse	r24, r1
    73e8:	4f c1       	rjmp	.+670    	; 0x7688 <init_twi1_gyro+0x432>
    73ea:	80 91 13 25 	lds	r24, 0x2513	; 0x802513 <twi1_m_data>
    73ee:	80 93 38 27 	sts	0x2738, r24	; 0x802738 <g_twi1_gyro_2_version>
    73f2:	1f 92       	push	r1
    73f4:	8f 93       	push	r24
    73f6:	80 91 73 27 	lds	r24, 0x2773	; 0x802773 <g_twi1_gyro_1_version>
    73fa:	1f 92       	push	r1
    73fc:	8f 93       	push	r24
    73fe:	8a ed       	ldi	r24, 0xDA	; 218
    7400:	93 e3       	ldi	r25, 0x33	; 51
    7402:	9f 93       	push	r25
    7404:	8f 93       	push	r24
    7406:	1f 92       	push	r1
    7408:	80 e4       	ldi	r24, 0x40	; 64
    740a:	8f 93       	push	r24
    740c:	8b e1       	ldi	r24, 0x1B	; 27
    740e:	95 e2       	ldi	r25, 0x25	; 37
    7410:	9f 93       	push	r25
    7412:	8f 93       	push	r24
    7414:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7418:	81 34       	cpi	r24, 0x41	; 65
    741a:	91 05       	cpc	r25, r1
    741c:	10 f0       	brcs	.+4      	; 0x7422 <init_twi1_gyro+0x1cc>
    741e:	80 e4       	ldi	r24, 0x40	; 64
    7420:	90 e0       	ldi	r25, 0x00	; 0
    7422:	40 e0       	ldi	r20, 0x00	; 0
    7424:	68 2f       	mov	r22, r24
    7426:	8b e1       	ldi	r24, 0x1B	; 27
    7428:	95 e2       	ldi	r25, 0x25	; 37
    742a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    742e:	eb e2       	ldi	r30, 0x2B	; 43
    7430:	f0 e2       	ldi	r31, 0x20	; 32
    7432:	8c e0       	ldi	r24, 0x0C	; 12
    7434:	80 83       	st	Z, r24
    7436:	8a e0       	ldi	r24, 0x0A	; 10
    7438:	81 83       	std	Z+1, r24	; 0x01
    743a:	81 e0       	ldi	r24, 0x01	; 1
    743c:	90 e0       	ldi	r25, 0x00	; 0
    743e:	84 83       	std	Z+4, r24	; 0x04
    7440:	95 83       	std	Z+5, r25	; 0x05
    7442:	2f e1       	ldi	r18, 0x1F	; 31
    7444:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    7448:	80 87       	std	Z+8, r24	; 0x08
    744a:	91 87       	std	Z+9, r25	; 0x09
    744c:	40 e0       	ldi	r20, 0x00	; 0
    744e:	bf 01       	movw	r22, r30
    7450:	80 ea       	ldi	r24, 0xA0	; 160
    7452:	94 e0       	ldi	r25, 0x04	; 4
    7454:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7458:	c8 2f       	mov	r28, r24
    745a:	8d b7       	in	r24, 0x3d	; 61
    745c:	9e b7       	in	r25, 0x3e	; 62
    745e:	0a 96       	adiw	r24, 0x0a	; 10
    7460:	8d bf       	out	0x3d, r24	; 61
    7462:	9e bf       	out	0x3e, r25	; 62
    7464:	c1 11       	cpse	r28, r1
    7466:	10 c1       	rjmp	.+544    	; 0x7688 <init_twi1_gyro+0x432>
    7468:	eb e2       	ldi	r30, 0x2B	; 43
    746a:	f0 e2       	ldi	r31, 0x20	; 32
    746c:	8c e0       	ldi	r24, 0x0C	; 12
    746e:	80 83       	st	Z, r24
    7470:	80 e1       	ldi	r24, 0x10	; 16
    7472:	81 83       	std	Z+1, r24	; 0x01
    7474:	81 e0       	ldi	r24, 0x01	; 1
    7476:	90 e0       	ldi	r25, 0x00	; 0
    7478:	84 83       	std	Z+4, r24	; 0x04
    747a:	95 83       	std	Z+5, r25	; 0x05
    747c:	83 e0       	ldi	r24, 0x03	; 3
    747e:	90 e0       	ldi	r25, 0x00	; 0
    7480:	80 87       	std	Z+8, r24	; 0x08
    7482:	91 87       	std	Z+9, r25	; 0x09
    7484:	41 e0       	ldi	r20, 0x01	; 1
    7486:	bf 01       	movw	r22, r30
    7488:	80 ea       	ldi	r24, 0xA0	; 160
    748a:	94 e0       	ldi	r25, 0x04	; 4
    748c:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7490:	c8 2f       	mov	r28, r24
    7492:	81 11       	cpse	r24, r1
    7494:	f9 c0       	rjmp	.+498    	; 0x7688 <init_twi1_gyro+0x432>
    7496:	a3 e1       	ldi	r26, 0x13	; 19
    7498:	b5 e2       	ldi	r27, 0x25	; 37
    749a:	8c 91       	ld	r24, X
    749c:	80 93 37 27 	sts	0x2737, r24	; 0x802737 <g_twi1_gyro_2_asax>
    74a0:	11 96       	adiw	r26, 0x01	; 1
    74a2:	8c 91       	ld	r24, X
    74a4:	11 97       	sbiw	r26, 0x01	; 1
    74a6:	80 93 36 27 	sts	0x2736, r24	; 0x802736 <g_twi1_gyro_2_asay>
    74aa:	12 96       	adiw	r26, 0x02	; 2
    74ac:	8c 91       	ld	r24, X
    74ae:	12 97       	sbiw	r26, 0x02	; 2
    74b0:	80 93 35 27 	sts	0x2735, r24	; 0x802735 <g_twi1_gyro_2_asaz>
    74b4:	eb e2       	ldi	r30, 0x2B	; 43
    74b6:	f0 e2       	ldi	r31, 0x20	; 32
    74b8:	8c e0       	ldi	r24, 0x0C	; 12
    74ba:	80 83       	st	Z, r24
    74bc:	8a e0       	ldi	r24, 0x0A	; 10
    74be:	81 83       	std	Z+1, r24	; 0x01
    74c0:	81 e0       	ldi	r24, 0x01	; 1
    74c2:	90 e0       	ldi	r25, 0x00	; 0
    74c4:	84 83       	std	Z+4, r24	; 0x04
    74c6:	95 83       	std	Z+5, r25	; 0x05
    74c8:	20 e1       	ldi	r18, 0x10	; 16
    74ca:	2c 93       	st	X, r18
    74cc:	80 87       	std	Z+8, r24	; 0x08
    74ce:	91 87       	std	Z+9, r25	; 0x09
    74d0:	40 e0       	ldi	r20, 0x00	; 0
    74d2:	bf 01       	movw	r22, r30
    74d4:	80 ea       	ldi	r24, 0xA0	; 160
    74d6:	94 e0       	ldi	r25, 0x04	; 4
    74d8:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    74dc:	c8 2f       	mov	r28, r24
    74de:	81 11       	cpse	r24, r1
    74e0:	d3 c0       	rjmp	.+422    	; 0x7688 <init_twi1_gyro+0x432>
    74e2:	61 e5       	ldi	r22, 0x51	; 81
    74e4:	73 ec       	ldi	r23, 0xC3	; 195
    74e6:	80 e0       	ldi	r24, 0x00	; 0
    74e8:	90 e0       	ldi	r25, 0x00	; 0
    74ea:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    74ee:	eb e2       	ldi	r30, 0x2B	; 43
    74f0:	f0 e2       	ldi	r31, 0x20	; 32
    74f2:	8c e0       	ldi	r24, 0x0C	; 12
    74f4:	80 83       	st	Z, r24
    74f6:	8a e0       	ldi	r24, 0x0A	; 10
    74f8:	81 83       	std	Z+1, r24	; 0x01
    74fa:	81 e0       	ldi	r24, 0x01	; 1
    74fc:	90 e0       	ldi	r25, 0x00	; 0
    74fe:	84 83       	std	Z+4, r24	; 0x04
    7500:	95 83       	std	Z+5, r25	; 0x05
    7502:	22 e1       	ldi	r18, 0x12	; 18
    7504:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    7508:	80 87       	std	Z+8, r24	; 0x08
    750a:	91 87       	std	Z+9, r25	; 0x09
    750c:	40 e0       	ldi	r20, 0x00	; 0
    750e:	bf 01       	movw	r22, r30
    7510:	80 ea       	ldi	r24, 0xA0	; 160
    7512:	94 e0       	ldi	r25, 0x04	; 4
    7514:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7518:	c8 2f       	mov	r28, r24
    751a:	81 11       	cpse	r24, r1
    751c:	b5 c0       	rjmp	.+362    	; 0x7688 <init_twi1_gyro+0x432>
    751e:	7c db       	rcall	.-2312   	; 0x6c18 <twi1_gyro_gyro_offset_set>
    7520:	c8 2f       	mov	r28, r24
    7522:	81 11       	cpse	r24, r1
    7524:	b1 c0       	rjmp	.+354    	; 0x7688 <init_twi1_gyro+0x432>
    7526:	a7 db       	rcall	.-2226   	; 0x6c76 <twi1_gyro_accel_offset_set>
    7528:	c8 2f       	mov	r28, r24
    752a:	81 11       	cpse	r24, r1
    752c:	ad c0       	rjmp	.+346    	; 0x7688 <init_twi1_gyro+0x432>
    752e:	eb e2       	ldi	r30, 0x2B	; 43
    7530:	f0 e2       	ldi	r31, 0x20	; 32
    7532:	88 e6       	ldi	r24, 0x68	; 104
    7534:	80 83       	st	Z, r24
    7536:	89 e1       	ldi	r24, 0x19	; 25
    7538:	81 83       	std	Z+1, r24	; 0x01
    753a:	81 e0       	ldi	r24, 0x01	; 1
    753c:	90 e0       	ldi	r25, 0x00	; 0
    753e:	84 83       	std	Z+4, r24	; 0x04
    7540:	95 83       	std	Z+5, r25	; 0x05
    7542:	23 e6       	ldi	r18, 0x63	; 99
    7544:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    7548:	80 87       	std	Z+8, r24	; 0x08
    754a:	91 87       	std	Z+9, r25	; 0x09
    754c:	40 e0       	ldi	r20, 0x00	; 0
    754e:	bf 01       	movw	r22, r30
    7550:	80 ea       	ldi	r24, 0xA0	; 160
    7552:	94 e0       	ldi	r25, 0x04	; 4
    7554:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7558:	c8 2f       	mov	r28, r24
    755a:	81 11       	cpse	r24, r1
    755c:	95 c0       	rjmp	.+298    	; 0x7688 <init_twi1_gyro+0x432>
    755e:	eb e2       	ldi	r30, 0x2B	; 43
    7560:	f0 e2       	ldi	r31, 0x20	; 32
    7562:	88 e6       	ldi	r24, 0x68	; 104
    7564:	80 83       	st	Z, r24
    7566:	8a e1       	ldi	r24, 0x1A	; 26
    7568:	81 83       	std	Z+1, r24	; 0x01
    756a:	81 e0       	ldi	r24, 0x01	; 1
    756c:	90 e0       	ldi	r25, 0x00	; 0
    756e:	84 83       	std	Z+4, r24	; 0x04
    7570:	95 83       	std	Z+5, r25	; 0x05
    7572:	26 e0       	ldi	r18, 0x06	; 6
    7574:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    7578:	80 87       	std	Z+8, r24	; 0x08
    757a:	91 87       	std	Z+9, r25	; 0x09
    757c:	40 e0       	ldi	r20, 0x00	; 0
    757e:	bf 01       	movw	r22, r30
    7580:	80 ea       	ldi	r24, 0xA0	; 160
    7582:	94 e0       	ldi	r25, 0x04	; 4
    7584:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7588:	c8 2f       	mov	r28, r24
    758a:	81 11       	cpse	r24, r1
    758c:	7d c0       	rjmp	.+250    	; 0x7688 <init_twi1_gyro+0x432>
    758e:	eb e2       	ldi	r30, 0x2B	; 43
    7590:	f0 e2       	ldi	r31, 0x20	; 32
    7592:	88 e6       	ldi	r24, 0x68	; 104
    7594:	80 83       	st	Z, r24
    7596:	8d e1       	ldi	r24, 0x1D	; 29
    7598:	81 83       	std	Z+1, r24	; 0x01
    759a:	81 e0       	ldi	r24, 0x01	; 1
    759c:	90 e0       	ldi	r25, 0x00	; 0
    759e:	84 83       	std	Z+4, r24	; 0x04
    75a0:	95 83       	std	Z+5, r25	; 0x05
    75a2:	26 e0       	ldi	r18, 0x06	; 6
    75a4:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    75a8:	80 87       	std	Z+8, r24	; 0x08
    75aa:	91 87       	std	Z+9, r25	; 0x09
    75ac:	40 e0       	ldi	r20, 0x00	; 0
    75ae:	bf 01       	movw	r22, r30
    75b0:	80 ea       	ldi	r24, 0xA0	; 160
    75b2:	94 e0       	ldi	r25, 0x04	; 4
    75b4:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    75b8:	c8 2f       	mov	r28, r24
    75ba:	81 11       	cpse	r24, r1
    75bc:	65 c0       	rjmp	.+202    	; 0x7688 <init_twi1_gyro+0x432>
    75be:	eb e2       	ldi	r30, 0x2B	; 43
    75c0:	f0 e2       	ldi	r31, 0x20	; 32
    75c2:	88 e6       	ldi	r24, 0x68	; 104
    75c4:	80 83       	st	Z, r24
    75c6:	8f e1       	ldi	r24, 0x1F	; 31
    75c8:	81 83       	std	Z+1, r24	; 0x01
    75ca:	81 e0       	ldi	r24, 0x01	; 1
    75cc:	90 e0       	ldi	r25, 0x00	; 0
    75ce:	84 83       	std	Z+4, r24	; 0x04
    75d0:	95 83       	std	Z+5, r25	; 0x05
    75d2:	29 e1       	ldi	r18, 0x19	; 25
    75d4:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    75d8:	80 87       	std	Z+8, r24	; 0x08
    75da:	91 87       	std	Z+9, r25	; 0x09
    75dc:	40 e0       	ldi	r20, 0x00	; 0
    75de:	bf 01       	movw	r22, r30
    75e0:	80 ea       	ldi	r24, 0xA0	; 160
    75e2:	94 e0       	ldi	r25, 0x04	; 4
    75e4:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    75e8:	c8 2f       	mov	r28, r24
    75ea:	81 11       	cpse	r24, r1
    75ec:	4d c0       	rjmp	.+154    	; 0x7688 <init_twi1_gyro+0x432>
    75ee:	eb e2       	ldi	r30, 0x2B	; 43
    75f0:	f0 e2       	ldi	r31, 0x20	; 32
    75f2:	88 e6       	ldi	r24, 0x68	; 104
    75f4:	80 83       	st	Z, r24
    75f6:	8a e6       	ldi	r24, 0x6A	; 106
    75f8:	81 83       	std	Z+1, r24	; 0x01
    75fa:	81 e0       	ldi	r24, 0x01	; 1
    75fc:	90 e0       	ldi	r25, 0x00	; 0
    75fe:	84 83       	std	Z+4, r24	; 0x04
    7600:	95 83       	std	Z+5, r25	; 0x05
    7602:	21 e0       	ldi	r18, 0x01	; 1
    7604:	20 93 13 25 	sts	0x2513, r18	; 0x802513 <twi1_m_data>
    7608:	80 87       	std	Z+8, r24	; 0x08
    760a:	91 87       	std	Z+9, r25	; 0x09
    760c:	40 e0       	ldi	r20, 0x00	; 0
    760e:	bf 01       	movw	r22, r30
    7610:	80 ea       	ldi	r24, 0xA0	; 160
    7612:	94 e0       	ldi	r25, 0x04	; 4
    7614:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7618:	c8 2f       	mov	r28, r24
    761a:	81 11       	cpse	r24, r1
    761c:	35 c0       	rjmp	.+106    	; 0x7688 <init_twi1_gyro+0x432>
    761e:	61 e5       	ldi	r22, 0x51	; 81
    7620:	73 ec       	ldi	r23, 0xC3	; 195
    7622:	80 e0       	ldi	r24, 0x00	; 0
    7624:	90 e0       	ldi	r25, 0x00	; 0
    7626:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    762a:	81 e0       	ldi	r24, 0x01	; 1
    762c:	80 93 74 27 	sts	0x2774, r24	; 0x802774 <g_twi1_gyro_valid>
    7630:	87 e7       	ldi	r24, 0x77	; 119
    7632:	93 e3       	ldi	r25, 0x33	; 51
    7634:	9f 93       	push	r25
    7636:	8f 93       	push	r24
    7638:	1f 92       	push	r1
    763a:	10 e4       	ldi	r17, 0x40	; 64
    763c:	1f 93       	push	r17
    763e:	cb e1       	ldi	r28, 0x1B	; 27
    7640:	d5 e2       	ldi	r29, 0x25	; 37
    7642:	df 93       	push	r29
    7644:	cf 93       	push	r28
    7646:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    764a:	ae 01       	movw	r20, r28
    764c:	68 e2       	ldi	r22, 0x28	; 40
    764e:	88 e0       	ldi	r24, 0x08	; 8
    7650:	9b dd       	rcall	.-1226   	; 0x7188 <task_twi2_lcd_str>
    7652:	8c eb       	ldi	r24, 0xBC	; 188
    7654:	93 e3       	ldi	r25, 0x33	; 51
    7656:	9f 93       	push	r25
    7658:	8f 93       	push	r24
    765a:	1f 92       	push	r1
    765c:	1f 93       	push	r17
    765e:	df 93       	push	r29
    7660:	cf 93       	push	r28
    7662:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7666:	81 34       	cpi	r24, 0x41	; 65
    7668:	91 05       	cpc	r25, r1
    766a:	10 f0       	brcs	.+4      	; 0x7670 <init_twi1_gyro+0x41a>
    766c:	80 e4       	ldi	r24, 0x40	; 64
    766e:	90 e0       	ldi	r25, 0x00	; 0
    7670:	40 e0       	ldi	r20, 0x00	; 0
    7672:	68 2f       	mov	r22, r24
    7674:	8b e1       	ldi	r24, 0x1B	; 27
    7676:	95 e2       	ldi	r25, 0x25	; 37
    7678:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    767c:	8d b7       	in	r24, 0x3d	; 61
    767e:	9e b7       	in	r25, 0x3e	; 62
    7680:	0c 96       	adiw	r24, 0x0c	; 12
    7682:	8d bf       	out	0x3d, r24	; 61
    7684:	9e bf       	out	0x3e, r25	; 62
    7686:	23 c0       	rjmp	.+70     	; 0x76ce <init_twi1_gyro+0x478>
    7688:	8c 2f       	mov	r24, r28
    768a:	0c 2e       	mov	r0, r28
    768c:	00 0c       	add	r0, r0
    768e:	99 0b       	sbc	r25, r25
    7690:	9f 93       	push	r25
    7692:	cf 93       	push	r28
    7694:	8b e8       	ldi	r24, 0x8B	; 139
    7696:	93 e3       	ldi	r25, 0x33	; 51
    7698:	9f 93       	push	r25
    769a:	8f 93       	push	r24
    769c:	1f 92       	push	r1
    769e:	80 e4       	ldi	r24, 0x40	; 64
    76a0:	8f 93       	push	r24
    76a2:	8b e1       	ldi	r24, 0x1B	; 27
    76a4:	95 e2       	ldi	r25, 0x25	; 37
    76a6:	9f 93       	push	r25
    76a8:	8f 93       	push	r24
    76aa:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    76ae:	81 34       	cpi	r24, 0x41	; 65
    76b0:	91 05       	cpc	r25, r1
    76b2:	10 f0       	brcs	.+4      	; 0x76b8 <init_twi1_gyro+0x462>
    76b4:	80 e4       	ldi	r24, 0x40	; 64
    76b6:	90 e0       	ldi	r25, 0x00	; 0
    76b8:	40 e0       	ldi	r20, 0x00	; 0
    76ba:	68 2f       	mov	r22, r24
    76bc:	8b e1       	ldi	r24, 0x1B	; 27
    76be:	95 e2       	ldi	r25, 0x25	; 37
    76c0:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    76c4:	8d b7       	in	r24, 0x3d	; 61
    76c6:	9e b7       	in	r25, 0x3e	; 62
    76c8:	08 96       	adiw	r24, 0x08	; 8
    76ca:	8d bf       	out	0x3d, r24	; 61
    76cc:	9e bf       	out	0x3e, r25	; 62
    76ce:	df 91       	pop	r29
    76d0:	cf 91       	pop	r28
    76d2:	1f 91       	pop	r17
    76d4:	08 95       	ret

000076d6 <task_twi2_lcd_line>:
    76d6:	0f 93       	push	r16
    76d8:	cf 93       	push	r28
    76da:	df 93       	push	r29
    76dc:	d4 2f       	mov	r29, r20
    76de:	c2 2f       	mov	r28, r18
    76e0:	f4 dc       	rcall	.-1560   	; 0x70ca <task_twi2_lcd_pos_xy>
    76e2:	dc d9       	rcall	.-3144   	; 0x6a9c <twi2_waitUntilReady>
    76e4:	a7 e1       	ldi	r26, 0x17	; 23
    76e6:	b0 e2       	ldi	r27, 0x20	; 32
    76e8:	82 e3       	ldi	r24, 0x32	; 50
    76ea:	11 96       	adiw	r26, 0x01	; 1
    76ec:	8c 93       	st	X, r24
    76ee:	11 97       	sbiw	r26, 0x01	; 1
    76f0:	eb e0       	ldi	r30, 0x0B	; 11
    76f2:	f5 e2       	ldi	r31, 0x25	; 37
    76f4:	d0 83       	st	Z, r29
    76f6:	c1 83       	std	Z+1, r28	; 0x01
    76f8:	02 83       	std	Z+2, r16	; 0x02
    76fa:	83 e0       	ldi	r24, 0x03	; 3
    76fc:	90 e0       	ldi	r25, 0x00	; 0
    76fe:	18 96       	adiw	r26, 0x08	; 8
    7700:	8d 93       	st	X+, r24
    7702:	9c 93       	st	X, r25
    7704:	19 97       	sbiw	r26, 0x09	; 9
    7706:	40 e0       	ldi	r20, 0x00	; 0
    7708:	bd 01       	movw	r22, r26
    770a:	80 e8       	ldi	r24, 0x80	; 128
    770c:	94 e0       	ldi	r25, 0x04	; 4
    770e:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7712:	65 e0       	ldi	r22, 0x05	; 5
    7714:	70 e0       	ldi	r23, 0x00	; 0
    7716:	80 e0       	ldi	r24, 0x00	; 0
    7718:	90 e0       	ldi	r25, 0x00	; 0
    771a:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    771e:	df 91       	pop	r29
    7720:	cf 91       	pop	r28
    7722:	0f 91       	pop	r16
    7724:	08 95       	ret

00007726 <task_twi2_lcd_rect>:
    7726:	ef 92       	push	r14
    7728:	0f 93       	push	r16
    772a:	cf 93       	push	r28
    772c:	df 93       	push	r29
    772e:	d4 2f       	mov	r29, r20
    7730:	c2 2f       	mov	r28, r18
    7732:	cb dc       	rcall	.-1642   	; 0x70ca <task_twi2_lcd_pos_xy>
    7734:	b3 d9       	rcall	.-3226   	; 0x6a9c <twi2_waitUntilReady>
    7736:	01 11       	cpse	r16, r1
    7738:	02 c0       	rjmp	.+4      	; 0x773e <task_twi2_lcd_rect+0x18>
    773a:	84 e3       	ldi	r24, 0x34	; 52
    773c:	01 c0       	rjmp	.+2      	; 0x7740 <task_twi2_lcd_rect+0x1a>
    773e:	86 e3       	ldi	r24, 0x36	; 54
    7740:	a7 e1       	ldi	r26, 0x17	; 23
    7742:	b0 e2       	ldi	r27, 0x20	; 32
    7744:	11 96       	adiw	r26, 0x01	; 1
    7746:	8c 93       	st	X, r24
    7748:	11 97       	sbiw	r26, 0x01	; 1
    774a:	eb e0       	ldi	r30, 0x0B	; 11
    774c:	f5 e2       	ldi	r31, 0x25	; 37
    774e:	d0 83       	st	Z, r29
    7750:	c1 83       	std	Z+1, r28	; 0x01
    7752:	e2 82       	std	Z+2, r14	; 0x02
    7754:	83 e0       	ldi	r24, 0x03	; 3
    7756:	90 e0       	ldi	r25, 0x00	; 0
    7758:	18 96       	adiw	r26, 0x08	; 8
    775a:	8d 93       	st	X+, r24
    775c:	9c 93       	st	X, r25
    775e:	19 97       	sbiw	r26, 0x09	; 9
    7760:	40 e0       	ldi	r20, 0x00	; 0
    7762:	bd 01       	movw	r22, r26
    7764:	80 e8       	ldi	r24, 0x80	; 128
    7766:	94 e0       	ldi	r25, 0x04	; 4
    7768:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    776c:	65 e0       	ldi	r22, 0x05	; 5
    776e:	70 e0       	ldi	r23, 0x00	; 0
    7770:	80 e0       	ldi	r24, 0x00	; 0
    7772:	90 e0       	ldi	r25, 0x00	; 0
    7774:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7778:	df 91       	pop	r29
    777a:	cf 91       	pop	r28
    777c:	0f 91       	pop	r16
    777e:	ef 90       	pop	r14
    7780:	08 95       	ret

00007782 <task_twi2_lcd_circ>:
    7782:	0f 93       	push	r16
    7784:	cf 93       	push	r28
    7786:	df 93       	push	r29
    7788:	c4 2f       	mov	r28, r20
    778a:	d2 2f       	mov	r29, r18
    778c:	9e dc       	rcall	.-1732   	; 0x70ca <task_twi2_lcd_pos_xy>
    778e:	86 d9       	rcall	.-3316   	; 0x6a9c <twi2_waitUntilReady>
    7790:	d1 11       	cpse	r29, r1
    7792:	02 c0       	rjmp	.+4      	; 0x7798 <task_twi2_lcd_circ+0x16>
    7794:	88 e3       	ldi	r24, 0x38	; 56
    7796:	01 c0       	rjmp	.+2      	; 0x779a <task_twi2_lcd_circ+0x18>
    7798:	8a e3       	ldi	r24, 0x3A	; 58
    779a:	e7 e1       	ldi	r30, 0x17	; 23
    779c:	f0 e2       	ldi	r31, 0x20	; 32
    779e:	81 83       	std	Z+1, r24	; 0x01
    77a0:	ab e0       	ldi	r26, 0x0B	; 11
    77a2:	b5 e2       	ldi	r27, 0x25	; 37
    77a4:	cc 93       	st	X, r28
    77a6:	11 96       	adiw	r26, 0x01	; 1
    77a8:	0c 93       	st	X, r16
    77aa:	82 e0       	ldi	r24, 0x02	; 2
    77ac:	90 e0       	ldi	r25, 0x00	; 0
    77ae:	80 87       	std	Z+8, r24	; 0x08
    77b0:	91 87       	std	Z+9, r25	; 0x09
    77b2:	40 e0       	ldi	r20, 0x00	; 0
    77b4:	bf 01       	movw	r22, r30
    77b6:	80 e8       	ldi	r24, 0x80	; 128
    77b8:	94 e0       	ldi	r25, 0x04	; 4
    77ba:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    77be:	65 e0       	ldi	r22, 0x05	; 5
    77c0:	70 e0       	ldi	r23, 0x00	; 0
    77c2:	80 e0       	ldi	r24, 0x00	; 0
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    77ca:	df 91       	pop	r29
    77cc:	cf 91       	pop	r28
    77ce:	0f 91       	pop	r16
    77d0:	08 95       	ret

000077d2 <task_twi2_lcd_header>:
    77d2:	ef 92       	push	r14
    77d4:	0f 93       	push	r16
    77d6:	65 dc       	rcall	.-1846   	; 0x70a2 <task_twi2_lcd_cls>
    77d8:	44 e1       	ldi	r20, 0x14	; 20
    77da:	51 e2       	ldi	r21, 0x21	; 33
    77dc:	62 e0       	ldi	r22, 0x02	; 2
    77de:	8c e3       	ldi	r24, 0x3C	; 60
    77e0:	d3 dc       	rcall	.-1626   	; 0x7188 <task_twi2_lcd_str>
    77e2:	4e e1       	ldi	r20, 0x1E	; 30
    77e4:	51 e2       	ldi	r21, 0x21	; 33
    77e6:	62 e0       	ldi	r22, 0x02	; 2
    77e8:	84 eb       	ldi	r24, 0xB4	; 180
    77ea:	ce dc       	rcall	.-1636   	; 0x7188 <task_twi2_lcd_str>
    77ec:	01 e0       	ldi	r16, 0x01	; 1
    77ee:	21 e0       	ldi	r18, 0x01	; 1
    77f0:	43 e0       	ldi	r20, 0x03	; 3
    77f2:	64 e0       	ldi	r22, 0x04	; 4
    77f4:	89 e0       	ldi	r24, 0x09	; 9
    77f6:	c5 df       	rcall	.-118    	; 0x7782 <task_twi2_lcd_circ>
    77f8:	ee 24       	eor	r14, r14
    77fa:	e3 94       	inc	r14
    77fc:	00 e0       	ldi	r16, 0x00	; 0
    77fe:	24 e0       	ldi	r18, 0x04	; 4
    7800:	46 e0       	ldi	r20, 0x06	; 6
    7802:	62 e0       	ldi	r22, 0x02	; 2
    7804:	81 e0       	ldi	r24, 0x01	; 1
    7806:	8f df       	rcall	.-226    	; 0x7726 <task_twi2_lcd_rect>
    7808:	24 e0       	ldi	r18, 0x04	; 4
    780a:	46 e0       	ldi	r20, 0x06	; 6
    780c:	62 e0       	ldi	r22, 0x02	; 2
    780e:	8c e0       	ldi	r24, 0x0C	; 12
    7810:	8a df       	rcall	.-236    	; 0x7726 <task_twi2_lcd_rect>
    7812:	01 e0       	ldi	r16, 0x01	; 1
    7814:	2b e0       	ldi	r18, 0x0B	; 11
    7816:	4f ee       	ldi	r20, 0xEF	; 239
    7818:	6b e0       	ldi	r22, 0x0B	; 11
    781a:	80 e0       	ldi	r24, 0x00	; 0
    781c:	5c df       	rcall	.-328    	; 0x76d6 <task_twi2_lcd_line>
    781e:	0f 91       	pop	r16
    7820:	ef 90       	pop	r14
    7822:	08 95       	ret

00007824 <twi_start>:
    7824:	7f 92       	push	r7
    7826:	8f 92       	push	r8
    7828:	9f 92       	push	r9
    782a:	af 92       	push	r10
    782c:	bf 92       	push	r11
    782e:	cf 92       	push	r12
    7830:	df 92       	push	r13
    7832:	ef 92       	push	r14
    7834:	ff 92       	push	r15
    7836:	0f 93       	push	r16
    7838:	1f 93       	push	r17
    783a:	cf 93       	push	r28
    783c:	df 93       	push	r29
    783e:	60 e4       	ldi	r22, 0x40	; 64
    7840:	85 e0       	ldi	r24, 0x05	; 5
    7842:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    7846:	66 e3       	ldi	r22, 0x36	; 54
    7848:	70 e2       	ldi	r23, 0x20	; 32
    784a:	80 ea       	ldi	r24, 0xA0	; 160
    784c:	94 e0       	ldi	r25, 0x04	; 4
    784e:	0e 94 29 55 	call	0xaa52	; 0xaa52 <twi_master_init>
    7852:	e0 ea       	ldi	r30, 0xA0	; 160
    7854:	f4 e0       	ldi	r31, 0x04	; 4
    7856:	81 81       	ldd	r24, Z+1	; 0x01
    7858:	88 60       	ori	r24, 0x08	; 8
    785a:	81 83       	std	Z+1, r24	; 0x01
    785c:	60 e4       	ldi	r22, 0x40	; 64
    785e:	83 e0       	ldi	r24, 0x03	; 3
    7860:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    7864:	62 e2       	ldi	r22, 0x22	; 34
    7866:	70 e2       	ldi	r23, 0x20	; 32
    7868:	80 e8       	ldi	r24, 0x80	; 128
    786a:	94 e0       	ldi	r25, 0x04	; 4
    786c:	0e 94 29 55 	call	0xaa52	; 0xaa52 <twi_master_init>
    7870:	e0 e8       	ldi	r30, 0x80	; 128
    7872:	f4 e0       	ldi	r31, 0x04	; 4
    7874:	81 81       	ldd	r24, Z+1	; 0x01
    7876:	88 60       	ori	r24, 0x08	; 8
    7878:	81 83       	std	Z+1, r24	; 0x01
    787a:	61 e4       	ldi	r22, 0x41	; 65
    787c:	7b e4       	ldi	r23, 0x4B	; 75
    787e:	8c e4       	ldi	r24, 0x4C	; 76
    7880:	90 e0       	ldi	r25, 0x00	; 0
    7882:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7886:	e7 e1       	ldi	r30, 0x17	; 23
    7888:	f0 e2       	ldi	r31, 0x20	; 32
    788a:	81 e0       	ldi	r24, 0x01	; 1
    788c:	81 83       	std	Z+1, r24	; 0x01
    788e:	81 e0       	ldi	r24, 0x01	; 1
    7890:	90 e0       	ldi	r25, 0x00	; 0
    7892:	84 83       	std	Z+4, r24	; 0x04
    7894:	95 83       	std	Z+5, r25	; 0x05
    7896:	80 87       	std	Z+8, r24	; 0x08
    7898:	91 87       	std	Z+9, r25	; 0x09
    789a:	41 e0       	ldi	r20, 0x01	; 1
    789c:	bf 01       	movw	r22, r30
    789e:	80 e8       	ldi	r24, 0x80	; 128
    78a0:	94 e0       	ldi	r25, 0x04	; 4
    78a2:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    78a6:	80 91 0b 25 	lds	r24, 0x250B	; 0x80250b <twi2_m_data>
    78aa:	80 93 e9 26 	sts	0x26E9, r24	; 0x8026e9 <g_twi2_lcd_version>
    78ae:	81 31       	cpi	r24, 0x11	; 17
    78b0:	08 f4       	brcc	.+2      	; 0x78b4 <twi_start+0x90>
    78b2:	78 c0       	rjmp	.+240    	; 0x79a4 <twi_start+0x180>
    78b4:	c7 e1       	ldi	r28, 0x17	; 23
    78b6:	d0 e2       	ldi	r29, 0x20	; 32
    78b8:	82 e0       	ldi	r24, 0x02	; 2
    78ba:	89 83       	std	Y+1, r24	; 0x01
    78bc:	0f 2e       	mov	r0, r31
    78be:	fb e0       	ldi	r31, 0x0B	; 11
    78c0:	ef 2e       	mov	r14, r31
    78c2:	f5 e2       	ldi	r31, 0x25	; 37
    78c4:	ff 2e       	mov	r15, r31
    78c6:	f0 2d       	mov	r31, r0
    78c8:	68 94       	set
    78ca:	dd 24       	eor	r13, r13
    78cc:	d4 f8       	bld	r13, 4
    78ce:	f7 01       	movw	r30, r14
    78d0:	d0 82       	st	Z, r13
    78d2:	01 e0       	ldi	r16, 0x01	; 1
    78d4:	10 e0       	ldi	r17, 0x00	; 0
    78d6:	08 87       	std	Y+8, r16	; 0x08
    78d8:	19 87       	std	Y+9, r17	; 0x09
    78da:	40 e0       	ldi	r20, 0x00	; 0
    78dc:	be 01       	movw	r22, r28
    78de:	80 e8       	ldi	r24, 0x80	; 128
    78e0:	94 e0       	ldi	r25, 0x04	; 4
    78e2:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    78e6:	65 e0       	ldi	r22, 0x05	; 5
    78e8:	70 e0       	ldi	r23, 0x00	; 0
    78ea:	80 e0       	ldi	r24, 0x00	; 0
    78ec:	90 e0       	ldi	r25, 0x00	; 0
    78ee:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    78f2:	d4 d8       	rcall	.-3672   	; 0x6a9c <twi2_waitUntilReady>
    78f4:	d9 82       	std	Y+1, r13	; 0x01
    78f6:	18 86       	std	Y+8, r1	; 0x08
    78f8:	19 86       	std	Y+9, r1	; 0x09
    78fa:	40 e0       	ldi	r20, 0x00	; 0
    78fc:	be 01       	movw	r22, r28
    78fe:	80 e8       	ldi	r24, 0x80	; 128
    7900:	94 e0       	ldi	r25, 0x04	; 4
    7902:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7906:	60 e9       	ldi	r22, 0x90	; 144
    7908:	70 ed       	ldi	r23, 0xD0	; 208
    790a:	83 e0       	ldi	r24, 0x03	; 3
    790c:	90 e0       	ldi	r25, 0x00	; 0
    790e:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7912:	81 e0       	ldi	r24, 0x01	; 1
    7914:	0c d9       	rcall	.-3560   	; 0x6b2e <twi2_set_leds>
    7916:	c2 d8       	rcall	.-3708   	; 0x6a9c <twi2_waitUntilReady>
    7918:	84 e1       	ldi	r24, 0x14	; 20
    791a:	89 83       	std	Y+1, r24	; 0x01
    791c:	81 e0       	ldi	r24, 0x01	; 1
    791e:	f7 01       	movw	r30, r14
    7920:	80 83       	st	Z, r24
    7922:	08 87       	std	Y+8, r16	; 0x08
    7924:	19 87       	std	Y+9, r17	; 0x09
    7926:	40 e0       	ldi	r20, 0x00	; 0
    7928:	be 01       	movw	r22, r28
    792a:	80 e8       	ldi	r24, 0x80	; 128
    792c:	94 e0       	ldi	r25, 0x04	; 4
    792e:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7932:	65 e0       	ldi	r22, 0x05	; 5
    7934:	70 e0       	ldi	r23, 0x00	; 0
    7936:	80 e0       	ldi	r24, 0x00	; 0
    7938:	90 e0       	ldi	r25, 0x00	; 0
    793a:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    793e:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <g_bias_pm>
    7942:	30 d9       	rcall	.-3488   	; 0x6ba4 <twi2_set_bias>
    7944:	69 e1       	ldi	r22, 0x19	; 25
    7946:	8c e2       	ldi	r24, 0x2C	; 44
    7948:	47 d9       	rcall	.-3442   	; 0x6bd8 <twi2_set_beep>
    794a:	61 e6       	ldi	r22, 0x61	; 97
    794c:	73 ee       	ldi	r23, 0xE3	; 227
    794e:	86 e1       	ldi	r24, 0x16	; 22
    7950:	90 e0       	ldi	r25, 0x00	; 0
    7952:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7956:	c0 e8       	ldi	r28, 0x80	; 128
    7958:	6c 2f       	mov	r22, r28
    795a:	80 e0       	ldi	r24, 0x00	; 0
    795c:	03 d9       	rcall	.-3578   	; 0x6b64 <twi2_set_ledbl>
    795e:	68 e8       	ldi	r22, 0x88	; 136
    7960:	73 e1       	ldi	r23, 0x13	; 19
    7962:	80 e0       	ldi	r24, 0x00	; 0
    7964:	90 e0       	ldi	r25, 0x00	; 0
    7966:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    796a:	c2 50       	subi	r28, 0x02	; 2
    796c:	a9 f7       	brne	.-22     	; 0x7958 <twi_start+0x134>
    796e:	69 e1       	ldi	r22, 0x19	; 25
    7970:	88 e5       	ldi	r24, 0x58	; 88
    7972:	32 d9       	rcall	.-3484   	; 0x6bd8 <twi2_set_beep>
    7974:	61 e6       	ldi	r22, 0x61	; 97
    7976:	73 ee       	ldi	r23, 0xE3	; 227
    7978:	86 e1       	ldi	r24, 0x16	; 22
    797a:	90 e0       	ldi	r25, 0x00	; 0
    797c:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7980:	6c 2f       	mov	r22, r28
    7982:	80 e0       	ldi	r24, 0x00	; 0
    7984:	ef d8       	rcall	.-3618   	; 0x6b64 <twi2_set_ledbl>
    7986:	68 e8       	ldi	r22, 0x88	; 136
    7988:	73 e1       	ldi	r23, 0x13	; 19
    798a:	80 e0       	ldi	r24, 0x00	; 0
    798c:	90 e0       	ldi	r25, 0x00	; 0
    798e:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7992:	ce 5f       	subi	r28, 0xFE	; 254
    7994:	c2 38       	cpi	r28, 0x82	; 130
    7996:	a1 f7       	brne	.-24     	; 0x7980 <twi_start+0x15c>
    7998:	60 91 9c 28 	lds	r22, 0x289C	; 0x80289c <g_backlight_mode_pwm>
    799c:	80 e0       	ldi	r24, 0x00	; 0
    799e:	e2 d8       	rcall	.-3644   	; 0x6b64 <twi2_set_ledbl>
    79a0:	83 e0       	ldi	r24, 0x03	; 3
    79a2:	c5 d8       	rcall	.-3702   	; 0x6b2e <twi2_set_leds>
    79a4:	16 df       	rcall	.-468    	; 0x77d2 <task_twi2_lcd_header>
    79a6:	1f 92       	push	r1
    79a8:	84 e4       	ldi	r24, 0x44	; 68
    79aa:	8f 93       	push	r24
    79ac:	88 e6       	ldi	r24, 0x68	; 104
    79ae:	95 e3       	ldi	r25, 0x35	; 53
    79b0:	9f 93       	push	r25
    79b2:	8f 93       	push	r24
    79b4:	1f 92       	push	r1
    79b6:	80 e4       	ldi	r24, 0x40	; 64
    79b8:	8f 93       	push	r24
    79ba:	8b e1       	ldi	r24, 0x1B	; 27
    79bc:	95 e2       	ldi	r25, 0x25	; 37
    79be:	9f 93       	push	r25
    79c0:	8f 93       	push	r24
    79c2:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    79c6:	81 34       	cpi	r24, 0x41	; 65
    79c8:	91 05       	cpc	r25, r1
    79ca:	10 f0       	brcs	.+4      	; 0x79d0 <twi_start+0x1ac>
    79cc:	80 e4       	ldi	r24, 0x40	; 64
    79ce:	90 e0       	ldi	r25, 0x00	; 0
    79d0:	40 e0       	ldi	r20, 0x00	; 0
    79d2:	68 2f       	mov	r22, r24
    79d4:	8b e1       	ldi	r24, 0x1B	; 27
    79d6:	95 e2       	ldi	r25, 0x25	; 37
    79d8:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    79dc:	10 92 f2 26 	sts	0x26F2, r1	; 0x8026f2 <g_twi1_hygro_status>
    79e0:	eb e2       	ldi	r30, 0x2B	; 43
    79e2:	f0 e2       	ldi	r31, 0x20	; 32
    79e4:	84 e4       	ldi	r24, 0x44	; 68
    79e6:	80 83       	st	Z, r24
    79e8:	80 e3       	ldi	r24, 0x30	; 48
    79ea:	81 83       	std	Z+1, r24	; 0x01
    79ec:	83 e9       	ldi	r24, 0x93	; 147
    79ee:	82 83       	std	Z+2, r24	; 0x02
    79f0:	82 e0       	ldi	r24, 0x02	; 2
    79f2:	90 e0       	ldi	r25, 0x00	; 0
    79f4:	84 83       	std	Z+4, r24	; 0x04
    79f6:	95 83       	std	Z+5, r25	; 0x05
    79f8:	10 86       	std	Z+8, r1	; 0x08
    79fa:	11 86       	std	Z+9, r1	; 0x09
    79fc:	40 e0       	ldi	r20, 0x00	; 0
    79fe:	bf 01       	movw	r22, r30
    7a00:	80 ea       	ldi	r24, 0xA0	; 160
    7a02:	94 e0       	ldi	r25, 0x04	; 4
    7a04:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7a08:	c8 2f       	mov	r28, r24
    7a0a:	8d b7       	in	r24, 0x3d	; 61
    7a0c:	9e b7       	in	r25, 0x3e	; 62
    7a0e:	08 96       	adiw	r24, 0x08	; 8
    7a10:	8d bf       	out	0x3d, r24	; 61
    7a12:	9e bf       	out	0x3e, r25	; 62
    7a14:	cc 23       	and	r28, r28
    7a16:	f9 f0       	breq	.+62     	; 0x7a56 <twi_start+0x232>
    7a18:	81 e2       	ldi	r24, 0x21	; 33
    7a1a:	95 e3       	ldi	r25, 0x35	; 53
    7a1c:	9f 93       	push	r25
    7a1e:	8f 93       	push	r24
    7a20:	1f 92       	push	r1
    7a22:	80 e4       	ldi	r24, 0x40	; 64
    7a24:	8f 93       	push	r24
    7a26:	8b e1       	ldi	r24, 0x1B	; 27
    7a28:	95 e2       	ldi	r25, 0x25	; 37
    7a2a:	9f 93       	push	r25
    7a2c:	8f 93       	push	r24
    7a2e:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7a32:	81 34       	cpi	r24, 0x41	; 65
    7a34:	91 05       	cpc	r25, r1
    7a36:	10 f0       	brcs	.+4      	; 0x7a3c <twi_start+0x218>
    7a38:	80 e4       	ldi	r24, 0x40	; 64
    7a3a:	90 e0       	ldi	r25, 0x00	; 0
    7a3c:	40 e0       	ldi	r20, 0x00	; 0
    7a3e:	68 2f       	mov	r22, r24
    7a40:	8b e1       	ldi	r24, 0x1B	; 27
    7a42:	95 e2       	ldi	r25, 0x25	; 37
    7a44:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7a48:	0f 90       	pop	r0
    7a4a:	0f 90       	pop	r0
    7a4c:	0f 90       	pop	r0
    7a4e:	0f 90       	pop	r0
    7a50:	0f 90       	pop	r0
    7a52:	0f 90       	pop	r0
    7a54:	a2 c0       	rjmp	.+324    	; 0x7b9a <twi_start+0x376>
    7a56:	60 e1       	ldi	r22, 0x10	; 16
    7a58:	77 e2       	ldi	r23, 0x27	; 39
    7a5a:	80 e0       	ldi	r24, 0x00	; 0
    7a5c:	90 e0       	ldi	r25, 0x00	; 0
    7a5e:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7a62:	eb e2       	ldi	r30, 0x2B	; 43
    7a64:	f0 e2       	ldi	r31, 0x20	; 32
    7a66:	84 e4       	ldi	r24, 0x44	; 68
    7a68:	80 83       	st	Z, r24
    7a6a:	80 e3       	ldi	r24, 0x30	; 48
    7a6c:	81 83       	std	Z+1, r24	; 0x01
    7a6e:	82 ea       	ldi	r24, 0xA2	; 162
    7a70:	82 83       	std	Z+2, r24	; 0x02
    7a72:	82 e0       	ldi	r24, 0x02	; 2
    7a74:	90 e0       	ldi	r25, 0x00	; 0
    7a76:	84 83       	std	Z+4, r24	; 0x04
    7a78:	95 83       	std	Z+5, r25	; 0x05
    7a7a:	10 86       	std	Z+8, r1	; 0x08
    7a7c:	11 86       	std	Z+9, r1	; 0x09
    7a7e:	40 e0       	ldi	r20, 0x00	; 0
    7a80:	bf 01       	movw	r22, r30
    7a82:	80 ea       	ldi	r24, 0xA0	; 160
    7a84:	94 e0       	ldi	r25, 0x04	; 4
    7a86:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7a8a:	c8 2f       	mov	r28, r24
    7a8c:	81 11       	cpse	r24, r1
    7a8e:	85 c0       	rjmp	.+266    	; 0x7b9a <twi_start+0x376>
    7a90:	60 e1       	ldi	r22, 0x10	; 16
    7a92:	77 e2       	ldi	r23, 0x27	; 39
    7a94:	80 e0       	ldi	r24, 0x00	; 0
    7a96:	90 e0       	ldi	r25, 0x00	; 0
    7a98:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7a9c:	eb e2       	ldi	r30, 0x2B	; 43
    7a9e:	f0 e2       	ldi	r31, 0x20	; 32
    7aa0:	84 e4       	ldi	r24, 0x44	; 68
    7aa2:	80 83       	st	Z, r24
    7aa4:	83 ef       	ldi	r24, 0xF3	; 243
    7aa6:	81 83       	std	Z+1, r24	; 0x01
    7aa8:	8d e2       	ldi	r24, 0x2D	; 45
    7aaa:	82 83       	std	Z+2, r24	; 0x02
    7aac:	82 e0       	ldi	r24, 0x02	; 2
    7aae:	90 e0       	ldi	r25, 0x00	; 0
    7ab0:	84 83       	std	Z+4, r24	; 0x04
    7ab2:	95 83       	std	Z+5, r25	; 0x05
    7ab4:	80 87       	std	Z+8, r24	; 0x08
    7ab6:	91 87       	std	Z+9, r25	; 0x09
    7ab8:	41 e0       	ldi	r20, 0x01	; 1
    7aba:	bf 01       	movw	r22, r30
    7abc:	80 ea       	ldi	r24, 0xA0	; 160
    7abe:	94 e0       	ldi	r25, 0x04	; 4
    7ac0:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7ac4:	c8 2f       	mov	r28, r24
    7ac6:	81 11       	cpse	r24, r1
    7ac8:	68 c0       	rjmp	.+208    	; 0x7b9a <twi_start+0x376>
    7aca:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <twi1_m_data+0x1>
    7ace:	80 93 f2 26 	sts	0x26F2, r24	; 0x8026f2 <g_twi1_hygro_status>
    7ad2:	1f 92       	push	r1
    7ad4:	8f 93       	push	r24
    7ad6:	8f ee       	ldi	r24, 0xEF	; 239
    7ad8:	94 e3       	ldi	r25, 0x34	; 52
    7ada:	9f 93       	push	r25
    7adc:	8f 93       	push	r24
    7ade:	1f 92       	push	r1
    7ae0:	80 e4       	ldi	r24, 0x40	; 64
    7ae2:	8f 93       	push	r24
    7ae4:	8b e1       	ldi	r24, 0x1B	; 27
    7ae6:	95 e2       	ldi	r25, 0x25	; 37
    7ae8:	9f 93       	push	r25
    7aea:	8f 93       	push	r24
    7aec:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7af0:	81 34       	cpi	r24, 0x41	; 65
    7af2:	91 05       	cpc	r25, r1
    7af4:	10 f0       	brcs	.+4      	; 0x7afa <twi_start+0x2d6>
    7af6:	80 e4       	ldi	r24, 0x40	; 64
    7af8:	90 e0       	ldi	r25, 0x00	; 0
    7afa:	40 e0       	ldi	r20, 0x00	; 0
    7afc:	68 2f       	mov	r22, r24
    7afe:	8b e1       	ldi	r24, 0x1B	; 27
    7b00:	95 e2       	ldi	r25, 0x25	; 37
    7b02:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7b06:	eb e2       	ldi	r30, 0x2B	; 43
    7b08:	f0 e2       	ldi	r31, 0x20	; 32
    7b0a:	84 e4       	ldi	r24, 0x44	; 68
    7b0c:	80 83       	st	Z, r24
    7b0e:	84 e2       	ldi	r24, 0x24	; 36
    7b10:	81 83       	std	Z+1, r24	; 0x01
    7b12:	12 82       	std	Z+2, r1	; 0x02
    7b14:	82 e0       	ldi	r24, 0x02	; 2
    7b16:	90 e0       	ldi	r25, 0x00	; 0
    7b18:	84 83       	std	Z+4, r24	; 0x04
    7b1a:	95 83       	std	Z+5, r25	; 0x05
    7b1c:	10 86       	std	Z+8, r1	; 0x08
    7b1e:	11 86       	std	Z+9, r1	; 0x09
    7b20:	40 e0       	ldi	r20, 0x00	; 0
    7b22:	bf 01       	movw	r22, r30
    7b24:	80 ea       	ldi	r24, 0xA0	; 160
    7b26:	94 e0       	ldi	r25, 0x04	; 4
    7b28:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7b2c:	c8 2f       	mov	r28, r24
    7b2e:	ed b7       	in	r30, 0x3d	; 61
    7b30:	fe b7       	in	r31, 0x3e	; 62
    7b32:	38 96       	adiw	r30, 0x08	; 8
    7b34:	ed bf       	out	0x3d, r30	; 61
    7b36:	fe bf       	out	0x3e, r31	; 62
    7b38:	81 11       	cpse	r24, r1
    7b3a:	2f c0       	rjmp	.+94     	; 0x7b9a <twi_start+0x376>
    7b3c:	81 e0       	ldi	r24, 0x01	; 1
    7b3e:	80 93 f3 26 	sts	0x26F3, r24	; 0x8026f3 <g_twi1_hygro_valid>
    7b42:	8c e8       	ldi	r24, 0x8C	; 140
    7b44:	94 e3       	ldi	r25, 0x34	; 52
    7b46:	9f 93       	push	r25
    7b48:	8f 93       	push	r24
    7b4a:	1f 92       	push	r1
    7b4c:	10 e4       	ldi	r17, 0x40	; 64
    7b4e:	1f 93       	push	r17
    7b50:	cb e1       	ldi	r28, 0x1B	; 27
    7b52:	d5 e2       	ldi	r29, 0x25	; 37
    7b54:	df 93       	push	r29
    7b56:	cf 93       	push	r28
    7b58:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7b5c:	ae 01       	movw	r20, r28
    7b5e:	6e e1       	ldi	r22, 0x1E	; 30
    7b60:	88 e0       	ldi	r24, 0x08	; 8
    7b62:	12 db       	rcall	.-2524   	; 0x7188 <task_twi2_lcd_str>
    7b64:	81 ed       	ldi	r24, 0xD1	; 209
    7b66:	94 e3       	ldi	r25, 0x34	; 52
    7b68:	9f 93       	push	r25
    7b6a:	8f 93       	push	r24
    7b6c:	1f 92       	push	r1
    7b6e:	1f 93       	push	r17
    7b70:	df 93       	push	r29
    7b72:	cf 93       	push	r28
    7b74:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7b78:	81 34       	cpi	r24, 0x41	; 65
    7b7a:	91 05       	cpc	r25, r1
    7b7c:	10 f0       	brcs	.+4      	; 0x7b82 <twi_start+0x35e>
    7b7e:	80 e4       	ldi	r24, 0x40	; 64
    7b80:	90 e0       	ldi	r25, 0x00	; 0
    7b82:	40 e0       	ldi	r20, 0x00	; 0
    7b84:	68 2f       	mov	r22, r24
    7b86:	8b e1       	ldi	r24, 0x1B	; 27
    7b88:	95 e2       	ldi	r25, 0x25	; 37
    7b8a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7b8e:	8d b7       	in	r24, 0x3d	; 61
    7b90:	9e b7       	in	r25, 0x3e	; 62
    7b92:	0c 96       	adiw	r24, 0x0c	; 12
    7b94:	8d bf       	out	0x3d, r24	; 61
    7b96:	9e bf       	out	0x3e, r25	; 62
    7b98:	23 c0       	rjmp	.+70     	; 0x7be0 <twi_start+0x3bc>
    7b9a:	8c 2f       	mov	r24, r28
    7b9c:	0c 2e       	mov	r0, r28
    7b9e:	00 0c       	add	r0, r0
    7ba0:	99 0b       	sbc	r25, r25
    7ba2:	9f 93       	push	r25
    7ba4:	cf 93       	push	r28
    7ba6:	80 ea       	ldi	r24, 0xA0	; 160
    7ba8:	94 e3       	ldi	r25, 0x34	; 52
    7baa:	9f 93       	push	r25
    7bac:	8f 93       	push	r24
    7bae:	1f 92       	push	r1
    7bb0:	80 e4       	ldi	r24, 0x40	; 64
    7bb2:	8f 93       	push	r24
    7bb4:	8b e1       	ldi	r24, 0x1B	; 27
    7bb6:	95 e2       	ldi	r25, 0x25	; 37
    7bb8:	9f 93       	push	r25
    7bba:	8f 93       	push	r24
    7bbc:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7bc0:	81 34       	cpi	r24, 0x41	; 65
    7bc2:	91 05       	cpc	r25, r1
    7bc4:	10 f0       	brcs	.+4      	; 0x7bca <twi_start+0x3a6>
    7bc6:	80 e4       	ldi	r24, 0x40	; 64
    7bc8:	90 e0       	ldi	r25, 0x00	; 0
    7bca:	40 e0       	ldi	r20, 0x00	; 0
    7bcc:	68 2f       	mov	r22, r24
    7bce:	8b e1       	ldi	r24, 0x1B	; 27
    7bd0:	95 e2       	ldi	r25, 0x25	; 37
    7bd2:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7bd6:	ed b7       	in	r30, 0x3d	; 61
    7bd8:	fe b7       	in	r31, 0x3e	; 62
    7bda:	38 96       	adiw	r30, 0x08	; 8
    7bdc:	ed bf       	out	0x3d, r30	; 61
    7bde:	fe bf       	out	0x3e, r31	; 62
    7be0:	3a db       	rcall	.-2444   	; 0x7256 <init_twi1_gyro>
    7be2:	1f 92       	push	r1
    7be4:	86 e7       	ldi	r24, 0x76	; 118
    7be6:	8f 93       	push	r24
    7be8:	8b e3       	ldi	r24, 0x3B	; 59
    7bea:	93 e3       	ldi	r25, 0x33	; 51
    7bec:	9f 93       	push	r25
    7bee:	8f 93       	push	r24
    7bf0:	1f 92       	push	r1
    7bf2:	80 e4       	ldi	r24, 0x40	; 64
    7bf4:	8f 93       	push	r24
    7bf6:	8b e1       	ldi	r24, 0x1B	; 27
    7bf8:	95 e2       	ldi	r25, 0x25	; 37
    7bfa:	9f 93       	push	r25
    7bfc:	8f 93       	push	r24
    7bfe:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7c02:	81 34       	cpi	r24, 0x41	; 65
    7c04:	91 05       	cpc	r25, r1
    7c06:	10 f0       	brcs	.+4      	; 0x7c0c <twi_start+0x3e8>
    7c08:	80 e4       	ldi	r24, 0x40	; 64
    7c0a:	90 e0       	ldi	r25, 0x00	; 0
    7c0c:	40 e0       	ldi	r20, 0x00	; 0
    7c0e:	68 2f       	mov	r22, r24
    7c10:	8b e1       	ldi	r24, 0x1B	; 27
    7c12:	95 e2       	ldi	r25, 0x25	; 37
    7c14:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7c18:	eb e2       	ldi	r30, 0x2B	; 43
    7c1a:	f0 e2       	ldi	r31, 0x20	; 32
    7c1c:	86 e7       	ldi	r24, 0x76	; 118
    7c1e:	80 83       	st	Z, r24
    7c20:	8e e1       	ldi	r24, 0x1E	; 30
    7c22:	81 83       	std	Z+1, r24	; 0x01
    7c24:	81 e0       	ldi	r24, 0x01	; 1
    7c26:	90 e0       	ldi	r25, 0x00	; 0
    7c28:	84 83       	std	Z+4, r24	; 0x04
    7c2a:	95 83       	std	Z+5, r25	; 0x05
    7c2c:	10 86       	std	Z+8, r1	; 0x08
    7c2e:	11 86       	std	Z+9, r1	; 0x09
    7c30:	40 e0       	ldi	r20, 0x00	; 0
    7c32:	bf 01       	movw	r22, r30
    7c34:	80 ea       	ldi	r24, 0xA0	; 160
    7c36:	94 e0       	ldi	r25, 0x04	; 4
    7c38:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7c3c:	c8 2f       	mov	r28, r24
    7c3e:	8d b7       	in	r24, 0x3d	; 61
    7c40:	9e b7       	in	r25, 0x3e	; 62
    7c42:	08 96       	adiw	r24, 0x08	; 8
    7c44:	8d bf       	out	0x3d, r24	; 61
    7c46:	9e bf       	out	0x3e, r25	; 62
    7c48:	c1 11       	cpse	r28, r1
    7c4a:	04 c1       	rjmp	.+520    	; 0x7e54 <twi_start+0x630>
    7c4c:	68 e9       	ldi	r22, 0x98	; 152
    7c4e:	7a e3       	ldi	r23, 0x3A	; 58
    7c50:	80 e0       	ldi	r24, 0x00	; 0
    7c52:	90 e0       	ldi	r25, 0x00	; 0
    7c54:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    7c58:	eb e2       	ldi	r30, 0x2B	; 43
    7c5a:	f0 e2       	ldi	r31, 0x20	; 32
    7c5c:	86 e7       	ldi	r24, 0x76	; 118
    7c5e:	80 83       	st	Z, r24
    7c60:	8e ea       	ldi	r24, 0xAE	; 174
    7c62:	81 83       	std	Z+1, r24	; 0x01
    7c64:	81 e0       	ldi	r24, 0x01	; 1
    7c66:	90 e0       	ldi	r25, 0x00	; 0
    7c68:	84 83       	std	Z+4, r24	; 0x04
    7c6a:	95 83       	std	Z+5, r25	; 0x05
    7c6c:	82 e0       	ldi	r24, 0x02	; 2
    7c6e:	90 e0       	ldi	r25, 0x00	; 0
    7c70:	80 87       	std	Z+8, r24	; 0x08
    7c72:	91 87       	std	Z+9, r25	; 0x09
    7c74:	41 e0       	ldi	r20, 0x01	; 1
    7c76:	bf 01       	movw	r22, r30
    7c78:	80 ea       	ldi	r24, 0xA0	; 160
    7c7a:	94 e0       	ldi	r25, 0x04	; 4
    7c7c:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7c80:	c8 2f       	mov	r28, r24
    7c82:	88 23       	and	r24, r24
    7c84:	21 f1       	breq	.+72     	; 0x7cce <twi_start+0x4aa>
    7c86:	8c 2f       	mov	r24, r28
    7c88:	0c 2e       	mov	r0, r28
    7c8a:	00 0c       	add	r0, r0
    7c8c:	99 0b       	sbc	r25, r25
    7c8e:	9f 93       	push	r25
    7c90:	cf 93       	push	r28
    7c92:	86 e0       	ldi	r24, 0x06	; 6
    7c94:	93 e3       	ldi	r25, 0x33	; 51
    7c96:	9f 93       	push	r25
    7c98:	8f 93       	push	r24
    7c9a:	1f 92       	push	r1
    7c9c:	80 e4       	ldi	r24, 0x40	; 64
    7c9e:	8f 93       	push	r24
    7ca0:	8b e1       	ldi	r24, 0x1B	; 27
    7ca2:	95 e2       	ldi	r25, 0x25	; 37
    7ca4:	9f 93       	push	r25
    7ca6:	8f 93       	push	r24
    7ca8:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7cac:	81 34       	cpi	r24, 0x41	; 65
    7cae:	91 05       	cpc	r25, r1
    7cb0:	10 f0       	brcs	.+4      	; 0x7cb6 <twi_start+0x492>
    7cb2:	80 e4       	ldi	r24, 0x40	; 64
    7cb4:	90 e0       	ldi	r25, 0x00	; 0
    7cb6:	40 e0       	ldi	r20, 0x00	; 0
    7cb8:	68 2f       	mov	r22, r24
    7cba:	8b e1       	ldi	r24, 0x1B	; 27
    7cbc:	95 e2       	ldi	r25, 0x25	; 37
    7cbe:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7cc2:	ed b7       	in	r30, 0x3d	; 61
    7cc4:	fe b7       	in	r31, 0x3e	; 62
    7cc6:	38 96       	adiw	r30, 0x08	; 8
    7cc8:	ed bf       	out	0x3d, r30	; 61
    7cca:	fe bf       	out	0x3e, r31	; 62
    7ccc:	c3 c0       	rjmp	.+390    	; 0x7e54 <twi_start+0x630>
    7cce:	e3 e1       	ldi	r30, 0x13	; 19
    7cd0:	f5 e2       	ldi	r31, 0x25	; 37
    7cd2:	80 81       	ld	r24, Z
    7cd4:	90 e0       	ldi	r25, 0x00	; 0
    7cd6:	98 2f       	mov	r25, r24
    7cd8:	88 27       	eor	r24, r24
    7cda:	21 81       	ldd	r18, Z+1	; 0x01
    7cdc:	82 2b       	or	r24, r18
    7cde:	92 95       	swap	r25
    7ce0:	82 95       	swap	r24
    7ce2:	8f 70       	andi	r24, 0x0F	; 15
    7ce4:	89 27       	eor	r24, r25
    7ce6:	9f 70       	andi	r25, 0x0F	; 15
    7ce8:	89 27       	eor	r24, r25
    7cea:	80 93 14 27 	sts	0x2714, r24	; 0x802714 <g_twi1_baro_version>
    7cee:	90 93 15 27 	sts	0x2715, r25	; 0x802715 <g_twi1_baro_version+0x1>
    7cf2:	9f 93       	push	r25
    7cf4:	8f 93       	push	r24
    7cf6:	80 ed       	ldi	r24, 0xD0	; 208
    7cf8:	92 e3       	ldi	r25, 0x32	; 50
    7cfa:	9f 93       	push	r25
    7cfc:	8f 93       	push	r24
    7cfe:	1f 92       	push	r1
    7d00:	80 e4       	ldi	r24, 0x40	; 64
    7d02:	8f 93       	push	r24
    7d04:	8b e1       	ldi	r24, 0x1B	; 27
    7d06:	95 e2       	ldi	r25, 0x25	; 37
    7d08:	9f 93       	push	r25
    7d0a:	8f 93       	push	r24
    7d0c:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7d10:	81 34       	cpi	r24, 0x41	; 65
    7d12:	91 05       	cpc	r25, r1
    7d14:	10 f0       	brcs	.+4      	; 0x7d1a <twi_start+0x4f6>
    7d16:	80 e4       	ldi	r24, 0x40	; 64
    7d18:	90 e0       	ldi	r25, 0x00	; 0
    7d1a:	40 e0       	ldi	r20, 0x00	; 0
    7d1c:	68 2f       	mov	r22, r24
    7d1e:	8b e1       	ldi	r24, 0x1B	; 27
    7d20:	95 e2       	ldi	r25, 0x25	; 37
    7d22:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7d26:	0f 2e       	mov	r0, r31
    7d28:	f6 e0       	ldi	r31, 0x06	; 6
    7d2a:	ef 2e       	mov	r14, r31
    7d2c:	f7 e2       	ldi	r31, 0x27	; 39
    7d2e:	ff 2e       	mov	r15, r31
    7d30:	f0 2d       	mov	r31, r0
    7d32:	8d b7       	in	r24, 0x3d	; 61
    7d34:	9e b7       	in	r25, 0x3e	; 62
    7d36:	08 96       	adiw	r24, 0x08	; 8
    7d38:	8d bf       	out	0x3d, r24	; 61
    7d3a:	9e bf       	out	0x3e, r25	; 62
    7d3c:	88 24       	eor	r8, r8
    7d3e:	83 94       	inc	r8
    7d40:	91 2c       	mov	r9, r1
    7d42:	cb e2       	ldi	r28, 0x2B	; 43
    7d44:	d0 e2       	ldi	r29, 0x20	; 32
    7d46:	0f 2e       	mov	r0, r31
    7d48:	f6 e7       	ldi	r31, 0x76	; 118
    7d4a:	7f 2e       	mov	r7, r31
    7d4c:	f0 2d       	mov	r31, r0
    7d4e:	aa 24       	eor	r10, r10
    7d50:	a3 94       	inc	r10
    7d52:	b1 2c       	mov	r11, r1
    7d54:	68 94       	set
    7d56:	cc 24       	eor	r12, r12
    7d58:	c1 f8       	bld	r12, 1
    7d5a:	d1 2c       	mov	r13, r1
    7d5c:	03 e1       	ldi	r16, 0x13	; 19
    7d5e:	15 e2       	ldi	r17, 0x25	; 37
    7d60:	78 82       	st	Y, r7
    7d62:	c4 01       	movw	r24, r8
    7d64:	88 0f       	add	r24, r24
    7d66:	99 1f       	adc	r25, r25
    7d68:	80 6a       	ori	r24, 0xA0	; 160
    7d6a:	89 83       	std	Y+1, r24	; 0x01
    7d6c:	ac 82       	std	Y+4, r10	; 0x04
    7d6e:	bd 82       	std	Y+5, r11	; 0x05
    7d70:	c8 86       	std	Y+8, r12	; 0x08
    7d72:	d9 86       	std	Y+9, r13	; 0x09
    7d74:	41 e0       	ldi	r20, 0x01	; 1
    7d76:	be 01       	movw	r22, r28
    7d78:	80 ea       	ldi	r24, 0xA0	; 160
    7d7a:	94 e0       	ldi	r25, 0x04	; 4
    7d7c:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    7d80:	88 23       	and	r24, r24
    7d82:	31 f1       	breq	.+76     	; 0x7dd0 <twi_start+0x5ac>
    7d84:	28 2f       	mov	r18, r24
    7d86:	08 2e       	mov	r0, r24
    7d88:	00 0c       	add	r0, r0
    7d8a:	33 0b       	sbc	r19, r19
    7d8c:	3f 93       	push	r19
    7d8e:	8f 93       	push	r24
    7d90:	9f 92       	push	r9
    7d92:	8f 92       	push	r8
    7d94:	8b e9       	ldi	r24, 0x9B	; 155
    7d96:	92 e3       	ldi	r25, 0x32	; 50
    7d98:	9f 93       	push	r25
    7d9a:	8f 93       	push	r24
    7d9c:	1f 92       	push	r1
    7d9e:	80 e4       	ldi	r24, 0x40	; 64
    7da0:	8f 93       	push	r24
    7da2:	8b e1       	ldi	r24, 0x1B	; 27
    7da4:	95 e2       	ldi	r25, 0x25	; 37
    7da6:	9f 93       	push	r25
    7da8:	8f 93       	push	r24
    7daa:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7dae:	81 34       	cpi	r24, 0x41	; 65
    7db0:	91 05       	cpc	r25, r1
    7db2:	10 f0       	brcs	.+4      	; 0x7db8 <twi_start+0x594>
    7db4:	80 e4       	ldi	r24, 0x40	; 64
    7db6:	90 e0       	ldi	r25, 0x00	; 0
    7db8:	40 e0       	ldi	r20, 0x00	; 0
    7dba:	68 2f       	mov	r22, r24
    7dbc:	8b e1       	ldi	r24, 0x1B	; 27
    7dbe:	95 e2       	ldi	r25, 0x25	; 37
    7dc0:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7dc4:	ed b7       	in	r30, 0x3d	; 61
    7dc6:	fe b7       	in	r31, 0x3e	; 62
    7dc8:	3a 96       	adiw	r30, 0x0a	; 10
    7dca:	ed bf       	out	0x3d, r30	; 61
    7dcc:	fe bf       	out	0x3e, r31	; 62
    7dce:	13 c0       	rjmp	.+38     	; 0x7df6 <twi_start+0x5d2>
    7dd0:	f8 01       	movw	r30, r16
    7dd2:	80 81       	ld	r24, Z
    7dd4:	90 e0       	ldi	r25, 0x00	; 0
    7dd6:	98 2f       	mov	r25, r24
    7dd8:	88 27       	eor	r24, r24
    7dda:	21 81       	ldd	r18, Z+1	; 0x01
    7ddc:	82 2b       	or	r24, r18
    7dde:	f7 01       	movw	r30, r14
    7de0:	81 93       	st	Z+, r24
    7de2:	91 93       	st	Z+, r25
    7de4:	7f 01       	movw	r14, r30
    7de6:	ff ef       	ldi	r31, 0xFF	; 255
    7de8:	8f 1a       	sub	r8, r31
    7dea:	9f 0a       	sbc	r9, r31
    7dec:	88 e0       	ldi	r24, 0x08	; 8
    7dee:	88 16       	cp	r8, r24
    7df0:	91 04       	cpc	r9, r1
    7df2:	09 f0       	breq	.+2      	; 0x7df6 <twi_start+0x5d2>
    7df4:	b5 cf       	rjmp	.-150    	; 0x7d60 <twi_start+0x53c>
    7df6:	81 e0       	ldi	r24, 0x01	; 1
    7df8:	80 93 16 27 	sts	0x2716, r24	; 0x802716 <g_twi1_baro_valid>
    7dfc:	88 e3       	ldi	r24, 0x38	; 56
    7dfe:	92 e3       	ldi	r25, 0x32	; 50
    7e00:	9f 93       	push	r25
    7e02:	8f 93       	push	r24
    7e04:	1f 92       	push	r1
    7e06:	10 e4       	ldi	r17, 0x40	; 64
    7e08:	1f 93       	push	r17
    7e0a:	cb e1       	ldi	r28, 0x1B	; 27
    7e0c:	d5 e2       	ldi	r29, 0x25	; 37
    7e0e:	df 93       	push	r29
    7e10:	cf 93       	push	r28
    7e12:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7e16:	ae 01       	movw	r20, r28
    7e18:	62 e3       	ldi	r22, 0x32	; 50
    7e1a:	88 e0       	ldi	r24, 0x08	; 8
    7e1c:	b5 d9       	rcall	.-3222   	; 0x7188 <task_twi2_lcd_str>
    7e1e:	8d e7       	ldi	r24, 0x7D	; 125
    7e20:	92 e3       	ldi	r25, 0x32	; 50
    7e22:	9f 93       	push	r25
    7e24:	8f 93       	push	r24
    7e26:	1f 92       	push	r1
    7e28:	1f 93       	push	r17
    7e2a:	df 93       	push	r29
    7e2c:	cf 93       	push	r28
    7e2e:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7e32:	81 34       	cpi	r24, 0x41	; 65
    7e34:	91 05       	cpc	r25, r1
    7e36:	10 f0       	brcs	.+4      	; 0x7e3c <twi_start+0x618>
    7e38:	80 e4       	ldi	r24, 0x40	; 64
    7e3a:	90 e0       	ldi	r25, 0x00	; 0
    7e3c:	40 e0       	ldi	r20, 0x00	; 0
    7e3e:	68 2f       	mov	r22, r24
    7e40:	8b e1       	ldi	r24, 0x1B	; 27
    7e42:	95 e2       	ldi	r25, 0x25	; 37
    7e44:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7e48:	ed b7       	in	r30, 0x3d	; 61
    7e4a:	fe b7       	in	r31, 0x3e	; 62
    7e4c:	3c 96       	adiw	r30, 0x0c	; 12
    7e4e:	ed bf       	out	0x3d, r30	; 61
    7e50:	fe bf       	out	0x3e, r31	; 62
    7e52:	23 c0       	rjmp	.+70     	; 0x7e9a <twi_start+0x676>
    7e54:	8c 2f       	mov	r24, r28
    7e56:	0c 2e       	mov	r0, r28
    7e58:	00 0c       	add	r0, r0
    7e5a:	99 0b       	sbc	r25, r25
    7e5c:	9f 93       	push	r25
    7e5e:	cf 93       	push	r28
    7e60:	8c e4       	ldi	r24, 0x4C	; 76
    7e62:	92 e3       	ldi	r25, 0x32	; 50
    7e64:	9f 93       	push	r25
    7e66:	8f 93       	push	r24
    7e68:	1f 92       	push	r1
    7e6a:	80 e4       	ldi	r24, 0x40	; 64
    7e6c:	8f 93       	push	r24
    7e6e:	8b e1       	ldi	r24, 0x1B	; 27
    7e70:	95 e2       	ldi	r25, 0x25	; 37
    7e72:	9f 93       	push	r25
    7e74:	8f 93       	push	r24
    7e76:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7e7a:	81 34       	cpi	r24, 0x41	; 65
    7e7c:	91 05       	cpc	r25, r1
    7e7e:	10 f0       	brcs	.+4      	; 0x7e84 <twi_start+0x660>
    7e80:	80 e4       	ldi	r24, 0x40	; 64
    7e82:	90 e0       	ldi	r25, 0x00	; 0
    7e84:	40 e0       	ldi	r20, 0x00	; 0
    7e86:	68 2f       	mov	r22, r24
    7e88:	8b e1       	ldi	r24, 0x1B	; 27
    7e8a:	95 e2       	ldi	r25, 0x25	; 37
    7e8c:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7e90:	8d b7       	in	r24, 0x3d	; 61
    7e92:	9e b7       	in	r25, 0x3e	; 62
    7e94:	08 96       	adiw	r24, 0x08	; 8
    7e96:	8d bf       	out	0x3d, r24	; 61
    7e98:	9e bf       	out	0x3e, r25	; 62
    7e9a:	88 e2       	ldi	r24, 0x28	; 40
    7e9c:	92 e3       	ldi	r25, 0x32	; 50
    7e9e:	9f 93       	push	r25
    7ea0:	8f 93       	push	r24
    7ea2:	1f 92       	push	r1
    7ea4:	80 e4       	ldi	r24, 0x40	; 64
    7ea6:	8f 93       	push	r24
    7ea8:	8b e1       	ldi	r24, 0x1B	; 27
    7eaa:	95 e2       	ldi	r25, 0x25	; 37
    7eac:	9f 93       	push	r25
    7eae:	8f 93       	push	r24
    7eb0:	0e 94 8a 8b 	call	0x11714	; 0x11714 <snprintf_P>
    7eb4:	81 34       	cpi	r24, 0x41	; 65
    7eb6:	91 05       	cpc	r25, r1
    7eb8:	10 f0       	brcs	.+4      	; 0x7ebe <twi_start+0x69a>
    7eba:	80 e4       	ldi	r24, 0x40	; 64
    7ebc:	90 e0       	ldi	r25, 0x00	; 0
    7ebe:	40 e0       	ldi	r20, 0x00	; 0
    7ec0:	68 2f       	mov	r22, r24
    7ec2:	8b e1       	ldi	r24, 0x1B	; 27
    7ec4:	95 e2       	ldi	r25, 0x25	; 37
    7ec6:	0e 94 d6 20 	call	0x41ac	; 0x41ac <udi_write_tx_buf>
    7eca:	0f 90       	pop	r0
    7ecc:	0f 90       	pop	r0
    7ece:	0f 90       	pop	r0
    7ed0:	0f 90       	pop	r0
    7ed2:	0f 90       	pop	r0
    7ed4:	0f 90       	pop	r0
    7ed6:	df 91       	pop	r29
    7ed8:	cf 91       	pop	r28
    7eda:	1f 91       	pop	r17
    7edc:	0f 91       	pop	r16
    7ede:	ff 90       	pop	r15
    7ee0:	ef 90       	pop	r14
    7ee2:	df 90       	pop	r13
    7ee4:	cf 90       	pop	r12
    7ee6:	bf 90       	pop	r11
    7ee8:	af 90       	pop	r10
    7eea:	9f 90       	pop	r9
    7eec:	8f 90       	pop	r8
    7eee:	7f 90       	pop	r7
    7ef0:	08 95       	ret

00007ef2 <task_twi2_lcd__cpu1>:
PROGMEM_DECLARE(const char, PM_FORMAT_4F1[]);
PROGMEM_DECLARE(const char, PM_FORMAT_5F3[]);

/* TWI2 - LCD Port */
void task_twi2_lcd__cpu1(uint8_t col_left)
{
    7ef2:	df 92       	push	r13
    7ef4:	ef 92       	push	r14
    7ef6:	ff 92       	push	r15
    7ef8:	0f 93       	push	r16
    7efa:	1f 93       	push	r17
    7efc:	cf 93       	push	r28
    7efe:	df 93       	push	r29
    7f00:	1f 92       	push	r1
    7f02:	cd b7       	in	r28, 0x3d	; 61
    7f04:	de b7       	in	r29, 0x3e	; 62
    7f06:	d8 2e       	mov	r13, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7f08:	8f b7       	in	r24, 0x3f	; 63
    7f0a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    7f0c:	f8 94       	cli
	return flags;
    7f0e:	89 81       	ldd	r24, Y+1	; 0x01
	int16_t l_adc_5v0_volt_1000;

	/* Get up-to-date global data */
	{
		irqflags_t flags			= cpu_irq_save();
		l_adc_temp_deg_100			= g_adc_temp_deg_100;
    7f10:	60 91 6e 26 	lds	r22, 0x266E	; 0x80266e <g_adc_temp_deg_100>
    7f14:	70 91 6f 26 	lds	r23, 0x266F	; 0x80266f <g_adc_temp_deg_100+0x1>
		l_adc_5v0_volt_1000			= g_adc_5v0_volt_1000;
    7f18:	e0 90 78 26 	lds	r14, 0x2678	; 0x802678 <g_adc_5v0_volt_1000>
    7f1c:	f0 90 79 26 	lds	r15, 0x2679	; 0x802679 <g_adc_5v0_volt_1000+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7f20:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
	}

	if (s_adc_temp_deg_100 != l_adc_temp_deg_100) {
    7f22:	80 91 03 23 	lds	r24, 0x2303	; 0x802303 <s_adc_temp_deg_100.8203>
    7f26:	90 91 04 23 	lds	r25, 0x2304	; 0x802304 <s_adc_temp_deg_100.8203+0x1>
    7f2a:	68 17       	cp	r22, r24
    7f2c:	79 07       	cpc	r23, r25
    7f2e:	b9 f0       	breq	.+46     	; 0x7f5e <task_twi2_lcd__cpu1+0x6c>
		s_adc_temp_deg_100 = l_adc_temp_deg_100;
    7f30:	60 93 03 23 	sts	0x2303, r22	; 0x802303 <s_adc_temp_deg_100.8203>
    7f34:	70 93 04 23 	sts	0x2304, r23	; 0x802304 <s_adc_temp_deg_100.8203+0x1>

		/* ADC_TEMP */
		task_twi2_lcd_print_format_float_P(col_left,  2 * 10, l_adc_temp_deg_100 / 100.f, PM_FORMAT_4F1);
    7f38:	07 2e       	mov	r0, r23
    7f3a:	00 0c       	add	r0, r0
    7f3c:	88 0b       	sbc	r24, r24
    7f3e:	99 0b       	sbc	r25, r25
    7f40:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    7f44:	20 e0       	ldi	r18, 0x00	; 0
    7f46:	30 e0       	ldi	r19, 0x00	; 0
    7f48:	48 ec       	ldi	r20, 0xC8	; 200
    7f4a:	52 e4       	ldi	r21, 0x42	; 66
    7f4c:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    7f50:	9b 01       	movw	r18, r22
    7f52:	ac 01       	movw	r20, r24
    7f54:	04 e1       	ldi	r16, 0x14	; 20
    7f56:	12 e3       	ldi	r17, 0x32	; 50
    7f58:	64 e1       	ldi	r22, 0x14	; 20
    7f5a:	8d 2d       	mov	r24, r13
    7f5c:	d7 d8       	rcall	.-3666   	; 0x710c <task_twi2_lcd_print_format_float_P>
	}

	if (s_adc_5v0_volt_1000 != l_adc_5v0_volt_1000) {
    7f5e:	80 91 01 23 	lds	r24, 0x2301	; 0x802301 <s_adc_5v0_volt_1000.8204>
    7f62:	90 91 02 23 	lds	r25, 0x2302	; 0x802302 <s_adc_5v0_volt_1000.8204+0x1>
    7f66:	e8 16       	cp	r14, r24
    7f68:	f9 06       	cpc	r15, r25
    7f6a:	b9 f0       	breq	.+46     	; 0x7f9a <task_twi2_lcd__cpu1+0xa8>
		s_adc_5v0_volt_1000 = l_adc_5v0_volt_1000;
    7f6c:	e0 92 01 23 	sts	0x2301, r14	; 0x802301 <s_adc_5v0_volt_1000.8204>
    7f70:	f0 92 02 23 	sts	0x2302, r15	; 0x802302 <s_adc_5v0_volt_1000.8204+0x1>

		/* ADC_5V0 */
		task_twi2_lcd_print_format_float_P(col_left,  3 * 10, l_adc_5v0_volt_1000 / 1000.f, PM_FORMAT_5F3);
    7f74:	b7 01       	movw	r22, r14
    7f76:	ff 0c       	add	r15, r15
    7f78:	88 0b       	sbc	r24, r24
    7f7a:	99 0b       	sbc	r25, r25
    7f7c:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    7f80:	20 e0       	ldi	r18, 0x00	; 0
    7f82:	30 e0       	ldi	r19, 0x00	; 0
    7f84:	4a e7       	ldi	r20, 0x7A	; 122
    7f86:	54 e4       	ldi	r21, 0x44	; 68
    7f88:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    7f8c:	9b 01       	movw	r18, r22
    7f8e:	ac 01       	movw	r20, r24
    7f90:	0e e0       	ldi	r16, 0x0E	; 14
    7f92:	12 e3       	ldi	r17, 0x32	; 50
    7f94:	6e e1       	ldi	r22, 0x1E	; 30
    7f96:	8d 2d       	mov	r24, r13
    7f98:	b9 d8       	rcall	.-3726   	; 0x710c <task_twi2_lcd_print_format_float_P>
	}
}
    7f9a:	0f 90       	pop	r0
    7f9c:	df 91       	pop	r29
    7f9e:	cf 91       	pop	r28
    7fa0:	1f 91       	pop	r17
    7fa2:	0f 91       	pop	r16
    7fa4:	ff 90       	pop	r15
    7fa6:	ef 90       	pop	r14
    7fa8:	df 90       	pop	r13
    7faa:	08 95       	ret

00007fac <task_twi2_lcd__cpu2>:
	delay_ms(50);
}
#endif

void task_twi2_lcd_cls(void)
{
    7fac:	df 92       	push	r13
    7fae:	ef 92       	push	r14
    7fb0:	ff 92       	push	r15
    7fb2:	0f 93       	push	r16
    7fb4:	1f 93       	push	r17
    7fb6:	cf 93       	push	r28
    7fb8:	df 93       	push	r29
    7fba:	1f 92       	push	r1
    7fbc:	cd b7       	in	r28, 0x3d	; 61
    7fbe:	de b7       	in	r29, 0x3e	; 62
    7fc0:	d8 2e       	mov	r13, r24
    7fc2:	8f b7       	in	r24, 0x3f	; 63
    7fc4:	89 83       	std	Y+1, r24	; 0x01
    7fc6:	f8 94       	cli
    7fc8:	89 81       	ldd	r24, Y+1	; 0x01
    7fca:	60 91 76 26 	lds	r22, 0x2676	; 0x802676 <g_adc_vbat_volt_1000>
    7fce:	70 91 77 26 	lds	r23, 0x2677	; 0x802677 <g_adc_vbat_volt_1000+0x1>
    7fd2:	e0 90 7a 26 	lds	r14, 0x267A	; 0x80267a <g_adc_vctcxo_volt_1000>
    7fd6:	f0 90 7b 26 	lds	r15, 0x267B	; 0x80267b <g_adc_vctcxo_volt_1000+0x1>
    7fda:	8f bf       	out	0x3f, r24	; 63
    7fdc:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <s_adc_vbat_volt_1000.8211>
    7fe0:	90 91 00 23 	lds	r25, 0x2300	; 0x802300 <s_adc_vbat_volt_1000.8211+0x1>
    7fe4:	68 17       	cp	r22, r24
    7fe6:	79 07       	cpc	r23, r25
    7fe8:	b9 f0       	breq	.+46     	; 0x8018 <task_twi2_lcd__cpu2+0x6c>
    7fea:	60 93 ff 22 	sts	0x22FF, r22	; 0x8022ff <s_adc_vbat_volt_1000.8211>
    7fee:	70 93 00 23 	sts	0x2300, r23	; 0x802300 <s_adc_vbat_volt_1000.8211+0x1>
    7ff2:	07 2e       	mov	r0, r23
    7ff4:	00 0c       	add	r0, r0
    7ff6:	88 0b       	sbc	r24, r24
    7ff8:	99 0b       	sbc	r25, r25
    7ffa:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    7ffe:	20 e0       	ldi	r18, 0x00	; 0
    8000:	30 e0       	ldi	r19, 0x00	; 0
    8002:	4a e7       	ldi	r20, 0x7A	; 122
    8004:	54 e4       	ldi	r21, 0x44	; 68
    8006:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    800a:	9b 01       	movw	r18, r22
    800c:	ac 01       	movw	r20, r24
    800e:	0e e0       	ldi	r16, 0x0E	; 14
    8010:	12 e3       	ldi	r17, 0x32	; 50
    8012:	68 e2       	ldi	r22, 0x28	; 40
    8014:	8d 2d       	mov	r24, r13
    8016:	7a d8       	rcall	.-3852   	; 0x710c <task_twi2_lcd_print_format_float_P>
    8018:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <s_adc_vctcxo_volt_1000.8212>
    801c:	90 91 fe 22 	lds	r25, 0x22FE	; 0x8022fe <s_adc_vctcxo_volt_1000.8212+0x1>
    8020:	e8 16       	cp	r14, r24
    8022:	f9 06       	cpc	r15, r25
    8024:	b9 f0       	breq	.+46     	; 0x8054 <task_twi2_lcd__cpu2+0xa8>
    8026:	e0 92 fd 22 	sts	0x22FD, r14	; 0x8022fd <s_adc_vctcxo_volt_1000.8212>
    802a:	f0 92 fe 22 	sts	0x22FE, r15	; 0x8022fe <s_adc_vctcxo_volt_1000.8212+0x1>
    802e:	b7 01       	movw	r22, r14
    8030:	ff 0c       	add	r15, r15
    8032:	88 0b       	sbc	r24, r24
    8034:	99 0b       	sbc	r25, r25
    8036:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    803a:	20 e0       	ldi	r18, 0x00	; 0
    803c:	30 e0       	ldi	r19, 0x00	; 0
    803e:	4a e7       	ldi	r20, 0x7A	; 122
    8040:	54 e4       	ldi	r21, 0x44	; 68
    8042:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    8046:	9b 01       	movw	r18, r22
    8048:	ac 01       	movw	r20, r24
    804a:	0e e0       	ldi	r16, 0x0E	; 14
    804c:	12 e3       	ldi	r17, 0x32	; 50
    804e:	62 e3       	ldi	r22, 0x32	; 50
    8050:	8d 2d       	mov	r24, r13
    8052:	5c d8       	rcall	.-3912   	; 0x710c <task_twi2_lcd_print_format_float_P>
    8054:	0f 90       	pop	r0
    8056:	df 91       	pop	r29
    8058:	cf 91       	pop	r28
    805a:	1f 91       	pop	r17
    805c:	0f 91       	pop	r16
    805e:	ff 90       	pop	r15
    8060:	ef 90       	pop	r14
    8062:	df 90       	pop	r13
    8064:	08 95       	ret

00008066 <task_twi2_lcd__cpu3>:
    8066:	df 92       	push	r13
    8068:	ef 92       	push	r14
    806a:	ff 92       	push	r15
    806c:	0f 93       	push	r16
    806e:	1f 93       	push	r17
    8070:	cf 93       	push	r28
    8072:	df 93       	push	r29
    8074:	1f 92       	push	r1
    8076:	cd b7       	in	r28, 0x3d	; 61
    8078:	de b7       	in	r29, 0x3e	; 62
    807a:	d8 2e       	mov	r13, r24
    807c:	8f b7       	in	r24, 0x3f	; 63
    807e:	89 83       	std	Y+1, r24	; 0x01
    8080:	f8 94       	cli
    8082:	89 81       	ldd	r24, Y+1	; 0x01
    8084:	60 91 74 26 	lds	r22, 0x2674	; 0x802674 <g_adc_io_adc4_volt_1000>
    8088:	70 91 75 26 	lds	r23, 0x2675	; 0x802675 <g_adc_io_adc4_volt_1000+0x1>
    808c:	e0 90 72 26 	lds	r14, 0x2672	; 0x802672 <g_adc_io_adc5_volt_1000>
    8090:	f0 90 73 26 	lds	r15, 0x2673	; 0x802673 <g_adc_io_adc5_volt_1000+0x1>
    8094:	8f bf       	out	0x3f, r24	; 63
    8096:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <s_adc_io_adc4_volt_1000.8219>
    809a:	90 91 fc 22 	lds	r25, 0x22FC	; 0x8022fc <s_adc_io_adc4_volt_1000.8219+0x1>
    809e:	68 17       	cp	r22, r24
    80a0:	79 07       	cpc	r23, r25
    80a2:	b9 f0       	breq	.+46     	; 0x80d2 <task_twi2_lcd__cpu3+0x6c>
    80a4:	60 93 fb 22 	sts	0x22FB, r22	; 0x8022fb <s_adc_io_adc4_volt_1000.8219>
    80a8:	70 93 fc 22 	sts	0x22FC, r23	; 0x8022fc <s_adc_io_adc4_volt_1000.8219+0x1>
    80ac:	07 2e       	mov	r0, r23
    80ae:	00 0c       	add	r0, r0
    80b0:	88 0b       	sbc	r24, r24
    80b2:	99 0b       	sbc	r25, r25
    80b4:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    80b8:	20 e0       	ldi	r18, 0x00	; 0
    80ba:	30 e0       	ldi	r19, 0x00	; 0
    80bc:	4a e7       	ldi	r20, 0x7A	; 122
    80be:	54 e4       	ldi	r21, 0x44	; 68
    80c0:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    80c4:	9b 01       	movw	r18, r22
    80c6:	ac 01       	movw	r20, r24
    80c8:	0e e0       	ldi	r16, 0x0E	; 14
    80ca:	12 e3       	ldi	r17, 0x32	; 50
    80cc:	6c e3       	ldi	r22, 0x3C	; 60
    80ce:	8d 2d       	mov	r24, r13
    80d0:	1d d8       	rcall	.-4038   	; 0x710c <task_twi2_lcd_print_format_float_P>
    80d2:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <s_adc_io_adc5_volt_1000.8220>
    80d6:	90 91 fa 22 	lds	r25, 0x22FA	; 0x8022fa <s_adc_io_adc5_volt_1000.8220+0x1>
    80da:	e8 16       	cp	r14, r24
    80dc:	f9 06       	cpc	r15, r25
    80de:	c1 f0       	breq	.+48     	; 0x8110 <task_twi2_lcd__cpu3+0xaa>
    80e0:	e0 92 f9 22 	sts	0x22F9, r14	; 0x8022f9 <s_adc_io_adc5_volt_1000.8220>
    80e4:	f0 92 fa 22 	sts	0x22FA, r15	; 0x8022fa <s_adc_io_adc5_volt_1000.8220+0x1>
    80e8:	b7 01       	movw	r22, r14
    80ea:	ff 0c       	add	r15, r15
    80ec:	88 0b       	sbc	r24, r24
    80ee:	99 0b       	sbc	r25, r25
    80f0:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    80f4:	20 e0       	ldi	r18, 0x00	; 0
    80f6:	30 e0       	ldi	r19, 0x00	; 0
    80f8:	4a e7       	ldi	r20, 0x7A	; 122
    80fa:	54 e4       	ldi	r21, 0x44	; 68
    80fc:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    8100:	9b 01       	movw	r18, r22
    8102:	ac 01       	movw	r20, r24
    8104:	0e e0       	ldi	r16, 0x0E	; 14
    8106:	12 e3       	ldi	r17, 0x32	; 50
    8108:	66 e4       	ldi	r22, 0x46	; 70
    810a:	8d 2d       	mov	r24, r13
    810c:	0e 94 86 38 	call	0x710c	; 0x710c <task_twi2_lcd_print_format_float_P>
    8110:	0f 90       	pop	r0
    8112:	df 91       	pop	r29
    8114:	cf 91       	pop	r28
    8116:	1f 91       	pop	r17
    8118:	0f 91       	pop	r16
    811a:	ff 90       	pop	r15
    811c:	ef 90       	pop	r14
    811e:	df 90       	pop	r13
    8120:	08 95       	ret

00008122 <task_twi2_lcd__hygro>:
    8122:	df 92       	push	r13
    8124:	ef 92       	push	r14
    8126:	ff 92       	push	r15
    8128:	0f 93       	push	r16
    812a:	1f 93       	push	r17
    812c:	cf 93       	push	r28
    812e:	df 93       	push	r29
    8130:	1f 92       	push	r1
    8132:	cd b7       	in	r28, 0x3d	; 61
    8134:	de b7       	in	r29, 0x3e	; 62
    8136:	d8 2e       	mov	r13, r24
    8138:	8f b7       	in	r24, 0x3f	; 63
    813a:	89 83       	std	Y+1, r24	; 0x01
    813c:	f8 94       	cli
    813e:	89 81       	ldd	r24, Y+1	; 0x01
    8140:	60 91 ec 26 	lds	r22, 0x26EC	; 0x8026ec <g_twi1_hygro_T_100>
    8144:	70 91 ed 26 	lds	r23, 0x26ED	; 0x8026ed <g_twi1_hygro_T_100+0x1>
    8148:	e0 90 ea 26 	lds	r14, 0x26EA	; 0x8026ea <g_twi1_hygro_RH_100>
    814c:	f0 90 eb 26 	lds	r15, 0x26EB	; 0x8026eb <g_twi1_hygro_RH_100+0x1>
    8150:	8f bf       	out	0x3f, r24	; 63
    8152:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <s_twi1_hygro_T_100.8227>
    8156:	90 91 f8 22 	lds	r25, 0x22F8	; 0x8022f8 <s_twi1_hygro_T_100.8227+0x1>
    815a:	68 17       	cp	r22, r24
    815c:	79 07       	cpc	r23, r25
    815e:	c1 f0       	breq	.+48     	; 0x8190 <task_twi2_lcd__hygro+0x6e>
    8160:	60 93 f7 22 	sts	0x22F7, r22	; 0x8022f7 <s_twi1_hygro_T_100.8227>
    8164:	70 93 f8 22 	sts	0x22F8, r23	; 0x8022f8 <s_twi1_hygro_T_100.8227+0x1>
    8168:	07 2e       	mov	r0, r23
    816a:	00 0c       	add	r0, r0
    816c:	88 0b       	sbc	r24, r24
    816e:	99 0b       	sbc	r25, r25
    8170:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    8174:	20 e0       	ldi	r18, 0x00	; 0
    8176:	30 e0       	ldi	r19, 0x00	; 0
    8178:	48 ec       	ldi	r20, 0xC8	; 200
    817a:	52 e4       	ldi	r21, 0x42	; 66
    817c:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    8180:	9b 01       	movw	r18, r22
    8182:	ac 01       	movw	r20, r24
    8184:	01 e2       	ldi	r16, 0x21	; 33
    8186:	12 e3       	ldi	r17, 0x32	; 50
    8188:	6e e6       	ldi	r22, 0x6E	; 110
    818a:	8d 2d       	mov	r24, r13
    818c:	0e 94 86 38 	call	0x710c	; 0x710c <task_twi2_lcd_print_format_float_P>
    8190:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <s_twi1_hygro_RH_100.8228>
    8194:	90 91 f6 22 	lds	r25, 0x22F6	; 0x8022f6 <s_twi1_hygro_RH_100.8228+0x1>
    8198:	e8 16       	cp	r14, r24
    819a:	f9 06       	cpc	r15, r25
    819c:	c1 f0       	breq	.+48     	; 0x81ce <task_twi2_lcd__hygro+0xac>
    819e:	e0 92 f5 22 	sts	0x22F5, r14	; 0x8022f5 <s_twi1_hygro_RH_100.8228>
    81a2:	f0 92 f6 22 	sts	0x22F6, r15	; 0x8022f6 <s_twi1_hygro_RH_100.8228+0x1>
    81a6:	b7 01       	movw	r22, r14
    81a8:	ff 0c       	add	r15, r15
    81aa:	88 0b       	sbc	r24, r24
    81ac:	99 0b       	sbc	r25, r25
    81ae:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    81b2:	20 e0       	ldi	r18, 0x00	; 0
    81b4:	30 e0       	ldi	r19, 0x00	; 0
    81b6:	48 ec       	ldi	r20, 0xC8	; 200
    81b8:	52 e4       	ldi	r21, 0x42	; 66
    81ba:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    81be:	9b 01       	movw	r18, r22
    81c0:	ac 01       	movw	r20, r24
    81c2:	01 e2       	ldi	r16, 0x21	; 33
    81c4:	12 e3       	ldi	r17, 0x32	; 50
    81c6:	68 e7       	ldi	r22, 0x78	; 120
    81c8:	8d 2d       	mov	r24, r13
    81ca:	0e 94 86 38 	call	0x710c	; 0x710c <task_twi2_lcd_print_format_float_P>
    81ce:	0f 90       	pop	r0
    81d0:	df 91       	pop	r29
    81d2:	cf 91       	pop	r28
    81d4:	1f 91       	pop	r17
    81d6:	0f 91       	pop	r16
    81d8:	ff 90       	pop	r15
    81da:	ef 90       	pop	r14
    81dc:	df 90       	pop	r13
    81de:	08 95       	ret

000081e0 <task_twi2_lcd__gyro_gfxmag>:
    81e0:	2f 92       	push	r2
    81e2:	3f 92       	push	r3
    81e4:	4f 92       	push	r4
    81e6:	5f 92       	push	r5
    81e8:	6f 92       	push	r6
    81ea:	7f 92       	push	r7
    81ec:	8f 92       	push	r8
    81ee:	9f 92       	push	r9
    81f0:	af 92       	push	r10
    81f2:	bf 92       	push	r11
    81f4:	cf 92       	push	r12
    81f6:	df 92       	push	r13
    81f8:	ef 92       	push	r14
    81fa:	ff 92       	push	r15
    81fc:	0f 93       	push	r16
    81fe:	1f 93       	push	r17
    8200:	cf 93       	push	r28
    8202:	df 93       	push	r29
    8204:	cd b7       	in	r28, 0x3d	; 61
    8206:	de b7       	in	r29, 0x3e	; 62
    8208:	2d 97       	sbiw	r28, 0x0d	; 13
    820a:	cd bf       	out	0x3d, r28	; 61
    820c:	de bf       	out	0x3e, r29	; 62
    820e:	8f b7       	in	r24, 0x3f	; 63
    8210:	89 83       	std	Y+1, r24	; 0x01
    8212:	f8 94       	cli
    8214:	89 81       	ldd	r24, Y+1	; 0x01
    8216:	80 90 1f 27 	lds	r8, 0x271F	; 0x80271f <g_twi1_gyro_2_mag_x_nT>
    821a:	90 90 20 27 	lds	r9, 0x2720	; 0x802720 <g_twi1_gyro_2_mag_x_nT+0x1>
    821e:	a0 90 21 27 	lds	r10, 0x2721	; 0x802721 <g_twi1_gyro_2_mag_x_nT+0x2>
    8222:	b0 90 22 27 	lds	r11, 0x2722	; 0x802722 <g_twi1_gyro_2_mag_x_nT+0x3>
    8226:	40 90 1b 27 	lds	r4, 0x271B	; 0x80271b <g_twi1_gyro_2_mag_y_nT>
    822a:	50 90 1c 27 	lds	r5, 0x271C	; 0x80271c <g_twi1_gyro_2_mag_y_nT+0x1>
    822e:	60 90 1d 27 	lds	r6, 0x271D	; 0x80271d <g_twi1_gyro_2_mag_y_nT+0x2>
    8232:	70 90 1e 27 	lds	r7, 0x271E	; 0x80271e <g_twi1_gyro_2_mag_y_nT+0x3>
    8236:	20 91 17 27 	lds	r18, 0x2717	; 0x802717 <g_twi1_gyro_2_mag_z_nT>
    823a:	30 91 18 27 	lds	r19, 0x2718	; 0x802718 <g_twi1_gyro_2_mag_z_nT+0x1>
    823e:	40 91 19 27 	lds	r20, 0x2719	; 0x802719 <g_twi1_gyro_2_mag_z_nT+0x2>
    8242:	50 91 1a 27 	lds	r21, 0x271A	; 0x80271a <g_twi1_gyro_2_mag_z_nT+0x3>
    8246:	2a 87       	std	Y+10, r18	; 0x0a
    8248:	3b 87       	std	Y+11, r19	; 0x0b
    824a:	4c 87       	std	Y+12, r20	; 0x0c
    824c:	5d 87       	std	Y+13, r21	; 0x0d
    824e:	8f bf       	out	0x3f, r24	; 63
    8250:	80 91 f1 22 	lds	r24, 0x22F1	; 0x8022f1 <s_twi1_gyro_2_mag_x_nT.8239>
    8254:	90 91 f2 22 	lds	r25, 0x22F2	; 0x8022f2 <s_twi1_gyro_2_mag_x_nT.8239+0x1>
    8258:	a0 91 f3 22 	lds	r26, 0x22F3	; 0x8022f3 <s_twi1_gyro_2_mag_x_nT.8239+0x2>
    825c:	b0 91 f4 22 	lds	r27, 0x22F4	; 0x8022f4 <s_twi1_gyro_2_mag_x_nT.8239+0x3>
    8260:	88 16       	cp	r8, r24
    8262:	99 06       	cpc	r9, r25
    8264:	aa 06       	cpc	r10, r26
    8266:	bb 06       	cpc	r11, r27
    8268:	d9 f4       	brne	.+54     	; 0x82a0 <task_twi2_lcd__gyro_gfxmag+0xc0>
    826a:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <s_twi1_gyro_2_mag_y_nT.8240>
    826e:	90 91 ee 22 	lds	r25, 0x22EE	; 0x8022ee <s_twi1_gyro_2_mag_y_nT.8240+0x1>
    8272:	a0 91 ef 22 	lds	r26, 0x22EF	; 0x8022ef <s_twi1_gyro_2_mag_y_nT.8240+0x2>
    8276:	b0 91 f0 22 	lds	r27, 0x22F0	; 0x8022f0 <s_twi1_gyro_2_mag_y_nT.8240+0x3>
    827a:	48 16       	cp	r4, r24
    827c:	59 06       	cpc	r5, r25
    827e:	6a 06       	cpc	r6, r26
    8280:	7b 06       	cpc	r7, r27
    8282:	71 f4       	brne	.+28     	; 0x82a0 <task_twi2_lcd__gyro_gfxmag+0xc0>
    8284:	80 91 e9 22 	lds	r24, 0x22E9	; 0x8022e9 <s_twi1_gyro_2_mag_z_nT.8241>
    8288:	90 91 ea 22 	lds	r25, 0x22EA	; 0x8022ea <s_twi1_gyro_2_mag_z_nT.8241+0x1>
    828c:	a0 91 eb 22 	lds	r26, 0x22EB	; 0x8022eb <s_twi1_gyro_2_mag_z_nT.8241+0x2>
    8290:	b0 91 ec 22 	lds	r27, 0x22EC	; 0x8022ec <s_twi1_gyro_2_mag_z_nT.8241+0x3>
    8294:	28 17       	cp	r18, r24
    8296:	39 07       	cpc	r19, r25
    8298:	4a 07       	cpc	r20, r26
    829a:	5b 07       	cpc	r21, r27
    829c:	09 f4       	brne	.+2      	; 0x82a0 <task_twi2_lcd__gyro_gfxmag+0xc0>
    829e:	91 c1       	rjmp	.+802    	; 0x85c2 <task_twi2_lcd__gyro_gfxmag+0x3e2>
    82a0:	80 92 f1 22 	sts	0x22F1, r8	; 0x8022f1 <s_twi1_gyro_2_mag_x_nT.8239>
    82a4:	90 92 f2 22 	sts	0x22F2, r9	; 0x8022f2 <s_twi1_gyro_2_mag_x_nT.8239+0x1>
    82a8:	a0 92 f3 22 	sts	0x22F3, r10	; 0x8022f3 <s_twi1_gyro_2_mag_x_nT.8239+0x2>
    82ac:	b0 92 f4 22 	sts	0x22F4, r11	; 0x8022f4 <s_twi1_gyro_2_mag_x_nT.8239+0x3>
    82b0:	40 92 ed 22 	sts	0x22ED, r4	; 0x8022ed <s_twi1_gyro_2_mag_y_nT.8240>
    82b4:	50 92 ee 22 	sts	0x22EE, r5	; 0x8022ee <s_twi1_gyro_2_mag_y_nT.8240+0x1>
    82b8:	60 92 ef 22 	sts	0x22EF, r6	; 0x8022ef <s_twi1_gyro_2_mag_y_nT.8240+0x2>
    82bc:	70 92 f0 22 	sts	0x22F0, r7	; 0x8022f0 <s_twi1_gyro_2_mag_y_nT.8240+0x3>
    82c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    82c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    82c4:	ac 85       	ldd	r26, Y+12	; 0x0c
    82c6:	bd 85       	ldd	r27, Y+13	; 0x0d
    82c8:	80 93 e9 22 	sts	0x22E9, r24	; 0x8022e9 <s_twi1_gyro_2_mag_z_nT.8241>
    82cc:	90 93 ea 22 	sts	0x22EA, r25	; 0x8022ea <s_twi1_gyro_2_mag_z_nT.8241+0x1>
    82d0:	a0 93 eb 22 	sts	0x22EB, r26	; 0x8022eb <s_twi1_gyro_2_mag_z_nT.8241+0x2>
    82d4:	b0 93 ec 22 	sts	0x22EC, r27	; 0x8022ec <s_twi1_gyro_2_mag_z_nT.8241+0x3>
    82d8:	20 e0       	ldi	r18, 0x00	; 0
    82da:	30 e8       	ldi	r19, 0x80	; 128
    82dc:	4b e3       	ldi	r20, 0x3B	; 59
    82de:	55 e4       	ldi	r21, 0x45	; 69
    82e0:	60 91 e5 22 	lds	r22, 0x22E5	; 0x8022e5 <s_length.8242>
    82e4:	70 91 e6 22 	lds	r23, 0x22E6	; 0x8022e6 <s_length.8242+0x1>
    82e8:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <s_length.8242+0x2>
    82ec:	90 91 e8 22 	lds	r25, 0x22E8	; 0x8022e8 <s_length.8242+0x3>
    82f0:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    82f4:	6b 01       	movw	r12, r22
    82f6:	7c 01       	movw	r14, r24
    82f8:	0e 94 47 84 	call	0x1088e	; 0x1088e <__fixunssfsi>
    82fc:	16 2f       	mov	r17, r22
    82fe:	a7 01       	movw	r20, r14
    8300:	96 01       	movw	r18, r12
    8302:	60 e0       	ldi	r22, 0x00	; 0
    8304:	70 e0       	ldi	r23, 0x00	; 0
    8306:	80 e8       	ldi	r24, 0x80	; 128
    8308:	92 e4       	ldi	r25, 0x42	; 66
    830a:	0e 94 6e 83 	call	0x106dc	; 0x106dc <__subsf3>
    830e:	0e 94 47 84 	call	0x1088e	; 0x1088e <__fixunssfsi>
    8312:	e1 2c       	mov	r14, r1
    8314:	01 e0       	ldi	r16, 0x01	; 1
    8316:	21 2f       	mov	r18, r17
    8318:	43 e0       	ldi	r20, 0x03	; 3
    831a:	82 e7       	ldi	r24, 0x72	; 114
    831c:	04 da       	rcall	.-3064   	; 0x7726 <task_twi2_lcd_rect>
    831e:	20 91 e4 22 	lds	r18, 0x22E4	; 0x8022e4 <s_p1y.8244>
    8322:	28 5d       	subi	r18, 0xD8	; 216
    8324:	40 91 e3 22 	lds	r20, 0x22E3	; 0x8022e3 <s_p1x.8243>
    8328:	4a 56       	subi	r20, 0x6A	; 106
    832a:	00 e0       	ldi	r16, 0x00	; 0
    832c:	68 e2       	ldi	r22, 0x28	; 40
    832e:	86 e9       	ldi	r24, 0x96	; 150
    8330:	d2 d9       	rcall	.-3164   	; 0x76d6 <task_twi2_lcd_line>
    8332:	20 91 e2 22 	lds	r18, 0x22E2	; 0x8022e2 <s_p2y.8246>
    8336:	28 5d       	subi	r18, 0xD8	; 216
    8338:	40 91 e1 22 	lds	r20, 0x22E1	; 0x8022e1 <s_p2x.8245>
    833c:	4a 56       	subi	r20, 0x6A	; 106
    833e:	60 91 e4 22 	lds	r22, 0x22E4	; 0x8022e4 <s_p1y.8244>
    8342:	68 5d       	subi	r22, 0xD8	; 216
    8344:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <s_p1x.8243>
    8348:	8a 56       	subi	r24, 0x6A	; 106
    834a:	c5 d9       	rcall	.-3190   	; 0x76d6 <task_twi2_lcd_line>
    834c:	20 91 e0 22 	lds	r18, 0x22E0	; 0x8022e0 <s_p3y.8248>
    8350:	28 5d       	subi	r18, 0xD8	; 216
    8352:	40 91 df 22 	lds	r20, 0x22DF	; 0x8022df <s_p3x.8247>
    8356:	4a 56       	subi	r20, 0x6A	; 106
    8358:	60 91 e2 22 	lds	r22, 0x22E2	; 0x8022e2 <s_p2y.8246>
    835c:	68 5d       	subi	r22, 0xD8	; 216
    835e:	80 91 e1 22 	lds	r24, 0x22E1	; 0x8022e1 <s_p2x.8245>
    8362:	8a 56       	subi	r24, 0x6A	; 106
    8364:	b8 d9       	rcall	.-3216   	; 0x76d6 <task_twi2_lcd_line>
    8366:	01 e0       	ldi	r16, 0x01	; 1
    8368:	21 e0       	ldi	r18, 0x01	; 1
    836a:	41 e0       	ldi	r20, 0x01	; 1
    836c:	68 e2       	ldi	r22, 0x28	; 40
    836e:	86 e9       	ldi	r24, 0x96	; 150
    8370:	08 da       	rcall	.-3056   	; 0x7782 <task_twi2_lcd_circ>
    8372:	c5 01       	movw	r24, r10
    8374:	b4 01       	movw	r22, r8
    8376:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    837a:	6a 83       	std	Y+2, r22	; 0x02
    837c:	7b 83       	std	Y+3, r23	; 0x03
    837e:	8c 83       	std	Y+4, r24	; 0x04
    8380:	9d 83       	std	Y+5, r25	; 0x05
    8382:	c3 01       	movw	r24, r6
    8384:	b2 01       	movw	r22, r4
    8386:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    838a:	6e 83       	std	Y+6, r22	; 0x06
    838c:	7f 83       	std	Y+7, r23	; 0x07
    838e:	88 87       	std	Y+8, r24	; 0x08
    8390:	99 87       	std	Y+9, r25	; 0x09
    8392:	6a 85       	ldd	r22, Y+10	; 0x0a
    8394:	7b 85       	ldd	r23, Y+11	; 0x0b
    8396:	8c 85       	ldd	r24, Y+12	; 0x0c
    8398:	9d 85       	ldd	r25, Y+13	; 0x0d
    839a:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    839e:	6b 01       	movw	r12, r22
    83a0:	7c 01       	movw	r14, r24
    83a2:	2a 81       	ldd	r18, Y+2	; 0x02
    83a4:	3b 81       	ldd	r19, Y+3	; 0x03
    83a6:	4c 81       	ldd	r20, Y+4	; 0x04
    83a8:	5d 81       	ldd	r21, Y+5	; 0x05
    83aa:	ca 01       	movw	r24, r20
    83ac:	b9 01       	movw	r22, r18
    83ae:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    83b2:	4b 01       	movw	r8, r22
    83b4:	5c 01       	movw	r10, r24
    83b6:	2e 81       	ldd	r18, Y+6	; 0x06
    83b8:	3f 81       	ldd	r19, Y+7	; 0x07
    83ba:	48 85       	ldd	r20, Y+8	; 0x08
    83bc:	59 85       	ldd	r21, Y+9	; 0x09
    83be:	ca 01       	movw	r24, r20
    83c0:	b9 01       	movw	r22, r18
    83c2:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    83c6:	9b 01       	movw	r18, r22
    83c8:	ac 01       	movw	r20, r24
    83ca:	c5 01       	movw	r24, r10
    83cc:	b4 01       	movw	r22, r8
    83ce:	0e 94 6f 83 	call	0x106de	; 0x106de <__addsf3>
    83d2:	4b 01       	movw	r8, r22
    83d4:	5c 01       	movw	r10, r24
    83d6:	a7 01       	movw	r20, r14
    83d8:	96 01       	movw	r18, r12
    83da:	c7 01       	movw	r24, r14
    83dc:	b6 01       	movw	r22, r12
    83de:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    83e2:	9b 01       	movw	r18, r22
    83e4:	ac 01       	movw	r20, r24
    83e6:	c5 01       	movw	r24, r10
    83e8:	b4 01       	movw	r22, r8
    83ea:	0e 94 6f 83 	call	0x106de	; 0x106de <__addsf3>
    83ee:	20 e0       	ldi	r18, 0x00	; 0
    83f0:	30 e0       	ldi	r19, 0x00	; 0
    83f2:	40 e0       	ldi	r20, 0x00	; 0
    83f4:	5f e3       	ldi	r21, 0x3F	; 63
    83f6:	0e 94 c5 85 	call	0x10b8a	; 0x10b8a <pow>
    83fa:	96 2e       	mov	r9, r22
    83fc:	a7 2e       	mov	r10, r23
    83fe:	78 2e       	mov	r7, r24
    8400:	69 2e       	mov	r6, r25
    8402:	20 e0       	ldi	r18, 0x00	; 0
    8404:	30 e0       	ldi	r19, 0x00	; 0
    8406:	a9 01       	movw	r20, r18
    8408:	0e 94 d3 83 	call	0x107a6	; 0x107a6 <__cmpsf2>
    840c:	81 11       	cpse	r24, r1
    840e:	09 c0       	rjmp	.+18     	; 0x8422 <task_twi2_lcd__gyro_gfxmag+0x242>
    8410:	91 2c       	mov	r9, r1
    8412:	a1 2c       	mov	r10, r1
    8414:	68 94       	set
    8416:	77 24       	eor	r7, r7
    8418:	77 f8       	bld	r7, 7
    841a:	0f 2e       	mov	r0, r31
    841c:	ff e3       	ldi	r31, 0x3F	; 63
    841e:	6f 2e       	mov	r6, r31
    8420:	f0 2d       	mov	r31, r0
    8422:	29 2d       	mov	r18, r9
    8424:	3a 2d       	mov	r19, r10
    8426:	47 2d       	mov	r20, r7
    8428:	56 2d       	mov	r21, r6
    842a:	6a 81       	ldd	r22, Y+2	; 0x02
    842c:	7b 81       	ldd	r23, Y+3	; 0x03
    842e:	8c 81       	ldd	r24, Y+4	; 0x04
    8430:	9d 81       	ldd	r25, Y+5	; 0x05
    8432:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    8436:	20 e0       	ldi	r18, 0x00	; 0
    8438:	30 e0       	ldi	r19, 0x00	; 0
    843a:	48 e4       	ldi	r20, 0x48	; 72
    843c:	51 e4       	ldi	r21, 0x41	; 65
    843e:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8442:	1b 01       	movw	r2, r22
    8444:	2c 01       	movw	r4, r24
    8446:	0e 94 47 84 	call	0x1088e	; 0x1088e <__fixunssfsi>
    844a:	86 2e       	mov	r8, r22
    844c:	c2 01       	movw	r24, r4
    844e:	b1 01       	movw	r22, r2
    8450:	90 58       	subi	r25, 0x80	; 128
    8452:	0e 94 47 84 	call	0x1088e	; 0x1088e <__fixunssfsi>
    8456:	16 2f       	mov	r17, r22
    8458:	29 2d       	mov	r18, r9
    845a:	3a 2d       	mov	r19, r10
    845c:	47 2d       	mov	r20, r7
    845e:	56 2d       	mov	r21, r6
    8460:	6e 81       	ldd	r22, Y+6	; 0x06
    8462:	7f 81       	ldd	r23, Y+7	; 0x07
    8464:	88 85       	ldd	r24, Y+8	; 0x08
    8466:	99 85       	ldd	r25, Y+9	; 0x09
    8468:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    846c:	20 e0       	ldi	r18, 0x00	; 0
    846e:	30 e0       	ldi	r19, 0x00	; 0
    8470:	48 ec       	ldi	r20, 0xC8	; 200
    8472:	51 e4       	ldi	r21, 0x41	; 65
    8474:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8478:	1b 01       	movw	r2, r22
    847a:	2c 01       	movw	r4, r24
    847c:	68 2d       	mov	r22, r8
    847e:	70 e0       	ldi	r23, 0x00	; 0
    8480:	80 e0       	ldi	r24, 0x00	; 0
    8482:	90 e0       	ldi	r25, 0x00	; 0
    8484:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    8488:	9b 01       	movw	r18, r22
    848a:	ac 01       	movw	r20, r24
    848c:	c2 01       	movw	r24, r4
    848e:	b1 01       	movw	r22, r2
    8490:	0e 94 6f 83 	call	0x106de	; 0x106de <__addsf3>
    8494:	0e 94 47 84 	call	0x1088e	; 0x1088e <__fixunssfsi>
    8498:	b6 2e       	mov	r11, r22
    849a:	29 2d       	mov	r18, r9
    849c:	3a 2d       	mov	r19, r10
    849e:	47 2d       	mov	r20, r7
    84a0:	56 2d       	mov	r21, r6
    84a2:	c7 01       	movw	r24, r14
    84a4:	b6 01       	movw	r22, r12
    84a6:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    84aa:	20 e0       	ldi	r18, 0x00	; 0
    84ac:	30 e0       	ldi	r19, 0x00	; 0
    84ae:	48 ec       	ldi	r20, 0xC8	; 200
    84b0:	51 e4       	ldi	r21, 0x41	; 65
    84b2:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    84b6:	6b 01       	movw	r12, r22
    84b8:	7c 01       	movw	r14, r24
    84ba:	61 2f       	mov	r22, r17
    84bc:	70 e0       	ldi	r23, 0x00	; 0
    84be:	80 e0       	ldi	r24, 0x00	; 0
    84c0:	90 e0       	ldi	r25, 0x00	; 0
    84c2:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    84c6:	9b 01       	movw	r18, r22
    84c8:	ac 01       	movw	r20, r24
    84ca:	c7 01       	movw	r24, r14
    84cc:	b6 01       	movw	r22, r12
    84ce:	0e 94 6f 83 	call	0x106de	; 0x106de <__addsf3>
    84d2:	0e 94 47 84 	call	0x1088e	; 0x1088e <__fixunssfsi>
    84d6:	f6 2e       	mov	r15, r22
    84d8:	20 e0       	ldi	r18, 0x00	; 0
    84da:	30 e5       	ldi	r19, 0x50	; 80
    84dc:	43 ec       	ldi	r20, 0xC3	; 195
    84de:	57 e4       	ldi	r21, 0x47	; 71
    84e0:	69 2d       	mov	r22, r9
    84e2:	7a 2d       	mov	r23, r10
    84e4:	87 2d       	mov	r24, r7
    84e6:	96 2d       	mov	r25, r6
    84e8:	0e 94 5e 85 	call	0x10abc	; 0x10abc <__gesf2>
    84ec:	18 16       	cp	r1, r24
    84ee:	6c f4       	brge	.+26     	; 0x850a <task_twi2_lcd__gyro_gfxmag+0x32a>
    84f0:	91 2c       	mov	r9, r1
    84f2:	0f 2e       	mov	r0, r31
    84f4:	f0 e5       	ldi	r31, 0x50	; 80
    84f6:	af 2e       	mov	r10, r31
    84f8:	f0 2d       	mov	r31, r0
    84fa:	0f 2e       	mov	r0, r31
    84fc:	f3 ec       	ldi	r31, 0xC3	; 195
    84fe:	7f 2e       	mov	r7, r31
    8500:	f0 2d       	mov	r31, r0
    8502:	0f 2e       	mov	r0, r31
    8504:	f7 e4       	ldi	r31, 0x47	; 71
    8506:	6f 2e       	mov	r6, r31
    8508:	f0 2d       	mov	r31, r0
    850a:	01 e0       	ldi	r16, 0x01	; 1
    850c:	20 e0       	ldi	r18, 0x00	; 0
    850e:	42 e0       	ldi	r20, 0x02	; 2
    8510:	60 e4       	ldi	r22, 0x40	; 64
    8512:	83 e7       	ldi	r24, 0x73	; 115
    8514:	36 d9       	rcall	.-3476   	; 0x7782 <task_twi2_lcd_circ>
    8516:	20 e0       	ldi	r18, 0x00	; 0
    8518:	30 e8       	ldi	r19, 0x80	; 128
    851a:	4b e3       	ldi	r20, 0x3B	; 59
    851c:	55 e4       	ldi	r21, 0x45	; 69
    851e:	69 2d       	mov	r22, r9
    8520:	7a 2d       	mov	r23, r10
    8522:	87 2d       	mov	r24, r7
    8524:	96 2d       	mov	r25, r6
    8526:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    852a:	1b 01       	movw	r2, r22
    852c:	2c 01       	movw	r4, r24
    852e:	0e 94 47 84 	call	0x1088e	; 0x1088e <__fixunssfsi>
    8532:	d6 2e       	mov	r13, r22
    8534:	a2 01       	movw	r20, r4
    8536:	91 01       	movw	r18, r2
    8538:	60 e0       	ldi	r22, 0x00	; 0
    853a:	70 e0       	ldi	r23, 0x00	; 0
    853c:	80 e8       	ldi	r24, 0x80	; 128
    853e:	92 e4       	ldi	r25, 0x42	; 66
    8540:	0e 94 6e 83 	call	0x106dc	; 0x106dc <__subsf3>
    8544:	0e 94 47 84 	call	0x1088e	; 0x1088e <__fixunssfsi>
    8548:	ee 24       	eor	r14, r14
    854a:	e3 94       	inc	r14
    854c:	2d 2d       	mov	r18, r13
    854e:	43 e0       	ldi	r20, 0x03	; 3
    8550:	82 e7       	ldi	r24, 0x72	; 114
    8552:	e9 d8       	rcall	.-3630   	; 0x7726 <task_twi2_lcd_rect>
    8554:	0f 2e       	mov	r0, r31
    8556:	f8 e2       	ldi	r31, 0x28	; 40
    8558:	ef 2e       	mov	r14, r31
    855a:	f0 2d       	mov	r31, r0
    855c:	e1 0e       	add	r14, r17
    855e:	0f 2e       	mov	r0, r31
    8560:	f6 e9       	ldi	r31, 0x96	; 150
    8562:	cf 2e       	mov	r12, r31
    8564:	f0 2d       	mov	r31, r0
    8566:	c8 0c       	add	r12, r8
    8568:	2e 2d       	mov	r18, r14
    856a:	4c 2d       	mov	r20, r12
    856c:	68 e2       	ldi	r22, 0x28	; 40
    856e:	86 e9       	ldi	r24, 0x96	; 150
    8570:	b2 d8       	rcall	.-3740   	; 0x76d6 <task_twi2_lcd_line>
    8572:	0f 2e       	mov	r0, r31
    8574:	f6 e9       	ldi	r31, 0x96	; 150
    8576:	df 2e       	mov	r13, r31
    8578:	f0 2d       	mov	r31, r0
    857a:	db 0c       	add	r13, r11
    857c:	2e 2d       	mov	r18, r14
    857e:	4d 2d       	mov	r20, r13
    8580:	6e 2d       	mov	r22, r14
    8582:	8c 2d       	mov	r24, r12
    8584:	a8 d8       	rcall	.-3760   	; 0x76d6 <task_twi2_lcd_line>
    8586:	28 e2       	ldi	r18, 0x28	; 40
    8588:	2f 0d       	add	r18, r15
    858a:	4d 2d       	mov	r20, r13
    858c:	6e 2d       	mov	r22, r14
    858e:	8d 2d       	mov	r24, r13
    8590:	a2 d8       	rcall	.-3772   	; 0x76d6 <task_twi2_lcd_line>
    8592:	89 2d       	mov	r24, r9
    8594:	9a 2d       	mov	r25, r10
    8596:	a7 2d       	mov	r26, r7
    8598:	b6 2d       	mov	r27, r6
    859a:	80 93 e5 22 	sts	0x22E5, r24	; 0x8022e5 <s_length.8242>
    859e:	90 93 e6 22 	sts	0x22E6, r25	; 0x8022e6 <s_length.8242+0x1>
    85a2:	a0 93 e7 22 	sts	0x22E7, r26	; 0x8022e7 <s_length.8242+0x2>
    85a6:	b0 93 e8 22 	sts	0x22E8, r27	; 0x8022e8 <s_length.8242+0x3>
    85aa:	80 92 e3 22 	sts	0x22E3, r8	; 0x8022e3 <s_p1x.8243>
    85ae:	10 93 e4 22 	sts	0x22E4, r17	; 0x8022e4 <s_p1y.8244>
    85b2:	b0 92 e1 22 	sts	0x22E1, r11	; 0x8022e1 <s_p2x.8245>
    85b6:	10 93 e2 22 	sts	0x22E2, r17	; 0x8022e2 <s_p2y.8246>
    85ba:	b0 92 df 22 	sts	0x22DF, r11	; 0x8022df <s_p3x.8247>
    85be:	f0 92 e0 22 	sts	0x22E0, r15	; 0x8022e0 <s_p3y.8248>
    85c2:	2d 96       	adiw	r28, 0x0d	; 13
    85c4:	cd bf       	out	0x3d, r28	; 61
    85c6:	de bf       	out	0x3e, r29	; 62
    85c8:	df 91       	pop	r29
    85ca:	cf 91       	pop	r28
    85cc:	1f 91       	pop	r17
    85ce:	0f 91       	pop	r16
    85d0:	ff 90       	pop	r15
    85d2:	ef 90       	pop	r14
    85d4:	df 90       	pop	r13
    85d6:	cf 90       	pop	r12
    85d8:	bf 90       	pop	r11
    85da:	af 90       	pop	r10
    85dc:	9f 90       	pop	r9
    85de:	8f 90       	pop	r8
    85e0:	7f 90       	pop	r7
    85e2:	6f 90       	pop	r6
    85e4:	5f 90       	pop	r5
    85e6:	4f 90       	pop	r4
    85e8:	3f 90       	pop	r3
    85ea:	2f 90       	pop	r2
    85ec:	08 95       	ret

000085ee <task_twi2_lcd__gyro_gfxaccel>:
    85ee:	6f 92       	push	r6
    85f0:	7f 92       	push	r7
    85f2:	8f 92       	push	r8
    85f4:	9f 92       	push	r9
    85f6:	af 92       	push	r10
    85f8:	bf 92       	push	r11
    85fa:	cf 92       	push	r12
    85fc:	df 92       	push	r13
    85fe:	ef 92       	push	r14
    8600:	ff 92       	push	r15
    8602:	0f 93       	push	r16
    8604:	1f 93       	push	r17
    8606:	cf 93       	push	r28
    8608:	df 93       	push	r29
    860a:	1f 92       	push	r1
    860c:	cd b7       	in	r28, 0x3d	; 61
    860e:	de b7       	in	r29, 0x3e	; 62
    8610:	8f b7       	in	r24, 0x3f	; 63
    8612:	89 83       	std	Y+1, r24	; 0x01
    8614:	f8 94       	cli
    8616:	89 81       	ldd	r24, Y+1	; 0x01
    8618:	c0 90 57 27 	lds	r12, 0x2757	; 0x802757 <g_twi1_gyro_1_accel_x_mg>
    861c:	d0 90 58 27 	lds	r13, 0x2758	; 0x802758 <g_twi1_gyro_1_accel_x_mg+0x1>
    8620:	a0 90 55 27 	lds	r10, 0x2755	; 0x802755 <g_twi1_gyro_1_accel_y_mg>
    8624:	b0 90 56 27 	lds	r11, 0x2756	; 0x802756 <g_twi1_gyro_1_accel_y_mg+0x1>
    8628:	e0 90 53 27 	lds	r14, 0x2753	; 0x802753 <g_twi1_gyro_1_accel_z_mg>
    862c:	f0 90 54 27 	lds	r15, 0x2754	; 0x802754 <g_twi1_gyro_1_accel_z_mg+0x1>
    8630:	80 90 9c 28 	lds	r8, 0x289C	; 0x80289c <g_backlight_mode_pwm>
    8634:	90 90 9d 28 	lds	r9, 0x289D	; 0x80289d <g_backlight_mode_pwm+0x1>
    8638:	8f bf       	out	0x3f, r24	; 63
    863a:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <s_twi1_gyro_1_accel_x_mg.8268>
    863e:	90 91 de 22 	lds	r25, 0x22DE	; 0x8022de <s_twi1_gyro_1_accel_x_mg.8268+0x1>
    8642:	c8 16       	cp	r12, r24
    8644:	d9 06       	cpc	r13, r25
    8646:	79 f4       	brne	.+30     	; 0x8666 <task_twi2_lcd__gyro_gfxaccel+0x78>
    8648:	80 91 db 22 	lds	r24, 0x22DB	; 0x8022db <s_twi1_gyro_1_accel_y_mg.8269>
    864c:	90 91 dc 22 	lds	r25, 0x22DC	; 0x8022dc <s_twi1_gyro_1_accel_y_mg.8269+0x1>
    8650:	a8 16       	cp	r10, r24
    8652:	b9 06       	cpc	r11, r25
    8654:	41 f4       	brne	.+16     	; 0x8666 <task_twi2_lcd__gyro_gfxaccel+0x78>
    8656:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <s_twi1_gyro_1_accel_z_mg.8270>
    865a:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <s_twi1_gyro_1_accel_z_mg.8270+0x1>
    865e:	e8 16       	cp	r14, r24
    8660:	f9 06       	cpc	r15, r25
    8662:	09 f4       	brne	.+2      	; 0x8666 <task_twi2_lcd__gyro_gfxaccel+0x78>
    8664:	a2 c0       	rjmp	.+324    	; 0x87aa <task_twi2_lcd__gyro_gfxaccel+0x1bc>
    8666:	c0 92 dd 22 	sts	0x22DD, r12	; 0x8022dd <s_twi1_gyro_1_accel_x_mg.8268>
    866a:	d0 92 de 22 	sts	0x22DE, r13	; 0x8022de <s_twi1_gyro_1_accel_x_mg.8268+0x1>
    866e:	a0 92 db 22 	sts	0x22DB, r10	; 0x8022db <s_twi1_gyro_1_accel_y_mg.8269>
    8672:	b0 92 dc 22 	sts	0x22DC, r11	; 0x8022dc <s_twi1_gyro_1_accel_y_mg.8269+0x1>
    8676:	e0 92 d9 22 	sts	0x22D9, r14	; 0x8022d9 <s_twi1_gyro_1_accel_z_mg.8270>
    867a:	f0 92 da 22 	sts	0x22DA, r15	; 0x8022da <s_twi1_gyro_1_accel_z_mg.8270+0x1>
    867e:	20 91 d8 22 	lds	r18, 0x22D8	; 0x8022d8 <s_p1y.8272>
    8682:	28 5d       	subi	r18, 0xD8	; 216
    8684:	40 91 d7 22 	lds	r20, 0x22D7	; 0x8022d7 <s_p1x.8271>
    8688:	4e 52       	subi	r20, 0x2E	; 46
    868a:	00 e0       	ldi	r16, 0x00	; 0
    868c:	68 e2       	ldi	r22, 0x28	; 40
    868e:	82 ed       	ldi	r24, 0xD2	; 210
    8690:	22 d8       	rcall	.-4028   	; 0x76d6 <task_twi2_lcd_line>
    8692:	20 91 d6 22 	lds	r18, 0x22D6	; 0x8022d6 <s_p2y.8274>
    8696:	28 5d       	subi	r18, 0xD8	; 216
    8698:	40 91 d5 22 	lds	r20, 0x22D5	; 0x8022d5 <s_p2x.8273>
    869c:	4e 52       	subi	r20, 0x2E	; 46
    869e:	60 91 d8 22 	lds	r22, 0x22D8	; 0x8022d8 <s_p1y.8272>
    86a2:	68 5d       	subi	r22, 0xD8	; 216
    86a4:	80 91 d7 22 	lds	r24, 0x22D7	; 0x8022d7 <s_p1x.8271>
    86a8:	8e 52       	subi	r24, 0x2E	; 46
    86aa:	15 d8       	rcall	.-4054   	; 0x76d6 <task_twi2_lcd_line>
    86ac:	20 91 d4 22 	lds	r18, 0x22D4	; 0x8022d4 <s_p3y.8276>
    86b0:	28 5d       	subi	r18, 0xD8	; 216
    86b2:	40 91 d3 22 	lds	r20, 0x22D3	; 0x8022d3 <s_p3x.8275>
    86b6:	4e 52       	subi	r20, 0x2E	; 46
    86b8:	60 91 d6 22 	lds	r22, 0x22D6	; 0x8022d6 <s_p2y.8274>
    86bc:	68 5d       	subi	r22, 0xD8	; 216
    86be:	80 91 d5 22 	lds	r24, 0x22D5	; 0x8022d5 <s_p2x.8273>
    86c2:	8e 52       	subi	r24, 0x2E	; 46
    86c4:	08 d8       	rcall	.-4080   	; 0x76d6 <task_twi2_lcd_line>
    86c6:	01 e0       	ldi	r16, 0x01	; 1
    86c8:	21 e0       	ldi	r18, 0x01	; 1
    86ca:	41 e0       	ldi	r20, 0x01	; 1
    86cc:	68 e2       	ldi	r22, 0x28	; 40
    86ce:	82 ed       	ldi	r24, 0xD2	; 210
    86d0:	58 d8       	rcall	.-3920   	; 0x7782 <task_twi2_lcd_circ>
    86d2:	c5 01       	movw	r24, r10
    86d4:	60 e5       	ldi	r22, 0x50	; 80
    86d6:	70 e0       	ldi	r23, 0x00	; 0
    86d8:	0e 94 64 87 	call	0x10ec8	; 0x10ec8 <__divmodhi4>
    86dc:	16 2f       	mov	r17, r22
    86de:	66 2e       	mov	r6, r22
    86e0:	61 94       	neg	r6
    86e2:	28 e2       	ldi	r18, 0x28	; 40
    86e4:	30 e0       	ldi	r19, 0x00	; 0
    86e6:	c6 01       	movw	r24, r12
    86e8:	b9 01       	movw	r22, r18
    86ea:	0e 94 64 87 	call	0x10ec8	; 0x10ec8 <__divmodhi4>
    86ee:	a6 2c       	mov	r10, r6
    86f0:	a6 1a       	sub	r10, r22
    86f2:	c7 01       	movw	r24, r14
    86f4:	b9 01       	movw	r22, r18
    86f6:	0e 94 64 87 	call	0x10ec8	; 0x10ec8 <__divmodhi4>
    86fa:	d1 2e       	mov	r13, r17
    86fc:	d6 0e       	add	r13, r22
    86fe:	0f 2e       	mov	r0, r31
    8700:	f8 e2       	ldi	r31, 0x28	; 40
    8702:	cf 2e       	mov	r12, r31
    8704:	f0 2d       	mov	r31, r0
    8706:	c1 0e       	add	r12, r17
    8708:	82 ed       	ldi	r24, 0xD2	; 210
    870a:	b8 2e       	mov	r11, r24
    870c:	b1 1a       	sub	r11, r17
    870e:	2c 2d       	mov	r18, r12
    8710:	4b 2d       	mov	r20, r11
    8712:	68 e2       	ldi	r22, 0x28	; 40
    8714:	0e 94 6b 3b 	call	0x76d6	; 0x76d6 <task_twi2_lcd_line>
    8718:	0f 2e       	mov	r0, r31
    871a:	f2 ed       	ldi	r31, 0xD2	; 210
    871c:	7f 2e       	mov	r7, r31
    871e:	f0 2d       	mov	r31, r0
    8720:	7a 0c       	add	r7, r10
    8722:	2c 2d       	mov	r18, r12
    8724:	47 2d       	mov	r20, r7
    8726:	6c 2d       	mov	r22, r12
    8728:	8b 2d       	mov	r24, r11
    872a:	0e 94 6b 3b 	call	0x76d6	; 0x76d6 <task_twi2_lcd_line>
    872e:	28 e2       	ldi	r18, 0x28	; 40
    8730:	2d 0d       	add	r18, r13
    8732:	47 2d       	mov	r20, r7
    8734:	6c 2d       	mov	r22, r12
    8736:	87 2d       	mov	r24, r7
    8738:	0e 94 6b 3b 	call	0x76d6	; 0x76d6 <task_twi2_lcd_line>
    873c:	60 92 d7 22 	sts	0x22D7, r6	; 0x8022d7 <s_p1x.8271>
    8740:	10 93 d8 22 	sts	0x22D8, r17	; 0x8022d8 <s_p1y.8272>
    8744:	a0 92 d5 22 	sts	0x22D5, r10	; 0x8022d5 <s_p2x.8273>
    8748:	10 93 d6 22 	sts	0x22D6, r17	; 0x8022d6 <s_p2y.8274>
    874c:	a0 92 d3 22 	sts	0x22D3, r10	; 0x8022d3 <s_p3x.8275>
    8750:	d0 92 d4 22 	sts	0x22D4, r13	; 0x8022d4 <s_p3y.8276>
    8754:	2e ef       	ldi	r18, 0xFE	; 254
    8756:	82 16       	cp	r8, r18
    8758:	2f ef       	ldi	r18, 0xFF	; 255
    875a:	92 06       	cpc	r9, r18
    875c:	31 f5       	brne	.+76     	; 0x87aa <task_twi2_lcd__gyro_gfxaccel+0x1bc>
    875e:	97 01       	movw	r18, r14
    8760:	28 51       	subi	r18, 0x18	; 24
    8762:	3c 4f       	sbci	r19, 0xFC	; 252
    8764:	c9 01       	movw	r24, r18
    8766:	33 0f       	add	r19, r19
    8768:	aa 0b       	sbc	r26, r26
    876a:	bb 0b       	sbc	r27, r27
    876c:	81 3d       	cpi	r24, 0xD1	; 209
    876e:	27 e0       	ldi	r18, 0x07	; 7
    8770:	92 07       	cpc	r25, r18
    8772:	a1 05       	cpc	r26, r1
    8774:	b1 05       	cpc	r27, r1
    8776:	24 f0       	brlt	.+8      	; 0x8780 <task_twi2_lcd__gyro_gfxaccel+0x192>
    8778:	80 ed       	ldi	r24, 0xD0	; 208
    877a:	97 e0       	ldi	r25, 0x07	; 7
    877c:	a0 e0       	ldi	r26, 0x00	; 0
    877e:	b0 e0       	ldi	r27, 0x00	; 0
    8780:	9c 01       	movw	r18, r24
    8782:	ad 01       	movw	r20, r26
    8784:	bb 23       	and	r27, r27
    8786:	1c f4       	brge	.+6      	; 0x878e <task_twi2_lcd__gyro_gfxaccel+0x1a0>
    8788:	20 e0       	ldi	r18, 0x00	; 0
    878a:	30 e0       	ldi	r19, 0x00	; 0
    878c:	a9 01       	movw	r20, r18
    878e:	af ef       	ldi	r26, 0xFF	; 255
    8790:	b0 e0       	ldi	r27, 0x00	; 0
    8792:	0e 94 d8 87 	call	0x10fb0	; 0x10fb0 <__muluhisi3>
    8796:	20 ed       	ldi	r18, 0xD0	; 208
    8798:	37 e0       	ldi	r19, 0x07	; 7
    879a:	40 e0       	ldi	r20, 0x00	; 0
    879c:	50 e0       	ldi	r21, 0x00	; 0
    879e:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    87a2:	62 2f       	mov	r22, r18
    87a4:	80 e0       	ldi	r24, 0x00	; 0
    87a6:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <twi2_set_ledbl>
    87aa:	0f 90       	pop	r0
    87ac:	df 91       	pop	r29
    87ae:	cf 91       	pop	r28
    87b0:	1f 91       	pop	r17
    87b2:	0f 91       	pop	r16
    87b4:	ff 90       	pop	r15
    87b6:	ef 90       	pop	r14
    87b8:	df 90       	pop	r13
    87ba:	cf 90       	pop	r12
    87bc:	bf 90       	pop	r11
    87be:	af 90       	pop	r10
    87c0:	9f 90       	pop	r9
    87c2:	8f 90       	pop	r8
    87c4:	7f 90       	pop	r7
    87c6:	6f 90       	pop	r6
    87c8:	08 95       	ret

000087ca <task_twi2_lcd__gyro_gfxgyro>:
    87ca:	2f 92       	push	r2
    87cc:	3f 92       	push	r3
    87ce:	4f 92       	push	r4
    87d0:	5f 92       	push	r5
    87d2:	6f 92       	push	r6
    87d4:	7f 92       	push	r7
    87d6:	8f 92       	push	r8
    87d8:	9f 92       	push	r9
    87da:	af 92       	push	r10
    87dc:	bf 92       	push	r11
    87de:	cf 92       	push	r12
    87e0:	df 92       	push	r13
    87e2:	ef 92       	push	r14
    87e4:	ff 92       	push	r15
    87e6:	0f 93       	push	r16
    87e8:	1f 93       	push	r17
    87ea:	cf 93       	push	r28
    87ec:	df 93       	push	r29
    87ee:	cd b7       	in	r28, 0x3d	; 61
    87f0:	de b7       	in	r29, 0x3e	; 62
    87f2:	65 97       	sbiw	r28, 0x15	; 21
    87f4:	cd bf       	out	0x3d, r28	; 61
    87f6:	de bf       	out	0x3e, r29	; 62
    87f8:	8f b7       	in	r24, 0x3f	; 63
    87fa:	89 83       	std	Y+1, r24	; 0x01
    87fc:	f8 94       	cli
    87fe:	89 81       	ldd	r24, Y+1	; 0x01
    8800:	20 90 43 27 	lds	r2, 0x2743	; 0x802743 <g_twi1_gyro_1_gyro_x_mdps>
    8804:	30 90 44 27 	lds	r3, 0x2744	; 0x802744 <g_twi1_gyro_1_gyro_x_mdps+0x1>
    8808:	40 90 45 27 	lds	r4, 0x2745	; 0x802745 <g_twi1_gyro_1_gyro_x_mdps+0x2>
    880c:	50 90 46 27 	lds	r5, 0x2746	; 0x802746 <g_twi1_gyro_1_gyro_x_mdps+0x3>
    8810:	c0 90 3f 27 	lds	r12, 0x273F	; 0x80273f <g_twi1_gyro_1_gyro_y_mdps>
    8814:	d0 90 40 27 	lds	r13, 0x2740	; 0x802740 <g_twi1_gyro_1_gyro_y_mdps+0x1>
    8818:	e0 90 41 27 	lds	r14, 0x2741	; 0x802741 <g_twi1_gyro_1_gyro_y_mdps+0x2>
    881c:	f0 90 42 27 	lds	r15, 0x2742	; 0x802742 <g_twi1_gyro_1_gyro_y_mdps+0x3>
    8820:	20 91 3b 27 	lds	r18, 0x273B	; 0x80273b <g_twi1_gyro_1_gyro_z_mdps>
    8824:	30 91 3c 27 	lds	r19, 0x273C	; 0x80273c <g_twi1_gyro_1_gyro_z_mdps+0x1>
    8828:	40 91 3d 27 	lds	r20, 0x273D	; 0x80273d <g_twi1_gyro_1_gyro_z_mdps+0x2>
    882c:	50 91 3e 27 	lds	r21, 0x273E	; 0x80273e <g_twi1_gyro_1_gyro_z_mdps+0x3>
    8830:	2a 8b       	std	Y+18, r18	; 0x12
    8832:	3b 8b       	std	Y+19, r19	; 0x13
    8834:	4c 8b       	std	Y+20, r20	; 0x14
    8836:	5d 8b       	std	Y+21, r21	; 0x15
    8838:	8f bf       	out	0x3f, r24	; 63
    883a:	80 91 cf 22 	lds	r24, 0x22CF	; 0x8022cf <s_twi1_gyro_1_gyro_x_mdps.8300>
    883e:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <s_twi1_gyro_1_gyro_x_mdps.8300+0x1>
    8842:	a0 91 d1 22 	lds	r26, 0x22D1	; 0x8022d1 <s_twi1_gyro_1_gyro_x_mdps.8300+0x2>
    8846:	b0 91 d2 22 	lds	r27, 0x22D2	; 0x8022d2 <s_twi1_gyro_1_gyro_x_mdps.8300+0x3>
    884a:	28 16       	cp	r2, r24
    884c:	39 06       	cpc	r3, r25
    884e:	4a 06       	cpc	r4, r26
    8850:	5b 06       	cpc	r5, r27
    8852:	d9 f4       	brne	.+54     	; 0x888a <task_twi2_lcd__gyro_gfxgyro+0xc0>
    8854:	80 91 cb 22 	lds	r24, 0x22CB	; 0x8022cb <s_twi1_gyro_1_gyro_y_mdps.8301>
    8858:	90 91 cc 22 	lds	r25, 0x22CC	; 0x8022cc <s_twi1_gyro_1_gyro_y_mdps.8301+0x1>
    885c:	a0 91 cd 22 	lds	r26, 0x22CD	; 0x8022cd <s_twi1_gyro_1_gyro_y_mdps.8301+0x2>
    8860:	b0 91 ce 22 	lds	r27, 0x22CE	; 0x8022ce <s_twi1_gyro_1_gyro_y_mdps.8301+0x3>
    8864:	c8 16       	cp	r12, r24
    8866:	d9 06       	cpc	r13, r25
    8868:	ea 06       	cpc	r14, r26
    886a:	fb 06       	cpc	r15, r27
    886c:	71 f4       	brne	.+28     	; 0x888a <task_twi2_lcd__gyro_gfxgyro+0xc0>
    886e:	80 91 c7 22 	lds	r24, 0x22C7	; 0x8022c7 <s_twi1_gyro_1_gyro_z_mdps.8302>
    8872:	90 91 c8 22 	lds	r25, 0x22C8	; 0x8022c8 <s_twi1_gyro_1_gyro_z_mdps.8302+0x1>
    8876:	a0 91 c9 22 	lds	r26, 0x22C9	; 0x8022c9 <s_twi1_gyro_1_gyro_z_mdps.8302+0x2>
    887a:	b0 91 ca 22 	lds	r27, 0x22CA	; 0x8022ca <s_twi1_gyro_1_gyro_z_mdps.8302+0x3>
    887e:	28 17       	cp	r18, r24
    8880:	39 07       	cpc	r19, r25
    8882:	4a 07       	cpc	r20, r26
    8884:	5b 07       	cpc	r21, r27
    8886:	09 f4       	brne	.+2      	; 0x888a <task_twi2_lcd__gyro_gfxgyro+0xc0>
    8888:	b7 c1       	rjmp	.+878    	; 0x8bf8 <task_twi2_lcd__gyro_gfxgyro+0x42e>
    888a:	20 92 cf 22 	sts	0x22CF, r2	; 0x8022cf <s_twi1_gyro_1_gyro_x_mdps.8300>
    888e:	30 92 d0 22 	sts	0x22D0, r3	; 0x8022d0 <s_twi1_gyro_1_gyro_x_mdps.8300+0x1>
    8892:	40 92 d1 22 	sts	0x22D1, r4	; 0x8022d1 <s_twi1_gyro_1_gyro_x_mdps.8300+0x2>
    8896:	50 92 d2 22 	sts	0x22D2, r5	; 0x8022d2 <s_twi1_gyro_1_gyro_x_mdps.8300+0x3>
    889a:	c0 92 cb 22 	sts	0x22CB, r12	; 0x8022cb <s_twi1_gyro_1_gyro_y_mdps.8301>
    889e:	d0 92 cc 22 	sts	0x22CC, r13	; 0x8022cc <s_twi1_gyro_1_gyro_y_mdps.8301+0x1>
    88a2:	e0 92 cd 22 	sts	0x22CD, r14	; 0x8022cd <s_twi1_gyro_1_gyro_y_mdps.8301+0x2>
    88a6:	f0 92 ce 22 	sts	0x22CE, r15	; 0x8022ce <s_twi1_gyro_1_gyro_y_mdps.8301+0x3>
    88aa:	8a 89       	ldd	r24, Y+18	; 0x12
    88ac:	9b 89       	ldd	r25, Y+19	; 0x13
    88ae:	ac 89       	ldd	r26, Y+20	; 0x14
    88b0:	bd 89       	ldd	r27, Y+21	; 0x15
    88b2:	80 93 c7 22 	sts	0x22C7, r24	; 0x8022c7 <s_twi1_gyro_1_gyro_z_mdps.8302>
    88b6:	90 93 c8 22 	sts	0x22C8, r25	; 0x8022c8 <s_twi1_gyro_1_gyro_z_mdps.8302+0x1>
    88ba:	a0 93 c9 22 	sts	0x22C9, r26	; 0x8022c9 <s_twi1_gyro_1_gyro_z_mdps.8302+0x2>
    88be:	b0 93 ca 22 	sts	0x22CA, r27	; 0x8022ca <s_twi1_gyro_1_gyro_z_mdps.8302+0x3>
    88c2:	c2 01       	movw	r24, r4
    88c4:	b1 01       	movw	r22, r2
    88c6:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    88ca:	2b ed       	ldi	r18, 0xDB	; 219
    88cc:	3f e0       	ldi	r19, 0x0F	; 15
    88ce:	49 e4       	ldi	r20, 0x49	; 73
    88d0:	50 e4       	ldi	r21, 0x40	; 64
    88d2:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    88d6:	20 e0       	ldi	r18, 0x00	; 0
    88d8:	38 ec       	ldi	r19, 0xC8	; 200
    88da:	4f e2       	ldi	r20, 0x2F	; 47
    88dc:	58 e4       	ldi	r21, 0x48	; 72
    88de:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    88e2:	6e 83       	std	Y+6, r22	; 0x06
    88e4:	7f 83       	std	Y+7, r23	; 0x07
    88e6:	88 87       	std	Y+8, r24	; 0x08
    88e8:	99 87       	std	Y+9, r25	; 0x09
    88ea:	c7 01       	movw	r24, r14
    88ec:	b6 01       	movw	r22, r12
    88ee:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    88f2:	2b ed       	ldi	r18, 0xDB	; 219
    88f4:	3f e0       	ldi	r19, 0x0F	; 15
    88f6:	49 e4       	ldi	r20, 0x49	; 73
    88f8:	50 e4       	ldi	r21, 0x40	; 64
    88fa:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    88fe:	20 e0       	ldi	r18, 0x00	; 0
    8900:	38 ec       	ldi	r19, 0xC8	; 200
    8902:	4f e2       	ldi	r20, 0x2F	; 47
    8904:	58 e4       	ldi	r21, 0x48	; 72
    8906:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    890a:	6a 87       	std	Y+10, r22	; 0x0a
    890c:	7b 87       	std	Y+11, r23	; 0x0b
    890e:	8c 87       	std	Y+12, r24	; 0x0c
    8910:	9d 87       	std	Y+13, r25	; 0x0d
    8912:	6a 89       	ldd	r22, Y+18	; 0x12
    8914:	7b 89       	ldd	r23, Y+19	; 0x13
    8916:	8c 89       	ldd	r24, Y+20	; 0x14
    8918:	9d 89       	ldd	r25, Y+21	; 0x15
    891a:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    891e:	2b ed       	ldi	r18, 0xDB	; 219
    8920:	3f e0       	ldi	r19, 0x0F	; 15
    8922:	49 e4       	ldi	r20, 0x49	; 73
    8924:	50 e4       	ldi	r21, 0x40	; 64
    8926:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    892a:	20 e0       	ldi	r18, 0x00	; 0
    892c:	38 ec       	ldi	r19, 0xC8	; 200
    892e:	4f e2       	ldi	r20, 0x2F	; 47
    8930:	58 e4       	ldi	r21, 0x48	; 72
    8932:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    8936:	6e 87       	std	Y+14, r22	; 0x0e
    8938:	7f 87       	std	Y+15, r23	; 0x0f
    893a:	88 8b       	std	Y+16, r24	; 0x10
    893c:	99 8b       	std	Y+17, r25	; 0x11
    893e:	80 90 c3 22 	lds	r8, 0x22C3	; 0x8022c3 <s_rads_x.8297>
    8942:	90 90 c4 22 	lds	r9, 0x22C4	; 0x8022c4 <s_rads_x.8297+0x1>
    8946:	a0 90 c5 22 	lds	r10, 0x22C5	; 0x8022c5 <s_rads_x.8297+0x2>
    894a:	b0 90 c6 22 	lds	r11, 0x22C6	; 0x8022c6 <s_rads_x.8297+0x3>
    894e:	c5 01       	movw	r24, r10
    8950:	b4 01       	movw	r22, r8
    8952:	0e 94 d7 83 	call	0x107ae	; 0x107ae <cos>
    8956:	6a 83       	std	Y+2, r22	; 0x02
    8958:	7b 83       	std	Y+3, r23	; 0x03
    895a:	8c 83       	std	Y+4, r24	; 0x04
    895c:	9d 83       	std	Y+5, r25	; 0x05
    895e:	c5 01       	movw	r24, r10
    8960:	b4 01       	movw	r22, r8
    8962:	0e 94 11 86 	call	0x10c22	; 0x10c22 <sin>
    8966:	4b 01       	movw	r8, r22
    8968:	5c 01       	movw	r10, r24
    896a:	20 e0       	ldi	r18, 0x00	; 0
    896c:	30 e0       	ldi	r19, 0x00	; 0
    896e:	40 e4       	ldi	r20, 0x40	; 64
    8970:	51 e4       	ldi	r21, 0x41	; 65
    8972:	6a 81       	ldd	r22, Y+2	; 0x02
    8974:	7b 81       	ldd	r23, Y+3	; 0x03
    8976:	8c 81       	ldd	r24, Y+4	; 0x04
    8978:	9d 81       	ldd	r25, Y+5	; 0x05
    897a:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    897e:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    8982:	14 e6       	ldi	r17, 0x64	; 100
    8984:	71 2e       	mov	r7, r17
    8986:	76 1a       	sub	r7, r22
    8988:	20 e0       	ldi	r18, 0x00	; 0
    898a:	30 e0       	ldi	r19, 0x00	; 0
    898c:	40 e4       	ldi	r20, 0x40	; 64
    898e:	51 e4       	ldi	r21, 0x41	; 65
    8990:	c5 01       	movw	r24, r10
    8992:	b4 01       	movw	r22, r8
    8994:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8998:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    899c:	46 e9       	ldi	r20, 0x96	; 150
    899e:	46 1b       	sub	r20, r22
    89a0:	00 e0       	ldi	r16, 0x00	; 0
    89a2:	27 2d       	mov	r18, r7
    89a4:	64 e6       	ldi	r22, 0x64	; 100
    89a6:	86 e9       	ldi	r24, 0x96	; 150
    89a8:	0e 94 6b 3b 	call	0x76d6	; 0x76d6 <task_twi2_lcd_line>
    89ac:	80 90 bf 22 	lds	r8, 0x22BF	; 0x8022bf <s_rads_y.8298>
    89b0:	90 90 c0 22 	lds	r9, 0x22C0	; 0x8022c0 <s_rads_y.8298+0x1>
    89b4:	a0 90 c1 22 	lds	r10, 0x22C1	; 0x8022c1 <s_rads_y.8298+0x2>
    89b8:	b0 90 c2 22 	lds	r11, 0x22C2	; 0x8022c2 <s_rads_y.8298+0x3>
    89bc:	c5 01       	movw	r24, r10
    89be:	b4 01       	movw	r22, r8
    89c0:	0e 94 d7 83 	call	0x107ae	; 0x107ae <cos>
    89c4:	6a 83       	std	Y+2, r22	; 0x02
    89c6:	7b 83       	std	Y+3, r23	; 0x03
    89c8:	8c 83       	std	Y+4, r24	; 0x04
    89ca:	9d 83       	std	Y+5, r25	; 0x05
    89cc:	c5 01       	movw	r24, r10
    89ce:	b4 01       	movw	r22, r8
    89d0:	0e 94 11 86 	call	0x10c22	; 0x10c22 <sin>
    89d4:	4b 01       	movw	r8, r22
    89d6:	5c 01       	movw	r10, r24
    89d8:	20 e0       	ldi	r18, 0x00	; 0
    89da:	30 e0       	ldi	r19, 0x00	; 0
    89dc:	40 e4       	ldi	r20, 0x40	; 64
    89de:	51 e4       	ldi	r21, 0x41	; 65
    89e0:	6a 81       	ldd	r22, Y+2	; 0x02
    89e2:	7b 81       	ldd	r23, Y+3	; 0x03
    89e4:	8c 81       	ldd	r24, Y+4	; 0x04
    89e6:	9d 81       	ldd	r25, Y+5	; 0x05
    89e8:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    89ec:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    89f0:	71 2e       	mov	r7, r17
    89f2:	76 1a       	sub	r7, r22
    89f4:	20 e0       	ldi	r18, 0x00	; 0
    89f6:	30 e0       	ldi	r19, 0x00	; 0
    89f8:	40 e4       	ldi	r20, 0x40	; 64
    89fa:	51 e4       	ldi	r21, 0x41	; 65
    89fc:	c5 01       	movw	r24, r10
    89fe:	b4 01       	movw	r22, r8
    8a00:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8a04:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    8a08:	44 eb       	ldi	r20, 0xB4	; 180
    8a0a:	46 0f       	add	r20, r22
    8a0c:	27 2d       	mov	r18, r7
    8a0e:	64 e6       	ldi	r22, 0x64	; 100
    8a10:	84 eb       	ldi	r24, 0xB4	; 180
    8a12:	0e 94 6b 3b 	call	0x76d6	; 0x76d6 <task_twi2_lcd_line>
    8a16:	80 90 bb 22 	lds	r8, 0x22BB	; 0x8022bb <s_rads_z.8299>
    8a1a:	90 90 bc 22 	lds	r9, 0x22BC	; 0x8022bc <s_rads_z.8299+0x1>
    8a1e:	a0 90 bd 22 	lds	r10, 0x22BD	; 0x8022bd <s_rads_z.8299+0x2>
    8a22:	b0 90 be 22 	lds	r11, 0x22BE	; 0x8022be <s_rads_z.8299+0x3>
    8a26:	c5 01       	movw	r24, r10
    8a28:	b4 01       	movw	r22, r8
    8a2a:	0e 94 d7 83 	call	0x107ae	; 0x107ae <cos>
    8a2e:	6a 83       	std	Y+2, r22	; 0x02
    8a30:	7b 83       	std	Y+3, r23	; 0x03
    8a32:	8c 83       	std	Y+4, r24	; 0x04
    8a34:	9d 83       	std	Y+5, r25	; 0x05
    8a36:	c5 01       	movw	r24, r10
    8a38:	b4 01       	movw	r22, r8
    8a3a:	0e 94 11 86 	call	0x10c22	; 0x10c22 <sin>
    8a3e:	4b 01       	movw	r8, r22
    8a40:	5c 01       	movw	r10, r24
    8a42:	20 e0       	ldi	r18, 0x00	; 0
    8a44:	30 e0       	ldi	r19, 0x00	; 0
    8a46:	40 e4       	ldi	r20, 0x40	; 64
    8a48:	51 e4       	ldi	r21, 0x41	; 65
    8a4a:	6a 81       	ldd	r22, Y+2	; 0x02
    8a4c:	7b 81       	ldd	r23, Y+3	; 0x03
    8a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    8a50:	9d 81       	ldd	r25, Y+5	; 0x05
    8a52:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8a56:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    8a5a:	71 2e       	mov	r7, r17
    8a5c:	76 1a       	sub	r7, r22
    8a5e:	20 e0       	ldi	r18, 0x00	; 0
    8a60:	30 e0       	ldi	r19, 0x00	; 0
    8a62:	40 e4       	ldi	r20, 0x40	; 64
    8a64:	51 e4       	ldi	r21, 0x41	; 65
    8a66:	c5 01       	movw	r24, r10
    8a68:	b4 01       	movw	r22, r8
    8a6a:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8a6e:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    8a72:	0f 2e       	mov	r0, r31
    8a74:	f2 ed       	ldi	r31, 0xD2	; 210
    8a76:	6f 2e       	mov	r6, r31
    8a78:	f0 2d       	mov	r31, r0
    8a7a:	46 2d       	mov	r20, r6
    8a7c:	46 1b       	sub	r20, r22
    8a7e:	27 2d       	mov	r18, r7
    8a80:	64 e6       	ldi	r22, 0x64	; 100
    8a82:	82 ed       	ldi	r24, 0xD2	; 210
    8a84:	0e 94 6b 3b 	call	0x76d6	; 0x76d6 <task_twi2_lcd_line>
    8a88:	6e 81       	ldd	r22, Y+6	; 0x06
    8a8a:	7f 81       	ldd	r23, Y+7	; 0x07
    8a8c:	88 85       	ldd	r24, Y+8	; 0x08
    8a8e:	99 85       	ldd	r25, Y+9	; 0x09
    8a90:	0e 94 d7 83 	call	0x107ae	; 0x107ae <cos>
    8a94:	6a 83       	std	Y+2, r22	; 0x02
    8a96:	7b 83       	std	Y+3, r23	; 0x03
    8a98:	8c 83       	std	Y+4, r24	; 0x04
    8a9a:	9d 83       	std	Y+5, r25	; 0x05
    8a9c:	6e 81       	ldd	r22, Y+6	; 0x06
    8a9e:	7f 81       	ldd	r23, Y+7	; 0x07
    8aa0:	88 85       	ldd	r24, Y+8	; 0x08
    8aa2:	99 85       	ldd	r25, Y+9	; 0x09
    8aa4:	0e 94 11 86 	call	0x10c22	; 0x10c22 <sin>
    8aa8:	4b 01       	movw	r8, r22
    8aaa:	5c 01       	movw	r10, r24
    8aac:	20 e0       	ldi	r18, 0x00	; 0
    8aae:	30 e0       	ldi	r19, 0x00	; 0
    8ab0:	40 e4       	ldi	r20, 0x40	; 64
    8ab2:	51 e4       	ldi	r21, 0x41	; 65
    8ab4:	6a 81       	ldd	r22, Y+2	; 0x02
    8ab6:	7b 81       	ldd	r23, Y+3	; 0x03
    8ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    8aba:	9d 81       	ldd	r25, Y+5	; 0x05
    8abc:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8ac0:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    8ac4:	71 2e       	mov	r7, r17
    8ac6:	76 1a       	sub	r7, r22
    8ac8:	20 e0       	ldi	r18, 0x00	; 0
    8aca:	30 e0       	ldi	r19, 0x00	; 0
    8acc:	40 e4       	ldi	r20, 0x40	; 64
    8ace:	51 e4       	ldi	r21, 0x41	; 65
    8ad0:	c5 01       	movw	r24, r10
    8ad2:	b4 01       	movw	r22, r8
    8ad4:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8ad8:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    8adc:	46 e9       	ldi	r20, 0x96	; 150
    8ade:	46 1b       	sub	r20, r22
    8ae0:	01 e0       	ldi	r16, 0x01	; 1
    8ae2:	27 2d       	mov	r18, r7
    8ae4:	64 e6       	ldi	r22, 0x64	; 100
    8ae6:	86 e9       	ldi	r24, 0x96	; 150
    8ae8:	0e 94 6b 3b 	call	0x76d6	; 0x76d6 <task_twi2_lcd_line>
    8aec:	6a 85       	ldd	r22, Y+10	; 0x0a
    8aee:	7b 85       	ldd	r23, Y+11	; 0x0b
    8af0:	8c 85       	ldd	r24, Y+12	; 0x0c
    8af2:	9d 85       	ldd	r25, Y+13	; 0x0d
    8af4:	0e 94 d7 83 	call	0x107ae	; 0x107ae <cos>
    8af8:	6a 83       	std	Y+2, r22	; 0x02
    8afa:	7b 83       	std	Y+3, r23	; 0x03
    8afc:	8c 83       	std	Y+4, r24	; 0x04
    8afe:	9d 83       	std	Y+5, r25	; 0x05
    8b00:	6a 85       	ldd	r22, Y+10	; 0x0a
    8b02:	7b 85       	ldd	r23, Y+11	; 0x0b
    8b04:	8c 85       	ldd	r24, Y+12	; 0x0c
    8b06:	9d 85       	ldd	r25, Y+13	; 0x0d
    8b08:	0e 94 11 86 	call	0x10c22	; 0x10c22 <sin>
    8b0c:	4b 01       	movw	r8, r22
    8b0e:	5c 01       	movw	r10, r24
    8b10:	20 e0       	ldi	r18, 0x00	; 0
    8b12:	30 e0       	ldi	r19, 0x00	; 0
    8b14:	40 e4       	ldi	r20, 0x40	; 64
    8b16:	51 e4       	ldi	r21, 0x41	; 65
    8b18:	6a 81       	ldd	r22, Y+2	; 0x02
    8b1a:	7b 81       	ldd	r23, Y+3	; 0x03
    8b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    8b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    8b20:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8b24:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    8b28:	71 2e       	mov	r7, r17
    8b2a:	76 1a       	sub	r7, r22
    8b2c:	20 e0       	ldi	r18, 0x00	; 0
    8b2e:	30 e0       	ldi	r19, 0x00	; 0
    8b30:	40 e4       	ldi	r20, 0x40	; 64
    8b32:	51 e4       	ldi	r21, 0x41	; 65
    8b34:	c5 01       	movw	r24, r10
    8b36:	b4 01       	movw	r22, r8
    8b38:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8b3c:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    8b40:	44 eb       	ldi	r20, 0xB4	; 180
    8b42:	46 0f       	add	r20, r22
    8b44:	27 2d       	mov	r18, r7
    8b46:	64 e6       	ldi	r22, 0x64	; 100
    8b48:	84 eb       	ldi	r24, 0xB4	; 180
    8b4a:	0e 94 6b 3b 	call	0x76d6	; 0x76d6 <task_twi2_lcd_line>
    8b4e:	6e 85       	ldd	r22, Y+14	; 0x0e
    8b50:	7f 85       	ldd	r23, Y+15	; 0x0f
    8b52:	88 89       	ldd	r24, Y+16	; 0x10
    8b54:	99 89       	ldd	r25, Y+17	; 0x11
    8b56:	0e 94 d7 83 	call	0x107ae	; 0x107ae <cos>
    8b5a:	6a 83       	std	Y+2, r22	; 0x02
    8b5c:	7b 83       	std	Y+3, r23	; 0x03
    8b5e:	8c 83       	std	Y+4, r24	; 0x04
    8b60:	9d 83       	std	Y+5, r25	; 0x05
    8b62:	6e 85       	ldd	r22, Y+14	; 0x0e
    8b64:	7f 85       	ldd	r23, Y+15	; 0x0f
    8b66:	88 89       	ldd	r24, Y+16	; 0x10
    8b68:	99 89       	ldd	r25, Y+17	; 0x11
    8b6a:	0e 94 11 86 	call	0x10c22	; 0x10c22 <sin>
    8b6e:	4b 01       	movw	r8, r22
    8b70:	5c 01       	movw	r10, r24
    8b72:	20 e0       	ldi	r18, 0x00	; 0
    8b74:	30 e0       	ldi	r19, 0x00	; 0
    8b76:	40 e4       	ldi	r20, 0x40	; 64
    8b78:	51 e4       	ldi	r21, 0x41	; 65
    8b7a:	6a 81       	ldd	r22, Y+2	; 0x02
    8b7c:	7b 81       	ldd	r23, Y+3	; 0x03
    8b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    8b80:	9d 81       	ldd	r25, Y+5	; 0x05
    8b82:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8b86:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    8b8a:	71 2e       	mov	r7, r17
    8b8c:	76 1a       	sub	r7, r22
    8b8e:	20 e0       	ldi	r18, 0x00	; 0
    8b90:	30 e0       	ldi	r19, 0x00	; 0
    8b92:	40 e4       	ldi	r20, 0x40	; 64
    8b94:	51 e4       	ldi	r21, 0x41	; 65
    8b96:	c5 01       	movw	r24, r10
    8b98:	b4 01       	movw	r22, r8
    8b9a:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    8b9e:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    8ba2:	46 2d       	mov	r20, r6
    8ba4:	46 1b       	sub	r20, r22
    8ba6:	27 2d       	mov	r18, r7
    8ba8:	64 e6       	ldi	r22, 0x64	; 100
    8baa:	82 ed       	ldi	r24, 0xD2	; 210
    8bac:	0e 94 6b 3b 	call	0x76d6	; 0x76d6 <task_twi2_lcd_line>
    8bb0:	2e 81       	ldd	r18, Y+6	; 0x06
    8bb2:	3f 81       	ldd	r19, Y+7	; 0x07
    8bb4:	48 85       	ldd	r20, Y+8	; 0x08
    8bb6:	59 85       	ldd	r21, Y+9	; 0x09
    8bb8:	20 93 c3 22 	sts	0x22C3, r18	; 0x8022c3 <s_rads_x.8297>
    8bbc:	30 93 c4 22 	sts	0x22C4, r19	; 0x8022c4 <s_rads_x.8297+0x1>
    8bc0:	40 93 c5 22 	sts	0x22C5, r20	; 0x8022c5 <s_rads_x.8297+0x2>
    8bc4:	50 93 c6 22 	sts	0x22C6, r21	; 0x8022c6 <s_rads_x.8297+0x3>
    8bc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    8bca:	9b 85       	ldd	r25, Y+11	; 0x0b
    8bcc:	ac 85       	ldd	r26, Y+12	; 0x0c
    8bce:	bd 85       	ldd	r27, Y+13	; 0x0d
    8bd0:	80 93 bf 22 	sts	0x22BF, r24	; 0x8022bf <s_rads_y.8298>
    8bd4:	90 93 c0 22 	sts	0x22C0, r25	; 0x8022c0 <s_rads_y.8298+0x1>
    8bd8:	a0 93 c1 22 	sts	0x22C1, r26	; 0x8022c1 <s_rads_y.8298+0x2>
    8bdc:	b0 93 c2 22 	sts	0x22C2, r27	; 0x8022c2 <s_rads_y.8298+0x3>
    8be0:	2e 85       	ldd	r18, Y+14	; 0x0e
    8be2:	3f 85       	ldd	r19, Y+15	; 0x0f
    8be4:	48 89       	ldd	r20, Y+16	; 0x10
    8be6:	59 89       	ldd	r21, Y+17	; 0x11
    8be8:	20 93 bb 22 	sts	0x22BB, r18	; 0x8022bb <s_rads_z.8299>
    8bec:	30 93 bc 22 	sts	0x22BC, r19	; 0x8022bc <s_rads_z.8299+0x1>
    8bf0:	40 93 bd 22 	sts	0x22BD, r20	; 0x8022bd <s_rads_z.8299+0x2>
    8bf4:	50 93 be 22 	sts	0x22BE, r21	; 0x8022be <s_rads_z.8299+0x3>
    8bf8:	80 91 9b 28 	lds	r24, 0x289B	; 0x80289b <g_pitch_tone_mode>
    8bfc:	81 30       	cpi	r24, 0x01	; 1
    8bfe:	81 f5       	brne	.+96     	; 0x8c60 <task_twi2_lcd__gyro_gfxgyro+0x496>
    8c00:	d2 01       	movw	r26, r4
    8c02:	c1 01       	movw	r24, r2
    8c04:	8c 0d       	add	r24, r12
    8c06:	9d 1d       	adc	r25, r13
    8c08:	ae 1d       	adc	r26, r14
    8c0a:	bf 1d       	adc	r27, r15
    8c0c:	2a 89       	ldd	r18, Y+18	; 0x12
    8c0e:	3b 89       	ldd	r19, Y+19	; 0x13
    8c10:	4c 89       	ldd	r20, Y+20	; 0x14
    8c12:	5d 89       	ldd	r21, Y+21	; 0x15
    8c14:	82 0f       	add	r24, r18
    8c16:	93 1f       	adc	r25, r19
    8c18:	a4 1f       	adc	r26, r20
    8c1a:	b5 1f       	adc	r27, r21
    8c1c:	ac 01       	movw	r20, r24
    8c1e:	bd 01       	movw	r22, r26
    8c20:	bb 23       	and	r27, r27
    8c22:	3c f4       	brge	.+14     	; 0x8c32 <task_twi2_lcd__gyro_gfxgyro+0x468>
    8c24:	44 27       	eor	r20, r20
    8c26:	55 27       	eor	r21, r21
    8c28:	ba 01       	movw	r22, r20
    8c2a:	48 1b       	sub	r20, r24
    8c2c:	59 0b       	sbc	r21, r25
    8c2e:	6a 0b       	sbc	r22, r26
    8c30:	7b 0b       	sbc	r23, r27
    8c32:	cb 01       	movw	r24, r22
    8c34:	ba 01       	movw	r22, r20
    8c36:	61 39       	cpi	r22, 0x91	; 145
    8c38:	31 e0       	ldi	r19, 0x01	; 1
    8c3a:	73 07       	cpc	r23, r19
    8c3c:	81 05       	cpc	r24, r1
    8c3e:	91 05       	cpc	r25, r1
    8c40:	7c f0       	brlt	.+30     	; 0x8c60 <task_twi2_lcd__gyro_gfxgyro+0x496>
    8c42:	2c eb       	ldi	r18, 0xBC	; 188
    8c44:	32 e0       	ldi	r19, 0x02	; 2
    8c46:	40 e0       	ldi	r20, 0x00	; 0
    8c48:	50 e0       	ldi	r21, 0x00	; 0
    8c4a:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    8c4e:	6a e0       	ldi	r22, 0x0A	; 10
    8c50:	82 e1       	ldi	r24, 0x12	; 18
    8c52:	82 0f       	add	r24, r18
    8c54:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <twi2_set_beep>
    8c58:	8d e7       	ldi	r24, 0x7D	; 125
    8c5a:	90 e0       	ldi	r25, 0x00	; 0
    8c5c:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    8c60:	65 96       	adiw	r28, 0x15	; 21
    8c62:	cd bf       	out	0x3d, r28	; 61
    8c64:	de bf       	out	0x3e, r29	; 62
    8c66:	df 91       	pop	r29
    8c68:	cf 91       	pop	r28
    8c6a:	1f 91       	pop	r17
    8c6c:	0f 91       	pop	r16
    8c6e:	ff 90       	pop	r15
    8c70:	ef 90       	pop	r14
    8c72:	df 90       	pop	r13
    8c74:	cf 90       	pop	r12
    8c76:	bf 90       	pop	r11
    8c78:	af 90       	pop	r10
    8c7a:	9f 90       	pop	r9
    8c7c:	8f 90       	pop	r8
    8c7e:	7f 90       	pop	r7
    8c80:	6f 90       	pop	r6
    8c82:	5f 90       	pop	r5
    8c84:	4f 90       	pop	r4
    8c86:	3f 90       	pop	r3
    8c88:	2f 90       	pop	r2
    8c8a:	08 95       	ret

00008c8c <task_twi2_lcd__gyro_beepvario>:
    8c8c:	cf 92       	push	r12
    8c8e:	df 92       	push	r13
    8c90:	ef 92       	push	r14
    8c92:	ff 92       	push	r15
    8c94:	cf 93       	push	r28
    8c96:	df 93       	push	r29
    8c98:	1f 92       	push	r1
    8c9a:	cd b7       	in	r28, 0x3d	; 61
    8c9c:	de b7       	in	r29, 0x3e	; 62
    8c9e:	8f b7       	in	r24, 0x3f	; 63
    8ca0:	89 83       	std	Y+1, r24	; 0x01
    8ca2:	f8 94       	cli
    8ca4:	89 81       	ldd	r24, Y+1	; 0x01
    8ca6:	c0 90 f4 26 	lds	r12, 0x26F4	; 0x8026f4 <g_twi1_baro_p_100>
    8caa:	d0 90 f5 26 	lds	r13, 0x26F5	; 0x8026f5 <g_twi1_baro_p_100+0x1>
    8cae:	e0 90 f6 26 	lds	r14, 0x26F6	; 0x8026f6 <g_twi1_baro_p_100+0x2>
    8cb2:	f0 90 f7 26 	lds	r15, 0x26F7	; 0x8026f7 <g_twi1_baro_p_100+0x3>
    8cb6:	8f bf       	out	0x3f, r24	; 63
    8cb8:	80 91 9b 28 	lds	r24, 0x289B	; 0x80289b <g_pitch_tone_mode>
    8cbc:	82 30       	cpi	r24, 0x02	; 2
    8cbe:	99 f5       	brne	.+102    	; 0x8d26 <task_twi2_lcd__gyro_beepvario+0x9a>
    8cc0:	40 91 f4 26 	lds	r20, 0x26F4	; 0x8026f4 <g_twi1_baro_p_100>
    8cc4:	50 91 f5 26 	lds	r21, 0x26F5	; 0x8026f5 <g_twi1_baro_p_100+0x1>
    8cc8:	60 91 f6 26 	lds	r22, 0x26F6	; 0x8026f6 <g_twi1_baro_p_100+0x2>
    8ccc:	70 91 f7 26 	lds	r23, 0x26F7	; 0x8026f7 <g_twi1_baro_p_100+0x3>
    8cd0:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_twi1_baro_p_100.8314>
    8cd4:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <s_twi1_baro_p_100.8314+0x1>
    8cd8:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <s_twi1_baro_p_100.8314+0x2>
    8cdc:	b0 91 09 20 	lds	r27, 0x2009	; 0x802009 <s_twi1_baro_p_100.8314+0x3>
    8ce0:	84 1b       	sub	r24, r20
    8ce2:	95 0b       	sbc	r25, r21
    8ce4:	a6 0b       	sbc	r26, r22
    8ce6:	b7 0b       	sbc	r27, r23
    8ce8:	8c 59       	subi	r24, 0x9C	; 156
    8cea:	9f 4f       	sbci	r25, 0xFF	; 255
    8cec:	af 4f       	sbci	r26, 0xFF	; 255
    8cee:	bf 4f       	sbci	r27, 0xFF	; 255
    8cf0:	8a 30       	cpi	r24, 0x0A	; 10
    8cf2:	91 05       	cpc	r25, r1
    8cf4:	a1 05       	cpc	r26, r1
    8cf6:	b1 05       	cpc	r27, r1
    8cf8:	58 f0       	brcs	.+22     	; 0x8d10 <task_twi2_lcd__gyro_beepvario+0x84>
    8cfa:	8f 3f       	cpi	r24, 0xFF	; 255
    8cfc:	91 05       	cpc	r25, r1
    8cfe:	a1 05       	cpc	r26, r1
    8d00:	b1 05       	cpc	r27, r1
    8d02:	51 f0       	breq	.+20     	; 0x8d18 <task_twi2_lcd__gyro_beepvario+0x8c>
    8d04:	48 f0       	brcs	.+18     	; 0x8d18 <task_twi2_lcd__gyro_beepvario+0x8c>
    8d06:	8f ef       	ldi	r24, 0xFF	; 255
    8d08:	90 e0       	ldi	r25, 0x00	; 0
    8d0a:	a0 e0       	ldi	r26, 0x00	; 0
    8d0c:	b0 e0       	ldi	r27, 0x00	; 0
    8d0e:	04 c0       	rjmp	.+8      	; 0x8d18 <task_twi2_lcd__gyro_beepvario+0x8c>
    8d10:	8a e0       	ldi	r24, 0x0A	; 10
    8d12:	90 e0       	ldi	r25, 0x00	; 0
    8d14:	a0 e0       	ldi	r26, 0x00	; 0
    8d16:	b0 e0       	ldi	r27, 0x00	; 0
    8d18:	6a e0       	ldi	r22, 0x0A	; 10
    8d1a:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <twi2_set_beep>
    8d1e:	8d e7       	ldi	r24, 0x7D	; 125
    8d20:	90 e0       	ldi	r25, 0x00	; 0
    8d22:	0e 94 35 71 	call	0xe26a	; 0xe26a <yield_ms>
    8d26:	c0 92 06 20 	sts	0x2006, r12	; 0x802006 <s_twi1_baro_p_100.8314>
    8d2a:	d0 92 07 20 	sts	0x2007, r13	; 0x802007 <s_twi1_baro_p_100.8314+0x1>
    8d2e:	e0 92 08 20 	sts	0x2008, r14	; 0x802008 <s_twi1_baro_p_100.8314+0x2>
    8d32:	f0 92 09 20 	sts	0x2009, r15	; 0x802009 <s_twi1_baro_p_100.8314+0x3>
    8d36:	0f 90       	pop	r0
    8d38:	df 91       	pop	r29
    8d3a:	cf 91       	pop	r28
    8d3c:	ff 90       	pop	r15
    8d3e:	ef 90       	pop	r14
    8d40:	df 90       	pop	r13
    8d42:	cf 90       	pop	r12
    8d44:	08 95       	ret

00008d46 <task_twi2_lcd__baro>:
    8d46:	bf 92       	push	r11
    8d48:	cf 92       	push	r12
    8d4a:	df 92       	push	r13
    8d4c:	ef 92       	push	r14
    8d4e:	ff 92       	push	r15
    8d50:	0f 93       	push	r16
    8d52:	1f 93       	push	r17
    8d54:	cf 93       	push	r28
    8d56:	df 93       	push	r29
    8d58:	1f 92       	push	r1
    8d5a:	cd b7       	in	r28, 0x3d	; 61
    8d5c:	de b7       	in	r29, 0x3e	; 62
    8d5e:	b8 2e       	mov	r11, r24
    8d60:	8f b7       	in	r24, 0x3f	; 63
    8d62:	89 83       	std	Y+1, r24	; 0x01
    8d64:	f8 94       	cli
    8d66:	29 81       	ldd	r18, Y+1	; 0x01
    8d68:	60 91 f8 26 	lds	r22, 0x26F8	; 0x8026f8 <g_twi1_baro_temp_100>
    8d6c:	70 91 f9 26 	lds	r23, 0x26F9	; 0x8026f9 <g_twi1_baro_temp_100+0x1>
    8d70:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <g_twi1_baro_temp_100+0x2>
    8d74:	90 91 fb 26 	lds	r25, 0x26FB	; 0x8026fb <g_twi1_baro_temp_100+0x3>
    8d78:	c0 90 f4 26 	lds	r12, 0x26F4	; 0x8026f4 <g_twi1_baro_p_100>
    8d7c:	d0 90 f5 26 	lds	r13, 0x26F5	; 0x8026f5 <g_twi1_baro_p_100+0x1>
    8d80:	e0 90 f6 26 	lds	r14, 0x26F6	; 0x8026f6 <g_twi1_baro_p_100+0x2>
    8d84:	f0 90 f7 26 	lds	r15, 0x26F7	; 0x8026f7 <g_twi1_baro_p_100+0x3>
    8d88:	2f bf       	out	0x3f, r18	; 63
    8d8a:	00 91 b7 22 	lds	r16, 0x22B7	; 0x8022b7 <s_twi1_baro_temp_100.8325>
    8d8e:	10 91 b8 22 	lds	r17, 0x22B8	; 0x8022b8 <s_twi1_baro_temp_100.8325+0x1>
    8d92:	20 91 b9 22 	lds	r18, 0x22B9	; 0x8022b9 <s_twi1_baro_temp_100.8325+0x2>
    8d96:	30 91 ba 22 	lds	r19, 0x22BA	; 0x8022ba <s_twi1_baro_temp_100.8325+0x3>
    8d9a:	60 17       	cp	r22, r16
    8d9c:	71 07       	cpc	r23, r17
    8d9e:	82 07       	cpc	r24, r18
    8da0:	93 07       	cpc	r25, r19
    8da2:	c1 f0       	breq	.+48     	; 0x8dd4 <task_twi2_lcd__baro+0x8e>
    8da4:	60 93 b7 22 	sts	0x22B7, r22	; 0x8022b7 <s_twi1_baro_temp_100.8325>
    8da8:	70 93 b8 22 	sts	0x22B8, r23	; 0x8022b8 <s_twi1_baro_temp_100.8325+0x1>
    8dac:	80 93 b9 22 	sts	0x22B9, r24	; 0x8022b9 <s_twi1_baro_temp_100.8325+0x2>
    8db0:	90 93 ba 22 	sts	0x22BA, r25	; 0x8022ba <s_twi1_baro_temp_100.8325+0x3>
    8db4:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    8db8:	20 e0       	ldi	r18, 0x00	; 0
    8dba:	30 e0       	ldi	r19, 0x00	; 0
    8dbc:	48 ec       	ldi	r20, 0xC8	; 200
    8dbe:	52 e4       	ldi	r21, 0x42	; 66
    8dc0:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    8dc4:	9b 01       	movw	r18, r22
    8dc6:	ac 01       	movw	r20, r24
    8dc8:	01 e2       	ldi	r16, 0x21	; 33
    8dca:	12 e3       	ldi	r17, 0x32	; 50
    8dcc:	6a e5       	ldi	r22, 0x5A	; 90
    8dce:	8b 2d       	mov	r24, r11
    8dd0:	0e 94 86 38 	call	0x710c	; 0x710c <task_twi2_lcd_print_format_float_P>
    8dd4:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <s_twi1_baro_p_100.8326>
    8dd8:	90 91 b4 22 	lds	r25, 0x22B4	; 0x8022b4 <s_twi1_baro_p_100.8326+0x1>
    8ddc:	a0 91 b5 22 	lds	r26, 0x22B5	; 0x8022b5 <s_twi1_baro_p_100.8326+0x2>
    8de0:	b0 91 b6 22 	lds	r27, 0x22B6	; 0x8022b6 <s_twi1_baro_p_100.8326+0x3>
    8de4:	c8 16       	cp	r12, r24
    8de6:	d9 06       	cpc	r13, r25
    8de8:	ea 06       	cpc	r14, r26
    8dea:	fb 06       	cpc	r15, r27
    8dec:	d1 f0       	breq	.+52     	; 0x8e22 <task_twi2_lcd__baro+0xdc>
    8dee:	c0 92 b3 22 	sts	0x22B3, r12	; 0x8022b3 <s_twi1_baro_p_100.8326>
    8df2:	d0 92 b4 22 	sts	0x22B4, r13	; 0x8022b4 <s_twi1_baro_p_100.8326+0x1>
    8df6:	e0 92 b5 22 	sts	0x22B5, r14	; 0x8022b5 <s_twi1_baro_p_100.8326+0x2>
    8dfa:	f0 92 b6 22 	sts	0x22B6, r15	; 0x8022b6 <s_twi1_baro_p_100.8326+0x3>
    8dfe:	c7 01       	movw	r24, r14
    8e00:	b6 01       	movw	r22, r12
    8e02:	0e 94 75 84 	call	0x108ea	; 0x108ea <__floatsisf>
    8e06:	20 e0       	ldi	r18, 0x00	; 0
    8e08:	30 e0       	ldi	r19, 0x00	; 0
    8e0a:	48 ec       	ldi	r20, 0xC8	; 200
    8e0c:	52 e4       	ldi	r21, 0x42	; 66
    8e0e:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    8e12:	9b 01       	movw	r18, r22
    8e14:	ac 01       	movw	r20, r24
    8e16:	0a e1       	ldi	r16, 0x1A	; 26
    8e18:	12 e3       	ldi	r17, 0x32	; 50
    8e1a:	64 e6       	ldi	r22, 0x64	; 100
    8e1c:	8b 2d       	mov	r24, r11
    8e1e:	0e 94 86 38 	call	0x710c	; 0x710c <task_twi2_lcd_print_format_float_P>
    8e22:	0f 90       	pop	r0
    8e24:	df 91       	pop	r29
    8e26:	cf 91       	pop	r28
    8e28:	1f 91       	pop	r17
    8e2a:	0f 91       	pop	r16
    8e2c:	ff 90       	pop	r15
    8e2e:	ef 90       	pop	r14
    8e30:	df 90       	pop	r13
    8e32:	cf 90       	pop	r12
    8e34:	bf 90       	pop	r11
    8e36:	08 95       	ret

00008e38 <task_twi>:
    8e38:	cf 92       	push	r12
    8e3a:	df 92       	push	r13
    8e3c:	ef 92       	push	r14
    8e3e:	0f 93       	push	r16
    8e40:	cf 93       	push	r28
    8e42:	df 93       	push	r29
    8e44:	1f 92       	push	r1
    8e46:	cd b7       	in	r28, 0x3d	; 61
    8e48:	de b7       	in	r29, 0x3e	; 62
    8e4a:	80 91 e9 26 	lds	r24, 0x26E9	; 0x8026e9 <g_twi2_lcd_version>
    8e4e:	81 31       	cpi	r24, 0x11	; 17
    8e50:	08 f4       	brcc	.+2      	; 0x8e54 <task_twi+0x1c>
    8e52:	67 c1       	rjmp	.+718    	; 0x9122 <task_twi+0x2ea>
    8e54:	80 91 e8 26 	lds	r24, 0x26E8	; 0x8026e8 <g_twi2_lcd_repaint>
    8e58:	88 23       	and	r24, r24
    8e5a:	09 f4       	brne	.+2      	; 0x8e5e <task_twi+0x26>
    8e5c:	b5 c0       	rjmp	.+362    	; 0x8fc8 <task_twi+0x190>
    8e5e:	10 92 e8 26 	sts	0x26E8, r1	; 0x8026e8 <g_twi2_lcd_repaint>
    8e62:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <task_twi2_lcd_header>
    8e66:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    8e6a:	88 23       	and	r24, r24
    8e6c:	21 f1       	breq	.+72     	; 0x8eb6 <task_twi+0x7e>
    8e6e:	48 e2       	ldi	r20, 0x28	; 40
    8e70:	51 e2       	ldi	r21, 0x21	; 33
    8e72:	64 e1       	ldi	r22, 0x14	; 20
    8e74:	80 e0       	ldi	r24, 0x00	; 0
    8e76:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8e7a:	42 e3       	ldi	r20, 0x32	; 50
    8e7c:	51 e2       	ldi	r21, 0x21	; 33
    8e7e:	6e e1       	ldi	r22, 0x1E	; 30
    8e80:	82 e1       	ldi	r24, 0x12	; 18
    8e82:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8e86:	49 e3       	ldi	r20, 0x39	; 57
    8e88:	51 e2       	ldi	r21, 0x21	; 33
    8e8a:	68 e2       	ldi	r22, 0x28	; 40
    8e8c:	82 e1       	ldi	r24, 0x12	; 18
    8e8e:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8e92:	40 e4       	ldi	r20, 0x40	; 64
    8e94:	51 e2       	ldi	r21, 0x21	; 33
    8e96:	62 e3       	ldi	r22, 0x32	; 50
    8e98:	80 e0       	ldi	r24, 0x00	; 0
    8e9a:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8e9e:	4a e4       	ldi	r20, 0x4A	; 74
    8ea0:	51 e2       	ldi	r21, 0x21	; 33
    8ea2:	6c e3       	ldi	r22, 0x3C	; 60
    8ea4:	80 e0       	ldi	r24, 0x00	; 0
    8ea6:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8eaa:	44 e5       	ldi	r20, 0x54	; 84
    8eac:	51 e2       	ldi	r21, 0x21	; 33
    8eae:	66 e4       	ldi	r22, 0x46	; 70
    8eb0:	80 e0       	ldi	r24, 0x00	; 0
    8eb2:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8eb6:	4e e5       	ldi	r20, 0x5E	; 94
    8eb8:	51 e2       	ldi	r21, 0x21	; 33
    8eba:	6a e5       	ldi	r22, 0x5A	; 90
    8ebc:	80 e0       	ldi	r24, 0x00	; 0
    8ebe:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8ec2:	48 e6       	ldi	r20, 0x68	; 104
    8ec4:	51 e2       	ldi	r21, 0x21	; 33
    8ec6:	64 e6       	ldi	r22, 0x64	; 100
    8ec8:	80 e0       	ldi	r24, 0x00	; 0
    8eca:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8ece:	42 e7       	ldi	r20, 0x72	; 114
    8ed0:	51 e2       	ldi	r21, 0x21	; 33
    8ed2:	6e e6       	ldi	r22, 0x6E	; 110
    8ed4:	80 e0       	ldi	r24, 0x00	; 0
    8ed6:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8eda:	4c e7       	ldi	r20, 0x7C	; 124
    8edc:	51 e2       	ldi	r21, 0x21	; 33
    8ede:	68 e7       	ldi	r22, 0x78	; 120
    8ee0:	80 e0       	ldi	r24, 0x00	; 0
    8ee2:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8ee6:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    8eea:	88 23       	and	r24, r24
    8eec:	21 f1       	breq	.+72     	; 0x8f36 <task_twi+0xfe>
    8eee:	46 e8       	ldi	r20, 0x86	; 134
    8ef0:	51 e2       	ldi	r21, 0x21	; 33
    8ef2:	64 e1       	ldi	r22, 0x14	; 20
    8ef4:	80 e6       	ldi	r24, 0x60	; 96
    8ef6:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8efa:	48 e8       	ldi	r20, 0x88	; 136
    8efc:	51 e2       	ldi	r21, 0x21	; 33
    8efe:	6e e1       	ldi	r22, 0x1E	; 30
    8f00:	80 e6       	ldi	r24, 0x60	; 96
    8f02:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8f06:	48 e8       	ldi	r20, 0x88	; 136
    8f08:	51 e2       	ldi	r21, 0x21	; 33
    8f0a:	68 e2       	ldi	r22, 0x28	; 40
    8f0c:	80 e6       	ldi	r24, 0x60	; 96
    8f0e:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8f12:	48 e8       	ldi	r20, 0x88	; 136
    8f14:	51 e2       	ldi	r21, 0x21	; 33
    8f16:	62 e3       	ldi	r22, 0x32	; 50
    8f18:	80 e6       	ldi	r24, 0x60	; 96
    8f1a:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8f1e:	48 e8       	ldi	r20, 0x88	; 136
    8f20:	51 e2       	ldi	r21, 0x21	; 33
    8f22:	6c e3       	ldi	r22, 0x3C	; 60
    8f24:	80 e6       	ldi	r24, 0x60	; 96
    8f26:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8f2a:	48 e8       	ldi	r20, 0x88	; 136
    8f2c:	51 e2       	ldi	r21, 0x21	; 33
    8f2e:	66 e4       	ldi	r22, 0x46	; 70
    8f30:	80 e6       	ldi	r24, 0x60	; 96
    8f32:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8f36:	46 e8       	ldi	r20, 0x86	; 134
    8f38:	51 e2       	ldi	r21, 0x21	; 33
    8f3a:	6a e5       	ldi	r22, 0x5A	; 90
    8f3c:	80 e6       	ldi	r24, 0x60	; 96
    8f3e:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8f42:	4a e8       	ldi	r20, 0x8A	; 138
    8f44:	51 e2       	ldi	r21, 0x21	; 33
    8f46:	64 e6       	ldi	r22, 0x64	; 100
    8f48:	8c e6       	ldi	r24, 0x6C	; 108
    8f4a:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8f4e:	46 e8       	ldi	r20, 0x86	; 134
    8f50:	51 e2       	ldi	r21, 0x21	; 33
    8f52:	6e e6       	ldi	r22, 0x6E	; 110
    8f54:	80 e6       	ldi	r24, 0x60	; 96
    8f56:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8f5a:	4e e8       	ldi	r20, 0x8E	; 142
    8f5c:	51 e2       	ldi	r21, 0x21	; 33
    8f5e:	68 e7       	ldi	r22, 0x78	; 120
    8f60:	80 e6       	ldi	r24, 0x60	; 96
    8f62:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8f66:	01 e0       	ldi	r16, 0x01	; 1
    8f68:	20 e0       	ldi	r18, 0x00	; 0
    8f6a:	4e e0       	ldi	r20, 0x0E	; 14
    8f6c:	64 e6       	ldi	r22, 0x64	; 100
    8f6e:	86 e9       	ldi	r24, 0x96	; 150
    8f70:	0e 94 c1 3b 	call	0x7782	; 0x7782 <task_twi2_lcd_circ>
    8f74:	20 e0       	ldi	r18, 0x00	; 0
    8f76:	4e e0       	ldi	r20, 0x0E	; 14
    8f78:	64 e6       	ldi	r22, 0x64	; 100
    8f7a:	84 eb       	ldi	r24, 0xB4	; 180
    8f7c:	0e 94 c1 3b 	call	0x7782	; 0x7782 <task_twi2_lcd_circ>
    8f80:	20 e0       	ldi	r18, 0x00	; 0
    8f82:	4e e0       	ldi	r20, 0x0E	; 14
    8f84:	64 e6       	ldi	r22, 0x64	; 100
    8f86:	82 ed       	ldi	r24, 0xD2	; 210
    8f88:	0e 94 c1 3b 	call	0x7782	; 0x7782 <task_twi2_lcd_circ>
    8f8c:	40 e9       	ldi	r20, 0x90	; 144
    8f8e:	51 e2       	ldi	r21, 0x21	; 33
    8f90:	66 e7       	ldi	r22, 0x76	; 118
    8f92:	82 e9       	ldi	r24, 0x92	; 146
    8f94:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8f98:	43 e9       	ldi	r20, 0x93	; 147
    8f9a:	51 e2       	ldi	r21, 0x21	; 33
    8f9c:	66 e7       	ldi	r22, 0x76	; 118
    8f9e:	80 eb       	ldi	r24, 0xB0	; 176
    8fa0:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8fa4:	46 e9       	ldi	r20, 0x96	; 150
    8fa6:	51 e2       	ldi	r21, 0x21	; 33
    8fa8:	66 e7       	ldi	r22, 0x76	; 118
    8faa:	8e ec       	ldi	r24, 0xCE	; 206
    8fac:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8fb0:	49 e9       	ldi	r20, 0x99	; 153
    8fb2:	51 e2       	ldi	r21, 0x21	; 33
    8fb4:	68 e4       	ldi	r22, 0x48	; 72
    8fb6:	81 e7       	ldi	r24, 0x71	; 113
    8fb8:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8fbc:	43 ea       	ldi	r20, 0xA3	; 163
    8fbe:	51 e2       	ldi	r21, 0x21	; 33
    8fc0:	68 e4       	ldi	r22, 0x48	; 72
    8fc2:	84 ec       	ldi	r24, 0xC4	; 196
    8fc4:	0e 94 c4 38 	call	0x7188	; 0x7188 <task_twi2_lcd_str>
    8fc8:	0b d9       	rcall	.-3562   	; 0x81e0 <task_twi2_lcd__gyro_gfxmag>
    8fca:	11 db       	rcall	.-2526   	; 0x85ee <task_twi2_lcd__gyro_gfxaccel>
    8fcc:	fe db       	rcall	.-2052   	; 0x87ca <task_twi2_lcd__gyro_gfxgyro>
    8fce:	5e de       	rcall	.-836    	; 0x8c8c <task_twi2_lcd__gyro_beepvario>
    8fd0:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <g_1pps_last_new>
    8fd4:	88 23       	and	r24, r24
    8fd6:	09 f4       	brne	.+2      	; 0x8fda <task_twi+0x1a2>
    8fd8:	5e c0       	rjmp	.+188    	; 0x9096 <task_twi+0x25e>
    8fda:	8f b7       	in	r24, 0x3f	; 63
    8fdc:	89 83       	std	Y+1, r24	; 0x01
    8fde:	f8 94       	cli
    8fe0:	89 81       	ldd	r24, Y+1	; 0x01
    8fe2:	c0 90 8f 28 	lds	r12, 0x288F	; 0x80288f <g_1pps_last_lo>
    8fe6:	d0 90 90 28 	lds	r13, 0x2890	; 0x802890 <g_1pps_last_lo+0x1>
    8fea:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <g_1pps_last_new>
    8fee:	8f bf       	out	0x3f, r24	; 63
    8ff0:	81 e0       	ldi	r24, 0x01	; 1
    8ff2:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <twi2_set_leds>
    8ff6:	e1 2c       	mov	r14, r1
    8ff8:	01 e0       	ldi	r16, 0x01	; 1
    8ffa:	23 e7       	ldi	r18, 0x73	; 115
    8ffc:	44 e0       	ldi	r20, 0x04	; 4
    8ffe:	6d e0       	ldi	r22, 0x0D	; 13
    9000:	8c ee       	ldi	r24, 0xEC	; 236
    9002:	0e 94 93 3b 	call	0x7726	; 0x7726 <task_twi2_lcd_rect>
    9006:	96 01       	movw	r18, r12
    9008:	a1 e7       	ldi	r26, 0x71	; 113
    900a:	bf e1       	ldi	r27, 0x1F	; 31
    900c:	0e 94 c3 87 	call	0x10f86	; 0x10f86 <__umulhisi3>
    9010:	28 1b       	sub	r18, r24
    9012:	39 0b       	sbc	r19, r25
    9014:	36 95       	lsr	r19
    9016:	27 95       	ror	r18
    9018:	82 0f       	add	r24, r18
    901a:	93 1f       	adc	r25, r19
    901c:	96 95       	lsr	r25
    901e:	87 95       	ror	r24
    9020:	92 95       	swap	r25
    9022:	82 95       	swap	r24
    9024:	8f 70       	andi	r24, 0x0F	; 15
    9026:	89 27       	eor	r24, r25
    9028:	9f 70       	andi	r25, 0x0F	; 15
    902a:	89 27       	eor	r24, r25
    902c:	49 e3       	ldi	r20, 0x39	; 57
    902e:	48 9f       	mul	r20, r24
    9030:	90 01       	movw	r18, r0
    9032:	49 9f       	mul	r20, r25
    9034:	30 0d       	add	r19, r0
    9036:	11 24       	eor	r1, r1
    9038:	c6 01       	movw	r24, r12
    903a:	82 1b       	sub	r24, r18
    903c:	93 0b       	sbc	r25, r19
    903e:	4c 97       	sbiw	r24, 0x1c	; 28
    9040:	a8 f4       	brcc	.+42     	; 0x906c <task_twi+0x234>
    9042:	b6 01       	movw	r22, r12
    9044:	80 e0       	ldi	r24, 0x00	; 0
    9046:	90 e0       	ldi	r25, 0x00	; 0
    9048:	29 e3       	ldi	r18, 0x39	; 57
    904a:	30 e0       	ldi	r19, 0x00	; 0
    904c:	40 e0       	ldi	r20, 0x00	; 0
    904e:	50 e0       	ldi	r21, 0x00	; 0
    9050:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
    9054:	26 2f       	mov	r18, r22
    9056:	86 e4       	ldi	r24, 0x46	; 70
    9058:	68 2f       	mov	r22, r24
    905a:	62 1b       	sub	r22, r18
    905c:	ee 24       	eor	r14, r14
    905e:	e3 94       	inc	r14
    9060:	00 e0       	ldi	r16, 0x00	; 0
    9062:	44 e0       	ldi	r20, 0x04	; 4
    9064:	8c ee       	ldi	r24, 0xEC	; 236
    9066:	0e 94 93 3b 	call	0x7726	; 0x7726 <task_twi2_lcd_rect>
    906a:	15 c0       	rjmp	.+42     	; 0x9096 <task_twi+0x25e>
    906c:	60 e3       	ldi	r22, 0x30	; 48
    906e:	75 e7       	ldi	r23, 0x75	; 117
    9070:	6c 19       	sub	r22, r12
    9072:	7d 09       	sbc	r23, r13
    9074:	80 e0       	ldi	r24, 0x00	; 0
    9076:	90 e0       	ldi	r25, 0x00	; 0
    9078:	29 e3       	ldi	r18, 0x39	; 57
    907a:	30 e0       	ldi	r19, 0x00	; 0
    907c:	40 e0       	ldi	r20, 0x00	; 0
    907e:	50 e0       	ldi	r21, 0x00	; 0
    9080:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
    9084:	26 2f       	mov	r18, r22
    9086:	ee 24       	eor	r14, r14
    9088:	e3 94       	inc	r14
    908a:	00 e0       	ldi	r16, 0x00	; 0
    908c:	44 e0       	ldi	r20, 0x04	; 4
    908e:	66 e4       	ldi	r22, 0x46	; 70
    9090:	8c ee       	ldi	r24, 0xEC	; 236
    9092:	0e 94 93 3b 	call	0x7726	; 0x7726 <task_twi2_lcd_rect>
    9096:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <s_lcd_entry_state.8333>
    909a:	82 30       	cpi	r24, 0x02	; 2
    909c:	29 f1       	breq	.+74     	; 0x90e8 <task_twi+0x2b0>
    909e:	28 f4       	brcc	.+10     	; 0x90aa <task_twi+0x272>
    90a0:	88 23       	and	r24, r24
    90a2:	41 f0       	breq	.+16     	; 0x90b4 <task_twi+0x27c>
    90a4:	81 30       	cpi	r24, 0x01	; 1
    90a6:	99 f0       	breq	.+38     	; 0x90ce <task_twi+0x296>
    90a8:	39 c0       	rjmp	.+114    	; 0x911c <task_twi+0x2e4>
    90aa:	83 30       	cpi	r24, 0x03	; 3
    90ac:	51 f1       	breq	.+84     	; 0x9102 <task_twi+0x2ca>
    90ae:	84 30       	cpi	r24, 0x04	; 4
    90b0:	81 f1       	breq	.+96     	; 0x9112 <task_twi+0x2da>
    90b2:	34 c0       	rjmp	.+104    	; 0x911c <task_twi+0x2e4>
    90b4:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    90b8:	88 23       	and	r24, r24
    90ba:	19 f0       	breq	.+6      	; 0x90c2 <task_twi+0x28a>
    90bc:	8c e3       	ldi	r24, 0x3C	; 60
    90be:	0e 94 79 3f 	call	0x7ef2	; 0x7ef2 <task_twi2_lcd__cpu1>
    90c2:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <s_lcd_entry_state.8333>
    90c6:	8f 5f       	subi	r24, 0xFF	; 255
    90c8:	80 93 b2 22 	sts	0x22B2, r24	; 0x8022b2 <s_lcd_entry_state.8333>
    90cc:	49 c0       	rjmp	.+146    	; 0x9160 <task_twi+0x328>
    90ce:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    90d2:	88 23       	and	r24, r24
    90d4:	19 f0       	breq	.+6      	; 0x90dc <task_twi+0x2a4>
    90d6:	8c e3       	ldi	r24, 0x3C	; 60
    90d8:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <task_twi2_lcd__cpu2>
    90dc:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <s_lcd_entry_state.8333>
    90e0:	8f 5f       	subi	r24, 0xFF	; 255
    90e2:	80 93 b2 22 	sts	0x22B2, r24	; 0x8022b2 <s_lcd_entry_state.8333>
    90e6:	3c c0       	rjmp	.+120    	; 0x9160 <task_twi+0x328>
    90e8:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    90ec:	88 23       	and	r24, r24
    90ee:	19 f0       	breq	.+6      	; 0x90f6 <task_twi+0x2be>
    90f0:	8c e3       	ldi	r24, 0x3C	; 60
    90f2:	0e 94 33 40 	call	0x8066	; 0x8066 <task_twi2_lcd__cpu3>
    90f6:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <s_lcd_entry_state.8333>
    90fa:	8f 5f       	subi	r24, 0xFF	; 255
    90fc:	80 93 b2 22 	sts	0x22B2, r24	; 0x8022b2 <s_lcd_entry_state.8333>
    9100:	2f c0       	rjmp	.+94     	; 0x9160 <task_twi+0x328>
    9102:	8c e3       	ldi	r24, 0x3C	; 60
    9104:	20 de       	rcall	.-960    	; 0x8d46 <task_twi2_lcd__baro>
    9106:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <s_lcd_entry_state.8333>
    910a:	8f 5f       	subi	r24, 0xFF	; 255
    910c:	80 93 b2 22 	sts	0x22B2, r24	; 0x8022b2 <s_lcd_entry_state.8333>
    9110:	27 c0       	rjmp	.+78     	; 0x9160 <task_twi+0x328>
    9112:	8c e3       	ldi	r24, 0x3C	; 60
    9114:	06 d8       	rcall	.-4084   	; 0x8122 <task_twi2_lcd__hygro>
    9116:	10 92 b2 22 	sts	0x22B2, r1	; 0x8022b2 <s_lcd_entry_state.8333>
    911a:	22 c0       	rjmp	.+68     	; 0x9160 <task_twi+0x328>
    911c:	10 92 b2 22 	sts	0x22B2, r1	; 0x8022b2 <s_lcd_entry_state.8333>
    9120:	1f c0       	rjmp	.+62     	; 0x9160 <task_twi+0x328>
    9122:	80 31       	cpi	r24, 0x10	; 16
    9124:	e9 f4       	brne	.+58     	; 0x9160 <task_twi+0x328>
    9126:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <twi2_waitUntilReady>
    912a:	e7 e1       	ldi	r30, 0x17	; 23
    912c:	f0 e2       	ldi	r31, 0x20	; 32
    912e:	84 e8       	ldi	r24, 0x84	; 132
    9130:	81 83       	std	Z+1, r24	; 0x01
    9132:	ab e0       	ldi	r26, 0x0B	; 11
    9134:	b5 e2       	ldi	r27, 0x25	; 37
    9136:	81 e0       	ldi	r24, 0x01	; 1
    9138:	8c 93       	st	X, r24
    913a:	80 e8       	ldi	r24, 0x80	; 128
    913c:	11 96       	adiw	r26, 0x01	; 1
    913e:	8c 93       	st	X, r24
    9140:	82 e0       	ldi	r24, 0x02	; 2
    9142:	90 e0       	ldi	r25, 0x00	; 0
    9144:	80 87       	std	Z+8, r24	; 0x08
    9146:	91 87       	std	Z+9, r25	; 0x09
    9148:	40 e0       	ldi	r20, 0x00	; 0
    914a:	bf 01       	movw	r22, r30
    914c:	80 e8       	ldi	r24, 0x80	; 128
    914e:	94 e0       	ldi	r25, 0x04	; 4
    9150:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <twi_master_transfer>
    9154:	69 e8       	ldi	r22, 0x89	; 137
    9156:	73 e1       	ldi	r23, 0x13	; 19
    9158:	80 e0       	ldi	r24, 0x00	; 0
    915a:	90 e0       	ldi	r25, 0x00	; 0
    915c:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__portable_avr_delay_cycles>
    9160:	80 e0       	ldi	r24, 0x00	; 0
    9162:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <twi2_set_leds>
    9166:	0f 90       	pop	r0
    9168:	df 91       	pop	r29
    916a:	cf 91       	pop	r28
    916c:	0f 91       	pop	r16
    916e:	ef 90       	pop	r14
    9170:	df 90       	pop	r13
    9172:	cf 90       	pop	r12
    9174:	08 95       	ret

00009176 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    9176:	08 95       	ret

00009178 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    9178:	cf 93       	push	r28
    917a:	df 93       	push	r29
    917c:	1f 92       	push	r1
    917e:	cd b7       	in	r28, 0x3d	; 61
    9180:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9182:	2f b7       	in	r18, 0x3f	; 63
    9184:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    9186:	f8 94       	cli
	return flags;
    9188:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    918a:	28 2f       	mov	r18, r24
    918c:	39 2f       	mov	r19, r25
    918e:	21 15       	cp	r18, r1
    9190:	82 e0       	ldi	r24, 0x02	; 2
    9192:	38 07       	cpc	r19, r24
    9194:	29 f4       	brne	.+10     	; 0x91a0 <adc_set_callback+0x28>
		adca_callback = callback;
    9196:	60 93 e3 2d 	sts	0x2DE3, r22	; 0x802de3 <adca_callback>
    919a:	70 93 e4 2d 	sts	0x2DE4, r23	; 0x802de4 <adca_callback+0x1>
    919e:	07 c0       	rjmp	.+14     	; 0x91ae <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    91a0:	20 34       	cpi	r18, 0x40	; 64
    91a2:	32 40       	sbci	r19, 0x02	; 2
    91a4:	21 f4       	brne	.+8      	; 0x91ae <adc_set_callback+0x36>
		adcb_callback = callback;
    91a6:	60 93 e1 2d 	sts	0x2DE1, r22	; 0x802de1 <adcb_callback>
    91aa:	70 93 e2 2d 	sts	0x2DE2, r23	; 0x802de2 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    91ae:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    91b0:	0f 90       	pop	r0
    91b2:	df 91       	pop	r29
    91b4:	cf 91       	pop	r28
    91b6:	08 95       	ret

000091b8 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    91b8:	81 15       	cp	r24, r1
    91ba:	22 e0       	ldi	r18, 0x02	; 2
    91bc:	92 07       	cpc	r25, r18
    91be:	69 f4       	brne	.+26     	; 0x91da <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    91c0:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <adca_enable_count>
    91c4:	91 e0       	ldi	r25, 0x01	; 1
    91c6:	98 0f       	add	r25, r24
    91c8:	90 93 0e 23 	sts	0x230E, r25	; 0x80230e <adca_enable_count>
    91cc:	81 11       	cpse	r24, r1
    91ce:	14 c0       	rjmp	.+40     	; 0x91f8 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    91d0:	62 e0       	ldi	r22, 0x02	; 2
    91d2:	81 e0       	ldi	r24, 0x01	; 1
    91d4:	0c 94 b9 74 	jmp	0xe972	; 0xe972 <sysclk_enable_module>
    91d8:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    91da:	80 34       	cpi	r24, 0x40	; 64
    91dc:	92 40       	sbci	r25, 0x02	; 2
    91de:	61 f4       	brne	.+24     	; 0x91f8 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    91e0:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <adcb_enable_count>
    91e4:	91 e0       	ldi	r25, 0x01	; 1
    91e6:	98 0f       	add	r25, r24
    91e8:	90 93 0d 23 	sts	0x230D, r25	; 0x80230d <adcb_enable_count>
    91ec:	81 11       	cpse	r24, r1
    91ee:	04 c0       	rjmp	.+8      	; 0x91f8 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    91f0:	62 e0       	ldi	r22, 0x02	; 2
    91f2:	82 e0       	ldi	r24, 0x02	; 2
    91f4:	0c 94 b9 74 	jmp	0xe972	; 0xe972 <sysclk_enable_module>
    91f8:	08 95       	ret

000091fa <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    91fa:	81 15       	cp	r24, r1
    91fc:	22 e0       	ldi	r18, 0x02	; 2
    91fe:	92 07       	cpc	r25, r18
    9200:	61 f4       	brne	.+24     	; 0x921a <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    9202:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <adca_enable_count>
    9206:	81 50       	subi	r24, 0x01	; 1
    9208:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <adca_enable_count>
    920c:	81 11       	cpse	r24, r1
    920e:	13 c0       	rjmp	.+38     	; 0x9236 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    9210:	62 e0       	ldi	r22, 0x02	; 2
    9212:	81 e0       	ldi	r24, 0x01	; 1
    9214:	0c 94 cf 74 	jmp	0xe99e	; 0xe99e <sysclk_disable_module>
    9218:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    921a:	80 34       	cpi	r24, 0x40	; 64
    921c:	92 40       	sbci	r25, 0x02	; 2
    921e:	59 f4       	brne	.+22     	; 0x9236 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    9220:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <adcb_enable_count>
    9224:	81 50       	subi	r24, 0x01	; 1
    9226:	80 93 0d 23 	sts	0x230D, r24	; 0x80230d <adcb_enable_count>
    922a:	81 11       	cpse	r24, r1
    922c:	04 c0       	rjmp	.+8      	; 0x9236 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    922e:	62 e0       	ldi	r22, 0x02	; 2
    9230:	82 e0       	ldi	r24, 0x02	; 2
    9232:	0c 94 cf 74 	jmp	0xe99e	; 0xe99e <sysclk_disable_module>
    9236:	08 95       	ret

00009238 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    9238:	ef 92       	push	r14
    923a:	ff 92       	push	r15
    923c:	1f 93       	push	r17
    923e:	cf 93       	push	r28
    9240:	df 93       	push	r29
    9242:	1f 92       	push	r1
    9244:	1f 92       	push	r1
    9246:	cd b7       	in	r28, 0x3d	; 61
    9248:	de b7       	in	r29, 0x3e	; 62
    924a:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    924c:	8f b7       	in	r24, 0x3f	; 63
    924e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9250:	f8 94       	cli
	return flags;
    9252:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    9254:	c7 01       	movw	r24, r14
    9256:	b0 df       	rcall	.-160    	; 0x91b8 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    9258:	f7 01       	movw	r30, r14
    925a:	80 81       	ld	r24, Z
    925c:	81 60       	ori	r24, 0x01	; 1
    925e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9260:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    9262:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    9266:	8f 3f       	cpi	r24, 0xFF	; 255
    9268:	09 f4       	brne	.+2      	; 0x926c <adc_enable+0x34>
    926a:	ff cf       	rjmp	.-2      	; 0x926a <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    926c:	8f b7       	in	r24, 0x3f	; 63
    926e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    9270:	f8 94       	cli
	return flags;
    9272:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    9274:	eb e7       	ldi	r30, 0x7B	; 123
    9276:	fe e2       	ldi	r31, 0x2E	; 46
    9278:	81 81       	ldd	r24, Z+1	; 0x01
    927a:	8f 5f       	subi	r24, 0xFF	; 255
    927c:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    927e:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    9280:	0f 90       	pop	r0
    9282:	0f 90       	pop	r0
    9284:	df 91       	pop	r29
    9286:	cf 91       	pop	r28
    9288:	1f 91       	pop	r17
    928a:	ff 90       	pop	r15
    928c:	ef 90       	pop	r14
    928e:	08 95       	ret

00009290 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    9290:	1f 93       	push	r17
    9292:	cf 93       	push	r28
    9294:	df 93       	push	r29
    9296:	1f 92       	push	r1
    9298:	1f 92       	push	r1
    929a:	cd b7       	in	r28, 0x3d	; 61
    929c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    929e:	2f b7       	in	r18, 0x3f	; 63
    92a0:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    92a2:	f8 94       	cli
	return flags;
    92a4:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    92a6:	fc 01       	movw	r30, r24
    92a8:	20 81       	ld	r18, Z
    92aa:	2e 7f       	andi	r18, 0xFE	; 254
	adc_disable_clock(adc);
    92ac:	20 83       	st	Z, r18
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    92ae:	a5 df       	rcall	.-182    	; 0x91fa <adc_disable_clock>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    92b0:	1f bf       	out	0x3f, r17	; 63
    92b2:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    92b6:	81 11       	cpse	r24, r1
    92b8:	01 c0       	rjmp	.+2      	; 0x92bc <adc_disable+0x2c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    92ba:	ff cf       	rjmp	.-2      	; 0x92ba <adc_disable+0x2a>
    92bc:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    92be:	8a 83       	std	Y+2, r24	; 0x02
	return flags;
    92c0:	f8 94       	cli
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    92c2:	9a 81       	ldd	r25, Y+2	; 0x02
    92c4:	eb e7       	ldi	r30, 0x7B	; 123
    92c6:	fe e2       	ldi	r31, 0x2E	; 46
    92c8:	81 81       	ldd	r24, Z+1	; 0x01
    92ca:	81 50       	subi	r24, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    92cc:	81 83       	std	Z+1, r24	; 0x01
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    92ce:	9f bf       	out	0x3f, r25	; 63
    92d0:	0f 90       	pop	r0
    92d2:	0f 90       	pop	r0
    92d4:	df 91       	pop	r29
    92d6:	cf 91       	pop	r28
    92d8:	1f 91       	pop	r17
    92da:	08 95       	ret

000092dc <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    92dc:	1f 92       	push	r1
    92de:	0f 92       	push	r0
    92e0:	0f b6       	in	r0, 0x3f	; 63
    92e2:	0f 92       	push	r0
    92e4:	11 24       	eor	r1, r1
    92e6:	0b b6       	in	r0, 0x3b	; 59
    92e8:	0f 92       	push	r0
    92ea:	2f 93       	push	r18
    92ec:	3f 93       	push	r19
    92ee:	4f 93       	push	r20
    92f0:	5f 93       	push	r21
    92f2:	6f 93       	push	r22
    92f4:	7f 93       	push	r23
    92f6:	8f 93       	push	r24
    92f8:	9f 93       	push	r25
    92fa:	af 93       	push	r26
    92fc:	bf 93       	push	r27
    92fe:	ef 93       	push	r30
    9300:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    9302:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    9306:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    930a:	e0 91 e3 2d 	lds	r30, 0x2DE3	; 0x802de3 <adca_callback>
    930e:	f0 91 e4 2d 	lds	r31, 0x2DE4	; 0x802de4 <adca_callback+0x1>
    9312:	61 e0       	ldi	r22, 0x01	; 1
    9314:	80 e0       	ldi	r24, 0x00	; 0
    9316:	92 e0       	ldi	r25, 0x02	; 2
    9318:	19 95       	eicall
}
    931a:	ff 91       	pop	r31
    931c:	ef 91       	pop	r30
    931e:	bf 91       	pop	r27
    9320:	af 91       	pop	r26
    9322:	9f 91       	pop	r25
    9324:	8f 91       	pop	r24
    9326:	7f 91       	pop	r23
    9328:	6f 91       	pop	r22
    932a:	5f 91       	pop	r21
    932c:	4f 91       	pop	r20
    932e:	3f 91       	pop	r19
    9330:	2f 91       	pop	r18
    9332:	0f 90       	pop	r0
    9334:	0b be       	out	0x3b, r0	; 59
    9336:	0f 90       	pop	r0
    9338:	0f be       	out	0x3f, r0	; 63
    933a:	0f 90       	pop	r0
    933c:	1f 90       	pop	r1
    933e:	18 95       	reti

00009340 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    9340:	1f 92       	push	r1
    9342:	0f 92       	push	r0
    9344:	0f b6       	in	r0, 0x3f	; 63
    9346:	0f 92       	push	r0
    9348:	11 24       	eor	r1, r1
    934a:	0b b6       	in	r0, 0x3b	; 59
    934c:	0f 92       	push	r0
    934e:	2f 93       	push	r18
    9350:	3f 93       	push	r19
    9352:	4f 93       	push	r20
    9354:	5f 93       	push	r21
    9356:	6f 93       	push	r22
    9358:	7f 93       	push	r23
    935a:	8f 93       	push	r24
    935c:	9f 93       	push	r25
    935e:	af 93       	push	r26
    9360:	bf 93       	push	r27
    9362:	ef 93       	push	r30
    9364:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    9366:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    936a:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    936e:	e0 91 e3 2d 	lds	r30, 0x2DE3	; 0x802de3 <adca_callback>
    9372:	f0 91 e4 2d 	lds	r31, 0x2DE4	; 0x802de4 <adca_callback+0x1>
    9376:	62 e0       	ldi	r22, 0x02	; 2
    9378:	80 e0       	ldi	r24, 0x00	; 0
    937a:	92 e0       	ldi	r25, 0x02	; 2
    937c:	19 95       	eicall
}
    937e:	ff 91       	pop	r31
    9380:	ef 91       	pop	r30
    9382:	bf 91       	pop	r27
    9384:	af 91       	pop	r26
    9386:	9f 91       	pop	r25
    9388:	8f 91       	pop	r24
    938a:	7f 91       	pop	r23
    938c:	6f 91       	pop	r22
    938e:	5f 91       	pop	r21
    9390:	4f 91       	pop	r20
    9392:	3f 91       	pop	r19
    9394:	2f 91       	pop	r18
    9396:	0f 90       	pop	r0
    9398:	0b be       	out	0x3b, r0	; 59
    939a:	0f 90       	pop	r0
    939c:	0f be       	out	0x3f, r0	; 63
    939e:	0f 90       	pop	r0
    93a0:	1f 90       	pop	r1
    93a2:	18 95       	reti

000093a4 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    93a4:	1f 92       	push	r1
    93a6:	0f 92       	push	r0
    93a8:	0f b6       	in	r0, 0x3f	; 63
    93aa:	0f 92       	push	r0
    93ac:	11 24       	eor	r1, r1
    93ae:	0b b6       	in	r0, 0x3b	; 59
    93b0:	0f 92       	push	r0
    93b2:	2f 93       	push	r18
    93b4:	3f 93       	push	r19
    93b6:	4f 93       	push	r20
    93b8:	5f 93       	push	r21
    93ba:	6f 93       	push	r22
    93bc:	7f 93       	push	r23
    93be:	8f 93       	push	r24
    93c0:	9f 93       	push	r25
    93c2:	af 93       	push	r26
    93c4:	bf 93       	push	r27
    93c6:	ef 93       	push	r30
    93c8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    93ca:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    93ce:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    93d2:	e0 91 e3 2d 	lds	r30, 0x2DE3	; 0x802de3 <adca_callback>
    93d6:	f0 91 e4 2d 	lds	r31, 0x2DE4	; 0x802de4 <adca_callback+0x1>
    93da:	64 e0       	ldi	r22, 0x04	; 4
    93dc:	80 e0       	ldi	r24, 0x00	; 0
    93de:	92 e0       	ldi	r25, 0x02	; 2
    93e0:	19 95       	eicall
}
    93e2:	ff 91       	pop	r31
    93e4:	ef 91       	pop	r30
    93e6:	bf 91       	pop	r27
    93e8:	af 91       	pop	r26
    93ea:	9f 91       	pop	r25
    93ec:	8f 91       	pop	r24
    93ee:	7f 91       	pop	r23
    93f0:	6f 91       	pop	r22
    93f2:	5f 91       	pop	r21
    93f4:	4f 91       	pop	r20
    93f6:	3f 91       	pop	r19
    93f8:	2f 91       	pop	r18
    93fa:	0f 90       	pop	r0
    93fc:	0b be       	out	0x3b, r0	; 59
    93fe:	0f 90       	pop	r0
    9400:	0f be       	out	0x3f, r0	; 63
    9402:	0f 90       	pop	r0
    9404:	1f 90       	pop	r1
    9406:	18 95       	reti

00009408 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    9408:	1f 92       	push	r1
    940a:	0f 92       	push	r0
    940c:	0f b6       	in	r0, 0x3f	; 63
    940e:	0f 92       	push	r0
    9410:	11 24       	eor	r1, r1
    9412:	0b b6       	in	r0, 0x3b	; 59
    9414:	0f 92       	push	r0
    9416:	2f 93       	push	r18
    9418:	3f 93       	push	r19
    941a:	4f 93       	push	r20
    941c:	5f 93       	push	r21
    941e:	6f 93       	push	r22
    9420:	7f 93       	push	r23
    9422:	8f 93       	push	r24
    9424:	9f 93       	push	r25
    9426:	af 93       	push	r26
    9428:	bf 93       	push	r27
    942a:	ef 93       	push	r30
    942c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    942e:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    9432:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    9436:	e0 91 e3 2d 	lds	r30, 0x2DE3	; 0x802de3 <adca_callback>
    943a:	f0 91 e4 2d 	lds	r31, 0x2DE4	; 0x802de4 <adca_callback+0x1>
    943e:	68 e0       	ldi	r22, 0x08	; 8
    9440:	80 e0       	ldi	r24, 0x00	; 0
    9442:	92 e0       	ldi	r25, 0x02	; 2
    9444:	19 95       	eicall
}
    9446:	ff 91       	pop	r31
    9448:	ef 91       	pop	r30
    944a:	bf 91       	pop	r27
    944c:	af 91       	pop	r26
    944e:	9f 91       	pop	r25
    9450:	8f 91       	pop	r24
    9452:	7f 91       	pop	r23
    9454:	6f 91       	pop	r22
    9456:	5f 91       	pop	r21
    9458:	4f 91       	pop	r20
    945a:	3f 91       	pop	r19
    945c:	2f 91       	pop	r18
    945e:	0f 90       	pop	r0
    9460:	0b be       	out	0x3b, r0	; 59
    9462:	0f 90       	pop	r0
    9464:	0f be       	out	0x3f, r0	; 63
    9466:	0f 90       	pop	r0
    9468:	1f 90       	pop	r1
    946a:	18 95       	reti

0000946c <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    946c:	1f 92       	push	r1
    946e:	0f 92       	push	r0
    9470:	0f b6       	in	r0, 0x3f	; 63
    9472:	0f 92       	push	r0
    9474:	11 24       	eor	r1, r1
    9476:	0b b6       	in	r0, 0x3b	; 59
    9478:	0f 92       	push	r0
    947a:	2f 93       	push	r18
    947c:	3f 93       	push	r19
    947e:	4f 93       	push	r20
    9480:	5f 93       	push	r21
    9482:	6f 93       	push	r22
    9484:	7f 93       	push	r23
    9486:	8f 93       	push	r24
    9488:	9f 93       	push	r25
    948a:	af 93       	push	r26
    948c:	bf 93       	push	r27
    948e:	ef 93       	push	r30
    9490:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    9492:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    9496:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    949a:	e0 91 e1 2d 	lds	r30, 0x2DE1	; 0x802de1 <adcb_callback>
    949e:	f0 91 e2 2d 	lds	r31, 0x2DE2	; 0x802de2 <adcb_callback+0x1>
    94a2:	61 e0       	ldi	r22, 0x01	; 1
    94a4:	80 e4       	ldi	r24, 0x40	; 64
    94a6:	92 e0       	ldi	r25, 0x02	; 2
    94a8:	19 95       	eicall
}
    94aa:	ff 91       	pop	r31
    94ac:	ef 91       	pop	r30
    94ae:	bf 91       	pop	r27
    94b0:	af 91       	pop	r26
    94b2:	9f 91       	pop	r25
    94b4:	8f 91       	pop	r24
    94b6:	7f 91       	pop	r23
    94b8:	6f 91       	pop	r22
    94ba:	5f 91       	pop	r21
    94bc:	4f 91       	pop	r20
    94be:	3f 91       	pop	r19
    94c0:	2f 91       	pop	r18
    94c2:	0f 90       	pop	r0
    94c4:	0b be       	out	0x3b, r0	; 59
    94c6:	0f 90       	pop	r0
    94c8:	0f be       	out	0x3f, r0	; 63
    94ca:	0f 90       	pop	r0
    94cc:	1f 90       	pop	r1
    94ce:	18 95       	reti

000094d0 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    94d0:	1f 92       	push	r1
    94d2:	0f 92       	push	r0
    94d4:	0f b6       	in	r0, 0x3f	; 63
    94d6:	0f 92       	push	r0
    94d8:	11 24       	eor	r1, r1
    94da:	0b b6       	in	r0, 0x3b	; 59
    94dc:	0f 92       	push	r0
    94de:	2f 93       	push	r18
    94e0:	3f 93       	push	r19
    94e2:	4f 93       	push	r20
    94e4:	5f 93       	push	r21
    94e6:	6f 93       	push	r22
    94e8:	7f 93       	push	r23
    94ea:	8f 93       	push	r24
    94ec:	9f 93       	push	r25
    94ee:	af 93       	push	r26
    94f0:	bf 93       	push	r27
    94f2:	ef 93       	push	r30
    94f4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    94f6:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    94fa:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    94fe:	e0 91 e1 2d 	lds	r30, 0x2DE1	; 0x802de1 <adcb_callback>
    9502:	f0 91 e2 2d 	lds	r31, 0x2DE2	; 0x802de2 <adcb_callback+0x1>
    9506:	62 e0       	ldi	r22, 0x02	; 2
    9508:	80 e4       	ldi	r24, 0x40	; 64
    950a:	92 e0       	ldi	r25, 0x02	; 2
    950c:	19 95       	eicall
}
    950e:	ff 91       	pop	r31
    9510:	ef 91       	pop	r30
    9512:	bf 91       	pop	r27
    9514:	af 91       	pop	r26
    9516:	9f 91       	pop	r25
    9518:	8f 91       	pop	r24
    951a:	7f 91       	pop	r23
    951c:	6f 91       	pop	r22
    951e:	5f 91       	pop	r21
    9520:	4f 91       	pop	r20
    9522:	3f 91       	pop	r19
    9524:	2f 91       	pop	r18
    9526:	0f 90       	pop	r0
    9528:	0b be       	out	0x3b, r0	; 59
    952a:	0f 90       	pop	r0
    952c:	0f be       	out	0x3f, r0	; 63
    952e:	0f 90       	pop	r0
    9530:	1f 90       	pop	r1
    9532:	18 95       	reti

00009534 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    9534:	1f 92       	push	r1
    9536:	0f 92       	push	r0
    9538:	0f b6       	in	r0, 0x3f	; 63
    953a:	0f 92       	push	r0
    953c:	11 24       	eor	r1, r1
    953e:	0b b6       	in	r0, 0x3b	; 59
    9540:	0f 92       	push	r0
    9542:	2f 93       	push	r18
    9544:	3f 93       	push	r19
    9546:	4f 93       	push	r20
    9548:	5f 93       	push	r21
    954a:	6f 93       	push	r22
    954c:	7f 93       	push	r23
    954e:	8f 93       	push	r24
    9550:	9f 93       	push	r25
    9552:	af 93       	push	r26
    9554:	bf 93       	push	r27
    9556:	ef 93       	push	r30
    9558:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    955a:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    955e:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    9562:	e0 91 e1 2d 	lds	r30, 0x2DE1	; 0x802de1 <adcb_callback>
    9566:	f0 91 e2 2d 	lds	r31, 0x2DE2	; 0x802de2 <adcb_callback+0x1>
    956a:	64 e0       	ldi	r22, 0x04	; 4
    956c:	80 e4       	ldi	r24, 0x40	; 64
    956e:	92 e0       	ldi	r25, 0x02	; 2
    9570:	19 95       	eicall
}
    9572:	ff 91       	pop	r31
    9574:	ef 91       	pop	r30
    9576:	bf 91       	pop	r27
    9578:	af 91       	pop	r26
    957a:	9f 91       	pop	r25
    957c:	8f 91       	pop	r24
    957e:	7f 91       	pop	r23
    9580:	6f 91       	pop	r22
    9582:	5f 91       	pop	r21
    9584:	4f 91       	pop	r20
    9586:	3f 91       	pop	r19
    9588:	2f 91       	pop	r18
    958a:	0f 90       	pop	r0
    958c:	0b be       	out	0x3b, r0	; 59
    958e:	0f 90       	pop	r0
    9590:	0f be       	out	0x3f, r0	; 63
    9592:	0f 90       	pop	r0
    9594:	1f 90       	pop	r1
    9596:	18 95       	reti

00009598 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    9598:	1f 92       	push	r1
    959a:	0f 92       	push	r0
    959c:	0f b6       	in	r0, 0x3f	; 63
    959e:	0f 92       	push	r0
    95a0:	11 24       	eor	r1, r1
    95a2:	0b b6       	in	r0, 0x3b	; 59
    95a4:	0f 92       	push	r0
    95a6:	2f 93       	push	r18
    95a8:	3f 93       	push	r19
    95aa:	4f 93       	push	r20
    95ac:	5f 93       	push	r21
    95ae:	6f 93       	push	r22
    95b0:	7f 93       	push	r23
    95b2:	8f 93       	push	r24
    95b4:	9f 93       	push	r25
    95b6:	af 93       	push	r26
    95b8:	bf 93       	push	r27
    95ba:	ef 93       	push	r30
    95bc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    95be:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    95c2:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    95c6:	e0 91 e1 2d 	lds	r30, 0x2DE1	; 0x802de1 <adcb_callback>
    95ca:	f0 91 e2 2d 	lds	r31, 0x2DE2	; 0x802de2 <adcb_callback+0x1>
    95ce:	68 e0       	ldi	r22, 0x08	; 8
    95d0:	80 e4       	ldi	r24, 0x40	; 64
    95d2:	92 e0       	ldi	r25, 0x02	; 2
    95d4:	19 95       	eicall
}
    95d6:	ff 91       	pop	r31
    95d8:	ef 91       	pop	r30
    95da:	bf 91       	pop	r27
    95dc:	af 91       	pop	r26
    95de:	9f 91       	pop	r25
    95e0:	8f 91       	pop	r24
    95e2:	7f 91       	pop	r23
    95e4:	6f 91       	pop	r22
    95e6:	5f 91       	pop	r21
    95e8:	4f 91       	pop	r20
    95ea:	3f 91       	pop	r19
    95ec:	2f 91       	pop	r18
    95ee:	0f 90       	pop	r0
    95f0:	0b be       	out	0x3b, r0	; 59
    95f2:	0f 90       	pop	r0
    95f4:	0f be       	out	0x3f, r0	; 63
    95f6:	0f 90       	pop	r0
    95f8:	1f 90       	pop	r1
    95fa:	18 95       	reti

000095fc <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    95fc:	bf 92       	push	r11
    95fe:	cf 92       	push	r12
    9600:	df 92       	push	r13
    9602:	ef 92       	push	r14
    9604:	ff 92       	push	r15
    9606:	0f 93       	push	r16
    9608:	1f 93       	push	r17
    960a:	cf 93       	push	r28
    960c:	df 93       	push	r29
    960e:	1f 92       	push	r1
    9610:	cd b7       	in	r28, 0x3d	; 61
    9612:	de b7       	in	r29, 0x3e	; 62
    9614:	8c 01       	movw	r16, r24
    9616:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    9618:	81 15       	cp	r24, r1
    961a:	22 e0       	ldi	r18, 0x02	; 2
    961c:	92 07       	cpc	r25, r18
    961e:	81 f4       	brne	.+32     	; 0x9640 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    9620:	61 e2       	ldi	r22, 0x21	; 33
    9622:	70 e0       	ldi	r23, 0x00	; 0
    9624:	82 e0       	ldi	r24, 0x02	; 2
    9626:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    962a:	c8 2e       	mov	r12, r24
    962c:	d1 2c       	mov	r13, r1
    962e:	60 e2       	ldi	r22, 0x20	; 32
    9630:	70 e0       	ldi	r23, 0x00	; 0
    9632:	82 e0       	ldi	r24, 0x02	; 2
    9634:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    9638:	dc 2c       	mov	r13, r12
    963a:	cc 24       	eor	r12, r12
    963c:	c8 2a       	or	r12, r24
    963e:	12 c0       	rjmp	.+36     	; 0x9664 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    9640:	80 34       	cpi	r24, 0x40	; 64
    9642:	92 40       	sbci	r25, 0x02	; 2
    9644:	d1 f5       	brne	.+116    	; 0x96ba <adc_write_configuration+0xbe>
    9646:	65 e2       	ldi	r22, 0x25	; 37
    9648:	70 e0       	ldi	r23, 0x00	; 0
    964a:	82 e0       	ldi	r24, 0x02	; 2
    964c:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    9650:	c8 2e       	mov	r12, r24
    9652:	d1 2c       	mov	r13, r1
    9654:	64 e2       	ldi	r22, 0x24	; 36
    9656:	70 e0       	ldi	r23, 0x00	; 0
    9658:	82 e0       	ldi	r24, 0x02	; 2
    965a:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    965e:	dc 2c       	mov	r13, r12
    9660:	cc 24       	eor	r12, r12
    9662:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9664:	8f b7       	in	r24, 0x3f	; 63
    9666:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9668:	f8 94       	cli
	return flags;
    966a:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    966c:	c8 01       	movw	r24, r16
    966e:	a4 dd       	rcall	.-1208   	; 0x91b8 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    9670:	f8 01       	movw	r30, r16
    9672:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    9674:	92 e0       	ldi	r25, 0x02	; 2
    9676:	90 83       	st	Z, r25
	adc->CAL = cal;
    9678:	c4 86       	std	Z+12, r12	; 0x0c
    967a:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    967c:	f7 01       	movw	r30, r14
    967e:	25 81       	ldd	r18, Z+5	; 0x05
    9680:	36 81       	ldd	r19, Z+6	; 0x06
    9682:	f8 01       	movw	r30, r16
    9684:	20 8f       	std	Z+24, r18	; 0x18
    9686:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    9688:	f7 01       	movw	r30, r14
    968a:	92 81       	ldd	r25, Z+2	; 0x02
    968c:	f8 01       	movw	r30, r16
    968e:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    9690:	f7 01       	movw	r30, r14
    9692:	94 81       	ldd	r25, Z+4	; 0x04
    9694:	f8 01       	movw	r30, r16
    9696:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    9698:	f7 01       	movw	r30, r14
    969a:	93 81       	ldd	r25, Z+3	; 0x03
    969c:	f8 01       	movw	r30, r16
    969e:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    96a0:	f7 01       	movw	r30, r14
    96a2:	91 81       	ldd	r25, Z+1	; 0x01
    96a4:	f8 01       	movw	r30, r16
    96a6:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    96a8:	81 70       	andi	r24, 0x01	; 1
    96aa:	f7 01       	movw	r30, r14
    96ac:	90 81       	ld	r25, Z
    96ae:	89 2b       	or	r24, r25
    96b0:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    96b2:	80 83       	st	Z, r24
    96b4:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    96b6:	a1 dd       	rcall	.-1214   	; 0x91fa <adc_disable_clock>

	cpu_irq_restore(flags);
}
    96b8:	bf be       	out	0x3f, r11	; 63
    96ba:	0f 90       	pop	r0
    96bc:	df 91       	pop	r29
    96be:	cf 91       	pop	r28
    96c0:	1f 91       	pop	r17
    96c2:	0f 91       	pop	r16
    96c4:	ff 90       	pop	r15
    96c6:	ef 90       	pop	r14
    96c8:	df 90       	pop	r13
    96ca:	cf 90       	pop	r12
    96cc:	bf 90       	pop	r11
    96ce:	08 95       	ret

000096d0 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    96d0:	df 92       	push	r13
    96d2:	ef 92       	push	r14
    96d4:	ff 92       	push	r15
    96d6:	0f 93       	push	r16
    96d8:	1f 93       	push	r17
    96da:	cf 93       	push	r28
    96dc:	df 93       	push	r29
    96de:	1f 92       	push	r1
    96e0:	cd b7       	in	r28, 0x3d	; 61
    96e2:	de b7       	in	r29, 0x3e	; 62
    96e4:	8c 01       	movw	r16, r24
    96e6:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    96e8:	8f b7       	in	r24, 0x3f	; 63
    96ea:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    96ec:	f8 94       	cli
	return flags;
    96ee:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    96f0:	c8 01       	movw	r24, r16
    96f2:	62 dd       	rcall	.-1340   	; 0x91b8 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    96f4:	f8 01       	movw	r30, r16
    96f6:	80 81       	ld	r24, Z
    96f8:	80 7c       	andi	r24, 0xC0	; 192
    96fa:	f7 01       	movw	r30, r14
    96fc:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    96fe:	f8 01       	movw	r30, r16
    9700:	80 8d       	ldd	r24, Z+24	; 0x18
    9702:	91 8d       	ldd	r25, Z+25	; 0x19
    9704:	f7 01       	movw	r30, r14
    9706:	85 83       	std	Z+5, r24	; 0x05
    9708:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    970a:	f8 01       	movw	r30, r16
    970c:	82 81       	ldd	r24, Z+2	; 0x02
    970e:	f7 01       	movw	r30, r14
    9710:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    9712:	f8 01       	movw	r30, r16
    9714:	84 81       	ldd	r24, Z+4	; 0x04
    9716:	f7 01       	movw	r30, r14
    9718:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    971a:	f8 01       	movw	r30, r16
    971c:	83 81       	ldd	r24, Z+3	; 0x03
    971e:	f7 01       	movw	r30, r14
    9720:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    9722:	f8 01       	movw	r30, r16
    9724:	81 81       	ldd	r24, Z+1	; 0x01
    9726:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    9728:	81 83       	std	Z+1, r24	; 0x01
    972a:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    972c:	66 dd       	rcall	.-1332   	; 0x91fa <adc_disable_clock>

	cpu_irq_restore(flags);
}
    972e:	df be       	out	0x3f, r13	; 63
    9730:	0f 90       	pop	r0
    9732:	df 91       	pop	r29
    9734:	cf 91       	pop	r28
    9736:	1f 91       	pop	r17
    9738:	0f 91       	pop	r16
    973a:	ff 90       	pop	r15
    973c:	ef 90       	pop	r14
    973e:	df 90       	pop	r13
    9740:	08 95       	ret

00009742 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    9742:	af 92       	push	r10
    9744:	bf 92       	push	r11
    9746:	cf 92       	push	r12
    9748:	df 92       	push	r13
    974a:	ef 92       	push	r14
    974c:	ff 92       	push	r15
    974e:	0f 93       	push	r16
    9750:	1f 93       	push	r17
    9752:	cf 93       	push	r28
    9754:	df 93       	push	r29
    9756:	1f 92       	push	r1
    9758:	cd b7       	in	r28, 0x3d	; 61
    975a:	de b7       	in	r29, 0x3e	; 62
    975c:	6c 01       	movw	r12, r24
    975e:	b6 2e       	mov	r11, r22
    9760:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    9762:	86 2f       	mov	r24, r22
    9764:	83 70       	andi	r24, 0x03	; 3
    9766:	29 f4       	brne	.+10     	; 0x9772 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    9768:	96 2f       	mov	r25, r22
    976a:	96 95       	lsr	r25
    976c:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    976e:	82 e0       	ldi	r24, 0x02	; 2
    9770:	02 c0       	rjmp	.+4      	; 0x9776 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    9772:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    9774:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    9776:	90 ff       	sbrs	r25, 0
		index++;
    9778:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    977a:	86 01       	movw	r16, r12
    977c:	00 5e       	subi	r16, 0xE0	; 224
    977e:	1f 4f       	sbci	r17, 0xFF	; 255
    9780:	98 e0       	ldi	r25, 0x08	; 8
    9782:	89 9f       	mul	r24, r25
    9784:	00 0d       	add	r16, r0
    9786:	11 1d       	adc	r17, r1
    9788:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    978a:	8f b7       	in	r24, 0x3f	; 63
    978c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    978e:	f8 94       	cli
	return flags;
    9790:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    9792:	c6 01       	movw	r24, r12
    9794:	11 dd       	rcall	.-1502   	; 0x91b8 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    9796:	f7 01       	movw	r30, r14
    9798:	80 81       	ld	r24, Z
    979a:	f8 01       	movw	r30, r16
    979c:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    979e:	f7 01       	movw	r30, r14
    97a0:	82 81       	ldd	r24, Z+2	; 0x02
    97a2:	f8 01       	movw	r30, r16
    97a4:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    97a6:	f7 01       	movw	r30, r14
    97a8:	81 81       	ldd	r24, Z+1	; 0x01
    97aa:	f8 01       	movw	r30, r16
    97ac:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    97ae:	b0 fe       	sbrs	r11, 0
    97b0:	04 c0       	rjmp	.+8      	; 0x97ba <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    97b2:	f7 01       	movw	r30, r14
    97b4:	83 81       	ldd	r24, Z+3	; 0x03
    97b6:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    97b8:	86 83       	std	Z+6, r24	; 0x06
    97ba:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    97bc:	1e dd       	rcall	.-1476   	; 0x91fa <adc_disable_clock>

	cpu_irq_restore(flags);
}
    97be:	af be       	out	0x3f, r10	; 63
    97c0:	0f 90       	pop	r0
    97c2:	df 91       	pop	r29
    97c4:	cf 91       	pop	r28
    97c6:	1f 91       	pop	r17
    97c8:	0f 91       	pop	r16
    97ca:	ff 90       	pop	r15
    97cc:	ef 90       	pop	r14
    97ce:	df 90       	pop	r13
    97d0:	cf 90       	pop	r12
    97d2:	bf 90       	pop	r11
    97d4:	af 90       	pop	r10
    97d6:	08 95       	ret

000097d8 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    97d8:	af 92       	push	r10
    97da:	bf 92       	push	r11
    97dc:	cf 92       	push	r12
    97de:	df 92       	push	r13
    97e0:	ef 92       	push	r14
    97e2:	ff 92       	push	r15
    97e4:	0f 93       	push	r16
    97e6:	1f 93       	push	r17
    97e8:	cf 93       	push	r28
    97ea:	df 93       	push	r29
    97ec:	1f 92       	push	r1
    97ee:	cd b7       	in	r28, 0x3d	; 61
    97f0:	de b7       	in	r29, 0x3e	; 62
    97f2:	6c 01       	movw	r12, r24
    97f4:	b6 2e       	mov	r11, r22
    97f6:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    97f8:	86 2f       	mov	r24, r22
    97fa:	83 70       	andi	r24, 0x03	; 3
    97fc:	29 f4       	brne	.+10     	; 0x9808 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    97fe:	96 2f       	mov	r25, r22
    9800:	96 95       	lsr	r25
    9802:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    9804:	82 e0       	ldi	r24, 0x02	; 2
    9806:	02 c0       	rjmp	.+4      	; 0x980c <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    9808:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    980a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    980c:	90 ff       	sbrs	r25, 0
		index++;
    980e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    9810:	86 01       	movw	r16, r12
    9812:	00 5e       	subi	r16, 0xE0	; 224
    9814:	1f 4f       	sbci	r17, 0xFF	; 255
    9816:	98 e0       	ldi	r25, 0x08	; 8
    9818:	89 9f       	mul	r24, r25
    981a:	00 0d       	add	r16, r0
    981c:	11 1d       	adc	r17, r1
    981e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9820:	8f b7       	in	r24, 0x3f	; 63
    9822:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9824:	f8 94       	cli
	return flags;
    9826:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    9828:	c6 01       	movw	r24, r12
    982a:	c6 dc       	rcall	.-1652   	; 0x91b8 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    982c:	f8 01       	movw	r30, r16
    982e:	80 81       	ld	r24, Z
    9830:	f7 01       	movw	r30, r14
    9832:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    9834:	f8 01       	movw	r30, r16
    9836:	82 81       	ldd	r24, Z+2	; 0x02
    9838:	f7 01       	movw	r30, r14
    983a:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    983c:	f8 01       	movw	r30, r16
    983e:	81 81       	ldd	r24, Z+1	; 0x01
    9840:	f7 01       	movw	r30, r14
    9842:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    9844:	b0 fe       	sbrs	r11, 0
    9846:	04 c0       	rjmp	.+8      	; 0x9850 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    9848:	f8 01       	movw	r30, r16
    984a:	86 81       	ldd	r24, Z+6	; 0x06
    984c:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    984e:	83 83       	std	Z+3, r24	; 0x03
    9850:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9852:	d3 dc       	rcall	.-1626   	; 0x91fa <adc_disable_clock>

	cpu_irq_restore(flags);
}
    9854:	af be       	out	0x3f, r10	; 63
    9856:	0f 90       	pop	r0
    9858:	df 91       	pop	r29
    985a:	cf 91       	pop	r28
    985c:	1f 91       	pop	r17
    985e:	0f 91       	pop	r16
    9860:	ff 90       	pop	r15
    9862:	ef 90       	pop	r14
    9864:	df 90       	pop	r13
    9866:	cf 90       	pop	r12
    9868:	bf 90       	pop	r11
    986a:	af 90       	pop	r10
    986c:	08 95       	ret

0000986e <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    986e:	80 32       	cpi	r24, 0x20	; 32
    9870:	93 40       	sbci	r25, 0x03	; 3
    9872:	61 f4       	brne	.+24     	; 0x988c <dac_enable_clock+0x1e>
    9874:	80 91 0f 23 	lds	r24, 0x230F	; 0x80230f <dacb_enable_count>
    9878:	91 e0       	ldi	r25, 0x01	; 1
    987a:	98 0f       	add	r25, r24
    987c:	90 93 0f 23 	sts	0x230F, r25	; 0x80230f <dacb_enable_count>
    9880:	81 11       	cpse	r24, r1
    9882:	04 c0       	rjmp	.+8      	; 0x988c <dac_enable_clock+0x1e>
    9884:	64 e0       	ldi	r22, 0x04	; 4
    9886:	82 e0       	ldi	r24, 0x02	; 2
    9888:	0c 94 b9 74 	jmp	0xe972	; 0xe972 <sysclk_enable_module>
    988c:	08 95       	ret

0000988e <dac_disable_clock>:
    988e:	80 32       	cpi	r24, 0x20	; 32
    9890:	93 40       	sbci	r25, 0x03	; 3
    9892:	59 f4       	brne	.+22     	; 0x98aa <dac_disable_clock+0x1c>
    9894:	80 91 0f 23 	lds	r24, 0x230F	; 0x80230f <dacb_enable_count>
    9898:	81 50       	subi	r24, 0x01	; 1
    989a:	80 93 0f 23 	sts	0x230F, r24	; 0x80230f <dacb_enable_count>
    989e:	81 11       	cpse	r24, r1
    98a0:	04 c0       	rjmp	.+8      	; 0x98aa <dac_disable_clock+0x1c>
    98a2:	64 e0       	ldi	r22, 0x04	; 4
    98a4:	82 e0       	ldi	r24, 0x02	; 2
    98a6:	0c 94 cf 74 	jmp	0xe99e	; 0xe99e <sysclk_disable_module>
    98aa:	08 95       	ret

000098ac <dac_enable>:
    98ac:	ef 92       	push	r14
    98ae:	ff 92       	push	r15
    98b0:	1f 93       	push	r17
    98b2:	cf 93       	push	r28
    98b4:	df 93       	push	r29
    98b6:	1f 92       	push	r1
    98b8:	1f 92       	push	r1
    98ba:	cd b7       	in	r28, 0x3d	; 61
    98bc:	de b7       	in	r29, 0x3e	; 62
    98be:	2f b7       	in	r18, 0x3f	; 63
    98c0:	29 83       	std	Y+1, r18	; 0x01
    98c2:	f8 94       	cli
    98c4:	19 81       	ldd	r17, Y+1	; 0x01
    98c6:	20 91 7c 2e 	lds	r18, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    98ca:	2f 3f       	cpi	r18, 0xFF	; 255
    98cc:	09 f4       	brne	.+2      	; 0x98d0 <dac_enable+0x24>
    98ce:	ff cf       	rjmp	.-2      	; 0x98ce <dac_enable+0x22>
    98d0:	7c 01       	movw	r14, r24
    98d2:	8f b7       	in	r24, 0x3f	; 63
    98d4:	8a 83       	std	Y+2, r24	; 0x02
    98d6:	f8 94       	cli
    98d8:	9a 81       	ldd	r25, Y+2	; 0x02
    98da:	eb e7       	ldi	r30, 0x7B	; 123
    98dc:	fe e2       	ldi	r31, 0x2E	; 46
    98de:	81 81       	ldd	r24, Z+1	; 0x01
    98e0:	8f 5f       	subi	r24, 0xFF	; 255
    98e2:	81 83       	std	Z+1, r24	; 0x01
    98e4:	9f bf       	out	0x3f, r25	; 63
    98e6:	c7 01       	movw	r24, r14
    98e8:	c2 df       	rcall	.-124    	; 0x986e <dac_enable_clock>
    98ea:	f7 01       	movw	r30, r14
    98ec:	80 81       	ld	r24, Z
    98ee:	81 60       	ori	r24, 0x01	; 1
    98f0:	80 83       	st	Z, r24
    98f2:	1f bf       	out	0x3f, r17	; 63
    98f4:	0f 90       	pop	r0
    98f6:	0f 90       	pop	r0
    98f8:	df 91       	pop	r29
    98fa:	cf 91       	pop	r28
    98fc:	1f 91       	pop	r17
    98fe:	ff 90       	pop	r15
    9900:	ef 90       	pop	r14
    9902:	08 95       	ret

00009904 <dac_disable>:
    9904:	1f 93       	push	r17
    9906:	cf 93       	push	r28
    9908:	df 93       	push	r29
    990a:	1f 92       	push	r1
    990c:	1f 92       	push	r1
    990e:	cd b7       	in	r28, 0x3d	; 61
    9910:	de b7       	in	r29, 0x3e	; 62
    9912:	2f b7       	in	r18, 0x3f	; 63
    9914:	29 83       	std	Y+1, r18	; 0x01
    9916:	f8 94       	cli
    9918:	19 81       	ldd	r17, Y+1	; 0x01
    991a:	fc 01       	movw	r30, r24
    991c:	20 81       	ld	r18, Z
    991e:	2e 7f       	andi	r18, 0xFE	; 254
    9920:	20 83       	st	Z, r18
    9922:	b5 df       	rcall	.-150    	; 0x988e <dac_disable_clock>
    9924:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    9928:	81 11       	cpse	r24, r1
    992a:	01 c0       	rjmp	.+2      	; 0x992e <dac_disable+0x2a>
    992c:	ff cf       	rjmp	.-2      	; 0x992c <dac_disable+0x28>
    992e:	8f b7       	in	r24, 0x3f	; 63
    9930:	8a 83       	std	Y+2, r24	; 0x02
    9932:	f8 94       	cli
    9934:	9a 81       	ldd	r25, Y+2	; 0x02
    9936:	eb e7       	ldi	r30, 0x7B	; 123
    9938:	fe e2       	ldi	r31, 0x2E	; 46
    993a:	81 81       	ldd	r24, Z+1	; 0x01
    993c:	81 50       	subi	r24, 0x01	; 1
    993e:	81 83       	std	Z+1, r24	; 0x01
    9940:	9f bf       	out	0x3f, r25	; 63
    9942:	1f bf       	out	0x3f, r17	; 63
    9944:	0f 90       	pop	r0
    9946:	0f 90       	pop	r0
    9948:	df 91       	pop	r29
    994a:	cf 91       	pop	r28
    994c:	1f 91       	pop	r17
    994e:	08 95       	ret

00009950 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    9950:	9f 92       	push	r9
    9952:	af 92       	push	r10
    9954:	bf 92       	push	r11
    9956:	cf 92       	push	r12
    9958:	df 92       	push	r13
    995a:	ef 92       	push	r14
    995c:	ff 92       	push	r15
    995e:	0f 93       	push	r16
    9960:	1f 93       	push	r17
    9962:	cf 93       	push	r28
    9964:	df 93       	push	r29
    9966:	1f 92       	push	r1
    9968:	cd b7       	in	r28, 0x3d	; 61
    996a:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    996c:	80 32       	cpi	r24, 0x20	; 32
    996e:	23 e0       	ldi	r18, 0x03	; 3
    9970:	92 07       	cpc	r25, r18
    9972:	09 f0       	breq	.+2      	; 0x9976 <dac_write_configuration+0x26>
    9974:	3c c0       	rjmp	.+120    	; 0x99ee <dac_write_configuration+0x9e>
    9976:	7b 01       	movw	r14, r22
    9978:	8c 01       	movw	r16, r24
    997a:	63 e3       	ldi	r22, 0x33	; 51
    997c:	70 e0       	ldi	r23, 0x00	; 0
    997e:	82 e0       	ldi	r24, 0x02	; 2
    9980:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    9984:	98 2e       	mov	r9, r24
    9986:	62 e3       	ldi	r22, 0x32	; 50
    9988:	70 e0       	ldi	r23, 0x00	; 0
    998a:	82 e0       	ldi	r24, 0x02	; 2
    998c:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    9990:	a8 2e       	mov	r10, r24
    9992:	67 e3       	ldi	r22, 0x37	; 55
    9994:	70 e0       	ldi	r23, 0x00	; 0
    9996:	82 e0       	ldi	r24, 0x02	; 2
    9998:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    999c:	b8 2e       	mov	r11, r24
    999e:	66 e3       	ldi	r22, 0x36	; 54
    99a0:	70 e0       	ldi	r23, 0x00	; 0
    99a2:	82 e0       	ldi	r24, 0x02	; 2
    99a4:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    99a8:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    99aa:	8f b7       	in	r24, 0x3f	; 63
    99ac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    99ae:	f8 94       	cli
	return flags;
    99b0:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    99b2:	c8 01       	movw	r24, r16
    99b4:	5c df       	rcall	.-328    	; 0x986e <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    99b6:	f8 01       	movw	r30, r16
    99b8:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    99ba:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    99bc:	f7 01       	movw	r30, r14
    99be:	91 81       	ldd	r25, Z+1	; 0x01
    99c0:	f8 01       	movw	r30, r16
    99c2:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    99c4:	f7 01       	movw	r30, r14
    99c6:	92 81       	ldd	r25, Z+2	; 0x02
    99c8:	f8 01       	movw	r30, r16
    99ca:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    99cc:	f7 01       	movw	r30, r14
    99ce:	93 81       	ldd	r25, Z+3	; 0x03
    99d0:	f8 01       	movw	r30, r16
    99d2:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    99d4:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    99d6:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    99d8:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    99da:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    99dc:	81 70       	andi	r24, 0x01	; 1
    99de:	f7 01       	movw	r30, r14
    99e0:	90 81       	ld	r25, Z
    99e2:	89 2b       	or	r24, r25
    99e4:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    99e6:	80 83       	st	Z, r24
    99e8:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    99ea:	51 df       	rcall	.-350    	; 0x988e <dac_disable_clock>
	cpu_irq_restore(flags);
}
    99ec:	df be       	out	0x3f, r13	; 63
    99ee:	0f 90       	pop	r0
    99f0:	df 91       	pop	r29
    99f2:	cf 91       	pop	r28
    99f4:	1f 91       	pop	r17
    99f6:	0f 91       	pop	r16
    99f8:	ff 90       	pop	r15
    99fa:	ef 90       	pop	r14
    99fc:	df 90       	pop	r13
    99fe:	cf 90       	pop	r12
    9a00:	bf 90       	pop	r11
    9a02:	af 90       	pop	r10
    9a04:	9f 90       	pop	r9
    9a06:	08 95       	ret

00009a08 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    9a08:	df 92       	push	r13
    9a0a:	ef 92       	push	r14
    9a0c:	ff 92       	push	r15
    9a0e:	0f 93       	push	r16
    9a10:	1f 93       	push	r17
    9a12:	cf 93       	push	r28
    9a14:	df 93       	push	r29
    9a16:	1f 92       	push	r1
    9a18:	cd b7       	in	r28, 0x3d	; 61
    9a1a:	de b7       	in	r29, 0x3e	; 62
    9a1c:	8c 01       	movw	r16, r24
    9a1e:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    9a20:	8f b7       	in	r24, 0x3f	; 63
    9a22:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    9a24:	f8 94       	cli
	return flags;
    9a26:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    9a28:	c8 01       	movw	r24, r16
    9a2a:	21 df       	rcall	.-446    	; 0x986e <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    9a2c:	f8 01       	movw	r30, r16
    9a2e:	80 81       	ld	r24, Z
    9a30:	8e 7f       	andi	r24, 0xFE	; 254
    9a32:	f7 01       	movw	r30, r14
    9a34:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    9a36:	f8 01       	movw	r30, r16
    9a38:	81 81       	ldd	r24, Z+1	; 0x01
    9a3a:	f7 01       	movw	r30, r14
    9a3c:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    9a3e:	f8 01       	movw	r30, r16
    9a40:	82 81       	ldd	r24, Z+2	; 0x02
    9a42:	f7 01       	movw	r30, r14
    9a44:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    9a46:	f8 01       	movw	r30, r16
    9a48:	83 81       	ldd	r24, Z+3	; 0x03
    9a4a:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    9a4c:	83 83       	std	Z+3, r24	; 0x03
    9a4e:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9a50:	1e df       	rcall	.-452    	; 0x988e <dac_disable_clock>
	cpu_irq_restore(flags);
}
    9a52:	df be       	out	0x3f, r13	; 63
    9a54:	0f 90       	pop	r0
    9a56:	df 91       	pop	r29
    9a58:	cf 91       	pop	r28
    9a5a:	1f 91       	pop	r17
    9a5c:	0f 91       	pop	r16
    9a5e:	ff 90       	pop	r15
    9a60:	ef 90       	pop	r14
    9a62:	df 90       	pop	r13
    9a64:	08 95       	ret

00009a66 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    9a66:	1f 92       	push	r1
    9a68:	0f 92       	push	r0
    9a6a:	0f b6       	in	r0, 0x3f	; 63
    9a6c:	0f 92       	push	r0
    9a6e:	11 24       	eor	r1, r1
    9a70:	0b b6       	in	r0, 0x3b	; 59
    9a72:	0f 92       	push	r0
    9a74:	2f 93       	push	r18
    9a76:	3f 93       	push	r19
    9a78:	4f 93       	push	r20
    9a7a:	5f 93       	push	r21
    9a7c:	6f 93       	push	r22
    9a7e:	7f 93       	push	r23
    9a80:	8f 93       	push	r24
    9a82:	9f 93       	push	r25
    9a84:	af 93       	push	r26
    9a86:	bf 93       	push	r27
    9a88:	ef 93       	push	r30
    9a8a:	ff 93       	push	r31
    9a8c:	e0 91 56 23 	lds	r30, 0x2356	; 0x802356 <tc_tcc0_ovf_callback>
    9a90:	f0 91 57 23 	lds	r31, 0x2357	; 0x802357 <tc_tcc0_ovf_callback+0x1>
    9a94:	30 97       	sbiw	r30, 0x00	; 0
    9a96:	09 f0       	breq	.+2      	; 0x9a9a <__vector_14+0x34>
    9a98:	19 95       	eicall
    9a9a:	ff 91       	pop	r31
    9a9c:	ef 91       	pop	r30
    9a9e:	bf 91       	pop	r27
    9aa0:	af 91       	pop	r26
    9aa2:	9f 91       	pop	r25
    9aa4:	8f 91       	pop	r24
    9aa6:	7f 91       	pop	r23
    9aa8:	6f 91       	pop	r22
    9aaa:	5f 91       	pop	r21
    9aac:	4f 91       	pop	r20
    9aae:	3f 91       	pop	r19
    9ab0:	2f 91       	pop	r18
    9ab2:	0f 90       	pop	r0
    9ab4:	0b be       	out	0x3b, r0	; 59
    9ab6:	0f 90       	pop	r0
    9ab8:	0f be       	out	0x3f, r0	; 63
    9aba:	0f 90       	pop	r0
    9abc:	1f 90       	pop	r1
    9abe:	18 95       	reti

00009ac0 <__vector_15>:
    9ac0:	1f 92       	push	r1
    9ac2:	0f 92       	push	r0
    9ac4:	0f b6       	in	r0, 0x3f	; 63
    9ac6:	0f 92       	push	r0
    9ac8:	11 24       	eor	r1, r1
    9aca:	0b b6       	in	r0, 0x3b	; 59
    9acc:	0f 92       	push	r0
    9ace:	2f 93       	push	r18
    9ad0:	3f 93       	push	r19
    9ad2:	4f 93       	push	r20
    9ad4:	5f 93       	push	r21
    9ad6:	6f 93       	push	r22
    9ad8:	7f 93       	push	r23
    9ada:	8f 93       	push	r24
    9adc:	9f 93       	push	r25
    9ade:	af 93       	push	r26
    9ae0:	bf 93       	push	r27
    9ae2:	ef 93       	push	r30
    9ae4:	ff 93       	push	r31
    9ae6:	e0 91 54 23 	lds	r30, 0x2354	; 0x802354 <tc_tcc0_err_callback>
    9aea:	f0 91 55 23 	lds	r31, 0x2355	; 0x802355 <tc_tcc0_err_callback+0x1>
    9aee:	30 97       	sbiw	r30, 0x00	; 0
    9af0:	09 f0       	breq	.+2      	; 0x9af4 <__vector_15+0x34>
    9af2:	19 95       	eicall
    9af4:	ff 91       	pop	r31
    9af6:	ef 91       	pop	r30
    9af8:	bf 91       	pop	r27
    9afa:	af 91       	pop	r26
    9afc:	9f 91       	pop	r25
    9afe:	8f 91       	pop	r24
    9b00:	7f 91       	pop	r23
    9b02:	6f 91       	pop	r22
    9b04:	5f 91       	pop	r21
    9b06:	4f 91       	pop	r20
    9b08:	3f 91       	pop	r19
    9b0a:	2f 91       	pop	r18
    9b0c:	0f 90       	pop	r0
    9b0e:	0b be       	out	0x3b, r0	; 59
    9b10:	0f 90       	pop	r0
    9b12:	0f be       	out	0x3f, r0	; 63
    9b14:	0f 90       	pop	r0
    9b16:	1f 90       	pop	r1
    9b18:	18 95       	reti

00009b1a <__vector_16>:
    9b1a:	1f 92       	push	r1
    9b1c:	0f 92       	push	r0
    9b1e:	0f b6       	in	r0, 0x3f	; 63
    9b20:	0f 92       	push	r0
    9b22:	11 24       	eor	r1, r1
    9b24:	0b b6       	in	r0, 0x3b	; 59
    9b26:	0f 92       	push	r0
    9b28:	2f 93       	push	r18
    9b2a:	3f 93       	push	r19
    9b2c:	4f 93       	push	r20
    9b2e:	5f 93       	push	r21
    9b30:	6f 93       	push	r22
    9b32:	7f 93       	push	r23
    9b34:	8f 93       	push	r24
    9b36:	9f 93       	push	r25
    9b38:	af 93       	push	r26
    9b3a:	bf 93       	push	r27
    9b3c:	ef 93       	push	r30
    9b3e:	ff 93       	push	r31
    9b40:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <tc_tcc0_cca_callback>
    9b44:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <tc_tcc0_cca_callback+0x1>
    9b48:	30 97       	sbiw	r30, 0x00	; 0
    9b4a:	09 f0       	breq	.+2      	; 0x9b4e <__vector_16+0x34>
    9b4c:	19 95       	eicall
    9b4e:	ff 91       	pop	r31
    9b50:	ef 91       	pop	r30
    9b52:	bf 91       	pop	r27
    9b54:	af 91       	pop	r26
    9b56:	9f 91       	pop	r25
    9b58:	8f 91       	pop	r24
    9b5a:	7f 91       	pop	r23
    9b5c:	6f 91       	pop	r22
    9b5e:	5f 91       	pop	r21
    9b60:	4f 91       	pop	r20
    9b62:	3f 91       	pop	r19
    9b64:	2f 91       	pop	r18
    9b66:	0f 90       	pop	r0
    9b68:	0b be       	out	0x3b, r0	; 59
    9b6a:	0f 90       	pop	r0
    9b6c:	0f be       	out	0x3f, r0	; 63
    9b6e:	0f 90       	pop	r0
    9b70:	1f 90       	pop	r1
    9b72:	18 95       	reti

00009b74 <__vector_17>:
    9b74:	1f 92       	push	r1
    9b76:	0f 92       	push	r0
    9b78:	0f b6       	in	r0, 0x3f	; 63
    9b7a:	0f 92       	push	r0
    9b7c:	11 24       	eor	r1, r1
    9b7e:	0b b6       	in	r0, 0x3b	; 59
    9b80:	0f 92       	push	r0
    9b82:	2f 93       	push	r18
    9b84:	3f 93       	push	r19
    9b86:	4f 93       	push	r20
    9b88:	5f 93       	push	r21
    9b8a:	6f 93       	push	r22
    9b8c:	7f 93       	push	r23
    9b8e:	8f 93       	push	r24
    9b90:	9f 93       	push	r25
    9b92:	af 93       	push	r26
    9b94:	bf 93       	push	r27
    9b96:	ef 93       	push	r30
    9b98:	ff 93       	push	r31
    9b9a:	e0 91 50 23 	lds	r30, 0x2350	; 0x802350 <tc_tcc0_ccb_callback>
    9b9e:	f0 91 51 23 	lds	r31, 0x2351	; 0x802351 <tc_tcc0_ccb_callback+0x1>
    9ba2:	30 97       	sbiw	r30, 0x00	; 0
    9ba4:	09 f0       	breq	.+2      	; 0x9ba8 <__vector_17+0x34>
    9ba6:	19 95       	eicall
    9ba8:	ff 91       	pop	r31
    9baa:	ef 91       	pop	r30
    9bac:	bf 91       	pop	r27
    9bae:	af 91       	pop	r26
    9bb0:	9f 91       	pop	r25
    9bb2:	8f 91       	pop	r24
    9bb4:	7f 91       	pop	r23
    9bb6:	6f 91       	pop	r22
    9bb8:	5f 91       	pop	r21
    9bba:	4f 91       	pop	r20
    9bbc:	3f 91       	pop	r19
    9bbe:	2f 91       	pop	r18
    9bc0:	0f 90       	pop	r0
    9bc2:	0b be       	out	0x3b, r0	; 59
    9bc4:	0f 90       	pop	r0
    9bc6:	0f be       	out	0x3f, r0	; 63
    9bc8:	0f 90       	pop	r0
    9bca:	1f 90       	pop	r1
    9bcc:	18 95       	reti

00009bce <__vector_18>:
    9bce:	1f 92       	push	r1
    9bd0:	0f 92       	push	r0
    9bd2:	0f b6       	in	r0, 0x3f	; 63
    9bd4:	0f 92       	push	r0
    9bd6:	11 24       	eor	r1, r1
    9bd8:	0b b6       	in	r0, 0x3b	; 59
    9bda:	0f 92       	push	r0
    9bdc:	2f 93       	push	r18
    9bde:	3f 93       	push	r19
    9be0:	4f 93       	push	r20
    9be2:	5f 93       	push	r21
    9be4:	6f 93       	push	r22
    9be6:	7f 93       	push	r23
    9be8:	8f 93       	push	r24
    9bea:	9f 93       	push	r25
    9bec:	af 93       	push	r26
    9bee:	bf 93       	push	r27
    9bf0:	ef 93       	push	r30
    9bf2:	ff 93       	push	r31
    9bf4:	e0 91 4e 23 	lds	r30, 0x234E	; 0x80234e <tc_tcc0_ccc_callback>
    9bf8:	f0 91 4f 23 	lds	r31, 0x234F	; 0x80234f <tc_tcc0_ccc_callback+0x1>
    9bfc:	30 97       	sbiw	r30, 0x00	; 0
    9bfe:	09 f0       	breq	.+2      	; 0x9c02 <__vector_18+0x34>
    9c00:	19 95       	eicall
    9c02:	ff 91       	pop	r31
    9c04:	ef 91       	pop	r30
    9c06:	bf 91       	pop	r27
    9c08:	af 91       	pop	r26
    9c0a:	9f 91       	pop	r25
    9c0c:	8f 91       	pop	r24
    9c0e:	7f 91       	pop	r23
    9c10:	6f 91       	pop	r22
    9c12:	5f 91       	pop	r21
    9c14:	4f 91       	pop	r20
    9c16:	3f 91       	pop	r19
    9c18:	2f 91       	pop	r18
    9c1a:	0f 90       	pop	r0
    9c1c:	0b be       	out	0x3b, r0	; 59
    9c1e:	0f 90       	pop	r0
    9c20:	0f be       	out	0x3f, r0	; 63
    9c22:	0f 90       	pop	r0
    9c24:	1f 90       	pop	r1
    9c26:	18 95       	reti

00009c28 <__vector_19>:
    9c28:	1f 92       	push	r1
    9c2a:	0f 92       	push	r0
    9c2c:	0f b6       	in	r0, 0x3f	; 63
    9c2e:	0f 92       	push	r0
    9c30:	11 24       	eor	r1, r1
    9c32:	0b b6       	in	r0, 0x3b	; 59
    9c34:	0f 92       	push	r0
    9c36:	2f 93       	push	r18
    9c38:	3f 93       	push	r19
    9c3a:	4f 93       	push	r20
    9c3c:	5f 93       	push	r21
    9c3e:	6f 93       	push	r22
    9c40:	7f 93       	push	r23
    9c42:	8f 93       	push	r24
    9c44:	9f 93       	push	r25
    9c46:	af 93       	push	r26
    9c48:	bf 93       	push	r27
    9c4a:	ef 93       	push	r30
    9c4c:	ff 93       	push	r31
    9c4e:	e0 91 4c 23 	lds	r30, 0x234C	; 0x80234c <tc_tcc0_ccd_callback>
    9c52:	f0 91 4d 23 	lds	r31, 0x234D	; 0x80234d <tc_tcc0_ccd_callback+0x1>
    9c56:	30 97       	sbiw	r30, 0x00	; 0
    9c58:	09 f0       	breq	.+2      	; 0x9c5c <__vector_19+0x34>
    9c5a:	19 95       	eicall
    9c5c:	ff 91       	pop	r31
    9c5e:	ef 91       	pop	r30
    9c60:	bf 91       	pop	r27
    9c62:	af 91       	pop	r26
    9c64:	9f 91       	pop	r25
    9c66:	8f 91       	pop	r24
    9c68:	7f 91       	pop	r23
    9c6a:	6f 91       	pop	r22
    9c6c:	5f 91       	pop	r21
    9c6e:	4f 91       	pop	r20
    9c70:	3f 91       	pop	r19
    9c72:	2f 91       	pop	r18
    9c74:	0f 90       	pop	r0
    9c76:	0b be       	out	0x3b, r0	; 59
    9c78:	0f 90       	pop	r0
    9c7a:	0f be       	out	0x3f, r0	; 63
    9c7c:	0f 90       	pop	r0
    9c7e:	1f 90       	pop	r1
    9c80:	18 95       	reti

00009c82 <__vector_20>:
    9c82:	1f 92       	push	r1
    9c84:	0f 92       	push	r0
    9c86:	0f b6       	in	r0, 0x3f	; 63
    9c88:	0f 92       	push	r0
    9c8a:	11 24       	eor	r1, r1
    9c8c:	0b b6       	in	r0, 0x3b	; 59
    9c8e:	0f 92       	push	r0
    9c90:	2f 93       	push	r18
    9c92:	3f 93       	push	r19
    9c94:	4f 93       	push	r20
    9c96:	5f 93       	push	r21
    9c98:	6f 93       	push	r22
    9c9a:	7f 93       	push	r23
    9c9c:	8f 93       	push	r24
    9c9e:	9f 93       	push	r25
    9ca0:	af 93       	push	r26
    9ca2:	bf 93       	push	r27
    9ca4:	ef 93       	push	r30
    9ca6:	ff 93       	push	r31
    9ca8:	e0 91 4a 23 	lds	r30, 0x234A	; 0x80234a <tc_tcc1_ovf_callback>
    9cac:	f0 91 4b 23 	lds	r31, 0x234B	; 0x80234b <tc_tcc1_ovf_callback+0x1>
    9cb0:	30 97       	sbiw	r30, 0x00	; 0
    9cb2:	09 f0       	breq	.+2      	; 0x9cb6 <__vector_20+0x34>
    9cb4:	19 95       	eicall
    9cb6:	ff 91       	pop	r31
    9cb8:	ef 91       	pop	r30
    9cba:	bf 91       	pop	r27
    9cbc:	af 91       	pop	r26
    9cbe:	9f 91       	pop	r25
    9cc0:	8f 91       	pop	r24
    9cc2:	7f 91       	pop	r23
    9cc4:	6f 91       	pop	r22
    9cc6:	5f 91       	pop	r21
    9cc8:	4f 91       	pop	r20
    9cca:	3f 91       	pop	r19
    9ccc:	2f 91       	pop	r18
    9cce:	0f 90       	pop	r0
    9cd0:	0b be       	out	0x3b, r0	; 59
    9cd2:	0f 90       	pop	r0
    9cd4:	0f be       	out	0x3f, r0	; 63
    9cd6:	0f 90       	pop	r0
    9cd8:	1f 90       	pop	r1
    9cda:	18 95       	reti

00009cdc <__vector_21>:
    9cdc:	1f 92       	push	r1
    9cde:	0f 92       	push	r0
    9ce0:	0f b6       	in	r0, 0x3f	; 63
    9ce2:	0f 92       	push	r0
    9ce4:	11 24       	eor	r1, r1
    9ce6:	0b b6       	in	r0, 0x3b	; 59
    9ce8:	0f 92       	push	r0
    9cea:	2f 93       	push	r18
    9cec:	3f 93       	push	r19
    9cee:	4f 93       	push	r20
    9cf0:	5f 93       	push	r21
    9cf2:	6f 93       	push	r22
    9cf4:	7f 93       	push	r23
    9cf6:	8f 93       	push	r24
    9cf8:	9f 93       	push	r25
    9cfa:	af 93       	push	r26
    9cfc:	bf 93       	push	r27
    9cfe:	ef 93       	push	r30
    9d00:	ff 93       	push	r31
    9d02:	e0 91 48 23 	lds	r30, 0x2348	; 0x802348 <tc_tcc1_err_callback>
    9d06:	f0 91 49 23 	lds	r31, 0x2349	; 0x802349 <tc_tcc1_err_callback+0x1>
    9d0a:	30 97       	sbiw	r30, 0x00	; 0
    9d0c:	09 f0       	breq	.+2      	; 0x9d10 <__vector_21+0x34>
    9d0e:	19 95       	eicall
    9d10:	ff 91       	pop	r31
    9d12:	ef 91       	pop	r30
    9d14:	bf 91       	pop	r27
    9d16:	af 91       	pop	r26
    9d18:	9f 91       	pop	r25
    9d1a:	8f 91       	pop	r24
    9d1c:	7f 91       	pop	r23
    9d1e:	6f 91       	pop	r22
    9d20:	5f 91       	pop	r21
    9d22:	4f 91       	pop	r20
    9d24:	3f 91       	pop	r19
    9d26:	2f 91       	pop	r18
    9d28:	0f 90       	pop	r0
    9d2a:	0b be       	out	0x3b, r0	; 59
    9d2c:	0f 90       	pop	r0
    9d2e:	0f be       	out	0x3f, r0	; 63
    9d30:	0f 90       	pop	r0
    9d32:	1f 90       	pop	r1
    9d34:	18 95       	reti

00009d36 <__vector_22>:
    9d36:	1f 92       	push	r1
    9d38:	0f 92       	push	r0
    9d3a:	0f b6       	in	r0, 0x3f	; 63
    9d3c:	0f 92       	push	r0
    9d3e:	11 24       	eor	r1, r1
    9d40:	0b b6       	in	r0, 0x3b	; 59
    9d42:	0f 92       	push	r0
    9d44:	2f 93       	push	r18
    9d46:	3f 93       	push	r19
    9d48:	4f 93       	push	r20
    9d4a:	5f 93       	push	r21
    9d4c:	6f 93       	push	r22
    9d4e:	7f 93       	push	r23
    9d50:	8f 93       	push	r24
    9d52:	9f 93       	push	r25
    9d54:	af 93       	push	r26
    9d56:	bf 93       	push	r27
    9d58:	ef 93       	push	r30
    9d5a:	ff 93       	push	r31
    9d5c:	e0 91 46 23 	lds	r30, 0x2346	; 0x802346 <tc_tcc1_cca_callback>
    9d60:	f0 91 47 23 	lds	r31, 0x2347	; 0x802347 <tc_tcc1_cca_callback+0x1>
    9d64:	30 97       	sbiw	r30, 0x00	; 0
    9d66:	09 f0       	breq	.+2      	; 0x9d6a <__vector_22+0x34>
    9d68:	19 95       	eicall
    9d6a:	ff 91       	pop	r31
    9d6c:	ef 91       	pop	r30
    9d6e:	bf 91       	pop	r27
    9d70:	af 91       	pop	r26
    9d72:	9f 91       	pop	r25
    9d74:	8f 91       	pop	r24
    9d76:	7f 91       	pop	r23
    9d78:	6f 91       	pop	r22
    9d7a:	5f 91       	pop	r21
    9d7c:	4f 91       	pop	r20
    9d7e:	3f 91       	pop	r19
    9d80:	2f 91       	pop	r18
    9d82:	0f 90       	pop	r0
    9d84:	0b be       	out	0x3b, r0	; 59
    9d86:	0f 90       	pop	r0
    9d88:	0f be       	out	0x3f, r0	; 63
    9d8a:	0f 90       	pop	r0
    9d8c:	1f 90       	pop	r1
    9d8e:	18 95       	reti

00009d90 <__vector_23>:
    9d90:	1f 92       	push	r1
    9d92:	0f 92       	push	r0
    9d94:	0f b6       	in	r0, 0x3f	; 63
    9d96:	0f 92       	push	r0
    9d98:	11 24       	eor	r1, r1
    9d9a:	0b b6       	in	r0, 0x3b	; 59
    9d9c:	0f 92       	push	r0
    9d9e:	2f 93       	push	r18
    9da0:	3f 93       	push	r19
    9da2:	4f 93       	push	r20
    9da4:	5f 93       	push	r21
    9da6:	6f 93       	push	r22
    9da8:	7f 93       	push	r23
    9daa:	8f 93       	push	r24
    9dac:	9f 93       	push	r25
    9dae:	af 93       	push	r26
    9db0:	bf 93       	push	r27
    9db2:	ef 93       	push	r30
    9db4:	ff 93       	push	r31
    9db6:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <tc_tcc1_ccb_callback>
    9dba:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <tc_tcc1_ccb_callback+0x1>
    9dbe:	30 97       	sbiw	r30, 0x00	; 0
    9dc0:	09 f0       	breq	.+2      	; 0x9dc4 <__vector_23+0x34>
    9dc2:	19 95       	eicall
    9dc4:	ff 91       	pop	r31
    9dc6:	ef 91       	pop	r30
    9dc8:	bf 91       	pop	r27
    9dca:	af 91       	pop	r26
    9dcc:	9f 91       	pop	r25
    9dce:	8f 91       	pop	r24
    9dd0:	7f 91       	pop	r23
    9dd2:	6f 91       	pop	r22
    9dd4:	5f 91       	pop	r21
    9dd6:	4f 91       	pop	r20
    9dd8:	3f 91       	pop	r19
    9dda:	2f 91       	pop	r18
    9ddc:	0f 90       	pop	r0
    9dde:	0b be       	out	0x3b, r0	; 59
    9de0:	0f 90       	pop	r0
    9de2:	0f be       	out	0x3f, r0	; 63
    9de4:	0f 90       	pop	r0
    9de6:	1f 90       	pop	r1
    9de8:	18 95       	reti

00009dea <__vector_77>:
    9dea:	1f 92       	push	r1
    9dec:	0f 92       	push	r0
    9dee:	0f b6       	in	r0, 0x3f	; 63
    9df0:	0f 92       	push	r0
    9df2:	11 24       	eor	r1, r1
    9df4:	0b b6       	in	r0, 0x3b	; 59
    9df6:	0f 92       	push	r0
    9df8:	2f 93       	push	r18
    9dfa:	3f 93       	push	r19
    9dfc:	4f 93       	push	r20
    9dfe:	5f 93       	push	r21
    9e00:	6f 93       	push	r22
    9e02:	7f 93       	push	r23
    9e04:	8f 93       	push	r24
    9e06:	9f 93       	push	r25
    9e08:	af 93       	push	r26
    9e0a:	bf 93       	push	r27
    9e0c:	ef 93       	push	r30
    9e0e:	ff 93       	push	r31
    9e10:	e0 91 42 23 	lds	r30, 0x2342	; 0x802342 <tc_tcd0_ovf_callback>
    9e14:	f0 91 43 23 	lds	r31, 0x2343	; 0x802343 <tc_tcd0_ovf_callback+0x1>
    9e18:	30 97       	sbiw	r30, 0x00	; 0
    9e1a:	09 f0       	breq	.+2      	; 0x9e1e <__vector_77+0x34>
    9e1c:	19 95       	eicall
    9e1e:	ff 91       	pop	r31
    9e20:	ef 91       	pop	r30
    9e22:	bf 91       	pop	r27
    9e24:	af 91       	pop	r26
    9e26:	9f 91       	pop	r25
    9e28:	8f 91       	pop	r24
    9e2a:	7f 91       	pop	r23
    9e2c:	6f 91       	pop	r22
    9e2e:	5f 91       	pop	r21
    9e30:	4f 91       	pop	r20
    9e32:	3f 91       	pop	r19
    9e34:	2f 91       	pop	r18
    9e36:	0f 90       	pop	r0
    9e38:	0b be       	out	0x3b, r0	; 59
    9e3a:	0f 90       	pop	r0
    9e3c:	0f be       	out	0x3f, r0	; 63
    9e3e:	0f 90       	pop	r0
    9e40:	1f 90       	pop	r1
    9e42:	18 95       	reti

00009e44 <__vector_78>:
    9e44:	1f 92       	push	r1
    9e46:	0f 92       	push	r0
    9e48:	0f b6       	in	r0, 0x3f	; 63
    9e4a:	0f 92       	push	r0
    9e4c:	11 24       	eor	r1, r1
    9e4e:	0b b6       	in	r0, 0x3b	; 59
    9e50:	0f 92       	push	r0
    9e52:	2f 93       	push	r18
    9e54:	3f 93       	push	r19
    9e56:	4f 93       	push	r20
    9e58:	5f 93       	push	r21
    9e5a:	6f 93       	push	r22
    9e5c:	7f 93       	push	r23
    9e5e:	8f 93       	push	r24
    9e60:	9f 93       	push	r25
    9e62:	af 93       	push	r26
    9e64:	bf 93       	push	r27
    9e66:	ef 93       	push	r30
    9e68:	ff 93       	push	r31
    9e6a:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <tc_tcd0_err_callback>
    9e6e:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <tc_tcd0_err_callback+0x1>
    9e72:	30 97       	sbiw	r30, 0x00	; 0
    9e74:	09 f0       	breq	.+2      	; 0x9e78 <__vector_78+0x34>
    9e76:	19 95       	eicall
    9e78:	ff 91       	pop	r31
    9e7a:	ef 91       	pop	r30
    9e7c:	bf 91       	pop	r27
    9e7e:	af 91       	pop	r26
    9e80:	9f 91       	pop	r25
    9e82:	8f 91       	pop	r24
    9e84:	7f 91       	pop	r23
    9e86:	6f 91       	pop	r22
    9e88:	5f 91       	pop	r21
    9e8a:	4f 91       	pop	r20
    9e8c:	3f 91       	pop	r19
    9e8e:	2f 91       	pop	r18
    9e90:	0f 90       	pop	r0
    9e92:	0b be       	out	0x3b, r0	; 59
    9e94:	0f 90       	pop	r0
    9e96:	0f be       	out	0x3f, r0	; 63
    9e98:	0f 90       	pop	r0
    9e9a:	1f 90       	pop	r1
    9e9c:	18 95       	reti

00009e9e <__vector_79>:
    9e9e:	1f 92       	push	r1
    9ea0:	0f 92       	push	r0
    9ea2:	0f b6       	in	r0, 0x3f	; 63
    9ea4:	0f 92       	push	r0
    9ea6:	11 24       	eor	r1, r1
    9ea8:	0b b6       	in	r0, 0x3b	; 59
    9eaa:	0f 92       	push	r0
    9eac:	2f 93       	push	r18
    9eae:	3f 93       	push	r19
    9eb0:	4f 93       	push	r20
    9eb2:	5f 93       	push	r21
    9eb4:	6f 93       	push	r22
    9eb6:	7f 93       	push	r23
    9eb8:	8f 93       	push	r24
    9eba:	9f 93       	push	r25
    9ebc:	af 93       	push	r26
    9ebe:	bf 93       	push	r27
    9ec0:	ef 93       	push	r30
    9ec2:	ff 93       	push	r31
    9ec4:	e0 91 3e 23 	lds	r30, 0x233E	; 0x80233e <tc_tcd0_cca_callback>
    9ec8:	f0 91 3f 23 	lds	r31, 0x233F	; 0x80233f <tc_tcd0_cca_callback+0x1>
    9ecc:	30 97       	sbiw	r30, 0x00	; 0
    9ece:	09 f0       	breq	.+2      	; 0x9ed2 <__vector_79+0x34>
    9ed0:	19 95       	eicall
    9ed2:	ff 91       	pop	r31
    9ed4:	ef 91       	pop	r30
    9ed6:	bf 91       	pop	r27
    9ed8:	af 91       	pop	r26
    9eda:	9f 91       	pop	r25
    9edc:	8f 91       	pop	r24
    9ede:	7f 91       	pop	r23
    9ee0:	6f 91       	pop	r22
    9ee2:	5f 91       	pop	r21
    9ee4:	4f 91       	pop	r20
    9ee6:	3f 91       	pop	r19
    9ee8:	2f 91       	pop	r18
    9eea:	0f 90       	pop	r0
    9eec:	0b be       	out	0x3b, r0	; 59
    9eee:	0f 90       	pop	r0
    9ef0:	0f be       	out	0x3f, r0	; 63
    9ef2:	0f 90       	pop	r0
    9ef4:	1f 90       	pop	r1
    9ef6:	18 95       	reti

00009ef8 <__vector_80>:
    9ef8:	1f 92       	push	r1
    9efa:	0f 92       	push	r0
    9efc:	0f b6       	in	r0, 0x3f	; 63
    9efe:	0f 92       	push	r0
    9f00:	11 24       	eor	r1, r1
    9f02:	0b b6       	in	r0, 0x3b	; 59
    9f04:	0f 92       	push	r0
    9f06:	2f 93       	push	r18
    9f08:	3f 93       	push	r19
    9f0a:	4f 93       	push	r20
    9f0c:	5f 93       	push	r21
    9f0e:	6f 93       	push	r22
    9f10:	7f 93       	push	r23
    9f12:	8f 93       	push	r24
    9f14:	9f 93       	push	r25
    9f16:	af 93       	push	r26
    9f18:	bf 93       	push	r27
    9f1a:	ef 93       	push	r30
    9f1c:	ff 93       	push	r31
    9f1e:	e0 91 3c 23 	lds	r30, 0x233C	; 0x80233c <tc_tcd0_ccb_callback>
    9f22:	f0 91 3d 23 	lds	r31, 0x233D	; 0x80233d <tc_tcd0_ccb_callback+0x1>
    9f26:	30 97       	sbiw	r30, 0x00	; 0
    9f28:	09 f0       	breq	.+2      	; 0x9f2c <__vector_80+0x34>
    9f2a:	19 95       	eicall
    9f2c:	ff 91       	pop	r31
    9f2e:	ef 91       	pop	r30
    9f30:	bf 91       	pop	r27
    9f32:	af 91       	pop	r26
    9f34:	9f 91       	pop	r25
    9f36:	8f 91       	pop	r24
    9f38:	7f 91       	pop	r23
    9f3a:	6f 91       	pop	r22
    9f3c:	5f 91       	pop	r21
    9f3e:	4f 91       	pop	r20
    9f40:	3f 91       	pop	r19
    9f42:	2f 91       	pop	r18
    9f44:	0f 90       	pop	r0
    9f46:	0b be       	out	0x3b, r0	; 59
    9f48:	0f 90       	pop	r0
    9f4a:	0f be       	out	0x3f, r0	; 63
    9f4c:	0f 90       	pop	r0
    9f4e:	1f 90       	pop	r1
    9f50:	18 95       	reti

00009f52 <__vector_81>:
    9f52:	1f 92       	push	r1
    9f54:	0f 92       	push	r0
    9f56:	0f b6       	in	r0, 0x3f	; 63
    9f58:	0f 92       	push	r0
    9f5a:	11 24       	eor	r1, r1
    9f5c:	0b b6       	in	r0, 0x3b	; 59
    9f5e:	0f 92       	push	r0
    9f60:	2f 93       	push	r18
    9f62:	3f 93       	push	r19
    9f64:	4f 93       	push	r20
    9f66:	5f 93       	push	r21
    9f68:	6f 93       	push	r22
    9f6a:	7f 93       	push	r23
    9f6c:	8f 93       	push	r24
    9f6e:	9f 93       	push	r25
    9f70:	af 93       	push	r26
    9f72:	bf 93       	push	r27
    9f74:	ef 93       	push	r30
    9f76:	ff 93       	push	r31
    9f78:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <tc_tcd0_ccc_callback>
    9f7c:	f0 91 3b 23 	lds	r31, 0x233B	; 0x80233b <tc_tcd0_ccc_callback+0x1>
    9f80:	30 97       	sbiw	r30, 0x00	; 0
    9f82:	09 f0       	breq	.+2      	; 0x9f86 <__vector_81+0x34>
    9f84:	19 95       	eicall
    9f86:	ff 91       	pop	r31
    9f88:	ef 91       	pop	r30
    9f8a:	bf 91       	pop	r27
    9f8c:	af 91       	pop	r26
    9f8e:	9f 91       	pop	r25
    9f90:	8f 91       	pop	r24
    9f92:	7f 91       	pop	r23
    9f94:	6f 91       	pop	r22
    9f96:	5f 91       	pop	r21
    9f98:	4f 91       	pop	r20
    9f9a:	3f 91       	pop	r19
    9f9c:	2f 91       	pop	r18
    9f9e:	0f 90       	pop	r0
    9fa0:	0b be       	out	0x3b, r0	; 59
    9fa2:	0f 90       	pop	r0
    9fa4:	0f be       	out	0x3f, r0	; 63
    9fa6:	0f 90       	pop	r0
    9fa8:	1f 90       	pop	r1
    9faa:	18 95       	reti

00009fac <__vector_82>:
    9fac:	1f 92       	push	r1
    9fae:	0f 92       	push	r0
    9fb0:	0f b6       	in	r0, 0x3f	; 63
    9fb2:	0f 92       	push	r0
    9fb4:	11 24       	eor	r1, r1
    9fb6:	0b b6       	in	r0, 0x3b	; 59
    9fb8:	0f 92       	push	r0
    9fba:	2f 93       	push	r18
    9fbc:	3f 93       	push	r19
    9fbe:	4f 93       	push	r20
    9fc0:	5f 93       	push	r21
    9fc2:	6f 93       	push	r22
    9fc4:	7f 93       	push	r23
    9fc6:	8f 93       	push	r24
    9fc8:	9f 93       	push	r25
    9fca:	af 93       	push	r26
    9fcc:	bf 93       	push	r27
    9fce:	ef 93       	push	r30
    9fd0:	ff 93       	push	r31
    9fd2:	e0 91 38 23 	lds	r30, 0x2338	; 0x802338 <tc_tcd0_ccd_callback>
    9fd6:	f0 91 39 23 	lds	r31, 0x2339	; 0x802339 <tc_tcd0_ccd_callback+0x1>
    9fda:	30 97       	sbiw	r30, 0x00	; 0
    9fdc:	09 f0       	breq	.+2      	; 0x9fe0 <__vector_82+0x34>
    9fde:	19 95       	eicall
    9fe0:	ff 91       	pop	r31
    9fe2:	ef 91       	pop	r30
    9fe4:	bf 91       	pop	r27
    9fe6:	af 91       	pop	r26
    9fe8:	9f 91       	pop	r25
    9fea:	8f 91       	pop	r24
    9fec:	7f 91       	pop	r23
    9fee:	6f 91       	pop	r22
    9ff0:	5f 91       	pop	r21
    9ff2:	4f 91       	pop	r20
    9ff4:	3f 91       	pop	r19
    9ff6:	2f 91       	pop	r18
    9ff8:	0f 90       	pop	r0
    9ffa:	0b be       	out	0x3b, r0	; 59
    9ffc:	0f 90       	pop	r0
    9ffe:	0f be       	out	0x3f, r0	; 63
    a000:	0f 90       	pop	r0
    a002:	1f 90       	pop	r1
    a004:	18 95       	reti

0000a006 <__vector_83>:
    a006:	1f 92       	push	r1
    a008:	0f 92       	push	r0
    a00a:	0f b6       	in	r0, 0x3f	; 63
    a00c:	0f 92       	push	r0
    a00e:	11 24       	eor	r1, r1
    a010:	0b b6       	in	r0, 0x3b	; 59
    a012:	0f 92       	push	r0
    a014:	2f 93       	push	r18
    a016:	3f 93       	push	r19
    a018:	4f 93       	push	r20
    a01a:	5f 93       	push	r21
    a01c:	6f 93       	push	r22
    a01e:	7f 93       	push	r23
    a020:	8f 93       	push	r24
    a022:	9f 93       	push	r25
    a024:	af 93       	push	r26
    a026:	bf 93       	push	r27
    a028:	ef 93       	push	r30
    a02a:	ff 93       	push	r31
    a02c:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <tc_tcd1_ovf_callback>
    a030:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <tc_tcd1_ovf_callback+0x1>
    a034:	30 97       	sbiw	r30, 0x00	; 0
    a036:	09 f0       	breq	.+2      	; 0xa03a <__vector_83+0x34>
    a038:	19 95       	eicall
    a03a:	ff 91       	pop	r31
    a03c:	ef 91       	pop	r30
    a03e:	bf 91       	pop	r27
    a040:	af 91       	pop	r26
    a042:	9f 91       	pop	r25
    a044:	8f 91       	pop	r24
    a046:	7f 91       	pop	r23
    a048:	6f 91       	pop	r22
    a04a:	5f 91       	pop	r21
    a04c:	4f 91       	pop	r20
    a04e:	3f 91       	pop	r19
    a050:	2f 91       	pop	r18
    a052:	0f 90       	pop	r0
    a054:	0b be       	out	0x3b, r0	; 59
    a056:	0f 90       	pop	r0
    a058:	0f be       	out	0x3f, r0	; 63
    a05a:	0f 90       	pop	r0
    a05c:	1f 90       	pop	r1
    a05e:	18 95       	reti

0000a060 <__vector_84>:
    a060:	1f 92       	push	r1
    a062:	0f 92       	push	r0
    a064:	0f b6       	in	r0, 0x3f	; 63
    a066:	0f 92       	push	r0
    a068:	11 24       	eor	r1, r1
    a06a:	0b b6       	in	r0, 0x3b	; 59
    a06c:	0f 92       	push	r0
    a06e:	2f 93       	push	r18
    a070:	3f 93       	push	r19
    a072:	4f 93       	push	r20
    a074:	5f 93       	push	r21
    a076:	6f 93       	push	r22
    a078:	7f 93       	push	r23
    a07a:	8f 93       	push	r24
    a07c:	9f 93       	push	r25
    a07e:	af 93       	push	r26
    a080:	bf 93       	push	r27
    a082:	ef 93       	push	r30
    a084:	ff 93       	push	r31
    a086:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <tc_tcd1_err_callback>
    a08a:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <tc_tcd1_err_callback+0x1>
    a08e:	30 97       	sbiw	r30, 0x00	; 0
    a090:	09 f0       	breq	.+2      	; 0xa094 <__vector_84+0x34>
    a092:	19 95       	eicall
    a094:	ff 91       	pop	r31
    a096:	ef 91       	pop	r30
    a098:	bf 91       	pop	r27
    a09a:	af 91       	pop	r26
    a09c:	9f 91       	pop	r25
    a09e:	8f 91       	pop	r24
    a0a0:	7f 91       	pop	r23
    a0a2:	6f 91       	pop	r22
    a0a4:	5f 91       	pop	r21
    a0a6:	4f 91       	pop	r20
    a0a8:	3f 91       	pop	r19
    a0aa:	2f 91       	pop	r18
    a0ac:	0f 90       	pop	r0
    a0ae:	0b be       	out	0x3b, r0	; 59
    a0b0:	0f 90       	pop	r0
    a0b2:	0f be       	out	0x3f, r0	; 63
    a0b4:	0f 90       	pop	r0
    a0b6:	1f 90       	pop	r1
    a0b8:	18 95       	reti

0000a0ba <__vector_85>:
    a0ba:	1f 92       	push	r1
    a0bc:	0f 92       	push	r0
    a0be:	0f b6       	in	r0, 0x3f	; 63
    a0c0:	0f 92       	push	r0
    a0c2:	11 24       	eor	r1, r1
    a0c4:	0b b6       	in	r0, 0x3b	; 59
    a0c6:	0f 92       	push	r0
    a0c8:	2f 93       	push	r18
    a0ca:	3f 93       	push	r19
    a0cc:	4f 93       	push	r20
    a0ce:	5f 93       	push	r21
    a0d0:	6f 93       	push	r22
    a0d2:	7f 93       	push	r23
    a0d4:	8f 93       	push	r24
    a0d6:	9f 93       	push	r25
    a0d8:	af 93       	push	r26
    a0da:	bf 93       	push	r27
    a0dc:	ef 93       	push	r30
    a0de:	ff 93       	push	r31
    a0e0:	e0 91 32 23 	lds	r30, 0x2332	; 0x802332 <tc_tcd1_cca_callback>
    a0e4:	f0 91 33 23 	lds	r31, 0x2333	; 0x802333 <tc_tcd1_cca_callback+0x1>
    a0e8:	30 97       	sbiw	r30, 0x00	; 0
    a0ea:	09 f0       	breq	.+2      	; 0xa0ee <__vector_85+0x34>
    a0ec:	19 95       	eicall
    a0ee:	ff 91       	pop	r31
    a0f0:	ef 91       	pop	r30
    a0f2:	bf 91       	pop	r27
    a0f4:	af 91       	pop	r26
    a0f6:	9f 91       	pop	r25
    a0f8:	8f 91       	pop	r24
    a0fa:	7f 91       	pop	r23
    a0fc:	6f 91       	pop	r22
    a0fe:	5f 91       	pop	r21
    a100:	4f 91       	pop	r20
    a102:	3f 91       	pop	r19
    a104:	2f 91       	pop	r18
    a106:	0f 90       	pop	r0
    a108:	0b be       	out	0x3b, r0	; 59
    a10a:	0f 90       	pop	r0
    a10c:	0f be       	out	0x3f, r0	; 63
    a10e:	0f 90       	pop	r0
    a110:	1f 90       	pop	r1
    a112:	18 95       	reti

0000a114 <__vector_86>:
    a114:	1f 92       	push	r1
    a116:	0f 92       	push	r0
    a118:	0f b6       	in	r0, 0x3f	; 63
    a11a:	0f 92       	push	r0
    a11c:	11 24       	eor	r1, r1
    a11e:	0b b6       	in	r0, 0x3b	; 59
    a120:	0f 92       	push	r0
    a122:	2f 93       	push	r18
    a124:	3f 93       	push	r19
    a126:	4f 93       	push	r20
    a128:	5f 93       	push	r21
    a12a:	6f 93       	push	r22
    a12c:	7f 93       	push	r23
    a12e:	8f 93       	push	r24
    a130:	9f 93       	push	r25
    a132:	af 93       	push	r26
    a134:	bf 93       	push	r27
    a136:	ef 93       	push	r30
    a138:	ff 93       	push	r31
    a13a:	e0 91 30 23 	lds	r30, 0x2330	; 0x802330 <tc_tcd1_ccb_callback>
    a13e:	f0 91 31 23 	lds	r31, 0x2331	; 0x802331 <tc_tcd1_ccb_callback+0x1>
    a142:	30 97       	sbiw	r30, 0x00	; 0
    a144:	09 f0       	breq	.+2      	; 0xa148 <__vector_86+0x34>
    a146:	19 95       	eicall
    a148:	ff 91       	pop	r31
    a14a:	ef 91       	pop	r30
    a14c:	bf 91       	pop	r27
    a14e:	af 91       	pop	r26
    a150:	9f 91       	pop	r25
    a152:	8f 91       	pop	r24
    a154:	7f 91       	pop	r23
    a156:	6f 91       	pop	r22
    a158:	5f 91       	pop	r21
    a15a:	4f 91       	pop	r20
    a15c:	3f 91       	pop	r19
    a15e:	2f 91       	pop	r18
    a160:	0f 90       	pop	r0
    a162:	0b be       	out	0x3b, r0	; 59
    a164:	0f 90       	pop	r0
    a166:	0f be       	out	0x3f, r0	; 63
    a168:	0f 90       	pop	r0
    a16a:	1f 90       	pop	r1
    a16c:	18 95       	reti

0000a16e <__vector_47>:
    a16e:	1f 92       	push	r1
    a170:	0f 92       	push	r0
    a172:	0f b6       	in	r0, 0x3f	; 63
    a174:	0f 92       	push	r0
    a176:	11 24       	eor	r1, r1
    a178:	0b b6       	in	r0, 0x3b	; 59
    a17a:	0f 92       	push	r0
    a17c:	2f 93       	push	r18
    a17e:	3f 93       	push	r19
    a180:	4f 93       	push	r20
    a182:	5f 93       	push	r21
    a184:	6f 93       	push	r22
    a186:	7f 93       	push	r23
    a188:	8f 93       	push	r24
    a18a:	9f 93       	push	r25
    a18c:	af 93       	push	r26
    a18e:	bf 93       	push	r27
    a190:	ef 93       	push	r30
    a192:	ff 93       	push	r31
    a194:	e0 91 2e 23 	lds	r30, 0x232E	; 0x80232e <tc_tce0_ovf_callback>
    a198:	f0 91 2f 23 	lds	r31, 0x232F	; 0x80232f <tc_tce0_ovf_callback+0x1>
    a19c:	30 97       	sbiw	r30, 0x00	; 0
    a19e:	09 f0       	breq	.+2      	; 0xa1a2 <__vector_47+0x34>
    a1a0:	19 95       	eicall
    a1a2:	ff 91       	pop	r31
    a1a4:	ef 91       	pop	r30
    a1a6:	bf 91       	pop	r27
    a1a8:	af 91       	pop	r26
    a1aa:	9f 91       	pop	r25
    a1ac:	8f 91       	pop	r24
    a1ae:	7f 91       	pop	r23
    a1b0:	6f 91       	pop	r22
    a1b2:	5f 91       	pop	r21
    a1b4:	4f 91       	pop	r20
    a1b6:	3f 91       	pop	r19
    a1b8:	2f 91       	pop	r18
    a1ba:	0f 90       	pop	r0
    a1bc:	0b be       	out	0x3b, r0	; 59
    a1be:	0f 90       	pop	r0
    a1c0:	0f be       	out	0x3f, r0	; 63
    a1c2:	0f 90       	pop	r0
    a1c4:	1f 90       	pop	r1
    a1c6:	18 95       	reti

0000a1c8 <__vector_48>:
    a1c8:	1f 92       	push	r1
    a1ca:	0f 92       	push	r0
    a1cc:	0f b6       	in	r0, 0x3f	; 63
    a1ce:	0f 92       	push	r0
    a1d0:	11 24       	eor	r1, r1
    a1d2:	0b b6       	in	r0, 0x3b	; 59
    a1d4:	0f 92       	push	r0
    a1d6:	2f 93       	push	r18
    a1d8:	3f 93       	push	r19
    a1da:	4f 93       	push	r20
    a1dc:	5f 93       	push	r21
    a1de:	6f 93       	push	r22
    a1e0:	7f 93       	push	r23
    a1e2:	8f 93       	push	r24
    a1e4:	9f 93       	push	r25
    a1e6:	af 93       	push	r26
    a1e8:	bf 93       	push	r27
    a1ea:	ef 93       	push	r30
    a1ec:	ff 93       	push	r31
    a1ee:	e0 91 2c 23 	lds	r30, 0x232C	; 0x80232c <tc_tce0_err_callback>
    a1f2:	f0 91 2d 23 	lds	r31, 0x232D	; 0x80232d <tc_tce0_err_callback+0x1>
    a1f6:	30 97       	sbiw	r30, 0x00	; 0
    a1f8:	09 f0       	breq	.+2      	; 0xa1fc <__vector_48+0x34>
    a1fa:	19 95       	eicall
    a1fc:	ff 91       	pop	r31
    a1fe:	ef 91       	pop	r30
    a200:	bf 91       	pop	r27
    a202:	af 91       	pop	r26
    a204:	9f 91       	pop	r25
    a206:	8f 91       	pop	r24
    a208:	7f 91       	pop	r23
    a20a:	6f 91       	pop	r22
    a20c:	5f 91       	pop	r21
    a20e:	4f 91       	pop	r20
    a210:	3f 91       	pop	r19
    a212:	2f 91       	pop	r18
    a214:	0f 90       	pop	r0
    a216:	0b be       	out	0x3b, r0	; 59
    a218:	0f 90       	pop	r0
    a21a:	0f be       	out	0x3f, r0	; 63
    a21c:	0f 90       	pop	r0
    a21e:	1f 90       	pop	r1
    a220:	18 95       	reti

0000a222 <__vector_49>:
    a222:	1f 92       	push	r1
    a224:	0f 92       	push	r0
    a226:	0f b6       	in	r0, 0x3f	; 63
    a228:	0f 92       	push	r0
    a22a:	11 24       	eor	r1, r1
    a22c:	0b b6       	in	r0, 0x3b	; 59
    a22e:	0f 92       	push	r0
    a230:	2f 93       	push	r18
    a232:	3f 93       	push	r19
    a234:	4f 93       	push	r20
    a236:	5f 93       	push	r21
    a238:	6f 93       	push	r22
    a23a:	7f 93       	push	r23
    a23c:	8f 93       	push	r24
    a23e:	9f 93       	push	r25
    a240:	af 93       	push	r26
    a242:	bf 93       	push	r27
    a244:	ef 93       	push	r30
    a246:	ff 93       	push	r31
    a248:	e0 91 2a 23 	lds	r30, 0x232A	; 0x80232a <tc_tce0_cca_callback>
    a24c:	f0 91 2b 23 	lds	r31, 0x232B	; 0x80232b <tc_tce0_cca_callback+0x1>
    a250:	30 97       	sbiw	r30, 0x00	; 0
    a252:	09 f0       	breq	.+2      	; 0xa256 <__vector_49+0x34>
    a254:	19 95       	eicall
    a256:	ff 91       	pop	r31
    a258:	ef 91       	pop	r30
    a25a:	bf 91       	pop	r27
    a25c:	af 91       	pop	r26
    a25e:	9f 91       	pop	r25
    a260:	8f 91       	pop	r24
    a262:	7f 91       	pop	r23
    a264:	6f 91       	pop	r22
    a266:	5f 91       	pop	r21
    a268:	4f 91       	pop	r20
    a26a:	3f 91       	pop	r19
    a26c:	2f 91       	pop	r18
    a26e:	0f 90       	pop	r0
    a270:	0b be       	out	0x3b, r0	; 59
    a272:	0f 90       	pop	r0
    a274:	0f be       	out	0x3f, r0	; 63
    a276:	0f 90       	pop	r0
    a278:	1f 90       	pop	r1
    a27a:	18 95       	reti

0000a27c <__vector_50>:
    a27c:	1f 92       	push	r1
    a27e:	0f 92       	push	r0
    a280:	0f b6       	in	r0, 0x3f	; 63
    a282:	0f 92       	push	r0
    a284:	11 24       	eor	r1, r1
    a286:	0b b6       	in	r0, 0x3b	; 59
    a288:	0f 92       	push	r0
    a28a:	2f 93       	push	r18
    a28c:	3f 93       	push	r19
    a28e:	4f 93       	push	r20
    a290:	5f 93       	push	r21
    a292:	6f 93       	push	r22
    a294:	7f 93       	push	r23
    a296:	8f 93       	push	r24
    a298:	9f 93       	push	r25
    a29a:	af 93       	push	r26
    a29c:	bf 93       	push	r27
    a29e:	ef 93       	push	r30
    a2a0:	ff 93       	push	r31
    a2a2:	e0 91 28 23 	lds	r30, 0x2328	; 0x802328 <tc_tce0_ccb_callback>
    a2a6:	f0 91 29 23 	lds	r31, 0x2329	; 0x802329 <tc_tce0_ccb_callback+0x1>
    a2aa:	30 97       	sbiw	r30, 0x00	; 0
    a2ac:	09 f0       	breq	.+2      	; 0xa2b0 <__vector_50+0x34>
    a2ae:	19 95       	eicall
    a2b0:	ff 91       	pop	r31
    a2b2:	ef 91       	pop	r30
    a2b4:	bf 91       	pop	r27
    a2b6:	af 91       	pop	r26
    a2b8:	9f 91       	pop	r25
    a2ba:	8f 91       	pop	r24
    a2bc:	7f 91       	pop	r23
    a2be:	6f 91       	pop	r22
    a2c0:	5f 91       	pop	r21
    a2c2:	4f 91       	pop	r20
    a2c4:	3f 91       	pop	r19
    a2c6:	2f 91       	pop	r18
    a2c8:	0f 90       	pop	r0
    a2ca:	0b be       	out	0x3b, r0	; 59
    a2cc:	0f 90       	pop	r0
    a2ce:	0f be       	out	0x3f, r0	; 63
    a2d0:	0f 90       	pop	r0
    a2d2:	1f 90       	pop	r1
    a2d4:	18 95       	reti

0000a2d6 <__vector_51>:
    a2d6:	1f 92       	push	r1
    a2d8:	0f 92       	push	r0
    a2da:	0f b6       	in	r0, 0x3f	; 63
    a2dc:	0f 92       	push	r0
    a2de:	11 24       	eor	r1, r1
    a2e0:	0b b6       	in	r0, 0x3b	; 59
    a2e2:	0f 92       	push	r0
    a2e4:	2f 93       	push	r18
    a2e6:	3f 93       	push	r19
    a2e8:	4f 93       	push	r20
    a2ea:	5f 93       	push	r21
    a2ec:	6f 93       	push	r22
    a2ee:	7f 93       	push	r23
    a2f0:	8f 93       	push	r24
    a2f2:	9f 93       	push	r25
    a2f4:	af 93       	push	r26
    a2f6:	bf 93       	push	r27
    a2f8:	ef 93       	push	r30
    a2fa:	ff 93       	push	r31
    a2fc:	e0 91 26 23 	lds	r30, 0x2326	; 0x802326 <tc_tce0_ccc_callback>
    a300:	f0 91 27 23 	lds	r31, 0x2327	; 0x802327 <tc_tce0_ccc_callback+0x1>
    a304:	30 97       	sbiw	r30, 0x00	; 0
    a306:	09 f0       	breq	.+2      	; 0xa30a <__vector_51+0x34>
    a308:	19 95       	eicall
    a30a:	ff 91       	pop	r31
    a30c:	ef 91       	pop	r30
    a30e:	bf 91       	pop	r27
    a310:	af 91       	pop	r26
    a312:	9f 91       	pop	r25
    a314:	8f 91       	pop	r24
    a316:	7f 91       	pop	r23
    a318:	6f 91       	pop	r22
    a31a:	5f 91       	pop	r21
    a31c:	4f 91       	pop	r20
    a31e:	3f 91       	pop	r19
    a320:	2f 91       	pop	r18
    a322:	0f 90       	pop	r0
    a324:	0b be       	out	0x3b, r0	; 59
    a326:	0f 90       	pop	r0
    a328:	0f be       	out	0x3f, r0	; 63
    a32a:	0f 90       	pop	r0
    a32c:	1f 90       	pop	r1
    a32e:	18 95       	reti

0000a330 <__vector_52>:
    a330:	1f 92       	push	r1
    a332:	0f 92       	push	r0
    a334:	0f b6       	in	r0, 0x3f	; 63
    a336:	0f 92       	push	r0
    a338:	11 24       	eor	r1, r1
    a33a:	0b b6       	in	r0, 0x3b	; 59
    a33c:	0f 92       	push	r0
    a33e:	2f 93       	push	r18
    a340:	3f 93       	push	r19
    a342:	4f 93       	push	r20
    a344:	5f 93       	push	r21
    a346:	6f 93       	push	r22
    a348:	7f 93       	push	r23
    a34a:	8f 93       	push	r24
    a34c:	9f 93       	push	r25
    a34e:	af 93       	push	r26
    a350:	bf 93       	push	r27
    a352:	ef 93       	push	r30
    a354:	ff 93       	push	r31
    a356:	e0 91 24 23 	lds	r30, 0x2324	; 0x802324 <tc_tce0_ccd_callback>
    a35a:	f0 91 25 23 	lds	r31, 0x2325	; 0x802325 <tc_tce0_ccd_callback+0x1>
    a35e:	30 97       	sbiw	r30, 0x00	; 0
    a360:	09 f0       	breq	.+2      	; 0xa364 <__vector_52+0x34>
    a362:	19 95       	eicall
    a364:	ff 91       	pop	r31
    a366:	ef 91       	pop	r30
    a368:	bf 91       	pop	r27
    a36a:	af 91       	pop	r26
    a36c:	9f 91       	pop	r25
    a36e:	8f 91       	pop	r24
    a370:	7f 91       	pop	r23
    a372:	6f 91       	pop	r22
    a374:	5f 91       	pop	r21
    a376:	4f 91       	pop	r20
    a378:	3f 91       	pop	r19
    a37a:	2f 91       	pop	r18
    a37c:	0f 90       	pop	r0
    a37e:	0b be       	out	0x3b, r0	; 59
    a380:	0f 90       	pop	r0
    a382:	0f be       	out	0x3f, r0	; 63
    a384:	0f 90       	pop	r0
    a386:	1f 90       	pop	r1
    a388:	18 95       	reti

0000a38a <__vector_53>:
    a38a:	1f 92       	push	r1
    a38c:	0f 92       	push	r0
    a38e:	0f b6       	in	r0, 0x3f	; 63
    a390:	0f 92       	push	r0
    a392:	11 24       	eor	r1, r1
    a394:	0b b6       	in	r0, 0x3b	; 59
    a396:	0f 92       	push	r0
    a398:	2f 93       	push	r18
    a39a:	3f 93       	push	r19
    a39c:	4f 93       	push	r20
    a39e:	5f 93       	push	r21
    a3a0:	6f 93       	push	r22
    a3a2:	7f 93       	push	r23
    a3a4:	8f 93       	push	r24
    a3a6:	9f 93       	push	r25
    a3a8:	af 93       	push	r26
    a3aa:	bf 93       	push	r27
    a3ac:	ef 93       	push	r30
    a3ae:	ff 93       	push	r31
    a3b0:	e0 91 22 23 	lds	r30, 0x2322	; 0x802322 <tc_tce1_ovf_callback>
    a3b4:	f0 91 23 23 	lds	r31, 0x2323	; 0x802323 <tc_tce1_ovf_callback+0x1>
    a3b8:	30 97       	sbiw	r30, 0x00	; 0
    a3ba:	09 f0       	breq	.+2      	; 0xa3be <__vector_53+0x34>
    a3bc:	19 95       	eicall
    a3be:	ff 91       	pop	r31
    a3c0:	ef 91       	pop	r30
    a3c2:	bf 91       	pop	r27
    a3c4:	af 91       	pop	r26
    a3c6:	9f 91       	pop	r25
    a3c8:	8f 91       	pop	r24
    a3ca:	7f 91       	pop	r23
    a3cc:	6f 91       	pop	r22
    a3ce:	5f 91       	pop	r21
    a3d0:	4f 91       	pop	r20
    a3d2:	3f 91       	pop	r19
    a3d4:	2f 91       	pop	r18
    a3d6:	0f 90       	pop	r0
    a3d8:	0b be       	out	0x3b, r0	; 59
    a3da:	0f 90       	pop	r0
    a3dc:	0f be       	out	0x3f, r0	; 63
    a3de:	0f 90       	pop	r0
    a3e0:	1f 90       	pop	r1
    a3e2:	18 95       	reti

0000a3e4 <__vector_54>:
    a3e4:	1f 92       	push	r1
    a3e6:	0f 92       	push	r0
    a3e8:	0f b6       	in	r0, 0x3f	; 63
    a3ea:	0f 92       	push	r0
    a3ec:	11 24       	eor	r1, r1
    a3ee:	0b b6       	in	r0, 0x3b	; 59
    a3f0:	0f 92       	push	r0
    a3f2:	2f 93       	push	r18
    a3f4:	3f 93       	push	r19
    a3f6:	4f 93       	push	r20
    a3f8:	5f 93       	push	r21
    a3fa:	6f 93       	push	r22
    a3fc:	7f 93       	push	r23
    a3fe:	8f 93       	push	r24
    a400:	9f 93       	push	r25
    a402:	af 93       	push	r26
    a404:	bf 93       	push	r27
    a406:	ef 93       	push	r30
    a408:	ff 93       	push	r31
    a40a:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <tc_tce1_err_callback>
    a40e:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <tc_tce1_err_callback+0x1>
    a412:	30 97       	sbiw	r30, 0x00	; 0
    a414:	09 f0       	breq	.+2      	; 0xa418 <__vector_54+0x34>
    a416:	19 95       	eicall
    a418:	ff 91       	pop	r31
    a41a:	ef 91       	pop	r30
    a41c:	bf 91       	pop	r27
    a41e:	af 91       	pop	r26
    a420:	9f 91       	pop	r25
    a422:	8f 91       	pop	r24
    a424:	7f 91       	pop	r23
    a426:	6f 91       	pop	r22
    a428:	5f 91       	pop	r21
    a42a:	4f 91       	pop	r20
    a42c:	3f 91       	pop	r19
    a42e:	2f 91       	pop	r18
    a430:	0f 90       	pop	r0
    a432:	0b be       	out	0x3b, r0	; 59
    a434:	0f 90       	pop	r0
    a436:	0f be       	out	0x3f, r0	; 63
    a438:	0f 90       	pop	r0
    a43a:	1f 90       	pop	r1
    a43c:	18 95       	reti

0000a43e <__vector_55>:
    a43e:	1f 92       	push	r1
    a440:	0f 92       	push	r0
    a442:	0f b6       	in	r0, 0x3f	; 63
    a444:	0f 92       	push	r0
    a446:	11 24       	eor	r1, r1
    a448:	0b b6       	in	r0, 0x3b	; 59
    a44a:	0f 92       	push	r0
    a44c:	2f 93       	push	r18
    a44e:	3f 93       	push	r19
    a450:	4f 93       	push	r20
    a452:	5f 93       	push	r21
    a454:	6f 93       	push	r22
    a456:	7f 93       	push	r23
    a458:	8f 93       	push	r24
    a45a:	9f 93       	push	r25
    a45c:	af 93       	push	r26
    a45e:	bf 93       	push	r27
    a460:	ef 93       	push	r30
    a462:	ff 93       	push	r31
    a464:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <tc_tce1_cca_callback>
    a468:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <tc_tce1_cca_callback+0x1>
    a46c:	30 97       	sbiw	r30, 0x00	; 0
    a46e:	09 f0       	breq	.+2      	; 0xa472 <__vector_55+0x34>
    a470:	19 95       	eicall
    a472:	ff 91       	pop	r31
    a474:	ef 91       	pop	r30
    a476:	bf 91       	pop	r27
    a478:	af 91       	pop	r26
    a47a:	9f 91       	pop	r25
    a47c:	8f 91       	pop	r24
    a47e:	7f 91       	pop	r23
    a480:	6f 91       	pop	r22
    a482:	5f 91       	pop	r21
    a484:	4f 91       	pop	r20
    a486:	3f 91       	pop	r19
    a488:	2f 91       	pop	r18
    a48a:	0f 90       	pop	r0
    a48c:	0b be       	out	0x3b, r0	; 59
    a48e:	0f 90       	pop	r0
    a490:	0f be       	out	0x3f, r0	; 63
    a492:	0f 90       	pop	r0
    a494:	1f 90       	pop	r1
    a496:	18 95       	reti

0000a498 <__vector_56>:
    a498:	1f 92       	push	r1
    a49a:	0f 92       	push	r0
    a49c:	0f b6       	in	r0, 0x3f	; 63
    a49e:	0f 92       	push	r0
    a4a0:	11 24       	eor	r1, r1
    a4a2:	0b b6       	in	r0, 0x3b	; 59
    a4a4:	0f 92       	push	r0
    a4a6:	2f 93       	push	r18
    a4a8:	3f 93       	push	r19
    a4aa:	4f 93       	push	r20
    a4ac:	5f 93       	push	r21
    a4ae:	6f 93       	push	r22
    a4b0:	7f 93       	push	r23
    a4b2:	8f 93       	push	r24
    a4b4:	9f 93       	push	r25
    a4b6:	af 93       	push	r26
    a4b8:	bf 93       	push	r27
    a4ba:	ef 93       	push	r30
    a4bc:	ff 93       	push	r31
    a4be:	e0 91 1c 23 	lds	r30, 0x231C	; 0x80231c <tc_tce1_ccb_callback>
    a4c2:	f0 91 1d 23 	lds	r31, 0x231D	; 0x80231d <tc_tce1_ccb_callback+0x1>
    a4c6:	30 97       	sbiw	r30, 0x00	; 0
    a4c8:	09 f0       	breq	.+2      	; 0xa4cc <__vector_56+0x34>
    a4ca:	19 95       	eicall
    a4cc:	ff 91       	pop	r31
    a4ce:	ef 91       	pop	r30
    a4d0:	bf 91       	pop	r27
    a4d2:	af 91       	pop	r26
    a4d4:	9f 91       	pop	r25
    a4d6:	8f 91       	pop	r24
    a4d8:	7f 91       	pop	r23
    a4da:	6f 91       	pop	r22
    a4dc:	5f 91       	pop	r21
    a4de:	4f 91       	pop	r20
    a4e0:	3f 91       	pop	r19
    a4e2:	2f 91       	pop	r18
    a4e4:	0f 90       	pop	r0
    a4e6:	0b be       	out	0x3b, r0	; 59
    a4e8:	0f 90       	pop	r0
    a4ea:	0f be       	out	0x3f, r0	; 63
    a4ec:	0f 90       	pop	r0
    a4ee:	1f 90       	pop	r1
    a4f0:	18 95       	reti

0000a4f2 <__vector_108>:
    a4f2:	1f 92       	push	r1
    a4f4:	0f 92       	push	r0
    a4f6:	0f b6       	in	r0, 0x3f	; 63
    a4f8:	0f 92       	push	r0
    a4fa:	11 24       	eor	r1, r1
    a4fc:	0b b6       	in	r0, 0x3b	; 59
    a4fe:	0f 92       	push	r0
    a500:	2f 93       	push	r18
    a502:	3f 93       	push	r19
    a504:	4f 93       	push	r20
    a506:	5f 93       	push	r21
    a508:	6f 93       	push	r22
    a50a:	7f 93       	push	r23
    a50c:	8f 93       	push	r24
    a50e:	9f 93       	push	r25
    a510:	af 93       	push	r26
    a512:	bf 93       	push	r27
    a514:	ef 93       	push	r30
    a516:	ff 93       	push	r31
    a518:	e0 91 1a 23 	lds	r30, 0x231A	; 0x80231a <tc_tcf0_ovf_callback>
    a51c:	f0 91 1b 23 	lds	r31, 0x231B	; 0x80231b <tc_tcf0_ovf_callback+0x1>
    a520:	30 97       	sbiw	r30, 0x00	; 0
    a522:	09 f0       	breq	.+2      	; 0xa526 <__vector_108+0x34>
    a524:	19 95       	eicall
    a526:	ff 91       	pop	r31
    a528:	ef 91       	pop	r30
    a52a:	bf 91       	pop	r27
    a52c:	af 91       	pop	r26
    a52e:	9f 91       	pop	r25
    a530:	8f 91       	pop	r24
    a532:	7f 91       	pop	r23
    a534:	6f 91       	pop	r22
    a536:	5f 91       	pop	r21
    a538:	4f 91       	pop	r20
    a53a:	3f 91       	pop	r19
    a53c:	2f 91       	pop	r18
    a53e:	0f 90       	pop	r0
    a540:	0b be       	out	0x3b, r0	; 59
    a542:	0f 90       	pop	r0
    a544:	0f be       	out	0x3f, r0	; 63
    a546:	0f 90       	pop	r0
    a548:	1f 90       	pop	r1
    a54a:	18 95       	reti

0000a54c <__vector_109>:
    a54c:	1f 92       	push	r1
    a54e:	0f 92       	push	r0
    a550:	0f b6       	in	r0, 0x3f	; 63
    a552:	0f 92       	push	r0
    a554:	11 24       	eor	r1, r1
    a556:	0b b6       	in	r0, 0x3b	; 59
    a558:	0f 92       	push	r0
    a55a:	2f 93       	push	r18
    a55c:	3f 93       	push	r19
    a55e:	4f 93       	push	r20
    a560:	5f 93       	push	r21
    a562:	6f 93       	push	r22
    a564:	7f 93       	push	r23
    a566:	8f 93       	push	r24
    a568:	9f 93       	push	r25
    a56a:	af 93       	push	r26
    a56c:	bf 93       	push	r27
    a56e:	ef 93       	push	r30
    a570:	ff 93       	push	r31
    a572:	e0 91 18 23 	lds	r30, 0x2318	; 0x802318 <tc_tcf0_err_callback>
    a576:	f0 91 19 23 	lds	r31, 0x2319	; 0x802319 <tc_tcf0_err_callback+0x1>
    a57a:	30 97       	sbiw	r30, 0x00	; 0
    a57c:	09 f0       	breq	.+2      	; 0xa580 <__vector_109+0x34>
    a57e:	19 95       	eicall
    a580:	ff 91       	pop	r31
    a582:	ef 91       	pop	r30
    a584:	bf 91       	pop	r27
    a586:	af 91       	pop	r26
    a588:	9f 91       	pop	r25
    a58a:	8f 91       	pop	r24
    a58c:	7f 91       	pop	r23
    a58e:	6f 91       	pop	r22
    a590:	5f 91       	pop	r21
    a592:	4f 91       	pop	r20
    a594:	3f 91       	pop	r19
    a596:	2f 91       	pop	r18
    a598:	0f 90       	pop	r0
    a59a:	0b be       	out	0x3b, r0	; 59
    a59c:	0f 90       	pop	r0
    a59e:	0f be       	out	0x3f, r0	; 63
    a5a0:	0f 90       	pop	r0
    a5a2:	1f 90       	pop	r1
    a5a4:	18 95       	reti

0000a5a6 <__vector_110>:
    a5a6:	1f 92       	push	r1
    a5a8:	0f 92       	push	r0
    a5aa:	0f b6       	in	r0, 0x3f	; 63
    a5ac:	0f 92       	push	r0
    a5ae:	11 24       	eor	r1, r1
    a5b0:	0b b6       	in	r0, 0x3b	; 59
    a5b2:	0f 92       	push	r0
    a5b4:	2f 93       	push	r18
    a5b6:	3f 93       	push	r19
    a5b8:	4f 93       	push	r20
    a5ba:	5f 93       	push	r21
    a5bc:	6f 93       	push	r22
    a5be:	7f 93       	push	r23
    a5c0:	8f 93       	push	r24
    a5c2:	9f 93       	push	r25
    a5c4:	af 93       	push	r26
    a5c6:	bf 93       	push	r27
    a5c8:	ef 93       	push	r30
    a5ca:	ff 93       	push	r31
    a5cc:	e0 91 16 23 	lds	r30, 0x2316	; 0x802316 <tc_tcf0_cca_callback>
    a5d0:	f0 91 17 23 	lds	r31, 0x2317	; 0x802317 <tc_tcf0_cca_callback+0x1>
    a5d4:	30 97       	sbiw	r30, 0x00	; 0
    a5d6:	09 f0       	breq	.+2      	; 0xa5da <__vector_110+0x34>
    a5d8:	19 95       	eicall
    a5da:	ff 91       	pop	r31
    a5dc:	ef 91       	pop	r30
    a5de:	bf 91       	pop	r27
    a5e0:	af 91       	pop	r26
    a5e2:	9f 91       	pop	r25
    a5e4:	8f 91       	pop	r24
    a5e6:	7f 91       	pop	r23
    a5e8:	6f 91       	pop	r22
    a5ea:	5f 91       	pop	r21
    a5ec:	4f 91       	pop	r20
    a5ee:	3f 91       	pop	r19
    a5f0:	2f 91       	pop	r18
    a5f2:	0f 90       	pop	r0
    a5f4:	0b be       	out	0x3b, r0	; 59
    a5f6:	0f 90       	pop	r0
    a5f8:	0f be       	out	0x3f, r0	; 63
    a5fa:	0f 90       	pop	r0
    a5fc:	1f 90       	pop	r1
    a5fe:	18 95       	reti

0000a600 <__vector_111>:
    a600:	1f 92       	push	r1
    a602:	0f 92       	push	r0
    a604:	0f b6       	in	r0, 0x3f	; 63
    a606:	0f 92       	push	r0
    a608:	11 24       	eor	r1, r1
    a60a:	0b b6       	in	r0, 0x3b	; 59
    a60c:	0f 92       	push	r0
    a60e:	2f 93       	push	r18
    a610:	3f 93       	push	r19
    a612:	4f 93       	push	r20
    a614:	5f 93       	push	r21
    a616:	6f 93       	push	r22
    a618:	7f 93       	push	r23
    a61a:	8f 93       	push	r24
    a61c:	9f 93       	push	r25
    a61e:	af 93       	push	r26
    a620:	bf 93       	push	r27
    a622:	ef 93       	push	r30
    a624:	ff 93       	push	r31
    a626:	e0 91 14 23 	lds	r30, 0x2314	; 0x802314 <tc_tcf0_ccb_callback>
    a62a:	f0 91 15 23 	lds	r31, 0x2315	; 0x802315 <tc_tcf0_ccb_callback+0x1>
    a62e:	30 97       	sbiw	r30, 0x00	; 0
    a630:	09 f0       	breq	.+2      	; 0xa634 <__vector_111+0x34>
    a632:	19 95       	eicall
    a634:	ff 91       	pop	r31
    a636:	ef 91       	pop	r30
    a638:	bf 91       	pop	r27
    a63a:	af 91       	pop	r26
    a63c:	9f 91       	pop	r25
    a63e:	8f 91       	pop	r24
    a640:	7f 91       	pop	r23
    a642:	6f 91       	pop	r22
    a644:	5f 91       	pop	r21
    a646:	4f 91       	pop	r20
    a648:	3f 91       	pop	r19
    a64a:	2f 91       	pop	r18
    a64c:	0f 90       	pop	r0
    a64e:	0b be       	out	0x3b, r0	; 59
    a650:	0f 90       	pop	r0
    a652:	0f be       	out	0x3f, r0	; 63
    a654:	0f 90       	pop	r0
    a656:	1f 90       	pop	r1
    a658:	18 95       	reti

0000a65a <__vector_112>:
    a65a:	1f 92       	push	r1
    a65c:	0f 92       	push	r0
    a65e:	0f b6       	in	r0, 0x3f	; 63
    a660:	0f 92       	push	r0
    a662:	11 24       	eor	r1, r1
    a664:	0b b6       	in	r0, 0x3b	; 59
    a666:	0f 92       	push	r0
    a668:	2f 93       	push	r18
    a66a:	3f 93       	push	r19
    a66c:	4f 93       	push	r20
    a66e:	5f 93       	push	r21
    a670:	6f 93       	push	r22
    a672:	7f 93       	push	r23
    a674:	8f 93       	push	r24
    a676:	9f 93       	push	r25
    a678:	af 93       	push	r26
    a67a:	bf 93       	push	r27
    a67c:	ef 93       	push	r30
    a67e:	ff 93       	push	r31
    a680:	e0 91 12 23 	lds	r30, 0x2312	; 0x802312 <tc_tcf0_ccc_callback>
    a684:	f0 91 13 23 	lds	r31, 0x2313	; 0x802313 <tc_tcf0_ccc_callback+0x1>
    a688:	30 97       	sbiw	r30, 0x00	; 0
    a68a:	09 f0       	breq	.+2      	; 0xa68e <__vector_112+0x34>
    a68c:	19 95       	eicall
    a68e:	ff 91       	pop	r31
    a690:	ef 91       	pop	r30
    a692:	bf 91       	pop	r27
    a694:	af 91       	pop	r26
    a696:	9f 91       	pop	r25
    a698:	8f 91       	pop	r24
    a69a:	7f 91       	pop	r23
    a69c:	6f 91       	pop	r22
    a69e:	5f 91       	pop	r21
    a6a0:	4f 91       	pop	r20
    a6a2:	3f 91       	pop	r19
    a6a4:	2f 91       	pop	r18
    a6a6:	0f 90       	pop	r0
    a6a8:	0b be       	out	0x3b, r0	; 59
    a6aa:	0f 90       	pop	r0
    a6ac:	0f be       	out	0x3f, r0	; 63
    a6ae:	0f 90       	pop	r0
    a6b0:	1f 90       	pop	r1
    a6b2:	18 95       	reti

0000a6b4 <__vector_113>:
    a6b4:	1f 92       	push	r1
    a6b6:	0f 92       	push	r0
    a6b8:	0f b6       	in	r0, 0x3f	; 63
    a6ba:	0f 92       	push	r0
    a6bc:	11 24       	eor	r1, r1
    a6be:	0b b6       	in	r0, 0x3b	; 59
    a6c0:	0f 92       	push	r0
    a6c2:	2f 93       	push	r18
    a6c4:	3f 93       	push	r19
    a6c6:	4f 93       	push	r20
    a6c8:	5f 93       	push	r21
    a6ca:	6f 93       	push	r22
    a6cc:	7f 93       	push	r23
    a6ce:	8f 93       	push	r24
    a6d0:	9f 93       	push	r25
    a6d2:	af 93       	push	r26
    a6d4:	bf 93       	push	r27
    a6d6:	ef 93       	push	r30
    a6d8:	ff 93       	push	r31
    a6da:	e0 91 10 23 	lds	r30, 0x2310	; 0x802310 <tc_tcf0_ccd_callback>
    a6de:	f0 91 11 23 	lds	r31, 0x2311	; 0x802311 <tc_tcf0_ccd_callback+0x1>
    a6e2:	30 97       	sbiw	r30, 0x00	; 0
    a6e4:	09 f0       	breq	.+2      	; 0xa6e8 <__vector_113+0x34>
    a6e6:	19 95       	eicall
    a6e8:	ff 91       	pop	r31
    a6ea:	ef 91       	pop	r30
    a6ec:	bf 91       	pop	r27
    a6ee:	af 91       	pop	r26
    a6f0:	9f 91       	pop	r25
    a6f2:	8f 91       	pop	r24
    a6f4:	7f 91       	pop	r23
    a6f6:	6f 91       	pop	r22
    a6f8:	5f 91       	pop	r21
    a6fa:	4f 91       	pop	r20
    a6fc:	3f 91       	pop	r19
    a6fe:	2f 91       	pop	r18
    a700:	0f 90       	pop	r0
    a702:	0b be       	out	0x3b, r0	; 59
    a704:	0f 90       	pop	r0
    a706:	0f be       	out	0x3f, r0	; 63
    a708:	0f 90       	pop	r0
    a70a:	1f 90       	pop	r1
    a70c:	18 95       	reti

0000a70e <tc_enable>:
    a70e:	1f 93       	push	r17
    a710:	cf 93       	push	r28
    a712:	df 93       	push	r29
    a714:	1f 92       	push	r1
    a716:	1f 92       	push	r1
    a718:	cd b7       	in	r28, 0x3d	; 61
    a71a:	de b7       	in	r29, 0x3e	; 62
    a71c:	2f b7       	in	r18, 0x3f	; 63
    a71e:	2a 83       	std	Y+2, r18	; 0x02
    a720:	f8 94       	cli
    a722:	1a 81       	ldd	r17, Y+2	; 0x02
    a724:	28 2f       	mov	r18, r24
    a726:	39 2f       	mov	r19, r25
    a728:	21 15       	cp	r18, r1
    a72a:	88 e0       	ldi	r24, 0x08	; 8
    a72c:	38 07       	cpc	r19, r24
    a72e:	49 f4       	brne	.+18     	; 0xa742 <tc_enable+0x34>
    a730:	61 e0       	ldi	r22, 0x01	; 1
    a732:	83 e0       	ldi	r24, 0x03	; 3
    a734:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a738:	64 e0       	ldi	r22, 0x04	; 4
    a73a:	83 e0       	ldi	r24, 0x03	; 3
    a73c:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a740:	4f c0       	rjmp	.+158    	; 0xa7e0 <tc_enable+0xd2>
    a742:	20 34       	cpi	r18, 0x40	; 64
    a744:	88 e0       	ldi	r24, 0x08	; 8
    a746:	38 07       	cpc	r19, r24
    a748:	49 f4       	brne	.+18     	; 0xa75c <tc_enable+0x4e>
    a74a:	62 e0       	ldi	r22, 0x02	; 2
    a74c:	83 e0       	ldi	r24, 0x03	; 3
    a74e:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a752:	64 e0       	ldi	r22, 0x04	; 4
    a754:	83 e0       	ldi	r24, 0x03	; 3
    a756:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a75a:	42 c0       	rjmp	.+132    	; 0xa7e0 <tc_enable+0xd2>
    a75c:	21 15       	cp	r18, r1
    a75e:	89 e0       	ldi	r24, 0x09	; 9
    a760:	38 07       	cpc	r19, r24
    a762:	49 f4       	brne	.+18     	; 0xa776 <tc_enable+0x68>
    a764:	61 e0       	ldi	r22, 0x01	; 1
    a766:	84 e0       	ldi	r24, 0x04	; 4
    a768:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a76c:	64 e0       	ldi	r22, 0x04	; 4
    a76e:	84 e0       	ldi	r24, 0x04	; 4
    a770:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a774:	35 c0       	rjmp	.+106    	; 0xa7e0 <tc_enable+0xd2>
    a776:	20 34       	cpi	r18, 0x40	; 64
    a778:	89 e0       	ldi	r24, 0x09	; 9
    a77a:	38 07       	cpc	r19, r24
    a77c:	49 f4       	brne	.+18     	; 0xa790 <tc_enable+0x82>
    a77e:	62 e0       	ldi	r22, 0x02	; 2
    a780:	84 e0       	ldi	r24, 0x04	; 4
    a782:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a786:	64 e0       	ldi	r22, 0x04	; 4
    a788:	84 e0       	ldi	r24, 0x04	; 4
    a78a:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a78e:	28 c0       	rjmp	.+80     	; 0xa7e0 <tc_enable+0xd2>
    a790:	21 15       	cp	r18, r1
    a792:	8a e0       	ldi	r24, 0x0A	; 10
    a794:	38 07       	cpc	r19, r24
    a796:	49 f4       	brne	.+18     	; 0xa7aa <tc_enable+0x9c>
    a798:	61 e0       	ldi	r22, 0x01	; 1
    a79a:	85 e0       	ldi	r24, 0x05	; 5
    a79c:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a7a0:	64 e0       	ldi	r22, 0x04	; 4
    a7a2:	85 e0       	ldi	r24, 0x05	; 5
    a7a4:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a7a8:	1b c0       	rjmp	.+54     	; 0xa7e0 <tc_enable+0xd2>
    a7aa:	20 34       	cpi	r18, 0x40	; 64
    a7ac:	8a e0       	ldi	r24, 0x0A	; 10
    a7ae:	38 07       	cpc	r19, r24
    a7b0:	49 f4       	brne	.+18     	; 0xa7c4 <tc_enable+0xb6>
    a7b2:	62 e0       	ldi	r22, 0x02	; 2
    a7b4:	85 e0       	ldi	r24, 0x05	; 5
    a7b6:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a7ba:	64 e0       	ldi	r22, 0x04	; 4
    a7bc:	85 e0       	ldi	r24, 0x05	; 5
    a7be:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a7c2:	0e c0       	rjmp	.+28     	; 0xa7e0 <tc_enable+0xd2>
    a7c4:	21 15       	cp	r18, r1
    a7c6:	3b 40       	sbci	r19, 0x0B	; 11
    a7c8:	49 f4       	brne	.+18     	; 0xa7dc <tc_enable+0xce>
    a7ca:	61 e0       	ldi	r22, 0x01	; 1
    a7cc:	86 e0       	ldi	r24, 0x06	; 6
    a7ce:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a7d2:	64 e0       	ldi	r22, 0x04	; 4
    a7d4:	86 e0       	ldi	r24, 0x06	; 6
    a7d6:	0e 94 b9 74 	call	0xe972	; 0xe972 <sysclk_enable_module>
    a7da:	02 c0       	rjmp	.+4      	; 0xa7e0 <tc_enable+0xd2>
    a7dc:	1f bf       	out	0x3f, r17	; 63
    a7de:	10 c0       	rjmp	.+32     	; 0xa800 <tc_enable+0xf2>
    a7e0:	80 91 7c 2e 	lds	r24, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    a7e4:	8f 3f       	cpi	r24, 0xFF	; 255
    a7e6:	09 f4       	brne	.+2      	; 0xa7ea <tc_enable+0xdc>
    a7e8:	ff cf       	rjmp	.-2      	; 0xa7e8 <tc_enable+0xda>
    a7ea:	8f b7       	in	r24, 0x3f	; 63
    a7ec:	89 83       	std	Y+1, r24	; 0x01
    a7ee:	f8 94       	cli
    a7f0:	99 81       	ldd	r25, Y+1	; 0x01
    a7f2:	eb e7       	ldi	r30, 0x7B	; 123
    a7f4:	fe e2       	ldi	r31, 0x2E	; 46
    a7f6:	81 81       	ldd	r24, Z+1	; 0x01
    a7f8:	8f 5f       	subi	r24, 0xFF	; 255
    a7fa:	81 83       	std	Z+1, r24	; 0x01
    a7fc:	9f bf       	out	0x3f, r25	; 63
    a7fe:	1f bf       	out	0x3f, r17	; 63
    a800:	0f 90       	pop	r0
    a802:	0f 90       	pop	r0
    a804:	df 91       	pop	r29
    a806:	cf 91       	pop	r28
    a808:	1f 91       	pop	r17
    a80a:	08 95       	ret

0000a80c <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    a80c:	81 15       	cp	r24, r1
    a80e:	28 e0       	ldi	r18, 0x08	; 8
    a810:	92 07       	cpc	r25, r18
    a812:	29 f4       	brne	.+10     	; 0xa81e <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    a814:	60 93 56 23 	sts	0x2356, r22	; 0x802356 <tc_tcc0_ovf_callback>
    a818:	70 93 57 23 	sts	0x2357, r23	; 0x802357 <tc_tcc0_ovf_callback+0x1>
    a81c:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    a81e:	80 34       	cpi	r24, 0x40	; 64
    a820:	28 e0       	ldi	r18, 0x08	; 8
    a822:	92 07       	cpc	r25, r18
    a824:	29 f4       	brne	.+10     	; 0xa830 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    a826:	60 93 4a 23 	sts	0x234A, r22	; 0x80234a <tc_tcc1_ovf_callback>
    a82a:	70 93 4b 23 	sts	0x234B, r23	; 0x80234b <tc_tcc1_ovf_callback+0x1>
    a82e:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    a830:	81 15       	cp	r24, r1
    a832:	29 e0       	ldi	r18, 0x09	; 9
    a834:	92 07       	cpc	r25, r18
    a836:	29 f4       	brne	.+10     	; 0xa842 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    a838:	60 93 42 23 	sts	0x2342, r22	; 0x802342 <tc_tcd0_ovf_callback>
    a83c:	70 93 43 23 	sts	0x2343, r23	; 0x802343 <tc_tcd0_ovf_callback+0x1>
    a840:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    a842:	80 34       	cpi	r24, 0x40	; 64
    a844:	29 e0       	ldi	r18, 0x09	; 9
    a846:	92 07       	cpc	r25, r18
    a848:	29 f4       	brne	.+10     	; 0xa854 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    a84a:	60 93 36 23 	sts	0x2336, r22	; 0x802336 <tc_tcd1_ovf_callback>
    a84e:	70 93 37 23 	sts	0x2337, r23	; 0x802337 <tc_tcd1_ovf_callback+0x1>
    a852:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    a854:	81 15       	cp	r24, r1
    a856:	2a e0       	ldi	r18, 0x0A	; 10
    a858:	92 07       	cpc	r25, r18
    a85a:	29 f4       	brne	.+10     	; 0xa866 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    a85c:	60 93 2e 23 	sts	0x232E, r22	; 0x80232e <tc_tce0_ovf_callback>
    a860:	70 93 2f 23 	sts	0x232F, r23	; 0x80232f <tc_tce0_ovf_callback+0x1>
    a864:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    a866:	80 34       	cpi	r24, 0x40	; 64
    a868:	2a e0       	ldi	r18, 0x0A	; 10
    a86a:	92 07       	cpc	r25, r18
    a86c:	29 f4       	brne	.+10     	; 0xa878 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    a86e:	60 93 22 23 	sts	0x2322, r22	; 0x802322 <tc_tce1_ovf_callback>
    a872:	70 93 23 23 	sts	0x2323, r23	; 0x802323 <tc_tce1_ovf_callback+0x1>
    a876:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    a878:	81 15       	cp	r24, r1
    a87a:	9b 40       	sbci	r25, 0x0B	; 11
    a87c:	21 f4       	brne	.+8      	; 0xa886 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    a87e:	60 93 1a 23 	sts	0x231A, r22	; 0x80231a <tc_tcf0_ovf_callback>
    a882:	70 93 1b 23 	sts	0x231B, r23	; 0x80231b <tc_tcf0_ovf_callback+0x1>
    a886:	08 95       	ret

0000a888 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    a888:	cf 93       	push	r28
    a88a:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    a88c:	e0 91 58 23 	lds	r30, 0x2358	; 0x802358 <transfer>
    a890:	f0 91 59 23 	lds	r31, 0x2359	; 0x802359 <transfer+0x1>
    a894:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    a896:	83 ff       	sbrs	r24, 3
    a898:	08 c0       	rjmp	.+16     	; 0xa8aa <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    a89a:	88 60       	ori	r24, 0x08	; 8
    a89c:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    a89e:	83 e0       	ldi	r24, 0x03	; 3
    a8a0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    a8a2:	86 ef       	ldi	r24, 0xF6	; 246
    a8a4:	80 93 62 23 	sts	0x2362, r24	; 0x802362 <transfer+0xa>
    a8a8:	83 c0       	rjmp	.+262    	; 0xa9b0 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    a8aa:	98 2f       	mov	r25, r24
    a8ac:	94 71       	andi	r25, 0x14	; 20
    a8ae:	31 f0       	breq	.+12     	; 0xa8bc <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a8b0:	83 e0       	ldi	r24, 0x03	; 3
    a8b2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    a8b4:	8f ef       	ldi	r24, 0xFF	; 255
    a8b6:	80 93 62 23 	sts	0x2362, r24	; 0x802362 <transfer+0xa>
    a8ba:	7a c0       	rjmp	.+244    	; 0xa9b0 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    a8bc:	86 ff       	sbrs	r24, 6
    a8be:	43 c0       	rjmp	.+134    	; 0xa946 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    a8c0:	c8 e5       	ldi	r28, 0x58	; 88
    a8c2:	d3 e2       	ldi	r29, 0x23	; 35
    a8c4:	aa 81       	ldd	r26, Y+2	; 0x02
    a8c6:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    a8c8:	8c 81       	ldd	r24, Y+4	; 0x04
    a8ca:	9d 81       	ldd	r25, Y+5	; 0x05
    a8cc:	14 96       	adiw	r26, 0x04	; 4
    a8ce:	2d 91       	ld	r18, X+
    a8d0:	3c 91       	ld	r19, X
    a8d2:	15 97       	sbiw	r26, 0x05	; 5
    a8d4:	82 17       	cp	r24, r18
    a8d6:	93 07       	cpc	r25, r19
    a8d8:	6c f4       	brge	.+26     	; 0xa8f4 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    a8da:	9c 01       	movw	r18, r24
    a8dc:	2f 5f       	subi	r18, 0xFF	; 255
    a8de:	3f 4f       	sbci	r19, 0xFF	; 255
    a8e0:	20 93 5c 23 	sts	0x235C, r18	; 0x80235c <transfer+0x4>
    a8e4:	30 93 5d 23 	sts	0x235D, r19	; 0x80235d <transfer+0x5>
    a8e8:	a8 0f       	add	r26, r24
    a8ea:	b9 1f       	adc	r27, r25
    a8ec:	11 96       	adiw	r26, 0x01	; 1
    a8ee:	8c 91       	ld	r24, X
    a8f0:	87 83       	std	Z+7, r24	; 0x07
    a8f2:	5e c0       	rjmp	.+188    	; 0xa9b0 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    a8f4:	80 91 5e 23 	lds	r24, 0x235E	; 0x80235e <transfer+0x6>
    a8f8:	90 91 5f 23 	lds	r25, 0x235F	; 0x80235f <transfer+0x7>
    a8fc:	18 96       	adiw	r26, 0x08	; 8
    a8fe:	2d 91       	ld	r18, X+
    a900:	3c 91       	ld	r19, X
    a902:	19 97       	sbiw	r26, 0x09	; 9
    a904:	82 17       	cp	r24, r18
    a906:	93 07       	cpc	r25, r19
    a908:	c8 f4       	brcc	.+50     	; 0xa93c <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    a90a:	20 91 60 23 	lds	r18, 0x2360	; 0x802360 <transfer+0x8>
    a90e:	22 23       	and	r18, r18
    a910:	21 f0       	breq	.+8      	; 0xa91a <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    a912:	86 81       	ldd	r24, Z+6	; 0x06
    a914:	81 60       	ori	r24, 0x01	; 1
    a916:	86 83       	std	Z+6, r24	; 0x06
    a918:	4b c0       	rjmp	.+150    	; 0xa9b0 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    a91a:	16 96       	adiw	r26, 0x06	; 6
    a91c:	2d 91       	ld	r18, X+
    a91e:	3c 91       	ld	r19, X
    a920:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    a922:	ac 01       	movw	r20, r24
    a924:	4f 5f       	subi	r20, 0xFF	; 255
    a926:	5f 4f       	sbci	r21, 0xFF	; 255
    a928:	40 93 5e 23 	sts	0x235E, r20	; 0x80235e <transfer+0x6>
    a92c:	50 93 5f 23 	sts	0x235F, r21	; 0x80235f <transfer+0x7>
    a930:	d9 01       	movw	r26, r18
    a932:	a8 0f       	add	r26, r24
    a934:	b9 1f       	adc	r27, r25
    a936:	8c 91       	ld	r24, X
    a938:	87 83       	std	Z+7, r24	; 0x07
    a93a:	3a c0       	rjmp	.+116    	; 0xa9b0 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a93c:	83 e0       	ldi	r24, 0x03	; 3
    a93e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    a940:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <transfer+0xa>
    a944:	35 c0       	rjmp	.+106    	; 0xa9b0 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    a946:	88 23       	and	r24, r24
    a948:	84 f5       	brge	.+96     	; 0xa9aa <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    a94a:	a8 e5       	ldi	r26, 0x58	; 88
    a94c:	b3 e2       	ldi	r27, 0x23	; 35
    a94e:	12 96       	adiw	r26, 0x02	; 2
    a950:	cd 91       	ld	r28, X+
    a952:	dc 91       	ld	r29, X
    a954:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    a956:	16 96       	adiw	r26, 0x06	; 6
    a958:	8d 91       	ld	r24, X+
    a95a:	9c 91       	ld	r25, X
    a95c:	17 97       	sbiw	r26, 0x07	; 7
    a95e:	28 85       	ldd	r18, Y+8	; 0x08
    a960:	39 85       	ldd	r19, Y+9	; 0x09
    a962:	82 17       	cp	r24, r18
    a964:	93 07       	cpc	r25, r19
    a966:	d8 f4       	brcc	.+54     	; 0xa99e <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    a968:	6e 81       	ldd	r22, Y+6	; 0x06
    a96a:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    a96c:	9c 01       	movw	r18, r24
    a96e:	2f 5f       	subi	r18, 0xFF	; 255
    a970:	3f 4f       	sbci	r19, 0xFF	; 255
    a972:	20 93 5e 23 	sts	0x235E, r18	; 0x80235e <transfer+0x6>
    a976:	30 93 5f 23 	sts	0x235F, r19	; 0x80235f <transfer+0x7>
    a97a:	47 81       	ldd	r20, Z+7	; 0x07
    a97c:	db 01       	movw	r26, r22
    a97e:	a8 0f       	add	r26, r24
    a980:	b9 1f       	adc	r27, r25
    a982:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    a984:	88 85       	ldd	r24, Y+8	; 0x08
    a986:	99 85       	ldd	r25, Y+9	; 0x09
    a988:	28 17       	cp	r18, r24
    a98a:	39 07       	cpc	r19, r25
    a98c:	18 f4       	brcc	.+6      	; 0xa994 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    a98e:	82 e0       	ldi	r24, 0x02	; 2
    a990:	83 83       	std	Z+3, r24	; 0x03
    a992:	0e c0       	rjmp	.+28     	; 0xa9b0 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    a994:	87 e0       	ldi	r24, 0x07	; 7
    a996:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    a998:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <transfer+0xa>
    a99c:	09 c0       	rjmp	.+18     	; 0xa9b0 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    a99e:	83 e0       	ldi	r24, 0x03	; 3
    a9a0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    a9a2:	89 ef       	ldi	r24, 0xF9	; 249
    a9a4:	80 93 62 23 	sts	0x2362, r24	; 0x802362 <transfer+0xa>
    a9a8:	03 c0       	rjmp	.+6      	; 0xa9b0 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    a9aa:	8b ef       	ldi	r24, 0xFB	; 251
    a9ac:	80 93 62 23 	sts	0x2362, r24	; 0x802362 <transfer+0xa>
	}
}
    a9b0:	df 91       	pop	r29
    a9b2:	cf 91       	pop	r28
    a9b4:	08 95       	ret

0000a9b6 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    a9b6:	1f 92       	push	r1
    a9b8:	0f 92       	push	r0
    a9ba:	0f b6       	in	r0, 0x3f	; 63
    a9bc:	0f 92       	push	r0
    a9be:	11 24       	eor	r1, r1
    a9c0:	0b b6       	in	r0, 0x3b	; 59
    a9c2:	0f 92       	push	r0
    a9c4:	2f 93       	push	r18
    a9c6:	3f 93       	push	r19
    a9c8:	4f 93       	push	r20
    a9ca:	5f 93       	push	r21
    a9cc:	6f 93       	push	r22
    a9ce:	7f 93       	push	r23
    a9d0:	8f 93       	push	r24
    a9d2:	9f 93       	push	r25
    a9d4:	af 93       	push	r26
    a9d6:	bf 93       	push	r27
    a9d8:	ef 93       	push	r30
    a9da:	ff 93       	push	r31
    a9dc:	55 df       	rcall	.-342    	; 0xa888 <twim_interrupt_handler>
    a9de:	ff 91       	pop	r31
    a9e0:	ef 91       	pop	r30
    a9e2:	bf 91       	pop	r27
    a9e4:	af 91       	pop	r26
    a9e6:	9f 91       	pop	r25
    a9e8:	8f 91       	pop	r24
    a9ea:	7f 91       	pop	r23
    a9ec:	6f 91       	pop	r22
    a9ee:	5f 91       	pop	r21
    a9f0:	4f 91       	pop	r20
    a9f2:	3f 91       	pop	r19
    a9f4:	2f 91       	pop	r18
    a9f6:	0f 90       	pop	r0
    a9f8:	0b be       	out	0x3b, r0	; 59
    a9fa:	0f 90       	pop	r0
    a9fc:	0f be       	out	0x3f, r0	; 63
    a9fe:	0f 90       	pop	r0
    aa00:	1f 90       	pop	r1
    aa02:	18 95       	reti

0000aa04 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    aa04:	1f 92       	push	r1
    aa06:	0f 92       	push	r0
    aa08:	0f b6       	in	r0, 0x3f	; 63
    aa0a:	0f 92       	push	r0
    aa0c:	11 24       	eor	r1, r1
    aa0e:	0b b6       	in	r0, 0x3b	; 59
    aa10:	0f 92       	push	r0
    aa12:	2f 93       	push	r18
    aa14:	3f 93       	push	r19
    aa16:	4f 93       	push	r20
    aa18:	5f 93       	push	r21
    aa1a:	6f 93       	push	r22
    aa1c:	7f 93       	push	r23
    aa1e:	8f 93       	push	r24
    aa20:	9f 93       	push	r25
    aa22:	af 93       	push	r26
    aa24:	bf 93       	push	r27
    aa26:	ef 93       	push	r30
    aa28:	ff 93       	push	r31
    aa2a:	2e df       	rcall	.-420    	; 0xa888 <twim_interrupt_handler>
    aa2c:	ff 91       	pop	r31
    aa2e:	ef 91       	pop	r30
    aa30:	bf 91       	pop	r27
    aa32:	af 91       	pop	r26
    aa34:	9f 91       	pop	r25
    aa36:	8f 91       	pop	r24
    aa38:	7f 91       	pop	r23
    aa3a:	6f 91       	pop	r22
    aa3c:	5f 91       	pop	r21
    aa3e:	4f 91       	pop	r20
    aa40:	3f 91       	pop	r19
    aa42:	2f 91       	pop	r18
    aa44:	0f 90       	pop	r0
    aa46:	0b be       	out	0x3b, r0	; 59
    aa48:	0f 90       	pop	r0
    aa4a:	0f be       	out	0x3f, r0	; 63
    aa4c:	0f 90       	pop	r0
    aa4e:	1f 90       	pop	r1
    aa50:	18 95       	reti

0000aa52 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    aa52:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    aa54:	db 01       	movw	r26, r22
    aa56:	14 96       	adiw	r26, 0x04	; 4
    aa58:	8c 91       	ld	r24, X
    aa5a:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    aa5c:	88 eb       	ldi	r24, 0xB8	; 184
    aa5e:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    aa60:	81 e0       	ldi	r24, 0x01	; 1
    aa62:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    aa64:	e8 e5       	ldi	r30, 0x58	; 88
    aa66:	f3 e2       	ldi	r31, 0x23	; 35
    aa68:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    aa6a:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    aa6c:	e0 ea       	ldi	r30, 0xA0	; 160
    aa6e:	f0 e0       	ldi	r31, 0x00	; 0
    aa70:	82 81       	ldd	r24, Z+2	; 0x02
    aa72:	82 60       	ori	r24, 0x02	; 2
    aa74:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    aa76:	78 94       	sei

	return STATUS_OK;
}
    aa78:	80 e0       	ldi	r24, 0x00	; 0
    aa7a:	08 95       	ret

0000aa7c <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    aa7c:	cf 93       	push	r28
    aa7e:	df 93       	push	r29
    aa80:	1f 92       	push	r1
    aa82:	cd b7       	in	r28, 0x3d	; 61
    aa84:	de b7       	in	r29, 0x3e	; 62
    aa86:	9c 01       	movw	r18, r24
    aa88:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    aa8a:	89 2b       	or	r24, r25
    aa8c:	09 f4       	brne	.+2      	; 0xaa90 <twi_master_transfer+0x14>
    aa8e:	51 c0       	rjmp	.+162    	; 0xab32 <twi_master_transfer+0xb6>
    aa90:	30 97       	sbiw	r30, 0x00	; 0
    aa92:	09 f4       	brne	.+2      	; 0xaa96 <twi_master_transfer+0x1a>
    aa94:	50 c0       	rjmp	.+160    	; 0xab36 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    aa96:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    aa98:	80 91 61 23 	lds	r24, 0x2361	; 0x802361 <transfer+0x9>
    aa9c:	88 23       	and	r24, r24
    aa9e:	19 f0       	breq	.+6      	; 0xaaa6 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    aaa0:	99 23       	and	r25, r25
    aaa2:	f1 f3       	breq	.-4      	; 0xaaa0 <twi_master_transfer+0x24>
    aaa4:	4a c0       	rjmp	.+148    	; 0xab3a <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    aaa6:	8f b7       	in	r24, 0x3f	; 63
    aaa8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    aaaa:	f8 94       	cli
	return flags;
    aaac:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    aaae:	a8 e5       	ldi	r26, 0x58	; 88
    aab0:	b3 e2       	ldi	r27, 0x23	; 35
    aab2:	91 e0       	ldi	r25, 0x01	; 1
    aab4:	19 96       	adiw	r26, 0x09	; 9
    aab6:	9c 93       	st	X, r25
    aab8:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    aaba:	90 e8       	ldi	r25, 0x80	; 128
    aabc:	1a 96       	adiw	r26, 0x0a	; 10
    aabe:	9c 93       	st	X, r25
    aac0:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    aac2:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    aac4:	2d 93       	st	X+, r18
    aac6:	3c 93       	st	X, r19
    aac8:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    aaca:	12 96       	adiw	r26, 0x02	; 2
    aacc:	6d 93       	st	X+, r22
    aace:	7c 93       	st	X, r23
    aad0:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    aad2:	14 96       	adiw	r26, 0x04	; 4
    aad4:	1d 92       	st	X+, r1
    aad6:	1c 92       	st	X, r1
    aad8:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    aada:	16 96       	adiw	r26, 0x06	; 6
    aadc:	1d 92       	st	X+, r1
    aade:	1c 92       	st	X, r1
    aae0:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    aae2:	18 96       	adiw	r26, 0x08	; 8
    aae4:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    aae6:	80 81       	ld	r24, Z
    aae8:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    aaea:	64 81       	ldd	r22, Z+4	; 0x04
    aaec:	75 81       	ldd	r23, Z+5	; 0x05
    aaee:	67 2b       	or	r22, r23
    aaf0:	11 f4       	brne	.+4      	; 0xaaf6 <twi_master_transfer+0x7a>
    aaf2:	41 11       	cpse	r20, r1
    aaf4:	03 c0       	rjmp	.+6      	; 0xaafc <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    aaf6:	f9 01       	movw	r30, r18
    aaf8:	86 83       	std	Z+6, r24	; 0x06
    aafa:	03 c0       	rjmp	.+6      	; 0xab02 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    aafc:	81 60       	ori	r24, 0x01	; 1
    aafe:	f9 01       	movw	r30, r18
    ab00:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    ab02:	e8 e5       	ldi	r30, 0x58	; 88
    ab04:	f3 e2       	ldi	r31, 0x23	; 35
    ab06:	92 85       	ldd	r25, Z+10	; 0x0a
    ab08:	90 38       	cpi	r25, 0x80	; 128
    ab0a:	e9 f3       	breq	.-6      	; 0xab06 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    ab0c:	f9 01       	movw	r30, r18
    ab0e:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    ab10:	83 70       	andi	r24, 0x03	; 3
    ab12:	81 30       	cpi	r24, 0x01	; 1
    ab14:	49 f0       	breq	.+18     	; 0xab28 <twi_master_transfer+0xac>
    ab16:	a8 e5       	ldi	r26, 0x58	; 88
    ab18:	b3 e2       	ldi	r27, 0x23	; 35
    ab1a:	ed 91       	ld	r30, X+
    ab1c:	fc 91       	ld	r31, X
    ab1e:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    ab20:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    ab22:	83 70       	andi	r24, 0x03	; 3
    ab24:	81 30       	cpi	r24, 0x01	; 1
    ab26:	c9 f7       	brne	.-14     	; 0xab1a <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    ab28:	e8 e5       	ldi	r30, 0x58	; 88
    ab2a:	f3 e2       	ldi	r31, 0x23	; 35
    ab2c:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    ab2e:	11 86       	std	Z+9, r1	; 0x09
    ab30:	05 c0       	rjmp	.+10     	; 0xab3c <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    ab32:	88 ef       	ldi	r24, 0xF8	; 248
    ab34:	03 c0       	rjmp	.+6      	; 0xab3c <twi_master_transfer+0xc0>
    ab36:	88 ef       	ldi	r24, 0xF8	; 248
    ab38:	01 c0       	rjmp	.+2      	; 0xab3c <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    ab3a:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    ab3c:	0f 90       	pop	r0
    ab3e:	df 91       	pop	r29
    ab40:	cf 91       	pop	r28
    ab42:	08 95       	ret

0000ab44 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    ab44:	cf 93       	push	r28
    ab46:	df 93       	push	r29
    ab48:	1f 92       	push	r1
    ab4a:	1f 92       	push	r1
    ab4c:	cd b7       	in	r28, 0x3d	; 61
    ab4e:	de b7       	in	r29, 0x3e	; 62
    ab50:	81 11       	cpse	r24, r1
    ab52:	26 c0       	rjmp	.+76     	; 0xaba0 <udd_sleep_mode+0x5c>
    ab54:	90 91 90 24 	lds	r25, 0x2490	; 0x802490 <udd_b_idle>
    ab58:	99 23       	and	r25, r25
    ab5a:	f9 f0       	breq	.+62     	; 0xab9a <udd_sleep_mode+0x56>
    ab5c:	90 91 7c 2e 	lds	r25, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    ab60:	91 11       	cpse	r25, r1
    ab62:	01 c0       	rjmp	.+2      	; 0xab66 <udd_sleep_mode+0x22>
    ab64:	ff cf       	rjmp	.-2      	; 0xab64 <udd_sleep_mode+0x20>
    ab66:	9f b7       	in	r25, 0x3f	; 63
    ab68:	9a 83       	std	Y+2, r25	; 0x02
    ab6a:	f8 94       	cli
    ab6c:	2a 81       	ldd	r18, Y+2	; 0x02
    ab6e:	eb e7       	ldi	r30, 0x7B	; 123
    ab70:	fe e2       	ldi	r31, 0x2E	; 46
    ab72:	91 81       	ldd	r25, Z+1	; 0x01
    ab74:	91 50       	subi	r25, 0x01	; 1
    ab76:	91 83       	std	Z+1, r25	; 0x01
    ab78:	2f bf       	out	0x3f, r18	; 63
    ab7a:	0f c0       	rjmp	.+30     	; 0xab9a <udd_sleep_mode+0x56>
    ab7c:	90 91 7c 2e 	lds	r25, 0x2E7C	; 0x802e7c <sleepmgr_locks+0x1>
    ab80:	9f 3f       	cpi	r25, 0xFF	; 255
    ab82:	09 f4       	brne	.+2      	; 0xab86 <udd_sleep_mode+0x42>
    ab84:	ff cf       	rjmp	.-2      	; 0xab84 <udd_sleep_mode+0x40>
    ab86:	9f b7       	in	r25, 0x3f	; 63
    ab88:	99 83       	std	Y+1, r25	; 0x01
    ab8a:	f8 94       	cli
    ab8c:	29 81       	ldd	r18, Y+1	; 0x01
    ab8e:	eb e7       	ldi	r30, 0x7B	; 123
    ab90:	fe e2       	ldi	r31, 0x2E	; 46
    ab92:	91 81       	ldd	r25, Z+1	; 0x01
    ab94:	9f 5f       	subi	r25, 0xFF	; 255
    ab96:	91 83       	std	Z+1, r25	; 0x01
    ab98:	2f bf       	out	0x3f, r18	; 63
    ab9a:	80 93 90 24 	sts	0x2490, r24	; 0x802490 <udd_b_idle>
    ab9e:	05 c0       	rjmp	.+10     	; 0xabaa <udd_sleep_mode+0x66>
    aba0:	90 91 90 24 	lds	r25, 0x2490	; 0x802490 <udd_b_idle>
    aba4:	99 23       	and	r25, r25
    aba6:	51 f3       	breq	.-44     	; 0xab7c <udd_sleep_mode+0x38>
    aba8:	f8 cf       	rjmp	.-16     	; 0xab9a <udd_sleep_mode+0x56>
    abaa:	0f 90       	pop	r0
    abac:	0f 90       	pop	r0
    abae:	df 91       	pop	r29
    abb0:	cf 91       	pop	r28
    abb2:	08 95       	ret

0000abb4 <udd_ctrl_init>:
    abb4:	0f 93       	push	r16
    abb6:	e8 ec       	ldi	r30, 0xC8	; 200
    abb8:	f4 e0       	ldi	r31, 0x04	; 4
    abba:	80 81       	ld	r24, Z
    abbc:	8f 7d       	andi	r24, 0xDF	; 223
    abbe:	80 83       	st	Z, r24
    abc0:	80 81       	ld	r24, Z
    abc2:	8f 7d       	andi	r24, 0xDF	; 223
    abc4:	80 83       	st	Z, r24
    abc6:	e4 e6       	ldi	r30, 0x64	; 100
    abc8:	f4 e2       	ldi	r31, 0x24	; 36
    abca:	02 e0       	ldi	r16, 0x02	; 2
    abcc:	05 93       	las	Z, r16
    abce:	10 92 66 24 	sts	0x2466, r1	; 0x802466 <udd_sram+0x16>
    abd2:	10 92 67 24 	sts	0x2467, r1	; 0x802467 <udd_sram+0x17>
    abd6:	00 e2       	ldi	r16, 0x20	; 32
    abd8:	06 93       	lac	Z, r16
    abda:	00 e4       	ldi	r16, 0x40	; 64
    abdc:	06 93       	lac	Z, r16
    abde:	ec e5       	ldi	r30, 0x5C	; 92
    abe0:	f4 e2       	ldi	r31, 0x24	; 36
    abe2:	00 e4       	ldi	r16, 0x40	; 64
    abe4:	06 93       	lac	Z, r16
    abe6:	e5 ee       	ldi	r30, 0xE5	; 229
    abe8:	fd e2       	ldi	r31, 0x2D	; 45
    abea:	14 86       	std	Z+12, r1	; 0x0c
    abec:	15 86       	std	Z+13, r1	; 0x0d
    abee:	16 86       	std	Z+14, r1	; 0x0e
    abf0:	17 86       	std	Z+15, r1	; 0x0f
    abf2:	12 86       	std	Z+10, r1	; 0x0a
    abf4:	13 86       	std	Z+11, r1	; 0x0b
    abf6:	10 92 4c 24 	sts	0x244C, r1	; 0x80244c <udd_ep_control_state>
    abfa:	0f 91       	pop	r16
    abfc:	08 95       	ret

0000abfe <udd_ctrl_stall_data>:
    abfe:	0f 93       	push	r16
    ac00:	85 e0       	ldi	r24, 0x05	; 5
    ac02:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
    ac06:	e5 e6       	ldi	r30, 0x65	; 101
    ac08:	f4 e2       	ldi	r31, 0x24	; 36
    ac0a:	04 e0       	ldi	r16, 0x04	; 4
    ac0c:	05 93       	las	Z, r16
    ac0e:	ed e5       	ldi	r30, 0x5D	; 93
    ac10:	f4 e2       	ldi	r31, 0x24	; 36
    ac12:	04 e0       	ldi	r16, 0x04	; 4
    ac14:	05 93       	las	Z, r16
    ac16:	0f 91       	pop	r16
    ac18:	08 95       	ret

0000ac1a <udd_ctrl_send_zlp_in>:
    ac1a:	0f 93       	push	r16
    ac1c:	83 e0       	ldi	r24, 0x03	; 3
    ac1e:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
    ac22:	10 92 66 24 	sts	0x2466, r1	; 0x802466 <udd_sram+0x16>
    ac26:	10 92 67 24 	sts	0x2467, r1	; 0x802467 <udd_sram+0x17>
    ac2a:	e4 e6       	ldi	r30, 0x64	; 100
    ac2c:	f4 e2       	ldi	r31, 0x24	; 36
    ac2e:	02 e0       	ldi	r16, 0x02	; 2
    ac30:	06 93       	lac	Z, r16
    ac32:	0f 91       	pop	r16
    ac34:	08 95       	ret

0000ac36 <udd_ctrl_endofrequest>:
    ac36:	e0 91 f1 2d 	lds	r30, 0x2DF1	; 0x802df1 <udd_g_ctrlreq+0xc>
    ac3a:	f0 91 f2 2d 	lds	r31, 0x2DF2	; 0x802df2 <udd_g_ctrlreq+0xd>
    ac3e:	30 97       	sbiw	r30, 0x00	; 0
    ac40:	09 f0       	breq	.+2      	; 0xac44 <udd_ctrl_endofrequest+0xe>
    ac42:	19 95       	eicall
    ac44:	08 95       	ret

0000ac46 <udd_ctrl_in_sent>:
    ac46:	0f 93       	push	r16
    ac48:	cf 93       	push	r28
    ac4a:	df 93       	push	r29
    ac4c:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <udd_ep_control_state>
    ac50:	83 30       	cpi	r24, 0x03	; 3
    ac52:	19 f4       	brne	.+6      	; 0xac5a <udd_ctrl_in_sent+0x14>
    ac54:	f0 df       	rcall	.-32     	; 0xac36 <udd_ctrl_endofrequest>
    ac56:	ae df       	rcall	.-164    	; 0xabb4 <udd_ctrl_init>
    ac58:	5e c0       	rjmp	.+188    	; 0xad16 <udd_ctrl_in_sent+0xd0>
    ac5a:	80 91 48 24 	lds	r24, 0x2448	; 0x802448 <udd_ctrl_payload_nb_trans>
    ac5e:	90 91 49 24 	lds	r25, 0x2449	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    ac62:	c0 91 ef 2d 	lds	r28, 0x2DEF	; 0x802def <udd_g_ctrlreq+0xa>
    ac66:	d0 91 f0 2d 	lds	r29, 0x2DF0	; 0x802df0 <udd_g_ctrlreq+0xb>
    ac6a:	c8 1b       	sub	r28, r24
    ac6c:	d9 0b       	sbc	r29, r25
    ac6e:	71 f5       	brne	.+92     	; 0xaccc <udd_ctrl_in_sent+0x86>
    ac70:	20 91 4a 24 	lds	r18, 0x244A	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    ac74:	30 91 4b 24 	lds	r19, 0x244B	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    ac78:	82 0f       	add	r24, r18
    ac7a:	93 1f       	adc	r25, r19
    ac7c:	80 93 4a 24 	sts	0x244A, r24	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    ac80:	90 93 4b 24 	sts	0x244B, r25	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    ac84:	20 91 eb 2d 	lds	r18, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    ac88:	30 91 ec 2d 	lds	r19, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    ac8c:	82 17       	cp	r24, r18
    ac8e:	93 07       	cpc	r25, r19
    ac90:	21 f0       	breq	.+8      	; 0xac9a <udd_ctrl_in_sent+0x54>
    ac92:	80 91 63 23 	lds	r24, 0x2363	; 0x802363 <b_shortpacket.5472>
    ac96:	88 23       	and	r24, r24
    ac98:	41 f0       	breq	.+16     	; 0xacaa <udd_ctrl_in_sent+0x64>
    ac9a:	84 e0       	ldi	r24, 0x04	; 4
    ac9c:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
    aca0:	ec e5       	ldi	r30, 0x5C	; 92
    aca2:	f4 e2       	ldi	r31, 0x24	; 36
    aca4:	02 e0       	ldi	r16, 0x02	; 2
    aca6:	06 93       	lac	Z, r16
    aca8:	36 c0       	rjmp	.+108    	; 0xad16 <udd_ctrl_in_sent+0xd0>
    acaa:	e0 91 f3 2d 	lds	r30, 0x2DF3	; 0x802df3 <udd_g_ctrlreq+0xe>
    acae:	f0 91 f4 2d 	lds	r31, 0x2DF4	; 0x802df4 <udd_g_ctrlreq+0xf>
    acb2:	30 97       	sbiw	r30, 0x00	; 0
    acb4:	99 f0       	breq	.+38     	; 0xacdc <udd_ctrl_in_sent+0x96>
    acb6:	19 95       	eicall
    acb8:	88 23       	and	r24, r24
    acba:	81 f0       	breq	.+32     	; 0xacdc <udd_ctrl_in_sent+0x96>
    acbc:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <udd_ctrl_payload_nb_trans>
    acc0:	10 92 49 24 	sts	0x2449, r1	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    acc4:	c0 91 ef 2d 	lds	r28, 0x2DEF	; 0x802def <udd_g_ctrlreq+0xa>
    acc8:	d0 91 f0 2d 	lds	r29, 0x2DF0	; 0x802df0 <udd_g_ctrlreq+0xb>
    accc:	c0 34       	cpi	r28, 0x40	; 64
    acce:	d1 05       	cpc	r29, r1
    acd0:	28 f0       	brcs	.+10     	; 0xacdc <udd_ctrl_in_sent+0x96>
    acd2:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <b_shortpacket.5472>
    acd6:	c0 e4       	ldi	r28, 0x40	; 64
    acd8:	d0 e0       	ldi	r29, 0x00	; 0
    acda:	03 c0       	rjmp	.+6      	; 0xace2 <udd_ctrl_in_sent+0x9c>
    acdc:	81 e0       	ldi	r24, 0x01	; 1
    acde:	80 93 63 23 	sts	0x2363, r24	; 0x802363 <b_shortpacket.5472>
    ace2:	e0 e5       	ldi	r30, 0x50	; 80
    ace4:	f4 e2       	ldi	r31, 0x24	; 36
    ace6:	c6 8b       	std	Z+22, r28	; 0x16
    ace8:	d7 8b       	std	Z+23, r29	; 0x17
    acea:	80 91 48 24 	lds	r24, 0x2448	; 0x802448 <udd_ctrl_payload_nb_trans>
    acee:	90 91 49 24 	lds	r25, 0x2449	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    acf2:	20 91 ed 2d 	lds	r18, 0x2DED	; 0x802ded <udd_g_ctrlreq+0x8>
    acf6:	30 91 ee 2d 	lds	r19, 0x2DEE	; 0x802dee <udd_g_ctrlreq+0x9>
    acfa:	28 0f       	add	r18, r24
    acfc:	39 1f       	adc	r19, r25
    acfe:	20 8f       	std	Z+24, r18	; 0x18
    ad00:	31 8f       	std	Z+25, r19	; 0x19
    ad02:	c8 0f       	add	r28, r24
    ad04:	d9 1f       	adc	r29, r25
    ad06:	c0 93 48 24 	sts	0x2448, r28	; 0x802448 <udd_ctrl_payload_nb_trans>
    ad0a:	d0 93 49 24 	sts	0x2449, r29	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    ad0e:	e4 e6       	ldi	r30, 0x64	; 100
    ad10:	f4 e2       	ldi	r31, 0x24	; 36
    ad12:	02 e0       	ldi	r16, 0x02	; 2
    ad14:	06 93       	lac	Z, r16
    ad16:	df 91       	pop	r29
    ad18:	cf 91       	pop	r28
    ad1a:	0f 91       	pop	r16
    ad1c:	08 95       	ret

0000ad1e <udd_ep_get_size>:
    ad1e:	fc 01       	movw	r30, r24
    ad20:	81 81       	ldd	r24, Z+1	; 0x01
    ad22:	e8 2f       	mov	r30, r24
    ad24:	e7 70       	andi	r30, 0x07	; 7
    ad26:	8e 2f       	mov	r24, r30
    ad28:	90 e0       	ldi	r25, 0x00	; 0
    ad2a:	fc 01       	movw	r30, r24
    ad2c:	31 97       	sbiw	r30, 0x01	; 1
    ad2e:	e7 30       	cpi	r30, 0x07	; 7
    ad30:	f1 05       	cpc	r31, r1
    ad32:	d8 f4       	brcc	.+54     	; 0xad6a <udd_ep_get_size+0x4c>
    ad34:	88 27       	eor	r24, r24
    ad36:	e2 50       	subi	r30, 0x02	; 2
    ad38:	ff 4f       	sbci	r31, 0xFF	; 255
    ad3a:	8f 4f       	sbci	r24, 0xFF	; 255
    ad3c:	0c 94 b5 87 	jmp	0x10f6a	; 0x10f6a <__tablejump2__>
    ad40:	80 e1       	ldi	r24, 0x10	; 16
    ad42:	90 e0       	ldi	r25, 0x00	; 0
    ad44:	08 95       	ret
    ad46:	80 e2       	ldi	r24, 0x20	; 32
    ad48:	90 e0       	ldi	r25, 0x00	; 0
    ad4a:	08 95       	ret
    ad4c:	80 e4       	ldi	r24, 0x40	; 64
    ad4e:	90 e0       	ldi	r25, 0x00	; 0
    ad50:	08 95       	ret
    ad52:	80 e8       	ldi	r24, 0x80	; 128
    ad54:	90 e0       	ldi	r25, 0x00	; 0
    ad56:	08 95       	ret
    ad58:	80 e0       	ldi	r24, 0x00	; 0
    ad5a:	91 e0       	ldi	r25, 0x01	; 1
    ad5c:	08 95       	ret
    ad5e:	80 e0       	ldi	r24, 0x00	; 0
    ad60:	92 e0       	ldi	r25, 0x02	; 2
    ad62:	08 95       	ret
    ad64:	8f ef       	ldi	r24, 0xFF	; 255
    ad66:	93 e0       	ldi	r25, 0x03	; 3
    ad68:	08 95       	ret
    ad6a:	88 e0       	ldi	r24, 0x08	; 8
    ad6c:	90 e0       	ldi	r25, 0x00	; 0
    ad6e:	08 95       	ret

0000ad70 <udd_ep_get_job>:
    ad70:	28 2f       	mov	r18, r24
    ad72:	2f 70       	andi	r18, 0x0F	; 15
    ad74:	30 e0       	ldi	r19, 0x00	; 0
    ad76:	22 0f       	add	r18, r18
    ad78:	33 1f       	adc	r19, r19
    ad7a:	08 2e       	mov	r0, r24
    ad7c:	00 0c       	add	r0, r0
    ad7e:	99 0b       	sbc	r25, r25
    ad80:	88 27       	eor	r24, r24
    ad82:	99 0f       	add	r25, r25
    ad84:	88 1f       	adc	r24, r24
    ad86:	99 27       	eor	r25, r25
    ad88:	82 0f       	add	r24, r18
    ad8a:	93 1f       	adc	r25, r19
    ad8c:	02 97       	sbiw	r24, 0x02	; 2
    ad8e:	9c 01       	movw	r18, r24
    ad90:	22 0f       	add	r18, r18
    ad92:	33 1f       	adc	r19, r19
    ad94:	22 0f       	add	r18, r18
    ad96:	33 1f       	adc	r19, r19
    ad98:	22 0f       	add	r18, r18
    ad9a:	33 1f       	adc	r19, r19
    ad9c:	82 0f       	add	r24, r18
    ad9e:	93 1f       	adc	r25, r19
    ada0:	8c 51       	subi	r24, 0x1C	; 28
    ada2:	9c 4d       	sbci	r25, 0xDC	; 220
    ada4:	08 95       	ret

0000ada6 <udd_ctrl_interrupt_tc_setup>:
    ada6:	0f 93       	push	r16
    ada8:	cf 93       	push	r28
    adaa:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    adae:	80 ff       	sbrs	r24, 0
    adb0:	65 c0       	rjmp	.+202    	; 0xae7c <udd_ctrl_interrupt_tc_setup+0xd6>
    adb2:	81 e0       	ldi	r24, 0x01	; 1
    adb4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    adb8:	ec e5       	ldi	r30, 0x5C	; 92
    adba:	f4 e2       	ldi	r31, 0x24	; 36
    adbc:	00 e8       	ldi	r16, 0x80	; 128
    adbe:	06 93       	lac	Z, r16
    adc0:	e4 e6       	ldi	r30, 0x64	; 100
    adc2:	f4 e2       	ldi	r31, 0x24	; 36
    adc4:	00 e8       	ldi	r16, 0x80	; 128
    adc6:	06 93       	lac	Z, r16
    adc8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    adcc:	ec e5       	ldi	r30, 0x5C	; 92
    adce:	f4 e2       	ldi	r31, 0x24	; 36
    add0:	00 e1       	ldi	r16, 0x10	; 16
    add2:	06 93       	lac	Z, r16
    add4:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <udd_ep_control_state>
    add8:	88 23       	and	r24, r24
    adda:	29 f0       	breq	.+10     	; 0xade6 <udd_ctrl_interrupt_tc_setup+0x40>
    addc:	83 50       	subi	r24, 0x03	; 3
    adde:	82 30       	cpi	r24, 0x02	; 2
    ade0:	08 f4       	brcc	.+2      	; 0xade4 <udd_ctrl_interrupt_tc_setup+0x3e>
    ade2:	29 df       	rcall	.-430    	; 0xac36 <udd_ctrl_endofrequest>
    ade4:	e7 de       	rcall	.-562    	; 0xabb4 <udd_ctrl_init>
    ade6:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_sram+0xe>
    adea:	90 91 5f 24 	lds	r25, 0x245F	; 0x80245f <udd_sram+0xf>
    adee:	08 97       	sbiw	r24, 0x08	; 8
    adf0:	09 f0       	breq	.+2      	; 0xadf4 <udd_ctrl_interrupt_tc_setup+0x4e>
    adf2:	46 c0       	rjmp	.+140    	; 0xae80 <udd_ctrl_interrupt_tc_setup+0xda>
    adf4:	88 e0       	ldi	r24, 0x08	; 8
    adf6:	e8 e0       	ldi	r30, 0x08	; 8
    adf8:	f4 e2       	ldi	r31, 0x24	; 36
    adfa:	a5 ee       	ldi	r26, 0xE5	; 229
    adfc:	bd e2       	ldi	r27, 0x2D	; 45
    adfe:	01 90       	ld	r0, Z+
    ae00:	0d 92       	st	X+, r0
    ae02:	8a 95       	dec	r24
    ae04:	e1 f7       	brne	.-8      	; 0xadfe <udd_ctrl_interrupt_tc_setup+0x58>
    ae06:	e8 ec       	ldi	r30, 0xC8	; 200
    ae08:	f4 e0       	ldi	r31, 0x04	; 4
    ae0a:	80 81       	ld	r24, Z
    ae0c:	80 62       	ori	r24, 0x20	; 32
    ae0e:	80 83       	st	Z, r24
    ae10:	80 81       	ld	r24, Z
    ae12:	80 62       	ori	r24, 0x20	; 32
    ae14:	80 83       	st	Z, r24
    ae16:	0e 94 25 7a 	call	0xf44a	; 0xf44a <udc_process_setup>
    ae1a:	c8 2f       	mov	r28, r24
    ae1c:	81 11       	cpse	r24, r1
    ae1e:	03 c0       	rjmp	.+6      	; 0xae26 <udd_ctrl_interrupt_tc_setup+0x80>
    ae20:	ee de       	rcall	.-548    	; 0xabfe <udd_ctrl_stall_data>
    ae22:	c1 e0       	ldi	r28, 0x01	; 1
    ae24:	2e c0       	rjmp	.+92     	; 0xae82 <udd_ctrl_interrupt_tc_setup+0xdc>
    ae26:	80 91 e5 2d 	lds	r24, 0x2DE5	; 0x802de5 <udd_g_ctrlreq>
    ae2a:	88 23       	and	r24, r24
    ae2c:	6c f4       	brge	.+26     	; 0xae48 <udd_ctrl_interrupt_tc_setup+0xa2>
    ae2e:	10 92 4a 24 	sts	0x244A, r1	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    ae32:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    ae36:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <udd_ctrl_payload_nb_trans>
    ae3a:	10 92 49 24 	sts	0x2449, r1	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    ae3e:	82 e0       	ldi	r24, 0x02	; 2
    ae40:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
    ae44:	00 df       	rcall	.-512    	; 0xac46 <udd_ctrl_in_sent>
    ae46:	1d c0       	rjmp	.+58     	; 0xae82 <udd_ctrl_interrupt_tc_setup+0xdc>
    ae48:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    ae4c:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    ae50:	89 2b       	or	r24, r25
    ae52:	11 f4       	brne	.+4      	; 0xae58 <udd_ctrl_interrupt_tc_setup+0xb2>
    ae54:	e2 de       	rcall	.-572    	; 0xac1a <udd_ctrl_send_zlp_in>
    ae56:	15 c0       	rjmp	.+42     	; 0xae82 <udd_ctrl_interrupt_tc_setup+0xdc>
    ae58:	10 92 4a 24 	sts	0x244A, r1	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    ae5c:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    ae60:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <udd_ctrl_payload_nb_trans>
    ae64:	10 92 49 24 	sts	0x2449, r1	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    ae68:	81 e0       	ldi	r24, 0x01	; 1
    ae6a:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
    ae6e:	ec e5       	ldi	r30, 0x5C	; 92
    ae70:	f4 e2       	ldi	r31, 0x24	; 36
    ae72:	02 e0       	ldi	r16, 0x02	; 2
    ae74:	06 93       	lac	Z, r16
    ae76:	00 e2       	ldi	r16, 0x20	; 32
    ae78:	06 93       	lac	Z, r16
    ae7a:	03 c0       	rjmp	.+6      	; 0xae82 <udd_ctrl_interrupt_tc_setup+0xdc>
    ae7c:	c0 e0       	ldi	r28, 0x00	; 0
    ae7e:	01 c0       	rjmp	.+2      	; 0xae82 <udd_ctrl_interrupt_tc_setup+0xdc>
    ae80:	c1 e0       	ldi	r28, 0x01	; 1
    ae82:	8c 2f       	mov	r24, r28
    ae84:	cf 91       	pop	r28
    ae86:	0f 91       	pop	r16
    ae88:	08 95       	ret

0000ae8a <udd_ep_trans_complet>:
    ae8a:	8f 92       	push	r8
    ae8c:	9f 92       	push	r9
    ae8e:	af 92       	push	r10
    ae90:	bf 92       	push	r11
    ae92:	df 92       	push	r13
    ae94:	ef 92       	push	r14
    ae96:	ff 92       	push	r15
    ae98:	0f 93       	push	r16
    ae9a:	1f 93       	push	r17
    ae9c:	cf 93       	push	r28
    ae9e:	df 93       	push	r29
    aea0:	d8 2e       	mov	r13, r24
    aea2:	66 df       	rcall	.-308    	; 0xad70 <udd_ep_get_job>
    aea4:	8c 01       	movw	r16, r24
    aea6:	cd 2d       	mov	r28, r13
    aea8:	cf 70       	andi	r28, 0x0F	; 15
    aeaa:	d0 e0       	ldi	r29, 0x00	; 0
    aeac:	ce 01       	movw	r24, r28
    aeae:	88 0f       	add	r24, r24
    aeb0:	99 1f       	adc	r25, r25
    aeb2:	cd 2d       	mov	r28, r13
    aeb4:	0d 2c       	mov	r0, r13
    aeb6:	00 0c       	add	r0, r0
    aeb8:	dd 0b       	sbc	r29, r29
    aeba:	cc 27       	eor	r28, r28
    aebc:	dd 0f       	add	r29, r29
    aebe:	cc 1f       	adc	r28, r28
    aec0:	dd 27       	eor	r29, r29
    aec2:	c8 0f       	add	r28, r24
    aec4:	d9 1f       	adc	r29, r25
    aec6:	ce 01       	movw	r24, r28
    aec8:	88 0f       	add	r24, r24
    aeca:	99 1f       	adc	r25, r25
    aecc:	88 0f       	add	r24, r24
    aece:	99 1f       	adc	r25, r25
    aed0:	88 0f       	add	r24, r24
    aed2:	99 1f       	adc	r25, r25
    aed4:	9c 01       	movw	r18, r24
    aed6:	24 5a       	subi	r18, 0xA4	; 164
    aed8:	3b 4d       	sbci	r19, 0xDB	; 219
    aeda:	79 01       	movw	r14, r18
    aedc:	c9 01       	movw	r24, r18
    aede:	1f df       	rcall	.-450    	; 0xad1e <udd_ep_get_size>
    aee0:	4c 01       	movw	r8, r24
    aee2:	dd 20       	and	r13, r13
    aee4:	0c f0       	brlt	.+2      	; 0xaee8 <udd_ep_trans_complet+0x5e>
    aee6:	7b c0       	rjmp	.+246    	; 0xafde <udd_ep_trans_complet+0x154>
    aee8:	fe 01       	movw	r30, r28
    aeea:	ee 0f       	add	r30, r30
    aeec:	ff 1f       	adc	r31, r31
    aeee:	ee 0f       	add	r30, r30
    aef0:	ff 1f       	adc	r31, r31
    aef2:	ee 0f       	add	r30, r30
    aef4:	ff 1f       	adc	r31, r31
    aef6:	e0 5b       	subi	r30, 0xB0	; 176
    aef8:	fb 4d       	sbci	r31, 0xDB	; 219
    aefa:	22 89       	ldd	r18, Z+18	; 0x12
    aefc:	33 89       	ldd	r19, Z+19	; 0x13
    aefe:	d8 01       	movw	r26, r16
    af00:	15 96       	adiw	r26, 0x05	; 5
    af02:	8d 91       	ld	r24, X+
    af04:	9c 91       	ld	r25, X
    af06:	16 97       	sbiw	r26, 0x06	; 6
    af08:	82 0f       	add	r24, r18
    af0a:	93 1f       	adc	r25, r19
    af0c:	15 96       	adiw	r26, 0x05	; 5
    af0e:	8d 93       	st	X+, r24
    af10:	9c 93       	st	X, r25
    af12:	16 97       	sbiw	r26, 0x06	; 6
    af14:	13 96       	adiw	r26, 0x03	; 3
    af16:	2d 91       	ld	r18, X+
    af18:	3c 91       	ld	r19, X
    af1a:	14 97       	sbiw	r26, 0x04	; 4
    af1c:	82 17       	cp	r24, r18
    af1e:	93 07       	cpc	r25, r19
    af20:	09 f4       	brne	.+2      	; 0xaf24 <udd_ep_trans_complet+0x9a>
    af22:	47 c0       	rjmp	.+142    	; 0xafb2 <udd_ep_trans_complet+0x128>
    af24:	28 1b       	sub	r18, r24
    af26:	39 0b       	sbc	r19, r25
    af28:	21 15       	cp	r18, r1
    af2a:	b4 e0       	ldi	r27, 0x04	; 4
    af2c:	3b 07       	cpc	r19, r27
    af2e:	40 f0       	brcs	.+16     	; 0xaf40 <udd_ep_trans_complet+0xb6>
    af30:	2f ef       	ldi	r18, 0xFF	; 255
    af32:	33 e0       	ldi	r19, 0x03	; 3
    af34:	c9 01       	movw	r24, r18
    af36:	b4 01       	movw	r22, r8
    af38:	0e 94 50 87 	call	0x10ea0	; 0x10ea0 <__udivmodhi4>
    af3c:	28 1b       	sub	r18, r24
    af3e:	39 0b       	sbc	r19, r25
    af40:	f8 01       	movw	r30, r16
    af42:	80 81       	ld	r24, Z
    af44:	81 ff       	sbrs	r24, 1
    af46:	0a c0       	rjmp	.+20     	; 0xaf5c <udd_ep_trans_complet+0xd2>
    af48:	c9 01       	movw	r24, r18
    af4a:	b4 01       	movw	r22, r8
    af4c:	0e 94 50 87 	call	0x10ea0	; 0x10ea0 <__udivmodhi4>
    af50:	41 e0       	ldi	r20, 0x01	; 1
    af52:	89 2b       	or	r24, r25
    af54:	09 f0       	breq	.+2      	; 0xaf58 <udd_ep_trans_complet+0xce>
    af56:	40 e0       	ldi	r20, 0x00	; 0
    af58:	84 2f       	mov	r24, r20
    af5a:	01 c0       	rjmp	.+2      	; 0xaf5e <udd_ep_trans_complet+0xd4>
    af5c:	80 e0       	ldi	r24, 0x00	; 0
    af5e:	d8 01       	movw	r26, r16
    af60:	9c 91       	ld	r25, X
    af62:	80 fb       	bst	r24, 0
    af64:	91 f9       	bld	r25, 1
    af66:	9c 93       	st	X, r25
    af68:	fe 01       	movw	r30, r28
    af6a:	ee 0f       	add	r30, r30
    af6c:	ff 1f       	adc	r31, r31
    af6e:	ee 0f       	add	r30, r30
    af70:	ff 1f       	adc	r31, r31
    af72:	ee 0f       	add	r30, r30
    af74:	ff 1f       	adc	r31, r31
    af76:	e0 5b       	subi	r30, 0xB0	; 176
    af78:	fb 4d       	sbci	r31, 0xDB	; 219
    af7a:	12 8a       	std	Z+18, r1	; 0x12
    af7c:	13 8a       	std	Z+19, r1	; 0x13
    af7e:	26 87       	std	Z+14, r18	; 0x0e
    af80:	37 87       	std	Z+15, r19	; 0x0f
    af82:	11 96       	adiw	r26, 0x01	; 1
    af84:	2d 91       	ld	r18, X+
    af86:	3c 91       	ld	r19, X
    af88:	12 97       	sbiw	r26, 0x02	; 2
    af8a:	15 96       	adiw	r26, 0x05	; 5
    af8c:	8d 91       	ld	r24, X+
    af8e:	9c 91       	ld	r25, X
    af90:	16 97       	sbiw	r26, 0x06	; 6
    af92:	82 0f       	add	r24, r18
    af94:	93 1f       	adc	r25, r19
    af96:	cc 0f       	add	r28, r28
    af98:	dd 1f       	adc	r29, r29
    af9a:	cc 0f       	add	r28, r28
    af9c:	dd 1f       	adc	r29, r29
    af9e:	cc 0f       	add	r28, r28
    afa0:	dd 1f       	adc	r29, r29
    afa2:	c0 5a       	subi	r28, 0xA0	; 160
    afa4:	db 4d       	sbci	r29, 0xDB	; 219
    afa6:	88 83       	st	Y, r24
    afa8:	99 83       	std	Y+1, r25	; 0x01
    afaa:	f7 01       	movw	r30, r14
    afac:	02 e0       	ldi	r16, 0x02	; 2
    afae:	06 93       	lac	Z, r16
    afb0:	e4 c0       	rjmp	.+456    	; 0xb17a <udd_ep_trans_complet+0x2f0>
    afb2:	d8 01       	movw	r26, r16
    afb4:	8c 91       	ld	r24, X
    afb6:	81 ff       	sbrs	r24, 1
    afb8:	cd c0       	rjmp	.+410    	; 0xb154 <udd_ep_trans_complet+0x2ca>
    afba:	8d 7f       	andi	r24, 0xFD	; 253
    afbc:	8c 93       	st	X, r24
    afbe:	cc 0f       	add	r28, r28
    afc0:	dd 1f       	adc	r29, r29
    afc2:	cc 0f       	add	r28, r28
    afc4:	dd 1f       	adc	r29, r29
    afc6:	cc 0f       	add	r28, r28
    afc8:	dd 1f       	adc	r29, r29
    afca:	c0 5b       	subi	r28, 0xB0	; 176
    afcc:	db 4d       	sbci	r29, 0xDB	; 219
    afce:	1a 8a       	std	Y+18, r1	; 0x12
    afd0:	1b 8a       	std	Y+19, r1	; 0x13
    afd2:	1e 86       	std	Y+14, r1	; 0x0e
    afd4:	1f 86       	std	Y+15, r1	; 0x0f
    afd6:	f7 01       	movw	r30, r14
    afd8:	02 e0       	ldi	r16, 0x02	; 2
    afda:	06 93       	lac	Z, r16
    afdc:	ce c0       	rjmp	.+412    	; 0xb17a <udd_ep_trans_complet+0x2f0>
    afde:	fe 01       	movw	r30, r28
    afe0:	ee 0f       	add	r30, r30
    afe2:	ff 1f       	adc	r31, r31
    afe4:	ee 0f       	add	r30, r30
    afe6:	ff 1f       	adc	r31, r31
    afe8:	ee 0f       	add	r30, r30
    afea:	ff 1f       	adc	r31, r31
    afec:	e0 5b       	subi	r30, 0xB0	; 176
    afee:	fb 4d       	sbci	r31, 0xDB	; 219
    aff0:	a6 84       	ldd	r10, Z+14	; 0x0e
    aff2:	b7 84       	ldd	r11, Z+15	; 0x0f
    aff4:	d8 01       	movw	r26, r16
    aff6:	8c 91       	ld	r24, X
    aff8:	82 ff       	sbrs	r24, 2
    affa:	1b c0       	rjmp	.+54     	; 0xb032 <udd_ep_trans_complet+0x1a8>
    affc:	11 96       	adiw	r26, 0x01	; 1
    affe:	ed 91       	ld	r30, X+
    b000:	fc 91       	ld	r31, X
    b002:	12 97       	sbiw	r26, 0x02	; 2
    b004:	15 96       	adiw	r26, 0x05	; 5
    b006:	2d 91       	ld	r18, X+
    b008:	3c 91       	ld	r19, X
    b00a:	16 97       	sbiw	r26, 0x06	; 6
    b00c:	13 96       	adiw	r26, 0x03	; 3
    b00e:	8d 91       	ld	r24, X+
    b010:	9c 91       	ld	r25, X
    b012:	14 97       	sbiw	r26, 0x04	; 4
    b014:	b4 01       	movw	r22, r8
    b016:	0e 94 50 87 	call	0x10ea0	; 0x10ea0 <__udivmodhi4>
    b01a:	b0 e4       	ldi	r27, 0x40	; 64
    b01c:	db 9e       	mul	r13, r27
    b01e:	b0 01       	movw	r22, r0
    b020:	11 24       	eor	r1, r1
    b022:	6c 5d       	subi	r22, 0xDC	; 220
    b024:	7c 4d       	sbci	r23, 0xDC	; 220
    b026:	ac 01       	movw	r20, r24
    b028:	cf 01       	movw	r24, r30
    b02a:	82 0f       	add	r24, r18
    b02c:	93 1f       	adc	r25, r19
    b02e:	0e 94 c8 8a 	call	0x11590	; 0x11590 <memcpy>
    b032:	f8 01       	movw	r30, r16
    b034:	25 81       	ldd	r18, Z+5	; 0x05
    b036:	36 81       	ldd	r19, Z+6	; 0x06
    b038:	2a 0d       	add	r18, r10
    b03a:	3b 1d       	adc	r19, r11
    b03c:	25 83       	std	Z+5, r18	; 0x05
    b03e:	36 83       	std	Z+6, r19	; 0x06
    b040:	83 81       	ldd	r24, Z+3	; 0x03
    b042:	94 81       	ldd	r25, Z+4	; 0x04
    b044:	82 17       	cp	r24, r18
    b046:	93 07       	cpc	r25, r19
    b048:	68 f4       	brcc	.+26     	; 0xb064 <udd_ep_trans_complet+0x1da>
    b04a:	85 83       	std	Z+5, r24	; 0x05
    b04c:	96 83       	std	Z+6, r25	; 0x06
    b04e:	cc 0f       	add	r28, r28
    b050:	dd 1f       	adc	r29, r29
    b052:	cc 0f       	add	r28, r28
    b054:	dd 1f       	adc	r29, r29
    b056:	cc 0f       	add	r28, r28
    b058:	dd 1f       	adc	r29, r29
    b05a:	c0 5b       	subi	r28, 0xB0	; 176
    b05c:	db 4d       	sbci	r29, 0xDB	; 219
    b05e:	8a 89       	ldd	r24, Y+18	; 0x12
    b060:	9b 89       	ldd	r25, Y+19	; 0x13
    b062:	78 c0       	rjmp	.+240    	; 0xb154 <udd_ep_trans_complet+0x2ca>
    b064:	fe 01       	movw	r30, r28
    b066:	ee 0f       	add	r30, r30
    b068:	ff 1f       	adc	r31, r31
    b06a:	ee 0f       	add	r30, r30
    b06c:	ff 1f       	adc	r31, r31
    b06e:	ee 0f       	add	r30, r30
    b070:	ff 1f       	adc	r31, r31
    b072:	e0 5b       	subi	r30, 0xB0	; 176
    b074:	fb 4d       	sbci	r31, 0xDB	; 219
    b076:	42 89       	ldd	r20, Z+18	; 0x12
    b078:	53 89       	ldd	r21, Z+19	; 0x13
    b07a:	a4 16       	cp	r10, r20
    b07c:	b5 06       	cpc	r11, r21
    b07e:	09 f0       	breq	.+2      	; 0xb082 <udd_ep_trans_complet+0x1f8>
    b080:	69 c0       	rjmp	.+210    	; 0xb154 <udd_ep_trans_complet+0x2ca>
    b082:	28 17       	cp	r18, r24
    b084:	39 07       	cpc	r19, r25
    b086:	09 f4       	brne	.+2      	; 0xb08a <udd_ep_trans_complet+0x200>
    b088:	65 c0       	rjmp	.+202    	; 0xb154 <udd_ep_trans_complet+0x2ca>
    b08a:	ac 01       	movw	r20, r24
    b08c:	42 1b       	sub	r20, r18
    b08e:	53 0b       	sbc	r21, r19
    b090:	9a 01       	movw	r18, r20
    b092:	21 15       	cp	r18, r1
    b094:	54 e0       	ldi	r21, 0x04	; 4
    b096:	35 07       	cpc	r19, r21
    b098:	48 f0       	brcs	.+18     	; 0xb0ac <udd_ep_trans_complet+0x222>
    b09a:	2f ef       	ldi	r18, 0xFF	; 255
    b09c:	33 e0       	ldi	r19, 0x03	; 3
    b09e:	c9 01       	movw	r24, r18
    b0a0:	b4 01       	movw	r22, r8
    b0a2:	0e 94 50 87 	call	0x10ea0	; 0x10ea0 <__udivmodhi4>
    b0a6:	28 1b       	sub	r18, r24
    b0a8:	39 0b       	sbc	r19, r25
    b0aa:	06 c0       	rjmp	.+12     	; 0xb0b8 <udd_ep_trans_complet+0x22e>
    b0ac:	c9 01       	movw	r24, r18
    b0ae:	b4 01       	movw	r22, r8
    b0b0:	0e 94 50 87 	call	0x10ea0	; 0x10ea0 <__udivmodhi4>
    b0b4:	28 1b       	sub	r18, r24
    b0b6:	39 0b       	sbc	r19, r25
    b0b8:	fe 01       	movw	r30, r28
    b0ba:	ee 0f       	add	r30, r30
    b0bc:	ff 1f       	adc	r31, r31
    b0be:	ee 0f       	add	r30, r30
    b0c0:	ff 1f       	adc	r31, r31
    b0c2:	ee 0f       	add	r30, r30
    b0c4:	ff 1f       	adc	r31, r31
    b0c6:	e0 5b       	subi	r30, 0xB0	; 176
    b0c8:	fb 4d       	sbci	r31, 0xDB	; 219
    b0ca:	16 86       	std	Z+14, r1	; 0x0e
    b0cc:	17 86       	std	Z+15, r1	; 0x0f
    b0ce:	28 15       	cp	r18, r8
    b0d0:	39 05       	cpc	r19, r9
    b0d2:	00 f5       	brcc	.+64     	; 0xb114 <udd_ep_trans_complet+0x28a>
    b0d4:	d8 01       	movw	r26, r16
    b0d6:	8c 91       	ld	r24, X
    b0d8:	84 60       	ori	r24, 0x04	; 4
    b0da:	8c 93       	st	X, r24
    b0dc:	b0 e4       	ldi	r27, 0x40	; 64
    b0de:	db 9e       	mul	r13, r27
    b0e0:	c0 01       	movw	r24, r0
    b0e2:	11 24       	eor	r1, r1
    b0e4:	8c 5d       	subi	r24, 0xDC	; 220
    b0e6:	9c 4d       	sbci	r25, 0xDC	; 220
    b0e8:	fe 01       	movw	r30, r28
    b0ea:	ee 0f       	add	r30, r30
    b0ec:	ff 1f       	adc	r31, r31
    b0ee:	ee 0f       	add	r30, r30
    b0f0:	ff 1f       	adc	r31, r31
    b0f2:	ee 0f       	add	r30, r30
    b0f4:	ff 1f       	adc	r31, r31
    b0f6:	e0 5a       	subi	r30, 0xA0	; 160
    b0f8:	fb 4d       	sbci	r31, 0xDB	; 219
    b0fa:	80 83       	st	Z, r24
    b0fc:	91 83       	std	Z+1, r25	; 0x01
    b0fe:	cc 0f       	add	r28, r28
    b100:	dd 1f       	adc	r29, r29
    b102:	cc 0f       	add	r28, r28
    b104:	dd 1f       	adc	r29, r29
    b106:	cc 0f       	add	r28, r28
    b108:	dd 1f       	adc	r29, r29
    b10a:	c0 5b       	subi	r28, 0xB0	; 176
    b10c:	db 4d       	sbci	r29, 0xDB	; 219
    b10e:	8a 8a       	std	Y+18, r8	; 0x12
    b110:	9b 8a       	std	Y+19, r9	; 0x13
    b112:	1c c0       	rjmp	.+56     	; 0xb14c <udd_ep_trans_complet+0x2c2>
    b114:	f8 01       	movw	r30, r16
    b116:	41 81       	ldd	r20, Z+1	; 0x01
    b118:	52 81       	ldd	r21, Z+2	; 0x02
    b11a:	85 81       	ldd	r24, Z+5	; 0x05
    b11c:	96 81       	ldd	r25, Z+6	; 0x06
    b11e:	84 0f       	add	r24, r20
    b120:	95 1f       	adc	r25, r21
    b122:	fe 01       	movw	r30, r28
    b124:	ee 0f       	add	r30, r30
    b126:	ff 1f       	adc	r31, r31
    b128:	ee 0f       	add	r30, r30
    b12a:	ff 1f       	adc	r31, r31
    b12c:	ee 0f       	add	r30, r30
    b12e:	ff 1f       	adc	r31, r31
    b130:	e0 5a       	subi	r30, 0xA0	; 160
    b132:	fb 4d       	sbci	r31, 0xDB	; 219
    b134:	80 83       	st	Z, r24
    b136:	91 83       	std	Z+1, r25	; 0x01
    b138:	cc 0f       	add	r28, r28
    b13a:	dd 1f       	adc	r29, r29
    b13c:	cc 0f       	add	r28, r28
    b13e:	dd 1f       	adc	r29, r29
    b140:	cc 0f       	add	r28, r28
    b142:	dd 1f       	adc	r29, r29
    b144:	c0 5b       	subi	r28, 0xB0	; 176
    b146:	db 4d       	sbci	r29, 0xDB	; 219
    b148:	2a 8b       	std	Y+18, r18	; 0x12
    b14a:	3b 8b       	std	Y+19, r19	; 0x13
    b14c:	f7 01       	movw	r30, r14
    b14e:	02 e0       	ldi	r16, 0x02	; 2
    b150:	06 93       	lac	Z, r16
    b152:	13 c0       	rjmp	.+38     	; 0xb17a <udd_ep_trans_complet+0x2f0>
    b154:	d8 01       	movw	r26, r16
    b156:	8c 91       	ld	r24, X
    b158:	80 ff       	sbrs	r24, 0
    b15a:	0f c0       	rjmp	.+30     	; 0xb17a <udd_ep_trans_complet+0x2f0>
    b15c:	8e 7f       	andi	r24, 0xFE	; 254
    b15e:	8c 93       	st	X, r24
    b160:	17 96       	adiw	r26, 0x07	; 7
    b162:	ed 91       	ld	r30, X+
    b164:	fc 91       	ld	r31, X
    b166:	18 97       	sbiw	r26, 0x08	; 8
    b168:	30 97       	sbiw	r30, 0x00	; 0
    b16a:	39 f0       	breq	.+14     	; 0xb17a <udd_ep_trans_complet+0x2f0>
    b16c:	15 96       	adiw	r26, 0x05	; 5
    b16e:	6d 91       	ld	r22, X+
    b170:	7c 91       	ld	r23, X
    b172:	16 97       	sbiw	r26, 0x06	; 6
    b174:	4d 2d       	mov	r20, r13
    b176:	80 e0       	ldi	r24, 0x00	; 0
    b178:	19 95       	eicall
    b17a:	df 91       	pop	r29
    b17c:	cf 91       	pop	r28
    b17e:	1f 91       	pop	r17
    b180:	0f 91       	pop	r16
    b182:	ff 90       	pop	r15
    b184:	ef 90       	pop	r14
    b186:	df 90       	pop	r13
    b188:	bf 90       	pop	r11
    b18a:	af 90       	pop	r10
    b18c:	9f 90       	pop	r9
    b18e:	8f 90       	pop	r8
    b190:	08 95       	ret

0000b192 <udd_disable>:
    b192:	1f 93       	push	r17
    b194:	cf 93       	push	r28
    b196:	df 93       	push	r29
    b198:	1f 92       	push	r1
    b19a:	1f 92       	push	r1
    b19c:	cd b7       	in	r28, 0x3d	; 61
    b19e:	de b7       	in	r29, 0x3e	; 62
    b1a0:	8f b7       	in	r24, 0x3f	; 63
    b1a2:	89 83       	std	Y+1, r24	; 0x01
    b1a4:	f8 94       	cli
    b1a6:	19 81       	ldd	r17, Y+1	; 0x01
    b1a8:	e1 ec       	ldi	r30, 0xC1	; 193
    b1aa:	f4 e0       	ldi	r31, 0x04	; 4
    b1ac:	80 81       	ld	r24, Z
    b1ae:	8e 7f       	andi	r24, 0xFE	; 254
    b1b0:	80 83       	st	Z, r24
    b1b2:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    b1b6:	10 82       	st	Z, r1
    b1b8:	0e 94 2a 75 	call	0xea54	; 0xea54 <sysclk_disable_usb>
    b1bc:	80 e0       	ldi	r24, 0x00	; 0
    b1be:	c2 dc       	rcall	.-1660   	; 0xab44 <udd_sleep_mode>
    b1c0:	80 91 80 2e 	lds	r24, 0x2E80	; 0x802e80 <sleepmgr_locks+0x5>
    b1c4:	81 11       	cpse	r24, r1
    b1c6:	01 c0       	rjmp	.+2      	; 0xb1ca <udd_disable+0x38>
    b1c8:	ff cf       	rjmp	.-2      	; 0xb1c8 <udd_disable+0x36>
    b1ca:	8f b7       	in	r24, 0x3f	; 63
    b1cc:	8a 83       	std	Y+2, r24	; 0x02
    b1ce:	f8 94       	cli
    b1d0:	9a 81       	ldd	r25, Y+2	; 0x02
    b1d2:	eb e7       	ldi	r30, 0x7B	; 123
    b1d4:	fe e2       	ldi	r31, 0x2E	; 46
    b1d6:	85 81       	ldd	r24, Z+5	; 0x05
    b1d8:	81 50       	subi	r24, 0x01	; 1
    b1da:	85 83       	std	Z+5, r24	; 0x05
    b1dc:	9f bf       	out	0x3f, r25	; 63
    b1de:	1f bf       	out	0x3f, r17	; 63
    b1e0:	0f 90       	pop	r0
    b1e2:	0f 90       	pop	r0
    b1e4:	df 91       	pop	r29
    b1e6:	cf 91       	pop	r28
    b1e8:	1f 91       	pop	r17
    b1ea:	08 95       	ret

0000b1ec <udd_attach>:
    b1ec:	1f 93       	push	r17
    b1ee:	cf 93       	push	r28
    b1f0:	df 93       	push	r29
    b1f2:	1f 92       	push	r1
    b1f4:	cd b7       	in	r28, 0x3d	; 61
    b1f6:	de b7       	in	r29, 0x3e	; 62
    b1f8:	8f b7       	in	r24, 0x3f	; 63
    b1fa:	89 83       	std	Y+1, r24	; 0x01
    b1fc:	f8 94       	cli
    b1fe:	19 81       	ldd	r17, Y+1	; 0x01
    b200:	81 e0       	ldi	r24, 0x01	; 1
    b202:	a0 dc       	rcall	.-1728   	; 0xab44 <udd_sleep_mode>
    b204:	ea ec       	ldi	r30, 0xCA	; 202
    b206:	f4 e0       	ldi	r31, 0x04	; 4
    b208:	80 e4       	ldi	r24, 0x40	; 64
    b20a:	80 83       	st	Z, r24
    b20c:	80 e2       	ldi	r24, 0x20	; 32
    b20e:	80 83       	st	Z, r24
    b210:	e1 ec       	ldi	r30, 0xC1	; 193
    b212:	f4 e0       	ldi	r31, 0x04	; 4
    b214:	80 81       	ld	r24, Z
    b216:	81 60       	ori	r24, 0x01	; 1
    b218:	80 83       	st	Z, r24
    b21a:	a9 ec       	ldi	r26, 0xC9	; 201
    b21c:	b4 e0       	ldi	r27, 0x04	; 4
    b21e:	8c 91       	ld	r24, X
    b220:	82 60       	ori	r24, 0x02	; 2
    b222:	8c 93       	st	X, r24
    b224:	e8 ec       	ldi	r30, 0xC8	; 200
    b226:	f4 e0       	ldi	r31, 0x04	; 4
    b228:	80 81       	ld	r24, Z
    b22a:	80 64       	ori	r24, 0x40	; 64
    b22c:	80 83       	st	Z, r24
    b22e:	8c 91       	ld	r24, X
    b230:	81 60       	ori	r24, 0x01	; 1
    b232:	8c 93       	st	X, r24
    b234:	80 81       	ld	r24, Z
    b236:	80 68       	ori	r24, 0x80	; 128
    b238:	80 83       	st	Z, r24
    b23a:	1f bf       	out	0x3f, r17	; 63
    b23c:	0f 90       	pop	r0
    b23e:	df 91       	pop	r29
    b240:	cf 91       	pop	r28
    b242:	1f 91       	pop	r17
    b244:	08 95       	ret

0000b246 <udd_enable>:
    b246:	0f 93       	push	r16
    b248:	1f 93       	push	r17
    b24a:	cf 93       	push	r28
    b24c:	df 93       	push	r29
    b24e:	1f 92       	push	r1
    b250:	1f 92       	push	r1
    b252:	cd b7       	in	r28, 0x3d	; 61
    b254:	de b7       	in	r29, 0x3e	; 62
    b256:	00 e6       	ldi	r16, 0x60	; 96
    b258:	10 e0       	ldi	r17, 0x00	; 0
    b25a:	f8 01       	movw	r30, r16
    b25c:	10 82       	st	Z, r1
    b25e:	80 e3       	ldi	r24, 0x30	; 48
    b260:	0e 94 e4 74 	call	0xe9c8	; 0xe9c8 <sysclk_enable_usb>
    b264:	e0 ec       	ldi	r30, 0xC0	; 192
    b266:	f4 e0       	ldi	r31, 0x04	; 4
    b268:	80 81       	ld	r24, Z
    b26a:	80 64       	ori	r24, 0x40	; 64
    b26c:	80 83       	st	Z, r24
    b26e:	81 e0       	ldi	r24, 0x01	; 1
    b270:	f8 01       	movw	r30, r16
    b272:	80 83       	st	Z, r24
    b274:	8f b7       	in	r24, 0x3f	; 63
    b276:	8a 83       	std	Y+2, r24	; 0x02
    b278:	f8 94       	cli
    b27a:	1a 81       	ldd	r17, Y+2	; 0x02
    b27c:	e0 e5       	ldi	r30, 0x50	; 80
    b27e:	f4 e2       	ldi	r31, 0x24	; 36
    b280:	15 86       	std	Z+13, r1	; 0x0d
    b282:	15 8a       	std	Z+21, r1	; 0x15
    b284:	15 8e       	std	Z+29, r1	; 0x1d
    b286:	15 a2       	std	Z+37, r1	; 0x25
    b288:	15 a6       	std	Z+45, r1	; 0x2d
    b28a:	15 aa       	std	Z+53, r1	; 0x35
    b28c:	e4 ee       	ldi	r30, 0xE4	; 228
    b28e:	f3 e2       	ldi	r31, 0x23	; 35
    b290:	80 81       	ld	r24, Z
    b292:	8e 7f       	andi	r24, 0xFE	; 254
    b294:	80 83       	st	Z, r24
    b296:	ed ee       	ldi	r30, 0xED	; 237
    b298:	f3 e2       	ldi	r31, 0x23	; 35
    b29a:	80 81       	ld	r24, Z
    b29c:	8e 7f       	andi	r24, 0xFE	; 254
    b29e:	80 83       	st	Z, r24
    b2a0:	e6 ef       	ldi	r30, 0xF6	; 246
    b2a2:	f3 e2       	ldi	r31, 0x23	; 35
    b2a4:	80 81       	ld	r24, Z
    b2a6:	8e 7f       	andi	r24, 0xFE	; 254
    b2a8:	80 83       	st	Z, r24
    b2aa:	ef ef       	ldi	r30, 0xFF	; 255
    b2ac:	f3 e2       	ldi	r31, 0x23	; 35
    b2ae:	80 81       	ld	r24, Z
    b2b0:	8e 7f       	andi	r24, 0xFE	; 254
    b2b2:	80 83       	st	Z, r24
    b2b4:	6a e1       	ldi	r22, 0x1A	; 26
    b2b6:	70 e0       	ldi	r23, 0x00	; 0
    b2b8:	82 e0       	ldi	r24, 0x02	; 2
    b2ba:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    b2be:	8f 3f       	cpi	r24, 0xFF	; 255
    b2c0:	19 f0       	breq	.+6      	; 0xb2c8 <udd_enable+0x82>
    b2c2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    b2c6:	03 c0       	rjmp	.+6      	; 0xb2ce <udd_enable+0x88>
    b2c8:	8f e1       	ldi	r24, 0x1F	; 31
    b2ca:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    b2ce:	6b e1       	ldi	r22, 0x1B	; 27
    b2d0:	70 e0       	ldi	r23, 0x00	; 0
    b2d2:	82 e0       	ldi	r24, 0x02	; 2
    b2d4:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    b2d8:	8f 3f       	cpi	r24, 0xFF	; 255
    b2da:	19 f0       	breq	.+6      	; 0xb2e2 <udd_enable+0x9c>
    b2dc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    b2e0:	03 c0       	rjmp	.+6      	; 0xb2e8 <udd_enable+0xa2>
    b2e2:	8f e1       	ldi	r24, 0x1F	; 31
    b2e4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    b2e8:	e0 ec       	ldi	r30, 0xC0	; 192
    b2ea:	f4 e0       	ldi	r31, 0x04	; 4
    b2ec:	80 81       	ld	r24, Z
    b2ee:	82 60       	ori	r24, 0x02	; 2
    b2f0:	80 83       	st	Z, r24
    b2f2:	80 81       	ld	r24, Z
    b2f4:	80 68       	ori	r24, 0x80	; 128
    b2f6:	80 83       	st	Z, r24
    b2f8:	80 81       	ld	r24, Z
    b2fa:	80 61       	ori	r24, 0x10	; 16
    b2fc:	80 83       	st	Z, r24
    b2fe:	8c e5       	ldi	r24, 0x5C	; 92
    b300:	94 e2       	ldi	r25, 0x24	; 36
    b302:	86 83       	std	Z+6, r24	; 0x06
    b304:	97 83       	std	Z+7, r25	; 0x07
    b306:	80 81       	ld	r24, Z
    b308:	80 62       	ori	r24, 0x20	; 32
    b30a:	80 83       	st	Z, r24
    b30c:	8f ef       	ldi	r24, 0xFF	; 255
    b30e:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    b312:	e8 ec       	ldi	r30, 0xC8	; 200
    b314:	f4 e0       	ldi	r31, 0x04	; 4
    b316:	80 81       	ld	r24, Z
    b318:	82 60       	ori	r24, 0x02	; 2
    b31a:	80 83       	st	Z, r24
    b31c:	10 92 90 24 	sts	0x2490, r1	; 0x802490 <udd_b_idle>
    b320:	80 91 80 2e 	lds	r24, 0x2E80	; 0x802e80 <sleepmgr_locks+0x5>
    b324:	8f 3f       	cpi	r24, 0xFF	; 255
    b326:	09 f4       	brne	.+2      	; 0xb32a <udd_enable+0xe4>
    b328:	ff cf       	rjmp	.-2      	; 0xb328 <udd_enable+0xe2>
    b32a:	8f b7       	in	r24, 0x3f	; 63
    b32c:	89 83       	std	Y+1, r24	; 0x01
    b32e:	f8 94       	cli
    b330:	99 81       	ldd	r25, Y+1	; 0x01
    b332:	eb e7       	ldi	r30, 0x7B	; 123
    b334:	fe e2       	ldi	r31, 0x2E	; 46
    b336:	85 81       	ldd	r24, Z+5	; 0x05
    b338:	8f 5f       	subi	r24, 0xFF	; 255
    b33a:	85 83       	std	Z+5, r24	; 0x05
    b33c:	9f bf       	out	0x3f, r25	; 63
    b33e:	56 df       	rcall	.-340    	; 0xb1ec <udd_attach>
    b340:	1f bf       	out	0x3f, r17	; 63
    b342:	0f 90       	pop	r0
    b344:	0f 90       	pop	r0
    b346:	df 91       	pop	r29
    b348:	cf 91       	pop	r28
    b34a:	1f 91       	pop	r17
    b34c:	0f 91       	pop	r16
    b34e:	08 95       	ret

0000b350 <udd_is_high_speed>:
    b350:	80 e0       	ldi	r24, 0x00	; 0
    b352:	08 95       	ret

0000b354 <udd_set_address>:
    b354:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    b358:	08 95       	ret

0000b35a <udd_getaddress>:
    b35a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    b35e:	08 95       	ret

0000b360 <udd_get_frame_number>:
    b360:	80 91 8c 24 	lds	r24, 0x248C	; 0x80248c <udd_sram+0x3c>
    b364:	90 91 8d 24 	lds	r25, 0x248D	; 0x80248d <udd_sram+0x3d>
    b368:	08 95       	ret

0000b36a <udd_get_micro_frame_number>:
    b36a:	80 e0       	ldi	r24, 0x00	; 0
    b36c:	90 e0       	ldi	r25, 0x00	; 0
    b36e:	08 95       	ret

0000b370 <udd_set_setup_payload>:
    b370:	e5 ee       	ldi	r30, 0xE5	; 229
    b372:	fd e2       	ldi	r31, 0x2D	; 45
    b374:	80 87       	std	Z+8, r24	; 0x08
    b376:	91 87       	std	Z+9, r25	; 0x09
    b378:	62 87       	std	Z+10, r22	; 0x0a
    b37a:	73 87       	std	Z+11, r23	; 0x0b
    b37c:	08 95       	ret

0000b37e <udd_ep_alloc>:
    b37e:	28 2f       	mov	r18, r24
    b380:	2f 70       	andi	r18, 0x0F	; 15
    b382:	30 e0       	ldi	r19, 0x00	; 0
    b384:	22 0f       	add	r18, r18
    b386:	33 1f       	adc	r19, r19
    b388:	08 2e       	mov	r0, r24
    b38a:	00 0c       	add	r0, r0
    b38c:	99 0b       	sbc	r25, r25
    b38e:	88 27       	eor	r24, r24
    b390:	99 0f       	add	r25, r25
    b392:	88 1f       	adc	r24, r24
    b394:	99 27       	eor	r25, r25
    b396:	82 0f       	add	r24, r18
    b398:	93 1f       	adc	r25, r19
    b39a:	fc 01       	movw	r30, r24
    b39c:	ee 0f       	add	r30, r30
    b39e:	ff 1f       	adc	r31, r31
    b3a0:	ee 0f       	add	r30, r30
    b3a2:	ff 1f       	adc	r31, r31
    b3a4:	ee 0f       	add	r30, r30
    b3a6:	ff 1f       	adc	r31, r31
    b3a8:	e0 5b       	subi	r30, 0xB0	; 176
    b3aa:	fb 4d       	sbci	r31, 0xDB	; 219
    b3ac:	25 85       	ldd	r18, Z+13	; 0x0d
    b3ae:	20 7c       	andi	r18, 0xC0	; 192
    b3b0:	09 f0       	breq	.+2      	; 0xb3b4 <udd_ep_alloc+0x36>
    b3b2:	69 c0       	rjmp	.+210    	; 0xb486 <udd_ep_alloc+0x108>
    b3b4:	63 70       	andi	r22, 0x03	; 3
    b3b6:	61 30       	cpi	r22, 0x01	; 1
    b3b8:	11 f0       	breq	.+4      	; 0xb3be <udd_ep_alloc+0x40>
    b3ba:	18 f4       	brcc	.+6      	; 0xb3c2 <udd_ep_alloc+0x44>
    b3bc:	04 c0       	rjmp	.+8      	; 0xb3c6 <udd_ep_alloc+0x48>
    b3be:	60 ec       	ldi	r22, 0xC0	; 192
    b3c0:	03 c0       	rjmp	.+6      	; 0xb3c8 <udd_ep_alloc+0x4a>
    b3c2:	60 e8       	ldi	r22, 0x80	; 128
    b3c4:	01 c0       	rjmp	.+2      	; 0xb3c8 <udd_ep_alloc+0x4a>
    b3c6:	60 e4       	ldi	r22, 0x40	; 64
    b3c8:	40 38       	cpi	r20, 0x80	; 128
    b3ca:	51 05       	cpc	r21, r1
    b3cc:	e9 f0       	breq	.+58     	; 0xb408 <udd_ep_alloc+0x8a>
    b3ce:	50 f4       	brcc	.+20     	; 0xb3e4 <udd_ep_alloc+0x66>
    b3d0:	40 32       	cpi	r20, 0x20	; 32
    b3d2:	51 05       	cpc	r21, r1
    b3d4:	a9 f0       	breq	.+42     	; 0xb400 <udd_ep_alloc+0x82>
    b3d6:	40 34       	cpi	r20, 0x40	; 64
    b3d8:	51 05       	cpc	r21, r1
    b3da:	a1 f0       	breq	.+40     	; 0xb404 <udd_ep_alloc+0x86>
    b3dc:	40 31       	cpi	r20, 0x10	; 16
    b3de:	51 05       	cpc	r21, r1
    b3e0:	d9 f4       	brne	.+54     	; 0xb418 <udd_ep_alloc+0x9a>
    b3e2:	0c c0       	rjmp	.+24     	; 0xb3fc <udd_ep_alloc+0x7e>
    b3e4:	41 15       	cp	r20, r1
    b3e6:	22 e0       	ldi	r18, 0x02	; 2
    b3e8:	52 07       	cpc	r21, r18
    b3ea:	91 f0       	breq	.+36     	; 0xb410 <udd_ep_alloc+0x92>
    b3ec:	4f 3f       	cpi	r20, 0xFF	; 255
    b3ee:	23 e0       	ldi	r18, 0x03	; 3
    b3f0:	52 07       	cpc	r21, r18
    b3f2:	81 f0       	breq	.+32     	; 0xb414 <udd_ep_alloc+0x96>
    b3f4:	41 15       	cp	r20, r1
    b3f6:	51 40       	sbci	r21, 0x01	; 1
    b3f8:	79 f4       	brne	.+30     	; 0xb418 <udd_ep_alloc+0x9a>
    b3fa:	08 c0       	rjmp	.+16     	; 0xb40c <udd_ep_alloc+0x8e>
    b3fc:	21 e0       	ldi	r18, 0x01	; 1
    b3fe:	0d c0       	rjmp	.+26     	; 0xb41a <udd_ep_alloc+0x9c>
    b400:	22 e0       	ldi	r18, 0x02	; 2
    b402:	0b c0       	rjmp	.+22     	; 0xb41a <udd_ep_alloc+0x9c>
    b404:	23 e0       	ldi	r18, 0x03	; 3
    b406:	09 c0       	rjmp	.+18     	; 0xb41a <udd_ep_alloc+0x9c>
    b408:	24 e0       	ldi	r18, 0x04	; 4
    b40a:	07 c0       	rjmp	.+14     	; 0xb41a <udd_ep_alloc+0x9c>
    b40c:	25 e0       	ldi	r18, 0x05	; 5
    b40e:	05 c0       	rjmp	.+10     	; 0xb41a <udd_ep_alloc+0x9c>
    b410:	26 e0       	ldi	r18, 0x06	; 6
    b412:	03 c0       	rjmp	.+6      	; 0xb41a <udd_ep_alloc+0x9c>
    b414:	27 e0       	ldi	r18, 0x07	; 7
    b416:	01 c0       	rjmp	.+2      	; 0xb41a <udd_ep_alloc+0x9c>
    b418:	20 e0       	ldi	r18, 0x00	; 0
    b41a:	fc 01       	movw	r30, r24
    b41c:	ee 0f       	add	r30, r30
    b41e:	ff 1f       	adc	r31, r31
    b420:	ee 0f       	add	r30, r30
    b422:	ff 1f       	adc	r31, r31
    b424:	ee 0f       	add	r30, r30
    b426:	ff 1f       	adc	r31, r31
    b428:	e0 5b       	subi	r30, 0xB0	; 176
    b42a:	fb 4d       	sbci	r31, 0xDB	; 219
    b42c:	15 86       	std	Z+13, r1	; 0x0d
    b42e:	36 e0       	ldi	r19, 0x06	; 6
    b430:	34 87       	std	Z+12, r19	; 0x0c
    b432:	26 2b       	or	r18, r22
    b434:	25 87       	std	Z+13, r18	; 0x0d
    b436:	fc 01       	movw	r30, r24
    b438:	ee 0f       	add	r30, r30
    b43a:	ff 1f       	adc	r31, r31
    b43c:	ee 0f       	add	r30, r30
    b43e:	ff 1f       	adc	r31, r31
    b440:	ee 0f       	add	r30, r30
    b442:	ff 1f       	adc	r31, r31
    b444:	e0 5b       	subi	r30, 0xB0	; 176
    b446:	fb 4d       	sbci	r31, 0xDB	; 219
    b448:	25 85       	ldd	r18, Z+13	; 0x0d
    b44a:	20 7c       	andi	r18, 0xC0	; 192
    b44c:	20 3c       	cpi	r18, 0xC0	; 192
    b44e:	69 f4       	brne	.+26     	; 0xb46a <udd_ep_alloc+0xec>
    b450:	fc 01       	movw	r30, r24
    b452:	ee 0f       	add	r30, r30
    b454:	ff 1f       	adc	r31, r31
    b456:	ee 0f       	add	r30, r30
    b458:	ff 1f       	adc	r31, r31
    b45a:	ee 0f       	add	r30, r30
    b45c:	ff 1f       	adc	r31, r31
    b45e:	e0 5b       	subi	r30, 0xB0	; 176
    b460:	fb 4d       	sbci	r31, 0xDB	; 219
    b462:	25 85       	ldd	r18, Z+13	; 0x0d
    b464:	27 70       	andi	r18, 0x07	; 7
    b466:	27 30       	cpi	r18, 0x07	; 7
    b468:	81 f0       	breq	.+32     	; 0xb48a <udd_ep_alloc+0x10c>
    b46a:	88 0f       	add	r24, r24
    b46c:	99 1f       	adc	r25, r25
    b46e:	88 0f       	add	r24, r24
    b470:	99 1f       	adc	r25, r25
    b472:	88 0f       	add	r24, r24
    b474:	99 1f       	adc	r25, r25
    b476:	fc 01       	movw	r30, r24
    b478:	e0 5b       	subi	r30, 0xB0	; 176
    b47a:	fb 4d       	sbci	r31, 0xDB	; 219
    b47c:	85 85       	ldd	r24, Z+13	; 0x0d
    b47e:	80 62       	ori	r24, 0x20	; 32
    b480:	85 87       	std	Z+13, r24	; 0x0d
    b482:	81 e0       	ldi	r24, 0x01	; 1
    b484:	08 95       	ret
    b486:	80 e0       	ldi	r24, 0x00	; 0
    b488:	08 95       	ret
    b48a:	81 e0       	ldi	r24, 0x01	; 1
    b48c:	08 95       	ret

0000b48e <udd_ep_is_halted>:
    b48e:	e8 2f       	mov	r30, r24
    b490:	ef 70       	andi	r30, 0x0F	; 15
    b492:	f0 e0       	ldi	r31, 0x00	; 0
    b494:	ee 0f       	add	r30, r30
    b496:	ff 1f       	adc	r31, r31
    b498:	08 2e       	mov	r0, r24
    b49a:	00 0c       	add	r0, r0
    b49c:	99 0b       	sbc	r25, r25
    b49e:	88 27       	eor	r24, r24
    b4a0:	99 0f       	add	r25, r25
    b4a2:	88 1f       	adc	r24, r24
    b4a4:	99 27       	eor	r25, r25
    b4a6:	e8 0f       	add	r30, r24
    b4a8:	f9 1f       	adc	r31, r25
    b4aa:	ee 0f       	add	r30, r30
    b4ac:	ff 1f       	adc	r31, r31
    b4ae:	ee 0f       	add	r30, r30
    b4b0:	ff 1f       	adc	r31, r31
    b4b2:	ee 0f       	add	r30, r30
    b4b4:	ff 1f       	adc	r31, r31
    b4b6:	e0 5b       	subi	r30, 0xB0	; 176
    b4b8:	fb 4d       	sbci	r31, 0xDB	; 219
    b4ba:	85 85       	ldd	r24, Z+13	; 0x0d
    b4bc:	82 fb       	bst	r24, 2
    b4be:	88 27       	eor	r24, r24
    b4c0:	80 f9       	bld	r24, 0
    b4c2:	08 95       	ret

0000b4c4 <udd_ep_clear_halt>:
    b4c4:	0f 93       	push	r16
    b4c6:	28 2f       	mov	r18, r24
    b4c8:	2f 70       	andi	r18, 0x0F	; 15
    b4ca:	30 e0       	ldi	r19, 0x00	; 0
    b4cc:	a9 01       	movw	r20, r18
    b4ce:	44 0f       	add	r20, r20
    b4d0:	55 1f       	adc	r21, r21
    b4d2:	28 2f       	mov	r18, r24
    b4d4:	08 2e       	mov	r0, r24
    b4d6:	00 0c       	add	r0, r0
    b4d8:	33 0b       	sbc	r19, r19
    b4da:	22 27       	eor	r18, r18
    b4dc:	33 0f       	add	r19, r19
    b4de:	22 1f       	adc	r18, r18
    b4e0:	33 27       	eor	r19, r19
    b4e2:	24 0f       	add	r18, r20
    b4e4:	35 1f       	adc	r19, r21
    b4e6:	a9 01       	movw	r20, r18
    b4e8:	44 0f       	add	r20, r20
    b4ea:	55 1f       	adc	r21, r21
    b4ec:	44 0f       	add	r20, r20
    b4ee:	55 1f       	adc	r21, r21
    b4f0:	44 0f       	add	r20, r20
    b4f2:	55 1f       	adc	r21, r21
    b4f4:	fa 01       	movw	r30, r20
    b4f6:	e4 5a       	subi	r30, 0xA4	; 164
    b4f8:	fb 4d       	sbci	r31, 0xDB	; 219
    b4fa:	01 e0       	ldi	r16, 0x01	; 1
    b4fc:	06 93       	lac	Z, r16
    b4fe:	fa 01       	movw	r30, r20
    b500:	e0 5b       	subi	r30, 0xB0	; 176
    b502:	fb 4d       	sbci	r31, 0xDB	; 219
    b504:	95 85       	ldd	r25, Z+13	; 0x0d
    b506:	92 ff       	sbrs	r25, 2
    b508:	11 c0       	rjmp	.+34     	; 0xb52c <udd_ep_clear_halt+0x68>
    b50a:	fa 01       	movw	r30, r20
    b50c:	e0 5b       	subi	r30, 0xB0	; 176
    b50e:	fb 4d       	sbci	r31, 0xDB	; 219
    b510:	95 85       	ldd	r25, Z+13	; 0x0d
    b512:	9b 7f       	andi	r25, 0xFB	; 251
    b514:	95 87       	std	Z+13, r25	; 0x0d
    b516:	2c dc       	rcall	.-1960   	; 0xad70 <udd_ep_get_job>
    b518:	fc 01       	movw	r30, r24
    b51a:	80 81       	ld	r24, Z
    b51c:	80 ff       	sbrs	r24, 0
    b51e:	06 c0       	rjmp	.+12     	; 0xb52c <udd_ep_clear_halt+0x68>
    b520:	8e 7f       	andi	r24, 0xFE	; 254
    b522:	80 83       	st	Z, r24
    b524:	07 80       	ldd	r0, Z+7	; 0x07
    b526:	f0 85       	ldd	r31, Z+8	; 0x08
    b528:	e0 2d       	mov	r30, r0
    b52a:	19 95       	eicall
    b52c:	81 e0       	ldi	r24, 0x01	; 1
    b52e:	0f 91       	pop	r16
    b530:	08 95       	ret

0000b532 <udd_ep_run>:
    b532:	6f 92       	push	r6
    b534:	7f 92       	push	r7
    b536:	8f 92       	push	r8
    b538:	9f 92       	push	r9
    b53a:	af 92       	push	r10
    b53c:	bf 92       	push	r11
    b53e:	cf 92       	push	r12
    b540:	df 92       	push	r13
    b542:	ef 92       	push	r14
    b544:	ff 92       	push	r15
    b546:	0f 93       	push	r16
    b548:	1f 93       	push	r17
    b54a:	cf 93       	push	r28
    b54c:	df 93       	push	r29
    b54e:	1f 92       	push	r1
    b550:	cd b7       	in	r28, 0x3d	; 61
    b552:	de b7       	in	r29, 0x3e	; 62
    b554:	78 2e       	mov	r7, r24
    b556:	66 2e       	mov	r6, r22
    b558:	4a 01       	movw	r8, r20
    b55a:	59 01       	movw	r10, r18
    b55c:	09 dc       	rcall	.-2030   	; 0xad70 <udd_ep_get_job>
    b55e:	6c 01       	movw	r12, r24
    b560:	27 2d       	mov	r18, r7
    b562:	87 2d       	mov	r24, r7
    b564:	8f 70       	andi	r24, 0x0F	; 15
    b566:	e8 2e       	mov	r14, r24
    b568:	f1 2c       	mov	r15, r1
    b56a:	c7 01       	movw	r24, r14
    b56c:	88 0f       	add	r24, r24
    b56e:	99 1f       	adc	r25, r25
    b570:	e7 2c       	mov	r14, r7
    b572:	07 2c       	mov	r0, r7
    b574:	00 0c       	add	r0, r0
    b576:	ff 08       	sbc	r15, r15
    b578:	ee 24       	eor	r14, r14
    b57a:	ff 0c       	add	r15, r15
    b57c:	ee 1c       	adc	r14, r14
    b57e:	ff 24       	eor	r15, r15
    b580:	e8 0e       	add	r14, r24
    b582:	f9 1e       	adc	r15, r25
    b584:	f7 01       	movw	r30, r14
    b586:	ee 0f       	add	r30, r30
    b588:	ff 1f       	adc	r31, r31
    b58a:	ee 0f       	add	r30, r30
    b58c:	ff 1f       	adc	r31, r31
    b58e:	ee 0f       	add	r30, r30
    b590:	ff 1f       	adc	r31, r31
    b592:	e0 5b       	subi	r30, 0xB0	; 176
    b594:	fb 4d       	sbci	r31, 0xDB	; 219
    b596:	85 85       	ldd	r24, Z+13	; 0x0d
    b598:	80 7c       	andi	r24, 0xC0	; 192
    b59a:	09 f4       	brne	.+2      	; 0xb59e <udd_ep_run+0x6c>
    b59c:	82 c0       	rjmp	.+260    	; 0xb6a2 <udd_ep_run+0x170>
    b59e:	f7 01       	movw	r30, r14
    b5a0:	ee 0f       	add	r30, r30
    b5a2:	ff 1f       	adc	r31, r31
    b5a4:	ee 0f       	add	r30, r30
    b5a6:	ff 1f       	adc	r31, r31
    b5a8:	ee 0f       	add	r30, r30
    b5aa:	ff 1f       	adc	r31, r31
    b5ac:	e0 5b       	subi	r30, 0xB0	; 176
    b5ae:	fb 4d       	sbci	r31, 0xDB	; 219
    b5b0:	85 85       	ldd	r24, Z+13	; 0x0d
    b5b2:	80 7c       	andi	r24, 0xC0	; 192
    b5b4:	80 3c       	cpi	r24, 0xC0	; 192
    b5b6:	61 f0       	breq	.+24     	; 0xb5d0 <udd_ep_run+0x9e>
    b5b8:	f7 01       	movw	r30, r14
    b5ba:	ee 0f       	add	r30, r30
    b5bc:	ff 1f       	adc	r31, r31
    b5be:	ee 0f       	add	r30, r30
    b5c0:	ff 1f       	adc	r31, r31
    b5c2:	ee 0f       	add	r30, r30
    b5c4:	ff 1f       	adc	r31, r31
    b5c6:	e0 5b       	subi	r30, 0xB0	; 176
    b5c8:	fb 4d       	sbci	r31, 0xDB	; 219
    b5ca:	85 85       	ldd	r24, Z+13	; 0x0d
    b5cc:	82 fd       	sbrc	r24, 2
    b5ce:	6b c0       	rjmp	.+214    	; 0xb6a6 <udd_ep_run+0x174>
    b5d0:	8f b7       	in	r24, 0x3f	; 63
    b5d2:	89 83       	std	Y+1, r24	; 0x01
    b5d4:	f8 94       	cli
    b5d6:	89 81       	ldd	r24, Y+1	; 0x01
    b5d8:	f6 01       	movw	r30, r12
    b5da:	90 81       	ld	r25, Z
    b5dc:	90 ff       	sbrs	r25, 0
    b5de:	03 c0       	rjmp	.+6      	; 0xb5e6 <udd_ep_run+0xb4>
    b5e0:	8f bf       	out	0x3f, r24	; 63
    b5e2:	80 e0       	ldi	r24, 0x00	; 0
    b5e4:	61 c0       	rjmp	.+194    	; 0xb6a8 <udd_ep_run+0x176>
    b5e6:	f6 01       	movw	r30, r12
    b5e8:	90 81       	ld	r25, Z
    b5ea:	91 60       	ori	r25, 0x01	; 1
    b5ec:	90 83       	st	Z, r25
    b5ee:	8f bf       	out	0x3f, r24	; 63
    b5f0:	81 82       	std	Z+1, r8	; 0x01
    b5f2:	92 82       	std	Z+2, r9	; 0x02
    b5f4:	a3 82       	std	Z+3, r10	; 0x03
    b5f6:	b4 82       	std	Z+4, r11	; 0x04
    b5f8:	15 82       	std	Z+5, r1	; 0x05
    b5fa:	16 82       	std	Z+6, r1	; 0x06
    b5fc:	07 83       	std	Z+7, r16	; 0x07
    b5fe:	10 87       	std	Z+8, r17	; 0x08
    b600:	61 10       	cpse	r6, r1
    b602:	06 c0       	rjmp	.+12     	; 0xb610 <udd_ep_run+0xde>
    b604:	91 e0       	ldi	r25, 0x01	; 1
    b606:	a1 14       	cp	r10, r1
    b608:	b1 04       	cpc	r11, r1
    b60a:	19 f0       	breq	.+6      	; 0xb612 <udd_ep_run+0xe0>
    b60c:	90 e0       	ldi	r25, 0x00	; 0
    b60e:	01 c0       	rjmp	.+2      	; 0xb612 <udd_ep_run+0xe0>
    b610:	91 e0       	ldi	r25, 0x01	; 1
    b612:	f6 01       	movw	r30, r12
    b614:	80 81       	ld	r24, Z
    b616:	90 fb       	bst	r25, 0
    b618:	81 f9       	bld	r24, 1
    b61a:	8b 7f       	andi	r24, 0xFB	; 251
    b61c:	80 83       	st	Z, r24
    b61e:	22 23       	and	r18, r18
    b620:	64 f4       	brge	.+24     	; 0xb63a <udd_ep_run+0x108>
    b622:	f7 01       	movw	r30, r14
    b624:	ee 0f       	add	r30, r30
    b626:	ff 1f       	adc	r31, r31
    b628:	ee 0f       	add	r30, r30
    b62a:	ff 1f       	adc	r31, r31
    b62c:	ee 0f       	add	r30, r30
    b62e:	ff 1f       	adc	r31, r31
    b630:	e0 5b       	subi	r30, 0xB0	; 176
    b632:	fb 4d       	sbci	r31, 0xDB	; 219
    b634:	12 8a       	std	Z+18, r1	; 0x12
    b636:	13 8a       	std	Z+19, r1	; 0x13
    b638:	30 c0       	rjmp	.+96     	; 0xb69a <udd_ep_run+0x168>
    b63a:	f7 01       	movw	r30, r14
    b63c:	ee 0f       	add	r30, r30
    b63e:	ff 1f       	adc	r31, r31
    b640:	ee 0f       	add	r30, r30
    b642:	ff 1f       	adc	r31, r31
    b644:	ee 0f       	add	r30, r30
    b646:	ff 1f       	adc	r31, r31
    b648:	e0 5b       	subi	r30, 0xB0	; 176
    b64a:	fb 4d       	sbci	r31, 0xDB	; 219
    b64c:	85 85       	ldd	r24, Z+13	; 0x0d
    b64e:	80 7c       	andi	r24, 0xC0	; 192
    b650:	80 3c       	cpi	r24, 0xC0	; 192
    b652:	b1 f4       	brne	.+44     	; 0xb680 <udd_ep_run+0x14e>
    b654:	c7 01       	movw	r24, r14
    b656:	88 0f       	add	r24, r24
    b658:	99 1f       	adc	r25, r25
    b65a:	88 0f       	add	r24, r24
    b65c:	99 1f       	adc	r25, r25
    b65e:	88 0f       	add	r24, r24
    b660:	99 1f       	adc	r25, r25
    b662:	84 5a       	subi	r24, 0xA4	; 164
    b664:	9b 4d       	sbci	r25, 0xDB	; 219
    b666:	5b db       	rcall	.-2378   	; 0xad1e <udd_ep_get_size>
    b668:	bc 01       	movw	r22, r24
    b66a:	c5 01       	movw	r24, r10
    b66c:	0e 94 50 87 	call	0x10ea0	; 0x10ea0 <__udivmodhi4>
    b670:	89 2b       	or	r24, r25
    b672:	31 f0       	breq	.+12     	; 0xb680 <udd_ep_run+0x14e>
    b674:	f6 01       	movw	r30, r12
    b676:	80 81       	ld	r24, Z
    b678:	8e 7f       	andi	r24, 0xFE	; 254
    b67a:	80 83       	st	Z, r24
    b67c:	80 e0       	ldi	r24, 0x00	; 0
    b67e:	14 c0       	rjmp	.+40     	; 0xb6a8 <udd_ep_run+0x176>
    b680:	f7 01       	movw	r30, r14
    b682:	ee 0f       	add	r30, r30
    b684:	ff 1f       	adc	r31, r31
    b686:	ee 0f       	add	r30, r30
    b688:	ff 1f       	adc	r31, r31
    b68a:	ee 0f       	add	r30, r30
    b68c:	ff 1f       	adc	r31, r31
    b68e:	e0 5b       	subi	r30, 0xB0	; 176
    b690:	fb 4d       	sbci	r31, 0xDB	; 219
    b692:	16 86       	std	Z+14, r1	; 0x0e
    b694:	17 86       	std	Z+15, r1	; 0x0f
    b696:	12 8a       	std	Z+18, r1	; 0x12
    b698:	13 8a       	std	Z+19, r1	; 0x13
    b69a:	87 2d       	mov	r24, r7
    b69c:	f6 db       	rcall	.-2068   	; 0xae8a <udd_ep_trans_complet>
    b69e:	81 e0       	ldi	r24, 0x01	; 1
    b6a0:	03 c0       	rjmp	.+6      	; 0xb6a8 <udd_ep_run+0x176>
    b6a2:	80 e0       	ldi	r24, 0x00	; 0
    b6a4:	01 c0       	rjmp	.+2      	; 0xb6a8 <udd_ep_run+0x176>
    b6a6:	80 e0       	ldi	r24, 0x00	; 0
    b6a8:	0f 90       	pop	r0
    b6aa:	df 91       	pop	r29
    b6ac:	cf 91       	pop	r28
    b6ae:	1f 91       	pop	r17
    b6b0:	0f 91       	pop	r16
    b6b2:	ff 90       	pop	r15
    b6b4:	ef 90       	pop	r14
    b6b6:	df 90       	pop	r13
    b6b8:	cf 90       	pop	r12
    b6ba:	bf 90       	pop	r11
    b6bc:	af 90       	pop	r10
    b6be:	9f 90       	pop	r9
    b6c0:	8f 90       	pop	r8
    b6c2:	7f 90       	pop	r7
    b6c4:	6f 90       	pop	r6
    b6c6:	08 95       	ret

0000b6c8 <udd_ep_abort>:
    b6c8:	ff 92       	push	r15
    b6ca:	0f 93       	push	r16
    b6cc:	1f 93       	push	r17
    b6ce:	cf 93       	push	r28
    b6d0:	df 93       	push	r29
    b6d2:	18 2f       	mov	r17, r24
    b6d4:	c8 2f       	mov	r28, r24
    b6d6:	cf 70       	andi	r28, 0x0F	; 15
    b6d8:	d0 e0       	ldi	r29, 0x00	; 0
    b6da:	ce 01       	movw	r24, r28
    b6dc:	88 0f       	add	r24, r24
    b6de:	99 1f       	adc	r25, r25
    b6e0:	c1 2f       	mov	r28, r17
    b6e2:	01 2e       	mov	r0, r17
    b6e4:	00 0c       	add	r0, r0
    b6e6:	dd 0b       	sbc	r29, r29
    b6e8:	cc 27       	eor	r28, r28
    b6ea:	dd 0f       	add	r29, r29
    b6ec:	cc 1f       	adc	r28, r28
    b6ee:	dd 27       	eor	r29, r29
    b6f0:	c8 0f       	add	r28, r24
    b6f2:	d9 1f       	adc	r29, r25
    b6f4:	81 2f       	mov	r24, r17
    b6f6:	3c db       	rcall	.-2440   	; 0xad70 <udd_ep_get_job>
    b6f8:	dc 01       	movw	r26, r24
    b6fa:	fe 01       	movw	r30, r28
    b6fc:	ee 0f       	add	r30, r30
    b6fe:	ff 1f       	adc	r31, r31
    b700:	ee 0f       	add	r30, r30
    b702:	ff 1f       	adc	r31, r31
    b704:	ee 0f       	add	r30, r30
    b706:	ff 1f       	adc	r31, r31
    b708:	e4 5a       	subi	r30, 0xA4	; 164
    b70a:	fb 4d       	sbci	r31, 0xDB	; 219
    b70c:	02 e0       	ldi	r16, 0x02	; 2
    b70e:	05 93       	las	Z, r16
    b710:	8c 91       	ld	r24, X
    b712:	80 ff       	sbrs	r24, 0
    b714:	22 c0       	rjmp	.+68     	; 0xb75a <udd_ep_abort+0x92>
    b716:	8e 7f       	andi	r24, 0xFE	; 254
    b718:	8c 93       	st	X, r24
    b71a:	17 96       	adiw	r26, 0x07	; 7
    b71c:	ed 91       	ld	r30, X+
    b71e:	fc 91       	ld	r31, X
    b720:	18 97       	sbiw	r26, 0x08	; 8
    b722:	30 97       	sbiw	r30, 0x00	; 0
    b724:	d1 f0       	breq	.+52     	; 0xb75a <udd_ep_abort+0x92>
    b726:	11 23       	and	r17, r17
    b728:	5c f4       	brge	.+22     	; 0xb740 <udd_ep_abort+0x78>
    b72a:	cc 0f       	add	r28, r28
    b72c:	dd 1f       	adc	r29, r29
    b72e:	cc 0f       	add	r28, r28
    b730:	dd 1f       	adc	r29, r29
    b732:	cc 0f       	add	r28, r28
    b734:	dd 1f       	adc	r29, r29
    b736:	c0 5b       	subi	r28, 0xB0	; 176
    b738:	db 4d       	sbci	r29, 0xDB	; 219
    b73a:	6a 89       	ldd	r22, Y+18	; 0x12
    b73c:	7b 89       	ldd	r23, Y+19	; 0x13
    b73e:	0a c0       	rjmp	.+20     	; 0xb754 <udd_ep_abort+0x8c>
    b740:	cc 0f       	add	r28, r28
    b742:	dd 1f       	adc	r29, r29
    b744:	cc 0f       	add	r28, r28
    b746:	dd 1f       	adc	r29, r29
    b748:	cc 0f       	add	r28, r28
    b74a:	dd 1f       	adc	r29, r29
    b74c:	c0 5b       	subi	r28, 0xB0	; 176
    b74e:	db 4d       	sbci	r29, 0xDB	; 219
    b750:	6e 85       	ldd	r22, Y+14	; 0x0e
    b752:	7f 85       	ldd	r23, Y+15	; 0x0f
    b754:	41 2f       	mov	r20, r17
    b756:	81 e0       	ldi	r24, 0x01	; 1
    b758:	19 95       	eicall
    b75a:	df 91       	pop	r29
    b75c:	cf 91       	pop	r28
    b75e:	1f 91       	pop	r17
    b760:	0f 91       	pop	r16
    b762:	ff 90       	pop	r15
    b764:	08 95       	ret

0000b766 <udd_ep_free>:
    b766:	cf 93       	push	r28
    b768:	c8 2f       	mov	r28, r24
    b76a:	ae df       	rcall	.-164    	; 0xb6c8 <udd_ep_abort>
    b76c:	ec 2f       	mov	r30, r28
    b76e:	ef 70       	andi	r30, 0x0F	; 15
    b770:	f0 e0       	ldi	r31, 0x00	; 0
    b772:	ee 0f       	add	r30, r30
    b774:	ff 1f       	adc	r31, r31
    b776:	8c 2f       	mov	r24, r28
    b778:	cc 0f       	add	r28, r28
    b77a:	99 0b       	sbc	r25, r25
    b77c:	88 27       	eor	r24, r24
    b77e:	99 0f       	add	r25, r25
    b780:	88 1f       	adc	r24, r24
    b782:	99 27       	eor	r25, r25
    b784:	e8 0f       	add	r30, r24
    b786:	f9 1f       	adc	r31, r25
    b788:	ee 0f       	add	r30, r30
    b78a:	ff 1f       	adc	r31, r31
    b78c:	ee 0f       	add	r30, r30
    b78e:	ff 1f       	adc	r31, r31
    b790:	ee 0f       	add	r30, r30
    b792:	ff 1f       	adc	r31, r31
    b794:	e0 5b       	subi	r30, 0xB0	; 176
    b796:	fb 4d       	sbci	r31, 0xDB	; 219
    b798:	15 86       	std	Z+13, r1	; 0x0d
    b79a:	cf 91       	pop	r28
    b79c:	08 95       	ret

0000b79e <udd_ep_set_halt>:
    b79e:	e8 2f       	mov	r30, r24
    b7a0:	ef 70       	andi	r30, 0x0F	; 15
    b7a2:	f0 e0       	ldi	r31, 0x00	; 0
    b7a4:	ee 0f       	add	r30, r30
    b7a6:	ff 1f       	adc	r31, r31
    b7a8:	28 2f       	mov	r18, r24
    b7aa:	08 2e       	mov	r0, r24
    b7ac:	00 0c       	add	r0, r0
    b7ae:	33 0b       	sbc	r19, r19
    b7b0:	22 27       	eor	r18, r18
    b7b2:	33 0f       	add	r19, r19
    b7b4:	22 1f       	adc	r18, r18
    b7b6:	33 27       	eor	r19, r19
    b7b8:	e2 0f       	add	r30, r18
    b7ba:	f3 1f       	adc	r31, r19
    b7bc:	ee 0f       	add	r30, r30
    b7be:	ff 1f       	adc	r31, r31
    b7c0:	ee 0f       	add	r30, r30
    b7c2:	ff 1f       	adc	r31, r31
    b7c4:	ee 0f       	add	r30, r30
    b7c6:	ff 1f       	adc	r31, r31
    b7c8:	e0 5b       	subi	r30, 0xB0	; 176
    b7ca:	fb 4d       	sbci	r31, 0xDB	; 219
    b7cc:	95 85       	ldd	r25, Z+13	; 0x0d
    b7ce:	94 60       	ori	r25, 0x04	; 4
    b7d0:	95 87       	std	Z+13, r25	; 0x0d
    b7d2:	7a df       	rcall	.-268    	; 0xb6c8 <udd_ep_abort>
    b7d4:	81 e0       	ldi	r24, 0x01	; 1
    b7d6:	08 95       	ret

0000b7d8 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    b7d8:	1f 92       	push	r1
    b7da:	0f 92       	push	r0
    b7dc:	0f b6       	in	r0, 0x3f	; 63
    b7de:	0f 92       	push	r0
    b7e0:	11 24       	eor	r1, r1
    b7e2:	0b b6       	in	r0, 0x3b	; 59
    b7e4:	0f 92       	push	r0
    b7e6:	0f 93       	push	r16
    b7e8:	2f 93       	push	r18
    b7ea:	3f 93       	push	r19
    b7ec:	4f 93       	push	r20
    b7ee:	5f 93       	push	r21
    b7f0:	6f 93       	push	r22
    b7f2:	7f 93       	push	r23
    b7f4:	8f 93       	push	r24
    b7f6:	9f 93       	push	r25
    b7f8:	af 93       	push	r26
    b7fa:	bf 93       	push	r27
    b7fc:	ef 93       	push	r30
    b7fe:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    b800:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b804:	88 23       	and	r24, r24
    b806:	34 f4       	brge	.+12     	; 0xb814 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    b808:	80 e8       	ldi	r24, 0x80	; 128
    b80a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    b80e:	0e 94 f5 79 	call	0xf3ea	; 0xf3ea <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    b812:	8a c0       	rjmp	.+276    	; 0xb928 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    b814:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b818:	82 ff       	sbrs	r24, 2
    b81a:	20 c0       	rjmp	.+64     	; 0xb85c <__vector_125+0x84>
		udd_ack_underflow_event();
    b81c:	84 e0       	ldi	r24, 0x04	; 4
    b81e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    b822:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_sram+0x14>
    b826:	86 ff       	sbrs	r24, 6
    b828:	7f c0       	rjmp	.+254    	; 0xb928 <__vector_125+0x150>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    b82a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b82e:	81 fd       	sbrc	r24, 1
    b830:	7b c0       	rjmp	.+246    	; 0xb928 <__vector_125+0x150>
    b832:	b9 da       	rcall	.-2702   	; 0xada6 <udd_ctrl_interrupt_tc_setup>
    b834:	81 11       	cpse	r24, r1
    b836:	78 c0       	rjmp	.+240    	; 0xb928 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    b838:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <udd_ep_control_state>
    b83c:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    b83e:	11 f4       	brne	.+4      	; 0xb844 <__vector_125+0x6c>
    b840:	ec d9       	rcall	.-3112   	; 0xac1a <udd_ctrl_send_zlp_in>
    b842:	72 c0       	rjmp	.+228    	; 0xb928 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    b844:	84 30       	cpi	r24, 0x04	; 4
    b846:	09 f0       	breq	.+2      	; 0xb84a <__vector_125+0x72>
    b848:	6f c0       	rjmp	.+222    	; 0xb928 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    b84a:	e5 e6       	ldi	r30, 0x65	; 101
    b84c:	f4 e2       	ldi	r31, 0x24	; 36
    b84e:	04 e0       	ldi	r16, 0x04	; 4
    b850:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    b852:	ed e5       	ldi	r30, 0x5D	; 93
    b854:	f4 e2       	ldi	r31, 0x24	; 36
    b856:	04 e0       	ldi	r16, 0x04	; 4
    b858:	05 93       	las	Z, r16
    b85a:	66 c0       	rjmp	.+204    	; 0xb928 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    b85c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b860:	81 ff       	sbrs	r24, 1
    b862:	5d c0       	rjmp	.+186    	; 0xb91e <__vector_125+0x146>
		udd_ack_overflow_event();
    b864:	82 e0       	ldi	r24, 0x02	; 2
    b866:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    b86a:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_sram+0xc>
    b86e:	86 ff       	sbrs	r24, 6
    b870:	5b c0       	rjmp	.+182    	; 0xb928 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    b872:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b876:	81 fd       	sbrc	r24, 1
    b878:	57 c0       	rjmp	.+174    	; 0xb928 <__vector_125+0x150>
    b87a:	95 da       	rcall	.-2774   	; 0xada6 <udd_ctrl_interrupt_tc_setup>
    b87c:	81 11       	cpse	r24, r1
    b87e:	54 c0       	rjmp	.+168    	; 0xb928 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    b880:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <udd_ep_control_state>
    b884:	82 30       	cpi	r24, 0x02	; 2
    b886:	41 f4       	brne	.+16     	; 0xb898 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    b888:	84 e0       	ldi	r24, 0x04	; 4
    b88a:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    b88e:	ec e5       	ldi	r30, 0x5C	; 92
    b890:	f4 e2       	ldi	r31, 0x24	; 36
    b892:	02 e0       	ldi	r16, 0x02	; 2
    b894:	06 93       	lac	Z, r16
    b896:	48 c0       	rjmp	.+144    	; 0xb928 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    b898:	83 30       	cpi	r24, 0x03	; 3
    b89a:	09 f0       	breq	.+2      	; 0xb89e <__vector_125+0xc6>
    b89c:	45 c0       	rjmp	.+138    	; 0xb928 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    b89e:	e5 e6       	ldi	r30, 0x65	; 101
    b8a0:	f4 e2       	ldi	r31, 0x24	; 36
    b8a2:	04 e0       	ldi	r16, 0x04	; 4
    b8a4:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    b8a6:	ed e5       	ldi	r30, 0x5D	; 93
    b8a8:	f4 e2       	ldi	r31, 0x24	; 36
    b8aa:	04 e0       	ldi	r16, 0x04	; 4
    b8ac:	05 93       	las	Z, r16
    b8ae:	3c c0       	rjmp	.+120    	; 0xb928 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    b8b0:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    b8b2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    b8b6:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    b8b8:	07 df       	rcall	.-498    	; 0xb6c8 <udd_ep_abort>
    b8ba:	81 e8       	ldi	r24, 0x81	; 129
    b8bc:	05 df       	rcall	.-502    	; 0xb6c8 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    b8be:	82 e0       	ldi	r24, 0x02	; 2
    b8c0:	03 df       	rcall	.-506    	; 0xb6c8 <udd_ep_abort>
    b8c2:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    b8c4:	01 df       	rcall	.-510    	; 0xb6c8 <udd_ep_abort>
    b8c6:	0e 94 c7 79 	call	0xf38e	; 0xf38e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    b8ca:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    b8ce:	e0 e5       	ldi	r30, 0x50	; 80
    b8d0:	f4 e2       	ldi	r31, 0x24	; 36
	udd_endpoint_clear_status(ep_ctrl);
    b8d2:	15 86       	std	Z+13, r1	; 0x0d
    b8d4:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    b8d6:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    b8d8:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    b8da:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    b8dc:	15 8a       	std	Z+21, r1	; 0x15
    b8de:	94 8b       	std	Z+20, r25	; 0x14
    b8e0:	85 8b       	std	Z+21, r24	; 0x15
    b8e2:	88 e0       	ldi	r24, 0x08	; 8
		// Reset endpoint control management
		udd_ctrl_init();
    b8e4:	94 e2       	ldi	r25, 0x24	; 36
    b8e6:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    b8e8:	91 8b       	std	Z+17, r25	; 0x11
    b8ea:	64 d9       	rcall	.-3384   	; 0xabb4 <udd_ctrl_init>
    b8ec:	1d c0       	rjmp	.+58     	; 0xb928 <__vector_125+0x150>
		udd_ack_suspend_event();
    b8ee:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    b8f2:	86 ff       	sbrs	r24, 6
		udd_sleep_mode(false); // Enter in SUSPEND mode
    b8f4:	08 c0       	rjmp	.+16     	; 0xb906 <__vector_125+0x12e>
    b8f6:	80 e4       	ldi	r24, 0x40	; 64
    b8f8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    b8fc:	80 e0       	ldi	r24, 0x00	; 0
    b8fe:	22 d9       	rcall	.-3516   	; 0xab44 <udd_sleep_mode>
    b900:	0e 94 a4 21 	call	0x4348	; 0x4348 <usb_callback_suspend_action>
		udd_ack_resume_event();
    b904:	11 c0       	rjmp	.+34     	; 0xb928 <__vector_125+0x150>
    b906:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    b90a:	85 ff       	sbrs	r24, 5
    b90c:	0d c0       	rjmp	.+26     	; 0xb928 <__vector_125+0x150>
    b90e:	80 e2       	ldi	r24, 0x20	; 32
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    b910:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    b914:	81 e0       	ldi	r24, 0x01	; 1
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    b916:	16 d9       	rcall	.-3540   	; 0xab44 <udd_sleep_mode>
    b918:	0e 94 a8 21 	call	0x4350	; 0x4350 <usb_callback_resume_action>
    b91c:	05 c0       	rjmp	.+10     	; 0xb928 <__vector_125+0x150>
    b91e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    b922:	84 fd       	sbrc	r24, 4
    b924:	c5 cf       	rjmp	.-118    	; 0xb8b0 <__vector_125+0xd8>
    b926:	e3 cf       	rjmp	.-58     	; 0xb8ee <__vector_125+0x116>
    b928:	ff 91       	pop	r31
    b92a:	ef 91       	pop	r30
    b92c:	bf 91       	pop	r27
    b92e:	af 91       	pop	r26
    b930:	9f 91       	pop	r25
    b932:	8f 91       	pop	r24
    b934:	7f 91       	pop	r23
    b936:	6f 91       	pop	r22
    b938:	5f 91       	pop	r21
    b93a:	4f 91       	pop	r20
    b93c:	3f 91       	pop	r19
    b93e:	2f 91       	pop	r18
    b940:	0f 91       	pop	r16
    b942:	0f 90       	pop	r0
    b944:	0b be       	out	0x3b, r0	; 59
    b946:	0f 90       	pop	r0
    b948:	0f be       	out	0x3f, r0	; 63
    b94a:	0f 90       	pop	r0
    b94c:	1f 90       	pop	r1
    b94e:	18 95       	reti

0000b950 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    b950:	1f 92       	push	r1
    b952:	0f 92       	push	r0
    b954:	0f b6       	in	r0, 0x3f	; 63
    b956:	0f 92       	push	r0
    b958:	11 24       	eor	r1, r1
    b95a:	0b b6       	in	r0, 0x3b	; 59
    b95c:	0f 92       	push	r0
    b95e:	0f 93       	push	r16
    b960:	1f 93       	push	r17
    b962:	2f 93       	push	r18
    b964:	3f 93       	push	r19
    b966:	4f 93       	push	r20
    b968:	5f 93       	push	r21
    b96a:	6f 93       	push	r22
    b96c:	7f 93       	push	r23
    b96e:	8f 93       	push	r24
    b970:	9f 93       	push	r25
    b972:	af 93       	push	r26
    b974:	bf 93       	push	r27
    b976:	cf 93       	push	r28
    b978:	df 93       	push	r29
    b97a:	ef 93       	push	r30
    b97c:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    b97e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    b982:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    b984:	03 c0       	rjmp	.+6      	; 0xb98c <__vector_126+0x3c>
    b986:	0f da       	rcall	.-3042   	; 0xada6 <udd_ctrl_interrupt_tc_setup>
    b988:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    b98a:	c4 c0       	rjmp	.+392    	; 0xbb14 <__vector_126+0x1c4>
    b98c:	82 e0       	ldi	r24, 0x02	; 2
    b98e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    b992:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    b996:	81 95       	neg	r24
    b998:	88 0f       	add	r24, r24
    b99a:	ec e5       	ldi	r30, 0x5C	; 92
    b99c:	f4 e2       	ldi	r31, 0x24	; 36
    b99e:	e8 1b       	sub	r30, r24
    b9a0:	f1 09       	sbc	r31, r1
    b9a2:	20 81       	ld	r18, Z
    b9a4:	31 81       	ldd	r19, Z+1	; 0x01
    b9a6:	2c 55       	subi	r18, 0x5C	; 92
    b9a8:	34 42       	sbci	r19, 0x24	; 36
    b9aa:	36 95       	lsr	r19
    b9ac:	27 95       	ror	r18
    b9ae:	36 95       	lsr	r19
    b9b0:	27 95       	ror	r18
    b9b2:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    b9b4:	27 95       	ror	r18
    b9b6:	82 2f       	mov	r24, r18
    b9b8:	86 95       	lsr	r24
    b9ba:	20 fd       	sbrc	r18, 0
    b9bc:	02 c0       	rjmp	.+4      	; 0xb9c2 <__vector_126+0x72>
    b9be:	90 e0       	ldi	r25, 0x00	; 0
    b9c0:	01 c0       	rjmp	.+2      	; 0xb9c4 <__vector_126+0x74>
    b9c2:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    b9c4:	89 0f       	add	r24, r25
    b9c6:	e8 2f       	mov	r30, r24
    b9c8:	ef 70       	andi	r30, 0x0F	; 15
    b9ca:	f0 e0       	ldi	r31, 0x00	; 0
    b9cc:	ee 0f       	add	r30, r30
    b9ce:	ff 1f       	adc	r31, r31
    b9d0:	28 2f       	mov	r18, r24
    b9d2:	08 2e       	mov	r0, r24
    b9d4:	00 0c       	add	r0, r0
    b9d6:	33 0b       	sbc	r19, r19
    b9d8:	22 27       	eor	r18, r18
    b9da:	33 0f       	add	r19, r19
    b9dc:	22 1f       	adc	r18, r18
    b9de:	33 27       	eor	r19, r19
    b9e0:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    b9e2:	f3 1f       	adc	r31, r19
    b9e4:	df 01       	movw	r26, r30
    b9e6:	aa 0f       	add	r26, r26
    b9e8:	bb 1f       	adc	r27, r27
    b9ea:	aa 0f       	add	r26, r26
    b9ec:	bb 1f       	adc	r27, r27
    b9ee:	aa 0f       	add	r26, r26
    b9f0:	bb 1f       	adc	r27, r27
    b9f2:	a0 5b       	subi	r26, 0xB0	; 176
    b9f4:	bb 4d       	sbci	r27, 0xDB	; 219
    b9f6:	1c 96       	adiw	r26, 0x0c	; 12
    b9f8:	9c 91       	ld	r25, X
    b9fa:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    b9fc:	8b c0       	rjmp	.+278    	; 0xbb14 <__vector_126+0x1c4>
    b9fe:	ee 0f       	add	r30, r30
    ba00:	ff 1f       	adc	r31, r31
    ba02:	ee 0f       	add	r30, r30
    ba04:	ff 1f       	adc	r31, r31
    ba06:	ee 0f       	add	r30, r30
    ba08:	ff 1f       	adc	r31, r31
    ba0a:	e4 5a       	subi	r30, 0xA4	; 164
    ba0c:	fb 4d       	sbci	r31, 0xDB	; 219
    ba0e:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    ba10:	06 93       	lac	Z, r16
    ba12:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    ba14:	7a c0       	rjmp	.+244    	; 0xbb0a <__vector_126+0x1ba>
    ba16:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    ba1a:	84 30       	cpi	r24, 0x04	; 4
    ba1c:	19 f4       	brne	.+6      	; 0xba24 <__vector_126+0xd4>
    ba1e:	0b d9       	rcall	.-3562   	; 0xac36 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    ba20:	c9 d8       	rcall	.-3694   	; 0xabb4 <udd_ctrl_init>
    ba22:	78 c0       	rjmp	.+240    	; 0xbb14 <__vector_126+0x1c4>
    ba24:	00 91 5e 24 	lds	r16, 0x245E	; 0x80245e <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    ba28:	10 91 5f 24 	lds	r17, 0x245F	; 0x80245f <udd_sram+0xf>
    ba2c:	80 91 ef 2d 	lds	r24, 0x2DEF	; 0x802def <udd_g_ctrlreq+0xa>
    ba30:	90 91 f0 2d 	lds	r25, 0x2DF0	; 0x802df0 <udd_g_ctrlreq+0xb>
    ba34:	c0 91 48 24 	lds	r28, 0x2448	; 0x802448 <udd_ctrl_payload_nb_trans>
    ba38:	d0 91 49 24 	lds	r29, 0x2449	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    ba3c:	98 01       	movw	r18, r16
    ba3e:	2c 0f       	add	r18, r28
    ba40:	3d 1f       	adc	r19, r29
    ba42:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    ba44:	93 07       	cpc	r25, r19
    ba46:	18 f4       	brcc	.+6      	; 0xba4e <__vector_126+0xfe>
    ba48:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    ba4a:	0c 1b       	sub	r16, r28
    ba4c:	1d 0b       	sbc	r17, r29
    ba4e:	80 91 ed 2d 	lds	r24, 0x2DED	; 0x802ded <udd_g_ctrlreq+0x8>
    ba52:	90 91 ee 2d 	lds	r25, 0x2DEE	; 0x802dee <udd_g_ctrlreq+0x9>
    ba56:	a8 01       	movw	r20, r16
    ba58:	68 e0       	ldi	r22, 0x08	; 8
    ba5a:	74 e2       	ldi	r23, 0x24	; 36
    ba5c:	8c 0f       	add	r24, r28
    ba5e:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    ba60:	0e 94 c8 8a 	call	0x11590	; 0x11590 <memcpy>
    ba64:	c0 0f       	add	r28, r16
    ba66:	d1 1f       	adc	r29, r17
    ba68:	c0 93 48 24 	sts	0x2448, r28	; 0x802448 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    ba6c:	d0 93 49 24 	sts	0x2449, r29	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    ba70:	00 34       	cpi	r16, 0x40	; 64
    ba72:	11 05       	cpc	r17, r1
    ba74:	69 f4       	brne	.+26     	; 0xba90 <__vector_126+0x140>
    ba76:	80 91 4a 24 	lds	r24, 0x244A	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    ba7a:	90 91 4b 24 	lds	r25, 0x244B	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    ba7e:	8c 0f       	add	r24, r28
    ba80:	9d 1f       	adc	r25, r29
    ba82:	20 91 eb 2d 	lds	r18, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    ba86:	30 91 ec 2d 	lds	r19, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    ba8a:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    ba8c:	93 07       	cpc	r25, r19
    ba8e:	80 f0       	brcs	.+32     	; 0xbab0 <__vector_126+0x160>
    ba90:	e5 ee       	ldi	r30, 0xE5	; 229
    ba92:	fd e2       	ldi	r31, 0x2D	; 45
		if (NULL != udd_g_ctrlreq.over_under_run) {
    ba94:	c2 87       	std	Z+10, r28	; 0x0a
    ba96:	d3 87       	std	Z+11, r29	; 0x0b
    ba98:	06 84       	ldd	r0, Z+14	; 0x0e
    ba9a:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    ba9c:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    ba9e:	30 97       	sbiw	r30, 0x00	; 0
    baa0:	29 f0       	breq	.+10     	; 0xbaac <__vector_126+0x15c>
    baa2:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    baa4:	81 11       	cpse	r24, r1
    baa6:	02 c0       	rjmp	.+4      	; 0xbaac <__vector_126+0x15c>
    baa8:	aa d8       	rcall	.-3756   	; 0xabfe <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    baaa:	34 c0       	rjmp	.+104    	; 0xbb14 <__vector_126+0x1c4>
    baac:	b6 d8       	rcall	.-3732   	; 0xac1a <udd_ctrl_send_zlp_in>
    baae:	32 c0       	rjmp	.+100    	; 0xbb14 <__vector_126+0x1c4>
    bab0:	80 91 ef 2d 	lds	r24, 0x2DEF	; 0x802def <udd_g_ctrlreq+0xa>
    bab4:	90 91 f0 2d 	lds	r25, 0x2DF0	; 0x802df0 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    bab8:	c8 17       	cp	r28, r24
    baba:	d9 07       	cpc	r29, r25
    babc:	f9 f4       	brne	.+62     	; 0xbafc <__vector_126+0x1ac>
    babe:	e0 91 f3 2d 	lds	r30, 0x2DF3	; 0x802df3 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    bac2:	f0 91 f4 2d 	lds	r31, 0x2DF4	; 0x802df4 <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    bac6:	30 97       	sbiw	r30, 0x00	; 0
    bac8:	11 f4       	brne	.+4      	; 0xbace <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    baca:	99 d8       	rcall	.-3790   	; 0xabfe <udd_ctrl_stall_data>
    bacc:	23 c0       	rjmp	.+70     	; 0xbb14 <__vector_126+0x1c4>
    bace:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    bad0:	81 11       	cpse	r24, r1
    bad2:	02 c0       	rjmp	.+4      	; 0xbad8 <__vector_126+0x188>
    bad4:	94 d8       	rcall	.-3800   	; 0xabfe <udd_ctrl_stall_data>
    bad6:	1e c0       	rjmp	.+60     	; 0xbb14 <__vector_126+0x1c4>
    bad8:	20 91 4a 24 	lds	r18, 0x244A	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    badc:	30 91 4b 24 	lds	r19, 0x244B	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
    bae0:	80 91 48 24 	lds	r24, 0x2448	; 0x802448 <udd_ctrl_payload_nb_trans>
    bae4:	90 91 49 24 	lds	r25, 0x2449	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
    bae8:	82 0f       	add	r24, r18
    baea:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    baec:	80 93 4a 24 	sts	0x244A, r24	; 0x80244a <udd_ctrl_prev_payload_nb_trans>
    baf0:	90 93 4b 24 	sts	0x244B, r25	; 0x80244b <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    baf4:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <udd_ctrl_payload_nb_trans>
    baf8:	10 92 49 24 	sts	0x2449, r1	; 0x802449 <udd_ctrl_payload_nb_trans+0x1>
	udd_control_out_ack_tc();
    bafc:	ec e5       	ldi	r30, 0x5C	; 92
    bafe:	f4 e2       	ldi	r31, 0x24	; 36
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    bb00:	02 e0       	ldi	r16, 0x02	; 2
    bb02:	06 93       	lac	Z, r16
		udd_ctrl_in_sent();
    bb04:	00 e2       	ldi	r16, 0x20	; 32
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    bb06:	06 93       	lac	Z, r16
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    bb08:	05 c0       	rjmp	.+10     	; 0xbb14 <__vector_126+0x1c4>
    bb0a:	80 38       	cpi	r24, 0x80	; 128
	}
#endif

udd_interrupt_tc_end:
	return;
}
    bb0c:	11 f4       	brne	.+4      	; 0xbb12 <__vector_126+0x1c2>
    bb0e:	9b d8       	rcall	.-3786   	; 0xac46 <udd_ctrl_in_sent>
    bb10:	01 c0       	rjmp	.+2      	; 0xbb14 <__vector_126+0x1c4>
    bb12:	bb d9       	rcall	.-3210   	; 0xae8a <udd_ep_trans_complet>
    bb14:	ff 91       	pop	r31
    bb16:	ef 91       	pop	r30
    bb18:	df 91       	pop	r29
    bb1a:	cf 91       	pop	r28
    bb1c:	bf 91       	pop	r27
    bb1e:	af 91       	pop	r26
    bb20:	9f 91       	pop	r25
    bb22:	8f 91       	pop	r24
    bb24:	7f 91       	pop	r23
    bb26:	6f 91       	pop	r22
    bb28:	5f 91       	pop	r21
    bb2a:	4f 91       	pop	r20
    bb2c:	3f 91       	pop	r19
    bb2e:	2f 91       	pop	r18
    bb30:	1f 91       	pop	r17
    bb32:	0f 91       	pop	r16
    bb34:	0f 90       	pop	r0
    bb36:	0b be       	out	0x3b, r0	; 59
    bb38:	0f 90       	pop	r0
    bb3a:	0f be       	out	0x3f, r0	; 63
    bb3c:	0f 90       	pop	r0
    bb3e:	1f 90       	pop	r1
    bb40:	18 95       	reti

0000bb42 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    bb42:	cf 92       	push	r12
    bb44:	df 92       	push	r13
    bb46:	ef 92       	push	r14
    bb48:	ff 92       	push	r15
    bb4a:	cf 93       	push	r28
    bb4c:	df 93       	push	r29
    bb4e:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    bb50:	6b 01       	movw	r12, r22
    bb52:	e1 2c       	mov	r14, r1
    bb54:	f1 2c       	mov	r15, r1
    bb56:	60 e8       	ldi	r22, 0x80	; 128
    bb58:	73 ec       	ldi	r23, 0xC3	; 195
    bb5a:	89 ec       	ldi	r24, 0xC9	; 201
    bb5c:	91 e0       	ldi	r25, 0x01	; 1
    bb5e:	a7 01       	movw	r20, r14
    bb60:	96 01       	movw	r18, r12
    bb62:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
    bb66:	ca 01       	movw	r24, r20
    bb68:	b9 01       	movw	r22, r18
    bb6a:	2f ef       	ldi	r18, 0xFF	; 255
    bb6c:	3f ef       	ldi	r19, 0xFF	; 255
    bb6e:	40 e0       	ldi	r20, 0x00	; 0
    bb70:	50 e0       	ldi	r21, 0x00	; 0
    bb72:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
	if (smallest_div < 1) {
    bb76:	21 15       	cp	r18, r1
    bb78:	31 05       	cpc	r19, r1
    bb7a:	29 f4       	brne	.+10     	; 0xbb86 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    bb7c:	81 e0       	ldi	r24, 0x01	; 1
    bb7e:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    bb80:	21 e0       	ldi	r18, 0x01	; 1
    bb82:	30 e0       	ldi	r19, 0x00	; 0
    bb84:	2d c0       	rjmp	.+90     	; 0xbbe0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    bb86:	22 30       	cpi	r18, 0x02	; 2
    bb88:	31 05       	cpc	r19, r1
    bb8a:	28 f4       	brcc	.+10     	; 0xbb96 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    bb8c:	82 e0       	ldi	r24, 0x02	; 2
    bb8e:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    bb90:	22 e0       	ldi	r18, 0x02	; 2
    bb92:	30 e0       	ldi	r19, 0x00	; 0
    bb94:	25 c0       	rjmp	.+74     	; 0xbbe0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    bb96:	24 30       	cpi	r18, 0x04	; 4
    bb98:	31 05       	cpc	r19, r1
    bb9a:	28 f4       	brcc	.+10     	; 0xbba6 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    bb9c:	83 e0       	ldi	r24, 0x03	; 3
    bb9e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    bba0:	24 e0       	ldi	r18, 0x04	; 4
    bba2:	30 e0       	ldi	r19, 0x00	; 0
    bba4:	1d c0       	rjmp	.+58     	; 0xbbe0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    bba6:	28 30       	cpi	r18, 0x08	; 8
    bba8:	31 05       	cpc	r19, r1
    bbaa:	28 f4       	brcc	.+10     	; 0xbbb6 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    bbac:	84 e0       	ldi	r24, 0x04	; 4
    bbae:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    bbb0:	28 e0       	ldi	r18, 0x08	; 8
    bbb2:	30 e0       	ldi	r19, 0x00	; 0
    bbb4:	15 c0       	rjmp	.+42     	; 0xbbe0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    bbb6:	20 34       	cpi	r18, 0x40	; 64
    bbb8:	31 05       	cpc	r19, r1
    bbba:	28 f4       	brcc	.+10     	; 0xbbc6 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    bbbc:	85 e0       	ldi	r24, 0x05	; 5
    bbbe:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    bbc0:	20 e4       	ldi	r18, 0x40	; 64
    bbc2:	30 e0       	ldi	r19, 0x00	; 0
    bbc4:	0d c0       	rjmp	.+26     	; 0xbbe0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    bbc6:	2f 3f       	cpi	r18, 0xFF	; 255
    bbc8:	31 05       	cpc	r19, r1
    bbca:	09 f0       	breq	.+2      	; 0xbbce <pwm_set_frequency+0x8c>
    bbcc:	28 f4       	brcc	.+10     	; 0xbbd8 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    bbce:	86 e0       	ldi	r24, 0x06	; 6
    bbd0:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    bbd2:	20 e0       	ldi	r18, 0x00	; 0
    bbd4:	31 e0       	ldi	r19, 0x01	; 1
    bbd6:	04 c0       	rjmp	.+8      	; 0xbbe0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    bbd8:	87 e0       	ldi	r24, 0x07	; 7
    bbda:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    bbdc:	20 e0       	ldi	r18, 0x00	; 0
    bbde:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    bbe0:	40 e0       	ldi	r20, 0x00	; 0
    bbe2:	50 e0       	ldi	r21, 0x00	; 0
    bbe4:	60 e8       	ldi	r22, 0x80	; 128
    bbe6:	73 ec       	ldi	r23, 0xC3	; 195
    bbe8:	89 ec       	ldi	r24, 0xC9	; 201
    bbea:	91 e0       	ldi	r25, 0x01	; 1
    bbec:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
    bbf0:	ca 01       	movw	r24, r20
    bbf2:	b9 01       	movw	r22, r18
    bbf4:	a7 01       	movw	r20, r14
    bbf6:	96 01       	movw	r18, r12
    bbf8:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
    bbfc:	2d 83       	std	Y+5, r18	; 0x05
    bbfe:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    bc00:	24 36       	cpi	r18, 0x64	; 100
    bc02:	31 05       	cpc	r19, r1
    bc04:	18 f4       	brcc	.+6      	; 0xbc0c <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    bc06:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    bc08:	1d 82       	std	Y+5, r1	; 0x05
    bc0a:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    bc0c:	df 91       	pop	r29
    bc0e:	cf 91       	pop	r28
    bc10:	ff 90       	pop	r15
    bc12:	ef 90       	pop	r14
    bc14:	df 90       	pop	r13
    bc16:	cf 90       	pop	r12
    bc18:	08 95       	ret

0000bc1a <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    bc1a:	0f 93       	push	r16
    bc1c:	1f 93       	push	r17
    bc1e:	cf 93       	push	r28
    bc20:	df 93       	push	r29
    bc22:	ec 01       	movw	r28, r24
    bc24:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    bc26:	86 2f       	mov	r24, r22
    bc28:	90 e0       	ldi	r25, 0x00	; 0
    bc2a:	87 30       	cpi	r24, 0x07	; 7
    bc2c:	91 05       	cpc	r25, r1
    bc2e:	08 f0       	brcs	.+2      	; 0xbc32 <pwm_init+0x18>
    bc30:	8b c0       	rjmp	.+278    	; 0xbd48 <pwm_init+0x12e>
    bc32:	fc 01       	movw	r30, r24
    bc34:	88 27       	eor	r24, r24
    bc36:	eb 5f       	subi	r30, 0xFB	; 251
    bc38:	fe 4f       	sbci	r31, 0xFE	; 254
    bc3a:	8f 4f       	sbci	r24, 0xFF	; 255
    bc3c:	0c 94 b5 87 	jmp	0x10f6a	; 0x10f6a <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    bc40:	80 e0       	ldi	r24, 0x00	; 0
    bc42:	98 e0       	ldi	r25, 0x08	; 8
    bc44:	88 83       	st	Y, r24
    bc46:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    bc48:	e0 e4       	ldi	r30, 0x40	; 64
    bc4a:	f6 e0       	ldi	r31, 0x06	; 6
    bc4c:	30 81       	ld	r19, Z
    bc4e:	81 e0       	ldi	r24, 0x01	; 1
    bc50:	90 e0       	ldi	r25, 0x00	; 0
    bc52:	2f ef       	ldi	r18, 0xFF	; 255
    bc54:	24 0f       	add	r18, r20
    bc56:	02 c0       	rjmp	.+4      	; 0xbc5c <pwm_init+0x42>
    bc58:	88 0f       	add	r24, r24
    bc5a:	99 1f       	adc	r25, r25
    bc5c:	2a 95       	dec	r18
    bc5e:	e2 f7       	brpl	.-8      	; 0xbc58 <pwm_init+0x3e>
    bc60:	83 2b       	or	r24, r19
    bc62:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    bc64:	71 c0       	rjmp	.+226    	; 0xbd48 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    bc66:	80 e4       	ldi	r24, 0x40	; 64
    bc68:	98 e0       	ldi	r25, 0x08	; 8
    bc6a:	88 83       	st	Y, r24
    bc6c:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    bc6e:	e0 e4       	ldi	r30, 0x40	; 64
    bc70:	f6 e0       	ldi	r31, 0x06	; 6
    bc72:	30 81       	ld	r19, Z
    bc74:	81 e0       	ldi	r24, 0x01	; 1
    bc76:	90 e0       	ldi	r25, 0x00	; 0
    bc78:	23 e0       	ldi	r18, 0x03	; 3
    bc7a:	24 0f       	add	r18, r20
    bc7c:	02 c0       	rjmp	.+4      	; 0xbc82 <pwm_init+0x68>
    bc7e:	88 0f       	add	r24, r24
    bc80:	99 1f       	adc	r25, r25
    bc82:	2a 95       	dec	r18
    bc84:	e2 f7       	brpl	.-8      	; 0xbc7e <pwm_init+0x64>
    bc86:	83 2b       	or	r24, r19
    bc88:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    bc8a:	5e c0       	rjmp	.+188    	; 0xbd48 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    bc8c:	80 e0       	ldi	r24, 0x00	; 0
    bc8e:	99 e0       	ldi	r25, 0x09	; 9
    bc90:	88 83       	st	Y, r24
    bc92:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    bc94:	e0 e6       	ldi	r30, 0x60	; 96
    bc96:	f6 e0       	ldi	r31, 0x06	; 6
    bc98:	30 81       	ld	r19, Z
    bc9a:	81 e0       	ldi	r24, 0x01	; 1
    bc9c:	90 e0       	ldi	r25, 0x00	; 0
    bc9e:	2f ef       	ldi	r18, 0xFF	; 255
    bca0:	24 0f       	add	r18, r20
    bca2:	02 c0       	rjmp	.+4      	; 0xbca8 <pwm_init+0x8e>
    bca4:	88 0f       	add	r24, r24
    bca6:	99 1f       	adc	r25, r25
    bca8:	2a 95       	dec	r18
    bcaa:	e2 f7       	brpl	.-8      	; 0xbca4 <pwm_init+0x8a>
    bcac:	83 2b       	or	r24, r19
    bcae:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    bcb0:	4b c0       	rjmp	.+150    	; 0xbd48 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    bcb2:	80 e4       	ldi	r24, 0x40	; 64
    bcb4:	99 e0       	ldi	r25, 0x09	; 9
    bcb6:	88 83       	st	Y, r24
    bcb8:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    bcba:	e0 e6       	ldi	r30, 0x60	; 96
    bcbc:	f6 e0       	ldi	r31, 0x06	; 6
    bcbe:	30 81       	ld	r19, Z
    bcc0:	81 e0       	ldi	r24, 0x01	; 1
    bcc2:	90 e0       	ldi	r25, 0x00	; 0
    bcc4:	23 e0       	ldi	r18, 0x03	; 3
    bcc6:	24 0f       	add	r18, r20
    bcc8:	02 c0       	rjmp	.+4      	; 0xbcce <pwm_init+0xb4>
    bcca:	88 0f       	add	r24, r24
    bccc:	99 1f       	adc	r25, r25
    bcce:	2a 95       	dec	r18
    bcd0:	e2 f7       	brpl	.-8      	; 0xbcca <pwm_init+0xb0>
    bcd2:	83 2b       	or	r24, r19
    bcd4:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    bcd6:	38 c0       	rjmp	.+112    	; 0xbd48 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    bcd8:	80 e0       	ldi	r24, 0x00	; 0
    bcda:	9a e0       	ldi	r25, 0x0A	; 10
    bcdc:	88 83       	st	Y, r24
    bcde:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    bce0:	e0 e8       	ldi	r30, 0x80	; 128
    bce2:	f6 e0       	ldi	r31, 0x06	; 6
    bce4:	30 81       	ld	r19, Z
    bce6:	81 e0       	ldi	r24, 0x01	; 1
    bce8:	90 e0       	ldi	r25, 0x00	; 0
    bcea:	2f ef       	ldi	r18, 0xFF	; 255
    bcec:	24 0f       	add	r18, r20
    bcee:	02 c0       	rjmp	.+4      	; 0xbcf4 <pwm_init+0xda>
    bcf0:	88 0f       	add	r24, r24
    bcf2:	99 1f       	adc	r25, r25
    bcf4:	2a 95       	dec	r18
    bcf6:	e2 f7       	brpl	.-8      	; 0xbcf0 <pwm_init+0xd6>
    bcf8:	83 2b       	or	r24, r19
    bcfa:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    bcfc:	25 c0       	rjmp	.+74     	; 0xbd48 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    bcfe:	80 e4       	ldi	r24, 0x40	; 64
    bd00:	9a e0       	ldi	r25, 0x0A	; 10
    bd02:	88 83       	st	Y, r24
    bd04:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    bd06:	e0 e8       	ldi	r30, 0x80	; 128
    bd08:	f6 e0       	ldi	r31, 0x06	; 6
    bd0a:	30 81       	ld	r19, Z
    bd0c:	81 e0       	ldi	r24, 0x01	; 1
    bd0e:	90 e0       	ldi	r25, 0x00	; 0
    bd10:	23 e0       	ldi	r18, 0x03	; 3
    bd12:	24 0f       	add	r18, r20
    bd14:	02 c0       	rjmp	.+4      	; 0xbd1a <pwm_init+0x100>
    bd16:	88 0f       	add	r24, r24
    bd18:	99 1f       	adc	r25, r25
    bd1a:	2a 95       	dec	r18
    bd1c:	e2 f7       	brpl	.-8      	; 0xbd16 <pwm_init+0xfc>
    bd1e:	83 2b       	or	r24, r19
    bd20:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    bd22:	12 c0       	rjmp	.+36     	; 0xbd48 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    bd24:	80 e0       	ldi	r24, 0x00	; 0
    bd26:	9b e0       	ldi	r25, 0x0B	; 11
    bd28:	88 83       	st	Y, r24
    bd2a:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    bd2c:	e0 ea       	ldi	r30, 0xA0	; 160
    bd2e:	f6 e0       	ldi	r31, 0x06	; 6
    bd30:	30 81       	ld	r19, Z
    bd32:	81 e0       	ldi	r24, 0x01	; 1
    bd34:	90 e0       	ldi	r25, 0x00	; 0
    bd36:	2f ef       	ldi	r18, 0xFF	; 255
    bd38:	24 0f       	add	r18, r20
    bd3a:	02 c0       	rjmp	.+4      	; 0xbd40 <pwm_init+0x126>
    bd3c:	88 0f       	add	r24, r24
    bd3e:	99 1f       	adc	r25, r25
    bd40:	2a 95       	dec	r18
    bd42:	e2 f7       	brpl	.-8      	; 0xbd3c <pwm_init+0x122>
    bd44:	83 2b       	or	r24, r19
    bd46:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    bd48:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    bd4a:	42 30       	cpi	r20, 0x02	; 2
    bd4c:	61 f0       	breq	.+24     	; 0xbd66 <pwm_init+0x14c>
    bd4e:	18 f4       	brcc	.+6      	; 0xbd56 <pwm_init+0x13c>
    bd50:	41 30       	cpi	r20, 0x01	; 1
    bd52:	31 f0       	breq	.+12     	; 0xbd60 <pwm_init+0x146>
    bd54:	10 c0       	rjmp	.+32     	; 0xbd76 <pwm_init+0x15c>
    bd56:	43 30       	cpi	r20, 0x03	; 3
    bd58:	49 f0       	breq	.+18     	; 0xbd6c <pwm_init+0x152>
    bd5a:	44 30       	cpi	r20, 0x04	; 4
    bd5c:	51 f0       	breq	.+20     	; 0xbd72 <pwm_init+0x158>
    bd5e:	0b c0       	rjmp	.+22     	; 0xbd76 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    bd60:	80 e1       	ldi	r24, 0x10	; 16
    bd62:	8b 83       	std	Y+3, r24	; 0x03
		break;
    bd64:	08 c0       	rjmp	.+16     	; 0xbd76 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    bd66:	80 e2       	ldi	r24, 0x20	; 32
    bd68:	8b 83       	std	Y+3, r24	; 0x03
		break;
    bd6a:	05 c0       	rjmp	.+10     	; 0xbd76 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    bd6c:	80 e4       	ldi	r24, 0x40	; 64
    bd6e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    bd70:	02 c0       	rjmp	.+4      	; 0xbd76 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    bd72:	80 e8       	ldi	r24, 0x80	; 128
    bd74:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    bd76:	88 81       	ld	r24, Y
    bd78:	99 81       	ldd	r25, Y+1	; 0x01
    bd7a:	0e 94 87 53 	call	0xa70e	; 0xa70e <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    bd7e:	e8 81       	ld	r30, Y
    bd80:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    bd82:	81 81       	ldd	r24, Z+1	; 0x01
    bd84:	88 7f       	andi	r24, 0xF8	; 248
    bd86:	83 60       	ori	r24, 0x03	; 3
    bd88:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    bd8a:	1d 82       	std	Y+5, r1	; 0x05
    bd8c:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    bd8e:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    bd90:	e8 81       	ld	r30, Y
    bd92:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    bd94:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    bd96:	80 7f       	andi	r24, 0xF0	; 240
    bd98:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    bd9a:	b8 01       	movw	r22, r16
    bd9c:	ce 01       	movw	r24, r28
    bd9e:	d1 de       	rcall	.-606    	; 0xbb42 <pwm_set_frequency>
}
    bda0:	df 91       	pop	r29
    bda2:	cf 91       	pop	r28
    bda4:	1f 91       	pop	r17
    bda6:	0f 91       	pop	r16
    bda8:	08 95       	ret

0000bdaa <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    bdaa:	cf 93       	push	r28
    bdac:	df 93       	push	r29
    bdae:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    bdb0:	2d 81       	ldd	r18, Y+5	; 0x05
    bdb2:	3e 81       	ldd	r19, Y+6	; 0x06
    bdb4:	a6 2f       	mov	r26, r22
    bdb6:	b0 e0       	ldi	r27, 0x00	; 0
    bdb8:	0e 94 c3 87 	call	0x10f86	; 0x10f86 <__umulhisi3>
    bdbc:	24 e6       	ldi	r18, 0x64	; 100
    bdbe:	30 e0       	ldi	r19, 0x00	; 0
    bdc0:	40 e0       	ldi	r20, 0x00	; 0
    bdc2:	50 e0       	ldi	r21, 0x00	; 0
    bdc4:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
    bdc8:	8a 81       	ldd	r24, Y+2	; 0x02
    bdca:	e8 81       	ld	r30, Y
    bdcc:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    bdce:	e6 fd       	sbrc	r30, 6
    bdd0:	17 c0       	rjmp	.+46     	; 0xbe00 <pwm_start+0x56>
		switch (channel_index) {
    bdd2:	82 30       	cpi	r24, 0x02	; 2
    bdd4:	61 f0       	breq	.+24     	; 0xbdee <pwm_start+0x44>
    bdd6:	18 f4       	brcc	.+6      	; 0xbdde <pwm_start+0x34>
    bdd8:	81 30       	cpi	r24, 0x01	; 1
    bdda:	31 f0       	breq	.+12     	; 0xbde8 <pwm_start+0x3e>
    bddc:	1b c0       	rjmp	.+54     	; 0xbe14 <pwm_start+0x6a>
    bdde:	83 30       	cpi	r24, 0x03	; 3
    bde0:	49 f0       	breq	.+18     	; 0xbdf4 <pwm_start+0x4a>
    bde2:	84 30       	cpi	r24, 0x04	; 4
    bde4:	51 f0       	breq	.+20     	; 0xbdfa <pwm_start+0x50>
    bde6:	16 c0       	rjmp	.+44     	; 0xbe14 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    bde8:	20 af       	std	Z+56, r18	; 0x38
    bdea:	31 af       	std	Z+57, r19	; 0x39
    bdec:	13 c0       	rjmp	.+38     	; 0xbe14 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    bdee:	22 af       	std	Z+58, r18	; 0x3a
    bdf0:	33 af       	std	Z+59, r19	; 0x3b
    bdf2:	10 c0       	rjmp	.+32     	; 0xbe14 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    bdf4:	24 af       	std	Z+60, r18	; 0x3c
    bdf6:	35 af       	std	Z+61, r19	; 0x3d
    bdf8:	0d c0       	rjmp	.+26     	; 0xbe14 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    bdfa:	26 af       	std	Z+62, r18	; 0x3e
    bdfc:	37 af       	std	Z+63, r19	; 0x3f
    bdfe:	0a c0       	rjmp	.+20     	; 0xbe14 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    be00:	81 30       	cpi	r24, 0x01	; 1
    be02:	19 f0       	breq	.+6      	; 0xbe0a <pwm_start+0x60>
    be04:	82 30       	cpi	r24, 0x02	; 2
    be06:	21 f0       	breq	.+8      	; 0xbe10 <pwm_start+0x66>
    be08:	05 c0       	rjmp	.+10     	; 0xbe14 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    be0a:	20 af       	std	Z+56, r18	; 0x38
    be0c:	31 af       	std	Z+57, r19	; 0x39
    be0e:	02 c0       	rjmp	.+4      	; 0xbe14 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    be10:	22 af       	std	Z+58, r18	; 0x3a
    be12:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    be14:	8d 81       	ldd	r24, Y+5	; 0x05
    be16:	9e 81       	ldd	r25, Y+6	; 0x06
    be18:	e8 81       	ld	r30, Y
    be1a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    be1c:	86 a3       	std	Z+38, r24	; 0x26
    be1e:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    be20:	8b 81       	ldd	r24, Y+3	; 0x03
    be22:	e8 81       	ld	r30, Y
    be24:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    be26:	e6 fd       	sbrc	r30, 6
    be28:	04 c0       	rjmp	.+8      	; 0xbe32 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    be2a:	91 81       	ldd	r25, Z+1	; 0x01
    be2c:	89 2b       	or	r24, r25
    be2e:	81 83       	std	Z+1, r24	; 0x01
    be30:	04 c0       	rjmp	.+8      	; 0xbe3a <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    be32:	91 81       	ldd	r25, Z+1	; 0x01
    be34:	80 73       	andi	r24, 0x30	; 48
    be36:	89 2b       	or	r24, r25
    be38:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    be3a:	e8 81       	ld	r30, Y
    be3c:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    be3e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    be40:	80 7f       	andi	r24, 0xF0	; 240
    be42:	9c 81       	ldd	r25, Y+4	; 0x04
    be44:	89 2b       	or	r24, r25
    be46:	80 83       	st	Z, r24
}
    be48:	df 91       	pop	r29
    be4a:	cf 91       	pop	r28
    be4c:	08 95       	ret

0000be4e <yield_ms_cb>:
void halt(void)
{
	/* MAIN Loop Shutdown */
	/* atomic */
	{
		g_workmode = WORKMODE_END;
    be4e:	10 92 5c 26 	sts	0x265C, r1	; 0x80265c <g_sched_yield>
    be52:	08 95       	ret

0000be54 <isr_tcc1_ovfl>:
    be54:	20 91 91 28 	lds	r18, 0x2891	; 0x802891 <g_milliseconds_cnt64>
    be58:	30 91 92 28 	lds	r19, 0x2892	; 0x802892 <g_milliseconds_cnt64+0x1>
    be5c:	40 91 93 28 	lds	r20, 0x2893	; 0x802893 <g_milliseconds_cnt64+0x2>
    be60:	50 91 94 28 	lds	r21, 0x2894	; 0x802894 <g_milliseconds_cnt64+0x3>
    be64:	60 91 95 28 	lds	r22, 0x2895	; 0x802895 <g_milliseconds_cnt64+0x4>
    be68:	70 91 96 28 	lds	r23, 0x2896	; 0x802896 <g_milliseconds_cnt64+0x5>
    be6c:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <g_milliseconds_cnt64+0x6>
    be70:	90 91 98 28 	lds	r25, 0x2898	; 0x802898 <g_milliseconds_cnt64+0x7>
    be74:	a1 e0       	ldi	r26, 0x01	; 1
    be76:	0e 94 3d 89 	call	0x1127a	; 0x1127a <__adddi3_s8>
    be7a:	20 93 91 28 	sts	0x2891, r18	; 0x802891 <g_milliseconds_cnt64>
    be7e:	30 93 92 28 	sts	0x2892, r19	; 0x802892 <g_milliseconds_cnt64+0x1>
    be82:	40 93 93 28 	sts	0x2893, r20	; 0x802893 <g_milliseconds_cnt64+0x2>
    be86:	50 93 94 28 	sts	0x2894, r21	; 0x802894 <g_milliseconds_cnt64+0x3>
    be8a:	60 93 95 28 	sts	0x2895, r22	; 0x802895 <g_milliseconds_cnt64+0x4>
    be8e:	70 93 96 28 	sts	0x2896, r23	; 0x802896 <g_milliseconds_cnt64+0x5>
    be92:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <g_milliseconds_cnt64+0x6>
    be96:	90 93 98 28 	sts	0x2898, r25	; 0x802898 <g_milliseconds_cnt64+0x7>
    be9a:	08 95       	ret

0000be9c <isr_adc_a>:
    be9c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    bea0:	4e 5b       	subi	r20, 0xBE	; 190
    bea2:	51 09       	sbc	r21, r1
    bea4:	60 ff       	sbrs	r22, 0
    bea6:	d3 c0       	rjmp	.+422    	; 0xc04e <isr_adc_a+0x1b2>
    bea8:	82 95       	swap	r24
    beaa:	8f 70       	andi	r24, 0x0F	; 15
    beac:	81 30       	cpi	r24, 0x01	; 1
    beae:	31 f0       	breq	.+12     	; 0xbebc <isr_adc_a+0x20>
    beb0:	08 f4       	brcc	.+2      	; 0xbeb4 <isr_adc_a+0x18>
    beb2:	8a c0       	rjmp	.+276    	; 0xbfc8 <isr_adc_a+0x12c>
    beb4:	82 30       	cpi	r24, 0x02	; 2
    beb6:	09 f4       	brne	.+2      	; 0xbeba <isr_adc_a+0x1e>
    beb8:	44 c0       	rjmp	.+136    	; 0xbf42 <isr_adc_a+0xa6>
    beba:	08 95       	ret
    bebc:	80 91 ba 26 	lds	r24, 0x26BA	; 0x8026ba <g_adc_vctcxo_sum>
    bec0:	90 91 bb 26 	lds	r25, 0x26BB	; 0x8026bb <g_adc_vctcxo_sum+0x1>
    bec4:	a0 91 bc 26 	lds	r26, 0x26BC	; 0x8026bc <g_adc_vctcxo_sum+0x2>
    bec8:	b0 91 bd 26 	lds	r27, 0x26BD	; 0x8026bd <g_adc_vctcxo_sum+0x3>
    becc:	05 2e       	mov	r0, r21
    bece:	00 0c       	add	r0, r0
    bed0:	66 0b       	sbc	r22, r22
    bed2:	77 0b       	sbc	r23, r23
    bed4:	48 0f       	add	r20, r24
    bed6:	59 1f       	adc	r21, r25
    bed8:	6a 1f       	adc	r22, r26
    beda:	7b 1f       	adc	r23, r27
    bedc:	40 93 ba 26 	sts	0x26BA, r20	; 0x8026ba <g_adc_vctcxo_sum>
    bee0:	50 93 bb 26 	sts	0x26BB, r21	; 0x8026bb <g_adc_vctcxo_sum+0x1>
    bee4:	60 93 bc 26 	sts	0x26BC, r22	; 0x8026bc <g_adc_vctcxo_sum+0x2>
    bee8:	70 93 bd 26 	sts	0x26BD, r23	; 0x8026bd <g_adc_vctcxo_sum+0x3>
    beec:	80 91 b8 26 	lds	r24, 0x26B8	; 0x8026b8 <g_adc_vctcxo_cnt>
    bef0:	90 91 b9 26 	lds	r25, 0x26B9	; 0x8026b9 <g_adc_vctcxo_cnt+0x1>
    bef4:	01 96       	adiw	r24, 0x01	; 1
    bef6:	80 93 b8 26 	sts	0x26B8, r24	; 0x8026b8 <g_adc_vctcxo_cnt>
    befa:	90 93 b9 26 	sts	0x26B9, r25	; 0x8026b9 <g_adc_vctcxo_cnt+0x1>
    befe:	8f 3f       	cpi	r24, 0xFF	; 255
    bf00:	91 05       	cpc	r25, r1
    bf02:	09 f0       	breq	.+2      	; 0xbf06 <isr_adc_a+0x6a>
    bf04:	08 f4       	brcc	.+2      	; 0xbf08 <isr_adc_a+0x6c>
    bf06:	70 c1       	rjmp	.+736    	; 0xc1e8 <isr_adc_a+0x34c>
    bf08:	80 91 ba 26 	lds	r24, 0x26BA	; 0x8026ba <g_adc_vctcxo_sum>
    bf0c:	90 91 bb 26 	lds	r25, 0x26BB	; 0x8026bb <g_adc_vctcxo_sum+0x1>
    bf10:	a0 91 bc 26 	lds	r26, 0x26BC	; 0x8026bc <g_adc_vctcxo_sum+0x2>
    bf14:	b0 91 bd 26 	lds	r27, 0x26BD	; 0x8026bd <g_adc_vctcxo_sum+0x3>
    bf18:	80 93 be 26 	sts	0x26BE, r24	; 0x8026be <g_adc_vctcxo_cur>
    bf1c:	90 93 bf 26 	sts	0x26BF, r25	; 0x8026bf <g_adc_vctcxo_cur+0x1>
    bf20:	a0 93 c0 26 	sts	0x26C0, r26	; 0x8026c0 <g_adc_vctcxo_cur+0x2>
    bf24:	b0 93 c1 26 	sts	0x26C1, r27	; 0x8026c1 <g_adc_vctcxo_cur+0x3>
    bf28:	10 92 b8 26 	sts	0x26B8, r1	; 0x8026b8 <g_adc_vctcxo_cnt>
    bf2c:	10 92 b9 26 	sts	0x26B9, r1	; 0x8026b9 <g_adc_vctcxo_cnt+0x1>
    bf30:	10 92 ba 26 	sts	0x26BA, r1	; 0x8026ba <g_adc_vctcxo_sum>
    bf34:	10 92 bb 26 	sts	0x26BB, r1	; 0x8026bb <g_adc_vctcxo_sum+0x1>
    bf38:	10 92 bc 26 	sts	0x26BC, r1	; 0x8026bc <g_adc_vctcxo_sum+0x2>
    bf3c:	10 92 bd 26 	sts	0x26BD, r1	; 0x8026bd <g_adc_vctcxo_sum+0x3>
    bf40:	08 95       	ret
    bf42:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <g_adc_5v0_sum>
    bf46:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <g_adc_5v0_sum+0x1>
    bf4a:	a0 91 b2 26 	lds	r26, 0x26B2	; 0x8026b2 <g_adc_5v0_sum+0x2>
    bf4e:	b0 91 b3 26 	lds	r27, 0x26B3	; 0x8026b3 <g_adc_5v0_sum+0x3>
    bf52:	05 2e       	mov	r0, r21
    bf54:	00 0c       	add	r0, r0
    bf56:	66 0b       	sbc	r22, r22
    bf58:	77 0b       	sbc	r23, r23
    bf5a:	48 0f       	add	r20, r24
    bf5c:	59 1f       	adc	r21, r25
    bf5e:	6a 1f       	adc	r22, r26
    bf60:	7b 1f       	adc	r23, r27
    bf62:	40 93 b0 26 	sts	0x26B0, r20	; 0x8026b0 <g_adc_5v0_sum>
    bf66:	50 93 b1 26 	sts	0x26B1, r21	; 0x8026b1 <g_adc_5v0_sum+0x1>
    bf6a:	60 93 b2 26 	sts	0x26B2, r22	; 0x8026b2 <g_adc_5v0_sum+0x2>
    bf6e:	70 93 b3 26 	sts	0x26B3, r23	; 0x8026b3 <g_adc_5v0_sum+0x3>
    bf72:	80 91 ae 26 	lds	r24, 0x26AE	; 0x8026ae <g_adc_5v0_cnt>
    bf76:	90 91 af 26 	lds	r25, 0x26AF	; 0x8026af <g_adc_5v0_cnt+0x1>
    bf7a:	01 96       	adiw	r24, 0x01	; 1
    bf7c:	80 93 ae 26 	sts	0x26AE, r24	; 0x8026ae <g_adc_5v0_cnt>
    bf80:	90 93 af 26 	sts	0x26AF, r25	; 0x8026af <g_adc_5v0_cnt+0x1>
    bf84:	8f 3f       	cpi	r24, 0xFF	; 255
    bf86:	91 05       	cpc	r25, r1
    bf88:	09 f0       	breq	.+2      	; 0xbf8c <isr_adc_a+0xf0>
    bf8a:	08 f4       	brcc	.+2      	; 0xbf8e <isr_adc_a+0xf2>
    bf8c:	2d c1       	rjmp	.+602    	; 0xc1e8 <isr_adc_a+0x34c>
    bf8e:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <g_adc_5v0_sum>
    bf92:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <g_adc_5v0_sum+0x1>
    bf96:	a0 91 b2 26 	lds	r26, 0x26B2	; 0x8026b2 <g_adc_5v0_sum+0x2>
    bf9a:	b0 91 b3 26 	lds	r27, 0x26B3	; 0x8026b3 <g_adc_5v0_sum+0x3>
    bf9e:	80 93 b4 26 	sts	0x26B4, r24	; 0x8026b4 <g_adc_5v0_cur>
    bfa2:	90 93 b5 26 	sts	0x26B5, r25	; 0x8026b5 <g_adc_5v0_cur+0x1>
    bfa6:	a0 93 b6 26 	sts	0x26B6, r26	; 0x8026b6 <g_adc_5v0_cur+0x2>
    bfaa:	b0 93 b7 26 	sts	0x26B7, r27	; 0x8026b7 <g_adc_5v0_cur+0x3>
    bfae:	10 92 ae 26 	sts	0x26AE, r1	; 0x8026ae <g_adc_5v0_cnt>
    bfb2:	10 92 af 26 	sts	0x26AF, r1	; 0x8026af <g_adc_5v0_cnt+0x1>
    bfb6:	10 92 b0 26 	sts	0x26B0, r1	; 0x8026b0 <g_adc_5v0_sum>
    bfba:	10 92 b1 26 	sts	0x26B1, r1	; 0x8026b1 <g_adc_5v0_sum+0x1>
    bfbe:	10 92 b2 26 	sts	0x26B2, r1	; 0x8026b2 <g_adc_5v0_sum+0x2>
    bfc2:	10 92 b3 26 	sts	0x26B3, r1	; 0x8026b3 <g_adc_5v0_sum+0x3>
    bfc6:	08 95       	ret
    bfc8:	80 91 a6 26 	lds	r24, 0x26A6	; 0x8026a6 <g_adc_vbat_sum>
    bfcc:	90 91 a7 26 	lds	r25, 0x26A7	; 0x8026a7 <g_adc_vbat_sum+0x1>
    bfd0:	a0 91 a8 26 	lds	r26, 0x26A8	; 0x8026a8 <g_adc_vbat_sum+0x2>
    bfd4:	b0 91 a9 26 	lds	r27, 0x26A9	; 0x8026a9 <g_adc_vbat_sum+0x3>
    bfd8:	05 2e       	mov	r0, r21
    bfda:	00 0c       	add	r0, r0
    bfdc:	66 0b       	sbc	r22, r22
    bfde:	77 0b       	sbc	r23, r23
    bfe0:	48 0f       	add	r20, r24
    bfe2:	59 1f       	adc	r21, r25
    bfe4:	6a 1f       	adc	r22, r26
    bfe6:	7b 1f       	adc	r23, r27
    bfe8:	40 93 a6 26 	sts	0x26A6, r20	; 0x8026a6 <g_adc_vbat_sum>
    bfec:	50 93 a7 26 	sts	0x26A7, r21	; 0x8026a7 <g_adc_vbat_sum+0x1>
    bff0:	60 93 a8 26 	sts	0x26A8, r22	; 0x8026a8 <g_adc_vbat_sum+0x2>
    bff4:	70 93 a9 26 	sts	0x26A9, r23	; 0x8026a9 <g_adc_vbat_sum+0x3>
    bff8:	80 91 a4 26 	lds	r24, 0x26A4	; 0x8026a4 <g_adc_vbat_cnt>
    bffc:	90 91 a5 26 	lds	r25, 0x26A5	; 0x8026a5 <g_adc_vbat_cnt+0x1>
    c000:	01 96       	adiw	r24, 0x01	; 1
    c002:	80 93 a4 26 	sts	0x26A4, r24	; 0x8026a4 <g_adc_vbat_cnt>
    c006:	90 93 a5 26 	sts	0x26A5, r25	; 0x8026a5 <g_adc_vbat_cnt+0x1>
    c00a:	8f 3f       	cpi	r24, 0xFF	; 255
    c00c:	91 05       	cpc	r25, r1
    c00e:	09 f0       	breq	.+2      	; 0xc012 <isr_adc_a+0x176>
    c010:	08 f4       	brcc	.+2      	; 0xc014 <isr_adc_a+0x178>
    c012:	ea c0       	rjmp	.+468    	; 0xc1e8 <isr_adc_a+0x34c>
    c014:	80 91 a6 26 	lds	r24, 0x26A6	; 0x8026a6 <g_adc_vbat_sum>
    c018:	90 91 a7 26 	lds	r25, 0x26A7	; 0x8026a7 <g_adc_vbat_sum+0x1>
    c01c:	a0 91 a8 26 	lds	r26, 0x26A8	; 0x8026a8 <g_adc_vbat_sum+0x2>
    c020:	b0 91 a9 26 	lds	r27, 0x26A9	; 0x8026a9 <g_adc_vbat_sum+0x3>
    c024:	80 93 aa 26 	sts	0x26AA, r24	; 0x8026aa <g_adc_vbat_cur>
    c028:	90 93 ab 26 	sts	0x26AB, r25	; 0x8026ab <g_adc_vbat_cur+0x1>
    c02c:	a0 93 ac 26 	sts	0x26AC, r26	; 0x8026ac <g_adc_vbat_cur+0x2>
    c030:	b0 93 ad 26 	sts	0x26AD, r27	; 0x8026ad <g_adc_vbat_cur+0x3>
    c034:	10 92 a4 26 	sts	0x26A4, r1	; 0x8026a4 <g_adc_vbat_cnt>
    c038:	10 92 a5 26 	sts	0x26A5, r1	; 0x8026a5 <g_adc_vbat_cnt+0x1>
    c03c:	10 92 a6 26 	sts	0x26A6, r1	; 0x8026a6 <g_adc_vbat_sum>
    c040:	10 92 a7 26 	sts	0x26A7, r1	; 0x8026a7 <g_adc_vbat_sum+0x1>
    c044:	10 92 a8 26 	sts	0x26A8, r1	; 0x8026a8 <g_adc_vbat_sum+0x2>
    c048:	10 92 a9 26 	sts	0x26A9, r1	; 0x8026a9 <g_adc_vbat_sum+0x3>
    c04c:	08 95       	ret
    c04e:	61 ff       	sbrs	r22, 1
    c050:	43 c0       	rjmp	.+134    	; 0xc0d8 <isr_adc_a+0x23c>
    c052:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <g_adc_io_adc4_sum>
    c056:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <g_adc_io_adc4_sum+0x1>
    c05a:	a0 91 9e 26 	lds	r26, 0x269E	; 0x80269e <g_adc_io_adc4_sum+0x2>
    c05e:	b0 91 9f 26 	lds	r27, 0x269F	; 0x80269f <g_adc_io_adc4_sum+0x3>
    c062:	05 2e       	mov	r0, r21
    c064:	00 0c       	add	r0, r0
    c066:	66 0b       	sbc	r22, r22
    c068:	77 0b       	sbc	r23, r23
    c06a:	48 0f       	add	r20, r24
    c06c:	59 1f       	adc	r21, r25
    c06e:	6a 1f       	adc	r22, r26
    c070:	7b 1f       	adc	r23, r27
    c072:	40 93 9c 26 	sts	0x269C, r20	; 0x80269c <g_adc_io_adc4_sum>
    c076:	50 93 9d 26 	sts	0x269D, r21	; 0x80269d <g_adc_io_adc4_sum+0x1>
    c07a:	60 93 9e 26 	sts	0x269E, r22	; 0x80269e <g_adc_io_adc4_sum+0x2>
    c07e:	70 93 9f 26 	sts	0x269F, r23	; 0x80269f <g_adc_io_adc4_sum+0x3>
    c082:	80 91 9a 26 	lds	r24, 0x269A	; 0x80269a <g_adc_io_adc4_cnt>
    c086:	90 91 9b 26 	lds	r25, 0x269B	; 0x80269b <g_adc_io_adc4_cnt+0x1>
    c08a:	01 96       	adiw	r24, 0x01	; 1
    c08c:	80 93 9a 26 	sts	0x269A, r24	; 0x80269a <g_adc_io_adc4_cnt>
    c090:	90 93 9b 26 	sts	0x269B, r25	; 0x80269b <g_adc_io_adc4_cnt+0x1>
    c094:	8f 3f       	cpi	r24, 0xFF	; 255
    c096:	91 05       	cpc	r25, r1
    c098:	09 f0       	breq	.+2      	; 0xc09c <isr_adc_a+0x200>
    c09a:	08 f4       	brcc	.+2      	; 0xc09e <isr_adc_a+0x202>
    c09c:	a5 c0       	rjmp	.+330    	; 0xc1e8 <isr_adc_a+0x34c>
    c09e:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <g_adc_io_adc4_sum>
    c0a2:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <g_adc_io_adc4_sum+0x1>
    c0a6:	a0 91 9e 26 	lds	r26, 0x269E	; 0x80269e <g_adc_io_adc4_sum+0x2>
    c0aa:	b0 91 9f 26 	lds	r27, 0x269F	; 0x80269f <g_adc_io_adc4_sum+0x3>
    c0ae:	80 93 a0 26 	sts	0x26A0, r24	; 0x8026a0 <g_adc_io_adc4_cur>
    c0b2:	90 93 a1 26 	sts	0x26A1, r25	; 0x8026a1 <g_adc_io_adc4_cur+0x1>
    c0b6:	a0 93 a2 26 	sts	0x26A2, r26	; 0x8026a2 <g_adc_io_adc4_cur+0x2>
    c0ba:	b0 93 a3 26 	sts	0x26A3, r27	; 0x8026a3 <g_adc_io_adc4_cur+0x3>
    c0be:	10 92 9a 26 	sts	0x269A, r1	; 0x80269a <g_adc_io_adc4_cnt>
    c0c2:	10 92 9b 26 	sts	0x269B, r1	; 0x80269b <g_adc_io_adc4_cnt+0x1>
    c0c6:	10 92 9c 26 	sts	0x269C, r1	; 0x80269c <g_adc_io_adc4_sum>
    c0ca:	10 92 9d 26 	sts	0x269D, r1	; 0x80269d <g_adc_io_adc4_sum+0x1>
    c0ce:	10 92 9e 26 	sts	0x269E, r1	; 0x80269e <g_adc_io_adc4_sum+0x2>
    c0d2:	10 92 9f 26 	sts	0x269F, r1	; 0x80269f <g_adc_io_adc4_sum+0x3>
    c0d6:	08 95       	ret
    c0d8:	62 ff       	sbrs	r22, 2
    c0da:	43 c0       	rjmp	.+134    	; 0xc162 <isr_adc_a+0x2c6>
    c0dc:	80 91 92 26 	lds	r24, 0x2692	; 0x802692 <g_adc_io_adc5_sum>
    c0e0:	90 91 93 26 	lds	r25, 0x2693	; 0x802693 <g_adc_io_adc5_sum+0x1>
    c0e4:	a0 91 94 26 	lds	r26, 0x2694	; 0x802694 <g_adc_io_adc5_sum+0x2>
    c0e8:	b0 91 95 26 	lds	r27, 0x2695	; 0x802695 <g_adc_io_adc5_sum+0x3>
    c0ec:	05 2e       	mov	r0, r21
    c0ee:	00 0c       	add	r0, r0
    c0f0:	66 0b       	sbc	r22, r22
    c0f2:	77 0b       	sbc	r23, r23
    c0f4:	48 0f       	add	r20, r24
    c0f6:	59 1f       	adc	r21, r25
    c0f8:	6a 1f       	adc	r22, r26
    c0fa:	7b 1f       	adc	r23, r27
    c0fc:	40 93 92 26 	sts	0x2692, r20	; 0x802692 <g_adc_io_adc5_sum>
    c100:	50 93 93 26 	sts	0x2693, r21	; 0x802693 <g_adc_io_adc5_sum+0x1>
    c104:	60 93 94 26 	sts	0x2694, r22	; 0x802694 <g_adc_io_adc5_sum+0x2>
    c108:	70 93 95 26 	sts	0x2695, r23	; 0x802695 <g_adc_io_adc5_sum+0x3>
    c10c:	80 91 90 26 	lds	r24, 0x2690	; 0x802690 <g_adc_io_adc5_cnt>
    c110:	90 91 91 26 	lds	r25, 0x2691	; 0x802691 <g_adc_io_adc5_cnt+0x1>
    c114:	01 96       	adiw	r24, 0x01	; 1
    c116:	80 93 90 26 	sts	0x2690, r24	; 0x802690 <g_adc_io_adc5_cnt>
    c11a:	90 93 91 26 	sts	0x2691, r25	; 0x802691 <g_adc_io_adc5_cnt+0x1>
    c11e:	8f 3f       	cpi	r24, 0xFF	; 255
    c120:	91 05       	cpc	r25, r1
    c122:	09 f0       	breq	.+2      	; 0xc126 <isr_adc_a+0x28a>
    c124:	08 f4       	brcc	.+2      	; 0xc128 <isr_adc_a+0x28c>
    c126:	60 c0       	rjmp	.+192    	; 0xc1e8 <isr_adc_a+0x34c>
    c128:	80 91 92 26 	lds	r24, 0x2692	; 0x802692 <g_adc_io_adc5_sum>
    c12c:	90 91 93 26 	lds	r25, 0x2693	; 0x802693 <g_adc_io_adc5_sum+0x1>
    c130:	a0 91 94 26 	lds	r26, 0x2694	; 0x802694 <g_adc_io_adc5_sum+0x2>
    c134:	b0 91 95 26 	lds	r27, 0x2695	; 0x802695 <g_adc_io_adc5_sum+0x3>
    c138:	80 93 96 26 	sts	0x2696, r24	; 0x802696 <g_adc_io_adc5_cur>
    c13c:	90 93 97 26 	sts	0x2697, r25	; 0x802697 <g_adc_io_adc5_cur+0x1>
    c140:	a0 93 98 26 	sts	0x2698, r26	; 0x802698 <g_adc_io_adc5_cur+0x2>
    c144:	b0 93 99 26 	sts	0x2699, r27	; 0x802699 <g_adc_io_adc5_cur+0x3>
    c148:	10 92 90 26 	sts	0x2690, r1	; 0x802690 <g_adc_io_adc5_cnt>
    c14c:	10 92 91 26 	sts	0x2691, r1	; 0x802691 <g_adc_io_adc5_cnt+0x1>
    c150:	10 92 92 26 	sts	0x2692, r1	; 0x802692 <g_adc_io_adc5_sum>
    c154:	10 92 93 26 	sts	0x2693, r1	; 0x802693 <g_adc_io_adc5_sum+0x1>
    c158:	10 92 94 26 	sts	0x2694, r1	; 0x802694 <g_adc_io_adc5_sum+0x2>
    c15c:	10 92 95 26 	sts	0x2695, r1	; 0x802695 <g_adc_io_adc5_sum+0x3>
    c160:	08 95       	ret
    c162:	63 ff       	sbrs	r22, 3
    c164:	41 c0       	rjmp	.+130    	; 0xc1e8 <isr_adc_a+0x34c>
    c166:	80 91 88 26 	lds	r24, 0x2688	; 0x802688 <g_adc_silence_sum>
    c16a:	90 91 89 26 	lds	r25, 0x2689	; 0x802689 <g_adc_silence_sum+0x1>
    c16e:	a0 91 8a 26 	lds	r26, 0x268A	; 0x80268a <g_adc_silence_sum+0x2>
    c172:	b0 91 8b 26 	lds	r27, 0x268B	; 0x80268b <g_adc_silence_sum+0x3>
    c176:	05 2e       	mov	r0, r21
    c178:	00 0c       	add	r0, r0
    c17a:	66 0b       	sbc	r22, r22
    c17c:	77 0b       	sbc	r23, r23
    c17e:	48 0f       	add	r20, r24
    c180:	59 1f       	adc	r21, r25
    c182:	6a 1f       	adc	r22, r26
    c184:	7b 1f       	adc	r23, r27
    c186:	40 93 88 26 	sts	0x2688, r20	; 0x802688 <g_adc_silence_sum>
    c18a:	50 93 89 26 	sts	0x2689, r21	; 0x802689 <g_adc_silence_sum+0x1>
    c18e:	60 93 8a 26 	sts	0x268A, r22	; 0x80268a <g_adc_silence_sum+0x2>
    c192:	70 93 8b 26 	sts	0x268B, r23	; 0x80268b <g_adc_silence_sum+0x3>
    c196:	80 91 86 26 	lds	r24, 0x2686	; 0x802686 <g_adc_silence_cnt>
    c19a:	90 91 87 26 	lds	r25, 0x2687	; 0x802687 <g_adc_silence_cnt+0x1>
    c19e:	01 96       	adiw	r24, 0x01	; 1
    c1a0:	80 93 86 26 	sts	0x2686, r24	; 0x802686 <g_adc_silence_cnt>
    c1a4:	90 93 87 26 	sts	0x2687, r25	; 0x802687 <g_adc_silence_cnt+0x1>
    c1a8:	8f 3f       	cpi	r24, 0xFF	; 255
    c1aa:	91 05       	cpc	r25, r1
    c1ac:	e9 f0       	breq	.+58     	; 0xc1e8 <isr_adc_a+0x34c>
    c1ae:	e0 f0       	brcs	.+56     	; 0xc1e8 <isr_adc_a+0x34c>
    c1b0:	80 91 88 26 	lds	r24, 0x2688	; 0x802688 <g_adc_silence_sum>
    c1b4:	90 91 89 26 	lds	r25, 0x2689	; 0x802689 <g_adc_silence_sum+0x1>
    c1b8:	a0 91 8a 26 	lds	r26, 0x268A	; 0x80268a <g_adc_silence_sum+0x2>
    c1bc:	b0 91 8b 26 	lds	r27, 0x268B	; 0x80268b <g_adc_silence_sum+0x3>
    c1c0:	80 93 8c 26 	sts	0x268C, r24	; 0x80268c <g_adc_silence_cur>
    c1c4:	90 93 8d 26 	sts	0x268D, r25	; 0x80268d <g_adc_silence_cur+0x1>
    c1c8:	a0 93 8e 26 	sts	0x268E, r26	; 0x80268e <g_adc_silence_cur+0x2>
    c1cc:	b0 93 8f 26 	sts	0x268F, r27	; 0x80268f <g_adc_silence_cur+0x3>
    c1d0:	10 92 86 26 	sts	0x2686, r1	; 0x802686 <g_adc_silence_cnt>
    c1d4:	10 92 87 26 	sts	0x2687, r1	; 0x802687 <g_adc_silence_cnt+0x1>
    c1d8:	10 92 88 26 	sts	0x2688, r1	; 0x802688 <g_adc_silence_sum>
    c1dc:	10 92 89 26 	sts	0x2689, r1	; 0x802689 <g_adc_silence_sum+0x1>
    c1e0:	10 92 8a 26 	sts	0x268A, r1	; 0x80268a <g_adc_silence_sum+0x2>
    c1e4:	10 92 8b 26 	sts	0x268B, r1	; 0x80268b <g_adc_silence_sum+0x3>
    c1e8:	08 95       	ret

0000c1ea <isr_adc_b>:
    c1ea:	0f 93       	push	r16
    c1ec:	1f 93       	push	r17
    c1ee:	60 ff       	sbrs	r22, 0
    c1f0:	43 c0       	rjmp	.+134    	; 0xc278 <isr_adc_b+0x8e>
    c1f2:	00 91 7e 26 	lds	r16, 0x267E	; 0x80267e <g_adc_temp_sum>
    c1f6:	10 91 7f 26 	lds	r17, 0x267F	; 0x80267f <g_adc_temp_sum+0x1>
    c1fa:	20 91 80 26 	lds	r18, 0x2680	; 0x802680 <g_adc_temp_sum+0x2>
    c1fe:	30 91 81 26 	lds	r19, 0x2681	; 0x802681 <g_adc_temp_sum+0x3>
    c202:	4e 5b       	subi	r20, 0xBE	; 190
    c204:	51 09       	sbc	r21, r1
    c206:	05 2e       	mov	r0, r21
    c208:	00 0c       	add	r0, r0
    c20a:	66 0b       	sbc	r22, r22
    c20c:	77 0b       	sbc	r23, r23
    c20e:	40 0f       	add	r20, r16
    c210:	51 1f       	adc	r21, r17
    c212:	62 1f       	adc	r22, r18
    c214:	73 1f       	adc	r23, r19
    c216:	40 93 7e 26 	sts	0x267E, r20	; 0x80267e <g_adc_temp_sum>
    c21a:	50 93 7f 26 	sts	0x267F, r21	; 0x80267f <g_adc_temp_sum+0x1>
    c21e:	60 93 80 26 	sts	0x2680, r22	; 0x802680 <g_adc_temp_sum+0x2>
    c222:	70 93 81 26 	sts	0x2681, r23	; 0x802681 <g_adc_temp_sum+0x3>
    c226:	80 91 7c 26 	lds	r24, 0x267C	; 0x80267c <g_adc_temp_cnt>
    c22a:	90 91 7d 26 	lds	r25, 0x267D	; 0x80267d <g_adc_temp_cnt+0x1>
    c22e:	01 96       	adiw	r24, 0x01	; 1
    c230:	80 93 7c 26 	sts	0x267C, r24	; 0x80267c <g_adc_temp_cnt>
    c234:	90 93 7d 26 	sts	0x267D, r25	; 0x80267d <g_adc_temp_cnt+0x1>
    c238:	8f 3f       	cpi	r24, 0xFF	; 255
    c23a:	91 05       	cpc	r25, r1
    c23c:	e9 f0       	breq	.+58     	; 0xc278 <isr_adc_b+0x8e>
    c23e:	e0 f0       	brcs	.+56     	; 0xc278 <isr_adc_b+0x8e>
    c240:	80 91 7e 26 	lds	r24, 0x267E	; 0x80267e <g_adc_temp_sum>
    c244:	90 91 7f 26 	lds	r25, 0x267F	; 0x80267f <g_adc_temp_sum+0x1>
    c248:	a0 91 80 26 	lds	r26, 0x2680	; 0x802680 <g_adc_temp_sum+0x2>
    c24c:	b0 91 81 26 	lds	r27, 0x2681	; 0x802681 <g_adc_temp_sum+0x3>
    c250:	80 93 82 26 	sts	0x2682, r24	; 0x802682 <g_adc_temp_cur>
    c254:	90 93 83 26 	sts	0x2683, r25	; 0x802683 <g_adc_temp_cur+0x1>
    c258:	a0 93 84 26 	sts	0x2684, r26	; 0x802684 <g_adc_temp_cur+0x2>
    c25c:	b0 93 85 26 	sts	0x2685, r27	; 0x802685 <g_adc_temp_cur+0x3>
    c260:	10 92 7c 26 	sts	0x267C, r1	; 0x80267c <g_adc_temp_cnt>
    c264:	10 92 7d 26 	sts	0x267D, r1	; 0x80267d <g_adc_temp_cnt+0x1>
    c268:	10 92 7e 26 	sts	0x267E, r1	; 0x80267e <g_adc_temp_sum>
    c26c:	10 92 7f 26 	sts	0x267F, r1	; 0x80267f <g_adc_temp_sum+0x1>
    c270:	10 92 80 26 	sts	0x2680, r1	; 0x802680 <g_adc_temp_sum+0x2>
    c274:	10 92 81 26 	sts	0x2681, r1	; 0x802681 <g_adc_temp_sum+0x3>
    c278:	1f 91       	pop	r17
    c27a:	0f 91       	pop	r16
    c27c:	08 95       	ret

0000c27e <task_dac>:
    c27e:	2f 92       	push	r2
    c280:	3f 92       	push	r3
    c282:	4f 92       	push	r4
    c284:	5f 92       	push	r5
    c286:	6f 92       	push	r6
    c288:	7f 92       	push	r7
    c28a:	8f 92       	push	r8
    c28c:	9f 92       	push	r9
    c28e:	af 92       	push	r10
    c290:	bf 92       	push	r11
    c292:	cf 92       	push	r12
    c294:	df 92       	push	r13
    c296:	ef 92       	push	r14
    c298:	ff 92       	push	r15
    c29a:	0f 93       	push	r16
    c29c:	1f 93       	push	r17
    c29e:	cf 93       	push	r28
    c2a0:	df 93       	push	r29
    c2a2:	cd b7       	in	r28, 0x3d	; 61
    c2a4:	de b7       	in	r29, 0x3e	; 62
    c2a6:	2e 97       	sbiw	r28, 0x0e	; 14
    c2a8:	cd bf       	out	0x3d, r28	; 61
    c2aa:	de bf       	out	0x3e, r29	; 62
    c2ac:	8f b7       	in	r24, 0x3f	; 63
    c2ae:	8a 83       	std	Y+2, r24	; 0x02
    c2b0:	f8 94       	cli
    c2b2:	8a 81       	ldd	r24, Y+2	; 0x02
    c2b4:	40 90 13 20 	lds	r4, 0x2013	; 0x802013 <dds0_freq_mHz>
    c2b8:	50 90 14 20 	lds	r5, 0x2014	; 0x802014 <dds0_freq_mHz+0x1>
    c2bc:	60 90 15 20 	lds	r6, 0x2015	; 0x802015 <dds0_freq_mHz+0x2>
    c2c0:	70 90 16 20 	lds	r7, 0x2016	; 0x802016 <dds0_freq_mHz+0x3>
    c2c4:	00 91 0f 20 	lds	r16, 0x200F	; 0x80200f <dds1_freq_mHz>
    c2c8:	10 91 10 20 	lds	r17, 0x2010	; 0x802010 <dds1_freq_mHz+0x1>
    c2cc:	20 91 11 20 	lds	r18, 0x2011	; 0x802011 <dds1_freq_mHz+0x2>
    c2d0:	30 91 12 20 	lds	r19, 0x2012	; 0x802012 <dds1_freq_mHz+0x3>
    c2d4:	0b 87       	std	Y+11, r16	; 0x0b
    c2d6:	1c 87       	std	Y+12, r17	; 0x0c
    c2d8:	2d 87       	std	Y+13, r18	; 0x0d
    c2da:	3e 87       	std	Y+14, r19	; 0x0e
    c2dc:	8f bf       	out	0x3f, r24	; 63
    c2de:	80 91 a1 24 	lds	r24, 0x24A1	; 0x8024a1 <s_dds0_freq_mHz.8236>
    c2e2:	90 91 a2 24 	lds	r25, 0x24A2	; 0x8024a2 <s_dds0_freq_mHz.8236+0x1>
    c2e6:	a0 91 a3 24 	lds	r26, 0x24A3	; 0x8024a3 <s_dds0_freq_mHz.8236+0x2>
    c2ea:	b0 91 a4 24 	lds	r27, 0x24A4	; 0x8024a4 <s_dds0_freq_mHz.8236+0x3>
    c2ee:	48 16       	cp	r4, r24
    c2f0:	59 06       	cpc	r5, r25
    c2f2:	6a 06       	cpc	r6, r26
    c2f4:	7b 06       	cpc	r7, r27
    c2f6:	71 f4       	brne	.+28     	; 0xc314 <task_dac+0x96>
    c2f8:	80 91 9d 24 	lds	r24, 0x249D	; 0x80249d <s_dds1_freq_mHz.8237>
    c2fc:	90 91 9e 24 	lds	r25, 0x249E	; 0x80249e <s_dds1_freq_mHz.8237+0x1>
    c300:	a0 91 9f 24 	lds	r26, 0x249F	; 0x80249f <s_dds1_freq_mHz.8237+0x2>
    c304:	b0 91 a0 24 	lds	r27, 0x24A0	; 0x8024a0 <s_dds1_freq_mHz.8237+0x3>
    c308:	08 17       	cp	r16, r24
    c30a:	19 07       	cpc	r17, r25
    c30c:	2a 07       	cpc	r18, r26
    c30e:	3b 07       	cpc	r19, r27
    c310:	09 f4       	brne	.+2      	; 0xc314 <task_dac+0x96>
    c312:	a1 c0       	rjmp	.+322    	; 0xc456 <task_dac+0x1d8>
    c314:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <dds0_freq_mHz>
    c318:	90 91 14 20 	lds	r25, 0x2014	; 0x802014 <dds0_freq_mHz+0x1>
    c31c:	a0 91 15 20 	lds	r26, 0x2015	; 0x802015 <dds0_freq_mHz+0x2>
    c320:	b0 91 16 20 	lds	r27, 0x2016	; 0x802016 <dds0_freq_mHz+0x3>
    c324:	8c 01       	movw	r16, r24
    c326:	9d 01       	movw	r18, r26
    c328:	40 e0       	ldi	r20, 0x00	; 0
    c32a:	50 e0       	ldi	r21, 0x00	; 0
    c32c:	ba 01       	movw	r22, r20
    c32e:	8b 83       	std	Y+3, r24	; 0x03
    c330:	1c 83       	std	Y+4, r17	; 0x04
    c332:	2d 83       	std	Y+5, r18	; 0x05
    c334:	3e 83       	std	Y+6, r19	; 0x06
    c336:	4f 83       	std	Y+7, r20	; 0x07
    c338:	58 87       	std	Y+8, r21	; 0x08
    c33a:	69 87       	std	Y+9, r22	; 0x09
    c33c:	7a 87       	std	Y+10, r23	; 0x0a
    c33e:	aa 24       	eor	r10, r10
    c340:	aa 94       	dec	r10
    c342:	bb 24       	eor	r11, r11
    c344:	ba 94       	dec	r11
    c346:	cc 24       	eor	r12, r12
    c348:	ca 94       	dec	r12
    c34a:	dd 24       	eor	r13, r13
    c34c:	da 94       	dec	r13
    c34e:	e1 2c       	mov	r14, r1
    c350:	f1 2c       	mov	r15, r1
    c352:	00 e0       	ldi	r16, 0x00	; 0
    c354:	10 e0       	ldi	r17, 0x00	; 0
    c356:	2b 81       	ldd	r18, Y+3	; 0x03
    c358:	3c 81       	ldd	r19, Y+4	; 0x04
    c35a:	4d 81       	ldd	r20, Y+5	; 0x05
    c35c:	5e 81       	ldd	r21, Y+6	; 0x06
    c35e:	60 e0       	ldi	r22, 0x00	; 0
    c360:	70 e0       	ldi	r23, 0x00	; 0
    c362:	80 e0       	ldi	r24, 0x00	; 0
    c364:	90 e0       	ldi	r25, 0x00	; 0
    c366:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    c36a:	a1 2c       	mov	r10, r1
    c36c:	0f 2e       	mov	r0, r31
    c36e:	fc e6       	ldi	r31, 0x6C	; 108
    c370:	bf 2e       	mov	r11, r31
    c372:	f0 2d       	mov	r31, r0
    c374:	0f 2e       	mov	r0, r31
    c376:	fc ed       	ldi	r31, 0xDC	; 220
    c378:	cf 2e       	mov	r12, r31
    c37a:	f0 2d       	mov	r31, r0
    c37c:	68 94       	set
    c37e:	dd 24       	eor	r13, r13
    c380:	d1 f8       	bld	r13, 1
    c382:	0e 94 60 88 	call	0x110c0	; 0x110c0 <__udivdi3>
    c386:	92 2e       	mov	r9, r18
    c388:	83 2e       	mov	r8, r19
    c38a:	34 2e       	mov	r3, r20
    c38c:	25 2e       	mov	r2, r21
    c38e:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <dds1_freq_mHz>
    c392:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <dds1_freq_mHz+0x1>
    c396:	a0 91 11 20 	lds	r26, 0x2011	; 0x802011 <dds1_freq_mHz+0x2>
    c39a:	b0 91 12 20 	lds	r27, 0x2012	; 0x802012 <dds1_freq_mHz+0x3>
    c39e:	8c 01       	movw	r16, r24
    c3a0:	9d 01       	movw	r18, r26
    c3a2:	40 e0       	ldi	r20, 0x00	; 0
    c3a4:	50 e0       	ldi	r21, 0x00	; 0
    c3a6:	ba 01       	movw	r22, r20
    c3a8:	8b 83       	std	Y+3, r24	; 0x03
    c3aa:	1c 83       	std	Y+4, r17	; 0x04
    c3ac:	2d 83       	std	Y+5, r18	; 0x05
    c3ae:	3e 83       	std	Y+6, r19	; 0x06
    c3b0:	4f 83       	std	Y+7, r20	; 0x07
    c3b2:	58 87       	std	Y+8, r21	; 0x08
    c3b4:	69 87       	std	Y+9, r22	; 0x09
    c3b6:	7a 87       	std	Y+10, r23	; 0x0a
    c3b8:	aa 24       	eor	r10, r10
    c3ba:	aa 94       	dec	r10
    c3bc:	bb 24       	eor	r11, r11
    c3be:	ba 94       	dec	r11
    c3c0:	cc 24       	eor	r12, r12
    c3c2:	ca 94       	dec	r12
    c3c4:	dd 24       	eor	r13, r13
    c3c6:	da 94       	dec	r13
    c3c8:	00 e0       	ldi	r16, 0x00	; 0
    c3ca:	10 e0       	ldi	r17, 0x00	; 0
    c3cc:	2b 81       	ldd	r18, Y+3	; 0x03
    c3ce:	3c 81       	ldd	r19, Y+4	; 0x04
    c3d0:	4d 81       	ldd	r20, Y+5	; 0x05
    c3d2:	5e 81       	ldd	r21, Y+6	; 0x06
    c3d4:	60 e0       	ldi	r22, 0x00	; 0
    c3d6:	70 e0       	ldi	r23, 0x00	; 0
    c3d8:	80 e0       	ldi	r24, 0x00	; 0
    c3da:	90 e0       	ldi	r25, 0x00	; 0
    c3dc:	0e 94 e2 87 	call	0x10fc4	; 0x10fc4 <__muldi3>
    c3e0:	a1 2c       	mov	r10, r1
    c3e2:	0f 2e       	mov	r0, r31
    c3e4:	fc e6       	ldi	r31, 0x6C	; 108
    c3e6:	bf 2e       	mov	r11, r31
    c3e8:	f0 2d       	mov	r31, r0
    c3ea:	0f 2e       	mov	r0, r31
    c3ec:	fc ed       	ldi	r31, 0xDC	; 220
    c3ee:	cf 2e       	mov	r12, r31
    c3f0:	f0 2d       	mov	r31, r0
    c3f2:	68 94       	set
    c3f4:	dd 24       	eor	r13, r13
    c3f6:	d1 f8       	bld	r13, 1
    c3f8:	0e 94 60 88 	call	0x110c0	; 0x110c0 <__udivdi3>
    c3fc:	72 2f       	mov	r23, r18
    c3fe:	63 2f       	mov	r22, r19
    c400:	94 2f       	mov	r25, r20
    c402:	85 2f       	mov	r24, r21
    c404:	40 92 a1 24 	sts	0x24A1, r4	; 0x8024a1 <s_dds0_freq_mHz.8236>
    c408:	50 92 a2 24 	sts	0x24A2, r5	; 0x8024a2 <s_dds0_freq_mHz.8236+0x1>
    c40c:	60 92 a3 24 	sts	0x24A3, r6	; 0x8024a3 <s_dds0_freq_mHz.8236+0x2>
    c410:	70 92 a4 24 	sts	0x24A4, r7	; 0x8024a4 <s_dds0_freq_mHz.8236+0x3>
    c414:	2b 85       	ldd	r18, Y+11	; 0x0b
    c416:	3c 85       	ldd	r19, Y+12	; 0x0c
    c418:	4d 85       	ldd	r20, Y+13	; 0x0d
    c41a:	5e 85       	ldd	r21, Y+14	; 0x0e
    c41c:	20 93 9d 24 	sts	0x249D, r18	; 0x80249d <s_dds1_freq_mHz.8237>
    c420:	30 93 9e 24 	sts	0x249E, r19	; 0x80249e <s_dds1_freq_mHz.8237+0x1>
    c424:	40 93 9f 24 	sts	0x249F, r20	; 0x80249f <s_dds1_freq_mHz.8237+0x2>
    c428:	50 93 a0 24 	sts	0x24A0, r21	; 0x8024a0 <s_dds1_freq_mHz.8237+0x3>
    c42c:	2f b7       	in	r18, 0x3f	; 63
    c42e:	29 83       	std	Y+1, r18	; 0x01
    c430:	f8 94       	cli
    c432:	29 81       	ldd	r18, Y+1	; 0x01
    c434:	90 92 ed 24 	sts	0x24ED, r9	; 0x8024ed <dds0_inc>
    c438:	80 92 ee 24 	sts	0x24EE, r8	; 0x8024ee <dds0_inc+0x1>
    c43c:	30 92 ef 24 	sts	0x24EF, r3	; 0x8024ef <dds0_inc+0x2>
    c440:	20 92 f0 24 	sts	0x24F0, r2	; 0x8024f0 <dds0_inc+0x3>
    c444:	70 93 e5 24 	sts	0x24E5, r23	; 0x8024e5 <dds1_inc>
    c448:	60 93 e6 24 	sts	0x24E6, r22	; 0x8024e6 <dds1_inc+0x1>
    c44c:	90 93 e7 24 	sts	0x24E7, r25	; 0x8024e7 <dds1_inc+0x2>
    c450:	80 93 e8 24 	sts	0x24E8, r24	; 0x8024e8 <dds1_inc+0x3>
    c454:	2f bf       	out	0x3f, r18	; 63
    c456:	2e 96       	adiw	r28, 0x0e	; 14
    c458:	cd bf       	out	0x3d, r28	; 61
    c45a:	de bf       	out	0x3e, r29	; 62
    c45c:	df 91       	pop	r29
    c45e:	cf 91       	pop	r28
    c460:	1f 91       	pop	r17
    c462:	0f 91       	pop	r16
    c464:	ff 90       	pop	r15
    c466:	ef 90       	pop	r14
    c468:	df 90       	pop	r13
    c46a:	cf 90       	pop	r12
    c46c:	bf 90       	pop	r11
    c46e:	af 90       	pop	r10
    c470:	9f 90       	pop	r9
    c472:	8f 90       	pop	r8
    c474:	7f 90       	pop	r7
    c476:	6f 90       	pop	r6
    c478:	5f 90       	pop	r5
    c47a:	4f 90       	pop	r4
    c47c:	3f 90       	pop	r3
    c47e:	2f 90       	pop	r2
    c480:	08 95       	ret

0000c482 <task_adc>:
    c482:	4f 92       	push	r4
    c484:	5f 92       	push	r5
    c486:	6f 92       	push	r6
    c488:	7f 92       	push	r7
    c48a:	8f 92       	push	r8
    c48c:	9f 92       	push	r9
    c48e:	af 92       	push	r10
    c490:	bf 92       	push	r11
    c492:	cf 92       	push	r12
    c494:	df 92       	push	r13
    c496:	ef 92       	push	r14
    c498:	ff 92       	push	r15
    c49a:	cf 93       	push	r28
    c49c:	df 93       	push	r29
    c49e:	cd b7       	in	r28, 0x3d	; 61
    c4a0:	de b7       	in	r29, 0x3e	; 62
    c4a2:	6a 97       	sbiw	r28, 0x1a	; 26
    c4a4:	cd bf       	out	0x3d, r28	; 61
    c4a6:	de bf       	out	0x3e, r29	; 62
    c4a8:	c0 90 91 24 	lds	r12, 0x2491	; 0x802491 <adc_last.8247>
    c4ac:	d0 90 92 24 	lds	r13, 0x2492	; 0x802492 <adc_last.8247+0x1>
    c4b0:	e0 90 93 24 	lds	r14, 0x2493	; 0x802493 <adc_last.8247+0x2>
    c4b4:	f0 90 94 24 	lds	r15, 0x2494	; 0x802494 <adc_last.8247+0x3>
    c4b8:	4b 01       	movw	r8, r22
    c4ba:	5c 01       	movw	r10, r24
    c4bc:	8c 18       	sub	r8, r12
    c4be:	9d 08       	sbc	r9, r13
    c4c0:	ae 08       	sbc	r10, r14
    c4c2:	bf 08       	sbc	r11, r15
    c4c4:	81 14       	cp	r8, r1
    c4c6:	22 e0       	ldi	r18, 0x02	; 2
    c4c8:	92 06       	cpc	r9, r18
    c4ca:	a1 04       	cpc	r10, r1
    c4cc:	b1 04       	cpc	r11, r1
    c4ce:	30 f4       	brcc	.+12     	; 0xc4dc <task_adc+0x5a>
    c4d0:	6c 15       	cp	r22, r12
    c4d2:	7d 05       	cpc	r23, r13
    c4d4:	8e 05       	cpc	r24, r14
    c4d6:	9f 05       	cpc	r25, r15
    c4d8:	08 f0       	brcs	.+2      	; 0xc4dc <task_adc+0x5a>
    c4da:	1a c1       	rjmp	.+564    	; 0xc710 <task_adc+0x28e>
    c4dc:	dc 01       	movw	r26, r24
    c4de:	cb 01       	movw	r24, r22
    c4e0:	80 93 91 24 	sts	0x2491, r24	; 0x802491 <adc_last.8247>
    c4e4:	90 93 92 24 	sts	0x2492, r25	; 0x802492 <adc_last.8247+0x1>
    c4e8:	a0 93 93 24 	sts	0x2493, r26	; 0x802493 <adc_last.8247+0x2>
    c4ec:	b0 93 94 24 	sts	0x2494, r27	; 0x802494 <adc_last.8247+0x3>
    c4f0:	8f b7       	in	r24, 0x3f	; 63
    c4f2:	89 83       	std	Y+1, r24	; 0x01
    c4f4:	f8 94       	cli
    c4f6:	69 81       	ldd	r22, Y+1	; 0x01
    c4f8:	20 91 be 26 	lds	r18, 0x26BE	; 0x8026be <g_adc_vctcxo_cur>
    c4fc:	30 91 bf 26 	lds	r19, 0x26BF	; 0x8026bf <g_adc_vctcxo_cur+0x1>
    c500:	40 91 c0 26 	lds	r20, 0x26C0	; 0x8026c0 <g_adc_vctcxo_cur+0x2>
    c504:	50 91 c1 26 	lds	r21, 0x26C1	; 0x8026c1 <g_adc_vctcxo_cur+0x3>
    c508:	40 90 b4 26 	lds	r4, 0x26B4	; 0x8026b4 <g_adc_5v0_cur>
    c50c:	50 90 b5 26 	lds	r5, 0x26B5	; 0x8026b5 <g_adc_5v0_cur+0x1>
    c510:	60 90 b6 26 	lds	r6, 0x26B6	; 0x8026b6 <g_adc_5v0_cur+0x2>
    c514:	70 90 b7 26 	lds	r7, 0x26B7	; 0x8026b7 <g_adc_5v0_cur+0x3>
    c518:	80 90 aa 26 	lds	r8, 0x26AA	; 0x8026aa <g_adc_vbat_cur>
    c51c:	90 90 ab 26 	lds	r9, 0x26AB	; 0x8026ab <g_adc_vbat_cur+0x1>
    c520:	a0 90 ac 26 	lds	r10, 0x26AC	; 0x8026ac <g_adc_vbat_cur+0x2>
    c524:	b0 90 ad 26 	lds	r11, 0x26AD	; 0x8026ad <g_adc_vbat_cur+0x3>
    c528:	c0 90 a0 26 	lds	r12, 0x26A0	; 0x8026a0 <g_adc_io_adc4_cur>
    c52c:	d0 90 a1 26 	lds	r13, 0x26A1	; 0x8026a1 <g_adc_io_adc4_cur+0x1>
    c530:	e0 90 a2 26 	lds	r14, 0x26A2	; 0x8026a2 <g_adc_io_adc4_cur+0x2>
    c534:	f0 90 a3 26 	lds	r15, 0x26A3	; 0x8026a3 <g_adc_io_adc4_cur+0x3>
    c538:	80 91 96 26 	lds	r24, 0x2696	; 0x802696 <g_adc_io_adc5_cur>
    c53c:	90 91 97 26 	lds	r25, 0x2697	; 0x802697 <g_adc_io_adc5_cur+0x1>
    c540:	a0 91 98 26 	lds	r26, 0x2698	; 0x802698 <g_adc_io_adc5_cur+0x2>
    c544:	b0 91 99 26 	lds	r27, 0x2699	; 0x802699 <g_adc_io_adc5_cur+0x3>
    c548:	8b 83       	std	Y+3, r24	; 0x03
    c54a:	9c 83       	std	Y+4, r25	; 0x04
    c54c:	ad 83       	std	Y+5, r26	; 0x05
    c54e:	be 83       	std	Y+6, r27	; 0x06
    c550:	80 91 8c 26 	lds	r24, 0x268C	; 0x80268c <g_adc_silence_cur>
    c554:	90 91 8d 26 	lds	r25, 0x268D	; 0x80268d <g_adc_silence_cur+0x1>
    c558:	a0 91 8e 26 	lds	r26, 0x268E	; 0x80268e <g_adc_silence_cur+0x2>
    c55c:	b0 91 8f 26 	lds	r27, 0x268F	; 0x80268f <g_adc_silence_cur+0x3>
    c560:	8f 83       	std	Y+7, r24	; 0x07
    c562:	98 87       	std	Y+8, r25	; 0x08
    c564:	a9 87       	std	Y+9, r26	; 0x09
    c566:	ba 87       	std	Y+10, r27	; 0x0a
    c568:	80 91 82 26 	lds	r24, 0x2682	; 0x802682 <g_adc_temp_cur>
    c56c:	90 91 83 26 	lds	r25, 0x2683	; 0x802683 <g_adc_temp_cur+0x1>
    c570:	a0 91 84 26 	lds	r26, 0x2684	; 0x802684 <g_adc_temp_cur+0x2>
    c574:	b0 91 85 26 	lds	r27, 0x2685	; 0x802685 <g_adc_temp_cur+0x3>
    c578:	8b 87       	std	Y+11, r24	; 0x0b
    c57a:	9c 87       	std	Y+12, r25	; 0x0c
    c57c:	ad 87       	std	Y+13, r26	; 0x0d
    c57e:	be 87       	std	Y+14, r27	; 0x0e
    c580:	6f bf       	out	0x3f, r22	; 63
    c582:	a8 eb       	ldi	r26, 0xB8	; 184
    c584:	bb e0       	ldi	r27, 0x0B	; 11
    c586:	0e 94 d8 87 	call	0x10fb0	; 0x10fb0 <__muluhisi3>
    c58a:	05 2e       	mov	r0, r21
    c58c:	54 e1       	ldi	r21, 0x14	; 20
    c58e:	96 95       	lsr	r25
    c590:	87 95       	ror	r24
    c592:	77 95       	ror	r23
    c594:	67 95       	ror	r22
    c596:	5a 95       	dec	r21
    c598:	d1 f7       	brne	.-12     	; 0xc58e <task_adc+0x10c>
    c59a:	50 2d       	mov	r21, r0
    c59c:	0e 94 73 84 	call	0x108e6	; 0x108e6 <__floatunsisf>
    c5a0:	20 e0       	ldi	r18, 0x00	; 0
    c5a2:	30 e0       	ldi	r19, 0x00	; 0
    c5a4:	4c e3       	ldi	r20, 0x3C	; 60
    c5a6:	52 e4       	ldi	r21, 0x42	; 66
    c5a8:	0e 94 6e 83 	call	0x106dc	; 0x106dc <__subsf3>
    c5ac:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    c5b0:	6f 87       	std	Y+15, r22	; 0x0f
    c5b2:	78 8b       	std	Y+16, r23	; 0x10
    c5b4:	89 8b       	std	Y+17, r24	; 0x11
    c5b6:	9a 8b       	std	Y+18, r25	; 0x12
    c5b8:	a8 eb       	ldi	r26, 0xB8	; 184
    c5ba:	bb e0       	ldi	r27, 0x0B	; 11
    c5bc:	a3 01       	movw	r20, r6
    c5be:	92 01       	movw	r18, r4
    c5c0:	0e 94 d8 87 	call	0x10fb0	; 0x10fb0 <__muluhisi3>
    c5c4:	0e 94 73 84 	call	0x108e6	; 0x108e6 <__floatunsisf>
    c5c8:	29 ed       	ldi	r18, 0xD9	; 217
    c5ca:	38 ed       	ldi	r19, 0xD8	; 216
    c5cc:	4a e1       	ldi	r20, 0x1A	; 26
    c5ce:	50 e4       	ldi	r21, 0x40	; 64
    c5d0:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    c5d4:	20 e0       	ldi	r18, 0x00	; 0
    c5d6:	30 e0       	ldi	r19, 0x00	; 0
    c5d8:	40 e8       	ldi	r20, 0x80	; 128
    c5da:	55 e3       	ldi	r21, 0x35	; 53
    c5dc:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    c5e0:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    c5e4:	6b 8b       	std	Y+19, r22	; 0x13
    c5e6:	7c 8b       	std	Y+20, r23	; 0x14
    c5e8:	8d 8b       	std	Y+21, r24	; 0x15
    c5ea:	9e 8b       	std	Y+22, r25	; 0x16
    c5ec:	a8 eb       	ldi	r26, 0xB8	; 184
    c5ee:	bb e0       	ldi	r27, 0x0B	; 11
    c5f0:	a5 01       	movw	r20, r10
    c5f2:	94 01       	movw	r18, r8
    c5f4:	0e 94 d8 87 	call	0x10fb0	; 0x10fb0 <__muluhisi3>
    c5f8:	0e 94 73 84 	call	0x108e6	; 0x108e6 <__floatunsisf>
    c5fc:	23 ee       	ldi	r18, 0xE3	; 227
    c5fe:	35 e4       	ldi	r19, 0x45	; 69
    c600:	4b e1       	ldi	r20, 0x1B	; 27
    c602:	50 e4       	ldi	r21, 0x40	; 64
    c604:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    c608:	20 e0       	ldi	r18, 0x00	; 0
    c60a:	30 e0       	ldi	r19, 0x00	; 0
    c60c:	40 e8       	ldi	r20, 0x80	; 128
    c60e:	55 e3       	ldi	r21, 0x35	; 53
    c610:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    c614:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    c618:	6f 8b       	std	Y+23, r22	; 0x17
    c61a:	78 8f       	std	Y+24, r23	; 0x18
    c61c:	89 8f       	std	Y+25, r24	; 0x19
    c61e:	9a 8f       	std	Y+26, r25	; 0x1a
    c620:	a8 eb       	ldi	r26, 0xB8	; 184
    c622:	bb e0       	ldi	r27, 0x0B	; 11
    c624:	a7 01       	movw	r20, r14
    c626:	96 01       	movw	r18, r12
    c628:	0e 94 d8 87 	call	0x10fb0	; 0x10fb0 <__muluhisi3>
    c62c:	6b 01       	movw	r12, r22
    c62e:	7c 01       	movw	r14, r24
    c630:	0b 2e       	mov	r0, r27
    c632:	b4 e1       	ldi	r27, 0x14	; 20
    c634:	f6 94       	lsr	r15
    c636:	e7 94       	ror	r14
    c638:	d7 94       	ror	r13
    c63a:	c7 94       	ror	r12
    c63c:	ba 95       	dec	r27
    c63e:	d1 f7       	brne	.-12     	; 0xc634 <task_adc+0x1b2>
    c640:	b0 2d       	mov	r27, r0
    c642:	2b 81       	ldd	r18, Y+3	; 0x03
    c644:	3c 81       	ldd	r19, Y+4	; 0x04
    c646:	4d 81       	ldd	r20, Y+5	; 0x05
    c648:	5e 81       	ldd	r21, Y+6	; 0x06
    c64a:	0e 94 d8 87 	call	0x10fb0	; 0x10fb0 <__muluhisi3>
    c64e:	2b 01       	movw	r4, r22
    c650:	3c 01       	movw	r6, r24
    c652:	03 2e       	mov	r0, r19
    c654:	34 e1       	ldi	r19, 0x14	; 20
    c656:	76 94       	lsr	r7
    c658:	67 94       	ror	r6
    c65a:	57 94       	ror	r5
    c65c:	47 94       	ror	r4
    c65e:	3a 95       	dec	r19
    c660:	d1 f7       	brne	.-12     	; 0xc656 <task_adc+0x1d4>
    c662:	30 2d       	mov	r19, r0
    c664:	2f 81       	ldd	r18, Y+7	; 0x07
    c666:	38 85       	ldd	r19, Y+8	; 0x08
    c668:	49 85       	ldd	r20, Y+9	; 0x09
    c66a:	5a 85       	ldd	r21, Y+10	; 0x0a
    c66c:	0e 94 d8 87 	call	0x10fb0	; 0x10fb0 <__muluhisi3>
    c670:	4b 01       	movw	r8, r22
    c672:	5c 01       	movw	r10, r24
    c674:	07 2e       	mov	r0, r23
    c676:	74 e1       	ldi	r23, 0x14	; 20
    c678:	b6 94       	lsr	r11
    c67a:	a7 94       	ror	r10
    c67c:	97 94       	ror	r9
    c67e:	87 94       	ror	r8
    c680:	7a 95       	dec	r23
    c682:	d1 f7       	brne	.-12     	; 0xc678 <task_adc+0x1f6>
    c684:	70 2d       	mov	r23, r0
    c686:	a4 e6       	ldi	r26, 0x64	; 100
    c688:	b0 e0       	ldi	r27, 0x00	; 0
    c68a:	2b 85       	ldd	r18, Y+11	; 0x0b
    c68c:	3c 85       	ldd	r19, Y+12	; 0x0c
    c68e:	4d 85       	ldd	r20, Y+13	; 0x0d
    c690:	5e 85       	ldd	r21, Y+14	; 0x0e
    c692:	0e 94 d8 87 	call	0x10fb0	; 0x10fb0 <__muluhisi3>
    c696:	0e 94 73 84 	call	0x108e6	; 0x108e6 <__floatunsisf>
    c69a:	2d ec       	ldi	r18, 0xCD	; 205
    c69c:	3c e4       	ldi	r19, 0x4C	; 76
    c69e:	4d e1       	ldi	r20, 0x1D	; 29
    c6a0:	54 e4       	ldi	r21, 0x44	; 68
    c6a2:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    c6a6:	20 e0       	ldi	r18, 0x00	; 0
    c6a8:	30 e0       	ldi	r19, 0x00	; 0
    c6aa:	40 e8       	ldi	r20, 0x80	; 128
    c6ac:	55 e3       	ldi	r21, 0x35	; 53
    c6ae:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    c6b2:	20 e0       	ldi	r18, 0x00	; 0
    c6b4:	36 e6       	ldi	r19, 0x66	; 102
    c6b6:	45 ed       	ldi	r20, 0xD5	; 213
    c6b8:	56 e4       	ldi	r21, 0x46	; 70
    c6ba:	0e 94 6e 83 	call	0x106dc	; 0x106dc <__subsf3>
    c6be:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    c6c2:	2f b7       	in	r18, 0x3f	; 63
    c6c4:	2a 83       	std	Y+2, r18	; 0x02
    c6c6:	f8 94       	cli
    c6c8:	2a 81       	ldd	r18, Y+2	; 0x02
    c6ca:	af 85       	ldd	r26, Y+15	; 0x0f
    c6cc:	b8 89       	ldd	r27, Y+16	; 0x10
    c6ce:	a0 93 7a 26 	sts	0x267A, r26	; 0x80267a <g_adc_vctcxo_volt_1000>
    c6d2:	b0 93 7b 26 	sts	0x267B, r27	; 0x80267b <g_adc_vctcxo_volt_1000+0x1>
    c6d6:	4b 89       	ldd	r20, Y+19	; 0x13
    c6d8:	5c 89       	ldd	r21, Y+20	; 0x14
    c6da:	40 93 78 26 	sts	0x2678, r20	; 0x802678 <g_adc_5v0_volt_1000>
    c6de:	50 93 79 26 	sts	0x2679, r21	; 0x802679 <g_adc_5v0_volt_1000+0x1>
    c6e2:	af 89       	ldd	r26, Y+23	; 0x17
    c6e4:	b8 8d       	ldd	r27, Y+24	; 0x18
    c6e6:	a0 93 76 26 	sts	0x2676, r26	; 0x802676 <g_adc_vbat_volt_1000>
    c6ea:	b0 93 77 26 	sts	0x2677, r27	; 0x802677 <g_adc_vbat_volt_1000+0x1>
    c6ee:	c0 92 74 26 	sts	0x2674, r12	; 0x802674 <g_adc_io_adc4_volt_1000>
    c6f2:	d0 92 75 26 	sts	0x2675, r13	; 0x802675 <g_adc_io_adc4_volt_1000+0x1>
    c6f6:	40 92 72 26 	sts	0x2672, r4	; 0x802672 <g_adc_io_adc5_volt_1000>
    c6fa:	50 92 73 26 	sts	0x2673, r5	; 0x802673 <g_adc_io_adc5_volt_1000+0x1>
    c6fe:	80 92 70 26 	sts	0x2670, r8	; 0x802670 <g_adc_silence_volt_1000>
    c702:	90 92 71 26 	sts	0x2671, r9	; 0x802671 <g_adc_silence_volt_1000+0x1>
    c706:	60 93 6e 26 	sts	0x266E, r22	; 0x80266e <g_adc_temp_deg_100>
    c70a:	70 93 6f 26 	sts	0x266F, r23	; 0x80266f <g_adc_temp_deg_100+0x1>
    c70e:	2f bf       	out	0x3f, r18	; 63
    c710:	6a 96       	adiw	r28, 0x1a	; 26
    c712:	cd bf       	out	0x3d, r28	; 61
    c714:	de bf       	out	0x3e, r29	; 62
    c716:	df 91       	pop	r29
    c718:	cf 91       	pop	r28
    c71a:	ff 90       	pop	r15
    c71c:	ef 90       	pop	r14
    c71e:	df 90       	pop	r13
    c720:	cf 90       	pop	r12
    c722:	bf 90       	pop	r11
    c724:	af 90       	pop	r10
    c726:	9f 90       	pop	r9
    c728:	8f 90       	pop	r8
    c72a:	7f 90       	pop	r7
    c72c:	6f 90       	pop	r6
    c72e:	5f 90       	pop	r5
    c730:	4f 90       	pop	r4
    c732:	08 95       	ret

0000c734 <tc_init>:
    c734:	cf 92       	push	r12
    c736:	df 92       	push	r13
    c738:	ef 92       	push	r14
    c73a:	ff 92       	push	r15
    c73c:	0f 93       	push	r16
    c73e:	1f 93       	push	r17
    c740:	cf 93       	push	r28
    c742:	df 93       	push	r29
    c744:	1f 92       	push	r1
    c746:	cd b7       	in	r28, 0x3d	; 61
    c748:	de b7       	in	r29, 0x3e	; 62
    c74a:	8f b7       	in	r24, 0x3f	; 63
    c74c:	89 83       	std	Y+1, r24	; 0x01
    c74e:	f8 94       	cli
    c750:	89 81       	ldd	r24, Y+1	; 0x01
    c752:	c0 90 e4 26 	lds	r12, 0x26E4	; 0x8026e4 <g_xo_mode_pwm>
    c756:	d0 90 e5 26 	lds	r13, 0x26E5	; 0x8026e5 <g_xo_mode_pwm+0x1>
    c75a:	e0 90 e6 26 	lds	r14, 0x26E6	; 0x8026e6 <g_xo_mode_pwm+0x2>
    c75e:	f0 90 e7 26 	lds	r15, 0x26E7	; 0x8026e7 <g_xo_mode_pwm+0x3>
    c762:	8f bf       	out	0x3f, r24	; 63
    c764:	20 e0       	ldi	r18, 0x00	; 0
    c766:	38 e0       	ldi	r19, 0x08	; 8
    c768:	43 e0       	ldi	r20, 0x03	; 3
    c76a:	60 e0       	ldi	r22, 0x00	; 0
    c76c:	87 e6       	ldi	r24, 0x67	; 103
    c76e:	96 e2       	ldi	r25, 0x26	; 38
    c770:	54 da       	rcall	.-2904   	; 0xbc1a <pwm_init>
    c772:	6d e2       	ldi	r22, 0x2D	; 45
    c774:	87 e6       	ldi	r24, 0x67	; 103
    c776:	96 e2       	ldi	r25, 0x26	; 38
    c778:	18 db       	rcall	.-2512   	; 0xbdaa <pwm_start>
    c77a:	c0 92 3c 08 	sts	0x083C, r12	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    c77e:	d0 92 3d 08 	sts	0x083D, r13	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>
    c782:	0f 2e       	mov	r0, r31
    c784:	f0 e6       	ldi	r31, 0x60	; 96
    c786:	ef 2e       	mov	r14, r31
    c788:	f6 e2       	ldi	r31, 0x26	; 38
    c78a:	ff 2e       	mov	r15, r31
    c78c:	f0 2d       	mov	r31, r0
    c78e:	00 e4       	ldi	r16, 0x40	; 64
    c790:	18 e0       	ldi	r17, 0x08	; 8
    c792:	f7 01       	movw	r30, r14
    c794:	00 83       	st	Z, r16
    c796:	11 83       	std	Z+1, r17	; 0x01
    c798:	80 e4       	ldi	r24, 0x40	; 64
    c79a:	98 e0       	ldi	r25, 0x08	; 8
    c79c:	0e 94 87 53 	call	0xa70e	; 0xa70e <tc_enable>
    c7a0:	f8 01       	movw	r30, r16
    c7a2:	81 81       	ldd	r24, Z+1	; 0x01
    c7a4:	88 7f       	andi	r24, 0xF8	; 248
    c7a6:	81 83       	std	Z+1, r24	; 0x01
    c7a8:	80 81       	ld	r24, Z
    c7aa:	80 7f       	andi	r24, 0xF0	; 240
    c7ac:	80 83       	st	Z, r24
    c7ae:	68 ee       	ldi	r22, 0xE8	; 232
    c7b0:	73 e0       	ldi	r23, 0x03	; 3
    c7b2:	c7 01       	movw	r24, r14
    c7b4:	c6 d9       	rcall	.-3188   	; 0xbb42 <pwm_set_frequency>
    c7b6:	f7 01       	movw	r30, r14
    c7b8:	85 81       	ldd	r24, Z+5	; 0x05
    c7ba:	96 81       	ldd	r25, Z+6	; 0x06
    c7bc:	f8 01       	movw	r30, r16
    c7be:	86 a3       	std	Z+38, r24	; 0x26
    c7c0:	97 a3       	std	Z+39, r25	; 0x27
    c7c2:	8f e2       	ldi	r24, 0x2F	; 47
    c7c4:	95 e7       	ldi	r25, 0x75	; 117
    c7c6:	86 ab       	std	Z+54, r24	; 0x36
    c7c8:	97 ab       	std	Z+55, r25	; 0x37
    c7ca:	80 e4       	ldi	r24, 0x40	; 64
    c7cc:	9a e0       	ldi	r25, 0x0A	; 10
    c7ce:	0e 94 87 53 	call	0xa70e	; 0xa70e <tc_enable>
    c7d2:	e0 e4       	ldi	r30, 0x40	; 64
    c7d4:	fa e0       	ldi	r31, 0x0A	; 10
    c7d6:	81 81       	ldd	r24, Z+1	; 0x01
    c7d8:	88 7f       	andi	r24, 0xF8	; 248
    c7da:	81 83       	std	Z+1, r24	; 0x01
    c7dc:	80 e7       	ldi	r24, 0x70	; 112
    c7de:	92 e0       	ldi	r25, 0x02	; 2
    c7e0:	86 a3       	std	Z+38, r24	; 0x26
    c7e2:	97 a3       	std	Z+39, r25	; 0x27
    c7e4:	0f 90       	pop	r0
    c7e6:	df 91       	pop	r29
    c7e8:	cf 91       	pop	r28
    c7ea:	1f 91       	pop	r17
    c7ec:	0f 91       	pop	r16
    c7ee:	ff 90       	pop	r15
    c7f0:	ef 90       	pop	r14
    c7f2:	df 90       	pop	r13
    c7f4:	cf 90       	pop	r12
    c7f6:	08 95       	ret

0000c7f8 <tc_start>:
    c7f8:	cf 93       	push	r28
    c7fa:	df 93       	push	r29
    c7fc:	c0 e0       	ldi	r28, 0x00	; 0
    c7fe:	d8 e0       	ldi	r29, 0x08	; 8
    c800:	88 81       	ld	r24, Y
    c802:	80 7f       	andi	r24, 0xF0	; 240
    c804:	81 60       	ori	r24, 0x01	; 1
    c806:	88 83       	st	Y, r24
    c808:	6f ec       	ldi	r22, 0xCF	; 207
    c80a:	7f e6       	ldi	r23, 0x6F	; 111
    c80c:	80 e0       	ldi	r24, 0x00	; 0
    c80e:	98 e0       	ldi	r25, 0x08	; 8
    c810:	0e 94 06 54 	call	0xa80c	; 0xa80c <tc_set_overflow_interrupt_callback>
    c814:	8e 81       	ldd	r24, Y+6	; 0x06
    c816:	8c 7f       	andi	r24, 0xFC	; 252
    c818:	8e 83       	std	Y+6, r24	; 0x06
    c81a:	8e 81       	ldd	r24, Y+6	; 0x06
    c81c:	81 60       	ori	r24, 0x01	; 1
    c81e:	8e 83       	std	Y+6, r24	; 0x06
    c820:	c0 e4       	ldi	r28, 0x40	; 64
    c822:	d8 e0       	ldi	r29, 0x08	; 8
    c824:	88 81       	ld	r24, Y
    c826:	80 7f       	andi	r24, 0xF0	; 240
    c828:	81 60       	ori	r24, 0x01	; 1
    c82a:	88 83       	st	Y, r24
    c82c:	6a e2       	ldi	r22, 0x2A	; 42
    c82e:	7f e5       	ldi	r23, 0x5F	; 95
    c830:	80 e4       	ldi	r24, 0x40	; 64
    c832:	98 e0       	ldi	r25, 0x08	; 8
    c834:	0e 94 06 54 	call	0xa80c	; 0xa80c <tc_set_overflow_interrupt_callback>
    c838:	8e 81       	ldd	r24, Y+6	; 0x06
    c83a:	8c 7f       	andi	r24, 0xFC	; 252
    c83c:	8e 83       	std	Y+6, r24	; 0x06
    c83e:	8e 81       	ldd	r24, Y+6	; 0x06
    c840:	83 60       	ori	r24, 0x03	; 3
    c842:	8e 83       	std	Y+6, r24	; 0x06
    c844:	e0 e4       	ldi	r30, 0x40	; 64
    c846:	fa e0       	ldi	r31, 0x0A	; 10
    c848:	80 81       	ld	r24, Z
    c84a:	80 7f       	andi	r24, 0xF0	; 240
    c84c:	81 60       	ori	r24, 0x01	; 1
    c84e:	80 83       	st	Z, r24
    c850:	df 91       	pop	r29
    c852:	cf 91       	pop	r28
    c854:	08 95       	ret

0000c856 <dac_init>:
    c856:	cf 93       	push	r28
    c858:	df 93       	push	r29
    c85a:	67 e0       	ldi	r22, 0x07	; 7
    c85c:	75 e2       	ldi	r23, 0x25	; 37
    c85e:	80 e2       	ldi	r24, 0x20	; 32
    c860:	93 e0       	ldi	r25, 0x03	; 3
    c862:	0e 94 04 4d 	call	0x9a08	; 0x9a08 <dac_read_configuration>
    c866:	e7 e0       	ldi	r30, 0x07	; 7
    c868:	f5 e2       	ldi	r31, 0x25	; 37
    c86a:	81 e0       	ldi	r24, 0x01	; 1
    c86c:	82 83       	std	Z+2, r24	; 0x02
    c86e:	8c e0       	ldi	r24, 0x0C	; 12
    c870:	80 83       	st	Z, r24
    c872:	81 81       	ldd	r24, Z+1	; 0x01
    c874:	8c 79       	andi	r24, 0x9C	; 156
    c876:	83 64       	ori	r24, 0x43	; 67
    c878:	81 83       	std	Z+1, r24	; 0x01
    c87a:	84 e0       	ldi	r24, 0x04	; 4
    c87c:	83 83       	std	Z+3, r24	; 0x03
    c87e:	bf 01       	movw	r22, r30
    c880:	80 e2       	ldi	r24, 0x20	; 32
    c882:	93 e0       	ldi	r25, 0x03	; 3
    c884:	0e 94 a8 4c 	call	0x9950	; 0x9950 <dac_write_configuration>
    c888:	62 e3       	ldi	r22, 0x32	; 50
    c88a:	70 e0       	ldi	r23, 0x00	; 0
    c88c:	82 e0       	ldi	r24, 0x02	; 2
    c88e:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    c892:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    c896:	63 e3       	ldi	r22, 0x33	; 51
    c898:	70 e0       	ldi	r23, 0x00	; 0
    c89a:	82 e0       	ldi	r24, 0x02	; 2
    c89c:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    c8a0:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    c8a4:	66 e3       	ldi	r22, 0x36	; 54
    c8a6:	70 e0       	ldi	r23, 0x00	; 0
    c8a8:	82 e0       	ldi	r24, 0x02	; 2
    c8aa:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    c8ae:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    c8b2:	67 e3       	ldi	r22, 0x37	; 55
    c8b4:	70 e0       	ldi	r23, 0x00	; 0
    c8b6:	82 e0       	ldi	r24, 0x02	; 2
    c8b8:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    c8bc:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
    c8c0:	ac ef       	ldi	r26, 0xFC	; 252
    c8c2:	b4 e2       	ldi	r27, 0x24	; 36
    c8c4:	8b e0       	ldi	r24, 0x0B	; 11
    c8c6:	ed 01       	movw	r28, r26
    c8c8:	e8 2f       	mov	r30, r24
    c8ca:	19 92       	st	Y+, r1
    c8cc:	ea 95       	dec	r30
    c8ce:	e9 f7       	brne	.-6      	; 0xc8ca <dac_init+0x74>
    c8d0:	e1 ef       	ldi	r30, 0xF1	; 241
    c8d2:	f4 e2       	ldi	r31, 0x24	; 36
    c8d4:	ef 01       	movw	r28, r30
    c8d6:	19 92       	st	Y+, r1
    c8d8:	8a 95       	dec	r24
    c8da:	e9 f7       	brne	.-6      	; 0xc8d6 <dac_init+0x80>
    c8dc:	80 e2       	ldi	r24, 0x20	; 32
    c8de:	90 e0       	ldi	r25, 0x00	; 0
    c8e0:	14 96       	adiw	r26, 0x04	; 4
    c8e2:	8d 93       	st	X+, r24
    c8e4:	9c 93       	st	X, r25
    c8e6:	15 97       	sbiw	r26, 0x05	; 5
    c8e8:	84 83       	std	Z+4, r24	; 0x04
    c8ea:	95 83       	std	Z+5, r25	; 0x05
    c8ec:	85 ea       	ldi	r24, 0xA5	; 165
    c8ee:	94 e2       	ldi	r25, 0x24	; 36
    c8f0:	17 96       	adiw	r26, 0x07	; 7
    c8f2:	8d 93       	st	X+, r24
    c8f4:	9c 93       	st	X, r25
    c8f6:	18 97       	sbiw	r26, 0x08	; 8
    c8f8:	29 ed       	ldi	r18, 0xD9	; 217
    c8fa:	12 96       	adiw	r26, 0x02	; 2
    c8fc:	2c 93       	st	X, r18
    c8fe:	12 97       	sbiw	r26, 0x02	; 2
    c900:	88 e3       	ldi	r24, 0x38	; 56
    c902:	93 e0       	ldi	r25, 0x03	; 3
    c904:	19 96       	adiw	r26, 0x09	; 9
    c906:	8d 93       	st	X+, r24
    c908:	9c 93       	st	X, r25
    c90a:	1a 97       	sbiw	r26, 0x0a	; 10
    c90c:	45 ec       	ldi	r20, 0xC5	; 197
    c90e:	54 e2       	ldi	r21, 0x24	; 36
    c910:	47 83       	std	Z+7, r20	; 0x07
    c912:	50 87       	std	Z+8, r21	; 0x08
    c914:	22 83       	std	Z+2, r18	; 0x02
    c916:	81 87       	std	Z+9, r24	; 0x09
    c918:	92 87       	std	Z+10, r25	; 0x0a
    c91a:	95 e2       	ldi	r25, 0x25	; 37
    c91c:	13 96       	adiw	r26, 0x03	; 3
    c91e:	9c 93       	st	X, r25
    c920:	13 97       	sbiw	r26, 0x03	; 3
    c922:	86 e0       	ldi	r24, 0x06	; 6
    c924:	8c 93       	st	X, r24
    c926:	93 83       	std	Z+3, r25	; 0x03
    c928:	80 83       	st	Z, r24
    c92a:	0e 94 0e 28 	call	0x501c	; 0x501c <rtc_get_time>
    c92e:	a7 dc       	rcall	.-1714   	; 0xc27e <task_dac>
    c930:	df 91       	pop	r29
    c932:	cf 91       	pop	r28
    c934:	08 95       	ret

0000c936 <calc_next_frame>:
    c936:	8f 92       	push	r8
    c938:	9f 92       	push	r9
    c93a:	af 92       	push	r10
    c93c:	bf 92       	push	r11
    c93e:	cf 92       	push	r12
    c940:	df 92       	push	r13
    c942:	ef 92       	push	r14
    c944:	ff 92       	push	r15
    c946:	0f 93       	push	r16
    c948:	1f 93       	push	r17
    c94a:	cf 93       	push	r28
    c94c:	df 93       	push	r29
    c94e:	6b 01       	movw	r12, r22
    c950:	5a 01       	movw	r10, r20
    c952:	79 01       	movw	r14, r18
    c954:	48 01       	movw	r8, r16
    c956:	ec 01       	movw	r28, r24
    c958:	8c 01       	movw	r16, r24
    c95a:	00 5e       	subi	r16, 0xE0	; 224
    c95c:	1f 4f       	sbci	r17, 0xFF	; 255
    c95e:	f6 01       	movw	r30, r12
    c960:	82 81       	ldd	r24, Z+2	; 0x02
    c962:	93 81       	ldd	r25, Z+3	; 0x03
    c964:	0e 94 a6 28 	call	0x514c	; 0x514c <get_interpolated_sine>
    c968:	88 83       	st	Y, r24
    c96a:	99 83       	std	Y+1, r25	; 0x01
    c96c:	f7 01       	movw	r30, r14
    c96e:	82 81       	ldd	r24, Z+2	; 0x02
    c970:	93 81       	ldd	r25, Z+3	; 0x03
    c972:	0e 94 a6 28 	call	0x514c	; 0x514c <get_interpolated_sine>
    c976:	8a 83       	std	Y+2, r24	; 0x02
    c978:	9b 83       	std	Y+3, r25	; 0x03
    c97a:	f6 01       	movw	r30, r12
    c97c:	40 81       	ld	r20, Z
    c97e:	51 81       	ldd	r21, Z+1	; 0x01
    c980:	62 81       	ldd	r22, Z+2	; 0x02
    c982:	73 81       	ldd	r23, Z+3	; 0x03
    c984:	f5 01       	movw	r30, r10
    c986:	80 81       	ld	r24, Z
    c988:	91 81       	ldd	r25, Z+1	; 0x01
    c98a:	a2 81       	ldd	r26, Z+2	; 0x02
    c98c:	b3 81       	ldd	r27, Z+3	; 0x03
    c98e:	84 0f       	add	r24, r20
    c990:	95 1f       	adc	r25, r21
    c992:	a6 1f       	adc	r26, r22
    c994:	b7 1f       	adc	r27, r23
    c996:	f6 01       	movw	r30, r12
    c998:	80 83       	st	Z, r24
    c99a:	91 83       	std	Z+1, r25	; 0x01
    c99c:	a2 83       	std	Z+2, r26	; 0x02
    c99e:	b3 83       	std	Z+3, r27	; 0x03
    c9a0:	f7 01       	movw	r30, r14
    c9a2:	40 81       	ld	r20, Z
    c9a4:	51 81       	ldd	r21, Z+1	; 0x01
    c9a6:	62 81       	ldd	r22, Z+2	; 0x02
    c9a8:	73 81       	ldd	r23, Z+3	; 0x03
    c9aa:	f4 01       	movw	r30, r8
    c9ac:	80 81       	ld	r24, Z
    c9ae:	91 81       	ldd	r25, Z+1	; 0x01
    c9b0:	a2 81       	ldd	r26, Z+2	; 0x02
    c9b2:	b3 81       	ldd	r27, Z+3	; 0x03
    c9b4:	84 0f       	add	r24, r20
    c9b6:	95 1f       	adc	r25, r21
    c9b8:	a6 1f       	adc	r26, r22
    c9ba:	b7 1f       	adc	r27, r23
    c9bc:	f7 01       	movw	r30, r14
    c9be:	80 83       	st	Z, r24
    c9c0:	91 83       	std	Z+1, r25	; 0x01
    c9c2:	a2 83       	std	Z+2, r26	; 0x02
    c9c4:	b3 83       	std	Z+3, r27	; 0x03
    c9c6:	24 96       	adiw	r28, 0x04	; 4
    c9c8:	c0 17       	cp	r28, r16
    c9ca:	d1 07       	cpc	r29, r17
    c9cc:	41 f6       	brne	.-112    	; 0xc95e <calc_next_frame+0x28>
    c9ce:	df 91       	pop	r29
    c9d0:	cf 91       	pop	r28
    c9d2:	1f 91       	pop	r17
    c9d4:	0f 91       	pop	r16
    c9d6:	ff 90       	pop	r15
    c9d8:	ef 90       	pop	r14
    c9da:	df 90       	pop	r13
    c9dc:	cf 90       	pop	r12
    c9de:	bf 90       	pop	r11
    c9e0:	af 90       	pop	r10
    c9e2:	9f 90       	pop	r9
    c9e4:	8f 90       	pop	r8
    c9e6:	08 95       	ret

0000c9e8 <dac_start>:
    c9e8:	ff 92       	push	r15
    c9ea:	0f 93       	push	r16
    c9ec:	1f 93       	push	r17
    c9ee:	cf 93       	push	r28
    c9f0:	df 93       	push	r29
    c9f2:	00 d0       	rcall	.+0      	; 0xc9f4 <dac_start+0xc>
    c9f4:	1f 92       	push	r1
    c9f6:	cd b7       	in	r28, 0x3d	; 61
    c9f8:	de b7       	in	r29, 0x3e	; 62
    c9fa:	80 e2       	ldi	r24, 0x20	; 32
    c9fc:	93 e0       	ldi	r25, 0x03	; 3
    c9fe:	0e 94 56 4c 	call	0x98ac	; 0x98ac <dac_enable>
    ca02:	0e 94 d7 26 	call	0x4dae	; 0x4dae <dma_enable>
    ca06:	66 e8       	ldi	r22, 0x86	; 134
    ca08:	75 e6       	ldi	r23, 0x65	; 101
    ca0a:	80 e0       	ldi	r24, 0x00	; 0
    ca0c:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <dma_set_callback>
    ca10:	ec ef       	ldi	r30, 0xFC	; 252
    ca12:	f4 e2       	ldi	r31, 0x24	; 36
    ca14:	81 81       	ldd	r24, Z+1	; 0x01
    ca16:	80 7f       	andi	r24, 0xF0	; 240
    ca18:	8a 60       	ori	r24, 0x0A	; 10
    ca1a:	81 83       	std	Z+1, r24	; 0x01
    ca1c:	63 e6       	ldi	r22, 0x63	; 99
    ca1e:	75 e6       	ldi	r23, 0x65	; 101
    ca20:	81 e0       	ldi	r24, 0x01	; 1
    ca22:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <dma_set_callback>
    ca26:	e1 ef       	ldi	r30, 0xF1	; 241
    ca28:	f4 e2       	ldi	r31, 0x24	; 36
    ca2a:	81 81       	ldd	r24, Z+1	; 0x01
    ca2c:	80 7f       	andi	r24, 0xF0	; 240
    ca2e:	8a 60       	ori	r24, 0x0A	; 10
    ca30:	81 83       	std	Z+1, r24	; 0x01
    ca32:	8f b7       	in	r24, 0x3f	; 63
    ca34:	8a 83       	std	Y+2, r24	; 0x02
    ca36:	f8 94       	cli
    ca38:	9a 81       	ldd	r25, Y+2	; 0x02
    ca3a:	e0 e0       	ldi	r30, 0x00	; 0
    ca3c:	f1 e0       	ldi	r31, 0x01	; 1
    ca3e:	80 81       	ld	r24, Z
    ca40:	8c 7f       	andi	r24, 0xFC	; 252
    ca42:	82 60       	ori	r24, 0x02	; 2
    ca44:	80 83       	st	Z, r24
    ca46:	9f bf       	out	0x3f, r25	; 63
    ca48:	8f b7       	in	r24, 0x3f	; 63
    ca4a:	89 83       	std	Y+1, r24	; 0x01
    ca4c:	f8 94       	cli
    ca4e:	99 81       	ldd	r25, Y+1	; 0x01
    ca50:	80 81       	ld	r24, Z
    ca52:	83 7f       	andi	r24, 0xF3	; 243
    ca54:	84 60       	ori	r24, 0x04	; 4
    ca56:	80 83       	st	Z, r24
    ca58:	9f bf       	out	0x3f, r25	; 63
    ca5a:	6c ef       	ldi	r22, 0xFC	; 252
    ca5c:	74 e2       	ldi	r23, 0x24	; 36
    ca5e:	80 e0       	ldi	r24, 0x00	; 0
    ca60:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <dma_channel_write_config>
    ca64:	61 ef       	ldi	r22, 0xF1	; 241
    ca66:	74 e2       	ldi	r23, 0x24	; 36
    ca68:	81 e0       	ldi	r24, 0x01	; 1
    ca6a:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <dma_channel_write_config>
    ca6e:	8f b7       	in	r24, 0x3f	; 63
    ca70:	8b 83       	std	Y+3, r24	; 0x03
    ca72:	f8 94       	cli
    ca74:	fb 80       	ldd	r15, Y+3	; 0x03
    ca76:	05 ee       	ldi	r16, 0xE5	; 229
    ca78:	14 e2       	ldi	r17, 0x24	; 36
    ca7a:	2b e0       	ldi	r18, 0x0B	; 11
    ca7c:	30 e2       	ldi	r19, 0x20	; 32
    ca7e:	4d ee       	ldi	r20, 0xED	; 237
    ca80:	54 e2       	ldi	r21, 0x24	; 36
    ca82:	69 ee       	ldi	r22, 0xE9	; 233
    ca84:	74 e2       	ldi	r23, 0x24	; 36
    ca86:	85 ea       	ldi	r24, 0xA5	; 165
    ca88:	94 e2       	ldi	r25, 0x24	; 36
    ca8a:	55 df       	rcall	.-342    	; 0xc936 <calc_next_frame>
    ca8c:	2b e0       	ldi	r18, 0x0B	; 11
    ca8e:	30 e2       	ldi	r19, 0x20	; 32
    ca90:	4d ee       	ldi	r20, 0xED	; 237
    ca92:	54 e2       	ldi	r21, 0x24	; 36
    ca94:	69 ee       	ldi	r22, 0xE9	; 233
    ca96:	74 e2       	ldi	r23, 0x24	; 36
    ca98:	85 ec       	ldi	r24, 0xC5	; 197
    ca9a:	94 e2       	ldi	r25, 0x24	; 36
    ca9c:	4c df       	rcall	.-360    	; 0xc936 <calc_next_frame>
    ca9e:	8f b7       	in	r24, 0x3f	; 63
    caa0:	8c 83       	std	Y+4, r24	; 0x04
    caa2:	f8 94       	cli
    caa4:	9c 81       	ldd	r25, Y+4	; 0x04
    caa6:	e0 e1       	ldi	r30, 0x10	; 16
    caa8:	f1 e0       	ldi	r31, 0x01	; 1
    caaa:	80 81       	ld	r24, Z
    caac:	80 68       	ori	r24, 0x80	; 128
    caae:	80 83       	st	Z, r24
    cab0:	9f bf       	out	0x3f, r25	; 63
    cab2:	ff be       	out	0x3f, r15	; 63
    cab4:	24 96       	adiw	r28, 0x04	; 4
    cab6:	cd bf       	out	0x3d, r28	; 61
    cab8:	de bf       	out	0x3e, r29	; 62
    caba:	df 91       	pop	r29
    cabc:	cf 91       	pop	r28
    cabe:	1f 91       	pop	r17
    cac0:	0f 91       	pop	r16
    cac2:	ff 90       	pop	r15
    cac4:	08 95       	ret

0000cac6 <isr_dma_dac_ch0_B>:
    cac6:	0f 93       	push	r16
    cac8:	1f 93       	push	r17
    caca:	cf 93       	push	r28
    cacc:	df 93       	push	r29
    cace:	1f 92       	push	r1
    cad0:	cd b7       	in	r28, 0x3d	; 61
    cad2:	de b7       	in	r29, 0x3e	; 62
    cad4:	8f b7       	in	r24, 0x3f	; 63
    cad6:	89 83       	std	Y+1, r24	; 0x01
    cad8:	f8 94       	cli
    cada:	99 81       	ldd	r25, Y+1	; 0x01
    cadc:	e0 e1       	ldi	r30, 0x10	; 16
    cade:	f1 e0       	ldi	r31, 0x01	; 1
    cae0:	80 81       	ld	r24, Z
    cae2:	80 68       	ori	r24, 0x80	; 128
    cae4:	80 83       	st	Z, r24
    cae6:	9f bf       	out	0x3f, r25	; 63
    cae8:	78 94       	sei
    caea:	05 ee       	ldi	r16, 0xE5	; 229
    caec:	14 e2       	ldi	r17, 0x24	; 36
    caee:	2b e0       	ldi	r18, 0x0B	; 11
    caf0:	30 e2       	ldi	r19, 0x20	; 32
    caf2:	4d ee       	ldi	r20, 0xED	; 237
    caf4:	54 e2       	ldi	r21, 0x24	; 36
    caf6:	69 ee       	ldi	r22, 0xE9	; 233
    caf8:	74 e2       	ldi	r23, 0x24	; 36
    cafa:	85 ec       	ldi	r24, 0xC5	; 197
    cafc:	94 e2       	ldi	r25, 0x24	; 36
    cafe:	1b df       	rcall	.-458    	; 0xc936 <calc_next_frame>
    cb00:	0f 90       	pop	r0
    cb02:	df 91       	pop	r29
    cb04:	cf 91       	pop	r28
    cb06:	1f 91       	pop	r17
    cb08:	0f 91       	pop	r16
    cb0a:	08 95       	ret

0000cb0c <isr_dma_dac_ch0_A>:
    cb0c:	0f 93       	push	r16
    cb0e:	1f 93       	push	r17
    cb10:	cf 93       	push	r28
    cb12:	df 93       	push	r29
    cb14:	1f 92       	push	r1
    cb16:	cd b7       	in	r28, 0x3d	; 61
    cb18:	de b7       	in	r29, 0x3e	; 62
    cb1a:	8f b7       	in	r24, 0x3f	; 63
    cb1c:	89 83       	std	Y+1, r24	; 0x01
    cb1e:	f8 94       	cli
    cb20:	99 81       	ldd	r25, Y+1	; 0x01
    cb22:	e0 e2       	ldi	r30, 0x20	; 32
    cb24:	f1 e0       	ldi	r31, 0x01	; 1
    cb26:	80 81       	ld	r24, Z
    cb28:	80 68       	ori	r24, 0x80	; 128
    cb2a:	80 83       	st	Z, r24
    cb2c:	9f bf       	out	0x3f, r25	; 63
    cb2e:	78 94       	sei
    cb30:	05 ee       	ldi	r16, 0xE5	; 229
    cb32:	14 e2       	ldi	r17, 0x24	; 36
    cb34:	2b e0       	ldi	r18, 0x0B	; 11
    cb36:	30 e2       	ldi	r19, 0x20	; 32
    cb38:	4d ee       	ldi	r20, 0xED	; 237
    cb3a:	54 e2       	ldi	r21, 0x24	; 36
    cb3c:	69 ee       	ldi	r22, 0xE9	; 233
    cb3e:	74 e2       	ldi	r23, 0x24	; 36
    cb40:	85 ea       	ldi	r24, 0xA5	; 165
    cb42:	94 e2       	ldi	r25, 0x24	; 36
    cb44:	f8 de       	rcall	.-528    	; 0xc936 <calc_next_frame>
    cb46:	0f 90       	pop	r0
    cb48:	df 91       	pop	r29
    cb4a:	cf 91       	pop	r28
    cb4c:	1f 91       	pop	r17
    cb4e:	0f 91       	pop	r16
    cb50:	08 95       	ret

0000cb52 <adc_init>:
    cb52:	8f 92       	push	r8
    cb54:	9f 92       	push	r9
    cb56:	af 92       	push	r10
    cb58:	bf 92       	push	r11
    cb5a:	cf 92       	push	r12
    cb5c:	df 92       	push	r13
    cb5e:	ef 92       	push	r14
    cb60:	ff 92       	push	r15
    cb62:	0f 93       	push	r16
    cb64:	1f 93       	push	r17
    cb66:	cf 93       	push	r28
    cb68:	df 93       	push	r29
    cb6a:	e0 e1       	ldi	r30, 0x10	; 16
    cb6c:	f6 e0       	ldi	r31, 0x06	; 6
    cb6e:	80 81       	ld	r24, Z
    cb70:	87 60       	ori	r24, 0x07	; 7
    cb72:	80 83       	st	Z, r24
    cb74:	e1 e1       	ldi	r30, 0x11	; 17
    cb76:	f6 e0       	ldi	r31, 0x06	; 6
    cb78:	80 81       	ld	r24, Z
    cb7a:	87 60       	ori	r24, 0x07	; 7
    cb7c:	80 83       	st	Z, r24
    cb7e:	e2 e1       	ldi	r30, 0x12	; 18
    cb80:	f6 e0       	ldi	r31, 0x06	; 6
    cb82:	80 81       	ld	r24, Z
    cb84:	87 60       	ori	r24, 0x07	; 7
    cb86:	80 83       	st	Z, r24
    cb88:	e3 e1       	ldi	r30, 0x13	; 19
    cb8a:	f6 e0       	ldi	r31, 0x06	; 6
    cb8c:	80 81       	ld	r24, Z
    cb8e:	87 60       	ori	r24, 0x07	; 7
    cb90:	80 83       	st	Z, r24
    cb92:	e4 e1       	ldi	r30, 0x14	; 20
    cb94:	f6 e0       	ldi	r31, 0x06	; 6
    cb96:	80 81       	ld	r24, Z
    cb98:	87 60       	ori	r24, 0x07	; 7
    cb9a:	80 83       	st	Z, r24
    cb9c:	e5 e1       	ldi	r30, 0x15	; 21
    cb9e:	f6 e0       	ldi	r31, 0x06	; 6
    cba0:	80 81       	ld	r24, Z
    cba2:	87 60       	ori	r24, 0x07	; 7
    cba4:	80 83       	st	Z, r24
    cba6:	e2 e3       	ldi	r30, 0x32	; 50
    cba8:	f6 e0       	ldi	r31, 0x06	; 6
    cbaa:	80 81       	ld	r24, Z
    cbac:	87 60       	ori	r24, 0x07	; 7
    cbae:	80 83       	st	Z, r24
    cbb0:	e3 e3       	ldi	r30, 0x33	; 51
    cbb2:	f6 e0       	ldi	r31, 0x06	; 6
    cbb4:	80 81       	ld	r24, Z
    cbb6:	87 60       	ori	r24, 0x07	; 7
    cbb8:	80 83       	st	Z, r24
    cbba:	6d ed       	ldi	r22, 0xDD	; 221
    cbbc:	76 e2       	ldi	r23, 0x26	; 38
    cbbe:	80 e0       	ldi	r24, 0x00	; 0
    cbc0:	92 e0       	ldi	r25, 0x02	; 2
    cbc2:	0e 94 68 4b 	call	0x96d0	; 0x96d0 <adc_read_configuration>
    cbc6:	49 ed       	ldi	r20, 0xD9	; 217
    cbc8:	56 e2       	ldi	r21, 0x26	; 38
    cbca:	61 e0       	ldi	r22, 0x01	; 1
    cbcc:	80 e0       	ldi	r24, 0x00	; 0
    cbce:	92 e0       	ldi	r25, 0x02	; 2
    cbd0:	0e 94 ec 4b 	call	0x97d8	; 0x97d8 <adcch_read_configuration>
    cbd4:	45 ed       	ldi	r20, 0xD5	; 213
    cbd6:	56 e2       	ldi	r21, 0x26	; 38
    cbd8:	62 e0       	ldi	r22, 0x02	; 2
    cbda:	80 e0       	ldi	r24, 0x00	; 0
    cbdc:	92 e0       	ldi	r25, 0x02	; 2
    cbde:	0e 94 ec 4b 	call	0x97d8	; 0x97d8 <adcch_read_configuration>
    cbe2:	41 ed       	ldi	r20, 0xD1	; 209
    cbe4:	56 e2       	ldi	r21, 0x26	; 38
    cbe6:	64 e0       	ldi	r22, 0x04	; 4
    cbe8:	80 e0       	ldi	r24, 0x00	; 0
    cbea:	92 e0       	ldi	r25, 0x02	; 2
    cbec:	0e 94 ec 4b 	call	0x97d8	; 0x97d8 <adcch_read_configuration>
    cbf0:	4d ec       	ldi	r20, 0xCD	; 205
    cbf2:	56 e2       	ldi	r21, 0x26	; 38
    cbf4:	68 e0       	ldi	r22, 0x08	; 8
    cbf6:	80 e0       	ldi	r24, 0x00	; 0
    cbf8:	92 e0       	ldi	r25, 0x02	; 2
    cbfa:	0e 94 ec 4b 	call	0x97d8	; 0x97d8 <adcch_read_configuration>
    cbfe:	66 ec       	ldi	r22, 0xC6	; 198
    cc00:	76 e2       	ldi	r23, 0x26	; 38
    cc02:	80 e4       	ldi	r24, 0x40	; 64
    cc04:	92 e0       	ldi	r25, 0x02	; 2
    cc06:	0e 94 68 4b 	call	0x96d0	; 0x96d0 <adc_read_configuration>
    cc0a:	42 ec       	ldi	r20, 0xC2	; 194
    cc0c:	56 e2       	ldi	r21, 0x26	; 38
    cc0e:	61 e0       	ldi	r22, 0x01	; 1
    cc10:	80 e4       	ldi	r24, 0x40	; 64
    cc12:	92 e0       	ldi	r25, 0x02	; 2
    cc14:	0e 94 ec 4b 	call	0x97d8	; 0x97d8 <adcch_read_configuration>
    cc18:	ad ed       	ldi	r26, 0xDD	; 221
    cc1a:	b6 e2       	ldi	r27, 0x26	; 38
    cc1c:	83 e0       	ldi	r24, 0x03	; 3
    cc1e:	14 96       	adiw	r26, 0x04	; 4
    cc20:	8c 93       	st	X, r24
    cc22:	14 97       	sbiw	r26, 0x04	; 4
    cc24:	e6 ec       	ldi	r30, 0xC6	; 198
    cc26:	f6 e2       	ldi	r31, 0x26	; 38
    cc28:	87 e0       	ldi	r24, 0x07	; 7
    cc2a:	84 83       	std	Z+4, r24	; 0x04
    cc2c:	12 96       	adiw	r26, 0x02	; 2
    cc2e:	3c 91       	ld	r19, X
    cc30:	12 97       	sbiw	r26, 0x02	; 2
    cc32:	22 81       	ldd	r18, Z+2	; 0x02
    cc34:	11 96       	adiw	r26, 0x01	; 1
    cc36:	9c 91       	ld	r25, X
    cc38:	11 97       	sbiw	r26, 0x01	; 1
    cc3a:	81 81       	ldd	r24, Z+1	; 0x01
    cc3c:	0f 2e       	mov	r0, r31
    cc3e:	f9 ed       	ldi	r31, 0xD9	; 217
    cc40:	8f 2e       	mov	r8, r31
    cc42:	f6 e2       	ldi	r31, 0x26	; 38
    cc44:	9f 2e       	mov	r9, r31
    cc46:	f0 2d       	mov	r31, r0
    cc48:	41 e0       	ldi	r20, 0x01	; 1
    cc4a:	e4 01       	movw	r28, r8
    cc4c:	48 83       	st	Y, r20
    cc4e:	58 e0       	ldi	r21, 0x08	; 8
    cc50:	59 83       	std	Y+1, r21	; 0x01
    cc52:	0f 2e       	mov	r0, r31
    cc54:	f5 ed       	ldi	r31, 0xD5	; 213
    cc56:	af 2e       	mov	r10, r31
    cc58:	f6 e2       	ldi	r31, 0x26	; 38
    cc5a:	bf 2e       	mov	r11, r31
    cc5c:	f0 2d       	mov	r31, r0
    cc5e:	e5 01       	movw	r28, r10
    cc60:	48 83       	st	Y, r20
    cc62:	60 e2       	ldi	r22, 0x20	; 32
    cc64:	69 83       	std	Y+1, r22	; 0x01
    cc66:	0f 2e       	mov	r0, r31
    cc68:	f1 ed       	ldi	r31, 0xD1	; 209
    cc6a:	cf 2e       	mov	r12, r31
    cc6c:	f6 e2       	ldi	r31, 0x26	; 38
    cc6e:	df 2e       	mov	r13, r31
    cc70:	f0 2d       	mov	r31, r0
    cc72:	e6 01       	movw	r28, r12
    cc74:	48 83       	st	Y, r20
    cc76:	68 e2       	ldi	r22, 0x28	; 40
    cc78:	69 83       	std	Y+1, r22	; 0x01
    cc7a:	0f 2e       	mov	r0, r31
    cc7c:	fd ec       	ldi	r31, 0xCD	; 205
    cc7e:	ef 2e       	mov	r14, r31
    cc80:	f6 e2       	ldi	r31, 0x26	; 38
    cc82:	ff 2e       	mov	r15, r31
    cc84:	f0 2d       	mov	r31, r0
    cc86:	e7 01       	movw	r28, r14
    cc88:	18 82       	st	Y, r1
    cc8a:	59 83       	std	Y+1, r21	; 0x01
    cc8c:	02 ec       	ldi	r16, 0xC2	; 194
    cc8e:	16 e2       	ldi	r17, 0x26	; 38
    cc90:	e8 01       	movw	r28, r16
    cc92:	18 82       	st	Y, r1
    cc94:	19 82       	std	Y+1, r1	; 0x01
    cc96:	3e 78       	andi	r19, 0x8E	; 142
    cc98:	32 62       	ori	r19, 0x22	; 34
    cc9a:	12 96       	adiw	r26, 0x02	; 2
    cc9c:	3c 93       	st	X, r19
    cc9e:	12 97       	sbiw	r26, 0x02	; 2
    cca0:	2f 78       	andi	r18, 0x8F	; 143
    cca2:	23 60       	ori	r18, 0x03	; 3
    cca4:	22 83       	std	Z+2, r18	; 0x02
    cca6:	22 e0       	ldi	r18, 0x02	; 2
    cca8:	e4 01       	movw	r28, r8
    ccaa:	2b 83       	std	Y+3, r18	; 0x03
    ccac:	91 70       	andi	r25, 0x01	; 1
    ccae:	90 64       	ori	r25, 0x40	; 64
    ccb0:	11 96       	adiw	r26, 0x01	; 1
    ccb2:	9c 93       	st	X, r25
    ccb4:	11 97       	sbiw	r26, 0x01	; 1
    ccb6:	9c e0       	ldi	r25, 0x0C	; 12
    ccb8:	13 96       	adiw	r26, 0x03	; 3
    ccba:	9c 93       	st	X, r25
    ccbc:	81 70       	andi	r24, 0x01	; 1
    ccbe:	80 66       	ori	r24, 0x60	; 96
    ccc0:	81 83       	std	Z+1, r24	; 0x01
    ccc2:	43 83       	std	Z+3, r20	; 0x03
    ccc4:	6e e4       	ldi	r22, 0x4E	; 78
    ccc6:	7f e5       	ldi	r23, 0x5F	; 95
    ccc8:	80 e0       	ldi	r24, 0x00	; 0
    ccca:	92 e0       	ldi	r25, 0x02	; 2
    cccc:	0e 94 bc 48 	call	0x9178	; 0x9178 <adc_set_callback>
    ccd0:	65 ef       	ldi	r22, 0xF5	; 245
    ccd2:	70 e6       	ldi	r23, 0x60	; 96
    ccd4:	80 e4       	ldi	r24, 0x40	; 64
    ccd6:	92 e0       	ldi	r25, 0x02	; 2
    ccd8:	0e 94 bc 48 	call	0x9178	; 0x9178 <adc_set_callback>
    ccdc:	f5 01       	movw	r30, r10
    ccde:	32 81       	ldd	r19, Z+2	; 0x02
    cce0:	e6 01       	movw	r28, r12
    cce2:	2a 81       	ldd	r18, Y+2	; 0x02
    cce4:	f7 01       	movw	r30, r14
    cce6:	92 81       	ldd	r25, Z+2	; 0x02
    cce8:	e8 01       	movw	r28, r16
    ccea:	8a 81       	ldd	r24, Y+2	; 0x02
    ccec:	f4 01       	movw	r30, r8
    ccee:	42 81       	ldd	r20, Z+2	; 0x02
    ccf0:	40 7f       	andi	r20, 0xF0	; 240
    ccf2:	41 60       	ori	r20, 0x01	; 1
    ccf4:	42 83       	std	Z+2, r20	; 0x02
    ccf6:	30 7f       	andi	r19, 0xF0	; 240
    ccf8:	31 60       	ori	r19, 0x01	; 1
    ccfa:	e5 01       	movw	r28, r10
    ccfc:	3a 83       	std	Y+2, r19	; 0x02
    ccfe:	20 7f       	andi	r18, 0xF0	; 240
    cd00:	21 60       	ori	r18, 0x01	; 1
    cd02:	f6 01       	movw	r30, r12
    cd04:	22 83       	std	Z+2, r18	; 0x02
    cd06:	90 7f       	andi	r25, 0xF0	; 240
    cd08:	91 60       	ori	r25, 0x01	; 1
    cd0a:	e7 01       	movw	r28, r14
    cd0c:	9a 83       	std	Y+2, r25	; 0x02
    cd0e:	80 7f       	andi	r24, 0xF0	; 240
    cd10:	81 60       	ori	r24, 0x01	; 1
    cd12:	f8 01       	movw	r30, r16
    cd14:	82 83       	std	Z+2, r24	; 0x02
    cd16:	6d ed       	ldi	r22, 0xDD	; 221
    cd18:	76 e2       	ldi	r23, 0x26	; 38
    cd1a:	80 e0       	ldi	r24, 0x00	; 0
    cd1c:	92 e0       	ldi	r25, 0x02	; 2
    cd1e:	0e 94 fe 4a 	call	0x95fc	; 0x95fc <adc_write_configuration>
    cd22:	a4 01       	movw	r20, r8
    cd24:	61 e0       	ldi	r22, 0x01	; 1
    cd26:	80 e0       	ldi	r24, 0x00	; 0
    cd28:	92 e0       	ldi	r25, 0x02	; 2
    cd2a:	0e 94 a1 4b 	call	0x9742	; 0x9742 <adcch_write_configuration>
    cd2e:	a5 01       	movw	r20, r10
    cd30:	62 e0       	ldi	r22, 0x02	; 2
    cd32:	80 e0       	ldi	r24, 0x00	; 0
    cd34:	92 e0       	ldi	r25, 0x02	; 2
    cd36:	0e 94 a1 4b 	call	0x9742	; 0x9742 <adcch_write_configuration>
    cd3a:	a6 01       	movw	r20, r12
    cd3c:	64 e0       	ldi	r22, 0x04	; 4
    cd3e:	80 e0       	ldi	r24, 0x00	; 0
    cd40:	92 e0       	ldi	r25, 0x02	; 2
    cd42:	0e 94 a1 4b 	call	0x9742	; 0x9742 <adcch_write_configuration>
    cd46:	a7 01       	movw	r20, r14
    cd48:	68 e0       	ldi	r22, 0x08	; 8
    cd4a:	80 e0       	ldi	r24, 0x00	; 0
    cd4c:	92 e0       	ldi	r25, 0x02	; 2
    cd4e:	0e 94 a1 4b 	call	0x9742	; 0x9742 <adcch_write_configuration>
    cd52:	66 ec       	ldi	r22, 0xC6	; 198
    cd54:	76 e2       	ldi	r23, 0x26	; 38
    cd56:	80 e4       	ldi	r24, 0x40	; 64
    cd58:	92 e0       	ldi	r25, 0x02	; 2
    cd5a:	0e 94 fe 4a 	call	0x95fc	; 0x95fc <adc_write_configuration>
    cd5e:	a8 01       	movw	r20, r16
    cd60:	61 e0       	ldi	r22, 0x01	; 1
    cd62:	80 e4       	ldi	r24, 0x40	; 64
    cd64:	92 e0       	ldi	r25, 0x02	; 2
    cd66:	0e 94 a1 4b 	call	0x9742	; 0x9742 <adcch_write_configuration>
    cd6a:	61 e2       	ldi	r22, 0x21	; 33
    cd6c:	70 e0       	ldi	r23, 0x00	; 0
    cd6e:	82 e0       	ldi	r24, 0x02	; 2
    cd70:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    cd74:	c8 2f       	mov	r28, r24
    cd76:	d0 e0       	ldi	r29, 0x00	; 0
    cd78:	dc 2f       	mov	r29, r28
    cd7a:	cc 27       	eor	r28, r28
    cd7c:	60 e2       	ldi	r22, 0x20	; 32
    cd7e:	70 e0       	ldi	r23, 0x00	; 0
    cd80:	82 e0       	ldi	r24, 0x02	; 2
    cd82:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    cd86:	c8 2b       	or	r28, r24
    cd88:	c0 93 0c 02 	sts	0x020C, r28	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    cd8c:	d0 93 0d 02 	sts	0x020D, r29	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    cd90:	65 e2       	ldi	r22, 0x25	; 37
    cd92:	70 e0       	ldi	r23, 0x00	; 0
    cd94:	82 e0       	ldi	r24, 0x02	; 2
    cd96:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    cd9a:	c8 2f       	mov	r28, r24
    cd9c:	d0 e0       	ldi	r29, 0x00	; 0
    cd9e:	dc 2f       	mov	r29, r28
    cda0:	cc 27       	eor	r28, r28
    cda2:	64 e2       	ldi	r22, 0x24	; 36
    cda4:	70 e0       	ldi	r23, 0x00	; 0
    cda6:	82 e0       	ldi	r24, 0x02	; 2
    cda8:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
    cdac:	c8 2b       	or	r28, r24
    cdae:	c0 93 4c 02 	sts	0x024C, r28	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
    cdb2:	d0 93 4d 02 	sts	0x024D, r29	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    cdb6:	df 91       	pop	r29
    cdb8:	cf 91       	pop	r28
    cdba:	1f 91       	pop	r17
    cdbc:	0f 91       	pop	r16
    cdbe:	ff 90       	pop	r15
    cdc0:	ef 90       	pop	r14
    cdc2:	df 90       	pop	r13
    cdc4:	cf 90       	pop	r12
    cdc6:	bf 90       	pop	r11
    cdc8:	af 90       	pop	r10
    cdca:	9f 90       	pop	r9
    cdcc:	8f 90       	pop	r8
    cdce:	08 95       	ret

0000cdd0 <save_globals>:
    cdd0:	4f 92       	push	r4
    cdd2:	5f 92       	push	r5
    cdd4:	6f 92       	push	r6
    cdd6:	7f 92       	push	r7
    cdd8:	9f 92       	push	r9
    cdda:	af 92       	push	r10
    cddc:	bf 92       	push	r11
    cdde:	cf 92       	push	r12
    cde0:	df 92       	push	r13
    cde2:	ef 92       	push	r14
    cde4:	ff 92       	push	r15
    cde6:	0f 93       	push	r16
    cde8:	1f 93       	push	r17
    cdea:	cf 93       	push	r28
    cdec:	df 93       	push	r29
    cdee:	cd b7       	in	r28, 0x3d	; 61
    cdf0:	de b7       	in	r29, 0x3e	; 62
    cdf2:	a4 97       	sbiw	r28, 0x24	; 36
    cdf4:	cd bf       	out	0x3d, r28	; 61
    cdf6:	de bf       	out	0x3e, r29	; 62
    cdf8:	98 2e       	mov	r9, r24
    cdfa:	0f 2e       	mov	r0, r31
    cdfc:	f7 e0       	ldi	r31, 0x07	; 7
    cdfe:	4f 2e       	mov	r4, r31
    ce00:	51 2c       	mov	r5, r1
    ce02:	61 2c       	mov	r6, r1
    ce04:	71 2c       	mov	r7, r1
    ce06:	f0 2d       	mov	r31, r0
    ce08:	65 e4       	ldi	r22, 0x45	; 69
    ce0a:	78 ec       	ldi	r23, 0xC8	; 200
    ce0c:	83 e3       	ldi	r24, 0x33	; 51
    ce0e:	91 e0       	ldi	r25, 0x01	; 1
    ce10:	2a e0       	ldi	r18, 0x0A	; 10
    ce12:	30 e0       	ldi	r19, 0x00	; 0
    ce14:	40 e0       	ldi	r20, 0x00	; 0
    ce16:	50 e0       	ldi	r21, 0x00	; 0
    ce18:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
    ce1c:	a2 2e       	mov	r10, r18
    ce1e:	b3 2e       	mov	r11, r19
    ce20:	c4 2e       	mov	r12, r20
    ce22:	d5 2e       	mov	r13, r21
    ce24:	60 5d       	subi	r22, 0xD0	; 208
    ce26:	69 83       	std	Y+1, r22	; 0x01
    ce28:	e1 2c       	mov	r14, r1
    ce2a:	f1 2c       	mov	r15, r1
    ce2c:	87 01       	movw	r16, r14
    ce2e:	e3 94       	inc	r14
    ce30:	9e 01       	movw	r18, r28
    ce32:	2f 5f       	subi	r18, 0xFF	; 255
    ce34:	3f 4f       	sbci	r19, 0xFF	; 255
    ce36:	b3 01       	movw	r22, r6
    ce38:	a2 01       	movw	r20, r4
    ce3a:	82 e0       	ldi	r24, 0x02	; 2
    ce3c:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    ce40:	6a 2d       	mov	r22, r10
    ce42:	7b 2d       	mov	r23, r11
    ce44:	8c 2d       	mov	r24, r12
    ce46:	9d 2d       	mov	r25, r13
    ce48:	21 e0       	ldi	r18, 0x01	; 1
    ce4a:	42 1a       	sub	r4, r18
    ce4c:	51 08       	sbc	r5, r1
    ce4e:	61 08       	sbc	r6, r1
    ce50:	71 08       	sbc	r7, r1
    ce52:	2f ef       	ldi	r18, 0xFF	; 255
    ce54:	42 16       	cp	r4, r18
    ce56:	52 06       	cpc	r5, r18
    ce58:	62 06       	cpc	r6, r18
    ce5a:	72 06       	cpc	r7, r18
    ce5c:	c9 f6       	brne	.-78     	; 0xce10 <save_globals+0x40>
    ce5e:	90 fe       	sbrs	r9, 0
    ce60:	20 c0       	rjmp	.+64     	; 0xcea2 <save_globals+0xd2>
    ce62:	8f b7       	in	r24, 0x3f	; 63
    ce64:	8c a3       	std	Y+36, r24	; 0x24
    ce66:	f8 94       	cli
    ce68:	8c a1       	ldd	r24, Y+36	; 0x24
    ce6a:	40 91 e4 26 	lds	r20, 0x26E4	; 0x8026e4 <g_xo_mode_pwm>
    ce6e:	50 91 e5 26 	lds	r21, 0x26E5	; 0x8026e5 <g_xo_mode_pwm+0x1>
    ce72:	60 91 e6 26 	lds	r22, 0x26E6	; 0x8026e6 <g_xo_mode_pwm+0x2>
    ce76:	70 91 e7 26 	lds	r23, 0x26E7	; 0x8026e7 <g_xo_mode_pwm+0x3>
    ce7a:	49 83       	std	Y+1, r20	; 0x01
    ce7c:	5a 83       	std	Y+2, r21	; 0x02
    ce7e:	6b 83       	std	Y+3, r22	; 0x03
    ce80:	7c 83       	std	Y+4, r23	; 0x04
    ce82:	8f bf       	out	0x3f, r24	; 63
    ce84:	14 e0       	ldi	r17, 0x04	; 4
    ce86:	e1 2e       	mov	r14, r17
    ce88:	f1 2c       	mov	r15, r1
    ce8a:	00 e0       	ldi	r16, 0x00	; 0
    ce8c:	10 e0       	ldi	r17, 0x00	; 0
    ce8e:	9e 01       	movw	r18, r28
    ce90:	2f 5f       	subi	r18, 0xFF	; 255
    ce92:	3f 4f       	sbci	r19, 0xFF	; 255
    ce94:	40 e1       	ldi	r20, 0x10	; 16
    ce96:	50 e0       	ldi	r21, 0x00	; 0
    ce98:	60 e0       	ldi	r22, 0x00	; 0
    ce9a:	70 e0       	ldi	r23, 0x00	; 0
    ce9c:	82 e0       	ldi	r24, 0x02	; 2
    ce9e:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    cea2:	91 fe       	sbrs	r9, 1
    cea4:	1a c0       	rjmp	.+52     	; 0xceda <save_globals+0x10a>
    cea6:	8f b7       	in	r24, 0x3f	; 63
    cea8:	8b a3       	std	Y+35, r24	; 0x23
    ceaa:	f8 94       	cli
    ceac:	8b a1       	ldd	r24, Y+35	; 0x23
    ceae:	20 91 9c 28 	lds	r18, 0x289C	; 0x80289c <g_backlight_mode_pwm>
    ceb2:	30 91 9d 28 	lds	r19, 0x289D	; 0x80289d <g_backlight_mode_pwm+0x1>
    ceb6:	29 83       	std	Y+1, r18	; 0x01
    ceb8:	3a 83       	std	Y+2, r19	; 0x02
    ceba:	8f bf       	out	0x3f, r24	; 63
    cebc:	12 e0       	ldi	r17, 0x02	; 2
    cebe:	e1 2e       	mov	r14, r17
    cec0:	f1 2c       	mov	r15, r1
    cec2:	00 e0       	ldi	r16, 0x00	; 0
    cec4:	10 e0       	ldi	r17, 0x00	; 0
    cec6:	9e 01       	movw	r18, r28
    cec8:	2f 5f       	subi	r18, 0xFF	; 255
    ceca:	3f 4f       	sbci	r19, 0xFF	; 255
    cecc:	44 e1       	ldi	r20, 0x14	; 20
    cece:	50 e0       	ldi	r21, 0x00	; 0
    ced0:	60 e0       	ldi	r22, 0x00	; 0
    ced2:	70 e0       	ldi	r23, 0x00	; 0
    ced4:	82 e0       	ldi	r24, 0x02	; 2
    ced6:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    ceda:	92 fe       	sbrs	r9, 2
    cedc:	1b c0       	rjmp	.+54     	; 0xcf14 <save_globals+0x144>
    cede:	8f b7       	in	r24, 0x3f	; 63
    cee0:	8a a3       	std	Y+34, r24	; 0x22
    cee2:	f8 94       	cli
    cee4:	9a a1       	ldd	r25, Y+34	; 0x22
    cee6:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <g_keyBeep_enable>
    ceea:	81 11       	cpse	r24, r1
    ceec:	82 e0       	ldi	r24, 0x02	; 2
    ceee:	20 91 9a 28 	lds	r18, 0x289A	; 0x80289a <g_errorBeep_enable>
    cef2:	82 2b       	or	r24, r18
    cef4:	89 83       	std	Y+1, r24	; 0x01
    cef6:	9f bf       	out	0x3f, r25	; 63
    cef8:	e1 2c       	mov	r14, r1
    cefa:	f1 2c       	mov	r15, r1
    cefc:	87 01       	movw	r16, r14
    cefe:	e3 94       	inc	r14
    cf00:	9e 01       	movw	r18, r28
    cf02:	2f 5f       	subi	r18, 0xFF	; 255
    cf04:	3f 4f       	sbci	r19, 0xFF	; 255
    cf06:	46 e1       	ldi	r20, 0x16	; 22
    cf08:	50 e0       	ldi	r21, 0x00	; 0
    cf0a:	60 e0       	ldi	r22, 0x00	; 0
    cf0c:	70 e0       	ldi	r23, 0x00	; 0
    cf0e:	82 e0       	ldi	r24, 0x02	; 2
    cf10:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    cf14:	93 fe       	sbrs	r9, 3
    cf16:	16 c0       	rjmp	.+44     	; 0xcf44 <save_globals+0x174>
    cf18:	8f b7       	in	r24, 0x3f	; 63
    cf1a:	89 a3       	std	Y+33, r24	; 0x21
    cf1c:	f8 94       	cli
    cf1e:	89 a1       	ldd	r24, Y+33	; 0x21
    cf20:	90 91 9b 28 	lds	r25, 0x289B	; 0x80289b <g_pitch_tone_mode>
    cf24:	99 83       	std	Y+1, r25	; 0x01
    cf26:	8f bf       	out	0x3f, r24	; 63
    cf28:	e1 2c       	mov	r14, r1
    cf2a:	f1 2c       	mov	r15, r1
    cf2c:	87 01       	movw	r16, r14
    cf2e:	e3 94       	inc	r14
    cf30:	9e 01       	movw	r18, r28
    cf32:	2f 5f       	subi	r18, 0xFF	; 255
    cf34:	3f 4f       	sbci	r19, 0xFF	; 255
    cf36:	47 e1       	ldi	r20, 0x17	; 23
    cf38:	50 e0       	ldi	r21, 0x00	; 0
    cf3a:	60 e0       	ldi	r22, 0x00	; 0
    cf3c:	70 e0       	ldi	r23, 0x00	; 0
    cf3e:	82 e0       	ldi	r24, 0x02	; 2
    cf40:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    cf44:	94 fe       	sbrs	r9, 4
    cf46:	1b c0       	rjmp	.+54     	; 0xcf7e <save_globals+0x1ae>
    cf48:	8f b7       	in	r24, 0x3f	; 63
    cf4a:	88 a3       	std	Y+32, r24	; 0x20
    cf4c:	f8 94       	cli
    cf4e:	98 a1       	ldd	r25, Y+32	; 0x20
    cf50:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <g_usb_cdc_printStatusLines_sim808>
    cf54:	81 11       	cpse	r24, r1
    cf56:	82 e0       	ldi	r24, 0x02	; 2
    cf58:	20 91 84 28 	lds	r18, 0x2884	; 0x802884 <g_usb_cdc_printStatusLines_atxmega>
    cf5c:	82 2b       	or	r24, r18
    cf5e:	89 83       	std	Y+1, r24	; 0x01
    cf60:	9f bf       	out	0x3f, r25	; 63
    cf62:	e1 2c       	mov	r14, r1
    cf64:	f1 2c       	mov	r15, r1
    cf66:	87 01       	movw	r16, r14
    cf68:	e3 94       	inc	r14
    cf6a:	9e 01       	movw	r18, r28
    cf6c:	2f 5f       	subi	r18, 0xFF	; 255
    cf6e:	3f 4f       	sbci	r19, 0xFF	; 255
    cf70:	48 e1       	ldi	r20, 0x18	; 24
    cf72:	50 e0       	ldi	r21, 0x00	; 0
    cf74:	60 e0       	ldi	r22, 0x00	; 0
    cf76:	70 e0       	ldi	r23, 0x00	; 0
    cf78:	82 e0       	ldi	r24, 0x02	; 2
    cf7a:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    cf7e:	95 fe       	sbrs	r9, 5
    cf80:	ea c0       	rjmp	.+468    	; 0xd156 <save_globals+0x386>
    cf82:	8f b7       	in	r24, 0x3f	; 63
    cf84:	8f 8f       	std	Y+31, r24	; 0x1f
    cf86:	f8 94       	cli
    cf88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    cf8a:	20 91 6f 27 	lds	r18, 0x276F	; 0x80276f <g_twi1_gyro_1_temp_RTofs>
    cf8e:	30 91 70 27 	lds	r19, 0x2770	; 0x802770 <g_twi1_gyro_1_temp_RTofs+0x1>
    cf92:	2d 8f       	std	Y+29, r18	; 0x1d
    cf94:	3e 8f       	std	Y+30, r19	; 0x1e
    cf96:	20 91 6d 27 	lds	r18, 0x276D	; 0x80276d <g_twi1_gyro_1_temp_sens>
    cf9a:	30 91 6e 27 	lds	r19, 0x276E	; 0x80276e <g_twi1_gyro_1_temp_sens+0x1>
    cf9e:	2b 8f       	std	Y+27, r18	; 0x1b
    cfa0:	3c 8f       	std	Y+28, r19	; 0x1c
    cfa2:	20 91 63 27 	lds	r18, 0x2763	; 0x802763 <g_twi1_gyro_1_accel_ofsx>
    cfa6:	30 91 64 27 	lds	r19, 0x2764	; 0x802764 <g_twi1_gyro_1_accel_ofsx+0x1>
    cfaa:	29 8f       	std	Y+25, r18	; 0x19
    cfac:	3a 8f       	std	Y+26, r19	; 0x1a
    cfae:	20 91 61 27 	lds	r18, 0x2761	; 0x802761 <g_twi1_gyro_1_accel_ofsy>
    cfb2:	30 91 62 27 	lds	r19, 0x2762	; 0x802762 <g_twi1_gyro_1_accel_ofsy+0x1>
    cfb6:	2f 8b       	std	Y+23, r18	; 0x17
    cfb8:	38 8f       	std	Y+24, r19	; 0x18
    cfba:	20 91 5f 27 	lds	r18, 0x275F	; 0x80275f <g_twi1_gyro_1_accel_ofsz>
    cfbe:	30 91 60 27 	lds	r19, 0x2760	; 0x802760 <g_twi1_gyro_1_accel_ofsz+0x1>
    cfc2:	2d 8b       	std	Y+21, r18	; 0x15
    cfc4:	3e 8b       	std	Y+22, r19	; 0x16
    cfc6:	20 91 5d 27 	lds	r18, 0x275D	; 0x80275d <g_twi1_gyro_1_accel_factx>
    cfca:	30 91 5e 27 	lds	r19, 0x275E	; 0x80275e <g_twi1_gyro_1_accel_factx+0x1>
    cfce:	2b 8b       	std	Y+19, r18	; 0x13
    cfd0:	3c 8b       	std	Y+20, r19	; 0x14
    cfd2:	20 91 5b 27 	lds	r18, 0x275B	; 0x80275b <g_twi1_gyro_1_accel_facty>
    cfd6:	30 91 5c 27 	lds	r19, 0x275C	; 0x80275c <g_twi1_gyro_1_accel_facty+0x1>
    cfda:	29 8b       	std	Y+17, r18	; 0x11
    cfdc:	3a 8b       	std	Y+18, r19	; 0x12
    cfde:	20 91 59 27 	lds	r18, 0x2759	; 0x802759 <g_twi1_gyro_1_accel_factz>
    cfe2:	30 91 5a 27 	lds	r19, 0x275A	; 0x80275a <g_twi1_gyro_1_accel_factz+0x1>
    cfe6:	2f 87       	std	Y+15, r18	; 0x0f
    cfe8:	38 8b       	std	Y+16, r19	; 0x10
    cfea:	20 91 4b 27 	lds	r18, 0x274B	; 0x80274b <g_twi1_gyro_1_gyro_ofsx>
    cfee:	30 91 4c 27 	lds	r19, 0x274C	; 0x80274c <g_twi1_gyro_1_gyro_ofsx+0x1>
    cff2:	2d 87       	std	Y+13, r18	; 0x0d
    cff4:	3e 87       	std	Y+14, r19	; 0x0e
    cff6:	20 91 49 27 	lds	r18, 0x2749	; 0x802749 <g_twi1_gyro_1_gyro_ofsy>
    cffa:	30 91 4a 27 	lds	r19, 0x274A	; 0x80274a <g_twi1_gyro_1_gyro_ofsy+0x1>
    cffe:	2b 87       	std	Y+11, r18	; 0x0b
    d000:	3c 87       	std	Y+12, r19	; 0x0c
    d002:	20 91 47 27 	lds	r18, 0x2747	; 0x802747 <g_twi1_gyro_1_gyro_ofsz>
    d006:	30 91 48 27 	lds	r19, 0x2748	; 0x802748 <g_twi1_gyro_1_gyro_ofsz+0x1>
    d00a:	29 87       	std	Y+9, r18	; 0x09
    d00c:	3a 87       	std	Y+10, r19	; 0x0a
    d00e:	20 91 27 27 	lds	r18, 0x2727	; 0x802727 <g_twi1_gyro_2_mag_factx>
    d012:	30 91 28 27 	lds	r19, 0x2728	; 0x802728 <g_twi1_gyro_2_mag_factx+0x1>
    d016:	2f 83       	std	Y+7, r18	; 0x07
    d018:	38 87       	std	Y+8, r19	; 0x08
    d01a:	20 91 25 27 	lds	r18, 0x2725	; 0x802725 <g_twi1_gyro_2_mag_facty>
    d01e:	30 91 26 27 	lds	r19, 0x2726	; 0x802726 <g_twi1_gyro_2_mag_facty+0x1>
    d022:	2d 83       	std	Y+5, r18	; 0x05
    d024:	3e 83       	std	Y+6, r19	; 0x06
    d026:	20 91 23 27 	lds	r18, 0x2723	; 0x802723 <g_twi1_gyro_2_mag_factz>
    d02a:	30 91 24 27 	lds	r19, 0x2724	; 0x802724 <g_twi1_gyro_2_mag_factz+0x1>
    d02e:	29 83       	std	Y+1, r18	; 0x01
    d030:	3a 83       	std	Y+2, r19	; 0x02
    d032:	8f bf       	out	0x3f, r24	; 63
    d034:	12 e0       	ldi	r17, 0x02	; 2
    d036:	e1 2e       	mov	r14, r17
    d038:	f1 2c       	mov	r15, r1
    d03a:	00 e0       	ldi	r16, 0x00	; 0
    d03c:	10 e0       	ldi	r17, 0x00	; 0
    d03e:	9e 01       	movw	r18, r28
    d040:	23 5e       	subi	r18, 0xE3	; 227
    d042:	3f 4f       	sbci	r19, 0xFF	; 255
    d044:	4c e1       	ldi	r20, 0x1C	; 28
    d046:	50 e0       	ldi	r21, 0x00	; 0
    d048:	60 e0       	ldi	r22, 0x00	; 0
    d04a:	70 e0       	ldi	r23, 0x00	; 0
    d04c:	82 e0       	ldi	r24, 0x02	; 2
    d04e:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d052:	9e 01       	movw	r18, r28
    d054:	25 5e       	subi	r18, 0xE5	; 229
    d056:	3f 4f       	sbci	r19, 0xFF	; 255
    d058:	4e e1       	ldi	r20, 0x1E	; 30
    d05a:	50 e0       	ldi	r21, 0x00	; 0
    d05c:	60 e0       	ldi	r22, 0x00	; 0
    d05e:	70 e0       	ldi	r23, 0x00	; 0
    d060:	82 e0       	ldi	r24, 0x02	; 2
    d062:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d066:	9e 01       	movw	r18, r28
    d068:	27 5e       	subi	r18, 0xE7	; 231
    d06a:	3f 4f       	sbci	r19, 0xFF	; 255
    d06c:	40 e2       	ldi	r20, 0x20	; 32
    d06e:	50 e0       	ldi	r21, 0x00	; 0
    d070:	60 e0       	ldi	r22, 0x00	; 0
    d072:	70 e0       	ldi	r23, 0x00	; 0
    d074:	82 e0       	ldi	r24, 0x02	; 2
    d076:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d07a:	9e 01       	movw	r18, r28
    d07c:	29 5e       	subi	r18, 0xE9	; 233
    d07e:	3f 4f       	sbci	r19, 0xFF	; 255
    d080:	42 e2       	ldi	r20, 0x22	; 34
    d082:	50 e0       	ldi	r21, 0x00	; 0
    d084:	60 e0       	ldi	r22, 0x00	; 0
    d086:	70 e0       	ldi	r23, 0x00	; 0
    d088:	82 e0       	ldi	r24, 0x02	; 2
    d08a:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d08e:	9e 01       	movw	r18, r28
    d090:	2b 5e       	subi	r18, 0xEB	; 235
    d092:	3f 4f       	sbci	r19, 0xFF	; 255
    d094:	44 e2       	ldi	r20, 0x24	; 36
    d096:	50 e0       	ldi	r21, 0x00	; 0
    d098:	60 e0       	ldi	r22, 0x00	; 0
    d09a:	70 e0       	ldi	r23, 0x00	; 0
    d09c:	82 e0       	ldi	r24, 0x02	; 2
    d09e:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d0a2:	9e 01       	movw	r18, r28
    d0a4:	2d 5e       	subi	r18, 0xED	; 237
    d0a6:	3f 4f       	sbci	r19, 0xFF	; 255
    d0a8:	48 e2       	ldi	r20, 0x28	; 40
    d0aa:	50 e0       	ldi	r21, 0x00	; 0
    d0ac:	60 e0       	ldi	r22, 0x00	; 0
    d0ae:	70 e0       	ldi	r23, 0x00	; 0
    d0b0:	82 e0       	ldi	r24, 0x02	; 2
    d0b2:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d0b6:	9e 01       	movw	r18, r28
    d0b8:	2f 5e       	subi	r18, 0xEF	; 239
    d0ba:	3f 4f       	sbci	r19, 0xFF	; 255
    d0bc:	4a e2       	ldi	r20, 0x2A	; 42
    d0be:	50 e0       	ldi	r21, 0x00	; 0
    d0c0:	60 e0       	ldi	r22, 0x00	; 0
    d0c2:	70 e0       	ldi	r23, 0x00	; 0
    d0c4:	82 e0       	ldi	r24, 0x02	; 2
    d0c6:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d0ca:	9e 01       	movw	r18, r28
    d0cc:	21 5f       	subi	r18, 0xF1	; 241
    d0ce:	3f 4f       	sbci	r19, 0xFF	; 255
    d0d0:	4c e2       	ldi	r20, 0x2C	; 44
    d0d2:	50 e0       	ldi	r21, 0x00	; 0
    d0d4:	60 e0       	ldi	r22, 0x00	; 0
    d0d6:	70 e0       	ldi	r23, 0x00	; 0
    d0d8:	82 e0       	ldi	r24, 0x02	; 2
    d0da:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d0de:	9e 01       	movw	r18, r28
    d0e0:	23 5f       	subi	r18, 0xF3	; 243
    d0e2:	3f 4f       	sbci	r19, 0xFF	; 255
    d0e4:	40 e3       	ldi	r20, 0x30	; 48
    d0e6:	50 e0       	ldi	r21, 0x00	; 0
    d0e8:	60 e0       	ldi	r22, 0x00	; 0
    d0ea:	70 e0       	ldi	r23, 0x00	; 0
    d0ec:	82 e0       	ldi	r24, 0x02	; 2
    d0ee:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d0f2:	9e 01       	movw	r18, r28
    d0f4:	25 5f       	subi	r18, 0xF5	; 245
    d0f6:	3f 4f       	sbci	r19, 0xFF	; 255
    d0f8:	42 e3       	ldi	r20, 0x32	; 50
    d0fa:	50 e0       	ldi	r21, 0x00	; 0
    d0fc:	60 e0       	ldi	r22, 0x00	; 0
    d0fe:	70 e0       	ldi	r23, 0x00	; 0
    d100:	82 e0       	ldi	r24, 0x02	; 2
    d102:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d106:	9e 01       	movw	r18, r28
    d108:	27 5f       	subi	r18, 0xF7	; 247
    d10a:	3f 4f       	sbci	r19, 0xFF	; 255
    d10c:	44 e3       	ldi	r20, 0x34	; 52
    d10e:	50 e0       	ldi	r21, 0x00	; 0
    d110:	60 e0       	ldi	r22, 0x00	; 0
    d112:	70 e0       	ldi	r23, 0x00	; 0
    d114:	82 e0       	ldi	r24, 0x02	; 2
    d116:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d11a:	9e 01       	movw	r18, r28
    d11c:	29 5f       	subi	r18, 0xF9	; 249
    d11e:	3f 4f       	sbci	r19, 0xFF	; 255
    d120:	48 e4       	ldi	r20, 0x48	; 72
    d122:	50 e0       	ldi	r21, 0x00	; 0
    d124:	60 e0       	ldi	r22, 0x00	; 0
    d126:	70 e0       	ldi	r23, 0x00	; 0
    d128:	82 e0       	ldi	r24, 0x02	; 2
    d12a:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d12e:	9e 01       	movw	r18, r28
    d130:	2b 5f       	subi	r18, 0xFB	; 251
    d132:	3f 4f       	sbci	r19, 0xFF	; 255
    d134:	4a e4       	ldi	r20, 0x4A	; 74
    d136:	50 e0       	ldi	r21, 0x00	; 0
    d138:	60 e0       	ldi	r22, 0x00	; 0
    d13a:	70 e0       	ldi	r23, 0x00	; 0
    d13c:	82 e0       	ldi	r24, 0x02	; 2
    d13e:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d142:	9e 01       	movw	r18, r28
    d144:	2f 5f       	subi	r18, 0xFF	; 255
    d146:	3f 4f       	sbci	r19, 0xFF	; 255
    d148:	4c e4       	ldi	r20, 0x4C	; 76
    d14a:	50 e0       	ldi	r21, 0x00	; 0
    d14c:	60 e0       	ldi	r22, 0x00	; 0
    d14e:	70 e0       	ldi	r23, 0x00	; 0
    d150:	82 e0       	ldi	r24, 0x02	; 2
    d152:	0e 94 40 26 	call	0x4c80	; 0x4c80 <nvm_write>
    d156:	a4 96       	adiw	r28, 0x24	; 36
    d158:	cd bf       	out	0x3d, r28	; 61
    d15a:	de bf       	out	0x3e, r29	; 62
    d15c:	df 91       	pop	r29
    d15e:	cf 91       	pop	r28
    d160:	1f 91       	pop	r17
    d162:	0f 91       	pop	r16
    d164:	ff 90       	pop	r15
    d166:	ef 90       	pop	r14
    d168:	df 90       	pop	r13
    d16a:	cf 90       	pop	r12
    d16c:	bf 90       	pop	r11
    d16e:	af 90       	pop	r10
    d170:	9f 90       	pop	r9
    d172:	7f 90       	pop	r7
    d174:	6f 90       	pop	r6
    d176:	5f 90       	pop	r5
    d178:	4f 90       	pop	r4
    d17a:	08 95       	ret

0000d17c <myStringToVar>:
    d17c:	2f 92       	push	r2
    d17e:	3f 92       	push	r3
    d180:	4f 92       	push	r4
    d182:	5f 92       	push	r5
    d184:	6f 92       	push	r6
    d186:	7f 92       	push	r7
    d188:	8f 92       	push	r8
    d18a:	9f 92       	push	r9
    d18c:	af 92       	push	r10
    d18e:	bf 92       	push	r11
    d190:	cf 92       	push	r12
    d192:	df 92       	push	r13
    d194:	ef 92       	push	r14
    d196:	ff 92       	push	r15
    d198:	0f 93       	push	r16
    d19a:	1f 93       	push	r17
    d19c:	cf 93       	push	r28
    d19e:	df 93       	push	r29
    d1a0:	00 d0       	rcall	.+0      	; 0xd1a2 <myStringToVar+0x26>
    d1a2:	1f 92       	push	r1
    d1a4:	cd b7       	in	r28, 0x3d	; 61
    d1a6:	de b7       	in	r29, 0x3e	; 62
    d1a8:	6c 01       	movw	r12, r24
    d1aa:	4a 01       	movw	r8, r20
    d1ac:	5b 01       	movw	r10, r22
    d1ae:	29 83       	std	Y+1, r18	; 0x01
    d1b0:	3a 83       	std	Y+2, r19	; 0x02
    d1b2:	18 01       	movw	r2, r16
    d1b4:	27 01       	movw	r4, r14
    d1b6:	84 2f       	mov	r24, r20
    d1b8:	83 70       	andi	r24, 0x03	; 3
    d1ba:	09 f4       	brne	.+2      	; 0xd1be <myStringToVar+0x42>
    d1bc:	66 c0       	rjmp	.+204    	; 0xd28a <myStringToVar+0x10e>
    d1be:	1b 82       	std	Y+3, r1	; 0x03
    d1c0:	1c 82       	std	Y+4, r1	; 0x04
    d1c2:	61 2c       	mov	r6, r1
    d1c4:	71 2c       	mov	r7, r1
    d1c6:	eb 80       	ldd	r14, Y+3	; 0x03
    d1c8:	fc 80       	ldd	r15, Y+4	; 0x04
    d1ca:	ec 0c       	add	r14, r12
    d1cc:	fd 1c       	adc	r15, r13
    d1ce:	82 30       	cpi	r24, 0x02	; 2
    d1d0:	e1 f0       	breq	.+56     	; 0xd20a <myStringToVar+0x8e>
    d1d2:	83 30       	cpi	r24, 0x03	; 3
    d1d4:	69 f1       	breq	.+90     	; 0xd230 <myStringToVar+0xb4>
    d1d6:	81 30       	cpi	r24, 0x01	; 1
    d1d8:	09 f0       	breq	.+2      	; 0xd1dc <myStringToVar+0x60>
    d1da:	59 c0       	rjmp	.+178    	; 0xd28e <myStringToVar+0x112>
    d1dc:	29 81       	ldd	r18, Y+1	; 0x01
    d1de:	3a 81       	ldd	r19, Y+2	; 0x02
    d1e0:	21 15       	cp	r18, r1
    d1e2:	31 05       	cpc	r19, r1
    d1e4:	a9 f1       	breq	.+106    	; 0xd250 <myStringToVar+0xd4>
    d1e6:	89 01       	movw	r16, r18
    d1e8:	0c 5f       	subi	r16, 0xFC	; 252
    d1ea:	1f 4f       	sbci	r17, 0xFF	; 255
    d1ec:	c7 01       	movw	r24, r14
    d1ee:	0e 94 52 89 	call	0x112a4	; 0x112a4 <atof>
    d1f2:	e9 81       	ldd	r30, Y+1	; 0x01
    d1f4:	fa 81       	ldd	r31, Y+2	; 0x02
    d1f6:	60 83       	st	Z, r22
    d1f8:	71 83       	std	Z+1, r23	; 0x01
    d1fa:	82 83       	std	Z+2, r24	; 0x02
    d1fc:	93 83       	std	Z+3, r25	; 0x03
    d1fe:	ff ef       	ldi	r31, 0xFF	; 255
    d200:	6f 1a       	sub	r6, r31
    d202:	7f 0a       	sbc	r7, r31
    d204:	09 83       	std	Y+1, r16	; 0x01
    d206:	1a 83       	std	Y+2, r17	; 0x02
    d208:	23 c0       	rjmp	.+70     	; 0xd250 <myStringToVar+0xd4>
    d20a:	21 14       	cp	r2, r1
    d20c:	31 04       	cpc	r3, r1
    d20e:	01 f1       	breq	.+64     	; 0xd250 <myStringToVar+0xd4>
    d210:	81 01       	movw	r16, r2
    d212:	0c 5f       	subi	r16, 0xFC	; 252
    d214:	1f 4f       	sbci	r17, 0xFF	; 255
    d216:	c7 01       	movw	r24, r14
    d218:	0e 94 72 89 	call	0x112e4	; 0x112e4 <atol>
    d21c:	f1 01       	movw	r30, r2
    d21e:	60 83       	st	Z, r22
    d220:	71 83       	std	Z+1, r23	; 0x01
    d222:	82 83       	std	Z+2, r24	; 0x02
    d224:	93 83       	std	Z+3, r25	; 0x03
    d226:	ff ef       	ldi	r31, 0xFF	; 255
    d228:	6f 1a       	sub	r6, r31
    d22a:	7f 0a       	sbc	r7, r31
    d22c:	18 01       	movw	r2, r16
    d22e:	10 c0       	rjmp	.+32     	; 0xd250 <myStringToVar+0xd4>
    d230:	41 14       	cp	r4, r1
    d232:	51 04       	cpc	r5, r1
    d234:	69 f0       	breq	.+26     	; 0xd250 <myStringToVar+0xd4>
    d236:	82 01       	movw	r16, r4
    d238:	0e 5f       	subi	r16, 0xFE	; 254
    d23a:	1f 4f       	sbci	r17, 0xFF	; 255
    d23c:	c7 01       	movw	r24, r14
    d23e:	0e 94 55 89 	call	0x112aa	; 0x112aa <atoi>
    d242:	f2 01       	movw	r30, r4
    d244:	80 83       	st	Z, r24
    d246:	91 83       	std	Z+1, r25	; 0x01
    d248:	ff ef       	ldi	r31, 0xFF	; 255
    d24a:	6f 1a       	sub	r6, r31
    d24c:	7f 0a       	sbc	r7, r31
    d24e:	28 01       	movw	r4, r16
    d250:	6c e2       	ldi	r22, 0x2C	; 44
    d252:	70 e0       	ldi	r23, 0x00	; 0
    d254:	c7 01       	movw	r24, r14
    d256:	0e 94 d1 8a 	call	0x115a2	; 0x115a2 <strchr>
    d25a:	00 97       	sbiw	r24, 0x00	; 0
    d25c:	c1 f0       	breq	.+48     	; 0xd28e <myStringToVar+0x112>
    d25e:	01 96       	adiw	r24, 0x01	; 1
    d260:	8e 19       	sub	r24, r14
    d262:	9f 09       	sbc	r25, r15
    d264:	2b 81       	ldd	r18, Y+3	; 0x03
    d266:	3c 81       	ldd	r19, Y+4	; 0x04
    d268:	28 0f       	add	r18, r24
    d26a:	39 1f       	adc	r19, r25
    d26c:	2b 83       	std	Y+3, r18	; 0x03
    d26e:	3c 83       	std	Y+4, r19	; 0x04
    d270:	b6 94       	lsr	r11
    d272:	a7 94       	ror	r10
    d274:	97 94       	ror	r9
    d276:	87 94       	ror	r8
    d278:	b6 94       	lsr	r11
    d27a:	a7 94       	ror	r10
    d27c:	97 94       	ror	r9
    d27e:	87 94       	ror	r8
    d280:	88 2d       	mov	r24, r8
    d282:	83 70       	andi	r24, 0x03	; 3
    d284:	09 f0       	breq	.+2      	; 0xd288 <myStringToVar+0x10c>
    d286:	9f cf       	rjmp	.-194    	; 0xd1c6 <myStringToVar+0x4a>
    d288:	02 c0       	rjmp	.+4      	; 0xd28e <myStringToVar+0x112>
    d28a:	61 2c       	mov	r6, r1
    d28c:	71 2c       	mov	r7, r1
    d28e:	c3 01       	movw	r24, r6
    d290:	24 96       	adiw	r28, 0x04	; 4
    d292:	cd bf       	out	0x3d, r28	; 61
    d294:	de bf       	out	0x3e, r29	; 62
    d296:	df 91       	pop	r29
    d298:	cf 91       	pop	r28
    d29a:	1f 91       	pop	r17
    d29c:	0f 91       	pop	r16
    d29e:	ff 90       	pop	r15
    d2a0:	ef 90       	pop	r14
    d2a2:	df 90       	pop	r13
    d2a4:	cf 90       	pop	r12
    d2a6:	bf 90       	pop	r11
    d2a8:	af 90       	pop	r10
    d2aa:	9f 90       	pop	r9
    d2ac:	8f 90       	pop	r8
    d2ae:	7f 90       	pop	r7
    d2b0:	6f 90       	pop	r6
    d2b2:	5f 90       	pop	r5
    d2b4:	4f 90       	pop	r4
    d2b6:	3f 90       	pop	r3
    d2b8:	2f 90       	pop	r2
    d2ba:	08 95       	ret

0000d2bc <adc_app_enable>:
    d2bc:	cf 93       	push	r28
    d2be:	90 91 40 20 	lds	r25, 0x2040	; 0x802040 <g_adc_enabled>
    d2c2:	98 17       	cp	r25, r24
    d2c4:	e1 f0       	breq	.+56     	; 0xd2fe <adc_app_enable+0x42>
    d2c6:	c8 2f       	mov	r28, r24
    d2c8:	88 23       	and	r24, r24
    d2ca:	61 f0       	breq	.+24     	; 0xd2e4 <adc_app_enable+0x28>
    d2cc:	33 da       	rcall	.-2970   	; 0xc734 <tc_init>
    d2ce:	41 dc       	rcall	.-1918   	; 0xcb52 <adc_init>
    d2d0:	93 da       	rcall	.-2778   	; 0xc7f8 <tc_start>
    d2d2:	80 e0       	ldi	r24, 0x00	; 0
    d2d4:	92 e0       	ldi	r25, 0x02	; 2
    d2d6:	0e 94 1c 49 	call	0x9238	; 0x9238 <adc_enable>
    d2da:	80 e4       	ldi	r24, 0x40	; 64
    d2dc:	92 e0       	ldi	r25, 0x02	; 2
    d2de:	0e 94 1c 49 	call	0x9238	; 0x9238 <adc_enable>
    d2e2:	08 c0       	rjmp	.+16     	; 0xd2f4 <adc_app_enable+0x38>
    d2e4:	80 e0       	ldi	r24, 0x00	; 0
    d2e6:	92 e0       	ldi	r25, 0x02	; 2
    d2e8:	0e 94 48 49 	call	0x9290	; 0x9290 <adc_disable>
    d2ec:	80 e4       	ldi	r24, 0x40	; 64
    d2ee:	92 e0       	ldi	r25, 0x02	; 2
    d2f0:	0e 94 48 49 	call	0x9290	; 0x9290 <adc_disable>
    d2f4:	c0 93 40 20 	sts	0x2040, r28	; 0x802040 <g_adc_enabled>
    d2f8:	81 e0       	ldi	r24, 0x01	; 1
    d2fa:	80 93 e8 26 	sts	0x26E8, r24	; 0x8026e8 <g_twi2_lcd_repaint>
    d2fe:	cf 91       	pop	r28
    d300:	08 95       	ret

0000d302 <backlight_mode_pwm>:
    d302:	cf 93       	push	r28
    d304:	df 93       	push	r29
    d306:	ec 01       	movw	r28, r24
    d308:	80 93 9c 28 	sts	0x289C, r24	; 0x80289c <g_backlight_mode_pwm>
    d30c:	90 93 9d 28 	sts	0x289D, r25	; 0x80289d <g_backlight_mode_pwm+0x1>
    d310:	82 e0       	ldi	r24, 0x02	; 2
    d312:	5e dd       	rcall	.-1348   	; 0xcdd0 <save_globals>
    d314:	ce 3f       	cpi	r28, 0xFE	; 254
    d316:	8f ef       	ldi	r24, 0xFF	; 255
    d318:	d8 07       	cpc	r29, r24
    d31a:	69 f0       	breq	.+26     	; 0xd336 <backlight_mode_pwm+0x34>
    d31c:	cf 3f       	cpi	r28, 0xFF	; 255
    d31e:	8f ef       	ldi	r24, 0xFF	; 255
    d320:	d8 07       	cpc	r29, r24
    d322:	29 f4       	brne	.+10     	; 0xd32e <backlight_mode_pwm+0x2c>
    d324:	60 e0       	ldi	r22, 0x00	; 0
    d326:	81 e0       	ldi	r24, 0x01	; 1
    d328:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <twi2_set_ledbl>
    d32c:	04 c0       	rjmp	.+8      	; 0xd336 <backlight_mode_pwm+0x34>
    d32e:	6c 2f       	mov	r22, r28
    d330:	80 e0       	ldi	r24, 0x00	; 0
    d332:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <twi2_set_ledbl>
    d336:	df 91       	pop	r29
    d338:	cf 91       	pop	r28
    d33a:	08 95       	ret

0000d33c <bias_update>:
    d33c:	8f 73       	andi	r24, 0x3F	; 63
    d33e:	80 93 3f 20 	sts	0x203F, r24	; 0x80203f <g_bias_pm>
    d342:	0c 94 d2 35 	jmp	0x6ba4	; 0x6ba4 <twi2_set_bias>
    d346:	08 95       	ret

0000d348 <calibration_mode>:
    d348:	1f 93       	push	r17
    d34a:	cf 93       	push	r28
    d34c:	df 93       	push	r29
    d34e:	cd b7       	in	r28, 0x3d	; 61
    d350:	de b7       	in	r29, 0x3e	; 62
    d352:	25 97       	sbiw	r28, 0x05	; 5
    d354:	cd bf       	out	0x3d, r28	; 61
    d356:	de bf       	out	0x3e, r29	; 62
    d358:	82 30       	cpi	r24, 0x02	; 2
    d35a:	09 f4       	brne	.+2      	; 0xd35e <calibration_mode+0x16>
    d35c:	f9 c0       	rjmp	.+498    	; 0xd550 <calibration_mode+0x208>
    d35e:	30 f4       	brcc	.+12     	; 0xd36c <calibration_mode+0x24>
    d360:	88 23       	and	r24, r24
    d362:	59 f0       	breq	.+22     	; 0xd37a <calibration_mode+0x32>
    d364:	81 30       	cpi	r24, 0x01	; 1
    d366:	09 f4       	brne	.+2      	; 0xd36a <calibration_mode+0x22>
    d368:	a6 c0       	rjmp	.+332    	; 0xd4b6 <calibration_mode+0x16e>
    d36a:	8b c1       	rjmp	.+790    	; 0xd682 <calibration_mode+0x33a>
    d36c:	83 30       	cpi	r24, 0x03	; 3
    d36e:	09 f4       	brne	.+2      	; 0xd372 <calibration_mode+0x2a>
    d370:	3c c1       	rjmp	.+632    	; 0xd5ea <calibration_mode+0x2a2>
    d372:	84 30       	cpi	r24, 0x04	; 4
    d374:	09 f4       	brne	.+2      	; 0xd378 <calibration_mode+0x30>
    d376:	5e c0       	rjmp	.+188    	; 0xd434 <calibration_mode+0xec>
    d378:	84 c1       	rjmp	.+776    	; 0xd682 <calibration_mode+0x33a>
    d37a:	8f b7       	in	r24, 0x3f	; 63
    d37c:	8d 83       	std	Y+5, r24	; 0x05
    d37e:	f8 94       	cli
    d380:	2d 81       	ldd	r18, Y+5	; 0x05
    d382:	10 92 6f 27 	sts	0x276F, r1	; 0x80276f <g_twi1_gyro_1_temp_RTofs>
    d386:	10 92 70 27 	sts	0x2770, r1	; 0x802770 <g_twi1_gyro_1_temp_RTofs+0x1>
    d38a:	8d e9       	ldi	r24, 0x9D	; 157
    d38c:	91 e0       	ldi	r25, 0x01	; 1
    d38e:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <g_twi1_gyro_1_temp_sens>
    d392:	90 93 6e 27 	sts	0x276E, r25	; 0x80276e <g_twi1_gyro_1_temp_sens+0x1>
    d396:	8b e9       	ldi	r24, 0x9B	; 155
    d398:	94 ef       	ldi	r25, 0xF4	; 244
    d39a:	80 93 63 27 	sts	0x2763, r24	; 0x802763 <g_twi1_gyro_1_accel_ofsx>
    d39e:	90 93 64 27 	sts	0x2764, r25	; 0x802764 <g_twi1_gyro_1_accel_ofsx+0x1>
    d3a2:	8a e0       	ldi	r24, 0x0A	; 10
    d3a4:	9a e0       	ldi	r25, 0x0A	; 10
    d3a6:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <g_twi1_gyro_1_accel_ofsy>
    d3aa:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <g_twi1_gyro_1_accel_ofsy+0x1>
    d3ae:	88 eb       	ldi	r24, 0xB8	; 184
    d3b0:	92 e1       	ldi	r25, 0x12	; 18
    d3b2:	80 93 5f 27 	sts	0x275F, r24	; 0x80275f <g_twi1_gyro_1_accel_ofsz>
    d3b6:	90 93 60 27 	sts	0x2760, r25	; 0x802760 <g_twi1_gyro_1_accel_ofsz+0x1>
    d3ba:	8c ef       	ldi	r24, 0xFC	; 252
    d3bc:	96 e2       	ldi	r25, 0x26	; 38
    d3be:	80 93 5d 27 	sts	0x275D, r24	; 0x80275d <g_twi1_gyro_1_accel_factx>
    d3c2:	90 93 5e 27 	sts	0x275E, r25	; 0x80275e <g_twi1_gyro_1_accel_factx+0x1>
    d3c6:	87 ef       	ldi	r24, 0xF7	; 247
    d3c8:	96 e2       	ldi	r25, 0x26	; 38
    d3ca:	80 93 5b 27 	sts	0x275B, r24	; 0x80275b <g_twi1_gyro_1_accel_facty>
    d3ce:	90 93 5c 27 	sts	0x275C, r25	; 0x80275c <g_twi1_gyro_1_accel_facty+0x1>
    d3d2:	8e ed       	ldi	r24, 0xDE	; 222
    d3d4:	96 e2       	ldi	r25, 0x26	; 38
    d3d6:	80 93 59 27 	sts	0x2759, r24	; 0x802759 <g_twi1_gyro_1_accel_factz>
    d3da:	90 93 5a 27 	sts	0x275A, r25	; 0x80275a <g_twi1_gyro_1_accel_factz+0x1>
    d3de:	88 ef       	ldi	r24, 0xF8	; 248
    d3e0:	9f ef       	ldi	r25, 0xFF	; 255
    d3e2:	80 93 4b 27 	sts	0x274B, r24	; 0x80274b <g_twi1_gyro_1_gyro_ofsx>
    d3e6:	90 93 4c 27 	sts	0x274C, r25	; 0x80274c <g_twi1_gyro_1_gyro_ofsx+0x1>
    d3ea:	8c ee       	ldi	r24, 0xEC	; 236
    d3ec:	9f ef       	ldi	r25, 0xFF	; 255
    d3ee:	80 93 49 27 	sts	0x2749, r24	; 0x802749 <g_twi1_gyro_1_gyro_ofsy>
    d3f2:	90 93 4a 27 	sts	0x274A, r25	; 0x80274a <g_twi1_gyro_1_gyro_ofsy+0x1>
    d3f6:	85 e2       	ldi	r24, 0x25	; 37
    d3f8:	90 e0       	ldi	r25, 0x00	; 0
    d3fa:	80 93 47 27 	sts	0x2747, r24	; 0x802747 <g_twi1_gyro_1_gyro_ofsz>
    d3fe:	90 93 48 27 	sts	0x2748, r25	; 0x802748 <g_twi1_gyro_1_gyro_ofsz+0x1>
    d402:	82 e2       	ldi	r24, 0x22	; 34
    d404:	94 e2       	ldi	r25, 0x24	; 36
    d406:	80 93 27 27 	sts	0x2727, r24	; 0x802727 <g_twi1_gyro_2_mag_factx>
    d40a:	90 93 28 27 	sts	0x2728, r25	; 0x802728 <g_twi1_gyro_2_mag_factx+0x1>
    d40e:	80 93 25 27 	sts	0x2725, r24	; 0x802725 <g_twi1_gyro_2_mag_facty>
    d412:	90 93 26 27 	sts	0x2726, r25	; 0x802726 <g_twi1_gyro_2_mag_facty+0x1>
    d416:	88 e6       	ldi	r24, 0x68	; 104
    d418:	98 e3       	ldi	r25, 0x38	; 56
    d41a:	80 93 23 27 	sts	0x2723, r24	; 0x802723 <g_twi1_gyro_2_mag_factz>
    d41e:	90 93 24 27 	sts	0x2724, r25	; 0x802724 <g_twi1_gyro_2_mag_factz+0x1>
    d422:	81 e0       	ldi	r24, 0x01	; 1
    d424:	80 93 3a 27 	sts	0x273A, r24	; 0x80273a <g_twi1_gyro_gyro_offset_set__flag>
    d428:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <g_twi1_gyro_accel_offset_set__flag>
    d42c:	2f bf       	out	0x3f, r18	; 63
    d42e:	80 e2       	ldi	r24, 0x20	; 32
    d430:	cf dc       	rcall	.-1634   	; 0xcdd0 <save_globals>
    d432:	27 c1       	rjmp	.+590    	; 0xd682 <calibration_mode+0x33a>
    d434:	8f b7       	in	r24, 0x3f	; 63
    d436:	8c 83       	std	Y+4, r24	; 0x04
    d438:	f8 94       	cli
    d43a:	4c 81       	ldd	r20, Y+4	; 0x04
    d43c:	20 91 51 27 	lds	r18, 0x2751	; 0x802751 <g_twi1_gyro_1_gyro_x>
    d440:	30 91 52 27 	lds	r19, 0x2752	; 0x802752 <g_twi1_gyro_1_gyro_x+0x1>
    d444:	80 91 4b 27 	lds	r24, 0x274B	; 0x80274b <g_twi1_gyro_1_gyro_ofsx>
    d448:	90 91 4c 27 	lds	r25, 0x274C	; 0x80274c <g_twi1_gyro_1_gyro_ofsx+0x1>
    d44c:	35 95       	asr	r19
    d44e:	27 95       	ror	r18
    d450:	35 95       	asr	r19
    d452:	27 95       	ror	r18
    d454:	82 1b       	sub	r24, r18
    d456:	93 0b       	sbc	r25, r19
    d458:	80 93 4b 27 	sts	0x274B, r24	; 0x80274b <g_twi1_gyro_1_gyro_ofsx>
    d45c:	90 93 4c 27 	sts	0x274C, r25	; 0x80274c <g_twi1_gyro_1_gyro_ofsx+0x1>
    d460:	20 91 4f 27 	lds	r18, 0x274F	; 0x80274f <g_twi1_gyro_1_gyro_y>
    d464:	30 91 50 27 	lds	r19, 0x2750	; 0x802750 <g_twi1_gyro_1_gyro_y+0x1>
    d468:	80 91 49 27 	lds	r24, 0x2749	; 0x802749 <g_twi1_gyro_1_gyro_ofsy>
    d46c:	90 91 4a 27 	lds	r25, 0x274A	; 0x80274a <g_twi1_gyro_1_gyro_ofsy+0x1>
    d470:	35 95       	asr	r19
    d472:	27 95       	ror	r18
    d474:	35 95       	asr	r19
    d476:	27 95       	ror	r18
    d478:	82 1b       	sub	r24, r18
    d47a:	93 0b       	sbc	r25, r19
    d47c:	80 93 49 27 	sts	0x2749, r24	; 0x802749 <g_twi1_gyro_1_gyro_ofsy>
    d480:	90 93 4a 27 	sts	0x274A, r25	; 0x80274a <g_twi1_gyro_1_gyro_ofsy+0x1>
    d484:	20 91 4d 27 	lds	r18, 0x274D	; 0x80274d <g_twi1_gyro_1_gyro_z>
    d488:	30 91 4e 27 	lds	r19, 0x274E	; 0x80274e <g_twi1_gyro_1_gyro_z+0x1>
    d48c:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <g_twi1_gyro_1_gyro_ofsz>
    d490:	90 91 48 27 	lds	r25, 0x2748	; 0x802748 <g_twi1_gyro_1_gyro_ofsz+0x1>
    d494:	35 95       	asr	r19
    d496:	27 95       	ror	r18
    d498:	35 95       	asr	r19
    d49a:	27 95       	ror	r18
    d49c:	82 1b       	sub	r24, r18
    d49e:	93 0b       	sbc	r25, r19
    d4a0:	80 93 47 27 	sts	0x2747, r24	; 0x802747 <g_twi1_gyro_1_gyro_ofsz>
    d4a4:	90 93 48 27 	sts	0x2748, r25	; 0x802748 <g_twi1_gyro_1_gyro_ofsz+0x1>
    d4a8:	81 e0       	ldi	r24, 0x01	; 1
    d4aa:	80 93 3a 27 	sts	0x273A, r24	; 0x80273a <g_twi1_gyro_gyro_offset_set__flag>
    d4ae:	4f bf       	out	0x3f, r20	; 63
    d4b0:	80 e2       	ldi	r24, 0x20	; 32
    d4b2:	8e dc       	rcall	.-1764   	; 0xcdd0 <save_globals>
    d4b4:	e6 c0       	rjmp	.+460    	; 0xd682 <calibration_mode+0x33a>
    d4b6:	8f b7       	in	r24, 0x3f	; 63
    d4b8:	8b 83       	std	Y+3, r24	; 0x03
    d4ba:	f8 94       	cli
    d4bc:	1b 81       	ldd	r17, Y+3	; 0x03
    d4be:	a0 91 5d 27 	lds	r26, 0x275D	; 0x80275d <g_twi1_gyro_1_accel_factx>
    d4c2:	b0 91 5e 27 	lds	r27, 0x275E	; 0x80275e <g_twi1_gyro_1_accel_factx+0x1>
    d4c6:	40 91 57 27 	lds	r20, 0x2757	; 0x802757 <g_twi1_gyro_1_accel_x_mg>
    d4ca:	50 91 58 27 	lds	r21, 0x2758	; 0x802758 <g_twi1_gyro_1_accel_x_mg+0x1>
    d4ce:	28 ee       	ldi	r18, 0xE8	; 232
    d4d0:	33 e0       	ldi	r19, 0x03	; 3
    d4d2:	0e 94 d2 87 	call	0x10fa4	; 0x10fa4 <__usmulhisi3>
    d4d6:	9a 01       	movw	r18, r20
    d4d8:	55 0f       	add	r21, r21
    d4da:	44 0b       	sbc	r20, r20
    d4dc:	55 0b       	sbc	r21, r21
    d4de:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    d4e2:	20 93 5d 27 	sts	0x275D, r18	; 0x80275d <g_twi1_gyro_1_accel_factx>
    d4e6:	30 93 5e 27 	sts	0x275E, r19	; 0x80275e <g_twi1_gyro_1_accel_factx+0x1>
    d4ea:	20 91 67 27 	lds	r18, 0x2767	; 0x802767 <g_twi1_gyro_1_accel_y>
    d4ee:	30 91 68 27 	lds	r19, 0x2768	; 0x802768 <g_twi1_gyro_1_accel_y+0x1>
    d4f2:	80 91 61 27 	lds	r24, 0x2761	; 0x802761 <g_twi1_gyro_1_accel_ofsy>
    d4f6:	90 91 62 27 	lds	r25, 0x2762	; 0x802762 <g_twi1_gyro_1_accel_ofsy+0x1>
    d4fa:	35 95       	asr	r19
    d4fc:	27 95       	ror	r18
    d4fe:	35 95       	asr	r19
    d500:	27 95       	ror	r18
    d502:	35 95       	asr	r19
    d504:	27 95       	ror	r18
    d506:	35 95       	asr	r19
    d508:	27 95       	ror	r18
    d50a:	82 1b       	sub	r24, r18
    d50c:	93 0b       	sbc	r25, r19
    d50e:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <g_twi1_gyro_1_accel_ofsy>
    d512:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <g_twi1_gyro_1_accel_ofsy+0x1>
    d516:	20 91 65 27 	lds	r18, 0x2765	; 0x802765 <g_twi1_gyro_1_accel_z>
    d51a:	30 91 66 27 	lds	r19, 0x2766	; 0x802766 <g_twi1_gyro_1_accel_z+0x1>
    d51e:	80 91 5f 27 	lds	r24, 0x275F	; 0x80275f <g_twi1_gyro_1_accel_ofsz>
    d522:	90 91 60 27 	lds	r25, 0x2760	; 0x802760 <g_twi1_gyro_1_accel_ofsz+0x1>
    d526:	35 95       	asr	r19
    d528:	27 95       	ror	r18
    d52a:	35 95       	asr	r19
    d52c:	27 95       	ror	r18
    d52e:	35 95       	asr	r19
    d530:	27 95       	ror	r18
    d532:	35 95       	asr	r19
    d534:	27 95       	ror	r18
    d536:	82 1b       	sub	r24, r18
    d538:	93 0b       	sbc	r25, r19
    d53a:	80 93 5f 27 	sts	0x275F, r24	; 0x80275f <g_twi1_gyro_1_accel_ofsz>
    d53e:	90 93 60 27 	sts	0x2760, r25	; 0x802760 <g_twi1_gyro_1_accel_ofsz+0x1>
    d542:	81 e0       	ldi	r24, 0x01	; 1
    d544:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <g_twi1_gyro_accel_offset_set__flag>
    d548:	1f bf       	out	0x3f, r17	; 63
    d54a:	80 e2       	ldi	r24, 0x20	; 32
    d54c:	41 dc       	rcall	.-1918   	; 0xcdd0 <save_globals>
    d54e:	99 c0       	rjmp	.+306    	; 0xd682 <calibration_mode+0x33a>
    d550:	8f b7       	in	r24, 0x3f	; 63
    d552:	8a 83       	std	Y+2, r24	; 0x02
    d554:	f8 94       	cli
    d556:	1a 81       	ldd	r17, Y+2	; 0x02
    d558:	a0 91 5b 27 	lds	r26, 0x275B	; 0x80275b <g_twi1_gyro_1_accel_facty>
    d55c:	b0 91 5c 27 	lds	r27, 0x275C	; 0x80275c <g_twi1_gyro_1_accel_facty+0x1>
    d560:	40 91 55 27 	lds	r20, 0x2755	; 0x802755 <g_twi1_gyro_1_accel_y_mg>
    d564:	50 91 56 27 	lds	r21, 0x2756	; 0x802756 <g_twi1_gyro_1_accel_y_mg+0x1>
    d568:	28 ee       	ldi	r18, 0xE8	; 232
    d56a:	33 e0       	ldi	r19, 0x03	; 3
    d56c:	0e 94 d2 87 	call	0x10fa4	; 0x10fa4 <__usmulhisi3>
    d570:	9a 01       	movw	r18, r20
    d572:	55 0f       	add	r21, r21
    d574:	44 0b       	sbc	r20, r20
    d576:	55 0b       	sbc	r21, r21
    d578:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    d57c:	20 93 5b 27 	sts	0x275B, r18	; 0x80275b <g_twi1_gyro_1_accel_facty>
    d580:	30 93 5c 27 	sts	0x275C, r19	; 0x80275c <g_twi1_gyro_1_accel_facty+0x1>
    d584:	20 91 69 27 	lds	r18, 0x2769	; 0x802769 <g_twi1_gyro_1_accel_x>
    d588:	30 91 6a 27 	lds	r19, 0x276A	; 0x80276a <g_twi1_gyro_1_accel_x+0x1>
    d58c:	80 91 63 27 	lds	r24, 0x2763	; 0x802763 <g_twi1_gyro_1_accel_ofsx>
    d590:	90 91 64 27 	lds	r25, 0x2764	; 0x802764 <g_twi1_gyro_1_accel_ofsx+0x1>
    d594:	35 95       	asr	r19
    d596:	27 95       	ror	r18
    d598:	35 95       	asr	r19
    d59a:	27 95       	ror	r18
    d59c:	35 95       	asr	r19
    d59e:	27 95       	ror	r18
    d5a0:	35 95       	asr	r19
    d5a2:	27 95       	ror	r18
    d5a4:	82 1b       	sub	r24, r18
    d5a6:	93 0b       	sbc	r25, r19
    d5a8:	80 93 63 27 	sts	0x2763, r24	; 0x802763 <g_twi1_gyro_1_accel_ofsx>
    d5ac:	90 93 64 27 	sts	0x2764, r25	; 0x802764 <g_twi1_gyro_1_accel_ofsx+0x1>
    d5b0:	20 91 65 27 	lds	r18, 0x2765	; 0x802765 <g_twi1_gyro_1_accel_z>
    d5b4:	30 91 66 27 	lds	r19, 0x2766	; 0x802766 <g_twi1_gyro_1_accel_z+0x1>
    d5b8:	80 91 5f 27 	lds	r24, 0x275F	; 0x80275f <g_twi1_gyro_1_accel_ofsz>
    d5bc:	90 91 60 27 	lds	r25, 0x2760	; 0x802760 <g_twi1_gyro_1_accel_ofsz+0x1>
    d5c0:	35 95       	asr	r19
    d5c2:	27 95       	ror	r18
    d5c4:	35 95       	asr	r19
    d5c6:	27 95       	ror	r18
    d5c8:	35 95       	asr	r19
    d5ca:	27 95       	ror	r18
    d5cc:	35 95       	asr	r19
    d5ce:	27 95       	ror	r18
    d5d0:	82 1b       	sub	r24, r18
    d5d2:	93 0b       	sbc	r25, r19
    d5d4:	80 93 5f 27 	sts	0x275F, r24	; 0x80275f <g_twi1_gyro_1_accel_ofsz>
    d5d8:	90 93 60 27 	sts	0x2760, r25	; 0x802760 <g_twi1_gyro_1_accel_ofsz+0x1>
    d5dc:	81 e0       	ldi	r24, 0x01	; 1
    d5de:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <g_twi1_gyro_accel_offset_set__flag>
    d5e2:	1f bf       	out	0x3f, r17	; 63
    d5e4:	80 e2       	ldi	r24, 0x20	; 32
    d5e6:	f4 db       	rcall	.-2072   	; 0xcdd0 <save_globals>
    d5e8:	4c c0       	rjmp	.+152    	; 0xd682 <calibration_mode+0x33a>
    d5ea:	8f b7       	in	r24, 0x3f	; 63
    d5ec:	89 83       	std	Y+1, r24	; 0x01
    d5ee:	f8 94       	cli
    d5f0:	19 81       	ldd	r17, Y+1	; 0x01
    d5f2:	a0 91 59 27 	lds	r26, 0x2759	; 0x802759 <g_twi1_gyro_1_accel_factz>
    d5f6:	b0 91 5a 27 	lds	r27, 0x275A	; 0x80275a <g_twi1_gyro_1_accel_factz+0x1>
    d5fa:	40 91 53 27 	lds	r20, 0x2753	; 0x802753 <g_twi1_gyro_1_accel_z_mg>
    d5fe:	50 91 54 27 	lds	r21, 0x2754	; 0x802754 <g_twi1_gyro_1_accel_z_mg+0x1>
    d602:	28 ee       	ldi	r18, 0xE8	; 232
    d604:	33 e0       	ldi	r19, 0x03	; 3
    d606:	0e 94 d2 87 	call	0x10fa4	; 0x10fa4 <__usmulhisi3>
    d60a:	9a 01       	movw	r18, r20
    d60c:	55 0f       	add	r21, r21
    d60e:	44 0b       	sbc	r20, r20
    d610:	55 0b       	sbc	r21, r21
    d612:	0e 94 99 87 	call	0x10f32	; 0x10f32 <__divmodsi4>
    d616:	20 93 59 27 	sts	0x2759, r18	; 0x802759 <g_twi1_gyro_1_accel_factz>
    d61a:	30 93 5a 27 	sts	0x275A, r19	; 0x80275a <g_twi1_gyro_1_accel_factz+0x1>
    d61e:	20 91 69 27 	lds	r18, 0x2769	; 0x802769 <g_twi1_gyro_1_accel_x>
    d622:	30 91 6a 27 	lds	r19, 0x276A	; 0x80276a <g_twi1_gyro_1_accel_x+0x1>
    d626:	80 91 63 27 	lds	r24, 0x2763	; 0x802763 <g_twi1_gyro_1_accel_ofsx>
    d62a:	90 91 64 27 	lds	r25, 0x2764	; 0x802764 <g_twi1_gyro_1_accel_ofsx+0x1>
    d62e:	35 95       	asr	r19
    d630:	27 95       	ror	r18
    d632:	35 95       	asr	r19
    d634:	27 95       	ror	r18
    d636:	35 95       	asr	r19
    d638:	27 95       	ror	r18
    d63a:	35 95       	asr	r19
    d63c:	27 95       	ror	r18
    d63e:	82 1b       	sub	r24, r18
    d640:	93 0b       	sbc	r25, r19
    d642:	80 93 63 27 	sts	0x2763, r24	; 0x802763 <g_twi1_gyro_1_accel_ofsx>
    d646:	90 93 64 27 	sts	0x2764, r25	; 0x802764 <g_twi1_gyro_1_accel_ofsx+0x1>
    d64a:	20 91 67 27 	lds	r18, 0x2767	; 0x802767 <g_twi1_gyro_1_accel_y>
    d64e:	30 91 68 27 	lds	r19, 0x2768	; 0x802768 <g_twi1_gyro_1_accel_y+0x1>
    d652:	80 91 61 27 	lds	r24, 0x2761	; 0x802761 <g_twi1_gyro_1_accel_ofsy>
    d656:	90 91 62 27 	lds	r25, 0x2762	; 0x802762 <g_twi1_gyro_1_accel_ofsy+0x1>
    d65a:	35 95       	asr	r19
    d65c:	27 95       	ror	r18
    d65e:	35 95       	asr	r19
    d660:	27 95       	ror	r18
    d662:	35 95       	asr	r19
    d664:	27 95       	ror	r18
    d666:	35 95       	asr	r19
    d668:	27 95       	ror	r18
    d66a:	82 1b       	sub	r24, r18
    d66c:	93 0b       	sbc	r25, r19
    d66e:	80 93 61 27 	sts	0x2761, r24	; 0x802761 <g_twi1_gyro_1_accel_ofsy>
    d672:	90 93 62 27 	sts	0x2762, r25	; 0x802762 <g_twi1_gyro_1_accel_ofsy+0x1>
    d676:	81 e0       	ldi	r24, 0x01	; 1
    d678:	80 93 39 27 	sts	0x2739, r24	; 0x802739 <g_twi1_gyro_accel_offset_set__flag>
    d67c:	1f bf       	out	0x3f, r17	; 63
    d67e:	80 e2       	ldi	r24, 0x20	; 32
    d680:	a7 db       	rcall	.-2226   	; 0xcdd0 <save_globals>
    d682:	25 96       	adiw	r28, 0x05	; 5
    d684:	cd bf       	out	0x3d, r28	; 61
    d686:	de bf       	out	0x3e, r29	; 62
    d688:	df 91       	pop	r29
    d68a:	cf 91       	pop	r28
    d68c:	1f 91       	pop	r17
    d68e:	08 95       	ret

0000d690 <dac_app_enable>:
    d690:	1f 93       	push	r17
    d692:	cf 93       	push	r28
    d694:	df 93       	push	r29
    d696:	1f 92       	push	r1
    d698:	cd b7       	in	r28, 0x3d	; 61
    d69a:	de b7       	in	r29, 0x3e	; 62
    d69c:	90 91 9e 28 	lds	r25, 0x289E	; 0x80289e <g_dac_enabled>
    d6a0:	98 17       	cp	r25, r24
    d6a2:	09 f4       	brne	.+2      	; 0xd6a6 <dac_app_enable+0x16>
    d6a4:	40 c0       	rjmp	.+128    	; 0xd726 <dac_app_enable+0x96>
    d6a6:	18 2f       	mov	r17, r24
    d6a8:	88 23       	and	r24, r24
    d6aa:	a9 f1       	breq	.+106    	; 0xd716 <dac_app_enable+0x86>
    d6ac:	8f b7       	in	r24, 0x3f	; 63
    d6ae:	89 83       	std	Y+1, r24	; 0x01
    d6b0:	f8 94       	cli
    d6b2:	89 81       	ldd	r24, Y+1	; 0x01
    d6b4:	40 e8       	ldi	r20, 0x80	; 128
    d6b6:	54 e8       	ldi	r21, 0x84	; 132
    d6b8:	6e e1       	ldi	r22, 0x1E	; 30
    d6ba:	70 e0       	ldi	r23, 0x00	; 0
    d6bc:	40 93 13 20 	sts	0x2013, r20	; 0x802013 <dds0_freq_mHz>
    d6c0:	50 93 14 20 	sts	0x2014, r21	; 0x802014 <dds0_freq_mHz+0x1>
    d6c4:	60 93 15 20 	sts	0x2015, r22	; 0x802015 <dds0_freq_mHz+0x2>
    d6c8:	70 93 16 20 	sts	0x2016, r23	; 0x802016 <dds0_freq_mHz+0x3>
    d6cc:	10 92 e9 24 	sts	0x24E9, r1	; 0x8024e9 <dds0_reg>
    d6d0:	10 92 ea 24 	sts	0x24EA, r1	; 0x8024ea <dds0_reg+0x1>
    d6d4:	10 92 eb 24 	sts	0x24EB, r1	; 0x8024eb <dds0_reg+0x2>
    d6d8:	10 92 ec 24 	sts	0x24EC, r1	; 0x8024ec <dds0_reg+0x3>
    d6dc:	4a e0       	ldi	r20, 0x0A	; 10
    d6de:	59 e0       	ldi	r21, 0x09	; 9
    d6e0:	6d e3       	ldi	r22, 0x3D	; 61
    d6e2:	70 e0       	ldi	r23, 0x00	; 0
    d6e4:	40 93 0f 20 	sts	0x200F, r20	; 0x80200f <dds1_freq_mHz>
    d6e8:	50 93 10 20 	sts	0x2010, r21	; 0x802010 <dds1_freq_mHz+0x1>
    d6ec:	60 93 11 20 	sts	0x2011, r22	; 0x802011 <dds1_freq_mHz+0x2>
    d6f0:	70 93 12 20 	sts	0x2012, r23	; 0x802012 <dds1_freq_mHz+0x3>
    d6f4:	40 e0       	ldi	r20, 0x00	; 0
    d6f6:	50 e0       	ldi	r21, 0x00	; 0
    d6f8:	60 e0       	ldi	r22, 0x00	; 0
    d6fa:	70 e4       	ldi	r23, 0x40	; 64
    d6fc:	40 93 0b 20 	sts	0x200B, r20	; 0x80200b <dds1_reg>
    d700:	50 93 0c 20 	sts	0x200C, r21	; 0x80200c <dds1_reg+0x1>
    d704:	60 93 0d 20 	sts	0x200D, r22	; 0x80200d <dds1_reg+0x2>
    d708:	70 93 0e 20 	sts	0x200E, r23	; 0x80200e <dds1_reg+0x3>
    d70c:	8f bf       	out	0x3f, r24	; 63
    d70e:	a3 d8       	rcall	.-3770   	; 0xc856 <dac_init>
    d710:	73 d8       	rcall	.-3866   	; 0xc7f8 <tc_start>
    d712:	6a d9       	rcall	.-3372   	; 0xc9e8 <dac_start>
    d714:	06 c0       	rjmp	.+12     	; 0xd722 <dac_app_enable+0x92>
    d716:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <dma_disable>
    d71a:	80 e2       	ldi	r24, 0x20	; 32
    d71c:	93 e0       	ldi	r25, 0x03	; 3
    d71e:	0e 94 82 4c 	call	0x9904	; 0x9904 <dac_disable>
    d722:	10 93 9e 28 	sts	0x289E, r17	; 0x80289e <g_dac_enabled>
    d726:	0f 90       	pop	r0
    d728:	df 91       	pop	r29
    d72a:	cf 91       	pop	r28
    d72c:	1f 91       	pop	r17
    d72e:	08 95       	ret

0000d730 <errorBeep_enable>:
    d730:	80 93 9a 28 	sts	0x289A, r24	; 0x80289a <g_errorBeep_enable>
    d734:	84 e0       	ldi	r24, 0x04	; 4
    d736:	4c cb       	rjmp	.-2408   	; 0xcdd0 <save_globals>
    d738:	08 95       	ret

0000d73a <keyBeep_enable>:
    d73a:	80 93 99 28 	sts	0x2899, r24	; 0x802899 <g_keyBeep_enable>
    d73e:	84 e0       	ldi	r24, 0x04	; 4
    d740:	47 cb       	rjmp	.-2418   	; 0xcdd0 <save_globals>
    d742:	08 95       	ret

0000d744 <pitchTone_mode>:
    d744:	80 93 9b 28 	sts	0x289B, r24	; 0x80289b <g_pitch_tone_mode>
    d748:	88 e0       	ldi	r24, 0x08	; 8
    d74a:	42 cb       	rjmp	.-2428   	; 0xcdd0 <save_globals>
    d74c:	08 95       	ret

0000d74e <printStatusLines_bitfield>:
    d74e:	91 e0       	ldi	r25, 0x01	; 1
    d750:	80 ff       	sbrs	r24, 0
    d752:	90 e0       	ldi	r25, 0x00	; 0
    d754:	90 93 84 28 	sts	0x2884, r25	; 0x802884 <g_usb_cdc_printStatusLines_atxmega>
    d758:	91 e0       	ldi	r25, 0x01	; 1
    d75a:	81 ff       	sbrs	r24, 1
    d75c:	90 e0       	ldi	r25, 0x00	; 0
    d75e:	90 93 83 28 	sts	0x2883, r25	; 0x802883 <g_usb_cdc_printStatusLines_sim808>
    d762:	80 e1       	ldi	r24, 0x10	; 16
    d764:	35 cb       	rjmp	.-2454   	; 0xcdd0 <save_globals>
    d766:	08 95       	ret

0000d768 <xoPwm_set>:
    d768:	0f 93       	push	r16
    d76a:	1f 93       	push	r17
    d76c:	cf 93       	push	r28
    d76e:	df 93       	push	r29
    d770:	1f 92       	push	r1
    d772:	1f 92       	push	r1
    d774:	cd b7       	in	r28, 0x3d	; 61
    d776:	de b7       	in	r29, 0x3e	; 62
    d778:	99 23       	and	r25, r25
    d77a:	4c f0       	brlt	.+18     	; 0xd78e <xoPwm_set+0x26>
    d77c:	8b 01       	movw	r16, r22
    d77e:	9c 01       	movw	r18, r24
    d780:	22 27       	eor	r18, r18
    d782:	33 27       	eor	r19, r19
    d784:	60 93 3c 08 	sts	0x083C, r22	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    d788:	70 93 3d 08 	sts	0x083D, r23	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>
    d78c:	46 c0       	rjmp	.+140    	; 0xd81a <xoPwm_set+0xb2>
    d78e:	6e 3f       	cpi	r22, 0xFE	; 254
    d790:	2f ef       	ldi	r18, 0xFF	; 255
    d792:	72 07       	cpc	r23, r18
    d794:	82 07       	cpc	r24, r18
    d796:	92 07       	cpc	r25, r18
    d798:	31 f0       	breq	.+12     	; 0xd7a6 <xoPwm_set+0x3e>
    d79a:	6f 3f       	cpi	r22, 0xFF	; 255
    d79c:	7f 4f       	sbci	r23, 0xFF	; 255
    d79e:	8f 4f       	sbci	r24, 0xFF	; 255
    d7a0:	9f 4f       	sbci	r25, 0xFF	; 255
    d7a2:	31 f1       	breq	.+76     	; 0xd7f0 <xoPwm_set+0x88>
    d7a4:	36 c0       	rjmp	.+108    	; 0xd812 <xoPwm_set+0xaa>
    d7a6:	60 91 6c 26 	lds	r22, 0x266C	; 0x80266c <g_pwm_vctcxo_cfg+0x5>
    d7aa:	70 91 6d 26 	lds	r23, 0x266D	; 0x80266d <g_pwm_vctcxo_cfg+0x6>
    d7ae:	80 e0       	ldi	r24, 0x00	; 0
    d7b0:	90 e0       	ldi	r25, 0x00	; 0
    d7b2:	0e 94 73 84 	call	0x108e6	; 0x108e6 <__floatunsisf>
    d7b6:	20 e0       	ldi	r18, 0x00	; 0
    d7b8:	30 e0       	ldi	r19, 0x00	; 0
    d7ba:	40 ec       	ldi	r20, 0xC0	; 192
    d7bc:	5f e3       	ldi	r21, 0x3F	; 63
    d7be:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    d7c2:	27 e2       	ldi	r18, 0x27	; 39
    d7c4:	31 e3       	ldi	r19, 0x31	; 49
    d7c6:	40 e5       	ldi	r20, 0x50	; 80
    d7c8:	50 e4       	ldi	r21, 0x40	; 64
    d7ca:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    d7ce:	20 e0       	ldi	r18, 0x00	; 0
    d7d0:	30 e0       	ldi	r19, 0x00	; 0
    d7d2:	40 e0       	ldi	r20, 0x00	; 0
    d7d4:	5f e3       	ldi	r21, 0x3F	; 63
    d7d6:	0e 94 6f 83 	call	0x106de	; 0x106de <__addsf3>
    d7da:	0e 94 42 84 	call	0x10884	; 0x10884 <__fixsfsi>
    d7de:	8b 01       	movw	r16, r22
    d7e0:	9c 01       	movw	r18, r24
    d7e2:	22 27       	eor	r18, r18
    d7e4:	33 27       	eor	r19, r19
    d7e6:	60 93 3c 08 	sts	0x083C, r22	; 0x80083c <__TEXT_REGION_LENGTH__+0x70083c>
    d7ea:	70 93 3d 08 	sts	0x083D, r23	; 0x80083d <__TEXT_REGION_LENGTH__+0x70083d>
    d7ee:	15 c0       	rjmp	.+42     	; 0xd81a <xoPwm_set+0xb2>
    d7f0:	8f b7       	in	r24, 0x3f	; 63
    d7f2:	8a 83       	std	Y+2, r24	; 0x02
    d7f4:	f8 94       	cli
    d7f6:	8a 81       	ldd	r24, Y+2	; 0x02
    d7f8:	00 91 e4 26 	lds	r16, 0x26E4	; 0x8026e4 <g_xo_mode_pwm>
    d7fc:	10 91 e5 26 	lds	r17, 0x26E5	; 0x8026e5 <g_xo_mode_pwm+0x1>
    d800:	20 91 e6 26 	lds	r18, 0x26E6	; 0x8026e6 <g_xo_mode_pwm+0x2>
    d804:	30 91 e7 26 	lds	r19, 0x26E7	; 0x8026e7 <g_xo_mode_pwm+0x3>
    d808:	8f bf       	out	0x3f, r24	; 63
    d80a:	22 27       	eor	r18, r18
    d80c:	33 27       	eor	r19, r19
    d80e:	30 64       	ori	r19, 0x40	; 64
    d810:	04 c0       	rjmp	.+8      	; 0xd81a <xoPwm_set+0xb2>
    d812:	00 e0       	ldi	r16, 0x00	; 0
    d814:	10 e8       	ldi	r17, 0x80	; 128
    d816:	2f ef       	ldi	r18, 0xFF	; 255
    d818:	3f ef       	ldi	r19, 0xFF	; 255
    d81a:	01 15       	cp	r16, r1
    d81c:	80 e8       	ldi	r24, 0x80	; 128
    d81e:	18 07       	cpc	r17, r24
    d820:	8f ef       	ldi	r24, 0xFF	; 255
    d822:	28 07       	cpc	r18, r24
    d824:	38 07       	cpc	r19, r24
    d826:	79 f0       	breq	.+30     	; 0xd846 <xoPwm_set+0xde>
    d828:	8f b7       	in	r24, 0x3f	; 63
    d82a:	89 83       	std	Y+1, r24	; 0x01
    d82c:	f8 94       	cli
    d82e:	89 81       	ldd	r24, Y+1	; 0x01
    d830:	00 93 e4 26 	sts	0x26E4, r16	; 0x8026e4 <g_xo_mode_pwm>
    d834:	10 93 e5 26 	sts	0x26E5, r17	; 0x8026e5 <g_xo_mode_pwm+0x1>
    d838:	20 93 e6 26 	sts	0x26E6, r18	; 0x8026e6 <g_xo_mode_pwm+0x2>
    d83c:	30 93 e7 26 	sts	0x26E7, r19	; 0x8026e7 <g_xo_mode_pwm+0x3>
    d840:	8f bf       	out	0x3f, r24	; 63
    d842:	81 e0       	ldi	r24, 0x01	; 1
    d844:	c5 da       	rcall	.-2678   	; 0xcdd0 <save_globals>
    d846:	0f 90       	pop	r0
    d848:	0f 90       	pop	r0
    d84a:	df 91       	pop	r29
    d84c:	cf 91       	pop	r28
    d84e:	1f 91       	pop	r17
    d850:	0f 91       	pop	r16
    d852:	08 95       	ret

0000d854 <sched_getLock>:


/* Simple scheduler concept */

bool sched_getLock(volatile uint8_t* lockVar)
{
    d854:	cf 93       	push	r28
    d856:	df 93       	push	r29
    d858:	1f 92       	push	r1
    d85a:	cd b7       	in	r28, 0x3d	; 61
    d85c:	de b7       	in	r29, 0x3e	; 62
    d85e:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    d860:	8f b7       	in	r24, 0x3f	; 63
    d862:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    d864:	f8 94       	cli
	return flags;
    d866:	99 81       	ldd	r25, Y+1	; 0x01

	/* IRQ secured access */	
	{
		irqflags_t flags = cpu_irq_save();
		barrier();
		if (!*lockVar) {	// No use before
    d868:	80 81       	ld	r24, Z
    d86a:	81 11       	cpse	r24, r1
    d86c:	05 c0       	rjmp	.+10     	; 0xd878 <sched_getLock+0x24>
			++*lockVar;
    d86e:	80 81       	ld	r24, Z
    d870:	8f 5f       	subi	r24, 0xFF	; 255
    d872:	80 83       	st	Z, r24
			barrier();
			status = true;
    d874:	81 e0       	ldi	r24, 0x01	; 1
    d876:	01 c0       	rjmp	.+2      	; 0xd87a <sched_getLock+0x26>

/* Simple scheduler concept */

bool sched_getLock(volatile uint8_t* lockVar)
{
	bool status = false;
    d878:	80 e0       	ldi	r24, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    d87a:	9f bf       	out	0x3f, r25	; 63
			status = true;
		}
		cpu_irq_restore(flags);
	}
	return status;
}
    d87c:	0f 90       	pop	r0
    d87e:	df 91       	pop	r29
    d880:	cf 91       	pop	r28
    d882:	08 95       	ret

0000d884 <sched_freeLock>:
    d884:	cf 93       	push	r28
    d886:	df 93       	push	r29
    d888:	1f 92       	push	r1
    d88a:	cd b7       	in	r28, 0x3d	; 61
    d88c:	de b7       	in	r29, 0x3e	; 62
    d88e:	fc 01       	movw	r30, r24
    d890:	8f b7       	in	r24, 0x3f	; 63
    d892:	89 83       	std	Y+1, r24	; 0x01
    d894:	f8 94       	cli
    d896:	99 81       	ldd	r25, Y+1	; 0x01
    d898:	10 82       	st	Z, r1
    d89a:	9f bf       	out	0x3f, r25	; 63
    d89c:	0f 90       	pop	r0
    d89e:	df 91       	pop	r29
    d8a0:	cf 91       	pop	r28
    d8a2:	08 95       	ret

0000d8a4 <sched_set_alarm>:
    d8a4:	cf 92       	push	r12
    d8a6:	df 92       	push	r13
    d8a8:	ef 92       	push	r14
    d8aa:	ff 92       	push	r15
    d8ac:	6b 01       	movw	r12, r22
    d8ae:	7c 01       	movw	r14, r24
    d8b0:	0e 94 0e 28 	call	0x501c	; 0x501c <rtc_get_time>
    d8b4:	6e 5f       	subi	r22, 0xFE	; 254
    d8b6:	7f 4f       	sbci	r23, 0xFF	; 255
    d8b8:	8f 4f       	sbci	r24, 0xFF	; 255
    d8ba:	9f 4f       	sbci	r25, 0xFF	; 255
    d8bc:	6c 15       	cp	r22, r12
    d8be:	7d 05       	cpc	r23, r13
    d8c0:	8e 05       	cpc	r24, r14
    d8c2:	9f 05       	cpc	r25, r15
    d8c4:	10 f4       	brcc	.+4      	; 0xd8ca <sched_set_alarm+0x26>
    d8c6:	c7 01       	movw	r24, r14
    d8c8:	b6 01       	movw	r22, r12
    d8ca:	0e 94 1f 28 	call	0x503e	; 0x503e <rtc_set_alarm>
    d8ce:	ff 90       	pop	r15
    d8d0:	ef 90       	pop	r14
    d8d2:	df 90       	pop	r13
    d8d4:	cf 90       	pop	r12
    d8d6:	08 95       	ret

0000d8d8 <sched_doSleep>:
    d8d8:	f8 94       	cli
    d8da:	80 91 7b 2e 	lds	r24, 0x2E7B	; 0x802e7b <sleepmgr_locks>
    d8de:	81 11       	cpse	r24, r1
    d8e0:	09 c0       	rjmp	.+18     	; 0xd8f4 <sched_doSleep+0x1c>
    d8e2:	ac e7       	ldi	r26, 0x7C	; 124
    d8e4:	be e2       	ldi	r27, 0x2E	; 46
    d8e6:	e0 e0       	ldi	r30, 0x00	; 0
    d8e8:	ef 5f       	subi	r30, 0xFF	; 255
    d8ea:	8d 91       	ld	r24, X+
    d8ec:	88 23       	and	r24, r24
    d8ee:	e1 f3       	breq	.-8      	; 0xd8e8 <sched_doSleep+0x10>
    d8f0:	e1 11       	cpse	r30, r1
    d8f2:	02 c0       	rjmp	.+4      	; 0xd8f8 <sched_doSleep+0x20>
    d8f4:	78 94       	sei
    d8f6:	08 95       	ret
    d8f8:	a8 e4       	ldi	r26, 0x48	; 72
    d8fa:	b0 e0       	ldi	r27, 0x00	; 0
    d8fc:	8c 91       	ld	r24, X
    d8fe:	f0 e0       	ldi	r31, 0x00	; 0
    d900:	e0 5c       	subi	r30, 0xC0	; 192
    d902:	ff 4d       	sbci	r31, 0xDF	; 223
    d904:	81 7f       	andi	r24, 0xF1	; 241
    d906:	90 81       	ld	r25, Z
    d908:	89 2b       	or	r24, r25
    d90a:	8c 93       	st	X, r24
    d90c:	8c 91       	ld	r24, X
    d90e:	81 60       	ori	r24, 0x01	; 1
    d910:	8c 93       	st	X, r24
    d912:	78 94       	sei
    d914:	88 95       	sleep
    d916:	8c 91       	ld	r24, X
    d918:	8e 7f       	andi	r24, 0xFE	; 254
    d91a:	8c 93       	st	X, r24
    d91c:	08 95       	ret

0000d91e <sched_push>:
    d91e:	2f 92       	push	r2
    d920:	3f 92       	push	r3
    d922:	4f 92       	push	r4
    d924:	5f 92       	push	r5
    d926:	6f 92       	push	r6
    d928:	7f 92       	push	r7
    d92a:	8f 92       	push	r8
    d92c:	9f 92       	push	r9
    d92e:	af 92       	push	r10
    d930:	bf 92       	push	r11
    d932:	cf 92       	push	r12
    d934:	ef 92       	push	r14
    d936:	ff 92       	push	r15
    d938:	0f 93       	push	r16
    d93a:	1f 93       	push	r17
    d93c:	cf 93       	push	r28
    d93e:	df 93       	push	r29
    d940:	cd b7       	in	r28, 0x3d	; 61
    d942:	de b7       	in	r29, 0x3e	; 62
    d944:	2b 97       	sbiw	r28, 0x0b	; 11
    d946:	cd bf       	out	0x3d, r28	; 61
    d948:	de bf       	out	0x3e, r29	; 62
    d94a:	3c 01       	movw	r6, r24
    d94c:	16 2f       	mov	r17, r22
    d94e:	49 01       	movw	r8, r18
    d950:	5a 01       	movw	r10, r20
    d952:	0e 94 0e 28 	call	0x501c	; 0x501c <rtc_get_time>
    d956:	6c 83       	std	Y+4, r22	; 0x04
    d958:	7d 83       	std	Y+5, r23	; 0x05
    d95a:	8e 83       	std	Y+6, r24	; 0x06
    d95c:	9f 83       	std	Y+7, r25	; 0x07
    d95e:	e1 10       	cpse	r14, r1
    d960:	08 c0       	rjmp	.+16     	; 0xd972 <sched_push+0x54>
    d962:	0f 2e       	mov	r0, r31
    d964:	21 2c       	mov	r2, r1
    d966:	31 2c       	mov	r3, r1
    d968:	f0 ef       	ldi	r31, 0xF0	; 240
    d96a:	4f 2e       	mov	r4, r31
    d96c:	51 2c       	mov	r5, r1
    d96e:	f0 2d       	mov	r31, r0
    d970:	07 c0       	rjmp	.+14     	; 0xd980 <sched_push+0x62>
    d972:	0f 2e       	mov	r0, r31
    d974:	21 2c       	mov	r2, r1
    d976:	31 2c       	mov	r3, r1
    d978:	41 2c       	mov	r4, r1
    d97a:	ff e8       	ldi	r31, 0x8F	; 143
    d97c:	5f 2e       	mov	r5, r31
    d97e:	f0 2d       	mov	r31, r0
    d980:	c1 10       	cpse	r12, r1
    d982:	05 c0       	rjmp	.+10     	; 0xd98e <sched_push+0x70>
    d984:	18 86       	std	Y+8, r1	; 0x08
    d986:	19 86       	std	Y+9, r1	; 0x09
    d988:	1a 86       	std	Y+10, r1	; 0x0a
    d98a:	1b 86       	std	Y+11, r1	; 0x0b
    d98c:	08 c0       	rjmp	.+16     	; 0xd99e <sched_push+0x80>
    d98e:	80 e0       	ldi	r24, 0x00	; 0
    d990:	90 e0       	ldi	r25, 0x00	; 0
    d992:	a0 e0       	ldi	r26, 0x00	; 0
    d994:	b0 e4       	ldi	r27, 0x40	; 64
    d996:	88 87       	std	Y+8, r24	; 0x08
    d998:	99 87       	std	Y+9, r25	; 0x09
    d99a:	aa 87       	std	Y+10, r26	; 0x0a
    d99c:	bb 87       	std	Y+11, r27	; 0x0b
    d99e:	00 23       	and	r16, r16
    d9a0:	09 f4       	brne	.+2      	; 0xd9a4 <sched_push+0x86>
    d9a2:	02 c2       	rjmp	.+1028   	; 0xdda8 <sched_push+0x48a>
    d9a4:	92 e0       	ldi	r25, 0x02	; 2
    d9a6:	89 16       	cp	r8, r25
    d9a8:	91 04       	cpc	r9, r1
    d9aa:	a1 04       	cpc	r10, r1
    d9ac:	b1 04       	cpc	r11, r1
    d9ae:	c8 f0       	brcs	.+50     	; 0xd9e2 <sched_push+0xc4>
    d9b0:	a1 e3       	ldi	r26, 0x31	; 49
    d9b2:	8a 16       	cp	r8, r26
    d9b4:	a5 e7       	ldi	r26, 0x75	; 117
    d9b6:	9a 06       	cpc	r9, r26
    d9b8:	a1 04       	cpc	r10, r1
    d9ba:	b1 04       	cpc	r11, r1
    d9bc:	b8 f4       	brcc	.+46     	; 0xd9ec <sched_push+0xce>
    d9be:	c5 01       	movw	r24, r10
    d9c0:	b4 01       	movw	r22, r8
    d9c2:	05 2e       	mov	r0, r21
    d9c4:	5a e0       	ldi	r21, 0x0A	; 10
    d9c6:	66 0f       	add	r22, r22
    d9c8:	77 1f       	adc	r23, r23
    d9ca:	88 1f       	adc	r24, r24
    d9cc:	99 1f       	adc	r25, r25
    d9ce:	5a 95       	dec	r21
    d9d0:	d1 f7       	brne	.-12     	; 0xd9c6 <sched_push+0xa8>
    d9d2:	50 2d       	mov	r21, r0
    d9d4:	28 ee       	ldi	r18, 0xE8	; 232
    d9d6:	33 e0       	ldi	r19, 0x03	; 3
    d9d8:	40 e0       	ldi	r20, 0x00	; 0
    d9da:	50 e0       	ldi	r21, 0x00	; 0
    d9dc:	0e 94 77 87 	call	0x10eee	; 0x10eee <__udivmodsi4>
    d9e0:	09 c0       	rjmp	.+18     	; 0xd9f4 <sched_push+0xd6>
    d9e2:	22 e0       	ldi	r18, 0x02	; 2
    d9e4:	30 e0       	ldi	r19, 0x00	; 0
    d9e6:	40 e0       	ldi	r20, 0x00	; 0
    d9e8:	50 e0       	ldi	r21, 0x00	; 0
    d9ea:	04 c0       	rjmp	.+8      	; 0xd9f4 <sched_push+0xd6>
    d9ec:	21 e3       	ldi	r18, 0x31	; 49
    d9ee:	30 e0       	ldi	r19, 0x00	; 0
    d9f0:	40 e0       	ldi	r20, 0x00	; 0
    d9f2:	50 e0       	ldi	r21, 0x00	; 0
    d9f4:	8c 80       	ldd	r8, Y+4	; 0x04
    d9f6:	9d 80       	ldd	r9, Y+5	; 0x05
    d9f8:	ae 80       	ldd	r10, Y+6	; 0x06
    d9fa:	bf 80       	ldd	r11, Y+7	; 0x07
    d9fc:	82 0e       	add	r8, r18
    d9fe:	93 1e       	adc	r9, r19
    da00:	a4 1e       	adc	r10, r20
    da02:	b5 1e       	adc	r11, r21
    da04:	d1 c1       	rjmp	.+930    	; 0xdda8 <sched_push+0x48a>
    da06:	e5 ef       	ldi	r30, 0xF5	; 245
    da08:	fd e2       	ldi	r31, 0x2D	; 45
    da0a:	83 81       	ldd	r24, Z+3	; 0x03
    da0c:	92 81       	ldd	r25, Z+2	; 0x02
    da0e:	89 1b       	sub	r24, r25
    da10:	98 2f       	mov	r25, r24
    da12:	85 81       	ldd	r24, Z+5	; 0x05
    da14:	89 23       	and	r24, r25
    da16:	94 81       	ldd	r25, Z+4	; 0x04
    da18:	89 17       	cp	r24, r25
    da1a:	09 f4       	brne	.+2      	; 0xda1e <sched_push+0x100>
    da1c:	cc c1       	rjmp	.+920    	; 0xddb6 <sched_push+0x498>
    da1e:	8f b7       	in	r24, 0x3f	; 63
    da20:	8b 83       	std	Y+3, r24	; 0x03
    da22:	f8 94       	cli
    da24:	8b 81       	ldd	r24, Y+3	; 0x03
    da26:	93 81       	ldd	r25, Z+3	; 0x03
    da28:	32 81       	ldd	r19, Z+2	; 0x02
    da2a:	25 81       	ldd	r18, Z+5	; 0x05
    da2c:	93 1b       	sub	r25, r19
    da2e:	92 23       	and	r25, r18
    da30:	34 81       	ldd	r19, Z+4	; 0x04
    da32:	93 17       	cp	r25, r19
    da34:	99 f0       	breq	.+38     	; 0xda5c <sched_push+0x13e>
    da36:	93 81       	ldd	r25, Z+3	; 0x03
    da38:	26 95       	lsr	r18
    da3a:	29 23       	and	r18, r25
    da3c:	a0 81       	ld	r26, Z
    da3e:	b1 81       	ldd	r27, Z+1	; 0x01
    da40:	04 e0       	ldi	r16, 0x04	; 4
    da42:	20 9f       	mul	r18, r16
    da44:	a0 0d       	add	r26, r0
    da46:	b1 1d       	adc	r27, r1
    da48:	11 24       	eor	r1, r1
    da4a:	8d 92       	st	X+, r8
    da4c:	9d 92       	st	X+, r9
    da4e:	ad 92       	st	X+, r10
    da50:	bc 92       	st	X, r11
    da52:	13 97       	sbiw	r26, 0x03	; 3
    da54:	9f 5f       	subi	r25, 0xFF	; 255
    da56:	25 81       	ldd	r18, Z+5	; 0x05
    da58:	92 23       	and	r25, r18
    da5a:	93 83       	std	Z+3, r25	; 0x03
    da5c:	e5 ef       	ldi	r30, 0xF5	; 245
    da5e:	fd e2       	ldi	r31, 0x2D	; 45
    da60:	93 81       	ldd	r25, Z+3	; 0x03
    da62:	32 81       	ldd	r19, Z+2	; 0x02
    da64:	25 81       	ldd	r18, Z+5	; 0x05
    da66:	93 1b       	sub	r25, r19
    da68:	92 23       	and	r25, r18
    da6a:	34 81       	ldd	r19, Z+4	; 0x04
    da6c:	93 17       	cp	r25, r19
    da6e:	19 f1       	breq	.+70     	; 0xdab6 <sched_push+0x198>
    da70:	93 81       	ldd	r25, Z+3	; 0x03
    da72:	26 95       	lsr	r18
    da74:	29 23       	and	r18, r25
    da76:	a0 81       	ld	r26, Z
    da78:	b1 81       	ldd	r27, Z+1	; 0x01
    da7a:	34 e0       	ldi	r19, 0x04	; 4
    da7c:	23 9f       	mul	r18, r19
    da7e:	a0 0d       	add	r26, r0
    da80:	b1 1d       	adc	r27, r1
    da82:	11 24       	eor	r1, r1
    da84:	a3 01       	movw	r20, r6
    da86:	60 e0       	ldi	r22, 0x00	; 0
    da88:	70 e0       	ldi	r23, 0x00	; 0
    da8a:	71 2b       	or	r23, r17
    da8c:	42 29       	or	r20, r2
    da8e:	53 29       	or	r21, r3
    da90:	64 29       	or	r22, r4
    da92:	75 29       	or	r23, r5
    da94:	08 85       	ldd	r16, Y+8	; 0x08
    da96:	19 85       	ldd	r17, Y+9	; 0x09
    da98:	2a 85       	ldd	r18, Y+10	; 0x0a
    da9a:	3b 85       	ldd	r19, Y+11	; 0x0b
    da9c:	40 2b       	or	r20, r16
    da9e:	51 2b       	or	r21, r17
    daa0:	62 2b       	or	r22, r18
    daa2:	73 2b       	or	r23, r19
    daa4:	4d 93       	st	X+, r20
    daa6:	5d 93       	st	X+, r21
    daa8:	6d 93       	st	X+, r22
    daaa:	7c 93       	st	X, r23
    daac:	13 97       	sbiw	r26, 0x03	; 3
    daae:	9f 5f       	subi	r25, 0xFF	; 255
    dab0:	25 81       	ldd	r18, Z+5	; 0x05
    dab2:	92 23       	and	r25, r18
    dab4:	93 83       	std	Z+3, r25	; 0x03
    dab6:	8f bf       	out	0x3f, r24	; 63
    dab8:	7e c1       	rjmp	.+764    	; 0xddb6 <sched_push+0x498>
    daba:	81 e0       	ldi	r24, 0x01	; 1
    dabc:	90 e0       	ldi	r25, 0x00	; 0
    dabe:	fc 01       	movw	r30, r24
    dac0:	ee 0f       	add	r30, r30
    dac2:	ff 1f       	adc	r31, r31
    dac4:	ee 0f       	add	r30, r30
    dac6:	ff 1f       	adc	r31, r31
    dac8:	ee 0f       	add	r30, r30
    daca:	ff 1f       	adc	r31, r31
    dacc:	e8 1b       	sub	r30, r24
    dace:	f9 0b       	sbc	r31, r25
    dad0:	ef 57       	subi	r30, 0x7F	; 127
    dad2:	fa 4d       	sbci	r31, 0xDA	; 218
    dad4:	20 81       	ld	r18, Z
    dad6:	20 fd       	sbrc	r18, 0
    dad8:	32 c0       	rjmp	.+100    	; 0xdb3e <sched_push+0x220>
    dada:	dc 01       	movw	r26, r24
    dadc:	aa 0f       	add	r26, r26
    dade:	bb 1f       	adc	r27, r27
    dae0:	aa 0f       	add	r26, r26
    dae2:	bb 1f       	adc	r27, r27
    dae4:	aa 0f       	add	r26, r26
    dae6:	bb 1f       	adc	r27, r27
    dae8:	a8 1b       	sub	r26, r24
    daea:	b9 0b       	sbc	r27, r25
    daec:	fd 01       	movw	r30, r26
    daee:	ef 57       	subi	r30, 0x7F	; 127
    daf0:	fa 4d       	sbci	r31, 0xDA	; 218
    daf2:	90 81       	ld	r25, Z
    daf4:	91 60       	ori	r25, 0x01	; 1
    daf6:	90 83       	st	Z, r25
    daf8:	a5 58       	subi	r26, 0x85	; 133
    dafa:	ba 4d       	sbci	r27, 0xDA	; 218
    dafc:	14 96       	adiw	r26, 0x04	; 4
    dafe:	6d 92       	st	X+, r6
    db00:	7c 92       	st	X, r7
    db02:	15 97       	sbiw	r26, 0x05	; 5
    db04:	13 70       	andi	r17, 0x03	; 3
    db06:	11 0f       	add	r17, r17
    db08:	11 0f       	add	r17, r17
    db0a:	11 0f       	add	r17, r17
    db0c:	90 81       	ld	r25, Z
    db0e:	97 7e       	andi	r25, 0xE7	; 231
    db10:	91 2b       	or	r25, r17
    db12:	90 83       	st	Z, r25
    db14:	90 81       	ld	r25, Z
    db16:	e0 fa       	bst	r14, 0
    db18:	91 f9       	bld	r25, 1
    db1a:	90 83       	st	Z, r25
    db1c:	90 81       	ld	r25, Z
    db1e:	c0 fa       	bst	r12, 0
    db20:	92 f9       	bld	r25, 2
    db22:	90 83       	st	Z, r25
    db24:	8d 92       	st	X+, r8
    db26:	9d 92       	st	X+, r9
    db28:	ad 92       	st	X+, r10
    db2a:	bc 92       	st	X, r11
    db2c:	13 97       	sbiw	r26, 0x03	; 3
    db2e:	8f 5f       	subi	r24, 0xFF	; 255
    db30:	e0 91 5b 25 	lds	r30, 0x255B	; 0x80255b <g_sched_sort>
    db34:	ee 23       	and	r30, r30
    db36:	a1 f0       	breq	.+40     	; 0xdb60 <sched_push+0x242>
    db38:	20 e0       	ldi	r18, 0x00	; 0
    db3a:	30 e0       	ldi	r19, 0x00	; 0
    db3c:	18 c0       	rjmp	.+48     	; 0xdb6e <sched_push+0x250>
    db3e:	01 96       	adiw	r24, 0x01	; 1
    db40:	80 32       	cpi	r24, 0x20	; 32
    db42:	91 05       	cpc	r25, r1
    db44:	09 f0       	breq	.+2      	; 0xdb48 <sched_push+0x22a>
    db46:	bb cf       	rjmp	.-138    	; 0xdabe <sched_push+0x1a0>
    db48:	1c 82       	std	Y+4, r1	; 0x04
    db4a:	1d 82       	std	Y+5, r1	; 0x05
    db4c:	1e 82       	std	Y+6, r1	; 0x06
    db4e:	1f 82       	std	Y+7, r1	; 0x07
    db50:	62 c0       	rjmp	.+196    	; 0xdc16 <sched_push+0x2f8>
    db52:	f9 01       	movw	r30, r18
    db54:	e5 5a       	subi	r30, 0xA5	; 165
    db56:	fa 4d       	sbci	r31, 0xDA	; 218
    db58:	e0 81       	ld	r30, Z
    db5a:	e1 11       	cpse	r30, r1
    db5c:	08 c0       	rjmp	.+16     	; 0xdb6e <sched_push+0x250>
    db5e:	02 c0       	rjmp	.+4      	; 0xdb64 <sched_push+0x246>
    db60:	20 e0       	ldi	r18, 0x00	; 0
    db62:	30 e0       	ldi	r19, 0x00	; 0
    db64:	f9 01       	movw	r30, r18
    db66:	e5 5a       	subi	r30, 0xA5	; 165
    db68:	fa 4d       	sbci	r31, 0xDA	; 218
    db6a:	80 83       	st	Z, r24
    db6c:	3d c0       	rjmp	.+122    	; 0xdbe8 <sched_push+0x2ca>
    db6e:	e1 50       	subi	r30, 0x01	; 1
    db70:	4e 2f       	mov	r20, r30
    db72:	50 e0       	ldi	r21, 0x00	; 0
    db74:	17 e0       	ldi	r17, 0x07	; 7
    db76:	e1 9f       	mul	r30, r17
    db78:	f0 01       	movw	r30, r0
    db7a:	11 24       	eor	r1, r1
    db7c:	ef 57       	subi	r30, 0x7F	; 127
    db7e:	fa 4d       	sbci	r31, 0xDA	; 218
    db80:	90 81       	ld	r25, Z
    db82:	90 ff       	sbrs	r25, 0
    db84:	2b c0       	rjmp	.+86     	; 0xdbdc <sched_push+0x2be>
    db86:	fa 01       	movw	r30, r20
    db88:	ee 0f       	add	r30, r30
    db8a:	ff 1f       	adc	r31, r31
    db8c:	ee 0f       	add	r30, r30
    db8e:	ff 1f       	adc	r31, r31
    db90:	ee 0f       	add	r30, r30
    db92:	ff 1f       	adc	r31, r31
    db94:	e4 1b       	sub	r30, r20
    db96:	f5 0b       	sbc	r31, r21
    db98:	e5 58       	subi	r30, 0x85	; 133
    db9a:	fa 4d       	sbci	r31, 0xDA	; 218
    db9c:	40 81       	ld	r20, Z
    db9e:	51 81       	ldd	r21, Z+1	; 0x01
    dba0:	62 81       	ldd	r22, Z+2	; 0x02
    dba2:	73 81       	ldd	r23, Z+3	; 0x03
    dba4:	84 16       	cp	r8, r20
    dba6:	95 06       	cpc	r9, r21
    dba8:	a6 06       	cpc	r10, r22
    dbaa:	b7 06       	cpc	r11, r23
    dbac:	b8 f4       	brcc	.+46     	; 0xdbdc <sched_push+0x2be>
    dbae:	2f 31       	cpi	r18, 0x1F	; 31
    dbb0:	31 05       	cpc	r19, r1
    dbb2:	7c f4       	brge	.+30     	; 0xdbd2 <sched_push+0x2b4>
    dbb4:	4e e1       	ldi	r20, 0x1E	; 30
    dbb6:	50 e0       	ldi	r21, 0x00	; 0
    dbb8:	fa 01       	movw	r30, r20
    dbba:	e5 5a       	subi	r30, 0xA5	; 165
    dbbc:	fa 4d       	sbci	r31, 0xDA	; 218
    dbbe:	90 81       	ld	r25, Z
    dbc0:	fa 01       	movw	r30, r20
    dbc2:	e4 5a       	subi	r30, 0xA4	; 164
    dbc4:	fa 4d       	sbci	r31, 0xDA	; 218
    dbc6:	90 83       	st	Z, r25
    dbc8:	41 50       	subi	r20, 0x01	; 1
    dbca:	51 09       	sbc	r21, r1
    dbcc:	42 17       	cp	r20, r18
    dbce:	53 07       	cpc	r21, r19
    dbd0:	9c f7       	brge	.-26     	; 0xdbb8 <sched_push+0x29a>
    dbd2:	f9 01       	movw	r30, r18
    dbd4:	e5 5a       	subi	r30, 0xA5	; 165
    dbd6:	fa 4d       	sbci	r31, 0xDA	; 218
    dbd8:	80 83       	st	Z, r24
    dbda:	06 c0       	rjmp	.+12     	; 0xdbe8 <sched_push+0x2ca>
    dbdc:	2f 5f       	subi	r18, 0xFF	; 255
    dbde:	3f 4f       	sbci	r19, 0xFF	; 255
    dbe0:	20 32       	cpi	r18, 0x20	; 32
    dbe2:	31 05       	cpc	r19, r1
    dbe4:	09 f0       	breq	.+2      	; 0xdbe8 <sched_push+0x2ca>
    dbe6:	b5 cf       	rjmp	.-150    	; 0xdb52 <sched_push+0x234>
    dbe8:	80 91 5b 25 	lds	r24, 0x255B	; 0x80255b <g_sched_sort>
    dbec:	90 e0       	ldi	r25, 0x00	; 0
    dbee:	01 97       	sbiw	r24, 0x01	; 1
    dbf0:	fc 01       	movw	r30, r24
    dbf2:	ee 0f       	add	r30, r30
    dbf4:	ff 1f       	adc	r31, r31
    dbf6:	ee 0f       	add	r30, r30
    dbf8:	ff 1f       	adc	r31, r31
    dbfa:	ee 0f       	add	r30, r30
    dbfc:	ff 1f       	adc	r31, r31
    dbfe:	e8 1b       	sub	r30, r24
    dc00:	f9 0b       	sbc	r31, r25
    dc02:	e5 58       	subi	r30, 0x85	; 133
    dc04:	fa 4d       	sbci	r31, 0xDA	; 218
    dc06:	80 81       	ld	r24, Z
    dc08:	91 81       	ldd	r25, Z+1	; 0x01
    dc0a:	a2 81       	ldd	r26, Z+2	; 0x02
    dc0c:	b3 81       	ldd	r27, Z+3	; 0x03
    dc0e:	8c 83       	std	Y+4, r24	; 0x04
    dc10:	9d 83       	std	Y+5, r25	; 0x05
    dc12:	ae 83       	std	Y+6, r26	; 0x06
    dc14:	bf 83       	std	Y+7, r27	; 0x07
    dc16:	8f e5       	ldi	r24, 0x5F	; 95
    dc18:	96 e2       	ldi	r25, 0x26	; 38
    dc1a:	34 de       	rcall	.-920    	; 0xd884 <sched_freeLock>
    dc1c:	0f 2e       	mov	r0, r31
    dc1e:	f5 ef       	ldi	r31, 0xF5	; 245
    dc20:	af 2e       	mov	r10, r31
    dc22:	fd e2       	ldi	r31, 0x2D	; 45
    dc24:	bf 2e       	mov	r11, r31
    dc26:	f0 2d       	mov	r31, r0
    dc28:	a3 c0       	rjmp	.+326    	; 0xdd70 <sched_push+0x452>
    dc2a:	8f b7       	in	r24, 0x3f	; 63
    dc2c:	8a 83       	std	Y+2, r24	; 0x02
    dc2e:	f8 94       	cli
    dc30:	2a 81       	ldd	r18, Y+2	; 0x02
    dc32:	d5 01       	movw	r26, r10
    dc34:	13 96       	adiw	r26, 0x03	; 3
    dc36:	9c 91       	ld	r25, X
    dc38:	13 97       	sbiw	r26, 0x03	; 3
    dc3a:	12 96       	adiw	r26, 0x02	; 2
    dc3c:	8c 91       	ld	r24, X
    dc3e:	12 97       	sbiw	r26, 0x02	; 2
    dc40:	98 17       	cp	r25, r24
    dc42:	c9 f0       	breq	.+50     	; 0xdc76 <sched_push+0x358>
    dc44:	12 96       	adiw	r26, 0x02	; 2
    dc46:	9c 91       	ld	r25, X
    dc48:	12 97       	sbiw	r26, 0x02	; 2
    dc4a:	15 96       	adiw	r26, 0x05	; 5
    dc4c:	8c 91       	ld	r24, X
    dc4e:	15 97       	sbiw	r26, 0x05	; 5
    dc50:	38 2f       	mov	r19, r24
    dc52:	36 95       	lsr	r19
    dc54:	39 23       	and	r19, r25
    dc56:	ed 91       	ld	r30, X+
    dc58:	fc 91       	ld	r31, X
    dc5a:	b4 e0       	ldi	r27, 0x04	; 4
    dc5c:	3b 9f       	mul	r19, r27
    dc5e:	e0 0d       	add	r30, r0
    dc60:	f1 1d       	adc	r31, r1
    dc62:	11 24       	eor	r1, r1
    dc64:	40 81       	ld	r20, Z
    dc66:	51 81       	ldd	r21, Z+1	; 0x01
    dc68:	62 81       	ldd	r22, Z+2	; 0x02
    dc6a:	73 81       	ldd	r23, Z+3	; 0x03
    dc6c:	9f 5f       	subi	r25, 0xFF	; 255
    dc6e:	89 23       	and	r24, r25
    dc70:	f5 01       	movw	r30, r10
    dc72:	82 83       	std	Z+2, r24	; 0x02
    dc74:	03 c0       	rjmp	.+6      	; 0xdc7c <sched_push+0x35e>
    dc76:	40 e0       	ldi	r20, 0x00	; 0
    dc78:	50 e0       	ldi	r21, 0x00	; 0
    dc7a:	ba 01       	movw	r22, r20
    dc7c:	d5 01       	movw	r26, r10
    dc7e:	13 96       	adiw	r26, 0x03	; 3
    dc80:	8c 91       	ld	r24, X
    dc82:	13 97       	sbiw	r26, 0x03	; 3
    dc84:	12 96       	adiw	r26, 0x02	; 2
    dc86:	9c 91       	ld	r25, X
    dc88:	12 97       	sbiw	r26, 0x02	; 2
    dc8a:	98 17       	cp	r25, r24
    dc8c:	c9 f0       	breq	.+50     	; 0xdcc0 <sched_push+0x3a2>
    dc8e:	12 96       	adiw	r26, 0x02	; 2
    dc90:	3c 91       	ld	r19, X
    dc92:	12 97       	sbiw	r26, 0x02	; 2
    dc94:	15 96       	adiw	r26, 0x05	; 5
    dc96:	9c 91       	ld	r25, X
    dc98:	15 97       	sbiw	r26, 0x05	; 5
    dc9a:	89 2f       	mov	r24, r25
    dc9c:	86 95       	lsr	r24
    dc9e:	83 23       	and	r24, r19
    dca0:	ed 91       	ld	r30, X+
    dca2:	fc 91       	ld	r31, X
    dca4:	b4 e0       	ldi	r27, 0x04	; 4
    dca6:	8b 9f       	mul	r24, r27
    dca8:	e0 0d       	add	r30, r0
    dcaa:	f1 1d       	adc	r31, r1
    dcac:	11 24       	eor	r1, r1
    dcae:	40 80       	ld	r4, Z
    dcb0:	51 80       	ldd	r5, Z+1	; 0x01
    dcb2:	62 80       	ldd	r6, Z+2	; 0x02
    dcb4:	73 80       	ldd	r7, Z+3	; 0x03
    dcb6:	3f 5f       	subi	r19, 0xFF	; 255
    dcb8:	93 23       	and	r25, r19
    dcba:	f5 01       	movw	r30, r10
    dcbc:	92 83       	std	Z+2, r25	; 0x02
    dcbe:	03 c0       	rjmp	.+6      	; 0xdcc6 <sched_push+0x3a8>
    dcc0:	41 2c       	mov	r4, r1
    dcc2:	51 2c       	mov	r5, r1
    dcc4:	32 01       	movw	r6, r4
    dcc6:	2f bf       	out	0x3f, r18	; 63
    dcc8:	d3 01       	movw	r26, r6
    dcca:	c2 01       	movw	r24, r4
    dccc:	88 27       	eor	r24, r24
    dcce:	99 27       	eor	r25, r25
    dcd0:	aa 27       	eor	r26, r26
    dcd2:	bf 70       	andi	r27, 0x0F	; 15
    dcd4:	00 97       	sbiw	r24, 0x00	; 0
    dcd6:	a1 05       	cpc	r26, r1
    dcd8:	bf 40       	sbci	r27, 0x0F	; 15
    dcda:	09 f1       	breq	.+66     	; 0xdd1e <sched_push+0x400>
    dcdc:	8f b7       	in	r24, 0x3f	; 63
    dcde:	89 83       	std	Y+1, r24	; 0x01
    dce0:	f8 94       	cli
    dce2:	29 81       	ldd	r18, Y+1	; 0x01
    dce4:	12 c0       	rjmp	.+36     	; 0xdd0a <sched_push+0x3ec>
    dce6:	d5 01       	movw	r26, r10
    dce8:	13 96       	adiw	r26, 0x03	; 3
    dcea:	9c 91       	ld	r25, X
    dcec:	13 97       	sbiw	r26, 0x03	; 3
    dcee:	12 96       	adiw	r26, 0x02	; 2
    dcf0:	8c 91       	ld	r24, X
    dcf2:	12 97       	sbiw	r26, 0x02	; 2
    dcf4:	98 17       	cp	r25, r24
    dcf6:	49 f0       	breq	.+18     	; 0xdd0a <sched_push+0x3ec>
    dcf8:	12 96       	adiw	r26, 0x02	; 2
    dcfa:	8c 91       	ld	r24, X
    dcfc:	12 97       	sbiw	r26, 0x02	; 2
    dcfe:	8f 5f       	subi	r24, 0xFF	; 255
    dd00:	15 96       	adiw	r26, 0x05	; 5
    dd02:	9c 91       	ld	r25, X
    dd04:	89 23       	and	r24, r25
    dd06:	f5 01       	movw	r30, r10
    dd08:	82 83       	std	Z+2, r24	; 0x02
    dd0a:	d5 01       	movw	r26, r10
    dd0c:	13 96       	adiw	r26, 0x03	; 3
    dd0e:	9c 91       	ld	r25, X
    dd10:	13 97       	sbiw	r26, 0x03	; 3
    dd12:	12 96       	adiw	r26, 0x02	; 2
    dd14:	8c 91       	ld	r24, X
    dd16:	98 13       	cpse	r25, r24
    dd18:	e6 cf       	rjmp	.-52     	; 0xdce6 <sched_push+0x3c8>
    dd1a:	2f bf       	out	0x3f, r18	; 63
    dd1c:	29 c0       	rjmp	.+82     	; 0xdd70 <sched_push+0x452>
    dd1e:	d3 01       	movw	r26, r6
    dd20:	c2 01       	movw	r24, r4
    dd22:	aa 27       	eor	r26, r26
    dd24:	bb 27       	eor	r27, r27
    dd26:	89 2b       	or	r24, r25
    dd28:	8a 2b       	or	r24, r26
    dd2a:	8b 2b       	or	r24, r27
    dd2c:	09 f1       	breq	.+66     	; 0xdd70 <sched_push+0x452>
    dd2e:	41 15       	cp	r20, r1
    dd30:	51 05       	cpc	r21, r1
    dd32:	61 05       	cpc	r22, r1
    dd34:	71 05       	cpc	r23, r1
    dd36:	e1 f0       	breq	.+56     	; 0xdd70 <sched_push+0x452>
    dd38:	d3 01       	movw	r26, r6
    dd3a:	c2 01       	movw	r24, r4
    dd3c:	07 2e       	mov	r0, r23
    dd3e:	7e e1       	ldi	r23, 0x1E	; 30
    dd40:	b6 95       	lsr	r27
    dd42:	a7 95       	ror	r26
    dd44:	97 95       	ror	r25
    dd46:	87 95       	ror	r24
    dd48:	7a 95       	dec	r23
    dd4a:	d1 f7       	brne	.-12     	; 0xdd40 <sched_push+0x422>
    dd4c:	70 2d       	mov	r23, r0
    dd4e:	e8 2f       	mov	r30, r24
    dd50:	e1 70       	andi	r30, 0x01	; 1
    dd52:	ce 2e       	mov	r12, r30
    dd54:	83 01       	movw	r16, r6
    dd56:	72 01       	movw	r14, r4
    dd58:	ee 24       	eor	r14, r14
    dd5a:	17 fd       	sbrc	r17, 7
    dd5c:	e3 94       	inc	r14
    dd5e:	ff 24       	eor	r15, r15
    dd60:	00 27       	eor	r16, r16
    dd62:	11 27       	eor	r17, r17
    dd64:	00 e0       	ldi	r16, 0x00	; 0
    dd66:	9a 01       	movw	r18, r20
    dd68:	ab 01       	movw	r20, r22
    dd6a:	60 e0       	ldi	r22, 0x00	; 0
    dd6c:	c2 01       	movw	r24, r4
    dd6e:	d7 dd       	rcall	.-1106   	; 0xd91e <sched_push>
    dd70:	d5 01       	movw	r26, r10
    dd72:	13 96       	adiw	r26, 0x03	; 3
    dd74:	8c 91       	ld	r24, X
    dd76:	13 97       	sbiw	r26, 0x03	; 3
    dd78:	12 96       	adiw	r26, 0x02	; 2
    dd7a:	9c 91       	ld	r25, X
    dd7c:	98 13       	cpse	r25, r24
    dd7e:	55 cf       	rjmp	.-342    	; 0xdc2a <sched_push+0x30c>
    dd80:	0c 81       	ldd	r16, Y+4	; 0x04
    dd82:	1d 81       	ldd	r17, Y+5	; 0x05
    dd84:	2e 81       	ldd	r18, Y+6	; 0x06
    dd86:	3f 81       	ldd	r19, Y+7	; 0x07
    dd88:	01 15       	cp	r16, r1
    dd8a:	11 05       	cpc	r17, r1
    dd8c:	21 05       	cpc	r18, r1
    dd8e:	31 05       	cpc	r19, r1
    dd90:	91 f0       	breq	.+36     	; 0xddb6 <sched_push+0x498>
    dd92:	c9 01       	movw	r24, r18
    dd94:	b8 01       	movw	r22, r16
    dd96:	86 dd       	rcall	.-1268   	; 0xd8a4 <sched_set_alarm>
    dd98:	0e c0       	rjmp	.+28     	; 0xddb6 <sched_push+0x498>
    dd9a:	80 91 81 25 	lds	r24, 0x2581	; 0x802581 <g_sched_data+0x6>
    dd9e:	80 fd       	sbrc	r24, 0
    dda0:	8c ce       	rjmp	.-744    	; 0xdaba <sched_push+0x19c>
    dda2:	80 e0       	ldi	r24, 0x00	; 0
    dda4:	90 e0       	ldi	r25, 0x00	; 0
    dda6:	99 ce       	rjmp	.-718    	; 0xdada <sched_push+0x1bc>
    dda8:	8f e5       	ldi	r24, 0x5F	; 95
    ddaa:	96 e2       	ldi	r25, 0x26	; 38
    ddac:	53 dd       	rcall	.-1370   	; 0xd854 <sched_getLock>
    ddae:	88 23       	and	r24, r24
    ddb0:	09 f4       	brne	.+2      	; 0xddb4 <sched_push+0x496>
    ddb2:	29 ce       	rjmp	.-942    	; 0xda06 <sched_push+0xe8>
    ddb4:	f2 cf       	rjmp	.-28     	; 0xdd9a <sched_push+0x47c>
    ddb6:	2b 96       	adiw	r28, 0x0b	; 11
    ddb8:	cd bf       	out	0x3d, r28	; 61
    ddba:	de bf       	out	0x3e, r29	; 62
    ddbc:	df 91       	pop	r29
    ddbe:	cf 91       	pop	r28
    ddc0:	1f 91       	pop	r17
    ddc2:	0f 91       	pop	r16
    ddc4:	ff 90       	pop	r15
    ddc6:	ef 90       	pop	r14
    ddc8:	cf 90       	pop	r12
    ddca:	bf 90       	pop	r11
    ddcc:	af 90       	pop	r10
    ddce:	9f 90       	pop	r9
    ddd0:	8f 90       	pop	r8
    ddd2:	7f 90       	pop	r7
    ddd4:	6f 90       	pop	r6
    ddd6:	5f 90       	pop	r5
    ddd8:	4f 90       	pop	r4
    ddda:	3f 90       	pop	r3
    dddc:	2f 90       	pop	r2
    ddde:	08 95       	ret

0000dde0 <dds_update>:
    dde0:	4f 92       	push	r4
    dde2:	5f 92       	push	r5
    dde4:	6f 92       	push	r6
    dde6:	7f 92       	push	r7
    dde8:	8f 92       	push	r8
    ddea:	9f 92       	push	r9
    ddec:	af 92       	push	r10
    ddee:	bf 92       	push	r11
    ddf0:	cf 92       	push	r12
    ddf2:	df 92       	push	r13
    ddf4:	ef 92       	push	r14
    ddf6:	ff 92       	push	r15
    ddf8:	0f 93       	push	r16
    ddfa:	1f 93       	push	r17
    ddfc:	cf 93       	push	r28
    ddfe:	df 93       	push	r29
    de00:	cd b7       	in	r28, 0x3d	; 61
    de02:	de b7       	in	r29, 0x3e	; 62
    de04:	2d 97       	sbiw	r28, 0x0d	; 13
    de06:	cd bf       	out	0x3d, r28	; 61
    de08:	de bf       	out	0x3e, r29	; 62
    de0a:	6a 83       	std	Y+2, r22	; 0x02
    de0c:	7b 83       	std	Y+3, r23	; 0x03
    de0e:	8c 83       	std	Y+4, r24	; 0x04
    de10:	9d 83       	std	Y+5, r25	; 0x05
    de12:	2e 83       	std	Y+6, r18	; 0x06
    de14:	3f 83       	std	Y+7, r19	; 0x07
    de16:	48 87       	std	Y+8, r20	; 0x08
    de18:	59 87       	std	Y+9, r21	; 0x09
    de1a:	ea 86       	std	Y+10, r14	; 0x0a
    de1c:	fb 86       	std	Y+11, r15	; 0x0b
    de1e:	0c 87       	std	Y+12, r16	; 0x0c
    de20:	1d 87       	std	Y+13, r17	; 0x0d
    de22:	20 e0       	ldi	r18, 0x00	; 0
    de24:	30 e0       	ldi	r19, 0x00	; 0
    de26:	a9 01       	movw	r20, r18
    de28:	0e 94 5e 85 	call	0x10abc	; 0x10abc <__gesf2>
    de2c:	88 23       	and	r24, r24
    de2e:	7c f0       	brlt	.+30     	; 0xde4e <dds_update+0x6e>
    de30:	20 e0       	ldi	r18, 0x00	; 0
    de32:	30 e0       	ldi	r19, 0x00	; 0
    de34:	4a e7       	ldi	r20, 0x7A	; 122
    de36:	54 e4       	ldi	r21, 0x44	; 68
    de38:	6a 81       	ldd	r22, Y+2	; 0x02
    de3a:	7b 81       	ldd	r23, Y+3	; 0x03
    de3c:	8c 81       	ldd	r24, Y+4	; 0x04
    de3e:	9d 81       	ldd	r25, Y+5	; 0x05
    de40:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    de44:	0e 94 47 84 	call	0x1088e	; 0x1088e <__fixunssfsi>
    de48:	2b 01       	movw	r4, r22
    de4a:	3c 01       	movw	r6, r24
    de4c:	03 c0       	rjmp	.+6      	; 0xde54 <dds_update+0x74>
    de4e:	41 2c       	mov	r4, r1
    de50:	51 2c       	mov	r5, r1
    de52:	32 01       	movw	r6, r4
    de54:	20 e0       	ldi	r18, 0x00	; 0
    de56:	30 e0       	ldi	r19, 0x00	; 0
    de58:	a9 01       	movw	r20, r18
    de5a:	6e 81       	ldd	r22, Y+6	; 0x06
    de5c:	7f 81       	ldd	r23, Y+7	; 0x07
    de5e:	88 85       	ldd	r24, Y+8	; 0x08
    de60:	99 85       	ldd	r25, Y+9	; 0x09
    de62:	0e 94 5e 85 	call	0x10abc	; 0x10abc <__gesf2>
    de66:	88 23       	and	r24, r24
    de68:	7c f0       	brlt	.+30     	; 0xde88 <dds_update+0xa8>
    de6a:	20 e0       	ldi	r18, 0x00	; 0
    de6c:	30 e0       	ldi	r19, 0x00	; 0
    de6e:	4a e7       	ldi	r20, 0x7A	; 122
    de70:	54 e4       	ldi	r21, 0x44	; 68
    de72:	6e 81       	ldd	r22, Y+6	; 0x06
    de74:	7f 81       	ldd	r23, Y+7	; 0x07
    de76:	88 85       	ldd	r24, Y+8	; 0x08
    de78:	99 85       	ldd	r25, Y+9	; 0x09
    de7a:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    de7e:	0e 94 47 84 	call	0x1088e	; 0x1088e <__fixunssfsi>
    de82:	4b 01       	movw	r8, r22
    de84:	5c 01       	movw	r10, r24
    de86:	03 c0       	rjmp	.+6      	; 0xde8e <dds_update+0xae>
    de88:	81 2c       	mov	r8, r1
    de8a:	91 2c       	mov	r9, r1
    de8c:	54 01       	movw	r10, r8
    de8e:	20 e0       	ldi	r18, 0x00	; 0
    de90:	30 e0       	ldi	r19, 0x00	; 0
    de92:	a9 01       	movw	r20, r18
    de94:	6a 85       	ldd	r22, Y+10	; 0x0a
    de96:	7b 85       	ldd	r23, Y+11	; 0x0b
    de98:	8c 85       	ldd	r24, Y+12	; 0x0c
    de9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    de9c:	0e 94 5e 85 	call	0x10abc	; 0x10abc <__gesf2>
    dea0:	88 23       	and	r24, r24
    dea2:	ac f0       	brlt	.+42     	; 0xdece <dds_update+0xee>
    dea4:	20 e0       	ldi	r18, 0x00	; 0
    dea6:	30 e0       	ldi	r19, 0x00	; 0
    dea8:	44 eb       	ldi	r20, 0xB4	; 180
    deaa:	52 e4       	ldi	r21, 0x42	; 66
    deac:	6a 85       	ldd	r22, Y+10	; 0x0a
    deae:	7b 85       	ldd	r23, Y+11	; 0x0b
    deb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    deb2:	9d 85       	ldd	r25, Y+13	; 0x0d
    deb4:	0e 94 da 83 	call	0x107b4	; 0x107b4 <__divsf3>
    deb8:	20 e0       	ldi	r18, 0x00	; 0
    deba:	30 e0       	ldi	r19, 0x00	; 0
    debc:	40 e8       	ldi	r20, 0x80	; 128
    debe:	5e e4       	ldi	r21, 0x4E	; 78
    dec0:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
    dec4:	0e 94 47 84 	call	0x1088e	; 0x1088e <__fixunssfsi>
    dec8:	6b 01       	movw	r12, r22
    deca:	7c 01       	movw	r14, r24
    decc:	03 c0       	rjmp	.+6      	; 0xded4 <dds_update+0xf4>
    dece:	c1 2c       	mov	r12, r1
    ded0:	d1 2c       	mov	r13, r1
    ded2:	76 01       	movw	r14, r12
    ded4:	8f b7       	in	r24, 0x3f	; 63
    ded6:	89 83       	std	Y+1, r24	; 0x01
    ded8:	f8 94       	cli
    deda:	19 81       	ldd	r17, Y+1	; 0x01
    dedc:	20 e0       	ldi	r18, 0x00	; 0
    dede:	30 e0       	ldi	r19, 0x00	; 0
    dee0:	a9 01       	movw	r20, r18
    dee2:	6a 81       	ldd	r22, Y+2	; 0x02
    dee4:	7b 81       	ldd	r23, Y+3	; 0x03
    dee6:	8c 81       	ldd	r24, Y+4	; 0x04
    dee8:	9d 81       	ldd	r25, Y+5	; 0x05
    deea:	0e 94 5e 85 	call	0x10abc	; 0x10abc <__gesf2>
    deee:	88 23       	and	r24, r24
    def0:	44 f0       	brlt	.+16     	; 0xdf02 <dds_update+0x122>
    def2:	40 92 13 20 	sts	0x2013, r4	; 0x802013 <dds0_freq_mHz>
    def6:	50 92 14 20 	sts	0x2014, r5	; 0x802014 <dds0_freq_mHz+0x1>
    defa:	60 92 15 20 	sts	0x2015, r6	; 0x802015 <dds0_freq_mHz+0x2>
    defe:	70 92 16 20 	sts	0x2016, r7	; 0x802016 <dds0_freq_mHz+0x3>
    df02:	20 e0       	ldi	r18, 0x00	; 0
    df04:	30 e0       	ldi	r19, 0x00	; 0
    df06:	a9 01       	movw	r20, r18
    df08:	6e 81       	ldd	r22, Y+6	; 0x06
    df0a:	7f 81       	ldd	r23, Y+7	; 0x07
    df0c:	88 85       	ldd	r24, Y+8	; 0x08
    df0e:	99 85       	ldd	r25, Y+9	; 0x09
    df10:	0e 94 5e 85 	call	0x10abc	; 0x10abc <__gesf2>
    df14:	88 23       	and	r24, r24
    df16:	44 f0       	brlt	.+16     	; 0xdf28 <dds_update+0x148>
    df18:	80 92 0f 20 	sts	0x200F, r8	; 0x80200f <dds1_freq_mHz>
    df1c:	90 92 10 20 	sts	0x2010, r9	; 0x802010 <dds1_freq_mHz+0x1>
    df20:	a0 92 11 20 	sts	0x2011, r10	; 0x802011 <dds1_freq_mHz+0x2>
    df24:	b0 92 12 20 	sts	0x2012, r11	; 0x802012 <dds1_freq_mHz+0x3>
    df28:	20 e0       	ldi	r18, 0x00	; 0
    df2a:	30 e0       	ldi	r19, 0x00	; 0
    df2c:	a9 01       	movw	r20, r18
    df2e:	6a 85       	ldd	r22, Y+10	; 0x0a
    df30:	7b 85       	ldd	r23, Y+11	; 0x0b
    df32:	8c 85       	ldd	r24, Y+12	; 0x0c
    df34:	9d 85       	ldd	r25, Y+13	; 0x0d
    df36:	0e 94 5e 85 	call	0x10abc	; 0x10abc <__gesf2>
    df3a:	88 23       	and	r24, r24
    df3c:	84 f0       	brlt	.+32     	; 0xdf5e <dds_update+0x17e>
    df3e:	10 92 e9 24 	sts	0x24E9, r1	; 0x8024e9 <dds0_reg>
    df42:	10 92 ea 24 	sts	0x24EA, r1	; 0x8024ea <dds0_reg+0x1>
    df46:	10 92 eb 24 	sts	0x24EB, r1	; 0x8024eb <dds0_reg+0x2>
    df4a:	10 92 ec 24 	sts	0x24EC, r1	; 0x8024ec <dds0_reg+0x3>
    df4e:	c0 92 0b 20 	sts	0x200B, r12	; 0x80200b <dds1_reg>
    df52:	d0 92 0c 20 	sts	0x200C, r13	; 0x80200c <dds1_reg+0x1>
    df56:	e0 92 0d 20 	sts	0x200D, r14	; 0x80200d <dds1_reg+0x2>
    df5a:	f0 92 0e 20 	sts	0x200E, r15	; 0x80200e <dds1_reg+0x3>
    df5e:	1f bf       	out	0x3f, r17	; 63
    df60:	c1 2c       	mov	r12, r1
    df62:	e1 2c       	mov	r14, r1
    df64:	01 e0       	ldi	r16, 0x01	; 1
    df66:	2a e0       	ldi	r18, 0x0A	; 10
    df68:	30 e0       	ldi	r19, 0x00	; 0
    df6a:	40 e0       	ldi	r20, 0x00	; 0
    df6c:	50 e0       	ldi	r21, 0x00	; 0
    df6e:	60 e0       	ldi	r22, 0x00	; 0
    df70:	8f e3       	ldi	r24, 0x3F	; 63
    df72:	91 e6       	ldi	r25, 0x61	; 97
    df74:	d4 dc       	rcall	.-1624   	; 0xd91e <sched_push>
    df76:	2d 96       	adiw	r28, 0x0d	; 13
    df78:	cd bf       	out	0x3d, r28	; 61
    df7a:	de bf       	out	0x3e, r29	; 62
    df7c:	df 91       	pop	r29
    df7e:	cf 91       	pop	r28
    df80:	1f 91       	pop	r17
    df82:	0f 91       	pop	r16
    df84:	ff 90       	pop	r15
    df86:	ef 90       	pop	r14
    df88:	df 90       	pop	r13
    df8a:	cf 90       	pop	r12
    df8c:	bf 90       	pop	r11
    df8e:	af 90       	pop	r10
    df90:	9f 90       	pop	r9
    df92:	8f 90       	pop	r8
    df94:	7f 90       	pop	r7
    df96:	6f 90       	pop	r6
    df98:	5f 90       	pop	r5
    df9a:	4f 90       	pop	r4
    df9c:	08 95       	ret

0000df9e <isr_tcc0_ovfl>:
    df9e:	cf 92       	push	r12
    dfa0:	df 92       	push	r13
    dfa2:	ef 92       	push	r14
    dfa4:	ff 92       	push	r15
    dfa6:	0f 93       	push	r16
    dfa8:	1f 93       	push	r17
    dfaa:	0e 94 0e 28 	call	0x501c	; 0x501c <rtc_get_time>
    dfae:	21 e0       	ldi	r18, 0x01	; 1
    dfb0:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    dfb4:	20 91 7f 28 	lds	r18, 0x287F	; 0x80287f <g_workmode>
    dfb8:	22 30       	cpi	r18, 0x02	; 2
    dfba:	09 f0       	breq	.+2      	; 0xdfbe <isr_tcc0_ovfl+0x20>
    dfbc:	65 c0       	rjmp	.+202    	; 0xe088 <isr_tcc0_ovfl+0xea>
    dfbe:	00 91 99 24 	lds	r16, 0x2499	; 0x802499 <last_100ms.8164>
    dfc2:	10 91 9a 24 	lds	r17, 0x249A	; 0x80249a <last_100ms.8164+0x1>
    dfc6:	20 91 9b 24 	lds	r18, 0x249B	; 0x80249b <last_100ms.8164+0x2>
    dfca:	30 91 9c 24 	lds	r19, 0x249C	; 0x80249c <last_100ms.8164+0x3>
    dfce:	6b 01       	movw	r12, r22
    dfd0:	7c 01       	movw	r14, r24
    dfd2:	c0 1a       	sub	r12, r16
    dfd4:	d1 0a       	sbc	r13, r17
    dfd6:	e2 0a       	sbc	r14, r18
    dfd8:	f3 0a       	sbc	r15, r19
    dfda:	46 e6       	ldi	r20, 0x66	; 102
    dfdc:	c4 16       	cp	r12, r20
    dfde:	d1 04       	cpc	r13, r1
    dfe0:	e1 04       	cpc	r14, r1
    dfe2:	f1 04       	cpc	r15, r1
    dfe4:	28 f4       	brcc	.+10     	; 0xdff0 <isr_tcc0_ovfl+0x52>
    dfe6:	60 17       	cp	r22, r16
    dfe8:	71 07       	cpc	r23, r17
    dfea:	82 07       	cpc	r24, r18
    dfec:	93 07       	cpc	r25, r19
    dfee:	58 f4       	brcc	.+22     	; 0xe006 <isr_tcc0_ovfl+0x68>
    dff0:	60 93 99 24 	sts	0x2499, r22	; 0x802499 <last_100ms.8164>
    dff4:	70 93 9a 24 	sts	0x249A, r23	; 0x80249a <last_100ms.8164+0x1>
    dff8:	80 93 9b 24 	sts	0x249B, r24	; 0x80249b <last_100ms.8164+0x2>
    dffc:	90 93 9c 24 	sts	0x249C, r25	; 0x80249c <last_100ms.8164+0x3>
    e000:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <isr_100ms_twi1_onboard>
    e004:	41 c0       	rjmp	.+130    	; 0xe088 <isr_tcc0_ovfl+0xea>
    e006:	00 91 95 24 	lds	r16, 0x2495	; 0x802495 <last_500ms.8165>
    e00a:	10 91 96 24 	lds	r17, 0x2496	; 0x802496 <last_500ms.8165+0x1>
    e00e:	20 91 97 24 	lds	r18, 0x2497	; 0x802497 <last_500ms.8165+0x2>
    e012:	30 91 98 24 	lds	r19, 0x2498	; 0x802498 <last_500ms.8165+0x3>
    e016:	6b 01       	movw	r12, r22
    e018:	7c 01       	movw	r14, r24
    e01a:	c0 1a       	sub	r12, r16
    e01c:	d1 0a       	sbc	r13, r17
    e01e:	e2 0a       	sbc	r14, r18
    e020:	f3 0a       	sbc	r15, r19
    e022:	c1 14       	cp	r12, r1
    e024:	42 e0       	ldi	r20, 0x02	; 2
    e026:	d4 06       	cpc	r13, r20
    e028:	e1 04       	cpc	r14, r1
    e02a:	f1 04       	cpc	r15, r1
    e02c:	28 f4       	brcc	.+10     	; 0xe038 <isr_tcc0_ovfl+0x9a>
    e02e:	60 17       	cp	r22, r16
    e030:	71 07       	cpc	r23, r17
    e032:	82 07       	cpc	r24, r18
    e034:	93 07       	cpc	r25, r19
    e036:	30 f5       	brcc	.+76     	; 0xe084 <isr_tcc0_ovfl+0xe6>
    e038:	60 93 95 24 	sts	0x2495, r22	; 0x802495 <last_500ms.8165>
    e03c:	70 93 96 24 	sts	0x2496, r23	; 0x802496 <last_500ms.8165+0x1>
    e040:	80 93 97 24 	sts	0x2497, r24	; 0x802497 <last_500ms.8165+0x2>
    e044:	90 93 98 24 	sts	0x2498, r25	; 0x802498 <last_500ms.8165+0x3>
    e048:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <isr_500ms_twi1_onboard>
    e04c:	c1 2c       	mov	r12, r1
    e04e:	e1 2c       	mov	r14, r1
    e050:	01 e0       	ldi	r16, 0x01	; 1
    e052:	24 e6       	ldi	r18, 0x64	; 100
    e054:	30 e0       	ldi	r19, 0x00	; 0
    e056:	40 e0       	ldi	r20, 0x00	; 0
    e058:	50 e0       	ldi	r21, 0x00	; 0
    e05a:	60 e0       	ldi	r22, 0x00	; 0
    e05c:	81 e4       	ldi	r24, 0x41	; 65
    e05e:	92 e6       	ldi	r25, 0x62	; 98
    e060:	5e dc       	rcall	.-1860   	; 0xd91e <sched_push>
    e062:	24 e6       	ldi	r18, 0x64	; 100
    e064:	30 e0       	ldi	r19, 0x00	; 0
    e066:	40 e0       	ldi	r20, 0x00	; 0
    e068:	50 e0       	ldi	r21, 0x00	; 0
    e06a:	60 e0       	ldi	r22, 0x00	; 0
    e06c:	8f e3       	ldi	r24, 0x3F	; 63
    e06e:	91 e6       	ldi	r25, 0x61	; 97
    e070:	56 dc       	rcall	.-1876   	; 0xd91e <sched_push>
    e072:	0e 94 0e 28 	call	0x501c	; 0x501c <rtc_get_time>
    e076:	6e 5f       	subi	r22, 0xFE	; 254
    e078:	7f 4f       	sbci	r23, 0xFF	; 255
    e07a:	8f 4f       	sbci	r24, 0xFF	; 255
    e07c:	9f 4f       	sbci	r25, 0xFF	; 255
    e07e:	0e 94 1f 28 	call	0x503e	; 0x503e <rtc_set_alarm>
    e082:	02 c0       	rjmp	.+4      	; 0xe088 <isr_tcc0_ovfl+0xea>
    e084:	0e 94 35 38 	call	0x706a	; 0x706a <isr_sparetime_twi1_onboard>
    e088:	1f 91       	pop	r17
    e08a:	0f 91       	pop	r16
    e08c:	ff 90       	pop	r15
    e08e:	ef 90       	pop	r14
    e090:	df 90       	pop	r13
    e092:	cf 90       	pop	r12
    e094:	08 95       	ret

0000e096 <sched_pop>:
    e096:	7f 92       	push	r7
    e098:	8f 92       	push	r8
    e09a:	9f 92       	push	r9
    e09c:	af 92       	push	r10
    e09e:	bf 92       	push	r11
    e0a0:	cf 92       	push	r12
    e0a2:	df 92       	push	r13
    e0a4:	ef 92       	push	r14
    e0a6:	ff 92       	push	r15
    e0a8:	0f 93       	push	r16
    e0aa:	1f 93       	push	r17
    e0ac:	cf 93       	push	r28
    e0ae:	df 93       	push	r29
    e0b0:	1f 92       	push	r1
    e0b2:	cd b7       	in	r28, 0x3d	; 61
    e0b4:	de b7       	in	r29, 0x3e	; 62
    e0b6:	4b 01       	movw	r8, r22
    e0b8:	5c 01       	movw	r10, r24
    e0ba:	8f e5       	ldi	r24, 0x5F	; 95
    e0bc:	96 e2       	ldi	r25, 0x26	; 38
    e0be:	ca db       	rcall	.-2156   	; 0xd854 <sched_getLock>
    e0c0:	81 11       	cpse	r24, r1
    e0c2:	04 c0       	rjmp	.+8      	; 0xe0cc <sched_pop+0x36>
    e0c4:	81 e0       	ldi	r24, 0x01	; 1
    e0c6:	80 93 5b 26 	sts	0x265B, r24	; 0x80265b <g_sched_pop_again>
    e0ca:	bd c0       	rjmp	.+378    	; 0xe246 <sched_pop+0x1b0>
    e0cc:	70 90 5b 25 	lds	r7, 0x255B	; 0x80255b <g_sched_sort>
    e0d0:	77 20       	and	r7, r7
    e0d2:	09 f4       	brne	.+2      	; 0xe0d6 <sched_pop+0x40>
    e0d4:	b4 c0       	rjmp	.+360    	; 0xe23e <sched_pop+0x1a8>
    e0d6:	87 2d       	mov	r24, r7
    e0d8:	90 e0       	ldi	r25, 0x00	; 0
    e0da:	01 97       	sbiw	r24, 0x01	; 1
    e0dc:	fc 01       	movw	r30, r24
    e0de:	ee 0f       	add	r30, r30
    e0e0:	ff 1f       	adc	r31, r31
    e0e2:	ee 0f       	add	r30, r30
    e0e4:	ff 1f       	adc	r31, r31
    e0e6:	ee 0f       	add	r30, r30
    e0e8:	ff 1f       	adc	r31, r31
    e0ea:	e8 1b       	sub	r30, r24
    e0ec:	f9 0b       	sbc	r31, r25
    e0ee:	ef 57       	subi	r30, 0x7F	; 127
    e0f0:	fa 4d       	sbci	r31, 0xDA	; 218
    e0f2:	20 81       	ld	r18, Z
    e0f4:	20 ff       	sbrs	r18, 0
    e0f6:	a3 c0       	rjmp	.+326    	; 0xe23e <sched_pop+0x1a8>
    e0f8:	fc 01       	movw	r30, r24
    e0fa:	ee 0f       	add	r30, r30
    e0fc:	ff 1f       	adc	r31, r31
    e0fe:	ee 0f       	add	r30, r30
    e100:	ff 1f       	adc	r31, r31
    e102:	ee 0f       	add	r30, r30
    e104:	ff 1f       	adc	r31, r31
    e106:	e8 1b       	sub	r30, r24
    e108:	f9 0b       	sbc	r31, r25
    e10a:	e5 58       	subi	r30, 0x85	; 133
    e10c:	fa 4d       	sbci	r31, 0xDA	; 218
    e10e:	c0 80       	ld	r12, Z
    e110:	d1 80       	ldd	r13, Z+1	; 0x01
    e112:	e2 80       	ldd	r14, Z+2	; 0x02
    e114:	f3 80       	ldd	r15, Z+3	; 0x03
    e116:	0b e5       	ldi	r16, 0x5B	; 91
    e118:	15 e2       	ldi	r17, 0x25	; 37
    e11a:	74 c0       	rjmp	.+232    	; 0xe204 <sched_pop+0x16e>
    e11c:	87 2d       	mov	r24, r7
    e11e:	90 e0       	ldi	r25, 0x00	; 0
    e120:	01 97       	sbiw	r24, 0x01	; 1
    e122:	dc 01       	movw	r26, r24
    e124:	aa 0f       	add	r26, r26
    e126:	bb 1f       	adc	r27, r27
    e128:	aa 0f       	add	r26, r26
    e12a:	bb 1f       	adc	r27, r27
    e12c:	aa 0f       	add	r26, r26
    e12e:	bb 1f       	adc	r27, r27
    e130:	a8 1b       	sub	r26, r24
    e132:	b9 0b       	sbc	r27, r25
    e134:	fd 01       	movw	r30, r26
    e136:	e5 58       	subi	r30, 0x85	; 133
    e138:	fa 4d       	sbci	r31, 0xDA	; 218
    e13a:	04 80       	ldd	r0, Z+4	; 0x04
    e13c:	f5 81       	ldd	r31, Z+5	; 0x05
    e13e:	e0 2d       	mov	r30, r0
    e140:	af 57       	subi	r26, 0x7F	; 127
    e142:	ba 4d       	sbci	r27, 0xDA	; 218
    e144:	6c 91       	ld	r22, X
    e146:	66 95       	lsr	r22
    e148:	66 95       	lsr	r22
    e14a:	66 95       	lsr	r22
    e14c:	63 70       	andi	r22, 0x03	; 3
    e14e:	8c 91       	ld	r24, X
    e150:	81 fb       	bst	r24, 1
    e152:	77 27       	eor	r23, r23
    e154:	70 f9       	bld	r23, 0
    e156:	4c 91       	ld	r20, X
    e158:	42 fb       	bst	r20, 2
    e15a:	44 27       	eor	r20, r20
    e15c:	40 f9       	bld	r20, 0
    e15e:	8c 91       	ld	r24, X
    e160:	8e 7f       	andi	r24, 0xFE	; 254
    e162:	8c 93       	st	X, r24
    e164:	80 e0       	ldi	r24, 0x00	; 0
    e166:	90 e0       	ldi	r25, 0x00	; 0
    e168:	9c 01       	movw	r18, r24
    e16a:	2f 5f       	subi	r18, 0xFF	; 255
    e16c:	3f 4f       	sbci	r19, 0xFF	; 255
    e16e:	d9 01       	movw	r26, r18
    e170:	a5 5a       	subi	r26, 0xA5	; 165
    e172:	ba 4d       	sbci	r27, 0xDA	; 218
    e174:	5c 91       	ld	r21, X
    e176:	dc 01       	movw	r26, r24
    e178:	a5 5a       	subi	r26, 0xA5	; 165
    e17a:	ba 4d       	sbci	r27, 0xDA	; 218
    e17c:	5c 93       	st	X, r21
    e17e:	c9 01       	movw	r24, r18
    e180:	2f 31       	cpi	r18, 0x1F	; 31
    e182:	31 05       	cpc	r19, r1
    e184:	89 f7       	brne	.-30     	; 0xe168 <sched_pop+0xd2>
    e186:	d8 01       	movw	r26, r16
    e188:	5f 96       	adiw	r26, 0x1f	; 31
    e18a:	1c 92       	st	X, r1
    e18c:	30 97       	sbiw	r30, 0x00	; 0
    e18e:	b1 f0       	breq	.+44     	; 0xe1bc <sched_pop+0x126>
    e190:	8f b7       	in	r24, 0x3f	; 63
    e192:	89 83       	std	Y+1, r24	; 0x01
    e194:	f8 94       	cli
    e196:	79 80       	ldd	r7, Y+1	; 0x01
    e198:	77 23       	and	r23, r23
    e19a:	11 f0       	breq	.+4      	; 0xe1a0 <sched_pop+0x10a>
    e19c:	f8 94       	cli
    e19e:	01 c0       	rjmp	.+2      	; 0xe1a2 <sched_pop+0x10c>
    e1a0:	78 94       	sei
    e1a2:	66 23       	and	r22, r22
    e1a4:	19 f0       	breq	.+6      	; 0xe1ac <sched_pop+0x116>
    e1a6:	61 30       	cpi	r22, 0x01	; 1
    e1a8:	29 f0       	breq	.+10     	; 0xe1b4 <sched_pop+0x11e>
    e1aa:	07 c0       	rjmp	.+14     	; 0xe1ba <sched_pop+0x124>
    e1ac:	c7 01       	movw	r24, r14
    e1ae:	b6 01       	movw	r22, r12
    e1b0:	19 95       	eicall
    e1b2:	03 c0       	rjmp	.+6      	; 0xe1ba <sched_pop+0x124>
    e1b4:	c7 01       	movw	r24, r14
    e1b6:	b6 01       	movw	r22, r12
    e1b8:	19 95       	eicall
    e1ba:	7f be       	out	0x3f, r7	; 63
    e1bc:	f8 01       	movw	r30, r16
    e1be:	70 80       	ld	r7, Z
    e1c0:	77 20       	and	r7, r7
    e1c2:	41 f1       	breq	.+80     	; 0xe214 <sched_pop+0x17e>
    e1c4:	87 2d       	mov	r24, r7
    e1c6:	90 e0       	ldi	r25, 0x00	; 0
    e1c8:	01 97       	sbiw	r24, 0x01	; 1
    e1ca:	fc 01       	movw	r30, r24
    e1cc:	ee 0f       	add	r30, r30
    e1ce:	ff 1f       	adc	r31, r31
    e1d0:	ee 0f       	add	r30, r30
    e1d2:	ff 1f       	adc	r31, r31
    e1d4:	ee 0f       	add	r30, r30
    e1d6:	ff 1f       	adc	r31, r31
    e1d8:	e8 1b       	sub	r30, r24
    e1da:	f9 0b       	sbc	r31, r25
    e1dc:	ef 57       	subi	r30, 0x7F	; 127
    e1de:	fa 4d       	sbci	r31, 0xDA	; 218
    e1e0:	20 81       	ld	r18, Z
    e1e2:	20 ff       	sbrs	r18, 0
    e1e4:	17 c0       	rjmp	.+46     	; 0xe214 <sched_pop+0x17e>
    e1e6:	fc 01       	movw	r30, r24
    e1e8:	ee 0f       	add	r30, r30
    e1ea:	ff 1f       	adc	r31, r31
    e1ec:	ee 0f       	add	r30, r30
    e1ee:	ff 1f       	adc	r31, r31
    e1f0:	ee 0f       	add	r30, r30
    e1f2:	ff 1f       	adc	r31, r31
    e1f4:	e8 1b       	sub	r30, r24
    e1f6:	f9 0b       	sbc	r31, r25
    e1f8:	e5 58       	subi	r30, 0x85	; 133
    e1fa:	fa 4d       	sbci	r31, 0xDA	; 218
    e1fc:	c0 80       	ld	r12, Z
    e1fe:	d1 80       	ldd	r13, Z+1	; 0x01
    e200:	e2 80       	ldd	r14, Z+2	; 0x02
    e202:	f3 80       	ldd	r15, Z+3	; 0x03
    e204:	0e 94 0e 28 	call	0x501c	; 0x501c <rtc_get_time>
    e208:	6c 15       	cp	r22, r12
    e20a:	7d 05       	cpc	r23, r13
    e20c:	8e 05       	cpc	r24, r14
    e20e:	9f 05       	cpc	r25, r15
    e210:	08 f0       	brcs	.+2      	; 0xe214 <sched_pop+0x17e>
    e212:	84 cf       	rjmp	.-248    	; 0xe11c <sched_pop+0x86>
    e214:	8f e5       	ldi	r24, 0x5F	; 95
    e216:	96 e2       	ldi	r25, 0x26	; 38
    e218:	35 db       	rcall	.-2454   	; 0xd884 <sched_freeLock>
    e21a:	c1 14       	cp	r12, r1
    e21c:	d1 04       	cpc	r13, r1
    e21e:	e1 04       	cpc	r14, r1
    e220:	f1 04       	cpc	r15, r1
    e222:	19 f0       	breq	.+6      	; 0xe22a <sched_pop+0x194>
    e224:	c7 01       	movw	r24, r14
    e226:	b6 01       	movw	r22, r12
    e228:	3d db       	rcall	.-2438   	; 0xd8a4 <sched_set_alarm>
    e22a:	80 91 5b 26 	lds	r24, 0x265B	; 0x80265b <g_sched_pop_again>
    e22e:	88 23       	and	r24, r24
    e230:	51 f0       	breq	.+20     	; 0xe246 <sched_pop+0x1b0>
    e232:	10 92 5b 26 	sts	0x265B, r1	; 0x80265b <g_sched_pop_again>
    e236:	c5 01       	movw	r24, r10
    e238:	b4 01       	movw	r22, r8
    e23a:	2d df       	rcall	.-422    	; 0xe096 <sched_pop>
    e23c:	04 c0       	rjmp	.+8      	; 0xe246 <sched_pop+0x1b0>
    e23e:	8f e5       	ldi	r24, 0x5F	; 95
    e240:	96 e2       	ldi	r25, 0x26	; 38
    e242:	20 db       	rcall	.-2496   	; 0xd884 <sched_freeLock>
    e244:	f2 cf       	rjmp	.-28     	; 0xe22a <sched_pop+0x194>
    e246:	0f 90       	pop	r0
    e248:	df 91       	pop	r29
    e24a:	cf 91       	pop	r28
    e24c:	1f 91       	pop	r17
    e24e:	0f 91       	pop	r16
    e250:	ff 90       	pop	r15
    e252:	ef 90       	pop	r14
    e254:	df 90       	pop	r13
    e256:	cf 90       	pop	r12
    e258:	bf 90       	pop	r11
    e25a:	af 90       	pop	r10
    e25c:	9f 90       	pop	r9
    e25e:	8f 90       	pop	r8
    e260:	7f 90       	pop	r7
    e262:	08 95       	ret

0000e264 <isr_rtc_alarm>:
    e264:	78 94       	sei
    e266:	17 cf       	rjmp	.-466    	; 0xe096 <sched_pop>
    e268:	08 95       	ret

0000e26a <yield_ms>:
    e26a:	cf 92       	push	r12
    e26c:	ef 92       	push	r14
    e26e:	0f 93       	push	r16
    e270:	1f 93       	push	r17
    e272:	cf 93       	push	r28
    e274:	df 93       	push	r29
    e276:	1f 92       	push	r1
    e278:	cd b7       	in	r28, 0x3d	; 61
    e27a:	de b7       	in	r29, 0x3e	; 62
    e27c:	2f b7       	in	r18, 0x3f	; 63
    e27e:	29 83       	std	Y+1, r18	; 0x01
    e280:	f8 94       	cli
    e282:	19 81       	ldd	r17, Y+1	; 0x01
    e284:	78 94       	sei
    e286:	21 e0       	ldi	r18, 0x01	; 1
    e288:	20 93 5c 26 	sts	0x265C, r18	; 0x80265c <g_sched_yield>
    e28c:	9c 01       	movw	r18, r24
    e28e:	40 e0       	ldi	r20, 0x00	; 0
    e290:	50 e0       	ldi	r21, 0x00	; 0
    e292:	c1 2c       	mov	r12, r1
    e294:	e1 2c       	mov	r14, r1
    e296:	01 e0       	ldi	r16, 0x01	; 1
    e298:	60 e0       	ldi	r22, 0x00	; 0
    e29a:	87 e2       	ldi	r24, 0x27	; 39
    e29c:	9f e5       	ldi	r25, 0x5F	; 95
    e29e:	3f db       	rcall	.-2434   	; 0xd91e <sched_push>
    e2a0:	1b db       	rcall	.-2506   	; 0xd8d8 <sched_doSleep>
    e2a2:	80 91 5c 26 	lds	r24, 0x265C	; 0x80265c <g_sched_yield>
    e2a6:	81 11       	cpse	r24, r1
    e2a8:	fb cf       	rjmp	.-10     	; 0xe2a0 <yield_ms+0x36>
    e2aa:	1f bf       	out	0x3f, r17	; 63
    e2ac:	0f 90       	pop	r0
    e2ae:	df 91       	pop	r29
    e2b0:	cf 91       	pop	r28
    e2b2:	1f 91       	pop	r17
    e2b4:	0f 91       	pop	r16
    e2b6:	ef 90       	pop	r14
    e2b8:	cf 90       	pop	r12
    e2ba:	08 95       	ret

0000e2bc <__vector_4>:
    e2bc:	1f 92       	push	r1
    e2be:	0f 92       	push	r0
    e2c0:	0f b6       	in	r0, 0x3f	; 63
    e2c2:	0f 92       	push	r0
    e2c4:	11 24       	eor	r1, r1
    e2c6:	8f 93       	push	r24
    e2c8:	9f 93       	push	r25
    e2ca:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    e2ce:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    e2d2:	80 93 8f 28 	sts	0x288F, r24	; 0x80288f <g_1pps_last_lo>
    e2d6:	90 93 90 28 	sts	0x2890, r25	; 0x802890 <g_1pps_last_lo+0x1>
    e2da:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <g_milliseconds_cnt64>
    e2de:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <g_1pps_last_hi>
    e2e2:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <g_milliseconds_cnt64+0x1>
    e2e6:	80 93 88 28 	sts	0x2888, r24	; 0x802888 <g_1pps_last_hi+0x1>
    e2ea:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <g_milliseconds_cnt64+0x2>
    e2ee:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <g_1pps_last_hi+0x2>
    e2f2:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <g_milliseconds_cnt64+0x3>
    e2f6:	80 93 8a 28 	sts	0x288A, r24	; 0x80288a <g_1pps_last_hi+0x3>
    e2fa:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <g_milliseconds_cnt64+0x4>
    e2fe:	80 93 8b 28 	sts	0x288B, r24	; 0x80288b <g_1pps_last_hi+0x4>
    e302:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <g_milliseconds_cnt64+0x5>
    e306:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <g_1pps_last_hi+0x5>
    e30a:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <g_milliseconds_cnt64+0x6>
    e30e:	80 93 8d 28 	sts	0x288D, r24	; 0x80288d <g_1pps_last_hi+0x6>
    e312:	80 91 98 28 	lds	r24, 0x2898	; 0x802898 <g_milliseconds_cnt64+0x7>
    e316:	80 93 8e 28 	sts	0x288E, r24	; 0x80288e <g_1pps_last_hi+0x7>
    e31a:	81 e0       	ldi	r24, 0x01	; 1
    e31c:	80 93 86 28 	sts	0x2886, r24	; 0x802886 <g_1pps_last_new>
    e320:	9f 91       	pop	r25
    e322:	8f 91       	pop	r24
    e324:	0f 90       	pop	r0
    e326:	0f be       	out	0x3f, r0	; 63
    e328:	0f 90       	pop	r0
    e32a:	1f 90       	pop	r1
    e32c:	18 95       	reti

0000e32e <main>:
    e32e:	cf 92       	push	r12
    e330:	df 92       	push	r13
    e332:	ef 92       	push	r14
    e334:	ff 92       	push	r15
    e336:	0f 93       	push	r16
    e338:	1f 93       	push	r17
    e33a:	cf 93       	push	r28
    e33c:	df 93       	push	r29
    e33e:	cd b7       	in	r28, 0x3d	; 61
    e340:	de b7       	in	r29, 0x3e	; 62
    e342:	a4 97       	sbiw	r28, 0x24	; 36
    e344:	cd bf       	out	0x3d, r28	; 61
    e346:	de bf       	out	0x3e, r29	; 62
    e348:	40 e2       	ldi	r20, 0x20	; 32
    e34a:	6b ef       	ldi	r22, 0xFB	; 251
    e34c:	7d e2       	ldi	r23, 0x2D	; 45
    e34e:	85 ef       	ldi	r24, 0xF5	; 245
    e350:	9d e2       	ldi	r25, 0x2D	; 45
    e352:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <fifo_init>
    e356:	11 e0       	ldi	r17, 0x01	; 1
    e358:	10 93 7f 28 	sts	0x287F, r17	; 0x80287f <g_workmode>
    e35c:	e0 ea       	ldi	r30, 0xA0	; 160
    e35e:	f0 e0       	ldi	r31, 0x00	; 0
    e360:	87 e0       	ldi	r24, 0x07	; 7
    e362:	82 83       	std	Z+2, r24	; 0x02
    e364:	82 83       	std	Z+2, r24	; 0x02
    e366:	82 81       	ldd	r24, Z+2	; 0x02
    e368:	8f 77       	andi	r24, 0x7F	; 127
    e36a:	82 83       	std	Z+2, r24	; 0x02
    e36c:	11 82       	std	Z+1, r1	; 0x01
    e36e:	80 d2       	rcall	.+1280   	; 0xe870 <sysclk_init>
    e370:	eb e7       	ldi	r30, 0x7B	; 123
    e372:	fe e2       	ldi	r31, 0x2E	; 46
    e374:	10 82       	st	Z, r1
    e376:	11 82       	std	Z+1, r1	; 0x01
    e378:	12 82       	std	Z+2, r1	; 0x02
    e37a:	13 82       	std	Z+3, r1	; 0x03
    e37c:	14 82       	std	Z+4, r1	; 0x04
    e37e:	15 83       	std	Z+5, r17	; 0x05
    e380:	0e 94 2f 28 	call	0x505e	; 0x505e <rtc_init>
    e384:	82 e3       	ldi	r24, 0x32	; 50
    e386:	91 e7       	ldi	r25, 0x71	; 113
    e388:	0e 94 2a 28 	call	0x5054	; 0x5054 <rtc_set_callback>
    e38c:	19 82       	std	Y+1, r1	; 0x01
    e38e:	1a 82       	std	Y+2, r1	; 0x02
    e390:	1b 82       	std	Y+3, r1	; 0x03
    e392:	1c 82       	std	Y+4, r1	; 0x04
    e394:	14 e0       	ldi	r17, 0x04	; 4
    e396:	e1 2e       	mov	r14, r17
    e398:	f1 2c       	mov	r15, r1
    e39a:	00 e0       	ldi	r16, 0x00	; 0
    e39c:	10 e0       	ldi	r17, 0x00	; 0
    e39e:	9e 01       	movw	r18, r28
    e3a0:	2f 5f       	subi	r18, 0xFF	; 255
    e3a2:	3f 4f       	sbci	r19, 0xFF	; 255
    e3a4:	40 e1       	ldi	r20, 0x10	; 16
    e3a6:	50 e0       	ldi	r21, 0x00	; 0
    e3a8:	60 e0       	ldi	r22, 0x00	; 0
    e3aa:	70 e0       	ldi	r23, 0x00	; 0
    e3ac:	82 e0       	ldi	r24, 0x02	; 2
    e3ae:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e3b2:	81 11       	cpse	r24, r1
    e3b4:	11 c0       	rjmp	.+34     	; 0xe3d8 <main+0xaa>
    e3b6:	8f b7       	in	r24, 0x3f	; 63
    e3b8:	8c a3       	std	Y+36, r24	; 0x24
    e3ba:	f8 94       	cli
    e3bc:	8c a1       	ldd	r24, Y+36	; 0x24
    e3be:	49 81       	ldd	r20, Y+1	; 0x01
    e3c0:	5a 81       	ldd	r21, Y+2	; 0x02
    e3c2:	6b 81       	ldd	r22, Y+3	; 0x03
    e3c4:	7c 81       	ldd	r23, Y+4	; 0x04
    e3c6:	40 93 e4 26 	sts	0x26E4, r20	; 0x8026e4 <g_xo_mode_pwm>
    e3ca:	50 93 e5 26 	sts	0x26E5, r21	; 0x8026e5 <g_xo_mode_pwm+0x1>
    e3ce:	60 93 e6 26 	sts	0x26E6, r22	; 0x8026e6 <g_xo_mode_pwm+0x2>
    e3d2:	70 93 e7 26 	sts	0x26E7, r23	; 0x8026e7 <g_xo_mode_pwm+0x3>
    e3d6:	8f bf       	out	0x3f, r24	; 63
    e3d8:	19 82       	std	Y+1, r1	; 0x01
    e3da:	1a 82       	std	Y+2, r1	; 0x02
    e3dc:	12 e0       	ldi	r17, 0x02	; 2
    e3de:	e1 2e       	mov	r14, r17
    e3e0:	f1 2c       	mov	r15, r1
    e3e2:	00 e0       	ldi	r16, 0x00	; 0
    e3e4:	10 e0       	ldi	r17, 0x00	; 0
    e3e6:	9e 01       	movw	r18, r28
    e3e8:	2f 5f       	subi	r18, 0xFF	; 255
    e3ea:	3f 4f       	sbci	r19, 0xFF	; 255
    e3ec:	44 e1       	ldi	r20, 0x14	; 20
    e3ee:	50 e0       	ldi	r21, 0x00	; 0
    e3f0:	60 e0       	ldi	r22, 0x00	; 0
    e3f2:	70 e0       	ldi	r23, 0x00	; 0
    e3f4:	82 e0       	ldi	r24, 0x02	; 2
    e3f6:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e3fa:	81 11       	cpse	r24, r1
    e3fc:	0b c0       	rjmp	.+22     	; 0xe414 <main+0xe6>
    e3fe:	8f b7       	in	r24, 0x3f	; 63
    e400:	8b a3       	std	Y+35, r24	; 0x23
    e402:	f8 94       	cli
    e404:	8b a1       	ldd	r24, Y+35	; 0x23
    e406:	29 81       	ldd	r18, Y+1	; 0x01
    e408:	3a 81       	ldd	r19, Y+2	; 0x02
    e40a:	20 93 9c 28 	sts	0x289C, r18	; 0x80289c <g_backlight_mode_pwm>
    e40e:	30 93 9d 28 	sts	0x289D, r19	; 0x80289d <g_backlight_mode_pwm+0x1>
    e412:	8f bf       	out	0x3f, r24	; 63
    e414:	19 82       	std	Y+1, r1	; 0x01
    e416:	e1 2c       	mov	r14, r1
    e418:	f1 2c       	mov	r15, r1
    e41a:	87 01       	movw	r16, r14
    e41c:	e3 94       	inc	r14
    e41e:	9e 01       	movw	r18, r28
    e420:	2f 5f       	subi	r18, 0xFF	; 255
    e422:	3f 4f       	sbci	r19, 0xFF	; 255
    e424:	46 e1       	ldi	r20, 0x16	; 22
    e426:	50 e0       	ldi	r21, 0x00	; 0
    e428:	60 e0       	ldi	r22, 0x00	; 0
    e42a:	70 e0       	ldi	r23, 0x00	; 0
    e42c:	82 e0       	ldi	r24, 0x02	; 2
    e42e:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e432:	81 11       	cpse	r24, r1
    e434:	0e c0       	rjmp	.+28     	; 0xe452 <main+0x124>
    e436:	8f b7       	in	r24, 0x3f	; 63
    e438:	8a a3       	std	Y+34, r24	; 0x22
    e43a:	f8 94       	cli
    e43c:	9a a1       	ldd	r25, Y+34	; 0x22
    e43e:	89 81       	ldd	r24, Y+1	; 0x01
    e440:	28 2f       	mov	r18, r24
    e442:	21 70       	andi	r18, 0x01	; 1
    e444:	20 93 9a 28 	sts	0x289A, r18	; 0x80289a <g_errorBeep_enable>
    e448:	86 95       	lsr	r24
    e44a:	81 70       	andi	r24, 0x01	; 1
    e44c:	80 93 99 28 	sts	0x2899, r24	; 0x802899 <g_keyBeep_enable>
    e450:	9f bf       	out	0x3f, r25	; 63
    e452:	19 82       	std	Y+1, r1	; 0x01
    e454:	e1 2c       	mov	r14, r1
    e456:	f1 2c       	mov	r15, r1
    e458:	87 01       	movw	r16, r14
    e45a:	e3 94       	inc	r14
    e45c:	9e 01       	movw	r18, r28
    e45e:	2f 5f       	subi	r18, 0xFF	; 255
    e460:	3f 4f       	sbci	r19, 0xFF	; 255
    e462:	47 e1       	ldi	r20, 0x17	; 23
    e464:	50 e0       	ldi	r21, 0x00	; 0
    e466:	60 e0       	ldi	r22, 0x00	; 0
    e468:	70 e0       	ldi	r23, 0x00	; 0
    e46a:	82 e0       	ldi	r24, 0x02	; 2
    e46c:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e470:	81 11       	cpse	r24, r1
    e472:	08 c0       	rjmp	.+16     	; 0xe484 <main+0x156>
    e474:	8f b7       	in	r24, 0x3f	; 63
    e476:	89 a3       	std	Y+33, r24	; 0x21
    e478:	f8 94       	cli
    e47a:	89 a1       	ldd	r24, Y+33	; 0x21
    e47c:	99 81       	ldd	r25, Y+1	; 0x01
    e47e:	90 93 9b 28 	sts	0x289B, r25	; 0x80289b <g_pitch_tone_mode>
    e482:	8f bf       	out	0x3f, r24	; 63
    e484:	19 82       	std	Y+1, r1	; 0x01
    e486:	e1 2c       	mov	r14, r1
    e488:	f1 2c       	mov	r15, r1
    e48a:	87 01       	movw	r16, r14
    e48c:	e3 94       	inc	r14
    e48e:	9e 01       	movw	r18, r28
    e490:	2f 5f       	subi	r18, 0xFF	; 255
    e492:	3f 4f       	sbci	r19, 0xFF	; 255
    e494:	48 e1       	ldi	r20, 0x18	; 24
    e496:	50 e0       	ldi	r21, 0x00	; 0
    e498:	60 e0       	ldi	r22, 0x00	; 0
    e49a:	70 e0       	ldi	r23, 0x00	; 0
    e49c:	82 e0       	ldi	r24, 0x02	; 2
    e49e:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e4a2:	81 11       	cpse	r24, r1
    e4a4:	0e c0       	rjmp	.+28     	; 0xe4c2 <main+0x194>
    e4a6:	8f b7       	in	r24, 0x3f	; 63
    e4a8:	88 a3       	std	Y+32, r24	; 0x20
    e4aa:	f8 94       	cli
    e4ac:	98 a1       	ldd	r25, Y+32	; 0x20
    e4ae:	89 81       	ldd	r24, Y+1	; 0x01
    e4b0:	28 2f       	mov	r18, r24
    e4b2:	21 70       	andi	r18, 0x01	; 1
    e4b4:	20 93 84 28 	sts	0x2884, r18	; 0x802884 <g_usb_cdc_printStatusLines_atxmega>
    e4b8:	86 95       	lsr	r24
    e4ba:	81 70       	andi	r24, 0x01	; 1
    e4bc:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <g_usb_cdc_printStatusLines_sim808>
    e4c0:	9f bf       	out	0x3f, r25	; 63
    e4c2:	1d 8e       	std	Y+29, r1	; 0x1d
    e4c4:	1e 8e       	std	Y+30, r1	; 0x1e
    e4c6:	1b 8e       	std	Y+27, r1	; 0x1b
    e4c8:	1c 8e       	std	Y+28, r1	; 0x1c
    e4ca:	19 8e       	std	Y+25, r1	; 0x19
    e4cc:	1a 8e       	std	Y+26, r1	; 0x1a
    e4ce:	1f 8a       	std	Y+23, r1	; 0x17
    e4d0:	18 8e       	std	Y+24, r1	; 0x18
    e4d2:	1d 8a       	std	Y+21, r1	; 0x15
    e4d4:	1e 8a       	std	Y+22, r1	; 0x16
    e4d6:	1b 8a       	std	Y+19, r1	; 0x13
    e4d8:	1c 8a       	std	Y+20, r1	; 0x14
    e4da:	19 8a       	std	Y+17, r1	; 0x11
    e4dc:	1a 8a       	std	Y+18, r1	; 0x12
    e4de:	1f 86       	std	Y+15, r1	; 0x0f
    e4e0:	18 8a       	std	Y+16, r1	; 0x10
    e4e2:	1d 86       	std	Y+13, r1	; 0x0d
    e4e4:	1e 86       	std	Y+14, r1	; 0x0e
    e4e6:	1b 86       	std	Y+11, r1	; 0x0b
    e4e8:	1c 86       	std	Y+12, r1	; 0x0c
    e4ea:	19 86       	std	Y+9, r1	; 0x09
    e4ec:	1a 86       	std	Y+10, r1	; 0x0a
    e4ee:	1f 82       	std	Y+7, r1	; 0x07
    e4f0:	18 86       	std	Y+8, r1	; 0x08
    e4f2:	1d 82       	std	Y+5, r1	; 0x05
    e4f4:	1e 82       	std	Y+6, r1	; 0x06
    e4f6:	19 82       	std	Y+1, r1	; 0x01
    e4f8:	1a 82       	std	Y+2, r1	; 0x02
    e4fa:	12 e0       	ldi	r17, 0x02	; 2
    e4fc:	e1 2e       	mov	r14, r17
    e4fe:	f1 2c       	mov	r15, r1
    e500:	00 e0       	ldi	r16, 0x00	; 0
    e502:	10 e0       	ldi	r17, 0x00	; 0
    e504:	9e 01       	movw	r18, r28
    e506:	23 5e       	subi	r18, 0xE3	; 227
    e508:	3f 4f       	sbci	r19, 0xFF	; 255
    e50a:	4c e1       	ldi	r20, 0x1C	; 28
    e50c:	50 e0       	ldi	r21, 0x00	; 0
    e50e:	60 e0       	ldi	r22, 0x00	; 0
    e510:	70 e0       	ldi	r23, 0x00	; 0
    e512:	82 e0       	ldi	r24, 0x02	; 2
    e514:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e518:	9e 01       	movw	r18, r28
    e51a:	25 5e       	subi	r18, 0xE5	; 229
    e51c:	3f 4f       	sbci	r19, 0xFF	; 255
    e51e:	4e e1       	ldi	r20, 0x1E	; 30
    e520:	50 e0       	ldi	r21, 0x00	; 0
    e522:	60 e0       	ldi	r22, 0x00	; 0
    e524:	70 e0       	ldi	r23, 0x00	; 0
    e526:	82 e0       	ldi	r24, 0x02	; 2
    e528:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e52c:	9e 01       	movw	r18, r28
    e52e:	27 5e       	subi	r18, 0xE7	; 231
    e530:	3f 4f       	sbci	r19, 0xFF	; 255
    e532:	40 e2       	ldi	r20, 0x20	; 32
    e534:	50 e0       	ldi	r21, 0x00	; 0
    e536:	60 e0       	ldi	r22, 0x00	; 0
    e538:	70 e0       	ldi	r23, 0x00	; 0
    e53a:	82 e0       	ldi	r24, 0x02	; 2
    e53c:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e540:	9e 01       	movw	r18, r28
    e542:	29 5e       	subi	r18, 0xE9	; 233
    e544:	3f 4f       	sbci	r19, 0xFF	; 255
    e546:	42 e2       	ldi	r20, 0x22	; 34
    e548:	50 e0       	ldi	r21, 0x00	; 0
    e54a:	60 e0       	ldi	r22, 0x00	; 0
    e54c:	70 e0       	ldi	r23, 0x00	; 0
    e54e:	82 e0       	ldi	r24, 0x02	; 2
    e550:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e554:	9e 01       	movw	r18, r28
    e556:	2b 5e       	subi	r18, 0xEB	; 235
    e558:	3f 4f       	sbci	r19, 0xFF	; 255
    e55a:	44 e2       	ldi	r20, 0x24	; 36
    e55c:	50 e0       	ldi	r21, 0x00	; 0
    e55e:	60 e0       	ldi	r22, 0x00	; 0
    e560:	70 e0       	ldi	r23, 0x00	; 0
    e562:	82 e0       	ldi	r24, 0x02	; 2
    e564:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e568:	9e 01       	movw	r18, r28
    e56a:	2d 5e       	subi	r18, 0xED	; 237
    e56c:	3f 4f       	sbci	r19, 0xFF	; 255
    e56e:	48 e2       	ldi	r20, 0x28	; 40
    e570:	50 e0       	ldi	r21, 0x00	; 0
    e572:	60 e0       	ldi	r22, 0x00	; 0
    e574:	70 e0       	ldi	r23, 0x00	; 0
    e576:	82 e0       	ldi	r24, 0x02	; 2
    e578:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e57c:	9e 01       	movw	r18, r28
    e57e:	2f 5e       	subi	r18, 0xEF	; 239
    e580:	3f 4f       	sbci	r19, 0xFF	; 255
    e582:	4a e2       	ldi	r20, 0x2A	; 42
    e584:	50 e0       	ldi	r21, 0x00	; 0
    e586:	60 e0       	ldi	r22, 0x00	; 0
    e588:	70 e0       	ldi	r23, 0x00	; 0
    e58a:	82 e0       	ldi	r24, 0x02	; 2
    e58c:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e590:	9e 01       	movw	r18, r28
    e592:	21 5f       	subi	r18, 0xF1	; 241
    e594:	3f 4f       	sbci	r19, 0xFF	; 255
    e596:	4c e2       	ldi	r20, 0x2C	; 44
    e598:	50 e0       	ldi	r21, 0x00	; 0
    e59a:	60 e0       	ldi	r22, 0x00	; 0
    e59c:	70 e0       	ldi	r23, 0x00	; 0
    e59e:	82 e0       	ldi	r24, 0x02	; 2
    e5a0:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e5a4:	9e 01       	movw	r18, r28
    e5a6:	23 5f       	subi	r18, 0xF3	; 243
    e5a8:	3f 4f       	sbci	r19, 0xFF	; 255
    e5aa:	40 e3       	ldi	r20, 0x30	; 48
    e5ac:	50 e0       	ldi	r21, 0x00	; 0
    e5ae:	60 e0       	ldi	r22, 0x00	; 0
    e5b0:	70 e0       	ldi	r23, 0x00	; 0
    e5b2:	82 e0       	ldi	r24, 0x02	; 2
    e5b4:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e5b8:	9e 01       	movw	r18, r28
    e5ba:	25 5f       	subi	r18, 0xF5	; 245
    e5bc:	3f 4f       	sbci	r19, 0xFF	; 255
    e5be:	42 e3       	ldi	r20, 0x32	; 50
    e5c0:	50 e0       	ldi	r21, 0x00	; 0
    e5c2:	60 e0       	ldi	r22, 0x00	; 0
    e5c4:	70 e0       	ldi	r23, 0x00	; 0
    e5c6:	82 e0       	ldi	r24, 0x02	; 2
    e5c8:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e5cc:	9e 01       	movw	r18, r28
    e5ce:	27 5f       	subi	r18, 0xF7	; 247
    e5d0:	3f 4f       	sbci	r19, 0xFF	; 255
    e5d2:	44 e3       	ldi	r20, 0x34	; 52
    e5d4:	50 e0       	ldi	r21, 0x00	; 0
    e5d6:	60 e0       	ldi	r22, 0x00	; 0
    e5d8:	70 e0       	ldi	r23, 0x00	; 0
    e5da:	82 e0       	ldi	r24, 0x02	; 2
    e5dc:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e5e0:	9e 01       	movw	r18, r28
    e5e2:	29 5f       	subi	r18, 0xF9	; 249
    e5e4:	3f 4f       	sbci	r19, 0xFF	; 255
    e5e6:	48 e4       	ldi	r20, 0x48	; 72
    e5e8:	50 e0       	ldi	r21, 0x00	; 0
    e5ea:	60 e0       	ldi	r22, 0x00	; 0
    e5ec:	70 e0       	ldi	r23, 0x00	; 0
    e5ee:	82 e0       	ldi	r24, 0x02	; 2
    e5f0:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e5f4:	9e 01       	movw	r18, r28
    e5f6:	2b 5f       	subi	r18, 0xFB	; 251
    e5f8:	3f 4f       	sbci	r19, 0xFF	; 255
    e5fa:	4a e4       	ldi	r20, 0x4A	; 74
    e5fc:	50 e0       	ldi	r21, 0x00	; 0
    e5fe:	60 e0       	ldi	r22, 0x00	; 0
    e600:	70 e0       	ldi	r23, 0x00	; 0
    e602:	82 e0       	ldi	r24, 0x02	; 2
    e604:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e608:	9e 01       	movw	r18, r28
    e60a:	2f 5f       	subi	r18, 0xFF	; 255
    e60c:	3f 4f       	sbci	r19, 0xFF	; 255
    e60e:	4c e4       	ldi	r20, 0x4C	; 76
    e610:	50 e0       	ldi	r21, 0x00	; 0
    e612:	60 e0       	ldi	r22, 0x00	; 0
    e614:	70 e0       	ldi	r23, 0x00	; 0
    e616:	82 e0       	ldi	r24, 0x02	; 2
    e618:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <nvm_read>
    e61c:	8b 89       	ldd	r24, Y+19	; 0x13
    e61e:	9c 89       	ldd	r25, Y+20	; 0x14
    e620:	89 2b       	or	r24, r25
    e622:	a1 f0       	breq	.+40     	; 0xe64c <main+0x31e>
    e624:	89 89       	ldd	r24, Y+17	; 0x11
    e626:	9a 89       	ldd	r25, Y+18	; 0x12
    e628:	89 2b       	or	r24, r25
    e62a:	81 f0       	breq	.+32     	; 0xe64c <main+0x31e>
    e62c:	8f 85       	ldd	r24, Y+15	; 0x0f
    e62e:	98 89       	ldd	r25, Y+16	; 0x10
    e630:	89 2b       	or	r24, r25
    e632:	61 f0       	breq	.+24     	; 0xe64c <main+0x31e>
    e634:	8f 81       	ldd	r24, Y+7	; 0x07
    e636:	98 85       	ldd	r25, Y+8	; 0x08
    e638:	89 2b       	or	r24, r25
    e63a:	41 f0       	breq	.+16     	; 0xe64c <main+0x31e>
    e63c:	8d 81       	ldd	r24, Y+5	; 0x05
    e63e:	9e 81       	ldd	r25, Y+6	; 0x06
    e640:	89 2b       	or	r24, r25
    e642:	21 f0       	breq	.+8      	; 0xe64c <main+0x31e>
    e644:	89 81       	ldd	r24, Y+1	; 0x01
    e646:	9a 81       	ldd	r25, Y+2	; 0x02
    e648:	89 2b       	or	r24, r25
    e64a:	21 f4       	brne	.+8      	; 0xe654 <main+0x326>
    e64c:	80 e0       	ldi	r24, 0x00	; 0
    e64e:	0e 94 a4 69 	call	0xd348	; 0xd348 <calibration_mode>
    e652:	59 c0       	rjmp	.+178    	; 0xe706 <main+0x3d8>
    e654:	8f b7       	in	r24, 0x3f	; 63
    e656:	8f 8f       	std	Y+31, r24	; 0x1f
    e658:	f8 94       	cli
    e65a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    e65c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    e65e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    e660:	20 93 6f 27 	sts	0x276F, r18	; 0x80276f <g_twi1_gyro_1_temp_RTofs>
    e664:	30 93 70 27 	sts	0x2770, r19	; 0x802770 <g_twi1_gyro_1_temp_RTofs+0x1>
    e668:	2b 8d       	ldd	r18, Y+27	; 0x1b
    e66a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    e66c:	20 93 6d 27 	sts	0x276D, r18	; 0x80276d <g_twi1_gyro_1_temp_sens>
    e670:	30 93 6e 27 	sts	0x276E, r19	; 0x80276e <g_twi1_gyro_1_temp_sens+0x1>
    e674:	29 8d       	ldd	r18, Y+25	; 0x19
    e676:	3a 8d       	ldd	r19, Y+26	; 0x1a
    e678:	20 93 63 27 	sts	0x2763, r18	; 0x802763 <g_twi1_gyro_1_accel_ofsx>
    e67c:	30 93 64 27 	sts	0x2764, r19	; 0x802764 <g_twi1_gyro_1_accel_ofsx+0x1>
    e680:	2f 89       	ldd	r18, Y+23	; 0x17
    e682:	38 8d       	ldd	r19, Y+24	; 0x18
    e684:	20 93 61 27 	sts	0x2761, r18	; 0x802761 <g_twi1_gyro_1_accel_ofsy>
    e688:	30 93 62 27 	sts	0x2762, r19	; 0x802762 <g_twi1_gyro_1_accel_ofsy+0x1>
    e68c:	2d 89       	ldd	r18, Y+21	; 0x15
    e68e:	3e 89       	ldd	r19, Y+22	; 0x16
    e690:	20 93 5f 27 	sts	0x275F, r18	; 0x80275f <g_twi1_gyro_1_accel_ofsz>
    e694:	30 93 60 27 	sts	0x2760, r19	; 0x802760 <g_twi1_gyro_1_accel_ofsz+0x1>
    e698:	2b 89       	ldd	r18, Y+19	; 0x13
    e69a:	3c 89       	ldd	r19, Y+20	; 0x14
    e69c:	20 93 5d 27 	sts	0x275D, r18	; 0x80275d <g_twi1_gyro_1_accel_factx>
    e6a0:	30 93 5e 27 	sts	0x275E, r19	; 0x80275e <g_twi1_gyro_1_accel_factx+0x1>
    e6a4:	29 89       	ldd	r18, Y+17	; 0x11
    e6a6:	3a 89       	ldd	r19, Y+18	; 0x12
    e6a8:	20 93 5b 27 	sts	0x275B, r18	; 0x80275b <g_twi1_gyro_1_accel_facty>
    e6ac:	30 93 5c 27 	sts	0x275C, r19	; 0x80275c <g_twi1_gyro_1_accel_facty+0x1>
    e6b0:	2f 85       	ldd	r18, Y+15	; 0x0f
    e6b2:	38 89       	ldd	r19, Y+16	; 0x10
    e6b4:	20 93 59 27 	sts	0x2759, r18	; 0x802759 <g_twi1_gyro_1_accel_factz>
    e6b8:	30 93 5a 27 	sts	0x275A, r19	; 0x80275a <g_twi1_gyro_1_accel_factz+0x1>
    e6bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    e6be:	3e 85       	ldd	r19, Y+14	; 0x0e
    e6c0:	20 93 4b 27 	sts	0x274B, r18	; 0x80274b <g_twi1_gyro_1_gyro_ofsx>
    e6c4:	30 93 4c 27 	sts	0x274C, r19	; 0x80274c <g_twi1_gyro_1_gyro_ofsx+0x1>
    e6c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    e6ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    e6cc:	20 93 49 27 	sts	0x2749, r18	; 0x802749 <g_twi1_gyro_1_gyro_ofsy>
    e6d0:	30 93 4a 27 	sts	0x274A, r19	; 0x80274a <g_twi1_gyro_1_gyro_ofsy+0x1>
    e6d4:	29 85       	ldd	r18, Y+9	; 0x09
    e6d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    e6d8:	20 93 47 27 	sts	0x2747, r18	; 0x802747 <g_twi1_gyro_1_gyro_ofsz>
    e6dc:	30 93 48 27 	sts	0x2748, r19	; 0x802748 <g_twi1_gyro_1_gyro_ofsz+0x1>
    e6e0:	2f 81       	ldd	r18, Y+7	; 0x07
    e6e2:	38 85       	ldd	r19, Y+8	; 0x08
    e6e4:	20 93 27 27 	sts	0x2727, r18	; 0x802727 <g_twi1_gyro_2_mag_factx>
    e6e8:	30 93 28 27 	sts	0x2728, r19	; 0x802728 <g_twi1_gyro_2_mag_factx+0x1>
    e6ec:	2d 81       	ldd	r18, Y+5	; 0x05
    e6ee:	3e 81       	ldd	r19, Y+6	; 0x06
    e6f0:	20 93 25 27 	sts	0x2725, r18	; 0x802725 <g_twi1_gyro_2_mag_facty>
    e6f4:	30 93 26 27 	sts	0x2726, r19	; 0x802726 <g_twi1_gyro_2_mag_facty+0x1>
    e6f8:	29 81       	ldd	r18, Y+1	; 0x01
    e6fa:	3a 81       	ldd	r19, Y+2	; 0x02
    e6fc:	20 93 23 27 	sts	0x2723, r18	; 0x802723 <g_twi1_gyro_2_mag_factz>
    e700:	30 93 24 27 	sts	0x2724, r19	; 0x802724 <g_twi1_gyro_2_mag_factz+0x1>
    e704:	8f bf       	out	0x3f, r24	; 63
    e706:	81 e0       	ldi	r24, 0x01	; 1
    e708:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7007e2>
    e70c:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7007f0>
    e710:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7007ea>
    e714:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7007eb>
    e718:	80 93 e9 07 	sts	0x07E9, r24	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7007e9>
    e71c:	62 e0       	ldi	r22, 0x02	; 2
    e71e:	80 e0       	ldi	r24, 0x00	; 0
    e720:	28 d1       	rcall	.+592    	; 0xe972 <sysclk_enable_module>
    e722:	e0 e8       	ldi	r30, 0x80	; 128
    e724:	f1 e0       	ldi	r31, 0x01	; 1
    e726:	86 ec       	ldi	r24, 0xC6	; 198
    e728:	80 83       	st	Z, r24
    e72a:	10 86       	std	Z+8, r1	; 0x08
    e72c:	81 83       	std	Z+1, r24	; 0x01
    e72e:	11 86       	std	Z+9, r1	; 0x09
    e730:	82 83       	std	Z+2, r24	; 0x02
    e732:	12 86       	std	Z+10, r1	; 0x0a
    e734:	83 83       	std	Z+3, r24	; 0x03
    e736:	13 86       	std	Z+11, r1	; 0x0b
    e738:	88 ee       	ldi	r24, 0xE8	; 232
    e73a:	84 83       	std	Z+4, r24	; 0x04
    e73c:	14 86       	std	Z+12, r1	; 0x0c
    e73e:	0e 94 9a 63 	call	0xc734	; 0xc734 <tc_init>
    e742:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <serial_init>
    e746:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    e74a:	81 11       	cpse	r24, r1
    e74c:	0e 94 a9 65 	call	0xcb52	; 0xcb52 <adc_init>
    e750:	80 91 9e 28 	lds	r24, 0x289E	; 0x80289e <g_dac_enabled>
    e754:	81 11       	cpse	r24, r1
    e756:	0e 94 2b 64 	call	0xc856	; 0xc856 <dac_init>
    e75a:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <twi_init>
    e75e:	0e 94 bb 48 	call	0x9176	; 0x9176 <board_init>
    e762:	80 e0       	ldi	r24, 0x00	; 0
    e764:	0e 94 11 26 	call	0x4c22	; 0x4c22 <nvm_init>
    e768:	78 94       	sei
    e76a:	0e 94 fc 63 	call	0xc7f8	; 0xc7f8 <tc_start>
    e76e:	80 91 9e 28 	lds	r24, 0x289E	; 0x80289e <g_dac_enabled>
    e772:	81 11       	cpse	r24, r1
    e774:	0e 94 f4 64 	call	0xc9e8	; 0xc9e8 <dac_start>
    e778:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <g_adc_enabled>
    e77c:	88 23       	and	r24, r24
    e77e:	09 f4       	brne	.+2      	; 0xe782 <main+0x454>
    e780:	57 c0       	rjmp	.+174    	; 0xe830 <main+0x502>
    e782:	80 e0       	ldi	r24, 0x00	; 0
    e784:	92 e0       	ldi	r25, 0x02	; 2
    e786:	0e 94 1c 49 	call	0x9238	; 0x9238 <adc_enable>
    e78a:	80 e4       	ldi	r24, 0x40	; 64
    e78c:	92 e0       	ldi	r25, 0x02	; 2
    e78e:	0e 94 1c 49 	call	0x9238	; 0x9238 <adc_enable>
    e792:	0e 94 28 21 	call	0x4250	; 0x4250 <usb_init>
    e796:	0e 94 12 3c 	call	0x7824	; 0x7824 <twi_start>
    e79a:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <serial_start>
    e79e:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <printHelp>
    e7a2:	82 e0       	ldi	r24, 0x02	; 2
    e7a4:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <twi2_set_leds>
    e7a8:	81 e0       	ldi	r24, 0x01	; 1
    e7aa:	80 93 e8 26 	sts	0x26E8, r24	; 0x8026e8 <g_twi2_lcd_repaint>
    e7ae:	82 e0       	ldi	r24, 0x02	; 2
    e7b0:	80 93 7f 28 	sts	0x287F, r24	; 0x80287f <g_workmode>
    e7b4:	82 e0       	ldi	r24, 0x02	; 2
    e7b6:	82 30       	cpi	r24, 0x02	; 2
    e7b8:	71 f4       	brne	.+28     	; 0xe7d6 <main+0x4a8>
    e7ba:	0e 94 0e 28 	call	0x501c	; 0x501c <rtc_get_time>
    e7be:	6b 01       	movw	r12, r22
    e7c0:	7c 01       	movw	r14, r24
    e7c2:	0e 94 7e 20 	call	0x40fc	; 0x40fc <task_serial>
    e7c6:	c7 01       	movw	r24, r14
    e7c8:	b6 01       	movw	r22, r12
    e7ca:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <task_twi>
    e7ce:	c7 01       	movw	r24, r14
    e7d0:	b6 01       	movw	r22, r12
    e7d2:	0e 94 bf 21 	call	0x437e	; 0x437e <task_usb>
    e7d6:	80 e0       	ldi	r24, 0x00	; 0
    e7d8:	90 e0       	ldi	r25, 0x00	; 0
    e7da:	47 dd       	rcall	.-1394   	; 0xe26a <yield_ms>
    e7dc:	80 91 7f 28 	lds	r24, 0x287F	; 0x80287f <g_workmode>
    e7e0:	81 11       	cpse	r24, r1
    e7e2:	e9 cf       	rjmp	.-46     	; 0xe7b6 <main+0x488>
    e7e4:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <twi2_set_leds>
    e7e8:	f8 94       	cli
    e7ea:	f8 94       	cli
    e7ec:	80 91 7b 2e 	lds	r24, 0x2E7B	; 0x802e7b <sleepmgr_locks>
    e7f0:	81 11       	cpse	r24, r1
    e7f2:	09 c0       	rjmp	.+18     	; 0xe806 <main+0x4d8>
    e7f4:	ac e7       	ldi	r26, 0x7C	; 124
    e7f6:	be e2       	ldi	r27, 0x2E	; 46
    e7f8:	e0 e0       	ldi	r30, 0x00	; 0
    e7fa:	ef 5f       	subi	r30, 0xFF	; 255
    e7fc:	8d 91       	ld	r24, X+
    e7fe:	88 23       	and	r24, r24
    e800:	e1 f3       	breq	.-8      	; 0xe7fa <main+0x4cc>
    e802:	e1 11       	cpse	r30, r1
    e804:	02 c0       	rjmp	.+4      	; 0xe80a <main+0x4dc>
    e806:	78 94       	sei
    e808:	25 c0       	rjmp	.+74     	; 0xe854 <main+0x526>
    e80a:	a8 e4       	ldi	r26, 0x48	; 72
    e80c:	b0 e0       	ldi	r27, 0x00	; 0
    e80e:	8c 91       	ld	r24, X
    e810:	f0 e0       	ldi	r31, 0x00	; 0
    e812:	e0 5c       	subi	r30, 0xC0	; 192
    e814:	ff 4d       	sbci	r31, 0xDF	; 223
    e816:	81 7f       	andi	r24, 0xF1	; 241
    e818:	90 81       	ld	r25, Z
    e81a:	89 2b       	or	r24, r25
    e81c:	8c 93       	st	X, r24
    e81e:	8c 91       	ld	r24, X
    e820:	81 60       	ori	r24, 0x01	; 1
    e822:	8c 93       	st	X, r24
    e824:	78 94       	sei
    e826:	88 95       	sleep
    e828:	8c 91       	ld	r24, X
    e82a:	8e 7f       	andi	r24, 0xFE	; 254
    e82c:	8c 93       	st	X, r24
    e82e:	12 c0       	rjmp	.+36     	; 0xe854 <main+0x526>
    e830:	0e 94 28 21 	call	0x4250	; 0x4250 <usb_init>
    e834:	0e 94 12 3c 	call	0x7824	; 0x7824 <twi_start>
    e838:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <serial_start>
    e83c:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <printHelp>
    e840:	82 e0       	ldi	r24, 0x02	; 2
    e842:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <twi2_set_leds>
    e846:	81 e0       	ldi	r24, 0x01	; 1
    e848:	80 93 e8 26 	sts	0x26E8, r24	; 0x8026e8 <g_twi2_lcd_repaint>
    e84c:	82 e0       	ldi	r24, 0x02	; 2
    e84e:	80 93 7f 28 	sts	0x287F, r24	; 0x80287f <g_workmode>
    e852:	b0 cf       	rjmp	.-160    	; 0xe7b4 <main+0x486>
    e854:	80 e0       	ldi	r24, 0x00	; 0
    e856:	90 e0       	ldi	r25, 0x00	; 0
    e858:	a4 96       	adiw	r28, 0x24	; 36
    e85a:	cd bf       	out	0x3d, r28	; 61
    e85c:	de bf       	out	0x3e, r29	; 62
    e85e:	df 91       	pop	r29
    e860:	cf 91       	pop	r28
    e862:	1f 91       	pop	r17
    e864:	0f 91       	pop	r16
    e866:	ff 90       	pop	r15
    e868:	ef 90       	pop	r14
    e86a:	df 90       	pop	r13
    e86c:	cf 90       	pop	r12
    e86e:	08 95       	ret

0000e870 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    e870:	cf 93       	push	r28
    e872:	df 93       	push	r29
    e874:	cd b7       	in	r28, 0x3d	; 61
    e876:	de b7       	in	r29, 0x3e	; 62
    e878:	28 97       	sbiw	r28, 0x08	; 8
    e87a:	cd bf       	out	0x3d, r28	; 61
    e87c:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    e87e:	8f ef       	ldi	r24, 0xFF	; 255
    e880:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    e884:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    e888:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    e88c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    e890:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    e894:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    e898:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    e89c:	61 e0       	ldi	r22, 0x01	; 1
    e89e:	81 e4       	ldi	r24, 0x41	; 65
    e8a0:	90 e0       	ldi	r25, 0x00	; 0
    e8a2:	0e 94 c8 7f 	call	0xff90	; 0xff90 <ccp_write_io>
    e8a6:	6c e1       	ldi	r22, 0x1C	; 28
    e8a8:	70 e0       	ldi	r23, 0x00	; 0
    e8aa:	82 e0       	ldi	r24, 0x02	; 2
    e8ac:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    e8b0:	8a 83       	std	Y+2, r24	; 0x02
    e8b2:	6d e1       	ldi	r22, 0x1D	; 29
    e8b4:	70 e0       	ldi	r23, 0x00	; 0
    e8b6:	82 e0       	ldi	r24, 0x02	; 2
    e8b8:	0e 94 be 7f 	call	0xff7c	; 0xff7c <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    e8bc:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    e8be:	89 81       	ldd	r24, Y+1	; 0x01
    e8c0:	9a 81       	ldd	r25, Y+2	; 0x02
    e8c2:	01 96       	adiw	r24, 0x01	; 1
    e8c4:	21 f4       	brne	.+8      	; 0xe8ce <sysclk_init+0x5e>
		cal = 0x2340;
    e8c6:	80 e4       	ldi	r24, 0x40	; 64
    e8c8:	93 e2       	ldi	r25, 0x23	; 35
    e8ca:	89 83       	std	Y+1, r24	; 0x01
    e8cc:	9a 83       	std	Y+2, r25	; 0x02
    e8ce:	89 81       	ldd	r24, Y+1	; 0x01
    e8d0:	9a 81       	ldd	r25, Y+2	; 0x02
    e8d2:	8b 83       	std	Y+3, r24	; 0x03
    e8d4:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    e8d6:	e0 e6       	ldi	r30, 0x60	; 96
    e8d8:	f0 e0       	ldi	r31, 0x00	; 0
    e8da:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    e8dc:	8c 81       	ldd	r24, Y+4	; 0x04
    e8de:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    e8e0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    e8e4:	84 fd       	sbrc	r24, 4
    e8e6:	21 c0       	rjmp	.+66     	; 0xe92a <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    e8e8:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    e8ec:	83 fd       	sbrc	r24, 3
    e8ee:	0e c0       	rjmp	.+28     	; 0xe90c <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    e8f0:	e0 e5       	ldi	r30, 0x50	; 80
    e8f2:	f0 e0       	ldi	r31, 0x00	; 0
    e8f4:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e8f6:	8f b7       	in	r24, 0x3f	; 63
    e8f8:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    e8fa:	f8 94       	cli
	return flags;
    e8fc:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    e8fe:	80 81       	ld	r24, Z
    e900:	88 60       	ori	r24, 0x08	; 8
    e902:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e904:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    e906:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    e908:	83 ff       	sbrs	r24, 3
    e90a:	fd cf       	rjmp	.-6      	; 0xe906 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e90c:	8f b7       	in	r24, 0x3f	; 63
    e90e:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    e910:	f8 94       	cli
	return flags;
    e912:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    e914:	e0 e5       	ldi	r30, 0x50	; 80
    e916:	f0 e0       	ldi	r31, 0x00	; 0
    e918:	83 ec       	ldi	r24, 0xC3	; 195
    e91a:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    e91c:	80 81       	ld	r24, Z
    e91e:	80 61       	ori	r24, 0x10	; 16
    e920:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e922:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    e924:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    e926:	84 ff       	sbrs	r24, 4
    e928:	fd cf       	rjmp	.-6      	; 0xe924 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    e92a:	64 e0       	ldi	r22, 0x04	; 4
    e92c:	80 e4       	ldi	r24, 0x40	; 64
    e92e:	90 e0       	ldi	r25, 0x00	; 0
    e930:	0e 94 c8 7f 	call	0xff90	; 0xff90 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e934:	8f b7       	in	r24, 0x3f	; 63
    e936:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    e938:	f8 94       	cli
	return flags;
    e93a:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    e93c:	e0 e5       	ldi	r30, 0x50	; 80
    e93e:	f0 e0       	ldi	r31, 0x00	; 0
    e940:	80 81       	ld	r24, Z
    e942:	8e 7f       	andi	r24, 0xFE	; 254
    e944:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e946:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    e948:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e94a:	8f b7       	in	r24, 0x3f	; 63
    e94c:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    e94e:	f8 94       	cli
	return flags;
    e950:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    e952:	80 81       	ld	r24, Z
    e954:	88 60       	ori	r24, 0x08	; 8
    e956:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e958:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    e95a:	81 81       	ldd	r24, Z+1	; 0x01
    e95c:	83 ff       	sbrs	r24, 3
    e95e:	fd cf       	rjmp	.-6      	; 0xe95a <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    e960:	8b e0       	ldi	r24, 0x0B	; 11
    e962:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    e966:	28 96       	adiw	r28, 0x08	; 8
    e968:	cd bf       	out	0x3d, r28	; 61
    e96a:	de bf       	out	0x3e, r29	; 62
    e96c:	df 91       	pop	r29
    e96e:	cf 91       	pop	r28
    e970:	08 95       	ret

0000e972 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    e972:	cf 93       	push	r28
    e974:	df 93       	push	r29
    e976:	1f 92       	push	r1
    e978:	cd b7       	in	r28, 0x3d	; 61
    e97a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e97c:	9f b7       	in	r25, 0x3f	; 63
    e97e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    e980:	f8 94       	cli
	return flags;
    e982:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    e984:	e8 2f       	mov	r30, r24
    e986:	f0 e0       	ldi	r31, 0x00	; 0
    e988:	e0 59       	subi	r30, 0x90	; 144
    e98a:	ff 4f       	sbci	r31, 0xFF	; 255
    e98c:	60 95       	com	r22
    e98e:	80 81       	ld	r24, Z
    e990:	68 23       	and	r22, r24
    e992:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e994:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    e996:	0f 90       	pop	r0
    e998:	df 91       	pop	r29
    e99a:	cf 91       	pop	r28
    e99c:	08 95       	ret

0000e99e <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    e99e:	cf 93       	push	r28
    e9a0:	df 93       	push	r29
    e9a2:	1f 92       	push	r1
    e9a4:	cd b7       	in	r28, 0x3d	; 61
    e9a6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e9a8:	9f b7       	in	r25, 0x3f	; 63
    e9aa:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    e9ac:	f8 94       	cli
	return flags;
    e9ae:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    e9b0:	e8 2f       	mov	r30, r24
    e9b2:	f0 e0       	ldi	r31, 0x00	; 0
    e9b4:	e0 59       	subi	r30, 0x90	; 144
    e9b6:	ff 4f       	sbci	r31, 0xFF	; 255
    e9b8:	80 81       	ld	r24, Z
    e9ba:	68 2b       	or	r22, r24
    e9bc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e9be:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    e9c0:	0f 90       	pop	r0
    e9c2:	df 91       	pop	r29
    e9c4:	cf 91       	pop	r28
    e9c6:	08 95       	ret

0000e9c8 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    e9c8:	cf 93       	push	r28
    e9ca:	df 93       	push	r29
    e9cc:	1f 92       	push	r1
    e9ce:	1f 92       	push	r1
    e9d0:	cd b7       	in	r28, 0x3d	; 61
    e9d2:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    e9d4:	86 30       	cpi	r24, 0x06	; 6
    e9d6:	11 f0       	breq	.+4      	; 0xe9dc <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    e9d8:	60 e0       	ldi	r22, 0x00	; 0
    e9da:	01 c0       	rjmp	.+2      	; 0xe9de <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    e9dc:	68 e1       	ldi	r22, 0x18	; 24
    e9de:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    e9e2:	81 fd       	sbrc	r24, 1
    e9e4:	2a c0       	rjmp	.+84     	; 0xea3a <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    e9e6:	8f b7       	in	r24, 0x3f	; 63
    e9e8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    e9ea:	f8 94       	cli
	return flags;
    e9ec:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    e9ee:	e0 e5       	ldi	r30, 0x50	; 80
    e9f0:	f0 e0       	ldi	r31, 0x00	; 0
    e9f2:	80 81       	ld	r24, Z
    e9f4:	82 60       	ori	r24, 0x02	; 2
    e9f6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e9f8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    e9fa:	81 81       	ldd	r24, Z+1	; 0x01
    e9fc:	81 ff       	sbrs	r24, 1
    e9fe:	fd cf       	rjmp	.-6      	; 0xe9fa <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    ea00:	8f b7       	in	r24, 0x3f	; 63
    ea02:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    ea04:	f8 94       	cli
	return flags;
    ea06:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    ea08:	a0 e5       	ldi	r26, 0x50	; 80
    ea0a:	b0 e0       	ldi	r27, 0x00	; 0
    ea0c:	16 96       	adiw	r26, 0x06	; 6
    ea0e:	8c 91       	ld	r24, X
    ea10:	16 97       	sbiw	r26, 0x06	; 6
    ea12:	89 7f       	andi	r24, 0xF9	; 249
    ea14:	16 96       	adiw	r26, 0x06	; 6
    ea16:	8c 93       	st	X, r24
    ea18:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    ea1a:	e0 e6       	ldi	r30, 0x60	; 96
    ea1c:	f0 e0       	ldi	r31, 0x00	; 0
    ea1e:	80 e8       	ldi	r24, 0x80	; 128
    ea20:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    ea22:	8b eb       	ldi	r24, 0xBB	; 187
    ea24:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    ea26:	16 96       	adiw	r26, 0x06	; 6
    ea28:	8c 91       	ld	r24, X
    ea2a:	16 97       	sbiw	r26, 0x06	; 6
    ea2c:	84 60       	ori	r24, 0x04	; 4
    ea2e:	16 96       	adiw	r26, 0x06	; 6
    ea30:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    ea32:	80 81       	ld	r24, Z
    ea34:	81 60       	ori	r24, 0x01	; 1
    ea36:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    ea38:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    ea3a:	63 60       	ori	r22, 0x03	; 3
    ea3c:	84 e4       	ldi	r24, 0x44	; 68
    ea3e:	90 e0       	ldi	r25, 0x00	; 0
    ea40:	0e 94 c8 7f 	call	0xff90	; 0xff90 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    ea44:	60 e4       	ldi	r22, 0x40	; 64
    ea46:	80 e0       	ldi	r24, 0x00	; 0
    ea48:	94 df       	rcall	.-216    	; 0xe972 <sysclk_enable_module>
}
    ea4a:	0f 90       	pop	r0
    ea4c:	0f 90       	pop	r0
    ea4e:	df 91       	pop	r29
    ea50:	cf 91       	pop	r28
    ea52:	08 95       	ret

0000ea54 <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    ea54:	60 e4       	ldi	r22, 0x40	; 64
    ea56:	80 e0       	ldi	r24, 0x00	; 0
    ea58:	a2 df       	rcall	.-188    	; 0xe99e <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    ea5a:	60 e0       	ldi	r22, 0x00	; 0
    ea5c:	84 e4       	ldi	r24, 0x44	; 68
    ea5e:	90 e0       	ldi	r25, 0x00	; 0
    ea60:	0c 94 c8 7f 	jmp	0xff90	; 0xff90 <ccp_write_io>
    ea64:	08 95       	ret

0000ea66 <udi_cdc_comm_disable>:
    ea66:	80 91 b4 2d 	lds	r24, 0x2DB4	; 0x802db4 <udi_cdc_nb_comm_enabled>
    ea6a:	81 50       	subi	r24, 0x01	; 1
    ea6c:	80 93 b4 2d 	sts	0x2DB4, r24	; 0x802db4 <udi_cdc_nb_comm_enabled>
    ea70:	08 95       	ret

0000ea72 <udi_cdc_data_setup>:
    ea72:	80 e0       	ldi	r24, 0x00	; 0
    ea74:	08 95       	ret

0000ea76 <udi_cdc_getsetting>:
    ea76:	80 e0       	ldi	r24, 0x00	; 0
    ea78:	08 95       	ret

0000ea7a <udi_cdc_line_coding_received>:
    ea7a:	62 ec       	ldi	r22, 0xC2	; 194
    ea7c:	7d e2       	ldi	r23, 0x2D	; 45
    ea7e:	80 e0       	ldi	r24, 0x00	; 0
    ea80:	0c 94 b5 21 	jmp	0x436a	; 0x436a <usb_callback_config>
    ea84:	08 95       	ret

0000ea86 <udi_cdc_comm_enable>:
    ea86:	10 92 b4 2d 	sts	0x2DB4, r1	; 0x802db4 <udi_cdc_nb_comm_enabled>
    ea8a:	10 92 c0 2d 	sts	0x2DC0, r1	; 0x802dc0 <udi_cdc_state>
    ea8e:	10 92 c1 2d 	sts	0x2DC1, r1	; 0x802dc1 <udi_cdc_state+0x1>
    ea92:	e6 eb       	ldi	r30, 0xB6	; 182
    ea94:	fd e2       	ldi	r31, 0x2D	; 45
    ea96:	81 ea       	ldi	r24, 0xA1	; 161
    ea98:	80 83       	st	Z, r24
    ea9a:	80 e2       	ldi	r24, 0x20	; 32
    ea9c:	81 83       	std	Z+1, r24	; 0x01
    ea9e:	12 82       	std	Z+2, r1	; 0x02
    eaa0:	13 82       	std	Z+3, r1	; 0x03
    eaa2:	14 82       	std	Z+4, r1	; 0x04
    eaa4:	15 82       	std	Z+5, r1	; 0x05
    eaa6:	82 e0       	ldi	r24, 0x02	; 2
    eaa8:	90 e0       	ldi	r25, 0x00	; 0
    eaaa:	86 83       	std	Z+6, r24	; 0x06
    eaac:	97 83       	std	Z+7, r25	; 0x07
    eaae:	10 86       	std	Z+8, r1	; 0x08
    eab0:	11 86       	std	Z+9, r1	; 0x09
    eab2:	e2 ec       	ldi	r30, 0xC2	; 194
    eab4:	fd e2       	ldi	r31, 0x2D	; 45
    eab6:	80 e0       	ldi	r24, 0x00	; 0
    eab8:	92 ec       	ldi	r25, 0xC2	; 194
    eaba:	a1 e0       	ldi	r26, 0x01	; 1
    eabc:	b0 e0       	ldi	r27, 0x00	; 0
    eabe:	80 83       	st	Z, r24
    eac0:	91 83       	std	Z+1, r25	; 0x01
    eac2:	a2 83       	std	Z+2, r26	; 0x02
    eac4:	b3 83       	std	Z+3, r27	; 0x03
    eac6:	14 82       	std	Z+4, r1	; 0x04
    eac8:	15 82       	std	Z+5, r1	; 0x05
    eaca:	88 e0       	ldi	r24, 0x08	; 8
    eacc:	86 83       	std	Z+6, r24	; 0x06
    eace:	bf 01       	movw	r22, r30
    ead0:	80 e0       	ldi	r24, 0x00	; 0
    ead2:	0e 94 b5 21 	call	0x436a	; 0x436a <usb_callback_config>
    ead6:	0e 94 ae 21 	call	0x435c	; 0x435c <usb_callback_cdc_enable>
    eada:	88 23       	and	r24, r24
    eadc:	29 f0       	breq	.+10     	; 0xeae8 <udi_cdc_comm_enable+0x62>
    eade:	90 91 b4 2d 	lds	r25, 0x2DB4	; 0x802db4 <udi_cdc_nb_comm_enabled>
    eae2:	9f 5f       	subi	r25, 0xFF	; 255
    eae4:	90 93 b4 2d 	sts	0x2DB4, r25	; 0x802db4 <udi_cdc_nb_comm_enabled>
    eae8:	08 95       	ret

0000eaea <udi_cdc_tx_send>:
    eaea:	ff 92       	push	r15
    eaec:	0f 93       	push	r16
    eaee:	1f 93       	push	r17
    eaf0:	cf 93       	push	r28
    eaf2:	df 93       	push	r29
    eaf4:	1f 92       	push	r1
    eaf6:	cd b7       	in	r28, 0x3d	; 61
    eaf8:	de b7       	in	r29, 0x3e	; 62
    eafa:	80 91 a2 28 	lds	r24, 0x28A2	; 0x8028a2 <udi_cdc_tx_trans_ongoing>
    eafe:	81 11       	cpse	r24, r1
    eb00:	9f c0       	rjmp	.+318    	; 0xec40 <udi_cdc_tx_send+0x156>
    eb02:	0e 94 a8 59 	call	0xb350	; 0xb350 <udd_is_high_speed>
    eb06:	88 23       	and	r24, r24
    eb08:	51 f0       	breq	.+20     	; 0xeb1e <udi_cdc_tx_send+0x34>
    eb0a:	00 91 a3 28 	lds	r16, 0x28A3	; 0x8028a3 <udi_cdc_tx_sof_num>
    eb0e:	10 91 a4 28 	lds	r17, 0x28A4	; 0x8028a4 <udi_cdc_tx_sof_num+0x1>
    eb12:	0e 94 b5 59 	call	0xb36a	; 0xb36a <udd_get_micro_frame_number>
    eb16:	08 17       	cp	r16, r24
    eb18:	19 07       	cpc	r17, r25
    eb1a:	59 f4       	brne	.+22     	; 0xeb32 <udi_cdc_tx_send+0x48>
    eb1c:	91 c0       	rjmp	.+290    	; 0xec40 <udi_cdc_tx_send+0x156>
    eb1e:	00 91 a3 28 	lds	r16, 0x28A3	; 0x8028a3 <udi_cdc_tx_sof_num>
    eb22:	10 91 a4 28 	lds	r17, 0x28A4	; 0x8028a4 <udi_cdc_tx_sof_num+0x1>
    eb26:	0e 94 b0 59 	call	0xb360	; 0xb360 <udd_get_frame_number>
    eb2a:	08 17       	cp	r16, r24
    eb2c:	19 07       	cpc	r17, r25
    eb2e:	09 f4       	brne	.+2      	; 0xeb32 <udi_cdc_tx_send+0x48>
    eb30:	87 c0       	rjmp	.+270    	; 0xec40 <udi_cdc_tx_send+0x156>
    eb32:	8f b7       	in	r24, 0x3f	; 63
    eb34:	89 83       	std	Y+1, r24	; 0x01
    eb36:	f8 94       	cli
    eb38:	19 81       	ldd	r17, Y+1	; 0x01
    eb3a:	00 91 a5 28 	lds	r16, 0x28A5	; 0x8028a5 <udi_cdc_tx_buf_sel>
    eb3e:	e0 2f       	mov	r30, r16
    eb40:	f0 e0       	ldi	r31, 0x00	; 0
    eb42:	ee 0f       	add	r30, r30
    eb44:	ff 1f       	adc	r31, r31
    eb46:	ea 55       	subi	r30, 0x5A	; 90
    eb48:	f7 4d       	sbci	r31, 0xD7	; 215
    eb4a:	80 81       	ld	r24, Z
    eb4c:	91 81       	ldd	r25, Z+1	; 0x01
    eb4e:	89 2b       	or	r24, r25
    eb50:	09 f5       	brne	.+66     	; 0xeb94 <udi_cdc_tx_send+0xaa>
    eb52:	80 91 9f 28 	lds	r24, 0x289F	; 0x80289f <sof_zlp_counter.5059>
    eb56:	90 91 a0 28 	lds	r25, 0x28A0	; 0x8028a0 <sof_zlp_counter.5059+0x1>
    eb5a:	01 96       	adiw	r24, 0x01	; 1
    eb5c:	80 93 9f 28 	sts	0x289F, r24	; 0x80289f <sof_zlp_counter.5059>
    eb60:	90 93 a0 28 	sts	0x28A0, r25	; 0x8028a0 <sof_zlp_counter.5059+0x1>
    eb64:	0e 94 a8 59 	call	0xb350	; 0xb350 <udd_is_high_speed>
    eb68:	81 11       	cpse	r24, r1
    eb6a:	07 c0       	rjmp	.+14     	; 0xeb7a <udi_cdc_tx_send+0x90>
    eb6c:	80 91 9f 28 	lds	r24, 0x289F	; 0x80289f <sof_zlp_counter.5059>
    eb70:	90 91 a0 28 	lds	r25, 0x28A0	; 0x8028a0 <sof_zlp_counter.5059+0x1>
    eb74:	84 36       	cpi	r24, 0x64	; 100
    eb76:	91 05       	cpc	r25, r1
    eb78:	58 f0       	brcs	.+22     	; 0xeb90 <udi_cdc_tx_send+0xa6>
    eb7a:	0e 94 a8 59 	call	0xb350	; 0xb350 <udd_is_high_speed>
    eb7e:	88 23       	and	r24, r24
    eb80:	49 f0       	breq	.+18     	; 0xeb94 <udi_cdc_tx_send+0xaa>
    eb82:	80 91 9f 28 	lds	r24, 0x289F	; 0x80289f <sof_zlp_counter.5059>
    eb86:	90 91 a0 28 	lds	r25, 0x28A0	; 0x8028a0 <sof_zlp_counter.5059+0x1>
    eb8a:	80 32       	cpi	r24, 0x20	; 32
    eb8c:	93 40       	sbci	r25, 0x03	; 3
    eb8e:	10 f4       	brcc	.+4      	; 0xeb94 <udi_cdc_tx_send+0xaa>
    eb90:	1f bf       	out	0x3f, r17	; 63
    eb92:	56 c0       	rjmp	.+172    	; 0xec40 <udi_cdc_tx_send+0x156>
    eb94:	10 92 9f 28 	sts	0x289F, r1	; 0x80289f <sof_zlp_counter.5059>
    eb98:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <sof_zlp_counter.5059+0x1>
    eb9c:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <udi_cdc_tx_both_buf_to_send>
    eba0:	81 11       	cpse	r24, r1
    eba2:	06 c0       	rjmp	.+12     	; 0xebb0 <udi_cdc_tx_send+0xc6>
    eba4:	81 e0       	ldi	r24, 0x01	; 1
    eba6:	01 11       	cpse	r16, r1
    eba8:	80 e0       	ldi	r24, 0x00	; 0
    ebaa:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <udi_cdc_tx_buf_sel>
    ebae:	04 c0       	rjmp	.+8      	; 0xebb8 <udi_cdc_tx_send+0xce>
    ebb0:	81 e0       	ldi	r24, 0x01	; 1
    ebb2:	01 11       	cpse	r16, r1
    ebb4:	80 e0       	ldi	r24, 0x00	; 0
    ebb6:	08 2f       	mov	r16, r24
    ebb8:	81 e0       	ldi	r24, 0x01	; 1
    ebba:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <udi_cdc_tx_trans_ongoing>
    ebbe:	1f bf       	out	0x3f, r17	; 63
    ebc0:	10 e0       	ldi	r17, 0x00	; 0
    ebc2:	f8 01       	movw	r30, r16
    ebc4:	ee 0f       	add	r30, r30
    ebc6:	ff 1f       	adc	r31, r31
    ebc8:	ea 55       	subi	r30, 0x5A	; 90
    ebca:	f7 4d       	sbci	r31, 0xD7	; 215
    ebcc:	80 81       	ld	r24, Z
    ebce:	91 81       	ldd	r25, Z+1	; 0x01
    ebd0:	ff 24       	eor	r15, r15
    ebd2:	f3 94       	inc	r15
    ebd4:	80 34       	cpi	r24, 0x40	; 64
    ebd6:	21 e0       	ldi	r18, 0x01	; 1
    ebd8:	92 07       	cpc	r25, r18
    ebda:	09 f4       	brne	.+2      	; 0xebde <udi_cdc_tx_send+0xf4>
    ebdc:	f1 2c       	mov	r15, r1
    ebde:	80 34       	cpi	r24, 0x40	; 64
    ebe0:	91 40       	sbci	r25, 0x01	; 1
    ebe2:	91 f0       	breq	.+36     	; 0xec08 <udi_cdc_tx_send+0x11e>
    ebe4:	0e 94 a8 59 	call	0xb350	; 0xb350 <udd_is_high_speed>
    ebe8:	88 23       	and	r24, r24
    ebea:	39 f0       	breq	.+14     	; 0xebfa <udi_cdc_tx_send+0x110>
    ebec:	0e 94 b5 59 	call	0xb36a	; 0xb36a <udd_get_micro_frame_number>
    ebf0:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <udi_cdc_tx_sof_num>
    ebf4:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <udi_cdc_tx_sof_num+0x1>
    ebf8:	0b c0       	rjmp	.+22     	; 0xec10 <udi_cdc_tx_send+0x126>
    ebfa:	0e 94 b0 59 	call	0xb360	; 0xb360 <udd_get_frame_number>
    ebfe:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <udi_cdc_tx_sof_num>
    ec02:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <udi_cdc_tx_sof_num+0x1>
    ec06:	04 c0       	rjmp	.+8      	; 0xec10 <udi_cdc_tx_send+0x126>
    ec08:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <udi_cdc_tx_sof_num>
    ec0c:	10 92 a4 28 	sts	0x28A4, r1	; 0x8028a4 <udi_cdc_tx_sof_num+0x1>
    ec10:	f8 01       	movw	r30, r16
    ec12:	ee 0f       	add	r30, r30
    ec14:	ff 1f       	adc	r31, r31
    ec16:	ea 55       	subi	r30, 0x5A	; 90
    ec18:	f7 4d       	sbci	r31, 0xD7	; 215
    ec1a:	20 81       	ld	r18, Z
    ec1c:	31 81       	ldd	r19, Z+1	; 0x01
    ec1e:	80 e4       	ldi	r24, 0x40	; 64
    ec20:	91 e0       	ldi	r25, 0x01	; 1
    ec22:	08 9f       	mul	r16, r24
    ec24:	a0 01       	movw	r20, r0
    ec26:	09 9f       	mul	r16, r25
    ec28:	50 0d       	add	r21, r0
    ec2a:	18 9f       	mul	r17, r24
    ec2c:	50 0d       	add	r21, r0
    ec2e:	11 24       	eor	r1, r1
    ec30:	46 55       	subi	r20, 0x56	; 86
    ec32:	57 4d       	sbci	r21, 0xD7	; 215
    ec34:	0a e2       	ldi	r16, 0x2A	; 42
    ec36:	16 e7       	ldi	r17, 0x76	; 118
    ec38:	6f 2d       	mov	r22, r15
    ec3a:	81 e8       	ldi	r24, 0x81	; 129
    ec3c:	0e 94 99 5a 	call	0xb532	; 0xb532 <udd_ep_run>
    ec40:	0f 90       	pop	r0
    ec42:	df 91       	pop	r29
    ec44:	cf 91       	pop	r28
    ec46:	1f 91       	pop	r17
    ec48:	0f 91       	pop	r16
    ec4a:	ff 90       	pop	r15
    ec4c:	08 95       	ret

0000ec4e <udi_cdc_data_sof_notify>:
    ec4e:	80 e0       	ldi	r24, 0x00	; 0
    ec50:	4c cf       	rjmp	.-360    	; 0xeaea <udi_cdc_tx_send>
    ec52:	08 95       	ret

0000ec54 <udi_cdc_data_sent>:
    ec54:	81 11       	cpse	r24, r1
    ec56:	1a c0       	rjmp	.+52     	; 0xec8c <udi_cdc_data_sent+0x38>
    ec58:	20 91 a5 28 	lds	r18, 0x28A5	; 0x8028a5 <udi_cdc_tx_buf_sel>
    ec5c:	81 e0       	ldi	r24, 0x01	; 1
    ec5e:	90 e0       	ldi	r25, 0x00	; 0
    ec60:	22 23       	and	r18, r18
    ec62:	11 f0       	breq	.+4      	; 0xec68 <udi_cdc_data_sent+0x14>
    ec64:	80 e0       	ldi	r24, 0x00	; 0
    ec66:	90 e0       	ldi	r25, 0x00	; 0
    ec68:	88 0f       	add	r24, r24
    ec6a:	99 1f       	adc	r25, r25
    ec6c:	fc 01       	movw	r30, r24
    ec6e:	ea 55       	subi	r30, 0x5A	; 90
    ec70:	f7 4d       	sbci	r31, 0xD7	; 215
    ec72:	10 82       	st	Z, r1
    ec74:	11 82       	std	Z+1, r1	; 0x01
    ec76:	10 92 a1 28 	sts	0x28A1, r1	; 0x8028a1 <udi_cdc_tx_both_buf_to_send>
    ec7a:	10 92 a2 28 	sts	0x28A2, r1	; 0x8028a2 <udi_cdc_tx_trans_ongoing>
    ec7e:	67 2b       	or	r22, r23
    ec80:	19 f0       	breq	.+6      	; 0xec88 <udi_cdc_data_sent+0x34>
    ec82:	80 e0       	ldi	r24, 0x00	; 0
    ec84:	0e 94 bc 21 	call	0x4378	; 0x4378 <usb_callback_tx_empty_notify>
    ec88:	80 e0       	ldi	r24, 0x00	; 0
    ec8a:	2f cf       	rjmp	.-418    	; 0xeaea <udi_cdc_tx_send>
    ec8c:	08 95       	ret

0000ec8e <udi_cdc_data_disable>:
    ec8e:	80 91 b3 2d 	lds	r24, 0x2DB3	; 0x802db3 <udi_cdc_nb_data_enabled>
    ec92:	81 50       	subi	r24, 0x01	; 1
    ec94:	80 93 b3 2d 	sts	0x2DB3, r24	; 0x802db3 <udi_cdc_nb_data_enabled>
    ec98:	80 91 b3 2d 	lds	r24, 0x2DB3	; 0x802db3 <udi_cdc_nb_data_enabled>
    ec9c:	0e 94 b2 21 	call	0x4364	; 0x4364 <usb_callback_cdc_disable>
    eca0:	10 92 b2 2d 	sts	0x2DB2, r1	; 0x802db2 <udi_cdc_data_running>
    eca4:	08 95       	ret

0000eca6 <udi_cdc_comm_setup>:
    eca6:	cf 93       	push	r28
    eca8:	df 93       	push	r29
    ecaa:	80 91 e5 2d 	lds	r24, 0x2DE5	; 0x802de5 <udd_g_ctrlreq>
    ecae:	88 23       	and	r24, r24
    ecb0:	e4 f4       	brge	.+56     	; 0xecea <udi_cdc_comm_setup+0x44>
    ecb2:	80 76       	andi	r24, 0x60	; 96
    ecb4:	80 32       	cpi	r24, 0x20	; 32
    ecb6:	09 f0       	breq	.+2      	; 0xecba <udi_cdc_comm_setup+0x14>
    ecb8:	49 c0       	rjmp	.+146    	; 0xed4c <udi_cdc_comm_setup+0xa6>
    ecba:	80 91 e6 2d 	lds	r24, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    ecbe:	81 32       	cpi	r24, 0x21	; 33
    ecc0:	09 f0       	breq	.+2      	; 0xecc4 <udi_cdc_comm_setup+0x1e>
    ecc2:	46 c0       	rjmp	.+140    	; 0xed50 <udi_cdc_comm_setup+0xaa>
    ecc4:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    ecc8:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    eccc:	07 97       	sbiw	r24, 0x07	; 7
    ecce:	09 f0       	breq	.+2      	; 0xecd2 <udi_cdc_comm_setup+0x2c>
    ecd0:	41 c0       	rjmp	.+130    	; 0xed54 <udi_cdc_comm_setup+0xae>
    ecd2:	e5 ee       	ldi	r30, 0xE5	; 229
    ecd4:	fd e2       	ldi	r31, 0x2D	; 45
    ecd6:	82 ec       	ldi	r24, 0xC2	; 194
    ecd8:	9d e2       	ldi	r25, 0x2D	; 45
    ecda:	80 87       	std	Z+8, r24	; 0x08
    ecdc:	91 87       	std	Z+9, r25	; 0x09
    ecde:	87 e0       	ldi	r24, 0x07	; 7
    ece0:	90 e0       	ldi	r25, 0x00	; 0
    ece2:	82 87       	std	Z+10, r24	; 0x0a
    ece4:	93 87       	std	Z+11, r25	; 0x0b
    ece6:	81 e0       	ldi	r24, 0x01	; 1
    ece8:	3c c0       	rjmp	.+120    	; 0xed62 <udi_cdc_comm_setup+0xbc>
    ecea:	80 76       	andi	r24, 0x60	; 96
    ecec:	80 32       	cpi	r24, 0x20	; 32
    ecee:	a1 f5       	brne	.+104    	; 0xed58 <udi_cdc_comm_setup+0xb2>
    ecf0:	80 91 e6 2d 	lds	r24, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    ecf4:	80 32       	cpi	r24, 0x20	; 32
    ecf6:	19 f0       	breq	.+6      	; 0xecfe <udi_cdc_comm_setup+0x58>
    ecf8:	82 32       	cpi	r24, 0x22	; 34
    ecfa:	b9 f0       	breq	.+46     	; 0xed2a <udi_cdc_comm_setup+0x84>
    ecfc:	2f c0       	rjmp	.+94     	; 0xed5c <udi_cdc_comm_setup+0xb6>
    ecfe:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    ed02:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    ed06:	07 97       	sbiw	r24, 0x07	; 7
    ed08:	59 f5       	brne	.+86     	; 0xed60 <udi_cdc_comm_setup+0xba>
    ed0a:	e5 ee       	ldi	r30, 0xE5	; 229
    ed0c:	fd e2       	ldi	r31, 0x2D	; 45
    ed0e:	8d e3       	ldi	r24, 0x3D	; 61
    ed10:	95 e7       	ldi	r25, 0x75	; 117
    ed12:	84 87       	std	Z+12, r24	; 0x0c
    ed14:	95 87       	std	Z+13, r25	; 0x0d
    ed16:	82 ec       	ldi	r24, 0xC2	; 194
    ed18:	9d e2       	ldi	r25, 0x2D	; 45
    ed1a:	80 87       	std	Z+8, r24	; 0x08
    ed1c:	91 87       	std	Z+9, r25	; 0x09
    ed1e:	87 e0       	ldi	r24, 0x07	; 7
    ed20:	90 e0       	ldi	r25, 0x00	; 0
    ed22:	82 87       	std	Z+10, r24	; 0x0a
    ed24:	93 87       	std	Z+11, r25	; 0x0b
    ed26:	81 e0       	ldi	r24, 0x01	; 1
    ed28:	1c c0       	rjmp	.+56     	; 0xed62 <udi_cdc_comm_setup+0xbc>
    ed2a:	c5 ee       	ldi	r28, 0xE5	; 229
    ed2c:	dd e2       	ldi	r29, 0x2D	; 45
    ed2e:	6a 81       	ldd	r22, Y+2	; 0x02
    ed30:	61 70       	andi	r22, 0x01	; 1
    ed32:	80 e0       	ldi	r24, 0x00	; 0
    ed34:	0e 94 b6 21 	call	0x436c	; 0x436c <usb_callback_cdc_set_dtr>
    ed38:	6a 81       	ldd	r22, Y+2	; 0x02
    ed3a:	7b 81       	ldd	r23, Y+3	; 0x03
    ed3c:	76 95       	lsr	r23
    ed3e:	67 95       	ror	r22
    ed40:	61 70       	andi	r22, 0x01	; 1
    ed42:	80 e0       	ldi	r24, 0x00	; 0
    ed44:	0e 94 b7 21 	call	0x436e	; 0x436e <usb_callback_cdc_set_rts>
    ed48:	81 e0       	ldi	r24, 0x01	; 1
    ed4a:	0b c0       	rjmp	.+22     	; 0xed62 <udi_cdc_comm_setup+0xbc>
    ed4c:	80 e0       	ldi	r24, 0x00	; 0
    ed4e:	09 c0       	rjmp	.+18     	; 0xed62 <udi_cdc_comm_setup+0xbc>
    ed50:	80 e0       	ldi	r24, 0x00	; 0
    ed52:	07 c0       	rjmp	.+14     	; 0xed62 <udi_cdc_comm_setup+0xbc>
    ed54:	80 e0       	ldi	r24, 0x00	; 0
    ed56:	05 c0       	rjmp	.+10     	; 0xed62 <udi_cdc_comm_setup+0xbc>
    ed58:	80 e0       	ldi	r24, 0x00	; 0
    ed5a:	03 c0       	rjmp	.+6      	; 0xed62 <udi_cdc_comm_setup+0xbc>
    ed5c:	80 e0       	ldi	r24, 0x00	; 0
    ed5e:	01 c0       	rjmp	.+2      	; 0xed62 <udi_cdc_comm_setup+0xbc>
    ed60:	80 e0       	ldi	r24, 0x00	; 0
    ed62:	df 91       	pop	r29
    ed64:	cf 91       	pop	r28
    ed66:	08 95       	ret

0000ed68 <udi_cdc_multi_get_nb_received_data>:
    ed68:	cf 93       	push	r28
    ed6a:	df 93       	push	r29
    ed6c:	1f 92       	push	r1
    ed6e:	cd b7       	in	r28, 0x3d	; 61
    ed70:	de b7       	in	r29, 0x3e	; 62
    ed72:	8f b7       	in	r24, 0x3f	; 63
    ed74:	89 83       	std	Y+1, r24	; 0x01
    ed76:	f8 94       	cli
    ed78:	49 81       	ldd	r20, Y+1	; 0x01
    ed7a:	20 91 2b 2b 	lds	r18, 0x2B2B	; 0x802b2b <udi_cdc_rx_pos>
    ed7e:	30 91 2c 2b 	lds	r19, 0x2B2C	; 0x802b2c <udi_cdc_rx_pos+0x1>
    ed82:	e0 91 2d 2b 	lds	r30, 0x2B2D	; 0x802b2d <udi_cdc_rx_buf_sel>
    ed86:	f0 e0       	ldi	r31, 0x00	; 0
    ed88:	ee 0f       	add	r30, r30
    ed8a:	ff 1f       	adc	r31, r31
    ed8c:	e2 5d       	subi	r30, 0xD2	; 210
    ed8e:	f4 4d       	sbci	r31, 0xD4	; 212
    ed90:	80 81       	ld	r24, Z
    ed92:	91 81       	ldd	r25, Z+1	; 0x01
    ed94:	4f bf       	out	0x3f, r20	; 63
    ed96:	82 1b       	sub	r24, r18
    ed98:	93 0b       	sbc	r25, r19
    ed9a:	0f 90       	pop	r0
    ed9c:	df 91       	pop	r29
    ed9e:	cf 91       	pop	r28
    eda0:	08 95       	ret

0000eda2 <udi_cdc_get_nb_received_data>:
    eda2:	80 e0       	ldi	r24, 0x00	; 0
    eda4:	e1 cf       	rjmp	.-62     	; 0xed68 <udi_cdc_multi_get_nb_received_data>
    eda6:	08 95       	ret

0000eda8 <udi_cdc_multi_is_rx_ready>:
    eda8:	df df       	rcall	.-66     	; 0xed68 <udi_cdc_multi_get_nb_received_data>
    edaa:	21 e0       	ldi	r18, 0x01	; 1
    edac:	89 2b       	or	r24, r25
    edae:	09 f4       	brne	.+2      	; 0xedb2 <udi_cdc_multi_is_rx_ready+0xa>
    edb0:	20 e0       	ldi	r18, 0x00	; 0
    edb2:	82 2f       	mov	r24, r18
    edb4:	08 95       	ret

0000edb6 <udi_cdc_rx_start>:
    edb6:	0f 93       	push	r16
    edb8:	1f 93       	push	r17
    edba:	cf 93       	push	r28
    edbc:	df 93       	push	r29
    edbe:	1f 92       	push	r1
    edc0:	cd b7       	in	r28, 0x3d	; 61
    edc2:	de b7       	in	r29, 0x3e	; 62
    edc4:	8f b7       	in	r24, 0x3f	; 63
    edc6:	89 83       	std	Y+1, r24	; 0x01
    edc8:	f8 94       	cli
    edca:	99 81       	ldd	r25, Y+1	; 0x01
    edcc:	20 91 2d 2b 	lds	r18, 0x2B2D	; 0x802b2d <udi_cdc_rx_buf_sel>
    edd0:	80 91 2a 2b 	lds	r24, 0x2B2A	; 0x802b2a <udi_cdc_rx_trans_ongoing>
    edd4:	81 11       	cpse	r24, r1
    edd6:	10 c0       	rjmp	.+32     	; 0xedf8 <udi_cdc_rx_start+0x42>
    edd8:	60 91 2b 2b 	lds	r22, 0x2B2B	; 0x802b2b <udi_cdc_rx_pos>
    eddc:	70 91 2c 2b 	lds	r23, 0x2B2C	; 0x802b2c <udi_cdc_rx_pos+0x1>
    ede0:	02 2f       	mov	r16, r18
    ede2:	10 e0       	ldi	r17, 0x00	; 0
    ede4:	f8 01       	movw	r30, r16
    ede6:	ee 0f       	add	r30, r30
    ede8:	ff 1f       	adc	r31, r31
    edea:	e2 5d       	subi	r30, 0xD2	; 210
    edec:	f4 4d       	sbci	r31, 0xD4	; 212
    edee:	40 81       	ld	r20, Z
    edf0:	51 81       	ldd	r21, Z+1	; 0x01
    edf2:	64 17       	cp	r22, r20
    edf4:	75 07       	cpc	r23, r21
    edf6:	18 f4       	brcc	.+6      	; 0xedfe <udi_cdc_rx_start+0x48>
    edf8:	9f bf       	out	0x3f, r25	; 63
    edfa:	80 e0       	ldi	r24, 0x00	; 0
    edfc:	27 c0       	rjmp	.+78     	; 0xee4c <udi_cdc_rx_start+0x96>
    edfe:	10 92 2b 2b 	sts	0x2B2B, r1	; 0x802b2b <udi_cdc_rx_pos>
    ee02:	10 92 2c 2b 	sts	0x2B2C, r1	; 0x802b2c <udi_cdc_rx_pos+0x1>
    ee06:	81 e0       	ldi	r24, 0x01	; 1
    ee08:	21 11       	cpse	r18, r1
    ee0a:	80 e0       	ldi	r24, 0x00	; 0
    ee0c:	80 93 2d 2b 	sts	0x2B2D, r24	; 0x802b2d <udi_cdc_rx_buf_sel>
    ee10:	81 e0       	ldi	r24, 0x01	; 1
    ee12:	80 93 2a 2b 	sts	0x2B2A, r24	; 0x802b2a <udi_cdc_rx_trans_ongoing>
    ee16:	9f bf       	out	0x3f, r25	; 63
    ee18:	80 e0       	ldi	r24, 0x00	; 0
    ee1a:	c6 df       	rcall	.-116    	; 0xeda8 <udi_cdc_multi_is_rx_ready>
    ee1c:	88 23       	and	r24, r24
    ee1e:	19 f0       	breq	.+6      	; 0xee26 <udi_cdc_rx_start+0x70>
    ee20:	80 e0       	ldi	r24, 0x00	; 0
    ee22:	0e 94 b8 21 	call	0x4370	; 0x4370 <usb_callback_rx_notify>
    ee26:	80 e4       	ldi	r24, 0x40	; 64
    ee28:	91 e0       	ldi	r25, 0x01	; 1
    ee2a:	08 9f       	mul	r16, r24
    ee2c:	a0 01       	movw	r20, r0
    ee2e:	09 9f       	mul	r16, r25
    ee30:	50 0d       	add	r21, r0
    ee32:	18 9f       	mul	r17, r24
    ee34:	50 0d       	add	r21, r0
    ee36:	11 24       	eor	r1, r1
    ee38:	4e 5c       	subi	r20, 0xCE	; 206
    ee3a:	54 4d       	sbci	r21, 0xD4	; 212
    ee3c:	0e e5       	ldi	r16, 0x5E	; 94
    ee3e:	17 e7       	ldi	r17, 0x77	; 119
    ee40:	20 e4       	ldi	r18, 0x40	; 64
    ee42:	31 e0       	ldi	r19, 0x01	; 1
    ee44:	61 e0       	ldi	r22, 0x01	; 1
    ee46:	82 e0       	ldi	r24, 0x02	; 2
    ee48:	0e 94 99 5a 	call	0xb532	; 0xb532 <udd_ep_run>
    ee4c:	0f 90       	pop	r0
    ee4e:	df 91       	pop	r29
    ee50:	cf 91       	pop	r28
    ee52:	1f 91       	pop	r17
    ee54:	0f 91       	pop	r16
    ee56:	08 95       	ret

0000ee58 <udi_cdc_data_enable>:
    ee58:	10 92 b3 2d 	sts	0x2DB3, r1	; 0x802db3 <udi_cdc_nb_data_enabled>
    ee5c:	10 92 a2 28 	sts	0x28A2, r1	; 0x8028a2 <udi_cdc_tx_trans_ongoing>
    ee60:	10 92 a1 28 	sts	0x28A1, r1	; 0x8028a1 <udi_cdc_tx_both_buf_to_send>
    ee64:	10 92 a5 28 	sts	0x28A5, r1	; 0x8028a5 <udi_cdc_tx_buf_sel>
    ee68:	e6 ea       	ldi	r30, 0xA6	; 166
    ee6a:	f8 e2       	ldi	r31, 0x28	; 40
    ee6c:	10 82       	st	Z, r1
    ee6e:	11 82       	std	Z+1, r1	; 0x01
    ee70:	12 82       	std	Z+2, r1	; 0x02
    ee72:	13 82       	std	Z+3, r1	; 0x03
    ee74:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <udi_cdc_tx_sof_num>
    ee78:	10 92 a4 28 	sts	0x28A4, r1	; 0x8028a4 <udi_cdc_tx_sof_num+0x1>
    ee7c:	80 e0       	ldi	r24, 0x00	; 0
    ee7e:	35 de       	rcall	.-918    	; 0xeaea <udi_cdc_tx_send>
    ee80:	10 92 2a 2b 	sts	0x2B2A, r1	; 0x802b2a <udi_cdc_rx_trans_ongoing>
    ee84:	10 92 2d 2b 	sts	0x2B2D, r1	; 0x802b2d <udi_cdc_rx_buf_sel>
    ee88:	ee e2       	ldi	r30, 0x2E	; 46
    ee8a:	fb e2       	ldi	r31, 0x2B	; 43
    ee8c:	10 82       	st	Z, r1
    ee8e:	11 82       	std	Z+1, r1	; 0x01
    ee90:	12 82       	std	Z+2, r1	; 0x02
    ee92:	13 82       	std	Z+3, r1	; 0x03
    ee94:	10 92 2b 2b 	sts	0x2B2B, r1	; 0x802b2b <udi_cdc_rx_pos>
    ee98:	10 92 2c 2b 	sts	0x2B2C, r1	; 0x802b2c <udi_cdc_rx_pos+0x1>
    ee9c:	80 e0       	ldi	r24, 0x00	; 0
    ee9e:	8b df       	rcall	.-234    	; 0xedb6 <udi_cdc_rx_start>
    eea0:	88 23       	and	r24, r24
    eea2:	59 f0       	breq	.+22     	; 0xeeba <udi_cdc_data_enable+0x62>
    eea4:	90 91 b3 2d 	lds	r25, 0x2DB3	; 0x802db3 <udi_cdc_nb_data_enabled>
    eea8:	9f 5f       	subi	r25, 0xFF	; 255
    eeaa:	90 93 b3 2d 	sts	0x2DB3, r25	; 0x802db3 <udi_cdc_nb_data_enabled>
    eeae:	90 91 b3 2d 	lds	r25, 0x2DB3	; 0x802db3 <udi_cdc_nb_data_enabled>
    eeb2:	91 30       	cpi	r25, 0x01	; 1
    eeb4:	11 f4       	brne	.+4      	; 0xeeba <udi_cdc_data_enable+0x62>
    eeb6:	90 93 b2 2d 	sts	0x2DB2, r25	; 0x802db2 <udi_cdc_data_running>
    eeba:	08 95       	ret

0000eebc <udi_cdc_data_received>:
    eebc:	0f 93       	push	r16
    eebe:	1f 93       	push	r17
    eec0:	81 11       	cpse	r24, r1
    eec2:	26 c0       	rjmp	.+76     	; 0xef10 <udi_cdc_data_received+0x54>
    eec4:	80 91 2d 2b 	lds	r24, 0x2B2D	; 0x802b2d <udi_cdc_rx_buf_sel>
    eec8:	e1 e0       	ldi	r30, 0x01	; 1
    eeca:	81 11       	cpse	r24, r1
    eecc:	e0 e0       	ldi	r30, 0x00	; 0
    eece:	84 2f       	mov	r24, r20
    eed0:	61 15       	cp	r22, r1
    eed2:	71 05       	cpc	r23, r1
    eed4:	91 f4       	brne	.+36     	; 0xeefa <udi_cdc_data_received+0x3e>
    eed6:	f0 e0       	ldi	r31, 0x00	; 0
    eed8:	20 e4       	ldi	r18, 0x40	; 64
    eeda:	31 e0       	ldi	r19, 0x01	; 1
    eedc:	e2 9f       	mul	r30, r18
    eede:	a0 01       	movw	r20, r0
    eee0:	e3 9f       	mul	r30, r19
    eee2:	50 0d       	add	r21, r0
    eee4:	f2 9f       	mul	r31, r18
    eee6:	50 0d       	add	r21, r0
    eee8:	11 24       	eor	r1, r1
    eeea:	4e 5c       	subi	r20, 0xCE	; 206
    eeec:	54 4d       	sbci	r21, 0xD4	; 212
    eeee:	0e e5       	ldi	r16, 0x5E	; 94
    eef0:	17 e7       	ldi	r17, 0x77	; 119
    eef2:	61 e0       	ldi	r22, 0x01	; 1
    eef4:	0e 94 99 5a 	call	0xb532	; 0xb532 <udd_ep_run>
    eef8:	0b c0       	rjmp	.+22     	; 0xef10 <udi_cdc_data_received+0x54>
    eefa:	f0 e0       	ldi	r31, 0x00	; 0
    eefc:	ee 0f       	add	r30, r30
    eefe:	ff 1f       	adc	r31, r31
    ef00:	e2 5d       	subi	r30, 0xD2	; 210
    ef02:	f4 4d       	sbci	r31, 0xD4	; 212
    ef04:	60 83       	st	Z, r22
    ef06:	71 83       	std	Z+1, r23	; 0x01
    ef08:	10 92 2a 2b 	sts	0x2B2A, r1	; 0x802b2a <udi_cdc_rx_trans_ongoing>
    ef0c:	80 e0       	ldi	r24, 0x00	; 0
    ef0e:	53 df       	rcall	.-346    	; 0xedb6 <udi_cdc_rx_start>
    ef10:	1f 91       	pop	r17
    ef12:	0f 91       	pop	r16
    ef14:	08 95       	ret

0000ef16 <udi_cdc_multi_getc>:
    ef16:	cf 92       	push	r12
    ef18:	df 92       	push	r13
    ef1a:	ff 92       	push	r15
    ef1c:	0f 93       	push	r16
    ef1e:	1f 93       	push	r17
    ef20:	cf 93       	push	r28
    ef22:	df 93       	push	r29
    ef24:	1f 92       	push	r1
    ef26:	cd b7       	in	r28, 0x3d	; 61
    ef28:	de b7       	in	r29, 0x3e	; 62
    ef2a:	ff 24       	eor	r15, r15
    ef2c:	f3 94       	inc	r15
    ef2e:	80 91 c8 2d 	lds	r24, 0x2DC8	; 0x802dc8 <udi_cdc_line_coding+0x6>
    ef32:	89 30       	cpi	r24, 0x09	; 9
    ef34:	09 f0       	breq	.+2      	; 0xef38 <udi_cdc_multi_getc+0x22>
    ef36:	f1 2c       	mov	r15, r1
    ef38:	a0 e0       	ldi	r26, 0x00	; 0
    ef3a:	b0 e0       	ldi	r27, 0x00	; 0
    ef3c:	00 e4       	ldi	r16, 0x40	; 64
    ef3e:	11 e0       	ldi	r17, 0x01	; 1
    ef40:	8f b7       	in	r24, 0x3f	; 63
    ef42:	89 83       	std	Y+1, r24	; 0x01
    ef44:	f8 94       	cli
    ef46:	69 81       	ldd	r22, Y+1	; 0x01
    ef48:	20 91 2b 2b 	lds	r18, 0x2B2B	; 0x802b2b <udi_cdc_rx_pos>
    ef4c:	30 91 2c 2b 	lds	r19, 0x2B2C	; 0x802b2c <udi_cdc_rx_pos+0x1>
    ef50:	80 91 2d 2b 	lds	r24, 0x2B2D	; 0x802b2d <udi_cdc_rx_buf_sel>
    ef54:	90 e0       	ldi	r25, 0x00	; 0
    ef56:	fc 01       	movw	r30, r24
    ef58:	ee 0f       	add	r30, r30
    ef5a:	ff 1f       	adc	r31, r31
    ef5c:	e2 5d       	subi	r30, 0xD2	; 210
    ef5e:	f4 4d       	sbci	r31, 0xD4	; 212
    ef60:	40 81       	ld	r20, Z
    ef62:	51 81       	ldd	r21, Z+1	; 0x01
    ef64:	6f bf       	out	0x3f, r22	; 63
    ef66:	24 17       	cp	r18, r20
    ef68:	35 07       	cpc	r19, r21
    ef6a:	30 f0       	brcs	.+12     	; 0xef78 <udi_cdc_multi_getc+0x62>
    ef6c:	80 91 b2 2d 	lds	r24, 0x2DB2	; 0x802db2 <udi_cdc_data_running>
    ef70:	81 11       	cpse	r24, r1
    ef72:	e6 cf       	rjmp	.-52     	; 0xef40 <udi_cdc_multi_getc+0x2a>
    ef74:	90 e0       	ldi	r25, 0x00	; 0
    ef76:	1e c0       	rjmp	.+60     	; 0xefb4 <udi_cdc_multi_getc+0x9e>
    ef78:	80 9f       	mul	r24, r16
    ef7a:	f0 01       	movw	r30, r0
    ef7c:	81 9f       	mul	r24, r17
    ef7e:	f0 0d       	add	r31, r0
    ef80:	90 9f       	mul	r25, r16
    ef82:	f0 0d       	add	r31, r0
    ef84:	11 24       	eor	r1, r1
    ef86:	ee 5c       	subi	r30, 0xCE	; 206
    ef88:	f4 4d       	sbci	r31, 0xD4	; 212
    ef8a:	e2 0f       	add	r30, r18
    ef8c:	f3 1f       	adc	r31, r19
    ef8e:	80 81       	ld	r24, Z
    ef90:	6d 01       	movw	r12, r26
    ef92:	c8 2a       	or	r12, r24
    ef94:	2f 5f       	subi	r18, 0xFF	; 255
    ef96:	3f 4f       	sbci	r19, 0xFF	; 255
    ef98:	20 93 2b 2b 	sts	0x2B2B, r18	; 0x802b2b <udi_cdc_rx_pos>
    ef9c:	30 93 2c 2b 	sts	0x2B2C, r19	; 0x802b2c <udi_cdc_rx_pos+0x1>
    efa0:	80 e0       	ldi	r24, 0x00	; 0
    efa2:	09 df       	rcall	.-494    	; 0xedb6 <udi_cdc_rx_start>
    efa4:	ff 20       	and	r15, r15
    efa6:	21 f0       	breq	.+8      	; 0xefb0 <udi_cdc_multi_getc+0x9a>
    efa8:	bc 2d       	mov	r27, r12
    efaa:	aa 27       	eor	r26, r26
    efac:	f1 2c       	mov	r15, r1
    efae:	c8 cf       	rjmp	.-112    	; 0xef40 <udi_cdc_multi_getc+0x2a>
    efb0:	8c 2d       	mov	r24, r12
    efb2:	9d 2d       	mov	r25, r13
    efb4:	0f 90       	pop	r0
    efb6:	df 91       	pop	r29
    efb8:	cf 91       	pop	r28
    efba:	1f 91       	pop	r17
    efbc:	0f 91       	pop	r16
    efbe:	ff 90       	pop	r15
    efc0:	df 90       	pop	r13
    efc2:	cf 90       	pop	r12
    efc4:	08 95       	ret

0000efc6 <udi_cdc_getc>:
    efc6:	80 e0       	ldi	r24, 0x00	; 0
    efc8:	a6 cf       	rjmp	.-180    	; 0xef16 <udi_cdc_multi_getc>
    efca:	08 95       	ret

0000efcc <udi_cdc_read_no_polling>:
    efcc:	ef 92       	push	r14
    efce:	ff 92       	push	r15
    efd0:	0f 93       	push	r16
    efd2:	1f 93       	push	r17
    efd4:	cf 93       	push	r28
    efd6:	df 93       	push	r29
    efd8:	1f 92       	push	r1
    efda:	1f 92       	push	r1
    efdc:	cd b7       	in	r28, 0x3d	; 61
    efde:	de b7       	in	r29, 0x3e	; 62
    efe0:	dc 01       	movw	r26, r24
    efe2:	90 91 b2 2d 	lds	r25, 0x2DB2	; 0x802db2 <udi_cdc_data_running>
    efe6:	99 23       	and	r25, r25
    efe8:	09 f4       	brne	.+2      	; 0xefec <udi_cdc_read_no_polling+0x20>
    efea:	43 c0       	rjmp	.+134    	; 0xf072 <udi_cdc_read_no_polling+0xa6>
    efec:	8f b7       	in	r24, 0x3f	; 63
    efee:	89 83       	std	Y+1, r24	; 0x01
    eff0:	f8 94       	cli
    eff2:	89 81       	ldd	r24, Y+1	; 0x01
    eff4:	40 91 2b 2b 	lds	r20, 0x2B2B	; 0x802b2b <udi_cdc_rx_pos>
    eff8:	50 91 2c 2b 	lds	r21, 0x2B2C	; 0x802b2c <udi_cdc_rx_pos+0x1>
    effc:	20 91 2d 2b 	lds	r18, 0x2B2D	; 0x802b2d <udi_cdc_rx_buf_sel>
    f000:	30 e0       	ldi	r19, 0x00	; 0
    f002:	f9 01       	movw	r30, r18
    f004:	ee 0f       	add	r30, r30
    f006:	ff 1f       	adc	r31, r31
    f008:	e2 5d       	subi	r30, 0xD2	; 210
    f00a:	f4 4d       	sbci	r31, 0xD4	; 212
    f00c:	e0 80       	ld	r14, Z
    f00e:	f1 80       	ldd	r15, Z+1	; 0x01
    f010:	e4 1a       	sub	r14, r20
    f012:	f5 0a       	sbc	r15, r21
    f014:	8f bf       	out	0x3f, r24	; 63
    f016:	06 2f       	mov	r16, r22
    f018:	17 2f       	mov	r17, r23
    f01a:	e0 16       	cp	r14, r16
    f01c:	f1 06       	cpc	r15, r17
    f01e:	08 f4       	brcc	.+2      	; 0xf022 <udi_cdc_read_no_polling+0x56>
    f020:	87 01       	movw	r16, r14
    f022:	01 15       	cp	r16, r1
    f024:	11 05       	cpc	r17, r1
    f026:	41 f1       	breq	.+80     	; 0xf078 <udi_cdc_read_no_polling+0xac>
    f028:	cd 01       	movw	r24, r26
    f02a:	e0 e4       	ldi	r30, 0x40	; 64
    f02c:	f1 e0       	ldi	r31, 0x01	; 1
    f02e:	2e 9f       	mul	r18, r30
    f030:	b0 01       	movw	r22, r0
    f032:	2f 9f       	mul	r18, r31
    f034:	70 0d       	add	r23, r0
    f036:	3e 9f       	mul	r19, r30
    f038:	70 0d       	add	r23, r0
    f03a:	11 24       	eor	r1, r1
    f03c:	64 0f       	add	r22, r20
    f03e:	75 1f       	adc	r23, r21
    f040:	6e 5c       	subi	r22, 0xCE	; 206
    f042:	74 4d       	sbci	r23, 0xD4	; 212
    f044:	a8 01       	movw	r20, r16
    f046:	0e 94 c8 8a 	call	0x11590	; 0x11590 <memcpy>
    f04a:	8f b7       	in	r24, 0x3f	; 63
    f04c:	8a 83       	std	Y+2, r24	; 0x02
    f04e:	f8 94       	cli
    f050:	8a 81       	ldd	r24, Y+2	; 0x02
    f052:	20 91 2b 2b 	lds	r18, 0x2B2B	; 0x802b2b <udi_cdc_rx_pos>
    f056:	30 91 2c 2b 	lds	r19, 0x2B2C	; 0x802b2c <udi_cdc_rx_pos+0x1>
    f05a:	02 0f       	add	r16, r18
    f05c:	13 1f       	adc	r17, r19
    f05e:	00 93 2b 2b 	sts	0x2B2B, r16	; 0x802b2b <udi_cdc_rx_pos>
    f062:	10 93 2c 2b 	sts	0x2B2C, r17	; 0x802b2c <udi_cdc_rx_pos+0x1>
    f066:	8f bf       	out	0x3f, r24	; 63
    f068:	80 e0       	ldi	r24, 0x00	; 0
    f06a:	a5 de       	rcall	.-694    	; 0xedb6 <udi_cdc_rx_start>
    f06c:	8e 2d       	mov	r24, r14
    f06e:	9f 2d       	mov	r25, r15
    f070:	05 c0       	rjmp	.+10     	; 0xf07c <udi_cdc_read_no_polling+0xb0>
    f072:	80 e0       	ldi	r24, 0x00	; 0
    f074:	90 e0       	ldi	r25, 0x00	; 0
    f076:	02 c0       	rjmp	.+4      	; 0xf07c <udi_cdc_read_no_polling+0xb0>
    f078:	8e 2d       	mov	r24, r14
    f07a:	9f 2d       	mov	r25, r15
    f07c:	0f 90       	pop	r0
    f07e:	0f 90       	pop	r0
    f080:	df 91       	pop	r29
    f082:	cf 91       	pop	r28
    f084:	1f 91       	pop	r17
    f086:	0f 91       	pop	r16
    f088:	ff 90       	pop	r15
    f08a:	ef 90       	pop	r14
    f08c:	08 95       	ret

0000f08e <udi_cdc_multi_get_free_tx_buffer>:
    f08e:	cf 93       	push	r28
    f090:	df 93       	push	r29
    f092:	1f 92       	push	r1
    f094:	cd b7       	in	r28, 0x3d	; 61
    f096:	de b7       	in	r29, 0x3e	; 62
    f098:	8f b7       	in	r24, 0x3f	; 63
    f09a:	89 83       	std	Y+1, r24	; 0x01
    f09c:	f8 94       	cli
    f09e:	99 81       	ldd	r25, Y+1	; 0x01
    f0a0:	80 91 a5 28 	lds	r24, 0x28A5	; 0x8028a5 <udi_cdc_tx_buf_sel>
    f0a4:	e8 2f       	mov	r30, r24
    f0a6:	f0 e0       	ldi	r31, 0x00	; 0
    f0a8:	ee 0f       	add	r30, r30
    f0aa:	ff 1f       	adc	r31, r31
    f0ac:	ea 55       	subi	r30, 0x5A	; 90
    f0ae:	f7 4d       	sbci	r31, 0xD7	; 215
    f0b0:	20 81       	ld	r18, Z
    f0b2:	31 81       	ldd	r19, Z+1	; 0x01
    f0b4:	20 34       	cpi	r18, 0x40	; 64
    f0b6:	41 e0       	ldi	r20, 0x01	; 1
    f0b8:	34 07       	cpc	r19, r20
    f0ba:	89 f4       	brne	.+34     	; 0xf0de <udi_cdc_multi_get_free_tx_buffer+0x50>
    f0bc:	40 91 a2 28 	lds	r20, 0x28A2	; 0x8028a2 <udi_cdc_tx_trans_ongoing>
    f0c0:	41 11       	cpse	r20, r1
    f0c2:	0d c0       	rjmp	.+26     	; 0xf0de <udi_cdc_multi_get_free_tx_buffer+0x50>
    f0c4:	40 91 a1 28 	lds	r20, 0x28A1	; 0x8028a1 <udi_cdc_tx_both_buf_to_send>
    f0c8:	41 11       	cpse	r20, r1
    f0ca:	09 c0       	rjmp	.+18     	; 0xf0de <udi_cdc_multi_get_free_tx_buffer+0x50>
    f0cc:	21 e0       	ldi	r18, 0x01	; 1
    f0ce:	20 93 a1 28 	sts	0x28A1, r18	; 0x8028a1 <udi_cdc_tx_both_buf_to_send>
    f0d2:	81 11       	cpse	r24, r1
    f0d4:	20 e0       	ldi	r18, 0x00	; 0
    f0d6:	20 93 a5 28 	sts	0x28A5, r18	; 0x8028a5 <udi_cdc_tx_buf_sel>
    f0da:	20 e0       	ldi	r18, 0x00	; 0
    f0dc:	30 e0       	ldi	r19, 0x00	; 0
    f0de:	9f bf       	out	0x3f, r25	; 63
    f0e0:	80 e4       	ldi	r24, 0x40	; 64
    f0e2:	91 e0       	ldi	r25, 0x01	; 1
    f0e4:	82 1b       	sub	r24, r18
    f0e6:	93 0b       	sbc	r25, r19
    f0e8:	0f 90       	pop	r0
    f0ea:	df 91       	pop	r29
    f0ec:	cf 91       	pop	r28
    f0ee:	08 95       	ret

0000f0f0 <udi_cdc_multi_is_tx_ready>:
    f0f0:	ce df       	rcall	.-100    	; 0xf08e <udi_cdc_multi_get_free_tx_buffer>
    f0f2:	21 e0       	ldi	r18, 0x01	; 1
    f0f4:	89 2b       	or	r24, r25
    f0f6:	09 f4       	brne	.+2      	; 0xf0fa <udi_cdc_multi_is_tx_ready+0xa>
    f0f8:	20 e0       	ldi	r18, 0x00	; 0
    f0fa:	82 2f       	mov	r24, r18
    f0fc:	08 95       	ret

0000f0fe <udi_cdc_is_tx_ready>:
    f0fe:	80 e0       	ldi	r24, 0x00	; 0
    f100:	f7 cf       	rjmp	.-18     	; 0xf0f0 <udi_cdc_multi_is_tx_ready>
    f102:	08 95       	ret

0000f104 <udi_cdc_multi_putc>:
    f104:	df 92       	push	r13
    f106:	ef 92       	push	r14
    f108:	ff 92       	push	r15
    f10a:	0f 93       	push	r16
    f10c:	1f 93       	push	r17
    f10e:	cf 93       	push	r28
    f110:	df 93       	push	r29
    f112:	1f 92       	push	r1
    f114:	cd b7       	in	r28, 0x3d	; 61
    f116:	de b7       	in	r29, 0x3e	; 62
    f118:	d6 2e       	mov	r13, r22
    f11a:	f7 2e       	mov	r15, r23
    f11c:	ee 24       	eor	r14, r14
    f11e:	e3 94       	inc	r14
    f120:	80 91 c8 2d 	lds	r24, 0x2DC8	; 0x802dc8 <udi_cdc_line_coding+0x6>
    f124:	89 30       	cpi	r24, 0x09	; 9
    f126:	09 f0       	breq	.+2      	; 0xf12a <udi_cdc_multi_putc+0x26>
    f128:	e1 2c       	mov	r14, r1
    f12a:	00 e4       	ldi	r16, 0x40	; 64
    f12c:	11 e0       	ldi	r17, 0x01	; 1
    f12e:	80 e0       	ldi	r24, 0x00	; 0
    f130:	df df       	rcall	.-66     	; 0xf0f0 <udi_cdc_multi_is_tx_ready>
    f132:	81 11       	cpse	r24, r1
    f134:	07 c0       	rjmp	.+14     	; 0xf144 <udi_cdc_multi_putc+0x40>
    f136:	80 91 b2 2d 	lds	r24, 0x2DB2	; 0x802db2 <udi_cdc_data_running>
    f13a:	81 11       	cpse	r24, r1
    f13c:	f8 cf       	rjmp	.-16     	; 0xf12e <udi_cdc_multi_putc+0x2a>
    f13e:	80 e0       	ldi	r24, 0x00	; 0
    f140:	90 e0       	ldi	r25, 0x00	; 0
    f142:	2b c0       	rjmp	.+86     	; 0xf19a <udi_cdc_multi_putc+0x96>
    f144:	8f b7       	in	r24, 0x3f	; 63
    f146:	89 83       	std	Y+1, r24	; 0x01
    f148:	f8 94       	cli
    f14a:	69 81       	ldd	r22, Y+1	; 0x01
    f14c:	20 91 a5 28 	lds	r18, 0x28A5	; 0x8028a5 <udi_cdc_tx_buf_sel>
    f150:	30 e0       	ldi	r19, 0x00	; 0
    f152:	f9 01       	movw	r30, r18
    f154:	ee 0f       	add	r30, r30
    f156:	ff 1f       	adc	r31, r31
    f158:	ea 55       	subi	r30, 0x5A	; 90
    f15a:	f7 4d       	sbci	r31, 0xD7	; 215
    f15c:	80 81       	ld	r24, Z
    f15e:	91 81       	ldd	r25, Z+1	; 0x01
    f160:	ac 01       	movw	r20, r24
    f162:	4f 5f       	subi	r20, 0xFF	; 255
    f164:	5f 4f       	sbci	r21, 0xFF	; 255
    f166:	40 83       	st	Z, r20
    f168:	51 83       	std	Z+1, r21	; 0x01
    f16a:	20 9f       	mul	r18, r16
    f16c:	a0 01       	movw	r20, r0
    f16e:	21 9f       	mul	r18, r17
    f170:	50 0d       	add	r21, r0
    f172:	30 9f       	mul	r19, r16
    f174:	50 0d       	add	r21, r0
    f176:	11 24       	eor	r1, r1
    f178:	9a 01       	movw	r18, r20
    f17a:	26 55       	subi	r18, 0x56	; 86
    f17c:	37 4d       	sbci	r19, 0xD7	; 215
    f17e:	f9 01       	movw	r30, r18
    f180:	e8 0f       	add	r30, r24
    f182:	f9 1f       	adc	r31, r25
    f184:	d0 82       	st	Z, r13
    f186:	6f bf       	out	0x3f, r22	; 63
    f188:	ee 20       	and	r14, r14
    f18a:	29 f0       	breq	.+10     	; 0xf196 <udi_cdc_multi_putc+0x92>
    f18c:	df 2c       	mov	r13, r15
    f18e:	ff 0c       	add	r15, r15
    f190:	ff 08       	sbc	r15, r15
    f192:	e1 2c       	mov	r14, r1
    f194:	cc cf       	rjmp	.-104    	; 0xf12e <udi_cdc_multi_putc+0x2a>
    f196:	81 e0       	ldi	r24, 0x01	; 1
    f198:	90 e0       	ldi	r25, 0x00	; 0
    f19a:	0f 90       	pop	r0
    f19c:	df 91       	pop	r29
    f19e:	cf 91       	pop	r28
    f1a0:	1f 91       	pop	r17
    f1a2:	0f 91       	pop	r16
    f1a4:	ff 90       	pop	r15
    f1a6:	ef 90       	pop	r14
    f1a8:	df 90       	pop	r13
    f1aa:	08 95       	ret

0000f1ac <udi_cdc_putc>:
    f1ac:	bc 01       	movw	r22, r24
    f1ae:	80 e0       	ldi	r24, 0x00	; 0
    f1b0:	a9 cf       	rjmp	.-174    	; 0xf104 <udi_cdc_multi_putc>
    f1b2:	08 95       	ret

0000f1b4 <udc_next_desc_in_iface>:
    f1b4:	e0 91 ce 2d 	lds	r30, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f1b8:	f0 91 cf 2d 	lds	r31, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f1bc:	01 90       	ld	r0, Z+
    f1be:	f0 81       	ld	r31, Z
    f1c0:	e0 2d       	mov	r30, r0
    f1c2:	22 81       	ldd	r18, Z+2	; 0x02
    f1c4:	33 81       	ldd	r19, Z+3	; 0x03
    f1c6:	2e 0f       	add	r18, r30
    f1c8:	3f 1f       	adc	r19, r31
    f1ca:	fc 01       	movw	r30, r24
    f1cc:	40 81       	ld	r20, Z
    f1ce:	e4 0f       	add	r30, r20
    f1d0:	f1 1d       	adc	r31, r1
    f1d2:	e2 17       	cp	r30, r18
    f1d4:	f3 07       	cpc	r31, r19
    f1d6:	a0 f4       	brcc	.+40     	; 0xf200 <udc_next_desc_in_iface+0x4c>
    f1d8:	81 81       	ldd	r24, Z+1	; 0x01
    f1da:	84 30       	cpi	r24, 0x04	; 4
    f1dc:	a1 f0       	breq	.+40     	; 0xf206 <udc_next_desc_in_iface+0x52>
    f1de:	86 13       	cpse	r24, r22
    f1e0:	06 c0       	rjmp	.+12     	; 0xf1ee <udc_next_desc_in_iface+0x3a>
    f1e2:	14 c0       	rjmp	.+40     	; 0xf20c <udc_next_desc_in_iface+0x58>
    f1e4:	81 81       	ldd	r24, Z+1	; 0x01
    f1e6:	84 30       	cpi	r24, 0x04	; 4
    f1e8:	a1 f0       	breq	.+40     	; 0xf212 <udc_next_desc_in_iface+0x5e>
    f1ea:	86 17       	cp	r24, r22
    f1ec:	a9 f0       	breq	.+42     	; 0xf218 <udc_next_desc_in_iface+0x64>
    f1ee:	80 81       	ld	r24, Z
    f1f0:	e8 0f       	add	r30, r24
    f1f2:	f1 1d       	adc	r31, r1
    f1f4:	e2 17       	cp	r30, r18
    f1f6:	f3 07       	cpc	r31, r19
    f1f8:	a8 f3       	brcs	.-22     	; 0xf1e4 <udc_next_desc_in_iface+0x30>
    f1fa:	80 e0       	ldi	r24, 0x00	; 0
    f1fc:	90 e0       	ldi	r25, 0x00	; 0
    f1fe:	08 95       	ret
    f200:	80 e0       	ldi	r24, 0x00	; 0
    f202:	90 e0       	ldi	r25, 0x00	; 0
    f204:	08 95       	ret
    f206:	80 e0       	ldi	r24, 0x00	; 0
    f208:	90 e0       	ldi	r25, 0x00	; 0
    f20a:	08 95       	ret
    f20c:	8e 2f       	mov	r24, r30
    f20e:	9f 2f       	mov	r25, r31
    f210:	08 95       	ret
    f212:	80 e0       	ldi	r24, 0x00	; 0
    f214:	90 e0       	ldi	r25, 0x00	; 0
    f216:	08 95       	ret
    f218:	8e 2f       	mov	r24, r30
    f21a:	9f 2f       	mov	r25, r31
    f21c:	08 95       	ret

0000f21e <udc_valid_address>:
    f21e:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f222:	8f 77       	andi	r24, 0x7F	; 127
    f224:	0c 94 aa 59 	jmp	0xb354	; 0xb354 <udd_set_address>
    f228:	08 95       	ret

0000f22a <udc_update_iface_desc>:
    f22a:	90 91 d0 2d 	lds	r25, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f22e:	99 23       	and	r25, r25
    f230:	81 f1       	breq	.+96     	; 0xf292 <udc_update_iface_desc+0x68>
    f232:	e0 91 ce 2d 	lds	r30, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f236:	f0 91 cf 2d 	lds	r31, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f23a:	01 90       	ld	r0, Z+
    f23c:	f0 81       	ld	r31, Z
    f23e:	e0 2d       	mov	r30, r0
    f240:	94 81       	ldd	r25, Z+4	; 0x04
    f242:	89 17       	cp	r24, r25
    f244:	40 f5       	brcc	.+80     	; 0xf296 <udc_update_iface_desc+0x6c>
    f246:	e0 93 cc 2d 	sts	0x2DCC, r30	; 0x802dcc <udc_ptr_iface>
    f24a:	f0 93 cd 2d 	sts	0x2DCD, r31	; 0x802dcd <udc_ptr_iface+0x1>
    f24e:	22 81       	ldd	r18, Z+2	; 0x02
    f250:	33 81       	ldd	r19, Z+3	; 0x03
    f252:	2e 0f       	add	r18, r30
    f254:	3f 1f       	adc	r19, r31
    f256:	e2 17       	cp	r30, r18
    f258:	f3 07       	cpc	r31, r19
    f25a:	f8 f4       	brcc	.+62     	; 0xf29a <udc_update_iface_desc+0x70>
    f25c:	91 81       	ldd	r25, Z+1	; 0x01
    f25e:	94 30       	cpi	r25, 0x04	; 4
    f260:	61 f4       	brne	.+24     	; 0xf27a <udc_update_iface_desc+0x50>
    f262:	92 81       	ldd	r25, Z+2	; 0x02
    f264:	89 13       	cpse	r24, r25
    f266:	09 c0       	rjmp	.+18     	; 0xf27a <udc_update_iface_desc+0x50>
    f268:	93 81       	ldd	r25, Z+3	; 0x03
    f26a:	96 13       	cpse	r25, r22
    f26c:	06 c0       	rjmp	.+12     	; 0xf27a <udc_update_iface_desc+0x50>
    f26e:	e0 93 cc 2d 	sts	0x2DCC, r30	; 0x802dcc <udc_ptr_iface>
    f272:	f0 93 cd 2d 	sts	0x2DCD, r31	; 0x802dcd <udc_ptr_iface+0x1>
    f276:	81 e0       	ldi	r24, 0x01	; 1
    f278:	08 95       	ret
    f27a:	90 81       	ld	r25, Z
    f27c:	e9 0f       	add	r30, r25
    f27e:	f1 1d       	adc	r31, r1
    f280:	e2 17       	cp	r30, r18
    f282:	f3 07       	cpc	r31, r19
    f284:	58 f3       	brcs	.-42     	; 0xf25c <udc_update_iface_desc+0x32>
    f286:	e0 93 cc 2d 	sts	0x2DCC, r30	; 0x802dcc <udc_ptr_iface>
    f28a:	f0 93 cd 2d 	sts	0x2DCD, r31	; 0x802dcd <udc_ptr_iface+0x1>
    f28e:	80 e0       	ldi	r24, 0x00	; 0
    f290:	08 95       	ret
    f292:	80 e0       	ldi	r24, 0x00	; 0
    f294:	08 95       	ret
    f296:	80 e0       	ldi	r24, 0x00	; 0
    f298:	08 95       	ret
    f29a:	80 e0       	ldi	r24, 0x00	; 0
    f29c:	08 95       	ret

0000f29e <udc_iface_disable>:
    f29e:	ef 92       	push	r14
    f2a0:	ff 92       	push	r15
    f2a2:	1f 93       	push	r17
    f2a4:	cf 93       	push	r28
    f2a6:	df 93       	push	r29
    f2a8:	c8 2f       	mov	r28, r24
    f2aa:	60 e0       	ldi	r22, 0x00	; 0
    f2ac:	be df       	rcall	.-132    	; 0xf22a <udc_update_iface_desc>
    f2ae:	18 2f       	mov	r17, r24
    f2b0:	88 23       	and	r24, r24
    f2b2:	81 f1       	breq	.+96     	; 0xf314 <udc_iface_disable+0x76>
    f2b4:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f2b8:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f2bc:	ec 2f       	mov	r30, r28
    f2be:	f0 e0       	ldi	r31, 0x00	; 0
    f2c0:	ee 0f       	add	r30, r30
    f2c2:	ff 1f       	adc	r31, r31
    f2c4:	12 96       	adiw	r26, 0x02	; 2
    f2c6:	8d 91       	ld	r24, X+
    f2c8:	9c 91       	ld	r25, X
    f2ca:	13 97       	sbiw	r26, 0x03	; 3
    f2cc:	e8 0f       	add	r30, r24
    f2ce:	f9 1f       	adc	r31, r25
    f2d0:	e0 80       	ld	r14, Z
    f2d2:	f1 80       	ldd	r15, Z+1	; 0x01
    f2d4:	d7 01       	movw	r26, r14
    f2d6:	16 96       	adiw	r26, 0x06	; 6
    f2d8:	ed 91       	ld	r30, X+
    f2da:	fc 91       	ld	r31, X
    f2dc:	17 97       	sbiw	r26, 0x07	; 7
    f2de:	19 95       	eicall
    f2e0:	68 2f       	mov	r22, r24
    f2e2:	8c 2f       	mov	r24, r28
    f2e4:	a2 df       	rcall	.-188    	; 0xf22a <udc_update_iface_desc>
    f2e6:	18 2f       	mov	r17, r24
    f2e8:	88 23       	and	r24, r24
    f2ea:	a1 f0       	breq	.+40     	; 0xf314 <udc_iface_disable+0x76>
    f2ec:	c0 91 cc 2d 	lds	r28, 0x2DCC	; 0x802dcc <udc_ptr_iface>
    f2f0:	d0 91 cd 2d 	lds	r29, 0x2DCD	; 0x802dcd <udc_ptr_iface+0x1>
    f2f4:	65 e0       	ldi	r22, 0x05	; 5
    f2f6:	ce 01       	movw	r24, r28
    f2f8:	5d df       	rcall	.-326    	; 0xf1b4 <udc_next_desc_in_iface>
    f2fa:	ec 01       	movw	r28, r24
    f2fc:	89 2b       	or	r24, r25
    f2fe:	21 f0       	breq	.+8      	; 0xf308 <udc_iface_disable+0x6a>
    f300:	8a 81       	ldd	r24, Y+2	; 0x02
    f302:	0e 94 b3 5b 	call	0xb766	; 0xb766 <udd_ep_free>
    f306:	f6 cf       	rjmp	.-20     	; 0xf2f4 <udc_iface_disable+0x56>
    f308:	d7 01       	movw	r26, r14
    f30a:	12 96       	adiw	r26, 0x02	; 2
    f30c:	ed 91       	ld	r30, X+
    f30e:	fc 91       	ld	r31, X
    f310:	13 97       	sbiw	r26, 0x03	; 3
    f312:	19 95       	eicall
    f314:	81 2f       	mov	r24, r17
    f316:	df 91       	pop	r29
    f318:	cf 91       	pop	r28
    f31a:	1f 91       	pop	r17
    f31c:	ff 90       	pop	r15
    f31e:	ef 90       	pop	r14
    f320:	08 95       	ret

0000f322 <udc_iface_enable>:
    f322:	1f 93       	push	r17
    f324:	cf 93       	push	r28
    f326:	df 93       	push	r29
    f328:	18 2f       	mov	r17, r24
    f32a:	7f df       	rcall	.-258    	; 0xf22a <udc_update_iface_desc>
    f32c:	88 23       	and	r24, r24
    f32e:	41 f1       	breq	.+80     	; 0xf380 <udc_iface_enable+0x5e>
    f330:	c0 91 cc 2d 	lds	r28, 0x2DCC	; 0x802dcc <udc_ptr_iface>
    f334:	d0 91 cd 2d 	lds	r29, 0x2DCD	; 0x802dcd <udc_ptr_iface+0x1>
    f338:	65 e0       	ldi	r22, 0x05	; 5
    f33a:	ce 01       	movw	r24, r28
    f33c:	3b df       	rcall	.-394    	; 0xf1b4 <udc_next_desc_in_iface>
    f33e:	ec 01       	movw	r28, r24
    f340:	89 2b       	or	r24, r25
    f342:	49 f0       	breq	.+18     	; 0xf356 <udc_iface_enable+0x34>
    f344:	4c 81       	ldd	r20, Y+4	; 0x04
    f346:	5d 81       	ldd	r21, Y+5	; 0x05
    f348:	6b 81       	ldd	r22, Y+3	; 0x03
    f34a:	8a 81       	ldd	r24, Y+2	; 0x02
    f34c:	0e 94 bf 59 	call	0xb37e	; 0xb37e <udd_ep_alloc>
    f350:	81 11       	cpse	r24, r1
    f352:	f2 cf       	rjmp	.-28     	; 0xf338 <udc_iface_enable+0x16>
    f354:	15 c0       	rjmp	.+42     	; 0xf380 <udc_iface_enable+0x5e>
    f356:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f35a:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f35e:	e1 2f       	mov	r30, r17
    f360:	f0 e0       	ldi	r31, 0x00	; 0
    f362:	ee 0f       	add	r30, r30
    f364:	ff 1f       	adc	r31, r31
    f366:	12 96       	adiw	r26, 0x02	; 2
    f368:	8d 91       	ld	r24, X+
    f36a:	9c 91       	ld	r25, X
    f36c:	13 97       	sbiw	r26, 0x03	; 3
    f36e:	e8 0f       	add	r30, r24
    f370:	f9 1f       	adc	r31, r25
    f372:	01 90       	ld	r0, Z+
    f374:	f0 81       	ld	r31, Z
    f376:	e0 2d       	mov	r30, r0
    f378:	01 90       	ld	r0, Z+
    f37a:	f0 81       	ld	r31, Z
    f37c:	e0 2d       	mov	r30, r0
    f37e:	19 95       	eicall
    f380:	df 91       	pop	r29
    f382:	cf 91       	pop	r28
    f384:	1f 91       	pop	r17
    f386:	08 95       	ret

0000f388 <udc_start>:
    f388:	0c 94 23 59 	jmp	0xb246	; 0xb246 <udd_enable>
    f38c:	08 95       	ret

0000f38e <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    f38e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    f390:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f394:	88 23       	and	r24, r24
    f396:	c1 f0       	breq	.+48     	; 0xf3c8 <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f398:	e0 91 ce 2d 	lds	r30, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f39c:	f0 91 cf 2d 	lds	r31, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f3a0:	01 90       	ld	r0, Z+
    f3a2:	f0 81       	ld	r31, Z
    f3a4:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    f3a6:	84 81       	ldd	r24, Z+4	; 0x04
    f3a8:	88 23       	and	r24, r24
    f3aa:	71 f0       	breq	.+28     	; 0xf3c8 <udc_reset+0x3a>
    f3ac:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    f3ae:	8c 2f       	mov	r24, r28
    f3b0:	76 df       	rcall	.-276    	; 0xf29e <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    f3b2:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f3b4:	e0 91 ce 2d 	lds	r30, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f3b8:	f0 91 cf 2d 	lds	r31, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f3bc:	01 90       	ld	r0, Z+
    f3be:	f0 81       	ld	r31, Z
    f3c0:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    f3c2:	84 81       	ldd	r24, Z+4	; 0x04
    f3c4:	c8 17       	cp	r28, r24
    f3c6:	98 f3       	brcs	.-26     	; 0xf3ae <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    f3c8:	10 92 d0 2d 	sts	0x2DD0, r1	; 0x802dd0 <udc_num_configuration>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    f3cc:	80 91 d4 2d 	lds	r24, 0x2DD4	; 0x802dd4 <udc_device_status>
    f3d0:	81 fd       	sbrc	r24, 1
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    f3d2:	0e 94 ad 21 	call	0x435a	; 0x435a <usb_callback_remotewakeup_disable>
	}
#endif
	udc_device_status =
    f3d6:	10 92 d4 2d 	sts	0x2DD4, r1	; 0x802dd4 <udc_device_status>
    f3da:	10 92 d5 2d 	sts	0x2DD5, r1	; 0x802dd5 <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    f3de:	cf 91       	pop	r28
    f3e0:	08 95       	ret

0000f3e2 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    f3e2:	0e 94 c9 58 	call	0xb192	; 0xb192 <udd_disable>
	udc_reset();
    f3e6:	d3 cf       	rjmp	.-90     	; 0xf38e <udc_reset>
    f3e8:	08 95       	ret

0000f3ea <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    f3ea:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    f3ec:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f3f0:	88 23       	and	r24, r24
    f3f2:	49 f1       	breq	.+82     	; 0xf446 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f3f4:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f3f8:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f3fc:	ed 91       	ld	r30, X+
    f3fe:	fc 91       	ld	r31, X
    f400:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    f402:	84 81       	ldd	r24, Z+4	; 0x04
    f404:	88 23       	and	r24, r24
    f406:	f9 f0       	breq	.+62     	; 0xf446 <udc_sof_notify+0x5c>
    f408:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    f40a:	ec 2f       	mov	r30, r28
    f40c:	f0 e0       	ldi	r31, 0x00	; 0
    f40e:	ee 0f       	add	r30, r30
    f410:	ff 1f       	adc	r31, r31
    f412:	12 96       	adiw	r26, 0x02	; 2
    f414:	8d 91       	ld	r24, X+
    f416:	9c 91       	ld	r25, X
    f418:	13 97       	sbiw	r26, 0x03	; 3
    f41a:	e8 0f       	add	r30, r24
    f41c:	f9 1f       	adc	r31, r25
    f41e:	01 90       	ld	r0, Z+
    f420:	f0 81       	ld	r31, Z
    f422:	e0 2d       	mov	r30, r0
    f424:	00 84       	ldd	r0, Z+8	; 0x08
    f426:	f1 85       	ldd	r31, Z+9	; 0x09
    f428:	e0 2d       	mov	r30, r0
    f42a:	30 97       	sbiw	r30, 0x00	; 0
    f42c:	09 f0       	breq	.+2      	; 0xf430 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    f42e:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    f430:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f432:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f436:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f43a:	ed 91       	ld	r30, X+
    f43c:	fc 91       	ld	r31, X
    f43e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    f440:	84 81       	ldd	r24, Z+4	; 0x04
    f442:	c8 17       	cp	r28, r24
    f444:	10 f3       	brcs	.-60     	; 0xf40a <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    f446:	cf 91       	pop	r28
    f448:	08 95       	ret

0000f44a <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    f44a:	0f 93       	push	r16
    f44c:	1f 93       	push	r17
    f44e:	cf 93       	push	r28
    f450:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    f452:	e5 ee       	ldi	r30, 0xE5	; 229
    f454:	fd e2       	ldi	r31, 0x2D	; 45
    f456:	12 86       	std	Z+10, r1	; 0x0a
    f458:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    f45a:	14 86       	std	Z+12, r1	; 0x0c
    f45c:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    f45e:	16 86       	std	Z+14, r1	; 0x0e
    f460:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    f462:	80 81       	ld	r24, Z
    f464:	88 23       	and	r24, r24
    f466:	0c f0       	brlt	.+2      	; 0xf46a <udc_process_setup+0x20>
    f468:	95 c2       	rjmp	.+1322   	; 0xf994 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    f46a:	20 91 eb 2d 	lds	r18, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f46e:	30 91 ec 2d 	lds	r19, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f472:	21 15       	cp	r18, r1
    f474:	31 05       	cpc	r19, r1
    f476:	09 f0       	breq	.+2      	; 0xf47a <udc_process_setup+0x30>
    f478:	88 c2       	rjmp	.+1296   	; 0xf98a <udc_process_setup+0x540>
    f47a:	7f c2       	rjmp	.+1278   	; 0xf97a <udc_process_setup+0x530>
    f47c:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    f47e:	09 f0       	breq	.+2      	; 0xf482 <udc_process_setup+0x38>
    f480:	ab c0       	rjmp	.+342    	; 0xf5d8 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    f482:	90 91 e6 2d 	lds	r25, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f486:	96 30       	cpi	r25, 0x06	; 6
    f488:	81 f0       	breq	.+32     	; 0xf4aa <udc_process_setup+0x60>
    f48a:	98 30       	cpi	r25, 0x08	; 8
    f48c:	09 f4       	brne	.+2      	; 0xf490 <udc_process_setup+0x46>
    f48e:	99 c0       	rjmp	.+306    	; 0xf5c2 <udc_process_setup+0x178>
    f490:	91 11       	cpse	r25, r1
    f492:	a2 c0       	rjmp	.+324    	; 0xf5d8 <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    f494:	22 30       	cpi	r18, 0x02	; 2
    f496:	31 05       	cpc	r19, r1
    f498:	09 f0       	breq	.+2      	; 0xf49c <udc_process_setup+0x52>
    f49a:	2b c2       	rjmp	.+1110   	; 0xf8f2 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    f49c:	62 e0       	ldi	r22, 0x02	; 2
    f49e:	70 e0       	ldi	r23, 0x00	; 0
    f4a0:	84 ed       	ldi	r24, 0xD4	; 212
    f4a2:	9d e2       	ldi	r25, 0x2D	; 45
    f4a4:	0e 94 b8 59 	call	0xb370	; 0xb370 <udd_set_setup_payload>
    f4a8:	7e c2       	rjmp	.+1276   	; 0xf9a6 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    f4aa:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f4ae:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    f4b2:	29 2f       	mov	r18, r25
    f4b4:	33 27       	eor	r19, r19
    f4b6:	22 30       	cpi	r18, 0x02	; 2
    f4b8:	31 05       	cpc	r19, r1
    f4ba:	b1 f0       	breq	.+44     	; 0xf4e8 <udc_process_setup+0x9e>
    f4bc:	20 f4       	brcc	.+8      	; 0xf4c6 <udc_process_setup+0x7c>
    f4be:	21 30       	cpi	r18, 0x01	; 1
    f4c0:	31 05       	cpc	r19, r1
    f4c2:	41 f0       	breq	.+16     	; 0xf4d4 <udc_process_setup+0x8a>
    f4c4:	d8 c1       	rjmp	.+944    	; 0xf876 <udc_process_setup+0x42c>
    f4c6:	23 30       	cpi	r18, 0x03	; 3
    f4c8:	31 05       	cpc	r19, r1
    f4ca:	f1 f1       	breq	.+124    	; 0xf548 <udc_process_setup+0xfe>
    f4cc:	2f 30       	cpi	r18, 0x0F	; 15
    f4ce:	31 05       	cpc	r19, r1
    f4d0:	61 f1       	breq	.+88     	; 0xf52a <udc_process_setup+0xe0>
    f4d2:	d1 c1       	rjmp	.+930    	; 0xf876 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    f4d4:	80 91 5b 20 	lds	r24, 0x205B	; 0x80205b <udc_config>
    f4d8:	90 91 5c 20 	lds	r25, 0x205C	; 0x80205c <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    f4dc:	dc 01       	movw	r26, r24
    f4de:	6c 91       	ld	r22, X
    f4e0:	70 e0       	ldi	r23, 0x00	; 0
    f4e2:	0e 94 b8 59 	call	0xb370	; 0xb370 <udd_set_setup_payload>
    f4e6:	5e c0       	rjmp	.+188    	; 0xf5a4 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    f4e8:	e0 91 5b 20 	lds	r30, 0x205B	; 0x80205b <udc_config>
    f4ec:	f0 91 5c 20 	lds	r31, 0x205C	; 0x80205c <udc_config+0x1>
    f4f0:	21 89       	ldd	r18, Z+17	; 0x11
    f4f2:	82 17       	cp	r24, r18
    f4f4:	08 f0       	brcs	.+2      	; 0xf4f8 <udc_process_setup+0xae>
    f4f6:	fd c1       	rjmp	.+1018   	; 0xf8f2 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    f4f8:	99 27       	eor	r25, r25
    f4fa:	88 0f       	add	r24, r24
    f4fc:	99 1f       	adc	r25, r25
    f4fe:	88 0f       	add	r24, r24
    f500:	99 1f       	adc	r25, r25
    f502:	e0 91 5d 20 	lds	r30, 0x205D	; 0x80205d <udc_config+0x2>
    f506:	f0 91 5e 20 	lds	r31, 0x205E	; 0x80205e <udc_config+0x3>
    f50a:	e8 0f       	add	r30, r24
    f50c:	f9 1f       	adc	r31, r25
    f50e:	80 81       	ld	r24, Z
    f510:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    f512:	fc 01       	movw	r30, r24
    f514:	62 81       	ldd	r22, Z+2	; 0x02
    f516:	73 81       	ldd	r23, Z+3	; 0x03
    f518:	0e 94 b8 59 	call	0xb370	; 0xb370 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    f51c:	e0 91 ed 2d 	lds	r30, 0x2DED	; 0x802ded <udd_g_ctrlreq+0x8>
    f520:	f0 91 ee 2d 	lds	r31, 0x2DEE	; 0x802dee <udd_g_ctrlreq+0x9>
    f524:	82 e0       	ldi	r24, 0x02	; 2
    f526:	81 83       	std	Z+1, r24	; 0x01
    f528:	3d c0       	rjmp	.+122    	; 0xf5a4 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    f52a:	80 91 5f 20 	lds	r24, 0x205F	; 0x80205f <udc_config+0x4>
    f52e:	90 91 60 20 	lds	r25, 0x2060	; 0x802060 <udc_config+0x5>
    f532:	00 97       	sbiw	r24, 0x00	; 0
    f534:	09 f4       	brne	.+2      	; 0xf538 <udc_process_setup+0xee>
    f536:	dd c1       	rjmp	.+954    	; 0xf8f2 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    f538:	dc 01       	movw	r26, r24
    f53a:	12 96       	adiw	r26, 0x02	; 2
    f53c:	6d 91       	ld	r22, X+
    f53e:	7c 91       	ld	r23, X
    f540:	13 97       	sbiw	r26, 0x03	; 3
    f542:	0e 94 b8 59 	call	0xb370	; 0xb370 <udd_set_setup_payload>
    f546:	2e c0       	rjmp	.+92     	; 0xf5a4 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    f548:	99 27       	eor	r25, r25
    f54a:	81 30       	cpi	r24, 0x01	; 1
    f54c:	91 05       	cpc	r25, r1
    f54e:	99 f0       	breq	.+38     	; 0xf576 <udc_process_setup+0x12c>
    f550:	58 f0       	brcs	.+22     	; 0xf568 <udc_process_setup+0x11e>
    f552:	82 30       	cpi	r24, 0x02	; 2
    f554:	91 05       	cpc	r25, r1
    f556:	09 f4       	brne	.+2      	; 0xf55a <udc_process_setup+0x110>
    f558:	22 c2       	rjmp	.+1092   	; 0xf99e <udc_process_setup+0x554>
    f55a:	03 97       	sbiw	r24, 0x03	; 3
    f55c:	09 f0       	breq	.+2      	; 0xf560 <udc_process_setup+0x116>
    f55e:	94 c1       	rjmp	.+808    	; 0xf888 <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    f560:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    f562:	ea ea       	ldi	r30, 0xAA	; 170
    f564:	f1 e2       	ldi	r31, 0x21	; 33
    f566:	0a c0       	rjmp	.+20     	; 0xf57c <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    f568:	64 e0       	ldi	r22, 0x04	; 4
    f56a:	70 e0       	ldi	r23, 0x00	; 0
    f56c:	80 e0       	ldi	r24, 0x00	; 0
    f56e:	91 e2       	ldi	r25, 0x21	; 33
    f570:	0e 94 b8 59 	call	0xb370	; 0xb370 <udd_set_setup_payload>
    f574:	17 c0       	rjmp	.+46     	; 0xf5a4 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    f576:	ef ee       	ldi	r30, 0xEF	; 239
    f578:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    f57a:	30 e1       	ldi	r19, 0x10	; 16
    f57c:	a2 ec       	ldi	r26, 0xC2	; 194
    f57e:	b0 e2       	ldi	r27, 0x20	; 32
    f580:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    f582:	81 91       	ld	r24, Z+
    f584:	90 e0       	ldi	r25, 0x00	; 0
    f586:	8d 93       	st	X+, r24
    f588:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    f58a:	2f 5f       	subi	r18, 0xFF	; 255
    f58c:	23 17       	cp	r18, r19
    f58e:	c8 f3       	brcs	.-14     	; 0xf582 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    f590:	63 2f       	mov	r22, r19
    f592:	66 0f       	add	r22, r22
    f594:	6e 5f       	subi	r22, 0xFE	; 254
    f596:	60 93 c0 20 	sts	0x20C0, r22	; 0x8020c0 <udc_string_desc>
		udd_set_setup_payload(
    f59a:	70 e0       	ldi	r23, 0x00	; 0
    f59c:	80 ec       	ldi	r24, 0xC0	; 192
    f59e:	90 e2       	ldi	r25, 0x20	; 32
    f5a0:	0e 94 b8 59 	call	0xb370	; 0xb370 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    f5a4:	e5 ee       	ldi	r30, 0xE5	; 229
    f5a6:	fd e2       	ldi	r31, 0x2D	; 45
    f5a8:	86 81       	ldd	r24, Z+6	; 0x06
    f5aa:	97 81       	ldd	r25, Z+7	; 0x07
    f5ac:	22 85       	ldd	r18, Z+10	; 0x0a
    f5ae:	33 85       	ldd	r19, Z+11	; 0x0b
    f5b0:	82 17       	cp	r24, r18
    f5b2:	93 07       	cpc	r25, r19
    f5b4:	08 f0       	brcs	.+2      	; 0xf5b8 <udc_process_setup+0x16e>
    f5b6:	f7 c1       	rjmp	.+1006   	; 0xf9a6 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    f5b8:	80 93 ef 2d 	sts	0x2DEF, r24	; 0x802def <udd_g_ctrlreq+0xa>
    f5bc:	90 93 f0 2d 	sts	0x2DF0, r25	; 0x802df0 <udd_g_ctrlreq+0xb>
    f5c0:	f2 c1       	rjmp	.+996    	; 0xf9a6 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    f5c2:	21 30       	cpi	r18, 0x01	; 1
    f5c4:	31 05       	cpc	r19, r1
    f5c6:	09 f0       	breq	.+2      	; 0xf5ca <udc_process_setup+0x180>
    f5c8:	94 c1       	rjmp	.+808    	; 0xf8f2 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    f5ca:	61 e0       	ldi	r22, 0x01	; 1
    f5cc:	70 e0       	ldi	r23, 0x00	; 0
    f5ce:	80 ed       	ldi	r24, 0xD0	; 208
    f5d0:	9d e2       	ldi	r25, 0x2D	; 45
    f5d2:	0e 94 b8 59 	call	0xb370	; 0xb370 <udd_set_setup_payload>
    f5d6:	e7 c1       	rjmp	.+974    	; 0xf9a6 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    f5d8:	81 30       	cpi	r24, 0x01	; 1
    f5da:	e9 f5       	brne	.+122    	; 0xf656 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    f5dc:	90 91 e6 2d 	lds	r25, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f5e0:	9a 30       	cpi	r25, 0x0A	; 10
    f5e2:	c9 f5       	brne	.+114    	; 0xf656 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    f5e4:	21 30       	cpi	r18, 0x01	; 1
    f5e6:	31 05       	cpc	r19, r1
    f5e8:	09 f0       	breq	.+2      	; 0xf5ec <udc_process_setup+0x1a2>
    f5ea:	53 c1       	rjmp	.+678    	; 0xf892 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    f5ec:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f5f0:	88 23       	and	r24, r24
    f5f2:	09 f4       	brne	.+2      	; 0xf5f6 <udc_process_setup+0x1ac>
    f5f4:	4e c1       	rjmp	.+668    	; 0xf892 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    f5f6:	c0 91 e9 2d 	lds	r28, 0x2DE9	; 0x802de9 <udd_g_ctrlreq+0x4>
    f5fa:	d0 91 ea 2d 	lds	r29, 0x2DEA	; 0x802dea <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    f5fe:	00 91 ce 2d 	lds	r16, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f602:	10 91 cf 2d 	lds	r17, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f606:	d8 01       	movw	r26, r16
    f608:	ed 91       	ld	r30, X+
    f60a:	fc 91       	ld	r31, X
    f60c:	84 81       	ldd	r24, Z+4	; 0x04
    f60e:	c8 17       	cp	r28, r24
    f610:	08 f0       	brcs	.+2      	; 0xf614 <udc_process_setup+0x1ca>
    f612:	3f c1       	rjmp	.+638    	; 0xf892 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    f614:	60 e0       	ldi	r22, 0x00	; 0
    f616:	8c 2f       	mov	r24, r28
    f618:	08 de       	rcall	.-1008   	; 0xf22a <udc_update_iface_desc>
    f61a:	88 23       	and	r24, r24
    f61c:	09 f4       	brne	.+2      	; 0xf620 <udc_process_setup+0x1d6>
    f61e:	34 c1       	rjmp	.+616    	; 0xf888 <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    f620:	ce 01       	movw	r24, r28
    f622:	99 27       	eor	r25, r25
    f624:	88 0f       	add	r24, r24
    f626:	99 1f       	adc	r25, r25
    f628:	d8 01       	movw	r26, r16
    f62a:	12 96       	adiw	r26, 0x02	; 2
    f62c:	ed 91       	ld	r30, X+
    f62e:	fc 91       	ld	r31, X
    f630:	13 97       	sbiw	r26, 0x03	; 3
    f632:	e8 0f       	add	r30, r24
    f634:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    f636:	01 90       	ld	r0, Z+
    f638:	f0 81       	ld	r31, Z
    f63a:	e0 2d       	mov	r30, r0
    f63c:	86 81       	ldd	r24, Z+6	; 0x06
    f63e:	97 81       	ldd	r25, Z+7	; 0x07
    f640:	fc 01       	movw	r30, r24
    f642:	19 95       	eicall
    f644:	80 93 d2 2d 	sts	0x2DD2, r24	; 0x802dd2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    f648:	61 e0       	ldi	r22, 0x01	; 1
    f64a:	70 e0       	ldi	r23, 0x00	; 0
    f64c:	82 ed       	ldi	r24, 0xD2	; 210
    f64e:	9d e2       	ldi	r25, 0x2D	; 45
    f650:	0e 94 b8 59 	call	0xb370	; 0xb370 <udd_set_setup_payload>
    f654:	a8 c1       	rjmp	.+848    	; 0xf9a6 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    f656:	82 30       	cpi	r24, 0x02	; 2
    f658:	09 f0       	breq	.+2      	; 0xf65c <udc_process_setup+0x212>
    f65a:	16 c1       	rjmp	.+556    	; 0xf888 <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    f65c:	80 91 e6 2d 	lds	r24, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f660:	81 11       	cpse	r24, r1
    f662:	0b c1       	rjmp	.+534    	; 0xf87a <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    f664:	22 30       	cpi	r18, 0x02	; 2
    f666:	31 05       	cpc	r19, r1
    f668:	09 f0       	breq	.+2      	; 0xf66c <udc_process_setup+0x222>
    f66a:	43 c1       	rjmp	.+646    	; 0xf8f2 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    f66c:	80 91 e9 2d 	lds	r24, 0x2DE9	; 0x802de9 <udd_g_ctrlreq+0x4>
    f670:	0e 94 47 5a 	call	0xb48e	; 0xb48e <udd_ep_is_halted>
    f674:	90 e0       	ldi	r25, 0x00	; 0
    f676:	80 93 ca 2d 	sts	0x2DCA, r24	; 0x802dca <udc_ep_status.4757>
    f67a:	90 93 cb 2d 	sts	0x2DCB, r25	; 0x802dcb <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    f67e:	62 e0       	ldi	r22, 0x02	; 2
    f680:	70 e0       	ldi	r23, 0x00	; 0
    f682:	8a ec       	ldi	r24, 0xCA	; 202
    f684:	9d e2       	ldi	r25, 0x2D	; 45
    f686:	0e 94 b8 59 	call	0xb370	; 0xb370 <udd_set_setup_payload>
    f68a:	8d c1       	rjmp	.+794    	; 0xf9a6 <udc_process_setup+0x55c>
    f68c:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    f68e:	09 f0       	breq	.+2      	; 0xf692 <udc_process_setup+0x248>
    f690:	a0 c0       	rjmp	.+320    	; 0xf7d2 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    f692:	90 91 e6 2d 	lds	r25, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f696:	93 30       	cpi	r25, 0x03	; 3
    f698:	91 f1       	breq	.+100    	; 0xf6fe <udc_process_setup+0x2b4>
    f69a:	18 f4       	brcc	.+6      	; 0xf6a2 <udc_process_setup+0x258>
    f69c:	91 30       	cpi	r25, 0x01	; 1
    f69e:	a9 f0       	breq	.+42     	; 0xf6ca <udc_process_setup+0x280>
    f6a0:	98 c0       	rjmp	.+304    	; 0xf7d2 <udc_process_setup+0x388>
    f6a2:	95 30       	cpi	r25, 0x05	; 5
    f6a4:	21 f0       	breq	.+8      	; 0xf6ae <udc_process_setup+0x264>
    f6a6:	99 30       	cpi	r25, 0x09	; 9
    f6a8:	09 f4       	brne	.+2      	; 0xf6ac <udc_process_setup+0x262>
    f6aa:	43 c0       	rjmp	.+134    	; 0xf732 <udc_process_setup+0x2e8>
    f6ac:	92 c0       	rjmp	.+292    	; 0xf7d2 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    f6ae:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f6b2:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f6b6:	89 2b       	or	r24, r25
    f6b8:	09 f0       	breq	.+2      	; 0xf6bc <udc_process_setup+0x272>
    f6ba:	1b c1       	rjmp	.+566    	; 0xf8f2 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    f6bc:	8f e0       	ldi	r24, 0x0F	; 15
    f6be:	99 e7       	ldi	r25, 0x79	; 121
    f6c0:	80 93 f1 2d 	sts	0x2DF1, r24	; 0x802df1 <udd_g_ctrlreq+0xc>
    f6c4:	90 93 f2 2d 	sts	0x2DF2, r25	; 0x802df2 <udd_g_ctrlreq+0xd>
    f6c8:	6e c1       	rjmp	.+732    	; 0xf9a6 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    f6ca:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f6ce:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f6d2:	89 2b       	or	r24, r25
    f6d4:	09 f0       	breq	.+2      	; 0xf6d8 <udc_process_setup+0x28e>
    f6d6:	0d c1       	rjmp	.+538    	; 0xf8f2 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    f6d8:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f6dc:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f6e0:	01 97       	sbiw	r24, 0x01	; 1
    f6e2:	09 f0       	breq	.+2      	; 0xf6e6 <udc_process_setup+0x29c>
    f6e4:	06 c1       	rjmp	.+524    	; 0xf8f2 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    f6e6:	80 91 d4 2d 	lds	r24, 0x2DD4	; 0x802dd4 <udc_device_status>
    f6ea:	90 91 d5 2d 	lds	r25, 0x2DD5	; 0x802dd5 <udc_device_status+0x1>
    f6ee:	8d 7f       	andi	r24, 0xFD	; 253
    f6f0:	80 93 d4 2d 	sts	0x2DD4, r24	; 0x802dd4 <udc_device_status>
    f6f4:	90 93 d5 2d 	sts	0x2DD5, r25	; 0x802dd5 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    f6f8:	0e 94 ad 21 	call	0x435a	; 0x435a <usb_callback_remotewakeup_disable>
    f6fc:	54 c1       	rjmp	.+680    	; 0xf9a6 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    f6fe:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f702:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f706:	89 2b       	or	r24, r25
    f708:	09 f0       	breq	.+2      	; 0xf70c <udc_process_setup+0x2c2>
    f70a:	f3 c0       	rjmp	.+486    	; 0xf8f2 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    f70c:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f710:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f714:	01 97       	sbiw	r24, 0x01	; 1
    f716:	09 f0       	breq	.+2      	; 0xf71a <udc_process_setup+0x2d0>
    f718:	b2 c0       	rjmp	.+356    	; 0xf87e <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    f71a:	80 91 d4 2d 	lds	r24, 0x2DD4	; 0x802dd4 <udc_device_status>
    f71e:	90 91 d5 2d 	lds	r25, 0x2DD5	; 0x802dd5 <udc_device_status+0x1>
    f722:	82 60       	ori	r24, 0x02	; 2
    f724:	80 93 d4 2d 	sts	0x2DD4, r24	; 0x802dd4 <udc_device_status>
    f728:	90 93 d5 2d 	sts	0x2DD5, r25	; 0x802dd5 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    f72c:	0e 94 ac 21 	call	0x4358	; 0x4358 <usb_callback_remotewakeup_enable>
    f730:	3a c1       	rjmp	.+628    	; 0xf9a6 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    f732:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f736:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f73a:	89 2b       	or	r24, r25
    f73c:	09 f0       	breq	.+2      	; 0xf740 <udc_process_setup+0x2f6>
    f73e:	d9 c0       	rjmp	.+434    	; 0xf8f2 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    f740:	0e 94 ad 59 	call	0xb35a	; 0xb35a <udd_getaddress>
    f744:	88 23       	and	r24, r24
    f746:	09 f4       	brne	.+2      	; 0xf74a <udc_process_setup+0x300>
    f748:	9f c0       	rjmp	.+318    	; 0xf888 <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    f74a:	20 91 e7 2d 	lds	r18, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f74e:	30 91 e8 2d 	lds	r19, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f752:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    f754:	e0 91 5b 20 	lds	r30, 0x205B	; 0x80205b <udc_config>
    f758:	f0 91 5c 20 	lds	r31, 0x205C	; 0x80205c <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    f75c:	81 89       	ldd	r24, Z+17	; 0x11
    f75e:	90 e0       	ldi	r25, 0x00	; 0
    f760:	82 17       	cp	r24, r18
    f762:	93 07       	cpc	r25, r19
    f764:	08 f4       	brcc	.+2      	; 0xf768 <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    f766:	90 c0       	rjmp	.+288    	; 0xf888 <udc_process_setup+0x43e>
    f768:	12 de       	rcall	.-988    	; 0xf38e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    f76a:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f76e:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f772:	80 93 d0 2d 	sts	0x2DD0, r24	; 0x802dd0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    f776:	88 23       	and	r24, r24
    f778:	09 f4       	brne	.+2      	; 0xf77c <udc_process_setup+0x332>
    f77a:	15 c1       	rjmp	.+554    	; 0xf9a6 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    f77c:	99 27       	eor	r25, r25
    f77e:	81 50       	subi	r24, 0x01	; 1
    f780:	90 4c       	sbci	r25, 0xC0	; 192
    f782:	88 0f       	add	r24, r24
    f784:	99 1f       	adc	r25, r25
    f786:	88 0f       	add	r24, r24
    f788:	99 1f       	adc	r25, r25
    f78a:	e0 91 5d 20 	lds	r30, 0x205D	; 0x80205d <udc_config+0x2>
    f78e:	f0 91 5e 20 	lds	r31, 0x205E	; 0x80205e <udc_config+0x3>
    f792:	e8 0f       	add	r30, r24
    f794:	f9 1f       	adc	r31, r25
    f796:	e0 93 ce 2d 	sts	0x2DCE, r30	; 0x802dce <udc_ptr_conf>
    f79a:	f0 93 cf 2d 	sts	0x2DCF, r31	; 0x802dcf <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f79e:	01 90       	ld	r0, Z+
    f7a0:	f0 81       	ld	r31, Z
    f7a2:	e0 2d       	mov	r30, r0
    f7a4:	84 81       	ldd	r24, Z+4	; 0x04
    f7a6:	88 23       	and	r24, r24
    f7a8:	09 f4       	brne	.+2      	; 0xf7ac <udc_process_setup+0x362>
    f7aa:	fd c0       	rjmp	.+506    	; 0xf9a6 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    f7ac:	c0 e0       	ldi	r28, 0x00	; 0
    f7ae:	60 e0       	ldi	r22, 0x00	; 0
    f7b0:	8c 2f       	mov	r24, r28
    f7b2:	b7 dd       	rcall	.-1170   	; 0xf322 <udc_iface_enable>
    f7b4:	88 23       	and	r24, r24
    f7b6:	09 f4       	brne	.+2      	; 0xf7ba <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    f7b8:	67 c0       	rjmp	.+206    	; 0xf888 <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f7ba:	cf 5f       	subi	r28, 0xFF	; 255
    f7bc:	e0 91 ce 2d 	lds	r30, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f7c0:	f0 91 cf 2d 	lds	r31, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f7c4:	01 90       	ld	r0, Z+
    f7c6:	f0 81       	ld	r31, Z
    f7c8:	e0 2d       	mov	r30, r0
    f7ca:	84 81       	ldd	r24, Z+4	; 0x04
    f7cc:	c8 17       	cp	r28, r24
    f7ce:	78 f3       	brcs	.-34     	; 0xf7ae <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    f7d0:	ea c0       	rjmp	.+468    	; 0xf9a6 <udc_process_setup+0x55c>
    f7d2:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    f7d4:	e9 f4       	brne	.+58     	; 0xf810 <udc_process_setup+0x3c6>
    f7d6:	90 91 e6 2d 	lds	r25, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f7da:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    f7dc:	c9 f4       	brne	.+50     	; 0xf810 <udc_process_setup+0x3c6>
    f7de:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f7e2:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f7e6:	89 2b       	or	r24, r25
    f7e8:	09 f0       	breq	.+2      	; 0xf7ec <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    f7ea:	53 c0       	rjmp	.+166    	; 0xf892 <udc_process_setup+0x448>
    f7ec:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f7f0:	88 23       	and	r24, r24
    f7f2:	09 f4       	brne	.+2      	; 0xf7f6 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    f7f4:	4e c0       	rjmp	.+156    	; 0xf892 <udc_process_setup+0x448>
    f7f6:	e5 ee       	ldi	r30, 0xE5	; 229
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    f7f8:	fd e2       	ldi	r31, 0x2D	; 45

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    f7fa:	c4 81       	ldd	r28, Z+4	; 0x04
    f7fc:	d2 81       	ldd	r29, Z+2	; 0x02
    f7fe:	8c 2f       	mov	r24, r28
    f800:	4e dd       	rcall	.-1380   	; 0xf29e <udc_iface_disable>
    f802:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    f804:	09 f4       	brne	.+2      	; 0xf808 <udc_process_setup+0x3be>
    f806:	40 c0       	rjmp	.+128    	; 0xf888 <udc_process_setup+0x43e>
    f808:	6d 2f       	mov	r22, r29
    f80a:	8c 2f       	mov	r24, r28
    f80c:	8a dd       	rcall	.-1260   	; 0xf322 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    f80e:	3a c0       	rjmp	.+116    	; 0xf884 <udc_process_setup+0x43a>
    f810:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    f812:	d1 f5       	brne	.+116    	; 0xf888 <udc_process_setup+0x43e>
    f814:	80 91 e6 2d 	lds	r24, 0x2DE6	; 0x802de6 <udd_g_ctrlreq+0x1>
    f818:	81 30       	cpi	r24, 0x01	; 1
    f81a:	19 f0       	breq	.+6      	; 0xf822 <udc_process_setup+0x3d8>
    f81c:	83 30       	cpi	r24, 0x03	; 3
    f81e:	a1 f0       	breq	.+40     	; 0xf848 <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    f820:	30 c0       	rjmp	.+96     	; 0xf882 <udc_process_setup+0x438>
    f822:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f826:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f82a:	89 2b       	or	r24, r25
    f82c:	09 f0       	breq	.+2      	; 0xf830 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    f82e:	61 c0       	rjmp	.+194    	; 0xf8f2 <udc_process_setup+0x4a8>
    f830:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f834:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f838:	89 2b       	or	r24, r25
    f83a:	09 f0       	breq	.+2      	; 0xf83e <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    f83c:	5a c0       	rjmp	.+180    	; 0xf8f2 <udc_process_setup+0x4a8>
    f83e:	80 91 e9 2d 	lds	r24, 0x2DE9	; 0x802de9 <udd_g_ctrlreq+0x4>
    f842:	0e 94 62 5a 	call	0xb4c4	; 0xb4c4 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    f846:	1e c0       	rjmp	.+60     	; 0xf884 <udc_process_setup+0x43a>
    f848:	80 91 eb 2d 	lds	r24, 0x2DEB	; 0x802deb <udd_g_ctrlreq+0x6>
    f84c:	90 91 ec 2d 	lds	r25, 0x2DEC	; 0x802dec <udd_g_ctrlreq+0x7>
    f850:	89 2b       	or	r24, r25
    f852:	09 f0       	breq	.+2      	; 0xf856 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    f854:	4e c0       	rjmp	.+156    	; 0xf8f2 <udc_process_setup+0x4a8>
    f856:	80 91 e7 2d 	lds	r24, 0x2DE7	; 0x802de7 <udd_g_ctrlreq+0x2>
    f85a:	90 91 e8 2d 	lds	r25, 0x2DE8	; 0x802de8 <udd_g_ctrlreq+0x3>
    f85e:	89 2b       	or	r24, r25
    f860:	09 f0       	breq	.+2      	; 0xf864 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    f862:	47 c0       	rjmp	.+142    	; 0xf8f2 <udc_process_setup+0x4a8>
    f864:	c5 ee       	ldi	r28, 0xE5	; 229
    f866:	dd e2       	ldi	r29, 0x2D	; 45
    f868:	8c 81       	ldd	r24, Y+4	; 0x04
    f86a:	0e 94 64 5b 	call	0xb6c8	; 0xb6c8 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    f86e:	8c 81       	ldd	r24, Y+4	; 0x04
    f870:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    f874:	07 c0       	rjmp	.+14     	; 0xf884 <udc_process_setup+0x43a>
    f876:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    f878:	05 c0       	rjmp	.+10     	; 0xf884 <udc_process_setup+0x43a>
    f87a:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    f87c:	03 c0       	rjmp	.+6      	; 0xf884 <udc_process_setup+0x43a>
    f87e:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    f880:	01 c0       	rjmp	.+2      	; 0xf884 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    f882:	80 e0       	ldi	r24, 0x00	; 0
    f884:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    f886:	90 c0       	rjmp	.+288    	; 0xf9a8 <udc_process_setup+0x55e>
    f888:	80 91 e5 2d 	lds	r24, 0x2DE5	; 0x802de5 <udd_g_ctrlreq>
    f88c:	8f 71       	andi	r24, 0x1F	; 31
    f88e:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    f890:	81 f5       	brne	.+96     	; 0xf8f2 <udc_process_setup+0x4a8>
    f892:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f896:	88 23       	and	r24, r24
    f898:	09 f4       	brne	.+2      	; 0xf89c <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    f89a:	71 c0       	rjmp	.+226    	; 0xf97e <udc_process_setup+0x534>
    f89c:	00 91 e9 2d 	lds	r16, 0x2DE9	; 0x802de9 <udd_g_ctrlreq+0x4>
    f8a0:	10 91 ea 2d 	lds	r17, 0x2DEA	; 0x802dea <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    f8a4:	c0 91 ce 2d 	lds	r28, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f8a8:	d0 91 cf 2d 	lds	r29, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f8ac:	e8 81       	ld	r30, Y
    f8ae:	f9 81       	ldd	r31, Y+1	; 0x01
    f8b0:	84 81       	ldd	r24, Z+4	; 0x04
    f8b2:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    f8b4:	08 f0       	brcs	.+2      	; 0xf8b8 <udc_process_setup+0x46e>
    f8b6:	65 c0       	rjmp	.+202    	; 0xf982 <udc_process_setup+0x538>
    f8b8:	60 e0       	ldi	r22, 0x00	; 0
    f8ba:	80 2f       	mov	r24, r16
    f8bc:	b6 dc       	rcall	.-1684   	; 0xf22a <udc_update_iface_desc>
    f8be:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    f8c0:	c1 f0       	breq	.+48     	; 0xf8f2 <udc_process_setup+0x4a8>
    f8c2:	f8 01       	movw	r30, r16
    f8c4:	ff 27       	eor	r31, r31
    f8c6:	cf 01       	movw	r24, r30
    f8c8:	88 0f       	add	r24, r24
    f8ca:	99 1f       	adc	r25, r25
    f8cc:	ea 81       	ldd	r30, Y+2	; 0x02
    f8ce:	fb 81       	ldd	r31, Y+3	; 0x03
    f8d0:	e8 0f       	add	r30, r24
    f8d2:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    f8d4:	c0 81       	ld	r28, Z
    f8d6:	d1 81       	ldd	r29, Z+1	; 0x01
    f8d8:	ee 81       	ldd	r30, Y+6	; 0x06
    f8da:	ff 81       	ldd	r31, Y+7	; 0x07
    f8dc:	19 95       	eicall
    f8de:	68 2f       	mov	r22, r24
    f8e0:	80 2f       	mov	r24, r16
    f8e2:	a3 dc       	rcall	.-1722   	; 0xf22a <udc_update_iface_desc>
    f8e4:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    f8e6:	29 f0       	breq	.+10     	; 0xf8f2 <udc_process_setup+0x4a8>
    f8e8:	ec 81       	ldd	r30, Y+4	; 0x04
    f8ea:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    f8ec:	19 95       	eicall
    f8ee:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    f8f0:	5b c0       	rjmp	.+182    	; 0xf9a8 <udc_process_setup+0x55e>
    f8f2:	80 91 e5 2d 	lds	r24, 0x2DE5	; 0x802de5 <udd_g_ctrlreq>
    f8f6:	8f 71       	andi	r24, 0x1F	; 31
    f8f8:	82 30       	cpi	r24, 0x02	; 2
    f8fa:	09 f0       	breq	.+2      	; 0xf8fe <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    f8fc:	44 c0       	rjmp	.+136    	; 0xf986 <udc_process_setup+0x53c>
    f8fe:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <udc_num_configuration>
    f902:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f904:	b1 f1       	breq	.+108    	; 0xf972 <udc_process_setup+0x528>
    f906:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f90a:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f90e:	ed 91       	ld	r30, X+
    f910:	fc 91       	ld	r31, X
    f912:	11 97       	sbiw	r26, 0x01	; 1
    f914:	84 81       	ldd	r24, Z+4	; 0x04
    f916:	88 23       	and	r24, r24
    f918:	71 f1       	breq	.+92     	; 0xf976 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    f91a:	c0 e0       	ldi	r28, 0x00	; 0
    f91c:	ec 2f       	mov	r30, r28
    f91e:	f0 e0       	ldi	r31, 0x00	; 0
    f920:	ee 0f       	add	r30, r30
    f922:	ff 1f       	adc	r31, r31
    f924:	12 96       	adiw	r26, 0x02	; 2
    f926:	8d 91       	ld	r24, X+
    f928:	9c 91       	ld	r25, X
    f92a:	13 97       	sbiw	r26, 0x03	; 3
    f92c:	e8 0f       	add	r30, r24
    f92e:	f9 1f       	adc	r31, r25
    f930:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    f932:	11 81       	ldd	r17, Z+1	; 0x01
    f934:	d8 01       	movw	r26, r16
    f936:	16 96       	adiw	r26, 0x06	; 6
    f938:	ed 91       	ld	r30, X+
    f93a:	fc 91       	ld	r31, X
    f93c:	17 97       	sbiw	r26, 0x07	; 7
    f93e:	19 95       	eicall
    f940:	68 2f       	mov	r22, r24
    f942:	8c 2f       	mov	r24, r28
    f944:	72 dc       	rcall	.-1820   	; 0xf22a <udc_update_iface_desc>
    f946:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    f948:	79 f1       	breq	.+94     	; 0xf9a8 <udc_process_setup+0x55e>
    f94a:	d8 01       	movw	r26, r16
    f94c:	14 96       	adiw	r26, 0x04	; 4
    f94e:	ed 91       	ld	r30, X+
    f950:	fc 91       	ld	r31, X
    f952:	15 97       	sbiw	r26, 0x05	; 5
    f954:	19 95       	eicall
    f956:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    f958:	27 c0       	rjmp	.+78     	; 0xf9a8 <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f95a:	cf 5f       	subi	r28, 0xFF	; 255
    f95c:	a0 91 ce 2d 	lds	r26, 0x2DCE	; 0x802dce <udc_ptr_conf>
    f960:	b0 91 cf 2d 	lds	r27, 0x2DCF	; 0x802dcf <udc_ptr_conf+0x1>
    f964:	ed 91       	ld	r30, X+
    f966:	fc 91       	ld	r31, X
    f968:	11 97       	sbiw	r26, 0x01	; 1
    f96a:	94 81       	ldd	r25, Z+4	; 0x04
    f96c:	c9 17       	cp	r28, r25
    f96e:	b0 f2       	brcs	.-84     	; 0xf91c <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    f970:	1b c0       	rjmp	.+54     	; 0xf9a8 <udc_process_setup+0x55e>
    f972:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    f974:	19 c0       	rjmp	.+50     	; 0xf9a8 <udc_process_setup+0x55e>
    f976:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    f978:	17 c0       	rjmp	.+46     	; 0xf9a8 <udc_process_setup+0x55e>
    f97a:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    f97c:	15 c0       	rjmp	.+42     	; 0xf9a8 <udc_process_setup+0x55e>
    f97e:	80 e0       	ldi	r24, 0x00	; 0
    f980:	13 c0       	rjmp	.+38     	; 0xf9a8 <udc_process_setup+0x55e>
    f982:	80 e0       	ldi	r24, 0x00	; 0
    f984:	11 c0       	rjmp	.+34     	; 0xf9a8 <udc_process_setup+0x55e>
    f986:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    f988:	0f c0       	rjmp	.+30     	; 0xf9a8 <udc_process_setup+0x55e>
    f98a:	98 2f       	mov	r25, r24
    f98c:	90 76       	andi	r25, 0x60	; 96
    f98e:	09 f0       	breq	.+2      	; 0xf992 <udc_process_setup+0x548>
    f990:	7b cf       	rjmp	.-266    	; 0xf888 <udc_process_setup+0x43e>
    f992:	74 cd       	rjmp	.-1304   	; 0xf47c <udc_process_setup+0x32>
    f994:	98 2f       	mov	r25, r24
    f996:	90 76       	andi	r25, 0x60	; 96
    f998:	09 f0       	breq	.+2      	; 0xf99c <udc_process_setup+0x552>
    f99a:	76 cf       	rjmp	.-276    	; 0xf888 <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    f99c:	77 ce       	rjmp	.-786    	; 0xf68c <udc_process_setup+0x242>
		str = udc_string_product_name;
    f99e:	3c e0       	ldi	r19, 0x0C	; 12
    f9a0:	e2 ee       	ldi	r30, 0xE2	; 226
    f9a2:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    f9a4:	eb cd       	rjmp	.-1066   	; 0xf57c <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    f9a6:	81 e0       	ldi	r24, 0x01	; 1
    f9a8:	df 91       	pop	r29
    f9aa:	cf 91       	pop	r28
    f9ac:	1f 91       	pop	r17
    f9ae:	0f 91       	pop	r16
    f9b0:	08 95       	ret

0000f9b2 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    f9b2:	cf 93       	push	r28
    f9b4:	df 93       	push	r29
    f9b6:	1f 92       	push	r1
    f9b8:	cd b7       	in	r28, 0x3d	; 61
    f9ba:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    f9bc:	80 91 85 2e 	lds	r24, 0x2E85	; 0x802e85 <stdio_base>
    f9c0:	90 91 86 2e 	lds	r25, 0x2E86	; 0x802e86 <stdio_base+0x1>
    f9c4:	e0 91 81 2e 	lds	r30, 0x2E81	; 0x802e81 <ptr_get>
    f9c8:	f0 91 82 2e 	lds	r31, 0x2E82	; 0x802e82 <ptr_get+0x1>
    f9cc:	be 01       	movw	r22, r28
    f9ce:	6f 5f       	subi	r22, 0xFF	; 255
    f9d0:	7f 4f       	sbci	r23, 0xFF	; 255
    f9d2:	19 95       	eicall
	return c;
    f9d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    f9d6:	08 2e       	mov	r0, r24
    f9d8:	00 0c       	add	r0, r0
    f9da:	99 0b       	sbc	r25, r25
    f9dc:	0f 90       	pop	r0
    f9de:	df 91       	pop	r29
    f9e0:	cf 91       	pop	r28
    f9e2:	08 95       	ret

0000f9e4 <stdio_usb_putchar>:
int stdio_usb_putchar (volatile void * unused, char data)
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    f9e4:	80 91 d6 2d 	lds	r24, 0x2DD6	; 0x802dd6 <stdio_usb_interface_enable>
    f9e8:	88 23       	and	r24, r24
    f9ea:	81 f0       	breq	.+32     	; 0xfa0c <stdio_usb_putchar+0x28>
    f9ec:	86 2f       	mov	r24, r22
		return 0;  // -1
	}

	return udi_cdc_putc(data) ? 0 : -1;
    f9ee:	08 2e       	mov	r0, r24
    f9f0:	00 0c       	add	r0, r0
    f9f2:	99 0b       	sbc	r25, r25
    f9f4:	db db       	rcall	.-2122   	; 0xf1ac <udi_cdc_putc>
    f9f6:	21 e0       	ldi	r18, 0x01	; 1
    f9f8:	30 e0       	ldi	r19, 0x00	; 0
    f9fa:	89 2b       	or	r24, r25
    f9fc:	11 f0       	breq	.+4      	; 0xfa02 <stdio_usb_putchar+0x1e>
    f9fe:	20 e0       	ldi	r18, 0x00	; 0
    fa00:	30 e0       	ldi	r19, 0x00	; 0
    fa02:	88 27       	eor	r24, r24
    fa04:	99 27       	eor	r25, r25
    fa06:	82 1b       	sub	r24, r18
    fa08:	93 0b       	sbc	r25, r19
    fa0a:	08 95       	ret
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
		return 0;  // -1
    fa0c:	80 e0       	ldi	r24, 0x00	; 0
    fa0e:	90 e0       	ldi	r25, 0x00	; 0
	}

	return udi_cdc_putc(data) ? 0 : -1;
}
    fa10:	08 95       	ret

0000fa12 <stdio_usb_getchar>:

void stdio_usb_getchar (void volatile * unused, char *data)
{
    fa12:	cf 93       	push	r28
    fa14:	df 93       	push	r29
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    fa16:	80 91 d6 2d 	lds	r24, 0x2DD6	; 0x802dd6 <stdio_usb_interface_enable>
    fa1a:	81 11       	cpse	r24, r1
    fa1c:	03 c0       	rjmp	.+6      	; 0xfa24 <stdio_usb_getchar+0x12>
		*data = 0;  // -1
    fa1e:	fb 01       	movw	r30, r22
    fa20:	10 82       	st	Z, r1
		return;
    fa22:	03 c0       	rjmp	.+6      	; 0xfa2a <stdio_usb_getchar+0x18>
	}

	*data = (char)udi_cdc_getc();
    fa24:	eb 01       	movw	r28, r22
    fa26:	cf da       	rcall	.-2658   	; 0xefc6 <udi_cdc_getc>
}
    fa28:	88 83       	st	Y, r24
    fa2a:	df 91       	pop	r29
    fa2c:	cf 91       	pop	r28
    fa2e:	08 95       	ret

0000fa30 <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
    fa30:	81 e0       	ldi	r24, 0x01	; 1
    fa32:	80 93 d6 2d 	sts	0x2DD6, r24	; 0x802dd6 <stdio_usb_interface_enable>
	return true;
}
    fa36:	08 95       	ret

0000fa38 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    fa38:	10 92 d6 2d 	sts	0x2DD6, r1	; 0x802dd6 <stdio_usb_interface_enable>
    fa3c:	08 95       	ret

0000fa3e <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    fa3e:	10 92 85 2e 	sts	0x2E85, r1	; 0x802e85 <stdio_base>
    fa42:	10 92 86 2e 	sts	0x2E86, r1	; 0x802e86 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    fa46:	82 ef       	ldi	r24, 0xF2	; 242
    fa48:	9c e7       	ldi	r25, 0x7C	; 124
    fa4a:	80 93 83 2e 	sts	0x2E83, r24	; 0x802e83 <ptr_put>
    fa4e:	90 93 84 2e 	sts	0x2E84, r25	; 0x802e84 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    fa52:	89 e0       	ldi	r24, 0x09	; 9
    fa54:	9d e7       	ldi	r25, 0x7D	; 125
    fa56:	80 93 81 2e 	sts	0x2E81, r24	; 0x802e81 <ptr_get>
    fa5a:	90 93 82 2e 	sts	0x2E82, r25	; 0x802e82 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    fa5e:	94 dc       	rcall	.-1752   	; 0xf388 <udc_start>
    fa60:	69 ed       	ldi	r22, 0xD9	; 217
    fa62:	7c e7       	ldi	r23, 0x7C	; 124
    fa64:	87 e3       	ldi	r24, 0x37	; 55
    fa66:	9d e7       	ldi	r25, 0x7D	; 125
    fa68:	0c 94 04 8b 	jmp	0x11608	; 0x11608 <fdevopen>
    fa6c:	08 95       	ret

0000fa6e <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    fa6e:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    fa70:	80 91 85 2e 	lds	r24, 0x2E85	; 0x802e85 <stdio_base>
    fa74:	90 91 86 2e 	lds	r25, 0x2E86	; 0x802e86 <stdio_base+0x1>
    fa78:	e0 91 83 2e 	lds	r30, 0x2E83	; 0x802e83 <ptr_put>
    fa7c:	f0 91 84 2e 	lds	r31, 0x2E84	; 0x802e84 <ptr_put+0x1>
    fa80:	19 95       	eicall
    fa82:	99 23       	and	r25, r25
    fa84:	1c f0       	brlt	.+6      	; 0xfa8c <_write+0x1e>
		return -1;
	}
	return 1;
    fa86:	81 e0       	ldi	r24, 0x01	; 1
    fa88:	90 e0       	ldi	r25, 0x00	; 0
    fa8a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    fa8c:	8f ef       	ldi	r24, 0xFF	; 255
    fa8e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    fa90:	08 95       	ret

0000fa92 <nvm_eeprom_read_buffer>:
    fa92:	cf 93       	push	r28
    fa94:	df 93       	push	r29
    fa96:	9c 01       	movw	r18, r24
    fa98:	db 01       	movw	r26, r22
    fa9a:	e0 ec       	ldi	r30, 0xC0	; 192
    fa9c:	f1 e0       	ldi	r31, 0x01	; 1
    fa9e:	97 85       	ldd	r25, Z+15	; 0x0f
    faa0:	99 23       	and	r25, r25
    faa2:	ec f3       	brlt	.-6      	; 0xfa9e <nvm_eeprom_read_buffer+0xc>
    faa4:	cc ec       	ldi	r28, 0xCC	; 204
    faa6:	d1 e0       	ldi	r29, 0x01	; 1
    faa8:	98 81       	ld	r25, Y
    faaa:	98 60       	ori	r25, 0x08	; 8
    faac:	98 83       	st	Y, r25
    faae:	b9 01       	movw	r22, r18
    fab0:	70 5f       	subi	r23, 0xF0	; 240
    fab2:	cd 01       	movw	r24, r26
    fab4:	0e 94 c8 8a 	call	0x11590	; 0x11590 <memcpy>
    fab8:	88 81       	ld	r24, Y
    faba:	87 7f       	andi	r24, 0xF7	; 247
    fabc:	88 83       	st	Y, r24
    fabe:	df 91       	pop	r29
    fac0:	cf 91       	pop	r28
    fac2:	08 95       	ret

0000fac4 <nvm_eeprom_flush_buffer>:
    fac4:	e0 ec       	ldi	r30, 0xC0	; 192
    fac6:	f1 e0       	ldi	r31, 0x01	; 1
    fac8:	87 85       	ldd	r24, Z+15	; 0x0f
    faca:	88 23       	and	r24, r24
    facc:	ec f3       	brlt	.-6      	; 0xfac8 <nvm_eeprom_flush_buffer+0x4>
    face:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    fad2:	81 ff       	sbrs	r24, 1
    fad4:	07 c0       	rjmp	.+14     	; 0xfae4 <nvm_eeprom_flush_buffer+0x20>
    fad6:	86 e3       	ldi	r24, 0x36	; 54
    fad8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    fadc:	61 e0       	ldi	r22, 0x01	; 1
    fade:	8b ec       	ldi	r24, 0xCB	; 203
    fae0:	91 e0       	ldi	r25, 0x01	; 1
    fae2:	56 c2       	rjmp	.+1196   	; 0xff90 <ccp_write_io>
    fae4:	08 95       	ret

0000fae6 <nvm_eeprom_load_byte_to_buffer>:
    fae6:	e0 ec       	ldi	r30, 0xC0	; 192
    fae8:	f1 e0       	ldi	r31, 0x01	; 1
    faea:	97 85       	ldd	r25, Z+15	; 0x0f
    faec:	99 23       	and	r25, r25
    faee:	ec f3       	brlt	.-6      	; 0xfaea <nvm_eeprom_load_byte_to_buffer+0x4>
    faf0:	ac ec       	ldi	r26, 0xCC	; 204
    faf2:	b1 e0       	ldi	r27, 0x01	; 1
    faf4:	9c 91       	ld	r25, X
    faf6:	98 60       	ori	r25, 0x08	; 8
    faf8:	9c 93       	st	X, r25
    fafa:	e8 2f       	mov	r30, r24
    fafc:	f0 e0       	ldi	r31, 0x00	; 0
    fafe:	f0 5f       	subi	r31, 0xF0	; 240
    fb00:	60 83       	st	Z, r22
    fb02:	8c 91       	ld	r24, X
    fb04:	87 7f       	andi	r24, 0xF7	; 247
    fb06:	8c 93       	st	X, r24
    fb08:	08 95       	ret

0000fb0a <nvm_eeprom_write_byte>:
    fb0a:	ff 92       	push	r15
    fb0c:	0f 93       	push	r16
    fb0e:	1f 93       	push	r17
    fb10:	cf 93       	push	r28
    fb12:	df 93       	push	r29
    fb14:	18 2f       	mov	r17, r24
    fb16:	f9 2e       	mov	r15, r25
    fb18:	c6 2f       	mov	r28, r22
    fb1a:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    fb1e:	d2 df       	rcall	.-92     	; 0xfac4 <nvm_eeprom_flush_buffer>
    fb20:	e0 ec       	ldi	r30, 0xC0	; 192
    fb22:	f1 e0       	ldi	r31, 0x01	; 1
    fb24:	87 85       	ldd	r24, Z+15	; 0x0f
    fb26:	88 23       	and	r24, r24
    fb28:	ec f3       	brlt	.-6      	; 0xfb24 <nvm_eeprom_write_byte+0x1a>
    fb2a:	6c 2f       	mov	r22, r28
    fb2c:	81 2f       	mov	r24, r17
    fb2e:	db df       	rcall	.-74     	; 0xfae6 <nvm_eeprom_load_byte_to_buffer>
    fb30:	c0 ec       	ldi	r28, 0xC0	; 192
    fb32:	d1 e0       	ldi	r29, 0x01	; 1
    fb34:	1a 82       	std	Y+2, r1	; 0x02
    fb36:	f9 82       	std	Y+1, r15	; 0x01
    fb38:	18 83       	st	Y, r17
    fb3a:	85 e3       	ldi	r24, 0x35	; 53
    fb3c:	8a 87       	std	Y+10, r24	; 0x0a
    fb3e:	61 e0       	ldi	r22, 0x01	; 1
    fb40:	8b ec       	ldi	r24, 0xCB	; 203
    fb42:	91 e0       	ldi	r25, 0x01	; 1
    fb44:	25 d2       	rcall	.+1098   	; 0xff90 <ccp_write_io>
    fb46:	0a 87       	std	Y+10, r16	; 0x0a
    fb48:	df 91       	pop	r29
    fb4a:	cf 91       	pop	r28
    fb4c:	1f 91       	pop	r17
    fb4e:	0f 91       	pop	r16
    fb50:	ff 90       	pop	r15
    fb52:	08 95       	ret

0000fb54 <nvm_eeprom_load_page_to_buffer>:
    fb54:	0f 93       	push	r16
    fb56:	1f 93       	push	r17
    fb58:	cf 93       	push	r28
    fb5a:	8c 01       	movw	r16, r24
    fb5c:	e0 ec       	ldi	r30, 0xC0	; 192
    fb5e:	f1 e0       	ldi	r31, 0x01	; 1
    fb60:	87 85       	ldd	r24, Z+15	; 0x0f
    fb62:	88 23       	and	r24, r24
    fb64:	ec f3       	brlt	.-6      	; 0xfb60 <nvm_eeprom_load_page_to_buffer+0xc>
    fb66:	c0 e0       	ldi	r28, 0x00	; 0
    fb68:	f8 01       	movw	r30, r16
    fb6a:	61 91       	ld	r22, Z+
    fb6c:	8f 01       	movw	r16, r30
    fb6e:	8c 2f       	mov	r24, r28
    fb70:	ba df       	rcall	.-140    	; 0xfae6 <nvm_eeprom_load_byte_to_buffer>
    fb72:	cf 5f       	subi	r28, 0xFF	; 255
    fb74:	c0 32       	cpi	r28, 0x20	; 32
    fb76:	c1 f7       	brne	.-16     	; 0xfb68 <nvm_eeprom_load_page_to_buffer+0x14>
    fb78:	cf 91       	pop	r28
    fb7a:	1f 91       	pop	r17
    fb7c:	0f 91       	pop	r16
    fb7e:	08 95       	ret

0000fb80 <nvm_eeprom_atomic_write_page>:
    fb80:	1f 93       	push	r17
    fb82:	cf 93       	push	r28
    fb84:	df 93       	push	r29
    fb86:	e0 ec       	ldi	r30, 0xC0	; 192
    fb88:	f1 e0       	ldi	r31, 0x01	; 1
    fb8a:	97 85       	ldd	r25, Z+15	; 0x0f
    fb8c:	99 23       	and	r25, r25
    fb8e:	ec f3       	brlt	.-6      	; 0xfb8a <nvm_eeprom_atomic_write_page+0xa>
    fb90:	20 e2       	ldi	r18, 0x20	; 32
    fb92:	82 9f       	mul	r24, r18
    fb94:	c0 01       	movw	r24, r0
    fb96:	11 24       	eor	r1, r1
    fb98:	c0 ec       	ldi	r28, 0xC0	; 192
    fb9a:	d1 e0       	ldi	r29, 0x01	; 1
    fb9c:	1a 82       	std	Y+2, r1	; 0x02
    fb9e:	99 83       	std	Y+1, r25	; 0x01
    fba0:	88 83       	st	Y, r24
    fba2:	1a 85       	ldd	r17, Y+10	; 0x0a
    fba4:	85 e3       	ldi	r24, 0x35	; 53
    fba6:	8a 87       	std	Y+10, r24	; 0x0a
    fba8:	61 e0       	ldi	r22, 0x01	; 1
    fbaa:	8b ec       	ldi	r24, 0xCB	; 203
    fbac:	91 e0       	ldi	r25, 0x01	; 1
    fbae:	f0 d1       	rcall	.+992    	; 0xff90 <ccp_write_io>
    fbb0:	1a 87       	std	Y+10, r17	; 0x0a
    fbb2:	df 91       	pop	r29
    fbb4:	cf 91       	pop	r28
    fbb6:	1f 91       	pop	r17
    fbb8:	08 95       	ret

0000fbba <nvm_eeprom_erase_and_write_buffer>:
    fbba:	cf 92       	push	r12
    fbbc:	df 92       	push	r13
    fbbe:	ef 92       	push	r14
    fbc0:	ff 92       	push	r15
    fbc2:	0f 93       	push	r16
    fbc4:	1f 93       	push	r17
    fbc6:	cf 93       	push	r28
    fbc8:	df 93       	push	r29
    fbca:	ec 01       	movw	r28, r24
    fbcc:	7b 01       	movw	r14, r22
    fbce:	8a 01       	movw	r16, r20
    fbd0:	45 2b       	or	r20, r21
    fbd2:	51 f1       	breq	.+84     	; 0xfc28 <nvm_eeprom_erase_and_write_buffer+0x6e>
    fbd4:	ce 01       	movw	r24, r28
    fbd6:	8f 71       	andi	r24, 0x1F	; 31
    fbd8:	99 27       	eor	r25, r25
    fbda:	89 2b       	or	r24, r25
    fbdc:	b1 f4       	brne	.+44     	; 0xfc0a <nvm_eeprom_erase_and_write_buffer+0x50>
    fbde:	00 32       	cpi	r16, 0x20	; 32
    fbe0:	11 05       	cpc	r17, r1
    fbe2:	98 f0       	brcs	.+38     	; 0xfc0a <nvm_eeprom_erase_and_write_buffer+0x50>
    fbe4:	c7 01       	movw	r24, r14
    fbe6:	b6 df       	rcall	.-148    	; 0xfb54 <nvm_eeprom_load_page_to_buffer>
    fbe8:	ce 01       	movw	r24, r28
    fbea:	96 95       	lsr	r25
    fbec:	87 95       	ror	r24
    fbee:	92 95       	swap	r25
    fbf0:	82 95       	swap	r24
    fbf2:	8f 70       	andi	r24, 0x0F	; 15
    fbf4:	89 27       	eor	r24, r25
    fbf6:	9f 70       	andi	r25, 0x0F	; 15
    fbf8:	89 27       	eor	r24, r25
    fbfa:	c2 df       	rcall	.-124    	; 0xfb80 <nvm_eeprom_atomic_write_page>
    fbfc:	a0 96       	adiw	r28, 0x20	; 32
    fbfe:	80 e2       	ldi	r24, 0x20	; 32
    fc00:	e8 0e       	add	r14, r24
    fc02:	f1 1c       	adc	r15, r1
    fc04:	00 52       	subi	r16, 0x20	; 32
    fc06:	11 09       	sbc	r17, r1
    fc08:	0c c0       	rjmp	.+24     	; 0xfc22 <nvm_eeprom_erase_and_write_buffer+0x68>
    fc0a:	6e 01       	movw	r12, r28
    fc0c:	ef ef       	ldi	r30, 0xFF	; 255
    fc0e:	ce 1a       	sub	r12, r30
    fc10:	de 0a       	sbc	r13, r30
    fc12:	f7 01       	movw	r30, r14
    fc14:	61 91       	ld	r22, Z+
    fc16:	7f 01       	movw	r14, r30
    fc18:	ce 01       	movw	r24, r28
    fc1a:	77 df       	rcall	.-274    	; 0xfb0a <nvm_eeprom_write_byte>
    fc1c:	01 50       	subi	r16, 0x01	; 1
    fc1e:	11 09       	sbc	r17, r1
    fc20:	e6 01       	movw	r28, r12
    fc22:	01 15       	cp	r16, r1
    fc24:	11 05       	cpc	r17, r1
    fc26:	b1 f6       	brne	.-84     	; 0xfbd4 <nvm_eeprom_erase_and_write_buffer+0x1a>
    fc28:	df 91       	pop	r29
    fc2a:	cf 91       	pop	r28
    fc2c:	1f 91       	pop	r17
    fc2e:	0f 91       	pop	r16
    fc30:	ff 90       	pop	r15
    fc32:	ef 90       	pop	r14
    fc34:	df 90       	pop	r13
    fc36:	cf 90       	pop	r12
    fc38:	08 95       	ret

0000fc3a <nvm_flash_read_buffer>:
    fc3a:	da 01       	movw	r26, r20
    fc3c:	a9 01       	movw	r20, r18
    fc3e:	e0 ec       	ldi	r30, 0xC0	; 192
    fc40:	f1 e0       	ldi	r31, 0x01	; 1
    fc42:	37 85       	ldd	r19, Z+15	; 0x0f
    fc44:	33 23       	and	r19, r19
    fc46:	ec f3       	brlt	.-6      	; 0xfc42 <nvm_flash_read_buffer+0x8>
    fc48:	41 15       	cp	r20, r1
    fc4a:	51 05       	cpc	r21, r1
    fc4c:	69 f0       	breq	.+26     	; 0xfc68 <nvm_flash_read_buffer+0x2e>
    fc4e:	4a 0f       	add	r20, r26
    fc50:	5b 1f       	adc	r21, r27
    fc52:	8b bf       	out	0x3b, r24	; 59
    fc54:	fb 01       	movw	r30, r22
    fc56:	37 91       	elpm	r19, Z+
    fc58:	3d 93       	st	X+, r19
    fc5a:	6f 5f       	subi	r22, 0xFF	; 255
    fc5c:	7f 4f       	sbci	r23, 0xFF	; 255
    fc5e:	8f 4f       	sbci	r24, 0xFF	; 255
    fc60:	9f 4f       	sbci	r25, 0xFF	; 255
    fc62:	a4 17       	cp	r26, r20
    fc64:	b5 07       	cpc	r27, r21
    fc66:	a9 f7       	brne	.-22     	; 0xfc52 <nvm_flash_read_buffer+0x18>
    fc68:	08 95       	ret

0000fc6a <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    fc6a:	ef 92       	push	r14
    fc6c:	ff 92       	push	r15
    fc6e:	0f 93       	push	r16
    fc70:	1f 93       	push	r17
    fc72:	cf 93       	push	r28
    fc74:	df 93       	push	r29
    fc76:	7a 01       	movw	r14, r20
    fc78:	89 01       	movw	r16, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    fc7a:	eb 01       	movw	r28, r22
    fc7c:	d1 70       	andi	r29, 0x01	; 1
	while ( len ) {
    fc7e:	23 2b       	or	r18, r19
    fc80:	51 f0       	breq	.+20     	; 0xfc96 <nvm_user_sig_read_buffer+0x2c>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    fc82:	be 01       	movw	r22, r28
    fc84:	81 e0       	ldi	r24, 0x01	; 1
    fc86:	7a d1       	rcall	.+756    	; 0xff7c <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    fc88:	f7 01       	movw	r30, r14
    fc8a:	81 93       	st	Z+, r24
    fc8c:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    fc8e:	21 96       	adiw	r28, 0x01	; 1
		len--;
    fc90:	01 50       	subi	r16, 0x01	; 1
    fc92:	11 09       	sbc	r17, r1
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
    fc94:	b1 f7       	brne	.-20     	; 0xfc82 <nvm_user_sig_read_buffer+0x18>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    fc96:	df 91       	pop	r29
    fc98:	cf 91       	pop	r28
    fc9a:	1f 91       	pop	r17
    fc9c:	0f 91       	pop	r16
    fc9e:	ff 90       	pop	r15
    fca0:	ef 90       	pop	r14
    fca2:	08 95       	ret

0000fca4 <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    fca4:	2f 92       	push	r2
    fca6:	3f 92       	push	r3
    fca8:	4f 92       	push	r4
    fcaa:	5f 92       	push	r5
    fcac:	6f 92       	push	r6
    fcae:	7f 92       	push	r7
    fcb0:	8f 92       	push	r8
    fcb2:	9f 92       	push	r9
    fcb4:	af 92       	push	r10
    fcb6:	bf 92       	push	r11
    fcb8:	cf 92       	push	r12
    fcba:	df 92       	push	r13
    fcbc:	ef 92       	push	r14
    fcbe:	ff 92       	push	r15
    fcc0:	0f 93       	push	r16
    fcc2:	1f 93       	push	r17
    fcc4:	cf 93       	push	r28
    fcc6:	df 93       	push	r29
    fcc8:	00 d0       	rcall	.+0      	; 0xfcca <nvm_user_sig_write_buffer+0x26>
    fcca:	1f 92       	push	r1
    fccc:	cd b7       	in	r28, 0x3d	; 61
    fcce:	de b7       	in	r29, 0x3e	; 62
    fcd0:	4b 83       	std	Y+3, r20	; 0x03
    fcd2:	5c 83       	std	Y+4, r21	; 0x04
    fcd4:	79 01       	movw	r14, r18
    fcd6:	30 2e       	mov	r3, r16
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    fcd8:	6b 01       	movw	r12, r22
	bool b_flag_erase = false;

	while ( len ) {
    fcda:	23 2b       	or	r18, r19
    fcdc:	09 f0       	breq	.+2      	; 0xfce0 <nvm_user_sig_write_buffer+0x3c>
    fcde:	4f c0       	rjmp	.+158    	; 0xfd7e <nvm_user_sig_write_buffer+0xda>
    fce0:	65 c0       	rjmp	.+202    	; 0xfdac <nvm_user_sig_write_buffer+0x108>
    fce2:	52 01       	movw	r10, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    fce4:	33 20       	and	r3, r3
    fce6:	79 f0       	breq	.+30     	; 0xfd06 <nvm_user_sig_write_buffer+0x62>
    fce8:	b2 01       	movw	r22, r4
    fcea:	81 e0       	ldi	r24, 0x01	; 1
    fcec:	47 d1       	rcall	.+654    	; 0xff7c <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    fcee:	89 83       	std	Y+1, r24	; 0x01
    fcf0:	b8 01       	movw	r22, r16
    fcf2:	81 e0       	ldi	r24, 0x01	; 1
    fcf4:	43 d1       	rcall	.+646    	; 0xff7c <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    fcf6:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    fcf8:	89 81       	ldd	r24, Y+1	; 0x01
    fcfa:	9a 81       	ldd	r25, Y+2	; 0x02
    fcfc:	01 96       	adiw	r24, 0x01	; 1
    fcfe:	29 f0       	breq	.+10     	; 0xfd0a <nvm_user_sig_write_buffer+0x66>
					b_flag_erase = true; // The page is not empty
    fd00:	22 24       	eor	r2, r2
    fd02:	23 94       	inc	r2
    fd04:	02 c0       	rjmp	.+4      	; 0xfd0a <nvm_user_sig_write_buffer+0x66>
				}
			}else{
				w_value = 0xFFFF;
    fd06:	89 82       	std	Y+1, r8	; 0x01
    fd08:	9a 82       	std	Y+2, r9	; 0x02
			}
			// Update flash buffer
			if (len) {
    fd0a:	e1 14       	cp	r14, r1
    fd0c:	f1 04       	cpc	r15, r1
    fd0e:	09 f1       	breq	.+66     	; 0xfd52 <nvm_user_sig_write_buffer+0xae>
				if (opt_address == page_pos) {
    fd10:	ac 14       	cp	r10, r12
    fd12:	bd 04       	cpc	r11, r13
    fd14:	79 f4       	brne	.+30     	; 0xfd34 <nvm_user_sig_write_buffer+0x90>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    fd16:	81 e0       	ldi	r24, 0x01	; 1
    fd18:	e8 1a       	sub	r14, r24
    fd1a:	f1 08       	sbc	r15, r1
					opt_address++;
    fd1c:	ef ef       	ldi	r30, 0xFF	; 255
    fd1e:	ce 1a       	sub	r12, r30
    fd20:	de 0a       	sbc	r13, r30
					LSB(w_value)=*(uint8_t*)buf;
    fd22:	eb 81       	ldd	r30, Y+3	; 0x03
    fd24:	fc 81       	ldd	r31, Y+4	; 0x04
    fd26:	81 91       	ld	r24, Z+
    fd28:	eb 83       	std	Y+3, r30	; 0x03
    fd2a:	fc 83       	std	Y+4, r31	; 0x04
    fd2c:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    fd2e:	e1 14       	cp	r14, r1
    fd30:	f1 04       	cpc	r15, r1
    fd32:	79 f0       	breq	.+30     	; 0xfd52 <nvm_user_sig_write_buffer+0xae>
				if (opt_address == (page_pos+1)) {
    fd34:	c0 16       	cp	r12, r16
    fd36:	d1 06       	cpc	r13, r17
    fd38:	61 f4       	brne	.+24     	; 0xfd52 <nvm_user_sig_write_buffer+0xae>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    fd3a:	f1 e0       	ldi	r31, 0x01	; 1
    fd3c:	ef 1a       	sub	r14, r31
    fd3e:	f1 08       	sbc	r15, r1
					opt_address++;
    fd40:	2f ef       	ldi	r18, 0xFF	; 255
    fd42:	c2 1a       	sub	r12, r18
    fd44:	d2 0a       	sbc	r13, r18
					MSB(w_value)=*(uint8_t*)buf;
    fd46:	eb 81       	ldd	r30, Y+3	; 0x03
    fd48:	fc 81       	ldd	r31, Y+4	; 0x04
    fd4a:	81 91       	ld	r24, Z+
    fd4c:	eb 83       	std	Y+3, r30	; 0x03
    fd4e:	fc 83       	std	Y+4, r31	; 0x04
    fd50:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
    fd52:	49 81       	ldd	r20, Y+1	; 0x01
    fd54:	5a 81       	ldd	r21, Y+2	; 0x02
    fd56:	c3 01       	movw	r24, r6
    fd58:	b2 01       	movw	r22, r4
    fd5a:	0e 94 fd 8e 	call	0x11dfa	; 0x11dfa <nvm_flash_load_word_to_buffer>
    fd5e:	f2 e0       	ldi	r31, 0x02	; 2
    fd60:	4f 0e       	add	r4, r31
    fd62:	51 1c       	adc	r5, r1
    fd64:	61 1c       	adc	r6, r1
    fd66:	71 1c       	adc	r7, r1
    fd68:	0e 5f       	subi	r16, 0xFE	; 254
    fd6a:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    fd6c:	01 30       	cpi	r16, 0x01	; 1
    fd6e:	22 e0       	ldi	r18, 0x02	; 2
    fd70:	12 07       	cpc	r17, r18
    fd72:	09 f0       	breq	.+2      	; 0xfd76 <nvm_user_sig_write_buffer+0xd2>
    fd74:	b6 cf       	rjmp	.-148    	; 0xfce2 <nvm_user_sig_write_buffer+0x3e>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
    fd76:	e1 14       	cp	r14, r1
    fd78:	f1 04       	cpc	r15, r1
    fd7a:	29 f4       	brne	.+10     	; 0xfd86 <nvm_user_sig_write_buffer+0xe2>
    fd7c:	0a c0       	rjmp	.+20     	; 0xfd92 <nvm_user_sig_write_buffer+0xee>
    fd7e:	21 2c       	mov	r2, r1
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    fd80:	88 24       	eor	r8, r8
    fd82:	8a 94       	dec	r8
    fd84:	98 2c       	mov	r9, r8
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    fd86:	01 e0       	ldi	r16, 0x01	; 1
    fd88:	10 e0       	ldi	r17, 0x00	; 0
    fd8a:	41 2c       	mov	r4, r1
    fd8c:	51 2c       	mov	r5, r1
    fd8e:	32 01       	movw	r6, r4
    fd90:	a8 cf       	rjmp	.-176    	; 0xfce2 <nvm_user_sig_write_buffer+0x3e>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
    fd92:	22 20       	and	r2, r2
    fd94:	59 f0       	breq	.+22     	; 0xfdac <nvm_user_sig_write_buffer+0x108>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    fd96:	e0 ec       	ldi	r30, 0xC0	; 192
    fd98:	f1 e0       	ldi	r31, 0x01	; 1
    fd9a:	87 85       	ldd	r24, Z+15	; 0x0f
    fd9c:	88 23       	and	r24, r24
    fd9e:	ec f3       	brlt	.-6      	; 0xfd9a <nvm_user_sig_write_buffer+0xf6>
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
    fda0:	48 e1       	ldi	r20, 0x18	; 24
    fda2:	60 e0       	ldi	r22, 0x00	; 0
    fda4:	70 e0       	ldi	r23, 0x00	; 0
    fda6:	cb 01       	movw	r24, r22
    fda8:	0e 94 ee 8e 	call	0x11ddc	; 0x11ddc <_etext>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    fdac:	e0 ec       	ldi	r30, 0xC0	; 192
    fdae:	f1 e0       	ldi	r31, 0x01	; 1
    fdb0:	87 85       	ldd	r24, Z+15	; 0x0f
    fdb2:	88 23       	and	r24, r24
    fdb4:	ec f3       	brlt	.-6      	; 0xfdb0 <nvm_user_sig_write_buffer+0x10c>
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
    fdb6:	4a e1       	ldi	r20, 0x1A	; 26
    fdb8:	60 e0       	ldi	r22, 0x00	; 0
    fdba:	70 e0       	ldi	r23, 0x00	; 0
    fdbc:	cb 01       	movw	r24, r22
    fdbe:	0e 94 ee 8e 	call	0x11ddc	; 0x11ddc <_etext>
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    fdc2:	24 96       	adiw	r28, 0x04	; 4
    fdc4:	cd bf       	out	0x3d, r28	; 61
    fdc6:	de bf       	out	0x3e, r29	; 62
    fdc8:	df 91       	pop	r29
    fdca:	cf 91       	pop	r28
    fdcc:	1f 91       	pop	r17
    fdce:	0f 91       	pop	r16
    fdd0:	ff 90       	pop	r15
    fdd2:	ef 90       	pop	r14
    fdd4:	df 90       	pop	r13
    fdd6:	cf 90       	pop	r12
    fdd8:	bf 90       	pop	r11
    fdda:	af 90       	pop	r10
    fddc:	9f 90       	pop	r9
    fdde:	8f 90       	pop	r8
    fde0:	7f 90       	pop	r7
    fde2:	6f 90       	pop	r6
    fde4:	5f 90       	pop	r5
    fde6:	4f 90       	pop	r4
    fde8:	3f 90       	pop	r3
    fdea:	2f 90       	pop	r2
    fdec:	08 95       	ret

0000fdee <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    fdee:	2f 92       	push	r2
    fdf0:	3f 92       	push	r3
    fdf2:	4f 92       	push	r4
    fdf4:	5f 92       	push	r5
    fdf6:	6f 92       	push	r6
    fdf8:	7f 92       	push	r7
    fdfa:	8f 92       	push	r8
    fdfc:	9f 92       	push	r9
    fdfe:	af 92       	push	r10
    fe00:	bf 92       	push	r11
    fe02:	cf 92       	push	r12
    fe04:	df 92       	push	r13
    fe06:	ef 92       	push	r14
    fe08:	ff 92       	push	r15
    fe0a:	0f 93       	push	r16
    fe0c:	1f 93       	push	r17
    fe0e:	cf 93       	push	r28
    fe10:	df 93       	push	r29
    fe12:	cd b7       	in	r28, 0x3d	; 61
    fe14:	de b7       	in	r29, 0x3e	; 62
    fe16:	2a 97       	sbiw	r28, 0x0a	; 10
    fe18:	cd bf       	out	0x3d, r28	; 61
    fe1a:	de bf       	out	0x3e, r29	; 62
    fe1c:	2b 01       	movw	r4, r22
    fe1e:	3c 01       	movw	r6, r24
    fe20:	1a 01       	movw	r2, r20
    fe22:	59 01       	movw	r10, r18
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    fe24:	dc 01       	movw	r26, r24
    fe26:	cb 01       	movw	r24, r22
    fe28:	88 27       	eor	r24, r24
    fe2a:	9e 7f       	andi	r25, 0xFE	; 254
    fe2c:	8f 83       	std	Y+7, r24	; 0x07
    fe2e:	98 87       	std	Y+8, r25	; 0x08
    fe30:	a9 87       	std	Y+9, r26	; 0x09
    fe32:	ba 87       	std	Y+10, r27	; 0x0a

	// For each page
	while ( len ) {
    fe34:	23 2b       	or	r18, r19
    fe36:	09 f4       	brne	.+2      	; 0xfe3a <nvm_flash_erase_and_write_buffer+0x4c>
    fe38:	8b c0       	rjmp	.+278    	; 0xff50 <nvm_flash_erase_and_write_buffer+0x162>
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    fe3a:	88 24       	eor	r8, r8
    fe3c:	8a 94       	dec	r8
    fe3e:	98 2c       	mov	r9, r8
    fe40:	04 c0       	rjmp	.+8      	; 0xfe4a <nvm_flash_erase_and_write_buffer+0x5c>
    fe42:	cf 82       	std	Y+7, r12	; 0x07
    fe44:	d8 86       	std	Y+8, r13	; 0x08
    fe46:	e9 86       	std	Y+9, r14	; 0x09
    fe48:	fa 86       	std	Y+10, r15	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    fe4a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    fe4e:	88 23       	and	r24, r24
    fe50:	e4 f3       	brlt	.-8      	; 0xfe4a <nvm_flash_erase_and_write_buffer+0x5c>
    fe52:	8f 81       	ldd	r24, Y+7	; 0x07
    fe54:	98 85       	ldd	r25, Y+8	; 0x08
    fe56:	a9 85       	ldd	r26, Y+9	; 0x09
    fe58:	ba 85       	ldd	r27, Y+10	; 0x0a
    fe5a:	9e 5f       	subi	r25, 0xFE	; 254
    fe5c:	af 4f       	sbci	r26, 0xFF	; 255
    fe5e:	bf 4f       	sbci	r27, 0xFF	; 255
    fe60:	8b 83       	std	Y+3, r24	; 0x03
    fe62:	9c 83       	std	Y+4, r25	; 0x04
    fe64:	ad 83       	std	Y+5, r26	; 0x05
    fe66:	be 83       	std	Y+6, r27	; 0x06
    fe68:	cf 80       	ldd	r12, Y+7	; 0x07
    fe6a:	d8 84       	ldd	r13, Y+8	; 0x08
    fe6c:	e9 84       	ldd	r14, Y+9	; 0x09
    fe6e:	fa 84       	ldd	r15, Y+10	; 0x0a
    fe70:	10 e0       	ldi	r17, 0x00	; 0
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    fe72:	00 23       	and	r16, r16
    fe74:	51 f0       	breq	.+20     	; 0xfe8a <nvm_flash_erase_and_write_buffer+0x9c>
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_word_far(addr);
    fe76:	eb be       	out	0x3b, r14	; 59
    fe78:	f6 01       	movw	r30, r12
    fe7a:	87 91       	elpm	r24, Z+
    fe7c:	96 91       	elpm	r25, Z
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    fe7e:	89 83       	std	Y+1, r24	; 0x01
    fe80:	9a 83       	std	Y+2, r25	; 0x02
				if (w_value!=0xFFFF) {
    fe82:	01 96       	adiw	r24, 0x01	; 1
    fe84:	21 f0       	breq	.+8      	; 0xfe8e <nvm_flash_erase_and_write_buffer+0xa0>
					b_flag_erase = true; // The page is not empty
    fe86:	11 e0       	ldi	r17, 0x01	; 1
    fe88:	02 c0       	rjmp	.+4      	; 0xfe8e <nvm_flash_erase_and_write_buffer+0xa0>
				}
			}else{
				w_value = 0xFFFF;
    fe8a:	89 82       	std	Y+1, r8	; 0x01
    fe8c:	9a 82       	std	Y+2, r9	; 0x02
			}

			// Update flash buffer
			if (len) {
    fe8e:	a1 14       	cp	r10, r1
    fe90:	b1 04       	cpc	r11, r1
    fe92:	61 f1       	breq	.+88     	; 0xfeec <nvm_flash_erase_and_write_buffer+0xfe>
				if (opt_address == page_address) {
    fe94:	c4 14       	cp	r12, r4
    fe96:	d5 04       	cpc	r13, r5
    fe98:	e6 04       	cpc	r14, r6
    fe9a:	f7 04       	cpc	r15, r7
    fe9c:	79 f4       	brne	.+30     	; 0xfebc <nvm_flash_erase_and_write_buffer+0xce>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    fe9e:	b1 e0       	ldi	r27, 0x01	; 1
    fea0:	ab 1a       	sub	r10, r27
    fea2:	b1 08       	sbc	r11, r1
					opt_address++;
    fea4:	ef ef       	ldi	r30, 0xFF	; 255
    fea6:	4e 1a       	sub	r4, r30
    fea8:	5e 0a       	sbc	r5, r30
    feaa:	6e 0a       	sbc	r6, r30
    feac:	7e 0a       	sbc	r7, r30
					LSB(w_value)=*(uint8_t*)buf;
    feae:	d1 01       	movw	r26, r2
    feb0:	8d 91       	ld	r24, X+
    feb2:	1d 01       	movw	r2, r26
    feb4:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    feb6:	a1 14       	cp	r10, r1
    feb8:	b1 04       	cpc	r11, r1
    feba:	c1 f0       	breq	.+48     	; 0xfeec <nvm_flash_erase_and_write_buffer+0xfe>
				if (opt_address == (page_address+1)) {
    febc:	d7 01       	movw	r26, r14
    febe:	c6 01       	movw	r24, r12
    fec0:	01 96       	adiw	r24, 0x01	; 1
    fec2:	a1 1d       	adc	r26, r1
    fec4:	b1 1d       	adc	r27, r1
    fec6:	84 15       	cp	r24, r4
    fec8:	95 05       	cpc	r25, r5
    feca:	a6 05       	cpc	r26, r6
    fecc:	b7 05       	cpc	r27, r7
    fece:	71 f4       	brne	.+28     	; 0xfeec <nvm_flash_erase_and_write_buffer+0xfe>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    fed0:	b1 e0       	ldi	r27, 0x01	; 1
    fed2:	ab 1a       	sub	r10, r27
    fed4:	b1 08       	sbc	r11, r1
					opt_address++;
    fed6:	26 01       	movw	r4, r12
    fed8:	37 01       	movw	r6, r14
    feda:	e2 e0       	ldi	r30, 0x02	; 2
    fedc:	4e 0e       	add	r4, r30
    fede:	51 1c       	adc	r5, r1
    fee0:	61 1c       	adc	r6, r1
    fee2:	71 1c       	adc	r7, r1
					MSB(w_value)=*(uint8_t*)buf;
    fee4:	d1 01       	movw	r26, r2
    fee6:	8d 91       	ld	r24, X+
    fee8:	1d 01       	movw	r2, r26
    feea:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    feec:	49 81       	ldd	r20, Y+1	; 0x01
    feee:	5a 81       	ldd	r21, Y+2	; 0x02
    fef0:	c7 01       	movw	r24, r14
    fef2:	b6 01       	movw	r22, r12
    fef4:	0e 94 fd 8e 	call	0x11dfa	; 0x11dfa <nvm_flash_load_word_to_buffer>
			page_address+=2;
    fef8:	b2 e0       	ldi	r27, 0x02	; 2
    fefa:	cb 0e       	add	r12, r27
    fefc:	d1 1c       	adc	r13, r1
    fefe:	e1 1c       	adc	r14, r1
    ff00:	f1 1c       	adc	r15, r1
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    ff02:	8b 81       	ldd	r24, Y+3	; 0x03
    ff04:	9c 81       	ldd	r25, Y+4	; 0x04
    ff06:	ad 81       	ldd	r26, Y+5	; 0x05
    ff08:	be 81       	ldd	r27, Y+6	; 0x06
    ff0a:	c8 16       	cp	r12, r24
    ff0c:	d9 06       	cpc	r13, r25
    ff0e:	ea 06       	cpc	r14, r26
    ff10:	fb 06       	cpc	r15, r27
    ff12:	09 f0       	breq	.+2      	; 0xff16 <nvm_flash_erase_and_write_buffer+0x128>
    ff14:	ae cf       	rjmp	.-164    	; 0xfe72 <nvm_flash_erase_and_write_buffer+0x84>
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    ff16:	11 23       	and	r17, r17
    ff18:	61 f0       	breq	.+24     	; 0xff32 <nvm_flash_erase_and_write_buffer+0x144>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
    ff1a:	6f 81       	ldd	r22, Y+7	; 0x07
    ff1c:	78 85       	ldd	r23, Y+8	; 0x08
    ff1e:	89 85       	ldd	r24, Y+9	; 0x09
    ff20:	9a 85       	ldd	r25, Y+10	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ff22:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    ff26:	22 23       	and	r18, r18
    ff28:	e4 f3       	brlt	.-8      	; 0xff22 <nvm_flash_erase_and_write_buffer+0x134>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    ff2a:	45 e2       	ldi	r20, 0x25	; 37
    ff2c:	0e 94 ee 8e 	call	0x11ddc	; 0x11ddc <_etext>
    ff30:	0b c0       	rjmp	.+22     	; 0xff48 <nvm_flash_erase_and_write_buffer+0x15a>
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
    ff32:	6f 81       	ldd	r22, Y+7	; 0x07
    ff34:	78 85       	ldd	r23, Y+8	; 0x08
    ff36:	89 85       	ldd	r24, Y+9	; 0x09
    ff38:	9a 85       	ldd	r25, Y+10	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ff3a:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    ff3e:	22 23       	and	r18, r18
    ff40:	e4 f3       	brlt	.-8      	; 0xff3a <nvm_flash_erase_and_write_buffer+0x14c>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    ff42:	44 e2       	ldi	r20, 0x24	; 36
    ff44:	0e 94 ee 8e 	call	0x11ddc	; 0x11ddc <_etext>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    ff48:	a1 14       	cp	r10, r1
    ff4a:	b1 04       	cpc	r11, r1
    ff4c:	09 f0       	breq	.+2      	; 0xff50 <nvm_flash_erase_and_write_buffer+0x162>
    ff4e:	79 cf       	rjmp	.-270    	; 0xfe42 <nvm_flash_erase_and_write_buffer+0x54>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
    ff50:	2a 96       	adiw	r28, 0x0a	; 10
    ff52:	cd bf       	out	0x3d, r28	; 61
    ff54:	de bf       	out	0x3e, r29	; 62
    ff56:	df 91       	pop	r29
    ff58:	cf 91       	pop	r28
    ff5a:	1f 91       	pop	r17
    ff5c:	0f 91       	pop	r16
    ff5e:	ff 90       	pop	r15
    ff60:	ef 90       	pop	r14
    ff62:	df 90       	pop	r13
    ff64:	cf 90       	pop	r12
    ff66:	bf 90       	pop	r11
    ff68:	af 90       	pop	r10
    ff6a:	9f 90       	pop	r9
    ff6c:	8f 90       	pop	r8
    ff6e:	7f 90       	pop	r7
    ff70:	6f 90       	pop	r6
    ff72:	5f 90       	pop	r5
    ff74:	4f 90       	pop	r4
    ff76:	3f 90       	pop	r3
    ff78:	2f 90       	pop	r2
    ff7a:	08 95       	ret

0000ff7c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    ff7c:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    ff80:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    ff82:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    ff84:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    ff88:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    ff8a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    ff8e:	08 95       	ret

0000ff90 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    ff90:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    ff92:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    ff94:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    ff96:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    ff98:	60 83       	st	Z, r22
	ret                             // Return to caller
    ff9a:	08 95       	ret

0000ff9c <vfprintf>:
    ff9c:	2f 92       	push	r2
    ff9e:	3f 92       	push	r3
    ffa0:	4f 92       	push	r4
    ffa2:	5f 92       	push	r5
    ffa4:	6f 92       	push	r6
    ffa6:	7f 92       	push	r7
    ffa8:	8f 92       	push	r8
    ffaa:	9f 92       	push	r9
    ffac:	af 92       	push	r10
    ffae:	bf 92       	push	r11
    ffb0:	cf 92       	push	r12
    ffb2:	df 92       	push	r13
    ffb4:	ef 92       	push	r14
    ffb6:	ff 92       	push	r15
    ffb8:	0f 93       	push	r16
    ffba:	1f 93       	push	r17
    ffbc:	cf 93       	push	r28
    ffbe:	df 93       	push	r29
    ffc0:	cd b7       	in	r28, 0x3d	; 61
    ffc2:	de b7       	in	r29, 0x3e	; 62
    ffc4:	60 97       	sbiw	r28, 0x10	; 16
    ffc6:	cd bf       	out	0x3d, r28	; 61
    ffc8:	de bf       	out	0x3e, r29	; 62
    ffca:	7c 01       	movw	r14, r24
    ffcc:	1b 01       	movw	r2, r22
    ffce:	6a 01       	movw	r12, r20
    ffd0:	fc 01       	movw	r30, r24
    ffd2:	16 82       	std	Z+6, r1	; 0x06
    ffd4:	17 82       	std	Z+7, r1	; 0x07
    ffd6:	83 81       	ldd	r24, Z+3	; 0x03
    ffd8:	81 ff       	sbrs	r24, 1
    ffda:	44 c3       	rjmp	.+1672   	; 0x10664 <__EEPROM_REGION_LENGTH__+0x664>
    ffdc:	9e 01       	movw	r18, r28
    ffde:	2f 5f       	subi	r18, 0xFF	; 255
    ffe0:	3f 4f       	sbci	r19, 0xFF	; 255
    ffe2:	39 01       	movw	r6, r18
    ffe4:	f7 01       	movw	r30, r14
    ffe6:	93 81       	ldd	r25, Z+3	; 0x03
    ffe8:	f1 01       	movw	r30, r2
    ffea:	93 fd       	sbrc	r25, 3
    ffec:	85 91       	lpm	r24, Z+
    ffee:	93 ff       	sbrs	r25, 3
    fff0:	81 91       	ld	r24, Z+
    fff2:	1f 01       	movw	r2, r30
    fff4:	88 23       	and	r24, r24
    fff6:	09 f4       	brne	.+2      	; 0xfffa <__DATA_REGION_LENGTH__+0x5a>
    fff8:	31 c3       	rjmp	.+1634   	; 0x1065c <__EEPROM_REGION_LENGTH__+0x65c>
    fffa:	85 32       	cpi	r24, 0x25	; 37
    fffc:	39 f4       	brne	.+14     	; 0x1000c <__EEPROM_REGION_LENGTH__+0xc>
    fffe:	93 fd       	sbrc	r25, 3
   10000:	85 91       	lpm	r24, Z+
   10002:	93 ff       	sbrs	r25, 3
   10004:	81 91       	ld	r24, Z+
   10006:	1f 01       	movw	r2, r30
   10008:	85 32       	cpi	r24, 0x25	; 37
   1000a:	39 f4       	brne	.+14     	; 0x1001a <__EEPROM_REGION_LENGTH__+0x1a>
   1000c:	b7 01       	movw	r22, r14
   1000e:	90 e0       	ldi	r25, 0x00	; 0
   10010:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10014:	56 01       	movw	r10, r12
   10016:	65 01       	movw	r12, r10
   10018:	e5 cf       	rjmp	.-54     	; 0xffe4 <__DATA_REGION_LENGTH__+0x44>
   1001a:	10 e0       	ldi	r17, 0x00	; 0
   1001c:	51 2c       	mov	r5, r1
   1001e:	91 2c       	mov	r9, r1
   10020:	ff e1       	ldi	r31, 0x1F	; 31
   10022:	f9 15       	cp	r31, r9
   10024:	d8 f0       	brcs	.+54     	; 0x1005c <__EEPROM_REGION_LENGTH__+0x5c>
   10026:	8b 32       	cpi	r24, 0x2B	; 43
   10028:	79 f0       	breq	.+30     	; 0x10048 <__EEPROM_REGION_LENGTH__+0x48>
   1002a:	38 f4       	brcc	.+14     	; 0x1003a <__EEPROM_REGION_LENGTH__+0x3a>
   1002c:	80 32       	cpi	r24, 0x20	; 32
   1002e:	79 f0       	breq	.+30     	; 0x1004e <__EEPROM_REGION_LENGTH__+0x4e>
   10030:	83 32       	cpi	r24, 0x23	; 35
   10032:	a1 f4       	brne	.+40     	; 0x1005c <__EEPROM_REGION_LENGTH__+0x5c>
   10034:	f9 2d       	mov	r31, r9
   10036:	f0 61       	ori	r31, 0x10	; 16
   10038:	2e c0       	rjmp	.+92     	; 0x10096 <__EEPROM_REGION_LENGTH__+0x96>
   1003a:	8d 32       	cpi	r24, 0x2D	; 45
   1003c:	61 f0       	breq	.+24     	; 0x10056 <__EEPROM_REGION_LENGTH__+0x56>
   1003e:	80 33       	cpi	r24, 0x30	; 48
   10040:	69 f4       	brne	.+26     	; 0x1005c <__EEPROM_REGION_LENGTH__+0x5c>
   10042:	29 2d       	mov	r18, r9
   10044:	21 60       	ori	r18, 0x01	; 1
   10046:	2d c0       	rjmp	.+90     	; 0x100a2 <__EEPROM_REGION_LENGTH__+0xa2>
   10048:	39 2d       	mov	r19, r9
   1004a:	32 60       	ori	r19, 0x02	; 2
   1004c:	93 2e       	mov	r9, r19
   1004e:	89 2d       	mov	r24, r9
   10050:	84 60       	ori	r24, 0x04	; 4
   10052:	98 2e       	mov	r9, r24
   10054:	2a c0       	rjmp	.+84     	; 0x100aa <__EEPROM_REGION_LENGTH__+0xaa>
   10056:	e9 2d       	mov	r30, r9
   10058:	e8 60       	ori	r30, 0x08	; 8
   1005a:	15 c0       	rjmp	.+42     	; 0x10086 <__EEPROM_REGION_LENGTH__+0x86>
   1005c:	97 fc       	sbrc	r9, 7
   1005e:	2d c0       	rjmp	.+90     	; 0x100ba <__EEPROM_REGION_LENGTH__+0xba>
   10060:	20 ed       	ldi	r18, 0xD0	; 208
   10062:	28 0f       	add	r18, r24
   10064:	2a 30       	cpi	r18, 0x0A	; 10
   10066:	88 f4       	brcc	.+34     	; 0x1008a <__EEPROM_REGION_LENGTH__+0x8a>
   10068:	96 fe       	sbrs	r9, 6
   1006a:	06 c0       	rjmp	.+12     	; 0x10078 <__EEPROM_REGION_LENGTH__+0x78>
   1006c:	3a e0       	ldi	r19, 0x0A	; 10
   1006e:	13 9f       	mul	r17, r19
   10070:	20 0d       	add	r18, r0
   10072:	11 24       	eor	r1, r1
   10074:	12 2f       	mov	r17, r18
   10076:	19 c0       	rjmp	.+50     	; 0x100aa <__EEPROM_REGION_LENGTH__+0xaa>
   10078:	8a e0       	ldi	r24, 0x0A	; 10
   1007a:	58 9e       	mul	r5, r24
   1007c:	20 0d       	add	r18, r0
   1007e:	11 24       	eor	r1, r1
   10080:	52 2e       	mov	r5, r18
   10082:	e9 2d       	mov	r30, r9
   10084:	e0 62       	ori	r30, 0x20	; 32
   10086:	9e 2e       	mov	r9, r30
   10088:	10 c0       	rjmp	.+32     	; 0x100aa <__EEPROM_REGION_LENGTH__+0xaa>
   1008a:	8e 32       	cpi	r24, 0x2E	; 46
   1008c:	31 f4       	brne	.+12     	; 0x1009a <__EEPROM_REGION_LENGTH__+0x9a>
   1008e:	96 fc       	sbrc	r9, 6
   10090:	e5 c2       	rjmp	.+1482   	; 0x1065c <__EEPROM_REGION_LENGTH__+0x65c>
   10092:	f9 2d       	mov	r31, r9
   10094:	f0 64       	ori	r31, 0x40	; 64
   10096:	9f 2e       	mov	r9, r31
   10098:	08 c0       	rjmp	.+16     	; 0x100aa <__EEPROM_REGION_LENGTH__+0xaa>
   1009a:	8c 36       	cpi	r24, 0x6C	; 108
   1009c:	21 f4       	brne	.+8      	; 0x100a6 <__EEPROM_REGION_LENGTH__+0xa6>
   1009e:	29 2d       	mov	r18, r9
   100a0:	20 68       	ori	r18, 0x80	; 128
   100a2:	92 2e       	mov	r9, r18
   100a4:	02 c0       	rjmp	.+4      	; 0x100aa <__EEPROM_REGION_LENGTH__+0xaa>
   100a6:	88 36       	cpi	r24, 0x68	; 104
   100a8:	41 f4       	brne	.+16     	; 0x100ba <__EEPROM_REGION_LENGTH__+0xba>
   100aa:	f1 01       	movw	r30, r2
   100ac:	93 fd       	sbrc	r25, 3
   100ae:	85 91       	lpm	r24, Z+
   100b0:	93 ff       	sbrs	r25, 3
   100b2:	81 91       	ld	r24, Z+
   100b4:	1f 01       	movw	r2, r30
   100b6:	81 11       	cpse	r24, r1
   100b8:	b3 cf       	rjmp	.-154    	; 0x10020 <__EEPROM_REGION_LENGTH__+0x20>
   100ba:	9b eb       	ldi	r25, 0xBB	; 187
   100bc:	98 0f       	add	r25, r24
   100be:	93 30       	cpi	r25, 0x03	; 3
   100c0:	20 f4       	brcc	.+8      	; 0x100ca <__EEPROM_REGION_LENGTH__+0xca>
   100c2:	99 2d       	mov	r25, r9
   100c4:	90 61       	ori	r25, 0x10	; 16
   100c6:	80 5e       	subi	r24, 0xE0	; 224
   100c8:	07 c0       	rjmp	.+14     	; 0x100d8 <__EEPROM_REGION_LENGTH__+0xd8>
   100ca:	9b e9       	ldi	r25, 0x9B	; 155
   100cc:	98 0f       	add	r25, r24
   100ce:	93 30       	cpi	r25, 0x03	; 3
   100d0:	08 f0       	brcs	.+2      	; 0x100d4 <__EEPROM_REGION_LENGTH__+0xd4>
   100d2:	66 c1       	rjmp	.+716    	; 0x103a0 <__EEPROM_REGION_LENGTH__+0x3a0>
   100d4:	99 2d       	mov	r25, r9
   100d6:	9f 7e       	andi	r25, 0xEF	; 239
   100d8:	96 ff       	sbrs	r25, 6
   100da:	16 e0       	ldi	r17, 0x06	; 6
   100dc:	9f 73       	andi	r25, 0x3F	; 63
   100de:	99 2e       	mov	r9, r25
   100e0:	85 36       	cpi	r24, 0x65	; 101
   100e2:	19 f4       	brne	.+6      	; 0x100ea <__EEPROM_REGION_LENGTH__+0xea>
   100e4:	90 64       	ori	r25, 0x40	; 64
   100e6:	99 2e       	mov	r9, r25
   100e8:	08 c0       	rjmp	.+16     	; 0x100fa <__EEPROM_REGION_LENGTH__+0xfa>
   100ea:	86 36       	cpi	r24, 0x66	; 102
   100ec:	21 f4       	brne	.+8      	; 0x100f6 <__EEPROM_REGION_LENGTH__+0xf6>
   100ee:	39 2f       	mov	r19, r25
   100f0:	30 68       	ori	r19, 0x80	; 128
   100f2:	93 2e       	mov	r9, r19
   100f4:	02 c0       	rjmp	.+4      	; 0x100fa <__EEPROM_REGION_LENGTH__+0xfa>
   100f6:	11 11       	cpse	r17, r1
   100f8:	11 50       	subi	r17, 0x01	; 1
   100fa:	97 fe       	sbrs	r9, 7
   100fc:	07 c0       	rjmp	.+14     	; 0x1010c <__EEPROM_REGION_LENGTH__+0x10c>
   100fe:	1c 33       	cpi	r17, 0x3C	; 60
   10100:	50 f4       	brcc	.+20     	; 0x10116 <__EEPROM_REGION_LENGTH__+0x116>
   10102:	44 24       	eor	r4, r4
   10104:	43 94       	inc	r4
   10106:	41 0e       	add	r4, r17
   10108:	27 e0       	ldi	r18, 0x07	; 7
   1010a:	0b c0       	rjmp	.+22     	; 0x10122 <__EEPROM_REGION_LENGTH__+0x122>
   1010c:	18 30       	cpi	r17, 0x08	; 8
   1010e:	38 f0       	brcs	.+14     	; 0x1011e <__EEPROM_REGION_LENGTH__+0x11e>
   10110:	27 e0       	ldi	r18, 0x07	; 7
   10112:	17 e0       	ldi	r17, 0x07	; 7
   10114:	05 c0       	rjmp	.+10     	; 0x10120 <__EEPROM_REGION_LENGTH__+0x120>
   10116:	27 e0       	ldi	r18, 0x07	; 7
   10118:	9c e3       	ldi	r25, 0x3C	; 60
   1011a:	49 2e       	mov	r4, r25
   1011c:	02 c0       	rjmp	.+4      	; 0x10122 <__EEPROM_REGION_LENGTH__+0x122>
   1011e:	21 2f       	mov	r18, r17
   10120:	41 2c       	mov	r4, r1
   10122:	56 01       	movw	r10, r12
   10124:	84 e0       	ldi	r24, 0x04	; 4
   10126:	a8 0e       	add	r10, r24
   10128:	b1 1c       	adc	r11, r1
   1012a:	f6 01       	movw	r30, r12
   1012c:	60 81       	ld	r22, Z
   1012e:	71 81       	ldd	r23, Z+1	; 0x01
   10130:	82 81       	ldd	r24, Z+2	; 0x02
   10132:	93 81       	ldd	r25, Z+3	; 0x03
   10134:	04 2d       	mov	r16, r4
   10136:	a3 01       	movw	r20, r6
   10138:	0e 94 98 89 	call	0x11330	; 0x11330 <__ftoa_engine>
   1013c:	6c 01       	movw	r12, r24
   1013e:	f9 81       	ldd	r31, Y+1	; 0x01
   10140:	fc 87       	std	Y+12, r31	; 0x0c
   10142:	f0 ff       	sbrs	r31, 0
   10144:	02 c0       	rjmp	.+4      	; 0x1014a <__EEPROM_REGION_LENGTH__+0x14a>
   10146:	f3 ff       	sbrs	r31, 3
   10148:	06 c0       	rjmp	.+12     	; 0x10156 <__EEPROM_REGION_LENGTH__+0x156>
   1014a:	91 fc       	sbrc	r9, 1
   1014c:	06 c0       	rjmp	.+12     	; 0x1015a <__EEPROM_REGION_LENGTH__+0x15a>
   1014e:	92 fe       	sbrs	r9, 2
   10150:	06 c0       	rjmp	.+12     	; 0x1015e <__EEPROM_REGION_LENGTH__+0x15e>
   10152:	00 e2       	ldi	r16, 0x20	; 32
   10154:	05 c0       	rjmp	.+10     	; 0x10160 <__EEPROM_REGION_LENGTH__+0x160>
   10156:	0d e2       	ldi	r16, 0x2D	; 45
   10158:	03 c0       	rjmp	.+6      	; 0x10160 <__EEPROM_REGION_LENGTH__+0x160>
   1015a:	0b e2       	ldi	r16, 0x2B	; 43
   1015c:	01 c0       	rjmp	.+2      	; 0x10160 <__EEPROM_REGION_LENGTH__+0x160>
   1015e:	00 e0       	ldi	r16, 0x00	; 0
   10160:	8c 85       	ldd	r24, Y+12	; 0x0c
   10162:	8c 70       	andi	r24, 0x0C	; 12
   10164:	19 f0       	breq	.+6      	; 0x1016c <__EEPROM_REGION_LENGTH__+0x16c>
   10166:	01 11       	cpse	r16, r1
   10168:	5a c2       	rjmp	.+1204   	; 0x1061e <__EEPROM_REGION_LENGTH__+0x61e>
   1016a:	9b c2       	rjmp	.+1334   	; 0x106a2 <__EEPROM_REGION_LENGTH__+0x6a2>
   1016c:	97 fe       	sbrs	r9, 7
   1016e:	10 c0       	rjmp	.+32     	; 0x10190 <__EEPROM_REGION_LENGTH__+0x190>
   10170:	4c 0c       	add	r4, r12
   10172:	fc 85       	ldd	r31, Y+12	; 0x0c
   10174:	f4 ff       	sbrs	r31, 4
   10176:	04 c0       	rjmp	.+8      	; 0x10180 <__EEPROM_REGION_LENGTH__+0x180>
   10178:	8a 81       	ldd	r24, Y+2	; 0x02
   1017a:	81 33       	cpi	r24, 0x31	; 49
   1017c:	09 f4       	brne	.+2      	; 0x10180 <__EEPROM_REGION_LENGTH__+0x180>
   1017e:	4a 94       	dec	r4
   10180:	14 14       	cp	r1, r4
   10182:	74 f5       	brge	.+92     	; 0x101e0 <__EEPROM_REGION_LENGTH__+0x1e0>
   10184:	28 e0       	ldi	r18, 0x08	; 8
   10186:	24 15       	cp	r18, r4
   10188:	78 f5       	brcc	.+94     	; 0x101e8 <__EEPROM_REGION_LENGTH__+0x1e8>
   1018a:	88 e0       	ldi	r24, 0x08	; 8
   1018c:	48 2e       	mov	r4, r24
   1018e:	2c c0       	rjmp	.+88     	; 0x101e8 <__EEPROM_REGION_LENGTH__+0x1e8>
   10190:	96 fc       	sbrc	r9, 6
   10192:	2a c0       	rjmp	.+84     	; 0x101e8 <__EEPROM_REGION_LENGTH__+0x1e8>
   10194:	81 2f       	mov	r24, r17
   10196:	90 e0       	ldi	r25, 0x00	; 0
   10198:	8c 15       	cp	r24, r12
   1019a:	9d 05       	cpc	r25, r13
   1019c:	9c f0       	brlt	.+38     	; 0x101c4 <__EEPROM_REGION_LENGTH__+0x1c4>
   1019e:	3c ef       	ldi	r19, 0xFC	; 252
   101a0:	c3 16       	cp	r12, r19
   101a2:	3f ef       	ldi	r19, 0xFF	; 255
   101a4:	d3 06       	cpc	r13, r19
   101a6:	74 f0       	brlt	.+28     	; 0x101c4 <__EEPROM_REGION_LENGTH__+0x1c4>
   101a8:	89 2d       	mov	r24, r9
   101aa:	80 68       	ori	r24, 0x80	; 128
   101ac:	98 2e       	mov	r9, r24
   101ae:	0a c0       	rjmp	.+20     	; 0x101c4 <__EEPROM_REGION_LENGTH__+0x1c4>
   101b0:	e2 e0       	ldi	r30, 0x02	; 2
   101b2:	f0 e0       	ldi	r31, 0x00	; 0
   101b4:	ec 0f       	add	r30, r28
   101b6:	fd 1f       	adc	r31, r29
   101b8:	e1 0f       	add	r30, r17
   101ba:	f1 1d       	adc	r31, r1
   101bc:	80 81       	ld	r24, Z
   101be:	80 33       	cpi	r24, 0x30	; 48
   101c0:	19 f4       	brne	.+6      	; 0x101c8 <__EEPROM_REGION_LENGTH__+0x1c8>
   101c2:	11 50       	subi	r17, 0x01	; 1
   101c4:	11 11       	cpse	r17, r1
   101c6:	f4 cf       	rjmp	.-24     	; 0x101b0 <__EEPROM_REGION_LENGTH__+0x1b0>
   101c8:	97 fe       	sbrs	r9, 7
   101ca:	0e c0       	rjmp	.+28     	; 0x101e8 <__EEPROM_REGION_LENGTH__+0x1e8>
   101cc:	44 24       	eor	r4, r4
   101ce:	43 94       	inc	r4
   101d0:	41 0e       	add	r4, r17
   101d2:	81 2f       	mov	r24, r17
   101d4:	90 e0       	ldi	r25, 0x00	; 0
   101d6:	c8 16       	cp	r12, r24
   101d8:	d9 06       	cpc	r13, r25
   101da:	2c f4       	brge	.+10     	; 0x101e6 <__EEPROM_REGION_LENGTH__+0x1e6>
   101dc:	1c 19       	sub	r17, r12
   101de:	04 c0       	rjmp	.+8      	; 0x101e8 <__EEPROM_REGION_LENGTH__+0x1e8>
   101e0:	44 24       	eor	r4, r4
   101e2:	43 94       	inc	r4
   101e4:	01 c0       	rjmp	.+2      	; 0x101e8 <__EEPROM_REGION_LENGTH__+0x1e8>
   101e6:	10 e0       	ldi	r17, 0x00	; 0
   101e8:	97 fe       	sbrs	r9, 7
   101ea:	06 c0       	rjmp	.+12     	; 0x101f8 <__EEPROM_REGION_LENGTH__+0x1f8>
   101ec:	1c 14       	cp	r1, r12
   101ee:	1d 04       	cpc	r1, r13
   101f0:	34 f4       	brge	.+12     	; 0x101fe <__EEPROM_REGION_LENGTH__+0x1fe>
   101f2:	c6 01       	movw	r24, r12
   101f4:	01 96       	adiw	r24, 0x01	; 1
   101f6:	05 c0       	rjmp	.+10     	; 0x10202 <__EEPROM_REGION_LENGTH__+0x202>
   101f8:	85 e0       	ldi	r24, 0x05	; 5
   101fa:	90 e0       	ldi	r25, 0x00	; 0
   101fc:	02 c0       	rjmp	.+4      	; 0x10202 <__EEPROM_REGION_LENGTH__+0x202>
   101fe:	81 e0       	ldi	r24, 0x01	; 1
   10200:	90 e0       	ldi	r25, 0x00	; 0
   10202:	01 11       	cpse	r16, r1
   10204:	01 96       	adiw	r24, 0x01	; 1
   10206:	11 23       	and	r17, r17
   10208:	31 f0       	breq	.+12     	; 0x10216 <__EEPROM_REGION_LENGTH__+0x216>
   1020a:	21 2f       	mov	r18, r17
   1020c:	30 e0       	ldi	r19, 0x00	; 0
   1020e:	2f 5f       	subi	r18, 0xFF	; 255
   10210:	3f 4f       	sbci	r19, 0xFF	; 255
   10212:	82 0f       	add	r24, r18
   10214:	93 1f       	adc	r25, r19
   10216:	25 2d       	mov	r18, r5
   10218:	30 e0       	ldi	r19, 0x00	; 0
   1021a:	82 17       	cp	r24, r18
   1021c:	93 07       	cpc	r25, r19
   1021e:	14 f4       	brge	.+4      	; 0x10224 <__EEPROM_REGION_LENGTH__+0x224>
   10220:	58 1a       	sub	r5, r24
   10222:	01 c0       	rjmp	.+2      	; 0x10226 <__EEPROM_REGION_LENGTH__+0x226>
   10224:	51 2c       	mov	r5, r1
   10226:	89 2d       	mov	r24, r9
   10228:	89 70       	andi	r24, 0x09	; 9
   1022a:	49 f4       	brne	.+18     	; 0x1023e <__EEPROM_REGION_LENGTH__+0x23e>
   1022c:	55 20       	and	r5, r5
   1022e:	39 f0       	breq	.+14     	; 0x1023e <__EEPROM_REGION_LENGTH__+0x23e>
   10230:	b7 01       	movw	r22, r14
   10232:	80 e2       	ldi	r24, 0x20	; 32
   10234:	90 e0       	ldi	r25, 0x00	; 0
   10236:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   1023a:	5a 94       	dec	r5
   1023c:	f7 cf       	rjmp	.-18     	; 0x1022c <__EEPROM_REGION_LENGTH__+0x22c>
   1023e:	00 23       	and	r16, r16
   10240:	29 f0       	breq	.+10     	; 0x1024c <__EEPROM_REGION_LENGTH__+0x24c>
   10242:	b7 01       	movw	r22, r14
   10244:	80 2f       	mov	r24, r16
   10246:	90 e0       	ldi	r25, 0x00	; 0
   10248:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   1024c:	93 fc       	sbrc	r9, 3
   1024e:	09 c0       	rjmp	.+18     	; 0x10262 <__EEPROM_REGION_LENGTH__+0x262>
   10250:	55 20       	and	r5, r5
   10252:	39 f0       	breq	.+14     	; 0x10262 <__EEPROM_REGION_LENGTH__+0x262>
   10254:	b7 01       	movw	r22, r14
   10256:	80 e3       	ldi	r24, 0x30	; 48
   10258:	90 e0       	ldi	r25, 0x00	; 0
   1025a:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   1025e:	5a 94       	dec	r5
   10260:	f7 cf       	rjmp	.-18     	; 0x10250 <__EEPROM_REGION_LENGTH__+0x250>
   10262:	97 fe       	sbrs	r9, 7
   10264:	4c c0       	rjmp	.+152    	; 0x102fe <__EEPROM_REGION_LENGTH__+0x2fe>
   10266:	46 01       	movw	r8, r12
   10268:	d7 fe       	sbrs	r13, 7
   1026a:	02 c0       	rjmp	.+4      	; 0x10270 <__EEPROM_REGION_LENGTH__+0x270>
   1026c:	81 2c       	mov	r8, r1
   1026e:	91 2c       	mov	r9, r1
   10270:	c6 01       	movw	r24, r12
   10272:	88 19       	sub	r24, r8
   10274:	99 09       	sbc	r25, r9
   10276:	f3 01       	movw	r30, r6
   10278:	e8 0f       	add	r30, r24
   1027a:	f9 1f       	adc	r31, r25
   1027c:	ed 87       	std	Y+13, r30	; 0x0d
   1027e:	fe 87       	std	Y+14, r31	; 0x0e
   10280:	96 01       	movw	r18, r12
   10282:	24 19       	sub	r18, r4
   10284:	31 09       	sbc	r19, r1
   10286:	2f 87       	std	Y+15, r18	; 0x0f
   10288:	38 8b       	std	Y+16, r19	; 0x10
   1028a:	01 2f       	mov	r16, r17
   1028c:	10 e0       	ldi	r17, 0x00	; 0
   1028e:	11 95       	neg	r17
   10290:	01 95       	neg	r16
   10292:	11 09       	sbc	r17, r1
   10294:	3f ef       	ldi	r19, 0xFF	; 255
   10296:	83 16       	cp	r8, r19
   10298:	93 06       	cpc	r9, r19
   1029a:	29 f4       	brne	.+10     	; 0x102a6 <__EEPROM_REGION_LENGTH__+0x2a6>
   1029c:	b7 01       	movw	r22, r14
   1029e:	8e e2       	ldi	r24, 0x2E	; 46
   102a0:	90 e0       	ldi	r25, 0x00	; 0
   102a2:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   102a6:	c8 14       	cp	r12, r8
   102a8:	d9 04       	cpc	r13, r9
   102aa:	4c f0       	brlt	.+18     	; 0x102be <__EEPROM_REGION_LENGTH__+0x2be>
   102ac:	8f 85       	ldd	r24, Y+15	; 0x0f
   102ae:	98 89       	ldd	r25, Y+16	; 0x10
   102b0:	88 15       	cp	r24, r8
   102b2:	99 05       	cpc	r25, r9
   102b4:	24 f4       	brge	.+8      	; 0x102be <__EEPROM_REGION_LENGTH__+0x2be>
   102b6:	ed 85       	ldd	r30, Y+13	; 0x0d
   102b8:	fe 85       	ldd	r31, Y+14	; 0x0e
   102ba:	81 81       	ldd	r24, Z+1	; 0x01
   102bc:	01 c0       	rjmp	.+2      	; 0x102c0 <__EEPROM_REGION_LENGTH__+0x2c0>
   102be:	80 e3       	ldi	r24, 0x30	; 48
   102c0:	f1 e0       	ldi	r31, 0x01	; 1
   102c2:	8f 1a       	sub	r8, r31
   102c4:	91 08       	sbc	r9, r1
   102c6:	2d 85       	ldd	r18, Y+13	; 0x0d
   102c8:	3e 85       	ldd	r19, Y+14	; 0x0e
   102ca:	2f 5f       	subi	r18, 0xFF	; 255
   102cc:	3f 4f       	sbci	r19, 0xFF	; 255
   102ce:	2d 87       	std	Y+13, r18	; 0x0d
   102d0:	3e 87       	std	Y+14, r19	; 0x0e
   102d2:	80 16       	cp	r8, r16
   102d4:	91 06       	cpc	r9, r17
   102d6:	2c f0       	brlt	.+10     	; 0x102e2 <__EEPROM_REGION_LENGTH__+0x2e2>
   102d8:	b7 01       	movw	r22, r14
   102da:	90 e0       	ldi	r25, 0x00	; 0
   102dc:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   102e0:	d9 cf       	rjmp	.-78     	; 0x10294 <__EEPROM_REGION_LENGTH__+0x294>
   102e2:	c8 14       	cp	r12, r8
   102e4:	d9 04       	cpc	r13, r9
   102e6:	41 f4       	brne	.+16     	; 0x102f8 <__EEPROM_REGION_LENGTH__+0x2f8>
   102e8:	9a 81       	ldd	r25, Y+2	; 0x02
   102ea:	96 33       	cpi	r25, 0x36	; 54
   102ec:	20 f4       	brcc	.+8      	; 0x102f6 <__EEPROM_REGION_LENGTH__+0x2f6>
   102ee:	95 33       	cpi	r25, 0x35	; 53
   102f0:	19 f4       	brne	.+6      	; 0x102f8 <__EEPROM_REGION_LENGTH__+0x2f8>
   102f2:	3c 85       	ldd	r19, Y+12	; 0x0c
   102f4:	34 ff       	sbrs	r19, 4
   102f6:	81 e3       	ldi	r24, 0x31	; 49
   102f8:	b7 01       	movw	r22, r14
   102fa:	90 e0       	ldi	r25, 0x00	; 0
   102fc:	4e c0       	rjmp	.+156    	; 0x1039a <__EEPROM_REGION_LENGTH__+0x39a>
   102fe:	8a 81       	ldd	r24, Y+2	; 0x02
   10300:	81 33       	cpi	r24, 0x31	; 49
   10302:	19 f0       	breq	.+6      	; 0x1030a <__EEPROM_REGION_LENGTH__+0x30a>
   10304:	9c 85       	ldd	r25, Y+12	; 0x0c
   10306:	9f 7e       	andi	r25, 0xEF	; 239
   10308:	9c 87       	std	Y+12, r25	; 0x0c
   1030a:	b7 01       	movw	r22, r14
   1030c:	90 e0       	ldi	r25, 0x00	; 0
   1030e:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10312:	11 11       	cpse	r17, r1
   10314:	05 c0       	rjmp	.+10     	; 0x10320 <__EEPROM_REGION_LENGTH__+0x320>
   10316:	94 fc       	sbrc	r9, 4
   10318:	18 c0       	rjmp	.+48     	; 0x1034a <__EEPROM_REGION_LENGTH__+0x34a>
   1031a:	85 e6       	ldi	r24, 0x65	; 101
   1031c:	90 e0       	ldi	r25, 0x00	; 0
   1031e:	17 c0       	rjmp	.+46     	; 0x1034e <__EEPROM_REGION_LENGTH__+0x34e>
   10320:	b7 01       	movw	r22, r14
   10322:	8e e2       	ldi	r24, 0x2E	; 46
   10324:	90 e0       	ldi	r25, 0x00	; 0
   10326:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   1032a:	1e 5f       	subi	r17, 0xFE	; 254
   1032c:	82 e0       	ldi	r24, 0x02	; 2
   1032e:	01 e0       	ldi	r16, 0x01	; 1
   10330:	08 0f       	add	r16, r24
   10332:	f3 01       	movw	r30, r6
   10334:	e8 0f       	add	r30, r24
   10336:	f1 1d       	adc	r31, r1
   10338:	80 81       	ld	r24, Z
   1033a:	b7 01       	movw	r22, r14
   1033c:	90 e0       	ldi	r25, 0x00	; 0
   1033e:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10342:	80 2f       	mov	r24, r16
   10344:	01 13       	cpse	r16, r17
   10346:	f3 cf       	rjmp	.-26     	; 0x1032e <__EEPROM_REGION_LENGTH__+0x32e>
   10348:	e6 cf       	rjmp	.-52     	; 0x10316 <__EEPROM_REGION_LENGTH__+0x316>
   1034a:	85 e4       	ldi	r24, 0x45	; 69
   1034c:	90 e0       	ldi	r25, 0x00	; 0
   1034e:	b7 01       	movw	r22, r14
   10350:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10354:	d7 fc       	sbrc	r13, 7
   10356:	06 c0       	rjmp	.+12     	; 0x10364 <__EEPROM_REGION_LENGTH__+0x364>
   10358:	c1 14       	cp	r12, r1
   1035a:	d1 04       	cpc	r13, r1
   1035c:	41 f4       	brne	.+16     	; 0x1036e <__EEPROM_REGION_LENGTH__+0x36e>
   1035e:	ec 85       	ldd	r30, Y+12	; 0x0c
   10360:	e4 ff       	sbrs	r30, 4
   10362:	05 c0       	rjmp	.+10     	; 0x1036e <__EEPROM_REGION_LENGTH__+0x36e>
   10364:	d1 94       	neg	r13
   10366:	c1 94       	neg	r12
   10368:	d1 08       	sbc	r13, r1
   1036a:	8d e2       	ldi	r24, 0x2D	; 45
   1036c:	01 c0       	rjmp	.+2      	; 0x10370 <__EEPROM_REGION_LENGTH__+0x370>
   1036e:	8b e2       	ldi	r24, 0x2B	; 43
   10370:	b7 01       	movw	r22, r14
   10372:	90 e0       	ldi	r25, 0x00	; 0
   10374:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10378:	80 e3       	ldi	r24, 0x30	; 48
   1037a:	2a e0       	ldi	r18, 0x0A	; 10
   1037c:	c2 16       	cp	r12, r18
   1037e:	d1 04       	cpc	r13, r1
   10380:	2c f0       	brlt	.+10     	; 0x1038c <__EEPROM_REGION_LENGTH__+0x38c>
   10382:	8f 5f       	subi	r24, 0xFF	; 255
   10384:	fa e0       	ldi	r31, 0x0A	; 10
   10386:	cf 1a       	sub	r12, r31
   10388:	d1 08       	sbc	r13, r1
   1038a:	f7 cf       	rjmp	.-18     	; 0x1037a <__EEPROM_REGION_LENGTH__+0x37a>
   1038c:	b7 01       	movw	r22, r14
   1038e:	90 e0       	ldi	r25, 0x00	; 0
   10390:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10394:	b7 01       	movw	r22, r14
   10396:	c6 01       	movw	r24, r12
   10398:	c0 96       	adiw	r24, 0x30	; 48
   1039a:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   1039e:	54 c1       	rjmp	.+680    	; 0x10648 <__EEPROM_REGION_LENGTH__+0x648>
   103a0:	83 36       	cpi	r24, 0x63	; 99
   103a2:	31 f0       	breq	.+12     	; 0x103b0 <__EEPROM_REGION_LENGTH__+0x3b0>
   103a4:	83 37       	cpi	r24, 0x73	; 115
   103a6:	79 f0       	breq	.+30     	; 0x103c6 <__EEPROM_REGION_LENGTH__+0x3c6>
   103a8:	83 35       	cpi	r24, 0x53	; 83
   103aa:	09 f0       	breq	.+2      	; 0x103ae <__EEPROM_REGION_LENGTH__+0x3ae>
   103ac:	56 c0       	rjmp	.+172    	; 0x1045a <__EEPROM_REGION_LENGTH__+0x45a>
   103ae:	20 c0       	rjmp	.+64     	; 0x103f0 <__EEPROM_REGION_LENGTH__+0x3f0>
   103b0:	56 01       	movw	r10, r12
   103b2:	32 e0       	ldi	r19, 0x02	; 2
   103b4:	a3 0e       	add	r10, r19
   103b6:	b1 1c       	adc	r11, r1
   103b8:	f6 01       	movw	r30, r12
   103ba:	80 81       	ld	r24, Z
   103bc:	89 83       	std	Y+1, r24	; 0x01
   103be:	01 e0       	ldi	r16, 0x01	; 1
   103c0:	10 e0       	ldi	r17, 0x00	; 0
   103c2:	63 01       	movw	r12, r6
   103c4:	12 c0       	rjmp	.+36     	; 0x103ea <__EEPROM_REGION_LENGTH__+0x3ea>
   103c6:	56 01       	movw	r10, r12
   103c8:	f2 e0       	ldi	r31, 0x02	; 2
   103ca:	af 0e       	add	r10, r31
   103cc:	b1 1c       	adc	r11, r1
   103ce:	f6 01       	movw	r30, r12
   103d0:	c0 80       	ld	r12, Z
   103d2:	d1 80       	ldd	r13, Z+1	; 0x01
   103d4:	96 fe       	sbrs	r9, 6
   103d6:	03 c0       	rjmp	.+6      	; 0x103de <__EEPROM_REGION_LENGTH__+0x3de>
   103d8:	61 2f       	mov	r22, r17
   103da:	70 e0       	ldi	r23, 0x00	; 0
   103dc:	02 c0       	rjmp	.+4      	; 0x103e2 <__EEPROM_REGION_LENGTH__+0x3e2>
   103de:	6f ef       	ldi	r22, 0xFF	; 255
   103e0:	7f ef       	ldi	r23, 0xFF	; 255
   103e2:	c6 01       	movw	r24, r12
   103e4:	0e 94 dc 8a 	call	0x115b8	; 0x115b8 <strnlen>
   103e8:	8c 01       	movw	r16, r24
   103ea:	f9 2d       	mov	r31, r9
   103ec:	ff 77       	andi	r31, 0x7F	; 127
   103ee:	14 c0       	rjmp	.+40     	; 0x10418 <__EEPROM_REGION_LENGTH__+0x418>
   103f0:	56 01       	movw	r10, r12
   103f2:	22 e0       	ldi	r18, 0x02	; 2
   103f4:	a2 0e       	add	r10, r18
   103f6:	b1 1c       	adc	r11, r1
   103f8:	f6 01       	movw	r30, r12
   103fa:	c0 80       	ld	r12, Z
   103fc:	d1 80       	ldd	r13, Z+1	; 0x01
   103fe:	96 fe       	sbrs	r9, 6
   10400:	03 c0       	rjmp	.+6      	; 0x10408 <__EEPROM_REGION_LENGTH__+0x408>
   10402:	61 2f       	mov	r22, r17
   10404:	70 e0       	ldi	r23, 0x00	; 0
   10406:	02 c0       	rjmp	.+4      	; 0x1040c <__EEPROM_REGION_LENGTH__+0x40c>
   10408:	6f ef       	ldi	r22, 0xFF	; 255
   1040a:	7f ef       	ldi	r23, 0xFF	; 255
   1040c:	c6 01       	movw	r24, r12
   1040e:	0e 94 96 8a 	call	0x1152c	; 0x1152c <strnlen_P>
   10412:	8c 01       	movw	r16, r24
   10414:	f9 2d       	mov	r31, r9
   10416:	f0 68       	ori	r31, 0x80	; 128
   10418:	9f 2e       	mov	r9, r31
   1041a:	f3 fd       	sbrc	r31, 3
   1041c:	1a c0       	rjmp	.+52     	; 0x10452 <__EEPROM_REGION_LENGTH__+0x452>
   1041e:	85 2d       	mov	r24, r5
   10420:	90 e0       	ldi	r25, 0x00	; 0
   10422:	08 17       	cp	r16, r24
   10424:	19 07       	cpc	r17, r25
   10426:	a8 f4       	brcc	.+42     	; 0x10452 <__EEPROM_REGION_LENGTH__+0x452>
   10428:	b7 01       	movw	r22, r14
   1042a:	80 e2       	ldi	r24, 0x20	; 32
   1042c:	90 e0       	ldi	r25, 0x00	; 0
   1042e:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10432:	5a 94       	dec	r5
   10434:	f4 cf       	rjmp	.-24     	; 0x1041e <__EEPROM_REGION_LENGTH__+0x41e>
   10436:	f6 01       	movw	r30, r12
   10438:	97 fc       	sbrc	r9, 7
   1043a:	85 91       	lpm	r24, Z+
   1043c:	97 fe       	sbrs	r9, 7
   1043e:	81 91       	ld	r24, Z+
   10440:	6f 01       	movw	r12, r30
   10442:	b7 01       	movw	r22, r14
   10444:	90 e0       	ldi	r25, 0x00	; 0
   10446:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   1044a:	51 10       	cpse	r5, r1
   1044c:	5a 94       	dec	r5
   1044e:	01 50       	subi	r16, 0x01	; 1
   10450:	11 09       	sbc	r17, r1
   10452:	01 15       	cp	r16, r1
   10454:	11 05       	cpc	r17, r1
   10456:	79 f7       	brne	.-34     	; 0x10436 <__EEPROM_REGION_LENGTH__+0x436>
   10458:	f7 c0       	rjmp	.+494    	; 0x10648 <__EEPROM_REGION_LENGTH__+0x648>
   1045a:	84 36       	cpi	r24, 0x64	; 100
   1045c:	11 f0       	breq	.+4      	; 0x10462 <__EEPROM_REGION_LENGTH__+0x462>
   1045e:	89 36       	cpi	r24, 0x69	; 105
   10460:	61 f5       	brne	.+88     	; 0x104ba <__EEPROM_REGION_LENGTH__+0x4ba>
   10462:	56 01       	movw	r10, r12
   10464:	97 fe       	sbrs	r9, 7
   10466:	09 c0       	rjmp	.+18     	; 0x1047a <__EEPROM_REGION_LENGTH__+0x47a>
   10468:	24 e0       	ldi	r18, 0x04	; 4
   1046a:	a2 0e       	add	r10, r18
   1046c:	b1 1c       	adc	r11, r1
   1046e:	f6 01       	movw	r30, r12
   10470:	60 81       	ld	r22, Z
   10472:	71 81       	ldd	r23, Z+1	; 0x01
   10474:	82 81       	ldd	r24, Z+2	; 0x02
   10476:	93 81       	ldd	r25, Z+3	; 0x03
   10478:	0a c0       	rjmp	.+20     	; 0x1048e <__EEPROM_REGION_LENGTH__+0x48e>
   1047a:	f2 e0       	ldi	r31, 0x02	; 2
   1047c:	af 0e       	add	r10, r31
   1047e:	b1 1c       	adc	r11, r1
   10480:	f6 01       	movw	r30, r12
   10482:	60 81       	ld	r22, Z
   10484:	71 81       	ldd	r23, Z+1	; 0x01
   10486:	07 2e       	mov	r0, r23
   10488:	00 0c       	add	r0, r0
   1048a:	88 0b       	sbc	r24, r24
   1048c:	99 0b       	sbc	r25, r25
   1048e:	f9 2d       	mov	r31, r9
   10490:	ff 76       	andi	r31, 0x6F	; 111
   10492:	9f 2e       	mov	r9, r31
   10494:	97 ff       	sbrs	r25, 7
   10496:	09 c0       	rjmp	.+18     	; 0x104aa <__EEPROM_REGION_LENGTH__+0x4aa>
   10498:	90 95       	com	r25
   1049a:	80 95       	com	r24
   1049c:	70 95       	com	r23
   1049e:	61 95       	neg	r22
   104a0:	7f 4f       	sbci	r23, 0xFF	; 255
   104a2:	8f 4f       	sbci	r24, 0xFF	; 255
   104a4:	9f 4f       	sbci	r25, 0xFF	; 255
   104a6:	f0 68       	ori	r31, 0x80	; 128
   104a8:	9f 2e       	mov	r9, r31
   104aa:	2a e0       	ldi	r18, 0x0A	; 10
   104ac:	30 e0       	ldi	r19, 0x00	; 0
   104ae:	a3 01       	movw	r20, r6
   104b0:	0e 94 ea 8b 	call	0x117d4	; 0x117d4 <__ultoa_invert>
   104b4:	c8 2e       	mov	r12, r24
   104b6:	c6 18       	sub	r12, r6
   104b8:	3f c0       	rjmp	.+126    	; 0x10538 <__EEPROM_REGION_LENGTH__+0x538>
   104ba:	09 2d       	mov	r16, r9
   104bc:	85 37       	cpi	r24, 0x75	; 117
   104be:	21 f4       	brne	.+8      	; 0x104c8 <__EEPROM_REGION_LENGTH__+0x4c8>
   104c0:	0f 7e       	andi	r16, 0xEF	; 239
   104c2:	2a e0       	ldi	r18, 0x0A	; 10
   104c4:	30 e0       	ldi	r19, 0x00	; 0
   104c6:	1d c0       	rjmp	.+58     	; 0x10502 <__EEPROM_REGION_LENGTH__+0x502>
   104c8:	09 7f       	andi	r16, 0xF9	; 249
   104ca:	8f 36       	cpi	r24, 0x6F	; 111
   104cc:	91 f0       	breq	.+36     	; 0x104f2 <__EEPROM_REGION_LENGTH__+0x4f2>
   104ce:	18 f4       	brcc	.+6      	; 0x104d6 <__EEPROM_REGION_LENGTH__+0x4d6>
   104d0:	88 35       	cpi	r24, 0x58	; 88
   104d2:	59 f0       	breq	.+22     	; 0x104ea <__EEPROM_REGION_LENGTH__+0x4ea>
   104d4:	c3 c0       	rjmp	.+390    	; 0x1065c <__EEPROM_REGION_LENGTH__+0x65c>
   104d6:	80 37       	cpi	r24, 0x70	; 112
   104d8:	19 f0       	breq	.+6      	; 0x104e0 <__EEPROM_REGION_LENGTH__+0x4e0>
   104da:	88 37       	cpi	r24, 0x78	; 120
   104dc:	11 f0       	breq	.+4      	; 0x104e2 <__EEPROM_REGION_LENGTH__+0x4e2>
   104de:	be c0       	rjmp	.+380    	; 0x1065c <__EEPROM_REGION_LENGTH__+0x65c>
   104e0:	00 61       	ori	r16, 0x10	; 16
   104e2:	04 ff       	sbrs	r16, 4
   104e4:	09 c0       	rjmp	.+18     	; 0x104f8 <__EEPROM_REGION_LENGTH__+0x4f8>
   104e6:	04 60       	ori	r16, 0x04	; 4
   104e8:	07 c0       	rjmp	.+14     	; 0x104f8 <__EEPROM_REGION_LENGTH__+0x4f8>
   104ea:	94 fe       	sbrs	r9, 4
   104ec:	08 c0       	rjmp	.+16     	; 0x104fe <__EEPROM_REGION_LENGTH__+0x4fe>
   104ee:	06 60       	ori	r16, 0x06	; 6
   104f0:	06 c0       	rjmp	.+12     	; 0x104fe <__EEPROM_REGION_LENGTH__+0x4fe>
   104f2:	28 e0       	ldi	r18, 0x08	; 8
   104f4:	30 e0       	ldi	r19, 0x00	; 0
   104f6:	05 c0       	rjmp	.+10     	; 0x10502 <__EEPROM_REGION_LENGTH__+0x502>
   104f8:	20 e1       	ldi	r18, 0x10	; 16
   104fa:	30 e0       	ldi	r19, 0x00	; 0
   104fc:	02 c0       	rjmp	.+4      	; 0x10502 <__EEPROM_REGION_LENGTH__+0x502>
   104fe:	20 e1       	ldi	r18, 0x10	; 16
   10500:	32 e0       	ldi	r19, 0x02	; 2
   10502:	56 01       	movw	r10, r12
   10504:	07 ff       	sbrs	r16, 7
   10506:	09 c0       	rjmp	.+18     	; 0x1051a <__EEPROM_REGION_LENGTH__+0x51a>
   10508:	84 e0       	ldi	r24, 0x04	; 4
   1050a:	a8 0e       	add	r10, r24
   1050c:	b1 1c       	adc	r11, r1
   1050e:	f6 01       	movw	r30, r12
   10510:	60 81       	ld	r22, Z
   10512:	71 81       	ldd	r23, Z+1	; 0x01
   10514:	82 81       	ldd	r24, Z+2	; 0x02
   10516:	93 81       	ldd	r25, Z+3	; 0x03
   10518:	08 c0       	rjmp	.+16     	; 0x1052a <__EEPROM_REGION_LENGTH__+0x52a>
   1051a:	f2 e0       	ldi	r31, 0x02	; 2
   1051c:	af 0e       	add	r10, r31
   1051e:	b1 1c       	adc	r11, r1
   10520:	f6 01       	movw	r30, r12
   10522:	60 81       	ld	r22, Z
   10524:	71 81       	ldd	r23, Z+1	; 0x01
   10526:	80 e0       	ldi	r24, 0x00	; 0
   10528:	90 e0       	ldi	r25, 0x00	; 0
   1052a:	a3 01       	movw	r20, r6
   1052c:	0e 94 ea 8b 	call	0x117d4	; 0x117d4 <__ultoa_invert>
   10530:	c8 2e       	mov	r12, r24
   10532:	c6 18       	sub	r12, r6
   10534:	0f 77       	andi	r16, 0x7F	; 127
   10536:	90 2e       	mov	r9, r16
   10538:	96 fe       	sbrs	r9, 6
   1053a:	0b c0       	rjmp	.+22     	; 0x10552 <__EEPROM_REGION_LENGTH__+0x552>
   1053c:	09 2d       	mov	r16, r9
   1053e:	0e 7f       	andi	r16, 0xFE	; 254
   10540:	c1 16       	cp	r12, r17
   10542:	50 f4       	brcc	.+20     	; 0x10558 <__EEPROM_REGION_LENGTH__+0x558>
   10544:	94 fe       	sbrs	r9, 4
   10546:	0a c0       	rjmp	.+20     	; 0x1055c <__EEPROM_REGION_LENGTH__+0x55c>
   10548:	92 fc       	sbrc	r9, 2
   1054a:	08 c0       	rjmp	.+16     	; 0x1055c <__EEPROM_REGION_LENGTH__+0x55c>
   1054c:	09 2d       	mov	r16, r9
   1054e:	0e 7e       	andi	r16, 0xEE	; 238
   10550:	05 c0       	rjmp	.+10     	; 0x1055c <__EEPROM_REGION_LENGTH__+0x55c>
   10552:	dc 2c       	mov	r13, r12
   10554:	09 2d       	mov	r16, r9
   10556:	03 c0       	rjmp	.+6      	; 0x1055e <__EEPROM_REGION_LENGTH__+0x55e>
   10558:	dc 2c       	mov	r13, r12
   1055a:	01 c0       	rjmp	.+2      	; 0x1055e <__EEPROM_REGION_LENGTH__+0x55e>
   1055c:	d1 2e       	mov	r13, r17
   1055e:	04 ff       	sbrs	r16, 4
   10560:	0d c0       	rjmp	.+26     	; 0x1057c <__EEPROM_REGION_LENGTH__+0x57c>
   10562:	fe 01       	movw	r30, r28
   10564:	ec 0d       	add	r30, r12
   10566:	f1 1d       	adc	r31, r1
   10568:	80 81       	ld	r24, Z
   1056a:	80 33       	cpi	r24, 0x30	; 48
   1056c:	11 f4       	brne	.+4      	; 0x10572 <__EEPROM_REGION_LENGTH__+0x572>
   1056e:	09 7e       	andi	r16, 0xE9	; 233
   10570:	09 c0       	rjmp	.+18     	; 0x10584 <__EEPROM_REGION_LENGTH__+0x584>
   10572:	02 ff       	sbrs	r16, 2
   10574:	06 c0       	rjmp	.+12     	; 0x10582 <__EEPROM_REGION_LENGTH__+0x582>
   10576:	d3 94       	inc	r13
   10578:	d3 94       	inc	r13
   1057a:	04 c0       	rjmp	.+8      	; 0x10584 <__EEPROM_REGION_LENGTH__+0x584>
   1057c:	80 2f       	mov	r24, r16
   1057e:	86 78       	andi	r24, 0x86	; 134
   10580:	09 f0       	breq	.+2      	; 0x10584 <__EEPROM_REGION_LENGTH__+0x584>
   10582:	d3 94       	inc	r13
   10584:	03 fd       	sbrc	r16, 3
   10586:	11 c0       	rjmp	.+34     	; 0x105aa <__EEPROM_REGION_LENGTH__+0x5aa>
   10588:	00 ff       	sbrs	r16, 0
   1058a:	06 c0       	rjmp	.+12     	; 0x10598 <__EEPROM_REGION_LENGTH__+0x598>
   1058c:	1c 2d       	mov	r17, r12
   1058e:	d5 14       	cp	r13, r5
   10590:	80 f4       	brcc	.+32     	; 0x105b2 <__EEPROM_REGION_LENGTH__+0x5b2>
   10592:	15 0d       	add	r17, r5
   10594:	1d 19       	sub	r17, r13
   10596:	0d c0       	rjmp	.+26     	; 0x105b2 <__EEPROM_REGION_LENGTH__+0x5b2>
   10598:	d5 14       	cp	r13, r5
   1059a:	58 f4       	brcc	.+22     	; 0x105b2 <__EEPROM_REGION_LENGTH__+0x5b2>
   1059c:	b7 01       	movw	r22, r14
   1059e:	80 e2       	ldi	r24, 0x20	; 32
   105a0:	90 e0       	ldi	r25, 0x00	; 0
   105a2:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   105a6:	d3 94       	inc	r13
   105a8:	f7 cf       	rjmp	.-18     	; 0x10598 <__EEPROM_REGION_LENGTH__+0x598>
   105aa:	d5 14       	cp	r13, r5
   105ac:	10 f4       	brcc	.+4      	; 0x105b2 <__EEPROM_REGION_LENGTH__+0x5b2>
   105ae:	5d 18       	sub	r5, r13
   105b0:	01 c0       	rjmp	.+2      	; 0x105b4 <__EEPROM_REGION_LENGTH__+0x5b4>
   105b2:	51 2c       	mov	r5, r1
   105b4:	04 ff       	sbrs	r16, 4
   105b6:	10 c0       	rjmp	.+32     	; 0x105d8 <__EEPROM_REGION_LENGTH__+0x5d8>
   105b8:	b7 01       	movw	r22, r14
   105ba:	80 e3       	ldi	r24, 0x30	; 48
   105bc:	90 e0       	ldi	r25, 0x00	; 0
   105be:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   105c2:	02 ff       	sbrs	r16, 2
   105c4:	17 c0       	rjmp	.+46     	; 0x105f4 <__EEPROM_REGION_LENGTH__+0x5f4>
   105c6:	01 fd       	sbrc	r16, 1
   105c8:	03 c0       	rjmp	.+6      	; 0x105d0 <__EEPROM_REGION_LENGTH__+0x5d0>
   105ca:	88 e7       	ldi	r24, 0x78	; 120
   105cc:	90 e0       	ldi	r25, 0x00	; 0
   105ce:	02 c0       	rjmp	.+4      	; 0x105d4 <__EEPROM_REGION_LENGTH__+0x5d4>
   105d0:	88 e5       	ldi	r24, 0x58	; 88
   105d2:	90 e0       	ldi	r25, 0x00	; 0
   105d4:	b7 01       	movw	r22, r14
   105d6:	0c c0       	rjmp	.+24     	; 0x105f0 <__EEPROM_REGION_LENGTH__+0x5f0>
   105d8:	80 2f       	mov	r24, r16
   105da:	86 78       	andi	r24, 0x86	; 134
   105dc:	59 f0       	breq	.+22     	; 0x105f4 <__EEPROM_REGION_LENGTH__+0x5f4>
   105de:	01 ff       	sbrs	r16, 1
   105e0:	02 c0       	rjmp	.+4      	; 0x105e6 <__EEPROM_REGION_LENGTH__+0x5e6>
   105e2:	8b e2       	ldi	r24, 0x2B	; 43
   105e4:	01 c0       	rjmp	.+2      	; 0x105e8 <__EEPROM_REGION_LENGTH__+0x5e8>
   105e6:	80 e2       	ldi	r24, 0x20	; 32
   105e8:	07 fd       	sbrc	r16, 7
   105ea:	8d e2       	ldi	r24, 0x2D	; 45
   105ec:	b7 01       	movw	r22, r14
   105ee:	90 e0       	ldi	r25, 0x00	; 0
   105f0:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   105f4:	c1 16       	cp	r12, r17
   105f6:	38 f4       	brcc	.+14     	; 0x10606 <__EEPROM_REGION_LENGTH__+0x606>
   105f8:	b7 01       	movw	r22, r14
   105fa:	80 e3       	ldi	r24, 0x30	; 48
   105fc:	90 e0       	ldi	r25, 0x00	; 0
   105fe:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10602:	11 50       	subi	r17, 0x01	; 1
   10604:	f7 cf       	rjmp	.-18     	; 0x105f4 <__EEPROM_REGION_LENGTH__+0x5f4>
   10606:	ca 94       	dec	r12
   10608:	f3 01       	movw	r30, r6
   1060a:	ec 0d       	add	r30, r12
   1060c:	f1 1d       	adc	r31, r1
   1060e:	80 81       	ld	r24, Z
   10610:	b7 01       	movw	r22, r14
   10612:	90 e0       	ldi	r25, 0x00	; 0
   10614:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10618:	c1 10       	cpse	r12, r1
   1061a:	f5 cf       	rjmp	.-22     	; 0x10606 <__EEPROM_REGION_LENGTH__+0x606>
   1061c:	15 c0       	rjmp	.+42     	; 0x10648 <__EEPROM_REGION_LENGTH__+0x648>
   1061e:	f4 e0       	ldi	r31, 0x04	; 4
   10620:	f5 15       	cp	r31, r5
   10622:	60 f5       	brcc	.+88     	; 0x1067c <__EEPROM_REGION_LENGTH__+0x67c>
   10624:	84 e0       	ldi	r24, 0x04	; 4
   10626:	58 1a       	sub	r5, r24
   10628:	93 fe       	sbrs	r9, 3
   1062a:	1f c0       	rjmp	.+62     	; 0x1066a <__EEPROM_REGION_LENGTH__+0x66a>
   1062c:	01 11       	cpse	r16, r1
   1062e:	27 c0       	rjmp	.+78     	; 0x1067e <__EEPROM_REGION_LENGTH__+0x67e>
   10630:	2c 85       	ldd	r18, Y+12	; 0x0c
   10632:	23 ff       	sbrs	r18, 3
   10634:	2a c0       	rjmp	.+84     	; 0x1068a <__EEPROM_REGION_LENGTH__+0x68a>
   10636:	08 eb       	ldi	r16, 0xB8	; 184
   10638:	12 e0       	ldi	r17, 0x02	; 2
   1063a:	39 2d       	mov	r19, r9
   1063c:	30 71       	andi	r19, 0x10	; 16
   1063e:	93 2e       	mov	r9, r19
   10640:	f8 01       	movw	r30, r16
   10642:	84 91       	lpm	r24, Z
   10644:	81 11       	cpse	r24, r1
   10646:	24 c0       	rjmp	.+72     	; 0x10690 <__EEPROM_REGION_LENGTH__+0x690>
   10648:	55 20       	and	r5, r5
   1064a:	09 f4       	brne	.+2      	; 0x1064e <__EEPROM_REGION_LENGTH__+0x64e>
   1064c:	e4 cc       	rjmp	.-1592   	; 0x10016 <__EEPROM_REGION_LENGTH__+0x16>
   1064e:	b7 01       	movw	r22, r14
   10650:	80 e2       	ldi	r24, 0x20	; 32
   10652:	90 e0       	ldi	r25, 0x00	; 0
   10654:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10658:	5a 94       	dec	r5
   1065a:	f6 cf       	rjmp	.-20     	; 0x10648 <__EEPROM_REGION_LENGTH__+0x648>
   1065c:	f7 01       	movw	r30, r14
   1065e:	86 81       	ldd	r24, Z+6	; 0x06
   10660:	97 81       	ldd	r25, Z+7	; 0x07
   10662:	26 c0       	rjmp	.+76     	; 0x106b0 <__EEPROM_REGION_LENGTH__+0x6b0>
   10664:	8f ef       	ldi	r24, 0xFF	; 255
   10666:	9f ef       	ldi	r25, 0xFF	; 255
   10668:	23 c0       	rjmp	.+70     	; 0x106b0 <__EEPROM_REGION_LENGTH__+0x6b0>
   1066a:	b7 01       	movw	r22, r14
   1066c:	80 e2       	ldi	r24, 0x20	; 32
   1066e:	90 e0       	ldi	r25, 0x00	; 0
   10670:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10674:	5a 94       	dec	r5
   10676:	51 10       	cpse	r5, r1
   10678:	f8 cf       	rjmp	.-16     	; 0x1066a <__EEPROM_REGION_LENGTH__+0x66a>
   1067a:	d8 cf       	rjmp	.-80     	; 0x1062c <__EEPROM_REGION_LENGTH__+0x62c>
   1067c:	51 2c       	mov	r5, r1
   1067e:	b7 01       	movw	r22, r14
   10680:	80 2f       	mov	r24, r16
   10682:	90 e0       	ldi	r25, 0x00	; 0
   10684:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   10688:	d3 cf       	rjmp	.-90     	; 0x10630 <__EEPROM_REGION_LENGTH__+0x630>
   1068a:	0c eb       	ldi	r16, 0xBC	; 188
   1068c:	12 e0       	ldi	r17, 0x02	; 2
   1068e:	d5 cf       	rjmp	.-86     	; 0x1063a <__EEPROM_REGION_LENGTH__+0x63a>
   10690:	91 10       	cpse	r9, r1
   10692:	80 52       	subi	r24, 0x20	; 32
   10694:	b7 01       	movw	r22, r14
   10696:	90 e0       	ldi	r25, 0x00	; 0
   10698:	0e 94 4e 8b 	call	0x1169c	; 0x1169c <fputc>
   1069c:	0f 5f       	subi	r16, 0xFF	; 255
   1069e:	1f 4f       	sbci	r17, 0xFF	; 255
   106a0:	cf cf       	rjmp	.-98     	; 0x10640 <__EEPROM_REGION_LENGTH__+0x640>
   106a2:	23 e0       	ldi	r18, 0x03	; 3
   106a4:	25 15       	cp	r18, r5
   106a6:	10 f4       	brcc	.+4      	; 0x106ac <__EEPROM_REGION_LENGTH__+0x6ac>
   106a8:	83 e0       	ldi	r24, 0x03	; 3
   106aa:	bd cf       	rjmp	.-134    	; 0x10626 <__EEPROM_REGION_LENGTH__+0x626>
   106ac:	51 2c       	mov	r5, r1
   106ae:	c0 cf       	rjmp	.-128    	; 0x10630 <__EEPROM_REGION_LENGTH__+0x630>
   106b0:	60 96       	adiw	r28, 0x10	; 16
   106b2:	cd bf       	out	0x3d, r28	; 61
   106b4:	de bf       	out	0x3e, r29	; 62
   106b6:	df 91       	pop	r29
   106b8:	cf 91       	pop	r28
   106ba:	1f 91       	pop	r17
   106bc:	0f 91       	pop	r16
   106be:	ff 90       	pop	r15
   106c0:	ef 90       	pop	r14
   106c2:	df 90       	pop	r13
   106c4:	cf 90       	pop	r12
   106c6:	bf 90       	pop	r11
   106c8:	af 90       	pop	r10
   106ca:	9f 90       	pop	r9
   106cc:	8f 90       	pop	r8
   106ce:	7f 90       	pop	r7
   106d0:	6f 90       	pop	r6
   106d2:	5f 90       	pop	r5
   106d4:	4f 90       	pop	r4
   106d6:	3f 90       	pop	r3
   106d8:	2f 90       	pop	r2
   106da:	08 95       	ret

000106dc <__subsf3>:
   106dc:	50 58       	subi	r21, 0x80	; 128

000106de <__addsf3>:
   106de:	bb 27       	eor	r27, r27
   106e0:	aa 27       	eor	r26, r26
   106e2:	0e d0       	rcall	.+28     	; 0x10700 <__addsf3x>
   106e4:	a0 c1       	rjmp	.+832    	; 0x10a26 <__fp_round>
   106e6:	69 d1       	rcall	.+722    	; 0x109ba <__fp_pscA>
   106e8:	30 f0       	brcs	.+12     	; 0x106f6 <__addsf3+0x18>
   106ea:	6e d1       	rcall	.+732    	; 0x109c8 <__fp_pscB>
   106ec:	20 f0       	brcs	.+8      	; 0x106f6 <__addsf3+0x18>
   106ee:	31 f4       	brne	.+12     	; 0x106fc <__addsf3+0x1e>
   106f0:	9f 3f       	cpi	r25, 0xFF	; 255
   106f2:	11 f4       	brne	.+4      	; 0x106f8 <__addsf3+0x1a>
   106f4:	1e f4       	brtc	.+6      	; 0x106fc <__addsf3+0x1e>
   106f6:	5e c1       	rjmp	.+700    	; 0x109b4 <__fp_nan>
   106f8:	0e f4       	brtc	.+2      	; 0x106fc <__addsf3+0x1e>
   106fa:	e0 95       	com	r30
   106fc:	e7 fb       	bst	r30, 7
   106fe:	54 c1       	rjmp	.+680    	; 0x109a8 <__fp_inf>

00010700 <__addsf3x>:
   10700:	e9 2f       	mov	r30, r25
   10702:	b3 d1       	rcall	.+870    	; 0x10a6a <__fp_split3>
   10704:	80 f3       	brcs	.-32     	; 0x106e6 <__addsf3+0x8>
   10706:	ba 17       	cp	r27, r26
   10708:	62 07       	cpc	r22, r18
   1070a:	73 07       	cpc	r23, r19
   1070c:	84 07       	cpc	r24, r20
   1070e:	95 07       	cpc	r25, r21
   10710:	18 f0       	brcs	.+6      	; 0x10718 <__addsf3x+0x18>
   10712:	71 f4       	brne	.+28     	; 0x10730 <__addsf3x+0x30>
   10714:	9e f5       	brtc	.+102    	; 0x1077c <__addsf3x+0x7c>
   10716:	cb c1       	rjmp	.+918    	; 0x10aae <__fp_zero>
   10718:	0e f4       	brtc	.+2      	; 0x1071c <__addsf3x+0x1c>
   1071a:	e0 95       	com	r30
   1071c:	0b 2e       	mov	r0, r27
   1071e:	ba 2f       	mov	r27, r26
   10720:	a0 2d       	mov	r26, r0
   10722:	0b 01       	movw	r0, r22
   10724:	b9 01       	movw	r22, r18
   10726:	90 01       	movw	r18, r0
   10728:	0c 01       	movw	r0, r24
   1072a:	ca 01       	movw	r24, r20
   1072c:	a0 01       	movw	r20, r0
   1072e:	11 24       	eor	r1, r1
   10730:	ff 27       	eor	r31, r31
   10732:	59 1b       	sub	r21, r25
   10734:	99 f0       	breq	.+38     	; 0x1075c <__addsf3x+0x5c>
   10736:	59 3f       	cpi	r21, 0xF9	; 249
   10738:	50 f4       	brcc	.+20     	; 0x1074e <__addsf3x+0x4e>
   1073a:	50 3e       	cpi	r21, 0xE0	; 224
   1073c:	68 f1       	brcs	.+90     	; 0x10798 <__addsf3x+0x98>
   1073e:	1a 16       	cp	r1, r26
   10740:	f0 40       	sbci	r31, 0x00	; 0
   10742:	a2 2f       	mov	r26, r18
   10744:	23 2f       	mov	r18, r19
   10746:	34 2f       	mov	r19, r20
   10748:	44 27       	eor	r20, r20
   1074a:	58 5f       	subi	r21, 0xF8	; 248
   1074c:	f3 cf       	rjmp	.-26     	; 0x10734 <__addsf3x+0x34>
   1074e:	46 95       	lsr	r20
   10750:	37 95       	ror	r19
   10752:	27 95       	ror	r18
   10754:	a7 95       	ror	r26
   10756:	f0 40       	sbci	r31, 0x00	; 0
   10758:	53 95       	inc	r21
   1075a:	c9 f7       	brne	.-14     	; 0x1074e <__addsf3x+0x4e>
   1075c:	7e f4       	brtc	.+30     	; 0x1077c <__addsf3x+0x7c>
   1075e:	1f 16       	cp	r1, r31
   10760:	ba 0b       	sbc	r27, r26
   10762:	62 0b       	sbc	r22, r18
   10764:	73 0b       	sbc	r23, r19
   10766:	84 0b       	sbc	r24, r20
   10768:	ba f0       	brmi	.+46     	; 0x10798 <__addsf3x+0x98>
   1076a:	91 50       	subi	r25, 0x01	; 1
   1076c:	a1 f0       	breq	.+40     	; 0x10796 <__addsf3x+0x96>
   1076e:	ff 0f       	add	r31, r31
   10770:	bb 1f       	adc	r27, r27
   10772:	66 1f       	adc	r22, r22
   10774:	77 1f       	adc	r23, r23
   10776:	88 1f       	adc	r24, r24
   10778:	c2 f7       	brpl	.-16     	; 0x1076a <__addsf3x+0x6a>
   1077a:	0e c0       	rjmp	.+28     	; 0x10798 <__addsf3x+0x98>
   1077c:	ba 0f       	add	r27, r26
   1077e:	62 1f       	adc	r22, r18
   10780:	73 1f       	adc	r23, r19
   10782:	84 1f       	adc	r24, r20
   10784:	48 f4       	brcc	.+18     	; 0x10798 <__addsf3x+0x98>
   10786:	87 95       	ror	r24
   10788:	77 95       	ror	r23
   1078a:	67 95       	ror	r22
   1078c:	b7 95       	ror	r27
   1078e:	f7 95       	ror	r31
   10790:	9e 3f       	cpi	r25, 0xFE	; 254
   10792:	08 f0       	brcs	.+2      	; 0x10796 <__addsf3x+0x96>
   10794:	b3 cf       	rjmp	.-154    	; 0x106fc <__addsf3+0x1e>
   10796:	93 95       	inc	r25
   10798:	88 0f       	add	r24, r24
   1079a:	08 f0       	brcs	.+2      	; 0x1079e <__addsf3x+0x9e>
   1079c:	99 27       	eor	r25, r25
   1079e:	ee 0f       	add	r30, r30
   107a0:	97 95       	ror	r25
   107a2:	87 95       	ror	r24
   107a4:	08 95       	ret

000107a6 <__cmpsf2>:
   107a6:	dc d0       	rcall	.+440    	; 0x10960 <__fp_cmp>
   107a8:	08 f4       	brcc	.+2      	; 0x107ac <__cmpsf2+0x6>
   107aa:	81 e0       	ldi	r24, 0x01	; 1
   107ac:	08 95       	ret

000107ae <cos>:
   107ae:	14 d1       	rcall	.+552    	; 0x109d8 <__fp_rempio2>
   107b0:	e3 95       	inc	r30
   107b2:	4a c1       	rjmp	.+660    	; 0x10a48 <__fp_sinus>

000107b4 <__divsf3>:
   107b4:	0c d0       	rcall	.+24     	; 0x107ce <__divsf3x>
   107b6:	37 c1       	rjmp	.+622    	; 0x10a26 <__fp_round>
   107b8:	07 d1       	rcall	.+526    	; 0x109c8 <__fp_pscB>
   107ba:	40 f0       	brcs	.+16     	; 0x107cc <__divsf3+0x18>
   107bc:	fe d0       	rcall	.+508    	; 0x109ba <__fp_pscA>
   107be:	30 f0       	brcs	.+12     	; 0x107cc <__divsf3+0x18>
   107c0:	21 f4       	brne	.+8      	; 0x107ca <__divsf3+0x16>
   107c2:	5f 3f       	cpi	r21, 0xFF	; 255
   107c4:	19 f0       	breq	.+6      	; 0x107cc <__divsf3+0x18>
   107c6:	f0 c0       	rjmp	.+480    	; 0x109a8 <__fp_inf>
   107c8:	51 11       	cpse	r21, r1
   107ca:	72 c1       	rjmp	.+740    	; 0x10ab0 <__fp_szero>
   107cc:	f3 c0       	rjmp	.+486    	; 0x109b4 <__fp_nan>

000107ce <__divsf3x>:
   107ce:	4d d1       	rcall	.+666    	; 0x10a6a <__fp_split3>
   107d0:	98 f3       	brcs	.-26     	; 0x107b8 <__divsf3+0x4>

000107d2 <__divsf3_pse>:
   107d2:	99 23       	and	r25, r25
   107d4:	c9 f3       	breq	.-14     	; 0x107c8 <__divsf3+0x14>
   107d6:	55 23       	and	r21, r21
   107d8:	b1 f3       	breq	.-20     	; 0x107c6 <__divsf3+0x12>
   107da:	95 1b       	sub	r25, r21
   107dc:	55 0b       	sbc	r21, r21
   107de:	bb 27       	eor	r27, r27
   107e0:	aa 27       	eor	r26, r26
   107e2:	62 17       	cp	r22, r18
   107e4:	73 07       	cpc	r23, r19
   107e6:	84 07       	cpc	r24, r20
   107e8:	38 f0       	brcs	.+14     	; 0x107f8 <__divsf3_pse+0x26>
   107ea:	9f 5f       	subi	r25, 0xFF	; 255
   107ec:	5f 4f       	sbci	r21, 0xFF	; 255
   107ee:	22 0f       	add	r18, r18
   107f0:	33 1f       	adc	r19, r19
   107f2:	44 1f       	adc	r20, r20
   107f4:	aa 1f       	adc	r26, r26
   107f6:	a9 f3       	breq	.-22     	; 0x107e2 <__divsf3_pse+0x10>
   107f8:	33 d0       	rcall	.+102    	; 0x10860 <__divsf3_pse+0x8e>
   107fa:	0e 2e       	mov	r0, r30
   107fc:	3a f0       	brmi	.+14     	; 0x1080c <__divsf3_pse+0x3a>
   107fe:	e0 e8       	ldi	r30, 0x80	; 128
   10800:	30 d0       	rcall	.+96     	; 0x10862 <__divsf3_pse+0x90>
   10802:	91 50       	subi	r25, 0x01	; 1
   10804:	50 40       	sbci	r21, 0x00	; 0
   10806:	e6 95       	lsr	r30
   10808:	00 1c       	adc	r0, r0
   1080a:	ca f7       	brpl	.-14     	; 0x107fe <__divsf3_pse+0x2c>
   1080c:	29 d0       	rcall	.+82     	; 0x10860 <__divsf3_pse+0x8e>
   1080e:	fe 2f       	mov	r31, r30
   10810:	27 d0       	rcall	.+78     	; 0x10860 <__divsf3_pse+0x8e>
   10812:	66 0f       	add	r22, r22
   10814:	77 1f       	adc	r23, r23
   10816:	88 1f       	adc	r24, r24
   10818:	bb 1f       	adc	r27, r27
   1081a:	26 17       	cp	r18, r22
   1081c:	37 07       	cpc	r19, r23
   1081e:	48 07       	cpc	r20, r24
   10820:	ab 07       	cpc	r26, r27
   10822:	b0 e8       	ldi	r27, 0x80	; 128
   10824:	09 f0       	breq	.+2      	; 0x10828 <__divsf3_pse+0x56>
   10826:	bb 0b       	sbc	r27, r27
   10828:	80 2d       	mov	r24, r0
   1082a:	bf 01       	movw	r22, r30
   1082c:	ff 27       	eor	r31, r31
   1082e:	93 58       	subi	r25, 0x83	; 131
   10830:	5f 4f       	sbci	r21, 0xFF	; 255
   10832:	2a f0       	brmi	.+10     	; 0x1083e <__divsf3_pse+0x6c>
   10834:	9e 3f       	cpi	r25, 0xFE	; 254
   10836:	51 05       	cpc	r21, r1
   10838:	68 f0       	brcs	.+26     	; 0x10854 <__divsf3_pse+0x82>
   1083a:	b6 c0       	rjmp	.+364    	; 0x109a8 <__fp_inf>
   1083c:	39 c1       	rjmp	.+626    	; 0x10ab0 <__fp_szero>
   1083e:	5f 3f       	cpi	r21, 0xFF	; 255
   10840:	ec f3       	brlt	.-6      	; 0x1083c <__divsf3_pse+0x6a>
   10842:	98 3e       	cpi	r25, 0xE8	; 232
   10844:	dc f3       	brlt	.-10     	; 0x1083c <__divsf3_pse+0x6a>
   10846:	86 95       	lsr	r24
   10848:	77 95       	ror	r23
   1084a:	67 95       	ror	r22
   1084c:	b7 95       	ror	r27
   1084e:	f7 95       	ror	r31
   10850:	9f 5f       	subi	r25, 0xFF	; 255
   10852:	c9 f7       	brne	.-14     	; 0x10846 <__divsf3_pse+0x74>
   10854:	88 0f       	add	r24, r24
   10856:	91 1d       	adc	r25, r1
   10858:	96 95       	lsr	r25
   1085a:	87 95       	ror	r24
   1085c:	97 f9       	bld	r25, 7
   1085e:	08 95       	ret
   10860:	e1 e0       	ldi	r30, 0x01	; 1
   10862:	66 0f       	add	r22, r22
   10864:	77 1f       	adc	r23, r23
   10866:	88 1f       	adc	r24, r24
   10868:	bb 1f       	adc	r27, r27
   1086a:	62 17       	cp	r22, r18
   1086c:	73 07       	cpc	r23, r19
   1086e:	84 07       	cpc	r24, r20
   10870:	ba 07       	cpc	r27, r26
   10872:	20 f0       	brcs	.+8      	; 0x1087c <__divsf3_pse+0xaa>
   10874:	62 1b       	sub	r22, r18
   10876:	73 0b       	sbc	r23, r19
   10878:	84 0b       	sbc	r24, r20
   1087a:	ba 0b       	sbc	r27, r26
   1087c:	ee 1f       	adc	r30, r30
   1087e:	88 f7       	brcc	.-30     	; 0x10862 <__divsf3_pse+0x90>
   10880:	e0 95       	com	r30
   10882:	08 95       	ret

00010884 <__fixsfsi>:
   10884:	04 d0       	rcall	.+8      	; 0x1088e <__fixunssfsi>
   10886:	68 94       	set
   10888:	b1 11       	cpse	r27, r1
   1088a:	12 c1       	rjmp	.+548    	; 0x10ab0 <__fp_szero>
   1088c:	08 95       	ret

0001088e <__fixunssfsi>:
   1088e:	f5 d0       	rcall	.+490    	; 0x10a7a <__fp_splitA>
   10890:	88 f0       	brcs	.+34     	; 0x108b4 <__fixunssfsi+0x26>
   10892:	9f 57       	subi	r25, 0x7F	; 127
   10894:	90 f0       	brcs	.+36     	; 0x108ba <__fixunssfsi+0x2c>
   10896:	b9 2f       	mov	r27, r25
   10898:	99 27       	eor	r25, r25
   1089a:	b7 51       	subi	r27, 0x17	; 23
   1089c:	a0 f0       	brcs	.+40     	; 0x108c6 <__fixunssfsi+0x38>
   1089e:	d1 f0       	breq	.+52     	; 0x108d4 <__fixunssfsi+0x46>
   108a0:	66 0f       	add	r22, r22
   108a2:	77 1f       	adc	r23, r23
   108a4:	88 1f       	adc	r24, r24
   108a6:	99 1f       	adc	r25, r25
   108a8:	1a f0       	brmi	.+6      	; 0x108b0 <__fixunssfsi+0x22>
   108aa:	ba 95       	dec	r27
   108ac:	c9 f7       	brne	.-14     	; 0x108a0 <__fixunssfsi+0x12>
   108ae:	12 c0       	rjmp	.+36     	; 0x108d4 <__fixunssfsi+0x46>
   108b0:	b1 30       	cpi	r27, 0x01	; 1
   108b2:	81 f0       	breq	.+32     	; 0x108d4 <__fixunssfsi+0x46>
   108b4:	fc d0       	rcall	.+504    	; 0x10aae <__fp_zero>
   108b6:	b1 e0       	ldi	r27, 0x01	; 1
   108b8:	08 95       	ret
   108ba:	f9 c0       	rjmp	.+498    	; 0x10aae <__fp_zero>
   108bc:	67 2f       	mov	r22, r23
   108be:	78 2f       	mov	r23, r24
   108c0:	88 27       	eor	r24, r24
   108c2:	b8 5f       	subi	r27, 0xF8	; 248
   108c4:	39 f0       	breq	.+14     	; 0x108d4 <__fixunssfsi+0x46>
   108c6:	b9 3f       	cpi	r27, 0xF9	; 249
   108c8:	cc f3       	brlt	.-14     	; 0x108bc <__fixunssfsi+0x2e>
   108ca:	86 95       	lsr	r24
   108cc:	77 95       	ror	r23
   108ce:	67 95       	ror	r22
   108d0:	b3 95       	inc	r27
   108d2:	d9 f7       	brne	.-10     	; 0x108ca <__fixunssfsi+0x3c>
   108d4:	3e f4       	brtc	.+14     	; 0x108e4 <__fixunssfsi+0x56>
   108d6:	90 95       	com	r25
   108d8:	80 95       	com	r24
   108da:	70 95       	com	r23
   108dc:	61 95       	neg	r22
   108de:	7f 4f       	sbci	r23, 0xFF	; 255
   108e0:	8f 4f       	sbci	r24, 0xFF	; 255
   108e2:	9f 4f       	sbci	r25, 0xFF	; 255
   108e4:	08 95       	ret

000108e6 <__floatunsisf>:
   108e6:	e8 94       	clt
   108e8:	09 c0       	rjmp	.+18     	; 0x108fc <__floatsisf+0x12>

000108ea <__floatsisf>:
   108ea:	97 fb       	bst	r25, 7
   108ec:	3e f4       	brtc	.+14     	; 0x108fc <__floatsisf+0x12>
   108ee:	90 95       	com	r25
   108f0:	80 95       	com	r24
   108f2:	70 95       	com	r23
   108f4:	61 95       	neg	r22
   108f6:	7f 4f       	sbci	r23, 0xFF	; 255
   108f8:	8f 4f       	sbci	r24, 0xFF	; 255
   108fa:	9f 4f       	sbci	r25, 0xFF	; 255
   108fc:	99 23       	and	r25, r25
   108fe:	a9 f0       	breq	.+42     	; 0x1092a <__floatsisf+0x40>
   10900:	f9 2f       	mov	r31, r25
   10902:	96 e9       	ldi	r25, 0x96	; 150
   10904:	bb 27       	eor	r27, r27
   10906:	93 95       	inc	r25
   10908:	f6 95       	lsr	r31
   1090a:	87 95       	ror	r24
   1090c:	77 95       	ror	r23
   1090e:	67 95       	ror	r22
   10910:	b7 95       	ror	r27
   10912:	f1 11       	cpse	r31, r1
   10914:	f8 cf       	rjmp	.-16     	; 0x10906 <__floatsisf+0x1c>
   10916:	fa f4       	brpl	.+62     	; 0x10956 <__floatsisf+0x6c>
   10918:	bb 0f       	add	r27, r27
   1091a:	11 f4       	brne	.+4      	; 0x10920 <__floatsisf+0x36>
   1091c:	60 ff       	sbrs	r22, 0
   1091e:	1b c0       	rjmp	.+54     	; 0x10956 <__floatsisf+0x6c>
   10920:	6f 5f       	subi	r22, 0xFF	; 255
   10922:	7f 4f       	sbci	r23, 0xFF	; 255
   10924:	8f 4f       	sbci	r24, 0xFF	; 255
   10926:	9f 4f       	sbci	r25, 0xFF	; 255
   10928:	16 c0       	rjmp	.+44     	; 0x10956 <__floatsisf+0x6c>
   1092a:	88 23       	and	r24, r24
   1092c:	11 f0       	breq	.+4      	; 0x10932 <__floatsisf+0x48>
   1092e:	96 e9       	ldi	r25, 0x96	; 150
   10930:	11 c0       	rjmp	.+34     	; 0x10954 <__floatsisf+0x6a>
   10932:	77 23       	and	r23, r23
   10934:	21 f0       	breq	.+8      	; 0x1093e <__floatsisf+0x54>
   10936:	9e e8       	ldi	r25, 0x8E	; 142
   10938:	87 2f       	mov	r24, r23
   1093a:	76 2f       	mov	r23, r22
   1093c:	05 c0       	rjmp	.+10     	; 0x10948 <__floatsisf+0x5e>
   1093e:	66 23       	and	r22, r22
   10940:	71 f0       	breq	.+28     	; 0x1095e <__floatsisf+0x74>
   10942:	96 e8       	ldi	r25, 0x86	; 134
   10944:	86 2f       	mov	r24, r22
   10946:	70 e0       	ldi	r23, 0x00	; 0
   10948:	60 e0       	ldi	r22, 0x00	; 0
   1094a:	2a f0       	brmi	.+10     	; 0x10956 <__floatsisf+0x6c>
   1094c:	9a 95       	dec	r25
   1094e:	66 0f       	add	r22, r22
   10950:	77 1f       	adc	r23, r23
   10952:	88 1f       	adc	r24, r24
   10954:	da f7       	brpl	.-10     	; 0x1094c <__floatsisf+0x62>
   10956:	88 0f       	add	r24, r24
   10958:	96 95       	lsr	r25
   1095a:	87 95       	ror	r24
   1095c:	97 f9       	bld	r25, 7
   1095e:	08 95       	ret

00010960 <__fp_cmp>:
   10960:	99 0f       	add	r25, r25
   10962:	00 08       	sbc	r0, r0
   10964:	55 0f       	add	r21, r21
   10966:	aa 0b       	sbc	r26, r26
   10968:	e0 e8       	ldi	r30, 0x80	; 128
   1096a:	fe ef       	ldi	r31, 0xFE	; 254
   1096c:	16 16       	cp	r1, r22
   1096e:	17 06       	cpc	r1, r23
   10970:	e8 07       	cpc	r30, r24
   10972:	f9 07       	cpc	r31, r25
   10974:	c0 f0       	brcs	.+48     	; 0x109a6 <__fp_cmp+0x46>
   10976:	12 16       	cp	r1, r18
   10978:	13 06       	cpc	r1, r19
   1097a:	e4 07       	cpc	r30, r20
   1097c:	f5 07       	cpc	r31, r21
   1097e:	98 f0       	brcs	.+38     	; 0x109a6 <__fp_cmp+0x46>
   10980:	62 1b       	sub	r22, r18
   10982:	73 0b       	sbc	r23, r19
   10984:	84 0b       	sbc	r24, r20
   10986:	95 0b       	sbc	r25, r21
   10988:	39 f4       	brne	.+14     	; 0x10998 <__fp_cmp+0x38>
   1098a:	0a 26       	eor	r0, r26
   1098c:	61 f0       	breq	.+24     	; 0x109a6 <__fp_cmp+0x46>
   1098e:	23 2b       	or	r18, r19
   10990:	24 2b       	or	r18, r20
   10992:	25 2b       	or	r18, r21
   10994:	21 f4       	brne	.+8      	; 0x1099e <__fp_cmp+0x3e>
   10996:	08 95       	ret
   10998:	0a 26       	eor	r0, r26
   1099a:	09 f4       	brne	.+2      	; 0x1099e <__fp_cmp+0x3e>
   1099c:	a1 40       	sbci	r26, 0x01	; 1
   1099e:	a6 95       	lsr	r26
   109a0:	8f ef       	ldi	r24, 0xFF	; 255
   109a2:	81 1d       	adc	r24, r1
   109a4:	81 1d       	adc	r24, r1
   109a6:	08 95       	ret

000109a8 <__fp_inf>:
   109a8:	97 f9       	bld	r25, 7
   109aa:	9f 67       	ori	r25, 0x7F	; 127
   109ac:	80 e8       	ldi	r24, 0x80	; 128
   109ae:	70 e0       	ldi	r23, 0x00	; 0
   109b0:	60 e0       	ldi	r22, 0x00	; 0
   109b2:	08 95       	ret

000109b4 <__fp_nan>:
   109b4:	9f ef       	ldi	r25, 0xFF	; 255
   109b6:	80 ec       	ldi	r24, 0xC0	; 192
   109b8:	08 95       	ret

000109ba <__fp_pscA>:
   109ba:	00 24       	eor	r0, r0
   109bc:	0a 94       	dec	r0
   109be:	16 16       	cp	r1, r22
   109c0:	17 06       	cpc	r1, r23
   109c2:	18 06       	cpc	r1, r24
   109c4:	09 06       	cpc	r0, r25
   109c6:	08 95       	ret

000109c8 <__fp_pscB>:
   109c8:	00 24       	eor	r0, r0
   109ca:	0a 94       	dec	r0
   109cc:	12 16       	cp	r1, r18
   109ce:	13 06       	cpc	r1, r19
   109d0:	14 06       	cpc	r1, r20
   109d2:	05 06       	cpc	r0, r21
   109d4:	08 95       	ret
   109d6:	ee cf       	rjmp	.-36     	; 0x109b4 <__fp_nan>

000109d8 <__fp_rempio2>:
   109d8:	50 d0       	rcall	.+160    	; 0x10a7a <__fp_splitA>
   109da:	e8 f3       	brcs	.-6      	; 0x109d6 <__fp_pscB+0xe>
   109dc:	e8 94       	clt
   109de:	e0 e0       	ldi	r30, 0x00	; 0
   109e0:	bb 27       	eor	r27, r27
   109e2:	9f 57       	subi	r25, 0x7F	; 127
   109e4:	f0 f0       	brcs	.+60     	; 0x10a22 <__fp_rempio2+0x4a>
   109e6:	2a ed       	ldi	r18, 0xDA	; 218
   109e8:	3f e0       	ldi	r19, 0x0F	; 15
   109ea:	49 ec       	ldi	r20, 0xC9	; 201
   109ec:	06 c0       	rjmp	.+12     	; 0x109fa <__fp_rempio2+0x22>
   109ee:	ee 0f       	add	r30, r30
   109f0:	bb 0f       	add	r27, r27
   109f2:	66 1f       	adc	r22, r22
   109f4:	77 1f       	adc	r23, r23
   109f6:	88 1f       	adc	r24, r24
   109f8:	28 f0       	brcs	.+10     	; 0x10a04 <__fp_rempio2+0x2c>
   109fa:	b2 3a       	cpi	r27, 0xA2	; 162
   109fc:	62 07       	cpc	r22, r18
   109fe:	73 07       	cpc	r23, r19
   10a00:	84 07       	cpc	r24, r20
   10a02:	28 f0       	brcs	.+10     	; 0x10a0e <__fp_rempio2+0x36>
   10a04:	b2 5a       	subi	r27, 0xA2	; 162
   10a06:	62 0b       	sbc	r22, r18
   10a08:	73 0b       	sbc	r23, r19
   10a0a:	84 0b       	sbc	r24, r20
   10a0c:	e3 95       	inc	r30
   10a0e:	9a 95       	dec	r25
   10a10:	72 f7       	brpl	.-36     	; 0x109ee <__fp_rempio2+0x16>
   10a12:	80 38       	cpi	r24, 0x80	; 128
   10a14:	30 f4       	brcc	.+12     	; 0x10a22 <__fp_rempio2+0x4a>
   10a16:	9a 95       	dec	r25
   10a18:	bb 0f       	add	r27, r27
   10a1a:	66 1f       	adc	r22, r22
   10a1c:	77 1f       	adc	r23, r23
   10a1e:	88 1f       	adc	r24, r24
   10a20:	d2 f7       	brpl	.-12     	; 0x10a16 <__fp_rempio2+0x3e>
   10a22:	90 48       	sbci	r25, 0x80	; 128
   10a24:	37 c1       	rjmp	.+622    	; 0x10c94 <__fp_mpack_finite>

00010a26 <__fp_round>:
   10a26:	09 2e       	mov	r0, r25
   10a28:	03 94       	inc	r0
   10a2a:	00 0c       	add	r0, r0
   10a2c:	11 f4       	brne	.+4      	; 0x10a32 <__fp_round+0xc>
   10a2e:	88 23       	and	r24, r24
   10a30:	52 f0       	brmi	.+20     	; 0x10a46 <__fp_round+0x20>
   10a32:	bb 0f       	add	r27, r27
   10a34:	40 f4       	brcc	.+16     	; 0x10a46 <__fp_round+0x20>
   10a36:	bf 2b       	or	r27, r31
   10a38:	11 f4       	brne	.+4      	; 0x10a3e <__fp_round+0x18>
   10a3a:	60 ff       	sbrs	r22, 0
   10a3c:	04 c0       	rjmp	.+8      	; 0x10a46 <__fp_round+0x20>
   10a3e:	6f 5f       	subi	r22, 0xFF	; 255
   10a40:	7f 4f       	sbci	r23, 0xFF	; 255
   10a42:	8f 4f       	sbci	r24, 0xFF	; 255
   10a44:	9f 4f       	sbci	r25, 0xFF	; 255
   10a46:	08 95       	ret

00010a48 <__fp_sinus>:
   10a48:	ef 93       	push	r30
   10a4a:	e0 ff       	sbrs	r30, 0
   10a4c:	06 c0       	rjmp	.+12     	; 0x10a5a <__fp_sinus+0x12>
   10a4e:	a2 ea       	ldi	r26, 0xA2	; 162
   10a50:	2a ed       	ldi	r18, 0xDA	; 218
   10a52:	3f e0       	ldi	r19, 0x0F	; 15
   10a54:	49 ec       	ldi	r20, 0xC9	; 201
   10a56:	5f eb       	ldi	r21, 0xBF	; 191
   10a58:	53 de       	rcall	.-858    	; 0x10700 <__addsf3x>
   10a5a:	e5 df       	rcall	.-54     	; 0x10a26 <__fp_round>
   10a5c:	0f 90       	pop	r0
   10a5e:	03 94       	inc	r0
   10a60:	01 fc       	sbrc	r0, 1
   10a62:	90 58       	subi	r25, 0x80	; 128
   10a64:	e8 e1       	ldi	r30, 0x18	; 24
   10a66:	f2 e0       	ldi	r31, 0x02	; 2
   10a68:	46 c1       	rjmp	.+652    	; 0x10cf6 <__fp_powsodd>

00010a6a <__fp_split3>:
   10a6a:	57 fd       	sbrc	r21, 7
   10a6c:	90 58       	subi	r25, 0x80	; 128
   10a6e:	44 0f       	add	r20, r20
   10a70:	55 1f       	adc	r21, r21
   10a72:	59 f0       	breq	.+22     	; 0x10a8a <__fp_splitA+0x10>
   10a74:	5f 3f       	cpi	r21, 0xFF	; 255
   10a76:	71 f0       	breq	.+28     	; 0x10a94 <__fp_splitA+0x1a>
   10a78:	47 95       	ror	r20

00010a7a <__fp_splitA>:
   10a7a:	88 0f       	add	r24, r24
   10a7c:	97 fb       	bst	r25, 7
   10a7e:	99 1f       	adc	r25, r25
   10a80:	61 f0       	breq	.+24     	; 0x10a9a <__fp_splitA+0x20>
   10a82:	9f 3f       	cpi	r25, 0xFF	; 255
   10a84:	79 f0       	breq	.+30     	; 0x10aa4 <__fp_splitA+0x2a>
   10a86:	87 95       	ror	r24
   10a88:	08 95       	ret
   10a8a:	12 16       	cp	r1, r18
   10a8c:	13 06       	cpc	r1, r19
   10a8e:	14 06       	cpc	r1, r20
   10a90:	55 1f       	adc	r21, r21
   10a92:	f2 cf       	rjmp	.-28     	; 0x10a78 <__fp_split3+0xe>
   10a94:	46 95       	lsr	r20
   10a96:	f1 df       	rcall	.-30     	; 0x10a7a <__fp_splitA>
   10a98:	08 c0       	rjmp	.+16     	; 0x10aaa <__fp_splitA+0x30>
   10a9a:	16 16       	cp	r1, r22
   10a9c:	17 06       	cpc	r1, r23
   10a9e:	18 06       	cpc	r1, r24
   10aa0:	99 1f       	adc	r25, r25
   10aa2:	f1 cf       	rjmp	.-30     	; 0x10a86 <__fp_splitA+0xc>
   10aa4:	86 95       	lsr	r24
   10aa6:	71 05       	cpc	r23, r1
   10aa8:	61 05       	cpc	r22, r1
   10aaa:	08 94       	sec
   10aac:	08 95       	ret

00010aae <__fp_zero>:
   10aae:	e8 94       	clt

00010ab0 <__fp_szero>:
   10ab0:	bb 27       	eor	r27, r27
   10ab2:	66 27       	eor	r22, r22
   10ab4:	77 27       	eor	r23, r23
   10ab6:	cb 01       	movw	r24, r22
   10ab8:	97 f9       	bld	r25, 7
   10aba:	08 95       	ret

00010abc <__gesf2>:
   10abc:	51 df       	rcall	.-350    	; 0x10960 <__fp_cmp>
   10abe:	08 f4       	brcc	.+2      	; 0x10ac2 <__gesf2+0x6>
   10ac0:	8f ef       	ldi	r24, 0xFF	; 255
   10ac2:	08 95       	ret

00010ac4 <__mulsf3>:
   10ac4:	0b d0       	rcall	.+22     	; 0x10adc <__mulsf3x>
   10ac6:	af cf       	rjmp	.-162    	; 0x10a26 <__fp_round>
   10ac8:	78 df       	rcall	.-272    	; 0x109ba <__fp_pscA>
   10aca:	28 f0       	brcs	.+10     	; 0x10ad6 <__mulsf3+0x12>
   10acc:	7d df       	rcall	.-262    	; 0x109c8 <__fp_pscB>
   10ace:	18 f0       	brcs	.+6      	; 0x10ad6 <__mulsf3+0x12>
   10ad0:	95 23       	and	r25, r21
   10ad2:	09 f0       	breq	.+2      	; 0x10ad6 <__mulsf3+0x12>
   10ad4:	69 cf       	rjmp	.-302    	; 0x109a8 <__fp_inf>
   10ad6:	6e cf       	rjmp	.-292    	; 0x109b4 <__fp_nan>
   10ad8:	11 24       	eor	r1, r1
   10ada:	ea cf       	rjmp	.-44     	; 0x10ab0 <__fp_szero>

00010adc <__mulsf3x>:
   10adc:	c6 df       	rcall	.-116    	; 0x10a6a <__fp_split3>
   10ade:	a0 f3       	brcs	.-24     	; 0x10ac8 <__mulsf3+0x4>

00010ae0 <__mulsf3_pse>:
   10ae0:	95 9f       	mul	r25, r21
   10ae2:	d1 f3       	breq	.-12     	; 0x10ad8 <__mulsf3+0x14>
   10ae4:	95 0f       	add	r25, r21
   10ae6:	50 e0       	ldi	r21, 0x00	; 0
   10ae8:	55 1f       	adc	r21, r21
   10aea:	62 9f       	mul	r22, r18
   10aec:	f0 01       	movw	r30, r0
   10aee:	72 9f       	mul	r23, r18
   10af0:	bb 27       	eor	r27, r27
   10af2:	f0 0d       	add	r31, r0
   10af4:	b1 1d       	adc	r27, r1
   10af6:	63 9f       	mul	r22, r19
   10af8:	aa 27       	eor	r26, r26
   10afa:	f0 0d       	add	r31, r0
   10afc:	b1 1d       	adc	r27, r1
   10afe:	aa 1f       	adc	r26, r26
   10b00:	64 9f       	mul	r22, r20
   10b02:	66 27       	eor	r22, r22
   10b04:	b0 0d       	add	r27, r0
   10b06:	a1 1d       	adc	r26, r1
   10b08:	66 1f       	adc	r22, r22
   10b0a:	82 9f       	mul	r24, r18
   10b0c:	22 27       	eor	r18, r18
   10b0e:	b0 0d       	add	r27, r0
   10b10:	a1 1d       	adc	r26, r1
   10b12:	62 1f       	adc	r22, r18
   10b14:	73 9f       	mul	r23, r19
   10b16:	b0 0d       	add	r27, r0
   10b18:	a1 1d       	adc	r26, r1
   10b1a:	62 1f       	adc	r22, r18
   10b1c:	83 9f       	mul	r24, r19
   10b1e:	a0 0d       	add	r26, r0
   10b20:	61 1d       	adc	r22, r1
   10b22:	22 1f       	adc	r18, r18
   10b24:	74 9f       	mul	r23, r20
   10b26:	33 27       	eor	r19, r19
   10b28:	a0 0d       	add	r26, r0
   10b2a:	61 1d       	adc	r22, r1
   10b2c:	23 1f       	adc	r18, r19
   10b2e:	84 9f       	mul	r24, r20
   10b30:	60 0d       	add	r22, r0
   10b32:	21 1d       	adc	r18, r1
   10b34:	82 2f       	mov	r24, r18
   10b36:	76 2f       	mov	r23, r22
   10b38:	6a 2f       	mov	r22, r26
   10b3a:	11 24       	eor	r1, r1
   10b3c:	9f 57       	subi	r25, 0x7F	; 127
   10b3e:	50 40       	sbci	r21, 0x00	; 0
   10b40:	8a f0       	brmi	.+34     	; 0x10b64 <__mulsf3_pse+0x84>
   10b42:	e1 f0       	breq	.+56     	; 0x10b7c <__mulsf3_pse+0x9c>
   10b44:	88 23       	and	r24, r24
   10b46:	4a f0       	brmi	.+18     	; 0x10b5a <__mulsf3_pse+0x7a>
   10b48:	ee 0f       	add	r30, r30
   10b4a:	ff 1f       	adc	r31, r31
   10b4c:	bb 1f       	adc	r27, r27
   10b4e:	66 1f       	adc	r22, r22
   10b50:	77 1f       	adc	r23, r23
   10b52:	88 1f       	adc	r24, r24
   10b54:	91 50       	subi	r25, 0x01	; 1
   10b56:	50 40       	sbci	r21, 0x00	; 0
   10b58:	a9 f7       	brne	.-22     	; 0x10b44 <__mulsf3_pse+0x64>
   10b5a:	9e 3f       	cpi	r25, 0xFE	; 254
   10b5c:	51 05       	cpc	r21, r1
   10b5e:	70 f0       	brcs	.+28     	; 0x10b7c <__mulsf3_pse+0x9c>
   10b60:	23 cf       	rjmp	.-442    	; 0x109a8 <__fp_inf>
   10b62:	a6 cf       	rjmp	.-180    	; 0x10ab0 <__fp_szero>
   10b64:	5f 3f       	cpi	r21, 0xFF	; 255
   10b66:	ec f3       	brlt	.-6      	; 0x10b62 <__mulsf3_pse+0x82>
   10b68:	98 3e       	cpi	r25, 0xE8	; 232
   10b6a:	dc f3       	brlt	.-10     	; 0x10b62 <__mulsf3_pse+0x82>
   10b6c:	86 95       	lsr	r24
   10b6e:	77 95       	ror	r23
   10b70:	67 95       	ror	r22
   10b72:	b7 95       	ror	r27
   10b74:	f7 95       	ror	r31
   10b76:	e7 95       	ror	r30
   10b78:	9f 5f       	subi	r25, 0xFF	; 255
   10b7a:	c1 f7       	brne	.-16     	; 0x10b6c <__mulsf3_pse+0x8c>
   10b7c:	fe 2b       	or	r31, r30
   10b7e:	88 0f       	add	r24, r24
   10b80:	91 1d       	adc	r25, r1
   10b82:	96 95       	lsr	r25
   10b84:	87 95       	ror	r24
   10b86:	97 f9       	bld	r25, 7
   10b88:	08 95       	ret

00010b8a <pow>:
   10b8a:	fa 01       	movw	r30, r20
   10b8c:	ee 0f       	add	r30, r30
   10b8e:	ff 1f       	adc	r31, r31
   10b90:	30 96       	adiw	r30, 0x00	; 0
   10b92:	21 05       	cpc	r18, r1
   10b94:	31 05       	cpc	r19, r1
   10b96:	99 f1       	breq	.+102    	; 0x10bfe <pow+0x74>
   10b98:	61 15       	cp	r22, r1
   10b9a:	71 05       	cpc	r23, r1
   10b9c:	61 f4       	brne	.+24     	; 0x10bb6 <pow+0x2c>
   10b9e:	80 38       	cpi	r24, 0x80	; 128
   10ba0:	bf e3       	ldi	r27, 0x3F	; 63
   10ba2:	9b 07       	cpc	r25, r27
   10ba4:	49 f1       	breq	.+82     	; 0x10bf8 <pow+0x6e>
   10ba6:	68 94       	set
   10ba8:	90 38       	cpi	r25, 0x80	; 128
   10baa:	81 05       	cpc	r24, r1
   10bac:	61 f0       	breq	.+24     	; 0x10bc6 <pow+0x3c>
   10bae:	80 38       	cpi	r24, 0x80	; 128
   10bb0:	bf ef       	ldi	r27, 0xFF	; 255
   10bb2:	9b 07       	cpc	r25, r27
   10bb4:	41 f0       	breq	.+16     	; 0x10bc6 <pow+0x3c>
   10bb6:	99 23       	and	r25, r25
   10bb8:	42 f5       	brpl	.+80     	; 0x10c0a <pow+0x80>
   10bba:	ff 3f       	cpi	r31, 0xFF	; 255
   10bbc:	e1 05       	cpc	r30, r1
   10bbe:	31 05       	cpc	r19, r1
   10bc0:	21 05       	cpc	r18, r1
   10bc2:	11 f1       	breq	.+68     	; 0x10c08 <pow+0x7e>
   10bc4:	e8 94       	clt
   10bc6:	08 94       	sec
   10bc8:	e7 95       	ror	r30
   10bca:	d9 01       	movw	r26, r18
   10bcc:	aa 23       	and	r26, r26
   10bce:	29 f4       	brne	.+10     	; 0x10bda <pow+0x50>
   10bd0:	ab 2f       	mov	r26, r27
   10bd2:	be 2f       	mov	r27, r30
   10bd4:	f8 5f       	subi	r31, 0xF8	; 248
   10bd6:	d0 f3       	brcs	.-12     	; 0x10bcc <pow+0x42>
   10bd8:	10 c0       	rjmp	.+32     	; 0x10bfa <pow+0x70>
   10bda:	ff 5f       	subi	r31, 0xFF	; 255
   10bdc:	70 f4       	brcc	.+28     	; 0x10bfa <pow+0x70>
   10bde:	a6 95       	lsr	r26
   10be0:	e0 f7       	brcc	.-8      	; 0x10bda <pow+0x50>
   10be2:	f7 39       	cpi	r31, 0x97	; 151
   10be4:	50 f0       	brcs	.+20     	; 0x10bfa <pow+0x70>
   10be6:	19 f0       	breq	.+6      	; 0x10bee <pow+0x64>
   10be8:	ff 3a       	cpi	r31, 0xAF	; 175
   10bea:	38 f4       	brcc	.+14     	; 0x10bfa <pow+0x70>
   10bec:	9f 77       	andi	r25, 0x7F	; 127
   10bee:	9f 93       	push	r25
   10bf0:	0c d0       	rcall	.+24     	; 0x10c0a <pow+0x80>
   10bf2:	0f 90       	pop	r0
   10bf4:	07 fc       	sbrc	r0, 7
   10bf6:	90 58       	subi	r25, 0x80	; 128
   10bf8:	08 95       	ret
   10bfa:	3e f0       	brts	.+14     	; 0x10c0a <pow+0x80>
   10bfc:	db ce       	rjmp	.-586    	; 0x109b4 <__fp_nan>
   10bfe:	60 e0       	ldi	r22, 0x00	; 0
   10c00:	70 e0       	ldi	r23, 0x00	; 0
   10c02:	80 e8       	ldi	r24, 0x80	; 128
   10c04:	9f e3       	ldi	r25, 0x3F	; 63
   10c06:	08 95       	ret
   10c08:	4f e7       	ldi	r20, 0x7F	; 127
   10c0a:	9f 77       	andi	r25, 0x7F	; 127
   10c0c:	5f 93       	push	r21
   10c0e:	4f 93       	push	r20
   10c10:	3f 93       	push	r19
   10c12:	2f 93       	push	r18
   10c14:	c3 d0       	rcall	.+390    	; 0x10d9c <log>
   10c16:	2f 91       	pop	r18
   10c18:	3f 91       	pop	r19
   10c1a:	4f 91       	pop	r20
   10c1c:	5f 91       	pop	r21
   10c1e:	52 df       	rcall	.-348    	; 0x10ac4 <__mulsf3>
   10c20:	0b c0       	rjmp	.+22     	; 0x10c38 <exp>

00010c22 <sin>:
   10c22:	9f 93       	push	r25
   10c24:	d9 de       	rcall	.-590    	; 0x109d8 <__fp_rempio2>
   10c26:	0f 90       	pop	r0
   10c28:	07 fc       	sbrc	r0, 7
   10c2a:	ee 5f       	subi	r30, 0xFE	; 254
   10c2c:	0d cf       	rjmp	.-486    	; 0x10a48 <__fp_sinus>
   10c2e:	19 f4       	brne	.+6      	; 0x10c36 <sin+0x14>
   10c30:	0e f0       	brts	.+2      	; 0x10c34 <sin+0x12>
   10c32:	ba ce       	rjmp	.-652    	; 0x109a8 <__fp_inf>
   10c34:	3c cf       	rjmp	.-392    	; 0x10aae <__fp_zero>
   10c36:	be ce       	rjmp	.-644    	; 0x109b4 <__fp_nan>

00010c38 <exp>:
   10c38:	20 df       	rcall	.-448    	; 0x10a7a <__fp_splitA>
   10c3a:	c8 f3       	brcs	.-14     	; 0x10c2e <sin+0xc>
   10c3c:	96 38       	cpi	r25, 0x86	; 134
   10c3e:	c0 f7       	brcc	.-16     	; 0x10c30 <sin+0xe>
   10c40:	07 f8       	bld	r0, 7
   10c42:	0f 92       	push	r0
   10c44:	e8 94       	clt
   10c46:	2b e3       	ldi	r18, 0x3B	; 59
   10c48:	3a ea       	ldi	r19, 0xAA	; 170
   10c4a:	48 eb       	ldi	r20, 0xB8	; 184
   10c4c:	5f e7       	ldi	r21, 0x7F	; 127
   10c4e:	48 df       	rcall	.-368    	; 0x10ae0 <__mulsf3_pse>
   10c50:	0f 92       	push	r0
   10c52:	0f 92       	push	r0
   10c54:	0f 92       	push	r0
   10c56:	4d b7       	in	r20, 0x3d	; 61
   10c58:	5e b7       	in	r21, 0x3e	; 62
   10c5a:	0f 92       	push	r0
   10c5c:	df d0       	rcall	.+446    	; 0x10e1c <modf>
   10c5e:	e6 e3       	ldi	r30, 0x36	; 54
   10c60:	f2 e0       	ldi	r31, 0x02	; 2
   10c62:	24 d0       	rcall	.+72     	; 0x10cac <__fp_powser>
   10c64:	4f 91       	pop	r20
   10c66:	5f 91       	pop	r21
   10c68:	ef 91       	pop	r30
   10c6a:	ff 91       	pop	r31
   10c6c:	e5 95       	asr	r30
   10c6e:	ee 1f       	adc	r30, r30
   10c70:	ff 1f       	adc	r31, r31
   10c72:	49 f0       	breq	.+18     	; 0x10c86 <exp+0x4e>
   10c74:	fe 57       	subi	r31, 0x7E	; 126
   10c76:	e0 68       	ori	r30, 0x80	; 128
   10c78:	44 27       	eor	r20, r20
   10c7a:	ee 0f       	add	r30, r30
   10c7c:	44 1f       	adc	r20, r20
   10c7e:	fa 95       	dec	r31
   10c80:	e1 f7       	brne	.-8      	; 0x10c7a <exp+0x42>
   10c82:	41 95       	neg	r20
   10c84:	55 0b       	sbc	r21, r21
   10c86:	51 d0       	rcall	.+162    	; 0x10d2a <ldexp>
   10c88:	0f 90       	pop	r0
   10c8a:	07 fe       	sbrs	r0, 7
   10c8c:	45 c0       	rjmp	.+138    	; 0x10d18 <inverse>
   10c8e:	08 95       	ret

00010c90 <__fp_mpack>:
   10c90:	9f 3f       	cpi	r25, 0xFF	; 255
   10c92:	31 f0       	breq	.+12     	; 0x10ca0 <__fp_mpack_finite+0xc>

00010c94 <__fp_mpack_finite>:
   10c94:	91 50       	subi	r25, 0x01	; 1
   10c96:	20 f4       	brcc	.+8      	; 0x10ca0 <__fp_mpack_finite+0xc>
   10c98:	87 95       	ror	r24
   10c9a:	77 95       	ror	r23
   10c9c:	67 95       	ror	r22
   10c9e:	b7 95       	ror	r27
   10ca0:	88 0f       	add	r24, r24
   10ca2:	91 1d       	adc	r25, r1
   10ca4:	96 95       	lsr	r25
   10ca6:	87 95       	ror	r24
   10ca8:	97 f9       	bld	r25, 7
   10caa:	08 95       	ret

00010cac <__fp_powser>:
   10cac:	df 93       	push	r29
   10cae:	cf 93       	push	r28
   10cb0:	1f 93       	push	r17
   10cb2:	0f 93       	push	r16
   10cb4:	ff 92       	push	r15
   10cb6:	ef 92       	push	r14
   10cb8:	df 92       	push	r13
   10cba:	7b 01       	movw	r14, r22
   10cbc:	8c 01       	movw	r16, r24
   10cbe:	68 94       	set
   10cc0:	05 c0       	rjmp	.+10     	; 0x10ccc <__fp_powser+0x20>
   10cc2:	da 2e       	mov	r13, r26
   10cc4:	ef 01       	movw	r28, r30
   10cc6:	0a df       	rcall	.-492    	; 0x10adc <__mulsf3x>
   10cc8:	fe 01       	movw	r30, r28
   10cca:	e8 94       	clt
   10ccc:	a5 91       	lpm	r26, Z+
   10cce:	25 91       	lpm	r18, Z+
   10cd0:	35 91       	lpm	r19, Z+
   10cd2:	45 91       	lpm	r20, Z+
   10cd4:	55 91       	lpm	r21, Z+
   10cd6:	ae f3       	brts	.-22     	; 0x10cc2 <__fp_powser+0x16>
   10cd8:	ef 01       	movw	r28, r30
   10cda:	12 dd       	rcall	.-1500   	; 0x10700 <__addsf3x>
   10cdc:	fe 01       	movw	r30, r28
   10cde:	97 01       	movw	r18, r14
   10ce0:	a8 01       	movw	r20, r16
   10ce2:	da 94       	dec	r13
   10ce4:	79 f7       	brne	.-34     	; 0x10cc4 <__fp_powser+0x18>
   10ce6:	df 90       	pop	r13
   10ce8:	ef 90       	pop	r14
   10cea:	ff 90       	pop	r15
   10cec:	0f 91       	pop	r16
   10cee:	1f 91       	pop	r17
   10cf0:	cf 91       	pop	r28
   10cf2:	df 91       	pop	r29
   10cf4:	08 95       	ret

00010cf6 <__fp_powsodd>:
   10cf6:	9f 93       	push	r25
   10cf8:	8f 93       	push	r24
   10cfa:	7f 93       	push	r23
   10cfc:	6f 93       	push	r22
   10cfe:	ff 93       	push	r31
   10d00:	ef 93       	push	r30
   10d02:	9b 01       	movw	r18, r22
   10d04:	ac 01       	movw	r20, r24
   10d06:	de de       	rcall	.-580    	; 0x10ac4 <__mulsf3>
   10d08:	ef 91       	pop	r30
   10d0a:	ff 91       	pop	r31
   10d0c:	cf df       	rcall	.-98     	; 0x10cac <__fp_powser>
   10d0e:	2f 91       	pop	r18
   10d10:	3f 91       	pop	r19
   10d12:	4f 91       	pop	r20
   10d14:	5f 91       	pop	r21
   10d16:	d6 ce       	rjmp	.-596    	; 0x10ac4 <__mulsf3>

00010d18 <inverse>:
   10d18:	9b 01       	movw	r18, r22
   10d1a:	ac 01       	movw	r20, r24
   10d1c:	60 e0       	ldi	r22, 0x00	; 0
   10d1e:	70 e0       	ldi	r23, 0x00	; 0
   10d20:	80 e8       	ldi	r24, 0x80	; 128
   10d22:	9f e3       	ldi	r25, 0x3F	; 63
   10d24:	47 cd       	rjmp	.-1394   	; 0x107b4 <__divsf3>
   10d26:	40 ce       	rjmp	.-896    	; 0x109a8 <__fp_inf>
   10d28:	b3 cf       	rjmp	.-154    	; 0x10c90 <__fp_mpack>

00010d2a <ldexp>:
   10d2a:	a7 de       	rcall	.-690    	; 0x10a7a <__fp_splitA>
   10d2c:	e8 f3       	brcs	.-6      	; 0x10d28 <inverse+0x10>
   10d2e:	99 23       	and	r25, r25
   10d30:	d9 f3       	breq	.-10     	; 0x10d28 <inverse+0x10>
   10d32:	94 0f       	add	r25, r20
   10d34:	51 1d       	adc	r21, r1
   10d36:	bb f3       	brvs	.-18     	; 0x10d26 <inverse+0xe>
   10d38:	91 50       	subi	r25, 0x01	; 1
   10d3a:	50 40       	sbci	r21, 0x00	; 0
   10d3c:	94 f0       	brlt	.+36     	; 0x10d62 <ldexp+0x38>
   10d3e:	59 f0       	breq	.+22     	; 0x10d56 <ldexp+0x2c>
   10d40:	88 23       	and	r24, r24
   10d42:	32 f0       	brmi	.+12     	; 0x10d50 <ldexp+0x26>
   10d44:	66 0f       	add	r22, r22
   10d46:	77 1f       	adc	r23, r23
   10d48:	88 1f       	adc	r24, r24
   10d4a:	91 50       	subi	r25, 0x01	; 1
   10d4c:	50 40       	sbci	r21, 0x00	; 0
   10d4e:	c1 f7       	brne	.-16     	; 0x10d40 <ldexp+0x16>
   10d50:	9e 3f       	cpi	r25, 0xFE	; 254
   10d52:	51 05       	cpc	r21, r1
   10d54:	44 f7       	brge	.-48     	; 0x10d26 <inverse+0xe>
   10d56:	88 0f       	add	r24, r24
   10d58:	91 1d       	adc	r25, r1
   10d5a:	96 95       	lsr	r25
   10d5c:	87 95       	ror	r24
   10d5e:	97 f9       	bld	r25, 7
   10d60:	08 95       	ret
   10d62:	5f 3f       	cpi	r21, 0xFF	; 255
   10d64:	ac f0       	brlt	.+42     	; 0x10d90 <ldexp+0x66>
   10d66:	98 3e       	cpi	r25, 0xE8	; 232
   10d68:	9c f0       	brlt	.+38     	; 0x10d90 <ldexp+0x66>
   10d6a:	bb 27       	eor	r27, r27
   10d6c:	86 95       	lsr	r24
   10d6e:	77 95       	ror	r23
   10d70:	67 95       	ror	r22
   10d72:	b7 95       	ror	r27
   10d74:	08 f4       	brcc	.+2      	; 0x10d78 <ldexp+0x4e>
   10d76:	b1 60       	ori	r27, 0x01	; 1
   10d78:	93 95       	inc	r25
   10d7a:	c1 f7       	brne	.-16     	; 0x10d6c <ldexp+0x42>
   10d7c:	bb 0f       	add	r27, r27
   10d7e:	58 f7       	brcc	.-42     	; 0x10d56 <ldexp+0x2c>
   10d80:	11 f4       	brne	.+4      	; 0x10d86 <ldexp+0x5c>
   10d82:	60 ff       	sbrs	r22, 0
   10d84:	e8 cf       	rjmp	.-48     	; 0x10d56 <ldexp+0x2c>
   10d86:	6f 5f       	subi	r22, 0xFF	; 255
   10d88:	7f 4f       	sbci	r23, 0xFF	; 255
   10d8a:	8f 4f       	sbci	r24, 0xFF	; 255
   10d8c:	9f 4f       	sbci	r25, 0xFF	; 255
   10d8e:	e3 cf       	rjmp	.-58     	; 0x10d56 <ldexp+0x2c>
   10d90:	8f ce       	rjmp	.-738    	; 0x10ab0 <__fp_szero>
   10d92:	0e f0       	brts	.+2      	; 0x10d96 <ldexp+0x6c>
   10d94:	7d cf       	rjmp	.-262    	; 0x10c90 <__fp_mpack>
   10d96:	0e ce       	rjmp	.-996    	; 0x109b4 <__fp_nan>
   10d98:	68 94       	set
   10d9a:	06 ce       	rjmp	.-1012   	; 0x109a8 <__fp_inf>

00010d9c <log>:
   10d9c:	6e de       	rcall	.-804    	; 0x10a7a <__fp_splitA>
   10d9e:	c8 f3       	brcs	.-14     	; 0x10d92 <ldexp+0x68>
   10da0:	99 23       	and	r25, r25
   10da2:	d1 f3       	breq	.-12     	; 0x10d98 <ldexp+0x6e>
   10da4:	c6 f3       	brts	.-16     	; 0x10d96 <ldexp+0x6c>
   10da6:	df 93       	push	r29
   10da8:	cf 93       	push	r28
   10daa:	1f 93       	push	r17
   10dac:	0f 93       	push	r16
   10dae:	ff 92       	push	r15
   10db0:	c9 2f       	mov	r28, r25
   10db2:	dd 27       	eor	r29, r29
   10db4:	88 23       	and	r24, r24
   10db6:	2a f0       	brmi	.+10     	; 0x10dc2 <log+0x26>
   10db8:	21 97       	sbiw	r28, 0x01	; 1
   10dba:	66 0f       	add	r22, r22
   10dbc:	77 1f       	adc	r23, r23
   10dbe:	88 1f       	adc	r24, r24
   10dc0:	da f7       	brpl	.-10     	; 0x10db8 <log+0x1c>
   10dc2:	20 e0       	ldi	r18, 0x00	; 0
   10dc4:	30 e0       	ldi	r19, 0x00	; 0
   10dc6:	40 e8       	ldi	r20, 0x80	; 128
   10dc8:	5f eb       	ldi	r21, 0xBF	; 191
   10dca:	9f e3       	ldi	r25, 0x3F	; 63
   10dcc:	88 39       	cpi	r24, 0x98	; 152
   10dce:	20 f0       	brcs	.+8      	; 0x10dd8 <log+0x3c>
   10dd0:	80 3e       	cpi	r24, 0xE0	; 224
   10dd2:	30 f0       	brcs	.+12     	; 0x10de0 <log+0x44>
   10dd4:	21 96       	adiw	r28, 0x01	; 1
   10dd6:	8f 77       	andi	r24, 0x7F	; 127
   10dd8:	82 dc       	rcall	.-1788   	; 0x106de <__addsf3>
   10dda:	ee e5       	ldi	r30, 0x5E	; 94
   10ddc:	f2 e0       	ldi	r31, 0x02	; 2
   10dde:	03 c0       	rjmp	.+6      	; 0x10de6 <log+0x4a>
   10de0:	7e dc       	rcall	.-1796   	; 0x106de <__addsf3>
   10de2:	eb e8       	ldi	r30, 0x8B	; 139
   10de4:	f2 e0       	ldi	r31, 0x02	; 2
   10de6:	62 df       	rcall	.-316    	; 0x10cac <__fp_powser>
   10de8:	8b 01       	movw	r16, r22
   10dea:	be 01       	movw	r22, r28
   10dec:	ec 01       	movw	r28, r24
   10dee:	fb 2e       	mov	r15, r27
   10df0:	6f 57       	subi	r22, 0x7F	; 127
   10df2:	71 09       	sbc	r23, r1
   10df4:	75 95       	asr	r23
   10df6:	77 1f       	adc	r23, r23
   10df8:	88 0b       	sbc	r24, r24
   10dfa:	99 0b       	sbc	r25, r25
   10dfc:	76 dd       	rcall	.-1300   	; 0x108ea <__floatsisf>
   10dfe:	28 e1       	ldi	r18, 0x18	; 24
   10e00:	32 e7       	ldi	r19, 0x72	; 114
   10e02:	41 e3       	ldi	r20, 0x31	; 49
   10e04:	5f e3       	ldi	r21, 0x3F	; 63
   10e06:	6a de       	rcall	.-812    	; 0x10adc <__mulsf3x>
   10e08:	af 2d       	mov	r26, r15
   10e0a:	98 01       	movw	r18, r16
   10e0c:	ae 01       	movw	r20, r28
   10e0e:	ff 90       	pop	r15
   10e10:	0f 91       	pop	r16
   10e12:	1f 91       	pop	r17
   10e14:	cf 91       	pop	r28
   10e16:	df 91       	pop	r29
   10e18:	73 dc       	rcall	.-1818   	; 0x10700 <__addsf3x>
   10e1a:	05 ce       	rjmp	.-1014   	; 0x10a26 <__fp_round>

00010e1c <modf>:
   10e1c:	fa 01       	movw	r30, r20
   10e1e:	dc 01       	movw	r26, r24
   10e20:	aa 0f       	add	r26, r26
   10e22:	bb 1f       	adc	r27, r27
   10e24:	9b 01       	movw	r18, r22
   10e26:	ac 01       	movw	r20, r24
   10e28:	bf 57       	subi	r27, 0x7F	; 127
   10e2a:	28 f4       	brcc	.+10     	; 0x10e36 <modf+0x1a>
   10e2c:	22 27       	eor	r18, r18
   10e2e:	33 27       	eor	r19, r19
   10e30:	44 27       	eor	r20, r20
   10e32:	50 78       	andi	r21, 0x80	; 128
   10e34:	1f c0       	rjmp	.+62     	; 0x10e74 <modf+0x58>
   10e36:	b7 51       	subi	r27, 0x17	; 23
   10e38:	88 f4       	brcc	.+34     	; 0x10e5c <modf+0x40>
   10e3a:	ab 2f       	mov	r26, r27
   10e3c:	00 24       	eor	r0, r0
   10e3e:	46 95       	lsr	r20
   10e40:	37 95       	ror	r19
   10e42:	27 95       	ror	r18
   10e44:	01 1c       	adc	r0, r1
   10e46:	a3 95       	inc	r26
   10e48:	d2 f3       	brmi	.-12     	; 0x10e3e <modf+0x22>
   10e4a:	00 20       	and	r0, r0
   10e4c:	69 f0       	breq	.+26     	; 0x10e68 <modf+0x4c>
   10e4e:	22 0f       	add	r18, r18
   10e50:	33 1f       	adc	r19, r19
   10e52:	44 1f       	adc	r20, r20
   10e54:	b3 95       	inc	r27
   10e56:	da f3       	brmi	.-10     	; 0x10e4e <modf+0x32>
   10e58:	0d d0       	rcall	.+26     	; 0x10e74 <modf+0x58>
   10e5a:	40 cc       	rjmp	.-1920   	; 0x106dc <__subsf3>
   10e5c:	61 30       	cpi	r22, 0x01	; 1
   10e5e:	71 05       	cpc	r23, r1
   10e60:	a0 e8       	ldi	r26, 0x80	; 128
   10e62:	8a 07       	cpc	r24, r26
   10e64:	b9 46       	sbci	r27, 0x69	; 105
   10e66:	30 f4       	brcc	.+12     	; 0x10e74 <modf+0x58>
   10e68:	9b 01       	movw	r18, r22
   10e6a:	ac 01       	movw	r20, r24
   10e6c:	66 27       	eor	r22, r22
   10e6e:	77 27       	eor	r23, r23
   10e70:	88 27       	eor	r24, r24
   10e72:	90 78       	andi	r25, 0x80	; 128
   10e74:	30 96       	adiw	r30, 0x00	; 0
   10e76:	21 f0       	breq	.+8      	; 0x10e80 <modf+0x64>
   10e78:	20 83       	st	Z, r18
   10e7a:	31 83       	std	Z+1, r19	; 0x01
   10e7c:	42 83       	std	Z+2, r20	; 0x02
   10e7e:	53 83       	std	Z+3, r21	; 0x03
   10e80:	08 95       	ret

00010e82 <__mulsi3>:
   10e82:	db 01       	movw	r26, r22
   10e84:	8f 93       	push	r24
   10e86:	9f 93       	push	r25
   10e88:	93 d0       	rcall	.+294    	; 0x10fb0 <__muluhisi3>
   10e8a:	bf 91       	pop	r27
   10e8c:	af 91       	pop	r26
   10e8e:	a2 9f       	mul	r26, r18
   10e90:	80 0d       	add	r24, r0
   10e92:	91 1d       	adc	r25, r1
   10e94:	a3 9f       	mul	r26, r19
   10e96:	90 0d       	add	r25, r0
   10e98:	b2 9f       	mul	r27, r18
   10e9a:	90 0d       	add	r25, r0
   10e9c:	11 24       	eor	r1, r1
   10e9e:	08 95       	ret

00010ea0 <__udivmodhi4>:
   10ea0:	aa 1b       	sub	r26, r26
   10ea2:	bb 1b       	sub	r27, r27
   10ea4:	51 e1       	ldi	r21, 0x11	; 17
   10ea6:	07 c0       	rjmp	.+14     	; 0x10eb6 <__udivmodhi4_ep>

00010ea8 <__udivmodhi4_loop>:
   10ea8:	aa 1f       	adc	r26, r26
   10eaa:	bb 1f       	adc	r27, r27
   10eac:	a6 17       	cp	r26, r22
   10eae:	b7 07       	cpc	r27, r23
   10eb0:	10 f0       	brcs	.+4      	; 0x10eb6 <__udivmodhi4_ep>
   10eb2:	a6 1b       	sub	r26, r22
   10eb4:	b7 0b       	sbc	r27, r23

00010eb6 <__udivmodhi4_ep>:
   10eb6:	88 1f       	adc	r24, r24
   10eb8:	99 1f       	adc	r25, r25
   10eba:	5a 95       	dec	r21
   10ebc:	a9 f7       	brne	.-22     	; 0x10ea8 <__udivmodhi4_loop>
   10ebe:	80 95       	com	r24
   10ec0:	90 95       	com	r25
   10ec2:	bc 01       	movw	r22, r24
   10ec4:	cd 01       	movw	r24, r26
   10ec6:	08 95       	ret

00010ec8 <__divmodhi4>:
   10ec8:	97 fb       	bst	r25, 7
   10eca:	07 2e       	mov	r0, r23
   10ecc:	16 f4       	brtc	.+4      	; 0x10ed2 <__divmodhi4+0xa>
   10ece:	00 94       	com	r0
   10ed0:	06 d0       	rcall	.+12     	; 0x10ede <__divmodhi4_neg1>
   10ed2:	77 fd       	sbrc	r23, 7
   10ed4:	08 d0       	rcall	.+16     	; 0x10ee6 <__divmodhi4_neg2>
   10ed6:	e4 df       	rcall	.-56     	; 0x10ea0 <__udivmodhi4>
   10ed8:	07 fc       	sbrc	r0, 7
   10eda:	05 d0       	rcall	.+10     	; 0x10ee6 <__divmodhi4_neg2>
   10edc:	3e f4       	brtc	.+14     	; 0x10eec <__divmodhi4_exit>

00010ede <__divmodhi4_neg1>:
   10ede:	90 95       	com	r25
   10ee0:	81 95       	neg	r24
   10ee2:	9f 4f       	sbci	r25, 0xFF	; 255
   10ee4:	08 95       	ret

00010ee6 <__divmodhi4_neg2>:
   10ee6:	70 95       	com	r23
   10ee8:	61 95       	neg	r22
   10eea:	7f 4f       	sbci	r23, 0xFF	; 255

00010eec <__divmodhi4_exit>:
   10eec:	08 95       	ret

00010eee <__udivmodsi4>:
   10eee:	a1 e2       	ldi	r26, 0x21	; 33
   10ef0:	1a 2e       	mov	r1, r26
   10ef2:	aa 1b       	sub	r26, r26
   10ef4:	bb 1b       	sub	r27, r27
   10ef6:	fd 01       	movw	r30, r26
   10ef8:	0d c0       	rjmp	.+26     	; 0x10f14 <__udivmodsi4_ep>

00010efa <__udivmodsi4_loop>:
   10efa:	aa 1f       	adc	r26, r26
   10efc:	bb 1f       	adc	r27, r27
   10efe:	ee 1f       	adc	r30, r30
   10f00:	ff 1f       	adc	r31, r31
   10f02:	a2 17       	cp	r26, r18
   10f04:	b3 07       	cpc	r27, r19
   10f06:	e4 07       	cpc	r30, r20
   10f08:	f5 07       	cpc	r31, r21
   10f0a:	20 f0       	brcs	.+8      	; 0x10f14 <__udivmodsi4_ep>
   10f0c:	a2 1b       	sub	r26, r18
   10f0e:	b3 0b       	sbc	r27, r19
   10f10:	e4 0b       	sbc	r30, r20
   10f12:	f5 0b       	sbc	r31, r21

00010f14 <__udivmodsi4_ep>:
   10f14:	66 1f       	adc	r22, r22
   10f16:	77 1f       	adc	r23, r23
   10f18:	88 1f       	adc	r24, r24
   10f1a:	99 1f       	adc	r25, r25
   10f1c:	1a 94       	dec	r1
   10f1e:	69 f7       	brne	.-38     	; 0x10efa <__udivmodsi4_loop>
   10f20:	60 95       	com	r22
   10f22:	70 95       	com	r23
   10f24:	80 95       	com	r24
   10f26:	90 95       	com	r25
   10f28:	9b 01       	movw	r18, r22
   10f2a:	ac 01       	movw	r20, r24
   10f2c:	bd 01       	movw	r22, r26
   10f2e:	cf 01       	movw	r24, r30
   10f30:	08 95       	ret

00010f32 <__divmodsi4>:
   10f32:	05 2e       	mov	r0, r21
   10f34:	97 fb       	bst	r25, 7
   10f36:	16 f4       	brtc	.+4      	; 0x10f3c <__divmodsi4+0xa>
   10f38:	00 94       	com	r0
   10f3a:	0f d0       	rcall	.+30     	; 0x10f5a <__negsi2>
   10f3c:	57 fd       	sbrc	r21, 7
   10f3e:	05 d0       	rcall	.+10     	; 0x10f4a <__divmodsi4_neg2>
   10f40:	d6 df       	rcall	.-84     	; 0x10eee <__udivmodsi4>
   10f42:	07 fc       	sbrc	r0, 7
   10f44:	02 d0       	rcall	.+4      	; 0x10f4a <__divmodsi4_neg2>
   10f46:	46 f4       	brtc	.+16     	; 0x10f58 <__divmodsi4_exit>
   10f48:	08 c0       	rjmp	.+16     	; 0x10f5a <__negsi2>

00010f4a <__divmodsi4_neg2>:
   10f4a:	50 95       	com	r21
   10f4c:	40 95       	com	r20
   10f4e:	30 95       	com	r19
   10f50:	21 95       	neg	r18
   10f52:	3f 4f       	sbci	r19, 0xFF	; 255
   10f54:	4f 4f       	sbci	r20, 0xFF	; 255
   10f56:	5f 4f       	sbci	r21, 0xFF	; 255

00010f58 <__divmodsi4_exit>:
   10f58:	08 95       	ret

00010f5a <__negsi2>:
   10f5a:	90 95       	com	r25
   10f5c:	80 95       	com	r24
   10f5e:	70 95       	com	r23
   10f60:	61 95       	neg	r22
   10f62:	7f 4f       	sbci	r23, 0xFF	; 255
   10f64:	8f 4f       	sbci	r24, 0xFF	; 255
   10f66:	9f 4f       	sbci	r25, 0xFF	; 255
   10f68:	08 95       	ret

00010f6a <__tablejump2__>:
   10f6a:	ee 0f       	add	r30, r30
   10f6c:	ff 1f       	adc	r31, r31
   10f6e:	88 1f       	adc	r24, r24
   10f70:	8b bf       	out	0x3b, r24	; 59
   10f72:	07 90       	elpm	r0, Z+
   10f74:	f6 91       	elpm	r31, Z
   10f76:	e0 2d       	mov	r30, r0
   10f78:	19 94       	eijmp

00010f7a <__mulhisi3>:
   10f7a:	05 d0       	rcall	.+10     	; 0x10f86 <__umulhisi3>
   10f7c:	33 23       	and	r19, r19
   10f7e:	12 f4       	brpl	.+4      	; 0x10f84 <__mulhisi3+0xa>
   10f80:	8a 1b       	sub	r24, r26
   10f82:	9b 0b       	sbc	r25, r27
   10f84:	10 c0       	rjmp	.+32     	; 0x10fa6 <__usmulhisi3_tail>

00010f86 <__umulhisi3>:
   10f86:	a2 9f       	mul	r26, r18
   10f88:	b0 01       	movw	r22, r0
   10f8a:	b3 9f       	mul	r27, r19
   10f8c:	c0 01       	movw	r24, r0
   10f8e:	a3 9f       	mul	r26, r19
   10f90:	70 0d       	add	r23, r0
   10f92:	81 1d       	adc	r24, r1
   10f94:	11 24       	eor	r1, r1
   10f96:	91 1d       	adc	r25, r1
   10f98:	b2 9f       	mul	r27, r18
   10f9a:	70 0d       	add	r23, r0
   10f9c:	81 1d       	adc	r24, r1
   10f9e:	11 24       	eor	r1, r1
   10fa0:	91 1d       	adc	r25, r1
   10fa2:	08 95       	ret

00010fa4 <__usmulhisi3>:
   10fa4:	f0 df       	rcall	.-32     	; 0x10f86 <__umulhisi3>

00010fa6 <__usmulhisi3_tail>:
   10fa6:	b7 ff       	sbrs	r27, 7
   10fa8:	08 95       	ret
   10faa:	82 1b       	sub	r24, r18
   10fac:	93 0b       	sbc	r25, r19
   10fae:	08 95       	ret

00010fb0 <__muluhisi3>:
   10fb0:	ea df       	rcall	.-44     	; 0x10f86 <__umulhisi3>
   10fb2:	a5 9f       	mul	r26, r21
   10fb4:	90 0d       	add	r25, r0
   10fb6:	b4 9f       	mul	r27, r20
   10fb8:	90 0d       	add	r25, r0
   10fba:	a4 9f       	mul	r26, r20
   10fbc:	80 0d       	add	r24, r0
   10fbe:	91 1d       	adc	r25, r1
   10fc0:	11 24       	eor	r1, r1
   10fc2:	08 95       	ret

00010fc4 <__muldi3>:
   10fc4:	df 93       	push	r29
   10fc6:	cf 93       	push	r28
   10fc8:	1f 93       	push	r17
   10fca:	0f 93       	push	r16
   10fcc:	9a 9d       	mul	r25, r10
   10fce:	f0 2d       	mov	r31, r0
   10fd0:	21 9f       	mul	r18, r17
   10fd2:	f0 0d       	add	r31, r0
   10fd4:	8b 9d       	mul	r24, r11
   10fd6:	f0 0d       	add	r31, r0
   10fd8:	8a 9d       	mul	r24, r10
   10fda:	e0 2d       	mov	r30, r0
   10fdc:	f1 0d       	add	r31, r1
   10fde:	03 9f       	mul	r16, r19
   10fe0:	f0 0d       	add	r31, r0
   10fe2:	02 9f       	mul	r16, r18
   10fe4:	e0 0d       	add	r30, r0
   10fe6:	f1 1d       	adc	r31, r1
   10fe8:	4e 9d       	mul	r20, r14
   10fea:	e0 0d       	add	r30, r0
   10fec:	f1 1d       	adc	r31, r1
   10fee:	5e 9d       	mul	r21, r14
   10ff0:	f0 0d       	add	r31, r0
   10ff2:	4f 9d       	mul	r20, r15
   10ff4:	f0 0d       	add	r31, r0
   10ff6:	7f 93       	push	r23
   10ff8:	6f 93       	push	r22
   10ffa:	bf 92       	push	r11
   10ffc:	af 92       	push	r10
   10ffe:	5f 93       	push	r21
   11000:	4f 93       	push	r20
   11002:	d5 01       	movw	r26, r10
   11004:	c0 df       	rcall	.-128    	; 0x10f86 <__umulhisi3>
   11006:	8b 01       	movw	r16, r22
   11008:	ac 01       	movw	r20, r24
   1100a:	d7 01       	movw	r26, r14
   1100c:	bc df       	rcall	.-136    	; 0x10f86 <__umulhisi3>
   1100e:	eb 01       	movw	r28, r22
   11010:	e8 0f       	add	r30, r24
   11012:	f9 1f       	adc	r31, r25
   11014:	d6 01       	movw	r26, r12
   11016:	1f d0       	rcall	.+62     	; 0x11056 <__muldi3_6>
   11018:	2f 91       	pop	r18
   1101a:	3f 91       	pop	r19
   1101c:	d6 01       	movw	r26, r12
   1101e:	b3 df       	rcall	.-154    	; 0x10f86 <__umulhisi3>
   11020:	c6 0f       	add	r28, r22
   11022:	d7 1f       	adc	r29, r23
   11024:	e8 1f       	adc	r30, r24
   11026:	f9 1f       	adc	r31, r25
   11028:	af 91       	pop	r26
   1102a:	bf 91       	pop	r27
   1102c:	14 d0       	rcall	.+40     	; 0x11056 <__muldi3_6>
   1102e:	2f 91       	pop	r18
   11030:	3f 91       	pop	r19
   11032:	a9 df       	rcall	.-174    	; 0x10f86 <__umulhisi3>
   11034:	c6 0f       	add	r28, r22
   11036:	d7 1f       	adc	r29, r23
   11038:	e8 1f       	adc	r30, r24
   1103a:	f9 1f       	adc	r31, r25
   1103c:	d6 01       	movw	r26, r12
   1103e:	a3 df       	rcall	.-186    	; 0x10f86 <__umulhisi3>
   11040:	e6 0f       	add	r30, r22
   11042:	f7 1f       	adc	r31, r23
   11044:	98 01       	movw	r18, r16
   11046:	be 01       	movw	r22, r28
   11048:	cf 01       	movw	r24, r30
   1104a:	11 24       	eor	r1, r1
   1104c:	0f 91       	pop	r16
   1104e:	1f 91       	pop	r17
   11050:	cf 91       	pop	r28
   11052:	df 91       	pop	r29
   11054:	08 95       	ret

00011056 <__muldi3_6>:
   11056:	97 df       	rcall	.-210    	; 0x10f86 <__umulhisi3>
   11058:	46 0f       	add	r20, r22
   1105a:	57 1f       	adc	r21, r23
   1105c:	c8 1f       	adc	r28, r24
   1105e:	d9 1f       	adc	r29, r25
   11060:	08 f4       	brcc	.+2      	; 0x11064 <__muldi3_6+0xe>
   11062:	31 96       	adiw	r30, 0x01	; 1
   11064:	08 95       	ret

00011066 <__moddi3>:
   11066:	68 94       	set
   11068:	01 c0       	rjmp	.+2      	; 0x1106c <__divdi3_moddi3>

0001106a <__divdi3>:
   1106a:	e8 94       	clt

0001106c <__divdi3_moddi3>:
   1106c:	f9 2f       	mov	r31, r25
   1106e:	f1 2b       	or	r31, r17
   11070:	0a f0       	brmi	.+2      	; 0x11074 <__divdi3_moddi3+0x8>
   11072:	27 c0       	rjmp	.+78     	; 0x110c2 <__udivdi3_umoddi3>
   11074:	a0 e0       	ldi	r26, 0x00	; 0
   11076:	b0 e0       	ldi	r27, 0x00	; 0
   11078:	ef e3       	ldi	r30, 0x3F	; 63
   1107a:	f8 e8       	ldi	r31, 0x88	; 136
   1107c:	93 c0       	rjmp	.+294    	; 0x111a4 <__prologue_saves__+0xc>
   1107e:	09 2e       	mov	r0, r25
   11080:	05 94       	asr	r0
   11082:	1a f4       	brpl	.+6      	; 0x1108a <__divdi3_moddi3+0x1e>
   11084:	79 d0       	rcall	.+242    	; 0x11178 <__negdi2>
   11086:	11 23       	and	r17, r17
   11088:	92 f4       	brpl	.+36     	; 0x110ae <__divdi3_moddi3+0x42>
   1108a:	f0 e8       	ldi	r31, 0x80	; 128
   1108c:	0f 26       	eor	r0, r31
   1108e:	ff ef       	ldi	r31, 0xFF	; 255
   11090:	e0 94       	com	r14
   11092:	f0 94       	com	r15
   11094:	00 95       	com	r16
   11096:	10 95       	com	r17
   11098:	b0 94       	com	r11
   1109a:	c0 94       	com	r12
   1109c:	d0 94       	com	r13
   1109e:	a1 94       	neg	r10
   110a0:	bf 0a       	sbc	r11, r31
   110a2:	cf 0a       	sbc	r12, r31
   110a4:	df 0a       	sbc	r13, r31
   110a6:	ef 0a       	sbc	r14, r31
   110a8:	ff 0a       	sbc	r15, r31
   110aa:	0f 0b       	sbc	r16, r31
   110ac:	1f 0b       	sbc	r17, r31
   110ae:	13 d0       	rcall	.+38     	; 0x110d6 <__udivmod64>
   110b0:	07 fc       	sbrc	r0, 7
   110b2:	62 d0       	rcall	.+196    	; 0x11178 <__negdi2>
   110b4:	cd b7       	in	r28, 0x3d	; 61
   110b6:	de b7       	in	r29, 0x3e	; 62
   110b8:	ec e0       	ldi	r30, 0x0C	; 12
   110ba:	8d c0       	rjmp	.+282    	; 0x111d6 <__epilogue_restores__+0xc>

000110bc <__umoddi3>:
   110bc:	68 94       	set
   110be:	01 c0       	rjmp	.+2      	; 0x110c2 <__udivdi3_umoddi3>

000110c0 <__udivdi3>:
   110c0:	e8 94       	clt

000110c2 <__udivdi3_umoddi3>:
   110c2:	8f 92       	push	r8
   110c4:	9f 92       	push	r9
   110c6:	cf 93       	push	r28
   110c8:	df 93       	push	r29
   110ca:	05 d0       	rcall	.+10     	; 0x110d6 <__udivmod64>
   110cc:	df 91       	pop	r29
   110ce:	cf 91       	pop	r28
   110d0:	9f 90       	pop	r9
   110d2:	8f 90       	pop	r8
   110d4:	08 95       	ret

000110d6 <__udivmod64>:
   110d6:	88 24       	eor	r8, r8
   110d8:	99 24       	eor	r9, r9
   110da:	f4 01       	movw	r30, r8
   110dc:	e4 01       	movw	r28, r8
   110de:	b0 e4       	ldi	r27, 0x40	; 64
   110e0:	9f 93       	push	r25
   110e2:	aa 27       	eor	r26, r26
   110e4:	9a 15       	cp	r25, r10
   110e6:	8b 04       	cpc	r8, r11
   110e8:	9c 04       	cpc	r9, r12
   110ea:	ed 05       	cpc	r30, r13
   110ec:	fe 05       	cpc	r31, r14
   110ee:	cf 05       	cpc	r28, r15
   110f0:	d0 07       	cpc	r29, r16
   110f2:	a1 07       	cpc	r26, r17
   110f4:	98 f4       	brcc	.+38     	; 0x1111c <__udivmod64+0x46>
   110f6:	ad 2f       	mov	r26, r29
   110f8:	dc 2f       	mov	r29, r28
   110fa:	cf 2f       	mov	r28, r31
   110fc:	fe 2f       	mov	r31, r30
   110fe:	e9 2d       	mov	r30, r9
   11100:	98 2c       	mov	r9, r8
   11102:	89 2e       	mov	r8, r25
   11104:	98 2f       	mov	r25, r24
   11106:	87 2f       	mov	r24, r23
   11108:	76 2f       	mov	r23, r22
   1110a:	65 2f       	mov	r22, r21
   1110c:	54 2f       	mov	r21, r20
   1110e:	43 2f       	mov	r20, r19
   11110:	32 2f       	mov	r19, r18
   11112:	22 27       	eor	r18, r18
   11114:	b8 50       	subi	r27, 0x08	; 8
   11116:	31 f7       	brne	.-52     	; 0x110e4 <__udivmod64+0xe>
   11118:	bf 91       	pop	r27
   1111a:	27 c0       	rjmp	.+78     	; 0x1116a <__udivmod64+0x94>
   1111c:	1b 2e       	mov	r1, r27
   1111e:	bf 91       	pop	r27
   11120:	bb 27       	eor	r27, r27
   11122:	22 0f       	add	r18, r18
   11124:	33 1f       	adc	r19, r19
   11126:	44 1f       	adc	r20, r20
   11128:	55 1f       	adc	r21, r21
   1112a:	66 1f       	adc	r22, r22
   1112c:	77 1f       	adc	r23, r23
   1112e:	88 1f       	adc	r24, r24
   11130:	99 1f       	adc	r25, r25
   11132:	88 1c       	adc	r8, r8
   11134:	99 1c       	adc	r9, r9
   11136:	ee 1f       	adc	r30, r30
   11138:	ff 1f       	adc	r31, r31
   1113a:	cc 1f       	adc	r28, r28
   1113c:	dd 1f       	adc	r29, r29
   1113e:	aa 1f       	adc	r26, r26
   11140:	bb 1f       	adc	r27, r27
   11142:	8a 14       	cp	r8, r10
   11144:	9b 04       	cpc	r9, r11
   11146:	ec 05       	cpc	r30, r12
   11148:	fd 05       	cpc	r31, r13
   1114a:	ce 05       	cpc	r28, r14
   1114c:	df 05       	cpc	r29, r15
   1114e:	a0 07       	cpc	r26, r16
   11150:	b1 07       	cpc	r27, r17
   11152:	48 f0       	brcs	.+18     	; 0x11166 <__udivmod64+0x90>
   11154:	8a 18       	sub	r8, r10
   11156:	9b 08       	sbc	r9, r11
   11158:	ec 09       	sbc	r30, r12
   1115a:	fd 09       	sbc	r31, r13
   1115c:	ce 09       	sbc	r28, r14
   1115e:	df 09       	sbc	r29, r15
   11160:	a0 0b       	sbc	r26, r16
   11162:	b1 0b       	sbc	r27, r17
   11164:	21 60       	ori	r18, 0x01	; 1
   11166:	1a 94       	dec	r1
   11168:	e1 f6       	brne	.-72     	; 0x11122 <__udivmod64+0x4c>
   1116a:	2e f4       	brtc	.+10     	; 0x11176 <__udivmod64+0xa0>
   1116c:	94 01       	movw	r18, r8
   1116e:	af 01       	movw	r20, r30
   11170:	be 01       	movw	r22, r28
   11172:	cd 01       	movw	r24, r26
   11174:	00 0c       	add	r0, r0
   11176:	08 95       	ret

00011178 <__negdi2>:
   11178:	60 95       	com	r22
   1117a:	70 95       	com	r23
   1117c:	80 95       	com	r24
   1117e:	90 95       	com	r25
   11180:	30 95       	com	r19
   11182:	40 95       	com	r20
   11184:	50 95       	com	r21
   11186:	21 95       	neg	r18
   11188:	3f 4f       	sbci	r19, 0xFF	; 255
   1118a:	4f 4f       	sbci	r20, 0xFF	; 255
   1118c:	5f 4f       	sbci	r21, 0xFF	; 255
   1118e:	6f 4f       	sbci	r22, 0xFF	; 255
   11190:	7f 4f       	sbci	r23, 0xFF	; 255
   11192:	8f 4f       	sbci	r24, 0xFF	; 255
   11194:	9f 4f       	sbci	r25, 0xFF	; 255
   11196:	08 95       	ret

00011198 <__prologue_saves__>:
   11198:	2f 92       	push	r2
   1119a:	3f 92       	push	r3
   1119c:	4f 92       	push	r4
   1119e:	5f 92       	push	r5
   111a0:	6f 92       	push	r6
   111a2:	7f 92       	push	r7
   111a4:	8f 92       	push	r8
   111a6:	9f 92       	push	r9
   111a8:	af 92       	push	r10
   111aa:	bf 92       	push	r11
   111ac:	cf 92       	push	r12
   111ae:	df 92       	push	r13
   111b0:	ef 92       	push	r14
   111b2:	ff 92       	push	r15
   111b4:	0f 93       	push	r16
   111b6:	1f 93       	push	r17
   111b8:	cf 93       	push	r28
   111ba:	df 93       	push	r29
   111bc:	cd b7       	in	r28, 0x3d	; 61
   111be:	de b7       	in	r29, 0x3e	; 62
   111c0:	ca 1b       	sub	r28, r26
   111c2:	db 0b       	sbc	r29, r27
   111c4:	cd bf       	out	0x3d, r28	; 61
   111c6:	de bf       	out	0x3e, r29	; 62
   111c8:	19 94       	eijmp

000111ca <__epilogue_restores__>:
   111ca:	2a 88       	ldd	r2, Y+18	; 0x12
   111cc:	39 88       	ldd	r3, Y+17	; 0x11
   111ce:	48 88       	ldd	r4, Y+16	; 0x10
   111d0:	5f 84       	ldd	r5, Y+15	; 0x0f
   111d2:	6e 84       	ldd	r6, Y+14	; 0x0e
   111d4:	7d 84       	ldd	r7, Y+13	; 0x0d
   111d6:	8c 84       	ldd	r8, Y+12	; 0x0c
   111d8:	9b 84       	ldd	r9, Y+11	; 0x0b
   111da:	aa 84       	ldd	r10, Y+10	; 0x0a
   111dc:	b9 84       	ldd	r11, Y+9	; 0x09
   111de:	c8 84       	ldd	r12, Y+8	; 0x08
   111e0:	df 80       	ldd	r13, Y+7	; 0x07
   111e2:	ee 80       	ldd	r14, Y+6	; 0x06
   111e4:	fd 80       	ldd	r15, Y+5	; 0x05
   111e6:	0c 81       	ldd	r16, Y+4	; 0x04
   111e8:	1b 81       	ldd	r17, Y+3	; 0x03
   111ea:	aa 81       	ldd	r26, Y+2	; 0x02
   111ec:	b9 81       	ldd	r27, Y+1	; 0x01
   111ee:	ce 0f       	add	r28, r30
   111f0:	d1 1d       	adc	r29, r1
   111f2:	cd bf       	out	0x3d, r28	; 61
   111f4:	de bf       	out	0x3e, r29	; 62
   111f6:	ed 01       	movw	r28, r26
   111f8:	08 95       	ret

000111fa <__ashldi3>:
   111fa:	0f 93       	push	r16
   111fc:	08 30       	cpi	r16, 0x08	; 8
   111fe:	90 f0       	brcs	.+36     	; 0x11224 <__ashldi3+0x2a>
   11200:	98 2f       	mov	r25, r24
   11202:	87 2f       	mov	r24, r23
   11204:	76 2f       	mov	r23, r22
   11206:	65 2f       	mov	r22, r21
   11208:	54 2f       	mov	r21, r20
   1120a:	43 2f       	mov	r20, r19
   1120c:	32 2f       	mov	r19, r18
   1120e:	22 27       	eor	r18, r18
   11210:	08 50       	subi	r16, 0x08	; 8
   11212:	f4 cf       	rjmp	.-24     	; 0x111fc <__ashldi3+0x2>
   11214:	22 0f       	add	r18, r18
   11216:	33 1f       	adc	r19, r19
   11218:	44 1f       	adc	r20, r20
   1121a:	55 1f       	adc	r21, r21
   1121c:	66 1f       	adc	r22, r22
   1121e:	77 1f       	adc	r23, r23
   11220:	88 1f       	adc	r24, r24
   11222:	99 1f       	adc	r25, r25
   11224:	0a 95       	dec	r16
   11226:	b2 f7       	brpl	.-20     	; 0x11214 <__ashldi3+0x1a>
   11228:	0f 91       	pop	r16
   1122a:	08 95       	ret

0001122c <__ashrdi3>:
   1122c:	97 fb       	bst	r25, 7
   1122e:	10 f8       	bld	r1, 0

00011230 <__lshrdi3>:
   11230:	16 94       	lsr	r1
   11232:	00 08       	sbc	r0, r0
   11234:	0f 93       	push	r16
   11236:	08 30       	cpi	r16, 0x08	; 8
   11238:	98 f0       	brcs	.+38     	; 0x11260 <__lshrdi3+0x30>
   1123a:	08 50       	subi	r16, 0x08	; 8
   1123c:	23 2f       	mov	r18, r19
   1123e:	34 2f       	mov	r19, r20
   11240:	45 2f       	mov	r20, r21
   11242:	56 2f       	mov	r21, r22
   11244:	67 2f       	mov	r22, r23
   11246:	78 2f       	mov	r23, r24
   11248:	89 2f       	mov	r24, r25
   1124a:	90 2d       	mov	r25, r0
   1124c:	f4 cf       	rjmp	.-24     	; 0x11236 <__lshrdi3+0x6>
   1124e:	05 94       	asr	r0
   11250:	97 95       	ror	r25
   11252:	87 95       	ror	r24
   11254:	77 95       	ror	r23
   11256:	67 95       	ror	r22
   11258:	57 95       	ror	r21
   1125a:	47 95       	ror	r20
   1125c:	37 95       	ror	r19
   1125e:	27 95       	ror	r18
   11260:	0a 95       	dec	r16
   11262:	aa f7       	brpl	.-22     	; 0x1124e <__lshrdi3+0x1e>
   11264:	0f 91       	pop	r16
   11266:	08 95       	ret

00011268 <__adddi3>:
   11268:	2a 0d       	add	r18, r10
   1126a:	3b 1d       	adc	r19, r11
   1126c:	4c 1d       	adc	r20, r12
   1126e:	5d 1d       	adc	r21, r13
   11270:	6e 1d       	adc	r22, r14
   11272:	7f 1d       	adc	r23, r15
   11274:	80 1f       	adc	r24, r16
   11276:	91 1f       	adc	r25, r17
   11278:	08 95       	ret

0001127a <__adddi3_s8>:
   1127a:	00 24       	eor	r0, r0
   1127c:	a7 fd       	sbrc	r26, 7
   1127e:	00 94       	com	r0
   11280:	2a 0f       	add	r18, r26
   11282:	30 1d       	adc	r19, r0
   11284:	40 1d       	adc	r20, r0
   11286:	50 1d       	adc	r21, r0
   11288:	60 1d       	adc	r22, r0
   1128a:	70 1d       	adc	r23, r0
   1128c:	80 1d       	adc	r24, r0
   1128e:	90 1d       	adc	r25, r0
   11290:	08 95       	ret

00011292 <__subdi3>:
   11292:	2a 19       	sub	r18, r10
   11294:	3b 09       	sbc	r19, r11
   11296:	4c 09       	sbc	r20, r12
   11298:	5d 09       	sbc	r21, r13
   1129a:	6e 09       	sbc	r22, r14
   1129c:	7f 09       	sbc	r23, r15
   1129e:	80 0b       	sbc	r24, r16
   112a0:	91 0b       	sbc	r25, r17
   112a2:	08 95       	ret

000112a4 <atof>:
   112a4:	66 27       	eor	r22, r22
   112a6:	77 27       	eor	r23, r23
   112a8:	2e c4       	rjmp	.+2140   	; 0x11b06 <strtod>

000112aa <atoi>:
   112aa:	fc 01       	movw	r30, r24
   112ac:	88 27       	eor	r24, r24
   112ae:	99 27       	eor	r25, r25
   112b0:	e8 94       	clt
   112b2:	21 91       	ld	r18, Z+
   112b4:	20 32       	cpi	r18, 0x20	; 32
   112b6:	e9 f3       	breq	.-6      	; 0x112b2 <atoi+0x8>
   112b8:	29 30       	cpi	r18, 0x09	; 9
   112ba:	10 f0       	brcs	.+4      	; 0x112c0 <atoi+0x16>
   112bc:	2e 30       	cpi	r18, 0x0E	; 14
   112be:	c8 f3       	brcs	.-14     	; 0x112b2 <atoi+0x8>
   112c0:	2b 32       	cpi	r18, 0x2B	; 43
   112c2:	39 f0       	breq	.+14     	; 0x112d2 <atoi+0x28>
   112c4:	2d 32       	cpi	r18, 0x2D	; 45
   112c6:	31 f4       	brne	.+12     	; 0x112d4 <atoi+0x2a>
   112c8:	68 94       	set
   112ca:	03 c0       	rjmp	.+6      	; 0x112d2 <atoi+0x28>
   112cc:	95 d1       	rcall	.+810    	; 0x115f8 <__mulhi_const_10>
   112ce:	82 0f       	add	r24, r18
   112d0:	91 1d       	adc	r25, r1
   112d2:	21 91       	ld	r18, Z+
   112d4:	20 53       	subi	r18, 0x30	; 48
   112d6:	2a 30       	cpi	r18, 0x0A	; 10
   112d8:	c8 f3       	brcs	.-14     	; 0x112cc <atoi+0x22>
   112da:	1e f4       	brtc	.+6      	; 0x112e2 <atoi+0x38>
   112dc:	90 95       	com	r25
   112de:	81 95       	neg	r24
   112e0:	9f 4f       	sbci	r25, 0xFF	; 255
   112e2:	08 95       	ret

000112e4 <atol>:
   112e4:	1f 93       	push	r17
   112e6:	fc 01       	movw	r30, r24
   112e8:	99 27       	eor	r25, r25
   112ea:	88 27       	eor	r24, r24
   112ec:	bc 01       	movw	r22, r24
   112ee:	e8 94       	clt
   112f0:	11 91       	ld	r17, Z+
   112f2:	10 32       	cpi	r17, 0x20	; 32
   112f4:	e9 f3       	breq	.-6      	; 0x112f0 <atol+0xc>
   112f6:	19 30       	cpi	r17, 0x09	; 9
   112f8:	10 f0       	brcs	.+4      	; 0x112fe <atol+0x1a>
   112fa:	1e 30       	cpi	r17, 0x0E	; 14
   112fc:	c8 f3       	brcs	.-14     	; 0x112f0 <atol+0xc>
   112fe:	1b 32       	cpi	r17, 0x2B	; 43
   11300:	49 f0       	breq	.+18     	; 0x11314 <atol+0x30>
   11302:	1d 32       	cpi	r17, 0x2D	; 45
   11304:	41 f4       	brne	.+16     	; 0x11316 <atol+0x32>
   11306:	68 94       	set
   11308:	05 c0       	rjmp	.+10     	; 0x11314 <atol+0x30>
   1130a:	61 d1       	rcall	.+706    	; 0x115ce <__mulsi_const_10>
   1130c:	61 0f       	add	r22, r17
   1130e:	71 1d       	adc	r23, r1
   11310:	81 1d       	adc	r24, r1
   11312:	91 1d       	adc	r25, r1
   11314:	11 91       	ld	r17, Z+
   11316:	10 53       	subi	r17, 0x30	; 48
   11318:	1a 30       	cpi	r17, 0x0A	; 10
   1131a:	b8 f3       	brcs	.-18     	; 0x1130a <atol+0x26>
   1131c:	3e f4       	brtc	.+14     	; 0x1132c <atol+0x48>
   1131e:	90 95       	com	r25
   11320:	80 95       	com	r24
   11322:	70 95       	com	r23
   11324:	61 95       	neg	r22
   11326:	7f 4f       	sbci	r23, 0xFF	; 255
   11328:	8f 4f       	sbci	r24, 0xFF	; 255
   1132a:	9f 4f       	sbci	r25, 0xFF	; 255
   1132c:	1f 91       	pop	r17
   1132e:	08 95       	ret

00011330 <__ftoa_engine>:
   11330:	28 30       	cpi	r18, 0x08	; 8
   11332:	08 f0       	brcs	.+2      	; 0x11336 <__ftoa_engine+0x6>
   11334:	27 e0       	ldi	r18, 0x07	; 7
   11336:	33 27       	eor	r19, r19
   11338:	da 01       	movw	r26, r20
   1133a:	99 0f       	add	r25, r25
   1133c:	31 1d       	adc	r19, r1
   1133e:	87 fd       	sbrc	r24, 7
   11340:	91 60       	ori	r25, 0x01	; 1
   11342:	00 96       	adiw	r24, 0x00	; 0
   11344:	61 05       	cpc	r22, r1
   11346:	71 05       	cpc	r23, r1
   11348:	39 f4       	brne	.+14     	; 0x11358 <__ftoa_engine+0x28>
   1134a:	32 60       	ori	r19, 0x02	; 2
   1134c:	2e 5f       	subi	r18, 0xFE	; 254
   1134e:	3d 93       	st	X+, r19
   11350:	30 e3       	ldi	r19, 0x30	; 48
   11352:	2a 95       	dec	r18
   11354:	e1 f7       	brne	.-8      	; 0x1134e <__ftoa_engine+0x1e>
   11356:	08 95       	ret
   11358:	9f 3f       	cpi	r25, 0xFF	; 255
   1135a:	30 f0       	brcs	.+12     	; 0x11368 <__ftoa_engine+0x38>
   1135c:	80 38       	cpi	r24, 0x80	; 128
   1135e:	71 05       	cpc	r23, r1
   11360:	61 05       	cpc	r22, r1
   11362:	09 f0       	breq	.+2      	; 0x11366 <__ftoa_engine+0x36>
   11364:	3c 5f       	subi	r19, 0xFC	; 252
   11366:	3c 5f       	subi	r19, 0xFC	; 252
   11368:	3d 93       	st	X+, r19
   1136a:	91 30       	cpi	r25, 0x01	; 1
   1136c:	08 f0       	brcs	.+2      	; 0x11370 <__ftoa_engine+0x40>
   1136e:	80 68       	ori	r24, 0x80	; 128
   11370:	91 1d       	adc	r25, r1
   11372:	df 93       	push	r29
   11374:	cf 93       	push	r28
   11376:	1f 93       	push	r17
   11378:	0f 93       	push	r16
   1137a:	ff 92       	push	r15
   1137c:	ef 92       	push	r14
   1137e:	19 2f       	mov	r17, r25
   11380:	98 7f       	andi	r25, 0xF8	; 248
   11382:	96 95       	lsr	r25
   11384:	e9 2f       	mov	r30, r25
   11386:	96 95       	lsr	r25
   11388:	96 95       	lsr	r25
   1138a:	e9 0f       	add	r30, r25
   1138c:	ff 27       	eor	r31, r31
   1138e:	e6 5e       	subi	r30, 0xE6	; 230
   11390:	fc 4f       	sbci	r31, 0xFC	; 252
   11392:	99 27       	eor	r25, r25
   11394:	33 27       	eor	r19, r19
   11396:	ee 24       	eor	r14, r14
   11398:	ff 24       	eor	r15, r15
   1139a:	a7 01       	movw	r20, r14
   1139c:	e7 01       	movw	r28, r14
   1139e:	05 90       	lpm	r0, Z+
   113a0:	08 94       	sec
   113a2:	07 94       	ror	r0
   113a4:	28 f4       	brcc	.+10     	; 0x113b0 <__ftoa_engine+0x80>
   113a6:	36 0f       	add	r19, r22
   113a8:	e7 1e       	adc	r14, r23
   113aa:	f8 1e       	adc	r15, r24
   113ac:	49 1f       	adc	r20, r25
   113ae:	51 1d       	adc	r21, r1
   113b0:	66 0f       	add	r22, r22
   113b2:	77 1f       	adc	r23, r23
   113b4:	88 1f       	adc	r24, r24
   113b6:	99 1f       	adc	r25, r25
   113b8:	06 94       	lsr	r0
   113ba:	a1 f7       	brne	.-24     	; 0x113a4 <__ftoa_engine+0x74>
   113bc:	05 90       	lpm	r0, Z+
   113be:	07 94       	ror	r0
   113c0:	28 f4       	brcc	.+10     	; 0x113cc <__ftoa_engine+0x9c>
   113c2:	e7 0e       	add	r14, r23
   113c4:	f8 1e       	adc	r15, r24
   113c6:	49 1f       	adc	r20, r25
   113c8:	56 1f       	adc	r21, r22
   113ca:	c1 1d       	adc	r28, r1
   113cc:	77 0f       	add	r23, r23
   113ce:	88 1f       	adc	r24, r24
   113d0:	99 1f       	adc	r25, r25
   113d2:	66 1f       	adc	r22, r22
   113d4:	06 94       	lsr	r0
   113d6:	a1 f7       	brne	.-24     	; 0x113c0 <__ftoa_engine+0x90>
   113d8:	05 90       	lpm	r0, Z+
   113da:	07 94       	ror	r0
   113dc:	28 f4       	brcc	.+10     	; 0x113e8 <__ftoa_engine+0xb8>
   113de:	f8 0e       	add	r15, r24
   113e0:	49 1f       	adc	r20, r25
   113e2:	56 1f       	adc	r21, r22
   113e4:	c7 1f       	adc	r28, r23
   113e6:	d1 1d       	adc	r29, r1
   113e8:	88 0f       	add	r24, r24
   113ea:	99 1f       	adc	r25, r25
   113ec:	66 1f       	adc	r22, r22
   113ee:	77 1f       	adc	r23, r23
   113f0:	06 94       	lsr	r0
   113f2:	a1 f7       	brne	.-24     	; 0x113dc <__ftoa_engine+0xac>
   113f4:	05 90       	lpm	r0, Z+
   113f6:	07 94       	ror	r0
   113f8:	20 f4       	brcc	.+8      	; 0x11402 <__ftoa_engine+0xd2>
   113fa:	49 0f       	add	r20, r25
   113fc:	56 1f       	adc	r21, r22
   113fe:	c7 1f       	adc	r28, r23
   11400:	d8 1f       	adc	r29, r24
   11402:	99 0f       	add	r25, r25
   11404:	66 1f       	adc	r22, r22
   11406:	77 1f       	adc	r23, r23
   11408:	88 1f       	adc	r24, r24
   1140a:	06 94       	lsr	r0
   1140c:	a9 f7       	brne	.-22     	; 0x113f8 <__ftoa_engine+0xc8>
   1140e:	84 91       	lpm	r24, Z
   11410:	10 95       	com	r17
   11412:	17 70       	andi	r17, 0x07	; 7
   11414:	41 f0       	breq	.+16     	; 0x11426 <__ftoa_engine+0xf6>
   11416:	d6 95       	lsr	r29
   11418:	c7 95       	ror	r28
   1141a:	57 95       	ror	r21
   1141c:	47 95       	ror	r20
   1141e:	f7 94       	ror	r15
   11420:	e7 94       	ror	r14
   11422:	1a 95       	dec	r17
   11424:	c1 f7       	brne	.-16     	; 0x11416 <__ftoa_engine+0xe6>
   11426:	e0 ec       	ldi	r30, 0xC0	; 192
   11428:	f2 e0       	ldi	r31, 0x02	; 2
   1142a:	68 94       	set
   1142c:	15 90       	lpm	r1, Z+
   1142e:	15 91       	lpm	r17, Z+
   11430:	35 91       	lpm	r19, Z+
   11432:	65 91       	lpm	r22, Z+
   11434:	95 91       	lpm	r25, Z+
   11436:	05 90       	lpm	r0, Z+
   11438:	7f e2       	ldi	r23, 0x2F	; 47
   1143a:	73 95       	inc	r23
   1143c:	e1 18       	sub	r14, r1
   1143e:	f1 0a       	sbc	r15, r17
   11440:	43 0b       	sbc	r20, r19
   11442:	56 0b       	sbc	r21, r22
   11444:	c9 0b       	sbc	r28, r25
   11446:	d0 09       	sbc	r29, r0
   11448:	c0 f7       	brcc	.-16     	; 0x1143a <__ftoa_engine+0x10a>
   1144a:	e1 0c       	add	r14, r1
   1144c:	f1 1e       	adc	r15, r17
   1144e:	43 1f       	adc	r20, r19
   11450:	56 1f       	adc	r21, r22
   11452:	c9 1f       	adc	r28, r25
   11454:	d0 1d       	adc	r29, r0
   11456:	7e f4       	brtc	.+30     	; 0x11476 <__ftoa_engine+0x146>
   11458:	70 33       	cpi	r23, 0x30	; 48
   1145a:	11 f4       	brne	.+4      	; 0x11460 <__ftoa_engine+0x130>
   1145c:	8a 95       	dec	r24
   1145e:	e6 cf       	rjmp	.-52     	; 0x1142c <__ftoa_engine+0xfc>
   11460:	e8 94       	clt
   11462:	01 50       	subi	r16, 0x01	; 1
   11464:	30 f0       	brcs	.+12     	; 0x11472 <__ftoa_engine+0x142>
   11466:	08 0f       	add	r16, r24
   11468:	0a f4       	brpl	.+2      	; 0x1146c <__ftoa_engine+0x13c>
   1146a:	00 27       	eor	r16, r16
   1146c:	02 17       	cp	r16, r18
   1146e:	08 f4       	brcc	.+2      	; 0x11472 <__ftoa_engine+0x142>
   11470:	20 2f       	mov	r18, r16
   11472:	23 95       	inc	r18
   11474:	02 2f       	mov	r16, r18
   11476:	7a 33       	cpi	r23, 0x3A	; 58
   11478:	28 f0       	brcs	.+10     	; 0x11484 <__ftoa_engine+0x154>
   1147a:	79 e3       	ldi	r23, 0x39	; 57
   1147c:	7d 93       	st	X+, r23
   1147e:	2a 95       	dec	r18
   11480:	e9 f7       	brne	.-6      	; 0x1147c <__ftoa_engine+0x14c>
   11482:	10 c0       	rjmp	.+32     	; 0x114a4 <__ftoa_engine+0x174>
   11484:	7d 93       	st	X+, r23
   11486:	2a 95       	dec	r18
   11488:	89 f6       	brne	.-94     	; 0x1142c <__ftoa_engine+0xfc>
   1148a:	06 94       	lsr	r0
   1148c:	97 95       	ror	r25
   1148e:	67 95       	ror	r22
   11490:	37 95       	ror	r19
   11492:	17 95       	ror	r17
   11494:	17 94       	ror	r1
   11496:	e1 18       	sub	r14, r1
   11498:	f1 0a       	sbc	r15, r17
   1149a:	43 0b       	sbc	r20, r19
   1149c:	56 0b       	sbc	r21, r22
   1149e:	c9 0b       	sbc	r28, r25
   114a0:	d0 09       	sbc	r29, r0
   114a2:	98 f0       	brcs	.+38     	; 0x114ca <__ftoa_engine+0x19a>
   114a4:	23 95       	inc	r18
   114a6:	7e 91       	ld	r23, -X
   114a8:	73 95       	inc	r23
   114aa:	7a 33       	cpi	r23, 0x3A	; 58
   114ac:	08 f0       	brcs	.+2      	; 0x114b0 <__ftoa_engine+0x180>
   114ae:	70 e3       	ldi	r23, 0x30	; 48
   114b0:	7c 93       	st	X, r23
   114b2:	20 13       	cpse	r18, r16
   114b4:	b8 f7       	brcc	.-18     	; 0x114a4 <__ftoa_engine+0x174>
   114b6:	7e 91       	ld	r23, -X
   114b8:	70 61       	ori	r23, 0x10	; 16
   114ba:	7d 93       	st	X+, r23
   114bc:	30 f0       	brcs	.+12     	; 0x114ca <__ftoa_engine+0x19a>
   114be:	83 95       	inc	r24
   114c0:	71 e3       	ldi	r23, 0x31	; 49
   114c2:	7d 93       	st	X+, r23
   114c4:	70 e3       	ldi	r23, 0x30	; 48
   114c6:	2a 95       	dec	r18
   114c8:	e1 f7       	brne	.-8      	; 0x114c2 <__ftoa_engine+0x192>
   114ca:	11 24       	eor	r1, r1
   114cc:	ef 90       	pop	r14
   114ce:	ff 90       	pop	r15
   114d0:	0f 91       	pop	r16
   114d2:	1f 91       	pop	r17
   114d4:	cf 91       	pop	r28
   114d6:	df 91       	pop	r29
   114d8:	99 27       	eor	r25, r25
   114da:	87 fd       	sbrc	r24, 7
   114dc:	90 95       	com	r25
   114de:	08 95       	ret

000114e0 <strncasecmp_P>:
   114e0:	fb 01       	movw	r30, r22
   114e2:	dc 01       	movw	r26, r24
   114e4:	41 50       	subi	r20, 0x01	; 1
   114e6:	50 40       	sbci	r21, 0x00	; 0
   114e8:	88 f0       	brcs	.+34     	; 0x1150c <strncasecmp_P+0x2c>
   114ea:	8d 91       	ld	r24, X+
   114ec:	81 34       	cpi	r24, 0x41	; 65
   114ee:	1c f0       	brlt	.+6      	; 0x114f6 <strncasecmp_P+0x16>
   114f0:	8b 35       	cpi	r24, 0x5B	; 91
   114f2:	0c f4       	brge	.+2      	; 0x114f6 <strncasecmp_P+0x16>
   114f4:	80 5e       	subi	r24, 0xE0	; 224
   114f6:	65 91       	lpm	r22, Z+
   114f8:	61 34       	cpi	r22, 0x41	; 65
   114fa:	1c f0       	brlt	.+6      	; 0x11502 <strncasecmp_P+0x22>
   114fc:	6b 35       	cpi	r22, 0x5B	; 91
   114fe:	0c f4       	brge	.+2      	; 0x11502 <strncasecmp_P+0x22>
   11500:	60 5e       	subi	r22, 0xE0	; 224
   11502:	86 1b       	sub	r24, r22
   11504:	61 11       	cpse	r22, r1
   11506:	71 f3       	breq	.-36     	; 0x114e4 <strncasecmp_P+0x4>
   11508:	99 0b       	sbc	r25, r25
   1150a:	08 95       	ret
   1150c:	88 1b       	sub	r24, r24
   1150e:	fc cf       	rjmp	.-8      	; 0x11508 <strncasecmp_P+0x28>

00011510 <strncmp_P>:
   11510:	fb 01       	movw	r30, r22
   11512:	dc 01       	movw	r26, r24
   11514:	41 50       	subi	r20, 0x01	; 1
   11516:	50 40       	sbci	r21, 0x00	; 0
   11518:	30 f0       	brcs	.+12     	; 0x11526 <strncmp_P+0x16>
   1151a:	8d 91       	ld	r24, X+
   1151c:	05 90       	lpm	r0, Z+
   1151e:	80 19       	sub	r24, r0
   11520:	19 f4       	brne	.+6      	; 0x11528 <strncmp_P+0x18>
   11522:	00 20       	and	r0, r0
   11524:	b9 f7       	brne	.-18     	; 0x11514 <strncmp_P+0x4>
   11526:	88 1b       	sub	r24, r24
   11528:	99 0b       	sbc	r25, r25
   1152a:	08 95       	ret

0001152c <strnlen_P>:
   1152c:	fc 01       	movw	r30, r24
   1152e:	05 90       	lpm	r0, Z+
   11530:	61 50       	subi	r22, 0x01	; 1
   11532:	70 40       	sbci	r23, 0x00	; 0
   11534:	01 10       	cpse	r0, r1
   11536:	d8 f7       	brcc	.-10     	; 0x1152e <strnlen_P+0x2>
   11538:	80 95       	com	r24
   1153a:	90 95       	com	r25
   1153c:	8e 0f       	add	r24, r30
   1153e:	9f 1f       	adc	r25, r31
   11540:	08 95       	ret

00011542 <strstr_P>:
   11542:	fb 01       	movw	r30, r22
   11544:	55 91       	lpm	r21, Z+
   11546:	55 23       	and	r21, r21
   11548:	a9 f0       	breq	.+42     	; 0x11574 <strstr_P+0x32>
   1154a:	bf 01       	movw	r22, r30
   1154c:	dc 01       	movw	r26, r24
   1154e:	4d 91       	ld	r20, X+
   11550:	45 17       	cp	r20, r21
   11552:	41 11       	cpse	r20, r1
   11554:	e1 f7       	brne	.-8      	; 0x1154e <strstr_P+0xc>
   11556:	59 f4       	brne	.+22     	; 0x1156e <strstr_P+0x2c>
   11558:	cd 01       	movw	r24, r26
   1155a:	05 90       	lpm	r0, Z+
   1155c:	00 20       	and	r0, r0
   1155e:	49 f0       	breq	.+18     	; 0x11572 <strstr_P+0x30>
   11560:	4d 91       	ld	r20, X+
   11562:	40 15       	cp	r20, r0
   11564:	41 11       	cpse	r20, r1
   11566:	c9 f3       	breq	.-14     	; 0x1155a <strstr_P+0x18>
   11568:	fb 01       	movw	r30, r22
   1156a:	41 11       	cpse	r20, r1
   1156c:	ef cf       	rjmp	.-34     	; 0x1154c <strstr_P+0xa>
   1156e:	81 e0       	ldi	r24, 0x01	; 1
   11570:	90 e0       	ldi	r25, 0x00	; 0
   11572:	01 97       	sbiw	r24, 0x01	; 1
   11574:	08 95       	ret

00011576 <memchr>:
   11576:	fc 01       	movw	r30, r24
   11578:	41 50       	subi	r20, 0x01	; 1
   1157a:	50 40       	sbci	r21, 0x00	; 0
   1157c:	30 f0       	brcs	.+12     	; 0x1158a <memchr+0x14>
   1157e:	01 90       	ld	r0, Z+
   11580:	06 16       	cp	r0, r22
   11582:	d1 f7       	brne	.-12     	; 0x11578 <memchr+0x2>
   11584:	31 97       	sbiw	r30, 0x01	; 1
   11586:	cf 01       	movw	r24, r30
   11588:	08 95       	ret
   1158a:	88 27       	eor	r24, r24
   1158c:	99 27       	eor	r25, r25
   1158e:	08 95       	ret

00011590 <memcpy>:
   11590:	fb 01       	movw	r30, r22
   11592:	dc 01       	movw	r26, r24
   11594:	02 c0       	rjmp	.+4      	; 0x1159a <memcpy+0xa>
   11596:	01 90       	ld	r0, Z+
   11598:	0d 92       	st	X+, r0
   1159a:	41 50       	subi	r20, 0x01	; 1
   1159c:	50 40       	sbci	r21, 0x00	; 0
   1159e:	d8 f7       	brcc	.-10     	; 0x11596 <memcpy+0x6>
   115a0:	08 95       	ret

000115a2 <strchr>:
   115a2:	fc 01       	movw	r30, r24
   115a4:	81 91       	ld	r24, Z+
   115a6:	86 17       	cp	r24, r22
   115a8:	21 f0       	breq	.+8      	; 0x115b2 <strchr+0x10>
   115aa:	88 23       	and	r24, r24
   115ac:	d9 f7       	brne	.-10     	; 0x115a4 <strchr+0x2>
   115ae:	99 27       	eor	r25, r25
   115b0:	08 95       	ret
   115b2:	31 97       	sbiw	r30, 0x01	; 1
   115b4:	cf 01       	movw	r24, r30
   115b6:	08 95       	ret

000115b8 <strnlen>:
   115b8:	fc 01       	movw	r30, r24
   115ba:	61 50       	subi	r22, 0x01	; 1
   115bc:	70 40       	sbci	r23, 0x00	; 0
   115be:	01 90       	ld	r0, Z+
   115c0:	01 10       	cpse	r0, r1
   115c2:	d8 f7       	brcc	.-10     	; 0x115ba <strnlen+0x2>
   115c4:	80 95       	com	r24
   115c6:	90 95       	com	r25
   115c8:	8e 0f       	add	r24, r30
   115ca:	9f 1f       	adc	r25, r31
   115cc:	08 95       	ret

000115ce <__mulsi_const_10>:
   115ce:	59 2f       	mov	r21, r25
   115d0:	48 2f       	mov	r20, r24
   115d2:	37 2f       	mov	r19, r23
   115d4:	26 2f       	mov	r18, r22
   115d6:	66 0f       	add	r22, r22
   115d8:	77 1f       	adc	r23, r23
   115da:	88 1f       	adc	r24, r24
   115dc:	99 1f       	adc	r25, r25
   115de:	66 0f       	add	r22, r22
   115e0:	77 1f       	adc	r23, r23
   115e2:	88 1f       	adc	r24, r24
   115e4:	99 1f       	adc	r25, r25
   115e6:	62 0f       	add	r22, r18
   115e8:	73 1f       	adc	r23, r19
   115ea:	84 1f       	adc	r24, r20
   115ec:	95 1f       	adc	r25, r21
   115ee:	66 0f       	add	r22, r22
   115f0:	77 1f       	adc	r23, r23
   115f2:	88 1f       	adc	r24, r24
   115f4:	99 1f       	adc	r25, r25
   115f6:	08 95       	ret

000115f8 <__mulhi_const_10>:
   115f8:	7a e0       	ldi	r23, 0x0A	; 10
   115fa:	97 9f       	mul	r25, r23
   115fc:	90 2d       	mov	r25, r0
   115fe:	87 9f       	mul	r24, r23
   11600:	80 2d       	mov	r24, r0
   11602:	91 0d       	add	r25, r1
   11604:	11 24       	eor	r1, r1
   11606:	08 95       	ret

00011608 <fdevopen>:
   11608:	0f 93       	push	r16
   1160a:	1f 93       	push	r17
   1160c:	cf 93       	push	r28
   1160e:	df 93       	push	r29
   11610:	00 97       	sbiw	r24, 0x00	; 0
   11612:	31 f4       	brne	.+12     	; 0x11620 <fdevopen+0x18>
   11614:	61 15       	cp	r22, r1
   11616:	71 05       	cpc	r23, r1
   11618:	19 f4       	brne	.+6      	; 0x11620 <fdevopen+0x18>
   1161a:	80 e0       	ldi	r24, 0x00	; 0
   1161c:	90 e0       	ldi	r25, 0x00	; 0
   1161e:	39 c0       	rjmp	.+114    	; 0x11692 <fdevopen+0x8a>
   11620:	8b 01       	movw	r16, r22
   11622:	ec 01       	movw	r28, r24
   11624:	6e e0       	ldi	r22, 0x0E	; 14
   11626:	70 e0       	ldi	r23, 0x00	; 0
   11628:	81 e0       	ldi	r24, 0x01	; 1
   1162a:	90 e0       	ldi	r25, 0x00	; 0
   1162c:	31 d1       	rcall	.+610    	; 0x11890 <calloc>
   1162e:	fc 01       	movw	r30, r24
   11630:	89 2b       	or	r24, r25
   11632:	99 f3       	breq	.-26     	; 0x1161a <fdevopen+0x12>
   11634:	80 e8       	ldi	r24, 0x80	; 128
   11636:	83 83       	std	Z+3, r24	; 0x03
   11638:	01 15       	cp	r16, r1
   1163a:	11 05       	cpc	r17, r1
   1163c:	71 f0       	breq	.+28     	; 0x1165a <fdevopen+0x52>
   1163e:	02 87       	std	Z+10, r16	; 0x0a
   11640:	13 87       	std	Z+11, r17	; 0x0b
   11642:	81 e8       	ldi	r24, 0x81	; 129
   11644:	83 83       	std	Z+3, r24	; 0x03
   11646:	80 91 87 2e 	lds	r24, 0x2E87	; 0x802e87 <__iob>
   1164a:	90 91 88 2e 	lds	r25, 0x2E88	; 0x802e88 <__iob+0x1>
   1164e:	89 2b       	or	r24, r25
   11650:	21 f4       	brne	.+8      	; 0x1165a <fdevopen+0x52>
   11652:	e0 93 87 2e 	sts	0x2E87, r30	; 0x802e87 <__iob>
   11656:	f0 93 88 2e 	sts	0x2E88, r31	; 0x802e88 <__iob+0x1>
   1165a:	20 97       	sbiw	r28, 0x00	; 0
   1165c:	c9 f0       	breq	.+50     	; 0x11690 <fdevopen+0x88>
   1165e:	c0 87       	std	Z+8, r28	; 0x08
   11660:	d1 87       	std	Z+9, r29	; 0x09
   11662:	83 81       	ldd	r24, Z+3	; 0x03
   11664:	82 60       	ori	r24, 0x02	; 2
   11666:	83 83       	std	Z+3, r24	; 0x03
   11668:	80 91 89 2e 	lds	r24, 0x2E89	; 0x802e89 <__iob+0x2>
   1166c:	90 91 8a 2e 	lds	r25, 0x2E8A	; 0x802e8a <__iob+0x3>
   11670:	89 2b       	or	r24, r25
   11672:	71 f4       	brne	.+28     	; 0x11690 <fdevopen+0x88>
   11674:	e0 93 89 2e 	sts	0x2E89, r30	; 0x802e89 <__iob+0x2>
   11678:	f0 93 8a 2e 	sts	0x2E8A, r31	; 0x802e8a <__iob+0x3>
   1167c:	80 91 8b 2e 	lds	r24, 0x2E8B	; 0x802e8b <__iob+0x4>
   11680:	90 91 8c 2e 	lds	r25, 0x2E8C	; 0x802e8c <__iob+0x5>
   11684:	89 2b       	or	r24, r25
   11686:	21 f4       	brne	.+8      	; 0x11690 <fdevopen+0x88>
   11688:	e0 93 8b 2e 	sts	0x2E8B, r30	; 0x802e8b <__iob+0x4>
   1168c:	f0 93 8c 2e 	sts	0x2E8C, r31	; 0x802e8c <__iob+0x5>
   11690:	cf 01       	movw	r24, r30
   11692:	df 91       	pop	r29
   11694:	cf 91       	pop	r28
   11696:	1f 91       	pop	r17
   11698:	0f 91       	pop	r16
   1169a:	08 95       	ret

0001169c <fputc>:
   1169c:	0f 93       	push	r16
   1169e:	1f 93       	push	r17
   116a0:	cf 93       	push	r28
   116a2:	df 93       	push	r29
   116a4:	fb 01       	movw	r30, r22
   116a6:	23 81       	ldd	r18, Z+3	; 0x03
   116a8:	21 fd       	sbrc	r18, 1
   116aa:	03 c0       	rjmp	.+6      	; 0x116b2 <fputc+0x16>
   116ac:	8f ef       	ldi	r24, 0xFF	; 255
   116ae:	9f ef       	ldi	r25, 0xFF	; 255
   116b0:	2c c0       	rjmp	.+88     	; 0x1170a <fputc+0x6e>
   116b2:	22 ff       	sbrs	r18, 2
   116b4:	16 c0       	rjmp	.+44     	; 0x116e2 <fputc+0x46>
   116b6:	46 81       	ldd	r20, Z+6	; 0x06
   116b8:	57 81       	ldd	r21, Z+7	; 0x07
   116ba:	24 81       	ldd	r18, Z+4	; 0x04
   116bc:	35 81       	ldd	r19, Z+5	; 0x05
   116be:	42 17       	cp	r20, r18
   116c0:	53 07       	cpc	r21, r19
   116c2:	44 f4       	brge	.+16     	; 0x116d4 <fputc+0x38>
   116c4:	a0 81       	ld	r26, Z
   116c6:	b1 81       	ldd	r27, Z+1	; 0x01
   116c8:	9d 01       	movw	r18, r26
   116ca:	2f 5f       	subi	r18, 0xFF	; 255
   116cc:	3f 4f       	sbci	r19, 0xFF	; 255
   116ce:	20 83       	st	Z, r18
   116d0:	31 83       	std	Z+1, r19	; 0x01
   116d2:	8c 93       	st	X, r24
   116d4:	26 81       	ldd	r18, Z+6	; 0x06
   116d6:	37 81       	ldd	r19, Z+7	; 0x07
   116d8:	2f 5f       	subi	r18, 0xFF	; 255
   116da:	3f 4f       	sbci	r19, 0xFF	; 255
   116dc:	26 83       	std	Z+6, r18	; 0x06
   116de:	37 83       	std	Z+7, r19	; 0x07
   116e0:	14 c0       	rjmp	.+40     	; 0x1170a <fputc+0x6e>
   116e2:	8b 01       	movw	r16, r22
   116e4:	ec 01       	movw	r28, r24
   116e6:	fb 01       	movw	r30, r22
   116e8:	00 84       	ldd	r0, Z+8	; 0x08
   116ea:	f1 85       	ldd	r31, Z+9	; 0x09
   116ec:	e0 2d       	mov	r30, r0
   116ee:	19 95       	eicall
   116f0:	89 2b       	or	r24, r25
   116f2:	e1 f6       	brne	.-72     	; 0x116ac <fputc+0x10>
   116f4:	d8 01       	movw	r26, r16
   116f6:	16 96       	adiw	r26, 0x06	; 6
   116f8:	8d 91       	ld	r24, X+
   116fa:	9c 91       	ld	r25, X
   116fc:	17 97       	sbiw	r26, 0x07	; 7
   116fe:	01 96       	adiw	r24, 0x01	; 1
   11700:	16 96       	adiw	r26, 0x06	; 6
   11702:	8d 93       	st	X+, r24
   11704:	9c 93       	st	X, r25
   11706:	17 97       	sbiw	r26, 0x07	; 7
   11708:	ce 01       	movw	r24, r28
   1170a:	df 91       	pop	r29
   1170c:	cf 91       	pop	r28
   1170e:	1f 91       	pop	r17
   11710:	0f 91       	pop	r16
   11712:	08 95       	ret

00011714 <snprintf_P>:
   11714:	0f 93       	push	r16
   11716:	1f 93       	push	r17
   11718:	cf 93       	push	r28
   1171a:	df 93       	push	r29
   1171c:	cd b7       	in	r28, 0x3d	; 61
   1171e:	de b7       	in	r29, 0x3e	; 62
   11720:	2e 97       	sbiw	r28, 0x0e	; 14
   11722:	cd bf       	out	0x3d, r28	; 61
   11724:	de bf       	out	0x3e, r29	; 62
   11726:	0e 89       	ldd	r16, Y+22	; 0x16
   11728:	1f 89       	ldd	r17, Y+23	; 0x17
   1172a:	88 8d       	ldd	r24, Y+24	; 0x18
   1172c:	99 8d       	ldd	r25, Y+25	; 0x19
   1172e:	2e e0       	ldi	r18, 0x0E	; 14
   11730:	2c 83       	std	Y+4, r18	; 0x04
   11732:	09 83       	std	Y+1, r16	; 0x01
   11734:	1a 83       	std	Y+2, r17	; 0x02
   11736:	97 ff       	sbrs	r25, 7
   11738:	02 c0       	rjmp	.+4      	; 0x1173e <snprintf_P+0x2a>
   1173a:	80 e0       	ldi	r24, 0x00	; 0
   1173c:	90 e8       	ldi	r25, 0x80	; 128
   1173e:	01 97       	sbiw	r24, 0x01	; 1
   11740:	8d 83       	std	Y+5, r24	; 0x05
   11742:	9e 83       	std	Y+6, r25	; 0x06
   11744:	ae 01       	movw	r20, r28
   11746:	44 5e       	subi	r20, 0xE4	; 228
   11748:	5f 4f       	sbci	r21, 0xFF	; 255
   1174a:	6a 8d       	ldd	r22, Y+26	; 0x1a
   1174c:	7b 8d       	ldd	r23, Y+27	; 0x1b
   1174e:	ce 01       	movw	r24, r28
   11750:	01 96       	adiw	r24, 0x01	; 1
   11752:	0e 94 ce 7f 	call	0xff9c	; 0xff9c <vfprintf>
   11756:	4d 81       	ldd	r20, Y+5	; 0x05
   11758:	5e 81       	ldd	r21, Y+6	; 0x06
   1175a:	57 fd       	sbrc	r21, 7
   1175c:	0a c0       	rjmp	.+20     	; 0x11772 <snprintf_P+0x5e>
   1175e:	2f 81       	ldd	r18, Y+7	; 0x07
   11760:	38 85       	ldd	r19, Y+8	; 0x08
   11762:	42 17       	cp	r20, r18
   11764:	53 07       	cpc	r21, r19
   11766:	0c f4       	brge	.+2      	; 0x1176a <snprintf_P+0x56>
   11768:	9a 01       	movw	r18, r20
   1176a:	f8 01       	movw	r30, r16
   1176c:	e2 0f       	add	r30, r18
   1176e:	f3 1f       	adc	r31, r19
   11770:	10 82       	st	Z, r1
   11772:	2e 96       	adiw	r28, 0x0e	; 14
   11774:	cd bf       	out	0x3d, r28	; 61
   11776:	de bf       	out	0x3e, r29	; 62
   11778:	df 91       	pop	r29
   1177a:	cf 91       	pop	r28
   1177c:	1f 91       	pop	r17
   1177e:	0f 91       	pop	r16
   11780:	08 95       	ret

00011782 <sprintf_P>:
   11782:	0f 93       	push	r16
   11784:	1f 93       	push	r17
   11786:	cf 93       	push	r28
   11788:	df 93       	push	r29
   1178a:	cd b7       	in	r28, 0x3d	; 61
   1178c:	de b7       	in	r29, 0x3e	; 62
   1178e:	2e 97       	sbiw	r28, 0x0e	; 14
   11790:	cd bf       	out	0x3d, r28	; 61
   11792:	de bf       	out	0x3e, r29	; 62
   11794:	0e 89       	ldd	r16, Y+22	; 0x16
   11796:	1f 89       	ldd	r17, Y+23	; 0x17
   11798:	8e e0       	ldi	r24, 0x0E	; 14
   1179a:	8c 83       	std	Y+4, r24	; 0x04
   1179c:	09 83       	std	Y+1, r16	; 0x01
   1179e:	1a 83       	std	Y+2, r17	; 0x02
   117a0:	8f ef       	ldi	r24, 0xFF	; 255
   117a2:	9f e7       	ldi	r25, 0x7F	; 127
   117a4:	8d 83       	std	Y+5, r24	; 0x05
   117a6:	9e 83       	std	Y+6, r25	; 0x06
   117a8:	ae 01       	movw	r20, r28
   117aa:	46 5e       	subi	r20, 0xE6	; 230
   117ac:	5f 4f       	sbci	r21, 0xFF	; 255
   117ae:	68 8d       	ldd	r22, Y+24	; 0x18
   117b0:	79 8d       	ldd	r23, Y+25	; 0x19
   117b2:	ce 01       	movw	r24, r28
   117b4:	01 96       	adiw	r24, 0x01	; 1
   117b6:	0e 94 ce 7f 	call	0xff9c	; 0xff9c <vfprintf>
   117ba:	ef 81       	ldd	r30, Y+7	; 0x07
   117bc:	f8 85       	ldd	r31, Y+8	; 0x08
   117be:	e0 0f       	add	r30, r16
   117c0:	f1 1f       	adc	r31, r17
   117c2:	10 82       	st	Z, r1
   117c4:	2e 96       	adiw	r28, 0x0e	; 14
   117c6:	cd bf       	out	0x3d, r28	; 61
   117c8:	de bf       	out	0x3e, r29	; 62
   117ca:	df 91       	pop	r29
   117cc:	cf 91       	pop	r28
   117ce:	1f 91       	pop	r17
   117d0:	0f 91       	pop	r16
   117d2:	08 95       	ret

000117d4 <__ultoa_invert>:
   117d4:	fa 01       	movw	r30, r20
   117d6:	aa 27       	eor	r26, r26
   117d8:	28 30       	cpi	r18, 0x08	; 8
   117da:	51 f1       	breq	.+84     	; 0x11830 <__ultoa_invert+0x5c>
   117dc:	20 31       	cpi	r18, 0x10	; 16
   117de:	81 f1       	breq	.+96     	; 0x11840 <__ultoa_invert+0x6c>
   117e0:	e8 94       	clt
   117e2:	6f 93       	push	r22
   117e4:	6e 7f       	andi	r22, 0xFE	; 254
   117e6:	6e 5f       	subi	r22, 0xFE	; 254
   117e8:	7f 4f       	sbci	r23, 0xFF	; 255
   117ea:	8f 4f       	sbci	r24, 0xFF	; 255
   117ec:	9f 4f       	sbci	r25, 0xFF	; 255
   117ee:	af 4f       	sbci	r26, 0xFF	; 255
   117f0:	b1 e0       	ldi	r27, 0x01	; 1
   117f2:	3e d0       	rcall	.+124    	; 0x11870 <__ultoa_invert+0x9c>
   117f4:	b4 e0       	ldi	r27, 0x04	; 4
   117f6:	3c d0       	rcall	.+120    	; 0x11870 <__ultoa_invert+0x9c>
   117f8:	67 0f       	add	r22, r23
   117fa:	78 1f       	adc	r23, r24
   117fc:	89 1f       	adc	r24, r25
   117fe:	9a 1f       	adc	r25, r26
   11800:	a1 1d       	adc	r26, r1
   11802:	68 0f       	add	r22, r24
   11804:	79 1f       	adc	r23, r25
   11806:	8a 1f       	adc	r24, r26
   11808:	91 1d       	adc	r25, r1
   1180a:	a1 1d       	adc	r26, r1
   1180c:	6a 0f       	add	r22, r26
   1180e:	71 1d       	adc	r23, r1
   11810:	81 1d       	adc	r24, r1
   11812:	91 1d       	adc	r25, r1
   11814:	a1 1d       	adc	r26, r1
   11816:	20 d0       	rcall	.+64     	; 0x11858 <__ultoa_invert+0x84>
   11818:	09 f4       	brne	.+2      	; 0x1181c <__ultoa_invert+0x48>
   1181a:	68 94       	set
   1181c:	3f 91       	pop	r19
   1181e:	2a e0       	ldi	r18, 0x0A	; 10
   11820:	26 9f       	mul	r18, r22
   11822:	11 24       	eor	r1, r1
   11824:	30 19       	sub	r19, r0
   11826:	30 5d       	subi	r19, 0xD0	; 208
   11828:	31 93       	st	Z+, r19
   1182a:	de f6       	brtc	.-74     	; 0x117e2 <__ultoa_invert+0xe>
   1182c:	cf 01       	movw	r24, r30
   1182e:	08 95       	ret
   11830:	46 2f       	mov	r20, r22
   11832:	47 70       	andi	r20, 0x07	; 7
   11834:	40 5d       	subi	r20, 0xD0	; 208
   11836:	41 93       	st	Z+, r20
   11838:	b3 e0       	ldi	r27, 0x03	; 3
   1183a:	0f d0       	rcall	.+30     	; 0x1185a <__ultoa_invert+0x86>
   1183c:	c9 f7       	brne	.-14     	; 0x11830 <__ultoa_invert+0x5c>
   1183e:	f6 cf       	rjmp	.-20     	; 0x1182c <__ultoa_invert+0x58>
   11840:	46 2f       	mov	r20, r22
   11842:	4f 70       	andi	r20, 0x0F	; 15
   11844:	40 5d       	subi	r20, 0xD0	; 208
   11846:	4a 33       	cpi	r20, 0x3A	; 58
   11848:	18 f0       	brcs	.+6      	; 0x11850 <__ultoa_invert+0x7c>
   1184a:	49 5d       	subi	r20, 0xD9	; 217
   1184c:	31 fd       	sbrc	r19, 1
   1184e:	40 52       	subi	r20, 0x20	; 32
   11850:	41 93       	st	Z+, r20
   11852:	02 d0       	rcall	.+4      	; 0x11858 <__ultoa_invert+0x84>
   11854:	a9 f7       	brne	.-22     	; 0x11840 <__ultoa_invert+0x6c>
   11856:	ea cf       	rjmp	.-44     	; 0x1182c <__ultoa_invert+0x58>
   11858:	b4 e0       	ldi	r27, 0x04	; 4
   1185a:	a6 95       	lsr	r26
   1185c:	97 95       	ror	r25
   1185e:	87 95       	ror	r24
   11860:	77 95       	ror	r23
   11862:	67 95       	ror	r22
   11864:	ba 95       	dec	r27
   11866:	c9 f7       	brne	.-14     	; 0x1185a <__ultoa_invert+0x86>
   11868:	00 97       	sbiw	r24, 0x00	; 0
   1186a:	61 05       	cpc	r22, r1
   1186c:	71 05       	cpc	r23, r1
   1186e:	08 95       	ret
   11870:	9b 01       	movw	r18, r22
   11872:	ac 01       	movw	r20, r24
   11874:	0a 2e       	mov	r0, r26
   11876:	06 94       	lsr	r0
   11878:	57 95       	ror	r21
   1187a:	47 95       	ror	r20
   1187c:	37 95       	ror	r19
   1187e:	27 95       	ror	r18
   11880:	ba 95       	dec	r27
   11882:	c9 f7       	brne	.-14     	; 0x11876 <__ultoa_invert+0xa2>
   11884:	62 0f       	add	r22, r18
   11886:	73 1f       	adc	r23, r19
   11888:	84 1f       	adc	r24, r20
   1188a:	95 1f       	adc	r25, r21
   1188c:	a0 1d       	adc	r26, r0
   1188e:	08 95       	ret

00011890 <calloc>:
   11890:	0f 93       	push	r16
   11892:	1f 93       	push	r17
   11894:	cf 93       	push	r28
   11896:	df 93       	push	r29
   11898:	86 9f       	mul	r24, r22
   1189a:	80 01       	movw	r16, r0
   1189c:	87 9f       	mul	r24, r23
   1189e:	10 0d       	add	r17, r0
   118a0:	96 9f       	mul	r25, r22
   118a2:	10 0d       	add	r17, r0
   118a4:	11 24       	eor	r1, r1
   118a6:	c8 01       	movw	r24, r16
   118a8:	0d d0       	rcall	.+26     	; 0x118c4 <malloc>
   118aa:	ec 01       	movw	r28, r24
   118ac:	00 97       	sbiw	r24, 0x00	; 0
   118ae:	21 f0       	breq	.+8      	; 0x118b8 <calloc+0x28>
   118b0:	a8 01       	movw	r20, r16
   118b2:	60 e0       	ldi	r22, 0x00	; 0
   118b4:	70 e0       	ldi	r23, 0x00	; 0
   118b6:	86 d2       	rcall	.+1292   	; 0x11dc4 <memset>
   118b8:	ce 01       	movw	r24, r28
   118ba:	df 91       	pop	r29
   118bc:	cf 91       	pop	r28
   118be:	1f 91       	pop	r17
   118c0:	0f 91       	pop	r16
   118c2:	08 95       	ret

000118c4 <malloc>:
   118c4:	0f 93       	push	r16
   118c6:	1f 93       	push	r17
   118c8:	cf 93       	push	r28
   118ca:	df 93       	push	r29
   118cc:	82 30       	cpi	r24, 0x02	; 2
   118ce:	91 05       	cpc	r25, r1
   118d0:	10 f4       	brcc	.+4      	; 0x118d6 <malloc+0x12>
   118d2:	82 e0       	ldi	r24, 0x02	; 2
   118d4:	90 e0       	ldi	r25, 0x00	; 0
   118d6:	e0 91 8f 2e 	lds	r30, 0x2E8F	; 0x802e8f <__flp>
   118da:	f0 91 90 2e 	lds	r31, 0x2E90	; 0x802e90 <__flp+0x1>
   118de:	20 e0       	ldi	r18, 0x00	; 0
   118e0:	30 e0       	ldi	r19, 0x00	; 0
   118e2:	a0 e0       	ldi	r26, 0x00	; 0
   118e4:	b0 e0       	ldi	r27, 0x00	; 0
   118e6:	30 97       	sbiw	r30, 0x00	; 0
   118e8:	19 f1       	breq	.+70     	; 0x11930 <malloc+0x6c>
   118ea:	40 81       	ld	r20, Z
   118ec:	51 81       	ldd	r21, Z+1	; 0x01
   118ee:	02 81       	ldd	r16, Z+2	; 0x02
   118f0:	13 81       	ldd	r17, Z+3	; 0x03
   118f2:	48 17       	cp	r20, r24
   118f4:	59 07       	cpc	r21, r25
   118f6:	c8 f0       	brcs	.+50     	; 0x1192a <malloc+0x66>
   118f8:	84 17       	cp	r24, r20
   118fa:	95 07       	cpc	r25, r21
   118fc:	69 f4       	brne	.+26     	; 0x11918 <malloc+0x54>
   118fe:	10 97       	sbiw	r26, 0x00	; 0
   11900:	31 f0       	breq	.+12     	; 0x1190e <malloc+0x4a>
   11902:	12 96       	adiw	r26, 0x02	; 2
   11904:	0c 93       	st	X, r16
   11906:	12 97       	sbiw	r26, 0x02	; 2
   11908:	13 96       	adiw	r26, 0x03	; 3
   1190a:	1c 93       	st	X, r17
   1190c:	27 c0       	rjmp	.+78     	; 0x1195c <malloc+0x98>
   1190e:	00 93 8f 2e 	sts	0x2E8F, r16	; 0x802e8f <__flp>
   11912:	10 93 90 2e 	sts	0x2E90, r17	; 0x802e90 <__flp+0x1>
   11916:	22 c0       	rjmp	.+68     	; 0x1195c <malloc+0x98>
   11918:	21 15       	cp	r18, r1
   1191a:	31 05       	cpc	r19, r1
   1191c:	19 f0       	breq	.+6      	; 0x11924 <malloc+0x60>
   1191e:	42 17       	cp	r20, r18
   11920:	53 07       	cpc	r21, r19
   11922:	18 f4       	brcc	.+6      	; 0x1192a <malloc+0x66>
   11924:	9a 01       	movw	r18, r20
   11926:	bd 01       	movw	r22, r26
   11928:	ef 01       	movw	r28, r30
   1192a:	df 01       	movw	r26, r30
   1192c:	f8 01       	movw	r30, r16
   1192e:	db cf       	rjmp	.-74     	; 0x118e6 <malloc+0x22>
   11930:	21 15       	cp	r18, r1
   11932:	31 05       	cpc	r19, r1
   11934:	f9 f0       	breq	.+62     	; 0x11974 <malloc+0xb0>
   11936:	28 1b       	sub	r18, r24
   11938:	39 0b       	sbc	r19, r25
   1193a:	24 30       	cpi	r18, 0x04	; 4
   1193c:	31 05       	cpc	r19, r1
   1193e:	80 f4       	brcc	.+32     	; 0x11960 <malloc+0x9c>
   11940:	8a 81       	ldd	r24, Y+2	; 0x02
   11942:	9b 81       	ldd	r25, Y+3	; 0x03
   11944:	61 15       	cp	r22, r1
   11946:	71 05       	cpc	r23, r1
   11948:	21 f0       	breq	.+8      	; 0x11952 <malloc+0x8e>
   1194a:	fb 01       	movw	r30, r22
   1194c:	82 83       	std	Z+2, r24	; 0x02
   1194e:	93 83       	std	Z+3, r25	; 0x03
   11950:	04 c0       	rjmp	.+8      	; 0x1195a <malloc+0x96>
   11952:	80 93 8f 2e 	sts	0x2E8F, r24	; 0x802e8f <__flp>
   11956:	90 93 90 2e 	sts	0x2E90, r25	; 0x802e90 <__flp+0x1>
   1195a:	fe 01       	movw	r30, r28
   1195c:	32 96       	adiw	r30, 0x02	; 2
   1195e:	44 c0       	rjmp	.+136    	; 0x119e8 <malloc+0x124>
   11960:	fe 01       	movw	r30, r28
   11962:	e2 0f       	add	r30, r18
   11964:	f3 1f       	adc	r31, r19
   11966:	81 93       	st	Z+, r24
   11968:	91 93       	st	Z+, r25
   1196a:	22 50       	subi	r18, 0x02	; 2
   1196c:	31 09       	sbc	r19, r1
   1196e:	28 83       	st	Y, r18
   11970:	39 83       	std	Y+1, r19	; 0x01
   11972:	3a c0       	rjmp	.+116    	; 0x119e8 <malloc+0x124>
   11974:	20 91 8d 2e 	lds	r18, 0x2E8D	; 0x802e8d <__brkval>
   11978:	30 91 8e 2e 	lds	r19, 0x2E8E	; 0x802e8e <__brkval+0x1>
   1197c:	23 2b       	or	r18, r19
   1197e:	41 f4       	brne	.+16     	; 0x11990 <malloc+0xcc>
   11980:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
   11984:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
   11988:	20 93 8d 2e 	sts	0x2E8D, r18	; 0x802e8d <__brkval>
   1198c:	30 93 8e 2e 	sts	0x2E8E, r19	; 0x802e8e <__brkval+0x1>
   11990:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
   11994:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
   11998:	21 15       	cp	r18, r1
   1199a:	31 05       	cpc	r19, r1
   1199c:	41 f4       	brne	.+16     	; 0x119ae <malloc+0xea>
   1199e:	2d b7       	in	r18, 0x3d	; 61
   119a0:	3e b7       	in	r19, 0x3e	; 62
   119a2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
   119a6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
   119aa:	24 1b       	sub	r18, r20
   119ac:	35 0b       	sbc	r19, r21
   119ae:	e0 91 8d 2e 	lds	r30, 0x2E8D	; 0x802e8d <__brkval>
   119b2:	f0 91 8e 2e 	lds	r31, 0x2E8E	; 0x802e8e <__brkval+0x1>
   119b6:	e2 17       	cp	r30, r18
   119b8:	f3 07       	cpc	r31, r19
   119ba:	a0 f4       	brcc	.+40     	; 0x119e4 <malloc+0x120>
   119bc:	2e 1b       	sub	r18, r30
   119be:	3f 0b       	sbc	r19, r31
   119c0:	28 17       	cp	r18, r24
   119c2:	39 07       	cpc	r19, r25
   119c4:	78 f0       	brcs	.+30     	; 0x119e4 <malloc+0x120>
   119c6:	ac 01       	movw	r20, r24
   119c8:	4e 5f       	subi	r20, 0xFE	; 254
   119ca:	5f 4f       	sbci	r21, 0xFF	; 255
   119cc:	24 17       	cp	r18, r20
   119ce:	35 07       	cpc	r19, r21
   119d0:	48 f0       	brcs	.+18     	; 0x119e4 <malloc+0x120>
   119d2:	4e 0f       	add	r20, r30
   119d4:	5f 1f       	adc	r21, r31
   119d6:	40 93 8d 2e 	sts	0x2E8D, r20	; 0x802e8d <__brkval>
   119da:	50 93 8e 2e 	sts	0x2E8E, r21	; 0x802e8e <__brkval+0x1>
   119de:	81 93       	st	Z+, r24
   119e0:	91 93       	st	Z+, r25
   119e2:	02 c0       	rjmp	.+4      	; 0x119e8 <malloc+0x124>
   119e4:	e0 e0       	ldi	r30, 0x00	; 0
   119e6:	f0 e0       	ldi	r31, 0x00	; 0
   119e8:	cf 01       	movw	r24, r30
   119ea:	df 91       	pop	r29
   119ec:	cf 91       	pop	r28
   119ee:	1f 91       	pop	r17
   119f0:	0f 91       	pop	r16
   119f2:	08 95       	ret

000119f4 <free>:
   119f4:	cf 93       	push	r28
   119f6:	df 93       	push	r29
   119f8:	00 97       	sbiw	r24, 0x00	; 0
   119fa:	09 f4       	brne	.+2      	; 0x119fe <free+0xa>
   119fc:	81 c0       	rjmp	.+258    	; 0x11b00 <free+0x10c>
   119fe:	fc 01       	movw	r30, r24
   11a00:	32 97       	sbiw	r30, 0x02	; 2
   11a02:	12 82       	std	Z+2, r1	; 0x02
   11a04:	13 82       	std	Z+3, r1	; 0x03
   11a06:	a0 91 8f 2e 	lds	r26, 0x2E8F	; 0x802e8f <__flp>
   11a0a:	b0 91 90 2e 	lds	r27, 0x2E90	; 0x802e90 <__flp+0x1>
   11a0e:	10 97       	sbiw	r26, 0x00	; 0
   11a10:	81 f4       	brne	.+32     	; 0x11a32 <free+0x3e>
   11a12:	20 81       	ld	r18, Z
   11a14:	31 81       	ldd	r19, Z+1	; 0x01
   11a16:	82 0f       	add	r24, r18
   11a18:	93 1f       	adc	r25, r19
   11a1a:	20 91 8d 2e 	lds	r18, 0x2E8D	; 0x802e8d <__brkval>
   11a1e:	30 91 8e 2e 	lds	r19, 0x2E8E	; 0x802e8e <__brkval+0x1>
   11a22:	28 17       	cp	r18, r24
   11a24:	39 07       	cpc	r19, r25
   11a26:	51 f5       	brne	.+84     	; 0x11a7c <free+0x88>
   11a28:	e0 93 8d 2e 	sts	0x2E8D, r30	; 0x802e8d <__brkval>
   11a2c:	f0 93 8e 2e 	sts	0x2E8E, r31	; 0x802e8e <__brkval+0x1>
   11a30:	67 c0       	rjmp	.+206    	; 0x11b00 <free+0x10c>
   11a32:	ed 01       	movw	r28, r26
   11a34:	20 e0       	ldi	r18, 0x00	; 0
   11a36:	30 e0       	ldi	r19, 0x00	; 0
   11a38:	ce 17       	cp	r28, r30
   11a3a:	df 07       	cpc	r29, r31
   11a3c:	40 f4       	brcc	.+16     	; 0x11a4e <free+0x5a>
   11a3e:	4a 81       	ldd	r20, Y+2	; 0x02
   11a40:	5b 81       	ldd	r21, Y+3	; 0x03
   11a42:	9e 01       	movw	r18, r28
   11a44:	41 15       	cp	r20, r1
   11a46:	51 05       	cpc	r21, r1
   11a48:	f1 f0       	breq	.+60     	; 0x11a86 <free+0x92>
   11a4a:	ea 01       	movw	r28, r20
   11a4c:	f5 cf       	rjmp	.-22     	; 0x11a38 <free+0x44>
   11a4e:	c2 83       	std	Z+2, r28	; 0x02
   11a50:	d3 83       	std	Z+3, r29	; 0x03
   11a52:	40 81       	ld	r20, Z
   11a54:	51 81       	ldd	r21, Z+1	; 0x01
   11a56:	84 0f       	add	r24, r20
   11a58:	95 1f       	adc	r25, r21
   11a5a:	c8 17       	cp	r28, r24
   11a5c:	d9 07       	cpc	r29, r25
   11a5e:	59 f4       	brne	.+22     	; 0x11a76 <free+0x82>
   11a60:	88 81       	ld	r24, Y
   11a62:	99 81       	ldd	r25, Y+1	; 0x01
   11a64:	84 0f       	add	r24, r20
   11a66:	95 1f       	adc	r25, r21
   11a68:	02 96       	adiw	r24, 0x02	; 2
   11a6a:	80 83       	st	Z, r24
   11a6c:	91 83       	std	Z+1, r25	; 0x01
   11a6e:	8a 81       	ldd	r24, Y+2	; 0x02
   11a70:	9b 81       	ldd	r25, Y+3	; 0x03
   11a72:	82 83       	std	Z+2, r24	; 0x02
   11a74:	93 83       	std	Z+3, r25	; 0x03
   11a76:	21 15       	cp	r18, r1
   11a78:	31 05       	cpc	r19, r1
   11a7a:	29 f4       	brne	.+10     	; 0x11a86 <free+0x92>
   11a7c:	e0 93 8f 2e 	sts	0x2E8F, r30	; 0x802e8f <__flp>
   11a80:	f0 93 90 2e 	sts	0x2E90, r31	; 0x802e90 <__flp+0x1>
   11a84:	3d c0       	rjmp	.+122    	; 0x11b00 <free+0x10c>
   11a86:	e9 01       	movw	r28, r18
   11a88:	ea 83       	std	Y+2, r30	; 0x02
   11a8a:	fb 83       	std	Y+3, r31	; 0x03
   11a8c:	49 91       	ld	r20, Y+
   11a8e:	59 91       	ld	r21, Y+
   11a90:	c4 0f       	add	r28, r20
   11a92:	d5 1f       	adc	r29, r21
   11a94:	ec 17       	cp	r30, r28
   11a96:	fd 07       	cpc	r31, r29
   11a98:	61 f4       	brne	.+24     	; 0x11ab2 <free+0xbe>
   11a9a:	80 81       	ld	r24, Z
   11a9c:	91 81       	ldd	r25, Z+1	; 0x01
   11a9e:	84 0f       	add	r24, r20
   11aa0:	95 1f       	adc	r25, r21
   11aa2:	02 96       	adiw	r24, 0x02	; 2
   11aa4:	e9 01       	movw	r28, r18
   11aa6:	88 83       	st	Y, r24
   11aa8:	99 83       	std	Y+1, r25	; 0x01
   11aaa:	82 81       	ldd	r24, Z+2	; 0x02
   11aac:	93 81       	ldd	r25, Z+3	; 0x03
   11aae:	8a 83       	std	Y+2, r24	; 0x02
   11ab0:	9b 83       	std	Y+3, r25	; 0x03
   11ab2:	e0 e0       	ldi	r30, 0x00	; 0
   11ab4:	f0 e0       	ldi	r31, 0x00	; 0
   11ab6:	12 96       	adiw	r26, 0x02	; 2
   11ab8:	8d 91       	ld	r24, X+
   11aba:	9c 91       	ld	r25, X
   11abc:	13 97       	sbiw	r26, 0x03	; 3
   11abe:	00 97       	sbiw	r24, 0x00	; 0
   11ac0:	19 f0       	breq	.+6      	; 0x11ac8 <free+0xd4>
   11ac2:	fd 01       	movw	r30, r26
   11ac4:	dc 01       	movw	r26, r24
   11ac6:	f7 cf       	rjmp	.-18     	; 0x11ab6 <free+0xc2>
   11ac8:	8d 91       	ld	r24, X+
   11aca:	9c 91       	ld	r25, X
   11acc:	11 97       	sbiw	r26, 0x01	; 1
   11ace:	9d 01       	movw	r18, r26
   11ad0:	2e 5f       	subi	r18, 0xFE	; 254
   11ad2:	3f 4f       	sbci	r19, 0xFF	; 255
   11ad4:	82 0f       	add	r24, r18
   11ad6:	93 1f       	adc	r25, r19
   11ad8:	20 91 8d 2e 	lds	r18, 0x2E8D	; 0x802e8d <__brkval>
   11adc:	30 91 8e 2e 	lds	r19, 0x2E8E	; 0x802e8e <__brkval+0x1>
   11ae0:	28 17       	cp	r18, r24
   11ae2:	39 07       	cpc	r19, r25
   11ae4:	69 f4       	brne	.+26     	; 0x11b00 <free+0x10c>
   11ae6:	30 97       	sbiw	r30, 0x00	; 0
   11ae8:	29 f4       	brne	.+10     	; 0x11af4 <free+0x100>
   11aea:	10 92 8f 2e 	sts	0x2E8F, r1	; 0x802e8f <__flp>
   11aee:	10 92 90 2e 	sts	0x2E90, r1	; 0x802e90 <__flp+0x1>
   11af2:	02 c0       	rjmp	.+4      	; 0x11af8 <free+0x104>
   11af4:	12 82       	std	Z+2, r1	; 0x02
   11af6:	13 82       	std	Z+3, r1	; 0x03
   11af8:	a0 93 8d 2e 	sts	0x2E8D, r26	; 0x802e8d <__brkval>
   11afc:	b0 93 8e 2e 	sts	0x2E8E, r27	; 0x802e8e <__brkval+0x1>
   11b00:	df 91       	pop	r29
   11b02:	cf 91       	pop	r28
   11b04:	08 95       	ret

00011b06 <strtod>:
   11b06:	8f 92       	push	r8
   11b08:	9f 92       	push	r9
   11b0a:	af 92       	push	r10
   11b0c:	bf 92       	push	r11
   11b0e:	cf 92       	push	r12
   11b10:	df 92       	push	r13
   11b12:	ef 92       	push	r14
   11b14:	ff 92       	push	r15
   11b16:	0f 93       	push	r16
   11b18:	1f 93       	push	r17
   11b1a:	cf 93       	push	r28
   11b1c:	df 93       	push	r29
   11b1e:	ec 01       	movw	r28, r24
   11b20:	6b 01       	movw	r12, r22
   11b22:	61 15       	cp	r22, r1
   11b24:	71 05       	cpc	r23, r1
   11b26:	19 f0       	breq	.+6      	; 0x11b2e <strtod+0x28>
   11b28:	fb 01       	movw	r30, r22
   11b2a:	80 83       	st	Z, r24
   11b2c:	91 83       	std	Z+1, r25	; 0x01
   11b2e:	7e 01       	movw	r14, r28
   11b30:	ff ef       	ldi	r31, 0xFF	; 255
   11b32:	ef 1a       	sub	r14, r31
   11b34:	ff 0a       	sbc	r15, r31
   11b36:	08 81       	ld	r16, Y
   11b38:	80 2f       	mov	r24, r16
   11b3a:	90 e0       	ldi	r25, 0x00	; 0
   11b3c:	3b d1       	rcall	.+630    	; 0x11db4 <isspace>
   11b3e:	89 2b       	or	r24, r25
   11b40:	11 f0       	breq	.+4      	; 0x11b46 <strtod+0x40>
   11b42:	e7 01       	movw	r28, r14
   11b44:	f4 cf       	rjmp	.-24     	; 0x11b2e <strtod+0x28>
   11b46:	0d 32       	cpi	r16, 0x2D	; 45
   11b48:	39 f4       	brne	.+14     	; 0x11b58 <strtod+0x52>
   11b4a:	7e 01       	movw	r14, r28
   11b4c:	82 e0       	ldi	r24, 0x02	; 2
   11b4e:	e8 0e       	add	r14, r24
   11b50:	f1 1c       	adc	r15, r1
   11b52:	09 81       	ldd	r16, Y+1	; 0x01
   11b54:	11 e0       	ldi	r17, 0x01	; 1
   11b56:	08 c0       	rjmp	.+16     	; 0x11b68 <strtod+0x62>
   11b58:	0b 32       	cpi	r16, 0x2B	; 43
   11b5a:	29 f4       	brne	.+10     	; 0x11b66 <strtod+0x60>
   11b5c:	7e 01       	movw	r14, r28
   11b5e:	92 e0       	ldi	r25, 0x02	; 2
   11b60:	e9 0e       	add	r14, r25
   11b62:	f1 1c       	adc	r15, r1
   11b64:	09 81       	ldd	r16, Y+1	; 0x01
   11b66:	10 e0       	ldi	r17, 0x00	; 0
   11b68:	e7 01       	movw	r28, r14
   11b6a:	21 97       	sbiw	r28, 0x01	; 1
   11b6c:	43 e0       	ldi	r20, 0x03	; 3
   11b6e:	50 e0       	ldi	r21, 0x00	; 0
   11b70:	62 ec       	ldi	r22, 0xC2	; 194
   11b72:	73 e0       	ldi	r23, 0x03	; 3
   11b74:	ce 01       	movw	r24, r28
   11b76:	b4 dc       	rcall	.-1688   	; 0x114e0 <strncasecmp_P>
   11b78:	89 2b       	or	r24, r25
   11b7a:	b9 f4       	brne	.+46     	; 0x11baa <strtod+0xa4>
   11b7c:	23 96       	adiw	r28, 0x03	; 3
   11b7e:	45 e0       	ldi	r20, 0x05	; 5
   11b80:	50 e0       	ldi	r21, 0x00	; 0
   11b82:	6d eb       	ldi	r22, 0xBD	; 189
   11b84:	73 e0       	ldi	r23, 0x03	; 3
   11b86:	ce 01       	movw	r24, r28
   11b88:	ab dc       	rcall	.-1706   	; 0x114e0 <strncasecmp_P>
   11b8a:	89 2b       	or	r24, r25
   11b8c:	09 f4       	brne	.+2      	; 0x11b90 <strtod+0x8a>
   11b8e:	25 96       	adiw	r28, 0x05	; 5
   11b90:	c1 14       	cp	r12, r1
   11b92:	d1 04       	cpc	r13, r1
   11b94:	19 f0       	breq	.+6      	; 0x11b9c <strtod+0x96>
   11b96:	f6 01       	movw	r30, r12
   11b98:	c0 83       	st	Z, r28
   11b9a:	d1 83       	std	Z+1, r29	; 0x01
   11b9c:	11 11       	cpse	r17, r1
   11b9e:	f4 c0       	rjmp	.+488    	; 0x11d88 <strtod+0x282>
   11ba0:	60 e0       	ldi	r22, 0x00	; 0
   11ba2:	70 e0       	ldi	r23, 0x00	; 0
   11ba4:	80 e8       	ldi	r24, 0x80	; 128
   11ba6:	9f e7       	ldi	r25, 0x7F	; 127
   11ba8:	f8 c0       	rjmp	.+496    	; 0x11d9a <strtod+0x294>
   11baa:	43 e0       	ldi	r20, 0x03	; 3
   11bac:	50 e0       	ldi	r21, 0x00	; 0
   11bae:	6a eb       	ldi	r22, 0xBA	; 186
   11bb0:	73 e0       	ldi	r23, 0x03	; 3
   11bb2:	ce 01       	movw	r24, r28
   11bb4:	95 dc       	rcall	.-1750   	; 0x114e0 <strncasecmp_P>
   11bb6:	89 2b       	or	r24, r25
   11bb8:	59 f4       	brne	.+22     	; 0x11bd0 <strtod+0xca>
   11bba:	c1 14       	cp	r12, r1
   11bbc:	d1 04       	cpc	r13, r1
   11bbe:	09 f4       	brne	.+2      	; 0x11bc2 <strtod+0xbc>
   11bc0:	e8 c0       	rjmp	.+464    	; 0x11d92 <strtod+0x28c>
   11bc2:	f2 e0       	ldi	r31, 0x02	; 2
   11bc4:	ef 0e       	add	r14, r31
   11bc6:	f1 1c       	adc	r15, r1
   11bc8:	f6 01       	movw	r30, r12
   11bca:	e0 82       	st	Z, r14
   11bcc:	f1 82       	std	Z+1, r15	; 0x01
   11bce:	e1 c0       	rjmp	.+450    	; 0x11d92 <strtod+0x28c>
   11bd0:	20 e0       	ldi	r18, 0x00	; 0
   11bd2:	30 e0       	ldi	r19, 0x00	; 0
   11bd4:	a9 01       	movw	r20, r18
   11bd6:	c0 e0       	ldi	r28, 0x00	; 0
   11bd8:	d0 e0       	ldi	r29, 0x00	; 0
   11bda:	f7 01       	movw	r30, r14
   11bdc:	60 ed       	ldi	r22, 0xD0	; 208
   11bde:	a6 2e       	mov	r10, r22
   11be0:	a0 0e       	add	r10, r16
   11be2:	89 e0       	ldi	r24, 0x09	; 9
   11be4:	8a 15       	cp	r24, r10
   11be6:	28 f1       	brcs	.+74     	; 0x11c32 <strtod+0x12c>
   11be8:	91 2f       	mov	r25, r17
   11bea:	92 60       	ori	r25, 0x02	; 2
   11bec:	b9 2e       	mov	r11, r25
   11bee:	81 2f       	mov	r24, r17
   11bf0:	88 70       	andi	r24, 0x08	; 8
   11bf2:	12 ff       	sbrs	r17, 2
   11bf4:	04 c0       	rjmp	.+8      	; 0x11bfe <strtod+0xf8>
   11bf6:	81 11       	cpse	r24, r1
   11bf8:	23 c0       	rjmp	.+70     	; 0x11c40 <strtod+0x13a>
   11bfa:	21 96       	adiw	r28, 0x01	; 1
   11bfc:	21 c0       	rjmp	.+66     	; 0x11c40 <strtod+0x13a>
   11bfe:	81 11       	cpse	r24, r1
   11c00:	21 97       	sbiw	r28, 0x01	; 1
   11c02:	a5 e0       	ldi	r26, 0x05	; 5
   11c04:	b0 e0       	ldi	r27, 0x00	; 0
   11c06:	d4 d9       	rcall	.-3160   	; 0x10fb0 <__muluhisi3>
   11c08:	dc 01       	movw	r26, r24
   11c0a:	cb 01       	movw	r24, r22
   11c0c:	88 0f       	add	r24, r24
   11c0e:	99 1f       	adc	r25, r25
   11c10:	aa 1f       	adc	r26, r26
   11c12:	bb 1f       	adc	r27, r27
   11c14:	9c 01       	movw	r18, r24
   11c16:	ad 01       	movw	r20, r26
   11c18:	2a 0d       	add	r18, r10
   11c1a:	31 1d       	adc	r19, r1
   11c1c:	41 1d       	adc	r20, r1
   11c1e:	51 1d       	adc	r21, r1
   11c20:	28 39       	cpi	r18, 0x98	; 152
   11c22:	89 e9       	ldi	r24, 0x99	; 153
   11c24:	38 07       	cpc	r19, r24
   11c26:	48 07       	cpc	r20, r24
   11c28:	89 e1       	ldi	r24, 0x19	; 25
   11c2a:	58 07       	cpc	r21, r24
   11c2c:	48 f0       	brcs	.+18     	; 0x11c40 <strtod+0x13a>
   11c2e:	16 60       	ori	r17, 0x06	; 6
   11c30:	06 c0       	rjmp	.+12     	; 0x11c3e <strtod+0x138>
   11c32:	9e ef       	ldi	r25, 0xFE	; 254
   11c34:	a9 12       	cpse	r10, r25
   11c36:	0a c0       	rjmp	.+20     	; 0x11c4c <strtod+0x146>
   11c38:	13 fd       	sbrc	r17, 3
   11c3a:	40 c0       	rjmp	.+128    	; 0x11cbc <strtod+0x1b6>
   11c3c:	18 60       	ori	r17, 0x08	; 8
   11c3e:	b1 2e       	mov	r11, r17
   11c40:	8f ef       	ldi	r24, 0xFF	; 255
   11c42:	e8 1a       	sub	r14, r24
   11c44:	f8 0a       	sbc	r15, r24
   11c46:	00 81       	ld	r16, Z
   11c48:	1b 2d       	mov	r17, r11
   11c4a:	c7 cf       	rjmp	.-114    	; 0x11bda <strtod+0xd4>
   11c4c:	80 2f       	mov	r24, r16
   11c4e:	8f 7d       	andi	r24, 0xDF	; 223
   11c50:	85 34       	cpi	r24, 0x45	; 69
   11c52:	a1 f5       	brne	.+104    	; 0x11cbc <strtod+0x1b6>
   11c54:	80 81       	ld	r24, Z
   11c56:	8d 32       	cpi	r24, 0x2D	; 45
   11c58:	11 f4       	brne	.+4      	; 0x11c5e <strtod+0x158>
   11c5a:	10 61       	ori	r17, 0x10	; 16
   11c5c:	06 c0       	rjmp	.+12     	; 0x11c6a <strtod+0x164>
   11c5e:	8b 32       	cpi	r24, 0x2B	; 43
   11c60:	21 f0       	breq	.+8      	; 0x11c6a <strtod+0x164>
   11c62:	31 96       	adiw	r30, 0x01	; 1
   11c64:	61 e0       	ldi	r22, 0x01	; 1
   11c66:	70 e0       	ldi	r23, 0x00	; 0
   11c68:	04 c0       	rjmp	.+8      	; 0x11c72 <strtod+0x16c>
   11c6a:	81 81       	ldd	r24, Z+1	; 0x01
   11c6c:	32 96       	adiw	r30, 0x02	; 2
   11c6e:	62 e0       	ldi	r22, 0x02	; 2
   11c70:	70 e0       	ldi	r23, 0x00	; 0
   11c72:	80 53       	subi	r24, 0x30	; 48
   11c74:	8a 30       	cpi	r24, 0x0A	; 10
   11c76:	18 f0       	brcs	.+6      	; 0x11c7e <strtod+0x178>
   11c78:	e6 1b       	sub	r30, r22
   11c7a:	f7 0b       	sbc	r31, r23
   11c7c:	1f c0       	rjmp	.+62     	; 0x11cbc <strtod+0x1b6>
   11c7e:	60 e0       	ldi	r22, 0x00	; 0
   11c80:	70 e0       	ldi	r23, 0x00	; 0
   11c82:	60 38       	cpi	r22, 0x80	; 128
   11c84:	9c e0       	ldi	r25, 0x0C	; 12
   11c86:	79 07       	cpc	r23, r25
   11c88:	5c f4       	brge	.+22     	; 0x11ca0 <strtod+0x19a>
   11c8a:	db 01       	movw	r26, r22
   11c8c:	aa 0f       	add	r26, r26
   11c8e:	bb 1f       	adc	r27, r27
   11c90:	aa 0f       	add	r26, r26
   11c92:	bb 1f       	adc	r27, r27
   11c94:	6a 0f       	add	r22, r26
   11c96:	7b 1f       	adc	r23, r27
   11c98:	66 0f       	add	r22, r22
   11c9a:	77 1f       	adc	r23, r23
   11c9c:	68 0f       	add	r22, r24
   11c9e:	71 1d       	adc	r23, r1
   11ca0:	31 96       	adiw	r30, 0x01	; 1
   11ca2:	df 01       	movw	r26, r30
   11ca4:	11 97       	sbiw	r26, 0x01	; 1
   11ca6:	8c 91       	ld	r24, X
   11ca8:	80 53       	subi	r24, 0x30	; 48
   11caa:	8a 30       	cpi	r24, 0x0A	; 10
   11cac:	50 f3       	brcs	.-44     	; 0x11c82 <strtod+0x17c>
   11cae:	14 ff       	sbrs	r17, 4
   11cb0:	03 c0       	rjmp	.+6      	; 0x11cb8 <strtod+0x1b2>
   11cb2:	71 95       	neg	r23
   11cb4:	61 95       	neg	r22
   11cb6:	71 09       	sbc	r23, r1
   11cb8:	c6 0f       	add	r28, r22
   11cba:	d7 1f       	adc	r29, r23
   11cbc:	11 ff       	sbrs	r17, 1
   11cbe:	08 c0       	rjmp	.+16     	; 0x11cd0 <strtod+0x1ca>
   11cc0:	c1 14       	cp	r12, r1
   11cc2:	d1 04       	cpc	r13, r1
   11cc4:	29 f0       	breq	.+10     	; 0x11cd0 <strtod+0x1ca>
   11cc6:	cf 01       	movw	r24, r30
   11cc8:	01 97       	sbiw	r24, 0x01	; 1
   11cca:	f6 01       	movw	r30, r12
   11ccc:	80 83       	st	Z, r24
   11cce:	91 83       	std	Z+1, r25	; 0x01
   11cd0:	ca 01       	movw	r24, r20
   11cd2:	b9 01       	movw	r22, r18
   11cd4:	0e 94 73 84 	call	0x108e6	; 0x108e6 <__floatunsisf>
   11cd8:	21 2f       	mov	r18, r17
   11cda:	23 70       	andi	r18, 0x03	; 3
   11cdc:	23 30       	cpi	r18, 0x03	; 3
   11cde:	19 f0       	breq	.+6      	; 0x11ce6 <strtod+0x1e0>
   11ce0:	4b 01       	movw	r8, r22
   11ce2:	5c 01       	movw	r10, r24
   11ce4:	06 c0       	rjmp	.+12     	; 0x11cf2 <strtod+0x1ec>
   11ce6:	4b 01       	movw	r8, r22
   11ce8:	5c 01       	movw	r10, r24
   11cea:	b7 fa       	bst	r11, 7
   11cec:	b0 94       	com	r11
   11cee:	b7 f8       	bld	r11, 7
   11cf0:	b0 94       	com	r11
   11cf2:	20 e0       	ldi	r18, 0x00	; 0
   11cf4:	30 e0       	ldi	r19, 0x00	; 0
   11cf6:	a9 01       	movw	r20, r18
   11cf8:	c5 01       	movw	r24, r10
   11cfa:	b4 01       	movw	r22, r8
   11cfc:	0e 94 d3 83 	call	0x107a6	; 0x107a6 <__cmpsf2>
   11d00:	88 23       	and	r24, r24
   11d02:	09 f4       	brne	.+2      	; 0x11d06 <strtod+0x200>
   11d04:	3e c0       	rjmp	.+124    	; 0x11d82 <strtod+0x27c>
   11d06:	d7 ff       	sbrs	r29, 7
   11d08:	06 c0       	rjmp	.+12     	; 0x11d16 <strtod+0x210>
   11d0a:	d1 95       	neg	r29
   11d0c:	c1 95       	neg	r28
   11d0e:	d1 09       	sbc	r29, r1
   11d10:	09 ed       	ldi	r16, 0xD9	; 217
   11d12:	13 e0       	ldi	r17, 0x03	; 3
   11d14:	02 c0       	rjmp	.+4      	; 0x11d1a <strtod+0x214>
   11d16:	01 ef       	ldi	r16, 0xF1	; 241
   11d18:	13 e0       	ldi	r17, 0x03	; 3
   11d1a:	68 01       	movw	r12, r16
   11d1c:	f8 e1       	ldi	r31, 0x18	; 24
   11d1e:	cf 1a       	sub	r12, r31
   11d20:	d1 08       	sbc	r13, r1
   11d22:	90 e2       	ldi	r25, 0x20	; 32
   11d24:	e9 2e       	mov	r14, r25
   11d26:	f1 2c       	mov	r15, r1
   11d28:	ce 15       	cp	r28, r14
   11d2a:	df 05       	cpc	r29, r15
   11d2c:	74 f0       	brlt	.+28     	; 0x11d4a <strtod+0x244>
   11d2e:	f8 01       	movw	r30, r16
   11d30:	25 91       	lpm	r18, Z+
   11d32:	35 91       	lpm	r19, Z+
   11d34:	45 91       	lpm	r20, Z+
   11d36:	54 91       	lpm	r21, Z
   11d38:	c5 01       	movw	r24, r10
   11d3a:	b4 01       	movw	r22, r8
   11d3c:	0e 94 62 85 	call	0x10ac4	; 0x10ac4 <__mulsf3>
   11d40:	4b 01       	movw	r8, r22
   11d42:	5c 01       	movw	r10, r24
   11d44:	ce 19       	sub	r28, r14
   11d46:	df 09       	sbc	r29, r15
   11d48:	ef cf       	rjmp	.-34     	; 0x11d28 <strtod+0x222>
   11d4a:	04 50       	subi	r16, 0x04	; 4
   11d4c:	11 09       	sbc	r17, r1
   11d4e:	f5 94       	asr	r15
   11d50:	e7 94       	ror	r14
   11d52:	0c 15       	cp	r16, r12
   11d54:	1d 05       	cpc	r17, r13
   11d56:	41 f7       	brne	.-48     	; 0x11d28 <strtod+0x222>
   11d58:	8a 2d       	mov	r24, r10
   11d5a:	88 0f       	add	r24, r24
   11d5c:	8b 2d       	mov	r24, r11
   11d5e:	88 1f       	adc	r24, r24
   11d60:	8f 3f       	cpi	r24, 0xFF	; 255
   11d62:	49 f0       	breq	.+18     	; 0x11d76 <strtod+0x270>
   11d64:	20 e0       	ldi	r18, 0x00	; 0
   11d66:	30 e0       	ldi	r19, 0x00	; 0
   11d68:	a9 01       	movw	r20, r18
   11d6a:	c5 01       	movw	r24, r10
   11d6c:	b4 01       	movw	r22, r8
   11d6e:	0e 94 d3 83 	call	0x107a6	; 0x107a6 <__cmpsf2>
   11d72:	81 11       	cpse	r24, r1
   11d74:	06 c0       	rjmp	.+12     	; 0x11d82 <strtod+0x27c>
   11d76:	82 e2       	ldi	r24, 0x22	; 34
   11d78:	90 e0       	ldi	r25, 0x00	; 0
   11d7a:	80 93 91 2e 	sts	0x2E91, r24	; 0x802e91 <errno>
   11d7e:	90 93 92 2e 	sts	0x2E92, r25	; 0x802e92 <errno+0x1>
   11d82:	c5 01       	movw	r24, r10
   11d84:	b4 01       	movw	r22, r8
   11d86:	09 c0       	rjmp	.+18     	; 0x11d9a <strtod+0x294>
   11d88:	60 e0       	ldi	r22, 0x00	; 0
   11d8a:	70 e0       	ldi	r23, 0x00	; 0
   11d8c:	80 e8       	ldi	r24, 0x80	; 128
   11d8e:	9f ef       	ldi	r25, 0xFF	; 255
   11d90:	04 c0       	rjmp	.+8      	; 0x11d9a <strtod+0x294>
   11d92:	60 e0       	ldi	r22, 0x00	; 0
   11d94:	70 e0       	ldi	r23, 0x00	; 0
   11d96:	80 ec       	ldi	r24, 0xC0	; 192
   11d98:	9f e7       	ldi	r25, 0x7F	; 127
   11d9a:	df 91       	pop	r29
   11d9c:	cf 91       	pop	r28
   11d9e:	1f 91       	pop	r17
   11da0:	0f 91       	pop	r16
   11da2:	ff 90       	pop	r15
   11da4:	ef 90       	pop	r14
   11da6:	df 90       	pop	r13
   11da8:	cf 90       	pop	r12
   11daa:	bf 90       	pop	r11
   11dac:	af 90       	pop	r10
   11dae:	9f 90       	pop	r9
   11db0:	8f 90       	pop	r8
   11db2:	08 95       	ret

00011db4 <isspace>:
   11db4:	91 11       	cpse	r25, r1
   11db6:	0d c0       	rjmp	.+26     	; 0x11dd2 <__ctype_isfalse>
   11db8:	80 32       	cpi	r24, 0x20	; 32
   11dba:	19 f0       	breq	.+6      	; 0x11dc2 <isspace+0xe>
   11dbc:	89 50       	subi	r24, 0x09	; 9
   11dbe:	85 50       	subi	r24, 0x05	; 5
   11dc0:	d0 f7       	brcc	.-12     	; 0x11db6 <isspace+0x2>
   11dc2:	08 95       	ret

00011dc4 <memset>:
   11dc4:	dc 01       	movw	r26, r24
   11dc6:	01 c0       	rjmp	.+2      	; 0x11dca <memset+0x6>
   11dc8:	6d 93       	st	X+, r22
   11dca:	41 50       	subi	r20, 0x01	; 1
   11dcc:	50 40       	sbci	r21, 0x00	; 0
   11dce:	e0 f7       	brcc	.-8      	; 0x11dc8 <memset+0x4>
   11dd0:	08 95       	ret

00011dd2 <__ctype_isfalse>:
   11dd2:	99 27       	eor	r25, r25
   11dd4:	88 27       	eor	r24, r24

00011dd6 <__ctype_istrue>:
   11dd6:	08 95       	ret

00011dd8 <_exit>:
   11dd8:	f8 94       	cli

00011dda <__stop_program>:
   11dda:	ff cf       	rjmp	.-2      	; 0x11dda <__stop_program>

Disassembly of section .BOOT:

00011ddc <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   11ddc:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   11dde:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   11de0:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   11de2:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   11de6:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   11dea:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   11dec:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   11df0:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   11df2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   11df6:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   11df8:	08 95       	ret

00011dfa <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   11dfa:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   11dfe:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   11e00:	fc cf       	rjmp	.-8      	; 0x11dfa <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   11e02:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   11e04:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   11e06:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   11e08:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   11e0c:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   11e0e:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   11e12:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   11e14:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   11e16:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   11e18:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   11e1c:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   11e1e:	08 95       	ret
