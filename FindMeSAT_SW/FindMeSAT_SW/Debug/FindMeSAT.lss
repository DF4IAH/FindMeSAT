
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00802000  00001c7a  00001d0e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000278  008020c6  008020c6  00001dd6  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001e04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000875f  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040d1  00000000  00000000  0000a917  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000049e8  00000000  00000000  0000e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b4  00000000  00000000  000133d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000350e4  00000000  00000000  00013d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029c0  00000000  00000000  00048e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  0004b828  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000af9b  00000000  00000000  0004bb98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c1       	rjmp	.+550    	; 0x24c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c1       	rjmp	.+530    	; 0x24c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c1       	rjmp	.+526    	; 0x24c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c1       	rjmp	.+522    	; 0x24c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c1       	rjmp	.+518    	; 0x24c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c1       	rjmp	.+514    	; 0x24c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c0       	rjmp	.+510    	; 0x24c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c0       	rjmp	.+506    	; 0x24c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c0       	rjmp	.+502    	; 0x24c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c0       	rjmp	.+498    	; 0x24c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c0       	rjmp	.+494    	; 0x24c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c0       	rjmp	.+486    	; 0x24c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c0       	rjmp	.+482    	; 0x24c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c0       	rjmp	.+450    	; 0x24c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
      96:	00 00       	nop
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c7 c0       	rjmp	.+398    	; 0x24c <__bad_interrupt>
      be:	00 00       	nop
      c0:	c5 c0       	rjmp	.+394    	; 0x24c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c3 c0       	rjmp	.+390    	; 0x24c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c1 c0       	rjmp	.+386    	; 0x24c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bf c0       	rjmp	.+382    	; 0x24c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bd c0       	rjmp	.+378    	; 0x24c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bb c0       	rjmp	.+374    	; 0x24c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b9 c0       	rjmp	.+370    	; 0x24c <__bad_interrupt>
      da:	00 00       	nop
      dc:	b7 c0       	rjmp	.+366    	; 0x24c <__bad_interrupt>
      de:	00 00       	nop
      e0:	b5 c0       	rjmp	.+362    	; 0x24c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b1 c0       	rjmp	.+354    	; 0x24c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	af c0       	rjmp	.+350    	; 0x24c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ad c0       	rjmp	.+346    	; 0x24c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ab c0       	rjmp	.+342    	; 0x24c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a9 c0       	rjmp	.+338    	; 0x24c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a7 c0       	rjmp	.+334    	; 0x24c <__bad_interrupt>
      fe:	00 00       	nop
     100:	a5 c0       	rjmp	.+330    	; 0x24c <__bad_interrupt>
     102:	00 00       	nop
     104:	a3 c0       	rjmp	.+326    	; 0x24c <__bad_interrupt>
     106:	00 00       	nop
     108:	a1 c0       	rjmp	.+322    	; 0x24c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9f c0       	rjmp	.+318    	; 0x24c <__bad_interrupt>
     10e:	00 00       	nop
     110:	9d c0       	rjmp	.+314    	; 0x24c <__bad_interrupt>
     112:	00 00       	nop
     114:	9b c0       	rjmp	.+310    	; 0x24c <__bad_interrupt>
     116:	00 00       	nop
     118:	99 c0       	rjmp	.+306    	; 0x24c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	97 c0       	rjmp	.+302    	; 0x24c <__bad_interrupt>
     11e:	00 00       	nop
     120:	95 c0       	rjmp	.+298    	; 0x24c <__bad_interrupt>
     122:	00 00       	nop
     124:	93 c0       	rjmp	.+294    	; 0x24c <__bad_interrupt>
     126:	00 00       	nop
     128:	91 c0       	rjmp	.+290    	; 0x24c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8f c0       	rjmp	.+286    	; 0x24c <__bad_interrupt>
     12e:	00 00       	nop
     130:	8d c0       	rjmp	.+282    	; 0x24c <__bad_interrupt>
     132:	00 00       	nop
     134:	8b c0       	rjmp	.+278    	; 0x24c <__bad_interrupt>
     136:	00 00       	nop
     138:	89 c0       	rjmp	.+274    	; 0x24c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	87 c0       	rjmp	.+270    	; 0x24c <__bad_interrupt>
     13e:	00 00       	nop
     140:	85 c0       	rjmp	.+266    	; 0x24c <__bad_interrupt>
     142:	00 00       	nop
     144:	83 c0       	rjmp	.+262    	; 0x24c <__bad_interrupt>
     146:	00 00       	nop
     148:	81 c0       	rjmp	.+258    	; 0x24c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7f c0       	rjmp	.+254    	; 0x24c <__bad_interrupt>
     14e:	00 00       	nop
     150:	7d c0       	rjmp	.+250    	; 0x24c <__bad_interrupt>
     152:	00 00       	nop
     154:	7b c0       	rjmp	.+246    	; 0x24c <__bad_interrupt>
     156:	00 00       	nop
     158:	79 c0       	rjmp	.+242    	; 0x24c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	77 c0       	rjmp	.+238    	; 0x24c <__bad_interrupt>
     15e:	00 00       	nop
     160:	75 c0       	rjmp	.+234    	; 0x24c <__bad_interrupt>
     162:	00 00       	nop
     164:	73 c0       	rjmp	.+230    	; 0x24c <__bad_interrupt>
     166:	00 00       	nop
     168:	71 c0       	rjmp	.+226    	; 0x24c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6f c0       	rjmp	.+222    	; 0x24c <__bad_interrupt>
     16e:	00 00       	nop
     170:	6d c0       	rjmp	.+218    	; 0x24c <__bad_interrupt>
     172:	00 00       	nop
     174:	6b c0       	rjmp	.+214    	; 0x24c <__bad_interrupt>
     176:	00 00       	nop
     178:	69 c0       	rjmp	.+210    	; 0x24c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	67 c0       	rjmp	.+206    	; 0x24c <__bad_interrupt>
     17e:	00 00       	nop
     180:	65 c0       	rjmp	.+202    	; 0x24c <__bad_interrupt>
     182:	00 00       	nop
     184:	63 c0       	rjmp	.+198    	; 0x24c <__bad_interrupt>
     186:	00 00       	nop
     188:	61 c0       	rjmp	.+194    	; 0x24c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5f c0       	rjmp	.+190    	; 0x24c <__bad_interrupt>
     18e:	00 00       	nop
     190:	5d c0       	rjmp	.+186    	; 0x24c <__bad_interrupt>
     192:	00 00       	nop
     194:	5b c0       	rjmp	.+182    	; 0x24c <__bad_interrupt>
     196:	00 00       	nop
     198:	59 c0       	rjmp	.+178    	; 0x24c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	57 c0       	rjmp	.+174    	; 0x24c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	55 c0       	rjmp	.+170    	; 0x24c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	53 c0       	rjmp	.+166    	; 0x24c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	51 c0       	rjmp	.+162    	; 0x24c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4f c0       	rjmp	.+158    	; 0x24c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4d c0       	rjmp	.+154    	; 0x24c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4b c0       	rjmp	.+150    	; 0x24c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	49 c0       	rjmp	.+146    	; 0x24c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	47 c0       	rjmp	.+142    	; 0x24c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	45 c0       	rjmp	.+138    	; 0x24c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	43 c0       	rjmp	.+134    	; 0x24c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	41 c0       	rjmp	.+130    	; 0x24c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3f c0       	rjmp	.+126    	; 0x24c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3d c0       	rjmp	.+122    	; 0x24c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3b c0       	rjmp	.+118    	; 0x24c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	39 c0       	rjmp	.+114    	; 0x24c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	37 c0       	rjmp	.+110    	; 0x24c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	35 c0       	rjmp	.+106    	; 0x24c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	33 c0       	rjmp	.+102    	; 0x24c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	31 c0       	rjmp	.+98     	; 0x24c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2f c0       	rjmp	.+94     	; 0x24c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2d c0       	rjmp	.+90     	; 0x24c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	8d c5       	rjmp	.+2842   	; 0xd10 <__vector_125>
     1f6:	00 00       	nop
     1f8:	41 c6       	rjmp	.+3202   	; 0xe7c <__vector_126>
     1fa:	00 00       	nop
     1fc:	25 02       	muls	r18, r21
     1fe:	28 02       	muls	r18, r24
     200:	2b 02       	muls	r18, r27
     202:	2e 02       	muls	r18, r30
     204:	31 02       	muls	r19, r17
     206:	34 02       	muls	r19, r20
     208:	37 02       	muls	r19, r23

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e5       	ldi	r29, 0x5F	; 95
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
     21a:	10 e2       	ldi	r17, 0x20	; 32
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	ea e7       	ldi	r30, 0x7A	; 122
     222:	fc e1       	ldi	r31, 0x1C	; 28
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	a6 3c       	cpi	r26, 0xC6	; 198
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	23 e2       	ldi	r18, 0x23	; 35
     236:	a6 ec       	ldi	r26, 0xC6	; 198
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	ae 33       	cpi	r26, 0x3E	; 62
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <main>
     248:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <_exit>

0000024c <__bad_interrupt>:
     24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	1f 92       	push	r1
     254:	1f 92       	push	r1
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	81 11       	cpse	r24, r1
     25c:	26 c0       	rjmp	.+76     	; 0x2aa <udd_sleep_mode+0x5c>
     25e:	90 91 f0 21 	lds	r25, 0x21F0	; 0x8021f0 <udd_b_idle>
     262:	99 23       	and	r25, r25
     264:	f9 f0       	breq	.+62     	; 0x2a4 <udd_sleep_mode+0x56>
     266:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <sleepmgr_locks+0x1>
     26a:	91 11       	cpse	r25, r1
     26c:	01 c0       	rjmp	.+2      	; 0x270 <udd_sleep_mode+0x22>
     26e:	ff cf       	rjmp	.-2      	; 0x26e <udd_sleep_mode+0x20>
     270:	9f b7       	in	r25, 0x3f	; 63
     272:	9a 83       	std	Y+2, r25	; 0x02
     274:	f8 94       	cli
     276:	2a 81       	ldd	r18, Y+2	; 0x02
     278:	e8 e3       	ldi	r30, 0x38	; 56
     27a:	f3 e2       	ldi	r31, 0x23	; 35
     27c:	91 81       	ldd	r25, Z+1	; 0x01
     27e:	91 50       	subi	r25, 0x01	; 1
     280:	91 83       	std	Z+1, r25	; 0x01
     282:	2f bf       	out	0x3f, r18	; 63
     284:	0f c0       	rjmp	.+30     	; 0x2a4 <udd_sleep_mode+0x56>
     286:	90 91 39 23 	lds	r25, 0x2339	; 0x802339 <sleepmgr_locks+0x1>
     28a:	9f 3f       	cpi	r25, 0xFF	; 255
     28c:	09 f4       	brne	.+2      	; 0x290 <udd_sleep_mode+0x42>
     28e:	ff cf       	rjmp	.-2      	; 0x28e <udd_sleep_mode+0x40>
     290:	9f b7       	in	r25, 0x3f	; 63
     292:	99 83       	std	Y+1, r25	; 0x01
     294:	f8 94       	cli
     296:	29 81       	ldd	r18, Y+1	; 0x01
     298:	e8 e3       	ldi	r30, 0x38	; 56
     29a:	f3 e2       	ldi	r31, 0x23	; 35
     29c:	91 81       	ldd	r25, Z+1	; 0x01
     29e:	9f 5f       	subi	r25, 0xFF	; 255
     2a0:	91 83       	std	Z+1, r25	; 0x01
     2a2:	2f bf       	out	0x3f, r18	; 63
     2a4:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <udd_b_idle>
     2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <udd_sleep_mode+0x66>
     2aa:	90 91 f0 21 	lds	r25, 0x21F0	; 0x8021f0 <udd_b_idle>
     2ae:	99 23       	and	r25, r25
     2b0:	51 f3       	breq	.-44     	; 0x286 <udd_sleep_mode+0x38>
     2b2:	f8 cf       	rjmp	.-16     	; 0x2a4 <udd_sleep_mode+0x56>
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <udd_ctrl_init>:
     2be:	0f 93       	push	r16
     2c0:	e8 ec       	ldi	r30, 0xC8	; 200
     2c2:	f4 e0       	ldi	r31, 0x04	; 4
     2c4:	80 81       	ld	r24, Z
     2c6:	8f 7d       	andi	r24, 0xDF	; 223
     2c8:	80 83       	st	Z, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	8f 7d       	andi	r24, 0xDF	; 223
     2ce:	80 83       	st	Z, r24
     2d0:	e4 ec       	ldi	r30, 0xC4	; 196
     2d2:	f1 e2       	ldi	r31, 0x21	; 33
     2d4:	02 e0       	ldi	r16, 0x02	; 2
     2d6:	05 93       	las	Z, r16
     2d8:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <udd_sram+0x16>
     2dc:	10 92 c7 21 	sts	0x21C7, r1	; 0x8021c7 <udd_sram+0x17>
     2e0:	00 e2       	ldi	r16, 0x20	; 32
     2e2:	06 93       	lac	Z, r16
     2e4:	00 e4       	ldi	r16, 0x40	; 64
     2e6:	06 93       	lac	Z, r16
     2e8:	ec eb       	ldi	r30, 0xBC	; 188
     2ea:	f1 e2       	ldi	r31, 0x21	; 33
     2ec:	00 e4       	ldi	r16, 0x40	; 64
     2ee:	06 93       	lac	Z, r16
     2f0:	e8 e2       	ldi	r30, 0x28	; 40
     2f2:	f3 e2       	ldi	r31, 0x23	; 35
     2f4:	14 86       	std	Z+12, r1	; 0x0c
     2f6:	15 86       	std	Z+13, r1	; 0x0d
     2f8:	16 86       	std	Z+14, r1	; 0x0e
     2fa:	17 86       	std	Z+15, r1	; 0x0f
     2fc:	12 86       	std	Z+10, r1	; 0x0a
     2fe:	13 86       	std	Z+11, r1	; 0x0b
     300:	10 92 af 21 	sts	0x21AF, r1	; 0x8021af <udd_ep_control_state>
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <udd_ctrl_stall_data>:
     308:	0f 93       	push	r16
     30a:	85 e0       	ldi	r24, 0x05	; 5
     30c:	80 93 af 21 	sts	0x21AF, r24	; 0x8021af <udd_ep_control_state>
     310:	e5 ec       	ldi	r30, 0xC5	; 197
     312:	f1 e2       	ldi	r31, 0x21	; 33
     314:	04 e0       	ldi	r16, 0x04	; 4
     316:	05 93       	las	Z, r16
     318:	ed eb       	ldi	r30, 0xBD	; 189
     31a:	f1 e2       	ldi	r31, 0x21	; 33
     31c:	04 e0       	ldi	r16, 0x04	; 4
     31e:	05 93       	las	Z, r16
     320:	0f 91       	pop	r16
     322:	08 95       	ret

00000324 <udd_ctrl_send_zlp_in>:
     324:	0f 93       	push	r16
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	80 93 af 21 	sts	0x21AF, r24	; 0x8021af <udd_ep_control_state>
     32c:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <udd_sram+0x16>
     330:	10 92 c7 21 	sts	0x21C7, r1	; 0x8021c7 <udd_sram+0x17>
     334:	e4 ec       	ldi	r30, 0xC4	; 196
     336:	f1 e2       	ldi	r31, 0x21	; 33
     338:	02 e0       	ldi	r16, 0x02	; 2
     33a:	06 93       	lac	Z, r16
     33c:	0f 91       	pop	r16
     33e:	08 95       	ret

00000340 <udd_ctrl_endofrequest>:
     340:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <udd_g_ctrlreq+0xc>
     344:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <udd_g_ctrlreq+0xd>
     348:	30 97       	sbiw	r30, 0x00	; 0
     34a:	09 f0       	breq	.+2      	; 0x34e <udd_ctrl_endofrequest+0xe>
     34c:	19 95       	eicall
     34e:	08 95       	ret

00000350 <udd_ctrl_in_sent>:
     350:	0f 93       	push	r16
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <udd_ep_control_state>
     35a:	83 30       	cpi	r24, 0x03	; 3
     35c:	19 f4       	brne	.+6      	; 0x364 <udd_ctrl_in_sent+0x14>
     35e:	f0 df       	rcall	.-32     	; 0x340 <udd_ctrl_endofrequest>
     360:	ae df       	rcall	.-164    	; 0x2be <udd_ctrl_init>
     362:	5e c0       	rjmp	.+188    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     364:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <udd_ctrl_payload_nb_trans>
     368:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <udd_ctrl_payload_nb_trans+0x1>
     36c:	c0 91 32 23 	lds	r28, 0x2332	; 0x802332 <udd_g_ctrlreq+0xa>
     370:	d0 91 33 23 	lds	r29, 0x2333	; 0x802333 <udd_g_ctrlreq+0xb>
     374:	c8 1b       	sub	r28, r24
     376:	d9 0b       	sbc	r29, r25
     378:	71 f5       	brne	.+92     	; 0x3d6 <udd_ctrl_in_sent+0x86>
     37a:	20 91 ad 21 	lds	r18, 0x21AD	; 0x8021ad <udd_ctrl_prev_payload_nb_trans>
     37e:	30 91 ae 21 	lds	r19, 0x21AE	; 0x8021ae <udd_ctrl_prev_payload_nb_trans+0x1>
     382:	82 0f       	add	r24, r18
     384:	93 1f       	adc	r25, r19
     386:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <udd_ctrl_prev_payload_nb_trans>
     38a:	90 93 ae 21 	sts	0x21AE, r25	; 0x8021ae <udd_ctrl_prev_payload_nb_trans+0x1>
     38e:	20 91 2e 23 	lds	r18, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
     392:	30 91 2f 23 	lds	r19, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
     396:	82 17       	cp	r24, r18
     398:	93 07       	cpc	r25, r19
     39a:	21 f0       	breq	.+8      	; 0x3a4 <udd_ctrl_in_sent+0x54>
     39c:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <__data_end>
     3a0:	88 23       	and	r24, r24
     3a2:	41 f0       	breq	.+16     	; 0x3b4 <udd_ctrl_in_sent+0x64>
     3a4:	84 e0       	ldi	r24, 0x04	; 4
     3a6:	80 93 af 21 	sts	0x21AF, r24	; 0x8021af <udd_ep_control_state>
     3aa:	ec eb       	ldi	r30, 0xBC	; 188
     3ac:	f1 e2       	ldi	r31, 0x21	; 33
     3ae:	02 e0       	ldi	r16, 0x02	; 2
     3b0:	06 93       	lac	Z, r16
     3b2:	36 c0       	rjmp	.+108    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3b4:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <udd_g_ctrlreq+0xe>
     3b8:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <udd_g_ctrlreq+0xf>
     3bc:	30 97       	sbiw	r30, 0x00	; 0
     3be:	99 f0       	breq	.+38     	; 0x3e6 <udd_ctrl_in_sent+0x96>
     3c0:	19 95       	eicall
     3c2:	88 23       	and	r24, r24
     3c4:	81 f0       	breq	.+32     	; 0x3e6 <udd_ctrl_in_sent+0x96>
     3c6:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <udd_ctrl_payload_nb_trans>
     3ca:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <udd_ctrl_payload_nb_trans+0x1>
     3ce:	c0 91 32 23 	lds	r28, 0x2332	; 0x802332 <udd_g_ctrlreq+0xa>
     3d2:	d0 91 33 23 	lds	r29, 0x2333	; 0x802333 <udd_g_ctrlreq+0xb>
     3d6:	c0 34       	cpi	r28, 0x40	; 64
     3d8:	d1 05       	cpc	r29, r1
     3da:	28 f0       	brcs	.+10     	; 0x3e6 <udd_ctrl_in_sent+0x96>
     3dc:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <__data_end>
     3e0:	c0 e4       	ldi	r28, 0x40	; 64
     3e2:	d0 e0       	ldi	r29, 0x00	; 0
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <udd_ctrl_in_sent+0x9c>
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <__data_end>
     3ec:	e0 eb       	ldi	r30, 0xB0	; 176
     3ee:	f1 e2       	ldi	r31, 0x21	; 33
     3f0:	c6 8b       	std	Z+22, r28	; 0x16
     3f2:	d7 8b       	std	Z+23, r29	; 0x17
     3f4:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <udd_ctrl_payload_nb_trans>
     3f8:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <udd_ctrl_payload_nb_trans+0x1>
     3fc:	20 91 30 23 	lds	r18, 0x2330	; 0x802330 <udd_g_ctrlreq+0x8>
     400:	30 91 31 23 	lds	r19, 0x2331	; 0x802331 <udd_g_ctrlreq+0x9>
     404:	28 0f       	add	r18, r24
     406:	39 1f       	adc	r19, r25
     408:	20 8f       	std	Z+24, r18	; 0x18
     40a:	31 8f       	std	Z+25, r19	; 0x19
     40c:	c8 0f       	add	r28, r24
     40e:	d9 1f       	adc	r29, r25
     410:	c0 93 ab 21 	sts	0x21AB, r28	; 0x8021ab <udd_ctrl_payload_nb_trans>
     414:	d0 93 ac 21 	sts	0x21AC, r29	; 0x8021ac <udd_ctrl_payload_nb_trans+0x1>
     418:	e4 ec       	ldi	r30, 0xC4	; 196
     41a:	f1 e2       	ldi	r31, 0x21	; 33
     41c:	02 e0       	ldi	r16, 0x02	; 2
     41e:	06 93       	lac	Z, r16
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	0f 91       	pop	r16
     426:	08 95       	ret

00000428 <udd_ep_get_size>:
     428:	fc 01       	movw	r30, r24
     42a:	81 81       	ldd	r24, Z+1	; 0x01
     42c:	e8 2f       	mov	r30, r24
     42e:	e7 70       	andi	r30, 0x07	; 7
     430:	8e 2f       	mov	r24, r30
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	fc 01       	movw	r30, r24
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	e7 30       	cpi	r30, 0x07	; 7
     43a:	f1 05       	cpc	r31, r1
     43c:	d8 f4       	brcc	.+54     	; 0x474 <udd_ep_get_size+0x4c>
     43e:	88 27       	eor	r24, r24
     440:	e2 50       	subi	r30, 0x02	; 2
     442:	ff 4f       	sbci	r31, 0xFF	; 255
     444:	8f 4f       	sbci	r24, 0xFF	; 255
     446:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__tablejump2__>
     44a:	80 e1       	ldi	r24, 0x10	; 16
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	08 95       	ret
     450:	80 e2       	ldi	r24, 0x20	; 32
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	08 95       	ret
     456:	80 e4       	ldi	r24, 0x40	; 64
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	08 95       	ret
     45c:	80 e8       	ldi	r24, 0x80	; 128
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	08 95       	ret
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	08 95       	ret
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	08 95       	ret
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	93 e0       	ldi	r25, 0x03	; 3
     472:	08 95       	ret
     474:	88 e0       	ldi	r24, 0x08	; 8
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	08 95       	ret

0000047a <udd_ep_get_job>:
     47a:	28 2f       	mov	r18, r24
     47c:	2f 70       	andi	r18, 0x0F	; 15
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	22 0f       	add	r18, r18
     482:	33 1f       	adc	r19, r19
     484:	08 2e       	mov	r0, r24
     486:	00 0c       	add	r0, r0
     488:	99 0b       	sbc	r25, r25
     48a:	88 27       	eor	r24, r24
     48c:	99 0f       	add	r25, r25
     48e:	88 1f       	adc	r24, r24
     490:	99 27       	eor	r25, r25
     492:	82 0f       	add	r24, r18
     494:	93 1f       	adc	r25, r19
     496:	02 97       	sbiw	r24, 0x02	; 2
     498:	9c 01       	movw	r18, r24
     49a:	22 0f       	add	r18, r18
     49c:	33 1f       	adc	r19, r19
     49e:	22 0f       	add	r18, r18
     4a0:	33 1f       	adc	r19, r19
     4a2:	22 0f       	add	r18, r18
     4a4:	33 1f       	adc	r19, r19
     4a6:	82 0f       	add	r24, r18
     4a8:	93 1f       	adc	r25, r19
     4aa:	89 5b       	subi	r24, 0xB9	; 185
     4ac:	9e 4d       	sbci	r25, 0xDE	; 222
     4ae:	08 95       	ret

000004b0 <udd_ctrl_interrupt_tc_setup>:
     4b0:	0f 93       	push	r16
     4b2:	cf 93       	push	r28
     4b4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
     4b8:	80 ff       	sbrs	r24, 0
     4ba:	65 c0       	rjmp	.+202    	; 0x586 <udd_ctrl_interrupt_tc_setup+0xd6>
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
     4c2:	ec eb       	ldi	r30, 0xBC	; 188
     4c4:	f1 e2       	ldi	r31, 0x21	; 33
     4c6:	00 e8       	ldi	r16, 0x80	; 128
     4c8:	06 93       	lac	Z, r16
     4ca:	e4 ec       	ldi	r30, 0xC4	; 196
     4cc:	f1 e2       	ldi	r31, 0x21	; 33
     4ce:	00 e8       	ldi	r16, 0x80	; 128
     4d0:	06 93       	lac	Z, r16
     4d2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
     4d6:	ec eb       	ldi	r30, 0xBC	; 188
     4d8:	f1 e2       	ldi	r31, 0x21	; 33
     4da:	00 e1       	ldi	r16, 0x10	; 16
     4dc:	06 93       	lac	Z, r16
     4de:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <udd_ep_control_state>
     4e2:	88 23       	and	r24, r24
     4e4:	29 f0       	breq	.+10     	; 0x4f0 <udd_ctrl_interrupt_tc_setup+0x40>
     4e6:	83 50       	subi	r24, 0x03	; 3
     4e8:	82 30       	cpi	r24, 0x02	; 2
     4ea:	08 f4       	brcc	.+2      	; 0x4ee <udd_ctrl_interrupt_tc_setup+0x3e>
     4ec:	29 df       	rcall	.-430    	; 0x340 <udd_ctrl_endofrequest>
     4ee:	e7 de       	rcall	.-562    	; 0x2be <udd_ctrl_init>
     4f0:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <udd_sram+0xe>
     4f4:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <udd_sram+0xf>
     4f8:	08 97       	sbiw	r24, 0x08	; 8
     4fa:	09 f0       	breq	.+2      	; 0x4fe <udd_ctrl_interrupt_tc_setup+0x4e>
     4fc:	46 c0       	rjmp	.+140    	; 0x58a <udd_ctrl_interrupt_tc_setup+0xda>
     4fe:	88 e0       	ldi	r24, 0x08	; 8
     500:	eb e6       	ldi	r30, 0x6B	; 107
     502:	f1 e2       	ldi	r31, 0x21	; 33
     504:	a8 e2       	ldi	r26, 0x28	; 40
     506:	b3 e2       	ldi	r27, 0x23	; 35
     508:	01 90       	ld	r0, Z+
     50a:	0d 92       	st	X+, r0
     50c:	8a 95       	dec	r24
     50e:	e1 f7       	brne	.-8      	; 0x508 <udd_ctrl_interrupt_tc_setup+0x58>
     510:	e8 ec       	ldi	r30, 0xC8	; 200
     512:	f4 e0       	ldi	r31, 0x04	; 4
     514:	80 81       	ld	r24, Z
     516:	80 62       	ori	r24, 0x20	; 32
     518:	80 83       	st	Z, r24
     51a:	80 81       	ld	r24, Z
     51c:	80 62       	ori	r24, 0x20	; 32
     51e:	80 83       	st	Z, r24
     520:	0e 94 8d 0b 	call	0x171a	; 0x171a <udc_process_setup>
     524:	c8 2f       	mov	r28, r24
     526:	81 11       	cpse	r24, r1
     528:	03 c0       	rjmp	.+6      	; 0x530 <udd_ctrl_interrupt_tc_setup+0x80>
     52a:	ee de       	rcall	.-548    	; 0x308 <udd_ctrl_stall_data>
     52c:	c1 e0       	ldi	r28, 0x01	; 1
     52e:	2e c0       	rjmp	.+92     	; 0x58c <udd_ctrl_interrupt_tc_setup+0xdc>
     530:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <udd_g_ctrlreq>
     534:	88 23       	and	r24, r24
     536:	6c f4       	brge	.+26     	; 0x552 <udd_ctrl_interrupt_tc_setup+0xa2>
     538:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <udd_ctrl_prev_payload_nb_trans>
     53c:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <udd_ctrl_prev_payload_nb_trans+0x1>
     540:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <udd_ctrl_payload_nb_trans>
     544:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <udd_ctrl_payload_nb_trans+0x1>
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	80 93 af 21 	sts	0x21AF, r24	; 0x8021af <udd_ep_control_state>
     54e:	00 df       	rcall	.-512    	; 0x350 <udd_ctrl_in_sent>
     550:	1d c0       	rjmp	.+58     	; 0x58c <udd_ctrl_interrupt_tc_setup+0xdc>
     552:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
     556:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
     55a:	89 2b       	or	r24, r25
     55c:	11 f4       	brne	.+4      	; 0x562 <udd_ctrl_interrupt_tc_setup+0xb2>
     55e:	e2 de       	rcall	.-572    	; 0x324 <udd_ctrl_send_zlp_in>
     560:	15 c0       	rjmp	.+42     	; 0x58c <udd_ctrl_interrupt_tc_setup+0xdc>
     562:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <udd_ctrl_prev_payload_nb_trans>
     566:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <udd_ctrl_prev_payload_nb_trans+0x1>
     56a:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <udd_ctrl_payload_nb_trans>
     56e:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <udd_ctrl_payload_nb_trans+0x1>
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 af 21 	sts	0x21AF, r24	; 0x8021af <udd_ep_control_state>
     578:	ec eb       	ldi	r30, 0xBC	; 188
     57a:	f1 e2       	ldi	r31, 0x21	; 33
     57c:	02 e0       	ldi	r16, 0x02	; 2
     57e:	06 93       	lac	Z, r16
     580:	00 e2       	ldi	r16, 0x20	; 32
     582:	06 93       	lac	Z, r16
     584:	03 c0       	rjmp	.+6      	; 0x58c <udd_ctrl_interrupt_tc_setup+0xdc>
     586:	c0 e0       	ldi	r28, 0x00	; 0
     588:	01 c0       	rjmp	.+2      	; 0x58c <udd_ctrl_interrupt_tc_setup+0xdc>
     58a:	c1 e0       	ldi	r28, 0x01	; 1
     58c:	8c 2f       	mov	r24, r28
     58e:	cf 91       	pop	r28
     590:	0f 91       	pop	r16
     592:	08 95       	ret

00000594 <udd_ep_trans_complet>:
     594:	8f 92       	push	r8
     596:	9f 92       	push	r9
     598:	af 92       	push	r10
     59a:	bf 92       	push	r11
     59c:	df 92       	push	r13
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	d8 2e       	mov	r13, r24
     5ac:	66 df       	rcall	.-308    	; 0x47a <udd_ep_get_job>
     5ae:	8c 01       	movw	r16, r24
     5b0:	bd 2c       	mov	r11, r13
     5b2:	bb 1c       	adc	r11, r11
     5b4:	bb 24       	eor	r11, r11
     5b6:	bb 1c       	adc	r11, r11
     5b8:	cd 2d       	mov	r28, r13
     5ba:	cf 70       	andi	r28, 0x0F	; 15
     5bc:	d0 e0       	ldi	r29, 0x00	; 0
     5be:	cc 0f       	add	r28, r28
     5c0:	dd 1f       	adc	r29, r29
     5c2:	cb 0d       	add	r28, r11
     5c4:	d1 1d       	adc	r29, r1
     5c6:	ce 01       	movw	r24, r28
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	9c 01       	movw	r18, r24
     5d6:	24 54       	subi	r18, 0x44	; 68
     5d8:	3e 4d       	sbci	r19, 0xDE	; 222
     5da:	79 01       	movw	r14, r18
     5dc:	c9 01       	movw	r24, r18
     5de:	24 df       	rcall	.-440    	; 0x428 <udd_ep_get_size>
     5e0:	4c 01       	movw	r8, r24
     5e2:	bb 20       	and	r11, r11
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <udd_ep_trans_complet+0x54>
     5e6:	7b c0       	rjmp	.+246    	; 0x6de <udd_ep_trans_complet+0x14a>
     5e8:	fe 01       	movw	r30, r28
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ee 0f       	add	r30, r30
     5f0:	ff 1f       	adc	r31, r31
     5f2:	ee 0f       	add	r30, r30
     5f4:	ff 1f       	adc	r31, r31
     5f6:	e0 55       	subi	r30, 0x50	; 80
     5f8:	fe 4d       	sbci	r31, 0xDE	; 222
     5fa:	22 89       	ldd	r18, Z+18	; 0x12
     5fc:	33 89       	ldd	r19, Z+19	; 0x13
     5fe:	d8 01       	movw	r26, r16
     600:	15 96       	adiw	r26, 0x05	; 5
     602:	8d 91       	ld	r24, X+
     604:	9c 91       	ld	r25, X
     606:	16 97       	sbiw	r26, 0x06	; 6
     608:	82 0f       	add	r24, r18
     60a:	93 1f       	adc	r25, r19
     60c:	15 96       	adiw	r26, 0x05	; 5
     60e:	8d 93       	st	X+, r24
     610:	9c 93       	st	X, r25
     612:	16 97       	sbiw	r26, 0x06	; 6
     614:	13 96       	adiw	r26, 0x03	; 3
     616:	2d 91       	ld	r18, X+
     618:	3c 91       	ld	r19, X
     61a:	14 97       	sbiw	r26, 0x04	; 4
     61c:	82 17       	cp	r24, r18
     61e:	93 07       	cpc	r25, r19
     620:	09 f4       	brne	.+2      	; 0x624 <udd_ep_trans_complet+0x90>
     622:	47 c0       	rjmp	.+142    	; 0x6b2 <udd_ep_trans_complet+0x11e>
     624:	28 1b       	sub	r18, r24
     626:	39 0b       	sbc	r19, r25
     628:	21 15       	cp	r18, r1
     62a:	b4 e0       	ldi	r27, 0x04	; 4
     62c:	3b 07       	cpc	r19, r27
     62e:	40 f0       	brcs	.+16     	; 0x640 <udd_ep_trans_complet+0xac>
     630:	2f ef       	ldi	r18, 0xFF	; 255
     632:	33 e0       	ldi	r19, 0x03	; 3
     634:	c9 01       	movw	r24, r18
     636:	b4 01       	movw	r22, r8
     638:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__udivmodhi4>
     63c:	28 1b       	sub	r18, r24
     63e:	39 0b       	sbc	r19, r25
     640:	f8 01       	movw	r30, r16
     642:	80 81       	ld	r24, Z
     644:	81 ff       	sbrs	r24, 1
     646:	0a c0       	rjmp	.+20     	; 0x65c <udd_ep_trans_complet+0xc8>
     648:	c9 01       	movw	r24, r18
     64a:	b4 01       	movw	r22, r8
     64c:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__udivmodhi4>
     650:	41 e0       	ldi	r20, 0x01	; 1
     652:	89 2b       	or	r24, r25
     654:	09 f0       	breq	.+2      	; 0x658 <udd_ep_trans_complet+0xc4>
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	84 2f       	mov	r24, r20
     65a:	01 c0       	rjmp	.+2      	; 0x65e <udd_ep_trans_complet+0xca>
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	d8 01       	movw	r26, r16
     660:	9c 91       	ld	r25, X
     662:	80 fb       	bst	r24, 0
     664:	91 f9       	bld	r25, 1
     666:	9c 93       	st	X, r25
     668:	fe 01       	movw	r30, r28
     66a:	ee 0f       	add	r30, r30
     66c:	ff 1f       	adc	r31, r31
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	ee 0f       	add	r30, r30
     674:	ff 1f       	adc	r31, r31
     676:	e0 55       	subi	r30, 0x50	; 80
     678:	fe 4d       	sbci	r31, 0xDE	; 222
     67a:	12 8a       	std	Z+18, r1	; 0x12
     67c:	13 8a       	std	Z+19, r1	; 0x13
     67e:	26 87       	std	Z+14, r18	; 0x0e
     680:	37 87       	std	Z+15, r19	; 0x0f
     682:	11 96       	adiw	r26, 0x01	; 1
     684:	2d 91       	ld	r18, X+
     686:	3c 91       	ld	r19, X
     688:	12 97       	sbiw	r26, 0x02	; 2
     68a:	15 96       	adiw	r26, 0x05	; 5
     68c:	8d 91       	ld	r24, X+
     68e:	9c 91       	ld	r25, X
     690:	16 97       	sbiw	r26, 0x06	; 6
     692:	82 0f       	add	r24, r18
     694:	93 1f       	adc	r25, r19
     696:	cc 0f       	add	r28, r28
     698:	dd 1f       	adc	r29, r29
     69a:	cc 0f       	add	r28, r28
     69c:	dd 1f       	adc	r29, r29
     69e:	cc 0f       	add	r28, r28
     6a0:	dd 1f       	adc	r29, r29
     6a2:	c0 54       	subi	r28, 0x40	; 64
     6a4:	de 4d       	sbci	r29, 0xDE	; 222
     6a6:	88 83       	st	Y, r24
     6a8:	99 83       	std	Y+1, r25	; 0x01
     6aa:	f7 01       	movw	r30, r14
     6ac:	02 e0       	ldi	r16, 0x02	; 2
     6ae:	06 93       	lac	Z, r16
     6b0:	e8 c0       	rjmp	.+464    	; 0x882 <udd_ep_trans_complet+0x2ee>
     6b2:	d8 01       	movw	r26, r16
     6b4:	8c 91       	ld	r24, X
     6b6:	81 ff       	sbrs	r24, 1
     6b8:	d1 c0       	rjmp	.+418    	; 0x85c <udd_ep_trans_complet+0x2c8>
     6ba:	8d 7f       	andi	r24, 0xFD	; 253
     6bc:	8c 93       	st	X, r24
     6be:	cc 0f       	add	r28, r28
     6c0:	dd 1f       	adc	r29, r29
     6c2:	cc 0f       	add	r28, r28
     6c4:	dd 1f       	adc	r29, r29
     6c6:	cc 0f       	add	r28, r28
     6c8:	dd 1f       	adc	r29, r29
     6ca:	c0 55       	subi	r28, 0x50	; 80
     6cc:	de 4d       	sbci	r29, 0xDE	; 222
     6ce:	1a 8a       	std	Y+18, r1	; 0x12
     6d0:	1b 8a       	std	Y+19, r1	; 0x13
     6d2:	1e 86       	std	Y+14, r1	; 0x0e
     6d4:	1f 86       	std	Y+15, r1	; 0x0f
     6d6:	f7 01       	movw	r30, r14
     6d8:	02 e0       	ldi	r16, 0x02	; 2
     6da:	06 93       	lac	Z, r16
     6dc:	d2 c0       	rjmp	.+420    	; 0x882 <udd_ep_trans_complet+0x2ee>
     6de:	fe 01       	movw	r30, r28
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ee 0f       	add	r30, r30
     6e6:	ff 1f       	adc	r31, r31
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	e0 55       	subi	r30, 0x50	; 80
     6ee:	fe 4d       	sbci	r31, 0xDE	; 222
     6f0:	a6 84       	ldd	r10, Z+14	; 0x0e
     6f2:	b7 84       	ldd	r11, Z+15	; 0x0f
     6f4:	d8 01       	movw	r26, r16
     6f6:	8c 91       	ld	r24, X
     6f8:	82 ff       	sbrs	r24, 2
     6fa:	1b c0       	rjmp	.+54     	; 0x732 <udd_ep_trans_complet+0x19e>
     6fc:	11 96       	adiw	r26, 0x01	; 1
     6fe:	ed 91       	ld	r30, X+
     700:	fc 91       	ld	r31, X
     702:	12 97       	sbiw	r26, 0x02	; 2
     704:	15 96       	adiw	r26, 0x05	; 5
     706:	2d 91       	ld	r18, X+
     708:	3c 91       	ld	r19, X
     70a:	16 97       	sbiw	r26, 0x06	; 6
     70c:	13 96       	adiw	r26, 0x03	; 3
     70e:	8d 91       	ld	r24, X+
     710:	9c 91       	ld	r25, X
     712:	14 97       	sbiw	r26, 0x04	; 4
     714:	b4 01       	movw	r22, r8
     716:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__udivmodhi4>
     71a:	b0 e4       	ldi	r27, 0x40	; 64
     71c:	db 9e       	mul	r13, r27
     71e:	b0 01       	movw	r22, r0
     720:	11 24       	eor	r1, r1
     722:	69 57       	subi	r22, 0x79	; 121
     724:	7f 4d       	sbci	r23, 0xDF	; 223
     726:	ac 01       	movw	r20, r24
     728:	cf 01       	movw	r24, r30
     72a:	82 0f       	add	r24, r18
     72c:	93 1f       	adc	r25, r19
     72e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <memcpy>
     732:	f8 01       	movw	r30, r16
     734:	25 81       	ldd	r18, Z+5	; 0x05
     736:	36 81       	ldd	r19, Z+6	; 0x06
     738:	2a 0d       	add	r18, r10
     73a:	3b 1d       	adc	r19, r11
     73c:	25 83       	std	Z+5, r18	; 0x05
     73e:	36 83       	std	Z+6, r19	; 0x06
     740:	83 81       	ldd	r24, Z+3	; 0x03
     742:	94 81       	ldd	r25, Z+4	; 0x04
     744:	82 17       	cp	r24, r18
     746:	93 07       	cpc	r25, r19
     748:	68 f4       	brcc	.+26     	; 0x764 <udd_ep_trans_complet+0x1d0>
     74a:	85 83       	std	Z+5, r24	; 0x05
     74c:	96 83       	std	Z+6, r25	; 0x06
     74e:	cc 0f       	add	r28, r28
     750:	dd 1f       	adc	r29, r29
     752:	cc 0f       	add	r28, r28
     754:	dd 1f       	adc	r29, r29
     756:	cc 0f       	add	r28, r28
     758:	dd 1f       	adc	r29, r29
     75a:	c0 55       	subi	r28, 0x50	; 80
     75c:	de 4d       	sbci	r29, 0xDE	; 222
     75e:	8a 89       	ldd	r24, Y+18	; 0x12
     760:	9b 89       	ldd	r25, Y+19	; 0x13
     762:	7c c0       	rjmp	.+248    	; 0x85c <udd_ep_trans_complet+0x2c8>
     764:	fe 01       	movw	r30, r28
     766:	ee 0f       	add	r30, r30
     768:	ff 1f       	adc	r31, r31
     76a:	ee 0f       	add	r30, r30
     76c:	ff 1f       	adc	r31, r31
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	e0 55       	subi	r30, 0x50	; 80
     774:	fe 4d       	sbci	r31, 0xDE	; 222
     776:	42 89       	ldd	r20, Z+18	; 0x12
     778:	53 89       	ldd	r21, Z+19	; 0x13
     77a:	4a 15       	cp	r20, r10
     77c:	5b 05       	cpc	r21, r11
     77e:	09 f0       	breq	.+2      	; 0x782 <udd_ep_trans_complet+0x1ee>
     780:	6d c0       	rjmp	.+218    	; 0x85c <udd_ep_trans_complet+0x2c8>
     782:	28 17       	cp	r18, r24
     784:	39 07       	cpc	r19, r25
     786:	09 f4       	brne	.+2      	; 0x78a <udd_ep_trans_complet+0x1f6>
     788:	69 c0       	rjmp	.+210    	; 0x85c <udd_ep_trans_complet+0x2c8>
     78a:	ac 01       	movw	r20, r24
     78c:	42 1b       	sub	r20, r18
     78e:	53 0b       	sbc	r21, r19
     790:	9a 01       	movw	r18, r20
     792:	21 15       	cp	r18, r1
     794:	54 e0       	ldi	r21, 0x04	; 4
     796:	35 07       	cpc	r19, r21
     798:	58 f0       	brcs	.+22     	; 0x7b0 <udd_ep_trans_complet+0x21c>
     79a:	2f ef       	ldi	r18, 0xFF	; 255
     79c:	33 e0       	ldi	r19, 0x03	; 3
     79e:	c9 01       	movw	r24, r18
     7a0:	b4 01       	movw	r22, r8
     7a2:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__udivmodhi4>
     7a6:	d9 01       	movw	r26, r18
     7a8:	a8 1b       	sub	r26, r24
     7aa:	b9 0b       	sbc	r27, r25
     7ac:	cd 01       	movw	r24, r26
     7ae:	08 c0       	rjmp	.+16     	; 0x7c0 <udd_ep_trans_complet+0x22c>
     7b0:	c9 01       	movw	r24, r18
     7b2:	b4 01       	movw	r22, r8
     7b4:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__udivmodhi4>
     7b8:	f9 01       	movw	r30, r18
     7ba:	e8 1b       	sub	r30, r24
     7bc:	f9 0b       	sbc	r31, r25
     7be:	cf 01       	movw	r24, r30
     7c0:	fe 01       	movw	r30, r28
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	e0 55       	subi	r30, 0x50	; 80
     7d0:	fe 4d       	sbci	r31, 0xDE	; 222
     7d2:	16 86       	std	Z+14, r1	; 0x0e
     7d4:	17 86       	std	Z+15, r1	; 0x0f
     7d6:	88 15       	cp	r24, r8
     7d8:	99 05       	cpc	r25, r9
     7da:	00 f5       	brcc	.+64     	; 0x81c <udd_ep_trans_complet+0x288>
     7dc:	d8 01       	movw	r26, r16
     7de:	8c 91       	ld	r24, X
     7e0:	84 60       	ori	r24, 0x04	; 4
     7e2:	8c 93       	st	X, r24
     7e4:	b0 e4       	ldi	r27, 0x40	; 64
     7e6:	db 9e       	mul	r13, r27
     7e8:	c0 01       	movw	r24, r0
     7ea:	11 24       	eor	r1, r1
     7ec:	89 57       	subi	r24, 0x79	; 121
     7ee:	9f 4d       	sbci	r25, 0xDF	; 223
     7f0:	fe 01       	movw	r30, r28
     7f2:	ee 0f       	add	r30, r30
     7f4:	ff 1f       	adc	r31, r31
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	e0 54       	subi	r30, 0x40	; 64
     800:	fe 4d       	sbci	r31, 0xDE	; 222
     802:	80 83       	st	Z, r24
     804:	91 83       	std	Z+1, r25	; 0x01
     806:	cc 0f       	add	r28, r28
     808:	dd 1f       	adc	r29, r29
     80a:	cc 0f       	add	r28, r28
     80c:	dd 1f       	adc	r29, r29
     80e:	cc 0f       	add	r28, r28
     810:	dd 1f       	adc	r29, r29
     812:	c0 55       	subi	r28, 0x50	; 80
     814:	de 4d       	sbci	r29, 0xDE	; 222
     816:	8a 8a       	std	Y+18, r8	; 0x12
     818:	9b 8a       	std	Y+19, r9	; 0x13
     81a:	1c c0       	rjmp	.+56     	; 0x854 <udd_ep_trans_complet+0x2c0>
     81c:	f8 01       	movw	r30, r16
     81e:	41 81       	ldd	r20, Z+1	; 0x01
     820:	52 81       	ldd	r21, Z+2	; 0x02
     822:	25 81       	ldd	r18, Z+5	; 0x05
     824:	36 81       	ldd	r19, Z+6	; 0x06
     826:	24 0f       	add	r18, r20
     828:	35 1f       	adc	r19, r21
     82a:	fe 01       	movw	r30, r28
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	ee 0f       	add	r30, r30
     832:	ff 1f       	adc	r31, r31
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	e0 54       	subi	r30, 0x40	; 64
     83a:	fe 4d       	sbci	r31, 0xDE	; 222
     83c:	20 83       	st	Z, r18
     83e:	31 83       	std	Z+1, r19	; 0x01
     840:	cc 0f       	add	r28, r28
     842:	dd 1f       	adc	r29, r29
     844:	cc 0f       	add	r28, r28
     846:	dd 1f       	adc	r29, r29
     848:	cc 0f       	add	r28, r28
     84a:	dd 1f       	adc	r29, r29
     84c:	c0 55       	subi	r28, 0x50	; 80
     84e:	de 4d       	sbci	r29, 0xDE	; 222
     850:	8a 8b       	std	Y+18, r24	; 0x12
     852:	9b 8b       	std	Y+19, r25	; 0x13
     854:	f7 01       	movw	r30, r14
     856:	02 e0       	ldi	r16, 0x02	; 2
     858:	06 93       	lac	Z, r16
     85a:	13 c0       	rjmp	.+38     	; 0x882 <udd_ep_trans_complet+0x2ee>
     85c:	d8 01       	movw	r26, r16
     85e:	8c 91       	ld	r24, X
     860:	80 ff       	sbrs	r24, 0
     862:	0f c0       	rjmp	.+30     	; 0x882 <udd_ep_trans_complet+0x2ee>
     864:	8e 7f       	andi	r24, 0xFE	; 254
     866:	8c 93       	st	X, r24
     868:	17 96       	adiw	r26, 0x07	; 7
     86a:	ed 91       	ld	r30, X+
     86c:	fc 91       	ld	r31, X
     86e:	18 97       	sbiw	r26, 0x08	; 8
     870:	30 97       	sbiw	r30, 0x00	; 0
     872:	39 f0       	breq	.+14     	; 0x882 <udd_ep_trans_complet+0x2ee>
     874:	15 96       	adiw	r26, 0x05	; 5
     876:	6d 91       	ld	r22, X+
     878:	7c 91       	ld	r23, X
     87a:	16 97       	sbiw	r26, 0x06	; 6
     87c:	4d 2d       	mov	r20, r13
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	19 95       	eicall
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	08 95       	ret

0000089a <udd_is_high_speed>:
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	08 95       	ret

0000089e <udd_set_address>:
     89e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
     8a2:	08 95       	ret

000008a4 <udd_getaddress>:
     8a4:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
     8a8:	08 95       	ret

000008aa <udd_get_frame_number>:
     8aa:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udd_sram+0x3c>
     8ae:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <udd_sram+0x3d>
     8b2:	08 95       	ret

000008b4 <udd_get_micro_frame_number>:
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	08 95       	ret

000008ba <udd_set_setup_payload>:
     8ba:	e8 e2       	ldi	r30, 0x28	; 40
     8bc:	f3 e2       	ldi	r31, 0x23	; 35
     8be:	80 87       	std	Z+8, r24	; 0x08
     8c0:	91 87       	std	Z+9, r25	; 0x09
     8c2:	62 87       	std	Z+10, r22	; 0x0a
     8c4:	73 87       	std	Z+11, r23	; 0x0b
     8c6:	08 95       	ret

000008c8 <udd_ep_alloc>:
     8c8:	28 2f       	mov	r18, r24
     8ca:	2f 70       	andi	r18, 0x0F	; 15
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	22 0f       	add	r18, r18
     8d0:	33 1f       	adc	r19, r19
     8d2:	08 2e       	mov	r0, r24
     8d4:	00 0c       	add	r0, r0
     8d6:	99 0b       	sbc	r25, r25
     8d8:	88 27       	eor	r24, r24
     8da:	99 0f       	add	r25, r25
     8dc:	88 1f       	adc	r24, r24
     8de:	99 27       	eor	r25, r25
     8e0:	82 0f       	add	r24, r18
     8e2:	93 1f       	adc	r25, r19
     8e4:	fc 01       	movw	r30, r24
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 1f       	adc	r31, r31
     8ea:	ee 0f       	add	r30, r30
     8ec:	ff 1f       	adc	r31, r31
     8ee:	ee 0f       	add	r30, r30
     8f0:	ff 1f       	adc	r31, r31
     8f2:	e0 55       	subi	r30, 0x50	; 80
     8f4:	fe 4d       	sbci	r31, 0xDE	; 222
     8f6:	25 85       	ldd	r18, Z+13	; 0x0d
     8f8:	20 7c       	andi	r18, 0xC0	; 192
     8fa:	09 f0       	breq	.+2      	; 0x8fe <udd_ep_alloc+0x36>
     8fc:	69 c0       	rjmp	.+210    	; 0x9d0 <udd_ep_alloc+0x108>
     8fe:	63 70       	andi	r22, 0x03	; 3
     900:	61 30       	cpi	r22, 0x01	; 1
     902:	11 f0       	breq	.+4      	; 0x908 <udd_ep_alloc+0x40>
     904:	18 f4       	brcc	.+6      	; 0x90c <udd_ep_alloc+0x44>
     906:	04 c0       	rjmp	.+8      	; 0x910 <udd_ep_alloc+0x48>
     908:	20 ec       	ldi	r18, 0xC0	; 192
     90a:	03 c0       	rjmp	.+6      	; 0x912 <udd_ep_alloc+0x4a>
     90c:	20 e8       	ldi	r18, 0x80	; 128
     90e:	01 c0       	rjmp	.+2      	; 0x912 <udd_ep_alloc+0x4a>
     910:	20 e4       	ldi	r18, 0x40	; 64
     912:	40 38       	cpi	r20, 0x80	; 128
     914:	51 05       	cpc	r21, r1
     916:	e9 f0       	breq	.+58     	; 0x952 <udd_ep_alloc+0x8a>
     918:	50 f4       	brcc	.+20     	; 0x92e <udd_ep_alloc+0x66>
     91a:	40 32       	cpi	r20, 0x20	; 32
     91c:	51 05       	cpc	r21, r1
     91e:	a9 f0       	breq	.+42     	; 0x94a <udd_ep_alloc+0x82>
     920:	40 34       	cpi	r20, 0x40	; 64
     922:	51 05       	cpc	r21, r1
     924:	a1 f0       	breq	.+40     	; 0x94e <udd_ep_alloc+0x86>
     926:	40 31       	cpi	r20, 0x10	; 16
     928:	51 05       	cpc	r21, r1
     92a:	d9 f4       	brne	.+54     	; 0x962 <udd_ep_alloc+0x9a>
     92c:	0c c0       	rjmp	.+24     	; 0x946 <udd_ep_alloc+0x7e>
     92e:	41 15       	cp	r20, r1
     930:	32 e0       	ldi	r19, 0x02	; 2
     932:	53 07       	cpc	r21, r19
     934:	91 f0       	breq	.+36     	; 0x95a <udd_ep_alloc+0x92>
     936:	4f 3f       	cpi	r20, 0xFF	; 255
     938:	33 e0       	ldi	r19, 0x03	; 3
     93a:	53 07       	cpc	r21, r19
     93c:	81 f0       	breq	.+32     	; 0x95e <udd_ep_alloc+0x96>
     93e:	41 15       	cp	r20, r1
     940:	51 40       	sbci	r21, 0x01	; 1
     942:	79 f4       	brne	.+30     	; 0x962 <udd_ep_alloc+0x9a>
     944:	08 c0       	rjmp	.+16     	; 0x956 <udd_ep_alloc+0x8e>
     946:	41 e0       	ldi	r20, 0x01	; 1
     948:	0d c0       	rjmp	.+26     	; 0x964 <udd_ep_alloc+0x9c>
     94a:	42 e0       	ldi	r20, 0x02	; 2
     94c:	0b c0       	rjmp	.+22     	; 0x964 <udd_ep_alloc+0x9c>
     94e:	43 e0       	ldi	r20, 0x03	; 3
     950:	09 c0       	rjmp	.+18     	; 0x964 <udd_ep_alloc+0x9c>
     952:	44 e0       	ldi	r20, 0x04	; 4
     954:	07 c0       	rjmp	.+14     	; 0x964 <udd_ep_alloc+0x9c>
     956:	45 e0       	ldi	r20, 0x05	; 5
     958:	05 c0       	rjmp	.+10     	; 0x964 <udd_ep_alloc+0x9c>
     95a:	46 e0       	ldi	r20, 0x06	; 6
     95c:	03 c0       	rjmp	.+6      	; 0x964 <udd_ep_alloc+0x9c>
     95e:	47 e0       	ldi	r20, 0x07	; 7
     960:	01 c0       	rjmp	.+2      	; 0x964 <udd_ep_alloc+0x9c>
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	fc 01       	movw	r30, r24
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	e0 55       	subi	r30, 0x50	; 80
     974:	fe 4d       	sbci	r31, 0xDE	; 222
     976:	15 86       	std	Z+13, r1	; 0x0d
     978:	36 e0       	ldi	r19, 0x06	; 6
     97a:	34 87       	std	Z+12, r19	; 0x0c
     97c:	24 2b       	or	r18, r20
     97e:	25 87       	std	Z+13, r18	; 0x0d
     980:	fc 01       	movw	r30, r24
     982:	ee 0f       	add	r30, r30
     984:	ff 1f       	adc	r31, r31
     986:	ee 0f       	add	r30, r30
     988:	ff 1f       	adc	r31, r31
     98a:	ee 0f       	add	r30, r30
     98c:	ff 1f       	adc	r31, r31
     98e:	e0 55       	subi	r30, 0x50	; 80
     990:	fe 4d       	sbci	r31, 0xDE	; 222
     992:	25 85       	ldd	r18, Z+13	; 0x0d
     994:	20 7c       	andi	r18, 0xC0	; 192
     996:	20 3c       	cpi	r18, 0xC0	; 192
     998:	69 f4       	brne	.+26     	; 0x9b4 <udd_ep_alloc+0xec>
     99a:	fc 01       	movw	r30, r24
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	ee 0f       	add	r30, r30
     9a2:	ff 1f       	adc	r31, r31
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	e0 55       	subi	r30, 0x50	; 80
     9aa:	fe 4d       	sbci	r31, 0xDE	; 222
     9ac:	25 85       	ldd	r18, Z+13	; 0x0d
     9ae:	27 70       	andi	r18, 0x07	; 7
     9b0:	27 30       	cpi	r18, 0x07	; 7
     9b2:	81 f0       	breq	.+32     	; 0x9d4 <udd_ep_alloc+0x10c>
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	fc 01       	movw	r30, r24
     9c2:	e0 55       	subi	r30, 0x50	; 80
     9c4:	fe 4d       	sbci	r31, 0xDE	; 222
     9c6:	85 85       	ldd	r24, Z+13	; 0x0d
     9c8:	80 62       	ori	r24, 0x20	; 32
     9ca:	85 87       	std	Z+13, r24	; 0x0d
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	08 95       	ret
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	08 95       	ret
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	08 95       	ret

000009d8 <udd_ep_is_halted>:
     9d8:	e8 2f       	mov	r30, r24
     9da:	ef 70       	andi	r30, 0x0F	; 15
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	08 2e       	mov	r0, r24
     9e4:	00 0c       	add	r0, r0
     9e6:	99 0b       	sbc	r25, r25
     9e8:	88 27       	eor	r24, r24
     9ea:	99 0f       	add	r25, r25
     9ec:	88 1f       	adc	r24, r24
     9ee:	99 27       	eor	r25, r25
     9f0:	e8 0f       	add	r30, r24
     9f2:	f9 1f       	adc	r31, r25
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	ee 0f       	add	r30, r30
     9fa:	ff 1f       	adc	r31, r31
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	e0 55       	subi	r30, 0x50	; 80
     a02:	fe 4d       	sbci	r31, 0xDE	; 222
     a04:	85 85       	ldd	r24, Z+13	; 0x0d
     a06:	82 fb       	bst	r24, 2
     a08:	88 27       	eor	r24, r24
     a0a:	80 f9       	bld	r24, 0
     a0c:	08 95       	ret

00000a0e <udd_ep_clear_halt>:
     a0e:	0f 93       	push	r16
     a10:	28 2f       	mov	r18, r24
     a12:	2f 70       	andi	r18, 0x0F	; 15
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	a9 01       	movw	r20, r18
     a18:	44 0f       	add	r20, r20
     a1a:	55 1f       	adc	r21, r21
     a1c:	28 2f       	mov	r18, r24
     a1e:	08 2e       	mov	r0, r24
     a20:	00 0c       	add	r0, r0
     a22:	33 0b       	sbc	r19, r19
     a24:	22 27       	eor	r18, r18
     a26:	33 0f       	add	r19, r19
     a28:	22 1f       	adc	r18, r18
     a2a:	33 27       	eor	r19, r19
     a2c:	24 0f       	add	r18, r20
     a2e:	35 1f       	adc	r19, r21
     a30:	a9 01       	movw	r20, r18
     a32:	44 0f       	add	r20, r20
     a34:	55 1f       	adc	r21, r21
     a36:	44 0f       	add	r20, r20
     a38:	55 1f       	adc	r21, r21
     a3a:	44 0f       	add	r20, r20
     a3c:	55 1f       	adc	r21, r21
     a3e:	fa 01       	movw	r30, r20
     a40:	e4 54       	subi	r30, 0x44	; 68
     a42:	fe 4d       	sbci	r31, 0xDE	; 222
     a44:	01 e0       	ldi	r16, 0x01	; 1
     a46:	06 93       	lac	Z, r16
     a48:	fa 01       	movw	r30, r20
     a4a:	e0 55       	subi	r30, 0x50	; 80
     a4c:	fe 4d       	sbci	r31, 0xDE	; 222
     a4e:	95 85       	ldd	r25, Z+13	; 0x0d
     a50:	92 ff       	sbrs	r25, 2
     a52:	11 c0       	rjmp	.+34     	; 0xa76 <udd_ep_clear_halt+0x68>
     a54:	fa 01       	movw	r30, r20
     a56:	e0 55       	subi	r30, 0x50	; 80
     a58:	fe 4d       	sbci	r31, 0xDE	; 222
     a5a:	95 85       	ldd	r25, Z+13	; 0x0d
     a5c:	9b 7f       	andi	r25, 0xFB	; 251
     a5e:	95 87       	std	Z+13, r25	; 0x0d
     a60:	0c dd       	rcall	.-1512   	; 0x47a <udd_ep_get_job>
     a62:	fc 01       	movw	r30, r24
     a64:	80 81       	ld	r24, Z
     a66:	80 ff       	sbrs	r24, 0
     a68:	06 c0       	rjmp	.+12     	; 0xa76 <udd_ep_clear_halt+0x68>
     a6a:	8e 7f       	andi	r24, 0xFE	; 254
     a6c:	80 83       	st	Z, r24
     a6e:	07 80       	ldd	r0, Z+7	; 0x07
     a70:	f0 85       	ldd	r31, Z+8	; 0x08
     a72:	e0 2d       	mov	r30, r0
     a74:	19 95       	eicall
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0f 91       	pop	r16
     a7a:	08 95       	ret

00000a7c <udd_ep_run>:
     a7c:	5f 92       	push	r5
     a7e:	6f 92       	push	r6
     a80:	7f 92       	push	r7
     a82:	8f 92       	push	r8
     a84:	9f 92       	push	r9
     a86:	af 92       	push	r10
     a88:	bf 92       	push	r11
     a8a:	cf 92       	push	r12
     a8c:	df 92       	push	r13
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	1f 92       	push	r1
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	78 2e       	mov	r7, r24
     aa2:	66 2e       	mov	r6, r22
     aa4:	4a 01       	movw	r8, r20
     aa6:	59 01       	movw	r10, r18
     aa8:	e8 dc       	rcall	.-1584   	; 0x47a <udd_ep_get_job>
     aaa:	6c 01       	movw	r12, r24
     aac:	57 2c       	mov	r5, r7
     aae:	55 1c       	adc	r5, r5
     ab0:	55 24       	eor	r5, r5
     ab2:	55 1c       	adc	r5, r5
     ab4:	87 2d       	mov	r24, r7
     ab6:	8f 70       	andi	r24, 0x0F	; 15
     ab8:	e8 2e       	mov	r14, r24
     aba:	f1 2c       	mov	r15, r1
     abc:	ee 0c       	add	r14, r14
     abe:	ff 1c       	adc	r15, r15
     ac0:	e5 0c       	add	r14, r5
     ac2:	f1 1c       	adc	r15, r1
     ac4:	f7 01       	movw	r30, r14
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	ee 0f       	add	r30, r30
     ad0:	ff 1f       	adc	r31, r31
     ad2:	e0 55       	subi	r30, 0x50	; 80
     ad4:	fe 4d       	sbci	r31, 0xDE	; 222
     ad6:	85 85       	ldd	r24, Z+13	; 0x0d
     ad8:	80 7c       	andi	r24, 0xC0	; 192
     ada:	09 f4       	brne	.+2      	; 0xade <udd_ep_run+0x62>
     adc:	82 c0       	rjmp	.+260    	; 0xbe2 <udd_ep_run+0x166>
     ade:	f7 01       	movw	r30, r14
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	e0 55       	subi	r30, 0x50	; 80
     aee:	fe 4d       	sbci	r31, 0xDE	; 222
     af0:	85 85       	ldd	r24, Z+13	; 0x0d
     af2:	80 7c       	andi	r24, 0xC0	; 192
     af4:	80 3c       	cpi	r24, 0xC0	; 192
     af6:	61 f0       	breq	.+24     	; 0xb10 <udd_ep_run+0x94>
     af8:	f7 01       	movw	r30, r14
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	ee 0f       	add	r30, r30
     b04:	ff 1f       	adc	r31, r31
     b06:	e0 55       	subi	r30, 0x50	; 80
     b08:	fe 4d       	sbci	r31, 0xDE	; 222
     b0a:	85 85       	ldd	r24, Z+13	; 0x0d
     b0c:	82 fd       	sbrc	r24, 2
     b0e:	6b c0       	rjmp	.+214    	; 0xbe6 <udd_ep_run+0x16a>
     b10:	8f b7       	in	r24, 0x3f	; 63
     b12:	89 83       	std	Y+1, r24	; 0x01
     b14:	f8 94       	cli
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	f6 01       	movw	r30, r12
     b1a:	90 81       	ld	r25, Z
     b1c:	90 ff       	sbrs	r25, 0
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <udd_ep_run+0xaa>
     b20:	8f bf       	out	0x3f, r24	; 63
     b22:	51 2c       	mov	r5, r1
     b24:	61 c0       	rjmp	.+194    	; 0xbe8 <udd_ep_run+0x16c>
     b26:	f6 01       	movw	r30, r12
     b28:	90 81       	ld	r25, Z
     b2a:	91 60       	ori	r25, 0x01	; 1
     b2c:	90 83       	st	Z, r25
     b2e:	8f bf       	out	0x3f, r24	; 63
     b30:	81 82       	std	Z+1, r8	; 0x01
     b32:	92 82       	std	Z+2, r9	; 0x02
     b34:	a3 82       	std	Z+3, r10	; 0x03
     b36:	b4 82       	std	Z+4, r11	; 0x04
     b38:	15 82       	std	Z+5, r1	; 0x05
     b3a:	16 82       	std	Z+6, r1	; 0x06
     b3c:	07 83       	std	Z+7, r16	; 0x07
     b3e:	10 87       	std	Z+8, r17	; 0x08
     b40:	61 10       	cpse	r6, r1
     b42:	06 c0       	rjmp	.+12     	; 0xb50 <udd_ep_run+0xd4>
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	a1 14       	cp	r10, r1
     b48:	b1 04       	cpc	r11, r1
     b4a:	19 f0       	breq	.+6      	; 0xb52 <udd_ep_run+0xd6>
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	01 c0       	rjmp	.+2      	; 0xb52 <udd_ep_run+0xd6>
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	f6 01       	movw	r30, r12
     b54:	80 81       	ld	r24, Z
     b56:	90 fb       	bst	r25, 0
     b58:	81 f9       	bld	r24, 1
     b5a:	8b 7f       	andi	r24, 0xFB	; 251
     b5c:	80 83       	st	Z, r24
     b5e:	55 20       	and	r5, r5
     b60:	61 f0       	breq	.+24     	; 0xb7a <udd_ep_run+0xfe>
     b62:	f7 01       	movw	r30, r14
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	ee 0f       	add	r30, r30
     b6e:	ff 1f       	adc	r31, r31
     b70:	e0 55       	subi	r30, 0x50	; 80
     b72:	fe 4d       	sbci	r31, 0xDE	; 222
     b74:	12 8a       	std	Z+18, r1	; 0x12
     b76:	13 8a       	std	Z+19, r1	; 0x13
     b78:	2f c0       	rjmp	.+94     	; 0xbd8 <udd_ep_run+0x15c>
     b7a:	f7 01       	movw	r30, r14
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	e0 55       	subi	r30, 0x50	; 80
     b8a:	fe 4d       	sbci	r31, 0xDE	; 222
     b8c:	85 85       	ldd	r24, Z+13	; 0x0d
     b8e:	80 7c       	andi	r24, 0xC0	; 192
     b90:	80 3c       	cpi	r24, 0xC0	; 192
     b92:	a9 f4       	brne	.+42     	; 0xbbe <udd_ep_run+0x142>
     b94:	c7 01       	movw	r24, r14
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	84 54       	subi	r24, 0x44	; 68
     ba4:	9e 4d       	sbci	r25, 0xDE	; 222
     ba6:	40 dc       	rcall	.-1920   	; 0x428 <udd_ep_get_size>
     ba8:	bc 01       	movw	r22, r24
     baa:	c5 01       	movw	r24, r10
     bac:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__udivmodhi4>
     bb0:	89 2b       	or	r24, r25
     bb2:	29 f0       	breq	.+10     	; 0xbbe <udd_ep_run+0x142>
     bb4:	f6 01       	movw	r30, r12
     bb6:	80 81       	ld	r24, Z
     bb8:	8e 7f       	andi	r24, 0xFE	; 254
     bba:	80 83       	st	Z, r24
     bbc:	15 c0       	rjmp	.+42     	; 0xbe8 <udd_ep_run+0x16c>
     bbe:	f7 01       	movw	r30, r14
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	e0 55       	subi	r30, 0x50	; 80
     bce:	fe 4d       	sbci	r31, 0xDE	; 222
     bd0:	16 86       	std	Z+14, r1	; 0x0e
     bd2:	17 86       	std	Z+15, r1	; 0x0f
     bd4:	12 8a       	std	Z+18, r1	; 0x12
     bd6:	13 8a       	std	Z+19, r1	; 0x13
     bd8:	87 2d       	mov	r24, r7
     bda:	dc dc       	rcall	.-1608   	; 0x594 <udd_ep_trans_complet>
     bdc:	55 24       	eor	r5, r5
     bde:	53 94       	inc	r5
     be0:	03 c0       	rjmp	.+6      	; 0xbe8 <udd_ep_run+0x16c>
     be2:	51 2c       	mov	r5, r1
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <udd_ep_run+0x16c>
     be6:	51 2c       	mov	r5, r1
     be8:	85 2d       	mov	r24, r5
     bea:	0f 90       	pop	r0
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	df 90       	pop	r13
     bfa:	cf 90       	pop	r12
     bfc:	bf 90       	pop	r11
     bfe:	af 90       	pop	r10
     c00:	9f 90       	pop	r9
     c02:	8f 90       	pop	r8
     c04:	7f 90       	pop	r7
     c06:	6f 90       	pop	r6
     c08:	5f 90       	pop	r5
     c0a:	08 95       	ret

00000c0c <udd_ep_abort>:
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	18 2f       	mov	r17, r24
     c18:	f8 2e       	mov	r15, r24
     c1a:	ff 1c       	adc	r15, r15
     c1c:	ff 24       	eor	r15, r15
     c1e:	ff 1c       	adc	r15, r15
     c20:	c8 2f       	mov	r28, r24
     c22:	cf 70       	andi	r28, 0x0F	; 15
     c24:	d0 e0       	ldi	r29, 0x00	; 0
     c26:	cc 0f       	add	r28, r28
     c28:	dd 1f       	adc	r29, r29
     c2a:	cf 0d       	add	r28, r15
     c2c:	d1 1d       	adc	r29, r1
     c2e:	25 dc       	rcall	.-1974   	; 0x47a <udd_ep_get_job>
     c30:	dc 01       	movw	r26, r24
     c32:	fe 01       	movw	r30, r28
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	ee 0f       	add	r30, r30
     c3e:	ff 1f       	adc	r31, r31
     c40:	e4 54       	subi	r30, 0x44	; 68
     c42:	fe 4d       	sbci	r31, 0xDE	; 222
     c44:	02 e0       	ldi	r16, 0x02	; 2
     c46:	05 93       	las	Z, r16
     c48:	8c 91       	ld	r24, X
     c4a:	80 ff       	sbrs	r24, 0
     c4c:	22 c0       	rjmp	.+68     	; 0xc92 <udd_ep_abort+0x86>
     c4e:	8e 7f       	andi	r24, 0xFE	; 254
     c50:	8c 93       	st	X, r24
     c52:	17 96       	adiw	r26, 0x07	; 7
     c54:	ed 91       	ld	r30, X+
     c56:	fc 91       	ld	r31, X
     c58:	18 97       	sbiw	r26, 0x08	; 8
     c5a:	30 97       	sbiw	r30, 0x00	; 0
     c5c:	d1 f0       	breq	.+52     	; 0xc92 <udd_ep_abort+0x86>
     c5e:	ff 20       	and	r15, r15
     c60:	59 f0       	breq	.+22     	; 0xc78 <udd_ep_abort+0x6c>
     c62:	cc 0f       	add	r28, r28
     c64:	dd 1f       	adc	r29, r29
     c66:	cc 0f       	add	r28, r28
     c68:	dd 1f       	adc	r29, r29
     c6a:	cc 0f       	add	r28, r28
     c6c:	dd 1f       	adc	r29, r29
     c6e:	c0 55       	subi	r28, 0x50	; 80
     c70:	de 4d       	sbci	r29, 0xDE	; 222
     c72:	6a 89       	ldd	r22, Y+18	; 0x12
     c74:	7b 89       	ldd	r23, Y+19	; 0x13
     c76:	0a c0       	rjmp	.+20     	; 0xc8c <udd_ep_abort+0x80>
     c78:	cc 0f       	add	r28, r28
     c7a:	dd 1f       	adc	r29, r29
     c7c:	cc 0f       	add	r28, r28
     c7e:	dd 1f       	adc	r29, r29
     c80:	cc 0f       	add	r28, r28
     c82:	dd 1f       	adc	r29, r29
     c84:	c0 55       	subi	r28, 0x50	; 80
     c86:	de 4d       	sbci	r29, 0xDE	; 222
     c88:	6e 85       	ldd	r22, Y+14	; 0x0e
     c8a:	7f 85       	ldd	r23, Y+15	; 0x0f
     c8c:	41 2f       	mov	r20, r17
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	19 95       	eicall
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	08 95       	ret

00000c9e <udd_ep_free>:
     c9e:	cf 93       	push	r28
     ca0:	c8 2f       	mov	r28, r24
     ca2:	b4 df       	rcall	.-152    	; 0xc0c <udd_ep_abort>
     ca4:	ec 2f       	mov	r30, r28
     ca6:	ef 70       	andi	r30, 0x0F	; 15
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	8c 2f       	mov	r24, r28
     cb0:	cc 0f       	add	r28, r28
     cb2:	99 0b       	sbc	r25, r25
     cb4:	88 27       	eor	r24, r24
     cb6:	99 0f       	add	r25, r25
     cb8:	88 1f       	adc	r24, r24
     cba:	99 27       	eor	r25, r25
     cbc:	e8 0f       	add	r30, r24
     cbe:	f9 1f       	adc	r31, r25
     cc0:	ee 0f       	add	r30, r30
     cc2:	ff 1f       	adc	r31, r31
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	e0 55       	subi	r30, 0x50	; 80
     cce:	fe 4d       	sbci	r31, 0xDE	; 222
     cd0:	15 86       	std	Z+13, r1	; 0x0d
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <udd_ep_set_halt>:
     cd6:	e8 2f       	mov	r30, r24
     cd8:	ef 70       	andi	r30, 0x0F	; 15
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	ee 0f       	add	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	28 2f       	mov	r18, r24
     ce2:	08 2e       	mov	r0, r24
     ce4:	00 0c       	add	r0, r0
     ce6:	33 0b       	sbc	r19, r19
     ce8:	22 27       	eor	r18, r18
     cea:	33 0f       	add	r19, r19
     cec:	22 1f       	adc	r18, r18
     cee:	33 27       	eor	r19, r19
     cf0:	e2 0f       	add	r30, r18
     cf2:	f3 1f       	adc	r31, r19
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	e0 55       	subi	r30, 0x50	; 80
     d02:	fe 4d       	sbci	r31, 0xDE	; 222
     d04:	95 85       	ldd	r25, Z+13	; 0x0d
     d06:	94 60       	ori	r25, 0x04	; 4
     d08:	95 87       	std	Z+13, r25	; 0x0d
     d0a:	80 df       	rcall	.-256    	; 0xc0c <udd_ep_abort>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	08 95       	ret

00000d10 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	0b b6       	in	r0, 0x3b	; 59
     d1c:	0f 92       	push	r0
     d1e:	0f 93       	push	r16
     d20:	2f 93       	push	r18
     d22:	3f 93       	push	r19
     d24:	4f 93       	push	r20
     d26:	5f 93       	push	r21
     d28:	6f 93       	push	r22
     d2a:	7f 93       	push	r23
     d2c:	8f 93       	push	r24
     d2e:	9f 93       	push	r25
     d30:	af 93       	push	r26
     d32:	bf 93       	push	r27
     d34:	ef 93       	push	r30
     d36:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
     d38:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     d3c:	88 23       	and	r24, r24
     d3e:	2c f4       	brge	.+10     	; 0xd4a <__vector_125+0x3a>
		udd_ack_start_of_frame_event();
     d40:	80 e8       	ldi	r24, 0x80	; 128
     d42:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
     d46:	b9 d4       	rcall	.+2418   	; 0x16ba <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
     d48:	85 c0       	rjmp	.+266    	; 0xe54 <__vector_125+0x144>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
     d4a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     d4e:	82 ff       	sbrs	r24, 2
     d50:	20 c0       	rjmp	.+64     	; 0xd92 <__vector_125+0x82>
		udd_ack_underflow_event();
     d52:	84 e0       	ldi	r24, 0x04	; 4
     d54:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
     d58:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <udd_sram+0x14>
     d5c:	86 ff       	sbrs	r24, 6
     d5e:	7a c0       	rjmp	.+244    	; 0xe54 <__vector_125+0x144>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
     d60:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
     d64:	81 fd       	sbrc	r24, 1
     d66:	76 c0       	rjmp	.+236    	; 0xe54 <__vector_125+0x144>
     d68:	a3 db       	rcall	.-2234   	; 0x4b0 <udd_ctrl_interrupt_tc_setup>
     d6a:	81 11       	cpse	r24, r1
     d6c:	73 c0       	rjmp	.+230    	; 0xe54 <__vector_125+0x144>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
     d6e:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <udd_ep_control_state>
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__vector_125+0x6a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
     d76:	d6 da       	rcall	.-2644   	; 0x324 <udd_ctrl_send_zlp_in>
     d78:	6d c0       	rjmp	.+218    	; 0xe54 <__vector_125+0x144>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
     d7a:	84 30       	cpi	r24, 0x04	; 4
     d7c:	09 f0       	breq	.+2      	; 0xd80 <__vector_125+0x70>
     d7e:	6a c0       	rjmp	.+212    	; 0xe54 <__vector_125+0x144>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
     d80:	e5 ec       	ldi	r30, 0xC5	; 197
     d82:	f1 e2       	ldi	r31, 0x21	; 33
     d84:	04 e0       	ldi	r16, 0x04	; 4
     d86:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
     d88:	ed eb       	ldi	r30, 0xBD	; 189
     d8a:	f1 e2       	ldi	r31, 0x21	; 33
     d8c:	04 e0       	ldi	r16, 0x04	; 4
     d8e:	05 93       	las	Z, r16
     d90:	61 c0       	rjmp	.+194    	; 0xe54 <__vector_125+0x144>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
     d92:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     d96:	81 ff       	sbrs	r24, 1
     d98:	58 c0       	rjmp	.+176    	; 0xe4a <__vector_125+0x13a>
		udd_ack_overflow_event();
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
     da0:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <udd_sram+0xc>
     da4:	86 ff       	sbrs	r24, 6
     da6:	56 c0       	rjmp	.+172    	; 0xe54 <__vector_125+0x144>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
     da8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
     dac:	81 fd       	sbrc	r24, 1
     dae:	52 c0       	rjmp	.+164    	; 0xe54 <__vector_125+0x144>
     db0:	7f db       	rcall	.-2306   	; 0x4b0 <udd_ctrl_interrupt_tc_setup>
     db2:	81 11       	cpse	r24, r1
     db4:	4f c0       	rjmp	.+158    	; 0xe54 <__vector_125+0x144>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
     db6:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <udd_ep_control_state>
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	41 f4       	brne	.+16     	; 0xdce <__vector_125+0xbe>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
     dbe:	84 e0       	ldi	r24, 0x04	; 4
     dc0:	80 93 af 21 	sts	0x21AF, r24	; 0x8021af <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
     dc4:	ec eb       	ldi	r30, 0xBC	; 188
     dc6:	f1 e2       	ldi	r31, 0x21	; 33
     dc8:	02 e0       	ldi	r16, 0x02	; 2
     dca:	06 93       	lac	Z, r16
     dcc:	43 c0       	rjmp	.+134    	; 0xe54 <__vector_125+0x144>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <__vector_125+0xc4>
     dd2:	40 c0       	rjmp	.+128    	; 0xe54 <__vector_125+0x144>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
     dd4:	e5 ec       	ldi	r30, 0xC5	; 197
     dd6:	f1 e2       	ldi	r31, 0x21	; 33
     dd8:	04 e0       	ldi	r16, 0x04	; 4
     dda:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
     ddc:	ed eb       	ldi	r30, 0xBD	; 189
     dde:	f1 e2       	ldi	r31, 0x21	; 33
     de0:	04 e0       	ldi	r16, 0x04	; 4
     de2:	05 93       	las	Z, r16
     de4:	37 c0       	rjmp	.+110    	; 0xe54 <__vector_125+0x144>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
     de6:	80 e1       	ldi	r24, 0x10	; 16
     de8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0e df       	rcall	.-484    	; 0xc0c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
     df0:	81 e8       	ldi	r24, 0x81	; 129
     df2:	0c df       	rcall	.-488    	; 0xc0c <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	0a df       	rcall	.-492    	; 0xc0c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
     df8:	82 e8       	ldi	r24, 0x82	; 130
     dfa:	08 df       	rcall	.-496    	; 0xc0c <udd_ep_abort>
		}
#endif
		udc_reset();
     dfc:	39 d4       	rcall	.+2162   	; 0x1670 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
     dfe:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
     e02:	e0 eb       	ldi	r30, 0xB0	; 176
     e04:	f1 e2       	ldi	r31, 0x21	; 33
     e06:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
     e08:	96 e0       	ldi	r25, 0x06	; 6
     e0a:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
     e0c:	83 e4       	ldi	r24, 0x43	; 67
     e0e:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
     e10:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
     e12:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
     e14:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
     e16:	8b e6       	ldi	r24, 0x6B	; 107
     e18:	91 e2       	ldi	r25, 0x21	; 33
     e1a:	80 8b       	std	Z+16, r24	; 0x10
     e1c:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
     e1e:	4f da       	rcall	.-2914   	; 0x2be <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
     e20:	19 c0       	rjmp	.+50     	; 0xe54 <__vector_125+0x144>
	}

	if (udd_is_suspend_event()) {
     e22:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     e26:	86 ff       	sbrs	r24, 6
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <__vector_125+0x126>
		udd_ack_suspend_event();
     e2a:	80 e4       	ldi	r24, 0x40	; 64
     e2c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0d da       	rcall	.-3046   	; 0x24e <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
     e34:	0f c0       	rjmp	.+30     	; 0xe54 <__vector_125+0x144>
	}

	if (udd_is_resume_event()) {
     e36:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     e3a:	85 ff       	sbrs	r24, 5
     e3c:	0b c0       	rjmp	.+22     	; 0xe54 <__vector_125+0x144>
		udd_ack_resume_event();
     e3e:	80 e2       	ldi	r24, 0x20	; 32
     e40:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	03 da       	rcall	.-3066   	; 0x24e <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <__vector_125+0x144>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
     e4a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
     e4e:	84 fd       	sbrc	r24, 4
     e50:	ca cf       	rjmp	.-108    	; 0xde6 <__vector_125+0xd6>
     e52:	e7 cf       	rjmp	.-50     	; 0xe22 <__vector_125+0x112>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
     e54:	ff 91       	pop	r31
     e56:	ef 91       	pop	r30
     e58:	bf 91       	pop	r27
     e5a:	af 91       	pop	r26
     e5c:	9f 91       	pop	r25
     e5e:	8f 91       	pop	r24
     e60:	7f 91       	pop	r23
     e62:	6f 91       	pop	r22
     e64:	5f 91       	pop	r21
     e66:	4f 91       	pop	r20
     e68:	3f 91       	pop	r19
     e6a:	2f 91       	pop	r18
     e6c:	0f 91       	pop	r16
     e6e:	0f 90       	pop	r0
     e70:	0b be       	out	0x3b, r0	; 59
     e72:	0f 90       	pop	r0
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	0f 90       	pop	r0
     e78:	1f 90       	pop	r1
     e7a:	18 95       	reti

00000e7c <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
     e7c:	1f 92       	push	r1
     e7e:	0f 92       	push	r0
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	0b b6       	in	r0, 0x3b	; 59
     e88:	0f 92       	push	r0
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	2f 93       	push	r18
     e90:	3f 93       	push	r19
     e92:	4f 93       	push	r20
     e94:	5f 93       	push	r21
     e96:	6f 93       	push	r22
     e98:	7f 93       	push	r23
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	af 93       	push	r26
     ea0:	bf 93       	push	r27
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
     eaa:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
     eae:	81 fd       	sbrc	r24, 1
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
     eb2:	fe da       	rcall	.-2564   	; 0x4b0 <udd_ctrl_interrupt_tc_setup>
     eb4:	81 11       	cpse	r24, r1
     eb6:	c3 c0       	rjmp	.+390    	; 0x103e <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
     ebe:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
     ec2:	81 95       	neg	r24
     ec4:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
     ec6:	ec eb       	ldi	r30, 0xBC	; 188
     ec8:	f1 e2       	ldi	r31, 0x21	; 33
     eca:	e8 1b       	sub	r30, r24
     ecc:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
     ece:	20 81       	ld	r18, Z
     ed0:	31 81       	ldd	r19, Z+1	; 0x01
     ed2:	2c 5b       	subi	r18, 0xBC	; 188
     ed4:	31 42       	sbci	r19, 0x21	; 33
     ed6:	36 95       	lsr	r19
     ed8:	27 95       	ror	r18
     eda:	36 95       	lsr	r19
     edc:	27 95       	ror	r18
     ede:	36 95       	lsr	r19
     ee0:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
     ee2:	82 2f       	mov	r24, r18
     ee4:	86 95       	lsr	r24
     ee6:	20 fd       	sbrc	r18, 0
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <__vector_126+0x72>
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <__vector_126+0x74>
     eee:	90 e8       	ldi	r25, 0x80	; 128
     ef0:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
     ef2:	e8 2f       	mov	r30, r24
     ef4:	ef 70       	andi	r30, 0x0F	; 15
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	ee 0f       	add	r30, r30
     efa:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
     efc:	28 2f       	mov	r18, r24
     efe:	08 2e       	mov	r0, r24
     f00:	00 0c       	add	r0, r0
     f02:	33 0b       	sbc	r19, r19
     f04:	22 27       	eor	r18, r18
     f06:	33 0f       	add	r19, r19
     f08:	22 1f       	adc	r18, r18
     f0a:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
     f10:	df 01       	movw	r26, r30
     f12:	aa 0f       	add	r26, r26
     f14:	bb 1f       	adc	r27, r27
     f16:	aa 0f       	add	r26, r26
     f18:	bb 1f       	adc	r27, r27
     f1a:	aa 0f       	add	r26, r26
     f1c:	bb 1f       	adc	r27, r27
     f1e:	a0 55       	subi	r26, 0x50	; 80
     f20:	be 4d       	sbci	r27, 0xDE	; 222
     f22:	1c 96       	adiw	r26, 0x0c	; 12
     f24:	9c 91       	ld	r25, X
     f26:	95 ff       	sbrs	r25, 5
     f28:	8a c0       	rjmp	.+276    	; 0x103e <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	e4 54       	subi	r30, 0x44	; 68
     f38:	fe 4d       	sbci	r31, 0xDE	; 222
     f3a:	00 e2       	ldi	r16, 0x20	; 32
     f3c:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
     f3e:	81 11       	cpse	r24, r1
     f40:	79 c0       	rjmp	.+242    	; 0x1034 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
     f42:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <udd_ep_control_state>
     f46:	84 30       	cpi	r24, 0x04	; 4
     f48:	19 f4       	brne	.+6      	; 0xf50 <__vector_126+0xd4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
     f4a:	fa d9       	rcall	.-3084   	; 0x340 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
     f4c:	b8 d9       	rcall	.-3216   	; 0x2be <udd_ctrl_init>
     f4e:	77 c0       	rjmp	.+238    	; 0x103e <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
     f50:	00 91 be 21 	lds	r16, 0x21BE	; 0x8021be <udd_sram+0xe>
     f54:	10 91 bf 21 	lds	r17, 0x21BF	; 0x8021bf <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
     f58:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <udd_g_ctrlreq+0xa>
     f5c:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <udd_g_ctrlreq+0xb>
     f60:	c0 91 ab 21 	lds	r28, 0x21AB	; 0x8021ab <udd_ctrl_payload_nb_trans>
     f64:	d0 91 ac 21 	lds	r29, 0x21AC	; 0x8021ac <udd_ctrl_payload_nb_trans+0x1>
     f68:	9e 01       	movw	r18, r28
     f6a:	20 0f       	add	r18, r16
     f6c:	31 1f       	adc	r19, r17
     f6e:	82 17       	cp	r24, r18
     f70:	93 07       	cpc	r25, r19
     f72:	18 f4       	brcc	.+6      	; 0xf7a <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
     f74:	8c 01       	movw	r16, r24
     f76:	0c 1b       	sub	r16, r28
     f78:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
     f7a:	80 91 30 23 	lds	r24, 0x2330	; 0x802330 <udd_g_ctrlreq+0x8>
     f7e:	90 91 31 23 	lds	r25, 0x2331	; 0x802331 <udd_g_ctrlreq+0x9>
     f82:	a8 01       	movw	r20, r16
     f84:	6b e6       	ldi	r22, 0x6B	; 107
     f86:	71 e2       	ldi	r23, 0x21	; 33
     f88:	8c 0f       	add	r24, r28
     f8a:	9d 1f       	adc	r25, r29
     f8c:	6b d6       	rcall	.+3286   	; 0x1c64 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
     f8e:	c0 0f       	add	r28, r16
     f90:	d1 1f       	adc	r29, r17
     f92:	c0 93 ab 21 	sts	0x21AB, r28	; 0x8021ab <udd_ctrl_payload_nb_trans>
     f96:	d0 93 ac 21 	sts	0x21AC, r29	; 0x8021ac <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
     f9a:	00 34       	cpi	r16, 0x40	; 64
     f9c:	11 05       	cpc	r17, r1
     f9e:	69 f4       	brne	.+26     	; 0xfba <__vector_126+0x13e>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
     fa0:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <udd_ctrl_prev_payload_nb_trans>
     fa4:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <udd_ctrl_prev_payload_nb_trans+0x1>
     fa8:	8c 0f       	add	r24, r28
     faa:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
     fac:	20 91 2e 23 	lds	r18, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
     fb0:	30 91 2f 23 	lds	r19, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
     fb4:	82 17       	cp	r24, r18
     fb6:	93 07       	cpc	r25, r19
     fb8:	80 f0       	brcs	.+32     	; 0xfda <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
     fba:	e8 e2       	ldi	r30, 0x28	; 40
     fbc:	f3 e2       	ldi	r31, 0x23	; 35
     fbe:	c2 87       	std	Z+10, r28	; 0x0a
     fc0:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
     fc2:	06 84       	ldd	r0, Z+14	; 0x0e
     fc4:	f7 85       	ldd	r31, Z+15	; 0x0f
     fc6:	e0 2d       	mov	r30, r0
     fc8:	30 97       	sbiw	r30, 0x00	; 0
     fca:	29 f0       	breq	.+10     	; 0xfd6 <__vector_126+0x15a>
			if (!udd_g_ctrlreq.over_under_run()) {
     fcc:	19 95       	eicall
     fce:	81 11       	cpse	r24, r1
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <__vector_126+0x15a>
				// Stall ZLP
				udd_ctrl_stall_data();
     fd2:	9a d9       	rcall	.-3276   	; 0x308 <udd_ctrl_stall_data>
     fd4:	34 c0       	rjmp	.+104    	; 0x103e <__vector_126+0x1c2>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
     fd6:	a6 d9       	rcall	.-3252   	; 0x324 <udd_ctrl_send_zlp_in>
     fd8:	32 c0       	rjmp	.+100    	; 0x103e <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
     fda:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <udd_g_ctrlreq+0xa>
     fde:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <udd_g_ctrlreq+0xb>
     fe2:	c8 17       	cp	r28, r24
     fe4:	d9 07       	cpc	r29, r25
     fe6:	f9 f4       	brne	.+62     	; 0x1026 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
     fe8:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <udd_g_ctrlreq+0xe>
     fec:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <udd_g_ctrlreq+0xf>
     ff0:	30 97       	sbiw	r30, 0x00	; 0
     ff2:	11 f4       	brne	.+4      	; 0xff8 <__vector_126+0x17c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
     ff4:	89 d9       	rcall	.-3310   	; 0x308 <udd_ctrl_stall_data>
     ff6:	23 c0       	rjmp	.+70     	; 0x103e <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
     ff8:	19 95       	eicall
     ffa:	81 11       	cpse	r24, r1
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
     ffe:	84 d9       	rcall	.-3320   	; 0x308 <udd_ctrl_stall_data>
    1000:	1e c0       	rjmp	.+60     	; 0x103e <__vector_126+0x1c2>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1002:	20 91 ad 21 	lds	r18, 0x21AD	; 0x8021ad <udd_ctrl_prev_payload_nb_trans>
    1006:	30 91 ae 21 	lds	r19, 0x21AE	; 0x8021ae <udd_ctrl_prev_payload_nb_trans+0x1>
    100a:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <udd_ctrl_payload_nb_trans>
    100e:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <udd_ctrl_payload_nb_trans+0x1>
    1012:	82 0f       	add	r24, r18
    1014:	93 1f       	adc	r25, r19
    1016:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <udd_ctrl_prev_payload_nb_trans>
    101a:	90 93 ae 21 	sts	0x21AE, r25	; 0x8021ae <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    101e:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <udd_ctrl_payload_nb_trans>
    1022:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1026:	ec eb       	ldi	r30, 0xBC	; 188
    1028:	f1 e2       	ldi	r31, 0x21	; 33
    102a:	02 e0       	ldi	r16, 0x02	; 2
    102c:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    102e:	00 e2       	ldi	r16, 0x20	; 32
    1030:	06 93       	lac	Z, r16
    1032:	05 c0       	rjmp	.+10     	; 0x103e <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1034:	80 38       	cpi	r24, 0x80	; 128
    1036:	11 f4       	brne	.+4      	; 0x103c <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    1038:	8b d9       	rcall	.-3306   	; 0x350 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    103a:	01 c0       	rjmp	.+2      	; 0x103e <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    103c:	ab da       	rcall	.-2730   	; 0x594 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    103e:	ff 91       	pop	r31
    1040:	ef 91       	pop	r30
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	bf 91       	pop	r27
    1048:	af 91       	pop	r26
    104a:	9f 91       	pop	r25
    104c:	8f 91       	pop	r24
    104e:	7f 91       	pop	r23
    1050:	6f 91       	pop	r22
    1052:	5f 91       	pop	r21
    1054:	4f 91       	pop	r20
    1056:	3f 91       	pop	r19
    1058:	2f 91       	pop	r18
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	0f 90       	pop	r0
    1060:	0b be       	out	0x3b, r0	; 59
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	0f 90       	pop	r0
    1068:	1f 90       	pop	r1
    106a:	18 95       	reti

0000106c <udi_cdc_comm_enable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
    106c:	10 92 06 23 	sts	0x2306, r1	; 0x802306 <udi_cdc_nb_comm_enabled>
    1070:	10 92 12 23 	sts	0x2312, r1	; 0x802312 <udi_cdc_state>
    1074:	10 92 13 23 	sts	0x2313, r1	; 0x802313 <udi_cdc_state+0x1>
    1078:	e8 e0       	ldi	r30, 0x08	; 8
    107a:	f3 e2       	ldi	r31, 0x23	; 35
    107c:	81 ea       	ldi	r24, 0xA1	; 161
    107e:	80 83       	st	Z, r24
    1080:	80 e2       	ldi	r24, 0x20	; 32
    1082:	81 83       	std	Z+1, r24	; 0x01
    1084:	12 82       	std	Z+2, r1	; 0x02
    1086:	13 82       	std	Z+3, r1	; 0x03
    1088:	14 82       	std	Z+4, r1	; 0x04
    108a:	15 82       	std	Z+5, r1	; 0x05
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	86 83       	std	Z+6, r24	; 0x06
    1092:	97 83       	std	Z+7, r25	; 0x07
    1094:	10 86       	std	Z+8, r1	; 0x08
    1096:	11 86       	std	Z+9, r1	; 0x09
    1098:	e4 e1       	ldi	r30, 0x14	; 20
    109a:	f3 e2       	ldi	r31, 0x23	; 35
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	92 ec       	ldi	r25, 0xC2	; 194
    10a0:	a1 e0       	ldi	r26, 0x01	; 1
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	80 83       	st	Z, r24
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	a2 83       	std	Z+2, r26	; 0x02
    10aa:	b3 83       	std	Z+3, r27	; 0x03
    10ac:	14 82       	std	Z+4, r1	; 0x04
    10ae:	15 82       	std	Z+5, r1	; 0x05
    10b0:	88 e0       	ldi	r24, 0x08	; 8
    10b2:	86 83       	std	Z+6, r24	; 0x06
    10b4:	80 91 06 23 	lds	r24, 0x2306	; 0x802306 <udi_cdc_nb_comm_enabled>
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	80 93 06 23 	sts	0x2306, r24	; 0x802306 <udi_cdc_nb_comm_enabled>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	08 95       	ret

000010c2 <udi_cdc_comm_disable>:
    10c2:	80 91 06 23 	lds	r24, 0x2306	; 0x802306 <udi_cdc_nb_comm_enabled>
    10c6:	81 50       	subi	r24, 0x01	; 1
    10c8:	80 93 06 23 	sts	0x2306, r24	; 0x802306 <udi_cdc_nb_comm_enabled>
    10cc:	08 95       	ret

000010ce <udi_cdc_data_disable>:
    10ce:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <udi_cdc_nb_data_enabled>
    10d2:	81 50       	subi	r24, 0x01	; 1
    10d4:	80 93 05 23 	sts	0x2305, r24	; 0x802305 <udi_cdc_nb_data_enabled>
    10d8:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <udi_cdc_nb_data_enabled>
    10dc:	10 92 04 23 	sts	0x2304, r1	; 0x802304 <udi_cdc_data_running>
    10e0:	08 95       	ret

000010e2 <udi_cdc_data_setup>:
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	08 95       	ret

000010e6 <udi_cdc_getsetting>:
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	08 95       	ret

000010ea <udi_cdc_comm_setup>:
    10ea:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <udd_g_ctrlreq>
    10ee:	88 23       	and	r24, r24
    10f0:	cc f4       	brge	.+50     	; 0x1124 <udi_cdc_comm_setup+0x3a>
    10f2:	80 76       	andi	r24, 0x60	; 96
    10f4:	80 32       	cpi	r24, 0x20	; 32
    10f6:	b9 f5       	brne	.+110    	; 0x1166 <udi_cdc_comm_setup+0x7c>
    10f8:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    10fc:	81 32       	cpi	r24, 0x21	; 33
    10fe:	a9 f5       	brne	.+106    	; 0x116a <udi_cdc_comm_setup+0x80>
    1100:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    1104:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    1108:	07 97       	sbiw	r24, 0x07	; 7
    110a:	89 f5       	brne	.+98     	; 0x116e <udi_cdc_comm_setup+0x84>
    110c:	e8 e2       	ldi	r30, 0x28	; 40
    110e:	f3 e2       	ldi	r31, 0x23	; 35
    1110:	84 e1       	ldi	r24, 0x14	; 20
    1112:	93 e2       	ldi	r25, 0x23	; 35
    1114:	80 87       	std	Z+8, r24	; 0x08
    1116:	91 87       	std	Z+9, r25	; 0x09
    1118:	87 e0       	ldi	r24, 0x07	; 7
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	82 87       	std	Z+10, r24	; 0x0a
    111e:	93 87       	std	Z+11, r25	; 0x0b
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	08 95       	ret
    1124:	80 76       	andi	r24, 0x60	; 96
    1126:	80 32       	cpi	r24, 0x20	; 32
    1128:	21 f5       	brne	.+72     	; 0x1172 <udi_cdc_comm_setup+0x88>
    112a:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    112e:	80 32       	cpi	r24, 0x20	; 32
    1130:	21 f0       	breq	.+8      	; 0x113a <udi_cdc_comm_setup+0x50>
    1132:	82 32       	cpi	r24, 0x22	; 34
    1134:	01 f1       	breq	.+64     	; 0x1176 <udi_cdc_comm_setup+0x8c>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	08 95       	ret
    113a:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    113e:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    1142:	07 97       	sbiw	r24, 0x07	; 7
    1144:	d1 f4       	brne	.+52     	; 0x117a <udi_cdc_comm_setup+0x90>
    1146:	e8 e2       	ldi	r30, 0x28	; 40
    1148:	f3 e2       	ldi	r31, 0x23	; 35
    114a:	8f eb       	ldi	r24, 0xBF	; 191
    114c:	98 e0       	ldi	r25, 0x08	; 8
    114e:	84 87       	std	Z+12, r24	; 0x0c
    1150:	95 87       	std	Z+13, r25	; 0x0d
    1152:	84 e1       	ldi	r24, 0x14	; 20
    1154:	93 e2       	ldi	r25, 0x23	; 35
    1156:	80 87       	std	Z+8, r24	; 0x08
    1158:	91 87       	std	Z+9, r25	; 0x09
    115a:	87 e0       	ldi	r24, 0x07	; 7
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	82 87       	std	Z+10, r24	; 0x0a
    1160:	93 87       	std	Z+11, r25	; 0x0b
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	08 95       	ret
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	08 95       	ret
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	08 95       	ret
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	08 95       	ret
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	08 95       	ret
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	08 95       	ret
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	08 95       	ret

0000117e <udi_cdc_line_coding_received>:
    117e:	08 95       	ret

00001180 <udi_cdc_tx_send>:
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	1f 92       	push	r1
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udi_cdc_tx_trans_ongoing>
    1194:	81 11       	cpse	r24, r1
    1196:	95 c0       	rjmp	.+298    	; 0x12c2 <udi_cdc_tx_send+0x142>
    1198:	80 db       	rcall	.-2304   	; 0x89a <udd_is_high_speed>
    119a:	88 23       	and	r24, r24
    119c:	49 f0       	breq	.+18     	; 0x11b0 <udi_cdc_tx_send+0x30>
    119e:	00 91 f5 21 	lds	r16, 0x21F5	; 0x8021f5 <udi_cdc_tx_sof_num>
    11a2:	10 91 f6 21 	lds	r17, 0x21F6	; 0x8021f6 <udi_cdc_tx_sof_num+0x1>
    11a6:	86 db       	rcall	.-2292   	; 0x8b4 <udd_get_micro_frame_number>
    11a8:	08 17       	cp	r16, r24
    11aa:	19 07       	cpc	r17, r25
    11ac:	51 f4       	brne	.+20     	; 0x11c2 <udi_cdc_tx_send+0x42>
    11ae:	89 c0       	rjmp	.+274    	; 0x12c2 <udi_cdc_tx_send+0x142>
    11b0:	00 91 f5 21 	lds	r16, 0x21F5	; 0x8021f5 <udi_cdc_tx_sof_num>
    11b4:	10 91 f6 21 	lds	r17, 0x21F6	; 0x8021f6 <udi_cdc_tx_sof_num+0x1>
    11b8:	78 db       	rcall	.-2320   	; 0x8aa <udd_get_frame_number>
    11ba:	08 17       	cp	r16, r24
    11bc:	19 07       	cpc	r17, r25
    11be:	09 f4       	brne	.+2      	; 0x11c2 <udi_cdc_tx_send+0x42>
    11c0:	80 c0       	rjmp	.+256    	; 0x12c2 <udi_cdc_tx_send+0x142>
    11c2:	8f b7       	in	r24, 0x3f	; 63
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	f8 94       	cli
    11c8:	19 81       	ldd	r17, Y+1	; 0x01
    11ca:	00 91 f7 21 	lds	r16, 0x21F7	; 0x8021f7 <udi_cdc_tx_buf_sel>
    11ce:	e0 2f       	mov	r30, r16
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	e8 50       	subi	r30, 0x08	; 8
    11d8:	fe 4d       	sbci	r31, 0xDE	; 222
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	89 2b       	or	r24, r25
    11e0:	f9 f4       	brne	.+62     	; 0x1220 <udi_cdc_tx_send+0xa0>
    11e2:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <sof_zlp_counter.4961>
    11e6:	90 91 f2 21 	lds	r25, 0x21F2	; 0x8021f2 <sof_zlp_counter.4961+0x1>
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	80 93 f1 21 	sts	0x21F1, r24	; 0x8021f1 <sof_zlp_counter.4961>
    11f0:	90 93 f2 21 	sts	0x21F2, r25	; 0x8021f2 <sof_zlp_counter.4961+0x1>
    11f4:	52 db       	rcall	.-2396   	; 0x89a <udd_is_high_speed>
    11f6:	81 11       	cpse	r24, r1
    11f8:	07 c0       	rjmp	.+14     	; 0x1208 <udi_cdc_tx_send+0x88>
    11fa:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <sof_zlp_counter.4961>
    11fe:	90 91 f2 21 	lds	r25, 0x21F2	; 0x8021f2 <sof_zlp_counter.4961+0x1>
    1202:	84 36       	cpi	r24, 0x64	; 100
    1204:	91 05       	cpc	r25, r1
    1206:	50 f0       	brcs	.+20     	; 0x121c <udi_cdc_tx_send+0x9c>
    1208:	48 db       	rcall	.-2416   	; 0x89a <udd_is_high_speed>
    120a:	88 23       	and	r24, r24
    120c:	49 f0       	breq	.+18     	; 0x1220 <udi_cdc_tx_send+0xa0>
    120e:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <sof_zlp_counter.4961>
    1212:	90 91 f2 21 	lds	r25, 0x21F2	; 0x8021f2 <sof_zlp_counter.4961+0x1>
    1216:	80 32       	cpi	r24, 0x20	; 32
    1218:	93 40       	sbci	r25, 0x03	; 3
    121a:	10 f4       	brcc	.+4      	; 0x1220 <udi_cdc_tx_send+0xa0>
    121c:	1f bf       	out	0x3f, r17	; 63
    121e:	51 c0       	rjmp	.+162    	; 0x12c2 <udi_cdc_tx_send+0x142>
    1220:	10 92 f1 21 	sts	0x21F1, r1	; 0x8021f1 <sof_zlp_counter.4961>
    1224:	10 92 f2 21 	sts	0x21F2, r1	; 0x8021f2 <sof_zlp_counter.4961+0x1>
    1228:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <udi_cdc_tx_both_buf_to_send>
    122c:	81 11       	cpse	r24, r1
    122e:	06 c0       	rjmp	.+12     	; 0x123c <udi_cdc_tx_send+0xbc>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	01 11       	cpse	r16, r1
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	80 93 f7 21 	sts	0x21F7, r24	; 0x8021f7 <udi_cdc_tx_buf_sel>
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <udi_cdc_tx_send+0xc4>
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	01 11       	cpse	r16, r1
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	08 2f       	mov	r16, r24
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udi_cdc_tx_trans_ongoing>
    124a:	1f bf       	out	0x3f, r17	; 63
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	f8 01       	movw	r30, r16
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	e8 50       	subi	r30, 0x08	; 8
    1256:	fe 4d       	sbci	r31, 0xDE	; 222
    1258:	ff 24       	eor	r15, r15
    125a:	f3 94       	inc	r15
    125c:	80 81       	ld	r24, Z
    125e:	91 81       	ldd	r25, Z+1	; 0x01
    1260:	80 34       	cpi	r24, 0x40	; 64
    1262:	91 05       	cpc	r25, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <udi_cdc_tx_send+0xe8>
    1266:	f1 2c       	mov	r15, r1
    1268:	ff 20       	and	r15, r15
    126a:	79 f0       	breq	.+30     	; 0x128a <udi_cdc_tx_send+0x10a>
    126c:	16 db       	rcall	.-2516   	; 0x89a <udd_is_high_speed>
    126e:	88 23       	and	r24, r24
    1270:	31 f0       	breq	.+12     	; 0x127e <udi_cdc_tx_send+0xfe>
    1272:	20 db       	rcall	.-2496   	; 0x8b4 <udd_get_micro_frame_number>
    1274:	80 93 f5 21 	sts	0x21F5, r24	; 0x8021f5 <udi_cdc_tx_sof_num>
    1278:	90 93 f6 21 	sts	0x21F6, r25	; 0x8021f6 <udi_cdc_tx_sof_num+0x1>
    127c:	0a c0       	rjmp	.+20     	; 0x1292 <udi_cdc_tx_send+0x112>
    127e:	15 db       	rcall	.-2518   	; 0x8aa <udd_get_frame_number>
    1280:	80 93 f5 21 	sts	0x21F5, r24	; 0x8021f5 <udi_cdc_tx_sof_num>
    1284:	90 93 f6 21 	sts	0x21F6, r25	; 0x8021f6 <udi_cdc_tx_sof_num+0x1>
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <udi_cdc_tx_send+0x112>
    128a:	10 92 f5 21 	sts	0x21F5, r1	; 0x8021f5 <udi_cdc_tx_sof_num>
    128e:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <udi_cdc_tx_sof_num+0x1>
    1292:	f8 01       	movw	r30, r16
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	e8 50       	subi	r30, 0x08	; 8
    129a:	fe 4d       	sbci	r31, 0xDE	; 222
    129c:	20 81       	ld	r18, Z
    129e:	31 81       	ldd	r19, Z+1	; 0x01
    12a0:	a8 01       	movw	r20, r16
    12a2:	00 24       	eor	r0, r0
    12a4:	56 95       	lsr	r21
    12a6:	47 95       	ror	r20
    12a8:	07 94       	ror	r0
    12aa:	56 95       	lsr	r21
    12ac:	47 95       	ror	r20
    12ae:	07 94       	ror	r0
    12b0:	54 2f       	mov	r21, r20
    12b2:	40 2d       	mov	r20, r0
    12b4:	44 50       	subi	r20, 0x04	; 4
    12b6:	5e 4d       	sbci	r21, 0xDE	; 222
    12b8:	08 e6       	ldi	r16, 0x68	; 104
    12ba:	19 e0       	ldi	r17, 0x09	; 9
    12bc:	6f 2d       	mov	r22, r15
    12be:	81 e8       	ldi	r24, 0x81	; 129
    12c0:	dd db       	rcall	.-2118   	; 0xa7c <udd_ep_run>
    12c2:	0f 90       	pop	r0
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	08 95       	ret

000012d0 <udi_cdc_data_sent>:
    12d0:	81 11       	cpse	r24, r1
    12d2:	15 c0       	rjmp	.+42     	; 0x12fe <udi_cdc_data_sent+0x2e>
    12d4:	20 91 f7 21 	lds	r18, 0x21F7	; 0x8021f7 <udi_cdc_tx_buf_sel>
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	22 23       	and	r18, r18
    12de:	11 f0       	breq	.+4      	; 0x12e4 <udi_cdc_data_sent+0x14>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	fc 01       	movw	r30, r24
    12ea:	e8 50       	subi	r30, 0x08	; 8
    12ec:	fe 4d       	sbci	r31, 0xDE	; 222
    12ee:	10 82       	st	Z, r1
    12f0:	11 82       	std	Z+1, r1	; 0x01
    12f2:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <udi_cdc_tx_both_buf_to_send>
    12f6:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <udi_cdc_tx_trans_ongoing>
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	41 cf       	rjmp	.-382    	; 0x1180 <udi_cdc_tx_send>
    12fe:	08 95       	ret

00001300 <udi_cdc_data_sof_notify>:
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	3e cf       	rjmp	.-388    	; 0x1180 <udi_cdc_tx_send>
    1304:	08 95       	ret

00001306 <udi_cdc_multi_get_nb_received_data>:
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	1f 92       	push	r1
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	8f b7       	in	r24, 0x3f	; 63
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	f8 94       	cli
    1316:	49 81       	ldd	r20, Y+1	; 0x01
    1318:	20 91 7d 22 	lds	r18, 0x227D	; 0x80227d <udi_cdc_rx_pos>
    131c:	30 91 7e 22 	lds	r19, 0x227E	; 0x80227e <udi_cdc_rx_pos+0x1>
    1320:	e0 91 7f 22 	lds	r30, 0x227F	; 0x80227f <udi_cdc_rx_buf_sel>
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	ee 0f       	add	r30, r30
    1328:	ff 1f       	adc	r31, r31
    132a:	e0 58       	subi	r30, 0x80	; 128
    132c:	fd 4d       	sbci	r31, 0xDD	; 221
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	4f bf       	out	0x3f, r20	; 63
    1334:	82 1b       	sub	r24, r18
    1336:	93 0b       	sbc	r25, r19
    1338:	0f 90       	pop	r0
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    1340:	e2 df       	rcall	.-60     	; 0x1306 <udi_cdc_multi_get_nb_received_data>
    1342:	21 e0       	ldi	r18, 0x01	; 1
    1344:	89 2b       	or	r24, r25
    1346:	09 f4       	brne	.+2      	; 0x134a <udi_cdc_multi_is_rx_ready+0xa>
    1348:	20 e0       	ldi	r18, 0x00	; 0
}
    134a:	82 2f       	mov	r24, r18
    134c:	08 95       	ret

0000134e <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	1f 92       	push	r1
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    135c:	8f b7       	in	r24, 0x3f	; 63
    135e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1360:	f8 94       	cli
	return flags;
    1362:	99 81       	ldd	r25, Y+1	; 0x01
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    1364:	20 91 7f 22 	lds	r18, 0x227F	; 0x80227f <udi_cdc_rx_buf_sel>
	if (udi_cdc_rx_trans_ongoing[port] ||
    1368:	80 91 7c 22 	lds	r24, 0x227C	; 0x80227c <udi_cdc_rx_trans_ongoing>
    136c:	81 11       	cpse	r24, r1
    136e:	10 c0       	rjmp	.+32     	; 0x1390 <udi_cdc_rx_start+0x42>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    1370:	60 91 7d 22 	lds	r22, 0x227D	; 0x80227d <udi_cdc_rx_pos>
    1374:	70 91 7e 22 	lds	r23, 0x227E	; 0x80227e <udi_cdc_rx_pos+0x1>
    1378:	02 2f       	mov	r16, r18
    137a:	10 e0       	ldi	r17, 0x00	; 0
    137c:	f8 01       	movw	r30, r16
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	e0 58       	subi	r30, 0x80	; 128
    1384:	fd 4d       	sbci	r31, 0xDD	; 221
    1386:	40 81       	ld	r20, Z
    1388:	51 81       	ldd	r21, Z+1	; 0x01
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    138a:	64 17       	cp	r22, r20
    138c:	75 07       	cpc	r23, r21
    138e:	18 f4       	brcc	.+6      	; 0x1396 <udi_cdc_rx_start+0x48>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1390:	9f bf       	out	0x3f, r25	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	22 c0       	rjmp	.+68     	; 0x13da <udi_cdc_rx_start+0x8c>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    1396:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <udi_cdc_rx_pos>
    139a:	10 92 7e 22 	sts	0x227E, r1	; 0x80227e <udi_cdc_rx_pos+0x1>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	21 11       	cpse	r18, r1
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	80 93 7f 22 	sts	0x227F, r24	; 0x80227f <udi_cdc_rx_buf_sel>

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 93 7c 22 	sts	0x227C, r24	; 0x80227c <udi_cdc_rx_trans_ongoing>
    13ae:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	c6 df       	rcall	.-116    	; 0x1340 <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    13b4:	a8 01       	movw	r20, r16
    13b6:	00 24       	eor	r0, r0
    13b8:	56 95       	lsr	r21
    13ba:	47 95       	ror	r20
    13bc:	07 94       	ror	r0
    13be:	56 95       	lsr	r21
    13c0:	47 95       	ror	r20
    13c2:	07 94       	ror	r0
    13c4:	54 2f       	mov	r21, r20
    13c6:	40 2d       	mov	r20, r0
    13c8:	4c 57       	subi	r20, 0x7C	; 124
    13ca:	5d 4d       	sbci	r21, 0xDD	; 221
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    13cc:	05 e2       	ldi	r16, 0x25	; 37
    13ce:	1a e0       	ldi	r17, 0x0A	; 10
    13d0:	20 e4       	ldi	r18, 0x40	; 64
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	61 e0       	ldi	r22, 0x01	; 1
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	51 db       	rcall	.-2398   	; 0xa7c <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    13da:	0f 90       	pop	r0
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	08 95       	ret

000013e6 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
    13e6:	10 92 05 23 	sts	0x2305, r1	; 0x802305 <udi_cdc_nb_data_enabled>
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    13ea:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <udi_cdc_tx_trans_ongoing>
	udi_cdc_tx_both_buf_to_send[port] = false;
    13ee:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_buf_sel[port] = 0;
    13f2:	10 92 f7 21 	sts	0x21F7, r1	; 0x8021f7 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf_nb[port][0] = 0;
    13f6:	e8 ef       	ldi	r30, 0xF8	; 248
    13f8:	f1 e2       	ldi	r31, 0x21	; 33
    13fa:	10 82       	st	Z, r1
    13fc:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_buf_nb[port][1] = 0;
    13fe:	12 82       	std	Z+2, r1	; 0x02
    1400:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_tx_sof_num[port] = 0;
    1402:	10 92 f5 21 	sts	0x21F5, r1	; 0x8021f5 <udi_cdc_tx_sof_num>
    1406:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <udi_cdc_tx_sof_num+0x1>
	udi_cdc_tx_send(port);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	b9 de       	rcall	.-654    	; 0x1180 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    140e:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_buf_sel[port] = 0;
    1412:	10 92 7f 22 	sts	0x227F, r1	; 0x80227f <udi_cdc_rx_buf_sel>
	udi_cdc_rx_buf_nb[port][0] = 0;
    1416:	e0 e8       	ldi	r30, 0x80	; 128
    1418:	f2 e2       	ldi	r31, 0x22	; 34
    141a:	10 82       	st	Z, r1
    141c:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_rx_buf_nb[port][1] = 0;
    141e:	12 82       	std	Z+2, r1	; 0x02
    1420:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_rx_pos[port] = 0;
    1422:	10 92 7d 22 	sts	0x227D, r1	; 0x80227d <udi_cdc_rx_pos>
    1426:	10 92 7e 22 	sts	0x227E, r1	; 0x80227e <udi_cdc_rx_pos+0x1>
	if (!udi_cdc_rx_start(port)) {
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 df       	rcall	.-224    	; 0x134e <udi_cdc_rx_start>
    142e:	88 23       	and	r24, r24
    1430:	59 f0       	breq	.+22     	; 0x1448 <udi_cdc_data_enable+0x62>
		return false;
	}
	udi_cdc_nb_data_enabled++;
    1432:	90 91 05 23 	lds	r25, 0x2305	; 0x802305 <udi_cdc_nb_data_enabled>
    1436:	9f 5f       	subi	r25, 0xFF	; 255
    1438:	90 93 05 23 	sts	0x2305, r25	; 0x802305 <udi_cdc_nb_data_enabled>
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    143c:	90 91 05 23 	lds	r25, 0x2305	; 0x802305 <udi_cdc_nb_data_enabled>
    1440:	91 30       	cpi	r25, 0x01	; 1
    1442:	11 f4       	brne	.+4      	; 0x1448 <udi_cdc_data_enable+0x62>
		udi_cdc_data_running = true;
    1444:	90 93 04 23 	sts	0x2304, r25	; 0x802304 <udi_cdc_data_running>
	}
	return true;
}
    1448:	08 95       	ret

0000144a <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    144e:	81 11       	cpse	r24, r1
    1450:	28 c0       	rjmp	.+80     	; 0x14a2 <udi_cdc_data_received+0x58>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    1452:	80 91 7f 22 	lds	r24, 0x227F	; 0x80227f <udi_cdc_rx_buf_sel>
    1456:	e1 e0       	ldi	r30, 0x01	; 1
    1458:	81 11       	cpse	r24, r1
    145a:	e0 e0       	ldi	r30, 0x00	; 0
    145c:	84 2f       	mov	r24, r20
	if (!n) {
    145e:	61 15       	cp	r22, r1
    1460:	71 05       	cpc	r23, r1
    1462:	a1 f4       	brne	.+40     	; 0x148c <udi_cdc_data_received+0x42>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	00 24       	eor	r0, r0
    1468:	f6 95       	lsr	r31
    146a:	e7 95       	ror	r30
    146c:	07 94       	ror	r0
    146e:	f6 95       	lsr	r31
    1470:	e7 95       	ror	r30
    1472:	07 94       	ror	r0
    1474:	fe 2f       	mov	r31, r30
    1476:	e0 2d       	mov	r30, r0
    1478:	af 01       	movw	r20, r30
    147a:	4c 57       	subi	r20, 0x7C	; 124
    147c:	5d 4d       	sbci	r21, 0xDD	; 221
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    147e:	05 e2       	ldi	r16, 0x25	; 37
    1480:	1a e0       	ldi	r17, 0x0A	; 10
    1482:	20 e4       	ldi	r18, 0x40	; 64
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	f9 da       	rcall	.-2574   	; 0xa7c <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    148a:	0b c0       	rjmp	.+22     	; 0x14a2 <udi_cdc_data_received+0x58>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	e0 58       	subi	r30, 0x80	; 128
    1494:	fd 4d       	sbci	r31, 0xDD	; 221
    1496:	60 83       	st	Z, r22
    1498:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
    149a:	10 92 7c 22 	sts	0x227C, r1	; 0x80227c <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_start(port);
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	56 df       	rcall	.-340    	; 0x134e <udi_cdc_rx_start>
}
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	08 95       	ret

000014a8 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    14a8:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <udc_ptr_conf>
    14ac:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    14b0:	01 90       	ld	r0, Z+
    14b2:	f0 81       	ld	r31, Z
    14b4:	e0 2d       	mov	r30, r0
    14b6:	22 81       	ldd	r18, Z+2	; 0x02
    14b8:	33 81       	ldd	r19, Z+3	; 0x03
    14ba:	2e 0f       	add	r18, r30
    14bc:	3f 1f       	adc	r19, r31
    14be:	fc 01       	movw	r30, r24
    14c0:	40 81       	ld	r20, Z
    14c2:	e4 0f       	add	r30, r20
    14c4:	f1 1d       	adc	r31, r1
    14c6:	e2 17       	cp	r30, r18
    14c8:	f3 07       	cpc	r31, r19
    14ca:	b8 f4       	brcc	.+46     	; 0x14fa <udc_next_desc_in_iface+0x52>
    14cc:	81 81       	ldd	r24, Z+1	; 0x01
    14ce:	84 30       	cpi	r24, 0x04	; 4
    14d0:	b9 f0       	breq	.+46     	; 0x1500 <udc_next_desc_in_iface+0x58>
    14d2:	86 13       	cpse	r24, r22
    14d4:	09 c0       	rjmp	.+18     	; 0x14e8 <udc_next_desc_in_iface+0x40>
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <udc_next_desc_in_iface+0x3a>
    14d8:	81 81       	ldd	r24, Z+1	; 0x01
    14da:	84 30       	cpi	r24, 0x04	; 4
    14dc:	a1 f0       	breq	.+40     	; 0x1506 <udc_next_desc_in_iface+0x5e>
    14de:	86 13       	cpse	r24, r22
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <udc_next_desc_in_iface+0x40>
    14e2:	8e 2f       	mov	r24, r30
    14e4:	9f 2f       	mov	r25, r31
    14e6:	08 95       	ret
    14e8:	80 81       	ld	r24, Z
    14ea:	e8 0f       	add	r30, r24
    14ec:	f1 1d       	adc	r31, r1
    14ee:	e2 17       	cp	r30, r18
    14f0:	f3 07       	cpc	r31, r19
    14f2:	90 f3       	brcs	.-28     	; 0x14d8 <udc_next_desc_in_iface+0x30>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	08 95       	ret
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	08 95       	ret
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	08 95       	ret
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	08 95       	ret

0000150c <udc_valid_address>:
    150c:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    1510:	8f 77       	andi	r24, 0x7F	; 127
    1512:	c5 c9       	rjmp	.-3190   	; 0x89e <udd_set_address>
    1514:	08 95       	ret

00001516 <udc_update_iface_desc>:
    1516:	90 91 22 23 	lds	r25, 0x2322	; 0x802322 <udc_num_configuration>
    151a:	99 23       	and	r25, r25
    151c:	81 f1       	breq	.+96     	; 0x157e <udc_update_iface_desc+0x68>
    151e:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <udc_ptr_conf>
    1522:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    1526:	01 90       	ld	r0, Z+
    1528:	f0 81       	ld	r31, Z
    152a:	e0 2d       	mov	r30, r0
    152c:	94 81       	ldd	r25, Z+4	; 0x04
    152e:	89 17       	cp	r24, r25
    1530:	40 f5       	brcc	.+80     	; 0x1582 <udc_update_iface_desc+0x6c>
    1532:	e0 93 1e 23 	sts	0x231E, r30	; 0x80231e <udc_ptr_iface>
    1536:	f0 93 1f 23 	sts	0x231F, r31	; 0x80231f <udc_ptr_iface+0x1>
    153a:	22 81       	ldd	r18, Z+2	; 0x02
    153c:	33 81       	ldd	r19, Z+3	; 0x03
    153e:	2e 0f       	add	r18, r30
    1540:	3f 1f       	adc	r19, r31
    1542:	e2 17       	cp	r30, r18
    1544:	f3 07       	cpc	r31, r19
    1546:	f8 f4       	brcc	.+62     	; 0x1586 <udc_update_iface_desc+0x70>
    1548:	91 81       	ldd	r25, Z+1	; 0x01
    154a:	94 30       	cpi	r25, 0x04	; 4
    154c:	61 f4       	brne	.+24     	; 0x1566 <udc_update_iface_desc+0x50>
    154e:	92 81       	ldd	r25, Z+2	; 0x02
    1550:	98 13       	cpse	r25, r24
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <udc_update_iface_desc+0x50>
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	96 13       	cpse	r25, r22
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <udc_update_iface_desc+0x50>
    155a:	e0 93 1e 23 	sts	0x231E, r30	; 0x80231e <udc_ptr_iface>
    155e:	f0 93 1f 23 	sts	0x231F, r31	; 0x80231f <udc_ptr_iface+0x1>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	08 95       	ret
    1566:	90 81       	ld	r25, Z
    1568:	e9 0f       	add	r30, r25
    156a:	f1 1d       	adc	r31, r1
    156c:	e2 17       	cp	r30, r18
    156e:	f3 07       	cpc	r31, r19
    1570:	58 f3       	brcs	.-42     	; 0x1548 <udc_update_iface_desc+0x32>
    1572:	e0 93 1e 23 	sts	0x231E, r30	; 0x80231e <udc_ptr_iface>
    1576:	f0 93 1f 23 	sts	0x231F, r31	; 0x80231f <udc_ptr_iface+0x1>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	08 95       	ret
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	08 95       	ret
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	08 95       	ret
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	08 95       	ret

0000158a <udc_iface_disable>:
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	c8 2f       	mov	r28, r24
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	be df       	rcall	.-132    	; 0x1516 <udc_update_iface_desc>
    159a:	18 2f       	mov	r17, r24
    159c:	88 23       	and	r24, r24
    159e:	79 f1       	breq	.+94     	; 0x15fe <udc_iface_disable+0x74>
    15a0:	a0 91 20 23 	lds	r26, 0x2320	; 0x802320 <udc_ptr_conf>
    15a4:	b0 91 21 23 	lds	r27, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    15a8:	ec 2f       	mov	r30, r28
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	ee 0f       	add	r30, r30
    15ae:	ff 1f       	adc	r31, r31
    15b0:	12 96       	adiw	r26, 0x02	; 2
    15b2:	8d 91       	ld	r24, X+
    15b4:	9c 91       	ld	r25, X
    15b6:	13 97       	sbiw	r26, 0x03	; 3
    15b8:	e8 0f       	add	r30, r24
    15ba:	f9 1f       	adc	r31, r25
    15bc:	e0 80       	ld	r14, Z
    15be:	f1 80       	ldd	r15, Z+1	; 0x01
    15c0:	d7 01       	movw	r26, r14
    15c2:	16 96       	adiw	r26, 0x06	; 6
    15c4:	ed 91       	ld	r30, X+
    15c6:	fc 91       	ld	r31, X
    15c8:	17 97       	sbiw	r26, 0x07	; 7
    15ca:	19 95       	eicall
    15cc:	68 2f       	mov	r22, r24
    15ce:	8c 2f       	mov	r24, r28
    15d0:	a2 df       	rcall	.-188    	; 0x1516 <udc_update_iface_desc>
    15d2:	18 2f       	mov	r17, r24
    15d4:	88 23       	and	r24, r24
    15d6:	99 f0       	breq	.+38     	; 0x15fe <udc_iface_disable+0x74>
    15d8:	c0 91 1e 23 	lds	r28, 0x231E	; 0x80231e <udc_ptr_iface>
    15dc:	d0 91 1f 23 	lds	r29, 0x231F	; 0x80231f <udc_ptr_iface+0x1>
    15e0:	65 e0       	ldi	r22, 0x05	; 5
    15e2:	ce 01       	movw	r24, r28
    15e4:	61 df       	rcall	.-318    	; 0x14a8 <udc_next_desc_in_iface>
    15e6:	ec 01       	movw	r28, r24
    15e8:	89 2b       	or	r24, r25
    15ea:	19 f0       	breq	.+6      	; 0x15f2 <udc_iface_disable+0x68>
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	57 db       	rcall	.-2386   	; 0xc9e <udd_ep_free>
    15f0:	f7 cf       	rjmp	.-18     	; 0x15e0 <udc_iface_disable+0x56>
    15f2:	d7 01       	movw	r26, r14
    15f4:	12 96       	adiw	r26, 0x02	; 2
    15f6:	ed 91       	ld	r30, X+
    15f8:	fc 91       	ld	r31, X
    15fa:	13 97       	sbiw	r26, 0x03	; 3
    15fc:	19 95       	eicall
    15fe:	81 2f       	mov	r24, r17
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	08 95       	ret

0000160c <udc_iface_enable>:
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	18 2f       	mov	r17, r24
    1614:	80 df       	rcall	.-256    	; 0x1516 <udc_update_iface_desc>
    1616:	88 23       	and	r24, r24
    1618:	39 f1       	breq	.+78     	; 0x1668 <udc_iface_enable+0x5c>
    161a:	c0 91 1e 23 	lds	r28, 0x231E	; 0x80231e <udc_ptr_iface>
    161e:	d0 91 1f 23 	lds	r29, 0x231F	; 0x80231f <udc_ptr_iface+0x1>
    1622:	65 e0       	ldi	r22, 0x05	; 5
    1624:	ce 01       	movw	r24, r28
    1626:	40 df       	rcall	.-384    	; 0x14a8 <udc_next_desc_in_iface>
    1628:	ec 01       	movw	r28, r24
    162a:	89 2b       	or	r24, r25
    162c:	41 f0       	breq	.+16     	; 0x163e <udc_iface_enable+0x32>
    162e:	4c 81       	ldd	r20, Y+4	; 0x04
    1630:	5d 81       	ldd	r21, Y+5	; 0x05
    1632:	6b 81       	ldd	r22, Y+3	; 0x03
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	48 d9       	rcall	.-3440   	; 0x8c8 <udd_ep_alloc>
    1638:	81 11       	cpse	r24, r1
    163a:	f3 cf       	rjmp	.-26     	; 0x1622 <udc_iface_enable+0x16>
    163c:	15 c0       	rjmp	.+42     	; 0x1668 <udc_iface_enable+0x5c>
    163e:	a0 91 20 23 	lds	r26, 0x2320	; 0x802320 <udc_ptr_conf>
    1642:	b0 91 21 23 	lds	r27, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    1646:	e1 2f       	mov	r30, r17
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	12 96       	adiw	r26, 0x02	; 2
    1650:	8d 91       	ld	r24, X+
    1652:	9c 91       	ld	r25, X
    1654:	13 97       	sbiw	r26, 0x03	; 3
    1656:	e8 0f       	add	r30, r24
    1658:	f9 1f       	adc	r31, r25
    165a:	01 90       	ld	r0, Z+
    165c:	f0 81       	ld	r31, Z
    165e:	e0 2d       	mov	r30, r0
    1660:	01 90       	ld	r0, Z+
    1662:	f0 81       	ld	r31, Z
    1664:	e0 2d       	mov	r30, r0
    1666:	19 95       	eicall
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	08 95       	ret

00001670 <udc_reset>:
    1670:	cf 93       	push	r28
    1672:	80 91 22 23 	lds	r24, 0x2322	; 0x802322 <udc_num_configuration>
    1676:	88 23       	and	r24, r24
    1678:	c1 f0       	breq	.+48     	; 0x16aa <udc_reset+0x3a>
    167a:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <udc_ptr_conf>
    167e:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    1682:	01 90       	ld	r0, Z+
    1684:	f0 81       	ld	r31, Z
    1686:	e0 2d       	mov	r30, r0
    1688:	84 81       	ldd	r24, Z+4	; 0x04
    168a:	88 23       	and	r24, r24
    168c:	71 f0       	breq	.+28     	; 0x16aa <udc_reset+0x3a>
    168e:	c0 e0       	ldi	r28, 0x00	; 0
    1690:	8c 2f       	mov	r24, r28
    1692:	7b df       	rcall	.-266    	; 0x158a <udc_iface_disable>
    1694:	cf 5f       	subi	r28, 0xFF	; 255
    1696:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <udc_ptr_conf>
    169a:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    169e:	01 90       	ld	r0, Z+
    16a0:	f0 81       	ld	r31, Z
    16a2:	e0 2d       	mov	r30, r0
    16a4:	84 81       	ldd	r24, Z+4	; 0x04
    16a6:	c8 17       	cp	r28, r24
    16a8:	98 f3       	brcs	.-26     	; 0x1690 <udc_reset+0x20>
    16aa:	10 92 22 23 	sts	0x2322, r1	; 0x802322 <udc_num_configuration>
    16ae:	10 92 26 23 	sts	0x2326, r1	; 0x802326 <udc_device_status>
    16b2:	10 92 27 23 	sts	0x2327, r1	; 0x802327 <udc_device_status+0x1>
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    16ba:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    16bc:	80 91 22 23 	lds	r24, 0x2322	; 0x802322 <udc_num_configuration>
    16c0:	88 23       	and	r24, r24
    16c2:	49 f1       	breq	.+82     	; 0x1716 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    16c4:	a0 91 20 23 	lds	r26, 0x2320	; 0x802320 <udc_ptr_conf>
    16c8:	b0 91 21 23 	lds	r27, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    16cc:	ed 91       	ld	r30, X+
    16ce:	fc 91       	ld	r31, X
    16d0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    16d2:	84 81       	ldd	r24, Z+4	; 0x04
    16d4:	88 23       	and	r24, r24
    16d6:	f9 f0       	breq	.+62     	; 0x1716 <udc_sof_notify+0x5c>
    16d8:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    16da:	ec 2f       	mov	r30, r28
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	12 96       	adiw	r26, 0x02	; 2
    16e4:	8d 91       	ld	r24, X+
    16e6:	9c 91       	ld	r25, X
    16e8:	13 97       	sbiw	r26, 0x03	; 3
    16ea:	e8 0f       	add	r30, r24
    16ec:	f9 1f       	adc	r31, r25
    16ee:	01 90       	ld	r0, Z+
    16f0:	f0 81       	ld	r31, Z
    16f2:	e0 2d       	mov	r30, r0
    16f4:	00 84       	ldd	r0, Z+8	; 0x08
    16f6:	f1 85       	ldd	r31, Z+9	; 0x09
    16f8:	e0 2d       	mov	r30, r0
    16fa:	30 97       	sbiw	r30, 0x00	; 0
    16fc:	09 f0       	breq	.+2      	; 0x1700 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    16fe:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1700:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1702:	a0 91 20 23 	lds	r26, 0x2320	; 0x802320 <udc_ptr_conf>
    1706:	b0 91 21 23 	lds	r27, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    170a:	ed 91       	ld	r30, X+
    170c:	fc 91       	ld	r31, X
    170e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1710:	84 81       	ldd	r24, Z+4	; 0x04
    1712:	c8 17       	cp	r28, r24
    1714:	10 f3       	brcs	.-60     	; 0x16da <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1722:	e8 e2       	ldi	r30, 0x28	; 40
    1724:	f3 e2       	ldi	r31, 0x23	; 35
    1726:	12 86       	std	Z+10, r1	; 0x0a
    1728:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    172a:	14 86       	std	Z+12, r1	; 0x0c
    172c:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    172e:	16 86       	std	Z+14, r1	; 0x0e
    1730:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1732:	80 81       	ld	r24, Z
    1734:	88 23       	and	r24, r24
    1736:	0c f0       	brlt	.+2      	; 0x173a <udc_process_setup+0x20>
    1738:	67 c2       	rjmp	.+1230   	; 0x1c08 <udc_process_setup+0x4ee>
		if (udd_g_ctrlreq.req.wLength == 0) {
    173a:	20 91 2e 23 	lds	r18, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    173e:	30 91 2f 23 	lds	r19, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    1742:	21 15       	cp	r18, r1
    1744:	31 05       	cpc	r19, r1
    1746:	09 f0       	breq	.+2      	; 0x174a <udc_process_setup+0x30>
    1748:	5a c2       	rjmp	.+1204   	; 0x1bfe <udc_process_setup+0x4e4>
    174a:	55 c2       	rjmp	.+1194   	; 0x1bf6 <udc_process_setup+0x4dc>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    174c:	8f 71       	andi	r24, 0x1F	; 31
    174e:	09 f0       	breq	.+2      	; 0x1752 <udc_process_setup+0x38>
    1750:	a7 c0       	rjmp	.+334    	; 0x18a0 <udc_process_setup+0x186>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1752:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    1756:	96 30       	cpi	r25, 0x06	; 6
    1758:	79 f0       	breq	.+30     	; 0x1778 <udc_process_setup+0x5e>
    175a:	98 30       	cpi	r25, 0x08	; 8
    175c:	09 f4       	brne	.+2      	; 0x1760 <udc_process_setup+0x46>
    175e:	96 c0       	rjmp	.+300    	; 0x188c <udc_process_setup+0x172>
    1760:	91 11       	cpse	r25, r1
    1762:	9e c0       	rjmp	.+316    	; 0x18a0 <udc_process_setup+0x186>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	09 f0       	breq	.+2      	; 0x176c <udc_process_setup+0x52>
    176a:	ce c1       	rjmp	.+924    	; 0x1b08 <udc_process_setup+0x3ee>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    176c:	62 e0       	ldi	r22, 0x02	; 2
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	86 e2       	ldi	r24, 0x26	; 38
    1772:	93 e2       	ldi	r25, 0x23	; 35
    1774:	a2 d8       	rcall	.-3772   	; 0x8ba <udd_set_setup_payload>
    1776:	51 c2       	rjmp	.+1186   	; 0x1c1a <udc_process_setup+0x500>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1778:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    177c:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1780:	29 2f       	mov	r18, r25
    1782:	33 27       	eor	r19, r19
    1784:	22 30       	cpi	r18, 0x02	; 2
    1786:	31 05       	cpc	r19, r1
    1788:	a9 f0       	breq	.+42     	; 0x17b4 <udc_process_setup+0x9a>
    178a:	24 f4       	brge	.+8      	; 0x1794 <udc_process_setup+0x7a>
    178c:	21 30       	cpi	r18, 0x01	; 1
    178e:	31 05       	cpc	r19, r1
    1790:	41 f0       	breq	.+16     	; 0x17a2 <udc_process_setup+0x88>
    1792:	b1 c1       	rjmp	.+866    	; 0x1af6 <udc_process_setup+0x3dc>
    1794:	23 30       	cpi	r18, 0x03	; 3
    1796:	31 05       	cpc	r19, r1
    1798:	d9 f1       	breq	.+118    	; 0x1810 <udc_process_setup+0xf6>
    179a:	2f 30       	cpi	r18, 0x0F	; 15
    179c:	31 05       	cpc	r19, r1
    179e:	51 f1       	breq	.+84     	; 0x17f4 <udc_process_setup+0xda>
    17a0:	aa c1       	rjmp	.+852    	; 0x1af6 <udc_process_setup+0x3dc>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    17a2:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config>
    17a6:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    17aa:	dc 01       	movw	r26, r24
    17ac:	6c 91       	ld	r22, X
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	84 d8       	rcall	.-3832   	; 0x8ba <udd_set_setup_payload>
    17b2:	5d c0       	rjmp	.+186    	; 0x186e <udc_process_setup+0x154>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    17b4:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    17b8:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
    17bc:	21 89       	ldd	r18, Z+17	; 0x11
    17be:	82 17       	cp	r24, r18
    17c0:	08 f0       	brcs	.+2      	; 0x17c4 <udc_process_setup+0xaa>
    17c2:	a2 c1       	rjmp	.+836    	; 0x1b08 <udc_process_setup+0x3ee>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    17c4:	99 27       	eor	r25, r25
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    17d2:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    17d6:	e8 0f       	add	r30, r24
    17d8:	f9 1f       	adc	r31, r25
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    17de:	fc 01       	movw	r30, r24
    17e0:	62 81       	ldd	r22, Z+2	; 0x02
    17e2:	73 81       	ldd	r23, Z+3	; 0x03
    17e4:	6a d8       	rcall	.-3884   	; 0x8ba <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    17e6:	e0 91 30 23 	lds	r30, 0x2330	; 0x802330 <udd_g_ctrlreq+0x8>
    17ea:	f0 91 31 23 	lds	r31, 0x2331	; 0x802331 <udd_g_ctrlreq+0x9>
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	81 83       	std	Z+1, r24	; 0x01
    17f2:	3d c0       	rjmp	.+122    	; 0x186e <udc_process_setup+0x154>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    17f4:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <udc_config+0x4>
    17f8:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <udc_config+0x5>
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	09 f4       	brne	.+2      	; 0x1802 <udc_process_setup+0xe8>
    1800:	83 c1       	rjmp	.+774    	; 0x1b08 <udc_process_setup+0x3ee>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1802:	dc 01       	movw	r26, r24
    1804:	12 96       	adiw	r26, 0x02	; 2
    1806:	6d 91       	ld	r22, X+
    1808:	7c 91       	ld	r23, X
    180a:	13 97       	sbiw	r26, 0x03	; 3
    180c:	56 d8       	rcall	.-3924   	; 0x8ba <udd_set_setup_payload>
    180e:	2f c0       	rjmp	.+94     	; 0x186e <udc_process_setup+0x154>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1810:	99 27       	eor	r25, r25
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	91 05       	cpc	r25, r1
    1816:	91 f0       	breq	.+36     	; 0x183c <udc_process_setup+0x122>
    1818:	58 f0       	brcs	.+22     	; 0x1830 <udc_process_setup+0x116>
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	91 05       	cpc	r25, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <udc_process_setup+0x108>
    1820:	f8 c1       	rjmp	.+1008   	; 0x1c12 <udc_process_setup+0x4f8>
    1822:	03 97       	sbiw	r24, 0x03	; 3
    1824:	09 f0       	breq	.+2      	; 0x1828 <udc_process_setup+0x10e>
    1826:	70 c1       	rjmp	.+736    	; 0x1b08 <udc_process_setup+0x3ee>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1828:	26 e0       	ldi	r18, 0x06	; 6
		str = udc_get_string_serial_name();
    182a:	8e eb       	ldi	r24, 0xBE	; 190
    182c:	90 e2       	ldi	r25, 0x20	; 32
    182e:	09 c0       	rjmp	.+18     	; 0x1842 <udc_process_setup+0x128>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1830:	64 e0       	ldi	r22, 0x04	; 4
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	8a eb       	ldi	r24, 0xBA	; 186
    1836:	90 e2       	ldi	r25, 0x20	; 32
    1838:	40 d8       	rcall	.-3968   	; 0x8ba <udd_set_setup_payload>
    183a:	19 c0       	rjmp	.+50     	; 0x186e <udc_process_setup+0x154>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    183c:	89 ea       	ldi	r24, 0xA9	; 169
    183e:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1840:	20 e1       	ldi	r18, 0x10	; 16
    1842:	38 2f       	mov	r19, r24
    1844:	aa e7       	ldi	r26, 0x7A	; 122
    1846:	b0 e2       	ldi	r27, 0x20	; 32
    1848:	e8 2f       	mov	r30, r24
    184a:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    184c:	81 91       	ld	r24, Z+
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	8d 93       	st	X+, r24
    1852:	9d 93       	st	X+, r25
    1854:	8e 2f       	mov	r24, r30
    1856:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1858:	82 17       	cp	r24, r18
    185a:	c0 f3       	brcs	.-16     	; 0x184c <udc_process_setup+0x132>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    185c:	62 2f       	mov	r22, r18
    185e:	66 0f       	add	r22, r22
    1860:	6e 5f       	subi	r22, 0xFE	; 254
    1862:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <udc_string_desc>
		udd_set_setup_payload(
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	88 e7       	ldi	r24, 0x78	; 120
    186a:	90 e2       	ldi	r25, 0x20	; 32
    186c:	26 d8       	rcall	.-4020   	; 0x8ba <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    186e:	e8 e2       	ldi	r30, 0x28	; 40
    1870:	f3 e2       	ldi	r31, 0x23	; 35
    1872:	86 81       	ldd	r24, Z+6	; 0x06
    1874:	97 81       	ldd	r25, Z+7	; 0x07
    1876:	22 85       	ldd	r18, Z+10	; 0x0a
    1878:	33 85       	ldd	r19, Z+11	; 0x0b
    187a:	82 17       	cp	r24, r18
    187c:	93 07       	cpc	r25, r19
    187e:	08 f0       	brcs	.+2      	; 0x1882 <udc_process_setup+0x168>
    1880:	cc c1       	rjmp	.+920    	; 0x1c1a <udc_process_setup+0x500>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1882:	80 93 32 23 	sts	0x2332, r24	; 0x802332 <udd_g_ctrlreq+0xa>
    1886:	90 93 33 23 	sts	0x2333, r25	; 0x802333 <udd_g_ctrlreq+0xb>
    188a:	c7 c1       	rjmp	.+910    	; 0x1c1a <udc_process_setup+0x500>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    188c:	21 30       	cpi	r18, 0x01	; 1
    188e:	31 05       	cpc	r19, r1
    1890:	09 f0       	breq	.+2      	; 0x1894 <udc_process_setup+0x17a>
    1892:	3a c1       	rjmp	.+628    	; 0x1b08 <udc_process_setup+0x3ee>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	82 e2       	ldi	r24, 0x22	; 34
    189a:	93 e2       	ldi	r25, 0x23	; 35
    189c:	0e d8       	rcall	.-4068   	; 0x8ba <udd_set_setup_payload>
    189e:	bd c1       	rjmp	.+890    	; 0x1c1a <udc_process_setup+0x500>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	e9 f5       	brne	.+122    	; 0x191e <udc_process_setup+0x204>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    18a4:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    18a8:	9a 30       	cpi	r25, 0x0A	; 10
    18aa:	c9 f5       	brne	.+114    	; 0x191e <udc_process_setup+0x204>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    18ac:	21 30       	cpi	r18, 0x01	; 1
    18ae:	31 05       	cpc	r19, r1
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <udc_process_setup+0x19a>
    18b2:	2a c1       	rjmp	.+596    	; 0x1b08 <udc_process_setup+0x3ee>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    18b4:	80 91 22 23 	lds	r24, 0x2322	; 0x802322 <udc_num_configuration>
    18b8:	88 23       	and	r24, r24
    18ba:	09 f4       	brne	.+2      	; 0x18be <udc_process_setup+0x1a4>
    18bc:	25 c1       	rjmp	.+586    	; 0x1b08 <udc_process_setup+0x3ee>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18be:	c0 91 2c 23 	lds	r28, 0x232C	; 0x80232c <udd_g_ctrlreq+0x4>
    18c2:	d0 91 2d 23 	lds	r29, 0x232D	; 0x80232d <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18c6:	00 91 20 23 	lds	r16, 0x2320	; 0x802320 <udc_ptr_conf>
    18ca:	10 91 21 23 	lds	r17, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    18ce:	d8 01       	movw	r26, r16
    18d0:	ed 91       	ld	r30, X+
    18d2:	fc 91       	ld	r31, X
    18d4:	84 81       	ldd	r24, Z+4	; 0x04
    18d6:	c8 17       	cp	r28, r24
    18d8:	08 f0       	brcs	.+2      	; 0x18dc <udc_process_setup+0x1c2>
    18da:	16 c1       	rjmp	.+556    	; 0x1b08 <udc_process_setup+0x3ee>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	8c 2f       	mov	r24, r28
    18e0:	1a de       	rcall	.-972    	; 0x1516 <udc_update_iface_desc>
    18e2:	88 23       	and	r24, r24
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <udc_process_setup+0x1ce>
    18e6:	10 c1       	rjmp	.+544    	; 0x1b08 <udc_process_setup+0x3ee>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    18e8:	ce 01       	movw	r24, r28
    18ea:	99 27       	eor	r25, r25
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	d8 01       	movw	r26, r16
    18f2:	12 96       	adiw	r26, 0x02	; 2
    18f4:	ed 91       	ld	r30, X+
    18f6:	fc 91       	ld	r31, X
    18f8:	13 97       	sbiw	r26, 0x03	; 3
    18fa:	e8 0f       	add	r30, r24
    18fc:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    18fe:	01 90       	ld	r0, Z+
    1900:	f0 81       	ld	r31, Z
    1902:	e0 2d       	mov	r30, r0
    1904:	86 81       	ldd	r24, Z+6	; 0x06
    1906:	97 81       	ldd	r25, Z+7	; 0x07
    1908:	fc 01       	movw	r30, r24
    190a:	19 95       	eicall
    190c:	80 93 24 23 	sts	0x2324, r24	; 0x802324 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	84 e2       	ldi	r24, 0x24	; 36
    1916:	93 e2       	ldi	r25, 0x23	; 35
    1918:	0e 94 5d 04 	call	0x8ba	; 0x8ba <udd_set_setup_payload>
    191c:	7e c1       	rjmp	.+764    	; 0x1c1a <udc_process_setup+0x500>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    191e:	82 30       	cpi	r24, 0x02	; 2
    1920:	09 f0       	breq	.+2      	; 0x1924 <udc_process_setup+0x20a>
    1922:	f2 c0       	rjmp	.+484    	; 0x1b08 <udc_process_setup+0x3ee>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1924:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    1928:	81 11       	cpse	r24, r1
    192a:	e7 c0       	rjmp	.+462    	; 0x1afa <udc_process_setup+0x3e0>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    192c:	22 30       	cpi	r18, 0x02	; 2
    192e:	31 05       	cpc	r19, r1
    1930:	09 f0       	breq	.+2      	; 0x1934 <udc_process_setup+0x21a>
    1932:	ea c0       	rjmp	.+468    	; 0x1b08 <udc_process_setup+0x3ee>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1934:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udd_g_ctrlreq+0x4>
    1938:	4f d8       	rcall	.-3938   	; 0x9d8 <udd_ep_is_halted>
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	80 93 1c 23 	sts	0x231C, r24	; 0x80231c <udc_ep_status.4659>
    1940:	90 93 1d 23 	sts	0x231D, r25	; 0x80231d <udc_ep_status.4659+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1944:	62 e0       	ldi	r22, 0x02	; 2
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	8c e1       	ldi	r24, 0x1C	; 28
    194a:	93 e2       	ldi	r25, 0x23	; 35
    194c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <udd_set_setup_payload>
    1950:	64 c1       	rjmp	.+712    	; 0x1c1a <udc_process_setup+0x500>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1952:	8f 71       	andi	r24, 0x1F	; 31
    1954:	09 f0       	breq	.+2      	; 0x1958 <udc_process_setup+0x23e>
    1956:	84 c0       	rjmp	.+264    	; 0x1a60 <udc_process_setup+0x346>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1958:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    195c:	93 30       	cpi	r25, 0x03	; 3
    195e:	09 f4       	brne	.+2      	; 0x1962 <udc_process_setup+0x248>
    1960:	ce c0       	rjmp	.+412    	; 0x1afe <udc_process_setup+0x3e4>
    1962:	18 f4       	brcc	.+6      	; 0x196a <udc_process_setup+0x250>
    1964:	91 30       	cpi	r25, 0x01	; 1
    1966:	a1 f0       	breq	.+40     	; 0x1990 <udc_process_setup+0x276>
    1968:	7b c0       	rjmp	.+246    	; 0x1a60 <udc_process_setup+0x346>
    196a:	95 30       	cpi	r25, 0x05	; 5
    196c:	19 f0       	breq	.+6      	; 0x1974 <udc_process_setup+0x25a>
    196e:	99 30       	cpi	r25, 0x09	; 9
    1970:	39 f1       	breq	.+78     	; 0x19c0 <udc_process_setup+0x2a6>
    1972:	76 c0       	rjmp	.+236    	; 0x1a60 <udc_process_setup+0x346>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1974:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    1978:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    197c:	89 2b       	or	r24, r25
    197e:	09 f0       	breq	.+2      	; 0x1982 <udc_process_setup+0x268>
    1980:	c3 c0       	rjmp	.+390    	; 0x1b08 <udc_process_setup+0x3ee>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1982:	86 e8       	ldi	r24, 0x86	; 134
    1984:	9a e0       	ldi	r25, 0x0A	; 10
    1986:	80 93 34 23 	sts	0x2334, r24	; 0x802334 <udd_g_ctrlreq+0xc>
    198a:	90 93 35 23 	sts	0x2335, r25	; 0x802335 <udd_g_ctrlreq+0xd>
    198e:	45 c1       	rjmp	.+650    	; 0x1c1a <udc_process_setup+0x500>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1990:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    1994:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    1998:	89 2b       	or	r24, r25
    199a:	09 f0       	breq	.+2      	; 0x199e <udc_process_setup+0x284>
    199c:	b5 c0       	rjmp	.+362    	; 0x1b08 <udc_process_setup+0x3ee>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    199e:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    19a2:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	09 f0       	breq	.+2      	; 0x19ac <udc_process_setup+0x292>
    19aa:	ae c0       	rjmp	.+348    	; 0x1b08 <udc_process_setup+0x3ee>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    19ac:	80 91 26 23 	lds	r24, 0x2326	; 0x802326 <udc_device_status>
    19b0:	90 91 27 23 	lds	r25, 0x2327	; 0x802327 <udc_device_status+0x1>
    19b4:	8d 7f       	andi	r24, 0xFD	; 253
    19b6:	80 93 26 23 	sts	0x2326, r24	; 0x802326 <udc_device_status>
    19ba:	90 93 27 23 	sts	0x2327, r25	; 0x802327 <udc_device_status+0x1>
    19be:	2d c1       	rjmp	.+602    	; 0x1c1a <udc_process_setup+0x500>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    19c0:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    19c4:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    19c8:	89 2b       	or	r24, r25
    19ca:	09 f0       	breq	.+2      	; 0x19ce <udc_process_setup+0x2b4>
    19cc:	9d c0       	rjmp	.+314    	; 0x1b08 <udc_process_setup+0x3ee>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    19ce:	0e 94 52 04 	call	0x8a4	; 0x8a4 <udd_getaddress>
    19d2:	88 23       	and	r24, r24
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <udc_process_setup+0x2be>
    19d6:	98 c0       	rjmp	.+304    	; 0x1b08 <udc_process_setup+0x3ee>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    19d8:	20 91 2a 23 	lds	r18, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    19dc:	30 91 2b 23 	lds	r19, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>
    19e0:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    19e2:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    19e6:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    19ea:	81 89       	ldd	r24, Z+17	; 0x11
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	82 17       	cp	r24, r18
    19f0:	93 07       	cpc	r25, r19
    19f2:	08 f4       	brcc	.+2      	; 0x19f6 <udc_process_setup+0x2dc>
    19f4:	89 c0       	rjmp	.+274    	; 0x1b08 <udc_process_setup+0x3ee>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    19f6:	3c de       	rcall	.-904    	; 0x1670 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    19f8:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    19fc:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>
    1a00:	80 93 22 23 	sts	0x2322, r24	; 0x802322 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1a04:	88 23       	and	r24, r24
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <udc_process_setup+0x2f0>
    1a08:	08 c1       	rjmp	.+528    	; 0x1c1a <udc_process_setup+0x500>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1a0a:	99 27       	eor	r25, r25
    1a0c:	81 50       	subi	r24, 0x01	; 1
    1a0e:	90 4c       	sbci	r25, 0xC0	; 192
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    1a1c:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    1a20:	e8 0f       	add	r30, r24
    1a22:	f9 1f       	adc	r31, r25
    1a24:	e0 93 20 23 	sts	0x2320, r30	; 0x802320 <udc_ptr_conf>
    1a28:	f0 93 21 23 	sts	0x2321, r31	; 0x802321 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a2c:	01 90       	ld	r0, Z+
    1a2e:	f0 81       	ld	r31, Z
    1a30:	e0 2d       	mov	r30, r0
    1a32:	84 81       	ldd	r24, Z+4	; 0x04
    1a34:	88 23       	and	r24, r24
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <udc_process_setup+0x320>
    1a38:	f0 c0       	rjmp	.+480    	; 0x1c1a <udc_process_setup+0x500>
    1a3a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	8c 2f       	mov	r24, r28
    1a40:	e5 dd       	rcall	.-1078   	; 0x160c <udc_iface_enable>
    1a42:	88 23       	and	r24, r24
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <udc_process_setup+0x32e>
    1a46:	60 c0       	rjmp	.+192    	; 0x1b08 <udc_process_setup+0x3ee>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1a48:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a4a:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <udc_ptr_conf>
    1a4e:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    1a52:	01 90       	ld	r0, Z+
    1a54:	f0 81       	ld	r31, Z
    1a56:	e0 2d       	mov	r30, r0
    1a58:	84 81       	ldd	r24, Z+4	; 0x04
    1a5a:	c8 17       	cp	r28, r24
    1a5c:	78 f3       	brcs	.-34     	; 0x1a3c <udc_process_setup+0x322>
    1a5e:	dd c0       	rjmp	.+442    	; 0x1c1a <udc_process_setup+0x500>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	e1 f4       	brne	.+56     	; 0x1a9c <udc_process_setup+0x382>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a64:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    1a68:	9b 30       	cpi	r25, 0x0B	; 11
    1a6a:	c1 f4       	brne	.+48     	; 0x1a9c <udc_process_setup+0x382>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1a6c:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    1a70:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    1a74:	89 2b       	or	r24, r25
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <udc_process_setup+0x360>
    1a78:	47 c0       	rjmp	.+142    	; 0x1b08 <udc_process_setup+0x3ee>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1a7a:	80 91 22 23 	lds	r24, 0x2322	; 0x802322 <udc_num_configuration>
    1a7e:	88 23       	and	r24, r24
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <udc_process_setup+0x36a>
    1a82:	42 c0       	rjmp	.+132    	; 0x1b08 <udc_process_setup+0x3ee>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a84:	e8 e2       	ldi	r30, 0x28	; 40
    1a86:	f3 e2       	ldi	r31, 0x23	; 35
    1a88:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1a8a:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1a8c:	8c 2f       	mov	r24, r28
    1a8e:	7d dd       	rcall	.-1286   	; 0x158a <udc_iface_disable>
    1a90:	88 23       	and	r24, r24
    1a92:	d1 f1       	breq	.+116    	; 0x1b08 <udc_process_setup+0x3ee>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1a94:	6d 2f       	mov	r22, r29
    1a96:	8c 2f       	mov	r24, r28
    1a98:	b9 dd       	rcall	.-1166   	; 0x160c <udc_iface_enable>
    1a9a:	34 c0       	rjmp	.+104    	; 0x1b04 <udc_process_setup+0x3ea>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1a9c:	82 30       	cpi	r24, 0x02	; 2
    1a9e:	a1 f5       	brne	.+104    	; 0x1b08 <udc_process_setup+0x3ee>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1aa0:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	19 f0       	breq	.+6      	; 0x1aae <udc_process_setup+0x394>
    1aa8:	83 30       	cpi	r24, 0x03	; 3
    1aaa:	91 f0       	breq	.+36     	; 0x1ad0 <udc_process_setup+0x3b6>
    1aac:	2a c0       	rjmp	.+84     	; 0x1b02 <udc_process_setup+0x3e8>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1aae:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    1ab2:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    1ab6:	89 2b       	or	r24, r25
    1ab8:	39 f5       	brne	.+78     	; 0x1b08 <udc_process_setup+0x3ee>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1aba:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    1abe:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>
    1ac2:	89 2b       	or	r24, r25
    1ac4:	09 f5       	brne	.+66     	; 0x1b08 <udc_process_setup+0x3ee>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ac6:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udd_g_ctrlreq+0x4>
    1aca:	0e 94 07 05 	call	0xa0e	; 0xa0e <udd_ep_clear_halt>
    1ace:	1a c0       	rjmp	.+52     	; 0x1b04 <udc_process_setup+0x3ea>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ad0:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    1ad4:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    1ad8:	89 2b       	or	r24, r25
    1ada:	b1 f4       	brne	.+44     	; 0x1b08 <udc_process_setup+0x3ee>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1adc:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    1ae0:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>
    1ae4:	89 2b       	or	r24, r25
    1ae6:	81 f4       	brne	.+32     	; 0x1b08 <udc_process_setup+0x3ee>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ae8:	c8 e2       	ldi	r28, 0x28	; 40
    1aea:	d3 e2       	ldi	r29, 0x23	; 35
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
    1aee:	8e d8       	rcall	.-3812   	; 0xc0c <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	f1 d8       	rcall	.-3614   	; 0xcd6 <udd_ep_set_halt>
    1af4:	07 c0       	rjmp	.+14     	; 0x1b04 <udc_process_setup+0x3ea>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <udc_process_setup+0x3ea>
				break;
			}
		}
#endif
	}
	return false;
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	03 c0       	rjmp	.+6      	; 0x1b04 <udc_process_setup+0x3ea>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <udc_process_setup+0x3ea>
				break;
			}
		}
#endif
	}
	return false;
    1b02:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1b04:	81 11       	cpse	r24, r1
    1b06:	8a c0       	rjmp	.+276    	; 0x1c1c <udc_process_setup+0x502>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1b08:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <udd_g_ctrlreq>
    1b0c:	8f 71       	andi	r24, 0x1F	; 31
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	71 f5       	brne	.+92     	; 0x1b6e <udc_process_setup+0x454>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b12:	80 91 22 23 	lds	r24, 0x2322	; 0x802322 <udc_num_configuration>
    1b16:	88 23       	and	r24, r24
    1b18:	51 f1       	breq	.+84     	; 0x1b6e <udc_process_setup+0x454>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b1a:	00 91 2c 23 	lds	r16, 0x232C	; 0x80232c <udd_g_ctrlreq+0x4>
    1b1e:	10 91 2d 23 	lds	r17, 0x232D	; 0x80232d <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b22:	c0 91 20 23 	lds	r28, 0x2320	; 0x802320 <udc_ptr_conf>
    1b26:	d0 91 21 23 	lds	r29, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    1b2a:	e8 81       	ld	r30, Y
    1b2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b2e:	84 81       	ldd	r24, Z+4	; 0x04
    1b30:	08 17       	cp	r16, r24
    1b32:	e8 f4       	brcc	.+58     	; 0x1b6e <udc_process_setup+0x454>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	80 2f       	mov	r24, r16
    1b38:	ee dc       	rcall	.-1572   	; 0x1516 <udc_update_iface_desc>
    1b3a:	88 23       	and	r24, r24
    1b3c:	c1 f0       	breq	.+48     	; 0x1b6e <udc_process_setup+0x454>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b3e:	f8 01       	movw	r30, r16
    1b40:	ff 27       	eor	r31, r31
    1b42:	cf 01       	movw	r24, r30
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	ea 81       	ldd	r30, Y+2	; 0x02
    1b4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b4c:	e8 0f       	add	r30, r24
    1b4e:	f9 1f       	adc	r31, r25
    1b50:	c0 81       	ld	r28, Z
    1b52:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1b54:	ee 81       	ldd	r30, Y+6	; 0x06
    1b56:	ff 81       	ldd	r31, Y+7	; 0x07
    1b58:	19 95       	eicall
    1b5a:	68 2f       	mov	r22, r24
    1b5c:	80 2f       	mov	r24, r16
    1b5e:	db dc       	rcall	.-1610   	; 0x1516 <udc_update_iface_desc>
    1b60:	88 23       	and	r24, r24
    1b62:	29 f0       	breq	.+10     	; 0x1b6e <udc_process_setup+0x454>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1b64:	ec 81       	ldd	r30, Y+4	; 0x04
    1b66:	fd 81       	ldd	r31, Y+5	; 0x05
    1b68:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1b6a:	81 11       	cpse	r24, r1
    1b6c:	57 c0       	rjmp	.+174    	; 0x1c1c <udc_process_setup+0x502>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1b6e:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <udd_g_ctrlreq>
    1b72:	8f 71       	andi	r24, 0x1F	; 31
    1b74:	82 30       	cpi	r24, 0x02	; 2
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <udc_process_setup+0x460>
    1b78:	40 c0       	rjmp	.+128    	; 0x1bfa <udc_process_setup+0x4e0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b7a:	80 91 22 23 	lds	r24, 0x2322	; 0x802322 <udc_num_configuration>
    1b7e:	88 23       	and	r24, r24
    1b80:	b1 f1       	breq	.+108    	; 0x1bee <udc_process_setup+0x4d4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b82:	a0 91 20 23 	lds	r26, 0x2320	; 0x802320 <udc_ptr_conf>
    1b86:	b0 91 21 23 	lds	r27, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    1b8a:	ed 91       	ld	r30, X+
    1b8c:	fc 91       	ld	r31, X
    1b8e:	11 97       	sbiw	r26, 0x01	; 1
    1b90:	84 81       	ldd	r24, Z+4	; 0x04
    1b92:	88 23       	and	r24, r24
    1b94:	71 f1       	breq	.+92     	; 0x1bf2 <udc_process_setup+0x4d8>
    1b96:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b98:	ec 2f       	mov	r30, r28
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	ee 0f       	add	r30, r30
    1b9e:	ff 1f       	adc	r31, r31
    1ba0:	12 96       	adiw	r26, 0x02	; 2
    1ba2:	8d 91       	ld	r24, X+
    1ba4:	9c 91       	ld	r25, X
    1ba6:	13 97       	sbiw	r26, 0x03	; 3
    1ba8:	e8 0f       	add	r30, r24
    1baa:	f9 1f       	adc	r31, r25
    1bac:	00 81       	ld	r16, Z
    1bae:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1bb0:	d8 01       	movw	r26, r16
    1bb2:	16 96       	adiw	r26, 0x06	; 6
    1bb4:	ed 91       	ld	r30, X+
    1bb6:	fc 91       	ld	r31, X
    1bb8:	17 97       	sbiw	r26, 0x07	; 7
    1bba:	19 95       	eicall
    1bbc:	68 2f       	mov	r22, r24
    1bbe:	8c 2f       	mov	r24, r28
    1bc0:	aa dc       	rcall	.-1708   	; 0x1516 <udc_update_iface_desc>
    1bc2:	88 23       	and	r24, r24
    1bc4:	59 f1       	breq	.+86     	; 0x1c1c <udc_process_setup+0x502>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1bc6:	d8 01       	movw	r26, r16
    1bc8:	14 96       	adiw	r26, 0x04	; 4
    1bca:	ed 91       	ld	r30, X+
    1bcc:	fc 91       	ld	r31, X
    1bce:	15 97       	sbiw	r26, 0x05	; 5
    1bd0:	19 95       	eicall
    1bd2:	81 11       	cpse	r24, r1
    1bd4:	23 c0       	rjmp	.+70     	; 0x1c1c <udc_process_setup+0x502>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1bd6:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1bd8:	a0 91 20 23 	lds	r26, 0x2320	; 0x802320 <udc_ptr_conf>
    1bdc:	b0 91 21 23 	lds	r27, 0x2321	; 0x802321 <udc_ptr_conf+0x1>
    1be0:	ed 91       	ld	r30, X+
    1be2:	fc 91       	ld	r31, X
    1be4:	11 97       	sbiw	r26, 0x01	; 1
    1be6:	94 81       	ldd	r25, Z+4	; 0x04
    1be8:	c9 17       	cp	r28, r25
    1bea:	b0 f2       	brcs	.-84     	; 0x1b98 <udc_process_setup+0x47e>
    1bec:	17 c0       	rjmp	.+46     	; 0x1c1c <udc_process_setup+0x502>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	15 c0       	rjmp	.+42     	; 0x1c1c <udc_process_setup+0x502>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	13 c0       	rjmp	.+38     	; 0x1c1c <udc_process_setup+0x502>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	11 c0       	rjmp	.+34     	; 0x1c1c <udc_process_setup+0x502>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	0f c0       	rjmp	.+30     	; 0x1c1c <udc_process_setup+0x502>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1bfe:	98 2f       	mov	r25, r24
    1c00:	90 76       	andi	r25, 0x60	; 96
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <udc_process_setup+0x4ec>
    1c04:	81 cf       	rjmp	.-254    	; 0x1b08 <udc_process_setup+0x3ee>
    1c06:	a2 cd       	rjmp	.-1212   	; 0x174c <udc_process_setup+0x32>
    1c08:	98 2f       	mov	r25, r24
    1c0a:	90 76       	andi	r25, 0x60	; 96
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <udc_process_setup+0x4f6>
    1c0e:	7c cf       	rjmp	.-264    	; 0x1b08 <udc_process_setup+0x3ee>
    1c10:	a0 ce       	rjmp	.-704    	; 0x1952 <udc_process_setup+0x238>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1c12:	2e e0       	ldi	r18, 0x0E	; 14
		str = udc_string_product_name;
    1c14:	8a e9       	ldi	r24, 0x9A	; 154
    1c16:	90 e2       	ldi	r25, 0x20	; 32
    1c18:	14 ce       	rjmp	.-984    	; 0x1842 <udc_process_setup+0x128>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	08 95       	ret

00001c26 <main>:

int main(void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
    1c26:	01 d0       	rcall	.+2      	; 0x1c2a <board_init>
	/* Insert application code here, after the board has been initialized. */

    /* Replace with your application code */
    while (1) 
    {
    }
    1c28:	ff cf       	rjmp	.-2      	; 0x1c28 <main+0x2>

00001c2a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    1c2a:	08 95       	ret

00001c2c <__udivmodhi4>:
    1c2c:	aa 1b       	sub	r26, r26
    1c2e:	bb 1b       	sub	r27, r27
    1c30:	51 e1       	ldi	r21, 0x11	; 17
    1c32:	07 c0       	rjmp	.+14     	; 0x1c42 <__udivmodhi4_ep>

00001c34 <__udivmodhi4_loop>:
    1c34:	aa 1f       	adc	r26, r26
    1c36:	bb 1f       	adc	r27, r27
    1c38:	a6 17       	cp	r26, r22
    1c3a:	b7 07       	cpc	r27, r23
    1c3c:	10 f0       	brcs	.+4      	; 0x1c42 <__udivmodhi4_ep>
    1c3e:	a6 1b       	sub	r26, r22
    1c40:	b7 0b       	sbc	r27, r23

00001c42 <__udivmodhi4_ep>:
    1c42:	88 1f       	adc	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	5a 95       	dec	r21
    1c48:	a9 f7       	brne	.-22     	; 0x1c34 <__udivmodhi4_loop>
    1c4a:	80 95       	com	r24
    1c4c:	90 95       	com	r25
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	08 95       	ret

00001c54 <__tablejump2__>:
    1c54:	ee 0f       	add	r30, r30
    1c56:	ff 1f       	adc	r31, r31
    1c58:	88 1f       	adc	r24, r24
    1c5a:	8b bf       	out	0x3b, r24	; 59
    1c5c:	07 90       	elpm	r0, Z+
    1c5e:	f6 91       	elpm	r31, Z
    1c60:	e0 2d       	mov	r30, r0
    1c62:	19 94       	eijmp

00001c64 <memcpy>:
    1c64:	fb 01       	movw	r30, r22
    1c66:	dc 01       	movw	r26, r24
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <memcpy+0xa>
    1c6a:	01 90       	ld	r0, Z+
    1c6c:	0d 92       	st	X+, r0
    1c6e:	41 50       	subi	r20, 0x01	; 1
    1c70:	50 40       	sbci	r21, 0x00	; 0
    1c72:	d8 f7       	brcc	.-10     	; 0x1c6a <memcpy+0x6>
    1c74:	08 95       	ret

00001c76 <_exit>:
    1c76:	f8 94       	cli

00001c78 <__stop_program>:
    1c78:	ff cf       	rjmp	.-2      	; 0x1c78 <__stop_program>
