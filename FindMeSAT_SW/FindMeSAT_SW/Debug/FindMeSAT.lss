
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00802000  00004a68  00004afc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000319  00802128  00802128  00004c24  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004c24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00004c54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008a0  00000000  00000000  00004c98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015cd3  00000000  00000000  00005538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000613a  00000000  00000000  0001b20b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000bd1e  00000000  00000000  00021345  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000230c  00000000  00000000  0002d064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003d018  00000000  00000000  0002f370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007660  00000000  00000000  0006c388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e0  00000000  00000000  000739e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004cfc  00000000  00000000  000742c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__vector_11>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__vector_13>
      38:	f4 c6       	rjmp	.+3560   	; 0xe22 <__vector_14>
      3a:	00 00       	nop
      3c:	1f c7       	rjmp	.+3646   	; 0xe7c <__vector_15>
      3e:	00 00       	nop
      40:	4a c7       	rjmp	.+3732   	; 0xed6 <__vector_16>
      42:	00 00       	nop
      44:	75 c7       	rjmp	.+3818   	; 0xf30 <__vector_17>
      46:	00 00       	nop
      48:	a0 c7       	rjmp	.+3904   	; 0xf8a <__vector_18>
      4a:	00 00       	nop
      4c:	cb c7       	rjmp	.+3990   	; 0xfe4 <__vector_19>
      4e:	00 00       	nop
      50:	f6 c7       	rjmp	.+4076   	; 0x103e <__vector_20>
      52:	00 00       	nop
      54:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__vector_21>
      58:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_22>
      5c:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_23>
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	85 c4       	rjmp	.+2314   	; 0x9a8 <__vector_39>
      9e:	00 00       	nop
      a0:	b5 c4       	rjmp	.+2410   	; 0xa0c <__vector_40>
      a2:	00 00       	nop
      a4:	e5 c4       	rjmp	.+2506   	; 0xa70 <__vector_41>
      a6:	00 00       	nop
      a8:	15 c5       	rjmp	.+2602   	; 0xad4 <__vector_42>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__vector_46>
      bc:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__vector_47>
      c0:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__vector_48>
      c4:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__vector_49>
      c8:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_50>
      cc:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__vector_51>
      d0:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__vector_52>
      d4:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__vector_53>
      d8:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__vector_54>
      dc:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__vector_55>
      e0:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__vector_56>
      e4:	ba c0       	rjmp	.+372    	; 0x25a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b6 c0       	rjmp	.+364    	; 0x25a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b4 c0       	rjmp	.+360    	; 0x25a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b2 c0       	rjmp	.+356    	; 0x25a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b0 c0       	rjmp	.+352    	; 0x25a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ae c0       	rjmp	.+348    	; 0x25a <__bad_interrupt>
      fe:	00 00       	nop
     100:	ac c0       	rjmp	.+344    	; 0x25a <__bad_interrupt>
     102:	00 00       	nop
     104:	aa c0       	rjmp	.+340    	; 0x25a <__bad_interrupt>
     106:	00 00       	nop
     108:	a8 c0       	rjmp	.+336    	; 0x25a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a6 c0       	rjmp	.+332    	; 0x25a <__bad_interrupt>
     10e:	00 00       	nop
     110:	a4 c0       	rjmp	.+328    	; 0x25a <__bad_interrupt>
     112:	00 00       	nop
     114:	a2 c0       	rjmp	.+324    	; 0x25a <__bad_interrupt>
     116:	00 00       	nop
     118:	a0 c0       	rjmp	.+320    	; 0x25a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	7d c3       	rjmp	.+1786   	; 0x818 <__vector_71>
     11e:	00 00       	nop
     120:	ad c3       	rjmp	.+1882   	; 0x87c <__vector_72>
     122:	00 00       	nop
     124:	dd c3       	rjmp	.+1978   	; 0x8e0 <__vector_73>
     126:	00 00       	nop
     128:	0d c4       	rjmp	.+2074   	; 0x944 <__vector_74>
     12a:	00 00       	nop
     12c:	96 c0       	rjmp	.+300    	; 0x25a <__bad_interrupt>
     12e:	00 00       	nop
     130:	94 c0       	rjmp	.+296    	; 0x25a <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_77>
     138:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_78>
     13c:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__vector_79>
     140:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__vector_80>
     144:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_81>
     148:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_82>
     14c:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__vector_83>
     150:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__vector_84>
     154:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__vector_85>
     158:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_86>
     15c:	7e c0       	rjmp	.+252    	; 0x25a <__bad_interrupt>
     15e:	00 00       	nop
     160:	7c c0       	rjmp	.+248    	; 0x25a <__bad_interrupt>
     162:	00 00       	nop
     164:	7a c0       	rjmp	.+244    	; 0x25a <__bad_interrupt>
     166:	00 00       	nop
     168:	78 c0       	rjmp	.+240    	; 0x25a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	76 c0       	rjmp	.+236    	; 0x25a <__bad_interrupt>
     16e:	00 00       	nop
     170:	74 c0       	rjmp	.+232    	; 0x25a <__bad_interrupt>
     172:	00 00       	nop
     174:	72 c0       	rjmp	.+228    	; 0x25a <__bad_interrupt>
     176:	00 00       	nop
     178:	70 c0       	rjmp	.+224    	; 0x25a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6e c0       	rjmp	.+220    	; 0x25a <__bad_interrupt>
     17e:	00 00       	nop
     180:	6c c0       	rjmp	.+216    	; 0x25a <__bad_interrupt>
     182:	00 00       	nop
     184:	6a c0       	rjmp	.+212    	; 0x25a <__bad_interrupt>
     186:	00 00       	nop
     188:	68 c0       	rjmp	.+208    	; 0x25a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	66 c0       	rjmp	.+204    	; 0x25a <__bad_interrupt>
     18e:	00 00       	nop
     190:	64 c0       	rjmp	.+200    	; 0x25a <__bad_interrupt>
     192:	00 00       	nop
     194:	62 c0       	rjmp	.+196    	; 0x25a <__bad_interrupt>
     196:	00 00       	nop
     198:	60 c0       	rjmp	.+192    	; 0x25a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5e c0       	rjmp	.+188    	; 0x25a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5c c0       	rjmp	.+184    	; 0x25a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5a c0       	rjmp	.+180    	; 0x25a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	58 c0       	rjmp	.+176    	; 0x25a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	56 c0       	rjmp	.+172    	; 0x25a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__vector_108>
     1b4:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__vector_109>
     1b8:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__vector_110>
     1bc:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_111>
     1c0:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__vector_112>
     1c4:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__vector_113>
     1c8:	48 c0       	rjmp	.+144    	; 0x25a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	46 c0       	rjmp	.+140    	; 0x25a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	44 c0       	rjmp	.+136    	; 0x25a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	42 c0       	rjmp	.+132    	; 0x25a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3c c0       	rjmp	.+120    	; 0x25a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3a c0       	rjmp	.+116    	; 0x25a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	36 c0       	rjmp	.+108    	; 0x25a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__vector_125>
     1f8:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__vector_126>
     1fc:	40 10       	cpse	r4, r0
     1fe:	43 10       	cpse	r4, r3
     200:	46 10       	cpse	r4, r6
     202:	49 10       	cpse	r4, r9
     204:	4c 10       	cpse	r4, r12
     206:	4f 10       	cpse	r4, r15
     208:	52 10       	cpse	r5, r2
     20a:	91 17       	cp	r25, r17
     20c:	a4 17       	cp	r26, r20
     20e:	b7 17       	cp	r27, r23
     210:	ca 17       	cp	r28, r26
     212:	dd 17       	cp	r29, r29
     214:	f0 17       	cp	r31, r16
     216:	03 18       	sub	r0, r3

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e5       	ldi	r29, 0x5F	; 95
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e8 e6       	ldi	r30, 0x68	; 104
     230:	fa e4       	ldi	r31, 0x4A	; 74
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a8 32       	cpi	r26, 0x28	; 40
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	24 e2       	ldi	r18, 0x24	; 36
     244:	a8 e2       	ldi	r26, 0x28	; 40
     246:	b1 e2       	ldi	r27, 0x21	; 33
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a1 34       	cpi	r26, 0x41	; 65
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <main>
     256:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
     25c:	04 c0       	rjmp	.+8      	; 0x266 <__portable_avr_delay_cycles+0xa>
     25e:	61 50       	subi	r22, 0x01	; 1
     260:	71 09       	sbc	r23, r1
     262:	81 09       	sbc	r24, r1
     264:	91 09       	sbc	r25, r1
     266:	61 15       	cp	r22, r1
     268:	71 05       	cpc	r23, r1
     26a:	81 05       	cpc	r24, r1
     26c:	91 05       	cpc	r25, r1
     26e:	b9 f7       	brne	.-18     	; 0x25e <__portable_avr_delay_cycles+0x2>
     270:	08 95       	ret

00000272 <rtc_get_time>:
     272:	80 e1       	ldi	r24, 0x10	; 16
     274:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     278:	e0 e2       	ldi	r30, 0x20	; 32
     27a:	f4 e0       	ldi	r31, 0x04	; 4
     27c:	81 81       	ldd	r24, Z+1	; 0x01
     27e:	84 fd       	sbrc	r24, 4
     280:	fd cf       	rjmp	.-6      	; 0x27c <rtc_get_time+0xa>
     282:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
     286:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     28a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     28e:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     292:	08 95       	ret

00000294 <rtc_set_callback>:
     294:	80 93 15 24 	sts	0x2415, r24	; 0x802415 <rtc_data>
     298:	90 93 16 24 	sts	0x2416, r25	; 0x802416 <rtc_data+0x1>
     29c:	08 95       	ret

0000029e <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
     2aa:	c0 ef       	ldi	r28, 0xF0	; 240
     2ac:	d0 e0       	ldi	r29, 0x00	; 0
     2ae:	88 81       	ld	r24, Y
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	80 ef       	ldi	r24, 0xF0	; 240
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 4a 23 	call	0x4694	; 0x4694 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
     2be:	88 81       	ld	r24, Y
     2c0:	84 60       	ori	r24, 0x04	; 4
     2c2:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
     2c4:	69 ee       	ldi	r22, 0xE9	; 233
     2c6:	73 e0       	ldi	r23, 0x03	; 3
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	c7 df       	rcall	.-114    	; 0x25c <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
     2ce:	88 81       	ld	r24, Y
     2d0:	88 61       	ori	r24, 0x18	; 24
     2d2:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
     2d4:	e0 ef       	ldi	r30, 0xF0	; 240
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	83 ff       	sbrs	r24, 3
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
     2de:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     2e2:	e0 e2       	ldi	r30, 0x20	; 32
     2e4:	f4 e0       	ldi	r31, 0x04	; 4
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
     2e8:	80 fd       	sbrc	r24, 0
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
     2ec:	e0 e2       	ldi	r30, 0x20	; 32
     2ee:	f4 e0       	ldi	r31, 0x04	; 4
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
     2f4:	dc 01       	movw	r26, r24
     2f6:	80 87       	std	Z+8, r24	; 0x08
     2f8:	91 87       	std	Z+9, r25	; 0x09
     2fa:	a2 87       	std	Z+10, r26	; 0x0a
     2fc:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
     2fe:	14 82       	std	Z+4, r1	; 0x04
     300:	15 82       	std	Z+5, r1	; 0x05
     302:	16 82       	std	Z+6, r1	; 0x06
     304:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     306:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
     308:	80 fd       	sbrc	r24, 0
     30a:	fd cf       	rjmp	.-6      	; 0x306 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
     30c:	e0 e2       	ldi	r30, 0x20	; 32
     30e:	f4 e0       	ldi	r31, 0x04	; 4
     310:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     316:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
     318:	80 fd       	sbrc	r24, 0
     31a:	fd cf       	rjmp	.-6      	; 0x316 <rtc_init+0x78>
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	0b b6       	in	r0, 0x3b	; 59
     32e:	0f 92       	push	r0
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ef 93       	push	r30
     34a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
     34c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
     350:	c0 91 15 24 	lds	r28, 0x2415	; 0x802415 <rtc_data>
     354:	d0 91 16 24 	lds	r29, 0x2416	; 0x802416 <rtc_data+0x1>
     358:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
     35a:	19 f0       	breq	.+6      	; 0x362 <__vector_11+0x40>
     35c:	8a df       	rcall	.-236    	; 0x272 <rtc_get_time>
     35e:	fe 01       	movw	r30, r28
}
     360:	19 95       	eicall
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <__portable_avr_delay_cycles>:
	start_twi_lcd();
}

/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void start_twi_onboard()
{
     38c:	04 c0       	rjmp	.+8      	; 0x396 <__portable_avr_delay_cycles+0xa>
     38e:	61 50       	subi	r22, 0x01	; 1
     390:	71 09       	sbc	r23, r1
     392:	81 09       	sbc	r24, r1
     394:	91 09       	sbc	r25, r1
     396:	61 15       	cp	r22, r1
     398:	71 05       	cpc	r23, r1
     39a:	81 05       	cpc	r24, r1
     39c:	91 05       	cpc	r25, r1
     39e:	b9 f7       	brne	.-18     	; 0x38e <__portable_avr_delay_cycles+0x2>
     3a0:	08 95       	ret

000003a2 <twi_waitUntilReady>:
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	e6 e0       	ldi	r30, 0x06	; 6
     3b2:	f0 e2       	ldi	r31, 0x20	; 32
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	81 83       	std	Z+1, r24	; 0x01
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	84 83       	std	Z+4, r24	; 0x04
     3be:	95 83       	std	Z+5, r25	; 0x05
     3c0:	8f 01       	movw	r16, r30
     3c2:	cc 24       	eor	r12, r12
     3c4:	c3 94       	inc	r12
     3c6:	d1 2c       	mov	r13, r1
     3c8:	0f 2e       	mov	r0, r31
     3ca:	f3 eb       	ldi	r31, 0xB3	; 179
     3cc:	ef 2e       	mov	r14, r31
     3ce:	f2 e2       	ldi	r31, 0x22	; 34
     3d0:	ff 2e       	mov	r15, r31
     3d2:	f0 2d       	mov	r31, r0
     3d4:	f8 01       	movw	r30, r16
     3d6:	c0 86       	std	Z+8, r12	; 0x08
     3d8:	d1 86       	std	Z+9, r13	; 0x09
     3da:	41 e0       	ldi	r20, 0x01	; 1
     3dc:	b8 01       	movw	r22, r16
     3de:	80 e8       	ldi	r24, 0x80	; 128
     3e0:	94 e0       	ldi	r25, 0x04	; 4
     3e2:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
     3e6:	f7 01       	movw	r30, r14
     3e8:	c0 81       	ld	r28, Z
     3ea:	9c 2f       	mov	r25, r28
     3ec:	90 78       	andi	r25, 0x80	; 128
     3ee:	81 11       	cpse	r24, r1
     3f0:	0d c0       	rjmp	.+26     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f2:	91 f0       	breq	.+36     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3f4:	8c 2f       	mov	r24, r28
     3f6:	81 78       	andi	r24, 0x81	; 129
     3f8:	81 38       	cpi	r24, 0x81	; 129
     3fa:	29 f4       	brne	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fc:	65 ef       	ldi	r22, 0xF5	; 245
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	c3 df       	rcall	.-122    	; 0x38c <__portable_avr_delay_cycles>
     406:	c0 fd       	sbrc	r28, 0
     408:	e5 cf       	rjmp	.-54     	; 0x3d4 <twi_waitUntilReady+0x32>
     40a:	0c c0       	rjmp	.+24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     40c:	65 e0       	ldi	r22, 0x05	; 5
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	bb df       	rcall	.-138    	; 0x38c <__portable_avr_delay_cycles>
     416:	de cf       	rjmp	.-68     	; 0x3d4 <twi_waitUntilReady+0x32>
     418:	65 e0       	ldi	r22, 0x05	; 5
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	b5 df       	rcall	.-150    	; 0x38c <__portable_avr_delay_cycles>
     422:	d8 cf       	rjmp	.-80     	; 0x3d4 <twi_waitUntilReady+0x32>
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	df 90       	pop	r13
     430:	cf 90       	pop	r12
     432:	08 95       	ret

00000434 <twi_init>:
     434:	e0 e8       	ldi	r30, 0x80	; 128
     436:	f6 e0       	ldi	r31, 0x06	; 6
     438:	88 e3       	ldi	r24, 0x38	; 56
     43a:	80 8b       	std	Z+16, r24	; 0x10
     43c:	81 8b       	std	Z+17, r24	; 0x11
     43e:	e0 e4       	ldi	r30, 0x40	; 64
     440:	f6 e0       	ldi	r31, 0x06	; 6
     442:	80 8b       	std	Z+16, r24	; 0x10
     444:	81 8b       	std	Z+17, r24	; 0x11
     446:	08 95       	ret

00000448 <start_twi_lcd>:

}

/* TWI2 - LCD Port */
void start_twi_lcd()
{
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
     454:	e6 e0       	ldi	r30, 0x06	; 6
     456:	f0 e2       	ldi	r31, 0x20	; 32
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	84 83       	std	Z+4, r24	; 0x04
     462:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
     464:	80 87       	std	Z+8, r24	; 0x08
     466:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
     468:	41 e0       	ldi	r20, 0x01	; 1
     46a:	bf 01       	movw	r22, r30
     46c:	80 e8       	ldi	r24, 0x80	; 128
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
     474:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <twi2_m_data>
     478:	80 93 da 22 	sts	0x22DA, r24	; 0x8022da <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
     47c:	81 31       	cpi	r24, 0x11	; 17
     47e:	78 f1       	brcs	.+94     	; 0x4de <start_twi_lcd+0x96>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
     480:	c6 e0       	ldi	r28, 0x06	; 6
     482:	d0 e2       	ldi	r29, 0x20	; 32
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
     488:	0f 2e       	mov	r0, r31
     48a:	f3 eb       	ldi	r31, 0xB3	; 179
     48c:	ef 2e       	mov	r14, r31
     48e:	f2 e2       	ldi	r31, 0x22	; 34
     490:	ff 2e       	mov	r15, r31
     492:	f0 2d       	mov	r31, r0
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	f7 01       	movw	r30, r14
     498:	80 83       	st	Z, r24
		twi2_packet.length = 1;
     49a:	01 e0       	ldi	r16, 0x01	; 1
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	08 87       	std	Y+8, r16	; 0x08
     4a0:	19 87       	std	Y+9, r17	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	be 01       	movw	r22, r28
     4a6:	80 e8       	ldi	r24, 0x80	; 128
     4a8:	94 e0       	ldi	r25, 0x04	; 4
     4aa:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     4ae:	65 e0       	ldi	r22, 0x05	; 5
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0

		twi_waitUntilReady();
     4b6:	6a df       	rcall	.-300    	; 0x38c <__portable_avr_delay_cycles>
     4b8:	74 df       	rcall	.-280    	; 0x3a2 <twi_waitUntilReady>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
     4ba:	84 e1       	ldi	r24, 0x14	; 20
     4bc:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = GFX_PIXEL_SET;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	f7 01       	movw	r30, r14
     4c2:	80 83       	st	Z, r24
		twi2_packet.length = 1;
     4c4:	08 87       	std	Y+8, r16	; 0x08
     4c6:	19 87       	std	Y+9, r17	; 0x09
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	be 01       	movw	r22, r28
     4cc:	80 e8       	ldi	r24, 0x80	; 128
     4ce:	94 e0       	ldi	r25, 0x04	; 4
     4d0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     4d4:	65 e0       	ldi	r22, 0x05	; 5
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	57 df       	rcall	.-338    	; 0x38c <__portable_avr_delay_cycles>
	}
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	08 95       	ret

000004ec <twi_start>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     4ec:	60 e4       	ldi	r22, 0x40	; 64
     4ee:	85 e0       	ldi	r24, 0x05	; 5
     4f0:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
#else
#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
     4f4:	6a e1       	ldi	r22, 0x1A	; 26
     4f6:	70 e2       	ldi	r23, 0x20	; 32
     4f8:	80 ea       	ldi	r24, 0xA0	; 160
     4fa:	94 e0       	ldi	r25, 0x04	; 4
     4fc:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
     500:	e0 ea       	ldi	r30, 0xA0	; 160
     502:	f4 e0       	ldi	r31, 0x04	; 4
     504:	81 81       	ldd	r24, Z+1	; 0x01
     506:	88 60       	ori	r24, 0x08	; 8
     508:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     50a:	60 e4       	ldi	r22, 0x40	; 64
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
#else
#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
     512:	61 e1       	ldi	r22, 0x11	; 17
     514:	70 e2       	ldi	r23, 0x20	; 32
     516:	80 e8       	ldi	r24, 0x80	; 128
     518:	94 e0       	ldi	r25, 0x04	; 4
     51a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <twi_master_init>
     51e:	e0 e8       	ldi	r30, 0x80	; 128
     520:	f4 e0       	ldi	r31, 0x04	; 4
     522:	81 81       	ldd	r24, Z+1	; 0x01
     524:	88 60       	ori	r24, 0x08	; 8
     526:	81 83       	std	Z+1, r24	; 0x01
	twi_master_enable(&TWI2_MASTER);
#endif
#endif

	// Give Smart-LCD some time being up and ready
	delay_s(2);
     528:	61 e8       	ldi	r22, 0x81	; 129
     52a:	76 e9       	ldi	r23, 0x96	; 150
     52c:	88 e9       	ldi	r24, 0x98	; 152
     52e:	90 e0       	ldi	r25, 0x00	; 0

	/* Start each TWI channel devices */
	start_twi_onboard();
	start_twi_lcd();
     530:	2d df       	rcall	.-422    	; 0x38c <__portable_avr_delay_cycles>
     532:	8a cf       	rjmp	.-236    	; 0x448 <start_twi_lcd>
     534:	08 95       	ret

00000536 <task_twi_onboard>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void task_twi_onboard(uint32_t now, uint32_t last)
{
     536:	08 95       	ret

00000538 <task_twi_lcd>:

}

/* TWI2 - LCD Port */
void task_twi_lcd(uint32_t now, uint32_t last)
{
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
	if (g_twi2_lcd_version >= 0x11) {
     546:	80 91 da 22 	lds	r24, 0x22DA	; 0x8022da <g_twi2_lcd_version>
     54a:	81 31       	cpi	r24, 0x11	; 17
     54c:	08 f4       	brcc	.+2      	; 0x550 <task_twi_lcd+0x18>
		static uint8_t ofs = 0;

		twi_waitUntilReady();
     54e:	b2 c0       	rjmp	.+356    	; 0x6b4 <task_twi_lcd+0x17c>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
     550:	28 df       	rcall	.-432    	; 0x3a2 <twi_waitUntilReady>
     552:	06 e0       	ldi	r16, 0x06	; 6
     554:	10 e2       	ldi	r17, 0x20	; 32
     556:	68 94       	set
     558:	dd 24       	eor	r13, r13
     55a:	d5 f8       	bld	r13, 5
     55c:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 16 + ofs;
     55e:	d1 82       	std	Z+1, r13	; 0x01
     560:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     564:	80 5f       	subi	r24, 0xF0	; 240
     566:	c3 eb       	ldi	r28, 0xB3	; 179
     568:	d2 e2       	ldi	r29, 0x22	; 34
		twi2_m_data[1] = 16 + ofs;
     56a:	88 83       	st	Y, r24
		twi2_packet.length = 2;
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	68 94       	set
     570:	ee 24       	eor	r14, r14
     572:	e1 f8       	bld	r14, 1
     574:	f1 2c       	mov	r15, r1
     576:	e0 86       	std	Z+8, r14	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     578:	f1 86       	std	Z+9, r15	; 0x09
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	b8 01       	movw	r22, r16
     57e:	80 e8       	ldi	r24, 0x80	; 128
     580:	94 e0       	ldi	r25, 0x04	; 4
     582:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     586:	65 e0       	ldi	r22, 0x05	; 5
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	80 e0       	ldi	r24, 0x00	; 0

#if 1
		twi_waitUntilReady();
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	fe de       	rcall	.-516    	; 0x38c <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
     590:	08 df       	rcall	.-496    	; 0x3a2 <twi_waitUntilReady>
     592:	82 e3       	ldi	r24, 0x32	; 50
     594:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 150 + ofs;
     596:	81 83       	std	Z+1, r24	; 0x01
     598:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     59c:	96 e9       	ldi	r25, 0x96	; 150
     59e:	98 0f       	add	r25, r24
		twi2_m_data[1] =  60 + ofs;
     5a0:	98 83       	st	Y, r25
     5a2:	84 5c       	subi	r24, 0xC4	; 196
		twi2_packet.length = 2;
     5a4:	89 83       	std	Y+1, r24	; 0x01
     5a6:	e0 86       	std	Z+8, r14	; 0x08
     5a8:	f1 86       	std	Z+9, r15	; 0x09
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	b8 01       	movw	r22, r16
     5ae:	80 e8       	ldi	r24, 0x80	; 128
     5b0:	94 e0       	ldi	r25, 0x04	; 4
     5b2:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     5b6:	65 e0       	ldi	r22, 0x05	; 5
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	80 e0       	ldi	r24, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	e6 de       	rcall	.-564    	; 0x38c <__portable_avr_delay_cycles>
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_RECT;
     5c0:	f0 de       	rcall	.-544    	; 0x3a2 <twi_waitUntilReady>
     5c2:	84 e3       	ldi	r24, 0x34	; 52
     5c4:	f8 01       	movw	r30, r16
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_RECT;
# endif
		twi2_m_data[0] = 30;
     5c6:	81 83       	std	Z+1, r24	; 0x01
     5c8:	8e e1       	ldi	r24, 0x1E	; 30
		twi2_m_data[1] =  30;
     5ca:	88 83       	st	Y, r24
		twi2_packet.length = 2;
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	e0 86       	std	Z+8, r14	; 0x08
     5d0:	f1 86       	std	Z+9, r15	; 0x09
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	b8 01       	movw	r22, r16
     5d6:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
     5de:	65 e0       	ldi	r22, 0x05	; 5
     5e0:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_CIRC;
     5e6:	d2 de       	rcall	.-604    	; 0x38c <__portable_avr_delay_cycles>
     5e8:	dc de       	rcall	.-584    	; 0x3a2 <twi_waitUntilReady>
     5ea:	88 e3       	ldi	r24, 0x38	; 56
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC;
# endif
		twi2_m_data[0] = 20;
     5ec:	f8 01       	movw	r30, r16
     5ee:	81 83       	std	Z+1, r24	; 0x01
		twi2_packet.length = 1;
     5f0:	84 e1       	ldi	r24, 0x14	; 20
     5f2:	88 83       	st	Y, r24
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	80 87       	std	Z+8, r24	; 0x08
     5fa:	91 87       	std	Z+9, r25	; 0x09
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     600:	80 e8       	ldi	r24, 0x80	; 128
     602:	94 e0       	ldi	r25, 0x04	; 4
     604:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
     608:	65 e0       	ldi	r22, 0x05	; 5
     60a:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
     610:	bd de       	rcall	.-646    	; 0x38c <__portable_avr_delay_cycles>
     612:	c7 de       	rcall	.-626    	; 0x3a2 <twi_waitUntilReady>
		twi2_m_data[0] = 116 + ofs;
     614:	f8 01       	movw	r30, r16
     616:	d1 82       	std	Z+1, r13	; 0x01
     618:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     61c:	94 e7       	ldi	r25, 0x74	; 116
		twi2_m_data[1] =  16 + ofs;
     61e:	98 0f       	add	r25, r24
     620:	98 83       	st	Y, r25
		twi2_packet.length = 2;
     622:	80 5f       	subi	r24, 0xF0	; 240
     624:	89 83       	std	Y+1, r24	; 0x01
     626:	e0 86       	std	Z+8, r14	; 0x08
     628:	f1 86       	std	Z+9, r15	; 0x09
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     62e:	80 e8       	ldi	r24, 0x80	; 128
     630:	94 e0       	ldi	r25, 0x04	; 4
     632:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
     636:	65 e0       	ldi	r22, 0x05	; 5
     638:	70 e0       	ldi	r23, 0x00	; 0

		twi_waitUntilReady();
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
     63e:	a6 de       	rcall	.-692    	; 0x38c <__portable_avr_delay_cycles>
     640:	b0 de       	rcall	.-672    	; 0x3a2 <twi_waitUntilReady>
     642:	80 e3       	ldi	r24, 0x30	; 48
		twi2_m_data[0] = 4;
     644:	f8 01       	movw	r30, r16
     646:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[1] = 'A';
     648:	84 e0       	ldi	r24, 0x04	; 4
     64a:	88 83       	st	Y, r24
		twi2_m_data[2] = 'B';
     64c:	81 e4       	ldi	r24, 0x41	; 65
     64e:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[3] = 'C';
     650:	82 e4       	ldi	r24, 0x42	; 66
     652:	8a 83       	std	Y+2, r24	; 0x02
		twi2_m_data[4] = 'D';
     654:	83 e4       	ldi	r24, 0x43	; 67
     656:	8b 83       	std	Y+3, r24	; 0x03
		twi2_packet.length = twi2_m_data[0] + 1;
     658:	84 e4       	ldi	r24, 0x44	; 68
     65a:	8c 83       	std	Y+4, r24	; 0x04
     65c:	85 e0       	ldi	r24, 0x05	; 5
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	80 87       	std	Z+8, r24	; 0x08
     662:	91 87       	std	Z+9, r25	; 0x09
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	b8 01       	movw	r22, r16
     668:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     66a:	94 e0       	ldi	r25, 0x04	; 4
     66c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
     670:	65 e0       	ldi	r22, 0x05	; 5
     672:	70 e0       	ldi	r23, 0x00	; 0
#endif

		if (++ofs > 64) {
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	89 de       	rcall	.-750    	; 0x38c <__portable_avr_delay_cycles>
     67a:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     67e:	8f 5f       	subi	r24, 0xFF	; 255
     680:	81 34       	cpi	r24, 0x41	; 65
     682:	18 f4       	brcc	.+6      	; 0x68a <task_twi_lcd+0x152>
			ofs = 0;
     684:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <__data_end>

			twi_waitUntilReady();
     688:	32 c0       	rjmp	.+100    	; 0x6ee <task_twi_lcd+0x1b6>
     68a:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <__data_end>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
     68e:	89 de       	rcall	.-750    	; 0x3a2 <twi_waitUntilReady>
     690:	e6 e0       	ldi	r30, 0x06	; 6
			twi2_packet.length = 0;
     692:	f0 e2       	ldi	r31, 0x20	; 32
     694:	80 e1       	ldi	r24, 0x10	; 16
     696:	81 83       	std	Z+1, r24	; 0x01
     698:	10 86       	std	Z+8, r1	; 0x08
     69a:	11 86       	std	Z+9, r1	; 0x09
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	bf 01       	movw	r22, r30
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     6a0:	80 e8       	ldi	r24, 0x80	; 128
     6a2:	94 e0       	ldi	r25, 0x04	; 4
     6a4:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
     6a8:	65 e0       	ldi	r22, 0x05	; 5
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e0       	ldi	r24, 0x00	; 0
		}

	} else if (g_twi2_lcd_version == 0x10) {
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	6d de       	rcall	.-806    	; 0x38c <__portable_avr_delay_cycles>
#if 1
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi_waitUntilReady();
     6b2:	1d c0       	rjmp	.+58     	; 0x6ee <task_twi_lcd+0x1b6>
     6b4:	80 31       	cpi	r24, 0x10	; 16
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
     6b6:	d9 f4       	brne	.+54     	; 0x6ee <task_twi_lcd+0x1b6>
     6b8:	74 de       	rcall	.-792    	; 0x3a2 <twi_waitUntilReady>
     6ba:	e6 e0       	ldi	r30, 0x06	; 6
     6bc:	f0 e2       	ldi	r31, 0x20	; 32
		twi2_m_data[0] = 1;
     6be:	84 e8       	ldi	r24, 0x84	; 132
     6c0:	81 83       	std	Z+1, r24	; 0x01
     6c2:	a3 eb       	ldi	r26, 0xB3	; 179
     6c4:	b2 e2       	ldi	r27, 0x22	; 34
		twi2_m_data[1] = 128;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	8c 93       	st	X, r24
		twi2_packet.length = 2;
     6ca:	80 e8       	ldi	r24, 0x80	; 128
     6cc:	11 96       	adiw	r26, 0x01	; 1
     6ce:	8c 93       	st	X, r24
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	80 87       	std	Z+8, r24	; 0x08
     6d6:	91 87       	std	Z+9, r25	; 0x09
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	bf 01       	movw	r22, r30
     6dc:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
     6de:	94 e0       	ldi	r25, 0x04	; 4
     6e0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_master_transfer>
     6e4:	69 e8       	ldi	r22, 0x89	; 137
     6e6:	73 e1       	ldi	r23, 0x13	; 19
     6e8:	80 e0       	ldi	r24, 0x00	; 0
#endif
	}
}
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	4f de       	rcall	.-866    	; 0x38c <__portable_avr_delay_cycles>
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	df 90       	pop	r13
     6fc:	08 95       	ret

000006fe <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     6fe:	08 95       	ret

00000700 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	1f 92       	push	r1
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     70a:	2f b7       	in	r18, 0x3f	; 63
     70c:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     70e:	f8 94       	cli
	return flags;
     710:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     712:	28 2f       	mov	r18, r24
     714:	39 2f       	mov	r19, r25
     716:	21 15       	cp	r18, r1
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	38 07       	cpc	r19, r24
     71c:	29 f4       	brne	.+10     	; 0x728 <adc_set_callback+0x28>
		adca_callback = callback;
     71e:	60 93 19 24 	sts	0x2419, r22	; 0x802419 <adca_callback>
     722:	70 93 1a 24 	sts	0x241A, r23	; 0x80241a <adca_callback+0x1>
     726:	07 c0       	rjmp	.+14     	; 0x736 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     728:	20 34       	cpi	r18, 0x40	; 64
     72a:	32 40       	sbci	r19, 0x02	; 2
     72c:	21 f4       	brne	.+8      	; 0x736 <adc_set_callback+0x36>
		adcb_callback = callback;
     72e:	60 93 17 24 	sts	0x2417, r22	; 0x802417 <adcb_callback>
     732:	70 93 18 24 	sts	0x2418, r23	; 0x802418 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     736:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     738:	0f 90       	pop	r0
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     740:	81 15       	cp	r24, r1
     742:	22 e0       	ldi	r18, 0x02	; 2
     744:	92 07       	cpc	r25, r18
     746:	69 f4       	brne	.+26     	; 0x762 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     748:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <adca_enable_count>
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	98 0f       	add	r25, r24
     750:	90 93 2a 21 	sts	0x212A, r25	; 0x80212a <adca_enable_count>
     754:	81 11       	cpse	r24, r1
     756:	14 c0       	rjmp	.+40     	; 0x780 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     758:	62 e0       	ldi	r22, 0x02	; 2
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <sysclk_enable_module>
     760:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     762:	80 34       	cpi	r24, 0x40	; 64
     764:	92 40       	sbci	r25, 0x02	; 2
     766:	61 f4       	brne	.+24     	; 0x780 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     768:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <adcb_enable_count>
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	98 0f       	add	r25, r24
     770:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <adcb_enable_count>
     774:	81 11       	cpse	r24, r1
     776:	04 c0       	rjmp	.+8      	; 0x780 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <sysclk_enable_module>
     780:	08 95       	ret

00000782 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     782:	81 15       	cp	r24, r1
     784:	22 e0       	ldi	r18, 0x02	; 2
     786:	92 07       	cpc	r25, r18
     788:	61 f4       	brne	.+24     	; 0x7a2 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     78a:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <adca_enable_count>
     78e:	81 50       	subi	r24, 0x01	; 1
     790:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <adca_enable_count>
     794:	81 11       	cpse	r24, r1
     796:	13 c0       	rjmp	.+38     	; 0x7be <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     798:	62 e0       	ldi	r22, 0x02	; 2
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <sysclk_disable_module>
     7a0:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     7a2:	80 34       	cpi	r24, 0x40	; 64
     7a4:	92 40       	sbci	r25, 0x02	; 2
     7a6:	59 f4       	brne	.+22     	; 0x7be <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     7a8:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <adcb_enable_count>
     7ac:	81 50       	subi	r24, 0x01	; 1
     7ae:	80 93 29 21 	sts	0x2129, r24	; 0x802129 <adcb_enable_count>
     7b2:	81 11       	cpse	r24, r1
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     7b6:	62 e0       	ldi	r22, 0x02	; 2
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <sysclk_disable_module>
     7be:	08 95       	ret

000007c0 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	1f 92       	push	r1
     7cc:	1f 92       	push	r1
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7d4:	8f b7       	in	r24, 0x3f	; 63
     7d6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7d8:	f8 94       	cli
	return flags;
     7da:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     7dc:	c7 01       	movw	r24, r14
     7de:	b0 df       	rcall	.-160    	; 0x740 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     7e0:	f7 01       	movw	r30, r14
     7e2:	80 81       	ld	r24, Z
     7e4:	81 60       	ori	r24, 0x01	; 1
     7e6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7e8:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     7ea:	80 91 2c 24 	lds	r24, 0x242C	; 0x80242c <sleepmgr_locks+0x1>
     7ee:	8f 3f       	cpi	r24, 0xFF	; 255
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <adc_enable+0x34>
     7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7f4:	8f b7       	in	r24, 0x3f	; 63
     7f6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     7f8:	f8 94       	cli
	return flags;
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     7fc:	eb e2       	ldi	r30, 0x2B	; 43
     7fe:	f4 e2       	ldi	r31, 0x24	; 36
     800:	81 81       	ldd	r24, Z+1	; 0x01
     802:	8f 5f       	subi	r24, 0xFF	; 255
     804:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     806:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	08 95       	ret

00000818 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	0b b6       	in	r0, 0x3b	; 59
     824:	0f 92       	push	r0
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     83e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     842:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     846:	e0 91 19 24 	lds	r30, 0x2419	; 0x802419 <adca_callback>
     84a:	f0 91 1a 24 	lds	r31, 0x241A	; 0x80241a <adca_callback+0x1>
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	92 e0       	ldi	r25, 0x02	; 2
     854:	19 95       	eicall
}
     856:	ff 91       	pop	r31
     858:	ef 91       	pop	r30
     85a:	bf 91       	pop	r27
     85c:	af 91       	pop	r26
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	7f 91       	pop	r23
     864:	6f 91       	pop	r22
     866:	5f 91       	pop	r21
     868:	4f 91       	pop	r20
     86a:	3f 91       	pop	r19
     86c:	2f 91       	pop	r18
     86e:	0f 90       	pop	r0
     870:	0b be       	out	0x3b, r0	; 59
     872:	0f 90       	pop	r0
     874:	0f be       	out	0x3f, r0	; 63
     876:	0f 90       	pop	r0
     878:	1f 90       	pop	r1
     87a:	18 95       	reti

0000087c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	0b b6       	in	r0, 0x3b	; 59
     888:	0f 92       	push	r0
     88a:	2f 93       	push	r18
     88c:	3f 93       	push	r19
     88e:	4f 93       	push	r20
     890:	5f 93       	push	r21
     892:	6f 93       	push	r22
     894:	7f 93       	push	r23
     896:	8f 93       	push	r24
     898:	9f 93       	push	r25
     89a:	af 93       	push	r26
     89c:	bf 93       	push	r27
     89e:	ef 93       	push	r30
     8a0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     8a2:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     8a6:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     8aa:	e0 91 19 24 	lds	r30, 0x2419	; 0x802419 <adca_callback>
     8ae:	f0 91 1a 24 	lds	r31, 0x241A	; 0x80241a <adca_callback+0x1>
     8b2:	62 e0       	ldi	r22, 0x02	; 2
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	19 95       	eicall
}
     8ba:	ff 91       	pop	r31
     8bc:	ef 91       	pop	r30
     8be:	bf 91       	pop	r27
     8c0:	af 91       	pop	r26
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	7f 91       	pop	r23
     8c8:	6f 91       	pop	r22
     8ca:	5f 91       	pop	r21
     8cc:	4f 91       	pop	r20
     8ce:	3f 91       	pop	r19
     8d0:	2f 91       	pop	r18
     8d2:	0f 90       	pop	r0
     8d4:	0b be       	out	0x3b, r0	; 59
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f 90       	pop	r0
     8dc:	1f 90       	pop	r1
     8de:	18 95       	reti

000008e0 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     8e0:	1f 92       	push	r1
     8e2:	0f 92       	push	r0
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	0f 92       	push	r0
     8e8:	11 24       	eor	r1, r1
     8ea:	0b b6       	in	r0, 0x3b	; 59
     8ec:	0f 92       	push	r0
     8ee:	2f 93       	push	r18
     8f0:	3f 93       	push	r19
     8f2:	4f 93       	push	r20
     8f4:	5f 93       	push	r21
     8f6:	6f 93       	push	r22
     8f8:	7f 93       	push	r23
     8fa:	8f 93       	push	r24
     8fc:	9f 93       	push	r25
     8fe:	af 93       	push	r26
     900:	bf 93       	push	r27
     902:	ef 93       	push	r30
     904:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     906:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     90a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     90e:	e0 91 19 24 	lds	r30, 0x2419	; 0x802419 <adca_callback>
     912:	f0 91 1a 24 	lds	r31, 0x241A	; 0x80241a <adca_callback+0x1>
     916:	64 e0       	ldi	r22, 0x04	; 4
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	19 95       	eicall
}
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	0f 90       	pop	r0
     938:	0b be       	out	0x3b, r0	; 59
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	0b b6       	in	r0, 0x3b	; 59
     950:	0f 92       	push	r0
     952:	2f 93       	push	r18
     954:	3f 93       	push	r19
     956:	4f 93       	push	r20
     958:	5f 93       	push	r21
     95a:	6f 93       	push	r22
     95c:	7f 93       	push	r23
     95e:	8f 93       	push	r24
     960:	9f 93       	push	r25
     962:	af 93       	push	r26
     964:	bf 93       	push	r27
     966:	ef 93       	push	r30
     968:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     96a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     96e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     972:	e0 91 19 24 	lds	r30, 0x2419	; 0x802419 <adca_callback>
     976:	f0 91 1a 24 	lds	r31, 0x241A	; 0x80241a <adca_callback+0x1>
     97a:	68 e0       	ldi	r22, 0x08	; 8
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	19 95       	eicall
}
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	0f 90       	pop	r0
     99c:	0b be       	out	0x3b, r0	; 59
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	0b b6       	in	r0, 0x3b	; 59
     9b4:	0f 92       	push	r0
     9b6:	2f 93       	push	r18
     9b8:	3f 93       	push	r19
     9ba:	4f 93       	push	r20
     9bc:	5f 93       	push	r21
     9be:	6f 93       	push	r22
     9c0:	7f 93       	push	r23
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
     9c6:	af 93       	push	r26
     9c8:	bf 93       	push	r27
     9ca:	ef 93       	push	r30
     9cc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     9ce:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     9d2:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     9d6:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <adcb_callback>
     9da:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <adcb_callback+0x1>
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	80 e4       	ldi	r24, 0x40	; 64
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	19 95       	eicall
}
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	7f 91       	pop	r23
     9f4:	6f 91       	pop	r22
     9f6:	5f 91       	pop	r21
     9f8:	4f 91       	pop	r20
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	0f 90       	pop	r0
     a00:	0b be       	out	0x3b, r0	; 59
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	0b b6       	in	r0, 0x3b	; 59
     a18:	0f 92       	push	r0
     a1a:	2f 93       	push	r18
     a1c:	3f 93       	push	r19
     a1e:	4f 93       	push	r20
     a20:	5f 93       	push	r21
     a22:	6f 93       	push	r22
     a24:	7f 93       	push	r23
     a26:	8f 93       	push	r24
     a28:	9f 93       	push	r25
     a2a:	af 93       	push	r26
     a2c:	bf 93       	push	r27
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     a32:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     a36:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     a3a:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <adcb_callback>
     a3e:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <adcb_callback+0x1>
     a42:	62 e0       	ldi	r22, 0x02	; 2
     a44:	80 e4       	ldi	r24, 0x40	; 64
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	19 95       	eicall
}
     a4a:	ff 91       	pop	r31
     a4c:	ef 91       	pop	r30
     a4e:	bf 91       	pop	r27
     a50:	af 91       	pop	r26
     a52:	9f 91       	pop	r25
     a54:	8f 91       	pop	r24
     a56:	7f 91       	pop	r23
     a58:	6f 91       	pop	r22
     a5a:	5f 91       	pop	r21
     a5c:	4f 91       	pop	r20
     a5e:	3f 91       	pop	r19
     a60:	2f 91       	pop	r18
     a62:	0f 90       	pop	r0
     a64:	0b be       	out	0x3b, r0	; 59
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	0b b6       	in	r0, 0x3b	; 59
     a7c:	0f 92       	push	r0
     a7e:	2f 93       	push	r18
     a80:	3f 93       	push	r19
     a82:	4f 93       	push	r20
     a84:	5f 93       	push	r21
     a86:	6f 93       	push	r22
     a88:	7f 93       	push	r23
     a8a:	8f 93       	push	r24
     a8c:	9f 93       	push	r25
     a8e:	af 93       	push	r26
     a90:	bf 93       	push	r27
     a92:	ef 93       	push	r30
     a94:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     a96:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     a9a:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     a9e:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <adcb_callback>
     aa2:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <adcb_callback+0x1>
     aa6:	64 e0       	ldi	r22, 0x04	; 4
     aa8:	80 e4       	ldi	r24, 0x40	; 64
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	19 95       	eicall
}
     aae:	ff 91       	pop	r31
     ab0:	ef 91       	pop	r30
     ab2:	bf 91       	pop	r27
     ab4:	af 91       	pop	r26
     ab6:	9f 91       	pop	r25
     ab8:	8f 91       	pop	r24
     aba:	7f 91       	pop	r23
     abc:	6f 91       	pop	r22
     abe:	5f 91       	pop	r21
     ac0:	4f 91       	pop	r20
     ac2:	3f 91       	pop	r19
     ac4:	2f 91       	pop	r18
     ac6:	0f 90       	pop	r0
     ac8:	0b be       	out	0x3b, r0	; 59
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	0b b6       	in	r0, 0x3b	; 59
     ae0:	0f 92       	push	r0
     ae2:	2f 93       	push	r18
     ae4:	3f 93       	push	r19
     ae6:	4f 93       	push	r20
     ae8:	5f 93       	push	r21
     aea:	6f 93       	push	r22
     aec:	7f 93       	push	r23
     aee:	8f 93       	push	r24
     af0:	9f 93       	push	r25
     af2:	af 93       	push	r26
     af4:	bf 93       	push	r27
     af6:	ef 93       	push	r30
     af8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     afa:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     afe:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     b02:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <adcb_callback>
     b06:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <adcb_callback+0x1>
     b0a:	68 e0       	ldi	r22, 0x08	; 8
     b0c:	80 e4       	ldi	r24, 0x40	; 64
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	19 95       	eicall
}
     b12:	ff 91       	pop	r31
     b14:	ef 91       	pop	r30
     b16:	bf 91       	pop	r27
     b18:	af 91       	pop	r26
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	7f 91       	pop	r23
     b20:	6f 91       	pop	r22
     b22:	5f 91       	pop	r21
     b24:	4f 91       	pop	r20
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	0f 90       	pop	r0
     b2c:	0b be       	out	0x3b, r0	; 59
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     b38:	bf 92       	push	r11
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	1f 92       	push	r1
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	8c 01       	movw	r16, r24
     b52:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     b54:	81 15       	cp	r24, r1
     b56:	22 e0       	ldi	r18, 0x02	; 2
     b58:	92 07       	cpc	r25, r18
     b5a:	81 f4       	brne	.+32     	; 0xb7c <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     b5c:	61 e2       	ldi	r22, 0x21	; 33
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	0e 94 40 23 	call	0x4680	; 0x4680 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     b66:	c8 2e       	mov	r12, r24
     b68:	d1 2c       	mov	r13, r1
     b6a:	60 e2       	ldi	r22, 0x20	; 32
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 40 23 	call	0x4680	; 0x4680 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     b74:	dc 2c       	mov	r13, r12
     b76:	cc 24       	eor	r12, r12
     b78:	c8 2a       	or	r12, r24
     b7a:	12 c0       	rjmp	.+36     	; 0xba0 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     b7c:	80 34       	cpi	r24, 0x40	; 64
     b7e:	92 40       	sbci	r25, 0x02	; 2
     b80:	d1 f5       	brne	.+116    	; 0xbf6 <adc_write_configuration+0xbe>
     b82:	65 e2       	ldi	r22, 0x25	; 37
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	0e 94 40 23 	call	0x4680	; 0x4680 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     b8c:	c8 2e       	mov	r12, r24
     b8e:	d1 2c       	mov	r13, r1
     b90:	64 e2       	ldi	r22, 0x24	; 36
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	0e 94 40 23 	call	0x4680	; 0x4680 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     b9a:	dc 2c       	mov	r13, r12
     b9c:	cc 24       	eor	r12, r12
     b9e:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ba0:	8f b7       	in	r24, 0x3f	; 63
     ba2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ba4:	f8 94       	cli
	return flags;
     ba6:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     ba8:	c8 01       	movw	r24, r16
     baa:	ca dd       	rcall	.-1132   	; 0x740 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     bac:	f8 01       	movw	r30, r16
     bae:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	90 83       	st	Z, r25
	adc->CAL = cal;
     bb4:	c4 86       	std	Z+12, r12	; 0x0c
     bb6:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     bb8:	f7 01       	movw	r30, r14
     bba:	25 81       	ldd	r18, Z+5	; 0x05
     bbc:	36 81       	ldd	r19, Z+6	; 0x06
     bbe:	f8 01       	movw	r30, r16
     bc0:	20 8f       	std	Z+24, r18	; 0x18
     bc2:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     bc4:	f7 01       	movw	r30, r14
     bc6:	92 81       	ldd	r25, Z+2	; 0x02
     bc8:	f8 01       	movw	r30, r16
     bca:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     bcc:	f7 01       	movw	r30, r14
     bce:	94 81       	ldd	r25, Z+4	; 0x04
     bd0:	f8 01       	movw	r30, r16
     bd2:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     bd4:	f7 01       	movw	r30, r14
     bd6:	93 81       	ldd	r25, Z+3	; 0x03
     bd8:	f8 01       	movw	r30, r16
     bda:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     bdc:	f7 01       	movw	r30, r14
     bde:	91 81       	ldd	r25, Z+1	; 0x01
     be0:	f8 01       	movw	r30, r16
     be2:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     be4:	81 70       	andi	r24, 0x01	; 1
     be6:	f7 01       	movw	r30, r14
     be8:	90 81       	ld	r25, Z
     bea:	89 2b       	or	r24, r25
     bec:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     bee:	80 83       	st	Z, r24
     bf0:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bf2:	c7 dd       	rcall	.-1138   	; 0x782 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     bf4:	bf be       	out	0x3f, r11	; 63
     bf6:	0f 90       	pop	r0
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	cf 90       	pop	r12
     c08:	bf 90       	pop	r11
     c0a:	08 95       	ret

00000c0c <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	1f 92       	push	r1
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	8c 01       	movw	r16, r24
     c22:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c24:	8f b7       	in	r24, 0x3f	; 63
     c26:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c28:	f8 94       	cli
	return flags;
     c2a:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     c2c:	c8 01       	movw	r24, r16
     c2e:	88 dd       	rcall	.-1264   	; 0x740 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     c30:	f8 01       	movw	r30, r16
     c32:	80 81       	ld	r24, Z
     c34:	80 7c       	andi	r24, 0xC0	; 192
     c36:	f7 01       	movw	r30, r14
     c38:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     c3a:	f8 01       	movw	r30, r16
     c3c:	80 8d       	ldd	r24, Z+24	; 0x18
     c3e:	91 8d       	ldd	r25, Z+25	; 0x19
     c40:	f7 01       	movw	r30, r14
     c42:	85 83       	std	Z+5, r24	; 0x05
     c44:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     c46:	f8 01       	movw	r30, r16
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	f7 01       	movw	r30, r14
     c4c:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     c4e:	f8 01       	movw	r30, r16
     c50:	84 81       	ldd	r24, Z+4	; 0x04
     c52:	f7 01       	movw	r30, r14
     c54:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     c56:	f8 01       	movw	r30, r16
     c58:	83 81       	ldd	r24, Z+3	; 0x03
     c5a:	f7 01       	movw	r30, r14
     c5c:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     c5e:	f8 01       	movw	r30, r16
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     c64:	81 83       	std	Z+1, r24	; 0x01
     c66:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c68:	8c dd       	rcall	.-1256   	; 0x782 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     c6a:	df be       	out	0x3f, r13	; 63
     c6c:	0f 90       	pop	r0
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	08 95       	ret

00000c7e <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     c7e:	af 92       	push	r10
     c80:	bf 92       	push	r11
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	1f 92       	push	r1
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	6c 01       	movw	r12, r24
     c9a:	b6 2e       	mov	r11, r22
     c9c:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c9e:	86 2f       	mov	r24, r22
     ca0:	83 70       	andi	r24, 0x03	; 3
     ca2:	29 f4       	brne	.+10     	; 0xcae <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     ca4:	96 2f       	mov	r25, r22
     ca6:	96 95       	lsr	r25
     ca8:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     cae:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     cb2:	90 ff       	sbrs	r25, 0
		index++;
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     cb6:	86 01       	movw	r16, r12
     cb8:	00 5e       	subi	r16, 0xE0	; 224
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	98 e0       	ldi	r25, 0x08	; 8
     cbe:	89 9f       	mul	r24, r25
     cc0:	00 0d       	add	r16, r0
     cc2:	11 1d       	adc	r17, r1
     cc4:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cc6:	8f b7       	in	r24, 0x3f	; 63
     cc8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     cca:	f8 94       	cli
	return flags;
     ccc:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     cce:	c6 01       	movw	r24, r12
     cd0:	37 dd       	rcall	.-1426   	; 0x740 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     cd2:	f7 01       	movw	r30, r14
     cd4:	80 81       	ld	r24, Z
     cd6:	f8 01       	movw	r30, r16
     cd8:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     cda:	f7 01       	movw	r30, r14
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	f8 01       	movw	r30, r16
     ce0:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     ce2:	f7 01       	movw	r30, r14
     ce4:	81 81       	ldd	r24, Z+1	; 0x01
     ce6:	f8 01       	movw	r30, r16
     ce8:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     cea:	b0 fe       	sbrs	r11, 0
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     cee:	f7 01       	movw	r30, r14
     cf0:	83 81       	ldd	r24, Z+3	; 0x03
     cf2:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     cf4:	86 83       	std	Z+6, r24	; 0x06
     cf6:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cf8:	44 dd       	rcall	.-1400   	; 0x782 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     cfa:	af be       	out	0x3f, r10	; 63
     cfc:	0f 90       	pop	r0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	af 90       	pop	r10
     d12:	08 95       	ret

00000d14 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	1f 92       	push	r1
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	6c 01       	movw	r12, r24
     d30:	b6 2e       	mov	r11, r22
     d32:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     d34:	86 2f       	mov	r24, r22
     d36:	83 70       	andi	r24, 0x03	; 3
     d38:	29 f4       	brne	.+10     	; 0xd44 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     d3a:	96 2f       	mov	r25, r22
     d3c:	96 95       	lsr	r25
     d3e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     d44:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     d46:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     d48:	90 ff       	sbrs	r25, 0
		index++;
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     d4c:	86 01       	movw	r16, r12
     d4e:	00 5e       	subi	r16, 0xE0	; 224
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
     d52:	98 e0       	ldi	r25, 0x08	; 8
     d54:	89 9f       	mul	r24, r25
     d56:	00 0d       	add	r16, r0
     d58:	11 1d       	adc	r17, r1
     d5a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d5c:	8f b7       	in	r24, 0x3f	; 63
     d5e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d60:	f8 94       	cli
	return flags;
     d62:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     d64:	c6 01       	movw	r24, r12
     d66:	ec dc       	rcall	.-1576   	; 0x740 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     d68:	f8 01       	movw	r30, r16
     d6a:	80 81       	ld	r24, Z
     d6c:	f7 01       	movw	r30, r14
     d6e:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     d70:	f8 01       	movw	r30, r16
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	f7 01       	movw	r30, r14
     d76:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     d78:	f8 01       	movw	r30, r16
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	f7 01       	movw	r30, r14
     d7e:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     d80:	b0 fe       	sbrs	r11, 0
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     d84:	f8 01       	movw	r30, r16
     d86:	86 81       	ldd	r24, Z+6	; 0x06
     d88:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     d8a:	83 83       	std	Z+3, r24	; 0x03
     d8c:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d8e:	f9 dc       	rcall	.-1550   	; 0x782 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     d90:	af be       	out	0x3f, r10	; 63
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	bf 90       	pop	r11
     da6:	af 90       	pop	r10
     da8:	08 95       	ret

00000daa <dac_enable_clock>:
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
		if (!--dacb_enable_count) {
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     daa:	80 32       	cpi	r24, 0x20	; 32
     dac:	93 40       	sbci	r25, 0x03	; 3
     dae:	61 f4       	brne	.+24     	; 0xdc8 <dac_enable_clock+0x1e>
     db0:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <dacb_enable_count>
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	98 0f       	add	r25, r24
     db8:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <dacb_enable_count>
     dbc:	81 11       	cpse	r24, r1
     dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <dac_enable_clock+0x1e>
     dc0:	64 e0       	ldi	r22, 0x04	; 4
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <sysclk_enable_module>
     dc8:	08 95       	ret

00000dca <dac_enable>:
 * the DAC to operate.
 *
 * \param dac Pointer to DAC module.
 */
void dac_enable(DAC_t *dac)
{
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	1f 93       	push	r17
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	1f 92       	push	r1
     dd6:	1f 92       	push	r1
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ddc:	2f b7       	in	r18, 0x3f	; 63
     dde:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     de0:	f8 94       	cli
	return flags;
     de2:	19 81       	ldd	r17, Y+1	; 0x01
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     de4:	20 91 2c 24 	lds	r18, 0x242C	; 0x80242c <sleepmgr_locks+0x1>
     de8:	2f 3f       	cpi	r18, 0xFF	; 255
     dea:	09 f4       	brne	.+2      	; 0xdee <dac_enable+0x24>
     dec:	ff cf       	rjmp	.-2      	; 0xdec <dac_enable+0x22>
     dee:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     df0:	8f b7       	in	r24, 0x3f	; 63
     df2:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     df4:	f8 94       	cli
	return flags;
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     df8:	eb e2       	ldi	r30, 0x2B	; 43
     dfa:	f4 e2       	ldi	r31, 0x24	; 36
     dfc:	81 81       	ldd	r24, Z+1	; 0x01
     dfe:	8f 5f       	subi	r24, 0xFF	; 255
     e00:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e02:	9f bf       	out	0x3f, r25	; 63
	irqflags_t flags;

	flags = cpu_irq_save();
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	dac_enable_clock(dac);
     e04:	c7 01       	movw	r24, r14
     e06:	d1 df       	rcall	.-94     	; 0xdaa <dac_enable_clock>
	dac->CTRLA |= DAC_ENABLE_bm;
     e08:	f7 01       	movw	r30, r14
     e0a:	80 81       	ld	r24, Z
     e0c:	81 60       	ori	r24, 0x01	; 1
     e0e:	80 83       	st	Z, r24
     e10:	1f bf       	out	0x3f, r17	; 63
	cpu_irq_restore(flags);
}
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	08 95       	ret

00000e22 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	0b b6       	in	r0, 0x3b	; 59
     e2e:	0f 92       	push	r0
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     e48:	e0 91 72 21 	lds	r30, 0x2172	; 0x802172 <tc_tcc0_ovf_callback>
     e4c:	f0 91 73 21 	lds	r31, 0x2173	; 0x802173 <tc_tcc0_ovf_callback+0x1>
     e50:	30 97       	sbiw	r30, 0x00	; 0
     e52:	09 f0       	breq	.+2      	; 0xe56 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     e54:	19 95       	eicall
	}
}
     e56:	ff 91       	pop	r31
     e58:	ef 91       	pop	r30
     e5a:	bf 91       	pop	r27
     e5c:	af 91       	pop	r26
     e5e:	9f 91       	pop	r25
     e60:	8f 91       	pop	r24
     e62:	7f 91       	pop	r23
     e64:	6f 91       	pop	r22
     e66:	5f 91       	pop	r21
     e68:	4f 91       	pop	r20
     e6a:	3f 91       	pop	r19
     e6c:	2f 91       	pop	r18
     e6e:	0f 90       	pop	r0
     e70:	0b be       	out	0x3b, r0	; 59
     e72:	0f 90       	pop	r0
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	0f 90       	pop	r0
     e78:	1f 90       	pop	r1
     e7a:	18 95       	reti

00000e7c <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     e7c:	1f 92       	push	r1
     e7e:	0f 92       	push	r0
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	0b b6       	in	r0, 0x3b	; 59
     e88:	0f 92       	push	r0
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     ea2:	e0 91 70 21 	lds	r30, 0x2170	; 0x802170 <tc_tcc0_err_callback>
     ea6:	f0 91 71 21 	lds	r31, 0x2171	; 0x802171 <tc_tcc0_err_callback+0x1>
     eaa:	30 97       	sbiw	r30, 0x00	; 0
     eac:	09 f0       	breq	.+2      	; 0xeb0 <__vector_15+0x34>
		tc_tcc0_err_callback();
     eae:	19 95       	eicall
	}
}
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	0f 90       	pop	r0
     eca:	0b be       	out	0x3b, r0	; 59
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	0b b6       	in	r0, 0x3b	; 59
     ee2:	0f 92       	push	r0
     ee4:	2f 93       	push	r18
     ee6:	3f 93       	push	r19
     ee8:	4f 93       	push	r20
     eea:	5f 93       	push	r21
     eec:	6f 93       	push	r22
     eee:	7f 93       	push	r23
     ef0:	8f 93       	push	r24
     ef2:	9f 93       	push	r25
     ef4:	af 93       	push	r26
     ef6:	bf 93       	push	r27
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     efc:	e0 91 6e 21 	lds	r30, 0x216E	; 0x80216e <tc_tcc0_cca_callback>
     f00:	f0 91 6f 21 	lds	r31, 0x216F	; 0x80216f <tc_tcc0_cca_callback+0x1>
     f04:	30 97       	sbiw	r30, 0x00	; 0
     f06:	09 f0       	breq	.+2      	; 0xf0a <__vector_16+0x34>
		tc_tcc0_cca_callback();
     f08:	19 95       	eicall
	}
}
     f0a:	ff 91       	pop	r31
     f0c:	ef 91       	pop	r30
     f0e:	bf 91       	pop	r27
     f10:	af 91       	pop	r26
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	7f 91       	pop	r23
     f18:	6f 91       	pop	r22
     f1a:	5f 91       	pop	r21
     f1c:	4f 91       	pop	r20
     f1e:	3f 91       	pop	r19
     f20:	2f 91       	pop	r18
     f22:	0f 90       	pop	r0
     f24:	0b be       	out	0x3b, r0	; 59
     f26:	0f 90       	pop	r0
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	0f 90       	pop	r0
     f2c:	1f 90       	pop	r1
     f2e:	18 95       	reti

00000f30 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	0b b6       	in	r0, 0x3b	; 59
     f3c:	0f 92       	push	r0
     f3e:	2f 93       	push	r18
     f40:	3f 93       	push	r19
     f42:	4f 93       	push	r20
     f44:	5f 93       	push	r21
     f46:	6f 93       	push	r22
     f48:	7f 93       	push	r23
     f4a:	8f 93       	push	r24
     f4c:	9f 93       	push	r25
     f4e:	af 93       	push	r26
     f50:	bf 93       	push	r27
     f52:	ef 93       	push	r30
     f54:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     f56:	e0 91 6c 21 	lds	r30, 0x216C	; 0x80216c <tc_tcc0_ccb_callback>
     f5a:	f0 91 6d 21 	lds	r31, 0x216D	; 0x80216d <tc_tcc0_ccb_callback+0x1>
     f5e:	30 97       	sbiw	r30, 0x00	; 0
     f60:	09 f0       	breq	.+2      	; 0xf64 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     f62:	19 95       	eicall
	}
}
     f64:	ff 91       	pop	r31
     f66:	ef 91       	pop	r30
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	7f 91       	pop	r23
     f72:	6f 91       	pop	r22
     f74:	5f 91       	pop	r21
     f76:	4f 91       	pop	r20
     f78:	3f 91       	pop	r19
     f7a:	2f 91       	pop	r18
     f7c:	0f 90       	pop	r0
     f7e:	0b be       	out	0x3b, r0	; 59
     f80:	0f 90       	pop	r0
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	0f 90       	pop	r0
     f86:	1f 90       	pop	r1
     f88:	18 95       	reti

00000f8a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     f8a:	1f 92       	push	r1
     f8c:	0f 92       	push	r0
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	0f 92       	push	r0
     f92:	11 24       	eor	r1, r1
     f94:	0b b6       	in	r0, 0x3b	; 59
     f96:	0f 92       	push	r0
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     fb0:	e0 91 6a 21 	lds	r30, 0x216A	; 0x80216a <tc_tcc0_ccc_callback>
     fb4:	f0 91 6b 21 	lds	r31, 0x216B	; 0x80216b <tc_tcc0_ccc_callback+0x1>
     fb8:	30 97       	sbiw	r30, 0x00	; 0
     fba:	09 f0       	breq	.+2      	; 0xfbe <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     fbc:	19 95       	eicall
	}
}
     fbe:	ff 91       	pop	r31
     fc0:	ef 91       	pop	r30
     fc2:	bf 91       	pop	r27
     fc4:	af 91       	pop	r26
     fc6:	9f 91       	pop	r25
     fc8:	8f 91       	pop	r24
     fca:	7f 91       	pop	r23
     fcc:	6f 91       	pop	r22
     fce:	5f 91       	pop	r21
     fd0:	4f 91       	pop	r20
     fd2:	3f 91       	pop	r19
     fd4:	2f 91       	pop	r18
     fd6:	0f 90       	pop	r0
     fd8:	0b be       	out	0x3b, r0	; 59
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	0f 90       	pop	r0
     fe0:	1f 90       	pop	r1
     fe2:	18 95       	reti

00000fe4 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     fe4:	1f 92       	push	r1
     fe6:	0f 92       	push	r0
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	0f 92       	push	r0
     fec:	11 24       	eor	r1, r1
     fee:	0b b6       	in	r0, 0x3b	; 59
     ff0:	0f 92       	push	r0
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    100a:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <tc_tcc0_ccd_callback>
    100e:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <tc_tcc0_ccd_callback+0x1>
    1012:	30 97       	sbiw	r30, 0x00	; 0
    1014:	09 f0       	breq	.+2      	; 0x1018 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    1016:	19 95       	eicall
	}
}
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	bf 91       	pop	r27
    101e:	af 91       	pop	r26
    1020:	9f 91       	pop	r25
    1022:	8f 91       	pop	r24
    1024:	7f 91       	pop	r23
    1026:	6f 91       	pop	r22
    1028:	5f 91       	pop	r21
    102a:	4f 91       	pop	r20
    102c:	3f 91       	pop	r19
    102e:	2f 91       	pop	r18
    1030:	0f 90       	pop	r0
    1032:	0b be       	out	0x3b, r0	; 59
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    103e:	1f 92       	push	r1
    1040:	0f 92       	push	r0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	0b b6       	in	r0, 0x3b	; 59
    104a:	0f 92       	push	r0
    104c:	2f 93       	push	r18
    104e:	3f 93       	push	r19
    1050:	4f 93       	push	r20
    1052:	5f 93       	push	r21
    1054:	6f 93       	push	r22
    1056:	7f 93       	push	r23
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	af 93       	push	r26
    105e:	bf 93       	push	r27
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    1064:	e0 91 66 21 	lds	r30, 0x2166	; 0x802166 <tc_tcc1_ovf_callback>
    1068:	f0 91 67 21 	lds	r31, 0x2167	; 0x802167 <tc_tcc1_ovf_callback+0x1>
    106c:	30 97       	sbiw	r30, 0x00	; 0
    106e:	09 f0       	breq	.+2      	; 0x1072 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    1070:	19 95       	eicall
	}
}
    1072:	ff 91       	pop	r31
    1074:	ef 91       	pop	r30
    1076:	bf 91       	pop	r27
    1078:	af 91       	pop	r26
    107a:	9f 91       	pop	r25
    107c:	8f 91       	pop	r24
    107e:	7f 91       	pop	r23
    1080:	6f 91       	pop	r22
    1082:	5f 91       	pop	r21
    1084:	4f 91       	pop	r20
    1086:	3f 91       	pop	r19
    1088:	2f 91       	pop	r18
    108a:	0f 90       	pop	r0
    108c:	0b be       	out	0x3b, r0	; 59
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	0f 90       	pop	r0
    1094:	1f 90       	pop	r1
    1096:	18 95       	reti

00001098 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    1098:	1f 92       	push	r1
    109a:	0f 92       	push	r0
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	0f 92       	push	r0
    10a0:	11 24       	eor	r1, r1
    10a2:	0b b6       	in	r0, 0x3b	; 59
    10a4:	0f 92       	push	r0
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    10be:	e0 91 64 21 	lds	r30, 0x2164	; 0x802164 <tc_tcc1_err_callback>
    10c2:	f0 91 65 21 	lds	r31, 0x2165	; 0x802165 <tc_tcc1_err_callback+0x1>
    10c6:	30 97       	sbiw	r30, 0x00	; 0
    10c8:	09 f0       	breq	.+2      	; 0x10cc <__vector_21+0x34>
		tc_tcc1_err_callback();
    10ca:	19 95       	eicall
	}
}
    10cc:	ff 91       	pop	r31
    10ce:	ef 91       	pop	r30
    10d0:	bf 91       	pop	r27
    10d2:	af 91       	pop	r26
    10d4:	9f 91       	pop	r25
    10d6:	8f 91       	pop	r24
    10d8:	7f 91       	pop	r23
    10da:	6f 91       	pop	r22
    10dc:	5f 91       	pop	r21
    10de:	4f 91       	pop	r20
    10e0:	3f 91       	pop	r19
    10e2:	2f 91       	pop	r18
    10e4:	0f 90       	pop	r0
    10e6:	0b be       	out	0x3b, r0	; 59
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	0f 90       	pop	r0
    10ee:	1f 90       	pop	r1
    10f0:	18 95       	reti

000010f2 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	0b b6       	in	r0, 0x3b	; 59
    10fe:	0f 92       	push	r0
    1100:	2f 93       	push	r18
    1102:	3f 93       	push	r19
    1104:	4f 93       	push	r20
    1106:	5f 93       	push	r21
    1108:	6f 93       	push	r22
    110a:	7f 93       	push	r23
    110c:	8f 93       	push	r24
    110e:	9f 93       	push	r25
    1110:	af 93       	push	r26
    1112:	bf 93       	push	r27
    1114:	ef 93       	push	r30
    1116:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1118:	e0 91 62 21 	lds	r30, 0x2162	; 0x802162 <tc_tcc1_cca_callback>
    111c:	f0 91 63 21 	lds	r31, 0x2163	; 0x802163 <tc_tcc1_cca_callback+0x1>
    1120:	30 97       	sbiw	r30, 0x00	; 0
    1122:	09 f0       	breq	.+2      	; 0x1126 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    1124:	19 95       	eicall
	}
}
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0b be       	out	0x3b, r0	; 59
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	0b b6       	in	r0, 0x3b	; 59
    1158:	0f 92       	push	r0
    115a:	2f 93       	push	r18
    115c:	3f 93       	push	r19
    115e:	4f 93       	push	r20
    1160:	5f 93       	push	r21
    1162:	6f 93       	push	r22
    1164:	7f 93       	push	r23
    1166:	8f 93       	push	r24
    1168:	9f 93       	push	r25
    116a:	af 93       	push	r26
    116c:	bf 93       	push	r27
    116e:	ef 93       	push	r30
    1170:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    1172:	e0 91 60 21 	lds	r30, 0x2160	; 0x802160 <tc_tcc1_ccb_callback>
    1176:	f0 91 61 21 	lds	r31, 0x2161	; 0x802161 <tc_tcc1_ccb_callback+0x1>
    117a:	30 97       	sbiw	r30, 0x00	; 0
    117c:	09 f0       	breq	.+2      	; 0x1180 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    117e:	19 95       	eicall
	}
}
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	bf 91       	pop	r27
    1186:	af 91       	pop	r26
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	7f 91       	pop	r23
    118e:	6f 91       	pop	r22
    1190:	5f 91       	pop	r21
    1192:	4f 91       	pop	r20
    1194:	3f 91       	pop	r19
    1196:	2f 91       	pop	r18
    1198:	0f 90       	pop	r0
    119a:	0b be       	out	0x3b, r0	; 59
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	0f 90       	pop	r0
    11a2:	1f 90       	pop	r1
    11a4:	18 95       	reti

000011a6 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	0b b6       	in	r0, 0x3b	; 59
    11b2:	0f 92       	push	r0
    11b4:	2f 93       	push	r18
    11b6:	3f 93       	push	r19
    11b8:	4f 93       	push	r20
    11ba:	5f 93       	push	r21
    11bc:	6f 93       	push	r22
    11be:	7f 93       	push	r23
    11c0:	8f 93       	push	r24
    11c2:	9f 93       	push	r25
    11c4:	af 93       	push	r26
    11c6:	bf 93       	push	r27
    11c8:	ef 93       	push	r30
    11ca:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    11cc:	e0 91 5e 21 	lds	r30, 0x215E	; 0x80215e <tc_tcd0_ovf_callback>
    11d0:	f0 91 5f 21 	lds	r31, 0x215F	; 0x80215f <tc_tcd0_ovf_callback+0x1>
    11d4:	30 97       	sbiw	r30, 0x00	; 0
    11d6:	09 f0       	breq	.+2      	; 0x11da <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    11d8:	19 95       	eicall
	}
}
    11da:	ff 91       	pop	r31
    11dc:	ef 91       	pop	r30
    11de:	bf 91       	pop	r27
    11e0:	af 91       	pop	r26
    11e2:	9f 91       	pop	r25
    11e4:	8f 91       	pop	r24
    11e6:	7f 91       	pop	r23
    11e8:	6f 91       	pop	r22
    11ea:	5f 91       	pop	r21
    11ec:	4f 91       	pop	r20
    11ee:	3f 91       	pop	r19
    11f0:	2f 91       	pop	r18
    11f2:	0f 90       	pop	r0
    11f4:	0b be       	out	0x3b, r0	; 59
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	0b b6       	in	r0, 0x3b	; 59
    120c:	0f 92       	push	r0
    120e:	2f 93       	push	r18
    1210:	3f 93       	push	r19
    1212:	4f 93       	push	r20
    1214:	5f 93       	push	r21
    1216:	6f 93       	push	r22
    1218:	7f 93       	push	r23
    121a:	8f 93       	push	r24
    121c:	9f 93       	push	r25
    121e:	af 93       	push	r26
    1220:	bf 93       	push	r27
    1222:	ef 93       	push	r30
    1224:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1226:	e0 91 5c 21 	lds	r30, 0x215C	; 0x80215c <tc_tcd0_err_callback>
    122a:	f0 91 5d 21 	lds	r31, 0x215D	; 0x80215d <tc_tcd0_err_callback+0x1>
    122e:	30 97       	sbiw	r30, 0x00	; 0
    1230:	09 f0       	breq	.+2      	; 0x1234 <__vector_78+0x34>
		tc_tcd0_err_callback();
    1232:	19 95       	eicall
	}
}
    1234:	ff 91       	pop	r31
    1236:	ef 91       	pop	r30
    1238:	bf 91       	pop	r27
    123a:	af 91       	pop	r26
    123c:	9f 91       	pop	r25
    123e:	8f 91       	pop	r24
    1240:	7f 91       	pop	r23
    1242:	6f 91       	pop	r22
    1244:	5f 91       	pop	r21
    1246:	4f 91       	pop	r20
    1248:	3f 91       	pop	r19
    124a:	2f 91       	pop	r18
    124c:	0f 90       	pop	r0
    124e:	0b be       	out	0x3b, r0	; 59
    1250:	0f 90       	pop	r0
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	0f 90       	pop	r0
    1256:	1f 90       	pop	r1
    1258:	18 95       	reti

0000125a <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    125a:	1f 92       	push	r1
    125c:	0f 92       	push	r0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	0f 92       	push	r0
    1262:	11 24       	eor	r1, r1
    1264:	0b b6       	in	r0, 0x3b	; 59
    1266:	0f 92       	push	r0
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1280:	e0 91 5a 21 	lds	r30, 0x215A	; 0x80215a <tc_tcd0_cca_callback>
    1284:	f0 91 5b 21 	lds	r31, 0x215B	; 0x80215b <tc_tcd0_cca_callback+0x1>
    1288:	30 97       	sbiw	r30, 0x00	; 0
    128a:	09 f0       	breq	.+2      	; 0x128e <__vector_79+0x34>
		tc_tcd0_cca_callback();
    128c:	19 95       	eicall
	}
}
    128e:	ff 91       	pop	r31
    1290:	ef 91       	pop	r30
    1292:	bf 91       	pop	r27
    1294:	af 91       	pop	r26
    1296:	9f 91       	pop	r25
    1298:	8f 91       	pop	r24
    129a:	7f 91       	pop	r23
    129c:	6f 91       	pop	r22
    129e:	5f 91       	pop	r21
    12a0:	4f 91       	pop	r20
    12a2:	3f 91       	pop	r19
    12a4:	2f 91       	pop	r18
    12a6:	0f 90       	pop	r0
    12a8:	0b be       	out	0x3b, r0	; 59
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	0f 90       	pop	r0
    12b0:	1f 90       	pop	r1
    12b2:	18 95       	reti

000012b4 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    12b4:	1f 92       	push	r1
    12b6:	0f 92       	push	r0
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	0f 92       	push	r0
    12bc:	11 24       	eor	r1, r1
    12be:	0b b6       	in	r0, 0x3b	; 59
    12c0:	0f 92       	push	r0
    12c2:	2f 93       	push	r18
    12c4:	3f 93       	push	r19
    12c6:	4f 93       	push	r20
    12c8:	5f 93       	push	r21
    12ca:	6f 93       	push	r22
    12cc:	7f 93       	push	r23
    12ce:	8f 93       	push	r24
    12d0:	9f 93       	push	r25
    12d2:	af 93       	push	r26
    12d4:	bf 93       	push	r27
    12d6:	ef 93       	push	r30
    12d8:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    12da:	e0 91 58 21 	lds	r30, 0x2158	; 0x802158 <tc_tcd0_ccb_callback>
    12de:	f0 91 59 21 	lds	r31, 0x2159	; 0x802159 <tc_tcd0_ccb_callback+0x1>
    12e2:	30 97       	sbiw	r30, 0x00	; 0
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    12e6:	19 95       	eicall
	}
}
    12e8:	ff 91       	pop	r31
    12ea:	ef 91       	pop	r30
    12ec:	bf 91       	pop	r27
    12ee:	af 91       	pop	r26
    12f0:	9f 91       	pop	r25
    12f2:	8f 91       	pop	r24
    12f4:	7f 91       	pop	r23
    12f6:	6f 91       	pop	r22
    12f8:	5f 91       	pop	r21
    12fa:	4f 91       	pop	r20
    12fc:	3f 91       	pop	r19
    12fe:	2f 91       	pop	r18
    1300:	0f 90       	pop	r0
    1302:	0b be       	out	0x3b, r0	; 59
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	0b b6       	in	r0, 0x3b	; 59
    131a:	0f 92       	push	r0
    131c:	2f 93       	push	r18
    131e:	3f 93       	push	r19
    1320:	4f 93       	push	r20
    1322:	5f 93       	push	r21
    1324:	6f 93       	push	r22
    1326:	7f 93       	push	r23
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
    1330:	ef 93       	push	r30
    1332:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1334:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <tc_tcd0_ccc_callback>
    1338:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <tc_tcd0_ccc_callback+0x1>
    133c:	30 97       	sbiw	r30, 0x00	; 0
    133e:	09 f0       	breq	.+2      	; 0x1342 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    1340:	19 95       	eicall
	}
}
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	7f 91       	pop	r23
    1350:	6f 91       	pop	r22
    1352:	5f 91       	pop	r21
    1354:	4f 91       	pop	r20
    1356:	3f 91       	pop	r19
    1358:	2f 91       	pop	r18
    135a:	0f 90       	pop	r0
    135c:	0b be       	out	0x3b, r0	; 59
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	0f 92       	push	r0
    1370:	11 24       	eor	r1, r1
    1372:	0b b6       	in	r0, 0x3b	; 59
    1374:	0f 92       	push	r0
    1376:	2f 93       	push	r18
    1378:	3f 93       	push	r19
    137a:	4f 93       	push	r20
    137c:	5f 93       	push	r21
    137e:	6f 93       	push	r22
    1380:	7f 93       	push	r23
    1382:	8f 93       	push	r24
    1384:	9f 93       	push	r25
    1386:	af 93       	push	r26
    1388:	bf 93       	push	r27
    138a:	ef 93       	push	r30
    138c:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    138e:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tc_tcd0_ccd_callback>
    1392:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tc_tcd0_ccd_callback+0x1>
    1396:	30 97       	sbiw	r30, 0x00	; 0
    1398:	09 f0       	breq	.+2      	; 0x139c <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    139a:	19 95       	eicall
	}
}
    139c:	ff 91       	pop	r31
    139e:	ef 91       	pop	r30
    13a0:	bf 91       	pop	r27
    13a2:	af 91       	pop	r26
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	7f 91       	pop	r23
    13aa:	6f 91       	pop	r22
    13ac:	5f 91       	pop	r21
    13ae:	4f 91       	pop	r20
    13b0:	3f 91       	pop	r19
    13b2:	2f 91       	pop	r18
    13b4:	0f 90       	pop	r0
    13b6:	0b be       	out	0x3b, r0	; 59
    13b8:	0f 90       	pop	r0
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	0f 90       	pop	r0
    13be:	1f 90       	pop	r1
    13c0:	18 95       	reti

000013c2 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    13c2:	1f 92       	push	r1
    13c4:	0f 92       	push	r0
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	0f 92       	push	r0
    13ca:	11 24       	eor	r1, r1
    13cc:	0b b6       	in	r0, 0x3b	; 59
    13ce:	0f 92       	push	r0
    13d0:	2f 93       	push	r18
    13d2:	3f 93       	push	r19
    13d4:	4f 93       	push	r20
    13d6:	5f 93       	push	r21
    13d8:	6f 93       	push	r22
    13da:	7f 93       	push	r23
    13dc:	8f 93       	push	r24
    13de:	9f 93       	push	r25
    13e0:	af 93       	push	r26
    13e2:	bf 93       	push	r27
    13e4:	ef 93       	push	r30
    13e6:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    13e8:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <tc_tcd1_ovf_callback>
    13ec:	f0 91 53 21 	lds	r31, 0x2153	; 0x802153 <tc_tcd1_ovf_callback+0x1>
    13f0:	30 97       	sbiw	r30, 0x00	; 0
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    13f4:	19 95       	eicall
	}
}
    13f6:	ff 91       	pop	r31
    13f8:	ef 91       	pop	r30
    13fa:	bf 91       	pop	r27
    13fc:	af 91       	pop	r26
    13fe:	9f 91       	pop	r25
    1400:	8f 91       	pop	r24
    1402:	7f 91       	pop	r23
    1404:	6f 91       	pop	r22
    1406:	5f 91       	pop	r21
    1408:	4f 91       	pop	r20
    140a:	3f 91       	pop	r19
    140c:	2f 91       	pop	r18
    140e:	0f 90       	pop	r0
    1410:	0b be       	out	0x3b, r0	; 59
    1412:	0f 90       	pop	r0
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	0f 90       	pop	r0
    1418:	1f 90       	pop	r1
    141a:	18 95       	reti

0000141c <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    141c:	1f 92       	push	r1
    141e:	0f 92       	push	r0
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	0f 92       	push	r0
    1424:	11 24       	eor	r1, r1
    1426:	0b b6       	in	r0, 0x3b	; 59
    1428:	0f 92       	push	r0
    142a:	2f 93       	push	r18
    142c:	3f 93       	push	r19
    142e:	4f 93       	push	r20
    1430:	5f 93       	push	r21
    1432:	6f 93       	push	r22
    1434:	7f 93       	push	r23
    1436:	8f 93       	push	r24
    1438:	9f 93       	push	r25
    143a:	af 93       	push	r26
    143c:	bf 93       	push	r27
    143e:	ef 93       	push	r30
    1440:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1442:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <tc_tcd1_err_callback>
    1446:	f0 91 51 21 	lds	r31, 0x2151	; 0x802151 <tc_tcd1_err_callback+0x1>
    144a:	30 97       	sbiw	r30, 0x00	; 0
    144c:	09 f0       	breq	.+2      	; 0x1450 <__vector_84+0x34>
		tc_tcd1_err_callback();
    144e:	19 95       	eicall
	}
}
    1450:	ff 91       	pop	r31
    1452:	ef 91       	pop	r30
    1454:	bf 91       	pop	r27
    1456:	af 91       	pop	r26
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	7f 91       	pop	r23
    145e:	6f 91       	pop	r22
    1460:	5f 91       	pop	r21
    1462:	4f 91       	pop	r20
    1464:	3f 91       	pop	r19
    1466:	2f 91       	pop	r18
    1468:	0f 90       	pop	r0
    146a:	0b be       	out	0x3b, r0	; 59
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	0f 90       	pop	r0
    1472:	1f 90       	pop	r1
    1474:	18 95       	reti

00001476 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1476:	1f 92       	push	r1
    1478:	0f 92       	push	r0
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	0f 92       	push	r0
    147e:	11 24       	eor	r1, r1
    1480:	0b b6       	in	r0, 0x3b	; 59
    1482:	0f 92       	push	r0
    1484:	2f 93       	push	r18
    1486:	3f 93       	push	r19
    1488:	4f 93       	push	r20
    148a:	5f 93       	push	r21
    148c:	6f 93       	push	r22
    148e:	7f 93       	push	r23
    1490:	8f 93       	push	r24
    1492:	9f 93       	push	r25
    1494:	af 93       	push	r26
    1496:	bf 93       	push	r27
    1498:	ef 93       	push	r30
    149a:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    149c:	e0 91 4e 21 	lds	r30, 0x214E	; 0x80214e <tc_tcd1_cca_callback>
    14a0:	f0 91 4f 21 	lds	r31, 0x214F	; 0x80214f <tc_tcd1_cca_callback+0x1>
    14a4:	30 97       	sbiw	r30, 0x00	; 0
    14a6:	09 f0       	breq	.+2      	; 0x14aa <__vector_85+0x34>
		tc_tcd1_cca_callback();
    14a8:	19 95       	eicall
	}
}
    14aa:	ff 91       	pop	r31
    14ac:	ef 91       	pop	r30
    14ae:	bf 91       	pop	r27
    14b0:	af 91       	pop	r26
    14b2:	9f 91       	pop	r25
    14b4:	8f 91       	pop	r24
    14b6:	7f 91       	pop	r23
    14b8:	6f 91       	pop	r22
    14ba:	5f 91       	pop	r21
    14bc:	4f 91       	pop	r20
    14be:	3f 91       	pop	r19
    14c0:	2f 91       	pop	r18
    14c2:	0f 90       	pop	r0
    14c4:	0b be       	out	0x3b, r0	; 59
    14c6:	0f 90       	pop	r0
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	0f 90       	pop	r0
    14cc:	1f 90       	pop	r1
    14ce:	18 95       	reti

000014d0 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
    14da:	0b b6       	in	r0, 0x3b	; 59
    14dc:	0f 92       	push	r0
    14de:	2f 93       	push	r18
    14e0:	3f 93       	push	r19
    14e2:	4f 93       	push	r20
    14e4:	5f 93       	push	r21
    14e6:	6f 93       	push	r22
    14e8:	7f 93       	push	r23
    14ea:	8f 93       	push	r24
    14ec:	9f 93       	push	r25
    14ee:	af 93       	push	r26
    14f0:	bf 93       	push	r27
    14f2:	ef 93       	push	r30
    14f4:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    14f6:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <tc_tcd1_ccb_callback>
    14fa:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <tc_tcd1_ccb_callback+0x1>
    14fe:	30 97       	sbiw	r30, 0x00	; 0
    1500:	09 f0       	breq	.+2      	; 0x1504 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    1502:	19 95       	eicall
	}
}
    1504:	ff 91       	pop	r31
    1506:	ef 91       	pop	r30
    1508:	bf 91       	pop	r27
    150a:	af 91       	pop	r26
    150c:	9f 91       	pop	r25
    150e:	8f 91       	pop	r24
    1510:	7f 91       	pop	r23
    1512:	6f 91       	pop	r22
    1514:	5f 91       	pop	r21
    1516:	4f 91       	pop	r20
    1518:	3f 91       	pop	r19
    151a:	2f 91       	pop	r18
    151c:	0f 90       	pop	r0
    151e:	0b be       	out	0x3b, r0	; 59
    1520:	0f 90       	pop	r0
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	0f 90       	pop	r0
    1526:	1f 90       	pop	r1
    1528:	18 95       	reti

0000152a <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    152a:	1f 92       	push	r1
    152c:	0f 92       	push	r0
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	0f 92       	push	r0
    1532:	11 24       	eor	r1, r1
    1534:	0b b6       	in	r0, 0x3b	; 59
    1536:	0f 92       	push	r0
    1538:	2f 93       	push	r18
    153a:	3f 93       	push	r19
    153c:	4f 93       	push	r20
    153e:	5f 93       	push	r21
    1540:	6f 93       	push	r22
    1542:	7f 93       	push	r23
    1544:	8f 93       	push	r24
    1546:	9f 93       	push	r25
    1548:	af 93       	push	r26
    154a:	bf 93       	push	r27
    154c:	ef 93       	push	r30
    154e:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1550:	e0 91 4a 21 	lds	r30, 0x214A	; 0x80214a <tc_tce0_ovf_callback>
    1554:	f0 91 4b 21 	lds	r31, 0x214B	; 0x80214b <tc_tce0_ovf_callback+0x1>
    1558:	30 97       	sbiw	r30, 0x00	; 0
    155a:	09 f0       	breq	.+2      	; 0x155e <__vector_47+0x34>
		tc_tce0_ovf_callback();
    155c:	19 95       	eicall
	}
}
    155e:	ff 91       	pop	r31
    1560:	ef 91       	pop	r30
    1562:	bf 91       	pop	r27
    1564:	af 91       	pop	r26
    1566:	9f 91       	pop	r25
    1568:	8f 91       	pop	r24
    156a:	7f 91       	pop	r23
    156c:	6f 91       	pop	r22
    156e:	5f 91       	pop	r21
    1570:	4f 91       	pop	r20
    1572:	3f 91       	pop	r19
    1574:	2f 91       	pop	r18
    1576:	0f 90       	pop	r0
    1578:	0b be       	out	0x3b, r0	; 59
    157a:	0f 90       	pop	r0
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	0f 90       	pop	r0
    1580:	1f 90       	pop	r1
    1582:	18 95       	reti

00001584 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1584:	1f 92       	push	r1
    1586:	0f 92       	push	r0
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	0f 92       	push	r0
    158c:	11 24       	eor	r1, r1
    158e:	0b b6       	in	r0, 0x3b	; 59
    1590:	0f 92       	push	r0
    1592:	2f 93       	push	r18
    1594:	3f 93       	push	r19
    1596:	4f 93       	push	r20
    1598:	5f 93       	push	r21
    159a:	6f 93       	push	r22
    159c:	7f 93       	push	r23
    159e:	8f 93       	push	r24
    15a0:	9f 93       	push	r25
    15a2:	af 93       	push	r26
    15a4:	bf 93       	push	r27
    15a6:	ef 93       	push	r30
    15a8:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    15aa:	e0 91 48 21 	lds	r30, 0x2148	; 0x802148 <tc_tce0_err_callback>
    15ae:	f0 91 49 21 	lds	r31, 0x2149	; 0x802149 <tc_tce0_err_callback+0x1>
    15b2:	30 97       	sbiw	r30, 0x00	; 0
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <__vector_48+0x34>
		tc_tce0_err_callback();
    15b6:	19 95       	eicall
	}
}
    15b8:	ff 91       	pop	r31
    15ba:	ef 91       	pop	r30
    15bc:	bf 91       	pop	r27
    15be:	af 91       	pop	r26
    15c0:	9f 91       	pop	r25
    15c2:	8f 91       	pop	r24
    15c4:	7f 91       	pop	r23
    15c6:	6f 91       	pop	r22
    15c8:	5f 91       	pop	r21
    15ca:	4f 91       	pop	r20
    15cc:	3f 91       	pop	r19
    15ce:	2f 91       	pop	r18
    15d0:	0f 90       	pop	r0
    15d2:	0b be       	out	0x3b, r0	; 59
    15d4:	0f 90       	pop	r0
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	0f 90       	pop	r0
    15da:	1f 90       	pop	r1
    15dc:	18 95       	reti

000015de <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    15de:	1f 92       	push	r1
    15e0:	0f 92       	push	r0
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	0f 92       	push	r0
    15e6:	11 24       	eor	r1, r1
    15e8:	0b b6       	in	r0, 0x3b	; 59
    15ea:	0f 92       	push	r0
    15ec:	2f 93       	push	r18
    15ee:	3f 93       	push	r19
    15f0:	4f 93       	push	r20
    15f2:	5f 93       	push	r21
    15f4:	6f 93       	push	r22
    15f6:	7f 93       	push	r23
    15f8:	8f 93       	push	r24
    15fa:	9f 93       	push	r25
    15fc:	af 93       	push	r26
    15fe:	bf 93       	push	r27
    1600:	ef 93       	push	r30
    1602:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1604:	e0 91 46 21 	lds	r30, 0x2146	; 0x802146 <tc_tce0_cca_callback>
    1608:	f0 91 47 21 	lds	r31, 0x2147	; 0x802147 <tc_tce0_cca_callback+0x1>
    160c:	30 97       	sbiw	r30, 0x00	; 0
    160e:	09 f0       	breq	.+2      	; 0x1612 <__vector_49+0x34>
		tc_tce0_cca_callback();
    1610:	19 95       	eicall
	}
}
    1612:	ff 91       	pop	r31
    1614:	ef 91       	pop	r30
    1616:	bf 91       	pop	r27
    1618:	af 91       	pop	r26
    161a:	9f 91       	pop	r25
    161c:	8f 91       	pop	r24
    161e:	7f 91       	pop	r23
    1620:	6f 91       	pop	r22
    1622:	5f 91       	pop	r21
    1624:	4f 91       	pop	r20
    1626:	3f 91       	pop	r19
    1628:	2f 91       	pop	r18
    162a:	0f 90       	pop	r0
    162c:	0b be       	out	0x3b, r0	; 59
    162e:	0f 90       	pop	r0
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	0f 90       	pop	r0
    1634:	1f 90       	pop	r1
    1636:	18 95       	reti

00001638 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	0f 92       	push	r0
    1640:	11 24       	eor	r1, r1
    1642:	0b b6       	in	r0, 0x3b	; 59
    1644:	0f 92       	push	r0
    1646:	2f 93       	push	r18
    1648:	3f 93       	push	r19
    164a:	4f 93       	push	r20
    164c:	5f 93       	push	r21
    164e:	6f 93       	push	r22
    1650:	7f 93       	push	r23
    1652:	8f 93       	push	r24
    1654:	9f 93       	push	r25
    1656:	af 93       	push	r26
    1658:	bf 93       	push	r27
    165a:	ef 93       	push	r30
    165c:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    165e:	e0 91 44 21 	lds	r30, 0x2144	; 0x802144 <tc_tce0_ccb_callback>
    1662:	f0 91 45 21 	lds	r31, 0x2145	; 0x802145 <tc_tce0_ccb_callback+0x1>
    1666:	30 97       	sbiw	r30, 0x00	; 0
    1668:	09 f0       	breq	.+2      	; 0x166c <__vector_50+0x34>
		tc_tce0_ccb_callback();
    166a:	19 95       	eicall
	}
}
    166c:	ff 91       	pop	r31
    166e:	ef 91       	pop	r30
    1670:	bf 91       	pop	r27
    1672:	af 91       	pop	r26
    1674:	9f 91       	pop	r25
    1676:	8f 91       	pop	r24
    1678:	7f 91       	pop	r23
    167a:	6f 91       	pop	r22
    167c:	5f 91       	pop	r21
    167e:	4f 91       	pop	r20
    1680:	3f 91       	pop	r19
    1682:	2f 91       	pop	r18
    1684:	0f 90       	pop	r0
    1686:	0b be       	out	0x3b, r0	; 59
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	1f 90       	pop	r1
    1690:	18 95       	reti

00001692 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1692:	1f 92       	push	r1
    1694:	0f 92       	push	r0
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	0f 92       	push	r0
    169a:	11 24       	eor	r1, r1
    169c:	0b b6       	in	r0, 0x3b	; 59
    169e:	0f 92       	push	r0
    16a0:	2f 93       	push	r18
    16a2:	3f 93       	push	r19
    16a4:	4f 93       	push	r20
    16a6:	5f 93       	push	r21
    16a8:	6f 93       	push	r22
    16aa:	7f 93       	push	r23
    16ac:	8f 93       	push	r24
    16ae:	9f 93       	push	r25
    16b0:	af 93       	push	r26
    16b2:	bf 93       	push	r27
    16b4:	ef 93       	push	r30
    16b6:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    16b8:	e0 91 42 21 	lds	r30, 0x2142	; 0x802142 <tc_tce0_ccc_callback>
    16bc:	f0 91 43 21 	lds	r31, 0x2143	; 0x802143 <tc_tce0_ccc_callback+0x1>
    16c0:	30 97       	sbiw	r30, 0x00	; 0
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    16c4:	19 95       	eicall
	}
}
    16c6:	ff 91       	pop	r31
    16c8:	ef 91       	pop	r30
    16ca:	bf 91       	pop	r27
    16cc:	af 91       	pop	r26
    16ce:	9f 91       	pop	r25
    16d0:	8f 91       	pop	r24
    16d2:	7f 91       	pop	r23
    16d4:	6f 91       	pop	r22
    16d6:	5f 91       	pop	r21
    16d8:	4f 91       	pop	r20
    16da:	3f 91       	pop	r19
    16dc:	2f 91       	pop	r18
    16de:	0f 90       	pop	r0
    16e0:	0b be       	out	0x3b, r0	; 59
    16e2:	0f 90       	pop	r0
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	0f 90       	pop	r0
    16e8:	1f 90       	pop	r1
    16ea:	18 95       	reti

000016ec <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    16ec:	1f 92       	push	r1
    16ee:	0f 92       	push	r0
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	0f 92       	push	r0
    16f4:	11 24       	eor	r1, r1
    16f6:	0b b6       	in	r0, 0x3b	; 59
    16f8:	0f 92       	push	r0
    16fa:	2f 93       	push	r18
    16fc:	3f 93       	push	r19
    16fe:	4f 93       	push	r20
    1700:	5f 93       	push	r21
    1702:	6f 93       	push	r22
    1704:	7f 93       	push	r23
    1706:	8f 93       	push	r24
    1708:	9f 93       	push	r25
    170a:	af 93       	push	r26
    170c:	bf 93       	push	r27
    170e:	ef 93       	push	r30
    1710:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1712:	e0 91 40 21 	lds	r30, 0x2140	; 0x802140 <tc_tce0_ccd_callback>
    1716:	f0 91 41 21 	lds	r31, 0x2141	; 0x802141 <tc_tce0_ccd_callback+0x1>
    171a:	30 97       	sbiw	r30, 0x00	; 0
    171c:	09 f0       	breq	.+2      	; 0x1720 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    171e:	19 95       	eicall
	}
}
    1720:	ff 91       	pop	r31
    1722:	ef 91       	pop	r30
    1724:	bf 91       	pop	r27
    1726:	af 91       	pop	r26
    1728:	9f 91       	pop	r25
    172a:	8f 91       	pop	r24
    172c:	7f 91       	pop	r23
    172e:	6f 91       	pop	r22
    1730:	5f 91       	pop	r21
    1732:	4f 91       	pop	r20
    1734:	3f 91       	pop	r19
    1736:	2f 91       	pop	r18
    1738:	0f 90       	pop	r0
    173a:	0b be       	out	0x3b, r0	; 59
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1746:	1f 92       	push	r1
    1748:	0f 92       	push	r0
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	0f 92       	push	r0
    174e:	11 24       	eor	r1, r1
    1750:	0b b6       	in	r0, 0x3b	; 59
    1752:	0f 92       	push	r0
    1754:	2f 93       	push	r18
    1756:	3f 93       	push	r19
    1758:	4f 93       	push	r20
    175a:	5f 93       	push	r21
    175c:	6f 93       	push	r22
    175e:	7f 93       	push	r23
    1760:	8f 93       	push	r24
    1762:	9f 93       	push	r25
    1764:	af 93       	push	r26
    1766:	bf 93       	push	r27
    1768:	ef 93       	push	r30
    176a:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    176c:	e0 91 3e 21 	lds	r30, 0x213E	; 0x80213e <tc_tce1_ovf_callback>
    1770:	f0 91 3f 21 	lds	r31, 0x213F	; 0x80213f <tc_tce1_ovf_callback+0x1>
    1774:	30 97       	sbiw	r30, 0x00	; 0
    1776:	09 f0       	breq	.+2      	; 0x177a <__vector_53+0x34>
		tc_tce1_ovf_callback();
    1778:	19 95       	eicall
	}
}
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	bf 91       	pop	r27
    1780:	af 91       	pop	r26
    1782:	9f 91       	pop	r25
    1784:	8f 91       	pop	r24
    1786:	7f 91       	pop	r23
    1788:	6f 91       	pop	r22
    178a:	5f 91       	pop	r21
    178c:	4f 91       	pop	r20
    178e:	3f 91       	pop	r19
    1790:	2f 91       	pop	r18
    1792:	0f 90       	pop	r0
    1794:	0b be       	out	0x3b, r0	; 59
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	0f 90       	pop	r0
    179c:	1f 90       	pop	r1
    179e:	18 95       	reti

000017a0 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    17a0:	1f 92       	push	r1
    17a2:	0f 92       	push	r0
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	0f 92       	push	r0
    17a8:	11 24       	eor	r1, r1
    17aa:	0b b6       	in	r0, 0x3b	; 59
    17ac:	0f 92       	push	r0
    17ae:	2f 93       	push	r18
    17b0:	3f 93       	push	r19
    17b2:	4f 93       	push	r20
    17b4:	5f 93       	push	r21
    17b6:	6f 93       	push	r22
    17b8:	7f 93       	push	r23
    17ba:	8f 93       	push	r24
    17bc:	9f 93       	push	r25
    17be:	af 93       	push	r26
    17c0:	bf 93       	push	r27
    17c2:	ef 93       	push	r30
    17c4:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    17c6:	e0 91 3c 21 	lds	r30, 0x213C	; 0x80213c <tc_tce1_err_callback>
    17ca:	f0 91 3d 21 	lds	r31, 0x213D	; 0x80213d <tc_tce1_err_callback+0x1>
    17ce:	30 97       	sbiw	r30, 0x00	; 0
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <__vector_54+0x34>
		tc_tce1_err_callback();
    17d2:	19 95       	eicall
	}
}
    17d4:	ff 91       	pop	r31
    17d6:	ef 91       	pop	r30
    17d8:	bf 91       	pop	r27
    17da:	af 91       	pop	r26
    17dc:	9f 91       	pop	r25
    17de:	8f 91       	pop	r24
    17e0:	7f 91       	pop	r23
    17e2:	6f 91       	pop	r22
    17e4:	5f 91       	pop	r21
    17e6:	4f 91       	pop	r20
    17e8:	3f 91       	pop	r19
    17ea:	2f 91       	pop	r18
    17ec:	0f 90       	pop	r0
    17ee:	0b be       	out	0x3b, r0	; 59
    17f0:	0f 90       	pop	r0
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	0f 90       	pop	r0
    17f6:	1f 90       	pop	r1
    17f8:	18 95       	reti

000017fa <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    17fa:	1f 92       	push	r1
    17fc:	0f 92       	push	r0
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	0f 92       	push	r0
    1802:	11 24       	eor	r1, r1
    1804:	0b b6       	in	r0, 0x3b	; 59
    1806:	0f 92       	push	r0
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1820:	e0 91 3a 21 	lds	r30, 0x213A	; 0x80213a <tc_tce1_cca_callback>
    1824:	f0 91 3b 21 	lds	r31, 0x213B	; 0x80213b <tc_tce1_cca_callback+0x1>
    1828:	30 97       	sbiw	r30, 0x00	; 0
    182a:	09 f0       	breq	.+2      	; 0x182e <__vector_55+0x34>
		tc_tce1_cca_callback();
    182c:	19 95       	eicall
	}
}
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	bf 91       	pop	r27
    1834:	af 91       	pop	r26
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	7f 91       	pop	r23
    183c:	6f 91       	pop	r22
    183e:	5f 91       	pop	r21
    1840:	4f 91       	pop	r20
    1842:	3f 91       	pop	r19
    1844:	2f 91       	pop	r18
    1846:	0f 90       	pop	r0
    1848:	0b be       	out	0x3b, r0	; 59
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	0f 90       	pop	r0
    1850:	1f 90       	pop	r1
    1852:	18 95       	reti

00001854 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1854:	1f 92       	push	r1
    1856:	0f 92       	push	r0
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	0f 92       	push	r0
    185c:	11 24       	eor	r1, r1
    185e:	0b b6       	in	r0, 0x3b	; 59
    1860:	0f 92       	push	r0
    1862:	2f 93       	push	r18
    1864:	3f 93       	push	r19
    1866:	4f 93       	push	r20
    1868:	5f 93       	push	r21
    186a:	6f 93       	push	r22
    186c:	7f 93       	push	r23
    186e:	8f 93       	push	r24
    1870:	9f 93       	push	r25
    1872:	af 93       	push	r26
    1874:	bf 93       	push	r27
    1876:	ef 93       	push	r30
    1878:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    187a:	e0 91 38 21 	lds	r30, 0x2138	; 0x802138 <tc_tce1_ccb_callback>
    187e:	f0 91 39 21 	lds	r31, 0x2139	; 0x802139 <tc_tce1_ccb_callback+0x1>
    1882:	30 97       	sbiw	r30, 0x00	; 0
    1884:	09 f0       	breq	.+2      	; 0x1888 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    1886:	19 95       	eicall
	}
}
    1888:	ff 91       	pop	r31
    188a:	ef 91       	pop	r30
    188c:	bf 91       	pop	r27
    188e:	af 91       	pop	r26
    1890:	9f 91       	pop	r25
    1892:	8f 91       	pop	r24
    1894:	7f 91       	pop	r23
    1896:	6f 91       	pop	r22
    1898:	5f 91       	pop	r21
    189a:	4f 91       	pop	r20
    189c:	3f 91       	pop	r19
    189e:	2f 91       	pop	r18
    18a0:	0f 90       	pop	r0
    18a2:	0b be       	out	0x3b, r0	; 59
    18a4:	0f 90       	pop	r0
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	0f 90       	pop	r0
    18aa:	1f 90       	pop	r1
    18ac:	18 95       	reti

000018ae <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    18ae:	1f 92       	push	r1
    18b0:	0f 92       	push	r0
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	0f 92       	push	r0
    18b6:	11 24       	eor	r1, r1
    18b8:	0b b6       	in	r0, 0x3b	; 59
    18ba:	0f 92       	push	r0
    18bc:	2f 93       	push	r18
    18be:	3f 93       	push	r19
    18c0:	4f 93       	push	r20
    18c2:	5f 93       	push	r21
    18c4:	6f 93       	push	r22
    18c6:	7f 93       	push	r23
    18c8:	8f 93       	push	r24
    18ca:	9f 93       	push	r25
    18cc:	af 93       	push	r26
    18ce:	bf 93       	push	r27
    18d0:	ef 93       	push	r30
    18d2:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    18d4:	e0 91 36 21 	lds	r30, 0x2136	; 0x802136 <tc_tcf0_ovf_callback>
    18d8:	f0 91 37 21 	lds	r31, 0x2137	; 0x802137 <tc_tcf0_ovf_callback+0x1>
    18dc:	30 97       	sbiw	r30, 0x00	; 0
    18de:	09 f0       	breq	.+2      	; 0x18e2 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    18e0:	19 95       	eicall
	}
}
    18e2:	ff 91       	pop	r31
    18e4:	ef 91       	pop	r30
    18e6:	bf 91       	pop	r27
    18e8:	af 91       	pop	r26
    18ea:	9f 91       	pop	r25
    18ec:	8f 91       	pop	r24
    18ee:	7f 91       	pop	r23
    18f0:	6f 91       	pop	r22
    18f2:	5f 91       	pop	r21
    18f4:	4f 91       	pop	r20
    18f6:	3f 91       	pop	r19
    18f8:	2f 91       	pop	r18
    18fa:	0f 90       	pop	r0
    18fc:	0b be       	out	0x3b, r0	; 59
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0
    1904:	1f 90       	pop	r1
    1906:	18 95       	reti

00001908 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1908:	1f 92       	push	r1
    190a:	0f 92       	push	r0
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	0f 92       	push	r0
    1910:	11 24       	eor	r1, r1
    1912:	0b b6       	in	r0, 0x3b	; 59
    1914:	0f 92       	push	r0
    1916:	2f 93       	push	r18
    1918:	3f 93       	push	r19
    191a:	4f 93       	push	r20
    191c:	5f 93       	push	r21
    191e:	6f 93       	push	r22
    1920:	7f 93       	push	r23
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	af 93       	push	r26
    1928:	bf 93       	push	r27
    192a:	ef 93       	push	r30
    192c:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    192e:	e0 91 34 21 	lds	r30, 0x2134	; 0x802134 <tc_tcf0_err_callback>
    1932:	f0 91 35 21 	lds	r31, 0x2135	; 0x802135 <tc_tcf0_err_callback+0x1>
    1936:	30 97       	sbiw	r30, 0x00	; 0
    1938:	09 f0       	breq	.+2      	; 0x193c <__vector_109+0x34>
		tc_tcf0_err_callback();
    193a:	19 95       	eicall
	}
}
    193c:	ff 91       	pop	r31
    193e:	ef 91       	pop	r30
    1940:	bf 91       	pop	r27
    1942:	af 91       	pop	r26
    1944:	9f 91       	pop	r25
    1946:	8f 91       	pop	r24
    1948:	7f 91       	pop	r23
    194a:	6f 91       	pop	r22
    194c:	5f 91       	pop	r21
    194e:	4f 91       	pop	r20
    1950:	3f 91       	pop	r19
    1952:	2f 91       	pop	r18
    1954:	0f 90       	pop	r0
    1956:	0b be       	out	0x3b, r0	; 59
    1958:	0f 90       	pop	r0
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	0f 90       	pop	r0
    195e:	1f 90       	pop	r1
    1960:	18 95       	reti

00001962 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1962:	1f 92       	push	r1
    1964:	0f 92       	push	r0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	0f 92       	push	r0
    196a:	11 24       	eor	r1, r1
    196c:	0b b6       	in	r0, 0x3b	; 59
    196e:	0f 92       	push	r0
    1970:	2f 93       	push	r18
    1972:	3f 93       	push	r19
    1974:	4f 93       	push	r20
    1976:	5f 93       	push	r21
    1978:	6f 93       	push	r22
    197a:	7f 93       	push	r23
    197c:	8f 93       	push	r24
    197e:	9f 93       	push	r25
    1980:	af 93       	push	r26
    1982:	bf 93       	push	r27
    1984:	ef 93       	push	r30
    1986:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1988:	e0 91 32 21 	lds	r30, 0x2132	; 0x802132 <tc_tcf0_cca_callback>
    198c:	f0 91 33 21 	lds	r31, 0x2133	; 0x802133 <tc_tcf0_cca_callback+0x1>
    1990:	30 97       	sbiw	r30, 0x00	; 0
    1992:	09 f0       	breq	.+2      	; 0x1996 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    1994:	19 95       	eicall
	}
}
    1996:	ff 91       	pop	r31
    1998:	ef 91       	pop	r30
    199a:	bf 91       	pop	r27
    199c:	af 91       	pop	r26
    199e:	9f 91       	pop	r25
    19a0:	8f 91       	pop	r24
    19a2:	7f 91       	pop	r23
    19a4:	6f 91       	pop	r22
    19a6:	5f 91       	pop	r21
    19a8:	4f 91       	pop	r20
    19aa:	3f 91       	pop	r19
    19ac:	2f 91       	pop	r18
    19ae:	0f 90       	pop	r0
    19b0:	0b be       	out	0x3b, r0	; 59
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	0f 90       	pop	r0
    19b8:	1f 90       	pop	r1
    19ba:	18 95       	reti

000019bc <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	0b b6       	in	r0, 0x3b	; 59
    19c8:	0f 92       	push	r0
    19ca:	2f 93       	push	r18
    19cc:	3f 93       	push	r19
    19ce:	4f 93       	push	r20
    19d0:	5f 93       	push	r21
    19d2:	6f 93       	push	r22
    19d4:	7f 93       	push	r23
    19d6:	8f 93       	push	r24
    19d8:	9f 93       	push	r25
    19da:	af 93       	push	r26
    19dc:	bf 93       	push	r27
    19de:	ef 93       	push	r30
    19e0:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    19e2:	e0 91 30 21 	lds	r30, 0x2130	; 0x802130 <tc_tcf0_ccb_callback>
    19e6:	f0 91 31 21 	lds	r31, 0x2131	; 0x802131 <tc_tcf0_ccb_callback+0x1>
    19ea:	30 97       	sbiw	r30, 0x00	; 0
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    19ee:	19 95       	eicall
	}
}
    19f0:	ff 91       	pop	r31
    19f2:	ef 91       	pop	r30
    19f4:	bf 91       	pop	r27
    19f6:	af 91       	pop	r26
    19f8:	9f 91       	pop	r25
    19fa:	8f 91       	pop	r24
    19fc:	7f 91       	pop	r23
    19fe:	6f 91       	pop	r22
    1a00:	5f 91       	pop	r21
    1a02:	4f 91       	pop	r20
    1a04:	3f 91       	pop	r19
    1a06:	2f 91       	pop	r18
    1a08:	0f 90       	pop	r0
    1a0a:	0b be       	out	0x3b, r0	; 59
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti

00001a16 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1a16:	1f 92       	push	r1
    1a18:	0f 92       	push	r0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	0f 92       	push	r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	0b b6       	in	r0, 0x3b	; 59
    1a22:	0f 92       	push	r0
    1a24:	2f 93       	push	r18
    1a26:	3f 93       	push	r19
    1a28:	4f 93       	push	r20
    1a2a:	5f 93       	push	r21
    1a2c:	6f 93       	push	r22
    1a2e:	7f 93       	push	r23
    1a30:	8f 93       	push	r24
    1a32:	9f 93       	push	r25
    1a34:	af 93       	push	r26
    1a36:	bf 93       	push	r27
    1a38:	ef 93       	push	r30
    1a3a:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1a3c:	e0 91 2e 21 	lds	r30, 0x212E	; 0x80212e <tc_tcf0_ccc_callback>
    1a40:	f0 91 2f 21 	lds	r31, 0x212F	; 0x80212f <tc_tcf0_ccc_callback+0x1>
    1a44:	30 97       	sbiw	r30, 0x00	; 0
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    1a48:	19 95       	eicall
	}
}
    1a4a:	ff 91       	pop	r31
    1a4c:	ef 91       	pop	r30
    1a4e:	bf 91       	pop	r27
    1a50:	af 91       	pop	r26
    1a52:	9f 91       	pop	r25
    1a54:	8f 91       	pop	r24
    1a56:	7f 91       	pop	r23
    1a58:	6f 91       	pop	r22
    1a5a:	5f 91       	pop	r21
    1a5c:	4f 91       	pop	r20
    1a5e:	3f 91       	pop	r19
    1a60:	2f 91       	pop	r18
    1a62:	0f 90       	pop	r0
    1a64:	0b be       	out	0x3b, r0	; 59
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	0f 90       	pop	r0
    1a6c:	1f 90       	pop	r1
    1a6e:	18 95       	reti

00001a70 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1a70:	1f 92       	push	r1
    1a72:	0f 92       	push	r0
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	0f 92       	push	r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	0b b6       	in	r0, 0x3b	; 59
    1a7c:	0f 92       	push	r0
    1a7e:	2f 93       	push	r18
    1a80:	3f 93       	push	r19
    1a82:	4f 93       	push	r20
    1a84:	5f 93       	push	r21
    1a86:	6f 93       	push	r22
    1a88:	7f 93       	push	r23
    1a8a:	8f 93       	push	r24
    1a8c:	9f 93       	push	r25
    1a8e:	af 93       	push	r26
    1a90:	bf 93       	push	r27
    1a92:	ef 93       	push	r30
    1a94:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1a96:	e0 91 2c 21 	lds	r30, 0x212C	; 0x80212c <tc_tcf0_ccd_callback>
    1a9a:	f0 91 2d 21 	lds	r31, 0x212D	; 0x80212d <tc_tcf0_ccd_callback+0x1>
    1a9e:	30 97       	sbiw	r30, 0x00	; 0
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1aa2:	19 95       	eicall
	}
}
    1aa4:	ff 91       	pop	r31
    1aa6:	ef 91       	pop	r30
    1aa8:	bf 91       	pop	r27
    1aaa:	af 91       	pop	r26
    1aac:	9f 91       	pop	r25
    1aae:	8f 91       	pop	r24
    1ab0:	7f 91       	pop	r23
    1ab2:	6f 91       	pop	r22
    1ab4:	5f 91       	pop	r21
    1ab6:	4f 91       	pop	r20
    1ab8:	3f 91       	pop	r19
    1aba:	2f 91       	pop	r18
    1abc:	0f 90       	pop	r0
    1abe:	0b be       	out	0x3b, r0	; 59
    1ac0:	0f 90       	pop	r0
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	0f 90       	pop	r0
    1ac6:	1f 90       	pop	r1
    1ac8:	18 95       	reti

00001aca <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	1f 92       	push	r1
    1ad2:	1f 92       	push	r1
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ad8:	2f b7       	in	r18, 0x3f	; 63
    1ada:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    1adc:	f8 94       	cli
	return flags;
    1ade:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	39 2f       	mov	r19, r25
    1ae4:	21 15       	cp	r18, r1
    1ae6:	88 e0       	ldi	r24, 0x08	; 8
    1ae8:	38 07       	cpc	r19, r24
    1aea:	49 f4       	brne	.+18     	; 0x1afe <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1af4:	64 e0       	ldi	r22, 0x04	; 4
    1af6:	83 e0       	ldi	r24, 0x03	; 3
    1af8:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
    1afc:	4f c0       	rjmp	.+158    	; 0x1b9c <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1afe:	20 34       	cpi	r18, 0x40	; 64
    1b00:	88 e0       	ldi	r24, 0x08	; 8
    1b02:	38 07       	cpc	r19, r24
    1b04:	49 f4       	brne	.+18     	; 0x1b18 <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1b06:	62 e0       	ldi	r22, 0x02	; 2
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1b0e:	64 e0       	ldi	r22, 0x04	; 4
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
    1b16:	42 c0       	rjmp	.+132    	; 0x1b9c <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1b18:	21 15       	cp	r18, r1
    1b1a:	89 e0       	ldi	r24, 0x09	; 9
    1b1c:	38 07       	cpc	r19, r24
    1b1e:	49 f4       	brne	.+18     	; 0x1b32 <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1b20:	61 e0       	ldi	r22, 0x01	; 1
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b28:	64 e0       	ldi	r22, 0x04	; 4
    1b2a:	84 e0       	ldi	r24, 0x04	; 4
    1b2c:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
    1b30:	35 c0       	rjmp	.+106    	; 0x1b9c <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1b32:	20 34       	cpi	r18, 0x40	; 64
    1b34:	89 e0       	ldi	r24, 0x09	; 9
    1b36:	38 07       	cpc	r19, r24
    1b38:	49 f4       	brne	.+18     	; 0x1b4c <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1b3a:	62 e0       	ldi	r22, 0x02	; 2
    1b3c:	84 e0       	ldi	r24, 0x04	; 4
    1b3e:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b42:	64 e0       	ldi	r22, 0x04	; 4
    1b44:	84 e0       	ldi	r24, 0x04	; 4
    1b46:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
    1b4a:	28 c0       	rjmp	.+80     	; 0x1b9c <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1b4c:	21 15       	cp	r18, r1
    1b4e:	8a e0       	ldi	r24, 0x0A	; 10
    1b50:	38 07       	cpc	r19, r24
    1b52:	49 f4       	brne	.+18     	; 0x1b66 <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1b54:	61 e0       	ldi	r22, 0x01	; 1
    1b56:	85 e0       	ldi	r24, 0x05	; 5
    1b58:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1b5c:	64 e0       	ldi	r22, 0x04	; 4
    1b5e:	85 e0       	ldi	r24, 0x05	; 5
    1b60:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
    1b64:	1b c0       	rjmp	.+54     	; 0x1b9c <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1b66:	20 34       	cpi	r18, 0x40	; 64
    1b68:	8a e0       	ldi	r24, 0x0A	; 10
    1b6a:	38 07       	cpc	r19, r24
    1b6c:	49 f4       	brne	.+18     	; 0x1b80 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1b6e:	62 e0       	ldi	r22, 0x02	; 2
    1b70:	85 e0       	ldi	r24, 0x05	; 5
    1b72:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1b76:	64 e0       	ldi	r22, 0x04	; 4
    1b78:	85 e0       	ldi	r24, 0x05	; 5
    1b7a:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
    1b7e:	0e c0       	rjmp	.+28     	; 0x1b9c <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1b80:	21 15       	cp	r18, r1
    1b82:	3b 40       	sbci	r19, 0x0B	; 11
    1b84:	49 f4       	brne	.+18     	; 0x1b98 <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1b86:	61 e0       	ldi	r22, 0x01	; 1
    1b88:	86 e0       	ldi	r24, 0x06	; 6
    1b8a:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1b8e:	64 e0       	ldi	r22, 0x04	; 4
    1b90:	86 e0       	ldi	r24, 0x06	; 6
    1b92:	0e 94 39 1b 	call	0x3672	; 0x3672 <sysclk_enable_module>
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b98:	1f bf       	out	0x3f, r17	; 63
    1b9a:	10 c0       	rjmp	.+32     	; 0x1bbc <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1b9c:	80 91 2c 24 	lds	r24, 0x242C	; 0x80242c <sleepmgr_locks+0x1>
    1ba0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <tc_enable+0xdc>
    1ba4:	ff cf       	rjmp	.-2      	; 0x1ba4 <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ba6:	8f b7       	in	r24, 0x3f	; 63
    1ba8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1baa:	f8 94       	cli
	return flags;
    1bac:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1bae:	eb e2       	ldi	r30, 0x2B	; 43
    1bb0:	f4 e2       	ldi	r31, 0x24	; 36
    1bb2:	81 81       	ldd	r24, Z+1	; 0x01
    1bb4:	8f 5f       	subi	r24, 0xFF	; 255
    1bb6:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bb8:	9f bf       	out	0x3f, r25	; 63
    1bba:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	08 95       	ret

00001bc8 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1bcc:	e0 91 74 21 	lds	r30, 0x2174	; 0x802174 <transfer>
    1bd0:	f0 91 75 21 	lds	r31, 0x2175	; 0x802175 <transfer+0x1>
    1bd4:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1bd6:	83 ff       	sbrs	r24, 3
    1bd8:	08 c0       	rjmp	.+16     	; 0x1bea <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1bda:	88 60       	ori	r24, 0x08	; 8
    1bdc:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1bde:	83 e0       	ldi	r24, 0x03	; 3
    1be0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1be2:	86 ef       	ldi	r24, 0xF6	; 246
    1be4:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
    1be8:	83 c0       	rjmp	.+262    	; 0x1cf0 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1bea:	98 2f       	mov	r25, r24
    1bec:	94 71       	andi	r25, 0x14	; 20
    1bee:	31 f0       	breq	.+12     	; 0x1bfc <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1bf0:	83 e0       	ldi	r24, 0x03	; 3
    1bf2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
    1bfa:	7a c0       	rjmp	.+244    	; 0x1cf0 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1bfc:	86 ff       	sbrs	r24, 6
    1bfe:	43 c0       	rjmp	.+134    	; 0x1c86 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1c00:	c4 e7       	ldi	r28, 0x74	; 116
    1c02:	d1 e2       	ldi	r29, 0x21	; 33
    1c04:	aa 81       	ldd	r26, Y+2	; 0x02
    1c06:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0c:	14 96       	adiw	r26, 0x04	; 4
    1c0e:	2d 91       	ld	r18, X+
    1c10:	3c 91       	ld	r19, X
    1c12:	15 97       	sbiw	r26, 0x05	; 5
    1c14:	82 17       	cp	r24, r18
    1c16:	93 07       	cpc	r25, r19
    1c18:	6c f4       	brge	.+26     	; 0x1c34 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1c1a:	9c 01       	movw	r18, r24
    1c1c:	2f 5f       	subi	r18, 0xFF	; 255
    1c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c20:	20 93 78 21 	sts	0x2178, r18	; 0x802178 <transfer+0x4>
    1c24:	30 93 79 21 	sts	0x2179, r19	; 0x802179 <transfer+0x5>
    1c28:	a8 0f       	add	r26, r24
    1c2a:	b9 1f       	adc	r27, r25
    1c2c:	11 96       	adiw	r26, 0x01	; 1
    1c2e:	8c 91       	ld	r24, X
    1c30:	87 83       	std	Z+7, r24	; 0x07
    1c32:	5e c0       	rjmp	.+188    	; 0x1cf0 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1c34:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <transfer+0x6>
    1c38:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <transfer+0x7>
    1c3c:	18 96       	adiw	r26, 0x08	; 8
    1c3e:	2d 91       	ld	r18, X+
    1c40:	3c 91       	ld	r19, X
    1c42:	19 97       	sbiw	r26, 0x09	; 9
    1c44:	82 17       	cp	r24, r18
    1c46:	93 07       	cpc	r25, r19
    1c48:	c8 f4       	brcc	.+50     	; 0x1c7c <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1c4a:	20 91 7c 21 	lds	r18, 0x217C	; 0x80217c <transfer+0x8>
    1c4e:	22 23       	and	r18, r18
    1c50:	21 f0       	breq	.+8      	; 0x1c5a <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1c52:	86 81       	ldd	r24, Z+6	; 0x06
    1c54:	81 60       	ori	r24, 0x01	; 1
    1c56:	86 83       	std	Z+6, r24	; 0x06
    1c58:	4b c0       	rjmp	.+150    	; 0x1cf0 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1c5a:	16 96       	adiw	r26, 0x06	; 6
    1c5c:	2d 91       	ld	r18, X+
    1c5e:	3c 91       	ld	r19, X
    1c60:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1c62:	ac 01       	movw	r20, r24
    1c64:	4f 5f       	subi	r20, 0xFF	; 255
    1c66:	5f 4f       	sbci	r21, 0xFF	; 255
    1c68:	40 93 7a 21 	sts	0x217A, r20	; 0x80217a <transfer+0x6>
    1c6c:	50 93 7b 21 	sts	0x217B, r21	; 0x80217b <transfer+0x7>
    1c70:	d9 01       	movw	r26, r18
    1c72:	a8 0f       	add	r26, r24
    1c74:	b9 1f       	adc	r27, r25
    1c76:	8c 91       	ld	r24, X
    1c78:	87 83       	std	Z+7, r24	; 0x07
    1c7a:	3a c0       	rjmp	.+116    	; 0x1cf0 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1c80:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <transfer+0xa>
    1c84:	35 c0       	rjmp	.+106    	; 0x1cf0 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1c86:	88 23       	and	r24, r24
    1c88:	84 f5       	brge	.+96     	; 0x1cea <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1c8a:	a4 e7       	ldi	r26, 0x74	; 116
    1c8c:	b1 e2       	ldi	r27, 0x21	; 33
    1c8e:	12 96       	adiw	r26, 0x02	; 2
    1c90:	cd 91       	ld	r28, X+
    1c92:	dc 91       	ld	r29, X
    1c94:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1c96:	16 96       	adiw	r26, 0x06	; 6
    1c98:	8d 91       	ld	r24, X+
    1c9a:	9c 91       	ld	r25, X
    1c9c:	17 97       	sbiw	r26, 0x07	; 7
    1c9e:	28 85       	ldd	r18, Y+8	; 0x08
    1ca0:	39 85       	ldd	r19, Y+9	; 0x09
    1ca2:	82 17       	cp	r24, r18
    1ca4:	93 07       	cpc	r25, r19
    1ca6:	d8 f4       	brcc	.+54     	; 0x1cde <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1ca8:	6e 81       	ldd	r22, Y+6	; 0x06
    1caa:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1cac:	9c 01       	movw	r18, r24
    1cae:	2f 5f       	subi	r18, 0xFF	; 255
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	20 93 7a 21 	sts	0x217A, r18	; 0x80217a <transfer+0x6>
    1cb6:	30 93 7b 21 	sts	0x217B, r19	; 0x80217b <transfer+0x7>
    1cba:	47 81       	ldd	r20, Z+7	; 0x07
    1cbc:	db 01       	movw	r26, r22
    1cbe:	a8 0f       	add	r26, r24
    1cc0:	b9 1f       	adc	r27, r25
    1cc2:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1cc4:	88 85       	ldd	r24, Y+8	; 0x08
    1cc6:	99 85       	ldd	r25, Y+9	; 0x09
    1cc8:	28 17       	cp	r18, r24
    1cca:	39 07       	cpc	r19, r25
    1ccc:	18 f4       	brcc	.+6      	; 0x1cd4 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	83 83       	std	Z+3, r24	; 0x03
    1cd2:	0e c0       	rjmp	.+28     	; 0x1cf0 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1cd4:	87 e0       	ldi	r24, 0x07	; 7
    1cd6:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1cd8:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <transfer+0xa>
    1cdc:	09 c0       	rjmp	.+18     	; 0x1cf0 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1cde:	83 e0       	ldi	r24, 0x03	; 3
    1ce0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1ce2:	89 ef       	ldi	r24, 0xF9	; 249
    1ce4:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
    1ce8:	03 c0       	rjmp	.+6      	; 0x1cf0 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1cea:	8b ef       	ldi	r24, 0xFB	; 251
    1cec:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
	}
}
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	08 95       	ret

00001cf6 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1cf6:	1f 92       	push	r1
    1cf8:	0f 92       	push	r0
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	0f 92       	push	r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	0b b6       	in	r0, 0x3b	; 59
    1d02:	0f 92       	push	r0
    1d04:	2f 93       	push	r18
    1d06:	3f 93       	push	r19
    1d08:	4f 93       	push	r20
    1d0a:	5f 93       	push	r21
    1d0c:	6f 93       	push	r22
    1d0e:	7f 93       	push	r23
    1d10:	8f 93       	push	r24
    1d12:	9f 93       	push	r25
    1d14:	af 93       	push	r26
    1d16:	bf 93       	push	r27
    1d18:	ef 93       	push	r30
    1d1a:	ff 93       	push	r31
    1d1c:	55 df       	rcall	.-342    	; 0x1bc8 <twim_interrupt_handler>
    1d1e:	ff 91       	pop	r31
    1d20:	ef 91       	pop	r30
    1d22:	bf 91       	pop	r27
    1d24:	af 91       	pop	r26
    1d26:	9f 91       	pop	r25
    1d28:	8f 91       	pop	r24
    1d2a:	7f 91       	pop	r23
    1d2c:	6f 91       	pop	r22
    1d2e:	5f 91       	pop	r21
    1d30:	4f 91       	pop	r20
    1d32:	3f 91       	pop	r19
    1d34:	2f 91       	pop	r18
    1d36:	0f 90       	pop	r0
    1d38:	0b be       	out	0x3b, r0	; 59
    1d3a:	0f 90       	pop	r0
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	0f 90       	pop	r0
    1d40:	1f 90       	pop	r1
    1d42:	18 95       	reti

00001d44 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1d44:	1f 92       	push	r1
    1d46:	0f 92       	push	r0
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	0f 92       	push	r0
    1d4c:	11 24       	eor	r1, r1
    1d4e:	0b b6       	in	r0, 0x3b	; 59
    1d50:	0f 92       	push	r0
    1d52:	2f 93       	push	r18
    1d54:	3f 93       	push	r19
    1d56:	4f 93       	push	r20
    1d58:	5f 93       	push	r21
    1d5a:	6f 93       	push	r22
    1d5c:	7f 93       	push	r23
    1d5e:	8f 93       	push	r24
    1d60:	9f 93       	push	r25
    1d62:	af 93       	push	r26
    1d64:	bf 93       	push	r27
    1d66:	ef 93       	push	r30
    1d68:	ff 93       	push	r31
    1d6a:	2e df       	rcall	.-420    	; 0x1bc8 <twim_interrupt_handler>
    1d6c:	ff 91       	pop	r31
    1d6e:	ef 91       	pop	r30
    1d70:	bf 91       	pop	r27
    1d72:	af 91       	pop	r26
    1d74:	9f 91       	pop	r25
    1d76:	8f 91       	pop	r24
    1d78:	7f 91       	pop	r23
    1d7a:	6f 91       	pop	r22
    1d7c:	5f 91       	pop	r21
    1d7e:	4f 91       	pop	r20
    1d80:	3f 91       	pop	r19
    1d82:	2f 91       	pop	r18
    1d84:	0f 90       	pop	r0
    1d86:	0b be       	out	0x3b, r0	; 59
    1d88:	0f 90       	pop	r0
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	0f 90       	pop	r0
    1d8e:	1f 90       	pop	r1
    1d90:	18 95       	reti

00001d92 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1d92:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    1d94:	db 01       	movw	r26, r22
    1d96:	14 96       	adiw	r26, 0x04	; 4
    1d98:	8c 91       	ld	r24, X
    1d9a:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    1d9c:	88 eb       	ldi	r24, 0xB8	; 184
    1d9e:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    1da4:	e4 e7       	ldi	r30, 0x74	; 116
    1da6:	f1 e2       	ldi	r31, 0x21	; 33
    1da8:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    1daa:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    1dac:	e0 ea       	ldi	r30, 0xA0	; 160
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	82 60       	ori	r24, 0x02	; 2
    1db4:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    1db6:	78 94       	sei

	return STATUS_OK;
}
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	08 95       	ret

00001dbc <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	1f 92       	push	r1
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	9c 01       	movw	r18, r24
    1dc8:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1dca:	89 2b       	or	r24, r25
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <twi_master_transfer+0x14>
    1dce:	51 c0       	rjmp	.+162    	; 0x1e72 <twi_master_transfer+0xb6>
    1dd0:	30 97       	sbiw	r30, 0x00	; 0
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <twi_master_transfer+0x1a>
    1dd4:	50 c0       	rjmp	.+160    	; 0x1e76 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1dd6:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1dd8:	80 91 7d 21 	lds	r24, 0x217D	; 0x80217d <transfer+0x9>
    1ddc:	88 23       	and	r24, r24
    1dde:	19 f0       	breq	.+6      	; 0x1de6 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    1de0:	99 23       	and	r25, r25
    1de2:	f1 f3       	breq	.-4      	; 0x1de0 <twi_master_transfer+0x24>
    1de4:	4a c0       	rjmp	.+148    	; 0x1e7a <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1de6:	8f b7       	in	r24, 0x3f	; 63
    1de8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1dea:	f8 94       	cli
	return flags;
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1dee:	a4 e7       	ldi	r26, 0x74	; 116
    1df0:	b1 e2       	ldi	r27, 0x21	; 33
    1df2:	91 e0       	ldi	r25, 0x01	; 1
    1df4:	19 96       	adiw	r26, 0x09	; 9
    1df6:	9c 93       	st	X, r25
    1df8:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    1dfa:	90 e8       	ldi	r25, 0x80	; 128
    1dfc:	1a 96       	adiw	r26, 0x0a	; 10
    1dfe:	9c 93       	st	X, r25
    1e00:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1e02:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1e04:	2d 93       	st	X+, r18
    1e06:	3c 93       	st	X, r19
    1e08:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    1e0a:	12 96       	adiw	r26, 0x02	; 2
    1e0c:	6d 93       	st	X+, r22
    1e0e:	7c 93       	st	X, r23
    1e10:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    1e12:	14 96       	adiw	r26, 0x04	; 4
    1e14:	1d 92       	st	X+, r1
    1e16:	1c 92       	st	X, r1
    1e18:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    1e1a:	16 96       	adiw	r26, 0x06	; 6
    1e1c:	1d 92       	st	X+, r1
    1e1e:	1c 92       	st	X, r1
    1e20:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    1e22:	18 96       	adiw	r26, 0x08	; 8
    1e24:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    1e26:	80 81       	ld	r24, Z
    1e28:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    1e2a:	64 81       	ldd	r22, Z+4	; 0x04
    1e2c:	75 81       	ldd	r23, Z+5	; 0x05
    1e2e:	67 2b       	or	r22, r23
    1e30:	11 f4       	brne	.+4      	; 0x1e36 <twi_master_transfer+0x7a>
    1e32:	41 11       	cpse	r20, r1
    1e34:	03 c0       	rjmp	.+6      	; 0x1e3c <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    1e36:	f9 01       	movw	r30, r18
    1e38:	86 83       	std	Z+6, r24	; 0x06
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    1e3c:	81 60       	ori	r24, 0x01	; 1
    1e3e:	f9 01       	movw	r30, r18
    1e40:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    1e42:	e4 e7       	ldi	r30, 0x74	; 116
    1e44:	f1 e2       	ldi	r31, 0x21	; 33
    1e46:	92 85       	ldd	r25, Z+10	; 0x0a
    1e48:	90 38       	cpi	r25, 0x80	; 128
    1e4a:	e9 f3       	breq	.-6      	; 0x1e46 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1e4c:	f9 01       	movw	r30, r18
    1e4e:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1e50:	83 70       	andi	r24, 0x03	; 3
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	49 f0       	breq	.+18     	; 0x1e68 <twi_master_transfer+0xac>
    1e56:	a4 e7       	ldi	r26, 0x74	; 116
    1e58:	b1 e2       	ldi	r27, 0x21	; 33
    1e5a:	ed 91       	ld	r30, X+
    1e5c:	fc 91       	ld	r31, X
    1e5e:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1e60:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1e62:	83 70       	andi	r24, 0x03	; 3
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	c9 f7       	brne	.-14     	; 0x1e5a <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    1e68:	e4 e7       	ldi	r30, 0x74	; 116
    1e6a:	f1 e2       	ldi	r31, 0x21	; 33
    1e6c:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    1e6e:	11 86       	std	Z+9, r1	; 0x09
    1e70:	05 c0       	rjmp	.+10     	; 0x1e7c <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    1e72:	88 ef       	ldi	r24, 0xF8	; 248
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <twi_master_transfer+0xc0>
    1e76:	88 ef       	ldi	r24, 0xF8	; 248
    1e78:	01 c0       	rjmp	.+2      	; 0x1e7c <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    1e7a:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1e7c:	0f 90       	pop	r0
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	08 95       	ret

00001e84 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	1f 92       	push	r1
    1e8a:	1f 92       	push	r1
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	81 11       	cpse	r24, r1
    1e92:	26 c0       	rjmp	.+76     	; 0x1ee0 <udd_sleep_mode+0x5c>
    1e94:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <udd_b_idle>
    1e98:	99 23       	and	r25, r25
    1e9a:	f9 f0       	breq	.+62     	; 0x1eda <udd_sleep_mode+0x56>
    1e9c:	90 91 2c 24 	lds	r25, 0x242C	; 0x80242c <sleepmgr_locks+0x1>
    1ea0:	91 11       	cpse	r25, r1
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <udd_sleep_mode+0x22>
    1ea4:	ff cf       	rjmp	.-2      	; 0x1ea4 <udd_sleep_mode+0x20>
    1ea6:	9f b7       	in	r25, 0x3f	; 63
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	f8 94       	cli
    1eac:	2a 81       	ldd	r18, Y+2	; 0x02
    1eae:	eb e2       	ldi	r30, 0x2B	; 43
    1eb0:	f4 e2       	ldi	r31, 0x24	; 36
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	91 50       	subi	r25, 0x01	; 1
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	2f bf       	out	0x3f, r18	; 63
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <udd_sleep_mode+0x56>
    1ebc:	90 91 2c 24 	lds	r25, 0x242C	; 0x80242c <sleepmgr_locks+0x1>
    1ec0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <udd_sleep_mode+0x42>
    1ec4:	ff cf       	rjmp	.-2      	; 0x1ec4 <udd_sleep_mode+0x40>
    1ec6:	9f b7       	in	r25, 0x3f	; 63
    1ec8:	99 83       	std	Y+1, r25	; 0x01
    1eca:	f8 94       	cli
    1ecc:	29 81       	ldd	r18, Y+1	; 0x01
    1ece:	eb e2       	ldi	r30, 0x2B	; 43
    1ed0:	f4 e2       	ldi	r31, 0x24	; 36
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	9f 5f       	subi	r25, 0xFF	; 255
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	2f bf       	out	0x3f, r18	; 63
    1eda:	80 93 ac 22 	sts	0x22AC, r24	; 0x8022ac <udd_b_idle>
    1ede:	05 c0       	rjmp	.+10     	; 0x1eea <udd_sleep_mode+0x66>
    1ee0:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <udd_b_idle>
    1ee4:	99 23       	and	r25, r25
    1ee6:	51 f3       	breq	.-44     	; 0x1ebc <udd_sleep_mode+0x38>
    1ee8:	f8 cf       	rjmp	.-16     	; 0x1eda <udd_sleep_mode+0x56>
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <udd_ctrl_init>:
    1ef4:	0f 93       	push	r16
    1ef6:	e8 ec       	ldi	r30, 0xC8	; 200
    1ef8:	f4 e0       	ldi	r31, 0x04	; 4
    1efa:	80 81       	ld	r24, Z
    1efc:	8f 7d       	andi	r24, 0xDF	; 223
    1efe:	80 83       	st	Z, r24
    1f00:	80 81       	ld	r24, Z
    1f02:	8f 7d       	andi	r24, 0xDF	; 223
    1f04:	80 83       	st	Z, r24
    1f06:	e0 e8       	ldi	r30, 0x80	; 128
    1f08:	f2 e2       	ldi	r31, 0x22	; 34
    1f0a:	02 e0       	ldi	r16, 0x02	; 2
    1f0c:	05 93       	las	Z, r16
    1f0e:	10 92 82 22 	sts	0x2282, r1	; 0x802282 <udd_sram+0x16>
    1f12:	10 92 83 22 	sts	0x2283, r1	; 0x802283 <udd_sram+0x17>
    1f16:	00 e2       	ldi	r16, 0x20	; 32
    1f18:	06 93       	lac	Z, r16
    1f1a:	00 e4       	ldi	r16, 0x40	; 64
    1f1c:	06 93       	lac	Z, r16
    1f1e:	e8 e7       	ldi	r30, 0x78	; 120
    1f20:	f2 e2       	ldi	r31, 0x22	; 34
    1f22:	00 e4       	ldi	r16, 0x40	; 64
    1f24:	06 93       	lac	Z, r16
    1f26:	eb e1       	ldi	r30, 0x1B	; 27
    1f28:	f4 e2       	ldi	r31, 0x24	; 36
    1f2a:	14 86       	std	Z+12, r1	; 0x0c
    1f2c:	15 86       	std	Z+13, r1	; 0x0d
    1f2e:	16 86       	std	Z+14, r1	; 0x0e
    1f30:	17 86       	std	Z+15, r1	; 0x0f
    1f32:	12 86       	std	Z+10, r1	; 0x0a
    1f34:	13 86       	std	Z+11, r1	; 0x0b
    1f36:	10 92 68 22 	sts	0x2268, r1	; 0x802268 <udd_ep_control_state>
    1f3a:	0f 91       	pop	r16
    1f3c:	08 95       	ret

00001f3e <udd_ctrl_stall_data>:
    1f3e:	0f 93       	push	r16
    1f40:	85 e0       	ldi	r24, 0x05	; 5
    1f42:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    1f46:	e1 e8       	ldi	r30, 0x81	; 129
    1f48:	f2 e2       	ldi	r31, 0x22	; 34
    1f4a:	04 e0       	ldi	r16, 0x04	; 4
    1f4c:	05 93       	las	Z, r16
    1f4e:	e9 e7       	ldi	r30, 0x79	; 121
    1f50:	f2 e2       	ldi	r31, 0x22	; 34
    1f52:	04 e0       	ldi	r16, 0x04	; 4
    1f54:	05 93       	las	Z, r16
    1f56:	0f 91       	pop	r16
    1f58:	08 95       	ret

00001f5a <udd_ctrl_send_zlp_in>:
    1f5a:	0f 93       	push	r16
    1f5c:	83 e0       	ldi	r24, 0x03	; 3
    1f5e:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    1f62:	10 92 82 22 	sts	0x2282, r1	; 0x802282 <udd_sram+0x16>
    1f66:	10 92 83 22 	sts	0x2283, r1	; 0x802283 <udd_sram+0x17>
    1f6a:	e0 e8       	ldi	r30, 0x80	; 128
    1f6c:	f2 e2       	ldi	r31, 0x22	; 34
    1f6e:	02 e0       	ldi	r16, 0x02	; 2
    1f70:	06 93       	lac	Z, r16
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret

00001f76 <udd_ctrl_endofrequest>:
    1f76:	e0 91 27 24 	lds	r30, 0x2427	; 0x802427 <udd_g_ctrlreq+0xc>
    1f7a:	f0 91 28 24 	lds	r31, 0x2428	; 0x802428 <udd_g_ctrlreq+0xd>
    1f7e:	30 97       	sbiw	r30, 0x00	; 0
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <udd_ctrl_endofrequest+0xe>
    1f82:	19 95       	eicall
    1f84:	08 95       	ret

00001f86 <udd_ctrl_in_sent>:
    1f86:	0f 93       	push	r16
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	19 f4       	brne	.+6      	; 0x1f9a <udd_ctrl_in_sent+0x14>
    1f94:	f0 df       	rcall	.-32     	; 0x1f76 <udd_ctrl_endofrequest>
    1f96:	ae df       	rcall	.-164    	; 0x1ef4 <udd_ctrl_init>
    1f98:	5e c0       	rjmp	.+188    	; 0x2056 <udd_ctrl_in_sent+0xd0>
    1f9a:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    1f9e:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    1fa2:	c0 91 25 24 	lds	r28, 0x2425	; 0x802425 <udd_g_ctrlreq+0xa>
    1fa6:	d0 91 26 24 	lds	r29, 0x2426	; 0x802426 <udd_g_ctrlreq+0xb>
    1faa:	c8 1b       	sub	r28, r24
    1fac:	d9 0b       	sbc	r29, r25
    1fae:	71 f5       	brne	.+92     	; 0x200c <udd_ctrl_in_sent+0x86>
    1fb0:	20 91 66 22 	lds	r18, 0x2266	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    1fb4:	30 91 67 22 	lds	r19, 0x2267	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fb8:	82 0f       	add	r24, r18
    1fba:	93 1f       	adc	r25, r19
    1fbc:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    1fc0:	90 93 67 22 	sts	0x2267, r25	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fc4:	20 91 21 24 	lds	r18, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    1fc8:	30 91 22 24 	lds	r19, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    1fcc:	82 17       	cp	r24, r18
    1fce:	93 07       	cpc	r25, r19
    1fd0:	21 f0       	breq	.+8      	; 0x1fda <udd_ctrl_in_sent+0x54>
    1fd2:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <b_shortpacket.5472>
    1fd6:	88 23       	and	r24, r24
    1fd8:	41 f0       	breq	.+16     	; 0x1fea <udd_ctrl_in_sent+0x64>
    1fda:	84 e0       	ldi	r24, 0x04	; 4
    1fdc:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    1fe0:	e8 e7       	ldi	r30, 0x78	; 120
    1fe2:	f2 e2       	ldi	r31, 0x22	; 34
    1fe4:	02 e0       	ldi	r16, 0x02	; 2
    1fe6:	06 93       	lac	Z, r16
    1fe8:	36 c0       	rjmp	.+108    	; 0x2056 <udd_ctrl_in_sent+0xd0>
    1fea:	e0 91 29 24 	lds	r30, 0x2429	; 0x802429 <udd_g_ctrlreq+0xe>
    1fee:	f0 91 2a 24 	lds	r31, 0x242A	; 0x80242a <udd_g_ctrlreq+0xf>
    1ff2:	30 97       	sbiw	r30, 0x00	; 0
    1ff4:	99 f0       	breq	.+38     	; 0x201c <udd_ctrl_in_sent+0x96>
    1ff6:	19 95       	eicall
    1ff8:	88 23       	and	r24, r24
    1ffa:	81 f0       	breq	.+32     	; 0x201c <udd_ctrl_in_sent+0x96>
    1ffc:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
    2000:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2004:	c0 91 25 24 	lds	r28, 0x2425	; 0x802425 <udd_g_ctrlreq+0xa>
    2008:	d0 91 26 24 	lds	r29, 0x2426	; 0x802426 <udd_g_ctrlreq+0xb>
    200c:	c0 34       	cpi	r28, 0x40	; 64
    200e:	d1 05       	cpc	r29, r1
    2010:	28 f0       	brcs	.+10     	; 0x201c <udd_ctrl_in_sent+0x96>
    2012:	10 92 7f 21 	sts	0x217F, r1	; 0x80217f <b_shortpacket.5472>
    2016:	c0 e4       	ldi	r28, 0x40	; 64
    2018:	d0 e0       	ldi	r29, 0x00	; 0
    201a:	03 c0       	rjmp	.+6      	; 0x2022 <udd_ctrl_in_sent+0x9c>
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	80 93 7f 21 	sts	0x217F, r24	; 0x80217f <b_shortpacket.5472>
    2022:	ec e6       	ldi	r30, 0x6C	; 108
    2024:	f2 e2       	ldi	r31, 0x22	; 34
    2026:	c6 8b       	std	Z+22, r28	; 0x16
    2028:	d7 8b       	std	Z+23, r29	; 0x17
    202a:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    202e:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2032:	20 91 23 24 	lds	r18, 0x2423	; 0x802423 <udd_g_ctrlreq+0x8>
    2036:	30 91 24 24 	lds	r19, 0x2424	; 0x802424 <udd_g_ctrlreq+0x9>
    203a:	28 0f       	add	r18, r24
    203c:	39 1f       	adc	r19, r25
    203e:	20 8f       	std	Z+24, r18	; 0x18
    2040:	31 8f       	std	Z+25, r19	; 0x19
    2042:	c8 0f       	add	r28, r24
    2044:	d9 1f       	adc	r29, r25
    2046:	c0 93 64 22 	sts	0x2264, r28	; 0x802264 <udd_ctrl_payload_nb_trans>
    204a:	d0 93 65 22 	sts	0x2265, r29	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    204e:	e0 e8       	ldi	r30, 0x80	; 128
    2050:	f2 e2       	ldi	r31, 0x22	; 34
    2052:	02 e0       	ldi	r16, 0x02	; 2
    2054:	06 93       	lac	Z, r16
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	0f 91       	pop	r16
    205c:	08 95       	ret

0000205e <udd_ep_get_size>:
    205e:	fc 01       	movw	r30, r24
    2060:	81 81       	ldd	r24, Z+1	; 0x01
    2062:	e8 2f       	mov	r30, r24
    2064:	e7 70       	andi	r30, 0x07	; 7
    2066:	8e 2f       	mov	r24, r30
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	fc 01       	movw	r30, r24
    206c:	31 97       	sbiw	r30, 0x01	; 1
    206e:	e7 30       	cpi	r30, 0x07	; 7
    2070:	f1 05       	cpc	r31, r1
    2072:	d8 f4       	brcc	.+54     	; 0x20aa <udd_ep_get_size+0x4c>
    2074:	88 27       	eor	r24, r24
    2076:	e2 50       	subi	r30, 0x02	; 2
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	8f 4f       	sbci	r24, 0xFF	; 255
    207c:	0c 94 86 23 	jmp	0x470c	; 0x470c <__tablejump2__>
    2080:	80 e1       	ldi	r24, 0x10	; 16
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	08 95       	ret
    2086:	80 e2       	ldi	r24, 0x20	; 32
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	08 95       	ret
    208c:	80 e4       	ldi	r24, 0x40	; 64
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	08 95       	ret
    2092:	80 e8       	ldi	r24, 0x80	; 128
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	08 95       	ret
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	08 95       	ret
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	92 e0       	ldi	r25, 0x02	; 2
    20a2:	08 95       	ret
    20a4:	8f ef       	ldi	r24, 0xFF	; 255
    20a6:	93 e0       	ldi	r25, 0x03	; 3
    20a8:	08 95       	ret
    20aa:	88 e0       	ldi	r24, 0x08	; 8
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	08 95       	ret

000020b0 <udd_ep_get_job>:
    20b0:	28 2f       	mov	r18, r24
    20b2:	2f 70       	andi	r18, 0x0F	; 15
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	22 0f       	add	r18, r18
    20b8:	33 1f       	adc	r19, r19
    20ba:	08 2e       	mov	r0, r24
    20bc:	00 0c       	add	r0, r0
    20be:	99 0b       	sbc	r25, r25
    20c0:	88 27       	eor	r24, r24
    20c2:	99 0f       	add	r25, r25
    20c4:	88 1f       	adc	r24, r24
    20c6:	99 27       	eor	r25, r25
    20c8:	82 0f       	add	r24, r18
    20ca:	93 1f       	adc	r25, r19
    20cc:	02 97       	sbiw	r24, 0x02	; 2
    20ce:	9c 01       	movw	r18, r24
    20d0:	22 0f       	add	r18, r18
    20d2:	33 1f       	adc	r19, r19
    20d4:	22 0f       	add	r18, r18
    20d6:	33 1f       	adc	r19, r19
    20d8:	22 0f       	add	r18, r18
    20da:	33 1f       	adc	r19, r19
    20dc:	82 0f       	add	r24, r18
    20de:	93 1f       	adc	r25, r19
    20e0:	80 50       	subi	r24, 0x00	; 0
    20e2:	9e 4d       	sbci	r25, 0xDE	; 222
    20e4:	08 95       	ret

000020e6 <udd_ctrl_interrupt_tc_setup>:
    20e6:	0f 93       	push	r16
    20e8:	cf 93       	push	r28
    20ea:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    20ee:	80 ff       	sbrs	r24, 0
    20f0:	65 c0       	rjmp	.+202    	; 0x21bc <udd_ctrl_interrupt_tc_setup+0xd6>
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    20f8:	e8 e7       	ldi	r30, 0x78	; 120
    20fa:	f2 e2       	ldi	r31, 0x22	; 34
    20fc:	00 e8       	ldi	r16, 0x80	; 128
    20fe:	06 93       	lac	Z, r16
    2100:	e0 e8       	ldi	r30, 0x80	; 128
    2102:	f2 e2       	ldi	r31, 0x22	; 34
    2104:	00 e8       	ldi	r16, 0x80	; 128
    2106:	06 93       	lac	Z, r16
    2108:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    210c:	e8 e7       	ldi	r30, 0x78	; 120
    210e:	f2 e2       	ldi	r31, 0x22	; 34
    2110:	00 e1       	ldi	r16, 0x10	; 16
    2112:	06 93       	lac	Z, r16
    2114:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    2118:	88 23       	and	r24, r24
    211a:	29 f0       	breq	.+10     	; 0x2126 <udd_ctrl_interrupt_tc_setup+0x40>
    211c:	83 50       	subi	r24, 0x03	; 3
    211e:	82 30       	cpi	r24, 0x02	; 2
    2120:	08 f4       	brcc	.+2      	; 0x2124 <udd_ctrl_interrupt_tc_setup+0x3e>
    2122:	29 df       	rcall	.-430    	; 0x1f76 <udd_ctrl_endofrequest>
    2124:	e7 de       	rcall	.-562    	; 0x1ef4 <udd_ctrl_init>
    2126:	80 91 7a 22 	lds	r24, 0x227A	; 0x80227a <udd_sram+0xe>
    212a:	90 91 7b 22 	lds	r25, 0x227B	; 0x80227b <udd_sram+0xf>
    212e:	08 97       	sbiw	r24, 0x08	; 8
    2130:	09 f0       	breq	.+2      	; 0x2134 <udd_ctrl_interrupt_tc_setup+0x4e>
    2132:	46 c0       	rjmp	.+140    	; 0x21c0 <udd_ctrl_interrupt_tc_setup+0xda>
    2134:	88 e0       	ldi	r24, 0x08	; 8
    2136:	e4 e2       	ldi	r30, 0x24	; 36
    2138:	f2 e2       	ldi	r31, 0x22	; 34
    213a:	ab e1       	ldi	r26, 0x1B	; 27
    213c:	b4 e2       	ldi	r27, 0x24	; 36
    213e:	01 90       	ld	r0, Z+
    2140:	0d 92       	st	X+, r0
    2142:	8a 95       	dec	r24
    2144:	e1 f7       	brne	.-8      	; 0x213e <udd_ctrl_interrupt_tc_setup+0x58>
    2146:	e8 ec       	ldi	r30, 0xC8	; 200
    2148:	f4 e0       	ldi	r31, 0x04	; 4
    214a:	80 81       	ld	r24, Z
    214c:	80 62       	ori	r24, 0x20	; 32
    214e:	80 83       	st	Z, r24
    2150:	80 81       	ld	r24, Z
    2152:	80 62       	ori	r24, 0x20	; 32
    2154:	80 83       	st	Z, r24
    2156:	0e 94 20 20 	call	0x4040	; 0x4040 <udc_process_setup>
    215a:	c8 2f       	mov	r28, r24
    215c:	81 11       	cpse	r24, r1
    215e:	03 c0       	rjmp	.+6      	; 0x2166 <udd_ctrl_interrupt_tc_setup+0x80>
    2160:	ee de       	rcall	.-548    	; 0x1f3e <udd_ctrl_stall_data>
    2162:	c1 e0       	ldi	r28, 0x01	; 1
    2164:	2e c0       	rjmp	.+92     	; 0x21c2 <udd_ctrl_interrupt_tc_setup+0xdc>
    2166:	80 91 1b 24 	lds	r24, 0x241B	; 0x80241b <udd_g_ctrlreq>
    216a:	88 23       	and	r24, r24
    216c:	6c f4       	brge	.+26     	; 0x2188 <udd_ctrl_interrupt_tc_setup+0xa2>
    216e:	10 92 66 22 	sts	0x2266, r1	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2172:	10 92 67 22 	sts	0x2267, r1	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    2176:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
    217a:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    2184:	00 df       	rcall	.-512    	; 0x1f86 <udd_ctrl_in_sent>
    2186:	1d c0       	rjmp	.+58     	; 0x21c2 <udd_ctrl_interrupt_tc_setup+0xdc>
    2188:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    218c:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    2190:	89 2b       	or	r24, r25
    2192:	11 f4       	brne	.+4      	; 0x2198 <udd_ctrl_interrupt_tc_setup+0xb2>
    2194:	e2 de       	rcall	.-572    	; 0x1f5a <udd_ctrl_send_zlp_in>
    2196:	15 c0       	rjmp	.+42     	; 0x21c2 <udd_ctrl_interrupt_tc_setup+0xdc>
    2198:	10 92 66 22 	sts	0x2266, r1	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    219c:	10 92 67 22 	sts	0x2267, r1	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    21a0:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
    21a4:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    21ae:	e8 e7       	ldi	r30, 0x78	; 120
    21b0:	f2 e2       	ldi	r31, 0x22	; 34
    21b2:	02 e0       	ldi	r16, 0x02	; 2
    21b4:	06 93       	lac	Z, r16
    21b6:	00 e2       	ldi	r16, 0x20	; 32
    21b8:	06 93       	lac	Z, r16
    21ba:	03 c0       	rjmp	.+6      	; 0x21c2 <udd_ctrl_interrupt_tc_setup+0xdc>
    21bc:	c0 e0       	ldi	r28, 0x00	; 0
    21be:	01 c0       	rjmp	.+2      	; 0x21c2 <udd_ctrl_interrupt_tc_setup+0xdc>
    21c0:	c1 e0       	ldi	r28, 0x01	; 1
    21c2:	8c 2f       	mov	r24, r28
    21c4:	cf 91       	pop	r28
    21c6:	0f 91       	pop	r16
    21c8:	08 95       	ret

000021ca <udd_ep_trans_complet>:
    21ca:	8f 92       	push	r8
    21cc:	9f 92       	push	r9
    21ce:	af 92       	push	r10
    21d0:	bf 92       	push	r11
    21d2:	df 92       	push	r13
    21d4:	ef 92       	push	r14
    21d6:	ff 92       	push	r15
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	d8 2e       	mov	r13, r24
    21e2:	66 df       	rcall	.-308    	; 0x20b0 <udd_ep_get_job>
    21e4:	8c 01       	movw	r16, r24
    21e6:	cd 2d       	mov	r28, r13
    21e8:	cf 70       	andi	r28, 0x0F	; 15
    21ea:	d0 e0       	ldi	r29, 0x00	; 0
    21ec:	ce 01       	movw	r24, r28
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	cd 2d       	mov	r28, r13
    21f4:	0d 2c       	mov	r0, r13
    21f6:	00 0c       	add	r0, r0
    21f8:	dd 0b       	sbc	r29, r29
    21fa:	cc 27       	eor	r28, r28
    21fc:	dd 0f       	add	r29, r29
    21fe:	cc 1f       	adc	r28, r28
    2200:	dd 27       	eor	r29, r29
    2202:	c8 0f       	add	r28, r24
    2204:	d9 1f       	adc	r29, r25
    2206:	ce 01       	movw	r24, r28
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	88 0f       	add	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	9c 01       	movw	r18, r24
    2216:	28 58       	subi	r18, 0x88	; 136
    2218:	3d 4d       	sbci	r19, 0xDD	; 221
    221a:	79 01       	movw	r14, r18
    221c:	c9 01       	movw	r24, r18
    221e:	1f df       	rcall	.-450    	; 0x205e <udd_ep_get_size>
    2220:	4c 01       	movw	r8, r24
    2222:	dd 20       	and	r13, r13
    2224:	0c f0       	brlt	.+2      	; 0x2228 <udd_ep_trans_complet+0x5e>
    2226:	7b c0       	rjmp	.+246    	; 0x231e <udd_ep_trans_complet+0x154>
    2228:	fe 01       	movw	r30, r28
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	ee 0f       	add	r30, r30
    2230:	ff 1f       	adc	r31, r31
    2232:	ee 0f       	add	r30, r30
    2234:	ff 1f       	adc	r31, r31
    2236:	e4 59       	subi	r30, 0x94	; 148
    2238:	fd 4d       	sbci	r31, 0xDD	; 221
    223a:	22 89       	ldd	r18, Z+18	; 0x12
    223c:	33 89       	ldd	r19, Z+19	; 0x13
    223e:	d8 01       	movw	r26, r16
    2240:	15 96       	adiw	r26, 0x05	; 5
    2242:	8d 91       	ld	r24, X+
    2244:	9c 91       	ld	r25, X
    2246:	16 97       	sbiw	r26, 0x06	; 6
    2248:	82 0f       	add	r24, r18
    224a:	93 1f       	adc	r25, r19
    224c:	15 96       	adiw	r26, 0x05	; 5
    224e:	8d 93       	st	X+, r24
    2250:	9c 93       	st	X, r25
    2252:	16 97       	sbiw	r26, 0x06	; 6
    2254:	13 96       	adiw	r26, 0x03	; 3
    2256:	2d 91       	ld	r18, X+
    2258:	3c 91       	ld	r19, X
    225a:	14 97       	sbiw	r26, 0x04	; 4
    225c:	82 17       	cp	r24, r18
    225e:	93 07       	cpc	r25, r19
    2260:	09 f4       	brne	.+2      	; 0x2264 <udd_ep_trans_complet+0x9a>
    2262:	47 c0       	rjmp	.+142    	; 0x22f2 <udd_ep_trans_complet+0x128>
    2264:	28 1b       	sub	r18, r24
    2266:	39 0b       	sbc	r19, r25
    2268:	21 15       	cp	r18, r1
    226a:	b4 e0       	ldi	r27, 0x04	; 4
    226c:	3b 07       	cpc	r19, r27
    226e:	40 f0       	brcs	.+16     	; 0x2280 <udd_ep_trans_complet+0xb6>
    2270:	2f ef       	ldi	r18, 0xFF	; 255
    2272:	33 e0       	ldi	r19, 0x03	; 3
    2274:	c9 01       	movw	r24, r18
    2276:	b4 01       	movw	r22, r8
    2278:	0e 94 50 23 	call	0x46a0	; 0x46a0 <__udivmodhi4>
    227c:	28 1b       	sub	r18, r24
    227e:	39 0b       	sbc	r19, r25
    2280:	f8 01       	movw	r30, r16
    2282:	80 81       	ld	r24, Z
    2284:	81 ff       	sbrs	r24, 1
    2286:	0a c0       	rjmp	.+20     	; 0x229c <udd_ep_trans_complet+0xd2>
    2288:	c9 01       	movw	r24, r18
    228a:	b4 01       	movw	r22, r8
    228c:	0e 94 50 23 	call	0x46a0	; 0x46a0 <__udivmodhi4>
    2290:	41 e0       	ldi	r20, 0x01	; 1
    2292:	89 2b       	or	r24, r25
    2294:	09 f0       	breq	.+2      	; 0x2298 <udd_ep_trans_complet+0xce>
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	84 2f       	mov	r24, r20
    229a:	01 c0       	rjmp	.+2      	; 0x229e <udd_ep_trans_complet+0xd4>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	d8 01       	movw	r26, r16
    22a0:	9c 91       	ld	r25, X
    22a2:	80 fb       	bst	r24, 0
    22a4:	91 f9       	bld	r25, 1
    22a6:	9c 93       	st	X, r25
    22a8:	fe 01       	movw	r30, r28
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	ee 0f       	add	r30, r30
    22b0:	ff 1f       	adc	r31, r31
    22b2:	ee 0f       	add	r30, r30
    22b4:	ff 1f       	adc	r31, r31
    22b6:	e4 59       	subi	r30, 0x94	; 148
    22b8:	fd 4d       	sbci	r31, 0xDD	; 221
    22ba:	12 8a       	std	Z+18, r1	; 0x12
    22bc:	13 8a       	std	Z+19, r1	; 0x13
    22be:	26 87       	std	Z+14, r18	; 0x0e
    22c0:	37 87       	std	Z+15, r19	; 0x0f
    22c2:	11 96       	adiw	r26, 0x01	; 1
    22c4:	2d 91       	ld	r18, X+
    22c6:	3c 91       	ld	r19, X
    22c8:	12 97       	sbiw	r26, 0x02	; 2
    22ca:	15 96       	adiw	r26, 0x05	; 5
    22cc:	8d 91       	ld	r24, X+
    22ce:	9c 91       	ld	r25, X
    22d0:	16 97       	sbiw	r26, 0x06	; 6
    22d2:	82 0f       	add	r24, r18
    22d4:	93 1f       	adc	r25, r19
    22d6:	cc 0f       	add	r28, r28
    22d8:	dd 1f       	adc	r29, r29
    22da:	cc 0f       	add	r28, r28
    22dc:	dd 1f       	adc	r29, r29
    22de:	cc 0f       	add	r28, r28
    22e0:	dd 1f       	adc	r29, r29
    22e2:	c4 58       	subi	r28, 0x84	; 132
    22e4:	dd 4d       	sbci	r29, 0xDD	; 221
    22e6:	88 83       	st	Y, r24
    22e8:	99 83       	std	Y+1, r25	; 0x01
    22ea:	f7 01       	movw	r30, r14
    22ec:	02 e0       	ldi	r16, 0x02	; 2
    22ee:	06 93       	lac	Z, r16
    22f0:	e4 c0       	rjmp	.+456    	; 0x24ba <udd_ep_trans_complet+0x2f0>
    22f2:	d8 01       	movw	r26, r16
    22f4:	8c 91       	ld	r24, X
    22f6:	81 ff       	sbrs	r24, 1
    22f8:	cd c0       	rjmp	.+410    	; 0x2494 <udd_ep_trans_complet+0x2ca>
    22fa:	8d 7f       	andi	r24, 0xFD	; 253
    22fc:	8c 93       	st	X, r24
    22fe:	cc 0f       	add	r28, r28
    2300:	dd 1f       	adc	r29, r29
    2302:	cc 0f       	add	r28, r28
    2304:	dd 1f       	adc	r29, r29
    2306:	cc 0f       	add	r28, r28
    2308:	dd 1f       	adc	r29, r29
    230a:	c4 59       	subi	r28, 0x94	; 148
    230c:	dd 4d       	sbci	r29, 0xDD	; 221
    230e:	1a 8a       	std	Y+18, r1	; 0x12
    2310:	1b 8a       	std	Y+19, r1	; 0x13
    2312:	1e 86       	std	Y+14, r1	; 0x0e
    2314:	1f 86       	std	Y+15, r1	; 0x0f
    2316:	f7 01       	movw	r30, r14
    2318:	02 e0       	ldi	r16, 0x02	; 2
    231a:	06 93       	lac	Z, r16
    231c:	ce c0       	rjmp	.+412    	; 0x24ba <udd_ep_trans_complet+0x2f0>
    231e:	fe 01       	movw	r30, r28
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	ee 0f       	add	r30, r30
    2326:	ff 1f       	adc	r31, r31
    2328:	ee 0f       	add	r30, r30
    232a:	ff 1f       	adc	r31, r31
    232c:	e4 59       	subi	r30, 0x94	; 148
    232e:	fd 4d       	sbci	r31, 0xDD	; 221
    2330:	a6 84       	ldd	r10, Z+14	; 0x0e
    2332:	b7 84       	ldd	r11, Z+15	; 0x0f
    2334:	d8 01       	movw	r26, r16
    2336:	8c 91       	ld	r24, X
    2338:	82 ff       	sbrs	r24, 2
    233a:	1b c0       	rjmp	.+54     	; 0x2372 <udd_ep_trans_complet+0x1a8>
    233c:	11 96       	adiw	r26, 0x01	; 1
    233e:	ed 91       	ld	r30, X+
    2340:	fc 91       	ld	r31, X
    2342:	12 97       	sbiw	r26, 0x02	; 2
    2344:	15 96       	adiw	r26, 0x05	; 5
    2346:	2d 91       	ld	r18, X+
    2348:	3c 91       	ld	r19, X
    234a:	16 97       	sbiw	r26, 0x06	; 6
    234c:	13 96       	adiw	r26, 0x03	; 3
    234e:	8d 91       	ld	r24, X+
    2350:	9c 91       	ld	r25, X
    2352:	14 97       	sbiw	r26, 0x04	; 4
    2354:	b4 01       	movw	r22, r8
    2356:	0e 94 50 23 	call	0x46a0	; 0x46a0 <__udivmodhi4>
    235a:	b0 e4       	ldi	r27, 0x40	; 64
    235c:	db 9e       	mul	r13, r27
    235e:	b0 01       	movw	r22, r0
    2360:	11 24       	eor	r1, r1
    2362:	60 5c       	subi	r22, 0xC0	; 192
    2364:	7e 4d       	sbci	r23, 0xDE	; 222
    2366:	ac 01       	movw	r20, r24
    2368:	cf 01       	movw	r24, r30
    236a:	82 0f       	add	r24, r18
    236c:	93 1f       	adc	r25, r19
    236e:	0e 94 9d 23 	call	0x473a	; 0x473a <memcpy>
    2372:	f8 01       	movw	r30, r16
    2374:	25 81       	ldd	r18, Z+5	; 0x05
    2376:	36 81       	ldd	r19, Z+6	; 0x06
    2378:	2a 0d       	add	r18, r10
    237a:	3b 1d       	adc	r19, r11
    237c:	25 83       	std	Z+5, r18	; 0x05
    237e:	36 83       	std	Z+6, r19	; 0x06
    2380:	83 81       	ldd	r24, Z+3	; 0x03
    2382:	94 81       	ldd	r25, Z+4	; 0x04
    2384:	82 17       	cp	r24, r18
    2386:	93 07       	cpc	r25, r19
    2388:	68 f4       	brcc	.+26     	; 0x23a4 <udd_ep_trans_complet+0x1da>
    238a:	85 83       	std	Z+5, r24	; 0x05
    238c:	96 83       	std	Z+6, r25	; 0x06
    238e:	cc 0f       	add	r28, r28
    2390:	dd 1f       	adc	r29, r29
    2392:	cc 0f       	add	r28, r28
    2394:	dd 1f       	adc	r29, r29
    2396:	cc 0f       	add	r28, r28
    2398:	dd 1f       	adc	r29, r29
    239a:	c4 59       	subi	r28, 0x94	; 148
    239c:	dd 4d       	sbci	r29, 0xDD	; 221
    239e:	8a 89       	ldd	r24, Y+18	; 0x12
    23a0:	9b 89       	ldd	r25, Y+19	; 0x13
    23a2:	78 c0       	rjmp	.+240    	; 0x2494 <udd_ep_trans_complet+0x2ca>
    23a4:	fe 01       	movw	r30, r28
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	e4 59       	subi	r30, 0x94	; 148
    23b4:	fd 4d       	sbci	r31, 0xDD	; 221
    23b6:	42 89       	ldd	r20, Z+18	; 0x12
    23b8:	53 89       	ldd	r21, Z+19	; 0x13
    23ba:	a4 16       	cp	r10, r20
    23bc:	b5 06       	cpc	r11, r21
    23be:	09 f0       	breq	.+2      	; 0x23c2 <udd_ep_trans_complet+0x1f8>
    23c0:	69 c0       	rjmp	.+210    	; 0x2494 <udd_ep_trans_complet+0x2ca>
    23c2:	28 17       	cp	r18, r24
    23c4:	39 07       	cpc	r19, r25
    23c6:	09 f4       	brne	.+2      	; 0x23ca <udd_ep_trans_complet+0x200>
    23c8:	65 c0       	rjmp	.+202    	; 0x2494 <udd_ep_trans_complet+0x2ca>
    23ca:	ac 01       	movw	r20, r24
    23cc:	42 1b       	sub	r20, r18
    23ce:	53 0b       	sbc	r21, r19
    23d0:	9a 01       	movw	r18, r20
    23d2:	21 15       	cp	r18, r1
    23d4:	54 e0       	ldi	r21, 0x04	; 4
    23d6:	35 07       	cpc	r19, r21
    23d8:	48 f0       	brcs	.+18     	; 0x23ec <udd_ep_trans_complet+0x222>
    23da:	2f ef       	ldi	r18, 0xFF	; 255
    23dc:	33 e0       	ldi	r19, 0x03	; 3
    23de:	c9 01       	movw	r24, r18
    23e0:	b4 01       	movw	r22, r8
    23e2:	0e 94 50 23 	call	0x46a0	; 0x46a0 <__udivmodhi4>
    23e6:	28 1b       	sub	r18, r24
    23e8:	39 0b       	sbc	r19, r25
    23ea:	06 c0       	rjmp	.+12     	; 0x23f8 <udd_ep_trans_complet+0x22e>
    23ec:	c9 01       	movw	r24, r18
    23ee:	b4 01       	movw	r22, r8
    23f0:	0e 94 50 23 	call	0x46a0	; 0x46a0 <__udivmodhi4>
    23f4:	28 1b       	sub	r18, r24
    23f6:	39 0b       	sbc	r19, r25
    23f8:	fe 01       	movw	r30, r28
    23fa:	ee 0f       	add	r30, r30
    23fc:	ff 1f       	adc	r31, r31
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	ee 0f       	add	r30, r30
    2404:	ff 1f       	adc	r31, r31
    2406:	e4 59       	subi	r30, 0x94	; 148
    2408:	fd 4d       	sbci	r31, 0xDD	; 221
    240a:	16 86       	std	Z+14, r1	; 0x0e
    240c:	17 86       	std	Z+15, r1	; 0x0f
    240e:	28 15       	cp	r18, r8
    2410:	39 05       	cpc	r19, r9
    2412:	00 f5       	brcc	.+64     	; 0x2454 <udd_ep_trans_complet+0x28a>
    2414:	d8 01       	movw	r26, r16
    2416:	8c 91       	ld	r24, X
    2418:	84 60       	ori	r24, 0x04	; 4
    241a:	8c 93       	st	X, r24
    241c:	b0 e4       	ldi	r27, 0x40	; 64
    241e:	db 9e       	mul	r13, r27
    2420:	c0 01       	movw	r24, r0
    2422:	11 24       	eor	r1, r1
    2424:	80 5c       	subi	r24, 0xC0	; 192
    2426:	9e 4d       	sbci	r25, 0xDE	; 222
    2428:	fe 01       	movw	r30, r28
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	e4 58       	subi	r30, 0x84	; 132
    2438:	fd 4d       	sbci	r31, 0xDD	; 221
    243a:	80 83       	st	Z, r24
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	cc 0f       	add	r28, r28
    2440:	dd 1f       	adc	r29, r29
    2442:	cc 0f       	add	r28, r28
    2444:	dd 1f       	adc	r29, r29
    2446:	cc 0f       	add	r28, r28
    2448:	dd 1f       	adc	r29, r29
    244a:	c4 59       	subi	r28, 0x94	; 148
    244c:	dd 4d       	sbci	r29, 0xDD	; 221
    244e:	8a 8a       	std	Y+18, r8	; 0x12
    2450:	9b 8a       	std	Y+19, r9	; 0x13
    2452:	1c c0       	rjmp	.+56     	; 0x248c <udd_ep_trans_complet+0x2c2>
    2454:	f8 01       	movw	r30, r16
    2456:	41 81       	ldd	r20, Z+1	; 0x01
    2458:	52 81       	ldd	r21, Z+2	; 0x02
    245a:	85 81       	ldd	r24, Z+5	; 0x05
    245c:	96 81       	ldd	r25, Z+6	; 0x06
    245e:	84 0f       	add	r24, r20
    2460:	95 1f       	adc	r25, r21
    2462:	fe 01       	movw	r30, r28
    2464:	ee 0f       	add	r30, r30
    2466:	ff 1f       	adc	r31, r31
    2468:	ee 0f       	add	r30, r30
    246a:	ff 1f       	adc	r31, r31
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	e4 58       	subi	r30, 0x84	; 132
    2472:	fd 4d       	sbci	r31, 0xDD	; 221
    2474:	80 83       	st	Z, r24
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	cc 0f       	add	r28, r28
    247a:	dd 1f       	adc	r29, r29
    247c:	cc 0f       	add	r28, r28
    247e:	dd 1f       	adc	r29, r29
    2480:	cc 0f       	add	r28, r28
    2482:	dd 1f       	adc	r29, r29
    2484:	c4 59       	subi	r28, 0x94	; 148
    2486:	dd 4d       	sbci	r29, 0xDD	; 221
    2488:	2a 8b       	std	Y+18, r18	; 0x12
    248a:	3b 8b       	std	Y+19, r19	; 0x13
    248c:	f7 01       	movw	r30, r14
    248e:	02 e0       	ldi	r16, 0x02	; 2
    2490:	06 93       	lac	Z, r16
    2492:	13 c0       	rjmp	.+38     	; 0x24ba <udd_ep_trans_complet+0x2f0>
    2494:	d8 01       	movw	r26, r16
    2496:	8c 91       	ld	r24, X
    2498:	80 ff       	sbrs	r24, 0
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <udd_ep_trans_complet+0x2f0>
    249c:	8e 7f       	andi	r24, 0xFE	; 254
    249e:	8c 93       	st	X, r24
    24a0:	17 96       	adiw	r26, 0x07	; 7
    24a2:	ed 91       	ld	r30, X+
    24a4:	fc 91       	ld	r31, X
    24a6:	18 97       	sbiw	r26, 0x08	; 8
    24a8:	30 97       	sbiw	r30, 0x00	; 0
    24aa:	39 f0       	breq	.+14     	; 0x24ba <udd_ep_trans_complet+0x2f0>
    24ac:	15 96       	adiw	r26, 0x05	; 5
    24ae:	6d 91       	ld	r22, X+
    24b0:	7c 91       	ld	r23, X
    24b2:	16 97       	sbiw	r26, 0x06	; 6
    24b4:	4d 2d       	mov	r20, r13
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	19 95       	eicall
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	ff 90       	pop	r15
    24c4:	ef 90       	pop	r14
    24c6:	df 90       	pop	r13
    24c8:	bf 90       	pop	r11
    24ca:	af 90       	pop	r10
    24cc:	9f 90       	pop	r9
    24ce:	8f 90       	pop	r8
    24d0:	08 95       	ret

000024d2 <udd_attach>:
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	1f 92       	push	r1
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	8f b7       	in	r24, 0x3f	; 63
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	f8 94       	cli
    24e4:	19 81       	ldd	r17, Y+1	; 0x01
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	cd dc       	rcall	.-1638   	; 0x1e84 <udd_sleep_mode>
    24ea:	ea ec       	ldi	r30, 0xCA	; 202
    24ec:	f4 e0       	ldi	r31, 0x04	; 4
    24ee:	80 e4       	ldi	r24, 0x40	; 64
    24f0:	80 83       	st	Z, r24
    24f2:	80 e2       	ldi	r24, 0x20	; 32
    24f4:	80 83       	st	Z, r24
    24f6:	e1 ec       	ldi	r30, 0xC1	; 193
    24f8:	f4 e0       	ldi	r31, 0x04	; 4
    24fa:	80 81       	ld	r24, Z
    24fc:	81 60       	ori	r24, 0x01	; 1
    24fe:	80 83       	st	Z, r24
    2500:	a9 ec       	ldi	r26, 0xC9	; 201
    2502:	b4 e0       	ldi	r27, 0x04	; 4
    2504:	8c 91       	ld	r24, X
    2506:	82 60       	ori	r24, 0x02	; 2
    2508:	8c 93       	st	X, r24
    250a:	e8 ec       	ldi	r30, 0xC8	; 200
    250c:	f4 e0       	ldi	r31, 0x04	; 4
    250e:	80 81       	ld	r24, Z
    2510:	80 64       	ori	r24, 0x40	; 64
    2512:	80 83       	st	Z, r24
    2514:	8c 91       	ld	r24, X
    2516:	81 60       	ori	r24, 0x01	; 1
    2518:	8c 93       	st	X, r24
    251a:	80 81       	ld	r24, Z
    251c:	80 68       	ori	r24, 0x80	; 128
    251e:	80 83       	st	Z, r24
    2520:	1f bf       	out	0x3f, r17	; 63
    2522:	0f 90       	pop	r0
    2524:	df 91       	pop	r29
    2526:	cf 91       	pop	r28
    2528:	1f 91       	pop	r17
    252a:	08 95       	ret

0000252c <udd_enable>:
    252c:	0f 93       	push	r16
    252e:	1f 93       	push	r17
    2530:	cf 93       	push	r28
    2532:	df 93       	push	r29
    2534:	1f 92       	push	r1
    2536:	1f 92       	push	r1
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	00 e6       	ldi	r16, 0x60	; 96
    253e:	10 e0       	ldi	r17, 0x00	; 0
    2540:	f8 01       	movw	r30, r16
    2542:	10 82       	st	Z, r1
    2544:	80 e3       	ldi	r24, 0x30	; 48
    2546:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <sysclk_enable_usb>
    254a:	e0 ec       	ldi	r30, 0xC0	; 192
    254c:	f4 e0       	ldi	r31, 0x04	; 4
    254e:	80 81       	ld	r24, Z
    2550:	80 64       	ori	r24, 0x40	; 64
    2552:	80 83       	st	Z, r24
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	f8 01       	movw	r30, r16
    2558:	80 83       	st	Z, r24
    255a:	8f b7       	in	r24, 0x3f	; 63
    255c:	8a 83       	std	Y+2, r24	; 0x02
    255e:	f8 94       	cli
    2560:	1a 81       	ldd	r17, Y+2	; 0x02
    2562:	ec e6       	ldi	r30, 0x6C	; 108
    2564:	f2 e2       	ldi	r31, 0x22	; 34
    2566:	15 86       	std	Z+13, r1	; 0x0d
    2568:	15 8a       	std	Z+21, r1	; 0x15
    256a:	15 8e       	std	Z+29, r1	; 0x1d
    256c:	15 a2       	std	Z+37, r1	; 0x25
    256e:	15 a6       	std	Z+45, r1	; 0x2d
    2570:	15 aa       	std	Z+53, r1	; 0x35
    2572:	e0 e0       	ldi	r30, 0x00	; 0
    2574:	f2 e2       	ldi	r31, 0x22	; 34
    2576:	80 81       	ld	r24, Z
    2578:	8e 7f       	andi	r24, 0xFE	; 254
    257a:	80 83       	st	Z, r24
    257c:	e9 e0       	ldi	r30, 0x09	; 9
    257e:	f2 e2       	ldi	r31, 0x22	; 34
    2580:	80 81       	ld	r24, Z
    2582:	8e 7f       	andi	r24, 0xFE	; 254
    2584:	80 83       	st	Z, r24
    2586:	e2 e1       	ldi	r30, 0x12	; 18
    2588:	f2 e2       	ldi	r31, 0x22	; 34
    258a:	80 81       	ld	r24, Z
    258c:	8e 7f       	andi	r24, 0xFE	; 254
    258e:	80 83       	st	Z, r24
    2590:	eb e1       	ldi	r30, 0x1B	; 27
    2592:	f2 e2       	ldi	r31, 0x22	; 34
    2594:	80 81       	ld	r24, Z
    2596:	8e 7f       	andi	r24, 0xFE	; 254
    2598:	80 83       	st	Z, r24
    259a:	6a e1       	ldi	r22, 0x1A	; 26
    259c:	70 e0       	ldi	r23, 0x00	; 0
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	0e 94 40 23 	call	0x4680	; 0x4680 <nvm_read_byte>
    25a4:	8f 3f       	cpi	r24, 0xFF	; 255
    25a6:	19 f0       	breq	.+6      	; 0x25ae <udd_enable+0x82>
    25a8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    25ac:	03 c0       	rjmp	.+6      	; 0x25b4 <udd_enable+0x88>
    25ae:	8f e1       	ldi	r24, 0x1F	; 31
    25b0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    25b4:	6b e1       	ldi	r22, 0x1B	; 27
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	82 e0       	ldi	r24, 0x02	; 2
    25ba:	0e 94 40 23 	call	0x4680	; 0x4680 <nvm_read_byte>
    25be:	8f 3f       	cpi	r24, 0xFF	; 255
    25c0:	19 f0       	breq	.+6      	; 0x25c8 <udd_enable+0x9c>
    25c2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    25c6:	03 c0       	rjmp	.+6      	; 0x25ce <udd_enable+0xa2>
    25c8:	8f e1       	ldi	r24, 0x1F	; 31
    25ca:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    25ce:	e0 ec       	ldi	r30, 0xC0	; 192
    25d0:	f4 e0       	ldi	r31, 0x04	; 4
    25d2:	80 81       	ld	r24, Z
    25d4:	82 60       	ori	r24, 0x02	; 2
    25d6:	80 83       	st	Z, r24
    25d8:	80 81       	ld	r24, Z
    25da:	80 68       	ori	r24, 0x80	; 128
    25dc:	80 83       	st	Z, r24
    25de:	80 81       	ld	r24, Z
    25e0:	80 61       	ori	r24, 0x10	; 16
    25e2:	80 83       	st	Z, r24
    25e4:	88 e7       	ldi	r24, 0x78	; 120
    25e6:	92 e2       	ldi	r25, 0x22	; 34
    25e8:	86 83       	std	Z+6, r24	; 0x06
    25ea:	97 83       	std	Z+7, r25	; 0x07
    25ec:	80 81       	ld	r24, Z
    25ee:	80 62       	ori	r24, 0x20	; 32
    25f0:	80 83       	st	Z, r24
    25f2:	8f ef       	ldi	r24, 0xFF	; 255
    25f4:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    25f8:	e8 ec       	ldi	r30, 0xC8	; 200
    25fa:	f4 e0       	ldi	r31, 0x04	; 4
    25fc:	80 81       	ld	r24, Z
    25fe:	81 60       	ori	r24, 0x01	; 1
    2600:	80 83       	st	Z, r24
    2602:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <udd_b_idle>
    2606:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <sleepmgr_locks+0x5>
    260a:	8f 3f       	cpi	r24, 0xFF	; 255
    260c:	09 f4       	brne	.+2      	; 0x2610 <udd_enable+0xe4>
    260e:	ff cf       	rjmp	.-2      	; 0x260e <udd_enable+0xe2>
    2610:	8f b7       	in	r24, 0x3f	; 63
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	f8 94       	cli
    2616:	99 81       	ldd	r25, Y+1	; 0x01
    2618:	eb e2       	ldi	r30, 0x2B	; 43
    261a:	f4 e2       	ldi	r31, 0x24	; 36
    261c:	85 81       	ldd	r24, Z+5	; 0x05
    261e:	8f 5f       	subi	r24, 0xFF	; 255
    2620:	85 83       	std	Z+5, r24	; 0x05
    2622:	9f bf       	out	0x3f, r25	; 63
    2624:	56 df       	rcall	.-340    	; 0x24d2 <udd_attach>
    2626:	1f bf       	out	0x3f, r17	; 63
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	08 95       	ret

00002636 <udd_is_high_speed>:
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	08 95       	ret

0000263a <udd_set_address>:
    263a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    263e:	08 95       	ret

00002640 <udd_getaddress>:
    2640:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2644:	08 95       	ret

00002646 <udd_get_frame_number>:
    2646:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <udd_sram+0x3c>
    264a:	90 91 a9 22 	lds	r25, 0x22A9	; 0x8022a9 <udd_sram+0x3d>
    264e:	08 95       	ret

00002650 <udd_get_micro_frame_number>:
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	08 95       	ret

00002656 <udd_set_setup_payload>:
    2656:	eb e1       	ldi	r30, 0x1B	; 27
    2658:	f4 e2       	ldi	r31, 0x24	; 36
    265a:	80 87       	std	Z+8, r24	; 0x08
    265c:	91 87       	std	Z+9, r25	; 0x09
    265e:	62 87       	std	Z+10, r22	; 0x0a
    2660:	73 87       	std	Z+11, r23	; 0x0b
    2662:	08 95       	ret

00002664 <udd_ep_alloc>:
    2664:	28 2f       	mov	r18, r24
    2666:	2f 70       	andi	r18, 0x0F	; 15
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	22 0f       	add	r18, r18
    266c:	33 1f       	adc	r19, r19
    266e:	08 2e       	mov	r0, r24
    2670:	00 0c       	add	r0, r0
    2672:	99 0b       	sbc	r25, r25
    2674:	88 27       	eor	r24, r24
    2676:	99 0f       	add	r25, r25
    2678:	88 1f       	adc	r24, r24
    267a:	99 27       	eor	r25, r25
    267c:	82 0f       	add	r24, r18
    267e:	93 1f       	adc	r25, r19
    2680:	fc 01       	movw	r30, r24
    2682:	ee 0f       	add	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	ee 0f       	add	r30, r30
    2688:	ff 1f       	adc	r31, r31
    268a:	ee 0f       	add	r30, r30
    268c:	ff 1f       	adc	r31, r31
    268e:	e4 59       	subi	r30, 0x94	; 148
    2690:	fd 4d       	sbci	r31, 0xDD	; 221
    2692:	25 85       	ldd	r18, Z+13	; 0x0d
    2694:	20 7c       	andi	r18, 0xC0	; 192
    2696:	09 f0       	breq	.+2      	; 0x269a <udd_ep_alloc+0x36>
    2698:	69 c0       	rjmp	.+210    	; 0x276c <udd_ep_alloc+0x108>
    269a:	63 70       	andi	r22, 0x03	; 3
    269c:	61 30       	cpi	r22, 0x01	; 1
    269e:	11 f0       	breq	.+4      	; 0x26a4 <udd_ep_alloc+0x40>
    26a0:	18 f4       	brcc	.+6      	; 0x26a8 <udd_ep_alloc+0x44>
    26a2:	04 c0       	rjmp	.+8      	; 0x26ac <udd_ep_alloc+0x48>
    26a4:	60 ec       	ldi	r22, 0xC0	; 192
    26a6:	03 c0       	rjmp	.+6      	; 0x26ae <udd_ep_alloc+0x4a>
    26a8:	60 e8       	ldi	r22, 0x80	; 128
    26aa:	01 c0       	rjmp	.+2      	; 0x26ae <udd_ep_alloc+0x4a>
    26ac:	60 e4       	ldi	r22, 0x40	; 64
    26ae:	40 38       	cpi	r20, 0x80	; 128
    26b0:	51 05       	cpc	r21, r1
    26b2:	e9 f0       	breq	.+58     	; 0x26ee <udd_ep_alloc+0x8a>
    26b4:	50 f4       	brcc	.+20     	; 0x26ca <udd_ep_alloc+0x66>
    26b6:	40 32       	cpi	r20, 0x20	; 32
    26b8:	51 05       	cpc	r21, r1
    26ba:	a9 f0       	breq	.+42     	; 0x26e6 <udd_ep_alloc+0x82>
    26bc:	40 34       	cpi	r20, 0x40	; 64
    26be:	51 05       	cpc	r21, r1
    26c0:	a1 f0       	breq	.+40     	; 0x26ea <udd_ep_alloc+0x86>
    26c2:	40 31       	cpi	r20, 0x10	; 16
    26c4:	51 05       	cpc	r21, r1
    26c6:	d9 f4       	brne	.+54     	; 0x26fe <udd_ep_alloc+0x9a>
    26c8:	0c c0       	rjmp	.+24     	; 0x26e2 <udd_ep_alloc+0x7e>
    26ca:	41 15       	cp	r20, r1
    26cc:	22 e0       	ldi	r18, 0x02	; 2
    26ce:	52 07       	cpc	r21, r18
    26d0:	91 f0       	breq	.+36     	; 0x26f6 <udd_ep_alloc+0x92>
    26d2:	4f 3f       	cpi	r20, 0xFF	; 255
    26d4:	23 e0       	ldi	r18, 0x03	; 3
    26d6:	52 07       	cpc	r21, r18
    26d8:	81 f0       	breq	.+32     	; 0x26fa <udd_ep_alloc+0x96>
    26da:	41 15       	cp	r20, r1
    26dc:	51 40       	sbci	r21, 0x01	; 1
    26de:	79 f4       	brne	.+30     	; 0x26fe <udd_ep_alloc+0x9a>
    26e0:	08 c0       	rjmp	.+16     	; 0x26f2 <udd_ep_alloc+0x8e>
    26e2:	21 e0       	ldi	r18, 0x01	; 1
    26e4:	0d c0       	rjmp	.+26     	; 0x2700 <udd_ep_alloc+0x9c>
    26e6:	22 e0       	ldi	r18, 0x02	; 2
    26e8:	0b c0       	rjmp	.+22     	; 0x2700 <udd_ep_alloc+0x9c>
    26ea:	23 e0       	ldi	r18, 0x03	; 3
    26ec:	09 c0       	rjmp	.+18     	; 0x2700 <udd_ep_alloc+0x9c>
    26ee:	24 e0       	ldi	r18, 0x04	; 4
    26f0:	07 c0       	rjmp	.+14     	; 0x2700 <udd_ep_alloc+0x9c>
    26f2:	25 e0       	ldi	r18, 0x05	; 5
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <udd_ep_alloc+0x9c>
    26f6:	26 e0       	ldi	r18, 0x06	; 6
    26f8:	03 c0       	rjmp	.+6      	; 0x2700 <udd_ep_alloc+0x9c>
    26fa:	27 e0       	ldi	r18, 0x07	; 7
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <udd_ep_alloc+0x9c>
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	fc 01       	movw	r30, r24
    2702:	ee 0f       	add	r30, r30
    2704:	ff 1f       	adc	r31, r31
    2706:	ee 0f       	add	r30, r30
    2708:	ff 1f       	adc	r31, r31
    270a:	ee 0f       	add	r30, r30
    270c:	ff 1f       	adc	r31, r31
    270e:	e4 59       	subi	r30, 0x94	; 148
    2710:	fd 4d       	sbci	r31, 0xDD	; 221
    2712:	15 86       	std	Z+13, r1	; 0x0d
    2714:	36 e0       	ldi	r19, 0x06	; 6
    2716:	34 87       	std	Z+12, r19	; 0x0c
    2718:	26 2b       	or	r18, r22
    271a:	25 87       	std	Z+13, r18	; 0x0d
    271c:	fc 01       	movw	r30, r24
    271e:	ee 0f       	add	r30, r30
    2720:	ff 1f       	adc	r31, r31
    2722:	ee 0f       	add	r30, r30
    2724:	ff 1f       	adc	r31, r31
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	e4 59       	subi	r30, 0x94	; 148
    272c:	fd 4d       	sbci	r31, 0xDD	; 221
    272e:	25 85       	ldd	r18, Z+13	; 0x0d
    2730:	20 7c       	andi	r18, 0xC0	; 192
    2732:	20 3c       	cpi	r18, 0xC0	; 192
    2734:	69 f4       	brne	.+26     	; 0x2750 <udd_ep_alloc+0xec>
    2736:	fc 01       	movw	r30, r24
    2738:	ee 0f       	add	r30, r30
    273a:	ff 1f       	adc	r31, r31
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	ee 0f       	add	r30, r30
    2742:	ff 1f       	adc	r31, r31
    2744:	e4 59       	subi	r30, 0x94	; 148
    2746:	fd 4d       	sbci	r31, 0xDD	; 221
    2748:	25 85       	ldd	r18, Z+13	; 0x0d
    274a:	27 70       	andi	r18, 0x07	; 7
    274c:	27 30       	cpi	r18, 0x07	; 7
    274e:	81 f0       	breq	.+32     	; 0x2770 <udd_ep_alloc+0x10c>
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	fc 01       	movw	r30, r24
    275e:	e4 59       	subi	r30, 0x94	; 148
    2760:	fd 4d       	sbci	r31, 0xDD	; 221
    2762:	85 85       	ldd	r24, Z+13	; 0x0d
    2764:	80 62       	ori	r24, 0x20	; 32
    2766:	85 87       	std	Z+13, r24	; 0x0d
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	08 95       	ret
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	08 95       	ret
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	08 95       	ret

00002774 <udd_ep_is_halted>:
    2774:	e8 2f       	mov	r30, r24
    2776:	ef 70       	andi	r30, 0x0F	; 15
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	ee 0f       	add	r30, r30
    277c:	ff 1f       	adc	r31, r31
    277e:	08 2e       	mov	r0, r24
    2780:	00 0c       	add	r0, r0
    2782:	99 0b       	sbc	r25, r25
    2784:	88 27       	eor	r24, r24
    2786:	99 0f       	add	r25, r25
    2788:	88 1f       	adc	r24, r24
    278a:	99 27       	eor	r25, r25
    278c:	e8 0f       	add	r30, r24
    278e:	f9 1f       	adc	r31, r25
    2790:	ee 0f       	add	r30, r30
    2792:	ff 1f       	adc	r31, r31
    2794:	ee 0f       	add	r30, r30
    2796:	ff 1f       	adc	r31, r31
    2798:	ee 0f       	add	r30, r30
    279a:	ff 1f       	adc	r31, r31
    279c:	e4 59       	subi	r30, 0x94	; 148
    279e:	fd 4d       	sbci	r31, 0xDD	; 221
    27a0:	85 85       	ldd	r24, Z+13	; 0x0d
    27a2:	82 fb       	bst	r24, 2
    27a4:	88 27       	eor	r24, r24
    27a6:	80 f9       	bld	r24, 0
    27a8:	08 95       	ret

000027aa <udd_ep_clear_halt>:
    27aa:	0f 93       	push	r16
    27ac:	28 2f       	mov	r18, r24
    27ae:	2f 70       	andi	r18, 0x0F	; 15
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	a9 01       	movw	r20, r18
    27b4:	44 0f       	add	r20, r20
    27b6:	55 1f       	adc	r21, r21
    27b8:	28 2f       	mov	r18, r24
    27ba:	08 2e       	mov	r0, r24
    27bc:	00 0c       	add	r0, r0
    27be:	33 0b       	sbc	r19, r19
    27c0:	22 27       	eor	r18, r18
    27c2:	33 0f       	add	r19, r19
    27c4:	22 1f       	adc	r18, r18
    27c6:	33 27       	eor	r19, r19
    27c8:	24 0f       	add	r18, r20
    27ca:	35 1f       	adc	r19, r21
    27cc:	a9 01       	movw	r20, r18
    27ce:	44 0f       	add	r20, r20
    27d0:	55 1f       	adc	r21, r21
    27d2:	44 0f       	add	r20, r20
    27d4:	55 1f       	adc	r21, r21
    27d6:	44 0f       	add	r20, r20
    27d8:	55 1f       	adc	r21, r21
    27da:	fa 01       	movw	r30, r20
    27dc:	e8 58       	subi	r30, 0x88	; 136
    27de:	fd 4d       	sbci	r31, 0xDD	; 221
    27e0:	01 e0       	ldi	r16, 0x01	; 1
    27e2:	06 93       	lac	Z, r16
    27e4:	fa 01       	movw	r30, r20
    27e6:	e4 59       	subi	r30, 0x94	; 148
    27e8:	fd 4d       	sbci	r31, 0xDD	; 221
    27ea:	95 85       	ldd	r25, Z+13	; 0x0d
    27ec:	92 ff       	sbrs	r25, 2
    27ee:	11 c0       	rjmp	.+34     	; 0x2812 <udd_ep_clear_halt+0x68>
    27f0:	fa 01       	movw	r30, r20
    27f2:	e4 59       	subi	r30, 0x94	; 148
    27f4:	fd 4d       	sbci	r31, 0xDD	; 221
    27f6:	95 85       	ldd	r25, Z+13	; 0x0d
    27f8:	9b 7f       	andi	r25, 0xFB	; 251
    27fa:	95 87       	std	Z+13, r25	; 0x0d
    27fc:	59 dc       	rcall	.-1870   	; 0x20b0 <udd_ep_get_job>
    27fe:	fc 01       	movw	r30, r24
    2800:	80 81       	ld	r24, Z
    2802:	80 ff       	sbrs	r24, 0
    2804:	06 c0       	rjmp	.+12     	; 0x2812 <udd_ep_clear_halt+0x68>
    2806:	8e 7f       	andi	r24, 0xFE	; 254
    2808:	80 83       	st	Z, r24
    280a:	07 80       	ldd	r0, Z+7	; 0x07
    280c:	f0 85       	ldd	r31, Z+8	; 0x08
    280e:	e0 2d       	mov	r30, r0
    2810:	19 95       	eicall
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	0f 91       	pop	r16
    2816:	08 95       	ret

00002818 <udd_ep_run>:
    2818:	6f 92       	push	r6
    281a:	7f 92       	push	r7
    281c:	8f 92       	push	r8
    281e:	9f 92       	push	r9
    2820:	af 92       	push	r10
    2822:	bf 92       	push	r11
    2824:	cf 92       	push	r12
    2826:	df 92       	push	r13
    2828:	ef 92       	push	r14
    282a:	ff 92       	push	r15
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	1f 92       	push	r1
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	78 2e       	mov	r7, r24
    283c:	66 2e       	mov	r6, r22
    283e:	4a 01       	movw	r8, r20
    2840:	59 01       	movw	r10, r18
    2842:	36 dc       	rcall	.-1940   	; 0x20b0 <udd_ep_get_job>
    2844:	6c 01       	movw	r12, r24
    2846:	27 2d       	mov	r18, r7
    2848:	87 2d       	mov	r24, r7
    284a:	8f 70       	andi	r24, 0x0F	; 15
    284c:	e8 2e       	mov	r14, r24
    284e:	f1 2c       	mov	r15, r1
    2850:	c7 01       	movw	r24, r14
    2852:	88 0f       	add	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	e7 2c       	mov	r14, r7
    2858:	07 2c       	mov	r0, r7
    285a:	00 0c       	add	r0, r0
    285c:	ff 08       	sbc	r15, r15
    285e:	ee 24       	eor	r14, r14
    2860:	ff 0c       	add	r15, r15
    2862:	ee 1c       	adc	r14, r14
    2864:	ff 24       	eor	r15, r15
    2866:	e8 0e       	add	r14, r24
    2868:	f9 1e       	adc	r15, r25
    286a:	f7 01       	movw	r30, r14
    286c:	ee 0f       	add	r30, r30
    286e:	ff 1f       	adc	r31, r31
    2870:	ee 0f       	add	r30, r30
    2872:	ff 1f       	adc	r31, r31
    2874:	ee 0f       	add	r30, r30
    2876:	ff 1f       	adc	r31, r31
    2878:	e4 59       	subi	r30, 0x94	; 148
    287a:	fd 4d       	sbci	r31, 0xDD	; 221
    287c:	85 85       	ldd	r24, Z+13	; 0x0d
    287e:	80 7c       	andi	r24, 0xC0	; 192
    2880:	09 f4       	brne	.+2      	; 0x2884 <udd_ep_run+0x6c>
    2882:	82 c0       	rjmp	.+260    	; 0x2988 <udd_ep_run+0x170>
    2884:	f7 01       	movw	r30, r14
    2886:	ee 0f       	add	r30, r30
    2888:	ff 1f       	adc	r31, r31
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	ee 0f       	add	r30, r30
    2890:	ff 1f       	adc	r31, r31
    2892:	e4 59       	subi	r30, 0x94	; 148
    2894:	fd 4d       	sbci	r31, 0xDD	; 221
    2896:	85 85       	ldd	r24, Z+13	; 0x0d
    2898:	80 7c       	andi	r24, 0xC0	; 192
    289a:	80 3c       	cpi	r24, 0xC0	; 192
    289c:	61 f0       	breq	.+24     	; 0x28b6 <udd_ep_run+0x9e>
    289e:	f7 01       	movw	r30, r14
    28a0:	ee 0f       	add	r30, r30
    28a2:	ff 1f       	adc	r31, r31
    28a4:	ee 0f       	add	r30, r30
    28a6:	ff 1f       	adc	r31, r31
    28a8:	ee 0f       	add	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	e4 59       	subi	r30, 0x94	; 148
    28ae:	fd 4d       	sbci	r31, 0xDD	; 221
    28b0:	85 85       	ldd	r24, Z+13	; 0x0d
    28b2:	82 fd       	sbrc	r24, 2
    28b4:	6b c0       	rjmp	.+214    	; 0x298c <udd_ep_run+0x174>
    28b6:	8f b7       	in	r24, 0x3f	; 63
    28b8:	89 83       	std	Y+1, r24	; 0x01
    28ba:	f8 94       	cli
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	f6 01       	movw	r30, r12
    28c0:	90 81       	ld	r25, Z
    28c2:	90 ff       	sbrs	r25, 0
    28c4:	03 c0       	rjmp	.+6      	; 0x28cc <udd_ep_run+0xb4>
    28c6:	8f bf       	out	0x3f, r24	; 63
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	61 c0       	rjmp	.+194    	; 0x298e <udd_ep_run+0x176>
    28cc:	f6 01       	movw	r30, r12
    28ce:	90 81       	ld	r25, Z
    28d0:	91 60       	ori	r25, 0x01	; 1
    28d2:	90 83       	st	Z, r25
    28d4:	8f bf       	out	0x3f, r24	; 63
    28d6:	81 82       	std	Z+1, r8	; 0x01
    28d8:	92 82       	std	Z+2, r9	; 0x02
    28da:	a3 82       	std	Z+3, r10	; 0x03
    28dc:	b4 82       	std	Z+4, r11	; 0x04
    28de:	15 82       	std	Z+5, r1	; 0x05
    28e0:	16 82       	std	Z+6, r1	; 0x06
    28e2:	07 83       	std	Z+7, r16	; 0x07
    28e4:	10 87       	std	Z+8, r17	; 0x08
    28e6:	61 10       	cpse	r6, r1
    28e8:	06 c0       	rjmp	.+12     	; 0x28f6 <udd_ep_run+0xde>
    28ea:	91 e0       	ldi	r25, 0x01	; 1
    28ec:	a1 14       	cp	r10, r1
    28ee:	b1 04       	cpc	r11, r1
    28f0:	19 f0       	breq	.+6      	; 0x28f8 <udd_ep_run+0xe0>
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	01 c0       	rjmp	.+2      	; 0x28f8 <udd_ep_run+0xe0>
    28f6:	91 e0       	ldi	r25, 0x01	; 1
    28f8:	f6 01       	movw	r30, r12
    28fa:	80 81       	ld	r24, Z
    28fc:	90 fb       	bst	r25, 0
    28fe:	81 f9       	bld	r24, 1
    2900:	8b 7f       	andi	r24, 0xFB	; 251
    2902:	80 83       	st	Z, r24
    2904:	22 23       	and	r18, r18
    2906:	64 f4       	brge	.+24     	; 0x2920 <udd_ep_run+0x108>
    2908:	f7 01       	movw	r30, r14
    290a:	ee 0f       	add	r30, r30
    290c:	ff 1f       	adc	r31, r31
    290e:	ee 0f       	add	r30, r30
    2910:	ff 1f       	adc	r31, r31
    2912:	ee 0f       	add	r30, r30
    2914:	ff 1f       	adc	r31, r31
    2916:	e4 59       	subi	r30, 0x94	; 148
    2918:	fd 4d       	sbci	r31, 0xDD	; 221
    291a:	12 8a       	std	Z+18, r1	; 0x12
    291c:	13 8a       	std	Z+19, r1	; 0x13
    291e:	30 c0       	rjmp	.+96     	; 0x2980 <udd_ep_run+0x168>
    2920:	f7 01       	movw	r30, r14
    2922:	ee 0f       	add	r30, r30
    2924:	ff 1f       	adc	r31, r31
    2926:	ee 0f       	add	r30, r30
    2928:	ff 1f       	adc	r31, r31
    292a:	ee 0f       	add	r30, r30
    292c:	ff 1f       	adc	r31, r31
    292e:	e4 59       	subi	r30, 0x94	; 148
    2930:	fd 4d       	sbci	r31, 0xDD	; 221
    2932:	85 85       	ldd	r24, Z+13	; 0x0d
    2934:	80 7c       	andi	r24, 0xC0	; 192
    2936:	80 3c       	cpi	r24, 0xC0	; 192
    2938:	b1 f4       	brne	.+44     	; 0x2966 <udd_ep_run+0x14e>
    293a:	c7 01       	movw	r24, r14
    293c:	88 0f       	add	r24, r24
    293e:	99 1f       	adc	r25, r25
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	88 58       	subi	r24, 0x88	; 136
    294a:	9d 4d       	sbci	r25, 0xDD	; 221
    294c:	88 db       	rcall	.-2288   	; 0x205e <udd_ep_get_size>
    294e:	bc 01       	movw	r22, r24
    2950:	c5 01       	movw	r24, r10
    2952:	0e 94 50 23 	call	0x46a0	; 0x46a0 <__udivmodhi4>
    2956:	89 2b       	or	r24, r25
    2958:	31 f0       	breq	.+12     	; 0x2966 <udd_ep_run+0x14e>
    295a:	f6 01       	movw	r30, r12
    295c:	80 81       	ld	r24, Z
    295e:	8e 7f       	andi	r24, 0xFE	; 254
    2960:	80 83       	st	Z, r24
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	14 c0       	rjmp	.+40     	; 0x298e <udd_ep_run+0x176>
    2966:	f7 01       	movw	r30, r14
    2968:	ee 0f       	add	r30, r30
    296a:	ff 1f       	adc	r31, r31
    296c:	ee 0f       	add	r30, r30
    296e:	ff 1f       	adc	r31, r31
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	e4 59       	subi	r30, 0x94	; 148
    2976:	fd 4d       	sbci	r31, 0xDD	; 221
    2978:	16 86       	std	Z+14, r1	; 0x0e
    297a:	17 86       	std	Z+15, r1	; 0x0f
    297c:	12 8a       	std	Z+18, r1	; 0x12
    297e:	13 8a       	std	Z+19, r1	; 0x13
    2980:	87 2d       	mov	r24, r7
    2982:	23 dc       	rcall	.-1978   	; 0x21ca <udd_ep_trans_complet>
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	03 c0       	rjmp	.+6      	; 0x298e <udd_ep_run+0x176>
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	01 c0       	rjmp	.+2      	; 0x298e <udd_ep_run+0x176>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	0f 90       	pop	r0
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	ff 90       	pop	r15
    299a:	ef 90       	pop	r14
    299c:	df 90       	pop	r13
    299e:	cf 90       	pop	r12
    29a0:	bf 90       	pop	r11
    29a2:	af 90       	pop	r10
    29a4:	9f 90       	pop	r9
    29a6:	8f 90       	pop	r8
    29a8:	7f 90       	pop	r7
    29aa:	6f 90       	pop	r6
    29ac:	08 95       	ret

000029ae <udd_ep_abort>:
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	18 2f       	mov	r17, r24
    29ba:	c8 2f       	mov	r28, r24
    29bc:	cf 70       	andi	r28, 0x0F	; 15
    29be:	d0 e0       	ldi	r29, 0x00	; 0
    29c0:	ce 01       	movw	r24, r28
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	c1 2f       	mov	r28, r17
    29c8:	01 2e       	mov	r0, r17
    29ca:	00 0c       	add	r0, r0
    29cc:	dd 0b       	sbc	r29, r29
    29ce:	cc 27       	eor	r28, r28
    29d0:	dd 0f       	add	r29, r29
    29d2:	cc 1f       	adc	r28, r28
    29d4:	dd 27       	eor	r29, r29
    29d6:	c8 0f       	add	r28, r24
    29d8:	d9 1f       	adc	r29, r25
    29da:	81 2f       	mov	r24, r17
    29dc:	69 db       	rcall	.-2350   	; 0x20b0 <udd_ep_get_job>
    29de:	dc 01       	movw	r26, r24
    29e0:	fe 01       	movw	r30, r28
    29e2:	ee 0f       	add	r30, r30
    29e4:	ff 1f       	adc	r31, r31
    29e6:	ee 0f       	add	r30, r30
    29e8:	ff 1f       	adc	r31, r31
    29ea:	ee 0f       	add	r30, r30
    29ec:	ff 1f       	adc	r31, r31
    29ee:	e8 58       	subi	r30, 0x88	; 136
    29f0:	fd 4d       	sbci	r31, 0xDD	; 221
    29f2:	02 e0       	ldi	r16, 0x02	; 2
    29f4:	05 93       	las	Z, r16
    29f6:	8c 91       	ld	r24, X
    29f8:	80 ff       	sbrs	r24, 0
    29fa:	22 c0       	rjmp	.+68     	; 0x2a40 <udd_ep_abort+0x92>
    29fc:	8e 7f       	andi	r24, 0xFE	; 254
    29fe:	8c 93       	st	X, r24
    2a00:	17 96       	adiw	r26, 0x07	; 7
    2a02:	ed 91       	ld	r30, X+
    2a04:	fc 91       	ld	r31, X
    2a06:	18 97       	sbiw	r26, 0x08	; 8
    2a08:	30 97       	sbiw	r30, 0x00	; 0
    2a0a:	d1 f0       	breq	.+52     	; 0x2a40 <udd_ep_abort+0x92>
    2a0c:	11 23       	and	r17, r17
    2a0e:	5c f4       	brge	.+22     	; 0x2a26 <udd_ep_abort+0x78>
    2a10:	cc 0f       	add	r28, r28
    2a12:	dd 1f       	adc	r29, r29
    2a14:	cc 0f       	add	r28, r28
    2a16:	dd 1f       	adc	r29, r29
    2a18:	cc 0f       	add	r28, r28
    2a1a:	dd 1f       	adc	r29, r29
    2a1c:	c4 59       	subi	r28, 0x94	; 148
    2a1e:	dd 4d       	sbci	r29, 0xDD	; 221
    2a20:	6a 89       	ldd	r22, Y+18	; 0x12
    2a22:	7b 89       	ldd	r23, Y+19	; 0x13
    2a24:	0a c0       	rjmp	.+20     	; 0x2a3a <udd_ep_abort+0x8c>
    2a26:	cc 0f       	add	r28, r28
    2a28:	dd 1f       	adc	r29, r29
    2a2a:	cc 0f       	add	r28, r28
    2a2c:	dd 1f       	adc	r29, r29
    2a2e:	cc 0f       	add	r28, r28
    2a30:	dd 1f       	adc	r29, r29
    2a32:	c4 59       	subi	r28, 0x94	; 148
    2a34:	dd 4d       	sbci	r29, 0xDD	; 221
    2a36:	6e 85       	ldd	r22, Y+14	; 0x0e
    2a38:	7f 85       	ldd	r23, Y+15	; 0x0f
    2a3a:	41 2f       	mov	r20, r17
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	19 95       	eicall
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	1f 91       	pop	r17
    2a46:	0f 91       	pop	r16
    2a48:	ff 90       	pop	r15
    2a4a:	08 95       	ret

00002a4c <udd_ep_free>:
    2a4c:	cf 93       	push	r28
    2a4e:	c8 2f       	mov	r28, r24
    2a50:	ae df       	rcall	.-164    	; 0x29ae <udd_ep_abort>
    2a52:	ec 2f       	mov	r30, r28
    2a54:	ef 70       	andi	r30, 0x0F	; 15
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	ee 0f       	add	r30, r30
    2a5a:	ff 1f       	adc	r31, r31
    2a5c:	8c 2f       	mov	r24, r28
    2a5e:	cc 0f       	add	r28, r28
    2a60:	99 0b       	sbc	r25, r25
    2a62:	88 27       	eor	r24, r24
    2a64:	99 0f       	add	r25, r25
    2a66:	88 1f       	adc	r24, r24
    2a68:	99 27       	eor	r25, r25
    2a6a:	e8 0f       	add	r30, r24
    2a6c:	f9 1f       	adc	r31, r25
    2a6e:	ee 0f       	add	r30, r30
    2a70:	ff 1f       	adc	r31, r31
    2a72:	ee 0f       	add	r30, r30
    2a74:	ff 1f       	adc	r31, r31
    2a76:	ee 0f       	add	r30, r30
    2a78:	ff 1f       	adc	r31, r31
    2a7a:	e4 59       	subi	r30, 0x94	; 148
    2a7c:	fd 4d       	sbci	r31, 0xDD	; 221
    2a7e:	15 86       	std	Z+13, r1	; 0x0d
    2a80:	cf 91       	pop	r28
    2a82:	08 95       	ret

00002a84 <udd_ep_set_halt>:
    2a84:	e8 2f       	mov	r30, r24
    2a86:	ef 70       	andi	r30, 0x0F	; 15
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	ee 0f       	add	r30, r30
    2a8c:	ff 1f       	adc	r31, r31
    2a8e:	28 2f       	mov	r18, r24
    2a90:	08 2e       	mov	r0, r24
    2a92:	00 0c       	add	r0, r0
    2a94:	33 0b       	sbc	r19, r19
    2a96:	22 27       	eor	r18, r18
    2a98:	33 0f       	add	r19, r19
    2a9a:	22 1f       	adc	r18, r18
    2a9c:	33 27       	eor	r19, r19
    2a9e:	e2 0f       	add	r30, r18
    2aa0:	f3 1f       	adc	r31, r19
    2aa2:	ee 0f       	add	r30, r30
    2aa4:	ff 1f       	adc	r31, r31
    2aa6:	ee 0f       	add	r30, r30
    2aa8:	ff 1f       	adc	r31, r31
    2aaa:	ee 0f       	add	r30, r30
    2aac:	ff 1f       	adc	r31, r31
    2aae:	e4 59       	subi	r30, 0x94	; 148
    2ab0:	fd 4d       	sbci	r31, 0xDD	; 221
    2ab2:	95 85       	ldd	r25, Z+13	; 0x0d
    2ab4:	94 60       	ori	r25, 0x04	; 4
    2ab6:	95 87       	std	Z+13, r25	; 0x0d
    2ab8:	7a df       	rcall	.-268    	; 0x29ae <udd_ep_abort>
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	08 95       	ret

00002abe <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2abe:	1f 92       	push	r1
    2ac0:	0f 92       	push	r0
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	0f 92       	push	r0
    2ac6:	11 24       	eor	r1, r1
    2ac8:	0b b6       	in	r0, 0x3b	; 59
    2aca:	0f 92       	push	r0
    2acc:	0f 93       	push	r16
    2ace:	2f 93       	push	r18
    2ad0:	3f 93       	push	r19
    2ad2:	4f 93       	push	r20
    2ad4:	5f 93       	push	r21
    2ad6:	6f 93       	push	r22
    2ad8:	7f 93       	push	r23
    2ada:	8f 93       	push	r24
    2adc:	9f 93       	push	r25
    2ade:	af 93       	push	r26
    2ae0:	bf 93       	push	r27
    2ae2:	ef 93       	push	r30
    2ae4:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2ae6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2aea:	88 23       	and	r24, r24
    2aec:	34 f4       	brge	.+12     	; 0x2afa <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2aee:	80 e8       	ldi	r24, 0x80	; 128
    2af0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2af4:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2af8:	88 c0       	rjmp	.+272    	; 0x2c0a <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2afa:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2afe:	82 ff       	sbrs	r24, 2
    2b00:	20 c0       	rjmp	.+64     	; 0x2b42 <__vector_125+0x84>
		udd_ack_underflow_event();
    2b02:	84 e0       	ldi	r24, 0x04	; 4
    2b04:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2b08:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_sram+0x14>
    2b0c:	86 ff       	sbrs	r24, 6
    2b0e:	7d c0       	rjmp	.+250    	; 0x2c0a <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2b10:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b14:	81 fd       	sbrc	r24, 1
    2b16:	79 c0       	rjmp	.+242    	; 0x2c0a <__vector_125+0x14c>
    2b18:	e6 da       	rcall	.-2612   	; 0x20e6 <udd_ctrl_interrupt_tc_setup>
    2b1a:	81 11       	cpse	r24, r1
    2b1c:	76 c0       	rjmp	.+236    	; 0x2c0a <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2b1e:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    2b22:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2b24:	11 f4       	brne	.+4      	; 0x2b2a <__vector_125+0x6c>
    2b26:	19 da       	rcall	.-3022   	; 0x1f5a <udd_ctrl_send_zlp_in>
    2b28:	70 c0       	rjmp	.+224    	; 0x2c0a <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b2a:	84 30       	cpi	r24, 0x04	; 4
    2b2c:	09 f0       	breq	.+2      	; 0x2b30 <__vector_125+0x72>
    2b2e:	6d c0       	rjmp	.+218    	; 0x2c0a <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2b30:	e1 e8       	ldi	r30, 0x81	; 129
    2b32:	f2 e2       	ldi	r31, 0x22	; 34
    2b34:	04 e0       	ldi	r16, 0x04	; 4
    2b36:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b38:	e9 e7       	ldi	r30, 0x79	; 121
    2b3a:	f2 e2       	ldi	r31, 0x22	; 34
    2b3c:	04 e0       	ldi	r16, 0x04	; 4
    2b3e:	05 93       	las	Z, r16
    2b40:	64 c0       	rjmp	.+200    	; 0x2c0a <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2b42:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b46:	81 ff       	sbrs	r24, 1
    2b48:	5b c0       	rjmp	.+182    	; 0x2c00 <__vector_125+0x142>
		udd_ack_overflow_event();
    2b4a:	82 e0       	ldi	r24, 0x02	; 2
    2b4c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2b50:	80 91 78 22 	lds	r24, 0x2278	; 0x802278 <udd_sram+0xc>
    2b54:	86 ff       	sbrs	r24, 6
    2b56:	59 c0       	rjmp	.+178    	; 0x2c0a <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2b58:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b5c:	81 fd       	sbrc	r24, 1
    2b5e:	55 c0       	rjmp	.+170    	; 0x2c0a <__vector_125+0x14c>
    2b60:	c2 da       	rcall	.-2684   	; 0x20e6 <udd_ctrl_interrupt_tc_setup>
    2b62:	81 11       	cpse	r24, r1
    2b64:	52 c0       	rjmp	.+164    	; 0x2c0a <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2b66:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    2b6a:	82 30       	cpi	r24, 0x02	; 2
    2b6c:	41 f4       	brne	.+16     	; 0x2b7e <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2b6e:	84 e0       	ldi	r24, 0x04	; 4
    2b70:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2b74:	e8 e7       	ldi	r30, 0x78	; 120
    2b76:	f2 e2       	ldi	r31, 0x22	; 34
    2b78:	02 e0       	ldi	r16, 0x02	; 2
    2b7a:	06 93       	lac	Z, r16
    2b7c:	46 c0       	rjmp	.+140    	; 0x2c0a <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2b7e:	83 30       	cpi	r24, 0x03	; 3
    2b80:	09 f0       	breq	.+2      	; 0x2b84 <__vector_125+0xc6>
    2b82:	43 c0       	rjmp	.+134    	; 0x2c0a <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2b84:	e1 e8       	ldi	r30, 0x81	; 129
    2b86:	f2 e2       	ldi	r31, 0x22	; 34
    2b88:	04 e0       	ldi	r16, 0x04	; 4
    2b8a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b8c:	e9 e7       	ldi	r30, 0x79	; 121
    2b8e:	f2 e2       	ldi	r31, 0x22	; 34
    2b90:	04 e0       	ldi	r16, 0x04	; 4
    2b92:	05 93       	las	Z, r16
    2b94:	3a c0       	rjmp	.+116    	; 0x2c0a <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2b96:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b98:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b9e:	07 df       	rcall	.-498    	; 0x29ae <udd_ep_abort>
    2ba0:	81 e8       	ldi	r24, 0x81	; 129
    2ba2:	05 df       	rcall	.-502    	; 0x29ae <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	03 df       	rcall	.-506    	; 0x29ae <udd_ep_abort>
    2ba8:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    2baa:	01 df       	rcall	.-510    	; 0x29ae <udd_ep_abort>
    2bac:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2bb0:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2bb4:	ec e6       	ldi	r30, 0x6C	; 108
    2bb6:	f2 e2       	ldi	r31, 0x22	; 34
	udd_endpoint_clear_status(ep_ctrl);
    2bb8:	15 86       	std	Z+13, r1	; 0x0d
    2bba:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2bbc:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    2bbe:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2bc0:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2bc2:	15 8a       	std	Z+21, r1	; 0x15
    2bc4:	94 8b       	std	Z+20, r25	; 0x14
    2bc6:	85 8b       	std	Z+21, r24	; 0x15
    2bc8:	84 e2       	ldi	r24, 0x24	; 36
		// Reset endpoint control management
		udd_ctrl_init();
    2bca:	92 e2       	ldi	r25, 0x22	; 34
    2bcc:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    2bce:	91 8b       	std	Z+17, r25	; 0x11
    2bd0:	91 d9       	rcall	.-3294   	; 0x1ef4 <udd_ctrl_init>
		udd_ack_suspend_event();
    2bd2:	1b c0       	rjmp	.+54     	; 0x2c0a <__vector_125+0x14c>
    2bd4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2bd8:	86 ff       	sbrs	r24, 6
    2bda:	07 c0       	rjmp	.+14     	; 0x2bea <__vector_125+0x12c>
    2bdc:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2bde:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	4f d9       	rcall	.-3426   	; 0x1e84 <udd_sleep_mode>
		udd_ack_resume_event();
    2be6:	df d2       	rcall	.+1470   	; 0x31a6 <usb_callback_suspend_action>
    2be8:	10 c0       	rjmp	.+32     	; 0x2c0a <__vector_125+0x14c>
    2bea:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    2bee:	85 ff       	sbrs	r24, 5
    2bf0:	0c c0       	rjmp	.+24     	; 0x2c0a <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2bf2:	80 e2       	ldi	r24, 0x20	; 32
    2bf4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	44 d9       	rcall	.-3448   	; 0x1e84 <udd_sleep_mode>
    2bfc:	d5 d2       	rcall	.+1450   	; 0x31a8 <usb_callback_resume_action>
    2bfe:	05 c0       	rjmp	.+10     	; 0x2c0a <__vector_125+0x14c>
    2c00:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2c04:	84 fd       	sbrc	r24, 4
    2c06:	c7 cf       	rjmp	.-114    	; 0x2b96 <__vector_125+0xd8>
    2c08:	e5 cf       	rjmp	.-54     	; 0x2bd4 <__vector_125+0x116>
    2c0a:	ff 91       	pop	r31
    2c0c:	ef 91       	pop	r30
    2c0e:	bf 91       	pop	r27
    2c10:	af 91       	pop	r26
    2c12:	9f 91       	pop	r25
    2c14:	8f 91       	pop	r24
    2c16:	7f 91       	pop	r23
    2c18:	6f 91       	pop	r22
    2c1a:	5f 91       	pop	r21
    2c1c:	4f 91       	pop	r20
    2c1e:	3f 91       	pop	r19
    2c20:	2f 91       	pop	r18
    2c22:	0f 91       	pop	r16
    2c24:	0f 90       	pop	r0
    2c26:	0b be       	out	0x3b, r0	; 59
    2c28:	0f 90       	pop	r0
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	0f 90       	pop	r0
    2c2e:	1f 90       	pop	r1
    2c30:	18 95       	reti

00002c32 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2c32:	1f 92       	push	r1
    2c34:	0f 92       	push	r0
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	0f 92       	push	r0
    2c3a:	11 24       	eor	r1, r1
    2c3c:	0b b6       	in	r0, 0x3b	; 59
    2c3e:	0f 92       	push	r0
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	2f 93       	push	r18
    2c46:	3f 93       	push	r19
    2c48:	4f 93       	push	r20
    2c4a:	5f 93       	push	r21
    2c4c:	6f 93       	push	r22
    2c4e:	7f 93       	push	r23
    2c50:	8f 93       	push	r24
    2c52:	9f 93       	push	r25
    2c54:	af 93       	push	r26
    2c56:	bf 93       	push	r27
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	ef 93       	push	r30
    2c5e:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2c60:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2c64:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2c66:	03 c0       	rjmp	.+6      	; 0x2c6e <__vector_126+0x3c>
    2c68:	3e da       	rcall	.-2948   	; 0x20e6 <udd_ctrl_interrupt_tc_setup>
    2c6a:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2c6c:	c4 c0       	rjmp	.+392    	; 0x2df6 <__vector_126+0x1c4>
    2c6e:	82 e0       	ldi	r24, 0x02	; 2
    2c70:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2c74:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2c78:	81 95       	neg	r24
    2c7a:	88 0f       	add	r24, r24
    2c7c:	e8 e7       	ldi	r30, 0x78	; 120
    2c7e:	f2 e2       	ldi	r31, 0x22	; 34
    2c80:	e8 1b       	sub	r30, r24
    2c82:	f1 09       	sbc	r31, r1
    2c84:	20 81       	ld	r18, Z
    2c86:	31 81       	ldd	r19, Z+1	; 0x01
    2c88:	28 57       	subi	r18, 0x78	; 120
    2c8a:	32 42       	sbci	r19, 0x22	; 34
    2c8c:	36 95       	lsr	r19
    2c8e:	27 95       	ror	r18
    2c90:	36 95       	lsr	r19
    2c92:	27 95       	ror	r18
    2c94:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2c96:	27 95       	ror	r18
    2c98:	82 2f       	mov	r24, r18
    2c9a:	86 95       	lsr	r24
    2c9c:	20 fd       	sbrc	r18, 0
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <__vector_126+0x72>
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	01 c0       	rjmp	.+2      	; 0x2ca6 <__vector_126+0x74>
    2ca4:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2ca6:	89 0f       	add	r24, r25
    2ca8:	e8 2f       	mov	r30, r24
    2caa:	ef 70       	andi	r30, 0x0F	; 15
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	ee 0f       	add	r30, r30
    2cb0:	ff 1f       	adc	r31, r31
    2cb2:	28 2f       	mov	r18, r24
    2cb4:	08 2e       	mov	r0, r24
    2cb6:	00 0c       	add	r0, r0
    2cb8:	33 0b       	sbc	r19, r19
    2cba:	22 27       	eor	r18, r18
    2cbc:	33 0f       	add	r19, r19
    2cbe:	22 1f       	adc	r18, r18
    2cc0:	33 27       	eor	r19, r19
    2cc2:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2cc4:	f3 1f       	adc	r31, r19
    2cc6:	df 01       	movw	r26, r30
    2cc8:	aa 0f       	add	r26, r26
    2cca:	bb 1f       	adc	r27, r27
    2ccc:	aa 0f       	add	r26, r26
    2cce:	bb 1f       	adc	r27, r27
    2cd0:	aa 0f       	add	r26, r26
    2cd2:	bb 1f       	adc	r27, r27
    2cd4:	a4 59       	subi	r26, 0x94	; 148
    2cd6:	bd 4d       	sbci	r27, 0xDD	; 221
    2cd8:	1c 96       	adiw	r26, 0x0c	; 12
    2cda:	9c 91       	ld	r25, X
    2cdc:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2cde:	8b c0       	rjmp	.+278    	; 0x2df6 <__vector_126+0x1c4>
    2ce0:	ee 0f       	add	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	ee 0f       	add	r30, r30
    2ce6:	ff 1f       	adc	r31, r31
    2ce8:	ee 0f       	add	r30, r30
    2cea:	ff 1f       	adc	r31, r31
    2cec:	e8 58       	subi	r30, 0x88	; 136
    2cee:	fd 4d       	sbci	r31, 0xDD	; 221
    2cf0:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    2cf2:	06 93       	lac	Z, r16
    2cf4:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2cf6:	7a c0       	rjmp	.+244    	; 0x2dec <__vector_126+0x1ba>
    2cf8:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2cfc:	84 30       	cpi	r24, 0x04	; 4
    2cfe:	19 f4       	brne	.+6      	; 0x2d06 <__vector_126+0xd4>
    2d00:	3a d9       	rcall	.-3468   	; 0x1f76 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2d02:	f8 d8       	rcall	.-3600   	; 0x1ef4 <udd_ctrl_init>
    2d04:	78 c0       	rjmp	.+240    	; 0x2df6 <__vector_126+0x1c4>
    2d06:	00 91 7a 22 	lds	r16, 0x227A	; 0x80227a <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2d0a:	10 91 7b 22 	lds	r17, 0x227B	; 0x80227b <udd_sram+0xf>
    2d0e:	80 91 25 24 	lds	r24, 0x2425	; 0x802425 <udd_g_ctrlreq+0xa>
    2d12:	90 91 26 24 	lds	r25, 0x2426	; 0x802426 <udd_g_ctrlreq+0xb>
    2d16:	c0 91 64 22 	lds	r28, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    2d1a:	d0 91 65 22 	lds	r29, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2d1e:	98 01       	movw	r18, r16
    2d20:	2c 0f       	add	r18, r28
    2d22:	3d 1f       	adc	r19, r29
    2d24:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2d26:	93 07       	cpc	r25, r19
    2d28:	18 f4       	brcc	.+6      	; 0x2d30 <__vector_126+0xfe>
    2d2a:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2d2c:	0c 1b       	sub	r16, r28
    2d2e:	1d 0b       	sbc	r17, r29
    2d30:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <udd_g_ctrlreq+0x8>
    2d34:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <udd_g_ctrlreq+0x9>
    2d38:	a8 01       	movw	r20, r16
    2d3a:	64 e2       	ldi	r22, 0x24	; 36
    2d3c:	72 e2       	ldi	r23, 0x22	; 34
    2d3e:	8c 0f       	add	r24, r28
    2d40:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2d42:	0e 94 9d 23 	call	0x473a	; 0x473a <memcpy>
    2d46:	c0 0f       	add	r28, r16
    2d48:	d1 1f       	adc	r29, r17
    2d4a:	c0 93 64 22 	sts	0x2264, r28	; 0x802264 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2d4e:	d0 93 65 22 	sts	0x2265, r29	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2d52:	00 34       	cpi	r16, 0x40	; 64
    2d54:	11 05       	cpc	r17, r1
    2d56:	69 f4       	brne	.+26     	; 0x2d72 <__vector_126+0x140>
    2d58:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2d5c:	90 91 67 22 	lds	r25, 0x2267	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    2d60:	8c 0f       	add	r24, r28
    2d62:	9d 1f       	adc	r25, r29
    2d64:	20 91 21 24 	lds	r18, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    2d68:	30 91 22 24 	lds	r19, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    2d6c:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2d6e:	93 07       	cpc	r25, r19
    2d70:	80 f0       	brcs	.+32     	; 0x2d92 <__vector_126+0x160>
    2d72:	eb e1       	ldi	r30, 0x1B	; 27
    2d74:	f4 e2       	ldi	r31, 0x24	; 36
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2d76:	c2 87       	std	Z+10, r28	; 0x0a
    2d78:	d3 87       	std	Z+11, r29	; 0x0b
    2d7a:	06 84       	ldd	r0, Z+14	; 0x0e
    2d7c:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    2d7e:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    2d80:	30 97       	sbiw	r30, 0x00	; 0
    2d82:	29 f0       	breq	.+10     	; 0x2d8e <__vector_126+0x15c>
    2d84:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2d86:	81 11       	cpse	r24, r1
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <__vector_126+0x15c>
    2d8a:	d9 d8       	rcall	.-3662   	; 0x1f3e <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2d8c:	34 c0       	rjmp	.+104    	; 0x2df6 <__vector_126+0x1c4>
    2d8e:	e5 d8       	rcall	.-3638   	; 0x1f5a <udd_ctrl_send_zlp_in>
    2d90:	32 c0       	rjmp	.+100    	; 0x2df6 <__vector_126+0x1c4>
    2d92:	80 91 25 24 	lds	r24, 0x2425	; 0x802425 <udd_g_ctrlreq+0xa>
    2d96:	90 91 26 24 	lds	r25, 0x2426	; 0x802426 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2d9a:	c8 17       	cp	r28, r24
    2d9c:	d9 07       	cpc	r29, r25
    2d9e:	f9 f4       	brne	.+62     	; 0x2dde <__vector_126+0x1ac>
    2da0:	e0 91 29 24 	lds	r30, 0x2429	; 0x802429 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2da4:	f0 91 2a 24 	lds	r31, 0x242A	; 0x80242a <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2da8:	30 97       	sbiw	r30, 0x00	; 0
    2daa:	11 f4       	brne	.+4      	; 0x2db0 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2dac:	c8 d8       	rcall	.-3696   	; 0x1f3e <udd_ctrl_stall_data>
    2dae:	23 c0       	rjmp	.+70     	; 0x2df6 <__vector_126+0x1c4>
    2db0:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2db2:	81 11       	cpse	r24, r1
    2db4:	02 c0       	rjmp	.+4      	; 0x2dba <__vector_126+0x188>
    2db6:	c3 d8       	rcall	.-3706   	; 0x1f3e <udd_ctrl_stall_data>
    2db8:	1e c0       	rjmp	.+60     	; 0x2df6 <__vector_126+0x1c4>
    2dba:	20 91 66 22 	lds	r18, 0x2266	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2dbe:	30 91 67 22 	lds	r19, 0x2267	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    2dc2:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    2dc6:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2dca:	82 0f       	add	r24, r18
    2dcc:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2dce:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2dd2:	90 93 67 22 	sts	0x2267, r25	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2dd6:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    2dda:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2dde:	e8 e7       	ldi	r30, 0x78	; 120
    2de0:	f2 e2       	ldi	r31, 0x22	; 34
		udd_ctrl_in_sent();
    2de2:	02 e0       	ldi	r16, 0x02	; 2
    2de4:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2de6:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2de8:	06 93       	lac	Z, r16
    2dea:	05 c0       	rjmp	.+10     	; 0x2df6 <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2dec:	80 38       	cpi	r24, 0x80	; 128
    2dee:	11 f4       	brne	.+4      	; 0x2df4 <__vector_126+0x1c2>
    2df0:	ca d8       	rcall	.-3692   	; 0x1f86 <udd_ctrl_in_sent>
    2df2:	01 c0       	rjmp	.+2      	; 0x2df6 <__vector_126+0x1c4>
    2df4:	ea d9       	rcall	.-3116   	; 0x21ca <udd_ep_trans_complet>
    2df6:	ff 91       	pop	r31
    2df8:	ef 91       	pop	r30
    2dfa:	df 91       	pop	r29
    2dfc:	cf 91       	pop	r28
    2dfe:	bf 91       	pop	r27
    2e00:	af 91       	pop	r26
    2e02:	9f 91       	pop	r25
    2e04:	8f 91       	pop	r24
    2e06:	7f 91       	pop	r23
    2e08:	6f 91       	pop	r22
    2e0a:	5f 91       	pop	r21
    2e0c:	4f 91       	pop	r20
    2e0e:	3f 91       	pop	r19
    2e10:	2f 91       	pop	r18
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	0f 90       	pop	r0
    2e18:	0b be       	out	0x3b, r0	; 59
    2e1a:	0f 90       	pop	r0
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	0f 90       	pop	r0
    2e20:	1f 90       	pop	r1
    2e22:	18 95       	reti

00002e24 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    2e24:	cf 92       	push	r12
    2e26:	df 92       	push	r13
    2e28:	ef 92       	push	r14
    2e2a:	ff 92       	push	r15
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    2e32:	6b 01       	movw	r12, r22
    2e34:	e1 2c       	mov	r14, r1
    2e36:	f1 2c       	mov	r15, r1
    2e38:	60 e8       	ldi	r22, 0x80	; 128
    2e3a:	73 ec       	ldi	r23, 0xC3	; 195
    2e3c:	89 ec       	ldi	r24, 0xC9	; 201
    2e3e:	91 e0       	ldi	r25, 0x01	; 1
    2e40:	a7 01       	movw	r20, r14
    2e42:	96 01       	movw	r18, r12
    2e44:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__udivmodsi4>
    2e48:	ca 01       	movw	r24, r20
    2e4a:	b9 01       	movw	r22, r18
    2e4c:	2f ef       	ldi	r18, 0xFF	; 255
    2e4e:	3f ef       	ldi	r19, 0xFF	; 255
    2e50:	40 e0       	ldi	r20, 0x00	; 0
    2e52:	50 e0       	ldi	r21, 0x00	; 0
    2e54:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__udivmodsi4>
	if (smallest_div < 1) {
    2e58:	21 15       	cp	r18, r1
    2e5a:	31 05       	cpc	r19, r1
    2e5c:	29 f4       	brne	.+10     	; 0x2e68 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    2e62:	21 e0       	ldi	r18, 0x01	; 1
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	2d c0       	rjmp	.+90     	; 0x2ec2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    2e68:	22 30       	cpi	r18, 0x02	; 2
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	28 f4       	brcc	.+10     	; 0x2e78 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    2e6e:	82 e0       	ldi	r24, 0x02	; 2
    2e70:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    2e72:	22 e0       	ldi	r18, 0x02	; 2
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	25 c0       	rjmp	.+74     	; 0x2ec2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    2e78:	24 30       	cpi	r18, 0x04	; 4
    2e7a:	31 05       	cpc	r19, r1
    2e7c:	28 f4       	brcc	.+10     	; 0x2e88 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2e7e:	83 e0       	ldi	r24, 0x03	; 3
    2e80:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    2e82:	24 e0       	ldi	r18, 0x04	; 4
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	1d c0       	rjmp	.+58     	; 0x2ec2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    2e88:	28 30       	cpi	r18, 0x08	; 8
    2e8a:	31 05       	cpc	r19, r1
    2e8c:	28 f4       	brcc	.+10     	; 0x2e98 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2e8e:	84 e0       	ldi	r24, 0x04	; 4
    2e90:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    2e92:	28 e0       	ldi	r18, 0x08	; 8
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	15 c0       	rjmp	.+42     	; 0x2ec2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    2e98:	20 34       	cpi	r18, 0x40	; 64
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	28 f4       	brcc	.+10     	; 0x2ea8 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2e9e:	85 e0       	ldi	r24, 0x05	; 5
    2ea0:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2ea2:	20 e4       	ldi	r18, 0x40	; 64
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	0d c0       	rjmp	.+26     	; 0x2ec2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    2ea8:	2f 3f       	cpi	r18, 0xFF	; 255
    2eaa:	31 05       	cpc	r19, r1
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <pwm_set_frequency+0x8c>
    2eae:	28 f4       	brcc	.+10     	; 0x2eba <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2eb0:	86 e0       	ldi	r24, 0x06	; 6
    2eb2:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	31 e0       	ldi	r19, 0x01	; 1
    2eb8:	04 c0       	rjmp	.+8      	; 0x2ec2 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2eba:	87 e0       	ldi	r24, 0x07	; 7
    2ebc:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2ec2:	40 e0       	ldi	r20, 0x00	; 0
    2ec4:	50 e0       	ldi	r21, 0x00	; 0
    2ec6:	60 e8       	ldi	r22, 0x80	; 128
    2ec8:	73 ec       	ldi	r23, 0xC3	; 195
    2eca:	89 ec       	ldi	r24, 0xC9	; 201
    2ecc:	91 e0       	ldi	r25, 0x01	; 1
    2ece:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__udivmodsi4>
    2ed2:	ca 01       	movw	r24, r20
    2ed4:	b9 01       	movw	r22, r18
    2ed6:	a7 01       	movw	r20, r14
    2ed8:	96 01       	movw	r18, r12
    2eda:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__udivmodsi4>
    2ede:	2d 83       	std	Y+5, r18	; 0x05
    2ee0:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2ee2:	24 36       	cpi	r18, 0x64	; 100
    2ee4:	31 05       	cpc	r19, r1
    2ee6:	18 f4       	brcc	.+6      	; 0x2eee <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    2ee8:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2eea:	1d 82       	std	Y+5, r1	; 0x05
    2eec:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	ff 90       	pop	r15
    2ef4:	ef 90       	pop	r14
    2ef6:	df 90       	pop	r13
    2ef8:	cf 90       	pop	r12
    2efa:	08 95       	ret

00002efc <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2efc:	0f 93       	push	r16
    2efe:	1f 93       	push	r17
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	ec 01       	movw	r28, r24
    2f06:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    2f08:	86 2f       	mov	r24, r22
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	87 30       	cpi	r24, 0x07	; 7
    2f0e:	91 05       	cpc	r25, r1
    2f10:	08 f0       	brcs	.+2      	; 0x2f14 <pwm_init+0x18>
    2f12:	8b c0       	rjmp	.+278    	; 0x302a <pwm_init+0x12e>
    2f14:	fc 01       	movw	r30, r24
    2f16:	88 27       	eor	r24, r24
    2f18:	eb 5f       	subi	r30, 0xFB	; 251
    2f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f1e:	0c 94 86 23 	jmp	0x470c	; 0x470c <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	98 e0       	ldi	r25, 0x08	; 8
    2f26:	88 83       	st	Y, r24
    2f28:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2f2a:	e0 e4       	ldi	r30, 0x40	; 64
    2f2c:	f6 e0       	ldi	r31, 0x06	; 6
    2f2e:	30 81       	ld	r19, Z
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	2f ef       	ldi	r18, 0xFF	; 255
    2f36:	24 0f       	add	r18, r20
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <pwm_init+0x42>
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	2a 95       	dec	r18
    2f40:	e2 f7       	brpl	.-8      	; 0x2f3a <pwm_init+0x3e>
    2f42:	83 2b       	or	r24, r19
    2f44:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2f46:	71 c0       	rjmp	.+226    	; 0x302a <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    2f48:	80 e4       	ldi	r24, 0x40	; 64
    2f4a:	98 e0       	ldi	r25, 0x08	; 8
    2f4c:	88 83       	st	Y, r24
    2f4e:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2f50:	e0 e4       	ldi	r30, 0x40	; 64
    2f52:	f6 e0       	ldi	r31, 0x06	; 6
    2f54:	30 81       	ld	r19, Z
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	23 e0       	ldi	r18, 0x03	; 3
    2f5c:	24 0f       	add	r18, r20
    2f5e:	02 c0       	rjmp	.+4      	; 0x2f64 <pwm_init+0x68>
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	2a 95       	dec	r18
    2f66:	e2 f7       	brpl	.-8      	; 0x2f60 <pwm_init+0x64>
    2f68:	83 2b       	or	r24, r19
    2f6a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2f6c:	5e c0       	rjmp	.+188    	; 0x302a <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	99 e0       	ldi	r25, 0x09	; 9
    2f72:	88 83       	st	Y, r24
    2f74:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    2f76:	e0 e6       	ldi	r30, 0x60	; 96
    2f78:	f6 e0       	ldi	r31, 0x06	; 6
    2f7a:	30 81       	ld	r19, Z
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	2f ef       	ldi	r18, 0xFF	; 255
    2f82:	24 0f       	add	r18, r20
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <pwm_init+0x8e>
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	2a 95       	dec	r18
    2f8c:	e2 f7       	brpl	.-8      	; 0x2f86 <pwm_init+0x8a>
    2f8e:	83 2b       	or	r24, r19
    2f90:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2f92:	4b c0       	rjmp	.+150    	; 0x302a <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2f94:	80 e4       	ldi	r24, 0x40	; 64
    2f96:	99 e0       	ldi	r25, 0x09	; 9
    2f98:	88 83       	st	Y, r24
    2f9a:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2f9c:	e0 e6       	ldi	r30, 0x60	; 96
    2f9e:	f6 e0       	ldi	r31, 0x06	; 6
    2fa0:	30 81       	ld	r19, Z
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	23 e0       	ldi	r18, 0x03	; 3
    2fa8:	24 0f       	add	r18, r20
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <pwm_init+0xb4>
    2fac:	88 0f       	add	r24, r24
    2fae:	99 1f       	adc	r25, r25
    2fb0:	2a 95       	dec	r18
    2fb2:	e2 f7       	brpl	.-8      	; 0x2fac <pwm_init+0xb0>
    2fb4:	83 2b       	or	r24, r19
    2fb6:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2fb8:	38 c0       	rjmp	.+112    	; 0x302a <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	9a e0       	ldi	r25, 0x0A	; 10
    2fbe:	88 83       	st	Y, r24
    2fc0:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2fc2:	e0 e8       	ldi	r30, 0x80	; 128
    2fc4:	f6 e0       	ldi	r31, 0x06	; 6
    2fc6:	30 81       	ld	r19, Z
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	2f ef       	ldi	r18, 0xFF	; 255
    2fce:	24 0f       	add	r18, r20
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <pwm_init+0xda>
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	2a 95       	dec	r18
    2fd8:	e2 f7       	brpl	.-8      	; 0x2fd2 <pwm_init+0xd6>
    2fda:	83 2b       	or	r24, r19
    2fdc:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2fde:	25 c0       	rjmp	.+74     	; 0x302a <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    2fe0:	80 e4       	ldi	r24, 0x40	; 64
    2fe2:	9a e0       	ldi	r25, 0x0A	; 10
    2fe4:	88 83       	st	Y, r24
    2fe6:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    2fe8:	e0 e8       	ldi	r30, 0x80	; 128
    2fea:	f6 e0       	ldi	r31, 0x06	; 6
    2fec:	30 81       	ld	r19, Z
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	23 e0       	ldi	r18, 0x03	; 3
    2ff4:	24 0f       	add	r18, r20
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <pwm_init+0x100>
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	2a 95       	dec	r18
    2ffe:	e2 f7       	brpl	.-8      	; 0x2ff8 <pwm_init+0xfc>
    3000:	83 2b       	or	r24, r19
    3002:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    3004:	12 c0       	rjmp	.+36     	; 0x302a <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	9b e0       	ldi	r25, 0x0B	; 11
    300a:	88 83       	st	Y, r24
    300c:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    300e:	e0 ea       	ldi	r30, 0xA0	; 160
    3010:	f6 e0       	ldi	r31, 0x06	; 6
    3012:	30 81       	ld	r19, Z
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	2f ef       	ldi	r18, 0xFF	; 255
    301a:	24 0f       	add	r18, r20
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <pwm_init+0x126>
    301e:	88 0f       	add	r24, r24
    3020:	99 1f       	adc	r25, r25
    3022:	2a 95       	dec	r18
    3024:	e2 f7       	brpl	.-8      	; 0x301e <pwm_init+0x122>
    3026:	83 2b       	or	r24, r19
    3028:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    302a:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    302c:	42 30       	cpi	r20, 0x02	; 2
    302e:	61 f0       	breq	.+24     	; 0x3048 <pwm_init+0x14c>
    3030:	18 f4       	brcc	.+6      	; 0x3038 <pwm_init+0x13c>
    3032:	41 30       	cpi	r20, 0x01	; 1
    3034:	31 f0       	breq	.+12     	; 0x3042 <pwm_init+0x146>
    3036:	10 c0       	rjmp	.+32     	; 0x3058 <pwm_init+0x15c>
    3038:	43 30       	cpi	r20, 0x03	; 3
    303a:	49 f0       	breq	.+18     	; 0x304e <pwm_init+0x152>
    303c:	44 30       	cpi	r20, 0x04	; 4
    303e:	51 f0       	breq	.+20     	; 0x3054 <pwm_init+0x158>
    3040:	0b c0       	rjmp	.+22     	; 0x3058 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    3042:	80 e1       	ldi	r24, 0x10	; 16
    3044:	8b 83       	std	Y+3, r24	; 0x03
		break;
    3046:	08 c0       	rjmp	.+16     	; 0x3058 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    3048:	80 e2       	ldi	r24, 0x20	; 32
    304a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    304c:	05 c0       	rjmp	.+10     	; 0x3058 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    304e:	80 e4       	ldi	r24, 0x40	; 64
    3050:	8b 83       	std	Y+3, r24	; 0x03
		break;
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    3054:	80 e8       	ldi	r24, 0x80	; 128
    3056:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    3058:	88 81       	ld	r24, Y
    305a:	99 81       	ldd	r25, Y+1	; 0x01
    305c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    3060:	e8 81       	ld	r30, Y
    3062:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    3064:	81 81       	ldd	r24, Z+1	; 0x01
    3066:	88 7f       	andi	r24, 0xF8	; 248
    3068:	83 60       	ori	r24, 0x03	; 3
    306a:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    306c:	1d 82       	std	Y+5, r1	; 0x05
    306e:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    3070:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    3072:	e8 81       	ld	r30, Y
    3074:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3076:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3078:	80 7f       	andi	r24, 0xF0	; 240
    307a:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    307c:	b8 01       	movw	r22, r16
    307e:	ce 01       	movw	r24, r28
    3080:	d1 de       	rcall	.-606    	; 0x2e24 <pwm_set_frequency>
}
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	08 95       	ret

0000308c <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    3092:	2d 81       	ldd	r18, Y+5	; 0x05
    3094:	3e 81       	ldd	r19, Y+6	; 0x06
    3096:	a6 2f       	mov	r26, r22
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	0e 94 8e 23 	call	0x471c	; 0x471c <__umulhisi3>
    309e:	24 e6       	ldi	r18, 0x64	; 100
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e0       	ldi	r20, 0x00	; 0
    30a4:	50 e0       	ldi	r21, 0x00	; 0
    30a6:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__udivmodsi4>
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	e8 81       	ld	r30, Y
    30ae:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    30b0:	e6 fd       	sbrc	r30, 6
    30b2:	17 c0       	rjmp	.+46     	; 0x30e2 <pwm_start+0x56>
		switch (channel_index) {
    30b4:	82 30       	cpi	r24, 0x02	; 2
    30b6:	61 f0       	breq	.+24     	; 0x30d0 <pwm_start+0x44>
    30b8:	18 f4       	brcc	.+6      	; 0x30c0 <pwm_start+0x34>
    30ba:	81 30       	cpi	r24, 0x01	; 1
    30bc:	31 f0       	breq	.+12     	; 0x30ca <pwm_start+0x3e>
    30be:	1b c0       	rjmp	.+54     	; 0x30f6 <pwm_start+0x6a>
    30c0:	83 30       	cpi	r24, 0x03	; 3
    30c2:	49 f0       	breq	.+18     	; 0x30d6 <pwm_start+0x4a>
    30c4:	84 30       	cpi	r24, 0x04	; 4
    30c6:	51 f0       	breq	.+20     	; 0x30dc <pwm_start+0x50>
    30c8:	16 c0       	rjmp	.+44     	; 0x30f6 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    30ca:	20 af       	std	Z+56, r18	; 0x38
    30cc:	31 af       	std	Z+57, r19	; 0x39
    30ce:	13 c0       	rjmp	.+38     	; 0x30f6 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    30d0:	22 af       	std	Z+58, r18	; 0x3a
    30d2:	33 af       	std	Z+59, r19	; 0x3b
    30d4:	10 c0       	rjmp	.+32     	; 0x30f6 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    30d6:	24 af       	std	Z+60, r18	; 0x3c
    30d8:	35 af       	std	Z+61, r19	; 0x3d
    30da:	0d c0       	rjmp	.+26     	; 0x30f6 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    30dc:	26 af       	std	Z+62, r18	; 0x3e
    30de:	37 af       	std	Z+63, r19	; 0x3f
    30e0:	0a c0       	rjmp	.+20     	; 0x30f6 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    30e2:	81 30       	cpi	r24, 0x01	; 1
    30e4:	19 f0       	breq	.+6      	; 0x30ec <pwm_start+0x60>
    30e6:	82 30       	cpi	r24, 0x02	; 2
    30e8:	21 f0       	breq	.+8      	; 0x30f2 <pwm_start+0x66>
    30ea:	05 c0       	rjmp	.+10     	; 0x30f6 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    30ec:	20 af       	std	Z+56, r18	; 0x38
    30ee:	31 af       	std	Z+57, r19	; 0x39
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    30f2:	22 af       	std	Z+58, r18	; 0x3a
    30f4:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	e8 81       	ld	r30, Y
    30fc:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    30fe:	86 a3       	std	Z+38, r24	; 0x26
    3100:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    3102:	8b 81       	ldd	r24, Y+3	; 0x03
    3104:	e8 81       	ld	r30, Y
    3106:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    3108:	e6 fd       	sbrc	r30, 6
    310a:	04 c0       	rjmp	.+8      	; 0x3114 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    310c:	91 81       	ldd	r25, Z+1	; 0x01
    310e:	89 2b       	or	r24, r25
    3110:	81 83       	std	Z+1, r24	; 0x01
    3112:	04 c0       	rjmp	.+8      	; 0x311c <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    3114:	91 81       	ldd	r25, Z+1	; 0x01
    3116:	80 73       	andi	r24, 0x30	; 48
    3118:	89 2b       	or	r24, r25
    311a:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    311c:	e8 81       	ld	r30, Y
    311e:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3120:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3122:	80 7f       	andi	r24, 0xF0	; 240
    3124:	9c 81       	ldd	r25, Y+4	; 0x04
    3126:	89 2b       	or	r24, r25
    3128:	80 83       	st	Z, r24
}
    312a:	df 91       	pop	r29
    312c:	cf 91       	pop	r28
    312e:	08 95       	ret

00003130 <cb_rtc_alarm>:

void halt(void)
{
	/* MAIN Loop Shutdown */

	runmode = 0;
    3130:	08 95       	ret

00003132 <cb_adc>:
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	1f 92       	push	r1
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
    313c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    3140:	82 95       	swap	r24
    3142:	8f 70       	andi	r24, 0x0F	; 15
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	60 ff       	sbrs	r22, 0
    3148:	1d c0       	rjmp	.+58     	; 0x3184 <cb_adc+0x52>
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	81 30       	cpi	r24, 0x01	; 1
    314e:	59 f0       	breq	.+22     	; 0x3166 <cb_adc+0x34>
    3150:	28 f0       	brcs	.+10     	; 0x315c <cb_adc+0x2a>
    3152:	82 30       	cpi	r24, 0x02	; 2
    3154:	69 f0       	breq	.+26     	; 0x3170 <cb_adc+0x3e>
    3156:	83 30       	cpi	r24, 0x03	; 3
    3158:	81 f0       	breq	.+32     	; 0x317a <cb_adc+0x48>
    315a:	21 c0       	rjmp	.+66     	; 0x319e <cb_adc+0x6c>
    315c:	40 93 bf 22 	sts	0x22BF, r20	; 0x8022bf <g_adc_vbat_cur>
    3160:	50 93 c0 22 	sts	0x22C0, r21	; 0x8022c0 <g_adc_vbat_cur+0x1>
    3164:	1c c0       	rjmp	.+56     	; 0x319e <cb_adc+0x6c>
    3166:	40 93 c5 22 	sts	0x22C5, r20	; 0x8022c5 <g_adc_3v0_cur>
    316a:	50 93 c6 22 	sts	0x22C6, r21	; 0x8022c6 <g_adc_3v0_cur+0x1>
    316e:	17 c0       	rjmp	.+46     	; 0x319e <cb_adc+0x6c>
    3170:	40 93 c3 22 	sts	0x22C3, r20	; 0x8022c3 <g_adc_vctcxo_cur>
    3174:	50 93 c4 22 	sts	0x22C4, r21	; 0x8022c4 <g_adc_vctcxo_cur+0x1>
    3178:	12 c0       	rjmp	.+36     	; 0x319e <cb_adc+0x6c>
    317a:	40 93 c1 22 	sts	0x22C1, r20	; 0x8022c1 <g_adc_5v0_cur>
    317e:	50 93 c2 22 	sts	0x22C2, r21	; 0x8022c2 <g_adc_5v0_cur+0x1>
    3182:	0d c0       	rjmp	.+26     	; 0x319e <cb_adc+0x6c>
    3184:	61 ff       	sbrs	r22, 1
    3186:	05 c0       	rjmp	.+10     	; 0x3192 <cb_adc+0x60>
    3188:	40 93 bd 22 	sts	0x22BD, r20	; 0x8022bd <g_adc_io_adc4_cur>
    318c:	50 93 be 22 	sts	0x22BE, r21	; 0x8022be <g_adc_io_adc4_cur+0x1>
    3190:	06 c0       	rjmp	.+12     	; 0x319e <cb_adc+0x6c>
    3192:	62 ff       	sbrs	r22, 2
    3194:	04 c0       	rjmp	.+8      	; 0x319e <cb_adc+0x6c>
    3196:	40 93 bb 22 	sts	0x22BB, r20	; 0x8022bb <g_adc_io_adc5_cur>
    319a:	50 93 bc 22 	sts	0x22BC, r21	; 0x8022bc <g_adc_io_adc5_cur+0x1>
    319e:	0f 90       	pop	r0
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	08 95       	ret

000031a6 <usb_callback_suspend_action>:
    31a6:	08 95       	ret

000031a8 <usb_callback_resume_action>:
    31a8:	08 95       	ret

000031aa <usb_callback_remotewakeup_enable>:
    31aa:	08 95       	ret

000031ac <usb_callback_remotewakeup_disable>:
    31ac:	08 95       	ret

000031ae <usb_callback_cdc_enable>:
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	80 93 db 22 	sts	0x22DB, r24	; 0x8022db <usb_cdc_transfers_autorized>
    31b4:	08 95       	ret

000031b6 <usb_callback_cdc_disable>:
    31b6:	10 92 db 22 	sts	0x22DB, r1	; 0x8022db <usb_cdc_transfers_autorized>
    31ba:	08 95       	ret

000031bc <usb_callback_config>:
    31bc:	08 95       	ret

000031be <usb_callback_cdc_set_dtr>:
    31be:	08 95       	ret

000031c0 <usb_callback_cdc_set_rts>:
    31c0:	08 95       	ret

000031c2 <usb_callback_rx_notify>:
    31c2:	08 95       	ret

000031c4 <usb_callback_tx_empty_notify>:
    31c4:	08 95       	ret

000031c6 <main>:
}


int main(void)
{
    31c6:	2f 92       	push	r2
    31c8:	3f 92       	push	r3
    31ca:	4f 92       	push	r4
    31cc:	5f 92       	push	r5
    31ce:	6f 92       	push	r6
    31d0:	7f 92       	push	r7
    31d2:	8f 92       	push	r8
    31d4:	9f 92       	push	r9
    31d6:	af 92       	push	r10
    31d8:	bf 92       	push	r11
    31da:	cf 92       	push	r12
    31dc:	df 92       	push	r13
    31de:	ef 92       	push	r14
    31e0:	ff 92       	push	r15
    31e2:	0f 93       	push	r16
    31e4:	1f 93       	push	r17
    31e6:	cf 93       	push	r28
    31e8:	df 93       	push	r29
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	28 97       	sbiw	r28, 0x08	; 8
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	irq_initialize_vectors();
    31f4:	e0 ea       	ldi	r30, 0xA0	; 160
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	87 e0       	ldi	r24, 0x07	; 7
    31fa:	82 83       	std	Z+2, r24	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    31fc:	82 83       	std	Z+2, r24	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    31fe:	82 81       	ldd	r24, Z+2	; 0x02
    3200:	8f 77       	andi	r24, 0x7F	; 127
    3202:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    3204:	11 82       	std	Z+1, r1	; 0x01
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    3206:	b4 d1       	rcall	.+872    	; 0x3570 <sysclk_init>
    3208:	eb e2       	ldi	r30, 0x2B	; 43
    320a:	f4 e2       	ldi	r31, 0x24	; 36
    320c:	10 82       	st	Z, r1
    320e:	11 82       	std	Z+1, r1	; 0x01
    3210:	12 82       	std	Z+2, r1	; 0x02
    3212:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3214:	14 82       	std	Z+4, r1	; 0x04
    3216:	77 24       	eor	r7, r7
    3218:	73 94       	inc	r7

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    321a:	75 82       	std	Z+5, r7	; 0x05
    321c:	0e 94 4f 01 	call	0x29e	; 0x29e <rtc_init>
	rtc_set_callback(cb_rtc_alarm);
    3220:	88 e9       	ldi	r24, 0x98	; 152
    3222:	98 e1       	ldi	r25, 0x18	; 24
    3224:	0e 94 4a 01 	call	0x294	; 0x294 <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3228:	62 e0       	ldi	r22, 0x02	; 2
    322a:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_OVF_gc;									// TCC0 overflow goes to EVSYS CH0
    322c:	22 d2       	rcall	.+1092   	; 0x3672 <sysclk_enable_module>
    322e:	e0 e8       	ldi	r30, 0x80	; 128
    3230:	f1 e0       	ldi	r31, 0x01	; 1
    3232:	80 ec       	ldi	r24, 0xC0	; 192
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    3234:	80 83       	st	Z, r24
	//EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
	//EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_OVF_gc;									// TCC0 overflow goes to EVSYS CH3
	//EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering

	/* DAC - event 7 */
	EVSYS.CH7MUX = EVSYS_CHMUX_TCE1_OVF_gc;										// TCE1 overflow goes to EVSYS CH7
    3236:	10 86       	std	Z+8, r1	; 0x08
    3238:	88 ee       	ldi	r24, 0xE8	; 232
	EVSYS.CH7CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH7 no digital filtering
    323a:	87 83       	std	Z+7, r24	; 0x07


static void tc_init(void)
{
	/* DAC clock */
	tc_enable(&TCE1);
    323c:	17 86       	std	Z+15, r1	; 0x0f
    323e:	80 e4       	ldi	r24, 0x40	; 64
    3240:	9a e0       	ldi	r25, 0x0A	; 10
    3242:	0e 94 65 0d 	call	0x1aca	; 0x1aca <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    3246:	00 e4       	ldi	r16, 0x40	; 64
    3248:	1a e0       	ldi	r17, 0x0A	; 10
    324a:	d8 01       	movw	r26, r16
    324c:	11 96       	adiw	r26, 0x01	; 1
    324e:	8c 91       	ld	r24, X
    3250:	11 97       	sbiw	r26, 0x01	; 1
    3252:	88 7f       	andi	r24, 0xF8	; 248
    3254:	11 96       	adiw	r26, 0x01	; 1
    3256:	8c 93       	st	X, r24
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    3258:	11 97       	sbiw	r26, 0x01	; 1
    325a:	80 e7       	ldi	r24, 0x70	; 112
    325c:	92 e0       	ldi	r25, 0x02	; 2
    325e:	96 96       	adiw	r26, 0x26	; 38
    3260:	8d 93       	st	X+, r24
    3262:	9c 93       	st	X, r25
	tc_set_wgm(&TCE1, TC_WG_NORMAL);											// Internal clock for DAC convertion
	tc_write_period(&TCE1, (sysclk_get_per_hz() / DAC_RATE_OF_CONV) - 1);		// DAC clock 48 kHz for audio play-back

	/* VCTCXO PWM signal generation */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 500);							// Init PWM structure and enable timer
    3264:	97 97       	sbiw	r26, 0x27	; 39
    3266:	24 ef       	ldi	r18, 0xF4	; 244
    3268:	31 e0       	ldi	r19, 0x01	; 1
    326a:	43 e0       	ldi	r20, 0x03	; 3
    326c:	60 e0       	ldi	r22, 0x00	; 0
    326e:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    3270:	01 96       	adiw	r24, 0x01	; 1
    3272:	44 de       	rcall	.-888    	; 0x2efc <pwm_init>
    3274:	6d e2       	ldi	r22, 0x2D	; 45
    3276:	ce 01       	movw	r24, r28
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    3278:	01 96       	adiw	r24, 0x01	; 1
    327a:	08 df       	rcall	.-496    	; 0x308c <pwm_start>
    327c:	81 2c       	mov	r8, r1
    327e:	68 94       	set
    3280:	99 24       	eor	r9, r9
    3282:	93 f8       	bld	r9, 3
    3284:	8d e5       	ldi	r24, 0x5D	; 93
    3286:	94 e7       	ldi	r25, 0x74	; 116
    3288:	f4 01       	movw	r30, r8
}

static void adc_init(void)
{
	/* Prepare the structures */
	adc_read_configuration(&ADC_3V0_VCTCXO_5V0_VBAT,								&g_adc_a_conf);
    328a:	84 af       	std	Z+60, r24	; 0x3c
    328c:	95 af       	std	Z+61, r25	; 0x3d
    328e:	63 ed       	ldi	r22, 0xD3	; 211
    3290:	72 e2       	ldi	r23, 0x22	; 34
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_3V0_VCTCXO_5V0_VBAT, ADC_3V0_VCTCXO_5V0_VBAT_CH,	&g_adcch_3v0_vctcxo_5v0_vbat_conf);
    3296:	0e 94 06 06 	call	0xc0c	; 0xc0c <adc_read_configuration>
    329a:	4f ec       	ldi	r20, 0xCF	; 207
    329c:	52 e2       	ldi	r21, 0x22	; 34
    329e:	61 e0       	ldi	r22, 0x01	; 1
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,							&g_adcch_io_adc4_conf);
    32a4:	0e 94 8a 06 	call	0xd14	; 0xd14 <adcch_read_configuration>
    32a8:	4b ec       	ldi	r20, 0xCB	; 203
    32aa:	52 e2       	ldi	r21, 0x22	; 34
    32ac:	62 e0       	ldi	r22, 0x02	; 2
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,							&g_adcch_io_adc5_conf);
    32b2:	0e 94 8a 06 	call	0xd14	; 0xd14 <adcch_read_configuration>
    32b6:	47 ec       	ldi	r20, 0xC7	; 199
    32b8:	52 e2       	ldi	r21, 0x22	; 34
    32ba:	64 e0       	ldi	r22, 0x04	; 4
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	92 e0       	ldi	r25, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    32c0:	0e 94 8a 06 	call	0xd14	; 0xd14 <adcch_read_configuration>
    32c4:	e3 ed       	ldi	r30, 0xD3	; 211
    32c6:	f2 e2       	ldi	r31, 0x22	; 34
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    32c8:	84 e0       	ldi	r24, 0x04	; 4
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    32ca:	84 83       	std	Z+4, r24	; 0x04
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    32cc:	92 81       	ldd	r25, Z+2	; 0x02
    32ce:	81 81       	ldd	r24, Z+1	; 0x01
    32d0:	0f 2e       	mov	r0, r31
    32d2:	ff ec       	ldi	r31, 0xCF	; 207
    32d4:	ef 2e       	mov	r14, r31
    32d6:	f2 e2       	ldi	r31, 0x22	; 34
    32d8:	ff 2e       	mov	r15, r31
    32da:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    32dc:	d7 01       	movw	r26, r14
    32de:	7c 92       	st	X, r7
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    32e0:	11 96       	adiw	r26, 0x01	; 1
    32e2:	1c 92       	st	X, r1
    32e4:	0f 2e       	mov	r0, r31
    32e6:	fb ec       	ldi	r31, 0xCB	; 203
    32e8:	af 2e       	mov	r10, r31
    32ea:	f2 e2       	ldi	r31, 0x22	; 34
    32ec:	bf 2e       	mov	r11, r31
    32ee:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    32f0:	d5 01       	movw	r26, r10
    32f2:	7c 92       	st	X, r7
    32f4:	20 e2       	ldi	r18, 0x20	; 32
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    32f6:	11 96       	adiw	r26, 0x01	; 1
    32f8:	2c 93       	st	X, r18
    32fa:	0f 2e       	mov	r0, r31
    32fc:	f7 ec       	ldi	r31, 0xC7	; 199
    32fe:	cf 2e       	mov	r12, r31
    3300:	f2 e2       	ldi	r31, 0x22	; 34
    3302:	df 2e       	mov	r13, r31
    3304:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    3306:	d6 01       	movw	r26, r12
    3308:	7c 92       	st	X, r7
    330a:	28 e2       	ldi	r18, 0x28	; 40
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    330c:	11 96       	adiw	r26, 0x01	; 1
    330e:	2c 93       	st	X, r18
    3310:	9f 78       	andi	r25, 0x8F	; 143
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    3312:	93 61       	ori	r25, 0x13	; 19
    3314:	92 83       	std	Z+2, r25	; 0x02
    3316:	81 70       	andi	r24, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    3318:	80 64       	ori	r24, 0x40	; 64
    331a:	81 83       	std	Z+1, r24	; 0x01
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    331c:	83 e0       	ldi	r24, 0x03	; 3
    331e:	83 83       	std	Z+3, r24	; 0x03

	/* PIN scan on ADC-channel 0 */
	adcch_set_pin_scan(&g_adcch_3v0_vctcxo_5v0_vbat_conf, 0, 3);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, cb_adc);
    3320:	f7 01       	movw	r30, r14
    3322:	83 83       	std	Z+3, r24	; 0x03
    3324:	69 e9       	ldi	r22, 0x99	; 153
    3326:	78 e1       	ldi	r23, 0x18	; 24
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	92 e0       	ldi	r25, 0x02	; 2
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    332c:	0e 94 80 03 	call	0x700	; 0x700 <adc_set_callback>
    3330:	d5 01       	movw	r26, r10
    3332:	12 96       	adiw	r26, 0x02	; 2
    3334:	9c 91       	ld	r25, X
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    3336:	f6 01       	movw	r30, r12
    3338:	82 81       	ldd	r24, Z+2	; 0x02
    333a:	d7 01       	movw	r26, r14
    333c:	12 96       	adiw	r26, 0x02	; 2
    333e:	2c 91       	ld	r18, X
    3340:	12 97       	sbiw	r26, 0x02	; 2
    3342:	20 7f       	andi	r18, 0xF0	; 240
    3344:	21 60       	ori	r18, 0x01	; 1
    3346:	12 96       	adiw	r26, 0x02	; 2
    3348:	2c 93       	st	X, r18
    334a:	90 7f       	andi	r25, 0xF0	; 240
    334c:	91 60       	ori	r25, 0x01	; 1
    334e:	f5 01       	movw	r30, r10
    3350:	92 83       	std	Z+2, r25	; 0x02
    3352:	80 7f       	andi	r24, 0xF0	; 240
    3354:	81 60       	ori	r24, 0x01	; 1
    3356:	d6 01       	movw	r26, r12
	adcch_enable_interrupt(&g_adcch_3v0_vctcxo_5v0_vbat_conf);
	adcch_enable_interrupt(&g_adcch_io_adc4_conf);
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,													&g_adc_a_conf);
    3358:	12 96       	adiw	r26, 0x02	; 2
    335a:	8c 93       	st	X, r24
    335c:	63 ed       	ldi	r22, 0xD3	; 211
    335e:	72 e2       	ldi	r23, 0x22	; 34
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_3V0_VCTCXO_5V0_VBAT, ADC_3V0_VCTCXO_5V0_VBAT_CH,	&g_adcch_3v0_vctcxo_5v0_vbat_conf);
    3364:	0e 94 9c 05 	call	0xb38	; 0xb38 <adc_write_configuration>
    3368:	a7 01       	movw	r20, r14
    336a:	61 e0       	ldi	r22, 0x01	; 1
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,							&g_adcch_io_adc4_conf);
    3370:	0e 94 3f 06 	call	0xc7e	; 0xc7e <adcch_write_configuration>
    3374:	a5 01       	movw	r20, r10
    3376:	62 e0       	ldi	r22, 0x02	; 2
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,							&g_adcch_io_adc5_conf);
    337c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <adcch_write_configuration>
    3380:	a6 01       	movw	r20, r12
    3382:	64 e0       	ldi	r22, 0x04	; 4
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	92 e0       	ldi	r25, 0x02	; 2

	evsys_init();		// Event system
	tc_init();			// Timers
	adc_init();			// ADC
	dac_init();			// DAC
	twi_init();			// I2C / TWI
    3388:	0e 94 3f 06 	call	0xc7e	; 0xc7e <adcch_write_configuration>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    338c:	0e 94 1a 02 	call	0x434	; 0x434 <twi_init>

	/* All interrupt sources & PMIC are prepared until here - IRQ activation follows */
	cpu_irq_enable();
    3390:	0e 94 7f 03 	call	0x6fe	; 0x6fe <board_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3394:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3396:	f4 01       	movw	r30, r8
    3398:	80 81       	ld	r24, Z
    339a:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    339c:	81 60       	ori	r24, 0x01	; 1
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    339e:	80 83       	st	Z, r24
    33a0:	d8 01       	movw	r26, r16
    33a2:	8c 91       	ld	r24, X
	dac_enable(&DACB);
}

static void usb_init(void)
{
	udc_start();
    33a4:	80 7f       	andi	r24, 0xF0	; 240
    33a6:	81 60       	ori	r24, 0x01	; 1
	tc_start();			// All clocks and PWM timers start here

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB
#if 1
	stdio_usb_init();	// Init and enable stdio_usb
    33a8:	8c 93       	st	X, r24
    33aa:	ee d5       	rcall	.+3036   	; 0x3f88 <udc_start>
	stdio_usb_enable();
    33ac:	0e 94 17 23 	call	0x462e	; 0x462e <stdio_usb_init>
#endif

	twi_start();		// Start TWI
    33b0:	0e 94 13 23 	call	0x4626	; 0x4626 <stdio_usb_enable>
}

static void adc_start(void)
{
	/* Power up after configurations are being set */
	adc_enable(&ADCA);
    33b4:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_start>
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	92 e0       	ldi	r25, 0x02	; 2
#endif
}

static void dac_start(void)
{
	dac_enable(&DACB);
    33bc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <adc_enable>
    33c0:	80 e2       	ldi	r24, 0x20	; 32
    33c2:	93 e0       	ldi	r25, 0x03	; 3
	twi_start();		// Start TWI
	adc_start();		// Start AD convertions
	dac_start();		// Start DA convertions

	/* The application code */
	runmode = 1;
    33c4:	0e 94 e5 06 	call	0xdca	; 0xdca <dac_enable>
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    33c8:	70 92 dc 22 	sts	0x22DC, r7	; 0x8022dc <runmode>
    33cc:	0f 2e       	mov	r0, r31
    33ce:	f0 e2       	ldi	r31, 0x20	; 32
    33d0:	af 2e       	mov	r10, r31
    33d2:	f3 e0       	ldi	r31, 0x03	; 3
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    33d4:	bf 2e       	mov	r11, r31
    33d6:	f0 2d       	mov	r31, r0
    33d8:	0f 2e       	mov	r0, r31
    33da:	fa e3       	ldi	r31, 0x3A	; 58
    33dc:	2f 2e       	mov	r2, r31
    33de:	f3 e0       	ldi	r31, 0x03	; 3

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    33e0:	3f 2e       	mov	r3, r31
    33e2:	f0 2d       	mov	r31, r0
    33e4:	0f 2e       	mov	r0, r31
    33e6:	fb e2       	ldi	r31, 0x2B	; 43
    33e8:	8f 2e       	mov	r8, r31
    33ea:	f4 e2       	ldi	r31, 0x24	; 36
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    33ec:	9f 2e       	mov	r9, r31
    33ee:	f0 2d       	mov	r31, r0
}

static void task(void)
{
	static uint32_t last = 0;
	uint32_t now = rtc_get_time();
    33f0:	08 e4       	ldi	r16, 0x48	; 72
    33f2:	10 e0       	ldi	r17, 0x00	; 0
    33f4:	0e 94 39 01 	call	0x272	; 0x272 <rtc_get_time>
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    33f8:	6b 01       	movw	r12, r22
    33fa:	7c 01       	movw	r14, r24

static void task_dac(void)
{
	static int idx_dacX = 0;

	if (dac_channel_is_ready(&DAC_IO_DAC0, DAC_CH0 | DAC_CH1)) {
    33fc:	f5 01       	movw	r30, r10
    33fe:	85 81       	ldd	r24, Z+5	; 0x05
    3400:	83 70       	andi	r24, 0x03	; 3
		dac_set_channel_value(&DAC_IO_DAC0, DAC_IO_DAC0_CHANNEL, dac_io_dac0_buf[idx_dacX]);
    3402:	83 30       	cpi	r24, 0x03	; 3
    3404:	b9 f5       	brne	.+110    	; 0x3474 <main+0x2ae>
    3406:	e0 91 ad 22 	lds	r30, 0x22AD	; 0x8022ad <idx_dacX.6973>
    340a:	f0 91 ae 22 	lds	r31, 0x22AE	; 0x8022ae <idx_dacX.6973+0x1>
    340e:	ee 0f       	add	r30, r30
    3410:	ff 1f       	adc	r31, r31
    3412:	ea 51       	subi	r30, 0x1A	; 26
    3414:	ff 4d       	sbci	r31, 0xDF	; 223

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3416:	20 81       	ld	r18, Z
    3418:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    341a:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    341c:	88 87       	std	Y+8, r24	; 0x08
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    341e:	f8 94       	cli
    3420:	88 85       	ldd	r24, Y+8	; 0x08
    3422:	d5 01       	movw	r26, r10
    3424:	58 96       	adiw	r26, 0x18	; 24
    3426:	2d 93       	st	X+, r18
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3428:	3c 93       	st	X, r19
		dac_set_channel_value(&DAC_IO_DAC1, DAC_IO_DAC1_CHANNEL, dac_io_dac1_buf[idx_dacX]);
    342a:	59 97       	sbiw	r26, 0x19	; 25
    342c:	8f bf       	out	0x3f, r24	; 63
    342e:	e0 91 ad 22 	lds	r30, 0x22AD	; 0x8022ad <idx_dacX.6973>
    3432:	f0 91 ae 22 	lds	r31, 0x22AE	; 0x8022ae <idx_dacX.6973+0x1>
    3436:	ee 0f       	add	r30, r30
    3438:	ff 1f       	adc	r31, r31
    343a:	ea 51       	subi	r30, 0x1A	; 26
    343c:	ff 4d       	sbci	r31, 0xDF	; 223

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    343e:	20 81       	ld	r18, Z
    3440:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    3442:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    3444:	89 83       	std	Y+1, r24	; 0x01
    3446:	f8 94       	cli
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	f1 01       	movw	r30, r2
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    344c:	20 83       	st	Z, r18
		
		idx_dacX++;
		idx_dacX %= DAC_NR_OF_SAMPLES;
    344e:	31 83       	std	Z+1, r19	; 0x01
    3450:	8f bf       	out	0x3f, r24	; 63
    3452:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <idx_dacX.6973>
    3456:	90 91 ae 22 	lds	r25, 0x22AE	; 0x8022ae <idx_dacX.6973+0x1>
    345a:	01 96       	adiw	r24, 0x01	; 1
    345c:	8f 71       	andi	r24, 0x1F	; 31
    345e:	90 78       	andi	r25, 0x80	; 128
    3460:	99 23       	and	r25, r25
    3462:	24 f4       	brge	.+8      	; 0x346c <main+0x2a6>
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	80 6e       	ori	r24, 0xE0	; 224
    3468:	9f 6f       	ori	r25, 0xFF	; 255
    346a:	01 96       	adiw	r24, 0x01	; 1
    346c:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <idx_dacX.6973>

	/* Handling the USB connection */
	task_usb();

	/* Handle TWI1 and TWI2 communications */
	task_twi(now, last);
    3470:	90 93 ae 22 	sts	0x22AE, r25	; 0x8022ae <idx_dacX.6973+0x1>
    3474:	40 90 af 22 	lds	r4, 0x22AF	; 0x8022af <last.6987>
    3478:	50 90 b0 22 	lds	r5, 0x22B0	; 0x8022b0 <last.6987+0x1>
    347c:	60 90 b1 22 	lds	r6, 0x22B1	; 0x8022b1 <last.6987+0x2>
}

static void task_twi(uint32_t now, uint32_t last)
{
	/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
	task_twi_onboard(now, last);
    3480:	70 90 b2 22 	lds	r7, 0x22B2	; 0x8022b2 <last.6987+0x3>
    3484:	a3 01       	movw	r20, r6
    3486:	92 01       	movw	r18, r4
    3488:	c7 01       	movw	r24, r14
    348a:	b6 01       	movw	r22, r12

	/* TWI2 - LCD Port */
	task_twi_lcd(now, last);
    348c:	0e 94 9b 02 	call	0x536	; 0x536 <task_twi_onboard>
    3490:	a3 01       	movw	r20, r6
    3492:	92 01       	movw	r18, r4
    3494:	c7 01       	movw	r24, r14
    3496:	b6 01       	movw	r22, r12
	if ((last >> 10) != now_sec) {
		printf("%c\r\nFindMeSAT V1 @USB: RTC32 = %06ld sec\r\n", 0x0c, now_sec);
	}
#endif

	last = now;
    3498:	0e 94 9c 02 	call	0x538	; 0x538 <task_twi_lcd>
    349c:	c0 92 af 22 	sts	0x22AF, r12	; 0x8022af <last.6987>
    34a0:	d0 92 b0 22 	sts	0x22B0, r13	; 0x8022b0 <last.6987+0x1>
    34a4:	e0 92 b1 22 	sts	0x22B1, r14	; 0x8022b1 <last.6987+0x2>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    34a8:	f0 92 b2 22 	sts	0x22B2, r15	; 0x8022b2 <last.6987+0x3>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    34ac:	f8 94       	cli
    34ae:	d4 01       	movw	r26, r8
    34b0:	8c 91       	ld	r24, X
    34b2:	81 11       	cpse	r24, r1
    34b4:	09 c0       	rjmp	.+18     	; 0x34c8 <main+0x302>
    34b6:	ac e2       	ldi	r26, 0x2C	; 44
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    34b8:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    34ba:	e0 e0       	ldi	r30, 0x00	; 0
    34bc:	ef 5f       	subi	r30, 0xFF	; 255
    34be:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    34c0:	88 23       	and	r24, r24
    34c2:	e1 f3       	breq	.-8      	; 0x34bc <main+0x2f6>
		cpu_irq_enable();
    34c4:	e1 11       	cpse	r30, r1
    34c6:	02 c0       	rjmp	.+4      	; 0x34cc <main+0x306>
    34c8:	78 94       	sei
    34ca:	12 c0       	rjmp	.+36     	; 0x34f0 <main+0x32a>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    34cc:	d8 01       	movw	r26, r16
    34ce:	8c 91       	ld	r24, X
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	ee 5d       	subi	r30, 0xDE	; 222
    34d4:	ff 4d       	sbci	r31, 0xDF	; 223
    34d6:	81 7f       	andi	r24, 0xF1	; 241
    34d8:	90 81       	ld	r25, Z
	sleep_enable();
    34da:	89 2b       	or	r24, r25
    34dc:	8c 93       	st	X, r24
    34de:	8c 91       	ld	r24, X

	cpu_irq_enable();
    34e0:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    34e2:	8c 93       	st	X, r24

	sleep_disable();
    34e4:	78 94       	sei
    34e6:	88 95       	sleep
    34e8:	f8 01       	movw	r30, r16
    34ea:	80 81       	ld	r24, Z
	adc_start();		// Start AD convertions
	dac_start();		// Start DA convertions

	/* The application code */
	runmode = 1;
    while (runmode) {
    34ec:	8e 7f       	andi	r24, 0xFE	; 254
    34ee:	80 83       	st	Z, r24
    34f0:	80 91 dc 22 	lds	r24, 0x22DC	; 0x8022dc <runmode>
		task();
		sleepmgr_enter_sleep();
    }

	cpu_irq_disable();
    34f4:	81 11       	cpse	r24, r1
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    34f6:	7e cf       	rjmp	.-260    	; 0x33f4 <main+0x22e>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    34f8:	f8 94       	cli
    34fa:	f8 94       	cli
    34fc:	80 91 2b 24 	lds	r24, 0x242B	; 0x80242b <sleepmgr_locks>
    3500:	81 11       	cpse	r24, r1
    3502:	09 c0       	rjmp	.+18     	; 0x3516 <main+0x350>
    3504:	ac e2       	ldi	r26, 0x2C	; 44
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3506:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3508:	e0 e0       	ldi	r30, 0x00	; 0
    350a:	ef 5f       	subi	r30, 0xFF	; 255
    350c:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    350e:	88 23       	and	r24, r24
    3510:	e1 f3       	breq	.-8      	; 0x350a <main+0x344>
		cpu_irq_enable();
    3512:	e1 11       	cpse	r30, r1
    3514:	02 c0       	rjmp	.+4      	; 0x351a <main+0x354>
    3516:	78 94       	sei
    3518:	13 c0       	rjmp	.+38     	; 0x3540 <main+0x37a>
    351a:	a8 e4       	ldi	r26, 0x48	; 72

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	8c 91       	ld	r24, X
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	ee 5d       	subi	r30, 0xDE	; 222
    3524:	ff 4d       	sbci	r31, 0xDF	; 223
    3526:	98 2f       	mov	r25, r24
    3528:	91 7f       	andi	r25, 0xF1	; 241
    352a:	80 81       	ld	r24, Z
	sleep_enable();
    352c:	89 2b       	or	r24, r25
    352e:	8c 93       	st	X, r24
    3530:	8c 91       	ld	r24, X

	cpu_irq_enable();
    3532:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    3534:	8c 93       	st	X, r24

	sleep_disable();
    3536:	78 94       	sei
    3538:	88 95       	sleep
    353a:	8c 91       	ld	r24, X
	sleepmgr_enter_sleep();

	return retcode;
}
    353c:	8e 7f       	andi	r24, 0xFE	; 254
    353e:	8c 93       	st	X, r24
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	28 96       	adiw	r28, 0x08	; 8
    3546:	cd bf       	out	0x3d, r28	; 61
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	df 91       	pop	r29
    354c:	cf 91       	pop	r28
    354e:	1f 91       	pop	r17
    3550:	0f 91       	pop	r16
    3552:	ff 90       	pop	r15
    3554:	ef 90       	pop	r14
    3556:	df 90       	pop	r13
    3558:	cf 90       	pop	r12
    355a:	bf 90       	pop	r11
    355c:	af 90       	pop	r10
    355e:	9f 90       	pop	r9
    3560:	8f 90       	pop	r8
    3562:	7f 90       	pop	r7
    3564:	6f 90       	pop	r6
    3566:	5f 90       	pop	r5
    3568:	4f 90       	pop	r4
    356a:	3f 90       	pop	r3
    356c:	2f 90       	pop	r2
    356e:	08 95       	ret

00003570 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
    3578:	28 97       	sbiw	r28, 0x08	; 8
    357a:	cd bf       	out	0x3d, r28	; 61
    357c:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    357e:	8f ef       	ldi	r24, 0xFF	; 255
    3580:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    3584:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    3588:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    358c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3590:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    3594:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    3598:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    359c:	61 e0       	ldi	r22, 0x01	; 1
    359e:	81 e4       	ldi	r24, 0x41	; 65
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	0e 94 4a 23 	call	0x4694	; 0x4694 <ccp_write_io>
    35a6:	6c e1       	ldi	r22, 0x1C	; 28
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	82 e0       	ldi	r24, 0x02	; 2
    35ac:	0e 94 40 23 	call	0x4680	; 0x4680 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    35b0:	8a 83       	std	Y+2, r24	; 0x02
    35b2:	6d e1       	ldi	r22, 0x1D	; 29
    35b4:	70 e0       	ldi	r23, 0x00	; 0
    35b6:	82 e0       	ldi	r24, 0x02	; 2
    35b8:	0e 94 40 23 	call	0x4680	; 0x4680 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    35bc:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	9a 81       	ldd	r25, Y+2	; 0x02
    35c2:	01 96       	adiw	r24, 0x01	; 1
    35c4:	21 f4       	brne	.+8      	; 0x35ce <sysclk_init+0x5e>
		cal = 0x2340;
    35c6:	80 e4       	ldi	r24, 0x40	; 64
    35c8:	93 e2       	ldi	r25, 0x23	; 35
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	9a 83       	std	Y+2, r25	; 0x02
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	9a 81       	ldd	r25, Y+2	; 0x02
    35d2:	8b 83       	std	Y+3, r24	; 0x03
    35d4:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    35d6:	e0 e6       	ldi	r30, 0x60	; 96
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    35dc:	8c 81       	ldd	r24, Y+4	; 0x04
    35de:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    35e0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    35e4:	84 fd       	sbrc	r24, 4
    35e6:	21 c0       	rjmp	.+66     	; 0x362a <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    35e8:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    35ec:	83 fd       	sbrc	r24, 3
    35ee:	0e c0       	rjmp	.+28     	; 0x360c <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    35f0:	e0 e5       	ldi	r30, 0x50	; 80
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    35f6:	8f b7       	in	r24, 0x3f	; 63
    35f8:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    35fa:	f8 94       	cli
	return flags;
    35fc:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    35fe:	80 81       	ld	r24, Z
    3600:	88 60       	ori	r24, 0x08	; 8
    3602:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3604:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3606:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    3608:	83 ff       	sbrs	r24, 3
    360a:	fd cf       	rjmp	.-6      	; 0x3606 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    360c:	8f b7       	in	r24, 0x3f	; 63
    360e:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    3610:	f8 94       	cli
	return flags;
    3612:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    3614:	e0 e5       	ldi	r30, 0x50	; 80
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	83 ec       	ldi	r24, 0xC3	; 195
    361a:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    361c:	80 81       	ld	r24, Z
    361e:	80 61       	ori	r24, 0x10	; 16
    3620:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3622:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    3624:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    3626:	84 ff       	sbrs	r24, 4
    3628:	fd cf       	rjmp	.-6      	; 0x3624 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    362a:	64 e0       	ldi	r22, 0x04	; 4
    362c:	80 e4       	ldi	r24, 0x40	; 64
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	0e 94 4a 23 	call	0x4694	; 0x4694 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3634:	8f b7       	in	r24, 0x3f	; 63
    3636:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    3638:	f8 94       	cli
	return flags;
    363a:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    363c:	e0 e5       	ldi	r30, 0x50	; 80
    363e:	f0 e0       	ldi	r31, 0x00	; 0
    3640:	80 81       	ld	r24, Z
    3642:	8e 7f       	andi	r24, 0xFE	; 254
    3644:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3646:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    3648:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    364a:	8f b7       	in	r24, 0x3f	; 63
    364c:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    364e:	f8 94       	cli
	return flags;
    3650:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    3652:	80 81       	ld	r24, Z
    3654:	88 60       	ori	r24, 0x08	; 8
    3656:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3658:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    365a:	81 81       	ldd	r24, Z+1	; 0x01
    365c:	83 ff       	sbrs	r24, 3
    365e:	fd cf       	rjmp	.-6      	; 0x365a <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    3660:	8b e0       	ldi	r24, 0x0B	; 11
    3662:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    3666:	28 96       	adiw	r28, 0x08	; 8
    3668:	cd bf       	out	0x3d, r28	; 61
    366a:	de bf       	out	0x3e, r29	; 62
    366c:	df 91       	pop	r29
    366e:	cf 91       	pop	r28
    3670:	08 95       	ret

00003672 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    3672:	cf 93       	push	r28
    3674:	df 93       	push	r29
    3676:	1f 92       	push	r1
    3678:	cd b7       	in	r28, 0x3d	; 61
    367a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    367c:	9f b7       	in	r25, 0x3f	; 63
    367e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    3680:	f8 94       	cli
	return flags;
    3682:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    3684:	e8 2f       	mov	r30, r24
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	e0 59       	subi	r30, 0x90	; 144
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	60 95       	com	r22
    368e:	80 81       	ld	r24, Z
    3690:	68 23       	and	r22, r24
    3692:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3694:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    3696:	0f 90       	pop	r0
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	08 95       	ret

0000369e <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    369e:	cf 93       	push	r28
    36a0:	df 93       	push	r29
    36a2:	1f 92       	push	r1
    36a4:	cd b7       	in	r28, 0x3d	; 61
    36a6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    36a8:	9f b7       	in	r25, 0x3f	; 63
    36aa:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    36ac:	f8 94       	cli
	return flags;
    36ae:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    36b0:	e8 2f       	mov	r30, r24
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	e0 59       	subi	r30, 0x90	; 144
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	80 81       	ld	r24, Z
    36ba:	68 2b       	or	r22, r24
    36bc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    36be:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    36c0:	0f 90       	pop	r0
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	08 95       	ret

000036c8 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
    36cc:	1f 92       	push	r1
    36ce:	1f 92       	push	r1
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    36d4:	86 30       	cpi	r24, 0x06	; 6
    36d6:	11 f0       	breq	.+4      	; 0x36dc <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	01 c0       	rjmp	.+2      	; 0x36de <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    36dc:	68 e1       	ldi	r22, 0x18	; 24
    36de:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    36e2:	81 fd       	sbrc	r24, 1
    36e4:	2a c0       	rjmp	.+84     	; 0x373a <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    36e6:	8f b7       	in	r24, 0x3f	; 63
    36e8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    36ea:	f8 94       	cli
	return flags;
    36ec:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    36ee:	e0 e5       	ldi	r30, 0x50	; 80
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	82 60       	ori	r24, 0x02	; 2
    36f6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    36f8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    36fa:	81 81       	ldd	r24, Z+1	; 0x01
    36fc:	81 ff       	sbrs	r24, 1
    36fe:	fd cf       	rjmp	.-6      	; 0x36fa <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3700:	8f b7       	in	r24, 0x3f	; 63
    3702:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3704:	f8 94       	cli
	return flags;
    3706:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    3708:	a0 e5       	ldi	r26, 0x50	; 80
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	16 96       	adiw	r26, 0x06	; 6
    370e:	8c 91       	ld	r24, X
    3710:	16 97       	sbiw	r26, 0x06	; 6
    3712:	89 7f       	andi	r24, 0xF9	; 249
    3714:	16 96       	adiw	r26, 0x06	; 6
    3716:	8c 93       	st	X, r24
    3718:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    371a:	e0 e6       	ldi	r30, 0x60	; 96
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	80 e8       	ldi	r24, 0x80	; 128
    3720:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    3722:	8b eb       	ldi	r24, 0xBB	; 187
    3724:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    3726:	16 96       	adiw	r26, 0x06	; 6
    3728:	8c 91       	ld	r24, X
    372a:	16 97       	sbiw	r26, 0x06	; 6
    372c:	84 60       	ori	r24, 0x04	; 4
    372e:	16 96       	adiw	r26, 0x06	; 6
    3730:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    3732:	80 81       	ld	r24, Z
    3734:	81 60       	ori	r24, 0x01	; 1
    3736:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3738:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    373a:	63 60       	ori	r22, 0x03	; 3
    373c:	84 e4       	ldi	r24, 0x44	; 68
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	a9 d7       	rcall	.+3922   	; 0x4694 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    3742:	60 e4       	ldi	r22, 0x40	; 64
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	95 df       	rcall	.-214    	; 0x3672 <sysclk_enable_module>
}
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	df 91       	pop	r29
    374e:	cf 91       	pop	r28
    3750:	08 95       	ret

00003752 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    3752:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <udi_cdc_nb_comm_enabled>
    3756:	81 50       	subi	r24, 0x01	; 1
    3758:	80 93 f2 23 	sts	0x23F2, r24	; 0x8023f2 <udi_cdc_nb_comm_enabled>
    375c:	08 95       	ret

0000375e <udi_cdc_data_setup>:
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	08 95       	ret

00003762 <udi_cdc_getsetting>:
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	08 95       	ret

00003766 <udi_cdc_line_coding_received>:
    3766:	60 e0       	ldi	r22, 0x00	; 0
    3768:	74 e2       	ldi	r23, 0x24	; 36
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	27 cd       	rjmp	.-1458   	; 0x31bc <usb_callback_config>
    376e:	08 95       	ret

00003770 <udi_cdc_comm_enable>:
    3770:	10 92 f2 23 	sts	0x23F2, r1	; 0x8023f2 <udi_cdc_nb_comm_enabled>
    3774:	10 92 fe 23 	sts	0x23FE, r1	; 0x8023fe <udi_cdc_state>
    3778:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <udi_cdc_state+0x1>
    377c:	e4 ef       	ldi	r30, 0xF4	; 244
    377e:	f3 e2       	ldi	r31, 0x23	; 35
    3780:	81 ea       	ldi	r24, 0xA1	; 161
    3782:	80 83       	st	Z, r24
    3784:	80 e2       	ldi	r24, 0x20	; 32
    3786:	81 83       	std	Z+1, r24	; 0x01
    3788:	12 82       	std	Z+2, r1	; 0x02
    378a:	13 82       	std	Z+3, r1	; 0x03
    378c:	14 82       	std	Z+4, r1	; 0x04
    378e:	15 82       	std	Z+5, r1	; 0x05
    3790:	82 e0       	ldi	r24, 0x02	; 2
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	86 83       	std	Z+6, r24	; 0x06
    3796:	97 83       	std	Z+7, r25	; 0x07
    3798:	10 86       	std	Z+8, r1	; 0x08
    379a:	11 86       	std	Z+9, r1	; 0x09
    379c:	e0 e0       	ldi	r30, 0x00	; 0
    379e:	f4 e2       	ldi	r31, 0x24	; 36
    37a0:	80 e0       	ldi	r24, 0x00	; 0
    37a2:	92 ec       	ldi	r25, 0xC2	; 194
    37a4:	a1 e0       	ldi	r26, 0x01	; 1
    37a6:	b0 e0       	ldi	r27, 0x00	; 0
    37a8:	80 83       	st	Z, r24
    37aa:	91 83       	std	Z+1, r25	; 0x01
    37ac:	a2 83       	std	Z+2, r26	; 0x02
    37ae:	b3 83       	std	Z+3, r27	; 0x03
    37b0:	14 82       	std	Z+4, r1	; 0x04
    37b2:	15 82       	std	Z+5, r1	; 0x05
    37b4:	88 e0       	ldi	r24, 0x08	; 8
    37b6:	86 83       	std	Z+6, r24	; 0x06
    37b8:	bf 01       	movw	r22, r30
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	ff dc       	rcall	.-1538   	; 0x31bc <usb_callback_config>
    37be:	f7 dc       	rcall	.-1554   	; 0x31ae <usb_callback_cdc_enable>
    37c0:	88 23       	and	r24, r24
    37c2:	29 f0       	breq	.+10     	; 0x37ce <udi_cdc_comm_enable+0x5e>
    37c4:	90 91 f2 23 	lds	r25, 0x23F2	; 0x8023f2 <udi_cdc_nb_comm_enabled>
    37c8:	9f 5f       	subi	r25, 0xFF	; 255
    37ca:	90 93 f2 23 	sts	0x23F2, r25	; 0x8023f2 <udi_cdc_nb_comm_enabled>
    37ce:	08 95       	ret

000037d0 <udi_cdc_tx_send>:
    37d0:	ff 92       	push	r15
    37d2:	0f 93       	push	r16
    37d4:	1f 93       	push	r17
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	1f 92       	push	r1
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
    37e0:	80 91 e0 22 	lds	r24, 0x22E0	; 0x8022e0 <udi_cdc_tx_trans_ongoing>
    37e4:	81 11       	cpse	r24, r1
    37e6:	9f c0       	rjmp	.+318    	; 0x3926 <udi_cdc_tx_send+0x156>
    37e8:	0e 94 1b 13 	call	0x2636	; 0x2636 <udd_is_high_speed>
    37ec:	88 23       	and	r24, r24
    37ee:	51 f0       	breq	.+20     	; 0x3804 <udi_cdc_tx_send+0x34>
    37f0:	00 91 e1 22 	lds	r16, 0x22E1	; 0x8022e1 <udi_cdc_tx_sof_num>
    37f4:	10 91 e2 22 	lds	r17, 0x22E2	; 0x8022e2 <udi_cdc_tx_sof_num+0x1>
    37f8:	0e 94 28 13 	call	0x2650	; 0x2650 <udd_get_micro_frame_number>
    37fc:	08 17       	cp	r16, r24
    37fe:	19 07       	cpc	r17, r25
    3800:	59 f4       	brne	.+22     	; 0x3818 <udi_cdc_tx_send+0x48>
    3802:	91 c0       	rjmp	.+290    	; 0x3926 <udi_cdc_tx_send+0x156>
    3804:	00 91 e1 22 	lds	r16, 0x22E1	; 0x8022e1 <udi_cdc_tx_sof_num>
    3808:	10 91 e2 22 	lds	r17, 0x22E2	; 0x8022e2 <udi_cdc_tx_sof_num+0x1>
    380c:	0e 94 23 13 	call	0x2646	; 0x2646 <udd_get_frame_number>
    3810:	08 17       	cp	r16, r24
    3812:	19 07       	cpc	r17, r25
    3814:	09 f4       	brne	.+2      	; 0x3818 <udi_cdc_tx_send+0x48>
    3816:	87 c0       	rjmp	.+270    	; 0x3926 <udi_cdc_tx_send+0x156>
    3818:	8f b7       	in	r24, 0x3f	; 63
    381a:	89 83       	std	Y+1, r24	; 0x01
    381c:	f8 94       	cli
    381e:	19 81       	ldd	r17, Y+1	; 0x01
    3820:	00 91 e3 22 	lds	r16, 0x22E3	; 0x8022e3 <udi_cdc_tx_buf_sel>
    3824:	e0 2f       	mov	r30, r16
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	ee 0f       	add	r30, r30
    382a:	ff 1f       	adc	r31, r31
    382c:	ec 51       	subi	r30, 0x1C	; 28
    382e:	fd 4d       	sbci	r31, 0xDD	; 221
    3830:	80 81       	ld	r24, Z
    3832:	91 81       	ldd	r25, Z+1	; 0x01
    3834:	89 2b       	or	r24, r25
    3836:	09 f5       	brne	.+66     	; 0x387a <udi_cdc_tx_send+0xaa>
    3838:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <sof_zlp_counter.5059>
    383c:	90 91 de 22 	lds	r25, 0x22DE	; 0x8022de <sof_zlp_counter.5059+0x1>
    3840:	01 96       	adiw	r24, 0x01	; 1
    3842:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <sof_zlp_counter.5059>
    3846:	90 93 de 22 	sts	0x22DE, r25	; 0x8022de <sof_zlp_counter.5059+0x1>
    384a:	0e 94 1b 13 	call	0x2636	; 0x2636 <udd_is_high_speed>
    384e:	81 11       	cpse	r24, r1
    3850:	07 c0       	rjmp	.+14     	; 0x3860 <udi_cdc_tx_send+0x90>
    3852:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <sof_zlp_counter.5059>
    3856:	90 91 de 22 	lds	r25, 0x22DE	; 0x8022de <sof_zlp_counter.5059+0x1>
    385a:	84 36       	cpi	r24, 0x64	; 100
    385c:	91 05       	cpc	r25, r1
    385e:	58 f0       	brcs	.+22     	; 0x3876 <udi_cdc_tx_send+0xa6>
    3860:	0e 94 1b 13 	call	0x2636	; 0x2636 <udd_is_high_speed>
    3864:	88 23       	and	r24, r24
    3866:	49 f0       	breq	.+18     	; 0x387a <udi_cdc_tx_send+0xaa>
    3868:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <sof_zlp_counter.5059>
    386c:	90 91 de 22 	lds	r25, 0x22DE	; 0x8022de <sof_zlp_counter.5059+0x1>
    3870:	80 32       	cpi	r24, 0x20	; 32
    3872:	93 40       	sbci	r25, 0x03	; 3
    3874:	10 f4       	brcc	.+4      	; 0x387a <udi_cdc_tx_send+0xaa>
    3876:	1f bf       	out	0x3f, r17	; 63
    3878:	56 c0       	rjmp	.+172    	; 0x3926 <udi_cdc_tx_send+0x156>
    387a:	10 92 dd 22 	sts	0x22DD, r1	; 0x8022dd <sof_zlp_counter.5059>
    387e:	10 92 de 22 	sts	0x22DE, r1	; 0x8022de <sof_zlp_counter.5059+0x1>
    3882:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <udi_cdc_tx_both_buf_to_send>
    3886:	81 11       	cpse	r24, r1
    3888:	06 c0       	rjmp	.+12     	; 0x3896 <udi_cdc_tx_send+0xc6>
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	01 11       	cpse	r16, r1
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	80 93 e3 22 	sts	0x22E3, r24	; 0x8022e3 <udi_cdc_tx_buf_sel>
    3894:	04 c0       	rjmp	.+8      	; 0x389e <udi_cdc_tx_send+0xce>
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	01 11       	cpse	r16, r1
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	08 2f       	mov	r16, r24
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	80 93 e0 22 	sts	0x22E0, r24	; 0x8022e0 <udi_cdc_tx_trans_ongoing>
    38a4:	1f bf       	out	0x3f, r17	; 63
    38a6:	10 e0       	ldi	r17, 0x00	; 0
    38a8:	f8 01       	movw	r30, r16
    38aa:	ee 0f       	add	r30, r30
    38ac:	ff 1f       	adc	r31, r31
    38ae:	ec 51       	subi	r30, 0x1C	; 28
    38b0:	fd 4d       	sbci	r31, 0xDD	; 221
    38b2:	80 81       	ld	r24, Z
    38b4:	91 81       	ldd	r25, Z+1	; 0x01
    38b6:	ff 24       	eor	r15, r15
    38b8:	f3 94       	inc	r15
    38ba:	80 34       	cpi	r24, 0x40	; 64
    38bc:	91 05       	cpc	r25, r1
    38be:	09 f4       	brne	.+2      	; 0x38c2 <udi_cdc_tx_send+0xf2>
    38c0:	f1 2c       	mov	r15, r1
    38c2:	80 34       	cpi	r24, 0x40	; 64
    38c4:	91 05       	cpc	r25, r1
    38c6:	91 f0       	breq	.+36     	; 0x38ec <udi_cdc_tx_send+0x11c>
    38c8:	0e 94 1b 13 	call	0x2636	; 0x2636 <udd_is_high_speed>
    38cc:	88 23       	and	r24, r24
    38ce:	39 f0       	breq	.+14     	; 0x38de <udi_cdc_tx_send+0x10e>
    38d0:	0e 94 28 13 	call	0x2650	; 0x2650 <udd_get_micro_frame_number>
    38d4:	80 93 e1 22 	sts	0x22E1, r24	; 0x8022e1 <udi_cdc_tx_sof_num>
    38d8:	90 93 e2 22 	sts	0x22E2, r25	; 0x8022e2 <udi_cdc_tx_sof_num+0x1>
    38dc:	0b c0       	rjmp	.+22     	; 0x38f4 <udi_cdc_tx_send+0x124>
    38de:	0e 94 23 13 	call	0x2646	; 0x2646 <udd_get_frame_number>
    38e2:	80 93 e1 22 	sts	0x22E1, r24	; 0x8022e1 <udi_cdc_tx_sof_num>
    38e6:	90 93 e2 22 	sts	0x22E2, r25	; 0x8022e2 <udi_cdc_tx_sof_num+0x1>
    38ea:	04 c0       	rjmp	.+8      	; 0x38f4 <udi_cdc_tx_send+0x124>
    38ec:	10 92 e1 22 	sts	0x22E1, r1	; 0x8022e1 <udi_cdc_tx_sof_num>
    38f0:	10 92 e2 22 	sts	0x22E2, r1	; 0x8022e2 <udi_cdc_tx_sof_num+0x1>
    38f4:	f8 01       	movw	r30, r16
    38f6:	ee 0f       	add	r30, r30
    38f8:	ff 1f       	adc	r31, r31
    38fa:	ec 51       	subi	r30, 0x1C	; 28
    38fc:	fd 4d       	sbci	r31, 0xDD	; 221
    38fe:	20 81       	ld	r18, Z
    3900:	31 81       	ldd	r19, Z+1	; 0x01
    3902:	a8 01       	movw	r20, r16
    3904:	00 24       	eor	r0, r0
    3906:	56 95       	lsr	r21
    3908:	47 95       	ror	r20
    390a:	07 94       	ror	r0
    390c:	56 95       	lsr	r21
    390e:	47 95       	ror	r20
    3910:	07 94       	ror	r0
    3912:	54 2f       	mov	r21, r20
    3914:	40 2d       	mov	r20, r0
    3916:	48 51       	subi	r20, 0x18	; 24
    3918:	5d 4d       	sbci	r21, 0xDD	; 221
    391a:	0d e9       	ldi	r16, 0x9D	; 157
    391c:	1c e1       	ldi	r17, 0x1C	; 28
    391e:	6f 2d       	mov	r22, r15
    3920:	81 e8       	ldi	r24, 0x81	; 129
    3922:	0e 94 0c 14 	call	0x2818	; 0x2818 <udd_ep_run>
    3926:	0f 90       	pop	r0
    3928:	df 91       	pop	r29
    392a:	cf 91       	pop	r28
    392c:	1f 91       	pop	r17
    392e:	0f 91       	pop	r16
    3930:	ff 90       	pop	r15
    3932:	08 95       	ret

00003934 <udi_cdc_data_sof_notify>:
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	4c cf       	rjmp	.-360    	; 0x37d0 <udi_cdc_tx_send>
    3938:	08 95       	ret

0000393a <udi_cdc_data_sent>:
    393a:	81 11       	cpse	r24, r1
    393c:	19 c0       	rjmp	.+50     	; 0x3970 <udi_cdc_data_sent+0x36>
    393e:	20 91 e3 22 	lds	r18, 0x22E3	; 0x8022e3 <udi_cdc_tx_buf_sel>
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	22 23       	and	r18, r18
    3948:	11 f0       	breq	.+4      	; 0x394e <udi_cdc_data_sent+0x14>
    394a:	80 e0       	ldi	r24, 0x00	; 0
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	88 0f       	add	r24, r24
    3950:	99 1f       	adc	r25, r25
    3952:	fc 01       	movw	r30, r24
    3954:	ec 51       	subi	r30, 0x1C	; 28
    3956:	fd 4d       	sbci	r31, 0xDD	; 221
    3958:	10 82       	st	Z, r1
    395a:	11 82       	std	Z+1, r1	; 0x01
    395c:	10 92 df 22 	sts	0x22DF, r1	; 0x8022df <udi_cdc_tx_both_buf_to_send>
    3960:	10 92 e0 22 	sts	0x22E0, r1	; 0x8022e0 <udi_cdc_tx_trans_ongoing>
    3964:	67 2b       	or	r22, r23
    3966:	11 f0       	breq	.+4      	; 0x396c <udi_cdc_data_sent+0x32>
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	2c dc       	rcall	.-1960   	; 0x31c4 <usb_callback_tx_empty_notify>
    396c:	80 e0       	ldi	r24, 0x00	; 0
    396e:	30 cf       	rjmp	.-416    	; 0x37d0 <udi_cdc_tx_send>
    3970:	08 95       	ret

00003972 <udi_cdc_data_disable>:
    3972:	80 91 f1 23 	lds	r24, 0x23F1	; 0x8023f1 <udi_cdc_nb_data_enabled>
    3976:	81 50       	subi	r24, 0x01	; 1
    3978:	80 93 f1 23 	sts	0x23F1, r24	; 0x8023f1 <udi_cdc_nb_data_enabled>
    397c:	80 91 f1 23 	lds	r24, 0x23F1	; 0x8023f1 <udi_cdc_nb_data_enabled>
    3980:	1a dc       	rcall	.-1996   	; 0x31b6 <usb_callback_cdc_disable>
    3982:	10 92 f0 23 	sts	0x23F0, r1	; 0x8023f0 <udi_cdc_data_running>
    3986:	08 95       	ret

00003988 <udi_cdc_comm_setup>:
    3988:	cf 93       	push	r28
    398a:	df 93       	push	r29
    398c:	80 91 1b 24 	lds	r24, 0x241B	; 0x80241b <udd_g_ctrlreq>
    3990:	88 23       	and	r24, r24
    3992:	e4 f4       	brge	.+56     	; 0x39cc <udi_cdc_comm_setup+0x44>
    3994:	80 76       	andi	r24, 0x60	; 96
    3996:	80 32       	cpi	r24, 0x20	; 32
    3998:	09 f0       	breq	.+2      	; 0x399c <udi_cdc_comm_setup+0x14>
    399a:	47 c0       	rjmp	.+142    	; 0x3a2a <udi_cdc_comm_setup+0xa2>
    399c:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <udd_g_ctrlreq+0x1>
    39a0:	81 32       	cpi	r24, 0x21	; 33
    39a2:	09 f0       	breq	.+2      	; 0x39a6 <udi_cdc_comm_setup+0x1e>
    39a4:	44 c0       	rjmp	.+136    	; 0x3a2e <udi_cdc_comm_setup+0xa6>
    39a6:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    39aa:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    39ae:	07 97       	sbiw	r24, 0x07	; 7
    39b0:	09 f0       	breq	.+2      	; 0x39b4 <udi_cdc_comm_setup+0x2c>
    39b2:	3f c0       	rjmp	.+126    	; 0x3a32 <udi_cdc_comm_setup+0xaa>
    39b4:	eb e1       	ldi	r30, 0x1B	; 27
    39b6:	f4 e2       	ldi	r31, 0x24	; 36
    39b8:	80 e0       	ldi	r24, 0x00	; 0
    39ba:	94 e2       	ldi	r25, 0x24	; 36
    39bc:	80 87       	std	Z+8, r24	; 0x08
    39be:	91 87       	std	Z+9, r25	; 0x09
    39c0:	87 e0       	ldi	r24, 0x07	; 7
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	82 87       	std	Z+10, r24	; 0x0a
    39c6:	93 87       	std	Z+11, r25	; 0x0b
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	3a c0       	rjmp	.+116    	; 0x3a40 <udi_cdc_comm_setup+0xb8>
    39cc:	80 76       	andi	r24, 0x60	; 96
    39ce:	80 32       	cpi	r24, 0x20	; 32
    39d0:	91 f5       	brne	.+100    	; 0x3a36 <udi_cdc_comm_setup+0xae>
    39d2:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <udd_g_ctrlreq+0x1>
    39d6:	80 32       	cpi	r24, 0x20	; 32
    39d8:	19 f0       	breq	.+6      	; 0x39e0 <udi_cdc_comm_setup+0x58>
    39da:	82 32       	cpi	r24, 0x22	; 34
    39dc:	b9 f0       	breq	.+46     	; 0x3a0c <udi_cdc_comm_setup+0x84>
    39de:	2d c0       	rjmp	.+90     	; 0x3a3a <udi_cdc_comm_setup+0xb2>
    39e0:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    39e4:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    39e8:	07 97       	sbiw	r24, 0x07	; 7
    39ea:	49 f5       	brne	.+82     	; 0x3a3e <udi_cdc_comm_setup+0xb6>
    39ec:	eb e1       	ldi	r30, 0x1B	; 27
    39ee:	f4 e2       	ldi	r31, 0x24	; 36
    39f0:	83 eb       	ldi	r24, 0xB3	; 179
    39f2:	9b e1       	ldi	r25, 0x1B	; 27
    39f4:	84 87       	std	Z+12, r24	; 0x0c
    39f6:	95 87       	std	Z+13, r25	; 0x0d
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	94 e2       	ldi	r25, 0x24	; 36
    39fc:	80 87       	std	Z+8, r24	; 0x08
    39fe:	91 87       	std	Z+9, r25	; 0x09
    3a00:	87 e0       	ldi	r24, 0x07	; 7
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	82 87       	std	Z+10, r24	; 0x0a
    3a06:	93 87       	std	Z+11, r25	; 0x0b
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	1a c0       	rjmp	.+52     	; 0x3a40 <udi_cdc_comm_setup+0xb8>
    3a0c:	cb e1       	ldi	r28, 0x1B	; 27
    3a0e:	d4 e2       	ldi	r29, 0x24	; 36
    3a10:	6a 81       	ldd	r22, Y+2	; 0x02
    3a12:	61 70       	andi	r22, 0x01	; 1
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	d3 db       	rcall	.-2138   	; 0x31be <usb_callback_cdc_set_dtr>
    3a18:	6a 81       	ldd	r22, Y+2	; 0x02
    3a1a:	7b 81       	ldd	r23, Y+3	; 0x03
    3a1c:	76 95       	lsr	r23
    3a1e:	67 95       	ror	r22
    3a20:	61 70       	andi	r22, 0x01	; 1
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	cd db       	rcall	.-2150   	; 0x31c0 <usb_callback_cdc_set_rts>
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	0b c0       	rjmp	.+22     	; 0x3a40 <udi_cdc_comm_setup+0xb8>
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	09 c0       	rjmp	.+18     	; 0x3a40 <udi_cdc_comm_setup+0xb8>
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	07 c0       	rjmp	.+14     	; 0x3a40 <udi_cdc_comm_setup+0xb8>
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	05 c0       	rjmp	.+10     	; 0x3a40 <udi_cdc_comm_setup+0xb8>
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	03 c0       	rjmp	.+6      	; 0x3a40 <udi_cdc_comm_setup+0xb8>
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	01 c0       	rjmp	.+2      	; 0x3a40 <udi_cdc_comm_setup+0xb8>
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	df 91       	pop	r29
    3a42:	cf 91       	pop	r28
    3a44:	08 95       	ret

00003a46 <udi_cdc_multi_get_nb_received_data>:
    3a46:	cf 93       	push	r28
    3a48:	df 93       	push	r29
    3a4a:	1f 92       	push	r1
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	8f b7       	in	r24, 0x3f	; 63
    3a52:	89 83       	std	Y+1, r24	; 0x01
    3a54:	f8 94       	cli
    3a56:	49 81       	ldd	r20, Y+1	; 0x01
    3a58:	20 91 69 23 	lds	r18, 0x2369	; 0x802369 <udi_cdc_rx_pos>
    3a5c:	30 91 6a 23 	lds	r19, 0x236A	; 0x80236a <udi_cdc_rx_pos+0x1>
    3a60:	e0 91 6b 23 	lds	r30, 0x236B	; 0x80236b <udi_cdc_rx_buf_sel>
    3a64:	f0 e0       	ldi	r31, 0x00	; 0
    3a66:	ee 0f       	add	r30, r30
    3a68:	ff 1f       	adc	r31, r31
    3a6a:	e4 59       	subi	r30, 0x94	; 148
    3a6c:	fc 4d       	sbci	r31, 0xDC	; 220
    3a6e:	80 81       	ld	r24, Z
    3a70:	91 81       	ldd	r25, Z+1	; 0x01
    3a72:	4f bf       	out	0x3f, r20	; 63
    3a74:	82 1b       	sub	r24, r18
    3a76:	93 0b       	sbc	r25, r19
    3a78:	0f 90       	pop	r0
    3a7a:	df 91       	pop	r29
    3a7c:	cf 91       	pop	r28
    3a7e:	08 95       	ret

00003a80 <udi_cdc_multi_is_rx_ready>:
    3a80:	e2 df       	rcall	.-60     	; 0x3a46 <udi_cdc_multi_get_nb_received_data>
    3a82:	21 e0       	ldi	r18, 0x01	; 1
    3a84:	89 2b       	or	r24, r25
    3a86:	09 f4       	brne	.+2      	; 0x3a8a <udi_cdc_multi_is_rx_ready+0xa>
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	82 2f       	mov	r24, r18
    3a8c:	08 95       	ret

00003a8e <udi_cdc_rx_start>:
    3a8e:	0f 93       	push	r16
    3a90:	1f 93       	push	r17
    3a92:	cf 93       	push	r28
    3a94:	df 93       	push	r29
    3a96:	1f 92       	push	r1
    3a98:	cd b7       	in	r28, 0x3d	; 61
    3a9a:	de b7       	in	r29, 0x3e	; 62
    3a9c:	8f b7       	in	r24, 0x3f	; 63
    3a9e:	89 83       	std	Y+1, r24	; 0x01
    3aa0:	f8 94       	cli
    3aa2:	99 81       	ldd	r25, Y+1	; 0x01
    3aa4:	20 91 6b 23 	lds	r18, 0x236B	; 0x80236b <udi_cdc_rx_buf_sel>
    3aa8:	80 91 68 23 	lds	r24, 0x2368	; 0x802368 <udi_cdc_rx_trans_ongoing>
    3aac:	81 11       	cpse	r24, r1
    3aae:	10 c0       	rjmp	.+32     	; 0x3ad0 <udi_cdc_rx_start+0x42>
    3ab0:	60 91 69 23 	lds	r22, 0x2369	; 0x802369 <udi_cdc_rx_pos>
    3ab4:	70 91 6a 23 	lds	r23, 0x236A	; 0x80236a <udi_cdc_rx_pos+0x1>
    3ab8:	02 2f       	mov	r16, r18
    3aba:	10 e0       	ldi	r17, 0x00	; 0
    3abc:	f8 01       	movw	r30, r16
    3abe:	ee 0f       	add	r30, r30
    3ac0:	ff 1f       	adc	r31, r31
    3ac2:	e4 59       	subi	r30, 0x94	; 148
    3ac4:	fc 4d       	sbci	r31, 0xDC	; 220
    3ac6:	40 81       	ld	r20, Z
    3ac8:	51 81       	ldd	r21, Z+1	; 0x01
    3aca:	64 17       	cp	r22, r20
    3acc:	75 07       	cpc	r23, r21
    3ace:	18 f4       	brcc	.+6      	; 0x3ad6 <udi_cdc_rx_start+0x48>
    3ad0:	9f bf       	out	0x3f, r25	; 63
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	27 c0       	rjmp	.+78     	; 0x3b24 <udi_cdc_rx_start+0x96>
    3ad6:	10 92 69 23 	sts	0x2369, r1	; 0x802369 <udi_cdc_rx_pos>
    3ada:	10 92 6a 23 	sts	0x236A, r1	; 0x80236a <udi_cdc_rx_pos+0x1>
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	21 11       	cpse	r18, r1
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	80 93 6b 23 	sts	0x236B, r24	; 0x80236b <udi_cdc_rx_buf_sel>
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	80 93 68 23 	sts	0x2368, r24	; 0x802368 <udi_cdc_rx_trans_ongoing>
    3aee:	9f bf       	out	0x3f, r25	; 63
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	c6 df       	rcall	.-116    	; 0x3a80 <udi_cdc_multi_is_rx_ready>
    3af4:	88 23       	and	r24, r24
    3af6:	11 f0       	breq	.+4      	; 0x3afc <udi_cdc_rx_start+0x6e>
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	63 db       	rcall	.-2362   	; 0x31c2 <usb_callback_rx_notify>
    3afc:	a8 01       	movw	r20, r16
    3afe:	00 24       	eor	r0, r0
    3b00:	56 95       	lsr	r21
    3b02:	47 95       	ror	r20
    3b04:	07 94       	ror	r0
    3b06:	56 95       	lsr	r21
    3b08:	47 95       	ror	r20
    3b0a:	07 94       	ror	r0
    3b0c:	54 2f       	mov	r21, r20
    3b0e:	40 2d       	mov	r20, r0
    3b10:	40 59       	subi	r20, 0x90	; 144
    3b12:	5c 4d       	sbci	r21, 0xDC	; 220
    3b14:	0a ec       	ldi	r16, 0xCA	; 202
    3b16:	1d e1       	ldi	r17, 0x1D	; 29
    3b18:	20 e4       	ldi	r18, 0x40	; 64
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	61 e0       	ldi	r22, 0x01	; 1
    3b1e:	82 e0       	ldi	r24, 0x02	; 2
    3b20:	0e 94 0c 14 	call	0x2818	; 0x2818 <udd_ep_run>
    3b24:	0f 90       	pop	r0
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	1f 91       	pop	r17
    3b2c:	0f 91       	pop	r16
    3b2e:	08 95       	ret

00003b30 <udi_cdc_data_enable>:
    3b30:	10 92 f1 23 	sts	0x23F1, r1	; 0x8023f1 <udi_cdc_nb_data_enabled>
    3b34:	10 92 e0 22 	sts	0x22E0, r1	; 0x8022e0 <udi_cdc_tx_trans_ongoing>
    3b38:	10 92 df 22 	sts	0x22DF, r1	; 0x8022df <udi_cdc_tx_both_buf_to_send>
    3b3c:	10 92 e3 22 	sts	0x22E3, r1	; 0x8022e3 <udi_cdc_tx_buf_sel>
    3b40:	e4 ee       	ldi	r30, 0xE4	; 228
    3b42:	f2 e2       	ldi	r31, 0x22	; 34
    3b44:	10 82       	st	Z, r1
    3b46:	11 82       	std	Z+1, r1	; 0x01
    3b48:	12 82       	std	Z+2, r1	; 0x02
    3b4a:	13 82       	std	Z+3, r1	; 0x03
    3b4c:	10 92 e1 22 	sts	0x22E1, r1	; 0x8022e1 <udi_cdc_tx_sof_num>
    3b50:	10 92 e2 22 	sts	0x22E2, r1	; 0x8022e2 <udi_cdc_tx_sof_num+0x1>
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	3c de       	rcall	.-904    	; 0x37d0 <udi_cdc_tx_send>
    3b58:	10 92 68 23 	sts	0x2368, r1	; 0x802368 <udi_cdc_rx_trans_ongoing>
    3b5c:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udi_cdc_rx_buf_sel>
    3b60:	ec e6       	ldi	r30, 0x6C	; 108
    3b62:	f3 e2       	ldi	r31, 0x23	; 35
    3b64:	10 82       	st	Z, r1
    3b66:	11 82       	std	Z+1, r1	; 0x01
    3b68:	12 82       	std	Z+2, r1	; 0x02
    3b6a:	13 82       	std	Z+3, r1	; 0x03
    3b6c:	10 92 69 23 	sts	0x2369, r1	; 0x802369 <udi_cdc_rx_pos>
    3b70:	10 92 6a 23 	sts	0x236A, r1	; 0x80236a <udi_cdc_rx_pos+0x1>
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	8b df       	rcall	.-234    	; 0x3a8e <udi_cdc_rx_start>
    3b78:	88 23       	and	r24, r24
    3b7a:	59 f0       	breq	.+22     	; 0x3b92 <udi_cdc_data_enable+0x62>
    3b7c:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udi_cdc_nb_data_enabled>
    3b80:	9f 5f       	subi	r25, 0xFF	; 255
    3b82:	90 93 f1 23 	sts	0x23F1, r25	; 0x8023f1 <udi_cdc_nb_data_enabled>
    3b86:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <udi_cdc_nb_data_enabled>
    3b8a:	91 30       	cpi	r25, 0x01	; 1
    3b8c:	11 f4       	brne	.+4      	; 0x3b92 <udi_cdc_data_enable+0x62>
    3b8e:	90 93 f0 23 	sts	0x23F0, r25	; 0x8023f0 <udi_cdc_data_running>
    3b92:	08 95       	ret

00003b94 <udi_cdc_data_received>:
    3b94:	0f 93       	push	r16
    3b96:	1f 93       	push	r17
    3b98:	81 11       	cpse	r24, r1
    3b9a:	29 c0       	rjmp	.+82     	; 0x3bee <udi_cdc_data_received+0x5a>
    3b9c:	80 91 6b 23 	lds	r24, 0x236B	; 0x80236b <udi_cdc_rx_buf_sel>
    3ba0:	e1 e0       	ldi	r30, 0x01	; 1
    3ba2:	81 11       	cpse	r24, r1
    3ba4:	e0 e0       	ldi	r30, 0x00	; 0
    3ba6:	84 2f       	mov	r24, r20
    3ba8:	61 15       	cp	r22, r1
    3baa:	71 05       	cpc	r23, r1
    3bac:	a9 f4       	brne	.+42     	; 0x3bd8 <udi_cdc_data_received+0x44>
    3bae:	4e 2f       	mov	r20, r30
    3bb0:	50 e0       	ldi	r21, 0x00	; 0
    3bb2:	00 24       	eor	r0, r0
    3bb4:	56 95       	lsr	r21
    3bb6:	47 95       	ror	r20
    3bb8:	07 94       	ror	r0
    3bba:	56 95       	lsr	r21
    3bbc:	47 95       	ror	r20
    3bbe:	07 94       	ror	r0
    3bc0:	54 2f       	mov	r21, r20
    3bc2:	40 2d       	mov	r20, r0
    3bc4:	40 59       	subi	r20, 0x90	; 144
    3bc6:	5c 4d       	sbci	r21, 0xDC	; 220
    3bc8:	0a ec       	ldi	r16, 0xCA	; 202
    3bca:	1d e1       	ldi	r17, 0x1D	; 29
    3bcc:	20 e4       	ldi	r18, 0x40	; 64
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	61 e0       	ldi	r22, 0x01	; 1
    3bd2:	0e 94 0c 14 	call	0x2818	; 0x2818 <udd_ep_run>
    3bd6:	0b c0       	rjmp	.+22     	; 0x3bee <udi_cdc_data_received+0x5a>
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	ee 0f       	add	r30, r30
    3bdc:	ff 1f       	adc	r31, r31
    3bde:	e4 59       	subi	r30, 0x94	; 148
    3be0:	fc 4d       	sbci	r31, 0xDC	; 220
    3be2:	60 83       	st	Z, r22
    3be4:	71 83       	std	Z+1, r23	; 0x01
    3be6:	10 92 68 23 	sts	0x2368, r1	; 0x802368 <udi_cdc_rx_trans_ongoing>
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	50 df       	rcall	.-352    	; 0x3a8e <udi_cdc_rx_start>
    3bee:	1f 91       	pop	r17
    3bf0:	0f 91       	pop	r16
    3bf2:	08 95       	ret

00003bf4 <udi_cdc_multi_getc>:
    3bf4:	ef 92       	push	r14
    3bf6:	ff 92       	push	r15
    3bf8:	1f 93       	push	r17
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	1f 92       	push	r1
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62
    3c04:	11 e0       	ldi	r17, 0x01	; 1
    3c06:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udi_cdc_line_coding+0x6>
    3c0a:	89 30       	cpi	r24, 0x09	; 9
    3c0c:	09 f0       	breq	.+2      	; 0x3c10 <udi_cdc_multi_getc+0x1c>
    3c0e:	10 e0       	ldi	r17, 0x00	; 0
    3c10:	40 e0       	ldi	r20, 0x00	; 0
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	8f b7       	in	r24, 0x3f	; 63
    3c16:	89 83       	std	Y+1, r24	; 0x01
    3c18:	f8 94       	cli
    3c1a:	a9 81       	ldd	r26, Y+1	; 0x01
    3c1c:	20 91 69 23 	lds	r18, 0x2369	; 0x802369 <udi_cdc_rx_pos>
    3c20:	30 91 6a 23 	lds	r19, 0x236A	; 0x80236a <udi_cdc_rx_pos+0x1>
    3c24:	80 91 6b 23 	lds	r24, 0x236B	; 0x80236b <udi_cdc_rx_buf_sel>
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	ee 0f       	add	r30, r30
    3c2e:	ff 1f       	adc	r31, r31
    3c30:	e4 59       	subi	r30, 0x94	; 148
    3c32:	fc 4d       	sbci	r31, 0xDC	; 220
    3c34:	60 81       	ld	r22, Z
    3c36:	71 81       	ldd	r23, Z+1	; 0x01
    3c38:	af bf       	out	0x3f, r26	; 63
    3c3a:	26 17       	cp	r18, r22
    3c3c:	37 07       	cpc	r19, r23
    3c3e:	30 f0       	brcs	.+12     	; 0x3c4c <udi_cdc_multi_getc+0x58>
    3c40:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udi_cdc_data_running>
    3c44:	81 11       	cpse	r24, r1
    3c46:	e6 cf       	rjmp	.-52     	; 0x3c14 <udi_cdc_multi_getc+0x20>
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	21 c0       	rjmp	.+66     	; 0x3c8e <udi_cdc_multi_getc+0x9a>
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	00 24       	eor	r0, r0
    3c50:	f6 95       	lsr	r31
    3c52:	e7 95       	ror	r30
    3c54:	07 94       	ror	r0
    3c56:	f6 95       	lsr	r31
    3c58:	e7 95       	ror	r30
    3c5a:	07 94       	ror	r0
    3c5c:	fe 2f       	mov	r31, r30
    3c5e:	e0 2d       	mov	r30, r0
    3c60:	e0 59       	subi	r30, 0x90	; 144
    3c62:	fc 4d       	sbci	r31, 0xDC	; 220
    3c64:	e2 0f       	add	r30, r18
    3c66:	f3 1f       	adc	r31, r19
    3c68:	80 81       	ld	r24, Z
    3c6a:	7a 01       	movw	r14, r20
    3c6c:	e8 2a       	or	r14, r24
    3c6e:	2f 5f       	subi	r18, 0xFF	; 255
    3c70:	3f 4f       	sbci	r19, 0xFF	; 255
    3c72:	20 93 69 23 	sts	0x2369, r18	; 0x802369 <udi_cdc_rx_pos>
    3c76:	30 93 6a 23 	sts	0x236A, r19	; 0x80236a <udi_cdc_rx_pos+0x1>
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	08 df       	rcall	.-496    	; 0x3a8e <udi_cdc_rx_start>
    3c7e:	11 23       	and	r17, r17
    3c80:	21 f0       	breq	.+8      	; 0x3c8a <udi_cdc_multi_getc+0x96>
    3c82:	5e 2d       	mov	r21, r14
    3c84:	44 27       	eor	r20, r20
    3c86:	10 e0       	ldi	r17, 0x00	; 0
    3c88:	c5 cf       	rjmp	.-118    	; 0x3c14 <udi_cdc_multi_getc+0x20>
    3c8a:	8e 2d       	mov	r24, r14
    3c8c:	9f 2d       	mov	r25, r15
    3c8e:	0f 90       	pop	r0
    3c90:	df 91       	pop	r29
    3c92:	cf 91       	pop	r28
    3c94:	1f 91       	pop	r17
    3c96:	ff 90       	pop	r15
    3c98:	ef 90       	pop	r14
    3c9a:	08 95       	ret

00003c9c <udi_cdc_getc>:
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	aa cf       	rjmp	.-172    	; 0x3bf4 <udi_cdc_multi_getc>
    3ca0:	08 95       	ret

00003ca2 <udi_cdc_multi_get_free_tx_buffer>:
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	1f 92       	push	r1
    3ca8:	cd b7       	in	r28, 0x3d	; 61
    3caa:	de b7       	in	r29, 0x3e	; 62
    3cac:	8f b7       	in	r24, 0x3f	; 63
    3cae:	89 83       	std	Y+1, r24	; 0x01
    3cb0:	f8 94       	cli
    3cb2:	99 81       	ldd	r25, Y+1	; 0x01
    3cb4:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <udi_cdc_tx_buf_sel>
    3cb8:	e8 2f       	mov	r30, r24
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	ee 0f       	add	r30, r30
    3cbe:	ff 1f       	adc	r31, r31
    3cc0:	ec 51       	subi	r30, 0x1C	; 28
    3cc2:	fd 4d       	sbci	r31, 0xDD	; 221
    3cc4:	20 81       	ld	r18, Z
    3cc6:	31 81       	ldd	r19, Z+1	; 0x01
    3cc8:	20 34       	cpi	r18, 0x40	; 64
    3cca:	31 05       	cpc	r19, r1
    3ccc:	89 f4       	brne	.+34     	; 0x3cf0 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3cce:	40 91 e0 22 	lds	r20, 0x22E0	; 0x8022e0 <udi_cdc_tx_trans_ongoing>
    3cd2:	41 11       	cpse	r20, r1
    3cd4:	0d c0       	rjmp	.+26     	; 0x3cf0 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3cd6:	40 91 df 22 	lds	r20, 0x22DF	; 0x8022df <udi_cdc_tx_both_buf_to_send>
    3cda:	41 11       	cpse	r20, r1
    3cdc:	09 c0       	rjmp	.+18     	; 0x3cf0 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3cde:	21 e0       	ldi	r18, 0x01	; 1
    3ce0:	20 93 df 22 	sts	0x22DF, r18	; 0x8022df <udi_cdc_tx_both_buf_to_send>
    3ce4:	81 11       	cpse	r24, r1
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	20 93 e3 22 	sts	0x22E3, r18	; 0x8022e3 <udi_cdc_tx_buf_sel>
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	9f bf       	out	0x3f, r25	; 63
    3cf2:	80 e4       	ldi	r24, 0x40	; 64
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	82 1b       	sub	r24, r18
    3cf8:	93 0b       	sbc	r25, r19
    3cfa:	0f 90       	pop	r0
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	08 95       	ret

00003d02 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    3d02:	cf df       	rcall	.-98     	; 0x3ca2 <udi_cdc_multi_get_free_tx_buffer>
    3d04:	21 e0       	ldi	r18, 0x01	; 1
    3d06:	89 2b       	or	r24, r25
    3d08:	09 f4       	brne	.+2      	; 0x3d0c <udi_cdc_multi_is_tx_ready+0xa>
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	82 2f       	mov	r24, r18
    3d0e:	08 95       	ret

00003d10 <udi_cdc_multi_putc>:
    3d10:	ff 92       	push	r15
    3d12:	0f 93       	push	r16
    3d14:	1f 93       	push	r17
    3d16:	cf 93       	push	r28
    3d18:	df 93       	push	r29
    3d1a:	1f 92       	push	r1
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	f6 2e       	mov	r15, r22
    3d22:	17 2f       	mov	r17, r23
    3d24:	01 e0       	ldi	r16, 0x01	; 1
    3d26:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <udi_cdc_line_coding+0x6>
    3d2a:	89 30       	cpi	r24, 0x09	; 9
    3d2c:	09 f0       	breq	.+2      	; 0x3d30 <udi_cdc_multi_putc+0x20>
    3d2e:	00 e0       	ldi	r16, 0x00	; 0
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	e7 df       	rcall	.-50     	; 0x3d02 <udi_cdc_multi_is_tx_ready>
    3d34:	81 11       	cpse	r24, r1
    3d36:	07 c0       	rjmp	.+14     	; 0x3d46 <udi_cdc_multi_putc+0x36>
    3d38:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udi_cdc_data_running>
    3d3c:	81 11       	cpse	r24, r1
    3d3e:	f8 cf       	rjmp	.-16     	; 0x3d30 <udi_cdc_multi_putc+0x20>
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	2c c0       	rjmp	.+88     	; 0x3d9e <udi_cdc_multi_putc+0x8e>
    3d46:	8f b7       	in	r24, 0x3f	; 63
    3d48:	89 83       	std	Y+1, r24	; 0x01
    3d4a:	f8 94       	cli
    3d4c:	49 81       	ldd	r20, Y+1	; 0x01
    3d4e:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <udi_cdc_tx_buf_sel>
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	fc 01       	movw	r30, r24
    3d56:	ee 0f       	add	r30, r30
    3d58:	ff 1f       	adc	r31, r31
    3d5a:	ec 51       	subi	r30, 0x1C	; 28
    3d5c:	fd 4d       	sbci	r31, 0xDD	; 221
    3d5e:	20 81       	ld	r18, Z
    3d60:	31 81       	ldd	r19, Z+1	; 0x01
    3d62:	b9 01       	movw	r22, r18
    3d64:	6f 5f       	subi	r22, 0xFF	; 255
    3d66:	7f 4f       	sbci	r23, 0xFF	; 255
    3d68:	60 83       	st	Z, r22
    3d6a:	71 83       	std	Z+1, r23	; 0x01
    3d6c:	00 24       	eor	r0, r0
    3d6e:	96 95       	lsr	r25
    3d70:	87 95       	ror	r24
    3d72:	07 94       	ror	r0
    3d74:	96 95       	lsr	r25
    3d76:	87 95       	ror	r24
    3d78:	07 94       	ror	r0
    3d7a:	98 2f       	mov	r25, r24
    3d7c:	80 2d       	mov	r24, r0
    3d7e:	88 51       	subi	r24, 0x18	; 24
    3d80:	9d 4d       	sbci	r25, 0xDD	; 221
    3d82:	fc 01       	movw	r30, r24
    3d84:	e2 0f       	add	r30, r18
    3d86:	f3 1f       	adc	r31, r19
    3d88:	f0 82       	st	Z, r15
    3d8a:	4f bf       	out	0x3f, r20	; 63
    3d8c:	00 23       	and	r16, r16
    3d8e:	29 f0       	breq	.+10     	; 0x3d9a <udi_cdc_multi_putc+0x8a>
    3d90:	f1 2e       	mov	r15, r17
    3d92:	11 0f       	add	r17, r17
    3d94:	11 0b       	sbc	r17, r17
    3d96:	00 e0       	ldi	r16, 0x00	; 0
    3d98:	cb cf       	rjmp	.-106    	; 0x3d30 <udi_cdc_multi_putc+0x20>
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	0f 90       	pop	r0
    3da0:	df 91       	pop	r29
    3da2:	cf 91       	pop	r28
    3da4:	1f 91       	pop	r17
    3da6:	0f 91       	pop	r16
    3da8:	ff 90       	pop	r15
    3daa:	08 95       	ret

00003dac <udi_cdc_putc>:
    3dac:	bc 01       	movw	r22, r24
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	af cf       	rjmp	.-162    	; 0x3d10 <udi_cdc_multi_putc>
    3db2:	08 95       	ret

00003db4 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    3db4:	e0 91 0c 24 	lds	r30, 0x240C	; 0x80240c <udc_ptr_conf>
    3db8:	f0 91 0d 24 	lds	r31, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    3dbc:	01 90       	ld	r0, Z+
    3dbe:	f0 81       	ld	r31, Z
    3dc0:	e0 2d       	mov	r30, r0
    3dc2:	22 81       	ldd	r18, Z+2	; 0x02
    3dc4:	33 81       	ldd	r19, Z+3	; 0x03
    3dc6:	2e 0f       	add	r18, r30
    3dc8:	3f 1f       	adc	r19, r31
    3dca:	fc 01       	movw	r30, r24
    3dcc:	40 81       	ld	r20, Z
    3dce:	e4 0f       	add	r30, r20
    3dd0:	f1 1d       	adc	r31, r1
    3dd2:	e2 17       	cp	r30, r18
    3dd4:	f3 07       	cpc	r31, r19
    3dd6:	a0 f4       	brcc	.+40     	; 0x3e00 <udc_next_desc_in_iface+0x4c>
    3dd8:	81 81       	ldd	r24, Z+1	; 0x01
    3dda:	84 30       	cpi	r24, 0x04	; 4
    3ddc:	a1 f0       	breq	.+40     	; 0x3e06 <udc_next_desc_in_iface+0x52>
    3dde:	86 13       	cpse	r24, r22
    3de0:	06 c0       	rjmp	.+12     	; 0x3dee <udc_next_desc_in_iface+0x3a>
    3de2:	14 c0       	rjmp	.+40     	; 0x3e0c <udc_next_desc_in_iface+0x58>
    3de4:	81 81       	ldd	r24, Z+1	; 0x01
    3de6:	84 30       	cpi	r24, 0x04	; 4
    3de8:	a1 f0       	breq	.+40     	; 0x3e12 <udc_next_desc_in_iface+0x5e>
    3dea:	86 17       	cp	r24, r22
    3dec:	a9 f0       	breq	.+42     	; 0x3e18 <udc_next_desc_in_iface+0x64>
    3dee:	80 81       	ld	r24, Z
    3df0:	e8 0f       	add	r30, r24
    3df2:	f1 1d       	adc	r31, r1
    3df4:	e2 17       	cp	r30, r18
    3df6:	f3 07       	cpc	r31, r19
    3df8:	a8 f3       	brcs	.-22     	; 0x3de4 <udc_next_desc_in_iface+0x30>
    3dfa:	80 e0       	ldi	r24, 0x00	; 0
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	08 95       	ret
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	08 95       	ret
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	08 95       	ret
    3e0c:	8e 2f       	mov	r24, r30
    3e0e:	9f 2f       	mov	r25, r31
    3e10:	08 95       	ret
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	08 95       	ret
    3e18:	8e 2f       	mov	r24, r30
    3e1a:	9f 2f       	mov	r25, r31
    3e1c:	08 95       	ret

00003e1e <udc_valid_address>:
    3e1e:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <udd_g_ctrlreq+0x2>
    3e22:	8f 77       	andi	r24, 0x7F	; 127
    3e24:	0c 94 1d 13 	jmp	0x263a	; 0x263a <udd_set_address>
    3e28:	08 95       	ret

00003e2a <udc_update_iface_desc>:
    3e2a:	90 91 0e 24 	lds	r25, 0x240E	; 0x80240e <udc_num_configuration>
    3e2e:	99 23       	and	r25, r25
    3e30:	81 f1       	breq	.+96     	; 0x3e92 <udc_update_iface_desc+0x68>
    3e32:	e0 91 0c 24 	lds	r30, 0x240C	; 0x80240c <udc_ptr_conf>
    3e36:	f0 91 0d 24 	lds	r31, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    3e3a:	01 90       	ld	r0, Z+
    3e3c:	f0 81       	ld	r31, Z
    3e3e:	e0 2d       	mov	r30, r0
    3e40:	94 81       	ldd	r25, Z+4	; 0x04
    3e42:	89 17       	cp	r24, r25
    3e44:	40 f5       	brcc	.+80     	; 0x3e96 <udc_update_iface_desc+0x6c>
    3e46:	e0 93 0a 24 	sts	0x240A, r30	; 0x80240a <udc_ptr_iface>
    3e4a:	f0 93 0b 24 	sts	0x240B, r31	; 0x80240b <udc_ptr_iface+0x1>
    3e4e:	22 81       	ldd	r18, Z+2	; 0x02
    3e50:	33 81       	ldd	r19, Z+3	; 0x03
    3e52:	2e 0f       	add	r18, r30
    3e54:	3f 1f       	adc	r19, r31
    3e56:	e2 17       	cp	r30, r18
    3e58:	f3 07       	cpc	r31, r19
    3e5a:	f8 f4       	brcc	.+62     	; 0x3e9a <udc_update_iface_desc+0x70>
    3e5c:	91 81       	ldd	r25, Z+1	; 0x01
    3e5e:	94 30       	cpi	r25, 0x04	; 4
    3e60:	61 f4       	brne	.+24     	; 0x3e7a <udc_update_iface_desc+0x50>
    3e62:	92 81       	ldd	r25, Z+2	; 0x02
    3e64:	89 13       	cpse	r24, r25
    3e66:	09 c0       	rjmp	.+18     	; 0x3e7a <udc_update_iface_desc+0x50>
    3e68:	93 81       	ldd	r25, Z+3	; 0x03
    3e6a:	96 13       	cpse	r25, r22
    3e6c:	06 c0       	rjmp	.+12     	; 0x3e7a <udc_update_iface_desc+0x50>
    3e6e:	e0 93 0a 24 	sts	0x240A, r30	; 0x80240a <udc_ptr_iface>
    3e72:	f0 93 0b 24 	sts	0x240B, r31	; 0x80240b <udc_ptr_iface+0x1>
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	08 95       	ret
    3e7a:	90 81       	ld	r25, Z
    3e7c:	e9 0f       	add	r30, r25
    3e7e:	f1 1d       	adc	r31, r1
    3e80:	e2 17       	cp	r30, r18
    3e82:	f3 07       	cpc	r31, r19
    3e84:	58 f3       	brcs	.-42     	; 0x3e5c <udc_update_iface_desc+0x32>
    3e86:	e0 93 0a 24 	sts	0x240A, r30	; 0x80240a <udc_ptr_iface>
    3e8a:	f0 93 0b 24 	sts	0x240B, r31	; 0x80240b <udc_ptr_iface+0x1>
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	08 95       	ret
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	08 95       	ret
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	08 95       	ret
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	08 95       	ret

00003e9e <udc_iface_disable>:
    3e9e:	ef 92       	push	r14
    3ea0:	ff 92       	push	r15
    3ea2:	1f 93       	push	r17
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	c8 2f       	mov	r28, r24
    3eaa:	60 e0       	ldi	r22, 0x00	; 0
    3eac:	be df       	rcall	.-132    	; 0x3e2a <udc_update_iface_desc>
    3eae:	18 2f       	mov	r17, r24
    3eb0:	88 23       	and	r24, r24
    3eb2:	81 f1       	breq	.+96     	; 0x3f14 <udc_iface_disable+0x76>
    3eb4:	a0 91 0c 24 	lds	r26, 0x240C	; 0x80240c <udc_ptr_conf>
    3eb8:	b0 91 0d 24 	lds	r27, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    3ebc:	ec 2f       	mov	r30, r28
    3ebe:	f0 e0       	ldi	r31, 0x00	; 0
    3ec0:	ee 0f       	add	r30, r30
    3ec2:	ff 1f       	adc	r31, r31
    3ec4:	12 96       	adiw	r26, 0x02	; 2
    3ec6:	8d 91       	ld	r24, X+
    3ec8:	9c 91       	ld	r25, X
    3eca:	13 97       	sbiw	r26, 0x03	; 3
    3ecc:	e8 0f       	add	r30, r24
    3ece:	f9 1f       	adc	r31, r25
    3ed0:	e0 80       	ld	r14, Z
    3ed2:	f1 80       	ldd	r15, Z+1	; 0x01
    3ed4:	d7 01       	movw	r26, r14
    3ed6:	16 96       	adiw	r26, 0x06	; 6
    3ed8:	ed 91       	ld	r30, X+
    3eda:	fc 91       	ld	r31, X
    3edc:	17 97       	sbiw	r26, 0x07	; 7
    3ede:	19 95       	eicall
    3ee0:	68 2f       	mov	r22, r24
    3ee2:	8c 2f       	mov	r24, r28
    3ee4:	a2 df       	rcall	.-188    	; 0x3e2a <udc_update_iface_desc>
    3ee6:	18 2f       	mov	r17, r24
    3ee8:	88 23       	and	r24, r24
    3eea:	a1 f0       	breq	.+40     	; 0x3f14 <udc_iface_disable+0x76>
    3eec:	c0 91 0a 24 	lds	r28, 0x240A	; 0x80240a <udc_ptr_iface>
    3ef0:	d0 91 0b 24 	lds	r29, 0x240B	; 0x80240b <udc_ptr_iface+0x1>
    3ef4:	65 e0       	ldi	r22, 0x05	; 5
    3ef6:	ce 01       	movw	r24, r28
    3ef8:	5d df       	rcall	.-326    	; 0x3db4 <udc_next_desc_in_iface>
    3efa:	ec 01       	movw	r28, r24
    3efc:	89 2b       	or	r24, r25
    3efe:	21 f0       	breq	.+8      	; 0x3f08 <udc_iface_disable+0x6a>
    3f00:	8a 81       	ldd	r24, Y+2	; 0x02
    3f02:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <udd_ep_free>
    3f06:	f6 cf       	rjmp	.-20     	; 0x3ef4 <udc_iface_disable+0x56>
    3f08:	d7 01       	movw	r26, r14
    3f0a:	12 96       	adiw	r26, 0x02	; 2
    3f0c:	ed 91       	ld	r30, X+
    3f0e:	fc 91       	ld	r31, X
    3f10:	13 97       	sbiw	r26, 0x03	; 3
    3f12:	19 95       	eicall
    3f14:	81 2f       	mov	r24, r17
    3f16:	df 91       	pop	r29
    3f18:	cf 91       	pop	r28
    3f1a:	1f 91       	pop	r17
    3f1c:	ff 90       	pop	r15
    3f1e:	ef 90       	pop	r14
    3f20:	08 95       	ret

00003f22 <udc_iface_enable>:
    3f22:	1f 93       	push	r17
    3f24:	cf 93       	push	r28
    3f26:	df 93       	push	r29
    3f28:	18 2f       	mov	r17, r24
    3f2a:	7f df       	rcall	.-258    	; 0x3e2a <udc_update_iface_desc>
    3f2c:	88 23       	and	r24, r24
    3f2e:	41 f1       	breq	.+80     	; 0x3f80 <udc_iface_enable+0x5e>
    3f30:	c0 91 0a 24 	lds	r28, 0x240A	; 0x80240a <udc_ptr_iface>
    3f34:	d0 91 0b 24 	lds	r29, 0x240B	; 0x80240b <udc_ptr_iface+0x1>
    3f38:	65 e0       	ldi	r22, 0x05	; 5
    3f3a:	ce 01       	movw	r24, r28
    3f3c:	3b df       	rcall	.-394    	; 0x3db4 <udc_next_desc_in_iface>
    3f3e:	ec 01       	movw	r28, r24
    3f40:	89 2b       	or	r24, r25
    3f42:	49 f0       	breq	.+18     	; 0x3f56 <udc_iface_enable+0x34>
    3f44:	4c 81       	ldd	r20, Y+4	; 0x04
    3f46:	5d 81       	ldd	r21, Y+5	; 0x05
    3f48:	6b 81       	ldd	r22, Y+3	; 0x03
    3f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4c:	0e 94 32 13 	call	0x2664	; 0x2664 <udd_ep_alloc>
    3f50:	81 11       	cpse	r24, r1
    3f52:	f2 cf       	rjmp	.-28     	; 0x3f38 <udc_iface_enable+0x16>
    3f54:	15 c0       	rjmp	.+42     	; 0x3f80 <udc_iface_enable+0x5e>
    3f56:	a0 91 0c 24 	lds	r26, 0x240C	; 0x80240c <udc_ptr_conf>
    3f5a:	b0 91 0d 24 	lds	r27, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    3f5e:	e1 2f       	mov	r30, r17
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	ee 0f       	add	r30, r30
    3f64:	ff 1f       	adc	r31, r31
    3f66:	12 96       	adiw	r26, 0x02	; 2
    3f68:	8d 91       	ld	r24, X+
    3f6a:	9c 91       	ld	r25, X
    3f6c:	13 97       	sbiw	r26, 0x03	; 3
    3f6e:	e8 0f       	add	r30, r24
    3f70:	f9 1f       	adc	r31, r25
    3f72:	01 90       	ld	r0, Z+
    3f74:	f0 81       	ld	r31, Z
    3f76:	e0 2d       	mov	r30, r0
    3f78:	01 90       	ld	r0, Z+
    3f7a:	f0 81       	ld	r31, Z
    3f7c:	e0 2d       	mov	r30, r0
    3f7e:	19 95       	eicall
    3f80:	df 91       	pop	r29
    3f82:	cf 91       	pop	r28
    3f84:	1f 91       	pop	r17
    3f86:	08 95       	ret

00003f88 <udc_start>:
    3f88:	0c 94 96 12 	jmp	0x252c	; 0x252c <udd_enable>
    3f8c:	08 95       	ret

00003f8e <udc_reset>:
    3f8e:	cf 93       	push	r28
    3f90:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <udc_num_configuration>
    3f94:	88 23       	and	r24, r24
    3f96:	c1 f0       	breq	.+48     	; 0x3fc8 <udc_reset+0x3a>
    3f98:	e0 91 0c 24 	lds	r30, 0x240C	; 0x80240c <udc_ptr_conf>
    3f9c:	f0 91 0d 24 	lds	r31, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    3fa0:	01 90       	ld	r0, Z+
    3fa2:	f0 81       	ld	r31, Z
    3fa4:	e0 2d       	mov	r30, r0
    3fa6:	84 81       	ldd	r24, Z+4	; 0x04
    3fa8:	88 23       	and	r24, r24
    3faa:	71 f0       	breq	.+28     	; 0x3fc8 <udc_reset+0x3a>
    3fac:	c0 e0       	ldi	r28, 0x00	; 0
    3fae:	8c 2f       	mov	r24, r28
    3fb0:	76 df       	rcall	.-276    	; 0x3e9e <udc_iface_disable>
    3fb2:	cf 5f       	subi	r28, 0xFF	; 255
    3fb4:	e0 91 0c 24 	lds	r30, 0x240C	; 0x80240c <udc_ptr_conf>
    3fb8:	f0 91 0d 24 	lds	r31, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    3fbc:	01 90       	ld	r0, Z+
    3fbe:	f0 81       	ld	r31, Z
    3fc0:	e0 2d       	mov	r30, r0
    3fc2:	84 81       	ldd	r24, Z+4	; 0x04
    3fc4:	c8 17       	cp	r28, r24
    3fc6:	98 f3       	brcs	.-26     	; 0x3fae <udc_reset+0x20>
    3fc8:	10 92 0e 24 	sts	0x240E, r1	; 0x80240e <udc_num_configuration>
    3fcc:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <udc_device_status>
    3fd0:	81 fd       	sbrc	r24, 1
    3fd2:	ec d8       	rcall	.-3624   	; 0x31ac <usb_callback_remotewakeup_disable>
    3fd4:	10 92 12 24 	sts	0x2412, r1	; 0x802412 <udc_device_status>
    3fd8:	10 92 13 24 	sts	0x2413, r1	; 0x802413 <udc_device_status+0x1>
    3fdc:	cf 91       	pop	r28
    3fde:	08 95       	ret

00003fe0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    3fe0:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    3fe2:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <udc_num_configuration>
    3fe6:	88 23       	and	r24, r24
    3fe8:	49 f1       	breq	.+82     	; 0x403c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3fea:	a0 91 0c 24 	lds	r26, 0x240C	; 0x80240c <udc_ptr_conf>
    3fee:	b0 91 0d 24 	lds	r27, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    3ff2:	ed 91       	ld	r30, X+
    3ff4:	fc 91       	ld	r31, X
    3ff6:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3ff8:	84 81       	ldd	r24, Z+4	; 0x04
    3ffa:	88 23       	and	r24, r24
    3ffc:	f9 f0       	breq	.+62     	; 0x403c <udc_sof_notify+0x5c>
    3ffe:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    4000:	ec 2f       	mov	r30, r28
    4002:	f0 e0       	ldi	r31, 0x00	; 0
    4004:	ee 0f       	add	r30, r30
    4006:	ff 1f       	adc	r31, r31
    4008:	12 96       	adiw	r26, 0x02	; 2
    400a:	8d 91       	ld	r24, X+
    400c:	9c 91       	ld	r25, X
    400e:	13 97       	sbiw	r26, 0x03	; 3
    4010:	e8 0f       	add	r30, r24
    4012:	f9 1f       	adc	r31, r25
    4014:	01 90       	ld	r0, Z+
    4016:	f0 81       	ld	r31, Z
    4018:	e0 2d       	mov	r30, r0
    401a:	00 84       	ldd	r0, Z+8	; 0x08
    401c:	f1 85       	ldd	r31, Z+9	; 0x09
    401e:	e0 2d       	mov	r30, r0
    4020:	30 97       	sbiw	r30, 0x00	; 0
    4022:	09 f0       	breq	.+2      	; 0x4026 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    4024:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    4026:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4028:	a0 91 0c 24 	lds	r26, 0x240C	; 0x80240c <udc_ptr_conf>
    402c:	b0 91 0d 24 	lds	r27, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    4030:	ed 91       	ld	r30, X+
    4032:	fc 91       	ld	r31, X
    4034:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4036:	84 81       	ldd	r24, Z+4	; 0x04
    4038:	c8 17       	cp	r28, r24
    403a:	10 f3       	brcs	.-60     	; 0x4000 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    403c:	cf 91       	pop	r28
    403e:	08 95       	ret

00004040 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    4040:	0f 93       	push	r16
    4042:	1f 93       	push	r17
    4044:	cf 93       	push	r28
    4046:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    4048:	eb e1       	ldi	r30, 0x1B	; 27
    404a:	f4 e2       	ldi	r31, 0x24	; 36
    404c:	12 86       	std	Z+10, r1	; 0x0a
    404e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    4050:	14 86       	std	Z+12, r1	; 0x0c
    4052:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    4054:	16 86       	std	Z+14, r1	; 0x0e
    4056:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    4058:	80 81       	ld	r24, Z
    405a:	88 23       	and	r24, r24
    405c:	0c f0       	brlt	.+2      	; 0x4060 <udc_process_setup+0x20>
    405e:	95 c2       	rjmp	.+1322   	; 0x458a <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    4060:	20 91 21 24 	lds	r18, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    4064:	30 91 22 24 	lds	r19, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    4068:	21 15       	cp	r18, r1
    406a:	31 05       	cpc	r19, r1
    406c:	09 f0       	breq	.+2      	; 0x4070 <udc_process_setup+0x30>
    406e:	88 c2       	rjmp	.+1296   	; 0x4580 <udc_process_setup+0x540>
    4070:	7f c2       	rjmp	.+1278   	; 0x4570 <udc_process_setup+0x530>
    4072:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4074:	09 f0       	breq	.+2      	; 0x4078 <udc_process_setup+0x38>
    4076:	ab c0       	rjmp	.+342    	; 0x41ce <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4078:	90 91 1c 24 	lds	r25, 0x241C	; 0x80241c <udd_g_ctrlreq+0x1>
    407c:	96 30       	cpi	r25, 0x06	; 6
    407e:	81 f0       	breq	.+32     	; 0x40a0 <udc_process_setup+0x60>
    4080:	98 30       	cpi	r25, 0x08	; 8
    4082:	09 f4       	brne	.+2      	; 0x4086 <udc_process_setup+0x46>
    4084:	99 c0       	rjmp	.+306    	; 0x41b8 <udc_process_setup+0x178>
    4086:	91 11       	cpse	r25, r1
    4088:	a2 c0       	rjmp	.+324    	; 0x41ce <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    408a:	22 30       	cpi	r18, 0x02	; 2
    408c:	31 05       	cpc	r19, r1
    408e:	09 f0       	breq	.+2      	; 0x4092 <udc_process_setup+0x52>
    4090:	2b c2       	rjmp	.+1110   	; 0x44e8 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    4092:	62 e0       	ldi	r22, 0x02	; 2
    4094:	70 e0       	ldi	r23, 0x00	; 0
    4096:	82 e1       	ldi	r24, 0x12	; 18
    4098:	94 e2       	ldi	r25, 0x24	; 36
    409a:	0e 94 2b 13 	call	0x2656	; 0x2656 <udd_set_setup_payload>
    409e:	7e c2       	rjmp	.+1276   	; 0x459c <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    40a0:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <udd_g_ctrlreq+0x2>
    40a4:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    40a8:	29 2f       	mov	r18, r25
    40aa:	33 27       	eor	r19, r19
    40ac:	22 30       	cpi	r18, 0x02	; 2
    40ae:	31 05       	cpc	r19, r1
    40b0:	b1 f0       	breq	.+44     	; 0x40de <udc_process_setup+0x9e>
    40b2:	20 f4       	brcc	.+8      	; 0x40bc <udc_process_setup+0x7c>
    40b4:	21 30       	cpi	r18, 0x01	; 1
    40b6:	31 05       	cpc	r19, r1
    40b8:	41 f0       	breq	.+16     	; 0x40ca <udc_process_setup+0x8a>
    40ba:	d8 c1       	rjmp	.+944    	; 0x446c <udc_process_setup+0x42c>
    40bc:	23 30       	cpi	r18, 0x03	; 3
    40be:	31 05       	cpc	r19, r1
    40c0:	f1 f1       	breq	.+124    	; 0x413e <udc_process_setup+0xfe>
    40c2:	2f 30       	cpi	r18, 0x0F	; 15
    40c4:	31 05       	cpc	r19, r1
    40c6:	61 f1       	breq	.+88     	; 0x4120 <udc_process_setup+0xe0>
    40c8:	d1 c1       	rjmp	.+930    	; 0x446c <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    40ca:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <udc_config>
    40ce:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    40d2:	dc 01       	movw	r26, r24
    40d4:	6c 91       	ld	r22, X
    40d6:	70 e0       	ldi	r23, 0x00	; 0
    40d8:	0e 94 2b 13 	call	0x2656	; 0x2656 <udd_set_setup_payload>
    40dc:	5e c0       	rjmp	.+188    	; 0x419a <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    40de:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    40e2:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
    40e6:	21 89       	ldd	r18, Z+17	; 0x11
    40e8:	82 17       	cp	r24, r18
    40ea:	08 f0       	brcs	.+2      	; 0x40ee <udc_process_setup+0xae>
    40ec:	fd c1       	rjmp	.+1018   	; 0x44e8 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    40ee:	99 27       	eor	r25, r25
    40f0:	88 0f       	add	r24, r24
    40f2:	99 1f       	adc	r25, r25
    40f4:	88 0f       	add	r24, r24
    40f6:	99 1f       	adc	r25, r25
    40f8:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    40fc:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    4100:	e8 0f       	add	r30, r24
    4102:	f9 1f       	adc	r31, r25
    4104:	80 81       	ld	r24, Z
    4106:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    4108:	fc 01       	movw	r30, r24
    410a:	62 81       	ldd	r22, Z+2	; 0x02
    410c:	73 81       	ldd	r23, Z+3	; 0x03
    410e:	0e 94 2b 13 	call	0x2656	; 0x2656 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    4112:	e0 91 23 24 	lds	r30, 0x2423	; 0x802423 <udd_g_ctrlreq+0x8>
    4116:	f0 91 24 24 	lds	r31, 0x2424	; 0x802424 <udd_g_ctrlreq+0x9>
    411a:	82 e0       	ldi	r24, 0x02	; 2
    411c:	81 83       	std	Z+1, r24	; 0x01
    411e:	3d c0       	rjmp	.+122    	; 0x419a <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    4120:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <udc_config+0x4>
    4124:	90 91 42 20 	lds	r25, 0x2042	; 0x802042 <udc_config+0x5>
    4128:	00 97       	sbiw	r24, 0x00	; 0
    412a:	09 f4       	brne	.+2      	; 0x412e <udc_process_setup+0xee>
    412c:	dd c1       	rjmp	.+954    	; 0x44e8 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    412e:	dc 01       	movw	r26, r24
    4130:	12 96       	adiw	r26, 0x02	; 2
    4132:	6d 91       	ld	r22, X+
    4134:	7c 91       	ld	r23, X
    4136:	13 97       	sbiw	r26, 0x03	; 3
    4138:	0e 94 2b 13 	call	0x2656	; 0x2656 <udd_set_setup_payload>
    413c:	2e c0       	rjmp	.+92     	; 0x419a <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    413e:	99 27       	eor	r25, r25
    4140:	81 30       	cpi	r24, 0x01	; 1
    4142:	91 05       	cpc	r25, r1
    4144:	99 f0       	breq	.+38     	; 0x416c <udc_process_setup+0x12c>
    4146:	58 f0       	brcs	.+22     	; 0x415e <udc_process_setup+0x11e>
    4148:	82 30       	cpi	r24, 0x02	; 2
    414a:	91 05       	cpc	r25, r1
    414c:	09 f4       	brne	.+2      	; 0x4150 <udc_process_setup+0x110>
    414e:	22 c2       	rjmp	.+1092   	; 0x4594 <udc_process_setup+0x554>
    4150:	03 97       	sbiw	r24, 0x03	; 3
    4152:	09 f0       	breq	.+2      	; 0x4156 <udc_process_setup+0x116>
    4154:	94 c1       	rjmp	.+808    	; 0x447e <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    4156:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    4158:	e6 e2       	ldi	r30, 0x26	; 38
    415a:	f1 e2       	ldi	r31, 0x21	; 33
    415c:	0a c0       	rjmp	.+20     	; 0x4172 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    415e:	64 e0       	ldi	r22, 0x04	; 4
    4160:	70 e0       	ldi	r23, 0x00	; 0
    4162:	82 ee       	ldi	r24, 0xE2	; 226
    4164:	90 e2       	ldi	r25, 0x20	; 32
    4166:	0e 94 2b 13 	call	0x2656	; 0x2656 <udd_set_setup_payload>
    416a:	17 c0       	rjmp	.+46     	; 0x419a <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    416c:	e1 ed       	ldi	r30, 0xD1	; 209
    416e:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    4170:	30 e1       	ldi	r19, 0x10	; 16
    4172:	a4 ea       	ldi	r26, 0xA4	; 164
    4174:	b0 e2       	ldi	r27, 0x20	; 32
    4176:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    4178:	81 91       	ld	r24, Z+
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	8d 93       	st	X+, r24
    417e:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    4180:	2f 5f       	subi	r18, 0xFF	; 255
    4182:	23 17       	cp	r18, r19
    4184:	c8 f3       	brcs	.-14     	; 0x4178 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    4186:	63 2f       	mov	r22, r19
    4188:	66 0f       	add	r22, r22
    418a:	6e 5f       	subi	r22, 0xFE	; 254
    418c:	60 93 a2 20 	sts	0x20A2, r22	; 0x8020a2 <udc_string_desc>
		udd_set_setup_payload(
    4190:	70 e0       	ldi	r23, 0x00	; 0
    4192:	82 ea       	ldi	r24, 0xA2	; 162
    4194:	90 e2       	ldi	r25, 0x20	; 32
    4196:	0e 94 2b 13 	call	0x2656	; 0x2656 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    419a:	eb e1       	ldi	r30, 0x1B	; 27
    419c:	f4 e2       	ldi	r31, 0x24	; 36
    419e:	86 81       	ldd	r24, Z+6	; 0x06
    41a0:	97 81       	ldd	r25, Z+7	; 0x07
    41a2:	22 85       	ldd	r18, Z+10	; 0x0a
    41a4:	33 85       	ldd	r19, Z+11	; 0x0b
    41a6:	82 17       	cp	r24, r18
    41a8:	93 07       	cpc	r25, r19
    41aa:	08 f0       	brcs	.+2      	; 0x41ae <udc_process_setup+0x16e>
    41ac:	f7 c1       	rjmp	.+1006   	; 0x459c <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    41ae:	80 93 25 24 	sts	0x2425, r24	; 0x802425 <udd_g_ctrlreq+0xa>
    41b2:	90 93 26 24 	sts	0x2426, r25	; 0x802426 <udd_g_ctrlreq+0xb>
    41b6:	f2 c1       	rjmp	.+996    	; 0x459c <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    41b8:	21 30       	cpi	r18, 0x01	; 1
    41ba:	31 05       	cpc	r19, r1
    41bc:	09 f0       	breq	.+2      	; 0x41c0 <udc_process_setup+0x180>
    41be:	94 c1       	rjmp	.+808    	; 0x44e8 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    41c0:	61 e0       	ldi	r22, 0x01	; 1
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	8e e0       	ldi	r24, 0x0E	; 14
    41c6:	94 e2       	ldi	r25, 0x24	; 36
    41c8:	0e 94 2b 13 	call	0x2656	; 0x2656 <udd_set_setup_payload>
    41cc:	e7 c1       	rjmp	.+974    	; 0x459c <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    41ce:	81 30       	cpi	r24, 0x01	; 1
    41d0:	e9 f5       	brne	.+122    	; 0x424c <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    41d2:	90 91 1c 24 	lds	r25, 0x241C	; 0x80241c <udd_g_ctrlreq+0x1>
    41d6:	9a 30       	cpi	r25, 0x0A	; 10
    41d8:	c9 f5       	brne	.+114    	; 0x424c <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    41da:	21 30       	cpi	r18, 0x01	; 1
    41dc:	31 05       	cpc	r19, r1
    41de:	09 f0       	breq	.+2      	; 0x41e2 <udc_process_setup+0x1a2>
    41e0:	53 c1       	rjmp	.+678    	; 0x4488 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    41e2:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <udc_num_configuration>
    41e6:	88 23       	and	r24, r24
    41e8:	09 f4       	brne	.+2      	; 0x41ec <udc_process_setup+0x1ac>
    41ea:	4e c1       	rjmp	.+668    	; 0x4488 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    41ec:	c0 91 1f 24 	lds	r28, 0x241F	; 0x80241f <udd_g_ctrlreq+0x4>
    41f0:	d0 91 20 24 	lds	r29, 0x2420	; 0x802420 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    41f4:	00 91 0c 24 	lds	r16, 0x240C	; 0x80240c <udc_ptr_conf>
    41f8:	10 91 0d 24 	lds	r17, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    41fc:	d8 01       	movw	r26, r16
    41fe:	ed 91       	ld	r30, X+
    4200:	fc 91       	ld	r31, X
    4202:	84 81       	ldd	r24, Z+4	; 0x04
    4204:	c8 17       	cp	r28, r24
    4206:	08 f0       	brcs	.+2      	; 0x420a <udc_process_setup+0x1ca>
    4208:	3f c1       	rjmp	.+638    	; 0x4488 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    420a:	60 e0       	ldi	r22, 0x00	; 0
    420c:	8c 2f       	mov	r24, r28
    420e:	0d de       	rcall	.-998    	; 0x3e2a <udc_update_iface_desc>
    4210:	88 23       	and	r24, r24
    4212:	09 f4       	brne	.+2      	; 0x4216 <udc_process_setup+0x1d6>
    4214:	34 c1       	rjmp	.+616    	; 0x447e <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4216:	ce 01       	movw	r24, r28
    4218:	99 27       	eor	r25, r25
    421a:	88 0f       	add	r24, r24
    421c:	99 1f       	adc	r25, r25
    421e:	d8 01       	movw	r26, r16
    4220:	12 96       	adiw	r26, 0x02	; 2
    4222:	ed 91       	ld	r30, X+
    4224:	fc 91       	ld	r31, X
    4226:	13 97       	sbiw	r26, 0x03	; 3
    4228:	e8 0f       	add	r30, r24
    422a:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    422c:	01 90       	ld	r0, Z+
    422e:	f0 81       	ld	r31, Z
    4230:	e0 2d       	mov	r30, r0
    4232:	86 81       	ldd	r24, Z+6	; 0x06
    4234:	97 81       	ldd	r25, Z+7	; 0x07
    4236:	fc 01       	movw	r30, r24
    4238:	19 95       	eicall
    423a:	80 93 10 24 	sts	0x2410, r24	; 0x802410 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    423e:	61 e0       	ldi	r22, 0x01	; 1
    4240:	70 e0       	ldi	r23, 0x00	; 0
    4242:	80 e1       	ldi	r24, 0x10	; 16
    4244:	94 e2       	ldi	r25, 0x24	; 36
    4246:	0e 94 2b 13 	call	0x2656	; 0x2656 <udd_set_setup_payload>
    424a:	a8 c1       	rjmp	.+848    	; 0x459c <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    424c:	82 30       	cpi	r24, 0x02	; 2
    424e:	09 f0       	breq	.+2      	; 0x4252 <udc_process_setup+0x212>
    4250:	16 c1       	rjmp	.+556    	; 0x447e <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4252:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <udd_g_ctrlreq+0x1>
    4256:	81 11       	cpse	r24, r1
    4258:	0b c1       	rjmp	.+534    	; 0x4470 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    425a:	22 30       	cpi	r18, 0x02	; 2
    425c:	31 05       	cpc	r19, r1
    425e:	09 f0       	breq	.+2      	; 0x4262 <udc_process_setup+0x222>
    4260:	43 c1       	rjmp	.+646    	; 0x44e8 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    4262:	80 91 1f 24 	lds	r24, 0x241F	; 0x80241f <udd_g_ctrlreq+0x4>
    4266:	0e 94 ba 13 	call	0x2774	; 0x2774 <udd_ep_is_halted>
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	80 93 08 24 	sts	0x2408, r24	; 0x802408 <udc_ep_status.4757>
    4270:	90 93 09 24 	sts	0x2409, r25	; 0x802409 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    4274:	62 e0       	ldi	r22, 0x02	; 2
    4276:	70 e0       	ldi	r23, 0x00	; 0
    4278:	88 e0       	ldi	r24, 0x08	; 8
    427a:	94 e2       	ldi	r25, 0x24	; 36
    427c:	0e 94 2b 13 	call	0x2656	; 0x2656 <udd_set_setup_payload>
    4280:	8d c1       	rjmp	.+794    	; 0x459c <udc_process_setup+0x55c>
    4282:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4284:	09 f0       	breq	.+2      	; 0x4288 <udc_process_setup+0x248>
    4286:	a0 c0       	rjmp	.+320    	; 0x43c8 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4288:	90 91 1c 24 	lds	r25, 0x241C	; 0x80241c <udd_g_ctrlreq+0x1>
    428c:	93 30       	cpi	r25, 0x03	; 3
    428e:	91 f1       	breq	.+100    	; 0x42f4 <udc_process_setup+0x2b4>
    4290:	18 f4       	brcc	.+6      	; 0x4298 <udc_process_setup+0x258>
    4292:	91 30       	cpi	r25, 0x01	; 1
    4294:	a9 f0       	breq	.+42     	; 0x42c0 <udc_process_setup+0x280>
    4296:	98 c0       	rjmp	.+304    	; 0x43c8 <udc_process_setup+0x388>
    4298:	95 30       	cpi	r25, 0x05	; 5
    429a:	21 f0       	breq	.+8      	; 0x42a4 <udc_process_setup+0x264>
    429c:	99 30       	cpi	r25, 0x09	; 9
    429e:	09 f4       	brne	.+2      	; 0x42a2 <udc_process_setup+0x262>
    42a0:	43 c0       	rjmp	.+134    	; 0x4328 <udc_process_setup+0x2e8>
    42a2:	92 c0       	rjmp	.+292    	; 0x43c8 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    42a4:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    42a8:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    42ac:	89 2b       	or	r24, r25
    42ae:	09 f0       	breq	.+2      	; 0x42b2 <udc_process_setup+0x272>
    42b0:	1b c1       	rjmp	.+566    	; 0x44e8 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    42b2:	8f e0       	ldi	r24, 0x0F	; 15
    42b4:	9f e1       	ldi	r25, 0x1F	; 31
    42b6:	80 93 27 24 	sts	0x2427, r24	; 0x802427 <udd_g_ctrlreq+0xc>
    42ba:	90 93 28 24 	sts	0x2428, r25	; 0x802428 <udd_g_ctrlreq+0xd>
    42be:	6e c1       	rjmp	.+732    	; 0x459c <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    42c0:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    42c4:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    42c8:	89 2b       	or	r24, r25
    42ca:	09 f0       	breq	.+2      	; 0x42ce <udc_process_setup+0x28e>
    42cc:	0d c1       	rjmp	.+538    	; 0x44e8 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    42ce:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <udd_g_ctrlreq+0x2>
    42d2:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <udd_g_ctrlreq+0x3>
    42d6:	01 97       	sbiw	r24, 0x01	; 1
    42d8:	09 f0       	breq	.+2      	; 0x42dc <udc_process_setup+0x29c>
    42da:	06 c1       	rjmp	.+524    	; 0x44e8 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    42dc:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <udc_device_status>
    42e0:	90 91 13 24 	lds	r25, 0x2413	; 0x802413 <udc_device_status+0x1>
    42e4:	8d 7f       	andi	r24, 0xFD	; 253
    42e6:	80 93 12 24 	sts	0x2412, r24	; 0x802412 <udc_device_status>
    42ea:	90 93 13 24 	sts	0x2413, r25	; 0x802413 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    42ee:	0e 94 d6 18 	call	0x31ac	; 0x31ac <usb_callback_remotewakeup_disable>
    42f2:	54 c1       	rjmp	.+680    	; 0x459c <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    42f4:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    42f8:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    42fc:	89 2b       	or	r24, r25
    42fe:	09 f0       	breq	.+2      	; 0x4302 <udc_process_setup+0x2c2>
    4300:	f3 c0       	rjmp	.+486    	; 0x44e8 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    4302:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <udd_g_ctrlreq+0x2>
    4306:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <udd_g_ctrlreq+0x3>
    430a:	01 97       	sbiw	r24, 0x01	; 1
    430c:	09 f0       	breq	.+2      	; 0x4310 <udc_process_setup+0x2d0>
    430e:	b2 c0       	rjmp	.+356    	; 0x4474 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    4310:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <udc_device_status>
    4314:	90 91 13 24 	lds	r25, 0x2413	; 0x802413 <udc_device_status+0x1>
    4318:	82 60       	ori	r24, 0x02	; 2
    431a:	80 93 12 24 	sts	0x2412, r24	; 0x802412 <udc_device_status>
    431e:	90 93 13 24 	sts	0x2413, r25	; 0x802413 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    4322:	0e 94 d5 18 	call	0x31aa	; 0x31aa <usb_callback_remotewakeup_enable>
    4326:	3a c1       	rjmp	.+628    	; 0x459c <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    4328:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    432c:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    4330:	89 2b       	or	r24, r25
    4332:	09 f0       	breq	.+2      	; 0x4336 <udc_process_setup+0x2f6>
    4334:	d9 c0       	rjmp	.+434    	; 0x44e8 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    4336:	0e 94 20 13 	call	0x2640	; 0x2640 <udd_getaddress>
    433a:	88 23       	and	r24, r24
    433c:	09 f4       	brne	.+2      	; 0x4340 <udc_process_setup+0x300>
    433e:	9f c0       	rjmp	.+318    	; 0x447e <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    4340:	20 91 1d 24 	lds	r18, 0x241D	; 0x80241d <udd_g_ctrlreq+0x2>
    4344:	30 91 1e 24 	lds	r19, 0x241E	; 0x80241e <udd_g_ctrlreq+0x3>
    4348:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    434a:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    434e:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    4352:	81 89       	ldd	r24, Z+17	; 0x11
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	82 17       	cp	r24, r18
    4358:	93 07       	cpc	r25, r19
    435a:	08 f4       	brcc	.+2      	; 0x435e <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    435c:	90 c0       	rjmp	.+288    	; 0x447e <udc_process_setup+0x43e>
    435e:	17 de       	rcall	.-978    	; 0x3f8e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    4360:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <udd_g_ctrlreq+0x2>
    4364:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <udd_g_ctrlreq+0x3>
    4368:	80 93 0e 24 	sts	0x240E, r24	; 0x80240e <udc_num_configuration>
	if (udc_num_configuration == 0) {
    436c:	88 23       	and	r24, r24
    436e:	09 f4       	brne	.+2      	; 0x4372 <udc_process_setup+0x332>
    4370:	15 c1       	rjmp	.+554    	; 0x459c <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    4372:	99 27       	eor	r25, r25
    4374:	81 50       	subi	r24, 0x01	; 1
    4376:	90 4c       	sbci	r25, 0xC0	; 192
    4378:	88 0f       	add	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	88 0f       	add	r24, r24
    437e:	99 1f       	adc	r25, r25
    4380:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    4384:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    4388:	e8 0f       	add	r30, r24
    438a:	f9 1f       	adc	r31, r25
    438c:	e0 93 0c 24 	sts	0x240C, r30	; 0x80240c <udc_ptr_conf>
    4390:	f0 93 0d 24 	sts	0x240D, r31	; 0x80240d <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4394:	01 90       	ld	r0, Z+
    4396:	f0 81       	ld	r31, Z
    4398:	e0 2d       	mov	r30, r0
    439a:	84 81       	ldd	r24, Z+4	; 0x04
    439c:	88 23       	and	r24, r24
    439e:	09 f4       	brne	.+2      	; 0x43a2 <udc_process_setup+0x362>
    43a0:	fd c0       	rjmp	.+506    	; 0x459c <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    43a2:	c0 e0       	ldi	r28, 0x00	; 0
    43a4:	60 e0       	ldi	r22, 0x00	; 0
    43a6:	8c 2f       	mov	r24, r28
    43a8:	bc dd       	rcall	.-1160   	; 0x3f22 <udc_iface_enable>
    43aa:	88 23       	and	r24, r24
    43ac:	09 f4       	brne	.+2      	; 0x43b0 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    43ae:	67 c0       	rjmp	.+206    	; 0x447e <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    43b0:	cf 5f       	subi	r28, 0xFF	; 255
    43b2:	e0 91 0c 24 	lds	r30, 0x240C	; 0x80240c <udc_ptr_conf>
    43b6:	f0 91 0d 24 	lds	r31, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    43ba:	01 90       	ld	r0, Z+
    43bc:	f0 81       	ld	r31, Z
    43be:	e0 2d       	mov	r30, r0
    43c0:	84 81       	ldd	r24, Z+4	; 0x04
    43c2:	c8 17       	cp	r28, r24
    43c4:	78 f3       	brcs	.-34     	; 0x43a4 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    43c6:	ea c0       	rjmp	.+468    	; 0x459c <udc_process_setup+0x55c>
    43c8:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    43ca:	e9 f4       	brne	.+58     	; 0x4406 <udc_process_setup+0x3c6>
    43cc:	90 91 1c 24 	lds	r25, 0x241C	; 0x80241c <udd_g_ctrlreq+0x1>
    43d0:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    43d2:	c9 f4       	brne	.+50     	; 0x4406 <udc_process_setup+0x3c6>
    43d4:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    43d8:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    43dc:	89 2b       	or	r24, r25
    43de:	09 f0       	breq	.+2      	; 0x43e2 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    43e0:	53 c0       	rjmp	.+166    	; 0x4488 <udc_process_setup+0x448>
    43e2:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <udc_num_configuration>
    43e6:	88 23       	and	r24, r24
    43e8:	09 f4       	brne	.+2      	; 0x43ec <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    43ea:	4e c0       	rjmp	.+156    	; 0x4488 <udc_process_setup+0x448>
    43ec:	eb e1       	ldi	r30, 0x1B	; 27
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    43ee:	f4 e2       	ldi	r31, 0x24	; 36

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    43f0:	c4 81       	ldd	r28, Z+4	; 0x04
    43f2:	d2 81       	ldd	r29, Z+2	; 0x02
    43f4:	8c 2f       	mov	r24, r28
    43f6:	53 dd       	rcall	.-1370   	; 0x3e9e <udc_iface_disable>
    43f8:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    43fa:	09 f4       	brne	.+2      	; 0x43fe <udc_process_setup+0x3be>
    43fc:	40 c0       	rjmp	.+128    	; 0x447e <udc_process_setup+0x43e>
    43fe:	6d 2f       	mov	r22, r29
    4400:	8c 2f       	mov	r24, r28
    4402:	8f dd       	rcall	.-1250   	; 0x3f22 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4404:	3a c0       	rjmp	.+116    	; 0x447a <udc_process_setup+0x43a>
    4406:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4408:	d1 f5       	brne	.+116    	; 0x447e <udc_process_setup+0x43e>
    440a:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <udd_g_ctrlreq+0x1>
    440e:	81 30       	cpi	r24, 0x01	; 1
    4410:	19 f0       	breq	.+6      	; 0x4418 <udc_process_setup+0x3d8>
    4412:	83 30       	cpi	r24, 0x03	; 3
    4414:	a1 f0       	breq	.+40     	; 0x443e <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4416:	30 c0       	rjmp	.+96     	; 0x4478 <udc_process_setup+0x438>
    4418:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    441c:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    4420:	89 2b       	or	r24, r25
    4422:	09 f0       	breq	.+2      	; 0x4426 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4424:	61 c0       	rjmp	.+194    	; 0x44e8 <udc_process_setup+0x4a8>
    4426:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <udd_g_ctrlreq+0x2>
    442a:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <udd_g_ctrlreq+0x3>
    442e:	89 2b       	or	r24, r25
    4430:	09 f0       	breq	.+2      	; 0x4434 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4432:	5a c0       	rjmp	.+180    	; 0x44e8 <udc_process_setup+0x4a8>
    4434:	80 91 1f 24 	lds	r24, 0x241F	; 0x80241f <udd_g_ctrlreq+0x4>
    4438:	0e 94 d5 13 	call	0x27aa	; 0x27aa <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    443c:	1e c0       	rjmp	.+60     	; 0x447a <udc_process_setup+0x43a>
    443e:	80 91 21 24 	lds	r24, 0x2421	; 0x802421 <udd_g_ctrlreq+0x6>
    4442:	90 91 22 24 	lds	r25, 0x2422	; 0x802422 <udd_g_ctrlreq+0x7>
    4446:	89 2b       	or	r24, r25
    4448:	09 f0       	breq	.+2      	; 0x444c <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    444a:	4e c0       	rjmp	.+156    	; 0x44e8 <udc_process_setup+0x4a8>
    444c:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <udd_g_ctrlreq+0x2>
    4450:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <udd_g_ctrlreq+0x3>
    4454:	89 2b       	or	r24, r25
    4456:	09 f0       	breq	.+2      	; 0x445a <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    4458:	47 c0       	rjmp	.+142    	; 0x44e8 <udc_process_setup+0x4a8>
    445a:	cb e1       	ldi	r28, 0x1B	; 27
    445c:	d4 e2       	ldi	r29, 0x24	; 36
    445e:	8c 81       	ldd	r24, Y+4	; 0x04
    4460:	0e 94 d7 14 	call	0x29ae	; 0x29ae <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4464:	8c 81       	ldd	r24, Y+4	; 0x04
    4466:	0e 94 42 15 	call	0x2a84	; 0x2a84 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    446a:	07 c0       	rjmp	.+14     	; 0x447a <udc_process_setup+0x43a>
    446c:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    446e:	05 c0       	rjmp	.+10     	; 0x447a <udc_process_setup+0x43a>
    4470:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    4472:	03 c0       	rjmp	.+6      	; 0x447a <udc_process_setup+0x43a>
    4474:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    4476:	01 c0       	rjmp	.+2      	; 0x447a <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    4478:	80 e0       	ldi	r24, 0x00	; 0
    447a:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    447c:	90 c0       	rjmp	.+288    	; 0x459e <udc_process_setup+0x55e>
    447e:	80 91 1b 24 	lds	r24, 0x241B	; 0x80241b <udd_g_ctrlreq>
    4482:	8f 71       	andi	r24, 0x1F	; 31
    4484:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4486:	81 f5       	brne	.+96     	; 0x44e8 <udc_process_setup+0x4a8>
    4488:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <udc_num_configuration>
    448c:	88 23       	and	r24, r24
    448e:	09 f4       	brne	.+2      	; 0x4492 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4490:	71 c0       	rjmp	.+226    	; 0x4574 <udc_process_setup+0x534>
    4492:	00 91 1f 24 	lds	r16, 0x241F	; 0x80241f <udd_g_ctrlreq+0x4>
    4496:	10 91 20 24 	lds	r17, 0x2420	; 0x802420 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    449a:	c0 91 0c 24 	lds	r28, 0x240C	; 0x80240c <udc_ptr_conf>
    449e:	d0 91 0d 24 	lds	r29, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    44a2:	e8 81       	ld	r30, Y
    44a4:	f9 81       	ldd	r31, Y+1	; 0x01
    44a6:	84 81       	ldd	r24, Z+4	; 0x04
    44a8:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    44aa:	08 f0       	brcs	.+2      	; 0x44ae <udc_process_setup+0x46e>
    44ac:	65 c0       	rjmp	.+202    	; 0x4578 <udc_process_setup+0x538>
    44ae:	60 e0       	ldi	r22, 0x00	; 0
    44b0:	80 2f       	mov	r24, r16
    44b2:	bb dc       	rcall	.-1674   	; 0x3e2a <udc_update_iface_desc>
    44b4:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    44b6:	c1 f0       	breq	.+48     	; 0x44e8 <udc_process_setup+0x4a8>
    44b8:	f8 01       	movw	r30, r16
    44ba:	ff 27       	eor	r31, r31
    44bc:	cf 01       	movw	r24, r30
    44be:	88 0f       	add	r24, r24
    44c0:	99 1f       	adc	r25, r25
    44c2:	ea 81       	ldd	r30, Y+2	; 0x02
    44c4:	fb 81       	ldd	r31, Y+3	; 0x03
    44c6:	e8 0f       	add	r30, r24
    44c8:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    44ca:	c0 81       	ld	r28, Z
    44cc:	d1 81       	ldd	r29, Z+1	; 0x01
    44ce:	ee 81       	ldd	r30, Y+6	; 0x06
    44d0:	ff 81       	ldd	r31, Y+7	; 0x07
    44d2:	19 95       	eicall
    44d4:	68 2f       	mov	r22, r24
    44d6:	80 2f       	mov	r24, r16
    44d8:	a8 dc       	rcall	.-1712   	; 0x3e2a <udc_update_iface_desc>
    44da:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    44dc:	29 f0       	breq	.+10     	; 0x44e8 <udc_process_setup+0x4a8>
    44de:	ec 81       	ldd	r30, Y+4	; 0x04
    44e0:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    44e2:	19 95       	eicall
    44e4:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    44e6:	5b c0       	rjmp	.+182    	; 0x459e <udc_process_setup+0x55e>
    44e8:	80 91 1b 24 	lds	r24, 0x241B	; 0x80241b <udd_g_ctrlreq>
    44ec:	8f 71       	andi	r24, 0x1F	; 31
    44ee:	82 30       	cpi	r24, 0x02	; 2
    44f0:	09 f0       	breq	.+2      	; 0x44f4 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    44f2:	44 c0       	rjmp	.+136    	; 0x457c <udc_process_setup+0x53c>
    44f4:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <udc_num_configuration>
    44f8:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    44fa:	b1 f1       	breq	.+108    	; 0x4568 <udc_process_setup+0x528>
    44fc:	a0 91 0c 24 	lds	r26, 0x240C	; 0x80240c <udc_ptr_conf>
    4500:	b0 91 0d 24 	lds	r27, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    4504:	ed 91       	ld	r30, X+
    4506:	fc 91       	ld	r31, X
    4508:	11 97       	sbiw	r26, 0x01	; 1
    450a:	84 81       	ldd	r24, Z+4	; 0x04
    450c:	88 23       	and	r24, r24
    450e:	71 f1       	breq	.+92     	; 0x456c <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    4510:	c0 e0       	ldi	r28, 0x00	; 0
    4512:	ec 2f       	mov	r30, r28
    4514:	f0 e0       	ldi	r31, 0x00	; 0
    4516:	ee 0f       	add	r30, r30
    4518:	ff 1f       	adc	r31, r31
    451a:	12 96       	adiw	r26, 0x02	; 2
    451c:	8d 91       	ld	r24, X+
    451e:	9c 91       	ld	r25, X
    4520:	13 97       	sbiw	r26, 0x03	; 3
    4522:	e8 0f       	add	r30, r24
    4524:	f9 1f       	adc	r31, r25
    4526:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4528:	11 81       	ldd	r17, Z+1	; 0x01
    452a:	d8 01       	movw	r26, r16
    452c:	16 96       	adiw	r26, 0x06	; 6
    452e:	ed 91       	ld	r30, X+
    4530:	fc 91       	ld	r31, X
    4532:	17 97       	sbiw	r26, 0x07	; 7
    4534:	19 95       	eicall
    4536:	68 2f       	mov	r22, r24
    4538:	8c 2f       	mov	r24, r28
    453a:	77 dc       	rcall	.-1810   	; 0x3e2a <udc_update_iface_desc>
    453c:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    453e:	79 f1       	breq	.+94     	; 0x459e <udc_process_setup+0x55e>
    4540:	d8 01       	movw	r26, r16
    4542:	14 96       	adiw	r26, 0x04	; 4
    4544:	ed 91       	ld	r30, X+
    4546:	fc 91       	ld	r31, X
    4548:	15 97       	sbiw	r26, 0x05	; 5
    454a:	19 95       	eicall
    454c:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    454e:	27 c0       	rjmp	.+78     	; 0x459e <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4550:	cf 5f       	subi	r28, 0xFF	; 255
    4552:	a0 91 0c 24 	lds	r26, 0x240C	; 0x80240c <udc_ptr_conf>
    4556:	b0 91 0d 24 	lds	r27, 0x240D	; 0x80240d <udc_ptr_conf+0x1>
    455a:	ed 91       	ld	r30, X+
    455c:	fc 91       	ld	r31, X
    455e:	11 97       	sbiw	r26, 0x01	; 1
    4560:	94 81       	ldd	r25, Z+4	; 0x04
    4562:	c9 17       	cp	r28, r25
    4564:	b0 f2       	brcs	.-84     	; 0x4512 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    4566:	1b c0       	rjmp	.+54     	; 0x459e <udc_process_setup+0x55e>
    4568:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    456a:	19 c0       	rjmp	.+50     	; 0x459e <udc_process_setup+0x55e>
    456c:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    456e:	17 c0       	rjmp	.+46     	; 0x459e <udc_process_setup+0x55e>
    4570:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    4572:	15 c0       	rjmp	.+42     	; 0x459e <udc_process_setup+0x55e>
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	13 c0       	rjmp	.+38     	; 0x459e <udc_process_setup+0x55e>
    4578:	80 e0       	ldi	r24, 0x00	; 0
    457a:	11 c0       	rjmp	.+34     	; 0x459e <udc_process_setup+0x55e>
    457c:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    457e:	0f c0       	rjmp	.+30     	; 0x459e <udc_process_setup+0x55e>
    4580:	98 2f       	mov	r25, r24
    4582:	90 76       	andi	r25, 0x60	; 96
    4584:	09 f0       	breq	.+2      	; 0x4588 <udc_process_setup+0x548>
    4586:	7b cf       	rjmp	.-266    	; 0x447e <udc_process_setup+0x43e>
    4588:	74 cd       	rjmp	.-1304   	; 0x4072 <udc_process_setup+0x32>
    458a:	98 2f       	mov	r25, r24
    458c:	90 76       	andi	r25, 0x60	; 96
    458e:	09 f0       	breq	.+2      	; 0x4592 <udc_process_setup+0x552>
    4590:	76 cf       	rjmp	.-276    	; 0x447e <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    4592:	77 ce       	rjmp	.-786    	; 0x4282 <udc_process_setup+0x242>
		str = udc_string_product_name;
    4594:	3c e0       	ldi	r19, 0x0C	; 12
    4596:	e4 ec       	ldi	r30, 0xC4	; 196
    4598:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    459a:	eb cd       	rjmp	.-1066   	; 0x4172 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	df 91       	pop	r29
    45a0:	cf 91       	pop	r28
    45a2:	1f 91       	pop	r17
    45a4:	0f 91       	pop	r16
    45a6:	08 95       	ret

000045a8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    45a8:	cf 93       	push	r28
    45aa:	df 93       	push	r29
    45ac:	1f 92       	push	r1
    45ae:	cd b7       	in	r28, 0x3d	; 61
    45b0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    45b2:	80 91 35 24 	lds	r24, 0x2435	; 0x802435 <stdio_base>
    45b6:	90 91 36 24 	lds	r25, 0x2436	; 0x802436 <stdio_base+0x1>
    45ba:	e0 91 31 24 	lds	r30, 0x2431	; 0x802431 <ptr_get>
    45be:	f0 91 32 24 	lds	r31, 0x2432	; 0x802432 <ptr_get+0x1>
    45c2:	be 01       	movw	r22, r28
    45c4:	6f 5f       	subi	r22, 0xFF	; 255
    45c6:	7f 4f       	sbci	r23, 0xFF	; 255
    45c8:	19 95       	eicall
	return c;
    45ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    45cc:	08 2e       	mov	r0, r24
    45ce:	00 0c       	add	r0, r0
    45d0:	99 0b       	sbc	r25, r25
    45d2:	0f 90       	pop	r0
    45d4:	df 91       	pop	r29
    45d6:	cf 91       	pop	r28
    45d8:	08 95       	ret

000045da <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    45da:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <stdio_usb_interface_enable>
    45de:	88 23       	and	r24, r24
    45e0:	81 f0       	breq	.+32     	; 0x4602 <stdio_usb_putchar+0x28>
    45e2:	86 2f       	mov	r24, r22
    45e4:	08 2e       	mov	r0, r24
    45e6:	00 0c       	add	r0, r0
    45e8:	99 0b       	sbc	r25, r25
    45ea:	e0 db       	rcall	.-2112   	; 0x3dac <udi_cdc_putc>
    45ec:	21 e0       	ldi	r18, 0x01	; 1
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	89 2b       	or	r24, r25
    45f2:	11 f0       	breq	.+4      	; 0x45f8 <stdio_usb_putchar+0x1e>
    45f4:	20 e0       	ldi	r18, 0x00	; 0
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	88 27       	eor	r24, r24
    45fa:	99 27       	eor	r25, r25
    45fc:	82 1b       	sub	r24, r18
    45fe:	93 0b       	sbc	r25, r19
    4600:	08 95       	ret
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	08 95       	ret

00004608 <stdio_usb_getchar>:
    4608:	cf 93       	push	r28
    460a:	df 93       	push	r29
    460c:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <stdio_usb_interface_enable>
    4610:	81 11       	cpse	r24, r1
    4612:	03 c0       	rjmp	.+6      	; 0x461a <stdio_usb_getchar+0x12>
    4614:	fb 01       	movw	r30, r22
    4616:	10 82       	st	Z, r1
    4618:	03 c0       	rjmp	.+6      	; 0x4620 <stdio_usb_getchar+0x18>
    461a:	eb 01       	movw	r28, r22
    461c:	3f db       	rcall	.-2434   	; 0x3c9c <udi_cdc_getc>
    461e:	88 83       	st	Y, r24
    4620:	df 91       	pop	r29
    4622:	cf 91       	pop	r28
    4624:	08 95       	ret

00004626 <stdio_usb_enable>:
    4626:	81 e0       	ldi	r24, 0x01	; 1
    4628:	80 93 14 24 	sts	0x2414, r24	; 0x802414 <stdio_usb_interface_enable>
    462c:	08 95       	ret

0000462e <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    462e:	10 92 35 24 	sts	0x2435, r1	; 0x802435 <stdio_base>
    4632:	10 92 36 24 	sts	0x2436, r1	; 0x802436 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    4636:	8d ee       	ldi	r24, 0xED	; 237
    4638:	92 e2       	ldi	r25, 0x22	; 34
    463a:	80 93 33 24 	sts	0x2433, r24	; 0x802433 <ptr_put>
    463e:	90 93 34 24 	sts	0x2434, r25	; 0x802434 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    4642:	84 e0       	ldi	r24, 0x04	; 4
    4644:	93 e2       	ldi	r25, 0x23	; 35
    4646:	80 93 31 24 	sts	0x2431, r24	; 0x802431 <ptr_get>
    464a:	90 93 32 24 	sts	0x2432, r25	; 0x802432 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    464e:	9c dc       	rcall	.-1736   	; 0x3f88 <udc_start>
    4650:	64 ed       	ldi	r22, 0xD4	; 212
    4652:	72 e2       	ldi	r23, 0x22	; 34
    4654:	8e e2       	ldi	r24, 0x2E	; 46
    4656:	93 e2       	ldi	r25, 0x23	; 35
    4658:	79 c0       	rjmp	.+242    	; 0x474c <fdevopen>
    465a:	08 95       	ret

0000465c <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    465c:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    465e:	80 91 35 24 	lds	r24, 0x2435	; 0x802435 <stdio_base>
    4662:	90 91 36 24 	lds	r25, 0x2436	; 0x802436 <stdio_base+0x1>
    4666:	e0 91 33 24 	lds	r30, 0x2433	; 0x802433 <ptr_put>
    466a:	f0 91 34 24 	lds	r31, 0x2434	; 0x802434 <ptr_put+0x1>
    466e:	19 95       	eicall
    4670:	99 23       	and	r25, r25
    4672:	1c f0       	brlt	.+6      	; 0x467a <_write+0x1e>
		return -1;
	}
	return 1;
    4674:	81 e0       	ldi	r24, 0x01	; 1
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    467a:	8f ef       	ldi	r24, 0xFF	; 255
    467c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    467e:	08 95       	ret

00004680 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    4680:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    4684:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    4686:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    4688:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    468c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    468e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    4692:	08 95       	ret

00004694 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    4694:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    4696:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    4698:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    469a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    469c:	60 83       	st	Z, r22
	ret                             // Return to caller
    469e:	08 95       	ret

000046a0 <__udivmodhi4>:
    46a0:	aa 1b       	sub	r26, r26
    46a2:	bb 1b       	sub	r27, r27
    46a4:	51 e1       	ldi	r21, 0x11	; 17
    46a6:	07 c0       	rjmp	.+14     	; 0x46b6 <__udivmodhi4_ep>

000046a8 <__udivmodhi4_loop>:
    46a8:	aa 1f       	adc	r26, r26
    46aa:	bb 1f       	adc	r27, r27
    46ac:	a6 17       	cp	r26, r22
    46ae:	b7 07       	cpc	r27, r23
    46b0:	10 f0       	brcs	.+4      	; 0x46b6 <__udivmodhi4_ep>
    46b2:	a6 1b       	sub	r26, r22
    46b4:	b7 0b       	sbc	r27, r23

000046b6 <__udivmodhi4_ep>:
    46b6:	88 1f       	adc	r24, r24
    46b8:	99 1f       	adc	r25, r25
    46ba:	5a 95       	dec	r21
    46bc:	a9 f7       	brne	.-22     	; 0x46a8 <__udivmodhi4_loop>
    46be:	80 95       	com	r24
    46c0:	90 95       	com	r25
    46c2:	bc 01       	movw	r22, r24
    46c4:	cd 01       	movw	r24, r26
    46c6:	08 95       	ret

000046c8 <__udivmodsi4>:
    46c8:	a1 e2       	ldi	r26, 0x21	; 33
    46ca:	1a 2e       	mov	r1, r26
    46cc:	aa 1b       	sub	r26, r26
    46ce:	bb 1b       	sub	r27, r27
    46d0:	fd 01       	movw	r30, r26
    46d2:	0d c0       	rjmp	.+26     	; 0x46ee <__udivmodsi4_ep>

000046d4 <__udivmodsi4_loop>:
    46d4:	aa 1f       	adc	r26, r26
    46d6:	bb 1f       	adc	r27, r27
    46d8:	ee 1f       	adc	r30, r30
    46da:	ff 1f       	adc	r31, r31
    46dc:	a2 17       	cp	r26, r18
    46de:	b3 07       	cpc	r27, r19
    46e0:	e4 07       	cpc	r30, r20
    46e2:	f5 07       	cpc	r31, r21
    46e4:	20 f0       	brcs	.+8      	; 0x46ee <__udivmodsi4_ep>
    46e6:	a2 1b       	sub	r26, r18
    46e8:	b3 0b       	sbc	r27, r19
    46ea:	e4 0b       	sbc	r30, r20
    46ec:	f5 0b       	sbc	r31, r21

000046ee <__udivmodsi4_ep>:
    46ee:	66 1f       	adc	r22, r22
    46f0:	77 1f       	adc	r23, r23
    46f2:	88 1f       	adc	r24, r24
    46f4:	99 1f       	adc	r25, r25
    46f6:	1a 94       	dec	r1
    46f8:	69 f7       	brne	.-38     	; 0x46d4 <__udivmodsi4_loop>
    46fa:	60 95       	com	r22
    46fc:	70 95       	com	r23
    46fe:	80 95       	com	r24
    4700:	90 95       	com	r25
    4702:	9b 01       	movw	r18, r22
    4704:	ac 01       	movw	r20, r24
    4706:	bd 01       	movw	r22, r26
    4708:	cf 01       	movw	r24, r30
    470a:	08 95       	ret

0000470c <__tablejump2__>:
    470c:	ee 0f       	add	r30, r30
    470e:	ff 1f       	adc	r31, r31
    4710:	88 1f       	adc	r24, r24
    4712:	8b bf       	out	0x3b, r24	; 59
    4714:	07 90       	elpm	r0, Z+
    4716:	f6 91       	elpm	r31, Z
    4718:	e0 2d       	mov	r30, r0
    471a:	19 94       	eijmp

0000471c <__umulhisi3>:
    471c:	a2 9f       	mul	r26, r18
    471e:	b0 01       	movw	r22, r0
    4720:	b3 9f       	mul	r27, r19
    4722:	c0 01       	movw	r24, r0
    4724:	a3 9f       	mul	r26, r19
    4726:	70 0d       	add	r23, r0
    4728:	81 1d       	adc	r24, r1
    472a:	11 24       	eor	r1, r1
    472c:	91 1d       	adc	r25, r1
    472e:	b2 9f       	mul	r27, r18
    4730:	70 0d       	add	r23, r0
    4732:	81 1d       	adc	r24, r1
    4734:	11 24       	eor	r1, r1
    4736:	91 1d       	adc	r25, r1
    4738:	08 95       	ret

0000473a <memcpy>:
    473a:	fb 01       	movw	r30, r22
    473c:	dc 01       	movw	r26, r24
    473e:	02 c0       	rjmp	.+4      	; 0x4744 <memcpy+0xa>
    4740:	01 90       	ld	r0, Z+
    4742:	0d 92       	st	X+, r0
    4744:	41 50       	subi	r20, 0x01	; 1
    4746:	50 40       	sbci	r21, 0x00	; 0
    4748:	d8 f7       	brcc	.-10     	; 0x4740 <memcpy+0x6>
    474a:	08 95       	ret

0000474c <fdevopen>:
    474c:	0f 93       	push	r16
    474e:	1f 93       	push	r17
    4750:	cf 93       	push	r28
    4752:	df 93       	push	r29
    4754:	00 97       	sbiw	r24, 0x00	; 0
    4756:	31 f4       	brne	.+12     	; 0x4764 <fdevopen+0x18>
    4758:	61 15       	cp	r22, r1
    475a:	71 05       	cpc	r23, r1
    475c:	19 f4       	brne	.+6      	; 0x4764 <fdevopen+0x18>
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	39 c0       	rjmp	.+114    	; 0x47d6 <fdevopen+0x8a>
    4764:	8b 01       	movw	r16, r22
    4766:	ec 01       	movw	r28, r24
    4768:	6e e0       	ldi	r22, 0x0E	; 14
    476a:	70 e0       	ldi	r23, 0x00	; 0
    476c:	81 e0       	ldi	r24, 0x01	; 1
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	37 d0       	rcall	.+110    	; 0x47e0 <calloc>
    4772:	fc 01       	movw	r30, r24
    4774:	89 2b       	or	r24, r25
    4776:	99 f3       	breq	.-26     	; 0x475e <fdevopen+0x12>
    4778:	80 e8       	ldi	r24, 0x80	; 128
    477a:	83 83       	std	Z+3, r24	; 0x03
    477c:	01 15       	cp	r16, r1
    477e:	11 05       	cpc	r17, r1
    4780:	71 f0       	breq	.+28     	; 0x479e <fdevopen+0x52>
    4782:	02 87       	std	Z+10, r16	; 0x0a
    4784:	13 87       	std	Z+11, r17	; 0x0b
    4786:	81 e8       	ldi	r24, 0x81	; 129
    4788:	83 83       	std	Z+3, r24	; 0x03
    478a:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <__iob>
    478e:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <__iob+0x1>
    4792:	89 2b       	or	r24, r25
    4794:	21 f4       	brne	.+8      	; 0x479e <fdevopen+0x52>
    4796:	e0 93 37 24 	sts	0x2437, r30	; 0x802437 <__iob>
    479a:	f0 93 38 24 	sts	0x2438, r31	; 0x802438 <__iob+0x1>
    479e:	20 97       	sbiw	r28, 0x00	; 0
    47a0:	c9 f0       	breq	.+50     	; 0x47d4 <fdevopen+0x88>
    47a2:	c0 87       	std	Z+8, r28	; 0x08
    47a4:	d1 87       	std	Z+9, r29	; 0x09
    47a6:	83 81       	ldd	r24, Z+3	; 0x03
    47a8:	82 60       	ori	r24, 0x02	; 2
    47aa:	83 83       	std	Z+3, r24	; 0x03
    47ac:	80 91 39 24 	lds	r24, 0x2439	; 0x802439 <__iob+0x2>
    47b0:	90 91 3a 24 	lds	r25, 0x243A	; 0x80243a <__iob+0x3>
    47b4:	89 2b       	or	r24, r25
    47b6:	71 f4       	brne	.+28     	; 0x47d4 <fdevopen+0x88>
    47b8:	e0 93 39 24 	sts	0x2439, r30	; 0x802439 <__iob+0x2>
    47bc:	f0 93 3a 24 	sts	0x243A, r31	; 0x80243a <__iob+0x3>
    47c0:	80 91 3b 24 	lds	r24, 0x243B	; 0x80243b <__iob+0x4>
    47c4:	90 91 3c 24 	lds	r25, 0x243C	; 0x80243c <__iob+0x5>
    47c8:	89 2b       	or	r24, r25
    47ca:	21 f4       	brne	.+8      	; 0x47d4 <fdevopen+0x88>
    47cc:	e0 93 3b 24 	sts	0x243B, r30	; 0x80243b <__iob+0x4>
    47d0:	f0 93 3c 24 	sts	0x243C, r31	; 0x80243c <__iob+0x5>
    47d4:	cf 01       	movw	r24, r30
    47d6:	df 91       	pop	r29
    47d8:	cf 91       	pop	r28
    47da:	1f 91       	pop	r17
    47dc:	0f 91       	pop	r16
    47de:	08 95       	ret

000047e0 <calloc>:
    47e0:	0f 93       	push	r16
    47e2:	1f 93       	push	r17
    47e4:	cf 93       	push	r28
    47e6:	df 93       	push	r29
    47e8:	86 9f       	mul	r24, r22
    47ea:	80 01       	movw	r16, r0
    47ec:	87 9f       	mul	r24, r23
    47ee:	10 0d       	add	r17, r0
    47f0:	96 9f       	mul	r25, r22
    47f2:	10 0d       	add	r17, r0
    47f4:	11 24       	eor	r1, r1
    47f6:	c8 01       	movw	r24, r16
    47f8:	0d d0       	rcall	.+26     	; 0x4814 <malloc>
    47fa:	ec 01       	movw	r28, r24
    47fc:	00 97       	sbiw	r24, 0x00	; 0
    47fe:	21 f0       	breq	.+8      	; 0x4808 <calloc+0x28>
    4800:	a8 01       	movw	r20, r16
    4802:	60 e0       	ldi	r22, 0x00	; 0
    4804:	70 e0       	ldi	r23, 0x00	; 0
    4806:	27 d1       	rcall	.+590    	; 0x4a56 <memset>
    4808:	ce 01       	movw	r24, r28
    480a:	df 91       	pop	r29
    480c:	cf 91       	pop	r28
    480e:	1f 91       	pop	r17
    4810:	0f 91       	pop	r16
    4812:	08 95       	ret

00004814 <malloc>:
    4814:	0f 93       	push	r16
    4816:	1f 93       	push	r17
    4818:	cf 93       	push	r28
    481a:	df 93       	push	r29
    481c:	82 30       	cpi	r24, 0x02	; 2
    481e:	91 05       	cpc	r25, r1
    4820:	10 f4       	brcc	.+4      	; 0x4826 <malloc+0x12>
    4822:	82 e0       	ldi	r24, 0x02	; 2
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	e0 91 3f 24 	lds	r30, 0x243F	; 0x80243f <__flp>
    482a:	f0 91 40 24 	lds	r31, 0x2440	; 0x802440 <__flp+0x1>
    482e:	20 e0       	ldi	r18, 0x00	; 0
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	a0 e0       	ldi	r26, 0x00	; 0
    4834:	b0 e0       	ldi	r27, 0x00	; 0
    4836:	30 97       	sbiw	r30, 0x00	; 0
    4838:	19 f1       	breq	.+70     	; 0x4880 <malloc+0x6c>
    483a:	40 81       	ld	r20, Z
    483c:	51 81       	ldd	r21, Z+1	; 0x01
    483e:	02 81       	ldd	r16, Z+2	; 0x02
    4840:	13 81       	ldd	r17, Z+3	; 0x03
    4842:	48 17       	cp	r20, r24
    4844:	59 07       	cpc	r21, r25
    4846:	c8 f0       	brcs	.+50     	; 0x487a <malloc+0x66>
    4848:	84 17       	cp	r24, r20
    484a:	95 07       	cpc	r25, r21
    484c:	69 f4       	brne	.+26     	; 0x4868 <malloc+0x54>
    484e:	10 97       	sbiw	r26, 0x00	; 0
    4850:	31 f0       	breq	.+12     	; 0x485e <malloc+0x4a>
    4852:	12 96       	adiw	r26, 0x02	; 2
    4854:	0c 93       	st	X, r16
    4856:	12 97       	sbiw	r26, 0x02	; 2
    4858:	13 96       	adiw	r26, 0x03	; 3
    485a:	1c 93       	st	X, r17
    485c:	27 c0       	rjmp	.+78     	; 0x48ac <malloc+0x98>
    485e:	00 93 3f 24 	sts	0x243F, r16	; 0x80243f <__flp>
    4862:	10 93 40 24 	sts	0x2440, r17	; 0x802440 <__flp+0x1>
    4866:	22 c0       	rjmp	.+68     	; 0x48ac <malloc+0x98>
    4868:	21 15       	cp	r18, r1
    486a:	31 05       	cpc	r19, r1
    486c:	19 f0       	breq	.+6      	; 0x4874 <malloc+0x60>
    486e:	42 17       	cp	r20, r18
    4870:	53 07       	cpc	r21, r19
    4872:	18 f4       	brcc	.+6      	; 0x487a <malloc+0x66>
    4874:	9a 01       	movw	r18, r20
    4876:	bd 01       	movw	r22, r26
    4878:	ef 01       	movw	r28, r30
    487a:	df 01       	movw	r26, r30
    487c:	f8 01       	movw	r30, r16
    487e:	db cf       	rjmp	.-74     	; 0x4836 <malloc+0x22>
    4880:	21 15       	cp	r18, r1
    4882:	31 05       	cpc	r19, r1
    4884:	f9 f0       	breq	.+62     	; 0x48c4 <malloc+0xb0>
    4886:	28 1b       	sub	r18, r24
    4888:	39 0b       	sbc	r19, r25
    488a:	24 30       	cpi	r18, 0x04	; 4
    488c:	31 05       	cpc	r19, r1
    488e:	80 f4       	brcc	.+32     	; 0x48b0 <malloc+0x9c>
    4890:	8a 81       	ldd	r24, Y+2	; 0x02
    4892:	9b 81       	ldd	r25, Y+3	; 0x03
    4894:	61 15       	cp	r22, r1
    4896:	71 05       	cpc	r23, r1
    4898:	21 f0       	breq	.+8      	; 0x48a2 <malloc+0x8e>
    489a:	fb 01       	movw	r30, r22
    489c:	82 83       	std	Z+2, r24	; 0x02
    489e:	93 83       	std	Z+3, r25	; 0x03
    48a0:	04 c0       	rjmp	.+8      	; 0x48aa <malloc+0x96>
    48a2:	80 93 3f 24 	sts	0x243F, r24	; 0x80243f <__flp>
    48a6:	90 93 40 24 	sts	0x2440, r25	; 0x802440 <__flp+0x1>
    48aa:	fe 01       	movw	r30, r28
    48ac:	32 96       	adiw	r30, 0x02	; 2
    48ae:	44 c0       	rjmp	.+136    	; 0x4938 <malloc+0x124>
    48b0:	fe 01       	movw	r30, r28
    48b2:	e2 0f       	add	r30, r18
    48b4:	f3 1f       	adc	r31, r19
    48b6:	81 93       	st	Z+, r24
    48b8:	91 93       	st	Z+, r25
    48ba:	22 50       	subi	r18, 0x02	; 2
    48bc:	31 09       	sbc	r19, r1
    48be:	28 83       	st	Y, r18
    48c0:	39 83       	std	Y+1, r19	; 0x01
    48c2:	3a c0       	rjmp	.+116    	; 0x4938 <malloc+0x124>
    48c4:	20 91 3d 24 	lds	r18, 0x243D	; 0x80243d <__brkval>
    48c8:	30 91 3e 24 	lds	r19, 0x243E	; 0x80243e <__brkval+0x1>
    48cc:	23 2b       	or	r18, r19
    48ce:	41 f4       	brne	.+16     	; 0x48e0 <malloc+0xcc>
    48d0:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    48d4:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    48d8:	20 93 3d 24 	sts	0x243D, r18	; 0x80243d <__brkval>
    48dc:	30 93 3e 24 	sts	0x243E, r19	; 0x80243e <__brkval+0x1>
    48e0:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    48e4:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    48e8:	21 15       	cp	r18, r1
    48ea:	31 05       	cpc	r19, r1
    48ec:	41 f4       	brne	.+16     	; 0x48fe <malloc+0xea>
    48ee:	2d b7       	in	r18, 0x3d	; 61
    48f0:	3e b7       	in	r19, 0x3e	; 62
    48f2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    48f6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    48fa:	24 1b       	sub	r18, r20
    48fc:	35 0b       	sbc	r19, r21
    48fe:	e0 91 3d 24 	lds	r30, 0x243D	; 0x80243d <__brkval>
    4902:	f0 91 3e 24 	lds	r31, 0x243E	; 0x80243e <__brkval+0x1>
    4906:	e2 17       	cp	r30, r18
    4908:	f3 07       	cpc	r31, r19
    490a:	a0 f4       	brcc	.+40     	; 0x4934 <malloc+0x120>
    490c:	2e 1b       	sub	r18, r30
    490e:	3f 0b       	sbc	r19, r31
    4910:	28 17       	cp	r18, r24
    4912:	39 07       	cpc	r19, r25
    4914:	78 f0       	brcs	.+30     	; 0x4934 <malloc+0x120>
    4916:	ac 01       	movw	r20, r24
    4918:	4e 5f       	subi	r20, 0xFE	; 254
    491a:	5f 4f       	sbci	r21, 0xFF	; 255
    491c:	24 17       	cp	r18, r20
    491e:	35 07       	cpc	r19, r21
    4920:	48 f0       	brcs	.+18     	; 0x4934 <malloc+0x120>
    4922:	4e 0f       	add	r20, r30
    4924:	5f 1f       	adc	r21, r31
    4926:	40 93 3d 24 	sts	0x243D, r20	; 0x80243d <__brkval>
    492a:	50 93 3e 24 	sts	0x243E, r21	; 0x80243e <__brkval+0x1>
    492e:	81 93       	st	Z+, r24
    4930:	91 93       	st	Z+, r25
    4932:	02 c0       	rjmp	.+4      	; 0x4938 <malloc+0x124>
    4934:	e0 e0       	ldi	r30, 0x00	; 0
    4936:	f0 e0       	ldi	r31, 0x00	; 0
    4938:	cf 01       	movw	r24, r30
    493a:	df 91       	pop	r29
    493c:	cf 91       	pop	r28
    493e:	1f 91       	pop	r17
    4940:	0f 91       	pop	r16
    4942:	08 95       	ret

00004944 <free>:
    4944:	cf 93       	push	r28
    4946:	df 93       	push	r29
    4948:	00 97       	sbiw	r24, 0x00	; 0
    494a:	09 f4       	brne	.+2      	; 0x494e <free+0xa>
    494c:	81 c0       	rjmp	.+258    	; 0x4a50 <free+0x10c>
    494e:	fc 01       	movw	r30, r24
    4950:	32 97       	sbiw	r30, 0x02	; 2
    4952:	12 82       	std	Z+2, r1	; 0x02
    4954:	13 82       	std	Z+3, r1	; 0x03
    4956:	a0 91 3f 24 	lds	r26, 0x243F	; 0x80243f <__flp>
    495a:	b0 91 40 24 	lds	r27, 0x2440	; 0x802440 <__flp+0x1>
    495e:	10 97       	sbiw	r26, 0x00	; 0
    4960:	81 f4       	brne	.+32     	; 0x4982 <free+0x3e>
    4962:	20 81       	ld	r18, Z
    4964:	31 81       	ldd	r19, Z+1	; 0x01
    4966:	82 0f       	add	r24, r18
    4968:	93 1f       	adc	r25, r19
    496a:	20 91 3d 24 	lds	r18, 0x243D	; 0x80243d <__brkval>
    496e:	30 91 3e 24 	lds	r19, 0x243E	; 0x80243e <__brkval+0x1>
    4972:	28 17       	cp	r18, r24
    4974:	39 07       	cpc	r19, r25
    4976:	51 f5       	brne	.+84     	; 0x49cc <free+0x88>
    4978:	e0 93 3d 24 	sts	0x243D, r30	; 0x80243d <__brkval>
    497c:	f0 93 3e 24 	sts	0x243E, r31	; 0x80243e <__brkval+0x1>
    4980:	67 c0       	rjmp	.+206    	; 0x4a50 <free+0x10c>
    4982:	ed 01       	movw	r28, r26
    4984:	20 e0       	ldi	r18, 0x00	; 0
    4986:	30 e0       	ldi	r19, 0x00	; 0
    4988:	ce 17       	cp	r28, r30
    498a:	df 07       	cpc	r29, r31
    498c:	40 f4       	brcc	.+16     	; 0x499e <free+0x5a>
    498e:	4a 81       	ldd	r20, Y+2	; 0x02
    4990:	5b 81       	ldd	r21, Y+3	; 0x03
    4992:	9e 01       	movw	r18, r28
    4994:	41 15       	cp	r20, r1
    4996:	51 05       	cpc	r21, r1
    4998:	f1 f0       	breq	.+60     	; 0x49d6 <free+0x92>
    499a:	ea 01       	movw	r28, r20
    499c:	f5 cf       	rjmp	.-22     	; 0x4988 <free+0x44>
    499e:	c2 83       	std	Z+2, r28	; 0x02
    49a0:	d3 83       	std	Z+3, r29	; 0x03
    49a2:	40 81       	ld	r20, Z
    49a4:	51 81       	ldd	r21, Z+1	; 0x01
    49a6:	84 0f       	add	r24, r20
    49a8:	95 1f       	adc	r25, r21
    49aa:	c8 17       	cp	r28, r24
    49ac:	d9 07       	cpc	r29, r25
    49ae:	59 f4       	brne	.+22     	; 0x49c6 <free+0x82>
    49b0:	88 81       	ld	r24, Y
    49b2:	99 81       	ldd	r25, Y+1	; 0x01
    49b4:	84 0f       	add	r24, r20
    49b6:	95 1f       	adc	r25, r21
    49b8:	02 96       	adiw	r24, 0x02	; 2
    49ba:	80 83       	st	Z, r24
    49bc:	91 83       	std	Z+1, r25	; 0x01
    49be:	8a 81       	ldd	r24, Y+2	; 0x02
    49c0:	9b 81       	ldd	r25, Y+3	; 0x03
    49c2:	82 83       	std	Z+2, r24	; 0x02
    49c4:	93 83       	std	Z+3, r25	; 0x03
    49c6:	21 15       	cp	r18, r1
    49c8:	31 05       	cpc	r19, r1
    49ca:	29 f4       	brne	.+10     	; 0x49d6 <free+0x92>
    49cc:	e0 93 3f 24 	sts	0x243F, r30	; 0x80243f <__flp>
    49d0:	f0 93 40 24 	sts	0x2440, r31	; 0x802440 <__flp+0x1>
    49d4:	3d c0       	rjmp	.+122    	; 0x4a50 <free+0x10c>
    49d6:	e9 01       	movw	r28, r18
    49d8:	ea 83       	std	Y+2, r30	; 0x02
    49da:	fb 83       	std	Y+3, r31	; 0x03
    49dc:	49 91       	ld	r20, Y+
    49de:	59 91       	ld	r21, Y+
    49e0:	c4 0f       	add	r28, r20
    49e2:	d5 1f       	adc	r29, r21
    49e4:	ec 17       	cp	r30, r28
    49e6:	fd 07       	cpc	r31, r29
    49e8:	61 f4       	brne	.+24     	; 0x4a02 <free+0xbe>
    49ea:	80 81       	ld	r24, Z
    49ec:	91 81       	ldd	r25, Z+1	; 0x01
    49ee:	84 0f       	add	r24, r20
    49f0:	95 1f       	adc	r25, r21
    49f2:	02 96       	adiw	r24, 0x02	; 2
    49f4:	e9 01       	movw	r28, r18
    49f6:	88 83       	st	Y, r24
    49f8:	99 83       	std	Y+1, r25	; 0x01
    49fa:	82 81       	ldd	r24, Z+2	; 0x02
    49fc:	93 81       	ldd	r25, Z+3	; 0x03
    49fe:	8a 83       	std	Y+2, r24	; 0x02
    4a00:	9b 83       	std	Y+3, r25	; 0x03
    4a02:	e0 e0       	ldi	r30, 0x00	; 0
    4a04:	f0 e0       	ldi	r31, 0x00	; 0
    4a06:	12 96       	adiw	r26, 0x02	; 2
    4a08:	8d 91       	ld	r24, X+
    4a0a:	9c 91       	ld	r25, X
    4a0c:	13 97       	sbiw	r26, 0x03	; 3
    4a0e:	00 97       	sbiw	r24, 0x00	; 0
    4a10:	19 f0       	breq	.+6      	; 0x4a18 <free+0xd4>
    4a12:	fd 01       	movw	r30, r26
    4a14:	dc 01       	movw	r26, r24
    4a16:	f7 cf       	rjmp	.-18     	; 0x4a06 <free+0xc2>
    4a18:	8d 91       	ld	r24, X+
    4a1a:	9c 91       	ld	r25, X
    4a1c:	11 97       	sbiw	r26, 0x01	; 1
    4a1e:	9d 01       	movw	r18, r26
    4a20:	2e 5f       	subi	r18, 0xFE	; 254
    4a22:	3f 4f       	sbci	r19, 0xFF	; 255
    4a24:	82 0f       	add	r24, r18
    4a26:	93 1f       	adc	r25, r19
    4a28:	20 91 3d 24 	lds	r18, 0x243D	; 0x80243d <__brkval>
    4a2c:	30 91 3e 24 	lds	r19, 0x243E	; 0x80243e <__brkval+0x1>
    4a30:	28 17       	cp	r18, r24
    4a32:	39 07       	cpc	r19, r25
    4a34:	69 f4       	brne	.+26     	; 0x4a50 <free+0x10c>
    4a36:	30 97       	sbiw	r30, 0x00	; 0
    4a38:	29 f4       	brne	.+10     	; 0x4a44 <free+0x100>
    4a3a:	10 92 3f 24 	sts	0x243F, r1	; 0x80243f <__flp>
    4a3e:	10 92 40 24 	sts	0x2440, r1	; 0x802440 <__flp+0x1>
    4a42:	02 c0       	rjmp	.+4      	; 0x4a48 <free+0x104>
    4a44:	12 82       	std	Z+2, r1	; 0x02
    4a46:	13 82       	std	Z+3, r1	; 0x03
    4a48:	a0 93 3d 24 	sts	0x243D, r26	; 0x80243d <__brkval>
    4a4c:	b0 93 3e 24 	sts	0x243E, r27	; 0x80243e <__brkval+0x1>
    4a50:	df 91       	pop	r29
    4a52:	cf 91       	pop	r28
    4a54:	08 95       	ret

00004a56 <memset>:
    4a56:	dc 01       	movw	r26, r24
    4a58:	01 c0       	rjmp	.+2      	; 0x4a5c <memset+0x6>
    4a5a:	6d 93       	st	X+, r22
    4a5c:	41 50       	subi	r20, 0x01	; 1
    4a5e:	50 40       	sbci	r21, 0x00	; 0
    4a60:	e0 f7       	brcc	.-8      	; 0x4a5a <memset+0x4>
    4a62:	08 95       	ret

00004a64 <_exit>:
    4a64:	f8 94       	cli

00004a66 <__stop_program>:
    4a66:	ff cf       	rjmp	.-2      	; 0x4a66 <__stop_program>
