
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ae8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00802000  00004ae8  00004b7c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fb  00802128  00802128  00004ca4  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004ca4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00004cd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000898  00000000  00000000  00004d18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001638c  00000000  00000000  000055b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006102  00000000  00000000  0001b93c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000bbea  00000000  00000000  00021a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000022e8  00000000  00000000  0002d628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003cf07  00000000  00000000  0002f910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d87  00000000  00000000  0006c817  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d8  00000000  00000000  000745a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d959  00000000  00000000  00074e78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__vector_11>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__vector_13>
      38:	b0 c6       	rjmp	.+3424   	; 0xd9a <__vector_14>
      3a:	00 00       	nop
      3c:	db c6       	rjmp	.+3510   	; 0xdf4 <__vector_15>
      3e:	00 00       	nop
      40:	06 c7       	rjmp	.+3596   	; 0xe4e <__vector_16>
      42:	00 00       	nop
      44:	31 c7       	rjmp	.+3682   	; 0xea8 <__vector_17>
      46:	00 00       	nop
      48:	5c c7       	rjmp	.+3768   	; 0xf02 <__vector_18>
      4a:	00 00       	nop
      4c:	87 c7       	rjmp	.+3854   	; 0xf5c <__vector_19>
      4e:	00 00       	nop
      50:	b2 c7       	rjmp	.+3940   	; 0xfb6 <__vector_20>
      52:	00 00       	nop
      54:	dd c7       	rjmp	.+4026   	; 0x1010 <__vector_21>
      56:	00 00       	nop
      58:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_22>
      5c:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__vector_23>
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c3       	rjmp	.+1958   	; 0x844 <__vector_39>
      9e:	00 00       	nop
      a0:	03 c4       	rjmp	.+2054   	; 0x8a8 <__vector_40>
      a2:	00 00       	nop
      a4:	33 c4       	rjmp	.+2150   	; 0x90c <__vector_41>
      a6:	00 00       	nop
      a8:	63 c4       	rjmp	.+2246   	; 0x970 <__vector_42>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <__vector_46>
      bc:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__vector_47>
      c0:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__vector_48>
      c4:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_49>
      c8:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__vector_50>
      cc:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_51>
      d0:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_52>
      d4:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__vector_53>
      d8:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__vector_54>
      dc:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__vector_55>
      e0:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__vector_56>
      e4:	ba c0       	rjmp	.+372    	; 0x25a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b6 c0       	rjmp	.+364    	; 0x25a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b4 c0       	rjmp	.+360    	; 0x25a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b2 c0       	rjmp	.+356    	; 0x25a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b0 c0       	rjmp	.+352    	; 0x25a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ae c0       	rjmp	.+348    	; 0x25a <__bad_interrupt>
      fe:	00 00       	nop
     100:	ac c0       	rjmp	.+344    	; 0x25a <__bad_interrupt>
     102:	00 00       	nop
     104:	aa c0       	rjmp	.+340    	; 0x25a <__bad_interrupt>
     106:	00 00       	nop
     108:	a8 c0       	rjmp	.+336    	; 0x25a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a6 c0       	rjmp	.+332    	; 0x25a <__bad_interrupt>
     10e:	00 00       	nop
     110:	a4 c0       	rjmp	.+328    	; 0x25a <__bad_interrupt>
     112:	00 00       	nop
     114:	a2 c0       	rjmp	.+324    	; 0x25a <__bad_interrupt>
     116:	00 00       	nop
     118:	a0 c0       	rjmp	.+320    	; 0x25a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	cb c2       	rjmp	.+1430   	; 0x6b4 <__vector_71>
     11e:	00 00       	nop
     120:	fb c2       	rjmp	.+1526   	; 0x718 <__vector_72>
     122:	00 00       	nop
     124:	2b c3       	rjmp	.+1622   	; 0x77c <__vector_73>
     126:	00 00       	nop
     128:	5b c3       	rjmp	.+1718   	; 0x7e0 <__vector_74>
     12a:	00 00       	nop
     12c:	96 c0       	rjmp	.+300    	; 0x25a <__bad_interrupt>
     12e:	00 00       	nop
     130:	94 c0       	rjmp	.+296    	; 0x25a <__bad_interrupt>
     132:	00 00       	nop
     134:	f4 c7       	rjmp	.+4072   	; 0x111e <__vector_77>
     136:	00 00       	nop
     138:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__vector_78>
     13c:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__vector_79>
     140:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_80>
     144:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_81>
     148:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__vector_82>
     14c:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__vector_83>
     150:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_84>
     154:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_85>
     158:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__vector_86>
     15c:	7e c0       	rjmp	.+252    	; 0x25a <__bad_interrupt>
     15e:	00 00       	nop
     160:	7c c0       	rjmp	.+248    	; 0x25a <__bad_interrupt>
     162:	00 00       	nop
     164:	7a c0       	rjmp	.+244    	; 0x25a <__bad_interrupt>
     166:	00 00       	nop
     168:	78 c0       	rjmp	.+240    	; 0x25a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	76 c0       	rjmp	.+236    	; 0x25a <__bad_interrupt>
     16e:	00 00       	nop
     170:	74 c0       	rjmp	.+232    	; 0x25a <__bad_interrupt>
     172:	00 00       	nop
     174:	72 c0       	rjmp	.+228    	; 0x25a <__bad_interrupt>
     176:	00 00       	nop
     178:	70 c0       	rjmp	.+224    	; 0x25a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6e c0       	rjmp	.+220    	; 0x25a <__bad_interrupt>
     17e:	00 00       	nop
     180:	6c c0       	rjmp	.+216    	; 0x25a <__bad_interrupt>
     182:	00 00       	nop
     184:	6a c0       	rjmp	.+212    	; 0x25a <__bad_interrupt>
     186:	00 00       	nop
     188:	68 c0       	rjmp	.+208    	; 0x25a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	66 c0       	rjmp	.+204    	; 0x25a <__bad_interrupt>
     18e:	00 00       	nop
     190:	64 c0       	rjmp	.+200    	; 0x25a <__bad_interrupt>
     192:	00 00       	nop
     194:	62 c0       	rjmp	.+196    	; 0x25a <__bad_interrupt>
     196:	00 00       	nop
     198:	60 c0       	rjmp	.+192    	; 0x25a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5e c0       	rjmp	.+188    	; 0x25a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5c c0       	rjmp	.+184    	; 0x25a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5a c0       	rjmp	.+180    	; 0x25a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	58 c0       	rjmp	.+176    	; 0x25a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	56 c0       	rjmp	.+172    	; 0x25a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__vector_108>
     1b4:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__vector_109>
     1b8:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_110>
     1bc:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__vector_111>
     1c0:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__vector_112>
     1c4:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_113>
     1c8:	48 c0       	rjmp	.+144    	; 0x25a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	46 c0       	rjmp	.+140    	; 0x25a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	44 c0       	rjmp	.+136    	; 0x25a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	42 c0       	rjmp	.+132    	; 0x25a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3c c0       	rjmp	.+120    	; 0x25a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3a c0       	rjmp	.+116    	; 0x25a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	36 c0       	rjmp	.+108    	; 0x25a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <__vector_125>
     1f8:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__vector_126>
     1fc:	fc 0f       	add	r31, r28
     1fe:	ff 0f       	add	r31, r31
     200:	02 10       	cpse	r0, r2
     202:	05 10       	cpse	r0, r5
     204:	08 10       	cpse	r0, r8
     206:	0b 10       	cpse	r0, r11
     208:	0e 10       	cpse	r0, r14
     20a:	4d 17       	cp	r20, r29
     20c:	60 17       	cp	r22, r16
     20e:	73 17       	cp	r23, r19
     210:	86 17       	cp	r24, r22
     212:	99 17       	cp	r25, r25
     214:	ac 17       	cp	r26, r28
     216:	bf 17       	cp	r27, r31

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e5       	ldi	r29, 0x5F	; 95
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e8 ee       	ldi	r30, 0xE8	; 232
     230:	fa e4       	ldi	r31, 0x4A	; 74
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a8 32       	cpi	r26, 0x28	; 40
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	24 e2       	ldi	r18, 0x24	; 36
     244:	a8 e2       	ldi	r26, 0x28	; 40
     246:	b1 e2       	ldi	r27, 0x21	; 33
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a3 32       	cpi	r26, 0x23	; 35
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 65 18 	call	0x30ca	; 0x30ca <main>
     256:	0c 94 72 25 	jmp	0x4ae4	; 0x4ae4 <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
     25c:	04 c0       	rjmp	.+8      	; 0x266 <__portable_avr_delay_cycles+0xa>
     25e:	61 50       	subi	r22, 0x01	; 1
     260:	71 09       	sbc	r23, r1
     262:	81 09       	sbc	r24, r1
     264:	91 09       	sbc	r25, r1
     266:	61 15       	cp	r22, r1
     268:	71 05       	cpc	r23, r1
     26a:	81 05       	cpc	r24, r1
     26c:	91 05       	cpc	r25, r1
     26e:	b9 f7       	brne	.-18     	; 0x25e <__portable_avr_delay_cycles+0x2>
     270:	08 95       	ret

00000272 <rtc_get_time>:
     272:	80 e1       	ldi	r24, 0x10	; 16
     274:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     278:	e0 e2       	ldi	r30, 0x20	; 32
     27a:	f4 e0       	ldi	r31, 0x04	; 4
     27c:	81 81       	ldd	r24, Z+1	; 0x01
     27e:	84 fd       	sbrc	r24, 4
     280:	fd cf       	rjmp	.-6      	; 0x27c <rtc_get_time+0xa>
     282:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
     286:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     28a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     28e:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     292:	08 95       	ret

00000294 <rtc_set_callback>:
     294:	80 93 f7 23 	sts	0x23F7, r24	; 0x8023f7 <rtc_data>
     298:	90 93 f8 23 	sts	0x23F8, r25	; 0x8023f8 <rtc_data+0x1>
     29c:	08 95       	ret

0000029e <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
     2aa:	c0 ef       	ldi	r28, 0xF0	; 240
     2ac:	d0 e0       	ldi	r29, 0x00	; 0
     2ae:	88 81       	ld	r24, Y
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	80 ef       	ldi	r24, 0xF0	; 240
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 8a 23 	call	0x4714	; 0x4714 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
     2be:	88 81       	ld	r24, Y
     2c0:	84 60       	ori	r24, 0x04	; 4
     2c2:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
     2c4:	69 ee       	ldi	r22, 0xE9	; 233
     2c6:	73 e0       	ldi	r23, 0x03	; 3
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	c7 df       	rcall	.-114    	; 0x25c <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
     2ce:	88 81       	ld	r24, Y
     2d0:	88 61       	ori	r24, 0x18	; 24
     2d2:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
     2d4:	e0 ef       	ldi	r30, 0xF0	; 240
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	83 ff       	sbrs	r24, 3
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
     2de:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     2e2:	e0 e2       	ldi	r30, 0x20	; 32
     2e4:	f4 e0       	ldi	r31, 0x04	; 4
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
     2e8:	80 fd       	sbrc	r24, 0
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
     2ec:	e0 e2       	ldi	r30, 0x20	; 32
     2ee:	f4 e0       	ldi	r31, 0x04	; 4
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
     2f4:	dc 01       	movw	r26, r24
     2f6:	80 87       	std	Z+8, r24	; 0x08
     2f8:	91 87       	std	Z+9, r25	; 0x09
     2fa:	a2 87       	std	Z+10, r26	; 0x0a
     2fc:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
     2fe:	14 82       	std	Z+4, r1	; 0x04
     300:	15 82       	std	Z+5, r1	; 0x05
     302:	16 82       	std	Z+6, r1	; 0x06
     304:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     306:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
     308:	80 fd       	sbrc	r24, 0
     30a:	fd cf       	rjmp	.-6      	; 0x306 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
     30c:	e0 e2       	ldi	r30, 0x20	; 32
     30e:	f4 e0       	ldi	r31, 0x04	; 4
     310:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
     316:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
     318:	80 fd       	sbrc	r24, 0
     31a:	fd cf       	rjmp	.-6      	; 0x316 <rtc_init+0x78>
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	0b b6       	in	r0, 0x3b	; 59
     32e:	0f 92       	push	r0
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ef 93       	push	r30
     34a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
     34c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
     350:	c0 91 f7 23 	lds	r28, 0x23F7	; 0x8023f7 <rtc_data>
     354:	d0 91 f8 23 	lds	r29, 0x23F8	; 0x8023f8 <rtc_data+0x1>
     358:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
     35a:	19 f0       	breq	.+6      	; 0x362 <__vector_11+0x40>
     35c:	8a df       	rcall	.-236    	; 0x272 <rtc_get_time>
     35e:	fe 01       	movw	r30, r28
}
     360:	19 95       	eicall
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <__portable_avr_delay_cycles>:
	start_twi_lcd();
}

/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void start_twi_onboard()
{
     38c:	04 c0       	rjmp	.+8      	; 0x396 <__portable_avr_delay_cycles+0xa>
     38e:	61 50       	subi	r22, 0x01	; 1
     390:	71 09       	sbc	r23, r1
     392:	81 09       	sbc	r24, r1
     394:	91 09       	sbc	r25, r1
     396:	61 15       	cp	r22, r1
     398:	71 05       	cpc	r23, r1
     39a:	81 05       	cpc	r24, r1
     39c:	91 05       	cpc	r25, r1
     39e:	b9 f7       	brne	.-18     	; 0x38e <__portable_avr_delay_cycles+0x2>
     3a0:	08 95       	ret

000003a2 <twi_waitUntilReady>:
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	e6 e0       	ldi	r30, 0x06	; 6
     3b2:	f0 e2       	ldi	r31, 0x20	; 32
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	81 83       	std	Z+1, r24	; 0x01
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	84 83       	std	Z+4, r24	; 0x04
     3be:	95 83       	std	Z+5, r25	; 0x05
     3c0:	8f 01       	movw	r16, r30
     3c2:	cc 24       	eor	r12, r12
     3c4:	c3 94       	inc	r12
     3c6:	d1 2c       	mov	r13, r1
     3c8:	0f 2e       	mov	r0, r31
     3ca:	f3 eb       	ldi	r31, 0xB3	; 179
     3cc:	ef 2e       	mov	r14, r31
     3ce:	f2 e2       	ldi	r31, 0x22	; 34
     3d0:	ff 2e       	mov	r15, r31
     3d2:	f0 2d       	mov	r31, r0
     3d4:	f8 01       	movw	r30, r16
     3d6:	c0 86       	std	Z+8, r12	; 0x08
     3d8:	d1 86       	std	Z+9, r13	; 0x09
     3da:	41 e0       	ldi	r20, 0x01	; 1
     3dc:	b8 01       	movw	r22, r16
     3de:	80 e8       	ldi	r24, 0x80	; 128
     3e0:	94 e0       	ldi	r25, 0x04	; 4
     3e2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <twi_master_transfer>
     3e6:	f7 01       	movw	r30, r14
     3e8:	c0 81       	ld	r28, Z
     3ea:	9c 2f       	mov	r25, r28
     3ec:	90 78       	andi	r25, 0x80	; 128
     3ee:	81 11       	cpse	r24, r1
     3f0:	0d c0       	rjmp	.+26     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f2:	91 f0       	breq	.+36     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3f4:	8c 2f       	mov	r24, r28
     3f6:	81 78       	andi	r24, 0x81	; 129
     3f8:	81 38       	cpi	r24, 0x81	; 129
     3fa:	29 f4       	brne	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fc:	65 ef       	ldi	r22, 0xF5	; 245
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	c3 df       	rcall	.-122    	; 0x38c <__portable_avr_delay_cycles>
     406:	c0 fd       	sbrc	r28, 0
     408:	e5 cf       	rjmp	.-54     	; 0x3d4 <twi_waitUntilReady+0x32>
     40a:	0c c0       	rjmp	.+24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     40c:	65 e0       	ldi	r22, 0x05	; 5
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	bb df       	rcall	.-138    	; 0x38c <__portable_avr_delay_cycles>
     416:	de cf       	rjmp	.-68     	; 0x3d4 <twi_waitUntilReady+0x32>
     418:	65 e0       	ldi	r22, 0x05	; 5
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	b5 df       	rcall	.-150    	; 0x38c <__portable_avr_delay_cycles>
     422:	d8 cf       	rjmp	.-80     	; 0x3d4 <twi_waitUntilReady+0x32>
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	df 90       	pop	r13
     430:	cf 90       	pop	r12
     432:	08 95       	ret

00000434 <twi_init>:
     434:	e0 e8       	ldi	r30, 0x80	; 128
     436:	f6 e0       	ldi	r31, 0x06	; 6
     438:	88 e3       	ldi	r24, 0x38	; 56
     43a:	80 8b       	std	Z+16, r24	; 0x10
     43c:	81 8b       	std	Z+17, r24	; 0x11
     43e:	e0 e4       	ldi	r30, 0x40	; 64
     440:	f6 e0       	ldi	r31, 0x06	; 6
     442:	80 8b       	std	Z+16, r24	; 0x10
     444:	81 8b       	std	Z+17, r24	; 0x11
     446:	08 95       	ret

00000448 <start_twi_lcd>:

}

/* TWI2 - LCD Port */
void start_twi_lcd()
{
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
     454:	e6 e0       	ldi	r30, 0x06	; 6
     456:	f0 e2       	ldi	r31, 0x20	; 32
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	84 83       	std	Z+4, r24	; 0x04
     462:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
     464:	80 87       	std	Z+8, r24	; 0x08
     466:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
     468:	41 e0       	ldi	r20, 0x01	; 1
     46a:	bf 01       	movw	r22, r30
     46c:	80 e8       	ldi	r24, 0x80	; 128
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
     474:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <twi2_m_data>
     478:	80 93 bb 22 	sts	0x22BB, r24	; 0x8022bb <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
     47c:	81 31       	cpi	r24, 0x11	; 17
     47e:	78 f1       	brcs	.+94     	; 0x4de <start_twi_lcd+0x96>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
     480:	c6 e0       	ldi	r28, 0x06	; 6
     482:	d0 e2       	ldi	r29, 0x20	; 32
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
     488:	0f 2e       	mov	r0, r31
     48a:	f3 eb       	ldi	r31, 0xB3	; 179
     48c:	ef 2e       	mov	r14, r31
     48e:	f2 e2       	ldi	r31, 0x22	; 34
     490:	ff 2e       	mov	r15, r31
     492:	f0 2d       	mov	r31, r0
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	f7 01       	movw	r30, r14
     498:	80 83       	st	Z, r24
		twi2_packet.length = 1;
     49a:	01 e0       	ldi	r16, 0x01	; 1
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	08 87       	std	Y+8, r16	; 0x08
     4a0:	19 87       	std	Y+9, r17	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	be 01       	movw	r22, r28
     4a6:	80 e8       	ldi	r24, 0x80	; 128
     4a8:	94 e0       	ldi	r25, 0x04	; 4
     4aa:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     4ae:	65 e0       	ldi	r22, 0x05	; 5
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0

		twi_waitUntilReady();
     4b6:	6a df       	rcall	.-300    	; 0x38c <__portable_avr_delay_cycles>
     4b8:	74 df       	rcall	.-280    	; 0x3a2 <twi_waitUntilReady>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
     4ba:	84 e1       	ldi	r24, 0x14	; 20
     4bc:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = GFX_PIXEL_SET;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	f7 01       	movw	r30, r14
     4c2:	80 83       	st	Z, r24
		twi2_packet.length = 1;
     4c4:	08 87       	std	Y+8, r16	; 0x08
     4c6:	19 87       	std	Y+9, r17	; 0x09
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	be 01       	movw	r22, r28
     4cc:	80 e8       	ldi	r24, 0x80	; 128
     4ce:	94 e0       	ldi	r25, 0x04	; 4
     4d0:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     4d4:	65 e0       	ldi	r22, 0x05	; 5
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	57 df       	rcall	.-338    	; 0x38c <__portable_avr_delay_cycles>
	}
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	08 95       	ret

000004ec <twi_start>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     4ec:	60 e4       	ldi	r22, 0x40	; 64
     4ee:	85 e0       	ldi	r24, 0x05	; 5
     4f0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
#else
#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
     4f4:	6a e1       	ldi	r22, 0x1A	; 26
     4f6:	70 e2       	ldi	r23, 0x20	; 32
     4f8:	80 ea       	ldi	r24, 0xA0	; 160
     4fa:	94 e0       	ldi	r25, 0x04	; 4
     4fc:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
     500:	e0 ea       	ldi	r30, 0xA0	; 160
     502:	f4 e0       	ldi	r31, 0x04	; 4
     504:	81 81       	ldd	r24, Z+1	; 0x01
     506:	88 60       	ori	r24, 0x08	; 8
     508:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     50a:	60 e4       	ldi	r22, 0x40	; 64
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
#else
#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
     512:	61 e1       	ldi	r22, 0x11	; 17
     514:	70 e2       	ldi	r23, 0x20	; 32
     516:	80 e8       	ldi	r24, 0x80	; 128
     518:	94 e0       	ldi	r25, 0x04	; 4
     51a:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <twi_master_init>
     51e:	e0 e8       	ldi	r30, 0x80	; 128
     520:	f4 e0       	ldi	r31, 0x04	; 4
     522:	81 81       	ldd	r24, Z+1	; 0x01
     524:	88 60       	ori	r24, 0x08	; 8
     526:	81 83       	std	Z+1, r24	; 0x01
	twi_master_enable(&TWI2_MASTER);
#endif
#endif

	// Give Smart-LCD some time being up and ready
	delay_s(2);
     528:	61 e8       	ldi	r22, 0x81	; 129
     52a:	76 e9       	ldi	r23, 0x96	; 150
     52c:	88 e9       	ldi	r24, 0x98	; 152
     52e:	90 e0       	ldi	r25, 0x00	; 0

	/* Start each TWI channel devices */
	start_twi_onboard();
	start_twi_lcd();
     530:	2d df       	rcall	.-422    	; 0x38c <__portable_avr_delay_cycles>
     532:	8a cf       	rjmp	.-236    	; 0x448 <start_twi_lcd>
     534:	08 95       	ret

00000536 <task_twi_onboard>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void task_twi_onboard(uint32_t now, uint32_t last)
{
     536:	08 95       	ret

00000538 <task_twi_lcd>:

}

/* TWI2 - LCD Port */
void task_twi_lcd(uint32_t now, uint32_t last)
{
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
	if (g_twi2_lcd_version >= 0x11) {
     544:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <g_twi2_lcd_version>
     548:	81 31       	cpi	r24, 0x11	; 17
     54a:	08 f4       	brcc	.+2      	; 0x54e <task_twi_lcd+0x16>
		static uint8_t ofs = 0;

		twi_waitUntilReady();
     54c:	4e c0       	rjmp	.+156    	; 0x5ea <task_twi_lcd+0xb2>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
     54e:	29 df       	rcall	.-430    	; 0x3a2 <twi_waitUntilReady>
     550:	c6 e0       	ldi	r28, 0x06	; 6
     552:	d0 e2       	ldi	r29, 0x20	; 32
     554:	80 e2       	ldi	r24, 0x20	; 32
		twi2_m_data[0] = 16 + ofs;
     556:	89 83       	std	Y+1, r24	; 0x01
     558:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     55c:	80 5f       	subi	r24, 0xF0	; 240
     55e:	03 eb       	ldi	r16, 0xB3	; 179
     560:	12 e2       	ldi	r17, 0x22	; 34
     562:	f8 01       	movw	r30, r16
		twi2_m_data[1] = 16 + ofs;
     564:	80 83       	st	Z, r24
		twi2_packet.length = 2;
     566:	81 83       	std	Z+1, r24	; 0x01
     568:	68 94       	set
     56a:	ee 24       	eor	r14, r14
     56c:	e1 f8       	bld	r14, 1
     56e:	f1 2c       	mov	r15, r1
     570:	e8 86       	std	Y+8, r14	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
     572:	f9 86       	std	Y+9, r15	; 0x09
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	be 01       	movw	r22, r28
     578:	80 e8       	ldi	r24, 0x80	; 128
     57a:	94 e0       	ldi	r25, 0x04	; 4
     57c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     580:	65 e0       	ldi	r22, 0x05	; 5
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
#endif

#if 1
		twi_waitUntilReady();
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	01 df       	rcall	.-510    	; 0x38c <__portable_avr_delay_cycles>
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_CIRC;
     58a:	0b df       	rcall	.-490    	; 0x3a2 <twi_waitUntilReady>
     58c:	88 e3       	ldi	r24, 0x38	; 56
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC;
# endif
		twi2_m_data[0] = 20;
     58e:	89 83       	std	Y+1, r24	; 0x01
     590:	84 e1       	ldi	r24, 0x14	; 20
     592:	f8 01       	movw	r30, r16
		twi2_packet.length = 2;
     594:	80 83       	st	Z, r24
     596:	e8 86       	std	Y+8, r14	; 0x08
     598:	f9 86       	std	Y+9, r15	; 0x09
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	be 01       	movw	r22, r28
     59e:	80 e8       	ldi	r24, 0x80	; 128
     5a0:	94 e0       	ldi	r25, 0x04	; 4
     5a2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     5a6:	65 e0       	ldi	r22, 0x05	; 5
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.length = twi2_m_data[0] + 1;
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
#endif

		if (++ofs > 64) {
     5ae:	ee de       	rcall	.-548    	; 0x38c <__portable_avr_delay_cycles>
     5b0:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end>
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	81 34       	cpi	r24, 0x41	; 65
     5b8:	18 f4       	brcc	.+6      	; 0x5c0 <task_twi_lcd+0x88>
     5ba:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <__data_end>
			ofs = 0;
     5be:	32 c0       	rjmp	.+100    	; 0x624 <task_twi_lcd+0xec>

			twi_waitUntilReady();
     5c0:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <__data_end>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
     5c4:	ee de       	rcall	.-548    	; 0x3a2 <twi_waitUntilReady>
     5c6:	e6 e0       	ldi	r30, 0x06	; 6
     5c8:	f0 e2       	ldi	r31, 0x20	; 32
     5ca:	80 e1       	ldi	r24, 0x10	; 16
			twi2_packet.length = 0;
     5cc:	81 83       	std	Z+1, r24	; 0x01
     5ce:	10 86       	std	Z+8, r1	; 0x08
     5d0:	11 86       	std	Z+9, r1	; 0x09
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	bf 01       	movw	r22, r30
     5d6:	80 e8       	ldi	r24, 0x80	; 128
     5d8:	94 e0       	ldi	r25, 0x04	; 4
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
     5da:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <twi_master_transfer>
     5de:	65 e0       	ldi	r22, 0x05	; 5
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
		}

	} else if (g_twi2_lcd_version == 0x10) {
     5e6:	d2 de       	rcall	.-604    	; 0x38c <__portable_avr_delay_cycles>
     5e8:	1d c0       	rjmp	.+58     	; 0x624 <task_twi_lcd+0xec>
#if 1
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi_waitUntilReady();
     5ea:	80 31       	cpi	r24, 0x10	; 16
     5ec:	d9 f4       	brne	.+54     	; 0x624 <task_twi_lcd+0xec>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
     5ee:	d9 de       	rcall	.-590    	; 0x3a2 <twi_waitUntilReady>
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	f0 e2       	ldi	r31, 0x20	; 32
     5f4:	84 e8       	ldi	r24, 0x84	; 132
		twi2_m_data[0] = 1;
     5f6:	81 83       	std	Z+1, r24	; 0x01
     5f8:	a3 eb       	ldi	r26, 0xB3	; 179
     5fa:	b2 e2       	ldi	r27, 0x22	; 34
     5fc:	81 e0       	ldi	r24, 0x01	; 1
		twi2_m_data[1] = 128;
     5fe:	8c 93       	st	X, r24
     600:	80 e8       	ldi	r24, 0x80	; 128
     602:	11 96       	adiw	r26, 0x01	; 1
		twi2_packet.length = 2;
     604:	8c 93       	st	X, r24
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	80 87       	std	Z+8, r24	; 0x08
     60c:	91 87       	std	Z+9, r25	; 0x09
     60e:	40 e0       	ldi	r20, 0x00	; 0
     610:	bf 01       	movw	r22, r30
     612:	80 e8       	ldi	r24, 0x80	; 128
     614:	94 e0       	ldi	r25, 0x04	; 4
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
     616:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <twi_master_transfer>
     61a:	69 e8       	ldi	r22, 0x89	; 137
     61c:	73 e1       	ldi	r23, 0x13	; 19
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
#endif
	}
}
     622:	b4 de       	rcall	.-664    	; 0x38c <__portable_avr_delay_cycles>
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	08 95       	ret

00000632 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     632:	08 95       	ret

00000634 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     634:	81 15       	cp	r24, r1
     636:	22 e0       	ldi	r18, 0x02	; 2
     638:	92 07       	cpc	r25, r18
     63a:	69 f4       	brne	.+26     	; 0x656 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     63c:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <adca_enable_count>
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	98 0f       	add	r25, r24
     644:	90 93 2a 21 	sts	0x212A, r25	; 0x80212a <adca_enable_count>
     648:	81 11       	cpse	r24, r1
     64a:	14 c0       	rjmp	.+40     	; 0x674 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     64c:	62 e0       	ldi	r22, 0x02	; 2
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <sysclk_enable_module>
     654:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     656:	80 34       	cpi	r24, 0x40	; 64
     658:	92 40       	sbci	r25, 0x02	; 2
     65a:	61 f4       	brne	.+24     	; 0x674 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     65c:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <adcb_enable_count>
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	98 0f       	add	r25, r24
     664:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <adcb_enable_count>
     668:	81 11       	cpse	r24, r1
     66a:	04 c0       	rjmp	.+8      	; 0x674 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     66c:	62 e0       	ldi	r22, 0x02	; 2
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <sysclk_enable_module>
     674:	08 95       	ret

00000676 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     676:	81 15       	cp	r24, r1
     678:	22 e0       	ldi	r18, 0x02	; 2
     67a:	92 07       	cpc	r25, r18
     67c:	61 f4       	brne	.+24     	; 0x696 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     67e:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <adca_enable_count>
     682:	81 50       	subi	r24, 0x01	; 1
     684:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <adca_enable_count>
     688:	81 11       	cpse	r24, r1
     68a:	13 c0       	rjmp	.+38     	; 0x6b2 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     68c:	62 e0       	ldi	r22, 0x02	; 2
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <sysclk_disable_module>
     694:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     696:	80 34       	cpi	r24, 0x40	; 64
     698:	92 40       	sbci	r25, 0x02	; 2
     69a:	59 f4       	brne	.+22     	; 0x6b2 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     69c:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <adcb_enable_count>
     6a0:	81 50       	subi	r24, 0x01	; 1
     6a2:	80 93 29 21 	sts	0x2129, r24	; 0x802129 <adcb_enable_count>
     6a6:	81 11       	cpse	r24, r1
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     6aa:	62 e0       	ldi	r22, 0x02	; 2
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <sysclk_disable_module>
     6b2:	08 95       	ret

000006b4 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	0b b6       	in	r0, 0x3b	; 59
     6c0:	0f 92       	push	r0
     6c2:	2f 93       	push	r18
     6c4:	3f 93       	push	r19
     6c6:	4f 93       	push	r20
     6c8:	5f 93       	push	r21
     6ca:	6f 93       	push	r22
     6cc:	7f 93       	push	r23
     6ce:	8f 93       	push	r24
     6d0:	9f 93       	push	r25
     6d2:	af 93       	push	r26
     6d4:	bf 93       	push	r27
     6d6:	ef 93       	push	r30
     6d8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     6da:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     6de:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     6e2:	e0 91 fb 23 	lds	r30, 0x23FB	; 0x8023fb <adca_callback>
     6e6:	f0 91 fc 23 	lds	r31, 0x23FC	; 0x8023fc <adca_callback+0x1>
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	19 95       	eicall
}
     6f2:	ff 91       	pop	r31
     6f4:	ef 91       	pop	r30
     6f6:	bf 91       	pop	r27
     6f8:	af 91       	pop	r26
     6fa:	9f 91       	pop	r25
     6fc:	8f 91       	pop	r24
     6fe:	7f 91       	pop	r23
     700:	6f 91       	pop	r22
     702:	5f 91       	pop	r21
     704:	4f 91       	pop	r20
     706:	3f 91       	pop	r19
     708:	2f 91       	pop	r18
     70a:	0f 90       	pop	r0
     70c:	0b be       	out	0x3b, r0	; 59
     70e:	0f 90       	pop	r0
     710:	0f be       	out	0x3f, r0	; 63
     712:	0f 90       	pop	r0
     714:	1f 90       	pop	r1
     716:	18 95       	reti

00000718 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     718:	1f 92       	push	r1
     71a:	0f 92       	push	r0
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	0f 92       	push	r0
     720:	11 24       	eor	r1, r1
     722:	0b b6       	in	r0, 0x3b	; 59
     724:	0f 92       	push	r0
     726:	2f 93       	push	r18
     728:	3f 93       	push	r19
     72a:	4f 93       	push	r20
     72c:	5f 93       	push	r21
     72e:	6f 93       	push	r22
     730:	7f 93       	push	r23
     732:	8f 93       	push	r24
     734:	9f 93       	push	r25
     736:	af 93       	push	r26
     738:	bf 93       	push	r27
     73a:	ef 93       	push	r30
     73c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     73e:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     742:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     746:	e0 91 fb 23 	lds	r30, 0x23FB	; 0x8023fb <adca_callback>
     74a:	f0 91 fc 23 	lds	r31, 0x23FC	; 0x8023fc <adca_callback+0x1>
     74e:	62 e0       	ldi	r22, 0x02	; 2
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	19 95       	eicall
}
     756:	ff 91       	pop	r31
     758:	ef 91       	pop	r30
     75a:	bf 91       	pop	r27
     75c:	af 91       	pop	r26
     75e:	9f 91       	pop	r25
     760:	8f 91       	pop	r24
     762:	7f 91       	pop	r23
     764:	6f 91       	pop	r22
     766:	5f 91       	pop	r21
     768:	4f 91       	pop	r20
     76a:	3f 91       	pop	r19
     76c:	2f 91       	pop	r18
     76e:	0f 90       	pop	r0
     770:	0b be       	out	0x3b, r0	; 59
     772:	0f 90       	pop	r0
     774:	0f be       	out	0x3f, r0	; 63
     776:	0f 90       	pop	r0
     778:	1f 90       	pop	r1
     77a:	18 95       	reti

0000077c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
     786:	0b b6       	in	r0, 0x3b	; 59
     788:	0f 92       	push	r0
     78a:	2f 93       	push	r18
     78c:	3f 93       	push	r19
     78e:	4f 93       	push	r20
     790:	5f 93       	push	r21
     792:	6f 93       	push	r22
     794:	7f 93       	push	r23
     796:	8f 93       	push	r24
     798:	9f 93       	push	r25
     79a:	af 93       	push	r26
     79c:	bf 93       	push	r27
     79e:	ef 93       	push	r30
     7a0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     7a2:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     7a6:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     7aa:	e0 91 fb 23 	lds	r30, 0x23FB	; 0x8023fb <adca_callback>
     7ae:	f0 91 fc 23 	lds	r31, 0x23FC	; 0x8023fc <adca_callback+0x1>
     7b2:	64 e0       	ldi	r22, 0x04	; 4
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	19 95       	eicall
}
     7ba:	ff 91       	pop	r31
     7bc:	ef 91       	pop	r30
     7be:	bf 91       	pop	r27
     7c0:	af 91       	pop	r26
     7c2:	9f 91       	pop	r25
     7c4:	8f 91       	pop	r24
     7c6:	7f 91       	pop	r23
     7c8:	6f 91       	pop	r22
     7ca:	5f 91       	pop	r21
     7cc:	4f 91       	pop	r20
     7ce:	3f 91       	pop	r19
     7d0:	2f 91       	pop	r18
     7d2:	0f 90       	pop	r0
     7d4:	0b be       	out	0x3b, r0	; 59
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	1f 90       	pop	r1
     7de:	18 95       	reti

000007e0 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     7e0:	1f 92       	push	r1
     7e2:	0f 92       	push	r0
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	0f 92       	push	r0
     7e8:	11 24       	eor	r1, r1
     7ea:	0b b6       	in	r0, 0x3b	; 59
     7ec:	0f 92       	push	r0
     7ee:	2f 93       	push	r18
     7f0:	3f 93       	push	r19
     7f2:	4f 93       	push	r20
     7f4:	5f 93       	push	r21
     7f6:	6f 93       	push	r22
     7f8:	7f 93       	push	r23
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	af 93       	push	r26
     800:	bf 93       	push	r27
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     806:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     80a:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     80e:	e0 91 fb 23 	lds	r30, 0x23FB	; 0x8023fb <adca_callback>
     812:	f0 91 fc 23 	lds	r31, 0x23FC	; 0x8023fc <adca_callback+0x1>
     816:	68 e0       	ldi	r22, 0x08	; 8
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	19 95       	eicall
}
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	bf 91       	pop	r27
     824:	af 91       	pop	r26
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	7f 91       	pop	r23
     82c:	6f 91       	pop	r22
     82e:	5f 91       	pop	r21
     830:	4f 91       	pop	r20
     832:	3f 91       	pop	r19
     834:	2f 91       	pop	r18
     836:	0f 90       	pop	r0
     838:	0b be       	out	0x3b, r0	; 59
     83a:	0f 90       	pop	r0
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	0f 90       	pop	r0
     840:	1f 90       	pop	r1
     842:	18 95       	reti

00000844 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     844:	1f 92       	push	r1
     846:	0f 92       	push	r0
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	0f 92       	push	r0
     84c:	11 24       	eor	r1, r1
     84e:	0b b6       	in	r0, 0x3b	; 59
     850:	0f 92       	push	r0
     852:	2f 93       	push	r18
     854:	3f 93       	push	r19
     856:	4f 93       	push	r20
     858:	5f 93       	push	r21
     85a:	6f 93       	push	r22
     85c:	7f 93       	push	r23
     85e:	8f 93       	push	r24
     860:	9f 93       	push	r25
     862:	af 93       	push	r26
     864:	bf 93       	push	r27
     866:	ef 93       	push	r30
     868:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     86a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     86e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     872:	e0 91 f9 23 	lds	r30, 0x23F9	; 0x8023f9 <adcb_callback>
     876:	f0 91 fa 23 	lds	r31, 0x23FA	; 0x8023fa <adcb_callback+0x1>
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	80 e4       	ldi	r24, 0x40	; 64
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	19 95       	eicall
}
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	7f 91       	pop	r23
     890:	6f 91       	pop	r22
     892:	5f 91       	pop	r21
     894:	4f 91       	pop	r20
     896:	3f 91       	pop	r19
     898:	2f 91       	pop	r18
     89a:	0f 90       	pop	r0
     89c:	0b be       	out	0x3b, r0	; 59
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	0b b6       	in	r0, 0x3b	; 59
     8b4:	0f 92       	push	r0
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     8ce:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     8d2:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     8d6:	e0 91 f9 23 	lds	r30, 0x23F9	; 0x8023f9 <adcb_callback>
     8da:	f0 91 fa 23 	lds	r31, 0x23FA	; 0x8023fa <adcb_callback+0x1>
     8de:	62 e0       	ldi	r22, 0x02	; 2
     8e0:	80 e4       	ldi	r24, 0x40	; 64
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	19 95       	eicall
}
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0b be       	out	0x3b, r0	; 59
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	0b b6       	in	r0, 0x3b	; 59
     918:	0f 92       	push	r0
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     932:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     936:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     93a:	e0 91 f9 23 	lds	r30, 0x23F9	; 0x8023f9 <adcb_callback>
     93e:	f0 91 fa 23 	lds	r31, 0x23FA	; 0x8023fa <adcb_callback+0x1>
     942:	64 e0       	ldi	r22, 0x04	; 4
     944:	80 e4       	ldi	r24, 0x40	; 64
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	19 95       	eicall
}
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	7f 91       	pop	r23
     958:	6f 91       	pop	r22
     95a:	5f 91       	pop	r21
     95c:	4f 91       	pop	r20
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	0f 90       	pop	r0
     964:	0b be       	out	0x3b, r0	; 59
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f 90       	pop	r0
     96c:	1f 90       	pop	r1
     96e:	18 95       	reti

00000970 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	0b b6       	in	r0, 0x3b	; 59
     97c:	0f 92       	push	r0
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     996:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     99a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     99e:	e0 91 f9 23 	lds	r30, 0x23F9	; 0x8023f9 <adcb_callback>
     9a2:	f0 91 fa 23 	lds	r31, 0x23FA	; 0x8023fa <adcb_callback+0x1>
     9a6:	68 e0       	ldi	r22, 0x08	; 8
     9a8:	80 e4       	ldi	r24, 0x40	; 64
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	19 95       	eicall
}
     9ae:	ff 91       	pop	r31
     9b0:	ef 91       	pop	r30
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0b be       	out	0x3b, r0	; 59
     9ca:	0f 90       	pop	r0
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	0f 90       	pop	r0
     9d0:	1f 90       	pop	r1
     9d2:	18 95       	reti

000009d4 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     9d4:	bf 92       	push	r11
     9d6:	cf 92       	push	r12
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	1f 92       	push	r1
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	8c 01       	movw	r16, r24
     9ee:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     9f0:	81 15       	cp	r24, r1
     9f2:	22 e0       	ldi	r18, 0x02	; 2
     9f4:	92 07       	cpc	r25, r18
     9f6:	81 f4       	brne	.+32     	; 0xa18 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     9f8:	61 e2       	ldi	r22, 0x21	; 33
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     a02:	c8 2e       	mov	r12, r24
     a04:	d1 2c       	mov	r13, r1
     a06:	60 e2       	ldi	r22, 0x20	; 32
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     a10:	dc 2c       	mov	r13, r12
     a12:	cc 24       	eor	r12, r12
     a14:	c8 2a       	or	r12, r24
     a16:	12 c0       	rjmp	.+36     	; 0xa3c <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	92 40       	sbci	r25, 0x02	; 2
     a1c:	d1 f5       	brne	.+116    	; 0xa92 <adc_write_configuration+0xbe>
     a1e:	65 e2       	ldi	r22, 0x25	; 37
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     a28:	c8 2e       	mov	r12, r24
     a2a:	d1 2c       	mov	r13, r1
     a2c:	64 e2       	ldi	r22, 0x24	; 36
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     a36:	dc 2c       	mov	r13, r12
     a38:	cc 24       	eor	r12, r12
     a3a:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a3c:	8f b7       	in	r24, 0x3f	; 63
     a3e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     a40:	f8 94       	cli
	return flags;
     a42:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     a44:	c8 01       	movw	r24, r16
     a46:	f6 dd       	rcall	.-1044   	; 0x634 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     a48:	f8 01       	movw	r30, r16
     a4a:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	90 83       	st	Z, r25
	adc->CAL = cal;
     a50:	c4 86       	std	Z+12, r12	; 0x0c
     a52:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     a54:	f7 01       	movw	r30, r14
     a56:	25 81       	ldd	r18, Z+5	; 0x05
     a58:	36 81       	ldd	r19, Z+6	; 0x06
     a5a:	f8 01       	movw	r30, r16
     a5c:	20 8f       	std	Z+24, r18	; 0x18
     a5e:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     a60:	f7 01       	movw	r30, r14
     a62:	92 81       	ldd	r25, Z+2	; 0x02
     a64:	f8 01       	movw	r30, r16
     a66:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     a68:	f7 01       	movw	r30, r14
     a6a:	94 81       	ldd	r25, Z+4	; 0x04
     a6c:	f8 01       	movw	r30, r16
     a6e:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     a70:	f7 01       	movw	r30, r14
     a72:	93 81       	ldd	r25, Z+3	; 0x03
     a74:	f8 01       	movw	r30, r16
     a76:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     a78:	f7 01       	movw	r30, r14
     a7a:	91 81       	ldd	r25, Z+1	; 0x01
     a7c:	f8 01       	movw	r30, r16
     a7e:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     a80:	81 70       	andi	r24, 0x01	; 1
     a82:	f7 01       	movw	r30, r14
     a84:	90 81       	ld	r25, Z
     a86:	89 2b       	or	r24, r25
     a88:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     a8a:	80 83       	st	Z, r24
     a8c:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a8e:	f3 dd       	rcall	.-1050   	; 0x676 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     a90:	bf be       	out	0x3f, r11	; 63
     a92:	0f 90       	pop	r0
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	08 95       	ret

00000aa8 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	1f 92       	push	r1
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	8c 01       	movw	r16, r24
     abe:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ac0:	8f b7       	in	r24, 0x3f	; 63
     ac2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ac4:	f8 94       	cli
	return flags;
     ac6:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     ac8:	c8 01       	movw	r24, r16
     aca:	b4 dd       	rcall	.-1176   	; 0x634 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     acc:	f8 01       	movw	r30, r16
     ace:	80 81       	ld	r24, Z
     ad0:	80 7c       	andi	r24, 0xC0	; 192
     ad2:	f7 01       	movw	r30, r14
     ad4:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     ad6:	f8 01       	movw	r30, r16
     ad8:	80 8d       	ldd	r24, Z+24	; 0x18
     ada:	91 8d       	ldd	r25, Z+25	; 0x19
     adc:	f7 01       	movw	r30, r14
     ade:	85 83       	std	Z+5, r24	; 0x05
     ae0:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     ae2:	f8 01       	movw	r30, r16
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	f7 01       	movw	r30, r14
     ae8:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     aea:	f8 01       	movw	r30, r16
     aec:	84 81       	ldd	r24, Z+4	; 0x04
     aee:	f7 01       	movw	r30, r14
     af0:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     af2:	f8 01       	movw	r30, r16
     af4:	83 81       	ldd	r24, Z+3	; 0x03
     af6:	f7 01       	movw	r30, r14
     af8:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     afa:	f8 01       	movw	r30, r16
     afc:	81 81       	ldd	r24, Z+1	; 0x01
     afe:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     b00:	81 83       	std	Z+1, r24	; 0x01
     b02:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b04:	b8 dd       	rcall	.-1168   	; 0x676 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     b06:	df be       	out	0x3f, r13	; 63
     b08:	0f 90       	pop	r0
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	08 95       	ret

00000b1a <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	1f 92       	push	r1
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	6c 01       	movw	r12, r24
     b36:	b6 2e       	mov	r11, r22
     b38:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     b3a:	86 2f       	mov	r24, r22
     b3c:	83 70       	andi	r24, 0x03	; 3
     b3e:	29 f4       	brne	.+10     	; 0xb4a <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     b40:	96 2f       	mov	r25, r22
     b42:	96 95       	lsr	r25
     b44:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     b4a:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     b4e:	90 ff       	sbrs	r25, 0
		index++;
     b50:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     b52:	86 01       	movw	r16, r12
     b54:	00 5e       	subi	r16, 0xE0	; 224
     b56:	1f 4f       	sbci	r17, 0xFF	; 255
     b58:	98 e0       	ldi	r25, 0x08	; 8
     b5a:	89 9f       	mul	r24, r25
     b5c:	00 0d       	add	r16, r0
     b5e:	11 1d       	adc	r17, r1
     b60:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b62:	8f b7       	in	r24, 0x3f	; 63
     b64:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b66:	f8 94       	cli
	return flags;
     b68:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     b6a:	c6 01       	movw	r24, r12
     b6c:	63 dd       	rcall	.-1338   	; 0x634 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     b6e:	f7 01       	movw	r30, r14
     b70:	80 81       	ld	r24, Z
     b72:	f8 01       	movw	r30, r16
     b74:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     b76:	f7 01       	movw	r30, r14
     b78:	82 81       	ldd	r24, Z+2	; 0x02
     b7a:	f8 01       	movw	r30, r16
     b7c:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     b7e:	f7 01       	movw	r30, r14
     b80:	81 81       	ldd	r24, Z+1	; 0x01
     b82:	f8 01       	movw	r30, r16
     b84:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     b86:	b0 fe       	sbrs	r11, 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     b8a:	f7 01       	movw	r30, r14
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     b90:	86 83       	std	Z+6, r24	; 0x06
     b92:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b94:	70 dd       	rcall	.-1312   	; 0x676 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     b96:	af be       	out	0x3f, r10	; 63
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
     baa:	bf 90       	pop	r11
     bac:	af 90       	pop	r10
     bae:	08 95       	ret

00000bb0 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	1f 92       	push	r1
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	6c 01       	movw	r12, r24
     bcc:	b6 2e       	mov	r11, r22
     bce:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     bd0:	86 2f       	mov	r24, r22
     bd2:	83 70       	andi	r24, 0x03	; 3
     bd4:	29 f4       	brne	.+10     	; 0xbe0 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     bd6:	96 2f       	mov	r25, r22
     bd8:	96 95       	lsr	r25
     bda:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     be0:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     be2:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     be4:	90 ff       	sbrs	r25, 0
		index++;
     be6:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     be8:	86 01       	movw	r16, r12
     bea:	00 5e       	subi	r16, 0xE0	; 224
     bec:	1f 4f       	sbci	r17, 0xFF	; 255
     bee:	98 e0       	ldi	r25, 0x08	; 8
     bf0:	89 9f       	mul	r24, r25
     bf2:	00 0d       	add	r16, r0
     bf4:	11 1d       	adc	r17, r1
     bf6:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     bf8:	8f b7       	in	r24, 0x3f	; 63
     bfa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     bfc:	f8 94       	cli
	return flags;
     bfe:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     c00:	c6 01       	movw	r24, r12
     c02:	18 dd       	rcall	.-1488   	; 0x634 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     c04:	f8 01       	movw	r30, r16
     c06:	80 81       	ld	r24, Z
     c08:	f7 01       	movw	r30, r14
     c0a:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     c0c:	f8 01       	movw	r30, r16
     c0e:	82 81       	ldd	r24, Z+2	; 0x02
     c10:	f7 01       	movw	r30, r14
     c12:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     c14:	f8 01       	movw	r30, r16
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	f7 01       	movw	r30, r14
     c1a:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     c1c:	b0 fe       	sbrs	r11, 0
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     c20:	f8 01       	movw	r30, r16
     c22:	86 81       	ldd	r24, Z+6	; 0x06
     c24:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     c26:	83 83       	std	Z+3, r24	; 0x03
     c28:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c2a:	25 dd       	rcall	.-1462   	; 0x676 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     c2c:	af be       	out	0x3f, r10	; 63
     c2e:	0f 90       	pop	r0
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	cf 90       	pop	r12
     c40:	bf 90       	pop	r11
     c42:	af 90       	pop	r10
     c44:	08 95       	ret

00000c46 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
     c46:	80 32       	cpi	r24, 0x20	; 32
     c48:	93 40       	sbci	r25, 0x03	; 3
     c4a:	61 f4       	brne	.+24     	; 0xc64 <dac_enable_clock+0x1e>
     c4c:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <dacb_enable_count>
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	98 0f       	add	r25, r24
     c54:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <dacb_enable_count>
     c58:	81 11       	cpse	r24, r1
     c5a:	04 c0       	rjmp	.+8      	; 0xc64 <dac_enable_clock+0x1e>
     c5c:	64 e0       	ldi	r22, 0x04	; 4
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <sysclk_enable_module>
     c64:	08 95       	ret

00000c66 <dac_disable_clock>:
     c66:	80 32       	cpi	r24, 0x20	; 32
     c68:	93 40       	sbci	r25, 0x03	; 3
     c6a:	59 f4       	brne	.+22     	; 0xc82 <dac_disable_clock+0x1c>
     c6c:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <dacb_enable_count>
     c70:	81 50       	subi	r24, 0x01	; 1
     c72:	80 93 2b 21 	sts	0x212B, r24	; 0x80212b <dacb_enable_count>
     c76:	81 11       	cpse	r24, r1
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <dac_disable_clock+0x1c>
     c7a:	64 e0       	ldi	r22, 0x04	; 4
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <sysclk_disable_module>
     c82:	08 95       	ret

00000c84 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
     c84:	9f 92       	push	r9
     c86:	af 92       	push	r10
     c88:	bf 92       	push	r11
     c8a:	cf 92       	push	r12
     c8c:	df 92       	push	r13
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	1f 92       	push	r1
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
     ca0:	80 32       	cpi	r24, 0x20	; 32
     ca2:	23 e0       	ldi	r18, 0x03	; 3
     ca4:	92 07       	cpc	r25, r18
     ca6:	09 f0       	breq	.+2      	; 0xcaa <dac_write_configuration+0x26>
     ca8:	3c c0       	rjmp	.+120    	; 0xd22 <dac_write_configuration+0x9e>
     caa:	7b 01       	movw	r14, r22
     cac:	8c 01       	movw	r16, r24
     cae:	63 e3       	ldi	r22, 0x33	; 51
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
     cb8:	98 2e       	mov	r9, r24
     cba:	62 e3       	ldi	r22, 0x32	; 50
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
     cc4:	a8 2e       	mov	r10, r24
     cc6:	67 e3       	ldi	r22, 0x37	; 55
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
     cd0:	b8 2e       	mov	r11, r24
     cd2:	66 e3       	ldi	r22, 0x36	; 54
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
     cdc:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cde:	8f b7       	in	r24, 0x3f	; 63
     ce0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ce2:	f8 94       	cli
	return flags;
     ce4:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     ce6:	c8 01       	movw	r24, r16
     ce8:	ae df       	rcall	.-164    	; 0xc46 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
     cea:	f8 01       	movw	r30, r16
     cec:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
     cee:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
     cf0:	f7 01       	movw	r30, r14
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	f8 01       	movw	r30, r16
     cf6:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
     cf8:	f7 01       	movw	r30, r14
     cfa:	92 81       	ldd	r25, Z+2	; 0x02
     cfc:	f8 01       	movw	r30, r16
     cfe:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
     d00:	f7 01       	movw	r30, r14
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	f8 01       	movw	r30, r16
     d06:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
     d08:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
     d0a:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
     d0c:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
     d0e:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
     d10:	81 70       	andi	r24, 0x01	; 1
     d12:	f7 01       	movw	r30, r14
     d14:	90 81       	ld	r25, Z
     d16:	89 2b       	or	r24, r25
     d18:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
     d1a:	80 83       	st	Z, r24
     d1c:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d1e:	a3 df       	rcall	.-186    	; 0xc66 <dac_disable_clock>
	cpu_irq_restore(flags);
}
     d20:	df be       	out	0x3f, r13	; 63
     d22:	0f 90       	pop	r0
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	bf 90       	pop	r11
     d36:	af 90       	pop	r10
     d38:	9f 90       	pop	r9
     d3a:	08 95       	ret

00000d3c <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
     d3c:	df 92       	push	r13
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	1f 92       	push	r1
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	8c 01       	movw	r16, r24
     d52:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d54:	8f b7       	in	r24, 0x3f	; 63
     d56:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d58:	f8 94       	cli
	return flags;
     d5a:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     d5c:	c8 01       	movw	r24, r16
     d5e:	73 df       	rcall	.-282    	; 0xc46 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
     d60:	f8 01       	movw	r30, r16
     d62:	80 81       	ld	r24, Z
     d64:	8e 7f       	andi	r24, 0xFE	; 254
     d66:	f7 01       	movw	r30, r14
     d68:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
     d6a:	f8 01       	movw	r30, r16
     d6c:	81 81       	ldd	r24, Z+1	; 0x01
     d6e:	f7 01       	movw	r30, r14
     d70:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
     d72:	f8 01       	movw	r30, r16
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	f7 01       	movw	r30, r14
     d78:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
     d7a:	f8 01       	movw	r30, r16
     d7c:	83 81       	ldd	r24, Z+3	; 0x03
     d7e:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
     d80:	83 83       	std	Z+3, r24	; 0x03
     d82:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d84:	70 df       	rcall	.-288    	; 0xc66 <dac_disable_clock>
	cpu_irq_restore(flags);
}
     d86:	df be       	out	0x3f, r13	; 63
     d88:	0f 90       	pop	r0
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	08 95       	ret

00000d9a <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	0b b6       	in	r0, 0x3b	; 59
     da6:	0f 92       	push	r0
     da8:	2f 93       	push	r18
     daa:	3f 93       	push	r19
     dac:	4f 93       	push	r20
     dae:	5f 93       	push	r21
     db0:	6f 93       	push	r22
     db2:	7f 93       	push	r23
     db4:	8f 93       	push	r24
     db6:	9f 93       	push	r25
     db8:	af 93       	push	r26
     dba:	bf 93       	push	r27
     dbc:	ef 93       	push	r30
     dbe:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     dc0:	e0 91 72 21 	lds	r30, 0x2172	; 0x802172 <tc_tcc0_ovf_callback>
     dc4:	f0 91 73 21 	lds	r31, 0x2173	; 0x802173 <tc_tcc0_ovf_callback+0x1>
     dc8:	30 97       	sbiw	r30, 0x00	; 0
     dca:	09 f0       	breq	.+2      	; 0xdce <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     dcc:	19 95       	eicall
	}
}
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	4f 91       	pop	r20
     de2:	3f 91       	pop	r19
     de4:	2f 91       	pop	r18
     de6:	0f 90       	pop	r0
     de8:	0b be       	out	0x3b, r0	; 59
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	0b b6       	in	r0, 0x3b	; 59
     e00:	0f 92       	push	r0
     e02:	2f 93       	push	r18
     e04:	3f 93       	push	r19
     e06:	4f 93       	push	r20
     e08:	5f 93       	push	r21
     e0a:	6f 93       	push	r22
     e0c:	7f 93       	push	r23
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
     e12:	af 93       	push	r26
     e14:	bf 93       	push	r27
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     e1a:	e0 91 70 21 	lds	r30, 0x2170	; 0x802170 <tc_tcc0_err_callback>
     e1e:	f0 91 71 21 	lds	r31, 0x2171	; 0x802171 <tc_tcc0_err_callback+0x1>
     e22:	30 97       	sbiw	r30, 0x00	; 0
     e24:	09 f0       	breq	.+2      	; 0xe28 <__vector_15+0x34>
		tc_tcc0_err_callback();
     e26:	19 95       	eicall
	}
}
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	7f 91       	pop	r23
     e36:	6f 91       	pop	r22
     e38:	5f 91       	pop	r21
     e3a:	4f 91       	pop	r20
     e3c:	3f 91       	pop	r19
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0b be       	out	0x3b, r0	; 59
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	0b b6       	in	r0, 0x3b	; 59
     e5a:	0f 92       	push	r0
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     e74:	e0 91 6e 21 	lds	r30, 0x216E	; 0x80216e <tc_tcc0_cca_callback>
     e78:	f0 91 6f 21 	lds	r31, 0x216F	; 0x80216f <tc_tcc0_cca_callback+0x1>
     e7c:	30 97       	sbiw	r30, 0x00	; 0
     e7e:	09 f0       	breq	.+2      	; 0xe82 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     e80:	19 95       	eicall
	}
}
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	bf 91       	pop	r27
     e88:	af 91       	pop	r26
     e8a:	9f 91       	pop	r25
     e8c:	8f 91       	pop	r24
     e8e:	7f 91       	pop	r23
     e90:	6f 91       	pop	r22
     e92:	5f 91       	pop	r21
     e94:	4f 91       	pop	r20
     e96:	3f 91       	pop	r19
     e98:	2f 91       	pop	r18
     e9a:	0f 90       	pop	r0
     e9c:	0b be       	out	0x3b, r0	; 59
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	0b b6       	in	r0, 0x3b	; 59
     eb4:	0f 92       	push	r0
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	4f 93       	push	r20
     ebc:	5f 93       	push	r21
     ebe:	6f 93       	push	r22
     ec0:	7f 93       	push	r23
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	af 93       	push	r26
     ec8:	bf 93       	push	r27
     eca:	ef 93       	push	r30
     ecc:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     ece:	e0 91 6c 21 	lds	r30, 0x216C	; 0x80216c <tc_tcc0_ccb_callback>
     ed2:	f0 91 6d 21 	lds	r31, 0x216D	; 0x80216d <tc_tcc0_ccb_callback+0x1>
     ed6:	30 97       	sbiw	r30, 0x00	; 0
     ed8:	09 f0       	breq	.+2      	; 0xedc <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     eda:	19 95       	eicall
	}
}
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0b be       	out	0x3b, r0	; 59
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	0b b6       	in	r0, 0x3b	; 59
     f0e:	0f 92       	push	r0
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     f28:	e0 91 6a 21 	lds	r30, 0x216A	; 0x80216a <tc_tcc0_ccc_callback>
     f2c:	f0 91 6b 21 	lds	r31, 0x216B	; 0x80216b <tc_tcc0_ccc_callback+0x1>
     f30:	30 97       	sbiw	r30, 0x00	; 0
     f32:	09 f0       	breq	.+2      	; 0xf36 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     f34:	19 95       	eicall
	}
}
     f36:	ff 91       	pop	r31
     f38:	ef 91       	pop	r30
     f3a:	bf 91       	pop	r27
     f3c:	af 91       	pop	r26
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	7f 91       	pop	r23
     f44:	6f 91       	pop	r22
     f46:	5f 91       	pop	r21
     f48:	4f 91       	pop	r20
     f4a:	3f 91       	pop	r19
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	0b be       	out	0x3b, r0	; 59
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	0b b6       	in	r0, 0x3b	; 59
     f68:	0f 92       	push	r0
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     f82:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <tc_tcc0_ccd_callback>
     f86:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <tc_tcc0_ccd_callback+0x1>
     f8a:	30 97       	sbiw	r30, 0x00	; 0
     f8c:	09 f0       	breq	.+2      	; 0xf90 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     f8e:	19 95       	eicall
	}
}
     f90:	ff 91       	pop	r31
     f92:	ef 91       	pop	r30
     f94:	bf 91       	pop	r27
     f96:	af 91       	pop	r26
     f98:	9f 91       	pop	r25
     f9a:	8f 91       	pop	r24
     f9c:	7f 91       	pop	r23
     f9e:	6f 91       	pop	r22
     fa0:	5f 91       	pop	r21
     fa2:	4f 91       	pop	r20
     fa4:	3f 91       	pop	r19
     fa6:	2f 91       	pop	r18
     fa8:	0f 90       	pop	r0
     faa:	0b be       	out	0x3b, r0	; 59
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	0b b6       	in	r0, 0x3b	; 59
     fc2:	0f 92       	push	r0
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     fdc:	e0 91 66 21 	lds	r30, 0x2166	; 0x802166 <tc_tcc1_ovf_callback>
     fe0:	f0 91 67 21 	lds	r31, 0x2167	; 0x802167 <tc_tcc1_ovf_callback+0x1>
     fe4:	30 97       	sbiw	r30, 0x00	; 0
     fe6:	09 f0       	breq	.+2      	; 0xfea <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     fe8:	19 95       	eicall
	}
}
     fea:	ff 91       	pop	r31
     fec:	ef 91       	pop	r30
     fee:	bf 91       	pop	r27
     ff0:	af 91       	pop	r26
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	7f 91       	pop	r23
     ff8:	6f 91       	pop	r22
     ffa:	5f 91       	pop	r21
     ffc:	4f 91       	pop	r20
     ffe:	3f 91       	pop	r19
    1000:	2f 91       	pop	r18
    1002:	0f 90       	pop	r0
    1004:	0b be       	out	0x3b, r0	; 59
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	0f 90       	pop	r0
    100c:	1f 90       	pop	r1
    100e:	18 95       	reti

00001010 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	0b b6       	in	r0, 0x3b	; 59
    101c:	0f 92       	push	r0
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1036:	e0 91 64 21 	lds	r30, 0x2164	; 0x802164 <tc_tcc1_err_callback>
    103a:	f0 91 65 21 	lds	r31, 0x2165	; 0x802165 <tc_tcc1_err_callback+0x1>
    103e:	30 97       	sbiw	r30, 0x00	; 0
    1040:	09 f0       	breq	.+2      	; 0x1044 <__vector_21+0x34>
		tc_tcc1_err_callback();
    1042:	19 95       	eicall
	}
}
    1044:	ff 91       	pop	r31
    1046:	ef 91       	pop	r30
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0b be       	out	0x3b, r0	; 59
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	0b b6       	in	r0, 0x3b	; 59
    1076:	0f 92       	push	r0
    1078:	2f 93       	push	r18
    107a:	3f 93       	push	r19
    107c:	4f 93       	push	r20
    107e:	5f 93       	push	r21
    1080:	6f 93       	push	r22
    1082:	7f 93       	push	r23
    1084:	8f 93       	push	r24
    1086:	9f 93       	push	r25
    1088:	af 93       	push	r26
    108a:	bf 93       	push	r27
    108c:	ef 93       	push	r30
    108e:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1090:	e0 91 62 21 	lds	r30, 0x2162	; 0x802162 <tc_tcc1_cca_callback>
    1094:	f0 91 63 21 	lds	r31, 0x2163	; 0x802163 <tc_tcc1_cca_callback+0x1>
    1098:	30 97       	sbiw	r30, 0x00	; 0
    109a:	09 f0       	breq	.+2      	; 0x109e <__vector_22+0x34>
		tc_tcc1_cca_callback();
    109c:	19 95       	eicall
	}
}
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0b be       	out	0x3b, r0	; 59
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 90       	pop	r0
    10c0:	1f 90       	pop	r1
    10c2:	18 95       	reti

000010c4 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	0b b6       	in	r0, 0x3b	; 59
    10d0:	0f 92       	push	r0
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    10ea:	e0 91 60 21 	lds	r30, 0x2160	; 0x802160 <tc_tcc1_ccb_callback>
    10ee:	f0 91 61 21 	lds	r31, 0x2161	; 0x802161 <tc_tcc1_ccb_callback+0x1>
    10f2:	30 97       	sbiw	r30, 0x00	; 0
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    10f6:	19 95       	eicall
	}
}
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0b be       	out	0x3b, r0	; 59
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    111e:	1f 92       	push	r1
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	0f 92       	push	r0
    1126:	11 24       	eor	r1, r1
    1128:	0b b6       	in	r0, 0x3b	; 59
    112a:	0f 92       	push	r0
    112c:	2f 93       	push	r18
    112e:	3f 93       	push	r19
    1130:	4f 93       	push	r20
    1132:	5f 93       	push	r21
    1134:	6f 93       	push	r22
    1136:	7f 93       	push	r23
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	ef 93       	push	r30
    1142:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1144:	e0 91 5e 21 	lds	r30, 0x215E	; 0x80215e <tc_tcd0_ovf_callback>
    1148:	f0 91 5f 21 	lds	r31, 0x215F	; 0x80215f <tc_tcd0_ovf_callback+0x1>
    114c:	30 97       	sbiw	r30, 0x00	; 0
    114e:	09 f0       	breq	.+2      	; 0x1152 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    1150:	19 95       	eicall
	}
}
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0b be       	out	0x3b, r0	; 59
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1178:	1f 92       	push	r1
    117a:	0f 92       	push	r0
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	0f 92       	push	r0
    1180:	11 24       	eor	r1, r1
    1182:	0b b6       	in	r0, 0x3b	; 59
    1184:	0f 92       	push	r0
    1186:	2f 93       	push	r18
    1188:	3f 93       	push	r19
    118a:	4f 93       	push	r20
    118c:	5f 93       	push	r21
    118e:	6f 93       	push	r22
    1190:	7f 93       	push	r23
    1192:	8f 93       	push	r24
    1194:	9f 93       	push	r25
    1196:	af 93       	push	r26
    1198:	bf 93       	push	r27
    119a:	ef 93       	push	r30
    119c:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    119e:	e0 91 5c 21 	lds	r30, 0x215C	; 0x80215c <tc_tcd0_err_callback>
    11a2:	f0 91 5d 21 	lds	r31, 0x215D	; 0x80215d <tc_tcd0_err_callback+0x1>
    11a6:	30 97       	sbiw	r30, 0x00	; 0
    11a8:	09 f0       	breq	.+2      	; 0x11ac <__vector_78+0x34>
		tc_tcd0_err_callback();
    11aa:	19 95       	eicall
	}
}
    11ac:	ff 91       	pop	r31
    11ae:	ef 91       	pop	r30
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0b be       	out	0x3b, r0	; 59
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0
    11ce:	1f 90       	pop	r1
    11d0:	18 95       	reti

000011d2 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    11d2:	1f 92       	push	r1
    11d4:	0f 92       	push	r0
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	0f 92       	push	r0
    11da:	11 24       	eor	r1, r1
    11dc:	0b b6       	in	r0, 0x3b	; 59
    11de:	0f 92       	push	r0
    11e0:	2f 93       	push	r18
    11e2:	3f 93       	push	r19
    11e4:	4f 93       	push	r20
    11e6:	5f 93       	push	r21
    11e8:	6f 93       	push	r22
    11ea:	7f 93       	push	r23
    11ec:	8f 93       	push	r24
    11ee:	9f 93       	push	r25
    11f0:	af 93       	push	r26
    11f2:	bf 93       	push	r27
    11f4:	ef 93       	push	r30
    11f6:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    11f8:	e0 91 5a 21 	lds	r30, 0x215A	; 0x80215a <tc_tcd0_cca_callback>
    11fc:	f0 91 5b 21 	lds	r31, 0x215B	; 0x80215b <tc_tcd0_cca_callback+0x1>
    1200:	30 97       	sbiw	r30, 0x00	; 0
    1202:	09 f0       	breq	.+2      	; 0x1206 <__vector_79+0x34>
		tc_tcd0_cca_callback();
    1204:	19 95       	eicall
	}
}
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0b be       	out	0x3b, r0	; 59
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	0b b6       	in	r0, 0x3b	; 59
    1238:	0f 92       	push	r0
    123a:	2f 93       	push	r18
    123c:	3f 93       	push	r19
    123e:	4f 93       	push	r20
    1240:	5f 93       	push	r21
    1242:	6f 93       	push	r22
    1244:	7f 93       	push	r23
    1246:	8f 93       	push	r24
    1248:	9f 93       	push	r25
    124a:	af 93       	push	r26
    124c:	bf 93       	push	r27
    124e:	ef 93       	push	r30
    1250:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1252:	e0 91 58 21 	lds	r30, 0x2158	; 0x802158 <tc_tcd0_ccb_callback>
    1256:	f0 91 59 21 	lds	r31, 0x2159	; 0x802159 <tc_tcd0_ccb_callback+0x1>
    125a:	30 97       	sbiw	r30, 0x00	; 0
    125c:	09 f0       	breq	.+2      	; 0x1260 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    125e:	19 95       	eicall
	}
}
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0b be       	out	0x3b, r0	; 59
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	0b b6       	in	r0, 0x3b	; 59
    1292:	0f 92       	push	r0
    1294:	2f 93       	push	r18
    1296:	3f 93       	push	r19
    1298:	4f 93       	push	r20
    129a:	5f 93       	push	r21
    129c:	6f 93       	push	r22
    129e:	7f 93       	push	r23
    12a0:	8f 93       	push	r24
    12a2:	9f 93       	push	r25
    12a4:	af 93       	push	r26
    12a6:	bf 93       	push	r27
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    12ac:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <tc_tcd0_ccc_callback>
    12b0:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <tc_tcd0_ccc_callback+0x1>
    12b4:	30 97       	sbiw	r30, 0x00	; 0
    12b6:	09 f0       	breq	.+2      	; 0x12ba <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    12b8:	19 95       	eicall
	}
}
    12ba:	ff 91       	pop	r31
    12bc:	ef 91       	pop	r30
    12be:	bf 91       	pop	r27
    12c0:	af 91       	pop	r26
    12c2:	9f 91       	pop	r25
    12c4:	8f 91       	pop	r24
    12c6:	7f 91       	pop	r23
    12c8:	6f 91       	pop	r22
    12ca:	5f 91       	pop	r21
    12cc:	4f 91       	pop	r20
    12ce:	3f 91       	pop	r19
    12d0:	2f 91       	pop	r18
    12d2:	0f 90       	pop	r0
    12d4:	0b be       	out	0x3b, r0	; 59
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    12e0:	1f 92       	push	r1
    12e2:	0f 92       	push	r0
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	0f 92       	push	r0
    12e8:	11 24       	eor	r1, r1
    12ea:	0b b6       	in	r0, 0x3b	; 59
    12ec:	0f 92       	push	r0
    12ee:	2f 93       	push	r18
    12f0:	3f 93       	push	r19
    12f2:	4f 93       	push	r20
    12f4:	5f 93       	push	r21
    12f6:	6f 93       	push	r22
    12f8:	7f 93       	push	r23
    12fa:	8f 93       	push	r24
    12fc:	9f 93       	push	r25
    12fe:	af 93       	push	r26
    1300:	bf 93       	push	r27
    1302:	ef 93       	push	r30
    1304:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1306:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tc_tcd0_ccd_callback>
    130a:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tc_tcd0_ccd_callback+0x1>
    130e:	30 97       	sbiw	r30, 0x00	; 0
    1310:	09 f0       	breq	.+2      	; 0x1314 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    1312:	19 95       	eicall
	}
}
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0b be       	out	0x3b, r0	; 59
    1330:	0f 90       	pop	r0
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	0f 90       	pop	r0
    1336:	1f 90       	pop	r1
    1338:	18 95       	reti

0000133a <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    133a:	1f 92       	push	r1
    133c:	0f 92       	push	r0
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	0f 92       	push	r0
    1342:	11 24       	eor	r1, r1
    1344:	0b b6       	in	r0, 0x3b	; 59
    1346:	0f 92       	push	r0
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1360:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <tc_tcd1_ovf_callback>
    1364:	f0 91 53 21 	lds	r31, 0x2153	; 0x802153 <tc_tcd1_ovf_callback+0x1>
    1368:	30 97       	sbiw	r30, 0x00	; 0
    136a:	09 f0       	breq	.+2      	; 0x136e <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    136c:	19 95       	eicall
	}
}
    136e:	ff 91       	pop	r31
    1370:	ef 91       	pop	r30
    1372:	bf 91       	pop	r27
    1374:	af 91       	pop	r26
    1376:	9f 91       	pop	r25
    1378:	8f 91       	pop	r24
    137a:	7f 91       	pop	r23
    137c:	6f 91       	pop	r22
    137e:	5f 91       	pop	r21
    1380:	4f 91       	pop	r20
    1382:	3f 91       	pop	r19
    1384:	2f 91       	pop	r18
    1386:	0f 90       	pop	r0
    1388:	0b be       	out	0x3b, r0	; 59
    138a:	0f 90       	pop	r0
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	0f 90       	pop	r0
    1390:	1f 90       	pop	r1
    1392:	18 95       	reti

00001394 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	0b b6       	in	r0, 0x3b	; 59
    13a0:	0f 92       	push	r0
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    13ba:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <tc_tcd1_err_callback>
    13be:	f0 91 51 21 	lds	r31, 0x2151	; 0x802151 <tc_tcd1_err_callback+0x1>
    13c2:	30 97       	sbiw	r30, 0x00	; 0
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <__vector_84+0x34>
		tc_tcd1_err_callback();
    13c6:	19 95       	eicall
	}
}
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0b be       	out	0x3b, r0	; 59
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	0b b6       	in	r0, 0x3b	; 59
    13fa:	0f 92       	push	r0
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	6f 93       	push	r22
    1406:	7f 93       	push	r23
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	af 93       	push	r26
    140e:	bf 93       	push	r27
    1410:	ef 93       	push	r30
    1412:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1414:	e0 91 4e 21 	lds	r30, 0x214E	; 0x80214e <tc_tcd1_cca_callback>
    1418:	f0 91 4f 21 	lds	r31, 0x214F	; 0x80214f <tc_tcd1_cca_callback+0x1>
    141c:	30 97       	sbiw	r30, 0x00	; 0
    141e:	09 f0       	breq	.+2      	; 0x1422 <__vector_85+0x34>
		tc_tcd1_cca_callback();
    1420:	19 95       	eicall
	}
}
    1422:	ff 91       	pop	r31
    1424:	ef 91       	pop	r30
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	7f 91       	pop	r23
    1430:	6f 91       	pop	r22
    1432:	5f 91       	pop	r21
    1434:	4f 91       	pop	r20
    1436:	3f 91       	pop	r19
    1438:	2f 91       	pop	r18
    143a:	0f 90       	pop	r0
    143c:	0b be       	out	0x3b, r0	; 59
    143e:	0f 90       	pop	r0
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	0f 90       	pop	r0
    1444:	1f 90       	pop	r1
    1446:	18 95       	reti

00001448 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1448:	1f 92       	push	r1
    144a:	0f 92       	push	r0
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	0f 92       	push	r0
    1450:	11 24       	eor	r1, r1
    1452:	0b b6       	in	r0, 0x3b	; 59
    1454:	0f 92       	push	r0
    1456:	2f 93       	push	r18
    1458:	3f 93       	push	r19
    145a:	4f 93       	push	r20
    145c:	5f 93       	push	r21
    145e:	6f 93       	push	r22
    1460:	7f 93       	push	r23
    1462:	8f 93       	push	r24
    1464:	9f 93       	push	r25
    1466:	af 93       	push	r26
    1468:	bf 93       	push	r27
    146a:	ef 93       	push	r30
    146c:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    146e:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <tc_tcd1_ccb_callback>
    1472:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <tc_tcd1_ccb_callback+0x1>
    1476:	30 97       	sbiw	r30, 0x00	; 0
    1478:	09 f0       	breq	.+2      	; 0x147c <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    147a:	19 95       	eicall
	}
}
    147c:	ff 91       	pop	r31
    147e:	ef 91       	pop	r30
    1480:	bf 91       	pop	r27
    1482:	af 91       	pop	r26
    1484:	9f 91       	pop	r25
    1486:	8f 91       	pop	r24
    1488:	7f 91       	pop	r23
    148a:	6f 91       	pop	r22
    148c:	5f 91       	pop	r21
    148e:	4f 91       	pop	r20
    1490:	3f 91       	pop	r19
    1492:	2f 91       	pop	r18
    1494:	0f 90       	pop	r0
    1496:	0b be       	out	0x3b, r0	; 59
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	0f 90       	pop	r0
    149e:	1f 90       	pop	r1
    14a0:	18 95       	reti

000014a2 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    14a2:	1f 92       	push	r1
    14a4:	0f 92       	push	r0
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	0f 92       	push	r0
    14aa:	11 24       	eor	r1, r1
    14ac:	0b b6       	in	r0, 0x3b	; 59
    14ae:	0f 92       	push	r0
    14b0:	2f 93       	push	r18
    14b2:	3f 93       	push	r19
    14b4:	4f 93       	push	r20
    14b6:	5f 93       	push	r21
    14b8:	6f 93       	push	r22
    14ba:	7f 93       	push	r23
    14bc:	8f 93       	push	r24
    14be:	9f 93       	push	r25
    14c0:	af 93       	push	r26
    14c2:	bf 93       	push	r27
    14c4:	ef 93       	push	r30
    14c6:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    14c8:	e0 91 4a 21 	lds	r30, 0x214A	; 0x80214a <tc_tce0_ovf_callback>
    14cc:	f0 91 4b 21 	lds	r31, 0x214B	; 0x80214b <tc_tce0_ovf_callback+0x1>
    14d0:	30 97       	sbiw	r30, 0x00	; 0
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    14d4:	19 95       	eicall
	}
}
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0b be       	out	0x3b, r0	; 59
    14f2:	0f 90       	pop	r0
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    14fc:	1f 92       	push	r1
    14fe:	0f 92       	push	r0
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	0f 92       	push	r0
    1504:	11 24       	eor	r1, r1
    1506:	0b b6       	in	r0, 0x3b	; 59
    1508:	0f 92       	push	r0
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	4f 93       	push	r20
    1510:	5f 93       	push	r21
    1512:	6f 93       	push	r22
    1514:	7f 93       	push	r23
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1522:	e0 91 48 21 	lds	r30, 0x2148	; 0x802148 <tc_tce0_err_callback>
    1526:	f0 91 49 21 	lds	r31, 0x2149	; 0x802149 <tc_tce0_err_callback+0x1>
    152a:	30 97       	sbiw	r30, 0x00	; 0
    152c:	09 f0       	breq	.+2      	; 0x1530 <__vector_48+0x34>
		tc_tce0_err_callback();
    152e:	19 95       	eicall
	}
}
    1530:	ff 91       	pop	r31
    1532:	ef 91       	pop	r30
    1534:	bf 91       	pop	r27
    1536:	af 91       	pop	r26
    1538:	9f 91       	pop	r25
    153a:	8f 91       	pop	r24
    153c:	7f 91       	pop	r23
    153e:	6f 91       	pop	r22
    1540:	5f 91       	pop	r21
    1542:	4f 91       	pop	r20
    1544:	3f 91       	pop	r19
    1546:	2f 91       	pop	r18
    1548:	0f 90       	pop	r0
    154a:	0b be       	out	0x3b, r0	; 59
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1556:	1f 92       	push	r1
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	0f 92       	push	r0
    155e:	11 24       	eor	r1, r1
    1560:	0b b6       	in	r0, 0x3b	; 59
    1562:	0f 92       	push	r0
    1564:	2f 93       	push	r18
    1566:	3f 93       	push	r19
    1568:	4f 93       	push	r20
    156a:	5f 93       	push	r21
    156c:	6f 93       	push	r22
    156e:	7f 93       	push	r23
    1570:	8f 93       	push	r24
    1572:	9f 93       	push	r25
    1574:	af 93       	push	r26
    1576:	bf 93       	push	r27
    1578:	ef 93       	push	r30
    157a:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    157c:	e0 91 46 21 	lds	r30, 0x2146	; 0x802146 <tc_tce0_cca_callback>
    1580:	f0 91 47 21 	lds	r31, 0x2147	; 0x802147 <tc_tce0_cca_callback+0x1>
    1584:	30 97       	sbiw	r30, 0x00	; 0
    1586:	09 f0       	breq	.+2      	; 0x158a <__vector_49+0x34>
		tc_tce0_cca_callback();
    1588:	19 95       	eicall
	}
}
    158a:	ff 91       	pop	r31
    158c:	ef 91       	pop	r30
    158e:	bf 91       	pop	r27
    1590:	af 91       	pop	r26
    1592:	9f 91       	pop	r25
    1594:	8f 91       	pop	r24
    1596:	7f 91       	pop	r23
    1598:	6f 91       	pop	r22
    159a:	5f 91       	pop	r21
    159c:	4f 91       	pop	r20
    159e:	3f 91       	pop	r19
    15a0:	2f 91       	pop	r18
    15a2:	0f 90       	pop	r0
    15a4:	0b be       	out	0x3b, r0	; 59
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	0f 90       	pop	r0
    15ac:	1f 90       	pop	r1
    15ae:	18 95       	reti

000015b0 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    15b0:	1f 92       	push	r1
    15b2:	0f 92       	push	r0
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	0f 92       	push	r0
    15b8:	11 24       	eor	r1, r1
    15ba:	0b b6       	in	r0, 0x3b	; 59
    15bc:	0f 92       	push	r0
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    15d6:	e0 91 44 21 	lds	r30, 0x2144	; 0x802144 <tc_tce0_ccb_callback>
    15da:	f0 91 45 21 	lds	r31, 0x2145	; 0x802145 <tc_tce0_ccb_callback+0x1>
    15de:	30 97       	sbiw	r30, 0x00	; 0
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    15e2:	19 95       	eicall
	}
}
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0b be       	out	0x3b, r0	; 59
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	0b b6       	in	r0, 0x3b	; 59
    1616:	0f 92       	push	r0
    1618:	2f 93       	push	r18
    161a:	3f 93       	push	r19
    161c:	4f 93       	push	r20
    161e:	5f 93       	push	r21
    1620:	6f 93       	push	r22
    1622:	7f 93       	push	r23
    1624:	8f 93       	push	r24
    1626:	9f 93       	push	r25
    1628:	af 93       	push	r26
    162a:	bf 93       	push	r27
    162c:	ef 93       	push	r30
    162e:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1630:	e0 91 42 21 	lds	r30, 0x2142	; 0x802142 <tc_tce0_ccc_callback>
    1634:	f0 91 43 21 	lds	r31, 0x2143	; 0x802143 <tc_tce0_ccc_callback+0x1>
    1638:	30 97       	sbiw	r30, 0x00	; 0
    163a:	09 f0       	breq	.+2      	; 0x163e <__vector_51+0x34>
		tc_tce0_ccc_callback();
    163c:	19 95       	eicall
	}
}
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	bf 91       	pop	r27
    1644:	af 91       	pop	r26
    1646:	9f 91       	pop	r25
    1648:	8f 91       	pop	r24
    164a:	7f 91       	pop	r23
    164c:	6f 91       	pop	r22
    164e:	5f 91       	pop	r21
    1650:	4f 91       	pop	r20
    1652:	3f 91       	pop	r19
    1654:	2f 91       	pop	r18
    1656:	0f 90       	pop	r0
    1658:	0b be       	out	0x3b, r0	; 59
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	0b b6       	in	r0, 0x3b	; 59
    1670:	0f 92       	push	r0
    1672:	2f 93       	push	r18
    1674:	3f 93       	push	r19
    1676:	4f 93       	push	r20
    1678:	5f 93       	push	r21
    167a:	6f 93       	push	r22
    167c:	7f 93       	push	r23
    167e:	8f 93       	push	r24
    1680:	9f 93       	push	r25
    1682:	af 93       	push	r26
    1684:	bf 93       	push	r27
    1686:	ef 93       	push	r30
    1688:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    168a:	e0 91 40 21 	lds	r30, 0x2140	; 0x802140 <tc_tce0_ccd_callback>
    168e:	f0 91 41 21 	lds	r31, 0x2141	; 0x802141 <tc_tce0_ccd_callback+0x1>
    1692:	30 97       	sbiw	r30, 0x00	; 0
    1694:	09 f0       	breq	.+2      	; 0x1698 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    1696:	19 95       	eicall
	}
}
    1698:	ff 91       	pop	r31
    169a:	ef 91       	pop	r30
    169c:	bf 91       	pop	r27
    169e:	af 91       	pop	r26
    16a0:	9f 91       	pop	r25
    16a2:	8f 91       	pop	r24
    16a4:	7f 91       	pop	r23
    16a6:	6f 91       	pop	r22
    16a8:	5f 91       	pop	r21
    16aa:	4f 91       	pop	r20
    16ac:	3f 91       	pop	r19
    16ae:	2f 91       	pop	r18
    16b0:	0f 90       	pop	r0
    16b2:	0b be       	out	0x3b, r0	; 59
    16b4:	0f 90       	pop	r0
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	0f 90       	pop	r0
    16ba:	1f 90       	pop	r1
    16bc:	18 95       	reti

000016be <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    16be:	1f 92       	push	r1
    16c0:	0f 92       	push	r0
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	0f 92       	push	r0
    16c6:	11 24       	eor	r1, r1
    16c8:	0b b6       	in	r0, 0x3b	; 59
    16ca:	0f 92       	push	r0
    16cc:	2f 93       	push	r18
    16ce:	3f 93       	push	r19
    16d0:	4f 93       	push	r20
    16d2:	5f 93       	push	r21
    16d4:	6f 93       	push	r22
    16d6:	7f 93       	push	r23
    16d8:	8f 93       	push	r24
    16da:	9f 93       	push	r25
    16dc:	af 93       	push	r26
    16de:	bf 93       	push	r27
    16e0:	ef 93       	push	r30
    16e2:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    16e4:	e0 91 3e 21 	lds	r30, 0x213E	; 0x80213e <tc_tce1_ovf_callback>
    16e8:	f0 91 3f 21 	lds	r31, 0x213F	; 0x80213f <tc_tce1_ovf_callback+0x1>
    16ec:	30 97       	sbiw	r30, 0x00	; 0
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <__vector_53+0x34>
		tc_tce1_ovf_callback();
    16f0:	19 95       	eicall
	}
}
    16f2:	ff 91       	pop	r31
    16f4:	ef 91       	pop	r30
    16f6:	bf 91       	pop	r27
    16f8:	af 91       	pop	r26
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	7f 91       	pop	r23
    1700:	6f 91       	pop	r22
    1702:	5f 91       	pop	r21
    1704:	4f 91       	pop	r20
    1706:	3f 91       	pop	r19
    1708:	2f 91       	pop	r18
    170a:	0f 90       	pop	r0
    170c:	0b be       	out	0x3b, r0	; 59
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1718:	1f 92       	push	r1
    171a:	0f 92       	push	r0
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	0f 92       	push	r0
    1720:	11 24       	eor	r1, r1
    1722:	0b b6       	in	r0, 0x3b	; 59
    1724:	0f 92       	push	r0
    1726:	2f 93       	push	r18
    1728:	3f 93       	push	r19
    172a:	4f 93       	push	r20
    172c:	5f 93       	push	r21
    172e:	6f 93       	push	r22
    1730:	7f 93       	push	r23
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	af 93       	push	r26
    1738:	bf 93       	push	r27
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    173e:	e0 91 3c 21 	lds	r30, 0x213C	; 0x80213c <tc_tce1_err_callback>
    1742:	f0 91 3d 21 	lds	r31, 0x213D	; 0x80213d <tc_tce1_err_callback+0x1>
    1746:	30 97       	sbiw	r30, 0x00	; 0
    1748:	09 f0       	breq	.+2      	; 0x174c <__vector_54+0x34>
		tc_tce1_err_callback();
    174a:	19 95       	eicall
	}
}
    174c:	ff 91       	pop	r31
    174e:	ef 91       	pop	r30
    1750:	bf 91       	pop	r27
    1752:	af 91       	pop	r26
    1754:	9f 91       	pop	r25
    1756:	8f 91       	pop	r24
    1758:	7f 91       	pop	r23
    175a:	6f 91       	pop	r22
    175c:	5f 91       	pop	r21
    175e:	4f 91       	pop	r20
    1760:	3f 91       	pop	r19
    1762:	2f 91       	pop	r18
    1764:	0f 90       	pop	r0
    1766:	0b be       	out	0x3b, r0	; 59
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	0f 90       	pop	r0
    176e:	1f 90       	pop	r1
    1770:	18 95       	reti

00001772 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1772:	1f 92       	push	r1
    1774:	0f 92       	push	r0
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	0f 92       	push	r0
    177a:	11 24       	eor	r1, r1
    177c:	0b b6       	in	r0, 0x3b	; 59
    177e:	0f 92       	push	r0
    1780:	2f 93       	push	r18
    1782:	3f 93       	push	r19
    1784:	4f 93       	push	r20
    1786:	5f 93       	push	r21
    1788:	6f 93       	push	r22
    178a:	7f 93       	push	r23
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	af 93       	push	r26
    1792:	bf 93       	push	r27
    1794:	ef 93       	push	r30
    1796:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1798:	e0 91 3a 21 	lds	r30, 0x213A	; 0x80213a <tc_tce1_cca_callback>
    179c:	f0 91 3b 21 	lds	r31, 0x213B	; 0x80213b <tc_tce1_cca_callback+0x1>
    17a0:	30 97       	sbiw	r30, 0x00	; 0
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <__vector_55+0x34>
		tc_tce1_cca_callback();
    17a4:	19 95       	eicall
	}
}
    17a6:	ff 91       	pop	r31
    17a8:	ef 91       	pop	r30
    17aa:	bf 91       	pop	r27
    17ac:	af 91       	pop	r26
    17ae:	9f 91       	pop	r25
    17b0:	8f 91       	pop	r24
    17b2:	7f 91       	pop	r23
    17b4:	6f 91       	pop	r22
    17b6:	5f 91       	pop	r21
    17b8:	4f 91       	pop	r20
    17ba:	3f 91       	pop	r19
    17bc:	2f 91       	pop	r18
    17be:	0f 90       	pop	r0
    17c0:	0b be       	out	0x3b, r0	; 59
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	0f 90       	pop	r0
    17c8:	1f 90       	pop	r1
    17ca:	18 95       	reti

000017cc <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    17cc:	1f 92       	push	r1
    17ce:	0f 92       	push	r0
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	0f 92       	push	r0
    17d4:	11 24       	eor	r1, r1
    17d6:	0b b6       	in	r0, 0x3b	; 59
    17d8:	0f 92       	push	r0
    17da:	2f 93       	push	r18
    17dc:	3f 93       	push	r19
    17de:	4f 93       	push	r20
    17e0:	5f 93       	push	r21
    17e2:	6f 93       	push	r22
    17e4:	7f 93       	push	r23
    17e6:	8f 93       	push	r24
    17e8:	9f 93       	push	r25
    17ea:	af 93       	push	r26
    17ec:	bf 93       	push	r27
    17ee:	ef 93       	push	r30
    17f0:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    17f2:	e0 91 38 21 	lds	r30, 0x2138	; 0x802138 <tc_tce1_ccb_callback>
    17f6:	f0 91 39 21 	lds	r31, 0x2139	; 0x802139 <tc_tce1_ccb_callback+0x1>
    17fa:	30 97       	sbiw	r30, 0x00	; 0
    17fc:	09 f0       	breq	.+2      	; 0x1800 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    17fe:	19 95       	eicall
	}
}
    1800:	ff 91       	pop	r31
    1802:	ef 91       	pop	r30
    1804:	bf 91       	pop	r27
    1806:	af 91       	pop	r26
    1808:	9f 91       	pop	r25
    180a:	8f 91       	pop	r24
    180c:	7f 91       	pop	r23
    180e:	6f 91       	pop	r22
    1810:	5f 91       	pop	r21
    1812:	4f 91       	pop	r20
    1814:	3f 91       	pop	r19
    1816:	2f 91       	pop	r18
    1818:	0f 90       	pop	r0
    181a:	0b be       	out	0x3b, r0	; 59
    181c:	0f 90       	pop	r0
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	0f 90       	pop	r0
    1822:	1f 90       	pop	r1
    1824:	18 95       	reti

00001826 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1826:	1f 92       	push	r1
    1828:	0f 92       	push	r0
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	0b b6       	in	r0, 0x3b	; 59
    1832:	0f 92       	push	r0
    1834:	2f 93       	push	r18
    1836:	3f 93       	push	r19
    1838:	4f 93       	push	r20
    183a:	5f 93       	push	r21
    183c:	6f 93       	push	r22
    183e:	7f 93       	push	r23
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	af 93       	push	r26
    1846:	bf 93       	push	r27
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    184c:	e0 91 36 21 	lds	r30, 0x2136	; 0x802136 <tc_tcf0_ovf_callback>
    1850:	f0 91 37 21 	lds	r31, 0x2137	; 0x802137 <tc_tcf0_ovf_callback+0x1>
    1854:	30 97       	sbiw	r30, 0x00	; 0
    1856:	09 f0       	breq	.+2      	; 0x185a <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1858:	19 95       	eicall
	}
}
    185a:	ff 91       	pop	r31
    185c:	ef 91       	pop	r30
    185e:	bf 91       	pop	r27
    1860:	af 91       	pop	r26
    1862:	9f 91       	pop	r25
    1864:	8f 91       	pop	r24
    1866:	7f 91       	pop	r23
    1868:	6f 91       	pop	r22
    186a:	5f 91       	pop	r21
    186c:	4f 91       	pop	r20
    186e:	3f 91       	pop	r19
    1870:	2f 91       	pop	r18
    1872:	0f 90       	pop	r0
    1874:	0b be       	out	0x3b, r0	; 59
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1880:	1f 92       	push	r1
    1882:	0f 92       	push	r0
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	0f 92       	push	r0
    1888:	11 24       	eor	r1, r1
    188a:	0b b6       	in	r0, 0x3b	; 59
    188c:	0f 92       	push	r0
    188e:	2f 93       	push	r18
    1890:	3f 93       	push	r19
    1892:	4f 93       	push	r20
    1894:	5f 93       	push	r21
    1896:	6f 93       	push	r22
    1898:	7f 93       	push	r23
    189a:	8f 93       	push	r24
    189c:	9f 93       	push	r25
    189e:	af 93       	push	r26
    18a0:	bf 93       	push	r27
    18a2:	ef 93       	push	r30
    18a4:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    18a6:	e0 91 34 21 	lds	r30, 0x2134	; 0x802134 <tc_tcf0_err_callback>
    18aa:	f0 91 35 21 	lds	r31, 0x2135	; 0x802135 <tc_tcf0_err_callback+0x1>
    18ae:	30 97       	sbiw	r30, 0x00	; 0
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <__vector_109+0x34>
		tc_tcf0_err_callback();
    18b2:	19 95       	eicall
	}
}
    18b4:	ff 91       	pop	r31
    18b6:	ef 91       	pop	r30
    18b8:	bf 91       	pop	r27
    18ba:	af 91       	pop	r26
    18bc:	9f 91       	pop	r25
    18be:	8f 91       	pop	r24
    18c0:	7f 91       	pop	r23
    18c2:	6f 91       	pop	r22
    18c4:	5f 91       	pop	r21
    18c6:	4f 91       	pop	r20
    18c8:	3f 91       	pop	r19
    18ca:	2f 91       	pop	r18
    18cc:	0f 90       	pop	r0
    18ce:	0b be       	out	0x3b, r0	; 59
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	0b b6       	in	r0, 0x3b	; 59
    18e6:	0f 92       	push	r0
    18e8:	2f 93       	push	r18
    18ea:	3f 93       	push	r19
    18ec:	4f 93       	push	r20
    18ee:	5f 93       	push	r21
    18f0:	6f 93       	push	r22
    18f2:	7f 93       	push	r23
    18f4:	8f 93       	push	r24
    18f6:	9f 93       	push	r25
    18f8:	af 93       	push	r26
    18fa:	bf 93       	push	r27
    18fc:	ef 93       	push	r30
    18fe:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1900:	e0 91 32 21 	lds	r30, 0x2132	; 0x802132 <tc_tcf0_cca_callback>
    1904:	f0 91 33 21 	lds	r31, 0x2133	; 0x802133 <tc_tcf0_cca_callback+0x1>
    1908:	30 97       	sbiw	r30, 0x00	; 0
    190a:	09 f0       	breq	.+2      	; 0x190e <__vector_110+0x34>
		tc_tcf0_cca_callback();
    190c:	19 95       	eicall
	}
}
    190e:	ff 91       	pop	r31
    1910:	ef 91       	pop	r30
    1912:	bf 91       	pop	r27
    1914:	af 91       	pop	r26
    1916:	9f 91       	pop	r25
    1918:	8f 91       	pop	r24
    191a:	7f 91       	pop	r23
    191c:	6f 91       	pop	r22
    191e:	5f 91       	pop	r21
    1920:	4f 91       	pop	r20
    1922:	3f 91       	pop	r19
    1924:	2f 91       	pop	r18
    1926:	0f 90       	pop	r0
    1928:	0b be       	out	0x3b, r0	; 59
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	0f 90       	pop	r0
    1930:	1f 90       	pop	r1
    1932:	18 95       	reti

00001934 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1934:	1f 92       	push	r1
    1936:	0f 92       	push	r0
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	0f 92       	push	r0
    193c:	11 24       	eor	r1, r1
    193e:	0b b6       	in	r0, 0x3b	; 59
    1940:	0f 92       	push	r0
    1942:	2f 93       	push	r18
    1944:	3f 93       	push	r19
    1946:	4f 93       	push	r20
    1948:	5f 93       	push	r21
    194a:	6f 93       	push	r22
    194c:	7f 93       	push	r23
    194e:	8f 93       	push	r24
    1950:	9f 93       	push	r25
    1952:	af 93       	push	r26
    1954:	bf 93       	push	r27
    1956:	ef 93       	push	r30
    1958:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    195a:	e0 91 30 21 	lds	r30, 0x2130	; 0x802130 <tc_tcf0_ccb_callback>
    195e:	f0 91 31 21 	lds	r31, 0x2131	; 0x802131 <tc_tcf0_ccb_callback+0x1>
    1962:	30 97       	sbiw	r30, 0x00	; 0
    1964:	09 f0       	breq	.+2      	; 0x1968 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1966:	19 95       	eicall
	}
}
    1968:	ff 91       	pop	r31
    196a:	ef 91       	pop	r30
    196c:	bf 91       	pop	r27
    196e:	af 91       	pop	r26
    1970:	9f 91       	pop	r25
    1972:	8f 91       	pop	r24
    1974:	7f 91       	pop	r23
    1976:	6f 91       	pop	r22
    1978:	5f 91       	pop	r21
    197a:	4f 91       	pop	r20
    197c:	3f 91       	pop	r19
    197e:	2f 91       	pop	r18
    1980:	0f 90       	pop	r0
    1982:	0b be       	out	0x3b, r0	; 59
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    198e:	1f 92       	push	r1
    1990:	0f 92       	push	r0
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	0f 92       	push	r0
    1996:	11 24       	eor	r1, r1
    1998:	0b b6       	in	r0, 0x3b	; 59
    199a:	0f 92       	push	r0
    199c:	2f 93       	push	r18
    199e:	3f 93       	push	r19
    19a0:	4f 93       	push	r20
    19a2:	5f 93       	push	r21
    19a4:	6f 93       	push	r22
    19a6:	7f 93       	push	r23
    19a8:	8f 93       	push	r24
    19aa:	9f 93       	push	r25
    19ac:	af 93       	push	r26
    19ae:	bf 93       	push	r27
    19b0:	ef 93       	push	r30
    19b2:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    19b4:	e0 91 2e 21 	lds	r30, 0x212E	; 0x80212e <tc_tcf0_ccc_callback>
    19b8:	f0 91 2f 21 	lds	r31, 0x212F	; 0x80212f <tc_tcf0_ccc_callback+0x1>
    19bc:	30 97       	sbiw	r30, 0x00	; 0
    19be:	09 f0       	breq	.+2      	; 0x19c2 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    19c0:	19 95       	eicall
	}
}
    19c2:	ff 91       	pop	r31
    19c4:	ef 91       	pop	r30
    19c6:	bf 91       	pop	r27
    19c8:	af 91       	pop	r26
    19ca:	9f 91       	pop	r25
    19cc:	8f 91       	pop	r24
    19ce:	7f 91       	pop	r23
    19d0:	6f 91       	pop	r22
    19d2:	5f 91       	pop	r21
    19d4:	4f 91       	pop	r20
    19d6:	3f 91       	pop	r19
    19d8:	2f 91       	pop	r18
    19da:	0f 90       	pop	r0
    19dc:	0b be       	out	0x3b, r0	; 59
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	0f 90       	pop	r0
    19e4:	1f 90       	pop	r1
    19e6:	18 95       	reti

000019e8 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	0f 92       	push	r0
    19f0:	11 24       	eor	r1, r1
    19f2:	0b b6       	in	r0, 0x3b	; 59
    19f4:	0f 92       	push	r0
    19f6:	2f 93       	push	r18
    19f8:	3f 93       	push	r19
    19fa:	4f 93       	push	r20
    19fc:	5f 93       	push	r21
    19fe:	6f 93       	push	r22
    1a00:	7f 93       	push	r23
    1a02:	8f 93       	push	r24
    1a04:	9f 93       	push	r25
    1a06:	af 93       	push	r26
    1a08:	bf 93       	push	r27
    1a0a:	ef 93       	push	r30
    1a0c:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1a0e:	e0 91 2c 21 	lds	r30, 0x212C	; 0x80212c <tc_tcf0_ccd_callback>
    1a12:	f0 91 2d 21 	lds	r31, 0x212D	; 0x80212d <tc_tcf0_ccd_callback+0x1>
    1a16:	30 97       	sbiw	r30, 0x00	; 0
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1a1a:	19 95       	eicall
	}
}
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0b be       	out	0x3b, r0	; 59
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f 90       	pop	r0
    1a3e:	1f 90       	pop	r1
    1a40:	18 95       	reti

00001a42 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	1f 92       	push	r1
    1a4a:	1f 92       	push	r1
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a50:	2f b7       	in	r18, 0x3f	; 63
    1a52:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    1a54:	f8 94       	cli
	return flags;
    1a56:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1a58:	28 2f       	mov	r18, r24
    1a5a:	39 2f       	mov	r19, r25
    1a5c:	21 15       	cp	r18, r1
    1a5e:	88 e0       	ldi	r24, 0x08	; 8
    1a60:	38 07       	cpc	r19, r24
    1a62:	49 f4       	brne	.+18     	; 0x1a76 <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1a6c:	64 e0       	ldi	r22, 0x04	; 4
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
    1a74:	4f c0       	rjmp	.+158    	; 0x1b14 <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1a76:	20 34       	cpi	r18, 0x40	; 64
    1a78:	88 e0       	ldi	r24, 0x08	; 8
    1a7a:	38 07       	cpc	r19, r24
    1a7c:	49 f4       	brne	.+18     	; 0x1a90 <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1a7e:	62 e0       	ldi	r22, 0x02	; 2
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1a86:	64 e0       	ldi	r22, 0x04	; 4
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
    1a8e:	42 c0       	rjmp	.+132    	; 0x1b14 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1a90:	21 15       	cp	r18, r1
    1a92:	89 e0       	ldi	r24, 0x09	; 9
    1a94:	38 07       	cpc	r19, r24
    1a96:	49 f4       	brne	.+18     	; 0x1aaa <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	84 e0       	ldi	r24, 0x04	; 4
    1a9c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1aa0:	64 e0       	ldi	r22, 0x04	; 4
    1aa2:	84 e0       	ldi	r24, 0x04	; 4
    1aa4:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
    1aa8:	35 c0       	rjmp	.+106    	; 0x1b14 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1aaa:	20 34       	cpi	r18, 0x40	; 64
    1aac:	89 e0       	ldi	r24, 0x09	; 9
    1aae:	38 07       	cpc	r19, r24
    1ab0:	49 f4       	brne	.+18     	; 0x1ac4 <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1ab2:	62 e0       	ldi	r22, 0x02	; 2
    1ab4:	84 e0       	ldi	r24, 0x04	; 4
    1ab6:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1aba:	64 e0       	ldi	r22, 0x04	; 4
    1abc:	84 e0       	ldi	r24, 0x04	; 4
    1abe:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
    1ac2:	28 c0       	rjmp	.+80     	; 0x1b14 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1ac4:	21 15       	cp	r18, r1
    1ac6:	8a e0       	ldi	r24, 0x0A	; 10
    1ac8:	38 07       	cpc	r19, r24
    1aca:	49 f4       	brne	.+18     	; 0x1ade <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	85 e0       	ldi	r24, 0x05	; 5
    1ad0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1ad4:	64 e0       	ldi	r22, 0x04	; 4
    1ad6:	85 e0       	ldi	r24, 0x05	; 5
    1ad8:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
    1adc:	1b c0       	rjmp	.+54     	; 0x1b14 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1ade:	20 34       	cpi	r18, 0x40	; 64
    1ae0:	8a e0       	ldi	r24, 0x0A	; 10
    1ae2:	38 07       	cpc	r19, r24
    1ae4:	49 f4       	brne	.+18     	; 0x1af8 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1ae6:	62 e0       	ldi	r22, 0x02	; 2
    1ae8:	85 e0       	ldi	r24, 0x05	; 5
    1aea:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1aee:	64 e0       	ldi	r22, 0x04	; 4
    1af0:	85 e0       	ldi	r24, 0x05	; 5
    1af2:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
    1af6:	0e c0       	rjmp	.+28     	; 0x1b14 <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1af8:	21 15       	cp	r18, r1
    1afa:	3b 40       	sbci	r19, 0x0B	; 11
    1afc:	49 f4       	brne	.+18     	; 0x1b10 <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	86 e0       	ldi	r24, 0x06	; 6
    1b02:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1b06:	64 e0       	ldi	r22, 0x04	; 4
    1b08:	86 e0       	ldi	r24, 0x06	; 6
    1b0a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <sysclk_enable_module>
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b10:	1f bf       	out	0x3f, r17	; 63
    1b12:	10 c0       	rjmp	.+32     	; 0x1b34 <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1b14:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <sleepmgr_locks+0x1>
    1b18:	8f 3f       	cpi	r24, 0xFF	; 255
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <tc_enable+0xdc>
    1b1c:	ff cf       	rjmp	.-2      	; 0x1b1c <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b1e:	8f b7       	in	r24, 0x3f	; 63
    1b20:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1b22:	f8 94       	cli
	return flags;
    1b24:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1b26:	ed e0       	ldi	r30, 0x0D	; 13
    1b28:	f4 e2       	ldi	r31, 0x24	; 36
    1b2a:	81 81       	ldd	r24, Z+1	; 0x01
    1b2c:	8f 5f       	subi	r24, 0xFF	; 255
    1b2e:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b30:	9f bf       	out	0x3f, r25	; 63
    1b32:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	08 95       	ret

00001b40 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1b44:	e0 91 74 21 	lds	r30, 0x2174	; 0x802174 <transfer>
    1b48:	f0 91 75 21 	lds	r31, 0x2175	; 0x802175 <transfer+0x1>
    1b4c:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1b4e:	83 ff       	sbrs	r24, 3
    1b50:	08 c0       	rjmp	.+16     	; 0x1b62 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1b52:	88 60       	ori	r24, 0x08	; 8
    1b54:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1b56:	83 e0       	ldi	r24, 0x03	; 3
    1b58:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1b5a:	86 ef       	ldi	r24, 0xF6	; 246
    1b5c:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
    1b60:	83 c0       	rjmp	.+262    	; 0x1c68 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1b62:	98 2f       	mov	r25, r24
    1b64:	94 71       	andi	r25, 0x14	; 20
    1b66:	31 f0       	breq	.+12     	; 0x1b74 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1b68:	83 e0       	ldi	r24, 0x03	; 3
    1b6a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1b6c:	8f ef       	ldi	r24, 0xFF	; 255
    1b6e:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
    1b72:	7a c0       	rjmp	.+244    	; 0x1c68 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1b74:	86 ff       	sbrs	r24, 6
    1b76:	43 c0       	rjmp	.+134    	; 0x1bfe <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1b78:	c4 e7       	ldi	r28, 0x74	; 116
    1b7a:	d1 e2       	ldi	r29, 0x21	; 33
    1b7c:	aa 81       	ldd	r26, Y+2	; 0x02
    1b7e:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
    1b82:	9d 81       	ldd	r25, Y+5	; 0x05
    1b84:	14 96       	adiw	r26, 0x04	; 4
    1b86:	2d 91       	ld	r18, X+
    1b88:	3c 91       	ld	r19, X
    1b8a:	15 97       	sbiw	r26, 0x05	; 5
    1b8c:	82 17       	cp	r24, r18
    1b8e:	93 07       	cpc	r25, r19
    1b90:	6c f4       	brge	.+26     	; 0x1bac <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1b92:	9c 01       	movw	r18, r24
    1b94:	2f 5f       	subi	r18, 0xFF	; 255
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	20 93 78 21 	sts	0x2178, r18	; 0x802178 <transfer+0x4>
    1b9c:	30 93 79 21 	sts	0x2179, r19	; 0x802179 <transfer+0x5>
    1ba0:	a8 0f       	add	r26, r24
    1ba2:	b9 1f       	adc	r27, r25
    1ba4:	11 96       	adiw	r26, 0x01	; 1
    1ba6:	8c 91       	ld	r24, X
    1ba8:	87 83       	std	Z+7, r24	; 0x07
    1baa:	5e c0       	rjmp	.+188    	; 0x1c68 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1bac:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <transfer+0x6>
    1bb0:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <transfer+0x7>
    1bb4:	18 96       	adiw	r26, 0x08	; 8
    1bb6:	2d 91       	ld	r18, X+
    1bb8:	3c 91       	ld	r19, X
    1bba:	19 97       	sbiw	r26, 0x09	; 9
    1bbc:	82 17       	cp	r24, r18
    1bbe:	93 07       	cpc	r25, r19
    1bc0:	c8 f4       	brcc	.+50     	; 0x1bf4 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1bc2:	20 91 7c 21 	lds	r18, 0x217C	; 0x80217c <transfer+0x8>
    1bc6:	22 23       	and	r18, r18
    1bc8:	21 f0       	breq	.+8      	; 0x1bd2 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1bca:	86 81       	ldd	r24, Z+6	; 0x06
    1bcc:	81 60       	ori	r24, 0x01	; 1
    1bce:	86 83       	std	Z+6, r24	; 0x06
    1bd0:	4b c0       	rjmp	.+150    	; 0x1c68 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1bd2:	16 96       	adiw	r26, 0x06	; 6
    1bd4:	2d 91       	ld	r18, X+
    1bd6:	3c 91       	ld	r19, X
    1bd8:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1bda:	ac 01       	movw	r20, r24
    1bdc:	4f 5f       	subi	r20, 0xFF	; 255
    1bde:	5f 4f       	sbci	r21, 0xFF	; 255
    1be0:	40 93 7a 21 	sts	0x217A, r20	; 0x80217a <transfer+0x6>
    1be4:	50 93 7b 21 	sts	0x217B, r21	; 0x80217b <transfer+0x7>
    1be8:	d9 01       	movw	r26, r18
    1bea:	a8 0f       	add	r26, r24
    1bec:	b9 1f       	adc	r27, r25
    1bee:	8c 91       	ld	r24, X
    1bf0:	87 83       	std	Z+7, r24	; 0x07
    1bf2:	3a c0       	rjmp	.+116    	; 0x1c68 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1bf4:	83 e0       	ldi	r24, 0x03	; 3
    1bf6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1bf8:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <transfer+0xa>
    1bfc:	35 c0       	rjmp	.+106    	; 0x1c68 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1bfe:	88 23       	and	r24, r24
    1c00:	84 f5       	brge	.+96     	; 0x1c62 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1c02:	a4 e7       	ldi	r26, 0x74	; 116
    1c04:	b1 e2       	ldi	r27, 0x21	; 33
    1c06:	12 96       	adiw	r26, 0x02	; 2
    1c08:	cd 91       	ld	r28, X+
    1c0a:	dc 91       	ld	r29, X
    1c0c:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1c0e:	16 96       	adiw	r26, 0x06	; 6
    1c10:	8d 91       	ld	r24, X+
    1c12:	9c 91       	ld	r25, X
    1c14:	17 97       	sbiw	r26, 0x07	; 7
    1c16:	28 85       	ldd	r18, Y+8	; 0x08
    1c18:	39 85       	ldd	r19, Y+9	; 0x09
    1c1a:	82 17       	cp	r24, r18
    1c1c:	93 07       	cpc	r25, r19
    1c1e:	d8 f4       	brcc	.+54     	; 0x1c56 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1c20:	6e 81       	ldd	r22, Y+6	; 0x06
    1c22:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1c24:	9c 01       	movw	r18, r24
    1c26:	2f 5f       	subi	r18, 0xFF	; 255
    1c28:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2a:	20 93 7a 21 	sts	0x217A, r18	; 0x80217a <transfer+0x6>
    1c2e:	30 93 7b 21 	sts	0x217B, r19	; 0x80217b <transfer+0x7>
    1c32:	47 81       	ldd	r20, Z+7	; 0x07
    1c34:	db 01       	movw	r26, r22
    1c36:	a8 0f       	add	r26, r24
    1c38:	b9 1f       	adc	r27, r25
    1c3a:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1c3c:	88 85       	ldd	r24, Y+8	; 0x08
    1c3e:	99 85       	ldd	r25, Y+9	; 0x09
    1c40:	28 17       	cp	r18, r24
    1c42:	39 07       	cpc	r19, r25
    1c44:	18 f4       	brcc	.+6      	; 0x1c4c <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	83 83       	std	Z+3, r24	; 0x03
    1c4a:	0e c0       	rjmp	.+28     	; 0x1c68 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1c4c:	87 e0       	ldi	r24, 0x07	; 7
    1c4e:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1c50:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <transfer+0xa>
    1c54:	09 c0       	rjmp	.+18     	; 0x1c68 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1c5a:	89 ef       	ldi	r24, 0xF9	; 249
    1c5c:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
    1c60:	03 c0       	rjmp	.+6      	; 0x1c68 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1c62:	8b ef       	ldi	r24, 0xFB	; 251
    1c64:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <transfer+0xa>
	}
}
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	08 95       	ret

00001c6e <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1c6e:	1f 92       	push	r1
    1c70:	0f 92       	push	r0
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	0f 92       	push	r0
    1c76:	11 24       	eor	r1, r1
    1c78:	0b b6       	in	r0, 0x3b	; 59
    1c7a:	0f 92       	push	r0
    1c7c:	2f 93       	push	r18
    1c7e:	3f 93       	push	r19
    1c80:	4f 93       	push	r20
    1c82:	5f 93       	push	r21
    1c84:	6f 93       	push	r22
    1c86:	7f 93       	push	r23
    1c88:	8f 93       	push	r24
    1c8a:	9f 93       	push	r25
    1c8c:	af 93       	push	r26
    1c8e:	bf 93       	push	r27
    1c90:	ef 93       	push	r30
    1c92:	ff 93       	push	r31
    1c94:	55 df       	rcall	.-342    	; 0x1b40 <twim_interrupt_handler>
    1c96:	ff 91       	pop	r31
    1c98:	ef 91       	pop	r30
    1c9a:	bf 91       	pop	r27
    1c9c:	af 91       	pop	r26
    1c9e:	9f 91       	pop	r25
    1ca0:	8f 91       	pop	r24
    1ca2:	7f 91       	pop	r23
    1ca4:	6f 91       	pop	r22
    1ca6:	5f 91       	pop	r21
    1ca8:	4f 91       	pop	r20
    1caa:	3f 91       	pop	r19
    1cac:	2f 91       	pop	r18
    1cae:	0f 90       	pop	r0
    1cb0:	0b be       	out	0x3b, r0	; 59
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	0f 90       	pop	r0
    1cb8:	1f 90       	pop	r1
    1cba:	18 95       	reti

00001cbc <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1cbc:	1f 92       	push	r1
    1cbe:	0f 92       	push	r0
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	0f 92       	push	r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	0b b6       	in	r0, 0x3b	; 59
    1cc8:	0f 92       	push	r0
    1cca:	2f 93       	push	r18
    1ccc:	3f 93       	push	r19
    1cce:	4f 93       	push	r20
    1cd0:	5f 93       	push	r21
    1cd2:	6f 93       	push	r22
    1cd4:	7f 93       	push	r23
    1cd6:	8f 93       	push	r24
    1cd8:	9f 93       	push	r25
    1cda:	af 93       	push	r26
    1cdc:	bf 93       	push	r27
    1cde:	ef 93       	push	r30
    1ce0:	ff 93       	push	r31
    1ce2:	2e df       	rcall	.-420    	; 0x1b40 <twim_interrupt_handler>
    1ce4:	ff 91       	pop	r31
    1ce6:	ef 91       	pop	r30
    1ce8:	bf 91       	pop	r27
    1cea:	af 91       	pop	r26
    1cec:	9f 91       	pop	r25
    1cee:	8f 91       	pop	r24
    1cf0:	7f 91       	pop	r23
    1cf2:	6f 91       	pop	r22
    1cf4:	5f 91       	pop	r21
    1cf6:	4f 91       	pop	r20
    1cf8:	3f 91       	pop	r19
    1cfa:	2f 91       	pop	r18
    1cfc:	0f 90       	pop	r0
    1cfe:	0b be       	out	0x3b, r0	; 59
    1d00:	0f 90       	pop	r0
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	0f 90       	pop	r0
    1d06:	1f 90       	pop	r1
    1d08:	18 95       	reti

00001d0a <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1d0a:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    1d0c:	db 01       	movw	r26, r22
    1d0e:	14 96       	adiw	r26, 0x04	; 4
    1d10:	8c 91       	ld	r24, X
    1d12:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    1d14:	88 eb       	ldi	r24, 0xB8	; 184
    1d16:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    1d1c:	e4 e7       	ldi	r30, 0x74	; 116
    1d1e:	f1 e2       	ldi	r31, 0x21	; 33
    1d20:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    1d22:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    1d24:	e0 ea       	ldi	r30, 0xA0	; 160
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	82 60       	ori	r24, 0x02	; 2
    1d2c:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    1d2e:	78 94       	sei

	return STATUS_OK;
}
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	08 95       	ret

00001d34 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	1f 92       	push	r1
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	9c 01       	movw	r18, r24
    1d40:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1d42:	89 2b       	or	r24, r25
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <twi_master_transfer+0x14>
    1d46:	51 c0       	rjmp	.+162    	; 0x1dea <twi_master_transfer+0xb6>
    1d48:	30 97       	sbiw	r30, 0x00	; 0
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <twi_master_transfer+0x1a>
    1d4c:	50 c0       	rjmp	.+160    	; 0x1dee <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1d4e:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1d50:	80 91 7d 21 	lds	r24, 0x217D	; 0x80217d <transfer+0x9>
    1d54:	88 23       	and	r24, r24
    1d56:	19 f0       	breq	.+6      	; 0x1d5e <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    1d58:	99 23       	and	r25, r25
    1d5a:	f1 f3       	breq	.-4      	; 0x1d58 <twi_master_transfer+0x24>
    1d5c:	4a c0       	rjmp	.+148    	; 0x1df2 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1d5e:	8f b7       	in	r24, 0x3f	; 63
    1d60:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1d62:	f8 94       	cli
	return flags;
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1d66:	a4 e7       	ldi	r26, 0x74	; 116
    1d68:	b1 e2       	ldi	r27, 0x21	; 33
    1d6a:	91 e0       	ldi	r25, 0x01	; 1
    1d6c:	19 96       	adiw	r26, 0x09	; 9
    1d6e:	9c 93       	st	X, r25
    1d70:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    1d72:	90 e8       	ldi	r25, 0x80	; 128
    1d74:	1a 96       	adiw	r26, 0x0a	; 10
    1d76:	9c 93       	st	X, r25
    1d78:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d7a:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1d7c:	2d 93       	st	X+, r18
    1d7e:	3c 93       	st	X, r19
    1d80:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    1d82:	12 96       	adiw	r26, 0x02	; 2
    1d84:	6d 93       	st	X+, r22
    1d86:	7c 93       	st	X, r23
    1d88:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    1d8a:	14 96       	adiw	r26, 0x04	; 4
    1d8c:	1d 92       	st	X+, r1
    1d8e:	1c 92       	st	X, r1
    1d90:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    1d92:	16 96       	adiw	r26, 0x06	; 6
    1d94:	1d 92       	st	X+, r1
    1d96:	1c 92       	st	X, r1
    1d98:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    1d9a:	18 96       	adiw	r26, 0x08	; 8
    1d9c:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    1d9e:	80 81       	ld	r24, Z
    1da0:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    1da2:	64 81       	ldd	r22, Z+4	; 0x04
    1da4:	75 81       	ldd	r23, Z+5	; 0x05
    1da6:	67 2b       	or	r22, r23
    1da8:	11 f4       	brne	.+4      	; 0x1dae <twi_master_transfer+0x7a>
    1daa:	41 11       	cpse	r20, r1
    1dac:	03 c0       	rjmp	.+6      	; 0x1db4 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    1dae:	f9 01       	movw	r30, r18
    1db0:	86 83       	std	Z+6, r24	; 0x06
    1db2:	03 c0       	rjmp	.+6      	; 0x1dba <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    1db4:	81 60       	ori	r24, 0x01	; 1
    1db6:	f9 01       	movw	r30, r18
    1db8:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    1dba:	e4 e7       	ldi	r30, 0x74	; 116
    1dbc:	f1 e2       	ldi	r31, 0x21	; 33
    1dbe:	92 85       	ldd	r25, Z+10	; 0x0a
    1dc0:	90 38       	cpi	r25, 0x80	; 128
    1dc2:	e9 f3       	breq	.-6      	; 0x1dbe <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1dc4:	f9 01       	movw	r30, r18
    1dc6:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1dc8:	83 70       	andi	r24, 0x03	; 3
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	49 f0       	breq	.+18     	; 0x1de0 <twi_master_transfer+0xac>
    1dce:	a4 e7       	ldi	r26, 0x74	; 116
    1dd0:	b1 e2       	ldi	r27, 0x21	; 33
    1dd2:	ed 91       	ld	r30, X+
    1dd4:	fc 91       	ld	r31, X
    1dd6:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1dd8:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1dda:	83 70       	andi	r24, 0x03	; 3
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	c9 f7       	brne	.-14     	; 0x1dd2 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    1de0:	e4 e7       	ldi	r30, 0x74	; 116
    1de2:	f1 e2       	ldi	r31, 0x21	; 33
    1de4:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    1de6:	11 86       	std	Z+9, r1	; 0x09
    1de8:	05 c0       	rjmp	.+10     	; 0x1df4 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    1dea:	88 ef       	ldi	r24, 0xF8	; 248
    1dec:	03 c0       	rjmp	.+6      	; 0x1df4 <twi_master_transfer+0xc0>
    1dee:	88 ef       	ldi	r24, 0xF8	; 248
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    1df2:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1df4:	0f 90       	pop	r0
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	08 95       	ret

00001dfc <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	1f 92       	push	r1
    1e02:	1f 92       	push	r1
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	81 11       	cpse	r24, r1
    1e0a:	26 c0       	rjmp	.+76     	; 0x1e58 <udd_sleep_mode+0x5c>
    1e0c:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <udd_b_idle>
    1e10:	99 23       	and	r25, r25
    1e12:	f9 f0       	breq	.+62     	; 0x1e52 <udd_sleep_mode+0x56>
    1e14:	90 91 0e 24 	lds	r25, 0x240E	; 0x80240e <sleepmgr_locks+0x1>
    1e18:	91 11       	cpse	r25, r1
    1e1a:	01 c0       	rjmp	.+2      	; 0x1e1e <udd_sleep_mode+0x22>
    1e1c:	ff cf       	rjmp	.-2      	; 0x1e1c <udd_sleep_mode+0x20>
    1e1e:	9f b7       	in	r25, 0x3f	; 63
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	f8 94       	cli
    1e24:	2a 81       	ldd	r18, Y+2	; 0x02
    1e26:	ed e0       	ldi	r30, 0x0D	; 13
    1e28:	f4 e2       	ldi	r31, 0x24	; 36
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	91 50       	subi	r25, 0x01	; 1
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	2f bf       	out	0x3f, r18	; 63
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <udd_sleep_mode+0x56>
    1e34:	90 91 0e 24 	lds	r25, 0x240E	; 0x80240e <sleepmgr_locks+0x1>
    1e38:	9f 3f       	cpi	r25, 0xFF	; 255
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <udd_sleep_mode+0x42>
    1e3c:	ff cf       	rjmp	.-2      	; 0x1e3c <udd_sleep_mode+0x40>
    1e3e:	9f b7       	in	r25, 0x3f	; 63
    1e40:	99 83       	std	Y+1, r25	; 0x01
    1e42:	f8 94       	cli
    1e44:	29 81       	ldd	r18, Y+1	; 0x01
    1e46:	ed e0       	ldi	r30, 0x0D	; 13
    1e48:	f4 e2       	ldi	r31, 0x24	; 36
    1e4a:	91 81       	ldd	r25, Z+1	; 0x01
    1e4c:	9f 5f       	subi	r25, 0xFF	; 255
    1e4e:	91 83       	std	Z+1, r25	; 0x01
    1e50:	2f bf       	out	0x3f, r18	; 63
    1e52:	80 93 ac 22 	sts	0x22AC, r24	; 0x8022ac <udd_b_idle>
    1e56:	05 c0       	rjmp	.+10     	; 0x1e62 <udd_sleep_mode+0x66>
    1e58:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <udd_b_idle>
    1e5c:	99 23       	and	r25, r25
    1e5e:	51 f3       	breq	.-44     	; 0x1e34 <udd_sleep_mode+0x38>
    1e60:	f8 cf       	rjmp	.-16     	; 0x1e52 <udd_sleep_mode+0x56>
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	08 95       	ret

00001e6c <udd_ctrl_init>:
    1e6c:	0f 93       	push	r16
    1e6e:	e8 ec       	ldi	r30, 0xC8	; 200
    1e70:	f4 e0       	ldi	r31, 0x04	; 4
    1e72:	80 81       	ld	r24, Z
    1e74:	8f 7d       	andi	r24, 0xDF	; 223
    1e76:	80 83       	st	Z, r24
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 7d       	andi	r24, 0xDF	; 223
    1e7c:	80 83       	st	Z, r24
    1e7e:	e0 e8       	ldi	r30, 0x80	; 128
    1e80:	f2 e2       	ldi	r31, 0x22	; 34
    1e82:	02 e0       	ldi	r16, 0x02	; 2
    1e84:	05 93       	las	Z, r16
    1e86:	10 92 82 22 	sts	0x2282, r1	; 0x802282 <udd_sram+0x16>
    1e8a:	10 92 83 22 	sts	0x2283, r1	; 0x802283 <udd_sram+0x17>
    1e8e:	00 e2       	ldi	r16, 0x20	; 32
    1e90:	06 93       	lac	Z, r16
    1e92:	00 e4       	ldi	r16, 0x40	; 64
    1e94:	06 93       	lac	Z, r16
    1e96:	e8 e7       	ldi	r30, 0x78	; 120
    1e98:	f2 e2       	ldi	r31, 0x22	; 34
    1e9a:	00 e4       	ldi	r16, 0x40	; 64
    1e9c:	06 93       	lac	Z, r16
    1e9e:	ed ef       	ldi	r30, 0xFD	; 253
    1ea0:	f3 e2       	ldi	r31, 0x23	; 35
    1ea2:	14 86       	std	Z+12, r1	; 0x0c
    1ea4:	15 86       	std	Z+13, r1	; 0x0d
    1ea6:	16 86       	std	Z+14, r1	; 0x0e
    1ea8:	17 86       	std	Z+15, r1	; 0x0f
    1eaa:	12 86       	std	Z+10, r1	; 0x0a
    1eac:	13 86       	std	Z+11, r1	; 0x0b
    1eae:	10 92 68 22 	sts	0x2268, r1	; 0x802268 <udd_ep_control_state>
    1eb2:	0f 91       	pop	r16
    1eb4:	08 95       	ret

00001eb6 <udd_ctrl_stall_data>:
    1eb6:	0f 93       	push	r16
    1eb8:	85 e0       	ldi	r24, 0x05	; 5
    1eba:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    1ebe:	e1 e8       	ldi	r30, 0x81	; 129
    1ec0:	f2 e2       	ldi	r31, 0x22	; 34
    1ec2:	04 e0       	ldi	r16, 0x04	; 4
    1ec4:	05 93       	las	Z, r16
    1ec6:	e9 e7       	ldi	r30, 0x79	; 121
    1ec8:	f2 e2       	ldi	r31, 0x22	; 34
    1eca:	04 e0       	ldi	r16, 0x04	; 4
    1ecc:	05 93       	las	Z, r16
    1ece:	0f 91       	pop	r16
    1ed0:	08 95       	ret

00001ed2 <udd_ctrl_send_zlp_in>:
    1ed2:	0f 93       	push	r16
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    1eda:	10 92 82 22 	sts	0x2282, r1	; 0x802282 <udd_sram+0x16>
    1ede:	10 92 83 22 	sts	0x2283, r1	; 0x802283 <udd_sram+0x17>
    1ee2:	e0 e8       	ldi	r30, 0x80	; 128
    1ee4:	f2 e2       	ldi	r31, 0x22	; 34
    1ee6:	02 e0       	ldi	r16, 0x02	; 2
    1ee8:	06 93       	lac	Z, r16
    1eea:	0f 91       	pop	r16
    1eec:	08 95       	ret

00001eee <udd_ctrl_endofrequest>:
    1eee:	e0 91 09 24 	lds	r30, 0x2409	; 0x802409 <udd_g_ctrlreq+0xc>
    1ef2:	f0 91 0a 24 	lds	r31, 0x240A	; 0x80240a <udd_g_ctrlreq+0xd>
    1ef6:	30 97       	sbiw	r30, 0x00	; 0
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <udd_ctrl_endofrequest+0xe>
    1efa:	19 95       	eicall
    1efc:	08 95       	ret

00001efe <udd_ctrl_in_sent>:
    1efe:	0f 93       	push	r16
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    1f08:	83 30       	cpi	r24, 0x03	; 3
    1f0a:	19 f4       	brne	.+6      	; 0x1f12 <udd_ctrl_in_sent+0x14>
    1f0c:	f0 df       	rcall	.-32     	; 0x1eee <udd_ctrl_endofrequest>
    1f0e:	ae df       	rcall	.-164    	; 0x1e6c <udd_ctrl_init>
    1f10:	5e c0       	rjmp	.+188    	; 0x1fce <udd_ctrl_in_sent+0xd0>
    1f12:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    1f16:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    1f1a:	c0 91 07 24 	lds	r28, 0x2407	; 0x802407 <udd_g_ctrlreq+0xa>
    1f1e:	d0 91 08 24 	lds	r29, 0x2408	; 0x802408 <udd_g_ctrlreq+0xb>
    1f22:	c8 1b       	sub	r28, r24
    1f24:	d9 0b       	sbc	r29, r25
    1f26:	71 f5       	brne	.+92     	; 0x1f84 <udd_ctrl_in_sent+0x86>
    1f28:	20 91 66 22 	lds	r18, 0x2266	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    1f2c:	30 91 67 22 	lds	r19, 0x2267	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f30:	82 0f       	add	r24, r18
    1f32:	93 1f       	adc	r25, r19
    1f34:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    1f38:	90 93 67 22 	sts	0x2267, r25	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f3c:	20 91 03 24 	lds	r18, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    1f40:	30 91 04 24 	lds	r19, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    1f44:	82 17       	cp	r24, r18
    1f46:	93 07       	cpc	r25, r19
    1f48:	21 f0       	breq	.+8      	; 0x1f52 <udd_ctrl_in_sent+0x54>
    1f4a:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <b_shortpacket.5472>
    1f4e:	88 23       	and	r24, r24
    1f50:	41 f0       	breq	.+16     	; 0x1f62 <udd_ctrl_in_sent+0x64>
    1f52:	84 e0       	ldi	r24, 0x04	; 4
    1f54:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    1f58:	e8 e7       	ldi	r30, 0x78	; 120
    1f5a:	f2 e2       	ldi	r31, 0x22	; 34
    1f5c:	02 e0       	ldi	r16, 0x02	; 2
    1f5e:	06 93       	lac	Z, r16
    1f60:	36 c0       	rjmp	.+108    	; 0x1fce <udd_ctrl_in_sent+0xd0>
    1f62:	e0 91 0b 24 	lds	r30, 0x240B	; 0x80240b <udd_g_ctrlreq+0xe>
    1f66:	f0 91 0c 24 	lds	r31, 0x240C	; 0x80240c <udd_g_ctrlreq+0xf>
    1f6a:	30 97       	sbiw	r30, 0x00	; 0
    1f6c:	99 f0       	breq	.+38     	; 0x1f94 <udd_ctrl_in_sent+0x96>
    1f6e:	19 95       	eicall
    1f70:	88 23       	and	r24, r24
    1f72:	81 f0       	breq	.+32     	; 0x1f94 <udd_ctrl_in_sent+0x96>
    1f74:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
    1f78:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    1f7c:	c0 91 07 24 	lds	r28, 0x2407	; 0x802407 <udd_g_ctrlreq+0xa>
    1f80:	d0 91 08 24 	lds	r29, 0x2408	; 0x802408 <udd_g_ctrlreq+0xb>
    1f84:	c0 34       	cpi	r28, 0x40	; 64
    1f86:	d1 05       	cpc	r29, r1
    1f88:	28 f0       	brcs	.+10     	; 0x1f94 <udd_ctrl_in_sent+0x96>
    1f8a:	10 92 7f 21 	sts	0x217F, r1	; 0x80217f <b_shortpacket.5472>
    1f8e:	c0 e4       	ldi	r28, 0x40	; 64
    1f90:	d0 e0       	ldi	r29, 0x00	; 0
    1f92:	03 c0       	rjmp	.+6      	; 0x1f9a <udd_ctrl_in_sent+0x9c>
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	80 93 7f 21 	sts	0x217F, r24	; 0x80217f <b_shortpacket.5472>
    1f9a:	ec e6       	ldi	r30, 0x6C	; 108
    1f9c:	f2 e2       	ldi	r31, 0x22	; 34
    1f9e:	c6 8b       	std	Z+22, r28	; 0x16
    1fa0:	d7 8b       	std	Z+23, r29	; 0x17
    1fa2:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    1fa6:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    1faa:	20 91 05 24 	lds	r18, 0x2405	; 0x802405 <udd_g_ctrlreq+0x8>
    1fae:	30 91 06 24 	lds	r19, 0x2406	; 0x802406 <udd_g_ctrlreq+0x9>
    1fb2:	28 0f       	add	r18, r24
    1fb4:	39 1f       	adc	r19, r25
    1fb6:	20 8f       	std	Z+24, r18	; 0x18
    1fb8:	31 8f       	std	Z+25, r19	; 0x19
    1fba:	c8 0f       	add	r28, r24
    1fbc:	d9 1f       	adc	r29, r25
    1fbe:	c0 93 64 22 	sts	0x2264, r28	; 0x802264 <udd_ctrl_payload_nb_trans>
    1fc2:	d0 93 65 22 	sts	0x2265, r29	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    1fc6:	e0 e8       	ldi	r30, 0x80	; 128
    1fc8:	f2 e2       	ldi	r31, 0x22	; 34
    1fca:	02 e0       	ldi	r16, 0x02	; 2
    1fcc:	06 93       	lac	Z, r16
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	0f 91       	pop	r16
    1fd4:	08 95       	ret

00001fd6 <udd_ep_get_size>:
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	81 81       	ldd	r24, Z+1	; 0x01
    1fda:	e8 2f       	mov	r30, r24
    1fdc:	e7 70       	andi	r30, 0x07	; 7
    1fde:	8e 2f       	mov	r24, r30
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	31 97       	sbiw	r30, 0x01	; 1
    1fe6:	e7 30       	cpi	r30, 0x07	; 7
    1fe8:	f1 05       	cpc	r31, r1
    1fea:	d8 f4       	brcc	.+54     	; 0x2022 <udd_ep_get_size+0x4c>
    1fec:	88 27       	eor	r24, r24
    1fee:	e2 50       	subi	r30, 0x02	; 2
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ff4:	0c 94 c6 23 	jmp	0x478c	; 0x478c <__tablejump2__>
    1ff8:	80 e1       	ldi	r24, 0x10	; 16
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	08 95       	ret
    1ffe:	80 e2       	ldi	r24, 0x20	; 32
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	08 95       	ret
    2004:	80 e4       	ldi	r24, 0x40	; 64
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	08 95       	ret
    200a:	80 e8       	ldi	r24, 0x80	; 128
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	08 95       	ret
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	08 95       	ret
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	92 e0       	ldi	r25, 0x02	; 2
    201a:	08 95       	ret
    201c:	8f ef       	ldi	r24, 0xFF	; 255
    201e:	93 e0       	ldi	r25, 0x03	; 3
    2020:	08 95       	ret
    2022:	88 e0       	ldi	r24, 0x08	; 8
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	08 95       	ret

00002028 <udd_ep_get_job>:
    2028:	28 2f       	mov	r18, r24
    202a:	2f 70       	andi	r18, 0x0F	; 15
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	22 0f       	add	r18, r18
    2030:	33 1f       	adc	r19, r19
    2032:	08 2e       	mov	r0, r24
    2034:	00 0c       	add	r0, r0
    2036:	99 0b       	sbc	r25, r25
    2038:	88 27       	eor	r24, r24
    203a:	99 0f       	add	r25, r25
    203c:	88 1f       	adc	r24, r24
    203e:	99 27       	eor	r25, r25
    2040:	82 0f       	add	r24, r18
    2042:	93 1f       	adc	r25, r19
    2044:	02 97       	sbiw	r24, 0x02	; 2
    2046:	9c 01       	movw	r18, r24
    2048:	22 0f       	add	r18, r18
    204a:	33 1f       	adc	r19, r19
    204c:	22 0f       	add	r18, r18
    204e:	33 1f       	adc	r19, r19
    2050:	22 0f       	add	r18, r18
    2052:	33 1f       	adc	r19, r19
    2054:	82 0f       	add	r24, r18
    2056:	93 1f       	adc	r25, r19
    2058:	80 50       	subi	r24, 0x00	; 0
    205a:	9e 4d       	sbci	r25, 0xDE	; 222
    205c:	08 95       	ret

0000205e <udd_ctrl_interrupt_tc_setup>:
    205e:	0f 93       	push	r16
    2060:	cf 93       	push	r28
    2062:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2066:	80 ff       	sbrs	r24, 0
    2068:	65 c0       	rjmp	.+202    	; 0x2134 <udd_ctrl_interrupt_tc_setup+0xd6>
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2070:	e8 e7       	ldi	r30, 0x78	; 120
    2072:	f2 e2       	ldi	r31, 0x22	; 34
    2074:	00 e8       	ldi	r16, 0x80	; 128
    2076:	06 93       	lac	Z, r16
    2078:	e0 e8       	ldi	r30, 0x80	; 128
    207a:	f2 e2       	ldi	r31, 0x22	; 34
    207c:	00 e8       	ldi	r16, 0x80	; 128
    207e:	06 93       	lac	Z, r16
    2080:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2084:	e8 e7       	ldi	r30, 0x78	; 120
    2086:	f2 e2       	ldi	r31, 0x22	; 34
    2088:	00 e1       	ldi	r16, 0x10	; 16
    208a:	06 93       	lac	Z, r16
    208c:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    2090:	88 23       	and	r24, r24
    2092:	29 f0       	breq	.+10     	; 0x209e <udd_ctrl_interrupt_tc_setup+0x40>
    2094:	83 50       	subi	r24, 0x03	; 3
    2096:	82 30       	cpi	r24, 0x02	; 2
    2098:	08 f4       	brcc	.+2      	; 0x209c <udd_ctrl_interrupt_tc_setup+0x3e>
    209a:	29 df       	rcall	.-430    	; 0x1eee <udd_ctrl_endofrequest>
    209c:	e7 de       	rcall	.-562    	; 0x1e6c <udd_ctrl_init>
    209e:	80 91 7a 22 	lds	r24, 0x227A	; 0x80227a <udd_sram+0xe>
    20a2:	90 91 7b 22 	lds	r25, 0x227B	; 0x80227b <udd_sram+0xf>
    20a6:	08 97       	sbiw	r24, 0x08	; 8
    20a8:	09 f0       	breq	.+2      	; 0x20ac <udd_ctrl_interrupt_tc_setup+0x4e>
    20aa:	46 c0       	rjmp	.+140    	; 0x2138 <udd_ctrl_interrupt_tc_setup+0xda>
    20ac:	88 e0       	ldi	r24, 0x08	; 8
    20ae:	e4 e2       	ldi	r30, 0x24	; 36
    20b0:	f2 e2       	ldi	r31, 0x22	; 34
    20b2:	ad ef       	ldi	r26, 0xFD	; 253
    20b4:	b3 e2       	ldi	r27, 0x23	; 35
    20b6:	01 90       	ld	r0, Z+
    20b8:	0d 92       	st	X+, r0
    20ba:	8a 95       	dec	r24
    20bc:	e1 f7       	brne	.-8      	; 0x20b6 <udd_ctrl_interrupt_tc_setup+0x58>
    20be:	e8 ec       	ldi	r30, 0xC8	; 200
    20c0:	f4 e0       	ldi	r31, 0x04	; 4
    20c2:	80 81       	ld	r24, Z
    20c4:	80 62       	ori	r24, 0x20	; 32
    20c6:	80 83       	st	Z, r24
    20c8:	80 81       	ld	r24, Z
    20ca:	80 62       	ori	r24, 0x20	; 32
    20cc:	80 83       	st	Z, r24
    20ce:	0e 94 60 20 	call	0x40c0	; 0x40c0 <udc_process_setup>
    20d2:	c8 2f       	mov	r28, r24
    20d4:	81 11       	cpse	r24, r1
    20d6:	03 c0       	rjmp	.+6      	; 0x20de <udd_ctrl_interrupt_tc_setup+0x80>
    20d8:	ee de       	rcall	.-548    	; 0x1eb6 <udd_ctrl_stall_data>
    20da:	c1 e0       	ldi	r28, 0x01	; 1
    20dc:	2e c0       	rjmp	.+92     	; 0x213a <udd_ctrl_interrupt_tc_setup+0xdc>
    20de:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <udd_g_ctrlreq>
    20e2:	88 23       	and	r24, r24
    20e4:	6c f4       	brge	.+26     	; 0x2100 <udd_ctrl_interrupt_tc_setup+0xa2>
    20e6:	10 92 66 22 	sts	0x2266, r1	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    20ea:	10 92 67 22 	sts	0x2267, r1	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    20ee:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
    20f2:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    20fc:	00 df       	rcall	.-512    	; 0x1efe <udd_ctrl_in_sent>
    20fe:	1d c0       	rjmp	.+58     	; 0x213a <udd_ctrl_interrupt_tc_setup+0xdc>
    2100:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    2104:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    2108:	89 2b       	or	r24, r25
    210a:	11 f4       	brne	.+4      	; 0x2110 <udd_ctrl_interrupt_tc_setup+0xb2>
    210c:	e2 de       	rcall	.-572    	; 0x1ed2 <udd_ctrl_send_zlp_in>
    210e:	15 c0       	rjmp	.+42     	; 0x213a <udd_ctrl_interrupt_tc_setup+0xdc>
    2110:	10 92 66 22 	sts	0x2266, r1	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2114:	10 92 67 22 	sts	0x2267, r1	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    2118:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
    211c:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
    2126:	e8 e7       	ldi	r30, 0x78	; 120
    2128:	f2 e2       	ldi	r31, 0x22	; 34
    212a:	02 e0       	ldi	r16, 0x02	; 2
    212c:	06 93       	lac	Z, r16
    212e:	00 e2       	ldi	r16, 0x20	; 32
    2130:	06 93       	lac	Z, r16
    2132:	03 c0       	rjmp	.+6      	; 0x213a <udd_ctrl_interrupt_tc_setup+0xdc>
    2134:	c0 e0       	ldi	r28, 0x00	; 0
    2136:	01 c0       	rjmp	.+2      	; 0x213a <udd_ctrl_interrupt_tc_setup+0xdc>
    2138:	c1 e0       	ldi	r28, 0x01	; 1
    213a:	8c 2f       	mov	r24, r28
    213c:	cf 91       	pop	r28
    213e:	0f 91       	pop	r16
    2140:	08 95       	ret

00002142 <udd_ep_trans_complet>:
    2142:	8f 92       	push	r8
    2144:	9f 92       	push	r9
    2146:	af 92       	push	r10
    2148:	bf 92       	push	r11
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	d8 2e       	mov	r13, r24
    215a:	66 df       	rcall	.-308    	; 0x2028 <udd_ep_get_job>
    215c:	8c 01       	movw	r16, r24
    215e:	cd 2d       	mov	r28, r13
    2160:	cf 70       	andi	r28, 0x0F	; 15
    2162:	d0 e0       	ldi	r29, 0x00	; 0
    2164:	ce 01       	movw	r24, r28
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	cd 2d       	mov	r28, r13
    216c:	0d 2c       	mov	r0, r13
    216e:	00 0c       	add	r0, r0
    2170:	dd 0b       	sbc	r29, r29
    2172:	cc 27       	eor	r28, r28
    2174:	dd 0f       	add	r29, r29
    2176:	cc 1f       	adc	r28, r28
    2178:	dd 27       	eor	r29, r29
    217a:	c8 0f       	add	r28, r24
    217c:	d9 1f       	adc	r29, r25
    217e:	ce 01       	movw	r24, r28
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	9c 01       	movw	r18, r24
    218e:	28 58       	subi	r18, 0x88	; 136
    2190:	3d 4d       	sbci	r19, 0xDD	; 221
    2192:	79 01       	movw	r14, r18
    2194:	c9 01       	movw	r24, r18
    2196:	1f df       	rcall	.-450    	; 0x1fd6 <udd_ep_get_size>
    2198:	4c 01       	movw	r8, r24
    219a:	dd 20       	and	r13, r13
    219c:	0c f0       	brlt	.+2      	; 0x21a0 <udd_ep_trans_complet+0x5e>
    219e:	7b c0       	rjmp	.+246    	; 0x2296 <udd_ep_trans_complet+0x154>
    21a0:	fe 01       	movw	r30, r28
    21a2:	ee 0f       	add	r30, r30
    21a4:	ff 1f       	adc	r31, r31
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	ee 0f       	add	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	e4 59       	subi	r30, 0x94	; 148
    21b0:	fd 4d       	sbci	r31, 0xDD	; 221
    21b2:	22 89       	ldd	r18, Z+18	; 0x12
    21b4:	33 89       	ldd	r19, Z+19	; 0x13
    21b6:	d8 01       	movw	r26, r16
    21b8:	15 96       	adiw	r26, 0x05	; 5
    21ba:	8d 91       	ld	r24, X+
    21bc:	9c 91       	ld	r25, X
    21be:	16 97       	sbiw	r26, 0x06	; 6
    21c0:	82 0f       	add	r24, r18
    21c2:	93 1f       	adc	r25, r19
    21c4:	15 96       	adiw	r26, 0x05	; 5
    21c6:	8d 93       	st	X+, r24
    21c8:	9c 93       	st	X, r25
    21ca:	16 97       	sbiw	r26, 0x06	; 6
    21cc:	13 96       	adiw	r26, 0x03	; 3
    21ce:	2d 91       	ld	r18, X+
    21d0:	3c 91       	ld	r19, X
    21d2:	14 97       	sbiw	r26, 0x04	; 4
    21d4:	82 17       	cp	r24, r18
    21d6:	93 07       	cpc	r25, r19
    21d8:	09 f4       	brne	.+2      	; 0x21dc <udd_ep_trans_complet+0x9a>
    21da:	47 c0       	rjmp	.+142    	; 0x226a <udd_ep_trans_complet+0x128>
    21dc:	28 1b       	sub	r18, r24
    21de:	39 0b       	sbc	r19, r25
    21e0:	21 15       	cp	r18, r1
    21e2:	b4 e0       	ldi	r27, 0x04	; 4
    21e4:	3b 07       	cpc	r19, r27
    21e6:	40 f0       	brcs	.+16     	; 0x21f8 <udd_ep_trans_complet+0xb6>
    21e8:	2f ef       	ldi	r18, 0xFF	; 255
    21ea:	33 e0       	ldi	r19, 0x03	; 3
    21ec:	c9 01       	movw	r24, r18
    21ee:	b4 01       	movw	r22, r8
    21f0:	0e 94 90 23 	call	0x4720	; 0x4720 <__udivmodhi4>
    21f4:	28 1b       	sub	r18, r24
    21f6:	39 0b       	sbc	r19, r25
    21f8:	f8 01       	movw	r30, r16
    21fa:	80 81       	ld	r24, Z
    21fc:	81 ff       	sbrs	r24, 1
    21fe:	0a c0       	rjmp	.+20     	; 0x2214 <udd_ep_trans_complet+0xd2>
    2200:	c9 01       	movw	r24, r18
    2202:	b4 01       	movw	r22, r8
    2204:	0e 94 90 23 	call	0x4720	; 0x4720 <__udivmodhi4>
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	89 2b       	or	r24, r25
    220c:	09 f0       	breq	.+2      	; 0x2210 <udd_ep_trans_complet+0xce>
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	84 2f       	mov	r24, r20
    2212:	01 c0       	rjmp	.+2      	; 0x2216 <udd_ep_trans_complet+0xd4>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	d8 01       	movw	r26, r16
    2218:	9c 91       	ld	r25, X
    221a:	80 fb       	bst	r24, 0
    221c:	91 f9       	bld	r25, 1
    221e:	9c 93       	st	X, r25
    2220:	fe 01       	movw	r30, r28
    2222:	ee 0f       	add	r30, r30
    2224:	ff 1f       	adc	r31, r31
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	e4 59       	subi	r30, 0x94	; 148
    2230:	fd 4d       	sbci	r31, 0xDD	; 221
    2232:	12 8a       	std	Z+18, r1	; 0x12
    2234:	13 8a       	std	Z+19, r1	; 0x13
    2236:	26 87       	std	Z+14, r18	; 0x0e
    2238:	37 87       	std	Z+15, r19	; 0x0f
    223a:	11 96       	adiw	r26, 0x01	; 1
    223c:	2d 91       	ld	r18, X+
    223e:	3c 91       	ld	r19, X
    2240:	12 97       	sbiw	r26, 0x02	; 2
    2242:	15 96       	adiw	r26, 0x05	; 5
    2244:	8d 91       	ld	r24, X+
    2246:	9c 91       	ld	r25, X
    2248:	16 97       	sbiw	r26, 0x06	; 6
    224a:	82 0f       	add	r24, r18
    224c:	93 1f       	adc	r25, r19
    224e:	cc 0f       	add	r28, r28
    2250:	dd 1f       	adc	r29, r29
    2252:	cc 0f       	add	r28, r28
    2254:	dd 1f       	adc	r29, r29
    2256:	cc 0f       	add	r28, r28
    2258:	dd 1f       	adc	r29, r29
    225a:	c4 58       	subi	r28, 0x84	; 132
    225c:	dd 4d       	sbci	r29, 0xDD	; 221
    225e:	88 83       	st	Y, r24
    2260:	99 83       	std	Y+1, r25	; 0x01
    2262:	f7 01       	movw	r30, r14
    2264:	02 e0       	ldi	r16, 0x02	; 2
    2266:	06 93       	lac	Z, r16
    2268:	e4 c0       	rjmp	.+456    	; 0x2432 <udd_ep_trans_complet+0x2f0>
    226a:	d8 01       	movw	r26, r16
    226c:	8c 91       	ld	r24, X
    226e:	81 ff       	sbrs	r24, 1
    2270:	cd c0       	rjmp	.+410    	; 0x240c <udd_ep_trans_complet+0x2ca>
    2272:	8d 7f       	andi	r24, 0xFD	; 253
    2274:	8c 93       	st	X, r24
    2276:	cc 0f       	add	r28, r28
    2278:	dd 1f       	adc	r29, r29
    227a:	cc 0f       	add	r28, r28
    227c:	dd 1f       	adc	r29, r29
    227e:	cc 0f       	add	r28, r28
    2280:	dd 1f       	adc	r29, r29
    2282:	c4 59       	subi	r28, 0x94	; 148
    2284:	dd 4d       	sbci	r29, 0xDD	; 221
    2286:	1a 8a       	std	Y+18, r1	; 0x12
    2288:	1b 8a       	std	Y+19, r1	; 0x13
    228a:	1e 86       	std	Y+14, r1	; 0x0e
    228c:	1f 86       	std	Y+15, r1	; 0x0f
    228e:	f7 01       	movw	r30, r14
    2290:	02 e0       	ldi	r16, 0x02	; 2
    2292:	06 93       	lac	Z, r16
    2294:	ce c0       	rjmp	.+412    	; 0x2432 <udd_ep_trans_complet+0x2f0>
    2296:	fe 01       	movw	r30, r28
    2298:	ee 0f       	add	r30, r30
    229a:	ff 1f       	adc	r31, r31
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	ee 0f       	add	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	e4 59       	subi	r30, 0x94	; 148
    22a6:	fd 4d       	sbci	r31, 0xDD	; 221
    22a8:	a6 84       	ldd	r10, Z+14	; 0x0e
    22aa:	b7 84       	ldd	r11, Z+15	; 0x0f
    22ac:	d8 01       	movw	r26, r16
    22ae:	8c 91       	ld	r24, X
    22b0:	82 ff       	sbrs	r24, 2
    22b2:	1b c0       	rjmp	.+54     	; 0x22ea <udd_ep_trans_complet+0x1a8>
    22b4:	11 96       	adiw	r26, 0x01	; 1
    22b6:	ed 91       	ld	r30, X+
    22b8:	fc 91       	ld	r31, X
    22ba:	12 97       	sbiw	r26, 0x02	; 2
    22bc:	15 96       	adiw	r26, 0x05	; 5
    22be:	2d 91       	ld	r18, X+
    22c0:	3c 91       	ld	r19, X
    22c2:	16 97       	sbiw	r26, 0x06	; 6
    22c4:	13 96       	adiw	r26, 0x03	; 3
    22c6:	8d 91       	ld	r24, X+
    22c8:	9c 91       	ld	r25, X
    22ca:	14 97       	sbiw	r26, 0x04	; 4
    22cc:	b4 01       	movw	r22, r8
    22ce:	0e 94 90 23 	call	0x4720	; 0x4720 <__udivmodhi4>
    22d2:	b0 e4       	ldi	r27, 0x40	; 64
    22d4:	db 9e       	mul	r13, r27
    22d6:	b0 01       	movw	r22, r0
    22d8:	11 24       	eor	r1, r1
    22da:	60 5c       	subi	r22, 0xC0	; 192
    22dc:	7e 4d       	sbci	r23, 0xDE	; 222
    22de:	ac 01       	movw	r20, r24
    22e0:	cf 01       	movw	r24, r30
    22e2:	82 0f       	add	r24, r18
    22e4:	93 1f       	adc	r25, r19
    22e6:	0e 94 dd 23 	call	0x47ba	; 0x47ba <memcpy>
    22ea:	f8 01       	movw	r30, r16
    22ec:	25 81       	ldd	r18, Z+5	; 0x05
    22ee:	36 81       	ldd	r19, Z+6	; 0x06
    22f0:	2a 0d       	add	r18, r10
    22f2:	3b 1d       	adc	r19, r11
    22f4:	25 83       	std	Z+5, r18	; 0x05
    22f6:	36 83       	std	Z+6, r19	; 0x06
    22f8:	83 81       	ldd	r24, Z+3	; 0x03
    22fa:	94 81       	ldd	r25, Z+4	; 0x04
    22fc:	82 17       	cp	r24, r18
    22fe:	93 07       	cpc	r25, r19
    2300:	68 f4       	brcc	.+26     	; 0x231c <udd_ep_trans_complet+0x1da>
    2302:	85 83       	std	Z+5, r24	; 0x05
    2304:	96 83       	std	Z+6, r25	; 0x06
    2306:	cc 0f       	add	r28, r28
    2308:	dd 1f       	adc	r29, r29
    230a:	cc 0f       	add	r28, r28
    230c:	dd 1f       	adc	r29, r29
    230e:	cc 0f       	add	r28, r28
    2310:	dd 1f       	adc	r29, r29
    2312:	c4 59       	subi	r28, 0x94	; 148
    2314:	dd 4d       	sbci	r29, 0xDD	; 221
    2316:	8a 89       	ldd	r24, Y+18	; 0x12
    2318:	9b 89       	ldd	r25, Y+19	; 0x13
    231a:	78 c0       	rjmp	.+240    	; 0x240c <udd_ep_trans_complet+0x2ca>
    231c:	fe 01       	movw	r30, r28
    231e:	ee 0f       	add	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	ee 0f       	add	r30, r30
    2324:	ff 1f       	adc	r31, r31
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	e4 59       	subi	r30, 0x94	; 148
    232c:	fd 4d       	sbci	r31, 0xDD	; 221
    232e:	42 89       	ldd	r20, Z+18	; 0x12
    2330:	53 89       	ldd	r21, Z+19	; 0x13
    2332:	a4 16       	cp	r10, r20
    2334:	b5 06       	cpc	r11, r21
    2336:	09 f0       	breq	.+2      	; 0x233a <udd_ep_trans_complet+0x1f8>
    2338:	69 c0       	rjmp	.+210    	; 0x240c <udd_ep_trans_complet+0x2ca>
    233a:	28 17       	cp	r18, r24
    233c:	39 07       	cpc	r19, r25
    233e:	09 f4       	brne	.+2      	; 0x2342 <udd_ep_trans_complet+0x200>
    2340:	65 c0       	rjmp	.+202    	; 0x240c <udd_ep_trans_complet+0x2ca>
    2342:	ac 01       	movw	r20, r24
    2344:	42 1b       	sub	r20, r18
    2346:	53 0b       	sbc	r21, r19
    2348:	9a 01       	movw	r18, r20
    234a:	21 15       	cp	r18, r1
    234c:	54 e0       	ldi	r21, 0x04	; 4
    234e:	35 07       	cpc	r19, r21
    2350:	48 f0       	brcs	.+18     	; 0x2364 <udd_ep_trans_complet+0x222>
    2352:	2f ef       	ldi	r18, 0xFF	; 255
    2354:	33 e0       	ldi	r19, 0x03	; 3
    2356:	c9 01       	movw	r24, r18
    2358:	b4 01       	movw	r22, r8
    235a:	0e 94 90 23 	call	0x4720	; 0x4720 <__udivmodhi4>
    235e:	28 1b       	sub	r18, r24
    2360:	39 0b       	sbc	r19, r25
    2362:	06 c0       	rjmp	.+12     	; 0x2370 <udd_ep_trans_complet+0x22e>
    2364:	c9 01       	movw	r24, r18
    2366:	b4 01       	movw	r22, r8
    2368:	0e 94 90 23 	call	0x4720	; 0x4720 <__udivmodhi4>
    236c:	28 1b       	sub	r18, r24
    236e:	39 0b       	sbc	r19, r25
    2370:	fe 01       	movw	r30, r28
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	ee 0f       	add	r30, r30
    2378:	ff 1f       	adc	r31, r31
    237a:	ee 0f       	add	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	e4 59       	subi	r30, 0x94	; 148
    2380:	fd 4d       	sbci	r31, 0xDD	; 221
    2382:	16 86       	std	Z+14, r1	; 0x0e
    2384:	17 86       	std	Z+15, r1	; 0x0f
    2386:	28 15       	cp	r18, r8
    2388:	39 05       	cpc	r19, r9
    238a:	00 f5       	brcc	.+64     	; 0x23cc <udd_ep_trans_complet+0x28a>
    238c:	d8 01       	movw	r26, r16
    238e:	8c 91       	ld	r24, X
    2390:	84 60       	ori	r24, 0x04	; 4
    2392:	8c 93       	st	X, r24
    2394:	b0 e4       	ldi	r27, 0x40	; 64
    2396:	db 9e       	mul	r13, r27
    2398:	c0 01       	movw	r24, r0
    239a:	11 24       	eor	r1, r1
    239c:	80 5c       	subi	r24, 0xC0	; 192
    239e:	9e 4d       	sbci	r25, 0xDE	; 222
    23a0:	fe 01       	movw	r30, r28
    23a2:	ee 0f       	add	r30, r30
    23a4:	ff 1f       	adc	r31, r31
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	e4 58       	subi	r30, 0x84	; 132
    23b0:	fd 4d       	sbci	r31, 0xDD	; 221
    23b2:	80 83       	st	Z, r24
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	cc 0f       	add	r28, r28
    23b8:	dd 1f       	adc	r29, r29
    23ba:	cc 0f       	add	r28, r28
    23bc:	dd 1f       	adc	r29, r29
    23be:	cc 0f       	add	r28, r28
    23c0:	dd 1f       	adc	r29, r29
    23c2:	c4 59       	subi	r28, 0x94	; 148
    23c4:	dd 4d       	sbci	r29, 0xDD	; 221
    23c6:	8a 8a       	std	Y+18, r8	; 0x12
    23c8:	9b 8a       	std	Y+19, r9	; 0x13
    23ca:	1c c0       	rjmp	.+56     	; 0x2404 <udd_ep_trans_complet+0x2c2>
    23cc:	f8 01       	movw	r30, r16
    23ce:	41 81       	ldd	r20, Z+1	; 0x01
    23d0:	52 81       	ldd	r21, Z+2	; 0x02
    23d2:	85 81       	ldd	r24, Z+5	; 0x05
    23d4:	96 81       	ldd	r25, Z+6	; 0x06
    23d6:	84 0f       	add	r24, r20
    23d8:	95 1f       	adc	r25, r21
    23da:	fe 01       	movw	r30, r28
    23dc:	ee 0f       	add	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	ee 0f       	add	r30, r30
    23e6:	ff 1f       	adc	r31, r31
    23e8:	e4 58       	subi	r30, 0x84	; 132
    23ea:	fd 4d       	sbci	r31, 0xDD	; 221
    23ec:	80 83       	st	Z, r24
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	cc 0f       	add	r28, r28
    23f2:	dd 1f       	adc	r29, r29
    23f4:	cc 0f       	add	r28, r28
    23f6:	dd 1f       	adc	r29, r29
    23f8:	cc 0f       	add	r28, r28
    23fa:	dd 1f       	adc	r29, r29
    23fc:	c4 59       	subi	r28, 0x94	; 148
    23fe:	dd 4d       	sbci	r29, 0xDD	; 221
    2400:	2a 8b       	std	Y+18, r18	; 0x12
    2402:	3b 8b       	std	Y+19, r19	; 0x13
    2404:	f7 01       	movw	r30, r14
    2406:	02 e0       	ldi	r16, 0x02	; 2
    2408:	06 93       	lac	Z, r16
    240a:	13 c0       	rjmp	.+38     	; 0x2432 <udd_ep_trans_complet+0x2f0>
    240c:	d8 01       	movw	r26, r16
    240e:	8c 91       	ld	r24, X
    2410:	80 ff       	sbrs	r24, 0
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <udd_ep_trans_complet+0x2f0>
    2414:	8e 7f       	andi	r24, 0xFE	; 254
    2416:	8c 93       	st	X, r24
    2418:	17 96       	adiw	r26, 0x07	; 7
    241a:	ed 91       	ld	r30, X+
    241c:	fc 91       	ld	r31, X
    241e:	18 97       	sbiw	r26, 0x08	; 8
    2420:	30 97       	sbiw	r30, 0x00	; 0
    2422:	39 f0       	breq	.+14     	; 0x2432 <udd_ep_trans_complet+0x2f0>
    2424:	15 96       	adiw	r26, 0x05	; 5
    2426:	6d 91       	ld	r22, X+
    2428:	7c 91       	ld	r23, X
    242a:	16 97       	sbiw	r26, 0x06	; 6
    242c:	4d 2d       	mov	r20, r13
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	19 95       	eicall
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	1f 91       	pop	r17
    2438:	0f 91       	pop	r16
    243a:	ff 90       	pop	r15
    243c:	ef 90       	pop	r14
    243e:	df 90       	pop	r13
    2440:	bf 90       	pop	r11
    2442:	af 90       	pop	r10
    2444:	9f 90       	pop	r9
    2446:	8f 90       	pop	r8
    2448:	08 95       	ret

0000244a <udd_attach>:
    244a:	1f 93       	push	r17
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	1f 92       	push	r1
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	8f b7       	in	r24, 0x3f	; 63
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	f8 94       	cli
    245c:	19 81       	ldd	r17, Y+1	; 0x01
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	cd dc       	rcall	.-1638   	; 0x1dfc <udd_sleep_mode>
    2462:	ea ec       	ldi	r30, 0xCA	; 202
    2464:	f4 e0       	ldi	r31, 0x04	; 4
    2466:	80 e4       	ldi	r24, 0x40	; 64
    2468:	80 83       	st	Z, r24
    246a:	80 e2       	ldi	r24, 0x20	; 32
    246c:	80 83       	st	Z, r24
    246e:	e1 ec       	ldi	r30, 0xC1	; 193
    2470:	f4 e0       	ldi	r31, 0x04	; 4
    2472:	80 81       	ld	r24, Z
    2474:	81 60       	ori	r24, 0x01	; 1
    2476:	80 83       	st	Z, r24
    2478:	a9 ec       	ldi	r26, 0xC9	; 201
    247a:	b4 e0       	ldi	r27, 0x04	; 4
    247c:	8c 91       	ld	r24, X
    247e:	82 60       	ori	r24, 0x02	; 2
    2480:	8c 93       	st	X, r24
    2482:	e8 ec       	ldi	r30, 0xC8	; 200
    2484:	f4 e0       	ldi	r31, 0x04	; 4
    2486:	80 81       	ld	r24, Z
    2488:	80 64       	ori	r24, 0x40	; 64
    248a:	80 83       	st	Z, r24
    248c:	8c 91       	ld	r24, X
    248e:	81 60       	ori	r24, 0x01	; 1
    2490:	8c 93       	st	X, r24
    2492:	80 81       	ld	r24, Z
    2494:	80 68       	ori	r24, 0x80	; 128
    2496:	80 83       	st	Z, r24
    2498:	1f bf       	out	0x3f, r17	; 63
    249a:	0f 90       	pop	r0
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	08 95       	ret

000024a4 <udd_enable>:
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	1f 92       	push	r1
    24ae:	1f 92       	push	r1
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	00 e6       	ldi	r16, 0x60	; 96
    24b6:	10 e0       	ldi	r17, 0x00	; 0
    24b8:	f8 01       	movw	r30, r16
    24ba:	10 82       	st	Z, r1
    24bc:	80 e3       	ldi	r24, 0x30	; 48
    24be:	0e 94 a4 1b 	call	0x3748	; 0x3748 <sysclk_enable_usb>
    24c2:	e0 ec       	ldi	r30, 0xC0	; 192
    24c4:	f4 e0       	ldi	r31, 0x04	; 4
    24c6:	80 81       	ld	r24, Z
    24c8:	80 64       	ori	r24, 0x40	; 64
    24ca:	80 83       	st	Z, r24
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	f8 01       	movw	r30, r16
    24d0:	80 83       	st	Z, r24
    24d2:	8f b7       	in	r24, 0x3f	; 63
    24d4:	8a 83       	std	Y+2, r24	; 0x02
    24d6:	f8 94       	cli
    24d8:	1a 81       	ldd	r17, Y+2	; 0x02
    24da:	ec e6       	ldi	r30, 0x6C	; 108
    24dc:	f2 e2       	ldi	r31, 0x22	; 34
    24de:	15 86       	std	Z+13, r1	; 0x0d
    24e0:	15 8a       	std	Z+21, r1	; 0x15
    24e2:	15 8e       	std	Z+29, r1	; 0x1d
    24e4:	15 a2       	std	Z+37, r1	; 0x25
    24e6:	15 a6       	std	Z+45, r1	; 0x2d
    24e8:	15 aa       	std	Z+53, r1	; 0x35
    24ea:	e0 e0       	ldi	r30, 0x00	; 0
    24ec:	f2 e2       	ldi	r31, 0x22	; 34
    24ee:	80 81       	ld	r24, Z
    24f0:	8e 7f       	andi	r24, 0xFE	; 254
    24f2:	80 83       	st	Z, r24
    24f4:	e9 e0       	ldi	r30, 0x09	; 9
    24f6:	f2 e2       	ldi	r31, 0x22	; 34
    24f8:	80 81       	ld	r24, Z
    24fa:	8e 7f       	andi	r24, 0xFE	; 254
    24fc:	80 83       	st	Z, r24
    24fe:	e2 e1       	ldi	r30, 0x12	; 18
    2500:	f2 e2       	ldi	r31, 0x22	; 34
    2502:	80 81       	ld	r24, Z
    2504:	8e 7f       	andi	r24, 0xFE	; 254
    2506:	80 83       	st	Z, r24
    2508:	eb e1       	ldi	r30, 0x1B	; 27
    250a:	f2 e2       	ldi	r31, 0x22	; 34
    250c:	80 81       	ld	r24, Z
    250e:	8e 7f       	andi	r24, 0xFE	; 254
    2510:	80 83       	st	Z, r24
    2512:	6a e1       	ldi	r22, 0x1A	; 26
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	82 e0       	ldi	r24, 0x02	; 2
    2518:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
    251c:	8f 3f       	cpi	r24, 0xFF	; 255
    251e:	19 f0       	breq	.+6      	; 0x2526 <udd_enable+0x82>
    2520:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2524:	03 c0       	rjmp	.+6      	; 0x252c <udd_enable+0x88>
    2526:	8f e1       	ldi	r24, 0x1F	; 31
    2528:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    252c:	6b e1       	ldi	r22, 0x1B	; 27
    252e:	70 e0       	ldi	r23, 0x00	; 0
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
    2536:	8f 3f       	cpi	r24, 0xFF	; 255
    2538:	19 f0       	breq	.+6      	; 0x2540 <udd_enable+0x9c>
    253a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    253e:	03 c0       	rjmp	.+6      	; 0x2546 <udd_enable+0xa2>
    2540:	8f e1       	ldi	r24, 0x1F	; 31
    2542:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2546:	e0 ec       	ldi	r30, 0xC0	; 192
    2548:	f4 e0       	ldi	r31, 0x04	; 4
    254a:	80 81       	ld	r24, Z
    254c:	82 60       	ori	r24, 0x02	; 2
    254e:	80 83       	st	Z, r24
    2550:	80 81       	ld	r24, Z
    2552:	80 68       	ori	r24, 0x80	; 128
    2554:	80 83       	st	Z, r24
    2556:	80 81       	ld	r24, Z
    2558:	80 61       	ori	r24, 0x10	; 16
    255a:	80 83       	st	Z, r24
    255c:	88 e7       	ldi	r24, 0x78	; 120
    255e:	92 e2       	ldi	r25, 0x22	; 34
    2560:	86 83       	std	Z+6, r24	; 0x06
    2562:	97 83       	std	Z+7, r25	; 0x07
    2564:	80 81       	ld	r24, Z
    2566:	80 62       	ori	r24, 0x20	; 32
    2568:	80 83       	st	Z, r24
    256a:	8f ef       	ldi	r24, 0xFF	; 255
    256c:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2570:	e8 ec       	ldi	r30, 0xC8	; 200
    2572:	f4 e0       	ldi	r31, 0x04	; 4
    2574:	80 81       	ld	r24, Z
    2576:	81 60       	ori	r24, 0x01	; 1
    2578:	80 83       	st	Z, r24
    257a:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <udd_b_idle>
    257e:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <sleepmgr_locks+0x5>
    2582:	8f 3f       	cpi	r24, 0xFF	; 255
    2584:	09 f4       	brne	.+2      	; 0x2588 <udd_enable+0xe4>
    2586:	ff cf       	rjmp	.-2      	; 0x2586 <udd_enable+0xe2>
    2588:	8f b7       	in	r24, 0x3f	; 63
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	f8 94       	cli
    258e:	99 81       	ldd	r25, Y+1	; 0x01
    2590:	ed e0       	ldi	r30, 0x0D	; 13
    2592:	f4 e2       	ldi	r31, 0x24	; 36
    2594:	85 81       	ldd	r24, Z+5	; 0x05
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	85 83       	std	Z+5, r24	; 0x05
    259a:	9f bf       	out	0x3f, r25	; 63
    259c:	56 df       	rcall	.-340    	; 0x244a <udd_attach>
    259e:	1f bf       	out	0x3f, r17	; 63
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	1f 91       	pop	r17
    25aa:	0f 91       	pop	r16
    25ac:	08 95       	ret

000025ae <udd_is_high_speed>:
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	08 95       	ret

000025b2 <udd_set_address>:
    25b2:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    25b6:	08 95       	ret

000025b8 <udd_getaddress>:
    25b8:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    25bc:	08 95       	ret

000025be <udd_get_frame_number>:
    25be:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <udd_sram+0x3c>
    25c2:	90 91 a9 22 	lds	r25, 0x22A9	; 0x8022a9 <udd_sram+0x3d>
    25c6:	08 95       	ret

000025c8 <udd_get_micro_frame_number>:
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	08 95       	ret

000025ce <udd_set_setup_payload>:
    25ce:	ed ef       	ldi	r30, 0xFD	; 253
    25d0:	f3 e2       	ldi	r31, 0x23	; 35
    25d2:	80 87       	std	Z+8, r24	; 0x08
    25d4:	91 87       	std	Z+9, r25	; 0x09
    25d6:	62 87       	std	Z+10, r22	; 0x0a
    25d8:	73 87       	std	Z+11, r23	; 0x0b
    25da:	08 95       	ret

000025dc <udd_ep_alloc>:
    25dc:	28 2f       	mov	r18, r24
    25de:	2f 70       	andi	r18, 0x0F	; 15
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	22 0f       	add	r18, r18
    25e4:	33 1f       	adc	r19, r19
    25e6:	08 2e       	mov	r0, r24
    25e8:	00 0c       	add	r0, r0
    25ea:	99 0b       	sbc	r25, r25
    25ec:	88 27       	eor	r24, r24
    25ee:	99 0f       	add	r25, r25
    25f0:	88 1f       	adc	r24, r24
    25f2:	99 27       	eor	r25, r25
    25f4:	82 0f       	add	r24, r18
    25f6:	93 1f       	adc	r25, r19
    25f8:	fc 01       	movw	r30, r24
    25fa:	ee 0f       	add	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	ee 0f       	add	r30, r30
    2600:	ff 1f       	adc	r31, r31
    2602:	ee 0f       	add	r30, r30
    2604:	ff 1f       	adc	r31, r31
    2606:	e4 59       	subi	r30, 0x94	; 148
    2608:	fd 4d       	sbci	r31, 0xDD	; 221
    260a:	25 85       	ldd	r18, Z+13	; 0x0d
    260c:	20 7c       	andi	r18, 0xC0	; 192
    260e:	09 f0       	breq	.+2      	; 0x2612 <udd_ep_alloc+0x36>
    2610:	69 c0       	rjmp	.+210    	; 0x26e4 <udd_ep_alloc+0x108>
    2612:	63 70       	andi	r22, 0x03	; 3
    2614:	61 30       	cpi	r22, 0x01	; 1
    2616:	11 f0       	breq	.+4      	; 0x261c <udd_ep_alloc+0x40>
    2618:	18 f4       	brcc	.+6      	; 0x2620 <udd_ep_alloc+0x44>
    261a:	04 c0       	rjmp	.+8      	; 0x2624 <udd_ep_alloc+0x48>
    261c:	60 ec       	ldi	r22, 0xC0	; 192
    261e:	03 c0       	rjmp	.+6      	; 0x2626 <udd_ep_alloc+0x4a>
    2620:	60 e8       	ldi	r22, 0x80	; 128
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <udd_ep_alloc+0x4a>
    2624:	60 e4       	ldi	r22, 0x40	; 64
    2626:	40 38       	cpi	r20, 0x80	; 128
    2628:	51 05       	cpc	r21, r1
    262a:	e9 f0       	breq	.+58     	; 0x2666 <udd_ep_alloc+0x8a>
    262c:	50 f4       	brcc	.+20     	; 0x2642 <udd_ep_alloc+0x66>
    262e:	40 32       	cpi	r20, 0x20	; 32
    2630:	51 05       	cpc	r21, r1
    2632:	a9 f0       	breq	.+42     	; 0x265e <udd_ep_alloc+0x82>
    2634:	40 34       	cpi	r20, 0x40	; 64
    2636:	51 05       	cpc	r21, r1
    2638:	a1 f0       	breq	.+40     	; 0x2662 <udd_ep_alloc+0x86>
    263a:	40 31       	cpi	r20, 0x10	; 16
    263c:	51 05       	cpc	r21, r1
    263e:	d9 f4       	brne	.+54     	; 0x2676 <udd_ep_alloc+0x9a>
    2640:	0c c0       	rjmp	.+24     	; 0x265a <udd_ep_alloc+0x7e>
    2642:	41 15       	cp	r20, r1
    2644:	22 e0       	ldi	r18, 0x02	; 2
    2646:	52 07       	cpc	r21, r18
    2648:	91 f0       	breq	.+36     	; 0x266e <udd_ep_alloc+0x92>
    264a:	4f 3f       	cpi	r20, 0xFF	; 255
    264c:	23 e0       	ldi	r18, 0x03	; 3
    264e:	52 07       	cpc	r21, r18
    2650:	81 f0       	breq	.+32     	; 0x2672 <udd_ep_alloc+0x96>
    2652:	41 15       	cp	r20, r1
    2654:	51 40       	sbci	r21, 0x01	; 1
    2656:	79 f4       	brne	.+30     	; 0x2676 <udd_ep_alloc+0x9a>
    2658:	08 c0       	rjmp	.+16     	; 0x266a <udd_ep_alloc+0x8e>
    265a:	21 e0       	ldi	r18, 0x01	; 1
    265c:	0d c0       	rjmp	.+26     	; 0x2678 <udd_ep_alloc+0x9c>
    265e:	22 e0       	ldi	r18, 0x02	; 2
    2660:	0b c0       	rjmp	.+22     	; 0x2678 <udd_ep_alloc+0x9c>
    2662:	23 e0       	ldi	r18, 0x03	; 3
    2664:	09 c0       	rjmp	.+18     	; 0x2678 <udd_ep_alloc+0x9c>
    2666:	24 e0       	ldi	r18, 0x04	; 4
    2668:	07 c0       	rjmp	.+14     	; 0x2678 <udd_ep_alloc+0x9c>
    266a:	25 e0       	ldi	r18, 0x05	; 5
    266c:	05 c0       	rjmp	.+10     	; 0x2678 <udd_ep_alloc+0x9c>
    266e:	26 e0       	ldi	r18, 0x06	; 6
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <udd_ep_alloc+0x9c>
    2672:	27 e0       	ldi	r18, 0x07	; 7
    2674:	01 c0       	rjmp	.+2      	; 0x2678 <udd_ep_alloc+0x9c>
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	fc 01       	movw	r30, r24
    267a:	ee 0f       	add	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	ee 0f       	add	r30, r30
    2680:	ff 1f       	adc	r31, r31
    2682:	ee 0f       	add	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	e4 59       	subi	r30, 0x94	; 148
    2688:	fd 4d       	sbci	r31, 0xDD	; 221
    268a:	15 86       	std	Z+13, r1	; 0x0d
    268c:	36 e0       	ldi	r19, 0x06	; 6
    268e:	34 87       	std	Z+12, r19	; 0x0c
    2690:	26 2b       	or	r18, r22
    2692:	25 87       	std	Z+13, r18	; 0x0d
    2694:	fc 01       	movw	r30, r24
    2696:	ee 0f       	add	r30, r30
    2698:	ff 1f       	adc	r31, r31
    269a:	ee 0f       	add	r30, r30
    269c:	ff 1f       	adc	r31, r31
    269e:	ee 0f       	add	r30, r30
    26a0:	ff 1f       	adc	r31, r31
    26a2:	e4 59       	subi	r30, 0x94	; 148
    26a4:	fd 4d       	sbci	r31, 0xDD	; 221
    26a6:	25 85       	ldd	r18, Z+13	; 0x0d
    26a8:	20 7c       	andi	r18, 0xC0	; 192
    26aa:	20 3c       	cpi	r18, 0xC0	; 192
    26ac:	69 f4       	brne	.+26     	; 0x26c8 <udd_ep_alloc+0xec>
    26ae:	fc 01       	movw	r30, r24
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	ee 0f       	add	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	ee 0f       	add	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	e4 59       	subi	r30, 0x94	; 148
    26be:	fd 4d       	sbci	r31, 0xDD	; 221
    26c0:	25 85       	ldd	r18, Z+13	; 0x0d
    26c2:	27 70       	andi	r18, 0x07	; 7
    26c4:	27 30       	cpi	r18, 0x07	; 7
    26c6:	81 f0       	breq	.+32     	; 0x26e8 <udd_ep_alloc+0x10c>
    26c8:	88 0f       	add	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	88 0f       	add	r24, r24
    26ce:	99 1f       	adc	r25, r25
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	fc 01       	movw	r30, r24
    26d6:	e4 59       	subi	r30, 0x94	; 148
    26d8:	fd 4d       	sbci	r31, 0xDD	; 221
    26da:	85 85       	ldd	r24, Z+13	; 0x0d
    26dc:	80 62       	ori	r24, 0x20	; 32
    26de:	85 87       	std	Z+13, r24	; 0x0d
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	08 95       	ret
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	08 95       	ret
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	08 95       	ret

000026ec <udd_ep_is_halted>:
    26ec:	e8 2f       	mov	r30, r24
    26ee:	ef 70       	andi	r30, 0x0F	; 15
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	ee 0f       	add	r30, r30
    26f4:	ff 1f       	adc	r31, r31
    26f6:	08 2e       	mov	r0, r24
    26f8:	00 0c       	add	r0, r0
    26fa:	99 0b       	sbc	r25, r25
    26fc:	88 27       	eor	r24, r24
    26fe:	99 0f       	add	r25, r25
    2700:	88 1f       	adc	r24, r24
    2702:	99 27       	eor	r25, r25
    2704:	e8 0f       	add	r30, r24
    2706:	f9 1f       	adc	r31, r25
    2708:	ee 0f       	add	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	ee 0f       	add	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	ee 0f       	add	r30, r30
    2712:	ff 1f       	adc	r31, r31
    2714:	e4 59       	subi	r30, 0x94	; 148
    2716:	fd 4d       	sbci	r31, 0xDD	; 221
    2718:	85 85       	ldd	r24, Z+13	; 0x0d
    271a:	82 fb       	bst	r24, 2
    271c:	88 27       	eor	r24, r24
    271e:	80 f9       	bld	r24, 0
    2720:	08 95       	ret

00002722 <udd_ep_clear_halt>:
    2722:	0f 93       	push	r16
    2724:	28 2f       	mov	r18, r24
    2726:	2f 70       	andi	r18, 0x0F	; 15
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	a9 01       	movw	r20, r18
    272c:	44 0f       	add	r20, r20
    272e:	55 1f       	adc	r21, r21
    2730:	28 2f       	mov	r18, r24
    2732:	08 2e       	mov	r0, r24
    2734:	00 0c       	add	r0, r0
    2736:	33 0b       	sbc	r19, r19
    2738:	22 27       	eor	r18, r18
    273a:	33 0f       	add	r19, r19
    273c:	22 1f       	adc	r18, r18
    273e:	33 27       	eor	r19, r19
    2740:	24 0f       	add	r18, r20
    2742:	35 1f       	adc	r19, r21
    2744:	a9 01       	movw	r20, r18
    2746:	44 0f       	add	r20, r20
    2748:	55 1f       	adc	r21, r21
    274a:	44 0f       	add	r20, r20
    274c:	55 1f       	adc	r21, r21
    274e:	44 0f       	add	r20, r20
    2750:	55 1f       	adc	r21, r21
    2752:	fa 01       	movw	r30, r20
    2754:	e8 58       	subi	r30, 0x88	; 136
    2756:	fd 4d       	sbci	r31, 0xDD	; 221
    2758:	01 e0       	ldi	r16, 0x01	; 1
    275a:	06 93       	lac	Z, r16
    275c:	fa 01       	movw	r30, r20
    275e:	e4 59       	subi	r30, 0x94	; 148
    2760:	fd 4d       	sbci	r31, 0xDD	; 221
    2762:	95 85       	ldd	r25, Z+13	; 0x0d
    2764:	92 ff       	sbrs	r25, 2
    2766:	11 c0       	rjmp	.+34     	; 0x278a <udd_ep_clear_halt+0x68>
    2768:	fa 01       	movw	r30, r20
    276a:	e4 59       	subi	r30, 0x94	; 148
    276c:	fd 4d       	sbci	r31, 0xDD	; 221
    276e:	95 85       	ldd	r25, Z+13	; 0x0d
    2770:	9b 7f       	andi	r25, 0xFB	; 251
    2772:	95 87       	std	Z+13, r25	; 0x0d
    2774:	59 dc       	rcall	.-1870   	; 0x2028 <udd_ep_get_job>
    2776:	fc 01       	movw	r30, r24
    2778:	80 81       	ld	r24, Z
    277a:	80 ff       	sbrs	r24, 0
    277c:	06 c0       	rjmp	.+12     	; 0x278a <udd_ep_clear_halt+0x68>
    277e:	8e 7f       	andi	r24, 0xFE	; 254
    2780:	80 83       	st	Z, r24
    2782:	07 80       	ldd	r0, Z+7	; 0x07
    2784:	f0 85       	ldd	r31, Z+8	; 0x08
    2786:	e0 2d       	mov	r30, r0
    2788:	19 95       	eicall
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	0f 91       	pop	r16
    278e:	08 95       	ret

00002790 <udd_ep_run>:
    2790:	6f 92       	push	r6
    2792:	7f 92       	push	r7
    2794:	8f 92       	push	r8
    2796:	9f 92       	push	r9
    2798:	af 92       	push	r10
    279a:	bf 92       	push	r11
    279c:	cf 92       	push	r12
    279e:	df 92       	push	r13
    27a0:	ef 92       	push	r14
    27a2:	ff 92       	push	r15
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	1f 92       	push	r1
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	78 2e       	mov	r7, r24
    27b4:	66 2e       	mov	r6, r22
    27b6:	4a 01       	movw	r8, r20
    27b8:	59 01       	movw	r10, r18
    27ba:	36 dc       	rcall	.-1940   	; 0x2028 <udd_ep_get_job>
    27bc:	6c 01       	movw	r12, r24
    27be:	27 2d       	mov	r18, r7
    27c0:	87 2d       	mov	r24, r7
    27c2:	8f 70       	andi	r24, 0x0F	; 15
    27c4:	e8 2e       	mov	r14, r24
    27c6:	f1 2c       	mov	r15, r1
    27c8:	c7 01       	movw	r24, r14
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	e7 2c       	mov	r14, r7
    27d0:	07 2c       	mov	r0, r7
    27d2:	00 0c       	add	r0, r0
    27d4:	ff 08       	sbc	r15, r15
    27d6:	ee 24       	eor	r14, r14
    27d8:	ff 0c       	add	r15, r15
    27da:	ee 1c       	adc	r14, r14
    27dc:	ff 24       	eor	r15, r15
    27de:	e8 0e       	add	r14, r24
    27e0:	f9 1e       	adc	r15, r25
    27e2:	f7 01       	movw	r30, r14
    27e4:	ee 0f       	add	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	e4 59       	subi	r30, 0x94	; 148
    27f2:	fd 4d       	sbci	r31, 0xDD	; 221
    27f4:	85 85       	ldd	r24, Z+13	; 0x0d
    27f6:	80 7c       	andi	r24, 0xC0	; 192
    27f8:	09 f4       	brne	.+2      	; 0x27fc <udd_ep_run+0x6c>
    27fa:	82 c0       	rjmp	.+260    	; 0x2900 <udd_ep_run+0x170>
    27fc:	f7 01       	movw	r30, r14
    27fe:	ee 0f       	add	r30, r30
    2800:	ff 1f       	adc	r31, r31
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	ee 0f       	add	r30, r30
    2808:	ff 1f       	adc	r31, r31
    280a:	e4 59       	subi	r30, 0x94	; 148
    280c:	fd 4d       	sbci	r31, 0xDD	; 221
    280e:	85 85       	ldd	r24, Z+13	; 0x0d
    2810:	80 7c       	andi	r24, 0xC0	; 192
    2812:	80 3c       	cpi	r24, 0xC0	; 192
    2814:	61 f0       	breq	.+24     	; 0x282e <udd_ep_run+0x9e>
    2816:	f7 01       	movw	r30, r14
    2818:	ee 0f       	add	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	ee 0f       	add	r30, r30
    281e:	ff 1f       	adc	r31, r31
    2820:	ee 0f       	add	r30, r30
    2822:	ff 1f       	adc	r31, r31
    2824:	e4 59       	subi	r30, 0x94	; 148
    2826:	fd 4d       	sbci	r31, 0xDD	; 221
    2828:	85 85       	ldd	r24, Z+13	; 0x0d
    282a:	82 fd       	sbrc	r24, 2
    282c:	6b c0       	rjmp	.+214    	; 0x2904 <udd_ep_run+0x174>
    282e:	8f b7       	in	r24, 0x3f	; 63
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	f8 94       	cli
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	f6 01       	movw	r30, r12
    2838:	90 81       	ld	r25, Z
    283a:	90 ff       	sbrs	r25, 0
    283c:	03 c0       	rjmp	.+6      	; 0x2844 <udd_ep_run+0xb4>
    283e:	8f bf       	out	0x3f, r24	; 63
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	61 c0       	rjmp	.+194    	; 0x2906 <udd_ep_run+0x176>
    2844:	f6 01       	movw	r30, r12
    2846:	90 81       	ld	r25, Z
    2848:	91 60       	ori	r25, 0x01	; 1
    284a:	90 83       	st	Z, r25
    284c:	8f bf       	out	0x3f, r24	; 63
    284e:	81 82       	std	Z+1, r8	; 0x01
    2850:	92 82       	std	Z+2, r9	; 0x02
    2852:	a3 82       	std	Z+3, r10	; 0x03
    2854:	b4 82       	std	Z+4, r11	; 0x04
    2856:	15 82       	std	Z+5, r1	; 0x05
    2858:	16 82       	std	Z+6, r1	; 0x06
    285a:	07 83       	std	Z+7, r16	; 0x07
    285c:	10 87       	std	Z+8, r17	; 0x08
    285e:	61 10       	cpse	r6, r1
    2860:	06 c0       	rjmp	.+12     	; 0x286e <udd_ep_run+0xde>
    2862:	91 e0       	ldi	r25, 0x01	; 1
    2864:	a1 14       	cp	r10, r1
    2866:	b1 04       	cpc	r11, r1
    2868:	19 f0       	breq	.+6      	; 0x2870 <udd_ep_run+0xe0>
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	01 c0       	rjmp	.+2      	; 0x2870 <udd_ep_run+0xe0>
    286e:	91 e0       	ldi	r25, 0x01	; 1
    2870:	f6 01       	movw	r30, r12
    2872:	80 81       	ld	r24, Z
    2874:	90 fb       	bst	r25, 0
    2876:	81 f9       	bld	r24, 1
    2878:	8b 7f       	andi	r24, 0xFB	; 251
    287a:	80 83       	st	Z, r24
    287c:	22 23       	and	r18, r18
    287e:	64 f4       	brge	.+24     	; 0x2898 <udd_ep_run+0x108>
    2880:	f7 01       	movw	r30, r14
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	ee 0f       	add	r30, r30
    2888:	ff 1f       	adc	r31, r31
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	e4 59       	subi	r30, 0x94	; 148
    2890:	fd 4d       	sbci	r31, 0xDD	; 221
    2892:	12 8a       	std	Z+18, r1	; 0x12
    2894:	13 8a       	std	Z+19, r1	; 0x13
    2896:	30 c0       	rjmp	.+96     	; 0x28f8 <udd_ep_run+0x168>
    2898:	f7 01       	movw	r30, r14
    289a:	ee 0f       	add	r30, r30
    289c:	ff 1f       	adc	r31, r31
    289e:	ee 0f       	add	r30, r30
    28a0:	ff 1f       	adc	r31, r31
    28a2:	ee 0f       	add	r30, r30
    28a4:	ff 1f       	adc	r31, r31
    28a6:	e4 59       	subi	r30, 0x94	; 148
    28a8:	fd 4d       	sbci	r31, 0xDD	; 221
    28aa:	85 85       	ldd	r24, Z+13	; 0x0d
    28ac:	80 7c       	andi	r24, 0xC0	; 192
    28ae:	80 3c       	cpi	r24, 0xC0	; 192
    28b0:	b1 f4       	brne	.+44     	; 0x28de <udd_ep_run+0x14e>
    28b2:	c7 01       	movw	r24, r14
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	88 58       	subi	r24, 0x88	; 136
    28c2:	9d 4d       	sbci	r25, 0xDD	; 221
    28c4:	88 db       	rcall	.-2288   	; 0x1fd6 <udd_ep_get_size>
    28c6:	bc 01       	movw	r22, r24
    28c8:	c5 01       	movw	r24, r10
    28ca:	0e 94 90 23 	call	0x4720	; 0x4720 <__udivmodhi4>
    28ce:	89 2b       	or	r24, r25
    28d0:	31 f0       	breq	.+12     	; 0x28de <udd_ep_run+0x14e>
    28d2:	f6 01       	movw	r30, r12
    28d4:	80 81       	ld	r24, Z
    28d6:	8e 7f       	andi	r24, 0xFE	; 254
    28d8:	80 83       	st	Z, r24
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	14 c0       	rjmp	.+40     	; 0x2906 <udd_ep_run+0x176>
    28de:	f7 01       	movw	r30, r14
    28e0:	ee 0f       	add	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	ee 0f       	add	r30, r30
    28e6:	ff 1f       	adc	r31, r31
    28e8:	ee 0f       	add	r30, r30
    28ea:	ff 1f       	adc	r31, r31
    28ec:	e4 59       	subi	r30, 0x94	; 148
    28ee:	fd 4d       	sbci	r31, 0xDD	; 221
    28f0:	16 86       	std	Z+14, r1	; 0x0e
    28f2:	17 86       	std	Z+15, r1	; 0x0f
    28f4:	12 8a       	std	Z+18, r1	; 0x12
    28f6:	13 8a       	std	Z+19, r1	; 0x13
    28f8:	87 2d       	mov	r24, r7
    28fa:	23 dc       	rcall	.-1978   	; 0x2142 <udd_ep_trans_complet>
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	03 c0       	rjmp	.+6      	; 0x2906 <udd_ep_run+0x176>
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	01 c0       	rjmp	.+2      	; 0x2906 <udd_ep_run+0x176>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	0f 90       	pop	r0
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	df 90       	pop	r13
    2916:	cf 90       	pop	r12
    2918:	bf 90       	pop	r11
    291a:	af 90       	pop	r10
    291c:	9f 90       	pop	r9
    291e:	8f 90       	pop	r8
    2920:	7f 90       	pop	r7
    2922:	6f 90       	pop	r6
    2924:	08 95       	ret

00002926 <udd_ep_abort>:
    2926:	ff 92       	push	r15
    2928:	0f 93       	push	r16
    292a:	1f 93       	push	r17
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	18 2f       	mov	r17, r24
    2932:	c8 2f       	mov	r28, r24
    2934:	cf 70       	andi	r28, 0x0F	; 15
    2936:	d0 e0       	ldi	r29, 0x00	; 0
    2938:	ce 01       	movw	r24, r28
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	c1 2f       	mov	r28, r17
    2940:	01 2e       	mov	r0, r17
    2942:	00 0c       	add	r0, r0
    2944:	dd 0b       	sbc	r29, r29
    2946:	cc 27       	eor	r28, r28
    2948:	dd 0f       	add	r29, r29
    294a:	cc 1f       	adc	r28, r28
    294c:	dd 27       	eor	r29, r29
    294e:	c8 0f       	add	r28, r24
    2950:	d9 1f       	adc	r29, r25
    2952:	81 2f       	mov	r24, r17
    2954:	69 db       	rcall	.-2350   	; 0x2028 <udd_ep_get_job>
    2956:	dc 01       	movw	r26, r24
    2958:	fe 01       	movw	r30, r28
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	ee 0f       	add	r30, r30
    2964:	ff 1f       	adc	r31, r31
    2966:	e8 58       	subi	r30, 0x88	; 136
    2968:	fd 4d       	sbci	r31, 0xDD	; 221
    296a:	02 e0       	ldi	r16, 0x02	; 2
    296c:	05 93       	las	Z, r16
    296e:	8c 91       	ld	r24, X
    2970:	80 ff       	sbrs	r24, 0
    2972:	22 c0       	rjmp	.+68     	; 0x29b8 <udd_ep_abort+0x92>
    2974:	8e 7f       	andi	r24, 0xFE	; 254
    2976:	8c 93       	st	X, r24
    2978:	17 96       	adiw	r26, 0x07	; 7
    297a:	ed 91       	ld	r30, X+
    297c:	fc 91       	ld	r31, X
    297e:	18 97       	sbiw	r26, 0x08	; 8
    2980:	30 97       	sbiw	r30, 0x00	; 0
    2982:	d1 f0       	breq	.+52     	; 0x29b8 <udd_ep_abort+0x92>
    2984:	11 23       	and	r17, r17
    2986:	5c f4       	brge	.+22     	; 0x299e <udd_ep_abort+0x78>
    2988:	cc 0f       	add	r28, r28
    298a:	dd 1f       	adc	r29, r29
    298c:	cc 0f       	add	r28, r28
    298e:	dd 1f       	adc	r29, r29
    2990:	cc 0f       	add	r28, r28
    2992:	dd 1f       	adc	r29, r29
    2994:	c4 59       	subi	r28, 0x94	; 148
    2996:	dd 4d       	sbci	r29, 0xDD	; 221
    2998:	6a 89       	ldd	r22, Y+18	; 0x12
    299a:	7b 89       	ldd	r23, Y+19	; 0x13
    299c:	0a c0       	rjmp	.+20     	; 0x29b2 <udd_ep_abort+0x8c>
    299e:	cc 0f       	add	r28, r28
    29a0:	dd 1f       	adc	r29, r29
    29a2:	cc 0f       	add	r28, r28
    29a4:	dd 1f       	adc	r29, r29
    29a6:	cc 0f       	add	r28, r28
    29a8:	dd 1f       	adc	r29, r29
    29aa:	c4 59       	subi	r28, 0x94	; 148
    29ac:	dd 4d       	sbci	r29, 0xDD	; 221
    29ae:	6e 85       	ldd	r22, Y+14	; 0x0e
    29b0:	7f 85       	ldd	r23, Y+15	; 0x0f
    29b2:	41 2f       	mov	r20, r17
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	19 95       	eicall
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	ff 90       	pop	r15
    29c2:	08 95       	ret

000029c4 <udd_ep_free>:
    29c4:	cf 93       	push	r28
    29c6:	c8 2f       	mov	r28, r24
    29c8:	ae df       	rcall	.-164    	; 0x2926 <udd_ep_abort>
    29ca:	ec 2f       	mov	r30, r28
    29cc:	ef 70       	andi	r30, 0x0F	; 15
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	ee 0f       	add	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	8c 2f       	mov	r24, r28
    29d6:	cc 0f       	add	r28, r28
    29d8:	99 0b       	sbc	r25, r25
    29da:	88 27       	eor	r24, r24
    29dc:	99 0f       	add	r25, r25
    29de:	88 1f       	adc	r24, r24
    29e0:	99 27       	eor	r25, r25
    29e2:	e8 0f       	add	r30, r24
    29e4:	f9 1f       	adc	r31, r25
    29e6:	ee 0f       	add	r30, r30
    29e8:	ff 1f       	adc	r31, r31
    29ea:	ee 0f       	add	r30, r30
    29ec:	ff 1f       	adc	r31, r31
    29ee:	ee 0f       	add	r30, r30
    29f0:	ff 1f       	adc	r31, r31
    29f2:	e4 59       	subi	r30, 0x94	; 148
    29f4:	fd 4d       	sbci	r31, 0xDD	; 221
    29f6:	15 86       	std	Z+13, r1	; 0x0d
    29f8:	cf 91       	pop	r28
    29fa:	08 95       	ret

000029fc <udd_ep_set_halt>:
    29fc:	e8 2f       	mov	r30, r24
    29fe:	ef 70       	andi	r30, 0x0F	; 15
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	ee 0f       	add	r30, r30
    2a04:	ff 1f       	adc	r31, r31
    2a06:	28 2f       	mov	r18, r24
    2a08:	08 2e       	mov	r0, r24
    2a0a:	00 0c       	add	r0, r0
    2a0c:	33 0b       	sbc	r19, r19
    2a0e:	22 27       	eor	r18, r18
    2a10:	33 0f       	add	r19, r19
    2a12:	22 1f       	adc	r18, r18
    2a14:	33 27       	eor	r19, r19
    2a16:	e2 0f       	add	r30, r18
    2a18:	f3 1f       	adc	r31, r19
    2a1a:	ee 0f       	add	r30, r30
    2a1c:	ff 1f       	adc	r31, r31
    2a1e:	ee 0f       	add	r30, r30
    2a20:	ff 1f       	adc	r31, r31
    2a22:	ee 0f       	add	r30, r30
    2a24:	ff 1f       	adc	r31, r31
    2a26:	e4 59       	subi	r30, 0x94	; 148
    2a28:	fd 4d       	sbci	r31, 0xDD	; 221
    2a2a:	95 85       	ldd	r25, Z+13	; 0x0d
    2a2c:	94 60       	ori	r25, 0x04	; 4
    2a2e:	95 87       	std	Z+13, r25	; 0x0d
    2a30:	7a df       	rcall	.-268    	; 0x2926 <udd_ep_abort>
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	08 95       	ret

00002a36 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2a36:	1f 92       	push	r1
    2a38:	0f 92       	push	r0
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	0f 92       	push	r0
    2a3e:	11 24       	eor	r1, r1
    2a40:	0b b6       	in	r0, 0x3b	; 59
    2a42:	0f 92       	push	r0
    2a44:	0f 93       	push	r16
    2a46:	2f 93       	push	r18
    2a48:	3f 93       	push	r19
    2a4a:	4f 93       	push	r20
    2a4c:	5f 93       	push	r21
    2a4e:	6f 93       	push	r22
    2a50:	7f 93       	push	r23
    2a52:	8f 93       	push	r24
    2a54:	9f 93       	push	r25
    2a56:	af 93       	push	r26
    2a58:	bf 93       	push	r27
    2a5a:	ef 93       	push	r30
    2a5c:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2a5e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a62:	88 23       	and	r24, r24
    2a64:	34 f4       	brge	.+12     	; 0x2a72 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2a66:	80 e8       	ldi	r24, 0x80	; 128
    2a68:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2a6c:	0e 94 30 20 	call	0x4060	; 0x4060 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2a70:	88 c0       	rjmp	.+272    	; 0x2b82 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2a72:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a76:	82 ff       	sbrs	r24, 2
    2a78:	20 c0       	rjmp	.+64     	; 0x2aba <__vector_125+0x84>
		udd_ack_underflow_event();
    2a7a:	84 e0       	ldi	r24, 0x04	; 4
    2a7c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2a80:	80 91 80 22 	lds	r24, 0x2280	; 0x802280 <udd_sram+0x14>
    2a84:	86 ff       	sbrs	r24, 6
    2a86:	7d c0       	rjmp	.+250    	; 0x2b82 <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2a88:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a8c:	81 fd       	sbrc	r24, 1
    2a8e:	79 c0       	rjmp	.+242    	; 0x2b82 <__vector_125+0x14c>
    2a90:	e6 da       	rcall	.-2612   	; 0x205e <udd_ctrl_interrupt_tc_setup>
    2a92:	81 11       	cpse	r24, r1
    2a94:	76 c0       	rjmp	.+236    	; 0x2b82 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2a96:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    2a9a:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2a9c:	11 f4       	brne	.+4      	; 0x2aa2 <__vector_125+0x6c>
    2a9e:	19 da       	rcall	.-3022   	; 0x1ed2 <udd_ctrl_send_zlp_in>
    2aa0:	70 c0       	rjmp	.+224    	; 0x2b82 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2aa2:	84 30       	cpi	r24, 0x04	; 4
    2aa4:	09 f0       	breq	.+2      	; 0x2aa8 <__vector_125+0x72>
    2aa6:	6d c0       	rjmp	.+218    	; 0x2b82 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2aa8:	e1 e8       	ldi	r30, 0x81	; 129
    2aaa:	f2 e2       	ldi	r31, 0x22	; 34
    2aac:	04 e0       	ldi	r16, 0x04	; 4
    2aae:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2ab0:	e9 e7       	ldi	r30, 0x79	; 121
    2ab2:	f2 e2       	ldi	r31, 0x22	; 34
    2ab4:	04 e0       	ldi	r16, 0x04	; 4
    2ab6:	05 93       	las	Z, r16
    2ab8:	64 c0       	rjmp	.+200    	; 0x2b82 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2aba:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2abe:	81 ff       	sbrs	r24, 1
    2ac0:	5b c0       	rjmp	.+182    	; 0x2b78 <__vector_125+0x142>
		udd_ack_overflow_event();
    2ac2:	82 e0       	ldi	r24, 0x02	; 2
    2ac4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2ac8:	80 91 78 22 	lds	r24, 0x2278	; 0x802278 <udd_sram+0xc>
    2acc:	86 ff       	sbrs	r24, 6
    2ace:	59 c0       	rjmp	.+178    	; 0x2b82 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2ad0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2ad4:	81 fd       	sbrc	r24, 1
    2ad6:	55 c0       	rjmp	.+170    	; 0x2b82 <__vector_125+0x14c>
    2ad8:	c2 da       	rcall	.-2684   	; 0x205e <udd_ctrl_interrupt_tc_setup>
    2ada:	81 11       	cpse	r24, r1
    2adc:	52 c0       	rjmp	.+164    	; 0x2b82 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2ade:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
    2ae2:	82 30       	cpi	r24, 0x02	; 2
    2ae4:	41 f4       	brne	.+16     	; 0x2af6 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2ae6:	84 e0       	ldi	r24, 0x04	; 4
    2ae8:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2aec:	e8 e7       	ldi	r30, 0x78	; 120
    2aee:	f2 e2       	ldi	r31, 0x22	; 34
    2af0:	02 e0       	ldi	r16, 0x02	; 2
    2af2:	06 93       	lac	Z, r16
    2af4:	46 c0       	rjmp	.+140    	; 0x2b82 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2af6:	83 30       	cpi	r24, 0x03	; 3
    2af8:	09 f0       	breq	.+2      	; 0x2afc <__vector_125+0xc6>
    2afa:	43 c0       	rjmp	.+134    	; 0x2b82 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2afc:	e1 e8       	ldi	r30, 0x81	; 129
    2afe:	f2 e2       	ldi	r31, 0x22	; 34
    2b00:	04 e0       	ldi	r16, 0x04	; 4
    2b02:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b04:	e9 e7       	ldi	r30, 0x79	; 121
    2b06:	f2 e2       	ldi	r31, 0x22	; 34
    2b08:	04 e0       	ldi	r16, 0x04	; 4
    2b0a:	05 93       	las	Z, r16
    2b0c:	3a c0       	rjmp	.+116    	; 0x2b82 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2b0e:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b10:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b14:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b16:	07 df       	rcall	.-498    	; 0x2926 <udd_ep_abort>
    2b18:	81 e8       	ldi	r24, 0x81	; 129
    2b1a:	05 df       	rcall	.-502    	; 0x2926 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b1c:	82 e0       	ldi	r24, 0x02	; 2
    2b1e:	03 df       	rcall	.-506    	; 0x2926 <udd_ep_abort>
    2b20:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    2b22:	01 df       	rcall	.-510    	; 0x2926 <udd_ep_abort>
    2b24:	0e 94 07 20 	call	0x400e	; 0x400e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2b28:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2b2c:	ec e6       	ldi	r30, 0x6C	; 108
    2b2e:	f2 e2       	ldi	r31, 0x22	; 34
	udd_endpoint_clear_status(ep_ctrl);
    2b30:	15 86       	std	Z+13, r1	; 0x0d
    2b32:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b34:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    2b36:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b38:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2b3a:	15 8a       	std	Z+21, r1	; 0x15
    2b3c:	94 8b       	std	Z+20, r25	; 0x14
    2b3e:	85 8b       	std	Z+21, r24	; 0x15
    2b40:	84 e2       	ldi	r24, 0x24	; 36
		// Reset endpoint control management
		udd_ctrl_init();
    2b42:	92 e2       	ldi	r25, 0x22	; 34
    2b44:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    2b46:	91 8b       	std	Z+17, r25	; 0x11
    2b48:	91 d9       	rcall	.-3294   	; 0x1e6c <udd_ctrl_init>
		udd_ack_suspend_event();
    2b4a:	1b c0       	rjmp	.+54     	; 0x2b82 <__vector_125+0x14c>
    2b4c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2b50:	86 ff       	sbrs	r24, 6
    2b52:	07 c0       	rjmp	.+14     	; 0x2b62 <__vector_125+0x12c>
    2b54:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2b56:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	4f d9       	rcall	.-3426   	; 0x1dfc <udd_sleep_mode>
		udd_ack_resume_event();
    2b5e:	a5 d2       	rcall	.+1354   	; 0x30aa <usb_callback_suspend_action>
    2b60:	10 c0       	rjmp	.+32     	; 0x2b82 <__vector_125+0x14c>
    2b62:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    2b66:	85 ff       	sbrs	r24, 5
    2b68:	0c c0       	rjmp	.+24     	; 0x2b82 <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2b6a:	80 e2       	ldi	r24, 0x20	; 32
    2b6c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	44 d9       	rcall	.-3448   	; 0x1dfc <udd_sleep_mode>
    2b74:	9b d2       	rcall	.+1334   	; 0x30ac <usb_callback_resume_action>
    2b76:	05 c0       	rjmp	.+10     	; 0x2b82 <__vector_125+0x14c>
    2b78:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2b7c:	84 fd       	sbrc	r24, 4
    2b7e:	c7 cf       	rjmp	.-114    	; 0x2b0e <__vector_125+0xd8>
    2b80:	e5 cf       	rjmp	.-54     	; 0x2b4c <__vector_125+0x116>
    2b82:	ff 91       	pop	r31
    2b84:	ef 91       	pop	r30
    2b86:	bf 91       	pop	r27
    2b88:	af 91       	pop	r26
    2b8a:	9f 91       	pop	r25
    2b8c:	8f 91       	pop	r24
    2b8e:	7f 91       	pop	r23
    2b90:	6f 91       	pop	r22
    2b92:	5f 91       	pop	r21
    2b94:	4f 91       	pop	r20
    2b96:	3f 91       	pop	r19
    2b98:	2f 91       	pop	r18
    2b9a:	0f 91       	pop	r16
    2b9c:	0f 90       	pop	r0
    2b9e:	0b be       	out	0x3b, r0	; 59
    2ba0:	0f 90       	pop	r0
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	0f 90       	pop	r0
    2ba6:	1f 90       	pop	r1
    2ba8:	18 95       	reti

00002baa <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2baa:	1f 92       	push	r1
    2bac:	0f 92       	push	r0
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	0f 92       	push	r0
    2bb2:	11 24       	eor	r1, r1
    2bb4:	0b b6       	in	r0, 0x3b	; 59
    2bb6:	0f 92       	push	r0
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	2f 93       	push	r18
    2bbe:	3f 93       	push	r19
    2bc0:	4f 93       	push	r20
    2bc2:	5f 93       	push	r21
    2bc4:	6f 93       	push	r22
    2bc6:	7f 93       	push	r23
    2bc8:	8f 93       	push	r24
    2bca:	9f 93       	push	r25
    2bcc:	af 93       	push	r26
    2bce:	bf 93       	push	r27
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	ef 93       	push	r30
    2bd6:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2bd8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2bdc:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <__vector_126+0x3c>
    2be0:	3e da       	rcall	.-2948   	; 0x205e <udd_ctrl_interrupt_tc_setup>
    2be2:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2be4:	c4 c0       	rjmp	.+392    	; 0x2d6e <__vector_126+0x1c4>
    2be6:	82 e0       	ldi	r24, 0x02	; 2
    2be8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2bec:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2bf0:	81 95       	neg	r24
    2bf2:	88 0f       	add	r24, r24
    2bf4:	e8 e7       	ldi	r30, 0x78	; 120
    2bf6:	f2 e2       	ldi	r31, 0x22	; 34
    2bf8:	e8 1b       	sub	r30, r24
    2bfa:	f1 09       	sbc	r31, r1
    2bfc:	20 81       	ld	r18, Z
    2bfe:	31 81       	ldd	r19, Z+1	; 0x01
    2c00:	28 57       	subi	r18, 0x78	; 120
    2c02:	32 42       	sbci	r19, 0x22	; 34
    2c04:	36 95       	lsr	r19
    2c06:	27 95       	ror	r18
    2c08:	36 95       	lsr	r19
    2c0a:	27 95       	ror	r18
    2c0c:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2c0e:	27 95       	ror	r18
    2c10:	82 2f       	mov	r24, r18
    2c12:	86 95       	lsr	r24
    2c14:	20 fd       	sbrc	r18, 0
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <__vector_126+0x72>
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	01 c0       	rjmp	.+2      	; 0x2c1e <__vector_126+0x74>
    2c1c:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c1e:	89 0f       	add	r24, r25
    2c20:	e8 2f       	mov	r30, r24
    2c22:	ef 70       	andi	r30, 0x0F	; 15
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	ee 0f       	add	r30, r30
    2c28:	ff 1f       	adc	r31, r31
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	08 2e       	mov	r0, r24
    2c2e:	00 0c       	add	r0, r0
    2c30:	33 0b       	sbc	r19, r19
    2c32:	22 27       	eor	r18, r18
    2c34:	33 0f       	add	r19, r19
    2c36:	22 1f       	adc	r18, r18
    2c38:	33 27       	eor	r19, r19
    2c3a:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2c3c:	f3 1f       	adc	r31, r19
    2c3e:	df 01       	movw	r26, r30
    2c40:	aa 0f       	add	r26, r26
    2c42:	bb 1f       	adc	r27, r27
    2c44:	aa 0f       	add	r26, r26
    2c46:	bb 1f       	adc	r27, r27
    2c48:	aa 0f       	add	r26, r26
    2c4a:	bb 1f       	adc	r27, r27
    2c4c:	a4 59       	subi	r26, 0x94	; 148
    2c4e:	bd 4d       	sbci	r27, 0xDD	; 221
    2c50:	1c 96       	adiw	r26, 0x0c	; 12
    2c52:	9c 91       	ld	r25, X
    2c54:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2c56:	8b c0       	rjmp	.+278    	; 0x2d6e <__vector_126+0x1c4>
    2c58:	ee 0f       	add	r30, r30
    2c5a:	ff 1f       	adc	r31, r31
    2c5c:	ee 0f       	add	r30, r30
    2c5e:	ff 1f       	adc	r31, r31
    2c60:	ee 0f       	add	r30, r30
    2c62:	ff 1f       	adc	r31, r31
    2c64:	e8 58       	subi	r30, 0x88	; 136
    2c66:	fd 4d       	sbci	r31, 0xDD	; 221
    2c68:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    2c6a:	06 93       	lac	Z, r16
    2c6c:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c6e:	7a c0       	rjmp	.+244    	; 0x2d64 <__vector_126+0x1ba>
    2c70:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2c74:	84 30       	cpi	r24, 0x04	; 4
    2c76:	19 f4       	brne	.+6      	; 0x2c7e <__vector_126+0xd4>
    2c78:	3a d9       	rcall	.-3468   	; 0x1eee <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2c7a:	f8 d8       	rcall	.-3600   	; 0x1e6c <udd_ctrl_init>
    2c7c:	78 c0       	rjmp	.+240    	; 0x2d6e <__vector_126+0x1c4>
    2c7e:	00 91 7a 22 	lds	r16, 0x227A	; 0x80227a <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2c82:	10 91 7b 22 	lds	r17, 0x227B	; 0x80227b <udd_sram+0xf>
    2c86:	80 91 07 24 	lds	r24, 0x2407	; 0x802407 <udd_g_ctrlreq+0xa>
    2c8a:	90 91 08 24 	lds	r25, 0x2408	; 0x802408 <udd_g_ctrlreq+0xb>
    2c8e:	c0 91 64 22 	lds	r28, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    2c92:	d0 91 65 22 	lds	r29, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2c96:	98 01       	movw	r18, r16
    2c98:	2c 0f       	add	r18, r28
    2c9a:	3d 1f       	adc	r19, r29
    2c9c:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2c9e:	93 07       	cpc	r25, r19
    2ca0:	18 f4       	brcc	.+6      	; 0x2ca8 <__vector_126+0xfe>
    2ca2:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2ca4:	0c 1b       	sub	r16, r28
    2ca6:	1d 0b       	sbc	r17, r29
    2ca8:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <udd_g_ctrlreq+0x8>
    2cac:	90 91 06 24 	lds	r25, 0x2406	; 0x802406 <udd_g_ctrlreq+0x9>
    2cb0:	a8 01       	movw	r20, r16
    2cb2:	64 e2       	ldi	r22, 0x24	; 36
    2cb4:	72 e2       	ldi	r23, 0x22	; 34
    2cb6:	8c 0f       	add	r24, r28
    2cb8:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2cba:	0e 94 dd 23 	call	0x47ba	; 0x47ba <memcpy>
    2cbe:	c0 0f       	add	r28, r16
    2cc0:	d1 1f       	adc	r29, r17
    2cc2:	c0 93 64 22 	sts	0x2264, r28	; 0x802264 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2cc6:	d0 93 65 22 	sts	0x2265, r29	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2cca:	00 34       	cpi	r16, 0x40	; 64
    2ccc:	11 05       	cpc	r17, r1
    2cce:	69 f4       	brne	.+26     	; 0x2cea <__vector_126+0x140>
    2cd0:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2cd4:	90 91 67 22 	lds	r25, 0x2267	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    2cd8:	8c 0f       	add	r24, r28
    2cda:	9d 1f       	adc	r25, r29
    2cdc:	20 91 03 24 	lds	r18, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    2ce0:	30 91 04 24 	lds	r19, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    2ce4:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2ce6:	93 07       	cpc	r25, r19
    2ce8:	80 f0       	brcs	.+32     	; 0x2d0a <__vector_126+0x160>
    2cea:	ed ef       	ldi	r30, 0xFD	; 253
    2cec:	f3 e2       	ldi	r31, 0x23	; 35
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2cee:	c2 87       	std	Z+10, r28	; 0x0a
    2cf0:	d3 87       	std	Z+11, r29	; 0x0b
    2cf2:	06 84       	ldd	r0, Z+14	; 0x0e
    2cf4:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    2cf6:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    2cf8:	30 97       	sbiw	r30, 0x00	; 0
    2cfa:	29 f0       	breq	.+10     	; 0x2d06 <__vector_126+0x15c>
    2cfc:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2cfe:	81 11       	cpse	r24, r1
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <__vector_126+0x15c>
    2d02:	d9 d8       	rcall	.-3662   	; 0x1eb6 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2d04:	34 c0       	rjmp	.+104    	; 0x2d6e <__vector_126+0x1c4>
    2d06:	e5 d8       	rcall	.-3638   	; 0x1ed2 <udd_ctrl_send_zlp_in>
    2d08:	32 c0       	rjmp	.+100    	; 0x2d6e <__vector_126+0x1c4>
    2d0a:	80 91 07 24 	lds	r24, 0x2407	; 0x802407 <udd_g_ctrlreq+0xa>
    2d0e:	90 91 08 24 	lds	r25, 0x2408	; 0x802408 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2d12:	c8 17       	cp	r28, r24
    2d14:	d9 07       	cpc	r29, r25
    2d16:	f9 f4       	brne	.+62     	; 0x2d56 <__vector_126+0x1ac>
    2d18:	e0 91 0b 24 	lds	r30, 0x240B	; 0x80240b <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2d1c:	f0 91 0c 24 	lds	r31, 0x240C	; 0x80240c <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2d20:	30 97       	sbiw	r30, 0x00	; 0
    2d22:	11 f4       	brne	.+4      	; 0x2d28 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2d24:	c8 d8       	rcall	.-3696   	; 0x1eb6 <udd_ctrl_stall_data>
    2d26:	23 c0       	rjmp	.+70     	; 0x2d6e <__vector_126+0x1c4>
    2d28:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2d2a:	81 11       	cpse	r24, r1
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <__vector_126+0x188>
    2d2e:	c3 d8       	rcall	.-3706   	; 0x1eb6 <udd_ctrl_stall_data>
    2d30:	1e c0       	rjmp	.+60     	; 0x2d6e <__vector_126+0x1c4>
    2d32:	20 91 66 22 	lds	r18, 0x2266	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2d36:	30 91 67 22 	lds	r19, 0x2267	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
    2d3a:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <udd_ctrl_payload_nb_trans>
    2d3e:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
    2d42:	82 0f       	add	r24, r18
    2d44:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2d46:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <udd_ctrl_prev_payload_nb_trans>
    2d4a:	90 93 67 22 	sts	0x2267, r25	; 0x802267 <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2d4e:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    2d52:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2d56:	e8 e7       	ldi	r30, 0x78	; 120
    2d58:	f2 e2       	ldi	r31, 0x22	; 34
		udd_ctrl_in_sent();
    2d5a:	02 e0       	ldi	r16, 0x02	; 2
    2d5c:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2d5e:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2d60:	06 93       	lac	Z, r16
    2d62:	05 c0       	rjmp	.+10     	; 0x2d6e <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2d64:	80 38       	cpi	r24, 0x80	; 128
    2d66:	11 f4       	brne	.+4      	; 0x2d6c <__vector_126+0x1c2>
    2d68:	ca d8       	rcall	.-3692   	; 0x1efe <udd_ctrl_in_sent>
    2d6a:	01 c0       	rjmp	.+2      	; 0x2d6e <__vector_126+0x1c4>
    2d6c:	ea d9       	rcall	.-3116   	; 0x2142 <udd_ep_trans_complet>
    2d6e:	ff 91       	pop	r31
    2d70:	ef 91       	pop	r30
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	bf 91       	pop	r27
    2d78:	af 91       	pop	r26
    2d7a:	9f 91       	pop	r25
    2d7c:	8f 91       	pop	r24
    2d7e:	7f 91       	pop	r23
    2d80:	6f 91       	pop	r22
    2d82:	5f 91       	pop	r21
    2d84:	4f 91       	pop	r20
    2d86:	3f 91       	pop	r19
    2d88:	2f 91       	pop	r18
    2d8a:	1f 91       	pop	r17
    2d8c:	0f 91       	pop	r16
    2d8e:	0f 90       	pop	r0
    2d90:	0b be       	out	0x3b, r0	; 59
    2d92:	0f 90       	pop	r0
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	0f 90       	pop	r0
    2d98:	1f 90       	pop	r1
    2d9a:	18 95       	reti

00002d9c <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    2d9c:	cf 92       	push	r12
    2d9e:	df 92       	push	r13
    2da0:	ef 92       	push	r14
    2da2:	ff 92       	push	r15
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    2daa:	6b 01       	movw	r12, r22
    2dac:	e1 2c       	mov	r14, r1
    2dae:	f1 2c       	mov	r15, r1
    2db0:	60 e8       	ldi	r22, 0x80	; 128
    2db2:	73 ec       	ldi	r23, 0xC3	; 195
    2db4:	89 ec       	ldi	r24, 0xC9	; 201
    2db6:	91 e0       	ldi	r25, 0x01	; 1
    2db8:	a7 01       	movw	r20, r14
    2dba:	96 01       	movw	r18, r12
    2dbc:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    2dc0:	ca 01       	movw	r24, r20
    2dc2:	b9 01       	movw	r22, r18
    2dc4:	2f ef       	ldi	r18, 0xFF	; 255
    2dc6:	3f ef       	ldi	r19, 0xFF	; 255
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	50 e0       	ldi	r21, 0x00	; 0
    2dcc:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
	if (smallest_div < 1) {
    2dd0:	21 15       	cp	r18, r1
    2dd2:	31 05       	cpc	r19, r1
    2dd4:	29 f4       	brne	.+10     	; 0x2de0 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    2dda:	21 e0       	ldi	r18, 0x01	; 1
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	2d c0       	rjmp	.+90     	; 0x2e3a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    2de0:	22 30       	cpi	r18, 0x02	; 2
    2de2:	31 05       	cpc	r19, r1
    2de4:	28 f4       	brcc	.+10     	; 0x2df0 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    2dea:	22 e0       	ldi	r18, 0x02	; 2
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	25 c0       	rjmp	.+74     	; 0x2e3a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    2df0:	24 30       	cpi	r18, 0x04	; 4
    2df2:	31 05       	cpc	r19, r1
    2df4:	28 f4       	brcc	.+10     	; 0x2e00 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2df6:	83 e0       	ldi	r24, 0x03	; 3
    2df8:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    2dfa:	24 e0       	ldi	r18, 0x04	; 4
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	1d c0       	rjmp	.+58     	; 0x2e3a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    2e00:	28 30       	cpi	r18, 0x08	; 8
    2e02:	31 05       	cpc	r19, r1
    2e04:	28 f4       	brcc	.+10     	; 0x2e10 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2e06:	84 e0       	ldi	r24, 0x04	; 4
    2e08:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    2e0a:	28 e0       	ldi	r18, 0x08	; 8
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	15 c0       	rjmp	.+42     	; 0x2e3a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    2e10:	20 34       	cpi	r18, 0x40	; 64
    2e12:	31 05       	cpc	r19, r1
    2e14:	28 f4       	brcc	.+10     	; 0x2e20 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2e16:	85 e0       	ldi	r24, 0x05	; 5
    2e18:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2e1a:	20 e4       	ldi	r18, 0x40	; 64
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	0d c0       	rjmp	.+26     	; 0x2e3a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    2e20:	2f 3f       	cpi	r18, 0xFF	; 255
    2e22:	31 05       	cpc	r19, r1
    2e24:	09 f0       	breq	.+2      	; 0x2e28 <pwm_set_frequency+0x8c>
    2e26:	28 f4       	brcc	.+10     	; 0x2e32 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2e28:	86 e0       	ldi	r24, 0x06	; 6
    2e2a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	31 e0       	ldi	r19, 0x01	; 1
    2e30:	04 c0       	rjmp	.+8      	; 0x2e3a <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2e32:	87 e0       	ldi	r24, 0x07	; 7
    2e34:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	50 e0       	ldi	r21, 0x00	; 0
    2e3e:	60 e8       	ldi	r22, 0x80	; 128
    2e40:	73 ec       	ldi	r23, 0xC3	; 195
    2e42:	89 ec       	ldi	r24, 0xC9	; 201
    2e44:	91 e0       	ldi	r25, 0x01	; 1
    2e46:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    2e4a:	ca 01       	movw	r24, r20
    2e4c:	b9 01       	movw	r22, r18
    2e4e:	a7 01       	movw	r20, r14
    2e50:	96 01       	movw	r18, r12
    2e52:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    2e56:	2d 83       	std	Y+5, r18	; 0x05
    2e58:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2e5a:	24 36       	cpi	r18, 0x64	; 100
    2e5c:	31 05       	cpc	r19, r1
    2e5e:	18 f4       	brcc	.+6      	; 0x2e66 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    2e60:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2e62:	1d 82       	std	Y+5, r1	; 0x05
    2e64:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	ff 90       	pop	r15
    2e6c:	ef 90       	pop	r14
    2e6e:	df 90       	pop	r13
    2e70:	cf 90       	pop	r12
    2e72:	08 95       	ret

00002e74 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2e74:	0f 93       	push	r16
    2e76:	1f 93       	push	r17
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
    2e7c:	ec 01       	movw	r28, r24
    2e7e:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    2e80:	86 2f       	mov	r24, r22
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	87 30       	cpi	r24, 0x07	; 7
    2e86:	91 05       	cpc	r25, r1
    2e88:	08 f0       	brcs	.+2      	; 0x2e8c <pwm_init+0x18>
    2e8a:	8b c0       	rjmp	.+278    	; 0x2fa2 <pwm_init+0x12e>
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	88 27       	eor	r24, r24
    2e90:	eb 5f       	subi	r30, 0xFB	; 251
    2e92:	fe 4f       	sbci	r31, 0xFE	; 254
    2e94:	8f 4f       	sbci	r24, 0xFF	; 255
    2e96:	0c 94 c6 23 	jmp	0x478c	; 0x478c <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	98 e0       	ldi	r25, 0x08	; 8
    2e9e:	88 83       	st	Y, r24
    2ea0:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2ea2:	e0 e4       	ldi	r30, 0x40	; 64
    2ea4:	f6 e0       	ldi	r31, 0x06	; 6
    2ea6:	30 81       	ld	r19, Z
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	2f ef       	ldi	r18, 0xFF	; 255
    2eae:	24 0f       	add	r18, r20
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <pwm_init+0x42>
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	2a 95       	dec	r18
    2eb8:	e2 f7       	brpl	.-8      	; 0x2eb2 <pwm_init+0x3e>
    2eba:	83 2b       	or	r24, r19
    2ebc:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2ebe:	71 c0       	rjmp	.+226    	; 0x2fa2 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    2ec0:	80 e4       	ldi	r24, 0x40	; 64
    2ec2:	98 e0       	ldi	r25, 0x08	; 8
    2ec4:	88 83       	st	Y, r24
    2ec6:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2ec8:	e0 e4       	ldi	r30, 0x40	; 64
    2eca:	f6 e0       	ldi	r31, 0x06	; 6
    2ecc:	30 81       	ld	r19, Z
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	23 e0       	ldi	r18, 0x03	; 3
    2ed4:	24 0f       	add	r18, r20
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <pwm_init+0x68>
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	2a 95       	dec	r18
    2ede:	e2 f7       	brpl	.-8      	; 0x2ed8 <pwm_init+0x64>
    2ee0:	83 2b       	or	r24, r19
    2ee2:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2ee4:	5e c0       	rjmp	.+188    	; 0x2fa2 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	99 e0       	ldi	r25, 0x09	; 9
    2eea:	88 83       	st	Y, r24
    2eec:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    2eee:	e0 e6       	ldi	r30, 0x60	; 96
    2ef0:	f6 e0       	ldi	r31, 0x06	; 6
    2ef2:	30 81       	ld	r19, Z
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	2f ef       	ldi	r18, 0xFF	; 255
    2efa:	24 0f       	add	r18, r20
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <pwm_init+0x8e>
    2efe:	88 0f       	add	r24, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	2a 95       	dec	r18
    2f04:	e2 f7       	brpl	.-8      	; 0x2efe <pwm_init+0x8a>
    2f06:	83 2b       	or	r24, r19
    2f08:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2f0a:	4b c0       	rjmp	.+150    	; 0x2fa2 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2f0c:	80 e4       	ldi	r24, 0x40	; 64
    2f0e:	99 e0       	ldi	r25, 0x09	; 9
    2f10:	88 83       	st	Y, r24
    2f12:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2f14:	e0 e6       	ldi	r30, 0x60	; 96
    2f16:	f6 e0       	ldi	r31, 0x06	; 6
    2f18:	30 81       	ld	r19, Z
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	23 e0       	ldi	r18, 0x03	; 3
    2f20:	24 0f       	add	r18, r20
    2f22:	02 c0       	rjmp	.+4      	; 0x2f28 <pwm_init+0xb4>
    2f24:	88 0f       	add	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	2a 95       	dec	r18
    2f2a:	e2 f7       	brpl	.-8      	; 0x2f24 <pwm_init+0xb0>
    2f2c:	83 2b       	or	r24, r19
    2f2e:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2f30:	38 c0       	rjmp	.+112    	; 0x2fa2 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	9a e0       	ldi	r25, 0x0A	; 10
    2f36:	88 83       	st	Y, r24
    2f38:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2f3a:	e0 e8       	ldi	r30, 0x80	; 128
    2f3c:	f6 e0       	ldi	r31, 0x06	; 6
    2f3e:	30 81       	ld	r19, Z
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	2f ef       	ldi	r18, 0xFF	; 255
    2f46:	24 0f       	add	r18, r20
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <pwm_init+0xda>
    2f4a:	88 0f       	add	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	2a 95       	dec	r18
    2f50:	e2 f7       	brpl	.-8      	; 0x2f4a <pwm_init+0xd6>
    2f52:	83 2b       	or	r24, r19
    2f54:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2f56:	25 c0       	rjmp	.+74     	; 0x2fa2 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    2f58:	80 e4       	ldi	r24, 0x40	; 64
    2f5a:	9a e0       	ldi	r25, 0x0A	; 10
    2f5c:	88 83       	st	Y, r24
    2f5e:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    2f60:	e0 e8       	ldi	r30, 0x80	; 128
    2f62:	f6 e0       	ldi	r31, 0x06	; 6
    2f64:	30 81       	ld	r19, Z
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	23 e0       	ldi	r18, 0x03	; 3
    2f6c:	24 0f       	add	r18, r20
    2f6e:	02 c0       	rjmp	.+4      	; 0x2f74 <pwm_init+0x100>
    2f70:	88 0f       	add	r24, r24
    2f72:	99 1f       	adc	r25, r25
    2f74:	2a 95       	dec	r18
    2f76:	e2 f7       	brpl	.-8      	; 0x2f70 <pwm_init+0xfc>
    2f78:	83 2b       	or	r24, r19
    2f7a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2f7c:	12 c0       	rjmp	.+36     	; 0x2fa2 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	9b e0       	ldi	r25, 0x0B	; 11
    2f82:	88 83       	st	Y, r24
    2f84:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    2f86:	e0 ea       	ldi	r30, 0xA0	; 160
    2f88:	f6 e0       	ldi	r31, 0x06	; 6
    2f8a:	30 81       	ld	r19, Z
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	2f ef       	ldi	r18, 0xFF	; 255
    2f92:	24 0f       	add	r18, r20
    2f94:	02 c0       	rjmp	.+4      	; 0x2f9a <pwm_init+0x126>
    2f96:	88 0f       	add	r24, r24
    2f98:	99 1f       	adc	r25, r25
    2f9a:	2a 95       	dec	r18
    2f9c:	e2 f7       	brpl	.-8      	; 0x2f96 <pwm_init+0x122>
    2f9e:	83 2b       	or	r24, r19
    2fa0:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    2fa2:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    2fa4:	42 30       	cpi	r20, 0x02	; 2
    2fa6:	61 f0       	breq	.+24     	; 0x2fc0 <pwm_init+0x14c>
    2fa8:	18 f4       	brcc	.+6      	; 0x2fb0 <pwm_init+0x13c>
    2faa:	41 30       	cpi	r20, 0x01	; 1
    2fac:	31 f0       	breq	.+12     	; 0x2fba <pwm_init+0x146>
    2fae:	10 c0       	rjmp	.+32     	; 0x2fd0 <pwm_init+0x15c>
    2fb0:	43 30       	cpi	r20, 0x03	; 3
    2fb2:	49 f0       	breq	.+18     	; 0x2fc6 <pwm_init+0x152>
    2fb4:	44 30       	cpi	r20, 0x04	; 4
    2fb6:	51 f0       	breq	.+20     	; 0x2fcc <pwm_init+0x158>
    2fb8:	0b c0       	rjmp	.+22     	; 0x2fd0 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    2fba:	80 e1       	ldi	r24, 0x10	; 16
    2fbc:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2fbe:	08 c0       	rjmp	.+16     	; 0x2fd0 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    2fc0:	80 e2       	ldi	r24, 0x20	; 32
    2fc2:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2fc4:	05 c0       	rjmp	.+10     	; 0x2fd0 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    2fc6:	80 e4       	ldi	r24, 0x40	; 64
    2fc8:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    2fcc:	80 e8       	ldi	r24, 0x80	; 128
    2fce:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    2fd0:	88 81       	ld	r24, Y
    2fd2:	99 81       	ldd	r25, Y+1	; 0x01
    2fd4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    2fd8:	e8 81       	ld	r30, Y
    2fda:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2fdc:	81 81       	ldd	r24, Z+1	; 0x01
    2fde:	88 7f       	andi	r24, 0xF8	; 248
    2fe0:	83 60       	ori	r24, 0x03	; 3
    2fe2:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2fe4:	1d 82       	std	Y+5, r1	; 0x05
    2fe6:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2fe8:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    2fea:	e8 81       	ld	r30, Y
    2fec:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2fee:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2ff0:	80 7f       	andi	r24, 0xF0	; 240
    2ff2:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    2ff4:	b8 01       	movw	r22, r16
    2ff6:	ce 01       	movw	r24, r28
    2ff8:	d1 de       	rcall	.-606    	; 0x2d9c <pwm_set_frequency>
}
    2ffa:	df 91       	pop	r29
    2ffc:	cf 91       	pop	r28
    2ffe:	1f 91       	pop	r17
    3000:	0f 91       	pop	r16
    3002:	08 95       	ret

00003004 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    300a:	2d 81       	ldd	r18, Y+5	; 0x05
    300c:	3e 81       	ldd	r19, Y+6	; 0x06
    300e:	a6 2f       	mov	r26, r22
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	0e 94 ce 23 	call	0x479c	; 0x479c <__umulhisi3>
    3016:	24 e6       	ldi	r18, 0x64	; 100
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e0       	ldi	r20, 0x00	; 0
    301c:	50 e0       	ldi	r21, 0x00	; 0
    301e:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	e8 81       	ld	r30, Y
    3026:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    3028:	e6 fd       	sbrc	r30, 6
    302a:	17 c0       	rjmp	.+46     	; 0x305a <pwm_start+0x56>
		switch (channel_index) {
    302c:	82 30       	cpi	r24, 0x02	; 2
    302e:	61 f0       	breq	.+24     	; 0x3048 <pwm_start+0x44>
    3030:	18 f4       	brcc	.+6      	; 0x3038 <pwm_start+0x34>
    3032:	81 30       	cpi	r24, 0x01	; 1
    3034:	31 f0       	breq	.+12     	; 0x3042 <pwm_start+0x3e>
    3036:	1b c0       	rjmp	.+54     	; 0x306e <pwm_start+0x6a>
    3038:	83 30       	cpi	r24, 0x03	; 3
    303a:	49 f0       	breq	.+18     	; 0x304e <pwm_start+0x4a>
    303c:	84 30       	cpi	r24, 0x04	; 4
    303e:	51 f0       	breq	.+20     	; 0x3054 <pwm_start+0x50>
    3040:	16 c0       	rjmp	.+44     	; 0x306e <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    3042:	20 af       	std	Z+56, r18	; 0x38
    3044:	31 af       	std	Z+57, r19	; 0x39
    3046:	13 c0       	rjmp	.+38     	; 0x306e <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    3048:	22 af       	std	Z+58, r18	; 0x3a
    304a:	33 af       	std	Z+59, r19	; 0x3b
    304c:	10 c0       	rjmp	.+32     	; 0x306e <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    304e:	24 af       	std	Z+60, r18	; 0x3c
    3050:	35 af       	std	Z+61, r19	; 0x3d
    3052:	0d c0       	rjmp	.+26     	; 0x306e <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    3054:	26 af       	std	Z+62, r18	; 0x3e
    3056:	37 af       	std	Z+63, r19	; 0x3f
    3058:	0a c0       	rjmp	.+20     	; 0x306e <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    305a:	81 30       	cpi	r24, 0x01	; 1
    305c:	19 f0       	breq	.+6      	; 0x3064 <pwm_start+0x60>
    305e:	82 30       	cpi	r24, 0x02	; 2
    3060:	21 f0       	breq	.+8      	; 0x306a <pwm_start+0x66>
    3062:	05 c0       	rjmp	.+10     	; 0x306e <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    3064:	20 af       	std	Z+56, r18	; 0x38
    3066:	31 af       	std	Z+57, r19	; 0x39
    3068:	02 c0       	rjmp	.+4      	; 0x306e <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    306a:	22 af       	std	Z+58, r18	; 0x3a
    306c:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    306e:	8d 81       	ldd	r24, Y+5	; 0x05
    3070:	9e 81       	ldd	r25, Y+6	; 0x06
    3072:	e8 81       	ld	r30, Y
    3074:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    3076:	86 a3       	std	Z+38, r24	; 0x26
    3078:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	e8 81       	ld	r30, Y
    307e:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    3080:	e6 fd       	sbrc	r30, 6
    3082:	04 c0       	rjmp	.+8      	; 0x308c <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	89 2b       	or	r24, r25
    3088:	81 83       	std	Z+1, r24	; 0x01
    308a:	04 c0       	rjmp	.+8      	; 0x3094 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	80 73       	andi	r24, 0x30	; 48
    3090:	89 2b       	or	r24, r25
    3092:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    3094:	e8 81       	ld	r30, Y
    3096:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3098:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    309a:	80 7f       	andi	r24, 0xF0	; 240
    309c:	9c 81       	ldd	r25, Y+4	; 0x04
    309e:	89 2b       	or	r24, r25
    30a0:	80 83       	st	Z, r24
}
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	08 95       	ret

000030a8 <cb_rtc_alarm>:

void halt(void)
{
	/* MAIN Loop Shutdown */

	runmode = 0;
    30a8:	08 95       	ret

000030aa <usb_callback_suspend_action>:
    30aa:	08 95       	ret

000030ac <usb_callback_resume_action>:
    30ac:	08 95       	ret

000030ae <usb_callback_remotewakeup_enable>:
    30ae:	08 95       	ret

000030b0 <usb_callback_remotewakeup_disable>:
    30b0:	08 95       	ret

000030b2 <usb_callback_cdc_enable>:
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	80 93 bc 22 	sts	0x22BC, r24	; 0x8022bc <usb_cdc_transfers_autorized>
    30b8:	08 95       	ret

000030ba <usb_callback_cdc_disable>:
    30ba:	10 92 bc 22 	sts	0x22BC, r1	; 0x8022bc <usb_cdc_transfers_autorized>
    30be:	08 95       	ret

000030c0 <usb_callback_config>:
    30c0:	08 95       	ret

000030c2 <usb_callback_cdc_set_dtr>:
    30c2:	08 95       	ret

000030c4 <usb_callback_cdc_set_rts>:
    30c4:	08 95       	ret

000030c6 <usb_callback_rx_notify>:
    30c6:	08 95       	ret

000030c8 <usb_callback_tx_empty_notify>:
    30c8:	08 95       	ret

000030ca <main>:
}


int main(void)
{
    30ca:	2f 92       	push	r2
    30cc:	3f 92       	push	r3
    30ce:	4f 92       	push	r4
    30d0:	5f 92       	push	r5
    30d2:	6f 92       	push	r6
    30d4:	7f 92       	push	r7
    30d6:	8f 92       	push	r8
    30d8:	9f 92       	push	r9
    30da:	af 92       	push	r10
    30dc:	bf 92       	push	r11
    30de:	cf 92       	push	r12
    30e0:	df 92       	push	r13
    30e2:	ef 92       	push	r14
    30e4:	ff 92       	push	r15
    30e6:	0f 93       	push	r16
    30e8:	1f 93       	push	r17
    30ea:	cf 93       	push	r28
    30ec:	df 93       	push	r29
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	c2 54       	subi	r28, 0x42	; 66
    30f4:	d1 09       	sbc	r29, r1
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	de bf       	out	0x3e, r29	; 62
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    30fa:	0f 2e       	mov	r0, r31
    30fc:	f0 ea       	ldi	r31, 0xA0	; 160
    30fe:	af 2e       	mov	r10, r31
    3100:	b1 2c       	mov	r11, r1
    3102:	f0 2d       	mov	r31, r0
    3104:	07 e0       	ldi	r16, 0x07	; 7
    3106:	d5 01       	movw	r26, r10
    3108:	12 96       	adiw	r26, 0x02	; 2
	uint8_t retcode = 0;

	/* Init of sub-modules */
	pmic_init();
	sysclk_init();
    310a:	0c 93       	st	X, r16
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    310c:	71 d2       	rcall	.+1250   	; 0x35f0 <sysclk_init>
    310e:	ed e0       	ldi	r30, 0x0D	; 13
    3110:	f4 e2       	ldi	r31, 0x24	; 36
    3112:	10 82       	st	Z, r1
    3114:	11 82       	std	Z+1, r1	; 0x01
    3116:	12 82       	std	Z+2, r1	; 0x02
    3118:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    311a:	14 82       	std	Z+4, r1	; 0x04
    311c:	11 e0       	ldi	r17, 0x01	; 1
	sleepmgr_init();	// Unlocks all sleep mode levels
	rtc_init();
    311e:	15 83       	std	Z+5, r17	; 0x05
    3120:	0e 94 4f 01 	call	0x29e	; 0x29e <rtc_init>
	rtc_set_callback(cb_rtc_alarm);
    3124:	84 e5       	ldi	r24, 0x54	; 84
    3126:	98 e1       	ldi	r25, 0x18	; 24
    3128:	0e 94 4a 01 	call	0x294	; 0x294 <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    312c:	62 e0       	ldi	r22, 0x02	; 2
    312e:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event 7 */
	EVSYS.CH7MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    3130:	e0 d2       	rcall	.+1472   	; 0x36f2 <sysclk_enable_module>
    3132:	e0 e8       	ldi	r30, 0x80	; 128
    3134:	f1 e0       	ldi	r31, 0x01	; 1
    3136:	80 ec       	ldi	r24, 0xC0	; 192

	/* DAC - event 6 */
	EVSYS.CH6MUX = EVSYS_CHMUX_TCE1_OVF_gc;
    3138:	87 83       	std	Z+7, r24	; 0x07
    313a:	88 ee       	ldi	r24, 0xE8	; 232


static void tc_init(void)
{
	/* DAC clock */
	tc_enable(&TCE1);
    313c:	86 83       	std	Z+6, r24	; 0x06
    313e:	80 e4       	ldi	r24, 0x40	; 64
    3140:	9a e0       	ldi	r25, 0x0A	; 10
    3142:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    3146:	0f 2e       	mov	r0, r31
    3148:	f0 e4       	ldi	r31, 0x40	; 64
    314a:	ef 2e       	mov	r14, r31
    314c:	fa e0       	ldi	r31, 0x0A	; 10
    314e:	ff 2e       	mov	r15, r31
    3150:	f0 2d       	mov	r31, r0
    3152:	f7 01       	movw	r30, r14
    3154:	81 81       	ldd	r24, Z+1	; 0x01
    3156:	88 7f       	andi	r24, 0xF8	; 248
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    3158:	81 83       	std	Z+1, r24	; 0x01
    315a:	80 e7       	ldi	r24, 0x70	; 112
    315c:	92 e0       	ldi	r25, 0x02	; 2
    315e:	86 a3       	std	Z+38, r24	; 0x26
	tc_set_wgm(&TCE1, TC_WG_NORMAL);											// Internal clock for DAC convertion
	tc_write_period(&TCE1, (sysclk_get_per_hz() / DAC_RATE_OF_CONV) - 1);		// DAC clock 48 kHz for audio play-back

	/* VCTCXO PWM signal generation */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 500);							// Init PWM structure and enable timer
    3160:	97 a3       	std	Z+39, r25	; 0x27
    3162:	24 ef       	ldi	r18, 0xF4	; 244
    3164:	31 e0       	ldi	r19, 0x01	; 1
    3166:	43 e0       	ldi	r20, 0x03	; 3
    3168:	60 e0       	ldi	r22, 0x00	; 0
    316a:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    316c:	01 96       	adiw	r24, 0x01	; 1
    316e:	82 de       	rcall	.-764    	; 0x2e74 <pwm_init>
    3170:	6d e2       	ldi	r22, 0x2D	; 45
    3172:	ce 01       	movw	r24, r28
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    3174:	01 96       	adiw	r24, 0x01	; 1
    3176:	46 df       	rcall	.-372    	; 0x3004 <pwm_start>
    3178:	c1 2c       	mov	r12, r1
    317a:	68 94       	set
    317c:	dd 24       	eor	r13, r13
    317e:	d3 f8       	bld	r13, 3
    3180:	8d e5       	ldi	r24, 0x5D	; 93
    3182:	94 e7       	ldi	r25, 0x74	; 116
    3184:	d6 01       	movw	r26, r12
    3186:	dc 96       	adiw	r26, 0x3c	; 60
    3188:	8d 93       	st	X+, r24
	struct adc_channel_config			adcch_vctcxo_conf;
	struct adc_channel_config			adcch_io_adc4_conf;
	struct adc_channel_config			adcch_io_adc5_conf;

	/* Prepare the structures */
	adc_read_configuration(&ADC_5V0,						&adc_5v0_conf);
    318a:	9c 93       	st	X, r25
    318c:	dd 97       	sbiw	r26, 0x3d	; 61
    318e:	be 01       	movw	r22, r28
    3190:	6c 5d       	subi	r22, 0xDC	; 220
    3192:	7f 4f       	sbci	r23, 0xFF	; 255
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    3198:	0e 94 54 05 	call	0xaa8	; 0xaa8 <adc_read_configuration>
    319c:	ae 01       	movw	r20, r28
    319e:	41 5c       	subi	r20, 0xC1	; 193
    31a0:	5f 4f       	sbci	r21, 0xFF	; 255
    31a2:	61 e0       	ldi	r22, 0x01	; 1
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_3V0,						&adc_3v0_conf);
    31a8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <adcch_read_configuration>
    31ac:	be 01       	movw	r22, r28
    31ae:	63 5e       	subi	r22, 0xE3	; 227
    31b0:	7f 4f       	sbci	r23, 0xFF	; 255
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    31b6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <adc_read_configuration>
    31ba:	ae 01       	movw	r20, r28
    31bc:	45 5c       	subi	r20, 0xC5	; 197
    31be:	5f 4f       	sbci	r21, 0xFF	; 255
    31c0:	61 e0       	ldi	r22, 0x01	; 1
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VBAT,						&adc_vbat_conf);
    31c6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <adcch_read_configuration>
    31ca:	be 01       	movw	r22, r28
    31cc:	6a 5e       	subi	r22, 0xEA	; 234
    31ce:	7f 4f       	sbci	r23, 0xFF	; 255
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    31d4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <adc_read_configuration>
    31d8:	ae 01       	movw	r20, r28
    31da:	49 5c       	subi	r20, 0xC9	; 201
    31dc:	5f 4f       	sbci	r21, 0xFF	; 255
    31de:	61 e0       	ldi	r22, 0x01	; 1
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_VCTCXO,						&adc_vctcxo_conf);
    31e4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <adcch_read_configuration>
    31e8:	be 01       	movw	r22, r28
    31ea:	61 5f       	subi	r22, 0xF1	; 241
    31ec:	7f 4f       	sbci	r23, 0xFF	; 255
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    31f2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <adc_read_configuration>
    31f6:	ae 01       	movw	r20, r28
    31f8:	4d 5c       	subi	r20, 0xCD	; 205
    31fa:	5f 4f       	sbci	r21, 0xFF	; 255
    31fc:	62 e0       	ldi	r22, 0x02	; 2
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC4,					&adc_io_adc4_conf);
    3202:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <adcch_read_configuration>
    3206:	be 01       	movw	r22, r28
    3208:	68 5f       	subi	r22, 0xF8	; 248
    320a:	7f 4f       	sbci	r23, 0xFF	; 255
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_io_adc4_conf);
    3210:	0e 94 54 05 	call	0xaa8	; 0xaa8 <adc_read_configuration>
    3214:	ae 01       	movw	r20, r28
    3216:	41 5d       	subi	r20, 0xD1	; 209
    3218:	5f 4f       	sbci	r21, 0xFF	; 255
    321a:	64 e0       	ldi	r22, 0x04	; 4
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_read_configuration(&ADC_IO_ADC5,					&adc_io_adc5_conf);
    3220:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <adcch_read_configuration>
    3224:	be 01       	movw	r22, r28
    3226:	6f 5f       	subi	r22, 0xFF	; 255
    3228:	7f 4f       	sbci	r23, 0xFF	; 255
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_io_adc5_conf);
    322e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <adc_read_configuration>
    3232:	ae 01       	movw	r20, r28
    3234:	45 5d       	subi	r20, 0xD5	; 213
    3236:	5f 4f       	sbci	r21, 0xFF	; 255
    3238:	68 e0       	ldi	r22, 0x08	; 8
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	92 e0       	ldi	r25, 0x02	; 2
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    323e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <adcch_read_configuration>
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3242:	6d a1       	ldd	r22, Y+37	; 0x25
    3244:	8e a1       	ldd	r24, Y+38	; 0x26
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3246:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3248:	8e a3       	std	Y+38, r24	; 0x26
    324a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    324c:	8f 8d       	ldd	r24, Y+31	; 0x1f
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    324e:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3250:	8f 8f       	std	Y+31, r24	; 0x1f
    3252:	4f 89       	ldd	r20, Y+23	; 0x17
    3254:	88 8d       	ldd	r24, Y+24	; 0x18
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3256:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3258:	88 8f       	std	Y+24, r24	; 0x18
    325a:	38 89       	ldd	r19, Y+16	; 0x10
    325c:	89 89       	ldd	r24, Y+17	; 0x11
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    325e:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3260:	89 8b       	std	Y+17, r24	; 0x11
    3262:	29 85       	ldd	r18, Y+9	; 0x09
    3264:	8a 85       	ldd	r24, Y+10	; 0x0a
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3266:	8f 78       	andi	r24, 0x8F	; 143
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    3268:	8a 87       	std	Y+10, r24	; 0x0a
    326a:	9a 81       	ldd	r25, Y+2	; 0x02
    326c:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    326e:	8f 78       	andi	r24, 0x8F	; 143
    3270:	8b 83       	std	Y+3, r24	; 0x03
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    3272:	86 ec       	ldi	r24, 0xC6	; 198
    3274:	8f a3       	std	Y+39, r24	; 0x27
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    3276:	1b 87       	std	Y+11, r17	; 0x0b
    3278:	1c 83       	std	Y+4, r17	; 0x04
    327a:	83 e0       	ldi	r24, 0x03	; 3
    327c:	88 a7       	std	Y+40, r24	; 0x28
    327e:	89 a3       	std	Y+33, r24	; 0x21
    3280:	8a 8f       	std	Y+26, r24	; 0x1a
    3282:	8b 8b       	std	Y+19, r24	; 0x13
static inline void adc_set_gain_impedance_mode(struct adc_config *conf,
		enum adc_gainstage_impmode impmode)
{
	switch (impmode) {
	case ADC_GAIN_HIGHIMPEDANCE:
		conf->ctrlb &= ~ADC_IMPMODE_bm;
    3284:	8c 87       	std	Y+12, r24	; 0x0c
    3286:	8d 83       	std	Y+5, r24	; 0x05
    3288:	61 70       	andi	r22, 0x01	; 1
    328a:	60 64       	ori	r22, 0x40	; 64
    328c:	6d a3       	std	Y+37, r22	; 0x25
    328e:	59 70       	andi	r21, 0x09	; 9
    3290:	50 64       	ori	r21, 0x40	; 64
    3292:	5e 8f       	std	Y+30, r21	; 0x1e
    3294:	49 70       	andi	r20, 0x09	; 9
    3296:	40 64       	ori	r20, 0x40	; 64
    3298:	4f 8b       	std	Y+23, r20	; 0x17
    329a:	39 70       	andi	r19, 0x09	; 9
    329c:	30 64       	ori	r19, 0x40	; 64
    329e:	38 8b       	std	Y+16, r19	; 0x10
    32a0:	21 70       	andi	r18, 0x01	; 1
    32a2:	20 64       	ori	r18, 0x40	; 64
    32a4:	29 87       	std	Y+9, r18	; 0x09
    32a6:	91 70       	andi	r25, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    32a8:	90 64       	ori	r25, 0x40	; 64
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	1f af       	std	Y+63, r17	; 0x3f
    32ae:	90 e1       	ldi	r25, 0x10	; 16
    32b0:	21 96       	adiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    32b2:	9f af       	std	Y+63, r25	; 0x3f
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    32b4:	21 97       	sbiw	r28, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    32b6:	1b af       	std	Y+59, r17	; 0x3b
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    32b8:	1c ae       	std	Y+60, r1	; 0x3c
    32ba:	1f ab       	std	Y+55, r17	; 0x37
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    32bc:	98 e1       	ldi	r25, 0x18	; 24
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    32be:	98 af       	std	Y+56, r25	; 0x38
    32c0:	1b ab       	std	Y+51, r17	; 0x33
    32c2:	68 94       	set
    32c4:	99 24       	eor	r9, r9
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    32c6:	93 f8       	bld	r9, 3
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    32c8:	9c aa       	std	Y+52, r9	; 0x34
    32ca:	1f a7       	std	Y+47, r17	; 0x2f
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    32cc:	90 e2       	ldi	r25, 0x20	; 32
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    32ce:	98 ab       	std	Y+48, r25	; 0x30
    32d0:	1b a7       	std	Y+43, r17	; 0x2b
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    32d2:	98 e2       	ldi	r25, 0x28	; 40
    32d4:	9c a7       	std	Y+44, r25	; 0x2c
    32d6:	22 96       	adiw	r28, 0x02	; 2
    32d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    32da:	22 97       	sbiw	r28, 0x02	; 2
    32dc:	93 7f       	andi	r25, 0xF3	; 243
    32de:	22 96       	adiw	r28, 0x02	; 2
    32e0:	9f af       	std	Y+63, r25	; 0x3f
    32e2:	22 97       	sbiw	r28, 0x02	; 2
    32e4:	9d ad       	ldd	r25, Y+61	; 0x3d
    32e6:	93 7f       	andi	r25, 0xF3	; 243
    32e8:	9d af       	std	Y+61, r25	; 0x3d
    32ea:	99 ad       	ldd	r25, Y+57	; 0x39
    32ec:	93 7f       	andi	r25, 0xF3	; 243
    32ee:	99 af       	std	Y+57, r25	; 0x39
    32f0:	9d a9       	ldd	r25, Y+53	; 0x35
    32f2:	93 7f       	andi	r25, 0xF3	; 243
    32f4:	9d ab       	std	Y+53, r25	; 0x35
    32f6:	99 a9       	ldd	r25, Y+49	; 0x31
    32f8:	93 7f       	andi	r25, 0xF3	; 243
    32fa:	99 ab       	std	Y+49, r25	; 0x31
    32fc:	9d a5       	ldd	r25, Y+45	; 0x2d
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    32fe:	93 7f       	andi	r25, 0xF3	; 243
    3300:	9d a7       	std	Y+45, r25	; 0x2d
    3302:	23 96       	adiw	r28, 0x03	; 3
    3304:	8f af       	std	Y+63, r24	; 0x3f
    3306:	23 97       	sbiw	r28, 0x03	; 3
	adcch_set_pin_scan(&adcch_5v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_3v0_conf,		0, 3);
	adcch_set_pin_scan(&adcch_vbat_conf,	0, 3);

	/* Execute the new settings */
	adc_write_configuration(&ADC_5V0,						&adc_5v0_conf);
    3308:	8e af       	std	Y+62, r24	; 0x3e
    330a:	8a af       	std	Y+58, r24	; 0x3a
    330c:	be 01       	movw	r22, r28
    330e:	6c 5d       	subi	r22, 0xDC	; 220
    3310:	7f 4f       	sbci	r23, 0xFF	; 255
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_5V0, ADC_5V0_CH,			&adcch_5v0_conf);
    3316:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <adc_write_configuration>
    331a:	ae 01       	movw	r20, r28
    331c:	41 5c       	subi	r20, 0xC1	; 193
    331e:	5f 4f       	sbci	r21, 0xFF	; 255
    3320:	61 e0       	ldi	r22, 0x01	; 1
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_3V0,						&adc_3v0_conf);
    3326:	0e 94 8d 05 	call	0xb1a	; 0xb1a <adcch_write_configuration>
    332a:	be 01       	movw	r22, r28
    332c:	63 5e       	subi	r22, 0xE3	; 227
    332e:	7f 4f       	sbci	r23, 0xFF	; 255
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_3V0, ADC_3V0_CH,			&adcch_3v0_conf);
    3334:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <adc_write_configuration>
    3338:	ae 01       	movw	r20, r28
    333a:	45 5c       	subi	r20, 0xC5	; 197
    333c:	5f 4f       	sbci	r21, 0xFF	; 255
    333e:	61 e0       	ldi	r22, 0x01	; 1
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VBAT,						&adc_vbat_conf);
    3344:	0e 94 8d 05 	call	0xb1a	; 0xb1a <adcch_write_configuration>
    3348:	be 01       	movw	r22, r28
    334a:	6a 5e       	subi	r22, 0xEA	; 234
    334c:	7f 4f       	sbci	r23, 0xFF	; 255
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VBAT, ADC_VBAT_CH,		&adcch_vbat_conf);
    3352:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <adc_write_configuration>
    3356:	ae 01       	movw	r20, r28
    3358:	49 5c       	subi	r20, 0xC9	; 201
    335a:	5f 4f       	sbci	r21, 0xFF	; 255
    335c:	61 e0       	ldi	r22, 0x01	; 1
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_VCTCXO,					&adc_vctcxo_conf);
    3362:	0e 94 8d 05 	call	0xb1a	; 0xb1a <adcch_write_configuration>
    3366:	be 01       	movw	r22, r28
    3368:	61 5f       	subi	r22, 0xF1	; 241
    336a:	7f 4f       	sbci	r23, 0xFF	; 255
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO, ADC_VCTCXO_CH,	&adcch_vctcxo_conf);
    3370:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <adc_write_configuration>
    3374:	ae 01       	movw	r20, r28
    3376:	4d 5c       	subi	r20, 0xCD	; 205
    3378:	5f 4f       	sbci	r21, 0xFF	; 255
    337a:	62 e0       	ldi	r22, 0x02	; 2
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC4,					&adc_vctcxo_conf);
    3380:	0e 94 8d 05 	call	0xb1a	; 0xb1a <adcch_write_configuration>
    3384:	be 01       	movw	r22, r28
    3386:	61 5f       	subi	r22, 0xF1	; 241
    3388:	7f 4f       	sbci	r23, 0xFF	; 255
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,	&adcch_vctcxo_conf);
    338e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <adc_write_configuration>
    3392:	ae 01       	movw	r20, r28
    3394:	4d 5c       	subi	r20, 0xCD	; 205
    3396:	5f 4f       	sbci	r21, 0xFF	; 255
    3398:	64 e0       	ldi	r22, 0x04	; 4
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	92 e0       	ldi	r25, 0x02	; 2
	
	adc_write_configuration(&ADC_IO_ADC5,					&adc_vctcxo_conf);
    339e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <adcch_write_configuration>
    33a2:	be 01       	movw	r22, r28
    33a4:	61 5f       	subi	r22, 0xF1	; 241
    33a6:	7f 4f       	sbci	r23, 0xFF	; 255
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,	&adcch_vctcxo_conf);
    33ac:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <adc_write_configuration>
    33b0:	ae 01       	movw	r20, r28
    33b2:	4d 5c       	subi	r20, 0xCD	; 205
    33b4:	5f 4f       	sbci	r21, 0xFF	; 255
    33b6:	68 e0       	ldi	r22, 0x08	; 8
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	92 e0       	ldi	r25, 0x02	; 2
static void dac_init(void)
{
    struct dac_config dac_io_dac0_conf;
    struct dac_config dac_io_dac1_conf;

    dac_read_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    33bc:	0e 94 8d 05 	call	0xb1a	; 0xb1a <adcch_write_configuration>
    33c0:	be 01       	movw	r22, r28
    33c2:	68 5f       	subi	r22, 0xF8	; 248
    33c4:	7f 4f       	sbci	r23, 0xFF	; 255
    33c6:	80 e2       	ldi	r24, 0x20	; 32
    33c8:	93 e0       	ldi	r25, 0x03	; 3
    dac_read_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    33ca:	0e 94 9e 06 	call	0xd3c	; 0xd3c <dac_read_configuration>
    33ce:	be 01       	movw	r22, r28
    33d0:	6f 5f       	subi	r22, 0xFF	; 255
    33d2:	7f 4f       	sbci	r23, 0xFF	; 255
    33d4:	80 e2       	ldi	r24, 0x20	; 32
    33d6:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    33d8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <dac_read_configuration>
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    33dc:	1a 87       	std	Y+10, r17	; 0x0a
    33de:	1b 83       	std	Y+3, r17	; 0x03
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    33e0:	84 e0       	ldi	r24, 0x04	; 4
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    33e2:	88 87       	std	Y+8, r24	; 0x08
		Assert(false);
#endif
	} else {
		setting = DAC_CHSEL_DUAL_gc;
	}
	conf->ctrlb &= ~DAC_CHSEL_gm;
    33e4:	99 85       	ldd	r25, Y+9	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    33e6:	99 82       	std	Y+1, r9	; 0x01
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	9c 79       	andi	r25, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    33ec:	91 60       	ori	r25, 0x01	; 1
    33ee:	99 87       	std	Y+9, r25	; 0x09
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    33f0:	96 e0       	ldi	r25, 0x06	; 6
    33f2:	9b 87       	std	Y+11, r25	; 0x0b
    33f4:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    33f6:	82 60       	ori	r24, 0x02	; 2
    #ifdef XMEGA_DAC_VERSION_1
    dac_set_conversion_interval(&dac_io_dac0_conf, 2);
    dac_set_conversion_interval(&dac_io_dac1_conf, 2);
    #endif

    dac_write_configuration(&DAC_IO_DAC0, &dac_io_dac0_conf);
    33f8:	8a 83       	std	Y+2, r24	; 0x02
    33fa:	9c 83       	std	Y+4, r25	; 0x04
    33fc:	be 01       	movw	r22, r28
    33fe:	68 5f       	subi	r22, 0xF8	; 248
    3400:	7f 4f       	sbci	r23, 0xFF	; 255
    3402:	80 e2       	ldi	r24, 0x20	; 32
    3404:	93 e0       	ldi	r25, 0x03	; 3
    dac_write_configuration(&DAC_IO_DAC1, &dac_io_dac1_conf);
    3406:	0e 94 42 06 	call	0xc84	; 0xc84 <dac_write_configuration>
    340a:	be 01       	movw	r22, r28
    340c:	6f 5f       	subi	r22, 0xFF	; 255
    340e:	7f 4f       	sbci	r23, 0xFF	; 255
    3410:	80 e2       	ldi	r24, 0x20	; 32
    3412:	93 e0       	ldi	r25, 0x03	; 3
	rtc_set_callback(cb_rtc_alarm);
	evsys_init();
	tc_init();
	adc_init();
	dac_init();
	twi_init();
    3414:	0e 94 42 06 	call	0xc84	; 0xc84 <dac_write_configuration>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    3418:	0e 94 1a 02 	call	0x434	; 0x434 <twi_init>

	/* All interrupt sources prepared here - IRQ activation */
	irq_initialize_vectors();
    341c:	0e 94 19 03 	call	0x632	; 0x632 <board_init>
	cpu_irq_enable();
    3420:	f5 01       	movw	r30, r10
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3422:	02 83       	std	Z+2, r16	; 0x02
    3424:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3426:	d6 01       	movw	r26, r12
    3428:	8c 91       	ld	r24, X
    342a:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    342c:	81 60       	ori	r24, 0x01	; 1
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    342e:	8c 93       	st	X, r24
    3430:	f7 01       	movw	r30, r14
    3432:	80 81       	ld	r24, Z
}


static void usb_init(void)
{
	udc_start();
    3434:	80 7f       	andi	r24, 0xF0	; 240
    3436:	81 60       	ori	r24, 0x01	; 1
	tc_start();			// All clocks and PWM timers start here

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB
#if 1
	stdio_usb_init();	// stdio_usb
    3438:	80 83       	st	Z, r24
    343a:	e6 d5       	rcall	.+3020   	; 0x4008 <udc_start>
	stdio_usb_enable();
    343c:	0e 94 57 23 	call	0x46ae	; 0x46ae <stdio_usb_init>
#endif

	twi_start();
    3440:	0e 94 53 23 	call	0x46a6	; 0x46a6 <stdio_usb_enable>
	//rtc_start();		// Test for RTC32

	/* The application code */
	runmode = (uint8_t) 1;
    3444:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_start>
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    3448:	10 93 bd 22 	sts	0x22BD, r17	; 0x8022bd <runmode>
    344c:	0f 2e       	mov	r0, r31
    344e:	f0 e2       	ldi	r31, 0x20	; 32
    3450:	af 2e       	mov	r10, r31
    3452:	f3 e0       	ldi	r31, 0x03	; 3
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    3454:	bf 2e       	mov	r11, r31
    3456:	f0 2d       	mov	r31, r0
    3458:	0f 2e       	mov	r0, r31
    345a:	fa e3       	ldi	r31, 0x3A	; 58
    345c:	2f 2e       	mov	r2, r31
    345e:	f3 e0       	ldi	r31, 0x03	; 3

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3460:	3f 2e       	mov	r3, r31
    3462:	f0 2d       	mov	r31, r0
    3464:	0f 2e       	mov	r0, r31
    3466:	fd e0       	ldi	r31, 0x0D	; 13
    3468:	8f 2e       	mov	r8, r31
    346a:	f4 e2       	ldi	r31, 0x24	; 36
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    346c:	9f 2e       	mov	r9, r31
    346e:	f0 2d       	mov	r31, r0
}

static void task(void)
{
	static uint32_t last = 0;
	uint32_t now = rtc_get_time();
    3470:	08 e4       	ldi	r16, 0x48	; 72
    3472:	10 e0       	ldi	r17, 0x00	; 0
    3474:	0e 94 39 01 	call	0x272	; 0x272 <rtc_get_time>
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    3478:	6b 01       	movw	r12, r22
    347a:	7c 01       	movw	r14, r24
    347c:	d5 01       	movw	r26, r10

static void task_dac(void)
{
	static int idx_dacX = 0;

	if (dac_channel_is_ready(&DAC_IO_DAC0, DAC_CH0 | DAC_CH1)) {
    347e:	15 96       	adiw	r26, 0x05	; 5
    3480:	8c 91       	ld	r24, X
    3482:	83 70       	andi	r24, 0x03	; 3
		dac_set_channel_value(&DAC_IO_DAC0, DAC_IO_DAC0_CHANNEL, dac_io_dac0_buf[idx_dacX]);
    3484:	83 30       	cpi	r24, 0x03	; 3
    3486:	a9 f5       	brne	.+106    	; 0x34f2 <main+0x428>
    3488:	e0 91 ad 22 	lds	r30, 0x22AD	; 0x8022ad <idx_dacX.6917>
    348c:	f0 91 ae 22 	lds	r31, 0x22AE	; 0x8022ae <idx_dacX.6917+0x1>
    3490:	ee 0f       	add	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	ea 51       	subi	r30, 0x1A	; 26
    3496:	ff 4d       	sbci	r31, 0xDF	; 223

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3498:	20 81       	ld	r18, Z
    349a:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    349c:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    349e:	88 87       	std	Y+8, r24	; 0x08
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    34a0:	f8 94       	cli
    34a2:	88 85       	ldd	r24, Y+8	; 0x08
    34a4:	f5 01       	movw	r30, r10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    34a6:	20 8f       	std	Z+24, r18	; 0x18
		dac_set_channel_value(&DAC_IO_DAC1, DAC_IO_DAC1_CHANNEL, dac_io_dac1_buf[idx_dacX]);
    34a8:	31 8f       	std	Z+25, r19	; 0x19
    34aa:	8f bf       	out	0x3f, r24	; 63
    34ac:	e0 91 ad 22 	lds	r30, 0x22AD	; 0x8022ad <idx_dacX.6917>
    34b0:	f0 91 ae 22 	lds	r31, 0x22AE	; 0x8022ae <idx_dacX.6917+0x1>
    34b4:	ee 0f       	add	r30, r30
    34b6:	ff 1f       	adc	r31, r31
    34b8:	ea 51       	subi	r30, 0x1A	; 26
    34ba:	ff 4d       	sbci	r31, 0xDF	; 223

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    34bc:	20 81       	ld	r18, Z
    34be:	31 81       	ldd	r19, Z+1	; 0x01
	cpu_irq_disable();
    34c0:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    34c2:	89 83       	std	Y+1, r24	; 0x01
    34c4:	f8 94       	cli
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	d1 01       	movw	r26, r2
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    34ca:	2d 93       	st	X+, r18
		
		idx_dacX++;
		idx_dacX %= DAC_NR_OF_SAMPLES;
    34cc:	3c 93       	st	X, r19
    34ce:	8f bf       	out	0x3f, r24	; 63
    34d0:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <idx_dacX.6917>
    34d4:	90 91 ae 22 	lds	r25, 0x22AE	; 0x8022ae <idx_dacX.6917+0x1>
    34d8:	01 96       	adiw	r24, 0x01	; 1
    34da:	8f 71       	andi	r24, 0x1F	; 31
    34dc:	90 78       	andi	r25, 0x80	; 128
    34de:	99 23       	and	r25, r25
    34e0:	24 f4       	brge	.+8      	; 0x34ea <main+0x420>
    34e2:	01 97       	sbiw	r24, 0x01	; 1
    34e4:	80 6e       	ori	r24, 0xE0	; 224
    34e6:	9f 6f       	ori	r25, 0xFF	; 255
    34e8:	01 96       	adiw	r24, 0x01	; 1
    34ea:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <idx_dacX.6917>

	/* Handling the USB connection */
	task_usb();

	/* Handle TWI1 and TWI2 communications */
	task_twi(now, last);
    34ee:	90 93 ae 22 	sts	0x22AE, r25	; 0x8022ae <idx_dacX.6917+0x1>
    34f2:	40 90 af 22 	lds	r4, 0x22AF	; 0x8022af <last.6928>
    34f6:	50 90 b0 22 	lds	r5, 0x22B0	; 0x8022b0 <last.6928+0x1>
    34fa:	60 90 b1 22 	lds	r6, 0x22B1	; 0x8022b1 <last.6928+0x2>
}

static void task_twi(uint32_t now, uint32_t last)
{
	/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
	task_twi_onboard(now, last);
    34fe:	70 90 b2 22 	lds	r7, 0x22B2	; 0x8022b2 <last.6928+0x3>
    3502:	a3 01       	movw	r20, r6
    3504:	92 01       	movw	r18, r4
    3506:	c7 01       	movw	r24, r14
    3508:	b6 01       	movw	r22, r12

	/* TWI2 - LCD Port */
	task_twi_lcd(now, last);
    350a:	0e 94 9b 02 	call	0x536	; 0x536 <task_twi_onboard>
    350e:	a3 01       	movw	r20, r6
    3510:	92 01       	movw	r18, r4
    3512:	c7 01       	movw	r24, r14
    3514:	b6 01       	movw	r22, r12
	if ((last >> 10) != now_sec) {
		printf("%c\r\nFindMeSAT V1 @USB: RTC32 = %06ld sec\r\n", 0x0c, now_sec);
	}
#endif

	last = now;
    3516:	0e 94 9c 02 	call	0x538	; 0x538 <task_twi_lcd>
    351a:	c0 92 af 22 	sts	0x22AF, r12	; 0x8022af <last.6928>
    351e:	d0 92 b0 22 	sts	0x22B0, r13	; 0x8022b0 <last.6928+0x1>
    3522:	e0 92 b1 22 	sts	0x22B1, r14	; 0x8022b1 <last.6928+0x2>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    3526:	f0 92 b2 22 	sts	0x22B2, r15	; 0x8022b2 <last.6928+0x3>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    352a:	f8 94       	cli
    352c:	f4 01       	movw	r30, r8
    352e:	80 81       	ld	r24, Z
    3530:	81 11       	cpse	r24, r1
    3532:	09 c0       	rjmp	.+18     	; 0x3546 <main+0x47c>
    3534:	ae e0       	ldi	r26, 0x0E	; 14
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3536:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3538:	e0 e0       	ldi	r30, 0x00	; 0
    353a:	ef 5f       	subi	r30, 0xFF	; 255
    353c:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    353e:	88 23       	and	r24, r24
    3540:	e1 f3       	breq	.-8      	; 0x353a <main+0x470>
		cpu_irq_enable();
    3542:	e1 11       	cpse	r30, r1
    3544:	02 c0       	rjmp	.+4      	; 0x354a <main+0x480>
    3546:	78 94       	sei
    3548:	12 c0       	rjmp	.+36     	; 0x356e <main+0x4a4>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    354a:	d8 01       	movw	r26, r16
    354c:	8c 91       	ld	r24, X
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	ee 5d       	subi	r30, 0xDE	; 222
    3552:	ff 4d       	sbci	r31, 0xDF	; 223
    3554:	81 7f       	andi	r24, 0xF1	; 241
    3556:	90 81       	ld	r25, Z
	sleep_enable();
    3558:	89 2b       	or	r24, r25
    355a:	8c 93       	st	X, r24
    355c:	8c 91       	ld	r24, X

	cpu_irq_enable();
    355e:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    3560:	8c 93       	st	X, r24

	sleep_disable();
    3562:	78 94       	sei
    3564:	88 95       	sleep
    3566:	f8 01       	movw	r30, r16
    3568:	80 81       	ld	r24, Z
	twi_start();
	//rtc_start();		// Test for RTC32

	/* The application code */
	runmode = (uint8_t) 1;
    while (runmode) {
    356a:	8e 7f       	andi	r24, 0xFE	; 254
    356c:	80 83       	st	Z, r24
    356e:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <runmode>
		task();
		sleepmgr_enter_sleep();
    }

	cpu_irq_disable();
    3572:	81 11       	cpse	r24, r1
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    3574:	7f cf       	rjmp	.-258    	; 0x3474 <main+0x3aa>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3576:	f8 94       	cli
    3578:	f8 94       	cli
    357a:	80 91 0d 24 	lds	r24, 0x240D	; 0x80240d <sleepmgr_locks>
    357e:	81 11       	cpse	r24, r1
    3580:	09 c0       	rjmp	.+18     	; 0x3594 <main+0x4ca>
    3582:	ae e0       	ldi	r26, 0x0E	; 14
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3584:	b4 e2       	ldi	r27, 0x24	; 36

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3586:	e0 e0       	ldi	r30, 0x00	; 0
    3588:	ef 5f       	subi	r30, 0xFF	; 255
    358a:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    358c:	88 23       	and	r24, r24
    358e:	e1 f3       	breq	.-8      	; 0x3588 <main+0x4be>
		cpu_irq_enable();
    3590:	e1 11       	cpse	r30, r1
    3592:	02 c0       	rjmp	.+4      	; 0x3598 <main+0x4ce>
    3594:	78 94       	sei
    3596:	13 c0       	rjmp	.+38     	; 0x35be <main+0x4f4>
    3598:	a8 e4       	ldi	r26, 0x48	; 72

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	8c 91       	ld	r24, X
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	ee 5d       	subi	r30, 0xDE	; 222
    35a2:	ff 4d       	sbci	r31, 0xDF	; 223
    35a4:	98 2f       	mov	r25, r24
    35a6:	91 7f       	andi	r25, 0xF1	; 241
    35a8:	80 81       	ld	r24, Z
	sleep_enable();
    35aa:	89 2b       	or	r24, r25
    35ac:	8c 93       	st	X, r24
    35ae:	8c 91       	ld	r24, X

	cpu_irq_enable();
    35b0:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    35b2:	8c 93       	st	X, r24

	sleep_disable();
    35b4:	78 94       	sei
    35b6:	88 95       	sleep
    35b8:	8c 91       	ld	r24, X
	sleepmgr_enter_sleep();

	return retcode;
}
    35ba:	8e 7f       	andi	r24, 0xFE	; 254
    35bc:	8c 93       	st	X, r24
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	ce 5b       	subi	r28, 0xBE	; 190
    35c4:	df 4f       	sbci	r29, 0xFF	; 255
    35c6:	cd bf       	out	0x3d, r28	; 61
    35c8:	de bf       	out	0x3e, r29	; 62
    35ca:	df 91       	pop	r29
    35cc:	cf 91       	pop	r28
    35ce:	1f 91       	pop	r17
    35d0:	0f 91       	pop	r16
    35d2:	ff 90       	pop	r15
    35d4:	ef 90       	pop	r14
    35d6:	df 90       	pop	r13
    35d8:	cf 90       	pop	r12
    35da:	bf 90       	pop	r11
    35dc:	af 90       	pop	r10
    35de:	9f 90       	pop	r9
    35e0:	8f 90       	pop	r8
    35e2:	7f 90       	pop	r7
    35e4:	6f 90       	pop	r6
    35e6:	5f 90       	pop	r5
    35e8:	4f 90       	pop	r4
    35ea:	3f 90       	pop	r3
    35ec:	2f 90       	pop	r2
    35ee:	08 95       	ret

000035f0 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    35f0:	cf 93       	push	r28
    35f2:	df 93       	push	r29
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	28 97       	sbiw	r28, 0x08	; 8
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    35fe:	8f ef       	ldi	r24, 0xFF	; 255
    3600:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    3604:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    3608:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    360c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3610:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    3614:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    3618:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    361c:	61 e0       	ldi	r22, 0x01	; 1
    361e:	81 e4       	ldi	r24, 0x41	; 65
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	0e 94 8a 23 	call	0x4714	; 0x4714 <ccp_write_io>
    3626:	6c e1       	ldi	r22, 0x1C	; 28
    3628:	70 e0       	ldi	r23, 0x00	; 0
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    3630:	8a 83       	std	Y+2, r24	; 0x02
    3632:	6d e1       	ldi	r22, 0x1D	; 29
    3634:	70 e0       	ldi	r23, 0x00	; 0
    3636:	82 e0       	ldi	r24, 0x02	; 2
    3638:	0e 94 80 23 	call	0x4700	; 0x4700 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    363c:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	9a 81       	ldd	r25, Y+2	; 0x02
    3642:	01 96       	adiw	r24, 0x01	; 1
    3644:	21 f4       	brne	.+8      	; 0x364e <sysclk_init+0x5e>
		cal = 0x2340;
    3646:	80 e4       	ldi	r24, 0x40	; 64
    3648:	93 e2       	ldi	r25, 0x23	; 35
    364a:	89 83       	std	Y+1, r24	; 0x01
    364c:	9a 83       	std	Y+2, r25	; 0x02
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	9a 81       	ldd	r25, Y+2	; 0x02
    3652:	8b 83       	std	Y+3, r24	; 0x03
    3654:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    3656:	e0 e6       	ldi	r30, 0x60	; 96
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    365c:	8c 81       	ldd	r24, Y+4	; 0x04
    365e:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    3660:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    3664:	84 fd       	sbrc	r24, 4
    3666:	21 c0       	rjmp	.+66     	; 0x36aa <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3668:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    366c:	83 fd       	sbrc	r24, 3
    366e:	0e c0       	rjmp	.+28     	; 0x368c <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    3670:	e0 e5       	ldi	r30, 0x50	; 80
    3672:	f0 e0       	ldi	r31, 0x00	; 0
    3674:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3676:	8f b7       	in	r24, 0x3f	; 63
    3678:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    367a:	f8 94       	cli
	return flags;
    367c:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    367e:	80 81       	ld	r24, Z
    3680:	88 60       	ori	r24, 0x08	; 8
    3682:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3684:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3686:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    3688:	83 ff       	sbrs	r24, 3
    368a:	fd cf       	rjmp	.-6      	; 0x3686 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    368c:	8f b7       	in	r24, 0x3f	; 63
    368e:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    3690:	f8 94       	cli
	return flags;
    3692:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    3694:	e0 e5       	ldi	r30, 0x50	; 80
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	83 ec       	ldi	r24, 0xC3	; 195
    369a:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    369c:	80 81       	ld	r24, Z
    369e:	80 61       	ori	r24, 0x10	; 16
    36a0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    36a2:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    36a4:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    36a6:	84 ff       	sbrs	r24, 4
    36a8:	fd cf       	rjmp	.-6      	; 0x36a4 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    36aa:	64 e0       	ldi	r22, 0x04	; 4
    36ac:	80 e4       	ldi	r24, 0x40	; 64
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	0e 94 8a 23 	call	0x4714	; 0x4714 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    36b4:	8f b7       	in	r24, 0x3f	; 63
    36b6:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    36b8:	f8 94       	cli
	return flags;
    36ba:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    36bc:	e0 e5       	ldi	r30, 0x50	; 80
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	8e 7f       	andi	r24, 0xFE	; 254
    36c4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    36c6:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    36c8:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    36ca:	8f b7       	in	r24, 0x3f	; 63
    36cc:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    36ce:	f8 94       	cli
	return flags;
    36d0:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    36d2:	80 81       	ld	r24, Z
    36d4:	88 60       	ori	r24, 0x08	; 8
    36d6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    36d8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    36da:	81 81       	ldd	r24, Z+1	; 0x01
    36dc:	83 ff       	sbrs	r24, 3
    36de:	fd cf       	rjmp	.-6      	; 0x36da <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    36e0:	8b e0       	ldi	r24, 0x0B	; 11
    36e2:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    36e6:	28 96       	adiw	r28, 0x08	; 8
    36e8:	cd bf       	out	0x3d, r28	; 61
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	08 95       	ret

000036f2 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	1f 92       	push	r1
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    36fc:	9f b7       	in	r25, 0x3f	; 63
    36fe:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    3700:	f8 94       	cli
	return flags;
    3702:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    3704:	e8 2f       	mov	r30, r24
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	e0 59       	subi	r30, 0x90	; 144
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	60 95       	com	r22
    370e:	80 81       	ld	r24, Z
    3710:	68 23       	and	r22, r24
    3712:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3714:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    3716:	0f 90       	pop	r0
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	08 95       	ret

0000371e <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    371e:	cf 93       	push	r28
    3720:	df 93       	push	r29
    3722:	1f 92       	push	r1
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3728:	9f b7       	in	r25, 0x3f	; 63
    372a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    372c:	f8 94       	cli
	return flags;
    372e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    3730:	e8 2f       	mov	r30, r24
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	e0 59       	subi	r30, 0x90	; 144
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	80 81       	ld	r24, Z
    373a:	68 2b       	or	r22, r24
    373c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    373e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    3740:	0f 90       	pop	r0
    3742:	df 91       	pop	r29
    3744:	cf 91       	pop	r28
    3746:	08 95       	ret

00003748 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    3748:	cf 93       	push	r28
    374a:	df 93       	push	r29
    374c:	1f 92       	push	r1
    374e:	1f 92       	push	r1
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    3754:	86 30       	cpi	r24, 0x06	; 6
    3756:	11 f0       	breq	.+4      	; 0x375c <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    3758:	60 e0       	ldi	r22, 0x00	; 0
    375a:	01 c0       	rjmp	.+2      	; 0x375e <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    375c:	68 e1       	ldi	r22, 0x18	; 24
    375e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    3762:	81 fd       	sbrc	r24, 1
    3764:	2a c0       	rjmp	.+84     	; 0x37ba <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3766:	8f b7       	in	r24, 0x3f	; 63
    3768:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    376a:	f8 94       	cli
	return flags;
    376c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    376e:	e0 e5       	ldi	r30, 0x50	; 80
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 81       	ld	r24, Z
    3774:	82 60       	ori	r24, 0x02	; 2
    3776:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3778:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    377a:	81 81       	ldd	r24, Z+1	; 0x01
    377c:	81 ff       	sbrs	r24, 1
    377e:	fd cf       	rjmp	.-6      	; 0x377a <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3780:	8f b7       	in	r24, 0x3f	; 63
    3782:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3784:	f8 94       	cli
	return flags;
    3786:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    3788:	a0 e5       	ldi	r26, 0x50	; 80
    378a:	b0 e0       	ldi	r27, 0x00	; 0
    378c:	16 96       	adiw	r26, 0x06	; 6
    378e:	8c 91       	ld	r24, X
    3790:	16 97       	sbiw	r26, 0x06	; 6
    3792:	89 7f       	andi	r24, 0xF9	; 249
    3794:	16 96       	adiw	r26, 0x06	; 6
    3796:	8c 93       	st	X, r24
    3798:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    379a:	e0 e6       	ldi	r30, 0x60	; 96
    379c:	f0 e0       	ldi	r31, 0x00	; 0
    379e:	80 e8       	ldi	r24, 0x80	; 128
    37a0:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    37a2:	8b eb       	ldi	r24, 0xBB	; 187
    37a4:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    37a6:	16 96       	adiw	r26, 0x06	; 6
    37a8:	8c 91       	ld	r24, X
    37aa:	16 97       	sbiw	r26, 0x06	; 6
    37ac:	84 60       	ori	r24, 0x04	; 4
    37ae:	16 96       	adiw	r26, 0x06	; 6
    37b0:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    37b2:	80 81       	ld	r24, Z
    37b4:	81 60       	ori	r24, 0x01	; 1
    37b6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    37b8:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    37ba:	63 60       	ori	r22, 0x03	; 3
    37bc:	84 e4       	ldi	r24, 0x44	; 68
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	a9 d7       	rcall	.+3922   	; 0x4714 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    37c2:	60 e4       	ldi	r22, 0x40	; 64
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	95 df       	rcall	.-214    	; 0x36f2 <sysclk_enable_module>
}
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	08 95       	ret

000037d2 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    37d2:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <udi_cdc_nb_comm_enabled>
    37d6:	81 50       	subi	r24, 0x01	; 1
    37d8:	80 93 d4 23 	sts	0x23D4, r24	; 0x8023d4 <udi_cdc_nb_comm_enabled>
    37dc:	08 95       	ret

000037de <udi_cdc_data_setup>:
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	08 95       	ret

000037e2 <udi_cdc_getsetting>:
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	08 95       	ret

000037e6 <udi_cdc_line_coding_received>:
    37e6:	62 ee       	ldi	r22, 0xE2	; 226
    37e8:	73 e2       	ldi	r23, 0x23	; 35
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	69 cc       	rjmp	.-1838   	; 0x30c0 <usb_callback_config>
    37ee:	08 95       	ret

000037f0 <udi_cdc_comm_enable>:
    37f0:	10 92 d4 23 	sts	0x23D4, r1	; 0x8023d4 <udi_cdc_nb_comm_enabled>
    37f4:	10 92 e0 23 	sts	0x23E0, r1	; 0x8023e0 <udi_cdc_state>
    37f8:	10 92 e1 23 	sts	0x23E1, r1	; 0x8023e1 <udi_cdc_state+0x1>
    37fc:	e6 ed       	ldi	r30, 0xD6	; 214
    37fe:	f3 e2       	ldi	r31, 0x23	; 35
    3800:	81 ea       	ldi	r24, 0xA1	; 161
    3802:	80 83       	st	Z, r24
    3804:	80 e2       	ldi	r24, 0x20	; 32
    3806:	81 83       	std	Z+1, r24	; 0x01
    3808:	12 82       	std	Z+2, r1	; 0x02
    380a:	13 82       	std	Z+3, r1	; 0x03
    380c:	14 82       	std	Z+4, r1	; 0x04
    380e:	15 82       	std	Z+5, r1	; 0x05
    3810:	82 e0       	ldi	r24, 0x02	; 2
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	86 83       	std	Z+6, r24	; 0x06
    3816:	97 83       	std	Z+7, r25	; 0x07
    3818:	10 86       	std	Z+8, r1	; 0x08
    381a:	11 86       	std	Z+9, r1	; 0x09
    381c:	e2 ee       	ldi	r30, 0xE2	; 226
    381e:	f3 e2       	ldi	r31, 0x23	; 35
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	92 ec       	ldi	r25, 0xC2	; 194
    3824:	a1 e0       	ldi	r26, 0x01	; 1
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	80 83       	st	Z, r24
    382a:	91 83       	std	Z+1, r25	; 0x01
    382c:	a2 83       	std	Z+2, r26	; 0x02
    382e:	b3 83       	std	Z+3, r27	; 0x03
    3830:	14 82       	std	Z+4, r1	; 0x04
    3832:	15 82       	std	Z+5, r1	; 0x05
    3834:	88 e0       	ldi	r24, 0x08	; 8
    3836:	86 83       	std	Z+6, r24	; 0x06
    3838:	bf 01       	movw	r22, r30
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	41 dc       	rcall	.-1918   	; 0x30c0 <usb_callback_config>
    383e:	39 dc       	rcall	.-1934   	; 0x30b2 <usb_callback_cdc_enable>
    3840:	88 23       	and	r24, r24
    3842:	29 f0       	breq	.+10     	; 0x384e <udi_cdc_comm_enable+0x5e>
    3844:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udi_cdc_nb_comm_enabled>
    3848:	9f 5f       	subi	r25, 0xFF	; 255
    384a:	90 93 d4 23 	sts	0x23D4, r25	; 0x8023d4 <udi_cdc_nb_comm_enabled>
    384e:	08 95       	ret

00003850 <udi_cdc_tx_send>:
    3850:	ff 92       	push	r15
    3852:	0f 93       	push	r16
    3854:	1f 93       	push	r17
    3856:	cf 93       	push	r28
    3858:	df 93       	push	r29
    385a:	1f 92       	push	r1
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
    3860:	80 91 c1 22 	lds	r24, 0x22C1	; 0x8022c1 <udi_cdc_tx_trans_ongoing>
    3864:	81 11       	cpse	r24, r1
    3866:	9f c0       	rjmp	.+318    	; 0x39a6 <udi_cdc_tx_send+0x156>
    3868:	0e 94 d7 12 	call	0x25ae	; 0x25ae <udd_is_high_speed>
    386c:	88 23       	and	r24, r24
    386e:	51 f0       	breq	.+20     	; 0x3884 <udi_cdc_tx_send+0x34>
    3870:	00 91 c2 22 	lds	r16, 0x22C2	; 0x8022c2 <udi_cdc_tx_sof_num>
    3874:	10 91 c3 22 	lds	r17, 0x22C3	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    3878:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <udd_get_micro_frame_number>
    387c:	08 17       	cp	r16, r24
    387e:	19 07       	cpc	r17, r25
    3880:	59 f4       	brne	.+22     	; 0x3898 <udi_cdc_tx_send+0x48>
    3882:	91 c0       	rjmp	.+290    	; 0x39a6 <udi_cdc_tx_send+0x156>
    3884:	00 91 c2 22 	lds	r16, 0x22C2	; 0x8022c2 <udi_cdc_tx_sof_num>
    3888:	10 91 c3 22 	lds	r17, 0x22C3	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    388c:	0e 94 df 12 	call	0x25be	; 0x25be <udd_get_frame_number>
    3890:	08 17       	cp	r16, r24
    3892:	19 07       	cpc	r17, r25
    3894:	09 f4       	brne	.+2      	; 0x3898 <udi_cdc_tx_send+0x48>
    3896:	87 c0       	rjmp	.+270    	; 0x39a6 <udi_cdc_tx_send+0x156>
    3898:	8f b7       	in	r24, 0x3f	; 63
    389a:	89 83       	std	Y+1, r24	; 0x01
    389c:	f8 94       	cli
    389e:	19 81       	ldd	r17, Y+1	; 0x01
    38a0:	00 91 c4 22 	lds	r16, 0x22C4	; 0x8022c4 <udi_cdc_tx_buf_sel>
    38a4:	e0 2f       	mov	r30, r16
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	ee 0f       	add	r30, r30
    38aa:	ff 1f       	adc	r31, r31
    38ac:	eb 53       	subi	r30, 0x3B	; 59
    38ae:	fd 4d       	sbci	r31, 0xDD	; 221
    38b0:	80 81       	ld	r24, Z
    38b2:	91 81       	ldd	r25, Z+1	; 0x01
    38b4:	89 2b       	or	r24, r25
    38b6:	09 f5       	brne	.+66     	; 0x38fa <udi_cdc_tx_send+0xaa>
    38b8:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <sof_zlp_counter.5059>
    38bc:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <sof_zlp_counter.5059+0x1>
    38c0:	01 96       	adiw	r24, 0x01	; 1
    38c2:	80 93 be 22 	sts	0x22BE, r24	; 0x8022be <sof_zlp_counter.5059>
    38c6:	90 93 bf 22 	sts	0x22BF, r25	; 0x8022bf <sof_zlp_counter.5059+0x1>
    38ca:	0e 94 d7 12 	call	0x25ae	; 0x25ae <udd_is_high_speed>
    38ce:	81 11       	cpse	r24, r1
    38d0:	07 c0       	rjmp	.+14     	; 0x38e0 <udi_cdc_tx_send+0x90>
    38d2:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <sof_zlp_counter.5059>
    38d6:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <sof_zlp_counter.5059+0x1>
    38da:	84 36       	cpi	r24, 0x64	; 100
    38dc:	91 05       	cpc	r25, r1
    38de:	58 f0       	brcs	.+22     	; 0x38f6 <udi_cdc_tx_send+0xa6>
    38e0:	0e 94 d7 12 	call	0x25ae	; 0x25ae <udd_is_high_speed>
    38e4:	88 23       	and	r24, r24
    38e6:	49 f0       	breq	.+18     	; 0x38fa <udi_cdc_tx_send+0xaa>
    38e8:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <sof_zlp_counter.5059>
    38ec:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <sof_zlp_counter.5059+0x1>
    38f0:	80 32       	cpi	r24, 0x20	; 32
    38f2:	93 40       	sbci	r25, 0x03	; 3
    38f4:	10 f4       	brcc	.+4      	; 0x38fa <udi_cdc_tx_send+0xaa>
    38f6:	1f bf       	out	0x3f, r17	; 63
    38f8:	56 c0       	rjmp	.+172    	; 0x39a6 <udi_cdc_tx_send+0x156>
    38fa:	10 92 be 22 	sts	0x22BE, r1	; 0x8022be <sof_zlp_counter.5059>
    38fe:	10 92 bf 22 	sts	0x22BF, r1	; 0x8022bf <sof_zlp_counter.5059+0x1>
    3902:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <udi_cdc_tx_both_buf_to_send>
    3906:	81 11       	cpse	r24, r1
    3908:	06 c0       	rjmp	.+12     	; 0x3916 <udi_cdc_tx_send+0xc6>
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	01 11       	cpse	r16, r1
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <udi_cdc_tx_buf_sel>
    3914:	04 c0       	rjmp	.+8      	; 0x391e <udi_cdc_tx_send+0xce>
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	01 11       	cpse	r16, r1
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	08 2f       	mov	r16, r24
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	80 93 c1 22 	sts	0x22C1, r24	; 0x8022c1 <udi_cdc_tx_trans_ongoing>
    3924:	1f bf       	out	0x3f, r17	; 63
    3926:	10 e0       	ldi	r17, 0x00	; 0
    3928:	f8 01       	movw	r30, r16
    392a:	ee 0f       	add	r30, r30
    392c:	ff 1f       	adc	r31, r31
    392e:	eb 53       	subi	r30, 0x3B	; 59
    3930:	fd 4d       	sbci	r31, 0xDD	; 221
    3932:	80 81       	ld	r24, Z
    3934:	91 81       	ldd	r25, Z+1	; 0x01
    3936:	ff 24       	eor	r15, r15
    3938:	f3 94       	inc	r15
    393a:	80 34       	cpi	r24, 0x40	; 64
    393c:	91 05       	cpc	r25, r1
    393e:	09 f4       	brne	.+2      	; 0x3942 <udi_cdc_tx_send+0xf2>
    3940:	f1 2c       	mov	r15, r1
    3942:	80 34       	cpi	r24, 0x40	; 64
    3944:	91 05       	cpc	r25, r1
    3946:	91 f0       	breq	.+36     	; 0x396c <udi_cdc_tx_send+0x11c>
    3948:	0e 94 d7 12 	call	0x25ae	; 0x25ae <udd_is_high_speed>
    394c:	88 23       	and	r24, r24
    394e:	39 f0       	breq	.+14     	; 0x395e <udi_cdc_tx_send+0x10e>
    3950:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <udd_get_micro_frame_number>
    3954:	80 93 c2 22 	sts	0x22C2, r24	; 0x8022c2 <udi_cdc_tx_sof_num>
    3958:	90 93 c3 22 	sts	0x22C3, r25	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    395c:	0b c0       	rjmp	.+22     	; 0x3974 <udi_cdc_tx_send+0x124>
    395e:	0e 94 df 12 	call	0x25be	; 0x25be <udd_get_frame_number>
    3962:	80 93 c2 22 	sts	0x22C2, r24	; 0x8022c2 <udi_cdc_tx_sof_num>
    3966:	90 93 c3 22 	sts	0x22C3, r25	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    396a:	04 c0       	rjmp	.+8      	; 0x3974 <udi_cdc_tx_send+0x124>
    396c:	10 92 c2 22 	sts	0x22C2, r1	; 0x8022c2 <udi_cdc_tx_sof_num>
    3970:	10 92 c3 22 	sts	0x22C3, r1	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    3974:	f8 01       	movw	r30, r16
    3976:	ee 0f       	add	r30, r30
    3978:	ff 1f       	adc	r31, r31
    397a:	eb 53       	subi	r30, 0x3B	; 59
    397c:	fd 4d       	sbci	r31, 0xDD	; 221
    397e:	20 81       	ld	r18, Z
    3980:	31 81       	ldd	r19, Z+1	; 0x01
    3982:	a8 01       	movw	r20, r16
    3984:	00 24       	eor	r0, r0
    3986:	56 95       	lsr	r21
    3988:	47 95       	ror	r20
    398a:	07 94       	ror	r0
    398c:	56 95       	lsr	r21
    398e:	47 95       	ror	r20
    3990:	07 94       	ror	r0
    3992:	54 2f       	mov	r21, r20
    3994:	40 2d       	mov	r20, r0
    3996:	46 53       	subi	r20, 0x36	; 54
    3998:	5d 4d       	sbci	r21, 0xDD	; 221
    399a:	0d ed       	ldi	r16, 0xDD	; 221
    399c:	1c e1       	ldi	r17, 0x1C	; 28
    399e:	6f 2d       	mov	r22, r15
    39a0:	81 e8       	ldi	r24, 0x81	; 129
    39a2:	0e 94 c8 13 	call	0x2790	; 0x2790 <udd_ep_run>
    39a6:	0f 90       	pop	r0
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	ff 90       	pop	r15
    39b2:	08 95       	ret

000039b4 <udi_cdc_data_sof_notify>:
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	4c cf       	rjmp	.-360    	; 0x3850 <udi_cdc_tx_send>
    39b8:	08 95       	ret

000039ba <udi_cdc_data_sent>:
    39ba:	81 11       	cpse	r24, r1
    39bc:	19 c0       	rjmp	.+50     	; 0x39f0 <udi_cdc_data_sent+0x36>
    39be:	20 91 c4 22 	lds	r18, 0x22C4	; 0x8022c4 <udi_cdc_tx_buf_sel>
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	22 23       	and	r18, r18
    39c8:	11 f0       	breq	.+4      	; 0x39ce <udi_cdc_data_sent+0x14>
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	88 0f       	add	r24, r24
    39d0:	99 1f       	adc	r25, r25
    39d2:	fc 01       	movw	r30, r24
    39d4:	eb 53       	subi	r30, 0x3B	; 59
    39d6:	fd 4d       	sbci	r31, 0xDD	; 221
    39d8:	10 82       	st	Z, r1
    39da:	11 82       	std	Z+1, r1	; 0x01
    39dc:	10 92 c0 22 	sts	0x22C0, r1	; 0x8022c0 <udi_cdc_tx_both_buf_to_send>
    39e0:	10 92 c1 22 	sts	0x22C1, r1	; 0x8022c1 <udi_cdc_tx_trans_ongoing>
    39e4:	67 2b       	or	r22, r23
    39e6:	11 f0       	breq	.+4      	; 0x39ec <udi_cdc_data_sent+0x32>
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	6e db       	rcall	.-2340   	; 0x30c8 <usb_callback_tx_empty_notify>
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	30 cf       	rjmp	.-416    	; 0x3850 <udi_cdc_tx_send>
    39f0:	08 95       	ret

000039f2 <udi_cdc_data_disable>:
    39f2:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udi_cdc_nb_data_enabled>
    39f6:	81 50       	subi	r24, 0x01	; 1
    39f8:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <udi_cdc_nb_data_enabled>
    39fc:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3a00:	5c db       	rcall	.-2376   	; 0x30ba <usb_callback_cdc_disable>
    3a02:	10 92 d2 23 	sts	0x23D2, r1	; 0x8023d2 <udi_cdc_data_running>
    3a06:	08 95       	ret

00003a08 <udi_cdc_comm_setup>:
    3a08:	cf 93       	push	r28
    3a0a:	df 93       	push	r29
    3a0c:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <udd_g_ctrlreq>
    3a10:	88 23       	and	r24, r24
    3a12:	e4 f4       	brge	.+56     	; 0x3a4c <udi_cdc_comm_setup+0x44>
    3a14:	80 76       	andi	r24, 0x60	; 96
    3a16:	80 32       	cpi	r24, 0x20	; 32
    3a18:	09 f0       	breq	.+2      	; 0x3a1c <udi_cdc_comm_setup+0x14>
    3a1a:	47 c0       	rjmp	.+142    	; 0x3aaa <udi_cdc_comm_setup+0xa2>
    3a1c:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    3a20:	81 32       	cpi	r24, 0x21	; 33
    3a22:	09 f0       	breq	.+2      	; 0x3a26 <udi_cdc_comm_setup+0x1e>
    3a24:	44 c0       	rjmp	.+136    	; 0x3aae <udi_cdc_comm_setup+0xa6>
    3a26:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    3a2a:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    3a2e:	07 97       	sbiw	r24, 0x07	; 7
    3a30:	09 f0       	breq	.+2      	; 0x3a34 <udi_cdc_comm_setup+0x2c>
    3a32:	3f c0       	rjmp	.+126    	; 0x3ab2 <udi_cdc_comm_setup+0xaa>
    3a34:	ed ef       	ldi	r30, 0xFD	; 253
    3a36:	f3 e2       	ldi	r31, 0x23	; 35
    3a38:	82 ee       	ldi	r24, 0xE2	; 226
    3a3a:	93 e2       	ldi	r25, 0x23	; 35
    3a3c:	80 87       	std	Z+8, r24	; 0x08
    3a3e:	91 87       	std	Z+9, r25	; 0x09
    3a40:	87 e0       	ldi	r24, 0x07	; 7
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	82 87       	std	Z+10, r24	; 0x0a
    3a46:	93 87       	std	Z+11, r25	; 0x0b
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	3a c0       	rjmp	.+116    	; 0x3ac0 <udi_cdc_comm_setup+0xb8>
    3a4c:	80 76       	andi	r24, 0x60	; 96
    3a4e:	80 32       	cpi	r24, 0x20	; 32
    3a50:	91 f5       	brne	.+100    	; 0x3ab6 <udi_cdc_comm_setup+0xae>
    3a52:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    3a56:	80 32       	cpi	r24, 0x20	; 32
    3a58:	19 f0       	breq	.+6      	; 0x3a60 <udi_cdc_comm_setup+0x58>
    3a5a:	82 32       	cpi	r24, 0x22	; 34
    3a5c:	b9 f0       	breq	.+46     	; 0x3a8c <udi_cdc_comm_setup+0x84>
    3a5e:	2d c0       	rjmp	.+90     	; 0x3aba <udi_cdc_comm_setup+0xb2>
    3a60:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    3a64:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    3a68:	07 97       	sbiw	r24, 0x07	; 7
    3a6a:	49 f5       	brne	.+82     	; 0x3abe <udi_cdc_comm_setup+0xb6>
    3a6c:	ed ef       	ldi	r30, 0xFD	; 253
    3a6e:	f3 e2       	ldi	r31, 0x23	; 35
    3a70:	83 ef       	ldi	r24, 0xF3	; 243
    3a72:	9b e1       	ldi	r25, 0x1B	; 27
    3a74:	84 87       	std	Z+12, r24	; 0x0c
    3a76:	95 87       	std	Z+13, r25	; 0x0d
    3a78:	82 ee       	ldi	r24, 0xE2	; 226
    3a7a:	93 e2       	ldi	r25, 0x23	; 35
    3a7c:	80 87       	std	Z+8, r24	; 0x08
    3a7e:	91 87       	std	Z+9, r25	; 0x09
    3a80:	87 e0       	ldi	r24, 0x07	; 7
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	82 87       	std	Z+10, r24	; 0x0a
    3a86:	93 87       	std	Z+11, r25	; 0x0b
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	1a c0       	rjmp	.+52     	; 0x3ac0 <udi_cdc_comm_setup+0xb8>
    3a8c:	cd ef       	ldi	r28, 0xFD	; 253
    3a8e:	d3 e2       	ldi	r29, 0x23	; 35
    3a90:	6a 81       	ldd	r22, Y+2	; 0x02
    3a92:	61 70       	andi	r22, 0x01	; 1
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	15 db       	rcall	.-2518   	; 0x30c2 <usb_callback_cdc_set_dtr>
    3a98:	6a 81       	ldd	r22, Y+2	; 0x02
    3a9a:	7b 81       	ldd	r23, Y+3	; 0x03
    3a9c:	76 95       	lsr	r23
    3a9e:	67 95       	ror	r22
    3aa0:	61 70       	andi	r22, 0x01	; 1
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	0f db       	rcall	.-2530   	; 0x30c4 <usb_callback_cdc_set_rts>
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	0b c0       	rjmp	.+22     	; 0x3ac0 <udi_cdc_comm_setup+0xb8>
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	09 c0       	rjmp	.+18     	; 0x3ac0 <udi_cdc_comm_setup+0xb8>
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	07 c0       	rjmp	.+14     	; 0x3ac0 <udi_cdc_comm_setup+0xb8>
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	05 c0       	rjmp	.+10     	; 0x3ac0 <udi_cdc_comm_setup+0xb8>
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	03 c0       	rjmp	.+6      	; 0x3ac0 <udi_cdc_comm_setup+0xb8>
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	01 c0       	rjmp	.+2      	; 0x3ac0 <udi_cdc_comm_setup+0xb8>
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	df 91       	pop	r29
    3ac2:	cf 91       	pop	r28
    3ac4:	08 95       	ret

00003ac6 <udi_cdc_multi_get_nb_received_data>:
    3ac6:	cf 93       	push	r28
    3ac8:	df 93       	push	r29
    3aca:	1f 92       	push	r1
    3acc:	cd b7       	in	r28, 0x3d	; 61
    3ace:	de b7       	in	r29, 0x3e	; 62
    3ad0:	8f b7       	in	r24, 0x3f	; 63
    3ad2:	89 83       	std	Y+1, r24	; 0x01
    3ad4:	f8 94       	cli
    3ad6:	49 81       	ldd	r20, Y+1	; 0x01
    3ad8:	20 91 4b 23 	lds	r18, 0x234B	; 0x80234b <udi_cdc_rx_pos>
    3adc:	30 91 4c 23 	lds	r19, 0x234C	; 0x80234c <udi_cdc_rx_pos+0x1>
    3ae0:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <udi_cdc_rx_buf_sel>
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	ee 0f       	add	r30, r30
    3ae8:	ff 1f       	adc	r31, r31
    3aea:	e2 5b       	subi	r30, 0xB2	; 178
    3aec:	fc 4d       	sbci	r31, 0xDC	; 220
    3aee:	80 81       	ld	r24, Z
    3af0:	91 81       	ldd	r25, Z+1	; 0x01
    3af2:	4f bf       	out	0x3f, r20	; 63
    3af4:	82 1b       	sub	r24, r18
    3af6:	93 0b       	sbc	r25, r19
    3af8:	0f 90       	pop	r0
    3afa:	df 91       	pop	r29
    3afc:	cf 91       	pop	r28
    3afe:	08 95       	ret

00003b00 <udi_cdc_multi_is_rx_ready>:
    3b00:	e2 df       	rcall	.-60     	; 0x3ac6 <udi_cdc_multi_get_nb_received_data>
    3b02:	21 e0       	ldi	r18, 0x01	; 1
    3b04:	89 2b       	or	r24, r25
    3b06:	09 f4       	brne	.+2      	; 0x3b0a <udi_cdc_multi_is_rx_ready+0xa>
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	82 2f       	mov	r24, r18
    3b0c:	08 95       	ret

00003b0e <udi_cdc_rx_start>:
    3b0e:	0f 93       	push	r16
    3b10:	1f 93       	push	r17
    3b12:	cf 93       	push	r28
    3b14:	df 93       	push	r29
    3b16:	1f 92       	push	r1
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	8f b7       	in	r24, 0x3f	; 63
    3b1e:	89 83       	std	Y+1, r24	; 0x01
    3b20:	f8 94       	cli
    3b22:	99 81       	ldd	r25, Y+1	; 0x01
    3b24:	20 91 4d 23 	lds	r18, 0x234D	; 0x80234d <udi_cdc_rx_buf_sel>
    3b28:	80 91 4a 23 	lds	r24, 0x234A	; 0x80234a <udi_cdc_rx_trans_ongoing>
    3b2c:	81 11       	cpse	r24, r1
    3b2e:	10 c0       	rjmp	.+32     	; 0x3b50 <udi_cdc_rx_start+0x42>
    3b30:	60 91 4b 23 	lds	r22, 0x234B	; 0x80234b <udi_cdc_rx_pos>
    3b34:	70 91 4c 23 	lds	r23, 0x234C	; 0x80234c <udi_cdc_rx_pos+0x1>
    3b38:	02 2f       	mov	r16, r18
    3b3a:	10 e0       	ldi	r17, 0x00	; 0
    3b3c:	f8 01       	movw	r30, r16
    3b3e:	ee 0f       	add	r30, r30
    3b40:	ff 1f       	adc	r31, r31
    3b42:	e2 5b       	subi	r30, 0xB2	; 178
    3b44:	fc 4d       	sbci	r31, 0xDC	; 220
    3b46:	40 81       	ld	r20, Z
    3b48:	51 81       	ldd	r21, Z+1	; 0x01
    3b4a:	64 17       	cp	r22, r20
    3b4c:	75 07       	cpc	r23, r21
    3b4e:	18 f4       	brcc	.+6      	; 0x3b56 <udi_cdc_rx_start+0x48>
    3b50:	9f bf       	out	0x3f, r25	; 63
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	27 c0       	rjmp	.+78     	; 0x3ba4 <udi_cdc_rx_start+0x96>
    3b56:	10 92 4b 23 	sts	0x234B, r1	; 0x80234b <udi_cdc_rx_pos>
    3b5a:	10 92 4c 23 	sts	0x234C, r1	; 0x80234c <udi_cdc_rx_pos+0x1>
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	21 11       	cpse	r18, r1
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udi_cdc_rx_buf_sel>
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	80 93 4a 23 	sts	0x234A, r24	; 0x80234a <udi_cdc_rx_trans_ongoing>
    3b6e:	9f bf       	out	0x3f, r25	; 63
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	c6 df       	rcall	.-116    	; 0x3b00 <udi_cdc_multi_is_rx_ready>
    3b74:	88 23       	and	r24, r24
    3b76:	11 f0       	breq	.+4      	; 0x3b7c <udi_cdc_rx_start+0x6e>
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	a5 da       	rcall	.-2742   	; 0x30c6 <usb_callback_rx_notify>
    3b7c:	a8 01       	movw	r20, r16
    3b7e:	00 24       	eor	r0, r0
    3b80:	56 95       	lsr	r21
    3b82:	47 95       	ror	r20
    3b84:	07 94       	ror	r0
    3b86:	56 95       	lsr	r21
    3b88:	47 95       	ror	r20
    3b8a:	07 94       	ror	r0
    3b8c:	54 2f       	mov	r21, r20
    3b8e:	40 2d       	mov	r20, r0
    3b90:	4e 5a       	subi	r20, 0xAE	; 174
    3b92:	5c 4d       	sbci	r21, 0xDC	; 220
    3b94:	0a e0       	ldi	r16, 0x0A	; 10
    3b96:	1e e1       	ldi	r17, 0x1E	; 30
    3b98:	20 e4       	ldi	r18, 0x40	; 64
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	61 e0       	ldi	r22, 0x01	; 1
    3b9e:	82 e0       	ldi	r24, 0x02	; 2
    3ba0:	0e 94 c8 13 	call	0x2790	; 0x2790 <udd_ep_run>
    3ba4:	0f 90       	pop	r0
    3ba6:	df 91       	pop	r29
    3ba8:	cf 91       	pop	r28
    3baa:	1f 91       	pop	r17
    3bac:	0f 91       	pop	r16
    3bae:	08 95       	ret

00003bb0 <udi_cdc_data_enable>:
    3bb0:	10 92 d3 23 	sts	0x23D3, r1	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3bb4:	10 92 c1 22 	sts	0x22C1, r1	; 0x8022c1 <udi_cdc_tx_trans_ongoing>
    3bb8:	10 92 c0 22 	sts	0x22C0, r1	; 0x8022c0 <udi_cdc_tx_both_buf_to_send>
    3bbc:	10 92 c4 22 	sts	0x22C4, r1	; 0x8022c4 <udi_cdc_tx_buf_sel>
    3bc0:	e5 ec       	ldi	r30, 0xC5	; 197
    3bc2:	f2 e2       	ldi	r31, 0x22	; 34
    3bc4:	10 82       	st	Z, r1
    3bc6:	11 82       	std	Z+1, r1	; 0x01
    3bc8:	12 82       	std	Z+2, r1	; 0x02
    3bca:	13 82       	std	Z+3, r1	; 0x03
    3bcc:	10 92 c2 22 	sts	0x22C2, r1	; 0x8022c2 <udi_cdc_tx_sof_num>
    3bd0:	10 92 c3 22 	sts	0x22C3, r1	; 0x8022c3 <udi_cdc_tx_sof_num+0x1>
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	3c de       	rcall	.-904    	; 0x3850 <udi_cdc_tx_send>
    3bd8:	10 92 4a 23 	sts	0x234A, r1	; 0x80234a <udi_cdc_rx_trans_ongoing>
    3bdc:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <udi_cdc_rx_buf_sel>
    3be0:	ee e4       	ldi	r30, 0x4E	; 78
    3be2:	f3 e2       	ldi	r31, 0x23	; 35
    3be4:	10 82       	st	Z, r1
    3be6:	11 82       	std	Z+1, r1	; 0x01
    3be8:	12 82       	std	Z+2, r1	; 0x02
    3bea:	13 82       	std	Z+3, r1	; 0x03
    3bec:	10 92 4b 23 	sts	0x234B, r1	; 0x80234b <udi_cdc_rx_pos>
    3bf0:	10 92 4c 23 	sts	0x234C, r1	; 0x80234c <udi_cdc_rx_pos+0x1>
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	8b df       	rcall	.-234    	; 0x3b0e <udi_cdc_rx_start>
    3bf8:	88 23       	and	r24, r24
    3bfa:	59 f0       	breq	.+22     	; 0x3c12 <udi_cdc_data_enable+0x62>
    3bfc:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3c00:	9f 5f       	subi	r25, 0xFF	; 255
    3c02:	90 93 d3 23 	sts	0x23D3, r25	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3c06:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <udi_cdc_nb_data_enabled>
    3c0a:	91 30       	cpi	r25, 0x01	; 1
    3c0c:	11 f4       	brne	.+4      	; 0x3c12 <udi_cdc_data_enable+0x62>
    3c0e:	90 93 d2 23 	sts	0x23D2, r25	; 0x8023d2 <udi_cdc_data_running>
    3c12:	08 95       	ret

00003c14 <udi_cdc_data_received>:
    3c14:	0f 93       	push	r16
    3c16:	1f 93       	push	r17
    3c18:	81 11       	cpse	r24, r1
    3c1a:	29 c0       	rjmp	.+82     	; 0x3c6e <udi_cdc_data_received+0x5a>
    3c1c:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udi_cdc_rx_buf_sel>
    3c20:	e1 e0       	ldi	r30, 0x01	; 1
    3c22:	81 11       	cpse	r24, r1
    3c24:	e0 e0       	ldi	r30, 0x00	; 0
    3c26:	84 2f       	mov	r24, r20
    3c28:	61 15       	cp	r22, r1
    3c2a:	71 05       	cpc	r23, r1
    3c2c:	a9 f4       	brne	.+42     	; 0x3c58 <udi_cdc_data_received+0x44>
    3c2e:	4e 2f       	mov	r20, r30
    3c30:	50 e0       	ldi	r21, 0x00	; 0
    3c32:	00 24       	eor	r0, r0
    3c34:	56 95       	lsr	r21
    3c36:	47 95       	ror	r20
    3c38:	07 94       	ror	r0
    3c3a:	56 95       	lsr	r21
    3c3c:	47 95       	ror	r20
    3c3e:	07 94       	ror	r0
    3c40:	54 2f       	mov	r21, r20
    3c42:	40 2d       	mov	r20, r0
    3c44:	4e 5a       	subi	r20, 0xAE	; 174
    3c46:	5c 4d       	sbci	r21, 0xDC	; 220
    3c48:	0a e0       	ldi	r16, 0x0A	; 10
    3c4a:	1e e1       	ldi	r17, 0x1E	; 30
    3c4c:	20 e4       	ldi	r18, 0x40	; 64
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	61 e0       	ldi	r22, 0x01	; 1
    3c52:	0e 94 c8 13 	call	0x2790	; 0x2790 <udd_ep_run>
    3c56:	0b c0       	rjmp	.+22     	; 0x3c6e <udi_cdc_data_received+0x5a>
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	ee 0f       	add	r30, r30
    3c5c:	ff 1f       	adc	r31, r31
    3c5e:	e2 5b       	subi	r30, 0xB2	; 178
    3c60:	fc 4d       	sbci	r31, 0xDC	; 220
    3c62:	60 83       	st	Z, r22
    3c64:	71 83       	std	Z+1, r23	; 0x01
    3c66:	10 92 4a 23 	sts	0x234A, r1	; 0x80234a <udi_cdc_rx_trans_ongoing>
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	50 df       	rcall	.-352    	; 0x3b0e <udi_cdc_rx_start>
    3c6e:	1f 91       	pop	r17
    3c70:	0f 91       	pop	r16
    3c72:	08 95       	ret

00003c74 <udi_cdc_multi_getc>:
    3c74:	ef 92       	push	r14
    3c76:	ff 92       	push	r15
    3c78:	1f 93       	push	r17
    3c7a:	cf 93       	push	r28
    3c7c:	df 93       	push	r29
    3c7e:	1f 92       	push	r1
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
    3c84:	11 e0       	ldi	r17, 0x01	; 1
    3c86:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udi_cdc_line_coding+0x6>
    3c8a:	89 30       	cpi	r24, 0x09	; 9
    3c8c:	09 f0       	breq	.+2      	; 0x3c90 <udi_cdc_multi_getc+0x1c>
    3c8e:	10 e0       	ldi	r17, 0x00	; 0
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	8f b7       	in	r24, 0x3f	; 63
    3c96:	89 83       	std	Y+1, r24	; 0x01
    3c98:	f8 94       	cli
    3c9a:	a9 81       	ldd	r26, Y+1	; 0x01
    3c9c:	20 91 4b 23 	lds	r18, 0x234B	; 0x80234b <udi_cdc_rx_pos>
    3ca0:	30 91 4c 23 	lds	r19, 0x234C	; 0x80234c <udi_cdc_rx_pos+0x1>
    3ca4:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udi_cdc_rx_buf_sel>
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	fc 01       	movw	r30, r24
    3cac:	ee 0f       	add	r30, r30
    3cae:	ff 1f       	adc	r31, r31
    3cb0:	e2 5b       	subi	r30, 0xB2	; 178
    3cb2:	fc 4d       	sbci	r31, 0xDC	; 220
    3cb4:	60 81       	ld	r22, Z
    3cb6:	71 81       	ldd	r23, Z+1	; 0x01
    3cb8:	af bf       	out	0x3f, r26	; 63
    3cba:	26 17       	cp	r18, r22
    3cbc:	37 07       	cpc	r19, r23
    3cbe:	30 f0       	brcs	.+12     	; 0x3ccc <udi_cdc_multi_getc+0x58>
    3cc0:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <udi_cdc_data_running>
    3cc4:	81 11       	cpse	r24, r1
    3cc6:	e6 cf       	rjmp	.-52     	; 0x3c94 <udi_cdc_multi_getc+0x20>
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	21 c0       	rjmp	.+66     	; 0x3d0e <udi_cdc_multi_getc+0x9a>
    3ccc:	fc 01       	movw	r30, r24
    3cce:	00 24       	eor	r0, r0
    3cd0:	f6 95       	lsr	r31
    3cd2:	e7 95       	ror	r30
    3cd4:	07 94       	ror	r0
    3cd6:	f6 95       	lsr	r31
    3cd8:	e7 95       	ror	r30
    3cda:	07 94       	ror	r0
    3cdc:	fe 2f       	mov	r31, r30
    3cde:	e0 2d       	mov	r30, r0
    3ce0:	ee 5a       	subi	r30, 0xAE	; 174
    3ce2:	fc 4d       	sbci	r31, 0xDC	; 220
    3ce4:	e2 0f       	add	r30, r18
    3ce6:	f3 1f       	adc	r31, r19
    3ce8:	80 81       	ld	r24, Z
    3cea:	7a 01       	movw	r14, r20
    3cec:	e8 2a       	or	r14, r24
    3cee:	2f 5f       	subi	r18, 0xFF	; 255
    3cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf2:	20 93 4b 23 	sts	0x234B, r18	; 0x80234b <udi_cdc_rx_pos>
    3cf6:	30 93 4c 23 	sts	0x234C, r19	; 0x80234c <udi_cdc_rx_pos+0x1>
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	08 df       	rcall	.-496    	; 0x3b0e <udi_cdc_rx_start>
    3cfe:	11 23       	and	r17, r17
    3d00:	21 f0       	breq	.+8      	; 0x3d0a <udi_cdc_multi_getc+0x96>
    3d02:	5e 2d       	mov	r21, r14
    3d04:	44 27       	eor	r20, r20
    3d06:	10 e0       	ldi	r17, 0x00	; 0
    3d08:	c5 cf       	rjmp	.-118    	; 0x3c94 <udi_cdc_multi_getc+0x20>
    3d0a:	8e 2d       	mov	r24, r14
    3d0c:	9f 2d       	mov	r25, r15
    3d0e:	0f 90       	pop	r0
    3d10:	df 91       	pop	r29
    3d12:	cf 91       	pop	r28
    3d14:	1f 91       	pop	r17
    3d16:	ff 90       	pop	r15
    3d18:	ef 90       	pop	r14
    3d1a:	08 95       	ret

00003d1c <udi_cdc_getc>:
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	aa cf       	rjmp	.-172    	; 0x3c74 <udi_cdc_multi_getc>
    3d20:	08 95       	ret

00003d22 <udi_cdc_multi_get_free_tx_buffer>:
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	1f 92       	push	r1
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62
    3d2c:	8f b7       	in	r24, 0x3f	; 63
    3d2e:	89 83       	std	Y+1, r24	; 0x01
    3d30:	f8 94       	cli
    3d32:	99 81       	ldd	r25, Y+1	; 0x01
    3d34:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <udi_cdc_tx_buf_sel>
    3d38:	e8 2f       	mov	r30, r24
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	ee 0f       	add	r30, r30
    3d3e:	ff 1f       	adc	r31, r31
    3d40:	eb 53       	subi	r30, 0x3B	; 59
    3d42:	fd 4d       	sbci	r31, 0xDD	; 221
    3d44:	20 81       	ld	r18, Z
    3d46:	31 81       	ldd	r19, Z+1	; 0x01
    3d48:	20 34       	cpi	r18, 0x40	; 64
    3d4a:	31 05       	cpc	r19, r1
    3d4c:	89 f4       	brne	.+34     	; 0x3d70 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3d4e:	40 91 c1 22 	lds	r20, 0x22C1	; 0x8022c1 <udi_cdc_tx_trans_ongoing>
    3d52:	41 11       	cpse	r20, r1
    3d54:	0d c0       	rjmp	.+26     	; 0x3d70 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3d56:	40 91 c0 22 	lds	r20, 0x22C0	; 0x8022c0 <udi_cdc_tx_both_buf_to_send>
    3d5a:	41 11       	cpse	r20, r1
    3d5c:	09 c0       	rjmp	.+18     	; 0x3d70 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    3d5e:	21 e0       	ldi	r18, 0x01	; 1
    3d60:	20 93 c0 22 	sts	0x22C0, r18	; 0x8022c0 <udi_cdc_tx_both_buf_to_send>
    3d64:	81 11       	cpse	r24, r1
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	20 93 c4 22 	sts	0x22C4, r18	; 0x8022c4 <udi_cdc_tx_buf_sel>
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	9f bf       	out	0x3f, r25	; 63
    3d72:	80 e4       	ldi	r24, 0x40	; 64
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	82 1b       	sub	r24, r18
    3d78:	93 0b       	sbc	r25, r19
    3d7a:	0f 90       	pop	r0
    3d7c:	df 91       	pop	r29
    3d7e:	cf 91       	pop	r28
    3d80:	08 95       	ret

00003d82 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    3d82:	cf df       	rcall	.-98     	; 0x3d22 <udi_cdc_multi_get_free_tx_buffer>
    3d84:	21 e0       	ldi	r18, 0x01	; 1
    3d86:	89 2b       	or	r24, r25
    3d88:	09 f4       	brne	.+2      	; 0x3d8c <udi_cdc_multi_is_tx_ready+0xa>
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	82 2f       	mov	r24, r18
    3d8e:	08 95       	ret

00003d90 <udi_cdc_multi_putc>:
    3d90:	ff 92       	push	r15
    3d92:	0f 93       	push	r16
    3d94:	1f 93       	push	r17
    3d96:	cf 93       	push	r28
    3d98:	df 93       	push	r29
    3d9a:	1f 92       	push	r1
    3d9c:	cd b7       	in	r28, 0x3d	; 61
    3d9e:	de b7       	in	r29, 0x3e	; 62
    3da0:	f6 2e       	mov	r15, r22
    3da2:	17 2f       	mov	r17, r23
    3da4:	01 e0       	ldi	r16, 0x01	; 1
    3da6:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <udi_cdc_line_coding+0x6>
    3daa:	89 30       	cpi	r24, 0x09	; 9
    3dac:	09 f0       	breq	.+2      	; 0x3db0 <udi_cdc_multi_putc+0x20>
    3dae:	00 e0       	ldi	r16, 0x00	; 0
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	e7 df       	rcall	.-50     	; 0x3d82 <udi_cdc_multi_is_tx_ready>
    3db4:	81 11       	cpse	r24, r1
    3db6:	07 c0       	rjmp	.+14     	; 0x3dc6 <udi_cdc_multi_putc+0x36>
    3db8:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <udi_cdc_data_running>
    3dbc:	81 11       	cpse	r24, r1
    3dbe:	f8 cf       	rjmp	.-16     	; 0x3db0 <udi_cdc_multi_putc+0x20>
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	2c c0       	rjmp	.+88     	; 0x3e1e <udi_cdc_multi_putc+0x8e>
    3dc6:	8f b7       	in	r24, 0x3f	; 63
    3dc8:	89 83       	std	Y+1, r24	; 0x01
    3dca:	f8 94       	cli
    3dcc:	49 81       	ldd	r20, Y+1	; 0x01
    3dce:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <udi_cdc_tx_buf_sel>
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	fc 01       	movw	r30, r24
    3dd6:	ee 0f       	add	r30, r30
    3dd8:	ff 1f       	adc	r31, r31
    3dda:	eb 53       	subi	r30, 0x3B	; 59
    3ddc:	fd 4d       	sbci	r31, 0xDD	; 221
    3dde:	20 81       	ld	r18, Z
    3de0:	31 81       	ldd	r19, Z+1	; 0x01
    3de2:	b9 01       	movw	r22, r18
    3de4:	6f 5f       	subi	r22, 0xFF	; 255
    3de6:	7f 4f       	sbci	r23, 0xFF	; 255
    3de8:	60 83       	st	Z, r22
    3dea:	71 83       	std	Z+1, r23	; 0x01
    3dec:	00 24       	eor	r0, r0
    3dee:	96 95       	lsr	r25
    3df0:	87 95       	ror	r24
    3df2:	07 94       	ror	r0
    3df4:	96 95       	lsr	r25
    3df6:	87 95       	ror	r24
    3df8:	07 94       	ror	r0
    3dfa:	98 2f       	mov	r25, r24
    3dfc:	80 2d       	mov	r24, r0
    3dfe:	86 53       	subi	r24, 0x36	; 54
    3e00:	9d 4d       	sbci	r25, 0xDD	; 221
    3e02:	fc 01       	movw	r30, r24
    3e04:	e2 0f       	add	r30, r18
    3e06:	f3 1f       	adc	r31, r19
    3e08:	f0 82       	st	Z, r15
    3e0a:	4f bf       	out	0x3f, r20	; 63
    3e0c:	00 23       	and	r16, r16
    3e0e:	29 f0       	breq	.+10     	; 0x3e1a <udi_cdc_multi_putc+0x8a>
    3e10:	f1 2e       	mov	r15, r17
    3e12:	11 0f       	add	r17, r17
    3e14:	11 0b       	sbc	r17, r17
    3e16:	00 e0       	ldi	r16, 0x00	; 0
    3e18:	cb cf       	rjmp	.-106    	; 0x3db0 <udi_cdc_multi_putc+0x20>
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	0f 90       	pop	r0
    3e20:	df 91       	pop	r29
    3e22:	cf 91       	pop	r28
    3e24:	1f 91       	pop	r17
    3e26:	0f 91       	pop	r16
    3e28:	ff 90       	pop	r15
    3e2a:	08 95       	ret

00003e2c <udi_cdc_putc>:
    3e2c:	bc 01       	movw	r22, r24
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	af cf       	rjmp	.-162    	; 0x3d90 <udi_cdc_multi_putc>
    3e32:	08 95       	ret

00003e34 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    3e34:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udc_ptr_conf>
    3e38:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    3e3c:	01 90       	ld	r0, Z+
    3e3e:	f0 81       	ld	r31, Z
    3e40:	e0 2d       	mov	r30, r0
    3e42:	22 81       	ldd	r18, Z+2	; 0x02
    3e44:	33 81       	ldd	r19, Z+3	; 0x03
    3e46:	2e 0f       	add	r18, r30
    3e48:	3f 1f       	adc	r19, r31
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	40 81       	ld	r20, Z
    3e4e:	e4 0f       	add	r30, r20
    3e50:	f1 1d       	adc	r31, r1
    3e52:	e2 17       	cp	r30, r18
    3e54:	f3 07       	cpc	r31, r19
    3e56:	a0 f4       	brcc	.+40     	; 0x3e80 <udc_next_desc_in_iface+0x4c>
    3e58:	81 81       	ldd	r24, Z+1	; 0x01
    3e5a:	84 30       	cpi	r24, 0x04	; 4
    3e5c:	a1 f0       	breq	.+40     	; 0x3e86 <udc_next_desc_in_iface+0x52>
    3e5e:	86 13       	cpse	r24, r22
    3e60:	06 c0       	rjmp	.+12     	; 0x3e6e <udc_next_desc_in_iface+0x3a>
    3e62:	14 c0       	rjmp	.+40     	; 0x3e8c <udc_next_desc_in_iface+0x58>
    3e64:	81 81       	ldd	r24, Z+1	; 0x01
    3e66:	84 30       	cpi	r24, 0x04	; 4
    3e68:	a1 f0       	breq	.+40     	; 0x3e92 <udc_next_desc_in_iface+0x5e>
    3e6a:	86 17       	cp	r24, r22
    3e6c:	a9 f0       	breq	.+42     	; 0x3e98 <udc_next_desc_in_iface+0x64>
    3e6e:	80 81       	ld	r24, Z
    3e70:	e8 0f       	add	r30, r24
    3e72:	f1 1d       	adc	r31, r1
    3e74:	e2 17       	cp	r30, r18
    3e76:	f3 07       	cpc	r31, r19
    3e78:	a8 f3       	brcs	.-22     	; 0x3e64 <udc_next_desc_in_iface+0x30>
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	08 95       	ret
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	08 95       	ret
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	08 95       	ret
    3e8c:	8e 2f       	mov	r24, r30
    3e8e:	9f 2f       	mov	r25, r31
    3e90:	08 95       	ret
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	08 95       	ret
    3e98:	8e 2f       	mov	r24, r30
    3e9a:	9f 2f       	mov	r25, r31
    3e9c:	08 95       	ret

00003e9e <udc_valid_address>:
    3e9e:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    3ea2:	8f 77       	andi	r24, 0x7F	; 127
    3ea4:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <udd_set_address>
    3ea8:	08 95       	ret

00003eaa <udc_update_iface_desc>:
    3eaa:	90 91 f0 23 	lds	r25, 0x23F0	; 0x8023f0 <udc_num_configuration>
    3eae:	99 23       	and	r25, r25
    3eb0:	81 f1       	breq	.+96     	; 0x3f12 <udc_update_iface_desc+0x68>
    3eb2:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udc_ptr_conf>
    3eb6:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    3eba:	01 90       	ld	r0, Z+
    3ebc:	f0 81       	ld	r31, Z
    3ebe:	e0 2d       	mov	r30, r0
    3ec0:	94 81       	ldd	r25, Z+4	; 0x04
    3ec2:	89 17       	cp	r24, r25
    3ec4:	40 f5       	brcc	.+80     	; 0x3f16 <udc_update_iface_desc+0x6c>
    3ec6:	e0 93 ec 23 	sts	0x23EC, r30	; 0x8023ec <udc_ptr_iface>
    3eca:	f0 93 ed 23 	sts	0x23ED, r31	; 0x8023ed <udc_ptr_iface+0x1>
    3ece:	22 81       	ldd	r18, Z+2	; 0x02
    3ed0:	33 81       	ldd	r19, Z+3	; 0x03
    3ed2:	2e 0f       	add	r18, r30
    3ed4:	3f 1f       	adc	r19, r31
    3ed6:	e2 17       	cp	r30, r18
    3ed8:	f3 07       	cpc	r31, r19
    3eda:	f8 f4       	brcc	.+62     	; 0x3f1a <udc_update_iface_desc+0x70>
    3edc:	91 81       	ldd	r25, Z+1	; 0x01
    3ede:	94 30       	cpi	r25, 0x04	; 4
    3ee0:	61 f4       	brne	.+24     	; 0x3efa <udc_update_iface_desc+0x50>
    3ee2:	92 81       	ldd	r25, Z+2	; 0x02
    3ee4:	89 13       	cpse	r24, r25
    3ee6:	09 c0       	rjmp	.+18     	; 0x3efa <udc_update_iface_desc+0x50>
    3ee8:	93 81       	ldd	r25, Z+3	; 0x03
    3eea:	96 13       	cpse	r25, r22
    3eec:	06 c0       	rjmp	.+12     	; 0x3efa <udc_update_iface_desc+0x50>
    3eee:	e0 93 ec 23 	sts	0x23EC, r30	; 0x8023ec <udc_ptr_iface>
    3ef2:	f0 93 ed 23 	sts	0x23ED, r31	; 0x8023ed <udc_ptr_iface+0x1>
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	08 95       	ret
    3efa:	90 81       	ld	r25, Z
    3efc:	e9 0f       	add	r30, r25
    3efe:	f1 1d       	adc	r31, r1
    3f00:	e2 17       	cp	r30, r18
    3f02:	f3 07       	cpc	r31, r19
    3f04:	58 f3       	brcs	.-42     	; 0x3edc <udc_update_iface_desc+0x32>
    3f06:	e0 93 ec 23 	sts	0x23EC, r30	; 0x8023ec <udc_ptr_iface>
    3f0a:	f0 93 ed 23 	sts	0x23ED, r31	; 0x8023ed <udc_ptr_iface+0x1>
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	08 95       	ret
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	08 95       	ret
    3f16:	80 e0       	ldi	r24, 0x00	; 0
    3f18:	08 95       	ret
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	08 95       	ret

00003f1e <udc_iface_disable>:
    3f1e:	ef 92       	push	r14
    3f20:	ff 92       	push	r15
    3f22:	1f 93       	push	r17
    3f24:	cf 93       	push	r28
    3f26:	df 93       	push	r29
    3f28:	c8 2f       	mov	r28, r24
    3f2a:	60 e0       	ldi	r22, 0x00	; 0
    3f2c:	be df       	rcall	.-132    	; 0x3eaa <udc_update_iface_desc>
    3f2e:	18 2f       	mov	r17, r24
    3f30:	88 23       	and	r24, r24
    3f32:	81 f1       	breq	.+96     	; 0x3f94 <udc_iface_disable+0x76>
    3f34:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    3f38:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    3f3c:	ec 2f       	mov	r30, r28
    3f3e:	f0 e0       	ldi	r31, 0x00	; 0
    3f40:	ee 0f       	add	r30, r30
    3f42:	ff 1f       	adc	r31, r31
    3f44:	12 96       	adiw	r26, 0x02	; 2
    3f46:	8d 91       	ld	r24, X+
    3f48:	9c 91       	ld	r25, X
    3f4a:	13 97       	sbiw	r26, 0x03	; 3
    3f4c:	e8 0f       	add	r30, r24
    3f4e:	f9 1f       	adc	r31, r25
    3f50:	e0 80       	ld	r14, Z
    3f52:	f1 80       	ldd	r15, Z+1	; 0x01
    3f54:	d7 01       	movw	r26, r14
    3f56:	16 96       	adiw	r26, 0x06	; 6
    3f58:	ed 91       	ld	r30, X+
    3f5a:	fc 91       	ld	r31, X
    3f5c:	17 97       	sbiw	r26, 0x07	; 7
    3f5e:	19 95       	eicall
    3f60:	68 2f       	mov	r22, r24
    3f62:	8c 2f       	mov	r24, r28
    3f64:	a2 df       	rcall	.-188    	; 0x3eaa <udc_update_iface_desc>
    3f66:	18 2f       	mov	r17, r24
    3f68:	88 23       	and	r24, r24
    3f6a:	a1 f0       	breq	.+40     	; 0x3f94 <udc_iface_disable+0x76>
    3f6c:	c0 91 ec 23 	lds	r28, 0x23EC	; 0x8023ec <udc_ptr_iface>
    3f70:	d0 91 ed 23 	lds	r29, 0x23ED	; 0x8023ed <udc_ptr_iface+0x1>
    3f74:	65 e0       	ldi	r22, 0x05	; 5
    3f76:	ce 01       	movw	r24, r28
    3f78:	5d df       	rcall	.-326    	; 0x3e34 <udc_next_desc_in_iface>
    3f7a:	ec 01       	movw	r28, r24
    3f7c:	89 2b       	or	r24, r25
    3f7e:	21 f0       	breq	.+8      	; 0x3f88 <udc_iface_disable+0x6a>
    3f80:	8a 81       	ldd	r24, Y+2	; 0x02
    3f82:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <udd_ep_free>
    3f86:	f6 cf       	rjmp	.-20     	; 0x3f74 <udc_iface_disable+0x56>
    3f88:	d7 01       	movw	r26, r14
    3f8a:	12 96       	adiw	r26, 0x02	; 2
    3f8c:	ed 91       	ld	r30, X+
    3f8e:	fc 91       	ld	r31, X
    3f90:	13 97       	sbiw	r26, 0x03	; 3
    3f92:	19 95       	eicall
    3f94:	81 2f       	mov	r24, r17
    3f96:	df 91       	pop	r29
    3f98:	cf 91       	pop	r28
    3f9a:	1f 91       	pop	r17
    3f9c:	ff 90       	pop	r15
    3f9e:	ef 90       	pop	r14
    3fa0:	08 95       	ret

00003fa2 <udc_iface_enable>:
    3fa2:	1f 93       	push	r17
    3fa4:	cf 93       	push	r28
    3fa6:	df 93       	push	r29
    3fa8:	18 2f       	mov	r17, r24
    3faa:	7f df       	rcall	.-258    	; 0x3eaa <udc_update_iface_desc>
    3fac:	88 23       	and	r24, r24
    3fae:	41 f1       	breq	.+80     	; 0x4000 <udc_iface_enable+0x5e>
    3fb0:	c0 91 ec 23 	lds	r28, 0x23EC	; 0x8023ec <udc_ptr_iface>
    3fb4:	d0 91 ed 23 	lds	r29, 0x23ED	; 0x8023ed <udc_ptr_iface+0x1>
    3fb8:	65 e0       	ldi	r22, 0x05	; 5
    3fba:	ce 01       	movw	r24, r28
    3fbc:	3b df       	rcall	.-394    	; 0x3e34 <udc_next_desc_in_iface>
    3fbe:	ec 01       	movw	r28, r24
    3fc0:	89 2b       	or	r24, r25
    3fc2:	49 f0       	breq	.+18     	; 0x3fd6 <udc_iface_enable+0x34>
    3fc4:	4c 81       	ldd	r20, Y+4	; 0x04
    3fc6:	5d 81       	ldd	r21, Y+5	; 0x05
    3fc8:	6b 81       	ldd	r22, Y+3	; 0x03
    3fca:	8a 81       	ldd	r24, Y+2	; 0x02
    3fcc:	0e 94 ee 12 	call	0x25dc	; 0x25dc <udd_ep_alloc>
    3fd0:	81 11       	cpse	r24, r1
    3fd2:	f2 cf       	rjmp	.-28     	; 0x3fb8 <udc_iface_enable+0x16>
    3fd4:	15 c0       	rjmp	.+42     	; 0x4000 <udc_iface_enable+0x5e>
    3fd6:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    3fda:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    3fde:	e1 2f       	mov	r30, r17
    3fe0:	f0 e0       	ldi	r31, 0x00	; 0
    3fe2:	ee 0f       	add	r30, r30
    3fe4:	ff 1f       	adc	r31, r31
    3fe6:	12 96       	adiw	r26, 0x02	; 2
    3fe8:	8d 91       	ld	r24, X+
    3fea:	9c 91       	ld	r25, X
    3fec:	13 97       	sbiw	r26, 0x03	; 3
    3fee:	e8 0f       	add	r30, r24
    3ff0:	f9 1f       	adc	r31, r25
    3ff2:	01 90       	ld	r0, Z+
    3ff4:	f0 81       	ld	r31, Z
    3ff6:	e0 2d       	mov	r30, r0
    3ff8:	01 90       	ld	r0, Z+
    3ffa:	f0 81       	ld	r31, Z
    3ffc:	e0 2d       	mov	r30, r0
    3ffe:	19 95       	eicall
    4000:	df 91       	pop	r29
    4002:	cf 91       	pop	r28
    4004:	1f 91       	pop	r17
    4006:	08 95       	ret

00004008 <udc_start>:
    4008:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <udd_enable>
    400c:	08 95       	ret

0000400e <udc_reset>:
    400e:	cf 93       	push	r28
    4010:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    4014:	88 23       	and	r24, r24
    4016:	c1 f0       	breq	.+48     	; 0x4048 <udc_reset+0x3a>
    4018:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udc_ptr_conf>
    401c:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    4020:	01 90       	ld	r0, Z+
    4022:	f0 81       	ld	r31, Z
    4024:	e0 2d       	mov	r30, r0
    4026:	84 81       	ldd	r24, Z+4	; 0x04
    4028:	88 23       	and	r24, r24
    402a:	71 f0       	breq	.+28     	; 0x4048 <udc_reset+0x3a>
    402c:	c0 e0       	ldi	r28, 0x00	; 0
    402e:	8c 2f       	mov	r24, r28
    4030:	76 df       	rcall	.-276    	; 0x3f1e <udc_iface_disable>
    4032:	cf 5f       	subi	r28, 0xFF	; 255
    4034:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udc_ptr_conf>
    4038:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    403c:	01 90       	ld	r0, Z+
    403e:	f0 81       	ld	r31, Z
    4040:	e0 2d       	mov	r30, r0
    4042:	84 81       	ldd	r24, Z+4	; 0x04
    4044:	c8 17       	cp	r28, r24
    4046:	98 f3       	brcs	.-26     	; 0x402e <udc_reset+0x20>
    4048:	10 92 f0 23 	sts	0x23F0, r1	; 0x8023f0 <udc_num_configuration>
    404c:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udc_device_status>
    4050:	81 fd       	sbrc	r24, 1
    4052:	2e d8       	rcall	.-4004   	; 0x30b0 <usb_callback_remotewakeup_disable>
    4054:	10 92 f4 23 	sts	0x23F4, r1	; 0x8023f4 <udc_device_status>
    4058:	10 92 f5 23 	sts	0x23F5, r1	; 0x8023f5 <udc_device_status+0x1>
    405c:	cf 91       	pop	r28
    405e:	08 95       	ret

00004060 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    4060:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    4062:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    4066:	88 23       	and	r24, r24
    4068:	49 f1       	breq	.+82     	; 0x40bc <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    406a:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    406e:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    4072:	ed 91       	ld	r30, X+
    4074:	fc 91       	ld	r31, X
    4076:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4078:	84 81       	ldd	r24, Z+4	; 0x04
    407a:	88 23       	and	r24, r24
    407c:	f9 f0       	breq	.+62     	; 0x40bc <udc_sof_notify+0x5c>
    407e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    4080:	ec 2f       	mov	r30, r28
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	ee 0f       	add	r30, r30
    4086:	ff 1f       	adc	r31, r31
    4088:	12 96       	adiw	r26, 0x02	; 2
    408a:	8d 91       	ld	r24, X+
    408c:	9c 91       	ld	r25, X
    408e:	13 97       	sbiw	r26, 0x03	; 3
    4090:	e8 0f       	add	r30, r24
    4092:	f9 1f       	adc	r31, r25
    4094:	01 90       	ld	r0, Z+
    4096:	f0 81       	ld	r31, Z
    4098:	e0 2d       	mov	r30, r0
    409a:	00 84       	ldd	r0, Z+8	; 0x08
    409c:	f1 85       	ldd	r31, Z+9	; 0x09
    409e:	e0 2d       	mov	r30, r0
    40a0:	30 97       	sbiw	r30, 0x00	; 0
    40a2:	09 f0       	breq	.+2      	; 0x40a6 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    40a4:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    40a6:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    40a8:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    40ac:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    40b0:	ed 91       	ld	r30, X+
    40b2:	fc 91       	ld	r31, X
    40b4:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    40b6:	84 81       	ldd	r24, Z+4	; 0x04
    40b8:	c8 17       	cp	r28, r24
    40ba:	10 f3       	brcs	.-60     	; 0x4080 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    40bc:	cf 91       	pop	r28
    40be:	08 95       	ret

000040c0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    40c0:	0f 93       	push	r16
    40c2:	1f 93       	push	r17
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    40c8:	ed ef       	ldi	r30, 0xFD	; 253
    40ca:	f3 e2       	ldi	r31, 0x23	; 35
    40cc:	12 86       	std	Z+10, r1	; 0x0a
    40ce:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    40d0:	14 86       	std	Z+12, r1	; 0x0c
    40d2:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    40d4:	16 86       	std	Z+14, r1	; 0x0e
    40d6:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    40d8:	80 81       	ld	r24, Z
    40da:	88 23       	and	r24, r24
    40dc:	0c f0       	brlt	.+2      	; 0x40e0 <udc_process_setup+0x20>
    40de:	95 c2       	rjmp	.+1322   	; 0x460a <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    40e0:	20 91 03 24 	lds	r18, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    40e4:	30 91 04 24 	lds	r19, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    40e8:	21 15       	cp	r18, r1
    40ea:	31 05       	cpc	r19, r1
    40ec:	09 f0       	breq	.+2      	; 0x40f0 <udc_process_setup+0x30>
    40ee:	88 c2       	rjmp	.+1296   	; 0x4600 <udc_process_setup+0x540>
    40f0:	7f c2       	rjmp	.+1278   	; 0x45f0 <udc_process_setup+0x530>
    40f2:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    40f4:	09 f0       	breq	.+2      	; 0x40f8 <udc_process_setup+0x38>
    40f6:	ab c0       	rjmp	.+342    	; 0x424e <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    40f8:	90 91 fe 23 	lds	r25, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    40fc:	96 30       	cpi	r25, 0x06	; 6
    40fe:	81 f0       	breq	.+32     	; 0x4120 <udc_process_setup+0x60>
    4100:	98 30       	cpi	r25, 0x08	; 8
    4102:	09 f4       	brne	.+2      	; 0x4106 <udc_process_setup+0x46>
    4104:	99 c0       	rjmp	.+306    	; 0x4238 <udc_process_setup+0x178>
    4106:	91 11       	cpse	r25, r1
    4108:	a2 c0       	rjmp	.+324    	; 0x424e <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    410a:	22 30       	cpi	r18, 0x02	; 2
    410c:	31 05       	cpc	r19, r1
    410e:	09 f0       	breq	.+2      	; 0x4112 <udc_process_setup+0x52>
    4110:	2b c2       	rjmp	.+1110   	; 0x4568 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    4112:	62 e0       	ldi	r22, 0x02	; 2
    4114:	70 e0       	ldi	r23, 0x00	; 0
    4116:	84 ef       	ldi	r24, 0xF4	; 244
    4118:	93 e2       	ldi	r25, 0x23	; 35
    411a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <udd_set_setup_payload>
    411e:	7e c2       	rjmp	.+1276   	; 0x461c <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    4120:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    4124:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    4128:	29 2f       	mov	r18, r25
    412a:	33 27       	eor	r19, r19
    412c:	22 30       	cpi	r18, 0x02	; 2
    412e:	31 05       	cpc	r19, r1
    4130:	b1 f0       	breq	.+44     	; 0x415e <udc_process_setup+0x9e>
    4132:	20 f4       	brcc	.+8      	; 0x413c <udc_process_setup+0x7c>
    4134:	21 30       	cpi	r18, 0x01	; 1
    4136:	31 05       	cpc	r19, r1
    4138:	41 f0       	breq	.+16     	; 0x414a <udc_process_setup+0x8a>
    413a:	d8 c1       	rjmp	.+944    	; 0x44ec <udc_process_setup+0x42c>
    413c:	23 30       	cpi	r18, 0x03	; 3
    413e:	31 05       	cpc	r19, r1
    4140:	f1 f1       	breq	.+124    	; 0x41be <udc_process_setup+0xfe>
    4142:	2f 30       	cpi	r18, 0x0F	; 15
    4144:	31 05       	cpc	r19, r1
    4146:	61 f1       	breq	.+88     	; 0x41a0 <udc_process_setup+0xe0>
    4148:	d1 c1       	rjmp	.+930    	; 0x44ec <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    414a:	80 91 3d 20 	lds	r24, 0x203D	; 0x80203d <udc_config>
    414e:	90 91 3e 20 	lds	r25, 0x203E	; 0x80203e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    4152:	dc 01       	movw	r26, r24
    4154:	6c 91       	ld	r22, X
    4156:	70 e0       	ldi	r23, 0x00	; 0
    4158:	0e 94 e7 12 	call	0x25ce	; 0x25ce <udd_set_setup_payload>
    415c:	5e c0       	rjmp	.+188    	; 0x421a <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    415e:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    4162:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
    4166:	21 89       	ldd	r18, Z+17	; 0x11
    4168:	82 17       	cp	r24, r18
    416a:	08 f0       	brcs	.+2      	; 0x416e <udc_process_setup+0xae>
    416c:	fd c1       	rjmp	.+1018   	; 0x4568 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    416e:	99 27       	eor	r25, r25
    4170:	88 0f       	add	r24, r24
    4172:	99 1f       	adc	r25, r25
    4174:	88 0f       	add	r24, r24
    4176:	99 1f       	adc	r25, r25
    4178:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    417c:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    4180:	e8 0f       	add	r30, r24
    4182:	f9 1f       	adc	r31, r25
    4184:	80 81       	ld	r24, Z
    4186:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    4188:	fc 01       	movw	r30, r24
    418a:	62 81       	ldd	r22, Z+2	; 0x02
    418c:	73 81       	ldd	r23, Z+3	; 0x03
    418e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    4192:	e0 91 05 24 	lds	r30, 0x2405	; 0x802405 <udd_g_ctrlreq+0x8>
    4196:	f0 91 06 24 	lds	r31, 0x2406	; 0x802406 <udd_g_ctrlreq+0x9>
    419a:	82 e0       	ldi	r24, 0x02	; 2
    419c:	81 83       	std	Z+1, r24	; 0x01
    419e:	3d c0       	rjmp	.+122    	; 0x421a <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    41a0:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <udc_config+0x4>
    41a4:	90 91 42 20 	lds	r25, 0x2042	; 0x802042 <udc_config+0x5>
    41a8:	00 97       	sbiw	r24, 0x00	; 0
    41aa:	09 f4       	brne	.+2      	; 0x41ae <udc_process_setup+0xee>
    41ac:	dd c1       	rjmp	.+954    	; 0x4568 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    41ae:	dc 01       	movw	r26, r24
    41b0:	12 96       	adiw	r26, 0x02	; 2
    41b2:	6d 91       	ld	r22, X+
    41b4:	7c 91       	ld	r23, X
    41b6:	13 97       	sbiw	r26, 0x03	; 3
    41b8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <udd_set_setup_payload>
    41bc:	2e c0       	rjmp	.+92     	; 0x421a <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    41be:	99 27       	eor	r25, r25
    41c0:	81 30       	cpi	r24, 0x01	; 1
    41c2:	91 05       	cpc	r25, r1
    41c4:	99 f0       	breq	.+38     	; 0x41ec <udc_process_setup+0x12c>
    41c6:	58 f0       	brcs	.+22     	; 0x41de <udc_process_setup+0x11e>
    41c8:	82 30       	cpi	r24, 0x02	; 2
    41ca:	91 05       	cpc	r25, r1
    41cc:	09 f4       	brne	.+2      	; 0x41d0 <udc_process_setup+0x110>
    41ce:	22 c2       	rjmp	.+1092   	; 0x4614 <udc_process_setup+0x554>
    41d0:	03 97       	sbiw	r24, 0x03	; 3
    41d2:	09 f0       	breq	.+2      	; 0x41d6 <udc_process_setup+0x116>
    41d4:	94 c1       	rjmp	.+808    	; 0x44fe <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    41d6:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    41d8:	e6 e2       	ldi	r30, 0x26	; 38
    41da:	f1 e2       	ldi	r31, 0x21	; 33
    41dc:	0a c0       	rjmp	.+20     	; 0x41f2 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    41de:	64 e0       	ldi	r22, 0x04	; 4
    41e0:	70 e0       	ldi	r23, 0x00	; 0
    41e2:	82 ee       	ldi	r24, 0xE2	; 226
    41e4:	90 e2       	ldi	r25, 0x20	; 32
    41e6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <udd_set_setup_payload>
    41ea:	17 c0       	rjmp	.+46     	; 0x421a <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    41ec:	e1 ed       	ldi	r30, 0xD1	; 209
    41ee:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    41f0:	30 e1       	ldi	r19, 0x10	; 16
    41f2:	a4 ea       	ldi	r26, 0xA4	; 164
    41f4:	b0 e2       	ldi	r27, 0x20	; 32
    41f6:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    41f8:	81 91       	ld	r24, Z+
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	8d 93       	st	X+, r24
    41fe:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    4200:	2f 5f       	subi	r18, 0xFF	; 255
    4202:	23 17       	cp	r18, r19
    4204:	c8 f3       	brcs	.-14     	; 0x41f8 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    4206:	63 2f       	mov	r22, r19
    4208:	66 0f       	add	r22, r22
    420a:	6e 5f       	subi	r22, 0xFE	; 254
    420c:	60 93 a2 20 	sts	0x20A2, r22	; 0x8020a2 <udc_string_desc>
		udd_set_setup_payload(
    4210:	70 e0       	ldi	r23, 0x00	; 0
    4212:	82 ea       	ldi	r24, 0xA2	; 162
    4214:	90 e2       	ldi	r25, 0x20	; 32
    4216:	0e 94 e7 12 	call	0x25ce	; 0x25ce <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    421a:	ed ef       	ldi	r30, 0xFD	; 253
    421c:	f3 e2       	ldi	r31, 0x23	; 35
    421e:	86 81       	ldd	r24, Z+6	; 0x06
    4220:	97 81       	ldd	r25, Z+7	; 0x07
    4222:	22 85       	ldd	r18, Z+10	; 0x0a
    4224:	33 85       	ldd	r19, Z+11	; 0x0b
    4226:	82 17       	cp	r24, r18
    4228:	93 07       	cpc	r25, r19
    422a:	08 f0       	brcs	.+2      	; 0x422e <udc_process_setup+0x16e>
    422c:	f7 c1       	rjmp	.+1006   	; 0x461c <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    422e:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <udd_g_ctrlreq+0xa>
    4232:	90 93 08 24 	sts	0x2408, r25	; 0x802408 <udd_g_ctrlreq+0xb>
    4236:	f2 c1       	rjmp	.+996    	; 0x461c <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    4238:	21 30       	cpi	r18, 0x01	; 1
    423a:	31 05       	cpc	r19, r1
    423c:	09 f0       	breq	.+2      	; 0x4240 <udc_process_setup+0x180>
    423e:	94 c1       	rjmp	.+808    	; 0x4568 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    4240:	61 e0       	ldi	r22, 0x01	; 1
    4242:	70 e0       	ldi	r23, 0x00	; 0
    4244:	80 ef       	ldi	r24, 0xF0	; 240
    4246:	93 e2       	ldi	r25, 0x23	; 35
    4248:	0e 94 e7 12 	call	0x25ce	; 0x25ce <udd_set_setup_payload>
    424c:	e7 c1       	rjmp	.+974    	; 0x461c <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    424e:	81 30       	cpi	r24, 0x01	; 1
    4250:	e9 f5       	brne	.+122    	; 0x42cc <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4252:	90 91 fe 23 	lds	r25, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    4256:	9a 30       	cpi	r25, 0x0A	; 10
    4258:	c9 f5       	brne	.+114    	; 0x42cc <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    425a:	21 30       	cpi	r18, 0x01	; 1
    425c:	31 05       	cpc	r19, r1
    425e:	09 f0       	breq	.+2      	; 0x4262 <udc_process_setup+0x1a2>
    4260:	53 c1       	rjmp	.+678    	; 0x4508 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4262:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    4266:	88 23       	and	r24, r24
    4268:	09 f4       	brne	.+2      	; 0x426c <udc_process_setup+0x1ac>
    426a:	4e c1       	rjmp	.+668    	; 0x4508 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    426c:	c0 91 01 24 	lds	r28, 0x2401	; 0x802401 <udd_g_ctrlreq+0x4>
    4270:	d0 91 02 24 	lds	r29, 0x2402	; 0x802402 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4274:	00 91 ee 23 	lds	r16, 0x23EE	; 0x8023ee <udc_ptr_conf>
    4278:	10 91 ef 23 	lds	r17, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    427c:	d8 01       	movw	r26, r16
    427e:	ed 91       	ld	r30, X+
    4280:	fc 91       	ld	r31, X
    4282:	84 81       	ldd	r24, Z+4	; 0x04
    4284:	c8 17       	cp	r28, r24
    4286:	08 f0       	brcs	.+2      	; 0x428a <udc_process_setup+0x1ca>
    4288:	3f c1       	rjmp	.+638    	; 0x4508 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	8c 2f       	mov	r24, r28
    428e:	0d de       	rcall	.-998    	; 0x3eaa <udc_update_iface_desc>
    4290:	88 23       	and	r24, r24
    4292:	09 f4       	brne	.+2      	; 0x4296 <udc_process_setup+0x1d6>
    4294:	34 c1       	rjmp	.+616    	; 0x44fe <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4296:	ce 01       	movw	r24, r28
    4298:	99 27       	eor	r25, r25
    429a:	88 0f       	add	r24, r24
    429c:	99 1f       	adc	r25, r25
    429e:	d8 01       	movw	r26, r16
    42a0:	12 96       	adiw	r26, 0x02	; 2
    42a2:	ed 91       	ld	r30, X+
    42a4:	fc 91       	ld	r31, X
    42a6:	13 97       	sbiw	r26, 0x03	; 3
    42a8:	e8 0f       	add	r30, r24
    42aa:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    42ac:	01 90       	ld	r0, Z+
    42ae:	f0 81       	ld	r31, Z
    42b0:	e0 2d       	mov	r30, r0
    42b2:	86 81       	ldd	r24, Z+6	; 0x06
    42b4:	97 81       	ldd	r25, Z+7	; 0x07
    42b6:	fc 01       	movw	r30, r24
    42b8:	19 95       	eicall
    42ba:	80 93 f2 23 	sts	0x23F2, r24	; 0x8023f2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    42be:	61 e0       	ldi	r22, 0x01	; 1
    42c0:	70 e0       	ldi	r23, 0x00	; 0
    42c2:	82 ef       	ldi	r24, 0xF2	; 242
    42c4:	93 e2       	ldi	r25, 0x23	; 35
    42c6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <udd_set_setup_payload>
    42ca:	a8 c1       	rjmp	.+848    	; 0x461c <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    42cc:	82 30       	cpi	r24, 0x02	; 2
    42ce:	09 f0       	breq	.+2      	; 0x42d2 <udc_process_setup+0x212>
    42d0:	16 c1       	rjmp	.+556    	; 0x44fe <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    42d2:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    42d6:	81 11       	cpse	r24, r1
    42d8:	0b c1       	rjmp	.+534    	; 0x44f0 <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    42da:	22 30       	cpi	r18, 0x02	; 2
    42dc:	31 05       	cpc	r19, r1
    42de:	09 f0       	breq	.+2      	; 0x42e2 <udc_process_setup+0x222>
    42e0:	43 c1       	rjmp	.+646    	; 0x4568 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    42e2:	80 91 01 24 	lds	r24, 0x2401	; 0x802401 <udd_g_ctrlreq+0x4>
    42e6:	0e 94 76 13 	call	0x26ec	; 0x26ec <udd_ep_is_halted>
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	80 93 ea 23 	sts	0x23EA, r24	; 0x8023ea <udc_ep_status.4757>
    42f0:	90 93 eb 23 	sts	0x23EB, r25	; 0x8023eb <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    42f4:	62 e0       	ldi	r22, 0x02	; 2
    42f6:	70 e0       	ldi	r23, 0x00	; 0
    42f8:	8a ee       	ldi	r24, 0xEA	; 234
    42fa:	93 e2       	ldi	r25, 0x23	; 35
    42fc:	0e 94 e7 12 	call	0x25ce	; 0x25ce <udd_set_setup_payload>
    4300:	8d c1       	rjmp	.+794    	; 0x461c <udc_process_setup+0x55c>
    4302:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4304:	09 f0       	breq	.+2      	; 0x4308 <udc_process_setup+0x248>
    4306:	a0 c0       	rjmp	.+320    	; 0x4448 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4308:	90 91 fe 23 	lds	r25, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    430c:	93 30       	cpi	r25, 0x03	; 3
    430e:	91 f1       	breq	.+100    	; 0x4374 <udc_process_setup+0x2b4>
    4310:	18 f4       	brcc	.+6      	; 0x4318 <udc_process_setup+0x258>
    4312:	91 30       	cpi	r25, 0x01	; 1
    4314:	a9 f0       	breq	.+42     	; 0x4340 <udc_process_setup+0x280>
    4316:	98 c0       	rjmp	.+304    	; 0x4448 <udc_process_setup+0x388>
    4318:	95 30       	cpi	r25, 0x05	; 5
    431a:	21 f0       	breq	.+8      	; 0x4324 <udc_process_setup+0x264>
    431c:	99 30       	cpi	r25, 0x09	; 9
    431e:	09 f4       	brne	.+2      	; 0x4322 <udc_process_setup+0x262>
    4320:	43 c0       	rjmp	.+134    	; 0x43a8 <udc_process_setup+0x2e8>
    4322:	92 c0       	rjmp	.+292    	; 0x4448 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4324:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    4328:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    432c:	89 2b       	or	r24, r25
    432e:	09 f0       	breq	.+2      	; 0x4332 <udc_process_setup+0x272>
    4330:	1b c1       	rjmp	.+566    	; 0x4568 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    4332:	8f e4       	ldi	r24, 0x4F	; 79
    4334:	9f e1       	ldi	r25, 0x1F	; 31
    4336:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <udd_g_ctrlreq+0xc>
    433a:	90 93 0a 24 	sts	0x240A, r25	; 0x80240a <udd_g_ctrlreq+0xd>
    433e:	6e c1       	rjmp	.+732    	; 0x461c <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4340:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    4344:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    4348:	89 2b       	or	r24, r25
    434a:	09 f0       	breq	.+2      	; 0x434e <udc_process_setup+0x28e>
    434c:	0d c1       	rjmp	.+538    	; 0x4568 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    434e:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    4352:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    4356:	01 97       	sbiw	r24, 0x01	; 1
    4358:	09 f0       	breq	.+2      	; 0x435c <udc_process_setup+0x29c>
    435a:	06 c1       	rjmp	.+524    	; 0x4568 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    435c:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udc_device_status>
    4360:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udc_device_status+0x1>
    4364:	8d 7f       	andi	r24, 0xFD	; 253
    4366:	80 93 f4 23 	sts	0x23F4, r24	; 0x8023f4 <udc_device_status>
    436a:	90 93 f5 23 	sts	0x23F5, r25	; 0x8023f5 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    436e:	0e 94 58 18 	call	0x30b0	; 0x30b0 <usb_callback_remotewakeup_disable>
    4372:	54 c1       	rjmp	.+680    	; 0x461c <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4374:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    4378:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    437c:	89 2b       	or	r24, r25
    437e:	09 f0       	breq	.+2      	; 0x4382 <udc_process_setup+0x2c2>
    4380:	f3 c0       	rjmp	.+486    	; 0x4568 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    4382:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    4386:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    438a:	01 97       	sbiw	r24, 0x01	; 1
    438c:	09 f0       	breq	.+2      	; 0x4390 <udc_process_setup+0x2d0>
    438e:	b2 c0       	rjmp	.+356    	; 0x44f4 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    4390:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udc_device_status>
    4394:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udc_device_status+0x1>
    4398:	82 60       	ori	r24, 0x02	; 2
    439a:	80 93 f4 23 	sts	0x23F4, r24	; 0x8023f4 <udc_device_status>
    439e:	90 93 f5 23 	sts	0x23F5, r25	; 0x8023f5 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    43a2:	0e 94 57 18 	call	0x30ae	; 0x30ae <usb_callback_remotewakeup_enable>
    43a6:	3a c1       	rjmp	.+628    	; 0x461c <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    43a8:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    43ac:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    43b0:	89 2b       	or	r24, r25
    43b2:	09 f0       	breq	.+2      	; 0x43b6 <udc_process_setup+0x2f6>
    43b4:	d9 c0       	rjmp	.+434    	; 0x4568 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    43b6:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <udd_getaddress>
    43ba:	88 23       	and	r24, r24
    43bc:	09 f4       	brne	.+2      	; 0x43c0 <udc_process_setup+0x300>
    43be:	9f c0       	rjmp	.+318    	; 0x44fe <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    43c0:	20 91 ff 23 	lds	r18, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    43c4:	30 91 00 24 	lds	r19, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    43c8:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    43ca:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <udc_config>
    43ce:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    43d2:	81 89       	ldd	r24, Z+17	; 0x11
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	82 17       	cp	r24, r18
    43d8:	93 07       	cpc	r25, r19
    43da:	08 f4       	brcc	.+2      	; 0x43de <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    43dc:	90 c0       	rjmp	.+288    	; 0x44fe <udc_process_setup+0x43e>
    43de:	17 de       	rcall	.-978    	; 0x400e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    43e0:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    43e4:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    43e8:	80 93 f0 23 	sts	0x23F0, r24	; 0x8023f0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    43ec:	88 23       	and	r24, r24
    43ee:	09 f4       	brne	.+2      	; 0x43f2 <udc_process_setup+0x332>
    43f0:	15 c1       	rjmp	.+554    	; 0x461c <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    43f2:	99 27       	eor	r25, r25
    43f4:	81 50       	subi	r24, 0x01	; 1
    43f6:	90 4c       	sbci	r25, 0xC0	; 192
    43f8:	88 0f       	add	r24, r24
    43fa:	99 1f       	adc	r25, r25
    43fc:	88 0f       	add	r24, r24
    43fe:	99 1f       	adc	r25, r25
    4400:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <udc_config+0x2>
    4404:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <udc_config+0x3>
    4408:	e8 0f       	add	r30, r24
    440a:	f9 1f       	adc	r31, r25
    440c:	e0 93 ee 23 	sts	0x23EE, r30	; 0x8023ee <udc_ptr_conf>
    4410:	f0 93 ef 23 	sts	0x23EF, r31	; 0x8023ef <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4414:	01 90       	ld	r0, Z+
    4416:	f0 81       	ld	r31, Z
    4418:	e0 2d       	mov	r30, r0
    441a:	84 81       	ldd	r24, Z+4	; 0x04
    441c:	88 23       	and	r24, r24
    441e:	09 f4       	brne	.+2      	; 0x4422 <udc_process_setup+0x362>
    4420:	fd c0       	rjmp	.+506    	; 0x461c <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    4422:	c0 e0       	ldi	r28, 0x00	; 0
    4424:	60 e0       	ldi	r22, 0x00	; 0
    4426:	8c 2f       	mov	r24, r28
    4428:	bc dd       	rcall	.-1160   	; 0x3fa2 <udc_iface_enable>
    442a:	88 23       	and	r24, r24
    442c:	09 f4       	brne	.+2      	; 0x4430 <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    442e:	67 c0       	rjmp	.+206    	; 0x44fe <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4430:	cf 5f       	subi	r28, 0xFF	; 255
    4432:	e0 91 ee 23 	lds	r30, 0x23EE	; 0x8023ee <udc_ptr_conf>
    4436:	f0 91 ef 23 	lds	r31, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    443a:	01 90       	ld	r0, Z+
    443c:	f0 81       	ld	r31, Z
    443e:	e0 2d       	mov	r30, r0
    4440:	84 81       	ldd	r24, Z+4	; 0x04
    4442:	c8 17       	cp	r28, r24
    4444:	78 f3       	brcs	.-34     	; 0x4424 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4446:	ea c0       	rjmp	.+468    	; 0x461c <udc_process_setup+0x55c>
    4448:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    444a:	e9 f4       	brne	.+58     	; 0x4486 <udc_process_setup+0x3c6>
    444c:	90 91 fe 23 	lds	r25, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    4450:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    4452:	c9 f4       	brne	.+50     	; 0x4486 <udc_process_setup+0x3c6>
    4454:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    4458:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    445c:	89 2b       	or	r24, r25
    445e:	09 f0       	breq	.+2      	; 0x4462 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4460:	53 c0       	rjmp	.+166    	; 0x4508 <udc_process_setup+0x448>
    4462:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    4466:	88 23       	and	r24, r24
    4468:	09 f4       	brne	.+2      	; 0x446c <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    446a:	4e c0       	rjmp	.+156    	; 0x4508 <udc_process_setup+0x448>
    446c:	ed ef       	ldi	r30, 0xFD	; 253
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    446e:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    4470:	c4 81       	ldd	r28, Z+4	; 0x04
    4472:	d2 81       	ldd	r29, Z+2	; 0x02
    4474:	8c 2f       	mov	r24, r28
    4476:	53 dd       	rcall	.-1370   	; 0x3f1e <udc_iface_disable>
    4478:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    447a:	09 f4       	brne	.+2      	; 0x447e <udc_process_setup+0x3be>
    447c:	40 c0       	rjmp	.+128    	; 0x44fe <udc_process_setup+0x43e>
    447e:	6d 2f       	mov	r22, r29
    4480:	8c 2f       	mov	r24, r28
    4482:	8f dd       	rcall	.-1250   	; 0x3fa2 <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4484:	3a c0       	rjmp	.+116    	; 0x44fa <udc_process_setup+0x43a>
    4486:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4488:	d1 f5       	brne	.+116    	; 0x44fe <udc_process_setup+0x43e>
    448a:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x1>
    448e:	81 30       	cpi	r24, 0x01	; 1
    4490:	19 f0       	breq	.+6      	; 0x4498 <udc_process_setup+0x3d8>
    4492:	83 30       	cpi	r24, 0x03	; 3
    4494:	a1 f0       	breq	.+40     	; 0x44be <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4496:	30 c0       	rjmp	.+96     	; 0x44f8 <udc_process_setup+0x438>
    4498:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    449c:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    44a0:	89 2b       	or	r24, r25
    44a2:	09 f0       	breq	.+2      	; 0x44a6 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    44a4:	61 c0       	rjmp	.+194    	; 0x4568 <udc_process_setup+0x4a8>
    44a6:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    44aa:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    44ae:	89 2b       	or	r24, r25
    44b0:	09 f0       	breq	.+2      	; 0x44b4 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    44b2:	5a c0       	rjmp	.+180    	; 0x4568 <udc_process_setup+0x4a8>
    44b4:	80 91 01 24 	lds	r24, 0x2401	; 0x802401 <udd_g_ctrlreq+0x4>
    44b8:	0e 94 91 13 	call	0x2722	; 0x2722 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    44bc:	1e c0       	rjmp	.+60     	; 0x44fa <udc_process_setup+0x43a>
    44be:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0x6>
    44c2:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0x7>
    44c6:	89 2b       	or	r24, r25
    44c8:	09 f0       	breq	.+2      	; 0x44cc <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    44ca:	4e c0       	rjmp	.+156    	; 0x4568 <udc_process_setup+0x4a8>
    44cc:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x2>
    44d0:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x3>
    44d4:	89 2b       	or	r24, r25
    44d6:	09 f0       	breq	.+2      	; 0x44da <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    44d8:	47 c0       	rjmp	.+142    	; 0x4568 <udc_process_setup+0x4a8>
    44da:	cd ef       	ldi	r28, 0xFD	; 253
    44dc:	d3 e2       	ldi	r29, 0x23	; 35
    44de:	8c 81       	ldd	r24, Y+4	; 0x04
    44e0:	0e 94 93 14 	call	0x2926	; 0x2926 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    44e4:	8c 81       	ldd	r24, Y+4	; 0x04
    44e6:	0e 94 fe 14 	call	0x29fc	; 0x29fc <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    44ea:	07 c0       	rjmp	.+14     	; 0x44fa <udc_process_setup+0x43a>
    44ec:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    44ee:	05 c0       	rjmp	.+10     	; 0x44fa <udc_process_setup+0x43a>
    44f0:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    44f2:	03 c0       	rjmp	.+6      	; 0x44fa <udc_process_setup+0x43a>
    44f4:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    44f6:	01 c0       	rjmp	.+2      	; 0x44fa <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    44fc:	90 c0       	rjmp	.+288    	; 0x461e <udc_process_setup+0x55e>
    44fe:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <udd_g_ctrlreq>
    4502:	8f 71       	andi	r24, 0x1F	; 31
    4504:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4506:	81 f5       	brne	.+96     	; 0x4568 <udc_process_setup+0x4a8>
    4508:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    450c:	88 23       	and	r24, r24
    450e:	09 f4       	brne	.+2      	; 0x4512 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4510:	71 c0       	rjmp	.+226    	; 0x45f4 <udc_process_setup+0x534>
    4512:	00 91 01 24 	lds	r16, 0x2401	; 0x802401 <udd_g_ctrlreq+0x4>
    4516:	10 91 02 24 	lds	r17, 0x2402	; 0x802402 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    451a:	c0 91 ee 23 	lds	r28, 0x23EE	; 0x8023ee <udc_ptr_conf>
    451e:	d0 91 ef 23 	lds	r29, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    4522:	e8 81       	ld	r30, Y
    4524:	f9 81       	ldd	r31, Y+1	; 0x01
    4526:	84 81       	ldd	r24, Z+4	; 0x04
    4528:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    452a:	08 f0       	brcs	.+2      	; 0x452e <udc_process_setup+0x46e>
    452c:	65 c0       	rjmp	.+202    	; 0x45f8 <udc_process_setup+0x538>
    452e:	60 e0       	ldi	r22, 0x00	; 0
    4530:	80 2f       	mov	r24, r16
    4532:	bb dc       	rcall	.-1674   	; 0x3eaa <udc_update_iface_desc>
    4534:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4536:	c1 f0       	breq	.+48     	; 0x4568 <udc_process_setup+0x4a8>
    4538:	f8 01       	movw	r30, r16
    453a:	ff 27       	eor	r31, r31
    453c:	cf 01       	movw	r24, r30
    453e:	88 0f       	add	r24, r24
    4540:	99 1f       	adc	r25, r25
    4542:	ea 81       	ldd	r30, Y+2	; 0x02
    4544:	fb 81       	ldd	r31, Y+3	; 0x03
    4546:	e8 0f       	add	r30, r24
    4548:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    454a:	c0 81       	ld	r28, Z
    454c:	d1 81       	ldd	r29, Z+1	; 0x01
    454e:	ee 81       	ldd	r30, Y+6	; 0x06
    4550:	ff 81       	ldd	r31, Y+7	; 0x07
    4552:	19 95       	eicall
    4554:	68 2f       	mov	r22, r24
    4556:	80 2f       	mov	r24, r16
    4558:	a8 dc       	rcall	.-1712   	; 0x3eaa <udc_update_iface_desc>
    455a:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    455c:	29 f0       	breq	.+10     	; 0x4568 <udc_process_setup+0x4a8>
    455e:	ec 81       	ldd	r30, Y+4	; 0x04
    4560:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    4562:	19 95       	eicall
    4564:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    4566:	5b c0       	rjmp	.+182    	; 0x461e <udc_process_setup+0x55e>
    4568:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <udd_g_ctrlreq>
    456c:	8f 71       	andi	r24, 0x1F	; 31
    456e:	82 30       	cpi	r24, 0x02	; 2
    4570:	09 f0       	breq	.+2      	; 0x4574 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4572:	44 c0       	rjmp	.+136    	; 0x45fc <udc_process_setup+0x53c>
    4574:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udc_num_configuration>
    4578:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    457a:	b1 f1       	breq	.+108    	; 0x45e8 <udc_process_setup+0x528>
    457c:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    4580:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    4584:	ed 91       	ld	r30, X+
    4586:	fc 91       	ld	r31, X
    4588:	11 97       	sbiw	r26, 0x01	; 1
    458a:	84 81       	ldd	r24, Z+4	; 0x04
    458c:	88 23       	and	r24, r24
    458e:	71 f1       	breq	.+92     	; 0x45ec <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    4590:	c0 e0       	ldi	r28, 0x00	; 0
    4592:	ec 2f       	mov	r30, r28
    4594:	f0 e0       	ldi	r31, 0x00	; 0
    4596:	ee 0f       	add	r30, r30
    4598:	ff 1f       	adc	r31, r31
    459a:	12 96       	adiw	r26, 0x02	; 2
    459c:	8d 91       	ld	r24, X+
    459e:	9c 91       	ld	r25, X
    45a0:	13 97       	sbiw	r26, 0x03	; 3
    45a2:	e8 0f       	add	r30, r24
    45a4:	f9 1f       	adc	r31, r25
    45a6:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    45a8:	11 81       	ldd	r17, Z+1	; 0x01
    45aa:	d8 01       	movw	r26, r16
    45ac:	16 96       	adiw	r26, 0x06	; 6
    45ae:	ed 91       	ld	r30, X+
    45b0:	fc 91       	ld	r31, X
    45b2:	17 97       	sbiw	r26, 0x07	; 7
    45b4:	19 95       	eicall
    45b6:	68 2f       	mov	r22, r24
    45b8:	8c 2f       	mov	r24, r28
    45ba:	77 dc       	rcall	.-1810   	; 0x3eaa <udc_update_iface_desc>
    45bc:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    45be:	79 f1       	breq	.+94     	; 0x461e <udc_process_setup+0x55e>
    45c0:	d8 01       	movw	r26, r16
    45c2:	14 96       	adiw	r26, 0x04	; 4
    45c4:	ed 91       	ld	r30, X+
    45c6:	fc 91       	ld	r31, X
    45c8:	15 97       	sbiw	r26, 0x05	; 5
    45ca:	19 95       	eicall
    45cc:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    45ce:	27 c0       	rjmp	.+78     	; 0x461e <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    45d0:	cf 5f       	subi	r28, 0xFF	; 255
    45d2:	a0 91 ee 23 	lds	r26, 0x23EE	; 0x8023ee <udc_ptr_conf>
    45d6:	b0 91 ef 23 	lds	r27, 0x23EF	; 0x8023ef <udc_ptr_conf+0x1>
    45da:	ed 91       	ld	r30, X+
    45dc:	fc 91       	ld	r31, X
    45de:	11 97       	sbiw	r26, 0x01	; 1
    45e0:	94 81       	ldd	r25, Z+4	; 0x04
    45e2:	c9 17       	cp	r28, r25
    45e4:	b0 f2       	brcs	.-84     	; 0x4592 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    45e6:	1b c0       	rjmp	.+54     	; 0x461e <udc_process_setup+0x55e>
    45e8:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    45ea:	19 c0       	rjmp	.+50     	; 0x461e <udc_process_setup+0x55e>
    45ec:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    45ee:	17 c0       	rjmp	.+46     	; 0x461e <udc_process_setup+0x55e>
    45f0:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    45f2:	15 c0       	rjmp	.+42     	; 0x461e <udc_process_setup+0x55e>
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	13 c0       	rjmp	.+38     	; 0x461e <udc_process_setup+0x55e>
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	11 c0       	rjmp	.+34     	; 0x461e <udc_process_setup+0x55e>
    45fc:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    45fe:	0f c0       	rjmp	.+30     	; 0x461e <udc_process_setup+0x55e>
    4600:	98 2f       	mov	r25, r24
    4602:	90 76       	andi	r25, 0x60	; 96
    4604:	09 f0       	breq	.+2      	; 0x4608 <udc_process_setup+0x548>
    4606:	7b cf       	rjmp	.-266    	; 0x44fe <udc_process_setup+0x43e>
    4608:	74 cd       	rjmp	.-1304   	; 0x40f2 <udc_process_setup+0x32>
    460a:	98 2f       	mov	r25, r24
    460c:	90 76       	andi	r25, 0x60	; 96
    460e:	09 f0       	breq	.+2      	; 0x4612 <udc_process_setup+0x552>
    4610:	76 cf       	rjmp	.-276    	; 0x44fe <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    4612:	77 ce       	rjmp	.-786    	; 0x4302 <udc_process_setup+0x242>
		str = udc_string_product_name;
    4614:	3c e0       	ldi	r19, 0x0C	; 12
    4616:	e4 ec       	ldi	r30, 0xC4	; 196
    4618:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    461a:	eb cd       	rjmp	.-1066   	; 0x41f2 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    461c:	81 e0       	ldi	r24, 0x01	; 1
    461e:	df 91       	pop	r29
    4620:	cf 91       	pop	r28
    4622:	1f 91       	pop	r17
    4624:	0f 91       	pop	r16
    4626:	08 95       	ret

00004628 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    4628:	cf 93       	push	r28
    462a:	df 93       	push	r29
    462c:	1f 92       	push	r1
    462e:	cd b7       	in	r28, 0x3d	; 61
    4630:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    4632:	80 91 17 24 	lds	r24, 0x2417	; 0x802417 <stdio_base>
    4636:	90 91 18 24 	lds	r25, 0x2418	; 0x802418 <stdio_base+0x1>
    463a:	e0 91 13 24 	lds	r30, 0x2413	; 0x802413 <ptr_get>
    463e:	f0 91 14 24 	lds	r31, 0x2414	; 0x802414 <ptr_get+0x1>
    4642:	be 01       	movw	r22, r28
    4644:	6f 5f       	subi	r22, 0xFF	; 255
    4646:	7f 4f       	sbci	r23, 0xFF	; 255
    4648:	19 95       	eicall
	return c;
    464a:	89 81       	ldd	r24, Y+1	; 0x01
}
    464c:	08 2e       	mov	r0, r24
    464e:	00 0c       	add	r0, r0
    4650:	99 0b       	sbc	r25, r25
    4652:	0f 90       	pop	r0
    4654:	df 91       	pop	r29
    4656:	cf 91       	pop	r28
    4658:	08 95       	ret

0000465a <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    465a:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <stdio_usb_interface_enable>
    465e:	88 23       	and	r24, r24
    4660:	81 f0       	breq	.+32     	; 0x4682 <stdio_usb_putchar+0x28>
    4662:	86 2f       	mov	r24, r22
    4664:	08 2e       	mov	r0, r24
    4666:	00 0c       	add	r0, r0
    4668:	99 0b       	sbc	r25, r25
    466a:	e0 db       	rcall	.-2112   	; 0x3e2c <udi_cdc_putc>
    466c:	21 e0       	ldi	r18, 0x01	; 1
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	89 2b       	or	r24, r25
    4672:	11 f0       	breq	.+4      	; 0x4678 <stdio_usb_putchar+0x1e>
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	88 27       	eor	r24, r24
    467a:	99 27       	eor	r25, r25
    467c:	82 1b       	sub	r24, r18
    467e:	93 0b       	sbc	r25, r19
    4680:	08 95       	ret
    4682:	80 e0       	ldi	r24, 0x00	; 0
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	08 95       	ret

00004688 <stdio_usb_getchar>:
    4688:	cf 93       	push	r28
    468a:	df 93       	push	r29
    468c:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <stdio_usb_interface_enable>
    4690:	81 11       	cpse	r24, r1
    4692:	03 c0       	rjmp	.+6      	; 0x469a <stdio_usb_getchar+0x12>
    4694:	fb 01       	movw	r30, r22
    4696:	10 82       	st	Z, r1
    4698:	03 c0       	rjmp	.+6      	; 0x46a0 <stdio_usb_getchar+0x18>
    469a:	eb 01       	movw	r28, r22
    469c:	3f db       	rcall	.-2434   	; 0x3d1c <udi_cdc_getc>
    469e:	88 83       	st	Y, r24
    46a0:	df 91       	pop	r29
    46a2:	cf 91       	pop	r28
    46a4:	08 95       	ret

000046a6 <stdio_usb_enable>:
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	80 93 f6 23 	sts	0x23F6, r24	; 0x8023f6 <stdio_usb_interface_enable>
    46ac:	08 95       	ret

000046ae <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    46ae:	10 92 17 24 	sts	0x2417, r1	; 0x802417 <stdio_base>
    46b2:	10 92 18 24 	sts	0x2418, r1	; 0x802418 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    46b6:	8d e2       	ldi	r24, 0x2D	; 45
    46b8:	93 e2       	ldi	r25, 0x23	; 35
    46ba:	80 93 15 24 	sts	0x2415, r24	; 0x802415 <ptr_put>
    46be:	90 93 16 24 	sts	0x2416, r25	; 0x802416 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    46c2:	84 e4       	ldi	r24, 0x44	; 68
    46c4:	93 e2       	ldi	r25, 0x23	; 35
    46c6:	80 93 13 24 	sts	0x2413, r24	; 0x802413 <ptr_get>
    46ca:	90 93 14 24 	sts	0x2414, r25	; 0x802414 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    46ce:	9c dc       	rcall	.-1736   	; 0x4008 <udc_start>
    46d0:	64 e1       	ldi	r22, 0x14	; 20
    46d2:	73 e2       	ldi	r23, 0x23	; 35
    46d4:	8e e6       	ldi	r24, 0x6E	; 110
    46d6:	93 e2       	ldi	r25, 0x23	; 35
    46d8:	79 c0       	rjmp	.+242    	; 0x47cc <fdevopen>
    46da:	08 95       	ret

000046dc <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    46dc:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    46de:	80 91 17 24 	lds	r24, 0x2417	; 0x802417 <stdio_base>
    46e2:	90 91 18 24 	lds	r25, 0x2418	; 0x802418 <stdio_base+0x1>
    46e6:	e0 91 15 24 	lds	r30, 0x2415	; 0x802415 <ptr_put>
    46ea:	f0 91 16 24 	lds	r31, 0x2416	; 0x802416 <ptr_put+0x1>
    46ee:	19 95       	eicall
    46f0:	99 23       	and	r25, r25
    46f2:	1c f0       	brlt	.+6      	; 0x46fa <_write+0x1e>
		return -1;
	}
	return 1;
    46f4:	81 e0       	ldi	r24, 0x01	; 1
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    46fa:	8f ef       	ldi	r24, 0xFF	; 255
    46fc:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    46fe:	08 95       	ret

00004700 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    4700:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    4704:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    4706:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    4708:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    470c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    470e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    4712:	08 95       	ret

00004714 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    4714:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    4716:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    4718:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    471a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    471c:	60 83       	st	Z, r22
	ret                             // Return to caller
    471e:	08 95       	ret

00004720 <__udivmodhi4>:
    4720:	aa 1b       	sub	r26, r26
    4722:	bb 1b       	sub	r27, r27
    4724:	51 e1       	ldi	r21, 0x11	; 17
    4726:	07 c0       	rjmp	.+14     	; 0x4736 <__udivmodhi4_ep>

00004728 <__udivmodhi4_loop>:
    4728:	aa 1f       	adc	r26, r26
    472a:	bb 1f       	adc	r27, r27
    472c:	a6 17       	cp	r26, r22
    472e:	b7 07       	cpc	r27, r23
    4730:	10 f0       	brcs	.+4      	; 0x4736 <__udivmodhi4_ep>
    4732:	a6 1b       	sub	r26, r22
    4734:	b7 0b       	sbc	r27, r23

00004736 <__udivmodhi4_ep>:
    4736:	88 1f       	adc	r24, r24
    4738:	99 1f       	adc	r25, r25
    473a:	5a 95       	dec	r21
    473c:	a9 f7       	brne	.-22     	; 0x4728 <__udivmodhi4_loop>
    473e:	80 95       	com	r24
    4740:	90 95       	com	r25
    4742:	bc 01       	movw	r22, r24
    4744:	cd 01       	movw	r24, r26
    4746:	08 95       	ret

00004748 <__udivmodsi4>:
    4748:	a1 e2       	ldi	r26, 0x21	; 33
    474a:	1a 2e       	mov	r1, r26
    474c:	aa 1b       	sub	r26, r26
    474e:	bb 1b       	sub	r27, r27
    4750:	fd 01       	movw	r30, r26
    4752:	0d c0       	rjmp	.+26     	; 0x476e <__udivmodsi4_ep>

00004754 <__udivmodsi4_loop>:
    4754:	aa 1f       	adc	r26, r26
    4756:	bb 1f       	adc	r27, r27
    4758:	ee 1f       	adc	r30, r30
    475a:	ff 1f       	adc	r31, r31
    475c:	a2 17       	cp	r26, r18
    475e:	b3 07       	cpc	r27, r19
    4760:	e4 07       	cpc	r30, r20
    4762:	f5 07       	cpc	r31, r21
    4764:	20 f0       	brcs	.+8      	; 0x476e <__udivmodsi4_ep>
    4766:	a2 1b       	sub	r26, r18
    4768:	b3 0b       	sbc	r27, r19
    476a:	e4 0b       	sbc	r30, r20
    476c:	f5 0b       	sbc	r31, r21

0000476e <__udivmodsi4_ep>:
    476e:	66 1f       	adc	r22, r22
    4770:	77 1f       	adc	r23, r23
    4772:	88 1f       	adc	r24, r24
    4774:	99 1f       	adc	r25, r25
    4776:	1a 94       	dec	r1
    4778:	69 f7       	brne	.-38     	; 0x4754 <__udivmodsi4_loop>
    477a:	60 95       	com	r22
    477c:	70 95       	com	r23
    477e:	80 95       	com	r24
    4780:	90 95       	com	r25
    4782:	9b 01       	movw	r18, r22
    4784:	ac 01       	movw	r20, r24
    4786:	bd 01       	movw	r22, r26
    4788:	cf 01       	movw	r24, r30
    478a:	08 95       	ret

0000478c <__tablejump2__>:
    478c:	ee 0f       	add	r30, r30
    478e:	ff 1f       	adc	r31, r31
    4790:	88 1f       	adc	r24, r24
    4792:	8b bf       	out	0x3b, r24	; 59
    4794:	07 90       	elpm	r0, Z+
    4796:	f6 91       	elpm	r31, Z
    4798:	e0 2d       	mov	r30, r0
    479a:	19 94       	eijmp

0000479c <__umulhisi3>:
    479c:	a2 9f       	mul	r26, r18
    479e:	b0 01       	movw	r22, r0
    47a0:	b3 9f       	mul	r27, r19
    47a2:	c0 01       	movw	r24, r0
    47a4:	a3 9f       	mul	r26, r19
    47a6:	70 0d       	add	r23, r0
    47a8:	81 1d       	adc	r24, r1
    47aa:	11 24       	eor	r1, r1
    47ac:	91 1d       	adc	r25, r1
    47ae:	b2 9f       	mul	r27, r18
    47b0:	70 0d       	add	r23, r0
    47b2:	81 1d       	adc	r24, r1
    47b4:	11 24       	eor	r1, r1
    47b6:	91 1d       	adc	r25, r1
    47b8:	08 95       	ret

000047ba <memcpy>:
    47ba:	fb 01       	movw	r30, r22
    47bc:	dc 01       	movw	r26, r24
    47be:	02 c0       	rjmp	.+4      	; 0x47c4 <memcpy+0xa>
    47c0:	01 90       	ld	r0, Z+
    47c2:	0d 92       	st	X+, r0
    47c4:	41 50       	subi	r20, 0x01	; 1
    47c6:	50 40       	sbci	r21, 0x00	; 0
    47c8:	d8 f7       	brcc	.-10     	; 0x47c0 <memcpy+0x6>
    47ca:	08 95       	ret

000047cc <fdevopen>:
    47cc:	0f 93       	push	r16
    47ce:	1f 93       	push	r17
    47d0:	cf 93       	push	r28
    47d2:	df 93       	push	r29
    47d4:	00 97       	sbiw	r24, 0x00	; 0
    47d6:	31 f4       	brne	.+12     	; 0x47e4 <fdevopen+0x18>
    47d8:	61 15       	cp	r22, r1
    47da:	71 05       	cpc	r23, r1
    47dc:	19 f4       	brne	.+6      	; 0x47e4 <fdevopen+0x18>
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	39 c0       	rjmp	.+114    	; 0x4856 <fdevopen+0x8a>
    47e4:	8b 01       	movw	r16, r22
    47e6:	ec 01       	movw	r28, r24
    47e8:	6e e0       	ldi	r22, 0x0E	; 14
    47ea:	70 e0       	ldi	r23, 0x00	; 0
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	37 d0       	rcall	.+110    	; 0x4860 <calloc>
    47f2:	fc 01       	movw	r30, r24
    47f4:	89 2b       	or	r24, r25
    47f6:	99 f3       	breq	.-26     	; 0x47de <fdevopen+0x12>
    47f8:	80 e8       	ldi	r24, 0x80	; 128
    47fa:	83 83       	std	Z+3, r24	; 0x03
    47fc:	01 15       	cp	r16, r1
    47fe:	11 05       	cpc	r17, r1
    4800:	71 f0       	breq	.+28     	; 0x481e <fdevopen+0x52>
    4802:	02 87       	std	Z+10, r16	; 0x0a
    4804:	13 87       	std	Z+11, r17	; 0x0b
    4806:	81 e8       	ldi	r24, 0x81	; 129
    4808:	83 83       	std	Z+3, r24	; 0x03
    480a:	80 91 19 24 	lds	r24, 0x2419	; 0x802419 <__iob>
    480e:	90 91 1a 24 	lds	r25, 0x241A	; 0x80241a <__iob+0x1>
    4812:	89 2b       	or	r24, r25
    4814:	21 f4       	brne	.+8      	; 0x481e <fdevopen+0x52>
    4816:	e0 93 19 24 	sts	0x2419, r30	; 0x802419 <__iob>
    481a:	f0 93 1a 24 	sts	0x241A, r31	; 0x80241a <__iob+0x1>
    481e:	20 97       	sbiw	r28, 0x00	; 0
    4820:	c9 f0       	breq	.+50     	; 0x4854 <fdevopen+0x88>
    4822:	c0 87       	std	Z+8, r28	; 0x08
    4824:	d1 87       	std	Z+9, r29	; 0x09
    4826:	83 81       	ldd	r24, Z+3	; 0x03
    4828:	82 60       	ori	r24, 0x02	; 2
    482a:	83 83       	std	Z+3, r24	; 0x03
    482c:	80 91 1b 24 	lds	r24, 0x241B	; 0x80241b <__iob+0x2>
    4830:	90 91 1c 24 	lds	r25, 0x241C	; 0x80241c <__iob+0x3>
    4834:	89 2b       	or	r24, r25
    4836:	71 f4       	brne	.+28     	; 0x4854 <fdevopen+0x88>
    4838:	e0 93 1b 24 	sts	0x241B, r30	; 0x80241b <__iob+0x2>
    483c:	f0 93 1c 24 	sts	0x241C, r31	; 0x80241c <__iob+0x3>
    4840:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <__iob+0x4>
    4844:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <__iob+0x5>
    4848:	89 2b       	or	r24, r25
    484a:	21 f4       	brne	.+8      	; 0x4854 <fdevopen+0x88>
    484c:	e0 93 1d 24 	sts	0x241D, r30	; 0x80241d <__iob+0x4>
    4850:	f0 93 1e 24 	sts	0x241E, r31	; 0x80241e <__iob+0x5>
    4854:	cf 01       	movw	r24, r30
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	1f 91       	pop	r17
    485c:	0f 91       	pop	r16
    485e:	08 95       	ret

00004860 <calloc>:
    4860:	0f 93       	push	r16
    4862:	1f 93       	push	r17
    4864:	cf 93       	push	r28
    4866:	df 93       	push	r29
    4868:	86 9f       	mul	r24, r22
    486a:	80 01       	movw	r16, r0
    486c:	87 9f       	mul	r24, r23
    486e:	10 0d       	add	r17, r0
    4870:	96 9f       	mul	r25, r22
    4872:	10 0d       	add	r17, r0
    4874:	11 24       	eor	r1, r1
    4876:	c8 01       	movw	r24, r16
    4878:	0d d0       	rcall	.+26     	; 0x4894 <malloc>
    487a:	ec 01       	movw	r28, r24
    487c:	00 97       	sbiw	r24, 0x00	; 0
    487e:	21 f0       	breq	.+8      	; 0x4888 <calloc+0x28>
    4880:	a8 01       	movw	r20, r16
    4882:	60 e0       	ldi	r22, 0x00	; 0
    4884:	70 e0       	ldi	r23, 0x00	; 0
    4886:	27 d1       	rcall	.+590    	; 0x4ad6 <memset>
    4888:	ce 01       	movw	r24, r28
    488a:	df 91       	pop	r29
    488c:	cf 91       	pop	r28
    488e:	1f 91       	pop	r17
    4890:	0f 91       	pop	r16
    4892:	08 95       	ret

00004894 <malloc>:
    4894:	0f 93       	push	r16
    4896:	1f 93       	push	r17
    4898:	cf 93       	push	r28
    489a:	df 93       	push	r29
    489c:	82 30       	cpi	r24, 0x02	; 2
    489e:	91 05       	cpc	r25, r1
    48a0:	10 f4       	brcc	.+4      	; 0x48a6 <malloc+0x12>
    48a2:	82 e0       	ldi	r24, 0x02	; 2
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	e0 91 21 24 	lds	r30, 0x2421	; 0x802421 <__flp>
    48aa:	f0 91 22 24 	lds	r31, 0x2422	; 0x802422 <__flp+0x1>
    48ae:	20 e0       	ldi	r18, 0x00	; 0
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	a0 e0       	ldi	r26, 0x00	; 0
    48b4:	b0 e0       	ldi	r27, 0x00	; 0
    48b6:	30 97       	sbiw	r30, 0x00	; 0
    48b8:	19 f1       	breq	.+70     	; 0x4900 <malloc+0x6c>
    48ba:	40 81       	ld	r20, Z
    48bc:	51 81       	ldd	r21, Z+1	; 0x01
    48be:	02 81       	ldd	r16, Z+2	; 0x02
    48c0:	13 81       	ldd	r17, Z+3	; 0x03
    48c2:	48 17       	cp	r20, r24
    48c4:	59 07       	cpc	r21, r25
    48c6:	c8 f0       	brcs	.+50     	; 0x48fa <malloc+0x66>
    48c8:	84 17       	cp	r24, r20
    48ca:	95 07       	cpc	r25, r21
    48cc:	69 f4       	brne	.+26     	; 0x48e8 <malloc+0x54>
    48ce:	10 97       	sbiw	r26, 0x00	; 0
    48d0:	31 f0       	breq	.+12     	; 0x48de <malloc+0x4a>
    48d2:	12 96       	adiw	r26, 0x02	; 2
    48d4:	0c 93       	st	X, r16
    48d6:	12 97       	sbiw	r26, 0x02	; 2
    48d8:	13 96       	adiw	r26, 0x03	; 3
    48da:	1c 93       	st	X, r17
    48dc:	27 c0       	rjmp	.+78     	; 0x492c <malloc+0x98>
    48de:	00 93 21 24 	sts	0x2421, r16	; 0x802421 <__flp>
    48e2:	10 93 22 24 	sts	0x2422, r17	; 0x802422 <__flp+0x1>
    48e6:	22 c0       	rjmp	.+68     	; 0x492c <malloc+0x98>
    48e8:	21 15       	cp	r18, r1
    48ea:	31 05       	cpc	r19, r1
    48ec:	19 f0       	breq	.+6      	; 0x48f4 <malloc+0x60>
    48ee:	42 17       	cp	r20, r18
    48f0:	53 07       	cpc	r21, r19
    48f2:	18 f4       	brcc	.+6      	; 0x48fa <malloc+0x66>
    48f4:	9a 01       	movw	r18, r20
    48f6:	bd 01       	movw	r22, r26
    48f8:	ef 01       	movw	r28, r30
    48fa:	df 01       	movw	r26, r30
    48fc:	f8 01       	movw	r30, r16
    48fe:	db cf       	rjmp	.-74     	; 0x48b6 <malloc+0x22>
    4900:	21 15       	cp	r18, r1
    4902:	31 05       	cpc	r19, r1
    4904:	f9 f0       	breq	.+62     	; 0x4944 <malloc+0xb0>
    4906:	28 1b       	sub	r18, r24
    4908:	39 0b       	sbc	r19, r25
    490a:	24 30       	cpi	r18, 0x04	; 4
    490c:	31 05       	cpc	r19, r1
    490e:	80 f4       	brcc	.+32     	; 0x4930 <malloc+0x9c>
    4910:	8a 81       	ldd	r24, Y+2	; 0x02
    4912:	9b 81       	ldd	r25, Y+3	; 0x03
    4914:	61 15       	cp	r22, r1
    4916:	71 05       	cpc	r23, r1
    4918:	21 f0       	breq	.+8      	; 0x4922 <malloc+0x8e>
    491a:	fb 01       	movw	r30, r22
    491c:	82 83       	std	Z+2, r24	; 0x02
    491e:	93 83       	std	Z+3, r25	; 0x03
    4920:	04 c0       	rjmp	.+8      	; 0x492a <malloc+0x96>
    4922:	80 93 21 24 	sts	0x2421, r24	; 0x802421 <__flp>
    4926:	90 93 22 24 	sts	0x2422, r25	; 0x802422 <__flp+0x1>
    492a:	fe 01       	movw	r30, r28
    492c:	32 96       	adiw	r30, 0x02	; 2
    492e:	44 c0       	rjmp	.+136    	; 0x49b8 <malloc+0x124>
    4930:	fe 01       	movw	r30, r28
    4932:	e2 0f       	add	r30, r18
    4934:	f3 1f       	adc	r31, r19
    4936:	81 93       	st	Z+, r24
    4938:	91 93       	st	Z+, r25
    493a:	22 50       	subi	r18, 0x02	; 2
    493c:	31 09       	sbc	r19, r1
    493e:	28 83       	st	Y, r18
    4940:	39 83       	std	Y+1, r19	; 0x01
    4942:	3a c0       	rjmp	.+116    	; 0x49b8 <malloc+0x124>
    4944:	20 91 1f 24 	lds	r18, 0x241F	; 0x80241f <__brkval>
    4948:	30 91 20 24 	lds	r19, 0x2420	; 0x802420 <__brkval+0x1>
    494c:	23 2b       	or	r18, r19
    494e:	41 f4       	brne	.+16     	; 0x4960 <malloc+0xcc>
    4950:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4954:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4958:	20 93 1f 24 	sts	0x241F, r18	; 0x80241f <__brkval>
    495c:	30 93 20 24 	sts	0x2420, r19	; 0x802420 <__brkval+0x1>
    4960:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4964:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4968:	21 15       	cp	r18, r1
    496a:	31 05       	cpc	r19, r1
    496c:	41 f4       	brne	.+16     	; 0x497e <malloc+0xea>
    496e:	2d b7       	in	r18, 0x3d	; 61
    4970:	3e b7       	in	r19, 0x3e	; 62
    4972:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4976:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    497a:	24 1b       	sub	r18, r20
    497c:	35 0b       	sbc	r19, r21
    497e:	e0 91 1f 24 	lds	r30, 0x241F	; 0x80241f <__brkval>
    4982:	f0 91 20 24 	lds	r31, 0x2420	; 0x802420 <__brkval+0x1>
    4986:	e2 17       	cp	r30, r18
    4988:	f3 07       	cpc	r31, r19
    498a:	a0 f4       	brcc	.+40     	; 0x49b4 <malloc+0x120>
    498c:	2e 1b       	sub	r18, r30
    498e:	3f 0b       	sbc	r19, r31
    4990:	28 17       	cp	r18, r24
    4992:	39 07       	cpc	r19, r25
    4994:	78 f0       	brcs	.+30     	; 0x49b4 <malloc+0x120>
    4996:	ac 01       	movw	r20, r24
    4998:	4e 5f       	subi	r20, 0xFE	; 254
    499a:	5f 4f       	sbci	r21, 0xFF	; 255
    499c:	24 17       	cp	r18, r20
    499e:	35 07       	cpc	r19, r21
    49a0:	48 f0       	brcs	.+18     	; 0x49b4 <malloc+0x120>
    49a2:	4e 0f       	add	r20, r30
    49a4:	5f 1f       	adc	r21, r31
    49a6:	40 93 1f 24 	sts	0x241F, r20	; 0x80241f <__brkval>
    49aa:	50 93 20 24 	sts	0x2420, r21	; 0x802420 <__brkval+0x1>
    49ae:	81 93       	st	Z+, r24
    49b0:	91 93       	st	Z+, r25
    49b2:	02 c0       	rjmp	.+4      	; 0x49b8 <malloc+0x124>
    49b4:	e0 e0       	ldi	r30, 0x00	; 0
    49b6:	f0 e0       	ldi	r31, 0x00	; 0
    49b8:	cf 01       	movw	r24, r30
    49ba:	df 91       	pop	r29
    49bc:	cf 91       	pop	r28
    49be:	1f 91       	pop	r17
    49c0:	0f 91       	pop	r16
    49c2:	08 95       	ret

000049c4 <free>:
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	00 97       	sbiw	r24, 0x00	; 0
    49ca:	09 f4       	brne	.+2      	; 0x49ce <free+0xa>
    49cc:	81 c0       	rjmp	.+258    	; 0x4ad0 <free+0x10c>
    49ce:	fc 01       	movw	r30, r24
    49d0:	32 97       	sbiw	r30, 0x02	; 2
    49d2:	12 82       	std	Z+2, r1	; 0x02
    49d4:	13 82       	std	Z+3, r1	; 0x03
    49d6:	a0 91 21 24 	lds	r26, 0x2421	; 0x802421 <__flp>
    49da:	b0 91 22 24 	lds	r27, 0x2422	; 0x802422 <__flp+0x1>
    49de:	10 97       	sbiw	r26, 0x00	; 0
    49e0:	81 f4       	brne	.+32     	; 0x4a02 <free+0x3e>
    49e2:	20 81       	ld	r18, Z
    49e4:	31 81       	ldd	r19, Z+1	; 0x01
    49e6:	82 0f       	add	r24, r18
    49e8:	93 1f       	adc	r25, r19
    49ea:	20 91 1f 24 	lds	r18, 0x241F	; 0x80241f <__brkval>
    49ee:	30 91 20 24 	lds	r19, 0x2420	; 0x802420 <__brkval+0x1>
    49f2:	28 17       	cp	r18, r24
    49f4:	39 07       	cpc	r19, r25
    49f6:	51 f5       	brne	.+84     	; 0x4a4c <free+0x88>
    49f8:	e0 93 1f 24 	sts	0x241F, r30	; 0x80241f <__brkval>
    49fc:	f0 93 20 24 	sts	0x2420, r31	; 0x802420 <__brkval+0x1>
    4a00:	67 c0       	rjmp	.+206    	; 0x4ad0 <free+0x10c>
    4a02:	ed 01       	movw	r28, r26
    4a04:	20 e0       	ldi	r18, 0x00	; 0
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	ce 17       	cp	r28, r30
    4a0a:	df 07       	cpc	r29, r31
    4a0c:	40 f4       	brcc	.+16     	; 0x4a1e <free+0x5a>
    4a0e:	4a 81       	ldd	r20, Y+2	; 0x02
    4a10:	5b 81       	ldd	r21, Y+3	; 0x03
    4a12:	9e 01       	movw	r18, r28
    4a14:	41 15       	cp	r20, r1
    4a16:	51 05       	cpc	r21, r1
    4a18:	f1 f0       	breq	.+60     	; 0x4a56 <free+0x92>
    4a1a:	ea 01       	movw	r28, r20
    4a1c:	f5 cf       	rjmp	.-22     	; 0x4a08 <free+0x44>
    4a1e:	c2 83       	std	Z+2, r28	; 0x02
    4a20:	d3 83       	std	Z+3, r29	; 0x03
    4a22:	40 81       	ld	r20, Z
    4a24:	51 81       	ldd	r21, Z+1	; 0x01
    4a26:	84 0f       	add	r24, r20
    4a28:	95 1f       	adc	r25, r21
    4a2a:	c8 17       	cp	r28, r24
    4a2c:	d9 07       	cpc	r29, r25
    4a2e:	59 f4       	brne	.+22     	; 0x4a46 <free+0x82>
    4a30:	88 81       	ld	r24, Y
    4a32:	99 81       	ldd	r25, Y+1	; 0x01
    4a34:	84 0f       	add	r24, r20
    4a36:	95 1f       	adc	r25, r21
    4a38:	02 96       	adiw	r24, 0x02	; 2
    4a3a:	80 83       	st	Z, r24
    4a3c:	91 83       	std	Z+1, r25	; 0x01
    4a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a40:	9b 81       	ldd	r25, Y+3	; 0x03
    4a42:	82 83       	std	Z+2, r24	; 0x02
    4a44:	93 83       	std	Z+3, r25	; 0x03
    4a46:	21 15       	cp	r18, r1
    4a48:	31 05       	cpc	r19, r1
    4a4a:	29 f4       	brne	.+10     	; 0x4a56 <free+0x92>
    4a4c:	e0 93 21 24 	sts	0x2421, r30	; 0x802421 <__flp>
    4a50:	f0 93 22 24 	sts	0x2422, r31	; 0x802422 <__flp+0x1>
    4a54:	3d c0       	rjmp	.+122    	; 0x4ad0 <free+0x10c>
    4a56:	e9 01       	movw	r28, r18
    4a58:	ea 83       	std	Y+2, r30	; 0x02
    4a5a:	fb 83       	std	Y+3, r31	; 0x03
    4a5c:	49 91       	ld	r20, Y+
    4a5e:	59 91       	ld	r21, Y+
    4a60:	c4 0f       	add	r28, r20
    4a62:	d5 1f       	adc	r29, r21
    4a64:	ec 17       	cp	r30, r28
    4a66:	fd 07       	cpc	r31, r29
    4a68:	61 f4       	brne	.+24     	; 0x4a82 <free+0xbe>
    4a6a:	80 81       	ld	r24, Z
    4a6c:	91 81       	ldd	r25, Z+1	; 0x01
    4a6e:	84 0f       	add	r24, r20
    4a70:	95 1f       	adc	r25, r21
    4a72:	02 96       	adiw	r24, 0x02	; 2
    4a74:	e9 01       	movw	r28, r18
    4a76:	88 83       	st	Y, r24
    4a78:	99 83       	std	Y+1, r25	; 0x01
    4a7a:	82 81       	ldd	r24, Z+2	; 0x02
    4a7c:	93 81       	ldd	r25, Z+3	; 0x03
    4a7e:	8a 83       	std	Y+2, r24	; 0x02
    4a80:	9b 83       	std	Y+3, r25	; 0x03
    4a82:	e0 e0       	ldi	r30, 0x00	; 0
    4a84:	f0 e0       	ldi	r31, 0x00	; 0
    4a86:	12 96       	adiw	r26, 0x02	; 2
    4a88:	8d 91       	ld	r24, X+
    4a8a:	9c 91       	ld	r25, X
    4a8c:	13 97       	sbiw	r26, 0x03	; 3
    4a8e:	00 97       	sbiw	r24, 0x00	; 0
    4a90:	19 f0       	breq	.+6      	; 0x4a98 <free+0xd4>
    4a92:	fd 01       	movw	r30, r26
    4a94:	dc 01       	movw	r26, r24
    4a96:	f7 cf       	rjmp	.-18     	; 0x4a86 <free+0xc2>
    4a98:	8d 91       	ld	r24, X+
    4a9a:	9c 91       	ld	r25, X
    4a9c:	11 97       	sbiw	r26, 0x01	; 1
    4a9e:	9d 01       	movw	r18, r26
    4aa0:	2e 5f       	subi	r18, 0xFE	; 254
    4aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    4aa4:	82 0f       	add	r24, r18
    4aa6:	93 1f       	adc	r25, r19
    4aa8:	20 91 1f 24 	lds	r18, 0x241F	; 0x80241f <__brkval>
    4aac:	30 91 20 24 	lds	r19, 0x2420	; 0x802420 <__brkval+0x1>
    4ab0:	28 17       	cp	r18, r24
    4ab2:	39 07       	cpc	r19, r25
    4ab4:	69 f4       	brne	.+26     	; 0x4ad0 <free+0x10c>
    4ab6:	30 97       	sbiw	r30, 0x00	; 0
    4ab8:	29 f4       	brne	.+10     	; 0x4ac4 <free+0x100>
    4aba:	10 92 21 24 	sts	0x2421, r1	; 0x802421 <__flp>
    4abe:	10 92 22 24 	sts	0x2422, r1	; 0x802422 <__flp+0x1>
    4ac2:	02 c0       	rjmp	.+4      	; 0x4ac8 <free+0x104>
    4ac4:	12 82       	std	Z+2, r1	; 0x02
    4ac6:	13 82       	std	Z+3, r1	; 0x03
    4ac8:	a0 93 1f 24 	sts	0x241F, r26	; 0x80241f <__brkval>
    4acc:	b0 93 20 24 	sts	0x2420, r27	; 0x802420 <__brkval+0x1>
    4ad0:	df 91       	pop	r29
    4ad2:	cf 91       	pop	r28
    4ad4:	08 95       	ret

00004ad6 <memset>:
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	01 c0       	rjmp	.+2      	; 0x4adc <memset+0x6>
    4ada:	6d 93       	st	X+, r22
    4adc:	41 50       	subi	r20, 0x01	; 1
    4ade:	50 40       	sbci	r21, 0x00	; 0
    4ae0:	e0 f7       	brcc	.-8      	; 0x4ada <memset+0x4>
    4ae2:	08 95       	ret

00004ae4 <_exit>:
    4ae4:	f8 94       	cli

00004ae6 <__stop_program>:
    4ae6:	ff cf       	rjmp	.-2      	; 0x4ae6 <__stop_program>
