
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00802000  000032c0  00003354  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c4  008020cc  008020cc  00003420  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000618  00000000  00000000  00003498  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000da96  00000000  00000000  00003ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004c2c  00000000  00000000  00011546  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006fab  00000000  00000000  00016172  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000191c  00000000  00000000  0001d120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00037575  00000000  00000000  0001ea3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000053cd  00000000  00000000  00055fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000640  00000000  00000000  0005b380  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bea7  00000000  00000000  0005b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	2a c1       	rjmp	.+596    	; 0x25a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c1       	rjmp	.+592    	; 0x25a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c1       	rjmp	.+588    	; 0x25a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c1       	rjmp	.+584    	; 0x25a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c1       	rjmp	.+576    	; 0x25a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c1       	rjmp	.+572    	; 0x25a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c1       	rjmp	.+568    	; 0x25a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	16 c1       	rjmp	.+556    	; 0x25a <__bad_interrupt>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	12 c1       	rjmp	.+548    	; 0x25a <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__vector_14>
      3a:	00 00       	nop
      3c:	3d c1       	rjmp	.+634    	; 0x2b8 <__vector_15>
      3e:	00 00       	nop
      40:	68 c1       	rjmp	.+720    	; 0x312 <__vector_16>
      42:	00 00       	nop
      44:	93 c1       	rjmp	.+806    	; 0x36c <__vector_17>
      46:	00 00       	nop
      48:	be c1       	rjmp	.+892    	; 0x3c6 <__vector_18>
      4a:	00 00       	nop
      4c:	e9 c1       	rjmp	.+978    	; 0x420 <__vector_19>
      4e:	00 00       	nop
      50:	14 c2       	rjmp	.+1064   	; 0x47a <__vector_20>
      52:	00 00       	nop
      54:	3f c2       	rjmp	.+1150   	; 0x4d4 <__vector_21>
      56:	00 00       	nop
      58:	6a c2       	rjmp	.+1236   	; 0x52e <__vector_22>
      5a:	00 00       	nop
      5c:	95 c2       	rjmp	.+1322   	; 0x588 <__vector_23>
      5e:	00 00       	nop
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	de c0       	rjmp	.+444    	; 0x25a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	dc c0       	rjmp	.+440    	; 0x25a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	da c0       	rjmp	.+436    	; 0x25a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d8 c0       	rjmp	.+432    	; 0x25a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d0 c0       	rjmp	.+416    	; 0x25a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	54 c4       	rjmp	.+2216   	; 0x966 <__vector_47>
      be:	00 00       	nop
      c0:	7f c4       	rjmp	.+2302   	; 0x9c0 <__vector_48>
      c2:	00 00       	nop
      c4:	aa c4       	rjmp	.+2388   	; 0xa1a <__vector_49>
      c6:	00 00       	nop
      c8:	d5 c4       	rjmp	.+2474   	; 0xa74 <__vector_50>
      ca:	00 00       	nop
      cc:	00 c5       	rjmp	.+2560   	; 0xace <__vector_51>
      ce:	00 00       	nop
      d0:	2b c5       	rjmp	.+2646   	; 0xb28 <__vector_52>
      d2:	00 00       	nop
      d4:	56 c5       	rjmp	.+2732   	; 0xb82 <__vector_53>
      d6:	00 00       	nop
      d8:	81 c5       	rjmp	.+2818   	; 0xbdc <__vector_54>
      da:	00 00       	nop
      dc:	ac c5       	rjmp	.+2904   	; 0xc36 <__vector_55>
      de:	00 00       	nop
      e0:	d7 c5       	rjmp	.+2990   	; 0xc90 <__vector_56>
      e2:	00 00       	nop
      e4:	ba c0       	rjmp	.+372    	; 0x25a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b6 c0       	rjmp	.+364    	; 0x25a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b4 c0       	rjmp	.+360    	; 0x25a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b2 c0       	rjmp	.+356    	; 0x25a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b0 c0       	rjmp	.+352    	; 0x25a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ae c0       	rjmp	.+348    	; 0x25a <__bad_interrupt>
      fe:	00 00       	nop
     100:	ac c0       	rjmp	.+344    	; 0x25a <__bad_interrupt>
     102:	00 00       	nop
     104:	aa c0       	rjmp	.+340    	; 0x25a <__bad_interrupt>
     106:	00 00       	nop
     108:	a8 c0       	rjmp	.+336    	; 0x25a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a6 c0       	rjmp	.+332    	; 0x25a <__bad_interrupt>
     10e:	00 00       	nop
     110:	a4 c0       	rjmp	.+328    	; 0x25a <__bad_interrupt>
     112:	00 00       	nop
     114:	a2 c0       	rjmp	.+324    	; 0x25a <__bad_interrupt>
     116:	00 00       	nop
     118:	a0 c0       	rjmp	.+320    	; 0x25a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9e c0       	rjmp	.+316    	; 0x25a <__bad_interrupt>
     11e:	00 00       	nop
     120:	9c c0       	rjmp	.+312    	; 0x25a <__bad_interrupt>
     122:	00 00       	nop
     124:	9a c0       	rjmp	.+308    	; 0x25a <__bad_interrupt>
     126:	00 00       	nop
     128:	98 c0       	rjmp	.+304    	; 0x25a <__bad_interrupt>
     12a:	00 00       	nop
     12c:	96 c0       	rjmp	.+300    	; 0x25a <__bad_interrupt>
     12e:	00 00       	nop
     130:	94 c0       	rjmp	.+296    	; 0x25a <__bad_interrupt>
     132:	00 00       	nop
     134:	56 c2       	rjmp	.+1196   	; 0x5e2 <__vector_77>
     136:	00 00       	nop
     138:	81 c2       	rjmp	.+1282   	; 0x63c <__vector_78>
     13a:	00 00       	nop
     13c:	ac c2       	rjmp	.+1368   	; 0x696 <__vector_79>
     13e:	00 00       	nop
     140:	d7 c2       	rjmp	.+1454   	; 0x6f0 <__vector_80>
     142:	00 00       	nop
     144:	02 c3       	rjmp	.+1540   	; 0x74a <__vector_81>
     146:	00 00       	nop
     148:	2d c3       	rjmp	.+1626   	; 0x7a4 <__vector_82>
     14a:	00 00       	nop
     14c:	58 c3       	rjmp	.+1712   	; 0x7fe <__vector_83>
     14e:	00 00       	nop
     150:	83 c3       	rjmp	.+1798   	; 0x858 <__vector_84>
     152:	00 00       	nop
     154:	ae c3       	rjmp	.+1884   	; 0x8b2 <__vector_85>
     156:	00 00       	nop
     158:	d9 c3       	rjmp	.+1970   	; 0x90c <__vector_86>
     15a:	00 00       	nop
     15c:	7e c0       	rjmp	.+252    	; 0x25a <__bad_interrupt>
     15e:	00 00       	nop
     160:	7c c0       	rjmp	.+248    	; 0x25a <__bad_interrupt>
     162:	00 00       	nop
     164:	7a c0       	rjmp	.+244    	; 0x25a <__bad_interrupt>
     166:	00 00       	nop
     168:	78 c0       	rjmp	.+240    	; 0x25a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	76 c0       	rjmp	.+236    	; 0x25a <__bad_interrupt>
     16e:	00 00       	nop
     170:	74 c0       	rjmp	.+232    	; 0x25a <__bad_interrupt>
     172:	00 00       	nop
     174:	72 c0       	rjmp	.+228    	; 0x25a <__bad_interrupt>
     176:	00 00       	nop
     178:	70 c0       	rjmp	.+224    	; 0x25a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6e c0       	rjmp	.+220    	; 0x25a <__bad_interrupt>
     17e:	00 00       	nop
     180:	6c c0       	rjmp	.+216    	; 0x25a <__bad_interrupt>
     182:	00 00       	nop
     184:	6a c0       	rjmp	.+212    	; 0x25a <__bad_interrupt>
     186:	00 00       	nop
     188:	68 c0       	rjmp	.+208    	; 0x25a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	66 c0       	rjmp	.+204    	; 0x25a <__bad_interrupt>
     18e:	00 00       	nop
     190:	64 c0       	rjmp	.+200    	; 0x25a <__bad_interrupt>
     192:	00 00       	nop
     194:	62 c0       	rjmp	.+196    	; 0x25a <__bad_interrupt>
     196:	00 00       	nop
     198:	60 c0       	rjmp	.+192    	; 0x25a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5e c0       	rjmp	.+188    	; 0x25a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5c c0       	rjmp	.+184    	; 0x25a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5a c0       	rjmp	.+180    	; 0x25a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	58 c0       	rjmp	.+176    	; 0x25a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	56 c0       	rjmp	.+172    	; 0x25a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	9c c5       	rjmp	.+2872   	; 0xcea <__vector_108>
     1b2:	00 00       	nop
     1b4:	c7 c5       	rjmp	.+2958   	; 0xd44 <__vector_109>
     1b6:	00 00       	nop
     1b8:	f2 c5       	rjmp	.+3044   	; 0xd9e <__vector_110>
     1ba:	00 00       	nop
     1bc:	1d c6       	rjmp	.+3130   	; 0xdf8 <__vector_111>
     1be:	00 00       	nop
     1c0:	48 c6       	rjmp	.+3216   	; 0xe52 <__vector_112>
     1c2:	00 00       	nop
     1c4:	73 c6       	rjmp	.+3302   	; 0xeac <__vector_113>
     1c6:	00 00       	nop
     1c8:	48 c0       	rjmp	.+144    	; 0x25a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	46 c0       	rjmp	.+140    	; 0x25a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	44 c0       	rjmp	.+136    	; 0x25a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	42 c0       	rjmp	.+132    	; 0x25a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3c c0       	rjmp	.+120    	; 0x25a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3a c0       	rjmp	.+116    	; 0x25a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	36 c0       	rjmp	.+108    	; 0x25a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__vector_125>
     1f8:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__vector_126>
     1fc:	00 09       	sbc	r16, r0
     1fe:	03 09       	sbc	r16, r3
     200:	06 09       	sbc	r16, r6
     202:	09 09       	sbc	r16, r9
     204:	0c 09       	sbc	r16, r12
     206:	0f 09       	sbc	r16, r15
     208:	12 09       	sbc	r17, r2
     20a:	44 10       	cpse	r4, r4
     20c:	57 10       	cpse	r5, r7
     20e:	6a 10       	cpse	r6, r10
     210:	7d 10       	cpse	r7, r13
     212:	90 10       	cpse	r9, r0
     214:	a3 10       	cpse	r10, r3
     216:	b6 10       	cpse	r11, r6

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e5       	ldi	r29, 0x5F	; 95
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	10 e2       	ldi	r17, 0x20	; 32
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e0 ec       	ldi	r30, 0xC0	; 192
     230:	f2 e3       	ldi	r31, 0x32	; 50
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	ac 3c       	cpi	r26, 0xCC	; 204
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	23 e2       	ldi	r18, 0x23	; 35
     244:	ac ec       	ldi	r26, 0xCC	; 204
     246:	b0 e2       	ldi	r27, 0x20	; 32
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a0 39       	cpi	r26, 0x90	; 144
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <main>
     256:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     25c:	08 95       	ret

0000025e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     25e:	1f 92       	push	r1
     260:	0f 92       	push	r0
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	0f 92       	push	r0
     266:	11 24       	eor	r1, r1
     268:	0b b6       	in	r0, 0x3b	; 59
     26a:	0f 92       	push	r0
     26c:	2f 93       	push	r18
     26e:	3f 93       	push	r19
     270:	4f 93       	push	r20
     272:	5f 93       	push	r21
     274:	6f 93       	push	r22
     276:	7f 93       	push	r23
     278:	8f 93       	push	r24
     27a:	9f 93       	push	r25
     27c:	af 93       	push	r26
     27e:	bf 93       	push	r27
     280:	ef 93       	push	r30
     282:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     284:	e0 91 12 21 	lds	r30, 0x2112	; 0x802112 <tc_tcc0_ovf_callback>
     288:	f0 91 13 21 	lds	r31, 0x2113	; 0x802113 <tc_tcc0_ovf_callback+0x1>
     28c:	30 97       	sbiw	r30, 0x00	; 0
     28e:	09 f0       	breq	.+2      	; 0x292 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     290:	19 95       	eicall
	}
}
     292:	ff 91       	pop	r31
     294:	ef 91       	pop	r30
     296:	bf 91       	pop	r27
     298:	af 91       	pop	r26
     29a:	9f 91       	pop	r25
     29c:	8f 91       	pop	r24
     29e:	7f 91       	pop	r23
     2a0:	6f 91       	pop	r22
     2a2:	5f 91       	pop	r21
     2a4:	4f 91       	pop	r20
     2a6:	3f 91       	pop	r19
     2a8:	2f 91       	pop	r18
     2aa:	0f 90       	pop	r0
     2ac:	0b be       	out	0x3b, r0	; 59
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	0b b6       	in	r0, 0x3b	; 59
     2c4:	0f 92       	push	r0
     2c6:	2f 93       	push	r18
     2c8:	3f 93       	push	r19
     2ca:	4f 93       	push	r20
     2cc:	5f 93       	push	r21
     2ce:	6f 93       	push	r22
     2d0:	7f 93       	push	r23
     2d2:	8f 93       	push	r24
     2d4:	9f 93       	push	r25
     2d6:	af 93       	push	r26
     2d8:	bf 93       	push	r27
     2da:	ef 93       	push	r30
     2dc:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     2de:	e0 91 10 21 	lds	r30, 0x2110	; 0x802110 <tc_tcc0_err_callback>
     2e2:	f0 91 11 21 	lds	r31, 0x2111	; 0x802111 <tc_tcc0_err_callback+0x1>
     2e6:	30 97       	sbiw	r30, 0x00	; 0
     2e8:	09 f0       	breq	.+2      	; 0x2ec <__vector_15+0x34>
		tc_tcc0_err_callback();
     2ea:	19 95       	eicall
	}
}
     2ec:	ff 91       	pop	r31
     2ee:	ef 91       	pop	r30
     2f0:	bf 91       	pop	r27
     2f2:	af 91       	pop	r26
     2f4:	9f 91       	pop	r25
     2f6:	8f 91       	pop	r24
     2f8:	7f 91       	pop	r23
     2fa:	6f 91       	pop	r22
     2fc:	5f 91       	pop	r21
     2fe:	4f 91       	pop	r20
     300:	3f 91       	pop	r19
     302:	2f 91       	pop	r18
     304:	0f 90       	pop	r0
     306:	0b be       	out	0x3b, r0	; 59
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
     31c:	0b b6       	in	r0, 0x3b	; 59
     31e:	0f 92       	push	r0
     320:	2f 93       	push	r18
     322:	3f 93       	push	r19
     324:	4f 93       	push	r20
     326:	5f 93       	push	r21
     328:	6f 93       	push	r22
     32a:	7f 93       	push	r23
     32c:	8f 93       	push	r24
     32e:	9f 93       	push	r25
     330:	af 93       	push	r26
     332:	bf 93       	push	r27
     334:	ef 93       	push	r30
     336:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     338:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <tc_tcc0_cca_callback>
     33c:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <tc_tcc0_cca_callback+0x1>
     340:	30 97       	sbiw	r30, 0x00	; 0
     342:	09 f0       	breq	.+2      	; 0x346 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     344:	19 95       	eicall
	}
}
     346:	ff 91       	pop	r31
     348:	ef 91       	pop	r30
     34a:	bf 91       	pop	r27
     34c:	af 91       	pop	r26
     34e:	9f 91       	pop	r25
     350:	8f 91       	pop	r24
     352:	7f 91       	pop	r23
     354:	6f 91       	pop	r22
     356:	5f 91       	pop	r21
     358:	4f 91       	pop	r20
     35a:	3f 91       	pop	r19
     35c:	2f 91       	pop	r18
     35e:	0f 90       	pop	r0
     360:	0b be       	out	0x3b, r0	; 59
     362:	0f 90       	pop	r0
     364:	0f be       	out	0x3f, r0	; 63
     366:	0f 90       	pop	r0
     368:	1f 90       	pop	r1
     36a:	18 95       	reti

0000036c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	0f 92       	push	r0
     374:	11 24       	eor	r1, r1
     376:	0b b6       	in	r0, 0x3b	; 59
     378:	0f 92       	push	r0
     37a:	2f 93       	push	r18
     37c:	3f 93       	push	r19
     37e:	4f 93       	push	r20
     380:	5f 93       	push	r21
     382:	6f 93       	push	r22
     384:	7f 93       	push	r23
     386:	8f 93       	push	r24
     388:	9f 93       	push	r25
     38a:	af 93       	push	r26
     38c:	bf 93       	push	r27
     38e:	ef 93       	push	r30
     390:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     392:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <tc_tcc0_ccb_callback>
     396:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <tc_tcc0_ccb_callback+0x1>
     39a:	30 97       	sbiw	r30, 0x00	; 0
     39c:	09 f0       	breq	.+2      	; 0x3a0 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     39e:	19 95       	eicall
	}
}
     3a0:	ff 91       	pop	r31
     3a2:	ef 91       	pop	r30
     3a4:	bf 91       	pop	r27
     3a6:	af 91       	pop	r26
     3a8:	9f 91       	pop	r25
     3aa:	8f 91       	pop	r24
     3ac:	7f 91       	pop	r23
     3ae:	6f 91       	pop	r22
     3b0:	5f 91       	pop	r21
     3b2:	4f 91       	pop	r20
     3b4:	3f 91       	pop	r19
     3b6:	2f 91       	pop	r18
     3b8:	0f 90       	pop	r0
     3ba:	0b be       	out	0x3b, r0	; 59
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	0b b6       	in	r0, 0x3b	; 59
     3d2:	0f 92       	push	r0
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	4f 93       	push	r20
     3da:	5f 93       	push	r21
     3dc:	6f 93       	push	r22
     3de:	7f 93       	push	r23
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	af 93       	push	r26
     3e6:	bf 93       	push	r27
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     3ec:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <tc_tcc0_ccc_callback>
     3f0:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <tc_tcc0_ccc_callback+0x1>
     3f4:	30 97       	sbiw	r30, 0x00	; 0
     3f6:	09 f0       	breq	.+2      	; 0x3fa <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     3f8:	19 95       	eicall
	}
}
     3fa:	ff 91       	pop	r31
     3fc:	ef 91       	pop	r30
     3fe:	bf 91       	pop	r27
     400:	af 91       	pop	r26
     402:	9f 91       	pop	r25
     404:	8f 91       	pop	r24
     406:	7f 91       	pop	r23
     408:	6f 91       	pop	r22
     40a:	5f 91       	pop	r21
     40c:	4f 91       	pop	r20
     40e:	3f 91       	pop	r19
     410:	2f 91       	pop	r18
     412:	0f 90       	pop	r0
     414:	0b be       	out	0x3b, r0	; 59
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	0b b6       	in	r0, 0x3b	; 59
     42c:	0f 92       	push	r0
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	4f 93       	push	r20
     434:	5f 93       	push	r21
     436:	6f 93       	push	r22
     438:	7f 93       	push	r23
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	af 93       	push	r26
     440:	bf 93       	push	r27
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     446:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <tc_tcc0_ccd_callback>
     44a:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <tc_tcc0_ccd_callback+0x1>
     44e:	30 97       	sbiw	r30, 0x00	; 0
     450:	09 f0       	breq	.+2      	; 0x454 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     452:	19 95       	eicall
	}
}
     454:	ff 91       	pop	r31
     456:	ef 91       	pop	r30
     458:	bf 91       	pop	r27
     45a:	af 91       	pop	r26
     45c:	9f 91       	pop	r25
     45e:	8f 91       	pop	r24
     460:	7f 91       	pop	r23
     462:	6f 91       	pop	r22
     464:	5f 91       	pop	r21
     466:	4f 91       	pop	r20
     468:	3f 91       	pop	r19
     46a:	2f 91       	pop	r18
     46c:	0f 90       	pop	r0
     46e:	0b be       	out	0x3b, r0	; 59
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	0b b6       	in	r0, 0x3b	; 59
     486:	0f 92       	push	r0
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	6f 93       	push	r22
     492:	7f 93       	push	r23
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     4a0:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <tc_tcc1_ovf_callback>
     4a4:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <tc_tcc1_ovf_callback+0x1>
     4a8:	30 97       	sbiw	r30, 0x00	; 0
     4aa:	09 f0       	breq	.+2      	; 0x4ae <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     4ac:	19 95       	eicall
	}
}
     4ae:	ff 91       	pop	r31
     4b0:	ef 91       	pop	r30
     4b2:	bf 91       	pop	r27
     4b4:	af 91       	pop	r26
     4b6:	9f 91       	pop	r25
     4b8:	8f 91       	pop	r24
     4ba:	7f 91       	pop	r23
     4bc:	6f 91       	pop	r22
     4be:	5f 91       	pop	r21
     4c0:	4f 91       	pop	r20
     4c2:	3f 91       	pop	r19
     4c4:	2f 91       	pop	r18
     4c6:	0f 90       	pop	r0
     4c8:	0b be       	out	0x3b, r0	; 59
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     4d4:	1f 92       	push	r1
     4d6:	0f 92       	push	r0
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	0f 92       	push	r0
     4dc:	11 24       	eor	r1, r1
     4de:	0b b6       	in	r0, 0x3b	; 59
     4e0:	0f 92       	push	r0
     4e2:	2f 93       	push	r18
     4e4:	3f 93       	push	r19
     4e6:	4f 93       	push	r20
     4e8:	5f 93       	push	r21
     4ea:	6f 93       	push	r22
     4ec:	7f 93       	push	r23
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	af 93       	push	r26
     4f4:	bf 93       	push	r27
     4f6:	ef 93       	push	r30
     4f8:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     4fa:	e0 91 04 21 	lds	r30, 0x2104	; 0x802104 <tc_tcc1_err_callback>
     4fe:	f0 91 05 21 	lds	r31, 0x2105	; 0x802105 <tc_tcc1_err_callback+0x1>
     502:	30 97       	sbiw	r30, 0x00	; 0
     504:	09 f0       	breq	.+2      	; 0x508 <__vector_21+0x34>
		tc_tcc1_err_callback();
     506:	19 95       	eicall
	}
}
     508:	ff 91       	pop	r31
     50a:	ef 91       	pop	r30
     50c:	bf 91       	pop	r27
     50e:	af 91       	pop	r26
     510:	9f 91       	pop	r25
     512:	8f 91       	pop	r24
     514:	7f 91       	pop	r23
     516:	6f 91       	pop	r22
     518:	5f 91       	pop	r21
     51a:	4f 91       	pop	r20
     51c:	3f 91       	pop	r19
     51e:	2f 91       	pop	r18
     520:	0f 90       	pop	r0
     522:	0b be       	out	0x3b, r0	; 59
     524:	0f 90       	pop	r0
     526:	0f be       	out	0x3f, r0	; 63
     528:	0f 90       	pop	r0
     52a:	1f 90       	pop	r1
     52c:	18 95       	reti

0000052e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	0f 92       	push	r0
     536:	11 24       	eor	r1, r1
     538:	0b b6       	in	r0, 0x3b	; 59
     53a:	0f 92       	push	r0
     53c:	2f 93       	push	r18
     53e:	3f 93       	push	r19
     540:	4f 93       	push	r20
     542:	5f 93       	push	r21
     544:	6f 93       	push	r22
     546:	7f 93       	push	r23
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	af 93       	push	r26
     54e:	bf 93       	push	r27
     550:	ef 93       	push	r30
     552:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     554:	e0 91 02 21 	lds	r30, 0x2102	; 0x802102 <tc_tcc1_cca_callback>
     558:	f0 91 03 21 	lds	r31, 0x2103	; 0x802103 <tc_tcc1_cca_callback+0x1>
     55c:	30 97       	sbiw	r30, 0x00	; 0
     55e:	09 f0       	breq	.+2      	; 0x562 <__vector_22+0x34>
		tc_tcc1_cca_callback();
     560:	19 95       	eicall
	}
}
     562:	ff 91       	pop	r31
     564:	ef 91       	pop	r30
     566:	bf 91       	pop	r27
     568:	af 91       	pop	r26
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	7f 91       	pop	r23
     570:	6f 91       	pop	r22
     572:	5f 91       	pop	r21
     574:	4f 91       	pop	r20
     576:	3f 91       	pop	r19
     578:	2f 91       	pop	r18
     57a:	0f 90       	pop	r0
     57c:	0b be       	out	0x3b, r0	; 59
     57e:	0f 90       	pop	r0
     580:	0f be       	out	0x3f, r0	; 63
     582:	0f 90       	pop	r0
     584:	1f 90       	pop	r1
     586:	18 95       	reti

00000588 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     588:	1f 92       	push	r1
     58a:	0f 92       	push	r0
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	0f 92       	push	r0
     590:	11 24       	eor	r1, r1
     592:	0b b6       	in	r0, 0x3b	; 59
     594:	0f 92       	push	r0
     596:	2f 93       	push	r18
     598:	3f 93       	push	r19
     59a:	4f 93       	push	r20
     59c:	5f 93       	push	r21
     59e:	6f 93       	push	r22
     5a0:	7f 93       	push	r23
     5a2:	8f 93       	push	r24
     5a4:	9f 93       	push	r25
     5a6:	af 93       	push	r26
     5a8:	bf 93       	push	r27
     5aa:	ef 93       	push	r30
     5ac:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     5ae:	e0 91 00 21 	lds	r30, 0x2100	; 0x802100 <tc_tcc1_ccb_callback>
     5b2:	f0 91 01 21 	lds	r31, 0x2101	; 0x802101 <tc_tcc1_ccb_callback+0x1>
     5b6:	30 97       	sbiw	r30, 0x00	; 0
     5b8:	09 f0       	breq	.+2      	; 0x5bc <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     5ba:	19 95       	eicall
	}
}
     5bc:	ff 91       	pop	r31
     5be:	ef 91       	pop	r30
     5c0:	bf 91       	pop	r27
     5c2:	af 91       	pop	r26
     5c4:	9f 91       	pop	r25
     5c6:	8f 91       	pop	r24
     5c8:	7f 91       	pop	r23
     5ca:	6f 91       	pop	r22
     5cc:	5f 91       	pop	r21
     5ce:	4f 91       	pop	r20
     5d0:	3f 91       	pop	r19
     5d2:	2f 91       	pop	r18
     5d4:	0f 90       	pop	r0
     5d6:	0b be       	out	0x3b, r0	; 59
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	0b b6       	in	r0, 0x3b	; 59
     5ee:	0f 92       	push	r0
     5f0:	2f 93       	push	r18
     5f2:	3f 93       	push	r19
     5f4:	4f 93       	push	r20
     5f6:	5f 93       	push	r21
     5f8:	6f 93       	push	r22
     5fa:	7f 93       	push	r23
     5fc:	8f 93       	push	r24
     5fe:	9f 93       	push	r25
     600:	af 93       	push	r26
     602:	bf 93       	push	r27
     604:	ef 93       	push	r30
     606:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     608:	e0 91 fe 20 	lds	r30, 0x20FE	; 0x8020fe <tc_tcd0_ovf_callback>
     60c:	f0 91 ff 20 	lds	r31, 0x20FF	; 0x8020ff <tc_tcd0_ovf_callback+0x1>
     610:	30 97       	sbiw	r30, 0x00	; 0
     612:	09 f0       	breq	.+2      	; 0x616 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     614:	19 95       	eicall
	}
}
     616:	ff 91       	pop	r31
     618:	ef 91       	pop	r30
     61a:	bf 91       	pop	r27
     61c:	af 91       	pop	r26
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	7f 91       	pop	r23
     624:	6f 91       	pop	r22
     626:	5f 91       	pop	r21
     628:	4f 91       	pop	r20
     62a:	3f 91       	pop	r19
     62c:	2f 91       	pop	r18
     62e:	0f 90       	pop	r0
     630:	0b be       	out	0x3b, r0	; 59
     632:	0f 90       	pop	r0
     634:	0f be       	out	0x3f, r0	; 63
     636:	0f 90       	pop	r0
     638:	1f 90       	pop	r1
     63a:	18 95       	reti

0000063c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     63c:	1f 92       	push	r1
     63e:	0f 92       	push	r0
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	0f 92       	push	r0
     644:	11 24       	eor	r1, r1
     646:	0b b6       	in	r0, 0x3b	; 59
     648:	0f 92       	push	r0
     64a:	2f 93       	push	r18
     64c:	3f 93       	push	r19
     64e:	4f 93       	push	r20
     650:	5f 93       	push	r21
     652:	6f 93       	push	r22
     654:	7f 93       	push	r23
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
     65a:	af 93       	push	r26
     65c:	bf 93       	push	r27
     65e:	ef 93       	push	r30
     660:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     662:	e0 91 fc 20 	lds	r30, 0x20FC	; 0x8020fc <tc_tcd0_err_callback>
     666:	f0 91 fd 20 	lds	r31, 0x20FD	; 0x8020fd <tc_tcd0_err_callback+0x1>
     66a:	30 97       	sbiw	r30, 0x00	; 0
     66c:	09 f0       	breq	.+2      	; 0x670 <__vector_78+0x34>
		tc_tcd0_err_callback();
     66e:	19 95       	eicall
	}
}
     670:	ff 91       	pop	r31
     672:	ef 91       	pop	r30
     674:	bf 91       	pop	r27
     676:	af 91       	pop	r26
     678:	9f 91       	pop	r25
     67a:	8f 91       	pop	r24
     67c:	7f 91       	pop	r23
     67e:	6f 91       	pop	r22
     680:	5f 91       	pop	r21
     682:	4f 91       	pop	r20
     684:	3f 91       	pop	r19
     686:	2f 91       	pop	r18
     688:	0f 90       	pop	r0
     68a:	0b be       	out	0x3b, r0	; 59
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	0f 90       	pop	r0
     692:	1f 90       	pop	r1
     694:	18 95       	reti

00000696 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     696:	1f 92       	push	r1
     698:	0f 92       	push	r0
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	0b b6       	in	r0, 0x3b	; 59
     6a2:	0f 92       	push	r0
     6a4:	2f 93       	push	r18
     6a6:	3f 93       	push	r19
     6a8:	4f 93       	push	r20
     6aa:	5f 93       	push	r21
     6ac:	6f 93       	push	r22
     6ae:	7f 93       	push	r23
     6b0:	8f 93       	push	r24
     6b2:	9f 93       	push	r25
     6b4:	af 93       	push	r26
     6b6:	bf 93       	push	r27
     6b8:	ef 93       	push	r30
     6ba:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     6bc:	e0 91 fa 20 	lds	r30, 0x20FA	; 0x8020fa <tc_tcd0_cca_callback>
     6c0:	f0 91 fb 20 	lds	r31, 0x20FB	; 0x8020fb <tc_tcd0_cca_callback+0x1>
     6c4:	30 97       	sbiw	r30, 0x00	; 0
     6c6:	09 f0       	breq	.+2      	; 0x6ca <__vector_79+0x34>
		tc_tcd0_cca_callback();
     6c8:	19 95       	eicall
	}
}
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	bf 91       	pop	r27
     6d0:	af 91       	pop	r26
     6d2:	9f 91       	pop	r25
     6d4:	8f 91       	pop	r24
     6d6:	7f 91       	pop	r23
     6d8:	6f 91       	pop	r22
     6da:	5f 91       	pop	r21
     6dc:	4f 91       	pop	r20
     6de:	3f 91       	pop	r19
     6e0:	2f 91       	pop	r18
     6e2:	0f 90       	pop	r0
     6e4:	0b be       	out	0x3b, r0	; 59
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	11 24       	eor	r1, r1
     6fa:	0b b6       	in	r0, 0x3b	; 59
     6fc:	0f 92       	push	r0
     6fe:	2f 93       	push	r18
     700:	3f 93       	push	r19
     702:	4f 93       	push	r20
     704:	5f 93       	push	r21
     706:	6f 93       	push	r22
     708:	7f 93       	push	r23
     70a:	8f 93       	push	r24
     70c:	9f 93       	push	r25
     70e:	af 93       	push	r26
     710:	bf 93       	push	r27
     712:	ef 93       	push	r30
     714:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     716:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <tc_tcd0_ccb_callback>
     71a:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <tc_tcd0_ccb_callback+0x1>
     71e:	30 97       	sbiw	r30, 0x00	; 0
     720:	09 f0       	breq	.+2      	; 0x724 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     722:	19 95       	eicall
	}
}
     724:	ff 91       	pop	r31
     726:	ef 91       	pop	r30
     728:	bf 91       	pop	r27
     72a:	af 91       	pop	r26
     72c:	9f 91       	pop	r25
     72e:	8f 91       	pop	r24
     730:	7f 91       	pop	r23
     732:	6f 91       	pop	r22
     734:	5f 91       	pop	r21
     736:	4f 91       	pop	r20
     738:	3f 91       	pop	r19
     73a:	2f 91       	pop	r18
     73c:	0f 90       	pop	r0
     73e:	0b be       	out	0x3b, r0	; 59
     740:	0f 90       	pop	r0
     742:	0f be       	out	0x3f, r0	; 63
     744:	0f 90       	pop	r0
     746:	1f 90       	pop	r1
     748:	18 95       	reti

0000074a <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     74a:	1f 92       	push	r1
     74c:	0f 92       	push	r0
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	0f 92       	push	r0
     752:	11 24       	eor	r1, r1
     754:	0b b6       	in	r0, 0x3b	; 59
     756:	0f 92       	push	r0
     758:	2f 93       	push	r18
     75a:	3f 93       	push	r19
     75c:	4f 93       	push	r20
     75e:	5f 93       	push	r21
     760:	6f 93       	push	r22
     762:	7f 93       	push	r23
     764:	8f 93       	push	r24
     766:	9f 93       	push	r25
     768:	af 93       	push	r26
     76a:	bf 93       	push	r27
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     770:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <tc_tcd0_ccc_callback>
     774:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <tc_tcd0_ccc_callback+0x1>
     778:	30 97       	sbiw	r30, 0x00	; 0
     77a:	09 f0       	breq	.+2      	; 0x77e <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     77c:	19 95       	eicall
	}
}
     77e:	ff 91       	pop	r31
     780:	ef 91       	pop	r30
     782:	bf 91       	pop	r27
     784:	af 91       	pop	r26
     786:	9f 91       	pop	r25
     788:	8f 91       	pop	r24
     78a:	7f 91       	pop	r23
     78c:	6f 91       	pop	r22
     78e:	5f 91       	pop	r21
     790:	4f 91       	pop	r20
     792:	3f 91       	pop	r19
     794:	2f 91       	pop	r18
     796:	0f 90       	pop	r0
     798:	0b be       	out	0x3b, r0	; 59
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	0b b6       	in	r0, 0x3b	; 59
     7b0:	0f 92       	push	r0
     7b2:	2f 93       	push	r18
     7b4:	3f 93       	push	r19
     7b6:	4f 93       	push	r20
     7b8:	5f 93       	push	r21
     7ba:	6f 93       	push	r22
     7bc:	7f 93       	push	r23
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
     7c2:	af 93       	push	r26
     7c4:	bf 93       	push	r27
     7c6:	ef 93       	push	r30
     7c8:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     7ca:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <tc_tcd0_ccd_callback>
     7ce:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <tc_tcd0_ccd_callback+0x1>
     7d2:	30 97       	sbiw	r30, 0x00	; 0
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     7d6:	19 95       	eicall
	}
}
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	0f 90       	pop	r0
     7f2:	0b be       	out	0x3b, r0	; 59
     7f4:	0f 90       	pop	r0
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	0f 90       	pop	r0
     7fa:	1f 90       	pop	r1
     7fc:	18 95       	reti

000007fe <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     7fe:	1f 92       	push	r1
     800:	0f 92       	push	r0
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	0f 92       	push	r0
     806:	11 24       	eor	r1, r1
     808:	0b b6       	in	r0, 0x3b	; 59
     80a:	0f 92       	push	r0
     80c:	2f 93       	push	r18
     80e:	3f 93       	push	r19
     810:	4f 93       	push	r20
     812:	5f 93       	push	r21
     814:	6f 93       	push	r22
     816:	7f 93       	push	r23
     818:	8f 93       	push	r24
     81a:	9f 93       	push	r25
     81c:	af 93       	push	r26
     81e:	bf 93       	push	r27
     820:	ef 93       	push	r30
     822:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     824:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <tc_tcd1_ovf_callback>
     828:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <tc_tcd1_ovf_callback+0x1>
     82c:	30 97       	sbiw	r30, 0x00	; 0
     82e:	09 f0       	breq	.+2      	; 0x832 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
     830:	19 95       	eicall
	}
}
     832:	ff 91       	pop	r31
     834:	ef 91       	pop	r30
     836:	bf 91       	pop	r27
     838:	af 91       	pop	r26
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	7f 91       	pop	r23
     840:	6f 91       	pop	r22
     842:	5f 91       	pop	r21
     844:	4f 91       	pop	r20
     846:	3f 91       	pop	r19
     848:	2f 91       	pop	r18
     84a:	0f 90       	pop	r0
     84c:	0b be       	out	0x3b, r0	; 59
     84e:	0f 90       	pop	r0
     850:	0f be       	out	0x3f, r0	; 63
     852:	0f 90       	pop	r0
     854:	1f 90       	pop	r1
     856:	18 95       	reti

00000858 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     858:	1f 92       	push	r1
     85a:	0f 92       	push	r0
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	0f 92       	push	r0
     860:	11 24       	eor	r1, r1
     862:	0b b6       	in	r0, 0x3b	; 59
     864:	0f 92       	push	r0
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     87e:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <tc_tcd1_err_callback>
     882:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <tc_tcd1_err_callback+0x1>
     886:	30 97       	sbiw	r30, 0x00	; 0
     888:	09 f0       	breq	.+2      	; 0x88c <__vector_84+0x34>
		tc_tcd1_err_callback();
     88a:	19 95       	eicall
	}
}
     88c:	ff 91       	pop	r31
     88e:	ef 91       	pop	r30
     890:	bf 91       	pop	r27
     892:	af 91       	pop	r26
     894:	9f 91       	pop	r25
     896:	8f 91       	pop	r24
     898:	7f 91       	pop	r23
     89a:	6f 91       	pop	r22
     89c:	5f 91       	pop	r21
     89e:	4f 91       	pop	r20
     8a0:	3f 91       	pop	r19
     8a2:	2f 91       	pop	r18
     8a4:	0f 90       	pop	r0
     8a6:	0b be       	out	0x3b, r0	; 59
     8a8:	0f 90       	pop	r0
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	0f 90       	pop	r0
     8ae:	1f 90       	pop	r1
     8b0:	18 95       	reti

000008b2 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     8b2:	1f 92       	push	r1
     8b4:	0f 92       	push	r0
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	0b b6       	in	r0, 0x3b	; 59
     8be:	0f 92       	push	r0
     8c0:	2f 93       	push	r18
     8c2:	3f 93       	push	r19
     8c4:	4f 93       	push	r20
     8c6:	5f 93       	push	r21
     8c8:	6f 93       	push	r22
     8ca:	7f 93       	push	r23
     8cc:	8f 93       	push	r24
     8ce:	9f 93       	push	r25
     8d0:	af 93       	push	r26
     8d2:	bf 93       	push	r27
     8d4:	ef 93       	push	r30
     8d6:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     8d8:	e0 91 ee 20 	lds	r30, 0x20EE	; 0x8020ee <tc_tcd1_cca_callback>
     8dc:	f0 91 ef 20 	lds	r31, 0x20EF	; 0x8020ef <tc_tcd1_cca_callback+0x1>
     8e0:	30 97       	sbiw	r30, 0x00	; 0
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <__vector_85+0x34>
		tc_tcd1_cca_callback();
     8e4:	19 95       	eicall
	}
}
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0b be       	out	0x3b, r0	; 59
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	0b b6       	in	r0, 0x3b	; 59
     918:	0f 92       	push	r0
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     932:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <tc_tcd1_ccb_callback>
     936:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <tc_tcd1_ccb_callback+0x1>
     93a:	30 97       	sbiw	r30, 0x00	; 0
     93c:	09 f0       	breq	.+2      	; 0x940 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
     93e:	19 95       	eicall
	}
}
     940:	ff 91       	pop	r31
     942:	ef 91       	pop	r30
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	0b be       	out	0x3b, r0	; 59
     95c:	0f 90       	pop	r0
     95e:	0f be       	out	0x3f, r0	; 63
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     966:	1f 92       	push	r1
     968:	0f 92       	push	r0
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	0f 92       	push	r0
     96e:	11 24       	eor	r1, r1
     970:	0b b6       	in	r0, 0x3b	; 59
     972:	0f 92       	push	r0
     974:	2f 93       	push	r18
     976:	3f 93       	push	r19
     978:	4f 93       	push	r20
     97a:	5f 93       	push	r21
     97c:	6f 93       	push	r22
     97e:	7f 93       	push	r23
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	af 93       	push	r26
     986:	bf 93       	push	r27
     988:	ef 93       	push	r30
     98a:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     98c:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <tc_tce0_ovf_callback>
     990:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <tc_tce0_ovf_callback+0x1>
     994:	30 97       	sbiw	r30, 0x00	; 0
     996:	09 f0       	breq	.+2      	; 0x99a <__vector_47+0x34>
		tc_tce0_ovf_callback();
     998:	19 95       	eicall
	}
}
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0b be       	out	0x3b, r0	; 59
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	0f 90       	pop	r0
     9bc:	1f 90       	pop	r1
     9be:	18 95       	reti

000009c0 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     9c0:	1f 92       	push	r1
     9c2:	0f 92       	push	r0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	0f 92       	push	r0
     9c8:	11 24       	eor	r1, r1
     9ca:	0b b6       	in	r0, 0x3b	; 59
     9cc:	0f 92       	push	r0
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	4f 93       	push	r20
     9d4:	5f 93       	push	r21
     9d6:	6f 93       	push	r22
     9d8:	7f 93       	push	r23
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     9e6:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <tc_tce0_err_callback>
     9ea:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <tc_tce0_err_callback+0x1>
     9ee:	30 97       	sbiw	r30, 0x00	; 0
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <__vector_48+0x34>
		tc_tce0_err_callback();
     9f2:	19 95       	eicall
	}
}
     9f4:	ff 91       	pop	r31
     9f6:	ef 91       	pop	r30
     9f8:	bf 91       	pop	r27
     9fa:	af 91       	pop	r26
     9fc:	9f 91       	pop	r25
     9fe:	8f 91       	pop	r24
     a00:	7f 91       	pop	r23
     a02:	6f 91       	pop	r22
     a04:	5f 91       	pop	r21
     a06:	4f 91       	pop	r20
     a08:	3f 91       	pop	r19
     a0a:	2f 91       	pop	r18
     a0c:	0f 90       	pop	r0
     a0e:	0b be       	out	0x3b, r0	; 59
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     a1a:	1f 92       	push	r1
     a1c:	0f 92       	push	r0
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	0f 92       	push	r0
     a22:	11 24       	eor	r1, r1
     a24:	0b b6       	in	r0, 0x3b	; 59
     a26:	0f 92       	push	r0
     a28:	2f 93       	push	r18
     a2a:	3f 93       	push	r19
     a2c:	4f 93       	push	r20
     a2e:	5f 93       	push	r21
     a30:	6f 93       	push	r22
     a32:	7f 93       	push	r23
     a34:	8f 93       	push	r24
     a36:	9f 93       	push	r25
     a38:	af 93       	push	r26
     a3a:	bf 93       	push	r27
     a3c:	ef 93       	push	r30
     a3e:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     a40:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <tc_tce0_cca_callback>
     a44:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <tc_tce0_cca_callback+0x1>
     a48:	30 97       	sbiw	r30, 0x00	; 0
     a4a:	09 f0       	breq	.+2      	; 0xa4e <__vector_49+0x34>
		tc_tce0_cca_callback();
     a4c:	19 95       	eicall
	}
}
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	0b be       	out	0x3b, r0	; 59
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	0b b6       	in	r0, 0x3b	; 59
     a80:	0f 92       	push	r0
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	ef 93       	push	r30
     a98:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     a9a:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <tc_tce0_ccb_callback>
     a9e:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <tc_tce0_ccb_callback+0x1>
     aa2:	30 97       	sbiw	r30, 0x00	; 0
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <__vector_50+0x34>
		tc_tce0_ccb_callback();
     aa6:	19 95       	eicall
	}
}
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	bf 91       	pop	r27
     aae:	af 91       	pop	r26
     ab0:	9f 91       	pop	r25
     ab2:	8f 91       	pop	r24
     ab4:	7f 91       	pop	r23
     ab6:	6f 91       	pop	r22
     ab8:	5f 91       	pop	r21
     aba:	4f 91       	pop	r20
     abc:	3f 91       	pop	r19
     abe:	2f 91       	pop	r18
     ac0:	0f 90       	pop	r0
     ac2:	0b be       	out	0x3b, r0	; 59
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     ace:	1f 92       	push	r1
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	0b b6       	in	r0, 0x3b	; 59
     ada:	0f 92       	push	r0
     adc:	2f 93       	push	r18
     ade:	3f 93       	push	r19
     ae0:	4f 93       	push	r20
     ae2:	5f 93       	push	r21
     ae4:	6f 93       	push	r22
     ae6:	7f 93       	push	r23
     ae8:	8f 93       	push	r24
     aea:	9f 93       	push	r25
     aec:	af 93       	push	r26
     aee:	bf 93       	push	r27
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     af4:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <tc_tce0_ccc_callback>
     af8:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <tc_tce0_ccc_callback+0x1>
     afc:	30 97       	sbiw	r30, 0x00	; 0
     afe:	09 f0       	breq	.+2      	; 0xb02 <__vector_51+0x34>
		tc_tce0_ccc_callback();
     b00:	19 95       	eicall
	}
}
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	bf 91       	pop	r27
     b08:	af 91       	pop	r26
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	7f 91       	pop	r23
     b10:	6f 91       	pop	r22
     b12:	5f 91       	pop	r21
     b14:	4f 91       	pop	r20
     b16:	3f 91       	pop	r19
     b18:	2f 91       	pop	r18
     b1a:	0f 90       	pop	r0
     b1c:	0b be       	out	0x3b, r0	; 59
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti

00000b28 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     b28:	1f 92       	push	r1
     b2a:	0f 92       	push	r0
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	0f 92       	push	r0
     b30:	11 24       	eor	r1, r1
     b32:	0b b6       	in	r0, 0x3b	; 59
     b34:	0f 92       	push	r0
     b36:	2f 93       	push	r18
     b38:	3f 93       	push	r19
     b3a:	4f 93       	push	r20
     b3c:	5f 93       	push	r21
     b3e:	6f 93       	push	r22
     b40:	7f 93       	push	r23
     b42:	8f 93       	push	r24
     b44:	9f 93       	push	r25
     b46:	af 93       	push	r26
     b48:	bf 93       	push	r27
     b4a:	ef 93       	push	r30
     b4c:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     b4e:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <tc_tce0_ccd_callback>
     b52:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <tc_tce0_ccd_callback+0x1>
     b56:	30 97       	sbiw	r30, 0x00	; 0
     b58:	09 f0       	breq	.+2      	; 0xb5c <__vector_52+0x34>
		tc_tce0_ccd_callback();
     b5a:	19 95       	eicall
	}
}
     b5c:	ff 91       	pop	r31
     b5e:	ef 91       	pop	r30
     b60:	bf 91       	pop	r27
     b62:	af 91       	pop	r26
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	7f 91       	pop	r23
     b6a:	6f 91       	pop	r22
     b6c:	5f 91       	pop	r21
     b6e:	4f 91       	pop	r20
     b70:	3f 91       	pop	r19
     b72:	2f 91       	pop	r18
     b74:	0f 90       	pop	r0
     b76:	0b be       	out	0x3b, r0	; 59
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	0f 92       	push	r0
     b8a:	11 24       	eor	r1, r1
     b8c:	0b b6       	in	r0, 0x3b	; 59
     b8e:	0f 92       	push	r0
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	4f 93       	push	r20
     b96:	5f 93       	push	r21
     b98:	6f 93       	push	r22
     b9a:	7f 93       	push	r23
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
     ba4:	ef 93       	push	r30
     ba6:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
     ba8:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <tc_tce1_ovf_callback>
     bac:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <tc_tce1_ovf_callback+0x1>
     bb0:	30 97       	sbiw	r30, 0x00	; 0
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <__vector_53+0x34>
		tc_tce1_ovf_callback();
     bb4:	19 95       	eicall
	}
}
     bb6:	ff 91       	pop	r31
     bb8:	ef 91       	pop	r30
     bba:	bf 91       	pop	r27
     bbc:	af 91       	pop	r26
     bbe:	9f 91       	pop	r25
     bc0:	8f 91       	pop	r24
     bc2:	7f 91       	pop	r23
     bc4:	6f 91       	pop	r22
     bc6:	5f 91       	pop	r21
     bc8:	4f 91       	pop	r20
     bca:	3f 91       	pop	r19
     bcc:	2f 91       	pop	r18
     bce:	0f 90       	pop	r0
     bd0:	0b be       	out	0x3b, r0	; 59
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	0f 90       	pop	r0
     bd8:	1f 90       	pop	r1
     bda:	18 95       	reti

00000bdc <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	0b b6       	in	r0, 0x3b	; 59
     be8:	0f 92       	push	r0
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
     c02:	e0 91 dc 20 	lds	r30, 0x20DC	; 0x8020dc <tc_tce1_err_callback>
     c06:	f0 91 dd 20 	lds	r31, 0x20DD	; 0x8020dd <tc_tce1_err_callback+0x1>
     c0a:	30 97       	sbiw	r30, 0x00	; 0
     c0c:	09 f0       	breq	.+2      	; 0xc10 <__vector_54+0x34>
		tc_tce1_err_callback();
     c0e:	19 95       	eicall
	}
}
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	7f 91       	pop	r23
     c1e:	6f 91       	pop	r22
     c20:	5f 91       	pop	r21
     c22:	4f 91       	pop	r20
     c24:	3f 91       	pop	r19
     c26:	2f 91       	pop	r18
     c28:	0f 90       	pop	r0
     c2a:	0b be       	out	0x3b, r0	; 59
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	0b b6       	in	r0, 0x3b	; 59
     c42:	0f 92       	push	r0
     c44:	2f 93       	push	r18
     c46:	3f 93       	push	r19
     c48:	4f 93       	push	r20
     c4a:	5f 93       	push	r21
     c4c:	6f 93       	push	r22
     c4e:	7f 93       	push	r23
     c50:	8f 93       	push	r24
     c52:	9f 93       	push	r25
     c54:	af 93       	push	r26
     c56:	bf 93       	push	r27
     c58:	ef 93       	push	r30
     c5a:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
     c5c:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <tc_tce1_cca_callback>
     c60:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <tc_tce1_cca_callback+0x1>
     c64:	30 97       	sbiw	r30, 0x00	; 0
     c66:	09 f0       	breq	.+2      	; 0xc6a <__vector_55+0x34>
		tc_tce1_cca_callback();
     c68:	19 95       	eicall
	}
}
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	bf 91       	pop	r27
     c70:	af 91       	pop	r26
     c72:	9f 91       	pop	r25
     c74:	8f 91       	pop	r24
     c76:	7f 91       	pop	r23
     c78:	6f 91       	pop	r22
     c7a:	5f 91       	pop	r21
     c7c:	4f 91       	pop	r20
     c7e:	3f 91       	pop	r19
     c80:	2f 91       	pop	r18
     c82:	0f 90       	pop	r0
     c84:	0b be       	out	0x3b, r0	; 59
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	0b b6       	in	r0, 0x3b	; 59
     c9c:	0f 92       	push	r0
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
     cb6:	e0 91 d8 20 	lds	r30, 0x20D8	; 0x8020d8 <tc_tce1_ccb_callback>
     cba:	f0 91 d9 20 	lds	r31, 0x20D9	; 0x8020d9 <tc_tce1_ccb_callback+0x1>
     cbe:	30 97       	sbiw	r30, 0x00	; 0
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <__vector_56+0x34>
		tc_tce1_ccb_callback();
     cc2:	19 95       	eicall
	}
}
     cc4:	ff 91       	pop	r31
     cc6:	ef 91       	pop	r30
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	7f 91       	pop	r23
     cd2:	6f 91       	pop	r22
     cd4:	5f 91       	pop	r21
     cd6:	4f 91       	pop	r20
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	0b be       	out	0x3b, r0	; 59
     ce0:	0f 90       	pop	r0
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	0f 90       	pop	r0
     ce6:	1f 90       	pop	r1
     ce8:	18 95       	reti

00000cea <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	0b b6       	in	r0, 0x3b	; 59
     cf6:	0f 92       	push	r0
     cf8:	2f 93       	push	r18
     cfa:	3f 93       	push	r19
     cfc:	4f 93       	push	r20
     cfe:	5f 93       	push	r21
     d00:	6f 93       	push	r22
     d02:	7f 93       	push	r23
     d04:	8f 93       	push	r24
     d06:	9f 93       	push	r25
     d08:	af 93       	push	r26
     d0a:	bf 93       	push	r27
     d0c:	ef 93       	push	r30
     d0e:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
     d10:	e0 91 d6 20 	lds	r30, 0x20D6	; 0x8020d6 <tc_tcf0_ovf_callback>
     d14:	f0 91 d7 20 	lds	r31, 0x20D7	; 0x8020d7 <tc_tcf0_ovf_callback+0x1>
     d18:	30 97       	sbiw	r30, 0x00	; 0
     d1a:	09 f0       	breq	.+2      	; 0xd1e <__vector_108+0x34>
		tc_tcf0_ovf_callback();
     d1c:	19 95       	eicall
	}
}
     d1e:	ff 91       	pop	r31
     d20:	ef 91       	pop	r30
     d22:	bf 91       	pop	r27
     d24:	af 91       	pop	r26
     d26:	9f 91       	pop	r25
     d28:	8f 91       	pop	r24
     d2a:	7f 91       	pop	r23
     d2c:	6f 91       	pop	r22
     d2e:	5f 91       	pop	r21
     d30:	4f 91       	pop	r20
     d32:	3f 91       	pop	r19
     d34:	2f 91       	pop	r18
     d36:	0f 90       	pop	r0
     d38:	0b be       	out	0x3b, r0	; 59
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
     d44:	1f 92       	push	r1
     d46:	0f 92       	push	r0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	0b b6       	in	r0, 0x3b	; 59
     d50:	0f 92       	push	r0
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
     d6a:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <tc_tcf0_err_callback>
     d6e:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <tc_tcf0_err_callback+0x1>
     d72:	30 97       	sbiw	r30, 0x00	; 0
     d74:	09 f0       	breq	.+2      	; 0xd78 <__vector_109+0x34>
		tc_tcf0_err_callback();
     d76:	19 95       	eicall
	}
}
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	bf 91       	pop	r27
     d7e:	af 91       	pop	r26
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	7f 91       	pop	r23
     d86:	6f 91       	pop	r22
     d88:	5f 91       	pop	r21
     d8a:	4f 91       	pop	r20
     d8c:	3f 91       	pop	r19
     d8e:	2f 91       	pop	r18
     d90:	0f 90       	pop	r0
     d92:	0b be       	out	0x3b, r0	; 59
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti

00000d9e <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	0b b6       	in	r0, 0x3b	; 59
     daa:	0f 92       	push	r0
     dac:	2f 93       	push	r18
     dae:	3f 93       	push	r19
     db0:	4f 93       	push	r20
     db2:	5f 93       	push	r21
     db4:	6f 93       	push	r22
     db6:	7f 93       	push	r23
     db8:	8f 93       	push	r24
     dba:	9f 93       	push	r25
     dbc:	af 93       	push	r26
     dbe:	bf 93       	push	r27
     dc0:	ef 93       	push	r30
     dc2:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
     dc4:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <tc_tcf0_cca_callback>
     dc8:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <tc_tcf0_cca_callback+0x1>
     dcc:	30 97       	sbiw	r30, 0x00	; 0
     dce:	09 f0       	breq	.+2      	; 0xdd2 <__vector_110+0x34>
		tc_tcf0_cca_callback();
     dd0:	19 95       	eicall
	}
}
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	0f 90       	pop	r0
     dec:	0b be       	out	0x3b, r0	; 59
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	0b b6       	in	r0, 0x3b	; 59
     e04:	0f 92       	push	r0
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	4f 93       	push	r20
     e0c:	5f 93       	push	r21
     e0e:	6f 93       	push	r22
     e10:	7f 93       	push	r23
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	ef 93       	push	r30
     e1c:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
     e1e:	e0 91 d0 20 	lds	r30, 0x20D0	; 0x8020d0 <tc_tcf0_ccb_callback>
     e22:	f0 91 d1 20 	lds	r31, 0x20D1	; 0x8020d1 <tc_tcf0_ccb_callback+0x1>
     e26:	30 97       	sbiw	r30, 0x00	; 0
     e28:	09 f0       	breq	.+2      	; 0xe2c <__vector_111+0x34>
		tc_tcf0_ccb_callback();
     e2a:	19 95       	eicall
	}
}
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	0b be       	out	0x3b, r0	; 59
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti

00000e52 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	0b b6       	in	r0, 0x3b	; 59
     e5e:	0f 92       	push	r0
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
     e78:	e0 91 ce 20 	lds	r30, 0x20CE	; 0x8020ce <tc_tcf0_ccc_callback>
     e7c:	f0 91 cf 20 	lds	r31, 0x20CF	; 0x8020cf <tc_tcf0_ccc_callback+0x1>
     e80:	30 97       	sbiw	r30, 0x00	; 0
     e82:	09 f0       	breq	.+2      	; 0xe86 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
     e84:	19 95       	eicall
	}
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0b be       	out	0x3b, r0	; 59
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	0f 90       	pop	r0
     ea8:	1f 90       	pop	r1
     eaa:	18 95       	reti

00000eac <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
     eac:	1f 92       	push	r1
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	0f 92       	push	r0
     eb4:	11 24       	eor	r1, r1
     eb6:	0b b6       	in	r0, 0x3b	; 59
     eb8:	0f 92       	push	r0
     eba:	2f 93       	push	r18
     ebc:	3f 93       	push	r19
     ebe:	4f 93       	push	r20
     ec0:	5f 93       	push	r21
     ec2:	6f 93       	push	r22
     ec4:	7f 93       	push	r23
     ec6:	8f 93       	push	r24
     ec8:	9f 93       	push	r25
     eca:	af 93       	push	r26
     ecc:	bf 93       	push	r27
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
     ed2:	e0 91 cc 20 	lds	r30, 0x20CC	; 0x8020cc <__data_end>
     ed6:	f0 91 cd 20 	lds	r31, 0x20CD	; 0x8020cd <__data_end+0x1>
     eda:	30 97       	sbiw	r30, 0x00	; 0
     edc:	09 f0       	breq	.+2      	; 0xee0 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
     ede:	19 95       	eicall
	}
}
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	bf 91       	pop	r27
     ee6:	af 91       	pop	r26
     ee8:	9f 91       	pop	r25
     eea:	8f 91       	pop	r24
     eec:	7f 91       	pop	r23
     eee:	6f 91       	pop	r22
     ef0:	5f 91       	pop	r21
     ef2:	4f 91       	pop	r20
     ef4:	3f 91       	pop	r19
     ef6:	2f 91       	pop	r18
     ef8:	0f 90       	pop	r0
     efa:	0b be       	out	0x3b, r0	; 59
     efc:	0f 90       	pop	r0
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	0f 90       	pop	r0
     f02:	1f 90       	pop	r1
     f04:	18 95       	reti

00000f06 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	1f 92       	push	r1
     f0e:	1f 92       	push	r1
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f14:	2f b7       	in	r18, 0x3f	; 63
     f16:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
     f18:	f8 94       	cli
	return flags;
     f1a:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
     f1c:	28 2f       	mov	r18, r24
     f1e:	39 2f       	mov	r19, r25
     f20:	21 15       	cp	r18, r1
     f22:	88 e0       	ldi	r24, 0x08	; 8
     f24:	38 07       	cpc	r19, r24
     f26:	49 f4       	brne	.+18     	; 0xf3a <tc_enable+0x34>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	83 e0       	ldi	r24, 0x03	; 3
     f2c:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     f30:	64 e0       	ldi	r22, 0x04	; 4
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
     f38:	4f c0       	rjmp	.+158    	; 0xfd8 <tc_enable+0xd2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
     f3a:	20 34       	cpi	r18, 0x40	; 64
     f3c:	88 e0       	ldi	r24, 0x08	; 8
     f3e:	38 07       	cpc	r19, r24
     f40:	49 f4       	brne	.+18     	; 0xf54 <tc_enable+0x4e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     f42:	62 e0       	ldi	r22, 0x02	; 2
     f44:	83 e0       	ldi	r24, 0x03	; 3
     f46:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     f4a:	64 e0       	ldi	r22, 0x04	; 4
     f4c:	83 e0       	ldi	r24, 0x03	; 3
     f4e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
     f52:	42 c0       	rjmp	.+132    	; 0xfd8 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
     f54:	21 15       	cp	r18, r1
     f56:	89 e0       	ldi	r24, 0x09	; 9
     f58:	38 07       	cpc	r19, r24
     f5a:	49 f4       	brne	.+18     	; 0xf6e <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	84 e0       	ldi	r24, 0x04	; 4
     f60:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     f64:	64 e0       	ldi	r22, 0x04	; 4
     f66:	84 e0       	ldi	r24, 0x04	; 4
     f68:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
     f6c:	35 c0       	rjmp	.+106    	; 0xfd8 <tc_enable+0xd2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
     f6e:	20 34       	cpi	r18, 0x40	; 64
     f70:	89 e0       	ldi	r24, 0x09	; 9
     f72:	38 07       	cpc	r19, r24
     f74:	49 f4       	brne	.+18     	; 0xf88 <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     f76:	62 e0       	ldi	r22, 0x02	; 2
     f78:	84 e0       	ldi	r24, 0x04	; 4
     f7a:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     f7e:	64 e0       	ldi	r22, 0x04	; 4
     f80:	84 e0       	ldi	r24, 0x04	; 4
     f82:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
     f86:	28 c0       	rjmp	.+80     	; 0xfd8 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
     f88:	21 15       	cp	r18, r1
     f8a:	8a e0       	ldi	r24, 0x0A	; 10
     f8c:	38 07       	cpc	r19, r24
     f8e:	49 f4       	brne	.+18     	; 0xfa2 <tc_enable+0x9c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	85 e0       	ldi	r24, 0x05	; 5
     f94:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     f98:	64 e0       	ldi	r22, 0x04	; 4
     f9a:	85 e0       	ldi	r24, 0x05	; 5
     f9c:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
     fa0:	1b c0       	rjmp	.+54     	; 0xfd8 <tc_enable+0xd2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
     fa2:	20 34       	cpi	r18, 0x40	; 64
     fa4:	8a e0       	ldi	r24, 0x0A	; 10
     fa6:	38 07       	cpc	r19, r24
     fa8:	49 f4       	brne	.+18     	; 0xfbc <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     faa:	62 e0       	ldi	r22, 0x02	; 2
     fac:	85 e0       	ldi	r24, 0x05	; 5
     fae:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     fb2:	64 e0       	ldi	r22, 0x04	; 4
     fb4:	85 e0       	ldi	r24, 0x05	; 5
     fb6:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
     fba:	0e c0       	rjmp	.+28     	; 0xfd8 <tc_enable+0xd2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
     fbc:	21 15       	cp	r18, r1
     fbe:	3b 40       	sbci	r19, 0x0B	; 11
     fc0:	49 f4       	brne	.+18     	; 0xfd4 <tc_enable+0xce>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	86 e0       	ldi	r24, 0x06	; 6
     fc6:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     fca:	64 e0       	ldi	r22, 0x04	; 4
     fcc:	86 e0       	ldi	r24, 0x06	; 6
     fce:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sysclk_enable_module>
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <tc_enable+0xd2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fd4:	1f bf       	out	0x3f, r17	; 63
     fd6:	10 c0       	rjmp	.+32     	; 0xff8 <tc_enable+0xf2>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     fd8:	80 91 8b 23 	lds	r24, 0x238B	; 0x80238b <sleepmgr_locks+0x1>
     fdc:	8f 3f       	cpi	r24, 0xFF	; 255
     fde:	09 f4       	brne	.+2      	; 0xfe2 <tc_enable+0xdc>
     fe0:	ff cf       	rjmp	.-2      	; 0xfe0 <tc_enable+0xda>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fe2:	8f b7       	in	r24, 0x3f	; 63
     fe4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     fe6:	f8 94       	cli
	return flags;
     fe8:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     fea:	ea e8       	ldi	r30, 0x8A	; 138
     fec:	f3 e2       	ldi	r31, 0x23	; 35
     fee:	81 81       	ldd	r24, Z+1	; 0x01
     ff0:	8f 5f       	subi	r24, 0xFF	; 255
     ff2:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ff4:	9f bf       	out	0x3f, r25	; 63
     ff6:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	08 95       	ret

00001004 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	1f 92       	push	r1
    100a:	1f 92       	push	r1
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	81 11       	cpse	r24, r1
    1012:	26 c0       	rjmp	.+76     	; 0x1060 <udd_sleep_mode+0x5c>
    1014:	90 91 40 22 	lds	r25, 0x2240	; 0x802240 <udd_b_idle>
    1018:	99 23       	and	r25, r25
    101a:	f9 f0       	breq	.+62     	; 0x105a <udd_sleep_mode+0x56>
    101c:	90 91 8b 23 	lds	r25, 0x238B	; 0x80238b <sleepmgr_locks+0x1>
    1020:	91 11       	cpse	r25, r1
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <udd_sleep_mode+0x22>
    1024:	ff cf       	rjmp	.-2      	; 0x1024 <udd_sleep_mode+0x20>
    1026:	9f b7       	in	r25, 0x3f	; 63
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	f8 94       	cli
    102c:	2a 81       	ldd	r18, Y+2	; 0x02
    102e:	ea e8       	ldi	r30, 0x8A	; 138
    1030:	f3 e2       	ldi	r31, 0x23	; 35
    1032:	91 81       	ldd	r25, Z+1	; 0x01
    1034:	91 50       	subi	r25, 0x01	; 1
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	2f bf       	out	0x3f, r18	; 63
    103a:	0f c0       	rjmp	.+30     	; 0x105a <udd_sleep_mode+0x56>
    103c:	90 91 8b 23 	lds	r25, 0x238B	; 0x80238b <sleepmgr_locks+0x1>
    1040:	9f 3f       	cpi	r25, 0xFF	; 255
    1042:	09 f4       	brne	.+2      	; 0x1046 <udd_sleep_mode+0x42>
    1044:	ff cf       	rjmp	.-2      	; 0x1044 <udd_sleep_mode+0x40>
    1046:	9f b7       	in	r25, 0x3f	; 63
    1048:	99 83       	std	Y+1, r25	; 0x01
    104a:	f8 94       	cli
    104c:	29 81       	ldd	r18, Y+1	; 0x01
    104e:	ea e8       	ldi	r30, 0x8A	; 138
    1050:	f3 e2       	ldi	r31, 0x23	; 35
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	9f 5f       	subi	r25, 0xFF	; 255
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	2f bf       	out	0x3f, r18	; 63
    105a:	80 93 40 22 	sts	0x2240, r24	; 0x802240 <udd_b_idle>
    105e:	05 c0       	rjmp	.+10     	; 0x106a <udd_sleep_mode+0x66>
    1060:	90 91 40 22 	lds	r25, 0x2240	; 0x802240 <udd_b_idle>
    1064:	99 23       	and	r25, r25
    1066:	51 f3       	breq	.-44     	; 0x103c <udd_sleep_mode+0x38>
    1068:	f8 cf       	rjmp	.-16     	; 0x105a <udd_sleep_mode+0x56>
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	08 95       	ret

00001074 <udd_ctrl_init>:
    1074:	0f 93       	push	r16
    1076:	e8 ec       	ldi	r30, 0xC8	; 200
    1078:	f4 e0       	ldi	r31, 0x04	; 4
    107a:	80 81       	ld	r24, Z
    107c:	8f 7d       	andi	r24, 0xDF	; 223
    107e:	80 83       	st	Z, r24
    1080:	80 81       	ld	r24, Z
    1082:	8f 7d       	andi	r24, 0xDF	; 223
    1084:	80 83       	st	Z, r24
    1086:	e4 e1       	ldi	r30, 0x14	; 20
    1088:	f2 e2       	ldi	r31, 0x22	; 34
    108a:	02 e0       	ldi	r16, 0x02	; 2
    108c:	05 93       	las	Z, r16
    108e:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <udd_sram+0x16>
    1092:	10 92 17 22 	sts	0x2217, r1	; 0x802217 <udd_sram+0x17>
    1096:	00 e2       	ldi	r16, 0x20	; 32
    1098:	06 93       	lac	Z, r16
    109a:	00 e4       	ldi	r16, 0x40	; 64
    109c:	06 93       	lac	Z, r16
    109e:	ec e0       	ldi	r30, 0x0C	; 12
    10a0:	f2 e2       	ldi	r31, 0x22	; 34
    10a2:	00 e4       	ldi	r16, 0x40	; 64
    10a4:	06 93       	lac	Z, r16
    10a6:	ea e7       	ldi	r30, 0x7A	; 122
    10a8:	f3 e2       	ldi	r31, 0x23	; 35
    10aa:	14 86       	std	Z+12, r1	; 0x0c
    10ac:	15 86       	std	Z+13, r1	; 0x0d
    10ae:	16 86       	std	Z+14, r1	; 0x0e
    10b0:	17 86       	std	Z+15, r1	; 0x0f
    10b2:	12 86       	std	Z+10, r1	; 0x0a
    10b4:	13 86       	std	Z+11, r1	; 0x0b
    10b6:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ep_control_state>
    10ba:	0f 91       	pop	r16
    10bc:	08 95       	ret

000010be <udd_ctrl_stall_data>:
    10be:	0f 93       	push	r16
    10c0:	85 e0       	ldi	r24, 0x05	; 5
    10c2:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ep_control_state>
    10c6:	e5 e1       	ldi	r30, 0x15	; 21
    10c8:	f2 e2       	ldi	r31, 0x22	; 34
    10ca:	04 e0       	ldi	r16, 0x04	; 4
    10cc:	05 93       	las	Z, r16
    10ce:	ed e0       	ldi	r30, 0x0D	; 13
    10d0:	f2 e2       	ldi	r31, 0x22	; 34
    10d2:	04 e0       	ldi	r16, 0x04	; 4
    10d4:	05 93       	las	Z, r16
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <udd_ctrl_send_zlp_in>:
    10da:	0f 93       	push	r16
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ep_control_state>
    10e2:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <udd_sram+0x16>
    10e6:	10 92 17 22 	sts	0x2217, r1	; 0x802217 <udd_sram+0x17>
    10ea:	e4 e1       	ldi	r30, 0x14	; 20
    10ec:	f2 e2       	ldi	r31, 0x22	; 34
    10ee:	02 e0       	ldi	r16, 0x02	; 2
    10f0:	06 93       	lac	Z, r16
    10f2:	0f 91       	pop	r16
    10f4:	08 95       	ret

000010f6 <udd_ctrl_endofrequest>:
    10f6:	e0 91 86 23 	lds	r30, 0x2386	; 0x802386 <udd_g_ctrlreq+0xc>
    10fa:	f0 91 87 23 	lds	r31, 0x2387	; 0x802387 <udd_g_ctrlreq+0xd>
    10fe:	30 97       	sbiw	r30, 0x00	; 0
    1100:	09 f0       	breq	.+2      	; 0x1104 <udd_ctrl_endofrequest+0xe>
    1102:	19 95       	eicall
    1104:	08 95       	ret

00001106 <udd_ctrl_in_sent>:
    1106:	0f 93       	push	r16
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ep_control_state>
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	19 f4       	brne	.+6      	; 0x111a <udd_ctrl_in_sent+0x14>
    1114:	f0 df       	rcall	.-32     	; 0x10f6 <udd_ctrl_endofrequest>
    1116:	ae df       	rcall	.-164    	; 0x1074 <udd_ctrl_init>
    1118:	5e c0       	rjmp	.+188    	; 0x11d6 <udd_ctrl_in_sent+0xd0>
    111a:	80 91 f9 21 	lds	r24, 0x21F9	; 0x8021f9 <udd_ctrl_payload_nb_trans>
    111e:	90 91 fa 21 	lds	r25, 0x21FA	; 0x8021fa <udd_ctrl_payload_nb_trans+0x1>
    1122:	c0 91 84 23 	lds	r28, 0x2384	; 0x802384 <udd_g_ctrlreq+0xa>
    1126:	d0 91 85 23 	lds	r29, 0x2385	; 0x802385 <udd_g_ctrlreq+0xb>
    112a:	c8 1b       	sub	r28, r24
    112c:	d9 0b       	sbc	r29, r25
    112e:	71 f5       	brne	.+92     	; 0x118c <udd_ctrl_in_sent+0x86>
    1130:	20 91 fb 21 	lds	r18, 0x21FB	; 0x8021fb <udd_ctrl_prev_payload_nb_trans>
    1134:	30 91 fc 21 	lds	r19, 0x21FC	; 0x8021fc <udd_ctrl_prev_payload_nb_trans+0x1>
    1138:	82 0f       	add	r24, r18
    113a:	93 1f       	adc	r25, r19
    113c:	80 93 fb 21 	sts	0x21FB, r24	; 0x8021fb <udd_ctrl_prev_payload_nb_trans>
    1140:	90 93 fc 21 	sts	0x21FC, r25	; 0x8021fc <udd_ctrl_prev_payload_nb_trans+0x1>
    1144:	20 91 80 23 	lds	r18, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    1148:	30 91 81 23 	lds	r19, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    114c:	82 17       	cp	r24, r18
    114e:	93 07       	cpc	r25, r19
    1150:	21 f0       	breq	.+8      	; 0x115a <udd_ctrl_in_sent+0x54>
    1152:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b_shortpacket.5399>
    1156:	88 23       	and	r24, r24
    1158:	41 f0       	breq	.+16     	; 0x116a <udd_ctrl_in_sent+0x64>
    115a:	84 e0       	ldi	r24, 0x04	; 4
    115c:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ep_control_state>
    1160:	ec e0       	ldi	r30, 0x0C	; 12
    1162:	f2 e2       	ldi	r31, 0x22	; 34
    1164:	02 e0       	ldi	r16, 0x02	; 2
    1166:	06 93       	lac	Z, r16
    1168:	36 c0       	rjmp	.+108    	; 0x11d6 <udd_ctrl_in_sent+0xd0>
    116a:	e0 91 88 23 	lds	r30, 0x2388	; 0x802388 <udd_g_ctrlreq+0xe>
    116e:	f0 91 89 23 	lds	r31, 0x2389	; 0x802389 <udd_g_ctrlreq+0xf>
    1172:	30 97       	sbiw	r30, 0x00	; 0
    1174:	99 f0       	breq	.+38     	; 0x119c <udd_ctrl_in_sent+0x96>
    1176:	19 95       	eicall
    1178:	88 23       	and	r24, r24
    117a:	81 f0       	breq	.+32     	; 0x119c <udd_ctrl_in_sent+0x96>
    117c:	10 92 f9 21 	sts	0x21F9, r1	; 0x8021f9 <udd_ctrl_payload_nb_trans>
    1180:	10 92 fa 21 	sts	0x21FA, r1	; 0x8021fa <udd_ctrl_payload_nb_trans+0x1>
    1184:	c0 91 84 23 	lds	r28, 0x2384	; 0x802384 <udd_g_ctrlreq+0xa>
    1188:	d0 91 85 23 	lds	r29, 0x2385	; 0x802385 <udd_g_ctrlreq+0xb>
    118c:	c0 34       	cpi	r28, 0x40	; 64
    118e:	d1 05       	cpc	r29, r1
    1190:	28 f0       	brcs	.+10     	; 0x119c <udd_ctrl_in_sent+0x96>
    1192:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <b_shortpacket.5399>
    1196:	c0 e4       	ldi	r28, 0x40	; 64
    1198:	d0 e0       	ldi	r29, 0x00	; 0
    119a:	03 c0       	rjmp	.+6      	; 0x11a2 <udd_ctrl_in_sent+0x9c>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <b_shortpacket.5399>
    11a2:	e0 e0       	ldi	r30, 0x00	; 0
    11a4:	f2 e2       	ldi	r31, 0x22	; 34
    11a6:	c6 8b       	std	Z+22, r28	; 0x16
    11a8:	d7 8b       	std	Z+23, r29	; 0x17
    11aa:	80 91 f9 21 	lds	r24, 0x21F9	; 0x8021f9 <udd_ctrl_payload_nb_trans>
    11ae:	90 91 fa 21 	lds	r25, 0x21FA	; 0x8021fa <udd_ctrl_payload_nb_trans+0x1>
    11b2:	20 91 82 23 	lds	r18, 0x2382	; 0x802382 <udd_g_ctrlreq+0x8>
    11b6:	30 91 83 23 	lds	r19, 0x2383	; 0x802383 <udd_g_ctrlreq+0x9>
    11ba:	28 0f       	add	r18, r24
    11bc:	39 1f       	adc	r19, r25
    11be:	20 8f       	std	Z+24, r18	; 0x18
    11c0:	31 8f       	std	Z+25, r19	; 0x19
    11c2:	c8 0f       	add	r28, r24
    11c4:	d9 1f       	adc	r29, r25
    11c6:	c0 93 f9 21 	sts	0x21F9, r28	; 0x8021f9 <udd_ctrl_payload_nb_trans>
    11ca:	d0 93 fa 21 	sts	0x21FA, r29	; 0x8021fa <udd_ctrl_payload_nb_trans+0x1>
    11ce:	e4 e1       	ldi	r30, 0x14	; 20
    11d0:	f2 e2       	ldi	r31, 0x22	; 34
    11d2:	02 e0       	ldi	r16, 0x02	; 2
    11d4:	06 93       	lac	Z, r16
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	0f 91       	pop	r16
    11dc:	08 95       	ret

000011de <udd_ep_get_size>:
    11de:	fc 01       	movw	r30, r24
    11e0:	81 81       	ldd	r24, Z+1	; 0x01
    11e2:	e8 2f       	mov	r30, r24
    11e4:	e7 70       	andi	r30, 0x07	; 7
    11e6:	8e 2f       	mov	r24, r30
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	fc 01       	movw	r30, r24
    11ec:	31 97       	sbiw	r30, 0x01	; 1
    11ee:	e7 30       	cpi	r30, 0x07	; 7
    11f0:	f1 05       	cpc	r31, r1
    11f2:	d8 f4       	brcc	.+54     	; 0x122a <udd_ep_get_size+0x4c>
    11f4:	88 27       	eor	r24, r24
    11f6:	e2 50       	subi	r30, 0x02	; 2
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	8f 4f       	sbci	r24, 0xFF	; 255
    11fc:	0c 94 3e 19 	jmp	0x327c	; 0x327c <__tablejump2__>
    1200:	80 e1       	ldi	r24, 0x10	; 16
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	08 95       	ret
    1206:	80 e2       	ldi	r24, 0x20	; 32
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	08 95       	ret
    120c:	80 e4       	ldi	r24, 0x40	; 64
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	08 95       	ret
    1212:	80 e8       	ldi	r24, 0x80	; 128
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	08 95       	ret
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	08 95       	ret
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	92 e0       	ldi	r25, 0x02	; 2
    1222:	08 95       	ret
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	93 e0       	ldi	r25, 0x03	; 3
    1228:	08 95       	ret
    122a:	88 e0       	ldi	r24, 0x08	; 8
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	08 95       	ret

00001230 <udd_ep_get_job>:
    1230:	28 2f       	mov	r18, r24
    1232:	2f 70       	andi	r18, 0x0F	; 15
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	22 0f       	add	r18, r18
    1238:	33 1f       	adc	r19, r19
    123a:	08 2e       	mov	r0, r24
    123c:	00 0c       	add	r0, r0
    123e:	99 0b       	sbc	r25, r25
    1240:	88 27       	eor	r24, r24
    1242:	99 0f       	add	r25, r25
    1244:	88 1f       	adc	r24, r24
    1246:	99 27       	eor	r25, r25
    1248:	82 0f       	add	r24, r18
    124a:	93 1f       	adc	r25, r19
    124c:	02 97       	sbiw	r24, 0x02	; 2
    124e:	9c 01       	movw	r18, r24
    1250:	22 0f       	add	r18, r18
    1252:	33 1f       	adc	r19, r19
    1254:	22 0f       	add	r18, r18
    1256:	33 1f       	adc	r19, r19
    1258:	22 0f       	add	r18, r18
    125a:	33 1f       	adc	r19, r19
    125c:	82 0f       	add	r24, r18
    125e:	93 1f       	adc	r25, r19
    1260:	8b 56       	subi	r24, 0x6B	; 107
    1262:	9e 4d       	sbci	r25, 0xDE	; 222
    1264:	08 95       	ret

00001266 <udd_ctrl_interrupt_tc_setup>:
    1266:	0f 93       	push	r16
    1268:	cf 93       	push	r28
    126a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    126e:	80 ff       	sbrs	r24, 0
    1270:	65 c0       	rjmp	.+202    	; 0x133c <udd_ctrl_interrupt_tc_setup+0xd6>
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1278:	ec e0       	ldi	r30, 0x0C	; 12
    127a:	f2 e2       	ldi	r31, 0x22	; 34
    127c:	00 e8       	ldi	r16, 0x80	; 128
    127e:	06 93       	lac	Z, r16
    1280:	e4 e1       	ldi	r30, 0x14	; 20
    1282:	f2 e2       	ldi	r31, 0x22	; 34
    1284:	00 e8       	ldi	r16, 0x80	; 128
    1286:	06 93       	lac	Z, r16
    1288:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    128c:	ec e0       	ldi	r30, 0x0C	; 12
    128e:	f2 e2       	ldi	r31, 0x22	; 34
    1290:	00 e1       	ldi	r16, 0x10	; 16
    1292:	06 93       	lac	Z, r16
    1294:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ep_control_state>
    1298:	88 23       	and	r24, r24
    129a:	29 f0       	breq	.+10     	; 0x12a6 <udd_ctrl_interrupt_tc_setup+0x40>
    129c:	83 50       	subi	r24, 0x03	; 3
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <udd_ctrl_interrupt_tc_setup+0x3e>
    12a2:	29 df       	rcall	.-430    	; 0x10f6 <udd_ctrl_endofrequest>
    12a4:	e7 de       	rcall	.-562    	; 0x1074 <udd_ctrl_init>
    12a6:	80 91 0e 22 	lds	r24, 0x220E	; 0x80220e <udd_sram+0xe>
    12aa:	90 91 0f 22 	lds	r25, 0x220F	; 0x80220f <udd_sram+0xf>
    12ae:	08 97       	sbiw	r24, 0x08	; 8
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <udd_ctrl_interrupt_tc_setup+0x4e>
    12b2:	46 c0       	rjmp	.+140    	; 0x1340 <udd_ctrl_interrupt_tc_setup+0xda>
    12b4:	88 e0       	ldi	r24, 0x08	; 8
    12b6:	e9 eb       	ldi	r30, 0xB9	; 185
    12b8:	f1 e2       	ldi	r31, 0x21	; 33
    12ba:	aa e7       	ldi	r26, 0x7A	; 122
    12bc:	b3 e2       	ldi	r27, 0x23	; 35
    12be:	01 90       	ld	r0, Z+
    12c0:	0d 92       	st	X+, r0
    12c2:	8a 95       	dec	r24
    12c4:	e1 f7       	brne	.-8      	; 0x12be <udd_ctrl_interrupt_tc_setup+0x58>
    12c6:	e8 ec       	ldi	r30, 0xC8	; 200
    12c8:	f4 e0       	ldi	r31, 0x04	; 4
    12ca:	80 81       	ld	r24, Z
    12cc:	80 62       	ori	r24, 0x20	; 32
    12ce:	80 83       	st	Z, r24
    12d0:	80 81       	ld	r24, Z
    12d2:	80 62       	ori	r24, 0x20	; 32
    12d4:	80 83       	st	Z, r24
    12d6:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <udc_process_setup>
    12da:	c8 2f       	mov	r28, r24
    12dc:	81 11       	cpse	r24, r1
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <udd_ctrl_interrupt_tc_setup+0x80>
    12e0:	ee de       	rcall	.-548    	; 0x10be <udd_ctrl_stall_data>
    12e2:	c1 e0       	ldi	r28, 0x01	; 1
    12e4:	2e c0       	rjmp	.+92     	; 0x1342 <udd_ctrl_interrupt_tc_setup+0xdc>
    12e6:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <udd_g_ctrlreq>
    12ea:	88 23       	and	r24, r24
    12ec:	6c f4       	brge	.+26     	; 0x1308 <udd_ctrl_interrupt_tc_setup+0xa2>
    12ee:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_prev_payload_nb_trans>
    12f2:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_prev_payload_nb_trans+0x1>
    12f6:	10 92 f9 21 	sts	0x21F9, r1	; 0x8021f9 <udd_ctrl_payload_nb_trans>
    12fa:	10 92 fa 21 	sts	0x21FA, r1	; 0x8021fa <udd_ctrl_payload_nb_trans+0x1>
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ep_control_state>
    1304:	00 df       	rcall	.-512    	; 0x1106 <udd_ctrl_in_sent>
    1306:	1d c0       	rjmp	.+58     	; 0x1342 <udd_ctrl_interrupt_tc_setup+0xdc>
    1308:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    130c:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    1310:	89 2b       	or	r24, r25
    1312:	11 f4       	brne	.+4      	; 0x1318 <udd_ctrl_interrupt_tc_setup+0xb2>
    1314:	e2 de       	rcall	.-572    	; 0x10da <udd_ctrl_send_zlp_in>
    1316:	15 c0       	rjmp	.+42     	; 0x1342 <udd_ctrl_interrupt_tc_setup+0xdc>
    1318:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_prev_payload_nb_trans>
    131c:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_prev_payload_nb_trans+0x1>
    1320:	10 92 f9 21 	sts	0x21F9, r1	; 0x8021f9 <udd_ctrl_payload_nb_trans>
    1324:	10 92 fa 21 	sts	0x21FA, r1	; 0x8021fa <udd_ctrl_payload_nb_trans+0x1>
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ep_control_state>
    132e:	ec e0       	ldi	r30, 0x0C	; 12
    1330:	f2 e2       	ldi	r31, 0x22	; 34
    1332:	02 e0       	ldi	r16, 0x02	; 2
    1334:	06 93       	lac	Z, r16
    1336:	00 e2       	ldi	r16, 0x20	; 32
    1338:	06 93       	lac	Z, r16
    133a:	03 c0       	rjmp	.+6      	; 0x1342 <udd_ctrl_interrupt_tc_setup+0xdc>
    133c:	c0 e0       	ldi	r28, 0x00	; 0
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <udd_ctrl_interrupt_tc_setup+0xdc>
    1340:	c1 e0       	ldi	r28, 0x01	; 1
    1342:	8c 2f       	mov	r24, r28
    1344:	cf 91       	pop	r28
    1346:	0f 91       	pop	r16
    1348:	08 95       	ret

0000134a <udd_ep_trans_complet>:
    134a:	8f 92       	push	r8
    134c:	9f 92       	push	r9
    134e:	af 92       	push	r10
    1350:	bf 92       	push	r11
    1352:	df 92       	push	r13
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	d8 2e       	mov	r13, r24
    1362:	66 df       	rcall	.-308    	; 0x1230 <udd_ep_get_job>
    1364:	8c 01       	movw	r16, r24
    1366:	bd 2c       	mov	r11, r13
    1368:	bb 1c       	adc	r11, r11
    136a:	bb 24       	eor	r11, r11
    136c:	bb 1c       	adc	r11, r11
    136e:	cd 2d       	mov	r28, r13
    1370:	cf 70       	andi	r28, 0x0F	; 15
    1372:	d0 e0       	ldi	r29, 0x00	; 0
    1374:	cc 0f       	add	r28, r28
    1376:	dd 1f       	adc	r29, r29
    1378:	cb 0d       	add	r28, r11
    137a:	d1 1d       	adc	r29, r1
    137c:	ce 01       	movw	r24, r28
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	9c 01       	movw	r18, r24
    138c:	24 5f       	subi	r18, 0xF4	; 244
    138e:	3d 4d       	sbci	r19, 0xDD	; 221
    1390:	79 01       	movw	r14, r18
    1392:	c9 01       	movw	r24, r18
    1394:	24 df       	rcall	.-440    	; 0x11de <udd_ep_get_size>
    1396:	4c 01       	movw	r8, r24
    1398:	bb 20       	and	r11, r11
    139a:	09 f4       	brne	.+2      	; 0x139e <udd_ep_trans_complet+0x54>
    139c:	7b c0       	rjmp	.+246    	; 0x1494 <udd_ep_trans_complet+0x14a>
    139e:	fe 01       	movw	r30, r28
    13a0:	ee 0f       	add	r30, r30
    13a2:	ff 1f       	adc	r31, r31
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	ee 0f       	add	r30, r30
    13aa:	ff 1f       	adc	r31, r31
    13ac:	e0 50       	subi	r30, 0x00	; 0
    13ae:	fe 4d       	sbci	r31, 0xDE	; 222
    13b0:	22 89       	ldd	r18, Z+18	; 0x12
    13b2:	33 89       	ldd	r19, Z+19	; 0x13
    13b4:	d8 01       	movw	r26, r16
    13b6:	15 96       	adiw	r26, 0x05	; 5
    13b8:	8d 91       	ld	r24, X+
    13ba:	9c 91       	ld	r25, X
    13bc:	16 97       	sbiw	r26, 0x06	; 6
    13be:	82 0f       	add	r24, r18
    13c0:	93 1f       	adc	r25, r19
    13c2:	15 96       	adiw	r26, 0x05	; 5
    13c4:	8d 93       	st	X+, r24
    13c6:	9c 93       	st	X, r25
    13c8:	16 97       	sbiw	r26, 0x06	; 6
    13ca:	13 96       	adiw	r26, 0x03	; 3
    13cc:	2d 91       	ld	r18, X+
    13ce:	3c 91       	ld	r19, X
    13d0:	14 97       	sbiw	r26, 0x04	; 4
    13d2:	82 17       	cp	r24, r18
    13d4:	93 07       	cpc	r25, r19
    13d6:	09 f4       	brne	.+2      	; 0x13da <udd_ep_trans_complet+0x90>
    13d8:	47 c0       	rjmp	.+142    	; 0x1468 <udd_ep_trans_complet+0x11e>
    13da:	28 1b       	sub	r18, r24
    13dc:	39 0b       	sbc	r19, r25
    13de:	21 15       	cp	r18, r1
    13e0:	b4 e0       	ldi	r27, 0x04	; 4
    13e2:	3b 07       	cpc	r19, r27
    13e4:	40 f0       	brcs	.+16     	; 0x13f6 <udd_ep_trans_complet+0xac>
    13e6:	2f ef       	ldi	r18, 0xFF	; 255
    13e8:	33 e0       	ldi	r19, 0x03	; 3
    13ea:	c9 01       	movw	r24, r18
    13ec:	b4 01       	movw	r22, r8
    13ee:	0e 94 08 19 	call	0x3210	; 0x3210 <__udivmodhi4>
    13f2:	28 1b       	sub	r18, r24
    13f4:	39 0b       	sbc	r19, r25
    13f6:	f8 01       	movw	r30, r16
    13f8:	80 81       	ld	r24, Z
    13fa:	81 ff       	sbrs	r24, 1
    13fc:	0a c0       	rjmp	.+20     	; 0x1412 <udd_ep_trans_complet+0xc8>
    13fe:	c9 01       	movw	r24, r18
    1400:	b4 01       	movw	r22, r8
    1402:	0e 94 08 19 	call	0x3210	; 0x3210 <__udivmodhi4>
    1406:	41 e0       	ldi	r20, 0x01	; 1
    1408:	89 2b       	or	r24, r25
    140a:	09 f0       	breq	.+2      	; 0x140e <udd_ep_trans_complet+0xc4>
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	84 2f       	mov	r24, r20
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <udd_ep_trans_complet+0xca>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	d8 01       	movw	r26, r16
    1416:	9c 91       	ld	r25, X
    1418:	80 fb       	bst	r24, 0
    141a:	91 f9       	bld	r25, 1
    141c:	9c 93       	st	X, r25
    141e:	fe 01       	movw	r30, r28
    1420:	ee 0f       	add	r30, r30
    1422:	ff 1f       	adc	r31, r31
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	e0 50       	subi	r30, 0x00	; 0
    142e:	fe 4d       	sbci	r31, 0xDE	; 222
    1430:	12 8a       	std	Z+18, r1	; 0x12
    1432:	13 8a       	std	Z+19, r1	; 0x13
    1434:	26 87       	std	Z+14, r18	; 0x0e
    1436:	37 87       	std	Z+15, r19	; 0x0f
    1438:	11 96       	adiw	r26, 0x01	; 1
    143a:	2d 91       	ld	r18, X+
    143c:	3c 91       	ld	r19, X
    143e:	12 97       	sbiw	r26, 0x02	; 2
    1440:	15 96       	adiw	r26, 0x05	; 5
    1442:	8d 91       	ld	r24, X+
    1444:	9c 91       	ld	r25, X
    1446:	16 97       	sbiw	r26, 0x06	; 6
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	cc 0f       	add	r28, r28
    144e:	dd 1f       	adc	r29, r29
    1450:	cc 0f       	add	r28, r28
    1452:	dd 1f       	adc	r29, r29
    1454:	cc 0f       	add	r28, r28
    1456:	dd 1f       	adc	r29, r29
    1458:	c0 5f       	subi	r28, 0xF0	; 240
    145a:	dd 4d       	sbci	r29, 0xDD	; 221
    145c:	88 83       	st	Y, r24
    145e:	99 83       	std	Y+1, r25	; 0x01
    1460:	f7 01       	movw	r30, r14
    1462:	02 e0       	ldi	r16, 0x02	; 2
    1464:	06 93       	lac	Z, r16
    1466:	e8 c0       	rjmp	.+464    	; 0x1638 <udd_ep_trans_complet+0x2ee>
    1468:	d8 01       	movw	r26, r16
    146a:	8c 91       	ld	r24, X
    146c:	81 ff       	sbrs	r24, 1
    146e:	d1 c0       	rjmp	.+418    	; 0x1612 <udd_ep_trans_complet+0x2c8>
    1470:	8d 7f       	andi	r24, 0xFD	; 253
    1472:	8c 93       	st	X, r24
    1474:	cc 0f       	add	r28, r28
    1476:	dd 1f       	adc	r29, r29
    1478:	cc 0f       	add	r28, r28
    147a:	dd 1f       	adc	r29, r29
    147c:	cc 0f       	add	r28, r28
    147e:	dd 1f       	adc	r29, r29
    1480:	c0 50       	subi	r28, 0x00	; 0
    1482:	de 4d       	sbci	r29, 0xDE	; 222
    1484:	1a 8a       	std	Y+18, r1	; 0x12
    1486:	1b 8a       	std	Y+19, r1	; 0x13
    1488:	1e 86       	std	Y+14, r1	; 0x0e
    148a:	1f 86       	std	Y+15, r1	; 0x0f
    148c:	f7 01       	movw	r30, r14
    148e:	02 e0       	ldi	r16, 0x02	; 2
    1490:	06 93       	lac	Z, r16
    1492:	d2 c0       	rjmp	.+420    	; 0x1638 <udd_ep_trans_complet+0x2ee>
    1494:	fe 01       	movw	r30, r28
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	ee 0f       	add	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e0 50       	subi	r30, 0x00	; 0
    14a4:	fe 4d       	sbci	r31, 0xDE	; 222
    14a6:	a6 84       	ldd	r10, Z+14	; 0x0e
    14a8:	b7 84       	ldd	r11, Z+15	; 0x0f
    14aa:	d8 01       	movw	r26, r16
    14ac:	8c 91       	ld	r24, X
    14ae:	82 ff       	sbrs	r24, 2
    14b0:	1b c0       	rjmp	.+54     	; 0x14e8 <udd_ep_trans_complet+0x19e>
    14b2:	11 96       	adiw	r26, 0x01	; 1
    14b4:	ed 91       	ld	r30, X+
    14b6:	fc 91       	ld	r31, X
    14b8:	12 97       	sbiw	r26, 0x02	; 2
    14ba:	15 96       	adiw	r26, 0x05	; 5
    14bc:	2d 91       	ld	r18, X+
    14be:	3c 91       	ld	r19, X
    14c0:	16 97       	sbiw	r26, 0x06	; 6
    14c2:	13 96       	adiw	r26, 0x03	; 3
    14c4:	8d 91       	ld	r24, X+
    14c6:	9c 91       	ld	r25, X
    14c8:	14 97       	sbiw	r26, 0x04	; 4
    14ca:	b4 01       	movw	r22, r8
    14cc:	0e 94 08 19 	call	0x3210	; 0x3210 <__udivmodhi4>
    14d0:	b0 e4       	ldi	r27, 0x40	; 64
    14d2:	db 9e       	mul	r13, r27
    14d4:	b0 01       	movw	r22, r0
    14d6:	11 24       	eor	r1, r1
    14d8:	6b 52       	subi	r22, 0x2B	; 43
    14da:	7f 4d       	sbci	r23, 0xDF	; 223
    14dc:	ac 01       	movw	r20, r24
    14de:	cf 01       	movw	r24, r30
    14e0:	82 0f       	add	r24, r18
    14e2:	93 1f       	adc	r25, r19
    14e4:	0e 94 55 19 	call	0x32aa	; 0x32aa <memcpy>
    14e8:	f8 01       	movw	r30, r16
    14ea:	25 81       	ldd	r18, Z+5	; 0x05
    14ec:	36 81       	ldd	r19, Z+6	; 0x06
    14ee:	2a 0d       	add	r18, r10
    14f0:	3b 1d       	adc	r19, r11
    14f2:	25 83       	std	Z+5, r18	; 0x05
    14f4:	36 83       	std	Z+6, r19	; 0x06
    14f6:	83 81       	ldd	r24, Z+3	; 0x03
    14f8:	94 81       	ldd	r25, Z+4	; 0x04
    14fa:	82 17       	cp	r24, r18
    14fc:	93 07       	cpc	r25, r19
    14fe:	68 f4       	brcc	.+26     	; 0x151a <udd_ep_trans_complet+0x1d0>
    1500:	85 83       	std	Z+5, r24	; 0x05
    1502:	96 83       	std	Z+6, r25	; 0x06
    1504:	cc 0f       	add	r28, r28
    1506:	dd 1f       	adc	r29, r29
    1508:	cc 0f       	add	r28, r28
    150a:	dd 1f       	adc	r29, r29
    150c:	cc 0f       	add	r28, r28
    150e:	dd 1f       	adc	r29, r29
    1510:	c0 50       	subi	r28, 0x00	; 0
    1512:	de 4d       	sbci	r29, 0xDE	; 222
    1514:	8a 89       	ldd	r24, Y+18	; 0x12
    1516:	9b 89       	ldd	r25, Y+19	; 0x13
    1518:	7c c0       	rjmp	.+248    	; 0x1612 <udd_ep_trans_complet+0x2c8>
    151a:	fe 01       	movw	r30, r28
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	e0 50       	subi	r30, 0x00	; 0
    152a:	fe 4d       	sbci	r31, 0xDE	; 222
    152c:	42 89       	ldd	r20, Z+18	; 0x12
    152e:	53 89       	ldd	r21, Z+19	; 0x13
    1530:	4a 15       	cp	r20, r10
    1532:	5b 05       	cpc	r21, r11
    1534:	09 f0       	breq	.+2      	; 0x1538 <udd_ep_trans_complet+0x1ee>
    1536:	6d c0       	rjmp	.+218    	; 0x1612 <udd_ep_trans_complet+0x2c8>
    1538:	28 17       	cp	r18, r24
    153a:	39 07       	cpc	r19, r25
    153c:	09 f4       	brne	.+2      	; 0x1540 <udd_ep_trans_complet+0x1f6>
    153e:	69 c0       	rjmp	.+210    	; 0x1612 <udd_ep_trans_complet+0x2c8>
    1540:	ac 01       	movw	r20, r24
    1542:	42 1b       	sub	r20, r18
    1544:	53 0b       	sbc	r21, r19
    1546:	9a 01       	movw	r18, r20
    1548:	21 15       	cp	r18, r1
    154a:	54 e0       	ldi	r21, 0x04	; 4
    154c:	35 07       	cpc	r19, r21
    154e:	58 f0       	brcs	.+22     	; 0x1566 <udd_ep_trans_complet+0x21c>
    1550:	2f ef       	ldi	r18, 0xFF	; 255
    1552:	33 e0       	ldi	r19, 0x03	; 3
    1554:	c9 01       	movw	r24, r18
    1556:	b4 01       	movw	r22, r8
    1558:	0e 94 08 19 	call	0x3210	; 0x3210 <__udivmodhi4>
    155c:	d9 01       	movw	r26, r18
    155e:	a8 1b       	sub	r26, r24
    1560:	b9 0b       	sbc	r27, r25
    1562:	cd 01       	movw	r24, r26
    1564:	08 c0       	rjmp	.+16     	; 0x1576 <udd_ep_trans_complet+0x22c>
    1566:	c9 01       	movw	r24, r18
    1568:	b4 01       	movw	r22, r8
    156a:	0e 94 08 19 	call	0x3210	; 0x3210 <__udivmodhi4>
    156e:	f9 01       	movw	r30, r18
    1570:	e8 1b       	sub	r30, r24
    1572:	f9 0b       	sbc	r31, r25
    1574:	cf 01       	movw	r24, r30
    1576:	fe 01       	movw	r30, r28
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	ee 0f       	add	r30, r30
    157e:	ff 1f       	adc	r31, r31
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	e0 50       	subi	r30, 0x00	; 0
    1586:	fe 4d       	sbci	r31, 0xDE	; 222
    1588:	16 86       	std	Z+14, r1	; 0x0e
    158a:	17 86       	std	Z+15, r1	; 0x0f
    158c:	88 15       	cp	r24, r8
    158e:	99 05       	cpc	r25, r9
    1590:	00 f5       	brcc	.+64     	; 0x15d2 <udd_ep_trans_complet+0x288>
    1592:	d8 01       	movw	r26, r16
    1594:	8c 91       	ld	r24, X
    1596:	84 60       	ori	r24, 0x04	; 4
    1598:	8c 93       	st	X, r24
    159a:	b0 e4       	ldi	r27, 0x40	; 64
    159c:	db 9e       	mul	r13, r27
    159e:	c0 01       	movw	r24, r0
    15a0:	11 24       	eor	r1, r1
    15a2:	8b 52       	subi	r24, 0x2B	; 43
    15a4:	9f 4d       	sbci	r25, 0xDF	; 223
    15a6:	fe 01       	movw	r30, r28
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	ee 0f       	add	r30, r30
    15ae:	ff 1f       	adc	r31, r31
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	e0 5f       	subi	r30, 0xF0	; 240
    15b6:	fd 4d       	sbci	r31, 0xDD	; 221
    15b8:	80 83       	st	Z, r24
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	cc 0f       	add	r28, r28
    15be:	dd 1f       	adc	r29, r29
    15c0:	cc 0f       	add	r28, r28
    15c2:	dd 1f       	adc	r29, r29
    15c4:	cc 0f       	add	r28, r28
    15c6:	dd 1f       	adc	r29, r29
    15c8:	c0 50       	subi	r28, 0x00	; 0
    15ca:	de 4d       	sbci	r29, 0xDE	; 222
    15cc:	8a 8a       	std	Y+18, r8	; 0x12
    15ce:	9b 8a       	std	Y+19, r9	; 0x13
    15d0:	1c c0       	rjmp	.+56     	; 0x160a <udd_ep_trans_complet+0x2c0>
    15d2:	f8 01       	movw	r30, r16
    15d4:	41 81       	ldd	r20, Z+1	; 0x01
    15d6:	52 81       	ldd	r21, Z+2	; 0x02
    15d8:	25 81       	ldd	r18, Z+5	; 0x05
    15da:	36 81       	ldd	r19, Z+6	; 0x06
    15dc:	24 0f       	add	r18, r20
    15de:	35 1f       	adc	r19, r21
    15e0:	fe 01       	movw	r30, r28
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	ee 0f       	add	r30, r30
    15e8:	ff 1f       	adc	r31, r31
    15ea:	ee 0f       	add	r30, r30
    15ec:	ff 1f       	adc	r31, r31
    15ee:	e0 5f       	subi	r30, 0xF0	; 240
    15f0:	fd 4d       	sbci	r31, 0xDD	; 221
    15f2:	20 83       	st	Z, r18
    15f4:	31 83       	std	Z+1, r19	; 0x01
    15f6:	cc 0f       	add	r28, r28
    15f8:	dd 1f       	adc	r29, r29
    15fa:	cc 0f       	add	r28, r28
    15fc:	dd 1f       	adc	r29, r29
    15fe:	cc 0f       	add	r28, r28
    1600:	dd 1f       	adc	r29, r29
    1602:	c0 50       	subi	r28, 0x00	; 0
    1604:	de 4d       	sbci	r29, 0xDE	; 222
    1606:	8a 8b       	std	Y+18, r24	; 0x12
    1608:	9b 8b       	std	Y+19, r25	; 0x13
    160a:	f7 01       	movw	r30, r14
    160c:	02 e0       	ldi	r16, 0x02	; 2
    160e:	06 93       	lac	Z, r16
    1610:	13 c0       	rjmp	.+38     	; 0x1638 <udd_ep_trans_complet+0x2ee>
    1612:	d8 01       	movw	r26, r16
    1614:	8c 91       	ld	r24, X
    1616:	80 ff       	sbrs	r24, 0
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <udd_ep_trans_complet+0x2ee>
    161a:	8e 7f       	andi	r24, 0xFE	; 254
    161c:	8c 93       	st	X, r24
    161e:	17 96       	adiw	r26, 0x07	; 7
    1620:	ed 91       	ld	r30, X+
    1622:	fc 91       	ld	r31, X
    1624:	18 97       	sbiw	r26, 0x08	; 8
    1626:	30 97       	sbiw	r30, 0x00	; 0
    1628:	39 f0       	breq	.+14     	; 0x1638 <udd_ep_trans_complet+0x2ee>
    162a:	15 96       	adiw	r26, 0x05	; 5
    162c:	6d 91       	ld	r22, X+
    162e:	7c 91       	ld	r23, X
    1630:	16 97       	sbiw	r26, 0x06	; 6
    1632:	4d 2d       	mov	r20, r13
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	19 95       	eicall
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	bf 90       	pop	r11
    1648:	af 90       	pop	r10
    164a:	9f 90       	pop	r9
    164c:	8f 90       	pop	r8
    164e:	08 95       	ret

00001650 <udd_attach>:
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	1f 92       	push	r1
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	8f b7       	in	r24, 0x3f	; 63
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	f8 94       	cli
    1662:	19 81       	ldd	r17, Y+1	; 0x01
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	ce dc       	rcall	.-1636   	; 0x1004 <udd_sleep_mode>
    1668:	ea ec       	ldi	r30, 0xCA	; 202
    166a:	f4 e0       	ldi	r31, 0x04	; 4
    166c:	80 e4       	ldi	r24, 0x40	; 64
    166e:	80 83       	st	Z, r24
    1670:	80 e2       	ldi	r24, 0x20	; 32
    1672:	80 83       	st	Z, r24
    1674:	e1 ec       	ldi	r30, 0xC1	; 193
    1676:	f4 e0       	ldi	r31, 0x04	; 4
    1678:	80 81       	ld	r24, Z
    167a:	81 60       	ori	r24, 0x01	; 1
    167c:	80 83       	st	Z, r24
    167e:	a9 ec       	ldi	r26, 0xC9	; 201
    1680:	b4 e0       	ldi	r27, 0x04	; 4
    1682:	8c 91       	ld	r24, X
    1684:	82 60       	ori	r24, 0x02	; 2
    1686:	8c 93       	st	X, r24
    1688:	e8 ec       	ldi	r30, 0xC8	; 200
    168a:	f4 e0       	ldi	r31, 0x04	; 4
    168c:	80 81       	ld	r24, Z
    168e:	80 64       	ori	r24, 0x40	; 64
    1690:	80 83       	st	Z, r24
    1692:	8c 91       	ld	r24, X
    1694:	81 60       	ori	r24, 0x01	; 1
    1696:	8c 93       	st	X, r24
    1698:	80 81       	ld	r24, Z
    169a:	80 68       	ori	r24, 0x80	; 128
    169c:	80 83       	st	Z, r24
    169e:	1f bf       	out	0x3f, r17	; 63
    16a0:	0f 90       	pop	r0
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	08 95       	ret

000016aa <udd_enable>:
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	1f 92       	push	r1
    16b4:	1f 92       	push	r1
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	00 e6       	ldi	r16, 0x60	; 96
    16bc:	10 e0       	ldi	r17, 0x00	; 0
    16be:	f8 01       	movw	r30, r16
    16c0:	10 82       	st	Z, r1
    16c2:	80 e3       	ldi	r24, 0x30	; 48
    16c4:	1e d7       	rcall	.+3644   	; 0x2502 <sysclk_enable_usb>
    16c6:	e0 ec       	ldi	r30, 0xC0	; 192
    16c8:	f4 e0       	ldi	r31, 0x04	; 4
    16ca:	80 81       	ld	r24, Z
    16cc:	80 64       	ori	r24, 0x40	; 64
    16ce:	80 83       	st	Z, r24
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	f8 01       	movw	r30, r16
    16d4:	80 83       	st	Z, r24
    16d6:	8f b7       	in	r24, 0x3f	; 63
    16d8:	8a 83       	std	Y+2, r24	; 0x02
    16da:	f8 94       	cli
    16dc:	1a 81       	ldd	r17, Y+2	; 0x02
    16de:	e0 e0       	ldi	r30, 0x00	; 0
    16e0:	f2 e2       	ldi	r31, 0x22	; 34
    16e2:	15 86       	std	Z+13, r1	; 0x0d
    16e4:	15 8a       	std	Z+21, r1	; 0x15
    16e6:	15 8e       	std	Z+29, r1	; 0x1d
    16e8:	15 a2       	std	Z+37, r1	; 0x25
    16ea:	15 a6       	std	Z+45, r1	; 0x2d
    16ec:	15 aa       	std	Z+53, r1	; 0x35
    16ee:	e5 e9       	ldi	r30, 0x95	; 149
    16f0:	f1 e2       	ldi	r31, 0x21	; 33
    16f2:	80 81       	ld	r24, Z
    16f4:	8e 7f       	andi	r24, 0xFE	; 254
    16f6:	80 83       	st	Z, r24
    16f8:	ee e9       	ldi	r30, 0x9E	; 158
    16fa:	f1 e2       	ldi	r31, 0x21	; 33
    16fc:	80 81       	ld	r24, Z
    16fe:	8e 7f       	andi	r24, 0xFE	; 254
    1700:	80 83       	st	Z, r24
    1702:	e7 ea       	ldi	r30, 0xA7	; 167
    1704:	f1 e2       	ldi	r31, 0x21	; 33
    1706:	80 81       	ld	r24, Z
    1708:	8e 7f       	andi	r24, 0xFE	; 254
    170a:	80 83       	st	Z, r24
    170c:	e0 eb       	ldi	r30, 0xB0	; 176
    170e:	f1 e2       	ldi	r31, 0x21	; 33
    1710:	80 81       	ld	r24, Z
    1712:	8e 7f       	andi	r24, 0xFE	; 254
    1714:	80 83       	st	Z, r24
    1716:	6a e1       	ldi	r22, 0x1A	; 26
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <nvm_read_byte>
    1720:	8f 3f       	cpi	r24, 0xFF	; 255
    1722:	19 f0       	breq	.+6      	; 0x172a <udd_enable+0x80>
    1724:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <udd_enable+0x86>
    172a:	8f e1       	ldi	r24, 0x1F	; 31
    172c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1730:	6b e1       	ldi	r22, 0x1B	; 27
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <nvm_read_byte>
    173a:	8f 3f       	cpi	r24, 0xFF	; 255
    173c:	19 f0       	breq	.+6      	; 0x1744 <udd_enable+0x9a>
    173e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1742:	03 c0       	rjmp	.+6      	; 0x174a <udd_enable+0xa0>
    1744:	8f e1       	ldi	r24, 0x1F	; 31
    1746:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    174a:	e0 ec       	ldi	r30, 0xC0	; 192
    174c:	f4 e0       	ldi	r31, 0x04	; 4
    174e:	80 81       	ld	r24, Z
    1750:	82 60       	ori	r24, 0x02	; 2
    1752:	80 83       	st	Z, r24
    1754:	80 81       	ld	r24, Z
    1756:	80 68       	ori	r24, 0x80	; 128
    1758:	80 83       	st	Z, r24
    175a:	80 81       	ld	r24, Z
    175c:	80 61       	ori	r24, 0x10	; 16
    175e:	80 83       	st	Z, r24
    1760:	8c e0       	ldi	r24, 0x0C	; 12
    1762:	92 e2       	ldi	r25, 0x22	; 34
    1764:	86 83       	std	Z+6, r24	; 0x06
    1766:	97 83       	std	Z+7, r25	; 0x07
    1768:	80 81       	ld	r24, Z
    176a:	80 62       	ori	r24, 0x20	; 32
    176c:	80 83       	st	Z, r24
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    1774:	e8 ec       	ldi	r30, 0xC8	; 200
    1776:	f4 e0       	ldi	r31, 0x04	; 4
    1778:	80 81       	ld	r24, Z
    177a:	81 60       	ori	r24, 0x01	; 1
    177c:	80 83       	st	Z, r24
    177e:	10 92 40 22 	sts	0x2240, r1	; 0x802240 <udd_b_idle>
    1782:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <sleepmgr_locks+0x5>
    1786:	8f 3f       	cpi	r24, 0xFF	; 255
    1788:	09 f4       	brne	.+2      	; 0x178c <udd_enable+0xe2>
    178a:	ff cf       	rjmp	.-2      	; 0x178a <udd_enable+0xe0>
    178c:	8f b7       	in	r24, 0x3f	; 63
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	f8 94       	cli
    1792:	99 81       	ldd	r25, Y+1	; 0x01
    1794:	ea e8       	ldi	r30, 0x8A	; 138
    1796:	f3 e2       	ldi	r31, 0x23	; 35
    1798:	85 81       	ldd	r24, Z+5	; 0x05
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	85 83       	std	Z+5, r24	; 0x05
    179e:	9f bf       	out	0x3f, r25	; 63
    17a0:	57 df       	rcall	.-338    	; 0x1650 <udd_attach>
    17a2:	1f bf       	out	0x3f, r17	; 63
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	08 95       	ret

000017b2 <udd_is_high_speed>:
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	08 95       	ret

000017b6 <udd_set_address>:
    17b6:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    17ba:	08 95       	ret

000017bc <udd_getaddress>:
    17bc:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    17c0:	08 95       	ret

000017c2 <udd_get_frame_number>:
    17c2:	80 91 3c 22 	lds	r24, 0x223C	; 0x80223c <udd_sram+0x3c>
    17c6:	90 91 3d 22 	lds	r25, 0x223D	; 0x80223d <udd_sram+0x3d>
    17ca:	08 95       	ret

000017cc <udd_get_micro_frame_number>:
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	08 95       	ret

000017d2 <udd_set_setup_payload>:
    17d2:	ea e7       	ldi	r30, 0x7A	; 122
    17d4:	f3 e2       	ldi	r31, 0x23	; 35
    17d6:	80 87       	std	Z+8, r24	; 0x08
    17d8:	91 87       	std	Z+9, r25	; 0x09
    17da:	62 87       	std	Z+10, r22	; 0x0a
    17dc:	73 87       	std	Z+11, r23	; 0x0b
    17de:	08 95       	ret

000017e0 <udd_ep_alloc>:
    17e0:	28 2f       	mov	r18, r24
    17e2:	2f 70       	andi	r18, 0x0F	; 15
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	22 0f       	add	r18, r18
    17e8:	33 1f       	adc	r19, r19
    17ea:	08 2e       	mov	r0, r24
    17ec:	00 0c       	add	r0, r0
    17ee:	99 0b       	sbc	r25, r25
    17f0:	88 27       	eor	r24, r24
    17f2:	99 0f       	add	r25, r25
    17f4:	88 1f       	adc	r24, r24
    17f6:	99 27       	eor	r25, r25
    17f8:	82 0f       	add	r24, r18
    17fa:	93 1f       	adc	r25, r19
    17fc:	fc 01       	movw	r30, r24
    17fe:	ee 0f       	add	r30, r30
    1800:	ff 1f       	adc	r31, r31
    1802:	ee 0f       	add	r30, r30
    1804:	ff 1f       	adc	r31, r31
    1806:	ee 0f       	add	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	e0 50       	subi	r30, 0x00	; 0
    180c:	fe 4d       	sbci	r31, 0xDE	; 222
    180e:	25 85       	ldd	r18, Z+13	; 0x0d
    1810:	20 7c       	andi	r18, 0xC0	; 192
    1812:	09 f0       	breq	.+2      	; 0x1816 <udd_ep_alloc+0x36>
    1814:	69 c0       	rjmp	.+210    	; 0x18e8 <udd_ep_alloc+0x108>
    1816:	63 70       	andi	r22, 0x03	; 3
    1818:	61 30       	cpi	r22, 0x01	; 1
    181a:	11 f0       	breq	.+4      	; 0x1820 <udd_ep_alloc+0x40>
    181c:	18 f4       	brcc	.+6      	; 0x1824 <udd_ep_alloc+0x44>
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <udd_ep_alloc+0x48>
    1820:	20 ec       	ldi	r18, 0xC0	; 192
    1822:	03 c0       	rjmp	.+6      	; 0x182a <udd_ep_alloc+0x4a>
    1824:	20 e8       	ldi	r18, 0x80	; 128
    1826:	01 c0       	rjmp	.+2      	; 0x182a <udd_ep_alloc+0x4a>
    1828:	20 e4       	ldi	r18, 0x40	; 64
    182a:	40 38       	cpi	r20, 0x80	; 128
    182c:	51 05       	cpc	r21, r1
    182e:	e9 f0       	breq	.+58     	; 0x186a <udd_ep_alloc+0x8a>
    1830:	50 f4       	brcc	.+20     	; 0x1846 <udd_ep_alloc+0x66>
    1832:	40 32       	cpi	r20, 0x20	; 32
    1834:	51 05       	cpc	r21, r1
    1836:	a9 f0       	breq	.+42     	; 0x1862 <udd_ep_alloc+0x82>
    1838:	40 34       	cpi	r20, 0x40	; 64
    183a:	51 05       	cpc	r21, r1
    183c:	a1 f0       	breq	.+40     	; 0x1866 <udd_ep_alloc+0x86>
    183e:	40 31       	cpi	r20, 0x10	; 16
    1840:	51 05       	cpc	r21, r1
    1842:	d9 f4       	brne	.+54     	; 0x187a <udd_ep_alloc+0x9a>
    1844:	0c c0       	rjmp	.+24     	; 0x185e <udd_ep_alloc+0x7e>
    1846:	41 15       	cp	r20, r1
    1848:	32 e0       	ldi	r19, 0x02	; 2
    184a:	53 07       	cpc	r21, r19
    184c:	91 f0       	breq	.+36     	; 0x1872 <udd_ep_alloc+0x92>
    184e:	4f 3f       	cpi	r20, 0xFF	; 255
    1850:	33 e0       	ldi	r19, 0x03	; 3
    1852:	53 07       	cpc	r21, r19
    1854:	81 f0       	breq	.+32     	; 0x1876 <udd_ep_alloc+0x96>
    1856:	41 15       	cp	r20, r1
    1858:	51 40       	sbci	r21, 0x01	; 1
    185a:	79 f4       	brne	.+30     	; 0x187a <udd_ep_alloc+0x9a>
    185c:	08 c0       	rjmp	.+16     	; 0x186e <udd_ep_alloc+0x8e>
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0d c0       	rjmp	.+26     	; 0x187c <udd_ep_alloc+0x9c>
    1862:	42 e0       	ldi	r20, 0x02	; 2
    1864:	0b c0       	rjmp	.+22     	; 0x187c <udd_ep_alloc+0x9c>
    1866:	43 e0       	ldi	r20, 0x03	; 3
    1868:	09 c0       	rjmp	.+18     	; 0x187c <udd_ep_alloc+0x9c>
    186a:	44 e0       	ldi	r20, 0x04	; 4
    186c:	07 c0       	rjmp	.+14     	; 0x187c <udd_ep_alloc+0x9c>
    186e:	45 e0       	ldi	r20, 0x05	; 5
    1870:	05 c0       	rjmp	.+10     	; 0x187c <udd_ep_alloc+0x9c>
    1872:	46 e0       	ldi	r20, 0x06	; 6
    1874:	03 c0       	rjmp	.+6      	; 0x187c <udd_ep_alloc+0x9c>
    1876:	47 e0       	ldi	r20, 0x07	; 7
    1878:	01 c0       	rjmp	.+2      	; 0x187c <udd_ep_alloc+0x9c>
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	fc 01       	movw	r30, r24
    187e:	ee 0f       	add	r30, r30
    1880:	ff 1f       	adc	r31, r31
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	e0 50       	subi	r30, 0x00	; 0
    188c:	fe 4d       	sbci	r31, 0xDE	; 222
    188e:	15 86       	std	Z+13, r1	; 0x0d
    1890:	36 e0       	ldi	r19, 0x06	; 6
    1892:	34 87       	std	Z+12, r19	; 0x0c
    1894:	24 2b       	or	r18, r20
    1896:	25 87       	std	Z+13, r18	; 0x0d
    1898:	fc 01       	movw	r30, r24
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	e0 50       	subi	r30, 0x00	; 0
    18a8:	fe 4d       	sbci	r31, 0xDE	; 222
    18aa:	25 85       	ldd	r18, Z+13	; 0x0d
    18ac:	20 7c       	andi	r18, 0xC0	; 192
    18ae:	20 3c       	cpi	r18, 0xC0	; 192
    18b0:	69 f4       	brne	.+26     	; 0x18cc <udd_ep_alloc+0xec>
    18b2:	fc 01       	movw	r30, r24
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	ee 0f       	add	r30, r30
    18ba:	ff 1f       	adc	r31, r31
    18bc:	ee 0f       	add	r30, r30
    18be:	ff 1f       	adc	r31, r31
    18c0:	e0 50       	subi	r30, 0x00	; 0
    18c2:	fe 4d       	sbci	r31, 0xDE	; 222
    18c4:	25 85       	ldd	r18, Z+13	; 0x0d
    18c6:	27 70       	andi	r18, 0x07	; 7
    18c8:	27 30       	cpi	r18, 0x07	; 7
    18ca:	81 f0       	breq	.+32     	; 0x18ec <udd_ep_alloc+0x10c>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	fc 01       	movw	r30, r24
    18da:	e0 50       	subi	r30, 0x00	; 0
    18dc:	fe 4d       	sbci	r31, 0xDE	; 222
    18de:	85 85       	ldd	r24, Z+13	; 0x0d
    18e0:	80 62       	ori	r24, 0x20	; 32
    18e2:	85 87       	std	Z+13, r24	; 0x0d
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	08 95       	ret
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	08 95       	ret
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	08 95       	ret

000018f0 <udd_ep_is_halted>:
    18f0:	e8 2f       	mov	r30, r24
    18f2:	ef 70       	andi	r30, 0x0F	; 15
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	ee 0f       	add	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	08 2e       	mov	r0, r24
    18fc:	00 0c       	add	r0, r0
    18fe:	99 0b       	sbc	r25, r25
    1900:	88 27       	eor	r24, r24
    1902:	99 0f       	add	r25, r25
    1904:	88 1f       	adc	r24, r24
    1906:	99 27       	eor	r25, r25
    1908:	e8 0f       	add	r30, r24
    190a:	f9 1f       	adc	r31, r25
    190c:	ee 0f       	add	r30, r30
    190e:	ff 1f       	adc	r31, r31
    1910:	ee 0f       	add	r30, r30
    1912:	ff 1f       	adc	r31, r31
    1914:	ee 0f       	add	r30, r30
    1916:	ff 1f       	adc	r31, r31
    1918:	e0 50       	subi	r30, 0x00	; 0
    191a:	fe 4d       	sbci	r31, 0xDE	; 222
    191c:	85 85       	ldd	r24, Z+13	; 0x0d
    191e:	82 fb       	bst	r24, 2
    1920:	88 27       	eor	r24, r24
    1922:	80 f9       	bld	r24, 0
    1924:	08 95       	ret

00001926 <udd_ep_clear_halt>:
    1926:	0f 93       	push	r16
    1928:	28 2f       	mov	r18, r24
    192a:	2f 70       	andi	r18, 0x0F	; 15
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	a9 01       	movw	r20, r18
    1930:	44 0f       	add	r20, r20
    1932:	55 1f       	adc	r21, r21
    1934:	28 2f       	mov	r18, r24
    1936:	08 2e       	mov	r0, r24
    1938:	00 0c       	add	r0, r0
    193a:	33 0b       	sbc	r19, r19
    193c:	22 27       	eor	r18, r18
    193e:	33 0f       	add	r19, r19
    1940:	22 1f       	adc	r18, r18
    1942:	33 27       	eor	r19, r19
    1944:	24 0f       	add	r18, r20
    1946:	35 1f       	adc	r19, r21
    1948:	a9 01       	movw	r20, r18
    194a:	44 0f       	add	r20, r20
    194c:	55 1f       	adc	r21, r21
    194e:	44 0f       	add	r20, r20
    1950:	55 1f       	adc	r21, r21
    1952:	44 0f       	add	r20, r20
    1954:	55 1f       	adc	r21, r21
    1956:	fa 01       	movw	r30, r20
    1958:	e4 5f       	subi	r30, 0xF4	; 244
    195a:	fd 4d       	sbci	r31, 0xDD	; 221
    195c:	01 e0       	ldi	r16, 0x01	; 1
    195e:	06 93       	lac	Z, r16
    1960:	fa 01       	movw	r30, r20
    1962:	e0 50       	subi	r30, 0x00	; 0
    1964:	fe 4d       	sbci	r31, 0xDE	; 222
    1966:	95 85       	ldd	r25, Z+13	; 0x0d
    1968:	92 ff       	sbrs	r25, 2
    196a:	11 c0       	rjmp	.+34     	; 0x198e <udd_ep_clear_halt+0x68>
    196c:	fa 01       	movw	r30, r20
    196e:	e0 50       	subi	r30, 0x00	; 0
    1970:	fe 4d       	sbci	r31, 0xDE	; 222
    1972:	95 85       	ldd	r25, Z+13	; 0x0d
    1974:	9b 7f       	andi	r25, 0xFB	; 251
    1976:	95 87       	std	Z+13, r25	; 0x0d
    1978:	5b dc       	rcall	.-1866   	; 0x1230 <udd_ep_get_job>
    197a:	fc 01       	movw	r30, r24
    197c:	80 81       	ld	r24, Z
    197e:	80 ff       	sbrs	r24, 0
    1980:	06 c0       	rjmp	.+12     	; 0x198e <udd_ep_clear_halt+0x68>
    1982:	8e 7f       	andi	r24, 0xFE	; 254
    1984:	80 83       	st	Z, r24
    1986:	07 80       	ldd	r0, Z+7	; 0x07
    1988:	f0 85       	ldd	r31, Z+8	; 0x08
    198a:	e0 2d       	mov	r30, r0
    198c:	19 95       	eicall
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	0f 91       	pop	r16
    1992:	08 95       	ret

00001994 <udd_ep_run>:
    1994:	5f 92       	push	r5
    1996:	6f 92       	push	r6
    1998:	7f 92       	push	r7
    199a:	8f 92       	push	r8
    199c:	9f 92       	push	r9
    199e:	af 92       	push	r10
    19a0:	bf 92       	push	r11
    19a2:	cf 92       	push	r12
    19a4:	df 92       	push	r13
    19a6:	ef 92       	push	r14
    19a8:	ff 92       	push	r15
    19aa:	0f 93       	push	r16
    19ac:	1f 93       	push	r17
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	1f 92       	push	r1
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	78 2e       	mov	r7, r24
    19ba:	66 2e       	mov	r6, r22
    19bc:	4a 01       	movw	r8, r20
    19be:	59 01       	movw	r10, r18
    19c0:	37 dc       	rcall	.-1938   	; 0x1230 <udd_ep_get_job>
    19c2:	6c 01       	movw	r12, r24
    19c4:	57 2c       	mov	r5, r7
    19c6:	55 1c       	adc	r5, r5
    19c8:	55 24       	eor	r5, r5
    19ca:	55 1c       	adc	r5, r5
    19cc:	87 2d       	mov	r24, r7
    19ce:	8f 70       	andi	r24, 0x0F	; 15
    19d0:	e8 2e       	mov	r14, r24
    19d2:	f1 2c       	mov	r15, r1
    19d4:	ee 0c       	add	r14, r14
    19d6:	ff 1c       	adc	r15, r15
    19d8:	e5 0c       	add	r14, r5
    19da:	f1 1c       	adc	r15, r1
    19dc:	f7 01       	movw	r30, r14
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	ee 0f       	add	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	ee 0f       	add	r30, r30
    19e8:	ff 1f       	adc	r31, r31
    19ea:	e0 50       	subi	r30, 0x00	; 0
    19ec:	fe 4d       	sbci	r31, 0xDE	; 222
    19ee:	85 85       	ldd	r24, Z+13	; 0x0d
    19f0:	80 7c       	andi	r24, 0xC0	; 192
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <udd_ep_run+0x62>
    19f4:	82 c0       	rjmp	.+260    	; 0x1afa <udd_ep_run+0x166>
    19f6:	f7 01       	movw	r30, r14
    19f8:	ee 0f       	add	r30, r30
    19fa:	ff 1f       	adc	r31, r31
    19fc:	ee 0f       	add	r30, r30
    19fe:	ff 1f       	adc	r31, r31
    1a00:	ee 0f       	add	r30, r30
    1a02:	ff 1f       	adc	r31, r31
    1a04:	e0 50       	subi	r30, 0x00	; 0
    1a06:	fe 4d       	sbci	r31, 0xDE	; 222
    1a08:	85 85       	ldd	r24, Z+13	; 0x0d
    1a0a:	80 7c       	andi	r24, 0xC0	; 192
    1a0c:	80 3c       	cpi	r24, 0xC0	; 192
    1a0e:	61 f0       	breq	.+24     	; 0x1a28 <udd_ep_run+0x94>
    1a10:	f7 01       	movw	r30, r14
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	e0 50       	subi	r30, 0x00	; 0
    1a20:	fe 4d       	sbci	r31, 0xDE	; 222
    1a22:	85 85       	ldd	r24, Z+13	; 0x0d
    1a24:	82 fd       	sbrc	r24, 2
    1a26:	6b c0       	rjmp	.+214    	; 0x1afe <udd_ep_run+0x16a>
    1a28:	8f b7       	in	r24, 0x3f	; 63
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	f8 94       	cli
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	f6 01       	movw	r30, r12
    1a32:	90 81       	ld	r25, Z
    1a34:	90 ff       	sbrs	r25, 0
    1a36:	03 c0       	rjmp	.+6      	; 0x1a3e <udd_ep_run+0xaa>
    1a38:	8f bf       	out	0x3f, r24	; 63
    1a3a:	51 2c       	mov	r5, r1
    1a3c:	61 c0       	rjmp	.+194    	; 0x1b00 <udd_ep_run+0x16c>
    1a3e:	f6 01       	movw	r30, r12
    1a40:	90 81       	ld	r25, Z
    1a42:	91 60       	ori	r25, 0x01	; 1
    1a44:	90 83       	st	Z, r25
    1a46:	8f bf       	out	0x3f, r24	; 63
    1a48:	81 82       	std	Z+1, r8	; 0x01
    1a4a:	92 82       	std	Z+2, r9	; 0x02
    1a4c:	a3 82       	std	Z+3, r10	; 0x03
    1a4e:	b4 82       	std	Z+4, r11	; 0x04
    1a50:	15 82       	std	Z+5, r1	; 0x05
    1a52:	16 82       	std	Z+6, r1	; 0x06
    1a54:	07 83       	std	Z+7, r16	; 0x07
    1a56:	10 87       	std	Z+8, r17	; 0x08
    1a58:	61 10       	cpse	r6, r1
    1a5a:	06 c0       	rjmp	.+12     	; 0x1a68 <udd_ep_run+0xd4>
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	a1 14       	cp	r10, r1
    1a60:	b1 04       	cpc	r11, r1
    1a62:	19 f0       	breq	.+6      	; 0x1a6a <udd_ep_run+0xd6>
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <udd_ep_run+0xd6>
    1a68:	91 e0       	ldi	r25, 0x01	; 1
    1a6a:	f6 01       	movw	r30, r12
    1a6c:	80 81       	ld	r24, Z
    1a6e:	90 fb       	bst	r25, 0
    1a70:	81 f9       	bld	r24, 1
    1a72:	8b 7f       	andi	r24, 0xFB	; 251
    1a74:	80 83       	st	Z, r24
    1a76:	55 20       	and	r5, r5
    1a78:	61 f0       	breq	.+24     	; 0x1a92 <udd_ep_run+0xfe>
    1a7a:	f7 01       	movw	r30, r14
    1a7c:	ee 0f       	add	r30, r30
    1a7e:	ff 1f       	adc	r31, r31
    1a80:	ee 0f       	add	r30, r30
    1a82:	ff 1f       	adc	r31, r31
    1a84:	ee 0f       	add	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	e0 50       	subi	r30, 0x00	; 0
    1a8a:	fe 4d       	sbci	r31, 0xDE	; 222
    1a8c:	12 8a       	std	Z+18, r1	; 0x12
    1a8e:	13 8a       	std	Z+19, r1	; 0x13
    1a90:	2f c0       	rjmp	.+94     	; 0x1af0 <udd_ep_run+0x15c>
    1a92:	f7 01       	movw	r30, r14
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	ee 0f       	add	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	e0 50       	subi	r30, 0x00	; 0
    1aa2:	fe 4d       	sbci	r31, 0xDE	; 222
    1aa4:	85 85       	ldd	r24, Z+13	; 0x0d
    1aa6:	80 7c       	andi	r24, 0xC0	; 192
    1aa8:	80 3c       	cpi	r24, 0xC0	; 192
    1aaa:	a9 f4       	brne	.+42     	; 0x1ad6 <udd_ep_run+0x142>
    1aac:	c7 01       	movw	r24, r14
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	84 5f       	subi	r24, 0xF4	; 244
    1abc:	9d 4d       	sbci	r25, 0xDD	; 221
    1abe:	8f db       	rcall	.-2274   	; 0x11de <udd_ep_get_size>
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	c5 01       	movw	r24, r10
    1ac4:	0e 94 08 19 	call	0x3210	; 0x3210 <__udivmodhi4>
    1ac8:	89 2b       	or	r24, r25
    1aca:	29 f0       	breq	.+10     	; 0x1ad6 <udd_ep_run+0x142>
    1acc:	f6 01       	movw	r30, r12
    1ace:	80 81       	ld	r24, Z
    1ad0:	8e 7f       	andi	r24, 0xFE	; 254
    1ad2:	80 83       	st	Z, r24
    1ad4:	15 c0       	rjmp	.+42     	; 0x1b00 <udd_ep_run+0x16c>
    1ad6:	f7 01       	movw	r30, r14
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	e0 50       	subi	r30, 0x00	; 0
    1ae6:	fe 4d       	sbci	r31, 0xDE	; 222
    1ae8:	16 86       	std	Z+14, r1	; 0x0e
    1aea:	17 86       	std	Z+15, r1	; 0x0f
    1aec:	12 8a       	std	Z+18, r1	; 0x12
    1aee:	13 8a       	std	Z+19, r1	; 0x13
    1af0:	87 2d       	mov	r24, r7
    1af2:	2b dc       	rcall	.-1962   	; 0x134a <udd_ep_trans_complet>
    1af4:	55 24       	eor	r5, r5
    1af6:	53 94       	inc	r5
    1af8:	03 c0       	rjmp	.+6      	; 0x1b00 <udd_ep_run+0x16c>
    1afa:	51 2c       	mov	r5, r1
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <udd_ep_run+0x16c>
    1afe:	51 2c       	mov	r5, r1
    1b00:	85 2d       	mov	r24, r5
    1b02:	0f 90       	pop	r0
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	df 90       	pop	r13
    1b12:	cf 90       	pop	r12
    1b14:	bf 90       	pop	r11
    1b16:	af 90       	pop	r10
    1b18:	9f 90       	pop	r9
    1b1a:	8f 90       	pop	r8
    1b1c:	7f 90       	pop	r7
    1b1e:	6f 90       	pop	r6
    1b20:	5f 90       	pop	r5
    1b22:	08 95       	ret

00001b24 <udd_ep_abort>:
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	18 2f       	mov	r17, r24
    1b30:	f8 2e       	mov	r15, r24
    1b32:	ff 1c       	adc	r15, r15
    1b34:	ff 24       	eor	r15, r15
    1b36:	ff 1c       	adc	r15, r15
    1b38:	c8 2f       	mov	r28, r24
    1b3a:	cf 70       	andi	r28, 0x0F	; 15
    1b3c:	d0 e0       	ldi	r29, 0x00	; 0
    1b3e:	cc 0f       	add	r28, r28
    1b40:	dd 1f       	adc	r29, r29
    1b42:	cf 0d       	add	r28, r15
    1b44:	d1 1d       	adc	r29, r1
    1b46:	74 db       	rcall	.-2328   	; 0x1230 <udd_ep_get_job>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	ee 0f       	add	r30, r30
    1b52:	ff 1f       	adc	r31, r31
    1b54:	ee 0f       	add	r30, r30
    1b56:	ff 1f       	adc	r31, r31
    1b58:	e4 5f       	subi	r30, 0xF4	; 244
    1b5a:	fd 4d       	sbci	r31, 0xDD	; 221
    1b5c:	02 e0       	ldi	r16, 0x02	; 2
    1b5e:	05 93       	las	Z, r16
    1b60:	8c 91       	ld	r24, X
    1b62:	80 ff       	sbrs	r24, 0
    1b64:	22 c0       	rjmp	.+68     	; 0x1baa <udd_ep_abort+0x86>
    1b66:	8e 7f       	andi	r24, 0xFE	; 254
    1b68:	8c 93       	st	X, r24
    1b6a:	17 96       	adiw	r26, 0x07	; 7
    1b6c:	ed 91       	ld	r30, X+
    1b6e:	fc 91       	ld	r31, X
    1b70:	18 97       	sbiw	r26, 0x08	; 8
    1b72:	30 97       	sbiw	r30, 0x00	; 0
    1b74:	d1 f0       	breq	.+52     	; 0x1baa <udd_ep_abort+0x86>
    1b76:	ff 20       	and	r15, r15
    1b78:	59 f0       	breq	.+22     	; 0x1b90 <udd_ep_abort+0x6c>
    1b7a:	cc 0f       	add	r28, r28
    1b7c:	dd 1f       	adc	r29, r29
    1b7e:	cc 0f       	add	r28, r28
    1b80:	dd 1f       	adc	r29, r29
    1b82:	cc 0f       	add	r28, r28
    1b84:	dd 1f       	adc	r29, r29
    1b86:	c0 50       	subi	r28, 0x00	; 0
    1b88:	de 4d       	sbci	r29, 0xDE	; 222
    1b8a:	6a 89       	ldd	r22, Y+18	; 0x12
    1b8c:	7b 89       	ldd	r23, Y+19	; 0x13
    1b8e:	0a c0       	rjmp	.+20     	; 0x1ba4 <udd_ep_abort+0x80>
    1b90:	cc 0f       	add	r28, r28
    1b92:	dd 1f       	adc	r29, r29
    1b94:	cc 0f       	add	r28, r28
    1b96:	dd 1f       	adc	r29, r29
    1b98:	cc 0f       	add	r28, r28
    1b9a:	dd 1f       	adc	r29, r29
    1b9c:	c0 50       	subi	r28, 0x00	; 0
    1b9e:	de 4d       	sbci	r29, 0xDE	; 222
    1ba0:	6e 85       	ldd	r22, Y+14	; 0x0e
    1ba2:	7f 85       	ldd	r23, Y+15	; 0x0f
    1ba4:	41 2f       	mov	r20, r17
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	19 95       	eicall
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	ff 90       	pop	r15
    1bb4:	08 95       	ret

00001bb6 <udd_ep_free>:
    1bb6:	cf 93       	push	r28
    1bb8:	c8 2f       	mov	r28, r24
    1bba:	b4 df       	rcall	.-152    	; 0x1b24 <udd_ep_abort>
    1bbc:	ec 2f       	mov	r30, r28
    1bbe:	ef 70       	andi	r30, 0x0F	; 15
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	8c 2f       	mov	r24, r28
    1bc8:	cc 0f       	add	r28, r28
    1bca:	99 0b       	sbc	r25, r25
    1bcc:	88 27       	eor	r24, r24
    1bce:	99 0f       	add	r25, r25
    1bd0:	88 1f       	adc	r24, r24
    1bd2:	99 27       	eor	r25, r25
    1bd4:	e8 0f       	add	r30, r24
    1bd6:	f9 1f       	adc	r31, r25
    1bd8:	ee 0f       	add	r30, r30
    1bda:	ff 1f       	adc	r31, r31
    1bdc:	ee 0f       	add	r30, r30
    1bde:	ff 1f       	adc	r31, r31
    1be0:	ee 0f       	add	r30, r30
    1be2:	ff 1f       	adc	r31, r31
    1be4:	e0 50       	subi	r30, 0x00	; 0
    1be6:	fe 4d       	sbci	r31, 0xDE	; 222
    1be8:	15 86       	std	Z+13, r1	; 0x0d
    1bea:	cf 91       	pop	r28
    1bec:	08 95       	ret

00001bee <udd_ep_set_halt>:
    1bee:	e8 2f       	mov	r30, r24
    1bf0:	ef 70       	andi	r30, 0x0F	; 15
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	ee 0f       	add	r30, r30
    1bf6:	ff 1f       	adc	r31, r31
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	08 2e       	mov	r0, r24
    1bfc:	00 0c       	add	r0, r0
    1bfe:	33 0b       	sbc	r19, r19
    1c00:	22 27       	eor	r18, r18
    1c02:	33 0f       	add	r19, r19
    1c04:	22 1f       	adc	r18, r18
    1c06:	33 27       	eor	r19, r19
    1c08:	e2 0f       	add	r30, r18
    1c0a:	f3 1f       	adc	r31, r19
    1c0c:	ee 0f       	add	r30, r30
    1c0e:	ff 1f       	adc	r31, r31
    1c10:	ee 0f       	add	r30, r30
    1c12:	ff 1f       	adc	r31, r31
    1c14:	ee 0f       	add	r30, r30
    1c16:	ff 1f       	adc	r31, r31
    1c18:	e0 50       	subi	r30, 0x00	; 0
    1c1a:	fe 4d       	sbci	r31, 0xDE	; 222
    1c1c:	95 85       	ldd	r25, Z+13	; 0x0d
    1c1e:	94 60       	ori	r25, 0x04	; 4
    1c20:	95 87       	std	Z+13, r25	; 0x0d
    1c22:	80 df       	rcall	.-256    	; 0x1b24 <udd_ep_abort>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	08 95       	ret

00001c28 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1c28:	1f 92       	push	r1
    1c2a:	0f 92       	push	r0
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	0f 92       	push	r0
    1c30:	11 24       	eor	r1, r1
    1c32:	0b b6       	in	r0, 0x3b	; 59
    1c34:	0f 92       	push	r0
    1c36:	0f 93       	push	r16
    1c38:	2f 93       	push	r18
    1c3a:	3f 93       	push	r19
    1c3c:	4f 93       	push	r20
    1c3e:	5f 93       	push	r21
    1c40:	6f 93       	push	r22
    1c42:	7f 93       	push	r23
    1c44:	8f 93       	push	r24
    1c46:	9f 93       	push	r25
    1c48:	af 93       	push	r26
    1c4a:	bf 93       	push	r27
    1c4c:	ef 93       	push	r30
    1c4e:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1c50:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <__vector_125+0x3a>
		udd_ack_start_of_frame_event();
    1c58:	80 e8       	ldi	r24, 0x80	; 128
    1c5a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    1c5e:	ee d7       	rcall	.+4060   	; 0x2c3c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1c60:	87 c0       	rjmp	.+270    	; 0x1d70 <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1c62:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1c66:	82 ff       	sbrs	r24, 2
    1c68:	20 c0       	rjmp	.+64     	; 0x1caa <__vector_125+0x82>
		udd_ack_underflow_event();
    1c6a:	84 e0       	ldi	r24, 0x04	; 4
    1c6c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    1c70:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udd_sram+0x14>
    1c74:	86 ff       	sbrs	r24, 6
    1c76:	7c c0       	rjmp	.+248    	; 0x1d70 <__vector_125+0x148>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1c78:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1c7c:	81 fd       	sbrc	r24, 1
    1c7e:	78 c0       	rjmp	.+240    	; 0x1d70 <__vector_125+0x148>
    1c80:	f2 da       	rcall	.-2588   	; 0x1266 <udd_ctrl_interrupt_tc_setup>
    1c82:	81 11       	cpse	r24, r1
    1c84:	75 c0       	rjmp	.+234    	; 0x1d70 <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1c86:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ep_control_state>
    1c8a:	81 30       	cpi	r24, 0x01	; 1
    1c8c:	11 f4       	brne	.+4      	; 0x1c92 <__vector_125+0x6a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1c8e:	25 da       	rcall	.-2998   	; 0x10da <udd_ctrl_send_zlp_in>
    1c90:	6f c0       	rjmp	.+222    	; 0x1d70 <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1c92:	84 30       	cpi	r24, 0x04	; 4
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <__vector_125+0x70>
    1c96:	6c c0       	rjmp	.+216    	; 0x1d70 <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1c98:	e5 e1       	ldi	r30, 0x15	; 21
    1c9a:	f2 e2       	ldi	r31, 0x22	; 34
    1c9c:	04 e0       	ldi	r16, 0x04	; 4
    1c9e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1ca0:	ed e0       	ldi	r30, 0x0D	; 13
    1ca2:	f2 e2       	ldi	r31, 0x22	; 34
    1ca4:	04 e0       	ldi	r16, 0x04	; 4
    1ca6:	05 93       	las	Z, r16
    1ca8:	63 c0       	rjmp	.+198    	; 0x1d70 <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1caa:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1cae:	81 ff       	sbrs	r24, 1
    1cb0:	5a c0       	rjmp	.+180    	; 0x1d66 <__vector_125+0x13e>
		udd_ack_overflow_event();
    1cb2:	82 e0       	ldi	r24, 0x02	; 2
    1cb4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    1cb8:	80 91 0c 22 	lds	r24, 0x220C	; 0x80220c <udd_sram+0xc>
    1cbc:	86 ff       	sbrs	r24, 6
    1cbe:	58 c0       	rjmp	.+176    	; 0x1d70 <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1cc0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1cc4:	81 fd       	sbrc	r24, 1
    1cc6:	54 c0       	rjmp	.+168    	; 0x1d70 <__vector_125+0x148>
    1cc8:	ce da       	rcall	.-2660   	; 0x1266 <udd_ctrl_interrupt_tc_setup>
    1cca:	81 11       	cpse	r24, r1
    1ccc:	51 c0       	rjmp	.+162    	; 0x1d70 <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1cce:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ep_control_state>
    1cd2:	82 30       	cpi	r24, 0x02	; 2
    1cd4:	41 f4       	brne	.+16     	; 0x1ce6 <__vector_125+0xbe>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1cd6:	84 e0       	ldi	r24, 0x04	; 4
    1cd8:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1cdc:	ec e0       	ldi	r30, 0x0C	; 12
    1cde:	f2 e2       	ldi	r31, 0x22	; 34
    1ce0:	02 e0       	ldi	r16, 0x02	; 2
    1ce2:	06 93       	lac	Z, r16
    1ce4:	45 c0       	rjmp	.+138    	; 0x1d70 <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1ce6:	83 30       	cpi	r24, 0x03	; 3
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <__vector_125+0xc4>
    1cea:	42 c0       	rjmp	.+132    	; 0x1d70 <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1cec:	e5 e1       	ldi	r30, 0x15	; 21
    1cee:	f2 e2       	ldi	r31, 0x22	; 34
    1cf0:	04 e0       	ldi	r16, 0x04	; 4
    1cf2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1cf4:	ed e0       	ldi	r30, 0x0D	; 13
    1cf6:	f2 e2       	ldi	r31, 0x22	; 34
    1cf8:	04 e0       	ldi	r16, 0x04	; 4
    1cfa:	05 93       	las	Z, r16
    1cfc:	39 c0       	rjmp	.+114    	; 0x1d70 <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1cfe:	80 e1       	ldi	r24, 0x10	; 16
    1d00:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	0e df       	rcall	.-484    	; 0x1b24 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1d08:	81 e8       	ldi	r24, 0x81	; 129
    1d0a:	0c df       	rcall	.-488    	; 0x1b24 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	0a df       	rcall	.-492    	; 0x1b24 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1d10:	82 e8       	ldi	r24, 0x82	; 130
    1d12:	08 df       	rcall	.-496    	; 0x1b24 <udd_ep_abort>
		}
#endif
		udc_reset();
    1d14:	6a d7       	rcall	.+3796   	; 0x2bea <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1d16:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1d1a:	e0 e0       	ldi	r30, 0x00	; 0
    1d1c:	f2 e2       	ldi	r31, 0x22	; 34
    1d1e:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    1d20:	96 e0       	ldi	r25, 0x06	; 6
    1d22:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1d24:	83 e4       	ldi	r24, 0x43	; 67
    1d26:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1d28:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    1d2a:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1d2c:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1d2e:	89 eb       	ldi	r24, 0xB9	; 185
    1d30:	91 e2       	ldi	r25, 0x21	; 33
    1d32:	80 8b       	std	Z+16, r24	; 0x10
    1d34:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    1d36:	9e d9       	rcall	.-3268   	; 0x1074 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1d38:	1b c0       	rjmp	.+54     	; 0x1d70 <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    1d3a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1d3e:	86 ff       	sbrs	r24, 6
    1d40:	07 c0       	rjmp	.+14     	; 0x1d50 <__vector_125+0x128>
		udd_ack_suspend_event();
    1d42:	80 e4       	ldi	r24, 0x40	; 64
    1d44:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	5c d9       	rcall	.-3400   	; 0x1004 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    1d4c:	a4 d2       	rcall	.+1352   	; 0x2296 <usb_callback_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    1d4e:	10 c0       	rjmp	.+32     	; 0x1d70 <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    1d50:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1d54:	85 ff       	sbrs	r24, 5
    1d56:	0c c0       	rjmp	.+24     	; 0x1d70 <__vector_125+0x148>
		udd_ack_resume_event();
    1d58:	80 e2       	ldi	r24, 0x20	; 32
    1d5a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	51 d9       	rcall	.-3422   	; 0x1004 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    1d62:	9a d2       	rcall	.+1332   	; 0x2298 <usb_callback_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    1d64:	05 c0       	rjmp	.+10     	; 0x1d70 <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1d66:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1d6a:	84 fd       	sbrc	r24, 4
    1d6c:	c8 cf       	rjmp	.-112    	; 0x1cfe <__vector_125+0xd6>
    1d6e:	e5 cf       	rjmp	.-54     	; 0x1d3a <__vector_125+0x112>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1d70:	ff 91       	pop	r31
    1d72:	ef 91       	pop	r30
    1d74:	bf 91       	pop	r27
    1d76:	af 91       	pop	r26
    1d78:	9f 91       	pop	r25
    1d7a:	8f 91       	pop	r24
    1d7c:	7f 91       	pop	r23
    1d7e:	6f 91       	pop	r22
    1d80:	5f 91       	pop	r21
    1d82:	4f 91       	pop	r20
    1d84:	3f 91       	pop	r19
    1d86:	2f 91       	pop	r18
    1d88:	0f 91       	pop	r16
    1d8a:	0f 90       	pop	r0
    1d8c:	0b be       	out	0x3b, r0	; 59
    1d8e:	0f 90       	pop	r0
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	0f 90       	pop	r0
    1d94:	1f 90       	pop	r1
    1d96:	18 95       	reti

00001d98 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1d98:	1f 92       	push	r1
    1d9a:	0f 92       	push	r0
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	0f 92       	push	r0
    1da0:	11 24       	eor	r1, r1
    1da2:	0b b6       	in	r0, 0x3b	; 59
    1da4:	0f 92       	push	r0
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	2f 93       	push	r18
    1dac:	3f 93       	push	r19
    1dae:	4f 93       	push	r20
    1db0:	5f 93       	push	r21
    1db2:	6f 93       	push	r22
    1db4:	7f 93       	push	r23
    1db6:	8f 93       	push	r24
    1db8:	9f 93       	push	r25
    1dba:	af 93       	push	r26
    1dbc:	bf 93       	push	r27
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	ef 93       	push	r30
    1dc4:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1dc6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1dca:	81 fd       	sbrc	r24, 1
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1dce:	4b da       	rcall	.-2922   	; 0x1266 <udd_ctrl_interrupt_tc_setup>
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	c4 c0       	rjmp	.+392    	; 0x1f5c <__vector_126+0x1c4>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1dda:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    1dde:	81 95       	neg	r24
    1de0:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1de2:	ec e0       	ldi	r30, 0x0C	; 12
    1de4:	f2 e2       	ldi	r31, 0x22	; 34
    1de6:	e8 1b       	sub	r30, r24
    1de8:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1dea:	20 81       	ld	r18, Z
    1dec:	31 81       	ldd	r19, Z+1	; 0x01
    1dee:	2c 50       	subi	r18, 0x0C	; 12
    1df0:	32 42       	sbci	r19, 0x22	; 34
    1df2:	36 95       	lsr	r19
    1df4:	27 95       	ror	r18
    1df6:	36 95       	lsr	r19
    1df8:	27 95       	ror	r18
    1dfa:	36 95       	lsr	r19
    1dfc:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1dfe:	82 2f       	mov	r24, r18
    1e00:	86 95       	lsr	r24
    1e02:	20 fd       	sbrc	r18, 0
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <__vector_126+0x72>
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <__vector_126+0x74>
    1e0a:	90 e8       	ldi	r25, 0x80	; 128
    1e0c:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1e0e:	e8 2f       	mov	r30, r24
    1e10:	ef 70       	andi	r30, 0x0F	; 15
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	ee 0f       	add	r30, r30
    1e16:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1e18:	28 2f       	mov	r18, r24
    1e1a:	08 2e       	mov	r0, r24
    1e1c:	00 0c       	add	r0, r0
    1e1e:	33 0b       	sbc	r19, r19
    1e20:	22 27       	eor	r18, r18
    1e22:	33 0f       	add	r19, r19
    1e24:	22 1f       	adc	r18, r18
    1e26:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1e28:	e2 0f       	add	r30, r18
    1e2a:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1e2c:	df 01       	movw	r26, r30
    1e2e:	aa 0f       	add	r26, r26
    1e30:	bb 1f       	adc	r27, r27
    1e32:	aa 0f       	add	r26, r26
    1e34:	bb 1f       	adc	r27, r27
    1e36:	aa 0f       	add	r26, r26
    1e38:	bb 1f       	adc	r27, r27
    1e3a:	a0 50       	subi	r26, 0x00	; 0
    1e3c:	be 4d       	sbci	r27, 0xDE	; 222
    1e3e:	1c 96       	adiw	r26, 0x0c	; 12
    1e40:	9c 91       	ld	r25, X
    1e42:	95 ff       	sbrs	r25, 5
    1e44:	8b c0       	rjmp	.+278    	; 0x1f5c <__vector_126+0x1c4>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1e46:	ee 0f       	add	r30, r30
    1e48:	ff 1f       	adc	r31, r31
    1e4a:	ee 0f       	add	r30, r30
    1e4c:	ff 1f       	adc	r31, r31
    1e4e:	ee 0f       	add	r30, r30
    1e50:	ff 1f       	adc	r31, r31
    1e52:	e4 5f       	subi	r30, 0xF4	; 244
    1e54:	fd 4d       	sbci	r31, 0xDD	; 221
    1e56:	00 e2       	ldi	r16, 0x20	; 32
    1e58:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1e5a:	81 11       	cpse	r24, r1
    1e5c:	7a c0       	rjmp	.+244    	; 0x1f52 <__vector_126+0x1ba>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1e5e:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ep_control_state>
    1e62:	84 30       	cpi	r24, 0x04	; 4
    1e64:	19 f4       	brne	.+6      	; 0x1e6c <__vector_126+0xd4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1e66:	47 d9       	rcall	.-3442   	; 0x10f6 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1e68:	05 d9       	rcall	.-3574   	; 0x1074 <udd_ctrl_init>
    1e6a:	78 c0       	rjmp	.+240    	; 0x1f5c <__vector_126+0x1c4>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1e6c:	00 91 0e 22 	lds	r16, 0x220E	; 0x80220e <udd_sram+0xe>
    1e70:	10 91 0f 22 	lds	r17, 0x220F	; 0x80220f <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1e74:	80 91 84 23 	lds	r24, 0x2384	; 0x802384 <udd_g_ctrlreq+0xa>
    1e78:	90 91 85 23 	lds	r25, 0x2385	; 0x802385 <udd_g_ctrlreq+0xb>
    1e7c:	c0 91 f9 21 	lds	r28, 0x21F9	; 0x8021f9 <udd_ctrl_payload_nb_trans>
    1e80:	d0 91 fa 21 	lds	r29, 0x21FA	; 0x8021fa <udd_ctrl_payload_nb_trans+0x1>
    1e84:	9e 01       	movw	r18, r28
    1e86:	20 0f       	add	r18, r16
    1e88:	31 1f       	adc	r19, r17
    1e8a:	82 17       	cp	r24, r18
    1e8c:	93 07       	cpc	r25, r19
    1e8e:	18 f4       	brcc	.+6      	; 0x1e96 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1e90:	8c 01       	movw	r16, r24
    1e92:	0c 1b       	sub	r16, r28
    1e94:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1e96:	80 91 82 23 	lds	r24, 0x2382	; 0x802382 <udd_g_ctrlreq+0x8>
    1e9a:	90 91 83 23 	lds	r25, 0x2383	; 0x802383 <udd_g_ctrlreq+0x9>
    1e9e:	a8 01       	movw	r20, r16
    1ea0:	69 eb       	ldi	r22, 0xB9	; 185
    1ea2:	71 e2       	ldi	r23, 0x21	; 33
    1ea4:	8c 0f       	add	r24, r28
    1ea6:	9d 1f       	adc	r25, r29
    1ea8:	0e 94 55 19 	call	0x32aa	; 0x32aa <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1eac:	c0 0f       	add	r28, r16
    1eae:	d1 1f       	adc	r29, r17
    1eb0:	c0 93 f9 21 	sts	0x21F9, r28	; 0x8021f9 <udd_ctrl_payload_nb_trans>
    1eb4:	d0 93 fa 21 	sts	0x21FA, r29	; 0x8021fa <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1eb8:	00 34       	cpi	r16, 0x40	; 64
    1eba:	11 05       	cpc	r17, r1
    1ebc:	69 f4       	brne	.+26     	; 0x1ed8 <__vector_126+0x140>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1ebe:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <udd_ctrl_prev_payload_nb_trans>
    1ec2:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <udd_ctrl_prev_payload_nb_trans+0x1>
    1ec6:	8c 0f       	add	r24, r28
    1ec8:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1eca:	20 91 80 23 	lds	r18, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    1ece:	30 91 81 23 	lds	r19, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    1ed2:	82 17       	cp	r24, r18
    1ed4:	93 07       	cpc	r25, r19
    1ed6:	80 f0       	brcs	.+32     	; 0x1ef8 <__vector_126+0x160>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1ed8:	ea e7       	ldi	r30, 0x7A	; 122
    1eda:	f3 e2       	ldi	r31, 0x23	; 35
    1edc:	c2 87       	std	Z+10, r28	; 0x0a
    1ede:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1ee0:	06 84       	ldd	r0, Z+14	; 0x0e
    1ee2:	f7 85       	ldd	r31, Z+15	; 0x0f
    1ee4:	e0 2d       	mov	r30, r0
    1ee6:	30 97       	sbiw	r30, 0x00	; 0
    1ee8:	29 f0       	breq	.+10     	; 0x1ef4 <__vector_126+0x15c>
			if (!udd_g_ctrlreq.over_under_run()) {
    1eea:	19 95       	eicall
    1eec:	81 11       	cpse	r24, r1
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <__vector_126+0x15c>
				// Stall ZLP
				udd_ctrl_stall_data();
    1ef0:	e6 d8       	rcall	.-3636   	; 0x10be <udd_ctrl_stall_data>
    1ef2:	34 c0       	rjmp	.+104    	; 0x1f5c <__vector_126+0x1c4>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1ef4:	f2 d8       	rcall	.-3612   	; 0x10da <udd_ctrl_send_zlp_in>
    1ef6:	32 c0       	rjmp	.+100    	; 0x1f5c <__vector_126+0x1c4>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1ef8:	80 91 84 23 	lds	r24, 0x2384	; 0x802384 <udd_g_ctrlreq+0xa>
    1efc:	90 91 85 23 	lds	r25, 0x2385	; 0x802385 <udd_g_ctrlreq+0xb>
    1f00:	c8 17       	cp	r28, r24
    1f02:	d9 07       	cpc	r29, r25
    1f04:	f9 f4       	brne	.+62     	; 0x1f44 <__vector_126+0x1ac>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1f06:	e0 91 88 23 	lds	r30, 0x2388	; 0x802388 <udd_g_ctrlreq+0xe>
    1f0a:	f0 91 89 23 	lds	r31, 0x2389	; 0x802389 <udd_g_ctrlreq+0xf>
    1f0e:	30 97       	sbiw	r30, 0x00	; 0
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <__vector_126+0x17e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1f12:	d5 d8       	rcall	.-3670   	; 0x10be <udd_ctrl_stall_data>
    1f14:	23 c0       	rjmp	.+70     	; 0x1f5c <__vector_126+0x1c4>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1f16:	19 95       	eicall
    1f18:	81 11       	cpse	r24, r1
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <__vector_126+0x188>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1f1c:	d0 d8       	rcall	.-3680   	; 0x10be <udd_ctrl_stall_data>
    1f1e:	1e c0       	rjmp	.+60     	; 0x1f5c <__vector_126+0x1c4>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1f20:	20 91 fb 21 	lds	r18, 0x21FB	; 0x8021fb <udd_ctrl_prev_payload_nb_trans>
    1f24:	30 91 fc 21 	lds	r19, 0x21FC	; 0x8021fc <udd_ctrl_prev_payload_nb_trans+0x1>
    1f28:	80 91 f9 21 	lds	r24, 0x21F9	; 0x8021f9 <udd_ctrl_payload_nb_trans>
    1f2c:	90 91 fa 21 	lds	r25, 0x21FA	; 0x8021fa <udd_ctrl_payload_nb_trans+0x1>
    1f30:	82 0f       	add	r24, r18
    1f32:	93 1f       	adc	r25, r19
    1f34:	80 93 fb 21 	sts	0x21FB, r24	; 0x8021fb <udd_ctrl_prev_payload_nb_trans>
    1f38:	90 93 fc 21 	sts	0x21FC, r25	; 0x8021fc <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1f3c:	10 92 f9 21 	sts	0x21F9, r1	; 0x8021f9 <udd_ctrl_payload_nb_trans>
    1f40:	10 92 fa 21 	sts	0x21FA, r1	; 0x8021fa <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1f44:	ec e0       	ldi	r30, 0x0C	; 12
    1f46:	f2 e2       	ldi	r31, 0x22	; 34
    1f48:	02 e0       	ldi	r16, 0x02	; 2
    1f4a:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    1f4c:	00 e2       	ldi	r16, 0x20	; 32
    1f4e:	06 93       	lac	Z, r16
    1f50:	05 c0       	rjmp	.+10     	; 0x1f5c <__vector_126+0x1c4>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1f52:	80 38       	cpi	r24, 0x80	; 128
    1f54:	11 f4       	brne	.+4      	; 0x1f5a <__vector_126+0x1c2>
		udd_ctrl_in_sent();
    1f56:	d7 d8       	rcall	.-3666   	; 0x1106 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <__vector_126+0x1c4>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1f5a:	f7 d9       	rcall	.-3090   	; 0x134a <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1f5c:	ff 91       	pop	r31
    1f5e:	ef 91       	pop	r30
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	bf 91       	pop	r27
    1f66:	af 91       	pop	r26
    1f68:	9f 91       	pop	r25
    1f6a:	8f 91       	pop	r24
    1f6c:	7f 91       	pop	r23
    1f6e:	6f 91       	pop	r22
    1f70:	5f 91       	pop	r21
    1f72:	4f 91       	pop	r20
    1f74:	3f 91       	pop	r19
    1f76:	2f 91       	pop	r18
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	0f 90       	pop	r0
    1f7e:	0b be       	out	0x3b, r0	; 59
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    1f8a:	cf 92       	push	r12
    1f8c:	df 92       	push	r13
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    1f98:	6b 01       	movw	r12, r22
    1f9a:	e1 2c       	mov	r14, r1
    1f9c:	f1 2c       	mov	r15, r1
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	77 e8       	ldi	r23, 0x87	; 135
    1fa2:	83 e9       	ldi	r24, 0x93	; 147
    1fa4:	93 e0       	ldi	r25, 0x03	; 3
    1fa6:	a7 01       	movw	r20, r14
    1fa8:	96 01       	movw	r18, r12
    1faa:	0e 94 1c 19 	call	0x3238	; 0x3238 <__udivmodsi4>
    1fae:	ca 01       	movw	r24, r20
    1fb0:	b9 01       	movw	r22, r18
    1fb2:	2f ef       	ldi	r18, 0xFF	; 255
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	0e 94 1c 19 	call	0x3238	; 0x3238 <__udivmodsi4>
	if (smallest_div < 1) {
    1fbe:	21 15       	cp	r18, r1
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	29 f4       	brne	.+10     	; 0x1fce <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    1fc8:	21 e0       	ldi	r18, 0x01	; 1
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	2d c0       	rjmp	.+90     	; 0x2028 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    1fce:	22 30       	cpi	r18, 0x02	; 2
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	28 f4       	brcc	.+10     	; 0x1fde <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    1fd8:	22 e0       	ldi	r18, 0x02	; 2
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	25 c0       	rjmp	.+74     	; 0x2028 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    1fde:	24 30       	cpi	r18, 0x04	; 4
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	28 f4       	brcc	.+10     	; 0x1fee <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    1fe8:	24 e0       	ldi	r18, 0x04	; 4
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	1d c0       	rjmp	.+58     	; 0x2028 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    1fee:	28 30       	cpi	r18, 0x08	; 8
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	28 f4       	brcc	.+10     	; 0x1ffe <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    1ff4:	84 e0       	ldi	r24, 0x04	; 4
    1ff6:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    1ff8:	28 e0       	ldi	r18, 0x08	; 8
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	15 c0       	rjmp	.+42     	; 0x2028 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    1ffe:	20 34       	cpi	r18, 0x40	; 64
    2000:	31 05       	cpc	r19, r1
    2002:	28 f4       	brcc	.+10     	; 0x200e <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2004:	85 e0       	ldi	r24, 0x05	; 5
    2006:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2008:	20 e4       	ldi	r18, 0x40	; 64
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	0d c0       	rjmp	.+26     	; 0x2028 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    200e:	2f 3f       	cpi	r18, 0xFF	; 255
    2010:	31 05       	cpc	r19, r1
    2012:	09 f0       	breq	.+2      	; 0x2016 <pwm_set_frequency+0x8c>
    2014:	28 f4       	brcc	.+10     	; 0x2020 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2016:	86 e0       	ldi	r24, 0x06	; 6
    2018:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	31 e0       	ldi	r19, 0x01	; 1
    201e:	04 c0       	rjmp	.+8      	; 0x2028 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2020:	87 e0       	ldi	r24, 0x07	; 7
    2022:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	77 e8       	ldi	r23, 0x87	; 135
    2030:	83 e9       	ldi	r24, 0x93	; 147
    2032:	93 e0       	ldi	r25, 0x03	; 3
    2034:	0e 94 1c 19 	call	0x3238	; 0x3238 <__udivmodsi4>
    2038:	ca 01       	movw	r24, r20
    203a:	b9 01       	movw	r22, r18
    203c:	a7 01       	movw	r20, r14
    203e:	96 01       	movw	r18, r12
    2040:	0e 94 1c 19 	call	0x3238	; 0x3238 <__udivmodsi4>
    2044:	2d 83       	std	Y+5, r18	; 0x05
    2046:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2048:	24 36       	cpi	r18, 0x64	; 100
    204a:	31 05       	cpc	r19, r1
    204c:	18 f4       	brcc	.+6      	; 0x2054 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    204e:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2050:	1d 82       	std	Y+5, r1	; 0x05
    2052:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	ff 90       	pop	r15
    205a:	ef 90       	pop	r14
    205c:	df 90       	pop	r13
    205e:	cf 90       	pop	r12
    2060:	08 95       	ret

00002062 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	ec 01       	movw	r28, r24
    206c:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    206e:	86 2f       	mov	r24, r22
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	87 30       	cpi	r24, 0x07	; 7
    2074:	91 05       	cpc	r25, r1
    2076:	08 f0       	brcs	.+2      	; 0x207a <pwm_init+0x18>
    2078:	8b c0       	rjmp	.+278    	; 0x2190 <pwm_init+0x12e>
    207a:	fc 01       	movw	r30, r24
    207c:	88 27       	eor	r24, r24
    207e:	eb 5f       	subi	r30, 0xFB	; 251
    2080:	fe 4f       	sbci	r31, 0xFE	; 254
    2082:	8f 4f       	sbci	r24, 0xFF	; 255
    2084:	0c 94 3e 19 	jmp	0x327c	; 0x327c <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	98 e0       	ldi	r25, 0x08	; 8
    208c:	88 83       	st	Y, r24
    208e:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2090:	e0 e4       	ldi	r30, 0x40	; 64
    2092:	f6 e0       	ldi	r31, 0x06	; 6
    2094:	30 81       	ld	r19, Z
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	2f ef       	ldi	r18, 0xFF	; 255
    209c:	24 0f       	add	r18, r20
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <pwm_init+0x42>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	2a 95       	dec	r18
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <pwm_init+0x3e>
    20a8:	83 2b       	or	r24, r19
    20aa:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    20ac:	71 c0       	rjmp	.+226    	; 0x2190 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    20ae:	80 e4       	ldi	r24, 0x40	; 64
    20b0:	98 e0       	ldi	r25, 0x08	; 8
    20b2:	88 83       	st	Y, r24
    20b4:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    20b6:	e0 e4       	ldi	r30, 0x40	; 64
    20b8:	f6 e0       	ldi	r31, 0x06	; 6
    20ba:	30 81       	ld	r19, Z
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	23 e0       	ldi	r18, 0x03	; 3
    20c2:	24 0f       	add	r18, r20
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <pwm_init+0x68>
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	2a 95       	dec	r18
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <pwm_init+0x64>
    20ce:	83 2b       	or	r24, r19
    20d0:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    20d2:	5e c0       	rjmp	.+188    	; 0x2190 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	99 e0       	ldi	r25, 0x09	; 9
    20d8:	88 83       	st	Y, r24
    20da:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    20dc:	e0 e6       	ldi	r30, 0x60	; 96
    20de:	f6 e0       	ldi	r31, 0x06	; 6
    20e0:	30 81       	ld	r19, Z
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	2f ef       	ldi	r18, 0xFF	; 255
    20e8:	24 0f       	add	r18, r20
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <pwm_init+0x8e>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	2a 95       	dec	r18
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <pwm_init+0x8a>
    20f4:	83 2b       	or	r24, r19
    20f6:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    20f8:	4b c0       	rjmp	.+150    	; 0x2190 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    20fa:	80 e4       	ldi	r24, 0x40	; 64
    20fc:	99 e0       	ldi	r25, 0x09	; 9
    20fe:	88 83       	st	Y, r24
    2100:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2102:	e0 e6       	ldi	r30, 0x60	; 96
    2104:	f6 e0       	ldi	r31, 0x06	; 6
    2106:	30 81       	ld	r19, Z
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	23 e0       	ldi	r18, 0x03	; 3
    210e:	24 0f       	add	r18, r20
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <pwm_init+0xb4>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	2a 95       	dec	r18
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <pwm_init+0xb0>
    211a:	83 2b       	or	r24, r19
    211c:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    211e:	38 c0       	rjmp	.+112    	; 0x2190 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	9a e0       	ldi	r25, 0x0A	; 10
    2124:	88 83       	st	Y, r24
    2126:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2128:	e0 e8       	ldi	r30, 0x80	; 128
    212a:	f6 e0       	ldi	r31, 0x06	; 6
    212c:	30 81       	ld	r19, Z
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	2f ef       	ldi	r18, 0xFF	; 255
    2134:	24 0f       	add	r18, r20
    2136:	02 c0       	rjmp	.+4      	; 0x213c <pwm_init+0xda>
    2138:	88 0f       	add	r24, r24
    213a:	99 1f       	adc	r25, r25
    213c:	2a 95       	dec	r18
    213e:	e2 f7       	brpl	.-8      	; 0x2138 <pwm_init+0xd6>
    2140:	83 2b       	or	r24, r19
    2142:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2144:	25 c0       	rjmp	.+74     	; 0x2190 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    2146:	80 e4       	ldi	r24, 0x40	; 64
    2148:	9a e0       	ldi	r25, 0x0A	; 10
    214a:	88 83       	st	Y, r24
    214c:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    214e:	e0 e8       	ldi	r30, 0x80	; 128
    2150:	f6 e0       	ldi	r31, 0x06	; 6
    2152:	30 81       	ld	r19, Z
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	23 e0       	ldi	r18, 0x03	; 3
    215a:	24 0f       	add	r18, r20
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <pwm_init+0x100>
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	2a 95       	dec	r18
    2164:	e2 f7       	brpl	.-8      	; 0x215e <pwm_init+0xfc>
    2166:	83 2b       	or	r24, r19
    2168:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    216a:	12 c0       	rjmp	.+36     	; 0x2190 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	9b e0       	ldi	r25, 0x0B	; 11
    2170:	88 83       	st	Y, r24
    2172:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    2174:	e0 ea       	ldi	r30, 0xA0	; 160
    2176:	f6 e0       	ldi	r31, 0x06	; 6
    2178:	30 81       	ld	r19, Z
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	2f ef       	ldi	r18, 0xFF	; 255
    2180:	24 0f       	add	r18, r20
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <pwm_init+0x126>
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	2a 95       	dec	r18
    218a:	e2 f7       	brpl	.-8      	; 0x2184 <pwm_init+0x122>
    218c:	83 2b       	or	r24, r19
    218e:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    2190:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    2192:	42 30       	cpi	r20, 0x02	; 2
    2194:	61 f0       	breq	.+24     	; 0x21ae <pwm_init+0x14c>
    2196:	18 f4       	brcc	.+6      	; 0x219e <pwm_init+0x13c>
    2198:	41 30       	cpi	r20, 0x01	; 1
    219a:	31 f0       	breq	.+12     	; 0x21a8 <pwm_init+0x146>
    219c:	10 c0       	rjmp	.+32     	; 0x21be <pwm_init+0x15c>
    219e:	43 30       	cpi	r20, 0x03	; 3
    21a0:	49 f0       	breq	.+18     	; 0x21b4 <pwm_init+0x152>
    21a2:	44 30       	cpi	r20, 0x04	; 4
    21a4:	51 f0       	breq	.+20     	; 0x21ba <pwm_init+0x158>
    21a6:	0b c0       	rjmp	.+22     	; 0x21be <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    21a8:	80 e1       	ldi	r24, 0x10	; 16
    21aa:	8b 83       	std	Y+3, r24	; 0x03
		break;
    21ac:	08 c0       	rjmp	.+16     	; 0x21be <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	8b 83       	std	Y+3, r24	; 0x03
		break;
    21b2:	05 c0       	rjmp	.+10     	; 0x21be <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    21b4:	80 e4       	ldi	r24, 0x40	; 64
    21b6:	8b 83       	std	Y+3, r24	; 0x03
		break;
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    21ba:	80 e8       	ldi	r24, 0x80	; 128
    21bc:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    21be:	88 81       	ld	r24, Y
    21c0:	99 81       	ldd	r25, Y+1	; 0x01
    21c2:	0e 94 83 07 	call	0xf06	; 0xf06 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    21c6:	e8 81       	ld	r30, Y
    21c8:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    21ca:	81 81       	ldd	r24, Z+1	; 0x01
    21cc:	88 7f       	andi	r24, 0xF8	; 248
    21ce:	83 60       	ori	r24, 0x03	; 3
    21d0:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    21d2:	1d 82       	std	Y+5, r1	; 0x05
    21d4:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    21d6:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    21d8:	e8 81       	ld	r30, Y
    21da:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    21dc:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    21de:	80 7f       	andi	r24, 0xF0	; 240
    21e0:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    21e2:	b8 01       	movw	r22, r16
    21e4:	ce 01       	movw	r24, r28
    21e6:	d1 de       	rcall	.-606    	; 0x1f8a <pwm_set_frequency>
}
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	1f 91       	pop	r17
    21ee:	0f 91       	pop	r16
    21f0:	08 95       	ret

000021f2 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    21f8:	ad 81       	ldd	r26, Y+5	; 0x05
    21fa:	be 81       	ldd	r27, Y+6	; 0x06
    21fc:	26 2f       	mov	r18, r22
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	0e 94 46 19 	call	0x328c	; 0x328c <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    2204:	24 e6       	ldi	r18, 0x64	; 100
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e0       	ldi	r20, 0x00	; 0
    220a:	50 e0       	ldi	r21, 0x00	; 0
    220c:	0e 94 1c 19 	call	0x3238	; 0x3238 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	e8 81       	ld	r30, Y
    2214:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2216:	e6 fd       	sbrc	r30, 6
    2218:	17 c0       	rjmp	.+46     	; 0x2248 <pwm_start+0x56>
		switch (channel_index) {
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	61 f0       	breq	.+24     	; 0x2236 <pwm_start+0x44>
    221e:	18 f4       	brcc	.+6      	; 0x2226 <pwm_start+0x34>
    2220:	81 30       	cpi	r24, 0x01	; 1
    2222:	31 f0       	breq	.+12     	; 0x2230 <pwm_start+0x3e>
    2224:	1b c0       	rjmp	.+54     	; 0x225c <pwm_start+0x6a>
    2226:	83 30       	cpi	r24, 0x03	; 3
    2228:	49 f0       	breq	.+18     	; 0x223c <pwm_start+0x4a>
    222a:	84 30       	cpi	r24, 0x04	; 4
    222c:	51 f0       	breq	.+20     	; 0x2242 <pwm_start+0x50>
    222e:	16 c0       	rjmp	.+44     	; 0x225c <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    2230:	20 af       	std	Z+56, r18	; 0x38
    2232:	31 af       	std	Z+57, r19	; 0x39
    2234:	13 c0       	rjmp	.+38     	; 0x225c <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2236:	22 af       	std	Z+58, r18	; 0x3a
    2238:	33 af       	std	Z+59, r19	; 0x3b
    223a:	10 c0       	rjmp	.+32     	; 0x225c <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    223c:	24 af       	std	Z+60, r18	; 0x3c
    223e:	35 af       	std	Z+61, r19	; 0x3d
    2240:	0d c0       	rjmp	.+26     	; 0x225c <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2242:	26 af       	std	Z+62, r18	; 0x3e
    2244:	37 af       	std	Z+63, r19	; 0x3f
    2246:	0a c0       	rjmp	.+20     	; 0x225c <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	19 f0       	breq	.+6      	; 0x2252 <pwm_start+0x60>
    224c:	82 30       	cpi	r24, 0x02	; 2
    224e:	21 f0       	breq	.+8      	; 0x2258 <pwm_start+0x66>
    2250:	05 c0       	rjmp	.+10     	; 0x225c <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2252:	20 af       	std	Z+56, r18	; 0x38
    2254:	31 af       	std	Z+57, r19	; 0x39
    2256:	02 c0       	rjmp	.+4      	; 0x225c <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    2258:	22 af       	std	Z+58, r18	; 0x3a
    225a:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	e8 81       	ld	r30, Y
    2262:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2264:	86 a3       	std	Z+38, r24	; 0x26
    2266:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	e8 81       	ld	r30, Y
    226c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    226e:	e6 fd       	sbrc	r30, 6
    2270:	04 c0       	rjmp	.+8      	; 0x227a <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    2272:	91 81       	ldd	r25, Z+1	; 0x01
    2274:	89 2b       	or	r24, r25
    2276:	81 83       	std	Z+1, r24	; 0x01
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	80 73       	andi	r24, 0x30	; 48
    227e:	89 2b       	or	r24, r25
    2280:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    2282:	e8 81       	ld	r30, Y
    2284:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2286:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2288:	80 7f       	andi	r24, 0xF0	; 240
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	89 2b       	or	r24, r25
    228e:	80 83       	st	Z, r24
}
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret

00002296 <usb_callback_suspend_action>:

/* MAIN Loop Shutdown */

void halt(void)
{
	runmode = (uint8_t) 0;
    2296:	08 95       	ret

00002298 <usb_callback_resume_action>:
    2298:	08 95       	ret

0000229a <usb_callback_remotewakeup_enable>:
    229a:	08 95       	ret

0000229c <usb_callback_remotewakeup_disable>:
    229c:	08 95       	ret

0000229e <usb_callback_cdc_enable>:
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	80 93 41 22 	sts	0x2241, r24	; 0x802241 <my_flag_autorize_cdc_transfert>
    22a4:	08 95       	ret

000022a6 <usb_callback_cdc_disable>:
    22a6:	10 92 41 22 	sts	0x2241, r1	; 0x802241 <my_flag_autorize_cdc_transfert>
    22aa:	08 95       	ret

000022ac <usb_callback_config>:
    22ac:	08 95       	ret

000022ae <usb_callback_cdc_set_dtr>:
    22ae:	08 95       	ret

000022b0 <usb_callback_cdc_set_rts>:
    22b0:	08 95       	ret

000022b2 <usb_callback_rx_notify>:
    22b2:	08 95       	ret

000022b4 <usb_callback_tx_empty_notify>:
    22b4:	08 95       	ret

000022b6 <main>:


/* main() function implementation */

int main(void)
{
    22b6:	ff 92       	push	r15
    22b8:	0f 93       	push	r16
    22ba:	1f 93       	push	r17
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	27 97       	sbiw	r28, 0x07	; 7
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	de bf       	out	0x3e, r29	; 62
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    22ca:	00 ea       	ldi	r16, 0xA0	; 160
    22cc:	10 e0       	ldi	r17, 0x00	; 0
    22ce:	0f 2e       	mov	r0, r31
    22d0:	f7 e0       	ldi	r31, 0x07	; 7
    22d2:	ff 2e       	mov	r15, r31
    22d4:	f0 2d       	mov	r31, r0
    22d6:	d8 01       	movw	r26, r16
    22d8:	12 96       	adiw	r26, 0x02	; 2
    22da:	fc 92       	st	X, r15
	uint8_t retcode = 0;
	struct pwm_config pwm_vctcxo_cfg;
	
	pmic_init();
	sysclk_init();
    22dc:	83 d0       	rcall	.+262    	; 0x23e4 <sysclk_init>


	/* VCTCXO PWM signal generation */
#if 1
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_D, 500);							// Init pwm structure and enable timer
    22de:	24 ef       	ldi	r18, 0xF4	; 244
    22e0:	31 e0       	ldi	r19, 0x01	; 1
    22e2:	44 e0       	ldi	r20, 0x04	; 4
    22e4:	60 e0       	ldi	r22, 0x00	; 0
    22e6:	ce 01       	movw	r24, r28
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	bb de       	rcall	.-650    	; 0x2062 <pwm_init>
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    22ec:	6d e2       	ldi	r22, 0x2D	; 45
    22ee:	ce 01       	movw	r24, r28
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	7f df       	rcall	.-258    	; 0x21f2 <pwm_start>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    22f4:	e0 e0       	ldi	r30, 0x00	; 0
    22f6:	f8 e0       	ldi	r31, 0x08	; 8
    22f8:	8d e5       	ldi	r24, 0x5D	; 93
    22fa:	94 e7       	ldi	r25, 0x74	; 116
    22fc:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <__TEXT_REGION_LENGTH__+0x70083e>
    2300:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <__TEXT_REGION_LENGTH__+0x70083f>
	tc_write_cc_buffer(&TCC0, TC_CCD, (uint16_t) (65536 * 1.5f/3.3f));			// Initial value for VCTCXO @ 1.5 V
	tc_enable_cc_channels(&TCC0, TC_CCDEN);										// Enable PWM to pin alternate selection for TCC0D
#endif

	/* all interrupt sources prepared for enabling interrupt, here */
	irq_initialize_vectors();
    2304:	d8 01       	movw	r26, r16
    2306:	12 96       	adiw	r26, 0x02	; 2
    2308:	fc 92       	st	X, r15
	cpu_irq_enable();
    230a:	78 94       	sei
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    230c:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_TC0_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    230e:	80 7f       	andi	r24, 0xF0	; 240
    2310:	81 60       	ori	r24, 0x01	; 1
    2312:	80 83       	st	Z, r24

	/* all timer starts, here */
	tc_write_clock_source(&TCC0, TC_TC0_CLKSEL_DIV1_gc);			// VCTCXO PWM start, output still is Z-state
	
	/* activates all in/out pins - transitions from Z to dedicated states */
	board_init();
    2314:	0e 94 2e 01 	call	0x25c	; 0x25c <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2318:	ea e8       	ldi	r30, 0x8A	; 138
    231a:	f3 e2       	ldi	r31, 0x23	; 35
    231c:	10 82       	st	Z, r1
    231e:	11 82       	std	Z+1, r1	; 0x01
    2320:	12 82       	std	Z+2, r1	; 0x02
    2322:	13 82       	std	Z+3, r1	; 0x03
    2324:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2326:	11 e0       	ldi	r17, 0x01	; 1
    2328:	15 83       	std	Z+5, r17	; 0x05
	
	/* unlocks all sleep mode levels */
	sleepmgr_init();
	
	/* USB device stack start function to enable stack and start USB */
	udc_start();
    232a:	5c d4       	rcall	.+2232   	; 0x2be4 <udc_start>


	/* The application code */
	runmode = (uint8_t) 1;
    232c:	10 93 42 22 	sts	0x2242, r17	; 0x802242 <runmode>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2330:	4a e8       	ldi	r20, 0x8A	; 138
    2332:	53 e2       	ldi	r21, 0x23	; 35
    2334:	6b e8       	ldi	r22, 0x8B	; 139
    2336:	73 e2       	ldi	r23, 0x23	; 35
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    2338:	28 e4       	ldi	r18, 0x48	; 72
    233a:	30 e0       	ldi	r19, 0x00	; 0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    233c:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    233e:	fa 01       	movw	r30, r20
    2340:	80 81       	ld	r24, Z
    2342:	81 11       	cpse	r24, r1
    2344:	08 c0       	rjmp	.+16     	; 0x2356 <main+0xa0>
    2346:	db 01       	movw	r26, r22
    2348:	e0 e0       	ldi	r30, 0x00	; 0
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    234a:	ef 5f       	subi	r30, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    234c:	8d 91       	ld	r24, X+
    234e:	88 23       	and	r24, r24
    2350:	e1 f3       	breq	.-8      	; 0x234a <main+0x94>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    2352:	e1 11       	cpse	r30, r1
    2354:	02 c0       	rjmp	.+4      	; 0x235a <main+0xa4>
		cpu_irq_enable();
    2356:	78 94       	sei
    2358:	12 c0       	rjmp	.+36     	; 0x237e <main+0xc8>
    235a:	d9 01       	movw	r26, r18
    235c:	8c 91       	ld	r24, X

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	e1 50       	subi	r30, 0x01	; 1
    2362:	f0 4e       	sbci	r31, 0xE0	; 224
    2364:	81 7f       	andi	r24, 0xF1	; 241
    2366:	90 81       	ld	r25, Z
    2368:	89 2b       	or	r24, r25
    236a:	8c 93       	st	X, r24
	sleep_enable();
    236c:	8c 91       	ld	r24, X
    236e:	81 60       	ori	r24, 0x01	; 1
    2370:	8c 93       	st	X, r24

	cpu_irq_enable();
    2372:	78 94       	sei
	sleep_enter();
    2374:	88 95       	sleep

	sleep_disable();
    2376:	f9 01       	movw	r30, r18
    2378:	80 81       	ld	r24, Z
    237a:	8e 7f       	andi	r24, 0xFE	; 254
    237c:	80 83       	st	Z, r24
    while (runmode) {
    237e:	80 91 42 22 	lds	r24, 0x2242	; 0x802242 <runmode>
    2382:	81 11       	cpse	r24, r1
    2384:	db cf       	rjmp	.-74     	; 0x233c <main+0x86>
		task();
		sleepmgr_enter_sleep();
    }
	
	cpu_irq_disable();
    2386:	f8 94       	cli
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    2388:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    238a:	80 91 8a 23 	lds	r24, 0x238A	; 0x80238a <sleepmgr_locks>
    238e:	81 11       	cpse	r24, r1
    2390:	09 c0       	rjmp	.+18     	; 0x23a4 <main+0xee>
    2392:	ab e8       	ldi	r26, 0x8B	; 139
    2394:	b3 e2       	ldi	r27, 0x23	; 35
    2396:	e0 e0       	ldi	r30, 0x00	; 0
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    2398:	ef 5f       	subi	r30, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    239a:	8d 91       	ld	r24, X+
    239c:	88 23       	and	r24, r24
    239e:	e1 f3       	breq	.-8      	; 0x2398 <main+0xe2>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    23a0:	e1 11       	cpse	r30, r1
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <main+0xf2>
		cpu_irq_enable();
    23a4:	78 94       	sei
    23a6:	13 c0       	rjmp	.+38     	; 0x23ce <main+0x118>
    23a8:	a8 e4       	ldi	r26, 0x48	; 72
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	8c 91       	ld	r24, X

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	e1 50       	subi	r30, 0x01	; 1
    23b2:	f0 4e       	sbci	r31, 0xE0	; 224
    23b4:	98 2f       	mov	r25, r24
    23b6:	91 7f       	andi	r25, 0xF1	; 241
    23b8:	80 81       	ld	r24, Z
    23ba:	89 2b       	or	r24, r25
    23bc:	8c 93       	st	X, r24
	sleep_enable();
    23be:	8c 91       	ld	r24, X
    23c0:	81 60       	ori	r24, 0x01	; 1
    23c2:	8c 93       	st	X, r24

	cpu_irq_enable();
    23c4:	78 94       	sei
	sleep_enter();
    23c6:	88 95       	sleep

	sleep_disable();
    23c8:	8c 91       	ld	r24, X
    23ca:	8e 7f       	andi	r24, 0xFE	; 254
    23cc:	8c 93       	st	X, r24
	sleepmgr_enter_sleep();
	
	return retcode;
}
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	27 96       	adiw	r28, 0x07	; 7
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	ff 90       	pop	r15
    23e2:	08 95       	ret

000023e4 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	28 97       	sbiw	r28, 0x08	; 8
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	8f ef       	ldi	r24, 0xFF	; 255
    23f4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    23f8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    23fc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2400:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2404:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    2408:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    240c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    2410:	6c e1       	ldi	r22, 0x1C	; 28
    2412:	70 e0       	ldi	r23, 0x00	; 0
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	ec d6       	rcall	.+3544   	; 0x31f0 <nvm_read_byte>
    2418:	8a 83       	std	Y+2, r24	; 0x02
    241a:	6d e1       	ldi	r22, 0x1D	; 29
    241c:	70 e0       	ldi	r23, 0x00	; 0
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	e7 d6       	rcall	.+3534   	; 0x31f0 <nvm_read_byte>
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	9a 81       	ldd	r25, Y+2	; 0x02
    2428:	01 96       	adiw	r24, 0x01	; 1
    242a:	21 f4       	brne	.+8      	; 0x2434 <sysclk_init+0x50>
    242c:	80 e4       	ldi	r24, 0x40	; 64
    242e:	93 e2       	ldi	r25, 0x23	; 35
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	8b 83       	std	Y+3, r24	; 0x03
    243a:	9c 83       	std	Y+4, r25	; 0x04
    243c:	e0 e6       	ldi	r30, 0x60	; 96
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	82 83       	std	Z+2, r24	; 0x02
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	83 83       	std	Z+3, r24	; 0x03
    2446:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    244a:	84 fd       	sbrc	r24, 4
    244c:	21 c0       	rjmp	.+66     	; 0x2490 <sysclk_init+0xac>
    244e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    2452:	83 fd       	sbrc	r24, 3
    2454:	0e c0       	rjmp	.+28     	; 0x2472 <sysclk_init+0x8e>
    2456:	e0 e5       	ldi	r30, 0x50	; 80
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	12 82       	std	Z+2, r1	; 0x02
    245c:	8f b7       	in	r24, 0x3f	; 63
    245e:	8e 83       	std	Y+6, r24	; 0x06
    2460:	f8 94       	cli
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	80 81       	ld	r24, Z
    2466:	88 60       	ori	r24, 0x08	; 8
    2468:	80 83       	st	Z, r24
    246a:	9f bf       	out	0x3f, r25	; 63
    246c:	81 81       	ldd	r24, Z+1	; 0x01
    246e:	83 ff       	sbrs	r24, 3
    2470:	fd cf       	rjmp	.-6      	; 0x246c <sysclk_init+0x88>
    2472:	8f b7       	in	r24, 0x3f	; 63
    2474:	8f 83       	std	Y+7, r24	; 0x07
    2476:	f8 94       	cli
    2478:	9f 81       	ldd	r25, Y+7	; 0x07
    247a:	e0 e5       	ldi	r30, 0x50	; 80
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	83 ec       	ldi	r24, 0xC3	; 195
    2480:	85 83       	std	Z+5, r24	; 0x05
    2482:	80 81       	ld	r24, Z
    2484:	80 61       	ori	r24, 0x10	; 16
    2486:	80 83       	st	Z, r24
    2488:	9f bf       	out	0x3f, r25	; 63
    248a:	81 81       	ldd	r24, Z+1	; 0x01
    248c:	84 ff       	sbrs	r24, 4
    248e:	fd cf       	rjmp	.-6      	; 0x248a <sysclk_init+0xa6>
    2490:	64 e0       	ldi	r22, 0x04	; 4
    2492:	80 e4       	ldi	r24, 0x40	; 64
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	b6 d6       	rcall	.+3436   	; 0x3204 <ccp_write_io>
    2498:	8f b7       	in	r24, 0x3f	; 63
    249a:	88 87       	std	Y+8, r24	; 0x08
    249c:	f8 94       	cli
    249e:	98 85       	ldd	r25, Y+8	; 0x08
    24a0:	e0 e5       	ldi	r30, 0x50	; 80
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	8e 7f       	andi	r24, 0xFE	; 254
    24a8:	80 83       	st	Z, r24
    24aa:	9f bf       	out	0x3f, r25	; 63
    24ac:	12 82       	std	Z+2, r1	; 0x02
    24ae:	8f b7       	in	r24, 0x3f	; 63
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	f8 94       	cli
    24b4:	9d 81       	ldd	r25, Y+5	; 0x05
    24b6:	80 81       	ld	r24, Z
    24b8:	88 60       	ori	r24, 0x08	; 8
    24ba:	80 83       	st	Z, r24
    24bc:	9f bf       	out	0x3f, r25	; 63
    24be:	81 81       	ldd	r24, Z+1	; 0x01
    24c0:	83 ff       	sbrs	r24, 3
    24c2:	fd cf       	rjmp	.-6      	; 0x24be <sysclk_init+0xda>
    24c4:	8b e0       	ldi	r24, 0x0B	; 11
    24c6:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
    24ca:	28 96       	adiw	r28, 0x08	; 8
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	08 95       	ret

000024d6 <sysclk_enable_module>:
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	1f 92       	push	r1
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	9f b7       	in	r25, 0x3f	; 63
    24e2:	99 83       	std	Y+1, r25	; 0x01
    24e4:	f8 94       	cli
    24e6:	99 81       	ldd	r25, Y+1	; 0x01
    24e8:	e8 2f       	mov	r30, r24
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	e0 59       	subi	r30, 0x90	; 144
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	60 95       	com	r22
    24f2:	80 81       	ld	r24, Z
    24f4:	68 23       	and	r22, r24
    24f6:	60 83       	st	Z, r22
    24f8:	9f bf       	out	0x3f, r25	; 63
    24fa:	0f 90       	pop	r0
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	08 95       	ret

00002502 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	1f 92       	push	r1
    2508:	1f 92       	push	r1
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    250e:	86 30       	cpi	r24, 0x06	; 6
    2510:	11 f0       	breq	.+4      	; 0x2516 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	01 c0       	rjmp	.+2      	; 0x2518 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    2516:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2518:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    251c:	81 fd       	sbrc	r24, 1
    251e:	2a c0       	rjmp	.+84     	; 0x2574 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2520:	8f b7       	in	r24, 0x3f	; 63
    2522:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2524:	f8 94       	cli
	return flags;
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2528:	e0 e5       	ldi	r30, 0x50	; 80
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	82 60       	ori	r24, 0x02	; 2
    2530:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2532:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2534:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2536:	81 ff       	sbrs	r24, 1
    2538:	fd cf       	rjmp	.-6      	; 0x2534 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    253a:	8f b7       	in	r24, 0x3f	; 63
    253c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    253e:	f8 94       	cli
	return flags;
    2540:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    2542:	a0 e5       	ldi	r26, 0x50	; 80
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	16 96       	adiw	r26, 0x06	; 6
    2548:	8c 91       	ld	r24, X
    254a:	16 97       	sbiw	r26, 0x06	; 6
    254c:	89 7f       	andi	r24, 0xF9	; 249
    254e:	16 96       	adiw	r26, 0x06	; 6
    2550:	8c 93       	st	X, r24
    2552:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    2554:	e0 e6       	ldi	r30, 0x60	; 96
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 e8       	ldi	r24, 0x80	; 128
    255a:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    255c:	8b eb       	ldi	r24, 0xBB	; 187
    255e:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    2560:	16 96       	adiw	r26, 0x06	; 6
    2562:	8c 91       	ld	r24, X
    2564:	16 97       	sbiw	r26, 0x06	; 6
    2566:	84 60       	ori	r24, 0x04	; 4
    2568:	16 96       	adiw	r26, 0x06	; 6
    256a:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    256c:	80 81       	ld	r24, Z
    256e:	81 60       	ori	r24, 0x01	; 1
    2570:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2572:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    2574:	63 60       	ori	r22, 0x03	; 3
    2576:	84 e4       	ldi	r24, 0x44	; 68
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	44 d6       	rcall	.+3208   	; 0x3204 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    257c:	60 e4       	ldi	r22, 0x40	; 64
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	aa df       	rcall	.-172    	; 0x24d6 <sysclk_enable_module>
}
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	08 95       	ret

0000258c <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
    258c:	80 91 58 23 	lds	r24, 0x2358	; 0x802358 <udi_cdc_nb_comm_enabled>
    2590:	81 50       	subi	r24, 0x01	; 1
    2592:	80 93 58 23 	sts	0x2358, r24	; 0x802358 <udi_cdc_nb_comm_enabled>
    2596:	08 95       	ret

00002598 <udi_cdc_data_setup>:
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	08 95       	ret

0000259c <udi_cdc_getsetting>:
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	08 95       	ret

000025a0 <udi_cdc_line_coding_received>:
    25a0:	66 e6       	ldi	r22, 0x66	; 102
    25a2:	73 e2       	ldi	r23, 0x23	; 35
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	82 ce       	rjmp	.-764    	; 0x22ac <usb_callback_config>
    25a8:	08 95       	ret

000025aa <udi_cdc_comm_enable>:
    25aa:	10 92 58 23 	sts	0x2358, r1	; 0x802358 <udi_cdc_nb_comm_enabled>
    25ae:	10 92 64 23 	sts	0x2364, r1	; 0x802364 <udi_cdc_state>
    25b2:	10 92 65 23 	sts	0x2365, r1	; 0x802365 <udi_cdc_state+0x1>
    25b6:	ea e5       	ldi	r30, 0x5A	; 90
    25b8:	f3 e2       	ldi	r31, 0x23	; 35
    25ba:	81 ea       	ldi	r24, 0xA1	; 161
    25bc:	80 83       	st	Z, r24
    25be:	80 e2       	ldi	r24, 0x20	; 32
    25c0:	81 83       	std	Z+1, r24	; 0x01
    25c2:	12 82       	std	Z+2, r1	; 0x02
    25c4:	13 82       	std	Z+3, r1	; 0x03
    25c6:	14 82       	std	Z+4, r1	; 0x04
    25c8:	15 82       	std	Z+5, r1	; 0x05
    25ca:	82 e0       	ldi	r24, 0x02	; 2
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	86 83       	std	Z+6, r24	; 0x06
    25d0:	97 83       	std	Z+7, r25	; 0x07
    25d2:	10 86       	std	Z+8, r1	; 0x08
    25d4:	11 86       	std	Z+9, r1	; 0x09
    25d6:	e6 e6       	ldi	r30, 0x66	; 102
    25d8:	f3 e2       	ldi	r31, 0x23	; 35
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	92 ec       	ldi	r25, 0xC2	; 194
    25de:	a1 e0       	ldi	r26, 0x01	; 1
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	80 83       	st	Z, r24
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	a2 83       	std	Z+2, r26	; 0x02
    25e8:	b3 83       	std	Z+3, r27	; 0x03
    25ea:	14 82       	std	Z+4, r1	; 0x04
    25ec:	15 82       	std	Z+5, r1	; 0x05
    25ee:	88 e0       	ldi	r24, 0x08	; 8
    25f0:	86 83       	std	Z+6, r24	; 0x06
    25f2:	bf 01       	movw	r22, r30
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	5a de       	rcall	.-844    	; 0x22ac <usb_callback_config>
    25f8:	52 de       	rcall	.-860    	; 0x229e <usb_callback_cdc_enable>
    25fa:	88 23       	and	r24, r24
    25fc:	29 f0       	breq	.+10     	; 0x2608 <udi_cdc_comm_enable+0x5e>
    25fe:	90 91 58 23 	lds	r25, 0x2358	; 0x802358 <udi_cdc_nb_comm_enabled>
    2602:	9f 5f       	subi	r25, 0xFF	; 255
    2604:	90 93 58 23 	sts	0x2358, r25	; 0x802358 <udi_cdc_nb_comm_enabled>
    2608:	08 95       	ret

0000260a <udi_cdc_tx_send>:
    260a:	ff 92       	push	r15
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	1f 92       	push	r1
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <udi_cdc_tx_trans_ongoing>
    261e:	81 11       	cpse	r24, r1
    2620:	95 c0       	rjmp	.+298    	; 0x274c <udi_cdc_tx_send+0x142>
    2622:	c7 d8       	rcall	.-3698   	; 0x17b2 <udd_is_high_speed>
    2624:	88 23       	and	r24, r24
    2626:	49 f0       	breq	.+18     	; 0x263a <udi_cdc_tx_send+0x30>
    2628:	00 91 47 22 	lds	r16, 0x2247	; 0x802247 <udi_cdc_tx_sof_num>
    262c:	10 91 48 22 	lds	r17, 0x2248	; 0x802248 <udi_cdc_tx_sof_num+0x1>
    2630:	cd d8       	rcall	.-3686   	; 0x17cc <udd_get_micro_frame_number>
    2632:	08 17       	cp	r16, r24
    2634:	19 07       	cpc	r17, r25
    2636:	51 f4       	brne	.+20     	; 0x264c <udi_cdc_tx_send+0x42>
    2638:	89 c0       	rjmp	.+274    	; 0x274c <udi_cdc_tx_send+0x142>
    263a:	00 91 47 22 	lds	r16, 0x2247	; 0x802247 <udi_cdc_tx_sof_num>
    263e:	10 91 48 22 	lds	r17, 0x2248	; 0x802248 <udi_cdc_tx_sof_num+0x1>
    2642:	bf d8       	rcall	.-3714   	; 0x17c2 <udd_get_frame_number>
    2644:	08 17       	cp	r16, r24
    2646:	19 07       	cpc	r17, r25
    2648:	09 f4       	brne	.+2      	; 0x264c <udi_cdc_tx_send+0x42>
    264a:	80 c0       	rjmp	.+256    	; 0x274c <udi_cdc_tx_send+0x142>
    264c:	8f b7       	in	r24, 0x3f	; 63
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	f8 94       	cli
    2652:	19 81       	ldd	r17, Y+1	; 0x01
    2654:	00 91 49 22 	lds	r16, 0x2249	; 0x802249 <udi_cdc_tx_buf_sel>
    2658:	e0 2f       	mov	r30, r16
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	ee 0f       	add	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	e6 5b       	subi	r30, 0xB6	; 182
    2662:	fd 4d       	sbci	r31, 0xDD	; 221
    2664:	80 81       	ld	r24, Z
    2666:	91 81       	ldd	r25, Z+1	; 0x01
    2668:	89 2b       	or	r24, r25
    266a:	f9 f4       	brne	.+62     	; 0x26aa <udi_cdc_tx_send+0xa0>
    266c:	80 91 43 22 	lds	r24, 0x2243	; 0x802243 <sof_zlp_counter.4986>
    2670:	90 91 44 22 	lds	r25, 0x2244	; 0x802244 <sof_zlp_counter.4986+0x1>
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	80 93 43 22 	sts	0x2243, r24	; 0x802243 <sof_zlp_counter.4986>
    267a:	90 93 44 22 	sts	0x2244, r25	; 0x802244 <sof_zlp_counter.4986+0x1>
    267e:	99 d8       	rcall	.-3790   	; 0x17b2 <udd_is_high_speed>
    2680:	81 11       	cpse	r24, r1
    2682:	07 c0       	rjmp	.+14     	; 0x2692 <udi_cdc_tx_send+0x88>
    2684:	80 91 43 22 	lds	r24, 0x2243	; 0x802243 <sof_zlp_counter.4986>
    2688:	90 91 44 22 	lds	r25, 0x2244	; 0x802244 <sof_zlp_counter.4986+0x1>
    268c:	84 36       	cpi	r24, 0x64	; 100
    268e:	91 05       	cpc	r25, r1
    2690:	50 f0       	brcs	.+20     	; 0x26a6 <udi_cdc_tx_send+0x9c>
    2692:	8f d8       	rcall	.-3810   	; 0x17b2 <udd_is_high_speed>
    2694:	88 23       	and	r24, r24
    2696:	49 f0       	breq	.+18     	; 0x26aa <udi_cdc_tx_send+0xa0>
    2698:	80 91 43 22 	lds	r24, 0x2243	; 0x802243 <sof_zlp_counter.4986>
    269c:	90 91 44 22 	lds	r25, 0x2244	; 0x802244 <sof_zlp_counter.4986+0x1>
    26a0:	80 32       	cpi	r24, 0x20	; 32
    26a2:	93 40       	sbci	r25, 0x03	; 3
    26a4:	10 f4       	brcc	.+4      	; 0x26aa <udi_cdc_tx_send+0xa0>
    26a6:	1f bf       	out	0x3f, r17	; 63
    26a8:	51 c0       	rjmp	.+162    	; 0x274c <udi_cdc_tx_send+0x142>
    26aa:	10 92 43 22 	sts	0x2243, r1	; 0x802243 <sof_zlp_counter.4986>
    26ae:	10 92 44 22 	sts	0x2244, r1	; 0x802244 <sof_zlp_counter.4986+0x1>
    26b2:	80 91 45 22 	lds	r24, 0x2245	; 0x802245 <udi_cdc_tx_both_buf_to_send>
    26b6:	81 11       	cpse	r24, r1
    26b8:	06 c0       	rjmp	.+12     	; 0x26c6 <udi_cdc_tx_send+0xbc>
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	01 11       	cpse	r16, r1
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	80 93 49 22 	sts	0x2249, r24	; 0x802249 <udi_cdc_tx_buf_sel>
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <udi_cdc_tx_send+0xc4>
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	01 11       	cpse	r16, r1
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	08 2f       	mov	r16, r24
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	80 93 46 22 	sts	0x2246, r24	; 0x802246 <udi_cdc_tx_trans_ongoing>
    26d4:	1f bf       	out	0x3f, r17	; 63
    26d6:	10 e0       	ldi	r17, 0x00	; 0
    26d8:	f8 01       	movw	r30, r16
    26da:	ee 0f       	add	r30, r30
    26dc:	ff 1f       	adc	r31, r31
    26de:	e6 5b       	subi	r30, 0xB6	; 182
    26e0:	fd 4d       	sbci	r31, 0xDD	; 221
    26e2:	ff 24       	eor	r15, r15
    26e4:	f3 94       	inc	r15
    26e6:	80 81       	ld	r24, Z
    26e8:	91 81       	ldd	r25, Z+1	; 0x01
    26ea:	80 34       	cpi	r24, 0x40	; 64
    26ec:	91 05       	cpc	r25, r1
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <udi_cdc_tx_send+0xe8>
    26f0:	f1 2c       	mov	r15, r1
    26f2:	ff 20       	and	r15, r15
    26f4:	79 f0       	breq	.+30     	; 0x2714 <udi_cdc_tx_send+0x10a>
    26f6:	5d d8       	rcall	.-3910   	; 0x17b2 <udd_is_high_speed>
    26f8:	88 23       	and	r24, r24
    26fa:	31 f0       	breq	.+12     	; 0x2708 <udi_cdc_tx_send+0xfe>
    26fc:	67 d8       	rcall	.-3890   	; 0x17cc <udd_get_micro_frame_number>
    26fe:	80 93 47 22 	sts	0x2247, r24	; 0x802247 <udi_cdc_tx_sof_num>
    2702:	90 93 48 22 	sts	0x2248, r25	; 0x802248 <udi_cdc_tx_sof_num+0x1>
    2706:	0a c0       	rjmp	.+20     	; 0x271c <udi_cdc_tx_send+0x112>
    2708:	5c d8       	rcall	.-3912   	; 0x17c2 <udd_get_frame_number>
    270a:	80 93 47 22 	sts	0x2247, r24	; 0x802247 <udi_cdc_tx_sof_num>
    270e:	90 93 48 22 	sts	0x2248, r25	; 0x802248 <udi_cdc_tx_sof_num+0x1>
    2712:	04 c0       	rjmp	.+8      	; 0x271c <udi_cdc_tx_send+0x112>
    2714:	10 92 47 22 	sts	0x2247, r1	; 0x802247 <udi_cdc_tx_sof_num>
    2718:	10 92 48 22 	sts	0x2248, r1	; 0x802248 <udi_cdc_tx_sof_num+0x1>
    271c:	f8 01       	movw	r30, r16
    271e:	ee 0f       	add	r30, r30
    2720:	ff 1f       	adc	r31, r31
    2722:	e6 5b       	subi	r30, 0xB6	; 182
    2724:	fd 4d       	sbci	r31, 0xDD	; 221
    2726:	20 81       	ld	r18, Z
    2728:	31 81       	ldd	r19, Z+1	; 0x01
    272a:	a8 01       	movw	r20, r16
    272c:	00 24       	eor	r0, r0
    272e:	56 95       	lsr	r21
    2730:	47 95       	ror	r20
    2732:	07 94       	ror	r0
    2734:	56 95       	lsr	r21
    2736:	47 95       	ror	r20
    2738:	07 94       	ror	r0
    273a:	54 2f       	mov	r21, r20
    273c:	40 2d       	mov	r20, r0
    273e:	42 5b       	subi	r20, 0xB2	; 178
    2740:	5d 4d       	sbci	r21, 0xDD	; 221
    2742:	00 eb       	ldi	r16, 0xB0	; 176
    2744:	13 e1       	ldi	r17, 0x13	; 19
    2746:	6f 2d       	mov	r22, r15
    2748:	81 e8       	ldi	r24, 0x81	; 129
    274a:	24 d9       	rcall	.-3512   	; 0x1994 <udd_ep_run>
    274c:	0f 90       	pop	r0
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	08 95       	ret

0000275a <udi_cdc_data_sof_notify>:
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	56 cf       	rjmp	.-340    	; 0x260a <udi_cdc_tx_send>
    275e:	08 95       	ret

00002760 <udi_cdc_data_sent>:
    2760:	81 11       	cpse	r24, r1
    2762:	19 c0       	rjmp	.+50     	; 0x2796 <udi_cdc_data_sent+0x36>
    2764:	20 91 49 22 	lds	r18, 0x2249	; 0x802249 <udi_cdc_tx_buf_sel>
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	22 23       	and	r18, r18
    276e:	11 f0       	breq	.+4      	; 0x2774 <udi_cdc_data_sent+0x14>
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	fc 01       	movw	r30, r24
    277a:	e6 5b       	subi	r30, 0xB6	; 182
    277c:	fd 4d       	sbci	r31, 0xDD	; 221
    277e:	10 82       	st	Z, r1
    2780:	11 82       	std	Z+1, r1	; 0x01
    2782:	10 92 45 22 	sts	0x2245, r1	; 0x802245 <udi_cdc_tx_both_buf_to_send>
    2786:	10 92 46 22 	sts	0x2246, r1	; 0x802246 <udi_cdc_tx_trans_ongoing>
    278a:	67 2b       	or	r22, r23
    278c:	11 f0       	breq	.+4      	; 0x2792 <udi_cdc_data_sent+0x32>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	91 dd       	rcall	.-1246   	; 0x22b4 <usb_callback_tx_empty_notify>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	3a cf       	rjmp	.-396    	; 0x260a <udi_cdc_tx_send>
    2796:	08 95       	ret

00002798 <udi_cdc_data_disable>:
    2798:	80 91 57 23 	lds	r24, 0x2357	; 0x802357 <udi_cdc_nb_data_enabled>
    279c:	81 50       	subi	r24, 0x01	; 1
    279e:	80 93 57 23 	sts	0x2357, r24	; 0x802357 <udi_cdc_nb_data_enabled>
    27a2:	80 91 57 23 	lds	r24, 0x2357	; 0x802357 <udi_cdc_nb_data_enabled>
    27a6:	7f dd       	rcall	.-1282   	; 0x22a6 <usb_callback_cdc_disable>
    27a8:	10 92 56 23 	sts	0x2356, r1	; 0x802356 <udi_cdc_data_running>
    27ac:	08 95       	ret

000027ae <udi_cdc_comm_setup>:
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <udd_g_ctrlreq>
    27b6:	88 23       	and	r24, r24
    27b8:	e4 f4       	brge	.+56     	; 0x27f2 <udi_cdc_comm_setup+0x44>
    27ba:	80 76       	andi	r24, 0x60	; 96
    27bc:	80 32       	cpi	r24, 0x20	; 32
    27be:	09 f0       	breq	.+2      	; 0x27c2 <udi_cdc_comm_setup+0x14>
    27c0:	47 c0       	rjmp	.+142    	; 0x2850 <udi_cdc_comm_setup+0xa2>
    27c2:	80 91 7b 23 	lds	r24, 0x237B	; 0x80237b <udd_g_ctrlreq+0x1>
    27c6:	81 32       	cpi	r24, 0x21	; 33
    27c8:	09 f0       	breq	.+2      	; 0x27cc <udi_cdc_comm_setup+0x1e>
    27ca:	44 c0       	rjmp	.+136    	; 0x2854 <udi_cdc_comm_setup+0xa6>
    27cc:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    27d0:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    27d4:	07 97       	sbiw	r24, 0x07	; 7
    27d6:	09 f0       	breq	.+2      	; 0x27da <udi_cdc_comm_setup+0x2c>
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <udi_cdc_comm_setup+0xaa>
    27da:	ea e7       	ldi	r30, 0x7A	; 122
    27dc:	f3 e2       	ldi	r31, 0x23	; 35
    27de:	86 e6       	ldi	r24, 0x66	; 102
    27e0:	93 e2       	ldi	r25, 0x23	; 35
    27e2:	80 87       	std	Z+8, r24	; 0x08
    27e4:	91 87       	std	Z+9, r25	; 0x09
    27e6:	87 e0       	ldi	r24, 0x07	; 7
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	82 87       	std	Z+10, r24	; 0x0a
    27ec:	93 87       	std	Z+11, r25	; 0x0b
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	3a c0       	rjmp	.+116    	; 0x2866 <udi_cdc_comm_setup+0xb8>
    27f2:	80 76       	andi	r24, 0x60	; 96
    27f4:	80 32       	cpi	r24, 0x20	; 32
    27f6:	91 f5       	brne	.+100    	; 0x285c <udi_cdc_comm_setup+0xae>
    27f8:	80 91 7b 23 	lds	r24, 0x237B	; 0x80237b <udd_g_ctrlreq+0x1>
    27fc:	80 32       	cpi	r24, 0x20	; 32
    27fe:	19 f0       	breq	.+6      	; 0x2806 <udi_cdc_comm_setup+0x58>
    2800:	82 32       	cpi	r24, 0x22	; 34
    2802:	b9 f0       	breq	.+46     	; 0x2832 <udi_cdc_comm_setup+0x84>
    2804:	2d c0       	rjmp	.+90     	; 0x2860 <udi_cdc_comm_setup+0xb2>
    2806:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    280a:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    280e:	07 97       	sbiw	r24, 0x07	; 7
    2810:	49 f5       	brne	.+82     	; 0x2864 <udi_cdc_comm_setup+0xb6>
    2812:	ea e7       	ldi	r30, 0x7A	; 122
    2814:	f3 e2       	ldi	r31, 0x23	; 35
    2816:	80 ed       	ldi	r24, 0xD0	; 208
    2818:	92 e1       	ldi	r25, 0x12	; 18
    281a:	84 87       	std	Z+12, r24	; 0x0c
    281c:	95 87       	std	Z+13, r25	; 0x0d
    281e:	86 e6       	ldi	r24, 0x66	; 102
    2820:	93 e2       	ldi	r25, 0x23	; 35
    2822:	80 87       	std	Z+8, r24	; 0x08
    2824:	91 87       	std	Z+9, r25	; 0x09
    2826:	87 e0       	ldi	r24, 0x07	; 7
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	82 87       	std	Z+10, r24	; 0x0a
    282c:	93 87       	std	Z+11, r25	; 0x0b
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	1a c0       	rjmp	.+52     	; 0x2866 <udi_cdc_comm_setup+0xb8>
    2832:	ca e7       	ldi	r28, 0x7A	; 122
    2834:	d3 e2       	ldi	r29, 0x23	; 35
    2836:	6a 81       	ldd	r22, Y+2	; 0x02
    2838:	61 70       	andi	r22, 0x01	; 1
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	38 dd       	rcall	.-1424   	; 0x22ae <usb_callback_cdc_set_dtr>
    283e:	6a 81       	ldd	r22, Y+2	; 0x02
    2840:	7b 81       	ldd	r23, Y+3	; 0x03
    2842:	76 95       	lsr	r23
    2844:	67 95       	ror	r22
    2846:	61 70       	andi	r22, 0x01	; 1
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	32 dd       	rcall	.-1436   	; 0x22b0 <usb_callback_cdc_set_rts>
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	0b c0       	rjmp	.+22     	; 0x2866 <udi_cdc_comm_setup+0xb8>
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	09 c0       	rjmp	.+18     	; 0x2866 <udi_cdc_comm_setup+0xb8>
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	07 c0       	rjmp	.+14     	; 0x2866 <udi_cdc_comm_setup+0xb8>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	05 c0       	rjmp	.+10     	; 0x2866 <udi_cdc_comm_setup+0xb8>
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	03 c0       	rjmp	.+6      	; 0x2866 <udi_cdc_comm_setup+0xb8>
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	01 c0       	rjmp	.+2      	; 0x2866 <udi_cdc_comm_setup+0xb8>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	08 95       	ret

0000286c <udi_cdc_multi_get_nb_received_data>:
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	1f 92       	push	r1
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	8f b7       	in	r24, 0x3f	; 63
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	f8 94       	cli
    287c:	49 81       	ldd	r20, Y+1	; 0x01
    287e:	20 91 cf 22 	lds	r18, 0x22CF	; 0x8022cf <udi_cdc_rx_pos>
    2882:	30 91 d0 22 	lds	r19, 0x22D0	; 0x8022d0 <udi_cdc_rx_pos+0x1>
    2886:	e0 91 d1 22 	lds	r30, 0x22D1	; 0x8022d1 <udi_cdc_rx_buf_sel>
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	ee 0f       	add	r30, r30
    288e:	ff 1f       	adc	r31, r31
    2890:	ee 52       	subi	r30, 0x2E	; 46
    2892:	fd 4d       	sbci	r31, 0xDD	; 221
    2894:	80 81       	ld	r24, Z
    2896:	91 81       	ldd	r25, Z+1	; 0x01
    2898:	4f bf       	out	0x3f, r20	; 63
    289a:	82 1b       	sub	r24, r18
    289c:	93 0b       	sbc	r25, r19
    289e:	0f 90       	pop	r0
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	08 95       	ret

000028a6 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    28a6:	e2 df       	rcall	.-60     	; 0x286c <udi_cdc_multi_get_nb_received_data>
    28a8:	21 e0       	ldi	r18, 0x01	; 1
    28aa:	89 2b       	or	r24, r25
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <udi_cdc_multi_is_rx_ready+0xa>
    28ae:	20 e0       	ldi	r18, 0x00	; 0
}
    28b0:	82 2f       	mov	r24, r18
    28b2:	08 95       	ret

000028b4 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	1f 92       	push	r1
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    28c2:	8f b7       	in	r24, 0x3f	; 63
    28c4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    28c6:	f8 94       	cli
	return flags;
    28c8:	99 81       	ldd	r25, Y+1	; 0x01
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    28ca:	20 91 d1 22 	lds	r18, 0x22D1	; 0x8022d1 <udi_cdc_rx_buf_sel>
	if (udi_cdc_rx_trans_ongoing[port] ||
    28ce:	80 91 ce 22 	lds	r24, 0x22CE	; 0x8022ce <udi_cdc_rx_trans_ongoing>
    28d2:	81 11       	cpse	r24, r1
    28d4:	10 c0       	rjmp	.+32     	; 0x28f6 <udi_cdc_rx_start+0x42>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    28d6:	60 91 cf 22 	lds	r22, 0x22CF	; 0x8022cf <udi_cdc_rx_pos>
    28da:	70 91 d0 22 	lds	r23, 0x22D0	; 0x8022d0 <udi_cdc_rx_pos+0x1>
    28de:	02 2f       	mov	r16, r18
    28e0:	10 e0       	ldi	r17, 0x00	; 0
    28e2:	f8 01       	movw	r30, r16
    28e4:	ee 0f       	add	r30, r30
    28e6:	ff 1f       	adc	r31, r31
    28e8:	ee 52       	subi	r30, 0x2E	; 46
    28ea:	fd 4d       	sbci	r31, 0xDD	; 221
    28ec:	40 81       	ld	r20, Z
    28ee:	51 81       	ldd	r21, Z+1	; 0x01
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    28f0:	64 17       	cp	r22, r20
    28f2:	75 07       	cpc	r23, r21
    28f4:	18 f4       	brcc	.+6      	; 0x28fc <udi_cdc_rx_start+0x48>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28f6:	9f bf       	out	0x3f, r25	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	26 c0       	rjmp	.+76     	; 0x2948 <udi_cdc_rx_start+0x94>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    28fc:	10 92 cf 22 	sts	0x22CF, r1	; 0x8022cf <udi_cdc_rx_pos>
    2900:	10 92 d0 22 	sts	0x22D0, r1	; 0x8022d0 <udi_cdc_rx_pos+0x1>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	21 11       	cpse	r18, r1
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	80 93 d1 22 	sts	0x22D1, r24	; 0x8022d1 <udi_cdc_rx_buf_sel>

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	80 93 ce 22 	sts	0x22CE, r24	; 0x8022ce <udi_cdc_rx_trans_ongoing>
    2914:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	c6 df       	rcall	.-116    	; 0x28a6 <udi_cdc_multi_is_rx_ready>
    291a:	88 23       	and	r24, r24
    291c:	11 f0       	breq	.+4      	; 0x2922 <udi_cdc_rx_start+0x6e>
		UDI_CDC_RX_NOTIFY(port);
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	c8 dc       	rcall	.-1648   	; 0x22b2 <usb_callback_rx_notify>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    2922:	a8 01       	movw	r20, r16
    2924:	00 24       	eor	r0, r0
    2926:	56 95       	lsr	r21
    2928:	47 95       	ror	r20
    292a:	07 94       	ror	r0
    292c:	56 95       	lsr	r21
    292e:	47 95       	ror	r20
    2930:	07 94       	ror	r0
    2932:	54 2f       	mov	r21, r20
    2934:	40 2d       	mov	r20, r0
    2936:	4a 52       	subi	r20, 0x2A	; 42
    2938:	5d 4d       	sbci	r21, 0xDD	; 221
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    293a:	0c ed       	ldi	r16, 0xDC	; 220
    293c:	14 e1       	ldi	r17, 0x14	; 20
    293e:	20 e4       	ldi	r18, 0x40	; 64
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	82 e0       	ldi	r24, 0x02	; 2
    2946:	26 d8       	rcall	.-4020   	; 0x1994 <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    2948:	0f 90       	pop	r0
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	1f 91       	pop	r17
    2950:	0f 91       	pop	r16
    2952:	08 95       	ret

00002954 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
    2954:	10 92 57 23 	sts	0x2357, r1	; 0x802357 <udi_cdc_nb_data_enabled>
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    2958:	10 92 46 22 	sts	0x2246, r1	; 0x802246 <udi_cdc_tx_trans_ongoing>
	udi_cdc_tx_both_buf_to_send[port] = false;
    295c:	10 92 45 22 	sts	0x2245, r1	; 0x802245 <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_buf_sel[port] = 0;
    2960:	10 92 49 22 	sts	0x2249, r1	; 0x802249 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf_nb[port][0] = 0;
    2964:	ea e4       	ldi	r30, 0x4A	; 74
    2966:	f2 e2       	ldi	r31, 0x22	; 34
    2968:	10 82       	st	Z, r1
    296a:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_buf_nb[port][1] = 0;
    296c:	12 82       	std	Z+2, r1	; 0x02
    296e:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_tx_sof_num[port] = 0;
    2970:	10 92 47 22 	sts	0x2247, r1	; 0x802247 <udi_cdc_tx_sof_num>
    2974:	10 92 48 22 	sts	0x2248, r1	; 0x802248 <udi_cdc_tx_sof_num+0x1>
	udi_cdc_tx_send(port);
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	47 de       	rcall	.-882    	; 0x260a <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    297c:	10 92 ce 22 	sts	0x22CE, r1	; 0x8022ce <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_buf_sel[port] = 0;
    2980:	10 92 d1 22 	sts	0x22D1, r1	; 0x8022d1 <udi_cdc_rx_buf_sel>
	udi_cdc_rx_buf_nb[port][0] = 0;
    2984:	e2 ed       	ldi	r30, 0xD2	; 210
    2986:	f2 e2       	ldi	r31, 0x22	; 34
    2988:	10 82       	st	Z, r1
    298a:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_rx_buf_nb[port][1] = 0;
    298c:	12 82       	std	Z+2, r1	; 0x02
    298e:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_rx_pos[port] = 0;
    2990:	10 92 cf 22 	sts	0x22CF, r1	; 0x8022cf <udi_cdc_rx_pos>
    2994:	10 92 d0 22 	sts	0x22D0, r1	; 0x8022d0 <udi_cdc_rx_pos+0x1>
	if (!udi_cdc_rx_start(port)) {
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	8c df       	rcall	.-232    	; 0x28b4 <udi_cdc_rx_start>
    299c:	88 23       	and	r24, r24
    299e:	59 f0       	breq	.+22     	; 0x29b6 <udi_cdc_data_enable+0x62>
		return false;
	}
	udi_cdc_nb_data_enabled++;
    29a0:	90 91 57 23 	lds	r25, 0x2357	; 0x802357 <udi_cdc_nb_data_enabled>
    29a4:	9f 5f       	subi	r25, 0xFF	; 255
    29a6:	90 93 57 23 	sts	0x2357, r25	; 0x802357 <udi_cdc_nb_data_enabled>
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    29aa:	90 91 57 23 	lds	r25, 0x2357	; 0x802357 <udi_cdc_nb_data_enabled>
    29ae:	91 30       	cpi	r25, 0x01	; 1
    29b0:	11 f4       	brne	.+4      	; 0x29b6 <udi_cdc_data_enable+0x62>
		udi_cdc_data_running = true;
    29b2:	90 93 56 23 	sts	0x2356, r25	; 0x802356 <udi_cdc_data_running>
	}
	return true;
}
    29b6:	08 95       	ret

000029b8 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    29bc:	81 11       	cpse	r24, r1
    29be:	29 c0       	rjmp	.+82     	; 0x2a12 <udi_cdc_data_received+0x5a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    29c0:	80 91 d1 22 	lds	r24, 0x22D1	; 0x8022d1 <udi_cdc_rx_buf_sel>
    29c4:	e1 e0       	ldi	r30, 0x01	; 1
    29c6:	81 11       	cpse	r24, r1
    29c8:	e0 e0       	ldi	r30, 0x00	; 0
    29ca:	84 2f       	mov	r24, r20
	if (!n) {
    29cc:	61 15       	cp	r22, r1
    29ce:	71 05       	cpc	r23, r1
    29d0:	a9 f4       	brne	.+42     	; 0x29fc <udi_cdc_data_received+0x44>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	00 24       	eor	r0, r0
    29d6:	f6 95       	lsr	r31
    29d8:	e7 95       	ror	r30
    29da:	07 94       	ror	r0
    29dc:	f6 95       	lsr	r31
    29de:	e7 95       	ror	r30
    29e0:	07 94       	ror	r0
    29e2:	fe 2f       	mov	r31, r30
    29e4:	e0 2d       	mov	r30, r0
    29e6:	af 01       	movw	r20, r30
    29e8:	4a 52       	subi	r20, 0x2A	; 42
    29ea:	5d 4d       	sbci	r21, 0xDD	; 221
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    29ec:	0c ed       	ldi	r16, 0xDC	; 220
    29ee:	14 e1       	ldi	r17, 0x14	; 20
    29f0:	20 e4       	ldi	r18, 0x40	; 64
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	61 e0       	ldi	r22, 0x01	; 1
    29f6:	0e 94 ca 0c 	call	0x1994	; 0x1994 <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    29fa:	0b c0       	rjmp	.+22     	; 0x2a12 <udi_cdc_data_received+0x5a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	ee 0f       	add	r30, r30
    2a00:	ff 1f       	adc	r31, r31
    2a02:	ee 52       	subi	r30, 0x2E	; 46
    2a04:	fd 4d       	sbci	r31, 0xDD	; 221
    2a06:	60 83       	st	Z, r22
    2a08:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
    2a0a:	10 92 ce 22 	sts	0x22CE, r1	; 0x8022ce <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_start(port);
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	51 df       	rcall	.-350    	; 0x28b4 <udi_cdc_rx_start>
}
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	08 95       	ret

00002a18 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    2a18:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <udc_ptr_conf>
    2a1c:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    2a20:	01 90       	ld	r0, Z+
    2a22:	f0 81       	ld	r31, Z
    2a24:	e0 2d       	mov	r30, r0
    2a26:	22 81       	ldd	r18, Z+2	; 0x02
    2a28:	33 81       	ldd	r19, Z+3	; 0x03
    2a2a:	2e 0f       	add	r18, r30
    2a2c:	3f 1f       	adc	r19, r31
    2a2e:	fc 01       	movw	r30, r24
    2a30:	40 81       	ld	r20, Z
    2a32:	e4 0f       	add	r30, r20
    2a34:	f1 1d       	adc	r31, r1
    2a36:	e2 17       	cp	r30, r18
    2a38:	f3 07       	cpc	r31, r19
    2a3a:	b8 f4       	brcc	.+46     	; 0x2a6a <udc_next_desc_in_iface+0x52>
    2a3c:	81 81       	ldd	r24, Z+1	; 0x01
    2a3e:	84 30       	cpi	r24, 0x04	; 4
    2a40:	b9 f0       	breq	.+46     	; 0x2a70 <udc_next_desc_in_iface+0x58>
    2a42:	86 13       	cpse	r24, r22
    2a44:	09 c0       	rjmp	.+18     	; 0x2a58 <udc_next_desc_in_iface+0x40>
    2a46:	05 c0       	rjmp	.+10     	; 0x2a52 <udc_next_desc_in_iface+0x3a>
    2a48:	81 81       	ldd	r24, Z+1	; 0x01
    2a4a:	84 30       	cpi	r24, 0x04	; 4
    2a4c:	a1 f0       	breq	.+40     	; 0x2a76 <udc_next_desc_in_iface+0x5e>
    2a4e:	86 13       	cpse	r24, r22
    2a50:	03 c0       	rjmp	.+6      	; 0x2a58 <udc_next_desc_in_iface+0x40>
    2a52:	8e 2f       	mov	r24, r30
    2a54:	9f 2f       	mov	r25, r31
    2a56:	08 95       	ret
    2a58:	80 81       	ld	r24, Z
    2a5a:	e8 0f       	add	r30, r24
    2a5c:	f1 1d       	adc	r31, r1
    2a5e:	e2 17       	cp	r30, r18
    2a60:	f3 07       	cpc	r31, r19
    2a62:	90 f3       	brcs	.-28     	; 0x2a48 <udc_next_desc_in_iface+0x30>
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	08 95       	ret
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	08 95       	ret
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	08 95       	ret
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	08 95       	ret

00002a7c <udc_valid_address>:
    2a7c:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <udd_g_ctrlreq+0x2>
    2a80:	8f 77       	andi	r24, 0x7F	; 127
    2a82:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <udd_set_address>
    2a86:	08 95       	ret

00002a88 <udc_update_iface_desc>:
    2a88:	90 91 74 23 	lds	r25, 0x2374	; 0x802374 <udc_num_configuration>
    2a8c:	99 23       	and	r25, r25
    2a8e:	81 f1       	breq	.+96     	; 0x2af0 <udc_update_iface_desc+0x68>
    2a90:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <udc_ptr_conf>
    2a94:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    2a98:	01 90       	ld	r0, Z+
    2a9a:	f0 81       	ld	r31, Z
    2a9c:	e0 2d       	mov	r30, r0
    2a9e:	94 81       	ldd	r25, Z+4	; 0x04
    2aa0:	89 17       	cp	r24, r25
    2aa2:	40 f5       	brcc	.+80     	; 0x2af4 <udc_update_iface_desc+0x6c>
    2aa4:	e0 93 70 23 	sts	0x2370, r30	; 0x802370 <udc_ptr_iface>
    2aa8:	f0 93 71 23 	sts	0x2371, r31	; 0x802371 <udc_ptr_iface+0x1>
    2aac:	22 81       	ldd	r18, Z+2	; 0x02
    2aae:	33 81       	ldd	r19, Z+3	; 0x03
    2ab0:	2e 0f       	add	r18, r30
    2ab2:	3f 1f       	adc	r19, r31
    2ab4:	e2 17       	cp	r30, r18
    2ab6:	f3 07       	cpc	r31, r19
    2ab8:	f8 f4       	brcc	.+62     	; 0x2af8 <udc_update_iface_desc+0x70>
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	94 30       	cpi	r25, 0x04	; 4
    2abe:	61 f4       	brne	.+24     	; 0x2ad8 <udc_update_iface_desc+0x50>
    2ac0:	92 81       	ldd	r25, Z+2	; 0x02
    2ac2:	98 13       	cpse	r25, r24
    2ac4:	09 c0       	rjmp	.+18     	; 0x2ad8 <udc_update_iface_desc+0x50>
    2ac6:	93 81       	ldd	r25, Z+3	; 0x03
    2ac8:	96 13       	cpse	r25, r22
    2aca:	06 c0       	rjmp	.+12     	; 0x2ad8 <udc_update_iface_desc+0x50>
    2acc:	e0 93 70 23 	sts	0x2370, r30	; 0x802370 <udc_ptr_iface>
    2ad0:	f0 93 71 23 	sts	0x2371, r31	; 0x802371 <udc_ptr_iface+0x1>
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	08 95       	ret
    2ad8:	90 81       	ld	r25, Z
    2ada:	e9 0f       	add	r30, r25
    2adc:	f1 1d       	adc	r31, r1
    2ade:	e2 17       	cp	r30, r18
    2ae0:	f3 07       	cpc	r31, r19
    2ae2:	58 f3       	brcs	.-42     	; 0x2aba <udc_update_iface_desc+0x32>
    2ae4:	e0 93 70 23 	sts	0x2370, r30	; 0x802370 <udc_ptr_iface>
    2ae8:	f0 93 71 23 	sts	0x2371, r31	; 0x802371 <udc_ptr_iface+0x1>
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	08 95       	ret
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	08 95       	ret
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	08 95       	ret
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	08 95       	ret

00002afc <udc_iface_disable>:
    2afc:	ef 92       	push	r14
    2afe:	ff 92       	push	r15
    2b00:	1f 93       	push	r17
    2b02:	cf 93       	push	r28
    2b04:	df 93       	push	r29
    2b06:	c8 2f       	mov	r28, r24
    2b08:	60 e0       	ldi	r22, 0x00	; 0
    2b0a:	be df       	rcall	.-132    	; 0x2a88 <udc_update_iface_desc>
    2b0c:	18 2f       	mov	r17, r24
    2b0e:	88 23       	and	r24, r24
    2b10:	79 f1       	breq	.+94     	; 0x2b70 <udc_iface_disable+0x74>
    2b12:	a0 91 72 23 	lds	r26, 0x2372	; 0x802372 <udc_ptr_conf>
    2b16:	b0 91 73 23 	lds	r27, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    2b1a:	ec 2f       	mov	r30, r28
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	ee 0f       	add	r30, r30
    2b20:	ff 1f       	adc	r31, r31
    2b22:	12 96       	adiw	r26, 0x02	; 2
    2b24:	8d 91       	ld	r24, X+
    2b26:	9c 91       	ld	r25, X
    2b28:	13 97       	sbiw	r26, 0x03	; 3
    2b2a:	e8 0f       	add	r30, r24
    2b2c:	f9 1f       	adc	r31, r25
    2b2e:	e0 80       	ld	r14, Z
    2b30:	f1 80       	ldd	r15, Z+1	; 0x01
    2b32:	d7 01       	movw	r26, r14
    2b34:	16 96       	adiw	r26, 0x06	; 6
    2b36:	ed 91       	ld	r30, X+
    2b38:	fc 91       	ld	r31, X
    2b3a:	17 97       	sbiw	r26, 0x07	; 7
    2b3c:	19 95       	eicall
    2b3e:	68 2f       	mov	r22, r24
    2b40:	8c 2f       	mov	r24, r28
    2b42:	a2 df       	rcall	.-188    	; 0x2a88 <udc_update_iface_desc>
    2b44:	18 2f       	mov	r17, r24
    2b46:	88 23       	and	r24, r24
    2b48:	99 f0       	breq	.+38     	; 0x2b70 <udc_iface_disable+0x74>
    2b4a:	c0 91 70 23 	lds	r28, 0x2370	; 0x802370 <udc_ptr_iface>
    2b4e:	d0 91 71 23 	lds	r29, 0x2371	; 0x802371 <udc_ptr_iface+0x1>
    2b52:	65 e0       	ldi	r22, 0x05	; 5
    2b54:	ce 01       	movw	r24, r28
    2b56:	60 df       	rcall	.-320    	; 0x2a18 <udc_next_desc_in_iface>
    2b58:	ec 01       	movw	r28, r24
    2b5a:	89 2b       	or	r24, r25
    2b5c:	19 f0       	breq	.+6      	; 0x2b64 <udc_iface_disable+0x68>
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	2a d8       	rcall	.-4012   	; 0x1bb6 <udd_ep_free>
    2b62:	f7 cf       	rjmp	.-18     	; 0x2b52 <udc_iface_disable+0x56>
    2b64:	d7 01       	movw	r26, r14
    2b66:	12 96       	adiw	r26, 0x02	; 2
    2b68:	ed 91       	ld	r30, X+
    2b6a:	fc 91       	ld	r31, X
    2b6c:	13 97       	sbiw	r26, 0x03	; 3
    2b6e:	19 95       	eicall
    2b70:	81 2f       	mov	r24, r17
    2b72:	df 91       	pop	r29
    2b74:	cf 91       	pop	r28
    2b76:	1f 91       	pop	r17
    2b78:	ff 90       	pop	r15
    2b7a:	ef 90       	pop	r14
    2b7c:	08 95       	ret

00002b7e <udc_iface_enable>:
    2b7e:	1f 93       	push	r17
    2b80:	cf 93       	push	r28
    2b82:	df 93       	push	r29
    2b84:	18 2f       	mov	r17, r24
    2b86:	80 df       	rcall	.-256    	; 0x2a88 <udc_update_iface_desc>
    2b88:	88 23       	and	r24, r24
    2b8a:	41 f1       	breq	.+80     	; 0x2bdc <udc_iface_enable+0x5e>
    2b8c:	c0 91 70 23 	lds	r28, 0x2370	; 0x802370 <udc_ptr_iface>
    2b90:	d0 91 71 23 	lds	r29, 0x2371	; 0x802371 <udc_ptr_iface+0x1>
    2b94:	65 e0       	ldi	r22, 0x05	; 5
    2b96:	ce 01       	movw	r24, r28
    2b98:	3f df       	rcall	.-386    	; 0x2a18 <udc_next_desc_in_iface>
    2b9a:	ec 01       	movw	r28, r24
    2b9c:	89 2b       	or	r24, r25
    2b9e:	49 f0       	breq	.+18     	; 0x2bb2 <udc_iface_enable+0x34>
    2ba0:	4c 81       	ldd	r20, Y+4	; 0x04
    2ba2:	5d 81       	ldd	r21, Y+5	; 0x05
    2ba4:	6b 81       	ldd	r22, Y+3	; 0x03
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <udd_ep_alloc>
    2bac:	81 11       	cpse	r24, r1
    2bae:	f2 cf       	rjmp	.-28     	; 0x2b94 <udc_iface_enable+0x16>
    2bb0:	15 c0       	rjmp	.+42     	; 0x2bdc <udc_iface_enable+0x5e>
    2bb2:	a0 91 72 23 	lds	r26, 0x2372	; 0x802372 <udc_ptr_conf>
    2bb6:	b0 91 73 23 	lds	r27, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    2bba:	e1 2f       	mov	r30, r17
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	ee 0f       	add	r30, r30
    2bc0:	ff 1f       	adc	r31, r31
    2bc2:	12 96       	adiw	r26, 0x02	; 2
    2bc4:	8d 91       	ld	r24, X+
    2bc6:	9c 91       	ld	r25, X
    2bc8:	13 97       	sbiw	r26, 0x03	; 3
    2bca:	e8 0f       	add	r30, r24
    2bcc:	f9 1f       	adc	r31, r25
    2bce:	01 90       	ld	r0, Z+
    2bd0:	f0 81       	ld	r31, Z
    2bd2:	e0 2d       	mov	r30, r0
    2bd4:	01 90       	ld	r0, Z+
    2bd6:	f0 81       	ld	r31, Z
    2bd8:	e0 2d       	mov	r30, r0
    2bda:	19 95       	eicall
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	1f 91       	pop	r17
    2be2:	08 95       	ret

00002be4 <udc_start>:
    2be4:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <udd_enable>
    2be8:	08 95       	ret

00002bea <udc_reset>:
    2bea:	cf 93       	push	r28
    2bec:	80 91 74 23 	lds	r24, 0x2374	; 0x802374 <udc_num_configuration>
    2bf0:	88 23       	and	r24, r24
    2bf2:	c1 f0       	breq	.+48     	; 0x2c24 <udc_reset+0x3a>
    2bf4:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <udc_ptr_conf>
    2bf8:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    2bfc:	01 90       	ld	r0, Z+
    2bfe:	f0 81       	ld	r31, Z
    2c00:	e0 2d       	mov	r30, r0
    2c02:	84 81       	ldd	r24, Z+4	; 0x04
    2c04:	88 23       	and	r24, r24
    2c06:	71 f0       	breq	.+28     	; 0x2c24 <udc_reset+0x3a>
    2c08:	c0 e0       	ldi	r28, 0x00	; 0
    2c0a:	8c 2f       	mov	r24, r28
    2c0c:	77 df       	rcall	.-274    	; 0x2afc <udc_iface_disable>
    2c0e:	cf 5f       	subi	r28, 0xFF	; 255
    2c10:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <udc_ptr_conf>
    2c14:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    2c18:	01 90       	ld	r0, Z+
    2c1a:	f0 81       	ld	r31, Z
    2c1c:	e0 2d       	mov	r30, r0
    2c1e:	84 81       	ldd	r24, Z+4	; 0x04
    2c20:	c8 17       	cp	r28, r24
    2c22:	98 f3       	brcs	.-26     	; 0x2c0a <udc_reset+0x20>
    2c24:	10 92 74 23 	sts	0x2374, r1	; 0x802374 <udc_num_configuration>
    2c28:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <udc_device_status>
    2c2c:	81 fd       	sbrc	r24, 1
    2c2e:	36 db       	rcall	.-2452   	; 0x229c <usb_callback_remotewakeup_disable>
    2c30:	10 92 78 23 	sts	0x2378, r1	; 0x802378 <udc_device_status>
    2c34:	10 92 79 23 	sts	0x2379, r1	; 0x802379 <udc_device_status+0x1>
    2c38:	cf 91       	pop	r28
    2c3a:	08 95       	ret

00002c3c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    2c3c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    2c3e:	80 91 74 23 	lds	r24, 0x2374	; 0x802374 <udc_num_configuration>
    2c42:	88 23       	and	r24, r24
    2c44:	49 f1       	breq	.+82     	; 0x2c98 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2c46:	a0 91 72 23 	lds	r26, 0x2372	; 0x802372 <udc_ptr_conf>
    2c4a:	b0 91 73 23 	lds	r27, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    2c4e:	ed 91       	ld	r30, X+
    2c50:	fc 91       	ld	r31, X
    2c52:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    2c54:	84 81       	ldd	r24, Z+4	; 0x04
    2c56:	88 23       	and	r24, r24
    2c58:	f9 f0       	breq	.+62     	; 0x2c98 <udc_sof_notify+0x5c>
    2c5a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    2c5c:	ec 2f       	mov	r30, r28
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	ee 0f       	add	r30, r30
    2c62:	ff 1f       	adc	r31, r31
    2c64:	12 96       	adiw	r26, 0x02	; 2
    2c66:	8d 91       	ld	r24, X+
    2c68:	9c 91       	ld	r25, X
    2c6a:	13 97       	sbiw	r26, 0x03	; 3
    2c6c:	e8 0f       	add	r30, r24
    2c6e:	f9 1f       	adc	r31, r25
    2c70:	01 90       	ld	r0, Z+
    2c72:	f0 81       	ld	r31, Z
    2c74:	e0 2d       	mov	r30, r0
    2c76:	00 84       	ldd	r0, Z+8	; 0x08
    2c78:	f1 85       	ldd	r31, Z+9	; 0x09
    2c7a:	e0 2d       	mov	r30, r0
    2c7c:	30 97       	sbiw	r30, 0x00	; 0
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    2c80:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    2c82:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2c84:	a0 91 72 23 	lds	r26, 0x2372	; 0x802372 <udc_ptr_conf>
    2c88:	b0 91 73 23 	lds	r27, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    2c8c:	ed 91       	ld	r30, X+
    2c8e:	fc 91       	ld	r31, X
    2c90:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    2c92:	84 81       	ldd	r24, Z+4	; 0x04
    2c94:	c8 17       	cp	r28, r24
    2c96:	10 f3       	brcs	.-60     	; 0x2c5c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    2c98:	cf 91       	pop	r28
    2c9a:	08 95       	ret

00002c9c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    2c9c:	0f 93       	push	r16
    2c9e:	1f 93       	push	r17
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    2ca4:	ea e7       	ldi	r30, 0x7A	; 122
    2ca6:	f3 e2       	ldi	r31, 0x23	; 35
    2ca8:	12 86       	std	Z+10, r1	; 0x0a
    2caa:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    2cac:	14 86       	std	Z+12, r1	; 0x0c
    2cae:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    2cb0:	16 86       	std	Z+14, r1	; 0x0e
    2cb2:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    2cb4:	80 81       	ld	r24, Z
    2cb6:	88 23       	and	r24, r24
    2cb8:	0c f0       	brlt	.+2      	; 0x2cbc <udc_process_setup+0x20>
    2cba:	8b c2       	rjmp	.+1302   	; 0x31d2 <udc_process_setup+0x536>
		if (udd_g_ctrlreq.req.wLength == 0) {
    2cbc:	20 91 80 23 	lds	r18, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    2cc0:	30 91 81 23 	lds	r19, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    2cc4:	21 15       	cp	r18, r1
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	09 f0       	breq	.+2      	; 0x2ccc <udc_process_setup+0x30>
    2cca:	7e c2       	rjmp	.+1276   	; 0x31c8 <udc_process_setup+0x52c>
    2ccc:	79 c2       	rjmp	.+1266   	; 0x31c0 <udc_process_setup+0x524>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2cce:	8f 71       	andi	r24, 0x1F	; 31
    2cd0:	09 f0       	breq	.+2      	; 0x2cd4 <udc_process_setup+0x38>
    2cd2:	ae c0       	rjmp	.+348    	; 0x2e30 <udc_process_setup+0x194>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    2cd4:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <udd_g_ctrlreq+0x1>
    2cd8:	96 30       	cpi	r25, 0x06	; 6
    2cda:	81 f0       	breq	.+32     	; 0x2cfc <udc_process_setup+0x60>
    2cdc:	98 30       	cpi	r25, 0x08	; 8
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <udc_process_setup+0x46>
    2ce0:	9c c0       	rjmp	.+312    	; 0x2e1a <udc_process_setup+0x17e>
    2ce2:	91 11       	cpse	r25, r1
    2ce4:	a5 c0       	rjmp	.+330    	; 0x2e30 <udc_process_setup+0x194>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    2ce6:	22 30       	cpi	r18, 0x02	; 2
    2ce8:	31 05       	cpc	r19, r1
    2cea:	09 f0       	breq	.+2      	; 0x2cee <udc_process_setup+0x52>
    2cec:	f2 c1       	rjmp	.+996    	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    2cee:	62 e0       	ldi	r22, 0x02	; 2
    2cf0:	70 e0       	ldi	r23, 0x00	; 0
    2cf2:	88 e7       	ldi	r24, 0x78	; 120
    2cf4:	93 e2       	ldi	r25, 0x23	; 35
    2cf6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <udd_set_setup_payload>
    2cfa:	74 c2       	rjmp	.+1256   	; 0x31e4 <udc_process_setup+0x548>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    2cfc:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <udd_g_ctrlreq+0x2>
    2d00:	90 91 7d 23 	lds	r25, 0x237D	; 0x80237d <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2d04:	29 2f       	mov	r18, r25
    2d06:	33 27       	eor	r19, r19
    2d08:	22 30       	cpi	r18, 0x02	; 2
    2d0a:	31 05       	cpc	r19, r1
    2d0c:	b1 f0       	breq	.+44     	; 0x2d3a <udc_process_setup+0x9e>
    2d0e:	24 f4       	brge	.+8      	; 0x2d18 <udc_process_setup+0x7c>
    2d10:	21 30       	cpi	r18, 0x01	; 1
    2d12:	31 05       	cpc	r19, r1
    2d14:	41 f0       	breq	.+16     	; 0x2d26 <udc_process_setup+0x8a>
    2d16:	d4 c1       	rjmp	.+936    	; 0x30c0 <udc_process_setup+0x424>
    2d18:	23 30       	cpi	r18, 0x03	; 3
    2d1a:	31 05       	cpc	r19, r1
    2d1c:	f1 f1       	breq	.+124    	; 0x2d9a <udc_process_setup+0xfe>
    2d1e:	2f 30       	cpi	r18, 0x0F	; 15
    2d20:	31 05       	cpc	r19, r1
    2d22:	61 f1       	breq	.+88     	; 0x2d7c <udc_process_setup+0xe0>
    2d24:	cd c1       	rjmp	.+922    	; 0x30c0 <udc_process_setup+0x424>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    2d26:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <udc_config>
    2d2a:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    2d2e:	dc 01       	movw	r26, r24
    2d30:	6c 91       	ld	r22, X
    2d32:	70 e0       	ldi	r23, 0x00	; 0
    2d34:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <udd_set_setup_payload>
    2d38:	61 c0       	rjmp	.+194    	; 0x2dfc <udc_process_setup+0x160>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    2d3a:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config>
    2d3e:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x1>
    2d42:	21 89       	ldd	r18, Z+17	; 0x11
    2d44:	82 17       	cp	r24, r18
    2d46:	08 f0       	brcs	.+2      	; 0x2d4a <udc_process_setup+0xae>
    2d48:	c4 c1       	rjmp	.+904    	; 0x30d2 <udc_process_setup+0x436>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    2d4a:	99 27       	eor	r25, r25
    2d4c:	88 0f       	add	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config+0x2>
    2d58:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x3>
    2d5c:	e8 0f       	add	r30, r24
    2d5e:	f9 1f       	adc	r31, r25
    2d60:	80 81       	ld	r24, Z
    2d62:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    2d64:	fc 01       	movw	r30, r24
    2d66:	62 81       	ldd	r22, Z+2	; 0x02
    2d68:	73 81       	ldd	r23, Z+3	; 0x03
    2d6a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    2d6e:	e0 91 82 23 	lds	r30, 0x2382	; 0x802382 <udd_g_ctrlreq+0x8>
    2d72:	f0 91 83 23 	lds	r31, 0x2383	; 0x802383 <udd_g_ctrlreq+0x9>
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	81 83       	std	Z+1, r24	; 0x01
    2d7a:	40 c0       	rjmp	.+128    	; 0x2dfc <udc_process_setup+0x160>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    2d7c:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <udc_config+0x4>
    2d80:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <udc_config+0x5>
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <udc_process_setup+0xee>
    2d88:	a4 c1       	rjmp	.+840    	; 0x30d2 <udc_process_setup+0x436>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	12 96       	adiw	r26, 0x02	; 2
    2d8e:	6d 91       	ld	r22, X+
    2d90:	7c 91       	ld	r23, X
    2d92:	13 97       	sbiw	r26, 0x03	; 3
    2d94:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <udd_set_setup_payload>
    2d98:	31 c0       	rjmp	.+98     	; 0x2dfc <udc_process_setup+0x160>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    2d9a:	99 27       	eor	r25, r25
    2d9c:	81 30       	cpi	r24, 0x01	; 1
    2d9e:	91 05       	cpc	r25, r1
    2da0:	99 f0       	breq	.+38     	; 0x2dc8 <udc_process_setup+0x12c>
    2da2:	58 f0       	brcs	.+22     	; 0x2dba <udc_process_setup+0x11e>
    2da4:	82 30       	cpi	r24, 0x02	; 2
    2da6:	91 05       	cpc	r25, r1
    2da8:	09 f4       	brne	.+2      	; 0x2dac <udc_process_setup+0x110>
    2daa:	18 c2       	rjmp	.+1072   	; 0x31dc <udc_process_setup+0x540>
    2dac:	03 97       	sbiw	r24, 0x03	; 3
    2dae:	09 f0       	breq	.+2      	; 0x2db2 <udc_process_setup+0x116>
    2db0:	90 c1       	rjmp	.+800    	; 0x30d2 <udc_process_setup+0x436>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    2db2:	26 e0       	ldi	r18, 0x06	; 6
		str = udc_get_string_serial_name();
    2db4:	84 ec       	ldi	r24, 0xC4	; 196
    2db6:	90 e2       	ldi	r25, 0x20	; 32
    2db8:	0a c0       	rjmp	.+20     	; 0x2dce <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    2dba:	64 e0       	ldi	r22, 0x04	; 4
    2dbc:	70 e0       	ldi	r23, 0x00	; 0
    2dbe:	80 ec       	ldi	r24, 0xC0	; 192
    2dc0:	90 e2       	ldi	r25, 0x20	; 32
    2dc2:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <udd_set_setup_payload>
    2dc6:	1a c0       	rjmp	.+52     	; 0x2dfc <udc_process_setup+0x160>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    2dc8:	8f ea       	ldi	r24, 0xAF	; 175
    2dca:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    2dcc:	20 e1       	ldi	r18, 0x10	; 16
    2dce:	38 2f       	mov	r19, r24
    2dd0:	a0 e8       	ldi	r26, 0x80	; 128
    2dd2:	b0 e2       	ldi	r27, 0x20	; 32
    2dd4:	e8 2f       	mov	r30, r24
    2dd6:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    2dd8:	81 91       	ld	r24, Z+
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	8d 93       	st	X+, r24
    2dde:	9d 93       	st	X+, r25
    2de0:	8e 2f       	mov	r24, r30
    2de2:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    2de4:	82 17       	cp	r24, r18
    2de6:	c0 f3       	brcs	.-16     	; 0x2dd8 <udc_process_setup+0x13c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    2de8:	62 2f       	mov	r22, r18
    2dea:	66 0f       	add	r22, r22
    2dec:	6e 5f       	subi	r22, 0xFE	; 254
    2dee:	60 93 7e 20 	sts	0x207E, r22	; 0x80207e <udc_string_desc>
		udd_set_setup_payload(
    2df2:	70 e0       	ldi	r23, 0x00	; 0
    2df4:	8e e7       	ldi	r24, 0x7E	; 126
    2df6:	90 e2       	ldi	r25, 0x20	; 32
    2df8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    2dfc:	ea e7       	ldi	r30, 0x7A	; 122
    2dfe:	f3 e2       	ldi	r31, 0x23	; 35
    2e00:	86 81       	ldd	r24, Z+6	; 0x06
    2e02:	97 81       	ldd	r25, Z+7	; 0x07
    2e04:	22 85       	ldd	r18, Z+10	; 0x0a
    2e06:	33 85       	ldd	r19, Z+11	; 0x0b
    2e08:	82 17       	cp	r24, r18
    2e0a:	93 07       	cpc	r25, r19
    2e0c:	08 f0       	brcs	.+2      	; 0x2e10 <udc_process_setup+0x174>
    2e0e:	ea c1       	rjmp	.+980    	; 0x31e4 <udc_process_setup+0x548>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    2e10:	80 93 84 23 	sts	0x2384, r24	; 0x802384 <udd_g_ctrlreq+0xa>
    2e14:	90 93 85 23 	sts	0x2385, r25	; 0x802385 <udd_g_ctrlreq+0xb>
    2e18:	e5 c1       	rjmp	.+970    	; 0x31e4 <udc_process_setup+0x548>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    2e1a:	21 30       	cpi	r18, 0x01	; 1
    2e1c:	31 05       	cpc	r19, r1
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <udc_process_setup+0x186>
    2e20:	58 c1       	rjmp	.+688    	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    2e22:	61 e0       	ldi	r22, 0x01	; 1
    2e24:	70 e0       	ldi	r23, 0x00	; 0
    2e26:	84 e7       	ldi	r24, 0x74	; 116
    2e28:	93 e2       	ldi	r25, 0x23	; 35
    2e2a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <udd_set_setup_payload>
    2e2e:	da c1       	rjmp	.+948    	; 0x31e4 <udc_process_setup+0x548>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2e30:	81 30       	cpi	r24, 0x01	; 1
    2e32:	e9 f5       	brne	.+122    	; 0x2eae <udc_process_setup+0x212>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    2e34:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <udd_g_ctrlreq+0x1>
    2e38:	9a 30       	cpi	r25, 0x0A	; 10
    2e3a:	c9 f5       	brne	.+114    	; 0x2eae <udc_process_setup+0x212>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    2e3c:	21 30       	cpi	r18, 0x01	; 1
    2e3e:	31 05       	cpc	r19, r1
    2e40:	09 f0       	breq	.+2      	; 0x2e44 <udc_process_setup+0x1a8>
    2e42:	47 c1       	rjmp	.+654    	; 0x30d2 <udc_process_setup+0x436>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    2e44:	80 91 74 23 	lds	r24, 0x2374	; 0x802374 <udc_num_configuration>
    2e48:	88 23       	and	r24, r24
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <udc_process_setup+0x1b2>
    2e4c:	42 c1       	rjmp	.+644    	; 0x30d2 <udc_process_setup+0x436>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2e4e:	c0 91 7e 23 	lds	r28, 0x237E	; 0x80237e <udd_g_ctrlreq+0x4>
    2e52:	d0 91 7f 23 	lds	r29, 0x237F	; 0x80237f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2e56:	00 91 72 23 	lds	r16, 0x2372	; 0x802372 <udc_ptr_conf>
    2e5a:	10 91 73 23 	lds	r17, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    2e5e:	d8 01       	movw	r26, r16
    2e60:	ed 91       	ld	r30, X+
    2e62:	fc 91       	ld	r31, X
    2e64:	84 81       	ldd	r24, Z+4	; 0x04
    2e66:	c8 17       	cp	r28, r24
    2e68:	08 f0       	brcs	.+2      	; 0x2e6c <udc_process_setup+0x1d0>
    2e6a:	33 c1       	rjmp	.+614    	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    2e6c:	60 e0       	ldi	r22, 0x00	; 0
    2e6e:	8c 2f       	mov	r24, r28
    2e70:	0b de       	rcall	.-1002   	; 0x2a88 <udc_update_iface_desc>
    2e72:	88 23       	and	r24, r24
    2e74:	09 f4       	brne	.+2      	; 0x2e78 <udc_process_setup+0x1dc>
    2e76:	2d c1       	rjmp	.+602    	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2e78:	ce 01       	movw	r24, r28
    2e7a:	99 27       	eor	r25, r25
    2e7c:	88 0f       	add	r24, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	d8 01       	movw	r26, r16
    2e82:	12 96       	adiw	r26, 0x02	; 2
    2e84:	ed 91       	ld	r30, X+
    2e86:	fc 91       	ld	r31, X
    2e88:	13 97       	sbiw	r26, 0x03	; 3
    2e8a:	e8 0f       	add	r30, r24
    2e8c:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    2e8e:	01 90       	ld	r0, Z+
    2e90:	f0 81       	ld	r31, Z
    2e92:	e0 2d       	mov	r30, r0
    2e94:	86 81       	ldd	r24, Z+6	; 0x06
    2e96:	97 81       	ldd	r25, Z+7	; 0x07
    2e98:	fc 01       	movw	r30, r24
    2e9a:	19 95       	eicall
    2e9c:	80 93 76 23 	sts	0x2376, r24	; 0x802376 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    2ea0:	61 e0       	ldi	r22, 0x01	; 1
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
    2ea4:	86 e7       	ldi	r24, 0x76	; 118
    2ea6:	93 e2       	ldi	r25, 0x23	; 35
    2ea8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <udd_set_setup_payload>
    2eac:	9b c1       	rjmp	.+822    	; 0x31e4 <udc_process_setup+0x548>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2eae:	82 30       	cpi	r24, 0x02	; 2
    2eb0:	09 f0       	breq	.+2      	; 0x2eb4 <udc_process_setup+0x218>
    2eb2:	0f c1       	rjmp	.+542    	; 0x30d2 <udc_process_setup+0x436>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    2eb4:	80 91 7b 23 	lds	r24, 0x237B	; 0x80237b <udd_g_ctrlreq+0x1>
    2eb8:	81 11       	cpse	r24, r1
    2eba:	04 c1       	rjmp	.+520    	; 0x30c4 <udc_process_setup+0x428>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    2ebc:	22 30       	cpi	r18, 0x02	; 2
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	09 f0       	breq	.+2      	; 0x2ec4 <udc_process_setup+0x228>
    2ec2:	07 c1       	rjmp	.+526    	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    2ec4:	80 91 7e 23 	lds	r24, 0x237E	; 0x80237e <udd_g_ctrlreq+0x4>
    2ec8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <udd_ep_is_halted>
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	80 93 6e 23 	sts	0x236E, r24	; 0x80236e <udc_ep_status.4684>
    2ed2:	90 93 6f 23 	sts	0x236F, r25	; 0x80236f <udc_ep_status.4684+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    2ed6:	62 e0       	ldi	r22, 0x02	; 2
    2ed8:	70 e0       	ldi	r23, 0x00	; 0
    2eda:	8e e6       	ldi	r24, 0x6E	; 110
    2edc:	93 e2       	ldi	r25, 0x23	; 35
    2ede:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <udd_set_setup_payload>
    2ee2:	80 c1       	rjmp	.+768    	; 0x31e4 <udc_process_setup+0x548>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2ee4:	8f 71       	andi	r24, 0x1F	; 31
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <udc_process_setup+0x24e>
    2ee8:	9e c0       	rjmp	.+316    	; 0x3026 <udc_process_setup+0x38a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    2eea:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <udd_g_ctrlreq+0x1>
    2eee:	93 30       	cpi	r25, 0x03	; 3
    2ef0:	89 f1       	breq	.+98     	; 0x2f54 <udc_process_setup+0x2b8>
    2ef2:	18 f4       	brcc	.+6      	; 0x2efa <udc_process_setup+0x25e>
    2ef4:	91 30       	cpi	r25, 0x01	; 1
    2ef6:	a9 f0       	breq	.+42     	; 0x2f22 <udc_process_setup+0x286>
    2ef8:	96 c0       	rjmp	.+300    	; 0x3026 <udc_process_setup+0x38a>
    2efa:	95 30       	cpi	r25, 0x05	; 5
    2efc:	21 f0       	breq	.+8      	; 0x2f06 <udc_process_setup+0x26a>
    2efe:	99 30       	cpi	r25, 0x09	; 9
    2f00:	09 f4       	brne	.+2      	; 0x2f04 <udc_process_setup+0x268>
    2f02:	41 c0       	rjmp	.+130    	; 0x2f86 <udc_process_setup+0x2ea>
    2f04:	90 c0       	rjmp	.+288    	; 0x3026 <udc_process_setup+0x38a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2f06:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    2f0a:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    2f0e:	89 2b       	or	r24, r25
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <udc_process_setup+0x278>
    2f12:	df c0       	rjmp	.+446    	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    2f14:	8e e3       	ldi	r24, 0x3E	; 62
    2f16:	95 e1       	ldi	r25, 0x15	; 21
    2f18:	80 93 86 23 	sts	0x2386, r24	; 0x802386 <udd_g_ctrlreq+0xc>
    2f1c:	90 93 87 23 	sts	0x2387, r25	; 0x802387 <udd_g_ctrlreq+0xd>
    2f20:	61 c1       	rjmp	.+706    	; 0x31e4 <udc_process_setup+0x548>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2f22:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    2f26:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    2f2a:	89 2b       	or	r24, r25
    2f2c:	09 f0       	breq	.+2      	; 0x2f30 <udc_process_setup+0x294>
    2f2e:	d1 c0       	rjmp	.+418    	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    2f30:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <udd_g_ctrlreq+0x2>
    2f34:	90 91 7d 23 	lds	r25, 0x237D	; 0x80237d <udd_g_ctrlreq+0x3>
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	09 f0       	breq	.+2      	; 0x2f3e <udc_process_setup+0x2a2>
    2f3c:	ca c0       	rjmp	.+404    	; 0x30d2 <udc_process_setup+0x436>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    2f3e:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <udc_device_status>
    2f42:	90 91 79 23 	lds	r25, 0x2379	; 0x802379 <udc_device_status+0x1>
    2f46:	8d 7f       	andi	r24, 0xFD	; 253
    2f48:	80 93 78 23 	sts	0x2378, r24	; 0x802378 <udc_device_status>
    2f4c:	90 93 79 23 	sts	0x2379, r25	; 0x802379 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    2f50:	a5 d9       	rcall	.-3254   	; 0x229c <usb_callback_remotewakeup_disable>
    2f52:	48 c1       	rjmp	.+656    	; 0x31e4 <udc_process_setup+0x548>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2f54:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    2f58:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    2f5c:	89 2b       	or	r24, r25
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <udc_process_setup+0x2c6>
    2f60:	b8 c0       	rjmp	.+368    	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    2f62:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <udd_g_ctrlreq+0x2>
    2f66:	90 91 7d 23 	lds	r25, 0x237D	; 0x80237d <udd_g_ctrlreq+0x3>
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	09 f0       	breq	.+2      	; 0x2f70 <udc_process_setup+0x2d4>
    2f6e:	ac c0       	rjmp	.+344    	; 0x30c8 <udc_process_setup+0x42c>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    2f70:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <udc_device_status>
    2f74:	90 91 79 23 	lds	r25, 0x2379	; 0x802379 <udc_device_status+0x1>
    2f78:	82 60       	ori	r24, 0x02	; 2
    2f7a:	80 93 78 23 	sts	0x2378, r24	; 0x802378 <udc_device_status>
    2f7e:	90 93 79 23 	sts	0x2379, r25	; 0x802379 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    2f82:	8b d9       	rcall	.-3306   	; 0x229a <usb_callback_remotewakeup_enable>
    2f84:	2f c1       	rjmp	.+606    	; 0x31e4 <udc_process_setup+0x548>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    2f86:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    2f8a:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    2f8e:	89 2b       	or	r24, r25
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <udc_process_setup+0x2f8>
    2f92:	9f c0       	rjmp	.+318    	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    2f94:	0e 94 de 0b 	call	0x17bc	; 0x17bc <udd_getaddress>
    2f98:	88 23       	and	r24, r24
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <udc_process_setup+0x302>
    2f9c:	9a c0       	rjmp	.+308    	; 0x30d2 <udc_process_setup+0x436>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2f9e:	20 91 7c 23 	lds	r18, 0x237C	; 0x80237c <udd_g_ctrlreq+0x2>
    2fa2:	30 91 7d 23 	lds	r19, 0x237D	; 0x80237d <udd_g_ctrlreq+0x3>
    2fa6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    2fa8:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config>
    2fac:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2fb0:	81 89       	ldd	r24, Z+17	; 0x11
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	82 17       	cp	r24, r18
    2fb6:	93 07       	cpc	r25, r19
    2fb8:	08 f4       	brcc	.+2      	; 0x2fbc <udc_process_setup+0x320>
    2fba:	8b c0       	rjmp	.+278    	; 0x30d2 <udc_process_setup+0x436>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    2fbc:	16 de       	rcall	.-980    	; 0x2bea <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    2fbe:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <udd_g_ctrlreq+0x2>
    2fc2:	90 91 7d 23 	lds	r25, 0x237D	; 0x80237d <udd_g_ctrlreq+0x3>
    2fc6:	80 93 74 23 	sts	0x2374, r24	; 0x802374 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    2fca:	88 23       	and	r24, r24
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <udc_process_setup+0x334>
    2fce:	0a c1       	rjmp	.+532    	; 0x31e4 <udc_process_setup+0x548>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    2fd0:	99 27       	eor	r25, r25
    2fd2:	81 50       	subi	r24, 0x01	; 1
    2fd4:	90 4c       	sbci	r25, 0xC0	; 192
    2fd6:	88 0f       	add	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	88 0f       	add	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config+0x2>
    2fe2:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x3>
    2fe6:	e8 0f       	add	r30, r24
    2fe8:	f9 1f       	adc	r31, r25
    2fea:	e0 93 72 23 	sts	0x2372, r30	; 0x802372 <udc_ptr_conf>
    2fee:	f0 93 73 23 	sts	0x2373, r31	; 0x802373 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2ff2:	01 90       	ld	r0, Z+
    2ff4:	f0 81       	ld	r31, Z
    2ff6:	e0 2d       	mov	r30, r0
    2ff8:	84 81       	ldd	r24, Z+4	; 0x04
    2ffa:	88 23       	and	r24, r24
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <udc_process_setup+0x364>
    2ffe:	f2 c0       	rjmp	.+484    	; 0x31e4 <udc_process_setup+0x548>
    3000:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    3002:	60 e0       	ldi	r22, 0x00	; 0
    3004:	8c 2f       	mov	r24, r28
    3006:	bb dd       	rcall	.-1162   	; 0x2b7e <udc_iface_enable>
    3008:	88 23       	and	r24, r24
    300a:	09 f4       	brne	.+2      	; 0x300e <udc_process_setup+0x372>
    300c:	62 c0       	rjmp	.+196    	; 0x30d2 <udc_process_setup+0x436>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    300e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3010:	e0 91 72 23 	lds	r30, 0x2372	; 0x802372 <udc_ptr_conf>
    3014:	f0 91 73 23 	lds	r31, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    3018:	01 90       	ld	r0, Z+
    301a:	f0 81       	ld	r31, Z
    301c:	e0 2d       	mov	r30, r0
    301e:	84 81       	ldd	r24, Z+4	; 0x04
    3020:	c8 17       	cp	r28, r24
    3022:	78 f3       	brcs	.-34     	; 0x3002 <udc_process_setup+0x366>
    3024:	df c0       	rjmp	.+446    	; 0x31e4 <udc_process_setup+0x548>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3026:	81 30       	cpi	r24, 0x01	; 1
    3028:	e1 f4       	brne	.+56     	; 0x3062 <udc_process_setup+0x3c6>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    302a:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <udd_g_ctrlreq+0x1>
    302e:	9b 30       	cpi	r25, 0x0B	; 11
    3030:	c1 f4       	brne	.+48     	; 0x3062 <udc_process_setup+0x3c6>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    3032:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    3036:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    303a:	89 2b       	or	r24, r25
    303c:	09 f0       	breq	.+2      	; 0x3040 <udc_process_setup+0x3a4>
    303e:	49 c0       	rjmp	.+146    	; 0x30d2 <udc_process_setup+0x436>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    3040:	80 91 74 23 	lds	r24, 0x2374	; 0x802374 <udc_num_configuration>
    3044:	88 23       	and	r24, r24
    3046:	09 f4       	brne	.+2      	; 0x304a <udc_process_setup+0x3ae>
    3048:	44 c0       	rjmp	.+136    	; 0x30d2 <udc_process_setup+0x436>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    304a:	ea e7       	ldi	r30, 0x7A	; 122
    304c:	f3 e2       	ldi	r31, 0x23	; 35
    304e:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    3050:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    3052:	8c 2f       	mov	r24, r28
    3054:	53 dd       	rcall	.-1370   	; 0x2afc <udc_iface_disable>
    3056:	88 23       	and	r24, r24
    3058:	e1 f1       	breq	.+120    	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    305a:	6d 2f       	mov	r22, r29
    305c:	8c 2f       	mov	r24, r28
    305e:	8f dd       	rcall	.-1250   	; 0x2b7e <udc_iface_enable>
    3060:	36 c0       	rjmp	.+108    	; 0x30ce <udc_process_setup+0x432>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3062:	82 30       	cpi	r24, 0x02	; 2
    3064:	b1 f5       	brne	.+108    	; 0x30d2 <udc_process_setup+0x436>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3066:	80 91 7b 23 	lds	r24, 0x237B	; 0x80237b <udd_g_ctrlreq+0x1>
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	19 f0       	breq	.+6      	; 0x3074 <udc_process_setup+0x3d8>
    306e:	83 30       	cpi	r24, 0x03	; 3
    3070:	91 f0       	breq	.+36     	; 0x3096 <udc_process_setup+0x3fa>
    3072:	2c c0       	rjmp	.+88     	; 0x30cc <udc_process_setup+0x430>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3074:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    3078:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    307c:	89 2b       	or	r24, r25
    307e:	49 f5       	brne	.+82     	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3080:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <udd_g_ctrlreq+0x2>
    3084:	90 91 7d 23 	lds	r25, 0x237D	; 0x80237d <udd_g_ctrlreq+0x3>
    3088:	89 2b       	or	r24, r25
    308a:	19 f5       	brne	.+70     	; 0x30d2 <udc_process_setup+0x436>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    308c:	80 91 7e 23 	lds	r24, 0x237E	; 0x80237e <udd_g_ctrlreq+0x4>
    3090:	0e 94 93 0c 	call	0x1926	; 0x1926 <udd_ep_clear_halt>
    3094:	1c c0       	rjmp	.+56     	; 0x30ce <udc_process_setup+0x432>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3096:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <udd_g_ctrlreq+0x6>
    309a:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <udd_g_ctrlreq+0x7>
    309e:	89 2b       	or	r24, r25
    30a0:	c1 f4       	brne	.+48     	; 0x30d2 <udc_process_setup+0x436>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    30a2:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <udd_g_ctrlreq+0x2>
    30a6:	90 91 7d 23 	lds	r25, 0x237D	; 0x80237d <udd_g_ctrlreq+0x3>
    30aa:	89 2b       	or	r24, r25
    30ac:	91 f4       	brne	.+36     	; 0x30d2 <udc_process_setup+0x436>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    30ae:	ca e7       	ldi	r28, 0x7A	; 122
    30b0:	d3 e2       	ldi	r29, 0x23	; 35
    30b2:	8c 81       	ldd	r24, Y+4	; 0x04
    30b4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    30b8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ba:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <udd_ep_set_halt>
    30be:	07 c0       	rjmp	.+14     	; 0x30ce <udc_process_setup+0x432>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	05 c0       	rjmp	.+10     	; 0x30ce <udc_process_setup+0x432>
				break;
			}
		}
#endif
	}
	return false;
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	03 c0       	rjmp	.+6      	; 0x30ce <udc_process_setup+0x432>
		break;
#endif
	default:
		break;
	}
	return false;
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	01 c0       	rjmp	.+2      	; 0x30ce <udc_process_setup+0x432>
				break;
			}
		}
#endif
	}
	return false;
    30cc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    30ce:	81 11       	cpse	r24, r1
    30d0:	8a c0       	rjmp	.+276    	; 0x31e6 <udc_process_setup+0x54a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    30d2:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <udd_g_ctrlreq>
    30d6:	8f 71       	andi	r24, 0x1F	; 31
    30d8:	81 30       	cpi	r24, 0x01	; 1
    30da:	71 f5       	brne	.+92     	; 0x3138 <udc_process_setup+0x49c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    30dc:	80 91 74 23 	lds	r24, 0x2374	; 0x802374 <udc_num_configuration>
    30e0:	88 23       	and	r24, r24
    30e2:	51 f1       	breq	.+84     	; 0x3138 <udc_process_setup+0x49c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    30e4:	00 91 7e 23 	lds	r16, 0x237E	; 0x80237e <udd_g_ctrlreq+0x4>
    30e8:	10 91 7f 23 	lds	r17, 0x237F	; 0x80237f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    30ec:	c0 91 72 23 	lds	r28, 0x2372	; 0x802372 <udc_ptr_conf>
    30f0:	d0 91 73 23 	lds	r29, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    30f4:	e8 81       	ld	r30, Y
    30f6:	f9 81       	ldd	r31, Y+1	; 0x01
    30f8:	84 81       	ldd	r24, Z+4	; 0x04
    30fa:	08 17       	cp	r16, r24
    30fc:	e8 f4       	brcc	.+58     	; 0x3138 <udc_process_setup+0x49c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	80 2f       	mov	r24, r16
    3102:	c2 dc       	rcall	.-1660   	; 0x2a88 <udc_update_iface_desc>
    3104:	88 23       	and	r24, r24
    3106:	c1 f0       	breq	.+48     	; 0x3138 <udc_process_setup+0x49c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3108:	f8 01       	movw	r30, r16
    310a:	ff 27       	eor	r31, r31
    310c:	cf 01       	movw	r24, r30
    310e:	88 0f       	add	r24, r24
    3110:	99 1f       	adc	r25, r25
    3112:	ea 81       	ldd	r30, Y+2	; 0x02
    3114:	fb 81       	ldd	r31, Y+3	; 0x03
    3116:	e8 0f       	add	r30, r24
    3118:	f9 1f       	adc	r31, r25
    311a:	c0 81       	ld	r28, Z
    311c:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    311e:	ee 81       	ldd	r30, Y+6	; 0x06
    3120:	ff 81       	ldd	r31, Y+7	; 0x07
    3122:	19 95       	eicall
    3124:	68 2f       	mov	r22, r24
    3126:	80 2f       	mov	r24, r16
    3128:	af dc       	rcall	.-1698   	; 0x2a88 <udc_update_iface_desc>
    312a:	88 23       	and	r24, r24
    312c:	29 f0       	breq	.+10     	; 0x3138 <udc_process_setup+0x49c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    312e:	ec 81       	ldd	r30, Y+4	; 0x04
    3130:	fd 81       	ldd	r31, Y+5	; 0x05
    3132:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    3134:	81 11       	cpse	r24, r1
    3136:	57 c0       	rjmp	.+174    	; 0x31e6 <udc_process_setup+0x54a>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    3138:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <udd_g_ctrlreq>
    313c:	8f 71       	andi	r24, 0x1F	; 31
    313e:	82 30       	cpi	r24, 0x02	; 2
    3140:	09 f0       	breq	.+2      	; 0x3144 <udc_process_setup+0x4a8>
    3142:	40 c0       	rjmp	.+128    	; 0x31c4 <udc_process_setup+0x528>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3144:	80 91 74 23 	lds	r24, 0x2374	; 0x802374 <udc_num_configuration>
    3148:	88 23       	and	r24, r24
    314a:	b1 f1       	breq	.+108    	; 0x31b8 <udc_process_setup+0x51c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    314c:	a0 91 72 23 	lds	r26, 0x2372	; 0x802372 <udc_ptr_conf>
    3150:	b0 91 73 23 	lds	r27, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    3154:	ed 91       	ld	r30, X+
    3156:	fc 91       	ld	r31, X
    3158:	11 97       	sbiw	r26, 0x01	; 1
    315a:	84 81       	ldd	r24, Z+4	; 0x04
    315c:	88 23       	and	r24, r24
    315e:	71 f1       	breq	.+92     	; 0x31bc <udc_process_setup+0x520>
    3160:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    3162:	ec 2f       	mov	r30, r28
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	ee 0f       	add	r30, r30
    3168:	ff 1f       	adc	r31, r31
    316a:	12 96       	adiw	r26, 0x02	; 2
    316c:	8d 91       	ld	r24, X+
    316e:	9c 91       	ld	r25, X
    3170:	13 97       	sbiw	r26, 0x03	; 3
    3172:	e8 0f       	add	r30, r24
    3174:	f9 1f       	adc	r31, r25
    3176:	00 81       	ld	r16, Z
    3178:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    317a:	d8 01       	movw	r26, r16
    317c:	16 96       	adiw	r26, 0x06	; 6
    317e:	ed 91       	ld	r30, X+
    3180:	fc 91       	ld	r31, X
    3182:	17 97       	sbiw	r26, 0x07	; 7
    3184:	19 95       	eicall
    3186:	68 2f       	mov	r22, r24
    3188:	8c 2f       	mov	r24, r28
    318a:	7e dc       	rcall	.-1796   	; 0x2a88 <udc_update_iface_desc>
    318c:	88 23       	and	r24, r24
    318e:	59 f1       	breq	.+86     	; 0x31e6 <udc_process_setup+0x54a>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    3190:	d8 01       	movw	r26, r16
    3192:	14 96       	adiw	r26, 0x04	; 4
    3194:	ed 91       	ld	r30, X+
    3196:	fc 91       	ld	r31, X
    3198:	15 97       	sbiw	r26, 0x05	; 5
    319a:	19 95       	eicall
    319c:	81 11       	cpse	r24, r1
    319e:	23 c0       	rjmp	.+70     	; 0x31e6 <udc_process_setup+0x54a>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    31a0:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    31a2:	a0 91 72 23 	lds	r26, 0x2372	; 0x802372 <udc_ptr_conf>
    31a6:	b0 91 73 23 	lds	r27, 0x2373	; 0x802373 <udc_ptr_conf+0x1>
    31aa:	ed 91       	ld	r30, X+
    31ac:	fc 91       	ld	r31, X
    31ae:	11 97       	sbiw	r26, 0x01	; 1
    31b0:	94 81       	ldd	r25, Z+4	; 0x04
    31b2:	c9 17       	cp	r28, r25
    31b4:	b0 f2       	brcs	.-84     	; 0x3162 <udc_process_setup+0x4c6>
    31b6:	17 c0       	rjmp	.+46     	; 0x31e6 <udc_process_setup+0x54a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	15 c0       	rjmp	.+42     	; 0x31e6 <udc_process_setup+0x54a>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	13 c0       	rjmp	.+38     	; 0x31e6 <udc_process_setup+0x54a>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	11 c0       	rjmp	.+34     	; 0x31e6 <udc_process_setup+0x54a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	0f c0       	rjmp	.+30     	; 0x31e6 <udc_process_setup+0x54a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    31c8:	98 2f       	mov	r25, r24
    31ca:	90 76       	andi	r25, 0x60	; 96
    31cc:	09 f0       	breq	.+2      	; 0x31d0 <udc_process_setup+0x534>
    31ce:	81 cf       	rjmp	.-254    	; 0x30d2 <udc_process_setup+0x436>
    31d0:	7e cd       	rjmp	.-1284   	; 0x2cce <udc_process_setup+0x32>
    31d2:	98 2f       	mov	r25, r24
    31d4:	90 76       	andi	r25, 0x60	; 96
    31d6:	09 f0       	breq	.+2      	; 0x31da <udc_process_setup+0x53e>
    31d8:	7c cf       	rjmp	.-264    	; 0x30d2 <udc_process_setup+0x436>
    31da:	84 ce       	rjmp	.-760    	; 0x2ee4 <udc_process_setup+0x248>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    31dc:	2e e0       	ldi	r18, 0x0E	; 14
		str = udc_string_product_name;
    31de:	80 ea       	ldi	r24, 0xA0	; 160
    31e0:	90 e2       	ldi	r25, 0x20	; 32
    31e2:	f5 cd       	rjmp	.-1046   	; 0x2dce <udc_process_setup+0x132>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    31e4:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	08 95       	ret

000031f0 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    31f0:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    31f4:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    31f6:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    31f8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    31fc:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    31fe:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3202:	08 95       	ret

00003204 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3204:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3206:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3208:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    320a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    320c:	60 83       	st	Z, r22
	ret                             // Return to caller
    320e:	08 95       	ret

00003210 <__udivmodhi4>:
    3210:	aa 1b       	sub	r26, r26
    3212:	bb 1b       	sub	r27, r27
    3214:	51 e1       	ldi	r21, 0x11	; 17
    3216:	07 c0       	rjmp	.+14     	; 0x3226 <__udivmodhi4_ep>

00003218 <__udivmodhi4_loop>:
    3218:	aa 1f       	adc	r26, r26
    321a:	bb 1f       	adc	r27, r27
    321c:	a6 17       	cp	r26, r22
    321e:	b7 07       	cpc	r27, r23
    3220:	10 f0       	brcs	.+4      	; 0x3226 <__udivmodhi4_ep>
    3222:	a6 1b       	sub	r26, r22
    3224:	b7 0b       	sbc	r27, r23

00003226 <__udivmodhi4_ep>:
    3226:	88 1f       	adc	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	5a 95       	dec	r21
    322c:	a9 f7       	brne	.-22     	; 0x3218 <__udivmodhi4_loop>
    322e:	80 95       	com	r24
    3230:	90 95       	com	r25
    3232:	bc 01       	movw	r22, r24
    3234:	cd 01       	movw	r24, r26
    3236:	08 95       	ret

00003238 <__udivmodsi4>:
    3238:	a1 e2       	ldi	r26, 0x21	; 33
    323a:	1a 2e       	mov	r1, r26
    323c:	aa 1b       	sub	r26, r26
    323e:	bb 1b       	sub	r27, r27
    3240:	fd 01       	movw	r30, r26
    3242:	0d c0       	rjmp	.+26     	; 0x325e <__udivmodsi4_ep>

00003244 <__udivmodsi4_loop>:
    3244:	aa 1f       	adc	r26, r26
    3246:	bb 1f       	adc	r27, r27
    3248:	ee 1f       	adc	r30, r30
    324a:	ff 1f       	adc	r31, r31
    324c:	a2 17       	cp	r26, r18
    324e:	b3 07       	cpc	r27, r19
    3250:	e4 07       	cpc	r30, r20
    3252:	f5 07       	cpc	r31, r21
    3254:	20 f0       	brcs	.+8      	; 0x325e <__udivmodsi4_ep>
    3256:	a2 1b       	sub	r26, r18
    3258:	b3 0b       	sbc	r27, r19
    325a:	e4 0b       	sbc	r30, r20
    325c:	f5 0b       	sbc	r31, r21

0000325e <__udivmodsi4_ep>:
    325e:	66 1f       	adc	r22, r22
    3260:	77 1f       	adc	r23, r23
    3262:	88 1f       	adc	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	1a 94       	dec	r1
    3268:	69 f7       	brne	.-38     	; 0x3244 <__udivmodsi4_loop>
    326a:	60 95       	com	r22
    326c:	70 95       	com	r23
    326e:	80 95       	com	r24
    3270:	90 95       	com	r25
    3272:	9b 01       	movw	r18, r22
    3274:	ac 01       	movw	r20, r24
    3276:	bd 01       	movw	r22, r26
    3278:	cf 01       	movw	r24, r30
    327a:	08 95       	ret

0000327c <__tablejump2__>:
    327c:	ee 0f       	add	r30, r30
    327e:	ff 1f       	adc	r31, r31
    3280:	88 1f       	adc	r24, r24
    3282:	8b bf       	out	0x3b, r24	; 59
    3284:	07 90       	elpm	r0, Z+
    3286:	f6 91       	elpm	r31, Z
    3288:	e0 2d       	mov	r30, r0
    328a:	19 94       	eijmp

0000328c <__umulhisi3>:
    328c:	a2 9f       	mul	r26, r18
    328e:	b0 01       	movw	r22, r0
    3290:	b3 9f       	mul	r27, r19
    3292:	c0 01       	movw	r24, r0
    3294:	a3 9f       	mul	r26, r19
    3296:	70 0d       	add	r23, r0
    3298:	81 1d       	adc	r24, r1
    329a:	11 24       	eor	r1, r1
    329c:	91 1d       	adc	r25, r1
    329e:	b2 9f       	mul	r27, r18
    32a0:	70 0d       	add	r23, r0
    32a2:	81 1d       	adc	r24, r1
    32a4:	11 24       	eor	r1, r1
    32a6:	91 1d       	adc	r25, r1
    32a8:	08 95       	ret

000032aa <memcpy>:
    32aa:	fb 01       	movw	r30, r22
    32ac:	dc 01       	movw	r26, r24
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <memcpy+0xa>
    32b0:	01 90       	ld	r0, Z+
    32b2:	0d 92       	st	X+, r0
    32b4:	41 50       	subi	r20, 0x01	; 1
    32b6:	50 40       	sbci	r21, 0x00	; 0
    32b8:	d8 f7       	brcc	.-10     	; 0x32b0 <memcpy+0x6>
    32ba:	08 95       	ret

000032bc <_exit>:
    32bc:	f8 94       	cli

000032be <__stop_program>:
    32be:	ff cf       	rjmp	.-2      	; 0x32be <__stop_program>
