
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007eee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00802000  00007eee  00007f82  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000461  00802150  00802150  000080d4  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000080d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00008130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000930  00000000  00000000  00008178  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017254  00000000  00000000  00008aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000652f  00000000  00000000  0001fcfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000d792  00000000  00000000  0002622b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025a8  00000000  00000000  000339c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003d884  00000000  00000000  00035f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000083dd  00000000  00000000  000737ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000908  00000000  00000000  0007bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000055cc  00000000  00000000  0007c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__ctors_end>
       4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
       c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      10:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      14:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      18:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__vector_6>
      1c:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__vector_7>
      20:	0c 94 df 11 	jmp	0x23be	; 0x23be <__vector_8>
      24:	0c 94 07 12 	jmp	0x240e	; 0x240e <__vector_9>
      28:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      2c:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__vector_11>
      30:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      34:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__vector_13>
      38:	0c 94 45 19 	jmp	0x328a	; 0x328a <__vector_14>
      3c:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__vector_15>
      40:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__vector_16>
      44:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__vector_17>
      48:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__vector_18>
      4c:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__vector_19>
      50:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__vector_20>
      54:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__vector_21>
      58:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__vector_22>
      5c:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <__vector_23>
      60:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      64:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      68:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      6c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      70:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      74:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      78:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      7c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      80:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      84:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      88:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      8c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      90:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      94:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      98:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      9c:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__vector_39>
      a0:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__vector_40>
      a4:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__vector_41>
      a8:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__vector_42>
      ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      b8:	0c 94 14 21 	jmp	0x4228	; 0x4228 <__vector_46>
      bc:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__vector_47>
      c0:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__vector_48>
      c4:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__vector_49>
      c8:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__vector_50>
      cc:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <__vector_51>
      d0:	0c 94 aa 1d 	jmp	0x3b54	; 0x3b54 <__vector_52>
      d4:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <__vector_53>
      d8:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__vector_54>
      dc:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__vector_55>
      e0:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__vector_56>
      e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      f8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
      fc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     100:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     104:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     108:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     10c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     110:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     114:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     118:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     11c:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__vector_71>
     120:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__vector_72>
     124:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__vector_73>
     128:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__vector_74>
     12c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     130:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     134:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__vector_77>
     138:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__vector_78>
     13c:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <__vector_79>
     140:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__vector_80>
     144:	0c 94 bb 1b 	jmp	0x3776	; 0x3776 <__vector_81>
     148:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__vector_82>
     14c:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__vector_83>
     150:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__vector_84>
     154:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__vector_85>
     158:	0c 94 9c 1c 	jmp	0x3938	; 0x3938 <__vector_86>
     15c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     160:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     164:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     168:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     16c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     170:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     174:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     178:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     17c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     180:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     184:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     188:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     18c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     190:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     194:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     198:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     19c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1a8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ac:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1b0:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__vector_108>
     1b4:	0c 94 b8 1e 	jmp	0x3d70	; 0x3d70 <__vector_109>
     1b8:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <__vector_110>
     1bc:	0c 94 12 1f 	jmp	0x3e24	; 0x3e24 <__vector_111>
     1c0:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__vector_112>
     1c4:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__vector_113>
     1c8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1cc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1d8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1dc:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e4:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1e8:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1ec:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__bad_interrupt>
     1f4:	0c 94 d1 27 	jmp	0x4fa2	; 0x4fa2 <__vector_125>
     1f8:	0c 94 8b 28 	jmp	0x5116	; 0x5116 <__vector_126>
     1fc:	b2 22       	and	r11, r18
     1fe:	b5 22       	and	r11, r21
     200:	b8 22       	and	r11, r24
     202:	bb 22       	and	r11, r27
     204:	be 22       	and	r11, r30
     206:	c1 22       	and	r12, r17
     208:	c4 22       	and	r12, r20
     20a:	03 2a       	or	r0, r19
     20c:	16 2a       	or	r1, r22
     20e:	29 2a       	or	r2, r25
     210:	3c 2a       	or	r3, r28
     212:	4f 2a       	or	r4, r31
     214:	62 2a       	or	r6, r18
     216:	75 2a       	or	r7, r21

00000218 <PM_SINE>:
     218:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     228:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     238:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     248:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     258:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     268:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     278:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     288:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     298:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     2a8:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     2b8:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     2c8:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     2d8:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     2e8:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     2f8:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     308:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     318:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     328:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     338:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     348:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     358:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     368:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     378:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     388:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     398:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     3a8:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     3b8:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     3c8:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     3d8:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     3e8:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     3f8:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     408:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     418:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     428:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     438:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     448:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     458:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     468:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     478:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     488:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     498:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     4a8:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     4b8:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
     4c8:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
     4d8:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
     4e8:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
     4f8:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
     508:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
     518:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
     528:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
     538:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
     548:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
     558:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
     568:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
     578:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
     588:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
     598:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
     5a8:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
     5b8:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
     5c8:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
     5d8:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
     5e8:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
     5f8:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
     608:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
     618:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
     628:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
     638:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
     648:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
     658:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
     668:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
     678:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
     688:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
     698:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
     6a8:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
     6b8:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
     6c8:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
     6d8:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
     6e8:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
     6f8:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
     708:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
     718:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
     728:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
     738:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
     748:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
     758:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
     768:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
     778:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
     788:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
     798:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
     7a8:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
     7b8:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
     7c8:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
     7d8:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
     7e8:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
     7f8:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
     808:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
     818:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
     828:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
     838:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
     848:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
     858:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
     868:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
     878:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
     888:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
     898:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
     8a8:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
     8b8:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
     8c8:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
     8d8:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
     8e8:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
     8f8:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
     908:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
     918:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
     928:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
     938:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
     948:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
     958:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
     968:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
     978:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
     988:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
     998:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
     9a8:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
     9b8:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
     9c8:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
     9d8:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
     9e8:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
     9f8:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
     a08:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
     a18:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
     a28:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
     a38:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
     a48:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
     a58:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
     a68:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
     a78:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
     a88:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
     a98:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
     aa8:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
     ab8:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
     ac8:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
     ad8:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
     ae8:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
     af8:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
     b08:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
     b18:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
     b28:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
     b38:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
     b48:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
     b58:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
     b68:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
     b78:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
     b88:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
     b98:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
     ba8:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
     bb8:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
     bc8:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
     bd8:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
     be8:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
     bf8:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
     c08:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
     c18:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
     c28:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
     c38:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
     c48:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
     c58:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
     c68:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
     c78:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
     c88:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
     c98:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
     ca8:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
     cb8:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
     cc8:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
     cd8:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
     ce8:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
     cf8:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
     d08:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
     d18:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
     d28:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
     d38:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
     d48:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
     d58:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
     d68:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
     d78:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
     d88:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
     d98:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
     da8:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
     db8:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
     dc8:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
     dd8:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
     de8:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
     df8:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
     e08:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
     e18:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
     e28:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
     e38:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
     e48:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
     e58:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
     e68:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
     e78:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
     e88:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
     e98:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
     ea8:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
     eb8:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
     ec8:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
     ed8:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
     ee8:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
     ef8:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
     f08:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
     f18:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
     f28:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
     f38:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
     f48:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
     f58:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
     f68:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
     f78:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
     f88:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
     f98:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
     fa8:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
     fb8:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
     fc8:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
     fd8:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
     fe8:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
     ff8:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1008:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1018:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    1028:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    1038:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    1048:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    1058:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    1068:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    1078:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1088:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1098:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    10a8:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    10b8:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    10c8:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    10d8:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    10e8:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    10f8:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1108:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1118:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    1128:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    1138:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    1148:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    1158:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    1168:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    1178:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1188:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1198:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    11a8:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    11b8:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    11c8:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    11d8:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    11e8:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    11f8:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1208:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1218:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    1228:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    1238:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    1248:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    1258:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    1268:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    1278:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1288:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1298:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    12a8:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    12b8:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    12c8:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    12d8:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    12e8:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    12f8:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1308:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1318:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    1328:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    1338:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    1348:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    1358:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    1368:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    1378:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1388:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1398:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    13a8:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    13b8:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    13c8:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    13d8:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    13e8:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    13f8:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1408:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1418:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1428:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1438:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1448:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1458:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    1468:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    1478:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    1488:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    1498:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    14a8:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    14b8:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    14c8:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    14d8:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    14e8:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    14f8:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    1508:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    1518:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    1528:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    1538:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    1548:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    1558:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    1568:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    1578:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    1588:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    1598:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    15a8:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    15b8:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    15c8:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    15d8:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    15e8:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    15f8:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    1608:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    1618:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    1628:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    1638:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    1648:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    1658:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    1668:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    1678:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    1688:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    1698:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    16a8:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    16b8:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    16c8:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    16d8:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    16e8:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    16f8:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    1708:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    1718:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    1728:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    1738:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    1748:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    1758:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    1768:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    1778:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    1788:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    1798:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    17a8:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    17b8:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    17c8:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    17d8:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    17e8:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    17f8:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    1808:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    1818:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    1828:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    1838:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    1848:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    1858:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    1868:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    1878:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    1888:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    1898:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    18a8:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    18b8:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    18c8:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    18d8:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    18e8:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    18f8:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    1908:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    1918:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    1928:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    1938:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    1948:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    1958:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    1968:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    1978:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    1988:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    1998:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    19a8:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    19b8:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    19c8:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    19d8:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    19e8:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    19f8:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    1a08:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    1a18:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    1a28:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    1a38:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    1a48:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    1a58:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    1a68:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    1a78:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    1a88:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    1a98:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    1aa8:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    1ab8:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    1ac8:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    1ad8:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    1ae8:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    1af8:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    1b08:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    1b18:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    1b28:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    1b38:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    1b48:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    1b58:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    1b68:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    1b78:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    1b88:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    1b98:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    1ba8:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    1bb8:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    1bc8:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    1bd8:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    1be8:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    1bf8:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    1c08:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    1c18:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    1c28:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    1c38:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    1c48:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    1c58:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    1c68:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    1c78:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    1c88:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    1c98:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    1ca8:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    1cb8:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    1cc8:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    1cd8:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    1ce8:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    1cf8:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    1d08:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    1d18:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    1d28:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    1d38:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    1d48:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    1d58:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    1d68:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    1d78:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    1d88:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    1d98:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    1da8:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    1db8:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    1dc8:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    1dd8:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    1de8:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    1df8:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    1e08:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    1e18:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    1e28:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    1e38:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    1e48:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    1e58:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    1e68:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    1e78:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    1e88:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    1e98:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    1ea8:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    1eb8:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    1ec8:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    1ed8:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    1ee8:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    1ef8:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    1f08:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    1f18:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    1f28:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    1f38:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    1f48:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    1f58:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    1f68:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    1f78:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    1f88:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    1f98:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    1fa8:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    1fb8:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    1fc8:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    1fd8:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    1fe8:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    1ff8:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2008:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2018:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    2028:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    2038:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    2048:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    2058:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    2068:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    2078:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2088:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2098:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    20a8:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    20b8:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    20c8:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    20d8:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    20e8:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    20f8:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2108:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2118:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    2128:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    2138:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    2148:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    2158:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    2168:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    2178:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2188:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2198:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    21a8:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    21b8:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    21c8:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    21d8:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    21e8:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    21f8:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2208:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002218 <__ctors_end>:
    2218:	11 24       	eor	r1, r1
    221a:	1f be       	out	0x3f, r1	; 63
    221c:	cf ef       	ldi	r28, 0xFF	; 255
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	df e5       	ldi	r29, 0x5F	; 95
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	0c bf       	out	0x3c, r16	; 60

00002228 <__do_copy_data>:
    2228:	11 e2       	ldi	r17, 0x21	; 33
    222a:	a0 e0       	ldi	r26, 0x00	; 0
    222c:	b0 e2       	ldi	r27, 0x20	; 32
    222e:	ee ee       	ldi	r30, 0xEE	; 238
    2230:	fe e7       	ldi	r31, 0x7E	; 126
    2232:	00 e0       	ldi	r16, 0x00	; 0
    2234:	0b bf       	out	0x3b, r16	; 59
    2236:	02 c0       	rjmp	.+4      	; 0x223c <__do_copy_data+0x14>
    2238:	07 90       	elpm	r0, Z+
    223a:	0d 92       	st	X+, r0
    223c:	a0 35       	cpi	r26, 0x50	; 80
    223e:	b1 07       	cpc	r27, r17
    2240:	d9 f7       	brne	.-10     	; 0x2238 <__do_copy_data+0x10>

00002242 <__do_clear_bss>:
    2242:	25 e2       	ldi	r18, 0x25	; 37
    2244:	a0 e5       	ldi	r26, 0x50	; 80
    2246:	b1 e2       	ldi	r27, 0x21	; 33
    2248:	01 c0       	rjmp	.+2      	; 0x224c <.do_clear_bss_start>

0000224a <.do_clear_bss_loop>:
    224a:	1d 92       	st	X+, r1

0000224c <.do_clear_bss_start>:
    224c:	a1 3b       	cpi	r26, 0xB1	; 177
    224e:	b2 07       	cpc	r27, r18
    2250:	e1 f7       	brne	.-8      	; 0x224a <.do_clear_bss_loop>
    2252:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <main>
    2256:	0c 94 75 3f 	jmp	0x7eea	; 0x7eea <_exit>

0000225a <__bad_interrupt>:
    225a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000225e <dma_interrupt>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	48 2f       	mov	r20, r24
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	fa 01       	movw	r30, r20
    2268:	71 96       	adiw	r30, 0x11	; 17
    226a:	e2 95       	swap	r30
    226c:	f2 95       	swap	r31
    226e:	f0 7f       	andi	r31, 0xF0	; 240
    2270:	fe 27       	eor	r31, r30
    2272:	e0 7f       	andi	r30, 0xF0	; 240
    2274:	fe 27       	eor	r31, r30
    2276:	a0 e0       	ldi	r26, 0x00	; 0
    2278:	b1 e0       	ldi	r27, 0x01	; 1
    227a:	14 96       	adiw	r26, 0x04	; 4
    227c:	9c 91       	ld	r25, X
    227e:	14 97       	sbiw	r26, 0x04	; 4
    2280:	13 96       	adiw	r26, 0x03	; 3
    2282:	6c 91       	ld	r22, X
    2284:	da 01       	movw	r26, r20
    2286:	14 96       	adiw	r26, 0x04	; 4
    2288:	21 e0       	ldi	r18, 0x01	; 1
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	e9 01       	movw	r28, r18
    228e:	08 2e       	mov	r0, r24
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <dma_interrupt+0x38>
    2292:	cc 0f       	add	r28, r28
    2294:	dd 1f       	adc	r29, r29
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <dma_interrupt+0x34>
    229a:	0a 2e       	mov	r0, r26
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <dma_interrupt+0x44>
    229e:	22 0f       	add	r18, r18
    22a0:	33 1f       	adc	r19, r19
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <dma_interrupt+0x40>
    22a6:	2c 2b       	or	r18, r28
    22a8:	62 23       	and	r22, r18
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	eb 01       	movw	r28, r22
    22ae:	0a 2e       	mov	r0, r26
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <dma_interrupt+0x58>
    22b2:	d5 95       	asr	r29
    22b4:	c7 95       	ror	r28
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <dma_interrupt+0x54>
    22ba:	c0 fd       	sbrc	r28, 0
    22bc:	1a c0       	rjmp	.+52     	; 0x22f2 <dma_interrupt+0x94>
    22be:	08 2e       	mov	r0, r24
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <dma_interrupt+0x68>
    22c2:	75 95       	asr	r23
    22c4:	67 95       	ror	r22
    22c6:	0a 94       	dec	r0
    22c8:	e2 f7       	brpl	.-8      	; 0x22c2 <dma_interrupt+0x64>
    22ca:	60 fd       	sbrc	r22, 0
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <dma_interrupt+0x98>
    22ce:	29 23       	and	r18, r25
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	b9 01       	movw	r22, r18
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <dma_interrupt+0x7c>
    22d6:	75 95       	asr	r23
    22d8:	67 95       	ror	r22
    22da:	aa 95       	dec	r26
    22dc:	e2 f7       	brpl	.-8      	; 0x22d6 <dma_interrupt+0x78>
    22de:	60 fd       	sbrc	r22, 0
    22e0:	0c c0       	rjmp	.+24     	; 0x22fa <dma_interrupt+0x9c>
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <dma_interrupt+0x8a>
    22e4:	35 95       	asr	r19
    22e6:	27 95       	ror	r18
    22e8:	8a 95       	dec	r24
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <dma_interrupt+0x86>
    22ec:	82 2f       	mov	r24, r18
    22ee:	81 70       	andi	r24, 0x01	; 1
    22f0:	05 c0       	rjmp	.+10     	; 0x22fc <dma_interrupt+0x9e>
    22f2:	84 e0       	ldi	r24, 0x04	; 4
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <dma_interrupt+0x9e>
    22f6:	83 e0       	ldi	r24, 0x03	; 3
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <dma_interrupt+0x9e>
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	91 81       	ldd	r25, Z+1	; 0x01
    22fe:	90 63       	ori	r25, 0x30	; 48
    2300:	91 83       	std	Z+1, r25	; 0x01
    2302:	44 0f       	add	r20, r20
    2304:	55 1f       	adc	r21, r21
    2306:	fa 01       	movw	r30, r20
    2308:	e3 58       	subi	r30, 0x83	; 131
    230a:	fa 4d       	sbci	r31, 0xDA	; 218
    230c:	01 90       	ld	r0, Z+
    230e:	f0 81       	ld	r31, Z
    2310:	e0 2d       	mov	r30, r0
    2312:	30 97       	sbiw	r30, 0x00	; 0
    2314:	09 f0       	breq	.+2      	; 0x2318 <dma_interrupt+0xba>
    2316:	19 95       	eicall
    2318:	df 91       	pop	r29
    231a:	cf 91       	pop	r28
    231c:	08 95       	ret

0000231e <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    231e:	1f 92       	push	r1
    2320:	0f 92       	push	r0
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	0f 92       	push	r0
    2326:	11 24       	eor	r1, r1
    2328:	0b b6       	in	r0, 0x3b	; 59
    232a:	0f 92       	push	r0
    232c:	2f 93       	push	r18
    232e:	3f 93       	push	r19
    2330:	4f 93       	push	r20
    2332:	5f 93       	push	r21
    2334:	6f 93       	push	r22
    2336:	7f 93       	push	r23
    2338:	8f 93       	push	r24
    233a:	9f 93       	push	r25
    233c:	af 93       	push	r26
    233e:	bf 93       	push	r27
    2340:	ef 93       	push	r30
    2342:	ff 93       	push	r31
	dma_interrupt(0);
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	8b df       	rcall	.-234    	; 0x225e <dma_interrupt>
}
    2348:	ff 91       	pop	r31
    234a:	ef 91       	pop	r30
    234c:	bf 91       	pop	r27
    234e:	af 91       	pop	r26
    2350:	9f 91       	pop	r25
    2352:	8f 91       	pop	r24
    2354:	7f 91       	pop	r23
    2356:	6f 91       	pop	r22
    2358:	5f 91       	pop	r21
    235a:	4f 91       	pop	r20
    235c:	3f 91       	pop	r19
    235e:	2f 91       	pop	r18
    2360:	0f 90       	pop	r0
    2362:	0b be       	out	0x3b, r0	; 59
    2364:	0f 90       	pop	r0
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	0f 90       	pop	r0
    236a:	1f 90       	pop	r1
    236c:	18 95       	reti

0000236e <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    236e:	1f 92       	push	r1
    2370:	0f 92       	push	r0
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	0f 92       	push	r0
    2376:	11 24       	eor	r1, r1
    2378:	0b b6       	in	r0, 0x3b	; 59
    237a:	0f 92       	push	r0
    237c:	2f 93       	push	r18
    237e:	3f 93       	push	r19
    2380:	4f 93       	push	r20
    2382:	5f 93       	push	r21
    2384:	6f 93       	push	r22
    2386:	7f 93       	push	r23
    2388:	8f 93       	push	r24
    238a:	9f 93       	push	r25
    238c:	af 93       	push	r26
    238e:	bf 93       	push	r27
    2390:	ef 93       	push	r30
    2392:	ff 93       	push	r31
	dma_interrupt(1);
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	63 df       	rcall	.-314    	; 0x225e <dma_interrupt>
}
    2398:	ff 91       	pop	r31
    239a:	ef 91       	pop	r30
    239c:	bf 91       	pop	r27
    239e:	af 91       	pop	r26
    23a0:	9f 91       	pop	r25
    23a2:	8f 91       	pop	r24
    23a4:	7f 91       	pop	r23
    23a6:	6f 91       	pop	r22
    23a8:	5f 91       	pop	r21
    23aa:	4f 91       	pop	r20
    23ac:	3f 91       	pop	r19
    23ae:	2f 91       	pop	r18
    23b0:	0f 90       	pop	r0
    23b2:	0b be       	out	0x3b, r0	; 59
    23b4:	0f 90       	pop	r0
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	0f 90       	pop	r0
    23ba:	1f 90       	pop	r1
    23bc:	18 95       	reti

000023be <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    23be:	1f 92       	push	r1
    23c0:	0f 92       	push	r0
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	0f 92       	push	r0
    23c6:	11 24       	eor	r1, r1
    23c8:	0b b6       	in	r0, 0x3b	; 59
    23ca:	0f 92       	push	r0
    23cc:	2f 93       	push	r18
    23ce:	3f 93       	push	r19
    23d0:	4f 93       	push	r20
    23d2:	5f 93       	push	r21
    23d4:	6f 93       	push	r22
    23d6:	7f 93       	push	r23
    23d8:	8f 93       	push	r24
    23da:	9f 93       	push	r25
    23dc:	af 93       	push	r26
    23de:	bf 93       	push	r27
    23e0:	ef 93       	push	r30
    23e2:	ff 93       	push	r31
	dma_interrupt(2);
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	3b df       	rcall	.-394    	; 0x225e <dma_interrupt>
}
    23e8:	ff 91       	pop	r31
    23ea:	ef 91       	pop	r30
    23ec:	bf 91       	pop	r27
    23ee:	af 91       	pop	r26
    23f0:	9f 91       	pop	r25
    23f2:	8f 91       	pop	r24
    23f4:	7f 91       	pop	r23
    23f6:	6f 91       	pop	r22
    23f8:	5f 91       	pop	r21
    23fa:	4f 91       	pop	r20
    23fc:	3f 91       	pop	r19
    23fe:	2f 91       	pop	r18
    2400:	0f 90       	pop	r0
    2402:	0b be       	out	0x3b, r0	; 59
    2404:	0f 90       	pop	r0
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	0f 90       	pop	r0
    240a:	1f 90       	pop	r1
    240c:	18 95       	reti

0000240e <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    240e:	1f 92       	push	r1
    2410:	0f 92       	push	r0
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	0f 92       	push	r0
    2416:	11 24       	eor	r1, r1
    2418:	0b b6       	in	r0, 0x3b	; 59
    241a:	0f 92       	push	r0
    241c:	2f 93       	push	r18
    241e:	3f 93       	push	r19
    2420:	4f 93       	push	r20
    2422:	5f 93       	push	r21
    2424:	6f 93       	push	r22
    2426:	7f 93       	push	r23
    2428:	8f 93       	push	r24
    242a:	9f 93       	push	r25
    242c:	af 93       	push	r26
    242e:	bf 93       	push	r27
    2430:	ef 93       	push	r30
    2432:	ff 93       	push	r31
	dma_interrupt(3);
    2434:	83 e0       	ldi	r24, 0x03	; 3
    2436:	13 df       	rcall	.-474    	; 0x225e <dma_interrupt>
}
    2438:	ff 91       	pop	r31
    243a:	ef 91       	pop	r30
    243c:	bf 91       	pop	r27
    243e:	af 91       	pop	r26
    2440:	9f 91       	pop	r25
    2442:	8f 91       	pop	r24
    2444:	7f 91       	pop	r23
    2446:	6f 91       	pop	r22
    2448:	5f 91       	pop	r21
    244a:	4f 91       	pop	r20
    244c:	3f 91       	pop	r19
    244e:	2f 91       	pop	r18
    2450:	0f 90       	pop	r0
    2452:	0b be       	out	0x3b, r0	; 59
    2454:	0f 90       	pop	r0
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	0f 90       	pop	r0
    245a:	1f 90       	pop	r1
    245c:	18 95       	reti

0000245e <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    245e:	04 c0       	rjmp	.+8      	; 0x2468 <__portable_avr_delay_cycles+0xa>
    2460:	61 50       	subi	r22, 0x01	; 1
    2462:	71 09       	sbc	r23, r1
    2464:	81 09       	sbc	r24, r1
    2466:	91 09       	sbc	r25, r1
    2468:	61 15       	cp	r22, r1
    246a:	71 05       	cpc	r23, r1
    246c:	81 05       	cpc	r24, r1
    246e:	91 05       	cpc	r25, r1
    2470:	b9 f7       	brne	.-18     	; 0x2460 <__portable_avr_delay_cycles+0x2>
    2472:	08 95       	ret

00002474 <rtc_get_time>:
    2474:	80 e1       	ldi	r24, 0x10	; 16
    2476:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    247a:	e0 e2       	ldi	r30, 0x20	; 32
    247c:	f4 e0       	ldi	r31, 0x04	; 4
    247e:	81 81       	ldd	r24, Z+1	; 0x01
    2480:	84 fd       	sbrc	r24, 4
    2482:	fd cf       	rjmp	.-6      	; 0x247e <rtc_get_time+0xa>
    2484:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    2488:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    248c:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    2490:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    2494:	08 95       	ret

00002496 <rtc_set_callback>:
    2496:	80 93 85 25 	sts	0x2585, r24	; 0x802585 <rtc_data>
    249a:	90 93 86 25 	sts	0x2586, r25	; 0x802586 <rtc_data+0x1>
    249e:	08 95       	ret

000024a0 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    24a4:	64 e0       	ldi	r22, 0x04	; 4
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    24ac:	c0 ef       	ldi	r28, 0xF0	; 240
    24ae:	d0 e0       	ldi	r29, 0x00	; 0
    24b0:	88 81       	ld	r24, Y
    24b2:	82 60       	ori	r24, 0x02	; 2
    24b4:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    24b6:	61 e0       	ldi	r22, 0x01	; 1
    24b8:	80 ef       	ldi	r24, 0xF0	; 240
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    24c0:	88 81       	ld	r24, Y
    24c2:	84 60       	ori	r24, 0x04	; 4
    24c4:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    24c6:	69 ee       	ldi	r22, 0xE9	; 233
    24c8:	73 e0       	ldi	r23, 0x03	; 3
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	c7 df       	rcall	.-114    	; 0x245e <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    24d0:	88 81       	ld	r24, Y
    24d2:	88 61       	ori	r24, 0x18	; 24
    24d4:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    24d6:	e0 ef       	ldi	r30, 0xF0	; 240
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	81 81       	ldd	r24, Z+1	; 0x01
    24dc:	83 ff       	sbrs	r24, 3
    24de:	fd cf       	rjmp	.-6      	; 0x24da <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    24e0:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    24e4:	e0 e2       	ldi	r30, 0x20	; 32
    24e6:	f4 e0       	ldi	r31, 0x04	; 4
    24e8:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    24ea:	80 fd       	sbrc	r24, 0
    24ec:	fd cf       	rjmp	.-6      	; 0x24e8 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    24ee:	e0 e2       	ldi	r30, 0x20	; 32
    24f0:	f4 e0       	ldi	r31, 0x04	; 4
    24f2:	8f ef       	ldi	r24, 0xFF	; 255
    24f4:	9f ef       	ldi	r25, 0xFF	; 255
    24f6:	dc 01       	movw	r26, r24
    24f8:	80 87       	std	Z+8, r24	; 0x08
    24fa:	91 87       	std	Z+9, r25	; 0x09
    24fc:	a2 87       	std	Z+10, r26	; 0x0a
    24fe:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    2500:	14 82       	std	Z+4, r1	; 0x04
    2502:	15 82       	std	Z+5, r1	; 0x05
    2504:	16 82       	std	Z+6, r1	; 0x06
    2506:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2508:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    250a:	80 fd       	sbrc	r24, 0
    250c:	fd cf       	rjmp	.-6      	; 0x2508 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    250e:	e0 e2       	ldi	r30, 0x20	; 32
    2510:	f4 e0       	ldi	r31, 0x04	; 4
    2512:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2518:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    251a:	80 fd       	sbrc	r24, 0
    251c:	fd cf       	rjmp	.-6      	; 0x2518 <rtc_init+0x78>
}
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	08 95       	ret

00002524 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    2524:	1f 92       	push	r1
    2526:	0f 92       	push	r0
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	0f 92       	push	r0
    252c:	11 24       	eor	r1, r1
    252e:	0b b6       	in	r0, 0x3b	; 59
    2530:	0f 92       	push	r0
    2532:	2f 93       	push	r18
    2534:	3f 93       	push	r19
    2536:	4f 93       	push	r20
    2538:	5f 93       	push	r21
    253a:	6f 93       	push	r22
    253c:	7f 93       	push	r23
    253e:	8f 93       	push	r24
    2540:	9f 93       	push	r25
    2542:	af 93       	push	r26
    2544:	bf 93       	push	r27
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	ef 93       	push	r30
    254c:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    254e:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    2552:	c0 91 85 25 	lds	r28, 0x2585	; 0x802585 <rtc_data>
    2556:	d0 91 86 25 	lds	r29, 0x2586	; 0x802586 <rtc_data+0x1>
    255a:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    255c:	19 f0       	breq	.+6      	; 0x2564 <__vector_11+0x40>
    255e:	8a df       	rcall	.-236    	; 0x2474 <rtc_get_time>
    2560:	fe 01       	movw	r30, r28
}
    2562:	19 95       	eicall
    2564:	ff 91       	pop	r31
    2566:	ef 91       	pop	r30
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	bf 91       	pop	r27
    256e:	af 91       	pop	r26
    2570:	9f 91       	pop	r25
    2572:	8f 91       	pop	r24
    2574:	7f 91       	pop	r23
    2576:	6f 91       	pop	r22
    2578:	5f 91       	pop	r21
    257a:	4f 91       	pop	r20
    257c:	3f 91       	pop	r19
    257e:	2f 91       	pop	r18
    2580:	0f 90       	pop	r0
    2582:	0b be       	out	0x3b, r0	; 59
    2584:	0f 90       	pop	r0
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	0f 90       	pop	r0
    258a:	1f 90       	pop	r1
    258c:	18 95       	reti

0000258e <get_interpolated_sine>:
PROGMEM_DECLARE(uint16_t, PM_SINE[PM_SINE_COUNT]);


/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase, uint8_t noise)
{
    258e:	0f 93       	push	r16
    2590:	1f 93       	push	r17
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	a6 2f       	mov	r26, r22
	/* Randomizer */
	static uint32_t rnd1 = 0b11001001001101100110110010010011UL;
	static uint32_t rnd2 = 0xffffffffUL;
	rnd2 ^= rnd1;
    2598:	00 91 0a 20 	lds	r16, 0x200A	; 0x80200a <rnd2.7145>
    259c:	10 91 0b 20 	lds	r17, 0x200B	; 0x80200b <rnd2.7145+0x1>
    25a0:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <rnd2.7145+0x2>
    25a4:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <rnd2.7145+0x3>
    25a8:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <rnd1.7144>
    25ac:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <rnd1.7144+0x1>
    25b0:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <rnd1.7144+0x2>
    25b4:	70 91 09 20 	lds	r23, 0x2009	; 0x802009 <rnd1.7144+0x3>
    25b8:	40 27       	eor	r20, r16
    25ba:	51 27       	eor	r21, r17
    25bc:	62 27       	eor	r22, r18
    25be:	73 27       	eor	r23, r19
    25c0:	40 93 0a 20 	sts	0x200A, r20	; 0x80200a <rnd2.7145>
    25c4:	50 93 0b 20 	sts	0x200B, r21	; 0x80200b <rnd2.7145+0x1>
    25c8:	60 93 0c 20 	sts	0x200C, r22	; 0x80200c <rnd2.7145+0x2>
    25cc:	70 93 0d 20 	sts	0x200D, r23	; 0x80200d <rnd2.7145+0x3>
	rnd1  = (rnd2 << 3) ^ (rnd2 >> 1) ^ 0b11010111010111101011001110111011UL;
    25d0:	8a 01       	movw	r16, r20
    25d2:	9b 01       	movw	r18, r22
    25d4:	00 0f       	add	r16, r16
    25d6:	11 1f       	adc	r17, r17
    25d8:	22 1f       	adc	r18, r18
    25da:	33 1f       	adc	r19, r19
    25dc:	00 0f       	add	r16, r16
    25de:	11 1f       	adc	r17, r17
    25e0:	22 1f       	adc	r18, r18
    25e2:	33 1f       	adc	r19, r19
    25e4:	00 0f       	add	r16, r16
    25e6:	11 1f       	adc	r17, r17
    25e8:	22 1f       	adc	r18, r18
    25ea:	33 1f       	adc	r19, r19
    25ec:	76 95       	lsr	r23
    25ee:	67 95       	ror	r22
    25f0:	57 95       	ror	r21
    25f2:	47 95       	ror	r20
    25f4:	40 27       	eor	r20, r16
    25f6:	51 27       	eor	r21, r17
    25f8:	62 27       	eor	r22, r18
    25fa:	73 27       	eor	r23, r19
    25fc:	2b eb       	ldi	r18, 0xBB	; 187
    25fe:	42 27       	eor	r20, r18
    2600:	23 eb       	ldi	r18, 0xB3	; 179
    2602:	52 27       	eor	r21, r18
    2604:	2e e5       	ldi	r18, 0x5E	; 94
    2606:	62 27       	eor	r22, r18
    2608:	27 ed       	ldi	r18, 0xD7	; 215
    260a:	72 27       	eor	r23, r18
    260c:	40 93 06 20 	sts	0x2006, r20	; 0x802006 <rnd1.7144>
    2610:	50 93 07 20 	sts	0x2007, r21	; 0x802007 <rnd1.7144+0x1>
    2614:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <rnd1.7144+0x2>
    2618:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <rnd1.7144+0x3>

	/* Interpolate result */
	uint16_t left_x       = phase >> 4;
    261c:	9c 01       	movw	r18, r24
    261e:	32 95       	swap	r19
    2620:	22 95       	swap	r18
    2622:	2f 70       	andi	r18, 0x0F	; 15
    2624:	23 27       	eor	r18, r19
    2626:	3f 70       	andi	r19, 0x0F	; 15
    2628:	23 27       	eor	r18, r19
	int16_t  left_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[left_x])) - 0x8000;
    262a:	f9 01       	movw	r30, r18
    262c:	ee 0f       	add	r30, r30
    262e:	ff 1f       	adc	r31, r31
    2630:	e8 5e       	subi	r30, 0xE8	; 232
    2632:	fd 4f       	sbci	r31, 0xFD	; 253
    2634:	c5 91       	lpm	r28, Z+
    2636:	d4 91       	lpm	r29, Z
    2638:	d0 58       	subi	r29, 0x80	; 128
	uint16_t rght_x       = left_x + 1;
	int16_t  rght_y       = (int16_t)PGM_READ_WORD(&(PM_SINE[rght_x])) - 0x8000;
    263a:	f9 01       	movw	r30, r18
    263c:	ee 0f       	add	r30, r30
    263e:	ff 1f       	adc	r31, r31
    2640:	e6 5e       	subi	r30, 0xE6	; 230
    2642:	fd 4f       	sbci	r31, 0xFD	; 253
    2644:	25 91       	lpm	r18, Z+
    2646:	34 91       	lpm	r19, Z
	int16_t  prob         = phase & 0x0f;					// phase_frac
    2648:	8f 70       	andi	r24, 0x0F	; 15
    264a:	99 27       	eor	r25, r25
	int16_t  delta_frac_y = (int16_t) (((rght_y - left_y) * prob) >> 4);
	int16_t  val          = left_y + delta_frac_y;
    264c:	30 58       	subi	r19, 0x80	; 128
    264e:	2c 1b       	sub	r18, r28
    2650:	3d 0b       	sbc	r19, r29
    2652:	28 9f       	mul	r18, r24
    2654:	f0 01       	movw	r30, r0
    2656:	29 9f       	mul	r18, r25
    2658:	f0 0d       	add	r31, r0
    265a:	38 9f       	mul	r19, r24
    265c:	f0 0d       	add	r31, r0
    265e:	11 24       	eor	r1, r1
    2660:	9f 01       	movw	r18, r30
    2662:	35 95       	asr	r19
    2664:	27 95       	ror	r18
    2666:	35 95       	asr	r19
    2668:	27 95       	ror	r18
    266a:	35 95       	asr	r19
    266c:	27 95       	ror	r18
    266e:	35 95       	asr	r19
    2670:	27 95       	ror	r18
    2672:	c2 0f       	add	r28, r18
    2674:	d3 1f       	adc	r29, r19

	if (noise) {
    2676:	aa 23       	and	r26, r26
    2678:	e1 f0       	breq	.+56     	; 0x26b2 <get_interpolated_sine+0x124>
		/* Adding randomized noise to suppress artifacts */
		prob <<= 4;											// probability := phase_frac
    267a:	82 95       	swap	r24
    267c:	92 95       	swap	r25
    267e:	90 7f       	andi	r25, 0xF0	; 240
    2680:	98 27       	eor	r25, r24
    2682:	80 7f       	andi	r24, 0xF0	; 240
    2684:	98 27       	eor	r25, r24
		int16_t mult = (int16_t) (rnd1 & 0xff);
		prob *= mult;
		return 0x8000U + (((prob >= 0x4000) && (val < 0x7fff)) ?  ((uint16_t)val + 1U) : (uint16_t)val);
    2686:	55 27       	eor	r21, r21
    2688:	48 9f       	mul	r20, r24
    268a:	90 01       	movw	r18, r0
    268c:	49 9f       	mul	r20, r25
    268e:	30 0d       	add	r19, r0
    2690:	58 9f       	mul	r21, r24
    2692:	30 0d       	add	r19, r0
    2694:	11 24       	eor	r1, r1
    2696:	21 15       	cp	r18, r1
    2698:	30 44       	sbci	r19, 0x40	; 64
    269a:	44 f0       	brlt	.+16     	; 0x26ac <get_interpolated_sine+0x11e>
    269c:	cf 3f       	cpi	r28, 0xFF	; 255
    269e:	2f e7       	ldi	r18, 0x7F	; 127
    26a0:	d2 07       	cpc	r29, r18
    26a2:	21 f0       	breq	.+8      	; 0x26ac <get_interpolated_sine+0x11e>
    26a4:	ce 01       	movw	r24, r28
    26a6:	8f 5f       	subi	r24, 0xFF	; 255
    26a8:	9f 47       	sbci	r25, 0x7F	; 127
    26aa:	05 c0       	rjmp	.+10     	; 0x26b6 <get_interpolated_sine+0x128>
    26ac:	ce 01       	movw	r24, r28
    26ae:	90 58       	subi	r25, 0x80	; 128
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <get_interpolated_sine+0x128>
	} else {

		return 0x8000U + (uint16_t)val;
    26b2:	ce 01       	movw	r24, r28
    26b4:	90 58       	subi	r25, 0x80	; 128
	}
}
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	08 95       	ret

000026c0 <__portable_avr_delay_cycles>:
	start_twi_lcd();
}

/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void start_twi_onboard()
{
    26c0:	04 c0       	rjmp	.+8      	; 0x26ca <__portable_avr_delay_cycles+0xa>
    26c2:	61 50       	subi	r22, 0x01	; 1
    26c4:	71 09       	sbc	r23, r1
    26c6:	81 09       	sbc	r24, r1
    26c8:	91 09       	sbc	r25, r1
    26ca:	61 15       	cp	r22, r1
    26cc:	71 05       	cpc	r23, r1
    26ce:	81 05       	cpc	r24, r1
    26d0:	91 05       	cpc	r25, r1
    26d2:	b9 f7       	brne	.-18     	; 0x26c2 <__portable_avr_delay_cycles+0x2>
    26d4:	08 95       	ret

000026d6 <twi_waitUntilReady>:
    26d6:	cf 92       	push	r12
    26d8:	df 92       	push	r13
    26da:	ef 92       	push	r14
    26dc:	ff 92       	push	r15
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	cf 93       	push	r28
    26e4:	ee e0       	ldi	r30, 0x0E	; 14
    26e6:	f0 e2       	ldi	r31, 0x20	; 32
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	81 83       	std	Z+1, r24	; 0x01
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	84 83       	std	Z+4, r24	; 0x04
    26f2:	95 83       	std	Z+5, r25	; 0x05
    26f4:	8f 01       	movw	r16, r30
    26f6:	cc 24       	eor	r12, r12
    26f8:	c3 94       	inc	r12
    26fa:	d1 2c       	mov	r13, r1
    26fc:	0f 2e       	mov	r0, r31
    26fe:	fa ed       	ldi	r31, 0xDA	; 218
    2700:	ef 2e       	mov	r14, r31
    2702:	f3 e2       	ldi	r31, 0x23	; 35
    2704:	ff 2e       	mov	r15, r31
    2706:	f0 2d       	mov	r31, r0
    2708:	f8 01       	movw	r30, r16
    270a:	c0 86       	std	Z+8, r12	; 0x08
    270c:	d1 86       	std	Z+9, r13	; 0x09
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	b8 01       	movw	r22, r16
    2712:	80 e8       	ldi	r24, 0x80	; 128
    2714:	94 e0       	ldi	r25, 0x04	; 4
    2716:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
    271a:	f7 01       	movw	r30, r14
    271c:	c0 81       	ld	r28, Z
    271e:	9c 2f       	mov	r25, r28
    2720:	90 78       	andi	r25, 0x80	; 128
    2722:	81 11       	cpse	r24, r1
    2724:	0d c0       	rjmp	.+26     	; 0x2740 <twi_waitUntilReady+0x6a>
    2726:	91 f0       	breq	.+36     	; 0x274c <twi_waitUntilReady+0x76>
    2728:	8c 2f       	mov	r24, r28
    272a:	81 78       	andi	r24, 0x81	; 129
    272c:	81 38       	cpi	r24, 0x81	; 129
    272e:	29 f4       	brne	.+10     	; 0x273a <twi_waitUntilReady+0x64>
    2730:	65 ef       	ldi	r22, 0xF5	; 245
    2732:	71 e0       	ldi	r23, 0x01	; 1
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	c3 df       	rcall	.-122    	; 0x26c0 <__portable_avr_delay_cycles>
    273a:	c0 fd       	sbrc	r28, 0
    273c:	e5 cf       	rjmp	.-54     	; 0x2708 <twi_waitUntilReady+0x32>
    273e:	0c c0       	rjmp	.+24     	; 0x2758 <twi_waitUntilReady+0x82>
    2740:	65 e0       	ldi	r22, 0x05	; 5
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	bb df       	rcall	.-138    	; 0x26c0 <__portable_avr_delay_cycles>
    274a:	de cf       	rjmp	.-68     	; 0x2708 <twi_waitUntilReady+0x32>
    274c:	65 e0       	ldi	r22, 0x05	; 5
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	b5 df       	rcall	.-150    	; 0x26c0 <__portable_avr_delay_cycles>
    2756:	d8 cf       	rjmp	.-80     	; 0x2708 <twi_waitUntilReady+0x32>
    2758:	cf 91       	pop	r28
    275a:	1f 91       	pop	r17
    275c:	0f 91       	pop	r16
    275e:	ff 90       	pop	r15
    2760:	ef 90       	pop	r14
    2762:	df 90       	pop	r13
    2764:	cf 90       	pop	r12
    2766:	08 95       	ret

00002768 <twi_init>:
    2768:	e0 e8       	ldi	r30, 0x80	; 128
    276a:	f6 e0       	ldi	r31, 0x06	; 6
    276c:	88 e3       	ldi	r24, 0x38	; 56
    276e:	80 8b       	std	Z+16, r24	; 0x10
    2770:	81 8b       	std	Z+17, r24	; 0x11
    2772:	e0 e4       	ldi	r30, 0x40	; 64
    2774:	f6 e0       	ldi	r31, 0x06	; 6
    2776:	80 8b       	std	Z+16, r24	; 0x10
    2778:	81 8b       	std	Z+17, r24	; 0x11
    277a:	08 95       	ret

0000277c <start_twi_lcd>:

}

/* TWI2 - LCD Port */
void start_twi_lcd()
{
    277c:	ef 92       	push	r14
    277e:	ff 92       	push	r15
    2780:	0f 93       	push	r16
    2782:	1f 93       	push	r17
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
    2788:	ee e0       	ldi	r30, 0x0E	; 14
    278a:	f0 e2       	ldi	r31, 0x20	; 32
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	84 83       	std	Z+4, r24	; 0x04
    2796:	95 83       	std	Z+5, r25	; 0x05
	twi2_packet.length = 1;
    2798:	80 87       	std	Z+8, r24	; 0x08
    279a:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    279c:	41 e0       	ldi	r20, 0x01	; 1
    279e:	bf 01       	movw	r22, r30
    27a0:	80 e8       	ldi	r24, 0x80	; 128
    27a2:	94 e0       	ldi	r25, 0x04	; 4
    27a4:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
    27a8:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <twi2_m_data>
    27ac:	80 93 41 24 	sts	0x2441, r24	; 0x802441 <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
    27b0:	81 31       	cpi	r24, 0x11	; 17
    27b2:	78 f1       	brcs	.+94     	; 0x2812 <start_twi_lcd+0x96>
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
    27b4:	ce e0       	ldi	r28, 0x0E	; 14
    27b6:	d0 e2       	ldi	r29, 0x20	; 32
    27b8:	82 e0       	ldi	r24, 0x02	; 2
    27ba:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = 0x10;
    27bc:	0f 2e       	mov	r0, r31
    27be:	fa ed       	ldi	r31, 0xDA	; 218
    27c0:	ef 2e       	mov	r14, r31
    27c2:	f3 e2       	ldi	r31, 0x23	; 35
    27c4:	ff 2e       	mov	r15, r31
    27c6:	f0 2d       	mov	r31, r0
    27c8:	80 e1       	ldi	r24, 0x10	; 16
    27ca:	f7 01       	movw	r30, r14
    27cc:	80 83       	st	Z, r24
		twi2_packet.length = 1;
    27ce:	01 e0       	ldi	r16, 0x01	; 1
    27d0:	10 e0       	ldi	r17, 0x00	; 0
    27d2:	08 87       	std	Y+8, r16	; 0x08
    27d4:	19 87       	std	Y+9, r17	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	be 01       	movw	r22, r28
    27da:	80 e8       	ldi	r24, 0x80	; 128
    27dc:	94 e0       	ldi	r25, 0x04	; 4
    27de:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    27e2:	65 e0       	ldi	r22, 0x05	; 5
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	90 e0       	ldi	r25, 0x00	; 0

		twi_waitUntilReady();
    27ea:	6a df       	rcall	.-300    	; 0x26c0 <__portable_avr_delay_cycles>
    27ec:	74 df       	rcall	.-280    	; 0x26d6 <twi_waitUntilReady>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
    27ee:	84 e1       	ldi	r24, 0x14	; 20
    27f0:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[0] = GFX_PIXEL_SET;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	f7 01       	movw	r30, r14
    27f6:	80 83       	st	Z, r24
		twi2_packet.length = 1;
    27f8:	08 87       	std	Y+8, r16	; 0x08
    27fa:	19 87       	std	Y+9, r17	; 0x09
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	be 01       	movw	r22, r28
    2800:	80 e8       	ldi	r24, 0x80	; 128
    2802:	94 e0       	ldi	r25, 0x04	; 4
    2804:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2808:	65 e0       	ldi	r22, 0x05	; 5
    280a:	70 e0       	ldi	r23, 0x00	; 0
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	57 df       	rcall	.-338    	; 0x26c0 <__portable_avr_delay_cycles>
	}
}
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	0f 91       	pop	r16
    281a:	ff 90       	pop	r15
    281c:	ef 90       	pop	r14
    281e:	08 95       	ret

00002820 <twi_start>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2820:	60 e4       	ldi	r22, 0x40	; 64
    2822:	85 e0       	ldi	r24, 0x05	; 5
    2824:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
#else
#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
    2828:	62 e2       	ldi	r22, 0x22	; 34
    282a:	70 e2       	ldi	r23, 0x20	; 32
    282c:	80 ea       	ldi	r24, 0xA0	; 160
    282e:	94 e0       	ldi	r25, 0x04	; 4
    2830:	0e 94 3b 21 	call	0x4276	; 0x4276 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    2834:	e0 ea       	ldi	r30, 0xA0	; 160
    2836:	f4 e0       	ldi	r31, 0x04	; 4
    2838:	81 81       	ldd	r24, Z+1	; 0x01
    283a:	88 60       	ori	r24, 0x08	; 8
    283c:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    283e:	60 e4       	ldi	r22, 0x40	; 64
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
#else
#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
    2846:	69 e1       	ldi	r22, 0x19	; 25
    2848:	70 e2       	ldi	r23, 0x20	; 32
    284a:	80 e8       	ldi	r24, 0x80	; 128
    284c:	94 e0       	ldi	r25, 0x04	; 4
    284e:	0e 94 3b 21 	call	0x4276	; 0x4276 <twi_master_init>
    2852:	e0 e8       	ldi	r30, 0x80	; 128
    2854:	f4 e0       	ldi	r31, 0x04	; 4
    2856:	81 81       	ldd	r24, Z+1	; 0x01
    2858:	88 60       	ori	r24, 0x08	; 8
    285a:	81 83       	std	Z+1, r24	; 0x01
#endif

	/* Start each TWI channel devices */
	start_twi_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
    285c:	61 ed       	ldi	r22, 0xD1	; 209
    285e:	72 e1       	ldi	r23, 0x12	; 18
    2860:	83 e1       	ldi	r24, 0x13	; 19
    2862:	90 e0       	ldi	r25, 0x00	; 0
	start_twi_lcd();
    2864:	2d df       	rcall	.-422    	; 0x26c0 <__portable_avr_delay_cycles>
    2866:	8a cf       	rjmp	.-236    	; 0x277c <start_twi_lcd>
    2868:	08 95       	ret

0000286a <task_twi_onboard>:
}


/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
void task_twi_onboard(uint32_t now)
{
    286a:	08 95       	ret

0000286c <task_twi_lcd>:

}

/* TWI2 - LCD Port */
void task_twi_lcd(uint32_t now)
{
    286c:	df 92       	push	r13
    286e:	ef 92       	push	r14
    2870:	ff 92       	push	r15
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
	if (g_twi2_lcd_version >= 0x11) {
    287a:	80 91 41 24 	lds	r24, 0x2441	; 0x802441 <g_twi2_lcd_version>
    287e:	81 31       	cpi	r24, 0x11	; 17
    2880:	08 f4       	brcc	.+2      	; 0x2884 <task_twi_lcd+0x18>
		static uint8_t ofs = 0;

		twi_waitUntilReady();
    2882:	b2 c0       	rjmp	.+356    	; 0x29e8 <task_twi_lcd+0x17c>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2884:	28 df       	rcall	.-432    	; 0x26d6 <twi_waitUntilReady>
    2886:	0e e0       	ldi	r16, 0x0E	; 14
    2888:	10 e2       	ldi	r17, 0x20	; 32
    288a:	68 94       	set
    288c:	dd 24       	eor	r13, r13
    288e:	d5 f8       	bld	r13, 5
    2890:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 16 + ofs;
    2892:	d1 82       	std	Z+1, r13	; 0x01
    2894:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <__data_end>
    2898:	80 5f       	subi	r24, 0xF0	; 240
    289a:	ca ed       	ldi	r28, 0xDA	; 218
    289c:	d3 e2       	ldi	r29, 0x23	; 35
		twi2_m_data[1] = 16 + ofs;
    289e:	88 83       	st	Y, r24
		twi2_packet.length = 2;
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	68 94       	set
    28a4:	ee 24       	eor	r14, r14
    28a6:	e1 f8       	bld	r14, 1
    28a8:	f1 2c       	mov	r15, r1
    28aa:	e0 86       	std	Z+8, r14	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    28ac:	f1 86       	std	Z+9, r15	; 0x09
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	b8 01       	movw	r22, r16
    28b2:	80 e8       	ldi	r24, 0x80	; 128
    28b4:	94 e0       	ldi	r25, 0x04	; 4
    28b6:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    28ba:	65 e0       	ldi	r22, 0x05	; 5
    28bc:	70 e0       	ldi	r23, 0x00	; 0
    28be:	80 e0       	ldi	r24, 0x00	; 0

#if 1
		twi_waitUntilReady();
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	fe de       	rcall	.-516    	; 0x26c0 <__portable_avr_delay_cycles>
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
    28c4:	08 df       	rcall	.-496    	; 0x26d6 <twi_waitUntilReady>
    28c6:	82 e3       	ldi	r24, 0x32	; 50
    28c8:	f8 01       	movw	r30, r16
		twi2_m_data[0] = 150 + ofs;
    28ca:	81 83       	std	Z+1, r24	; 0x01
    28cc:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <__data_end>
    28d0:	96 e9       	ldi	r25, 0x96	; 150
    28d2:	98 0f       	add	r25, r24
		twi2_m_data[1] =  60 + ofs;
    28d4:	98 83       	st	Y, r25
    28d6:	84 5c       	subi	r24, 0xC4	; 196
		twi2_packet.length = 2;
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	e0 86       	std	Z+8, r14	; 0x08
    28dc:	f1 86       	std	Z+9, r15	; 0x09
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	b8 01       	movw	r22, r16
    28e2:	80 e8       	ldi	r24, 0x80	; 128
    28e4:	94 e0       	ldi	r25, 0x04	; 4
    28e6:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    28ea:	65 e0       	ldi	r22, 0x05	; 5
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	80 e0       	ldi	r24, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	e6 de       	rcall	.-564    	; 0x26c0 <__portable_avr_delay_cycles>
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_RECT;
    28f4:	f0 de       	rcall	.-544    	; 0x26d6 <twi_waitUntilReady>
    28f6:	84 e3       	ldi	r24, 0x34	; 52
    28f8:	f8 01       	movw	r30, r16
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_RECT;
# endif
		twi2_m_data[0] = 30;
    28fa:	81 83       	std	Z+1, r24	; 0x01
    28fc:	8e e1       	ldi	r24, 0x1E	; 30
		twi2_m_data[1] =  30;
    28fe:	88 83       	st	Y, r24
		twi2_packet.length = 2;
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	e0 86       	std	Z+8, r14	; 0x08
    2904:	f1 86       	std	Z+9, r15	; 0x09
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	b8 01       	movw	r22, r16
    290a:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    290c:	94 e0       	ldi	r25, 0x04	; 4
    290e:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
    2912:	65 e0       	ldi	r22, 0x05	; 5
    2914:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
# if 1
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_CIRC;
    291a:	d2 de       	rcall	.-604    	; 0x26c0 <__portable_avr_delay_cycles>
    291c:	dc de       	rcall	.-584    	; 0x26d6 <twi_waitUntilReady>
    291e:	88 e3       	ldi	r24, 0x38	; 56
# else
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC;
# endif
		twi2_m_data[0] = 20;
    2920:	f8 01       	movw	r30, r16
    2922:	81 83       	std	Z+1, r24	; 0x01
		twi2_packet.length = 1;
    2924:	84 e1       	ldi	r24, 0x14	; 20
    2926:	88 83       	st	Y, r24
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	80 87       	std	Z+8, r24	; 0x08
    292e:	91 87       	std	Z+9, r25	; 0x09
    2930:	40 e0       	ldi	r20, 0x00	; 0
    2932:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2934:	80 e8       	ldi	r24, 0x80	; 128
    2936:	94 e0       	ldi	r25, 0x04	; 4
    2938:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
    293c:	65 e0       	ldi	r22, 0x05	; 5
    293e:	70 e0       	ldi	r23, 0x00	; 0
#endif

#if 1
		twi_waitUntilReady();
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2944:	bd de       	rcall	.-646    	; 0x26c0 <__portable_avr_delay_cycles>
    2946:	c7 de       	rcall	.-626    	; 0x26d6 <twi_waitUntilReady>
		twi2_m_data[0] = 116 + ofs;
    2948:	f8 01       	movw	r30, r16
    294a:	d1 82       	std	Z+1, r13	; 0x01
    294c:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <__data_end>
    2950:	94 e7       	ldi	r25, 0x74	; 116
		twi2_m_data[1] =  16 + ofs;
    2952:	98 0f       	add	r25, r24
    2954:	98 83       	st	Y, r25
		twi2_packet.length = 2;
    2956:	80 5f       	subi	r24, 0xF0	; 240
    2958:	89 83       	std	Y+1, r24	; 0x01
    295a:	e0 86       	std	Z+8, r14	; 0x08
    295c:	f1 86       	std	Z+9, r15	; 0x09
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	b8 01       	movw	r22, r16
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2962:	80 e8       	ldi	r24, 0x80	; 128
    2964:	94 e0       	ldi	r25, 0x04	; 4
    2966:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
    296a:	65 e0       	ldi	r22, 0x05	; 5
    296c:	70 e0       	ldi	r23, 0x00	; 0

		twi_waitUntilReady();
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    2972:	a6 de       	rcall	.-692    	; 0x26c0 <__portable_avr_delay_cycles>
    2974:	b0 de       	rcall	.-672    	; 0x26d6 <twi_waitUntilReady>
    2976:	80 e3       	ldi	r24, 0x30	; 48
		twi2_m_data[0] = 4;
    2978:	f8 01       	movw	r30, r16
    297a:	81 83       	std	Z+1, r24	; 0x01
		twi2_m_data[1] = 'A';
    297c:	84 e0       	ldi	r24, 0x04	; 4
    297e:	88 83       	st	Y, r24
		twi2_m_data[2] = 'B';
    2980:	81 e4       	ldi	r24, 0x41	; 65
    2982:	89 83       	std	Y+1, r24	; 0x01
		twi2_m_data[3] = 'C';
    2984:	82 e4       	ldi	r24, 0x42	; 66
    2986:	8a 83       	std	Y+2, r24	; 0x02
		twi2_m_data[4] = 'D';
    2988:	83 e4       	ldi	r24, 0x43	; 67
    298a:	8b 83       	std	Y+3, r24	; 0x03
		twi2_packet.length = twi2_m_data[0] + 1;
    298c:	84 e4       	ldi	r24, 0x44	; 68
    298e:	8c 83       	std	Y+4, r24	; 0x04
    2990:	85 e0       	ldi	r24, 0x05	; 5
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	80 87       	std	Z+8, r24	; 0x08
    2996:	91 87       	std	Z+9, r25	; 0x09
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	b8 01       	movw	r22, r16
    299c:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    299e:	94 e0       	ldi	r25, 0x04	; 4
    29a0:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
    29a4:	65 e0       	ldi	r22, 0x05	; 5
    29a6:	70 e0       	ldi	r23, 0x00	; 0
#endif

		if (++ofs > 64) {
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	89 de       	rcall	.-750    	; 0x26c0 <__portable_avr_delay_cycles>
    29ae:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <__data_end>
    29b2:	8f 5f       	subi	r24, 0xFF	; 255
    29b4:	81 34       	cpi	r24, 0x41	; 65
    29b6:	18 f4       	brcc	.+6      	; 0x29be <task_twi_lcd+0x152>
			ofs = 0;
    29b8:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <__data_end>

			twi_waitUntilReady();
    29bc:	32 c0       	rjmp	.+100    	; 0x2a22 <task_twi_lcd+0x1b6>
    29be:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <__data_end>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
    29c2:	89 de       	rcall	.-750    	; 0x26d6 <twi_waitUntilReady>
    29c4:	ee e0       	ldi	r30, 0x0E	; 14
			twi2_packet.length = 0;
    29c6:	f0 e2       	ldi	r31, 0x20	; 32
    29c8:	80 e1       	ldi	r24, 0x10	; 16
    29ca:	81 83       	std	Z+1, r24	; 0x01
    29cc:	10 86       	std	Z+8, r1	; 0x08
    29ce:	11 86       	std	Z+9, r1	; 0x09
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	bf 01       	movw	r22, r30
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    29d4:	80 e8       	ldi	r24, 0x80	; 128
    29d6:	94 e0       	ldi	r25, 0x04	; 4
    29d8:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
    29dc:	65 e0       	ldi	r22, 0x05	; 5
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	80 e0       	ldi	r24, 0x00	; 0
		}

	} else if (g_twi2_lcd_version == 0x10) {
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	6d de       	rcall	.-806    	; 0x26c0 <__portable_avr_delay_cycles>
#if 1
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi_waitUntilReady();
    29e6:	1d c0       	rjmp	.+58     	; 0x2a22 <task_twi_lcd+0x1b6>
    29e8:	80 31       	cpi	r24, 0x10	; 16
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
    29ea:	d9 f4       	brne	.+54     	; 0x2a22 <task_twi_lcd+0x1b6>
    29ec:	74 de       	rcall	.-792    	; 0x26d6 <twi_waitUntilReady>
    29ee:	ee e0       	ldi	r30, 0x0E	; 14
    29f0:	f0 e2       	ldi	r31, 0x20	; 32
		twi2_m_data[0] = 1;
    29f2:	84 e8       	ldi	r24, 0x84	; 132
    29f4:	81 83       	std	Z+1, r24	; 0x01
    29f6:	aa ed       	ldi	r26, 0xDA	; 218
    29f8:	b3 e2       	ldi	r27, 0x23	; 35
		twi2_m_data[1] = 128;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	8c 93       	st	X, r24
		twi2_packet.length = 2;
    29fe:	80 e8       	ldi	r24, 0x80	; 128
    2a00:	11 96       	adiw	r26, 0x01	; 1
    2a02:	8c 93       	st	X, r24
    2a04:	82 e0       	ldi	r24, 0x02	; 2
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	80 87       	std	Z+8, r24	; 0x08
    2a0a:	91 87       	std	Z+9, r25	; 0x09
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	bf 01       	movw	r22, r30
    2a10:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
    2a12:	94 e0       	ldi	r25, 0x04	; 4
    2a14:	0e 94 50 21 	call	0x42a0	; 0x42a0 <twi_master_transfer>
    2a18:	69 e8       	ldi	r22, 0x89	; 137
    2a1a:	73 e1       	ldi	r23, 0x13	; 19
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
#endif
	}
}
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	4f de       	rcall	.-866    	; 0x26c0 <__portable_avr_delay_cycles>
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	1f 91       	pop	r17
    2a28:	0f 91       	pop	r16
    2a2a:	ff 90       	pop	r15
    2a2c:	ef 90       	pop	r14
    2a2e:	df 90       	pop	r13
    2a30:	08 95       	ret

00002a32 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    2a32:	08 95       	ret

00002a34 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	1f 92       	push	r1
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2a3e:	2f b7       	in	r18, 0x3f	; 63
    2a40:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2a42:	f8 94       	cli
	return flags;
    2a44:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2a46:	28 2f       	mov	r18, r24
    2a48:	39 2f       	mov	r19, r25
    2a4a:	21 15       	cp	r18, r1
    2a4c:	82 e0       	ldi	r24, 0x02	; 2
    2a4e:	38 07       	cpc	r19, r24
    2a50:	29 f4       	brne	.+10     	; 0x2a5c <adc_set_callback+0x28>
		adca_callback = callback;
    2a52:	60 93 89 25 	sts	0x2589, r22	; 0x802589 <adca_callback>
    2a56:	70 93 8a 25 	sts	0x258A, r23	; 0x80258a <adca_callback+0x1>
    2a5a:	07 c0       	rjmp	.+14     	; 0x2a6a <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    2a5c:	20 34       	cpi	r18, 0x40	; 64
    2a5e:	32 40       	sbci	r19, 0x02	; 2
    2a60:	21 f4       	brne	.+8      	; 0x2a6a <adc_set_callback+0x36>
		adcb_callback = callback;
    2a62:	60 93 87 25 	sts	0x2587, r22	; 0x802587 <adcb_callback>
    2a66:	70 93 88 25 	sts	0x2588, r23	; 0x802588 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a6a:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    2a6c:	0f 90       	pop	r0
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	08 95       	ret

00002a74 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2a74:	81 15       	cp	r24, r1
    2a76:	22 e0       	ldi	r18, 0x02	; 2
    2a78:	92 07       	cpc	r25, r18
    2a7a:	69 f4       	brne	.+26     	; 0x2a96 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    2a7c:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <adca_enable_count>
    2a80:	91 e0       	ldi	r25, 0x01	; 1
    2a82:	98 0f       	add	r25, r24
    2a84:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <adca_enable_count>
    2a88:	81 11       	cpse	r24, r1
    2a8a:	14 c0       	rjmp	.+40     	; 0x2ab4 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2a8c:	62 e0       	ldi	r22, 0x02	; 2
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	0c 94 d7 30 	jmp	0x61ae	; 0x61ae <sysclk_enable_module>
    2a94:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2a96:	80 34       	cpi	r24, 0x40	; 64
    2a98:	92 40       	sbci	r25, 0x02	; 2
    2a9a:	61 f4       	brne	.+24     	; 0x2ab4 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    2a9c:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <adcb_enable_count>
    2aa0:	91 e0       	ldi	r25, 0x01	; 1
    2aa2:	98 0f       	add	r25, r24
    2aa4:	90 93 51 21 	sts	0x2151, r25	; 0x802151 <adcb_enable_count>
    2aa8:	81 11       	cpse	r24, r1
    2aaa:	04 c0       	rjmp	.+8      	; 0x2ab4 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2aac:	62 e0       	ldi	r22, 0x02	; 2
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	0c 94 d7 30 	jmp	0x61ae	; 0x61ae <sysclk_enable_module>
    2ab4:	08 95       	ret

00002ab6 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2ab6:	81 15       	cp	r24, r1
    2ab8:	22 e0       	ldi	r18, 0x02	; 2
    2aba:	92 07       	cpc	r25, r18
    2abc:	61 f4       	brne	.+24     	; 0x2ad6 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    2abe:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <adca_enable_count>
    2ac2:	81 50       	subi	r24, 0x01	; 1
    2ac4:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <adca_enable_count>
    2ac8:	81 11       	cpse	r24, r1
    2aca:	13 c0       	rjmp	.+38     	; 0x2af2 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2acc:	62 e0       	ldi	r22, 0x02	; 2
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	0c 94 ed 30 	jmp	0x61da	; 0x61da <sysclk_disable_module>
    2ad4:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2ad6:	80 34       	cpi	r24, 0x40	; 64
    2ad8:	92 40       	sbci	r25, 0x02	; 2
    2ada:	59 f4       	brne	.+22     	; 0x2af2 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    2adc:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <adcb_enable_count>
    2ae0:	81 50       	subi	r24, 0x01	; 1
    2ae2:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <adcb_enable_count>
    2ae6:	81 11       	cpse	r24, r1
    2ae8:	04 c0       	rjmp	.+8      	; 0x2af2 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2aea:	62 e0       	ldi	r22, 0x02	; 2
    2aec:	82 e0       	ldi	r24, 0x02	; 2
    2aee:	0c 94 ed 30 	jmp	0x61da	; 0x61da <sysclk_disable_module>
    2af2:	08 95       	ret

00002af4 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	1f 93       	push	r17
    2afa:	cf 93       	push	r28
    2afc:	df 93       	push	r29
    2afe:	1f 92       	push	r1
    2b00:	1f 92       	push	r1
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2b08:	8f b7       	in	r24, 0x3f	; 63
    2b0a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2b0c:	f8 94       	cli
	return flags;
    2b0e:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    2b10:	c7 01       	movw	r24, r14
    2b12:	b0 df       	rcall	.-160    	; 0x2a74 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    2b14:	f7 01       	movw	r30, r14
    2b16:	80 81       	ld	r24, Z
    2b18:	81 60       	ori	r24, 0x01	; 1
    2b1a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b1c:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2b1e:	80 91 9c 25 	lds	r24, 0x259C	; 0x80259c <sleepmgr_locks+0x1>
    2b22:	8f 3f       	cpi	r24, 0xFF	; 255
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <adc_enable+0x34>
    2b26:	ff cf       	rjmp	.-2      	; 0x2b26 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2b28:	8f b7       	in	r24, 0x3f	; 63
    2b2a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2b2c:	f8 94       	cli
	return flags;
    2b2e:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2b30:	eb e9       	ldi	r30, 0x9B	; 155
    2b32:	f5 e2       	ldi	r31, 0x25	; 37
    2b34:	81 81       	ldd	r24, Z+1	; 0x01
    2b36:	8f 5f       	subi	r24, 0xFF	; 255
    2b38:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b3a:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	1f 91       	pop	r17
    2b46:	ff 90       	pop	r15
    2b48:	ef 90       	pop	r14
    2b4a:	08 95       	ret

00002b4c <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2b4c:	1f 92       	push	r1
    2b4e:	0f 92       	push	r0
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	0f 92       	push	r0
    2b54:	11 24       	eor	r1, r1
    2b56:	0b b6       	in	r0, 0x3b	; 59
    2b58:	0f 92       	push	r0
    2b5a:	2f 93       	push	r18
    2b5c:	3f 93       	push	r19
    2b5e:	4f 93       	push	r20
    2b60:	5f 93       	push	r21
    2b62:	6f 93       	push	r22
    2b64:	7f 93       	push	r23
    2b66:	8f 93       	push	r24
    2b68:	9f 93       	push	r25
    2b6a:	af 93       	push	r26
    2b6c:	bf 93       	push	r27
    2b6e:	ef 93       	push	r30
    2b70:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2b72:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    2b76:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    2b7a:	e0 91 89 25 	lds	r30, 0x2589	; 0x802589 <adca_callback>
    2b7e:	f0 91 8a 25 	lds	r31, 0x258A	; 0x80258a <adca_callback+0x1>
    2b82:	61 e0       	ldi	r22, 0x01	; 1
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	92 e0       	ldi	r25, 0x02	; 2
    2b88:	19 95       	eicall
}
    2b8a:	ff 91       	pop	r31
    2b8c:	ef 91       	pop	r30
    2b8e:	bf 91       	pop	r27
    2b90:	af 91       	pop	r26
    2b92:	9f 91       	pop	r25
    2b94:	8f 91       	pop	r24
    2b96:	7f 91       	pop	r23
    2b98:	6f 91       	pop	r22
    2b9a:	5f 91       	pop	r21
    2b9c:	4f 91       	pop	r20
    2b9e:	3f 91       	pop	r19
    2ba0:	2f 91       	pop	r18
    2ba2:	0f 90       	pop	r0
    2ba4:	0b be       	out	0x3b, r0	; 59
    2ba6:	0f 90       	pop	r0
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	0f 90       	pop	r0
    2bac:	1f 90       	pop	r1
    2bae:	18 95       	reti

00002bb0 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    2bb0:	1f 92       	push	r1
    2bb2:	0f 92       	push	r0
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	0f 92       	push	r0
    2bb8:	11 24       	eor	r1, r1
    2bba:	0b b6       	in	r0, 0x3b	; 59
    2bbc:	0f 92       	push	r0
    2bbe:	2f 93       	push	r18
    2bc0:	3f 93       	push	r19
    2bc2:	4f 93       	push	r20
    2bc4:	5f 93       	push	r21
    2bc6:	6f 93       	push	r22
    2bc8:	7f 93       	push	r23
    2bca:	8f 93       	push	r24
    2bcc:	9f 93       	push	r25
    2bce:	af 93       	push	r26
    2bd0:	bf 93       	push	r27
    2bd2:	ef 93       	push	r30
    2bd4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    2bd6:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    2bda:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    2bde:	e0 91 89 25 	lds	r30, 0x2589	; 0x802589 <adca_callback>
    2be2:	f0 91 8a 25 	lds	r31, 0x258A	; 0x80258a <adca_callback+0x1>
    2be6:	62 e0       	ldi	r22, 0x02	; 2
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	92 e0       	ldi	r25, 0x02	; 2
    2bec:	19 95       	eicall
}
    2bee:	ff 91       	pop	r31
    2bf0:	ef 91       	pop	r30
    2bf2:	bf 91       	pop	r27
    2bf4:	af 91       	pop	r26
    2bf6:	9f 91       	pop	r25
    2bf8:	8f 91       	pop	r24
    2bfa:	7f 91       	pop	r23
    2bfc:	6f 91       	pop	r22
    2bfe:	5f 91       	pop	r21
    2c00:	4f 91       	pop	r20
    2c02:	3f 91       	pop	r19
    2c04:	2f 91       	pop	r18
    2c06:	0f 90       	pop	r0
    2c08:	0b be       	out	0x3b, r0	; 59
    2c0a:	0f 90       	pop	r0
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	0f 90       	pop	r0
    2c10:	1f 90       	pop	r1
    2c12:	18 95       	reti

00002c14 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    2c14:	1f 92       	push	r1
    2c16:	0f 92       	push	r0
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	0f 92       	push	r0
    2c1c:	11 24       	eor	r1, r1
    2c1e:	0b b6       	in	r0, 0x3b	; 59
    2c20:	0f 92       	push	r0
    2c22:	2f 93       	push	r18
    2c24:	3f 93       	push	r19
    2c26:	4f 93       	push	r20
    2c28:	5f 93       	push	r21
    2c2a:	6f 93       	push	r22
    2c2c:	7f 93       	push	r23
    2c2e:	8f 93       	push	r24
    2c30:	9f 93       	push	r25
    2c32:	af 93       	push	r26
    2c34:	bf 93       	push	r27
    2c36:	ef 93       	push	r30
    2c38:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    2c3a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    2c3e:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    2c42:	e0 91 89 25 	lds	r30, 0x2589	; 0x802589 <adca_callback>
    2c46:	f0 91 8a 25 	lds	r31, 0x258A	; 0x80258a <adca_callback+0x1>
    2c4a:	64 e0       	ldi	r22, 0x04	; 4
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	92 e0       	ldi	r25, 0x02	; 2
    2c50:	19 95       	eicall
}
    2c52:	ff 91       	pop	r31
    2c54:	ef 91       	pop	r30
    2c56:	bf 91       	pop	r27
    2c58:	af 91       	pop	r26
    2c5a:	9f 91       	pop	r25
    2c5c:	8f 91       	pop	r24
    2c5e:	7f 91       	pop	r23
    2c60:	6f 91       	pop	r22
    2c62:	5f 91       	pop	r21
    2c64:	4f 91       	pop	r20
    2c66:	3f 91       	pop	r19
    2c68:	2f 91       	pop	r18
    2c6a:	0f 90       	pop	r0
    2c6c:	0b be       	out	0x3b, r0	; 59
    2c6e:	0f 90       	pop	r0
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	0f 90       	pop	r0
    2c74:	1f 90       	pop	r1
    2c76:	18 95       	reti

00002c78 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    2c78:	1f 92       	push	r1
    2c7a:	0f 92       	push	r0
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	0f 92       	push	r0
    2c80:	11 24       	eor	r1, r1
    2c82:	0b b6       	in	r0, 0x3b	; 59
    2c84:	0f 92       	push	r0
    2c86:	2f 93       	push	r18
    2c88:	3f 93       	push	r19
    2c8a:	4f 93       	push	r20
    2c8c:	5f 93       	push	r21
    2c8e:	6f 93       	push	r22
    2c90:	7f 93       	push	r23
    2c92:	8f 93       	push	r24
    2c94:	9f 93       	push	r25
    2c96:	af 93       	push	r26
    2c98:	bf 93       	push	r27
    2c9a:	ef 93       	push	r30
    2c9c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    2c9e:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    2ca2:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    2ca6:	e0 91 89 25 	lds	r30, 0x2589	; 0x802589 <adca_callback>
    2caa:	f0 91 8a 25 	lds	r31, 0x258A	; 0x80258a <adca_callback+0x1>
    2cae:	68 e0       	ldi	r22, 0x08	; 8
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	92 e0       	ldi	r25, 0x02	; 2
    2cb4:	19 95       	eicall
}
    2cb6:	ff 91       	pop	r31
    2cb8:	ef 91       	pop	r30
    2cba:	bf 91       	pop	r27
    2cbc:	af 91       	pop	r26
    2cbe:	9f 91       	pop	r25
    2cc0:	8f 91       	pop	r24
    2cc2:	7f 91       	pop	r23
    2cc4:	6f 91       	pop	r22
    2cc6:	5f 91       	pop	r21
    2cc8:	4f 91       	pop	r20
    2cca:	3f 91       	pop	r19
    2ccc:	2f 91       	pop	r18
    2cce:	0f 90       	pop	r0
    2cd0:	0b be       	out	0x3b, r0	; 59
    2cd2:	0f 90       	pop	r0
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	0f 90       	pop	r0
    2cd8:	1f 90       	pop	r1
    2cda:	18 95       	reti

00002cdc <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    2cdc:	1f 92       	push	r1
    2cde:	0f 92       	push	r0
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	0f 92       	push	r0
    2ce4:	11 24       	eor	r1, r1
    2ce6:	0b b6       	in	r0, 0x3b	; 59
    2ce8:	0f 92       	push	r0
    2cea:	2f 93       	push	r18
    2cec:	3f 93       	push	r19
    2cee:	4f 93       	push	r20
    2cf0:	5f 93       	push	r21
    2cf2:	6f 93       	push	r22
    2cf4:	7f 93       	push	r23
    2cf6:	8f 93       	push	r24
    2cf8:	9f 93       	push	r25
    2cfa:	af 93       	push	r26
    2cfc:	bf 93       	push	r27
    2cfe:	ef 93       	push	r30
    2d00:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    2d02:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    2d06:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    2d0a:	e0 91 87 25 	lds	r30, 0x2587	; 0x802587 <adcb_callback>
    2d0e:	f0 91 88 25 	lds	r31, 0x2588	; 0x802588 <adcb_callback+0x1>
    2d12:	61 e0       	ldi	r22, 0x01	; 1
    2d14:	80 e4       	ldi	r24, 0x40	; 64
    2d16:	92 e0       	ldi	r25, 0x02	; 2
    2d18:	19 95       	eicall
}
    2d1a:	ff 91       	pop	r31
    2d1c:	ef 91       	pop	r30
    2d1e:	bf 91       	pop	r27
    2d20:	af 91       	pop	r26
    2d22:	9f 91       	pop	r25
    2d24:	8f 91       	pop	r24
    2d26:	7f 91       	pop	r23
    2d28:	6f 91       	pop	r22
    2d2a:	5f 91       	pop	r21
    2d2c:	4f 91       	pop	r20
    2d2e:	3f 91       	pop	r19
    2d30:	2f 91       	pop	r18
    2d32:	0f 90       	pop	r0
    2d34:	0b be       	out	0x3b, r0	; 59
    2d36:	0f 90       	pop	r0
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	0f 90       	pop	r0
    2d3c:	1f 90       	pop	r1
    2d3e:	18 95       	reti

00002d40 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    2d40:	1f 92       	push	r1
    2d42:	0f 92       	push	r0
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	0f 92       	push	r0
    2d48:	11 24       	eor	r1, r1
    2d4a:	0b b6       	in	r0, 0x3b	; 59
    2d4c:	0f 92       	push	r0
    2d4e:	2f 93       	push	r18
    2d50:	3f 93       	push	r19
    2d52:	4f 93       	push	r20
    2d54:	5f 93       	push	r21
    2d56:	6f 93       	push	r22
    2d58:	7f 93       	push	r23
    2d5a:	8f 93       	push	r24
    2d5c:	9f 93       	push	r25
    2d5e:	af 93       	push	r26
    2d60:	bf 93       	push	r27
    2d62:	ef 93       	push	r30
    2d64:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    2d66:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    2d6a:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    2d6e:	e0 91 87 25 	lds	r30, 0x2587	; 0x802587 <adcb_callback>
    2d72:	f0 91 88 25 	lds	r31, 0x2588	; 0x802588 <adcb_callback+0x1>
    2d76:	62 e0       	ldi	r22, 0x02	; 2
    2d78:	80 e4       	ldi	r24, 0x40	; 64
    2d7a:	92 e0       	ldi	r25, 0x02	; 2
    2d7c:	19 95       	eicall
}
    2d7e:	ff 91       	pop	r31
    2d80:	ef 91       	pop	r30
    2d82:	bf 91       	pop	r27
    2d84:	af 91       	pop	r26
    2d86:	9f 91       	pop	r25
    2d88:	8f 91       	pop	r24
    2d8a:	7f 91       	pop	r23
    2d8c:	6f 91       	pop	r22
    2d8e:	5f 91       	pop	r21
    2d90:	4f 91       	pop	r20
    2d92:	3f 91       	pop	r19
    2d94:	2f 91       	pop	r18
    2d96:	0f 90       	pop	r0
    2d98:	0b be       	out	0x3b, r0	; 59
    2d9a:	0f 90       	pop	r0
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	0f 90       	pop	r0
    2da0:	1f 90       	pop	r1
    2da2:	18 95       	reti

00002da4 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    2da4:	1f 92       	push	r1
    2da6:	0f 92       	push	r0
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	0f 92       	push	r0
    2dac:	11 24       	eor	r1, r1
    2dae:	0b b6       	in	r0, 0x3b	; 59
    2db0:	0f 92       	push	r0
    2db2:	2f 93       	push	r18
    2db4:	3f 93       	push	r19
    2db6:	4f 93       	push	r20
    2db8:	5f 93       	push	r21
    2dba:	6f 93       	push	r22
    2dbc:	7f 93       	push	r23
    2dbe:	8f 93       	push	r24
    2dc0:	9f 93       	push	r25
    2dc2:	af 93       	push	r26
    2dc4:	bf 93       	push	r27
    2dc6:	ef 93       	push	r30
    2dc8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    2dca:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    2dce:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    2dd2:	e0 91 87 25 	lds	r30, 0x2587	; 0x802587 <adcb_callback>
    2dd6:	f0 91 88 25 	lds	r31, 0x2588	; 0x802588 <adcb_callback+0x1>
    2dda:	64 e0       	ldi	r22, 0x04	; 4
    2ddc:	80 e4       	ldi	r24, 0x40	; 64
    2dde:	92 e0       	ldi	r25, 0x02	; 2
    2de0:	19 95       	eicall
}
    2de2:	ff 91       	pop	r31
    2de4:	ef 91       	pop	r30
    2de6:	bf 91       	pop	r27
    2de8:	af 91       	pop	r26
    2dea:	9f 91       	pop	r25
    2dec:	8f 91       	pop	r24
    2dee:	7f 91       	pop	r23
    2df0:	6f 91       	pop	r22
    2df2:	5f 91       	pop	r21
    2df4:	4f 91       	pop	r20
    2df6:	3f 91       	pop	r19
    2df8:	2f 91       	pop	r18
    2dfa:	0f 90       	pop	r0
    2dfc:	0b be       	out	0x3b, r0	; 59
    2dfe:	0f 90       	pop	r0
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	0f 90       	pop	r0
    2e04:	1f 90       	pop	r1
    2e06:	18 95       	reti

00002e08 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    2e08:	1f 92       	push	r1
    2e0a:	0f 92       	push	r0
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	0f 92       	push	r0
    2e10:	11 24       	eor	r1, r1
    2e12:	0b b6       	in	r0, 0x3b	; 59
    2e14:	0f 92       	push	r0
    2e16:	2f 93       	push	r18
    2e18:	3f 93       	push	r19
    2e1a:	4f 93       	push	r20
    2e1c:	5f 93       	push	r21
    2e1e:	6f 93       	push	r22
    2e20:	7f 93       	push	r23
    2e22:	8f 93       	push	r24
    2e24:	9f 93       	push	r25
    2e26:	af 93       	push	r26
    2e28:	bf 93       	push	r27
    2e2a:	ef 93       	push	r30
    2e2c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    2e2e:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    2e32:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    2e36:	e0 91 87 25 	lds	r30, 0x2587	; 0x802587 <adcb_callback>
    2e3a:	f0 91 88 25 	lds	r31, 0x2588	; 0x802588 <adcb_callback+0x1>
    2e3e:	68 e0       	ldi	r22, 0x08	; 8
    2e40:	80 e4       	ldi	r24, 0x40	; 64
    2e42:	92 e0       	ldi	r25, 0x02	; 2
    2e44:	19 95       	eicall
}
    2e46:	ff 91       	pop	r31
    2e48:	ef 91       	pop	r30
    2e4a:	bf 91       	pop	r27
    2e4c:	af 91       	pop	r26
    2e4e:	9f 91       	pop	r25
    2e50:	8f 91       	pop	r24
    2e52:	7f 91       	pop	r23
    2e54:	6f 91       	pop	r22
    2e56:	5f 91       	pop	r21
    2e58:	4f 91       	pop	r20
    2e5a:	3f 91       	pop	r19
    2e5c:	2f 91       	pop	r18
    2e5e:	0f 90       	pop	r0
    2e60:	0b be       	out	0x3b, r0	; 59
    2e62:	0f 90       	pop	r0
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	0f 90       	pop	r0
    2e68:	1f 90       	pop	r1
    2e6a:	18 95       	reti

00002e6c <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    2e6c:	bf 92       	push	r11
    2e6e:	cf 92       	push	r12
    2e70:	df 92       	push	r13
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	1f 92       	push	r1
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	8c 01       	movw	r16, r24
    2e86:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2e88:	81 15       	cp	r24, r1
    2e8a:	22 e0       	ldi	r18, 0x02	; 2
    2e8c:	92 07       	cpc	r25, r18
    2e8e:	81 f4       	brne	.+32     	; 0x2eb0 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    2e90:	61 e2       	ldi	r22, 0x21	; 33
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    2e9a:	c8 2e       	mov	r12, r24
    2e9c:	d1 2c       	mov	r13, r1
    2e9e:	60 e2       	ldi	r22, 0x20	; 32
    2ea0:	70 e0       	ldi	r23, 0x00	; 0
    2ea2:	82 e0       	ldi	r24, 0x02	; 2
    2ea4:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    2ea8:	dc 2c       	mov	r13, r12
    2eaa:	cc 24       	eor	r12, r12
    2eac:	c8 2a       	or	r12, r24
    2eae:	12 c0       	rjmp	.+36     	; 0x2ed4 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    2eb0:	80 34       	cpi	r24, 0x40	; 64
    2eb2:	92 40       	sbci	r25, 0x02	; 2
    2eb4:	d1 f5       	brne	.+116    	; 0x2f2a <adc_write_configuration+0xbe>
    2eb6:	65 e2       	ldi	r22, 0x25	; 37
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	82 e0       	ldi	r24, 0x02	; 2
    2ebc:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    2ec0:	c8 2e       	mov	r12, r24
    2ec2:	d1 2c       	mov	r13, r1
    2ec4:	64 e2       	ldi	r22, 0x24	; 36
    2ec6:	70 e0       	ldi	r23, 0x00	; 0
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    2ece:	dc 2c       	mov	r13, r12
    2ed0:	cc 24       	eor	r12, r12
    2ed2:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2ed4:	8f b7       	in	r24, 0x3f	; 63
    2ed6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2ed8:	f8 94       	cli
	return flags;
    2eda:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    2edc:	c8 01       	movw	r24, r16
    2ede:	ca dd       	rcall	.-1132   	; 0x2a74 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    2ee0:	f8 01       	movw	r30, r16
    2ee2:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    2ee4:	92 e0       	ldi	r25, 0x02	; 2
    2ee6:	90 83       	st	Z, r25
	adc->CAL = cal;
    2ee8:	c4 86       	std	Z+12, r12	; 0x0c
    2eea:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    2eec:	f7 01       	movw	r30, r14
    2eee:	25 81       	ldd	r18, Z+5	; 0x05
    2ef0:	36 81       	ldd	r19, Z+6	; 0x06
    2ef2:	f8 01       	movw	r30, r16
    2ef4:	20 8f       	std	Z+24, r18	; 0x18
    2ef6:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    2ef8:	f7 01       	movw	r30, r14
    2efa:	92 81       	ldd	r25, Z+2	; 0x02
    2efc:	f8 01       	movw	r30, r16
    2efe:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    2f00:	f7 01       	movw	r30, r14
    2f02:	94 81       	ldd	r25, Z+4	; 0x04
    2f04:	f8 01       	movw	r30, r16
    2f06:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    2f08:	f7 01       	movw	r30, r14
    2f0a:	93 81       	ldd	r25, Z+3	; 0x03
    2f0c:	f8 01       	movw	r30, r16
    2f0e:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    2f10:	f7 01       	movw	r30, r14
    2f12:	91 81       	ldd	r25, Z+1	; 0x01
    2f14:	f8 01       	movw	r30, r16
    2f16:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    2f18:	81 70       	andi	r24, 0x01	; 1
    2f1a:	f7 01       	movw	r30, r14
    2f1c:	90 81       	ld	r25, Z
    2f1e:	89 2b       	or	r24, r25
    2f20:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    2f22:	80 83       	st	Z, r24
    2f24:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f26:	c7 dd       	rcall	.-1138   	; 0x2ab6 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    2f28:	bf be       	out	0x3f, r11	; 63
    2f2a:	0f 90       	pop	r0
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	ff 90       	pop	r15
    2f36:	ef 90       	pop	r14
    2f38:	df 90       	pop	r13
    2f3a:	cf 90       	pop	r12
    2f3c:	bf 90       	pop	r11
    2f3e:	08 95       	ret

00002f40 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    2f40:	df 92       	push	r13
    2f42:	ef 92       	push	r14
    2f44:	ff 92       	push	r15
    2f46:	0f 93       	push	r16
    2f48:	1f 93       	push	r17
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	1f 92       	push	r1
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
    2f54:	8c 01       	movw	r16, r24
    2f56:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f58:	8f b7       	in	r24, 0x3f	; 63
    2f5a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2f5c:	f8 94       	cli
	return flags;
    2f5e:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    2f60:	c8 01       	movw	r24, r16
    2f62:	88 dd       	rcall	.-1264   	; 0x2a74 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    2f64:	f8 01       	movw	r30, r16
    2f66:	80 81       	ld	r24, Z
    2f68:	80 7c       	andi	r24, 0xC0	; 192
    2f6a:	f7 01       	movw	r30, r14
    2f6c:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    2f6e:	f8 01       	movw	r30, r16
    2f70:	80 8d       	ldd	r24, Z+24	; 0x18
    2f72:	91 8d       	ldd	r25, Z+25	; 0x19
    2f74:	f7 01       	movw	r30, r14
    2f76:	85 83       	std	Z+5, r24	; 0x05
    2f78:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	f7 01       	movw	r30, r14
    2f80:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    2f82:	f8 01       	movw	r30, r16
    2f84:	84 81       	ldd	r24, Z+4	; 0x04
    2f86:	f7 01       	movw	r30, r14
    2f88:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    2f8a:	f8 01       	movw	r30, r16
    2f8c:	83 81       	ldd	r24, Z+3	; 0x03
    2f8e:	f7 01       	movw	r30, r14
    2f90:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    2f92:	f8 01       	movw	r30, r16
    2f94:	81 81       	ldd	r24, Z+1	; 0x01
    2f96:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    2f98:	81 83       	std	Z+1, r24	; 0x01
    2f9a:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f9c:	8c dd       	rcall	.-1256   	; 0x2ab6 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    2f9e:	df be       	out	0x3f, r13	; 63
    2fa0:	0f 90       	pop	r0
    2fa2:	df 91       	pop	r29
    2fa4:	cf 91       	pop	r28
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	ff 90       	pop	r15
    2fac:	ef 90       	pop	r14
    2fae:	df 90       	pop	r13
    2fb0:	08 95       	ret

00002fb2 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    2fb2:	af 92       	push	r10
    2fb4:	bf 92       	push	r11
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	1f 92       	push	r1
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	6c 01       	movw	r12, r24
    2fce:	b6 2e       	mov	r11, r22
    2fd0:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    2fd2:	86 2f       	mov	r24, r22
    2fd4:	83 70       	andi	r24, 0x03	; 3
    2fd6:	29 f4       	brne	.+10     	; 0x2fe2 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    2fd8:	96 2f       	mov	r25, r22
    2fda:	96 95       	lsr	r25
    2fdc:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    2fde:	82 e0       	ldi	r24, 0x02	; 2
    2fe0:	02 c0       	rjmp	.+4      	; 0x2fe6 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    2fe2:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    2fe6:	90 ff       	sbrs	r25, 0
		index++;
    2fe8:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    2fea:	86 01       	movw	r16, r12
    2fec:	00 5e       	subi	r16, 0xE0	; 224
    2fee:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff0:	98 e0       	ldi	r25, 0x08	; 8
    2ff2:	89 9f       	mul	r24, r25
    2ff4:	00 0d       	add	r16, r0
    2ff6:	11 1d       	adc	r17, r1
    2ff8:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2ffa:	8f b7       	in	r24, 0x3f	; 63
    2ffc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2ffe:	f8 94       	cli
	return flags;
    3000:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    3002:	c6 01       	movw	r24, r12
    3004:	37 dd       	rcall	.-1426   	; 0x2a74 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    3006:	f7 01       	movw	r30, r14
    3008:	80 81       	ld	r24, Z
    300a:	f8 01       	movw	r30, r16
    300c:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    300e:	f7 01       	movw	r30, r14
    3010:	82 81       	ldd	r24, Z+2	; 0x02
    3012:	f8 01       	movw	r30, r16
    3014:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    3016:	f7 01       	movw	r30, r14
    3018:	81 81       	ldd	r24, Z+1	; 0x01
    301a:	f8 01       	movw	r30, r16
    301c:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    301e:	b0 fe       	sbrs	r11, 0
    3020:	04 c0       	rjmp	.+8      	; 0x302a <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    3022:	f7 01       	movw	r30, r14
    3024:	83 81       	ldd	r24, Z+3	; 0x03
    3026:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    3028:	86 83       	std	Z+6, r24	; 0x06
    302a:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    302c:	44 dd       	rcall	.-1400   	; 0x2ab6 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    302e:	af be       	out	0x3f, r10	; 63
    3030:	0f 90       	pop	r0
    3032:	df 91       	pop	r29
    3034:	cf 91       	pop	r28
    3036:	1f 91       	pop	r17
    3038:	0f 91       	pop	r16
    303a:	ff 90       	pop	r15
    303c:	ef 90       	pop	r14
    303e:	df 90       	pop	r13
    3040:	cf 90       	pop	r12
    3042:	bf 90       	pop	r11
    3044:	af 90       	pop	r10
    3046:	08 95       	ret

00003048 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    3048:	af 92       	push	r10
    304a:	bf 92       	push	r11
    304c:	cf 92       	push	r12
    304e:	df 92       	push	r13
    3050:	ef 92       	push	r14
    3052:	ff 92       	push	r15
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	cf 93       	push	r28
    305a:	df 93       	push	r29
    305c:	1f 92       	push	r1
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	6c 01       	movw	r12, r24
    3064:	b6 2e       	mov	r11, r22
    3066:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3068:	86 2f       	mov	r24, r22
    306a:	83 70       	andi	r24, 0x03	; 3
    306c:	29 f4       	brne	.+10     	; 0x3078 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    306e:	96 2f       	mov	r25, r22
    3070:	96 95       	lsr	r25
    3072:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    3074:	82 e0       	ldi	r24, 0x02	; 2
    3076:	02 c0       	rjmp	.+4      	; 0x307c <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3078:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    307a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    307c:	90 ff       	sbrs	r25, 0
		index++;
    307e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    3080:	86 01       	movw	r16, r12
    3082:	00 5e       	subi	r16, 0xE0	; 224
    3084:	1f 4f       	sbci	r17, 0xFF	; 255
    3086:	98 e0       	ldi	r25, 0x08	; 8
    3088:	89 9f       	mul	r24, r25
    308a:	00 0d       	add	r16, r0
    308c:	11 1d       	adc	r17, r1
    308e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3090:	8f b7       	in	r24, 0x3f	; 63
    3092:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3094:	f8 94       	cli
	return flags;
    3096:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    3098:	c6 01       	movw	r24, r12
    309a:	ec dc       	rcall	.-1576   	; 0x2a74 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    309c:	f8 01       	movw	r30, r16
    309e:	80 81       	ld	r24, Z
    30a0:	f7 01       	movw	r30, r14
    30a2:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    30a4:	f8 01       	movw	r30, r16
    30a6:	82 81       	ldd	r24, Z+2	; 0x02
    30a8:	f7 01       	movw	r30, r14
    30aa:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    30ac:	f8 01       	movw	r30, r16
    30ae:	81 81       	ldd	r24, Z+1	; 0x01
    30b0:	f7 01       	movw	r30, r14
    30b2:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    30b4:	b0 fe       	sbrs	r11, 0
    30b6:	04 c0       	rjmp	.+8      	; 0x30c0 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    30b8:	f8 01       	movw	r30, r16
    30ba:	86 81       	ldd	r24, Z+6	; 0x06
    30bc:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    30be:	83 83       	std	Z+3, r24	; 0x03
    30c0:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    30c2:	f9 dc       	rcall	.-1550   	; 0x2ab6 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    30c4:	af be       	out	0x3f, r10	; 63
    30c6:	0f 90       	pop	r0
    30c8:	df 91       	pop	r29
    30ca:	cf 91       	pop	r28
    30cc:	1f 91       	pop	r17
    30ce:	0f 91       	pop	r16
    30d0:	ff 90       	pop	r15
    30d2:	ef 90       	pop	r14
    30d4:	df 90       	pop	r13
    30d6:	cf 90       	pop	r12
    30d8:	bf 90       	pop	r11
    30da:	af 90       	pop	r10
    30dc:	08 95       	ret

000030de <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    30de:	80 32       	cpi	r24, 0x20	; 32
    30e0:	93 40       	sbci	r25, 0x03	; 3
    30e2:	61 f4       	brne	.+24     	; 0x30fc <dac_enable_clock+0x1e>
    30e4:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <dacb_enable_count>
    30e8:	91 e0       	ldi	r25, 0x01	; 1
    30ea:	98 0f       	add	r25, r24
    30ec:	90 93 53 21 	sts	0x2153, r25	; 0x802153 <dacb_enable_count>
    30f0:	81 11       	cpse	r24, r1
    30f2:	04 c0       	rjmp	.+8      	; 0x30fc <dac_enable_clock+0x1e>
    30f4:	64 e0       	ldi	r22, 0x04	; 4
    30f6:	82 e0       	ldi	r24, 0x02	; 2
    30f8:	0c 94 d7 30 	jmp	0x61ae	; 0x61ae <sysclk_enable_module>
    30fc:	08 95       	ret

000030fe <dac_disable_clock>:
    30fe:	80 32       	cpi	r24, 0x20	; 32
    3100:	93 40       	sbci	r25, 0x03	; 3
    3102:	59 f4       	brne	.+22     	; 0x311a <dac_disable_clock+0x1c>
    3104:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <dacb_enable_count>
    3108:	81 50       	subi	r24, 0x01	; 1
    310a:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <dacb_enable_count>
    310e:	81 11       	cpse	r24, r1
    3110:	04 c0       	rjmp	.+8      	; 0x311a <dac_disable_clock+0x1c>
    3112:	64 e0       	ldi	r22, 0x04	; 4
    3114:	82 e0       	ldi	r24, 0x02	; 2
    3116:	0c 94 ed 30 	jmp	0x61da	; 0x61da <sysclk_disable_module>
    311a:	08 95       	ret

0000311c <dac_enable>:
    311c:	ef 92       	push	r14
    311e:	ff 92       	push	r15
    3120:	1f 93       	push	r17
    3122:	cf 93       	push	r28
    3124:	df 93       	push	r29
    3126:	1f 92       	push	r1
    3128:	1f 92       	push	r1
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
    312e:	2f b7       	in	r18, 0x3f	; 63
    3130:	29 83       	std	Y+1, r18	; 0x01
    3132:	f8 94       	cli
    3134:	19 81       	ldd	r17, Y+1	; 0x01
    3136:	20 91 9c 25 	lds	r18, 0x259C	; 0x80259c <sleepmgr_locks+0x1>
    313a:	2f 3f       	cpi	r18, 0xFF	; 255
    313c:	09 f4       	brne	.+2      	; 0x3140 <dac_enable+0x24>
    313e:	ff cf       	rjmp	.-2      	; 0x313e <dac_enable+0x22>
    3140:	7c 01       	movw	r14, r24
    3142:	8f b7       	in	r24, 0x3f	; 63
    3144:	8a 83       	std	Y+2, r24	; 0x02
    3146:	f8 94       	cli
    3148:	9a 81       	ldd	r25, Y+2	; 0x02
    314a:	eb e9       	ldi	r30, 0x9B	; 155
    314c:	f5 e2       	ldi	r31, 0x25	; 37
    314e:	81 81       	ldd	r24, Z+1	; 0x01
    3150:	8f 5f       	subi	r24, 0xFF	; 255
    3152:	81 83       	std	Z+1, r24	; 0x01
    3154:	9f bf       	out	0x3f, r25	; 63
    3156:	c7 01       	movw	r24, r14
    3158:	c2 df       	rcall	.-124    	; 0x30de <dac_enable_clock>
    315a:	f7 01       	movw	r30, r14
    315c:	80 81       	ld	r24, Z
    315e:	81 60       	ori	r24, 0x01	; 1
    3160:	80 83       	st	Z, r24
    3162:	1f bf       	out	0x3f, r17	; 63
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	ff 90       	pop	r15
    3170:	ef 90       	pop	r14
    3172:	08 95       	ret

00003174 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    3174:	9f 92       	push	r9
    3176:	af 92       	push	r10
    3178:	bf 92       	push	r11
    317a:	cf 92       	push	r12
    317c:	df 92       	push	r13
    317e:	ef 92       	push	r14
    3180:	ff 92       	push	r15
    3182:	0f 93       	push	r16
    3184:	1f 93       	push	r17
    3186:	cf 93       	push	r28
    3188:	df 93       	push	r29
    318a:	1f 92       	push	r1
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    3190:	80 32       	cpi	r24, 0x20	; 32
    3192:	23 e0       	ldi	r18, 0x03	; 3
    3194:	92 07       	cpc	r25, r18
    3196:	09 f0       	breq	.+2      	; 0x319a <dac_write_configuration+0x26>
    3198:	3c c0       	rjmp	.+120    	; 0x3212 <dac_write_configuration+0x9e>
    319a:	7b 01       	movw	r14, r22
    319c:	8c 01       	movw	r16, r24
    319e:	63 e3       	ldi	r22, 0x33	; 51
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	82 e0       	ldi	r24, 0x02	; 2
    31a4:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
    31a8:	98 2e       	mov	r9, r24
    31aa:	62 e3       	ldi	r22, 0x32	; 50
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	82 e0       	ldi	r24, 0x02	; 2
    31b0:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
    31b4:	a8 2e       	mov	r10, r24
    31b6:	67 e3       	ldi	r22, 0x37	; 55
    31b8:	70 e0       	ldi	r23, 0x00	; 0
    31ba:	82 e0       	ldi	r24, 0x02	; 2
    31bc:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
    31c0:	b8 2e       	mov	r11, r24
    31c2:	66 e3       	ldi	r22, 0x36	; 54
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
    31cc:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    31ce:	8f b7       	in	r24, 0x3f	; 63
    31d0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    31d2:	f8 94       	cli
	return flags;
    31d4:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    31d6:	c8 01       	movw	r24, r16
    31d8:	82 df       	rcall	.-252    	; 0x30de <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    31da:	f8 01       	movw	r30, r16
    31dc:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    31de:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    31e0:	f7 01       	movw	r30, r14
    31e2:	91 81       	ldd	r25, Z+1	; 0x01
    31e4:	f8 01       	movw	r30, r16
    31e6:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    31e8:	f7 01       	movw	r30, r14
    31ea:	92 81       	ldd	r25, Z+2	; 0x02
    31ec:	f8 01       	movw	r30, r16
    31ee:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    31f0:	f7 01       	movw	r30, r14
    31f2:	93 81       	ldd	r25, Z+3	; 0x03
    31f4:	f8 01       	movw	r30, r16
    31f6:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    31f8:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    31fa:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    31fc:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    31fe:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    3200:	81 70       	andi	r24, 0x01	; 1
    3202:	f7 01       	movw	r30, r14
    3204:	90 81       	ld	r25, Z
    3206:	89 2b       	or	r24, r25
    3208:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    320a:	80 83       	st	Z, r24
    320c:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    320e:	77 df       	rcall	.-274    	; 0x30fe <dac_disable_clock>
	cpu_irq_restore(flags);
}
    3210:	df be       	out	0x3f, r13	; 63
    3212:	0f 90       	pop	r0
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	1f 91       	pop	r17
    321a:	0f 91       	pop	r16
    321c:	ff 90       	pop	r15
    321e:	ef 90       	pop	r14
    3220:	df 90       	pop	r13
    3222:	cf 90       	pop	r12
    3224:	bf 90       	pop	r11
    3226:	af 90       	pop	r10
    3228:	9f 90       	pop	r9
    322a:	08 95       	ret

0000322c <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    322c:	df 92       	push	r13
    322e:	ef 92       	push	r14
    3230:	ff 92       	push	r15
    3232:	0f 93       	push	r16
    3234:	1f 93       	push	r17
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	1f 92       	push	r1
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	8c 01       	movw	r16, r24
    3242:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3244:	8f b7       	in	r24, 0x3f	; 63
    3246:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3248:	f8 94       	cli
	return flags;
    324a:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    324c:	c8 01       	movw	r24, r16
    324e:	47 df       	rcall	.-370    	; 0x30de <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    3250:	f8 01       	movw	r30, r16
    3252:	80 81       	ld	r24, Z
    3254:	8e 7f       	andi	r24, 0xFE	; 254
    3256:	f7 01       	movw	r30, r14
    3258:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    325a:	f8 01       	movw	r30, r16
    325c:	81 81       	ldd	r24, Z+1	; 0x01
    325e:	f7 01       	movw	r30, r14
    3260:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    3262:	f8 01       	movw	r30, r16
    3264:	82 81       	ldd	r24, Z+2	; 0x02
    3266:	f7 01       	movw	r30, r14
    3268:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    326a:	f8 01       	movw	r30, r16
    326c:	83 81       	ldd	r24, Z+3	; 0x03
    326e:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    3270:	83 83       	std	Z+3, r24	; 0x03
    3272:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3274:	44 df       	rcall	.-376    	; 0x30fe <dac_disable_clock>
	cpu_irq_restore(flags);
}
    3276:	df be       	out	0x3f, r13	; 63
    3278:	0f 90       	pop	r0
    327a:	df 91       	pop	r29
    327c:	cf 91       	pop	r28
    327e:	1f 91       	pop	r17
    3280:	0f 91       	pop	r16
    3282:	ff 90       	pop	r15
    3284:	ef 90       	pop	r14
    3286:	df 90       	pop	r13
    3288:	08 95       	ret

0000328a <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    328a:	1f 92       	push	r1
    328c:	0f 92       	push	r0
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	0f 92       	push	r0
    3292:	11 24       	eor	r1, r1
    3294:	0b b6       	in	r0, 0x3b	; 59
    3296:	0f 92       	push	r0
    3298:	2f 93       	push	r18
    329a:	3f 93       	push	r19
    329c:	4f 93       	push	r20
    329e:	5f 93       	push	r21
    32a0:	6f 93       	push	r22
    32a2:	7f 93       	push	r23
    32a4:	8f 93       	push	r24
    32a6:	9f 93       	push	r25
    32a8:	af 93       	push	r26
    32aa:	bf 93       	push	r27
    32ac:	ef 93       	push	r30
    32ae:	ff 93       	push	r31
    32b0:	e0 91 9a 21 	lds	r30, 0x219A	; 0x80219a <tc_tcc0_ovf_callback>
    32b4:	f0 91 9b 21 	lds	r31, 0x219B	; 0x80219b <tc_tcc0_ovf_callback+0x1>
    32b8:	30 97       	sbiw	r30, 0x00	; 0
    32ba:	09 f0       	breq	.+2      	; 0x32be <__vector_14+0x34>
    32bc:	19 95       	eicall
    32be:	ff 91       	pop	r31
    32c0:	ef 91       	pop	r30
    32c2:	bf 91       	pop	r27
    32c4:	af 91       	pop	r26
    32c6:	9f 91       	pop	r25
    32c8:	8f 91       	pop	r24
    32ca:	7f 91       	pop	r23
    32cc:	6f 91       	pop	r22
    32ce:	5f 91       	pop	r21
    32d0:	4f 91       	pop	r20
    32d2:	3f 91       	pop	r19
    32d4:	2f 91       	pop	r18
    32d6:	0f 90       	pop	r0
    32d8:	0b be       	out	0x3b, r0	; 59
    32da:	0f 90       	pop	r0
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	0f 90       	pop	r0
    32e0:	1f 90       	pop	r1
    32e2:	18 95       	reti

000032e4 <__vector_15>:
    32e4:	1f 92       	push	r1
    32e6:	0f 92       	push	r0
    32e8:	0f b6       	in	r0, 0x3f	; 63
    32ea:	0f 92       	push	r0
    32ec:	11 24       	eor	r1, r1
    32ee:	0b b6       	in	r0, 0x3b	; 59
    32f0:	0f 92       	push	r0
    32f2:	2f 93       	push	r18
    32f4:	3f 93       	push	r19
    32f6:	4f 93       	push	r20
    32f8:	5f 93       	push	r21
    32fa:	6f 93       	push	r22
    32fc:	7f 93       	push	r23
    32fe:	8f 93       	push	r24
    3300:	9f 93       	push	r25
    3302:	af 93       	push	r26
    3304:	bf 93       	push	r27
    3306:	ef 93       	push	r30
    3308:	ff 93       	push	r31
    330a:	e0 91 98 21 	lds	r30, 0x2198	; 0x802198 <tc_tcc0_err_callback>
    330e:	f0 91 99 21 	lds	r31, 0x2199	; 0x802199 <tc_tcc0_err_callback+0x1>
    3312:	30 97       	sbiw	r30, 0x00	; 0
    3314:	09 f0       	breq	.+2      	; 0x3318 <__vector_15+0x34>
    3316:	19 95       	eicall
    3318:	ff 91       	pop	r31
    331a:	ef 91       	pop	r30
    331c:	bf 91       	pop	r27
    331e:	af 91       	pop	r26
    3320:	9f 91       	pop	r25
    3322:	8f 91       	pop	r24
    3324:	7f 91       	pop	r23
    3326:	6f 91       	pop	r22
    3328:	5f 91       	pop	r21
    332a:	4f 91       	pop	r20
    332c:	3f 91       	pop	r19
    332e:	2f 91       	pop	r18
    3330:	0f 90       	pop	r0
    3332:	0b be       	out	0x3b, r0	; 59
    3334:	0f 90       	pop	r0
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	0f 90       	pop	r0
    333a:	1f 90       	pop	r1
    333c:	18 95       	reti

0000333e <__vector_16>:
    333e:	1f 92       	push	r1
    3340:	0f 92       	push	r0
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	0f 92       	push	r0
    3346:	11 24       	eor	r1, r1
    3348:	0b b6       	in	r0, 0x3b	; 59
    334a:	0f 92       	push	r0
    334c:	2f 93       	push	r18
    334e:	3f 93       	push	r19
    3350:	4f 93       	push	r20
    3352:	5f 93       	push	r21
    3354:	6f 93       	push	r22
    3356:	7f 93       	push	r23
    3358:	8f 93       	push	r24
    335a:	9f 93       	push	r25
    335c:	af 93       	push	r26
    335e:	bf 93       	push	r27
    3360:	ef 93       	push	r30
    3362:	ff 93       	push	r31
    3364:	e0 91 96 21 	lds	r30, 0x2196	; 0x802196 <tc_tcc0_cca_callback>
    3368:	f0 91 97 21 	lds	r31, 0x2197	; 0x802197 <tc_tcc0_cca_callback+0x1>
    336c:	30 97       	sbiw	r30, 0x00	; 0
    336e:	09 f0       	breq	.+2      	; 0x3372 <__vector_16+0x34>
    3370:	19 95       	eicall
    3372:	ff 91       	pop	r31
    3374:	ef 91       	pop	r30
    3376:	bf 91       	pop	r27
    3378:	af 91       	pop	r26
    337a:	9f 91       	pop	r25
    337c:	8f 91       	pop	r24
    337e:	7f 91       	pop	r23
    3380:	6f 91       	pop	r22
    3382:	5f 91       	pop	r21
    3384:	4f 91       	pop	r20
    3386:	3f 91       	pop	r19
    3388:	2f 91       	pop	r18
    338a:	0f 90       	pop	r0
    338c:	0b be       	out	0x3b, r0	; 59
    338e:	0f 90       	pop	r0
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	0f 90       	pop	r0
    3394:	1f 90       	pop	r1
    3396:	18 95       	reti

00003398 <__vector_17>:
    3398:	1f 92       	push	r1
    339a:	0f 92       	push	r0
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	0f 92       	push	r0
    33a0:	11 24       	eor	r1, r1
    33a2:	0b b6       	in	r0, 0x3b	; 59
    33a4:	0f 92       	push	r0
    33a6:	2f 93       	push	r18
    33a8:	3f 93       	push	r19
    33aa:	4f 93       	push	r20
    33ac:	5f 93       	push	r21
    33ae:	6f 93       	push	r22
    33b0:	7f 93       	push	r23
    33b2:	8f 93       	push	r24
    33b4:	9f 93       	push	r25
    33b6:	af 93       	push	r26
    33b8:	bf 93       	push	r27
    33ba:	ef 93       	push	r30
    33bc:	ff 93       	push	r31
    33be:	e0 91 94 21 	lds	r30, 0x2194	; 0x802194 <tc_tcc0_ccb_callback>
    33c2:	f0 91 95 21 	lds	r31, 0x2195	; 0x802195 <tc_tcc0_ccb_callback+0x1>
    33c6:	30 97       	sbiw	r30, 0x00	; 0
    33c8:	09 f0       	breq	.+2      	; 0x33cc <__vector_17+0x34>
    33ca:	19 95       	eicall
    33cc:	ff 91       	pop	r31
    33ce:	ef 91       	pop	r30
    33d0:	bf 91       	pop	r27
    33d2:	af 91       	pop	r26
    33d4:	9f 91       	pop	r25
    33d6:	8f 91       	pop	r24
    33d8:	7f 91       	pop	r23
    33da:	6f 91       	pop	r22
    33dc:	5f 91       	pop	r21
    33de:	4f 91       	pop	r20
    33e0:	3f 91       	pop	r19
    33e2:	2f 91       	pop	r18
    33e4:	0f 90       	pop	r0
    33e6:	0b be       	out	0x3b, r0	; 59
    33e8:	0f 90       	pop	r0
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	0f 90       	pop	r0
    33ee:	1f 90       	pop	r1
    33f0:	18 95       	reti

000033f2 <__vector_18>:
    33f2:	1f 92       	push	r1
    33f4:	0f 92       	push	r0
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	0f 92       	push	r0
    33fa:	11 24       	eor	r1, r1
    33fc:	0b b6       	in	r0, 0x3b	; 59
    33fe:	0f 92       	push	r0
    3400:	2f 93       	push	r18
    3402:	3f 93       	push	r19
    3404:	4f 93       	push	r20
    3406:	5f 93       	push	r21
    3408:	6f 93       	push	r22
    340a:	7f 93       	push	r23
    340c:	8f 93       	push	r24
    340e:	9f 93       	push	r25
    3410:	af 93       	push	r26
    3412:	bf 93       	push	r27
    3414:	ef 93       	push	r30
    3416:	ff 93       	push	r31
    3418:	e0 91 92 21 	lds	r30, 0x2192	; 0x802192 <tc_tcc0_ccc_callback>
    341c:	f0 91 93 21 	lds	r31, 0x2193	; 0x802193 <tc_tcc0_ccc_callback+0x1>
    3420:	30 97       	sbiw	r30, 0x00	; 0
    3422:	09 f0       	breq	.+2      	; 0x3426 <__vector_18+0x34>
    3424:	19 95       	eicall
    3426:	ff 91       	pop	r31
    3428:	ef 91       	pop	r30
    342a:	bf 91       	pop	r27
    342c:	af 91       	pop	r26
    342e:	9f 91       	pop	r25
    3430:	8f 91       	pop	r24
    3432:	7f 91       	pop	r23
    3434:	6f 91       	pop	r22
    3436:	5f 91       	pop	r21
    3438:	4f 91       	pop	r20
    343a:	3f 91       	pop	r19
    343c:	2f 91       	pop	r18
    343e:	0f 90       	pop	r0
    3440:	0b be       	out	0x3b, r0	; 59
    3442:	0f 90       	pop	r0
    3444:	0f be       	out	0x3f, r0	; 63
    3446:	0f 90       	pop	r0
    3448:	1f 90       	pop	r1
    344a:	18 95       	reti

0000344c <__vector_19>:
    344c:	1f 92       	push	r1
    344e:	0f 92       	push	r0
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	0f 92       	push	r0
    3454:	11 24       	eor	r1, r1
    3456:	0b b6       	in	r0, 0x3b	; 59
    3458:	0f 92       	push	r0
    345a:	2f 93       	push	r18
    345c:	3f 93       	push	r19
    345e:	4f 93       	push	r20
    3460:	5f 93       	push	r21
    3462:	6f 93       	push	r22
    3464:	7f 93       	push	r23
    3466:	8f 93       	push	r24
    3468:	9f 93       	push	r25
    346a:	af 93       	push	r26
    346c:	bf 93       	push	r27
    346e:	ef 93       	push	r30
    3470:	ff 93       	push	r31
    3472:	e0 91 90 21 	lds	r30, 0x2190	; 0x802190 <tc_tcc0_ccd_callback>
    3476:	f0 91 91 21 	lds	r31, 0x2191	; 0x802191 <tc_tcc0_ccd_callback+0x1>
    347a:	30 97       	sbiw	r30, 0x00	; 0
    347c:	09 f0       	breq	.+2      	; 0x3480 <__vector_19+0x34>
    347e:	19 95       	eicall
    3480:	ff 91       	pop	r31
    3482:	ef 91       	pop	r30
    3484:	bf 91       	pop	r27
    3486:	af 91       	pop	r26
    3488:	9f 91       	pop	r25
    348a:	8f 91       	pop	r24
    348c:	7f 91       	pop	r23
    348e:	6f 91       	pop	r22
    3490:	5f 91       	pop	r21
    3492:	4f 91       	pop	r20
    3494:	3f 91       	pop	r19
    3496:	2f 91       	pop	r18
    3498:	0f 90       	pop	r0
    349a:	0b be       	out	0x3b, r0	; 59
    349c:	0f 90       	pop	r0
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	0f 90       	pop	r0
    34a2:	1f 90       	pop	r1
    34a4:	18 95       	reti

000034a6 <__vector_20>:
    34a6:	1f 92       	push	r1
    34a8:	0f 92       	push	r0
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	0f 92       	push	r0
    34ae:	11 24       	eor	r1, r1
    34b0:	0b b6       	in	r0, 0x3b	; 59
    34b2:	0f 92       	push	r0
    34b4:	2f 93       	push	r18
    34b6:	3f 93       	push	r19
    34b8:	4f 93       	push	r20
    34ba:	5f 93       	push	r21
    34bc:	6f 93       	push	r22
    34be:	7f 93       	push	r23
    34c0:	8f 93       	push	r24
    34c2:	9f 93       	push	r25
    34c4:	af 93       	push	r26
    34c6:	bf 93       	push	r27
    34c8:	ef 93       	push	r30
    34ca:	ff 93       	push	r31
    34cc:	e0 91 8e 21 	lds	r30, 0x218E	; 0x80218e <tc_tcc1_ovf_callback>
    34d0:	f0 91 8f 21 	lds	r31, 0x218F	; 0x80218f <tc_tcc1_ovf_callback+0x1>
    34d4:	30 97       	sbiw	r30, 0x00	; 0
    34d6:	09 f0       	breq	.+2      	; 0x34da <__vector_20+0x34>
    34d8:	19 95       	eicall
    34da:	ff 91       	pop	r31
    34dc:	ef 91       	pop	r30
    34de:	bf 91       	pop	r27
    34e0:	af 91       	pop	r26
    34e2:	9f 91       	pop	r25
    34e4:	8f 91       	pop	r24
    34e6:	7f 91       	pop	r23
    34e8:	6f 91       	pop	r22
    34ea:	5f 91       	pop	r21
    34ec:	4f 91       	pop	r20
    34ee:	3f 91       	pop	r19
    34f0:	2f 91       	pop	r18
    34f2:	0f 90       	pop	r0
    34f4:	0b be       	out	0x3b, r0	; 59
    34f6:	0f 90       	pop	r0
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	0f 90       	pop	r0
    34fc:	1f 90       	pop	r1
    34fe:	18 95       	reti

00003500 <__vector_21>:
    3500:	1f 92       	push	r1
    3502:	0f 92       	push	r0
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	0f 92       	push	r0
    3508:	11 24       	eor	r1, r1
    350a:	0b b6       	in	r0, 0x3b	; 59
    350c:	0f 92       	push	r0
    350e:	2f 93       	push	r18
    3510:	3f 93       	push	r19
    3512:	4f 93       	push	r20
    3514:	5f 93       	push	r21
    3516:	6f 93       	push	r22
    3518:	7f 93       	push	r23
    351a:	8f 93       	push	r24
    351c:	9f 93       	push	r25
    351e:	af 93       	push	r26
    3520:	bf 93       	push	r27
    3522:	ef 93       	push	r30
    3524:	ff 93       	push	r31
    3526:	e0 91 8c 21 	lds	r30, 0x218C	; 0x80218c <tc_tcc1_err_callback>
    352a:	f0 91 8d 21 	lds	r31, 0x218D	; 0x80218d <tc_tcc1_err_callback+0x1>
    352e:	30 97       	sbiw	r30, 0x00	; 0
    3530:	09 f0       	breq	.+2      	; 0x3534 <__vector_21+0x34>
    3532:	19 95       	eicall
    3534:	ff 91       	pop	r31
    3536:	ef 91       	pop	r30
    3538:	bf 91       	pop	r27
    353a:	af 91       	pop	r26
    353c:	9f 91       	pop	r25
    353e:	8f 91       	pop	r24
    3540:	7f 91       	pop	r23
    3542:	6f 91       	pop	r22
    3544:	5f 91       	pop	r21
    3546:	4f 91       	pop	r20
    3548:	3f 91       	pop	r19
    354a:	2f 91       	pop	r18
    354c:	0f 90       	pop	r0
    354e:	0b be       	out	0x3b, r0	; 59
    3550:	0f 90       	pop	r0
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	0f 90       	pop	r0
    3556:	1f 90       	pop	r1
    3558:	18 95       	reti

0000355a <__vector_22>:
    355a:	1f 92       	push	r1
    355c:	0f 92       	push	r0
    355e:	0f b6       	in	r0, 0x3f	; 63
    3560:	0f 92       	push	r0
    3562:	11 24       	eor	r1, r1
    3564:	0b b6       	in	r0, 0x3b	; 59
    3566:	0f 92       	push	r0
    3568:	2f 93       	push	r18
    356a:	3f 93       	push	r19
    356c:	4f 93       	push	r20
    356e:	5f 93       	push	r21
    3570:	6f 93       	push	r22
    3572:	7f 93       	push	r23
    3574:	8f 93       	push	r24
    3576:	9f 93       	push	r25
    3578:	af 93       	push	r26
    357a:	bf 93       	push	r27
    357c:	ef 93       	push	r30
    357e:	ff 93       	push	r31
    3580:	e0 91 8a 21 	lds	r30, 0x218A	; 0x80218a <tc_tcc1_cca_callback>
    3584:	f0 91 8b 21 	lds	r31, 0x218B	; 0x80218b <tc_tcc1_cca_callback+0x1>
    3588:	30 97       	sbiw	r30, 0x00	; 0
    358a:	09 f0       	breq	.+2      	; 0x358e <__vector_22+0x34>
    358c:	19 95       	eicall
    358e:	ff 91       	pop	r31
    3590:	ef 91       	pop	r30
    3592:	bf 91       	pop	r27
    3594:	af 91       	pop	r26
    3596:	9f 91       	pop	r25
    3598:	8f 91       	pop	r24
    359a:	7f 91       	pop	r23
    359c:	6f 91       	pop	r22
    359e:	5f 91       	pop	r21
    35a0:	4f 91       	pop	r20
    35a2:	3f 91       	pop	r19
    35a4:	2f 91       	pop	r18
    35a6:	0f 90       	pop	r0
    35a8:	0b be       	out	0x3b, r0	; 59
    35aa:	0f 90       	pop	r0
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	0f 90       	pop	r0
    35b0:	1f 90       	pop	r1
    35b2:	18 95       	reti

000035b4 <__vector_23>:
    35b4:	1f 92       	push	r1
    35b6:	0f 92       	push	r0
    35b8:	0f b6       	in	r0, 0x3f	; 63
    35ba:	0f 92       	push	r0
    35bc:	11 24       	eor	r1, r1
    35be:	0b b6       	in	r0, 0x3b	; 59
    35c0:	0f 92       	push	r0
    35c2:	2f 93       	push	r18
    35c4:	3f 93       	push	r19
    35c6:	4f 93       	push	r20
    35c8:	5f 93       	push	r21
    35ca:	6f 93       	push	r22
    35cc:	7f 93       	push	r23
    35ce:	8f 93       	push	r24
    35d0:	9f 93       	push	r25
    35d2:	af 93       	push	r26
    35d4:	bf 93       	push	r27
    35d6:	ef 93       	push	r30
    35d8:	ff 93       	push	r31
    35da:	e0 91 88 21 	lds	r30, 0x2188	; 0x802188 <tc_tcc1_ccb_callback>
    35de:	f0 91 89 21 	lds	r31, 0x2189	; 0x802189 <tc_tcc1_ccb_callback+0x1>
    35e2:	30 97       	sbiw	r30, 0x00	; 0
    35e4:	09 f0       	breq	.+2      	; 0x35e8 <__vector_23+0x34>
    35e6:	19 95       	eicall
    35e8:	ff 91       	pop	r31
    35ea:	ef 91       	pop	r30
    35ec:	bf 91       	pop	r27
    35ee:	af 91       	pop	r26
    35f0:	9f 91       	pop	r25
    35f2:	8f 91       	pop	r24
    35f4:	7f 91       	pop	r23
    35f6:	6f 91       	pop	r22
    35f8:	5f 91       	pop	r21
    35fa:	4f 91       	pop	r20
    35fc:	3f 91       	pop	r19
    35fe:	2f 91       	pop	r18
    3600:	0f 90       	pop	r0
    3602:	0b be       	out	0x3b, r0	; 59
    3604:	0f 90       	pop	r0
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	0f 90       	pop	r0
    360a:	1f 90       	pop	r1
    360c:	18 95       	reti

0000360e <__vector_77>:
    360e:	1f 92       	push	r1
    3610:	0f 92       	push	r0
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	0f 92       	push	r0
    3616:	11 24       	eor	r1, r1
    3618:	0b b6       	in	r0, 0x3b	; 59
    361a:	0f 92       	push	r0
    361c:	2f 93       	push	r18
    361e:	3f 93       	push	r19
    3620:	4f 93       	push	r20
    3622:	5f 93       	push	r21
    3624:	6f 93       	push	r22
    3626:	7f 93       	push	r23
    3628:	8f 93       	push	r24
    362a:	9f 93       	push	r25
    362c:	af 93       	push	r26
    362e:	bf 93       	push	r27
    3630:	ef 93       	push	r30
    3632:	ff 93       	push	r31
    3634:	e0 91 86 21 	lds	r30, 0x2186	; 0x802186 <tc_tcd0_ovf_callback>
    3638:	f0 91 87 21 	lds	r31, 0x2187	; 0x802187 <tc_tcd0_ovf_callback+0x1>
    363c:	30 97       	sbiw	r30, 0x00	; 0
    363e:	09 f0       	breq	.+2      	; 0x3642 <__vector_77+0x34>
    3640:	19 95       	eicall
    3642:	ff 91       	pop	r31
    3644:	ef 91       	pop	r30
    3646:	bf 91       	pop	r27
    3648:	af 91       	pop	r26
    364a:	9f 91       	pop	r25
    364c:	8f 91       	pop	r24
    364e:	7f 91       	pop	r23
    3650:	6f 91       	pop	r22
    3652:	5f 91       	pop	r21
    3654:	4f 91       	pop	r20
    3656:	3f 91       	pop	r19
    3658:	2f 91       	pop	r18
    365a:	0f 90       	pop	r0
    365c:	0b be       	out	0x3b, r0	; 59
    365e:	0f 90       	pop	r0
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	0f 90       	pop	r0
    3664:	1f 90       	pop	r1
    3666:	18 95       	reti

00003668 <__vector_78>:
    3668:	1f 92       	push	r1
    366a:	0f 92       	push	r0
    366c:	0f b6       	in	r0, 0x3f	; 63
    366e:	0f 92       	push	r0
    3670:	11 24       	eor	r1, r1
    3672:	0b b6       	in	r0, 0x3b	; 59
    3674:	0f 92       	push	r0
    3676:	2f 93       	push	r18
    3678:	3f 93       	push	r19
    367a:	4f 93       	push	r20
    367c:	5f 93       	push	r21
    367e:	6f 93       	push	r22
    3680:	7f 93       	push	r23
    3682:	8f 93       	push	r24
    3684:	9f 93       	push	r25
    3686:	af 93       	push	r26
    3688:	bf 93       	push	r27
    368a:	ef 93       	push	r30
    368c:	ff 93       	push	r31
    368e:	e0 91 84 21 	lds	r30, 0x2184	; 0x802184 <tc_tcd0_err_callback>
    3692:	f0 91 85 21 	lds	r31, 0x2185	; 0x802185 <tc_tcd0_err_callback+0x1>
    3696:	30 97       	sbiw	r30, 0x00	; 0
    3698:	09 f0       	breq	.+2      	; 0x369c <__vector_78+0x34>
    369a:	19 95       	eicall
    369c:	ff 91       	pop	r31
    369e:	ef 91       	pop	r30
    36a0:	bf 91       	pop	r27
    36a2:	af 91       	pop	r26
    36a4:	9f 91       	pop	r25
    36a6:	8f 91       	pop	r24
    36a8:	7f 91       	pop	r23
    36aa:	6f 91       	pop	r22
    36ac:	5f 91       	pop	r21
    36ae:	4f 91       	pop	r20
    36b0:	3f 91       	pop	r19
    36b2:	2f 91       	pop	r18
    36b4:	0f 90       	pop	r0
    36b6:	0b be       	out	0x3b, r0	; 59
    36b8:	0f 90       	pop	r0
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	0f 90       	pop	r0
    36be:	1f 90       	pop	r1
    36c0:	18 95       	reti

000036c2 <__vector_79>:
    36c2:	1f 92       	push	r1
    36c4:	0f 92       	push	r0
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	0f 92       	push	r0
    36ca:	11 24       	eor	r1, r1
    36cc:	0b b6       	in	r0, 0x3b	; 59
    36ce:	0f 92       	push	r0
    36d0:	2f 93       	push	r18
    36d2:	3f 93       	push	r19
    36d4:	4f 93       	push	r20
    36d6:	5f 93       	push	r21
    36d8:	6f 93       	push	r22
    36da:	7f 93       	push	r23
    36dc:	8f 93       	push	r24
    36de:	9f 93       	push	r25
    36e0:	af 93       	push	r26
    36e2:	bf 93       	push	r27
    36e4:	ef 93       	push	r30
    36e6:	ff 93       	push	r31
    36e8:	e0 91 82 21 	lds	r30, 0x2182	; 0x802182 <tc_tcd0_cca_callback>
    36ec:	f0 91 83 21 	lds	r31, 0x2183	; 0x802183 <tc_tcd0_cca_callback+0x1>
    36f0:	30 97       	sbiw	r30, 0x00	; 0
    36f2:	09 f0       	breq	.+2      	; 0x36f6 <__vector_79+0x34>
    36f4:	19 95       	eicall
    36f6:	ff 91       	pop	r31
    36f8:	ef 91       	pop	r30
    36fa:	bf 91       	pop	r27
    36fc:	af 91       	pop	r26
    36fe:	9f 91       	pop	r25
    3700:	8f 91       	pop	r24
    3702:	7f 91       	pop	r23
    3704:	6f 91       	pop	r22
    3706:	5f 91       	pop	r21
    3708:	4f 91       	pop	r20
    370a:	3f 91       	pop	r19
    370c:	2f 91       	pop	r18
    370e:	0f 90       	pop	r0
    3710:	0b be       	out	0x3b, r0	; 59
    3712:	0f 90       	pop	r0
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	0f 90       	pop	r0
    3718:	1f 90       	pop	r1
    371a:	18 95       	reti

0000371c <__vector_80>:
    371c:	1f 92       	push	r1
    371e:	0f 92       	push	r0
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	0f 92       	push	r0
    3724:	11 24       	eor	r1, r1
    3726:	0b b6       	in	r0, 0x3b	; 59
    3728:	0f 92       	push	r0
    372a:	2f 93       	push	r18
    372c:	3f 93       	push	r19
    372e:	4f 93       	push	r20
    3730:	5f 93       	push	r21
    3732:	6f 93       	push	r22
    3734:	7f 93       	push	r23
    3736:	8f 93       	push	r24
    3738:	9f 93       	push	r25
    373a:	af 93       	push	r26
    373c:	bf 93       	push	r27
    373e:	ef 93       	push	r30
    3740:	ff 93       	push	r31
    3742:	e0 91 80 21 	lds	r30, 0x2180	; 0x802180 <tc_tcd0_ccb_callback>
    3746:	f0 91 81 21 	lds	r31, 0x2181	; 0x802181 <tc_tcd0_ccb_callback+0x1>
    374a:	30 97       	sbiw	r30, 0x00	; 0
    374c:	09 f0       	breq	.+2      	; 0x3750 <__vector_80+0x34>
    374e:	19 95       	eicall
    3750:	ff 91       	pop	r31
    3752:	ef 91       	pop	r30
    3754:	bf 91       	pop	r27
    3756:	af 91       	pop	r26
    3758:	9f 91       	pop	r25
    375a:	8f 91       	pop	r24
    375c:	7f 91       	pop	r23
    375e:	6f 91       	pop	r22
    3760:	5f 91       	pop	r21
    3762:	4f 91       	pop	r20
    3764:	3f 91       	pop	r19
    3766:	2f 91       	pop	r18
    3768:	0f 90       	pop	r0
    376a:	0b be       	out	0x3b, r0	; 59
    376c:	0f 90       	pop	r0
    376e:	0f be       	out	0x3f, r0	; 63
    3770:	0f 90       	pop	r0
    3772:	1f 90       	pop	r1
    3774:	18 95       	reti

00003776 <__vector_81>:
    3776:	1f 92       	push	r1
    3778:	0f 92       	push	r0
    377a:	0f b6       	in	r0, 0x3f	; 63
    377c:	0f 92       	push	r0
    377e:	11 24       	eor	r1, r1
    3780:	0b b6       	in	r0, 0x3b	; 59
    3782:	0f 92       	push	r0
    3784:	2f 93       	push	r18
    3786:	3f 93       	push	r19
    3788:	4f 93       	push	r20
    378a:	5f 93       	push	r21
    378c:	6f 93       	push	r22
    378e:	7f 93       	push	r23
    3790:	8f 93       	push	r24
    3792:	9f 93       	push	r25
    3794:	af 93       	push	r26
    3796:	bf 93       	push	r27
    3798:	ef 93       	push	r30
    379a:	ff 93       	push	r31
    379c:	e0 91 7e 21 	lds	r30, 0x217E	; 0x80217e <tc_tcd0_ccc_callback>
    37a0:	f0 91 7f 21 	lds	r31, 0x217F	; 0x80217f <tc_tcd0_ccc_callback+0x1>
    37a4:	30 97       	sbiw	r30, 0x00	; 0
    37a6:	09 f0       	breq	.+2      	; 0x37aa <__vector_81+0x34>
    37a8:	19 95       	eicall
    37aa:	ff 91       	pop	r31
    37ac:	ef 91       	pop	r30
    37ae:	bf 91       	pop	r27
    37b0:	af 91       	pop	r26
    37b2:	9f 91       	pop	r25
    37b4:	8f 91       	pop	r24
    37b6:	7f 91       	pop	r23
    37b8:	6f 91       	pop	r22
    37ba:	5f 91       	pop	r21
    37bc:	4f 91       	pop	r20
    37be:	3f 91       	pop	r19
    37c0:	2f 91       	pop	r18
    37c2:	0f 90       	pop	r0
    37c4:	0b be       	out	0x3b, r0	; 59
    37c6:	0f 90       	pop	r0
    37c8:	0f be       	out	0x3f, r0	; 63
    37ca:	0f 90       	pop	r0
    37cc:	1f 90       	pop	r1
    37ce:	18 95       	reti

000037d0 <__vector_82>:
    37d0:	1f 92       	push	r1
    37d2:	0f 92       	push	r0
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	0f 92       	push	r0
    37d8:	11 24       	eor	r1, r1
    37da:	0b b6       	in	r0, 0x3b	; 59
    37dc:	0f 92       	push	r0
    37de:	2f 93       	push	r18
    37e0:	3f 93       	push	r19
    37e2:	4f 93       	push	r20
    37e4:	5f 93       	push	r21
    37e6:	6f 93       	push	r22
    37e8:	7f 93       	push	r23
    37ea:	8f 93       	push	r24
    37ec:	9f 93       	push	r25
    37ee:	af 93       	push	r26
    37f0:	bf 93       	push	r27
    37f2:	ef 93       	push	r30
    37f4:	ff 93       	push	r31
    37f6:	e0 91 7c 21 	lds	r30, 0x217C	; 0x80217c <tc_tcd0_ccd_callback>
    37fa:	f0 91 7d 21 	lds	r31, 0x217D	; 0x80217d <tc_tcd0_ccd_callback+0x1>
    37fe:	30 97       	sbiw	r30, 0x00	; 0
    3800:	09 f0       	breq	.+2      	; 0x3804 <__vector_82+0x34>
    3802:	19 95       	eicall
    3804:	ff 91       	pop	r31
    3806:	ef 91       	pop	r30
    3808:	bf 91       	pop	r27
    380a:	af 91       	pop	r26
    380c:	9f 91       	pop	r25
    380e:	8f 91       	pop	r24
    3810:	7f 91       	pop	r23
    3812:	6f 91       	pop	r22
    3814:	5f 91       	pop	r21
    3816:	4f 91       	pop	r20
    3818:	3f 91       	pop	r19
    381a:	2f 91       	pop	r18
    381c:	0f 90       	pop	r0
    381e:	0b be       	out	0x3b, r0	; 59
    3820:	0f 90       	pop	r0
    3822:	0f be       	out	0x3f, r0	; 63
    3824:	0f 90       	pop	r0
    3826:	1f 90       	pop	r1
    3828:	18 95       	reti

0000382a <__vector_83>:
    382a:	1f 92       	push	r1
    382c:	0f 92       	push	r0
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	0f 92       	push	r0
    3832:	11 24       	eor	r1, r1
    3834:	0b b6       	in	r0, 0x3b	; 59
    3836:	0f 92       	push	r0
    3838:	2f 93       	push	r18
    383a:	3f 93       	push	r19
    383c:	4f 93       	push	r20
    383e:	5f 93       	push	r21
    3840:	6f 93       	push	r22
    3842:	7f 93       	push	r23
    3844:	8f 93       	push	r24
    3846:	9f 93       	push	r25
    3848:	af 93       	push	r26
    384a:	bf 93       	push	r27
    384c:	ef 93       	push	r30
    384e:	ff 93       	push	r31
    3850:	e0 91 7a 21 	lds	r30, 0x217A	; 0x80217a <tc_tcd1_ovf_callback>
    3854:	f0 91 7b 21 	lds	r31, 0x217B	; 0x80217b <tc_tcd1_ovf_callback+0x1>
    3858:	30 97       	sbiw	r30, 0x00	; 0
    385a:	09 f0       	breq	.+2      	; 0x385e <__vector_83+0x34>
    385c:	19 95       	eicall
    385e:	ff 91       	pop	r31
    3860:	ef 91       	pop	r30
    3862:	bf 91       	pop	r27
    3864:	af 91       	pop	r26
    3866:	9f 91       	pop	r25
    3868:	8f 91       	pop	r24
    386a:	7f 91       	pop	r23
    386c:	6f 91       	pop	r22
    386e:	5f 91       	pop	r21
    3870:	4f 91       	pop	r20
    3872:	3f 91       	pop	r19
    3874:	2f 91       	pop	r18
    3876:	0f 90       	pop	r0
    3878:	0b be       	out	0x3b, r0	; 59
    387a:	0f 90       	pop	r0
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	0f 90       	pop	r0
    3880:	1f 90       	pop	r1
    3882:	18 95       	reti

00003884 <__vector_84>:
    3884:	1f 92       	push	r1
    3886:	0f 92       	push	r0
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	0f 92       	push	r0
    388c:	11 24       	eor	r1, r1
    388e:	0b b6       	in	r0, 0x3b	; 59
    3890:	0f 92       	push	r0
    3892:	2f 93       	push	r18
    3894:	3f 93       	push	r19
    3896:	4f 93       	push	r20
    3898:	5f 93       	push	r21
    389a:	6f 93       	push	r22
    389c:	7f 93       	push	r23
    389e:	8f 93       	push	r24
    38a0:	9f 93       	push	r25
    38a2:	af 93       	push	r26
    38a4:	bf 93       	push	r27
    38a6:	ef 93       	push	r30
    38a8:	ff 93       	push	r31
    38aa:	e0 91 78 21 	lds	r30, 0x2178	; 0x802178 <tc_tcd1_err_callback>
    38ae:	f0 91 79 21 	lds	r31, 0x2179	; 0x802179 <tc_tcd1_err_callback+0x1>
    38b2:	30 97       	sbiw	r30, 0x00	; 0
    38b4:	09 f0       	breq	.+2      	; 0x38b8 <__vector_84+0x34>
    38b6:	19 95       	eicall
    38b8:	ff 91       	pop	r31
    38ba:	ef 91       	pop	r30
    38bc:	bf 91       	pop	r27
    38be:	af 91       	pop	r26
    38c0:	9f 91       	pop	r25
    38c2:	8f 91       	pop	r24
    38c4:	7f 91       	pop	r23
    38c6:	6f 91       	pop	r22
    38c8:	5f 91       	pop	r21
    38ca:	4f 91       	pop	r20
    38cc:	3f 91       	pop	r19
    38ce:	2f 91       	pop	r18
    38d0:	0f 90       	pop	r0
    38d2:	0b be       	out	0x3b, r0	; 59
    38d4:	0f 90       	pop	r0
    38d6:	0f be       	out	0x3f, r0	; 63
    38d8:	0f 90       	pop	r0
    38da:	1f 90       	pop	r1
    38dc:	18 95       	reti

000038de <__vector_85>:
    38de:	1f 92       	push	r1
    38e0:	0f 92       	push	r0
    38e2:	0f b6       	in	r0, 0x3f	; 63
    38e4:	0f 92       	push	r0
    38e6:	11 24       	eor	r1, r1
    38e8:	0b b6       	in	r0, 0x3b	; 59
    38ea:	0f 92       	push	r0
    38ec:	2f 93       	push	r18
    38ee:	3f 93       	push	r19
    38f0:	4f 93       	push	r20
    38f2:	5f 93       	push	r21
    38f4:	6f 93       	push	r22
    38f6:	7f 93       	push	r23
    38f8:	8f 93       	push	r24
    38fa:	9f 93       	push	r25
    38fc:	af 93       	push	r26
    38fe:	bf 93       	push	r27
    3900:	ef 93       	push	r30
    3902:	ff 93       	push	r31
    3904:	e0 91 76 21 	lds	r30, 0x2176	; 0x802176 <tc_tcd1_cca_callback>
    3908:	f0 91 77 21 	lds	r31, 0x2177	; 0x802177 <tc_tcd1_cca_callback+0x1>
    390c:	30 97       	sbiw	r30, 0x00	; 0
    390e:	09 f0       	breq	.+2      	; 0x3912 <__vector_85+0x34>
    3910:	19 95       	eicall
    3912:	ff 91       	pop	r31
    3914:	ef 91       	pop	r30
    3916:	bf 91       	pop	r27
    3918:	af 91       	pop	r26
    391a:	9f 91       	pop	r25
    391c:	8f 91       	pop	r24
    391e:	7f 91       	pop	r23
    3920:	6f 91       	pop	r22
    3922:	5f 91       	pop	r21
    3924:	4f 91       	pop	r20
    3926:	3f 91       	pop	r19
    3928:	2f 91       	pop	r18
    392a:	0f 90       	pop	r0
    392c:	0b be       	out	0x3b, r0	; 59
    392e:	0f 90       	pop	r0
    3930:	0f be       	out	0x3f, r0	; 63
    3932:	0f 90       	pop	r0
    3934:	1f 90       	pop	r1
    3936:	18 95       	reti

00003938 <__vector_86>:
    3938:	1f 92       	push	r1
    393a:	0f 92       	push	r0
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	0f 92       	push	r0
    3940:	11 24       	eor	r1, r1
    3942:	0b b6       	in	r0, 0x3b	; 59
    3944:	0f 92       	push	r0
    3946:	2f 93       	push	r18
    3948:	3f 93       	push	r19
    394a:	4f 93       	push	r20
    394c:	5f 93       	push	r21
    394e:	6f 93       	push	r22
    3950:	7f 93       	push	r23
    3952:	8f 93       	push	r24
    3954:	9f 93       	push	r25
    3956:	af 93       	push	r26
    3958:	bf 93       	push	r27
    395a:	ef 93       	push	r30
    395c:	ff 93       	push	r31
    395e:	e0 91 74 21 	lds	r30, 0x2174	; 0x802174 <tc_tcd1_ccb_callback>
    3962:	f0 91 75 21 	lds	r31, 0x2175	; 0x802175 <tc_tcd1_ccb_callback+0x1>
    3966:	30 97       	sbiw	r30, 0x00	; 0
    3968:	09 f0       	breq	.+2      	; 0x396c <__vector_86+0x34>
    396a:	19 95       	eicall
    396c:	ff 91       	pop	r31
    396e:	ef 91       	pop	r30
    3970:	bf 91       	pop	r27
    3972:	af 91       	pop	r26
    3974:	9f 91       	pop	r25
    3976:	8f 91       	pop	r24
    3978:	7f 91       	pop	r23
    397a:	6f 91       	pop	r22
    397c:	5f 91       	pop	r21
    397e:	4f 91       	pop	r20
    3980:	3f 91       	pop	r19
    3982:	2f 91       	pop	r18
    3984:	0f 90       	pop	r0
    3986:	0b be       	out	0x3b, r0	; 59
    3988:	0f 90       	pop	r0
    398a:	0f be       	out	0x3f, r0	; 63
    398c:	0f 90       	pop	r0
    398e:	1f 90       	pop	r1
    3990:	18 95       	reti

00003992 <__vector_47>:
    3992:	1f 92       	push	r1
    3994:	0f 92       	push	r0
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	0f 92       	push	r0
    399a:	11 24       	eor	r1, r1
    399c:	0b b6       	in	r0, 0x3b	; 59
    399e:	0f 92       	push	r0
    39a0:	2f 93       	push	r18
    39a2:	3f 93       	push	r19
    39a4:	4f 93       	push	r20
    39a6:	5f 93       	push	r21
    39a8:	6f 93       	push	r22
    39aa:	7f 93       	push	r23
    39ac:	8f 93       	push	r24
    39ae:	9f 93       	push	r25
    39b0:	af 93       	push	r26
    39b2:	bf 93       	push	r27
    39b4:	ef 93       	push	r30
    39b6:	ff 93       	push	r31
    39b8:	e0 91 72 21 	lds	r30, 0x2172	; 0x802172 <tc_tce0_ovf_callback>
    39bc:	f0 91 73 21 	lds	r31, 0x2173	; 0x802173 <tc_tce0_ovf_callback+0x1>
    39c0:	30 97       	sbiw	r30, 0x00	; 0
    39c2:	09 f0       	breq	.+2      	; 0x39c6 <__vector_47+0x34>
    39c4:	19 95       	eicall
    39c6:	ff 91       	pop	r31
    39c8:	ef 91       	pop	r30
    39ca:	bf 91       	pop	r27
    39cc:	af 91       	pop	r26
    39ce:	9f 91       	pop	r25
    39d0:	8f 91       	pop	r24
    39d2:	7f 91       	pop	r23
    39d4:	6f 91       	pop	r22
    39d6:	5f 91       	pop	r21
    39d8:	4f 91       	pop	r20
    39da:	3f 91       	pop	r19
    39dc:	2f 91       	pop	r18
    39de:	0f 90       	pop	r0
    39e0:	0b be       	out	0x3b, r0	; 59
    39e2:	0f 90       	pop	r0
    39e4:	0f be       	out	0x3f, r0	; 63
    39e6:	0f 90       	pop	r0
    39e8:	1f 90       	pop	r1
    39ea:	18 95       	reti

000039ec <__vector_48>:
    39ec:	1f 92       	push	r1
    39ee:	0f 92       	push	r0
    39f0:	0f b6       	in	r0, 0x3f	; 63
    39f2:	0f 92       	push	r0
    39f4:	11 24       	eor	r1, r1
    39f6:	0b b6       	in	r0, 0x3b	; 59
    39f8:	0f 92       	push	r0
    39fa:	2f 93       	push	r18
    39fc:	3f 93       	push	r19
    39fe:	4f 93       	push	r20
    3a00:	5f 93       	push	r21
    3a02:	6f 93       	push	r22
    3a04:	7f 93       	push	r23
    3a06:	8f 93       	push	r24
    3a08:	9f 93       	push	r25
    3a0a:	af 93       	push	r26
    3a0c:	bf 93       	push	r27
    3a0e:	ef 93       	push	r30
    3a10:	ff 93       	push	r31
    3a12:	e0 91 70 21 	lds	r30, 0x2170	; 0x802170 <tc_tce0_err_callback>
    3a16:	f0 91 71 21 	lds	r31, 0x2171	; 0x802171 <tc_tce0_err_callback+0x1>
    3a1a:	30 97       	sbiw	r30, 0x00	; 0
    3a1c:	09 f0       	breq	.+2      	; 0x3a20 <__vector_48+0x34>
    3a1e:	19 95       	eicall
    3a20:	ff 91       	pop	r31
    3a22:	ef 91       	pop	r30
    3a24:	bf 91       	pop	r27
    3a26:	af 91       	pop	r26
    3a28:	9f 91       	pop	r25
    3a2a:	8f 91       	pop	r24
    3a2c:	7f 91       	pop	r23
    3a2e:	6f 91       	pop	r22
    3a30:	5f 91       	pop	r21
    3a32:	4f 91       	pop	r20
    3a34:	3f 91       	pop	r19
    3a36:	2f 91       	pop	r18
    3a38:	0f 90       	pop	r0
    3a3a:	0b be       	out	0x3b, r0	; 59
    3a3c:	0f 90       	pop	r0
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	0f 90       	pop	r0
    3a42:	1f 90       	pop	r1
    3a44:	18 95       	reti

00003a46 <__vector_49>:
    3a46:	1f 92       	push	r1
    3a48:	0f 92       	push	r0
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	0f 92       	push	r0
    3a4e:	11 24       	eor	r1, r1
    3a50:	0b b6       	in	r0, 0x3b	; 59
    3a52:	0f 92       	push	r0
    3a54:	2f 93       	push	r18
    3a56:	3f 93       	push	r19
    3a58:	4f 93       	push	r20
    3a5a:	5f 93       	push	r21
    3a5c:	6f 93       	push	r22
    3a5e:	7f 93       	push	r23
    3a60:	8f 93       	push	r24
    3a62:	9f 93       	push	r25
    3a64:	af 93       	push	r26
    3a66:	bf 93       	push	r27
    3a68:	ef 93       	push	r30
    3a6a:	ff 93       	push	r31
    3a6c:	e0 91 6e 21 	lds	r30, 0x216E	; 0x80216e <tc_tce0_cca_callback>
    3a70:	f0 91 6f 21 	lds	r31, 0x216F	; 0x80216f <tc_tce0_cca_callback+0x1>
    3a74:	30 97       	sbiw	r30, 0x00	; 0
    3a76:	09 f0       	breq	.+2      	; 0x3a7a <__vector_49+0x34>
    3a78:	19 95       	eicall
    3a7a:	ff 91       	pop	r31
    3a7c:	ef 91       	pop	r30
    3a7e:	bf 91       	pop	r27
    3a80:	af 91       	pop	r26
    3a82:	9f 91       	pop	r25
    3a84:	8f 91       	pop	r24
    3a86:	7f 91       	pop	r23
    3a88:	6f 91       	pop	r22
    3a8a:	5f 91       	pop	r21
    3a8c:	4f 91       	pop	r20
    3a8e:	3f 91       	pop	r19
    3a90:	2f 91       	pop	r18
    3a92:	0f 90       	pop	r0
    3a94:	0b be       	out	0x3b, r0	; 59
    3a96:	0f 90       	pop	r0
    3a98:	0f be       	out	0x3f, r0	; 63
    3a9a:	0f 90       	pop	r0
    3a9c:	1f 90       	pop	r1
    3a9e:	18 95       	reti

00003aa0 <__vector_50>:
    3aa0:	1f 92       	push	r1
    3aa2:	0f 92       	push	r0
    3aa4:	0f b6       	in	r0, 0x3f	; 63
    3aa6:	0f 92       	push	r0
    3aa8:	11 24       	eor	r1, r1
    3aaa:	0b b6       	in	r0, 0x3b	; 59
    3aac:	0f 92       	push	r0
    3aae:	2f 93       	push	r18
    3ab0:	3f 93       	push	r19
    3ab2:	4f 93       	push	r20
    3ab4:	5f 93       	push	r21
    3ab6:	6f 93       	push	r22
    3ab8:	7f 93       	push	r23
    3aba:	8f 93       	push	r24
    3abc:	9f 93       	push	r25
    3abe:	af 93       	push	r26
    3ac0:	bf 93       	push	r27
    3ac2:	ef 93       	push	r30
    3ac4:	ff 93       	push	r31
    3ac6:	e0 91 6c 21 	lds	r30, 0x216C	; 0x80216c <tc_tce0_ccb_callback>
    3aca:	f0 91 6d 21 	lds	r31, 0x216D	; 0x80216d <tc_tce0_ccb_callback+0x1>
    3ace:	30 97       	sbiw	r30, 0x00	; 0
    3ad0:	09 f0       	breq	.+2      	; 0x3ad4 <__vector_50+0x34>
    3ad2:	19 95       	eicall
    3ad4:	ff 91       	pop	r31
    3ad6:	ef 91       	pop	r30
    3ad8:	bf 91       	pop	r27
    3ada:	af 91       	pop	r26
    3adc:	9f 91       	pop	r25
    3ade:	8f 91       	pop	r24
    3ae0:	7f 91       	pop	r23
    3ae2:	6f 91       	pop	r22
    3ae4:	5f 91       	pop	r21
    3ae6:	4f 91       	pop	r20
    3ae8:	3f 91       	pop	r19
    3aea:	2f 91       	pop	r18
    3aec:	0f 90       	pop	r0
    3aee:	0b be       	out	0x3b, r0	; 59
    3af0:	0f 90       	pop	r0
    3af2:	0f be       	out	0x3f, r0	; 63
    3af4:	0f 90       	pop	r0
    3af6:	1f 90       	pop	r1
    3af8:	18 95       	reti

00003afa <__vector_51>:
    3afa:	1f 92       	push	r1
    3afc:	0f 92       	push	r0
    3afe:	0f b6       	in	r0, 0x3f	; 63
    3b00:	0f 92       	push	r0
    3b02:	11 24       	eor	r1, r1
    3b04:	0b b6       	in	r0, 0x3b	; 59
    3b06:	0f 92       	push	r0
    3b08:	2f 93       	push	r18
    3b0a:	3f 93       	push	r19
    3b0c:	4f 93       	push	r20
    3b0e:	5f 93       	push	r21
    3b10:	6f 93       	push	r22
    3b12:	7f 93       	push	r23
    3b14:	8f 93       	push	r24
    3b16:	9f 93       	push	r25
    3b18:	af 93       	push	r26
    3b1a:	bf 93       	push	r27
    3b1c:	ef 93       	push	r30
    3b1e:	ff 93       	push	r31
    3b20:	e0 91 6a 21 	lds	r30, 0x216A	; 0x80216a <tc_tce0_ccc_callback>
    3b24:	f0 91 6b 21 	lds	r31, 0x216B	; 0x80216b <tc_tce0_ccc_callback+0x1>
    3b28:	30 97       	sbiw	r30, 0x00	; 0
    3b2a:	09 f0       	breq	.+2      	; 0x3b2e <__vector_51+0x34>
    3b2c:	19 95       	eicall
    3b2e:	ff 91       	pop	r31
    3b30:	ef 91       	pop	r30
    3b32:	bf 91       	pop	r27
    3b34:	af 91       	pop	r26
    3b36:	9f 91       	pop	r25
    3b38:	8f 91       	pop	r24
    3b3a:	7f 91       	pop	r23
    3b3c:	6f 91       	pop	r22
    3b3e:	5f 91       	pop	r21
    3b40:	4f 91       	pop	r20
    3b42:	3f 91       	pop	r19
    3b44:	2f 91       	pop	r18
    3b46:	0f 90       	pop	r0
    3b48:	0b be       	out	0x3b, r0	; 59
    3b4a:	0f 90       	pop	r0
    3b4c:	0f be       	out	0x3f, r0	; 63
    3b4e:	0f 90       	pop	r0
    3b50:	1f 90       	pop	r1
    3b52:	18 95       	reti

00003b54 <__vector_52>:
    3b54:	1f 92       	push	r1
    3b56:	0f 92       	push	r0
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	0f 92       	push	r0
    3b5c:	11 24       	eor	r1, r1
    3b5e:	0b b6       	in	r0, 0x3b	; 59
    3b60:	0f 92       	push	r0
    3b62:	2f 93       	push	r18
    3b64:	3f 93       	push	r19
    3b66:	4f 93       	push	r20
    3b68:	5f 93       	push	r21
    3b6a:	6f 93       	push	r22
    3b6c:	7f 93       	push	r23
    3b6e:	8f 93       	push	r24
    3b70:	9f 93       	push	r25
    3b72:	af 93       	push	r26
    3b74:	bf 93       	push	r27
    3b76:	ef 93       	push	r30
    3b78:	ff 93       	push	r31
    3b7a:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <tc_tce0_ccd_callback>
    3b7e:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <tc_tce0_ccd_callback+0x1>
    3b82:	30 97       	sbiw	r30, 0x00	; 0
    3b84:	09 f0       	breq	.+2      	; 0x3b88 <__vector_52+0x34>
    3b86:	19 95       	eicall
    3b88:	ff 91       	pop	r31
    3b8a:	ef 91       	pop	r30
    3b8c:	bf 91       	pop	r27
    3b8e:	af 91       	pop	r26
    3b90:	9f 91       	pop	r25
    3b92:	8f 91       	pop	r24
    3b94:	7f 91       	pop	r23
    3b96:	6f 91       	pop	r22
    3b98:	5f 91       	pop	r21
    3b9a:	4f 91       	pop	r20
    3b9c:	3f 91       	pop	r19
    3b9e:	2f 91       	pop	r18
    3ba0:	0f 90       	pop	r0
    3ba2:	0b be       	out	0x3b, r0	; 59
    3ba4:	0f 90       	pop	r0
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	0f 90       	pop	r0
    3baa:	1f 90       	pop	r1
    3bac:	18 95       	reti

00003bae <__vector_53>:
    3bae:	1f 92       	push	r1
    3bb0:	0f 92       	push	r0
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	0f 92       	push	r0
    3bb6:	11 24       	eor	r1, r1
    3bb8:	0b b6       	in	r0, 0x3b	; 59
    3bba:	0f 92       	push	r0
    3bbc:	2f 93       	push	r18
    3bbe:	3f 93       	push	r19
    3bc0:	4f 93       	push	r20
    3bc2:	5f 93       	push	r21
    3bc4:	6f 93       	push	r22
    3bc6:	7f 93       	push	r23
    3bc8:	8f 93       	push	r24
    3bca:	9f 93       	push	r25
    3bcc:	af 93       	push	r26
    3bce:	bf 93       	push	r27
    3bd0:	ef 93       	push	r30
    3bd2:	ff 93       	push	r31
    3bd4:	e0 91 66 21 	lds	r30, 0x2166	; 0x802166 <tc_tce1_ovf_callback>
    3bd8:	f0 91 67 21 	lds	r31, 0x2167	; 0x802167 <tc_tce1_ovf_callback+0x1>
    3bdc:	30 97       	sbiw	r30, 0x00	; 0
    3bde:	09 f0       	breq	.+2      	; 0x3be2 <__vector_53+0x34>
    3be0:	19 95       	eicall
    3be2:	ff 91       	pop	r31
    3be4:	ef 91       	pop	r30
    3be6:	bf 91       	pop	r27
    3be8:	af 91       	pop	r26
    3bea:	9f 91       	pop	r25
    3bec:	8f 91       	pop	r24
    3bee:	7f 91       	pop	r23
    3bf0:	6f 91       	pop	r22
    3bf2:	5f 91       	pop	r21
    3bf4:	4f 91       	pop	r20
    3bf6:	3f 91       	pop	r19
    3bf8:	2f 91       	pop	r18
    3bfa:	0f 90       	pop	r0
    3bfc:	0b be       	out	0x3b, r0	; 59
    3bfe:	0f 90       	pop	r0
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	0f 90       	pop	r0
    3c04:	1f 90       	pop	r1
    3c06:	18 95       	reti

00003c08 <__vector_54>:
    3c08:	1f 92       	push	r1
    3c0a:	0f 92       	push	r0
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	0f 92       	push	r0
    3c10:	11 24       	eor	r1, r1
    3c12:	0b b6       	in	r0, 0x3b	; 59
    3c14:	0f 92       	push	r0
    3c16:	2f 93       	push	r18
    3c18:	3f 93       	push	r19
    3c1a:	4f 93       	push	r20
    3c1c:	5f 93       	push	r21
    3c1e:	6f 93       	push	r22
    3c20:	7f 93       	push	r23
    3c22:	8f 93       	push	r24
    3c24:	9f 93       	push	r25
    3c26:	af 93       	push	r26
    3c28:	bf 93       	push	r27
    3c2a:	ef 93       	push	r30
    3c2c:	ff 93       	push	r31
    3c2e:	e0 91 64 21 	lds	r30, 0x2164	; 0x802164 <tc_tce1_err_callback>
    3c32:	f0 91 65 21 	lds	r31, 0x2165	; 0x802165 <tc_tce1_err_callback+0x1>
    3c36:	30 97       	sbiw	r30, 0x00	; 0
    3c38:	09 f0       	breq	.+2      	; 0x3c3c <__vector_54+0x34>
    3c3a:	19 95       	eicall
    3c3c:	ff 91       	pop	r31
    3c3e:	ef 91       	pop	r30
    3c40:	bf 91       	pop	r27
    3c42:	af 91       	pop	r26
    3c44:	9f 91       	pop	r25
    3c46:	8f 91       	pop	r24
    3c48:	7f 91       	pop	r23
    3c4a:	6f 91       	pop	r22
    3c4c:	5f 91       	pop	r21
    3c4e:	4f 91       	pop	r20
    3c50:	3f 91       	pop	r19
    3c52:	2f 91       	pop	r18
    3c54:	0f 90       	pop	r0
    3c56:	0b be       	out	0x3b, r0	; 59
    3c58:	0f 90       	pop	r0
    3c5a:	0f be       	out	0x3f, r0	; 63
    3c5c:	0f 90       	pop	r0
    3c5e:	1f 90       	pop	r1
    3c60:	18 95       	reti

00003c62 <__vector_55>:
    3c62:	1f 92       	push	r1
    3c64:	0f 92       	push	r0
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	0f 92       	push	r0
    3c6a:	11 24       	eor	r1, r1
    3c6c:	0b b6       	in	r0, 0x3b	; 59
    3c6e:	0f 92       	push	r0
    3c70:	2f 93       	push	r18
    3c72:	3f 93       	push	r19
    3c74:	4f 93       	push	r20
    3c76:	5f 93       	push	r21
    3c78:	6f 93       	push	r22
    3c7a:	7f 93       	push	r23
    3c7c:	8f 93       	push	r24
    3c7e:	9f 93       	push	r25
    3c80:	af 93       	push	r26
    3c82:	bf 93       	push	r27
    3c84:	ef 93       	push	r30
    3c86:	ff 93       	push	r31
    3c88:	e0 91 62 21 	lds	r30, 0x2162	; 0x802162 <tc_tce1_cca_callback>
    3c8c:	f0 91 63 21 	lds	r31, 0x2163	; 0x802163 <tc_tce1_cca_callback+0x1>
    3c90:	30 97       	sbiw	r30, 0x00	; 0
    3c92:	09 f0       	breq	.+2      	; 0x3c96 <__vector_55+0x34>
    3c94:	19 95       	eicall
    3c96:	ff 91       	pop	r31
    3c98:	ef 91       	pop	r30
    3c9a:	bf 91       	pop	r27
    3c9c:	af 91       	pop	r26
    3c9e:	9f 91       	pop	r25
    3ca0:	8f 91       	pop	r24
    3ca2:	7f 91       	pop	r23
    3ca4:	6f 91       	pop	r22
    3ca6:	5f 91       	pop	r21
    3ca8:	4f 91       	pop	r20
    3caa:	3f 91       	pop	r19
    3cac:	2f 91       	pop	r18
    3cae:	0f 90       	pop	r0
    3cb0:	0b be       	out	0x3b, r0	; 59
    3cb2:	0f 90       	pop	r0
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	0f 90       	pop	r0
    3cb8:	1f 90       	pop	r1
    3cba:	18 95       	reti

00003cbc <__vector_56>:
    3cbc:	1f 92       	push	r1
    3cbe:	0f 92       	push	r0
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	0f 92       	push	r0
    3cc4:	11 24       	eor	r1, r1
    3cc6:	0b b6       	in	r0, 0x3b	; 59
    3cc8:	0f 92       	push	r0
    3cca:	2f 93       	push	r18
    3ccc:	3f 93       	push	r19
    3cce:	4f 93       	push	r20
    3cd0:	5f 93       	push	r21
    3cd2:	6f 93       	push	r22
    3cd4:	7f 93       	push	r23
    3cd6:	8f 93       	push	r24
    3cd8:	9f 93       	push	r25
    3cda:	af 93       	push	r26
    3cdc:	bf 93       	push	r27
    3cde:	ef 93       	push	r30
    3ce0:	ff 93       	push	r31
    3ce2:	e0 91 60 21 	lds	r30, 0x2160	; 0x802160 <tc_tce1_ccb_callback>
    3ce6:	f0 91 61 21 	lds	r31, 0x2161	; 0x802161 <tc_tce1_ccb_callback+0x1>
    3cea:	30 97       	sbiw	r30, 0x00	; 0
    3cec:	09 f0       	breq	.+2      	; 0x3cf0 <__vector_56+0x34>
    3cee:	19 95       	eicall
    3cf0:	ff 91       	pop	r31
    3cf2:	ef 91       	pop	r30
    3cf4:	bf 91       	pop	r27
    3cf6:	af 91       	pop	r26
    3cf8:	9f 91       	pop	r25
    3cfa:	8f 91       	pop	r24
    3cfc:	7f 91       	pop	r23
    3cfe:	6f 91       	pop	r22
    3d00:	5f 91       	pop	r21
    3d02:	4f 91       	pop	r20
    3d04:	3f 91       	pop	r19
    3d06:	2f 91       	pop	r18
    3d08:	0f 90       	pop	r0
    3d0a:	0b be       	out	0x3b, r0	; 59
    3d0c:	0f 90       	pop	r0
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	0f 90       	pop	r0
    3d12:	1f 90       	pop	r1
    3d14:	18 95       	reti

00003d16 <__vector_108>:
    3d16:	1f 92       	push	r1
    3d18:	0f 92       	push	r0
    3d1a:	0f b6       	in	r0, 0x3f	; 63
    3d1c:	0f 92       	push	r0
    3d1e:	11 24       	eor	r1, r1
    3d20:	0b b6       	in	r0, 0x3b	; 59
    3d22:	0f 92       	push	r0
    3d24:	2f 93       	push	r18
    3d26:	3f 93       	push	r19
    3d28:	4f 93       	push	r20
    3d2a:	5f 93       	push	r21
    3d2c:	6f 93       	push	r22
    3d2e:	7f 93       	push	r23
    3d30:	8f 93       	push	r24
    3d32:	9f 93       	push	r25
    3d34:	af 93       	push	r26
    3d36:	bf 93       	push	r27
    3d38:	ef 93       	push	r30
    3d3a:	ff 93       	push	r31
    3d3c:	e0 91 5e 21 	lds	r30, 0x215E	; 0x80215e <tc_tcf0_ovf_callback>
    3d40:	f0 91 5f 21 	lds	r31, 0x215F	; 0x80215f <tc_tcf0_ovf_callback+0x1>
    3d44:	30 97       	sbiw	r30, 0x00	; 0
    3d46:	09 f0       	breq	.+2      	; 0x3d4a <__vector_108+0x34>
    3d48:	19 95       	eicall
    3d4a:	ff 91       	pop	r31
    3d4c:	ef 91       	pop	r30
    3d4e:	bf 91       	pop	r27
    3d50:	af 91       	pop	r26
    3d52:	9f 91       	pop	r25
    3d54:	8f 91       	pop	r24
    3d56:	7f 91       	pop	r23
    3d58:	6f 91       	pop	r22
    3d5a:	5f 91       	pop	r21
    3d5c:	4f 91       	pop	r20
    3d5e:	3f 91       	pop	r19
    3d60:	2f 91       	pop	r18
    3d62:	0f 90       	pop	r0
    3d64:	0b be       	out	0x3b, r0	; 59
    3d66:	0f 90       	pop	r0
    3d68:	0f be       	out	0x3f, r0	; 63
    3d6a:	0f 90       	pop	r0
    3d6c:	1f 90       	pop	r1
    3d6e:	18 95       	reti

00003d70 <__vector_109>:
    3d70:	1f 92       	push	r1
    3d72:	0f 92       	push	r0
    3d74:	0f b6       	in	r0, 0x3f	; 63
    3d76:	0f 92       	push	r0
    3d78:	11 24       	eor	r1, r1
    3d7a:	0b b6       	in	r0, 0x3b	; 59
    3d7c:	0f 92       	push	r0
    3d7e:	2f 93       	push	r18
    3d80:	3f 93       	push	r19
    3d82:	4f 93       	push	r20
    3d84:	5f 93       	push	r21
    3d86:	6f 93       	push	r22
    3d88:	7f 93       	push	r23
    3d8a:	8f 93       	push	r24
    3d8c:	9f 93       	push	r25
    3d8e:	af 93       	push	r26
    3d90:	bf 93       	push	r27
    3d92:	ef 93       	push	r30
    3d94:	ff 93       	push	r31
    3d96:	e0 91 5c 21 	lds	r30, 0x215C	; 0x80215c <tc_tcf0_err_callback>
    3d9a:	f0 91 5d 21 	lds	r31, 0x215D	; 0x80215d <tc_tcf0_err_callback+0x1>
    3d9e:	30 97       	sbiw	r30, 0x00	; 0
    3da0:	09 f0       	breq	.+2      	; 0x3da4 <__vector_109+0x34>
    3da2:	19 95       	eicall
    3da4:	ff 91       	pop	r31
    3da6:	ef 91       	pop	r30
    3da8:	bf 91       	pop	r27
    3daa:	af 91       	pop	r26
    3dac:	9f 91       	pop	r25
    3dae:	8f 91       	pop	r24
    3db0:	7f 91       	pop	r23
    3db2:	6f 91       	pop	r22
    3db4:	5f 91       	pop	r21
    3db6:	4f 91       	pop	r20
    3db8:	3f 91       	pop	r19
    3dba:	2f 91       	pop	r18
    3dbc:	0f 90       	pop	r0
    3dbe:	0b be       	out	0x3b, r0	; 59
    3dc0:	0f 90       	pop	r0
    3dc2:	0f be       	out	0x3f, r0	; 63
    3dc4:	0f 90       	pop	r0
    3dc6:	1f 90       	pop	r1
    3dc8:	18 95       	reti

00003dca <__vector_110>:
    3dca:	1f 92       	push	r1
    3dcc:	0f 92       	push	r0
    3dce:	0f b6       	in	r0, 0x3f	; 63
    3dd0:	0f 92       	push	r0
    3dd2:	11 24       	eor	r1, r1
    3dd4:	0b b6       	in	r0, 0x3b	; 59
    3dd6:	0f 92       	push	r0
    3dd8:	2f 93       	push	r18
    3dda:	3f 93       	push	r19
    3ddc:	4f 93       	push	r20
    3dde:	5f 93       	push	r21
    3de0:	6f 93       	push	r22
    3de2:	7f 93       	push	r23
    3de4:	8f 93       	push	r24
    3de6:	9f 93       	push	r25
    3de8:	af 93       	push	r26
    3dea:	bf 93       	push	r27
    3dec:	ef 93       	push	r30
    3dee:	ff 93       	push	r31
    3df0:	e0 91 5a 21 	lds	r30, 0x215A	; 0x80215a <tc_tcf0_cca_callback>
    3df4:	f0 91 5b 21 	lds	r31, 0x215B	; 0x80215b <tc_tcf0_cca_callback+0x1>
    3df8:	30 97       	sbiw	r30, 0x00	; 0
    3dfa:	09 f0       	breq	.+2      	; 0x3dfe <__vector_110+0x34>
    3dfc:	19 95       	eicall
    3dfe:	ff 91       	pop	r31
    3e00:	ef 91       	pop	r30
    3e02:	bf 91       	pop	r27
    3e04:	af 91       	pop	r26
    3e06:	9f 91       	pop	r25
    3e08:	8f 91       	pop	r24
    3e0a:	7f 91       	pop	r23
    3e0c:	6f 91       	pop	r22
    3e0e:	5f 91       	pop	r21
    3e10:	4f 91       	pop	r20
    3e12:	3f 91       	pop	r19
    3e14:	2f 91       	pop	r18
    3e16:	0f 90       	pop	r0
    3e18:	0b be       	out	0x3b, r0	; 59
    3e1a:	0f 90       	pop	r0
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	0f 90       	pop	r0
    3e20:	1f 90       	pop	r1
    3e22:	18 95       	reti

00003e24 <__vector_111>:
    3e24:	1f 92       	push	r1
    3e26:	0f 92       	push	r0
    3e28:	0f b6       	in	r0, 0x3f	; 63
    3e2a:	0f 92       	push	r0
    3e2c:	11 24       	eor	r1, r1
    3e2e:	0b b6       	in	r0, 0x3b	; 59
    3e30:	0f 92       	push	r0
    3e32:	2f 93       	push	r18
    3e34:	3f 93       	push	r19
    3e36:	4f 93       	push	r20
    3e38:	5f 93       	push	r21
    3e3a:	6f 93       	push	r22
    3e3c:	7f 93       	push	r23
    3e3e:	8f 93       	push	r24
    3e40:	9f 93       	push	r25
    3e42:	af 93       	push	r26
    3e44:	bf 93       	push	r27
    3e46:	ef 93       	push	r30
    3e48:	ff 93       	push	r31
    3e4a:	e0 91 58 21 	lds	r30, 0x2158	; 0x802158 <tc_tcf0_ccb_callback>
    3e4e:	f0 91 59 21 	lds	r31, 0x2159	; 0x802159 <tc_tcf0_ccb_callback+0x1>
    3e52:	30 97       	sbiw	r30, 0x00	; 0
    3e54:	09 f0       	breq	.+2      	; 0x3e58 <__vector_111+0x34>
    3e56:	19 95       	eicall
    3e58:	ff 91       	pop	r31
    3e5a:	ef 91       	pop	r30
    3e5c:	bf 91       	pop	r27
    3e5e:	af 91       	pop	r26
    3e60:	9f 91       	pop	r25
    3e62:	8f 91       	pop	r24
    3e64:	7f 91       	pop	r23
    3e66:	6f 91       	pop	r22
    3e68:	5f 91       	pop	r21
    3e6a:	4f 91       	pop	r20
    3e6c:	3f 91       	pop	r19
    3e6e:	2f 91       	pop	r18
    3e70:	0f 90       	pop	r0
    3e72:	0b be       	out	0x3b, r0	; 59
    3e74:	0f 90       	pop	r0
    3e76:	0f be       	out	0x3f, r0	; 63
    3e78:	0f 90       	pop	r0
    3e7a:	1f 90       	pop	r1
    3e7c:	18 95       	reti

00003e7e <__vector_112>:
    3e7e:	1f 92       	push	r1
    3e80:	0f 92       	push	r0
    3e82:	0f b6       	in	r0, 0x3f	; 63
    3e84:	0f 92       	push	r0
    3e86:	11 24       	eor	r1, r1
    3e88:	0b b6       	in	r0, 0x3b	; 59
    3e8a:	0f 92       	push	r0
    3e8c:	2f 93       	push	r18
    3e8e:	3f 93       	push	r19
    3e90:	4f 93       	push	r20
    3e92:	5f 93       	push	r21
    3e94:	6f 93       	push	r22
    3e96:	7f 93       	push	r23
    3e98:	8f 93       	push	r24
    3e9a:	9f 93       	push	r25
    3e9c:	af 93       	push	r26
    3e9e:	bf 93       	push	r27
    3ea0:	ef 93       	push	r30
    3ea2:	ff 93       	push	r31
    3ea4:	e0 91 56 21 	lds	r30, 0x2156	; 0x802156 <tc_tcf0_ccc_callback>
    3ea8:	f0 91 57 21 	lds	r31, 0x2157	; 0x802157 <tc_tcf0_ccc_callback+0x1>
    3eac:	30 97       	sbiw	r30, 0x00	; 0
    3eae:	09 f0       	breq	.+2      	; 0x3eb2 <__vector_112+0x34>
    3eb0:	19 95       	eicall
    3eb2:	ff 91       	pop	r31
    3eb4:	ef 91       	pop	r30
    3eb6:	bf 91       	pop	r27
    3eb8:	af 91       	pop	r26
    3eba:	9f 91       	pop	r25
    3ebc:	8f 91       	pop	r24
    3ebe:	7f 91       	pop	r23
    3ec0:	6f 91       	pop	r22
    3ec2:	5f 91       	pop	r21
    3ec4:	4f 91       	pop	r20
    3ec6:	3f 91       	pop	r19
    3ec8:	2f 91       	pop	r18
    3eca:	0f 90       	pop	r0
    3ecc:	0b be       	out	0x3b, r0	; 59
    3ece:	0f 90       	pop	r0
    3ed0:	0f be       	out	0x3f, r0	; 63
    3ed2:	0f 90       	pop	r0
    3ed4:	1f 90       	pop	r1
    3ed6:	18 95       	reti

00003ed8 <__vector_113>:
    3ed8:	1f 92       	push	r1
    3eda:	0f 92       	push	r0
    3edc:	0f b6       	in	r0, 0x3f	; 63
    3ede:	0f 92       	push	r0
    3ee0:	11 24       	eor	r1, r1
    3ee2:	0b b6       	in	r0, 0x3b	; 59
    3ee4:	0f 92       	push	r0
    3ee6:	2f 93       	push	r18
    3ee8:	3f 93       	push	r19
    3eea:	4f 93       	push	r20
    3eec:	5f 93       	push	r21
    3eee:	6f 93       	push	r22
    3ef0:	7f 93       	push	r23
    3ef2:	8f 93       	push	r24
    3ef4:	9f 93       	push	r25
    3ef6:	af 93       	push	r26
    3ef8:	bf 93       	push	r27
    3efa:	ef 93       	push	r30
    3efc:	ff 93       	push	r31
    3efe:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <tc_tcf0_ccd_callback>
    3f02:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <tc_tcf0_ccd_callback+0x1>
    3f06:	30 97       	sbiw	r30, 0x00	; 0
    3f08:	09 f0       	breq	.+2      	; 0x3f0c <__vector_113+0x34>
    3f0a:	19 95       	eicall
    3f0c:	ff 91       	pop	r31
    3f0e:	ef 91       	pop	r30
    3f10:	bf 91       	pop	r27
    3f12:	af 91       	pop	r26
    3f14:	9f 91       	pop	r25
    3f16:	8f 91       	pop	r24
    3f18:	7f 91       	pop	r23
    3f1a:	6f 91       	pop	r22
    3f1c:	5f 91       	pop	r21
    3f1e:	4f 91       	pop	r20
    3f20:	3f 91       	pop	r19
    3f22:	2f 91       	pop	r18
    3f24:	0f 90       	pop	r0
    3f26:	0b be       	out	0x3b, r0	; 59
    3f28:	0f 90       	pop	r0
    3f2a:	0f be       	out	0x3f, r0	; 63
    3f2c:	0f 90       	pop	r0
    3f2e:	1f 90       	pop	r1
    3f30:	18 95       	reti

00003f32 <tc_enable>:
    3f32:	1f 93       	push	r17
    3f34:	cf 93       	push	r28
    3f36:	df 93       	push	r29
    3f38:	1f 92       	push	r1
    3f3a:	1f 92       	push	r1
    3f3c:	cd b7       	in	r28, 0x3d	; 61
    3f3e:	de b7       	in	r29, 0x3e	; 62
    3f40:	2f b7       	in	r18, 0x3f	; 63
    3f42:	2a 83       	std	Y+2, r18	; 0x02
    3f44:	f8 94       	cli
    3f46:	1a 81       	ldd	r17, Y+2	; 0x02
    3f48:	28 2f       	mov	r18, r24
    3f4a:	39 2f       	mov	r19, r25
    3f4c:	21 15       	cp	r18, r1
    3f4e:	88 e0       	ldi	r24, 0x08	; 8
    3f50:	38 07       	cpc	r19, r24
    3f52:	49 f4       	brne	.+18     	; 0x3f66 <tc_enable+0x34>
    3f54:	61 e0       	ldi	r22, 0x01	; 1
    3f56:	83 e0       	ldi	r24, 0x03	; 3
    3f58:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3f5c:	64 e0       	ldi	r22, 0x04	; 4
    3f5e:	83 e0       	ldi	r24, 0x03	; 3
    3f60:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3f64:	4f c0       	rjmp	.+158    	; 0x4004 <tc_enable+0xd2>
    3f66:	20 34       	cpi	r18, 0x40	; 64
    3f68:	88 e0       	ldi	r24, 0x08	; 8
    3f6a:	38 07       	cpc	r19, r24
    3f6c:	49 f4       	brne	.+18     	; 0x3f80 <tc_enable+0x4e>
    3f6e:	62 e0       	ldi	r22, 0x02	; 2
    3f70:	83 e0       	ldi	r24, 0x03	; 3
    3f72:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3f76:	64 e0       	ldi	r22, 0x04	; 4
    3f78:	83 e0       	ldi	r24, 0x03	; 3
    3f7a:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3f7e:	42 c0       	rjmp	.+132    	; 0x4004 <tc_enable+0xd2>
    3f80:	21 15       	cp	r18, r1
    3f82:	89 e0       	ldi	r24, 0x09	; 9
    3f84:	38 07       	cpc	r19, r24
    3f86:	49 f4       	brne	.+18     	; 0x3f9a <tc_enable+0x68>
    3f88:	61 e0       	ldi	r22, 0x01	; 1
    3f8a:	84 e0       	ldi	r24, 0x04	; 4
    3f8c:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3f90:	64 e0       	ldi	r22, 0x04	; 4
    3f92:	84 e0       	ldi	r24, 0x04	; 4
    3f94:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3f98:	35 c0       	rjmp	.+106    	; 0x4004 <tc_enable+0xd2>
    3f9a:	20 34       	cpi	r18, 0x40	; 64
    3f9c:	89 e0       	ldi	r24, 0x09	; 9
    3f9e:	38 07       	cpc	r19, r24
    3fa0:	49 f4       	brne	.+18     	; 0x3fb4 <tc_enable+0x82>
    3fa2:	62 e0       	ldi	r22, 0x02	; 2
    3fa4:	84 e0       	ldi	r24, 0x04	; 4
    3fa6:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3faa:	64 e0       	ldi	r22, 0x04	; 4
    3fac:	84 e0       	ldi	r24, 0x04	; 4
    3fae:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3fb2:	28 c0       	rjmp	.+80     	; 0x4004 <tc_enable+0xd2>
    3fb4:	21 15       	cp	r18, r1
    3fb6:	8a e0       	ldi	r24, 0x0A	; 10
    3fb8:	38 07       	cpc	r19, r24
    3fba:	49 f4       	brne	.+18     	; 0x3fce <tc_enable+0x9c>
    3fbc:	61 e0       	ldi	r22, 0x01	; 1
    3fbe:	85 e0       	ldi	r24, 0x05	; 5
    3fc0:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3fc4:	64 e0       	ldi	r22, 0x04	; 4
    3fc6:	85 e0       	ldi	r24, 0x05	; 5
    3fc8:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3fcc:	1b c0       	rjmp	.+54     	; 0x4004 <tc_enable+0xd2>
    3fce:	20 34       	cpi	r18, 0x40	; 64
    3fd0:	8a e0       	ldi	r24, 0x0A	; 10
    3fd2:	38 07       	cpc	r19, r24
    3fd4:	49 f4       	brne	.+18     	; 0x3fe8 <tc_enable+0xb6>
    3fd6:	62 e0       	ldi	r22, 0x02	; 2
    3fd8:	85 e0       	ldi	r24, 0x05	; 5
    3fda:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3fde:	64 e0       	ldi	r22, 0x04	; 4
    3fe0:	85 e0       	ldi	r24, 0x05	; 5
    3fe2:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3fe6:	0e c0       	rjmp	.+28     	; 0x4004 <tc_enable+0xd2>
    3fe8:	21 15       	cp	r18, r1
    3fea:	3b 40       	sbci	r19, 0x0B	; 11
    3fec:	49 f4       	brne	.+18     	; 0x4000 <tc_enable+0xce>
    3fee:	61 e0       	ldi	r22, 0x01	; 1
    3ff0:	86 e0       	ldi	r24, 0x06	; 6
    3ff2:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3ff6:	64 e0       	ldi	r22, 0x04	; 4
    3ff8:	86 e0       	ldi	r24, 0x06	; 6
    3ffa:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sysclk_enable_module>
    3ffe:	02 c0       	rjmp	.+4      	; 0x4004 <tc_enable+0xd2>
    4000:	1f bf       	out	0x3f, r17	; 63
    4002:	10 c0       	rjmp	.+32     	; 0x4024 <tc_enable+0xf2>
    4004:	80 91 9c 25 	lds	r24, 0x259C	; 0x80259c <sleepmgr_locks+0x1>
    4008:	8f 3f       	cpi	r24, 0xFF	; 255
    400a:	09 f4       	brne	.+2      	; 0x400e <tc_enable+0xdc>
    400c:	ff cf       	rjmp	.-2      	; 0x400c <tc_enable+0xda>
    400e:	8f b7       	in	r24, 0x3f	; 63
    4010:	89 83       	std	Y+1, r24	; 0x01
    4012:	f8 94       	cli
    4014:	99 81       	ldd	r25, Y+1	; 0x01
    4016:	eb e9       	ldi	r30, 0x9B	; 155
    4018:	f5 e2       	ldi	r31, 0x25	; 37
    401a:	81 81       	ldd	r24, Z+1	; 0x01
    401c:	8f 5f       	subi	r24, 0xFF	; 255
    401e:	81 83       	std	Z+1, r24	; 0x01
    4020:	9f bf       	out	0x3f, r25	; 63
    4022:	1f bf       	out	0x3f, r17	; 63
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	df 91       	pop	r29
    402a:	cf 91       	pop	r28
    402c:	1f 91       	pop	r17
    402e:	08 95       	ret

00004030 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    4030:	81 15       	cp	r24, r1
    4032:	28 e0       	ldi	r18, 0x08	; 8
    4034:	92 07       	cpc	r25, r18
    4036:	29 f4       	brne	.+10     	; 0x4042 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    4038:	60 93 9a 21 	sts	0x219A, r22	; 0x80219a <tc_tcc0_ovf_callback>
    403c:	70 93 9b 21 	sts	0x219B, r23	; 0x80219b <tc_tcc0_ovf_callback+0x1>
    4040:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    4042:	80 34       	cpi	r24, 0x40	; 64
    4044:	28 e0       	ldi	r18, 0x08	; 8
    4046:	92 07       	cpc	r25, r18
    4048:	29 f4       	brne	.+10     	; 0x4054 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    404a:	60 93 8e 21 	sts	0x218E, r22	; 0x80218e <tc_tcc1_ovf_callback>
    404e:	70 93 8f 21 	sts	0x218F, r23	; 0x80218f <tc_tcc1_ovf_callback+0x1>
    4052:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    4054:	81 15       	cp	r24, r1
    4056:	29 e0       	ldi	r18, 0x09	; 9
    4058:	92 07       	cpc	r25, r18
    405a:	29 f4       	brne	.+10     	; 0x4066 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    405c:	60 93 86 21 	sts	0x2186, r22	; 0x802186 <tc_tcd0_ovf_callback>
    4060:	70 93 87 21 	sts	0x2187, r23	; 0x802187 <tc_tcd0_ovf_callback+0x1>
    4064:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    4066:	80 34       	cpi	r24, 0x40	; 64
    4068:	29 e0       	ldi	r18, 0x09	; 9
    406a:	92 07       	cpc	r25, r18
    406c:	29 f4       	brne	.+10     	; 0x4078 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    406e:	60 93 7a 21 	sts	0x217A, r22	; 0x80217a <tc_tcd1_ovf_callback>
    4072:	70 93 7b 21 	sts	0x217B, r23	; 0x80217b <tc_tcd1_ovf_callback+0x1>
    4076:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    4078:	81 15       	cp	r24, r1
    407a:	2a e0       	ldi	r18, 0x0A	; 10
    407c:	92 07       	cpc	r25, r18
    407e:	29 f4       	brne	.+10     	; 0x408a <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    4080:	60 93 72 21 	sts	0x2172, r22	; 0x802172 <tc_tce0_ovf_callback>
    4084:	70 93 73 21 	sts	0x2173, r23	; 0x802173 <tc_tce0_ovf_callback+0x1>
    4088:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    408a:	80 34       	cpi	r24, 0x40	; 64
    408c:	2a e0       	ldi	r18, 0x0A	; 10
    408e:	92 07       	cpc	r25, r18
    4090:	29 f4       	brne	.+10     	; 0x409c <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    4092:	60 93 66 21 	sts	0x2166, r22	; 0x802166 <tc_tce1_ovf_callback>
    4096:	70 93 67 21 	sts	0x2167, r23	; 0x802167 <tc_tce1_ovf_callback+0x1>
    409a:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    409c:	81 15       	cp	r24, r1
    409e:	9b 40       	sbci	r25, 0x0B	; 11
    40a0:	21 f4       	brne	.+8      	; 0x40aa <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    40a2:	60 93 5e 21 	sts	0x215E, r22	; 0x80215e <tc_tcf0_ovf_callback>
    40a6:	70 93 5f 21 	sts	0x215F, r23	; 0x80215f <tc_tcf0_ovf_callback+0x1>
    40aa:	08 95       	ret

000040ac <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    40ac:	cf 93       	push	r28
    40ae:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    40b0:	e0 91 9c 21 	lds	r30, 0x219C	; 0x80219c <transfer>
    40b4:	f0 91 9d 21 	lds	r31, 0x219D	; 0x80219d <transfer+0x1>
    40b8:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    40ba:	83 ff       	sbrs	r24, 3
    40bc:	08 c0       	rjmp	.+16     	; 0x40ce <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    40be:	88 60       	ori	r24, 0x08	; 8
    40c0:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    40c2:	83 e0       	ldi	r24, 0x03	; 3
    40c4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    40c6:	86 ef       	ldi	r24, 0xF6	; 246
    40c8:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <transfer+0xa>
    40cc:	83 c0       	rjmp	.+262    	; 0x41d4 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    40ce:	98 2f       	mov	r25, r24
    40d0:	94 71       	andi	r25, 0x14	; 20
    40d2:	31 f0       	breq	.+12     	; 0x40e0 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    40d4:	83 e0       	ldi	r24, 0x03	; 3
    40d6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    40d8:	8f ef       	ldi	r24, 0xFF	; 255
    40da:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <transfer+0xa>
    40de:	7a c0       	rjmp	.+244    	; 0x41d4 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    40e0:	86 ff       	sbrs	r24, 6
    40e2:	43 c0       	rjmp	.+134    	; 0x416a <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    40e4:	cc e9       	ldi	r28, 0x9C	; 156
    40e6:	d1 e2       	ldi	r29, 0x21	; 33
    40e8:	aa 81       	ldd	r26, Y+2	; 0x02
    40ea:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    40ec:	8c 81       	ldd	r24, Y+4	; 0x04
    40ee:	9d 81       	ldd	r25, Y+5	; 0x05
    40f0:	14 96       	adiw	r26, 0x04	; 4
    40f2:	2d 91       	ld	r18, X+
    40f4:	3c 91       	ld	r19, X
    40f6:	15 97       	sbiw	r26, 0x05	; 5
    40f8:	82 17       	cp	r24, r18
    40fa:	93 07       	cpc	r25, r19
    40fc:	6c f4       	brge	.+26     	; 0x4118 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    40fe:	9c 01       	movw	r18, r24
    4100:	2f 5f       	subi	r18, 0xFF	; 255
    4102:	3f 4f       	sbci	r19, 0xFF	; 255
    4104:	20 93 a0 21 	sts	0x21A0, r18	; 0x8021a0 <transfer+0x4>
    4108:	30 93 a1 21 	sts	0x21A1, r19	; 0x8021a1 <transfer+0x5>
    410c:	a8 0f       	add	r26, r24
    410e:	b9 1f       	adc	r27, r25
    4110:	11 96       	adiw	r26, 0x01	; 1
    4112:	8c 91       	ld	r24, X
    4114:	87 83       	std	Z+7, r24	; 0x07
    4116:	5e c0       	rjmp	.+188    	; 0x41d4 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    4118:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <transfer+0x6>
    411c:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <transfer+0x7>
    4120:	18 96       	adiw	r26, 0x08	; 8
    4122:	2d 91       	ld	r18, X+
    4124:	3c 91       	ld	r19, X
    4126:	19 97       	sbiw	r26, 0x09	; 9
    4128:	82 17       	cp	r24, r18
    412a:	93 07       	cpc	r25, r19
    412c:	c8 f4       	brcc	.+50     	; 0x4160 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    412e:	20 91 a4 21 	lds	r18, 0x21A4	; 0x8021a4 <transfer+0x8>
    4132:	22 23       	and	r18, r18
    4134:	21 f0       	breq	.+8      	; 0x413e <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    4136:	86 81       	ldd	r24, Z+6	; 0x06
    4138:	81 60       	ori	r24, 0x01	; 1
    413a:	86 83       	std	Z+6, r24	; 0x06
    413c:	4b c0       	rjmp	.+150    	; 0x41d4 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    413e:	16 96       	adiw	r26, 0x06	; 6
    4140:	2d 91       	ld	r18, X+
    4142:	3c 91       	ld	r19, X
    4144:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    4146:	ac 01       	movw	r20, r24
    4148:	4f 5f       	subi	r20, 0xFF	; 255
    414a:	5f 4f       	sbci	r21, 0xFF	; 255
    414c:	40 93 a2 21 	sts	0x21A2, r20	; 0x8021a2 <transfer+0x6>
    4150:	50 93 a3 21 	sts	0x21A3, r21	; 0x8021a3 <transfer+0x7>
    4154:	d9 01       	movw	r26, r18
    4156:	a8 0f       	add	r26, r24
    4158:	b9 1f       	adc	r27, r25
    415a:	8c 91       	ld	r24, X
    415c:	87 83       	std	Z+7, r24	; 0x07
    415e:	3a c0       	rjmp	.+116    	; 0x41d4 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4160:	83 e0       	ldi	r24, 0x03	; 3
    4162:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    4164:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <transfer+0xa>
    4168:	35 c0       	rjmp	.+106    	; 0x41d4 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    416a:	88 23       	and	r24, r24
    416c:	84 f5       	brge	.+96     	; 0x41ce <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    416e:	ac e9       	ldi	r26, 0x9C	; 156
    4170:	b1 e2       	ldi	r27, 0x21	; 33
    4172:	12 96       	adiw	r26, 0x02	; 2
    4174:	cd 91       	ld	r28, X+
    4176:	dc 91       	ld	r29, X
    4178:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    417a:	16 96       	adiw	r26, 0x06	; 6
    417c:	8d 91       	ld	r24, X+
    417e:	9c 91       	ld	r25, X
    4180:	17 97       	sbiw	r26, 0x07	; 7
    4182:	28 85       	ldd	r18, Y+8	; 0x08
    4184:	39 85       	ldd	r19, Y+9	; 0x09
    4186:	82 17       	cp	r24, r18
    4188:	93 07       	cpc	r25, r19
    418a:	d8 f4       	brcc	.+54     	; 0x41c2 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    418c:	6e 81       	ldd	r22, Y+6	; 0x06
    418e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    4190:	9c 01       	movw	r18, r24
    4192:	2f 5f       	subi	r18, 0xFF	; 255
    4194:	3f 4f       	sbci	r19, 0xFF	; 255
    4196:	20 93 a2 21 	sts	0x21A2, r18	; 0x8021a2 <transfer+0x6>
    419a:	30 93 a3 21 	sts	0x21A3, r19	; 0x8021a3 <transfer+0x7>
    419e:	47 81       	ldd	r20, Z+7	; 0x07
    41a0:	db 01       	movw	r26, r22
    41a2:	a8 0f       	add	r26, r24
    41a4:	b9 1f       	adc	r27, r25
    41a6:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    41a8:	88 85       	ldd	r24, Y+8	; 0x08
    41aa:	99 85       	ldd	r25, Y+9	; 0x09
    41ac:	28 17       	cp	r18, r24
    41ae:	39 07       	cpc	r19, r25
    41b0:	18 f4       	brcc	.+6      	; 0x41b8 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    41b2:	82 e0       	ldi	r24, 0x02	; 2
    41b4:	83 83       	std	Z+3, r24	; 0x03
    41b6:	0e c0       	rjmp	.+28     	; 0x41d4 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    41b8:	87 e0       	ldi	r24, 0x07	; 7
    41ba:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    41bc:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <transfer+0xa>
    41c0:	09 c0       	rjmp	.+18     	; 0x41d4 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    41c2:	83 e0       	ldi	r24, 0x03	; 3
    41c4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    41c6:	89 ef       	ldi	r24, 0xF9	; 249
    41c8:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <transfer+0xa>
    41cc:	03 c0       	rjmp	.+6      	; 0x41d4 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    41ce:	8b ef       	ldi	r24, 0xFB	; 251
    41d0:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <transfer+0xa>
	}
}
    41d4:	df 91       	pop	r29
    41d6:	cf 91       	pop	r28
    41d8:	08 95       	ret

000041da <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    41da:	1f 92       	push	r1
    41dc:	0f 92       	push	r0
    41de:	0f b6       	in	r0, 0x3f	; 63
    41e0:	0f 92       	push	r0
    41e2:	11 24       	eor	r1, r1
    41e4:	0b b6       	in	r0, 0x3b	; 59
    41e6:	0f 92       	push	r0
    41e8:	2f 93       	push	r18
    41ea:	3f 93       	push	r19
    41ec:	4f 93       	push	r20
    41ee:	5f 93       	push	r21
    41f0:	6f 93       	push	r22
    41f2:	7f 93       	push	r23
    41f4:	8f 93       	push	r24
    41f6:	9f 93       	push	r25
    41f8:	af 93       	push	r26
    41fa:	bf 93       	push	r27
    41fc:	ef 93       	push	r30
    41fe:	ff 93       	push	r31
    4200:	55 df       	rcall	.-342    	; 0x40ac <twim_interrupt_handler>
    4202:	ff 91       	pop	r31
    4204:	ef 91       	pop	r30
    4206:	bf 91       	pop	r27
    4208:	af 91       	pop	r26
    420a:	9f 91       	pop	r25
    420c:	8f 91       	pop	r24
    420e:	7f 91       	pop	r23
    4210:	6f 91       	pop	r22
    4212:	5f 91       	pop	r21
    4214:	4f 91       	pop	r20
    4216:	3f 91       	pop	r19
    4218:	2f 91       	pop	r18
    421a:	0f 90       	pop	r0
    421c:	0b be       	out	0x3b, r0	; 59
    421e:	0f 90       	pop	r0
    4220:	0f be       	out	0x3f, r0	; 63
    4222:	0f 90       	pop	r0
    4224:	1f 90       	pop	r1
    4226:	18 95       	reti

00004228 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    4228:	1f 92       	push	r1
    422a:	0f 92       	push	r0
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	0f 92       	push	r0
    4230:	11 24       	eor	r1, r1
    4232:	0b b6       	in	r0, 0x3b	; 59
    4234:	0f 92       	push	r0
    4236:	2f 93       	push	r18
    4238:	3f 93       	push	r19
    423a:	4f 93       	push	r20
    423c:	5f 93       	push	r21
    423e:	6f 93       	push	r22
    4240:	7f 93       	push	r23
    4242:	8f 93       	push	r24
    4244:	9f 93       	push	r25
    4246:	af 93       	push	r26
    4248:	bf 93       	push	r27
    424a:	ef 93       	push	r30
    424c:	ff 93       	push	r31
    424e:	2e df       	rcall	.-420    	; 0x40ac <twim_interrupt_handler>
    4250:	ff 91       	pop	r31
    4252:	ef 91       	pop	r30
    4254:	bf 91       	pop	r27
    4256:	af 91       	pop	r26
    4258:	9f 91       	pop	r25
    425a:	8f 91       	pop	r24
    425c:	7f 91       	pop	r23
    425e:	6f 91       	pop	r22
    4260:	5f 91       	pop	r21
    4262:	4f 91       	pop	r20
    4264:	3f 91       	pop	r19
    4266:	2f 91       	pop	r18
    4268:	0f 90       	pop	r0
    426a:	0b be       	out	0x3b, r0	; 59
    426c:	0f 90       	pop	r0
    426e:	0f be       	out	0x3f, r0	; 63
    4270:	0f 90       	pop	r0
    4272:	1f 90       	pop	r1
    4274:	18 95       	reti

00004276 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    4276:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    4278:	db 01       	movw	r26, r22
    427a:	14 96       	adiw	r26, 0x04	; 4
    427c:	8c 91       	ld	r24, X
    427e:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    4280:	88 eb       	ldi	r24, 0xB8	; 184
    4282:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    4288:	ec e9       	ldi	r30, 0x9C	; 156
    428a:	f1 e2       	ldi	r31, 0x21	; 33
    428c:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    428e:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    4290:	e0 ea       	ldi	r30, 0xA0	; 160
    4292:	f0 e0       	ldi	r31, 0x00	; 0
    4294:	82 81       	ldd	r24, Z+2	; 0x02
    4296:	82 60       	ori	r24, 0x02	; 2
    4298:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    429a:	78 94       	sei

	return STATUS_OK;
}
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	08 95       	ret

000042a0 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    42a0:	cf 93       	push	r28
    42a2:	df 93       	push	r29
    42a4:	1f 92       	push	r1
    42a6:	cd b7       	in	r28, 0x3d	; 61
    42a8:	de b7       	in	r29, 0x3e	; 62
    42aa:	9c 01       	movw	r18, r24
    42ac:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    42ae:	89 2b       	or	r24, r25
    42b0:	09 f4       	brne	.+2      	; 0x42b4 <twi_master_transfer+0x14>
    42b2:	51 c0       	rjmp	.+162    	; 0x4356 <twi_master_transfer+0xb6>
    42b4:	30 97       	sbiw	r30, 0x00	; 0
    42b6:	09 f4       	brne	.+2      	; 0x42ba <twi_master_transfer+0x1a>
    42b8:	50 c0       	rjmp	.+160    	; 0x435a <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    42ba:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    42bc:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <transfer+0x9>
    42c0:	88 23       	and	r24, r24
    42c2:	19 f0       	breq	.+6      	; 0x42ca <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    42c4:	99 23       	and	r25, r25
    42c6:	f1 f3       	breq	.-4      	; 0x42c4 <twi_master_transfer+0x24>
    42c8:	4a c0       	rjmp	.+148    	; 0x435e <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    42ca:	8f b7       	in	r24, 0x3f	; 63
    42cc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    42ce:	f8 94       	cli
	return flags;
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    42d2:	ac e9       	ldi	r26, 0x9C	; 156
    42d4:	b1 e2       	ldi	r27, 0x21	; 33
    42d6:	91 e0       	ldi	r25, 0x01	; 1
    42d8:	19 96       	adiw	r26, 0x09	; 9
    42da:	9c 93       	st	X, r25
    42dc:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    42de:	90 e8       	ldi	r25, 0x80	; 128
    42e0:	1a 96       	adiw	r26, 0x0a	; 10
    42e2:	9c 93       	st	X, r25
    42e4:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    42e6:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    42e8:	2d 93       	st	X+, r18
    42ea:	3c 93       	st	X, r19
    42ec:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    42ee:	12 96       	adiw	r26, 0x02	; 2
    42f0:	6d 93       	st	X+, r22
    42f2:	7c 93       	st	X, r23
    42f4:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    42f6:	14 96       	adiw	r26, 0x04	; 4
    42f8:	1d 92       	st	X+, r1
    42fa:	1c 92       	st	X, r1
    42fc:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    42fe:	16 96       	adiw	r26, 0x06	; 6
    4300:	1d 92       	st	X+, r1
    4302:	1c 92       	st	X, r1
    4304:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    4306:	18 96       	adiw	r26, 0x08	; 8
    4308:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    430a:	80 81       	ld	r24, Z
    430c:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    430e:	64 81       	ldd	r22, Z+4	; 0x04
    4310:	75 81       	ldd	r23, Z+5	; 0x05
    4312:	67 2b       	or	r22, r23
    4314:	11 f4       	brne	.+4      	; 0x431a <twi_master_transfer+0x7a>
    4316:	41 11       	cpse	r20, r1
    4318:	03 c0       	rjmp	.+6      	; 0x4320 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    431a:	f9 01       	movw	r30, r18
    431c:	86 83       	std	Z+6, r24	; 0x06
    431e:	03 c0       	rjmp	.+6      	; 0x4326 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    4320:	81 60       	ori	r24, 0x01	; 1
    4322:	f9 01       	movw	r30, r18
    4324:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    4326:	ec e9       	ldi	r30, 0x9C	; 156
    4328:	f1 e2       	ldi	r31, 0x21	; 33
    432a:	92 85       	ldd	r25, Z+10	; 0x0a
    432c:	90 38       	cpi	r25, 0x80	; 128
    432e:	e9 f3       	breq	.-6      	; 0x432a <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    4330:	f9 01       	movw	r30, r18
    4332:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    4334:	83 70       	andi	r24, 0x03	; 3
    4336:	81 30       	cpi	r24, 0x01	; 1
    4338:	49 f0       	breq	.+18     	; 0x434c <twi_master_transfer+0xac>
    433a:	ac e9       	ldi	r26, 0x9C	; 156
    433c:	b1 e2       	ldi	r27, 0x21	; 33
    433e:	ed 91       	ld	r30, X+
    4340:	fc 91       	ld	r31, X
    4342:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    4344:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    4346:	83 70       	andi	r24, 0x03	; 3
    4348:	81 30       	cpi	r24, 0x01	; 1
    434a:	c9 f7       	brne	.-14     	; 0x433e <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    434c:	ec e9       	ldi	r30, 0x9C	; 156
    434e:	f1 e2       	ldi	r31, 0x21	; 33
    4350:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    4352:	11 86       	std	Z+9, r1	; 0x09
    4354:	05 c0       	rjmp	.+10     	; 0x4360 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    4356:	88 ef       	ldi	r24, 0xF8	; 248
    4358:	03 c0       	rjmp	.+6      	; 0x4360 <twi_master_transfer+0xc0>
    435a:	88 ef       	ldi	r24, 0xF8	; 248
    435c:	01 c0       	rjmp	.+2      	; 0x4360 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    435e:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    4360:	0f 90       	pop	r0
    4362:	df 91       	pop	r29
    4364:	cf 91       	pop	r28
    4366:	08 95       	ret

00004368 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    4368:	cf 93       	push	r28
    436a:	df 93       	push	r29
    436c:	1f 92       	push	r1
    436e:	1f 92       	push	r1
    4370:	cd b7       	in	r28, 0x3d	; 61
    4372:	de b7       	in	r29, 0x3e	; 62
    4374:	81 11       	cpse	r24, r1
    4376:	26 c0       	rjmp	.+76     	; 0x43c4 <udd_sleep_mode+0x5c>
    4378:	90 91 d4 22 	lds	r25, 0x22D4	; 0x8022d4 <udd_b_idle>
    437c:	99 23       	and	r25, r25
    437e:	f9 f0       	breq	.+62     	; 0x43be <udd_sleep_mode+0x56>
    4380:	90 91 9c 25 	lds	r25, 0x259C	; 0x80259c <sleepmgr_locks+0x1>
    4384:	91 11       	cpse	r25, r1
    4386:	01 c0       	rjmp	.+2      	; 0x438a <udd_sleep_mode+0x22>
    4388:	ff cf       	rjmp	.-2      	; 0x4388 <udd_sleep_mode+0x20>
    438a:	9f b7       	in	r25, 0x3f	; 63
    438c:	9a 83       	std	Y+2, r25	; 0x02
    438e:	f8 94       	cli
    4390:	2a 81       	ldd	r18, Y+2	; 0x02
    4392:	eb e9       	ldi	r30, 0x9B	; 155
    4394:	f5 e2       	ldi	r31, 0x25	; 37
    4396:	91 81       	ldd	r25, Z+1	; 0x01
    4398:	91 50       	subi	r25, 0x01	; 1
    439a:	91 83       	std	Z+1, r25	; 0x01
    439c:	2f bf       	out	0x3f, r18	; 63
    439e:	0f c0       	rjmp	.+30     	; 0x43be <udd_sleep_mode+0x56>
    43a0:	90 91 9c 25 	lds	r25, 0x259C	; 0x80259c <sleepmgr_locks+0x1>
    43a4:	9f 3f       	cpi	r25, 0xFF	; 255
    43a6:	09 f4       	brne	.+2      	; 0x43aa <udd_sleep_mode+0x42>
    43a8:	ff cf       	rjmp	.-2      	; 0x43a8 <udd_sleep_mode+0x40>
    43aa:	9f b7       	in	r25, 0x3f	; 63
    43ac:	99 83       	std	Y+1, r25	; 0x01
    43ae:	f8 94       	cli
    43b0:	29 81       	ldd	r18, Y+1	; 0x01
    43b2:	eb e9       	ldi	r30, 0x9B	; 155
    43b4:	f5 e2       	ldi	r31, 0x25	; 37
    43b6:	91 81       	ldd	r25, Z+1	; 0x01
    43b8:	9f 5f       	subi	r25, 0xFF	; 255
    43ba:	91 83       	std	Z+1, r25	; 0x01
    43bc:	2f bf       	out	0x3f, r18	; 63
    43be:	80 93 d4 22 	sts	0x22D4, r24	; 0x8022d4 <udd_b_idle>
    43c2:	05 c0       	rjmp	.+10     	; 0x43ce <udd_sleep_mode+0x66>
    43c4:	90 91 d4 22 	lds	r25, 0x22D4	; 0x8022d4 <udd_b_idle>
    43c8:	99 23       	and	r25, r25
    43ca:	51 f3       	breq	.-44     	; 0x43a0 <udd_sleep_mode+0x38>
    43cc:	f8 cf       	rjmp	.-16     	; 0x43be <udd_sleep_mode+0x56>
    43ce:	0f 90       	pop	r0
    43d0:	0f 90       	pop	r0
    43d2:	df 91       	pop	r29
    43d4:	cf 91       	pop	r28
    43d6:	08 95       	ret

000043d8 <udd_ctrl_init>:
    43d8:	0f 93       	push	r16
    43da:	e8 ec       	ldi	r30, 0xC8	; 200
    43dc:	f4 e0       	ldi	r31, 0x04	; 4
    43de:	80 81       	ld	r24, Z
    43e0:	8f 7d       	andi	r24, 0xDF	; 223
    43e2:	80 83       	st	Z, r24
    43e4:	80 81       	ld	r24, Z
    43e6:	8f 7d       	andi	r24, 0xDF	; 223
    43e8:	80 83       	st	Z, r24
    43ea:	e8 ea       	ldi	r30, 0xA8	; 168
    43ec:	f2 e2       	ldi	r31, 0x22	; 34
    43ee:	02 e0       	ldi	r16, 0x02	; 2
    43f0:	05 93       	las	Z, r16
    43f2:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <udd_sram+0x16>
    43f6:	10 92 ab 22 	sts	0x22AB, r1	; 0x8022ab <udd_sram+0x17>
    43fa:	00 e2       	ldi	r16, 0x20	; 32
    43fc:	06 93       	lac	Z, r16
    43fe:	00 e4       	ldi	r16, 0x40	; 64
    4400:	06 93       	lac	Z, r16
    4402:	e0 ea       	ldi	r30, 0xA0	; 160
    4404:	f2 e2       	ldi	r31, 0x22	; 34
    4406:	00 e4       	ldi	r16, 0x40	; 64
    4408:	06 93       	lac	Z, r16
    440a:	eb e8       	ldi	r30, 0x8B	; 139
    440c:	f5 e2       	ldi	r31, 0x25	; 37
    440e:	14 86       	std	Z+12, r1	; 0x0c
    4410:	15 86       	std	Z+13, r1	; 0x0d
    4412:	16 86       	std	Z+14, r1	; 0x0e
    4414:	17 86       	std	Z+15, r1	; 0x0f
    4416:	12 86       	std	Z+10, r1	; 0x0a
    4418:	13 86       	std	Z+11, r1	; 0x0b
    441a:	10 92 90 22 	sts	0x2290, r1	; 0x802290 <udd_ep_control_state>
    441e:	0f 91       	pop	r16
    4420:	08 95       	ret

00004422 <udd_ctrl_stall_data>:
    4422:	0f 93       	push	r16
    4424:	85 e0       	ldi	r24, 0x05	; 5
    4426:	80 93 90 22 	sts	0x2290, r24	; 0x802290 <udd_ep_control_state>
    442a:	e9 ea       	ldi	r30, 0xA9	; 169
    442c:	f2 e2       	ldi	r31, 0x22	; 34
    442e:	04 e0       	ldi	r16, 0x04	; 4
    4430:	05 93       	las	Z, r16
    4432:	e1 ea       	ldi	r30, 0xA1	; 161
    4434:	f2 e2       	ldi	r31, 0x22	; 34
    4436:	04 e0       	ldi	r16, 0x04	; 4
    4438:	05 93       	las	Z, r16
    443a:	0f 91       	pop	r16
    443c:	08 95       	ret

0000443e <udd_ctrl_send_zlp_in>:
    443e:	0f 93       	push	r16
    4440:	83 e0       	ldi	r24, 0x03	; 3
    4442:	80 93 90 22 	sts	0x2290, r24	; 0x802290 <udd_ep_control_state>
    4446:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <udd_sram+0x16>
    444a:	10 92 ab 22 	sts	0x22AB, r1	; 0x8022ab <udd_sram+0x17>
    444e:	e8 ea       	ldi	r30, 0xA8	; 168
    4450:	f2 e2       	ldi	r31, 0x22	; 34
    4452:	02 e0       	ldi	r16, 0x02	; 2
    4454:	06 93       	lac	Z, r16
    4456:	0f 91       	pop	r16
    4458:	08 95       	ret

0000445a <udd_ctrl_endofrequest>:
    445a:	e0 91 97 25 	lds	r30, 0x2597	; 0x802597 <udd_g_ctrlreq+0xc>
    445e:	f0 91 98 25 	lds	r31, 0x2598	; 0x802598 <udd_g_ctrlreq+0xd>
    4462:	30 97       	sbiw	r30, 0x00	; 0
    4464:	09 f0       	breq	.+2      	; 0x4468 <udd_ctrl_endofrequest+0xe>
    4466:	19 95       	eicall
    4468:	08 95       	ret

0000446a <udd_ctrl_in_sent>:
    446a:	0f 93       	push	r16
    446c:	cf 93       	push	r28
    446e:	df 93       	push	r29
    4470:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <udd_ep_control_state>
    4474:	83 30       	cpi	r24, 0x03	; 3
    4476:	19 f4       	brne	.+6      	; 0x447e <udd_ctrl_in_sent+0x14>
    4478:	f0 df       	rcall	.-32     	; 0x445a <udd_ctrl_endofrequest>
    447a:	ae df       	rcall	.-164    	; 0x43d8 <udd_ctrl_init>
    447c:	5e c0       	rjmp	.+188    	; 0x453a <udd_ctrl_in_sent+0xd0>
    447e:	80 91 8c 22 	lds	r24, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans>
    4482:	90 91 8d 22 	lds	r25, 0x228D	; 0x80228d <udd_ctrl_payload_nb_trans+0x1>
    4486:	c0 91 95 25 	lds	r28, 0x2595	; 0x802595 <udd_g_ctrlreq+0xa>
    448a:	d0 91 96 25 	lds	r29, 0x2596	; 0x802596 <udd_g_ctrlreq+0xb>
    448e:	c8 1b       	sub	r28, r24
    4490:	d9 0b       	sbc	r29, r25
    4492:	71 f5       	brne	.+92     	; 0x44f0 <udd_ctrl_in_sent+0x86>
    4494:	20 91 8e 22 	lds	r18, 0x228E	; 0x80228e <udd_ctrl_prev_payload_nb_trans>
    4498:	30 91 8f 22 	lds	r19, 0x228F	; 0x80228f <udd_ctrl_prev_payload_nb_trans+0x1>
    449c:	82 0f       	add	r24, r18
    449e:	93 1f       	adc	r25, r19
    44a0:	80 93 8e 22 	sts	0x228E, r24	; 0x80228e <udd_ctrl_prev_payload_nb_trans>
    44a4:	90 93 8f 22 	sts	0x228F, r25	; 0x80228f <udd_ctrl_prev_payload_nb_trans+0x1>
    44a8:	20 91 91 25 	lds	r18, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    44ac:	30 91 92 25 	lds	r19, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    44b0:	82 17       	cp	r24, r18
    44b2:	93 07       	cpc	r25, r19
    44b4:	21 f0       	breq	.+8      	; 0x44be <udd_ctrl_in_sent+0x54>
    44b6:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <b_shortpacket.5472>
    44ba:	88 23       	and	r24, r24
    44bc:	41 f0       	breq	.+16     	; 0x44ce <udd_ctrl_in_sent+0x64>
    44be:	84 e0       	ldi	r24, 0x04	; 4
    44c0:	80 93 90 22 	sts	0x2290, r24	; 0x802290 <udd_ep_control_state>
    44c4:	e0 ea       	ldi	r30, 0xA0	; 160
    44c6:	f2 e2       	ldi	r31, 0x22	; 34
    44c8:	02 e0       	ldi	r16, 0x02	; 2
    44ca:	06 93       	lac	Z, r16
    44cc:	36 c0       	rjmp	.+108    	; 0x453a <udd_ctrl_in_sent+0xd0>
    44ce:	e0 91 99 25 	lds	r30, 0x2599	; 0x802599 <udd_g_ctrlreq+0xe>
    44d2:	f0 91 9a 25 	lds	r31, 0x259A	; 0x80259a <udd_g_ctrlreq+0xf>
    44d6:	30 97       	sbiw	r30, 0x00	; 0
    44d8:	99 f0       	breq	.+38     	; 0x4500 <udd_ctrl_in_sent+0x96>
    44da:	19 95       	eicall
    44dc:	88 23       	and	r24, r24
    44de:	81 f0       	breq	.+32     	; 0x4500 <udd_ctrl_in_sent+0x96>
    44e0:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans>
    44e4:	10 92 8d 22 	sts	0x228D, r1	; 0x80228d <udd_ctrl_payload_nb_trans+0x1>
    44e8:	c0 91 95 25 	lds	r28, 0x2595	; 0x802595 <udd_g_ctrlreq+0xa>
    44ec:	d0 91 96 25 	lds	r29, 0x2596	; 0x802596 <udd_g_ctrlreq+0xb>
    44f0:	c0 34       	cpi	r28, 0x40	; 64
    44f2:	d1 05       	cpc	r29, r1
    44f4:	28 f0       	brcs	.+10     	; 0x4500 <udd_ctrl_in_sent+0x96>
    44f6:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <b_shortpacket.5472>
    44fa:	c0 e4       	ldi	r28, 0x40	; 64
    44fc:	d0 e0       	ldi	r29, 0x00	; 0
    44fe:	03 c0       	rjmp	.+6      	; 0x4506 <udd_ctrl_in_sent+0x9c>
    4500:	81 e0       	ldi	r24, 0x01	; 1
    4502:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <b_shortpacket.5472>
    4506:	e4 e9       	ldi	r30, 0x94	; 148
    4508:	f2 e2       	ldi	r31, 0x22	; 34
    450a:	c6 8b       	std	Z+22, r28	; 0x16
    450c:	d7 8b       	std	Z+23, r29	; 0x17
    450e:	80 91 8c 22 	lds	r24, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans>
    4512:	90 91 8d 22 	lds	r25, 0x228D	; 0x80228d <udd_ctrl_payload_nb_trans+0x1>
    4516:	20 91 93 25 	lds	r18, 0x2593	; 0x802593 <udd_g_ctrlreq+0x8>
    451a:	30 91 94 25 	lds	r19, 0x2594	; 0x802594 <udd_g_ctrlreq+0x9>
    451e:	28 0f       	add	r18, r24
    4520:	39 1f       	adc	r19, r25
    4522:	20 8f       	std	Z+24, r18	; 0x18
    4524:	31 8f       	std	Z+25, r19	; 0x19
    4526:	c8 0f       	add	r28, r24
    4528:	d9 1f       	adc	r29, r25
    452a:	c0 93 8c 22 	sts	0x228C, r28	; 0x80228c <udd_ctrl_payload_nb_trans>
    452e:	d0 93 8d 22 	sts	0x228D, r29	; 0x80228d <udd_ctrl_payload_nb_trans+0x1>
    4532:	e8 ea       	ldi	r30, 0xA8	; 168
    4534:	f2 e2       	ldi	r31, 0x22	; 34
    4536:	02 e0       	ldi	r16, 0x02	; 2
    4538:	06 93       	lac	Z, r16
    453a:	df 91       	pop	r29
    453c:	cf 91       	pop	r28
    453e:	0f 91       	pop	r16
    4540:	08 95       	ret

00004542 <udd_ep_get_size>:
    4542:	fc 01       	movw	r30, r24
    4544:	81 81       	ldd	r24, Z+1	; 0x01
    4546:	e8 2f       	mov	r30, r24
    4548:	e7 70       	andi	r30, 0x07	; 7
    454a:	8e 2f       	mov	r24, r30
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	fc 01       	movw	r30, r24
    4550:	31 97       	sbiw	r30, 0x01	; 1
    4552:	e7 30       	cpi	r30, 0x07	; 7
    4554:	f1 05       	cpc	r31, r1
    4556:	d8 f4       	brcc	.+54     	; 0x458e <udd_ep_get_size+0x4c>
    4558:	88 27       	eor	r24, r24
    455a:	e2 50       	subi	r30, 0x02	; 2
    455c:	ff 4f       	sbci	r31, 0xFF	; 255
    455e:	8f 4f       	sbci	r24, 0xFF	; 255
    4560:	0c 94 25 39 	jmp	0x724a	; 0x724a <__tablejump2__>
    4564:	80 e1       	ldi	r24, 0x10	; 16
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	08 95       	ret
    456a:	80 e2       	ldi	r24, 0x20	; 32
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	08 95       	ret
    4570:	80 e4       	ldi	r24, 0x40	; 64
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	08 95       	ret
    4576:	80 e8       	ldi	r24, 0x80	; 128
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	08 95       	ret
    457c:	80 e0       	ldi	r24, 0x00	; 0
    457e:	91 e0       	ldi	r25, 0x01	; 1
    4580:	08 95       	ret
    4582:	80 e0       	ldi	r24, 0x00	; 0
    4584:	92 e0       	ldi	r25, 0x02	; 2
    4586:	08 95       	ret
    4588:	8f ef       	ldi	r24, 0xFF	; 255
    458a:	93 e0       	ldi	r25, 0x03	; 3
    458c:	08 95       	ret
    458e:	88 e0       	ldi	r24, 0x08	; 8
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	08 95       	ret

00004594 <udd_ep_get_job>:
    4594:	28 2f       	mov	r18, r24
    4596:	2f 70       	andi	r18, 0x0F	; 15
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	22 0f       	add	r18, r18
    459c:	33 1f       	adc	r19, r19
    459e:	08 2e       	mov	r0, r24
    45a0:	00 0c       	add	r0, r0
    45a2:	99 0b       	sbc	r25, r25
    45a4:	88 27       	eor	r24, r24
    45a6:	99 0f       	add	r25, r25
    45a8:	88 1f       	adc	r24, r24
    45aa:	99 27       	eor	r25, r25
    45ac:	82 0f       	add	r24, r18
    45ae:	93 1f       	adc	r25, r19
    45b0:	02 97       	sbiw	r24, 0x02	; 2
    45b2:	9c 01       	movw	r18, r24
    45b4:	22 0f       	add	r18, r18
    45b6:	33 1f       	adc	r19, r19
    45b8:	22 0f       	add	r18, r18
    45ba:	33 1f       	adc	r19, r19
    45bc:	22 0f       	add	r18, r18
    45be:	33 1f       	adc	r19, r19
    45c0:	82 0f       	add	r24, r18
    45c2:	93 1f       	adc	r25, r19
    45c4:	88 5d       	subi	r24, 0xD8	; 216
    45c6:	9d 4d       	sbci	r25, 0xDD	; 221
    45c8:	08 95       	ret

000045ca <udd_ctrl_interrupt_tc_setup>:
    45ca:	0f 93       	push	r16
    45cc:	cf 93       	push	r28
    45ce:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    45d2:	80 ff       	sbrs	r24, 0
    45d4:	65 c0       	rjmp	.+202    	; 0x46a0 <udd_ctrl_interrupt_tc_setup+0xd6>
    45d6:	81 e0       	ldi	r24, 0x01	; 1
    45d8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    45dc:	e0 ea       	ldi	r30, 0xA0	; 160
    45de:	f2 e2       	ldi	r31, 0x22	; 34
    45e0:	00 e8       	ldi	r16, 0x80	; 128
    45e2:	06 93       	lac	Z, r16
    45e4:	e8 ea       	ldi	r30, 0xA8	; 168
    45e6:	f2 e2       	ldi	r31, 0x22	; 34
    45e8:	00 e8       	ldi	r16, 0x80	; 128
    45ea:	06 93       	lac	Z, r16
    45ec:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    45f0:	e0 ea       	ldi	r30, 0xA0	; 160
    45f2:	f2 e2       	ldi	r31, 0x22	; 34
    45f4:	00 e1       	ldi	r16, 0x10	; 16
    45f6:	06 93       	lac	Z, r16
    45f8:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <udd_ep_control_state>
    45fc:	88 23       	and	r24, r24
    45fe:	29 f0       	breq	.+10     	; 0x460a <udd_ctrl_interrupt_tc_setup+0x40>
    4600:	83 50       	subi	r24, 0x03	; 3
    4602:	82 30       	cpi	r24, 0x02	; 2
    4604:	08 f4       	brcc	.+2      	; 0x4608 <udd_ctrl_interrupt_tc_setup+0x3e>
    4606:	29 df       	rcall	.-430    	; 0x445a <udd_ctrl_endofrequest>
    4608:	e7 de       	rcall	.-562    	; 0x43d8 <udd_ctrl_init>
    460a:	80 91 a2 22 	lds	r24, 0x22A2	; 0x8022a2 <udd_sram+0xe>
    460e:	90 91 a3 22 	lds	r25, 0x22A3	; 0x8022a3 <udd_sram+0xf>
    4612:	08 97       	sbiw	r24, 0x08	; 8
    4614:	09 f0       	breq	.+2      	; 0x4618 <udd_ctrl_interrupt_tc_setup+0x4e>
    4616:	46 c0       	rjmp	.+140    	; 0x46a4 <udd_ctrl_interrupt_tc_setup+0xda>
    4618:	88 e0       	ldi	r24, 0x08	; 8
    461a:	ec e4       	ldi	r30, 0x4C	; 76
    461c:	f2 e2       	ldi	r31, 0x22	; 34
    461e:	ab e8       	ldi	r26, 0x8B	; 139
    4620:	b5 e2       	ldi	r27, 0x25	; 37
    4622:	01 90       	ld	r0, Z+
    4624:	0d 92       	st	X+, r0
    4626:	8a 95       	dec	r24
    4628:	e1 f7       	brne	.-8      	; 0x4622 <udd_ctrl_interrupt_tc_setup+0x58>
    462a:	e8 ec       	ldi	r30, 0xC8	; 200
    462c:	f4 e0       	ldi	r31, 0x04	; 4
    462e:	80 81       	ld	r24, Z
    4630:	80 62       	ori	r24, 0x20	; 32
    4632:	80 83       	st	Z, r24
    4634:	80 81       	ld	r24, Z
    4636:	80 62       	ori	r24, 0x20	; 32
    4638:	80 83       	st	Z, r24
    463a:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <udc_process_setup>
    463e:	c8 2f       	mov	r28, r24
    4640:	81 11       	cpse	r24, r1
    4642:	03 c0       	rjmp	.+6      	; 0x464a <udd_ctrl_interrupt_tc_setup+0x80>
    4644:	ee de       	rcall	.-548    	; 0x4422 <udd_ctrl_stall_data>
    4646:	c1 e0       	ldi	r28, 0x01	; 1
    4648:	2e c0       	rjmp	.+92     	; 0x46a6 <udd_ctrl_interrupt_tc_setup+0xdc>
    464a:	80 91 8b 25 	lds	r24, 0x258B	; 0x80258b <udd_g_ctrlreq>
    464e:	88 23       	and	r24, r24
    4650:	6c f4       	brge	.+26     	; 0x466c <udd_ctrl_interrupt_tc_setup+0xa2>
    4652:	10 92 8e 22 	sts	0x228E, r1	; 0x80228e <udd_ctrl_prev_payload_nb_trans>
    4656:	10 92 8f 22 	sts	0x228F, r1	; 0x80228f <udd_ctrl_prev_payload_nb_trans+0x1>
    465a:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans>
    465e:	10 92 8d 22 	sts	0x228D, r1	; 0x80228d <udd_ctrl_payload_nb_trans+0x1>
    4662:	82 e0       	ldi	r24, 0x02	; 2
    4664:	80 93 90 22 	sts	0x2290, r24	; 0x802290 <udd_ep_control_state>
    4668:	00 df       	rcall	.-512    	; 0x446a <udd_ctrl_in_sent>
    466a:	1d c0       	rjmp	.+58     	; 0x46a6 <udd_ctrl_interrupt_tc_setup+0xdc>
    466c:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    4670:	90 91 92 25 	lds	r25, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    4674:	89 2b       	or	r24, r25
    4676:	11 f4       	brne	.+4      	; 0x467c <udd_ctrl_interrupt_tc_setup+0xb2>
    4678:	e2 de       	rcall	.-572    	; 0x443e <udd_ctrl_send_zlp_in>
    467a:	15 c0       	rjmp	.+42     	; 0x46a6 <udd_ctrl_interrupt_tc_setup+0xdc>
    467c:	10 92 8e 22 	sts	0x228E, r1	; 0x80228e <udd_ctrl_prev_payload_nb_trans>
    4680:	10 92 8f 22 	sts	0x228F, r1	; 0x80228f <udd_ctrl_prev_payload_nb_trans+0x1>
    4684:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans>
    4688:	10 92 8d 22 	sts	0x228D, r1	; 0x80228d <udd_ctrl_payload_nb_trans+0x1>
    468c:	81 e0       	ldi	r24, 0x01	; 1
    468e:	80 93 90 22 	sts	0x2290, r24	; 0x802290 <udd_ep_control_state>
    4692:	e0 ea       	ldi	r30, 0xA0	; 160
    4694:	f2 e2       	ldi	r31, 0x22	; 34
    4696:	02 e0       	ldi	r16, 0x02	; 2
    4698:	06 93       	lac	Z, r16
    469a:	00 e2       	ldi	r16, 0x20	; 32
    469c:	06 93       	lac	Z, r16
    469e:	03 c0       	rjmp	.+6      	; 0x46a6 <udd_ctrl_interrupt_tc_setup+0xdc>
    46a0:	c0 e0       	ldi	r28, 0x00	; 0
    46a2:	01 c0       	rjmp	.+2      	; 0x46a6 <udd_ctrl_interrupt_tc_setup+0xdc>
    46a4:	c1 e0       	ldi	r28, 0x01	; 1
    46a6:	8c 2f       	mov	r24, r28
    46a8:	cf 91       	pop	r28
    46aa:	0f 91       	pop	r16
    46ac:	08 95       	ret

000046ae <udd_ep_trans_complet>:
    46ae:	8f 92       	push	r8
    46b0:	9f 92       	push	r9
    46b2:	af 92       	push	r10
    46b4:	bf 92       	push	r11
    46b6:	df 92       	push	r13
    46b8:	ef 92       	push	r14
    46ba:	ff 92       	push	r15
    46bc:	0f 93       	push	r16
    46be:	1f 93       	push	r17
    46c0:	cf 93       	push	r28
    46c2:	df 93       	push	r29
    46c4:	d8 2e       	mov	r13, r24
    46c6:	66 df       	rcall	.-308    	; 0x4594 <udd_ep_get_job>
    46c8:	8c 01       	movw	r16, r24
    46ca:	cd 2d       	mov	r28, r13
    46cc:	cf 70       	andi	r28, 0x0F	; 15
    46ce:	d0 e0       	ldi	r29, 0x00	; 0
    46d0:	ce 01       	movw	r24, r28
    46d2:	88 0f       	add	r24, r24
    46d4:	99 1f       	adc	r25, r25
    46d6:	cd 2d       	mov	r28, r13
    46d8:	0d 2c       	mov	r0, r13
    46da:	00 0c       	add	r0, r0
    46dc:	dd 0b       	sbc	r29, r29
    46de:	cc 27       	eor	r28, r28
    46e0:	dd 0f       	add	r29, r29
    46e2:	cc 1f       	adc	r28, r28
    46e4:	dd 27       	eor	r29, r29
    46e6:	c8 0f       	add	r28, r24
    46e8:	d9 1f       	adc	r29, r25
    46ea:	ce 01       	movw	r24, r28
    46ec:	88 0f       	add	r24, r24
    46ee:	99 1f       	adc	r25, r25
    46f0:	88 0f       	add	r24, r24
    46f2:	99 1f       	adc	r25, r25
    46f4:	88 0f       	add	r24, r24
    46f6:	99 1f       	adc	r25, r25
    46f8:	9c 01       	movw	r18, r24
    46fa:	20 56       	subi	r18, 0x60	; 96
    46fc:	3d 4d       	sbci	r19, 0xDD	; 221
    46fe:	79 01       	movw	r14, r18
    4700:	c9 01       	movw	r24, r18
    4702:	1f df       	rcall	.-450    	; 0x4542 <udd_ep_get_size>
    4704:	4c 01       	movw	r8, r24
    4706:	dd 20       	and	r13, r13
    4708:	0c f0       	brlt	.+2      	; 0x470c <udd_ep_trans_complet+0x5e>
    470a:	7b c0       	rjmp	.+246    	; 0x4802 <udd_ep_trans_complet+0x154>
    470c:	fe 01       	movw	r30, r28
    470e:	ee 0f       	add	r30, r30
    4710:	ff 1f       	adc	r31, r31
    4712:	ee 0f       	add	r30, r30
    4714:	ff 1f       	adc	r31, r31
    4716:	ee 0f       	add	r30, r30
    4718:	ff 1f       	adc	r31, r31
    471a:	ec 56       	subi	r30, 0x6C	; 108
    471c:	fd 4d       	sbci	r31, 0xDD	; 221
    471e:	22 89       	ldd	r18, Z+18	; 0x12
    4720:	33 89       	ldd	r19, Z+19	; 0x13
    4722:	d8 01       	movw	r26, r16
    4724:	15 96       	adiw	r26, 0x05	; 5
    4726:	8d 91       	ld	r24, X+
    4728:	9c 91       	ld	r25, X
    472a:	16 97       	sbiw	r26, 0x06	; 6
    472c:	82 0f       	add	r24, r18
    472e:	93 1f       	adc	r25, r19
    4730:	15 96       	adiw	r26, 0x05	; 5
    4732:	8d 93       	st	X+, r24
    4734:	9c 93       	st	X, r25
    4736:	16 97       	sbiw	r26, 0x06	; 6
    4738:	13 96       	adiw	r26, 0x03	; 3
    473a:	2d 91       	ld	r18, X+
    473c:	3c 91       	ld	r19, X
    473e:	14 97       	sbiw	r26, 0x04	; 4
    4740:	82 17       	cp	r24, r18
    4742:	93 07       	cpc	r25, r19
    4744:	09 f4       	brne	.+2      	; 0x4748 <udd_ep_trans_complet+0x9a>
    4746:	47 c0       	rjmp	.+142    	; 0x47d6 <udd_ep_trans_complet+0x128>
    4748:	28 1b       	sub	r18, r24
    474a:	39 0b       	sbc	r19, r25
    474c:	21 15       	cp	r18, r1
    474e:	b4 e0       	ldi	r27, 0x04	; 4
    4750:	3b 07       	cpc	r19, r27
    4752:	40 f0       	brcs	.+16     	; 0x4764 <udd_ep_trans_complet+0xb6>
    4754:	2f ef       	ldi	r18, 0xFF	; 255
    4756:	33 e0       	ldi	r19, 0x03	; 3
    4758:	c9 01       	movw	r24, r18
    475a:	b4 01       	movw	r22, r8
    475c:	0e 94 ef 38 	call	0x71de	; 0x71de <__udivmodhi4>
    4760:	28 1b       	sub	r18, r24
    4762:	39 0b       	sbc	r19, r25
    4764:	f8 01       	movw	r30, r16
    4766:	80 81       	ld	r24, Z
    4768:	81 ff       	sbrs	r24, 1
    476a:	0a c0       	rjmp	.+20     	; 0x4780 <udd_ep_trans_complet+0xd2>
    476c:	c9 01       	movw	r24, r18
    476e:	b4 01       	movw	r22, r8
    4770:	0e 94 ef 38 	call	0x71de	; 0x71de <__udivmodhi4>
    4774:	41 e0       	ldi	r20, 0x01	; 1
    4776:	89 2b       	or	r24, r25
    4778:	09 f0       	breq	.+2      	; 0x477c <udd_ep_trans_complet+0xce>
    477a:	40 e0       	ldi	r20, 0x00	; 0
    477c:	84 2f       	mov	r24, r20
    477e:	01 c0       	rjmp	.+2      	; 0x4782 <udd_ep_trans_complet+0xd4>
    4780:	80 e0       	ldi	r24, 0x00	; 0
    4782:	d8 01       	movw	r26, r16
    4784:	9c 91       	ld	r25, X
    4786:	80 fb       	bst	r24, 0
    4788:	91 f9       	bld	r25, 1
    478a:	9c 93       	st	X, r25
    478c:	fe 01       	movw	r30, r28
    478e:	ee 0f       	add	r30, r30
    4790:	ff 1f       	adc	r31, r31
    4792:	ee 0f       	add	r30, r30
    4794:	ff 1f       	adc	r31, r31
    4796:	ee 0f       	add	r30, r30
    4798:	ff 1f       	adc	r31, r31
    479a:	ec 56       	subi	r30, 0x6C	; 108
    479c:	fd 4d       	sbci	r31, 0xDD	; 221
    479e:	12 8a       	std	Z+18, r1	; 0x12
    47a0:	13 8a       	std	Z+19, r1	; 0x13
    47a2:	26 87       	std	Z+14, r18	; 0x0e
    47a4:	37 87       	std	Z+15, r19	; 0x0f
    47a6:	11 96       	adiw	r26, 0x01	; 1
    47a8:	2d 91       	ld	r18, X+
    47aa:	3c 91       	ld	r19, X
    47ac:	12 97       	sbiw	r26, 0x02	; 2
    47ae:	15 96       	adiw	r26, 0x05	; 5
    47b0:	8d 91       	ld	r24, X+
    47b2:	9c 91       	ld	r25, X
    47b4:	16 97       	sbiw	r26, 0x06	; 6
    47b6:	82 0f       	add	r24, r18
    47b8:	93 1f       	adc	r25, r19
    47ba:	cc 0f       	add	r28, r28
    47bc:	dd 1f       	adc	r29, r29
    47be:	cc 0f       	add	r28, r28
    47c0:	dd 1f       	adc	r29, r29
    47c2:	cc 0f       	add	r28, r28
    47c4:	dd 1f       	adc	r29, r29
    47c6:	cc 55       	subi	r28, 0x5C	; 92
    47c8:	dd 4d       	sbci	r29, 0xDD	; 221
    47ca:	88 83       	st	Y, r24
    47cc:	99 83       	std	Y+1, r25	; 0x01
    47ce:	f7 01       	movw	r30, r14
    47d0:	02 e0       	ldi	r16, 0x02	; 2
    47d2:	06 93       	lac	Z, r16
    47d4:	e4 c0       	rjmp	.+456    	; 0x499e <udd_ep_trans_complet+0x2f0>
    47d6:	d8 01       	movw	r26, r16
    47d8:	8c 91       	ld	r24, X
    47da:	81 ff       	sbrs	r24, 1
    47dc:	cd c0       	rjmp	.+410    	; 0x4978 <udd_ep_trans_complet+0x2ca>
    47de:	8d 7f       	andi	r24, 0xFD	; 253
    47e0:	8c 93       	st	X, r24
    47e2:	cc 0f       	add	r28, r28
    47e4:	dd 1f       	adc	r29, r29
    47e6:	cc 0f       	add	r28, r28
    47e8:	dd 1f       	adc	r29, r29
    47ea:	cc 0f       	add	r28, r28
    47ec:	dd 1f       	adc	r29, r29
    47ee:	cc 56       	subi	r28, 0x6C	; 108
    47f0:	dd 4d       	sbci	r29, 0xDD	; 221
    47f2:	1a 8a       	std	Y+18, r1	; 0x12
    47f4:	1b 8a       	std	Y+19, r1	; 0x13
    47f6:	1e 86       	std	Y+14, r1	; 0x0e
    47f8:	1f 86       	std	Y+15, r1	; 0x0f
    47fa:	f7 01       	movw	r30, r14
    47fc:	02 e0       	ldi	r16, 0x02	; 2
    47fe:	06 93       	lac	Z, r16
    4800:	ce c0       	rjmp	.+412    	; 0x499e <udd_ep_trans_complet+0x2f0>
    4802:	fe 01       	movw	r30, r28
    4804:	ee 0f       	add	r30, r30
    4806:	ff 1f       	adc	r31, r31
    4808:	ee 0f       	add	r30, r30
    480a:	ff 1f       	adc	r31, r31
    480c:	ee 0f       	add	r30, r30
    480e:	ff 1f       	adc	r31, r31
    4810:	ec 56       	subi	r30, 0x6C	; 108
    4812:	fd 4d       	sbci	r31, 0xDD	; 221
    4814:	a6 84       	ldd	r10, Z+14	; 0x0e
    4816:	b7 84       	ldd	r11, Z+15	; 0x0f
    4818:	d8 01       	movw	r26, r16
    481a:	8c 91       	ld	r24, X
    481c:	82 ff       	sbrs	r24, 2
    481e:	1b c0       	rjmp	.+54     	; 0x4856 <udd_ep_trans_complet+0x1a8>
    4820:	11 96       	adiw	r26, 0x01	; 1
    4822:	ed 91       	ld	r30, X+
    4824:	fc 91       	ld	r31, X
    4826:	12 97       	sbiw	r26, 0x02	; 2
    4828:	15 96       	adiw	r26, 0x05	; 5
    482a:	2d 91       	ld	r18, X+
    482c:	3c 91       	ld	r19, X
    482e:	16 97       	sbiw	r26, 0x06	; 6
    4830:	13 96       	adiw	r26, 0x03	; 3
    4832:	8d 91       	ld	r24, X+
    4834:	9c 91       	ld	r25, X
    4836:	14 97       	sbiw	r26, 0x04	; 4
    4838:	b4 01       	movw	r22, r8
    483a:	0e 94 ef 38 	call	0x71de	; 0x71de <__udivmodhi4>
    483e:	b0 e4       	ldi	r27, 0x40	; 64
    4840:	db 9e       	mul	r13, r27
    4842:	b0 01       	movw	r22, r0
    4844:	11 24       	eor	r1, r1
    4846:	68 59       	subi	r22, 0x98	; 152
    4848:	7e 4d       	sbci	r23, 0xDE	; 222
    484a:	ac 01       	movw	r20, r24
    484c:	cf 01       	movw	r24, r30
    484e:	82 0f       	add	r24, r18
    4850:	93 1f       	adc	r25, r19
    4852:	0e 94 26 3b 	call	0x764c	; 0x764c <memcpy>
    4856:	f8 01       	movw	r30, r16
    4858:	25 81       	ldd	r18, Z+5	; 0x05
    485a:	36 81       	ldd	r19, Z+6	; 0x06
    485c:	2a 0d       	add	r18, r10
    485e:	3b 1d       	adc	r19, r11
    4860:	25 83       	std	Z+5, r18	; 0x05
    4862:	36 83       	std	Z+6, r19	; 0x06
    4864:	83 81       	ldd	r24, Z+3	; 0x03
    4866:	94 81       	ldd	r25, Z+4	; 0x04
    4868:	82 17       	cp	r24, r18
    486a:	93 07       	cpc	r25, r19
    486c:	68 f4       	brcc	.+26     	; 0x4888 <udd_ep_trans_complet+0x1da>
    486e:	85 83       	std	Z+5, r24	; 0x05
    4870:	96 83       	std	Z+6, r25	; 0x06
    4872:	cc 0f       	add	r28, r28
    4874:	dd 1f       	adc	r29, r29
    4876:	cc 0f       	add	r28, r28
    4878:	dd 1f       	adc	r29, r29
    487a:	cc 0f       	add	r28, r28
    487c:	dd 1f       	adc	r29, r29
    487e:	cc 56       	subi	r28, 0x6C	; 108
    4880:	dd 4d       	sbci	r29, 0xDD	; 221
    4882:	8a 89       	ldd	r24, Y+18	; 0x12
    4884:	9b 89       	ldd	r25, Y+19	; 0x13
    4886:	78 c0       	rjmp	.+240    	; 0x4978 <udd_ep_trans_complet+0x2ca>
    4888:	fe 01       	movw	r30, r28
    488a:	ee 0f       	add	r30, r30
    488c:	ff 1f       	adc	r31, r31
    488e:	ee 0f       	add	r30, r30
    4890:	ff 1f       	adc	r31, r31
    4892:	ee 0f       	add	r30, r30
    4894:	ff 1f       	adc	r31, r31
    4896:	ec 56       	subi	r30, 0x6C	; 108
    4898:	fd 4d       	sbci	r31, 0xDD	; 221
    489a:	42 89       	ldd	r20, Z+18	; 0x12
    489c:	53 89       	ldd	r21, Z+19	; 0x13
    489e:	a4 16       	cp	r10, r20
    48a0:	b5 06       	cpc	r11, r21
    48a2:	09 f0       	breq	.+2      	; 0x48a6 <udd_ep_trans_complet+0x1f8>
    48a4:	69 c0       	rjmp	.+210    	; 0x4978 <udd_ep_trans_complet+0x2ca>
    48a6:	28 17       	cp	r18, r24
    48a8:	39 07       	cpc	r19, r25
    48aa:	09 f4       	brne	.+2      	; 0x48ae <udd_ep_trans_complet+0x200>
    48ac:	65 c0       	rjmp	.+202    	; 0x4978 <udd_ep_trans_complet+0x2ca>
    48ae:	ac 01       	movw	r20, r24
    48b0:	42 1b       	sub	r20, r18
    48b2:	53 0b       	sbc	r21, r19
    48b4:	9a 01       	movw	r18, r20
    48b6:	21 15       	cp	r18, r1
    48b8:	54 e0       	ldi	r21, 0x04	; 4
    48ba:	35 07       	cpc	r19, r21
    48bc:	48 f0       	brcs	.+18     	; 0x48d0 <udd_ep_trans_complet+0x222>
    48be:	2f ef       	ldi	r18, 0xFF	; 255
    48c0:	33 e0       	ldi	r19, 0x03	; 3
    48c2:	c9 01       	movw	r24, r18
    48c4:	b4 01       	movw	r22, r8
    48c6:	0e 94 ef 38 	call	0x71de	; 0x71de <__udivmodhi4>
    48ca:	28 1b       	sub	r18, r24
    48cc:	39 0b       	sbc	r19, r25
    48ce:	06 c0       	rjmp	.+12     	; 0x48dc <udd_ep_trans_complet+0x22e>
    48d0:	c9 01       	movw	r24, r18
    48d2:	b4 01       	movw	r22, r8
    48d4:	0e 94 ef 38 	call	0x71de	; 0x71de <__udivmodhi4>
    48d8:	28 1b       	sub	r18, r24
    48da:	39 0b       	sbc	r19, r25
    48dc:	fe 01       	movw	r30, r28
    48de:	ee 0f       	add	r30, r30
    48e0:	ff 1f       	adc	r31, r31
    48e2:	ee 0f       	add	r30, r30
    48e4:	ff 1f       	adc	r31, r31
    48e6:	ee 0f       	add	r30, r30
    48e8:	ff 1f       	adc	r31, r31
    48ea:	ec 56       	subi	r30, 0x6C	; 108
    48ec:	fd 4d       	sbci	r31, 0xDD	; 221
    48ee:	16 86       	std	Z+14, r1	; 0x0e
    48f0:	17 86       	std	Z+15, r1	; 0x0f
    48f2:	28 15       	cp	r18, r8
    48f4:	39 05       	cpc	r19, r9
    48f6:	00 f5       	brcc	.+64     	; 0x4938 <udd_ep_trans_complet+0x28a>
    48f8:	d8 01       	movw	r26, r16
    48fa:	8c 91       	ld	r24, X
    48fc:	84 60       	ori	r24, 0x04	; 4
    48fe:	8c 93       	st	X, r24
    4900:	b0 e4       	ldi	r27, 0x40	; 64
    4902:	db 9e       	mul	r13, r27
    4904:	c0 01       	movw	r24, r0
    4906:	11 24       	eor	r1, r1
    4908:	88 59       	subi	r24, 0x98	; 152
    490a:	9e 4d       	sbci	r25, 0xDE	; 222
    490c:	fe 01       	movw	r30, r28
    490e:	ee 0f       	add	r30, r30
    4910:	ff 1f       	adc	r31, r31
    4912:	ee 0f       	add	r30, r30
    4914:	ff 1f       	adc	r31, r31
    4916:	ee 0f       	add	r30, r30
    4918:	ff 1f       	adc	r31, r31
    491a:	ec 55       	subi	r30, 0x5C	; 92
    491c:	fd 4d       	sbci	r31, 0xDD	; 221
    491e:	80 83       	st	Z, r24
    4920:	91 83       	std	Z+1, r25	; 0x01
    4922:	cc 0f       	add	r28, r28
    4924:	dd 1f       	adc	r29, r29
    4926:	cc 0f       	add	r28, r28
    4928:	dd 1f       	adc	r29, r29
    492a:	cc 0f       	add	r28, r28
    492c:	dd 1f       	adc	r29, r29
    492e:	cc 56       	subi	r28, 0x6C	; 108
    4930:	dd 4d       	sbci	r29, 0xDD	; 221
    4932:	8a 8a       	std	Y+18, r8	; 0x12
    4934:	9b 8a       	std	Y+19, r9	; 0x13
    4936:	1c c0       	rjmp	.+56     	; 0x4970 <udd_ep_trans_complet+0x2c2>
    4938:	f8 01       	movw	r30, r16
    493a:	41 81       	ldd	r20, Z+1	; 0x01
    493c:	52 81       	ldd	r21, Z+2	; 0x02
    493e:	85 81       	ldd	r24, Z+5	; 0x05
    4940:	96 81       	ldd	r25, Z+6	; 0x06
    4942:	84 0f       	add	r24, r20
    4944:	95 1f       	adc	r25, r21
    4946:	fe 01       	movw	r30, r28
    4948:	ee 0f       	add	r30, r30
    494a:	ff 1f       	adc	r31, r31
    494c:	ee 0f       	add	r30, r30
    494e:	ff 1f       	adc	r31, r31
    4950:	ee 0f       	add	r30, r30
    4952:	ff 1f       	adc	r31, r31
    4954:	ec 55       	subi	r30, 0x5C	; 92
    4956:	fd 4d       	sbci	r31, 0xDD	; 221
    4958:	80 83       	st	Z, r24
    495a:	91 83       	std	Z+1, r25	; 0x01
    495c:	cc 0f       	add	r28, r28
    495e:	dd 1f       	adc	r29, r29
    4960:	cc 0f       	add	r28, r28
    4962:	dd 1f       	adc	r29, r29
    4964:	cc 0f       	add	r28, r28
    4966:	dd 1f       	adc	r29, r29
    4968:	cc 56       	subi	r28, 0x6C	; 108
    496a:	dd 4d       	sbci	r29, 0xDD	; 221
    496c:	2a 8b       	std	Y+18, r18	; 0x12
    496e:	3b 8b       	std	Y+19, r19	; 0x13
    4970:	f7 01       	movw	r30, r14
    4972:	02 e0       	ldi	r16, 0x02	; 2
    4974:	06 93       	lac	Z, r16
    4976:	13 c0       	rjmp	.+38     	; 0x499e <udd_ep_trans_complet+0x2f0>
    4978:	d8 01       	movw	r26, r16
    497a:	8c 91       	ld	r24, X
    497c:	80 ff       	sbrs	r24, 0
    497e:	0f c0       	rjmp	.+30     	; 0x499e <udd_ep_trans_complet+0x2f0>
    4980:	8e 7f       	andi	r24, 0xFE	; 254
    4982:	8c 93       	st	X, r24
    4984:	17 96       	adiw	r26, 0x07	; 7
    4986:	ed 91       	ld	r30, X+
    4988:	fc 91       	ld	r31, X
    498a:	18 97       	sbiw	r26, 0x08	; 8
    498c:	30 97       	sbiw	r30, 0x00	; 0
    498e:	39 f0       	breq	.+14     	; 0x499e <udd_ep_trans_complet+0x2f0>
    4990:	15 96       	adiw	r26, 0x05	; 5
    4992:	6d 91       	ld	r22, X+
    4994:	7c 91       	ld	r23, X
    4996:	16 97       	sbiw	r26, 0x06	; 6
    4998:	4d 2d       	mov	r20, r13
    499a:	80 e0       	ldi	r24, 0x00	; 0
    499c:	19 95       	eicall
    499e:	df 91       	pop	r29
    49a0:	cf 91       	pop	r28
    49a2:	1f 91       	pop	r17
    49a4:	0f 91       	pop	r16
    49a6:	ff 90       	pop	r15
    49a8:	ef 90       	pop	r14
    49aa:	df 90       	pop	r13
    49ac:	bf 90       	pop	r11
    49ae:	af 90       	pop	r10
    49b0:	9f 90       	pop	r9
    49b2:	8f 90       	pop	r8
    49b4:	08 95       	ret

000049b6 <udd_attach>:
    49b6:	1f 93       	push	r17
    49b8:	cf 93       	push	r28
    49ba:	df 93       	push	r29
    49bc:	1f 92       	push	r1
    49be:	cd b7       	in	r28, 0x3d	; 61
    49c0:	de b7       	in	r29, 0x3e	; 62
    49c2:	8f b7       	in	r24, 0x3f	; 63
    49c4:	89 83       	std	Y+1, r24	; 0x01
    49c6:	f8 94       	cli
    49c8:	19 81       	ldd	r17, Y+1	; 0x01
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	cd dc       	rcall	.-1638   	; 0x4368 <udd_sleep_mode>
    49ce:	ea ec       	ldi	r30, 0xCA	; 202
    49d0:	f4 e0       	ldi	r31, 0x04	; 4
    49d2:	80 e4       	ldi	r24, 0x40	; 64
    49d4:	80 83       	st	Z, r24
    49d6:	80 e2       	ldi	r24, 0x20	; 32
    49d8:	80 83       	st	Z, r24
    49da:	e1 ec       	ldi	r30, 0xC1	; 193
    49dc:	f4 e0       	ldi	r31, 0x04	; 4
    49de:	80 81       	ld	r24, Z
    49e0:	81 60       	ori	r24, 0x01	; 1
    49e2:	80 83       	st	Z, r24
    49e4:	a9 ec       	ldi	r26, 0xC9	; 201
    49e6:	b4 e0       	ldi	r27, 0x04	; 4
    49e8:	8c 91       	ld	r24, X
    49ea:	82 60       	ori	r24, 0x02	; 2
    49ec:	8c 93       	st	X, r24
    49ee:	e8 ec       	ldi	r30, 0xC8	; 200
    49f0:	f4 e0       	ldi	r31, 0x04	; 4
    49f2:	80 81       	ld	r24, Z
    49f4:	80 64       	ori	r24, 0x40	; 64
    49f6:	80 83       	st	Z, r24
    49f8:	8c 91       	ld	r24, X
    49fa:	81 60       	ori	r24, 0x01	; 1
    49fc:	8c 93       	st	X, r24
    49fe:	80 81       	ld	r24, Z
    4a00:	80 68       	ori	r24, 0x80	; 128
    4a02:	80 83       	st	Z, r24
    4a04:	1f bf       	out	0x3f, r17	; 63
    4a06:	0f 90       	pop	r0
    4a08:	df 91       	pop	r29
    4a0a:	cf 91       	pop	r28
    4a0c:	1f 91       	pop	r17
    4a0e:	08 95       	ret

00004a10 <udd_enable>:
    4a10:	0f 93       	push	r16
    4a12:	1f 93       	push	r17
    4a14:	cf 93       	push	r28
    4a16:	df 93       	push	r29
    4a18:	1f 92       	push	r1
    4a1a:	1f 92       	push	r1
    4a1c:	cd b7       	in	r28, 0x3d	; 61
    4a1e:	de b7       	in	r29, 0x3e	; 62
    4a20:	00 e6       	ldi	r16, 0x60	; 96
    4a22:	10 e0       	ldi	r17, 0x00	; 0
    4a24:	f8 01       	movw	r30, r16
    4a26:	10 82       	st	Z, r1
    4a28:	80 e3       	ldi	r24, 0x30	; 48
    4a2a:	0e 94 02 31 	call	0x6204	; 0x6204 <sysclk_enable_usb>
    4a2e:	e0 ec       	ldi	r30, 0xC0	; 192
    4a30:	f4 e0       	ldi	r31, 0x04	; 4
    4a32:	80 81       	ld	r24, Z
    4a34:	80 64       	ori	r24, 0x40	; 64
    4a36:	80 83       	st	Z, r24
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	f8 01       	movw	r30, r16
    4a3c:	80 83       	st	Z, r24
    4a3e:	8f b7       	in	r24, 0x3f	; 63
    4a40:	8a 83       	std	Y+2, r24	; 0x02
    4a42:	f8 94       	cli
    4a44:	1a 81       	ldd	r17, Y+2	; 0x02
    4a46:	e4 e9       	ldi	r30, 0x94	; 148
    4a48:	f2 e2       	ldi	r31, 0x22	; 34
    4a4a:	15 86       	std	Z+13, r1	; 0x0d
    4a4c:	15 8a       	std	Z+21, r1	; 0x15
    4a4e:	15 8e       	std	Z+29, r1	; 0x1d
    4a50:	15 a2       	std	Z+37, r1	; 0x25
    4a52:	15 a6       	std	Z+45, r1	; 0x2d
    4a54:	15 aa       	std	Z+53, r1	; 0x35
    4a56:	e8 e2       	ldi	r30, 0x28	; 40
    4a58:	f2 e2       	ldi	r31, 0x22	; 34
    4a5a:	80 81       	ld	r24, Z
    4a5c:	8e 7f       	andi	r24, 0xFE	; 254
    4a5e:	80 83       	st	Z, r24
    4a60:	e1 e3       	ldi	r30, 0x31	; 49
    4a62:	f2 e2       	ldi	r31, 0x22	; 34
    4a64:	80 81       	ld	r24, Z
    4a66:	8e 7f       	andi	r24, 0xFE	; 254
    4a68:	80 83       	st	Z, r24
    4a6a:	ea e3       	ldi	r30, 0x3A	; 58
    4a6c:	f2 e2       	ldi	r31, 0x22	; 34
    4a6e:	80 81       	ld	r24, Z
    4a70:	8e 7f       	andi	r24, 0xFE	; 254
    4a72:	80 83       	st	Z, r24
    4a74:	e3 e4       	ldi	r30, 0x43	; 67
    4a76:	f2 e2       	ldi	r31, 0x22	; 34
    4a78:	80 81       	ld	r24, Z
    4a7a:	8e 7f       	andi	r24, 0xFE	; 254
    4a7c:	80 83       	st	Z, r24
    4a7e:	6a e1       	ldi	r22, 0x1A	; 26
    4a80:	70 e0       	ldi	r23, 0x00	; 0
    4a82:	82 e0       	ldi	r24, 0x02	; 2
    4a84:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
    4a88:	8f 3f       	cpi	r24, 0xFF	; 255
    4a8a:	19 f0       	breq	.+6      	; 0x4a92 <udd_enable+0x82>
    4a8c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4a90:	03 c0       	rjmp	.+6      	; 0x4a98 <udd_enable+0x88>
    4a92:	8f e1       	ldi	r24, 0x1F	; 31
    4a94:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4a98:	6b e1       	ldi	r22, 0x1B	; 27
    4a9a:	70 e0       	ldi	r23, 0x00	; 0
    4a9c:	82 e0       	ldi	r24, 0x02	; 2
    4a9e:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
    4aa2:	8f 3f       	cpi	r24, 0xFF	; 255
    4aa4:	19 f0       	breq	.+6      	; 0x4aac <udd_enable+0x9c>
    4aa6:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    4aaa:	03 c0       	rjmp	.+6      	; 0x4ab2 <udd_enable+0xa2>
    4aac:	8f e1       	ldi	r24, 0x1F	; 31
    4aae:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    4ab2:	e0 ec       	ldi	r30, 0xC0	; 192
    4ab4:	f4 e0       	ldi	r31, 0x04	; 4
    4ab6:	80 81       	ld	r24, Z
    4ab8:	82 60       	ori	r24, 0x02	; 2
    4aba:	80 83       	st	Z, r24
    4abc:	80 81       	ld	r24, Z
    4abe:	80 68       	ori	r24, 0x80	; 128
    4ac0:	80 83       	st	Z, r24
    4ac2:	80 81       	ld	r24, Z
    4ac4:	80 61       	ori	r24, 0x10	; 16
    4ac6:	80 83       	st	Z, r24
    4ac8:	80 ea       	ldi	r24, 0xA0	; 160
    4aca:	92 e2       	ldi	r25, 0x22	; 34
    4acc:	86 83       	std	Z+6, r24	; 0x06
    4ace:	97 83       	std	Z+7, r25	; 0x07
    4ad0:	80 81       	ld	r24, Z
    4ad2:	80 62       	ori	r24, 0x20	; 32
    4ad4:	80 83       	st	Z, r24
    4ad6:	8f ef       	ldi	r24, 0xFF	; 255
    4ad8:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    4adc:	e8 ec       	ldi	r30, 0xC8	; 200
    4ade:	f4 e0       	ldi	r31, 0x04	; 4
    4ae0:	80 81       	ld	r24, Z
    4ae2:	81 60       	ori	r24, 0x01	; 1
    4ae4:	80 83       	st	Z, r24
    4ae6:	10 92 d4 22 	sts	0x22D4, r1	; 0x8022d4 <udd_b_idle>
    4aea:	80 91 a0 25 	lds	r24, 0x25A0	; 0x8025a0 <sleepmgr_locks+0x5>
    4aee:	8f 3f       	cpi	r24, 0xFF	; 255
    4af0:	09 f4       	brne	.+2      	; 0x4af4 <udd_enable+0xe4>
    4af2:	ff cf       	rjmp	.-2      	; 0x4af2 <udd_enable+0xe2>
    4af4:	8f b7       	in	r24, 0x3f	; 63
    4af6:	89 83       	std	Y+1, r24	; 0x01
    4af8:	f8 94       	cli
    4afa:	99 81       	ldd	r25, Y+1	; 0x01
    4afc:	eb e9       	ldi	r30, 0x9B	; 155
    4afe:	f5 e2       	ldi	r31, 0x25	; 37
    4b00:	85 81       	ldd	r24, Z+5	; 0x05
    4b02:	8f 5f       	subi	r24, 0xFF	; 255
    4b04:	85 83       	std	Z+5, r24	; 0x05
    4b06:	9f bf       	out	0x3f, r25	; 63
    4b08:	56 df       	rcall	.-340    	; 0x49b6 <udd_attach>
    4b0a:	1f bf       	out	0x3f, r17	; 63
    4b0c:	0f 90       	pop	r0
    4b0e:	0f 90       	pop	r0
    4b10:	df 91       	pop	r29
    4b12:	cf 91       	pop	r28
    4b14:	1f 91       	pop	r17
    4b16:	0f 91       	pop	r16
    4b18:	08 95       	ret

00004b1a <udd_is_high_speed>:
    4b1a:	80 e0       	ldi	r24, 0x00	; 0
    4b1c:	08 95       	ret

00004b1e <udd_set_address>:
    4b1e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    4b22:	08 95       	ret

00004b24 <udd_getaddress>:
    4b24:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    4b28:	08 95       	ret

00004b2a <udd_get_frame_number>:
    4b2a:	80 91 d0 22 	lds	r24, 0x22D0	; 0x8022d0 <udd_sram+0x3c>
    4b2e:	90 91 d1 22 	lds	r25, 0x22D1	; 0x8022d1 <udd_sram+0x3d>
    4b32:	08 95       	ret

00004b34 <udd_get_micro_frame_number>:
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	08 95       	ret

00004b3a <udd_set_setup_payload>:
    4b3a:	eb e8       	ldi	r30, 0x8B	; 139
    4b3c:	f5 e2       	ldi	r31, 0x25	; 37
    4b3e:	80 87       	std	Z+8, r24	; 0x08
    4b40:	91 87       	std	Z+9, r25	; 0x09
    4b42:	62 87       	std	Z+10, r22	; 0x0a
    4b44:	73 87       	std	Z+11, r23	; 0x0b
    4b46:	08 95       	ret

00004b48 <udd_ep_alloc>:
    4b48:	28 2f       	mov	r18, r24
    4b4a:	2f 70       	andi	r18, 0x0F	; 15
    4b4c:	30 e0       	ldi	r19, 0x00	; 0
    4b4e:	22 0f       	add	r18, r18
    4b50:	33 1f       	adc	r19, r19
    4b52:	08 2e       	mov	r0, r24
    4b54:	00 0c       	add	r0, r0
    4b56:	99 0b       	sbc	r25, r25
    4b58:	88 27       	eor	r24, r24
    4b5a:	99 0f       	add	r25, r25
    4b5c:	88 1f       	adc	r24, r24
    4b5e:	99 27       	eor	r25, r25
    4b60:	82 0f       	add	r24, r18
    4b62:	93 1f       	adc	r25, r19
    4b64:	fc 01       	movw	r30, r24
    4b66:	ee 0f       	add	r30, r30
    4b68:	ff 1f       	adc	r31, r31
    4b6a:	ee 0f       	add	r30, r30
    4b6c:	ff 1f       	adc	r31, r31
    4b6e:	ee 0f       	add	r30, r30
    4b70:	ff 1f       	adc	r31, r31
    4b72:	ec 56       	subi	r30, 0x6C	; 108
    4b74:	fd 4d       	sbci	r31, 0xDD	; 221
    4b76:	25 85       	ldd	r18, Z+13	; 0x0d
    4b78:	20 7c       	andi	r18, 0xC0	; 192
    4b7a:	09 f0       	breq	.+2      	; 0x4b7e <udd_ep_alloc+0x36>
    4b7c:	69 c0       	rjmp	.+210    	; 0x4c50 <udd_ep_alloc+0x108>
    4b7e:	63 70       	andi	r22, 0x03	; 3
    4b80:	61 30       	cpi	r22, 0x01	; 1
    4b82:	11 f0       	breq	.+4      	; 0x4b88 <udd_ep_alloc+0x40>
    4b84:	18 f4       	brcc	.+6      	; 0x4b8c <udd_ep_alloc+0x44>
    4b86:	04 c0       	rjmp	.+8      	; 0x4b90 <udd_ep_alloc+0x48>
    4b88:	60 ec       	ldi	r22, 0xC0	; 192
    4b8a:	03 c0       	rjmp	.+6      	; 0x4b92 <udd_ep_alloc+0x4a>
    4b8c:	60 e8       	ldi	r22, 0x80	; 128
    4b8e:	01 c0       	rjmp	.+2      	; 0x4b92 <udd_ep_alloc+0x4a>
    4b90:	60 e4       	ldi	r22, 0x40	; 64
    4b92:	40 38       	cpi	r20, 0x80	; 128
    4b94:	51 05       	cpc	r21, r1
    4b96:	e9 f0       	breq	.+58     	; 0x4bd2 <udd_ep_alloc+0x8a>
    4b98:	50 f4       	brcc	.+20     	; 0x4bae <udd_ep_alloc+0x66>
    4b9a:	40 32       	cpi	r20, 0x20	; 32
    4b9c:	51 05       	cpc	r21, r1
    4b9e:	a9 f0       	breq	.+42     	; 0x4bca <udd_ep_alloc+0x82>
    4ba0:	40 34       	cpi	r20, 0x40	; 64
    4ba2:	51 05       	cpc	r21, r1
    4ba4:	a1 f0       	breq	.+40     	; 0x4bce <udd_ep_alloc+0x86>
    4ba6:	40 31       	cpi	r20, 0x10	; 16
    4ba8:	51 05       	cpc	r21, r1
    4baa:	d9 f4       	brne	.+54     	; 0x4be2 <udd_ep_alloc+0x9a>
    4bac:	0c c0       	rjmp	.+24     	; 0x4bc6 <udd_ep_alloc+0x7e>
    4bae:	41 15       	cp	r20, r1
    4bb0:	22 e0       	ldi	r18, 0x02	; 2
    4bb2:	52 07       	cpc	r21, r18
    4bb4:	91 f0       	breq	.+36     	; 0x4bda <udd_ep_alloc+0x92>
    4bb6:	4f 3f       	cpi	r20, 0xFF	; 255
    4bb8:	23 e0       	ldi	r18, 0x03	; 3
    4bba:	52 07       	cpc	r21, r18
    4bbc:	81 f0       	breq	.+32     	; 0x4bde <udd_ep_alloc+0x96>
    4bbe:	41 15       	cp	r20, r1
    4bc0:	51 40       	sbci	r21, 0x01	; 1
    4bc2:	79 f4       	brne	.+30     	; 0x4be2 <udd_ep_alloc+0x9a>
    4bc4:	08 c0       	rjmp	.+16     	; 0x4bd6 <udd_ep_alloc+0x8e>
    4bc6:	21 e0       	ldi	r18, 0x01	; 1
    4bc8:	0d c0       	rjmp	.+26     	; 0x4be4 <udd_ep_alloc+0x9c>
    4bca:	22 e0       	ldi	r18, 0x02	; 2
    4bcc:	0b c0       	rjmp	.+22     	; 0x4be4 <udd_ep_alloc+0x9c>
    4bce:	23 e0       	ldi	r18, 0x03	; 3
    4bd0:	09 c0       	rjmp	.+18     	; 0x4be4 <udd_ep_alloc+0x9c>
    4bd2:	24 e0       	ldi	r18, 0x04	; 4
    4bd4:	07 c0       	rjmp	.+14     	; 0x4be4 <udd_ep_alloc+0x9c>
    4bd6:	25 e0       	ldi	r18, 0x05	; 5
    4bd8:	05 c0       	rjmp	.+10     	; 0x4be4 <udd_ep_alloc+0x9c>
    4bda:	26 e0       	ldi	r18, 0x06	; 6
    4bdc:	03 c0       	rjmp	.+6      	; 0x4be4 <udd_ep_alloc+0x9c>
    4bde:	27 e0       	ldi	r18, 0x07	; 7
    4be0:	01 c0       	rjmp	.+2      	; 0x4be4 <udd_ep_alloc+0x9c>
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	fc 01       	movw	r30, r24
    4be6:	ee 0f       	add	r30, r30
    4be8:	ff 1f       	adc	r31, r31
    4bea:	ee 0f       	add	r30, r30
    4bec:	ff 1f       	adc	r31, r31
    4bee:	ee 0f       	add	r30, r30
    4bf0:	ff 1f       	adc	r31, r31
    4bf2:	ec 56       	subi	r30, 0x6C	; 108
    4bf4:	fd 4d       	sbci	r31, 0xDD	; 221
    4bf6:	15 86       	std	Z+13, r1	; 0x0d
    4bf8:	36 e0       	ldi	r19, 0x06	; 6
    4bfa:	34 87       	std	Z+12, r19	; 0x0c
    4bfc:	26 2b       	or	r18, r22
    4bfe:	25 87       	std	Z+13, r18	; 0x0d
    4c00:	fc 01       	movw	r30, r24
    4c02:	ee 0f       	add	r30, r30
    4c04:	ff 1f       	adc	r31, r31
    4c06:	ee 0f       	add	r30, r30
    4c08:	ff 1f       	adc	r31, r31
    4c0a:	ee 0f       	add	r30, r30
    4c0c:	ff 1f       	adc	r31, r31
    4c0e:	ec 56       	subi	r30, 0x6C	; 108
    4c10:	fd 4d       	sbci	r31, 0xDD	; 221
    4c12:	25 85       	ldd	r18, Z+13	; 0x0d
    4c14:	20 7c       	andi	r18, 0xC0	; 192
    4c16:	20 3c       	cpi	r18, 0xC0	; 192
    4c18:	69 f4       	brne	.+26     	; 0x4c34 <udd_ep_alloc+0xec>
    4c1a:	fc 01       	movw	r30, r24
    4c1c:	ee 0f       	add	r30, r30
    4c1e:	ff 1f       	adc	r31, r31
    4c20:	ee 0f       	add	r30, r30
    4c22:	ff 1f       	adc	r31, r31
    4c24:	ee 0f       	add	r30, r30
    4c26:	ff 1f       	adc	r31, r31
    4c28:	ec 56       	subi	r30, 0x6C	; 108
    4c2a:	fd 4d       	sbci	r31, 0xDD	; 221
    4c2c:	25 85       	ldd	r18, Z+13	; 0x0d
    4c2e:	27 70       	andi	r18, 0x07	; 7
    4c30:	27 30       	cpi	r18, 0x07	; 7
    4c32:	81 f0       	breq	.+32     	; 0x4c54 <udd_ep_alloc+0x10c>
    4c34:	88 0f       	add	r24, r24
    4c36:	99 1f       	adc	r25, r25
    4c38:	88 0f       	add	r24, r24
    4c3a:	99 1f       	adc	r25, r25
    4c3c:	88 0f       	add	r24, r24
    4c3e:	99 1f       	adc	r25, r25
    4c40:	fc 01       	movw	r30, r24
    4c42:	ec 56       	subi	r30, 0x6C	; 108
    4c44:	fd 4d       	sbci	r31, 0xDD	; 221
    4c46:	85 85       	ldd	r24, Z+13	; 0x0d
    4c48:	80 62       	ori	r24, 0x20	; 32
    4c4a:	85 87       	std	Z+13, r24	; 0x0d
    4c4c:	81 e0       	ldi	r24, 0x01	; 1
    4c4e:	08 95       	ret
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	08 95       	ret
    4c54:	81 e0       	ldi	r24, 0x01	; 1
    4c56:	08 95       	ret

00004c58 <udd_ep_is_halted>:
    4c58:	e8 2f       	mov	r30, r24
    4c5a:	ef 70       	andi	r30, 0x0F	; 15
    4c5c:	f0 e0       	ldi	r31, 0x00	; 0
    4c5e:	ee 0f       	add	r30, r30
    4c60:	ff 1f       	adc	r31, r31
    4c62:	08 2e       	mov	r0, r24
    4c64:	00 0c       	add	r0, r0
    4c66:	99 0b       	sbc	r25, r25
    4c68:	88 27       	eor	r24, r24
    4c6a:	99 0f       	add	r25, r25
    4c6c:	88 1f       	adc	r24, r24
    4c6e:	99 27       	eor	r25, r25
    4c70:	e8 0f       	add	r30, r24
    4c72:	f9 1f       	adc	r31, r25
    4c74:	ee 0f       	add	r30, r30
    4c76:	ff 1f       	adc	r31, r31
    4c78:	ee 0f       	add	r30, r30
    4c7a:	ff 1f       	adc	r31, r31
    4c7c:	ee 0f       	add	r30, r30
    4c7e:	ff 1f       	adc	r31, r31
    4c80:	ec 56       	subi	r30, 0x6C	; 108
    4c82:	fd 4d       	sbci	r31, 0xDD	; 221
    4c84:	85 85       	ldd	r24, Z+13	; 0x0d
    4c86:	82 fb       	bst	r24, 2
    4c88:	88 27       	eor	r24, r24
    4c8a:	80 f9       	bld	r24, 0
    4c8c:	08 95       	ret

00004c8e <udd_ep_clear_halt>:
    4c8e:	0f 93       	push	r16
    4c90:	28 2f       	mov	r18, r24
    4c92:	2f 70       	andi	r18, 0x0F	; 15
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	a9 01       	movw	r20, r18
    4c98:	44 0f       	add	r20, r20
    4c9a:	55 1f       	adc	r21, r21
    4c9c:	28 2f       	mov	r18, r24
    4c9e:	08 2e       	mov	r0, r24
    4ca0:	00 0c       	add	r0, r0
    4ca2:	33 0b       	sbc	r19, r19
    4ca4:	22 27       	eor	r18, r18
    4ca6:	33 0f       	add	r19, r19
    4ca8:	22 1f       	adc	r18, r18
    4caa:	33 27       	eor	r19, r19
    4cac:	24 0f       	add	r18, r20
    4cae:	35 1f       	adc	r19, r21
    4cb0:	a9 01       	movw	r20, r18
    4cb2:	44 0f       	add	r20, r20
    4cb4:	55 1f       	adc	r21, r21
    4cb6:	44 0f       	add	r20, r20
    4cb8:	55 1f       	adc	r21, r21
    4cba:	44 0f       	add	r20, r20
    4cbc:	55 1f       	adc	r21, r21
    4cbe:	fa 01       	movw	r30, r20
    4cc0:	e0 56       	subi	r30, 0x60	; 96
    4cc2:	fd 4d       	sbci	r31, 0xDD	; 221
    4cc4:	01 e0       	ldi	r16, 0x01	; 1
    4cc6:	06 93       	lac	Z, r16
    4cc8:	fa 01       	movw	r30, r20
    4cca:	ec 56       	subi	r30, 0x6C	; 108
    4ccc:	fd 4d       	sbci	r31, 0xDD	; 221
    4cce:	95 85       	ldd	r25, Z+13	; 0x0d
    4cd0:	92 ff       	sbrs	r25, 2
    4cd2:	11 c0       	rjmp	.+34     	; 0x4cf6 <udd_ep_clear_halt+0x68>
    4cd4:	fa 01       	movw	r30, r20
    4cd6:	ec 56       	subi	r30, 0x6C	; 108
    4cd8:	fd 4d       	sbci	r31, 0xDD	; 221
    4cda:	95 85       	ldd	r25, Z+13	; 0x0d
    4cdc:	9b 7f       	andi	r25, 0xFB	; 251
    4cde:	95 87       	std	Z+13, r25	; 0x0d
    4ce0:	59 dc       	rcall	.-1870   	; 0x4594 <udd_ep_get_job>
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	80 81       	ld	r24, Z
    4ce6:	80 ff       	sbrs	r24, 0
    4ce8:	06 c0       	rjmp	.+12     	; 0x4cf6 <udd_ep_clear_halt+0x68>
    4cea:	8e 7f       	andi	r24, 0xFE	; 254
    4cec:	80 83       	st	Z, r24
    4cee:	07 80       	ldd	r0, Z+7	; 0x07
    4cf0:	f0 85       	ldd	r31, Z+8	; 0x08
    4cf2:	e0 2d       	mov	r30, r0
    4cf4:	19 95       	eicall
    4cf6:	81 e0       	ldi	r24, 0x01	; 1
    4cf8:	0f 91       	pop	r16
    4cfa:	08 95       	ret

00004cfc <udd_ep_run>:
    4cfc:	6f 92       	push	r6
    4cfe:	7f 92       	push	r7
    4d00:	8f 92       	push	r8
    4d02:	9f 92       	push	r9
    4d04:	af 92       	push	r10
    4d06:	bf 92       	push	r11
    4d08:	cf 92       	push	r12
    4d0a:	df 92       	push	r13
    4d0c:	ef 92       	push	r14
    4d0e:	ff 92       	push	r15
    4d10:	0f 93       	push	r16
    4d12:	1f 93       	push	r17
    4d14:	cf 93       	push	r28
    4d16:	df 93       	push	r29
    4d18:	1f 92       	push	r1
    4d1a:	cd b7       	in	r28, 0x3d	; 61
    4d1c:	de b7       	in	r29, 0x3e	; 62
    4d1e:	78 2e       	mov	r7, r24
    4d20:	66 2e       	mov	r6, r22
    4d22:	4a 01       	movw	r8, r20
    4d24:	59 01       	movw	r10, r18
    4d26:	36 dc       	rcall	.-1940   	; 0x4594 <udd_ep_get_job>
    4d28:	6c 01       	movw	r12, r24
    4d2a:	27 2d       	mov	r18, r7
    4d2c:	87 2d       	mov	r24, r7
    4d2e:	8f 70       	andi	r24, 0x0F	; 15
    4d30:	e8 2e       	mov	r14, r24
    4d32:	f1 2c       	mov	r15, r1
    4d34:	c7 01       	movw	r24, r14
    4d36:	88 0f       	add	r24, r24
    4d38:	99 1f       	adc	r25, r25
    4d3a:	e7 2c       	mov	r14, r7
    4d3c:	07 2c       	mov	r0, r7
    4d3e:	00 0c       	add	r0, r0
    4d40:	ff 08       	sbc	r15, r15
    4d42:	ee 24       	eor	r14, r14
    4d44:	ff 0c       	add	r15, r15
    4d46:	ee 1c       	adc	r14, r14
    4d48:	ff 24       	eor	r15, r15
    4d4a:	e8 0e       	add	r14, r24
    4d4c:	f9 1e       	adc	r15, r25
    4d4e:	f7 01       	movw	r30, r14
    4d50:	ee 0f       	add	r30, r30
    4d52:	ff 1f       	adc	r31, r31
    4d54:	ee 0f       	add	r30, r30
    4d56:	ff 1f       	adc	r31, r31
    4d58:	ee 0f       	add	r30, r30
    4d5a:	ff 1f       	adc	r31, r31
    4d5c:	ec 56       	subi	r30, 0x6C	; 108
    4d5e:	fd 4d       	sbci	r31, 0xDD	; 221
    4d60:	85 85       	ldd	r24, Z+13	; 0x0d
    4d62:	80 7c       	andi	r24, 0xC0	; 192
    4d64:	09 f4       	brne	.+2      	; 0x4d68 <udd_ep_run+0x6c>
    4d66:	82 c0       	rjmp	.+260    	; 0x4e6c <udd_ep_run+0x170>
    4d68:	f7 01       	movw	r30, r14
    4d6a:	ee 0f       	add	r30, r30
    4d6c:	ff 1f       	adc	r31, r31
    4d6e:	ee 0f       	add	r30, r30
    4d70:	ff 1f       	adc	r31, r31
    4d72:	ee 0f       	add	r30, r30
    4d74:	ff 1f       	adc	r31, r31
    4d76:	ec 56       	subi	r30, 0x6C	; 108
    4d78:	fd 4d       	sbci	r31, 0xDD	; 221
    4d7a:	85 85       	ldd	r24, Z+13	; 0x0d
    4d7c:	80 7c       	andi	r24, 0xC0	; 192
    4d7e:	80 3c       	cpi	r24, 0xC0	; 192
    4d80:	61 f0       	breq	.+24     	; 0x4d9a <udd_ep_run+0x9e>
    4d82:	f7 01       	movw	r30, r14
    4d84:	ee 0f       	add	r30, r30
    4d86:	ff 1f       	adc	r31, r31
    4d88:	ee 0f       	add	r30, r30
    4d8a:	ff 1f       	adc	r31, r31
    4d8c:	ee 0f       	add	r30, r30
    4d8e:	ff 1f       	adc	r31, r31
    4d90:	ec 56       	subi	r30, 0x6C	; 108
    4d92:	fd 4d       	sbci	r31, 0xDD	; 221
    4d94:	85 85       	ldd	r24, Z+13	; 0x0d
    4d96:	82 fd       	sbrc	r24, 2
    4d98:	6b c0       	rjmp	.+214    	; 0x4e70 <udd_ep_run+0x174>
    4d9a:	8f b7       	in	r24, 0x3f	; 63
    4d9c:	89 83       	std	Y+1, r24	; 0x01
    4d9e:	f8 94       	cli
    4da0:	89 81       	ldd	r24, Y+1	; 0x01
    4da2:	f6 01       	movw	r30, r12
    4da4:	90 81       	ld	r25, Z
    4da6:	90 ff       	sbrs	r25, 0
    4da8:	03 c0       	rjmp	.+6      	; 0x4db0 <udd_ep_run+0xb4>
    4daa:	8f bf       	out	0x3f, r24	; 63
    4dac:	80 e0       	ldi	r24, 0x00	; 0
    4dae:	61 c0       	rjmp	.+194    	; 0x4e72 <udd_ep_run+0x176>
    4db0:	f6 01       	movw	r30, r12
    4db2:	90 81       	ld	r25, Z
    4db4:	91 60       	ori	r25, 0x01	; 1
    4db6:	90 83       	st	Z, r25
    4db8:	8f bf       	out	0x3f, r24	; 63
    4dba:	81 82       	std	Z+1, r8	; 0x01
    4dbc:	92 82       	std	Z+2, r9	; 0x02
    4dbe:	a3 82       	std	Z+3, r10	; 0x03
    4dc0:	b4 82       	std	Z+4, r11	; 0x04
    4dc2:	15 82       	std	Z+5, r1	; 0x05
    4dc4:	16 82       	std	Z+6, r1	; 0x06
    4dc6:	07 83       	std	Z+7, r16	; 0x07
    4dc8:	10 87       	std	Z+8, r17	; 0x08
    4dca:	61 10       	cpse	r6, r1
    4dcc:	06 c0       	rjmp	.+12     	; 0x4dda <udd_ep_run+0xde>
    4dce:	91 e0       	ldi	r25, 0x01	; 1
    4dd0:	a1 14       	cp	r10, r1
    4dd2:	b1 04       	cpc	r11, r1
    4dd4:	19 f0       	breq	.+6      	; 0x4ddc <udd_ep_run+0xe0>
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	01 c0       	rjmp	.+2      	; 0x4ddc <udd_ep_run+0xe0>
    4dda:	91 e0       	ldi	r25, 0x01	; 1
    4ddc:	f6 01       	movw	r30, r12
    4dde:	80 81       	ld	r24, Z
    4de0:	90 fb       	bst	r25, 0
    4de2:	81 f9       	bld	r24, 1
    4de4:	8b 7f       	andi	r24, 0xFB	; 251
    4de6:	80 83       	st	Z, r24
    4de8:	22 23       	and	r18, r18
    4dea:	64 f4       	brge	.+24     	; 0x4e04 <udd_ep_run+0x108>
    4dec:	f7 01       	movw	r30, r14
    4dee:	ee 0f       	add	r30, r30
    4df0:	ff 1f       	adc	r31, r31
    4df2:	ee 0f       	add	r30, r30
    4df4:	ff 1f       	adc	r31, r31
    4df6:	ee 0f       	add	r30, r30
    4df8:	ff 1f       	adc	r31, r31
    4dfa:	ec 56       	subi	r30, 0x6C	; 108
    4dfc:	fd 4d       	sbci	r31, 0xDD	; 221
    4dfe:	12 8a       	std	Z+18, r1	; 0x12
    4e00:	13 8a       	std	Z+19, r1	; 0x13
    4e02:	30 c0       	rjmp	.+96     	; 0x4e64 <udd_ep_run+0x168>
    4e04:	f7 01       	movw	r30, r14
    4e06:	ee 0f       	add	r30, r30
    4e08:	ff 1f       	adc	r31, r31
    4e0a:	ee 0f       	add	r30, r30
    4e0c:	ff 1f       	adc	r31, r31
    4e0e:	ee 0f       	add	r30, r30
    4e10:	ff 1f       	adc	r31, r31
    4e12:	ec 56       	subi	r30, 0x6C	; 108
    4e14:	fd 4d       	sbci	r31, 0xDD	; 221
    4e16:	85 85       	ldd	r24, Z+13	; 0x0d
    4e18:	80 7c       	andi	r24, 0xC0	; 192
    4e1a:	80 3c       	cpi	r24, 0xC0	; 192
    4e1c:	b1 f4       	brne	.+44     	; 0x4e4a <udd_ep_run+0x14e>
    4e1e:	c7 01       	movw	r24, r14
    4e20:	88 0f       	add	r24, r24
    4e22:	99 1f       	adc	r25, r25
    4e24:	88 0f       	add	r24, r24
    4e26:	99 1f       	adc	r25, r25
    4e28:	88 0f       	add	r24, r24
    4e2a:	99 1f       	adc	r25, r25
    4e2c:	80 56       	subi	r24, 0x60	; 96
    4e2e:	9d 4d       	sbci	r25, 0xDD	; 221
    4e30:	88 db       	rcall	.-2288   	; 0x4542 <udd_ep_get_size>
    4e32:	bc 01       	movw	r22, r24
    4e34:	c5 01       	movw	r24, r10
    4e36:	0e 94 ef 38 	call	0x71de	; 0x71de <__udivmodhi4>
    4e3a:	89 2b       	or	r24, r25
    4e3c:	31 f0       	breq	.+12     	; 0x4e4a <udd_ep_run+0x14e>
    4e3e:	f6 01       	movw	r30, r12
    4e40:	80 81       	ld	r24, Z
    4e42:	8e 7f       	andi	r24, 0xFE	; 254
    4e44:	80 83       	st	Z, r24
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	14 c0       	rjmp	.+40     	; 0x4e72 <udd_ep_run+0x176>
    4e4a:	f7 01       	movw	r30, r14
    4e4c:	ee 0f       	add	r30, r30
    4e4e:	ff 1f       	adc	r31, r31
    4e50:	ee 0f       	add	r30, r30
    4e52:	ff 1f       	adc	r31, r31
    4e54:	ee 0f       	add	r30, r30
    4e56:	ff 1f       	adc	r31, r31
    4e58:	ec 56       	subi	r30, 0x6C	; 108
    4e5a:	fd 4d       	sbci	r31, 0xDD	; 221
    4e5c:	16 86       	std	Z+14, r1	; 0x0e
    4e5e:	17 86       	std	Z+15, r1	; 0x0f
    4e60:	12 8a       	std	Z+18, r1	; 0x12
    4e62:	13 8a       	std	Z+19, r1	; 0x13
    4e64:	87 2d       	mov	r24, r7
    4e66:	23 dc       	rcall	.-1978   	; 0x46ae <udd_ep_trans_complet>
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	03 c0       	rjmp	.+6      	; 0x4e72 <udd_ep_run+0x176>
    4e6c:	80 e0       	ldi	r24, 0x00	; 0
    4e6e:	01 c0       	rjmp	.+2      	; 0x4e72 <udd_ep_run+0x176>
    4e70:	80 e0       	ldi	r24, 0x00	; 0
    4e72:	0f 90       	pop	r0
    4e74:	df 91       	pop	r29
    4e76:	cf 91       	pop	r28
    4e78:	1f 91       	pop	r17
    4e7a:	0f 91       	pop	r16
    4e7c:	ff 90       	pop	r15
    4e7e:	ef 90       	pop	r14
    4e80:	df 90       	pop	r13
    4e82:	cf 90       	pop	r12
    4e84:	bf 90       	pop	r11
    4e86:	af 90       	pop	r10
    4e88:	9f 90       	pop	r9
    4e8a:	8f 90       	pop	r8
    4e8c:	7f 90       	pop	r7
    4e8e:	6f 90       	pop	r6
    4e90:	08 95       	ret

00004e92 <udd_ep_abort>:
    4e92:	ff 92       	push	r15
    4e94:	0f 93       	push	r16
    4e96:	1f 93       	push	r17
    4e98:	cf 93       	push	r28
    4e9a:	df 93       	push	r29
    4e9c:	18 2f       	mov	r17, r24
    4e9e:	c8 2f       	mov	r28, r24
    4ea0:	cf 70       	andi	r28, 0x0F	; 15
    4ea2:	d0 e0       	ldi	r29, 0x00	; 0
    4ea4:	ce 01       	movw	r24, r28
    4ea6:	88 0f       	add	r24, r24
    4ea8:	99 1f       	adc	r25, r25
    4eaa:	c1 2f       	mov	r28, r17
    4eac:	01 2e       	mov	r0, r17
    4eae:	00 0c       	add	r0, r0
    4eb0:	dd 0b       	sbc	r29, r29
    4eb2:	cc 27       	eor	r28, r28
    4eb4:	dd 0f       	add	r29, r29
    4eb6:	cc 1f       	adc	r28, r28
    4eb8:	dd 27       	eor	r29, r29
    4eba:	c8 0f       	add	r28, r24
    4ebc:	d9 1f       	adc	r29, r25
    4ebe:	81 2f       	mov	r24, r17
    4ec0:	69 db       	rcall	.-2350   	; 0x4594 <udd_ep_get_job>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	fe 01       	movw	r30, r28
    4ec6:	ee 0f       	add	r30, r30
    4ec8:	ff 1f       	adc	r31, r31
    4eca:	ee 0f       	add	r30, r30
    4ecc:	ff 1f       	adc	r31, r31
    4ece:	ee 0f       	add	r30, r30
    4ed0:	ff 1f       	adc	r31, r31
    4ed2:	e0 56       	subi	r30, 0x60	; 96
    4ed4:	fd 4d       	sbci	r31, 0xDD	; 221
    4ed6:	02 e0       	ldi	r16, 0x02	; 2
    4ed8:	05 93       	las	Z, r16
    4eda:	8c 91       	ld	r24, X
    4edc:	80 ff       	sbrs	r24, 0
    4ede:	22 c0       	rjmp	.+68     	; 0x4f24 <udd_ep_abort+0x92>
    4ee0:	8e 7f       	andi	r24, 0xFE	; 254
    4ee2:	8c 93       	st	X, r24
    4ee4:	17 96       	adiw	r26, 0x07	; 7
    4ee6:	ed 91       	ld	r30, X+
    4ee8:	fc 91       	ld	r31, X
    4eea:	18 97       	sbiw	r26, 0x08	; 8
    4eec:	30 97       	sbiw	r30, 0x00	; 0
    4eee:	d1 f0       	breq	.+52     	; 0x4f24 <udd_ep_abort+0x92>
    4ef0:	11 23       	and	r17, r17
    4ef2:	5c f4       	brge	.+22     	; 0x4f0a <udd_ep_abort+0x78>
    4ef4:	cc 0f       	add	r28, r28
    4ef6:	dd 1f       	adc	r29, r29
    4ef8:	cc 0f       	add	r28, r28
    4efa:	dd 1f       	adc	r29, r29
    4efc:	cc 0f       	add	r28, r28
    4efe:	dd 1f       	adc	r29, r29
    4f00:	cc 56       	subi	r28, 0x6C	; 108
    4f02:	dd 4d       	sbci	r29, 0xDD	; 221
    4f04:	6a 89       	ldd	r22, Y+18	; 0x12
    4f06:	7b 89       	ldd	r23, Y+19	; 0x13
    4f08:	0a c0       	rjmp	.+20     	; 0x4f1e <udd_ep_abort+0x8c>
    4f0a:	cc 0f       	add	r28, r28
    4f0c:	dd 1f       	adc	r29, r29
    4f0e:	cc 0f       	add	r28, r28
    4f10:	dd 1f       	adc	r29, r29
    4f12:	cc 0f       	add	r28, r28
    4f14:	dd 1f       	adc	r29, r29
    4f16:	cc 56       	subi	r28, 0x6C	; 108
    4f18:	dd 4d       	sbci	r29, 0xDD	; 221
    4f1a:	6e 85       	ldd	r22, Y+14	; 0x0e
    4f1c:	7f 85       	ldd	r23, Y+15	; 0x0f
    4f1e:	41 2f       	mov	r20, r17
    4f20:	81 e0       	ldi	r24, 0x01	; 1
    4f22:	19 95       	eicall
    4f24:	df 91       	pop	r29
    4f26:	cf 91       	pop	r28
    4f28:	1f 91       	pop	r17
    4f2a:	0f 91       	pop	r16
    4f2c:	ff 90       	pop	r15
    4f2e:	08 95       	ret

00004f30 <udd_ep_free>:
    4f30:	cf 93       	push	r28
    4f32:	c8 2f       	mov	r28, r24
    4f34:	ae df       	rcall	.-164    	; 0x4e92 <udd_ep_abort>
    4f36:	ec 2f       	mov	r30, r28
    4f38:	ef 70       	andi	r30, 0x0F	; 15
    4f3a:	f0 e0       	ldi	r31, 0x00	; 0
    4f3c:	ee 0f       	add	r30, r30
    4f3e:	ff 1f       	adc	r31, r31
    4f40:	8c 2f       	mov	r24, r28
    4f42:	cc 0f       	add	r28, r28
    4f44:	99 0b       	sbc	r25, r25
    4f46:	88 27       	eor	r24, r24
    4f48:	99 0f       	add	r25, r25
    4f4a:	88 1f       	adc	r24, r24
    4f4c:	99 27       	eor	r25, r25
    4f4e:	e8 0f       	add	r30, r24
    4f50:	f9 1f       	adc	r31, r25
    4f52:	ee 0f       	add	r30, r30
    4f54:	ff 1f       	adc	r31, r31
    4f56:	ee 0f       	add	r30, r30
    4f58:	ff 1f       	adc	r31, r31
    4f5a:	ee 0f       	add	r30, r30
    4f5c:	ff 1f       	adc	r31, r31
    4f5e:	ec 56       	subi	r30, 0x6C	; 108
    4f60:	fd 4d       	sbci	r31, 0xDD	; 221
    4f62:	15 86       	std	Z+13, r1	; 0x0d
    4f64:	cf 91       	pop	r28
    4f66:	08 95       	ret

00004f68 <udd_ep_set_halt>:
    4f68:	e8 2f       	mov	r30, r24
    4f6a:	ef 70       	andi	r30, 0x0F	; 15
    4f6c:	f0 e0       	ldi	r31, 0x00	; 0
    4f6e:	ee 0f       	add	r30, r30
    4f70:	ff 1f       	adc	r31, r31
    4f72:	28 2f       	mov	r18, r24
    4f74:	08 2e       	mov	r0, r24
    4f76:	00 0c       	add	r0, r0
    4f78:	33 0b       	sbc	r19, r19
    4f7a:	22 27       	eor	r18, r18
    4f7c:	33 0f       	add	r19, r19
    4f7e:	22 1f       	adc	r18, r18
    4f80:	33 27       	eor	r19, r19
    4f82:	e2 0f       	add	r30, r18
    4f84:	f3 1f       	adc	r31, r19
    4f86:	ee 0f       	add	r30, r30
    4f88:	ff 1f       	adc	r31, r31
    4f8a:	ee 0f       	add	r30, r30
    4f8c:	ff 1f       	adc	r31, r31
    4f8e:	ee 0f       	add	r30, r30
    4f90:	ff 1f       	adc	r31, r31
    4f92:	ec 56       	subi	r30, 0x6C	; 108
    4f94:	fd 4d       	sbci	r31, 0xDD	; 221
    4f96:	95 85       	ldd	r25, Z+13	; 0x0d
    4f98:	94 60       	ori	r25, 0x04	; 4
    4f9a:	95 87       	std	Z+13, r25	; 0x0d
    4f9c:	7a df       	rcall	.-268    	; 0x4e92 <udd_ep_abort>
    4f9e:	81 e0       	ldi	r24, 0x01	; 1
    4fa0:	08 95       	ret

00004fa2 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    4fa2:	1f 92       	push	r1
    4fa4:	0f 92       	push	r0
    4fa6:	0f b6       	in	r0, 0x3f	; 63
    4fa8:	0f 92       	push	r0
    4faa:	11 24       	eor	r1, r1
    4fac:	0b b6       	in	r0, 0x3b	; 59
    4fae:	0f 92       	push	r0
    4fb0:	0f 93       	push	r16
    4fb2:	2f 93       	push	r18
    4fb4:	3f 93       	push	r19
    4fb6:	4f 93       	push	r20
    4fb8:	5f 93       	push	r21
    4fba:	6f 93       	push	r22
    4fbc:	7f 93       	push	r23
    4fbe:	8f 93       	push	r24
    4fc0:	9f 93       	push	r25
    4fc2:	af 93       	push	r26
    4fc4:	bf 93       	push	r27
    4fc6:	ef 93       	push	r30
    4fc8:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    4fca:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    4fce:	88 23       	and	r24, r24
    4fd0:	34 f4       	brge	.+12     	; 0x4fde <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    4fd2:	80 e8       	ldi	r24, 0x80	; 128
    4fd4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    4fd8:	0e 94 8f 35 	call	0x6b1e	; 0x6b1e <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    4fdc:	88 c0       	rjmp	.+272    	; 0x50ee <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    4fde:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    4fe2:	82 ff       	sbrs	r24, 2
    4fe4:	20 c0       	rjmp	.+64     	; 0x5026 <__vector_125+0x84>
		udd_ack_underflow_event();
    4fe6:	84 e0       	ldi	r24, 0x04	; 4
    4fe8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    4fec:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <udd_sram+0x14>
    4ff0:	86 ff       	sbrs	r24, 6
    4ff2:	7d c0       	rjmp	.+250    	; 0x50ee <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    4ff4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    4ff8:	81 fd       	sbrc	r24, 1
    4ffa:	79 c0       	rjmp	.+242    	; 0x50ee <__vector_125+0x14c>
    4ffc:	e6 da       	rcall	.-2612   	; 0x45ca <udd_ctrl_interrupt_tc_setup>
    4ffe:	81 11       	cpse	r24, r1
    5000:	76 c0       	rjmp	.+236    	; 0x50ee <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    5002:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <udd_ep_control_state>
    5006:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    5008:	11 f4       	brne	.+4      	; 0x500e <__vector_125+0x6c>
    500a:	19 da       	rcall	.-3022   	; 0x443e <udd_ctrl_send_zlp_in>
    500c:	70 c0       	rjmp	.+224    	; 0x50ee <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    500e:	84 30       	cpi	r24, 0x04	; 4
    5010:	09 f0       	breq	.+2      	; 0x5014 <__vector_125+0x72>
    5012:	6d c0       	rjmp	.+218    	; 0x50ee <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    5014:	e9 ea       	ldi	r30, 0xA9	; 169
    5016:	f2 e2       	ldi	r31, 0x22	; 34
    5018:	04 e0       	ldi	r16, 0x04	; 4
    501a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    501c:	e1 ea       	ldi	r30, 0xA1	; 161
    501e:	f2 e2       	ldi	r31, 0x22	; 34
    5020:	04 e0       	ldi	r16, 0x04	; 4
    5022:	05 93       	las	Z, r16
    5024:	64 c0       	rjmp	.+200    	; 0x50ee <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    5026:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    502a:	81 ff       	sbrs	r24, 1
    502c:	5b c0       	rjmp	.+182    	; 0x50e4 <__vector_125+0x142>
		udd_ack_overflow_event();
    502e:	82 e0       	ldi	r24, 0x02	; 2
    5030:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    5034:	80 91 a0 22 	lds	r24, 0x22A0	; 0x8022a0 <udd_sram+0xc>
    5038:	86 ff       	sbrs	r24, 6
    503a:	59 c0       	rjmp	.+178    	; 0x50ee <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    503c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5040:	81 fd       	sbrc	r24, 1
    5042:	55 c0       	rjmp	.+170    	; 0x50ee <__vector_125+0x14c>
    5044:	c2 da       	rcall	.-2684   	; 0x45ca <udd_ctrl_interrupt_tc_setup>
    5046:	81 11       	cpse	r24, r1
    5048:	52 c0       	rjmp	.+164    	; 0x50ee <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    504a:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <udd_ep_control_state>
    504e:	82 30       	cpi	r24, 0x02	; 2
    5050:	41 f4       	brne	.+16     	; 0x5062 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    5052:	84 e0       	ldi	r24, 0x04	; 4
    5054:	80 93 90 22 	sts	0x2290, r24	; 0x802290 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    5058:	e0 ea       	ldi	r30, 0xA0	; 160
    505a:	f2 e2       	ldi	r31, 0x22	; 34
    505c:	02 e0       	ldi	r16, 0x02	; 2
    505e:	06 93       	lac	Z, r16
    5060:	46 c0       	rjmp	.+140    	; 0x50ee <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    5062:	83 30       	cpi	r24, 0x03	; 3
    5064:	09 f0       	breq	.+2      	; 0x5068 <__vector_125+0xc6>
    5066:	43 c0       	rjmp	.+134    	; 0x50ee <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    5068:	e9 ea       	ldi	r30, 0xA9	; 169
    506a:	f2 e2       	ldi	r31, 0x22	; 34
    506c:	04 e0       	ldi	r16, 0x04	; 4
    506e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5070:	e1 ea       	ldi	r30, 0xA1	; 161
    5072:	f2 e2       	ldi	r31, 0x22	; 34
    5074:	04 e0       	ldi	r16, 0x04	; 4
    5076:	05 93       	las	Z, r16
    5078:	3a c0       	rjmp	.+116    	; 0x50ee <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    507a:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    507c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5080:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    5082:	07 df       	rcall	.-498    	; 0x4e92 <udd_ep_abort>
    5084:	81 e8       	ldi	r24, 0x81	; 129
    5086:	05 df       	rcall	.-502    	; 0x4e92 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5088:	82 e0       	ldi	r24, 0x02	; 2
    508a:	03 df       	rcall	.-506    	; 0x4e92 <udd_ep_abort>
    508c:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    508e:	01 df       	rcall	.-510    	; 0x4e92 <udd_ep_abort>
    5090:	0e 94 65 35 	call	0x6aca	; 0x6aca <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    5094:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    5098:	e4 e9       	ldi	r30, 0x94	; 148
    509a:	f2 e2       	ldi	r31, 0x22	; 34
	udd_endpoint_clear_status(ep_ctrl);
    509c:	15 86       	std	Z+13, r1	; 0x0d
    509e:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    50a0:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    50a2:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    50a4:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    50a6:	15 8a       	std	Z+21, r1	; 0x15
    50a8:	94 8b       	std	Z+20, r25	; 0x14
    50aa:	85 8b       	std	Z+21, r24	; 0x15
    50ac:	8c e4       	ldi	r24, 0x4C	; 76
		// Reset endpoint control management
		udd_ctrl_init();
    50ae:	92 e2       	ldi	r25, 0x22	; 34
    50b0:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    50b2:	91 8b       	std	Z+17, r25	; 0x11
    50b4:	91 d9       	rcall	.-3294   	; 0x43d8 <udd_ctrl_init>
		udd_ack_suspend_event();
    50b6:	1b c0       	rjmp	.+54     	; 0x50ee <__vector_125+0x14c>
    50b8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    50bc:	86 ff       	sbrs	r24, 6
    50be:	07 c0       	rjmp	.+14     	; 0x50ce <__vector_125+0x12c>
    50c0:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    50c2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    50c6:	80 e0       	ldi	r24, 0x00	; 0
    50c8:	4f d9       	rcall	.-3426   	; 0x4368 <udd_sleep_mode>
		udd_ack_resume_event();
    50ca:	e3 d4       	rcall	.+2502   	; 0x5a92 <usb_callback_suspend_action>
    50cc:	10 c0       	rjmp	.+32     	; 0x50ee <__vector_125+0x14c>
    50ce:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    50d2:	85 ff       	sbrs	r24, 5
    50d4:	0c c0       	rjmp	.+24     	; 0x50ee <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    50d6:	80 e2       	ldi	r24, 0x20	; 32
    50d8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    50dc:	81 e0       	ldi	r24, 0x01	; 1
    50de:	44 d9       	rcall	.-3448   	; 0x4368 <udd_sleep_mode>
    50e0:	d9 d4       	rcall	.+2482   	; 0x5a94 <usb_callback_resume_action>
    50e2:	05 c0       	rjmp	.+10     	; 0x50ee <__vector_125+0x14c>
    50e4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    50e8:	84 fd       	sbrc	r24, 4
    50ea:	c7 cf       	rjmp	.-114    	; 0x507a <__vector_125+0xd8>
    50ec:	e5 cf       	rjmp	.-54     	; 0x50b8 <__vector_125+0x116>
    50ee:	ff 91       	pop	r31
    50f0:	ef 91       	pop	r30
    50f2:	bf 91       	pop	r27
    50f4:	af 91       	pop	r26
    50f6:	9f 91       	pop	r25
    50f8:	8f 91       	pop	r24
    50fa:	7f 91       	pop	r23
    50fc:	6f 91       	pop	r22
    50fe:	5f 91       	pop	r21
    5100:	4f 91       	pop	r20
    5102:	3f 91       	pop	r19
    5104:	2f 91       	pop	r18
    5106:	0f 91       	pop	r16
    5108:	0f 90       	pop	r0
    510a:	0b be       	out	0x3b, r0	; 59
    510c:	0f 90       	pop	r0
    510e:	0f be       	out	0x3f, r0	; 63
    5110:	0f 90       	pop	r0
    5112:	1f 90       	pop	r1
    5114:	18 95       	reti

00005116 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    5116:	1f 92       	push	r1
    5118:	0f 92       	push	r0
    511a:	0f b6       	in	r0, 0x3f	; 63
    511c:	0f 92       	push	r0
    511e:	11 24       	eor	r1, r1
    5120:	0b b6       	in	r0, 0x3b	; 59
    5122:	0f 92       	push	r0
    5124:	0f 93       	push	r16
    5126:	1f 93       	push	r17
    5128:	2f 93       	push	r18
    512a:	3f 93       	push	r19
    512c:	4f 93       	push	r20
    512e:	5f 93       	push	r21
    5130:	6f 93       	push	r22
    5132:	7f 93       	push	r23
    5134:	8f 93       	push	r24
    5136:	9f 93       	push	r25
    5138:	af 93       	push	r26
    513a:	bf 93       	push	r27
    513c:	cf 93       	push	r28
    513e:	df 93       	push	r29
    5140:	ef 93       	push	r30
    5142:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    5144:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5148:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    514a:	03 c0       	rjmp	.+6      	; 0x5152 <__vector_126+0x3c>
    514c:	3e da       	rcall	.-2948   	; 0x45ca <udd_ctrl_interrupt_tc_setup>
    514e:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    5150:	c4 c0       	rjmp	.+392    	; 0x52da <__vector_126+0x1c4>
    5152:	82 e0       	ldi	r24, 0x02	; 2
    5154:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    5158:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    515c:	81 95       	neg	r24
    515e:	88 0f       	add	r24, r24
    5160:	e0 ea       	ldi	r30, 0xA0	; 160
    5162:	f2 e2       	ldi	r31, 0x22	; 34
    5164:	e8 1b       	sub	r30, r24
    5166:	f1 09       	sbc	r31, r1
    5168:	20 81       	ld	r18, Z
    516a:	31 81       	ldd	r19, Z+1	; 0x01
    516c:	20 5a       	subi	r18, 0xA0	; 160
    516e:	32 42       	sbci	r19, 0x22	; 34
    5170:	36 95       	lsr	r19
    5172:	27 95       	ror	r18
    5174:	36 95       	lsr	r19
    5176:	27 95       	ror	r18
    5178:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    517a:	27 95       	ror	r18
    517c:	82 2f       	mov	r24, r18
    517e:	86 95       	lsr	r24
    5180:	20 fd       	sbrc	r18, 0
    5182:	02 c0       	rjmp	.+4      	; 0x5188 <__vector_126+0x72>
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	01 c0       	rjmp	.+2      	; 0x518a <__vector_126+0x74>
    5188:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    518a:	89 0f       	add	r24, r25
    518c:	e8 2f       	mov	r30, r24
    518e:	ef 70       	andi	r30, 0x0F	; 15
    5190:	f0 e0       	ldi	r31, 0x00	; 0
    5192:	ee 0f       	add	r30, r30
    5194:	ff 1f       	adc	r31, r31
    5196:	28 2f       	mov	r18, r24
    5198:	08 2e       	mov	r0, r24
    519a:	00 0c       	add	r0, r0
    519c:	33 0b       	sbc	r19, r19
    519e:	22 27       	eor	r18, r18
    51a0:	33 0f       	add	r19, r19
    51a2:	22 1f       	adc	r18, r18
    51a4:	33 27       	eor	r19, r19
    51a6:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    51a8:	f3 1f       	adc	r31, r19
    51aa:	df 01       	movw	r26, r30
    51ac:	aa 0f       	add	r26, r26
    51ae:	bb 1f       	adc	r27, r27
    51b0:	aa 0f       	add	r26, r26
    51b2:	bb 1f       	adc	r27, r27
    51b4:	aa 0f       	add	r26, r26
    51b6:	bb 1f       	adc	r27, r27
    51b8:	ac 56       	subi	r26, 0x6C	; 108
    51ba:	bd 4d       	sbci	r27, 0xDD	; 221
    51bc:	1c 96       	adiw	r26, 0x0c	; 12
    51be:	9c 91       	ld	r25, X
    51c0:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    51c2:	8b c0       	rjmp	.+278    	; 0x52da <__vector_126+0x1c4>
    51c4:	ee 0f       	add	r30, r30
    51c6:	ff 1f       	adc	r31, r31
    51c8:	ee 0f       	add	r30, r30
    51ca:	ff 1f       	adc	r31, r31
    51cc:	ee 0f       	add	r30, r30
    51ce:	ff 1f       	adc	r31, r31
    51d0:	e0 56       	subi	r30, 0x60	; 96
    51d2:	fd 4d       	sbci	r31, 0xDD	; 221
    51d4:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    51d6:	06 93       	lac	Z, r16
    51d8:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    51da:	7a c0       	rjmp	.+244    	; 0x52d0 <__vector_126+0x1ba>
    51dc:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    51e0:	84 30       	cpi	r24, 0x04	; 4
    51e2:	19 f4       	brne	.+6      	; 0x51ea <__vector_126+0xd4>
    51e4:	3a d9       	rcall	.-3468   	; 0x445a <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    51e6:	f8 d8       	rcall	.-3600   	; 0x43d8 <udd_ctrl_init>
    51e8:	78 c0       	rjmp	.+240    	; 0x52da <__vector_126+0x1c4>
    51ea:	00 91 a2 22 	lds	r16, 0x22A2	; 0x8022a2 <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    51ee:	10 91 a3 22 	lds	r17, 0x22A3	; 0x8022a3 <udd_sram+0xf>
    51f2:	80 91 95 25 	lds	r24, 0x2595	; 0x802595 <udd_g_ctrlreq+0xa>
    51f6:	90 91 96 25 	lds	r25, 0x2596	; 0x802596 <udd_g_ctrlreq+0xb>
    51fa:	c0 91 8c 22 	lds	r28, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans>
    51fe:	d0 91 8d 22 	lds	r29, 0x228D	; 0x80228d <udd_ctrl_payload_nb_trans+0x1>
    5202:	98 01       	movw	r18, r16
    5204:	2c 0f       	add	r18, r28
    5206:	3d 1f       	adc	r19, r29
    5208:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    520a:	93 07       	cpc	r25, r19
    520c:	18 f4       	brcc	.+6      	; 0x5214 <__vector_126+0xfe>
    520e:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    5210:	0c 1b       	sub	r16, r28
    5212:	1d 0b       	sbc	r17, r29
    5214:	80 91 93 25 	lds	r24, 0x2593	; 0x802593 <udd_g_ctrlreq+0x8>
    5218:	90 91 94 25 	lds	r25, 0x2594	; 0x802594 <udd_g_ctrlreq+0x9>
    521c:	a8 01       	movw	r20, r16
    521e:	6c e4       	ldi	r22, 0x4C	; 76
    5220:	72 e2       	ldi	r23, 0x22	; 34
    5222:	8c 0f       	add	r24, r28
    5224:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    5226:	0e 94 26 3b 	call	0x764c	; 0x764c <memcpy>
    522a:	c0 0f       	add	r28, r16
    522c:	d1 1f       	adc	r29, r17
    522e:	c0 93 8c 22 	sts	0x228C, r28	; 0x80228c <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    5232:	d0 93 8d 22 	sts	0x228D, r29	; 0x80228d <udd_ctrl_payload_nb_trans+0x1>
    5236:	00 34       	cpi	r16, 0x40	; 64
    5238:	11 05       	cpc	r17, r1
    523a:	69 f4       	brne	.+26     	; 0x5256 <__vector_126+0x140>
    523c:	80 91 8e 22 	lds	r24, 0x228E	; 0x80228e <udd_ctrl_prev_payload_nb_trans>
    5240:	90 91 8f 22 	lds	r25, 0x228F	; 0x80228f <udd_ctrl_prev_payload_nb_trans+0x1>
    5244:	8c 0f       	add	r24, r28
    5246:	9d 1f       	adc	r25, r29
    5248:	20 91 91 25 	lds	r18, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    524c:	30 91 92 25 	lds	r19, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    5250:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    5252:	93 07       	cpc	r25, r19
    5254:	80 f0       	brcs	.+32     	; 0x5276 <__vector_126+0x160>
    5256:	eb e8       	ldi	r30, 0x8B	; 139
    5258:	f5 e2       	ldi	r31, 0x25	; 37
		if (NULL != udd_g_ctrlreq.over_under_run) {
    525a:	c2 87       	std	Z+10, r28	; 0x0a
    525c:	d3 87       	std	Z+11, r29	; 0x0b
    525e:	06 84       	ldd	r0, Z+14	; 0x0e
    5260:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    5262:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    5264:	30 97       	sbiw	r30, 0x00	; 0
    5266:	29 f0       	breq	.+10     	; 0x5272 <__vector_126+0x15c>
    5268:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    526a:	81 11       	cpse	r24, r1
    526c:	02 c0       	rjmp	.+4      	; 0x5272 <__vector_126+0x15c>
    526e:	d9 d8       	rcall	.-3662   	; 0x4422 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    5270:	34 c0       	rjmp	.+104    	; 0x52da <__vector_126+0x1c4>
    5272:	e5 d8       	rcall	.-3638   	; 0x443e <udd_ctrl_send_zlp_in>
    5274:	32 c0       	rjmp	.+100    	; 0x52da <__vector_126+0x1c4>
    5276:	80 91 95 25 	lds	r24, 0x2595	; 0x802595 <udd_g_ctrlreq+0xa>
    527a:	90 91 96 25 	lds	r25, 0x2596	; 0x802596 <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    527e:	c8 17       	cp	r28, r24
    5280:	d9 07       	cpc	r29, r25
    5282:	f9 f4       	brne	.+62     	; 0x52c2 <__vector_126+0x1ac>
    5284:	e0 91 99 25 	lds	r30, 0x2599	; 0x802599 <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    5288:	f0 91 9a 25 	lds	r31, 0x259A	; 0x80259a <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    528c:	30 97       	sbiw	r30, 0x00	; 0
    528e:	11 f4       	brne	.+4      	; 0x5294 <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    5290:	c8 d8       	rcall	.-3696   	; 0x4422 <udd_ctrl_stall_data>
    5292:	23 c0       	rjmp	.+70     	; 0x52da <__vector_126+0x1c4>
    5294:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    5296:	81 11       	cpse	r24, r1
    5298:	02 c0       	rjmp	.+4      	; 0x529e <__vector_126+0x188>
    529a:	c3 d8       	rcall	.-3706   	; 0x4422 <udd_ctrl_stall_data>
    529c:	1e c0       	rjmp	.+60     	; 0x52da <__vector_126+0x1c4>
    529e:	20 91 8e 22 	lds	r18, 0x228E	; 0x80228e <udd_ctrl_prev_payload_nb_trans>
    52a2:	30 91 8f 22 	lds	r19, 0x228F	; 0x80228f <udd_ctrl_prev_payload_nb_trans+0x1>
    52a6:	80 91 8c 22 	lds	r24, 0x228C	; 0x80228c <udd_ctrl_payload_nb_trans>
    52aa:	90 91 8d 22 	lds	r25, 0x228D	; 0x80228d <udd_ctrl_payload_nb_trans+0x1>
    52ae:	82 0f       	add	r24, r18
    52b0:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    52b2:	80 93 8e 22 	sts	0x228E, r24	; 0x80228e <udd_ctrl_prev_payload_nb_trans>
    52b6:	90 93 8f 22 	sts	0x228F, r25	; 0x80228f <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    52ba:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    52be:	10 92 8d 22 	sts	0x228D, r1	; 0x80228d <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    52c2:	e0 ea       	ldi	r30, 0xA0	; 160
    52c4:	f2 e2       	ldi	r31, 0x22	; 34
		udd_ctrl_in_sent();
    52c6:	02 e0       	ldi	r16, 0x02	; 2
    52c8:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    52ca:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    52cc:	06 93       	lac	Z, r16
    52ce:	05 c0       	rjmp	.+10     	; 0x52da <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    52d0:	80 38       	cpi	r24, 0x80	; 128
    52d2:	11 f4       	brne	.+4      	; 0x52d8 <__vector_126+0x1c2>
    52d4:	ca d8       	rcall	.-3692   	; 0x446a <udd_ctrl_in_sent>
    52d6:	01 c0       	rjmp	.+2      	; 0x52da <__vector_126+0x1c4>
    52d8:	ea d9       	rcall	.-3116   	; 0x46ae <udd_ep_trans_complet>
    52da:	ff 91       	pop	r31
    52dc:	ef 91       	pop	r30
    52de:	df 91       	pop	r29
    52e0:	cf 91       	pop	r28
    52e2:	bf 91       	pop	r27
    52e4:	af 91       	pop	r26
    52e6:	9f 91       	pop	r25
    52e8:	8f 91       	pop	r24
    52ea:	7f 91       	pop	r23
    52ec:	6f 91       	pop	r22
    52ee:	5f 91       	pop	r21
    52f0:	4f 91       	pop	r20
    52f2:	3f 91       	pop	r19
    52f4:	2f 91       	pop	r18
    52f6:	1f 91       	pop	r17
    52f8:	0f 91       	pop	r16
    52fa:	0f 90       	pop	r0
    52fc:	0b be       	out	0x3b, r0	; 59
    52fe:	0f 90       	pop	r0
    5300:	0f be       	out	0x3f, r0	; 63
    5302:	0f 90       	pop	r0
    5304:	1f 90       	pop	r1
    5306:	18 95       	reti

00005308 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    5308:	cf 92       	push	r12
    530a:	df 92       	push	r13
    530c:	ef 92       	push	r14
    530e:	ff 92       	push	r15
    5310:	cf 93       	push	r28
    5312:	df 93       	push	r29
    5314:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    5316:	6b 01       	movw	r12, r22
    5318:	e1 2c       	mov	r14, r1
    531a:	f1 2c       	mov	r15, r1
    531c:	60 e8       	ldi	r22, 0x80	; 128
    531e:	73 ec       	ldi	r23, 0xC3	; 195
    5320:	89 ec       	ldi	r24, 0xC9	; 201
    5322:	91 e0       	ldi	r25, 0x01	; 1
    5324:	a7 01       	movw	r20, r14
    5326:	96 01       	movw	r18, r12
    5328:	0e 94 03 39 	call	0x7206	; 0x7206 <__udivmodsi4>
    532c:	ca 01       	movw	r24, r20
    532e:	b9 01       	movw	r22, r18
    5330:	2f ef       	ldi	r18, 0xFF	; 255
    5332:	3f ef       	ldi	r19, 0xFF	; 255
    5334:	40 e0       	ldi	r20, 0x00	; 0
    5336:	50 e0       	ldi	r21, 0x00	; 0
    5338:	0e 94 03 39 	call	0x7206	; 0x7206 <__udivmodsi4>
	if (smallest_div < 1) {
    533c:	21 15       	cp	r18, r1
    533e:	31 05       	cpc	r19, r1
    5340:	29 f4       	brne	.+10     	; 0x534c <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    5342:	81 e0       	ldi	r24, 0x01	; 1
    5344:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    5346:	21 e0       	ldi	r18, 0x01	; 1
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	2d c0       	rjmp	.+90     	; 0x53a6 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    534c:	22 30       	cpi	r18, 0x02	; 2
    534e:	31 05       	cpc	r19, r1
    5350:	28 f4       	brcc	.+10     	; 0x535c <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    5352:	82 e0       	ldi	r24, 0x02	; 2
    5354:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    5356:	22 e0       	ldi	r18, 0x02	; 2
    5358:	30 e0       	ldi	r19, 0x00	; 0
    535a:	25 c0       	rjmp	.+74     	; 0x53a6 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    535c:	24 30       	cpi	r18, 0x04	; 4
    535e:	31 05       	cpc	r19, r1
    5360:	28 f4       	brcc	.+10     	; 0x536c <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    5362:	83 e0       	ldi	r24, 0x03	; 3
    5364:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    5366:	24 e0       	ldi	r18, 0x04	; 4
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	1d c0       	rjmp	.+58     	; 0x53a6 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    536c:	28 30       	cpi	r18, 0x08	; 8
    536e:	31 05       	cpc	r19, r1
    5370:	28 f4       	brcc	.+10     	; 0x537c <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    5372:	84 e0       	ldi	r24, 0x04	; 4
    5374:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    5376:	28 e0       	ldi	r18, 0x08	; 8
    5378:	30 e0       	ldi	r19, 0x00	; 0
    537a:	15 c0       	rjmp	.+42     	; 0x53a6 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    537c:	20 34       	cpi	r18, 0x40	; 64
    537e:	31 05       	cpc	r19, r1
    5380:	28 f4       	brcc	.+10     	; 0x538c <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    5382:	85 e0       	ldi	r24, 0x05	; 5
    5384:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    5386:	20 e4       	ldi	r18, 0x40	; 64
    5388:	30 e0       	ldi	r19, 0x00	; 0
    538a:	0d c0       	rjmp	.+26     	; 0x53a6 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    538c:	2f 3f       	cpi	r18, 0xFF	; 255
    538e:	31 05       	cpc	r19, r1
    5390:	09 f0       	breq	.+2      	; 0x5394 <pwm_set_frequency+0x8c>
    5392:	28 f4       	brcc	.+10     	; 0x539e <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    5394:	86 e0       	ldi	r24, 0x06	; 6
    5396:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    5398:	20 e0       	ldi	r18, 0x00	; 0
    539a:	31 e0       	ldi	r19, 0x01	; 1
    539c:	04 c0       	rjmp	.+8      	; 0x53a6 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    539e:	87 e0       	ldi	r24, 0x07	; 7
    53a0:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    53a2:	20 e0       	ldi	r18, 0x00	; 0
    53a4:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    53a6:	40 e0       	ldi	r20, 0x00	; 0
    53a8:	50 e0       	ldi	r21, 0x00	; 0
    53aa:	60 e8       	ldi	r22, 0x80	; 128
    53ac:	73 ec       	ldi	r23, 0xC3	; 195
    53ae:	89 ec       	ldi	r24, 0xC9	; 201
    53b0:	91 e0       	ldi	r25, 0x01	; 1
    53b2:	0e 94 03 39 	call	0x7206	; 0x7206 <__udivmodsi4>
    53b6:	ca 01       	movw	r24, r20
    53b8:	b9 01       	movw	r22, r18
    53ba:	a7 01       	movw	r20, r14
    53bc:	96 01       	movw	r18, r12
    53be:	0e 94 03 39 	call	0x7206	; 0x7206 <__udivmodsi4>
    53c2:	2d 83       	std	Y+5, r18	; 0x05
    53c4:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    53c6:	24 36       	cpi	r18, 0x64	; 100
    53c8:	31 05       	cpc	r19, r1
    53ca:	18 f4       	brcc	.+6      	; 0x53d2 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    53cc:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    53ce:	1d 82       	std	Y+5, r1	; 0x05
    53d0:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    53d2:	df 91       	pop	r29
    53d4:	cf 91       	pop	r28
    53d6:	ff 90       	pop	r15
    53d8:	ef 90       	pop	r14
    53da:	df 90       	pop	r13
    53dc:	cf 90       	pop	r12
    53de:	08 95       	ret

000053e0 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    53e0:	0f 93       	push	r16
    53e2:	1f 93       	push	r17
    53e4:	cf 93       	push	r28
    53e6:	df 93       	push	r29
    53e8:	ec 01       	movw	r28, r24
    53ea:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    53ec:	86 2f       	mov	r24, r22
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	87 30       	cpi	r24, 0x07	; 7
    53f2:	91 05       	cpc	r25, r1
    53f4:	08 f0       	brcs	.+2      	; 0x53f8 <pwm_init+0x18>
    53f6:	8b c0       	rjmp	.+278    	; 0x550e <pwm_init+0x12e>
    53f8:	fc 01       	movw	r30, r24
    53fa:	88 27       	eor	r24, r24
    53fc:	eb 5f       	subi	r30, 0xFB	; 251
    53fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5400:	8f 4f       	sbci	r24, 0xFF	; 255
    5402:	0c 94 25 39 	jmp	0x724a	; 0x724a <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    5406:	80 e0       	ldi	r24, 0x00	; 0
    5408:	98 e0       	ldi	r25, 0x08	; 8
    540a:	88 83       	st	Y, r24
    540c:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    540e:	e0 e4       	ldi	r30, 0x40	; 64
    5410:	f6 e0       	ldi	r31, 0x06	; 6
    5412:	30 81       	ld	r19, Z
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	90 e0       	ldi	r25, 0x00	; 0
    5418:	2f ef       	ldi	r18, 0xFF	; 255
    541a:	24 0f       	add	r18, r20
    541c:	02 c0       	rjmp	.+4      	; 0x5422 <pwm_init+0x42>
    541e:	88 0f       	add	r24, r24
    5420:	99 1f       	adc	r25, r25
    5422:	2a 95       	dec	r18
    5424:	e2 f7       	brpl	.-8      	; 0x541e <pwm_init+0x3e>
    5426:	83 2b       	or	r24, r19
    5428:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    542a:	71 c0       	rjmp	.+226    	; 0x550e <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    542c:	80 e4       	ldi	r24, 0x40	; 64
    542e:	98 e0       	ldi	r25, 0x08	; 8
    5430:	88 83       	st	Y, r24
    5432:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    5434:	e0 e4       	ldi	r30, 0x40	; 64
    5436:	f6 e0       	ldi	r31, 0x06	; 6
    5438:	30 81       	ld	r19, Z
    543a:	81 e0       	ldi	r24, 0x01	; 1
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	23 e0       	ldi	r18, 0x03	; 3
    5440:	24 0f       	add	r18, r20
    5442:	02 c0       	rjmp	.+4      	; 0x5448 <pwm_init+0x68>
    5444:	88 0f       	add	r24, r24
    5446:	99 1f       	adc	r25, r25
    5448:	2a 95       	dec	r18
    544a:	e2 f7       	brpl	.-8      	; 0x5444 <pwm_init+0x64>
    544c:	83 2b       	or	r24, r19
    544e:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    5450:	5e c0       	rjmp	.+188    	; 0x550e <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    5452:	80 e0       	ldi	r24, 0x00	; 0
    5454:	99 e0       	ldi	r25, 0x09	; 9
    5456:	88 83       	st	Y, r24
    5458:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    545a:	e0 e6       	ldi	r30, 0x60	; 96
    545c:	f6 e0       	ldi	r31, 0x06	; 6
    545e:	30 81       	ld	r19, Z
    5460:	81 e0       	ldi	r24, 0x01	; 1
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	2f ef       	ldi	r18, 0xFF	; 255
    5466:	24 0f       	add	r18, r20
    5468:	02 c0       	rjmp	.+4      	; 0x546e <pwm_init+0x8e>
    546a:	88 0f       	add	r24, r24
    546c:	99 1f       	adc	r25, r25
    546e:	2a 95       	dec	r18
    5470:	e2 f7       	brpl	.-8      	; 0x546a <pwm_init+0x8a>
    5472:	83 2b       	or	r24, r19
    5474:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    5476:	4b c0       	rjmp	.+150    	; 0x550e <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    5478:	80 e4       	ldi	r24, 0x40	; 64
    547a:	99 e0       	ldi	r25, 0x09	; 9
    547c:	88 83       	st	Y, r24
    547e:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    5480:	e0 e6       	ldi	r30, 0x60	; 96
    5482:	f6 e0       	ldi	r31, 0x06	; 6
    5484:	30 81       	ld	r19, Z
    5486:	81 e0       	ldi	r24, 0x01	; 1
    5488:	90 e0       	ldi	r25, 0x00	; 0
    548a:	23 e0       	ldi	r18, 0x03	; 3
    548c:	24 0f       	add	r18, r20
    548e:	02 c0       	rjmp	.+4      	; 0x5494 <pwm_init+0xb4>
    5490:	88 0f       	add	r24, r24
    5492:	99 1f       	adc	r25, r25
    5494:	2a 95       	dec	r18
    5496:	e2 f7       	brpl	.-8      	; 0x5490 <pwm_init+0xb0>
    5498:	83 2b       	or	r24, r19
    549a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    549c:	38 c0       	rjmp	.+112    	; 0x550e <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    549e:	80 e0       	ldi	r24, 0x00	; 0
    54a0:	9a e0       	ldi	r25, 0x0A	; 10
    54a2:	88 83       	st	Y, r24
    54a4:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    54a6:	e0 e8       	ldi	r30, 0x80	; 128
    54a8:	f6 e0       	ldi	r31, 0x06	; 6
    54aa:	30 81       	ld	r19, Z
    54ac:	81 e0       	ldi	r24, 0x01	; 1
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	2f ef       	ldi	r18, 0xFF	; 255
    54b2:	24 0f       	add	r18, r20
    54b4:	02 c0       	rjmp	.+4      	; 0x54ba <pwm_init+0xda>
    54b6:	88 0f       	add	r24, r24
    54b8:	99 1f       	adc	r25, r25
    54ba:	2a 95       	dec	r18
    54bc:	e2 f7       	brpl	.-8      	; 0x54b6 <pwm_init+0xd6>
    54be:	83 2b       	or	r24, r19
    54c0:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    54c2:	25 c0       	rjmp	.+74     	; 0x550e <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    54c4:	80 e4       	ldi	r24, 0x40	; 64
    54c6:	9a e0       	ldi	r25, 0x0A	; 10
    54c8:	88 83       	st	Y, r24
    54ca:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    54cc:	e0 e8       	ldi	r30, 0x80	; 128
    54ce:	f6 e0       	ldi	r31, 0x06	; 6
    54d0:	30 81       	ld	r19, Z
    54d2:	81 e0       	ldi	r24, 0x01	; 1
    54d4:	90 e0       	ldi	r25, 0x00	; 0
    54d6:	23 e0       	ldi	r18, 0x03	; 3
    54d8:	24 0f       	add	r18, r20
    54da:	02 c0       	rjmp	.+4      	; 0x54e0 <pwm_init+0x100>
    54dc:	88 0f       	add	r24, r24
    54de:	99 1f       	adc	r25, r25
    54e0:	2a 95       	dec	r18
    54e2:	e2 f7       	brpl	.-8      	; 0x54dc <pwm_init+0xfc>
    54e4:	83 2b       	or	r24, r19
    54e6:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    54e8:	12 c0       	rjmp	.+36     	; 0x550e <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    54ea:	80 e0       	ldi	r24, 0x00	; 0
    54ec:	9b e0       	ldi	r25, 0x0B	; 11
    54ee:	88 83       	st	Y, r24
    54f0:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    54f2:	e0 ea       	ldi	r30, 0xA0	; 160
    54f4:	f6 e0       	ldi	r31, 0x06	; 6
    54f6:	30 81       	ld	r19, Z
    54f8:	81 e0       	ldi	r24, 0x01	; 1
    54fa:	90 e0       	ldi	r25, 0x00	; 0
    54fc:	2f ef       	ldi	r18, 0xFF	; 255
    54fe:	24 0f       	add	r18, r20
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <pwm_init+0x126>
    5502:	88 0f       	add	r24, r24
    5504:	99 1f       	adc	r25, r25
    5506:	2a 95       	dec	r18
    5508:	e2 f7       	brpl	.-8      	; 0x5502 <pwm_init+0x122>
    550a:	83 2b       	or	r24, r19
    550c:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    550e:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    5510:	42 30       	cpi	r20, 0x02	; 2
    5512:	61 f0       	breq	.+24     	; 0x552c <pwm_init+0x14c>
    5514:	18 f4       	brcc	.+6      	; 0x551c <pwm_init+0x13c>
    5516:	41 30       	cpi	r20, 0x01	; 1
    5518:	31 f0       	breq	.+12     	; 0x5526 <pwm_init+0x146>
    551a:	10 c0       	rjmp	.+32     	; 0x553c <pwm_init+0x15c>
    551c:	43 30       	cpi	r20, 0x03	; 3
    551e:	49 f0       	breq	.+18     	; 0x5532 <pwm_init+0x152>
    5520:	44 30       	cpi	r20, 0x04	; 4
    5522:	51 f0       	breq	.+20     	; 0x5538 <pwm_init+0x158>
    5524:	0b c0       	rjmp	.+22     	; 0x553c <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    5526:	80 e1       	ldi	r24, 0x10	; 16
    5528:	8b 83       	std	Y+3, r24	; 0x03
		break;
    552a:	08 c0       	rjmp	.+16     	; 0x553c <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    552c:	80 e2       	ldi	r24, 0x20	; 32
    552e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    5530:	05 c0       	rjmp	.+10     	; 0x553c <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    5532:	80 e4       	ldi	r24, 0x40	; 64
    5534:	8b 83       	std	Y+3, r24	; 0x03
		break;
    5536:	02 c0       	rjmp	.+4      	; 0x553c <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    5538:	80 e8       	ldi	r24, 0x80	; 128
    553a:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    553c:	88 81       	ld	r24, Y
    553e:	99 81       	ldd	r25, Y+1	; 0x01
    5540:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    5544:	e8 81       	ld	r30, Y
    5546:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    5548:	81 81       	ldd	r24, Z+1	; 0x01
    554a:	88 7f       	andi	r24, 0xF8	; 248
    554c:	83 60       	ori	r24, 0x03	; 3
    554e:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    5550:	1d 82       	std	Y+5, r1	; 0x05
    5552:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    5554:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    5556:	e8 81       	ld	r30, Y
    5558:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    555a:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    555c:	80 7f       	andi	r24, 0xF0	; 240
    555e:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    5560:	b8 01       	movw	r22, r16
    5562:	ce 01       	movw	r24, r28
    5564:	d1 de       	rcall	.-606    	; 0x5308 <pwm_set_frequency>
}
    5566:	df 91       	pop	r29
    5568:	cf 91       	pop	r28
    556a:	1f 91       	pop	r17
    556c:	0f 91       	pop	r16
    556e:	08 95       	ret

00005570 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    5570:	cf 93       	push	r28
    5572:	df 93       	push	r29
    5574:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    5576:	2d 81       	ldd	r18, Y+5	; 0x05
    5578:	3e 81       	ldd	r19, Y+6	; 0x06
    557a:	a6 2f       	mov	r26, r22
    557c:	b0 e0       	ldi	r27, 0x00	; 0
    557e:	0e 94 2d 39 	call	0x725a	; 0x725a <__umulhisi3>
    5582:	24 e6       	ldi	r18, 0x64	; 100
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	40 e0       	ldi	r20, 0x00	; 0
    5588:	50 e0       	ldi	r21, 0x00	; 0
    558a:	0e 94 03 39 	call	0x7206	; 0x7206 <__udivmodsi4>
    558e:	8a 81       	ldd	r24, Y+2	; 0x02
    5590:	e8 81       	ld	r30, Y
    5592:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    5594:	e6 fd       	sbrc	r30, 6
    5596:	17 c0       	rjmp	.+46     	; 0x55c6 <pwm_start+0x56>
		switch (channel_index) {
    5598:	82 30       	cpi	r24, 0x02	; 2
    559a:	61 f0       	breq	.+24     	; 0x55b4 <pwm_start+0x44>
    559c:	18 f4       	brcc	.+6      	; 0x55a4 <pwm_start+0x34>
    559e:	81 30       	cpi	r24, 0x01	; 1
    55a0:	31 f0       	breq	.+12     	; 0x55ae <pwm_start+0x3e>
    55a2:	1b c0       	rjmp	.+54     	; 0x55da <pwm_start+0x6a>
    55a4:	83 30       	cpi	r24, 0x03	; 3
    55a6:	49 f0       	breq	.+18     	; 0x55ba <pwm_start+0x4a>
    55a8:	84 30       	cpi	r24, 0x04	; 4
    55aa:	51 f0       	breq	.+20     	; 0x55c0 <pwm_start+0x50>
    55ac:	16 c0       	rjmp	.+44     	; 0x55da <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    55ae:	20 af       	std	Z+56, r18	; 0x38
    55b0:	31 af       	std	Z+57, r19	; 0x39
    55b2:	13 c0       	rjmp	.+38     	; 0x55da <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    55b4:	22 af       	std	Z+58, r18	; 0x3a
    55b6:	33 af       	std	Z+59, r19	; 0x3b
    55b8:	10 c0       	rjmp	.+32     	; 0x55da <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    55ba:	24 af       	std	Z+60, r18	; 0x3c
    55bc:	35 af       	std	Z+61, r19	; 0x3d
    55be:	0d c0       	rjmp	.+26     	; 0x55da <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    55c0:	26 af       	std	Z+62, r18	; 0x3e
    55c2:	37 af       	std	Z+63, r19	; 0x3f
    55c4:	0a c0       	rjmp	.+20     	; 0x55da <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    55c6:	81 30       	cpi	r24, 0x01	; 1
    55c8:	19 f0       	breq	.+6      	; 0x55d0 <pwm_start+0x60>
    55ca:	82 30       	cpi	r24, 0x02	; 2
    55cc:	21 f0       	breq	.+8      	; 0x55d6 <pwm_start+0x66>
    55ce:	05 c0       	rjmp	.+10     	; 0x55da <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    55d0:	20 af       	std	Z+56, r18	; 0x38
    55d2:	31 af       	std	Z+57, r19	; 0x39
    55d4:	02 c0       	rjmp	.+4      	; 0x55da <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    55d6:	22 af       	std	Z+58, r18	; 0x3a
    55d8:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    55da:	8d 81       	ldd	r24, Y+5	; 0x05
    55dc:	9e 81       	ldd	r25, Y+6	; 0x06
    55de:	e8 81       	ld	r30, Y
    55e0:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    55e2:	86 a3       	std	Z+38, r24	; 0x26
    55e4:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    55e6:	8b 81       	ldd	r24, Y+3	; 0x03
    55e8:	e8 81       	ld	r30, Y
    55ea:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    55ec:	e6 fd       	sbrc	r30, 6
    55ee:	04 c0       	rjmp	.+8      	; 0x55f8 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    55f0:	91 81       	ldd	r25, Z+1	; 0x01
    55f2:	89 2b       	or	r24, r25
    55f4:	81 83       	std	Z+1, r24	; 0x01
    55f6:	04 c0       	rjmp	.+8      	; 0x5600 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    55f8:	91 81       	ldd	r25, Z+1	; 0x01
    55fa:	80 73       	andi	r24, 0x30	; 48
    55fc:	89 2b       	or	r24, r25
    55fe:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    5600:	e8 81       	ld	r30, Y
    5602:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    5604:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    5606:	80 7f       	andi	r24, 0xF0	; 240
    5608:	9c 81       	ldd	r25, Y+4	; 0x04
    560a:	89 2b       	or	r24, r25
    560c:	80 83       	st	Z, r24
}
    560e:	df 91       	pop	r29
    5610:	cf 91       	pop	r28
    5612:	08 95       	ret

00005614 <cb_rtc_alarm>:

void halt(void)
{
	/* MAIN Loop Shutdown */

	runmode = 0;
    5614:	08 95       	ret

00005616 <cb_adc_a>:
    5616:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    561a:	4e 5b       	subi	r20, 0xBE	; 190
    561c:	51 09       	sbc	r21, r1
    561e:	60 ff       	sbrs	r22, 0
    5620:	d3 c0       	rjmp	.+422    	; 0x57c8 <cb_adc_a+0x1b2>
    5622:	82 95       	swap	r24
    5624:	8f 70       	andi	r24, 0x0F	; 15
    5626:	81 30       	cpi	r24, 0x01	; 1
    5628:	31 f0       	breq	.+12     	; 0x5636 <cb_adc_a+0x20>
    562a:	08 f4       	brcc	.+2      	; 0x562e <cb_adc_a+0x18>
    562c:	8a c0       	rjmp	.+276    	; 0x5742 <cb_adc_a+0x12c>
    562e:	82 30       	cpi	r24, 0x02	; 2
    5630:	09 f4       	brne	.+2      	; 0x5634 <cb_adc_a+0x1e>
    5632:	44 c0       	rjmp	.+136    	; 0x56bc <cb_adc_a+0xa6>
    5634:	08 95       	ret
    5636:	05 2e       	mov	r0, r21
    5638:	00 0c       	add	r0, r0
    563a:	66 0b       	sbc	r22, r22
    563c:	77 0b       	sbc	r23, r23
    563e:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <g_adc_vctcxo_sum>
    5642:	90 91 23 24 	lds	r25, 0x2423	; 0x802423 <g_adc_vctcxo_sum+0x1>
    5646:	a0 91 24 24 	lds	r26, 0x2424	; 0x802424 <g_adc_vctcxo_sum+0x2>
    564a:	b0 91 25 24 	lds	r27, 0x2425	; 0x802425 <g_adc_vctcxo_sum+0x3>
    564e:	48 0f       	add	r20, r24
    5650:	59 1f       	adc	r21, r25
    5652:	6a 1f       	adc	r22, r26
    5654:	7b 1f       	adc	r23, r27
    5656:	40 93 22 24 	sts	0x2422, r20	; 0x802422 <g_adc_vctcxo_sum>
    565a:	50 93 23 24 	sts	0x2423, r21	; 0x802423 <g_adc_vctcxo_sum+0x1>
    565e:	60 93 24 24 	sts	0x2424, r22	; 0x802424 <g_adc_vctcxo_sum+0x2>
    5662:	70 93 25 24 	sts	0x2425, r23	; 0x802425 <g_adc_vctcxo_sum+0x3>
    5666:	80 91 20 24 	lds	r24, 0x2420	; 0x802420 <g_adc_vctcxo_cnt>
    566a:	90 91 21 24 	lds	r25, 0x2421	; 0x802421 <g_adc_vctcxo_cnt+0x1>
    566e:	01 96       	adiw	r24, 0x01	; 1
    5670:	80 93 20 24 	sts	0x2420, r24	; 0x802420 <g_adc_vctcxo_cnt>
    5674:	90 93 21 24 	sts	0x2421, r25	; 0x802421 <g_adc_vctcxo_cnt+0x1>
    5678:	8f 3f       	cpi	r24, 0xFF	; 255
    567a:	91 05       	cpc	r25, r1
    567c:	09 f0       	breq	.+2      	; 0x5680 <cb_adc_a+0x6a>
    567e:	08 f4       	brcc	.+2      	; 0x5682 <cb_adc_a+0x6c>
    5680:	70 c1       	rjmp	.+736    	; 0x5962 <cb_adc_a+0x34c>
    5682:	68 94       	set
    5684:	16 f8       	bld	r1, 6
    5686:	75 95       	asr	r23
    5688:	67 95       	ror	r22
    568a:	57 95       	ror	r21
    568c:	47 95       	ror	r20
    568e:	16 94       	lsr	r1
    5690:	d1 f7       	brne	.-12     	; 0x5686 <cb_adc_a+0x70>
    5692:	40 93 26 24 	sts	0x2426, r20	; 0x802426 <g_adc_vctcxo_cur>
    5696:	50 93 27 24 	sts	0x2427, r21	; 0x802427 <g_adc_vctcxo_cur+0x1>
    569a:	60 93 28 24 	sts	0x2428, r22	; 0x802428 <g_adc_vctcxo_cur+0x2>
    569e:	70 93 29 24 	sts	0x2429, r23	; 0x802429 <g_adc_vctcxo_cur+0x3>
    56a2:	10 92 20 24 	sts	0x2420, r1	; 0x802420 <g_adc_vctcxo_cnt>
    56a6:	10 92 21 24 	sts	0x2421, r1	; 0x802421 <g_adc_vctcxo_cnt+0x1>
    56aa:	10 92 22 24 	sts	0x2422, r1	; 0x802422 <g_adc_vctcxo_sum>
    56ae:	10 92 23 24 	sts	0x2423, r1	; 0x802423 <g_adc_vctcxo_sum+0x1>
    56b2:	10 92 24 24 	sts	0x2424, r1	; 0x802424 <g_adc_vctcxo_sum+0x2>
    56b6:	10 92 25 24 	sts	0x2425, r1	; 0x802425 <g_adc_vctcxo_sum+0x3>
    56ba:	08 95       	ret
    56bc:	05 2e       	mov	r0, r21
    56be:	00 0c       	add	r0, r0
    56c0:	66 0b       	sbc	r22, r22
    56c2:	77 0b       	sbc	r23, r23
    56c4:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <g_adc_5v0_sum>
    56c8:	90 91 19 24 	lds	r25, 0x2419	; 0x802419 <g_adc_5v0_sum+0x1>
    56cc:	a0 91 1a 24 	lds	r26, 0x241A	; 0x80241a <g_adc_5v0_sum+0x2>
    56d0:	b0 91 1b 24 	lds	r27, 0x241B	; 0x80241b <g_adc_5v0_sum+0x3>
    56d4:	48 0f       	add	r20, r24
    56d6:	59 1f       	adc	r21, r25
    56d8:	6a 1f       	adc	r22, r26
    56da:	7b 1f       	adc	r23, r27
    56dc:	40 93 18 24 	sts	0x2418, r20	; 0x802418 <g_adc_5v0_sum>
    56e0:	50 93 19 24 	sts	0x2419, r21	; 0x802419 <g_adc_5v0_sum+0x1>
    56e4:	60 93 1a 24 	sts	0x241A, r22	; 0x80241a <g_adc_5v0_sum+0x2>
    56e8:	70 93 1b 24 	sts	0x241B, r23	; 0x80241b <g_adc_5v0_sum+0x3>
    56ec:	80 91 16 24 	lds	r24, 0x2416	; 0x802416 <g_adc_5v0_cnt>
    56f0:	90 91 17 24 	lds	r25, 0x2417	; 0x802417 <g_adc_5v0_cnt+0x1>
    56f4:	01 96       	adiw	r24, 0x01	; 1
    56f6:	80 93 16 24 	sts	0x2416, r24	; 0x802416 <g_adc_5v0_cnt>
    56fa:	90 93 17 24 	sts	0x2417, r25	; 0x802417 <g_adc_5v0_cnt+0x1>
    56fe:	8f 3f       	cpi	r24, 0xFF	; 255
    5700:	91 05       	cpc	r25, r1
    5702:	09 f0       	breq	.+2      	; 0x5706 <cb_adc_a+0xf0>
    5704:	08 f4       	brcc	.+2      	; 0x5708 <cb_adc_a+0xf2>
    5706:	2d c1       	rjmp	.+602    	; 0x5962 <cb_adc_a+0x34c>
    5708:	68 94       	set
    570a:	16 f8       	bld	r1, 6
    570c:	75 95       	asr	r23
    570e:	67 95       	ror	r22
    5710:	57 95       	ror	r21
    5712:	47 95       	ror	r20
    5714:	16 94       	lsr	r1
    5716:	d1 f7       	brne	.-12     	; 0x570c <cb_adc_a+0xf6>
    5718:	40 93 1c 24 	sts	0x241C, r20	; 0x80241c <g_adc_5v0_cur>
    571c:	50 93 1d 24 	sts	0x241D, r21	; 0x80241d <g_adc_5v0_cur+0x1>
    5720:	60 93 1e 24 	sts	0x241E, r22	; 0x80241e <g_adc_5v0_cur+0x2>
    5724:	70 93 1f 24 	sts	0x241F, r23	; 0x80241f <g_adc_5v0_cur+0x3>
    5728:	10 92 16 24 	sts	0x2416, r1	; 0x802416 <g_adc_5v0_cnt>
    572c:	10 92 17 24 	sts	0x2417, r1	; 0x802417 <g_adc_5v0_cnt+0x1>
    5730:	10 92 18 24 	sts	0x2418, r1	; 0x802418 <g_adc_5v0_sum>
    5734:	10 92 19 24 	sts	0x2419, r1	; 0x802419 <g_adc_5v0_sum+0x1>
    5738:	10 92 1a 24 	sts	0x241A, r1	; 0x80241a <g_adc_5v0_sum+0x2>
    573c:	10 92 1b 24 	sts	0x241B, r1	; 0x80241b <g_adc_5v0_sum+0x3>
    5740:	08 95       	ret
    5742:	05 2e       	mov	r0, r21
    5744:	00 0c       	add	r0, r0
    5746:	66 0b       	sbc	r22, r22
    5748:	77 0b       	sbc	r23, r23
    574a:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <g_adc_vbat_sum>
    574e:	90 91 0f 24 	lds	r25, 0x240F	; 0x80240f <g_adc_vbat_sum+0x1>
    5752:	a0 91 10 24 	lds	r26, 0x2410	; 0x802410 <g_adc_vbat_sum+0x2>
    5756:	b0 91 11 24 	lds	r27, 0x2411	; 0x802411 <g_adc_vbat_sum+0x3>
    575a:	48 0f       	add	r20, r24
    575c:	59 1f       	adc	r21, r25
    575e:	6a 1f       	adc	r22, r26
    5760:	7b 1f       	adc	r23, r27
    5762:	40 93 0e 24 	sts	0x240E, r20	; 0x80240e <g_adc_vbat_sum>
    5766:	50 93 0f 24 	sts	0x240F, r21	; 0x80240f <g_adc_vbat_sum+0x1>
    576a:	60 93 10 24 	sts	0x2410, r22	; 0x802410 <g_adc_vbat_sum+0x2>
    576e:	70 93 11 24 	sts	0x2411, r23	; 0x802411 <g_adc_vbat_sum+0x3>
    5772:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <g_adc_vbat_cnt>
    5776:	90 91 0d 24 	lds	r25, 0x240D	; 0x80240d <g_adc_vbat_cnt+0x1>
    577a:	01 96       	adiw	r24, 0x01	; 1
    577c:	80 93 0c 24 	sts	0x240C, r24	; 0x80240c <g_adc_vbat_cnt>
    5780:	90 93 0d 24 	sts	0x240D, r25	; 0x80240d <g_adc_vbat_cnt+0x1>
    5784:	8f 3f       	cpi	r24, 0xFF	; 255
    5786:	91 05       	cpc	r25, r1
    5788:	09 f0       	breq	.+2      	; 0x578c <cb_adc_a+0x176>
    578a:	08 f4       	brcc	.+2      	; 0x578e <cb_adc_a+0x178>
    578c:	ea c0       	rjmp	.+468    	; 0x5962 <cb_adc_a+0x34c>
    578e:	68 94       	set
    5790:	16 f8       	bld	r1, 6
    5792:	75 95       	asr	r23
    5794:	67 95       	ror	r22
    5796:	57 95       	ror	r21
    5798:	47 95       	ror	r20
    579a:	16 94       	lsr	r1
    579c:	d1 f7       	brne	.-12     	; 0x5792 <cb_adc_a+0x17c>
    579e:	40 93 12 24 	sts	0x2412, r20	; 0x802412 <g_adc_vbat_cur>
    57a2:	50 93 13 24 	sts	0x2413, r21	; 0x802413 <g_adc_vbat_cur+0x1>
    57a6:	60 93 14 24 	sts	0x2414, r22	; 0x802414 <g_adc_vbat_cur+0x2>
    57aa:	70 93 15 24 	sts	0x2415, r23	; 0x802415 <g_adc_vbat_cur+0x3>
    57ae:	10 92 0c 24 	sts	0x240C, r1	; 0x80240c <g_adc_vbat_cnt>
    57b2:	10 92 0d 24 	sts	0x240D, r1	; 0x80240d <g_adc_vbat_cnt+0x1>
    57b6:	10 92 0e 24 	sts	0x240E, r1	; 0x80240e <g_adc_vbat_sum>
    57ba:	10 92 0f 24 	sts	0x240F, r1	; 0x80240f <g_adc_vbat_sum+0x1>
    57be:	10 92 10 24 	sts	0x2410, r1	; 0x802410 <g_adc_vbat_sum+0x2>
    57c2:	10 92 11 24 	sts	0x2411, r1	; 0x802411 <g_adc_vbat_sum+0x3>
    57c6:	08 95       	ret
    57c8:	61 ff       	sbrs	r22, 1
    57ca:	43 c0       	rjmp	.+134    	; 0x5852 <cb_adc_a+0x23c>
    57cc:	05 2e       	mov	r0, r21
    57ce:	00 0c       	add	r0, r0
    57d0:	66 0b       	sbc	r22, r22
    57d2:	77 0b       	sbc	r23, r23
    57d4:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <g_adc_io_adc4_sum>
    57d8:	90 91 05 24 	lds	r25, 0x2405	; 0x802405 <g_adc_io_adc4_sum+0x1>
    57dc:	a0 91 06 24 	lds	r26, 0x2406	; 0x802406 <g_adc_io_adc4_sum+0x2>
    57e0:	b0 91 07 24 	lds	r27, 0x2407	; 0x802407 <g_adc_io_adc4_sum+0x3>
    57e4:	48 0f       	add	r20, r24
    57e6:	59 1f       	adc	r21, r25
    57e8:	6a 1f       	adc	r22, r26
    57ea:	7b 1f       	adc	r23, r27
    57ec:	40 93 04 24 	sts	0x2404, r20	; 0x802404 <g_adc_io_adc4_sum>
    57f0:	50 93 05 24 	sts	0x2405, r21	; 0x802405 <g_adc_io_adc4_sum+0x1>
    57f4:	60 93 06 24 	sts	0x2406, r22	; 0x802406 <g_adc_io_adc4_sum+0x2>
    57f8:	70 93 07 24 	sts	0x2407, r23	; 0x802407 <g_adc_io_adc4_sum+0x3>
    57fc:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <g_adc_io_adc4_cnt>
    5800:	90 91 03 24 	lds	r25, 0x2403	; 0x802403 <g_adc_io_adc4_cnt+0x1>
    5804:	01 96       	adiw	r24, 0x01	; 1
    5806:	80 93 02 24 	sts	0x2402, r24	; 0x802402 <g_adc_io_adc4_cnt>
    580a:	90 93 03 24 	sts	0x2403, r25	; 0x802403 <g_adc_io_adc4_cnt+0x1>
    580e:	8f 3f       	cpi	r24, 0xFF	; 255
    5810:	91 05       	cpc	r25, r1
    5812:	09 f0       	breq	.+2      	; 0x5816 <cb_adc_a+0x200>
    5814:	08 f4       	brcc	.+2      	; 0x5818 <cb_adc_a+0x202>
    5816:	a5 c0       	rjmp	.+330    	; 0x5962 <cb_adc_a+0x34c>
    5818:	68 94       	set
    581a:	16 f8       	bld	r1, 6
    581c:	75 95       	asr	r23
    581e:	67 95       	ror	r22
    5820:	57 95       	ror	r21
    5822:	47 95       	ror	r20
    5824:	16 94       	lsr	r1
    5826:	d1 f7       	brne	.-12     	; 0x581c <cb_adc_a+0x206>
    5828:	40 93 08 24 	sts	0x2408, r20	; 0x802408 <g_adc_io_adc4_cur>
    582c:	50 93 09 24 	sts	0x2409, r21	; 0x802409 <g_adc_io_adc4_cur+0x1>
    5830:	60 93 0a 24 	sts	0x240A, r22	; 0x80240a <g_adc_io_adc4_cur+0x2>
    5834:	70 93 0b 24 	sts	0x240B, r23	; 0x80240b <g_adc_io_adc4_cur+0x3>
    5838:	10 92 02 24 	sts	0x2402, r1	; 0x802402 <g_adc_io_adc4_cnt>
    583c:	10 92 03 24 	sts	0x2403, r1	; 0x802403 <g_adc_io_adc4_cnt+0x1>
    5840:	10 92 04 24 	sts	0x2404, r1	; 0x802404 <g_adc_io_adc4_sum>
    5844:	10 92 05 24 	sts	0x2405, r1	; 0x802405 <g_adc_io_adc4_sum+0x1>
    5848:	10 92 06 24 	sts	0x2406, r1	; 0x802406 <g_adc_io_adc4_sum+0x2>
    584c:	10 92 07 24 	sts	0x2407, r1	; 0x802407 <g_adc_io_adc4_sum+0x3>
    5850:	08 95       	ret
    5852:	62 ff       	sbrs	r22, 2
    5854:	43 c0       	rjmp	.+134    	; 0x58dc <cb_adc_a+0x2c6>
    5856:	05 2e       	mov	r0, r21
    5858:	00 0c       	add	r0, r0
    585a:	66 0b       	sbc	r22, r22
    585c:	77 0b       	sbc	r23, r23
    585e:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <g_adc_io_adc5_sum>
    5862:	90 91 fb 23 	lds	r25, 0x23FB	; 0x8023fb <g_adc_io_adc5_sum+0x1>
    5866:	a0 91 fc 23 	lds	r26, 0x23FC	; 0x8023fc <g_adc_io_adc5_sum+0x2>
    586a:	b0 91 fd 23 	lds	r27, 0x23FD	; 0x8023fd <g_adc_io_adc5_sum+0x3>
    586e:	48 0f       	add	r20, r24
    5870:	59 1f       	adc	r21, r25
    5872:	6a 1f       	adc	r22, r26
    5874:	7b 1f       	adc	r23, r27
    5876:	40 93 fa 23 	sts	0x23FA, r20	; 0x8023fa <g_adc_io_adc5_sum>
    587a:	50 93 fb 23 	sts	0x23FB, r21	; 0x8023fb <g_adc_io_adc5_sum+0x1>
    587e:	60 93 fc 23 	sts	0x23FC, r22	; 0x8023fc <g_adc_io_adc5_sum+0x2>
    5882:	70 93 fd 23 	sts	0x23FD, r23	; 0x8023fd <g_adc_io_adc5_sum+0x3>
    5886:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <g_adc_io_adc5_cnt>
    588a:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <g_adc_io_adc5_cnt+0x1>
    588e:	01 96       	adiw	r24, 0x01	; 1
    5890:	80 93 f8 23 	sts	0x23F8, r24	; 0x8023f8 <g_adc_io_adc5_cnt>
    5894:	90 93 f9 23 	sts	0x23F9, r25	; 0x8023f9 <g_adc_io_adc5_cnt+0x1>
    5898:	8f 3f       	cpi	r24, 0xFF	; 255
    589a:	91 05       	cpc	r25, r1
    589c:	09 f0       	breq	.+2      	; 0x58a0 <cb_adc_a+0x28a>
    589e:	08 f4       	brcc	.+2      	; 0x58a2 <cb_adc_a+0x28c>
    58a0:	60 c0       	rjmp	.+192    	; 0x5962 <cb_adc_a+0x34c>
    58a2:	68 94       	set
    58a4:	16 f8       	bld	r1, 6
    58a6:	75 95       	asr	r23
    58a8:	67 95       	ror	r22
    58aa:	57 95       	ror	r21
    58ac:	47 95       	ror	r20
    58ae:	16 94       	lsr	r1
    58b0:	d1 f7       	brne	.-12     	; 0x58a6 <cb_adc_a+0x290>
    58b2:	40 93 fe 23 	sts	0x23FE, r20	; 0x8023fe <g_adc_io_adc5_cur>
    58b6:	50 93 ff 23 	sts	0x23FF, r21	; 0x8023ff <g_adc_io_adc5_cur+0x1>
    58ba:	60 93 00 24 	sts	0x2400, r22	; 0x802400 <g_adc_io_adc5_cur+0x2>
    58be:	70 93 01 24 	sts	0x2401, r23	; 0x802401 <g_adc_io_adc5_cur+0x3>
    58c2:	10 92 f8 23 	sts	0x23F8, r1	; 0x8023f8 <g_adc_io_adc5_cnt>
    58c6:	10 92 f9 23 	sts	0x23F9, r1	; 0x8023f9 <g_adc_io_adc5_cnt+0x1>
    58ca:	10 92 fa 23 	sts	0x23FA, r1	; 0x8023fa <g_adc_io_adc5_sum>
    58ce:	10 92 fb 23 	sts	0x23FB, r1	; 0x8023fb <g_adc_io_adc5_sum+0x1>
    58d2:	10 92 fc 23 	sts	0x23FC, r1	; 0x8023fc <g_adc_io_adc5_sum+0x2>
    58d6:	10 92 fd 23 	sts	0x23FD, r1	; 0x8023fd <g_adc_io_adc5_sum+0x3>
    58da:	08 95       	ret
    58dc:	63 ff       	sbrs	r22, 3
    58de:	41 c0       	rjmp	.+130    	; 0x5962 <cb_adc_a+0x34c>
    58e0:	05 2e       	mov	r0, r21
    58e2:	00 0c       	add	r0, r0
    58e4:	66 0b       	sbc	r22, r22
    58e6:	77 0b       	sbc	r23, r23
    58e8:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <g_adc_temp_sum>
    58ec:	90 91 f1 23 	lds	r25, 0x23F1	; 0x8023f1 <g_adc_temp_sum+0x1>
    58f0:	a0 91 f2 23 	lds	r26, 0x23F2	; 0x8023f2 <g_adc_temp_sum+0x2>
    58f4:	b0 91 f3 23 	lds	r27, 0x23F3	; 0x8023f3 <g_adc_temp_sum+0x3>
    58f8:	48 0f       	add	r20, r24
    58fa:	59 1f       	adc	r21, r25
    58fc:	6a 1f       	adc	r22, r26
    58fe:	7b 1f       	adc	r23, r27
    5900:	40 93 f0 23 	sts	0x23F0, r20	; 0x8023f0 <g_adc_temp_sum>
    5904:	50 93 f1 23 	sts	0x23F1, r21	; 0x8023f1 <g_adc_temp_sum+0x1>
    5908:	60 93 f2 23 	sts	0x23F2, r22	; 0x8023f2 <g_adc_temp_sum+0x2>
    590c:	70 93 f3 23 	sts	0x23F3, r23	; 0x8023f3 <g_adc_temp_sum+0x3>
    5910:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <g_adc_temp_cnt>
    5914:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <g_adc_temp_cnt+0x1>
    5918:	01 96       	adiw	r24, 0x01	; 1
    591a:	80 93 ee 23 	sts	0x23EE, r24	; 0x8023ee <g_adc_temp_cnt>
    591e:	90 93 ef 23 	sts	0x23EF, r25	; 0x8023ef <g_adc_temp_cnt+0x1>
    5922:	8f 3f       	cpi	r24, 0xFF	; 255
    5924:	91 05       	cpc	r25, r1
    5926:	e9 f0       	breq	.+58     	; 0x5962 <cb_adc_a+0x34c>
    5928:	e0 f0       	brcs	.+56     	; 0x5962 <cb_adc_a+0x34c>
    592a:	68 94       	set
    592c:	16 f8       	bld	r1, 6
    592e:	75 95       	asr	r23
    5930:	67 95       	ror	r22
    5932:	57 95       	ror	r21
    5934:	47 95       	ror	r20
    5936:	16 94       	lsr	r1
    5938:	d1 f7       	brne	.-12     	; 0x592e <cb_adc_a+0x318>
    593a:	40 93 f4 23 	sts	0x23F4, r20	; 0x8023f4 <g_adc_temp_cur>
    593e:	50 93 f5 23 	sts	0x23F5, r21	; 0x8023f5 <g_adc_temp_cur+0x1>
    5942:	60 93 f6 23 	sts	0x23F6, r22	; 0x8023f6 <g_adc_temp_cur+0x2>
    5946:	70 93 f7 23 	sts	0x23F7, r23	; 0x8023f7 <g_adc_temp_cur+0x3>
    594a:	10 92 ee 23 	sts	0x23EE, r1	; 0x8023ee <g_adc_temp_cnt>
    594e:	10 92 ef 23 	sts	0x23EF, r1	; 0x8023ef <g_adc_temp_cnt+0x1>
    5952:	10 92 f0 23 	sts	0x23F0, r1	; 0x8023f0 <g_adc_temp_sum>
    5956:	10 92 f1 23 	sts	0x23F1, r1	; 0x8023f1 <g_adc_temp_sum+0x1>
    595a:	10 92 f2 23 	sts	0x23F2, r1	; 0x8023f2 <g_adc_temp_sum+0x2>
    595e:	10 92 f3 23 	sts	0x23F3, r1	; 0x8023f3 <g_adc_temp_sum+0x3>
    5962:	08 95       	ret

00005964 <cb_tce1_ovfl>:
    5964:	8f 92       	push	r8
    5966:	9f 92       	push	r9
    5968:	af 92       	push	r10
    596a:	bf 92       	push	r11
    596c:	cf 92       	push	r12
    596e:	df 92       	push	r13
    5970:	ef 92       	push	r14
    5972:	ff 92       	push	r15
    5974:	0f 93       	push	r16
    5976:	1f 93       	push	r17
    5978:	cf 93       	push	r28
    597a:	df 93       	push	r29
    597c:	1f 92       	push	r1
    597e:	1f 92       	push	r1
    5980:	cd b7       	in	r28, 0x3d	; 61
    5982:	de b7       	in	r29, 0x3e	; 62
    5984:	e0 91 d9 22 	lds	r30, 0x22D9	; 0x8022d9 <g_dac_buf_idx>
    5988:	f0 e0       	ldi	r31, 0x00	; 0
    598a:	ee 0f       	add	r30, r30
    598c:	ff 1f       	adc	r31, r31
    598e:	e6 5a       	subi	r30, 0xA6	; 166
    5990:	fc 4d       	sbci	r31, 0xDC	; 220
    5992:	20 81       	ld	r18, Z
    5994:	31 81       	ldd	r19, Z+1	; 0x01
    5996:	8f b7       	in	r24, 0x3f	; 63
    5998:	8a 83       	std	Y+2, r24	; 0x02
    599a:	f8 94       	cli
    599c:	8a 81       	ldd	r24, Y+2	; 0x02
    599e:	20 93 38 03 	sts	0x0338, r18	; 0x800338 <__TEXT_REGION_LENGTH__+0x700338>
    59a2:	30 93 39 03 	sts	0x0339, r19	; 0x800339 <__TEXT_REGION_LENGTH__+0x700339>
    59a6:	8f bf       	out	0x3f, r24	; 63
    59a8:	e0 91 d9 22 	lds	r30, 0x22D9	; 0x8022d9 <g_dac_buf_idx>
    59ac:	f0 e0       	ldi	r31, 0x00	; 0
    59ae:	ee 0f       	add	r30, r30
    59b0:	ff 1f       	adc	r31, r31
    59b2:	e6 52       	subi	r30, 0x26	; 38
    59b4:	fd 4d       	sbci	r31, 0xDD	; 221
    59b6:	20 81       	ld	r18, Z
    59b8:	31 81       	ldd	r19, Z+1	; 0x01
    59ba:	8f b7       	in	r24, 0x3f	; 63
    59bc:	89 83       	std	Y+1, r24	; 0x01
    59be:	f8 94       	cli
    59c0:	89 81       	ldd	r24, Y+1	; 0x01
    59c2:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <__TEXT_REGION_LENGTH__+0x70033a>
    59c6:	30 93 3b 03 	sts	0x033B, r19	; 0x80033b <__TEXT_REGION_LENGTH__+0x70033b>
    59ca:	8f bf       	out	0x3f, r24	; 63
    59cc:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <g_dac_buf_idx>
    59d0:	8f 5f       	subi	r24, 0xFF	; 255
    59d2:	80 32       	cpi	r24, 0x20	; 32
    59d4:	18 f4       	brcc	.+6      	; 0x59dc <cb_tce1_ovfl+0x78>
    59d6:	80 93 d9 22 	sts	0x22D9, r24	; 0x8022d9 <g_dac_buf_idx>
    59da:	4c c0       	rjmp	.+152    	; 0x5a74 <cb_tce1_ovfl+0x110>
    59dc:	10 92 d9 22 	sts	0x22D9, r1	; 0x8022d9 <g_dac_buf_idx>
    59e0:	78 94       	sei
    59e2:	0a e5       	ldi	r16, 0x5A	; 90
    59e4:	13 e2       	ldi	r17, 0x23	; 35
    59e6:	0f 2e       	mov	r0, r31
    59e8:	fa ed       	ldi	r31, 0xDA	; 218
    59ea:	ef 2e       	mov	r14, r31
    59ec:	f2 e2       	ldi	r31, 0x22	; 34
    59ee:	ff 2e       	mov	r15, r31
    59f0:	f0 2d       	mov	r31, r0
    59f2:	0f 2e       	mov	r0, r31
    59f4:	fa e9       	ldi	r31, 0x9A	; 154
    59f6:	cf 2e       	mov	r12, r31
    59f8:	f3 e2       	ldi	r31, 0x23	; 35
    59fa:	df 2e       	mov	r13, r31
    59fc:	f0 2d       	mov	r31, r0
    59fe:	80 90 e2 23 	lds	r8, 0x23E2	; 0x8023e2 <g_dds_reg>
    5a02:	90 90 e3 23 	lds	r9, 0x23E3	; 0x8023e3 <g_dds_reg+0x1>
    5a06:	a0 90 e4 23 	lds	r10, 0x23E4	; 0x8023e4 <g_dds_reg+0x2>
    5a0a:	b0 90 e5 23 	lds	r11, 0x23E5	; 0x8023e5 <g_dds_reg+0x3>
    5a0e:	45 01       	movw	r8, r10
    5a10:	aa 24       	eor	r10, r10
    5a12:	bb 24       	eor	r11, r11
    5a14:	61 e0       	ldi	r22, 0x01	; 1
    5a16:	c4 01       	movw	r24, r8
    5a18:	0e 94 c7 12 	call	0x258e	; 0x258e <get_interpolated_sine>
    5a1c:	f8 01       	movw	r30, r16
    5a1e:	81 93       	st	Z+, r24
    5a20:	91 93       	st	Z+, r25
    5a22:	8f 01       	movw	r16, r30
    5a24:	c4 01       	movw	r24, r8
    5a26:	90 5c       	subi	r25, 0xC0	; 192
    5a28:	61 e0       	ldi	r22, 0x01	; 1
    5a2a:	0e 94 c7 12 	call	0x258e	; 0x258e <get_interpolated_sine>
    5a2e:	f7 01       	movw	r30, r14
    5a30:	81 93       	st	Z+, r24
    5a32:	91 93       	st	Z+, r25
    5a34:	7f 01       	movw	r14, r30
    5a36:	40 91 e2 23 	lds	r20, 0x23E2	; 0x8023e2 <g_dds_reg>
    5a3a:	50 91 e3 23 	lds	r21, 0x23E3	; 0x8023e3 <g_dds_reg+0x1>
    5a3e:	60 91 e4 23 	lds	r22, 0x23E4	; 0x8023e4 <g_dds_reg+0x2>
    5a42:	70 91 e5 23 	lds	r23, 0x23E5	; 0x8023e5 <g_dds_reg+0x3>
    5a46:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <g_dds_inc>
    5a4a:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <g_dds_inc+0x1>
    5a4e:	a0 91 e8 23 	lds	r26, 0x23E8	; 0x8023e8 <g_dds_inc+0x2>
    5a52:	b0 91 e9 23 	lds	r27, 0x23E9	; 0x8023e9 <g_dds_inc+0x3>
    5a56:	84 0f       	add	r24, r20
    5a58:	95 1f       	adc	r25, r21
    5a5a:	a6 1f       	adc	r26, r22
    5a5c:	b7 1f       	adc	r27, r23
    5a5e:	80 93 e2 23 	sts	0x23E2, r24	; 0x8023e2 <g_dds_reg>
    5a62:	90 93 e3 23 	sts	0x23E3, r25	; 0x8023e3 <g_dds_reg+0x1>
    5a66:	a0 93 e4 23 	sts	0x23E4, r26	; 0x8023e4 <g_dds_reg+0x2>
    5a6a:	b0 93 e5 23 	sts	0x23E5, r27	; 0x8023e5 <g_dds_reg+0x3>
    5a6e:	0c 15       	cp	r16, r12
    5a70:	1d 05       	cpc	r17, r13
    5a72:	29 f6       	brne	.-118    	; 0x59fe <cb_tce1_ovfl+0x9a>
    5a74:	0f 90       	pop	r0
    5a76:	0f 90       	pop	r0
    5a78:	df 91       	pop	r29
    5a7a:	cf 91       	pop	r28
    5a7c:	1f 91       	pop	r17
    5a7e:	0f 91       	pop	r16
    5a80:	ff 90       	pop	r15
    5a82:	ef 90       	pop	r14
    5a84:	df 90       	pop	r13
    5a86:	cf 90       	pop	r12
    5a88:	bf 90       	pop	r11
    5a8a:	af 90       	pop	r10
    5a8c:	9f 90       	pop	r9
    5a8e:	8f 90       	pop	r8
    5a90:	08 95       	ret

00005a92 <usb_callback_suspend_action>:
    5a92:	08 95       	ret

00005a94 <usb_callback_resume_action>:
    5a94:	08 95       	ret

00005a96 <usb_callback_remotewakeup_enable>:
    5a96:	08 95       	ret

00005a98 <usb_callback_remotewakeup_disable>:
    5a98:	08 95       	ret

00005a9a <usb_callback_cdc_enable>:
    5a9a:	81 e0       	ldi	r24, 0x01	; 1
    5a9c:	80 93 42 24 	sts	0x2442, r24	; 0x802442 <usb_cdc_transfers_autorized>
    5aa0:	08 95       	ret

00005aa2 <usb_callback_cdc_disable>:
    5aa2:	10 92 42 24 	sts	0x2442, r1	; 0x802442 <usb_cdc_transfers_autorized>
    5aa6:	08 95       	ret

00005aa8 <usb_callback_config>:
    5aa8:	08 95       	ret

00005aaa <usb_callback_cdc_set_dtr>:
    5aaa:	08 95       	ret

00005aac <usb_callback_cdc_set_rts>:
    5aac:	08 95       	ret

00005aae <usb_callback_rx_notify>:
    5aae:	08 95       	ret

00005ab0 <usb_callback_tx_empty_notify>:
    5ab0:	08 95       	ret

00005ab2 <main>:
}


int main(void)
{
    5ab2:	2f 92       	push	r2
    5ab4:	3f 92       	push	r3
    5ab6:	4f 92       	push	r4
    5ab8:	5f 92       	push	r5
    5aba:	6f 92       	push	r6
    5abc:	7f 92       	push	r7
    5abe:	8f 92       	push	r8
    5ac0:	9f 92       	push	r9
    5ac2:	af 92       	push	r10
    5ac4:	bf 92       	push	r11
    5ac6:	cf 92       	push	r12
    5ac8:	df 92       	push	r13
    5aca:	ef 92       	push	r14
    5acc:	ff 92       	push	r15
    5ace:	0f 93       	push	r16
    5ad0:	1f 93       	push	r17
    5ad2:	cf 93       	push	r28
    5ad4:	df 93       	push	r29
    5ad6:	cd b7       	in	r28, 0x3d	; 61
    5ad8:	de b7       	in	r29, 0x3e	; 62
    5ada:	a1 97       	sbiw	r28, 0x21	; 33
    5adc:	cd bf       	out	0x3d, r28	; 61
    5ade:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	irq_initialize_vectors();
    5ae0:	e0 ea       	ldi	r30, 0xA0	; 160
    5ae2:	f0 e0       	ldi	r31, 0x00	; 0
    5ae4:	0f 2e       	mov	r0, r31
    5ae6:	f7 e0       	ldi	r31, 0x07	; 7
    5ae8:	4f 2e       	mov	r4, r31
    5aea:	f0 2d       	mov	r31, r0
    5aec:	42 82       	std	Z+2, r4	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    5aee:	42 82       	std	Z+2, r4	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    5af0:	82 81       	ldd	r24, Z+2	; 0x02
    5af2:	8f 77       	andi	r24, 0x7F	; 127
    5af4:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    5af6:	11 82       	std	Z+1, r1	; 0x01
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    5af8:	d9 d2       	rcall	.+1458   	; 0x60ac <sysclk_init>
    5afa:	eb e9       	ldi	r30, 0x9B	; 155
    5afc:	f5 e2       	ldi	r31, 0x25	; 37
    5afe:	10 82       	st	Z, r1
    5b00:	11 82       	std	Z+1, r1	; 0x01
    5b02:	12 82       	std	Z+2, r1	; 0x02
    5b04:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    5b06:	14 82       	std	Z+4, r1	; 0x04
    5b08:	55 24       	eor	r5, r5
    5b0a:	53 94       	inc	r5

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    5b0c:	55 82       	std	Z+5, r5	; 0x05
    5b0e:	0e 94 50 12 	call	0x24a0	; 0x24a0 <rtc_init>
	rtc_set_callback(cb_rtc_alarm);
    5b12:	8a e0       	ldi	r24, 0x0A	; 10
    5b14:	9b e2       	ldi	r25, 0x2B	; 43
    5b16:	0e 94 4b 12 	call	0x2496	; 0x2496 <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    5b1a:	62 e0       	ldi	r22, 0x02	; 2
    5b1c:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH0
    5b1e:	47 d3       	rcall	.+1678   	; 0x61ae <sysclk_enable_module>
    5b20:	e0 e8       	ldi	r30, 0x80	; 128
    5b22:	f1 e0       	ldi	r31, 0x01	; 1
    5b24:	86 ec       	ldi	r24, 0xC6	; 198
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    5b26:	80 83       	st	Z, r24
	EVSYS.CH1MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH1
    5b28:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH1 no digital filtering
    5b2a:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH2MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH2
    5b2c:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
    5b2e:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH3
    5b30:	12 86       	std	Z+10, r1	; 0x0a
	EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering
    5b32:	83 83       	std	Z+3, r24	; 0x03

	/* DAC - event 7 */
	EVSYS.CH7MUX  = EVSYS_CHMUX_TCE1_OVF_gc;									// TCE1 overflow goes to EVSYS CH7
    5b34:	13 86       	std	Z+11, r1	; 0x0b
    5b36:	88 ee       	ldi	r24, 0xE8	; 232
	EVSYS.CH7CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH7 no digital filtering
    5b38:	87 83       	std	Z+7, r24	; 0x07

static void tc_init(void)
{
	/* TCC0: VCTCXO PWM signal generation and ADCA CH0 */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 2560);						// Init PWM structure and enable timer
    5b3a:	17 86       	std	Z+15, r1	; 0x0f
    5b3c:	20 e0       	ldi	r18, 0x00	; 0
    5b3e:	3a e0       	ldi	r19, 0x0A	; 10
    5b40:	43 e0       	ldi	r20, 0x03	; 3
    5b42:	60 e0       	ldi	r22, 0x00	; 0
    5b44:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM. Percentage with 1% granularity is to coarse, use driver access instead
    5b46:	01 96       	adiw	r24, 0x01	; 1
    5b48:	4b dc       	rcall	.-1898   	; 0x53e0 <pwm_init>
    5b4a:	6d e2       	ldi	r22, 0x2D	; 45
    5b4c:	ce 01       	movw	r24, r28
	tc_write_cc_buffer(&TCC0, TC_CCC, (uint16_t) (0.5f + pwm_vctcxo_cfg.period * C_VCTCXO_DEFAULT_VOLTS / C_VCTCXO_PWM_HI_VOLTS));	// Initial value for VCTCXO
    5b4e:	01 96       	adiw	r24, 0x01	; 1
    5b50:	0f dd       	rcall	.-1506   	; 0x5570 <pwm_start>
    5b52:	6e 81       	ldd	r22, Y+6	; 0x06
    5b54:	7f 81       	ldd	r23, Y+7	; 0x07
    5b56:	80 e0       	ldi	r24, 0x00	; 0
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	0e 94 35 3a 	call	0x746a	; 0x746a <__floatunsisf>
    5b5e:	20 e0       	ldi	r18, 0x00	; 0
    5b60:	30 e0       	ldi	r19, 0x00	; 0
    5b62:	40 ec       	ldi	r20, 0xC0	; 192
    5b64:	5f e3       	ldi	r21, 0x3F	; 63
    5b66:	0e 94 c3 3a 	call	0x7586	; 0x7586 <__mulsf3>
    5b6a:	27 e2       	ldi	r18, 0x27	; 39
    5b6c:	31 e3       	ldi	r19, 0x31	; 49
    5b6e:	40 e5       	ldi	r20, 0x50	; 80
    5b70:	50 e4       	ldi	r21, 0x40	; 64
    5b72:	0e 94 a1 39 	call	0x7342	; 0x7342 <__divsf3>
    5b76:	20 e0       	ldi	r18, 0x00	; 0
    5b78:	30 e0       	ldi	r19, 0x00	; 0
    5b7a:	40 e0       	ldi	r20, 0x00	; 0
    5b7c:	5f e3       	ldi	r21, 0x3F	; 63
    5b7e:	0e 94 3d 39 	call	0x727a	; 0x727a <__addsf3>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    5b82:	0e 94 09 3a 	call	0x7412	; 0x7412 <__fixunssfsi>
    5b86:	61 2c       	mov	r6, r1
    5b88:	68 94       	set
    5b8a:	77 24       	eor	r7, r7
    5b8c:	73 f8       	bld	r7, 3
    5b8e:	d3 01       	movw	r26, r6
    5b90:	dc 96       	adiw	r26, 0x3c	; 60
    5b92:	6d 93       	st	X+, r22

	/* TCE1: DAC clock */
	tc_enable(&TCE1);
    5b94:	7c 93       	st	X, r23
    5b96:	dd 97       	sbiw	r26, 0x3d	; 61
    5b98:	80 e4       	ldi	r24, 0x40	; 64
    5b9a:	9a e0       	ldi	r25, 0x0A	; 10
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    5b9c:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <tc_enable>
    5ba0:	00 e4       	ldi	r16, 0x40	; 64
    5ba2:	1a e0       	ldi	r17, 0x0A	; 10
    5ba4:	f8 01       	movw	r30, r16
    5ba6:	81 81       	ldd	r24, Z+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    5ba8:	88 7f       	andi	r24, 0xF8	; 248
    5baa:	81 83       	std	Z+1, r24	; 0x01
    5bac:	8b e2       	ldi	r24, 0x2B	; 43
    5bae:	91 e0       	ldi	r25, 0x01	; 1
}

static void adc_init(void)
{
	/* Disable input pins */
	PORTA_PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5bb0:	86 a3       	std	Z+38, r24	; 0x26
    5bb2:	97 a3       	std	Z+39, r25	; 0x27
    5bb4:	e0 e1       	ldi	r30, 0x10	; 16
    5bb6:	f6 e0       	ldi	r31, 0x06	; 6
    5bb8:	80 81       	ld	r24, Z
	PORTA_PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5bba:	87 60       	ori	r24, 0x07	; 7
    5bbc:	80 83       	st	Z, r24
    5bbe:	e1 e1       	ldi	r30, 0x11	; 17
    5bc0:	f6 e0       	ldi	r31, 0x06	; 6
    5bc2:	80 81       	ld	r24, Z
	PORTA_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5bc4:	87 60       	ori	r24, 0x07	; 7
    5bc6:	80 83       	st	Z, r24
    5bc8:	e2 e1       	ldi	r30, 0x12	; 18
    5bca:	f6 e0       	ldi	r31, 0x06	; 6
    5bcc:	80 81       	ld	r24, Z
	PORTA_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5bce:	87 60       	ori	r24, 0x07	; 7
    5bd0:	80 83       	st	Z, r24
    5bd2:	e3 e1       	ldi	r30, 0x13	; 19
    5bd4:	f6 e0       	ldi	r31, 0x06	; 6
    5bd6:	80 81       	ld	r24, Z
	PORTA_PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5bd8:	87 60       	ori	r24, 0x07	; 7
    5bda:	80 83       	st	Z, r24
    5bdc:	e4 e1       	ldi	r30, 0x14	; 20
    5bde:	f6 e0       	ldi	r31, 0x06	; 6
    5be0:	80 81       	ld	r24, Z
	PORTA_PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5be2:	87 60       	ori	r24, 0x07	; 7
    5be4:	80 83       	st	Z, r24
    5be6:	e5 e1       	ldi	r30, 0x15	; 21
    5be8:	f6 e0       	ldi	r31, 0x06	; 6
    5bea:	80 81       	ld	r24, Z
	PORTB_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5bec:	87 60       	ori	r24, 0x07	; 7
    5bee:	80 83       	st	Z, r24
    5bf0:	e2 e3       	ldi	r30, 0x32	; 50
    5bf2:	f6 e0       	ldi	r31, 0x06	; 6
    5bf4:	80 81       	ld	r24, Z
	PORTB_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5bf6:	87 60       	ori	r24, 0x07	; 7
    5bf8:	80 83       	st	Z, r24
    5bfa:	e3 e3       	ldi	r30, 0x33	; 51
    5bfc:	f6 e0       	ldi	r31, 0x06	; 6
    5bfe:	80 81       	ld	r24, Z

	/* Prepare the structures */
	adc_read_configuration(&ADC_VCTCXO_5V0_VBAT,							&g_adc_a_conf);
    5c00:	87 60       	ori	r24, 0x07	; 7
    5c02:	80 83       	st	Z, r24
    5c04:	6a e3       	ldi	r22, 0x3A	; 58
    5c06:	74 e2       	ldi	r23, 0x24	; 36
    5c08:	80 e0       	ldi	r24, 0x00	; 0
    5c0a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    5c0c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <adc_read_configuration>
    5c10:	46 e3       	ldi	r20, 0x36	; 54
    5c12:	54 e2       	ldi	r21, 0x24	; 36
    5c14:	61 e0       	ldi	r22, 0x01	; 1
    5c16:	80 e0       	ldi	r24, 0x00	; 0
    5c18:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    5c1a:	0e 94 24 18 	call	0x3048	; 0x3048 <adcch_read_configuration>
    5c1e:	42 e3       	ldi	r20, 0x32	; 50
    5c20:	54 e2       	ldi	r21, 0x24	; 36
    5c22:	62 e0       	ldi	r22, 0x02	; 2
    5c24:	80 e0       	ldi	r24, 0x00	; 0
    5c26:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    5c28:	0e 94 24 18 	call	0x3048	; 0x3048 <adcch_read_configuration>
    5c2c:	4e e2       	ldi	r20, 0x2E	; 46
    5c2e:	54 e2       	ldi	r21, 0x24	; 36
    5c30:	64 e0       	ldi	r22, 0x04	; 4
    5c32:	80 e0       	ldi	r24, 0x00	; 0
    5c34:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    5c36:	0e 94 24 18 	call	0x3048	; 0x3048 <adcch_read_configuration>
    5c3a:	4a e2       	ldi	r20, 0x2A	; 42
    5c3c:	54 e2       	ldi	r21, 0x24	; 36
    5c3e:	68 e0       	ldi	r22, 0x08	; 8
    5c40:	80 e0       	ldi	r24, 0x00	; 0
    5c42:	92 e0       	ldi	r25, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    5c44:	0e 94 24 18 	call	0x3048	; 0x3048 <adcch_read_configuration>
    5c48:	ea e3       	ldi	r30, 0x3A	; 58
    5c4a:	f4 e2       	ldi	r31, 0x24	; 36
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    5c4c:	24 e0       	ldi	r18, 0x04	; 4
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    5c4e:	24 83       	std	Z+4, r18	; 0x04
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    5c50:	92 81       	ldd	r25, Z+2	; 0x02
    5c52:	81 81       	ldd	r24, Z+1	; 0x01
    5c54:	0f 2e       	mov	r0, r31
    5c56:	f6 e3       	ldi	r31, 0x36	; 54
    5c58:	ef 2e       	mov	r14, r31
    5c5a:	f4 e2       	ldi	r31, 0x24	; 36
    5c5c:	ff 2e       	mov	r15, r31
    5c5e:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    5c60:	d7 01       	movw	r26, r14
    5c62:	5c 92       	st	X, r5
    5c64:	38 e0       	ldi	r19, 0x08	; 8
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    5c66:	11 96       	adiw	r26, 0x01	; 1
    5c68:	3c 93       	st	X, r19
    5c6a:	0f 2e       	mov	r0, r31
    5c6c:	f2 e3       	ldi	r31, 0x32	; 50
    5c6e:	8f 2e       	mov	r8, r31
    5c70:	f4 e2       	ldi	r31, 0x24	; 36
    5c72:	9f 2e       	mov	r9, r31
    5c74:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    5c76:	d4 01       	movw	r26, r8
    5c78:	5c 92       	st	X, r5
    5c7a:	30 e2       	ldi	r19, 0x20	; 32
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    5c7c:	11 96       	adiw	r26, 0x01	; 1
    5c7e:	3c 93       	st	X, r19
    5c80:	0f 2e       	mov	r0, r31
    5c82:	fe e2       	ldi	r31, 0x2E	; 46
    5c84:	af 2e       	mov	r10, r31
    5c86:	f4 e2       	ldi	r31, 0x24	; 36
    5c88:	bf 2e       	mov	r11, r31
    5c8a:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    5c8c:	d5 01       	movw	r26, r10
    5c8e:	5c 92       	st	X, r5
    5c90:	38 e2       	ldi	r19, 0x28	; 40
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    5c92:	11 96       	adiw	r26, 0x01	; 1
    5c94:	3c 93       	st	X, r19
    5c96:	0f 2e       	mov	r0, r31
    5c98:	fa e2       	ldi	r31, 0x2A	; 42
    5c9a:	cf 2e       	mov	r12, r31
    5c9c:	f4 e2       	ldi	r31, 0x24	; 36
    5c9e:	df 2e       	mov	r13, r31
    5ca0:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    5ca2:	d6 01       	movw	r26, r12
    5ca4:	1c 92       	st	X, r1
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    5ca6:	11 96       	adiw	r26, 0x01	; 1
    5ca8:	1c 92       	st	X, r1
    5caa:	9f 78       	andi	r25, 0x8F	; 143
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    5cac:	93 62       	ori	r25, 0x23	; 35
    5cae:	92 83       	std	Z+2, r25	; 0x02
    5cb0:	68 94       	set
    5cb2:	33 24       	eor	r3, r3
    5cb4:	31 f8       	bld	r3, 1
    5cb6:	d7 01       	movw	r26, r14
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    5cb8:	13 96       	adiw	r26, 0x03	; 3
    5cba:	3c 92       	st	X, r3
    5cbc:	81 70       	andi	r24, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    5cbe:	80 62       	ori	r24, 0x20	; 32

	/* Trigger */
	adc_set_conversion_trigger(&g_adc_a_conf, ADC_TRIG_EVENT_SINGLE, 4, 0);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, cb_adc_a);
    5cc0:	81 83       	std	Z+1, r24	; 0x01
    5cc2:	23 83       	std	Z+3, r18	; 0x03
    5cc4:	6b e0       	ldi	r22, 0x0B	; 11
    5cc6:	7b e2       	ldi	r23, 0x2B	; 43
    5cc8:	80 e0       	ldi	r24, 0x00	; 0
    5cca:	92 e0       	ldi	r25, 0x02	; 2
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    5ccc:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <adc_set_callback>
    5cd0:	f4 01       	movw	r30, r8
    5cd2:	22 81       	ldd	r18, Z+2	; 0x02
    5cd4:	d5 01       	movw	r26, r10
    5cd6:	12 96       	adiw	r26, 0x02	; 2
    5cd8:	9c 91       	ld	r25, X
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    5cda:	f6 01       	movw	r30, r12
    5cdc:	82 81       	ldd	r24, Z+2	; 0x02
    5cde:	d7 01       	movw	r26, r14
    5ce0:	12 96       	adiw	r26, 0x02	; 2
    5ce2:	3c 91       	ld	r19, X
    5ce4:	12 97       	sbiw	r26, 0x02	; 2
    5ce6:	30 7f       	andi	r19, 0xF0	; 240
    5ce8:	31 60       	ori	r19, 0x01	; 1
    5cea:	12 96       	adiw	r26, 0x02	; 2
    5cec:	3c 93       	st	X, r19
    5cee:	20 7f       	andi	r18, 0xF0	; 240
    5cf0:	21 60       	ori	r18, 0x01	; 1
    5cf2:	f4 01       	movw	r30, r8
    5cf4:	22 83       	std	Z+2, r18	; 0x02
    5cf6:	90 7f       	andi	r25, 0xF0	; 240
    5cf8:	91 60       	ori	r25, 0x01	; 1
    5cfa:	d5 01       	movw	r26, r10
    5cfc:	12 96       	adiw	r26, 0x02	; 2
    5cfe:	9c 93       	st	X, r25
    5d00:	80 7f       	andi	r24, 0xF0	; 240
    5d02:	81 60       	ori	r24, 0x01	; 1
	adcch_enable_interrupt(&g_adcch_io_adc4_conf);
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);
	adcch_enable_interrupt(&g_adcch_temp_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,											&g_adc_a_conf);
    5d04:	f6 01       	movw	r30, r12
    5d06:	82 83       	std	Z+2, r24	; 0x02
    5d08:	6a e3       	ldi	r22, 0x3A	; 58
    5d0a:	74 e2       	ldi	r23, 0x24	; 36
    5d0c:	80 e0       	ldi	r24, 0x00	; 0
    5d0e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    5d10:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <adc_write_configuration>
    5d14:	a7 01       	movw	r20, r14
    5d16:	61 e0       	ldi	r22, 0x01	; 1
    5d18:	80 e0       	ldi	r24, 0x00	; 0
    5d1a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    5d1c:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <adcch_write_configuration>
    5d20:	a4 01       	movw	r20, r8
    5d22:	62 e0       	ldi	r22, 0x02	; 2
    5d24:	80 e0       	ldi	r24, 0x00	; 0
    5d26:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    5d28:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <adcch_write_configuration>
    5d2c:	a5 01       	movw	r20, r10
    5d2e:	64 e0       	ldi	r22, 0x04	; 4
    5d30:	80 e0       	ldi	r24, 0x00	; 0
    5d32:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    5d34:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <adcch_write_configuration>
    5d38:	a6 01       	movw	r20, r12
    5d3a:	68 e0       	ldi	r22, 0x08	; 8
    5d3c:	80 e0       	ldi	r24, 0x00	; 0
}


static void dac_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    5d3e:	92 e0       	ldi	r25, 0x02	; 2
    5d40:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <adcch_write_configuration>
    5d44:	64 e0       	ldi	r22, 0x04	; 4

    dac_read_configuration(&DAC_DAC, &g_dac_conf);
    5d46:	82 e0       	ldi	r24, 0x02	; 2
    5d48:	32 d2       	rcall	.+1124   	; 0x61ae <sysclk_enable_module>
    5d4a:	6a ee       	ldi	r22, 0xEA	; 234
    5d4c:	73 e2       	ldi	r23, 0x23	; 35
    5d4e:	80 e2       	ldi	r24, 0x20	; 32
    5d50:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    5d52:	0e 94 16 19 	call	0x322c	; 0x322c <dac_read_configuration>
    5d56:	ea ee       	ldi	r30, 0xEA	; 234
    5d58:	f3 e2       	ldi	r31, 0x23	; 35
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    5d5a:	81 e1       	ldi	r24, 0x11	; 17
    5d5c:	82 83       	std	Z+2, r24	; 0x02
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    5d5e:	8c e0       	ldi	r24, 0x0C	; 12
    5d60:	80 83       	st	Z, r24
    5d62:	81 81       	ldd	r24, Z+1	; 0x01
    5d64:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    5d66:	83 64       	ori	r24, 0x43	; 67
    dac_set_conversion_parameters(&g_dac_conf, DAC_REF_AREFA, DAC_ADJ_LEFT);
    dac_set_active_channel(&g_dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 0);
    dac_set_conversion_trigger(&g_dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 7);
    dac_write_configuration(&DAC_DAC, &g_dac_conf);
    5d68:	81 83       	std	Z+1, r24	; 0x01
    5d6a:	43 82       	std	Z+3, r4	; 0x03
    5d6c:	bf 01       	movw	r22, r30
    5d6e:	80 e2       	ldi	r24, 0x20	; 32
    5d70:	93 e0       	ldi	r25, 0x03	; 3

	evsys_init();		// Event system
	tc_init();			// Timers
	adc_init();			// ADC
	dac_init();			// DAC
	twi_init();			// I2C / TWI
    5d72:	0e 94 ba 18 	call	0x3174	; 0x3174 <dac_write_configuration>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    5d76:	0e 94 b4 13 	call	0x2768	; 0x2768 <twi_init>

	/* All interrupt sources & PMIC are prepared until here - IRQ activation follows */
	cpu_irq_enable();
    5d7a:	0e 94 19 15 	call	0x2a32	; 0x2a32 <board_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    5d7e:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    5d80:	d3 01       	movw	r26, r6
    5d82:	8c 91       	ld	r24, X
    5d84:	80 7f       	andi	r24, 0xF0	; 240
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    5d86:	81 60       	ori	r24, 0x01	; 1
    5d88:	8c 93       	st	X, r24
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    5d8a:	f8 01       	movw	r30, r16
    5d8c:	80 81       	ld	r24, Z
    5d8e:	80 7f       	andi	r24, 0xF0	; 240
    dac_write_configuration(&DAC_DAC, &g_dac_conf);
}

static void dac_start(void)
{
	dac_enable(&DACB);
    5d90:	81 60       	ori	r24, 0x01	; 1
    5d92:	80 83       	st	Z, r24
    5d94:	80 e2       	ldi	r24, 0x20	; 32
    5d96:	93 e0       	ldi	r25, 0x03	; 3

	tc_set_overflow_interrupt_callback(&TCE1, cb_tce1_ovfl);					// Set CB for TCE1 overflows
    5d98:	0e 94 8e 18 	call	0x311c	; 0x311c <dac_enable>
    5d9c:	62 eb       	ldi	r22, 0xB2	; 178
    5d9e:	7c e2       	ldi	r23, 0x2C	; 44
    5da0:	80 e4       	ldi	r24, 0x40	; 64
    5da2:	9a e0       	ldi	r25, 0x0A	; 10
	TCE1_INTCTRLA = TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_MED_gc;					// Enable interrupt for TCE1 overflows
    5da4:	0e 94 18 20 	call	0x4030	; 0x4030 <tc_set_overflow_interrupt_callback>
	TCE1_INTCTRLB = 0;
    5da8:	30 92 46 0a 	sts	0x0A46, r3	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}

static void adc_start(void)
{
	/* Power up after configurations are being set */
	adc_enable(&ADCA);
    5dac:	10 92 47 0a 	sts	0x0A47, r1	; 0x800a47 <__TEXT_REGION_LENGTH__+0x700a47>
    5db0:	80 e0       	ldi	r24, 0x00	; 0
}


static void usb_init(void)
{
	udc_start();
    5db2:	92 e0       	ldi	r25, 0x02	; 2
    5db4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <adc_enable>

#if 1
	stdio_usb_init();	// Init and enable stdio_usb
    5db8:	85 d6       	rcall	.+3338   	; 0x6ac4 <udc_start>
	stdio_usb_enable();
    5dba:	0e 94 b6 38 	call	0x716c	; 0x716c <stdio_usb_init>

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB

	/* Start TWI channels */
	twi_start();		// Start TWI
    5dbe:	0e 94 b2 38 	call	0x7164	; 0x7164 <stdio_usb_enable>

	/* The application code */
	runmode = 1;
    5dc2:	0e 94 10 14 	call	0x2820	; 0x2820 <twi_start>

static void task_dac(uint32_t now)
{
	/* DDS setting */
	const uint32_t dds_freq_mHz = 1000000UL;  // 1 kHz
	g_dds_inc = (uint32_t) (((uint64_t)dds_freq_mHz * UINT32_MAX) / (DAC_RATE_OF_CONV * 500UL));
    5dc6:	50 92 43 24 	sts	0x2443, r5	; 0x802443 <runmode>
    5dca:	0f 2e       	mov	r0, r31
    5dcc:	f1 e5       	ldi	r31, 0x51	; 81
    5dce:	8f 2e       	mov	r8, r31
    5dd0:	f8 eb       	ldi	r31, 0xB8	; 184
    5dd2:	9f 2e       	mov	r9, r31
    5dd4:	fe e1       	ldi	r31, 0x1E	; 30
    5dd6:	af 2e       	mov	r10, r31
    5dd8:	f5 e0       	ldi	r31, 0x05	; 5
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    5dda:	bf 2e       	mov	r11, r31
    5ddc:	f0 2d       	mov	r31, r0
    5dde:	0f 2e       	mov	r0, r31
    5de0:	f8 e4       	ldi	r31, 0x48	; 72
    5de2:	4f 2e       	mov	r4, r31
	task_twi_lcd(now);
}

static void task(void)
{
	uint32_t now = rtc_get_time();
    5de4:	51 2c       	mov	r5, r1
    5de6:	f0 2d       	mov	r31, r0
    5de8:	0e 94 3a 12 	call	0x2474	; 0x2474 <rtc_get_time>

static void task_dac(uint32_t now)
{
	/* DDS setting */
	const uint32_t dds_freq_mHz = 1000000UL;  // 1 kHz
	g_dds_inc = (uint32_t) (((uint64_t)dds_freq_mHz * UINT32_MAX) / (DAC_RATE_OF_CONV * 500UL));
    5dec:	6b 01       	movw	r12, r22
    5dee:	7c 01       	movw	r14, r24
    5df0:	80 92 e6 23 	sts	0x23E6, r8	; 0x8023e6 <g_dds_inc>
    5df4:	90 92 e7 23 	sts	0x23E7, r9	; 0x8023e7 <g_dds_inc+0x1>
    5df8:	a0 92 e8 23 	sts	0x23E8, r10	; 0x8023e8 <g_dds_inc+0x2>
			 l_adc_temp_cur;
	float	 l_temp;
	uint16_t l_temp_i;
	uint8_t	 l_temp_f;

	if ((now - adc_last) >= 512) {
    5dfc:	b0 92 e9 23 	sts	0x23E9, r11	; 0x8023e9 <g_dds_inc+0x3>
    5e00:	80 91 d5 22 	lds	r24, 0x22D5	; 0x8022d5 <adc_last.7338>
    5e04:	90 91 d6 22 	lds	r25, 0x22D6	; 0x8022d6 <adc_last.7338+0x1>
    5e08:	a0 91 d7 22 	lds	r26, 0x22D7	; 0x8022d7 <adc_last.7338+0x2>
    5e0c:	b0 91 d8 22 	lds	r27, 0x22D8	; 0x8022d8 <adc_last.7338+0x3>
    5e10:	a7 01       	movw	r20, r14
    5e12:	96 01       	movw	r18, r12
    5e14:	28 1b       	sub	r18, r24
    5e16:	39 0b       	sbc	r19, r25
    5e18:	4a 0b       	sbc	r20, r26
    5e1a:	5b 0b       	sbc	r21, r27
    5e1c:	da 01       	movw	r26, r20
    5e1e:	c9 01       	movw	r24, r18
    5e20:	81 15       	cp	r24, r1
    5e22:	92 40       	sbci	r25, 0x02	; 2
    5e24:	a1 05       	cpc	r26, r1
    5e26:	b1 05       	cpc	r27, r1
		adc_last = now;
    5e28:	08 f4       	brcc	.+2      	; 0x5e2c <main+0x37a>
    5e2a:	d5 c0       	rjmp	.+426    	; 0x5fd6 <main+0x524>
    5e2c:	c0 92 d5 22 	sts	0x22D5, r12	; 0x8022d5 <adc_last.7338>
    5e30:	d0 92 d6 22 	sts	0x22D6, r13	; 0x8022d6 <adc_last.7338+0x1>
    5e34:	e0 92 d7 22 	sts	0x22D7, r14	; 0x8022d7 <adc_last.7338+0x2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5e38:	f0 92 d8 22 	sts	0x22D8, r15	; 0x8022d8 <adc_last.7338+0x3>
	cpu_irq_disable();
    5e3c:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    5e3e:	89 83       	std	Y+1, r24	; 0x01

		irqflags_t flags = cpu_irq_save();
		l_adc_vctcxo_cur = g_adc_vctcxo_cur;
    5e40:	f8 94       	cli
    5e42:	89 81       	ldd	r24, Y+1	; 0x01
    5e44:	40 91 26 24 	lds	r20, 0x2426	; 0x802426 <g_adc_vctcxo_cur>
    5e48:	48 8b       	std	Y+16, r20	; 0x10
    5e4a:	50 91 27 24 	lds	r21, 0x2427	; 0x802427 <g_adc_vctcxo_cur+0x1>
    5e4e:	59 8b       	std	Y+17, r21	; 0x11
    5e50:	90 91 28 24 	lds	r25, 0x2428	; 0x802428 <g_adc_vctcxo_cur+0x2>
    5e54:	9a 8b       	std	Y+18, r25	; 0x12
    5e56:	a0 91 29 24 	lds	r26, 0x2429	; 0x802429 <g_adc_vctcxo_cur+0x3>
		l_adc_5v0_cur = g_adc_5v0_cur;
    5e5a:	ab 8b       	std	Y+19, r26	; 0x13
    5e5c:	b0 91 1c 24 	lds	r27, 0x241C	; 0x80241c <g_adc_5v0_cur>
    5e60:	bc 8b       	std	Y+20, r27	; 0x14
    5e62:	e0 91 1d 24 	lds	r30, 0x241D	; 0x80241d <g_adc_5v0_cur+0x1>
    5e66:	ed 8b       	std	Y+21, r30	; 0x15
    5e68:	f0 91 1e 24 	lds	r31, 0x241E	; 0x80241e <g_adc_5v0_cur+0x2>
    5e6c:	fe 8b       	std	Y+22, r31	; 0x16
    5e6e:	20 91 1f 24 	lds	r18, 0x241F	; 0x80241f <g_adc_5v0_cur+0x3>
		l_adc_vbat_cur = g_adc_vbat_cur;
    5e72:	2f 8b       	std	Y+23, r18	; 0x17
    5e74:	30 91 12 24 	lds	r19, 0x2412	; 0x802412 <g_adc_vbat_cur>
    5e78:	38 8f       	std	Y+24, r19	; 0x18
    5e7a:	40 91 13 24 	lds	r20, 0x2413	; 0x802413 <g_adc_vbat_cur+0x1>
    5e7e:	49 8f       	std	Y+25, r20	; 0x19
    5e80:	50 91 14 24 	lds	r21, 0x2414	; 0x802414 <g_adc_vbat_cur+0x2>
    5e84:	5a 8f       	std	Y+26, r21	; 0x1a
    5e86:	90 91 15 24 	lds	r25, 0x2415	; 0x802415 <g_adc_vbat_cur+0x3>
		l_adc_io_adc4_cur = g_adc_io_adc4_cur;
    5e8a:	9b 8f       	std	Y+27, r25	; 0x1b
    5e8c:	a0 91 08 24 	lds	r26, 0x2408	; 0x802408 <g_adc_io_adc4_cur>
    5e90:	ac 8f       	std	Y+28, r26	; 0x1c
    5e92:	b0 91 09 24 	lds	r27, 0x2409	; 0x802409 <g_adc_io_adc4_cur+0x1>
    5e96:	bd 8f       	std	Y+29, r27	; 0x1d
    5e98:	e0 91 0a 24 	lds	r30, 0x240A	; 0x80240a <g_adc_io_adc4_cur+0x2>
    5e9c:	ee 8f       	std	Y+30, r30	; 0x1e
    5e9e:	f0 91 0b 24 	lds	r31, 0x240B	; 0x80240b <g_adc_io_adc4_cur+0x3>
		l_adc_io_adc5_cur = g_adc_io_adc5_cur;
    5ea2:	ff 8f       	std	Y+31, r31	; 0x1f
    5ea4:	20 91 fe 23 	lds	r18, 0x23FE	; 0x8023fe <g_adc_io_adc5_cur>
    5ea8:	28 a3       	std	Y+32, r18	; 0x20
    5eaa:	30 91 ff 23 	lds	r19, 0x23FF	; 0x8023ff <g_adc_io_adc5_cur+0x1>
    5eae:	39 a3       	std	Y+33, r19	; 0x21
    5eb0:	20 90 00 24 	lds	r2, 0x2400	; 0x802400 <g_adc_io_adc5_cur+0x2>
		l_adc_temp_cur = g_adc_temp_cur;
    5eb4:	30 90 01 24 	lds	r3, 0x2401	; 0x802401 <g_adc_io_adc5_cur+0x3>
    5eb8:	60 90 f4 23 	lds	r6, 0x23F4	; 0x8023f4 <g_adc_temp_cur>
    5ebc:	70 90 f5 23 	lds	r7, 0x23F5	; 0x8023f5 <g_adc_temp_cur+0x1>
    5ec0:	00 91 f6 23 	lds	r16, 0x23F6	; 0x8023f6 <g_adc_temp_cur+0x2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5ec4:	10 91 f7 23 	lds	r17, 0x23F7	; 0x8023f7 <g_adc_temp_cur+0x3>
		cpu_irq_restore(flags);

		l_temp = (((l_adc_temp_cur / ((float)C_ADC_STEPS)) * C_VCC_3V0_AREF_VOLTS) / C_TEMPSENSE_MULT) - C_0DEGC_K;
    5ec8:	8f bf       	out	0x3f, r24	; 63
    5eca:	66 2d       	mov	r22, r6
    5ecc:	77 2d       	mov	r23, r7
    5ece:	80 2f       	mov	r24, r16
    5ed0:	91 2f       	mov	r25, r17
    5ed2:	0e 94 37 3a 	call	0x746e	; 0x746e <__floatsisf>
    5ed6:	20 e0       	ldi	r18, 0x00	; 0
    5ed8:	30 e0       	ldi	r19, 0x00	; 0
    5eda:	40 e0       	ldi	r20, 0x00	; 0
    5edc:	59 e3       	ldi	r21, 0x39	; 57
    5ede:	0e 94 c3 3a 	call	0x7586	; 0x7586 <__mulsf3>
    5ee2:	20 e0       	ldi	r18, 0x00	; 0
    5ee4:	30 e0       	ldi	r19, 0x00	; 0
    5ee6:	40 e4       	ldi	r20, 0x40	; 64
    5ee8:	50 e4       	ldi	r21, 0x40	; 64
    5eea:	0e 94 c3 3a 	call	0x7586	; 0x7586 <__mulsf3>
    5eee:	24 e7       	ldi	r18, 0x74	; 116
    5ef0:	3d ea       	ldi	r19, 0xAD	; 173
    5ef2:	46 ee       	ldi	r20, 0xE6	; 230
    5ef4:	5a e3       	ldi	r21, 0x3A	; 58
    5ef6:	0e 94 a1 39 	call	0x7342	; 0x7342 <__divsf3>
    5efa:	23 e3       	ldi	r18, 0x33	; 51
    5efc:	33 e9       	ldi	r19, 0x93	; 147
    5efe:	48 e8       	ldi	r20, 0x88	; 136
    5f00:	53 e4       	ldi	r21, 0x43	; 67
    5f02:	0e 94 3c 39 	call	0x7278	; 0x7278 <__subsf3>
    5f06:	6c 87       	std	Y+12, r22	; 0x0c
    5f08:	7d 87       	std	Y+13, r23	; 0x0d
		l_temp_i = (uint16_t)l_temp;
    5f0a:	8e 87       	std	Y+14, r24	; 0x0e
    5f0c:	9f 87       	std	Y+15, r25	; 0x0f
    5f0e:	0e 94 09 3a 	call	0x7412	; 0x7412 <__fixunssfsi>
    5f12:	68 87       	std	Y+8, r22	; 0x08
    5f14:	79 87       	std	Y+9, r23	; 0x09
		l_temp_f = (uint8_t)(10 * (l_temp - l_temp_i));

		printf("time = %5ld: vctcxo=%04ld, 5v0=%04ld, vbat=%04ld, adc4=%04ld, adc5=%04ld, temp=%04ld = %d.%dC\r\n",
    5f16:	8a 87       	std	Y+10, r24	; 0x0a
    5f18:	9b 87       	std	Y+11, r25	; 0x0b
    5f1a:	48 85       	ldd	r20, Y+8	; 0x08
    5f1c:	59 85       	ldd	r21, Y+9	; 0x09
    5f1e:	ba 01       	movw	r22, r20
    5f20:	80 e0       	ldi	r24, 0x00	; 0
    5f22:	90 e0       	ldi	r25, 0x00	; 0
    5f24:	0e 94 35 3a 	call	0x746a	; 0x746a <__floatunsisf>
    5f28:	9b 01       	movw	r18, r22
    5f2a:	ac 01       	movw	r20, r24
    5f2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f30:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f32:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f34:	0e 94 3c 39 	call	0x7278	; 0x7278 <__subsf3>
    5f38:	20 e0       	ldi	r18, 0x00	; 0
    5f3a:	30 e0       	ldi	r19, 0x00	; 0
    5f3c:	40 e2       	ldi	r20, 0x20	; 32
    5f3e:	51 e4       	ldi	r21, 0x41	; 65
    5f40:	0e 94 c3 3a 	call	0x7586	; 0x7586 <__mulsf3>
    5f44:	0e 94 09 3a 	call	0x7412	; 0x7412 <__fixunssfsi>
    5f48:	1f 92       	push	r1
    5f4a:	6f 93       	push	r22
    5f4c:	59 85       	ldd	r21, Y+9	; 0x09
    5f4e:	5f 93       	push	r21
    5f50:	88 85       	ldd	r24, Y+8	; 0x08
    5f52:	8f 93       	push	r24
    5f54:	1f 93       	push	r17
    5f56:	0f 93       	push	r16
    5f58:	7f 92       	push	r7
    5f5a:	6f 92       	push	r6
    5f5c:	3f 92       	push	r3
    5f5e:	2f 92       	push	r2
    5f60:	99 a1       	ldd	r25, Y+33	; 0x21
    5f62:	9f 93       	push	r25
    5f64:	a8 a1       	ldd	r26, Y+32	; 0x20
    5f66:	af 93       	push	r26
    5f68:	bf 8d       	ldd	r27, Y+31	; 0x1f
    5f6a:	bf 93       	push	r27
    5f6c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5f6e:	ef 93       	push	r30
    5f70:	fd 8d       	ldd	r31, Y+29	; 0x1d
    5f72:	ff 93       	push	r31
    5f74:	2c 8d       	ldd	r18, Y+28	; 0x1c
    5f76:	2f 93       	push	r18
    5f78:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5f7a:	3f 93       	push	r19
    5f7c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5f7e:	4f 93       	push	r20
    5f80:	59 8d       	ldd	r21, Y+25	; 0x19
    5f82:	5f 93       	push	r21
    5f84:	88 8d       	ldd	r24, Y+24	; 0x18
    5f86:	8f 93       	push	r24
    5f88:	9f 89       	ldd	r25, Y+23	; 0x17
    5f8a:	9f 93       	push	r25
    5f8c:	ae 89       	ldd	r26, Y+22	; 0x16
    5f8e:	af 93       	push	r26
    5f90:	bd 89       	ldd	r27, Y+21	; 0x15
    5f92:	bf 93       	push	r27
    5f94:	ec 89       	ldd	r30, Y+20	; 0x14
    5f96:	ef 93       	push	r30
    5f98:	fb 89       	ldd	r31, Y+19	; 0x13
    5f9a:	ff 93       	push	r31
    5f9c:	2a 89       	ldd	r18, Y+18	; 0x12
    5f9e:	2f 93       	push	r18
    5fa0:	39 89       	ldd	r19, Y+17	; 0x11
    5fa2:	3f 93       	push	r19
    5fa4:	48 89       	ldd	r20, Y+16	; 0x10
    5fa6:	4f 93       	push	r20
    5fa8:	d7 01       	movw	r26, r14
    5faa:	c6 01       	movw	r24, r12
    5fac:	07 2e       	mov	r0, r23
    5fae:	7a e0       	ldi	r23, 0x0A	; 10
    5fb0:	b6 95       	lsr	r27
    5fb2:	a7 95       	ror	r26
    5fb4:	97 95       	ror	r25
    5fb6:	87 95       	ror	r24
    5fb8:	7a 95       	dec	r23
    5fba:	d1 f7       	brne	.-12     	; 0x5fb0 <main+0x4fe>
    5fbc:	70 2d       	mov	r23, r0
    5fbe:	bf 93       	push	r27
    5fc0:	af 93       	push	r26
    5fc2:	9f 93       	push	r25
    5fc4:	8f 93       	push	r24
    5fc6:	8e ee       	ldi	r24, 0xEE	; 238
    5fc8:	90 e2       	ldi	r25, 0x20	; 32
    5fca:	9f 93       	push	r25
    5fcc:	8f 93       	push	r24
    5fce:	0e 94 79 3b 	call	0x76f2	; 0x76f2 <printf>
}

static void task_twi(uint32_t now)
{
	/* TWI1 - Gyro, Baro, Hygro, SIM808 devices */
	task_twi_onboard(now);
    5fd2:	cd bf       	out	0x3d, r28	; 61
    5fd4:	de bf       	out	0x3e, r29	; 62
    5fd6:	c7 01       	movw	r24, r14
    5fd8:	b6 01       	movw	r22, r12

	/* TWI2 - LCD Port */
	task_twi_lcd(now);
    5fda:	0e 94 35 14 	call	0x286a	; 0x286a <task_twi_onboard>
    5fde:	c7 01       	movw	r24, r14
    5fe0:	b6 01       	movw	r22, r12
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    5fe2:	0e 94 36 14 	call	0x286c	; 0x286c <task_twi_lcd>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    5fe6:	f8 94       	cli
    5fe8:	ab e9       	ldi	r26, 0x9B	; 155
    5fea:	b5 e2       	ldi	r27, 0x25	; 37
    5fec:	8c 91       	ld	r24, X
    5fee:	81 11       	cpse	r24, r1
    5ff0:	09 c0       	rjmp	.+18     	; 0x6004 <__stack+0x5>
    5ff2:	ac e9       	ldi	r26, 0x9C	; 156
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    5ff4:	b5 e2       	ldi	r27, 0x25	; 37

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    5ff6:	e0 e0       	ldi	r30, 0x00	; 0
    5ff8:	ef 5f       	subi	r30, 0xFF	; 255
    5ffa:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    5ffc:	88 23       	and	r24, r24
    5ffe:	e1 f3       	breq	.-8      	; 0x5ff8 <main+0x546>
		cpu_irq_enable();
    6000:	e1 11       	cpse	r30, r1
    6002:	02 c0       	rjmp	.+4      	; 0x6008 <__stack+0x9>
    6004:	78 94       	sei
    6006:	12 c0       	rjmp	.+36     	; 0x602c <__stack+0x2d>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    6008:	d2 01       	movw	r26, r4
    600a:	8c 91       	ld	r24, X
    600c:	f0 e0       	ldi	r31, 0x00	; 0
    600e:	e6 5d       	subi	r30, 0xD6	; 214
    6010:	ff 4d       	sbci	r31, 0xDF	; 223
    6012:	81 7f       	andi	r24, 0xF1	; 241
    6014:	90 81       	ld	r25, Z
	sleep_enable();
    6016:	89 2b       	or	r24, r25
    6018:	8c 93       	st	X, r24
    601a:	8c 91       	ld	r24, X

	cpu_irq_enable();
    601c:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    601e:	8c 93       	st	X, r24

	sleep_disable();
    6020:	78 94       	sei
    6022:	88 95       	sleep
    6024:	f2 01       	movw	r30, r4
    6026:	80 81       	ld	r24, Z
	/* Start TWI channels */
	twi_start();		// Start TWI

	/* The application code */
	runmode = 1;
    while (runmode) {
    6028:	8e 7f       	andi	r24, 0xFE	; 254
    602a:	80 83       	st	Z, r24
    602c:	80 91 43 24 	lds	r24, 0x2443	; 0x802443 <runmode>
		task();
		sleepmgr_enter_sleep();
    }

	cpu_irq_disable();
    6030:	81 11       	cpse	r24, r1
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    6032:	da ce       	rjmp	.-588    	; 0x5de8 <main+0x336>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    6034:	f8 94       	cli
    6036:	f8 94       	cli
    6038:	80 91 9b 25 	lds	r24, 0x259B	; 0x80259b <sleepmgr_locks>
    603c:	81 11       	cpse	r24, r1
    603e:	09 c0       	rjmp	.+18     	; 0x6052 <__stack+0x53>
    6040:	ac e9       	ldi	r26, 0x9C	; 156
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    6042:	b5 e2       	ldi	r27, 0x25	; 37

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    6044:	e0 e0       	ldi	r30, 0x00	; 0
    6046:	ef 5f       	subi	r30, 0xFF	; 255
    6048:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    604a:	88 23       	and	r24, r24
    604c:	e1 f3       	breq	.-8      	; 0x6046 <__stack+0x47>
		cpu_irq_enable();
    604e:	e1 11       	cpse	r30, r1
    6050:	02 c0       	rjmp	.+4      	; 0x6056 <__stack+0x57>
    6052:	78 94       	sei
    6054:	13 c0       	rjmp	.+38     	; 0x607c <__stack+0x7d>
    6056:	a8 e4       	ldi	r26, 0x48	; 72

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    6058:	b0 e0       	ldi	r27, 0x00	; 0
    605a:	8c 91       	ld	r24, X
    605c:	f0 e0       	ldi	r31, 0x00	; 0
    605e:	e6 5d       	subi	r30, 0xD6	; 214
    6060:	ff 4d       	sbci	r31, 0xDF	; 223
    6062:	98 2f       	mov	r25, r24
    6064:	91 7f       	andi	r25, 0xF1	; 241
    6066:	80 81       	ld	r24, Z
	sleep_enable();
    6068:	89 2b       	or	r24, r25
    606a:	8c 93       	st	X, r24
    606c:	8c 91       	ld	r24, X

	cpu_irq_enable();
    606e:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    6070:	8c 93       	st	X, r24

	sleep_disable();
    6072:	78 94       	sei
    6074:	88 95       	sleep
    6076:	8c 91       	ld	r24, X
	sleepmgr_enter_sleep();

	return retcode;
}
    6078:	8e 7f       	andi	r24, 0xFE	; 254
    607a:	8c 93       	st	X, r24
    607c:	80 e0       	ldi	r24, 0x00	; 0
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	a1 96       	adiw	r28, 0x21	; 33
    6082:	cd bf       	out	0x3d, r28	; 61
    6084:	de bf       	out	0x3e, r29	; 62
    6086:	df 91       	pop	r29
    6088:	cf 91       	pop	r28
    608a:	1f 91       	pop	r17
    608c:	0f 91       	pop	r16
    608e:	ff 90       	pop	r15
    6090:	ef 90       	pop	r14
    6092:	df 90       	pop	r13
    6094:	cf 90       	pop	r12
    6096:	bf 90       	pop	r11
    6098:	af 90       	pop	r10
    609a:	9f 90       	pop	r9
    609c:	8f 90       	pop	r8
    609e:	7f 90       	pop	r7
    60a0:	6f 90       	pop	r6
    60a2:	5f 90       	pop	r5
    60a4:	4f 90       	pop	r4
    60a6:	3f 90       	pop	r3
    60a8:	2f 90       	pop	r2
    60aa:	08 95       	ret

000060ac <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    60ac:	cf 93       	push	r28
    60ae:	df 93       	push	r29
    60b0:	cd b7       	in	r28, 0x3d	; 61
    60b2:	de b7       	in	r29, 0x3e	; 62
    60b4:	28 97       	sbiw	r28, 0x08	; 8
    60b6:	cd bf       	out	0x3d, r28	; 61
    60b8:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    60ba:	8f ef       	ldi	r24, 0xFF	; 255
    60bc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    60c0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    60c4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    60c8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    60cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    60d0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    60d4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    60d8:	61 e0       	ldi	r22, 0x01	; 1
    60da:	81 e4       	ldi	r24, 0x41	; 65
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <ccp_write_io>
    60e2:	6c e1       	ldi	r22, 0x1C	; 28
    60e4:	70 e0       	ldi	r23, 0x00	; 0
    60e6:	82 e0       	ldi	r24, 0x02	; 2
    60e8:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    60ec:	8a 83       	std	Y+2, r24	; 0x02
    60ee:	6d e1       	ldi	r22, 0x1D	; 29
    60f0:	70 e0       	ldi	r23, 0x00	; 0
    60f2:	82 e0       	ldi	r24, 0x02	; 2
    60f4:	0e 94 df 38 	call	0x71be	; 0x71be <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    60f8:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    60fa:	89 81       	ldd	r24, Y+1	; 0x01
    60fc:	9a 81       	ldd	r25, Y+2	; 0x02
    60fe:	01 96       	adiw	r24, 0x01	; 1
    6100:	21 f4       	brne	.+8      	; 0x610a <sysclk_init+0x5e>
		cal = 0x2340;
    6102:	80 e4       	ldi	r24, 0x40	; 64
    6104:	93 e2       	ldi	r25, 0x23	; 35
    6106:	89 83       	std	Y+1, r24	; 0x01
    6108:	9a 83       	std	Y+2, r25	; 0x02
    610a:	89 81       	ldd	r24, Y+1	; 0x01
    610c:	9a 81       	ldd	r25, Y+2	; 0x02
    610e:	8b 83       	std	Y+3, r24	; 0x03
    6110:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    6112:	e0 e6       	ldi	r30, 0x60	; 96
    6114:	f0 e0       	ldi	r31, 0x00	; 0
    6116:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    6118:	8c 81       	ldd	r24, Y+4	; 0x04
    611a:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    611c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    6120:	84 fd       	sbrc	r24, 4
    6122:	21 c0       	rjmp	.+66     	; 0x6166 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    6124:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    6128:	83 fd       	sbrc	r24, 3
    612a:	0e c0       	rjmp	.+28     	; 0x6148 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    612c:	e0 e5       	ldi	r30, 0x50	; 80
    612e:	f0 e0       	ldi	r31, 0x00	; 0
    6130:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6132:	8f b7       	in	r24, 0x3f	; 63
    6134:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    6136:	f8 94       	cli
	return flags;
    6138:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    613a:	80 81       	ld	r24, Z
    613c:	88 60       	ori	r24, 0x08	; 8
    613e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6140:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    6142:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    6144:	83 ff       	sbrs	r24, 3
    6146:	fd cf       	rjmp	.-6      	; 0x6142 <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6148:	8f b7       	in	r24, 0x3f	; 63
    614a:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    614c:	f8 94       	cli
	return flags;
    614e:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    6150:	e0 e5       	ldi	r30, 0x50	; 80
    6152:	f0 e0       	ldi	r31, 0x00	; 0
    6154:	83 ec       	ldi	r24, 0xC3	; 195
    6156:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    6158:	80 81       	ld	r24, Z
    615a:	80 61       	ori	r24, 0x10	; 16
    615c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    615e:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    6160:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    6162:	84 ff       	sbrs	r24, 4
    6164:	fd cf       	rjmp	.-6      	; 0x6160 <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    6166:	64 e0       	ldi	r22, 0x04	; 4
    6168:	80 e4       	ldi	r24, 0x40	; 64
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6170:	8f b7       	in	r24, 0x3f	; 63
    6172:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    6174:	f8 94       	cli
	return flags;
    6176:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    6178:	e0 e5       	ldi	r30, 0x50	; 80
    617a:	f0 e0       	ldi	r31, 0x00	; 0
    617c:	80 81       	ld	r24, Z
    617e:	8e 7f       	andi	r24, 0xFE	; 254
    6180:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6182:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    6184:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6186:	8f b7       	in	r24, 0x3f	; 63
    6188:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    618a:	f8 94       	cli
	return flags;
    618c:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    618e:	80 81       	ld	r24, Z
    6190:	88 60       	ori	r24, 0x08	; 8
    6192:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6194:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    6196:	81 81       	ldd	r24, Z+1	; 0x01
    6198:	83 ff       	sbrs	r24, 3
    619a:	fd cf       	rjmp	.-6      	; 0x6196 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    619c:	8b e0       	ldi	r24, 0x0B	; 11
    619e:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    61a2:	28 96       	adiw	r28, 0x08	; 8
    61a4:	cd bf       	out	0x3d, r28	; 61
    61a6:	de bf       	out	0x3e, r29	; 62
    61a8:	df 91       	pop	r29
    61aa:	cf 91       	pop	r28
    61ac:	08 95       	ret

000061ae <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    61ae:	cf 93       	push	r28
    61b0:	df 93       	push	r29
    61b2:	1f 92       	push	r1
    61b4:	cd b7       	in	r28, 0x3d	; 61
    61b6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    61b8:	9f b7       	in	r25, 0x3f	; 63
    61ba:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    61bc:	f8 94       	cli
	return flags;
    61be:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    61c0:	e8 2f       	mov	r30, r24
    61c2:	f0 e0       	ldi	r31, 0x00	; 0
    61c4:	e0 59       	subi	r30, 0x90	; 144
    61c6:	ff 4f       	sbci	r31, 0xFF	; 255
    61c8:	60 95       	com	r22
    61ca:	80 81       	ld	r24, Z
    61cc:	68 23       	and	r22, r24
    61ce:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    61d0:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    61d2:	0f 90       	pop	r0
    61d4:	df 91       	pop	r29
    61d6:	cf 91       	pop	r28
    61d8:	08 95       	ret

000061da <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    61da:	cf 93       	push	r28
    61dc:	df 93       	push	r29
    61de:	1f 92       	push	r1
    61e0:	cd b7       	in	r28, 0x3d	; 61
    61e2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    61e4:	9f b7       	in	r25, 0x3f	; 63
    61e6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    61e8:	f8 94       	cli
	return flags;
    61ea:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    61ec:	e8 2f       	mov	r30, r24
    61ee:	f0 e0       	ldi	r31, 0x00	; 0
    61f0:	e0 59       	subi	r30, 0x90	; 144
    61f2:	ff 4f       	sbci	r31, 0xFF	; 255
    61f4:	80 81       	ld	r24, Z
    61f6:	68 2b       	or	r22, r24
    61f8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    61fa:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    61fc:	0f 90       	pop	r0
    61fe:	df 91       	pop	r29
    6200:	cf 91       	pop	r28
    6202:	08 95       	ret

00006204 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    6204:	cf 93       	push	r28
    6206:	df 93       	push	r29
    6208:	1f 92       	push	r1
    620a:	1f 92       	push	r1
    620c:	cd b7       	in	r28, 0x3d	; 61
    620e:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    6210:	86 30       	cpi	r24, 0x06	; 6
    6212:	11 f0       	breq	.+4      	; 0x6218 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    6214:	60 e0       	ldi	r22, 0x00	; 0
    6216:	01 c0       	rjmp	.+2      	; 0x621a <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    6218:	68 e1       	ldi	r22, 0x18	; 24
    621a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    621e:	81 fd       	sbrc	r24, 1
    6220:	2a c0       	rjmp	.+84     	; 0x6276 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6222:	8f b7       	in	r24, 0x3f	; 63
    6224:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    6226:	f8 94       	cli
	return flags;
    6228:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    622a:	e0 e5       	ldi	r30, 0x50	; 80
    622c:	f0 e0       	ldi	r31, 0x00	; 0
    622e:	80 81       	ld	r24, Z
    6230:	82 60       	ori	r24, 0x02	; 2
    6232:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6234:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    6236:	81 81       	ldd	r24, Z+1	; 0x01
    6238:	81 ff       	sbrs	r24, 1
    623a:	fd cf       	rjmp	.-6      	; 0x6236 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    623c:	8f b7       	in	r24, 0x3f	; 63
    623e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    6240:	f8 94       	cli
	return flags;
    6242:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    6244:	a0 e5       	ldi	r26, 0x50	; 80
    6246:	b0 e0       	ldi	r27, 0x00	; 0
    6248:	16 96       	adiw	r26, 0x06	; 6
    624a:	8c 91       	ld	r24, X
    624c:	16 97       	sbiw	r26, 0x06	; 6
    624e:	89 7f       	andi	r24, 0xF9	; 249
    6250:	16 96       	adiw	r26, 0x06	; 6
    6252:	8c 93       	st	X, r24
    6254:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    6256:	e0 e6       	ldi	r30, 0x60	; 96
    6258:	f0 e0       	ldi	r31, 0x00	; 0
    625a:	80 e8       	ldi	r24, 0x80	; 128
    625c:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    625e:	8b eb       	ldi	r24, 0xBB	; 187
    6260:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    6262:	16 96       	adiw	r26, 0x06	; 6
    6264:	8c 91       	ld	r24, X
    6266:	16 97       	sbiw	r26, 0x06	; 6
    6268:	84 60       	ori	r24, 0x04	; 4
    626a:	16 96       	adiw	r26, 0x06	; 6
    626c:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    626e:	80 81       	ld	r24, Z
    6270:	81 60       	ori	r24, 0x01	; 1
    6272:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6274:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    6276:	63 60       	ori	r22, 0x03	; 3
    6278:	84 e4       	ldi	r24, 0x44	; 68
    627a:	90 e0       	ldi	r25, 0x00	; 0
    627c:	aa d7       	rcall	.+3924   	; 0x71d2 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    627e:	60 e4       	ldi	r22, 0x40	; 64
    6280:	80 e0       	ldi	r24, 0x00	; 0
    6282:	95 df       	rcall	.-214    	; 0x61ae <sysclk_enable_module>
}
    6284:	0f 90       	pop	r0
    6286:	0f 90       	pop	r0
    6288:	df 91       	pop	r29
    628a:	cf 91       	pop	r28
    628c:	08 95       	ret

0000628e <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    628e:	80 91 5a 25 	lds	r24, 0x255A	; 0x80255a <udi_cdc_nb_comm_enabled>
    6292:	81 50       	subi	r24, 0x01	; 1
    6294:	80 93 5a 25 	sts	0x255A, r24	; 0x80255a <udi_cdc_nb_comm_enabled>
    6298:	08 95       	ret

0000629a <udi_cdc_data_setup>:
    629a:	80 e0       	ldi	r24, 0x00	; 0
    629c:	08 95       	ret

0000629e <udi_cdc_getsetting>:
    629e:	80 e0       	ldi	r24, 0x00	; 0
    62a0:	08 95       	ret

000062a2 <udi_cdc_line_coding_received>:
    62a2:	68 e6       	ldi	r22, 0x68	; 104
    62a4:	75 e2       	ldi	r23, 0x25	; 37
    62a6:	80 e0       	ldi	r24, 0x00	; 0
    62a8:	ff cb       	rjmp	.-2050   	; 0x5aa8 <usb_callback_config>
    62aa:	08 95       	ret

000062ac <udi_cdc_comm_enable>:
    62ac:	10 92 5a 25 	sts	0x255A, r1	; 0x80255a <udi_cdc_nb_comm_enabled>
    62b0:	10 92 66 25 	sts	0x2566, r1	; 0x802566 <udi_cdc_state>
    62b4:	10 92 67 25 	sts	0x2567, r1	; 0x802567 <udi_cdc_state+0x1>
    62b8:	ec e5       	ldi	r30, 0x5C	; 92
    62ba:	f5 e2       	ldi	r31, 0x25	; 37
    62bc:	81 ea       	ldi	r24, 0xA1	; 161
    62be:	80 83       	st	Z, r24
    62c0:	80 e2       	ldi	r24, 0x20	; 32
    62c2:	81 83       	std	Z+1, r24	; 0x01
    62c4:	12 82       	std	Z+2, r1	; 0x02
    62c6:	13 82       	std	Z+3, r1	; 0x03
    62c8:	14 82       	std	Z+4, r1	; 0x04
    62ca:	15 82       	std	Z+5, r1	; 0x05
    62cc:	82 e0       	ldi	r24, 0x02	; 2
    62ce:	90 e0       	ldi	r25, 0x00	; 0
    62d0:	86 83       	std	Z+6, r24	; 0x06
    62d2:	97 83       	std	Z+7, r25	; 0x07
    62d4:	10 86       	std	Z+8, r1	; 0x08
    62d6:	11 86       	std	Z+9, r1	; 0x09
    62d8:	e8 e6       	ldi	r30, 0x68	; 104
    62da:	f5 e2       	ldi	r31, 0x25	; 37
    62dc:	80 e0       	ldi	r24, 0x00	; 0
    62de:	92 ec       	ldi	r25, 0xC2	; 194
    62e0:	a1 e0       	ldi	r26, 0x01	; 1
    62e2:	b0 e0       	ldi	r27, 0x00	; 0
    62e4:	80 83       	st	Z, r24
    62e6:	91 83       	std	Z+1, r25	; 0x01
    62e8:	a2 83       	std	Z+2, r26	; 0x02
    62ea:	b3 83       	std	Z+3, r27	; 0x03
    62ec:	14 82       	std	Z+4, r1	; 0x04
    62ee:	15 82       	std	Z+5, r1	; 0x05
    62f0:	88 e0       	ldi	r24, 0x08	; 8
    62f2:	86 83       	std	Z+6, r24	; 0x06
    62f4:	bf 01       	movw	r22, r30
    62f6:	80 e0       	ldi	r24, 0x00	; 0
    62f8:	d7 db       	rcall	.-2130   	; 0x5aa8 <usb_callback_config>
    62fa:	cf db       	rcall	.-2146   	; 0x5a9a <usb_callback_cdc_enable>
    62fc:	88 23       	and	r24, r24
    62fe:	29 f0       	breq	.+10     	; 0x630a <udi_cdc_comm_enable+0x5e>
    6300:	90 91 5a 25 	lds	r25, 0x255A	; 0x80255a <udi_cdc_nb_comm_enabled>
    6304:	9f 5f       	subi	r25, 0xFF	; 255
    6306:	90 93 5a 25 	sts	0x255A, r25	; 0x80255a <udi_cdc_nb_comm_enabled>
    630a:	08 95       	ret

0000630c <udi_cdc_tx_send>:
    630c:	ff 92       	push	r15
    630e:	0f 93       	push	r16
    6310:	1f 93       	push	r17
    6312:	cf 93       	push	r28
    6314:	df 93       	push	r29
    6316:	1f 92       	push	r1
    6318:	cd b7       	in	r28, 0x3d	; 61
    631a:	de b7       	in	r29, 0x3e	; 62
    631c:	80 91 47 24 	lds	r24, 0x2447	; 0x802447 <udi_cdc_tx_trans_ongoing>
    6320:	81 11       	cpse	r24, r1
    6322:	9f c0       	rjmp	.+318    	; 0x6462 <udi_cdc_tx_send+0x156>
    6324:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <udd_is_high_speed>
    6328:	88 23       	and	r24, r24
    632a:	51 f0       	breq	.+20     	; 0x6340 <udi_cdc_tx_send+0x34>
    632c:	00 91 48 24 	lds	r16, 0x2448	; 0x802448 <udi_cdc_tx_sof_num>
    6330:	10 91 49 24 	lds	r17, 0x2449	; 0x802449 <udi_cdc_tx_sof_num+0x1>
    6334:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <udd_get_micro_frame_number>
    6338:	08 17       	cp	r16, r24
    633a:	19 07       	cpc	r17, r25
    633c:	59 f4       	brne	.+22     	; 0x6354 <udi_cdc_tx_send+0x48>
    633e:	91 c0       	rjmp	.+290    	; 0x6462 <udi_cdc_tx_send+0x156>
    6340:	00 91 48 24 	lds	r16, 0x2448	; 0x802448 <udi_cdc_tx_sof_num>
    6344:	10 91 49 24 	lds	r17, 0x2449	; 0x802449 <udi_cdc_tx_sof_num+0x1>
    6348:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <udd_get_frame_number>
    634c:	08 17       	cp	r16, r24
    634e:	19 07       	cpc	r17, r25
    6350:	09 f4       	brne	.+2      	; 0x6354 <udi_cdc_tx_send+0x48>
    6352:	87 c0       	rjmp	.+270    	; 0x6462 <udi_cdc_tx_send+0x156>
    6354:	8f b7       	in	r24, 0x3f	; 63
    6356:	89 83       	std	Y+1, r24	; 0x01
    6358:	f8 94       	cli
    635a:	19 81       	ldd	r17, Y+1	; 0x01
    635c:	00 91 4a 24 	lds	r16, 0x244A	; 0x80244a <udi_cdc_tx_buf_sel>
    6360:	e0 2f       	mov	r30, r16
    6362:	f0 e0       	ldi	r31, 0x00	; 0
    6364:	ee 0f       	add	r30, r30
    6366:	ff 1f       	adc	r31, r31
    6368:	e5 5b       	subi	r30, 0xB5	; 181
    636a:	fb 4d       	sbci	r31, 0xDB	; 219
    636c:	80 81       	ld	r24, Z
    636e:	91 81       	ldd	r25, Z+1	; 0x01
    6370:	89 2b       	or	r24, r25
    6372:	09 f5       	brne	.+66     	; 0x63b6 <udi_cdc_tx_send+0xaa>
    6374:	80 91 44 24 	lds	r24, 0x2444	; 0x802444 <sof_zlp_counter.5059>
    6378:	90 91 45 24 	lds	r25, 0x2445	; 0x802445 <sof_zlp_counter.5059+0x1>
    637c:	01 96       	adiw	r24, 0x01	; 1
    637e:	80 93 44 24 	sts	0x2444, r24	; 0x802444 <sof_zlp_counter.5059>
    6382:	90 93 45 24 	sts	0x2445, r25	; 0x802445 <sof_zlp_counter.5059+0x1>
    6386:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <udd_is_high_speed>
    638a:	81 11       	cpse	r24, r1
    638c:	07 c0       	rjmp	.+14     	; 0x639c <udi_cdc_tx_send+0x90>
    638e:	80 91 44 24 	lds	r24, 0x2444	; 0x802444 <sof_zlp_counter.5059>
    6392:	90 91 45 24 	lds	r25, 0x2445	; 0x802445 <sof_zlp_counter.5059+0x1>
    6396:	84 36       	cpi	r24, 0x64	; 100
    6398:	91 05       	cpc	r25, r1
    639a:	58 f0       	brcs	.+22     	; 0x63b2 <udi_cdc_tx_send+0xa6>
    639c:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <udd_is_high_speed>
    63a0:	88 23       	and	r24, r24
    63a2:	49 f0       	breq	.+18     	; 0x63b6 <udi_cdc_tx_send+0xaa>
    63a4:	80 91 44 24 	lds	r24, 0x2444	; 0x802444 <sof_zlp_counter.5059>
    63a8:	90 91 45 24 	lds	r25, 0x2445	; 0x802445 <sof_zlp_counter.5059+0x1>
    63ac:	80 32       	cpi	r24, 0x20	; 32
    63ae:	93 40       	sbci	r25, 0x03	; 3
    63b0:	10 f4       	brcc	.+4      	; 0x63b6 <udi_cdc_tx_send+0xaa>
    63b2:	1f bf       	out	0x3f, r17	; 63
    63b4:	56 c0       	rjmp	.+172    	; 0x6462 <udi_cdc_tx_send+0x156>
    63b6:	10 92 44 24 	sts	0x2444, r1	; 0x802444 <sof_zlp_counter.5059>
    63ba:	10 92 45 24 	sts	0x2445, r1	; 0x802445 <sof_zlp_counter.5059+0x1>
    63be:	80 91 46 24 	lds	r24, 0x2446	; 0x802446 <udi_cdc_tx_both_buf_to_send>
    63c2:	81 11       	cpse	r24, r1
    63c4:	06 c0       	rjmp	.+12     	; 0x63d2 <udi_cdc_tx_send+0xc6>
    63c6:	81 e0       	ldi	r24, 0x01	; 1
    63c8:	01 11       	cpse	r16, r1
    63ca:	80 e0       	ldi	r24, 0x00	; 0
    63cc:	80 93 4a 24 	sts	0x244A, r24	; 0x80244a <udi_cdc_tx_buf_sel>
    63d0:	04 c0       	rjmp	.+8      	; 0x63da <udi_cdc_tx_send+0xce>
    63d2:	81 e0       	ldi	r24, 0x01	; 1
    63d4:	01 11       	cpse	r16, r1
    63d6:	80 e0       	ldi	r24, 0x00	; 0
    63d8:	08 2f       	mov	r16, r24
    63da:	81 e0       	ldi	r24, 0x01	; 1
    63dc:	80 93 47 24 	sts	0x2447, r24	; 0x802447 <udi_cdc_tx_trans_ongoing>
    63e0:	1f bf       	out	0x3f, r17	; 63
    63e2:	10 e0       	ldi	r17, 0x00	; 0
    63e4:	f8 01       	movw	r30, r16
    63e6:	ee 0f       	add	r30, r30
    63e8:	ff 1f       	adc	r31, r31
    63ea:	e5 5b       	subi	r30, 0xB5	; 181
    63ec:	fb 4d       	sbci	r31, 0xDB	; 219
    63ee:	80 81       	ld	r24, Z
    63f0:	91 81       	ldd	r25, Z+1	; 0x01
    63f2:	ff 24       	eor	r15, r15
    63f4:	f3 94       	inc	r15
    63f6:	80 34       	cpi	r24, 0x40	; 64
    63f8:	91 05       	cpc	r25, r1
    63fa:	09 f4       	brne	.+2      	; 0x63fe <udi_cdc_tx_send+0xf2>
    63fc:	f1 2c       	mov	r15, r1
    63fe:	80 34       	cpi	r24, 0x40	; 64
    6400:	91 05       	cpc	r25, r1
    6402:	91 f0       	breq	.+36     	; 0x6428 <udi_cdc_tx_send+0x11c>
    6404:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <udd_is_high_speed>
    6408:	88 23       	and	r24, r24
    640a:	39 f0       	breq	.+14     	; 0x641a <udi_cdc_tx_send+0x10e>
    640c:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <udd_get_micro_frame_number>
    6410:	80 93 48 24 	sts	0x2448, r24	; 0x802448 <udi_cdc_tx_sof_num>
    6414:	90 93 49 24 	sts	0x2449, r25	; 0x802449 <udi_cdc_tx_sof_num+0x1>
    6418:	0b c0       	rjmp	.+22     	; 0x6430 <udi_cdc_tx_send+0x124>
    641a:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <udd_get_frame_number>
    641e:	80 93 48 24 	sts	0x2448, r24	; 0x802448 <udi_cdc_tx_sof_num>
    6422:	90 93 49 24 	sts	0x2449, r25	; 0x802449 <udi_cdc_tx_sof_num+0x1>
    6426:	04 c0       	rjmp	.+8      	; 0x6430 <udi_cdc_tx_send+0x124>
    6428:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <udi_cdc_tx_sof_num>
    642c:	10 92 49 24 	sts	0x2449, r1	; 0x802449 <udi_cdc_tx_sof_num+0x1>
    6430:	f8 01       	movw	r30, r16
    6432:	ee 0f       	add	r30, r30
    6434:	ff 1f       	adc	r31, r31
    6436:	e5 5b       	subi	r30, 0xB5	; 181
    6438:	fb 4d       	sbci	r31, 0xDB	; 219
    643a:	20 81       	ld	r18, Z
    643c:	31 81       	ldd	r19, Z+1	; 0x01
    643e:	a8 01       	movw	r20, r16
    6440:	00 24       	eor	r0, r0
    6442:	56 95       	lsr	r21
    6444:	47 95       	ror	r20
    6446:	07 94       	ror	r0
    6448:	56 95       	lsr	r21
    644a:	47 95       	ror	r20
    644c:	07 94       	ror	r0
    644e:	54 2f       	mov	r21, r20
    6450:	40 2d       	mov	r20, r0
    6452:	40 5b       	subi	r20, 0xB0	; 176
    6454:	5b 4d       	sbci	r21, 0xDB	; 219
    6456:	0b e3       	ldi	r16, 0x3B	; 59
    6458:	12 e3       	ldi	r17, 0x32	; 50
    645a:	6f 2d       	mov	r22, r15
    645c:	81 e8       	ldi	r24, 0x81	; 129
    645e:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <udd_ep_run>
    6462:	0f 90       	pop	r0
    6464:	df 91       	pop	r29
    6466:	cf 91       	pop	r28
    6468:	1f 91       	pop	r17
    646a:	0f 91       	pop	r16
    646c:	ff 90       	pop	r15
    646e:	08 95       	ret

00006470 <udi_cdc_data_sof_notify>:
    6470:	80 e0       	ldi	r24, 0x00	; 0
    6472:	4c cf       	rjmp	.-360    	; 0x630c <udi_cdc_tx_send>
    6474:	08 95       	ret

00006476 <udi_cdc_data_sent>:
    6476:	81 11       	cpse	r24, r1
    6478:	19 c0       	rjmp	.+50     	; 0x64ac <udi_cdc_data_sent+0x36>
    647a:	20 91 4a 24 	lds	r18, 0x244A	; 0x80244a <udi_cdc_tx_buf_sel>
    647e:	81 e0       	ldi	r24, 0x01	; 1
    6480:	90 e0       	ldi	r25, 0x00	; 0
    6482:	22 23       	and	r18, r18
    6484:	11 f0       	breq	.+4      	; 0x648a <udi_cdc_data_sent+0x14>
    6486:	80 e0       	ldi	r24, 0x00	; 0
    6488:	90 e0       	ldi	r25, 0x00	; 0
    648a:	88 0f       	add	r24, r24
    648c:	99 1f       	adc	r25, r25
    648e:	fc 01       	movw	r30, r24
    6490:	e5 5b       	subi	r30, 0xB5	; 181
    6492:	fb 4d       	sbci	r31, 0xDB	; 219
    6494:	10 82       	st	Z, r1
    6496:	11 82       	std	Z+1, r1	; 0x01
    6498:	10 92 46 24 	sts	0x2446, r1	; 0x802446 <udi_cdc_tx_both_buf_to_send>
    649c:	10 92 47 24 	sts	0x2447, r1	; 0x802447 <udi_cdc_tx_trans_ongoing>
    64a0:	67 2b       	or	r22, r23
    64a2:	11 f0       	breq	.+4      	; 0x64a8 <udi_cdc_data_sent+0x32>
    64a4:	80 e0       	ldi	r24, 0x00	; 0
    64a6:	04 db       	rcall	.-2552   	; 0x5ab0 <usb_callback_tx_empty_notify>
    64a8:	80 e0       	ldi	r24, 0x00	; 0
    64aa:	30 cf       	rjmp	.-416    	; 0x630c <udi_cdc_tx_send>
    64ac:	08 95       	ret

000064ae <udi_cdc_data_disable>:
    64ae:	80 91 59 25 	lds	r24, 0x2559	; 0x802559 <udi_cdc_nb_data_enabled>
    64b2:	81 50       	subi	r24, 0x01	; 1
    64b4:	80 93 59 25 	sts	0x2559, r24	; 0x802559 <udi_cdc_nb_data_enabled>
    64b8:	80 91 59 25 	lds	r24, 0x2559	; 0x802559 <udi_cdc_nb_data_enabled>
    64bc:	f2 da       	rcall	.-2588   	; 0x5aa2 <usb_callback_cdc_disable>
    64be:	10 92 58 25 	sts	0x2558, r1	; 0x802558 <udi_cdc_data_running>
    64c2:	08 95       	ret

000064c4 <udi_cdc_comm_setup>:
    64c4:	cf 93       	push	r28
    64c6:	df 93       	push	r29
    64c8:	80 91 8b 25 	lds	r24, 0x258B	; 0x80258b <udd_g_ctrlreq>
    64cc:	88 23       	and	r24, r24
    64ce:	e4 f4       	brge	.+56     	; 0x6508 <udi_cdc_comm_setup+0x44>
    64d0:	80 76       	andi	r24, 0x60	; 96
    64d2:	80 32       	cpi	r24, 0x20	; 32
    64d4:	09 f0       	breq	.+2      	; 0x64d8 <udi_cdc_comm_setup+0x14>
    64d6:	47 c0       	rjmp	.+142    	; 0x6566 <udi_cdc_comm_setup+0xa2>
    64d8:	80 91 8c 25 	lds	r24, 0x258C	; 0x80258c <udd_g_ctrlreq+0x1>
    64dc:	81 32       	cpi	r24, 0x21	; 33
    64de:	09 f0       	breq	.+2      	; 0x64e2 <udi_cdc_comm_setup+0x1e>
    64e0:	44 c0       	rjmp	.+136    	; 0x656a <udi_cdc_comm_setup+0xa6>
    64e2:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    64e6:	90 91 92 25 	lds	r25, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    64ea:	07 97       	sbiw	r24, 0x07	; 7
    64ec:	09 f0       	breq	.+2      	; 0x64f0 <udi_cdc_comm_setup+0x2c>
    64ee:	3f c0       	rjmp	.+126    	; 0x656e <udi_cdc_comm_setup+0xaa>
    64f0:	eb e8       	ldi	r30, 0x8B	; 139
    64f2:	f5 e2       	ldi	r31, 0x25	; 37
    64f4:	88 e6       	ldi	r24, 0x68	; 104
    64f6:	95 e2       	ldi	r25, 0x25	; 37
    64f8:	80 87       	std	Z+8, r24	; 0x08
    64fa:	91 87       	std	Z+9, r25	; 0x09
    64fc:	87 e0       	ldi	r24, 0x07	; 7
    64fe:	90 e0       	ldi	r25, 0x00	; 0
    6500:	82 87       	std	Z+10, r24	; 0x0a
    6502:	93 87       	std	Z+11, r25	; 0x0b
    6504:	81 e0       	ldi	r24, 0x01	; 1
    6506:	3a c0       	rjmp	.+116    	; 0x657c <udi_cdc_comm_setup+0xb8>
    6508:	80 76       	andi	r24, 0x60	; 96
    650a:	80 32       	cpi	r24, 0x20	; 32
    650c:	91 f5       	brne	.+100    	; 0x6572 <udi_cdc_comm_setup+0xae>
    650e:	80 91 8c 25 	lds	r24, 0x258C	; 0x80258c <udd_g_ctrlreq+0x1>
    6512:	80 32       	cpi	r24, 0x20	; 32
    6514:	19 f0       	breq	.+6      	; 0x651c <udi_cdc_comm_setup+0x58>
    6516:	82 32       	cpi	r24, 0x22	; 34
    6518:	b9 f0       	breq	.+46     	; 0x6548 <udi_cdc_comm_setup+0x84>
    651a:	2d c0       	rjmp	.+90     	; 0x6576 <udi_cdc_comm_setup+0xb2>
    651c:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    6520:	90 91 92 25 	lds	r25, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    6524:	07 97       	sbiw	r24, 0x07	; 7
    6526:	49 f5       	brne	.+82     	; 0x657a <udi_cdc_comm_setup+0xb6>
    6528:	eb e8       	ldi	r30, 0x8B	; 139
    652a:	f5 e2       	ldi	r31, 0x25	; 37
    652c:	81 e5       	ldi	r24, 0x51	; 81
    652e:	91 e3       	ldi	r25, 0x31	; 49
    6530:	84 87       	std	Z+12, r24	; 0x0c
    6532:	95 87       	std	Z+13, r25	; 0x0d
    6534:	88 e6       	ldi	r24, 0x68	; 104
    6536:	95 e2       	ldi	r25, 0x25	; 37
    6538:	80 87       	std	Z+8, r24	; 0x08
    653a:	91 87       	std	Z+9, r25	; 0x09
    653c:	87 e0       	ldi	r24, 0x07	; 7
    653e:	90 e0       	ldi	r25, 0x00	; 0
    6540:	82 87       	std	Z+10, r24	; 0x0a
    6542:	93 87       	std	Z+11, r25	; 0x0b
    6544:	81 e0       	ldi	r24, 0x01	; 1
    6546:	1a c0       	rjmp	.+52     	; 0x657c <udi_cdc_comm_setup+0xb8>
    6548:	cb e8       	ldi	r28, 0x8B	; 139
    654a:	d5 e2       	ldi	r29, 0x25	; 37
    654c:	6a 81       	ldd	r22, Y+2	; 0x02
    654e:	61 70       	andi	r22, 0x01	; 1
    6550:	80 e0       	ldi	r24, 0x00	; 0
    6552:	ab da       	rcall	.-2730   	; 0x5aaa <usb_callback_cdc_set_dtr>
    6554:	6a 81       	ldd	r22, Y+2	; 0x02
    6556:	7b 81       	ldd	r23, Y+3	; 0x03
    6558:	76 95       	lsr	r23
    655a:	67 95       	ror	r22
    655c:	61 70       	andi	r22, 0x01	; 1
    655e:	80 e0       	ldi	r24, 0x00	; 0
    6560:	a5 da       	rcall	.-2742   	; 0x5aac <usb_callback_cdc_set_rts>
    6562:	81 e0       	ldi	r24, 0x01	; 1
    6564:	0b c0       	rjmp	.+22     	; 0x657c <udi_cdc_comm_setup+0xb8>
    6566:	80 e0       	ldi	r24, 0x00	; 0
    6568:	09 c0       	rjmp	.+18     	; 0x657c <udi_cdc_comm_setup+0xb8>
    656a:	80 e0       	ldi	r24, 0x00	; 0
    656c:	07 c0       	rjmp	.+14     	; 0x657c <udi_cdc_comm_setup+0xb8>
    656e:	80 e0       	ldi	r24, 0x00	; 0
    6570:	05 c0       	rjmp	.+10     	; 0x657c <udi_cdc_comm_setup+0xb8>
    6572:	80 e0       	ldi	r24, 0x00	; 0
    6574:	03 c0       	rjmp	.+6      	; 0x657c <udi_cdc_comm_setup+0xb8>
    6576:	80 e0       	ldi	r24, 0x00	; 0
    6578:	01 c0       	rjmp	.+2      	; 0x657c <udi_cdc_comm_setup+0xb8>
    657a:	80 e0       	ldi	r24, 0x00	; 0
    657c:	df 91       	pop	r29
    657e:	cf 91       	pop	r28
    6580:	08 95       	ret

00006582 <udi_cdc_multi_get_nb_received_data>:
    6582:	cf 93       	push	r28
    6584:	df 93       	push	r29
    6586:	1f 92       	push	r1
    6588:	cd b7       	in	r28, 0x3d	; 61
    658a:	de b7       	in	r29, 0x3e	; 62
    658c:	8f b7       	in	r24, 0x3f	; 63
    658e:	89 83       	std	Y+1, r24	; 0x01
    6590:	f8 94       	cli
    6592:	49 81       	ldd	r20, Y+1	; 0x01
    6594:	20 91 d1 24 	lds	r18, 0x24D1	; 0x8024d1 <udi_cdc_rx_pos>
    6598:	30 91 d2 24 	lds	r19, 0x24D2	; 0x8024d2 <udi_cdc_rx_pos+0x1>
    659c:	e0 91 d3 24 	lds	r30, 0x24D3	; 0x8024d3 <udi_cdc_rx_buf_sel>
    65a0:	f0 e0       	ldi	r31, 0x00	; 0
    65a2:	ee 0f       	add	r30, r30
    65a4:	ff 1f       	adc	r31, r31
    65a6:	ec 52       	subi	r30, 0x2C	; 44
    65a8:	fb 4d       	sbci	r31, 0xDB	; 219
    65aa:	80 81       	ld	r24, Z
    65ac:	91 81       	ldd	r25, Z+1	; 0x01
    65ae:	4f bf       	out	0x3f, r20	; 63
    65b0:	82 1b       	sub	r24, r18
    65b2:	93 0b       	sbc	r25, r19
    65b4:	0f 90       	pop	r0
    65b6:	df 91       	pop	r29
    65b8:	cf 91       	pop	r28
    65ba:	08 95       	ret

000065bc <udi_cdc_multi_is_rx_ready>:
    65bc:	e2 df       	rcall	.-60     	; 0x6582 <udi_cdc_multi_get_nb_received_data>
    65be:	21 e0       	ldi	r18, 0x01	; 1
    65c0:	89 2b       	or	r24, r25
    65c2:	09 f4       	brne	.+2      	; 0x65c6 <udi_cdc_multi_is_rx_ready+0xa>
    65c4:	20 e0       	ldi	r18, 0x00	; 0
    65c6:	82 2f       	mov	r24, r18
    65c8:	08 95       	ret

000065ca <udi_cdc_rx_start>:
    65ca:	0f 93       	push	r16
    65cc:	1f 93       	push	r17
    65ce:	cf 93       	push	r28
    65d0:	df 93       	push	r29
    65d2:	1f 92       	push	r1
    65d4:	cd b7       	in	r28, 0x3d	; 61
    65d6:	de b7       	in	r29, 0x3e	; 62
    65d8:	8f b7       	in	r24, 0x3f	; 63
    65da:	89 83       	std	Y+1, r24	; 0x01
    65dc:	f8 94       	cli
    65de:	99 81       	ldd	r25, Y+1	; 0x01
    65e0:	20 91 d3 24 	lds	r18, 0x24D3	; 0x8024d3 <udi_cdc_rx_buf_sel>
    65e4:	80 91 d0 24 	lds	r24, 0x24D0	; 0x8024d0 <udi_cdc_rx_trans_ongoing>
    65e8:	81 11       	cpse	r24, r1
    65ea:	10 c0       	rjmp	.+32     	; 0x660c <udi_cdc_rx_start+0x42>
    65ec:	60 91 d1 24 	lds	r22, 0x24D1	; 0x8024d1 <udi_cdc_rx_pos>
    65f0:	70 91 d2 24 	lds	r23, 0x24D2	; 0x8024d2 <udi_cdc_rx_pos+0x1>
    65f4:	02 2f       	mov	r16, r18
    65f6:	10 e0       	ldi	r17, 0x00	; 0
    65f8:	f8 01       	movw	r30, r16
    65fa:	ee 0f       	add	r30, r30
    65fc:	ff 1f       	adc	r31, r31
    65fe:	ec 52       	subi	r30, 0x2C	; 44
    6600:	fb 4d       	sbci	r31, 0xDB	; 219
    6602:	40 81       	ld	r20, Z
    6604:	51 81       	ldd	r21, Z+1	; 0x01
    6606:	64 17       	cp	r22, r20
    6608:	75 07       	cpc	r23, r21
    660a:	18 f4       	brcc	.+6      	; 0x6612 <udi_cdc_rx_start+0x48>
    660c:	9f bf       	out	0x3f, r25	; 63
    660e:	80 e0       	ldi	r24, 0x00	; 0
    6610:	27 c0       	rjmp	.+78     	; 0x6660 <udi_cdc_rx_start+0x96>
    6612:	10 92 d1 24 	sts	0x24D1, r1	; 0x8024d1 <udi_cdc_rx_pos>
    6616:	10 92 d2 24 	sts	0x24D2, r1	; 0x8024d2 <udi_cdc_rx_pos+0x1>
    661a:	81 e0       	ldi	r24, 0x01	; 1
    661c:	21 11       	cpse	r18, r1
    661e:	80 e0       	ldi	r24, 0x00	; 0
    6620:	80 93 d3 24 	sts	0x24D3, r24	; 0x8024d3 <udi_cdc_rx_buf_sel>
    6624:	81 e0       	ldi	r24, 0x01	; 1
    6626:	80 93 d0 24 	sts	0x24D0, r24	; 0x8024d0 <udi_cdc_rx_trans_ongoing>
    662a:	9f bf       	out	0x3f, r25	; 63
    662c:	80 e0       	ldi	r24, 0x00	; 0
    662e:	c6 df       	rcall	.-116    	; 0x65bc <udi_cdc_multi_is_rx_ready>
    6630:	88 23       	and	r24, r24
    6632:	11 f0       	breq	.+4      	; 0x6638 <udi_cdc_rx_start+0x6e>
    6634:	80 e0       	ldi	r24, 0x00	; 0
    6636:	3b da       	rcall	.-2954   	; 0x5aae <usb_callback_rx_notify>
    6638:	a8 01       	movw	r20, r16
    663a:	00 24       	eor	r0, r0
    663c:	56 95       	lsr	r21
    663e:	47 95       	ror	r20
    6640:	07 94       	ror	r0
    6642:	56 95       	lsr	r21
    6644:	47 95       	ror	r20
    6646:	07 94       	ror	r0
    6648:	54 2f       	mov	r21, r20
    664a:	40 2d       	mov	r20, r0
    664c:	48 52       	subi	r20, 0x28	; 40
    664e:	5b 4d       	sbci	r21, 0xDB	; 219
    6650:	08 e6       	ldi	r16, 0x68	; 104
    6652:	13 e3       	ldi	r17, 0x33	; 51
    6654:	20 e4       	ldi	r18, 0x40	; 64
    6656:	30 e0       	ldi	r19, 0x00	; 0
    6658:	61 e0       	ldi	r22, 0x01	; 1
    665a:	82 e0       	ldi	r24, 0x02	; 2
    665c:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <udd_ep_run>
    6660:	0f 90       	pop	r0
    6662:	df 91       	pop	r29
    6664:	cf 91       	pop	r28
    6666:	1f 91       	pop	r17
    6668:	0f 91       	pop	r16
    666a:	08 95       	ret

0000666c <udi_cdc_data_enable>:
    666c:	10 92 59 25 	sts	0x2559, r1	; 0x802559 <udi_cdc_nb_data_enabled>
    6670:	10 92 47 24 	sts	0x2447, r1	; 0x802447 <udi_cdc_tx_trans_ongoing>
    6674:	10 92 46 24 	sts	0x2446, r1	; 0x802446 <udi_cdc_tx_both_buf_to_send>
    6678:	10 92 4a 24 	sts	0x244A, r1	; 0x80244a <udi_cdc_tx_buf_sel>
    667c:	eb e4       	ldi	r30, 0x4B	; 75
    667e:	f4 e2       	ldi	r31, 0x24	; 36
    6680:	10 82       	st	Z, r1
    6682:	11 82       	std	Z+1, r1	; 0x01
    6684:	12 82       	std	Z+2, r1	; 0x02
    6686:	13 82       	std	Z+3, r1	; 0x03
    6688:	10 92 48 24 	sts	0x2448, r1	; 0x802448 <udi_cdc_tx_sof_num>
    668c:	10 92 49 24 	sts	0x2449, r1	; 0x802449 <udi_cdc_tx_sof_num+0x1>
    6690:	80 e0       	ldi	r24, 0x00	; 0
    6692:	3c de       	rcall	.-904    	; 0x630c <udi_cdc_tx_send>
    6694:	10 92 d0 24 	sts	0x24D0, r1	; 0x8024d0 <udi_cdc_rx_trans_ongoing>
    6698:	10 92 d3 24 	sts	0x24D3, r1	; 0x8024d3 <udi_cdc_rx_buf_sel>
    669c:	e4 ed       	ldi	r30, 0xD4	; 212
    669e:	f4 e2       	ldi	r31, 0x24	; 36
    66a0:	10 82       	st	Z, r1
    66a2:	11 82       	std	Z+1, r1	; 0x01
    66a4:	12 82       	std	Z+2, r1	; 0x02
    66a6:	13 82       	std	Z+3, r1	; 0x03
    66a8:	10 92 d1 24 	sts	0x24D1, r1	; 0x8024d1 <udi_cdc_rx_pos>
    66ac:	10 92 d2 24 	sts	0x24D2, r1	; 0x8024d2 <udi_cdc_rx_pos+0x1>
    66b0:	80 e0       	ldi	r24, 0x00	; 0
    66b2:	8b df       	rcall	.-234    	; 0x65ca <udi_cdc_rx_start>
    66b4:	88 23       	and	r24, r24
    66b6:	59 f0       	breq	.+22     	; 0x66ce <udi_cdc_data_enable+0x62>
    66b8:	90 91 59 25 	lds	r25, 0x2559	; 0x802559 <udi_cdc_nb_data_enabled>
    66bc:	9f 5f       	subi	r25, 0xFF	; 255
    66be:	90 93 59 25 	sts	0x2559, r25	; 0x802559 <udi_cdc_nb_data_enabled>
    66c2:	90 91 59 25 	lds	r25, 0x2559	; 0x802559 <udi_cdc_nb_data_enabled>
    66c6:	91 30       	cpi	r25, 0x01	; 1
    66c8:	11 f4       	brne	.+4      	; 0x66ce <udi_cdc_data_enable+0x62>
    66ca:	90 93 58 25 	sts	0x2558, r25	; 0x802558 <udi_cdc_data_running>
    66ce:	08 95       	ret

000066d0 <udi_cdc_data_received>:
    66d0:	0f 93       	push	r16
    66d2:	1f 93       	push	r17
    66d4:	81 11       	cpse	r24, r1
    66d6:	29 c0       	rjmp	.+82     	; 0x672a <udi_cdc_data_received+0x5a>
    66d8:	80 91 d3 24 	lds	r24, 0x24D3	; 0x8024d3 <udi_cdc_rx_buf_sel>
    66dc:	e1 e0       	ldi	r30, 0x01	; 1
    66de:	81 11       	cpse	r24, r1
    66e0:	e0 e0       	ldi	r30, 0x00	; 0
    66e2:	84 2f       	mov	r24, r20
    66e4:	61 15       	cp	r22, r1
    66e6:	71 05       	cpc	r23, r1
    66e8:	a9 f4       	brne	.+42     	; 0x6714 <udi_cdc_data_received+0x44>
    66ea:	4e 2f       	mov	r20, r30
    66ec:	50 e0       	ldi	r21, 0x00	; 0
    66ee:	00 24       	eor	r0, r0
    66f0:	56 95       	lsr	r21
    66f2:	47 95       	ror	r20
    66f4:	07 94       	ror	r0
    66f6:	56 95       	lsr	r21
    66f8:	47 95       	ror	r20
    66fa:	07 94       	ror	r0
    66fc:	54 2f       	mov	r21, r20
    66fe:	40 2d       	mov	r20, r0
    6700:	48 52       	subi	r20, 0x28	; 40
    6702:	5b 4d       	sbci	r21, 0xDB	; 219
    6704:	08 e6       	ldi	r16, 0x68	; 104
    6706:	13 e3       	ldi	r17, 0x33	; 51
    6708:	20 e4       	ldi	r18, 0x40	; 64
    670a:	30 e0       	ldi	r19, 0x00	; 0
    670c:	61 e0       	ldi	r22, 0x01	; 1
    670e:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <udd_ep_run>
    6712:	0b c0       	rjmp	.+22     	; 0x672a <udi_cdc_data_received+0x5a>
    6714:	f0 e0       	ldi	r31, 0x00	; 0
    6716:	ee 0f       	add	r30, r30
    6718:	ff 1f       	adc	r31, r31
    671a:	ec 52       	subi	r30, 0x2C	; 44
    671c:	fb 4d       	sbci	r31, 0xDB	; 219
    671e:	60 83       	st	Z, r22
    6720:	71 83       	std	Z+1, r23	; 0x01
    6722:	10 92 d0 24 	sts	0x24D0, r1	; 0x8024d0 <udi_cdc_rx_trans_ongoing>
    6726:	80 e0       	ldi	r24, 0x00	; 0
    6728:	50 df       	rcall	.-352    	; 0x65ca <udi_cdc_rx_start>
    672a:	1f 91       	pop	r17
    672c:	0f 91       	pop	r16
    672e:	08 95       	ret

00006730 <udi_cdc_multi_getc>:
    6730:	ef 92       	push	r14
    6732:	ff 92       	push	r15
    6734:	1f 93       	push	r17
    6736:	cf 93       	push	r28
    6738:	df 93       	push	r29
    673a:	1f 92       	push	r1
    673c:	cd b7       	in	r28, 0x3d	; 61
    673e:	de b7       	in	r29, 0x3e	; 62
    6740:	11 e0       	ldi	r17, 0x01	; 1
    6742:	80 91 6e 25 	lds	r24, 0x256E	; 0x80256e <udi_cdc_line_coding+0x6>
    6746:	89 30       	cpi	r24, 0x09	; 9
    6748:	09 f0       	breq	.+2      	; 0x674c <udi_cdc_multi_getc+0x1c>
    674a:	10 e0       	ldi	r17, 0x00	; 0
    674c:	40 e0       	ldi	r20, 0x00	; 0
    674e:	50 e0       	ldi	r21, 0x00	; 0
    6750:	8f b7       	in	r24, 0x3f	; 63
    6752:	89 83       	std	Y+1, r24	; 0x01
    6754:	f8 94       	cli
    6756:	a9 81       	ldd	r26, Y+1	; 0x01
    6758:	20 91 d1 24 	lds	r18, 0x24D1	; 0x8024d1 <udi_cdc_rx_pos>
    675c:	30 91 d2 24 	lds	r19, 0x24D2	; 0x8024d2 <udi_cdc_rx_pos+0x1>
    6760:	80 91 d3 24 	lds	r24, 0x24D3	; 0x8024d3 <udi_cdc_rx_buf_sel>
    6764:	90 e0       	ldi	r25, 0x00	; 0
    6766:	fc 01       	movw	r30, r24
    6768:	ee 0f       	add	r30, r30
    676a:	ff 1f       	adc	r31, r31
    676c:	ec 52       	subi	r30, 0x2C	; 44
    676e:	fb 4d       	sbci	r31, 0xDB	; 219
    6770:	60 81       	ld	r22, Z
    6772:	71 81       	ldd	r23, Z+1	; 0x01
    6774:	af bf       	out	0x3f, r26	; 63
    6776:	26 17       	cp	r18, r22
    6778:	37 07       	cpc	r19, r23
    677a:	30 f0       	brcs	.+12     	; 0x6788 <udi_cdc_multi_getc+0x58>
    677c:	80 91 58 25 	lds	r24, 0x2558	; 0x802558 <udi_cdc_data_running>
    6780:	81 11       	cpse	r24, r1
    6782:	e6 cf       	rjmp	.-52     	; 0x6750 <udi_cdc_multi_getc+0x20>
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	21 c0       	rjmp	.+66     	; 0x67ca <udi_cdc_multi_getc+0x9a>
    6788:	fc 01       	movw	r30, r24
    678a:	00 24       	eor	r0, r0
    678c:	f6 95       	lsr	r31
    678e:	e7 95       	ror	r30
    6790:	07 94       	ror	r0
    6792:	f6 95       	lsr	r31
    6794:	e7 95       	ror	r30
    6796:	07 94       	ror	r0
    6798:	fe 2f       	mov	r31, r30
    679a:	e0 2d       	mov	r30, r0
    679c:	e8 52       	subi	r30, 0x28	; 40
    679e:	fb 4d       	sbci	r31, 0xDB	; 219
    67a0:	e2 0f       	add	r30, r18
    67a2:	f3 1f       	adc	r31, r19
    67a4:	80 81       	ld	r24, Z
    67a6:	7a 01       	movw	r14, r20
    67a8:	e8 2a       	or	r14, r24
    67aa:	2f 5f       	subi	r18, 0xFF	; 255
    67ac:	3f 4f       	sbci	r19, 0xFF	; 255
    67ae:	20 93 d1 24 	sts	0x24D1, r18	; 0x8024d1 <udi_cdc_rx_pos>
    67b2:	30 93 d2 24 	sts	0x24D2, r19	; 0x8024d2 <udi_cdc_rx_pos+0x1>
    67b6:	80 e0       	ldi	r24, 0x00	; 0
    67b8:	08 df       	rcall	.-496    	; 0x65ca <udi_cdc_rx_start>
    67ba:	11 23       	and	r17, r17
    67bc:	21 f0       	breq	.+8      	; 0x67c6 <udi_cdc_multi_getc+0x96>
    67be:	5e 2d       	mov	r21, r14
    67c0:	44 27       	eor	r20, r20
    67c2:	10 e0       	ldi	r17, 0x00	; 0
    67c4:	c5 cf       	rjmp	.-118    	; 0x6750 <udi_cdc_multi_getc+0x20>
    67c6:	8e 2d       	mov	r24, r14
    67c8:	9f 2d       	mov	r25, r15
    67ca:	0f 90       	pop	r0
    67cc:	df 91       	pop	r29
    67ce:	cf 91       	pop	r28
    67d0:	1f 91       	pop	r17
    67d2:	ff 90       	pop	r15
    67d4:	ef 90       	pop	r14
    67d6:	08 95       	ret

000067d8 <udi_cdc_getc>:
    67d8:	80 e0       	ldi	r24, 0x00	; 0
    67da:	aa cf       	rjmp	.-172    	; 0x6730 <udi_cdc_multi_getc>
    67dc:	08 95       	ret

000067de <udi_cdc_multi_get_free_tx_buffer>:
    67de:	cf 93       	push	r28
    67e0:	df 93       	push	r29
    67e2:	1f 92       	push	r1
    67e4:	cd b7       	in	r28, 0x3d	; 61
    67e6:	de b7       	in	r29, 0x3e	; 62
    67e8:	8f b7       	in	r24, 0x3f	; 63
    67ea:	89 83       	std	Y+1, r24	; 0x01
    67ec:	f8 94       	cli
    67ee:	99 81       	ldd	r25, Y+1	; 0x01
    67f0:	80 91 4a 24 	lds	r24, 0x244A	; 0x80244a <udi_cdc_tx_buf_sel>
    67f4:	e8 2f       	mov	r30, r24
    67f6:	f0 e0       	ldi	r31, 0x00	; 0
    67f8:	ee 0f       	add	r30, r30
    67fa:	ff 1f       	adc	r31, r31
    67fc:	e5 5b       	subi	r30, 0xB5	; 181
    67fe:	fb 4d       	sbci	r31, 0xDB	; 219
    6800:	20 81       	ld	r18, Z
    6802:	31 81       	ldd	r19, Z+1	; 0x01
    6804:	20 34       	cpi	r18, 0x40	; 64
    6806:	31 05       	cpc	r19, r1
    6808:	89 f4       	brne	.+34     	; 0x682c <udi_cdc_multi_get_free_tx_buffer+0x4e>
    680a:	40 91 47 24 	lds	r20, 0x2447	; 0x802447 <udi_cdc_tx_trans_ongoing>
    680e:	41 11       	cpse	r20, r1
    6810:	0d c0       	rjmp	.+26     	; 0x682c <udi_cdc_multi_get_free_tx_buffer+0x4e>
    6812:	40 91 46 24 	lds	r20, 0x2446	; 0x802446 <udi_cdc_tx_both_buf_to_send>
    6816:	41 11       	cpse	r20, r1
    6818:	09 c0       	rjmp	.+18     	; 0x682c <udi_cdc_multi_get_free_tx_buffer+0x4e>
    681a:	21 e0       	ldi	r18, 0x01	; 1
    681c:	20 93 46 24 	sts	0x2446, r18	; 0x802446 <udi_cdc_tx_both_buf_to_send>
    6820:	81 11       	cpse	r24, r1
    6822:	20 e0       	ldi	r18, 0x00	; 0
    6824:	20 93 4a 24 	sts	0x244A, r18	; 0x80244a <udi_cdc_tx_buf_sel>
    6828:	20 e0       	ldi	r18, 0x00	; 0
    682a:	30 e0       	ldi	r19, 0x00	; 0
    682c:	9f bf       	out	0x3f, r25	; 63
    682e:	80 e4       	ldi	r24, 0x40	; 64
    6830:	90 e0       	ldi	r25, 0x00	; 0
    6832:	82 1b       	sub	r24, r18
    6834:	93 0b       	sbc	r25, r19
    6836:	0f 90       	pop	r0
    6838:	df 91       	pop	r29
    683a:	cf 91       	pop	r28
    683c:	08 95       	ret

0000683e <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    683e:	cf df       	rcall	.-98     	; 0x67de <udi_cdc_multi_get_free_tx_buffer>
    6840:	21 e0       	ldi	r18, 0x01	; 1
    6842:	89 2b       	or	r24, r25
    6844:	09 f4       	brne	.+2      	; 0x6848 <udi_cdc_multi_is_tx_ready+0xa>
    6846:	20 e0       	ldi	r18, 0x00	; 0
    6848:	82 2f       	mov	r24, r18
    684a:	08 95       	ret

0000684c <udi_cdc_multi_putc>:
    684c:	ff 92       	push	r15
    684e:	0f 93       	push	r16
    6850:	1f 93       	push	r17
    6852:	cf 93       	push	r28
    6854:	df 93       	push	r29
    6856:	1f 92       	push	r1
    6858:	cd b7       	in	r28, 0x3d	; 61
    685a:	de b7       	in	r29, 0x3e	; 62
    685c:	f6 2e       	mov	r15, r22
    685e:	17 2f       	mov	r17, r23
    6860:	01 e0       	ldi	r16, 0x01	; 1
    6862:	80 91 6e 25 	lds	r24, 0x256E	; 0x80256e <udi_cdc_line_coding+0x6>
    6866:	89 30       	cpi	r24, 0x09	; 9
    6868:	09 f0       	breq	.+2      	; 0x686c <udi_cdc_multi_putc+0x20>
    686a:	00 e0       	ldi	r16, 0x00	; 0
    686c:	80 e0       	ldi	r24, 0x00	; 0
    686e:	e7 df       	rcall	.-50     	; 0x683e <udi_cdc_multi_is_tx_ready>
    6870:	81 11       	cpse	r24, r1
    6872:	07 c0       	rjmp	.+14     	; 0x6882 <udi_cdc_multi_putc+0x36>
    6874:	80 91 58 25 	lds	r24, 0x2558	; 0x802558 <udi_cdc_data_running>
    6878:	81 11       	cpse	r24, r1
    687a:	f8 cf       	rjmp	.-16     	; 0x686c <udi_cdc_multi_putc+0x20>
    687c:	80 e0       	ldi	r24, 0x00	; 0
    687e:	90 e0       	ldi	r25, 0x00	; 0
    6880:	2c c0       	rjmp	.+88     	; 0x68da <udi_cdc_multi_putc+0x8e>
    6882:	8f b7       	in	r24, 0x3f	; 63
    6884:	89 83       	std	Y+1, r24	; 0x01
    6886:	f8 94       	cli
    6888:	49 81       	ldd	r20, Y+1	; 0x01
    688a:	80 91 4a 24 	lds	r24, 0x244A	; 0x80244a <udi_cdc_tx_buf_sel>
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	fc 01       	movw	r30, r24
    6892:	ee 0f       	add	r30, r30
    6894:	ff 1f       	adc	r31, r31
    6896:	e5 5b       	subi	r30, 0xB5	; 181
    6898:	fb 4d       	sbci	r31, 0xDB	; 219
    689a:	20 81       	ld	r18, Z
    689c:	31 81       	ldd	r19, Z+1	; 0x01
    689e:	b9 01       	movw	r22, r18
    68a0:	6f 5f       	subi	r22, 0xFF	; 255
    68a2:	7f 4f       	sbci	r23, 0xFF	; 255
    68a4:	60 83       	st	Z, r22
    68a6:	71 83       	std	Z+1, r23	; 0x01
    68a8:	00 24       	eor	r0, r0
    68aa:	96 95       	lsr	r25
    68ac:	87 95       	ror	r24
    68ae:	07 94       	ror	r0
    68b0:	96 95       	lsr	r25
    68b2:	87 95       	ror	r24
    68b4:	07 94       	ror	r0
    68b6:	98 2f       	mov	r25, r24
    68b8:	80 2d       	mov	r24, r0
    68ba:	80 5b       	subi	r24, 0xB0	; 176
    68bc:	9b 4d       	sbci	r25, 0xDB	; 219
    68be:	fc 01       	movw	r30, r24
    68c0:	e2 0f       	add	r30, r18
    68c2:	f3 1f       	adc	r31, r19
    68c4:	f0 82       	st	Z, r15
    68c6:	4f bf       	out	0x3f, r20	; 63
    68c8:	00 23       	and	r16, r16
    68ca:	29 f0       	breq	.+10     	; 0x68d6 <udi_cdc_multi_putc+0x8a>
    68cc:	f1 2e       	mov	r15, r17
    68ce:	11 0f       	add	r17, r17
    68d0:	11 0b       	sbc	r17, r17
    68d2:	00 e0       	ldi	r16, 0x00	; 0
    68d4:	cb cf       	rjmp	.-106    	; 0x686c <udi_cdc_multi_putc+0x20>
    68d6:	81 e0       	ldi	r24, 0x01	; 1
    68d8:	90 e0       	ldi	r25, 0x00	; 0
    68da:	0f 90       	pop	r0
    68dc:	df 91       	pop	r29
    68de:	cf 91       	pop	r28
    68e0:	1f 91       	pop	r17
    68e2:	0f 91       	pop	r16
    68e4:	ff 90       	pop	r15
    68e6:	08 95       	ret

000068e8 <udi_cdc_putc>:
    68e8:	bc 01       	movw	r22, r24
    68ea:	80 e0       	ldi	r24, 0x00	; 0
    68ec:	af cf       	rjmp	.-162    	; 0x684c <udi_cdc_multi_putc>
    68ee:	08 95       	ret

000068f0 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    68f0:	e0 91 74 25 	lds	r30, 0x2574	; 0x802574 <udc_ptr_conf>
    68f4:	f0 91 75 25 	lds	r31, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    68f8:	01 90       	ld	r0, Z+
    68fa:	f0 81       	ld	r31, Z
    68fc:	e0 2d       	mov	r30, r0
    68fe:	22 81       	ldd	r18, Z+2	; 0x02
    6900:	33 81       	ldd	r19, Z+3	; 0x03
    6902:	2e 0f       	add	r18, r30
    6904:	3f 1f       	adc	r19, r31
    6906:	fc 01       	movw	r30, r24
    6908:	40 81       	ld	r20, Z
    690a:	e4 0f       	add	r30, r20
    690c:	f1 1d       	adc	r31, r1
    690e:	e2 17       	cp	r30, r18
    6910:	f3 07       	cpc	r31, r19
    6912:	a0 f4       	brcc	.+40     	; 0x693c <udc_next_desc_in_iface+0x4c>
    6914:	81 81       	ldd	r24, Z+1	; 0x01
    6916:	84 30       	cpi	r24, 0x04	; 4
    6918:	a1 f0       	breq	.+40     	; 0x6942 <udc_next_desc_in_iface+0x52>
    691a:	86 13       	cpse	r24, r22
    691c:	06 c0       	rjmp	.+12     	; 0x692a <udc_next_desc_in_iface+0x3a>
    691e:	14 c0       	rjmp	.+40     	; 0x6948 <udc_next_desc_in_iface+0x58>
    6920:	81 81       	ldd	r24, Z+1	; 0x01
    6922:	84 30       	cpi	r24, 0x04	; 4
    6924:	a1 f0       	breq	.+40     	; 0x694e <udc_next_desc_in_iface+0x5e>
    6926:	86 17       	cp	r24, r22
    6928:	a9 f0       	breq	.+42     	; 0x6954 <udc_next_desc_in_iface+0x64>
    692a:	80 81       	ld	r24, Z
    692c:	e8 0f       	add	r30, r24
    692e:	f1 1d       	adc	r31, r1
    6930:	e2 17       	cp	r30, r18
    6932:	f3 07       	cpc	r31, r19
    6934:	a8 f3       	brcs	.-22     	; 0x6920 <udc_next_desc_in_iface+0x30>
    6936:	80 e0       	ldi	r24, 0x00	; 0
    6938:	90 e0       	ldi	r25, 0x00	; 0
    693a:	08 95       	ret
    693c:	80 e0       	ldi	r24, 0x00	; 0
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	08 95       	ret
    6942:	80 e0       	ldi	r24, 0x00	; 0
    6944:	90 e0       	ldi	r25, 0x00	; 0
    6946:	08 95       	ret
    6948:	8e 2f       	mov	r24, r30
    694a:	9f 2f       	mov	r25, r31
    694c:	08 95       	ret
    694e:	80 e0       	ldi	r24, 0x00	; 0
    6950:	90 e0       	ldi	r25, 0x00	; 0
    6952:	08 95       	ret
    6954:	8e 2f       	mov	r24, r30
    6956:	9f 2f       	mov	r25, r31
    6958:	08 95       	ret

0000695a <udc_valid_address>:
    695a:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <udd_g_ctrlreq+0x2>
    695e:	8f 77       	andi	r24, 0x7F	; 127
    6960:	0c 94 8f 25 	jmp	0x4b1e	; 0x4b1e <udd_set_address>
    6964:	08 95       	ret

00006966 <udc_update_iface_desc>:
    6966:	90 91 76 25 	lds	r25, 0x2576	; 0x802576 <udc_num_configuration>
    696a:	99 23       	and	r25, r25
    696c:	81 f1       	breq	.+96     	; 0x69ce <udc_update_iface_desc+0x68>
    696e:	e0 91 74 25 	lds	r30, 0x2574	; 0x802574 <udc_ptr_conf>
    6972:	f0 91 75 25 	lds	r31, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    6976:	01 90       	ld	r0, Z+
    6978:	f0 81       	ld	r31, Z
    697a:	e0 2d       	mov	r30, r0
    697c:	94 81       	ldd	r25, Z+4	; 0x04
    697e:	89 17       	cp	r24, r25
    6980:	40 f5       	brcc	.+80     	; 0x69d2 <udc_update_iface_desc+0x6c>
    6982:	e0 93 72 25 	sts	0x2572, r30	; 0x802572 <udc_ptr_iface>
    6986:	f0 93 73 25 	sts	0x2573, r31	; 0x802573 <udc_ptr_iface+0x1>
    698a:	22 81       	ldd	r18, Z+2	; 0x02
    698c:	33 81       	ldd	r19, Z+3	; 0x03
    698e:	2e 0f       	add	r18, r30
    6990:	3f 1f       	adc	r19, r31
    6992:	e2 17       	cp	r30, r18
    6994:	f3 07       	cpc	r31, r19
    6996:	f8 f4       	brcc	.+62     	; 0x69d6 <udc_update_iface_desc+0x70>
    6998:	91 81       	ldd	r25, Z+1	; 0x01
    699a:	94 30       	cpi	r25, 0x04	; 4
    699c:	61 f4       	brne	.+24     	; 0x69b6 <udc_update_iface_desc+0x50>
    699e:	92 81       	ldd	r25, Z+2	; 0x02
    69a0:	89 13       	cpse	r24, r25
    69a2:	09 c0       	rjmp	.+18     	; 0x69b6 <udc_update_iface_desc+0x50>
    69a4:	93 81       	ldd	r25, Z+3	; 0x03
    69a6:	96 13       	cpse	r25, r22
    69a8:	06 c0       	rjmp	.+12     	; 0x69b6 <udc_update_iface_desc+0x50>
    69aa:	e0 93 72 25 	sts	0x2572, r30	; 0x802572 <udc_ptr_iface>
    69ae:	f0 93 73 25 	sts	0x2573, r31	; 0x802573 <udc_ptr_iface+0x1>
    69b2:	81 e0       	ldi	r24, 0x01	; 1
    69b4:	08 95       	ret
    69b6:	90 81       	ld	r25, Z
    69b8:	e9 0f       	add	r30, r25
    69ba:	f1 1d       	adc	r31, r1
    69bc:	e2 17       	cp	r30, r18
    69be:	f3 07       	cpc	r31, r19
    69c0:	58 f3       	brcs	.-42     	; 0x6998 <udc_update_iface_desc+0x32>
    69c2:	e0 93 72 25 	sts	0x2572, r30	; 0x802572 <udc_ptr_iface>
    69c6:	f0 93 73 25 	sts	0x2573, r31	; 0x802573 <udc_ptr_iface+0x1>
    69ca:	80 e0       	ldi	r24, 0x00	; 0
    69cc:	08 95       	ret
    69ce:	80 e0       	ldi	r24, 0x00	; 0
    69d0:	08 95       	ret
    69d2:	80 e0       	ldi	r24, 0x00	; 0
    69d4:	08 95       	ret
    69d6:	80 e0       	ldi	r24, 0x00	; 0
    69d8:	08 95       	ret

000069da <udc_iface_disable>:
    69da:	ef 92       	push	r14
    69dc:	ff 92       	push	r15
    69de:	1f 93       	push	r17
    69e0:	cf 93       	push	r28
    69e2:	df 93       	push	r29
    69e4:	c8 2f       	mov	r28, r24
    69e6:	60 e0       	ldi	r22, 0x00	; 0
    69e8:	be df       	rcall	.-132    	; 0x6966 <udc_update_iface_desc>
    69ea:	18 2f       	mov	r17, r24
    69ec:	88 23       	and	r24, r24
    69ee:	81 f1       	breq	.+96     	; 0x6a50 <udc_iface_disable+0x76>
    69f0:	a0 91 74 25 	lds	r26, 0x2574	; 0x802574 <udc_ptr_conf>
    69f4:	b0 91 75 25 	lds	r27, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    69f8:	ec 2f       	mov	r30, r28
    69fa:	f0 e0       	ldi	r31, 0x00	; 0
    69fc:	ee 0f       	add	r30, r30
    69fe:	ff 1f       	adc	r31, r31
    6a00:	12 96       	adiw	r26, 0x02	; 2
    6a02:	8d 91       	ld	r24, X+
    6a04:	9c 91       	ld	r25, X
    6a06:	13 97       	sbiw	r26, 0x03	; 3
    6a08:	e8 0f       	add	r30, r24
    6a0a:	f9 1f       	adc	r31, r25
    6a0c:	e0 80       	ld	r14, Z
    6a0e:	f1 80       	ldd	r15, Z+1	; 0x01
    6a10:	d7 01       	movw	r26, r14
    6a12:	16 96       	adiw	r26, 0x06	; 6
    6a14:	ed 91       	ld	r30, X+
    6a16:	fc 91       	ld	r31, X
    6a18:	17 97       	sbiw	r26, 0x07	; 7
    6a1a:	19 95       	eicall
    6a1c:	68 2f       	mov	r22, r24
    6a1e:	8c 2f       	mov	r24, r28
    6a20:	a2 df       	rcall	.-188    	; 0x6966 <udc_update_iface_desc>
    6a22:	18 2f       	mov	r17, r24
    6a24:	88 23       	and	r24, r24
    6a26:	a1 f0       	breq	.+40     	; 0x6a50 <udc_iface_disable+0x76>
    6a28:	c0 91 72 25 	lds	r28, 0x2572	; 0x802572 <udc_ptr_iface>
    6a2c:	d0 91 73 25 	lds	r29, 0x2573	; 0x802573 <udc_ptr_iface+0x1>
    6a30:	65 e0       	ldi	r22, 0x05	; 5
    6a32:	ce 01       	movw	r24, r28
    6a34:	5d df       	rcall	.-326    	; 0x68f0 <udc_next_desc_in_iface>
    6a36:	ec 01       	movw	r28, r24
    6a38:	89 2b       	or	r24, r25
    6a3a:	21 f0       	breq	.+8      	; 0x6a44 <udc_iface_disable+0x6a>
    6a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a3e:	0e 94 98 27 	call	0x4f30	; 0x4f30 <udd_ep_free>
    6a42:	f6 cf       	rjmp	.-20     	; 0x6a30 <udc_iface_disable+0x56>
    6a44:	d7 01       	movw	r26, r14
    6a46:	12 96       	adiw	r26, 0x02	; 2
    6a48:	ed 91       	ld	r30, X+
    6a4a:	fc 91       	ld	r31, X
    6a4c:	13 97       	sbiw	r26, 0x03	; 3
    6a4e:	19 95       	eicall
    6a50:	81 2f       	mov	r24, r17
    6a52:	df 91       	pop	r29
    6a54:	cf 91       	pop	r28
    6a56:	1f 91       	pop	r17
    6a58:	ff 90       	pop	r15
    6a5a:	ef 90       	pop	r14
    6a5c:	08 95       	ret

00006a5e <udc_iface_enable>:
    6a5e:	1f 93       	push	r17
    6a60:	cf 93       	push	r28
    6a62:	df 93       	push	r29
    6a64:	18 2f       	mov	r17, r24
    6a66:	7f df       	rcall	.-258    	; 0x6966 <udc_update_iface_desc>
    6a68:	88 23       	and	r24, r24
    6a6a:	41 f1       	breq	.+80     	; 0x6abc <udc_iface_enable+0x5e>
    6a6c:	c0 91 72 25 	lds	r28, 0x2572	; 0x802572 <udc_ptr_iface>
    6a70:	d0 91 73 25 	lds	r29, 0x2573	; 0x802573 <udc_ptr_iface+0x1>
    6a74:	65 e0       	ldi	r22, 0x05	; 5
    6a76:	ce 01       	movw	r24, r28
    6a78:	3b df       	rcall	.-394    	; 0x68f0 <udc_next_desc_in_iface>
    6a7a:	ec 01       	movw	r28, r24
    6a7c:	89 2b       	or	r24, r25
    6a7e:	49 f0       	breq	.+18     	; 0x6a92 <udc_iface_enable+0x34>
    6a80:	4c 81       	ldd	r20, Y+4	; 0x04
    6a82:	5d 81       	ldd	r21, Y+5	; 0x05
    6a84:	6b 81       	ldd	r22, Y+3	; 0x03
    6a86:	8a 81       	ldd	r24, Y+2	; 0x02
    6a88:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <udd_ep_alloc>
    6a8c:	81 11       	cpse	r24, r1
    6a8e:	f2 cf       	rjmp	.-28     	; 0x6a74 <udc_iface_enable+0x16>
    6a90:	15 c0       	rjmp	.+42     	; 0x6abc <udc_iface_enable+0x5e>
    6a92:	a0 91 74 25 	lds	r26, 0x2574	; 0x802574 <udc_ptr_conf>
    6a96:	b0 91 75 25 	lds	r27, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    6a9a:	e1 2f       	mov	r30, r17
    6a9c:	f0 e0       	ldi	r31, 0x00	; 0
    6a9e:	ee 0f       	add	r30, r30
    6aa0:	ff 1f       	adc	r31, r31
    6aa2:	12 96       	adiw	r26, 0x02	; 2
    6aa4:	8d 91       	ld	r24, X+
    6aa6:	9c 91       	ld	r25, X
    6aa8:	13 97       	sbiw	r26, 0x03	; 3
    6aaa:	e8 0f       	add	r30, r24
    6aac:	f9 1f       	adc	r31, r25
    6aae:	01 90       	ld	r0, Z+
    6ab0:	f0 81       	ld	r31, Z
    6ab2:	e0 2d       	mov	r30, r0
    6ab4:	01 90       	ld	r0, Z+
    6ab6:	f0 81       	ld	r31, Z
    6ab8:	e0 2d       	mov	r30, r0
    6aba:	19 95       	eicall
    6abc:	df 91       	pop	r29
    6abe:	cf 91       	pop	r28
    6ac0:	1f 91       	pop	r17
    6ac2:	08 95       	ret

00006ac4 <udc_start>:
    6ac4:	0c 94 08 25 	jmp	0x4a10	; 0x4a10 <udd_enable>
    6ac8:	08 95       	ret

00006aca <udc_reset>:
    6aca:	cf 93       	push	r28
    6acc:	80 91 76 25 	lds	r24, 0x2576	; 0x802576 <udc_num_configuration>
    6ad0:	88 23       	and	r24, r24
    6ad2:	c1 f0       	breq	.+48     	; 0x6b04 <udc_reset+0x3a>
    6ad4:	e0 91 74 25 	lds	r30, 0x2574	; 0x802574 <udc_ptr_conf>
    6ad8:	f0 91 75 25 	lds	r31, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    6adc:	01 90       	ld	r0, Z+
    6ade:	f0 81       	ld	r31, Z
    6ae0:	e0 2d       	mov	r30, r0
    6ae2:	84 81       	ldd	r24, Z+4	; 0x04
    6ae4:	88 23       	and	r24, r24
    6ae6:	71 f0       	breq	.+28     	; 0x6b04 <udc_reset+0x3a>
    6ae8:	c0 e0       	ldi	r28, 0x00	; 0
    6aea:	8c 2f       	mov	r24, r28
    6aec:	76 df       	rcall	.-276    	; 0x69da <udc_iface_disable>
    6aee:	cf 5f       	subi	r28, 0xFF	; 255
    6af0:	e0 91 74 25 	lds	r30, 0x2574	; 0x802574 <udc_ptr_conf>
    6af4:	f0 91 75 25 	lds	r31, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    6af8:	01 90       	ld	r0, Z+
    6afa:	f0 81       	ld	r31, Z
    6afc:	e0 2d       	mov	r30, r0
    6afe:	84 81       	ldd	r24, Z+4	; 0x04
    6b00:	c8 17       	cp	r28, r24
    6b02:	98 f3       	brcs	.-26     	; 0x6aea <udc_reset+0x20>
    6b04:	10 92 76 25 	sts	0x2576, r1	; 0x802576 <udc_num_configuration>
    6b08:	80 91 7a 25 	lds	r24, 0x257A	; 0x80257a <udc_device_status>
    6b0c:	81 fd       	sbrc	r24, 1
    6b0e:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <usb_callback_remotewakeup_disable>
    6b12:	10 92 7a 25 	sts	0x257A, r1	; 0x80257a <udc_device_status>
    6b16:	10 92 7b 25 	sts	0x257B, r1	; 0x80257b <udc_device_status+0x1>
    6b1a:	cf 91       	pop	r28
    6b1c:	08 95       	ret

00006b1e <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    6b1e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    6b20:	80 91 76 25 	lds	r24, 0x2576	; 0x802576 <udc_num_configuration>
    6b24:	88 23       	and	r24, r24
    6b26:	49 f1       	breq	.+82     	; 0x6b7a <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    6b28:	a0 91 74 25 	lds	r26, 0x2574	; 0x802574 <udc_ptr_conf>
    6b2c:	b0 91 75 25 	lds	r27, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    6b30:	ed 91       	ld	r30, X+
    6b32:	fc 91       	ld	r31, X
    6b34:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    6b36:	84 81       	ldd	r24, Z+4	; 0x04
    6b38:	88 23       	and	r24, r24
    6b3a:	f9 f0       	breq	.+62     	; 0x6b7a <udc_sof_notify+0x5c>
    6b3c:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    6b3e:	ec 2f       	mov	r30, r28
    6b40:	f0 e0       	ldi	r31, 0x00	; 0
    6b42:	ee 0f       	add	r30, r30
    6b44:	ff 1f       	adc	r31, r31
    6b46:	12 96       	adiw	r26, 0x02	; 2
    6b48:	8d 91       	ld	r24, X+
    6b4a:	9c 91       	ld	r25, X
    6b4c:	13 97       	sbiw	r26, 0x03	; 3
    6b4e:	e8 0f       	add	r30, r24
    6b50:	f9 1f       	adc	r31, r25
    6b52:	01 90       	ld	r0, Z+
    6b54:	f0 81       	ld	r31, Z
    6b56:	e0 2d       	mov	r30, r0
    6b58:	00 84       	ldd	r0, Z+8	; 0x08
    6b5a:	f1 85       	ldd	r31, Z+9	; 0x09
    6b5c:	e0 2d       	mov	r30, r0
    6b5e:	30 97       	sbiw	r30, 0x00	; 0
    6b60:	09 f0       	breq	.+2      	; 0x6b64 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    6b62:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    6b64:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    6b66:	a0 91 74 25 	lds	r26, 0x2574	; 0x802574 <udc_ptr_conf>
    6b6a:	b0 91 75 25 	lds	r27, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    6b6e:	ed 91       	ld	r30, X+
    6b70:	fc 91       	ld	r31, X
    6b72:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    6b74:	84 81       	ldd	r24, Z+4	; 0x04
    6b76:	c8 17       	cp	r28, r24
    6b78:	10 f3       	brcs	.-60     	; 0x6b3e <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    6b7a:	cf 91       	pop	r28
    6b7c:	08 95       	ret

00006b7e <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    6b7e:	0f 93       	push	r16
    6b80:	1f 93       	push	r17
    6b82:	cf 93       	push	r28
    6b84:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    6b86:	eb e8       	ldi	r30, 0x8B	; 139
    6b88:	f5 e2       	ldi	r31, 0x25	; 37
    6b8a:	12 86       	std	Z+10, r1	; 0x0a
    6b8c:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    6b8e:	14 86       	std	Z+12, r1	; 0x0c
    6b90:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    6b92:	16 86       	std	Z+14, r1	; 0x0e
    6b94:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    6b96:	80 81       	ld	r24, Z
    6b98:	88 23       	and	r24, r24
    6b9a:	0c f0       	brlt	.+2      	; 0x6b9e <udc_process_setup+0x20>
    6b9c:	95 c2       	rjmp	.+1322   	; 0x70c8 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    6b9e:	20 91 91 25 	lds	r18, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    6ba2:	30 91 92 25 	lds	r19, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    6ba6:	21 15       	cp	r18, r1
    6ba8:	31 05       	cpc	r19, r1
    6baa:	09 f0       	breq	.+2      	; 0x6bae <udc_process_setup+0x30>
    6bac:	88 c2       	rjmp	.+1296   	; 0x70be <udc_process_setup+0x540>
    6bae:	7f c2       	rjmp	.+1278   	; 0x70ae <udc_process_setup+0x530>
    6bb0:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    6bb2:	09 f0       	breq	.+2      	; 0x6bb6 <udc_process_setup+0x38>
    6bb4:	ab c0       	rjmp	.+342    	; 0x6d0c <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    6bb6:	90 91 8c 25 	lds	r25, 0x258C	; 0x80258c <udd_g_ctrlreq+0x1>
    6bba:	96 30       	cpi	r25, 0x06	; 6
    6bbc:	81 f0       	breq	.+32     	; 0x6bde <udc_process_setup+0x60>
    6bbe:	98 30       	cpi	r25, 0x08	; 8
    6bc0:	09 f4       	brne	.+2      	; 0x6bc4 <udc_process_setup+0x46>
    6bc2:	99 c0       	rjmp	.+306    	; 0x6cf6 <udc_process_setup+0x178>
    6bc4:	91 11       	cpse	r25, r1
    6bc6:	a2 c0       	rjmp	.+324    	; 0x6d0c <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    6bc8:	22 30       	cpi	r18, 0x02	; 2
    6bca:	31 05       	cpc	r19, r1
    6bcc:	09 f0       	breq	.+2      	; 0x6bd0 <udc_process_setup+0x52>
    6bce:	2b c2       	rjmp	.+1110   	; 0x7026 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    6bd0:	62 e0       	ldi	r22, 0x02	; 2
    6bd2:	70 e0       	ldi	r23, 0x00	; 0
    6bd4:	8a e7       	ldi	r24, 0x7A	; 122
    6bd6:	95 e2       	ldi	r25, 0x25	; 37
    6bd8:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <udd_set_setup_payload>
    6bdc:	7e c2       	rjmp	.+1276   	; 0x70da <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    6bde:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <udd_g_ctrlreq+0x2>
    6be2:	90 91 8e 25 	lds	r25, 0x258E	; 0x80258e <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    6be6:	29 2f       	mov	r18, r25
    6be8:	33 27       	eor	r19, r19
    6bea:	22 30       	cpi	r18, 0x02	; 2
    6bec:	31 05       	cpc	r19, r1
    6bee:	b1 f0       	breq	.+44     	; 0x6c1c <udc_process_setup+0x9e>
    6bf0:	20 f4       	brcc	.+8      	; 0x6bfa <udc_process_setup+0x7c>
    6bf2:	21 30       	cpi	r18, 0x01	; 1
    6bf4:	31 05       	cpc	r19, r1
    6bf6:	41 f0       	breq	.+16     	; 0x6c08 <udc_process_setup+0x8a>
    6bf8:	d8 c1       	rjmp	.+944    	; 0x6faa <udc_process_setup+0x42c>
    6bfa:	23 30       	cpi	r18, 0x03	; 3
    6bfc:	31 05       	cpc	r19, r1
    6bfe:	f1 f1       	breq	.+124    	; 0x6c7c <udc_process_setup+0xfe>
    6c00:	2f 30       	cpi	r18, 0x0F	; 15
    6c02:	31 05       	cpc	r19, r1
    6c04:	61 f1       	breq	.+88     	; 0x6c5e <udc_process_setup+0xe0>
    6c06:	d1 c1       	rjmp	.+930    	; 0x6faa <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    6c08:	80 91 45 20 	lds	r24, 0x2045	; 0x802045 <udc_config>
    6c0c:	90 91 46 20 	lds	r25, 0x2046	; 0x802046 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    6c10:	dc 01       	movw	r26, r24
    6c12:	6c 91       	ld	r22, X
    6c14:	70 e0       	ldi	r23, 0x00	; 0
    6c16:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <udd_set_setup_payload>
    6c1a:	5e c0       	rjmp	.+188    	; 0x6cd8 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    6c1c:	e0 91 45 20 	lds	r30, 0x2045	; 0x802045 <udc_config>
    6c20:	f0 91 46 20 	lds	r31, 0x2046	; 0x802046 <udc_config+0x1>
    6c24:	21 89       	ldd	r18, Z+17	; 0x11
    6c26:	82 17       	cp	r24, r18
    6c28:	08 f0       	brcs	.+2      	; 0x6c2c <udc_process_setup+0xae>
    6c2a:	fd c1       	rjmp	.+1018   	; 0x7026 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    6c2c:	99 27       	eor	r25, r25
    6c2e:	88 0f       	add	r24, r24
    6c30:	99 1f       	adc	r25, r25
    6c32:	88 0f       	add	r24, r24
    6c34:	99 1f       	adc	r25, r25
    6c36:	e0 91 47 20 	lds	r30, 0x2047	; 0x802047 <udc_config+0x2>
    6c3a:	f0 91 48 20 	lds	r31, 0x2048	; 0x802048 <udc_config+0x3>
    6c3e:	e8 0f       	add	r30, r24
    6c40:	f9 1f       	adc	r31, r25
    6c42:	80 81       	ld	r24, Z
    6c44:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    6c46:	fc 01       	movw	r30, r24
    6c48:	62 81       	ldd	r22, Z+2	; 0x02
    6c4a:	73 81       	ldd	r23, Z+3	; 0x03
    6c4c:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    6c50:	e0 91 93 25 	lds	r30, 0x2593	; 0x802593 <udd_g_ctrlreq+0x8>
    6c54:	f0 91 94 25 	lds	r31, 0x2594	; 0x802594 <udd_g_ctrlreq+0x9>
    6c58:	82 e0       	ldi	r24, 0x02	; 2
    6c5a:	81 83       	std	Z+1, r24	; 0x01
    6c5c:	3d c0       	rjmp	.+122    	; 0x6cd8 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    6c5e:	80 91 49 20 	lds	r24, 0x2049	; 0x802049 <udc_config+0x4>
    6c62:	90 91 4a 20 	lds	r25, 0x204A	; 0x80204a <udc_config+0x5>
    6c66:	00 97       	sbiw	r24, 0x00	; 0
    6c68:	09 f4       	brne	.+2      	; 0x6c6c <udc_process_setup+0xee>
    6c6a:	dd c1       	rjmp	.+954    	; 0x7026 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    6c6c:	dc 01       	movw	r26, r24
    6c6e:	12 96       	adiw	r26, 0x02	; 2
    6c70:	6d 91       	ld	r22, X+
    6c72:	7c 91       	ld	r23, X
    6c74:	13 97       	sbiw	r26, 0x03	; 3
    6c76:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <udd_set_setup_payload>
    6c7a:	2e c0       	rjmp	.+92     	; 0x6cd8 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    6c7c:	99 27       	eor	r25, r25
    6c7e:	81 30       	cpi	r24, 0x01	; 1
    6c80:	91 05       	cpc	r25, r1
    6c82:	99 f0       	breq	.+38     	; 0x6caa <udc_process_setup+0x12c>
    6c84:	58 f0       	brcs	.+22     	; 0x6c9c <udc_process_setup+0x11e>
    6c86:	82 30       	cpi	r24, 0x02	; 2
    6c88:	91 05       	cpc	r25, r1
    6c8a:	09 f4       	brne	.+2      	; 0x6c8e <udc_process_setup+0x110>
    6c8c:	22 c2       	rjmp	.+1092   	; 0x70d2 <udc_process_setup+0x554>
    6c8e:	03 97       	sbiw	r24, 0x03	; 3
    6c90:	09 f0       	breq	.+2      	; 0x6c94 <udc_process_setup+0x116>
    6c92:	94 c1       	rjmp	.+808    	; 0x6fbc <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    6c94:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    6c96:	ee e4       	ldi	r30, 0x4E	; 78
    6c98:	f1 e2       	ldi	r31, 0x21	; 33
    6c9a:	0a c0       	rjmp	.+20     	; 0x6cb0 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    6c9c:	64 e0       	ldi	r22, 0x04	; 4
    6c9e:	70 e0       	ldi	r23, 0x00	; 0
    6ca0:	8a ee       	ldi	r24, 0xEA	; 234
    6ca2:	90 e2       	ldi	r25, 0x20	; 32
    6ca4:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <udd_set_setup_payload>
    6ca8:	17 c0       	rjmp	.+46     	; 0x6cd8 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    6caa:	e9 ed       	ldi	r30, 0xD9	; 217
    6cac:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    6cae:	30 e1       	ldi	r19, 0x10	; 16
    6cb0:	ac ea       	ldi	r26, 0xAC	; 172
    6cb2:	b0 e2       	ldi	r27, 0x20	; 32
    6cb4:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    6cb6:	81 91       	ld	r24, Z+
    6cb8:	90 e0       	ldi	r25, 0x00	; 0
    6cba:	8d 93       	st	X+, r24
    6cbc:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    6cbe:	2f 5f       	subi	r18, 0xFF	; 255
    6cc0:	23 17       	cp	r18, r19
    6cc2:	c8 f3       	brcs	.-14     	; 0x6cb6 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    6cc4:	63 2f       	mov	r22, r19
    6cc6:	66 0f       	add	r22, r22
    6cc8:	6e 5f       	subi	r22, 0xFE	; 254
    6cca:	60 93 aa 20 	sts	0x20AA, r22	; 0x8020aa <udc_string_desc>
		udd_set_setup_payload(
    6cce:	70 e0       	ldi	r23, 0x00	; 0
    6cd0:	8a ea       	ldi	r24, 0xAA	; 170
    6cd2:	90 e2       	ldi	r25, 0x20	; 32
    6cd4:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    6cd8:	eb e8       	ldi	r30, 0x8B	; 139
    6cda:	f5 e2       	ldi	r31, 0x25	; 37
    6cdc:	86 81       	ldd	r24, Z+6	; 0x06
    6cde:	97 81       	ldd	r25, Z+7	; 0x07
    6ce0:	22 85       	ldd	r18, Z+10	; 0x0a
    6ce2:	33 85       	ldd	r19, Z+11	; 0x0b
    6ce4:	82 17       	cp	r24, r18
    6ce6:	93 07       	cpc	r25, r19
    6ce8:	08 f0       	brcs	.+2      	; 0x6cec <udc_process_setup+0x16e>
    6cea:	f7 c1       	rjmp	.+1006   	; 0x70da <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    6cec:	80 93 95 25 	sts	0x2595, r24	; 0x802595 <udd_g_ctrlreq+0xa>
    6cf0:	90 93 96 25 	sts	0x2596, r25	; 0x802596 <udd_g_ctrlreq+0xb>
    6cf4:	f2 c1       	rjmp	.+996    	; 0x70da <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    6cf6:	21 30       	cpi	r18, 0x01	; 1
    6cf8:	31 05       	cpc	r19, r1
    6cfa:	09 f0       	breq	.+2      	; 0x6cfe <udc_process_setup+0x180>
    6cfc:	94 c1       	rjmp	.+808    	; 0x7026 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    6cfe:	61 e0       	ldi	r22, 0x01	; 1
    6d00:	70 e0       	ldi	r23, 0x00	; 0
    6d02:	86 e7       	ldi	r24, 0x76	; 118
    6d04:	95 e2       	ldi	r25, 0x25	; 37
    6d06:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <udd_set_setup_payload>
    6d0a:	e7 c1       	rjmp	.+974    	; 0x70da <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    6d0c:	81 30       	cpi	r24, 0x01	; 1
    6d0e:	e9 f5       	brne	.+122    	; 0x6d8a <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    6d10:	90 91 8c 25 	lds	r25, 0x258C	; 0x80258c <udd_g_ctrlreq+0x1>
    6d14:	9a 30       	cpi	r25, 0x0A	; 10
    6d16:	c9 f5       	brne	.+114    	; 0x6d8a <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    6d18:	21 30       	cpi	r18, 0x01	; 1
    6d1a:	31 05       	cpc	r19, r1
    6d1c:	09 f0       	breq	.+2      	; 0x6d20 <udc_process_setup+0x1a2>
    6d1e:	53 c1       	rjmp	.+678    	; 0x6fc6 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    6d20:	80 91 76 25 	lds	r24, 0x2576	; 0x802576 <udc_num_configuration>
    6d24:	88 23       	and	r24, r24
    6d26:	09 f4       	brne	.+2      	; 0x6d2a <udc_process_setup+0x1ac>
    6d28:	4e c1       	rjmp	.+668    	; 0x6fc6 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    6d2a:	c0 91 8f 25 	lds	r28, 0x258F	; 0x80258f <udd_g_ctrlreq+0x4>
    6d2e:	d0 91 90 25 	lds	r29, 0x2590	; 0x802590 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    6d32:	00 91 74 25 	lds	r16, 0x2574	; 0x802574 <udc_ptr_conf>
    6d36:	10 91 75 25 	lds	r17, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    6d3a:	d8 01       	movw	r26, r16
    6d3c:	ed 91       	ld	r30, X+
    6d3e:	fc 91       	ld	r31, X
    6d40:	84 81       	ldd	r24, Z+4	; 0x04
    6d42:	c8 17       	cp	r28, r24
    6d44:	08 f0       	brcs	.+2      	; 0x6d48 <udc_process_setup+0x1ca>
    6d46:	3f c1       	rjmp	.+638    	; 0x6fc6 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    6d48:	60 e0       	ldi	r22, 0x00	; 0
    6d4a:	8c 2f       	mov	r24, r28
    6d4c:	0c de       	rcall	.-1000   	; 0x6966 <udc_update_iface_desc>
    6d4e:	88 23       	and	r24, r24
    6d50:	09 f4       	brne	.+2      	; 0x6d54 <udc_process_setup+0x1d6>
    6d52:	34 c1       	rjmp	.+616    	; 0x6fbc <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    6d54:	ce 01       	movw	r24, r28
    6d56:	99 27       	eor	r25, r25
    6d58:	88 0f       	add	r24, r24
    6d5a:	99 1f       	adc	r25, r25
    6d5c:	d8 01       	movw	r26, r16
    6d5e:	12 96       	adiw	r26, 0x02	; 2
    6d60:	ed 91       	ld	r30, X+
    6d62:	fc 91       	ld	r31, X
    6d64:	13 97       	sbiw	r26, 0x03	; 3
    6d66:	e8 0f       	add	r30, r24
    6d68:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    6d6a:	01 90       	ld	r0, Z+
    6d6c:	f0 81       	ld	r31, Z
    6d6e:	e0 2d       	mov	r30, r0
    6d70:	86 81       	ldd	r24, Z+6	; 0x06
    6d72:	97 81       	ldd	r25, Z+7	; 0x07
    6d74:	fc 01       	movw	r30, r24
    6d76:	19 95       	eicall
    6d78:	80 93 78 25 	sts	0x2578, r24	; 0x802578 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    6d7c:	61 e0       	ldi	r22, 0x01	; 1
    6d7e:	70 e0       	ldi	r23, 0x00	; 0
    6d80:	88 e7       	ldi	r24, 0x78	; 120
    6d82:	95 e2       	ldi	r25, 0x25	; 37
    6d84:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <udd_set_setup_payload>
    6d88:	a8 c1       	rjmp	.+848    	; 0x70da <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    6d8a:	82 30       	cpi	r24, 0x02	; 2
    6d8c:	09 f0       	breq	.+2      	; 0x6d90 <udc_process_setup+0x212>
    6d8e:	16 c1       	rjmp	.+556    	; 0x6fbc <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    6d90:	80 91 8c 25 	lds	r24, 0x258C	; 0x80258c <udd_g_ctrlreq+0x1>
    6d94:	81 11       	cpse	r24, r1
    6d96:	0b c1       	rjmp	.+534    	; 0x6fae <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    6d98:	22 30       	cpi	r18, 0x02	; 2
    6d9a:	31 05       	cpc	r19, r1
    6d9c:	09 f0       	breq	.+2      	; 0x6da0 <udc_process_setup+0x222>
    6d9e:	43 c1       	rjmp	.+646    	; 0x7026 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    6da0:	80 91 8f 25 	lds	r24, 0x258F	; 0x80258f <udd_g_ctrlreq+0x4>
    6da4:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <udd_ep_is_halted>
    6da8:	90 e0       	ldi	r25, 0x00	; 0
    6daa:	80 93 70 25 	sts	0x2570, r24	; 0x802570 <udc_ep_status.4757>
    6dae:	90 93 71 25 	sts	0x2571, r25	; 0x802571 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    6db2:	62 e0       	ldi	r22, 0x02	; 2
    6db4:	70 e0       	ldi	r23, 0x00	; 0
    6db6:	80 e7       	ldi	r24, 0x70	; 112
    6db8:	95 e2       	ldi	r25, 0x25	; 37
    6dba:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <udd_set_setup_payload>
    6dbe:	8d c1       	rjmp	.+794    	; 0x70da <udc_process_setup+0x55c>
    6dc0:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    6dc2:	09 f0       	breq	.+2      	; 0x6dc6 <udc_process_setup+0x248>
    6dc4:	a0 c0       	rjmp	.+320    	; 0x6f06 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    6dc6:	90 91 8c 25 	lds	r25, 0x258C	; 0x80258c <udd_g_ctrlreq+0x1>
    6dca:	93 30       	cpi	r25, 0x03	; 3
    6dcc:	91 f1       	breq	.+100    	; 0x6e32 <udc_process_setup+0x2b4>
    6dce:	18 f4       	brcc	.+6      	; 0x6dd6 <udc_process_setup+0x258>
    6dd0:	91 30       	cpi	r25, 0x01	; 1
    6dd2:	a9 f0       	breq	.+42     	; 0x6dfe <udc_process_setup+0x280>
    6dd4:	98 c0       	rjmp	.+304    	; 0x6f06 <udc_process_setup+0x388>
    6dd6:	95 30       	cpi	r25, 0x05	; 5
    6dd8:	21 f0       	breq	.+8      	; 0x6de2 <udc_process_setup+0x264>
    6dda:	99 30       	cpi	r25, 0x09	; 9
    6ddc:	09 f4       	brne	.+2      	; 0x6de0 <udc_process_setup+0x262>
    6dde:	43 c0       	rjmp	.+134    	; 0x6e66 <udc_process_setup+0x2e8>
    6de0:	92 c0       	rjmp	.+292    	; 0x6f06 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    6de2:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    6de6:	90 91 92 25 	lds	r25, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    6dea:	89 2b       	or	r24, r25
    6dec:	09 f0       	breq	.+2      	; 0x6df0 <udc_process_setup+0x272>
    6dee:	1b c1       	rjmp	.+566    	; 0x7026 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    6df0:	8d ea       	ldi	r24, 0xAD	; 173
    6df2:	94 e3       	ldi	r25, 0x34	; 52
    6df4:	80 93 97 25 	sts	0x2597, r24	; 0x802597 <udd_g_ctrlreq+0xc>
    6df8:	90 93 98 25 	sts	0x2598, r25	; 0x802598 <udd_g_ctrlreq+0xd>
    6dfc:	6e c1       	rjmp	.+732    	; 0x70da <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    6dfe:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    6e02:	90 91 92 25 	lds	r25, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    6e06:	89 2b       	or	r24, r25
    6e08:	09 f0       	breq	.+2      	; 0x6e0c <udc_process_setup+0x28e>
    6e0a:	0d c1       	rjmp	.+538    	; 0x7026 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    6e0c:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <udd_g_ctrlreq+0x2>
    6e10:	90 91 8e 25 	lds	r25, 0x258E	; 0x80258e <udd_g_ctrlreq+0x3>
    6e14:	01 97       	sbiw	r24, 0x01	; 1
    6e16:	09 f0       	breq	.+2      	; 0x6e1a <udc_process_setup+0x29c>
    6e18:	06 c1       	rjmp	.+524    	; 0x7026 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    6e1a:	80 91 7a 25 	lds	r24, 0x257A	; 0x80257a <udc_device_status>
    6e1e:	90 91 7b 25 	lds	r25, 0x257B	; 0x80257b <udc_device_status+0x1>
    6e22:	8d 7f       	andi	r24, 0xFD	; 253
    6e24:	80 93 7a 25 	sts	0x257A, r24	; 0x80257a <udc_device_status>
    6e28:	90 93 7b 25 	sts	0x257B, r25	; 0x80257b <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    6e2c:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <usb_callback_remotewakeup_disable>
    6e30:	54 c1       	rjmp	.+680    	; 0x70da <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    6e32:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    6e36:	90 91 92 25 	lds	r25, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    6e3a:	89 2b       	or	r24, r25
    6e3c:	09 f0       	breq	.+2      	; 0x6e40 <udc_process_setup+0x2c2>
    6e3e:	f3 c0       	rjmp	.+486    	; 0x7026 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    6e40:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <udd_g_ctrlreq+0x2>
    6e44:	90 91 8e 25 	lds	r25, 0x258E	; 0x80258e <udd_g_ctrlreq+0x3>
    6e48:	01 97       	sbiw	r24, 0x01	; 1
    6e4a:	09 f0       	breq	.+2      	; 0x6e4e <udc_process_setup+0x2d0>
    6e4c:	b2 c0       	rjmp	.+356    	; 0x6fb2 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    6e4e:	80 91 7a 25 	lds	r24, 0x257A	; 0x80257a <udc_device_status>
    6e52:	90 91 7b 25 	lds	r25, 0x257B	; 0x80257b <udc_device_status+0x1>
    6e56:	82 60       	ori	r24, 0x02	; 2
    6e58:	80 93 7a 25 	sts	0x257A, r24	; 0x80257a <udc_device_status>
    6e5c:	90 93 7b 25 	sts	0x257B, r25	; 0x80257b <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    6e60:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <usb_callback_remotewakeup_enable>
    6e64:	3a c1       	rjmp	.+628    	; 0x70da <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    6e66:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    6e6a:	90 91 92 25 	lds	r25, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    6e6e:	89 2b       	or	r24, r25
    6e70:	09 f0       	breq	.+2      	; 0x6e74 <udc_process_setup+0x2f6>
    6e72:	d9 c0       	rjmp	.+434    	; 0x7026 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    6e74:	0e 94 92 25 	call	0x4b24	; 0x4b24 <udd_getaddress>
    6e78:	88 23       	and	r24, r24
    6e7a:	09 f4       	brne	.+2      	; 0x6e7e <udc_process_setup+0x300>
    6e7c:	9f c0       	rjmp	.+318    	; 0x6fbc <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    6e7e:	20 91 8d 25 	lds	r18, 0x258D	; 0x80258d <udd_g_ctrlreq+0x2>
    6e82:	30 91 8e 25 	lds	r19, 0x258E	; 0x80258e <udd_g_ctrlreq+0x3>
    6e86:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    6e88:	e0 91 45 20 	lds	r30, 0x2045	; 0x802045 <udc_config>
    6e8c:	f0 91 46 20 	lds	r31, 0x2046	; 0x802046 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    6e90:	81 89       	ldd	r24, Z+17	; 0x11
    6e92:	90 e0       	ldi	r25, 0x00	; 0
    6e94:	82 17       	cp	r24, r18
    6e96:	93 07       	cpc	r25, r19
    6e98:	08 f4       	brcc	.+2      	; 0x6e9c <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    6e9a:	90 c0       	rjmp	.+288    	; 0x6fbc <udc_process_setup+0x43e>
    6e9c:	16 de       	rcall	.-980    	; 0x6aca <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    6e9e:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <udd_g_ctrlreq+0x2>
    6ea2:	90 91 8e 25 	lds	r25, 0x258E	; 0x80258e <udd_g_ctrlreq+0x3>
    6ea6:	80 93 76 25 	sts	0x2576, r24	; 0x802576 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    6eaa:	88 23       	and	r24, r24
    6eac:	09 f4       	brne	.+2      	; 0x6eb0 <udc_process_setup+0x332>
    6eae:	15 c1       	rjmp	.+554    	; 0x70da <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    6eb0:	99 27       	eor	r25, r25
    6eb2:	81 50       	subi	r24, 0x01	; 1
    6eb4:	90 4c       	sbci	r25, 0xC0	; 192
    6eb6:	88 0f       	add	r24, r24
    6eb8:	99 1f       	adc	r25, r25
    6eba:	88 0f       	add	r24, r24
    6ebc:	99 1f       	adc	r25, r25
    6ebe:	e0 91 47 20 	lds	r30, 0x2047	; 0x802047 <udc_config+0x2>
    6ec2:	f0 91 48 20 	lds	r31, 0x2048	; 0x802048 <udc_config+0x3>
    6ec6:	e8 0f       	add	r30, r24
    6ec8:	f9 1f       	adc	r31, r25
    6eca:	e0 93 74 25 	sts	0x2574, r30	; 0x802574 <udc_ptr_conf>
    6ece:	f0 93 75 25 	sts	0x2575, r31	; 0x802575 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    6ed2:	01 90       	ld	r0, Z+
    6ed4:	f0 81       	ld	r31, Z
    6ed6:	e0 2d       	mov	r30, r0
    6ed8:	84 81       	ldd	r24, Z+4	; 0x04
    6eda:	88 23       	and	r24, r24
    6edc:	09 f4       	brne	.+2      	; 0x6ee0 <udc_process_setup+0x362>
    6ede:	fd c0       	rjmp	.+506    	; 0x70da <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    6ee0:	c0 e0       	ldi	r28, 0x00	; 0
    6ee2:	60 e0       	ldi	r22, 0x00	; 0
    6ee4:	8c 2f       	mov	r24, r28
    6ee6:	bb dd       	rcall	.-1162   	; 0x6a5e <udc_iface_enable>
    6ee8:	88 23       	and	r24, r24
    6eea:	09 f4       	brne	.+2      	; 0x6eee <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    6eec:	67 c0       	rjmp	.+206    	; 0x6fbc <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    6eee:	cf 5f       	subi	r28, 0xFF	; 255
    6ef0:	e0 91 74 25 	lds	r30, 0x2574	; 0x802574 <udc_ptr_conf>
    6ef4:	f0 91 75 25 	lds	r31, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    6ef8:	01 90       	ld	r0, Z+
    6efa:	f0 81       	ld	r31, Z
    6efc:	e0 2d       	mov	r30, r0
    6efe:	84 81       	ldd	r24, Z+4	; 0x04
    6f00:	c8 17       	cp	r28, r24
    6f02:	78 f3       	brcs	.-34     	; 0x6ee2 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    6f04:	ea c0       	rjmp	.+468    	; 0x70da <udc_process_setup+0x55c>
    6f06:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    6f08:	e9 f4       	brne	.+58     	; 0x6f44 <udc_process_setup+0x3c6>
    6f0a:	90 91 8c 25 	lds	r25, 0x258C	; 0x80258c <udd_g_ctrlreq+0x1>
    6f0e:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    6f10:	c9 f4       	brne	.+50     	; 0x6f44 <udc_process_setup+0x3c6>
    6f12:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    6f16:	90 91 92 25 	lds	r25, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    6f1a:	89 2b       	or	r24, r25
    6f1c:	09 f0       	breq	.+2      	; 0x6f20 <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    6f1e:	53 c0       	rjmp	.+166    	; 0x6fc6 <udc_process_setup+0x448>
    6f20:	80 91 76 25 	lds	r24, 0x2576	; 0x802576 <udc_num_configuration>
    6f24:	88 23       	and	r24, r24
    6f26:	09 f4       	brne	.+2      	; 0x6f2a <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    6f28:	4e c0       	rjmp	.+156    	; 0x6fc6 <udc_process_setup+0x448>
    6f2a:	eb e8       	ldi	r30, 0x8B	; 139
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    6f2c:	f5 e2       	ldi	r31, 0x25	; 37

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    6f2e:	c4 81       	ldd	r28, Z+4	; 0x04
    6f30:	d2 81       	ldd	r29, Z+2	; 0x02
    6f32:	8c 2f       	mov	r24, r28
    6f34:	52 dd       	rcall	.-1372   	; 0x69da <udc_iface_disable>
    6f36:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    6f38:	09 f4       	brne	.+2      	; 0x6f3c <udc_process_setup+0x3be>
    6f3a:	40 c0       	rjmp	.+128    	; 0x6fbc <udc_process_setup+0x43e>
    6f3c:	6d 2f       	mov	r22, r29
    6f3e:	8c 2f       	mov	r24, r28
    6f40:	8e dd       	rcall	.-1252   	; 0x6a5e <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    6f42:	3a c0       	rjmp	.+116    	; 0x6fb8 <udc_process_setup+0x43a>
    6f44:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    6f46:	d1 f5       	brne	.+116    	; 0x6fbc <udc_process_setup+0x43e>
    6f48:	80 91 8c 25 	lds	r24, 0x258C	; 0x80258c <udd_g_ctrlreq+0x1>
    6f4c:	81 30       	cpi	r24, 0x01	; 1
    6f4e:	19 f0       	breq	.+6      	; 0x6f56 <udc_process_setup+0x3d8>
    6f50:	83 30       	cpi	r24, 0x03	; 3
    6f52:	a1 f0       	breq	.+40     	; 0x6f7c <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    6f54:	30 c0       	rjmp	.+96     	; 0x6fb6 <udc_process_setup+0x438>
    6f56:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    6f5a:	90 91 92 25 	lds	r25, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    6f5e:	89 2b       	or	r24, r25
    6f60:	09 f0       	breq	.+2      	; 0x6f64 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    6f62:	61 c0       	rjmp	.+194    	; 0x7026 <udc_process_setup+0x4a8>
    6f64:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <udd_g_ctrlreq+0x2>
    6f68:	90 91 8e 25 	lds	r25, 0x258E	; 0x80258e <udd_g_ctrlreq+0x3>
    6f6c:	89 2b       	or	r24, r25
    6f6e:	09 f0       	breq	.+2      	; 0x6f72 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    6f70:	5a c0       	rjmp	.+180    	; 0x7026 <udc_process_setup+0x4a8>
    6f72:	80 91 8f 25 	lds	r24, 0x258F	; 0x80258f <udd_g_ctrlreq+0x4>
    6f76:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    6f7a:	1e c0       	rjmp	.+60     	; 0x6fb8 <udc_process_setup+0x43a>
    6f7c:	80 91 91 25 	lds	r24, 0x2591	; 0x802591 <udd_g_ctrlreq+0x6>
    6f80:	90 91 92 25 	lds	r25, 0x2592	; 0x802592 <udd_g_ctrlreq+0x7>
    6f84:	89 2b       	or	r24, r25
    6f86:	09 f0       	breq	.+2      	; 0x6f8a <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    6f88:	4e c0       	rjmp	.+156    	; 0x7026 <udc_process_setup+0x4a8>
    6f8a:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <udd_g_ctrlreq+0x2>
    6f8e:	90 91 8e 25 	lds	r25, 0x258E	; 0x80258e <udd_g_ctrlreq+0x3>
    6f92:	89 2b       	or	r24, r25
    6f94:	09 f0       	breq	.+2      	; 0x6f98 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    6f96:	47 c0       	rjmp	.+142    	; 0x7026 <udc_process_setup+0x4a8>
    6f98:	cb e8       	ldi	r28, 0x8B	; 139
    6f9a:	d5 e2       	ldi	r29, 0x25	; 37
    6f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    6f9e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    6fa2:	8c 81       	ldd	r24, Y+4	; 0x04
    6fa4:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    6fa8:	07 c0       	rjmp	.+14     	; 0x6fb8 <udc_process_setup+0x43a>
    6faa:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    6fac:	05 c0       	rjmp	.+10     	; 0x6fb8 <udc_process_setup+0x43a>
    6fae:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    6fb0:	03 c0       	rjmp	.+6      	; 0x6fb8 <udc_process_setup+0x43a>
    6fb2:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    6fb4:	01 c0       	rjmp	.+2      	; 0x6fb8 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    6fb6:	80 e0       	ldi	r24, 0x00	; 0
    6fb8:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    6fba:	90 c0       	rjmp	.+288    	; 0x70dc <udc_process_setup+0x55e>
    6fbc:	80 91 8b 25 	lds	r24, 0x258B	; 0x80258b <udd_g_ctrlreq>
    6fc0:	8f 71       	andi	r24, 0x1F	; 31
    6fc2:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    6fc4:	81 f5       	brne	.+96     	; 0x7026 <udc_process_setup+0x4a8>
    6fc6:	80 91 76 25 	lds	r24, 0x2576	; 0x802576 <udc_num_configuration>
    6fca:	88 23       	and	r24, r24
    6fcc:	09 f4       	brne	.+2      	; 0x6fd0 <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    6fce:	71 c0       	rjmp	.+226    	; 0x70b2 <udc_process_setup+0x534>
    6fd0:	00 91 8f 25 	lds	r16, 0x258F	; 0x80258f <udd_g_ctrlreq+0x4>
    6fd4:	10 91 90 25 	lds	r17, 0x2590	; 0x802590 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    6fd8:	c0 91 74 25 	lds	r28, 0x2574	; 0x802574 <udc_ptr_conf>
    6fdc:	d0 91 75 25 	lds	r29, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    6fe0:	e8 81       	ld	r30, Y
    6fe2:	f9 81       	ldd	r31, Y+1	; 0x01
    6fe4:	84 81       	ldd	r24, Z+4	; 0x04
    6fe6:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    6fe8:	08 f0       	brcs	.+2      	; 0x6fec <udc_process_setup+0x46e>
    6fea:	65 c0       	rjmp	.+202    	; 0x70b6 <udc_process_setup+0x538>
    6fec:	60 e0       	ldi	r22, 0x00	; 0
    6fee:	80 2f       	mov	r24, r16
    6ff0:	ba dc       	rcall	.-1676   	; 0x6966 <udc_update_iface_desc>
    6ff2:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    6ff4:	c1 f0       	breq	.+48     	; 0x7026 <udc_process_setup+0x4a8>
    6ff6:	f8 01       	movw	r30, r16
    6ff8:	ff 27       	eor	r31, r31
    6ffa:	cf 01       	movw	r24, r30
    6ffc:	88 0f       	add	r24, r24
    6ffe:	99 1f       	adc	r25, r25
    7000:	ea 81       	ldd	r30, Y+2	; 0x02
    7002:	fb 81       	ldd	r31, Y+3	; 0x03
    7004:	e8 0f       	add	r30, r24
    7006:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    7008:	c0 81       	ld	r28, Z
    700a:	d1 81       	ldd	r29, Z+1	; 0x01
    700c:	ee 81       	ldd	r30, Y+6	; 0x06
    700e:	ff 81       	ldd	r31, Y+7	; 0x07
    7010:	19 95       	eicall
    7012:	68 2f       	mov	r22, r24
    7014:	80 2f       	mov	r24, r16
    7016:	a7 dc       	rcall	.-1714   	; 0x6966 <udc_update_iface_desc>
    7018:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    701a:	29 f0       	breq	.+10     	; 0x7026 <udc_process_setup+0x4a8>
    701c:	ec 81       	ldd	r30, Y+4	; 0x04
    701e:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    7020:	19 95       	eicall
    7022:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    7024:	5b c0       	rjmp	.+182    	; 0x70dc <udc_process_setup+0x55e>
    7026:	80 91 8b 25 	lds	r24, 0x258B	; 0x80258b <udd_g_ctrlreq>
    702a:	8f 71       	andi	r24, 0x1F	; 31
    702c:	82 30       	cpi	r24, 0x02	; 2
    702e:	09 f0       	breq	.+2      	; 0x7032 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    7030:	44 c0       	rjmp	.+136    	; 0x70ba <udc_process_setup+0x53c>
    7032:	80 91 76 25 	lds	r24, 0x2576	; 0x802576 <udc_num_configuration>
    7036:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7038:	b1 f1       	breq	.+108    	; 0x70a6 <udc_process_setup+0x528>
    703a:	a0 91 74 25 	lds	r26, 0x2574	; 0x802574 <udc_ptr_conf>
    703e:	b0 91 75 25 	lds	r27, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    7042:	ed 91       	ld	r30, X+
    7044:	fc 91       	ld	r31, X
    7046:	11 97       	sbiw	r26, 0x01	; 1
    7048:	84 81       	ldd	r24, Z+4	; 0x04
    704a:	88 23       	and	r24, r24
    704c:	71 f1       	breq	.+92     	; 0x70aa <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    704e:	c0 e0       	ldi	r28, 0x00	; 0
    7050:	ec 2f       	mov	r30, r28
    7052:	f0 e0       	ldi	r31, 0x00	; 0
    7054:	ee 0f       	add	r30, r30
    7056:	ff 1f       	adc	r31, r31
    7058:	12 96       	adiw	r26, 0x02	; 2
    705a:	8d 91       	ld	r24, X+
    705c:	9c 91       	ld	r25, X
    705e:	13 97       	sbiw	r26, 0x03	; 3
    7060:	e8 0f       	add	r30, r24
    7062:	f9 1f       	adc	r31, r25
    7064:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    7066:	11 81       	ldd	r17, Z+1	; 0x01
    7068:	d8 01       	movw	r26, r16
    706a:	16 96       	adiw	r26, 0x06	; 6
    706c:	ed 91       	ld	r30, X+
    706e:	fc 91       	ld	r31, X
    7070:	17 97       	sbiw	r26, 0x07	; 7
    7072:	19 95       	eicall
    7074:	68 2f       	mov	r22, r24
    7076:	8c 2f       	mov	r24, r28
    7078:	76 dc       	rcall	.-1812   	; 0x6966 <udc_update_iface_desc>
    707a:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    707c:	79 f1       	breq	.+94     	; 0x70dc <udc_process_setup+0x55e>
    707e:	d8 01       	movw	r26, r16
    7080:	14 96       	adiw	r26, 0x04	; 4
    7082:	ed 91       	ld	r30, X+
    7084:	fc 91       	ld	r31, X
    7086:	15 97       	sbiw	r26, 0x05	; 5
    7088:	19 95       	eicall
    708a:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    708c:	27 c0       	rjmp	.+78     	; 0x70dc <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    708e:	cf 5f       	subi	r28, 0xFF	; 255
    7090:	a0 91 74 25 	lds	r26, 0x2574	; 0x802574 <udc_ptr_conf>
    7094:	b0 91 75 25 	lds	r27, 0x2575	; 0x802575 <udc_ptr_conf+0x1>
    7098:	ed 91       	ld	r30, X+
    709a:	fc 91       	ld	r31, X
    709c:	11 97       	sbiw	r26, 0x01	; 1
    709e:	94 81       	ldd	r25, Z+4	; 0x04
    70a0:	c9 17       	cp	r28, r25
    70a2:	b0 f2       	brcs	.-84     	; 0x7050 <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    70a4:	1b c0       	rjmp	.+54     	; 0x70dc <udc_process_setup+0x55e>
    70a6:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    70a8:	19 c0       	rjmp	.+50     	; 0x70dc <udc_process_setup+0x55e>
    70aa:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    70ac:	17 c0       	rjmp	.+46     	; 0x70dc <udc_process_setup+0x55e>
    70ae:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    70b0:	15 c0       	rjmp	.+42     	; 0x70dc <udc_process_setup+0x55e>
    70b2:	80 e0       	ldi	r24, 0x00	; 0
    70b4:	13 c0       	rjmp	.+38     	; 0x70dc <udc_process_setup+0x55e>
    70b6:	80 e0       	ldi	r24, 0x00	; 0
    70b8:	11 c0       	rjmp	.+34     	; 0x70dc <udc_process_setup+0x55e>
    70ba:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    70bc:	0f c0       	rjmp	.+30     	; 0x70dc <udc_process_setup+0x55e>
    70be:	98 2f       	mov	r25, r24
    70c0:	90 76       	andi	r25, 0x60	; 96
    70c2:	09 f0       	breq	.+2      	; 0x70c6 <udc_process_setup+0x548>
    70c4:	7b cf       	rjmp	.-266    	; 0x6fbc <udc_process_setup+0x43e>
    70c6:	74 cd       	rjmp	.-1304   	; 0x6bb0 <udc_process_setup+0x32>
    70c8:	98 2f       	mov	r25, r24
    70ca:	90 76       	andi	r25, 0x60	; 96
    70cc:	09 f0       	breq	.+2      	; 0x70d0 <udc_process_setup+0x552>
    70ce:	76 cf       	rjmp	.-276    	; 0x6fbc <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    70d0:	77 ce       	rjmp	.-786    	; 0x6dc0 <udc_process_setup+0x242>
		str = udc_string_product_name;
    70d2:	3c e0       	ldi	r19, 0x0C	; 12
    70d4:	ec ec       	ldi	r30, 0xCC	; 204
    70d6:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    70d8:	eb cd       	rjmp	.-1066   	; 0x6cb0 <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    70da:	81 e0       	ldi	r24, 0x01	; 1
    70dc:	df 91       	pop	r29
    70de:	cf 91       	pop	r28
    70e0:	1f 91       	pop	r17
    70e2:	0f 91       	pop	r16
    70e4:	08 95       	ret

000070e6 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    70e6:	cf 93       	push	r28
    70e8:	df 93       	push	r29
    70ea:	1f 92       	push	r1
    70ec:	cd b7       	in	r28, 0x3d	; 61
    70ee:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    70f0:	80 91 a5 25 	lds	r24, 0x25A5	; 0x8025a5 <stdio_base>
    70f4:	90 91 a6 25 	lds	r25, 0x25A6	; 0x8025a6 <stdio_base+0x1>
    70f8:	e0 91 a1 25 	lds	r30, 0x25A1	; 0x8025a1 <ptr_get>
    70fc:	f0 91 a2 25 	lds	r31, 0x25A2	; 0x8025a2 <ptr_get+0x1>
    7100:	be 01       	movw	r22, r28
    7102:	6f 5f       	subi	r22, 0xFF	; 255
    7104:	7f 4f       	sbci	r23, 0xFF	; 255
    7106:	19 95       	eicall
	return c;
    7108:	89 81       	ldd	r24, Y+1	; 0x01
}
    710a:	08 2e       	mov	r0, r24
    710c:	00 0c       	add	r0, r0
    710e:	99 0b       	sbc	r25, r25
    7110:	0f 90       	pop	r0
    7112:	df 91       	pop	r29
    7114:	cf 91       	pop	r28
    7116:	08 95       	ret

00007118 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    7118:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <stdio_usb_interface_enable>
    711c:	88 23       	and	r24, r24
    711e:	81 f0       	breq	.+32     	; 0x7140 <stdio_usb_putchar+0x28>
    7120:	86 2f       	mov	r24, r22
    7122:	08 2e       	mov	r0, r24
    7124:	00 0c       	add	r0, r0
    7126:	99 0b       	sbc	r25, r25
    7128:	df db       	rcall	.-2114   	; 0x68e8 <udi_cdc_putc>
    712a:	21 e0       	ldi	r18, 0x01	; 1
    712c:	30 e0       	ldi	r19, 0x00	; 0
    712e:	89 2b       	or	r24, r25
    7130:	11 f0       	breq	.+4      	; 0x7136 <stdio_usb_putchar+0x1e>
    7132:	20 e0       	ldi	r18, 0x00	; 0
    7134:	30 e0       	ldi	r19, 0x00	; 0
    7136:	88 27       	eor	r24, r24
    7138:	99 27       	eor	r25, r25
    713a:	82 1b       	sub	r24, r18
    713c:	93 0b       	sbc	r25, r19
    713e:	08 95       	ret
    7140:	80 e0       	ldi	r24, 0x00	; 0
    7142:	90 e0       	ldi	r25, 0x00	; 0
    7144:	08 95       	ret

00007146 <stdio_usb_getchar>:
    7146:	cf 93       	push	r28
    7148:	df 93       	push	r29
    714a:	80 91 7c 25 	lds	r24, 0x257C	; 0x80257c <stdio_usb_interface_enable>
    714e:	81 11       	cpse	r24, r1
    7150:	03 c0       	rjmp	.+6      	; 0x7158 <stdio_usb_getchar+0x12>
    7152:	fb 01       	movw	r30, r22
    7154:	10 82       	st	Z, r1
    7156:	03 c0       	rjmp	.+6      	; 0x715e <stdio_usb_getchar+0x18>
    7158:	eb 01       	movw	r28, r22
    715a:	3e db       	rcall	.-2436   	; 0x67d8 <udi_cdc_getc>
    715c:	88 83       	st	Y, r24
    715e:	df 91       	pop	r29
    7160:	cf 91       	pop	r28
    7162:	08 95       	ret

00007164 <stdio_usb_enable>:
    7164:	81 e0       	ldi	r24, 0x01	; 1
    7166:	80 93 7c 25 	sts	0x257C, r24	; 0x80257c <stdio_usb_interface_enable>
    716a:	08 95       	ret

0000716c <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    716c:	10 92 a5 25 	sts	0x25A5, r1	; 0x8025a5 <stdio_base>
    7170:	10 92 a6 25 	sts	0x25A6, r1	; 0x8025a6 <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    7174:	8c e8       	ldi	r24, 0x8C	; 140
    7176:	98 e3       	ldi	r25, 0x38	; 56
    7178:	80 93 a3 25 	sts	0x25A3, r24	; 0x8025a3 <ptr_put>
    717c:	90 93 a4 25 	sts	0x25A4, r25	; 0x8025a4 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    7180:	83 ea       	ldi	r24, 0xA3	; 163
    7182:	98 e3       	ldi	r25, 0x38	; 56
    7184:	80 93 a1 25 	sts	0x25A1, r24	; 0x8025a1 <ptr_get>
    7188:	90 93 a2 25 	sts	0x25A2, r25	; 0x8025a2 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    718c:	9b dc       	rcall	.-1738   	; 0x6ac4 <udc_start>
    718e:	63 e7       	ldi	r22, 0x73	; 115
    7190:	78 e3       	ldi	r23, 0x38	; 56
    7192:	8d ec       	ldi	r24, 0xCD	; 205
    7194:	98 e3       	ldi	r25, 0x38	; 56
    7196:	63 c2       	rjmp	.+1222   	; 0x765e <fdevopen>
    7198:	08 95       	ret

0000719a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    719a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    719c:	80 91 a5 25 	lds	r24, 0x25A5	; 0x8025a5 <stdio_base>
    71a0:	90 91 a6 25 	lds	r25, 0x25A6	; 0x8025a6 <stdio_base+0x1>
    71a4:	e0 91 a3 25 	lds	r30, 0x25A3	; 0x8025a3 <ptr_put>
    71a8:	f0 91 a4 25 	lds	r31, 0x25A4	; 0x8025a4 <ptr_put+0x1>
    71ac:	19 95       	eicall
    71ae:	99 23       	and	r25, r25
    71b0:	1c f0       	brlt	.+6      	; 0x71b8 <_write+0x1e>
		return -1;
	}
	return 1;
    71b2:	81 e0       	ldi	r24, 0x01	; 1
    71b4:	90 e0       	ldi	r25, 0x00	; 0
    71b6:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    71b8:	8f ef       	ldi	r24, 0xFF	; 255
    71ba:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    71bc:	08 95       	ret

000071be <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    71be:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    71c2:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    71c4:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    71c6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    71ca:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    71cc:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    71d0:	08 95       	ret

000071d2 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    71d2:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    71d4:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    71d6:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    71d8:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    71da:	60 83       	st	Z, r22
	ret                             // Return to caller
    71dc:	08 95       	ret

000071de <__udivmodhi4>:
    71de:	aa 1b       	sub	r26, r26
    71e0:	bb 1b       	sub	r27, r27
    71e2:	51 e1       	ldi	r21, 0x11	; 17
    71e4:	07 c0       	rjmp	.+14     	; 0x71f4 <__udivmodhi4_ep>

000071e6 <__udivmodhi4_loop>:
    71e6:	aa 1f       	adc	r26, r26
    71e8:	bb 1f       	adc	r27, r27
    71ea:	a6 17       	cp	r26, r22
    71ec:	b7 07       	cpc	r27, r23
    71ee:	10 f0       	brcs	.+4      	; 0x71f4 <__udivmodhi4_ep>
    71f0:	a6 1b       	sub	r26, r22
    71f2:	b7 0b       	sbc	r27, r23

000071f4 <__udivmodhi4_ep>:
    71f4:	88 1f       	adc	r24, r24
    71f6:	99 1f       	adc	r25, r25
    71f8:	5a 95       	dec	r21
    71fa:	a9 f7       	brne	.-22     	; 0x71e6 <__udivmodhi4_loop>
    71fc:	80 95       	com	r24
    71fe:	90 95       	com	r25
    7200:	bc 01       	movw	r22, r24
    7202:	cd 01       	movw	r24, r26
    7204:	08 95       	ret

00007206 <__udivmodsi4>:
    7206:	a1 e2       	ldi	r26, 0x21	; 33
    7208:	1a 2e       	mov	r1, r26
    720a:	aa 1b       	sub	r26, r26
    720c:	bb 1b       	sub	r27, r27
    720e:	fd 01       	movw	r30, r26
    7210:	0d c0       	rjmp	.+26     	; 0x722c <__udivmodsi4_ep>

00007212 <__udivmodsi4_loop>:
    7212:	aa 1f       	adc	r26, r26
    7214:	bb 1f       	adc	r27, r27
    7216:	ee 1f       	adc	r30, r30
    7218:	ff 1f       	adc	r31, r31
    721a:	a2 17       	cp	r26, r18
    721c:	b3 07       	cpc	r27, r19
    721e:	e4 07       	cpc	r30, r20
    7220:	f5 07       	cpc	r31, r21
    7222:	20 f0       	brcs	.+8      	; 0x722c <__udivmodsi4_ep>
    7224:	a2 1b       	sub	r26, r18
    7226:	b3 0b       	sbc	r27, r19
    7228:	e4 0b       	sbc	r30, r20
    722a:	f5 0b       	sbc	r31, r21

0000722c <__udivmodsi4_ep>:
    722c:	66 1f       	adc	r22, r22
    722e:	77 1f       	adc	r23, r23
    7230:	88 1f       	adc	r24, r24
    7232:	99 1f       	adc	r25, r25
    7234:	1a 94       	dec	r1
    7236:	69 f7       	brne	.-38     	; 0x7212 <__udivmodsi4_loop>
    7238:	60 95       	com	r22
    723a:	70 95       	com	r23
    723c:	80 95       	com	r24
    723e:	90 95       	com	r25
    7240:	9b 01       	movw	r18, r22
    7242:	ac 01       	movw	r20, r24
    7244:	bd 01       	movw	r22, r26
    7246:	cf 01       	movw	r24, r30
    7248:	08 95       	ret

0000724a <__tablejump2__>:
    724a:	ee 0f       	add	r30, r30
    724c:	ff 1f       	adc	r31, r31
    724e:	88 1f       	adc	r24, r24
    7250:	8b bf       	out	0x3b, r24	; 59
    7252:	07 90       	elpm	r0, Z+
    7254:	f6 91       	elpm	r31, Z
    7256:	e0 2d       	mov	r30, r0
    7258:	19 94       	eijmp

0000725a <__umulhisi3>:
    725a:	a2 9f       	mul	r26, r18
    725c:	b0 01       	movw	r22, r0
    725e:	b3 9f       	mul	r27, r19
    7260:	c0 01       	movw	r24, r0
    7262:	a3 9f       	mul	r26, r19
    7264:	70 0d       	add	r23, r0
    7266:	81 1d       	adc	r24, r1
    7268:	11 24       	eor	r1, r1
    726a:	91 1d       	adc	r25, r1
    726c:	b2 9f       	mul	r27, r18
    726e:	70 0d       	add	r23, r0
    7270:	81 1d       	adc	r24, r1
    7272:	11 24       	eor	r1, r1
    7274:	91 1d       	adc	r25, r1
    7276:	08 95       	ret

00007278 <__subsf3>:
    7278:	50 58       	subi	r21, 0x80	; 128

0000727a <__addsf3>:
    727a:	bb 27       	eor	r27, r27
    727c:	aa 27       	eor	r26, r26
    727e:	0e d0       	rcall	.+28     	; 0x729c <__addsf3x>
    7280:	48 c1       	rjmp	.+656    	; 0x7512 <__fp_round>
    7282:	39 d1       	rcall	.+626    	; 0x74f6 <__fp_pscA>
    7284:	30 f0       	brcs	.+12     	; 0x7292 <__addsf3+0x18>
    7286:	3e d1       	rcall	.+636    	; 0x7504 <__fp_pscB>
    7288:	20 f0       	brcs	.+8      	; 0x7292 <__addsf3+0x18>
    728a:	31 f4       	brne	.+12     	; 0x7298 <__addsf3+0x1e>
    728c:	9f 3f       	cpi	r25, 0xFF	; 255
    728e:	11 f4       	brne	.+4      	; 0x7294 <__addsf3+0x1a>
    7290:	1e f4       	brtc	.+6      	; 0x7298 <__addsf3+0x1e>
    7292:	2e c1       	rjmp	.+604    	; 0x74f0 <__fp_nan>
    7294:	0e f4       	brtc	.+2      	; 0x7298 <__addsf3+0x1e>
    7296:	e0 95       	com	r30
    7298:	e7 fb       	bst	r30, 7
    729a:	24 c1       	rjmp	.+584    	; 0x74e4 <__fp_inf>

0000729c <__addsf3x>:
    729c:	e9 2f       	mov	r30, r25
    729e:	4a d1       	rcall	.+660    	; 0x7534 <__fp_split3>
    72a0:	80 f3       	brcs	.-32     	; 0x7282 <__addsf3+0x8>
    72a2:	ba 17       	cp	r27, r26
    72a4:	62 07       	cpc	r22, r18
    72a6:	73 07       	cpc	r23, r19
    72a8:	84 07       	cpc	r24, r20
    72aa:	95 07       	cpc	r25, r21
    72ac:	18 f0       	brcs	.+6      	; 0x72b4 <__addsf3x+0x18>
    72ae:	71 f4       	brne	.+28     	; 0x72cc <__addsf3x+0x30>
    72b0:	9e f5       	brtc	.+102    	; 0x7318 <__addsf3x+0x7c>
    72b2:	62 c1       	rjmp	.+708    	; 0x7578 <__fp_zero>
    72b4:	0e f4       	brtc	.+2      	; 0x72b8 <__addsf3x+0x1c>
    72b6:	e0 95       	com	r30
    72b8:	0b 2e       	mov	r0, r27
    72ba:	ba 2f       	mov	r27, r26
    72bc:	a0 2d       	mov	r26, r0
    72be:	0b 01       	movw	r0, r22
    72c0:	b9 01       	movw	r22, r18
    72c2:	90 01       	movw	r18, r0
    72c4:	0c 01       	movw	r0, r24
    72c6:	ca 01       	movw	r24, r20
    72c8:	a0 01       	movw	r20, r0
    72ca:	11 24       	eor	r1, r1
    72cc:	ff 27       	eor	r31, r31
    72ce:	59 1b       	sub	r21, r25
    72d0:	99 f0       	breq	.+38     	; 0x72f8 <__addsf3x+0x5c>
    72d2:	59 3f       	cpi	r21, 0xF9	; 249
    72d4:	50 f4       	brcc	.+20     	; 0x72ea <__addsf3x+0x4e>
    72d6:	50 3e       	cpi	r21, 0xE0	; 224
    72d8:	68 f1       	brcs	.+90     	; 0x7334 <__addsf3x+0x98>
    72da:	1a 16       	cp	r1, r26
    72dc:	f0 40       	sbci	r31, 0x00	; 0
    72de:	a2 2f       	mov	r26, r18
    72e0:	23 2f       	mov	r18, r19
    72e2:	34 2f       	mov	r19, r20
    72e4:	44 27       	eor	r20, r20
    72e6:	58 5f       	subi	r21, 0xF8	; 248
    72e8:	f3 cf       	rjmp	.-26     	; 0x72d0 <__addsf3x+0x34>
    72ea:	46 95       	lsr	r20
    72ec:	37 95       	ror	r19
    72ee:	27 95       	ror	r18
    72f0:	a7 95       	ror	r26
    72f2:	f0 40       	sbci	r31, 0x00	; 0
    72f4:	53 95       	inc	r21
    72f6:	c9 f7       	brne	.-14     	; 0x72ea <__addsf3x+0x4e>
    72f8:	7e f4       	brtc	.+30     	; 0x7318 <__addsf3x+0x7c>
    72fa:	1f 16       	cp	r1, r31
    72fc:	ba 0b       	sbc	r27, r26
    72fe:	62 0b       	sbc	r22, r18
    7300:	73 0b       	sbc	r23, r19
    7302:	84 0b       	sbc	r24, r20
    7304:	ba f0       	brmi	.+46     	; 0x7334 <__addsf3x+0x98>
    7306:	91 50       	subi	r25, 0x01	; 1
    7308:	a1 f0       	breq	.+40     	; 0x7332 <__addsf3x+0x96>
    730a:	ff 0f       	add	r31, r31
    730c:	bb 1f       	adc	r27, r27
    730e:	66 1f       	adc	r22, r22
    7310:	77 1f       	adc	r23, r23
    7312:	88 1f       	adc	r24, r24
    7314:	c2 f7       	brpl	.-16     	; 0x7306 <__addsf3x+0x6a>
    7316:	0e c0       	rjmp	.+28     	; 0x7334 <__addsf3x+0x98>
    7318:	ba 0f       	add	r27, r26
    731a:	62 1f       	adc	r22, r18
    731c:	73 1f       	adc	r23, r19
    731e:	84 1f       	adc	r24, r20
    7320:	48 f4       	brcc	.+18     	; 0x7334 <__addsf3x+0x98>
    7322:	87 95       	ror	r24
    7324:	77 95       	ror	r23
    7326:	67 95       	ror	r22
    7328:	b7 95       	ror	r27
    732a:	f7 95       	ror	r31
    732c:	9e 3f       	cpi	r25, 0xFE	; 254
    732e:	08 f0       	brcs	.+2      	; 0x7332 <__addsf3x+0x96>
    7330:	b3 cf       	rjmp	.-154    	; 0x7298 <__addsf3+0x1e>
    7332:	93 95       	inc	r25
    7334:	88 0f       	add	r24, r24
    7336:	08 f0       	brcs	.+2      	; 0x733a <__addsf3x+0x9e>
    7338:	99 27       	eor	r25, r25
    733a:	ee 0f       	add	r30, r30
    733c:	97 95       	ror	r25
    733e:	87 95       	ror	r24
    7340:	08 95       	ret

00007342 <__divsf3>:
    7342:	0c d0       	rcall	.+24     	; 0x735c <__divsf3x>
    7344:	e6 c0       	rjmp	.+460    	; 0x7512 <__fp_round>
    7346:	de d0       	rcall	.+444    	; 0x7504 <__fp_pscB>
    7348:	40 f0       	brcs	.+16     	; 0x735a <__divsf3+0x18>
    734a:	d5 d0       	rcall	.+426    	; 0x74f6 <__fp_pscA>
    734c:	30 f0       	brcs	.+12     	; 0x735a <__divsf3+0x18>
    734e:	21 f4       	brne	.+8      	; 0x7358 <__divsf3+0x16>
    7350:	5f 3f       	cpi	r21, 0xFF	; 255
    7352:	19 f0       	breq	.+6      	; 0x735a <__divsf3+0x18>
    7354:	c7 c0       	rjmp	.+398    	; 0x74e4 <__fp_inf>
    7356:	51 11       	cpse	r21, r1
    7358:	10 c1       	rjmp	.+544    	; 0x757a <__fp_szero>
    735a:	ca c0       	rjmp	.+404    	; 0x74f0 <__fp_nan>

0000735c <__divsf3x>:
    735c:	eb d0       	rcall	.+470    	; 0x7534 <__fp_split3>
    735e:	98 f3       	brcs	.-26     	; 0x7346 <__divsf3+0x4>

00007360 <__divsf3_pse>:
    7360:	99 23       	and	r25, r25
    7362:	c9 f3       	breq	.-14     	; 0x7356 <__divsf3+0x14>
    7364:	55 23       	and	r21, r21
    7366:	b1 f3       	breq	.-20     	; 0x7354 <__divsf3+0x12>
    7368:	95 1b       	sub	r25, r21
    736a:	55 0b       	sbc	r21, r21
    736c:	bb 27       	eor	r27, r27
    736e:	aa 27       	eor	r26, r26
    7370:	62 17       	cp	r22, r18
    7372:	73 07       	cpc	r23, r19
    7374:	84 07       	cpc	r24, r20
    7376:	38 f0       	brcs	.+14     	; 0x7386 <__divsf3_pse+0x26>
    7378:	9f 5f       	subi	r25, 0xFF	; 255
    737a:	5f 4f       	sbci	r21, 0xFF	; 255
    737c:	22 0f       	add	r18, r18
    737e:	33 1f       	adc	r19, r19
    7380:	44 1f       	adc	r20, r20
    7382:	aa 1f       	adc	r26, r26
    7384:	a9 f3       	breq	.-22     	; 0x7370 <__divsf3_pse+0x10>
    7386:	33 d0       	rcall	.+102    	; 0x73ee <__divsf3_pse+0x8e>
    7388:	0e 2e       	mov	r0, r30
    738a:	3a f0       	brmi	.+14     	; 0x739a <__divsf3_pse+0x3a>
    738c:	e0 e8       	ldi	r30, 0x80	; 128
    738e:	30 d0       	rcall	.+96     	; 0x73f0 <__divsf3_pse+0x90>
    7390:	91 50       	subi	r25, 0x01	; 1
    7392:	50 40       	sbci	r21, 0x00	; 0
    7394:	e6 95       	lsr	r30
    7396:	00 1c       	adc	r0, r0
    7398:	ca f7       	brpl	.-14     	; 0x738c <__divsf3_pse+0x2c>
    739a:	29 d0       	rcall	.+82     	; 0x73ee <__divsf3_pse+0x8e>
    739c:	fe 2f       	mov	r31, r30
    739e:	27 d0       	rcall	.+78     	; 0x73ee <__divsf3_pse+0x8e>
    73a0:	66 0f       	add	r22, r22
    73a2:	77 1f       	adc	r23, r23
    73a4:	88 1f       	adc	r24, r24
    73a6:	bb 1f       	adc	r27, r27
    73a8:	26 17       	cp	r18, r22
    73aa:	37 07       	cpc	r19, r23
    73ac:	48 07       	cpc	r20, r24
    73ae:	ab 07       	cpc	r26, r27
    73b0:	b0 e8       	ldi	r27, 0x80	; 128
    73b2:	09 f0       	breq	.+2      	; 0x73b6 <__divsf3_pse+0x56>
    73b4:	bb 0b       	sbc	r27, r27
    73b6:	80 2d       	mov	r24, r0
    73b8:	bf 01       	movw	r22, r30
    73ba:	ff 27       	eor	r31, r31
    73bc:	93 58       	subi	r25, 0x83	; 131
    73be:	5f 4f       	sbci	r21, 0xFF	; 255
    73c0:	2a f0       	brmi	.+10     	; 0x73cc <__divsf3_pse+0x6c>
    73c2:	9e 3f       	cpi	r25, 0xFE	; 254
    73c4:	51 05       	cpc	r21, r1
    73c6:	68 f0       	brcs	.+26     	; 0x73e2 <__divsf3_pse+0x82>
    73c8:	8d c0       	rjmp	.+282    	; 0x74e4 <__fp_inf>
    73ca:	d7 c0       	rjmp	.+430    	; 0x757a <__fp_szero>
    73cc:	5f 3f       	cpi	r21, 0xFF	; 255
    73ce:	ec f3       	brlt	.-6      	; 0x73ca <__divsf3_pse+0x6a>
    73d0:	98 3e       	cpi	r25, 0xE8	; 232
    73d2:	dc f3       	brlt	.-10     	; 0x73ca <__divsf3_pse+0x6a>
    73d4:	86 95       	lsr	r24
    73d6:	77 95       	ror	r23
    73d8:	67 95       	ror	r22
    73da:	b7 95       	ror	r27
    73dc:	f7 95       	ror	r31
    73de:	9f 5f       	subi	r25, 0xFF	; 255
    73e0:	c9 f7       	brne	.-14     	; 0x73d4 <__divsf3_pse+0x74>
    73e2:	88 0f       	add	r24, r24
    73e4:	91 1d       	adc	r25, r1
    73e6:	96 95       	lsr	r25
    73e8:	87 95       	ror	r24
    73ea:	97 f9       	bld	r25, 7
    73ec:	08 95       	ret
    73ee:	e1 e0       	ldi	r30, 0x01	; 1
    73f0:	66 0f       	add	r22, r22
    73f2:	77 1f       	adc	r23, r23
    73f4:	88 1f       	adc	r24, r24
    73f6:	bb 1f       	adc	r27, r27
    73f8:	62 17       	cp	r22, r18
    73fa:	73 07       	cpc	r23, r19
    73fc:	84 07       	cpc	r24, r20
    73fe:	ba 07       	cpc	r27, r26
    7400:	20 f0       	brcs	.+8      	; 0x740a <__divsf3_pse+0xaa>
    7402:	62 1b       	sub	r22, r18
    7404:	73 0b       	sbc	r23, r19
    7406:	84 0b       	sbc	r24, r20
    7408:	ba 0b       	sbc	r27, r26
    740a:	ee 1f       	adc	r30, r30
    740c:	88 f7       	brcc	.-30     	; 0x73f0 <__divsf3_pse+0x90>
    740e:	e0 95       	com	r30
    7410:	08 95       	ret

00007412 <__fixunssfsi>:
    7412:	98 d0       	rcall	.+304    	; 0x7544 <__fp_splitA>
    7414:	88 f0       	brcs	.+34     	; 0x7438 <__fixunssfsi+0x26>
    7416:	9f 57       	subi	r25, 0x7F	; 127
    7418:	90 f0       	brcs	.+36     	; 0x743e <__fixunssfsi+0x2c>
    741a:	b9 2f       	mov	r27, r25
    741c:	99 27       	eor	r25, r25
    741e:	b7 51       	subi	r27, 0x17	; 23
    7420:	a0 f0       	brcs	.+40     	; 0x744a <__fixunssfsi+0x38>
    7422:	d1 f0       	breq	.+52     	; 0x7458 <__fixunssfsi+0x46>
    7424:	66 0f       	add	r22, r22
    7426:	77 1f       	adc	r23, r23
    7428:	88 1f       	adc	r24, r24
    742a:	99 1f       	adc	r25, r25
    742c:	1a f0       	brmi	.+6      	; 0x7434 <__fixunssfsi+0x22>
    742e:	ba 95       	dec	r27
    7430:	c9 f7       	brne	.-14     	; 0x7424 <__fixunssfsi+0x12>
    7432:	12 c0       	rjmp	.+36     	; 0x7458 <__fixunssfsi+0x46>
    7434:	b1 30       	cpi	r27, 0x01	; 1
    7436:	81 f0       	breq	.+32     	; 0x7458 <__fixunssfsi+0x46>
    7438:	9f d0       	rcall	.+318    	; 0x7578 <__fp_zero>
    743a:	b1 e0       	ldi	r27, 0x01	; 1
    743c:	08 95       	ret
    743e:	9c c0       	rjmp	.+312    	; 0x7578 <__fp_zero>
    7440:	67 2f       	mov	r22, r23
    7442:	78 2f       	mov	r23, r24
    7444:	88 27       	eor	r24, r24
    7446:	b8 5f       	subi	r27, 0xF8	; 248
    7448:	39 f0       	breq	.+14     	; 0x7458 <__fixunssfsi+0x46>
    744a:	b9 3f       	cpi	r27, 0xF9	; 249
    744c:	cc f3       	brlt	.-14     	; 0x7440 <__fixunssfsi+0x2e>
    744e:	86 95       	lsr	r24
    7450:	77 95       	ror	r23
    7452:	67 95       	ror	r22
    7454:	b3 95       	inc	r27
    7456:	d9 f7       	brne	.-10     	; 0x744e <__fixunssfsi+0x3c>
    7458:	3e f4       	brtc	.+14     	; 0x7468 <__fixunssfsi+0x56>
    745a:	90 95       	com	r25
    745c:	80 95       	com	r24
    745e:	70 95       	com	r23
    7460:	61 95       	neg	r22
    7462:	7f 4f       	sbci	r23, 0xFF	; 255
    7464:	8f 4f       	sbci	r24, 0xFF	; 255
    7466:	9f 4f       	sbci	r25, 0xFF	; 255
    7468:	08 95       	ret

0000746a <__floatunsisf>:
    746a:	e8 94       	clt
    746c:	09 c0       	rjmp	.+18     	; 0x7480 <__floatsisf+0x12>

0000746e <__floatsisf>:
    746e:	97 fb       	bst	r25, 7
    7470:	3e f4       	brtc	.+14     	; 0x7480 <__floatsisf+0x12>
    7472:	90 95       	com	r25
    7474:	80 95       	com	r24
    7476:	70 95       	com	r23
    7478:	61 95       	neg	r22
    747a:	7f 4f       	sbci	r23, 0xFF	; 255
    747c:	8f 4f       	sbci	r24, 0xFF	; 255
    747e:	9f 4f       	sbci	r25, 0xFF	; 255
    7480:	99 23       	and	r25, r25
    7482:	a9 f0       	breq	.+42     	; 0x74ae <__floatsisf+0x40>
    7484:	f9 2f       	mov	r31, r25
    7486:	96 e9       	ldi	r25, 0x96	; 150
    7488:	bb 27       	eor	r27, r27
    748a:	93 95       	inc	r25
    748c:	f6 95       	lsr	r31
    748e:	87 95       	ror	r24
    7490:	77 95       	ror	r23
    7492:	67 95       	ror	r22
    7494:	b7 95       	ror	r27
    7496:	f1 11       	cpse	r31, r1
    7498:	f8 cf       	rjmp	.-16     	; 0x748a <__floatsisf+0x1c>
    749a:	fa f4       	brpl	.+62     	; 0x74da <__floatsisf+0x6c>
    749c:	bb 0f       	add	r27, r27
    749e:	11 f4       	brne	.+4      	; 0x74a4 <__floatsisf+0x36>
    74a0:	60 ff       	sbrs	r22, 0
    74a2:	1b c0       	rjmp	.+54     	; 0x74da <__floatsisf+0x6c>
    74a4:	6f 5f       	subi	r22, 0xFF	; 255
    74a6:	7f 4f       	sbci	r23, 0xFF	; 255
    74a8:	8f 4f       	sbci	r24, 0xFF	; 255
    74aa:	9f 4f       	sbci	r25, 0xFF	; 255
    74ac:	16 c0       	rjmp	.+44     	; 0x74da <__floatsisf+0x6c>
    74ae:	88 23       	and	r24, r24
    74b0:	11 f0       	breq	.+4      	; 0x74b6 <__floatsisf+0x48>
    74b2:	96 e9       	ldi	r25, 0x96	; 150
    74b4:	11 c0       	rjmp	.+34     	; 0x74d8 <__floatsisf+0x6a>
    74b6:	77 23       	and	r23, r23
    74b8:	21 f0       	breq	.+8      	; 0x74c2 <__floatsisf+0x54>
    74ba:	9e e8       	ldi	r25, 0x8E	; 142
    74bc:	87 2f       	mov	r24, r23
    74be:	76 2f       	mov	r23, r22
    74c0:	05 c0       	rjmp	.+10     	; 0x74cc <__floatsisf+0x5e>
    74c2:	66 23       	and	r22, r22
    74c4:	71 f0       	breq	.+28     	; 0x74e2 <__floatsisf+0x74>
    74c6:	96 e8       	ldi	r25, 0x86	; 134
    74c8:	86 2f       	mov	r24, r22
    74ca:	70 e0       	ldi	r23, 0x00	; 0
    74cc:	60 e0       	ldi	r22, 0x00	; 0
    74ce:	2a f0       	brmi	.+10     	; 0x74da <__floatsisf+0x6c>
    74d0:	9a 95       	dec	r25
    74d2:	66 0f       	add	r22, r22
    74d4:	77 1f       	adc	r23, r23
    74d6:	88 1f       	adc	r24, r24
    74d8:	da f7       	brpl	.-10     	; 0x74d0 <__floatsisf+0x62>
    74da:	88 0f       	add	r24, r24
    74dc:	96 95       	lsr	r25
    74de:	87 95       	ror	r24
    74e0:	97 f9       	bld	r25, 7
    74e2:	08 95       	ret

000074e4 <__fp_inf>:
    74e4:	97 f9       	bld	r25, 7
    74e6:	9f 67       	ori	r25, 0x7F	; 127
    74e8:	80 e8       	ldi	r24, 0x80	; 128
    74ea:	70 e0       	ldi	r23, 0x00	; 0
    74ec:	60 e0       	ldi	r22, 0x00	; 0
    74ee:	08 95       	ret

000074f0 <__fp_nan>:
    74f0:	9f ef       	ldi	r25, 0xFF	; 255
    74f2:	80 ec       	ldi	r24, 0xC0	; 192
    74f4:	08 95       	ret

000074f6 <__fp_pscA>:
    74f6:	00 24       	eor	r0, r0
    74f8:	0a 94       	dec	r0
    74fa:	16 16       	cp	r1, r22
    74fc:	17 06       	cpc	r1, r23
    74fe:	18 06       	cpc	r1, r24
    7500:	09 06       	cpc	r0, r25
    7502:	08 95       	ret

00007504 <__fp_pscB>:
    7504:	00 24       	eor	r0, r0
    7506:	0a 94       	dec	r0
    7508:	12 16       	cp	r1, r18
    750a:	13 06       	cpc	r1, r19
    750c:	14 06       	cpc	r1, r20
    750e:	05 06       	cpc	r0, r21
    7510:	08 95       	ret

00007512 <__fp_round>:
    7512:	09 2e       	mov	r0, r25
    7514:	03 94       	inc	r0
    7516:	00 0c       	add	r0, r0
    7518:	11 f4       	brne	.+4      	; 0x751e <__fp_round+0xc>
    751a:	88 23       	and	r24, r24
    751c:	52 f0       	brmi	.+20     	; 0x7532 <__fp_round+0x20>
    751e:	bb 0f       	add	r27, r27
    7520:	40 f4       	brcc	.+16     	; 0x7532 <__fp_round+0x20>
    7522:	bf 2b       	or	r27, r31
    7524:	11 f4       	brne	.+4      	; 0x752a <__fp_round+0x18>
    7526:	60 ff       	sbrs	r22, 0
    7528:	04 c0       	rjmp	.+8      	; 0x7532 <__fp_round+0x20>
    752a:	6f 5f       	subi	r22, 0xFF	; 255
    752c:	7f 4f       	sbci	r23, 0xFF	; 255
    752e:	8f 4f       	sbci	r24, 0xFF	; 255
    7530:	9f 4f       	sbci	r25, 0xFF	; 255
    7532:	08 95       	ret

00007534 <__fp_split3>:
    7534:	57 fd       	sbrc	r21, 7
    7536:	90 58       	subi	r25, 0x80	; 128
    7538:	44 0f       	add	r20, r20
    753a:	55 1f       	adc	r21, r21
    753c:	59 f0       	breq	.+22     	; 0x7554 <__fp_splitA+0x10>
    753e:	5f 3f       	cpi	r21, 0xFF	; 255
    7540:	71 f0       	breq	.+28     	; 0x755e <__fp_splitA+0x1a>
    7542:	47 95       	ror	r20

00007544 <__fp_splitA>:
    7544:	88 0f       	add	r24, r24
    7546:	97 fb       	bst	r25, 7
    7548:	99 1f       	adc	r25, r25
    754a:	61 f0       	breq	.+24     	; 0x7564 <__fp_splitA+0x20>
    754c:	9f 3f       	cpi	r25, 0xFF	; 255
    754e:	79 f0       	breq	.+30     	; 0x756e <__fp_splitA+0x2a>
    7550:	87 95       	ror	r24
    7552:	08 95       	ret
    7554:	12 16       	cp	r1, r18
    7556:	13 06       	cpc	r1, r19
    7558:	14 06       	cpc	r1, r20
    755a:	55 1f       	adc	r21, r21
    755c:	f2 cf       	rjmp	.-28     	; 0x7542 <__fp_split3+0xe>
    755e:	46 95       	lsr	r20
    7560:	f1 df       	rcall	.-30     	; 0x7544 <__fp_splitA>
    7562:	08 c0       	rjmp	.+16     	; 0x7574 <__fp_splitA+0x30>
    7564:	16 16       	cp	r1, r22
    7566:	17 06       	cpc	r1, r23
    7568:	18 06       	cpc	r1, r24
    756a:	99 1f       	adc	r25, r25
    756c:	f1 cf       	rjmp	.-30     	; 0x7550 <__fp_splitA+0xc>
    756e:	86 95       	lsr	r24
    7570:	71 05       	cpc	r23, r1
    7572:	61 05       	cpc	r22, r1
    7574:	08 94       	sec
    7576:	08 95       	ret

00007578 <__fp_zero>:
    7578:	e8 94       	clt

0000757a <__fp_szero>:
    757a:	bb 27       	eor	r27, r27
    757c:	66 27       	eor	r22, r22
    757e:	77 27       	eor	r23, r23
    7580:	cb 01       	movw	r24, r22
    7582:	97 f9       	bld	r25, 7
    7584:	08 95       	ret

00007586 <__mulsf3>:
    7586:	0b d0       	rcall	.+22     	; 0x759e <__mulsf3x>
    7588:	c4 cf       	rjmp	.-120    	; 0x7512 <__fp_round>
    758a:	b5 df       	rcall	.-150    	; 0x74f6 <__fp_pscA>
    758c:	28 f0       	brcs	.+10     	; 0x7598 <__mulsf3+0x12>
    758e:	ba df       	rcall	.-140    	; 0x7504 <__fp_pscB>
    7590:	18 f0       	brcs	.+6      	; 0x7598 <__mulsf3+0x12>
    7592:	95 23       	and	r25, r21
    7594:	09 f0       	breq	.+2      	; 0x7598 <__mulsf3+0x12>
    7596:	a6 cf       	rjmp	.-180    	; 0x74e4 <__fp_inf>
    7598:	ab cf       	rjmp	.-170    	; 0x74f0 <__fp_nan>
    759a:	11 24       	eor	r1, r1
    759c:	ee cf       	rjmp	.-36     	; 0x757a <__fp_szero>

0000759e <__mulsf3x>:
    759e:	ca df       	rcall	.-108    	; 0x7534 <__fp_split3>
    75a0:	a0 f3       	brcs	.-24     	; 0x758a <__mulsf3+0x4>

000075a2 <__mulsf3_pse>:
    75a2:	95 9f       	mul	r25, r21
    75a4:	d1 f3       	breq	.-12     	; 0x759a <__mulsf3+0x14>
    75a6:	95 0f       	add	r25, r21
    75a8:	50 e0       	ldi	r21, 0x00	; 0
    75aa:	55 1f       	adc	r21, r21
    75ac:	62 9f       	mul	r22, r18
    75ae:	f0 01       	movw	r30, r0
    75b0:	72 9f       	mul	r23, r18
    75b2:	bb 27       	eor	r27, r27
    75b4:	f0 0d       	add	r31, r0
    75b6:	b1 1d       	adc	r27, r1
    75b8:	63 9f       	mul	r22, r19
    75ba:	aa 27       	eor	r26, r26
    75bc:	f0 0d       	add	r31, r0
    75be:	b1 1d       	adc	r27, r1
    75c0:	aa 1f       	adc	r26, r26
    75c2:	64 9f       	mul	r22, r20
    75c4:	66 27       	eor	r22, r22
    75c6:	b0 0d       	add	r27, r0
    75c8:	a1 1d       	adc	r26, r1
    75ca:	66 1f       	adc	r22, r22
    75cc:	82 9f       	mul	r24, r18
    75ce:	22 27       	eor	r18, r18
    75d0:	b0 0d       	add	r27, r0
    75d2:	a1 1d       	adc	r26, r1
    75d4:	62 1f       	adc	r22, r18
    75d6:	73 9f       	mul	r23, r19
    75d8:	b0 0d       	add	r27, r0
    75da:	a1 1d       	adc	r26, r1
    75dc:	62 1f       	adc	r22, r18
    75de:	83 9f       	mul	r24, r19
    75e0:	a0 0d       	add	r26, r0
    75e2:	61 1d       	adc	r22, r1
    75e4:	22 1f       	adc	r18, r18
    75e6:	74 9f       	mul	r23, r20
    75e8:	33 27       	eor	r19, r19
    75ea:	a0 0d       	add	r26, r0
    75ec:	61 1d       	adc	r22, r1
    75ee:	23 1f       	adc	r18, r19
    75f0:	84 9f       	mul	r24, r20
    75f2:	60 0d       	add	r22, r0
    75f4:	21 1d       	adc	r18, r1
    75f6:	82 2f       	mov	r24, r18
    75f8:	76 2f       	mov	r23, r22
    75fa:	6a 2f       	mov	r22, r26
    75fc:	11 24       	eor	r1, r1
    75fe:	9f 57       	subi	r25, 0x7F	; 127
    7600:	50 40       	sbci	r21, 0x00	; 0
    7602:	8a f0       	brmi	.+34     	; 0x7626 <__mulsf3_pse+0x84>
    7604:	e1 f0       	breq	.+56     	; 0x763e <__mulsf3_pse+0x9c>
    7606:	88 23       	and	r24, r24
    7608:	4a f0       	brmi	.+18     	; 0x761c <__mulsf3_pse+0x7a>
    760a:	ee 0f       	add	r30, r30
    760c:	ff 1f       	adc	r31, r31
    760e:	bb 1f       	adc	r27, r27
    7610:	66 1f       	adc	r22, r22
    7612:	77 1f       	adc	r23, r23
    7614:	88 1f       	adc	r24, r24
    7616:	91 50       	subi	r25, 0x01	; 1
    7618:	50 40       	sbci	r21, 0x00	; 0
    761a:	a9 f7       	brne	.-22     	; 0x7606 <__mulsf3_pse+0x64>
    761c:	9e 3f       	cpi	r25, 0xFE	; 254
    761e:	51 05       	cpc	r21, r1
    7620:	70 f0       	brcs	.+28     	; 0x763e <__mulsf3_pse+0x9c>
    7622:	60 cf       	rjmp	.-320    	; 0x74e4 <__fp_inf>
    7624:	aa cf       	rjmp	.-172    	; 0x757a <__fp_szero>
    7626:	5f 3f       	cpi	r21, 0xFF	; 255
    7628:	ec f3       	brlt	.-6      	; 0x7624 <__mulsf3_pse+0x82>
    762a:	98 3e       	cpi	r25, 0xE8	; 232
    762c:	dc f3       	brlt	.-10     	; 0x7624 <__mulsf3_pse+0x82>
    762e:	86 95       	lsr	r24
    7630:	77 95       	ror	r23
    7632:	67 95       	ror	r22
    7634:	b7 95       	ror	r27
    7636:	f7 95       	ror	r31
    7638:	e7 95       	ror	r30
    763a:	9f 5f       	subi	r25, 0xFF	; 255
    763c:	c1 f7       	brne	.-16     	; 0x762e <__mulsf3_pse+0x8c>
    763e:	fe 2b       	or	r31, r30
    7640:	88 0f       	add	r24, r24
    7642:	91 1d       	adc	r25, r1
    7644:	96 95       	lsr	r25
    7646:	87 95       	ror	r24
    7648:	97 f9       	bld	r25, 7
    764a:	08 95       	ret

0000764c <memcpy>:
    764c:	fb 01       	movw	r30, r22
    764e:	dc 01       	movw	r26, r24
    7650:	02 c0       	rjmp	.+4      	; 0x7656 <memcpy+0xa>
    7652:	01 90       	ld	r0, Z+
    7654:	0d 92       	st	X+, r0
    7656:	41 50       	subi	r20, 0x01	; 1
    7658:	50 40       	sbci	r21, 0x00	; 0
    765a:	d8 f7       	brcc	.-10     	; 0x7652 <memcpy+0x6>
    765c:	08 95       	ret

0000765e <fdevopen>:
    765e:	0f 93       	push	r16
    7660:	1f 93       	push	r17
    7662:	cf 93       	push	r28
    7664:	df 93       	push	r29
    7666:	00 97       	sbiw	r24, 0x00	; 0
    7668:	31 f4       	brne	.+12     	; 0x7676 <fdevopen+0x18>
    766a:	61 15       	cp	r22, r1
    766c:	71 05       	cpc	r23, r1
    766e:	19 f4       	brne	.+6      	; 0x7676 <fdevopen+0x18>
    7670:	80 e0       	ldi	r24, 0x00	; 0
    7672:	90 e0       	ldi	r25, 0x00	; 0
    7674:	39 c0       	rjmp	.+114    	; 0x76e8 <fdevopen+0x8a>
    7676:	8b 01       	movw	r16, r22
    7678:	ec 01       	movw	r28, r24
    767a:	6e e0       	ldi	r22, 0x0E	; 14
    767c:	70 e0       	ldi	r23, 0x00	; 0
    767e:	81 e0       	ldi	r24, 0x01	; 1
    7680:	90 e0       	ldi	r25, 0x00	; 0
    7682:	41 d2       	rcall	.+1154   	; 0x7b06 <calloc>
    7684:	fc 01       	movw	r30, r24
    7686:	89 2b       	or	r24, r25
    7688:	99 f3       	breq	.-26     	; 0x7670 <fdevopen+0x12>
    768a:	80 e8       	ldi	r24, 0x80	; 128
    768c:	83 83       	std	Z+3, r24	; 0x03
    768e:	01 15       	cp	r16, r1
    7690:	11 05       	cpc	r17, r1
    7692:	71 f0       	breq	.+28     	; 0x76b0 <fdevopen+0x52>
    7694:	02 87       	std	Z+10, r16	; 0x0a
    7696:	13 87       	std	Z+11, r17	; 0x0b
    7698:	81 e8       	ldi	r24, 0x81	; 129
    769a:	83 83       	std	Z+3, r24	; 0x03
    769c:	80 91 a7 25 	lds	r24, 0x25A7	; 0x8025a7 <__iob>
    76a0:	90 91 a8 25 	lds	r25, 0x25A8	; 0x8025a8 <__iob+0x1>
    76a4:	89 2b       	or	r24, r25
    76a6:	21 f4       	brne	.+8      	; 0x76b0 <fdevopen+0x52>
    76a8:	e0 93 a7 25 	sts	0x25A7, r30	; 0x8025a7 <__iob>
    76ac:	f0 93 a8 25 	sts	0x25A8, r31	; 0x8025a8 <__iob+0x1>
    76b0:	20 97       	sbiw	r28, 0x00	; 0
    76b2:	c9 f0       	breq	.+50     	; 0x76e6 <fdevopen+0x88>
    76b4:	c0 87       	std	Z+8, r28	; 0x08
    76b6:	d1 87       	std	Z+9, r29	; 0x09
    76b8:	83 81       	ldd	r24, Z+3	; 0x03
    76ba:	82 60       	ori	r24, 0x02	; 2
    76bc:	83 83       	std	Z+3, r24	; 0x03
    76be:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <__iob+0x2>
    76c2:	90 91 aa 25 	lds	r25, 0x25AA	; 0x8025aa <__iob+0x3>
    76c6:	89 2b       	or	r24, r25
    76c8:	71 f4       	brne	.+28     	; 0x76e6 <fdevopen+0x88>
    76ca:	e0 93 a9 25 	sts	0x25A9, r30	; 0x8025a9 <__iob+0x2>
    76ce:	f0 93 aa 25 	sts	0x25AA, r31	; 0x8025aa <__iob+0x3>
    76d2:	80 91 ab 25 	lds	r24, 0x25AB	; 0x8025ab <__iob+0x4>
    76d6:	90 91 ac 25 	lds	r25, 0x25AC	; 0x8025ac <__iob+0x5>
    76da:	89 2b       	or	r24, r25
    76dc:	21 f4       	brne	.+8      	; 0x76e6 <fdevopen+0x88>
    76de:	e0 93 ab 25 	sts	0x25AB, r30	; 0x8025ab <__iob+0x4>
    76e2:	f0 93 ac 25 	sts	0x25AC, r31	; 0x8025ac <__iob+0x5>
    76e6:	cf 01       	movw	r24, r30
    76e8:	df 91       	pop	r29
    76ea:	cf 91       	pop	r28
    76ec:	1f 91       	pop	r17
    76ee:	0f 91       	pop	r16
    76f0:	08 95       	ret

000076f2 <printf>:
    76f2:	cf 93       	push	r28
    76f4:	df 93       	push	r29
    76f6:	cd b7       	in	r28, 0x3d	; 61
    76f8:	de b7       	in	r29, 0x3e	; 62
    76fa:	ae 01       	movw	r20, r28
    76fc:	4a 5f       	subi	r20, 0xFA	; 250
    76fe:	5f 4f       	sbci	r21, 0xFF	; 255
    7700:	fa 01       	movw	r30, r20
    7702:	61 91       	ld	r22, Z+
    7704:	71 91       	ld	r23, Z+
    7706:	af 01       	movw	r20, r30
    7708:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <__iob+0x2>
    770c:	90 91 aa 25 	lds	r25, 0x25AA	; 0x8025aa <__iob+0x3>
    7710:	03 d0       	rcall	.+6      	; 0x7718 <vfprintf>
    7712:	df 91       	pop	r29
    7714:	cf 91       	pop	r28
    7716:	08 95       	ret

00007718 <vfprintf>:
    7718:	2f 92       	push	r2
    771a:	3f 92       	push	r3
    771c:	4f 92       	push	r4
    771e:	5f 92       	push	r5
    7720:	6f 92       	push	r6
    7722:	7f 92       	push	r7
    7724:	8f 92       	push	r8
    7726:	9f 92       	push	r9
    7728:	af 92       	push	r10
    772a:	bf 92       	push	r11
    772c:	cf 92       	push	r12
    772e:	df 92       	push	r13
    7730:	ef 92       	push	r14
    7732:	ff 92       	push	r15
    7734:	0f 93       	push	r16
    7736:	1f 93       	push	r17
    7738:	cf 93       	push	r28
    773a:	df 93       	push	r29
    773c:	cd b7       	in	r28, 0x3d	; 61
    773e:	de b7       	in	r29, 0x3e	; 62
    7740:	2b 97       	sbiw	r28, 0x0b	; 11
    7742:	cd bf       	out	0x3d, r28	; 61
    7744:	de bf       	out	0x3e, r29	; 62
    7746:	6c 01       	movw	r12, r24
    7748:	7b 01       	movw	r14, r22
    774a:	8a 01       	movw	r16, r20
    774c:	fc 01       	movw	r30, r24
    774e:	16 82       	std	Z+6, r1	; 0x06
    7750:	17 82       	std	Z+7, r1	; 0x07
    7752:	83 81       	ldd	r24, Z+3	; 0x03
    7754:	81 ff       	sbrs	r24, 1
    7756:	bf c1       	rjmp	.+894    	; 0x7ad6 <vfprintf+0x3be>
    7758:	ce 01       	movw	r24, r28
    775a:	01 96       	adiw	r24, 0x01	; 1
    775c:	3c 01       	movw	r6, r24
    775e:	f6 01       	movw	r30, r12
    7760:	93 81       	ldd	r25, Z+3	; 0x03
    7762:	f7 01       	movw	r30, r14
    7764:	93 fd       	sbrc	r25, 3
    7766:	85 91       	lpm	r24, Z+
    7768:	93 ff       	sbrs	r25, 3
    776a:	81 91       	ld	r24, Z+
    776c:	7f 01       	movw	r14, r30
    776e:	88 23       	and	r24, r24
    7770:	09 f4       	brne	.+2      	; 0x7774 <vfprintf+0x5c>
    7772:	ad c1       	rjmp	.+858    	; 0x7ace <vfprintf+0x3b6>
    7774:	85 32       	cpi	r24, 0x25	; 37
    7776:	39 f4       	brne	.+14     	; 0x7786 <vfprintf+0x6e>
    7778:	93 fd       	sbrc	r25, 3
    777a:	85 91       	lpm	r24, Z+
    777c:	93 ff       	sbrs	r25, 3
    777e:	81 91       	ld	r24, Z+
    7780:	7f 01       	movw	r14, r30
    7782:	85 32       	cpi	r24, 0x25	; 37
    7784:	21 f4       	brne	.+8      	; 0x778e <vfprintf+0x76>
    7786:	b6 01       	movw	r22, r12
    7788:	90 e0       	ldi	r25, 0x00	; 0
    778a:	15 d3       	rcall	.+1578   	; 0x7db6 <fputc>
    778c:	e8 cf       	rjmp	.-48     	; 0x775e <vfprintf+0x46>
    778e:	91 2c       	mov	r9, r1
    7790:	21 2c       	mov	r2, r1
    7792:	31 2c       	mov	r3, r1
    7794:	ff e1       	ldi	r31, 0x1F	; 31
    7796:	f3 15       	cp	r31, r3
    7798:	d8 f0       	brcs	.+54     	; 0x77d0 <vfprintf+0xb8>
    779a:	8b 32       	cpi	r24, 0x2B	; 43
    779c:	79 f0       	breq	.+30     	; 0x77bc <vfprintf+0xa4>
    779e:	38 f4       	brcc	.+14     	; 0x77ae <vfprintf+0x96>
    77a0:	80 32       	cpi	r24, 0x20	; 32
    77a2:	79 f0       	breq	.+30     	; 0x77c2 <vfprintf+0xaa>
    77a4:	83 32       	cpi	r24, 0x23	; 35
    77a6:	a1 f4       	brne	.+40     	; 0x77d0 <vfprintf+0xb8>
    77a8:	23 2d       	mov	r18, r3
    77aa:	20 61       	ori	r18, 0x10	; 16
    77ac:	1d c0       	rjmp	.+58     	; 0x77e8 <vfprintf+0xd0>
    77ae:	8d 32       	cpi	r24, 0x2D	; 45
    77b0:	61 f0       	breq	.+24     	; 0x77ca <vfprintf+0xb2>
    77b2:	80 33       	cpi	r24, 0x30	; 48
    77b4:	69 f4       	brne	.+26     	; 0x77d0 <vfprintf+0xb8>
    77b6:	23 2d       	mov	r18, r3
    77b8:	21 60       	ori	r18, 0x01	; 1
    77ba:	16 c0       	rjmp	.+44     	; 0x77e8 <vfprintf+0xd0>
    77bc:	83 2d       	mov	r24, r3
    77be:	82 60       	ori	r24, 0x02	; 2
    77c0:	38 2e       	mov	r3, r24
    77c2:	e3 2d       	mov	r30, r3
    77c4:	e4 60       	ori	r30, 0x04	; 4
    77c6:	3e 2e       	mov	r3, r30
    77c8:	2a c0       	rjmp	.+84     	; 0x781e <vfprintf+0x106>
    77ca:	f3 2d       	mov	r31, r3
    77cc:	f8 60       	ori	r31, 0x08	; 8
    77ce:	1d c0       	rjmp	.+58     	; 0x780a <vfprintf+0xf2>
    77d0:	37 fc       	sbrc	r3, 7
    77d2:	2d c0       	rjmp	.+90     	; 0x782e <vfprintf+0x116>
    77d4:	20 ed       	ldi	r18, 0xD0	; 208
    77d6:	28 0f       	add	r18, r24
    77d8:	2a 30       	cpi	r18, 0x0A	; 10
    77da:	40 f0       	brcs	.+16     	; 0x77ec <vfprintf+0xd4>
    77dc:	8e 32       	cpi	r24, 0x2E	; 46
    77de:	b9 f4       	brne	.+46     	; 0x780e <vfprintf+0xf6>
    77e0:	36 fc       	sbrc	r3, 6
    77e2:	75 c1       	rjmp	.+746    	; 0x7ace <vfprintf+0x3b6>
    77e4:	23 2d       	mov	r18, r3
    77e6:	20 64       	ori	r18, 0x40	; 64
    77e8:	32 2e       	mov	r3, r18
    77ea:	19 c0       	rjmp	.+50     	; 0x781e <vfprintf+0x106>
    77ec:	36 fe       	sbrs	r3, 6
    77ee:	06 c0       	rjmp	.+12     	; 0x77fc <vfprintf+0xe4>
    77f0:	8a e0       	ldi	r24, 0x0A	; 10
    77f2:	98 9e       	mul	r9, r24
    77f4:	20 0d       	add	r18, r0
    77f6:	11 24       	eor	r1, r1
    77f8:	92 2e       	mov	r9, r18
    77fa:	11 c0       	rjmp	.+34     	; 0x781e <vfprintf+0x106>
    77fc:	ea e0       	ldi	r30, 0x0A	; 10
    77fe:	2e 9e       	mul	r2, r30
    7800:	20 0d       	add	r18, r0
    7802:	11 24       	eor	r1, r1
    7804:	22 2e       	mov	r2, r18
    7806:	f3 2d       	mov	r31, r3
    7808:	f0 62       	ori	r31, 0x20	; 32
    780a:	3f 2e       	mov	r3, r31
    780c:	08 c0       	rjmp	.+16     	; 0x781e <vfprintf+0x106>
    780e:	8c 36       	cpi	r24, 0x6C	; 108
    7810:	21 f4       	brne	.+8      	; 0x781a <vfprintf+0x102>
    7812:	83 2d       	mov	r24, r3
    7814:	80 68       	ori	r24, 0x80	; 128
    7816:	38 2e       	mov	r3, r24
    7818:	02 c0       	rjmp	.+4      	; 0x781e <vfprintf+0x106>
    781a:	88 36       	cpi	r24, 0x68	; 104
    781c:	41 f4       	brne	.+16     	; 0x782e <vfprintf+0x116>
    781e:	f7 01       	movw	r30, r14
    7820:	93 fd       	sbrc	r25, 3
    7822:	85 91       	lpm	r24, Z+
    7824:	93 ff       	sbrs	r25, 3
    7826:	81 91       	ld	r24, Z+
    7828:	7f 01       	movw	r14, r30
    782a:	81 11       	cpse	r24, r1
    782c:	b3 cf       	rjmp	.-154    	; 0x7794 <vfprintf+0x7c>
    782e:	98 2f       	mov	r25, r24
    7830:	9f 7d       	andi	r25, 0xDF	; 223
    7832:	95 54       	subi	r25, 0x45	; 69
    7834:	93 30       	cpi	r25, 0x03	; 3
    7836:	28 f4       	brcc	.+10     	; 0x7842 <vfprintf+0x12a>
    7838:	0c 5f       	subi	r16, 0xFC	; 252
    783a:	1f 4f       	sbci	r17, 0xFF	; 255
    783c:	9f e3       	ldi	r25, 0x3F	; 63
    783e:	99 83       	std	Y+1, r25	; 0x01
    7840:	0d c0       	rjmp	.+26     	; 0x785c <vfprintf+0x144>
    7842:	83 36       	cpi	r24, 0x63	; 99
    7844:	31 f0       	breq	.+12     	; 0x7852 <vfprintf+0x13a>
    7846:	83 37       	cpi	r24, 0x73	; 115
    7848:	71 f0       	breq	.+28     	; 0x7866 <vfprintf+0x14e>
    784a:	83 35       	cpi	r24, 0x53	; 83
    784c:	09 f0       	breq	.+2      	; 0x7850 <vfprintf+0x138>
    784e:	55 c0       	rjmp	.+170    	; 0x78fa <vfprintf+0x1e2>
    7850:	20 c0       	rjmp	.+64     	; 0x7892 <vfprintf+0x17a>
    7852:	f8 01       	movw	r30, r16
    7854:	80 81       	ld	r24, Z
    7856:	89 83       	std	Y+1, r24	; 0x01
    7858:	0e 5f       	subi	r16, 0xFE	; 254
    785a:	1f 4f       	sbci	r17, 0xFF	; 255
    785c:	88 24       	eor	r8, r8
    785e:	83 94       	inc	r8
    7860:	91 2c       	mov	r9, r1
    7862:	53 01       	movw	r10, r6
    7864:	12 c0       	rjmp	.+36     	; 0x788a <vfprintf+0x172>
    7866:	28 01       	movw	r4, r16
    7868:	f2 e0       	ldi	r31, 0x02	; 2
    786a:	4f 0e       	add	r4, r31
    786c:	51 1c       	adc	r5, r1
    786e:	f8 01       	movw	r30, r16
    7870:	a0 80       	ld	r10, Z
    7872:	b1 80       	ldd	r11, Z+1	; 0x01
    7874:	36 fe       	sbrs	r3, 6
    7876:	03 c0       	rjmp	.+6      	; 0x787e <vfprintf+0x166>
    7878:	69 2d       	mov	r22, r9
    787a:	70 e0       	ldi	r23, 0x00	; 0
    787c:	02 c0       	rjmp	.+4      	; 0x7882 <vfprintf+0x16a>
    787e:	6f ef       	ldi	r22, 0xFF	; 255
    7880:	7f ef       	ldi	r23, 0xFF	; 255
    7882:	c5 01       	movw	r24, r10
    7884:	8d d2       	rcall	.+1306   	; 0x7da0 <strnlen>
    7886:	4c 01       	movw	r8, r24
    7888:	82 01       	movw	r16, r4
    788a:	f3 2d       	mov	r31, r3
    788c:	ff 77       	andi	r31, 0x7F	; 127
    788e:	3f 2e       	mov	r3, r31
    7890:	15 c0       	rjmp	.+42     	; 0x78bc <vfprintf+0x1a4>
    7892:	28 01       	movw	r4, r16
    7894:	22 e0       	ldi	r18, 0x02	; 2
    7896:	42 0e       	add	r4, r18
    7898:	51 1c       	adc	r5, r1
    789a:	f8 01       	movw	r30, r16
    789c:	a0 80       	ld	r10, Z
    789e:	b1 80       	ldd	r11, Z+1	; 0x01
    78a0:	36 fe       	sbrs	r3, 6
    78a2:	03 c0       	rjmp	.+6      	; 0x78aa <vfprintf+0x192>
    78a4:	69 2d       	mov	r22, r9
    78a6:	70 e0       	ldi	r23, 0x00	; 0
    78a8:	02 c0       	rjmp	.+4      	; 0x78ae <vfprintf+0x196>
    78aa:	6f ef       	ldi	r22, 0xFF	; 255
    78ac:	7f ef       	ldi	r23, 0xFF	; 255
    78ae:	c5 01       	movw	r24, r10
    78b0:	65 d2       	rcall	.+1226   	; 0x7d7c <strnlen_P>
    78b2:	4c 01       	movw	r8, r24
    78b4:	f3 2d       	mov	r31, r3
    78b6:	f0 68       	ori	r31, 0x80	; 128
    78b8:	3f 2e       	mov	r3, r31
    78ba:	82 01       	movw	r16, r4
    78bc:	33 fc       	sbrc	r3, 3
    78be:	19 c0       	rjmp	.+50     	; 0x78f2 <vfprintf+0x1da>
    78c0:	82 2d       	mov	r24, r2
    78c2:	90 e0       	ldi	r25, 0x00	; 0
    78c4:	88 16       	cp	r8, r24
    78c6:	99 06       	cpc	r9, r25
    78c8:	a0 f4       	brcc	.+40     	; 0x78f2 <vfprintf+0x1da>
    78ca:	b6 01       	movw	r22, r12
    78cc:	80 e2       	ldi	r24, 0x20	; 32
    78ce:	90 e0       	ldi	r25, 0x00	; 0
    78d0:	72 d2       	rcall	.+1252   	; 0x7db6 <fputc>
    78d2:	2a 94       	dec	r2
    78d4:	f5 cf       	rjmp	.-22     	; 0x78c0 <vfprintf+0x1a8>
    78d6:	f5 01       	movw	r30, r10
    78d8:	37 fc       	sbrc	r3, 7
    78da:	85 91       	lpm	r24, Z+
    78dc:	37 fe       	sbrs	r3, 7
    78de:	81 91       	ld	r24, Z+
    78e0:	5f 01       	movw	r10, r30
    78e2:	b6 01       	movw	r22, r12
    78e4:	90 e0       	ldi	r25, 0x00	; 0
    78e6:	67 d2       	rcall	.+1230   	; 0x7db6 <fputc>
    78e8:	21 10       	cpse	r2, r1
    78ea:	2a 94       	dec	r2
    78ec:	21 e0       	ldi	r18, 0x01	; 1
    78ee:	82 1a       	sub	r8, r18
    78f0:	91 08       	sbc	r9, r1
    78f2:	81 14       	cp	r8, r1
    78f4:	91 04       	cpc	r9, r1
    78f6:	79 f7       	brne	.-34     	; 0x78d6 <vfprintf+0x1be>
    78f8:	e1 c0       	rjmp	.+450    	; 0x7abc <vfprintf+0x3a4>
    78fa:	84 36       	cpi	r24, 0x64	; 100
    78fc:	11 f0       	breq	.+4      	; 0x7902 <vfprintf+0x1ea>
    78fe:	89 36       	cpi	r24, 0x69	; 105
    7900:	39 f5       	brne	.+78     	; 0x7950 <vfprintf+0x238>
    7902:	f8 01       	movw	r30, r16
    7904:	37 fe       	sbrs	r3, 7
    7906:	07 c0       	rjmp	.+14     	; 0x7916 <vfprintf+0x1fe>
    7908:	60 81       	ld	r22, Z
    790a:	71 81       	ldd	r23, Z+1	; 0x01
    790c:	82 81       	ldd	r24, Z+2	; 0x02
    790e:	93 81       	ldd	r25, Z+3	; 0x03
    7910:	0c 5f       	subi	r16, 0xFC	; 252
    7912:	1f 4f       	sbci	r17, 0xFF	; 255
    7914:	08 c0       	rjmp	.+16     	; 0x7926 <vfprintf+0x20e>
    7916:	60 81       	ld	r22, Z
    7918:	71 81       	ldd	r23, Z+1	; 0x01
    791a:	07 2e       	mov	r0, r23
    791c:	00 0c       	add	r0, r0
    791e:	88 0b       	sbc	r24, r24
    7920:	99 0b       	sbc	r25, r25
    7922:	0e 5f       	subi	r16, 0xFE	; 254
    7924:	1f 4f       	sbci	r17, 0xFF	; 255
    7926:	f3 2d       	mov	r31, r3
    7928:	ff 76       	andi	r31, 0x6F	; 111
    792a:	3f 2e       	mov	r3, r31
    792c:	97 ff       	sbrs	r25, 7
    792e:	09 c0       	rjmp	.+18     	; 0x7942 <vfprintf+0x22a>
    7930:	90 95       	com	r25
    7932:	80 95       	com	r24
    7934:	70 95       	com	r23
    7936:	61 95       	neg	r22
    7938:	7f 4f       	sbci	r23, 0xFF	; 255
    793a:	8f 4f       	sbci	r24, 0xFF	; 255
    793c:	9f 4f       	sbci	r25, 0xFF	; 255
    793e:	f0 68       	ori	r31, 0x80	; 128
    7940:	3f 2e       	mov	r3, r31
    7942:	2a e0       	ldi	r18, 0x0A	; 10
    7944:	30 e0       	ldi	r19, 0x00	; 0
    7946:	a3 01       	movw	r20, r6
    7948:	72 d2       	rcall	.+1252   	; 0x7e2e <__ultoa_invert>
    794a:	88 2e       	mov	r8, r24
    794c:	86 18       	sub	r8, r6
    794e:	44 c0       	rjmp	.+136    	; 0x79d8 <vfprintf+0x2c0>
    7950:	85 37       	cpi	r24, 0x75	; 117
    7952:	31 f4       	brne	.+12     	; 0x7960 <vfprintf+0x248>
    7954:	23 2d       	mov	r18, r3
    7956:	2f 7e       	andi	r18, 0xEF	; 239
    7958:	b2 2e       	mov	r11, r18
    795a:	2a e0       	ldi	r18, 0x0A	; 10
    795c:	30 e0       	ldi	r19, 0x00	; 0
    795e:	25 c0       	rjmp	.+74     	; 0x79aa <vfprintf+0x292>
    7960:	93 2d       	mov	r25, r3
    7962:	99 7f       	andi	r25, 0xF9	; 249
    7964:	b9 2e       	mov	r11, r25
    7966:	8f 36       	cpi	r24, 0x6F	; 111
    7968:	c1 f0       	breq	.+48     	; 0x799a <vfprintf+0x282>
    796a:	18 f4       	brcc	.+6      	; 0x7972 <vfprintf+0x25a>
    796c:	88 35       	cpi	r24, 0x58	; 88
    796e:	79 f0       	breq	.+30     	; 0x798e <vfprintf+0x276>
    7970:	ae c0       	rjmp	.+348    	; 0x7ace <vfprintf+0x3b6>
    7972:	80 37       	cpi	r24, 0x70	; 112
    7974:	19 f0       	breq	.+6      	; 0x797c <vfprintf+0x264>
    7976:	88 37       	cpi	r24, 0x78	; 120
    7978:	21 f0       	breq	.+8      	; 0x7982 <vfprintf+0x26a>
    797a:	a9 c0       	rjmp	.+338    	; 0x7ace <vfprintf+0x3b6>
    797c:	e9 2f       	mov	r30, r25
    797e:	e0 61       	ori	r30, 0x10	; 16
    7980:	be 2e       	mov	r11, r30
    7982:	b4 fe       	sbrs	r11, 4
    7984:	0d c0       	rjmp	.+26     	; 0x79a0 <vfprintf+0x288>
    7986:	fb 2d       	mov	r31, r11
    7988:	f4 60       	ori	r31, 0x04	; 4
    798a:	bf 2e       	mov	r11, r31
    798c:	09 c0       	rjmp	.+18     	; 0x79a0 <vfprintf+0x288>
    798e:	34 fe       	sbrs	r3, 4
    7990:	0a c0       	rjmp	.+20     	; 0x79a6 <vfprintf+0x28e>
    7992:	29 2f       	mov	r18, r25
    7994:	26 60       	ori	r18, 0x06	; 6
    7996:	b2 2e       	mov	r11, r18
    7998:	06 c0       	rjmp	.+12     	; 0x79a6 <vfprintf+0x28e>
    799a:	28 e0       	ldi	r18, 0x08	; 8
    799c:	30 e0       	ldi	r19, 0x00	; 0
    799e:	05 c0       	rjmp	.+10     	; 0x79aa <vfprintf+0x292>
    79a0:	20 e1       	ldi	r18, 0x10	; 16
    79a2:	30 e0       	ldi	r19, 0x00	; 0
    79a4:	02 c0       	rjmp	.+4      	; 0x79aa <vfprintf+0x292>
    79a6:	20 e1       	ldi	r18, 0x10	; 16
    79a8:	32 e0       	ldi	r19, 0x02	; 2
    79aa:	f8 01       	movw	r30, r16
    79ac:	b7 fe       	sbrs	r11, 7
    79ae:	07 c0       	rjmp	.+14     	; 0x79be <vfprintf+0x2a6>
    79b0:	60 81       	ld	r22, Z
    79b2:	71 81       	ldd	r23, Z+1	; 0x01
    79b4:	82 81       	ldd	r24, Z+2	; 0x02
    79b6:	93 81       	ldd	r25, Z+3	; 0x03
    79b8:	0c 5f       	subi	r16, 0xFC	; 252
    79ba:	1f 4f       	sbci	r17, 0xFF	; 255
    79bc:	06 c0       	rjmp	.+12     	; 0x79ca <vfprintf+0x2b2>
    79be:	60 81       	ld	r22, Z
    79c0:	71 81       	ldd	r23, Z+1	; 0x01
    79c2:	80 e0       	ldi	r24, 0x00	; 0
    79c4:	90 e0       	ldi	r25, 0x00	; 0
    79c6:	0e 5f       	subi	r16, 0xFE	; 254
    79c8:	1f 4f       	sbci	r17, 0xFF	; 255
    79ca:	a3 01       	movw	r20, r6
    79cc:	30 d2       	rcall	.+1120   	; 0x7e2e <__ultoa_invert>
    79ce:	88 2e       	mov	r8, r24
    79d0:	86 18       	sub	r8, r6
    79d2:	fb 2d       	mov	r31, r11
    79d4:	ff 77       	andi	r31, 0x7F	; 127
    79d6:	3f 2e       	mov	r3, r31
    79d8:	36 fe       	sbrs	r3, 6
    79da:	0d c0       	rjmp	.+26     	; 0x79f6 <vfprintf+0x2de>
    79dc:	23 2d       	mov	r18, r3
    79de:	2e 7f       	andi	r18, 0xFE	; 254
    79e0:	a2 2e       	mov	r10, r18
    79e2:	89 14       	cp	r8, r9
    79e4:	58 f4       	brcc	.+22     	; 0x79fc <vfprintf+0x2e4>
    79e6:	34 fe       	sbrs	r3, 4
    79e8:	0b c0       	rjmp	.+22     	; 0x7a00 <vfprintf+0x2e8>
    79ea:	32 fc       	sbrc	r3, 2
    79ec:	09 c0       	rjmp	.+18     	; 0x7a00 <vfprintf+0x2e8>
    79ee:	83 2d       	mov	r24, r3
    79f0:	8e 7e       	andi	r24, 0xEE	; 238
    79f2:	a8 2e       	mov	r10, r24
    79f4:	05 c0       	rjmp	.+10     	; 0x7a00 <vfprintf+0x2e8>
    79f6:	b8 2c       	mov	r11, r8
    79f8:	a3 2c       	mov	r10, r3
    79fa:	03 c0       	rjmp	.+6      	; 0x7a02 <vfprintf+0x2ea>
    79fc:	b8 2c       	mov	r11, r8
    79fe:	01 c0       	rjmp	.+2      	; 0x7a02 <vfprintf+0x2ea>
    7a00:	b9 2c       	mov	r11, r9
    7a02:	a4 fe       	sbrs	r10, 4
    7a04:	0f c0       	rjmp	.+30     	; 0x7a24 <vfprintf+0x30c>
    7a06:	fe 01       	movw	r30, r28
    7a08:	e8 0d       	add	r30, r8
    7a0a:	f1 1d       	adc	r31, r1
    7a0c:	80 81       	ld	r24, Z
    7a0e:	80 33       	cpi	r24, 0x30	; 48
    7a10:	21 f4       	brne	.+8      	; 0x7a1a <vfprintf+0x302>
    7a12:	9a 2d       	mov	r25, r10
    7a14:	99 7e       	andi	r25, 0xE9	; 233
    7a16:	a9 2e       	mov	r10, r25
    7a18:	09 c0       	rjmp	.+18     	; 0x7a2c <vfprintf+0x314>
    7a1a:	a2 fe       	sbrs	r10, 2
    7a1c:	06 c0       	rjmp	.+12     	; 0x7a2a <vfprintf+0x312>
    7a1e:	b3 94       	inc	r11
    7a20:	b3 94       	inc	r11
    7a22:	04 c0       	rjmp	.+8      	; 0x7a2c <vfprintf+0x314>
    7a24:	8a 2d       	mov	r24, r10
    7a26:	86 78       	andi	r24, 0x86	; 134
    7a28:	09 f0       	breq	.+2      	; 0x7a2c <vfprintf+0x314>
    7a2a:	b3 94       	inc	r11
    7a2c:	a3 fc       	sbrc	r10, 3
    7a2e:	10 c0       	rjmp	.+32     	; 0x7a50 <vfprintf+0x338>
    7a30:	a0 fe       	sbrs	r10, 0
    7a32:	06 c0       	rjmp	.+12     	; 0x7a40 <vfprintf+0x328>
    7a34:	b2 14       	cp	r11, r2
    7a36:	80 f4       	brcc	.+32     	; 0x7a58 <vfprintf+0x340>
    7a38:	28 0c       	add	r2, r8
    7a3a:	92 2c       	mov	r9, r2
    7a3c:	9b 18       	sub	r9, r11
    7a3e:	0d c0       	rjmp	.+26     	; 0x7a5a <vfprintf+0x342>
    7a40:	b2 14       	cp	r11, r2
    7a42:	58 f4       	brcc	.+22     	; 0x7a5a <vfprintf+0x342>
    7a44:	b6 01       	movw	r22, r12
    7a46:	80 e2       	ldi	r24, 0x20	; 32
    7a48:	90 e0       	ldi	r25, 0x00	; 0
    7a4a:	b5 d1       	rcall	.+874    	; 0x7db6 <fputc>
    7a4c:	b3 94       	inc	r11
    7a4e:	f8 cf       	rjmp	.-16     	; 0x7a40 <vfprintf+0x328>
    7a50:	b2 14       	cp	r11, r2
    7a52:	18 f4       	brcc	.+6      	; 0x7a5a <vfprintf+0x342>
    7a54:	2b 18       	sub	r2, r11
    7a56:	02 c0       	rjmp	.+4      	; 0x7a5c <vfprintf+0x344>
    7a58:	98 2c       	mov	r9, r8
    7a5a:	21 2c       	mov	r2, r1
    7a5c:	a4 fe       	sbrs	r10, 4
    7a5e:	0f c0       	rjmp	.+30     	; 0x7a7e <vfprintf+0x366>
    7a60:	b6 01       	movw	r22, r12
    7a62:	80 e3       	ldi	r24, 0x30	; 48
    7a64:	90 e0       	ldi	r25, 0x00	; 0
    7a66:	a7 d1       	rcall	.+846    	; 0x7db6 <fputc>
    7a68:	a2 fe       	sbrs	r10, 2
    7a6a:	16 c0       	rjmp	.+44     	; 0x7a98 <vfprintf+0x380>
    7a6c:	a1 fc       	sbrc	r10, 1
    7a6e:	03 c0       	rjmp	.+6      	; 0x7a76 <vfprintf+0x35e>
    7a70:	88 e7       	ldi	r24, 0x78	; 120
    7a72:	90 e0       	ldi	r25, 0x00	; 0
    7a74:	02 c0       	rjmp	.+4      	; 0x7a7a <vfprintf+0x362>
    7a76:	88 e5       	ldi	r24, 0x58	; 88
    7a78:	90 e0       	ldi	r25, 0x00	; 0
    7a7a:	b6 01       	movw	r22, r12
    7a7c:	0c c0       	rjmp	.+24     	; 0x7a96 <vfprintf+0x37e>
    7a7e:	8a 2d       	mov	r24, r10
    7a80:	86 78       	andi	r24, 0x86	; 134
    7a82:	51 f0       	breq	.+20     	; 0x7a98 <vfprintf+0x380>
    7a84:	a1 fe       	sbrs	r10, 1
    7a86:	02 c0       	rjmp	.+4      	; 0x7a8c <vfprintf+0x374>
    7a88:	8b e2       	ldi	r24, 0x2B	; 43
    7a8a:	01 c0       	rjmp	.+2      	; 0x7a8e <vfprintf+0x376>
    7a8c:	80 e2       	ldi	r24, 0x20	; 32
    7a8e:	a7 fc       	sbrc	r10, 7
    7a90:	8d e2       	ldi	r24, 0x2D	; 45
    7a92:	b6 01       	movw	r22, r12
    7a94:	90 e0       	ldi	r25, 0x00	; 0
    7a96:	8f d1       	rcall	.+798    	; 0x7db6 <fputc>
    7a98:	89 14       	cp	r8, r9
    7a9a:	30 f4       	brcc	.+12     	; 0x7aa8 <vfprintf+0x390>
    7a9c:	b6 01       	movw	r22, r12
    7a9e:	80 e3       	ldi	r24, 0x30	; 48
    7aa0:	90 e0       	ldi	r25, 0x00	; 0
    7aa2:	89 d1       	rcall	.+786    	; 0x7db6 <fputc>
    7aa4:	9a 94       	dec	r9
    7aa6:	f8 cf       	rjmp	.-16     	; 0x7a98 <vfprintf+0x380>
    7aa8:	8a 94       	dec	r8
    7aaa:	f3 01       	movw	r30, r6
    7aac:	e8 0d       	add	r30, r8
    7aae:	f1 1d       	adc	r31, r1
    7ab0:	80 81       	ld	r24, Z
    7ab2:	b6 01       	movw	r22, r12
    7ab4:	90 e0       	ldi	r25, 0x00	; 0
    7ab6:	7f d1       	rcall	.+766    	; 0x7db6 <fputc>
    7ab8:	81 10       	cpse	r8, r1
    7aba:	f6 cf       	rjmp	.-20     	; 0x7aa8 <vfprintf+0x390>
    7abc:	22 20       	and	r2, r2
    7abe:	09 f4       	brne	.+2      	; 0x7ac2 <vfprintf+0x3aa>
    7ac0:	4e ce       	rjmp	.-868    	; 0x775e <vfprintf+0x46>
    7ac2:	b6 01       	movw	r22, r12
    7ac4:	80 e2       	ldi	r24, 0x20	; 32
    7ac6:	90 e0       	ldi	r25, 0x00	; 0
    7ac8:	76 d1       	rcall	.+748    	; 0x7db6 <fputc>
    7aca:	2a 94       	dec	r2
    7acc:	f7 cf       	rjmp	.-18     	; 0x7abc <vfprintf+0x3a4>
    7ace:	f6 01       	movw	r30, r12
    7ad0:	86 81       	ldd	r24, Z+6	; 0x06
    7ad2:	97 81       	ldd	r25, Z+7	; 0x07
    7ad4:	02 c0       	rjmp	.+4      	; 0x7ada <vfprintf+0x3c2>
    7ad6:	8f ef       	ldi	r24, 0xFF	; 255
    7ad8:	9f ef       	ldi	r25, 0xFF	; 255
    7ada:	2b 96       	adiw	r28, 0x0b	; 11
    7adc:	cd bf       	out	0x3d, r28	; 61
    7ade:	de bf       	out	0x3e, r29	; 62
    7ae0:	df 91       	pop	r29
    7ae2:	cf 91       	pop	r28
    7ae4:	1f 91       	pop	r17
    7ae6:	0f 91       	pop	r16
    7ae8:	ff 90       	pop	r15
    7aea:	ef 90       	pop	r14
    7aec:	df 90       	pop	r13
    7aee:	cf 90       	pop	r12
    7af0:	bf 90       	pop	r11
    7af2:	af 90       	pop	r10
    7af4:	9f 90       	pop	r9
    7af6:	8f 90       	pop	r8
    7af8:	7f 90       	pop	r7
    7afa:	6f 90       	pop	r6
    7afc:	5f 90       	pop	r5
    7afe:	4f 90       	pop	r4
    7b00:	3f 90       	pop	r3
    7b02:	2f 90       	pop	r2
    7b04:	08 95       	ret

00007b06 <calloc>:
    7b06:	0f 93       	push	r16
    7b08:	1f 93       	push	r17
    7b0a:	cf 93       	push	r28
    7b0c:	df 93       	push	r29
    7b0e:	86 9f       	mul	r24, r22
    7b10:	80 01       	movw	r16, r0
    7b12:	87 9f       	mul	r24, r23
    7b14:	10 0d       	add	r17, r0
    7b16:	96 9f       	mul	r25, r22
    7b18:	10 0d       	add	r17, r0
    7b1a:	11 24       	eor	r1, r1
    7b1c:	c8 01       	movw	r24, r16
    7b1e:	0d d0       	rcall	.+26     	; 0x7b3a <malloc>
    7b20:	ec 01       	movw	r28, r24
    7b22:	00 97       	sbiw	r24, 0x00	; 0
    7b24:	21 f0       	breq	.+8      	; 0x7b2e <calloc+0x28>
    7b26:	a8 01       	movw	r20, r16
    7b28:	60 e0       	ldi	r22, 0x00	; 0
    7b2a:	70 e0       	ldi	r23, 0x00	; 0
    7b2c:	32 d1       	rcall	.+612    	; 0x7d92 <memset>
    7b2e:	ce 01       	movw	r24, r28
    7b30:	df 91       	pop	r29
    7b32:	cf 91       	pop	r28
    7b34:	1f 91       	pop	r17
    7b36:	0f 91       	pop	r16
    7b38:	08 95       	ret

00007b3a <malloc>:
    7b3a:	0f 93       	push	r16
    7b3c:	1f 93       	push	r17
    7b3e:	cf 93       	push	r28
    7b40:	df 93       	push	r29
    7b42:	82 30       	cpi	r24, 0x02	; 2
    7b44:	91 05       	cpc	r25, r1
    7b46:	10 f4       	brcc	.+4      	; 0x7b4c <malloc+0x12>
    7b48:	82 e0       	ldi	r24, 0x02	; 2
    7b4a:	90 e0       	ldi	r25, 0x00	; 0
    7b4c:	e0 91 af 25 	lds	r30, 0x25AF	; 0x8025af <__flp>
    7b50:	f0 91 b0 25 	lds	r31, 0x25B0	; 0x8025b0 <__flp+0x1>
    7b54:	20 e0       	ldi	r18, 0x00	; 0
    7b56:	30 e0       	ldi	r19, 0x00	; 0
    7b58:	a0 e0       	ldi	r26, 0x00	; 0
    7b5a:	b0 e0       	ldi	r27, 0x00	; 0
    7b5c:	30 97       	sbiw	r30, 0x00	; 0
    7b5e:	19 f1       	breq	.+70     	; 0x7ba6 <malloc+0x6c>
    7b60:	40 81       	ld	r20, Z
    7b62:	51 81       	ldd	r21, Z+1	; 0x01
    7b64:	02 81       	ldd	r16, Z+2	; 0x02
    7b66:	13 81       	ldd	r17, Z+3	; 0x03
    7b68:	48 17       	cp	r20, r24
    7b6a:	59 07       	cpc	r21, r25
    7b6c:	c8 f0       	brcs	.+50     	; 0x7ba0 <malloc+0x66>
    7b6e:	84 17       	cp	r24, r20
    7b70:	95 07       	cpc	r25, r21
    7b72:	69 f4       	brne	.+26     	; 0x7b8e <malloc+0x54>
    7b74:	10 97       	sbiw	r26, 0x00	; 0
    7b76:	31 f0       	breq	.+12     	; 0x7b84 <malloc+0x4a>
    7b78:	12 96       	adiw	r26, 0x02	; 2
    7b7a:	0c 93       	st	X, r16
    7b7c:	12 97       	sbiw	r26, 0x02	; 2
    7b7e:	13 96       	adiw	r26, 0x03	; 3
    7b80:	1c 93       	st	X, r17
    7b82:	27 c0       	rjmp	.+78     	; 0x7bd2 <malloc+0x98>
    7b84:	00 93 af 25 	sts	0x25AF, r16	; 0x8025af <__flp>
    7b88:	10 93 b0 25 	sts	0x25B0, r17	; 0x8025b0 <__flp+0x1>
    7b8c:	22 c0       	rjmp	.+68     	; 0x7bd2 <malloc+0x98>
    7b8e:	21 15       	cp	r18, r1
    7b90:	31 05       	cpc	r19, r1
    7b92:	19 f0       	breq	.+6      	; 0x7b9a <malloc+0x60>
    7b94:	42 17       	cp	r20, r18
    7b96:	53 07       	cpc	r21, r19
    7b98:	18 f4       	brcc	.+6      	; 0x7ba0 <malloc+0x66>
    7b9a:	9a 01       	movw	r18, r20
    7b9c:	bd 01       	movw	r22, r26
    7b9e:	ef 01       	movw	r28, r30
    7ba0:	df 01       	movw	r26, r30
    7ba2:	f8 01       	movw	r30, r16
    7ba4:	db cf       	rjmp	.-74     	; 0x7b5c <malloc+0x22>
    7ba6:	21 15       	cp	r18, r1
    7ba8:	31 05       	cpc	r19, r1
    7baa:	f9 f0       	breq	.+62     	; 0x7bea <malloc+0xb0>
    7bac:	28 1b       	sub	r18, r24
    7bae:	39 0b       	sbc	r19, r25
    7bb0:	24 30       	cpi	r18, 0x04	; 4
    7bb2:	31 05       	cpc	r19, r1
    7bb4:	80 f4       	brcc	.+32     	; 0x7bd6 <malloc+0x9c>
    7bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    7bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    7bba:	61 15       	cp	r22, r1
    7bbc:	71 05       	cpc	r23, r1
    7bbe:	21 f0       	breq	.+8      	; 0x7bc8 <malloc+0x8e>
    7bc0:	fb 01       	movw	r30, r22
    7bc2:	82 83       	std	Z+2, r24	; 0x02
    7bc4:	93 83       	std	Z+3, r25	; 0x03
    7bc6:	04 c0       	rjmp	.+8      	; 0x7bd0 <malloc+0x96>
    7bc8:	80 93 af 25 	sts	0x25AF, r24	; 0x8025af <__flp>
    7bcc:	90 93 b0 25 	sts	0x25B0, r25	; 0x8025b0 <__flp+0x1>
    7bd0:	fe 01       	movw	r30, r28
    7bd2:	32 96       	adiw	r30, 0x02	; 2
    7bd4:	44 c0       	rjmp	.+136    	; 0x7c5e <malloc+0x124>
    7bd6:	fe 01       	movw	r30, r28
    7bd8:	e2 0f       	add	r30, r18
    7bda:	f3 1f       	adc	r31, r19
    7bdc:	81 93       	st	Z+, r24
    7bde:	91 93       	st	Z+, r25
    7be0:	22 50       	subi	r18, 0x02	; 2
    7be2:	31 09       	sbc	r19, r1
    7be4:	28 83       	st	Y, r18
    7be6:	39 83       	std	Y+1, r19	; 0x01
    7be8:	3a c0       	rjmp	.+116    	; 0x7c5e <malloc+0x124>
    7bea:	20 91 ad 25 	lds	r18, 0x25AD	; 0x8025ad <__brkval>
    7bee:	30 91 ae 25 	lds	r19, 0x25AE	; 0x8025ae <__brkval+0x1>
    7bf2:	23 2b       	or	r18, r19
    7bf4:	41 f4       	brne	.+16     	; 0x7c06 <malloc+0xcc>
    7bf6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    7bfa:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    7bfe:	20 93 ad 25 	sts	0x25AD, r18	; 0x8025ad <__brkval>
    7c02:	30 93 ae 25 	sts	0x25AE, r19	; 0x8025ae <__brkval+0x1>
    7c06:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    7c0a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    7c0e:	21 15       	cp	r18, r1
    7c10:	31 05       	cpc	r19, r1
    7c12:	41 f4       	brne	.+16     	; 0x7c24 <malloc+0xea>
    7c14:	2d b7       	in	r18, 0x3d	; 61
    7c16:	3e b7       	in	r19, 0x3e	; 62
    7c18:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    7c1c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    7c20:	24 1b       	sub	r18, r20
    7c22:	35 0b       	sbc	r19, r21
    7c24:	e0 91 ad 25 	lds	r30, 0x25AD	; 0x8025ad <__brkval>
    7c28:	f0 91 ae 25 	lds	r31, 0x25AE	; 0x8025ae <__brkval+0x1>
    7c2c:	e2 17       	cp	r30, r18
    7c2e:	f3 07       	cpc	r31, r19
    7c30:	a0 f4       	brcc	.+40     	; 0x7c5a <malloc+0x120>
    7c32:	2e 1b       	sub	r18, r30
    7c34:	3f 0b       	sbc	r19, r31
    7c36:	28 17       	cp	r18, r24
    7c38:	39 07       	cpc	r19, r25
    7c3a:	78 f0       	brcs	.+30     	; 0x7c5a <malloc+0x120>
    7c3c:	ac 01       	movw	r20, r24
    7c3e:	4e 5f       	subi	r20, 0xFE	; 254
    7c40:	5f 4f       	sbci	r21, 0xFF	; 255
    7c42:	24 17       	cp	r18, r20
    7c44:	35 07       	cpc	r19, r21
    7c46:	48 f0       	brcs	.+18     	; 0x7c5a <malloc+0x120>
    7c48:	4e 0f       	add	r20, r30
    7c4a:	5f 1f       	adc	r21, r31
    7c4c:	40 93 ad 25 	sts	0x25AD, r20	; 0x8025ad <__brkval>
    7c50:	50 93 ae 25 	sts	0x25AE, r21	; 0x8025ae <__brkval+0x1>
    7c54:	81 93       	st	Z+, r24
    7c56:	91 93       	st	Z+, r25
    7c58:	02 c0       	rjmp	.+4      	; 0x7c5e <malloc+0x124>
    7c5a:	e0 e0       	ldi	r30, 0x00	; 0
    7c5c:	f0 e0       	ldi	r31, 0x00	; 0
    7c5e:	cf 01       	movw	r24, r30
    7c60:	df 91       	pop	r29
    7c62:	cf 91       	pop	r28
    7c64:	1f 91       	pop	r17
    7c66:	0f 91       	pop	r16
    7c68:	08 95       	ret

00007c6a <free>:
    7c6a:	cf 93       	push	r28
    7c6c:	df 93       	push	r29
    7c6e:	00 97       	sbiw	r24, 0x00	; 0
    7c70:	09 f4       	brne	.+2      	; 0x7c74 <free+0xa>
    7c72:	81 c0       	rjmp	.+258    	; 0x7d76 <free+0x10c>
    7c74:	fc 01       	movw	r30, r24
    7c76:	32 97       	sbiw	r30, 0x02	; 2
    7c78:	12 82       	std	Z+2, r1	; 0x02
    7c7a:	13 82       	std	Z+3, r1	; 0x03
    7c7c:	a0 91 af 25 	lds	r26, 0x25AF	; 0x8025af <__flp>
    7c80:	b0 91 b0 25 	lds	r27, 0x25B0	; 0x8025b0 <__flp+0x1>
    7c84:	10 97       	sbiw	r26, 0x00	; 0
    7c86:	81 f4       	brne	.+32     	; 0x7ca8 <free+0x3e>
    7c88:	20 81       	ld	r18, Z
    7c8a:	31 81       	ldd	r19, Z+1	; 0x01
    7c8c:	82 0f       	add	r24, r18
    7c8e:	93 1f       	adc	r25, r19
    7c90:	20 91 ad 25 	lds	r18, 0x25AD	; 0x8025ad <__brkval>
    7c94:	30 91 ae 25 	lds	r19, 0x25AE	; 0x8025ae <__brkval+0x1>
    7c98:	28 17       	cp	r18, r24
    7c9a:	39 07       	cpc	r19, r25
    7c9c:	51 f5       	brne	.+84     	; 0x7cf2 <free+0x88>
    7c9e:	e0 93 ad 25 	sts	0x25AD, r30	; 0x8025ad <__brkval>
    7ca2:	f0 93 ae 25 	sts	0x25AE, r31	; 0x8025ae <__brkval+0x1>
    7ca6:	67 c0       	rjmp	.+206    	; 0x7d76 <free+0x10c>
    7ca8:	ed 01       	movw	r28, r26
    7caa:	20 e0       	ldi	r18, 0x00	; 0
    7cac:	30 e0       	ldi	r19, 0x00	; 0
    7cae:	ce 17       	cp	r28, r30
    7cb0:	df 07       	cpc	r29, r31
    7cb2:	40 f4       	brcc	.+16     	; 0x7cc4 <free+0x5a>
    7cb4:	4a 81       	ldd	r20, Y+2	; 0x02
    7cb6:	5b 81       	ldd	r21, Y+3	; 0x03
    7cb8:	9e 01       	movw	r18, r28
    7cba:	41 15       	cp	r20, r1
    7cbc:	51 05       	cpc	r21, r1
    7cbe:	f1 f0       	breq	.+60     	; 0x7cfc <free+0x92>
    7cc0:	ea 01       	movw	r28, r20
    7cc2:	f5 cf       	rjmp	.-22     	; 0x7cae <free+0x44>
    7cc4:	c2 83       	std	Z+2, r28	; 0x02
    7cc6:	d3 83       	std	Z+3, r29	; 0x03
    7cc8:	40 81       	ld	r20, Z
    7cca:	51 81       	ldd	r21, Z+1	; 0x01
    7ccc:	84 0f       	add	r24, r20
    7cce:	95 1f       	adc	r25, r21
    7cd0:	c8 17       	cp	r28, r24
    7cd2:	d9 07       	cpc	r29, r25
    7cd4:	59 f4       	brne	.+22     	; 0x7cec <free+0x82>
    7cd6:	88 81       	ld	r24, Y
    7cd8:	99 81       	ldd	r25, Y+1	; 0x01
    7cda:	84 0f       	add	r24, r20
    7cdc:	95 1f       	adc	r25, r21
    7cde:	02 96       	adiw	r24, 0x02	; 2
    7ce0:	80 83       	st	Z, r24
    7ce2:	91 83       	std	Z+1, r25	; 0x01
    7ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    7ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    7ce8:	82 83       	std	Z+2, r24	; 0x02
    7cea:	93 83       	std	Z+3, r25	; 0x03
    7cec:	21 15       	cp	r18, r1
    7cee:	31 05       	cpc	r19, r1
    7cf0:	29 f4       	brne	.+10     	; 0x7cfc <free+0x92>
    7cf2:	e0 93 af 25 	sts	0x25AF, r30	; 0x8025af <__flp>
    7cf6:	f0 93 b0 25 	sts	0x25B0, r31	; 0x8025b0 <__flp+0x1>
    7cfa:	3d c0       	rjmp	.+122    	; 0x7d76 <free+0x10c>
    7cfc:	e9 01       	movw	r28, r18
    7cfe:	ea 83       	std	Y+2, r30	; 0x02
    7d00:	fb 83       	std	Y+3, r31	; 0x03
    7d02:	49 91       	ld	r20, Y+
    7d04:	59 91       	ld	r21, Y+
    7d06:	c4 0f       	add	r28, r20
    7d08:	d5 1f       	adc	r29, r21
    7d0a:	ec 17       	cp	r30, r28
    7d0c:	fd 07       	cpc	r31, r29
    7d0e:	61 f4       	brne	.+24     	; 0x7d28 <free+0xbe>
    7d10:	80 81       	ld	r24, Z
    7d12:	91 81       	ldd	r25, Z+1	; 0x01
    7d14:	84 0f       	add	r24, r20
    7d16:	95 1f       	adc	r25, r21
    7d18:	02 96       	adiw	r24, 0x02	; 2
    7d1a:	e9 01       	movw	r28, r18
    7d1c:	88 83       	st	Y, r24
    7d1e:	99 83       	std	Y+1, r25	; 0x01
    7d20:	82 81       	ldd	r24, Z+2	; 0x02
    7d22:	93 81       	ldd	r25, Z+3	; 0x03
    7d24:	8a 83       	std	Y+2, r24	; 0x02
    7d26:	9b 83       	std	Y+3, r25	; 0x03
    7d28:	e0 e0       	ldi	r30, 0x00	; 0
    7d2a:	f0 e0       	ldi	r31, 0x00	; 0
    7d2c:	12 96       	adiw	r26, 0x02	; 2
    7d2e:	8d 91       	ld	r24, X+
    7d30:	9c 91       	ld	r25, X
    7d32:	13 97       	sbiw	r26, 0x03	; 3
    7d34:	00 97       	sbiw	r24, 0x00	; 0
    7d36:	19 f0       	breq	.+6      	; 0x7d3e <free+0xd4>
    7d38:	fd 01       	movw	r30, r26
    7d3a:	dc 01       	movw	r26, r24
    7d3c:	f7 cf       	rjmp	.-18     	; 0x7d2c <free+0xc2>
    7d3e:	8d 91       	ld	r24, X+
    7d40:	9c 91       	ld	r25, X
    7d42:	11 97       	sbiw	r26, 0x01	; 1
    7d44:	9d 01       	movw	r18, r26
    7d46:	2e 5f       	subi	r18, 0xFE	; 254
    7d48:	3f 4f       	sbci	r19, 0xFF	; 255
    7d4a:	82 0f       	add	r24, r18
    7d4c:	93 1f       	adc	r25, r19
    7d4e:	20 91 ad 25 	lds	r18, 0x25AD	; 0x8025ad <__brkval>
    7d52:	30 91 ae 25 	lds	r19, 0x25AE	; 0x8025ae <__brkval+0x1>
    7d56:	28 17       	cp	r18, r24
    7d58:	39 07       	cpc	r19, r25
    7d5a:	69 f4       	brne	.+26     	; 0x7d76 <free+0x10c>
    7d5c:	30 97       	sbiw	r30, 0x00	; 0
    7d5e:	29 f4       	brne	.+10     	; 0x7d6a <free+0x100>
    7d60:	10 92 af 25 	sts	0x25AF, r1	; 0x8025af <__flp>
    7d64:	10 92 b0 25 	sts	0x25B0, r1	; 0x8025b0 <__flp+0x1>
    7d68:	02 c0       	rjmp	.+4      	; 0x7d6e <free+0x104>
    7d6a:	12 82       	std	Z+2, r1	; 0x02
    7d6c:	13 82       	std	Z+3, r1	; 0x03
    7d6e:	a0 93 ad 25 	sts	0x25AD, r26	; 0x8025ad <__brkval>
    7d72:	b0 93 ae 25 	sts	0x25AE, r27	; 0x8025ae <__brkval+0x1>
    7d76:	df 91       	pop	r29
    7d78:	cf 91       	pop	r28
    7d7a:	08 95       	ret

00007d7c <strnlen_P>:
    7d7c:	fc 01       	movw	r30, r24
    7d7e:	05 90       	lpm	r0, Z+
    7d80:	61 50       	subi	r22, 0x01	; 1
    7d82:	70 40       	sbci	r23, 0x00	; 0
    7d84:	01 10       	cpse	r0, r1
    7d86:	d8 f7       	brcc	.-10     	; 0x7d7e <strnlen_P+0x2>
    7d88:	80 95       	com	r24
    7d8a:	90 95       	com	r25
    7d8c:	8e 0f       	add	r24, r30
    7d8e:	9f 1f       	adc	r25, r31
    7d90:	08 95       	ret

00007d92 <memset>:
    7d92:	dc 01       	movw	r26, r24
    7d94:	01 c0       	rjmp	.+2      	; 0x7d98 <memset+0x6>
    7d96:	6d 93       	st	X+, r22
    7d98:	41 50       	subi	r20, 0x01	; 1
    7d9a:	50 40       	sbci	r21, 0x00	; 0
    7d9c:	e0 f7       	brcc	.-8      	; 0x7d96 <memset+0x4>
    7d9e:	08 95       	ret

00007da0 <strnlen>:
    7da0:	fc 01       	movw	r30, r24
    7da2:	61 50       	subi	r22, 0x01	; 1
    7da4:	70 40       	sbci	r23, 0x00	; 0
    7da6:	01 90       	ld	r0, Z+
    7da8:	01 10       	cpse	r0, r1
    7daa:	d8 f7       	brcc	.-10     	; 0x7da2 <strnlen+0x2>
    7dac:	80 95       	com	r24
    7dae:	90 95       	com	r25
    7db0:	8e 0f       	add	r24, r30
    7db2:	9f 1f       	adc	r25, r31
    7db4:	08 95       	ret

00007db6 <fputc>:
    7db6:	0f 93       	push	r16
    7db8:	1f 93       	push	r17
    7dba:	cf 93       	push	r28
    7dbc:	df 93       	push	r29
    7dbe:	fb 01       	movw	r30, r22
    7dc0:	23 81       	ldd	r18, Z+3	; 0x03
    7dc2:	21 fd       	sbrc	r18, 1
    7dc4:	03 c0       	rjmp	.+6      	; 0x7dcc <fputc+0x16>
    7dc6:	8f ef       	ldi	r24, 0xFF	; 255
    7dc8:	9f ef       	ldi	r25, 0xFF	; 255
    7dca:	2c c0       	rjmp	.+88     	; 0x7e24 <fputc+0x6e>
    7dcc:	22 ff       	sbrs	r18, 2
    7dce:	16 c0       	rjmp	.+44     	; 0x7dfc <fputc+0x46>
    7dd0:	46 81       	ldd	r20, Z+6	; 0x06
    7dd2:	57 81       	ldd	r21, Z+7	; 0x07
    7dd4:	24 81       	ldd	r18, Z+4	; 0x04
    7dd6:	35 81       	ldd	r19, Z+5	; 0x05
    7dd8:	42 17       	cp	r20, r18
    7dda:	53 07       	cpc	r21, r19
    7ddc:	44 f4       	brge	.+16     	; 0x7dee <fputc+0x38>
    7dde:	a0 81       	ld	r26, Z
    7de0:	b1 81       	ldd	r27, Z+1	; 0x01
    7de2:	9d 01       	movw	r18, r26
    7de4:	2f 5f       	subi	r18, 0xFF	; 255
    7de6:	3f 4f       	sbci	r19, 0xFF	; 255
    7de8:	20 83       	st	Z, r18
    7dea:	31 83       	std	Z+1, r19	; 0x01
    7dec:	8c 93       	st	X, r24
    7dee:	26 81       	ldd	r18, Z+6	; 0x06
    7df0:	37 81       	ldd	r19, Z+7	; 0x07
    7df2:	2f 5f       	subi	r18, 0xFF	; 255
    7df4:	3f 4f       	sbci	r19, 0xFF	; 255
    7df6:	26 83       	std	Z+6, r18	; 0x06
    7df8:	37 83       	std	Z+7, r19	; 0x07
    7dfa:	14 c0       	rjmp	.+40     	; 0x7e24 <fputc+0x6e>
    7dfc:	8b 01       	movw	r16, r22
    7dfe:	ec 01       	movw	r28, r24
    7e00:	fb 01       	movw	r30, r22
    7e02:	00 84       	ldd	r0, Z+8	; 0x08
    7e04:	f1 85       	ldd	r31, Z+9	; 0x09
    7e06:	e0 2d       	mov	r30, r0
    7e08:	19 95       	eicall
    7e0a:	89 2b       	or	r24, r25
    7e0c:	e1 f6       	brne	.-72     	; 0x7dc6 <fputc+0x10>
    7e0e:	d8 01       	movw	r26, r16
    7e10:	16 96       	adiw	r26, 0x06	; 6
    7e12:	8d 91       	ld	r24, X+
    7e14:	9c 91       	ld	r25, X
    7e16:	17 97       	sbiw	r26, 0x07	; 7
    7e18:	01 96       	adiw	r24, 0x01	; 1
    7e1a:	16 96       	adiw	r26, 0x06	; 6
    7e1c:	8d 93       	st	X+, r24
    7e1e:	9c 93       	st	X, r25
    7e20:	17 97       	sbiw	r26, 0x07	; 7
    7e22:	ce 01       	movw	r24, r28
    7e24:	df 91       	pop	r29
    7e26:	cf 91       	pop	r28
    7e28:	1f 91       	pop	r17
    7e2a:	0f 91       	pop	r16
    7e2c:	08 95       	ret

00007e2e <__ultoa_invert>:
    7e2e:	fa 01       	movw	r30, r20
    7e30:	aa 27       	eor	r26, r26
    7e32:	28 30       	cpi	r18, 0x08	; 8
    7e34:	51 f1       	breq	.+84     	; 0x7e8a <__ultoa_invert+0x5c>
    7e36:	20 31       	cpi	r18, 0x10	; 16
    7e38:	81 f1       	breq	.+96     	; 0x7e9a <__ultoa_invert+0x6c>
    7e3a:	e8 94       	clt
    7e3c:	6f 93       	push	r22
    7e3e:	6e 7f       	andi	r22, 0xFE	; 254
    7e40:	6e 5f       	subi	r22, 0xFE	; 254
    7e42:	7f 4f       	sbci	r23, 0xFF	; 255
    7e44:	8f 4f       	sbci	r24, 0xFF	; 255
    7e46:	9f 4f       	sbci	r25, 0xFF	; 255
    7e48:	af 4f       	sbci	r26, 0xFF	; 255
    7e4a:	b1 e0       	ldi	r27, 0x01	; 1
    7e4c:	3e d0       	rcall	.+124    	; 0x7eca <__ultoa_invert+0x9c>
    7e4e:	b4 e0       	ldi	r27, 0x04	; 4
    7e50:	3c d0       	rcall	.+120    	; 0x7eca <__ultoa_invert+0x9c>
    7e52:	67 0f       	add	r22, r23
    7e54:	78 1f       	adc	r23, r24
    7e56:	89 1f       	adc	r24, r25
    7e58:	9a 1f       	adc	r25, r26
    7e5a:	a1 1d       	adc	r26, r1
    7e5c:	68 0f       	add	r22, r24
    7e5e:	79 1f       	adc	r23, r25
    7e60:	8a 1f       	adc	r24, r26
    7e62:	91 1d       	adc	r25, r1
    7e64:	a1 1d       	adc	r26, r1
    7e66:	6a 0f       	add	r22, r26
    7e68:	71 1d       	adc	r23, r1
    7e6a:	81 1d       	adc	r24, r1
    7e6c:	91 1d       	adc	r25, r1
    7e6e:	a1 1d       	adc	r26, r1
    7e70:	20 d0       	rcall	.+64     	; 0x7eb2 <__ultoa_invert+0x84>
    7e72:	09 f4       	brne	.+2      	; 0x7e76 <__ultoa_invert+0x48>
    7e74:	68 94       	set
    7e76:	3f 91       	pop	r19
    7e78:	2a e0       	ldi	r18, 0x0A	; 10
    7e7a:	26 9f       	mul	r18, r22
    7e7c:	11 24       	eor	r1, r1
    7e7e:	30 19       	sub	r19, r0
    7e80:	30 5d       	subi	r19, 0xD0	; 208
    7e82:	31 93       	st	Z+, r19
    7e84:	de f6       	brtc	.-74     	; 0x7e3c <__ultoa_invert+0xe>
    7e86:	cf 01       	movw	r24, r30
    7e88:	08 95       	ret
    7e8a:	46 2f       	mov	r20, r22
    7e8c:	47 70       	andi	r20, 0x07	; 7
    7e8e:	40 5d       	subi	r20, 0xD0	; 208
    7e90:	41 93       	st	Z+, r20
    7e92:	b3 e0       	ldi	r27, 0x03	; 3
    7e94:	0f d0       	rcall	.+30     	; 0x7eb4 <__ultoa_invert+0x86>
    7e96:	c9 f7       	brne	.-14     	; 0x7e8a <__ultoa_invert+0x5c>
    7e98:	f6 cf       	rjmp	.-20     	; 0x7e86 <__ultoa_invert+0x58>
    7e9a:	46 2f       	mov	r20, r22
    7e9c:	4f 70       	andi	r20, 0x0F	; 15
    7e9e:	40 5d       	subi	r20, 0xD0	; 208
    7ea0:	4a 33       	cpi	r20, 0x3A	; 58
    7ea2:	18 f0       	brcs	.+6      	; 0x7eaa <__ultoa_invert+0x7c>
    7ea4:	49 5d       	subi	r20, 0xD9	; 217
    7ea6:	31 fd       	sbrc	r19, 1
    7ea8:	40 52       	subi	r20, 0x20	; 32
    7eaa:	41 93       	st	Z+, r20
    7eac:	02 d0       	rcall	.+4      	; 0x7eb2 <__ultoa_invert+0x84>
    7eae:	a9 f7       	brne	.-22     	; 0x7e9a <__ultoa_invert+0x6c>
    7eb0:	ea cf       	rjmp	.-44     	; 0x7e86 <__ultoa_invert+0x58>
    7eb2:	b4 e0       	ldi	r27, 0x04	; 4
    7eb4:	a6 95       	lsr	r26
    7eb6:	97 95       	ror	r25
    7eb8:	87 95       	ror	r24
    7eba:	77 95       	ror	r23
    7ebc:	67 95       	ror	r22
    7ebe:	ba 95       	dec	r27
    7ec0:	c9 f7       	brne	.-14     	; 0x7eb4 <__ultoa_invert+0x86>
    7ec2:	00 97       	sbiw	r24, 0x00	; 0
    7ec4:	61 05       	cpc	r22, r1
    7ec6:	71 05       	cpc	r23, r1
    7ec8:	08 95       	ret
    7eca:	9b 01       	movw	r18, r22
    7ecc:	ac 01       	movw	r20, r24
    7ece:	0a 2e       	mov	r0, r26
    7ed0:	06 94       	lsr	r0
    7ed2:	57 95       	ror	r21
    7ed4:	47 95       	ror	r20
    7ed6:	37 95       	ror	r19
    7ed8:	27 95       	ror	r18
    7eda:	ba 95       	dec	r27
    7edc:	c9 f7       	brne	.-14     	; 0x7ed0 <__ultoa_invert+0xa2>
    7ede:	62 0f       	add	r22, r18
    7ee0:	73 1f       	adc	r23, r19
    7ee2:	84 1f       	adc	r24, r20
    7ee4:	95 1f       	adc	r25, r21
    7ee6:	a0 1d       	adc	r26, r0
    7ee8:	08 95       	ret

00007eea <_exit>:
    7eea:	f8 94       	cli

00007eec <__stop_program>:
    7eec:	ff cf       	rjmp	.-2      	; 0x7eec <__stop_program>
