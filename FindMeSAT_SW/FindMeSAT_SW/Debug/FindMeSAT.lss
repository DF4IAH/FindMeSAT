
FindMeSAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009faa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000006ec  00802000  00009faa  0000a03e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000439  008026ec  008026ec  0000a72c  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000a72a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000a788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a00  00000000  00000000  0000a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001b9ae  00000000  00000000  0000b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006a11  00000000  00000000  00026b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ef4d  00000000  00000000  0002d58f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002ab0  00000000  00000000  0003c4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003f7be  00000000  00000000  0003ef8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b2c9  00000000  00000000  0007e74a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b0  00000000  00000000  00089a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e4a0  00000000  00000000  0008a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__ctors_end>
       4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
       8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
       c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      10:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      14:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      18:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__vector_6>
      1c:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__vector_7>
      20:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__vector_8>
      24:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__vector_9>
      28:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      2c:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__vector_11>
      30:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      34:	0c 94 b8 2c 	jmp	0x5970	; 0x5970 <__vector_13>
      38:	0c 94 10 25 	jmp	0x4a20	; 0x4a20 <__vector_14>
      3c:	0c 94 3d 25 	jmp	0x4a7a	; 0x4a7a <__vector_15>
      40:	0c 94 6a 25 	jmp	0x4ad4	; 0x4ad4 <__vector_16>
      44:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__vector_17>
      48:	0c 94 c4 25 	jmp	0x4b88	; 0x4b88 <__vector_18>
      4c:	0c 94 f1 25 	jmp	0x4be2	; 0x4be2 <__vector_19>
      50:	0c 94 1e 26 	jmp	0x4c3c	; 0x4c3c <__vector_20>
      54:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__vector_21>
      58:	0c 94 78 26 	jmp	0x4cf0	; 0x4cf0 <__vector_22>
      5c:	0c 94 a5 26 	jmp	0x4d4a	; 0x4d4a <__vector_23>
      60:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      64:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      68:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      6c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      70:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      74:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      78:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      7c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      80:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      84:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      88:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      8c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      90:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      94:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      98:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      9c:	0c 94 39 22 	jmp	0x4472	; 0x4472 <__vector_39>
      a0:	0c 94 6b 22 	jmp	0x44d6	; 0x44d6 <__vector_40>
      a4:	0c 94 9d 22 	jmp	0x453a	; 0x453a <__vector_41>
      a8:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__vector_42>
      ac:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      b0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      b4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      b8:	0c 94 df 2c 	jmp	0x59be	; 0x59be <__vector_46>
      bc:	0c 94 94 28 	jmp	0x5128	; 0x5128 <__vector_47>
      c0:	0c 94 c1 28 	jmp	0x5182	; 0x5182 <__vector_48>
      c4:	0c 94 ee 28 	jmp	0x51dc	; 0x51dc <__vector_49>
      c8:	0c 94 1b 29 	jmp	0x5236	; 0x5236 <__vector_50>
      cc:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__vector_51>
      d0:	0c 94 75 29 	jmp	0x52ea	; 0x52ea <__vector_52>
      d4:	0c 94 a2 29 	jmp	0x5344	; 0x5344 <__vector_53>
      d8:	0c 94 cf 29 	jmp	0x539e	; 0x539e <__vector_54>
      dc:	0c 94 fc 29 	jmp	0x53f8	; 0x53f8 <__vector_55>
      e0:	0c 94 29 2a 	jmp	0x5452	; 0x5452 <__vector_56>
      e4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      e8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      ec:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      f0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      f4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      f8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
      fc:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     100:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     104:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     108:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     10c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     110:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     114:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     118:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     11c:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__vector_71>
     120:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__vector_72>
     124:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <__vector_73>
     128:	0c 94 07 22 	jmp	0x440e	; 0x440e <__vector_74>
     12c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     130:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     134:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__vector_77>
     138:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__vector_78>
     13c:	0c 94 2c 27 	jmp	0x4e58	; 0x4e58 <__vector_79>
     140:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <__vector_80>
     144:	0c 94 86 27 	jmp	0x4f0c	; 0x4f0c <__vector_81>
     148:	0c 94 b3 27 	jmp	0x4f66	; 0x4f66 <__vector_82>
     14c:	0c 94 e0 27 	jmp	0x4fc0	; 0x4fc0 <__vector_83>
     150:	0c 94 0d 28 	jmp	0x501a	; 0x501a <__vector_84>
     154:	0c 94 3a 28 	jmp	0x5074	; 0x5074 <__vector_85>
     158:	0c 94 67 28 	jmp	0x50ce	; 0x50ce <__vector_86>
     15c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     160:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     164:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     168:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     16c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     170:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     174:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     178:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     17c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     180:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     184:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     188:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     18c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     190:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     194:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     198:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     19c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1a0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1a4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1a8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1ac:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1b0:	0c 94 56 2a 	jmp	0x54ac	; 0x54ac <__vector_108>
     1b4:	0c 94 83 2a 	jmp	0x5506	; 0x5506 <__vector_109>
     1b8:	0c 94 b0 2a 	jmp	0x5560	; 0x5560 <__vector_110>
     1bc:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <__vector_111>
     1c0:	0c 94 0a 2b 	jmp	0x5614	; 0x5614 <__vector_112>
     1c4:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__vector_113>
     1c8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1cc:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1d0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1d4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1d8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1dc:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1e0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1e4:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1e8:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1ec:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1f0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__bad_interrupt>
     1f4:	0c 94 9c 33 	jmp	0x6738	; 0x6738 <__vector_125>
     1f8:	0c 94 56 34 	jmp	0x68ac	; 0x68ac <__vector_126>
     1fc:	7d 2e       	mov	r7, r29
     1fe:	80 2e       	mov	r8, r16
     200:	83 2e       	mov	r8, r19
     202:	86 2e       	mov	r8, r22
     204:	89 2e       	mov	r8, r25
     206:	8c 2e       	mov	r8, r28
     208:	8f 2e       	mov	r8, r31
     20a:	ce 35       	cpi	r28, 0x5E	; 94
     20c:	e1 35       	cpi	r30, 0x51	; 81
     20e:	f4 35       	cpi	r31, 0x54	; 84
     210:	07 36       	cpi	r16, 0x67	; 103
     212:	1a 36       	cpi	r17, 0x6A	; 106
     214:	2d 36       	cpi	r18, 0x6D	; 109
     216:	40 36       	cpi	r20, 0x60	; 96

00000218 <PM_SINE_IP>:
     218:	00 fd f9 f6 f3 f0 ec e9 e6 e3 df dc d9 d6 d2 cf     ................
     228:	00 fd fa f6 f3 f0 ed ea e6 e3 e0 dd da d7 d3 d0     ................
     238:	00 fd fa f7 f3 f0 ed ea e7 e4 e1 de da d7 d4 d1     ................
     248:	00 fd fa f7 f4 f1 ee eb e7 e4 e1 de db d8 d5 d2     ................
     258:	00 fd fa f7 f4 f1 ee eb e8 e5 e2 df dc d9 d6 d3     ................
     268:	00 fd fa f7 f4 f1 ee eb e8 e6 e3 e0 dd da d7 d4     ................
     278:	00 fd fa f7 f4 f2 ef ec e9 e6 e3 e0 dd db d8 d5     ................
     288:	00 fd fa f8 f5 f2 ef ec e9 e7 e4 e1 de db d9 d6     ................
     298:	00 fd fa f8 f5 f2 ef ed ea e7 e4 e2 df dc d9 d7     ................
     2a8:	00 fd fb f8 f5 f3 f0 ed ea e8 e5 e2 e0 dd da d8     ................
     2b8:	00 fd fb f8 f5 f3 f0 ee eb e8 e6 e3 e0 de db d9     ................
     2c8:	00 fd fb f8 f6 f3 f1 ee eb e9 e6 e4 e1 df dc da     ................
     2d8:	00 fd fb f8 f6 f3 f1 ee ec e9 e7 e4 e2 df dd da     ................
     2e8:	00 fe fb f9 f6 f4 f1 ef ec ea e8 e5 e3 e0 de db     ................
     2f8:	00 fe fb f9 f6 f4 f2 ef ed eb e8 e6 e3 e1 df dc     ................
     308:	00 fe fb f9 f7 f4 f2 f0 ed eb e9 e7 e4 e2 e0 dd     ................
     318:	00 fe fb f9 f7 f5 f2 f0 ee ec e9 e7 e5 e3 e0 de     ................
     328:	00 fe fc f9 f7 f5 f3 f1 ee ec ea e8 e6 e4 e1 df     ................
     338:	00 fe fc fa f7 f5 f3 f1 ef ed eb e9 e6 e4 e2 e0     ................
     348:	00 fe fc fa f8 f6 f4 f2 ef ed eb e9 e7 e5 e3 e1     ................
     358:	00 fe fc fa f8 f6 f4 f2 f0 ee ec ea e8 e6 e4 e2     ................
     368:	00 fe fc fa f8 f6 f4 f2 f0 ef ed eb e9 e7 e5 e3     ................
     378:	00 fe fc fa f8 f7 f5 f3 f1 ef ed eb e9 e8 e6 e4     ................
     388:	00 fe fc fb f9 f7 f5 f3 f1 f0 ee ec ea e8 e7 e5     ................
     398:	00 fe fc fb f9 f7 f5 f4 f2 f0 ee ed eb e9 e7 e6     ................
     3a8:	00 fe fd fb f9 f8 f6 f4 f2 f1 ef ed ec ea e8 e7     ................
     3b8:	00 fe fd fb f9 f8 f6 f5 f3 f1 f0 ee ec eb e9 e8     ................
     3c8:	00 fe fd fb fa f8 f7 f5 f3 f2 f0 ef ed ec ea e9     ................
     3d8:	00 fe fd fb fa f8 f7 f5 f4 f2 f1 ef ee ec eb e9     ................
     3e8:	00 ff fd fc fa f9 f7 f6 f4 f3 f2 f0 ef ed ec ea     ................
     3f8:	00 ff fd fc fa f9 f8 f6 f5 f4 f2 f1 ef ee ed eb     ................
     408:	00 ff fd fc fb f9 f8 f7 f5 f4 f3 f2 f0 ef ee ec     ................
     418:	00 ff fd fc fb fa f8 f7 f6 f5 f3 f2 f1 f0 ee ed     ................
     428:	00 ff fe fc fb fa f9 f8 f6 f5 f4 f3 f2 f1 ef ee     ................
     438:	00 ff fe fd fb fa f9 f8 f7 f6 f5 f4 f2 f1 f0 ef     ................
     448:	00 ff fe fd fc fb fa f9 f7 f6 f5 f4 f3 f2 f1 f0     ................
     458:	00 ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1     ................
     468:	00 ff fe fd fc fb fa f9 f8 f8 f7 f6 f5 f4 f3 f2     ................
     478:	00 ff fe fd fc fc fb fa f9 f8 f7 f6 f5 f5 f4 f3     ................
     488:	00 ff fe fe fd fc fb fa f9 f9 f8 f7 f6 f5 f5 f4     ................
     498:	00 ff fe fe fd fc fb fb fa f9 f8 f8 f7 f6 f5 f5     ................
     4a8:	00 ff ff fe fd fd fc fb fa fa f9 f8 f8 f7 f6 f6     ................
     4b8:	00 ff ff fe fd fd fc fc fb fa fa f9 f8 f8 f7 f7     ................
     4c8:	00 ff ff fe fe fd fd fc fb fb fa fa f9 f9 f8 f8     ................
     4d8:	00 ff ff fe fe fd fd fc fc fb fb fa fa f9 f9 f8     ................
     4e8:	00 00 ff ff fe fe fd fd fc fc fc fb fb fa fa f9     ................
     4f8:	00 00 ff ff fe fe fe fd fd fd fc fc fb fb fb fa     ................
     508:	00 00 ff ff ff fe fe fe fd fd fd fd fc fc fc fb     ................
     518:	00 00 ff ff ff ff fe fe fe fe fd fd fd fd fc fc     ................
     528:	00 00 00 ff ff ff ff ff fe fe fe fe fe fe fd fd     ................
     538:	00 00 00 00 ff ff ff ff ff ff ff ff fe fe fe fe     ................
	...
     550:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     570:	01 01 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
     580:	01 01 01 01 02 02 02 02 00 00 00 01 01 01 01 01     ................
     590:	02 02 02 02 02 02 03 03 00 00 01 01 01 01 02 02     ................
     5a0:	02 02 03 03 03 03 04 04 00 00 01 01 01 02 02 02     ................
     5b0:	03 03 03 03 04 04 04 05 00 00 01 01 02 02 02 03     ................
     5c0:	03 03 04 04 05 05 05 06 00 00 01 01 02 02 03 03     ................
     5d0:	04 04 04 05 05 06 06 07 00 01 01 02 02 03 03 04     ................
     5e0:	04 05 05 06 06 07 07 08 00 01 01 02 02 03 03 04     ................
     5f0:	05 05 06 06 07 07 08 08 00 01 01 02 03 03 04 04     ................
     600:	05 06 06 07 08 08 09 09 00 01 01 02 03 03 04 05     ................
     610:	06 06 07 08 08 09 0a 0a 00 01 02 02 03 04 05 05     ................
     620:	06 07 08 08 09 0a 0b 0b 00 01 02 02 03 04 05 06     ................
     630:	07 07 08 09 0a 0b 0b 0c 00 01 02 03 04 04 05 06     ................
     640:	07 08 09 0a 0b 0b 0c 0d 00 01 02 03 04 05 06 07     ................
     650:	08 08 09 0a 0b 0c 0d 0e 00 01 02 03 04 05 06 07     ................
     660:	08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 04 05 06 07     ................
     670:	09 0a 0b 0c 0d 0e 0f 10 00 01 02 03 05 06 07 08     ................
     680:	09 0a 0b 0c 0e 0f 10 11 00 01 02 04 05 06 07 08     ................
     690:	0a 0b 0c 0d 0e 0f 11 12 00 01 03 04 05 06 08 09     ................
     6a0:	0a 0b 0d 0e 0f 10 12 13 00 01 03 04 05 07 08 09     ................
     6b0:	0b 0c 0d 0e 10 11 12 14 00 01 03 04 06 07 08 0a     ................
     6c0:	0b 0c 0e 0f 11 12 13 15 00 01 03 04 06 07 09 0a     ................
     6d0:	0c 0d 0e 10 11 13 14 16 00 02 03 05 06 08 09 0b     ................
     6e0:	0c 0e 0f 11 12 14 15 17 00 02 03 05 06 08 09 0b     ................
     6f0:	0d 0e 10 11 13 14 16 17 00 02 03 05 07 08 0a 0b     ................
     700:	0d 0f 10 12 14 15 17 18 00 02 03 05 07 08 0a 0c     ................
     710:	0e 0f 11 13 14 16 18 19 00 02 04 05 07 09 0b 0c     ................
     720:	0e 10 12 13 15 17 19 1a 00 02 04 05 07 09 0b 0d     ................
     730:	0f 10 12 14 16 18 19 1b 00 02 04 06 08 09 0b 0d     ................
     740:	0f 11 13 15 17 18 1a 1c 00 02 04 06 08 0a 0c 0e     ................
     750:	10 11 13 15 17 19 1b 1d 00 02 04 06 08 0a 0c 0e     ................
     760:	10 12 14 16 18 1a 1c 1e 00 02 04 06 08 0a 0c 0e     ................
     770:	11 13 15 17 19 1b 1d 1f 00 02 04 06 09 0b 0d 0f     ................
     780:	11 13 15 17 1a 1c 1e 20 00 02 04 07 09 0b 0d 0f     ....... ........
     790:	12 14 16 18 1a 1c 1f 21 00 02 05 07 09 0b 0e 10     .......!........
     7a0:	12 14 17 19 1b 1d 20 22 00 02 05 07 09 0c 0e 10     ...... "........
     7b0:	13 15 17 19 1c 1e 20 23 00 02 05 07 0a 0c 0e 11     ...... #........
     7c0:	13 15 18 1a 1d 1f 21 24 00 02 05 07 0a 0c 0f 11     ......!$........
     7d0:	14 16 18 1b 1d 20 22 25 00 03 05 08 0a 0d 0f 12     ..... "%........
     7e0:	14 17 19 1c 1e 21 23 26 00 03 05 08 0a 0d 0f 12     .....!#&........
     7f0:	15 17 1a 1c 1f 21 24 26 00 03 05 08 0b 0d 10 12     .....!$&........
     800:	15 18 1a 1d 20 22 25 27 00 03 05 08 0b 0d 10 13     .... "%'........
     810:	16 18 1b 1e 20 23 26 28 00 03 06 08 0b 0e 11 13     .... #&(........
     820:	16 19 1c 1e 21 24 27 29 00 03 06 08 0b 0e 11 14     ....!$')........
     830:	17 19 1c 1f 22 25 27 2a 00 03 06 09 0c 0e 11 14     ...."%'*........
     840:	17 1a 1d 20 23 25 28 2b 00 03 06 09 0c 0f 12 15     ... #%(+........
     850:	18 1a 1d 20 23 26 29 2c 00 03 06 09 0c 0f 12 15     ... #&),........
     860:	18 1b 1e 21 24 27 2a 2d 00 03 06 09 0c 0f 12 15     ...!$'*-........
     870:	19 1c 1f 22 25 28 2b 2e 00 03 06 09 0d 10 13 16     ..."%(+.........
     880:	19 1c 1f 22 26 29 2c 2f 00 03 06 0a 0d 10 13 16     ..."&),/........
     890:	1a 1d 20 23 26 29 2d 30                             .. #&)-0

00000898 <PM_SINE>:
     898:	00 80 32 80 64 80 96 80 c9 80 fb 80 2d 81 5f 81     ..2.d.......-._.
     8a8:	92 81 c4 81 f6 81 28 82 5b 82 8d 82 bf 82 f1 82     ......(.[.......
     8b8:	24 83 56 83 88 83 ba 83 ed 83 1f 84 51 84 83 84     $.V.........Q...
     8c8:	b6 84 e8 84 1a 85 4c 85 7e 85 b1 85 e3 85 15 86     ......L.~.......
     8d8:	47 86 7a 86 ac 86 de 86 10 87 42 87 74 87 a7 87     G.z.......B.t...
     8e8:	d9 87 0b 88 3d 88 6f 88 a1 88 d4 88 06 89 38 89     ....=.o.......8.
     8f8:	6a 89 9c 89 ce 89 00 8a 32 8a 65 8a 97 8a c9 8a     j.......2.e.....
     908:	fb 8a 2d 8b 5f 8b 91 8b c3 8b f5 8b 27 8c 59 8c     ..-._.......'.Y.
     918:	8b 8c bd 8c ef 8c 21 8d 53 8d 85 8d b7 8d e9 8d     ......!.S.......
     928:	1b 8e 4d 8e 7f 8e b1 8e e3 8e 15 8f 47 8f 79 8f     ..M.........G.y.
     938:	ab 8f dc 8f 0e 90 40 90 72 90 a4 90 d6 90 07 91     ......@.r.......
     948:	39 91 6b 91 9d 91 cf 91 00 92 32 92 64 92 96 92     9.k.......2.d...
     958:	c7 92 f9 92 2b 93 5d 93 8e 93 c0 93 f2 93 23 94     ....+.].......#.
     968:	55 94 86 94 b8 94 ea 94 1b 95 4d 95 7e 95 b0 95     U.........M.~...
     978:	e1 95 13 96 44 96 76 96 a7 96 d9 96 0a 97 3c 97     ....D.v.......<.
     988:	6d 97 9f 97 d0 97 01 98 33 98 64 98 95 98 c7 98     m.......3.d.....
     998:	f8 98 29 99 5b 99 8c 99 bd 99 ee 99 20 9a 51 9a     ..).[....... .Q.
     9a8:	82 9a b3 9a e4 9a 15 9b 46 9b 78 9b a9 9b da 9b     ........F.x.....
     9b8:	0b 9c 3c 9c 6d 9c 9e 9c cf 9c 00 9d 31 9d 62 9d     ..<.m.......1.b.
     9c8:	93 9d c3 9d f4 9d 25 9e 56 9e 87 9e b8 9e e8 9e     ......%.V.......
     9d8:	19 9f 4a 9f 7b 9f ab 9f dc 9f 0d a0 3d a0 6e a0     ..J.{.......=.n.
     9e8:	9f a0 cf a0 00 a1 30 a1 61 a1 91 a1 c2 a1 f2 a1     ......0.a.......
     9f8:	23 a2 53 a2 84 a2 b4 a2 e4 a2 15 a3 45 a3 75 a3     #.S.........E.u.
     a08:	a6 a3 d6 a3 06 a4 36 a4 67 a4 97 a4 c7 a4 f7 a4     ......6.g.......
     a18:	27 a5 57 a5 87 a5 b7 a5 e7 a5 17 a6 47 a6 77 a6     '.W.........G.w.
     a28:	a7 a6 d7 a6 07 a7 37 a7 67 a7 97 a7 c6 a7 f6 a7     ......7.g.......
     a38:	26 a8 56 a8 85 a8 b5 a8 e5 a8 14 a9 44 a9 73 a9     &.V.........D.s.
     a48:	a3 a9 d2 a9 02 aa 31 aa 61 aa 90 aa c0 aa ef aa     ......1.a.......
     a58:	1e ab 4e ab 7d ab ac ab db ab 0b ac 3a ac 69 ac     ..N.}.......:.i.
     a68:	98 ac c7 ac f6 ac 25 ad 54 ad 83 ad b2 ad e1 ad     ......%.T.......
     a78:	10 ae 3f ae 6e ae 9d ae cc ae fa ae 29 af 58 af     ..?.n.......).X.
     a88:	86 af b5 af e4 af 12 b0 41 b0 6f b0 9e b0 cc b0     ........A.o.....
     a98:	fb b0 29 b1 58 b1 86 b1 b4 b1 e3 b1 11 b2 3f b2     ..).X.........?.
     aa8:	6d b2 9c b2 ca b2 f8 b2 26 b3 54 b3 82 b3 b0 b3     m.......&.T.....
     ab8:	de b3 0c b4 3a b4 68 b4 96 b4 c3 b4 f1 b4 1f b5     ....:.h.........
     ac8:	4d b5 7a b5 a8 b5 d6 b5 03 b6 31 b6 5e b6 8c b6     M.z.......1.^...
     ad8:	b9 b6 e7 b6 14 b7 41 b7 6f b7 9c b7 c9 b7 f6 b7     ......A.o.......
     ae8:	24 b8 51 b8 7e b8 ab b8 d8 b8 05 b9 32 b9 5f b9     $.Q.~.......2._.
     af8:	8c b9 b9 b9 e6 b9 12 ba 3f ba 6c ba 99 ba c5 ba     ........?.l.....
     b08:	f2 ba 1f bb 4b bb 78 bb a4 bb d1 bb fd bb 29 bc     ....K.x.......).
     b18:	56 bc 82 bc ae bc db bc 07 bd 33 bd 5f bd 8b bd     V.........3._...
     b28:	b7 bd e3 bd 0f be 3b be 67 be 93 be bf be eb be     ......;.g.......
     b38:	16 bf 42 bf 6e bf 99 bf c5 bf f0 bf 1c c0 47 c0     ..B.n.........G.
     b48:	73 c0 9e c0 ca c0 f5 c0 20 c1 4c c1 77 c1 a2 c1     s....... .L.w...
     b58:	cd c1 f8 c1 23 c2 4e c2 79 c2 a4 c2 cf c2 fa c2     ....#.N.y.......
     b68:	25 c3 50 c3 7a c3 a5 c3 d0 c3 fa c3 25 c4 4f c4     %.P.z.......%.O.
     b78:	7a c4 a4 c4 cf c4 f9 c4 23 c5 4e c5 78 c5 a2 c5     z.......#.N.x...
     b88:	cc c5 f6 c5 20 c6 4a c6 74 c6 9e c6 c8 c6 f2 c6     .... .J.t.......
     b98:	1c c7 46 c7 6f c7 99 c7 c3 c7 ec c7 16 c8 3f c8     ..F.o.........?.
     ba8:	69 c8 92 c8 bc c8 e5 c8 0e c9 38 c9 61 c9 8a c9     i.........8.a...
     bb8:	b3 c9 dc c9 05 ca 2e ca 57 ca 80 ca a9 ca d2 ca     ........W.......
     bc8:	fa ca 23 cb 4c cb 74 cb 9d cb c5 cb ee cb 16 cc     ..#.L.t.........
     bd8:	3f cc 67 cc 8f cc b8 cc e0 cc 08 cd 30 cd 58 cd     ?.g.........0.X.
     be8:	80 cd a8 cd d0 cd f8 cd 20 ce 48 ce 6f ce 97 ce     ........ .H.o...
     bf8:	bf ce e6 ce 0e cf 35 cf 5d cf 84 cf ac cf d3 cf     ......5.].......
     c08:	fa cf 21 d0 49 d0 70 d0 97 d0 be d0 e5 d0 0c d1     ..!.I.p.........
     c18:	33 d1 59 d1 80 d1 a7 d1 ce d1 f4 d1 1b d2 41 d2     3.Y...........A.
     c28:	68 d2 8e d2 b5 d2 db d2 01 d3 28 d3 4e d3 74 d3     h.........(.N.t.
     c38:	9a d3 c0 d3 e6 d3 0c d4 32 d4 58 d4 7d d4 a3 d4     ........2.X.}...
     c48:	c9 d4 ef d4 14 d5 3a d5 5f d5 85 d5 aa d5 cf d5     ......:._.......
     c58:	f4 d5 1a d6 3f d6 64 d6 89 d6 ae d6 d3 d6 f8 d6     ....?.d.........
     c68:	1d d7 42 d7 66 d7 8b d7 b0 d7 d4 d7 f9 d7 1d d8     ..B.f...........
     c78:	42 d8 66 d8 8a d8 af d8 d3 d8 f7 d8 1b d9 3f d9     B.f...........?.
     c88:	63 d9 87 d9 ab d9 cf d9 f3 d9 16 da 3a da 5e da     c...........:.^.
     c98:	81 da a5 da c8 da ec da 0f db 32 db 56 db 79 db     ..........2.V.y.
     ca8:	9c db bf db e2 db 05 dc 28 dc 4b dc 6d dc 90 dc     ........(.K.m...
     cb8:	b3 dc d6 dc f8 dc 1b dd 3d dd 5f dd 82 dd a4 dd     ........=._.....
     cc8:	c6 dd e9 dd 0b de 2d de 4f de 71 de 93 de b4 de     ......-.O.q.....
     cd8:	d6 de f8 de 1a df 3b df 5d df 7e df a0 df c1 df     ......;.].~.....
     ce8:	e2 df 04 e0 25 e0 46 e0 67 e0 88 e0 a9 e0 ca e0     ....%.F.g.......
     cf8:	eb e0 0c e1 2d e1 4d e1 6e e1 8e e1 af e1 cf e1     ....-.M.n.......
     d08:	f0 e1 10 e2 30 e2 51 e2 71 e2 91 e2 b1 e2 d1 e2     ....0.Q.q.......
     d18:	f1 e2 11 e3 30 e3 50 e3 70 e3 8f e3 af e3 ce e3     ....0.P.p.......
     d28:	ee e3 0d e4 2d e4 4c e4 6b e4 8a e4 a9 e4 c8 e4     ....-.L.k.......
     d38:	e7 e4 06 e5 25 e5 44 e5 62 e5 81 e5 a0 e5 be e5     ....%.D.b.......
     d48:	dd e5 fb e5 19 e6 38 e6 56 e6 74 e6 92 e6 b0 e6     ......8.V.t.....
     d58:	ce e6 ec e6 0a e7 28 e7 45 e7 63 e7 81 e7 9e e7     ......(.E.c.....
     d68:	bc e7 d9 e7 f7 e7 14 e8 31 e8 4e e8 6b e8 88 e8     ........1.N.k...
     d78:	a5 e8 c2 e8 df e8 fc e8 19 e9 35 e9 52 e9 6e e9     ..........5.R.n.
     d88:	8b e9 a7 e9 c4 e9 e0 e9 fc e9 18 ea 34 ea 50 ea     ............4.P.
     d98:	6c ea 88 ea a4 ea c0 ea db ea f7 ea 13 eb 2e eb     l...............
     da8:	4a eb 65 eb 80 eb 9c eb b7 eb d2 eb ed eb 08 ec     J.e.............
     db8:	23 ec 3e ec 58 ec 73 ec 8e ec a8 ec c3 ec dd ec     #.>.X.s.........
     dc8:	f8 ec 12 ed 2c ed 47 ed 61 ed 7b ed 95 ed af ed     ....,.G.a.{.....
     dd8:	c9 ed e3 ed fc ed 16 ee 30 ee 49 ee 63 ee 7c ee     ........0.I.c.|.
     de8:	95 ee af ee c8 ee e1 ee fa ee 13 ef 2c ef 45 ef     ............,.E.
     df8:	5e ef 76 ef 8f ef a8 ef c0 ef d9 ef f1 ef 09 f0     ^.v.............
     e08:	22 f0 3a f0 52 f0 6a f0 82 f0 9a f0 b2 f0 ca f0     ".:.R.j.........
     e18:	e1 f0 f9 f0 11 f1 28 f1 40 f1 57 f1 6e f1 86 f1     ......(.@.W.n...
     e28:	9d f1 b4 f1 cb f1 e2 f1 f9 f1 10 f2 26 f2 3d f2     ............&.=.
     e38:	54 f2 6a f2 81 f2 97 f2 ae f2 c4 f2 da f2 f0 f2     T.j.............
     e48:	06 f3 1c f3 32 f3 48 f3 5e f3 74 f3 89 f3 9f f3     ....2.H.^.t.....
     e58:	b5 f3 ca f3 df f3 f5 f3 0a f4 1f f4 34 f4 49 f4     ............4.I.
     e68:	5e f4 73 f4 88 f4 9d f4 b1 f4 c6 f4 db f4 ef f4     ^.s.............
     e78:	03 f5 18 f5 2c f5 40 f5 54 f5 68 f5 7c f5 90 f5     ....,.@.T.h.|...
     e88:	a4 f5 b8 f5 cc f5 df f5 f3 f5 06 f6 1a f6 2d f6     ..............-.
     e98:	40 f6 53 f6 67 f6 7a f6 8d f6 a0 f6 b2 f6 c5 f6     @.S.g.z.........
     ea8:	d8 f6 ea f6 fd f6 10 f7 22 f7 34 f7 47 f7 59 f7     ........".4.G.Y.
     eb8:	6b f7 7d f7 8f f7 a1 f7 b3 f7 c4 f7 d6 f7 e8 f7     k.}.............
     ec8:	f9 f7 0b f8 1c f8 2e f8 3f f8 50 f8 61 f8 72 f8     ........?.P.a.r.
     ed8:	83 f8 94 f8 a5 f8 b6 f8 c6 f8 d7 f8 e7 f8 f8 f8     ................
     ee8:	08 f9 19 f9 29 f9 39 f9 49 f9 59 f9 69 f9 79 f9     ....).9.I.Y.i.y.
     ef8:	89 f9 98 f9 a8 f9 b8 f9 c7 f9 d7 f9 e6 f9 f5 f9     ................
     f08:	04 fa 14 fa 23 fa 32 fa 41 fa 4f fa 5e fa 6d fa     ....#.2.A.O.^.m.
     f18:	7c fa 8a fa 99 fa a7 fa b5 fa c4 fa d2 fa e0 fa     |...............
     f28:	ee fa fc fa 0a fb 18 fb 25 fb 33 fb 41 fb 4e fb     ........%.3.A.N.
     f38:	5c fb 69 fb 76 fb 83 fb 91 fb 9e fb ab fb b8 fb     \.i.v...........
     f48:	c4 fb d1 fb de fb eb fb f7 fb 04 fc 10 fc 1c fc     ................
     f58:	29 fc 35 fc 41 fc 4d fc 59 fc 65 fc 70 fc 7c fc     ).5.A.M.Y.e.p.|.
     f68:	88 fc 93 fc 9f fc aa fc b6 fc c1 fc cc fc d7 fc     ................
     f78:	e2 fc ed fc f8 fc 03 fd 0e fd 18 fd 23 fd 2e fd     ............#...
     f88:	38 fd 42 fd 4d fd 57 fd 61 fd 6b fd 75 fd 7f fd     8.B.M.W.a.k.u...
     f98:	89 fd 93 fd 9c fd a6 fd b0 fd b9 fd c2 fd cc fd     ................
     fa8:	d5 fd de fd e7 fd f0 fd f9 fd 02 fe 0b fe 13 fe     ................
     fb8:	1c fe 25 fe 2d fe 36 fe 3e fe 46 fe 4e fe 56 fe     ..%.-.6.>.F.N.V.
     fc8:	5e fe 66 fe 6e fe 76 fe 7e fe 85 fe 8d fe 94 fe     ^.f.n.v.~.......
     fd8:	9c fe a3 fe aa fe b2 fe b9 fe c0 fe c7 fe ce fe     ................
     fe8:	d4 fe db fe e2 fe e8 fe ef fe f5 fe fc fe 02 ff     ................
     ff8:	08 ff 0e ff 14 ff 1a ff 20 ff 26 ff 2c ff 31 ff     ........ .&.,.1.
    1008:	37 ff 3c ff 42 ff 47 ff 4c ff 52 ff 57 ff 5c ff     7.<.B.G.L.R.W.\.
    1018:	61 ff 66 ff 6a ff 6f ff 74 ff 78 ff 7d ff 81 ff     a.f.j.o.t.x.}...
    1028:	86 ff 8a ff 8e ff 92 ff 96 ff 9a ff 9e ff a2 ff     ................
    1038:	a6 ff a9 ff ad ff b0 ff b4 ff b7 ff bb ff be ff     ................
    1048:	c1 ff c4 ff c7 ff ca ff cd ff cf ff d2 ff d5 ff     ................
    1058:	d7 ff d9 ff dc ff de ff e0 ff e2 ff e4 ff e6 ff     ................
    1068:	e8 ff ea ff ec ff ee ff ef ff f1 ff f2 ff f3 ff     ................
    1078:	f5 ff f6 ff f7 ff f8 ff f9 ff fa ff fb ff fb ff     ................
    1088:	fc ff fd ff fd ff fe ff fe ff fe ff fe ff fe ff     ................
    1098:	ff ff fe ff fe ff fe ff fe ff fe ff fd ff fd ff     ................
    10a8:	fc ff fb ff fb ff fa ff f9 ff f8 ff f7 ff f6 ff     ................
    10b8:	f5 ff f3 ff f2 ff f1 ff ef ff ee ff ec ff ea ff     ................
    10c8:	e8 ff e6 ff e4 ff e2 ff e0 ff de ff dc ff d9 ff     ................
    10d8:	d7 ff d5 ff d2 ff cf ff cd ff ca ff c7 ff c4 ff     ................
    10e8:	c1 ff be ff bb ff b7 ff b4 ff b0 ff ad ff a9 ff     ................
    10f8:	a6 ff a2 ff 9e ff 9a ff 96 ff 92 ff 8e ff 8a ff     ................
    1108:	86 ff 81 ff 7d ff 78 ff 74 ff 6f ff 6a ff 66 ff     ....}.x.t.o.j.f.
    1118:	61 ff 5c ff 57 ff 52 ff 4c ff 47 ff 42 ff 3c ff     a.\.W.R.L.G.B.<.
    1128:	37 ff 31 ff 2c ff 26 ff 20 ff 1a ff 14 ff 0e ff     7.1.,.&. .......
    1138:	08 ff 02 ff fc fe f5 fe ef fe e8 fe e2 fe db fe     ................
    1148:	d4 fe ce fe c7 fe c0 fe b9 fe b2 fe aa fe a3 fe     ................
    1158:	9c fe 94 fe 8d fe 85 fe 7e fe 76 fe 6e fe 66 fe     ........~.v.n.f.
    1168:	5e fe 56 fe 4e fe 46 fe 3e fe 36 fe 2d fe 25 fe     ^.V.N.F.>.6.-.%.
    1178:	1c fe 13 fe 0b fe 02 fe f9 fd f0 fd e7 fd de fd     ................
    1188:	d5 fd cc fd c2 fd b9 fd b0 fd a6 fd 9c fd 93 fd     ................
    1198:	89 fd 7f fd 75 fd 6b fd 61 fd 57 fd 4d fd 42 fd     ....u.k.a.W.M.B.
    11a8:	38 fd 2e fd 23 fd 18 fd 0e fd 03 fd f8 fc ed fc     8...#...........
    11b8:	e2 fc d7 fc cc fc c1 fc b6 fc aa fc 9f fc 93 fc     ................
    11c8:	88 fc 7c fc 70 fc 65 fc 59 fc 4d fc 41 fc 35 fc     ..|.p.e.Y.M.A.5.
    11d8:	29 fc 1c fc 10 fc 04 fc f7 fb eb fb de fb d1 fb     )...............
    11e8:	c4 fb b8 fb ab fb 9e fb 91 fb 83 fb 76 fb 69 fb     ............v.i.
    11f8:	5c fb 4e fb 41 fb 33 fb 25 fb 18 fb 0a fb fc fa     \.N.A.3.%.......
    1208:	ee fa e0 fa d2 fa c4 fa b5 fa a7 fa 99 fa 8a fa     ................
    1218:	7c fa 6d fa 5e fa 4f fa 41 fa 32 fa 23 fa 14 fa     |.m.^.O.A.2.#...
    1228:	04 fa f5 f9 e6 f9 d7 f9 c7 f9 b8 f9 a8 f9 98 f9     ................
    1238:	89 f9 79 f9 69 f9 59 f9 49 f9 39 f9 29 f9 19 f9     ..y.i.Y.I.9.)...
    1248:	08 f9 f8 f8 e7 f8 d7 f8 c6 f8 b6 f8 a5 f8 94 f8     ................
    1258:	83 f8 72 f8 61 f8 50 f8 3f f8 2e f8 1c f8 0b f8     ..r.a.P.?.......
    1268:	f9 f7 e8 f7 d6 f7 c4 f7 b3 f7 a1 f7 8f f7 7d f7     ..............}.
    1278:	6b f7 59 f7 47 f7 34 f7 22 f7 10 f7 fd f6 ea f6     k.Y.G.4.".......
    1288:	d8 f6 c5 f6 b2 f6 a0 f6 8d f6 7a f6 67 f6 53 f6     ..........z.g.S.
    1298:	40 f6 2d f6 1a f6 06 f6 f3 f5 df f5 cc f5 b8 f5     @.-.............
    12a8:	a4 f5 90 f5 7c f5 68 f5 54 f5 40 f5 2c f5 18 f5     ....|.h.T.@.,...
    12b8:	03 f5 ef f4 db f4 c6 f4 b1 f4 9d f4 88 f4 73 f4     ..............s.
    12c8:	5e f4 49 f4 34 f4 1f f4 0a f4 f5 f3 df f3 ca f3     ^.I.4...........
    12d8:	b5 f3 9f f3 89 f3 74 f3 5e f3 48 f3 32 f3 1c f3     ......t.^.H.2...
    12e8:	06 f3 f0 f2 da f2 c4 f2 ae f2 97 f2 81 f2 6a f2     ..............j.
    12f8:	54 f2 3d f2 26 f2 10 f2 f9 f1 e2 f1 cb f1 b4 f1     T.=.&...........
    1308:	9d f1 86 f1 6e f1 57 f1 40 f1 28 f1 11 f1 f9 f0     ....n.W.@.(.....
    1318:	e1 f0 ca f0 b2 f0 9a f0 82 f0 6a f0 52 f0 3a f0     ..........j.R.:.
    1328:	22 f0 09 f0 f1 ef d9 ef c0 ef a8 ef 8f ef 76 ef     ".............v.
    1338:	5e ef 45 ef 2c ef 13 ef fa ee e1 ee c8 ee af ee     ^.E.,...........
    1348:	95 ee 7c ee 63 ee 49 ee 30 ee 16 ee fc ed e3 ed     ..|.c.I.0.......
    1358:	c9 ed af ed 95 ed 7b ed 61 ed 47 ed 2c ed 12 ed     ......{.a.G.,...
    1368:	f8 ec dd ec c3 ec a8 ec 8e ec 73 ec 58 ec 3e ec     ..........s.X.>.
    1378:	23 ec 08 ec ed eb d2 eb b7 eb 9c eb 80 eb 65 eb     #.............e.
    1388:	4a eb 2e eb 13 eb f7 ea db ea c0 ea a4 ea 88 ea     J...............
    1398:	6c ea 50 ea 34 ea 18 ea fc e9 e0 e9 c4 e9 a7 e9     l.P.4...........
    13a8:	8b e9 6e e9 52 e9 35 e9 19 e9 fc e8 df e8 c2 e8     ..n.R.5.........
    13b8:	a5 e8 88 e8 6b e8 4e e8 31 e8 14 e8 f7 e7 d9 e7     ....k.N.1.......
    13c8:	bc e7 9e e7 81 e7 63 e7 45 e7 28 e7 0a e7 ec e6     ......c.E.(.....
    13d8:	ce e6 b0 e6 92 e6 74 e6 56 e6 38 e6 19 e6 fb e5     ......t.V.8.....
    13e8:	dd e5 be e5 a0 e5 81 e5 62 e5 44 e5 25 e5 06 e5     ........b.D.%...
    13f8:	e7 e4 c8 e4 a9 e4 8a e4 6b e4 4c e4 2d e4 0d e4     ........k.L.-...
    1408:	ee e3 ce e3 af e3 8f e3 70 e3 50 e3 30 e3 11 e3     ........p.P.0...
    1418:	f1 e2 d1 e2 b1 e2 91 e2 71 e2 51 e2 30 e2 10 e2     ........q.Q.0...
    1428:	f0 e1 cf e1 af e1 8e e1 6e e1 4d e1 2d e1 0c e1     ........n.M.-...
    1438:	eb e0 ca e0 a9 e0 88 e0 67 e0 46 e0 25 e0 04 e0     ........g.F.%...
    1448:	e2 df c1 df a0 df 7e df 5d df 3b df 1a df f8 de     ......~.].;.....
    1458:	d6 de b4 de 93 de 71 de 4f de 2d de 0b de e9 dd     ......q.O.-.....
    1468:	c6 dd a4 dd 82 dd 5f dd 3d dd 1b dd f8 dc d6 dc     ......_.=.......
    1478:	b3 dc 90 dc 6d dc 4b dc 28 dc 05 dc e2 db bf db     ....m.K.(.......
    1488:	9c db 79 db 56 db 32 db 0f db ec da c8 da a5 da     ..y.V.2.........
    1498:	81 da 5e da 3a da 16 da f3 d9 cf d9 ab d9 87 d9     ..^.:...........
    14a8:	63 d9 3f d9 1b d9 f7 d8 d3 d8 af d8 8a d8 66 d8     c.?...........f.
    14b8:	42 d8 1d d8 f9 d7 d4 d7 b0 d7 8b d7 66 d7 42 d7     B...........f.B.
    14c8:	1d d7 f8 d6 d3 d6 ae d6 89 d6 64 d6 3f d6 1a d6     ..........d.?...
    14d8:	f4 d5 cf d5 aa d5 85 d5 5f d5 3a d5 14 d5 ef d4     ........_.:.....
    14e8:	c9 d4 a3 d4 7d d4 58 d4 32 d4 0c d4 e6 d3 c0 d3     ....}.X.2.......
    14f8:	9a d3 74 d3 4e d3 28 d3 01 d3 db d2 b5 d2 8e d2     ..t.N.(.........
    1508:	68 d2 41 d2 1b d2 f4 d1 ce d1 a7 d1 80 d1 59 d1     h.A...........Y.
    1518:	33 d1 0c d1 e5 d0 be d0 97 d0 70 d0 49 d0 21 d0     3.........p.I.!.
    1528:	fa cf d3 cf ac cf 84 cf 5d cf 35 cf 0e cf e6 ce     ........].5.....
    1538:	bf ce 97 ce 6f ce 48 ce 20 ce f8 cd d0 cd a8 cd     ....o.H. .......
    1548:	80 cd 58 cd 30 cd 08 cd e0 cc b8 cc 8f cc 67 cc     ..X.0.........g.
    1558:	3f cc 16 cc ee cb c5 cb 9d cb 74 cb 4c cb 23 cb     ?.........t.L.#.
    1568:	fa ca d2 ca a9 ca 80 ca 57 ca 2e ca 05 ca dc c9     ........W.......
    1578:	b3 c9 8a c9 61 c9 38 c9 0e c9 e5 c8 bc c8 92 c8     ....a.8.........
    1588:	69 c8 3f c8 16 c8 ec c7 c3 c7 99 c7 6f c7 46 c7     i.?.........o.F.
    1598:	1c c7 f2 c6 c8 c6 9e c6 74 c6 4a c6 20 c6 f6 c5     ........t.J. ...
    15a8:	cc c5 a2 c5 78 c5 4e c5 23 c5 f9 c4 cf c4 a4 c4     ....x.N.#.......
    15b8:	7a c4 4f c4 25 c4 fa c3 d0 c3 a5 c3 7a c3 50 c3     z.O.%.......z.P.
    15c8:	25 c3 fa c2 cf c2 a4 c2 79 c2 4e c2 23 c2 f8 c1     %.......y.N.#...
    15d8:	cd c1 a2 c1 77 c1 4c c1 20 c1 f5 c0 ca c0 9e c0     ....w.L. .......
    15e8:	73 c0 47 c0 1c c0 f0 bf c5 bf 99 bf 6e bf 42 bf     s.G.........n.B.
    15f8:	16 bf eb be bf be 93 be 67 be 3b be 0f be e3 bd     ........g.;.....
    1608:	b7 bd 8b bd 5f bd 33 bd 07 bd db bc ae bc 82 bc     ...._.3.........
    1618:	56 bc 29 bc fd bb d1 bb a4 bb 78 bb 4b bb 1f bb     V.).......x.K...
    1628:	f2 ba c5 ba 99 ba 6c ba 3f ba 12 ba e6 b9 b9 b9     ......l.?.......
    1638:	8c b9 5f b9 32 b9 05 b9 d8 b8 ab b8 7e b8 51 b8     .._.2.......~.Q.
    1648:	24 b8 f6 b7 c9 b7 9c b7 6f b7 41 b7 14 b7 e7 b6     $.......o.A.....
    1658:	b9 b6 8c b6 5e b6 31 b6 03 b6 d6 b5 a8 b5 7a b5     ....^.1.......z.
    1668:	4d b5 1f b5 f1 b4 c3 b4 96 b4 68 b4 3a b4 0c b4     M.........h.:...
    1678:	de b3 b0 b3 82 b3 54 b3 26 b3 f8 b2 ca b2 9c b2     ......T.&.......
    1688:	6d b2 3f b2 11 b2 e3 b1 b4 b1 86 b1 58 b1 29 b1     m.?.........X.).
    1698:	fb b0 cc b0 9e b0 6f b0 41 b0 12 b0 e4 af b5 af     ......o.A.......
    16a8:	86 af 58 af 29 af fa ae cc ae 9d ae 6e ae 3f ae     ..X.).......n.?.
    16b8:	10 ae e1 ad b2 ad 83 ad 54 ad 25 ad f6 ac c7 ac     ........T.%.....
    16c8:	98 ac 69 ac 3a ac 0b ac db ab ac ab 7d ab 4e ab     ..i.:.......}.N.
    16d8:	1e ab ef aa c0 aa 90 aa 61 aa 31 aa 02 aa d2 a9     ........a.1.....
    16e8:	a3 a9 73 a9 44 a9 14 a9 e5 a8 b5 a8 85 a8 56 a8     ..s.D.........V.
    16f8:	26 a8 f6 a7 c6 a7 97 a7 67 a7 37 a7 07 a7 d7 a6     &.......g.7.....
    1708:	a7 a6 77 a6 47 a6 17 a6 e7 a5 b7 a5 87 a5 57 a5     ..w.G.........W.
    1718:	27 a5 f7 a4 c7 a4 97 a4 67 a4 36 a4 06 a4 d6 a3     '.......g.6.....
    1728:	a6 a3 75 a3 45 a3 15 a3 e4 a2 b4 a2 84 a2 53 a2     ..u.E.........S.
    1738:	23 a2 f2 a1 c2 a1 91 a1 61 a1 30 a1 00 a1 cf a0     #.......a.0.....
    1748:	9f a0 6e a0 3d a0 0d a0 dc 9f ab 9f 7b 9f 4a 9f     ..n.=.......{.J.
    1758:	19 9f e8 9e b8 9e 87 9e 56 9e 25 9e f4 9d c3 9d     ........V.%.....
    1768:	93 9d 62 9d 31 9d 00 9d cf 9c 9e 9c 6d 9c 3c 9c     ..b.1.......m.<.
    1778:	0b 9c da 9b a9 9b 78 9b 46 9b 15 9b e4 9a b3 9a     ......x.F.......
    1788:	82 9a 51 9a 20 9a ee 99 bd 99 8c 99 5b 99 29 99     ..Q. .......[.).
    1798:	f8 98 c7 98 95 98 64 98 33 98 01 98 d0 97 9f 97     ......d.3.......
    17a8:	6d 97 3c 97 0a 97 d9 96 a7 96 76 96 44 96 13 96     m.<.......v.D...
    17b8:	e1 95 b0 95 7e 95 4d 95 1b 95 ea 94 b8 94 86 94     ....~.M.........
    17c8:	55 94 23 94 f2 93 c0 93 8e 93 5d 93 2b 93 f9 92     U.#.......].+...
    17d8:	c7 92 96 92 64 92 32 92 00 92 cf 91 9d 91 6b 91     ....d.2.......k.
    17e8:	39 91 07 91 d6 90 a4 90 72 90 40 90 0e 90 dc 8f     9.......r.@.....
    17f8:	ab 8f 79 8f 47 8f 15 8f e3 8e b1 8e 7f 8e 4d 8e     ..y.G.........M.
    1808:	1b 8e e9 8d b7 8d 85 8d 53 8d 21 8d ef 8c bd 8c     ........S.!.....
    1818:	8b 8c 59 8c 27 8c f5 8b c3 8b 91 8b 5f 8b 2d 8b     ..Y.'......._.-.
    1828:	fb 8a c9 8a 97 8a 65 8a 32 8a 00 8a ce 89 9c 89     ......e.2.......
    1838:	6a 89 38 89 06 89 d4 88 a1 88 6f 88 3d 88 0b 88     j.8.......o.=...
    1848:	d9 87 a7 87 74 87 42 87 10 87 de 86 ac 86 7a 86     ....t.B.......z.
    1858:	47 86 15 86 e3 85 b1 85 7e 85 4c 85 1a 85 e8 84     G.......~.L.....
    1868:	b6 84 83 84 51 84 1f 84 ed 83 ba 83 88 83 56 83     ....Q.........V.
    1878:	24 83 f1 82 bf 82 8d 82 5b 82 28 82 f6 81 c4 81     $.......[.(.....
    1888:	92 81 5f 81 2d 81 fb 80 c9 80 96 80 64 80 32 80     .._.-.......d.2.
    1898:	00 80 cd 7f 9b 7f 69 7f 36 7f 04 7f d2 7e a0 7e     ......i.6....~.~
    18a8:	6d 7e 3b 7e 09 7e d7 7d a4 7d 72 7d 40 7d 0e 7d     m~;~.~.}.}r}@}.}
    18b8:	db 7c a9 7c 77 7c 45 7c 12 7c e0 7b ae 7b 7c 7b     .|.|w|E|.|.{.{|{
    18c8:	49 7b 17 7b e5 7a b3 7a 81 7a 4e 7a 1c 7a ea 79     I{.{.z.z.zNz.z.y
    18d8:	b8 79 85 79 53 79 21 79 ef 78 bd 78 8b 78 58 78     .y.ySy!y.x.x.xXx
    18e8:	26 78 f4 77 c2 77 90 77 5e 77 2b 77 f9 76 c7 76     &x.w.w.w^w+w.v.v
    18f8:	95 76 63 76 31 76 ff 75 cd 75 9a 75 68 75 36 75     .vcv1v.u.u.uhu6u
    1908:	04 75 d2 74 a0 74 6e 74 3c 74 0a 74 d8 73 a6 73     .u.t.tnt<t.t.s.s
    1918:	74 73 42 73 10 73 de 72 ac 72 7a 72 48 72 16 72     tsBs.s.r.rzrHr.r
    1928:	e4 71 b2 71 80 71 4e 71 1c 71 ea 70 b8 70 86 70     .q.q.qNq.q.p.p.p
    1938:	54 70 23 70 f1 6f bf 6f 8d 6f 5b 6f 29 6f f8 6e     Tp#p.o.o.o[o)o.n
    1948:	c6 6e 94 6e 62 6e 30 6e ff 6d cd 6d 9b 6d 69 6d     .n.nbn0n.m.m.mim
    1958:	38 6d 06 6d d4 6c a2 6c 71 6c 3f 6c 0d 6c dc 6b     8m.m.l.lql?l.l.k
    1968:	aa 6b 79 6b 47 6b 15 6b e4 6a b2 6a 81 6a 4f 6a     .kykGk.k.j.j.jOj
    1978:	1e 6a ec 69 bb 69 89 69 58 69 26 69 f5 68 c3 68     .j.i.i.iXi&i.h.h
    1988:	92 68 60 68 2f 68 fe 67 cc 67 9b 67 6a 67 38 67     .h`h/h.g.g.gjg8g
    1998:	07 67 d6 66 a4 66 73 66 42 66 11 66 df 65 ae 65     .g.f.fsfBf.f.e.e
    19a8:	7d 65 4c 65 1b 65 ea 64 b9 64 87 64 56 64 25 64     }eLe.e.d.d.dVd%d
    19b8:	f4 63 c3 63 92 63 61 63 30 63 ff 62 ce 62 9d 62     .c.c.cac0c.b.b.b
    19c8:	6c 62 3c 62 0b 62 da 61 a9 61 78 61 47 61 17 61     lb<b.b.a.axaGa.a
    19d8:	e6 60 b5 60 84 60 54 60 23 60 f2 5f c2 5f 91 5f     .`.`.`T`#`._._._
    19e8:	60 5f 30 5f ff 5e cf 5e 9e 5e 6e 5e 3d 5e 0d 5e     `_0_.^.^.^n^=^.^
    19f8:	dc 5d ac 5d 7b 5d 4b 5d 1b 5d ea 5c ba 5c 8a 5c     .].]{]K].].\.\.\
    1a08:	59 5c 29 5c f9 5b c9 5b 98 5b 68 5b 38 5b 08 5b     Y\)\.[.[.[h[8[.[
    1a18:	d8 5a a8 5a 78 5a 48 5a 18 5a e8 59 b8 59 88 59     .Z.ZxZHZ.Z.Y.Y.Y
    1a28:	58 59 28 59 f8 58 c8 58 98 58 68 58 39 58 09 58     XY(Y.X.X.XhX9X.X
    1a38:	d9 57 a9 57 7a 57 4a 57 1a 57 eb 56 bb 56 8c 56     .W.WzWJW.W.V.V.V
    1a48:	5c 56 2d 56 fd 55 ce 55 9e 55 6f 55 3f 55 10 55     \V-V.U.U.UoU?U.U
    1a58:	e1 54 b1 54 82 54 53 54 24 54 f4 53 c5 53 96 53     .T.T.TST$T.S.S.S
    1a68:	67 53 38 53 09 53 da 52 ab 52 7c 52 4d 52 1e 52     gS8S.S.R.R|RMR.R
    1a78:	ef 51 c0 51 91 51 62 51 33 51 05 51 d6 50 a7 50     .Q.Q.QbQ3Q.Q.P.P
    1a88:	79 50 4a 50 1b 50 ed 4f be 4f 90 4f 61 4f 33 4f     yPJP.P.O.O.OaO3O
    1a98:	04 4f d6 4e a7 4e 79 4e 4b 4e 1c 4e ee 4d c0 4d     .O.N.NyNKN.N.M.M
    1aa8:	92 4d 63 4d 35 4d 07 4d d9 4c ab 4c 7d 4c 4f 4c     .McM5M.M.L.L}LOL
    1ab8:	21 4c f3 4b c5 4b 97 4b 69 4b 3c 4b 0e 4b e0 4a     !L.K.K.KiK<K.K.J
    1ac8:	b2 4a 85 4a 57 4a 29 4a fc 49 ce 49 a1 49 73 49     .J.JWJ)J.I.I.IsI
    1ad8:	46 49 18 49 eb 48 be 48 90 48 63 48 36 48 09 48     FI.I.H.H.HcH6H.H
    1ae8:	db 47 ae 47 81 47 54 47 27 47 fa 46 cd 46 a0 46     .G.G.GTG'G.F.F.F
    1af8:	73 46 46 46 19 46 ed 45 c0 45 93 45 66 45 3a 45     sFFF.F.E.E.EfE:E
    1b08:	0d 45 e0 44 b4 44 87 44 5b 44 2e 44 02 44 d6 43     .E.D.D.D[D.D.D.C
    1b18:	a9 43 7d 43 51 43 24 43 f8 42 cc 42 a0 42 74 42     .C}CQC$C.B.B.BtB
    1b28:	48 42 1c 42 f0 41 c4 41 98 41 6c 41 40 41 14 41     HB.B.A.A.AlA@A.A
    1b38:	e9 40 bd 40 91 40 66 40 3a 40 0f 40 e3 3f b8 3f     .@.@.@f@:@.@.?.?
    1b48:	8c 3f 61 3f 35 3f 0a 3f df 3e b3 3e 88 3e 5d 3e     .?a?5?.?.>.>.>]>
    1b58:	32 3e 07 3e dc 3d b1 3d 86 3d 5b 3d 30 3d 05 3d     2>.>.=.=.=[=0=.=
    1b68:	da 3c af 3c 85 3c 5a 3c 2f 3c 05 3c da 3b b0 3b     .<.<.<Z</<.<.;.;
    1b78:	85 3b 5b 3b 30 3b 06 3b dc 3a b1 3a 87 3a 5d 3a     .;[;0;.;.:.:.:]:
    1b88:	33 3a 09 3a df 39 b5 39 8b 39 61 39 37 39 0d 39     3:.:.9.9.9a979.9
    1b98:	e3 38 b9 38 90 38 66 38 3c 38 13 38 e9 37 c0 37     .8.8.8f8<8.8.7.7
    1ba8:	96 37 6d 37 43 37 1a 37 f1 36 c7 36 9e 36 75 36     .7m7C7.7.6.6.6u6
    1bb8:	4c 36 23 36 fa 35 d1 35 a8 35 7f 35 56 35 2d 35     L6#6.5.5.5.5V5-5
    1bc8:	05 35 dc 34 b3 34 8b 34 62 34 3a 34 11 34 e9 33     .5.4.4.4b4:4.4.3
    1bd8:	c0 33 98 33 70 33 47 33 1f 33 f7 32 cf 32 a7 32     .3.3p3G3.3.2.2.2
    1be8:	7f 32 57 32 2f 32 07 32 df 31 b7 31 90 31 68 31     .2W2/2.2.1.1.1h1
    1bf8:	40 31 19 31 f1 30 ca 30 a2 30 7b 30 53 30 2c 30     @1.1.0.0.0{0S0,0
    1c08:	05 30 de 2f b6 2f 8f 2f 68 2f 41 2f 1a 2f f3 2e     .0./././h/A/./..
    1c18:	cc 2e a6 2e 7f 2e 58 2e 31 2e 0b 2e e4 2d be 2d     ......X.1....-.-
    1c28:	97 2d 71 2d 4a 2d 24 2d fe 2c d7 2c b1 2c 8b 2c     .-q-J-$-.,.,.,.,
    1c38:	65 2c 3f 2c 19 2c f3 2b cd 2b a7 2b 82 2b 5c 2b     e,?,.,.+.+.+.+\+
    1c48:	36 2b 10 2b eb 2a c5 2a a0 2a 7a 2a 55 2a 30 2a     6+.+.*.*.*z*U*0*
    1c58:	0b 2a e5 29 c0 29 9b 29 76 29 51 29 2c 29 07 29     .*.).).)v)Q),).)
    1c68:	e2 28 bd 28 99 28 74 28 4f 28 2b 28 06 28 e2 27     .(.(.(t(O(+(.(.'
    1c78:	bd 27 99 27 75 27 50 27 2c 27 08 27 e4 26 c0 26     .'.'u'P','.'.&.&
    1c88:	9c 26 78 26 54 26 30 26 0c 26 e9 25 c5 25 a1 25     .&x&T&0&.&.%.%.%
    1c98:	7e 25 5a 25 37 25 13 25 f0 24 cd 24 a9 24 86 24     ~%Z%7%.%.$.$.$.$
    1ca8:	63 24 40 24 1d 24 fa 23 d7 23 b4 23 92 23 6f 23     c$@$.$.#.#.#.#o#
    1cb8:	4c 23 29 23 07 23 e4 22 c2 22 a0 22 7d 22 5b 22     L#)#.#."."."}"["
    1cc8:	39 22 16 22 f4 21 d2 21 b0 21 8e 21 6c 21 4b 21     9".".!.!.!.!l!K!
    1cd8:	29 21 07 21 e5 20 c4 20 a2 20 81 20 5f 20 3e 20     )!.!. . . . _ > 
    1ce8:	1d 20 fb 1f da 1f b9 1f 98 1f 77 1f 56 1f 35 1f     . ........w.V.5.
    1cf8:	14 1f f3 1e d2 1e b2 1e 91 1e 71 1e 50 1e 30 1e     ..........q.P.0.
    1d08:	0f 1e ef 1d cf 1d ae 1d 8e 1d 6e 1d 4e 1d 2e 1d     ..........n.N...
    1d18:	0e 1d ee 1c cf 1c af 1c 8f 1c 70 1c 50 1c 31 1c     ..........p.P.1.
    1d28:	11 1c f2 1b d2 1b b3 1b 94 1b 75 1b 56 1b 37 1b     ..........u.V.7.
    1d38:	18 1b f9 1a da 1a bb 1a 9d 1a 7e 1a 5f 1a 41 1a     ..........~._.A.
    1d48:	22 1a 04 1a e6 19 c7 19 a9 19 8b 19 6d 19 4f 19     "...........m.O.
    1d58:	31 19 13 19 f5 18 d7 18 ba 18 9c 18 7e 18 61 18     1...........~.a.
    1d68:	43 18 26 18 08 18 eb 17 ce 17 b1 17 94 17 77 17     C.&...........w.
    1d78:	5a 17 3d 17 20 17 03 17 e6 16 ca 16 ad 16 91 16     Z.=. ...........
    1d88:	74 16 58 16 3b 16 1f 16 03 16 e7 15 cb 15 af 15     t.X.;...........
    1d98:	93 15 77 15 5b 15 3f 15 24 15 08 15 ec 14 d1 14     ..w.[.?.$.......
    1da8:	b5 14 9a 14 7f 14 63 14 48 14 2d 14 12 14 f7 13     ......c.H.-.....
    1db8:	dc 13 c1 13 a7 13 8c 13 71 13 57 13 3c 13 22 13     ........q.W.<.".
    1dc8:	07 13 ed 12 d3 12 b8 12 9e 12 84 12 6a 12 50 12     ............j.P.
    1dd8:	36 12 1c 12 03 12 e9 11 cf 11 b6 11 9c 11 83 11     6...............
    1de8:	6a 11 50 11 37 11 1e 11 05 11 ec 10 d3 10 ba 10     j.P.7...........
    1df8:	a1 10 89 10 70 10 57 10 3f 10 26 10 0e 10 f6 0f     ....p.W.?.&.....
    1e08:	dd 0f c5 0f ad 0f 95 0f 7d 0f 65 0f 4d 0f 35 0f     ........}.e.M.5.
    1e18:	1e 0f 06 0f ee 0e d7 0e bf 0e a8 0e 91 0e 79 0e     ..............y.
    1e28:	62 0e 4b 0e 34 0e 1d 0e 06 0e ef 0d d9 0d c2 0d     b.K.4...........
    1e38:	ab 0d 95 0d 7e 0d 68 0d 51 0d 3b 0d 25 0d 0f 0d     ....~.h.Q.;.%...
    1e48:	f9 0c e3 0c cd 0c b7 0c a1 0c 8b 0c 76 0c 60 0c     ............v.`.
    1e58:	4a 0c 35 0c 20 0c 0a 0c f5 0b e0 0b cb 0b b6 0b     J.5. ...........
    1e68:	a1 0b 8c 0b 77 0b 62 0b 4e 0b 39 0b 24 0b 10 0b     ....w.b.N.9.$...
    1e78:	fc 0a e7 0a d3 0a bf 0a ab 0a 97 0a 83 0a 6f 0a     ..............o.
    1e88:	5b 0a 47 0a 33 0a 20 0a 0c 0a f9 09 e5 09 d2 09     [.G.3. .........
    1e98:	bf 09 ac 09 98 09 85 09 72 09 5f 09 4d 09 3a 09     ........r._.M.:.
    1ea8:	27 09 15 09 02 09 ef 08 dd 08 cb 08 b8 08 a6 08     '...............
    1eb8:	94 08 82 08 70 08 5e 08 4c 08 3b 08 29 08 17 08     ....p.^.L.;.)...
    1ec8:	06 08 f4 07 e3 07 d1 07 c0 07 af 07 9e 07 8d 07     ................
    1ed8:	7c 07 6b 07 5a 07 49 07 39 07 28 07 18 07 07 07     |.k.Z.I.9.(.....
    1ee8:	f7 06 e6 06 d6 06 c6 06 b6 06 a6 06 96 06 86 06     ................
    1ef8:	76 06 67 06 57 06 47 06 38 06 28 06 19 06 0a 06     v.g.W.G.8.(.....
    1f08:	fb 05 eb 05 dc 05 cd 05 be 05 b0 05 a1 05 92 05     ................
    1f18:	83 05 75 05 66 05 58 05 4a 05 3b 05 2d 05 1f 05     ..u.f.X.J.;.-...
    1f28:	11 05 03 05 f5 04 e7 04 da 04 cc 04 be 04 b1 04     ................
    1f38:	a3 04 96 04 89 04 7c 04 6e 04 61 04 54 04 47 04     ......|.n.a.T.G.
    1f48:	3b 04 2e 04 21 04 14 04 08 04 fb 03 ef 03 e3 03     ;...!...........
    1f58:	d6 03 ca 03 be 03 b2 03 a6 03 9a 03 8f 03 83 03     ................
    1f68:	77 03 6c 03 60 03 55 03 49 03 3e 03 33 03 28 03     w.l.`.U.I.>.3.(.
    1f78:	1d 03 12 03 07 03 fc 02 f1 02 e7 02 dc 02 d1 02     ................
    1f88:	c7 02 bd 02 b2 02 a8 02 9e 02 94 02 8a 02 80 02     ................
    1f98:	76 02 6c 02 63 02 59 02 4f 02 46 02 3d 02 33 02     v.l.c.Y.O.F.=.3.
    1fa8:	2a 02 21 02 18 02 0f 02 06 02 fd 01 f4 01 ec 01     *.!.............
    1fb8:	e3 01 da 01 d2 01 c9 01 c1 01 b9 01 b1 01 a9 01     ................
    1fc8:	a1 01 99 01 91 01 89 01 81 01 7a 01 72 01 6b 01     ..........z.r.k.
    1fd8:	63 01 5c 01 55 01 4d 01 46 01 3f 01 38 01 31 01     c.\.U.M.F.?.8.1.
    1fe8:	2b 01 24 01 1d 01 17 01 10 01 0a 01 03 01 fd 00     +.$.............
    1ff8:	f7 00 f1 00 eb 00 e5 00 df 00 d9 00 d3 00 ce 00     ................
    2008:	c8 00 c3 00 bd 00 b8 00 b3 00 ad 00 a8 00 a3 00     ................
    2018:	9e 00 99 00 95 00 90 00 8b 00 87 00 82 00 7e 00     ..............~.
    2028:	79 00 75 00 71 00 6d 00 69 00 65 00 61 00 5d 00     y.u.q.m.i.e.a.].
    2038:	59 00 56 00 52 00 4f 00 4b 00 48 00 44 00 41 00     Y.V.R.O.K.H.D.A.
    2048:	3e 00 3b 00 38 00 35 00 32 00 30 00 2d 00 2a 00     >.;.8.5.2.0.-.*.
    2058:	28 00 26 00 23 00 21 00 1f 00 1d 00 1b 00 19 00     (.&.#.!.........
    2068:	17 00 15 00 13 00 11 00 10 00 0e 00 0d 00 0c 00     ................
    2078:	0a 00 09 00 08 00 07 00 06 00 05 00 04 00 04 00     ................
    2088:	03 00 02 00 02 00 01 00 01 00 01 00 01 00 01 00     ................
    2098:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
    20a8:	03 00 04 00 04 00 05 00 06 00 07 00 08 00 09 00     ................
    20b8:	0a 00 0c 00 0d 00 0e 00 10 00 11 00 13 00 15 00     ................
    20c8:	17 00 19 00 1b 00 1d 00 1f 00 21 00 23 00 26 00     ..........!.#.&.
    20d8:	28 00 2a 00 2d 00 30 00 32 00 35 00 38 00 3b 00     (.*.-.0.2.5.8.;.
    20e8:	3e 00 41 00 44 00 48 00 4b 00 4f 00 52 00 56 00     >.A.D.H.K.O.R.V.
    20f8:	59 00 5d 00 61 00 65 00 69 00 6d 00 71 00 75 00     Y.].a.e.i.m.q.u.
    2108:	79 00 7e 00 82 00 87 00 8b 00 90 00 95 00 99 00     y.~.............
    2118:	9e 00 a3 00 a8 00 ad 00 b3 00 b8 00 bd 00 c3 00     ................
    2128:	c8 00 ce 00 d3 00 d9 00 df 00 e5 00 eb 00 f1 00     ................
    2138:	f7 00 fd 00 03 01 0a 01 10 01 17 01 1d 01 24 01     ..............$.
    2148:	2b 01 31 01 38 01 3f 01 46 01 4d 01 55 01 5c 01     +.1.8.?.F.M.U.\.
    2158:	63 01 6b 01 72 01 7a 01 81 01 89 01 91 01 99 01     c.k.r.z.........
    2168:	a1 01 a9 01 b1 01 b9 01 c1 01 c9 01 d2 01 da 01     ................
    2178:	e3 01 ec 01 f4 01 fd 01 06 02 0f 02 18 02 21 02     ..............!.
    2188:	2a 02 33 02 3d 02 46 02 4f 02 59 02 63 02 6c 02     *.3.=.F.O.Y.c.l.
    2198:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bd 02     v...............
    21a8:	c7 02 d1 02 dc 02 e7 02 f1 02 fc 02 07 03 12 03     ................
    21b8:	1d 03 28 03 33 03 3e 03 49 03 55 03 60 03 6c 03     ..(.3.>.I.U.`.l.
    21c8:	77 03 83 03 8f 03 9a 03 a6 03 b2 03 be 03 ca 03     w...............
    21d8:	d6 03 e3 03 ef 03 fb 03 08 04 14 04 21 04 2e 04     ............!...
    21e8:	3b 04 47 04 54 04 61 04 6e 04 7c 04 89 04 96 04     ;.G.T.a.n.|.....
    21f8:	a3 04 b1 04 be 04 cc 04 da 04 e7 04 f5 04 03 05     ................
    2208:	11 05 1f 05 2d 05 3b 05 4a 05 58 05 66 05 75 05     ....-.;.J.X.f.u.
    2218:	83 05 92 05 a1 05 b0 05 be 05 cd 05 dc 05 eb 05     ................
    2228:	fb 05 0a 06 19 06 28 06 38 06 47 06 57 06 67 06     ......(.8.G.W.g.
    2238:	76 06 86 06 96 06 a6 06 b6 06 c6 06 d6 06 e6 06     v...............
    2248:	f7 06 07 07 18 07 28 07 39 07 49 07 5a 07 6b 07     ......(.9.I.Z.k.
    2258:	7c 07 8d 07 9e 07 af 07 c0 07 d1 07 e3 07 f4 07     |...............
    2268:	06 08 17 08 29 08 3b 08 4c 08 5e 08 70 08 82 08     ....).;.L.^.p...
    2278:	94 08 a6 08 b8 08 cb 08 dd 08 ef 08 02 09 15 09     ................
    2288:	27 09 3a 09 4d 09 5f 09 72 09 85 09 98 09 ac 09     '.:.M._.r.......
    2298:	bf 09 d2 09 e5 09 f9 09 0c 0a 20 0a 33 0a 47 0a     .......... .3.G.
    22a8:	5b 0a 6f 0a 83 0a 97 0a ab 0a bf 0a d3 0a e7 0a     [.o.............
    22b8:	fc 0a 10 0b 24 0b 39 0b 4e 0b 62 0b 77 0b 8c 0b     ....$.9.N.b.w...
    22c8:	a1 0b b6 0b cb 0b e0 0b f5 0b 0a 0c 20 0c 35 0c     ............ .5.
    22d8:	4a 0c 60 0c 76 0c 8b 0c a1 0c b7 0c cd 0c e3 0c     J.`.v...........
    22e8:	f9 0c 0f 0d 25 0d 3b 0d 51 0d 68 0d 7e 0d 95 0d     ....%.;.Q.h.~...
    22f8:	ab 0d c2 0d d9 0d ef 0d 06 0e 1d 0e 34 0e 4b 0e     ............4.K.
    2308:	62 0e 79 0e 91 0e a8 0e bf 0e d7 0e ee 0e 06 0f     b.y.............
    2318:	1e 0f 35 0f 4d 0f 65 0f 7d 0f 95 0f ad 0f c5 0f     ..5.M.e.}.......
    2328:	dd 0f f6 0f 0e 10 26 10 3f 10 57 10 70 10 89 10     ......&.?.W.p...
    2338:	a1 10 ba 10 d3 10 ec 10 05 11 1e 11 37 11 50 11     ............7.P.
    2348:	6a 11 83 11 9c 11 b6 11 cf 11 e9 11 03 12 1c 12     j...............
    2358:	36 12 50 12 6a 12 84 12 9e 12 b8 12 d3 12 ed 12     6.P.j...........
    2368:	07 13 22 13 3c 13 57 13 71 13 8c 13 a7 13 c1 13     ..".<.W.q.......
    2378:	dc 13 f7 13 12 14 2d 14 48 14 63 14 7f 14 9a 14     ......-.H.c.....
    2388:	b5 14 d1 14 ec 14 08 15 24 15 3f 15 5b 15 77 15     ........$.?.[.w.
    2398:	93 15 af 15 cb 15 e7 15 03 16 1f 16 3b 16 58 16     ............;.X.
    23a8:	74 16 91 16 ad 16 ca 16 e6 16 03 17 20 17 3d 17     t........... .=.
    23b8:	5a 17 77 17 94 17 b1 17 ce 17 eb 17 08 18 26 18     Z.w...........&.
    23c8:	43 18 61 18 7e 18 9c 18 ba 18 d7 18 f5 18 13 19     C.a.~...........
    23d8:	31 19 4f 19 6d 19 8b 19 a9 19 c7 19 e6 19 04 1a     1.O.m...........
    23e8:	22 1a 41 1a 5f 1a 7e 1a 9d 1a bb 1a da 1a f9 1a     ".A._.~.........
    23f8:	18 1b 37 1b 56 1b 75 1b 94 1b b3 1b d2 1b f2 1b     ..7.V.u.........
    2408:	11 1c 31 1c 50 1c 70 1c 8f 1c af 1c cf 1c ee 1c     ..1.P.p.........
    2418:	0e 1d 2e 1d 4e 1d 6e 1d 8e 1d ae 1d cf 1d ef 1d     ....N.n.........
    2428:	0f 1e 30 1e 50 1e 71 1e 91 1e b2 1e d2 1e f3 1e     ..0.P.q.........
    2438:	14 1f 35 1f 56 1f 77 1f 98 1f b9 1f da 1f fb 1f     ..5.V.w.........
    2448:	1d 20 3e 20 5f 20 81 20 a2 20 c4 20 e5 20 07 21     . > _ . . . . .!
    2458:	29 21 4b 21 6c 21 8e 21 b0 21 d2 21 f4 21 16 22     )!K!l!.!.!.!.!."
    2468:	39 22 5b 22 7d 22 a0 22 c2 22 e4 22 07 23 29 23     9"["}".".".".#)#
    2478:	4c 23 6f 23 92 23 b4 23 d7 23 fa 23 1d 24 40 24     L#o#.#.#.#.#.$@$
    2488:	63 24 86 24 a9 24 cd 24 f0 24 13 25 37 25 5a 25     c$.$.$.$.$.%7%Z%
    2498:	7e 25 a1 25 c5 25 e9 25 0c 26 30 26 54 26 78 26     ~%.%.%.%.&0&T&x&
    24a8:	9c 26 c0 26 e4 26 08 27 2c 27 50 27 75 27 99 27     .&.&.&.','P'u'.'
    24b8:	bd 27 e2 27 06 28 2b 28 4f 28 74 28 99 28 bd 28     .'.'.(+(O(t(.(.(
    24c8:	e2 28 07 29 2c 29 51 29 76 29 9b 29 c0 29 e5 29     .(.),)Q)v).).).)
    24d8:	0b 2a 30 2a 55 2a 7a 2a a0 2a c5 2a eb 2a 10 2b     .*0*U*z*.*.*.*.+
    24e8:	36 2b 5c 2b 82 2b a7 2b cd 2b f3 2b 19 2c 3f 2c     6+\+.+.+.+.+.,?,
    24f8:	65 2c 8b 2c b1 2c d7 2c fe 2c 24 2d 4a 2d 71 2d     e,.,.,.,.,$-J-q-
    2508:	97 2d be 2d e4 2d 0b 2e 31 2e 58 2e 7f 2e a6 2e     .-.-.-..1.X.....
    2518:	cc 2e f3 2e 1a 2f 41 2f 68 2f 8f 2f b6 2f de 2f     ...../A/h/./././
    2528:	05 30 2c 30 53 30 7b 30 a2 30 ca 30 f1 30 19 31     .0,0S0{0.0.0.0.1
    2538:	40 31 68 31 90 31 b7 31 df 31 07 32 2f 32 57 32     @1h1.1.1.1.2/2W2
    2548:	7f 32 a7 32 cf 32 f7 32 1f 33 47 33 70 33 98 33     .2.2.2.2.3G3p3.3
    2558:	c0 33 e9 33 11 34 3a 34 62 34 8b 34 b3 34 dc 34     .3.3.4:4b4.4.4.4
    2568:	05 35 2d 35 56 35 7f 35 a8 35 d1 35 fa 35 23 36     .5-5V5.5.5.5.5#6
    2578:	4c 36 75 36 9e 36 c7 36 f1 36 1a 37 43 37 6d 37     L6u6.6.6.6.7C7m7
    2588:	96 37 c0 37 e9 37 13 38 3c 38 66 38 90 38 b9 38     .7.7.7.8<8f8.8.8
    2598:	e3 38 0d 39 37 39 61 39 8b 39 b5 39 df 39 09 3a     .8.979a9.9.9.9.:
    25a8:	33 3a 5d 3a 87 3a b1 3a dc 3a 06 3b 30 3b 5b 3b     3:]:.:.:.:.;0;[;
    25b8:	85 3b b0 3b da 3b 05 3c 2f 3c 5a 3c 85 3c af 3c     .;.;.;.</<Z<.<.<
    25c8:	da 3c 05 3d 30 3d 5b 3d 86 3d b1 3d dc 3d 07 3e     .<.=0=[=.=.=.=.>
    25d8:	32 3e 5d 3e 88 3e b3 3e df 3e 0a 3f 35 3f 61 3f     2>]>.>.>.>.?5?a?
    25e8:	8c 3f b8 3f e3 3f 0f 40 3a 40 66 40 91 40 bd 40     .?.?.?.@:@f@.@.@
    25f8:	e9 40 14 41 40 41 6c 41 98 41 c4 41 f0 41 1c 42     .@.A@AlA.A.A.A.B
    2608:	48 42 74 42 a0 42 cc 42 f8 42 24 43 51 43 7d 43     HBtB.B.B.B$CQC}C
    2618:	a9 43 d6 43 02 44 2e 44 5b 44 87 44 b4 44 e0 44     .C.C.D.D[D.D.D.D
    2628:	0d 45 3a 45 66 45 93 45 c0 45 ed 45 19 46 46 46     .E:EfE.E.E.E.FFF
    2638:	73 46 a0 46 cd 46 fa 46 27 47 54 47 81 47 ae 47     sF.F.F.F'GTG.G.G
    2648:	db 47 09 48 36 48 63 48 90 48 be 48 eb 48 18 49     .G.H6HcH.H.H.H.I
    2658:	46 49 73 49 a1 49 ce 49 fc 49 29 4a 57 4a 85 4a     FIsI.I.I.I)JWJ.J
    2668:	b2 4a e0 4a 0e 4b 3c 4b 69 4b 97 4b c5 4b f3 4b     .J.J.K<KiK.K.K.K
    2678:	21 4c 4f 4c 7d 4c ab 4c d9 4c 07 4d 35 4d 63 4d     !LOL}L.L.L.M5McM
    2688:	92 4d c0 4d ee 4d 1c 4e 4b 4e 79 4e a7 4e d6 4e     .M.M.M.NKNyN.N.N
    2698:	04 4f 33 4f 61 4f 90 4f be 4f ed 4f 1b 50 4a 50     .O3OaO.O.O.O.PJP
    26a8:	79 50 a7 50 d6 50 05 51 33 51 62 51 91 51 c0 51     yP.P.P.Q3QbQ.Q.Q
    26b8:	ef 51 1e 52 4d 52 7c 52 ab 52 da 52 09 53 38 53     .Q.RMR|R.R.R.S8S
    26c8:	67 53 96 53 c5 53 f4 53 24 54 53 54 82 54 b1 54     gS.S.S.S$TST.T.T
    26d8:	e1 54 10 55 3f 55 6f 55 9e 55 ce 55 fd 55 2d 56     .T.U?UoU.U.U.U-V
    26e8:	5c 56 8c 56 bb 56 eb 56 1a 57 4a 57 7a 57 a9 57     \V.V.V.V.WJWzW.W
    26f8:	d9 57 09 58 39 58 68 58 98 58 c8 58 f8 58 28 59     .W.X9XhX.X.X.X(Y
    2708:	58 59 88 59 b8 59 e8 59 18 5a 48 5a 78 5a a8 5a     XY.Y.Y.Y.ZHZxZ.Z
    2718:	d8 5a 08 5b 38 5b 68 5b 98 5b c9 5b f9 5b 29 5c     .Z.[8[h[.[.[.[)\
    2728:	59 5c 8a 5c ba 5c ea 5c 1b 5d 4b 5d 7b 5d ac 5d     Y\.\.\.\.]K]{].]
    2738:	dc 5d 0d 5e 3d 5e 6e 5e 9e 5e cf 5e ff 5e 30 5f     .].^=^n^.^.^.^0_
    2748:	60 5f 91 5f c2 5f f2 5f 23 60 54 60 84 60 b5 60     `_._._._#`T`.`.`
    2758:	e6 60 17 61 47 61 78 61 a9 61 da 61 0b 62 3c 62     .`.aGaxa.a.a.b<b
    2768:	6c 62 9d 62 ce 62 ff 62 30 63 61 63 92 63 c3 63     lb.b.b.b0cac.c.c
    2778:	f4 63 25 64 56 64 87 64 b9 64 ea 64 1b 65 4c 65     .c%dVd.d.d.d.eLe
    2788:	7d 65 ae 65 df 65 11 66 42 66 73 66 a4 66 d6 66     }e.e.e.fBfsf.f.f
    2798:	07 67 38 67 6a 67 9b 67 cc 67 fe 67 2f 68 60 68     .g8gjg.g.g.g/h`h
    27a8:	92 68 c3 68 f5 68 26 69 58 69 89 69 bb 69 ec 69     .h.h.h&iXi.i.i.i
    27b8:	1e 6a 4f 6a 81 6a b2 6a e4 6a 15 6b 47 6b 79 6b     .jOj.j.j.j.kGkyk
    27c8:	aa 6b dc 6b 0d 6c 3f 6c 71 6c a2 6c d4 6c 06 6d     .k.k.l?lql.l.l.m
    27d8:	38 6d 69 6d 9b 6d cd 6d ff 6d 30 6e 62 6e 94 6e     8mim.m.m.m0nbn.n
    27e8:	c6 6e f8 6e 29 6f 5b 6f 8d 6f bf 6f f1 6f 23 70     .n.n)o[o.o.o.o#p
    27f8:	54 70 86 70 b8 70 ea 70 1c 71 4e 71 80 71 b2 71     Tp.p.p.p.qNq.q.q
    2808:	e4 71 16 72 48 72 7a 72 ac 72 de 72 10 73 42 73     .q.rHrzr.r.r.sBs
    2818:	74 73 a6 73 d8 73 0a 74 3c 74 6e 74 a0 74 d2 74     ts.s.s.t<tnt.t.t
    2828:	04 75 36 75 68 75 9a 75 cd 75 ff 75 31 76 63 76     .u6uhu.u.u.u1vcv
    2838:	95 76 c7 76 f9 76 2b 77 5e 77 90 77 c2 77 f4 77     .v.v.v+w^w.w.w.w
    2848:	26 78 58 78 8b 78 bd 78 ef 78 21 79 53 79 85 79     &xXx.x.x.x!ySy.y
    2858:	b8 79 ea 79 1c 7a 4e 7a 81 7a b3 7a e5 7a 17 7b     .y.y.zNz.z.z.z.{
    2868:	49 7b 7c 7b ae 7b e0 7b 12 7c 45 7c 77 7c a9 7c     I{|{.{.{.|E|w|.|
    2878:	db 7c 0e 7d 40 7d 72 7d a4 7d d7 7d 09 7e 3b 7e     .|.}@}r}.}.}.~;~
    2888:	6d 7e a0 7e d2 7e 04 7f 36 7f 69 7f 9b 7f cd 7f     m~.~.~..6.i.....

00002898 <__ctors_end>:
    2898:	11 24       	eor	r1, r1
    289a:	1f be       	out	0x3f, r1	; 63
    289c:	cf ef       	ldi	r28, 0xFF	; 255
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	df e5       	ldi	r29, 0x5F	; 95
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	00 e0       	ldi	r16, 0x00	; 0
    28a6:	0c bf       	out	0x3c, r16	; 60

000028a8 <__do_copy_data>:
    28a8:	16 e2       	ldi	r17, 0x26	; 38
    28aa:	a0 e0       	ldi	r26, 0x00	; 0
    28ac:	b0 e2       	ldi	r27, 0x20	; 32
    28ae:	ea ea       	ldi	r30, 0xAA	; 170
    28b0:	ff e9       	ldi	r31, 0x9F	; 159
    28b2:	00 e0       	ldi	r16, 0x00	; 0
    28b4:	0b bf       	out	0x3b, r16	; 59
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <__do_copy_data+0x14>
    28b8:	07 90       	elpm	r0, Z+
    28ba:	0d 92       	st	X+, r0
    28bc:	ac 3e       	cpi	r26, 0xEC	; 236
    28be:	b1 07       	cpc	r27, r17
    28c0:	d9 f7       	brne	.-10     	; 0x28b8 <__do_copy_data+0x10>

000028c2 <__do_clear_bss>:
    28c2:	2b e2       	ldi	r18, 0x2B	; 43
    28c4:	ac ee       	ldi	r26, 0xEC	; 236
    28c6:	b6 e2       	ldi	r27, 0x26	; 38
    28c8:	01 c0       	rjmp	.+2      	; 0x28cc <.do_clear_bss_start>

000028ca <.do_clear_bss_loop>:
    28ca:	1d 92       	st	X+, r1

000028cc <.do_clear_bss_start>:
    28cc:	a5 32       	cpi	r26, 0x25	; 37
    28ce:	b2 07       	cpc	r27, r18
    28d0:	e1 f7       	brne	.-8      	; 0x28ca <.do_clear_bss_loop>
    28d2:	0e 94 0c 3a 	call	0x7418	; 0x7418 <main>
    28d6:	0c 94 d3 4f 	jmp	0x9fa6	; 0x9fa6 <_exit>

000028da <__bad_interrupt>:
    28da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000028de <nvm_init>:
#include "conf_nvm.h"
#include "nvm.h"

status_code_t nvm_init(mem_type_t mem)
{
	switch (mem) {
    28de:	83 30       	cpi	r24, 0x03	; 3
    28e0:	10 f4       	brcc	.+4      	; 0x28e6 <nvm_init+0x8>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	08 95       	ret
		}
		break;
#endif

	default:
		return ERR_INVALID_ARG;
    28e6:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
    28e8:	08 95       	ret

000028ea <dma_interrupt>:
void dma_disable(void)
{
	DMA.CTRL = 0;
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	48 2f       	mov	r20, r24
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	fa 01       	movw	r30, r20
    28f4:	71 96       	adiw	r30, 0x11	; 17
    28f6:	e2 95       	swap	r30
    28f8:	f2 95       	swap	r31
    28fa:	f0 7f       	andi	r31, 0xF0	; 240
    28fc:	fe 27       	eor	r31, r30
    28fe:	e0 7f       	andi	r30, 0xF0	; 240
    2900:	fe 27       	eor	r31, r30
    2902:	a0 e0       	ldi	r26, 0x00	; 0
    2904:	b1 e0       	ldi	r27, 0x01	; 1
    2906:	14 96       	adiw	r26, 0x04	; 4
    2908:	9c 91       	ld	r25, X
    290a:	14 97       	sbiw	r26, 0x04	; 4
    290c:	13 96       	adiw	r26, 0x03	; 3
    290e:	6c 91       	ld	r22, X
    2910:	da 01       	movw	r26, r20
    2912:	14 96       	adiw	r26, 0x04	; 4
    2914:	21 e0       	ldi	r18, 0x01	; 1
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	e9 01       	movw	r28, r18
    291a:	08 2e       	mov	r0, r24
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <dma_interrupt+0x38>
    291e:	cc 0f       	add	r28, r28
    2920:	dd 1f       	adc	r29, r29
    2922:	0a 94       	dec	r0
    2924:	e2 f7       	brpl	.-8      	; 0x291e <dma_interrupt+0x34>
    2926:	0a 2e       	mov	r0, r26
    2928:	02 c0       	rjmp	.+4      	; 0x292e <dma_interrupt+0x44>
    292a:	22 0f       	add	r18, r18
    292c:	33 1f       	adc	r19, r19
    292e:	0a 94       	dec	r0
    2930:	e2 f7       	brpl	.-8      	; 0x292a <dma_interrupt+0x40>
    2932:	2c 2b       	or	r18, r28
    2934:	62 23       	and	r22, r18
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	eb 01       	movw	r28, r22
    293a:	0a 2e       	mov	r0, r26
    293c:	02 c0       	rjmp	.+4      	; 0x2942 <dma_interrupt+0x58>
    293e:	d5 95       	asr	r29
    2940:	c7 95       	ror	r28
    2942:	0a 94       	dec	r0
    2944:	e2 f7       	brpl	.-8      	; 0x293e <dma_interrupt+0x54>
    2946:	c0 fd       	sbrc	r28, 0
    2948:	1a c0       	rjmp	.+52     	; 0x297e <dma_interrupt+0x94>
    294a:	08 2e       	mov	r0, r24
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <dma_interrupt+0x68>
    294e:	75 95       	asr	r23
    2950:	67 95       	ror	r22
    2952:	0a 94       	dec	r0
    2954:	e2 f7       	brpl	.-8      	; 0x294e <dma_interrupt+0x64>
    2956:	60 fd       	sbrc	r22, 0
    2958:	14 c0       	rjmp	.+40     	; 0x2982 <dma_interrupt+0x98>
    295a:	29 23       	and	r18, r25
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	b9 01       	movw	r22, r18
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <dma_interrupt+0x7c>
    2962:	75 95       	asr	r23
    2964:	67 95       	ror	r22
    2966:	aa 95       	dec	r26
    2968:	e2 f7       	brpl	.-8      	; 0x2962 <dma_interrupt+0x78>
    296a:	60 fd       	sbrc	r22, 0
    296c:	0c c0       	rjmp	.+24     	; 0x2986 <dma_interrupt+0x9c>
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <dma_interrupt+0x8a>
    2970:	35 95       	asr	r19
    2972:	27 95       	ror	r18
    2974:	8a 95       	dec	r24
    2976:	e2 f7       	brpl	.-8      	; 0x2970 <dma_interrupt+0x86>
    2978:	82 2f       	mov	r24, r18
    297a:	81 70       	andi	r24, 0x01	; 1
    297c:	05 c0       	rjmp	.+10     	; 0x2988 <dma_interrupt+0x9e>
    297e:	84 e0       	ldi	r24, 0x04	; 4
    2980:	03 c0       	rjmp	.+6      	; 0x2988 <dma_interrupt+0x9e>
    2982:	83 e0       	ldi	r24, 0x03	; 3
    2984:	01 c0       	rjmp	.+2      	; 0x2988 <dma_interrupt+0x9e>
    2986:	82 e0       	ldi	r24, 0x02	; 2
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	90 63       	ori	r25, 0x30	; 48
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	44 0f       	add	r20, r20
    2990:	55 1f       	adc	r21, r21
    2992:	fa 01       	movw	r30, r20
    2994:	ef 50       	subi	r30, 0x0F	; 15
    2996:	f5 4d       	sbci	r31, 0xD5	; 213
    2998:	01 90       	ld	r0, Z+
    299a:	f0 81       	ld	r31, Z
    299c:	e0 2d       	mov	r30, r0
    299e:	30 97       	sbiw	r30, 0x00	; 0
    29a0:	09 f0       	breq	.+2      	; 0x29a4 <dma_interrupt+0xba>
    29a2:	19 95       	eicall
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	08 95       	ret

000029aa <dma_enable>:
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	1f 92       	push	r1
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	61 e0       	ldi	r22, 0x01	; 1
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    29bc:	80 91 10 2b 	lds	r24, 0x2B10	; 0x802b10 <sleepmgr_locks+0x1>
    29c0:	8f 3f       	cpi	r24, 0xFF	; 255
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <dma_enable+0x1c>
    29c4:	ff cf       	rjmp	.-2      	; 0x29c4 <dma_enable+0x1a>
    29c6:	8f b7       	in	r24, 0x3f	; 63
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	f8 94       	cli
    29cc:	99 81       	ldd	r25, Y+1	; 0x01
    29ce:	ef e0       	ldi	r30, 0x0F	; 15
    29d0:	fb e2       	ldi	r31, 0x2B	; 43
    29d2:	81 81       	ldd	r24, Z+1	; 0x01
    29d4:	8f 5f       	subi	r24, 0xFF	; 255
    29d6:	81 83       	std	Z+1, r24	; 0x01
    29d8:	9f bf       	out	0x3f, r25	; 63
    29da:	e0 e0       	ldi	r30, 0x00	; 0
    29dc:	f1 e0       	ldi	r31, 0x01	; 1
    29de:	80 e4       	ldi	r24, 0x40	; 64
    29e0:	80 83       	st	Z, r24
    29e2:	80 e8       	ldi	r24, 0x80	; 128
    29e4:	80 83       	st	Z, r24
    29e6:	0f 90       	pop	r0
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	08 95       	ret

000029ee <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    29ee:	e8 2f       	mov	r30, r24
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	ee 0f       	add	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	ef 50       	subi	r30, 0x0F	; 15
    29f8:	f5 4d       	sbci	r31, 0xD5	; 213
    29fa:	60 83       	st	Z, r22
    29fc:	71 83       	std	Z+1, r23	; 0x01
    29fe:	08 95       	ret

00002a00 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    2a00:	1f 92       	push	r1
    2a02:	0f 92       	push	r0
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	0f 92       	push	r0
    2a08:	11 24       	eor	r1, r1
    2a0a:	0b b6       	in	r0, 0x3b	; 59
    2a0c:	0f 92       	push	r0
    2a0e:	2f 93       	push	r18
    2a10:	3f 93       	push	r19
    2a12:	4f 93       	push	r20
    2a14:	5f 93       	push	r21
    2a16:	6f 93       	push	r22
    2a18:	7f 93       	push	r23
    2a1a:	8f 93       	push	r24
    2a1c:	9f 93       	push	r25
    2a1e:	af 93       	push	r26
    2a20:	bf 93       	push	r27
    2a22:	ef 93       	push	r30
    2a24:	ff 93       	push	r31
	dma_interrupt(0);
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	60 df       	rcall	.-320    	; 0x28ea <dma_interrupt>
}
    2a2a:	ff 91       	pop	r31
    2a2c:	ef 91       	pop	r30
    2a2e:	bf 91       	pop	r27
    2a30:	af 91       	pop	r26
    2a32:	9f 91       	pop	r25
    2a34:	8f 91       	pop	r24
    2a36:	7f 91       	pop	r23
    2a38:	6f 91       	pop	r22
    2a3a:	5f 91       	pop	r21
    2a3c:	4f 91       	pop	r20
    2a3e:	3f 91       	pop	r19
    2a40:	2f 91       	pop	r18
    2a42:	0f 90       	pop	r0
    2a44:	0b be       	out	0x3b, r0	; 59
    2a46:	0f 90       	pop	r0
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	0f 90       	pop	r0
    2a4c:	1f 90       	pop	r1
    2a4e:	18 95       	reti

00002a50 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    2a50:	1f 92       	push	r1
    2a52:	0f 92       	push	r0
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	0f 92       	push	r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	0b b6       	in	r0, 0x3b	; 59
    2a5c:	0f 92       	push	r0
    2a5e:	2f 93       	push	r18
    2a60:	3f 93       	push	r19
    2a62:	4f 93       	push	r20
    2a64:	5f 93       	push	r21
    2a66:	6f 93       	push	r22
    2a68:	7f 93       	push	r23
    2a6a:	8f 93       	push	r24
    2a6c:	9f 93       	push	r25
    2a6e:	af 93       	push	r26
    2a70:	bf 93       	push	r27
    2a72:	ef 93       	push	r30
    2a74:	ff 93       	push	r31
	dma_interrupt(1);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	38 df       	rcall	.-400    	; 0x28ea <dma_interrupt>
}
    2a7a:	ff 91       	pop	r31
    2a7c:	ef 91       	pop	r30
    2a7e:	bf 91       	pop	r27
    2a80:	af 91       	pop	r26
    2a82:	9f 91       	pop	r25
    2a84:	8f 91       	pop	r24
    2a86:	7f 91       	pop	r23
    2a88:	6f 91       	pop	r22
    2a8a:	5f 91       	pop	r21
    2a8c:	4f 91       	pop	r20
    2a8e:	3f 91       	pop	r19
    2a90:	2f 91       	pop	r18
    2a92:	0f 90       	pop	r0
    2a94:	0b be       	out	0x3b, r0	; 59
    2a96:	0f 90       	pop	r0
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	0f 90       	pop	r0
    2a9c:	1f 90       	pop	r1
    2a9e:	18 95       	reti

00002aa0 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    2aa0:	1f 92       	push	r1
    2aa2:	0f 92       	push	r0
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	0f 92       	push	r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	0b b6       	in	r0, 0x3b	; 59
    2aac:	0f 92       	push	r0
    2aae:	2f 93       	push	r18
    2ab0:	3f 93       	push	r19
    2ab2:	4f 93       	push	r20
    2ab4:	5f 93       	push	r21
    2ab6:	6f 93       	push	r22
    2ab8:	7f 93       	push	r23
    2aba:	8f 93       	push	r24
    2abc:	9f 93       	push	r25
    2abe:	af 93       	push	r26
    2ac0:	bf 93       	push	r27
    2ac2:	ef 93       	push	r30
    2ac4:	ff 93       	push	r31
	dma_interrupt(2);
    2ac6:	82 e0       	ldi	r24, 0x02	; 2
    2ac8:	10 df       	rcall	.-480    	; 0x28ea <dma_interrupt>
}
    2aca:	ff 91       	pop	r31
    2acc:	ef 91       	pop	r30
    2ace:	bf 91       	pop	r27
    2ad0:	af 91       	pop	r26
    2ad2:	9f 91       	pop	r25
    2ad4:	8f 91       	pop	r24
    2ad6:	7f 91       	pop	r23
    2ad8:	6f 91       	pop	r22
    2ada:	5f 91       	pop	r21
    2adc:	4f 91       	pop	r20
    2ade:	3f 91       	pop	r19
    2ae0:	2f 91       	pop	r18
    2ae2:	0f 90       	pop	r0
    2ae4:	0b be       	out	0x3b, r0	; 59
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

00002af0 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    2af0:	1f 92       	push	r1
    2af2:	0f 92       	push	r0
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	0f 92       	push	r0
    2af8:	11 24       	eor	r1, r1
    2afa:	0b b6       	in	r0, 0x3b	; 59
    2afc:	0f 92       	push	r0
    2afe:	2f 93       	push	r18
    2b00:	3f 93       	push	r19
    2b02:	4f 93       	push	r20
    2b04:	5f 93       	push	r21
    2b06:	6f 93       	push	r22
    2b08:	7f 93       	push	r23
    2b0a:	8f 93       	push	r24
    2b0c:	9f 93       	push	r25
    2b0e:	af 93       	push	r26
    2b10:	bf 93       	push	r27
    2b12:	ef 93       	push	r30
    2b14:	ff 93       	push	r31
	dma_interrupt(3);
    2b16:	83 e0       	ldi	r24, 0x03	; 3
    2b18:	e8 de       	rcall	.-560    	; 0x28ea <dma_interrupt>
}
    2b1a:	ff 91       	pop	r31
    2b1c:	ef 91       	pop	r30
    2b1e:	bf 91       	pop	r27
    2b20:	af 91       	pop	r26
    2b22:	9f 91       	pop	r25
    2b24:	8f 91       	pop	r24
    2b26:	7f 91       	pop	r23
    2b28:	6f 91       	pop	r22
    2b2a:	5f 91       	pop	r21
    2b2c:	4f 91       	pop	r20
    2b2e:	3f 91       	pop	r19
    2b30:	2f 91       	pop	r18
    2b32:	0f 90       	pop	r0
    2b34:	0b be       	out	0x3b, r0	; 59
    2b36:	0f 90       	pop	r0
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	0f 90       	pop	r0
    2b3c:	1f 90       	pop	r1
    2b3e:	18 95       	reti

00002b40 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	1f 92       	push	r1
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    2b4c:	e8 2f       	mov	r30, r24
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	71 96       	adiw	r30, 0x11	; 17
    2b52:	e2 95       	swap	r30
    2b54:	f2 95       	swap	r31
    2b56:	f0 7f       	andi	r31, 0xF0	; 240
    2b58:	fe 27       	eor	r31, r30
    2b5a:	e0 7f       	andi	r30, 0xF0	; 240
    2b5c:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2b5e:	8f b7       	in	r24, 0x3f	; 63
    2b60:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2b62:	f8 94       	cli
	return flags;
    2b64:	99 81       	ldd	r25, Y+1	; 0x01
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    2b66:	19 96       	adiw	r26, 0x09	; 9
    2b68:	8c 91       	ld	r24, X
    2b6a:	19 97       	sbiw	r26, 0x09	; 9
    2b6c:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    2b6e:	1a 96       	adiw	r26, 0x0a	; 10
    2b70:	8c 91       	ld	r24, X
    2b72:	1a 97       	sbiw	r26, 0x0a	; 10
    2b74:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    2b76:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    2b78:	17 96       	adiw	r26, 0x07	; 7
    2b7a:	8c 91       	ld	r24, X
    2b7c:	17 97       	sbiw	r26, 0x07	; 7
    2b7e:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    2b80:	18 96       	adiw	r26, 0x08	; 8
    2b82:	8c 91       	ld	r24, X
    2b84:	18 97       	sbiw	r26, 0x08	; 8
    2b86:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    2b88:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    2b8a:	12 96       	adiw	r26, 0x02	; 2
    2b8c:	8c 91       	ld	r24, X
    2b8e:	12 97       	sbiw	r26, 0x02	; 2
    2b90:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
    2b92:	13 96       	adiw	r26, 0x03	; 3
    2b94:	8c 91       	ld	r24, X
    2b96:	13 97       	sbiw	r26, 0x03	; 3
    2b98:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
    2b9a:	14 96       	adiw	r26, 0x04	; 4
    2b9c:	2d 91       	ld	r18, X+
    2b9e:	3c 91       	ld	r19, X
    2ba0:	15 97       	sbiw	r26, 0x05	; 5
    2ba2:	24 83       	std	Z+4, r18	; 0x04
    2ba4:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    2ba6:	16 96       	adiw	r26, 0x06	; 6
    2ba8:	8c 91       	ld	r24, X
    2baa:	16 97       	sbiw	r26, 0x06	; 6
    2bac:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
    2bae:	11 96       	adiw	r26, 0x01	; 1
    2bb0:	8c 91       	ld	r24, X
    2bb2:	11 97       	sbiw	r26, 0x01	; 1
    2bb4:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    2bb6:	8c 91       	ld	r24, X
    2bb8:	8f 77       	andi	r24, 0x7F	; 127
    2bba:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2bbc:	9f bf       	out	0x3f, r25	; 63
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
}
    2bbe:	0f 90       	pop	r0
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	08 95       	ret

00002bc6 <__portable_avr_delay_cycles>:
				vbat_status = VBAT_STATUS_OK;
			}
		}
	}
	return vbat_status;
}
    2bc6:	04 c0       	rjmp	.+8      	; 0x2bd0 <__portable_avr_delay_cycles+0xa>
    2bc8:	61 50       	subi	r22, 0x01	; 1
    2bca:	71 09       	sbc	r23, r1
    2bcc:	81 09       	sbc	r24, r1
    2bce:	91 09       	sbc	r25, r1
    2bd0:	61 15       	cp	r22, r1
    2bd2:	71 05       	cpc	r23, r1
    2bd4:	81 05       	cpc	r24, r1
    2bd6:	91 05       	cpc	r25, r1
    2bd8:	b9 f7       	brne	.-18     	; 0x2bc8 <__portable_avr_delay_cycles+0x2>
    2bda:	08 95       	ret

00002bdc <rtc_get_time>:
    2bdc:	80 e1       	ldi	r24, 0x10	; 16
    2bde:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    2be2:	e0 e2       	ldi	r30, 0x20	; 32
    2be4:	f4 e0       	ldi	r31, 0x04	; 4
    2be6:	81 81       	ldd	r24, Z+1	; 0x01
    2be8:	84 fd       	sbrc	r24, 4
    2bea:	fd cf       	rjmp	.-6      	; 0x2be6 <rtc_get_time+0xa>
    2bec:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    2bf0:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    2bf4:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    2bf8:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    2bfc:	08 95       	ret

00002bfe <rtc_set_callback>:
    2bfe:	80 93 f9 2a 	sts	0x2AF9, r24	; 0x802af9 <rtc_data>
    2c02:	90 93 fa 2a 	sts	0x2AFA, r25	; 0x802afa <rtc_data+0x1>
    2c06:	08 95       	ret

00002c08 <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2c0c:	64 e0       	ldi	r22, 0x04	; 4
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    2c14:	c0 ef       	ldi	r28, 0xF0	; 240
    2c16:	d0 e0       	ldi	r29, 0x00	; 0
    2c18:	88 81       	ld	r24, Y
    2c1a:	82 60       	ori	r24, 0x02	; 2
    2c1c:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    2c1e:	61 e0       	ldi	r22, 0x01	; 1
    2c20:	80 ef       	ldi	r24, 0xF0	; 240
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	0e 94 08 48 	call	0x9010	; 0x9010 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    2c28:	88 81       	ld	r24, Y
    2c2a:	84 60       	ori	r24, 0x04	; 4
    2c2c:	88 83       	st	Y, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    2c2e:	69 ee       	ldi	r22, 0xE9	; 233
    2c30:	73 e0       	ldi	r23, 0x03	; 3
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	c7 df       	rcall	.-114    	; 0x2bc6 <__portable_avr_delay_cycles>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK | RTC32_CLOCK_HIGHESR;
    2c38:	88 81       	ld	r24, Y
    2c3a:	88 61       	ori	r24, 0x18	; 24
    2c3c:	88 83       	st	Y, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    2c3e:	e0 ef       	ldi	r30, 0xF0	; 240
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	81 81       	ldd	r24, Z+1	; 0x01
    2c44:	83 ff       	sbrs	r24, 3
    2c46:	fd cf       	rjmp	.-6      	; 0x2c42 <rtc_init+0x3a>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    2c48:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c4c:	e0 e2       	ldi	r30, 0x20	; 32
    2c4e:	f4 e0       	ldi	r31, 0x04	; 4
    2c50:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    2c52:	80 fd       	sbrc	r24, 0
    2c54:	fd cf       	rjmp	.-6      	; 0x2c50 <rtc_init+0x48>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    2c56:	e0 e2       	ldi	r30, 0x20	; 32
    2c58:	f4 e0       	ldi	r31, 0x04	; 4
    2c5a:	8f ef       	ldi	r24, 0xFF	; 255
    2c5c:	9f ef       	ldi	r25, 0xFF	; 255
    2c5e:	dc 01       	movw	r26, r24
    2c60:	80 87       	std	Z+8, r24	; 0x08
    2c62:	91 87       	std	Z+9, r25	; 0x09
    2c64:	a2 87       	std	Z+10, r26	; 0x0a
    2c66:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    2c68:	14 82       	std	Z+4, r1	; 0x04
    2c6a:	15 82       	std	Z+5, r1	; 0x05
    2c6c:	16 82       	std	Z+6, r1	; 0x06
    2c6e:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c70:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    2c72:	80 fd       	sbrc	r24, 0
    2c74:	fd cf       	rjmp	.-6      	; 0x2c70 <rtc_init+0x68>

	RTC32.INTCTRL = 0;
    2c76:	e0 e2       	ldi	r30, 0x20	; 32
    2c78:	f4 e0       	ldi	r31, 0x04	; 4
    2c7a:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    2c80:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    2c82:	80 fd       	sbrc	r24, 0
    2c84:	fd cf       	rjmp	.-6      	; 0x2c80 <rtc_init+0x78>
}
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	08 95       	ret

00002c8c <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    2c8c:	1f 92       	push	r1
    2c8e:	0f 92       	push	r0
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	0f 92       	push	r0
    2c94:	11 24       	eor	r1, r1
    2c96:	0b b6       	in	r0, 0x3b	; 59
    2c98:	0f 92       	push	r0
    2c9a:	2f 93       	push	r18
    2c9c:	3f 93       	push	r19
    2c9e:	4f 93       	push	r20
    2ca0:	5f 93       	push	r21
    2ca2:	6f 93       	push	r22
    2ca4:	7f 93       	push	r23
    2ca6:	8f 93       	push	r24
    2ca8:	9f 93       	push	r25
    2caa:	af 93       	push	r26
    2cac:	bf 93       	push	r27
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	ef 93       	push	r30
    2cb4:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    2cb6:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    2cba:	c0 91 f9 2a 	lds	r28, 0x2AF9	; 0x802af9 <rtc_data>
    2cbe:	d0 91 fa 2a 	lds	r29, 0x2AFA	; 0x802afa <rtc_data+0x1>
    2cc2:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    2cc4:	19 f0       	breq	.+6      	; 0x2ccc <__vector_11+0x40>
    2cc6:	8a df       	rcall	.-236    	; 0x2bdc <rtc_get_time>
    2cc8:	fe 01       	movw	r30, r28
}
    2cca:	19 95       	eicall
    2ccc:	ff 91       	pop	r31
    2cce:	ef 91       	pop	r30
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	bf 91       	pop	r27
    2cd6:	af 91       	pop	r26
    2cd8:	9f 91       	pop	r25
    2cda:	8f 91       	pop	r24
    2cdc:	7f 91       	pop	r23
    2cde:	6f 91       	pop	r22
    2ce0:	5f 91       	pop	r21
    2ce2:	4f 91       	pop	r20
    2ce4:	3f 91       	pop	r19
    2ce6:	2f 91       	pop	r18
    2ce8:	0f 90       	pop	r0
    2cea:	0b be       	out	0x3b, r0	; 59
    2cec:	0f 90       	pop	r0
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	0f 90       	pop	r0
    2cf2:	1f 90       	pop	r1
    2cf4:	18 95       	reti

00002cf6 <get_interpolated_sine>:
/* Linear interpolation with noise */
uint16_t get_interpolated_sine(uint16_t phase)
{
	/* SINE LUT */
	uint16_t left_x, rght_x, left_y, rght_y;
	rght_x = left_x = phase >> 4;
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	f2 95       	swap	r31
    2cfa:	e2 95       	swap	r30
    2cfc:	ef 70       	andi	r30, 0x0F	; 15
    2cfe:	ef 27       	eor	r30, r31
    2d00:	ff 70       	andi	r31, 0x0F	; 15
    2d02:	ef 27       	eor	r30, r31
	if (++rght_x >= PM_SINE_COUNT) {
    2d04:	9f 01       	movw	r18, r30
    2d06:	2f 5f       	subi	r18, 0xFF	; 255
    2d08:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0a:	21 15       	cp	r18, r1
    2d0c:	40 e1       	ldi	r20, 0x10	; 16
    2d0e:	34 07       	cpc	r19, r20
    2d10:	08 f0       	brcs	.+2      	; 0x2d14 <get_interpolated_sine+0x1e>
		rght_x -= PM_SINE_COUNT;
    2d12:	30 51       	subi	r19, 0x10	; 16
	}
	left_y = PGM_READ_WORD(&(PM_SINE[left_x]));
    2d14:	ee 0f       	add	r30, r30
    2d16:	ff 1f       	adc	r31, r31
    2d18:	e8 56       	subi	r30, 0x68	; 104
    2d1a:	f7 4f       	sbci	r31, 0xF7	; 247
    2d1c:	45 91       	lpm	r20, Z+
    2d1e:	54 91       	lpm	r21, Z
	rght_y = PGM_READ_WORD(&(PM_SINE[rght_x]));
    2d20:	f9 01       	movw	r30, r18
    2d22:	ee 0f       	add	r30, r30
    2d24:	ff 1f       	adc	r31, r31
    2d26:	e8 56       	subi	r30, 0x68	; 104
    2d28:	f7 4f       	sbci	r31, 0xF7	; 247
    2d2a:	25 91       	lpm	r18, Z+
    2d2c:	34 91       	lpm	r19, Z

	/* INTERPOLATION LUT */
	uint16_t idx_y	= (uint16_t)((uint32_t)PM_SINE_MAX_STEP + rght_y - left_y);		// PM_SINE_MAX_STEP = +/-50
	uint16_t idx	= (idx_y << 4) | (phase & 0x0f);
	return left_y + (int8_t)PGM_READ_BYTE(&(PM_SINE_IP[idx]));
    2d2e:	f9 01       	movw	r30, r18
    2d30:	f4 96       	adiw	r30, 0x34	; 52
    2d32:	e4 1b       	sub	r30, r20
    2d34:	f5 0b       	sbc	r31, r21
    2d36:	e2 95       	swap	r30
    2d38:	f2 95       	swap	r31
    2d3a:	f0 7f       	andi	r31, 0xF0	; 240
    2d3c:	fe 27       	eor	r31, r30
    2d3e:	e0 7f       	andi	r30, 0xF0	; 240
    2d40:	fe 27       	eor	r31, r30
    2d42:	8f 70       	andi	r24, 0x0F	; 15
    2d44:	99 27       	eor	r25, r25
    2d46:	e8 2b       	or	r30, r24
    2d48:	f9 2b       	or	r31, r25
    2d4a:	e8 5e       	subi	r30, 0xE8	; 232
    2d4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d4e:	e4 91       	lpm	r30, Z
}
    2d50:	ca 01       	movw	r24, r20
    2d52:	8e 0f       	add	r24, r30
    2d54:	91 1d       	adc	r25, r1
    2d56:	e7 fd       	sbrc	r30, 7
    2d58:	9a 95       	dec	r25
    2d5a:	08 95       	ret

00002d5c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2d5c:	04 c0       	rjmp	.+8      	; 0x2d66 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2d5e:	61 50       	subi	r22, 0x01	; 1
    2d60:	71 09       	sbc	r23, r1
    2d62:	81 09       	sbc	r24, r1
    2d64:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2d66:	61 15       	cp	r22, r1
    2d68:	71 05       	cpc	r23, r1
    2d6a:	81 05       	cpc	r24, r1
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	b9 f7       	brne	.-18     	; 0x2d5e <__portable_avr_delay_cycles+0x2>
    2d70:	08 95       	ret

00002d72 <twi2_waitUntilReady>:
}
#endif


static void twi2_waitUntilReady(void)
{
    2d72:	cf 92       	push	r12
    2d74:	df 92       	push	r13
    2d76:	ef 92       	push	r14
    2d78:	ff 92       	push	r15
    2d7a:	0f 93       	push	r16
    2d7c:	1f 93       	push	r17
    2d7e:	cf 93       	push	r28
	status_code_t status;
	uint8_t isBusy;
	uint8_t isValid;

	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_STATE;
    2d80:	eb e0       	ldi	r30, 0x0B	; 11
    2d82:	f0 e2       	ldi	r31, 0x20	; 32
    2d84:	83 e0       	ldi	r24, 0x03	; 3
    2d86:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.addr_length = 1;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	84 83       	std	Z+4, r24	; 0x04
    2d8e:	95 83       	std	Z+5, r25	; 0x05

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2d90:	8f 01       	movw	r16, r30
    2d92:	cc 24       	eor	r12, r12
    2d94:	c3 94       	inc	r12
    2d96:	d1 2c       	mov	r13, r1
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    2d98:	0f 2e       	mov	r0, r31
    2d9a:	fb ef       	ldi	r31, 0xFB	; 251
    2d9c:	ef 2e       	mov	r14, r31
    2d9e:	f8 e2       	ldi	r31, 0x28	; 40
    2da0:	ff 2e       	mov	r15, r31
    2da2:	f0 2d       	mov	r31, r0
	twi2_packet.addr_length = 1;

	//printf("DBG901\r\n");
	/* Wait until not BUSY */
	do {
		twi2_packet.length = 1;
    2da4:	f8 01       	movw	r30, r16
    2da6:	c0 86       	std	Z+8, r12	; 0x08
    2da8:	d1 86       	std	Z+9, r13	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2daa:	41 e0       	ldi	r20, 0x01	; 1
    2dac:	b8 01       	movw	r22, r16
    2dae:	80 e8       	ldi	r24, 0x80	; 128
    2db0:	94 e0       	ldi	r25, 0x04	; 4
    2db2:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
    2db6:	f7 01       	movw	r30, r14
    2db8:	c0 81       	ld	r28, Z
    2dba:	9c 2f       	mov	r25, r28
    2dbc:	90 78       	andi	r25, 0x80	; 128
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	0d c0       	rjmp	.+26     	; 0x2ddc <twi2_waitUntilReady+0x6a>
    2dc2:	91 f0       	breq	.+36     	; 0x2de8 <twi2_waitUntilReady+0x76>
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
		} else {
			if (isBusy && isValid) {
    2dc4:	8c 2f       	mov	r24, r28
    2dc6:	81 78       	andi	r24, 0x81	; 129
    2dc8:	81 38       	cpi	r24, 0x81	; 129
    2dca:	29 f4       	brne	.+10     	; 0x2dd6 <twi2_waitUntilReady+0x64>
				delay_us(TWI_SMART_LCD_DEVICE_BUSY_DELAY_MIN_US);
    2dcc:	65 ef       	ldi	r22, 0xF5	; 245
    2dce:	71 e0       	ldi	r23, 0x01	; 1
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	c3 df       	rcall	.-122    	; 0x2d5c <__portable_avr_delay_cycles>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
    2dd6:	c0 fd       	sbrc	r28, 0
    2dd8:	e5 cf       	rjmp	.-54     	; 0x2da4 <twi2_waitUntilReady+0x32>
    2dda:	0c c0       	rjmp	.+24     	; 0x2df4 <twi2_waitUntilReady+0x82>
		status = twi_master_read(&TWI2_MASTER, &twi2_packet);
		isValid = twi2_m_data[0] & 0x80;
		isBusy  = twi2_m_data[0] & 0x01;

		if ((status != STATUS_OK) || !isValid) {
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2ddc:	65 e0       	ldi	r22, 0x05	; 5
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	bb df       	rcall	.-138    	; 0x2d5c <__portable_avr_delay_cycles>
    2de6:	de cf       	rjmp	.-68     	; 0x2da4 <twi2_waitUntilReady+0x32>
    2de8:	65 e0       	ldi	r22, 0x05	; 5
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	b5 df       	rcall	.-150    	; 0x2d5c <__portable_avr_delay_cycles>
    2df2:	d8 cf       	rjmp	.-80     	; 0x2da4 <twi2_waitUntilReady+0x32>
			}
		}
		//printf("DBG902\r\n");
	} while ((status != STATUS_OK) || !isValid || isBusy);
	//printf("DBG909\r\n");
}
    2df4:	cf 91       	pop	r28
    2df6:	1f 91       	pop	r17
    2df8:	0f 91       	pop	r16
    2dfa:	ff 90       	pop	r15
    2dfc:	ef 90       	pop	r14
    2dfe:	df 90       	pop	r13
    2e00:	cf 90       	pop	r12
    2e02:	08 95       	ret

00002e04 <isr_twi1_baro>:
static void isr_twi1_gyro(uint32_t now, bool sync)
{
}

static void isr_twi1_baro(uint32_t now, bool sync)
{
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	1f 92       	push	r1
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
	static uint8_t  s_step = 100;
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
    2e0e:	44 23       	and	r20, r20
    2e10:	41 f0       	breq	.+16     	; 0x2e22 <isr_twi1_baro+0x1e>
    2e12:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7338>
    2e16:	84 36       	cpi	r24, 0x64	; 100
    2e18:	08 f4       	brcc	.+2      	; 0x2e1c <isr_twi1_baro+0x18>
    2e1a:	bb c0       	rjmp	.+374    	; 0x2f92 <isr_twi1_baro+0x18e>
		s_step = 0;
    2e1c:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <s_step.7338>
    2e20:	09 c0       	rjmp	.+18     	; 0x2e34 <isr_twi1_baro+0x30>
	}

	switch (s_step) {
    2e22:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <s_step.7338>
    2e26:	85 31       	cpi	r24, 0x15	; 21
    2e28:	09 f1       	breq	.+66     	; 0x2e6c <isr_twi1_baro+0x68>
    2e2a:	8b 32       	cpi	r24, 0x2B	; 43
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <isr_twi1_baro+0x2c>
    2e2e:	59 c0       	rjmp	.+178    	; 0x2ee2 <isr_twi1_baro+0xde>
    2e30:	81 11       	cpse	r24, r1
    2e32:	a9 c0       	rjmp	.+338    	; 0x2f86 <isr_twi1_baro+0x182>
		case 0:
			/* Request D1 */
			twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    2e34:	ef e1       	ldi	r30, 0x1F	; 31
    2e36:	f0 e2       	ldi	r31, 0x20	; 32
    2e38:	86 e7       	ldi	r24, 0x76	; 118
    2e3a:	80 83       	st	Z, r24
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D1_4096;
    2e3c:	88 e4       	ldi	r24, 0x48	; 72
    2e3e:	81 83       	std	Z+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	84 83       	std	Z+4, r24	; 0x04
    2e46:	95 83       	std	Z+5, r25	; 0x05
			twi1_packet.length = 0;
    2e48:	10 86       	std	Z+8, r1	; 0x08
    2e4a:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	bf 01       	movw	r22, r30
    2e50:	80 ea       	ldi	r24, 0xA0	; 160
    2e52:	94 e0       	ldi	r25, 0x04	; 4
    2e54:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
			status_code_t sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2e58:	81 11       	cpse	r24, r1
    2e5a:	04 c0       	rjmp	.+8      	; 0x2e64 <isr_twi1_baro+0x60>
				s_step = 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
				return;
    2e62:	a0 c0       	rjmp	.+320    	; 0x2fa4 <isr_twi1_baro+0x1a0>
			}

			s_step = 200;										// Failed, stay until new sync triggers
    2e64:	88 ec       	ldi	r24, 0xC8	; 200
    2e66:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
			return;
    2e6a:	9c c0       	rjmp	.+312    	; 0x2fa4 <isr_twi1_baro+0x1a0>
		break;

		case 21:
			/* Get data */
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2e6c:	ef e1       	ldi	r30, 0x1F	; 31
    2e6e:	f0 e2       	ldi	r31, 0x20	; 32
    2e70:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    2e72:	83 e0       	ldi	r24, 0x03	; 3
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	80 87       	std	Z+8, r24	; 0x08
    2e78:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	bf 01       	movw	r22, r30
    2e7e:	80 ea       	ldi	r24, 0xA0	; 160
    2e80:	94 e0       	ldi	r25, 0x04	; 4
    2e82:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2e86:	81 11       	cpse	r24, r1
    2e88:	28 c0       	rjmp	.+80     	; 0x2eda <isr_twi1_baro+0xd6>
				s_twi1_baro_d1 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    2e8a:	e3 e0       	ldi	r30, 0x03	; 3
    2e8c:	f9 e2       	ldi	r31, 0x29	; 41
    2e8e:	20 81       	ld	r18, Z
    2e90:	81 81       	ldd	r24, Z+1	; 0x01
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a0 e0       	ldi	r26, 0x00	; 0
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	ba 2f       	mov	r27, r26
    2e9a:	a9 2f       	mov	r26, r25
    2e9c:	98 2f       	mov	r25, r24
    2e9e:	88 27       	eor	r24, r24
    2ea0:	a2 2b       	or	r26, r18
    2ea2:	22 81       	ldd	r18, Z+2	; 0x02
    2ea4:	82 2b       	or	r24, r18
    2ea6:	80 93 f6 26 	sts	0x26F6, r24	; 0x8026f6 <s_twi1_baro_d1.7339>
    2eaa:	90 93 f7 26 	sts	0x26F7, r25	; 0x8026f7 <s_twi1_baro_d1.7339+0x1>
    2eae:	a0 93 f8 26 	sts	0x26F8, r26	; 0x8026f8 <s_twi1_baro_d1.7339+0x2>
    2eb2:	b0 93 f9 26 	sts	0x26F9, r27	; 0x8026f9 <s_twi1_baro_d1.7339+0x3>

				/* Request D2 */
				twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_CONV_D2_4096;
    2eb6:	ef e1       	ldi	r30, 0x1F	; 31
    2eb8:	f0 e2       	ldi	r31, 0x20	; 32
    2eba:	88 e5       	ldi	r24, 0x58	; 88
    2ebc:	81 83       	std	Z+1, r24	; 0x01
				twi1_packet.length = 0;
    2ebe:	10 86       	std	Z+8, r1	; 0x08
    2ec0:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2ec2:	40 e0       	ldi	r20, 0x00	; 0
    2ec4:	bf 01       	movw	r22, r30
    2ec6:	80 ea       	ldi	r24, 0xA0	; 160
    2ec8:	94 e0       	ldi	r25, 0x04	; 4
    2eca:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
				sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
				if (sc == STATUS_OK) {
    2ece:	81 11       	cpse	r24, r1
    2ed0:	04 c0       	rjmp	.+8      	; 0x2eda <isr_twi1_baro+0xd6>
					s_step = 22;
    2ed2:	86 e1       	ldi	r24, 0x16	; 22
    2ed4:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
					return;
    2ed8:	65 c0       	rjmp	.+202    	; 0x2fa4 <isr_twi1_baro+0x1a0>
				}
			}

			s_step = 211;										// Failed, stay until new sync triggers
    2eda:	83 ed       	ldi	r24, 0xD3	; 211
    2edc:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
			return;
    2ee0:	61 c0       	rjmp	.+194    	; 0x2fa4 <isr_twi1_baro+0x1a0>
		break;

		case 43:
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_ADC_READ;
    2ee2:	ef e1       	ldi	r30, 0x1F	; 31
    2ee4:	f0 e2       	ldi	r31, 0x20	; 32
    2ee6:	11 82       	std	Z+1, r1	; 0x01
			twi1_packet.length = 3;
    2ee8:	83 e0       	ldi	r24, 0x03	; 3
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	80 87       	std	Z+8, r24	; 0x08
    2eee:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	bf 01       	movw	r22, r30
    2ef4:	80 ea       	ldi	r24, 0xA0	; 160
    2ef6:	94 e0       	ldi	r25, 0x04	; 4
    2ef8:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc == STATUS_OK) {
    2efc:	81 11       	cpse	r24, r1
    2efe:	3f c0       	rjmp	.+126    	; 0x2f7e <isr_twi1_baro+0x17a>
				s_twi1_baro_d2 = ((uint32_t)twi1_m_data[0] << 16) | ((uint32_t)twi1_m_data[1] << 8) | twi1_m_data[2];
    2f00:	e3 e0       	ldi	r30, 0x03	; 3
    2f02:	f9 e2       	ldi	r31, 0x29	; 41
    2f04:	20 81       	ld	r18, Z
    2f06:	81 81       	ldd	r24, Z+1	; 0x01
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	a0 e0       	ldi	r26, 0x00	; 0
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	ba 2f       	mov	r27, r26
    2f10:	a9 2f       	mov	r26, r25
    2f12:	98 2f       	mov	r25, r24
    2f14:	88 27       	eor	r24, r24
    2f16:	a2 2b       	or	r26, r18
    2f18:	22 81       	ldd	r18, Z+2	; 0x02
    2f1a:	82 2b       	or	r24, r18
    2f1c:	80 93 f2 26 	sts	0x26F2, r24	; 0x8026f2 <s_twi1_baro_d2.7340>
    2f20:	90 93 f3 26 	sts	0x26F3, r25	; 0x8026f3 <s_twi1_baro_d2.7340+0x1>
    2f24:	a0 93 f4 26 	sts	0x26F4, r26	; 0x8026f4 <s_twi1_baro_d2.7340+0x2>
    2f28:	b0 93 f5 26 	sts	0x26F5, r27	; 0x8026f5 <s_twi1_baro_d2.7340+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f2c:	8f b7       	in	r24, 0x3f	; 63
    2f2e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2f30:	f8 94       	cli
	return flags;
    2f32:	89 81       	ldd	r24, Y+1	; 0x01

				irqflags_t flags = cpu_irq_save();
				g_twi1_baro_d1 = s_twi1_baro_d1;
    2f34:	40 91 f6 26 	lds	r20, 0x26F6	; 0x8026f6 <s_twi1_baro_d1.7339>
    2f38:	50 91 f7 26 	lds	r21, 0x26F7	; 0x8026f7 <s_twi1_baro_d1.7339+0x1>
    2f3c:	60 91 f8 26 	lds	r22, 0x26F8	; 0x8026f8 <s_twi1_baro_d1.7339+0x2>
    2f40:	70 91 f9 26 	lds	r23, 0x26F9	; 0x8026f9 <s_twi1_baro_d1.7339+0x3>
    2f44:	40 93 98 29 	sts	0x2998, r20	; 0x802998 <g_twi1_baro_d1>
    2f48:	50 93 99 29 	sts	0x2999, r21	; 0x802999 <g_twi1_baro_d1+0x1>
    2f4c:	60 93 9a 29 	sts	0x299A, r22	; 0x80299a <g_twi1_baro_d1+0x2>
    2f50:	70 93 9b 29 	sts	0x299B, r23	; 0x80299b <g_twi1_baro_d1+0x3>
				g_twi1_baro_d2 = s_twi1_baro_d2;
    2f54:	40 91 f2 26 	lds	r20, 0x26F2	; 0x8026f2 <s_twi1_baro_d2.7340>
    2f58:	50 91 f3 26 	lds	r21, 0x26F3	; 0x8026f3 <s_twi1_baro_d2.7340+0x1>
    2f5c:	60 91 f4 26 	lds	r22, 0x26F4	; 0x8026f4 <s_twi1_baro_d2.7340+0x2>
    2f60:	70 91 f5 26 	lds	r23, 0x26F5	; 0x8026f5 <s_twi1_baro_d2.7340+0x3>
    2f64:	40 93 94 29 	sts	0x2994, r20	; 0x802994 <g_twi1_baro_d2>
    2f68:	50 93 95 29 	sts	0x2995, r21	; 0x802995 <g_twi1_baro_d2+0x1>
    2f6c:	60 93 96 29 	sts	0x2996, r22	; 0x802996 <g_twi1_baro_d2+0x2>
    2f70:	70 93 97 29 	sts	0x2997, r23	; 0x802997 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f74:	8f bf       	out	0x3f, r24	; 63
				cpu_irq_restore(flags);

				s_step = 123;									// Success, stay until new sync triggers
    2f76:	8b e7       	ldi	r24, 0x7B	; 123
    2f78:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
				return;
    2f7c:	13 c0       	rjmp	.+38     	; 0x2fa4 <isr_twi1_baro+0x1a0>
			}

			s_step = 223;										// Failed, stay until new sync triggers
    2f7e:	8f ed       	ldi	r24, 0xDF	; 223
    2f80:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
			return;
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <isr_twi1_baro+0x1a0>
		break;

		default:
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
    2f86:	84 36       	cpi	r24, 0x64	; 100
    2f88:	68 f4       	brcc	.+26     	; 0x2fa4 <isr_twi1_baro+0x1a0>
				s_step++;
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <s_step.7338>
    2f90:	09 c0       	rjmp	.+18     	; 0x2fa4 <isr_twi1_baro+0x1a0>
	/* Restart a new cycle if ready */
	if (sync && (s_step >= 100)) {
		s_step = 0;
	}

	switch (s_step) {
    2f92:	85 31       	cpi	r24, 0x15	; 21
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <isr_twi1_baro+0x194>
    2f96:	6a cf       	rjmp	.-300    	; 0x2e6c <isr_twi1_baro+0x68>
    2f98:	8b 32       	cpi	r24, 0x2B	; 43
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <isr_twi1_baro+0x19a>
    2f9c:	a2 cf       	rjmp	.-188    	; 0x2ee2 <isr_twi1_baro+0xde>
    2f9e:	81 11       	cpse	r24, r1
    2fa0:	f4 cf       	rjmp	.-24     	; 0x2f8a <isr_twi1_baro+0x186>
    2fa2:	48 cf       	rjmp	.-368    	; 0x2e34 <isr_twi1_baro+0x30>
			/* Delay step of 0.5 ms */
			if (s_step < 100) {
				s_step++;
			}
	}
}
    2fa4:	0f 90       	pop	r0
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	08 95       	ret

00002fac <task_twi2_lcd_pos_xy>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_pos_xy(uint8_t x, uint8_t y)
{
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	d8 2f       	mov	r29, r24
	twi2_waitUntilReady();
    2fb2:	c6 2f       	mov	r28, r22
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2fb4:	de de       	rcall	.-580    	; 0x2d72 <twi2_waitUntilReady>
    2fb6:	eb e0       	ldi	r30, 0x0B	; 11
    2fb8:	f0 e2       	ldi	r31, 0x20	; 32
    2fba:	80 e2       	ldi	r24, 0x20	; 32
	twi2_m_data[0] = x;
    2fbc:	81 83       	std	Z+1, r24	; 0x01
    2fbe:	ab ef       	ldi	r26, 0xFB	; 251
    2fc0:	b8 e2       	ldi	r27, 0x28	; 40
	twi2_m_data[1] = y;
    2fc2:	dc 93       	st	X, r29
    2fc4:	11 96       	adiw	r26, 0x01	; 1
	twi2_packet.length = 2;
    2fc6:	cc 93       	st	X, r28
    2fc8:	82 e0       	ldi	r24, 0x02	; 2
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	80 87       	std	Z+8, r24	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    2fce:	91 87       	std	Z+9, r25	; 0x09
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
    2fd2:	bf 01       	movw	r22, r30
    2fd4:	80 e8       	ldi	r24, 0x80	; 128
    2fd6:	94 e0       	ldi	r25, 0x04	; 4
    2fd8:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    2fdc:	65 e0       	ldi	r22, 0x05	; 5
    2fde:	70 e0       	ldi	r23, 0x00	; 0
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
}
    2fe4:	bb de       	rcall	.-650    	; 0x2d5c <__portable_avr_delay_cycles>
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	08 95       	ret

00002fec <task_twi2_lcd_str>:

static void task_twi2_lcd_str(uint8_t x, uint8_t y, const char* str)
{
    2fec:	9f 92       	push	r9
    2fee:	af 92       	push	r10
    2ff0:	bf 92       	push	r11
    2ff2:	cf 92       	push	r12
    2ff4:	df 92       	push	r13
    2ff6:	ef 92       	push	r14
    2ff8:	ff 92       	push	r15
    2ffa:	0f 93       	push	r16
    2ffc:	1f 93       	push	r17
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	b8 2e       	mov	r11, r24
    3004:	a6 2e       	mov	r10, r22
    3006:	ea 01       	movw	r28, r20
	uint8_t slen = strlen(str);
    3008:	fa 01       	movw	r30, r20
    300a:	01 90       	ld	r0, Z+
    300c:	00 20       	and	r0, r0
    300e:	e9 f7       	brne	.-6      	; 0x300a <task_twi2_lcd_str+0x1e>
    3010:	31 97       	sbiw	r30, 0x01	; 1
    3012:	ce 2e       	mov	r12, r30
    3014:	c4 1a       	sub	r12, r20
	if (!slen) {
    3016:	09 f4       	brne	.+2      	; 0x301a <task_twi2_lcd_str+0x2e>
    3018:	43 c0       	rjmp	.+134    	; 0x30a0 <task_twi2_lcd_str+0xb4>
		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    301a:	0b e0       	ldi	r16, 0x0B	; 11
    301c:	10 e2       	ldi	r17, 0x20	; 32
    301e:	0f 2e       	mov	r0, r31
    3020:	f0 e3       	ldi	r31, 0x30	; 48
    3022:	9f 2e       	mov	r9, r31
    3024:	f0 2d       	mov	r31, r0
			twi2_m_data[0] = this_len;
    3026:	0f 2e       	mov	r0, r31
    3028:	fb ef       	ldi	r31, 0xFB	; 251
    302a:	ef 2e       	mov	r14, r31
    302c:	f8 e2       	ldi	r31, 0x28	; 40
    302e:	ff 2e       	mov	r15, r31
    3030:	f0 2d       	mov	r31, r0
    3032:	dc 2c       	mov	r13, r12
    3034:	e6 e0       	ldi	r30, 0x06	; 6
    3036:	ec 15       	cp	r30, r12
    3038:	20 f4       	brcc	.+8      	; 0x3042 <task_twi2_lcd_str+0x56>
    303a:	0f 2e       	mov	r0, r31
    303c:	f6 e0       	ldi	r31, 0x06	; 6
    303e:	df 2e       	mov	r13, r31
    3040:	f0 2d       	mov	r31, r0
			this_len = TWI2_STR_MAXLEN;
		}

		/* Chunk of the string */
		{
			task_twi2_lcd_pos_xy(x, y);
    3042:	6a 2d       	mov	r22, r10
    3044:	8b 2d       	mov	r24, r11

			twi2_waitUntilReady();
    3046:	b2 df       	rcall	.-156    	; 0x2fac <task_twi2_lcd_pos_xy>
    3048:	94 de       	rcall	.-728    	; 0x2d72 <twi2_waitUntilReady>
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    304a:	f8 01       	movw	r30, r16
    304c:	91 82       	std	Z+1, r9	; 0x01
			twi2_m_data[0] = this_len;
    304e:	f7 01       	movw	r30, r14
    3050:	d0 82       	st	Z, r13
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    3052:	dd 20       	and	r13, r13
    3054:	69 f0       	breq	.+26     	; 0x3070 <task_twi2_lcd_str+0x84>
    3056:	81 e0       	ldi	r24, 0x01	; 1
				twi2_m_data[idx] = *(str++);
    3058:	21 96       	adiw	r28, 0x01	; 1
    305a:	e8 2f       	mov	r30, r24
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	e5 50       	subi	r30, 0x05	; 5
    3060:	f7 4d       	sbci	r31, 0xD7	; 215
    3062:	de 01       	movw	r26, r28
    3064:	11 97       	sbiw	r26, 0x01	; 1
    3066:	9c 91       	ld	r25, X
    3068:	90 83       	st	Z, r25
			task_twi2_lcd_pos_xy(x, y);

			twi2_waitUntilReady();
			twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
			twi2_m_data[0] = this_len;
			for (uint8_t idx = 1; idx <= this_len; ++idx) {
    306a:	8f 5f       	subi	r24, 0xFF	; 255
    306c:	d8 16       	cp	r13, r24
    306e:	a0 f7       	brcc	.-24     	; 0x3058 <task_twi2_lcd_str+0x6c>
				twi2_m_data[idx] = *(str++);
			}
			twi2_packet.length = this_len + 1;
    3070:	8d 2d       	mov	r24, r13
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	f8 01       	movw	r30, r16
    3078:	80 87       	std	Z+8, r24	; 0x08
    307a:	91 87       	std	Z+9, r25	; 0x09
    307c:	40 e0       	ldi	r20, 0x00	; 0
    307e:	b8 01       	movw	r22, r16
    3080:	80 e8       	ldi	r24, 0x80	; 128
    3082:	94 e0       	ldi	r25, 0x04	; 4
    3084:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
			twi_master_write(&TWI2_MASTER, &twi2_packet);
			delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3088:	65 e0       	ldi	r22, 0x05	; 5
    308a:	70 e0       	ldi	r23, 0x00	; 0
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	65 de       	rcall	.-822    	; 0x2d5c <__portable_avr_delay_cycles>
		}

		x    += this_len * 6;
    3092:	8d 2d       	mov	r24, r13
    3094:	88 0f       	add	r24, r24
    3096:	8d 0d       	add	r24, r13
    3098:	88 0f       	add	r24, r24
    309a:	b8 0e       	add	r11, r24
		slen -= this_len;
    309c:	cd 18       	sub	r12, r13
	uint8_t slen = strlen(str);
	if (!slen) {
		return;
	}

	while (slen) {
    309e:	49 f6       	brne	.-110    	; 0x3032 <task_twi2_lcd_str+0x46>
		}

		x    += this_len * 6;
		slen -= this_len;
	}
}
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	bf 90       	pop	r11
    30b2:	af 90       	pop	r10
    30b4:	9f 90       	pop	r9
    30b6:	08 95       	ret

000030b8 <task_twi2_lcd_print_format_uint32>:
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_print_format_uint32(uint8_t x, uint8_t y, int32_t adc_i, int32_t adc_f, const char* fmt)
{
    30b8:	8f 92       	push	r8
    30ba:	9f 92       	push	r9
    30bc:	af 92       	push	r10
    30be:	bf 92       	push	r11
    30c0:	cf 92       	push	r12
    30c2:	df 92       	push	r13
    30c4:	ef 92       	push	r14
    30c6:	ff 92       	push	r15
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	b2 2e       	mov	r11, r18
    30d2:	a3 2e       	mov	r10, r19
    30d4:	94 2e       	mov	r9, r20
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    30d6:	85 2e       	mov	r8, r21
    30d8:	69 df       	rcall	.-302    	; 0x2fac <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    30da:	4b de       	rcall	.-874    	; 0x2d72 <twi2_waitUntilReady>
    30dc:	cb e0       	ldi	r28, 0x0B	; 11
    30de:	d0 e2       	ldi	r29, 0x20	; 32
    30e0:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	1f 93       	push	r17
    30e6:	0f 93       	push	r16
    30e8:	ff 92       	push	r15
    30ea:	ef 92       	push	r14
    30ec:	8f 92       	push	r8
    30ee:	9f 92       	push	r9
    30f0:	af 92       	push	r10
    30f2:	bf 92       	push	r11
    30f4:	df 92       	push	r13
    30f6:	cf 92       	push	r12
    30f8:	8c ef       	ldi	r24, 0xFC	; 252
    30fa:	98 e2       	ldi	r25, 0x28	; 40
    30fc:	9f 93       	push	r25
    30fe:	8f 93       	push	r24
    3100:	0e 94 c2 4b 	call	0x9784	; 0x9784 <sprintf>
    3104:	80 93 fb 28 	sts	0x28FB, r24	; 0x8028fb <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    3108:	99 27       	eor	r25, r25
    310a:	01 96       	adiw	r24, 0x01	; 1
    310c:	88 87       	std	Y+8, r24	; 0x08
    310e:	99 87       	std	Y+9, r25	; 0x09
    3110:	40 e0       	ldi	r20, 0x00	; 0
    3112:	be 01       	movw	r22, r28
    3114:	80 e8       	ldi	r24, 0x80	; 128
    3116:	94 e0       	ldi	r25, 0x04	; 4
    3118:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    311c:	65 e0       	ldi	r22, 0x05	; 5
    311e:	70 e0       	ldi	r23, 0x00	; 0
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	90 e0       	ldi	r25, 0x00	; 0
}
    3124:	1b de       	rcall	.-970    	; 0x2d5c <__portable_avr_delay_cycles>
    3126:	8d b7       	in	r24, 0x3d	; 61
    3128:	9e b7       	in	r25, 0x3e	; 62
    312a:	0c 96       	adiw	r24, 0x0c	; 12
    312c:	8d bf       	out	0x3d, r24	; 61
    312e:	9e bf       	out	0x3e, r25	; 62
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	df 90       	pop	r13
    313e:	cf 90       	pop	r12
    3140:	bf 90       	pop	r11
    3142:	af 90       	pop	r10
    3144:	9f 90       	pop	r9
    3146:	8f 90       	pop	r8
    3148:	08 95       	ret

0000314a <task_twi2_lcd_print_format_uint16>:
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
	task_twi2_lcd_str(6 * 16, (line++) * 10, "%");
}

static void task_twi2_lcd_print_format_uint16(uint8_t x, uint8_t y, int16_t adc_i, int16_t adc_f, const char* fmt)
{
    314a:	cf 92       	push	r12
    314c:	df 92       	push	r13
    314e:	ef 92       	push	r14
    3150:	ff 92       	push	r15
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29
    315a:	f4 2e       	mov	r15, r20
    315c:	e5 2e       	mov	r14, r21
    315e:	d2 2e       	mov	r13, r18
	task_twi2_lcd_pos_xy(x, y);

	twi2_waitUntilReady();
    3160:	c3 2e       	mov	r12, r19
    3162:	24 df       	rcall	.-440    	; 0x2fac <task_twi2_lcd_pos_xy>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_WRITE;
    3164:	06 de       	rcall	.-1012   	; 0x2d72 <twi2_waitUntilReady>
    3166:	cb e0       	ldi	r28, 0x0B	; 11
    3168:	d0 e2       	ldi	r29, 0x20	; 32
    316a:	80 e3       	ldi	r24, 0x30	; 48
	twi2_m_data[0] = sprintf((char*)&(twi2_m_data[1]), fmt, adc_i, adc_f);
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	cf 92       	push	r12
    3170:	df 92       	push	r13
    3172:	ef 92       	push	r14
    3174:	ff 92       	push	r15
    3176:	1f 93       	push	r17
    3178:	0f 93       	push	r16
    317a:	8c ef       	ldi	r24, 0xFC	; 252
    317c:	98 e2       	ldi	r25, 0x28	; 40
    317e:	9f 93       	push	r25
    3180:	8f 93       	push	r24
    3182:	0e 94 c2 4b 	call	0x9784	; 0x9784 <sprintf>
    3186:	80 93 fb 28 	sts	0x28FB, r24	; 0x8028fb <twi2_m_data>
	twi2_packet.length = twi2_m_data[0] + 1;
    318a:	99 27       	eor	r25, r25
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	88 87       	std	Y+8, r24	; 0x08
    3190:	99 87       	std	Y+9, r25	; 0x09
    3192:	40 e0       	ldi	r20, 0x00	; 0
    3194:	be 01       	movw	r22, r28
    3196:	80 e8       	ldi	r24, 0x80	; 128
    3198:	94 e0       	ldi	r25, 0x04	; 4
    319a:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    319e:	65 e0       	ldi	r22, 0x05	; 5
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	90 e0       	ldi	r25, 0x00	; 0
}
    31a6:	da dd       	rcall	.-1100   	; 0x2d5c <__portable_avr_delay_cycles>
    31a8:	8d b7       	in	r24, 0x3d	; 61
    31aa:	9e b7       	in	r25, 0x3e	; 62
    31ac:	08 96       	adiw	r24, 0x08	; 8
    31ae:	8d bf       	out	0x3d, r24	; 61
    31b0:	9e bf       	out	0x3e, r25	; 62
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

000031c4 <twi_init>:
}


void twi_init(void) {
	#ifdef TWI1_MASTER
	TWI1_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA1
    31c4:	e0 e8       	ldi	r30, 0x80	; 128
    31c6:	f6 e0       	ldi	r31, 0x06	; 6
    31c8:	88 e3       	ldi	r24, 0x38	; 56
    31ca:	80 8b       	std	Z+16, r24	; 0x10
	TWI1_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL1
    31cc:	81 8b       	std	Z+17, r24	; 0x11
	#endif

	#ifdef TWI2_MASTER
	TWI2_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;  // SDA2
    31ce:	e0 e4       	ldi	r30, 0x40	; 64
    31d0:	f6 e0       	ldi	r31, 0x06	; 6
    31d2:	80 8b       	std	Z+16, r24	; 0x10
	TWI2_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;  // SCL2
    31d4:	81 8b       	std	Z+17, r24	; 0x11
    31d6:	08 95       	ret

000031d8 <twi_start>:
	#endif
}

void twi_start(void) {
    31d8:	8f 92       	push	r8
    31da:	9f 92       	push	r9
    31dc:	af 92       	push	r10
    31de:	bf 92       	push	r11
    31e0:	cf 92       	push	r12
    31e2:	df 92       	push	r13
    31e4:	ef 92       	push	r14
    31e6:	ff 92       	push	r15
    31e8:	0f 93       	push	r16
    31ea:	1f 93       	push	r17
    31ec:	cf 93       	push	r28
    31ee:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    31f0:	60 e4       	ldi	r22, 0x40	; 64
    31f2:	85 e0       	ldi	r24, 0x05	; 5
    31f4:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
		twi1_slave.receivedData[i1] = 0;
	}
	#else
	#ifdef TWI1_MASTER
	sysclk_enable_peripheral_clock(&TWI1_MASTER);
	twi_master_init(&TWI1_MASTER, &twi1_options);
    31f8:	6a e2       	ldi	r22, 0x2A	; 42
    31fa:	70 e2       	ldi	r23, 0x20	; 32
    31fc:	80 ea       	ldi	r24, 0xA0	; 160
    31fe:	94 e0       	ldi	r25, 0x04	; 4
    3200:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    3204:	e0 ea       	ldi	r30, 0xA0	; 160
    3206:	f4 e0       	ldi	r31, 0x04	; 4
    3208:	81 81       	ldd	r24, Z+1	; 0x01
    320a:	88 60       	ori	r24, 0x08	; 8
    320c:	81 83       	std	Z+1, r24	; 0x01
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    320e:	60 e4       	ldi	r22, 0x40	; 64
    3210:	83 e0       	ldi	r24, 0x03	; 3
    3212:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
		twi2_slave.receivedData[i2] = 0;
	}
	#else
	#ifdef TWI2_MASTER
	sysclk_enable_peripheral_clock(&TWI2_MASTER);
	twi_master_init(&TWI2_MASTER, &twi2_options);
    3216:	66 e1       	ldi	r22, 0x16	; 22
    3218:	70 e2       	ldi	r23, 0x20	; 32
    321a:	80 e8       	ldi	r24, 0x80	; 128
    321c:	94 e0       	ldi	r25, 0x04	; 4
    321e:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <twi_master_init>
    3222:	e0 e8       	ldi	r30, 0x80	; 128
    3224:	f4 e0       	ldi	r31, 0x04	; 4
    3226:	81 81       	ldd	r24, Z+1	; 0x01
    3228:	88 60       	ori	r24, 0x08	; 8
    322a:	81 83       	std	Z+1, r24	; 0x01

static void init_twi1_hygro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Hygro SHT31-DIS - I2C address: 0x%02X\r\n", TWI1_SLAVE_HYGRO_ADDR);
    322c:	1f 92       	push	r1
    322e:	c4 e4       	ldi	r28, 0x44	; 68
    3230:	cf 93       	push	r28
    3232:	86 ef       	ldi	r24, 0xF6	; 246
    3234:	90 e2       	ldi	r25, 0x20	; 32
    3236:	9f 93       	push	r25
    3238:	8f 93       	push	r24
    323a:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>
	g_twi1_hygro_status = 0;
    323e:	10 92 8a 29 	sts	0x298A, r1	; 0x80298a <g_twi1_hygro_status>

	do {
		twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    3242:	ef e1       	ldi	r30, 0x1F	; 31
    3244:	f0 e2       	ldi	r31, 0x20	; 32
    3246:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_BREAK_HI;
    3248:	80 e3       	ldi	r24, 0x30	; 48
    324a:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_BREAK_LO;
    324c:	83 e9       	ldi	r24, 0x93	; 147
    324e:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    3250:	82 e0       	ldi	r24, 0x02	; 2
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	84 83       	std	Z+4, r24	; 0x04
    3256:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    3258:	10 86       	std	Z+8, r1	; 0x08
    325a:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	bf 01       	movw	r22, r30
    3260:	80 ea       	ldi	r24, 0xA0	; 160
    3262:	94 e0       	ldi	r25, 0x04	; 4
    3264:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    3268:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	88 23       	and	r24, r24
    3274:	29 f0       	breq	.+10     	; 0x3280 <twi_start+0xa8>
			printf("TWI-onboard: Hygro SHT31-DIS -   address NACK / 'break' bad response\r\n");
    3276:	8d e2       	ldi	r24, 0x2D	; 45
    3278:	91 e2       	ldi	r25, 0x21	; 33
    327a:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    327e:	70 c0       	rjmp	.+224    	; 0x3360 <twi_start+0x188>
			break;
		}
		delay_ms(2);
    3280:	60 e1       	ldi	r22, 0x10	; 16
    3282:	77 e2       	ldi	r23, 0x27	; 39
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	69 dd       	rcall	.-1326   	; 0x2d5c <__portable_avr_delay_cycles>

		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_RESET_HI;
    328a:	ef e1       	ldi	r30, 0x1F	; 31
    328c:	f0 e2       	ldi	r31, 0x20	; 32
    328e:	80 e3       	ldi	r24, 0x30	; 48
    3290:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_RESET_LO;
    3292:	82 ea       	ldi	r24, 0xA2	; 162
    3294:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	84 83       	std	Z+4, r24	; 0x04
    329c:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    329e:	10 86       	std	Z+8, r1	; 0x08
    32a0:	11 86       	std	Z+9, r1	; 0x09
    32a2:	40 e0       	ldi	r20, 0x00	; 0
    32a4:	bf 01       	movw	r22, r30
    32a6:	80 ea       	ldi	r24, 0xA0	; 160
    32a8:	94 e0       	ldi	r25, 0x04	; 4
    32aa:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    32ae:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    32b0:	88 23       	and	r24, r24
    32b2:	29 f0       	breq	.+10     	; 0x32be <twi_start+0xe6>
			printf("TWI-onboard: Hygro SHT31-DIS -   'reset' bad response\r\n");
    32b4:	83 e7       	ldi	r24, 0x73	; 115
    32b6:	91 e2       	ldi	r25, 0x21	; 33
    32b8:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    32bc:	51 c0       	rjmp	.+162    	; 0x3360 <twi_start+0x188>
			break;
		}
		delay_ms(2);
    32be:	60 e1       	ldi	r22, 0x10	; 16
    32c0:	77 e2       	ldi	r23, 0x27	; 39
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	4a dd       	rcall	.-1388   	; 0x2d5c <__portable_avr_delay_cycles>

		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_STATUS_HI;
    32c8:	ef e1       	ldi	r30, 0x1F	; 31
    32ca:	f0 e2       	ldi	r31, 0x20	; 32
    32cc:	83 ef       	ldi	r24, 0xF3	; 243
    32ce:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_STATUS_LO;
    32d0:	8d e2       	ldi	r24, 0x2D	; 45
    32d2:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	84 83       	std	Z+4, r24	; 0x04
    32da:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 2;
    32dc:	80 87       	std	Z+8, r24	; 0x08
    32de:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	bf 01       	movw	r22, r30
    32e4:	80 ea       	ldi	r24, 0xA0	; 160
    32e6:	94 e0       	ldi	r25, 0x04	; 4
    32e8:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    32ec:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    32ee:	88 23       	and	r24, r24
    32f0:	29 f0       	breq	.+10     	; 0x32fc <twi_start+0x124>
			printf("TWI-onboard: Hygro SHT31-DIS -   'status' bad response\r\n");
    32f2:	8a ea       	ldi	r24, 0xAA	; 170
    32f4:	91 e2       	ldi	r25, 0x21	; 33
    32f6:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    32fa:	32 c0       	rjmp	.+100    	; 0x3360 <twi_start+0x188>
			break;
		}
		g_twi1_hygro_status = (twi1_m_data[0] << 8) | twi1_m_data[1];
    32fc:	80 91 04 29 	lds	r24, 0x2904	; 0x802904 <twi1_m_data+0x1>
    3300:	80 93 8a 29 	sts	0x298A, r24	; 0x80298a <g_twi1_hygro_status>
		printf("TWI-onboard: Hygro SHT31-DIS -   status: 0x%02X\r\n", g_twi1_hygro_status);
    3304:	1f 92       	push	r1
    3306:	8f 93       	push	r24
    3308:	82 ee       	ldi	r24, 0xE2	; 226
    330a:	91 e2       	ldi	r25, 0x21	; 33
    330c:	9f 93       	push	r25
    330e:	8f 93       	push	r24
    3310:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>

		/* Start cyclic measurements with 2 MPS @ high repeatability */
		twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_PERIODIC_2MPS_HIPREC_HI;
    3314:	ef e1       	ldi	r30, 0x1F	; 31
    3316:	f0 e2       	ldi	r31, 0x20	; 32
    3318:	82 e2       	ldi	r24, 0x22	; 34
    331a:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_PERIODIC_2MPS_HIPREC_LO;
    331c:	86 e3       	ldi	r24, 0x36	; 54
    331e:	82 83       	std	Z+2, r24	; 0x02
		twi1_packet.addr_length = 2;
    3320:	82 e0       	ldi	r24, 0x02	; 2
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	84 83       	std	Z+4, r24	; 0x04
    3326:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    3328:	10 86       	std	Z+8, r1	; 0x08
    332a:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    332c:	40 e0       	ldi	r20, 0x00	; 0
    332e:	bf 01       	movw	r22, r30
    3330:	80 ea       	ldi	r24, 0xA0	; 160
    3332:	94 e0       	ldi	r25, 0x04	; 4
    3334:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    3338:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	88 23       	and	r24, r24
    3344:	29 f0       	breq	.+10     	; 0x3350 <twi_start+0x178>
			printf("TWI-onboard: Hygro SHT31-DIS -   'periodic' bad response\r\n");
    3346:	84 e1       	ldi	r24, 0x14	; 20
    3348:	92 e2       	ldi	r25, 0x22	; 34
    334a:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    334e:	08 c0       	rjmp	.+16     	; 0x3360 <twi_start+0x188>
			break;
		}

		g_twi1_hygro_valid = true;
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	80 93 8b 29 	sts	0x298B, r24	; 0x80298b <g_twi1_hygro_valid>
		printf("TWI-onboard:  INIT success.\r\n");
    3356:	8e e4       	ldi	r24, 0x4E	; 78
    3358:	92 e2       	ldi	r25, 0x22	; 34
    335a:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    335e:	10 c0       	rjmp	.+32     	; 0x3380 <twi_start+0x1a8>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    3360:	8c 2f       	mov	r24, r28
    3362:	0c 2e       	mov	r0, r28
    3364:	00 0c       	add	r0, r0
    3366:	99 0b       	sbc	r25, r25
    3368:	9f 93       	push	r25
    336a:	cf 93       	push	r28
    336c:	8b e6       	ldi	r24, 0x6B	; 107
    336e:	92 e2       	ldi	r25, 0x22	; 34
    3370:	9f 93       	push	r25
    3372:	8f 93       	push	r24
    3374:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0

static void init_twi1_gyro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Gyro MPU-9250 - I2C address: 0x%02X, 0x%02X\r\n", TWI1_SLAVE_GYRO_ADDR_1, TWI1_SLAVE_GYRO_ADDR_2);
    3380:	1f 92       	push	r1
    3382:	8c e0       	ldi	r24, 0x0C	; 12
    3384:	8f 93       	push	r24
    3386:	1f 92       	push	r1
    3388:	c8 e6       	ldi	r28, 0x68	; 104
    338a:	cf 93       	push	r28
    338c:	8c e9       	ldi	r24, 0x9C	; 156
    338e:	92 e2       	ldi	r25, 0x22	; 34
    3390:	9f 93       	push	r25
    3392:	8f 93       	push	r24
    3394:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>
	g_twi1_gyro_1_version = 0;
    3398:	10 92 b0 29 	sts	0x29B0, r1	; 0x8029b0 <g_twi1_gyro_1_version>
	g_twi1_gyro_2_version = 0;
    339c:	10 92 af 29 	sts	0x29AF, r1	; 0x8029af <g_twi1_gyro_2_version>

	do {
		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    33a0:	ef e1       	ldi	r30, 0x1F	; 31
    33a2:	f0 e2       	ldi	r31, 0x20	; 32
    33a4:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_RESET;
    33a6:	8b e6       	ldi	r24, 0x6B	; 107
    33a8:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	84 83       	std	Z+4, r24	; 0x04
    33b0:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_1_RESET;
    33b2:	21 e8       	ldi	r18, 0x81	; 129
    33b4:	20 93 03 29 	sts	0x2903, r18	; 0x802903 <twi1_m_data>
		twi1_packet.length = 1;
    33b8:	80 87       	std	Z+8, r24	; 0x08
    33ba:	91 87       	std	Z+9, r25	; 0x09
    33bc:	40 e0       	ldi	r20, 0x00	; 0
    33be:	bf 01       	movw	r22, r30
    33c0:	80 ea       	ldi	r24, 0xA0	; 160
    33c2:	94 e0       	ldi	r25, 0x04	; 4
    33c4:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    33c8:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
    33d6:	88 23       	and	r24, r24
    33d8:	29 f0       	breq	.+10     	; 0x33e4 <twi_start+0x20c>
			printf("TWI-onboard: Gyro MPU-9250   -   'reset 1' bad response\r\n");
    33da:	89 ed       	ldi	r24, 0xD9	; 217
    33dc:	92 e2       	ldi	r25, 0x22	; 34
    33de:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    33e2:	6d c0       	rjmp	.+218    	; 0x34be <twi_start+0x2e6>
			break;
		}

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    33e4:	ef e1       	ldi	r30, 0x1F	; 31
    33e6:	f0 e2       	ldi	r31, 0x20	; 32
    33e8:	8c e0       	ldi	r24, 0x0C	; 12
    33ea:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_RESET;
    33ec:	8a e0       	ldi	r24, 0x0A	; 10
    33ee:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	84 83       	std	Z+4, r24	; 0x04
    33f6:	95 83       	std	Z+5, r25	; 0x05
		twi1_m_data[0] = TWI1_SLAVE_GYRO_DTA_2_RESET;
    33f8:	2f e1       	ldi	r18, 0x1F	; 31
    33fa:	20 93 03 29 	sts	0x2903, r18	; 0x802903 <twi1_m_data>
		twi1_packet.length = 1;
    33fe:	80 87       	std	Z+8, r24	; 0x08
    3400:	91 87       	std	Z+9, r25	; 0x09
    3402:	40 e0       	ldi	r20, 0x00	; 0
    3404:	bf 01       	movw	r22, r30
    3406:	80 ea       	ldi	r24, 0xA0	; 160
    3408:	94 e0       	ldi	r25, 0x04	; 4
    340a:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    340e:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3410:	88 23       	and	r24, r24
    3412:	29 f0       	breq	.+10     	; 0x341e <twi_start+0x246>
			printf("TWI-onboard: Gyro MPU-9250   -   'reset 2' bad response\r\n");
    3414:	82 e1       	ldi	r24, 0x12	; 18
    3416:	93 e2       	ldi	r25, 0x23	; 35
    3418:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    341c:	50 c0       	rjmp	.+160    	; 0x34be <twi_start+0x2e6>
			break;
		}
		delay_ms(10);
    341e:	61 e5       	ldi	r22, 0x51	; 81
    3420:	73 ec       	ldi	r23, 0xC3	; 195
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	9a dc       	rcall	.-1740   	; 0x2d5c <__portable_avr_delay_cycles>

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_1;
    3428:	ef e1       	ldi	r30, 0x1F	; 31
    342a:	f0 e2       	ldi	r31, 0x20	; 32
    342c:	88 e6       	ldi	r24, 0x68	; 104
    342e:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_1_WHOAMI;
    3430:	85 e7       	ldi	r24, 0x75	; 117
    3432:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	84 83       	std	Z+4, r24	; 0x04
    343a:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 1;
    343c:	80 87       	std	Z+8, r24	; 0x08
    343e:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3440:	41 e0       	ldi	r20, 0x01	; 1
    3442:	bf 01       	movw	r22, r30
    3444:	80 ea       	ldi	r24, 0xA0	; 160
    3446:	94 e0       	ldi	r25, 0x04	; 4
    3448:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    344c:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    344e:	88 23       	and	r24, r24
    3450:	29 f0       	breq	.+10     	; 0x345c <twi_start+0x284>
			printf("TWI-onboard: Gyro MPU-9250   -   'whoami 1' bad response\r\n");
    3452:	8b e4       	ldi	r24, 0x4B	; 75
    3454:	93 e2       	ldi	r25, 0x23	; 35
    3456:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    345a:	31 c0       	rjmp	.+98     	; 0x34be <twi_start+0x2e6>
			break;
		}
		g_twi1_gyro_1_version = twi1_m_data[0];
    345c:	80 91 03 29 	lds	r24, 0x2903	; 0x802903 <twi1_m_data>
    3460:	80 93 b0 29 	sts	0x29B0, r24	; 0x8029b0 <g_twi1_gyro_1_version>

		twi1_packet.chip = TWI1_SLAVE_GYRO_ADDR_2;
    3464:	ef e1       	ldi	r30, 0x1F	; 31
    3466:	f0 e2       	ldi	r31, 0x20	; 32
    3468:	8c e0       	ldi	r24, 0x0C	; 12
    346a:	80 83       	st	Z, r24
		twi1_packet.addr[0] = TWI1_SLAVE_GYRO_REG_2_DEVICE_ID;
    346c:	11 82       	std	Z+1, r1	; 0x01
    346e:	41 e0       	ldi	r20, 0x01	; 1
    3470:	bf 01       	movw	r22, r30
    3472:	80 ea       	ldi	r24, 0xA0	; 160
    3474:	94 e0       	ldi	r25, 0x04	; 4
    3476:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    347a:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    347c:	88 23       	and	r24, r24
    347e:	29 f0       	breq	.+10     	; 0x348a <twi_start+0x2b2>
			printf("TWI-onboard: Gyro MPU-9250   -   'device-id 2' bad response\r\n");
    3480:	85 e8       	ldi	r24, 0x85	; 133
    3482:	93 e2       	ldi	r25, 0x23	; 35
    3484:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    3488:	1a c0       	rjmp	.+52     	; 0x34be <twi_start+0x2e6>
			break;
		}

		g_twi1_gyro_2_version = twi1_m_data[0];
    348a:	80 91 03 29 	lds	r24, 0x2903	; 0x802903 <twi1_m_data>
    348e:	80 93 af 29 	sts	0x29AF, r24	; 0x8029af <g_twi1_gyro_2_version>
		g_twi1_gyro_valid = true;
    3492:	91 e0       	ldi	r25, 0x01	; 1
    3494:	90 93 b1 29 	sts	0x29B1, r25	; 0x8029b1 <g_twi1_gyro_valid>
		printf("TWI-onboard: Gyro MPU-9250 -     version: 0x%02X, 0x%02X\r\n", g_twi1_gyro_1_version, g_twi1_gyro_2_version);
    3498:	1f 92       	push	r1
    349a:	8f 93       	push	r24
    349c:	80 91 b0 29 	lds	r24, 0x29B0	; 0x8029b0 <g_twi1_gyro_1_version>
    34a0:	1f 92       	push	r1
    34a2:	8f 93       	push	r24
    34a4:	82 ec       	ldi	r24, 0xC2	; 194
    34a6:	93 e2       	ldi	r25, 0x23	; 35
    34a8:	9f 93       	push	r25
    34aa:	8f 93       	push	r24
    34ac:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	10 c0       	rjmp	.+32     	; 0x34de <twi_start+0x306>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    34be:	8c 2f       	mov	r24, r28
    34c0:	0c 2e       	mov	r0, r28
    34c2:	00 0c       	add	r0, r0
    34c4:	99 0b       	sbc	r25, r25
    34c6:	9f 93       	push	r25
    34c8:	cf 93       	push	r28
    34ca:	8b e6       	ldi	r24, 0x6B	; 107
    34cc:	92 e2       	ldi	r25, 0x22	; 34
    34ce:	9f 93       	push	r25
    34d0:	8f 93       	push	r24
    34d2:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0

static void init_twi1_baro(void)
{
	status_code_t sc;

	printf("\r\nTWI-onboard: Baro MS560702BA03-50 - I2C address: 0x%02X\r\n", TWI1_SLAVE_BARO_ADDR);
    34de:	1f 92       	push	r1
    34e0:	c6 e7       	ldi	r28, 0x76	; 118
    34e2:	cf 93       	push	r28
    34e4:	8d ef       	ldi	r24, 0xFD	; 253
    34e6:	93 e2       	ldi	r25, 0x23	; 35
    34e8:	9f 93       	push	r25
    34ea:	8f 93       	push	r24
    34ec:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>

	do {
		twi1_packet.chip = TWI1_SLAVE_BARO_ADDR;
    34f0:	ef e1       	ldi	r30, 0x1F	; 31
    34f2:	f0 e2       	ldi	r31, 0x20	; 32
    34f4:	c0 83       	st	Z, r28
		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_RESET;
    34f6:	8e e1       	ldi	r24, 0x1E	; 30
    34f8:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	84 83       	std	Z+4, r24	; 0x04
    3500:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 0;
    3502:	10 86       	std	Z+8, r1	; 0x08
    3504:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    3506:	40 e0       	ldi	r20, 0x00	; 0
    3508:	bf 01       	movw	r22, r30
    350a:	80 ea       	ldi	r24, 0xA0	; 160
    350c:	94 e0       	ldi	r25, 0x04	; 4
    350e:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    3512:	c8 2f       	mov	r28, r24
		sc = twi_master_write(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3514:	0f 90       	pop	r0
    3516:	0f 90       	pop	r0
    3518:	0f 90       	pop	r0
    351a:	0f 90       	pop	r0
    351c:	81 11       	cpse	r24, r1
    351e:	9d c0       	rjmp	.+314    	; 0x365a <twi_start+0x482>
			break;
		}
		delay_ms(3);
    3520:	68 e9       	ldi	r22, 0x98	; 152
    3522:	7a e3       	ldi	r23, 0x3A	; 58
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	19 dc       	rcall	.-1998   	; 0x2d5c <__portable_avr_delay_cycles>

		twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_VERSION;
    352a:	ef e1       	ldi	r30, 0x1F	; 31
    352c:	f0 e2       	ldi	r31, 0x20	; 32
    352e:	8e ea       	ldi	r24, 0xAE	; 174
    3530:	81 83       	std	Z+1, r24	; 0x01
		twi1_packet.addr_length = 1;
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	84 83       	std	Z+4, r24	; 0x04
    3538:	95 83       	std	Z+5, r25	; 0x05
		twi1_packet.length = 2;
    353a:	82 e0       	ldi	r24, 0x02	; 2
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	80 87       	std	Z+8, r24	; 0x08
    3540:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3542:	41 e0       	ldi	r20, 0x01	; 1
    3544:	bf 01       	movw	r22, r30
    3546:	80 ea       	ldi	r24, 0xA0	; 160
    3548:	94 e0       	ldi	r25, 0x04	; 4
    354a:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    354e:	c8 2f       	mov	r28, r24
		sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
		if (sc != STATUS_OK) {
    3550:	88 23       	and	r24, r24
    3552:	89 f0       	breq	.+34     	; 0x3576 <twi_start+0x39e>
			printf("TWI-onboard:  BAD reading serial/CRC word. (sc=%d)\r\n", sc);
    3554:	8c 2f       	mov	r24, r28
    3556:	0c 2e       	mov	r0, r28
    3558:	00 0c       	add	r0, r0
    355a:	99 0b       	sbc	r25, r25
    355c:	9f 93       	push	r25
    355e:	cf 93       	push	r28
    3560:	89 e3       	ldi	r24, 0x39	; 57
    3562:	94 e2       	ldi	r25, 0x24	; 36
    3564:	9f 93       	push	r25
    3566:	8f 93       	push	r24
    3568:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>
    356c:	0f 90       	pop	r0
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	72 c0       	rjmp	.+228    	; 0x365a <twi_start+0x482>
			break;
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
    3576:	e3 e0       	ldi	r30, 0x03	; 3
    3578:	f9 e2       	ldi	r31, 0x29	; 41
    357a:	80 81       	ld	r24, Z
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	98 2f       	mov	r25, r24
    3580:	88 27       	eor	r24, r24
    3582:	21 81       	ldd	r18, Z+1	; 0x01
    3584:	82 2b       	or	r24, r18
    3586:	92 95       	swap	r25
    3588:	82 95       	swap	r24
    358a:	8f 70       	andi	r24, 0x0F	; 15
    358c:	89 27       	eor	r24, r25
    358e:	9f 70       	andi	r25, 0x0F	; 15
    3590:	89 27       	eor	r24, r25
    3592:	80 93 ac 29 	sts	0x29AC, r24	; 0x8029ac <g_twi1_baro_version>
    3596:	90 93 ad 29 	sts	0x29AD, r25	; 0x8029ad <g_twi1_baro_version+0x1>
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);
    359a:	9f 93       	push	r25
    359c:	8f 93       	push	r24
    359e:	8e e6       	ldi	r24, 0x6E	; 110
    35a0:	94 e2       	ldi	r25, 0x24	; 36
    35a2:	9f 93       	push	r25
    35a4:	8f 93       	push	r24
    35a6:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>
    35aa:	0f 2e       	mov	r0, r31
    35ac:	fe e9       	ldi	r31, 0x9E	; 158
    35ae:	ef 2e       	mov	r14, r31
    35b0:	f9 e2       	ldi	r31, 0x29	; 41
    35b2:	ff 2e       	mov	r15, r31
    35b4:	f0 2d       	mov	r31, r0
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    35be:	88 24       	eor	r8, r8
    35c0:	83 94       	inc	r8
    35c2:	91 2c       	mov	r9, r1
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
    35c4:	cf e1       	ldi	r28, 0x1F	; 31
    35c6:	d0 e2       	ldi	r29, 0x20	; 32
			twi1_packet.addr_length = 1;
    35c8:	aa 24       	eor	r10, r10
    35ca:	a3 94       	inc	r10
    35cc:	b1 2c       	mov	r11, r1
			twi1_packet.length = 2;
    35ce:	68 94       	set
    35d0:	cc 24       	eor	r12, r12
    35d2:	c1 f8       	bld	r12, 1
    35d4:	d1 2c       	mov	r13, r1
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc != STATUS_OK) {
				printf("TWI-onboard:  BAD reading PROM address %d. (sc=%d)\r\n", adr, sc);
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    35d6:	03 e0       	ldi	r16, 0x03	; 3
    35d8:	19 e2       	ldi	r17, 0x29	; 41
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
			twi1_packet.addr[0] = TWI1_SLAVE_BARO_REG_PROM | (adr << 1);
    35da:	c4 01       	movw	r24, r8
    35dc:	88 0f       	add	r24, r24
    35de:	99 1f       	adc	r25, r25
    35e0:	80 6a       	ori	r24, 0xA0	; 160
    35e2:	89 83       	std	Y+1, r24	; 0x01
			twi1_packet.addr_length = 1;
    35e4:	ac 82       	std	Y+4, r10	; 0x04
    35e6:	bd 82       	std	Y+5, r11	; 0x05
			twi1_packet.length = 2;
    35e8:	c8 86       	std	Y+8, r12	; 0x08
    35ea:	d9 86       	std	Y+9, r13	; 0x09
    35ec:	41 e0       	ldi	r20, 0x01	; 1
    35ee:	be 01       	movw	r22, r28
    35f0:	80 ea       	ldi	r24, 0xA0	; 160
    35f2:	94 e0       	ldi	r25, 0x04	; 4
    35f4:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
			sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
			if (sc != STATUS_OK) {
    35f8:	88 23       	and	r24, r24
    35fa:	a9 f0       	breq	.+42     	; 0x3626 <twi_start+0x44e>
				printf("TWI-onboard:  BAD reading PROM address %d. (sc=%d)\r\n", adr, sc);
    35fc:	28 2f       	mov	r18, r24
    35fe:	08 2e       	mov	r0, r24
    3600:	00 0c       	add	r0, r0
    3602:	33 0b       	sbc	r19, r19
    3604:	3f 93       	push	r19
    3606:	8f 93       	push	r24
    3608:	9f 92       	push	r9
    360a:	8f 92       	push	r8
    360c:	84 ea       	ldi	r24, 0xA4	; 164
    360e:	94 e2       	ldi	r25, 0x24	; 36
    3610:	9f 93       	push	r25
    3612:	8f 93       	push	r24
    3614:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	0f 90       	pop	r0
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	12 c0       	rjmp	.+36     	; 0x364a <twi_start+0x472>
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
    3626:	f8 01       	movw	r30, r16
    3628:	80 81       	ld	r24, Z
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	98 2f       	mov	r25, r24
    362e:	88 27       	eor	r24, r24
    3630:	21 81       	ldd	r18, Z+1	; 0x01
    3632:	82 2b       	or	r24, r18
    3634:	f7 01       	movw	r30, r14
    3636:	81 93       	st	Z+, r24
    3638:	91 93       	st	Z+, r25
    363a:	7f 01       	movw	r14, r30
			break;
		}
		g_twi1_baro_version = (((uint16_t)twi1_m_data[0] << 8) | (uint16_t)twi1_m_data[1]) >> 4;
		printf("TWI-onboard: Baro MS560702BA03-50 -     serial#: %d\r\n", g_twi1_baro_version);

		for (int adr = 1; adr < C_TWI1_BARO_C_CNT; ++adr) {
    363c:	ff ef       	ldi	r31, 0xFF	; 255
    363e:	8f 1a       	sub	r8, r31
    3640:	9f 0a       	sbc	r9, r31
    3642:	88 e0       	ldi	r24, 0x08	; 8
    3644:	88 16       	cp	r8, r24
    3646:	91 04       	cpc	r9, r1
    3648:	41 f6       	brne	.-112    	; 0x35da <twi_start+0x402>
				break;
			}
			g_twi1_baro_c[adr] = (twi1_m_data[0] << 8) | twi1_m_data[1];
		}

		g_twi1_baro_valid = true;
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	80 93 ae 29 	sts	0x29AE, r24	; 0x8029ae <g_twi1_baro_valid>
		printf("TWI-onboard:  INIT success.\r\n");
    3650:	8e e4       	ldi	r24, 0x4E	; 78
    3652:	92 e2       	ldi	r25, 0x22	; 34
    3654:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    3658:	10 c0       	rjmp	.+32     	; 0x367a <twi_start+0x4a2>
		return;
	} while(false);

	printf("TWI-onboard:  ... device not on board. (sc=%d)\r\n", sc);
    365a:	8c 2f       	mov	r24, r28
    365c:	0c 2e       	mov	r0, r28
    365e:	00 0c       	add	r0, r0
    3660:	99 0b       	sbc	r25, r25
    3662:	9f 93       	push	r25
    3664:	cf 93       	push	r28
    3666:	8b e6       	ldi	r24, 0x6B	; 107
    3668:	92 e2       	ldi	r25, 0x22	; 34
    366a:	9f 93       	push	r25
    366c:	8f 93       	push	r24
    366e:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	0f 90       	pop	r0
	init_twi1_gyro();

	/* Device Baro MS560702BA03-50 - I2C address: 0x76 */
	init_twi1_baro();

	printf("-----------\r\n\r\n");
    367a:	89 ed       	ldi	r24, 0xD9	; 217
    367c:	94 e2       	ldi	r25, 0x24	; 36
    367e:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
	#endif

	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
    3682:	61 ed       	ldi	r22, 0xD1	; 209
    3684:	72 e1       	ldi	r23, 0x12	; 18
    3686:	83 e1       	ldi	r24, 0x13	; 19
    3688:	90 e0       	ldi	r25, 0x00	; 0

/* TWI2 - LCD Port */
static void start_twi2_lcd(void)
{
	/* Read the version number */
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_GET_VER;
    368a:	68 db       	rcall	.-2352   	; 0x2d5c <__portable_avr_delay_cycles>
    368c:	eb e0       	ldi	r30, 0x0B	; 11
    368e:	f0 e2       	ldi	r31, 0x20	; 32
    3690:	81 e0       	ldi	r24, 0x01	; 1
	twi2_packet.addr_length = 1;
    3692:	81 83       	std	Z+1, r24	; 0x01
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	84 83       	std	Z+4, r24	; 0x04
	twi2_packet.length = 1;
    369a:	95 83       	std	Z+5, r25	; 0x05
    369c:	80 87       	std	Z+8, r24	; 0x08
    369e:	91 87       	std	Z+9, r25	; 0x09
    36a0:	41 e0       	ldi	r20, 0x01	; 1
    36a2:	bf 01       	movw	r22, r30
    36a4:	80 e8       	ldi	r24, 0x80	; 128
    36a6:	94 e0       	ldi	r25, 0x04	; 4
    36a8:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
	twi_master_read(&TWI2_MASTER, &twi2_packet);
	g_twi2_lcd_version = twi2_m_data[0];
    36ac:	80 91 fb 28 	lds	r24, 0x28FB	; 0x8028fb <twi2_m_data>
    36b0:	80 93 81 29 	sts	0x2981, r24	; 0x802981 <g_twi2_lcd_version>

	if (g_twi2_lcd_version >= 0x11) {
    36b4:	81 31       	cpi	r24, 0x11	; 17
		/* Select "Smart-LCD draw box" mode
		 * that includes a clear screen     */
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_MODE;
    36b6:	78 f1       	brcs	.+94     	; 0x3716 <twi_start+0x53e>
    36b8:	cb e0       	ldi	r28, 0x0B	; 11
    36ba:	d0 e2       	ldi	r29, 0x20	; 32
    36bc:	82 e0       	ldi	r24, 0x02	; 2
		twi2_m_data[0] = 0x10;
    36be:	89 83       	std	Y+1, r24	; 0x01
    36c0:	0f 2e       	mov	r0, r31
    36c2:	fb ef       	ldi	r31, 0xFB	; 251
    36c4:	ef 2e       	mov	r14, r31
    36c6:	f8 e2       	ldi	r31, 0x28	; 40
    36c8:	ff 2e       	mov	r15, r31
    36ca:	f0 2d       	mov	r31, r0
    36cc:	80 e1       	ldi	r24, 0x10	; 16
    36ce:	f7 01       	movw	r30, r14
		twi2_packet.length = 1;
    36d0:	80 83       	st	Z, r24
    36d2:	01 e0       	ldi	r16, 0x01	; 1
    36d4:	10 e0       	ldi	r17, 0x00	; 0
    36d6:	08 87       	std	Y+8, r16	; 0x08
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    36d8:	19 87       	std	Y+9, r17	; 0x09
    36da:	40 e0       	ldi	r20, 0x00	; 0
    36dc:	be 01       	movw	r22, r28
    36de:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    36e0:	94 e0       	ldi	r25, 0x04	; 4
    36e2:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    36e6:	65 e0       	ldi	r22, 0x05	; 5
    36e8:	70 e0       	ldi	r23, 0x00	; 0

		twi2_waitUntilReady();
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	90 e0       	ldi	r25, 0x00	; 0
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
    36ee:	36 db       	rcall	.-2452   	; 0x2d5c <__portable_avr_delay_cycles>
    36f0:	40 db       	rcall	.-2432   	; 0x2d72 <twi2_waitUntilReady>
		twi2_m_data[0] = GFX_PIXEL_SET;
    36f2:	84 e1       	ldi	r24, 0x14	; 20
    36f4:	89 83       	std	Y+1, r24	; 0x01
    36f6:	81 e0       	ldi	r24, 0x01	; 1
		twi2_packet.length = 1;
    36f8:	f7 01       	movw	r30, r14
    36fa:	80 83       	st	Z, r24
    36fc:	08 87       	std	Y+8, r16	; 0x08
    36fe:	19 87       	std	Y+9, r17	; 0x09
    3700:	40 e0       	ldi	r20, 0x00	; 0
    3702:	be 01       	movw	r22, r28
    3704:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3706:	94 e0       	ldi	r25, 0x04	; 4
    3708:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    370c:	65 e0       	ldi	r22, 0x05	; 5
    370e:	70 e0       	ldi	r23, 0x00	; 0
    3710:	80 e0       	ldi	r24, 0x00	; 0
	/* Start each TWI channel devices */
	start_twi1_onboard();

	delay_ms(250);											// Give Smart-LCD some time being up and ready
	start_twi2_lcd();
}
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	23 db       	rcall	.-2490   	; 0x2d5c <__portable_avr_delay_cycles>
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	1f 91       	pop	r17
    371c:	0f 91       	pop	r16
    371e:	ff 90       	pop	r15
    3720:	ef 90       	pop	r14
    3722:	df 90       	pop	r13
    3724:	cf 90       	pop	r12
    3726:	bf 90       	pop	r11
    3728:	af 90       	pop	r10
    372a:	9f 90       	pop	r9
    372c:	8f 90       	pop	r8
    372e:	08 95       	ret

00003730 <isr_10ms_twi1_onboard>:
	}
}

/* 10ms TWI1 - Gyro device */
void isr_10ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    3730:	08 95       	ret

00003732 <isr_500ms_twi1_onboard>:
	}
}

/* 500ms TWI1 - Baro, Hygro devices */
void isr_500ms_twi1_onboard(uint32_t now)
{	/* Service time slot */
    3732:	cf 92       	push	r12
    3734:	df 92       	push	r13
    3736:	ef 92       	push	r14
    3738:	ff 92       	push	r15
    373a:	6b 01       	movw	r12, r22
    373c:	7c 01       	movw	r14, r24
	if (g_twi1_hygro_valid) {
    373e:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <g_twi1_hygro_valid>
    3742:	88 23       	and	r24, r24
    3744:	69 f1       	breq	.+90     	; 0x37a0 <isr_500ms_twi1_onboard+0x6e>
	if (!sync) {
		return;
	}

	/* Read cyclic measurement data */
	twi1_packet.chip = TWI1_SLAVE_HYGRO_ADDR;
    3746:	ef e1       	ldi	r30, 0x1F	; 31
    3748:	f0 e2       	ldi	r31, 0x20	; 32
    374a:	84 e4       	ldi	r24, 0x44	; 68
    374c:	80 83       	st	Z, r24
	twi1_packet.addr[0] = TWI1_SLAVE_HYGRO_REG_FETCH_DATA_HI;
    374e:	80 ee       	ldi	r24, 0xE0	; 224
    3750:	81 83       	std	Z+1, r24	; 0x01
	twi1_packet.addr[1] = TWI1_SLAVE_HYGRO_REG_FETCH_DATA_LO;
    3752:	12 82       	std	Z+2, r1	; 0x02
	twi1_packet.addr_length = 2;
    3754:	82 e0       	ldi	r24, 0x02	; 2
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	84 83       	std	Z+4, r24	; 0x04
    375a:	95 83       	std	Z+5, r25	; 0x05
	twi1_packet.length = 5;
    375c:	85 e0       	ldi	r24, 0x05	; 5
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	80 87       	std	Z+8, r24	; 0x08
    3762:	91 87       	std	Z+9, r25	; 0x09
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3764:	41 e0       	ldi	r20, 0x01	; 1
    3766:	bf 01       	movw	r22, r30
    3768:	80 ea       	ldi	r24, 0xA0	; 160
    376a:	94 e0       	ldi	r25, 0x04	; 4
    376c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
	status_code_t sc = twi_master_read(&TWI1_MASTER, &twi1_packet);
	if (sc == STATUS_OK) {
    3770:	81 11       	cpse	r24, r1
    3772:	16 c0       	rjmp	.+44     	; 0x37a0 <isr_500ms_twi1_onboard+0x6e>
		g_twi1_hygro_S_T	= ((uint16_t)twi1_m_data[0] << 8) | twi1_m_data[1];
    3774:	e3 e0       	ldi	r30, 0x03	; 3
    3776:	f9 e2       	ldi	r31, 0x29	; 41
    3778:	80 81       	ld	r24, Z
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	98 2f       	mov	r25, r24
    377e:	88 27       	eor	r24, r24
    3780:	21 81       	ldd	r18, Z+1	; 0x01
    3782:	82 2b       	or	r24, r18
    3784:	80 93 88 29 	sts	0x2988, r24	; 0x802988 <g_twi1_hygro_S_T>
    3788:	90 93 89 29 	sts	0x2989, r25	; 0x802989 <g_twi1_hygro_S_T+0x1>
		g_twi1_hygro_S_RH	= ((uint16_t)twi1_m_data[3] << 8) | twi1_m_data[4];
    378c:	83 81       	ldd	r24, Z+3	; 0x03
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	98 2f       	mov	r25, r24
    3792:	88 27       	eor	r24, r24
    3794:	24 81       	ldd	r18, Z+4	; 0x04
    3796:	82 2b       	or	r24, r18
    3798:	80 93 86 29 	sts	0x2986, r24	; 0x802986 <g_twi1_hygro_S_RH>
    379c:	90 93 87 29 	sts	0x2987, r25	; 0x802987 <g_twi1_hygro_S_RH+0x1>
{	/* Service time slot */
	if (g_twi1_hygro_valid) {
		isr_twi1_hygro(now, true);
	}

	if (g_twi1_baro_valid) {
    37a0:	80 91 ae 29 	lds	r24, 0x29AE	; 0x8029ae <g_twi1_baro_valid>
    37a4:	88 23       	and	r24, r24
    37a6:	21 f0       	breq	.+8      	; 0x37b0 <isr_500ms_twi1_onboard+0x7e>
		isr_twi1_baro(now, true);
    37a8:	41 e0       	ldi	r20, 0x01	; 1
    37aa:	c7 01       	movw	r24, r14
    37ac:	b6 01       	movw	r22, r12
    37ae:	2a db       	rcall	.-2476   	; 0x2e04 <isr_twi1_baro>
	}
}
    37b0:	ff 90       	pop	r15
    37b2:	ef 90       	pop	r14
    37b4:	df 90       	pop	r13
    37b6:	cf 90       	pop	r12
    37b8:	08 95       	ret

000037ba <isr_sparetime_twi1_onboard>:

	if (g_twi1_gyro_valid) {
		isr_twi1_gyro(now, false);
	}

	if (g_twi1_baro_valid) {
    37ba:	20 91 ae 29 	lds	r18, 0x29AE	; 0x8029ae <g_twi1_baro_valid>
    37be:	22 23       	and	r18, r18
    37c0:	11 f0       	breq	.+4      	; 0x37c6 <isr_sparetime_twi1_onboard+0xc>
		isr_twi1_baro(now, false);
    37c2:	40 e0       	ldi	r20, 0x00	; 0
    37c4:	1f cb       	rjmp	.-2498   	; 0x2e04 <isr_twi1_baro>
    37c6:	08 95       	ret

000037c8 <task_twi1_onboard>:
	}
}

/* TWI1 - onboard devices */
void task_twi1_onboard(uint32_t now)
{
    37c8:	2f 92       	push	r2
    37ca:	3f 92       	push	r3
    37cc:	4f 92       	push	r4
    37ce:	5f 92       	push	r5
    37d0:	6f 92       	push	r6
    37d2:	7f 92       	push	r7
    37d4:	8f 92       	push	r8
    37d6:	9f 92       	push	r9
    37d8:	af 92       	push	r10
    37da:	bf 92       	push	r11
    37dc:	cf 92       	push	r12
    37de:	df 92       	push	r13
    37e0:	ef 92       	push	r14
    37e2:	ff 92       	push	r15
    37e4:	0f 93       	push	r16
    37e6:	1f 93       	push	r17
    37e8:	cf 93       	push	r28
    37ea:	df 93       	push	r29
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	aa 97       	sbiw	r28, 0x2a	; 42
    37f2:	cd bf       	out	0x3d, r28	; 61
    37f4:	de bf       	out	0x3e, r29	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    37f6:	8f b7       	in	r24, 0x3f	; 63
    37f8:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    37fa:	f8 94       	cli
	return flags;
    37fc:	9e 81       	ldd	r25, Y+6	; 0x06
	irqflags_t flags = cpu_irq_save();
	bool l_twi1_hygro_valid	= g_twi1_hygro_valid;
    37fe:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <g_twi1_hygro_valid>
	bool l_twi1_gyro_valid	= g_twi1_gyro_valid;
	bool l_twi1_baro_valid	= g_twi1_baro_valid;
    3802:	10 91 ae 29 	lds	r17, 0x29AE	; 0x8029ae <g_twi1_baro_valid>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3806:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (l_twi1_hygro_valid) {
    3808:	88 23       	and	r24, r24
    380a:	09 f4       	brne	.+2      	; 0x380e <task_twi1_onboard+0x46>
    380c:	3c c0       	rjmp	.+120    	; 0x3886 <task_twi1_onboard+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    380e:	8f b7       	in	r24, 0x3f	; 63
    3810:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    3812:	f8 94       	cli
	return flags;
    3814:	8d 81       	ldd	r24, Y+5	; 0x05
{	// Calculations for the presentation layer
	static uint16_t s_twi1_hygro_S_T	= 0UL;
	static uint16_t s_twi1_hygro_S_RH	= 0UL;

	irqflags_t flags = cpu_irq_save();
	uint16_t l_twi1_hygro_S_T	= g_twi1_hygro_S_T;
    3816:	20 91 88 29 	lds	r18, 0x2988	; 0x802988 <g_twi1_hygro_S_T>
    381a:	30 91 89 29 	lds	r19, 0x2989	; 0x802989 <g_twi1_hygro_S_T+0x1>
	uint16_t l_twi1_hygro_S_RH	= g_twi1_hygro_S_RH;
    381e:	e0 90 86 29 	lds	r14, 0x2986	; 0x802986 <g_twi1_hygro_S_RH>
    3822:	f0 90 87 29 	lds	r15, 0x2987	; 0x802987 <g_twi1_hygro_S_RH+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3826:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Temp value when a different measurement has arrived */
	if (l_twi1_hygro_S_T != s_twi1_hygro_S_T) {
    3828:	21 15       	cp	r18, r1
    382a:	31 05       	cpc	r19, r1
    382c:	a9 f0       	breq	.+42     	; 0x3858 <task_twi1_onboard+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    382e:	8f b7       	in	r24, 0x3f	; 63
    3830:	8c 83       	std	Y+4, r24	; 0x04
	cpu_irq_disable();
    3832:	f8 94       	cli
	return flags;
    3834:	0c 81       	ldd	r16, Y+4	; 0x04
		int16_t temp_100 = (int16_t)((((int32_t)l_twi1_hygro_S_T  * 17500) / 0xFFFF) - 4500);

		flags = cpu_irq_save();
		g_twi1_hygro_T_100 = temp_100;
    3836:	ac e5       	ldi	r26, 0x5C	; 92
    3838:	b4 e4       	ldi	r27, 0x44	; 68
    383a:	0e 94 8a 48 	call	0x9114	; 0x9114 <__umulhisi3>
    383e:	2f ef       	ldi	r18, 0xFF	; 255
    3840:	3f ef       	ldi	r19, 0xFF	; 255
    3842:	40 e0       	ldi	r20, 0x00	; 0
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	0e 94 66 48 	call	0x90cc	; 0x90cc <__divmodsi4>
    384a:	24 59       	subi	r18, 0x94	; 148
    384c:	31 41       	sbci	r19, 0x11	; 17
    384e:	20 93 84 29 	sts	0x2984, r18	; 0x802984 <g_twi1_hygro_T_100>
    3852:	30 93 85 29 	sts	0x2985, r19	; 0x802985 <g_twi1_hygro_T_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3856:	0f bf       	out	0x3f, r16	; 63
		cpu_irq_restore(flags);
	}

	/* Calculate and present Hygro value when a different measurement has arrived */
	if (l_twi1_hygro_S_RH != s_twi1_hygro_S_RH) {
    3858:	e1 14       	cp	r14, r1
    385a:	f1 04       	cpc	r15, r1
    385c:	a1 f0       	breq	.+40     	; 0x3886 <task_twi1_onboard+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    385e:	8f b7       	in	r24, 0x3f	; 63
    3860:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    3862:	f8 94       	cli
	return flags;
    3864:	0b 81       	ldd	r16, Y+3	; 0x03
		int16_t rh_100 = (int16_t)( ((int32_t)l_twi1_hygro_S_RH * 10000) / 0xFFFF);

		flags = cpu_irq_save();
		g_twi1_hygro_RH_100 = rh_100;
    3866:	97 01       	movw	r18, r14
    3868:	a0 e1       	ldi	r26, 0x10	; 16
    386a:	b7 e2       	ldi	r27, 0x27	; 39
    386c:	0e 94 8a 48 	call	0x9114	; 0x9114 <__umulhisi3>
    3870:	2f ef       	ldi	r18, 0xFF	; 255
    3872:	3f ef       	ldi	r19, 0xFF	; 255
    3874:	40 e0       	ldi	r20, 0x00	; 0
    3876:	50 e0       	ldi	r21, 0x00	; 0
    3878:	0e 94 66 48 	call	0x90cc	; 0x90cc <__divmodsi4>
    387c:	20 93 82 29 	sts	0x2982, r18	; 0x802982 <g_twi1_hygro_RH_100>
    3880:	30 93 83 29 	sts	0x2983, r19	; 0x802983 <g_twi1_hygro_RH_100+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3884:	0f bf       	out	0x3f, r16	; 63

	if (l_twi1_gyro_valid) {
		task_twi1_gyro(now);
	}

	if (l_twi1_baro_valid) {
    3886:	11 23       	and	r17, r17
    3888:	09 f4       	brne	.+2      	; 0x388c <task_twi1_onboard+0xc4>
    388a:	25 c2       	rjmp	.+1098   	; 0x3cd6 <task_twi1_onboard+0x50e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    388c:	8f b7       	in	r24, 0x3f	; 63
    388e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3890:	f8 94       	cli
	return flags;
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
{	// Calculations for the presentation layer
	static uint32_t s_twi1_baro_d1 = 0UL;
	static uint32_t s_twi1_baro_d2 = 0UL;

	irqflags_t flags = cpu_irq_save();
	uint32_t l_twi1_baro_d1 = g_twi1_baro_d1;
    3894:	20 91 98 29 	lds	r18, 0x2998	; 0x802998 <g_twi1_baro_d1>
    3898:	30 91 99 29 	lds	r19, 0x2999	; 0x802999 <g_twi1_baro_d1+0x1>
    389c:	40 91 9a 29 	lds	r20, 0x299A	; 0x80299a <g_twi1_baro_d1+0x2>
    38a0:	50 91 9b 29 	lds	r21, 0x299B	; 0x80299b <g_twi1_baro_d1+0x3>
    38a4:	2b 8f       	std	Y+27, r18	; 0x1b
    38a6:	3c 8f       	std	Y+28, r19	; 0x1c
    38a8:	4d 8f       	std	Y+29, r20	; 0x1d
    38aa:	5e 8f       	std	Y+30, r21	; 0x1e
	uint32_t l_twi1_baro_d2 = g_twi1_baro_d2;
    38ac:	40 91 94 29 	lds	r20, 0x2994	; 0x802994 <g_twi1_baro_d2>
    38b0:	50 91 95 29 	lds	r21, 0x2995	; 0x802995 <g_twi1_baro_d2+0x1>
    38b4:	60 91 96 29 	lds	r22, 0x2996	; 0x802996 <g_twi1_baro_d2+0x2>
    38b8:	70 91 97 29 	lds	r23, 0x2997	; 0x802997 <g_twi1_baro_d2+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    38bc:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	/* Calculate and present Baro and Temp values when a different measurement has arrived */
	if ((l_twi1_baro_d1 != s_twi1_baro_d1) || (l_twi1_baro_d2 != s_twi1_baro_d2)) {
    38be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38c2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    38c4:	be 8d       	ldd	r27, Y+30	; 0x1e
    38c6:	89 2b       	or	r24, r25
    38c8:	8a 2b       	or	r24, r26
    38ca:	8b 2b       	or	r24, r27
    38cc:	31 f4       	brne	.+12     	; 0x38da <task_twi1_onboard+0x112>
    38ce:	41 15       	cp	r20, r1
    38d0:	51 05       	cpc	r21, r1
    38d2:	61 05       	cpc	r22, r1
    38d4:	71 05       	cpc	r23, r1
    38d6:	09 f4       	brne	.+2      	; 0x38da <task_twi1_onboard+0x112>
    38d8:	fe c1       	rjmp	.+1020   	; 0x3cd6 <task_twi1_onboard+0x50e>
		int32_t dT = (int32_t)l_twi1_baro_d2 - ((int32_t)g_twi1_baro_c[5] << 8);
    38da:	0f 2e       	mov	r0, r31
    38dc:	fc e9       	ldi	r31, 0x9C	; 156
    38de:	2f 2e       	mov	r2, r31
    38e0:	f9 e2       	ldi	r31, 0x29	; 41
    38e2:	3f 2e       	mov	r3, r31
    38e4:	f0 2d       	mov	r31, r0
		int32_t temp_p20 = (int32_t)(((int64_t)dT * g_twi1_baro_c[6]) >> 23);
    38e6:	d1 01       	movw	r26, r2
    38e8:	1a 96       	adiw	r26, 0x0a	; 10
    38ea:	8d 91       	ld	r24, X+
    38ec:	9c 91       	ld	r25, X
    38ee:	1b 97       	sbiw	r26, 0x0b	; 11
    38f0:	a0 e0       	ldi	r26, 0x00	; 0
    38f2:	b0 e0       	ldi	r27, 0x00	; 0
    38f4:	ba 2f       	mov	r27, r26
    38f6:	a9 2f       	mov	r26, r25
    38f8:	98 2f       	mov	r25, r24
    38fa:	88 27       	eor	r24, r24
    38fc:	2a 01       	movw	r4, r20
    38fe:	3b 01       	movw	r6, r22
    3900:	48 1a       	sub	r4, r24
    3902:	59 0a       	sbc	r5, r25
    3904:	6a 0a       	sbc	r6, r26
    3906:	7b 0a       	sbc	r7, r27
    3908:	a3 01       	movw	r20, r6
    390a:	92 01       	movw	r18, r4
    390c:	55 0f       	add	r21, r21
    390e:	22 0b       	sbc	r18, r18
    3910:	32 2f       	mov	r19, r18
    3912:	a9 01       	movw	r20, r18
    3914:	2f 83       	std	Y+7, r18	; 0x07
    3916:	38 87       	std	Y+8, r19	; 0x08
    3918:	49 87       	std	Y+9, r20	; 0x09
    391a:	5a 87       	std	Y+10, r21	; 0x0a
    391c:	d1 01       	movw	r26, r2
    391e:	1c 96       	adiw	r26, 0x0c	; 12
    3920:	4d 91       	ld	r20, X+
    3922:	5c 91       	ld	r21, X
    3924:	1d 97       	sbiw	r26, 0x0d	; 13
    3926:	a4 2c       	mov	r10, r4
    3928:	b5 2c       	mov	r11, r5
    392a:	c6 2c       	mov	r12, r6
    392c:	d7 2c       	mov	r13, r7
    392e:	ef 80       	ldd	r14, Y+7	; 0x07
    3930:	fe 2c       	mov	r15, r14
    3932:	0e 2d       	mov	r16, r14
    3934:	1e 2d       	mov	r17, r14
    3936:	24 2f       	mov	r18, r20
    3938:	35 2f       	mov	r19, r21
    393a:	40 e0       	ldi	r20, 0x00	; 0
    393c:	50 e0       	ldi	r21, 0x00	; 0
    393e:	60 e0       	ldi	r22, 0x00	; 0
    3940:	70 e0       	ldi	r23, 0x00	; 0
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	0e 94 a3 48 	call	0x9146	; 0x9146 <__muldi3>
    394a:	07 e1       	ldi	r16, 0x17	; 23
    394c:	0e 94 0d 49 	call	0x921a	; 0x921a <__ashrdi3>
    3950:	2f 87       	std	Y+15, r18	; 0x0f
    3952:	38 8b       	std	Y+16, r19	; 0x10
    3954:	49 8b       	std	Y+17, r20	; 0x11
    3956:	5a 8b       	std	Y+18, r21	; 0x12
    3958:	2f 85       	ldd	r18, Y+15	; 0x0f
    395a:	38 89       	ldd	r19, Y+16	; 0x10
    395c:	49 89       	ldd	r20, Y+17	; 0x11
    395e:	5a 89       	ldd	r21, Y+18	; 0x12
    3960:	2f a3       	std	Y+39, r18	; 0x27
    3962:	38 a7       	std	Y+40, r19	; 0x28
    3964:	49 a7       	std	Y+41, r20	; 0x29
    3966:	5a a7       	std	Y+42, r21	; 0x2a
		int32_t temp = temp_p20 + 2000L;
    3968:	ba 01       	movw	r22, r20
    396a:	a9 01       	movw	r20, r18
    396c:	40 53       	subi	r20, 0x30	; 48
    396e:	58 4f       	sbci	r21, 0xF8	; 248
    3970:	6f 4f       	sbci	r22, 0xFF	; 255
    3972:	7f 4f       	sbci	r23, 0xFF	; 255
    3974:	4f 8b       	std	Y+23, r20	; 0x17
    3976:	58 8f       	std	Y+24, r21	; 0x18
    3978:	69 8f       	std	Y+25, r22	; 0x19
    397a:	7a 8f       	std	Y+26, r23	; 0x1a
		int64_t off  = ((int64_t)g_twi1_baro_c[2] << 17) + (((int64_t)g_twi1_baro_c[4] * dT) >> 6);
    397c:	d1 01       	movw	r26, r2
    397e:	18 96       	adiw	r26, 0x08	; 8
    3980:	4d 91       	ld	r20, X+
    3982:	5c 91       	ld	r21, X
    3984:	19 97       	sbiw	r26, 0x09	; 9
    3986:	fe 2c       	mov	r15, r14
    3988:	0e 2d       	mov	r16, r14
    398a:	24 2f       	mov	r18, r20
    398c:	35 2f       	mov	r19, r21
    398e:	40 e0       	ldi	r20, 0x00	; 0
    3990:	50 e0       	ldi	r21, 0x00	; 0
    3992:	60 e0       	ldi	r22, 0x00	; 0
    3994:	70 e0       	ldi	r23, 0x00	; 0
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	0e 94 a3 48 	call	0x9146	; 0x9146 <__muldi3>
    399e:	06 e0       	ldi	r16, 0x06	; 6
    39a0:	0e 94 0d 49 	call	0x921a	; 0x921a <__ashrdi3>
    39a4:	2b 8b       	std	Y+19, r18	; 0x13
    39a6:	3c 8b       	std	Y+20, r19	; 0x14
    39a8:	84 2e       	mov	r8, r20
    39aa:	95 2e       	mov	r9, r21
    39ac:	b6 2f       	mov	r27, r22
    39ae:	a7 2f       	mov	r26, r23
    39b0:	8d 8b       	std	Y+21, r24	; 0x15
    39b2:	9e 8b       	std	Y+22, r25	; 0x16
    39b4:	f1 01       	movw	r30, r2
    39b6:	a4 80       	ldd	r10, Z+4	; 0x04
    39b8:	b5 80       	ldd	r11, Z+5	; 0x05
    39ba:	2a 2d       	mov	r18, r10
    39bc:	3b 2d       	mov	r19, r11
    39be:	40 e0       	ldi	r20, 0x00	; 0
    39c0:	50 e0       	ldi	r21, 0x00	; 0
    39c2:	60 e0       	ldi	r22, 0x00	; 0
    39c4:	70 e0       	ldi	r23, 0x00	; 0
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	01 e1       	ldi	r16, 0x11	; 17
    39cc:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <__ashldi3>
    39d0:	a2 2e       	mov	r10, r18
    39d2:	b3 2e       	mov	r11, r19
    39d4:	c4 2e       	mov	r12, r20
    39d6:	d5 2e       	mov	r13, r21
    39d8:	e6 2e       	mov	r14, r22
    39da:	f7 2e       	mov	r15, r23
    39dc:	08 2f       	mov	r16, r24
    39de:	19 2f       	mov	r17, r25
    39e0:	2b 89       	ldd	r18, Y+19	; 0x13
    39e2:	3c 89       	ldd	r19, Y+20	; 0x14
    39e4:	48 2d       	mov	r20, r8
    39e6:	59 2d       	mov	r21, r9
    39e8:	6b 2f       	mov	r22, r27
    39ea:	7a 2f       	mov	r23, r26
    39ec:	8d 89       	ldd	r24, Y+21	; 0x15
    39ee:	9e 89       	ldd	r25, Y+22	; 0x16
    39f0:	0e 94 2b 49 	call	0x9256	; 0x9256 <__adddi3>
    39f4:	2b 8b       	std	Y+19, r18	; 0x13
    39f6:	3c 8b       	std	Y+20, r19	; 0x14
    39f8:	4f 8f       	std	Y+31, r20	; 0x1f
    39fa:	58 a3       	std	Y+32, r21	; 0x20
    39fc:	69 a3       	std	Y+33, r22	; 0x21
    39fe:	7a a3       	std	Y+34, r23	; 0x22
    3a00:	8b a3       	std	Y+35, r24	; 0x23
    3a02:	9c a3       	std	Y+36, r25	; 0x24
		int64_t sens = ((int64_t)g_twi1_baro_c[1] << 16) + (((int64_t)g_twi1_baro_c[3] * dT) >> 7);
    3a04:	46 81       	ldd	r20, Z+6	; 0x06
    3a06:	57 81       	ldd	r21, Z+7	; 0x07
    3a08:	a4 2c       	mov	r10, r4
    3a0a:	b5 2c       	mov	r11, r5
    3a0c:	c6 2c       	mov	r12, r6
    3a0e:	d7 2c       	mov	r13, r7
    3a10:	ef 80       	ldd	r14, Y+7	; 0x07
    3a12:	fe 2c       	mov	r15, r14
    3a14:	0e 2d       	mov	r16, r14
    3a16:	1e 2d       	mov	r17, r14
    3a18:	24 2f       	mov	r18, r20
    3a1a:	35 2f       	mov	r19, r21
    3a1c:	40 e0       	ldi	r20, 0x00	; 0
    3a1e:	50 e0       	ldi	r21, 0x00	; 0
    3a20:	60 e0       	ldi	r22, 0x00	; 0
    3a22:	70 e0       	ldi	r23, 0x00	; 0
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	0e 94 a3 48 	call	0x9146	; 0x9146 <__muldi3>
    3a2c:	07 e0       	ldi	r16, 0x07	; 7
    3a2e:	0e 94 0d 49 	call	0x921a	; 0x921a <__ashrdi3>
    3a32:	2d 8b       	std	Y+21, r18	; 0x15
    3a34:	3e 8b       	std	Y+22, r19	; 0x16
    3a36:	84 2e       	mov	r8, r20
    3a38:	95 2e       	mov	r9, r21
    3a3a:	b6 2f       	mov	r27, r22
    3a3c:	a7 2f       	mov	r26, r23
    3a3e:	8d a3       	std	Y+37, r24	; 0x25
    3a40:	9e a3       	std	Y+38, r25	; 0x26
    3a42:	f1 01       	movw	r30, r2
    3a44:	a2 80       	ldd	r10, Z+2	; 0x02
    3a46:	b3 80       	ldd	r11, Z+3	; 0x03
    3a48:	2a 2d       	mov	r18, r10
    3a4a:	3b 2d       	mov	r19, r11
    3a4c:	40 e0       	ldi	r20, 0x00	; 0
    3a4e:	50 e0       	ldi	r21, 0x00	; 0
    3a50:	60 e0       	ldi	r22, 0x00	; 0
    3a52:	70 e0       	ldi	r23, 0x00	; 0
    3a54:	80 e0       	ldi	r24, 0x00	; 0
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	00 e1       	ldi	r16, 0x10	; 16
    3a5a:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <__ashldi3>
    3a5e:	a2 2e       	mov	r10, r18
    3a60:	b3 2e       	mov	r11, r19
    3a62:	c4 2e       	mov	r12, r20
    3a64:	d5 2e       	mov	r13, r21
    3a66:	e6 2e       	mov	r14, r22
    3a68:	f7 2e       	mov	r15, r23
    3a6a:	08 2f       	mov	r16, r24
    3a6c:	19 2f       	mov	r17, r25
    3a6e:	2d 89       	ldd	r18, Y+21	; 0x15
    3a70:	3e 89       	ldd	r19, Y+22	; 0x16
    3a72:	48 2d       	mov	r20, r8
    3a74:	59 2d       	mov	r21, r9
    3a76:	6b 2f       	mov	r22, r27
    3a78:	7a 2f       	mov	r23, r26
    3a7a:	8d a1       	ldd	r24, Y+37	; 0x25
    3a7c:	9e a1       	ldd	r25, Y+38	; 0x26
    3a7e:	0e 94 2b 49 	call	0x9256	; 0x9256 <__adddi3>
    3a82:	32 2e       	mov	r3, r18
    3a84:	23 2e       	mov	r2, r19
    3a86:	4d 8b       	std	Y+21, r20	; 0x15
    3a88:	5e 8b       	std	Y+22, r21	; 0x16
    3a8a:	6d a3       	std	Y+37, r22	; 0x25
    3a8c:	7e a3       	std	Y+38, r23	; 0x26
    3a8e:	98 2e       	mov	r9, r24
    3a90:	89 2e       	mov	r8, r25

		/* Low temp and very low temp corrections */
		if (temp < 2000L) {
    3a92:	2f 89       	ldd	r18, Y+23	; 0x17
    3a94:	38 8d       	ldd	r19, Y+24	; 0x18
    3a96:	49 8d       	ldd	r20, Y+25	; 0x19
    3a98:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3a9a:	20 3d       	cpi	r18, 0xD0	; 208
    3a9c:	37 40       	sbci	r19, 0x07	; 7
    3a9e:	41 05       	cpc	r20, r1
    3aa0:	51 05       	cpc	r21, r1
    3aa2:	0c f0       	brlt	.+2      	; 0x3aa6 <task_twi1_onboard+0x2de>
    3aa4:	d0 c0       	rjmp	.+416    	; 0x3c46 <task_twi1_onboard+0x47e>
			int32_t t2 = (int32_t)(((int64_t)dT * (int64_t)dT) >> 31);
    3aa6:	a4 2c       	mov	r10, r4
    3aa8:	b5 2c       	mov	r11, r5
    3aaa:	c6 2c       	mov	r12, r6
    3aac:	d7 2c       	mov	r13, r7
    3aae:	ef 80       	ldd	r14, Y+7	; 0x07
    3ab0:	fe 2c       	mov	r15, r14
    3ab2:	0e 2d       	mov	r16, r14
    3ab4:	1e 2d       	mov	r17, r14
    3ab6:	24 2d       	mov	r18, r4
    3ab8:	35 2d       	mov	r19, r5
    3aba:	46 2d       	mov	r20, r6
    3abc:	57 2d       	mov	r21, r7
    3abe:	60 2f       	mov	r22, r16
    3ac0:	70 2f       	mov	r23, r16
    3ac2:	80 2f       	mov	r24, r16
    3ac4:	9e 2d       	mov	r25, r14
    3ac6:	0e 94 a3 48 	call	0x9146	; 0x9146 <__muldi3>
    3aca:	0f e1       	ldi	r16, 0x1F	; 31
    3acc:	0e 94 0d 49 	call	0x921a	; 0x921a <__ashrdi3>
    3ad0:	2f 83       	std	Y+7, r18	; 0x07
    3ad2:	38 87       	std	Y+8, r19	; 0x08
    3ad4:	49 87       	std	Y+9, r20	; 0x09
    3ad6:	5a 87       	std	Y+10, r21	; 0x0a
			int32_t temp_p20_2 = temp_p20 * temp_p20;
    3ad8:	2f 85       	ldd	r18, Y+15	; 0x0f
    3ada:	38 89       	ldd	r19, Y+16	; 0x10
    3adc:	49 89       	ldd	r20, Y+17	; 0x11
    3ade:	5a 89       	ldd	r21, Y+18	; 0x12
    3ae0:	ca 01       	movw	r24, r20
    3ae2:	b9 01       	movw	r22, r18
    3ae4:	0e 94 0e 48 	call	0x901c	; 0x901c <__mulsi3>
    3ae8:	2b 01       	movw	r4, r22
    3aea:	3c 01       	movw	r6, r24
			int32_t off2 = (61 * temp_p20_2) >> 4;
    3aec:	ad e3       	ldi	r26, 0x3D	; 61
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	9b 01       	movw	r18, r22
    3af2:	ac 01       	movw	r20, r24
    3af4:	0e 94 99 48 	call	0x9132	; 0x9132 <__muluhisi3>
    3af8:	7b 01       	movw	r14, r22
    3afa:	8c 01       	movw	r16, r24
    3afc:	68 94       	set
    3afe:	13 f8       	bld	r1, 3
    3b00:	15 95       	asr	r17
    3b02:	07 95       	ror	r16
    3b04:	f7 94       	ror	r15
    3b06:	e7 94       	ror	r14
    3b08:	16 94       	lsr	r1
    3b0a:	d1 f7       	brne	.-12     	; 0x3b00 <task_twi1_onboard+0x338>
			int32_t sens2 = temp_p20_2 << 1;
    3b0c:	44 0c       	add	r4, r4
    3b0e:	55 1c       	adc	r5, r5
    3b10:	66 1c       	adc	r6, r6
    3b12:	77 1c       	adc	r7, r7

			if (temp < -1500L) {
    3b14:	8f 89       	ldd	r24, Y+23	; 0x17
    3b16:	98 8d       	ldd	r25, Y+24	; 0x18
    3b18:	a9 8d       	ldd	r26, Y+25	; 0x19
    3b1a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3b1c:	84 32       	cpi	r24, 0x24	; 36
    3b1e:	9a 4f       	sbci	r25, 0xFA	; 250
    3b20:	af 4f       	sbci	r26, 0xFF	; 255
    3b22:	bf 4f       	sbci	r27, 0xFF	; 255
    3b24:	c4 f5       	brge	.+112    	; 0x3b96 <task_twi1_onboard+0x3ce>
				int32_t temp_m15 = temp + 1500L;
    3b26:	6f a1       	ldd	r22, Y+39	; 0x27
    3b28:	78 a5       	ldd	r23, Y+40	; 0x28
    3b2a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b2e:	64 55       	subi	r22, 0x54	; 84
    3b30:	72 4f       	sbci	r23, 0xF2	; 242
    3b32:	8f 4f       	sbci	r24, 0xFF	; 255
    3b34:	9f 4f       	sbci	r25, 0xFF	; 255
				int32_t temp_m15_2 = temp_m15 * temp_m15;
    3b36:	9b 01       	movw	r18, r22
    3b38:	ac 01       	movw	r20, r24
    3b3a:	0e 94 0e 48 	call	0x901c	; 0x901c <__mulsi3>
				off2  += 15 * temp_m15_2;
    3b3e:	9b 01       	movw	r18, r22
    3b40:	ac 01       	movw	r20, r24
    3b42:	22 0f       	add	r18, r18
    3b44:	33 1f       	adc	r19, r19
    3b46:	44 1f       	adc	r20, r20
    3b48:	55 1f       	adc	r21, r21
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	82 0f       	add	r24, r18
    3b50:	93 1f       	adc	r25, r19
    3b52:	a4 1f       	adc	r26, r20
    3b54:	b5 1f       	adc	r27, r21
    3b56:	5c 01       	movw	r10, r24
    3b58:	6d 01       	movw	r12, r26
    3b5a:	aa 0c       	add	r10, r10
    3b5c:	bb 1c       	adc	r11, r11
    3b5e:	cc 1c       	adc	r12, r12
    3b60:	dd 1c       	adc	r13, r13
    3b62:	aa 0c       	add	r10, r10
    3b64:	bb 1c       	adc	r11, r11
    3b66:	cc 1c       	adc	r12, r12
    3b68:	dd 1c       	adc	r13, r13
    3b6a:	8a 0d       	add	r24, r10
    3b6c:	9b 1d       	adc	r25, r11
    3b6e:	ac 1d       	adc	r26, r12
    3b70:	bd 1d       	adc	r27, r13
    3b72:	e8 0e       	add	r14, r24
    3b74:	f9 1e       	adc	r15, r25
    3b76:	0a 1f       	adc	r16, r26
    3b78:	1b 1f       	adc	r17, r27
				sens2 +=  8 * temp_m15_2;
    3b7a:	da 01       	movw	r26, r20
    3b7c:	c9 01       	movw	r24, r18
    3b7e:	88 0f       	add	r24, r24
    3b80:	99 1f       	adc	r25, r25
    3b82:	aa 1f       	adc	r26, r26
    3b84:	bb 1f       	adc	r27, r27
    3b86:	88 0f       	add	r24, r24
    3b88:	99 1f       	adc	r25, r25
    3b8a:	aa 1f       	adc	r26, r26
    3b8c:	bb 1f       	adc	r27, r27
    3b8e:	48 0e       	add	r4, r24
    3b90:	59 1e       	adc	r5, r25
    3b92:	6a 1e       	adc	r6, r26
    3b94:	7b 1e       	adc	r7, r27
			}
			temp -= t2;
    3b96:	2f 89       	ldd	r18, Y+23	; 0x17
    3b98:	38 8d       	ldd	r19, Y+24	; 0x18
    3b9a:	49 8d       	ldd	r20, Y+25	; 0x19
    3b9c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba0:	78 85       	ldd	r23, Y+8	; 0x08
    3ba2:	89 85       	ldd	r24, Y+9	; 0x09
    3ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba6:	26 1b       	sub	r18, r22
    3ba8:	37 0b       	sbc	r19, r23
    3baa:	48 0b       	sbc	r20, r24
    3bac:	59 0b       	sbc	r21, r25
    3bae:	2f 8b       	std	Y+23, r18	; 0x17
    3bb0:	38 8f       	std	Y+24, r19	; 0x18
    3bb2:	49 8f       	std	Y+25, r20	; 0x19
    3bb4:	5a 8f       	std	Y+26, r21	; 0x1a
			off  -= off2;
    3bb6:	d8 01       	movw	r26, r16
    3bb8:	c7 01       	movw	r24, r14
    3bba:	bb 0f       	add	r27, r27
    3bbc:	88 0b       	sbc	r24, r24
    3bbe:	98 2f       	mov	r25, r24
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	8f 83       	std	Y+7, r24	; 0x07
    3bc4:	98 87       	std	Y+8, r25	; 0x08
    3bc6:	a9 87       	std	Y+9, r26	; 0x09
    3bc8:	ba 87       	std	Y+10, r27	; 0x0a
    3bca:	2b 89       	ldd	r18, Y+19	; 0x13
    3bcc:	3c 89       	ldd	r19, Y+20	; 0x14
    3bce:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3bd0:	58 a1       	ldd	r21, Y+32	; 0x20
    3bd2:	69 a1       	ldd	r22, Y+33	; 0x21
    3bd4:	7a a1       	ldd	r23, Y+34	; 0x22
    3bd6:	8b a1       	ldd	r24, Y+35	; 0x23
    3bd8:	9c a1       	ldd	r25, Y+36	; 0x24
    3bda:	ae 2c       	mov	r10, r14
    3bdc:	bf 2c       	mov	r11, r15
    3bde:	c0 2e       	mov	r12, r16
    3be0:	d1 2e       	mov	r13, r17
    3be2:	ef 80       	ldd	r14, Y+7	; 0x07
    3be4:	fe 2c       	mov	r15, r14
    3be6:	0e 2d       	mov	r16, r14
    3be8:	1e 2d       	mov	r17, r14
    3bea:	0e 94 34 49 	call	0x9268	; 0x9268 <__subdi3>
    3bee:	2b 8b       	std	Y+19, r18	; 0x13
    3bf0:	3c 8b       	std	Y+20, r19	; 0x14
    3bf2:	4f 8f       	std	Y+31, r20	; 0x1f
    3bf4:	58 a3       	std	Y+32, r21	; 0x20
    3bf6:	69 a3       	std	Y+33, r22	; 0x21
    3bf8:	7a a3       	std	Y+34, r23	; 0x22
    3bfa:	8b a3       	std	Y+35, r24	; 0x23
    3bfc:	9c a3       	std	Y+36, r25	; 0x24
			sens -= sens2;
    3bfe:	a3 01       	movw	r20, r6
    3c00:	92 01       	movw	r18, r4
    3c02:	55 0f       	add	r21, r21
    3c04:	22 0b       	sbc	r18, r18
    3c06:	32 2f       	mov	r19, r18
    3c08:	a9 01       	movw	r20, r18
    3c0a:	2f 83       	std	Y+7, r18	; 0x07
    3c0c:	38 87       	std	Y+8, r19	; 0x08
    3c0e:	49 87       	std	Y+9, r20	; 0x09
    3c10:	5a 87       	std	Y+10, r21	; 0x0a
    3c12:	23 2d       	mov	r18, r3
    3c14:	32 2d       	mov	r19, r2
    3c16:	4d 89       	ldd	r20, Y+21	; 0x15
    3c18:	5e 89       	ldd	r21, Y+22	; 0x16
    3c1a:	6d a1       	ldd	r22, Y+37	; 0x25
    3c1c:	7e a1       	ldd	r23, Y+38	; 0x26
    3c1e:	89 2d       	mov	r24, r9
    3c20:	98 2d       	mov	r25, r8
    3c22:	a4 2c       	mov	r10, r4
    3c24:	b5 2c       	mov	r11, r5
    3c26:	c6 2c       	mov	r12, r6
    3c28:	d7 2c       	mov	r13, r7
    3c2a:	ef 80       	ldd	r14, Y+7	; 0x07
    3c2c:	fe 2c       	mov	r15, r14
    3c2e:	0e 2d       	mov	r16, r14
    3c30:	1e 2d       	mov	r17, r14
    3c32:	0e 94 34 49 	call	0x9268	; 0x9268 <__subdi3>
    3c36:	32 2e       	mov	r3, r18
    3c38:	23 2e       	mov	r2, r19
    3c3a:	4d 8b       	std	Y+21, r20	; 0x15
    3c3c:	5e 8b       	std	Y+22, r21	; 0x16
    3c3e:	6d a3       	std	Y+37, r22	; 0x25
    3c40:	7e a3       	std	Y+38, r23	; 0x26
    3c42:	98 2e       	mov	r9, r24
    3c44:	89 2e       	mov	r8, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c46:	8f b7       	in	r24, 0x3f	; 63
    3c48:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3c4a:	f8 94       	cli
	return flags;
    3c4c:	79 80       	ldd	r7, Y+1	; 0x01
		}
		int32_t p = (int32_t)((((l_twi1_baro_d1 * sens) >> 21) - off) >> 15);

		flags = cpu_irq_save();
		g_twi1_baro_temp_100 = temp;
    3c4e:	4f 89       	ldd	r20, Y+23	; 0x17
    3c50:	58 8d       	ldd	r21, Y+24	; 0x18
    3c52:	69 8d       	ldd	r22, Y+25	; 0x19
    3c54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c56:	40 93 90 29 	sts	0x2990, r20	; 0x802990 <g_twi1_baro_temp_100>
    3c5a:	50 93 91 29 	sts	0x2991, r21	; 0x802991 <g_twi1_baro_temp_100+0x1>
    3c5e:	60 93 92 29 	sts	0x2992, r22	; 0x802992 <g_twi1_baro_temp_100+0x2>
    3c62:	70 93 93 29 	sts	0x2993, r23	; 0x802993 <g_twi1_baro_temp_100+0x3>
		g_twi1_baro_p_100    = p;
    3c66:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3c68:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3c6a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3c6c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3c6e:	9a 01       	movw	r18, r20
    3c70:	ab 01       	movw	r20, r22
    3c72:	60 e0       	ldi	r22, 0x00	; 0
    3c74:	70 e0       	ldi	r23, 0x00	; 0
    3c76:	cb 01       	movw	r24, r22
    3c78:	2f 83       	std	Y+7, r18	; 0x07
    3c7a:	38 87       	std	Y+8, r19	; 0x08
    3c7c:	49 87       	std	Y+9, r20	; 0x09
    3c7e:	5a 87       	std	Y+10, r21	; 0x0a
    3c80:	6b 87       	std	Y+11, r22	; 0x0b
    3c82:	7c 87       	std	Y+12, r23	; 0x0c
    3c84:	8d 87       	std	Y+13, r24	; 0x0d
    3c86:	9e 87       	std	Y+14, r25	; 0x0e
    3c88:	a3 2c       	mov	r10, r3
    3c8a:	b2 2c       	mov	r11, r2
    3c8c:	cd 88       	ldd	r12, Y+21	; 0x15
    3c8e:	de 88       	ldd	r13, Y+22	; 0x16
    3c90:	ed a0       	ldd	r14, Y+37	; 0x25
    3c92:	fe a0       	ldd	r15, Y+38	; 0x26
    3c94:	09 2d       	mov	r16, r9
    3c96:	18 2d       	mov	r17, r8
    3c98:	60 e0       	ldi	r22, 0x00	; 0
    3c9a:	70 e0       	ldi	r23, 0x00	; 0
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	0e 94 a3 48 	call	0x9146	; 0x9146 <__muldi3>
    3ca4:	05 e1       	ldi	r16, 0x15	; 21
    3ca6:	0e 94 0d 49 	call	0x921a	; 0x921a <__ashrdi3>
    3caa:	ab 88       	ldd	r10, Y+19	; 0x13
    3cac:	bc 88       	ldd	r11, Y+20	; 0x14
    3cae:	cf 8c       	ldd	r12, Y+31	; 0x1f
    3cb0:	d8 a0       	ldd	r13, Y+32	; 0x20
    3cb2:	e9 a0       	ldd	r14, Y+33	; 0x21
    3cb4:	fa a0       	ldd	r15, Y+34	; 0x22
    3cb6:	0b a1       	ldd	r16, Y+35	; 0x23
    3cb8:	1c a1       	ldd	r17, Y+36	; 0x24
    3cba:	0e 94 34 49 	call	0x9268	; 0x9268 <__subdi3>
    3cbe:	0f e0       	ldi	r16, 0x0F	; 15
    3cc0:	0e 94 0d 49 	call	0x921a	; 0x921a <__ashrdi3>
    3cc4:	20 93 8c 29 	sts	0x298C, r18	; 0x80298c <g_twi1_baro_p_100>
    3cc8:	30 93 8d 29 	sts	0x298D, r19	; 0x80298d <g_twi1_baro_p_100+0x1>
    3ccc:	40 93 8e 29 	sts	0x298E, r20	; 0x80298e <g_twi1_baro_p_100+0x2>
    3cd0:	50 93 8f 29 	sts	0x298F, r21	; 0x80298f <g_twi1_baro_p_100+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3cd4:	7f be       	out	0x3f, r7	; 63
	}

	if (l_twi1_baro_valid) {
		task_twi1_baro(now);
	}
}
    3cd6:	aa 96       	adiw	r28, 0x2a	; 42
    3cd8:	cd bf       	out	0x3d, r28	; 61
    3cda:	de bf       	out	0x3e, r29	; 62
    3cdc:	df 91       	pop	r29
    3cde:	cf 91       	pop	r28
    3ce0:	1f 91       	pop	r17
    3ce2:	0f 91       	pop	r16
    3ce4:	ff 90       	pop	r15
    3ce6:	ef 90       	pop	r14
    3ce8:	df 90       	pop	r13
    3cea:	cf 90       	pop	r12
    3cec:	bf 90       	pop	r11
    3cee:	af 90       	pop	r10
    3cf0:	9f 90       	pop	r9
    3cf2:	8f 90       	pop	r8
    3cf4:	7f 90       	pop	r7
    3cf6:	6f 90       	pop	r6
    3cf8:	5f 90       	pop	r5
    3cfa:	4f 90       	pop	r4
    3cfc:	3f 90       	pop	r3
    3cfe:	2f 90       	pop	r2
    3d00:	08 95       	ret

00003d02 <task_twi2_lcd>:
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

/* TWI2 - LCD Port */
void task_twi2_lcd(uint32_t now)
{
    3d02:	2f 92       	push	r2
    3d04:	3f 92       	push	r3
    3d06:	4f 92       	push	r4
    3d08:	5f 92       	push	r5
    3d0a:	6f 92       	push	r6
    3d0c:	7f 92       	push	r7
    3d0e:	8f 92       	push	r8
    3d10:	9f 92       	push	r9
    3d12:	af 92       	push	r10
    3d14:	bf 92       	push	r11
    3d16:	cf 92       	push	r12
    3d18:	df 92       	push	r13
    3d1a:	ef 92       	push	r14
    3d1c:	ff 92       	push	r15
    3d1e:	0f 93       	push	r16
    3d20:	1f 93       	push	r17
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
    3d2a:	2d 97       	sbiw	r28, 0x0d	; 13
    3d2c:	cd bf       	out	0x3d, r28	; 61
    3d2e:	de bf       	out	0x3e, r29	; 62
	static uint16_t s_lcd_entry_cnt = 0U;
	static uint32_t s_lcd_last = 0UL;

	if (g_twi2_lcd_version >= 0x11) {
    3d30:	20 91 81 29 	lds	r18, 0x2981	; 0x802981 <g_twi2_lcd_version>
    3d34:	21 31       	cpi	r18, 0x11	; 17
    3d36:	08 f4       	brcc	.+2      	; 0x3d3a <task_twi2_lcd+0x38>
    3d38:	12 c2       	rjmp	.+1060   	; 0x415e <task_twi2_lcd+0x45c>
		//static uint8_t s_ofs = 0;

		/* Show current measurement data on the LCD */
		if (((now - s_lcd_last) >= 1024) || (now < s_lcd_last)) {
    3d3a:	c0 90 ee 26 	lds	r12, 0x26EE	; 0x8026ee <s_lcd_last.7458>
    3d3e:	d0 90 ef 26 	lds	r13, 0x26EF	; 0x8026ef <s_lcd_last.7458+0x1>
    3d42:	e0 90 f0 26 	lds	r14, 0x26F0	; 0x8026f0 <s_lcd_last.7458+0x2>
    3d46:	f0 90 f1 26 	lds	r15, 0x26F1	; 0x8026f1 <s_lcd_last.7458+0x3>
    3d4a:	8b 01       	movw	r16, r22
    3d4c:	9c 01       	movw	r18, r24
    3d4e:	0c 19       	sub	r16, r12
    3d50:	1d 09       	sbc	r17, r13
    3d52:	2e 09       	sbc	r18, r14
    3d54:	3f 09       	sbc	r19, r15
    3d56:	01 15       	cp	r16, r1
    3d58:	14 40       	sbci	r17, 0x04	; 4
    3d5a:	21 05       	cpc	r18, r1
    3d5c:	31 05       	cpc	r19, r1
    3d5e:	30 f4       	brcc	.+12     	; 0x3d6c <task_twi2_lcd+0x6a>
    3d60:	6c 15       	cp	r22, r12
    3d62:	7d 05       	cpc	r23, r13
    3d64:	8e 05       	cpc	r24, r14
    3d66:	9f 05       	cpc	r25, r15
    3d68:	08 f0       	brcs	.+2      	; 0x3d6c <task_twi2_lcd+0x6a>
    3d6a:	18 c2       	rjmp	.+1072   	; 0x419c <task_twi2_lcd+0x49a>
			const uint8_t col_left = 6 * 10;
			uint8_t line = 2;

			s_lcd_last = now;
    3d6c:	60 93 ee 26 	sts	0x26EE, r22	; 0x8026ee <s_lcd_last.7458>
    3d70:	70 93 ef 26 	sts	0x26EF, r23	; 0x8026ef <s_lcd_last.7458+0x1>
    3d74:	80 93 f0 26 	sts	0x26F0, r24	; 0x8026f0 <s_lcd_last.7458+0x2>
    3d78:	90 93 f1 26 	sts	0x26F1, r25	; 0x8026f1 <s_lcd_last.7458+0x3>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3d7c:	8f b7       	in	r24, 0x3f	; 63
    3d7e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3d80:	f8 94       	cli
	return flags;
    3d82:	89 81       	ldd	r24, Y+1	; 0x01

			/* Get up-to-date global data */
			irqflags_t flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000	= g_adc_vctcxo_volt_1000;
    3d84:	c0 90 17 29 	lds	r12, 0x2917	; 0x802917 <g_adc_vctcxo_volt_1000>
    3d88:	d0 90 18 29 	lds	r13, 0x2918	; 0x802918 <g_adc_vctcxo_volt_1000+0x1>
			int16_t l_adc_5v0_volt_1000		= g_adc_5v0_volt_1000;
    3d8c:	60 90 15 29 	lds	r6, 0x2915	; 0x802915 <g_adc_5v0_volt_1000>
    3d90:	70 90 16 29 	lds	r7, 0x2916	; 0x802916 <g_adc_5v0_volt_1000+0x1>
			int16_t l_adc_vbat_volt_1000	= g_adc_vbat_volt_1000;
    3d94:	40 90 13 29 	lds	r4, 0x2913	; 0x802913 <g_adc_vbat_volt_1000>
    3d98:	50 90 14 29 	lds	r5, 0x2914	; 0x802914 <g_adc_vbat_volt_1000+0x1>
			int16_t l_adc_temp_deg_100		= g_adc_temp_deg_100;
    3d9c:	e0 90 0b 29 	lds	r14, 0x290B	; 0x80290b <g_adc_temp_deg_100>
    3da0:	f0 90 0c 29 	lds	r15, 0x290C	; 0x80290c <g_adc_temp_deg_100+0x1>
			int16_t l_adc_io_adc4_volt_1000	= g_adc_io_adc4_volt_1000;
    3da4:	80 90 11 29 	lds	r8, 0x2911	; 0x802911 <g_adc_io_adc4_volt_1000>
    3da8:	90 90 12 29 	lds	r9, 0x2912	; 0x802912 <g_adc_io_adc4_volt_1000+0x1>
			int16_t l_adc_io_adc5_volt_1000	= g_adc_io_adc5_volt_1000;
    3dac:	20 90 0f 29 	lds	r2, 0x290F	; 0x80290f <g_adc_io_adc5_volt_1000>
    3db0:	30 90 10 29 	lds	r3, 0x2910	; 0x802910 <g_adc_io_adc5_volt_1000+0x1>
			//int16_t l_adc_silence_volt_1000	= g_adc_silence_volt_1000;
			int32_t l_twi1_baro_temp_100	= g_twi1_baro_temp_100;
    3db4:	20 91 90 29 	lds	r18, 0x2990	; 0x802990 <g_twi1_baro_temp_100>
    3db8:	30 91 91 29 	lds	r19, 0x2991	; 0x802991 <g_twi1_baro_temp_100+0x1>
    3dbc:	40 91 92 29 	lds	r20, 0x2992	; 0x802992 <g_twi1_baro_temp_100+0x2>
    3dc0:	50 91 93 29 	lds	r21, 0x2993	; 0x802993 <g_twi1_baro_temp_100+0x3>
    3dc4:	2a 83       	std	Y+2, r18	; 0x02
    3dc6:	3b 83       	std	Y+3, r19	; 0x03
    3dc8:	4c 83       	std	Y+4, r20	; 0x04
    3dca:	5d 83       	std	Y+5, r21	; 0x05
			int32_t l_twi1_baro_p_100		= g_twi1_baro_p_100;
    3dcc:	20 91 8c 29 	lds	r18, 0x298C	; 0x80298c <g_twi1_baro_p_100>
    3dd0:	30 91 8d 29 	lds	r19, 0x298D	; 0x80298d <g_twi1_baro_p_100+0x1>
    3dd4:	40 91 8e 29 	lds	r20, 0x298E	; 0x80298e <g_twi1_baro_p_100+0x2>
    3dd8:	50 91 8f 29 	lds	r21, 0x298F	; 0x80298f <g_twi1_baro_p_100+0x3>
    3ddc:	2e 83       	std	Y+6, r18	; 0x06
    3dde:	3f 83       	std	Y+7, r19	; 0x07
    3de0:	48 87       	std	Y+8, r20	; 0x08
    3de2:	59 87       	std	Y+9, r21	; 0x09
			int16_t l_twi1_hygro_T_100		= g_twi1_hygro_T_100;
    3de4:	40 91 84 29 	lds	r20, 0x2984	; 0x802984 <g_twi1_hygro_T_100>
    3de8:	50 91 85 29 	lds	r21, 0x2985	; 0x802985 <g_twi1_hygro_T_100+0x1>
    3dec:	4a 87       	std	Y+10, r20	; 0x0a
    3dee:	5b 87       	std	Y+11, r21	; 0x0b
			int16_t l_twi1_hygro_RH_100		= g_twi1_hygro_RH_100;
    3df0:	e0 91 82 29 	lds	r30, 0x2982	; 0x802982 <g_twi1_hygro_RH_100>
    3df4:	f0 91 83 29 	lds	r31, 0x2983	; 0x802983 <g_twi1_hygro_RH_100+0x1>
    3df8:	ec 87       	std	Y+12, r30	; 0x0c
    3dfa:	fd 87       	std	Y+13, r31	; 0x0d
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3dfc:	8f bf       	out	0x3f, r24	; 63
			cpu_irq_restore(flags);

			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
    3dfe:	80 91 ec 26 	lds	r24, 0x26EC	; 0x8026ec <__data_end>
    3e02:	90 91 ed 26 	lds	r25, 0x26ED	; 0x8026ed <__data_end+0x1>
    3e06:	9c 01       	movw	r18, r24
    3e08:	2f 5f       	subi	r18, 0xFF	; 255
    3e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0c:	20 93 ec 26 	sts	0x26EC, r18	; 0x8026ec <__data_end>
    3e10:	30 93 ed 26 	sts	0x26ED, r19	; 0x8026ed <__data_end+0x1>
    3e14:	89 2b       	or	r24, r25
    3e16:	09 f0       	breq	.+2      	; 0x3e1a <task_twi2_lcd+0x118>
    3e18:	05 c1       	rjmp	.+522    	; 0x4024 <task_twi2_lcd+0x322>
}


static void task_twi2_lcd_cls(void)
{
	twi2_waitUntilReady();
    3e1a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_CLS;
    3e1e:	0f 2e       	mov	r0, r31
    3e20:	fb e0       	ldi	r31, 0x0B	; 11
    3e22:	af 2e       	mov	r10, r31
    3e24:	f0 e2       	ldi	r31, 0x20	; 32
    3e26:	bf 2e       	mov	r11, r31
    3e28:	f0 2d       	mov	r31, r0
    3e2a:	80 e1       	ldi	r24, 0x10	; 16
    3e2c:	f5 01       	movw	r30, r10
    3e2e:	81 83       	std	Z+1, r24	; 0x01
	twi2_packet.length = 0;
    3e30:	10 86       	std	Z+8, r1	; 0x08
    3e32:	11 86       	std	Z+9, r1	; 0x09
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    3e34:	40 e0       	ldi	r20, 0x00	; 0
    3e36:	b5 01       	movw	r22, r10
    3e38:	80 e8       	ldi	r24, 0x80	; 128
    3e3a:	94 e0       	ldi	r25, 0x04	; 4
    3e3c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3e40:	65 e0       	ldi	r22, 0x05	; 5
    3e42:	70 e0       	ldi	r23, 0x00	; 0
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
{
	uint8_t line;

	/* The header line */
	task_twi2_lcd_cls();
	task_twi2_lcd_str(6 * 10, 2, "FindMeSAT");
    3e4c:	48 ee       	ldi	r20, 0xE8	; 232
    3e4e:	54 e2       	ldi	r21, 0x24	; 36
    3e50:	62 e0       	ldi	r22, 0x02	; 2
    3e52:	8c e3       	ldi	r24, 0x3C	; 60
    3e54:	cb d8       	rcall	.-3690   	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 30, 2, "by DF4IAH");
    3e56:	42 ef       	ldi	r20, 0xF2	; 242
    3e58:	54 e2       	ldi	r21, 0x24	; 36
    3e5a:	62 e0       	ldi	r22, 0x02	; 2
    3e5c:	84 eb       	ldi	r24, 0xB4	; 180
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_circ(uint8_t x, uint8_t y, uint8_t radius, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    3e5e:	c6 d8       	rcall	.-3700   	; 0x2fec <task_twi2_lcd_str>
    3e60:	64 e0       	ldi	r22, 0x04	; 4
    3e62:	89 e0       	ldi	r24, 0x09	; 9

	twi2_waitUntilReady();
    3e64:	a3 d8       	rcall	.-3770   	; 0x2fac <task_twi2_lcd_pos_xy>
    3e66:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC : TWI_SMART_LCD_CMD_DRAW_CIRC;
    3e6a:	8a e3       	ldi	r24, 0x3A	; 58
    3e6c:	f5 01       	movw	r30, r10
	twi2_m_data[0] = radius;
    3e6e:	81 83       	std	Z+1, r24	; 0x01
    3e70:	0b ef       	ldi	r16, 0xFB	; 251
    3e72:	18 e2       	ldi	r17, 0x28	; 40
    3e74:	83 e0       	ldi	r24, 0x03	; 3
    3e76:	f8 01       	movw	r30, r16
	twi2_packet.length = 1;
    3e78:	80 83       	st	Z, r24
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	f5 01       	movw	r30, r10
    3e80:	80 87       	std	Z+8, r24	; 0x08
    3e82:	91 87       	std	Z+9, r25	; 0x09
    3e84:	40 e0       	ldi	r20, 0x00	; 0
    3e86:	b5 01       	movw	r22, r10
    3e88:	80 e8       	ldi	r24, 0x80	; 128
    3e8a:	94 e0       	ldi	r25, 0x04	; 4
    3e8c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3e90:	65 e0       	ldi	r22, 0x05	; 5
    3e92:	70 e0       	ldi	r23, 0x00	; 0
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	90 e0       	ldi	r25, 0x00	; 0
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    3e98:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
    3e9c:	62 e0       	ldi	r22, 0x02	; 2
    3e9e:	81 e0       	ldi	r24, 0x01	; 1

	twi2_waitUntilReady();
    3ea0:	85 d8       	rcall	.-3830   	; 0x2fac <task_twi2_lcd_pos_xy>
    3ea2:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    3ea6:	24 e3       	ldi	r18, 0x34	; 52
    3ea8:	f5 01       	movw	r30, r10
	twi2_m_data[0] = width;
    3eaa:	21 83       	std	Z+1, r18	; 0x01
    3eac:	26 e0       	ldi	r18, 0x06	; 6
    3eae:	f8 01       	movw	r30, r16
	twi2_m_data[1] = height;
    3eb0:	20 83       	st	Z, r18
    3eb2:	34 e0       	ldi	r19, 0x04	; 4
	twi2_packet.length = 2;
    3eb4:	31 83       	std	Z+1, r19	; 0x01
    3eb6:	22 e0       	ldi	r18, 0x02	; 2
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	f5 01       	movw	r30, r10
    3ebc:	20 87       	std	Z+8, r18	; 0x08
    3ebe:	31 87       	std	Z+9, r19	; 0x09
    3ec0:	40 e0       	ldi	r20, 0x00	; 0
    3ec2:	b5 01       	movw	r22, r10
    3ec4:	80 e8       	ldi	r24, 0x80	; 128
    3ec6:	94 e0       	ldi	r25, 0x04	; 4
    3ec8:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3ecc:	65 e0       	ldi	r22, 0x05	; 5
    3ece:	70 e0       	ldi	r23, 0x00	; 0
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
}

static void task_twi2_lcd_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool filled)
{
	task_twi2_lcd_pos_xy(x, y);
    3ed4:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
    3ed8:	62 e0       	ldi	r22, 0x02	; 2
    3eda:	8c e0       	ldi	r24, 0x0C	; 12

	twi2_waitUntilReady();
    3edc:	67 d8       	rcall	.-3890   	; 0x2fac <task_twi2_lcd_pos_xy>
    3ede:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = filled ?  TWI_SMART_LCD_CMD_DRAW_FILLED_RECT : TWI_SMART_LCD_CMD_DRAW_RECT;
    3ee2:	24 e3       	ldi	r18, 0x34	; 52
    3ee4:	f5 01       	movw	r30, r10
	twi2_m_data[0] = width;
    3ee6:	21 83       	std	Z+1, r18	; 0x01
    3ee8:	26 e0       	ldi	r18, 0x06	; 6
    3eea:	f8 01       	movw	r30, r16
	twi2_m_data[1] = height;
    3eec:	20 83       	st	Z, r18
    3eee:	34 e0       	ldi	r19, 0x04	; 4
	twi2_packet.length = 2;
    3ef0:	31 83       	std	Z+1, r19	; 0x01
    3ef2:	22 e0       	ldi	r18, 0x02	; 2
    3ef4:	30 e0       	ldi	r19, 0x00	; 0
    3ef6:	f5 01       	movw	r30, r10
    3ef8:	20 87       	std	Z+8, r18	; 0x08
    3efa:	31 87       	std	Z+9, r19	; 0x09
    3efc:	40 e0       	ldi	r20, 0x00	; 0
    3efe:	b5 01       	movw	r22, r10
    3f00:	80 e8       	ldi	r24, 0x80	; 128
    3f02:	94 e0       	ldi	r25, 0x04	; 4
    3f04:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3f08:	65 e0       	ldi	r22, 0x05	; 5
    3f0a:	70 e0       	ldi	r23, 0x00	; 0
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
	}
}

static void task_twi2_lcd_line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
	task_twi2_lcd_pos_xy(x1, y1);
    3f10:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
    3f14:	6b e0       	ldi	r22, 0x0B	; 11
    3f16:	80 e0       	ldi	r24, 0x00	; 0

	twi2_waitUntilReady();
    3f18:	49 d8       	rcall	.-3950   	; 0x2fac <task_twi2_lcd_pos_xy>
    3f1a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
	twi2_packet.addr[0] = TWI_SMART_LCD_CMD_DRAW_LINE;
    3f1e:	82 e3       	ldi	r24, 0x32	; 50
    3f20:	f5 01       	movw	r30, r10
	twi2_m_data[0] = x2;
    3f22:	81 83       	std	Z+1, r24	; 0x01
    3f24:	8f ee       	ldi	r24, 0xEF	; 239
    3f26:	f8 01       	movw	r30, r16
	twi2_m_data[1] = y2;
    3f28:	80 83       	st	Z, r24
    3f2a:	8b e0       	ldi	r24, 0x0B	; 11
	twi2_packet.length = 2;
    3f2c:	81 83       	std	Z+1, r24	; 0x01
    3f2e:	22 e0       	ldi	r18, 0x02	; 2
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	f5 01       	movw	r30, r10
    3f34:	20 87       	std	Z+8, r18	; 0x08
    3f36:	31 87       	std	Z+9, r19	; 0x09
    3f38:	40 e0       	ldi	r20, 0x00	; 0
    3f3a:	b5 01       	movw	r22, r10
    3f3c:	80 e8       	ldi	r24, 0x80	; 128
    3f3e:	94 e0       	ldi	r25, 0x04	; 4
    3f40:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
	twi_master_write(&TWI2_MASTER, &twi2_packet);
	delay_us(TWI_SMART_LCD_DEVICE_SIMPLE_DELAY_MIN_US);
    3f44:	65 e0       	ldi	r22, 0x05	; 5
    3f46:	70 e0       	ldi	r23, 0x00	; 0
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
	/* Header line separator */
	task_twi2_lcd_line(0, 11, 239, 11);

	/* Left measurement names */
	line = 2;
	task_twi2_lcd_str(6 *  0, (line++) * 10, "mP Temp =");
    3f4c:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
    3f50:	4c ef       	ldi	r20, 0xFC	; 252
    3f52:	54 e2       	ldi	r21, 0x24	; 36
    3f54:	64 e1       	ldi	r22, 0x14	; 20
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vusb =");
    3f56:	80 e0       	ldi	r24, 0x00	; 0
    3f58:	49 d8       	rcall	.-3950   	; 0x2fec <task_twi2_lcd_str>
    3f5a:	46 e0       	ldi	r20, 0x06	; 6
    3f5c:	55 e2       	ldi	r21, 0x25	; 37
    3f5e:	6e e1       	ldi	r22, 0x1E	; 30
	task_twi2_lcd_str(6 *  3, (line++) * 10,    "Vbat =");
    3f60:	82 e1       	ldi	r24, 0x12	; 18
    3f62:	44 d8       	rcall	.-3960   	; 0x2fec <task_twi2_lcd_str>
    3f64:	4d e0       	ldi	r20, 0x0D	; 13
    3f66:	55 e2       	ldi	r21, 0x25	; 37
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vvctcxo =");
    3f68:	68 e2       	ldi	r22, 0x28	; 40
    3f6a:	82 e1       	ldi	r24, 0x12	; 18
    3f6c:	3f d8       	rcall	.-3970   	; 0x2fec <task_twi2_lcd_str>
    3f6e:	44 e1       	ldi	r20, 0x14	; 20
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc4 =");
    3f70:	55 e2       	ldi	r21, 0x25	; 37
    3f72:	62 e3       	ldi	r22, 0x32	; 50
    3f74:	80 e0       	ldi	r24, 0x00	; 0
    3f76:	3a d8       	rcall	.-3980   	; 0x2fec <task_twi2_lcd_str>
    3f78:	4e e1       	ldi	r20, 0x1E	; 30
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Vioadc5 =");
    3f7a:	55 e2       	ldi	r21, 0x25	; 37
    3f7c:	6c e3       	ldi	r22, 0x3C	; 60
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	35 d8       	rcall	.-3990   	; 0x2fec <task_twi2_lcd_str>
    3f82:	48 e2       	ldi	r20, 0x28	; 40
	//task_twi2_lcd_str(6 *  0, (line++) * 10, "Vsilen. =");
	line++;

	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Temp =");
    3f84:	55 e2       	ldi	r21, 0x25	; 37
    3f86:	66 e4       	ldi	r22, 0x46	; 70
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	30 d8       	rcall	.-4000   	; 0x2fec <task_twi2_lcd_str>
    3f8c:	42 e3       	ldi	r20, 0x32	; 50
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Ba_Pres =");
    3f8e:	55 e2       	ldi	r21, 0x25	; 37
    3f90:	6a e5       	ldi	r22, 0x5A	; 90
    3f92:	80 e0       	ldi	r24, 0x00	; 0
    3f94:	2b d8       	rcall	.-4010   	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Hy_Temp =");
    3f96:	4c e3       	ldi	r20, 0x3C	; 60
    3f98:	55 e2       	ldi	r21, 0x25	; 37
    3f9a:	64 e6       	ldi	r22, 0x64	; 100
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
	task_twi2_lcd_str(6 *  0, (line++) * 10, "Hy_RelH =");
    3f9e:	26 d8       	rcall	.-4020   	; 0x2fec <task_twi2_lcd_str>
    3fa0:	46 e4       	ldi	r20, 0x46	; 70
    3fa2:	55 e2       	ldi	r21, 0x25	; 37
    3fa4:	6e e6       	ldi	r22, 0x6E	; 110
    3fa6:	80 e0       	ldi	r24, 0x00	; 0

	/* Left measurement units */
	line = 2;
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    3fa8:	21 d8       	rcall	.-4030   	; 0x2fec <task_twi2_lcd_str>
    3faa:	40 e5       	ldi	r20, 0x50	; 80
    3fac:	55 e2       	ldi	r21, 0x25	; 37
    3fae:	68 e7       	ldi	r22, 0x78	; 120
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    3fb2:	1c d8       	rcall	.-4040   	; 0x2fec <task_twi2_lcd_str>
    3fb4:	4a e5       	ldi	r20, 0x5A	; 90
    3fb6:	55 e2       	ldi	r21, 0x25	; 37
    3fb8:	64 e1       	ldi	r22, 0x14	; 20
    3fba:	80 e6       	ldi	r24, 0x60	; 96
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    3fbc:	17 d8       	rcall	.-4050   	; 0x2fec <task_twi2_lcd_str>
    3fbe:	4c e5       	ldi	r20, 0x5C	; 92
    3fc0:	55 e2       	ldi	r21, 0x25	; 37
    3fc2:	6e e1       	ldi	r22, 0x1E	; 30
    3fc4:	80 e6       	ldi	r24, 0x60	; 96
    3fc6:	12 d8       	rcall	.-4060   	; 0x2fec <task_twi2_lcd_str>
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    3fc8:	4c e5       	ldi	r20, 0x5C	; 92
    3fca:	55 e2       	ldi	r21, 0x25	; 37
    3fcc:	68 e2       	ldi	r22, 0x28	; 40
    3fce:	80 e6       	ldi	r24, 0x60	; 96
    3fd0:	0d d8       	rcall	.-4070   	; 0x2fec <task_twi2_lcd_str>
    3fd2:	4c e5       	ldi	r20, 0x5C	; 92
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    3fd4:	55 e2       	ldi	r21, 0x25	; 37
    3fd6:	62 e3       	ldi	r22, 0x32	; 50
    3fd8:	80 e6       	ldi	r24, 0x60	; 96
    3fda:	08 d8       	rcall	.-4080   	; 0x2fec <task_twi2_lcd_str>
    3fdc:	4c e5       	ldi	r20, 0x5C	; 92
    3fde:	55 e2       	ldi	r21, 0x25	; 37
	task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
    3fe0:	6c e3       	ldi	r22, 0x3C	; 60
    3fe2:	80 e6       	ldi	r24, 0x60	; 96
    3fe4:	03 d8       	rcall	.-4090   	; 0x2fec <task_twi2_lcd_str>
    3fe6:	4c e5       	ldi	r20, 0x5C	; 92
    3fe8:	55 e2       	ldi	r21, 0x25	; 37
    3fea:	66 e4       	ldi	r22, 0x46	; 70
	//task_twi2_lcd_str(6 * 16, (line++) * 10, "V");
	line++;

	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    3fec:	80 e6       	ldi	r24, 0x60	; 96
    3fee:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
    3ff2:	4a e5       	ldi	r20, 0x5A	; 90
    3ff4:	55 e2       	ldi	r21, 0x25	; 37
    3ff6:	6a e5       	ldi	r22, 0x5A	; 90
	task_twi2_lcd_str(6 * 18, (line++) * 10, "hPa");
    3ff8:	80 e6       	ldi	r24, 0x60	; 96
    3ffa:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
    3ffe:	4e e5       	ldi	r20, 0x5E	; 94
    4000:	55 e2       	ldi	r21, 0x25	; 37
    4002:	64 e6       	ldi	r22, 0x64	; 100
	task_twi2_lcd_str(6 * 16, (line++) * 10, "C");
    4004:	8c e6       	ldi	r24, 0x6C	; 108
    4006:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
    400a:	4a e5       	ldi	r20, 0x5A	; 90
    400c:	55 e2       	ldi	r21, 0x25	; 37
    400e:	6e e6       	ldi	r22, 0x6E	; 110
	task_twi2_lcd_str(6 * 16, (line++) * 10, "%");
    4010:	80 e6       	ldi	r24, 0x60	; 96
    4012:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
    4016:	42 e6       	ldi	r20, 0x62	; 98
    4018:	55 e2       	ldi	r21, 0x25	; 37
    401a:	68 e7       	ldi	r22, 0x78	; 120
    401c:	80 e6       	ldi	r24, 0x60	; 96

			/* Repaint all items when starting and at some interval */
			if (!(s_lcd_entry_cnt++)) {
				task_twi2_lcd_header();
			#if 1
			} else if (s_lcd_entry_cnt >= 120) {
    401e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <task_twi2_lcd_str>
    4022:	07 c0       	rjmp	.+14     	; 0x4032 <task_twi2_lcd+0x330>
				s_lcd_entry_cnt = 0;
    4024:	28 37       	cpi	r18, 0x78	; 120
    4026:	31 05       	cpc	r19, r1
    4028:	20 f0       	brcs	.+8      	; 0x4032 <task_twi2_lcd+0x330>
    402a:	10 92 ec 26 	sts	0x26EC, r1	; 0x8026ec <__data_end>
			#endif
			}

			/* ADC_TEMP */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_temp_deg_100 / 100,      (l_adc_temp_deg_100 / 10) % 10,  "%02d.%01d");
    402e:	10 92 ed 26 	sts	0x26ED, r1	; 0x8026ed <__data_end+0x1>
    4032:	2a e0       	ldi	r18, 0x0A	; 10
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	c7 01       	movw	r24, r14
    4038:	b9 01       	movw	r22, r18
    403a:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>
    403e:	cb 01       	movw	r24, r22
    4040:	b9 01       	movw	r22, r18
    4042:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>
    4046:	9c 01       	movw	r18, r24
    4048:	0f 2e       	mov	r0, r31
    404a:	f4 e6       	ldi	r31, 0x64	; 100
    404c:	af 2e       	mov	r10, r31
    404e:	b1 2c       	mov	r11, r1
    4050:	f0 2d       	mov	r31, r0
    4052:	c7 01       	movw	r24, r14
    4054:	b5 01       	movw	r22, r10
    4056:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>
    405a:	ab 01       	movw	r20, r22
    405c:	04 e6       	ldi	r16, 0x64	; 100

			/* ADC_5V0 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_5v0_volt_1000 / 1000,     l_adc_5v0_volt_1000 % 1000,     "%1d.%03d");
    405e:	15 e2       	ldi	r17, 0x25	; 37
    4060:	64 e1       	ldi	r22, 0x14	; 20
    4062:	8c e3       	ldi	r24, 0x3C	; 60
    4064:	72 d8       	rcall	.-3868   	; 0x314a <task_twi2_lcd_print_format_uint16>
    4066:	0f 2e       	mov	r0, r31
    4068:	f8 ee       	ldi	r31, 0xE8	; 232
    406a:	ef 2e       	mov	r14, r31
    406c:	f3 e0       	ldi	r31, 0x03	; 3
    406e:	ff 2e       	mov	r15, r31
    4070:	f0 2d       	mov	r31, r0
    4072:	c3 01       	movw	r24, r6
    4074:	b7 01       	movw	r22, r14
    4076:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>
    407a:	ab 01       	movw	r20, r22
    407c:	0e e6       	ldi	r16, 0x6E	; 110

			/* ADC_VBAT */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vbat_volt_1000 / 1000,    l_adc_vbat_volt_1000 % 1000,    "%1d.%03d");
    407e:	15 e2       	ldi	r17, 0x25	; 37
    4080:	9c 01       	movw	r18, r24
    4082:	6e e1       	ldi	r22, 0x1E	; 30
    4084:	8c e3       	ldi	r24, 0x3C	; 60
    4086:	61 d8       	rcall	.-3902   	; 0x314a <task_twi2_lcd_print_format_uint16>
    4088:	c2 01       	movw	r24, r4
    408a:	b7 01       	movw	r22, r14
    408c:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>

			/* ADC_VCTCXO */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_vctcxo_volt_1000 / 1000,  l_adc_vctcxo_volt_1000 % 1000,  "%1d.%03d");
    4090:	ab 01       	movw	r20, r22
    4092:	9c 01       	movw	r18, r24
    4094:	68 e2       	ldi	r22, 0x28	; 40
    4096:	8c e3       	ldi	r24, 0x3C	; 60
    4098:	58 d8       	rcall	.-3920   	; 0x314a <task_twi2_lcd_print_format_uint16>
    409a:	c6 01       	movw	r24, r12
    409c:	b7 01       	movw	r22, r14
    409e:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>

			/* ADC_IO_ADC4 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc4_volt_1000 / 1000, l_adc_io_adc4_volt_1000 % 1000, "%1d.%03d");
    40a2:	ab 01       	movw	r20, r22
    40a4:	9c 01       	movw	r18, r24
    40a6:	62 e3       	ldi	r22, 0x32	; 50
    40a8:	8c e3       	ldi	r24, 0x3C	; 60
    40aa:	4f d8       	rcall	.-3938   	; 0x314a <task_twi2_lcd_print_format_uint16>
    40ac:	c4 01       	movw	r24, r8
    40ae:	b7 01       	movw	r22, r14
    40b0:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>
    40b4:	ab 01       	movw	r20, r22

			/* ADC_IO_ADC5 */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_io_adc5_volt_1000 / 1000, l_adc_io_adc5_volt_1000 % 1000, "%1d.%03d");
    40b6:	9c 01       	movw	r18, r24
    40b8:	6c e3       	ldi	r22, 0x3C	; 60
    40ba:	8c e3       	ldi	r24, 0x3C	; 60
    40bc:	46 d8       	rcall	.-3956   	; 0x314a <task_twi2_lcd_print_format_uint16>
    40be:	c1 01       	movw	r24, r2
    40c0:	b7 01       	movw	r22, r14
    40c2:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>
    40c6:	ab 01       	movw	r20, r22
    40c8:	9c 01       	movw	r18, r24
			/* ADC_SILENCE */
			//task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_adc_silence_volt_1000 / 1000, l_adc_silence_volt_1000 % 1000, "%1d.%03d");
			line++;

			/* Baro_Temp */
			task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_temp_100 / 100,     l_twi1_baro_temp_100 % 100,     "%02ld.%02ld");
    40ca:	66 e4       	ldi	r22, 0x46	; 70
    40cc:	8c e3       	ldi	r24, 0x3C	; 60
    40ce:	3d d8       	rcall	.-3974   	; 0x314a <task_twi2_lcd_print_format_uint16>
    40d0:	0f 2e       	mov	r0, r31
    40d2:	f4 e6       	ldi	r31, 0x64	; 100
    40d4:	4f 2e       	mov	r4, r31
    40d6:	51 2c       	mov	r5, r1
    40d8:	61 2c       	mov	r6, r1
    40da:	71 2c       	mov	r7, r1
    40dc:	f0 2d       	mov	r31, r0
    40de:	6a 81       	ldd	r22, Y+2	; 0x02
    40e0:	7b 81       	ldd	r23, Y+3	; 0x03
    40e2:	8c 81       	ldd	r24, Y+4	; 0x04
    40e4:	9d 81       	ldd	r25, Y+5	; 0x05
    40e6:	a3 01       	movw	r20, r6
    40e8:	92 01       	movw	r18, r4
    40ea:	0e 94 66 48 	call	0x90cc	; 0x90cc <__divmodsi4>
    40ee:	0f 2e       	mov	r0, r31
    40f0:	f7 e7       	ldi	r31, 0x77	; 119
    40f2:	cf 2e       	mov	r12, r31
    40f4:	f5 e2       	ldi	r31, 0x25	; 37
    40f6:	df 2e       	mov	r13, r31
    40f8:	f0 2d       	mov	r31, r0
    40fa:	7b 01       	movw	r14, r22
    40fc:	8c 01       	movw	r16, r24
    40fe:	6a e5       	ldi	r22, 0x5A	; 90

			/* Baro_P */
			task_twi2_lcd_print_format_uint32(col_left, (line++) * 10, l_twi1_baro_p_100 / 100,        l_twi1_baro_p_100 % 100,        "%04ld.%02ld");
    4100:	8c e3       	ldi	r24, 0x3C	; 60
    4102:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <task_twi2_lcd_print_format_uint32>
    4106:	6e 81       	ldd	r22, Y+6	; 0x06
    4108:	7f 81       	ldd	r23, Y+7	; 0x07
    410a:	88 85       	ldd	r24, Y+8	; 0x08
    410c:	99 85       	ldd	r25, Y+9	; 0x09
    410e:	a3 01       	movw	r20, r6
    4110:	92 01       	movw	r18, r4
    4112:	0e 94 66 48 	call	0x90cc	; 0x90cc <__divmodsi4>
    4116:	0f 2e       	mov	r0, r31
    4118:	f3 e8       	ldi	r31, 0x83	; 131
    411a:	cf 2e       	mov	r12, r31
    411c:	f5 e2       	ldi	r31, 0x25	; 37
    411e:	df 2e       	mov	r13, r31
    4120:	f0 2d       	mov	r31, r0
    4122:	7b 01       	movw	r14, r22
    4124:	8c 01       	movw	r16, r24

			/* Hygro_Temp */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_twi1_hygro_T_100 / 100,       l_twi1_hygro_T_100 % 100,       "%02d.%02d");
    4126:	64 e6       	ldi	r22, 0x64	; 100
    4128:	8c e3       	ldi	r24, 0x3C	; 60
    412a:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <task_twi2_lcd_print_format_uint32>
    412e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4130:	9b 85       	ldd	r25, Y+11	; 0x0b
    4132:	b5 01       	movw	r22, r10
    4134:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>
    4138:	ab 01       	movw	r20, r22
    413a:	0f e8       	ldi	r16, 0x8F	; 143
    413c:	15 e2       	ldi	r17, 0x25	; 37
    413e:	9c 01       	movw	r18, r24

			/* Hygro_RH */
			task_twi2_lcd_print_format_uint16(col_left, (line++) * 10, l_twi1_hygro_RH_100 / 100,      l_twi1_hygro_RH_100 % 100,      "%02d.%02d");
    4140:	6e e6       	ldi	r22, 0x6E	; 110
    4142:	8c e3       	ldi	r24, 0x3C	; 60
    4144:	02 d8       	rcall	.-4092   	; 0x314a <task_twi2_lcd_print_format_uint16>
    4146:	8c 85       	ldd	r24, Y+12	; 0x0c
    4148:	9d 85       	ldd	r25, Y+13	; 0x0d
    414a:	b5 01       	movw	r22, r10
    414c:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>
    4150:	ab 01       	movw	r20, r22
    4152:	9c 01       	movw	r18, r24
    4154:	68 e7       	ldi	r22, 0x78	; 120
    4156:	8c e3       	ldi	r24, 0x3C	; 60
				task_twi2_lcd_cls();
			}
		}
		#endif

	} else if (g_twi2_lcd_version == 0x10) {
    4158:	0e 94 a5 18 	call	0x314a	; 0x314a <task_twi2_lcd_print_format_uint16>
		/* Show PWM in % when version is V1.0 and mode==0x20 selected */
		twi2_waitUntilReady();
    415c:	1f c0       	rjmp	.+62     	; 0x419c <task_twi2_lcd+0x49a>
    415e:	20 31       	cpi	r18, 0x10	; 16
		twi2_packet.addr[0] = TWI_SMART_LCD_CMD_SHOW_TCXO_PWM;
    4160:	e9 f4       	brne	.+58     	; 0x419c <task_twi2_lcd+0x49a>
    4162:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <twi2_waitUntilReady>
    4166:	eb e0       	ldi	r30, 0x0B	; 11
		twi2_m_data[0] = 1;
    4168:	f0 e2       	ldi	r31, 0x20	; 32
    416a:	84 e8       	ldi	r24, 0x84	; 132
    416c:	81 83       	std	Z+1, r24	; 0x01
    416e:	ab ef       	ldi	r26, 0xFB	; 251
		twi2_m_data[1] = 128;
    4170:	b8 e2       	ldi	r27, 0x28	; 40
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	8c 93       	st	X, r24
		twi2_packet.length = 2;
    4176:	80 e8       	ldi	r24, 0x80	; 128
    4178:	11 96       	adiw	r26, 0x01	; 1
    417a:	8c 93       	st	X, r24
    417c:	82 e0       	ldi	r24, 0x02	; 2
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	80 87       	std	Z+8, r24	; 0x08
    4182:	91 87       	std	Z+9, r25	; 0x09
    4184:	40 e0       	ldi	r20, 0x00	; 0
    4186:	bf 01       	movw	r22, r30
    4188:	80 e8       	ldi	r24, 0x80	; 128
		twi_master_write(&TWI2_MASTER, &twi2_packet);
		delay_us(TWI_SMART_LCD_DEVICE_TCXOPWM_DELAY_MIN_US);
    418a:	94 e0       	ldi	r25, 0x04	; 4
    418c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <twi_master_transfer>
    4190:	69 e8       	ldi	r22, 0x89	; 137
    4192:	73 e1       	ldi	r23, 0x13	; 19
    4194:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__portable_avr_delay_cycles>
    419c:	2d 96       	adiw	r28, 0x0d	; 13
    419e:	cd bf       	out	0x3d, r28	; 61
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	df 91       	pop	r29
    41a4:	cf 91       	pop	r28
    41a6:	1f 91       	pop	r17
    41a8:	0f 91       	pop	r16
    41aa:	ff 90       	pop	r15
    41ac:	ef 90       	pop	r14
    41ae:	df 90       	pop	r13
    41b0:	cf 90       	pop	r12
    41b2:	bf 90       	pop	r11
    41b4:	af 90       	pop	r10
    41b6:	9f 90       	pop	r9
    41b8:	8f 90       	pop	r8
    41ba:	7f 90       	pop	r7
    41bc:	6f 90       	pop	r6
    41be:	5f 90       	pop	r5
    41c0:	4f 90       	pop	r4
    41c2:	3f 90       	pop	r3
    41c4:	2f 90       	pop	r2
    41c6:	08 95       	ret

000041c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    41c8:	08 95       	ret

000041ca <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	1f 92       	push	r1
    41d0:	cd b7       	in	r28, 0x3d	; 61
    41d2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    41d4:	2f b7       	in	r18, 0x3f	; 63
    41d6:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    41d8:	f8 94       	cli
	return flags;
    41da:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    41dc:	28 2f       	mov	r18, r24
    41de:	39 2f       	mov	r19, r25
    41e0:	21 15       	cp	r18, r1
    41e2:	82 e0       	ldi	r24, 0x02	; 2
    41e4:	38 07       	cpc	r19, r24
    41e6:	29 f4       	brne	.+10     	; 0x41f2 <adc_set_callback+0x28>
		adca_callback = callback;
    41e8:	60 93 fd 2a 	sts	0x2AFD, r22	; 0x802afd <adca_callback>
    41ec:	70 93 fe 2a 	sts	0x2AFE, r23	; 0x802afe <adca_callback+0x1>
    41f0:	07 c0       	rjmp	.+14     	; 0x4200 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    41f2:	20 34       	cpi	r18, 0x40	; 64
    41f4:	32 40       	sbci	r19, 0x02	; 2
    41f6:	21 f4       	brne	.+8      	; 0x4200 <adc_set_callback+0x36>
		adcb_callback = callback;
    41f8:	60 93 fb 2a 	sts	0x2AFB, r22	; 0x802afb <adcb_callback>
    41fc:	70 93 fc 2a 	sts	0x2AFC, r23	; 0x802afc <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4200:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    4202:	0f 90       	pop	r0
    4204:	df 91       	pop	r29
    4206:	cf 91       	pop	r28
    4208:	08 95       	ret

0000420a <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    420a:	81 15       	cp	r24, r1
    420c:	22 e0       	ldi	r18, 0x02	; 2
    420e:	92 07       	cpc	r25, r18
    4210:	69 f4       	brne	.+26     	; 0x422c <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    4212:	80 91 fb 26 	lds	r24, 0x26FB	; 0x8026fb <adca_enable_count>
    4216:	91 e0       	ldi	r25, 0x01	; 1
    4218:	98 0f       	add	r25, r24
    421a:	90 93 fb 26 	sts	0x26FB, r25	; 0x8026fb <adca_enable_count>
    421e:	81 11       	cpse	r24, r1
    4220:	14 c0       	rjmp	.+40     	; 0x424a <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    4222:	62 e0       	ldi	r22, 0x02	; 2
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	0c 94 f5 3f 	jmp	0x7fea	; 0x7fea <sysclk_enable_module>
    422a:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    422c:	80 34       	cpi	r24, 0x40	; 64
    422e:	92 40       	sbci	r25, 0x02	; 2
    4230:	61 f4       	brne	.+24     	; 0x424a <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    4232:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <adcb_enable_count>
    4236:	91 e0       	ldi	r25, 0x01	; 1
    4238:	98 0f       	add	r25, r24
    423a:	90 93 fa 26 	sts	0x26FA, r25	; 0x8026fa <adcb_enable_count>
    423e:	81 11       	cpse	r24, r1
    4240:	04 c0       	rjmp	.+8      	; 0x424a <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    4242:	62 e0       	ldi	r22, 0x02	; 2
    4244:	82 e0       	ldi	r24, 0x02	; 2
    4246:	0c 94 f5 3f 	jmp	0x7fea	; 0x7fea <sysclk_enable_module>
    424a:	08 95       	ret

0000424c <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    424c:	81 15       	cp	r24, r1
    424e:	22 e0       	ldi	r18, 0x02	; 2
    4250:	92 07       	cpc	r25, r18
    4252:	61 f4       	brne	.+24     	; 0x426c <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    4254:	80 91 fb 26 	lds	r24, 0x26FB	; 0x8026fb <adca_enable_count>
    4258:	81 50       	subi	r24, 0x01	; 1
    425a:	80 93 fb 26 	sts	0x26FB, r24	; 0x8026fb <adca_enable_count>
    425e:	81 11       	cpse	r24, r1
    4260:	13 c0       	rjmp	.+38     	; 0x4288 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    4262:	62 e0       	ldi	r22, 0x02	; 2
    4264:	81 e0       	ldi	r24, 0x01	; 1
    4266:	0c 94 0b 40 	jmp	0x8016	; 0x8016 <sysclk_disable_module>
    426a:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    426c:	80 34       	cpi	r24, 0x40	; 64
    426e:	92 40       	sbci	r25, 0x02	; 2
    4270:	59 f4       	brne	.+22     	; 0x4288 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    4272:	80 91 fa 26 	lds	r24, 0x26FA	; 0x8026fa <adcb_enable_count>
    4276:	81 50       	subi	r24, 0x01	; 1
    4278:	80 93 fa 26 	sts	0x26FA, r24	; 0x8026fa <adcb_enable_count>
    427c:	81 11       	cpse	r24, r1
    427e:	04 c0       	rjmp	.+8      	; 0x4288 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    4280:	62 e0       	ldi	r22, 0x02	; 2
    4282:	82 e0       	ldi	r24, 0x02	; 2
    4284:	0c 94 0b 40 	jmp	0x8016	; 0x8016 <sysclk_disable_module>
    4288:	08 95       	ret

0000428a <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    428a:	ef 92       	push	r14
    428c:	ff 92       	push	r15
    428e:	1f 93       	push	r17
    4290:	cf 93       	push	r28
    4292:	df 93       	push	r29
    4294:	1f 92       	push	r1
    4296:	1f 92       	push	r1
    4298:	cd b7       	in	r28, 0x3d	; 61
    429a:	de b7       	in	r29, 0x3e	; 62
    429c:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    429e:	8f b7       	in	r24, 0x3f	; 63
    42a0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    42a2:	f8 94       	cli
	return flags;
    42a4:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    42a6:	c7 01       	movw	r24, r14
    42a8:	b0 df       	rcall	.-160    	; 0x420a <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    42aa:	f7 01       	movw	r30, r14
    42ac:	80 81       	ld	r24, Z
    42ae:	81 60       	ori	r24, 0x01	; 1
    42b0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    42b2:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    42b4:	80 91 10 2b 	lds	r24, 0x2B10	; 0x802b10 <sleepmgr_locks+0x1>
    42b8:	8f 3f       	cpi	r24, 0xFF	; 255
    42ba:	09 f4       	brne	.+2      	; 0x42be <adc_enable+0x34>
    42bc:	ff cf       	rjmp	.-2      	; 0x42bc <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    42be:	8f b7       	in	r24, 0x3f	; 63
    42c0:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    42c2:	f8 94       	cli
	return flags;
    42c4:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    42c6:	ef e0       	ldi	r30, 0x0F	; 15
    42c8:	fb e2       	ldi	r31, 0x2B	; 43
    42ca:	81 81       	ldd	r24, Z+1	; 0x01
    42cc:	8f 5f       	subi	r24, 0xFF	; 255
    42ce:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    42d0:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    42d2:	0f 90       	pop	r0
    42d4:	0f 90       	pop	r0
    42d6:	df 91       	pop	r29
    42d8:	cf 91       	pop	r28
    42da:	1f 91       	pop	r17
    42dc:	ff 90       	pop	r15
    42de:	ef 90       	pop	r14
    42e0:	08 95       	ret

000042e2 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    42e2:	1f 92       	push	r1
    42e4:	0f 92       	push	r0
    42e6:	0f b6       	in	r0, 0x3f	; 63
    42e8:	0f 92       	push	r0
    42ea:	11 24       	eor	r1, r1
    42ec:	0b b6       	in	r0, 0x3b	; 59
    42ee:	0f 92       	push	r0
    42f0:	2f 93       	push	r18
    42f2:	3f 93       	push	r19
    42f4:	4f 93       	push	r20
    42f6:	5f 93       	push	r21
    42f8:	6f 93       	push	r22
    42fa:	7f 93       	push	r23
    42fc:	8f 93       	push	r24
    42fe:	9f 93       	push	r25
    4300:	af 93       	push	r26
    4302:	bf 93       	push	r27
    4304:	ef 93       	push	r30
    4306:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    4308:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    430c:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    4310:	e0 91 fd 2a 	lds	r30, 0x2AFD	; 0x802afd <adca_callback>
    4314:	f0 91 fe 2a 	lds	r31, 0x2AFE	; 0x802afe <adca_callback+0x1>
    4318:	61 e0       	ldi	r22, 0x01	; 1
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	92 e0       	ldi	r25, 0x02	; 2
    431e:	19 95       	eicall
}
    4320:	ff 91       	pop	r31
    4322:	ef 91       	pop	r30
    4324:	bf 91       	pop	r27
    4326:	af 91       	pop	r26
    4328:	9f 91       	pop	r25
    432a:	8f 91       	pop	r24
    432c:	7f 91       	pop	r23
    432e:	6f 91       	pop	r22
    4330:	5f 91       	pop	r21
    4332:	4f 91       	pop	r20
    4334:	3f 91       	pop	r19
    4336:	2f 91       	pop	r18
    4338:	0f 90       	pop	r0
    433a:	0b be       	out	0x3b, r0	; 59
    433c:	0f 90       	pop	r0
    433e:	0f be       	out	0x3f, r0	; 63
    4340:	0f 90       	pop	r0
    4342:	1f 90       	pop	r1
    4344:	18 95       	reti

00004346 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    4346:	1f 92       	push	r1
    4348:	0f 92       	push	r0
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	0f 92       	push	r0
    434e:	11 24       	eor	r1, r1
    4350:	0b b6       	in	r0, 0x3b	; 59
    4352:	0f 92       	push	r0
    4354:	2f 93       	push	r18
    4356:	3f 93       	push	r19
    4358:	4f 93       	push	r20
    435a:	5f 93       	push	r21
    435c:	6f 93       	push	r22
    435e:	7f 93       	push	r23
    4360:	8f 93       	push	r24
    4362:	9f 93       	push	r25
    4364:	af 93       	push	r26
    4366:	bf 93       	push	r27
    4368:	ef 93       	push	r30
    436a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    436c:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    4370:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    4374:	e0 91 fd 2a 	lds	r30, 0x2AFD	; 0x802afd <adca_callback>
    4378:	f0 91 fe 2a 	lds	r31, 0x2AFE	; 0x802afe <adca_callback+0x1>
    437c:	62 e0       	ldi	r22, 0x02	; 2
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	92 e0       	ldi	r25, 0x02	; 2
    4382:	19 95       	eicall
}
    4384:	ff 91       	pop	r31
    4386:	ef 91       	pop	r30
    4388:	bf 91       	pop	r27
    438a:	af 91       	pop	r26
    438c:	9f 91       	pop	r25
    438e:	8f 91       	pop	r24
    4390:	7f 91       	pop	r23
    4392:	6f 91       	pop	r22
    4394:	5f 91       	pop	r21
    4396:	4f 91       	pop	r20
    4398:	3f 91       	pop	r19
    439a:	2f 91       	pop	r18
    439c:	0f 90       	pop	r0
    439e:	0b be       	out	0x3b, r0	; 59
    43a0:	0f 90       	pop	r0
    43a2:	0f be       	out	0x3f, r0	; 63
    43a4:	0f 90       	pop	r0
    43a6:	1f 90       	pop	r1
    43a8:	18 95       	reti

000043aa <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    43aa:	1f 92       	push	r1
    43ac:	0f 92       	push	r0
    43ae:	0f b6       	in	r0, 0x3f	; 63
    43b0:	0f 92       	push	r0
    43b2:	11 24       	eor	r1, r1
    43b4:	0b b6       	in	r0, 0x3b	; 59
    43b6:	0f 92       	push	r0
    43b8:	2f 93       	push	r18
    43ba:	3f 93       	push	r19
    43bc:	4f 93       	push	r20
    43be:	5f 93       	push	r21
    43c0:	6f 93       	push	r22
    43c2:	7f 93       	push	r23
    43c4:	8f 93       	push	r24
    43c6:	9f 93       	push	r25
    43c8:	af 93       	push	r26
    43ca:	bf 93       	push	r27
    43cc:	ef 93       	push	r30
    43ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    43d0:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    43d4:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    43d8:	e0 91 fd 2a 	lds	r30, 0x2AFD	; 0x802afd <adca_callback>
    43dc:	f0 91 fe 2a 	lds	r31, 0x2AFE	; 0x802afe <adca_callback+0x1>
    43e0:	64 e0       	ldi	r22, 0x04	; 4
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	92 e0       	ldi	r25, 0x02	; 2
    43e6:	19 95       	eicall
}
    43e8:	ff 91       	pop	r31
    43ea:	ef 91       	pop	r30
    43ec:	bf 91       	pop	r27
    43ee:	af 91       	pop	r26
    43f0:	9f 91       	pop	r25
    43f2:	8f 91       	pop	r24
    43f4:	7f 91       	pop	r23
    43f6:	6f 91       	pop	r22
    43f8:	5f 91       	pop	r21
    43fa:	4f 91       	pop	r20
    43fc:	3f 91       	pop	r19
    43fe:	2f 91       	pop	r18
    4400:	0f 90       	pop	r0
    4402:	0b be       	out	0x3b, r0	; 59
    4404:	0f 90       	pop	r0
    4406:	0f be       	out	0x3f, r0	; 63
    4408:	0f 90       	pop	r0
    440a:	1f 90       	pop	r1
    440c:	18 95       	reti

0000440e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    440e:	1f 92       	push	r1
    4410:	0f 92       	push	r0
    4412:	0f b6       	in	r0, 0x3f	; 63
    4414:	0f 92       	push	r0
    4416:	11 24       	eor	r1, r1
    4418:	0b b6       	in	r0, 0x3b	; 59
    441a:	0f 92       	push	r0
    441c:	2f 93       	push	r18
    441e:	3f 93       	push	r19
    4420:	4f 93       	push	r20
    4422:	5f 93       	push	r21
    4424:	6f 93       	push	r22
    4426:	7f 93       	push	r23
    4428:	8f 93       	push	r24
    442a:	9f 93       	push	r25
    442c:	af 93       	push	r26
    442e:	bf 93       	push	r27
    4430:	ef 93       	push	r30
    4432:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    4434:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    4438:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    443c:	e0 91 fd 2a 	lds	r30, 0x2AFD	; 0x802afd <adca_callback>
    4440:	f0 91 fe 2a 	lds	r31, 0x2AFE	; 0x802afe <adca_callback+0x1>
    4444:	68 e0       	ldi	r22, 0x08	; 8
    4446:	80 e0       	ldi	r24, 0x00	; 0
    4448:	92 e0       	ldi	r25, 0x02	; 2
    444a:	19 95       	eicall
}
    444c:	ff 91       	pop	r31
    444e:	ef 91       	pop	r30
    4450:	bf 91       	pop	r27
    4452:	af 91       	pop	r26
    4454:	9f 91       	pop	r25
    4456:	8f 91       	pop	r24
    4458:	7f 91       	pop	r23
    445a:	6f 91       	pop	r22
    445c:	5f 91       	pop	r21
    445e:	4f 91       	pop	r20
    4460:	3f 91       	pop	r19
    4462:	2f 91       	pop	r18
    4464:	0f 90       	pop	r0
    4466:	0b be       	out	0x3b, r0	; 59
    4468:	0f 90       	pop	r0
    446a:	0f be       	out	0x3f, r0	; 63
    446c:	0f 90       	pop	r0
    446e:	1f 90       	pop	r1
    4470:	18 95       	reti

00004472 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    4472:	1f 92       	push	r1
    4474:	0f 92       	push	r0
    4476:	0f b6       	in	r0, 0x3f	; 63
    4478:	0f 92       	push	r0
    447a:	11 24       	eor	r1, r1
    447c:	0b b6       	in	r0, 0x3b	; 59
    447e:	0f 92       	push	r0
    4480:	2f 93       	push	r18
    4482:	3f 93       	push	r19
    4484:	4f 93       	push	r20
    4486:	5f 93       	push	r21
    4488:	6f 93       	push	r22
    448a:	7f 93       	push	r23
    448c:	8f 93       	push	r24
    448e:	9f 93       	push	r25
    4490:	af 93       	push	r26
    4492:	bf 93       	push	r27
    4494:	ef 93       	push	r30
    4496:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    4498:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    449c:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    44a0:	e0 91 fb 2a 	lds	r30, 0x2AFB	; 0x802afb <adcb_callback>
    44a4:	f0 91 fc 2a 	lds	r31, 0x2AFC	; 0x802afc <adcb_callback+0x1>
    44a8:	61 e0       	ldi	r22, 0x01	; 1
    44aa:	80 e4       	ldi	r24, 0x40	; 64
    44ac:	92 e0       	ldi	r25, 0x02	; 2
    44ae:	19 95       	eicall
}
    44b0:	ff 91       	pop	r31
    44b2:	ef 91       	pop	r30
    44b4:	bf 91       	pop	r27
    44b6:	af 91       	pop	r26
    44b8:	9f 91       	pop	r25
    44ba:	8f 91       	pop	r24
    44bc:	7f 91       	pop	r23
    44be:	6f 91       	pop	r22
    44c0:	5f 91       	pop	r21
    44c2:	4f 91       	pop	r20
    44c4:	3f 91       	pop	r19
    44c6:	2f 91       	pop	r18
    44c8:	0f 90       	pop	r0
    44ca:	0b be       	out	0x3b, r0	; 59
    44cc:	0f 90       	pop	r0
    44ce:	0f be       	out	0x3f, r0	; 63
    44d0:	0f 90       	pop	r0
    44d2:	1f 90       	pop	r1
    44d4:	18 95       	reti

000044d6 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    44d6:	1f 92       	push	r1
    44d8:	0f 92       	push	r0
    44da:	0f b6       	in	r0, 0x3f	; 63
    44dc:	0f 92       	push	r0
    44de:	11 24       	eor	r1, r1
    44e0:	0b b6       	in	r0, 0x3b	; 59
    44e2:	0f 92       	push	r0
    44e4:	2f 93       	push	r18
    44e6:	3f 93       	push	r19
    44e8:	4f 93       	push	r20
    44ea:	5f 93       	push	r21
    44ec:	6f 93       	push	r22
    44ee:	7f 93       	push	r23
    44f0:	8f 93       	push	r24
    44f2:	9f 93       	push	r25
    44f4:	af 93       	push	r26
    44f6:	bf 93       	push	r27
    44f8:	ef 93       	push	r30
    44fa:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    44fc:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    4500:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    4504:	e0 91 fb 2a 	lds	r30, 0x2AFB	; 0x802afb <adcb_callback>
    4508:	f0 91 fc 2a 	lds	r31, 0x2AFC	; 0x802afc <adcb_callback+0x1>
    450c:	62 e0       	ldi	r22, 0x02	; 2
    450e:	80 e4       	ldi	r24, 0x40	; 64
    4510:	92 e0       	ldi	r25, 0x02	; 2
    4512:	19 95       	eicall
}
    4514:	ff 91       	pop	r31
    4516:	ef 91       	pop	r30
    4518:	bf 91       	pop	r27
    451a:	af 91       	pop	r26
    451c:	9f 91       	pop	r25
    451e:	8f 91       	pop	r24
    4520:	7f 91       	pop	r23
    4522:	6f 91       	pop	r22
    4524:	5f 91       	pop	r21
    4526:	4f 91       	pop	r20
    4528:	3f 91       	pop	r19
    452a:	2f 91       	pop	r18
    452c:	0f 90       	pop	r0
    452e:	0b be       	out	0x3b, r0	; 59
    4530:	0f 90       	pop	r0
    4532:	0f be       	out	0x3f, r0	; 63
    4534:	0f 90       	pop	r0
    4536:	1f 90       	pop	r1
    4538:	18 95       	reti

0000453a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    453a:	1f 92       	push	r1
    453c:	0f 92       	push	r0
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	0f 92       	push	r0
    4542:	11 24       	eor	r1, r1
    4544:	0b b6       	in	r0, 0x3b	; 59
    4546:	0f 92       	push	r0
    4548:	2f 93       	push	r18
    454a:	3f 93       	push	r19
    454c:	4f 93       	push	r20
    454e:	5f 93       	push	r21
    4550:	6f 93       	push	r22
    4552:	7f 93       	push	r23
    4554:	8f 93       	push	r24
    4556:	9f 93       	push	r25
    4558:	af 93       	push	r26
    455a:	bf 93       	push	r27
    455c:	ef 93       	push	r30
    455e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    4560:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    4564:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    4568:	e0 91 fb 2a 	lds	r30, 0x2AFB	; 0x802afb <adcb_callback>
    456c:	f0 91 fc 2a 	lds	r31, 0x2AFC	; 0x802afc <adcb_callback+0x1>
    4570:	64 e0       	ldi	r22, 0x04	; 4
    4572:	80 e4       	ldi	r24, 0x40	; 64
    4574:	92 e0       	ldi	r25, 0x02	; 2
    4576:	19 95       	eicall
}
    4578:	ff 91       	pop	r31
    457a:	ef 91       	pop	r30
    457c:	bf 91       	pop	r27
    457e:	af 91       	pop	r26
    4580:	9f 91       	pop	r25
    4582:	8f 91       	pop	r24
    4584:	7f 91       	pop	r23
    4586:	6f 91       	pop	r22
    4588:	5f 91       	pop	r21
    458a:	4f 91       	pop	r20
    458c:	3f 91       	pop	r19
    458e:	2f 91       	pop	r18
    4590:	0f 90       	pop	r0
    4592:	0b be       	out	0x3b, r0	; 59
    4594:	0f 90       	pop	r0
    4596:	0f be       	out	0x3f, r0	; 63
    4598:	0f 90       	pop	r0
    459a:	1f 90       	pop	r1
    459c:	18 95       	reti

0000459e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    459e:	1f 92       	push	r1
    45a0:	0f 92       	push	r0
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	0f 92       	push	r0
    45a6:	11 24       	eor	r1, r1
    45a8:	0b b6       	in	r0, 0x3b	; 59
    45aa:	0f 92       	push	r0
    45ac:	2f 93       	push	r18
    45ae:	3f 93       	push	r19
    45b0:	4f 93       	push	r20
    45b2:	5f 93       	push	r21
    45b4:	6f 93       	push	r22
    45b6:	7f 93       	push	r23
    45b8:	8f 93       	push	r24
    45ba:	9f 93       	push	r25
    45bc:	af 93       	push	r26
    45be:	bf 93       	push	r27
    45c0:	ef 93       	push	r30
    45c2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    45c4:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    45c8:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    45cc:	e0 91 fb 2a 	lds	r30, 0x2AFB	; 0x802afb <adcb_callback>
    45d0:	f0 91 fc 2a 	lds	r31, 0x2AFC	; 0x802afc <adcb_callback+0x1>
    45d4:	68 e0       	ldi	r22, 0x08	; 8
    45d6:	80 e4       	ldi	r24, 0x40	; 64
    45d8:	92 e0       	ldi	r25, 0x02	; 2
    45da:	19 95       	eicall
}
    45dc:	ff 91       	pop	r31
    45de:	ef 91       	pop	r30
    45e0:	bf 91       	pop	r27
    45e2:	af 91       	pop	r26
    45e4:	9f 91       	pop	r25
    45e6:	8f 91       	pop	r24
    45e8:	7f 91       	pop	r23
    45ea:	6f 91       	pop	r22
    45ec:	5f 91       	pop	r21
    45ee:	4f 91       	pop	r20
    45f0:	3f 91       	pop	r19
    45f2:	2f 91       	pop	r18
    45f4:	0f 90       	pop	r0
    45f6:	0b be       	out	0x3b, r0	; 59
    45f8:	0f 90       	pop	r0
    45fa:	0f be       	out	0x3f, r0	; 63
    45fc:	0f 90       	pop	r0
    45fe:	1f 90       	pop	r1
    4600:	18 95       	reti

00004602 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    4602:	bf 92       	push	r11
    4604:	cf 92       	push	r12
    4606:	df 92       	push	r13
    4608:	ef 92       	push	r14
    460a:	ff 92       	push	r15
    460c:	0f 93       	push	r16
    460e:	1f 93       	push	r17
    4610:	cf 93       	push	r28
    4612:	df 93       	push	r29
    4614:	1f 92       	push	r1
    4616:	cd b7       	in	r28, 0x3d	; 61
    4618:	de b7       	in	r29, 0x3e	; 62
    461a:	8c 01       	movw	r16, r24
    461c:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    461e:	81 15       	cp	r24, r1
    4620:	22 e0       	ldi	r18, 0x02	; 2
    4622:	92 07       	cpc	r25, r18
    4624:	81 f4       	brne	.+32     	; 0x4646 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    4626:	61 e2       	ldi	r22, 0x21	; 33
    4628:	70 e0       	ldi	r23, 0x00	; 0
    462a:	82 e0       	ldi	r24, 0x02	; 2
    462c:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    4630:	c8 2e       	mov	r12, r24
    4632:	d1 2c       	mov	r13, r1
    4634:	60 e2       	ldi	r22, 0x20	; 32
    4636:	70 e0       	ldi	r23, 0x00	; 0
    4638:	82 e0       	ldi	r24, 0x02	; 2
    463a:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    463e:	dc 2c       	mov	r13, r12
    4640:	cc 24       	eor	r12, r12
    4642:	c8 2a       	or	r12, r24
    4644:	12 c0       	rjmp	.+36     	; 0x466a <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    4646:	80 34       	cpi	r24, 0x40	; 64
    4648:	92 40       	sbci	r25, 0x02	; 2
    464a:	d1 f5       	brne	.+116    	; 0x46c0 <adc_write_configuration+0xbe>
    464c:	65 e2       	ldi	r22, 0x25	; 37
    464e:	70 e0       	ldi	r23, 0x00	; 0
    4650:	82 e0       	ldi	r24, 0x02	; 2
    4652:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    4656:	c8 2e       	mov	r12, r24
    4658:	d1 2c       	mov	r13, r1
    465a:	64 e2       	ldi	r22, 0x24	; 36
    465c:	70 e0       	ldi	r23, 0x00	; 0
    465e:	82 e0       	ldi	r24, 0x02	; 2
    4660:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    4664:	dc 2c       	mov	r13, r12
    4666:	cc 24       	eor	r12, r12
    4668:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    466a:	8f b7       	in	r24, 0x3f	; 63
    466c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    466e:	f8 94       	cli
	return flags;
    4670:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    4672:	c8 01       	movw	r24, r16
    4674:	ca dd       	rcall	.-1132   	; 0x420a <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    4676:	f8 01       	movw	r30, r16
    4678:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    467a:	92 e0       	ldi	r25, 0x02	; 2
    467c:	90 83       	st	Z, r25
	adc->CAL = cal;
    467e:	c4 86       	std	Z+12, r12	; 0x0c
    4680:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    4682:	f7 01       	movw	r30, r14
    4684:	25 81       	ldd	r18, Z+5	; 0x05
    4686:	36 81       	ldd	r19, Z+6	; 0x06
    4688:	f8 01       	movw	r30, r16
    468a:	20 8f       	std	Z+24, r18	; 0x18
    468c:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    468e:	f7 01       	movw	r30, r14
    4690:	92 81       	ldd	r25, Z+2	; 0x02
    4692:	f8 01       	movw	r30, r16
    4694:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    4696:	f7 01       	movw	r30, r14
    4698:	94 81       	ldd	r25, Z+4	; 0x04
    469a:	f8 01       	movw	r30, r16
    469c:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    469e:	f7 01       	movw	r30, r14
    46a0:	93 81       	ldd	r25, Z+3	; 0x03
    46a2:	f8 01       	movw	r30, r16
    46a4:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    46a6:	f7 01       	movw	r30, r14
    46a8:	91 81       	ldd	r25, Z+1	; 0x01
    46aa:	f8 01       	movw	r30, r16
    46ac:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    46ae:	81 70       	andi	r24, 0x01	; 1
    46b0:	f7 01       	movw	r30, r14
    46b2:	90 81       	ld	r25, Z
    46b4:	89 2b       	or	r24, r25
    46b6:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    46b8:	80 83       	st	Z, r24
    46ba:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    46bc:	c7 dd       	rcall	.-1138   	; 0x424c <adc_disable_clock>

	cpu_irq_restore(flags);
}
    46be:	bf be       	out	0x3f, r11	; 63
    46c0:	0f 90       	pop	r0
    46c2:	df 91       	pop	r29
    46c4:	cf 91       	pop	r28
    46c6:	1f 91       	pop	r17
    46c8:	0f 91       	pop	r16
    46ca:	ff 90       	pop	r15
    46cc:	ef 90       	pop	r14
    46ce:	df 90       	pop	r13
    46d0:	cf 90       	pop	r12
    46d2:	bf 90       	pop	r11
    46d4:	08 95       	ret

000046d6 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    46d6:	df 92       	push	r13
    46d8:	ef 92       	push	r14
    46da:	ff 92       	push	r15
    46dc:	0f 93       	push	r16
    46de:	1f 93       	push	r17
    46e0:	cf 93       	push	r28
    46e2:	df 93       	push	r29
    46e4:	1f 92       	push	r1
    46e6:	cd b7       	in	r28, 0x3d	; 61
    46e8:	de b7       	in	r29, 0x3e	; 62
    46ea:	8c 01       	movw	r16, r24
    46ec:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    46ee:	8f b7       	in	r24, 0x3f	; 63
    46f0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    46f2:	f8 94       	cli
	return flags;
    46f4:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    46f6:	c8 01       	movw	r24, r16
    46f8:	88 dd       	rcall	.-1264   	; 0x420a <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    46fa:	f8 01       	movw	r30, r16
    46fc:	80 81       	ld	r24, Z
    46fe:	80 7c       	andi	r24, 0xC0	; 192
    4700:	f7 01       	movw	r30, r14
    4702:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    4704:	f8 01       	movw	r30, r16
    4706:	80 8d       	ldd	r24, Z+24	; 0x18
    4708:	91 8d       	ldd	r25, Z+25	; 0x19
    470a:	f7 01       	movw	r30, r14
    470c:	85 83       	std	Z+5, r24	; 0x05
    470e:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    4710:	f8 01       	movw	r30, r16
    4712:	82 81       	ldd	r24, Z+2	; 0x02
    4714:	f7 01       	movw	r30, r14
    4716:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    4718:	f8 01       	movw	r30, r16
    471a:	84 81       	ldd	r24, Z+4	; 0x04
    471c:	f7 01       	movw	r30, r14
    471e:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    4720:	f8 01       	movw	r30, r16
    4722:	83 81       	ldd	r24, Z+3	; 0x03
    4724:	f7 01       	movw	r30, r14
    4726:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    4728:	f8 01       	movw	r30, r16
    472a:	81 81       	ldd	r24, Z+1	; 0x01
    472c:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    472e:	81 83       	std	Z+1, r24	; 0x01
    4730:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4732:	8c dd       	rcall	.-1256   	; 0x424c <adc_disable_clock>

	cpu_irq_restore(flags);
}
    4734:	df be       	out	0x3f, r13	; 63
    4736:	0f 90       	pop	r0
    4738:	df 91       	pop	r29
    473a:	cf 91       	pop	r28
    473c:	1f 91       	pop	r17
    473e:	0f 91       	pop	r16
    4740:	ff 90       	pop	r15
    4742:	ef 90       	pop	r14
    4744:	df 90       	pop	r13
    4746:	08 95       	ret

00004748 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    4748:	af 92       	push	r10
    474a:	bf 92       	push	r11
    474c:	cf 92       	push	r12
    474e:	df 92       	push	r13
    4750:	ef 92       	push	r14
    4752:	ff 92       	push	r15
    4754:	0f 93       	push	r16
    4756:	1f 93       	push	r17
    4758:	cf 93       	push	r28
    475a:	df 93       	push	r29
    475c:	1f 92       	push	r1
    475e:	cd b7       	in	r28, 0x3d	; 61
    4760:	de b7       	in	r29, 0x3e	; 62
    4762:	6c 01       	movw	r12, r24
    4764:	b6 2e       	mov	r11, r22
    4766:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    4768:	86 2f       	mov	r24, r22
    476a:	83 70       	andi	r24, 0x03	; 3
    476c:	29 f4       	brne	.+10     	; 0x4778 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    476e:	96 2f       	mov	r25, r22
    4770:	96 95       	lsr	r25
    4772:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    4774:	82 e0       	ldi	r24, 0x02	; 2
    4776:	02 c0       	rjmp	.+4      	; 0x477c <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    4778:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    477a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    477c:	90 ff       	sbrs	r25, 0
		index++;
    477e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    4780:	86 01       	movw	r16, r12
    4782:	00 5e       	subi	r16, 0xE0	; 224
    4784:	1f 4f       	sbci	r17, 0xFF	; 255
    4786:	98 e0       	ldi	r25, 0x08	; 8
    4788:	89 9f       	mul	r24, r25
    478a:	00 0d       	add	r16, r0
    478c:	11 1d       	adc	r17, r1
    478e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4790:	8f b7       	in	r24, 0x3f	; 63
    4792:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4794:	f8 94       	cli
	return flags;
    4796:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    4798:	c6 01       	movw	r24, r12
    479a:	37 dd       	rcall	.-1426   	; 0x420a <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    479c:	f7 01       	movw	r30, r14
    479e:	80 81       	ld	r24, Z
    47a0:	f8 01       	movw	r30, r16
    47a2:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    47a4:	f7 01       	movw	r30, r14
    47a6:	82 81       	ldd	r24, Z+2	; 0x02
    47a8:	f8 01       	movw	r30, r16
    47aa:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    47ac:	f7 01       	movw	r30, r14
    47ae:	81 81       	ldd	r24, Z+1	; 0x01
    47b0:	f8 01       	movw	r30, r16
    47b2:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    47b4:	b0 fe       	sbrs	r11, 0
    47b6:	04 c0       	rjmp	.+8      	; 0x47c0 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    47b8:	f7 01       	movw	r30, r14
    47ba:	83 81       	ldd	r24, Z+3	; 0x03
    47bc:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    47be:	86 83       	std	Z+6, r24	; 0x06
    47c0:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    47c2:	44 dd       	rcall	.-1400   	; 0x424c <adc_disable_clock>

	cpu_irq_restore(flags);
}
    47c4:	af be       	out	0x3f, r10	; 63
    47c6:	0f 90       	pop	r0
    47c8:	df 91       	pop	r29
    47ca:	cf 91       	pop	r28
    47cc:	1f 91       	pop	r17
    47ce:	0f 91       	pop	r16
    47d0:	ff 90       	pop	r15
    47d2:	ef 90       	pop	r14
    47d4:	df 90       	pop	r13
    47d6:	cf 90       	pop	r12
    47d8:	bf 90       	pop	r11
    47da:	af 90       	pop	r10
    47dc:	08 95       	ret

000047de <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    47de:	af 92       	push	r10
    47e0:	bf 92       	push	r11
    47e2:	cf 92       	push	r12
    47e4:	df 92       	push	r13
    47e6:	ef 92       	push	r14
    47e8:	ff 92       	push	r15
    47ea:	0f 93       	push	r16
    47ec:	1f 93       	push	r17
    47ee:	cf 93       	push	r28
    47f0:	df 93       	push	r29
    47f2:	1f 92       	push	r1
    47f4:	cd b7       	in	r28, 0x3d	; 61
    47f6:	de b7       	in	r29, 0x3e	; 62
    47f8:	6c 01       	movw	r12, r24
    47fa:	b6 2e       	mov	r11, r22
    47fc:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    47fe:	86 2f       	mov	r24, r22
    4800:	83 70       	andi	r24, 0x03	; 3
    4802:	29 f4       	brne	.+10     	; 0x480e <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    4804:	96 2f       	mov	r25, r22
    4806:	96 95       	lsr	r25
    4808:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    480a:	82 e0       	ldi	r24, 0x02	; 2
    480c:	02 c0       	rjmp	.+4      	; 0x4812 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    480e:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    4810:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    4812:	90 ff       	sbrs	r25, 0
		index++;
    4814:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    4816:	86 01       	movw	r16, r12
    4818:	00 5e       	subi	r16, 0xE0	; 224
    481a:	1f 4f       	sbci	r17, 0xFF	; 255
    481c:	98 e0       	ldi	r25, 0x08	; 8
    481e:	89 9f       	mul	r24, r25
    4820:	00 0d       	add	r16, r0
    4822:	11 1d       	adc	r17, r1
    4824:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4826:	8f b7       	in	r24, 0x3f	; 63
    4828:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    482a:	f8 94       	cli
	return flags;
    482c:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    482e:	c6 01       	movw	r24, r12
    4830:	ec dc       	rcall	.-1576   	; 0x420a <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    4832:	f8 01       	movw	r30, r16
    4834:	80 81       	ld	r24, Z
    4836:	f7 01       	movw	r30, r14
    4838:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    483a:	f8 01       	movw	r30, r16
    483c:	82 81       	ldd	r24, Z+2	; 0x02
    483e:	f7 01       	movw	r30, r14
    4840:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    4842:	f8 01       	movw	r30, r16
    4844:	81 81       	ldd	r24, Z+1	; 0x01
    4846:	f7 01       	movw	r30, r14
    4848:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    484a:	b0 fe       	sbrs	r11, 0
    484c:	04 c0       	rjmp	.+8      	; 0x4856 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    484e:	f8 01       	movw	r30, r16
    4850:	86 81       	ldd	r24, Z+6	; 0x06
    4852:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    4854:	83 83       	std	Z+3, r24	; 0x03
    4856:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4858:	f9 dc       	rcall	.-1550   	; 0x424c <adc_disable_clock>

	cpu_irq_restore(flags);
}
    485a:	af be       	out	0x3f, r10	; 63
    485c:	0f 90       	pop	r0
    485e:	df 91       	pop	r29
    4860:	cf 91       	pop	r28
    4862:	1f 91       	pop	r17
    4864:	0f 91       	pop	r16
    4866:	ff 90       	pop	r15
    4868:	ef 90       	pop	r14
    486a:	df 90       	pop	r13
    486c:	cf 90       	pop	r12
    486e:	bf 90       	pop	r11
    4870:	af 90       	pop	r10
    4872:	08 95       	ret

00004874 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
    4874:	80 32       	cpi	r24, 0x20	; 32
    4876:	93 40       	sbci	r25, 0x03	; 3
    4878:	61 f4       	brne	.+24     	; 0x4892 <dac_enable_clock+0x1e>
    487a:	80 91 fc 26 	lds	r24, 0x26FC	; 0x8026fc <dacb_enable_count>
    487e:	91 e0       	ldi	r25, 0x01	; 1
    4880:	98 0f       	add	r25, r24
    4882:	90 93 fc 26 	sts	0x26FC, r25	; 0x8026fc <dacb_enable_count>
    4886:	81 11       	cpse	r24, r1
    4888:	04 c0       	rjmp	.+8      	; 0x4892 <dac_enable_clock+0x1e>
    488a:	64 e0       	ldi	r22, 0x04	; 4
    488c:	82 e0       	ldi	r24, 0x02	; 2
    488e:	0c 94 f5 3f 	jmp	0x7fea	; 0x7fea <sysclk_enable_module>
    4892:	08 95       	ret

00004894 <dac_disable_clock>:
    4894:	80 32       	cpi	r24, 0x20	; 32
    4896:	93 40       	sbci	r25, 0x03	; 3
    4898:	59 f4       	brne	.+22     	; 0x48b0 <dac_disable_clock+0x1c>
    489a:	80 91 fc 26 	lds	r24, 0x26FC	; 0x8026fc <dacb_enable_count>
    489e:	81 50       	subi	r24, 0x01	; 1
    48a0:	80 93 fc 26 	sts	0x26FC, r24	; 0x8026fc <dacb_enable_count>
    48a4:	81 11       	cpse	r24, r1
    48a6:	04 c0       	rjmp	.+8      	; 0x48b0 <dac_disable_clock+0x1c>
    48a8:	64 e0       	ldi	r22, 0x04	; 4
    48aa:	82 e0       	ldi	r24, 0x02	; 2
    48ac:	0c 94 0b 40 	jmp	0x8016	; 0x8016 <sysclk_disable_module>
    48b0:	08 95       	ret

000048b2 <dac_enable>:
    48b2:	ef 92       	push	r14
    48b4:	ff 92       	push	r15
    48b6:	1f 93       	push	r17
    48b8:	cf 93       	push	r28
    48ba:	df 93       	push	r29
    48bc:	1f 92       	push	r1
    48be:	1f 92       	push	r1
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	2f b7       	in	r18, 0x3f	; 63
    48c6:	29 83       	std	Y+1, r18	; 0x01
    48c8:	f8 94       	cli
    48ca:	19 81       	ldd	r17, Y+1	; 0x01
    48cc:	20 91 10 2b 	lds	r18, 0x2B10	; 0x802b10 <sleepmgr_locks+0x1>
    48d0:	2f 3f       	cpi	r18, 0xFF	; 255
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <dac_enable+0x24>
    48d4:	ff cf       	rjmp	.-2      	; 0x48d4 <dac_enable+0x22>
    48d6:	7c 01       	movw	r14, r24
    48d8:	8f b7       	in	r24, 0x3f	; 63
    48da:	8a 83       	std	Y+2, r24	; 0x02
    48dc:	f8 94       	cli
    48de:	9a 81       	ldd	r25, Y+2	; 0x02
    48e0:	ef e0       	ldi	r30, 0x0F	; 15
    48e2:	fb e2       	ldi	r31, 0x2B	; 43
    48e4:	81 81       	ldd	r24, Z+1	; 0x01
    48e6:	8f 5f       	subi	r24, 0xFF	; 255
    48e8:	81 83       	std	Z+1, r24	; 0x01
    48ea:	9f bf       	out	0x3f, r25	; 63
    48ec:	c7 01       	movw	r24, r14
    48ee:	c2 df       	rcall	.-124    	; 0x4874 <dac_enable_clock>
    48f0:	f7 01       	movw	r30, r14
    48f2:	80 81       	ld	r24, Z
    48f4:	81 60       	ori	r24, 0x01	; 1
    48f6:	80 83       	st	Z, r24
    48f8:	1f bf       	out	0x3f, r17	; 63
    48fa:	0f 90       	pop	r0
    48fc:	0f 90       	pop	r0
    48fe:	df 91       	pop	r29
    4900:	cf 91       	pop	r28
    4902:	1f 91       	pop	r17
    4904:	ff 90       	pop	r15
    4906:	ef 90       	pop	r14
    4908:	08 95       	ret

0000490a <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
    490a:	9f 92       	push	r9
    490c:	af 92       	push	r10
    490e:	bf 92       	push	r11
    4910:	cf 92       	push	r12
    4912:	df 92       	push	r13
    4914:	ef 92       	push	r14
    4916:	ff 92       	push	r15
    4918:	0f 93       	push	r16
    491a:	1f 93       	push	r17
    491c:	cf 93       	push	r28
    491e:	df 93       	push	r29
    4920:	1f 92       	push	r1
    4922:	cd b7       	in	r28, 0x3d	; 61
    4924:	de b7       	in	r29, 0x3e	; 62
#  endif
	} else
#endif

#if defined(DACB)
	if ((uintptr_t)dac == (uintptr_t)&DACB) {
    4926:	80 32       	cpi	r24, 0x20	; 32
    4928:	23 e0       	ldi	r18, 0x03	; 3
    492a:	92 07       	cpc	r25, r18
    492c:	09 f0       	breq	.+2      	; 0x4930 <dac_write_configuration+0x26>
    492e:	3c c0       	rjmp	.+120    	; 0x49a8 <dac_write_configuration+0x9e>
    4930:	7b 01       	movw	r14, r22
    4932:	8c 01       	movw	r16, r24
    4934:	63 e3       	ldi	r22, 0x33	; 51
    4936:	70 e0       	ldi	r23, 0x00	; 0
    4938:	82 e0       	ldi	r24, 0x02	; 2
    493a:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
    493e:	98 2e       	mov	r9, r24
    4940:	62 e3       	ldi	r22, 0x32	; 50
    4942:	70 e0       	ldi	r23, 0x00	; 0
    4944:	82 e0       	ldi	r24, 0x02	; 2
    4946:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
    494a:	a8 2e       	mov	r10, r24
    494c:	67 e3       	ldi	r22, 0x37	; 55
    494e:	70 e0       	ldi	r23, 0x00	; 0
    4950:	82 e0       	ldi	r24, 0x02	; 2
    4952:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
    4956:	b8 2e       	mov	r11, r24
    4958:	66 e3       	ldi	r22, 0x36	; 54
    495a:	70 e0       	ldi	r23, 0x00	; 0
    495c:	82 e0       	ldi	r24, 0x02	; 2
    495e:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
    4962:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4964:	8f b7       	in	r24, 0x3f	; 63
    4966:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4968:	f8 94       	cli
	return flags;
    496a:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    496c:	c8 01       	movw	r24, r16
    496e:	82 df       	rcall	.-252    	; 0x4874 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
    4970:	f8 01       	movw	r30, r16
    4972:	80 81       	ld	r24, Z
	dac->CTRLA = 0;
    4974:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
    4976:	f7 01       	movw	r30, r14
    4978:	91 81       	ldd	r25, Z+1	; 0x01
    497a:	f8 01       	movw	r30, r16
    497c:	91 83       	std	Z+1, r25	; 0x01
	dac->CTRLC = conf->ctrlc;
    497e:	f7 01       	movw	r30, r14
    4980:	92 81       	ldd	r25, Z+2	; 0x02
    4982:	f8 01       	movw	r30, r16
    4984:	92 83       	std	Z+2, r25	; 0x02
	dac->EVCTRL = conf->evctrl;
    4986:	f7 01       	movw	r30, r14
    4988:	93 81       	ldd	r25, Z+3	; 0x03
    498a:	f8 01       	movw	r30, r16
    498c:	93 83       	std	Z+3, r25	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
    498e:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
    4990:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
    4992:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
    4994:	c3 86       	std	Z+11, r12	; 0x0b
#endif

	dac->CTRLA = conf->ctrla | enable;
    4996:	81 70       	andi	r24, 0x01	; 1
    4998:	f7 01       	movw	r30, r14
    499a:	90 81       	ld	r25, Z
    499c:	89 2b       	or	r24, r25
    499e:	f8 01       	movw	r30, r16

	dac_disable_clock(dac);
    49a0:	80 83       	st	Z, r24
    49a2:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    49a4:	77 df       	rcall	.-274    	; 0x4894 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    49a6:	df be       	out	0x3f, r13	; 63
    49a8:	0f 90       	pop	r0
    49aa:	df 91       	pop	r29
    49ac:	cf 91       	pop	r28
    49ae:	1f 91       	pop	r17
    49b0:	0f 91       	pop	r16
    49b2:	ff 90       	pop	r15
    49b4:	ef 90       	pop	r14
    49b6:	df 90       	pop	r13
    49b8:	cf 90       	pop	r12
    49ba:	bf 90       	pop	r11
    49bc:	af 90       	pop	r10
    49be:	9f 90       	pop	r9
    49c0:	08 95       	ret

000049c2 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
    49c2:	df 92       	push	r13
    49c4:	ef 92       	push	r14
    49c6:	ff 92       	push	r15
    49c8:	0f 93       	push	r16
    49ca:	1f 93       	push	r17
    49cc:	cf 93       	push	r28
    49ce:	df 93       	push	r29
    49d0:	1f 92       	push	r1
    49d2:	cd b7       	in	r28, 0x3d	; 61
    49d4:	de b7       	in	r29, 0x3e	; 62
    49d6:	8c 01       	movw	r16, r24
    49d8:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    49da:	8f b7       	in	r24, 0x3f	; 63
    49dc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    49de:	f8 94       	cli
	return flags;
    49e0:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
    49e2:	c8 01       	movw	r24, r16
    49e4:	47 df       	rcall	.-370    	; 0x4874 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
    49e6:	f8 01       	movw	r30, r16
    49e8:	80 81       	ld	r24, Z
    49ea:	8e 7f       	andi	r24, 0xFE	; 254
    49ec:	f7 01       	movw	r30, r14
    49ee:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
    49f0:	f8 01       	movw	r30, r16
    49f2:	81 81       	ldd	r24, Z+1	; 0x01
    49f4:	f7 01       	movw	r30, r14
    49f6:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
    49f8:	f8 01       	movw	r30, r16
    49fa:	82 81       	ldd	r24, Z+2	; 0x02
    49fc:	f7 01       	movw	r30, r14
    49fe:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
    4a00:	f8 01       	movw	r30, r16
    4a02:	83 81       	ldd	r24, Z+3	; 0x03
    4a04:	f7 01       	movw	r30, r14

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
    4a06:	83 83       	std	Z+3, r24	; 0x03
    4a08:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4a0a:	44 df       	rcall	.-376    	; 0x4894 <dac_disable_clock>
	cpu_irq_restore(flags);
}
    4a0c:	df be       	out	0x3f, r13	; 63
    4a0e:	0f 90       	pop	r0
    4a10:	df 91       	pop	r29
    4a12:	cf 91       	pop	r28
    4a14:	1f 91       	pop	r17
    4a16:	0f 91       	pop	r16
    4a18:	ff 90       	pop	r15
    4a1a:	ef 90       	pop	r14
    4a1c:	df 90       	pop	r13
    4a1e:	08 95       	ret

00004a20 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    4a20:	1f 92       	push	r1
    4a22:	0f 92       	push	r0
    4a24:	0f b6       	in	r0, 0x3f	; 63
    4a26:	0f 92       	push	r0
    4a28:	11 24       	eor	r1, r1
    4a2a:	0b b6       	in	r0, 0x3b	; 59
    4a2c:	0f 92       	push	r0
    4a2e:	2f 93       	push	r18
    4a30:	3f 93       	push	r19
    4a32:	4f 93       	push	r20
    4a34:	5f 93       	push	r21
    4a36:	6f 93       	push	r22
    4a38:	7f 93       	push	r23
    4a3a:	8f 93       	push	r24
    4a3c:	9f 93       	push	r25
    4a3e:	af 93       	push	r26
    4a40:	bf 93       	push	r27
    4a42:	ef 93       	push	r30
    4a44:	ff 93       	push	r31
    4a46:	e0 91 43 27 	lds	r30, 0x2743	; 0x802743 <tc_tcc0_ovf_callback>
    4a4a:	f0 91 44 27 	lds	r31, 0x2744	; 0x802744 <tc_tcc0_ovf_callback+0x1>
    4a4e:	30 97       	sbiw	r30, 0x00	; 0
    4a50:	09 f0       	breq	.+2      	; 0x4a54 <__vector_14+0x34>
    4a52:	19 95       	eicall
    4a54:	ff 91       	pop	r31
    4a56:	ef 91       	pop	r30
    4a58:	bf 91       	pop	r27
    4a5a:	af 91       	pop	r26
    4a5c:	9f 91       	pop	r25
    4a5e:	8f 91       	pop	r24
    4a60:	7f 91       	pop	r23
    4a62:	6f 91       	pop	r22
    4a64:	5f 91       	pop	r21
    4a66:	4f 91       	pop	r20
    4a68:	3f 91       	pop	r19
    4a6a:	2f 91       	pop	r18
    4a6c:	0f 90       	pop	r0
    4a6e:	0b be       	out	0x3b, r0	; 59
    4a70:	0f 90       	pop	r0
    4a72:	0f be       	out	0x3f, r0	; 63
    4a74:	0f 90       	pop	r0
    4a76:	1f 90       	pop	r1
    4a78:	18 95       	reti

00004a7a <__vector_15>:
    4a7a:	1f 92       	push	r1
    4a7c:	0f 92       	push	r0
    4a7e:	0f b6       	in	r0, 0x3f	; 63
    4a80:	0f 92       	push	r0
    4a82:	11 24       	eor	r1, r1
    4a84:	0b b6       	in	r0, 0x3b	; 59
    4a86:	0f 92       	push	r0
    4a88:	2f 93       	push	r18
    4a8a:	3f 93       	push	r19
    4a8c:	4f 93       	push	r20
    4a8e:	5f 93       	push	r21
    4a90:	6f 93       	push	r22
    4a92:	7f 93       	push	r23
    4a94:	8f 93       	push	r24
    4a96:	9f 93       	push	r25
    4a98:	af 93       	push	r26
    4a9a:	bf 93       	push	r27
    4a9c:	ef 93       	push	r30
    4a9e:	ff 93       	push	r31
    4aa0:	e0 91 41 27 	lds	r30, 0x2741	; 0x802741 <tc_tcc0_err_callback>
    4aa4:	f0 91 42 27 	lds	r31, 0x2742	; 0x802742 <tc_tcc0_err_callback+0x1>
    4aa8:	30 97       	sbiw	r30, 0x00	; 0
    4aaa:	09 f0       	breq	.+2      	; 0x4aae <__vector_15+0x34>
    4aac:	19 95       	eicall
    4aae:	ff 91       	pop	r31
    4ab0:	ef 91       	pop	r30
    4ab2:	bf 91       	pop	r27
    4ab4:	af 91       	pop	r26
    4ab6:	9f 91       	pop	r25
    4ab8:	8f 91       	pop	r24
    4aba:	7f 91       	pop	r23
    4abc:	6f 91       	pop	r22
    4abe:	5f 91       	pop	r21
    4ac0:	4f 91       	pop	r20
    4ac2:	3f 91       	pop	r19
    4ac4:	2f 91       	pop	r18
    4ac6:	0f 90       	pop	r0
    4ac8:	0b be       	out	0x3b, r0	; 59
    4aca:	0f 90       	pop	r0
    4acc:	0f be       	out	0x3f, r0	; 63
    4ace:	0f 90       	pop	r0
    4ad0:	1f 90       	pop	r1
    4ad2:	18 95       	reti

00004ad4 <__vector_16>:
    4ad4:	1f 92       	push	r1
    4ad6:	0f 92       	push	r0
    4ad8:	0f b6       	in	r0, 0x3f	; 63
    4ada:	0f 92       	push	r0
    4adc:	11 24       	eor	r1, r1
    4ade:	0b b6       	in	r0, 0x3b	; 59
    4ae0:	0f 92       	push	r0
    4ae2:	2f 93       	push	r18
    4ae4:	3f 93       	push	r19
    4ae6:	4f 93       	push	r20
    4ae8:	5f 93       	push	r21
    4aea:	6f 93       	push	r22
    4aec:	7f 93       	push	r23
    4aee:	8f 93       	push	r24
    4af0:	9f 93       	push	r25
    4af2:	af 93       	push	r26
    4af4:	bf 93       	push	r27
    4af6:	ef 93       	push	r30
    4af8:	ff 93       	push	r31
    4afa:	e0 91 3f 27 	lds	r30, 0x273F	; 0x80273f <tc_tcc0_cca_callback>
    4afe:	f0 91 40 27 	lds	r31, 0x2740	; 0x802740 <tc_tcc0_cca_callback+0x1>
    4b02:	30 97       	sbiw	r30, 0x00	; 0
    4b04:	09 f0       	breq	.+2      	; 0x4b08 <__vector_16+0x34>
    4b06:	19 95       	eicall
    4b08:	ff 91       	pop	r31
    4b0a:	ef 91       	pop	r30
    4b0c:	bf 91       	pop	r27
    4b0e:	af 91       	pop	r26
    4b10:	9f 91       	pop	r25
    4b12:	8f 91       	pop	r24
    4b14:	7f 91       	pop	r23
    4b16:	6f 91       	pop	r22
    4b18:	5f 91       	pop	r21
    4b1a:	4f 91       	pop	r20
    4b1c:	3f 91       	pop	r19
    4b1e:	2f 91       	pop	r18
    4b20:	0f 90       	pop	r0
    4b22:	0b be       	out	0x3b, r0	; 59
    4b24:	0f 90       	pop	r0
    4b26:	0f be       	out	0x3f, r0	; 63
    4b28:	0f 90       	pop	r0
    4b2a:	1f 90       	pop	r1
    4b2c:	18 95       	reti

00004b2e <__vector_17>:
    4b2e:	1f 92       	push	r1
    4b30:	0f 92       	push	r0
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	0f 92       	push	r0
    4b36:	11 24       	eor	r1, r1
    4b38:	0b b6       	in	r0, 0x3b	; 59
    4b3a:	0f 92       	push	r0
    4b3c:	2f 93       	push	r18
    4b3e:	3f 93       	push	r19
    4b40:	4f 93       	push	r20
    4b42:	5f 93       	push	r21
    4b44:	6f 93       	push	r22
    4b46:	7f 93       	push	r23
    4b48:	8f 93       	push	r24
    4b4a:	9f 93       	push	r25
    4b4c:	af 93       	push	r26
    4b4e:	bf 93       	push	r27
    4b50:	ef 93       	push	r30
    4b52:	ff 93       	push	r31
    4b54:	e0 91 3d 27 	lds	r30, 0x273D	; 0x80273d <tc_tcc0_ccb_callback>
    4b58:	f0 91 3e 27 	lds	r31, 0x273E	; 0x80273e <tc_tcc0_ccb_callback+0x1>
    4b5c:	30 97       	sbiw	r30, 0x00	; 0
    4b5e:	09 f0       	breq	.+2      	; 0x4b62 <__vector_17+0x34>
    4b60:	19 95       	eicall
    4b62:	ff 91       	pop	r31
    4b64:	ef 91       	pop	r30
    4b66:	bf 91       	pop	r27
    4b68:	af 91       	pop	r26
    4b6a:	9f 91       	pop	r25
    4b6c:	8f 91       	pop	r24
    4b6e:	7f 91       	pop	r23
    4b70:	6f 91       	pop	r22
    4b72:	5f 91       	pop	r21
    4b74:	4f 91       	pop	r20
    4b76:	3f 91       	pop	r19
    4b78:	2f 91       	pop	r18
    4b7a:	0f 90       	pop	r0
    4b7c:	0b be       	out	0x3b, r0	; 59
    4b7e:	0f 90       	pop	r0
    4b80:	0f be       	out	0x3f, r0	; 63
    4b82:	0f 90       	pop	r0
    4b84:	1f 90       	pop	r1
    4b86:	18 95       	reti

00004b88 <__vector_18>:
    4b88:	1f 92       	push	r1
    4b8a:	0f 92       	push	r0
    4b8c:	0f b6       	in	r0, 0x3f	; 63
    4b8e:	0f 92       	push	r0
    4b90:	11 24       	eor	r1, r1
    4b92:	0b b6       	in	r0, 0x3b	; 59
    4b94:	0f 92       	push	r0
    4b96:	2f 93       	push	r18
    4b98:	3f 93       	push	r19
    4b9a:	4f 93       	push	r20
    4b9c:	5f 93       	push	r21
    4b9e:	6f 93       	push	r22
    4ba0:	7f 93       	push	r23
    4ba2:	8f 93       	push	r24
    4ba4:	9f 93       	push	r25
    4ba6:	af 93       	push	r26
    4ba8:	bf 93       	push	r27
    4baa:	ef 93       	push	r30
    4bac:	ff 93       	push	r31
    4bae:	e0 91 3b 27 	lds	r30, 0x273B	; 0x80273b <tc_tcc0_ccc_callback>
    4bb2:	f0 91 3c 27 	lds	r31, 0x273C	; 0x80273c <tc_tcc0_ccc_callback+0x1>
    4bb6:	30 97       	sbiw	r30, 0x00	; 0
    4bb8:	09 f0       	breq	.+2      	; 0x4bbc <__vector_18+0x34>
    4bba:	19 95       	eicall
    4bbc:	ff 91       	pop	r31
    4bbe:	ef 91       	pop	r30
    4bc0:	bf 91       	pop	r27
    4bc2:	af 91       	pop	r26
    4bc4:	9f 91       	pop	r25
    4bc6:	8f 91       	pop	r24
    4bc8:	7f 91       	pop	r23
    4bca:	6f 91       	pop	r22
    4bcc:	5f 91       	pop	r21
    4bce:	4f 91       	pop	r20
    4bd0:	3f 91       	pop	r19
    4bd2:	2f 91       	pop	r18
    4bd4:	0f 90       	pop	r0
    4bd6:	0b be       	out	0x3b, r0	; 59
    4bd8:	0f 90       	pop	r0
    4bda:	0f be       	out	0x3f, r0	; 63
    4bdc:	0f 90       	pop	r0
    4bde:	1f 90       	pop	r1
    4be0:	18 95       	reti

00004be2 <__vector_19>:
    4be2:	1f 92       	push	r1
    4be4:	0f 92       	push	r0
    4be6:	0f b6       	in	r0, 0x3f	; 63
    4be8:	0f 92       	push	r0
    4bea:	11 24       	eor	r1, r1
    4bec:	0b b6       	in	r0, 0x3b	; 59
    4bee:	0f 92       	push	r0
    4bf0:	2f 93       	push	r18
    4bf2:	3f 93       	push	r19
    4bf4:	4f 93       	push	r20
    4bf6:	5f 93       	push	r21
    4bf8:	6f 93       	push	r22
    4bfa:	7f 93       	push	r23
    4bfc:	8f 93       	push	r24
    4bfe:	9f 93       	push	r25
    4c00:	af 93       	push	r26
    4c02:	bf 93       	push	r27
    4c04:	ef 93       	push	r30
    4c06:	ff 93       	push	r31
    4c08:	e0 91 39 27 	lds	r30, 0x2739	; 0x802739 <tc_tcc0_ccd_callback>
    4c0c:	f0 91 3a 27 	lds	r31, 0x273A	; 0x80273a <tc_tcc0_ccd_callback+0x1>
    4c10:	30 97       	sbiw	r30, 0x00	; 0
    4c12:	09 f0       	breq	.+2      	; 0x4c16 <__vector_19+0x34>
    4c14:	19 95       	eicall
    4c16:	ff 91       	pop	r31
    4c18:	ef 91       	pop	r30
    4c1a:	bf 91       	pop	r27
    4c1c:	af 91       	pop	r26
    4c1e:	9f 91       	pop	r25
    4c20:	8f 91       	pop	r24
    4c22:	7f 91       	pop	r23
    4c24:	6f 91       	pop	r22
    4c26:	5f 91       	pop	r21
    4c28:	4f 91       	pop	r20
    4c2a:	3f 91       	pop	r19
    4c2c:	2f 91       	pop	r18
    4c2e:	0f 90       	pop	r0
    4c30:	0b be       	out	0x3b, r0	; 59
    4c32:	0f 90       	pop	r0
    4c34:	0f be       	out	0x3f, r0	; 63
    4c36:	0f 90       	pop	r0
    4c38:	1f 90       	pop	r1
    4c3a:	18 95       	reti

00004c3c <__vector_20>:
    4c3c:	1f 92       	push	r1
    4c3e:	0f 92       	push	r0
    4c40:	0f b6       	in	r0, 0x3f	; 63
    4c42:	0f 92       	push	r0
    4c44:	11 24       	eor	r1, r1
    4c46:	0b b6       	in	r0, 0x3b	; 59
    4c48:	0f 92       	push	r0
    4c4a:	2f 93       	push	r18
    4c4c:	3f 93       	push	r19
    4c4e:	4f 93       	push	r20
    4c50:	5f 93       	push	r21
    4c52:	6f 93       	push	r22
    4c54:	7f 93       	push	r23
    4c56:	8f 93       	push	r24
    4c58:	9f 93       	push	r25
    4c5a:	af 93       	push	r26
    4c5c:	bf 93       	push	r27
    4c5e:	ef 93       	push	r30
    4c60:	ff 93       	push	r31
    4c62:	e0 91 37 27 	lds	r30, 0x2737	; 0x802737 <tc_tcc1_ovf_callback>
    4c66:	f0 91 38 27 	lds	r31, 0x2738	; 0x802738 <tc_tcc1_ovf_callback+0x1>
    4c6a:	30 97       	sbiw	r30, 0x00	; 0
    4c6c:	09 f0       	breq	.+2      	; 0x4c70 <__vector_20+0x34>
    4c6e:	19 95       	eicall
    4c70:	ff 91       	pop	r31
    4c72:	ef 91       	pop	r30
    4c74:	bf 91       	pop	r27
    4c76:	af 91       	pop	r26
    4c78:	9f 91       	pop	r25
    4c7a:	8f 91       	pop	r24
    4c7c:	7f 91       	pop	r23
    4c7e:	6f 91       	pop	r22
    4c80:	5f 91       	pop	r21
    4c82:	4f 91       	pop	r20
    4c84:	3f 91       	pop	r19
    4c86:	2f 91       	pop	r18
    4c88:	0f 90       	pop	r0
    4c8a:	0b be       	out	0x3b, r0	; 59
    4c8c:	0f 90       	pop	r0
    4c8e:	0f be       	out	0x3f, r0	; 63
    4c90:	0f 90       	pop	r0
    4c92:	1f 90       	pop	r1
    4c94:	18 95       	reti

00004c96 <__vector_21>:
    4c96:	1f 92       	push	r1
    4c98:	0f 92       	push	r0
    4c9a:	0f b6       	in	r0, 0x3f	; 63
    4c9c:	0f 92       	push	r0
    4c9e:	11 24       	eor	r1, r1
    4ca0:	0b b6       	in	r0, 0x3b	; 59
    4ca2:	0f 92       	push	r0
    4ca4:	2f 93       	push	r18
    4ca6:	3f 93       	push	r19
    4ca8:	4f 93       	push	r20
    4caa:	5f 93       	push	r21
    4cac:	6f 93       	push	r22
    4cae:	7f 93       	push	r23
    4cb0:	8f 93       	push	r24
    4cb2:	9f 93       	push	r25
    4cb4:	af 93       	push	r26
    4cb6:	bf 93       	push	r27
    4cb8:	ef 93       	push	r30
    4cba:	ff 93       	push	r31
    4cbc:	e0 91 35 27 	lds	r30, 0x2735	; 0x802735 <tc_tcc1_err_callback>
    4cc0:	f0 91 36 27 	lds	r31, 0x2736	; 0x802736 <tc_tcc1_err_callback+0x1>
    4cc4:	30 97       	sbiw	r30, 0x00	; 0
    4cc6:	09 f0       	breq	.+2      	; 0x4cca <__vector_21+0x34>
    4cc8:	19 95       	eicall
    4cca:	ff 91       	pop	r31
    4ccc:	ef 91       	pop	r30
    4cce:	bf 91       	pop	r27
    4cd0:	af 91       	pop	r26
    4cd2:	9f 91       	pop	r25
    4cd4:	8f 91       	pop	r24
    4cd6:	7f 91       	pop	r23
    4cd8:	6f 91       	pop	r22
    4cda:	5f 91       	pop	r21
    4cdc:	4f 91       	pop	r20
    4cde:	3f 91       	pop	r19
    4ce0:	2f 91       	pop	r18
    4ce2:	0f 90       	pop	r0
    4ce4:	0b be       	out	0x3b, r0	; 59
    4ce6:	0f 90       	pop	r0
    4ce8:	0f be       	out	0x3f, r0	; 63
    4cea:	0f 90       	pop	r0
    4cec:	1f 90       	pop	r1
    4cee:	18 95       	reti

00004cf0 <__vector_22>:
    4cf0:	1f 92       	push	r1
    4cf2:	0f 92       	push	r0
    4cf4:	0f b6       	in	r0, 0x3f	; 63
    4cf6:	0f 92       	push	r0
    4cf8:	11 24       	eor	r1, r1
    4cfa:	0b b6       	in	r0, 0x3b	; 59
    4cfc:	0f 92       	push	r0
    4cfe:	2f 93       	push	r18
    4d00:	3f 93       	push	r19
    4d02:	4f 93       	push	r20
    4d04:	5f 93       	push	r21
    4d06:	6f 93       	push	r22
    4d08:	7f 93       	push	r23
    4d0a:	8f 93       	push	r24
    4d0c:	9f 93       	push	r25
    4d0e:	af 93       	push	r26
    4d10:	bf 93       	push	r27
    4d12:	ef 93       	push	r30
    4d14:	ff 93       	push	r31
    4d16:	e0 91 33 27 	lds	r30, 0x2733	; 0x802733 <tc_tcc1_cca_callback>
    4d1a:	f0 91 34 27 	lds	r31, 0x2734	; 0x802734 <tc_tcc1_cca_callback+0x1>
    4d1e:	30 97       	sbiw	r30, 0x00	; 0
    4d20:	09 f0       	breq	.+2      	; 0x4d24 <__vector_22+0x34>
    4d22:	19 95       	eicall
    4d24:	ff 91       	pop	r31
    4d26:	ef 91       	pop	r30
    4d28:	bf 91       	pop	r27
    4d2a:	af 91       	pop	r26
    4d2c:	9f 91       	pop	r25
    4d2e:	8f 91       	pop	r24
    4d30:	7f 91       	pop	r23
    4d32:	6f 91       	pop	r22
    4d34:	5f 91       	pop	r21
    4d36:	4f 91       	pop	r20
    4d38:	3f 91       	pop	r19
    4d3a:	2f 91       	pop	r18
    4d3c:	0f 90       	pop	r0
    4d3e:	0b be       	out	0x3b, r0	; 59
    4d40:	0f 90       	pop	r0
    4d42:	0f be       	out	0x3f, r0	; 63
    4d44:	0f 90       	pop	r0
    4d46:	1f 90       	pop	r1
    4d48:	18 95       	reti

00004d4a <__vector_23>:
    4d4a:	1f 92       	push	r1
    4d4c:	0f 92       	push	r0
    4d4e:	0f b6       	in	r0, 0x3f	; 63
    4d50:	0f 92       	push	r0
    4d52:	11 24       	eor	r1, r1
    4d54:	0b b6       	in	r0, 0x3b	; 59
    4d56:	0f 92       	push	r0
    4d58:	2f 93       	push	r18
    4d5a:	3f 93       	push	r19
    4d5c:	4f 93       	push	r20
    4d5e:	5f 93       	push	r21
    4d60:	6f 93       	push	r22
    4d62:	7f 93       	push	r23
    4d64:	8f 93       	push	r24
    4d66:	9f 93       	push	r25
    4d68:	af 93       	push	r26
    4d6a:	bf 93       	push	r27
    4d6c:	ef 93       	push	r30
    4d6e:	ff 93       	push	r31
    4d70:	e0 91 31 27 	lds	r30, 0x2731	; 0x802731 <tc_tcc1_ccb_callback>
    4d74:	f0 91 32 27 	lds	r31, 0x2732	; 0x802732 <tc_tcc1_ccb_callback+0x1>
    4d78:	30 97       	sbiw	r30, 0x00	; 0
    4d7a:	09 f0       	breq	.+2      	; 0x4d7e <__vector_23+0x34>
    4d7c:	19 95       	eicall
    4d7e:	ff 91       	pop	r31
    4d80:	ef 91       	pop	r30
    4d82:	bf 91       	pop	r27
    4d84:	af 91       	pop	r26
    4d86:	9f 91       	pop	r25
    4d88:	8f 91       	pop	r24
    4d8a:	7f 91       	pop	r23
    4d8c:	6f 91       	pop	r22
    4d8e:	5f 91       	pop	r21
    4d90:	4f 91       	pop	r20
    4d92:	3f 91       	pop	r19
    4d94:	2f 91       	pop	r18
    4d96:	0f 90       	pop	r0
    4d98:	0b be       	out	0x3b, r0	; 59
    4d9a:	0f 90       	pop	r0
    4d9c:	0f be       	out	0x3f, r0	; 63
    4d9e:	0f 90       	pop	r0
    4da0:	1f 90       	pop	r1
    4da2:	18 95       	reti

00004da4 <__vector_77>:
    4da4:	1f 92       	push	r1
    4da6:	0f 92       	push	r0
    4da8:	0f b6       	in	r0, 0x3f	; 63
    4daa:	0f 92       	push	r0
    4dac:	11 24       	eor	r1, r1
    4dae:	0b b6       	in	r0, 0x3b	; 59
    4db0:	0f 92       	push	r0
    4db2:	2f 93       	push	r18
    4db4:	3f 93       	push	r19
    4db6:	4f 93       	push	r20
    4db8:	5f 93       	push	r21
    4dba:	6f 93       	push	r22
    4dbc:	7f 93       	push	r23
    4dbe:	8f 93       	push	r24
    4dc0:	9f 93       	push	r25
    4dc2:	af 93       	push	r26
    4dc4:	bf 93       	push	r27
    4dc6:	ef 93       	push	r30
    4dc8:	ff 93       	push	r31
    4dca:	e0 91 2f 27 	lds	r30, 0x272F	; 0x80272f <tc_tcd0_ovf_callback>
    4dce:	f0 91 30 27 	lds	r31, 0x2730	; 0x802730 <tc_tcd0_ovf_callback+0x1>
    4dd2:	30 97       	sbiw	r30, 0x00	; 0
    4dd4:	09 f0       	breq	.+2      	; 0x4dd8 <__vector_77+0x34>
    4dd6:	19 95       	eicall
    4dd8:	ff 91       	pop	r31
    4dda:	ef 91       	pop	r30
    4ddc:	bf 91       	pop	r27
    4dde:	af 91       	pop	r26
    4de0:	9f 91       	pop	r25
    4de2:	8f 91       	pop	r24
    4de4:	7f 91       	pop	r23
    4de6:	6f 91       	pop	r22
    4de8:	5f 91       	pop	r21
    4dea:	4f 91       	pop	r20
    4dec:	3f 91       	pop	r19
    4dee:	2f 91       	pop	r18
    4df0:	0f 90       	pop	r0
    4df2:	0b be       	out	0x3b, r0	; 59
    4df4:	0f 90       	pop	r0
    4df6:	0f be       	out	0x3f, r0	; 63
    4df8:	0f 90       	pop	r0
    4dfa:	1f 90       	pop	r1
    4dfc:	18 95       	reti

00004dfe <__vector_78>:
    4dfe:	1f 92       	push	r1
    4e00:	0f 92       	push	r0
    4e02:	0f b6       	in	r0, 0x3f	; 63
    4e04:	0f 92       	push	r0
    4e06:	11 24       	eor	r1, r1
    4e08:	0b b6       	in	r0, 0x3b	; 59
    4e0a:	0f 92       	push	r0
    4e0c:	2f 93       	push	r18
    4e0e:	3f 93       	push	r19
    4e10:	4f 93       	push	r20
    4e12:	5f 93       	push	r21
    4e14:	6f 93       	push	r22
    4e16:	7f 93       	push	r23
    4e18:	8f 93       	push	r24
    4e1a:	9f 93       	push	r25
    4e1c:	af 93       	push	r26
    4e1e:	bf 93       	push	r27
    4e20:	ef 93       	push	r30
    4e22:	ff 93       	push	r31
    4e24:	e0 91 2d 27 	lds	r30, 0x272D	; 0x80272d <tc_tcd0_err_callback>
    4e28:	f0 91 2e 27 	lds	r31, 0x272E	; 0x80272e <tc_tcd0_err_callback+0x1>
    4e2c:	30 97       	sbiw	r30, 0x00	; 0
    4e2e:	09 f0       	breq	.+2      	; 0x4e32 <__vector_78+0x34>
    4e30:	19 95       	eicall
    4e32:	ff 91       	pop	r31
    4e34:	ef 91       	pop	r30
    4e36:	bf 91       	pop	r27
    4e38:	af 91       	pop	r26
    4e3a:	9f 91       	pop	r25
    4e3c:	8f 91       	pop	r24
    4e3e:	7f 91       	pop	r23
    4e40:	6f 91       	pop	r22
    4e42:	5f 91       	pop	r21
    4e44:	4f 91       	pop	r20
    4e46:	3f 91       	pop	r19
    4e48:	2f 91       	pop	r18
    4e4a:	0f 90       	pop	r0
    4e4c:	0b be       	out	0x3b, r0	; 59
    4e4e:	0f 90       	pop	r0
    4e50:	0f be       	out	0x3f, r0	; 63
    4e52:	0f 90       	pop	r0
    4e54:	1f 90       	pop	r1
    4e56:	18 95       	reti

00004e58 <__vector_79>:
    4e58:	1f 92       	push	r1
    4e5a:	0f 92       	push	r0
    4e5c:	0f b6       	in	r0, 0x3f	; 63
    4e5e:	0f 92       	push	r0
    4e60:	11 24       	eor	r1, r1
    4e62:	0b b6       	in	r0, 0x3b	; 59
    4e64:	0f 92       	push	r0
    4e66:	2f 93       	push	r18
    4e68:	3f 93       	push	r19
    4e6a:	4f 93       	push	r20
    4e6c:	5f 93       	push	r21
    4e6e:	6f 93       	push	r22
    4e70:	7f 93       	push	r23
    4e72:	8f 93       	push	r24
    4e74:	9f 93       	push	r25
    4e76:	af 93       	push	r26
    4e78:	bf 93       	push	r27
    4e7a:	ef 93       	push	r30
    4e7c:	ff 93       	push	r31
    4e7e:	e0 91 2b 27 	lds	r30, 0x272B	; 0x80272b <tc_tcd0_cca_callback>
    4e82:	f0 91 2c 27 	lds	r31, 0x272C	; 0x80272c <tc_tcd0_cca_callback+0x1>
    4e86:	30 97       	sbiw	r30, 0x00	; 0
    4e88:	09 f0       	breq	.+2      	; 0x4e8c <__vector_79+0x34>
    4e8a:	19 95       	eicall
    4e8c:	ff 91       	pop	r31
    4e8e:	ef 91       	pop	r30
    4e90:	bf 91       	pop	r27
    4e92:	af 91       	pop	r26
    4e94:	9f 91       	pop	r25
    4e96:	8f 91       	pop	r24
    4e98:	7f 91       	pop	r23
    4e9a:	6f 91       	pop	r22
    4e9c:	5f 91       	pop	r21
    4e9e:	4f 91       	pop	r20
    4ea0:	3f 91       	pop	r19
    4ea2:	2f 91       	pop	r18
    4ea4:	0f 90       	pop	r0
    4ea6:	0b be       	out	0x3b, r0	; 59
    4ea8:	0f 90       	pop	r0
    4eaa:	0f be       	out	0x3f, r0	; 63
    4eac:	0f 90       	pop	r0
    4eae:	1f 90       	pop	r1
    4eb0:	18 95       	reti

00004eb2 <__vector_80>:
    4eb2:	1f 92       	push	r1
    4eb4:	0f 92       	push	r0
    4eb6:	0f b6       	in	r0, 0x3f	; 63
    4eb8:	0f 92       	push	r0
    4eba:	11 24       	eor	r1, r1
    4ebc:	0b b6       	in	r0, 0x3b	; 59
    4ebe:	0f 92       	push	r0
    4ec0:	2f 93       	push	r18
    4ec2:	3f 93       	push	r19
    4ec4:	4f 93       	push	r20
    4ec6:	5f 93       	push	r21
    4ec8:	6f 93       	push	r22
    4eca:	7f 93       	push	r23
    4ecc:	8f 93       	push	r24
    4ece:	9f 93       	push	r25
    4ed0:	af 93       	push	r26
    4ed2:	bf 93       	push	r27
    4ed4:	ef 93       	push	r30
    4ed6:	ff 93       	push	r31
    4ed8:	e0 91 29 27 	lds	r30, 0x2729	; 0x802729 <tc_tcd0_ccb_callback>
    4edc:	f0 91 2a 27 	lds	r31, 0x272A	; 0x80272a <tc_tcd0_ccb_callback+0x1>
    4ee0:	30 97       	sbiw	r30, 0x00	; 0
    4ee2:	09 f0       	breq	.+2      	; 0x4ee6 <__vector_80+0x34>
    4ee4:	19 95       	eicall
    4ee6:	ff 91       	pop	r31
    4ee8:	ef 91       	pop	r30
    4eea:	bf 91       	pop	r27
    4eec:	af 91       	pop	r26
    4eee:	9f 91       	pop	r25
    4ef0:	8f 91       	pop	r24
    4ef2:	7f 91       	pop	r23
    4ef4:	6f 91       	pop	r22
    4ef6:	5f 91       	pop	r21
    4ef8:	4f 91       	pop	r20
    4efa:	3f 91       	pop	r19
    4efc:	2f 91       	pop	r18
    4efe:	0f 90       	pop	r0
    4f00:	0b be       	out	0x3b, r0	; 59
    4f02:	0f 90       	pop	r0
    4f04:	0f be       	out	0x3f, r0	; 63
    4f06:	0f 90       	pop	r0
    4f08:	1f 90       	pop	r1
    4f0a:	18 95       	reti

00004f0c <__vector_81>:
    4f0c:	1f 92       	push	r1
    4f0e:	0f 92       	push	r0
    4f10:	0f b6       	in	r0, 0x3f	; 63
    4f12:	0f 92       	push	r0
    4f14:	11 24       	eor	r1, r1
    4f16:	0b b6       	in	r0, 0x3b	; 59
    4f18:	0f 92       	push	r0
    4f1a:	2f 93       	push	r18
    4f1c:	3f 93       	push	r19
    4f1e:	4f 93       	push	r20
    4f20:	5f 93       	push	r21
    4f22:	6f 93       	push	r22
    4f24:	7f 93       	push	r23
    4f26:	8f 93       	push	r24
    4f28:	9f 93       	push	r25
    4f2a:	af 93       	push	r26
    4f2c:	bf 93       	push	r27
    4f2e:	ef 93       	push	r30
    4f30:	ff 93       	push	r31
    4f32:	e0 91 27 27 	lds	r30, 0x2727	; 0x802727 <tc_tcd0_ccc_callback>
    4f36:	f0 91 28 27 	lds	r31, 0x2728	; 0x802728 <tc_tcd0_ccc_callback+0x1>
    4f3a:	30 97       	sbiw	r30, 0x00	; 0
    4f3c:	09 f0       	breq	.+2      	; 0x4f40 <__vector_81+0x34>
    4f3e:	19 95       	eicall
    4f40:	ff 91       	pop	r31
    4f42:	ef 91       	pop	r30
    4f44:	bf 91       	pop	r27
    4f46:	af 91       	pop	r26
    4f48:	9f 91       	pop	r25
    4f4a:	8f 91       	pop	r24
    4f4c:	7f 91       	pop	r23
    4f4e:	6f 91       	pop	r22
    4f50:	5f 91       	pop	r21
    4f52:	4f 91       	pop	r20
    4f54:	3f 91       	pop	r19
    4f56:	2f 91       	pop	r18
    4f58:	0f 90       	pop	r0
    4f5a:	0b be       	out	0x3b, r0	; 59
    4f5c:	0f 90       	pop	r0
    4f5e:	0f be       	out	0x3f, r0	; 63
    4f60:	0f 90       	pop	r0
    4f62:	1f 90       	pop	r1
    4f64:	18 95       	reti

00004f66 <__vector_82>:
    4f66:	1f 92       	push	r1
    4f68:	0f 92       	push	r0
    4f6a:	0f b6       	in	r0, 0x3f	; 63
    4f6c:	0f 92       	push	r0
    4f6e:	11 24       	eor	r1, r1
    4f70:	0b b6       	in	r0, 0x3b	; 59
    4f72:	0f 92       	push	r0
    4f74:	2f 93       	push	r18
    4f76:	3f 93       	push	r19
    4f78:	4f 93       	push	r20
    4f7a:	5f 93       	push	r21
    4f7c:	6f 93       	push	r22
    4f7e:	7f 93       	push	r23
    4f80:	8f 93       	push	r24
    4f82:	9f 93       	push	r25
    4f84:	af 93       	push	r26
    4f86:	bf 93       	push	r27
    4f88:	ef 93       	push	r30
    4f8a:	ff 93       	push	r31
    4f8c:	e0 91 25 27 	lds	r30, 0x2725	; 0x802725 <tc_tcd0_ccd_callback>
    4f90:	f0 91 26 27 	lds	r31, 0x2726	; 0x802726 <tc_tcd0_ccd_callback+0x1>
    4f94:	30 97       	sbiw	r30, 0x00	; 0
    4f96:	09 f0       	breq	.+2      	; 0x4f9a <__vector_82+0x34>
    4f98:	19 95       	eicall
    4f9a:	ff 91       	pop	r31
    4f9c:	ef 91       	pop	r30
    4f9e:	bf 91       	pop	r27
    4fa0:	af 91       	pop	r26
    4fa2:	9f 91       	pop	r25
    4fa4:	8f 91       	pop	r24
    4fa6:	7f 91       	pop	r23
    4fa8:	6f 91       	pop	r22
    4faa:	5f 91       	pop	r21
    4fac:	4f 91       	pop	r20
    4fae:	3f 91       	pop	r19
    4fb0:	2f 91       	pop	r18
    4fb2:	0f 90       	pop	r0
    4fb4:	0b be       	out	0x3b, r0	; 59
    4fb6:	0f 90       	pop	r0
    4fb8:	0f be       	out	0x3f, r0	; 63
    4fba:	0f 90       	pop	r0
    4fbc:	1f 90       	pop	r1
    4fbe:	18 95       	reti

00004fc0 <__vector_83>:
    4fc0:	1f 92       	push	r1
    4fc2:	0f 92       	push	r0
    4fc4:	0f b6       	in	r0, 0x3f	; 63
    4fc6:	0f 92       	push	r0
    4fc8:	11 24       	eor	r1, r1
    4fca:	0b b6       	in	r0, 0x3b	; 59
    4fcc:	0f 92       	push	r0
    4fce:	2f 93       	push	r18
    4fd0:	3f 93       	push	r19
    4fd2:	4f 93       	push	r20
    4fd4:	5f 93       	push	r21
    4fd6:	6f 93       	push	r22
    4fd8:	7f 93       	push	r23
    4fda:	8f 93       	push	r24
    4fdc:	9f 93       	push	r25
    4fde:	af 93       	push	r26
    4fe0:	bf 93       	push	r27
    4fe2:	ef 93       	push	r30
    4fe4:	ff 93       	push	r31
    4fe6:	e0 91 23 27 	lds	r30, 0x2723	; 0x802723 <tc_tcd1_ovf_callback>
    4fea:	f0 91 24 27 	lds	r31, 0x2724	; 0x802724 <tc_tcd1_ovf_callback+0x1>
    4fee:	30 97       	sbiw	r30, 0x00	; 0
    4ff0:	09 f0       	breq	.+2      	; 0x4ff4 <__vector_83+0x34>
    4ff2:	19 95       	eicall
    4ff4:	ff 91       	pop	r31
    4ff6:	ef 91       	pop	r30
    4ff8:	bf 91       	pop	r27
    4ffa:	af 91       	pop	r26
    4ffc:	9f 91       	pop	r25
    4ffe:	8f 91       	pop	r24
    5000:	7f 91       	pop	r23
    5002:	6f 91       	pop	r22
    5004:	5f 91       	pop	r21
    5006:	4f 91       	pop	r20
    5008:	3f 91       	pop	r19
    500a:	2f 91       	pop	r18
    500c:	0f 90       	pop	r0
    500e:	0b be       	out	0x3b, r0	; 59
    5010:	0f 90       	pop	r0
    5012:	0f be       	out	0x3f, r0	; 63
    5014:	0f 90       	pop	r0
    5016:	1f 90       	pop	r1
    5018:	18 95       	reti

0000501a <__vector_84>:
    501a:	1f 92       	push	r1
    501c:	0f 92       	push	r0
    501e:	0f b6       	in	r0, 0x3f	; 63
    5020:	0f 92       	push	r0
    5022:	11 24       	eor	r1, r1
    5024:	0b b6       	in	r0, 0x3b	; 59
    5026:	0f 92       	push	r0
    5028:	2f 93       	push	r18
    502a:	3f 93       	push	r19
    502c:	4f 93       	push	r20
    502e:	5f 93       	push	r21
    5030:	6f 93       	push	r22
    5032:	7f 93       	push	r23
    5034:	8f 93       	push	r24
    5036:	9f 93       	push	r25
    5038:	af 93       	push	r26
    503a:	bf 93       	push	r27
    503c:	ef 93       	push	r30
    503e:	ff 93       	push	r31
    5040:	e0 91 21 27 	lds	r30, 0x2721	; 0x802721 <tc_tcd1_err_callback>
    5044:	f0 91 22 27 	lds	r31, 0x2722	; 0x802722 <tc_tcd1_err_callback+0x1>
    5048:	30 97       	sbiw	r30, 0x00	; 0
    504a:	09 f0       	breq	.+2      	; 0x504e <__vector_84+0x34>
    504c:	19 95       	eicall
    504e:	ff 91       	pop	r31
    5050:	ef 91       	pop	r30
    5052:	bf 91       	pop	r27
    5054:	af 91       	pop	r26
    5056:	9f 91       	pop	r25
    5058:	8f 91       	pop	r24
    505a:	7f 91       	pop	r23
    505c:	6f 91       	pop	r22
    505e:	5f 91       	pop	r21
    5060:	4f 91       	pop	r20
    5062:	3f 91       	pop	r19
    5064:	2f 91       	pop	r18
    5066:	0f 90       	pop	r0
    5068:	0b be       	out	0x3b, r0	; 59
    506a:	0f 90       	pop	r0
    506c:	0f be       	out	0x3f, r0	; 63
    506e:	0f 90       	pop	r0
    5070:	1f 90       	pop	r1
    5072:	18 95       	reti

00005074 <__vector_85>:
    5074:	1f 92       	push	r1
    5076:	0f 92       	push	r0
    5078:	0f b6       	in	r0, 0x3f	; 63
    507a:	0f 92       	push	r0
    507c:	11 24       	eor	r1, r1
    507e:	0b b6       	in	r0, 0x3b	; 59
    5080:	0f 92       	push	r0
    5082:	2f 93       	push	r18
    5084:	3f 93       	push	r19
    5086:	4f 93       	push	r20
    5088:	5f 93       	push	r21
    508a:	6f 93       	push	r22
    508c:	7f 93       	push	r23
    508e:	8f 93       	push	r24
    5090:	9f 93       	push	r25
    5092:	af 93       	push	r26
    5094:	bf 93       	push	r27
    5096:	ef 93       	push	r30
    5098:	ff 93       	push	r31
    509a:	e0 91 1f 27 	lds	r30, 0x271F	; 0x80271f <tc_tcd1_cca_callback>
    509e:	f0 91 20 27 	lds	r31, 0x2720	; 0x802720 <tc_tcd1_cca_callback+0x1>
    50a2:	30 97       	sbiw	r30, 0x00	; 0
    50a4:	09 f0       	breq	.+2      	; 0x50a8 <__vector_85+0x34>
    50a6:	19 95       	eicall
    50a8:	ff 91       	pop	r31
    50aa:	ef 91       	pop	r30
    50ac:	bf 91       	pop	r27
    50ae:	af 91       	pop	r26
    50b0:	9f 91       	pop	r25
    50b2:	8f 91       	pop	r24
    50b4:	7f 91       	pop	r23
    50b6:	6f 91       	pop	r22
    50b8:	5f 91       	pop	r21
    50ba:	4f 91       	pop	r20
    50bc:	3f 91       	pop	r19
    50be:	2f 91       	pop	r18
    50c0:	0f 90       	pop	r0
    50c2:	0b be       	out	0x3b, r0	; 59
    50c4:	0f 90       	pop	r0
    50c6:	0f be       	out	0x3f, r0	; 63
    50c8:	0f 90       	pop	r0
    50ca:	1f 90       	pop	r1
    50cc:	18 95       	reti

000050ce <__vector_86>:
    50ce:	1f 92       	push	r1
    50d0:	0f 92       	push	r0
    50d2:	0f b6       	in	r0, 0x3f	; 63
    50d4:	0f 92       	push	r0
    50d6:	11 24       	eor	r1, r1
    50d8:	0b b6       	in	r0, 0x3b	; 59
    50da:	0f 92       	push	r0
    50dc:	2f 93       	push	r18
    50de:	3f 93       	push	r19
    50e0:	4f 93       	push	r20
    50e2:	5f 93       	push	r21
    50e4:	6f 93       	push	r22
    50e6:	7f 93       	push	r23
    50e8:	8f 93       	push	r24
    50ea:	9f 93       	push	r25
    50ec:	af 93       	push	r26
    50ee:	bf 93       	push	r27
    50f0:	ef 93       	push	r30
    50f2:	ff 93       	push	r31
    50f4:	e0 91 1d 27 	lds	r30, 0x271D	; 0x80271d <tc_tcd1_ccb_callback>
    50f8:	f0 91 1e 27 	lds	r31, 0x271E	; 0x80271e <tc_tcd1_ccb_callback+0x1>
    50fc:	30 97       	sbiw	r30, 0x00	; 0
    50fe:	09 f0       	breq	.+2      	; 0x5102 <__vector_86+0x34>
    5100:	19 95       	eicall
    5102:	ff 91       	pop	r31
    5104:	ef 91       	pop	r30
    5106:	bf 91       	pop	r27
    5108:	af 91       	pop	r26
    510a:	9f 91       	pop	r25
    510c:	8f 91       	pop	r24
    510e:	7f 91       	pop	r23
    5110:	6f 91       	pop	r22
    5112:	5f 91       	pop	r21
    5114:	4f 91       	pop	r20
    5116:	3f 91       	pop	r19
    5118:	2f 91       	pop	r18
    511a:	0f 90       	pop	r0
    511c:	0b be       	out	0x3b, r0	; 59
    511e:	0f 90       	pop	r0
    5120:	0f be       	out	0x3f, r0	; 63
    5122:	0f 90       	pop	r0
    5124:	1f 90       	pop	r1
    5126:	18 95       	reti

00005128 <__vector_47>:
    5128:	1f 92       	push	r1
    512a:	0f 92       	push	r0
    512c:	0f b6       	in	r0, 0x3f	; 63
    512e:	0f 92       	push	r0
    5130:	11 24       	eor	r1, r1
    5132:	0b b6       	in	r0, 0x3b	; 59
    5134:	0f 92       	push	r0
    5136:	2f 93       	push	r18
    5138:	3f 93       	push	r19
    513a:	4f 93       	push	r20
    513c:	5f 93       	push	r21
    513e:	6f 93       	push	r22
    5140:	7f 93       	push	r23
    5142:	8f 93       	push	r24
    5144:	9f 93       	push	r25
    5146:	af 93       	push	r26
    5148:	bf 93       	push	r27
    514a:	ef 93       	push	r30
    514c:	ff 93       	push	r31
    514e:	e0 91 1b 27 	lds	r30, 0x271B	; 0x80271b <tc_tce0_ovf_callback>
    5152:	f0 91 1c 27 	lds	r31, 0x271C	; 0x80271c <tc_tce0_ovf_callback+0x1>
    5156:	30 97       	sbiw	r30, 0x00	; 0
    5158:	09 f0       	breq	.+2      	; 0x515c <__vector_47+0x34>
    515a:	19 95       	eicall
    515c:	ff 91       	pop	r31
    515e:	ef 91       	pop	r30
    5160:	bf 91       	pop	r27
    5162:	af 91       	pop	r26
    5164:	9f 91       	pop	r25
    5166:	8f 91       	pop	r24
    5168:	7f 91       	pop	r23
    516a:	6f 91       	pop	r22
    516c:	5f 91       	pop	r21
    516e:	4f 91       	pop	r20
    5170:	3f 91       	pop	r19
    5172:	2f 91       	pop	r18
    5174:	0f 90       	pop	r0
    5176:	0b be       	out	0x3b, r0	; 59
    5178:	0f 90       	pop	r0
    517a:	0f be       	out	0x3f, r0	; 63
    517c:	0f 90       	pop	r0
    517e:	1f 90       	pop	r1
    5180:	18 95       	reti

00005182 <__vector_48>:
    5182:	1f 92       	push	r1
    5184:	0f 92       	push	r0
    5186:	0f b6       	in	r0, 0x3f	; 63
    5188:	0f 92       	push	r0
    518a:	11 24       	eor	r1, r1
    518c:	0b b6       	in	r0, 0x3b	; 59
    518e:	0f 92       	push	r0
    5190:	2f 93       	push	r18
    5192:	3f 93       	push	r19
    5194:	4f 93       	push	r20
    5196:	5f 93       	push	r21
    5198:	6f 93       	push	r22
    519a:	7f 93       	push	r23
    519c:	8f 93       	push	r24
    519e:	9f 93       	push	r25
    51a0:	af 93       	push	r26
    51a2:	bf 93       	push	r27
    51a4:	ef 93       	push	r30
    51a6:	ff 93       	push	r31
    51a8:	e0 91 19 27 	lds	r30, 0x2719	; 0x802719 <tc_tce0_err_callback>
    51ac:	f0 91 1a 27 	lds	r31, 0x271A	; 0x80271a <tc_tce0_err_callback+0x1>
    51b0:	30 97       	sbiw	r30, 0x00	; 0
    51b2:	09 f0       	breq	.+2      	; 0x51b6 <__vector_48+0x34>
    51b4:	19 95       	eicall
    51b6:	ff 91       	pop	r31
    51b8:	ef 91       	pop	r30
    51ba:	bf 91       	pop	r27
    51bc:	af 91       	pop	r26
    51be:	9f 91       	pop	r25
    51c0:	8f 91       	pop	r24
    51c2:	7f 91       	pop	r23
    51c4:	6f 91       	pop	r22
    51c6:	5f 91       	pop	r21
    51c8:	4f 91       	pop	r20
    51ca:	3f 91       	pop	r19
    51cc:	2f 91       	pop	r18
    51ce:	0f 90       	pop	r0
    51d0:	0b be       	out	0x3b, r0	; 59
    51d2:	0f 90       	pop	r0
    51d4:	0f be       	out	0x3f, r0	; 63
    51d6:	0f 90       	pop	r0
    51d8:	1f 90       	pop	r1
    51da:	18 95       	reti

000051dc <__vector_49>:
    51dc:	1f 92       	push	r1
    51de:	0f 92       	push	r0
    51e0:	0f b6       	in	r0, 0x3f	; 63
    51e2:	0f 92       	push	r0
    51e4:	11 24       	eor	r1, r1
    51e6:	0b b6       	in	r0, 0x3b	; 59
    51e8:	0f 92       	push	r0
    51ea:	2f 93       	push	r18
    51ec:	3f 93       	push	r19
    51ee:	4f 93       	push	r20
    51f0:	5f 93       	push	r21
    51f2:	6f 93       	push	r22
    51f4:	7f 93       	push	r23
    51f6:	8f 93       	push	r24
    51f8:	9f 93       	push	r25
    51fa:	af 93       	push	r26
    51fc:	bf 93       	push	r27
    51fe:	ef 93       	push	r30
    5200:	ff 93       	push	r31
    5202:	e0 91 17 27 	lds	r30, 0x2717	; 0x802717 <tc_tce0_cca_callback>
    5206:	f0 91 18 27 	lds	r31, 0x2718	; 0x802718 <tc_tce0_cca_callback+0x1>
    520a:	30 97       	sbiw	r30, 0x00	; 0
    520c:	09 f0       	breq	.+2      	; 0x5210 <__vector_49+0x34>
    520e:	19 95       	eicall
    5210:	ff 91       	pop	r31
    5212:	ef 91       	pop	r30
    5214:	bf 91       	pop	r27
    5216:	af 91       	pop	r26
    5218:	9f 91       	pop	r25
    521a:	8f 91       	pop	r24
    521c:	7f 91       	pop	r23
    521e:	6f 91       	pop	r22
    5220:	5f 91       	pop	r21
    5222:	4f 91       	pop	r20
    5224:	3f 91       	pop	r19
    5226:	2f 91       	pop	r18
    5228:	0f 90       	pop	r0
    522a:	0b be       	out	0x3b, r0	; 59
    522c:	0f 90       	pop	r0
    522e:	0f be       	out	0x3f, r0	; 63
    5230:	0f 90       	pop	r0
    5232:	1f 90       	pop	r1
    5234:	18 95       	reti

00005236 <__vector_50>:
    5236:	1f 92       	push	r1
    5238:	0f 92       	push	r0
    523a:	0f b6       	in	r0, 0x3f	; 63
    523c:	0f 92       	push	r0
    523e:	11 24       	eor	r1, r1
    5240:	0b b6       	in	r0, 0x3b	; 59
    5242:	0f 92       	push	r0
    5244:	2f 93       	push	r18
    5246:	3f 93       	push	r19
    5248:	4f 93       	push	r20
    524a:	5f 93       	push	r21
    524c:	6f 93       	push	r22
    524e:	7f 93       	push	r23
    5250:	8f 93       	push	r24
    5252:	9f 93       	push	r25
    5254:	af 93       	push	r26
    5256:	bf 93       	push	r27
    5258:	ef 93       	push	r30
    525a:	ff 93       	push	r31
    525c:	e0 91 15 27 	lds	r30, 0x2715	; 0x802715 <tc_tce0_ccb_callback>
    5260:	f0 91 16 27 	lds	r31, 0x2716	; 0x802716 <tc_tce0_ccb_callback+0x1>
    5264:	30 97       	sbiw	r30, 0x00	; 0
    5266:	09 f0       	breq	.+2      	; 0x526a <__vector_50+0x34>
    5268:	19 95       	eicall
    526a:	ff 91       	pop	r31
    526c:	ef 91       	pop	r30
    526e:	bf 91       	pop	r27
    5270:	af 91       	pop	r26
    5272:	9f 91       	pop	r25
    5274:	8f 91       	pop	r24
    5276:	7f 91       	pop	r23
    5278:	6f 91       	pop	r22
    527a:	5f 91       	pop	r21
    527c:	4f 91       	pop	r20
    527e:	3f 91       	pop	r19
    5280:	2f 91       	pop	r18
    5282:	0f 90       	pop	r0
    5284:	0b be       	out	0x3b, r0	; 59
    5286:	0f 90       	pop	r0
    5288:	0f be       	out	0x3f, r0	; 63
    528a:	0f 90       	pop	r0
    528c:	1f 90       	pop	r1
    528e:	18 95       	reti

00005290 <__vector_51>:
    5290:	1f 92       	push	r1
    5292:	0f 92       	push	r0
    5294:	0f b6       	in	r0, 0x3f	; 63
    5296:	0f 92       	push	r0
    5298:	11 24       	eor	r1, r1
    529a:	0b b6       	in	r0, 0x3b	; 59
    529c:	0f 92       	push	r0
    529e:	2f 93       	push	r18
    52a0:	3f 93       	push	r19
    52a2:	4f 93       	push	r20
    52a4:	5f 93       	push	r21
    52a6:	6f 93       	push	r22
    52a8:	7f 93       	push	r23
    52aa:	8f 93       	push	r24
    52ac:	9f 93       	push	r25
    52ae:	af 93       	push	r26
    52b0:	bf 93       	push	r27
    52b2:	ef 93       	push	r30
    52b4:	ff 93       	push	r31
    52b6:	e0 91 13 27 	lds	r30, 0x2713	; 0x802713 <tc_tce0_ccc_callback>
    52ba:	f0 91 14 27 	lds	r31, 0x2714	; 0x802714 <tc_tce0_ccc_callback+0x1>
    52be:	30 97       	sbiw	r30, 0x00	; 0
    52c0:	09 f0       	breq	.+2      	; 0x52c4 <__vector_51+0x34>
    52c2:	19 95       	eicall
    52c4:	ff 91       	pop	r31
    52c6:	ef 91       	pop	r30
    52c8:	bf 91       	pop	r27
    52ca:	af 91       	pop	r26
    52cc:	9f 91       	pop	r25
    52ce:	8f 91       	pop	r24
    52d0:	7f 91       	pop	r23
    52d2:	6f 91       	pop	r22
    52d4:	5f 91       	pop	r21
    52d6:	4f 91       	pop	r20
    52d8:	3f 91       	pop	r19
    52da:	2f 91       	pop	r18
    52dc:	0f 90       	pop	r0
    52de:	0b be       	out	0x3b, r0	; 59
    52e0:	0f 90       	pop	r0
    52e2:	0f be       	out	0x3f, r0	; 63
    52e4:	0f 90       	pop	r0
    52e6:	1f 90       	pop	r1
    52e8:	18 95       	reti

000052ea <__vector_52>:
    52ea:	1f 92       	push	r1
    52ec:	0f 92       	push	r0
    52ee:	0f b6       	in	r0, 0x3f	; 63
    52f0:	0f 92       	push	r0
    52f2:	11 24       	eor	r1, r1
    52f4:	0b b6       	in	r0, 0x3b	; 59
    52f6:	0f 92       	push	r0
    52f8:	2f 93       	push	r18
    52fa:	3f 93       	push	r19
    52fc:	4f 93       	push	r20
    52fe:	5f 93       	push	r21
    5300:	6f 93       	push	r22
    5302:	7f 93       	push	r23
    5304:	8f 93       	push	r24
    5306:	9f 93       	push	r25
    5308:	af 93       	push	r26
    530a:	bf 93       	push	r27
    530c:	ef 93       	push	r30
    530e:	ff 93       	push	r31
    5310:	e0 91 11 27 	lds	r30, 0x2711	; 0x802711 <tc_tce0_ccd_callback>
    5314:	f0 91 12 27 	lds	r31, 0x2712	; 0x802712 <tc_tce0_ccd_callback+0x1>
    5318:	30 97       	sbiw	r30, 0x00	; 0
    531a:	09 f0       	breq	.+2      	; 0x531e <__vector_52+0x34>
    531c:	19 95       	eicall
    531e:	ff 91       	pop	r31
    5320:	ef 91       	pop	r30
    5322:	bf 91       	pop	r27
    5324:	af 91       	pop	r26
    5326:	9f 91       	pop	r25
    5328:	8f 91       	pop	r24
    532a:	7f 91       	pop	r23
    532c:	6f 91       	pop	r22
    532e:	5f 91       	pop	r21
    5330:	4f 91       	pop	r20
    5332:	3f 91       	pop	r19
    5334:	2f 91       	pop	r18
    5336:	0f 90       	pop	r0
    5338:	0b be       	out	0x3b, r0	; 59
    533a:	0f 90       	pop	r0
    533c:	0f be       	out	0x3f, r0	; 63
    533e:	0f 90       	pop	r0
    5340:	1f 90       	pop	r1
    5342:	18 95       	reti

00005344 <__vector_53>:
    5344:	1f 92       	push	r1
    5346:	0f 92       	push	r0
    5348:	0f b6       	in	r0, 0x3f	; 63
    534a:	0f 92       	push	r0
    534c:	11 24       	eor	r1, r1
    534e:	0b b6       	in	r0, 0x3b	; 59
    5350:	0f 92       	push	r0
    5352:	2f 93       	push	r18
    5354:	3f 93       	push	r19
    5356:	4f 93       	push	r20
    5358:	5f 93       	push	r21
    535a:	6f 93       	push	r22
    535c:	7f 93       	push	r23
    535e:	8f 93       	push	r24
    5360:	9f 93       	push	r25
    5362:	af 93       	push	r26
    5364:	bf 93       	push	r27
    5366:	ef 93       	push	r30
    5368:	ff 93       	push	r31
    536a:	e0 91 0f 27 	lds	r30, 0x270F	; 0x80270f <tc_tce1_ovf_callback>
    536e:	f0 91 10 27 	lds	r31, 0x2710	; 0x802710 <tc_tce1_ovf_callback+0x1>
    5372:	30 97       	sbiw	r30, 0x00	; 0
    5374:	09 f0       	breq	.+2      	; 0x5378 <__vector_53+0x34>
    5376:	19 95       	eicall
    5378:	ff 91       	pop	r31
    537a:	ef 91       	pop	r30
    537c:	bf 91       	pop	r27
    537e:	af 91       	pop	r26
    5380:	9f 91       	pop	r25
    5382:	8f 91       	pop	r24
    5384:	7f 91       	pop	r23
    5386:	6f 91       	pop	r22
    5388:	5f 91       	pop	r21
    538a:	4f 91       	pop	r20
    538c:	3f 91       	pop	r19
    538e:	2f 91       	pop	r18
    5390:	0f 90       	pop	r0
    5392:	0b be       	out	0x3b, r0	; 59
    5394:	0f 90       	pop	r0
    5396:	0f be       	out	0x3f, r0	; 63
    5398:	0f 90       	pop	r0
    539a:	1f 90       	pop	r1
    539c:	18 95       	reti

0000539e <__vector_54>:
    539e:	1f 92       	push	r1
    53a0:	0f 92       	push	r0
    53a2:	0f b6       	in	r0, 0x3f	; 63
    53a4:	0f 92       	push	r0
    53a6:	11 24       	eor	r1, r1
    53a8:	0b b6       	in	r0, 0x3b	; 59
    53aa:	0f 92       	push	r0
    53ac:	2f 93       	push	r18
    53ae:	3f 93       	push	r19
    53b0:	4f 93       	push	r20
    53b2:	5f 93       	push	r21
    53b4:	6f 93       	push	r22
    53b6:	7f 93       	push	r23
    53b8:	8f 93       	push	r24
    53ba:	9f 93       	push	r25
    53bc:	af 93       	push	r26
    53be:	bf 93       	push	r27
    53c0:	ef 93       	push	r30
    53c2:	ff 93       	push	r31
    53c4:	e0 91 0d 27 	lds	r30, 0x270D	; 0x80270d <tc_tce1_err_callback>
    53c8:	f0 91 0e 27 	lds	r31, 0x270E	; 0x80270e <tc_tce1_err_callback+0x1>
    53cc:	30 97       	sbiw	r30, 0x00	; 0
    53ce:	09 f0       	breq	.+2      	; 0x53d2 <__vector_54+0x34>
    53d0:	19 95       	eicall
    53d2:	ff 91       	pop	r31
    53d4:	ef 91       	pop	r30
    53d6:	bf 91       	pop	r27
    53d8:	af 91       	pop	r26
    53da:	9f 91       	pop	r25
    53dc:	8f 91       	pop	r24
    53de:	7f 91       	pop	r23
    53e0:	6f 91       	pop	r22
    53e2:	5f 91       	pop	r21
    53e4:	4f 91       	pop	r20
    53e6:	3f 91       	pop	r19
    53e8:	2f 91       	pop	r18
    53ea:	0f 90       	pop	r0
    53ec:	0b be       	out	0x3b, r0	; 59
    53ee:	0f 90       	pop	r0
    53f0:	0f be       	out	0x3f, r0	; 63
    53f2:	0f 90       	pop	r0
    53f4:	1f 90       	pop	r1
    53f6:	18 95       	reti

000053f8 <__vector_55>:
    53f8:	1f 92       	push	r1
    53fa:	0f 92       	push	r0
    53fc:	0f b6       	in	r0, 0x3f	; 63
    53fe:	0f 92       	push	r0
    5400:	11 24       	eor	r1, r1
    5402:	0b b6       	in	r0, 0x3b	; 59
    5404:	0f 92       	push	r0
    5406:	2f 93       	push	r18
    5408:	3f 93       	push	r19
    540a:	4f 93       	push	r20
    540c:	5f 93       	push	r21
    540e:	6f 93       	push	r22
    5410:	7f 93       	push	r23
    5412:	8f 93       	push	r24
    5414:	9f 93       	push	r25
    5416:	af 93       	push	r26
    5418:	bf 93       	push	r27
    541a:	ef 93       	push	r30
    541c:	ff 93       	push	r31
    541e:	e0 91 0b 27 	lds	r30, 0x270B	; 0x80270b <tc_tce1_cca_callback>
    5422:	f0 91 0c 27 	lds	r31, 0x270C	; 0x80270c <tc_tce1_cca_callback+0x1>
    5426:	30 97       	sbiw	r30, 0x00	; 0
    5428:	09 f0       	breq	.+2      	; 0x542c <__vector_55+0x34>
    542a:	19 95       	eicall
    542c:	ff 91       	pop	r31
    542e:	ef 91       	pop	r30
    5430:	bf 91       	pop	r27
    5432:	af 91       	pop	r26
    5434:	9f 91       	pop	r25
    5436:	8f 91       	pop	r24
    5438:	7f 91       	pop	r23
    543a:	6f 91       	pop	r22
    543c:	5f 91       	pop	r21
    543e:	4f 91       	pop	r20
    5440:	3f 91       	pop	r19
    5442:	2f 91       	pop	r18
    5444:	0f 90       	pop	r0
    5446:	0b be       	out	0x3b, r0	; 59
    5448:	0f 90       	pop	r0
    544a:	0f be       	out	0x3f, r0	; 63
    544c:	0f 90       	pop	r0
    544e:	1f 90       	pop	r1
    5450:	18 95       	reti

00005452 <__vector_56>:
    5452:	1f 92       	push	r1
    5454:	0f 92       	push	r0
    5456:	0f b6       	in	r0, 0x3f	; 63
    5458:	0f 92       	push	r0
    545a:	11 24       	eor	r1, r1
    545c:	0b b6       	in	r0, 0x3b	; 59
    545e:	0f 92       	push	r0
    5460:	2f 93       	push	r18
    5462:	3f 93       	push	r19
    5464:	4f 93       	push	r20
    5466:	5f 93       	push	r21
    5468:	6f 93       	push	r22
    546a:	7f 93       	push	r23
    546c:	8f 93       	push	r24
    546e:	9f 93       	push	r25
    5470:	af 93       	push	r26
    5472:	bf 93       	push	r27
    5474:	ef 93       	push	r30
    5476:	ff 93       	push	r31
    5478:	e0 91 09 27 	lds	r30, 0x2709	; 0x802709 <tc_tce1_ccb_callback>
    547c:	f0 91 0a 27 	lds	r31, 0x270A	; 0x80270a <tc_tce1_ccb_callback+0x1>
    5480:	30 97       	sbiw	r30, 0x00	; 0
    5482:	09 f0       	breq	.+2      	; 0x5486 <__vector_56+0x34>
    5484:	19 95       	eicall
    5486:	ff 91       	pop	r31
    5488:	ef 91       	pop	r30
    548a:	bf 91       	pop	r27
    548c:	af 91       	pop	r26
    548e:	9f 91       	pop	r25
    5490:	8f 91       	pop	r24
    5492:	7f 91       	pop	r23
    5494:	6f 91       	pop	r22
    5496:	5f 91       	pop	r21
    5498:	4f 91       	pop	r20
    549a:	3f 91       	pop	r19
    549c:	2f 91       	pop	r18
    549e:	0f 90       	pop	r0
    54a0:	0b be       	out	0x3b, r0	; 59
    54a2:	0f 90       	pop	r0
    54a4:	0f be       	out	0x3f, r0	; 63
    54a6:	0f 90       	pop	r0
    54a8:	1f 90       	pop	r1
    54aa:	18 95       	reti

000054ac <__vector_108>:
    54ac:	1f 92       	push	r1
    54ae:	0f 92       	push	r0
    54b0:	0f b6       	in	r0, 0x3f	; 63
    54b2:	0f 92       	push	r0
    54b4:	11 24       	eor	r1, r1
    54b6:	0b b6       	in	r0, 0x3b	; 59
    54b8:	0f 92       	push	r0
    54ba:	2f 93       	push	r18
    54bc:	3f 93       	push	r19
    54be:	4f 93       	push	r20
    54c0:	5f 93       	push	r21
    54c2:	6f 93       	push	r22
    54c4:	7f 93       	push	r23
    54c6:	8f 93       	push	r24
    54c8:	9f 93       	push	r25
    54ca:	af 93       	push	r26
    54cc:	bf 93       	push	r27
    54ce:	ef 93       	push	r30
    54d0:	ff 93       	push	r31
    54d2:	e0 91 07 27 	lds	r30, 0x2707	; 0x802707 <tc_tcf0_ovf_callback>
    54d6:	f0 91 08 27 	lds	r31, 0x2708	; 0x802708 <tc_tcf0_ovf_callback+0x1>
    54da:	30 97       	sbiw	r30, 0x00	; 0
    54dc:	09 f0       	breq	.+2      	; 0x54e0 <__vector_108+0x34>
    54de:	19 95       	eicall
    54e0:	ff 91       	pop	r31
    54e2:	ef 91       	pop	r30
    54e4:	bf 91       	pop	r27
    54e6:	af 91       	pop	r26
    54e8:	9f 91       	pop	r25
    54ea:	8f 91       	pop	r24
    54ec:	7f 91       	pop	r23
    54ee:	6f 91       	pop	r22
    54f0:	5f 91       	pop	r21
    54f2:	4f 91       	pop	r20
    54f4:	3f 91       	pop	r19
    54f6:	2f 91       	pop	r18
    54f8:	0f 90       	pop	r0
    54fa:	0b be       	out	0x3b, r0	; 59
    54fc:	0f 90       	pop	r0
    54fe:	0f be       	out	0x3f, r0	; 63
    5500:	0f 90       	pop	r0
    5502:	1f 90       	pop	r1
    5504:	18 95       	reti

00005506 <__vector_109>:
    5506:	1f 92       	push	r1
    5508:	0f 92       	push	r0
    550a:	0f b6       	in	r0, 0x3f	; 63
    550c:	0f 92       	push	r0
    550e:	11 24       	eor	r1, r1
    5510:	0b b6       	in	r0, 0x3b	; 59
    5512:	0f 92       	push	r0
    5514:	2f 93       	push	r18
    5516:	3f 93       	push	r19
    5518:	4f 93       	push	r20
    551a:	5f 93       	push	r21
    551c:	6f 93       	push	r22
    551e:	7f 93       	push	r23
    5520:	8f 93       	push	r24
    5522:	9f 93       	push	r25
    5524:	af 93       	push	r26
    5526:	bf 93       	push	r27
    5528:	ef 93       	push	r30
    552a:	ff 93       	push	r31
    552c:	e0 91 05 27 	lds	r30, 0x2705	; 0x802705 <tc_tcf0_err_callback>
    5530:	f0 91 06 27 	lds	r31, 0x2706	; 0x802706 <tc_tcf0_err_callback+0x1>
    5534:	30 97       	sbiw	r30, 0x00	; 0
    5536:	09 f0       	breq	.+2      	; 0x553a <__vector_109+0x34>
    5538:	19 95       	eicall
    553a:	ff 91       	pop	r31
    553c:	ef 91       	pop	r30
    553e:	bf 91       	pop	r27
    5540:	af 91       	pop	r26
    5542:	9f 91       	pop	r25
    5544:	8f 91       	pop	r24
    5546:	7f 91       	pop	r23
    5548:	6f 91       	pop	r22
    554a:	5f 91       	pop	r21
    554c:	4f 91       	pop	r20
    554e:	3f 91       	pop	r19
    5550:	2f 91       	pop	r18
    5552:	0f 90       	pop	r0
    5554:	0b be       	out	0x3b, r0	; 59
    5556:	0f 90       	pop	r0
    5558:	0f be       	out	0x3f, r0	; 63
    555a:	0f 90       	pop	r0
    555c:	1f 90       	pop	r1
    555e:	18 95       	reti

00005560 <__vector_110>:
    5560:	1f 92       	push	r1
    5562:	0f 92       	push	r0
    5564:	0f b6       	in	r0, 0x3f	; 63
    5566:	0f 92       	push	r0
    5568:	11 24       	eor	r1, r1
    556a:	0b b6       	in	r0, 0x3b	; 59
    556c:	0f 92       	push	r0
    556e:	2f 93       	push	r18
    5570:	3f 93       	push	r19
    5572:	4f 93       	push	r20
    5574:	5f 93       	push	r21
    5576:	6f 93       	push	r22
    5578:	7f 93       	push	r23
    557a:	8f 93       	push	r24
    557c:	9f 93       	push	r25
    557e:	af 93       	push	r26
    5580:	bf 93       	push	r27
    5582:	ef 93       	push	r30
    5584:	ff 93       	push	r31
    5586:	e0 91 03 27 	lds	r30, 0x2703	; 0x802703 <tc_tcf0_cca_callback>
    558a:	f0 91 04 27 	lds	r31, 0x2704	; 0x802704 <tc_tcf0_cca_callback+0x1>
    558e:	30 97       	sbiw	r30, 0x00	; 0
    5590:	09 f0       	breq	.+2      	; 0x5594 <__vector_110+0x34>
    5592:	19 95       	eicall
    5594:	ff 91       	pop	r31
    5596:	ef 91       	pop	r30
    5598:	bf 91       	pop	r27
    559a:	af 91       	pop	r26
    559c:	9f 91       	pop	r25
    559e:	8f 91       	pop	r24
    55a0:	7f 91       	pop	r23
    55a2:	6f 91       	pop	r22
    55a4:	5f 91       	pop	r21
    55a6:	4f 91       	pop	r20
    55a8:	3f 91       	pop	r19
    55aa:	2f 91       	pop	r18
    55ac:	0f 90       	pop	r0
    55ae:	0b be       	out	0x3b, r0	; 59
    55b0:	0f 90       	pop	r0
    55b2:	0f be       	out	0x3f, r0	; 63
    55b4:	0f 90       	pop	r0
    55b6:	1f 90       	pop	r1
    55b8:	18 95       	reti

000055ba <__vector_111>:
    55ba:	1f 92       	push	r1
    55bc:	0f 92       	push	r0
    55be:	0f b6       	in	r0, 0x3f	; 63
    55c0:	0f 92       	push	r0
    55c2:	11 24       	eor	r1, r1
    55c4:	0b b6       	in	r0, 0x3b	; 59
    55c6:	0f 92       	push	r0
    55c8:	2f 93       	push	r18
    55ca:	3f 93       	push	r19
    55cc:	4f 93       	push	r20
    55ce:	5f 93       	push	r21
    55d0:	6f 93       	push	r22
    55d2:	7f 93       	push	r23
    55d4:	8f 93       	push	r24
    55d6:	9f 93       	push	r25
    55d8:	af 93       	push	r26
    55da:	bf 93       	push	r27
    55dc:	ef 93       	push	r30
    55de:	ff 93       	push	r31
    55e0:	e0 91 01 27 	lds	r30, 0x2701	; 0x802701 <tc_tcf0_ccb_callback>
    55e4:	f0 91 02 27 	lds	r31, 0x2702	; 0x802702 <tc_tcf0_ccb_callback+0x1>
    55e8:	30 97       	sbiw	r30, 0x00	; 0
    55ea:	09 f0       	breq	.+2      	; 0x55ee <__vector_111+0x34>
    55ec:	19 95       	eicall
    55ee:	ff 91       	pop	r31
    55f0:	ef 91       	pop	r30
    55f2:	bf 91       	pop	r27
    55f4:	af 91       	pop	r26
    55f6:	9f 91       	pop	r25
    55f8:	8f 91       	pop	r24
    55fa:	7f 91       	pop	r23
    55fc:	6f 91       	pop	r22
    55fe:	5f 91       	pop	r21
    5600:	4f 91       	pop	r20
    5602:	3f 91       	pop	r19
    5604:	2f 91       	pop	r18
    5606:	0f 90       	pop	r0
    5608:	0b be       	out	0x3b, r0	; 59
    560a:	0f 90       	pop	r0
    560c:	0f be       	out	0x3f, r0	; 63
    560e:	0f 90       	pop	r0
    5610:	1f 90       	pop	r1
    5612:	18 95       	reti

00005614 <__vector_112>:
    5614:	1f 92       	push	r1
    5616:	0f 92       	push	r0
    5618:	0f b6       	in	r0, 0x3f	; 63
    561a:	0f 92       	push	r0
    561c:	11 24       	eor	r1, r1
    561e:	0b b6       	in	r0, 0x3b	; 59
    5620:	0f 92       	push	r0
    5622:	2f 93       	push	r18
    5624:	3f 93       	push	r19
    5626:	4f 93       	push	r20
    5628:	5f 93       	push	r21
    562a:	6f 93       	push	r22
    562c:	7f 93       	push	r23
    562e:	8f 93       	push	r24
    5630:	9f 93       	push	r25
    5632:	af 93       	push	r26
    5634:	bf 93       	push	r27
    5636:	ef 93       	push	r30
    5638:	ff 93       	push	r31
    563a:	e0 91 ff 26 	lds	r30, 0x26FF	; 0x8026ff <tc_tcf0_ccc_callback>
    563e:	f0 91 00 27 	lds	r31, 0x2700	; 0x802700 <tc_tcf0_ccc_callback+0x1>
    5642:	30 97       	sbiw	r30, 0x00	; 0
    5644:	09 f0       	breq	.+2      	; 0x5648 <__vector_112+0x34>
    5646:	19 95       	eicall
    5648:	ff 91       	pop	r31
    564a:	ef 91       	pop	r30
    564c:	bf 91       	pop	r27
    564e:	af 91       	pop	r26
    5650:	9f 91       	pop	r25
    5652:	8f 91       	pop	r24
    5654:	7f 91       	pop	r23
    5656:	6f 91       	pop	r22
    5658:	5f 91       	pop	r21
    565a:	4f 91       	pop	r20
    565c:	3f 91       	pop	r19
    565e:	2f 91       	pop	r18
    5660:	0f 90       	pop	r0
    5662:	0b be       	out	0x3b, r0	; 59
    5664:	0f 90       	pop	r0
    5666:	0f be       	out	0x3f, r0	; 63
    5668:	0f 90       	pop	r0
    566a:	1f 90       	pop	r1
    566c:	18 95       	reti

0000566e <__vector_113>:
    566e:	1f 92       	push	r1
    5670:	0f 92       	push	r0
    5672:	0f b6       	in	r0, 0x3f	; 63
    5674:	0f 92       	push	r0
    5676:	11 24       	eor	r1, r1
    5678:	0b b6       	in	r0, 0x3b	; 59
    567a:	0f 92       	push	r0
    567c:	2f 93       	push	r18
    567e:	3f 93       	push	r19
    5680:	4f 93       	push	r20
    5682:	5f 93       	push	r21
    5684:	6f 93       	push	r22
    5686:	7f 93       	push	r23
    5688:	8f 93       	push	r24
    568a:	9f 93       	push	r25
    568c:	af 93       	push	r26
    568e:	bf 93       	push	r27
    5690:	ef 93       	push	r30
    5692:	ff 93       	push	r31
    5694:	e0 91 fd 26 	lds	r30, 0x26FD	; 0x8026fd <tc_tcf0_ccd_callback>
    5698:	f0 91 fe 26 	lds	r31, 0x26FE	; 0x8026fe <tc_tcf0_ccd_callback+0x1>
    569c:	30 97       	sbiw	r30, 0x00	; 0
    569e:	09 f0       	breq	.+2      	; 0x56a2 <__vector_113+0x34>
    56a0:	19 95       	eicall
    56a2:	ff 91       	pop	r31
    56a4:	ef 91       	pop	r30
    56a6:	bf 91       	pop	r27
    56a8:	af 91       	pop	r26
    56aa:	9f 91       	pop	r25
    56ac:	8f 91       	pop	r24
    56ae:	7f 91       	pop	r23
    56b0:	6f 91       	pop	r22
    56b2:	5f 91       	pop	r21
    56b4:	4f 91       	pop	r20
    56b6:	3f 91       	pop	r19
    56b8:	2f 91       	pop	r18
    56ba:	0f 90       	pop	r0
    56bc:	0b be       	out	0x3b, r0	; 59
    56be:	0f 90       	pop	r0
    56c0:	0f be       	out	0x3f, r0	; 63
    56c2:	0f 90       	pop	r0
    56c4:	1f 90       	pop	r1
    56c6:	18 95       	reti

000056c8 <tc_enable>:
    56c8:	1f 93       	push	r17
    56ca:	cf 93       	push	r28
    56cc:	df 93       	push	r29
    56ce:	1f 92       	push	r1
    56d0:	1f 92       	push	r1
    56d2:	cd b7       	in	r28, 0x3d	; 61
    56d4:	de b7       	in	r29, 0x3e	; 62
    56d6:	2f b7       	in	r18, 0x3f	; 63
    56d8:	2a 83       	std	Y+2, r18	; 0x02
    56da:	f8 94       	cli
    56dc:	1a 81       	ldd	r17, Y+2	; 0x02
    56de:	28 2f       	mov	r18, r24
    56e0:	39 2f       	mov	r19, r25
    56e2:	21 15       	cp	r18, r1
    56e4:	88 e0       	ldi	r24, 0x08	; 8
    56e6:	38 07       	cpc	r19, r24
    56e8:	49 f4       	brne	.+18     	; 0x56fc <tc_enable+0x34>
    56ea:	61 e0       	ldi	r22, 0x01	; 1
    56ec:	83 e0       	ldi	r24, 0x03	; 3
    56ee:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    56f2:	64 e0       	ldi	r22, 0x04	; 4
    56f4:	83 e0       	ldi	r24, 0x03	; 3
    56f6:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    56fa:	4f c0       	rjmp	.+158    	; 0x579a <tc_enable+0xd2>
    56fc:	20 34       	cpi	r18, 0x40	; 64
    56fe:	88 e0       	ldi	r24, 0x08	; 8
    5700:	38 07       	cpc	r19, r24
    5702:	49 f4       	brne	.+18     	; 0x5716 <tc_enable+0x4e>
    5704:	62 e0       	ldi	r22, 0x02	; 2
    5706:	83 e0       	ldi	r24, 0x03	; 3
    5708:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    570c:	64 e0       	ldi	r22, 0x04	; 4
    570e:	83 e0       	ldi	r24, 0x03	; 3
    5710:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    5714:	42 c0       	rjmp	.+132    	; 0x579a <tc_enable+0xd2>
    5716:	21 15       	cp	r18, r1
    5718:	89 e0       	ldi	r24, 0x09	; 9
    571a:	38 07       	cpc	r19, r24
    571c:	49 f4       	brne	.+18     	; 0x5730 <tc_enable+0x68>
    571e:	61 e0       	ldi	r22, 0x01	; 1
    5720:	84 e0       	ldi	r24, 0x04	; 4
    5722:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    5726:	64 e0       	ldi	r22, 0x04	; 4
    5728:	84 e0       	ldi	r24, 0x04	; 4
    572a:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    572e:	35 c0       	rjmp	.+106    	; 0x579a <tc_enable+0xd2>
    5730:	20 34       	cpi	r18, 0x40	; 64
    5732:	89 e0       	ldi	r24, 0x09	; 9
    5734:	38 07       	cpc	r19, r24
    5736:	49 f4       	brne	.+18     	; 0x574a <tc_enable+0x82>
    5738:	62 e0       	ldi	r22, 0x02	; 2
    573a:	84 e0       	ldi	r24, 0x04	; 4
    573c:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    5740:	64 e0       	ldi	r22, 0x04	; 4
    5742:	84 e0       	ldi	r24, 0x04	; 4
    5744:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    5748:	28 c0       	rjmp	.+80     	; 0x579a <tc_enable+0xd2>
    574a:	21 15       	cp	r18, r1
    574c:	8a e0       	ldi	r24, 0x0A	; 10
    574e:	38 07       	cpc	r19, r24
    5750:	49 f4       	brne	.+18     	; 0x5764 <tc_enable+0x9c>
    5752:	61 e0       	ldi	r22, 0x01	; 1
    5754:	85 e0       	ldi	r24, 0x05	; 5
    5756:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    575a:	64 e0       	ldi	r22, 0x04	; 4
    575c:	85 e0       	ldi	r24, 0x05	; 5
    575e:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    5762:	1b c0       	rjmp	.+54     	; 0x579a <tc_enable+0xd2>
    5764:	20 34       	cpi	r18, 0x40	; 64
    5766:	8a e0       	ldi	r24, 0x0A	; 10
    5768:	38 07       	cpc	r19, r24
    576a:	49 f4       	brne	.+18     	; 0x577e <tc_enable+0xb6>
    576c:	62 e0       	ldi	r22, 0x02	; 2
    576e:	85 e0       	ldi	r24, 0x05	; 5
    5770:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    5774:	64 e0       	ldi	r22, 0x04	; 4
    5776:	85 e0       	ldi	r24, 0x05	; 5
    5778:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    577c:	0e c0       	rjmp	.+28     	; 0x579a <tc_enable+0xd2>
    577e:	21 15       	cp	r18, r1
    5780:	3b 40       	sbci	r19, 0x0B	; 11
    5782:	49 f4       	brne	.+18     	; 0x5796 <tc_enable+0xce>
    5784:	61 e0       	ldi	r22, 0x01	; 1
    5786:	86 e0       	ldi	r24, 0x06	; 6
    5788:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    578c:	64 e0       	ldi	r22, 0x04	; 4
    578e:	86 e0       	ldi	r24, 0x06	; 6
    5790:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <sysclk_enable_module>
    5794:	02 c0       	rjmp	.+4      	; 0x579a <tc_enable+0xd2>
    5796:	1f bf       	out	0x3f, r17	; 63
    5798:	10 c0       	rjmp	.+32     	; 0x57ba <tc_enable+0xf2>
    579a:	80 91 10 2b 	lds	r24, 0x2B10	; 0x802b10 <sleepmgr_locks+0x1>
    579e:	8f 3f       	cpi	r24, 0xFF	; 255
    57a0:	09 f4       	brne	.+2      	; 0x57a4 <tc_enable+0xdc>
    57a2:	ff cf       	rjmp	.-2      	; 0x57a2 <tc_enable+0xda>
    57a4:	8f b7       	in	r24, 0x3f	; 63
    57a6:	89 83       	std	Y+1, r24	; 0x01
    57a8:	f8 94       	cli
    57aa:	99 81       	ldd	r25, Y+1	; 0x01
    57ac:	ef e0       	ldi	r30, 0x0F	; 15
    57ae:	fb e2       	ldi	r31, 0x2B	; 43
    57b0:	81 81       	ldd	r24, Z+1	; 0x01
    57b2:	8f 5f       	subi	r24, 0xFF	; 255
    57b4:	81 83       	std	Z+1, r24	; 0x01
    57b6:	9f bf       	out	0x3f, r25	; 63
    57b8:	1f bf       	out	0x3f, r17	; 63
    57ba:	0f 90       	pop	r0
    57bc:	0f 90       	pop	r0
    57be:	df 91       	pop	r29
    57c0:	cf 91       	pop	r28
    57c2:	1f 91       	pop	r17
    57c4:	08 95       	ret

000057c6 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    57c6:	81 15       	cp	r24, r1
    57c8:	28 e0       	ldi	r18, 0x08	; 8
    57ca:	92 07       	cpc	r25, r18
    57cc:	29 f4       	brne	.+10     	; 0x57d8 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    57ce:	60 93 43 27 	sts	0x2743, r22	; 0x802743 <tc_tcc0_ovf_callback>
    57d2:	70 93 44 27 	sts	0x2744, r23	; 0x802744 <tc_tcc0_ovf_callback+0x1>
    57d6:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    57d8:	80 34       	cpi	r24, 0x40	; 64
    57da:	28 e0       	ldi	r18, 0x08	; 8
    57dc:	92 07       	cpc	r25, r18
    57de:	29 f4       	brne	.+10     	; 0x57ea <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    57e0:	60 93 37 27 	sts	0x2737, r22	; 0x802737 <tc_tcc1_ovf_callback>
    57e4:	70 93 38 27 	sts	0x2738, r23	; 0x802738 <tc_tcc1_ovf_callback+0x1>
    57e8:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    57ea:	81 15       	cp	r24, r1
    57ec:	29 e0       	ldi	r18, 0x09	; 9
    57ee:	92 07       	cpc	r25, r18
    57f0:	29 f4       	brne	.+10     	; 0x57fc <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    57f2:	60 93 2f 27 	sts	0x272F, r22	; 0x80272f <tc_tcd0_ovf_callback>
    57f6:	70 93 30 27 	sts	0x2730, r23	; 0x802730 <tc_tcd0_ovf_callback+0x1>
    57fa:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    57fc:	80 34       	cpi	r24, 0x40	; 64
    57fe:	29 e0       	ldi	r18, 0x09	; 9
    5800:	92 07       	cpc	r25, r18
    5802:	29 f4       	brne	.+10     	; 0x580e <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    5804:	60 93 23 27 	sts	0x2723, r22	; 0x802723 <tc_tcd1_ovf_callback>
    5808:	70 93 24 27 	sts	0x2724, r23	; 0x802724 <tc_tcd1_ovf_callback+0x1>
    580c:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    580e:	81 15       	cp	r24, r1
    5810:	2a e0       	ldi	r18, 0x0A	; 10
    5812:	92 07       	cpc	r25, r18
    5814:	29 f4       	brne	.+10     	; 0x5820 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    5816:	60 93 1b 27 	sts	0x271B, r22	; 0x80271b <tc_tce0_ovf_callback>
    581a:	70 93 1c 27 	sts	0x271C, r23	; 0x80271c <tc_tce0_ovf_callback+0x1>
    581e:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    5820:	80 34       	cpi	r24, 0x40	; 64
    5822:	2a e0       	ldi	r18, 0x0A	; 10
    5824:	92 07       	cpc	r25, r18
    5826:	29 f4       	brne	.+10     	; 0x5832 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    5828:	60 93 0f 27 	sts	0x270F, r22	; 0x80270f <tc_tce1_ovf_callback>
    582c:	70 93 10 27 	sts	0x2710, r23	; 0x802710 <tc_tce1_ovf_callback+0x1>
    5830:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    5832:	81 15       	cp	r24, r1
    5834:	9b 40       	sbci	r25, 0x0B	; 11
    5836:	21 f4       	brne	.+8      	; 0x5840 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    5838:	60 93 07 27 	sts	0x2707, r22	; 0x802707 <tc_tcf0_ovf_callback>
    583c:	70 93 08 27 	sts	0x2708, r23	; 0x802708 <tc_tcf0_ovf_callback+0x1>
    5840:	08 95       	ret

00005842 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    5842:	cf 93       	push	r28
    5844:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    5846:	e0 91 45 27 	lds	r30, 0x2745	; 0x802745 <transfer>
    584a:	f0 91 46 27 	lds	r31, 0x2746	; 0x802746 <transfer+0x1>
    584e:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    5850:	83 ff       	sbrs	r24, 3
    5852:	08 c0       	rjmp	.+16     	; 0x5864 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    5854:	88 60       	ori	r24, 0x08	; 8
    5856:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    5858:	83 e0       	ldi	r24, 0x03	; 3
    585a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    585c:	86 ef       	ldi	r24, 0xF6	; 246
    585e:	80 93 4f 27 	sts	0x274F, r24	; 0x80274f <transfer+0xa>
    5862:	83 c0       	rjmp	.+262    	; 0x596a <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    5864:	98 2f       	mov	r25, r24
    5866:	94 71       	andi	r25, 0x14	; 20
    5868:	31 f0       	breq	.+12     	; 0x5876 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    586a:	83 e0       	ldi	r24, 0x03	; 3
    586c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    586e:	8f ef       	ldi	r24, 0xFF	; 255
    5870:	80 93 4f 27 	sts	0x274F, r24	; 0x80274f <transfer+0xa>
    5874:	7a c0       	rjmp	.+244    	; 0x596a <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    5876:	86 ff       	sbrs	r24, 6
    5878:	43 c0       	rjmp	.+134    	; 0x5900 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    587a:	c5 e4       	ldi	r28, 0x45	; 69
    587c:	d7 e2       	ldi	r29, 0x27	; 39
    587e:	aa 81       	ldd	r26, Y+2	; 0x02
    5880:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    5882:	8c 81       	ldd	r24, Y+4	; 0x04
    5884:	9d 81       	ldd	r25, Y+5	; 0x05
    5886:	14 96       	adiw	r26, 0x04	; 4
    5888:	2d 91       	ld	r18, X+
    588a:	3c 91       	ld	r19, X
    588c:	15 97       	sbiw	r26, 0x05	; 5
    588e:	82 17       	cp	r24, r18
    5890:	93 07       	cpc	r25, r19
    5892:	6c f4       	brge	.+26     	; 0x58ae <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    5894:	9c 01       	movw	r18, r24
    5896:	2f 5f       	subi	r18, 0xFF	; 255
    5898:	3f 4f       	sbci	r19, 0xFF	; 255
    589a:	20 93 49 27 	sts	0x2749, r18	; 0x802749 <transfer+0x4>
    589e:	30 93 4a 27 	sts	0x274A, r19	; 0x80274a <transfer+0x5>
    58a2:	a8 0f       	add	r26, r24
    58a4:	b9 1f       	adc	r27, r25
    58a6:	11 96       	adiw	r26, 0x01	; 1
    58a8:	8c 91       	ld	r24, X
    58aa:	87 83       	std	Z+7, r24	; 0x07
    58ac:	5e c0       	rjmp	.+188    	; 0x596a <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    58ae:	80 91 4b 27 	lds	r24, 0x274B	; 0x80274b <transfer+0x6>
    58b2:	90 91 4c 27 	lds	r25, 0x274C	; 0x80274c <transfer+0x7>
    58b6:	18 96       	adiw	r26, 0x08	; 8
    58b8:	2d 91       	ld	r18, X+
    58ba:	3c 91       	ld	r19, X
    58bc:	19 97       	sbiw	r26, 0x09	; 9
    58be:	82 17       	cp	r24, r18
    58c0:	93 07       	cpc	r25, r19
    58c2:	c8 f4       	brcc	.+50     	; 0x58f6 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    58c4:	20 91 4d 27 	lds	r18, 0x274D	; 0x80274d <transfer+0x8>
    58c8:	22 23       	and	r18, r18
    58ca:	21 f0       	breq	.+8      	; 0x58d4 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    58cc:	86 81       	ldd	r24, Z+6	; 0x06
    58ce:	81 60       	ori	r24, 0x01	; 1
    58d0:	86 83       	std	Z+6, r24	; 0x06
    58d2:	4b c0       	rjmp	.+150    	; 0x596a <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    58d4:	16 96       	adiw	r26, 0x06	; 6
    58d6:	2d 91       	ld	r18, X+
    58d8:	3c 91       	ld	r19, X
    58da:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    58dc:	ac 01       	movw	r20, r24
    58de:	4f 5f       	subi	r20, 0xFF	; 255
    58e0:	5f 4f       	sbci	r21, 0xFF	; 255
    58e2:	40 93 4b 27 	sts	0x274B, r20	; 0x80274b <transfer+0x6>
    58e6:	50 93 4c 27 	sts	0x274C, r21	; 0x80274c <transfer+0x7>
    58ea:	d9 01       	movw	r26, r18
    58ec:	a8 0f       	add	r26, r24
    58ee:	b9 1f       	adc	r27, r25
    58f0:	8c 91       	ld	r24, X
    58f2:	87 83       	std	Z+7, r24	; 0x07
    58f4:	3a c0       	rjmp	.+116    	; 0x596a <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    58f6:	83 e0       	ldi	r24, 0x03	; 3
    58f8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    58fa:	10 92 4f 27 	sts	0x274F, r1	; 0x80274f <transfer+0xa>
    58fe:	35 c0       	rjmp	.+106    	; 0x596a <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    5900:	88 23       	and	r24, r24
    5902:	84 f5       	brge	.+96     	; 0x5964 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    5904:	a5 e4       	ldi	r26, 0x45	; 69
    5906:	b7 e2       	ldi	r27, 0x27	; 39
    5908:	12 96       	adiw	r26, 0x02	; 2
    590a:	cd 91       	ld	r28, X+
    590c:	dc 91       	ld	r29, X
    590e:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    5910:	16 96       	adiw	r26, 0x06	; 6
    5912:	8d 91       	ld	r24, X+
    5914:	9c 91       	ld	r25, X
    5916:	17 97       	sbiw	r26, 0x07	; 7
    5918:	28 85       	ldd	r18, Y+8	; 0x08
    591a:	39 85       	ldd	r19, Y+9	; 0x09
    591c:	82 17       	cp	r24, r18
    591e:	93 07       	cpc	r25, r19
    5920:	d8 f4       	brcc	.+54     	; 0x5958 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    5922:	6e 81       	ldd	r22, Y+6	; 0x06
    5924:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    5926:	9c 01       	movw	r18, r24
    5928:	2f 5f       	subi	r18, 0xFF	; 255
    592a:	3f 4f       	sbci	r19, 0xFF	; 255
    592c:	20 93 4b 27 	sts	0x274B, r18	; 0x80274b <transfer+0x6>
    5930:	30 93 4c 27 	sts	0x274C, r19	; 0x80274c <transfer+0x7>
    5934:	47 81       	ldd	r20, Z+7	; 0x07
    5936:	db 01       	movw	r26, r22
    5938:	a8 0f       	add	r26, r24
    593a:	b9 1f       	adc	r27, r25
    593c:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    593e:	88 85       	ldd	r24, Y+8	; 0x08
    5940:	99 85       	ldd	r25, Y+9	; 0x09
    5942:	28 17       	cp	r18, r24
    5944:	39 07       	cpc	r19, r25
    5946:	18 f4       	brcc	.+6      	; 0x594e <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    5948:	82 e0       	ldi	r24, 0x02	; 2
    594a:	83 83       	std	Z+3, r24	; 0x03
    594c:	0e c0       	rjmp	.+28     	; 0x596a <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    594e:	87 e0       	ldi	r24, 0x07	; 7
    5950:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    5952:	10 92 4f 27 	sts	0x274F, r1	; 0x80274f <transfer+0xa>
    5956:	09 c0       	rjmp	.+18     	; 0x596a <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5958:	83 e0       	ldi	r24, 0x03	; 3
    595a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    595c:	89 ef       	ldi	r24, 0xF9	; 249
    595e:	80 93 4f 27 	sts	0x274F, r24	; 0x80274f <transfer+0xa>
    5962:	03 c0       	rjmp	.+6      	; 0x596a <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    5964:	8b ef       	ldi	r24, 0xFB	; 251
    5966:	80 93 4f 27 	sts	0x274F, r24	; 0x80274f <transfer+0xa>
	}
}
    596a:	df 91       	pop	r29
    596c:	cf 91       	pop	r28
    596e:	08 95       	ret

00005970 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    5970:	1f 92       	push	r1
    5972:	0f 92       	push	r0
    5974:	0f b6       	in	r0, 0x3f	; 63
    5976:	0f 92       	push	r0
    5978:	11 24       	eor	r1, r1
    597a:	0b b6       	in	r0, 0x3b	; 59
    597c:	0f 92       	push	r0
    597e:	2f 93       	push	r18
    5980:	3f 93       	push	r19
    5982:	4f 93       	push	r20
    5984:	5f 93       	push	r21
    5986:	6f 93       	push	r22
    5988:	7f 93       	push	r23
    598a:	8f 93       	push	r24
    598c:	9f 93       	push	r25
    598e:	af 93       	push	r26
    5990:	bf 93       	push	r27
    5992:	ef 93       	push	r30
    5994:	ff 93       	push	r31
    5996:	55 df       	rcall	.-342    	; 0x5842 <twim_interrupt_handler>
    5998:	ff 91       	pop	r31
    599a:	ef 91       	pop	r30
    599c:	bf 91       	pop	r27
    599e:	af 91       	pop	r26
    59a0:	9f 91       	pop	r25
    59a2:	8f 91       	pop	r24
    59a4:	7f 91       	pop	r23
    59a6:	6f 91       	pop	r22
    59a8:	5f 91       	pop	r21
    59aa:	4f 91       	pop	r20
    59ac:	3f 91       	pop	r19
    59ae:	2f 91       	pop	r18
    59b0:	0f 90       	pop	r0
    59b2:	0b be       	out	0x3b, r0	; 59
    59b4:	0f 90       	pop	r0
    59b6:	0f be       	out	0x3f, r0	; 63
    59b8:	0f 90       	pop	r0
    59ba:	1f 90       	pop	r1
    59bc:	18 95       	reti

000059be <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    59be:	1f 92       	push	r1
    59c0:	0f 92       	push	r0
    59c2:	0f b6       	in	r0, 0x3f	; 63
    59c4:	0f 92       	push	r0
    59c6:	11 24       	eor	r1, r1
    59c8:	0b b6       	in	r0, 0x3b	; 59
    59ca:	0f 92       	push	r0
    59cc:	2f 93       	push	r18
    59ce:	3f 93       	push	r19
    59d0:	4f 93       	push	r20
    59d2:	5f 93       	push	r21
    59d4:	6f 93       	push	r22
    59d6:	7f 93       	push	r23
    59d8:	8f 93       	push	r24
    59da:	9f 93       	push	r25
    59dc:	af 93       	push	r26
    59de:	bf 93       	push	r27
    59e0:	ef 93       	push	r30
    59e2:	ff 93       	push	r31
    59e4:	2e df       	rcall	.-420    	; 0x5842 <twim_interrupt_handler>
    59e6:	ff 91       	pop	r31
    59e8:	ef 91       	pop	r30
    59ea:	bf 91       	pop	r27
    59ec:	af 91       	pop	r26
    59ee:	9f 91       	pop	r25
    59f0:	8f 91       	pop	r24
    59f2:	7f 91       	pop	r23
    59f4:	6f 91       	pop	r22
    59f6:	5f 91       	pop	r21
    59f8:	4f 91       	pop	r20
    59fa:	3f 91       	pop	r19
    59fc:	2f 91       	pop	r18
    59fe:	0f 90       	pop	r0
    5a00:	0b be       	out	0x3b, r0	; 59
    5a02:	0f 90       	pop	r0
    5a04:	0f be       	out	0x3f, r0	; 63
    5a06:	0f 90       	pop	r0
    5a08:	1f 90       	pop	r1
    5a0a:	18 95       	reti

00005a0c <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    5a0c:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    5a0e:	db 01       	movw	r26, r22
    5a10:	14 96       	adiw	r26, 0x04	; 4
    5a12:	8c 91       	ld	r24, X
    5a14:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    5a16:	88 eb       	ldi	r24, 0xB8	; 184
    5a18:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    5a1a:	81 e0       	ldi	r24, 0x01	; 1
    5a1c:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    5a1e:	e5 e4       	ldi	r30, 0x45	; 69
    5a20:	f7 e2       	ldi	r31, 0x27	; 39
    5a22:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    5a24:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    5a26:	e0 ea       	ldi	r30, 0xA0	; 160
    5a28:	f0 e0       	ldi	r31, 0x00	; 0
    5a2a:	82 81       	ldd	r24, Z+2	; 0x02
    5a2c:	82 60       	ori	r24, 0x02	; 2
    5a2e:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    5a30:	78 94       	sei

	return STATUS_OK;
}
    5a32:	80 e0       	ldi	r24, 0x00	; 0
    5a34:	08 95       	ret

00005a36 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    5a36:	cf 93       	push	r28
    5a38:	df 93       	push	r29
    5a3a:	1f 92       	push	r1
    5a3c:	cd b7       	in	r28, 0x3d	; 61
    5a3e:	de b7       	in	r29, 0x3e	; 62
    5a40:	9c 01       	movw	r18, r24
    5a42:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    5a44:	89 2b       	or	r24, r25
    5a46:	09 f4       	brne	.+2      	; 0x5a4a <twi_master_transfer+0x14>
    5a48:	51 c0       	rjmp	.+162    	; 0x5aec <twi_master_transfer+0xb6>
    5a4a:	30 97       	sbiw	r30, 0x00	; 0
    5a4c:	09 f4       	brne	.+2      	; 0x5a50 <twi_master_transfer+0x1a>
    5a4e:	50 c0       	rjmp	.+160    	; 0x5af0 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    5a50:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    5a52:	80 91 4e 27 	lds	r24, 0x274E	; 0x80274e <transfer+0x9>
    5a56:	88 23       	and	r24, r24
    5a58:	19 f0       	breq	.+6      	; 0x5a60 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    5a5a:	99 23       	and	r25, r25
    5a5c:	f1 f3       	breq	.-4      	; 0x5a5a <twi_master_transfer+0x24>
    5a5e:	4a c0       	rjmp	.+148    	; 0x5af4 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5a60:	8f b7       	in	r24, 0x3f	; 63
    5a62:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5a64:	f8 94       	cli
	return flags;
    5a66:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    5a68:	a5 e4       	ldi	r26, 0x45	; 69
    5a6a:	b7 e2       	ldi	r27, 0x27	; 39
    5a6c:	91 e0       	ldi	r25, 0x01	; 1
    5a6e:	19 96       	adiw	r26, 0x09	; 9
    5a70:	9c 93       	st	X, r25
    5a72:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    5a74:	90 e8       	ldi	r25, 0x80	; 128
    5a76:	1a 96       	adiw	r26, 0x0a	; 10
    5a78:	9c 93       	st	X, r25
    5a7a:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5a7c:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    5a7e:	2d 93       	st	X+, r18
    5a80:	3c 93       	st	X, r19
    5a82:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    5a84:	12 96       	adiw	r26, 0x02	; 2
    5a86:	6d 93       	st	X+, r22
    5a88:	7c 93       	st	X, r23
    5a8a:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    5a8c:	14 96       	adiw	r26, 0x04	; 4
    5a8e:	1d 92       	st	X+, r1
    5a90:	1c 92       	st	X, r1
    5a92:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    5a94:	16 96       	adiw	r26, 0x06	; 6
    5a96:	1d 92       	st	X+, r1
    5a98:	1c 92       	st	X, r1
    5a9a:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    5a9c:	18 96       	adiw	r26, 0x08	; 8
    5a9e:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    5aa0:	80 81       	ld	r24, Z
    5aa2:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    5aa4:	64 81       	ldd	r22, Z+4	; 0x04
    5aa6:	75 81       	ldd	r23, Z+5	; 0x05
    5aa8:	67 2b       	or	r22, r23
    5aaa:	11 f4       	brne	.+4      	; 0x5ab0 <twi_master_transfer+0x7a>
    5aac:	41 11       	cpse	r20, r1
    5aae:	03 c0       	rjmp	.+6      	; 0x5ab6 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    5ab0:	f9 01       	movw	r30, r18
    5ab2:	86 83       	std	Z+6, r24	; 0x06
    5ab4:	03 c0       	rjmp	.+6      	; 0x5abc <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    5ab6:	81 60       	ori	r24, 0x01	; 1
    5ab8:	f9 01       	movw	r30, r18
    5aba:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    5abc:	e5 e4       	ldi	r30, 0x45	; 69
    5abe:	f7 e2       	ldi	r31, 0x27	; 39
    5ac0:	92 85       	ldd	r25, Z+10	; 0x0a
    5ac2:	90 38       	cpi	r25, 0x80	; 128
    5ac4:	e9 f3       	breq	.-6      	; 0x5ac0 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    5ac6:	f9 01       	movw	r30, r18
    5ac8:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    5aca:	83 70       	andi	r24, 0x03	; 3
    5acc:	81 30       	cpi	r24, 0x01	; 1
    5ace:	49 f0       	breq	.+18     	; 0x5ae2 <twi_master_transfer+0xac>
    5ad0:	a5 e4       	ldi	r26, 0x45	; 69
    5ad2:	b7 e2       	ldi	r27, 0x27	; 39
    5ad4:	ed 91       	ld	r30, X+
    5ad6:	fc 91       	ld	r31, X
    5ad8:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    5ada:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    5adc:	83 70       	andi	r24, 0x03	; 3
    5ade:	81 30       	cpi	r24, 0x01	; 1
    5ae0:	c9 f7       	brne	.-14     	; 0x5ad4 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    5ae2:	e5 e4       	ldi	r30, 0x45	; 69
    5ae4:	f7 e2       	ldi	r31, 0x27	; 39
    5ae6:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    5ae8:	11 86       	std	Z+9, r1	; 0x09
    5aea:	05 c0       	rjmp	.+10     	; 0x5af6 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    5aec:	88 ef       	ldi	r24, 0xF8	; 248
    5aee:	03 c0       	rjmp	.+6      	; 0x5af6 <twi_master_transfer+0xc0>
    5af0:	88 ef       	ldi	r24, 0xF8	; 248
    5af2:	01 c0       	rjmp	.+2      	; 0x5af6 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    5af4:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    5af6:	0f 90       	pop	r0
    5af8:	df 91       	pop	r29
    5afa:	cf 91       	pop	r28
    5afc:	08 95       	ret

00005afe <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    5afe:	cf 93       	push	r28
    5b00:	df 93       	push	r29
    5b02:	1f 92       	push	r1
    5b04:	1f 92       	push	r1
    5b06:	cd b7       	in	r28, 0x3d	; 61
    5b08:	de b7       	in	r29, 0x3e	; 62
    5b0a:	81 11       	cpse	r24, r1
    5b0c:	26 c0       	rjmp	.+76     	; 0x5b5a <udd_sleep_mode+0x5c>
    5b0e:	90 91 7c 28 	lds	r25, 0x287C	; 0x80287c <udd_b_idle>
    5b12:	99 23       	and	r25, r25
    5b14:	f9 f0       	breq	.+62     	; 0x5b54 <udd_sleep_mode+0x56>
    5b16:	90 91 10 2b 	lds	r25, 0x2B10	; 0x802b10 <sleepmgr_locks+0x1>
    5b1a:	91 11       	cpse	r25, r1
    5b1c:	01 c0       	rjmp	.+2      	; 0x5b20 <udd_sleep_mode+0x22>
    5b1e:	ff cf       	rjmp	.-2      	; 0x5b1e <udd_sleep_mode+0x20>
    5b20:	9f b7       	in	r25, 0x3f	; 63
    5b22:	9a 83       	std	Y+2, r25	; 0x02
    5b24:	f8 94       	cli
    5b26:	2a 81       	ldd	r18, Y+2	; 0x02
    5b28:	ef e0       	ldi	r30, 0x0F	; 15
    5b2a:	fb e2       	ldi	r31, 0x2B	; 43
    5b2c:	91 81       	ldd	r25, Z+1	; 0x01
    5b2e:	91 50       	subi	r25, 0x01	; 1
    5b30:	91 83       	std	Z+1, r25	; 0x01
    5b32:	2f bf       	out	0x3f, r18	; 63
    5b34:	0f c0       	rjmp	.+30     	; 0x5b54 <udd_sleep_mode+0x56>
    5b36:	90 91 10 2b 	lds	r25, 0x2B10	; 0x802b10 <sleepmgr_locks+0x1>
    5b3a:	9f 3f       	cpi	r25, 0xFF	; 255
    5b3c:	09 f4       	brne	.+2      	; 0x5b40 <udd_sleep_mode+0x42>
    5b3e:	ff cf       	rjmp	.-2      	; 0x5b3e <udd_sleep_mode+0x40>
    5b40:	9f b7       	in	r25, 0x3f	; 63
    5b42:	99 83       	std	Y+1, r25	; 0x01
    5b44:	f8 94       	cli
    5b46:	29 81       	ldd	r18, Y+1	; 0x01
    5b48:	ef e0       	ldi	r30, 0x0F	; 15
    5b4a:	fb e2       	ldi	r31, 0x2B	; 43
    5b4c:	91 81       	ldd	r25, Z+1	; 0x01
    5b4e:	9f 5f       	subi	r25, 0xFF	; 255
    5b50:	91 83       	std	Z+1, r25	; 0x01
    5b52:	2f bf       	out	0x3f, r18	; 63
    5b54:	80 93 7c 28 	sts	0x287C, r24	; 0x80287c <udd_b_idle>
    5b58:	05 c0       	rjmp	.+10     	; 0x5b64 <udd_sleep_mode+0x66>
    5b5a:	90 91 7c 28 	lds	r25, 0x287C	; 0x80287c <udd_b_idle>
    5b5e:	99 23       	and	r25, r25
    5b60:	51 f3       	breq	.-44     	; 0x5b36 <udd_sleep_mode+0x38>
    5b62:	f8 cf       	rjmp	.-16     	; 0x5b54 <udd_sleep_mode+0x56>
    5b64:	0f 90       	pop	r0
    5b66:	0f 90       	pop	r0
    5b68:	df 91       	pop	r29
    5b6a:	cf 91       	pop	r28
    5b6c:	08 95       	ret

00005b6e <udd_ctrl_init>:
    5b6e:	0f 93       	push	r16
    5b70:	e8 ec       	ldi	r30, 0xC8	; 200
    5b72:	f4 e0       	ldi	r31, 0x04	; 4
    5b74:	80 81       	ld	r24, Z
    5b76:	8f 7d       	andi	r24, 0xDF	; 223
    5b78:	80 83       	st	Z, r24
    5b7a:	80 81       	ld	r24, Z
    5b7c:	8f 7d       	andi	r24, 0xDF	; 223
    5b7e:	80 83       	st	Z, r24
    5b80:	e0 e5       	ldi	r30, 0x50	; 80
    5b82:	f8 e2       	ldi	r31, 0x28	; 40
    5b84:	02 e0       	ldi	r16, 0x02	; 2
    5b86:	05 93       	las	Z, r16
    5b88:	10 92 52 28 	sts	0x2852, r1	; 0x802852 <udd_sram+0x16>
    5b8c:	10 92 53 28 	sts	0x2853, r1	; 0x802853 <udd_sram+0x17>
    5b90:	00 e2       	ldi	r16, 0x20	; 32
    5b92:	06 93       	lac	Z, r16
    5b94:	00 e4       	ldi	r16, 0x40	; 64
    5b96:	06 93       	lac	Z, r16
    5b98:	e8 e4       	ldi	r30, 0x48	; 72
    5b9a:	f8 e2       	ldi	r31, 0x28	; 40
    5b9c:	00 e4       	ldi	r16, 0x40	; 64
    5b9e:	06 93       	lac	Z, r16
    5ba0:	ef ef       	ldi	r30, 0xFF	; 255
    5ba2:	fa e2       	ldi	r31, 0x2A	; 42
    5ba4:	14 86       	std	Z+12, r1	; 0x0c
    5ba6:	15 86       	std	Z+13, r1	; 0x0d
    5ba8:	16 86       	std	Z+14, r1	; 0x0e
    5baa:	17 86       	std	Z+15, r1	; 0x0f
    5bac:	12 86       	std	Z+10, r1	; 0x0a
    5bae:	13 86       	std	Z+11, r1	; 0x0b
    5bb0:	10 92 39 28 	sts	0x2839, r1	; 0x802839 <udd_ep_control_state>
    5bb4:	0f 91       	pop	r16
    5bb6:	08 95       	ret

00005bb8 <udd_ctrl_stall_data>:
    5bb8:	0f 93       	push	r16
    5bba:	85 e0       	ldi	r24, 0x05	; 5
    5bbc:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
    5bc0:	e1 e5       	ldi	r30, 0x51	; 81
    5bc2:	f8 e2       	ldi	r31, 0x28	; 40
    5bc4:	04 e0       	ldi	r16, 0x04	; 4
    5bc6:	05 93       	las	Z, r16
    5bc8:	e9 e4       	ldi	r30, 0x49	; 73
    5bca:	f8 e2       	ldi	r31, 0x28	; 40
    5bcc:	04 e0       	ldi	r16, 0x04	; 4
    5bce:	05 93       	las	Z, r16
    5bd0:	0f 91       	pop	r16
    5bd2:	08 95       	ret

00005bd4 <udd_ctrl_send_zlp_in>:
    5bd4:	0f 93       	push	r16
    5bd6:	83 e0       	ldi	r24, 0x03	; 3
    5bd8:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
    5bdc:	10 92 52 28 	sts	0x2852, r1	; 0x802852 <udd_sram+0x16>
    5be0:	10 92 53 28 	sts	0x2853, r1	; 0x802853 <udd_sram+0x17>
    5be4:	e0 e5       	ldi	r30, 0x50	; 80
    5be6:	f8 e2       	ldi	r31, 0x28	; 40
    5be8:	02 e0       	ldi	r16, 0x02	; 2
    5bea:	06 93       	lac	Z, r16
    5bec:	0f 91       	pop	r16
    5bee:	08 95       	ret

00005bf0 <udd_ctrl_endofrequest>:
    5bf0:	e0 91 0b 2b 	lds	r30, 0x2B0B	; 0x802b0b <udd_g_ctrlreq+0xc>
    5bf4:	f0 91 0c 2b 	lds	r31, 0x2B0C	; 0x802b0c <udd_g_ctrlreq+0xd>
    5bf8:	30 97       	sbiw	r30, 0x00	; 0
    5bfa:	09 f0       	breq	.+2      	; 0x5bfe <udd_ctrl_endofrequest+0xe>
    5bfc:	19 95       	eicall
    5bfe:	08 95       	ret

00005c00 <udd_ctrl_in_sent>:
    5c00:	0f 93       	push	r16
    5c02:	cf 93       	push	r28
    5c04:	df 93       	push	r29
    5c06:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <udd_ep_control_state>
    5c0a:	83 30       	cpi	r24, 0x03	; 3
    5c0c:	19 f4       	brne	.+6      	; 0x5c14 <udd_ctrl_in_sent+0x14>
    5c0e:	f0 df       	rcall	.-32     	; 0x5bf0 <udd_ctrl_endofrequest>
    5c10:	ae df       	rcall	.-164    	; 0x5b6e <udd_ctrl_init>
    5c12:	5e c0       	rjmp	.+188    	; 0x5cd0 <udd_ctrl_in_sent+0xd0>
    5c14:	80 91 35 28 	lds	r24, 0x2835	; 0x802835 <udd_ctrl_payload_nb_trans>
    5c18:	90 91 36 28 	lds	r25, 0x2836	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    5c1c:	c0 91 09 2b 	lds	r28, 0x2B09	; 0x802b09 <udd_g_ctrlreq+0xa>
    5c20:	d0 91 0a 2b 	lds	r29, 0x2B0A	; 0x802b0a <udd_g_ctrlreq+0xb>
    5c24:	c8 1b       	sub	r28, r24
    5c26:	d9 0b       	sbc	r29, r25
    5c28:	71 f5       	brne	.+92     	; 0x5c86 <udd_ctrl_in_sent+0x86>
    5c2a:	20 91 37 28 	lds	r18, 0x2837	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    5c2e:	30 91 38 28 	lds	r19, 0x2838	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    5c32:	82 0f       	add	r24, r18
    5c34:	93 1f       	adc	r25, r19
    5c36:	80 93 37 28 	sts	0x2837, r24	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    5c3a:	90 93 38 28 	sts	0x2838, r25	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    5c3e:	20 91 05 2b 	lds	r18, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    5c42:	30 91 06 2b 	lds	r19, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    5c46:	82 17       	cp	r24, r18
    5c48:	93 07       	cpc	r25, r19
    5c4a:	21 f0       	breq	.+8      	; 0x5c54 <udd_ctrl_in_sent+0x54>
    5c4c:	80 91 50 27 	lds	r24, 0x2750	; 0x802750 <b_shortpacket.5472>
    5c50:	88 23       	and	r24, r24
    5c52:	41 f0       	breq	.+16     	; 0x5c64 <udd_ctrl_in_sent+0x64>
    5c54:	84 e0       	ldi	r24, 0x04	; 4
    5c56:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
    5c5a:	e8 e4       	ldi	r30, 0x48	; 72
    5c5c:	f8 e2       	ldi	r31, 0x28	; 40
    5c5e:	02 e0       	ldi	r16, 0x02	; 2
    5c60:	06 93       	lac	Z, r16
    5c62:	36 c0       	rjmp	.+108    	; 0x5cd0 <udd_ctrl_in_sent+0xd0>
    5c64:	e0 91 0d 2b 	lds	r30, 0x2B0D	; 0x802b0d <udd_g_ctrlreq+0xe>
    5c68:	f0 91 0e 2b 	lds	r31, 0x2B0E	; 0x802b0e <udd_g_ctrlreq+0xf>
    5c6c:	30 97       	sbiw	r30, 0x00	; 0
    5c6e:	99 f0       	breq	.+38     	; 0x5c96 <udd_ctrl_in_sent+0x96>
    5c70:	19 95       	eicall
    5c72:	88 23       	and	r24, r24
    5c74:	81 f0       	breq	.+32     	; 0x5c96 <udd_ctrl_in_sent+0x96>
    5c76:	10 92 35 28 	sts	0x2835, r1	; 0x802835 <udd_ctrl_payload_nb_trans>
    5c7a:	10 92 36 28 	sts	0x2836, r1	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    5c7e:	c0 91 09 2b 	lds	r28, 0x2B09	; 0x802b09 <udd_g_ctrlreq+0xa>
    5c82:	d0 91 0a 2b 	lds	r29, 0x2B0A	; 0x802b0a <udd_g_ctrlreq+0xb>
    5c86:	c0 34       	cpi	r28, 0x40	; 64
    5c88:	d1 05       	cpc	r29, r1
    5c8a:	28 f0       	brcs	.+10     	; 0x5c96 <udd_ctrl_in_sent+0x96>
    5c8c:	10 92 50 27 	sts	0x2750, r1	; 0x802750 <b_shortpacket.5472>
    5c90:	c0 e4       	ldi	r28, 0x40	; 64
    5c92:	d0 e0       	ldi	r29, 0x00	; 0
    5c94:	03 c0       	rjmp	.+6      	; 0x5c9c <udd_ctrl_in_sent+0x9c>
    5c96:	81 e0       	ldi	r24, 0x01	; 1
    5c98:	80 93 50 27 	sts	0x2750, r24	; 0x802750 <b_shortpacket.5472>
    5c9c:	ec e3       	ldi	r30, 0x3C	; 60
    5c9e:	f8 e2       	ldi	r31, 0x28	; 40
    5ca0:	c6 8b       	std	Z+22, r28	; 0x16
    5ca2:	d7 8b       	std	Z+23, r29	; 0x17
    5ca4:	80 91 35 28 	lds	r24, 0x2835	; 0x802835 <udd_ctrl_payload_nb_trans>
    5ca8:	90 91 36 28 	lds	r25, 0x2836	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    5cac:	20 91 07 2b 	lds	r18, 0x2B07	; 0x802b07 <udd_g_ctrlreq+0x8>
    5cb0:	30 91 08 2b 	lds	r19, 0x2B08	; 0x802b08 <udd_g_ctrlreq+0x9>
    5cb4:	28 0f       	add	r18, r24
    5cb6:	39 1f       	adc	r19, r25
    5cb8:	20 8f       	std	Z+24, r18	; 0x18
    5cba:	31 8f       	std	Z+25, r19	; 0x19
    5cbc:	c8 0f       	add	r28, r24
    5cbe:	d9 1f       	adc	r29, r25
    5cc0:	c0 93 35 28 	sts	0x2835, r28	; 0x802835 <udd_ctrl_payload_nb_trans>
    5cc4:	d0 93 36 28 	sts	0x2836, r29	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    5cc8:	e0 e5       	ldi	r30, 0x50	; 80
    5cca:	f8 e2       	ldi	r31, 0x28	; 40
    5ccc:	02 e0       	ldi	r16, 0x02	; 2
    5cce:	06 93       	lac	Z, r16
    5cd0:	df 91       	pop	r29
    5cd2:	cf 91       	pop	r28
    5cd4:	0f 91       	pop	r16
    5cd6:	08 95       	ret

00005cd8 <udd_ep_get_size>:
    5cd8:	fc 01       	movw	r30, r24
    5cda:	81 81       	ldd	r24, Z+1	; 0x01
    5cdc:	e8 2f       	mov	r30, r24
    5cde:	e7 70       	andi	r30, 0x07	; 7
    5ce0:	8e 2f       	mov	r24, r30
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	fc 01       	movw	r30, r24
    5ce6:	31 97       	sbiw	r30, 0x01	; 1
    5ce8:	e7 30       	cpi	r30, 0x07	; 7
    5cea:	f1 05       	cpc	r31, r1
    5cec:	d8 f4       	brcc	.+54     	; 0x5d24 <udd_ep_get_size+0x4c>
    5cee:	88 27       	eor	r24, r24
    5cf0:	e2 50       	subi	r30, 0x02	; 2
    5cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    5cf6:	0c 94 82 48 	jmp	0x9104	; 0x9104 <__tablejump2__>
    5cfa:	80 e1       	ldi	r24, 0x10	; 16
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
    5cfe:	08 95       	ret
    5d00:	80 e2       	ldi	r24, 0x20	; 32
    5d02:	90 e0       	ldi	r25, 0x00	; 0
    5d04:	08 95       	ret
    5d06:	80 e4       	ldi	r24, 0x40	; 64
    5d08:	90 e0       	ldi	r25, 0x00	; 0
    5d0a:	08 95       	ret
    5d0c:	80 e8       	ldi	r24, 0x80	; 128
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	08 95       	ret
    5d12:	80 e0       	ldi	r24, 0x00	; 0
    5d14:	91 e0       	ldi	r25, 0x01	; 1
    5d16:	08 95       	ret
    5d18:	80 e0       	ldi	r24, 0x00	; 0
    5d1a:	92 e0       	ldi	r25, 0x02	; 2
    5d1c:	08 95       	ret
    5d1e:	8f ef       	ldi	r24, 0xFF	; 255
    5d20:	93 e0       	ldi	r25, 0x03	; 3
    5d22:	08 95       	ret
    5d24:	88 e0       	ldi	r24, 0x08	; 8
    5d26:	90 e0       	ldi	r25, 0x00	; 0
    5d28:	08 95       	ret

00005d2a <udd_ep_get_job>:
    5d2a:	28 2f       	mov	r18, r24
    5d2c:	2f 70       	andi	r18, 0x0F	; 15
    5d2e:	30 e0       	ldi	r19, 0x00	; 0
    5d30:	22 0f       	add	r18, r18
    5d32:	33 1f       	adc	r19, r19
    5d34:	08 2e       	mov	r0, r24
    5d36:	00 0c       	add	r0, r0
    5d38:	99 0b       	sbc	r25, r25
    5d3a:	88 27       	eor	r24, r24
    5d3c:	99 0f       	add	r25, r25
    5d3e:	88 1f       	adc	r24, r24
    5d40:	99 27       	eor	r25, r25
    5d42:	82 0f       	add	r24, r18
    5d44:	93 1f       	adc	r25, r19
    5d46:	02 97       	sbiw	r24, 0x02	; 2
    5d48:	9c 01       	movw	r18, r24
    5d4a:	22 0f       	add	r18, r18
    5d4c:	33 1f       	adc	r19, r19
    5d4e:	22 0f       	add	r18, r18
    5d50:	33 1f       	adc	r19, r19
    5d52:	22 0f       	add	r18, r18
    5d54:	33 1f       	adc	r19, r19
    5d56:	82 0f       	add	r24, r18
    5d58:	93 1f       	adc	r25, r19
    5d5a:	8f 52       	subi	r24, 0x2F	; 47
    5d5c:	98 4d       	sbci	r25, 0xD8	; 216
    5d5e:	08 95       	ret

00005d60 <udd_ctrl_interrupt_tc_setup>:
    5d60:	0f 93       	push	r16
    5d62:	cf 93       	push	r28
    5d64:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5d68:	80 ff       	sbrs	r24, 0
    5d6a:	65 c0       	rjmp	.+202    	; 0x5e36 <udd_ctrl_interrupt_tc_setup+0xd6>
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5d72:	e8 e4       	ldi	r30, 0x48	; 72
    5d74:	f8 e2       	ldi	r31, 0x28	; 40
    5d76:	00 e8       	ldi	r16, 0x80	; 128
    5d78:	06 93       	lac	Z, r16
    5d7a:	e0 e5       	ldi	r30, 0x50	; 80
    5d7c:	f8 e2       	ldi	r31, 0x28	; 40
    5d7e:	00 e8       	ldi	r16, 0x80	; 128
    5d80:	06 93       	lac	Z, r16
    5d82:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    5d86:	e8 e4       	ldi	r30, 0x48	; 72
    5d88:	f8 e2       	ldi	r31, 0x28	; 40
    5d8a:	00 e1       	ldi	r16, 0x10	; 16
    5d8c:	06 93       	lac	Z, r16
    5d8e:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <udd_ep_control_state>
    5d92:	88 23       	and	r24, r24
    5d94:	29 f0       	breq	.+10     	; 0x5da0 <udd_ctrl_interrupt_tc_setup+0x40>
    5d96:	83 50       	subi	r24, 0x03	; 3
    5d98:	82 30       	cpi	r24, 0x02	; 2
    5d9a:	08 f4       	brcc	.+2      	; 0x5d9e <udd_ctrl_interrupt_tc_setup+0x3e>
    5d9c:	29 df       	rcall	.-430    	; 0x5bf0 <udd_ctrl_endofrequest>
    5d9e:	e7 de       	rcall	.-562    	; 0x5b6e <udd_ctrl_init>
    5da0:	80 91 4a 28 	lds	r24, 0x284A	; 0x80284a <udd_sram+0xe>
    5da4:	90 91 4b 28 	lds	r25, 0x284B	; 0x80284b <udd_sram+0xf>
    5da8:	08 97       	sbiw	r24, 0x08	; 8
    5daa:	09 f0       	breq	.+2      	; 0x5dae <udd_ctrl_interrupt_tc_setup+0x4e>
    5dac:	46 c0       	rjmp	.+140    	; 0x5e3a <udd_ctrl_interrupt_tc_setup+0xda>
    5dae:	88 e0       	ldi	r24, 0x08	; 8
    5db0:	e5 ef       	ldi	r30, 0xF5	; 245
    5db2:	f7 e2       	ldi	r31, 0x27	; 39
    5db4:	af ef       	ldi	r26, 0xFF	; 255
    5db6:	ba e2       	ldi	r27, 0x2A	; 42
    5db8:	01 90       	ld	r0, Z+
    5dba:	0d 92       	st	X+, r0
    5dbc:	8a 95       	dec	r24
    5dbe:	e1 f7       	brne	.-8      	; 0x5db8 <udd_ctrl_interrupt_tc_setup+0x58>
    5dc0:	e8 ec       	ldi	r30, 0xC8	; 200
    5dc2:	f4 e0       	ldi	r31, 0x04	; 4
    5dc4:	80 81       	ld	r24, Z
    5dc6:	80 62       	ori	r24, 0x20	; 32
    5dc8:	80 83       	st	Z, r24
    5dca:	80 81       	ld	r24, Z
    5dcc:	80 62       	ori	r24, 0x20	; 32
    5dce:	80 83       	st	Z, r24
    5dd0:	0e 94 de 44 	call	0x89bc	; 0x89bc <udc_process_setup>
    5dd4:	c8 2f       	mov	r28, r24
    5dd6:	81 11       	cpse	r24, r1
    5dd8:	03 c0       	rjmp	.+6      	; 0x5de0 <udd_ctrl_interrupt_tc_setup+0x80>
    5dda:	ee de       	rcall	.-548    	; 0x5bb8 <udd_ctrl_stall_data>
    5ddc:	c1 e0       	ldi	r28, 0x01	; 1
    5dde:	2e c0       	rjmp	.+92     	; 0x5e3c <udd_ctrl_interrupt_tc_setup+0xdc>
    5de0:	80 91 ff 2a 	lds	r24, 0x2AFF	; 0x802aff <udd_g_ctrlreq>
    5de4:	88 23       	and	r24, r24
    5de6:	6c f4       	brge	.+26     	; 0x5e02 <udd_ctrl_interrupt_tc_setup+0xa2>
    5de8:	10 92 37 28 	sts	0x2837, r1	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    5dec:	10 92 38 28 	sts	0x2838, r1	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    5df0:	10 92 35 28 	sts	0x2835, r1	; 0x802835 <udd_ctrl_payload_nb_trans>
    5df4:	10 92 36 28 	sts	0x2836, r1	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    5df8:	82 e0       	ldi	r24, 0x02	; 2
    5dfa:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
    5dfe:	00 df       	rcall	.-512    	; 0x5c00 <udd_ctrl_in_sent>
    5e00:	1d c0       	rjmp	.+58     	; 0x5e3c <udd_ctrl_interrupt_tc_setup+0xdc>
    5e02:	80 91 05 2b 	lds	r24, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    5e06:	90 91 06 2b 	lds	r25, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    5e0a:	89 2b       	or	r24, r25
    5e0c:	11 f4       	brne	.+4      	; 0x5e12 <udd_ctrl_interrupt_tc_setup+0xb2>
    5e0e:	e2 de       	rcall	.-572    	; 0x5bd4 <udd_ctrl_send_zlp_in>
    5e10:	15 c0       	rjmp	.+42     	; 0x5e3c <udd_ctrl_interrupt_tc_setup+0xdc>
    5e12:	10 92 37 28 	sts	0x2837, r1	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    5e16:	10 92 38 28 	sts	0x2838, r1	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    5e1a:	10 92 35 28 	sts	0x2835, r1	; 0x802835 <udd_ctrl_payload_nb_trans>
    5e1e:	10 92 36 28 	sts	0x2836, r1	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    5e22:	81 e0       	ldi	r24, 0x01	; 1
    5e24:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
    5e28:	e8 e4       	ldi	r30, 0x48	; 72
    5e2a:	f8 e2       	ldi	r31, 0x28	; 40
    5e2c:	02 e0       	ldi	r16, 0x02	; 2
    5e2e:	06 93       	lac	Z, r16
    5e30:	00 e2       	ldi	r16, 0x20	; 32
    5e32:	06 93       	lac	Z, r16
    5e34:	03 c0       	rjmp	.+6      	; 0x5e3c <udd_ctrl_interrupt_tc_setup+0xdc>
    5e36:	c0 e0       	ldi	r28, 0x00	; 0
    5e38:	01 c0       	rjmp	.+2      	; 0x5e3c <udd_ctrl_interrupt_tc_setup+0xdc>
    5e3a:	c1 e0       	ldi	r28, 0x01	; 1
    5e3c:	8c 2f       	mov	r24, r28
    5e3e:	cf 91       	pop	r28
    5e40:	0f 91       	pop	r16
    5e42:	08 95       	ret

00005e44 <udd_ep_trans_complet>:
    5e44:	8f 92       	push	r8
    5e46:	9f 92       	push	r9
    5e48:	af 92       	push	r10
    5e4a:	bf 92       	push	r11
    5e4c:	df 92       	push	r13
    5e4e:	ef 92       	push	r14
    5e50:	ff 92       	push	r15
    5e52:	0f 93       	push	r16
    5e54:	1f 93       	push	r17
    5e56:	cf 93       	push	r28
    5e58:	df 93       	push	r29
    5e5a:	d8 2e       	mov	r13, r24
    5e5c:	66 df       	rcall	.-308    	; 0x5d2a <udd_ep_get_job>
    5e5e:	8c 01       	movw	r16, r24
    5e60:	cd 2d       	mov	r28, r13
    5e62:	cf 70       	andi	r28, 0x0F	; 15
    5e64:	d0 e0       	ldi	r29, 0x00	; 0
    5e66:	ce 01       	movw	r24, r28
    5e68:	88 0f       	add	r24, r24
    5e6a:	99 1f       	adc	r25, r25
    5e6c:	cd 2d       	mov	r28, r13
    5e6e:	0d 2c       	mov	r0, r13
    5e70:	00 0c       	add	r0, r0
    5e72:	dd 0b       	sbc	r29, r29
    5e74:	cc 27       	eor	r28, r28
    5e76:	dd 0f       	add	r29, r29
    5e78:	cc 1f       	adc	r28, r28
    5e7a:	dd 27       	eor	r29, r29
    5e7c:	c8 0f       	add	r28, r24
    5e7e:	d9 1f       	adc	r29, r25
    5e80:	ce 01       	movw	r24, r28
    5e82:	88 0f       	add	r24, r24
    5e84:	99 1f       	adc	r25, r25
    5e86:	88 0f       	add	r24, r24
    5e88:	99 1f       	adc	r25, r25
    5e8a:	88 0f       	add	r24, r24
    5e8c:	99 1f       	adc	r25, r25
    5e8e:	9c 01       	movw	r18, r24
    5e90:	28 5b       	subi	r18, 0xB8	; 184
    5e92:	37 4d       	sbci	r19, 0xD7	; 215
    5e94:	79 01       	movw	r14, r18
    5e96:	c9 01       	movw	r24, r18
    5e98:	1f df       	rcall	.-450    	; 0x5cd8 <udd_ep_get_size>
    5e9a:	4c 01       	movw	r8, r24
    5e9c:	dd 20       	and	r13, r13
    5e9e:	0c f0       	brlt	.+2      	; 0x5ea2 <udd_ep_trans_complet+0x5e>
    5ea0:	7b c0       	rjmp	.+246    	; 0x5f98 <udd_ep_trans_complet+0x154>
    5ea2:	fe 01       	movw	r30, r28
    5ea4:	ee 0f       	add	r30, r30
    5ea6:	ff 1f       	adc	r31, r31
    5ea8:	ee 0f       	add	r30, r30
    5eaa:	ff 1f       	adc	r31, r31
    5eac:	ee 0f       	add	r30, r30
    5eae:	ff 1f       	adc	r31, r31
    5eb0:	e4 5c       	subi	r30, 0xC4	; 196
    5eb2:	f7 4d       	sbci	r31, 0xD7	; 215
    5eb4:	22 89       	ldd	r18, Z+18	; 0x12
    5eb6:	33 89       	ldd	r19, Z+19	; 0x13
    5eb8:	d8 01       	movw	r26, r16
    5eba:	15 96       	adiw	r26, 0x05	; 5
    5ebc:	8d 91       	ld	r24, X+
    5ebe:	9c 91       	ld	r25, X
    5ec0:	16 97       	sbiw	r26, 0x06	; 6
    5ec2:	82 0f       	add	r24, r18
    5ec4:	93 1f       	adc	r25, r19
    5ec6:	15 96       	adiw	r26, 0x05	; 5
    5ec8:	8d 93       	st	X+, r24
    5eca:	9c 93       	st	X, r25
    5ecc:	16 97       	sbiw	r26, 0x06	; 6
    5ece:	13 96       	adiw	r26, 0x03	; 3
    5ed0:	2d 91       	ld	r18, X+
    5ed2:	3c 91       	ld	r19, X
    5ed4:	14 97       	sbiw	r26, 0x04	; 4
    5ed6:	82 17       	cp	r24, r18
    5ed8:	93 07       	cpc	r25, r19
    5eda:	09 f4       	brne	.+2      	; 0x5ede <udd_ep_trans_complet+0x9a>
    5edc:	47 c0       	rjmp	.+142    	; 0x5f6c <udd_ep_trans_complet+0x128>
    5ede:	28 1b       	sub	r18, r24
    5ee0:	39 0b       	sbc	r19, r25
    5ee2:	21 15       	cp	r18, r1
    5ee4:	b4 e0       	ldi	r27, 0x04	; 4
    5ee6:	3b 07       	cpc	r19, r27
    5ee8:	40 f0       	brcs	.+16     	; 0x5efa <udd_ep_trans_complet+0xb6>
    5eea:	2f ef       	ldi	r18, 0xFF	; 255
    5eec:	33 e0       	ldi	r19, 0x03	; 3
    5eee:	c9 01       	movw	r24, r18
    5ef0:	b4 01       	movw	r22, r8
    5ef2:	0e 94 1d 48 	call	0x903a	; 0x903a <__udivmodhi4>
    5ef6:	28 1b       	sub	r18, r24
    5ef8:	39 0b       	sbc	r19, r25
    5efa:	f8 01       	movw	r30, r16
    5efc:	80 81       	ld	r24, Z
    5efe:	81 ff       	sbrs	r24, 1
    5f00:	0a c0       	rjmp	.+20     	; 0x5f16 <udd_ep_trans_complet+0xd2>
    5f02:	c9 01       	movw	r24, r18
    5f04:	b4 01       	movw	r22, r8
    5f06:	0e 94 1d 48 	call	0x903a	; 0x903a <__udivmodhi4>
    5f0a:	41 e0       	ldi	r20, 0x01	; 1
    5f0c:	89 2b       	or	r24, r25
    5f0e:	09 f0       	breq	.+2      	; 0x5f12 <udd_ep_trans_complet+0xce>
    5f10:	40 e0       	ldi	r20, 0x00	; 0
    5f12:	84 2f       	mov	r24, r20
    5f14:	01 c0       	rjmp	.+2      	; 0x5f18 <udd_ep_trans_complet+0xd4>
    5f16:	80 e0       	ldi	r24, 0x00	; 0
    5f18:	d8 01       	movw	r26, r16
    5f1a:	9c 91       	ld	r25, X
    5f1c:	80 fb       	bst	r24, 0
    5f1e:	91 f9       	bld	r25, 1
    5f20:	9c 93       	st	X, r25
    5f22:	fe 01       	movw	r30, r28
    5f24:	ee 0f       	add	r30, r30
    5f26:	ff 1f       	adc	r31, r31
    5f28:	ee 0f       	add	r30, r30
    5f2a:	ff 1f       	adc	r31, r31
    5f2c:	ee 0f       	add	r30, r30
    5f2e:	ff 1f       	adc	r31, r31
    5f30:	e4 5c       	subi	r30, 0xC4	; 196
    5f32:	f7 4d       	sbci	r31, 0xD7	; 215
    5f34:	12 8a       	std	Z+18, r1	; 0x12
    5f36:	13 8a       	std	Z+19, r1	; 0x13
    5f38:	26 87       	std	Z+14, r18	; 0x0e
    5f3a:	37 87       	std	Z+15, r19	; 0x0f
    5f3c:	11 96       	adiw	r26, 0x01	; 1
    5f3e:	2d 91       	ld	r18, X+
    5f40:	3c 91       	ld	r19, X
    5f42:	12 97       	sbiw	r26, 0x02	; 2
    5f44:	15 96       	adiw	r26, 0x05	; 5
    5f46:	8d 91       	ld	r24, X+
    5f48:	9c 91       	ld	r25, X
    5f4a:	16 97       	sbiw	r26, 0x06	; 6
    5f4c:	82 0f       	add	r24, r18
    5f4e:	93 1f       	adc	r25, r19
    5f50:	cc 0f       	add	r28, r28
    5f52:	dd 1f       	adc	r29, r29
    5f54:	cc 0f       	add	r28, r28
    5f56:	dd 1f       	adc	r29, r29
    5f58:	cc 0f       	add	r28, r28
    5f5a:	dd 1f       	adc	r29, r29
    5f5c:	c4 5b       	subi	r28, 0xB4	; 180
    5f5e:	d7 4d       	sbci	r29, 0xD7	; 215
    5f60:	88 83       	st	Y, r24
    5f62:	99 83       	std	Y+1, r25	; 0x01
    5f64:	f7 01       	movw	r30, r14
    5f66:	02 e0       	ldi	r16, 0x02	; 2
    5f68:	06 93       	lac	Z, r16
    5f6a:	e4 c0       	rjmp	.+456    	; 0x6134 <__stack+0x135>
    5f6c:	d8 01       	movw	r26, r16
    5f6e:	8c 91       	ld	r24, X
    5f70:	81 ff       	sbrs	r24, 1
    5f72:	cd c0       	rjmp	.+410    	; 0x610e <__stack+0x10f>
    5f74:	8d 7f       	andi	r24, 0xFD	; 253
    5f76:	8c 93       	st	X, r24
    5f78:	cc 0f       	add	r28, r28
    5f7a:	dd 1f       	adc	r29, r29
    5f7c:	cc 0f       	add	r28, r28
    5f7e:	dd 1f       	adc	r29, r29
    5f80:	cc 0f       	add	r28, r28
    5f82:	dd 1f       	adc	r29, r29
    5f84:	c4 5c       	subi	r28, 0xC4	; 196
    5f86:	d7 4d       	sbci	r29, 0xD7	; 215
    5f88:	1a 8a       	std	Y+18, r1	; 0x12
    5f8a:	1b 8a       	std	Y+19, r1	; 0x13
    5f8c:	1e 86       	std	Y+14, r1	; 0x0e
    5f8e:	1f 86       	std	Y+15, r1	; 0x0f
    5f90:	f7 01       	movw	r30, r14
    5f92:	02 e0       	ldi	r16, 0x02	; 2
    5f94:	06 93       	lac	Z, r16
    5f96:	ce c0       	rjmp	.+412    	; 0x6134 <__stack+0x135>
    5f98:	fe 01       	movw	r30, r28
    5f9a:	ee 0f       	add	r30, r30
    5f9c:	ff 1f       	adc	r31, r31
    5f9e:	ee 0f       	add	r30, r30
    5fa0:	ff 1f       	adc	r31, r31
    5fa2:	ee 0f       	add	r30, r30
    5fa4:	ff 1f       	adc	r31, r31
    5fa6:	e4 5c       	subi	r30, 0xC4	; 196
    5fa8:	f7 4d       	sbci	r31, 0xD7	; 215
    5faa:	a6 84       	ldd	r10, Z+14	; 0x0e
    5fac:	b7 84       	ldd	r11, Z+15	; 0x0f
    5fae:	d8 01       	movw	r26, r16
    5fb0:	8c 91       	ld	r24, X
    5fb2:	82 ff       	sbrs	r24, 2
    5fb4:	1b c0       	rjmp	.+54     	; 0x5fec <udd_ep_trans_complet+0x1a8>
    5fb6:	11 96       	adiw	r26, 0x01	; 1
    5fb8:	ed 91       	ld	r30, X+
    5fba:	fc 91       	ld	r31, X
    5fbc:	12 97       	sbiw	r26, 0x02	; 2
    5fbe:	15 96       	adiw	r26, 0x05	; 5
    5fc0:	2d 91       	ld	r18, X+
    5fc2:	3c 91       	ld	r19, X
    5fc4:	16 97       	sbiw	r26, 0x06	; 6
    5fc6:	13 96       	adiw	r26, 0x03	; 3
    5fc8:	8d 91       	ld	r24, X+
    5fca:	9c 91       	ld	r25, X
    5fcc:	14 97       	sbiw	r26, 0x04	; 4
    5fce:	b4 01       	movw	r22, r8
    5fd0:	0e 94 1d 48 	call	0x903a	; 0x903a <__udivmodhi4>
    5fd4:	b0 e4       	ldi	r27, 0x40	; 64
    5fd6:	db 9e       	mul	r13, r27
    5fd8:	b0 01       	movw	r22, r0
    5fda:	11 24       	eor	r1, r1
    5fdc:	6f 5e       	subi	r22, 0xEF	; 239
    5fde:	78 4d       	sbci	r23, 0xD8	; 216
    5fe0:	ac 01       	movw	r20, r24
    5fe2:	cf 01       	movw	r24, r30
    5fe4:	82 0f       	add	r24, r18
    5fe6:	93 1f       	adc	r25, r19
    5fe8:	0e 94 2c 4b 	call	0x9658	; 0x9658 <memcpy>
    5fec:	f8 01       	movw	r30, r16
    5fee:	25 81       	ldd	r18, Z+5	; 0x05
    5ff0:	36 81       	ldd	r19, Z+6	; 0x06
    5ff2:	2a 0d       	add	r18, r10
    5ff4:	3b 1d       	adc	r19, r11
    5ff6:	25 83       	std	Z+5, r18	; 0x05
    5ff8:	36 83       	std	Z+6, r19	; 0x06
    5ffa:	83 81       	ldd	r24, Z+3	; 0x03
    5ffc:	94 81       	ldd	r25, Z+4	; 0x04
    5ffe:	82 17       	cp	r24, r18
    6000:	93 07       	cpc	r25, r19
    6002:	68 f4       	brcc	.+26     	; 0x601e <__stack+0x1f>
    6004:	85 83       	std	Z+5, r24	; 0x05
    6006:	96 83       	std	Z+6, r25	; 0x06
    6008:	cc 0f       	add	r28, r28
    600a:	dd 1f       	adc	r29, r29
    600c:	cc 0f       	add	r28, r28
    600e:	dd 1f       	adc	r29, r29
    6010:	cc 0f       	add	r28, r28
    6012:	dd 1f       	adc	r29, r29
    6014:	c4 5c       	subi	r28, 0xC4	; 196
    6016:	d7 4d       	sbci	r29, 0xD7	; 215
    6018:	8a 89       	ldd	r24, Y+18	; 0x12
    601a:	9b 89       	ldd	r25, Y+19	; 0x13
    601c:	78 c0       	rjmp	.+240    	; 0x610e <__stack+0x10f>
    601e:	fe 01       	movw	r30, r28
    6020:	ee 0f       	add	r30, r30
    6022:	ff 1f       	adc	r31, r31
    6024:	ee 0f       	add	r30, r30
    6026:	ff 1f       	adc	r31, r31
    6028:	ee 0f       	add	r30, r30
    602a:	ff 1f       	adc	r31, r31
    602c:	e4 5c       	subi	r30, 0xC4	; 196
    602e:	f7 4d       	sbci	r31, 0xD7	; 215
    6030:	42 89       	ldd	r20, Z+18	; 0x12
    6032:	53 89       	ldd	r21, Z+19	; 0x13
    6034:	a4 16       	cp	r10, r20
    6036:	b5 06       	cpc	r11, r21
    6038:	09 f0       	breq	.+2      	; 0x603c <__stack+0x3d>
    603a:	69 c0       	rjmp	.+210    	; 0x610e <__stack+0x10f>
    603c:	28 17       	cp	r18, r24
    603e:	39 07       	cpc	r19, r25
    6040:	09 f4       	brne	.+2      	; 0x6044 <__stack+0x45>
    6042:	65 c0       	rjmp	.+202    	; 0x610e <__stack+0x10f>
    6044:	ac 01       	movw	r20, r24
    6046:	42 1b       	sub	r20, r18
    6048:	53 0b       	sbc	r21, r19
    604a:	9a 01       	movw	r18, r20
    604c:	21 15       	cp	r18, r1
    604e:	54 e0       	ldi	r21, 0x04	; 4
    6050:	35 07       	cpc	r19, r21
    6052:	48 f0       	brcs	.+18     	; 0x6066 <__stack+0x67>
    6054:	2f ef       	ldi	r18, 0xFF	; 255
    6056:	33 e0       	ldi	r19, 0x03	; 3
    6058:	c9 01       	movw	r24, r18
    605a:	b4 01       	movw	r22, r8
    605c:	0e 94 1d 48 	call	0x903a	; 0x903a <__udivmodhi4>
    6060:	28 1b       	sub	r18, r24
    6062:	39 0b       	sbc	r19, r25
    6064:	06 c0       	rjmp	.+12     	; 0x6072 <__stack+0x73>
    6066:	c9 01       	movw	r24, r18
    6068:	b4 01       	movw	r22, r8
    606a:	0e 94 1d 48 	call	0x903a	; 0x903a <__udivmodhi4>
    606e:	28 1b       	sub	r18, r24
    6070:	39 0b       	sbc	r19, r25
    6072:	fe 01       	movw	r30, r28
    6074:	ee 0f       	add	r30, r30
    6076:	ff 1f       	adc	r31, r31
    6078:	ee 0f       	add	r30, r30
    607a:	ff 1f       	adc	r31, r31
    607c:	ee 0f       	add	r30, r30
    607e:	ff 1f       	adc	r31, r31
    6080:	e4 5c       	subi	r30, 0xC4	; 196
    6082:	f7 4d       	sbci	r31, 0xD7	; 215
    6084:	16 86       	std	Z+14, r1	; 0x0e
    6086:	17 86       	std	Z+15, r1	; 0x0f
    6088:	28 15       	cp	r18, r8
    608a:	39 05       	cpc	r19, r9
    608c:	00 f5       	brcc	.+64     	; 0x60ce <__stack+0xcf>
    608e:	d8 01       	movw	r26, r16
    6090:	8c 91       	ld	r24, X
    6092:	84 60       	ori	r24, 0x04	; 4
    6094:	8c 93       	st	X, r24
    6096:	b0 e4       	ldi	r27, 0x40	; 64
    6098:	db 9e       	mul	r13, r27
    609a:	c0 01       	movw	r24, r0
    609c:	11 24       	eor	r1, r1
    609e:	8f 5e       	subi	r24, 0xEF	; 239
    60a0:	98 4d       	sbci	r25, 0xD8	; 216
    60a2:	fe 01       	movw	r30, r28
    60a4:	ee 0f       	add	r30, r30
    60a6:	ff 1f       	adc	r31, r31
    60a8:	ee 0f       	add	r30, r30
    60aa:	ff 1f       	adc	r31, r31
    60ac:	ee 0f       	add	r30, r30
    60ae:	ff 1f       	adc	r31, r31
    60b0:	e4 5b       	subi	r30, 0xB4	; 180
    60b2:	f7 4d       	sbci	r31, 0xD7	; 215
    60b4:	80 83       	st	Z, r24
    60b6:	91 83       	std	Z+1, r25	; 0x01
    60b8:	cc 0f       	add	r28, r28
    60ba:	dd 1f       	adc	r29, r29
    60bc:	cc 0f       	add	r28, r28
    60be:	dd 1f       	adc	r29, r29
    60c0:	cc 0f       	add	r28, r28
    60c2:	dd 1f       	adc	r29, r29
    60c4:	c4 5c       	subi	r28, 0xC4	; 196
    60c6:	d7 4d       	sbci	r29, 0xD7	; 215
    60c8:	8a 8a       	std	Y+18, r8	; 0x12
    60ca:	9b 8a       	std	Y+19, r9	; 0x13
    60cc:	1c c0       	rjmp	.+56     	; 0x6106 <__stack+0x107>
    60ce:	f8 01       	movw	r30, r16
    60d0:	41 81       	ldd	r20, Z+1	; 0x01
    60d2:	52 81       	ldd	r21, Z+2	; 0x02
    60d4:	85 81       	ldd	r24, Z+5	; 0x05
    60d6:	96 81       	ldd	r25, Z+6	; 0x06
    60d8:	84 0f       	add	r24, r20
    60da:	95 1f       	adc	r25, r21
    60dc:	fe 01       	movw	r30, r28
    60de:	ee 0f       	add	r30, r30
    60e0:	ff 1f       	adc	r31, r31
    60e2:	ee 0f       	add	r30, r30
    60e4:	ff 1f       	adc	r31, r31
    60e6:	ee 0f       	add	r30, r30
    60e8:	ff 1f       	adc	r31, r31
    60ea:	e4 5b       	subi	r30, 0xB4	; 180
    60ec:	f7 4d       	sbci	r31, 0xD7	; 215
    60ee:	80 83       	st	Z, r24
    60f0:	91 83       	std	Z+1, r25	; 0x01
    60f2:	cc 0f       	add	r28, r28
    60f4:	dd 1f       	adc	r29, r29
    60f6:	cc 0f       	add	r28, r28
    60f8:	dd 1f       	adc	r29, r29
    60fa:	cc 0f       	add	r28, r28
    60fc:	dd 1f       	adc	r29, r29
    60fe:	c4 5c       	subi	r28, 0xC4	; 196
    6100:	d7 4d       	sbci	r29, 0xD7	; 215
    6102:	2a 8b       	std	Y+18, r18	; 0x12
    6104:	3b 8b       	std	Y+19, r19	; 0x13
    6106:	f7 01       	movw	r30, r14
    6108:	02 e0       	ldi	r16, 0x02	; 2
    610a:	06 93       	lac	Z, r16
    610c:	13 c0       	rjmp	.+38     	; 0x6134 <__stack+0x135>
    610e:	d8 01       	movw	r26, r16
    6110:	8c 91       	ld	r24, X
    6112:	80 ff       	sbrs	r24, 0
    6114:	0f c0       	rjmp	.+30     	; 0x6134 <__stack+0x135>
    6116:	8e 7f       	andi	r24, 0xFE	; 254
    6118:	8c 93       	st	X, r24
    611a:	17 96       	adiw	r26, 0x07	; 7
    611c:	ed 91       	ld	r30, X+
    611e:	fc 91       	ld	r31, X
    6120:	18 97       	sbiw	r26, 0x08	; 8
    6122:	30 97       	sbiw	r30, 0x00	; 0
    6124:	39 f0       	breq	.+14     	; 0x6134 <__stack+0x135>
    6126:	15 96       	adiw	r26, 0x05	; 5
    6128:	6d 91       	ld	r22, X+
    612a:	7c 91       	ld	r23, X
    612c:	16 97       	sbiw	r26, 0x06	; 6
    612e:	4d 2d       	mov	r20, r13
    6130:	80 e0       	ldi	r24, 0x00	; 0
    6132:	19 95       	eicall
    6134:	df 91       	pop	r29
    6136:	cf 91       	pop	r28
    6138:	1f 91       	pop	r17
    613a:	0f 91       	pop	r16
    613c:	ff 90       	pop	r15
    613e:	ef 90       	pop	r14
    6140:	df 90       	pop	r13
    6142:	bf 90       	pop	r11
    6144:	af 90       	pop	r10
    6146:	9f 90       	pop	r9
    6148:	8f 90       	pop	r8
    614a:	08 95       	ret

0000614c <udd_attach>:
    614c:	1f 93       	push	r17
    614e:	cf 93       	push	r28
    6150:	df 93       	push	r29
    6152:	1f 92       	push	r1
    6154:	cd b7       	in	r28, 0x3d	; 61
    6156:	de b7       	in	r29, 0x3e	; 62
    6158:	8f b7       	in	r24, 0x3f	; 63
    615a:	89 83       	std	Y+1, r24	; 0x01
    615c:	f8 94       	cli
    615e:	19 81       	ldd	r17, Y+1	; 0x01
    6160:	81 e0       	ldi	r24, 0x01	; 1
    6162:	cd dc       	rcall	.-1638   	; 0x5afe <udd_sleep_mode>
    6164:	ea ec       	ldi	r30, 0xCA	; 202
    6166:	f4 e0       	ldi	r31, 0x04	; 4
    6168:	80 e4       	ldi	r24, 0x40	; 64
    616a:	80 83       	st	Z, r24
    616c:	80 e2       	ldi	r24, 0x20	; 32
    616e:	80 83       	st	Z, r24
    6170:	e1 ec       	ldi	r30, 0xC1	; 193
    6172:	f4 e0       	ldi	r31, 0x04	; 4
    6174:	80 81       	ld	r24, Z
    6176:	81 60       	ori	r24, 0x01	; 1
    6178:	80 83       	st	Z, r24
    617a:	a9 ec       	ldi	r26, 0xC9	; 201
    617c:	b4 e0       	ldi	r27, 0x04	; 4
    617e:	8c 91       	ld	r24, X
    6180:	82 60       	ori	r24, 0x02	; 2
    6182:	8c 93       	st	X, r24
    6184:	e8 ec       	ldi	r30, 0xC8	; 200
    6186:	f4 e0       	ldi	r31, 0x04	; 4
    6188:	80 81       	ld	r24, Z
    618a:	80 64       	ori	r24, 0x40	; 64
    618c:	80 83       	st	Z, r24
    618e:	8c 91       	ld	r24, X
    6190:	81 60       	ori	r24, 0x01	; 1
    6192:	8c 93       	st	X, r24
    6194:	80 81       	ld	r24, Z
    6196:	80 68       	ori	r24, 0x80	; 128
    6198:	80 83       	st	Z, r24
    619a:	1f bf       	out	0x3f, r17	; 63
    619c:	0f 90       	pop	r0
    619e:	df 91       	pop	r29
    61a0:	cf 91       	pop	r28
    61a2:	1f 91       	pop	r17
    61a4:	08 95       	ret

000061a6 <udd_enable>:
    61a6:	0f 93       	push	r16
    61a8:	1f 93       	push	r17
    61aa:	cf 93       	push	r28
    61ac:	df 93       	push	r29
    61ae:	1f 92       	push	r1
    61b0:	1f 92       	push	r1
    61b2:	cd b7       	in	r28, 0x3d	; 61
    61b4:	de b7       	in	r29, 0x3e	; 62
    61b6:	00 e6       	ldi	r16, 0x60	; 96
    61b8:	10 e0       	ldi	r17, 0x00	; 0
    61ba:	f8 01       	movw	r30, r16
    61bc:	10 82       	st	Z, r1
    61be:	80 e3       	ldi	r24, 0x30	; 48
    61c0:	0e 94 20 40 	call	0x8040	; 0x8040 <sysclk_enable_usb>
    61c4:	e0 ec       	ldi	r30, 0xC0	; 192
    61c6:	f4 e0       	ldi	r31, 0x04	; 4
    61c8:	80 81       	ld	r24, Z
    61ca:	80 64       	ori	r24, 0x40	; 64
    61cc:	80 83       	st	Z, r24
    61ce:	81 e0       	ldi	r24, 0x01	; 1
    61d0:	f8 01       	movw	r30, r16
    61d2:	80 83       	st	Z, r24
    61d4:	8f b7       	in	r24, 0x3f	; 63
    61d6:	8a 83       	std	Y+2, r24	; 0x02
    61d8:	f8 94       	cli
    61da:	1a 81       	ldd	r17, Y+2	; 0x02
    61dc:	ec e3       	ldi	r30, 0x3C	; 60
    61de:	f8 e2       	ldi	r31, 0x28	; 40
    61e0:	15 86       	std	Z+13, r1	; 0x0d
    61e2:	15 8a       	std	Z+21, r1	; 0x15
    61e4:	15 8e       	std	Z+29, r1	; 0x1d
    61e6:	15 a2       	std	Z+37, r1	; 0x25
    61e8:	15 a6       	std	Z+45, r1	; 0x2d
    61ea:	15 aa       	std	Z+53, r1	; 0x35
    61ec:	e1 ed       	ldi	r30, 0xD1	; 209
    61ee:	f7 e2       	ldi	r31, 0x27	; 39
    61f0:	80 81       	ld	r24, Z
    61f2:	8e 7f       	andi	r24, 0xFE	; 254
    61f4:	80 83       	st	Z, r24
    61f6:	ea ed       	ldi	r30, 0xDA	; 218
    61f8:	f7 e2       	ldi	r31, 0x27	; 39
    61fa:	80 81       	ld	r24, Z
    61fc:	8e 7f       	andi	r24, 0xFE	; 254
    61fe:	80 83       	st	Z, r24
    6200:	e3 ee       	ldi	r30, 0xE3	; 227
    6202:	f7 e2       	ldi	r31, 0x27	; 39
    6204:	80 81       	ld	r24, Z
    6206:	8e 7f       	andi	r24, 0xFE	; 254
    6208:	80 83       	st	Z, r24
    620a:	ec ee       	ldi	r30, 0xEC	; 236
    620c:	f7 e2       	ldi	r31, 0x27	; 39
    620e:	80 81       	ld	r24, Z
    6210:	8e 7f       	andi	r24, 0xFE	; 254
    6212:	80 83       	st	Z, r24
    6214:	6a e1       	ldi	r22, 0x1A	; 26
    6216:	70 e0       	ldi	r23, 0x00	; 0
    6218:	82 e0       	ldi	r24, 0x02	; 2
    621a:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
    621e:	8f 3f       	cpi	r24, 0xFF	; 255
    6220:	19 f0       	breq	.+6      	; 0x6228 <udd_enable+0x82>
    6222:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    6226:	03 c0       	rjmp	.+6      	; 0x622e <udd_enable+0x88>
    6228:	8f e1       	ldi	r24, 0x1F	; 31
    622a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    622e:	6b e1       	ldi	r22, 0x1B	; 27
    6230:	70 e0       	ldi	r23, 0x00	; 0
    6232:	82 e0       	ldi	r24, 0x02	; 2
    6234:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
    6238:	8f 3f       	cpi	r24, 0xFF	; 255
    623a:	19 f0       	breq	.+6      	; 0x6242 <udd_enable+0x9c>
    623c:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    6240:	03 c0       	rjmp	.+6      	; 0x6248 <udd_enable+0xa2>
    6242:	8f e1       	ldi	r24, 0x1F	; 31
    6244:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    6248:	e0 ec       	ldi	r30, 0xC0	; 192
    624a:	f4 e0       	ldi	r31, 0x04	; 4
    624c:	80 81       	ld	r24, Z
    624e:	82 60       	ori	r24, 0x02	; 2
    6250:	80 83       	st	Z, r24
    6252:	80 81       	ld	r24, Z
    6254:	80 68       	ori	r24, 0x80	; 128
    6256:	80 83       	st	Z, r24
    6258:	80 81       	ld	r24, Z
    625a:	80 61       	ori	r24, 0x10	; 16
    625c:	80 83       	st	Z, r24
    625e:	88 e4       	ldi	r24, 0x48	; 72
    6260:	98 e2       	ldi	r25, 0x28	; 40
    6262:	86 83       	std	Z+6, r24	; 0x06
    6264:	97 83       	std	Z+7, r25	; 0x07
    6266:	80 81       	ld	r24, Z
    6268:	80 62       	ori	r24, 0x20	; 32
    626a:	80 83       	st	Z, r24
    626c:	8f ef       	ldi	r24, 0xFF	; 255
    626e:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    6272:	e8 ec       	ldi	r30, 0xC8	; 200
    6274:	f4 e0       	ldi	r31, 0x04	; 4
    6276:	80 81       	ld	r24, Z
    6278:	81 60       	ori	r24, 0x01	; 1
    627a:	80 83       	st	Z, r24
    627c:	10 92 7c 28 	sts	0x287C, r1	; 0x80287c <udd_b_idle>
    6280:	80 91 14 2b 	lds	r24, 0x2B14	; 0x802b14 <sleepmgr_locks+0x5>
    6284:	8f 3f       	cpi	r24, 0xFF	; 255
    6286:	09 f4       	brne	.+2      	; 0x628a <udd_enable+0xe4>
    6288:	ff cf       	rjmp	.-2      	; 0x6288 <udd_enable+0xe2>
    628a:	8f b7       	in	r24, 0x3f	; 63
    628c:	89 83       	std	Y+1, r24	; 0x01
    628e:	f8 94       	cli
    6290:	99 81       	ldd	r25, Y+1	; 0x01
    6292:	ef e0       	ldi	r30, 0x0F	; 15
    6294:	fb e2       	ldi	r31, 0x2B	; 43
    6296:	85 81       	ldd	r24, Z+5	; 0x05
    6298:	8f 5f       	subi	r24, 0xFF	; 255
    629a:	85 83       	std	Z+5, r24	; 0x05
    629c:	9f bf       	out	0x3f, r25	; 63
    629e:	56 df       	rcall	.-340    	; 0x614c <udd_attach>
    62a0:	1f bf       	out	0x3f, r17	; 63
    62a2:	0f 90       	pop	r0
    62a4:	0f 90       	pop	r0
    62a6:	df 91       	pop	r29
    62a8:	cf 91       	pop	r28
    62aa:	1f 91       	pop	r17
    62ac:	0f 91       	pop	r16
    62ae:	08 95       	ret

000062b0 <udd_is_high_speed>:
    62b0:	80 e0       	ldi	r24, 0x00	; 0
    62b2:	08 95       	ret

000062b4 <udd_set_address>:
    62b4:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    62b8:	08 95       	ret

000062ba <udd_getaddress>:
    62ba:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    62be:	08 95       	ret

000062c0 <udd_get_frame_number>:
    62c0:	80 91 78 28 	lds	r24, 0x2878	; 0x802878 <udd_sram+0x3c>
    62c4:	90 91 79 28 	lds	r25, 0x2879	; 0x802879 <udd_sram+0x3d>
    62c8:	08 95       	ret

000062ca <udd_get_micro_frame_number>:
    62ca:	80 e0       	ldi	r24, 0x00	; 0
    62cc:	90 e0       	ldi	r25, 0x00	; 0
    62ce:	08 95       	ret

000062d0 <udd_set_setup_payload>:
    62d0:	ef ef       	ldi	r30, 0xFF	; 255
    62d2:	fa e2       	ldi	r31, 0x2A	; 42
    62d4:	80 87       	std	Z+8, r24	; 0x08
    62d6:	91 87       	std	Z+9, r25	; 0x09
    62d8:	62 87       	std	Z+10, r22	; 0x0a
    62da:	73 87       	std	Z+11, r23	; 0x0b
    62dc:	08 95       	ret

000062de <udd_ep_alloc>:
    62de:	28 2f       	mov	r18, r24
    62e0:	2f 70       	andi	r18, 0x0F	; 15
    62e2:	30 e0       	ldi	r19, 0x00	; 0
    62e4:	22 0f       	add	r18, r18
    62e6:	33 1f       	adc	r19, r19
    62e8:	08 2e       	mov	r0, r24
    62ea:	00 0c       	add	r0, r0
    62ec:	99 0b       	sbc	r25, r25
    62ee:	88 27       	eor	r24, r24
    62f0:	99 0f       	add	r25, r25
    62f2:	88 1f       	adc	r24, r24
    62f4:	99 27       	eor	r25, r25
    62f6:	82 0f       	add	r24, r18
    62f8:	93 1f       	adc	r25, r19
    62fa:	fc 01       	movw	r30, r24
    62fc:	ee 0f       	add	r30, r30
    62fe:	ff 1f       	adc	r31, r31
    6300:	ee 0f       	add	r30, r30
    6302:	ff 1f       	adc	r31, r31
    6304:	ee 0f       	add	r30, r30
    6306:	ff 1f       	adc	r31, r31
    6308:	e4 5c       	subi	r30, 0xC4	; 196
    630a:	f7 4d       	sbci	r31, 0xD7	; 215
    630c:	25 85       	ldd	r18, Z+13	; 0x0d
    630e:	20 7c       	andi	r18, 0xC0	; 192
    6310:	09 f0       	breq	.+2      	; 0x6314 <udd_ep_alloc+0x36>
    6312:	69 c0       	rjmp	.+210    	; 0x63e6 <udd_ep_alloc+0x108>
    6314:	63 70       	andi	r22, 0x03	; 3
    6316:	61 30       	cpi	r22, 0x01	; 1
    6318:	11 f0       	breq	.+4      	; 0x631e <udd_ep_alloc+0x40>
    631a:	18 f4       	brcc	.+6      	; 0x6322 <udd_ep_alloc+0x44>
    631c:	04 c0       	rjmp	.+8      	; 0x6326 <udd_ep_alloc+0x48>
    631e:	60 ec       	ldi	r22, 0xC0	; 192
    6320:	03 c0       	rjmp	.+6      	; 0x6328 <udd_ep_alloc+0x4a>
    6322:	60 e8       	ldi	r22, 0x80	; 128
    6324:	01 c0       	rjmp	.+2      	; 0x6328 <udd_ep_alloc+0x4a>
    6326:	60 e4       	ldi	r22, 0x40	; 64
    6328:	40 38       	cpi	r20, 0x80	; 128
    632a:	51 05       	cpc	r21, r1
    632c:	e9 f0       	breq	.+58     	; 0x6368 <udd_ep_alloc+0x8a>
    632e:	50 f4       	brcc	.+20     	; 0x6344 <udd_ep_alloc+0x66>
    6330:	40 32       	cpi	r20, 0x20	; 32
    6332:	51 05       	cpc	r21, r1
    6334:	a9 f0       	breq	.+42     	; 0x6360 <udd_ep_alloc+0x82>
    6336:	40 34       	cpi	r20, 0x40	; 64
    6338:	51 05       	cpc	r21, r1
    633a:	a1 f0       	breq	.+40     	; 0x6364 <udd_ep_alloc+0x86>
    633c:	40 31       	cpi	r20, 0x10	; 16
    633e:	51 05       	cpc	r21, r1
    6340:	d9 f4       	brne	.+54     	; 0x6378 <udd_ep_alloc+0x9a>
    6342:	0c c0       	rjmp	.+24     	; 0x635c <udd_ep_alloc+0x7e>
    6344:	41 15       	cp	r20, r1
    6346:	22 e0       	ldi	r18, 0x02	; 2
    6348:	52 07       	cpc	r21, r18
    634a:	91 f0       	breq	.+36     	; 0x6370 <udd_ep_alloc+0x92>
    634c:	4f 3f       	cpi	r20, 0xFF	; 255
    634e:	23 e0       	ldi	r18, 0x03	; 3
    6350:	52 07       	cpc	r21, r18
    6352:	81 f0       	breq	.+32     	; 0x6374 <udd_ep_alloc+0x96>
    6354:	41 15       	cp	r20, r1
    6356:	51 40       	sbci	r21, 0x01	; 1
    6358:	79 f4       	brne	.+30     	; 0x6378 <udd_ep_alloc+0x9a>
    635a:	08 c0       	rjmp	.+16     	; 0x636c <udd_ep_alloc+0x8e>
    635c:	21 e0       	ldi	r18, 0x01	; 1
    635e:	0d c0       	rjmp	.+26     	; 0x637a <udd_ep_alloc+0x9c>
    6360:	22 e0       	ldi	r18, 0x02	; 2
    6362:	0b c0       	rjmp	.+22     	; 0x637a <udd_ep_alloc+0x9c>
    6364:	23 e0       	ldi	r18, 0x03	; 3
    6366:	09 c0       	rjmp	.+18     	; 0x637a <udd_ep_alloc+0x9c>
    6368:	24 e0       	ldi	r18, 0x04	; 4
    636a:	07 c0       	rjmp	.+14     	; 0x637a <udd_ep_alloc+0x9c>
    636c:	25 e0       	ldi	r18, 0x05	; 5
    636e:	05 c0       	rjmp	.+10     	; 0x637a <udd_ep_alloc+0x9c>
    6370:	26 e0       	ldi	r18, 0x06	; 6
    6372:	03 c0       	rjmp	.+6      	; 0x637a <udd_ep_alloc+0x9c>
    6374:	27 e0       	ldi	r18, 0x07	; 7
    6376:	01 c0       	rjmp	.+2      	; 0x637a <udd_ep_alloc+0x9c>
    6378:	20 e0       	ldi	r18, 0x00	; 0
    637a:	fc 01       	movw	r30, r24
    637c:	ee 0f       	add	r30, r30
    637e:	ff 1f       	adc	r31, r31
    6380:	ee 0f       	add	r30, r30
    6382:	ff 1f       	adc	r31, r31
    6384:	ee 0f       	add	r30, r30
    6386:	ff 1f       	adc	r31, r31
    6388:	e4 5c       	subi	r30, 0xC4	; 196
    638a:	f7 4d       	sbci	r31, 0xD7	; 215
    638c:	15 86       	std	Z+13, r1	; 0x0d
    638e:	36 e0       	ldi	r19, 0x06	; 6
    6390:	34 87       	std	Z+12, r19	; 0x0c
    6392:	26 2b       	or	r18, r22
    6394:	25 87       	std	Z+13, r18	; 0x0d
    6396:	fc 01       	movw	r30, r24
    6398:	ee 0f       	add	r30, r30
    639a:	ff 1f       	adc	r31, r31
    639c:	ee 0f       	add	r30, r30
    639e:	ff 1f       	adc	r31, r31
    63a0:	ee 0f       	add	r30, r30
    63a2:	ff 1f       	adc	r31, r31
    63a4:	e4 5c       	subi	r30, 0xC4	; 196
    63a6:	f7 4d       	sbci	r31, 0xD7	; 215
    63a8:	25 85       	ldd	r18, Z+13	; 0x0d
    63aa:	20 7c       	andi	r18, 0xC0	; 192
    63ac:	20 3c       	cpi	r18, 0xC0	; 192
    63ae:	69 f4       	brne	.+26     	; 0x63ca <udd_ep_alloc+0xec>
    63b0:	fc 01       	movw	r30, r24
    63b2:	ee 0f       	add	r30, r30
    63b4:	ff 1f       	adc	r31, r31
    63b6:	ee 0f       	add	r30, r30
    63b8:	ff 1f       	adc	r31, r31
    63ba:	ee 0f       	add	r30, r30
    63bc:	ff 1f       	adc	r31, r31
    63be:	e4 5c       	subi	r30, 0xC4	; 196
    63c0:	f7 4d       	sbci	r31, 0xD7	; 215
    63c2:	25 85       	ldd	r18, Z+13	; 0x0d
    63c4:	27 70       	andi	r18, 0x07	; 7
    63c6:	27 30       	cpi	r18, 0x07	; 7
    63c8:	81 f0       	breq	.+32     	; 0x63ea <udd_ep_alloc+0x10c>
    63ca:	88 0f       	add	r24, r24
    63cc:	99 1f       	adc	r25, r25
    63ce:	88 0f       	add	r24, r24
    63d0:	99 1f       	adc	r25, r25
    63d2:	88 0f       	add	r24, r24
    63d4:	99 1f       	adc	r25, r25
    63d6:	fc 01       	movw	r30, r24
    63d8:	e4 5c       	subi	r30, 0xC4	; 196
    63da:	f7 4d       	sbci	r31, 0xD7	; 215
    63dc:	85 85       	ldd	r24, Z+13	; 0x0d
    63de:	80 62       	ori	r24, 0x20	; 32
    63e0:	85 87       	std	Z+13, r24	; 0x0d
    63e2:	81 e0       	ldi	r24, 0x01	; 1
    63e4:	08 95       	ret
    63e6:	80 e0       	ldi	r24, 0x00	; 0
    63e8:	08 95       	ret
    63ea:	81 e0       	ldi	r24, 0x01	; 1
    63ec:	08 95       	ret

000063ee <udd_ep_is_halted>:
    63ee:	e8 2f       	mov	r30, r24
    63f0:	ef 70       	andi	r30, 0x0F	; 15
    63f2:	f0 e0       	ldi	r31, 0x00	; 0
    63f4:	ee 0f       	add	r30, r30
    63f6:	ff 1f       	adc	r31, r31
    63f8:	08 2e       	mov	r0, r24
    63fa:	00 0c       	add	r0, r0
    63fc:	99 0b       	sbc	r25, r25
    63fe:	88 27       	eor	r24, r24
    6400:	99 0f       	add	r25, r25
    6402:	88 1f       	adc	r24, r24
    6404:	99 27       	eor	r25, r25
    6406:	e8 0f       	add	r30, r24
    6408:	f9 1f       	adc	r31, r25
    640a:	ee 0f       	add	r30, r30
    640c:	ff 1f       	adc	r31, r31
    640e:	ee 0f       	add	r30, r30
    6410:	ff 1f       	adc	r31, r31
    6412:	ee 0f       	add	r30, r30
    6414:	ff 1f       	adc	r31, r31
    6416:	e4 5c       	subi	r30, 0xC4	; 196
    6418:	f7 4d       	sbci	r31, 0xD7	; 215
    641a:	85 85       	ldd	r24, Z+13	; 0x0d
    641c:	82 fb       	bst	r24, 2
    641e:	88 27       	eor	r24, r24
    6420:	80 f9       	bld	r24, 0
    6422:	08 95       	ret

00006424 <udd_ep_clear_halt>:
    6424:	0f 93       	push	r16
    6426:	28 2f       	mov	r18, r24
    6428:	2f 70       	andi	r18, 0x0F	; 15
    642a:	30 e0       	ldi	r19, 0x00	; 0
    642c:	a9 01       	movw	r20, r18
    642e:	44 0f       	add	r20, r20
    6430:	55 1f       	adc	r21, r21
    6432:	28 2f       	mov	r18, r24
    6434:	08 2e       	mov	r0, r24
    6436:	00 0c       	add	r0, r0
    6438:	33 0b       	sbc	r19, r19
    643a:	22 27       	eor	r18, r18
    643c:	33 0f       	add	r19, r19
    643e:	22 1f       	adc	r18, r18
    6440:	33 27       	eor	r19, r19
    6442:	24 0f       	add	r18, r20
    6444:	35 1f       	adc	r19, r21
    6446:	a9 01       	movw	r20, r18
    6448:	44 0f       	add	r20, r20
    644a:	55 1f       	adc	r21, r21
    644c:	44 0f       	add	r20, r20
    644e:	55 1f       	adc	r21, r21
    6450:	44 0f       	add	r20, r20
    6452:	55 1f       	adc	r21, r21
    6454:	fa 01       	movw	r30, r20
    6456:	e8 5b       	subi	r30, 0xB8	; 184
    6458:	f7 4d       	sbci	r31, 0xD7	; 215
    645a:	01 e0       	ldi	r16, 0x01	; 1
    645c:	06 93       	lac	Z, r16
    645e:	fa 01       	movw	r30, r20
    6460:	e4 5c       	subi	r30, 0xC4	; 196
    6462:	f7 4d       	sbci	r31, 0xD7	; 215
    6464:	95 85       	ldd	r25, Z+13	; 0x0d
    6466:	92 ff       	sbrs	r25, 2
    6468:	11 c0       	rjmp	.+34     	; 0x648c <udd_ep_clear_halt+0x68>
    646a:	fa 01       	movw	r30, r20
    646c:	e4 5c       	subi	r30, 0xC4	; 196
    646e:	f7 4d       	sbci	r31, 0xD7	; 215
    6470:	95 85       	ldd	r25, Z+13	; 0x0d
    6472:	9b 7f       	andi	r25, 0xFB	; 251
    6474:	95 87       	std	Z+13, r25	; 0x0d
    6476:	59 dc       	rcall	.-1870   	; 0x5d2a <udd_ep_get_job>
    6478:	fc 01       	movw	r30, r24
    647a:	80 81       	ld	r24, Z
    647c:	80 ff       	sbrs	r24, 0
    647e:	06 c0       	rjmp	.+12     	; 0x648c <udd_ep_clear_halt+0x68>
    6480:	8e 7f       	andi	r24, 0xFE	; 254
    6482:	80 83       	st	Z, r24
    6484:	07 80       	ldd	r0, Z+7	; 0x07
    6486:	f0 85       	ldd	r31, Z+8	; 0x08
    6488:	e0 2d       	mov	r30, r0
    648a:	19 95       	eicall
    648c:	81 e0       	ldi	r24, 0x01	; 1
    648e:	0f 91       	pop	r16
    6490:	08 95       	ret

00006492 <udd_ep_run>:
    6492:	6f 92       	push	r6
    6494:	7f 92       	push	r7
    6496:	8f 92       	push	r8
    6498:	9f 92       	push	r9
    649a:	af 92       	push	r10
    649c:	bf 92       	push	r11
    649e:	cf 92       	push	r12
    64a0:	df 92       	push	r13
    64a2:	ef 92       	push	r14
    64a4:	ff 92       	push	r15
    64a6:	0f 93       	push	r16
    64a8:	1f 93       	push	r17
    64aa:	cf 93       	push	r28
    64ac:	df 93       	push	r29
    64ae:	1f 92       	push	r1
    64b0:	cd b7       	in	r28, 0x3d	; 61
    64b2:	de b7       	in	r29, 0x3e	; 62
    64b4:	78 2e       	mov	r7, r24
    64b6:	66 2e       	mov	r6, r22
    64b8:	4a 01       	movw	r8, r20
    64ba:	59 01       	movw	r10, r18
    64bc:	36 dc       	rcall	.-1940   	; 0x5d2a <udd_ep_get_job>
    64be:	6c 01       	movw	r12, r24
    64c0:	27 2d       	mov	r18, r7
    64c2:	87 2d       	mov	r24, r7
    64c4:	8f 70       	andi	r24, 0x0F	; 15
    64c6:	e8 2e       	mov	r14, r24
    64c8:	f1 2c       	mov	r15, r1
    64ca:	c7 01       	movw	r24, r14
    64cc:	88 0f       	add	r24, r24
    64ce:	99 1f       	adc	r25, r25
    64d0:	e7 2c       	mov	r14, r7
    64d2:	07 2c       	mov	r0, r7
    64d4:	00 0c       	add	r0, r0
    64d6:	ff 08       	sbc	r15, r15
    64d8:	ee 24       	eor	r14, r14
    64da:	ff 0c       	add	r15, r15
    64dc:	ee 1c       	adc	r14, r14
    64de:	ff 24       	eor	r15, r15
    64e0:	e8 0e       	add	r14, r24
    64e2:	f9 1e       	adc	r15, r25
    64e4:	f7 01       	movw	r30, r14
    64e6:	ee 0f       	add	r30, r30
    64e8:	ff 1f       	adc	r31, r31
    64ea:	ee 0f       	add	r30, r30
    64ec:	ff 1f       	adc	r31, r31
    64ee:	ee 0f       	add	r30, r30
    64f0:	ff 1f       	adc	r31, r31
    64f2:	e4 5c       	subi	r30, 0xC4	; 196
    64f4:	f7 4d       	sbci	r31, 0xD7	; 215
    64f6:	85 85       	ldd	r24, Z+13	; 0x0d
    64f8:	80 7c       	andi	r24, 0xC0	; 192
    64fa:	09 f4       	brne	.+2      	; 0x64fe <udd_ep_run+0x6c>
    64fc:	82 c0       	rjmp	.+260    	; 0x6602 <udd_ep_run+0x170>
    64fe:	f7 01       	movw	r30, r14
    6500:	ee 0f       	add	r30, r30
    6502:	ff 1f       	adc	r31, r31
    6504:	ee 0f       	add	r30, r30
    6506:	ff 1f       	adc	r31, r31
    6508:	ee 0f       	add	r30, r30
    650a:	ff 1f       	adc	r31, r31
    650c:	e4 5c       	subi	r30, 0xC4	; 196
    650e:	f7 4d       	sbci	r31, 0xD7	; 215
    6510:	85 85       	ldd	r24, Z+13	; 0x0d
    6512:	80 7c       	andi	r24, 0xC0	; 192
    6514:	80 3c       	cpi	r24, 0xC0	; 192
    6516:	61 f0       	breq	.+24     	; 0x6530 <udd_ep_run+0x9e>
    6518:	f7 01       	movw	r30, r14
    651a:	ee 0f       	add	r30, r30
    651c:	ff 1f       	adc	r31, r31
    651e:	ee 0f       	add	r30, r30
    6520:	ff 1f       	adc	r31, r31
    6522:	ee 0f       	add	r30, r30
    6524:	ff 1f       	adc	r31, r31
    6526:	e4 5c       	subi	r30, 0xC4	; 196
    6528:	f7 4d       	sbci	r31, 0xD7	; 215
    652a:	85 85       	ldd	r24, Z+13	; 0x0d
    652c:	82 fd       	sbrc	r24, 2
    652e:	6b c0       	rjmp	.+214    	; 0x6606 <udd_ep_run+0x174>
    6530:	8f b7       	in	r24, 0x3f	; 63
    6532:	89 83       	std	Y+1, r24	; 0x01
    6534:	f8 94       	cli
    6536:	89 81       	ldd	r24, Y+1	; 0x01
    6538:	f6 01       	movw	r30, r12
    653a:	90 81       	ld	r25, Z
    653c:	90 ff       	sbrs	r25, 0
    653e:	03 c0       	rjmp	.+6      	; 0x6546 <udd_ep_run+0xb4>
    6540:	8f bf       	out	0x3f, r24	; 63
    6542:	80 e0       	ldi	r24, 0x00	; 0
    6544:	61 c0       	rjmp	.+194    	; 0x6608 <udd_ep_run+0x176>
    6546:	f6 01       	movw	r30, r12
    6548:	90 81       	ld	r25, Z
    654a:	91 60       	ori	r25, 0x01	; 1
    654c:	90 83       	st	Z, r25
    654e:	8f bf       	out	0x3f, r24	; 63
    6550:	81 82       	std	Z+1, r8	; 0x01
    6552:	92 82       	std	Z+2, r9	; 0x02
    6554:	a3 82       	std	Z+3, r10	; 0x03
    6556:	b4 82       	std	Z+4, r11	; 0x04
    6558:	15 82       	std	Z+5, r1	; 0x05
    655a:	16 82       	std	Z+6, r1	; 0x06
    655c:	07 83       	std	Z+7, r16	; 0x07
    655e:	10 87       	std	Z+8, r17	; 0x08
    6560:	61 10       	cpse	r6, r1
    6562:	06 c0       	rjmp	.+12     	; 0x6570 <udd_ep_run+0xde>
    6564:	91 e0       	ldi	r25, 0x01	; 1
    6566:	a1 14       	cp	r10, r1
    6568:	b1 04       	cpc	r11, r1
    656a:	19 f0       	breq	.+6      	; 0x6572 <udd_ep_run+0xe0>
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	01 c0       	rjmp	.+2      	; 0x6572 <udd_ep_run+0xe0>
    6570:	91 e0       	ldi	r25, 0x01	; 1
    6572:	f6 01       	movw	r30, r12
    6574:	80 81       	ld	r24, Z
    6576:	90 fb       	bst	r25, 0
    6578:	81 f9       	bld	r24, 1
    657a:	8b 7f       	andi	r24, 0xFB	; 251
    657c:	80 83       	st	Z, r24
    657e:	22 23       	and	r18, r18
    6580:	64 f4       	brge	.+24     	; 0x659a <udd_ep_run+0x108>
    6582:	f7 01       	movw	r30, r14
    6584:	ee 0f       	add	r30, r30
    6586:	ff 1f       	adc	r31, r31
    6588:	ee 0f       	add	r30, r30
    658a:	ff 1f       	adc	r31, r31
    658c:	ee 0f       	add	r30, r30
    658e:	ff 1f       	adc	r31, r31
    6590:	e4 5c       	subi	r30, 0xC4	; 196
    6592:	f7 4d       	sbci	r31, 0xD7	; 215
    6594:	12 8a       	std	Z+18, r1	; 0x12
    6596:	13 8a       	std	Z+19, r1	; 0x13
    6598:	30 c0       	rjmp	.+96     	; 0x65fa <udd_ep_run+0x168>
    659a:	f7 01       	movw	r30, r14
    659c:	ee 0f       	add	r30, r30
    659e:	ff 1f       	adc	r31, r31
    65a0:	ee 0f       	add	r30, r30
    65a2:	ff 1f       	adc	r31, r31
    65a4:	ee 0f       	add	r30, r30
    65a6:	ff 1f       	adc	r31, r31
    65a8:	e4 5c       	subi	r30, 0xC4	; 196
    65aa:	f7 4d       	sbci	r31, 0xD7	; 215
    65ac:	85 85       	ldd	r24, Z+13	; 0x0d
    65ae:	80 7c       	andi	r24, 0xC0	; 192
    65b0:	80 3c       	cpi	r24, 0xC0	; 192
    65b2:	b1 f4       	brne	.+44     	; 0x65e0 <udd_ep_run+0x14e>
    65b4:	c7 01       	movw	r24, r14
    65b6:	88 0f       	add	r24, r24
    65b8:	99 1f       	adc	r25, r25
    65ba:	88 0f       	add	r24, r24
    65bc:	99 1f       	adc	r25, r25
    65be:	88 0f       	add	r24, r24
    65c0:	99 1f       	adc	r25, r25
    65c2:	88 5b       	subi	r24, 0xB8	; 184
    65c4:	97 4d       	sbci	r25, 0xD7	; 215
    65c6:	88 db       	rcall	.-2288   	; 0x5cd8 <udd_ep_get_size>
    65c8:	bc 01       	movw	r22, r24
    65ca:	c5 01       	movw	r24, r10
    65cc:	0e 94 1d 48 	call	0x903a	; 0x903a <__udivmodhi4>
    65d0:	89 2b       	or	r24, r25
    65d2:	31 f0       	breq	.+12     	; 0x65e0 <udd_ep_run+0x14e>
    65d4:	f6 01       	movw	r30, r12
    65d6:	80 81       	ld	r24, Z
    65d8:	8e 7f       	andi	r24, 0xFE	; 254
    65da:	80 83       	st	Z, r24
    65dc:	80 e0       	ldi	r24, 0x00	; 0
    65de:	14 c0       	rjmp	.+40     	; 0x6608 <udd_ep_run+0x176>
    65e0:	f7 01       	movw	r30, r14
    65e2:	ee 0f       	add	r30, r30
    65e4:	ff 1f       	adc	r31, r31
    65e6:	ee 0f       	add	r30, r30
    65e8:	ff 1f       	adc	r31, r31
    65ea:	ee 0f       	add	r30, r30
    65ec:	ff 1f       	adc	r31, r31
    65ee:	e4 5c       	subi	r30, 0xC4	; 196
    65f0:	f7 4d       	sbci	r31, 0xD7	; 215
    65f2:	16 86       	std	Z+14, r1	; 0x0e
    65f4:	17 86       	std	Z+15, r1	; 0x0f
    65f6:	12 8a       	std	Z+18, r1	; 0x12
    65f8:	13 8a       	std	Z+19, r1	; 0x13
    65fa:	87 2d       	mov	r24, r7
    65fc:	23 dc       	rcall	.-1978   	; 0x5e44 <udd_ep_trans_complet>
    65fe:	81 e0       	ldi	r24, 0x01	; 1
    6600:	03 c0       	rjmp	.+6      	; 0x6608 <udd_ep_run+0x176>
    6602:	80 e0       	ldi	r24, 0x00	; 0
    6604:	01 c0       	rjmp	.+2      	; 0x6608 <udd_ep_run+0x176>
    6606:	80 e0       	ldi	r24, 0x00	; 0
    6608:	0f 90       	pop	r0
    660a:	df 91       	pop	r29
    660c:	cf 91       	pop	r28
    660e:	1f 91       	pop	r17
    6610:	0f 91       	pop	r16
    6612:	ff 90       	pop	r15
    6614:	ef 90       	pop	r14
    6616:	df 90       	pop	r13
    6618:	cf 90       	pop	r12
    661a:	bf 90       	pop	r11
    661c:	af 90       	pop	r10
    661e:	9f 90       	pop	r9
    6620:	8f 90       	pop	r8
    6622:	7f 90       	pop	r7
    6624:	6f 90       	pop	r6
    6626:	08 95       	ret

00006628 <udd_ep_abort>:
    6628:	ff 92       	push	r15
    662a:	0f 93       	push	r16
    662c:	1f 93       	push	r17
    662e:	cf 93       	push	r28
    6630:	df 93       	push	r29
    6632:	18 2f       	mov	r17, r24
    6634:	c8 2f       	mov	r28, r24
    6636:	cf 70       	andi	r28, 0x0F	; 15
    6638:	d0 e0       	ldi	r29, 0x00	; 0
    663a:	ce 01       	movw	r24, r28
    663c:	88 0f       	add	r24, r24
    663e:	99 1f       	adc	r25, r25
    6640:	c1 2f       	mov	r28, r17
    6642:	01 2e       	mov	r0, r17
    6644:	00 0c       	add	r0, r0
    6646:	dd 0b       	sbc	r29, r29
    6648:	cc 27       	eor	r28, r28
    664a:	dd 0f       	add	r29, r29
    664c:	cc 1f       	adc	r28, r28
    664e:	dd 27       	eor	r29, r29
    6650:	c8 0f       	add	r28, r24
    6652:	d9 1f       	adc	r29, r25
    6654:	81 2f       	mov	r24, r17
    6656:	69 db       	rcall	.-2350   	; 0x5d2a <udd_ep_get_job>
    6658:	dc 01       	movw	r26, r24
    665a:	fe 01       	movw	r30, r28
    665c:	ee 0f       	add	r30, r30
    665e:	ff 1f       	adc	r31, r31
    6660:	ee 0f       	add	r30, r30
    6662:	ff 1f       	adc	r31, r31
    6664:	ee 0f       	add	r30, r30
    6666:	ff 1f       	adc	r31, r31
    6668:	e8 5b       	subi	r30, 0xB8	; 184
    666a:	f7 4d       	sbci	r31, 0xD7	; 215
    666c:	02 e0       	ldi	r16, 0x02	; 2
    666e:	05 93       	las	Z, r16
    6670:	8c 91       	ld	r24, X
    6672:	80 ff       	sbrs	r24, 0
    6674:	22 c0       	rjmp	.+68     	; 0x66ba <udd_ep_abort+0x92>
    6676:	8e 7f       	andi	r24, 0xFE	; 254
    6678:	8c 93       	st	X, r24
    667a:	17 96       	adiw	r26, 0x07	; 7
    667c:	ed 91       	ld	r30, X+
    667e:	fc 91       	ld	r31, X
    6680:	18 97       	sbiw	r26, 0x08	; 8
    6682:	30 97       	sbiw	r30, 0x00	; 0
    6684:	d1 f0       	breq	.+52     	; 0x66ba <udd_ep_abort+0x92>
    6686:	11 23       	and	r17, r17
    6688:	5c f4       	brge	.+22     	; 0x66a0 <udd_ep_abort+0x78>
    668a:	cc 0f       	add	r28, r28
    668c:	dd 1f       	adc	r29, r29
    668e:	cc 0f       	add	r28, r28
    6690:	dd 1f       	adc	r29, r29
    6692:	cc 0f       	add	r28, r28
    6694:	dd 1f       	adc	r29, r29
    6696:	c4 5c       	subi	r28, 0xC4	; 196
    6698:	d7 4d       	sbci	r29, 0xD7	; 215
    669a:	6a 89       	ldd	r22, Y+18	; 0x12
    669c:	7b 89       	ldd	r23, Y+19	; 0x13
    669e:	0a c0       	rjmp	.+20     	; 0x66b4 <udd_ep_abort+0x8c>
    66a0:	cc 0f       	add	r28, r28
    66a2:	dd 1f       	adc	r29, r29
    66a4:	cc 0f       	add	r28, r28
    66a6:	dd 1f       	adc	r29, r29
    66a8:	cc 0f       	add	r28, r28
    66aa:	dd 1f       	adc	r29, r29
    66ac:	c4 5c       	subi	r28, 0xC4	; 196
    66ae:	d7 4d       	sbci	r29, 0xD7	; 215
    66b0:	6e 85       	ldd	r22, Y+14	; 0x0e
    66b2:	7f 85       	ldd	r23, Y+15	; 0x0f
    66b4:	41 2f       	mov	r20, r17
    66b6:	81 e0       	ldi	r24, 0x01	; 1
    66b8:	19 95       	eicall
    66ba:	df 91       	pop	r29
    66bc:	cf 91       	pop	r28
    66be:	1f 91       	pop	r17
    66c0:	0f 91       	pop	r16
    66c2:	ff 90       	pop	r15
    66c4:	08 95       	ret

000066c6 <udd_ep_free>:
    66c6:	cf 93       	push	r28
    66c8:	c8 2f       	mov	r28, r24
    66ca:	ae df       	rcall	.-164    	; 0x6628 <udd_ep_abort>
    66cc:	ec 2f       	mov	r30, r28
    66ce:	ef 70       	andi	r30, 0x0F	; 15
    66d0:	f0 e0       	ldi	r31, 0x00	; 0
    66d2:	ee 0f       	add	r30, r30
    66d4:	ff 1f       	adc	r31, r31
    66d6:	8c 2f       	mov	r24, r28
    66d8:	cc 0f       	add	r28, r28
    66da:	99 0b       	sbc	r25, r25
    66dc:	88 27       	eor	r24, r24
    66de:	99 0f       	add	r25, r25
    66e0:	88 1f       	adc	r24, r24
    66e2:	99 27       	eor	r25, r25
    66e4:	e8 0f       	add	r30, r24
    66e6:	f9 1f       	adc	r31, r25
    66e8:	ee 0f       	add	r30, r30
    66ea:	ff 1f       	adc	r31, r31
    66ec:	ee 0f       	add	r30, r30
    66ee:	ff 1f       	adc	r31, r31
    66f0:	ee 0f       	add	r30, r30
    66f2:	ff 1f       	adc	r31, r31
    66f4:	e4 5c       	subi	r30, 0xC4	; 196
    66f6:	f7 4d       	sbci	r31, 0xD7	; 215
    66f8:	15 86       	std	Z+13, r1	; 0x0d
    66fa:	cf 91       	pop	r28
    66fc:	08 95       	ret

000066fe <udd_ep_set_halt>:
    66fe:	e8 2f       	mov	r30, r24
    6700:	ef 70       	andi	r30, 0x0F	; 15
    6702:	f0 e0       	ldi	r31, 0x00	; 0
    6704:	ee 0f       	add	r30, r30
    6706:	ff 1f       	adc	r31, r31
    6708:	28 2f       	mov	r18, r24
    670a:	08 2e       	mov	r0, r24
    670c:	00 0c       	add	r0, r0
    670e:	33 0b       	sbc	r19, r19
    6710:	22 27       	eor	r18, r18
    6712:	33 0f       	add	r19, r19
    6714:	22 1f       	adc	r18, r18
    6716:	33 27       	eor	r19, r19
    6718:	e2 0f       	add	r30, r18
    671a:	f3 1f       	adc	r31, r19
    671c:	ee 0f       	add	r30, r30
    671e:	ff 1f       	adc	r31, r31
    6720:	ee 0f       	add	r30, r30
    6722:	ff 1f       	adc	r31, r31
    6724:	ee 0f       	add	r30, r30
    6726:	ff 1f       	adc	r31, r31
    6728:	e4 5c       	subi	r30, 0xC4	; 196
    672a:	f7 4d       	sbci	r31, 0xD7	; 215
    672c:	95 85       	ldd	r25, Z+13	; 0x0d
    672e:	94 60       	ori	r25, 0x04	; 4
    6730:	95 87       	std	Z+13, r25	; 0x0d
    6732:	7a df       	rcall	.-268    	; 0x6628 <udd_ep_abort>
    6734:	81 e0       	ldi	r24, 0x01	; 1
    6736:	08 95       	ret

00006738 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    6738:	1f 92       	push	r1
    673a:	0f 92       	push	r0
    673c:	0f b6       	in	r0, 0x3f	; 63
    673e:	0f 92       	push	r0
    6740:	11 24       	eor	r1, r1
    6742:	0b b6       	in	r0, 0x3b	; 59
    6744:	0f 92       	push	r0
    6746:	0f 93       	push	r16
    6748:	2f 93       	push	r18
    674a:	3f 93       	push	r19
    674c:	4f 93       	push	r20
    674e:	5f 93       	push	r21
    6750:	6f 93       	push	r22
    6752:	7f 93       	push	r23
    6754:	8f 93       	push	r24
    6756:	9f 93       	push	r25
    6758:	af 93       	push	r26
    675a:	bf 93       	push	r27
    675c:	ef 93       	push	r30
    675e:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    6760:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    6764:	88 23       	and	r24, r24
    6766:	34 f4       	brge	.+12     	; 0x6774 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    6768:	80 e8       	ldi	r24, 0x80	; 128
    676a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    676e:	0e 94 ae 44 	call	0x895c	; 0x895c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    6772:	88 c0       	rjmp	.+272    	; 0x6884 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    6774:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    6778:	82 ff       	sbrs	r24, 2
    677a:	20 c0       	rjmp	.+64     	; 0x67bc <__vector_125+0x84>
		udd_ack_underflow_event();
    677c:	84 e0       	ldi	r24, 0x04	; 4
    677e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    6782:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <udd_sram+0x14>
    6786:	86 ff       	sbrs	r24, 6
    6788:	7d c0       	rjmp	.+250    	; 0x6884 <__vector_125+0x14c>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    678a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    678e:	81 fd       	sbrc	r24, 1
    6790:	79 c0       	rjmp	.+242    	; 0x6884 <__vector_125+0x14c>
    6792:	e6 da       	rcall	.-2612   	; 0x5d60 <udd_ctrl_interrupt_tc_setup>
    6794:	81 11       	cpse	r24, r1
    6796:	76 c0       	rjmp	.+236    	; 0x6884 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    6798:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <udd_ep_control_state>
    679c:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    679e:	11 f4       	brne	.+4      	; 0x67a4 <__vector_125+0x6c>
    67a0:	19 da       	rcall	.-3022   	; 0x5bd4 <udd_ctrl_send_zlp_in>
    67a2:	70 c0       	rjmp	.+224    	; 0x6884 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    67a4:	84 30       	cpi	r24, 0x04	; 4
    67a6:	09 f0       	breq	.+2      	; 0x67aa <__vector_125+0x72>
    67a8:	6d c0       	rjmp	.+218    	; 0x6884 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    67aa:	e1 e5       	ldi	r30, 0x51	; 81
    67ac:	f8 e2       	ldi	r31, 0x28	; 40
    67ae:	04 e0       	ldi	r16, 0x04	; 4
    67b0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    67b2:	e9 e4       	ldi	r30, 0x49	; 73
    67b4:	f8 e2       	ldi	r31, 0x28	; 40
    67b6:	04 e0       	ldi	r16, 0x04	; 4
    67b8:	05 93       	las	Z, r16
    67ba:	64 c0       	rjmp	.+200    	; 0x6884 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    67bc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    67c0:	81 ff       	sbrs	r24, 1
    67c2:	5b c0       	rjmp	.+182    	; 0x687a <__vector_125+0x142>
		udd_ack_overflow_event();
    67c4:	82 e0       	ldi	r24, 0x02	; 2
    67c6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    67ca:	80 91 48 28 	lds	r24, 0x2848	; 0x802848 <udd_sram+0xc>
    67ce:	86 ff       	sbrs	r24, 6
    67d0:	59 c0       	rjmp	.+178    	; 0x6884 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    67d2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    67d6:	81 fd       	sbrc	r24, 1
    67d8:	55 c0       	rjmp	.+170    	; 0x6884 <__vector_125+0x14c>
    67da:	c2 da       	rcall	.-2684   	; 0x5d60 <udd_ctrl_interrupt_tc_setup>
    67dc:	81 11       	cpse	r24, r1
    67de:	52 c0       	rjmp	.+164    	; 0x6884 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    67e0:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <udd_ep_control_state>
    67e4:	82 30       	cpi	r24, 0x02	; 2
    67e6:	41 f4       	brne	.+16     	; 0x67f8 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    67e8:	84 e0       	ldi	r24, 0x04	; 4
    67ea:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    67ee:	e8 e4       	ldi	r30, 0x48	; 72
    67f0:	f8 e2       	ldi	r31, 0x28	; 40
    67f2:	02 e0       	ldi	r16, 0x02	; 2
    67f4:	06 93       	lac	Z, r16
    67f6:	46 c0       	rjmp	.+140    	; 0x6884 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    67f8:	83 30       	cpi	r24, 0x03	; 3
    67fa:	09 f0       	breq	.+2      	; 0x67fe <__vector_125+0xc6>
    67fc:	43 c0       	rjmp	.+134    	; 0x6884 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    67fe:	e1 e5       	ldi	r30, 0x51	; 81
    6800:	f8 e2       	ldi	r31, 0x28	; 40
    6802:	04 e0       	ldi	r16, 0x04	; 4
    6804:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    6806:	e9 e4       	ldi	r30, 0x49	; 73
    6808:	f8 e2       	ldi	r31, 0x28	; 40
    680a:	04 e0       	ldi	r16, 0x04	; 4
    680c:	05 93       	las	Z, r16
    680e:	3a c0       	rjmp	.+116    	; 0x6884 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    6810:	80 e1       	ldi	r24, 0x10	; 16
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    6812:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
			udd_ep_abort(i | USB_EP_DIR_IN);
    6816:	81 e0       	ldi	r24, 0x01	; 1
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    6818:	07 df       	rcall	.-498    	; 0x6628 <udd_ep_abort>
    681a:	81 e8       	ldi	r24, 0x81	; 129
    681c:	05 df       	rcall	.-502    	; 0x6628 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    681e:	82 e0       	ldi	r24, 0x02	; 2
    6820:	03 df       	rcall	.-506    	; 0x6628 <udd_ep_abort>
    6822:	82 e8       	ldi	r24, 0x82	; 130
		}
#endif
		udc_reset();
    6824:	01 df       	rcall	.-510    	; 0x6628 <udd_ep_abort>
    6826:	0e 94 84 44 	call	0x8908	; 0x8908 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    682a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    682e:	ec e3       	ldi	r30, 0x3C	; 60
    6830:	f8 e2       	ldi	r31, 0x28	; 40
	udd_endpoint_clear_status(ep_ctrl);
    6832:	15 86       	std	Z+13, r1	; 0x0d
    6834:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    6836:	94 87       	std	Z+12, r25	; 0x0c
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    6838:	83 e4       	ldi	r24, 0x43	; 67
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    683a:	85 87       	std	Z+13, r24	; 0x0d
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    683c:	15 8a       	std	Z+21, r1	; 0x15
    683e:	94 8b       	std	Z+20, r25	; 0x14
    6840:	85 8b       	std	Z+21, r24	; 0x15
    6842:	85 ef       	ldi	r24, 0xF5	; 245
		// Reset endpoint control management
		udd_ctrl_init();
    6844:	97 e2       	ldi	r25, 0x27	; 39
    6846:	80 8b       	std	Z+16, r24	; 0x10
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    6848:	91 8b       	std	Z+17, r25	; 0x11
    684a:	91 d9       	rcall	.-3294   	; 0x5b6e <udd_ctrl_init>
		udd_ack_suspend_event();
    684c:	1b c0       	rjmp	.+54     	; 0x6884 <__vector_125+0x14c>
    684e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    6852:	86 ff       	sbrs	r24, 6
    6854:	07 c0       	rjmp	.+14     	; 0x6864 <__vector_125+0x12c>
    6856:	80 e4       	ldi	r24, 0x40	; 64
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    6858:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    685c:	80 e0       	ldi	r24, 0x00	; 0
    685e:	4f d9       	rcall	.-3426   	; 0x5afe <udd_sleep_mode>
		udd_ack_resume_event();
    6860:	cb d5       	rcall	.+2966   	; 0x73f8 <usb_callback_suspend_action>
    6862:	10 c0       	rjmp	.+32     	; 0x6884 <__vector_125+0x14c>
    6864:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		udd_sleep_mode(true); // Enter in power reduction mode
    6868:	85 ff       	sbrs	r24, 5
    686a:	0c c0       	rjmp	.+24     	; 0x6884 <__vector_125+0x14c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    686c:	80 e2       	ldi	r24, 0x20	; 32
    686e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    6872:	81 e0       	ldi	r24, 0x01	; 1
    6874:	44 d9       	rcall	.-3448   	; 0x5afe <udd_sleep_mode>
    6876:	c1 d5       	rcall	.+2946   	; 0x73fa <usb_callback_resume_action>
    6878:	05 c0       	rjmp	.+10     	; 0x6884 <__vector_125+0x14c>
    687a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    687e:	84 fd       	sbrc	r24, 4
    6880:	c7 cf       	rjmp	.-114    	; 0x6810 <__vector_125+0xd8>
    6882:	e5 cf       	rjmp	.-54     	; 0x684e <__vector_125+0x116>
    6884:	ff 91       	pop	r31
    6886:	ef 91       	pop	r30
    6888:	bf 91       	pop	r27
    688a:	af 91       	pop	r26
    688c:	9f 91       	pop	r25
    688e:	8f 91       	pop	r24
    6890:	7f 91       	pop	r23
    6892:	6f 91       	pop	r22
    6894:	5f 91       	pop	r21
    6896:	4f 91       	pop	r20
    6898:	3f 91       	pop	r19
    689a:	2f 91       	pop	r18
    689c:	0f 91       	pop	r16
    689e:	0f 90       	pop	r0
    68a0:	0b be       	out	0x3b, r0	; 59
    68a2:	0f 90       	pop	r0
    68a4:	0f be       	out	0x3f, r0	; 63
    68a6:	0f 90       	pop	r0
    68a8:	1f 90       	pop	r1
    68aa:	18 95       	reti

000068ac <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    68ac:	1f 92       	push	r1
    68ae:	0f 92       	push	r0
    68b0:	0f b6       	in	r0, 0x3f	; 63
    68b2:	0f 92       	push	r0
    68b4:	11 24       	eor	r1, r1
    68b6:	0b b6       	in	r0, 0x3b	; 59
    68b8:	0f 92       	push	r0
    68ba:	0f 93       	push	r16
    68bc:	1f 93       	push	r17
    68be:	2f 93       	push	r18
    68c0:	3f 93       	push	r19
    68c2:	4f 93       	push	r20
    68c4:	5f 93       	push	r21
    68c6:	6f 93       	push	r22
    68c8:	7f 93       	push	r23
    68ca:	8f 93       	push	r24
    68cc:	9f 93       	push	r25
    68ce:	af 93       	push	r26
    68d0:	bf 93       	push	r27
    68d2:	cf 93       	push	r28
    68d4:	df 93       	push	r29
    68d6:	ef 93       	push	r30
    68d8:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    68da:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    68de:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    68e0:	03 c0       	rjmp	.+6      	; 0x68e8 <__vector_126+0x3c>
    68e2:	3e da       	rcall	.-2948   	; 0x5d60 <udd_ctrl_interrupt_tc_setup>
    68e4:	81 11       	cpse	r24, r1
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    68e6:	c4 c0       	rjmp	.+392    	; 0x6a70 <__vector_126+0x1c4>
    68e8:	82 e0       	ldi	r24, 0x02	; 2
    68ea:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    68ee:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    68f2:	81 95       	neg	r24
    68f4:	88 0f       	add	r24, r24
    68f6:	e8 e4       	ldi	r30, 0x48	; 72
    68f8:	f8 e2       	ldi	r31, 0x28	; 40
    68fa:	e8 1b       	sub	r30, r24
    68fc:	f1 09       	sbc	r31, r1
    68fe:	20 81       	ld	r18, Z
    6900:	31 81       	ldd	r19, Z+1	; 0x01
    6902:	28 54       	subi	r18, 0x48	; 72
    6904:	38 42       	sbci	r19, 0x28	; 40
    6906:	36 95       	lsr	r19
    6908:	27 95       	ror	r18
    690a:	36 95       	lsr	r19
    690c:	27 95       	ror	r18
    690e:	36 95       	lsr	r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    6910:	27 95       	ror	r18
    6912:	82 2f       	mov	r24, r18
    6914:	86 95       	lsr	r24
    6916:	20 fd       	sbrc	r18, 0
    6918:	02 c0       	rjmp	.+4      	; 0x691e <__vector_126+0x72>
    691a:	90 e0       	ldi	r25, 0x00	; 0
    691c:	01 c0       	rjmp	.+2      	; 0x6920 <__vector_126+0x74>
    691e:	90 e8       	ldi	r25, 0x80	; 128
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    6920:	89 0f       	add	r24, r25
    6922:	e8 2f       	mov	r30, r24
    6924:	ef 70       	andi	r30, 0x0F	; 15
    6926:	f0 e0       	ldi	r31, 0x00	; 0
    6928:	ee 0f       	add	r30, r30
    692a:	ff 1f       	adc	r31, r31
    692c:	28 2f       	mov	r18, r24
    692e:	08 2e       	mov	r0, r24
    6930:	00 0c       	add	r0, r0
    6932:	33 0b       	sbc	r19, r19
    6934:	22 27       	eor	r18, r18
    6936:	33 0f       	add	r19, r19
    6938:	22 1f       	adc	r18, r18
    693a:	33 27       	eor	r19, r19
    693c:	e2 0f       	add	r30, r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    693e:	f3 1f       	adc	r31, r19
    6940:	df 01       	movw	r26, r30
    6942:	aa 0f       	add	r26, r26
    6944:	bb 1f       	adc	r27, r27
    6946:	aa 0f       	add	r26, r26
    6948:	bb 1f       	adc	r27, r27
    694a:	aa 0f       	add	r26, r26
    694c:	bb 1f       	adc	r27, r27
    694e:	a4 5c       	subi	r26, 0xC4	; 196
    6950:	b7 4d       	sbci	r27, 0xD7	; 215
    6952:	1c 96       	adiw	r26, 0x0c	; 12
    6954:	9c 91       	ld	r25, X
    6956:	95 ff       	sbrs	r25, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    6958:	8b c0       	rjmp	.+278    	; 0x6a70 <__vector_126+0x1c4>
    695a:	ee 0f       	add	r30, r30
    695c:	ff 1f       	adc	r31, r31
    695e:	ee 0f       	add	r30, r30
    6960:	ff 1f       	adc	r31, r31
    6962:	ee 0f       	add	r30, r30
    6964:	ff 1f       	adc	r31, r31
    6966:	e8 5b       	subi	r30, 0xB8	; 184
    6968:	f7 4d       	sbci	r31, 0xD7	; 215
    696a:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    696c:	06 93       	lac	Z, r16
    696e:	81 11       	cpse	r24, r1

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    6970:	7a c0       	rjmp	.+244    	; 0x6a66 <__vector_126+0x1ba>
    6972:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <udd_ep_control_state>
		// Valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    6976:	84 30       	cpi	r24, 0x04	; 4
    6978:	19 f4       	brne	.+6      	; 0x6980 <__vector_126+0xd4>
    697a:	3a d9       	rcall	.-3468   	; 0x5bf0 <udd_ctrl_endofrequest>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    697c:	f8 d8       	rcall	.-3600   	; 0x5b6e <udd_ctrl_init>
    697e:	78 c0       	rjmp	.+240    	; 0x6a70 <__vector_126+0x1c4>
    6980:	00 91 4a 28 	lds	r16, 0x284A	; 0x80284a <udd_sram+0xe>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    6984:	10 91 4b 28 	lds	r17, 0x284B	; 0x80284b <udd_sram+0xf>
    6988:	80 91 09 2b 	lds	r24, 0x2B09	; 0x802b09 <udd_g_ctrlreq+0xa>
    698c:	90 91 0a 2b 	lds	r25, 0x2B0A	; 0x802b0a <udd_g_ctrlreq+0xb>
    6990:	c0 91 35 28 	lds	r28, 0x2835	; 0x802835 <udd_ctrl_payload_nb_trans>
    6994:	d0 91 36 28 	lds	r29, 0x2836	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    6998:	98 01       	movw	r18, r16
    699a:	2c 0f       	add	r18, r28
    699c:	3d 1f       	adc	r19, r29
    699e:	82 17       	cp	r24, r18
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    69a0:	93 07       	cpc	r25, r19
    69a2:	18 f4       	brcc	.+6      	; 0x69aa <__vector_126+0xfe>
    69a4:	8c 01       	movw	r16, r24
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    69a6:	0c 1b       	sub	r16, r28
    69a8:	1d 0b       	sbc	r17, r29
    69aa:	80 91 07 2b 	lds	r24, 0x2B07	; 0x802b07 <udd_g_ctrlreq+0x8>
    69ae:	90 91 08 2b 	lds	r25, 0x2B08	; 0x802b08 <udd_g_ctrlreq+0x9>
    69b2:	a8 01       	movw	r20, r16
    69b4:	65 ef       	ldi	r22, 0xF5	; 245
    69b6:	77 e2       	ldi	r23, 0x27	; 39
    69b8:	8c 0f       	add	r24, r28
    69ba:	9d 1f       	adc	r25, r29
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    69bc:	0e 94 2c 4b 	call	0x9658	; 0x9658 <memcpy>
    69c0:	c0 0f       	add	r28, r16
    69c2:	d1 1f       	adc	r29, r17
    69c4:	c0 93 35 28 	sts	0x2835, r28	; 0x802835 <udd_ctrl_payload_nb_trans>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    69c8:	d0 93 36 28 	sts	0x2836, r29	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    69cc:	00 34       	cpi	r16, 0x40	; 64
    69ce:	11 05       	cpc	r17, r1
    69d0:	69 f4       	brne	.+26     	; 0x69ec <__vector_126+0x140>
    69d2:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    69d6:	90 91 38 28 	lds	r25, 0x2838	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    69da:	8c 0f       	add	r24, r28
    69dc:	9d 1f       	adc	r25, r29
    69de:	20 91 05 2b 	lds	r18, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    69e2:	30 91 06 2b 	lds	r19, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    69e6:	82 17       	cp	r24, r18
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    69e8:	93 07       	cpc	r25, r19
    69ea:	80 f0       	brcs	.+32     	; 0x6a0c <__vector_126+0x160>
    69ec:	ef ef       	ldi	r30, 0xFF	; 255
    69ee:	fa e2       	ldi	r31, 0x2A	; 42
		if (NULL != udd_g_ctrlreq.over_under_run) {
    69f0:	c2 87       	std	Z+10, r28	; 0x0a
    69f2:	d3 87       	std	Z+11, r29	; 0x0b
    69f4:	06 84       	ldd	r0, Z+14	; 0x0e
    69f6:	f7 85       	ldd	r31, Z+15	; 0x0f
			if (!udd_g_ctrlreq.over_under_run()) {
    69f8:	e0 2d       	mov	r30, r0
				// Stall ZLP
				udd_ctrl_stall_data();
    69fa:	30 97       	sbiw	r30, 0x00	; 0
    69fc:	29 f0       	breq	.+10     	; 0x6a08 <__vector_126+0x15c>
    69fe:	19 95       	eicall
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    6a00:	81 11       	cpse	r24, r1
    6a02:	02 c0       	rjmp	.+4      	; 0x6a08 <__vector_126+0x15c>
    6a04:	d9 d8       	rcall	.-3662   	; 0x5bb8 <udd_ctrl_stall_data>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    6a06:	34 c0       	rjmp	.+104    	; 0x6a70 <__vector_126+0x1c4>
    6a08:	e5 d8       	rcall	.-3638   	; 0x5bd4 <udd_ctrl_send_zlp_in>
    6a0a:	32 c0       	rjmp	.+100    	; 0x6a70 <__vector_126+0x1c4>
    6a0c:	80 91 09 2b 	lds	r24, 0x2B09	; 0x802b09 <udd_g_ctrlreq+0xa>
    6a10:	90 91 0a 2b 	lds	r25, 0x2B0A	; 0x802b0a <udd_g_ctrlreq+0xb>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    6a14:	c8 17       	cp	r28, r24
    6a16:	d9 07       	cpc	r29, r25
    6a18:	f9 f4       	brne	.+62     	; 0x6a58 <__vector_126+0x1ac>
    6a1a:	e0 91 0d 2b 	lds	r30, 0x2B0D	; 0x802b0d <udd_g_ctrlreq+0xe>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    6a1e:	f0 91 0e 2b 	lds	r31, 0x2B0E	; 0x802b0e <udd_g_ctrlreq+0xf>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    6a22:	30 97       	sbiw	r30, 0x00	; 0
    6a24:	11 f4       	brne	.+4      	; 0x6a2a <__vector_126+0x17e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    6a26:	c8 d8       	rcall	.-3696   	; 0x5bb8 <udd_ctrl_stall_data>
    6a28:	23 c0       	rjmp	.+70     	; 0x6a70 <__vector_126+0x1c4>
    6a2a:	19 95       	eicall
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    6a2c:	81 11       	cpse	r24, r1
    6a2e:	02 c0       	rjmp	.+4      	; 0x6a34 <__vector_126+0x188>
    6a30:	c3 d8       	rcall	.-3706   	; 0x5bb8 <udd_ctrl_stall_data>
    6a32:	1e c0       	rjmp	.+60     	; 0x6a70 <__vector_126+0x1c4>
    6a34:	20 91 37 28 	lds	r18, 0x2837	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    6a38:	30 91 38 28 	lds	r19, 0x2838	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
    6a3c:	80 91 35 28 	lds	r24, 0x2835	; 0x802835 <udd_ctrl_payload_nb_trans>
    6a40:	90 91 36 28 	lds	r25, 0x2836	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
    6a44:	82 0f       	add	r24, r18
    6a46:	93 1f       	adc	r25, r19
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    6a48:	80 93 37 28 	sts	0x2837, r24	; 0x802837 <udd_ctrl_prev_payload_nb_trans>
    6a4c:	90 93 38 28 	sts	0x2838, r25	; 0x802838 <udd_ctrl_prev_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    6a50:	10 92 35 28 	sts	0x2835, r1	; 0x802835 <udd_ctrl_payload_nb_trans>
	udd_control_out_ack_tc();
    6a54:	10 92 36 28 	sts	0x2836, r1	; 0x802836 <udd_ctrl_payload_nb_trans+0x1>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    6a58:	e8 e4       	ldi	r30, 0x48	; 72
    6a5a:	f8 e2       	ldi	r31, 0x28	; 40
		udd_ctrl_in_sent();
    6a5c:	02 e0       	ldi	r16, 0x02	; 2
    6a5e:	06 93       	lac	Z, r16
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    6a60:	00 e2       	ldi	r16, 0x20	; 32
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    6a62:	06 93       	lac	Z, r16
    6a64:	05 c0       	rjmp	.+10     	; 0x6a70 <__vector_126+0x1c4>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    6a66:	80 38       	cpi	r24, 0x80	; 128
    6a68:	11 f4       	brne	.+4      	; 0x6a6e <__vector_126+0x1c2>
    6a6a:	ca d8       	rcall	.-3692   	; 0x5c00 <udd_ctrl_in_sent>
    6a6c:	01 c0       	rjmp	.+2      	; 0x6a70 <__vector_126+0x1c4>
    6a6e:	ea d9       	rcall	.-3116   	; 0x5e44 <udd_ep_trans_complet>
    6a70:	ff 91       	pop	r31
    6a72:	ef 91       	pop	r30
    6a74:	df 91       	pop	r29
    6a76:	cf 91       	pop	r28
    6a78:	bf 91       	pop	r27
    6a7a:	af 91       	pop	r26
    6a7c:	9f 91       	pop	r25
    6a7e:	8f 91       	pop	r24
    6a80:	7f 91       	pop	r23
    6a82:	6f 91       	pop	r22
    6a84:	5f 91       	pop	r21
    6a86:	4f 91       	pop	r20
    6a88:	3f 91       	pop	r19
    6a8a:	2f 91       	pop	r18
    6a8c:	1f 91       	pop	r17
    6a8e:	0f 91       	pop	r16
    6a90:	0f 90       	pop	r0
    6a92:	0b be       	out	0x3b, r0	; 59
    6a94:	0f 90       	pop	r0
    6a96:	0f be       	out	0x3f, r0	; 63
    6a98:	0f 90       	pop	r0
    6a9a:	1f 90       	pop	r1
    6a9c:	18 95       	reti

00006a9e <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    6a9e:	cf 92       	push	r12
    6aa0:	df 92       	push	r13
    6aa2:	ef 92       	push	r14
    6aa4:	ff 92       	push	r15
    6aa6:	cf 93       	push	r28
    6aa8:	df 93       	push	r29
    6aaa:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    6aac:	6b 01       	movw	r12, r22
    6aae:	e1 2c       	mov	r14, r1
    6ab0:	f1 2c       	mov	r15, r1
    6ab2:	60 e8       	ldi	r22, 0x80	; 128
    6ab4:	73 ec       	ldi	r23, 0xC3	; 195
    6ab6:	89 ec       	ldi	r24, 0xC9	; 201
    6ab8:	91 e0       	ldi	r25, 0x01	; 1
    6aba:	a7 01       	movw	r20, r14
    6abc:	96 01       	movw	r18, r12
    6abe:	0e 94 44 48 	call	0x9088	; 0x9088 <__udivmodsi4>
    6ac2:	ca 01       	movw	r24, r20
    6ac4:	b9 01       	movw	r22, r18
    6ac6:	2f ef       	ldi	r18, 0xFF	; 255
    6ac8:	3f ef       	ldi	r19, 0xFF	; 255
    6aca:	40 e0       	ldi	r20, 0x00	; 0
    6acc:	50 e0       	ldi	r21, 0x00	; 0
    6ace:	0e 94 44 48 	call	0x9088	; 0x9088 <__udivmodsi4>
	if (smallest_div < 1) {
    6ad2:	21 15       	cp	r18, r1
    6ad4:	31 05       	cpc	r19, r1
    6ad6:	29 f4       	brne	.+10     	; 0x6ae2 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    6ad8:	81 e0       	ldi	r24, 0x01	; 1
    6ada:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    6adc:	21 e0       	ldi	r18, 0x01	; 1
    6ade:	30 e0       	ldi	r19, 0x00	; 0
    6ae0:	2d c0       	rjmp	.+90     	; 0x6b3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    6ae2:	22 30       	cpi	r18, 0x02	; 2
    6ae4:	31 05       	cpc	r19, r1
    6ae6:	28 f4       	brcc	.+10     	; 0x6af2 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    6ae8:	82 e0       	ldi	r24, 0x02	; 2
    6aea:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    6aec:	22 e0       	ldi	r18, 0x02	; 2
    6aee:	30 e0       	ldi	r19, 0x00	; 0
    6af0:	25 c0       	rjmp	.+74     	; 0x6b3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    6af2:	24 30       	cpi	r18, 0x04	; 4
    6af4:	31 05       	cpc	r19, r1
    6af6:	28 f4       	brcc	.+10     	; 0x6b02 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    6af8:	83 e0       	ldi	r24, 0x03	; 3
    6afa:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    6afc:	24 e0       	ldi	r18, 0x04	; 4
    6afe:	30 e0       	ldi	r19, 0x00	; 0
    6b00:	1d c0       	rjmp	.+58     	; 0x6b3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    6b02:	28 30       	cpi	r18, 0x08	; 8
    6b04:	31 05       	cpc	r19, r1
    6b06:	28 f4       	brcc	.+10     	; 0x6b12 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    6b08:	84 e0       	ldi	r24, 0x04	; 4
    6b0a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    6b0c:	28 e0       	ldi	r18, 0x08	; 8
    6b0e:	30 e0       	ldi	r19, 0x00	; 0
    6b10:	15 c0       	rjmp	.+42     	; 0x6b3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    6b12:	20 34       	cpi	r18, 0x40	; 64
    6b14:	31 05       	cpc	r19, r1
    6b16:	28 f4       	brcc	.+10     	; 0x6b22 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    6b18:	85 e0       	ldi	r24, 0x05	; 5
    6b1a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    6b1c:	20 e4       	ldi	r18, 0x40	; 64
    6b1e:	30 e0       	ldi	r19, 0x00	; 0
    6b20:	0d c0       	rjmp	.+26     	; 0x6b3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    6b22:	2f 3f       	cpi	r18, 0xFF	; 255
    6b24:	31 05       	cpc	r19, r1
    6b26:	09 f0       	breq	.+2      	; 0x6b2a <pwm_set_frequency+0x8c>
    6b28:	28 f4       	brcc	.+10     	; 0x6b34 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    6b2a:	86 e0       	ldi	r24, 0x06	; 6
    6b2c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    6b2e:	20 e0       	ldi	r18, 0x00	; 0
    6b30:	31 e0       	ldi	r19, 0x01	; 1
    6b32:	04 c0       	rjmp	.+8      	; 0x6b3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    6b34:	87 e0       	ldi	r24, 0x07	; 7
    6b36:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    6b38:	20 e0       	ldi	r18, 0x00	; 0
    6b3a:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    6b3c:	40 e0       	ldi	r20, 0x00	; 0
    6b3e:	50 e0       	ldi	r21, 0x00	; 0
    6b40:	60 e8       	ldi	r22, 0x80	; 128
    6b42:	73 ec       	ldi	r23, 0xC3	; 195
    6b44:	89 ec       	ldi	r24, 0xC9	; 201
    6b46:	91 e0       	ldi	r25, 0x01	; 1
    6b48:	0e 94 44 48 	call	0x9088	; 0x9088 <__udivmodsi4>
    6b4c:	ca 01       	movw	r24, r20
    6b4e:	b9 01       	movw	r22, r18
    6b50:	a7 01       	movw	r20, r14
    6b52:	96 01       	movw	r18, r12
    6b54:	0e 94 44 48 	call	0x9088	; 0x9088 <__udivmodsi4>
    6b58:	2d 83       	std	Y+5, r18	; 0x05
    6b5a:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    6b5c:	24 36       	cpi	r18, 0x64	; 100
    6b5e:	31 05       	cpc	r19, r1
    6b60:	18 f4       	brcc	.+6      	; 0x6b68 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    6b62:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    6b64:	1d 82       	std	Y+5, r1	; 0x05
    6b66:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    6b68:	df 91       	pop	r29
    6b6a:	cf 91       	pop	r28
    6b6c:	ff 90       	pop	r15
    6b6e:	ef 90       	pop	r14
    6b70:	df 90       	pop	r13
    6b72:	cf 90       	pop	r12
    6b74:	08 95       	ret

00006b76 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    6b76:	0f 93       	push	r16
    6b78:	1f 93       	push	r17
    6b7a:	cf 93       	push	r28
    6b7c:	df 93       	push	r29
    6b7e:	ec 01       	movw	r28, r24
    6b80:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    6b82:	86 2f       	mov	r24, r22
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	87 30       	cpi	r24, 0x07	; 7
    6b88:	91 05       	cpc	r25, r1
    6b8a:	08 f0       	brcs	.+2      	; 0x6b8e <pwm_init+0x18>
    6b8c:	8b c0       	rjmp	.+278    	; 0x6ca4 <pwm_init+0x12e>
    6b8e:	fc 01       	movw	r30, r24
    6b90:	88 27       	eor	r24, r24
    6b92:	eb 5f       	subi	r30, 0xFB	; 251
    6b94:	fe 4f       	sbci	r31, 0xFE	; 254
    6b96:	8f 4f       	sbci	r24, 0xFF	; 255
    6b98:	0c 94 82 48 	jmp	0x9104	; 0x9104 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    6b9c:	80 e0       	ldi	r24, 0x00	; 0
    6b9e:	98 e0       	ldi	r25, 0x08	; 8
    6ba0:	88 83       	st	Y, r24
    6ba2:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    6ba4:	e0 e4       	ldi	r30, 0x40	; 64
    6ba6:	f6 e0       	ldi	r31, 0x06	; 6
    6ba8:	30 81       	ld	r19, Z
    6baa:	81 e0       	ldi	r24, 0x01	; 1
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	2f ef       	ldi	r18, 0xFF	; 255
    6bb0:	24 0f       	add	r18, r20
    6bb2:	02 c0       	rjmp	.+4      	; 0x6bb8 <pwm_init+0x42>
    6bb4:	88 0f       	add	r24, r24
    6bb6:	99 1f       	adc	r25, r25
    6bb8:	2a 95       	dec	r18
    6bba:	e2 f7       	brpl	.-8      	; 0x6bb4 <pwm_init+0x3e>
    6bbc:	83 2b       	or	r24, r19
    6bbe:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    6bc0:	71 c0       	rjmp	.+226    	; 0x6ca4 <pwm_init+0x12e>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    6bc2:	80 e4       	ldi	r24, 0x40	; 64
    6bc4:	98 e0       	ldi	r25, 0x08	; 8
    6bc6:	88 83       	st	Y, r24
    6bc8:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    6bca:	e0 e4       	ldi	r30, 0x40	; 64
    6bcc:	f6 e0       	ldi	r31, 0x06	; 6
    6bce:	30 81       	ld	r19, Z
    6bd0:	81 e0       	ldi	r24, 0x01	; 1
    6bd2:	90 e0       	ldi	r25, 0x00	; 0
    6bd4:	23 e0       	ldi	r18, 0x03	; 3
    6bd6:	24 0f       	add	r18, r20
    6bd8:	02 c0       	rjmp	.+4      	; 0x6bde <pwm_init+0x68>
    6bda:	88 0f       	add	r24, r24
    6bdc:	99 1f       	adc	r25, r25
    6bde:	2a 95       	dec	r18
    6be0:	e2 f7       	brpl	.-8      	; 0x6bda <pwm_init+0x64>
    6be2:	83 2b       	or	r24, r19
    6be4:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    6be6:	5e c0       	rjmp	.+188    	; 0x6ca4 <pwm_init+0x12e>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    6be8:	80 e0       	ldi	r24, 0x00	; 0
    6bea:	99 e0       	ldi	r25, 0x09	; 9
    6bec:	88 83       	st	Y, r24
    6bee:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    6bf0:	e0 e6       	ldi	r30, 0x60	; 96
    6bf2:	f6 e0       	ldi	r31, 0x06	; 6
    6bf4:	30 81       	ld	r19, Z
    6bf6:	81 e0       	ldi	r24, 0x01	; 1
    6bf8:	90 e0       	ldi	r25, 0x00	; 0
    6bfa:	2f ef       	ldi	r18, 0xFF	; 255
    6bfc:	24 0f       	add	r18, r20
    6bfe:	02 c0       	rjmp	.+4      	; 0x6c04 <pwm_init+0x8e>
    6c00:	88 0f       	add	r24, r24
    6c02:	99 1f       	adc	r25, r25
    6c04:	2a 95       	dec	r18
    6c06:	e2 f7       	brpl	.-8      	; 0x6c00 <pwm_init+0x8a>
    6c08:	83 2b       	or	r24, r19
    6c0a:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    6c0c:	4b c0       	rjmp	.+150    	; 0x6ca4 <pwm_init+0x12e>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    6c0e:	80 e4       	ldi	r24, 0x40	; 64
    6c10:	99 e0       	ldi	r25, 0x09	; 9
    6c12:	88 83       	st	Y, r24
    6c14:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    6c16:	e0 e6       	ldi	r30, 0x60	; 96
    6c18:	f6 e0       	ldi	r31, 0x06	; 6
    6c1a:	30 81       	ld	r19, Z
    6c1c:	81 e0       	ldi	r24, 0x01	; 1
    6c1e:	90 e0       	ldi	r25, 0x00	; 0
    6c20:	23 e0       	ldi	r18, 0x03	; 3
    6c22:	24 0f       	add	r18, r20
    6c24:	02 c0       	rjmp	.+4      	; 0x6c2a <pwm_init+0xb4>
    6c26:	88 0f       	add	r24, r24
    6c28:	99 1f       	adc	r25, r25
    6c2a:	2a 95       	dec	r18
    6c2c:	e2 f7       	brpl	.-8      	; 0x6c26 <pwm_init+0xb0>
    6c2e:	83 2b       	or	r24, r19
    6c30:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    6c32:	38 c0       	rjmp	.+112    	; 0x6ca4 <pwm_init+0x12e>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    6c34:	80 e0       	ldi	r24, 0x00	; 0
    6c36:	9a e0       	ldi	r25, 0x0A	; 10
    6c38:	88 83       	st	Y, r24
    6c3a:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    6c3c:	e0 e8       	ldi	r30, 0x80	; 128
    6c3e:	f6 e0       	ldi	r31, 0x06	; 6
    6c40:	30 81       	ld	r19, Z
    6c42:	81 e0       	ldi	r24, 0x01	; 1
    6c44:	90 e0       	ldi	r25, 0x00	; 0
    6c46:	2f ef       	ldi	r18, 0xFF	; 255
    6c48:	24 0f       	add	r18, r20
    6c4a:	02 c0       	rjmp	.+4      	; 0x6c50 <pwm_init+0xda>
    6c4c:	88 0f       	add	r24, r24
    6c4e:	99 1f       	adc	r25, r25
    6c50:	2a 95       	dec	r18
    6c52:	e2 f7       	brpl	.-8      	; 0x6c4c <pwm_init+0xd6>
    6c54:	83 2b       	or	r24, r19
    6c56:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    6c58:	25 c0       	rjmp	.+74     	; 0x6ca4 <pwm_init+0x12e>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    6c5a:	80 e4       	ldi	r24, 0x40	; 64
    6c5c:	9a e0       	ldi	r25, 0x0A	; 10
    6c5e:	88 83       	st	Y, r24
    6c60:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    6c62:	e0 e8       	ldi	r30, 0x80	; 128
    6c64:	f6 e0       	ldi	r31, 0x06	; 6
    6c66:	30 81       	ld	r19, Z
    6c68:	81 e0       	ldi	r24, 0x01	; 1
    6c6a:	90 e0       	ldi	r25, 0x00	; 0
    6c6c:	23 e0       	ldi	r18, 0x03	; 3
    6c6e:	24 0f       	add	r18, r20
    6c70:	02 c0       	rjmp	.+4      	; 0x6c76 <pwm_init+0x100>
    6c72:	88 0f       	add	r24, r24
    6c74:	99 1f       	adc	r25, r25
    6c76:	2a 95       	dec	r18
    6c78:	e2 f7       	brpl	.-8      	; 0x6c72 <pwm_init+0xfc>
    6c7a:	83 2b       	or	r24, r19
    6c7c:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    6c7e:	12 c0       	rjmp	.+36     	; 0x6ca4 <pwm_init+0x12e>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    6c80:	80 e0       	ldi	r24, 0x00	; 0
    6c82:	9b e0       	ldi	r25, 0x0B	; 11
    6c84:	88 83       	st	Y, r24
    6c86:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    6c88:	e0 ea       	ldi	r30, 0xA0	; 160
    6c8a:	f6 e0       	ldi	r31, 0x06	; 6
    6c8c:	30 81       	ld	r19, Z
    6c8e:	81 e0       	ldi	r24, 0x01	; 1
    6c90:	90 e0       	ldi	r25, 0x00	; 0
    6c92:	2f ef       	ldi	r18, 0xFF	; 255
    6c94:	24 0f       	add	r18, r20
    6c96:	02 c0       	rjmp	.+4      	; 0x6c9c <pwm_init+0x126>
    6c98:	88 0f       	add	r24, r24
    6c9a:	99 1f       	adc	r25, r25
    6c9c:	2a 95       	dec	r18
    6c9e:	e2 f7       	brpl	.-8      	; 0x6c98 <pwm_init+0x122>
    6ca0:	83 2b       	or	r24, r19
    6ca2:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    6ca4:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    6ca6:	42 30       	cpi	r20, 0x02	; 2
    6ca8:	61 f0       	breq	.+24     	; 0x6cc2 <pwm_init+0x14c>
    6caa:	18 f4       	brcc	.+6      	; 0x6cb2 <pwm_init+0x13c>
    6cac:	41 30       	cpi	r20, 0x01	; 1
    6cae:	31 f0       	breq	.+12     	; 0x6cbc <pwm_init+0x146>
    6cb0:	10 c0       	rjmp	.+32     	; 0x6cd2 <pwm_init+0x15c>
    6cb2:	43 30       	cpi	r20, 0x03	; 3
    6cb4:	49 f0       	breq	.+18     	; 0x6cc8 <pwm_init+0x152>
    6cb6:	44 30       	cpi	r20, 0x04	; 4
    6cb8:	51 f0       	breq	.+20     	; 0x6cce <pwm_init+0x158>
    6cba:	0b c0       	rjmp	.+22     	; 0x6cd2 <pwm_init+0x15c>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    6cbc:	80 e1       	ldi	r24, 0x10	; 16
    6cbe:	8b 83       	std	Y+3, r24	; 0x03
		break;
    6cc0:	08 c0       	rjmp	.+16     	; 0x6cd2 <pwm_init+0x15c>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    6cc2:	80 e2       	ldi	r24, 0x20	; 32
    6cc4:	8b 83       	std	Y+3, r24	; 0x03
		break;
    6cc6:	05 c0       	rjmp	.+10     	; 0x6cd2 <pwm_init+0x15c>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    6cc8:	80 e4       	ldi	r24, 0x40	; 64
    6cca:	8b 83       	std	Y+3, r24	; 0x03
		break;
    6ccc:	02 c0       	rjmp	.+4      	; 0x6cd2 <pwm_init+0x15c>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    6cce:	80 e8       	ldi	r24, 0x80	; 128
    6cd0:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    6cd2:	88 81       	ld	r24, Y
    6cd4:	99 81       	ldd	r25, Y+1	; 0x01
    6cd6:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    6cda:	e8 81       	ld	r30, Y
    6cdc:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    6cde:	81 81       	ldd	r24, Z+1	; 0x01
    6ce0:	88 7f       	andi	r24, 0xF8	; 248
    6ce2:	83 60       	ori	r24, 0x03	; 3
    6ce4:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    6ce6:	1d 82       	std	Y+5, r1	; 0x05
    6ce8:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    6cea:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    6cec:	e8 81       	ld	r30, Y
    6cee:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    6cf0:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6cf2:	80 7f       	andi	r24, 0xF0	; 240
    6cf4:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    6cf6:	b8 01       	movw	r22, r16
    6cf8:	ce 01       	movw	r24, r28
    6cfa:	d1 de       	rcall	.-606    	; 0x6a9e <pwm_set_frequency>
}
    6cfc:	df 91       	pop	r29
    6cfe:	cf 91       	pop	r28
    6d00:	1f 91       	pop	r17
    6d02:	0f 91       	pop	r16
    6d04:	08 95       	ret

00006d06 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    6d06:	cf 93       	push	r28
    6d08:	df 93       	push	r29
    6d0a:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    6d0c:	2d 81       	ldd	r18, Y+5	; 0x05
    6d0e:	3e 81       	ldd	r19, Y+6	; 0x06
    6d10:	a6 2f       	mov	r26, r22
    6d12:	b0 e0       	ldi	r27, 0x00	; 0
    6d14:	0e 94 8a 48 	call	0x9114	; 0x9114 <__umulhisi3>
    6d18:	24 e6       	ldi	r18, 0x64	; 100
    6d1a:	30 e0       	ldi	r19, 0x00	; 0
    6d1c:	40 e0       	ldi	r20, 0x00	; 0
    6d1e:	50 e0       	ldi	r21, 0x00	; 0
    6d20:	0e 94 44 48 	call	0x9088	; 0x9088 <__udivmodsi4>
    6d24:	8a 81       	ldd	r24, Y+2	; 0x02
    6d26:	e8 81       	ld	r30, Y
    6d28:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    6d2a:	e6 fd       	sbrc	r30, 6
    6d2c:	17 c0       	rjmp	.+46     	; 0x6d5c <pwm_start+0x56>
		switch (channel_index) {
    6d2e:	82 30       	cpi	r24, 0x02	; 2
    6d30:	61 f0       	breq	.+24     	; 0x6d4a <pwm_start+0x44>
    6d32:	18 f4       	brcc	.+6      	; 0x6d3a <pwm_start+0x34>
    6d34:	81 30       	cpi	r24, 0x01	; 1
    6d36:	31 f0       	breq	.+12     	; 0x6d44 <pwm_start+0x3e>
    6d38:	1b c0       	rjmp	.+54     	; 0x6d70 <pwm_start+0x6a>
    6d3a:	83 30       	cpi	r24, 0x03	; 3
    6d3c:	49 f0       	breq	.+18     	; 0x6d50 <pwm_start+0x4a>
    6d3e:	84 30       	cpi	r24, 0x04	; 4
    6d40:	51 f0       	breq	.+20     	; 0x6d56 <pwm_start+0x50>
    6d42:	16 c0       	rjmp	.+44     	; 0x6d70 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    6d44:	20 af       	std	Z+56, r18	; 0x38
    6d46:	31 af       	std	Z+57, r19	; 0x39
    6d48:	13 c0       	rjmp	.+38     	; 0x6d70 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    6d4a:	22 af       	std	Z+58, r18	; 0x3a
    6d4c:	33 af       	std	Z+59, r19	; 0x3b
    6d4e:	10 c0       	rjmp	.+32     	; 0x6d70 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    6d50:	24 af       	std	Z+60, r18	; 0x3c
    6d52:	35 af       	std	Z+61, r19	; 0x3d
    6d54:	0d c0       	rjmp	.+26     	; 0x6d70 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    6d56:	26 af       	std	Z+62, r18	; 0x3e
    6d58:	37 af       	std	Z+63, r19	; 0x3f
    6d5a:	0a c0       	rjmp	.+20     	; 0x6d70 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    6d5c:	81 30       	cpi	r24, 0x01	; 1
    6d5e:	19 f0       	breq	.+6      	; 0x6d66 <pwm_start+0x60>
    6d60:	82 30       	cpi	r24, 0x02	; 2
    6d62:	21 f0       	breq	.+8      	; 0x6d6c <pwm_start+0x66>
    6d64:	05 c0       	rjmp	.+10     	; 0x6d70 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    6d66:	20 af       	std	Z+56, r18	; 0x38
    6d68:	31 af       	std	Z+57, r19	; 0x39
    6d6a:	02 c0       	rjmp	.+4      	; 0x6d70 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    6d6c:	22 af       	std	Z+58, r18	; 0x3a
    6d6e:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    6d70:	8d 81       	ldd	r24, Y+5	; 0x05
    6d72:	9e 81       	ldd	r25, Y+6	; 0x06
    6d74:	e8 81       	ld	r30, Y
    6d76:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    6d78:	86 a3       	std	Z+38, r24	; 0x26
    6d7a:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    6d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    6d7e:	e8 81       	ld	r30, Y
    6d80:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    6d82:	e6 fd       	sbrc	r30, 6
    6d84:	04 c0       	rjmp	.+8      	; 0x6d8e <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    6d86:	91 81       	ldd	r25, Z+1	; 0x01
    6d88:	89 2b       	or	r24, r25
    6d8a:	81 83       	std	Z+1, r24	; 0x01
    6d8c:	04 c0       	rjmp	.+8      	; 0x6d96 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    6d8e:	91 81       	ldd	r25, Z+1	; 0x01
    6d90:	80 73       	andi	r24, 0x30	; 48
    6d92:	89 2b       	or	r24, r25
    6d94:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    6d96:	e8 81       	ld	r30, Y
    6d98:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    6d9a:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    6d9c:	80 7f       	andi	r24, 0xF0	; 240
    6d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    6da0:	89 2b       	or	r24, r25
    6da2:	80 83       	st	Z, r24
}
    6da4:	df 91       	pop	r29
    6da6:	cf 91       	pop	r28
    6da8:	08 95       	ret

00006daa <__portable_avr_delay_cycles>:
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    6daa:	04 c0       	rjmp	.+8      	; 0x6db4 <__portable_avr_delay_cycles+0xa>
    6dac:	61 50       	subi	r22, 0x01	; 1
    6dae:	71 09       	sbc	r23, r1
    6db0:	81 09       	sbc	r24, r1
    6db2:	91 09       	sbc	r25, r1
    6db4:	61 15       	cp	r22, r1
    6db6:	71 05       	cpc	r23, r1
    6db8:	81 05       	cpc	r24, r1
    6dba:	91 05       	cpc	r25, r1
    6dbc:	b9 f7       	brne	.-18     	; 0x6dac <__portable_avr_delay_cycles+0x2>
    6dbe:	08 95       	ret

00006dc0 <isr_rtc_alarm>:
    6dc0:	10 92 b2 29 	sts	0x29B2, r1	; 0x8029b2 <g_rtc_alarm>
    6dc4:	10 92 b3 29 	sts	0x29B3, r1	; 0x8029b3 <g_rtc_alarm+0x1>
    6dc8:	10 92 b4 29 	sts	0x29B4, r1	; 0x8029b4 <g_rtc_alarm+0x2>
    6dcc:	10 92 b5 29 	sts	0x29B5, r1	; 0x8029b5 <g_rtc_alarm+0x3>
    6dd0:	08 95       	ret

00006dd2 <isr_adc_a>:
    6dd2:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__TEXT_REGION_LENGTH__+0x700226>
    6dd6:	4e 5b       	subi	r20, 0xBE	; 190
    6dd8:	51 09       	sbc	r21, r1
    6dda:	60 ff       	sbrs	r22, 0
    6ddc:	ba c0       	rjmp	.+372    	; 0x6f52 <isr_adc_a+0x180>
    6dde:	82 95       	swap	r24
    6de0:	8f 70       	andi	r24, 0x0F	; 15
    6de2:	81 30       	cpi	r24, 0x01	; 1
    6de4:	29 f0       	breq	.+10     	; 0x6df0 <isr_adc_a+0x1e>
    6de6:	08 f4       	brcc	.+2      	; 0x6dea <isr_adc_a+0x18>
    6de8:	79 c0       	rjmp	.+242    	; 0x6edc <isr_adc_a+0x10a>
    6dea:	82 30       	cpi	r24, 0x02	; 2
    6dec:	e1 f1       	breq	.+120    	; 0x6e66 <isr_adc_a+0x94>
    6dee:	08 95       	ret
    6df0:	05 2e       	mov	r0, r21
    6df2:	00 0c       	add	r0, r0
    6df4:	66 0b       	sbc	r22, r22
    6df6:	77 0b       	sbc	r23, r23
    6df8:	80 91 57 29 	lds	r24, 0x2957	; 0x802957 <g_adc_vctcxo_sum>
    6dfc:	90 91 58 29 	lds	r25, 0x2958	; 0x802958 <g_adc_vctcxo_sum+0x1>
    6e00:	a0 91 59 29 	lds	r26, 0x2959	; 0x802959 <g_adc_vctcxo_sum+0x2>
    6e04:	b0 91 5a 29 	lds	r27, 0x295A	; 0x80295a <g_adc_vctcxo_sum+0x3>
    6e08:	48 0f       	add	r20, r24
    6e0a:	59 1f       	adc	r21, r25
    6e0c:	6a 1f       	adc	r22, r26
    6e0e:	7b 1f       	adc	r23, r27
    6e10:	40 93 57 29 	sts	0x2957, r20	; 0x802957 <g_adc_vctcxo_sum>
    6e14:	50 93 58 29 	sts	0x2958, r21	; 0x802958 <g_adc_vctcxo_sum+0x1>
    6e18:	60 93 59 29 	sts	0x2959, r22	; 0x802959 <g_adc_vctcxo_sum+0x2>
    6e1c:	70 93 5a 29 	sts	0x295A, r23	; 0x80295a <g_adc_vctcxo_sum+0x3>
    6e20:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <g_adc_vctcxo_cnt>
    6e24:	90 91 56 29 	lds	r25, 0x2956	; 0x802956 <g_adc_vctcxo_cnt+0x1>
    6e28:	01 96       	adiw	r24, 0x01	; 1
    6e2a:	80 93 55 29 	sts	0x2955, r24	; 0x802955 <g_adc_vctcxo_cnt>
    6e2e:	90 93 56 29 	sts	0x2956, r25	; 0x802956 <g_adc_vctcxo_cnt+0x1>
    6e32:	8f 3f       	cpi	r24, 0xFF	; 255
    6e34:	91 05       	cpc	r25, r1
    6e36:	09 f0       	breq	.+2      	; 0x6e3a <isr_adc_a+0x68>
    6e38:	08 f4       	brcc	.+2      	; 0x6e3c <isr_adc_a+0x6a>
    6e3a:	40 c1       	rjmp	.+640    	; 0x70bc <isr_adc_a+0x2ea>
    6e3c:	40 93 5b 29 	sts	0x295B, r20	; 0x80295b <g_adc_vctcxo_cur>
    6e40:	50 93 5c 29 	sts	0x295C, r21	; 0x80295c <g_adc_vctcxo_cur+0x1>
    6e44:	60 93 5d 29 	sts	0x295D, r22	; 0x80295d <g_adc_vctcxo_cur+0x2>
    6e48:	70 93 5e 29 	sts	0x295E, r23	; 0x80295e <g_adc_vctcxo_cur+0x3>
    6e4c:	10 92 55 29 	sts	0x2955, r1	; 0x802955 <g_adc_vctcxo_cnt>
    6e50:	10 92 56 29 	sts	0x2956, r1	; 0x802956 <g_adc_vctcxo_cnt+0x1>
    6e54:	10 92 57 29 	sts	0x2957, r1	; 0x802957 <g_adc_vctcxo_sum>
    6e58:	10 92 58 29 	sts	0x2958, r1	; 0x802958 <g_adc_vctcxo_sum+0x1>
    6e5c:	10 92 59 29 	sts	0x2959, r1	; 0x802959 <g_adc_vctcxo_sum+0x2>
    6e60:	10 92 5a 29 	sts	0x295A, r1	; 0x80295a <g_adc_vctcxo_sum+0x3>
    6e64:	08 95       	ret
    6e66:	05 2e       	mov	r0, r21
    6e68:	00 0c       	add	r0, r0
    6e6a:	66 0b       	sbc	r22, r22
    6e6c:	77 0b       	sbc	r23, r23
    6e6e:	80 91 4d 29 	lds	r24, 0x294D	; 0x80294d <g_adc_5v0_sum>
    6e72:	90 91 4e 29 	lds	r25, 0x294E	; 0x80294e <g_adc_5v0_sum+0x1>
    6e76:	a0 91 4f 29 	lds	r26, 0x294F	; 0x80294f <g_adc_5v0_sum+0x2>
    6e7a:	b0 91 50 29 	lds	r27, 0x2950	; 0x802950 <g_adc_5v0_sum+0x3>
    6e7e:	48 0f       	add	r20, r24
    6e80:	59 1f       	adc	r21, r25
    6e82:	6a 1f       	adc	r22, r26
    6e84:	7b 1f       	adc	r23, r27
    6e86:	40 93 4d 29 	sts	0x294D, r20	; 0x80294d <g_adc_5v0_sum>
    6e8a:	50 93 4e 29 	sts	0x294E, r21	; 0x80294e <g_adc_5v0_sum+0x1>
    6e8e:	60 93 4f 29 	sts	0x294F, r22	; 0x80294f <g_adc_5v0_sum+0x2>
    6e92:	70 93 50 29 	sts	0x2950, r23	; 0x802950 <g_adc_5v0_sum+0x3>
    6e96:	80 91 4b 29 	lds	r24, 0x294B	; 0x80294b <g_adc_5v0_cnt>
    6e9a:	90 91 4c 29 	lds	r25, 0x294C	; 0x80294c <g_adc_5v0_cnt+0x1>
    6e9e:	01 96       	adiw	r24, 0x01	; 1
    6ea0:	80 93 4b 29 	sts	0x294B, r24	; 0x80294b <g_adc_5v0_cnt>
    6ea4:	90 93 4c 29 	sts	0x294C, r25	; 0x80294c <g_adc_5v0_cnt+0x1>
    6ea8:	8f 3f       	cpi	r24, 0xFF	; 255
    6eaa:	91 05       	cpc	r25, r1
    6eac:	09 f0       	breq	.+2      	; 0x6eb0 <isr_adc_a+0xde>
    6eae:	08 f4       	brcc	.+2      	; 0x6eb2 <isr_adc_a+0xe0>
    6eb0:	05 c1       	rjmp	.+522    	; 0x70bc <isr_adc_a+0x2ea>
    6eb2:	40 93 51 29 	sts	0x2951, r20	; 0x802951 <g_adc_5v0_cur>
    6eb6:	50 93 52 29 	sts	0x2952, r21	; 0x802952 <g_adc_5v0_cur+0x1>
    6eba:	60 93 53 29 	sts	0x2953, r22	; 0x802953 <g_adc_5v0_cur+0x2>
    6ebe:	70 93 54 29 	sts	0x2954, r23	; 0x802954 <g_adc_5v0_cur+0x3>
    6ec2:	10 92 4b 29 	sts	0x294B, r1	; 0x80294b <g_adc_5v0_cnt>
    6ec6:	10 92 4c 29 	sts	0x294C, r1	; 0x80294c <g_adc_5v0_cnt+0x1>
    6eca:	10 92 4d 29 	sts	0x294D, r1	; 0x80294d <g_adc_5v0_sum>
    6ece:	10 92 4e 29 	sts	0x294E, r1	; 0x80294e <g_adc_5v0_sum+0x1>
    6ed2:	10 92 4f 29 	sts	0x294F, r1	; 0x80294f <g_adc_5v0_sum+0x2>
    6ed6:	10 92 50 29 	sts	0x2950, r1	; 0x802950 <g_adc_5v0_sum+0x3>
    6eda:	08 95       	ret
    6edc:	05 2e       	mov	r0, r21
    6ede:	00 0c       	add	r0, r0
    6ee0:	66 0b       	sbc	r22, r22
    6ee2:	77 0b       	sbc	r23, r23
    6ee4:	80 91 43 29 	lds	r24, 0x2943	; 0x802943 <g_adc_vbat_sum>
    6ee8:	90 91 44 29 	lds	r25, 0x2944	; 0x802944 <g_adc_vbat_sum+0x1>
    6eec:	a0 91 45 29 	lds	r26, 0x2945	; 0x802945 <g_adc_vbat_sum+0x2>
    6ef0:	b0 91 46 29 	lds	r27, 0x2946	; 0x802946 <g_adc_vbat_sum+0x3>
    6ef4:	48 0f       	add	r20, r24
    6ef6:	59 1f       	adc	r21, r25
    6ef8:	6a 1f       	adc	r22, r26
    6efa:	7b 1f       	adc	r23, r27
    6efc:	40 93 43 29 	sts	0x2943, r20	; 0x802943 <g_adc_vbat_sum>
    6f00:	50 93 44 29 	sts	0x2944, r21	; 0x802944 <g_adc_vbat_sum+0x1>
    6f04:	60 93 45 29 	sts	0x2945, r22	; 0x802945 <g_adc_vbat_sum+0x2>
    6f08:	70 93 46 29 	sts	0x2946, r23	; 0x802946 <g_adc_vbat_sum+0x3>
    6f0c:	80 91 41 29 	lds	r24, 0x2941	; 0x802941 <g_adc_vbat_cnt>
    6f10:	90 91 42 29 	lds	r25, 0x2942	; 0x802942 <g_adc_vbat_cnt+0x1>
    6f14:	01 96       	adiw	r24, 0x01	; 1
    6f16:	80 93 41 29 	sts	0x2941, r24	; 0x802941 <g_adc_vbat_cnt>
    6f1a:	90 93 42 29 	sts	0x2942, r25	; 0x802942 <g_adc_vbat_cnt+0x1>
    6f1e:	8f 3f       	cpi	r24, 0xFF	; 255
    6f20:	91 05       	cpc	r25, r1
    6f22:	09 f0       	breq	.+2      	; 0x6f26 <isr_adc_a+0x154>
    6f24:	08 f4       	brcc	.+2      	; 0x6f28 <isr_adc_a+0x156>
    6f26:	ca c0       	rjmp	.+404    	; 0x70bc <isr_adc_a+0x2ea>
    6f28:	40 93 47 29 	sts	0x2947, r20	; 0x802947 <g_adc_vbat_cur>
    6f2c:	50 93 48 29 	sts	0x2948, r21	; 0x802948 <g_adc_vbat_cur+0x1>
    6f30:	60 93 49 29 	sts	0x2949, r22	; 0x802949 <g_adc_vbat_cur+0x2>
    6f34:	70 93 4a 29 	sts	0x294A, r23	; 0x80294a <g_adc_vbat_cur+0x3>
    6f38:	10 92 41 29 	sts	0x2941, r1	; 0x802941 <g_adc_vbat_cnt>
    6f3c:	10 92 42 29 	sts	0x2942, r1	; 0x802942 <g_adc_vbat_cnt+0x1>
    6f40:	10 92 43 29 	sts	0x2943, r1	; 0x802943 <g_adc_vbat_sum>
    6f44:	10 92 44 29 	sts	0x2944, r1	; 0x802944 <g_adc_vbat_sum+0x1>
    6f48:	10 92 45 29 	sts	0x2945, r1	; 0x802945 <g_adc_vbat_sum+0x2>
    6f4c:	10 92 46 29 	sts	0x2946, r1	; 0x802946 <g_adc_vbat_sum+0x3>
    6f50:	08 95       	ret
    6f52:	61 ff       	sbrs	r22, 1
    6f54:	3b c0       	rjmp	.+118    	; 0x6fcc <isr_adc_a+0x1fa>
    6f56:	05 2e       	mov	r0, r21
    6f58:	00 0c       	add	r0, r0
    6f5a:	66 0b       	sbc	r22, r22
    6f5c:	77 0b       	sbc	r23, r23
    6f5e:	80 91 39 29 	lds	r24, 0x2939	; 0x802939 <g_adc_io_adc4_sum>
    6f62:	90 91 3a 29 	lds	r25, 0x293A	; 0x80293a <g_adc_io_adc4_sum+0x1>
    6f66:	a0 91 3b 29 	lds	r26, 0x293B	; 0x80293b <g_adc_io_adc4_sum+0x2>
    6f6a:	b0 91 3c 29 	lds	r27, 0x293C	; 0x80293c <g_adc_io_adc4_sum+0x3>
    6f6e:	48 0f       	add	r20, r24
    6f70:	59 1f       	adc	r21, r25
    6f72:	6a 1f       	adc	r22, r26
    6f74:	7b 1f       	adc	r23, r27
    6f76:	40 93 39 29 	sts	0x2939, r20	; 0x802939 <g_adc_io_adc4_sum>
    6f7a:	50 93 3a 29 	sts	0x293A, r21	; 0x80293a <g_adc_io_adc4_sum+0x1>
    6f7e:	60 93 3b 29 	sts	0x293B, r22	; 0x80293b <g_adc_io_adc4_sum+0x2>
    6f82:	70 93 3c 29 	sts	0x293C, r23	; 0x80293c <g_adc_io_adc4_sum+0x3>
    6f86:	80 91 37 29 	lds	r24, 0x2937	; 0x802937 <g_adc_io_adc4_cnt>
    6f8a:	90 91 38 29 	lds	r25, 0x2938	; 0x802938 <g_adc_io_adc4_cnt+0x1>
    6f8e:	01 96       	adiw	r24, 0x01	; 1
    6f90:	80 93 37 29 	sts	0x2937, r24	; 0x802937 <g_adc_io_adc4_cnt>
    6f94:	90 93 38 29 	sts	0x2938, r25	; 0x802938 <g_adc_io_adc4_cnt+0x1>
    6f98:	8f 3f       	cpi	r24, 0xFF	; 255
    6f9a:	91 05       	cpc	r25, r1
    6f9c:	09 f0       	breq	.+2      	; 0x6fa0 <isr_adc_a+0x1ce>
    6f9e:	08 f4       	brcc	.+2      	; 0x6fa2 <isr_adc_a+0x1d0>
    6fa0:	8d c0       	rjmp	.+282    	; 0x70bc <isr_adc_a+0x2ea>
    6fa2:	40 93 3d 29 	sts	0x293D, r20	; 0x80293d <g_adc_io_adc4_cur>
    6fa6:	50 93 3e 29 	sts	0x293E, r21	; 0x80293e <g_adc_io_adc4_cur+0x1>
    6faa:	60 93 3f 29 	sts	0x293F, r22	; 0x80293f <g_adc_io_adc4_cur+0x2>
    6fae:	70 93 40 29 	sts	0x2940, r23	; 0x802940 <g_adc_io_adc4_cur+0x3>
    6fb2:	10 92 37 29 	sts	0x2937, r1	; 0x802937 <g_adc_io_adc4_cnt>
    6fb6:	10 92 38 29 	sts	0x2938, r1	; 0x802938 <g_adc_io_adc4_cnt+0x1>
    6fba:	10 92 39 29 	sts	0x2939, r1	; 0x802939 <g_adc_io_adc4_sum>
    6fbe:	10 92 3a 29 	sts	0x293A, r1	; 0x80293a <g_adc_io_adc4_sum+0x1>
    6fc2:	10 92 3b 29 	sts	0x293B, r1	; 0x80293b <g_adc_io_adc4_sum+0x2>
    6fc6:	10 92 3c 29 	sts	0x293C, r1	; 0x80293c <g_adc_io_adc4_sum+0x3>
    6fca:	08 95       	ret
    6fcc:	62 ff       	sbrs	r22, 2
    6fce:	3b c0       	rjmp	.+118    	; 0x7046 <isr_adc_a+0x274>
    6fd0:	05 2e       	mov	r0, r21
    6fd2:	00 0c       	add	r0, r0
    6fd4:	66 0b       	sbc	r22, r22
    6fd6:	77 0b       	sbc	r23, r23
    6fd8:	80 91 2f 29 	lds	r24, 0x292F	; 0x80292f <g_adc_io_adc5_sum>
    6fdc:	90 91 30 29 	lds	r25, 0x2930	; 0x802930 <g_adc_io_adc5_sum+0x1>
    6fe0:	a0 91 31 29 	lds	r26, 0x2931	; 0x802931 <g_adc_io_adc5_sum+0x2>
    6fe4:	b0 91 32 29 	lds	r27, 0x2932	; 0x802932 <g_adc_io_adc5_sum+0x3>
    6fe8:	48 0f       	add	r20, r24
    6fea:	59 1f       	adc	r21, r25
    6fec:	6a 1f       	adc	r22, r26
    6fee:	7b 1f       	adc	r23, r27
    6ff0:	40 93 2f 29 	sts	0x292F, r20	; 0x80292f <g_adc_io_adc5_sum>
    6ff4:	50 93 30 29 	sts	0x2930, r21	; 0x802930 <g_adc_io_adc5_sum+0x1>
    6ff8:	60 93 31 29 	sts	0x2931, r22	; 0x802931 <g_adc_io_adc5_sum+0x2>
    6ffc:	70 93 32 29 	sts	0x2932, r23	; 0x802932 <g_adc_io_adc5_sum+0x3>
    7000:	80 91 2d 29 	lds	r24, 0x292D	; 0x80292d <g_adc_io_adc5_cnt>
    7004:	90 91 2e 29 	lds	r25, 0x292E	; 0x80292e <g_adc_io_adc5_cnt+0x1>
    7008:	01 96       	adiw	r24, 0x01	; 1
    700a:	80 93 2d 29 	sts	0x292D, r24	; 0x80292d <g_adc_io_adc5_cnt>
    700e:	90 93 2e 29 	sts	0x292E, r25	; 0x80292e <g_adc_io_adc5_cnt+0x1>
    7012:	8f 3f       	cpi	r24, 0xFF	; 255
    7014:	91 05       	cpc	r25, r1
    7016:	09 f0       	breq	.+2      	; 0x701a <isr_adc_a+0x248>
    7018:	08 f4       	brcc	.+2      	; 0x701c <isr_adc_a+0x24a>
    701a:	50 c0       	rjmp	.+160    	; 0x70bc <isr_adc_a+0x2ea>
    701c:	40 93 33 29 	sts	0x2933, r20	; 0x802933 <g_adc_io_adc5_cur>
    7020:	50 93 34 29 	sts	0x2934, r21	; 0x802934 <g_adc_io_adc5_cur+0x1>
    7024:	60 93 35 29 	sts	0x2935, r22	; 0x802935 <g_adc_io_adc5_cur+0x2>
    7028:	70 93 36 29 	sts	0x2936, r23	; 0x802936 <g_adc_io_adc5_cur+0x3>
    702c:	10 92 2d 29 	sts	0x292D, r1	; 0x80292d <g_adc_io_adc5_cnt>
    7030:	10 92 2e 29 	sts	0x292E, r1	; 0x80292e <g_adc_io_adc5_cnt+0x1>
    7034:	10 92 2f 29 	sts	0x292F, r1	; 0x80292f <g_adc_io_adc5_sum>
    7038:	10 92 30 29 	sts	0x2930, r1	; 0x802930 <g_adc_io_adc5_sum+0x1>
    703c:	10 92 31 29 	sts	0x2931, r1	; 0x802931 <g_adc_io_adc5_sum+0x2>
    7040:	10 92 32 29 	sts	0x2932, r1	; 0x802932 <g_adc_io_adc5_sum+0x3>
    7044:	08 95       	ret
    7046:	63 ff       	sbrs	r22, 3
    7048:	39 c0       	rjmp	.+114    	; 0x70bc <isr_adc_a+0x2ea>
    704a:	05 2e       	mov	r0, r21
    704c:	00 0c       	add	r0, r0
    704e:	66 0b       	sbc	r22, r22
    7050:	77 0b       	sbc	r23, r23
    7052:	80 91 25 29 	lds	r24, 0x2925	; 0x802925 <g_adc_silence_sum>
    7056:	90 91 26 29 	lds	r25, 0x2926	; 0x802926 <g_adc_silence_sum+0x1>
    705a:	a0 91 27 29 	lds	r26, 0x2927	; 0x802927 <g_adc_silence_sum+0x2>
    705e:	b0 91 28 29 	lds	r27, 0x2928	; 0x802928 <g_adc_silence_sum+0x3>
    7062:	48 0f       	add	r20, r24
    7064:	59 1f       	adc	r21, r25
    7066:	6a 1f       	adc	r22, r26
    7068:	7b 1f       	adc	r23, r27
    706a:	40 93 25 29 	sts	0x2925, r20	; 0x802925 <g_adc_silence_sum>
    706e:	50 93 26 29 	sts	0x2926, r21	; 0x802926 <g_adc_silence_sum+0x1>
    7072:	60 93 27 29 	sts	0x2927, r22	; 0x802927 <g_adc_silence_sum+0x2>
    7076:	70 93 28 29 	sts	0x2928, r23	; 0x802928 <g_adc_silence_sum+0x3>
    707a:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <g_adc_silence_cnt>
    707e:	90 91 24 29 	lds	r25, 0x2924	; 0x802924 <g_adc_silence_cnt+0x1>
    7082:	01 96       	adiw	r24, 0x01	; 1
    7084:	80 93 23 29 	sts	0x2923, r24	; 0x802923 <g_adc_silence_cnt>
    7088:	90 93 24 29 	sts	0x2924, r25	; 0x802924 <g_adc_silence_cnt+0x1>
    708c:	8f 3f       	cpi	r24, 0xFF	; 255
    708e:	91 05       	cpc	r25, r1
    7090:	a9 f0       	breq	.+42     	; 0x70bc <isr_adc_a+0x2ea>
    7092:	a0 f0       	brcs	.+40     	; 0x70bc <isr_adc_a+0x2ea>
    7094:	40 93 29 29 	sts	0x2929, r20	; 0x802929 <g_adc_silence_cur>
    7098:	50 93 2a 29 	sts	0x292A, r21	; 0x80292a <g_adc_silence_cur+0x1>
    709c:	60 93 2b 29 	sts	0x292B, r22	; 0x80292b <g_adc_silence_cur+0x2>
    70a0:	70 93 2c 29 	sts	0x292C, r23	; 0x80292c <g_adc_silence_cur+0x3>
    70a4:	10 92 23 29 	sts	0x2923, r1	; 0x802923 <g_adc_silence_cnt>
    70a8:	10 92 24 29 	sts	0x2924, r1	; 0x802924 <g_adc_silence_cnt+0x1>
    70ac:	10 92 25 29 	sts	0x2925, r1	; 0x802925 <g_adc_silence_sum>
    70b0:	10 92 26 29 	sts	0x2926, r1	; 0x802926 <g_adc_silence_sum+0x1>
    70b4:	10 92 27 29 	sts	0x2927, r1	; 0x802927 <g_adc_silence_sum+0x2>
    70b8:	10 92 28 29 	sts	0x2928, r1	; 0x802928 <g_adc_silence_sum+0x3>
    70bc:	08 95       	ret

000070be <isr_adc_b>:
    70be:	60 ff       	sbrs	r22, 0
    70c0:	3b c0       	rjmp	.+118    	; 0x7138 <isr_adc_b+0x7a>
    70c2:	4e 5b       	subi	r20, 0xBE	; 190
    70c4:	51 09       	sbc	r21, r1
    70c6:	05 2e       	mov	r0, r21
    70c8:	00 0c       	add	r0, r0
    70ca:	66 0b       	sbc	r22, r22
    70cc:	77 0b       	sbc	r23, r23
    70ce:	80 91 1b 29 	lds	r24, 0x291B	; 0x80291b <g_adc_temp_sum>
    70d2:	90 91 1c 29 	lds	r25, 0x291C	; 0x80291c <g_adc_temp_sum+0x1>
    70d6:	a0 91 1d 29 	lds	r26, 0x291D	; 0x80291d <g_adc_temp_sum+0x2>
    70da:	b0 91 1e 29 	lds	r27, 0x291E	; 0x80291e <g_adc_temp_sum+0x3>
    70de:	48 0f       	add	r20, r24
    70e0:	59 1f       	adc	r21, r25
    70e2:	6a 1f       	adc	r22, r26
    70e4:	7b 1f       	adc	r23, r27
    70e6:	40 93 1b 29 	sts	0x291B, r20	; 0x80291b <g_adc_temp_sum>
    70ea:	50 93 1c 29 	sts	0x291C, r21	; 0x80291c <g_adc_temp_sum+0x1>
    70ee:	60 93 1d 29 	sts	0x291D, r22	; 0x80291d <g_adc_temp_sum+0x2>
    70f2:	70 93 1e 29 	sts	0x291E, r23	; 0x80291e <g_adc_temp_sum+0x3>
    70f6:	80 91 19 29 	lds	r24, 0x2919	; 0x802919 <g_adc_temp_cnt>
    70fa:	90 91 1a 29 	lds	r25, 0x291A	; 0x80291a <g_adc_temp_cnt+0x1>
    70fe:	01 96       	adiw	r24, 0x01	; 1
    7100:	80 93 19 29 	sts	0x2919, r24	; 0x802919 <g_adc_temp_cnt>
    7104:	90 93 1a 29 	sts	0x291A, r25	; 0x80291a <g_adc_temp_cnt+0x1>
    7108:	8f 3f       	cpi	r24, 0xFF	; 255
    710a:	91 05       	cpc	r25, r1
    710c:	a9 f0       	breq	.+42     	; 0x7138 <isr_adc_b+0x7a>
    710e:	a0 f0       	brcs	.+40     	; 0x7138 <isr_adc_b+0x7a>
    7110:	40 93 1f 29 	sts	0x291F, r20	; 0x80291f <g_adc_temp_cur>
    7114:	50 93 20 29 	sts	0x2920, r21	; 0x802920 <g_adc_temp_cur+0x1>
    7118:	60 93 21 29 	sts	0x2921, r22	; 0x802921 <g_adc_temp_cur+0x2>
    711c:	70 93 22 29 	sts	0x2922, r23	; 0x802922 <g_adc_temp_cur+0x3>
    7120:	10 92 19 29 	sts	0x2919, r1	; 0x802919 <g_adc_temp_cnt>
    7124:	10 92 1a 29 	sts	0x291A, r1	; 0x80291a <g_adc_temp_cnt+0x1>
    7128:	10 92 1b 29 	sts	0x291B, r1	; 0x80291b <g_adc_temp_sum>
    712c:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <g_adc_temp_sum+0x1>
    7130:	10 92 1d 29 	sts	0x291D, r1	; 0x80291d <g_adc_temp_sum+0x2>
    7134:	10 92 1e 29 	sts	0x291E, r1	; 0x80291e <g_adc_temp_sum+0x3>
    7138:	08 95       	ret

0000713a <task_dac>:
    713a:	cf 93       	push	r28
    713c:	df 93       	push	r29
    713e:	1f 92       	push	r1
    7140:	1f 92       	push	r1
    7142:	cd b7       	in	r28, 0x3d	; 61
    7144:	de b7       	in	r29, 0x3e	; 62
    7146:	8f b7       	in	r24, 0x3f	; 63
    7148:	8a 83       	std	Y+2, r24	; 0x02
    714a:	f8 94       	cli
    714c:	8a 81       	ldd	r24, Y+2	; 0x02
    714e:	8f bf       	out	0x3f, r24	; 63
    7150:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <s_dds0_freq_mHz.7490>
    7154:	90 91 8a 28 	lds	r25, 0x288A	; 0x80288a <s_dds0_freq_mHz.7490+0x1>
    7158:	a0 91 8b 28 	lds	r26, 0x288B	; 0x80288b <s_dds0_freq_mHz.7490+0x2>
    715c:	b0 91 8c 28 	lds	r27, 0x288C	; 0x80288c <s_dds0_freq_mHz.7490+0x3>
    7160:	80 38       	cpi	r24, 0x80	; 128
    7162:	94 48       	sbci	r25, 0x84	; 132
    7164:	ae 41       	sbci	r26, 0x1E	; 30
    7166:	b1 05       	cpc	r27, r1
    7168:	69 f4       	brne	.+26     	; 0x7184 <task_dac+0x4a>
    716a:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <s_dds1_freq_mHz.7491>
    716e:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <s_dds1_freq_mHz.7491+0x1>
    7172:	a0 91 87 28 	lds	r26, 0x2887	; 0x802887 <s_dds1_freq_mHz.7491+0x2>
    7176:	b0 91 88 28 	lds	r27, 0x2888	; 0x802888 <s_dds1_freq_mHz.7491+0x3>
    717a:	8a 30       	cpi	r24, 0x0A	; 10
    717c:	99 40       	sbci	r25, 0x09	; 9
    717e:	ad 43       	sbci	r26, 0x3D	; 61
    7180:	b1 05       	cpc	r27, r1
    7182:	a9 f1       	breq	.+106    	; 0x71ee <task_dac+0xb4>
    7184:	80 e8       	ldi	r24, 0x80	; 128
    7186:	94 e8       	ldi	r25, 0x84	; 132
    7188:	ae e1       	ldi	r26, 0x1E	; 30
    718a:	b0 e0       	ldi	r27, 0x00	; 0
    718c:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <s_dds0_freq_mHz.7490>
    7190:	90 93 8a 28 	sts	0x288A, r25	; 0x80288a <s_dds0_freq_mHz.7490+0x1>
    7194:	a0 93 8b 28 	sts	0x288B, r26	; 0x80288b <s_dds0_freq_mHz.7490+0x2>
    7198:	b0 93 8c 28 	sts	0x288C, r27	; 0x80288c <s_dds0_freq_mHz.7490+0x3>
    719c:	8a e0       	ldi	r24, 0x0A	; 10
    719e:	99 e0       	ldi	r25, 0x09	; 9
    71a0:	ad e3       	ldi	r26, 0x3D	; 61
    71a2:	b0 e0       	ldi	r27, 0x00	; 0
    71a4:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <s_dds1_freq_mHz.7491>
    71a8:	90 93 86 28 	sts	0x2886, r25	; 0x802886 <s_dds1_freq_mHz.7491+0x1>
    71ac:	a0 93 87 28 	sts	0x2887, r26	; 0x802887 <s_dds1_freq_mHz.7491+0x2>
    71b0:	b0 93 88 28 	sts	0x2888, r27	; 0x802888 <s_dds1_freq_mHz.7491+0x3>
    71b4:	8f b7       	in	r24, 0x3f	; 63
    71b6:	89 83       	std	Y+1, r24	; 0x01
    71b8:	f8 94       	cli
    71ba:	89 81       	ldd	r24, Y+1	; 0x01
    71bc:	4a ea       	ldi	r20, 0xAA	; 170
    71be:	5a ea       	ldi	r21, 0xAA	; 170
    71c0:	6a ea       	ldi	r22, 0xAA	; 170
    71c2:	7a e0       	ldi	r23, 0x0A	; 10
    71c4:	40 93 dd 28 	sts	0x28DD, r20	; 0x8028dd <dds0_inc>
    71c8:	50 93 de 28 	sts	0x28DE, r21	; 0x8028de <dds0_inc+0x1>
    71cc:	60 93 df 28 	sts	0x28DF, r22	; 0x8028df <dds0_inc+0x2>
    71d0:	70 93 e0 28 	sts	0x28E0, r23	; 0x8028e0 <dds0_inc+0x3>
    71d4:	44 ed       	ldi	r20, 0xD4	; 212
    71d6:	58 e5       	ldi	r21, 0x58	; 88
    71d8:	65 e5       	ldi	r22, 0x55	; 85
    71da:	75 e1       	ldi	r23, 0x15	; 21
    71dc:	40 93 d5 28 	sts	0x28D5, r20	; 0x8028d5 <dds1_inc>
    71e0:	50 93 d6 28 	sts	0x28D6, r21	; 0x8028d6 <dds1_inc+0x1>
    71e4:	60 93 d7 28 	sts	0x28D7, r22	; 0x8028d7 <dds1_inc+0x2>
    71e8:	70 93 d8 28 	sts	0x28D8, r23	; 0x8028d8 <dds1_inc+0x3>
    71ec:	8f bf       	out	0x3f, r24	; 63
    71ee:	0f 90       	pop	r0
    71f0:	0f 90       	pop	r0
    71f2:	df 91       	pop	r29
    71f4:	cf 91       	pop	r28
    71f6:	08 95       	ret

000071f8 <isr_tcc0_ovfl>:
    71f8:	cf 92       	push	r12
    71fa:	df 92       	push	r13
    71fc:	ef 92       	push	r14
    71fe:	ff 92       	push	r15
    7200:	0f 93       	push	r16
    7202:	1f 93       	push	r17
    7204:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <rtc_get_time>
    7208:	21 e0       	ldi	r18, 0x01	; 1
    720a:	20 93 0c 08 	sts	0x080C, r18	; 0x80080c <__TEXT_REGION_LENGTH__+0x70080c>
    720e:	20 91 b7 29 	lds	r18, 0x29B7	; 0x8029b7 <g_workmode>
    7212:	22 30       	cpi	r18, 0x02	; 2
    7214:	09 f0       	breq	.+2      	; 0x7218 <isr_tcc0_ovfl+0x20>
    7216:	4a c0       	rjmp	.+148    	; 0x72ac <isr_tcc0_ovfl+0xb4>
    7218:	00 91 91 28 	lds	r16, 0x2891	; 0x802891 <last_10ms.7375>
    721c:	10 91 92 28 	lds	r17, 0x2892	; 0x802892 <last_10ms.7375+0x1>
    7220:	20 91 93 28 	lds	r18, 0x2893	; 0x802893 <last_10ms.7375+0x2>
    7224:	30 91 94 28 	lds	r19, 0x2894	; 0x802894 <last_10ms.7375+0x3>
    7228:	6b 01       	movw	r12, r22
    722a:	7c 01       	movw	r14, r24
    722c:	c0 1a       	sub	r12, r16
    722e:	d1 0a       	sbc	r13, r17
    7230:	e2 0a       	sbc	r14, r18
    7232:	f3 0a       	sbc	r15, r19
    7234:	4a e0       	ldi	r20, 0x0A	; 10
    7236:	c4 16       	cp	r12, r20
    7238:	d1 04       	cpc	r13, r1
    723a:	e1 04       	cpc	r14, r1
    723c:	f1 04       	cpc	r15, r1
    723e:	28 f4       	brcc	.+10     	; 0x724a <isr_tcc0_ovfl+0x52>
    7240:	60 17       	cp	r22, r16
    7242:	71 07       	cpc	r23, r17
    7244:	82 07       	cpc	r24, r18
    7246:	93 07       	cpc	r25, r19
    7248:	58 f4       	brcc	.+22     	; 0x7260 <isr_tcc0_ovfl+0x68>
    724a:	60 93 91 28 	sts	0x2891, r22	; 0x802891 <last_10ms.7375>
    724e:	70 93 92 28 	sts	0x2892, r23	; 0x802892 <last_10ms.7375+0x1>
    7252:	80 93 93 28 	sts	0x2893, r24	; 0x802893 <last_10ms.7375+0x2>
    7256:	90 93 94 28 	sts	0x2894, r25	; 0x802894 <last_10ms.7375+0x3>
    725a:	0e 94 98 1b 	call	0x3730	; 0x3730 <isr_10ms_twi1_onboard>
    725e:	26 c0       	rjmp	.+76     	; 0x72ac <isr_tcc0_ovfl+0xb4>
    7260:	00 91 8d 28 	lds	r16, 0x288D	; 0x80288d <last_500ms.7376>
    7264:	10 91 8e 28 	lds	r17, 0x288E	; 0x80288e <last_500ms.7376+0x1>
    7268:	20 91 8f 28 	lds	r18, 0x288F	; 0x80288f <last_500ms.7376+0x2>
    726c:	30 91 90 28 	lds	r19, 0x2890	; 0x802890 <last_500ms.7376+0x3>
    7270:	6b 01       	movw	r12, r22
    7272:	7c 01       	movw	r14, r24
    7274:	c0 1a       	sub	r12, r16
    7276:	d1 0a       	sbc	r13, r17
    7278:	e2 0a       	sbc	r14, r18
    727a:	f3 0a       	sbc	r15, r19
    727c:	c1 14       	cp	r12, r1
    727e:	42 e0       	ldi	r20, 0x02	; 2
    7280:	d4 06       	cpc	r13, r20
    7282:	e1 04       	cpc	r14, r1
    7284:	f1 04       	cpc	r15, r1
    7286:	28 f4       	brcc	.+10     	; 0x7292 <isr_tcc0_ovfl+0x9a>
    7288:	60 17       	cp	r22, r16
    728a:	71 07       	cpc	r23, r17
    728c:	82 07       	cpc	r24, r18
    728e:	93 07       	cpc	r25, r19
    7290:	58 f4       	brcc	.+22     	; 0x72a8 <isr_tcc0_ovfl+0xb0>
    7292:	60 93 8d 28 	sts	0x288D, r22	; 0x80288d <last_500ms.7376>
    7296:	70 93 8e 28 	sts	0x288E, r23	; 0x80288e <last_500ms.7376+0x1>
    729a:	80 93 8f 28 	sts	0x288F, r24	; 0x80288f <last_500ms.7376+0x2>
    729e:	90 93 90 28 	sts	0x2890, r25	; 0x802890 <last_500ms.7376+0x3>
    72a2:	0e 94 99 1b 	call	0x3732	; 0x3732 <isr_500ms_twi1_onboard>
    72a6:	02 c0       	rjmp	.+4      	; 0x72ac <isr_tcc0_ovfl+0xb4>
    72a8:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <isr_sparetime_twi1_onboard>
    72ac:	1f 91       	pop	r17
    72ae:	0f 91       	pop	r16
    72b0:	ff 90       	pop	r15
    72b2:	ef 90       	pop	r14
    72b4:	df 90       	pop	r13
    72b6:	cf 90       	pop	r12
    72b8:	08 95       	ret

000072ba <calc_next_frame>:
    72ba:	8f 92       	push	r8
    72bc:	9f 92       	push	r9
    72be:	af 92       	push	r10
    72c0:	bf 92       	push	r11
    72c2:	cf 92       	push	r12
    72c4:	df 92       	push	r13
    72c6:	ef 92       	push	r14
    72c8:	ff 92       	push	r15
    72ca:	0f 93       	push	r16
    72cc:	1f 93       	push	r17
    72ce:	cf 93       	push	r28
    72d0:	df 93       	push	r29
    72d2:	6b 01       	movw	r12, r22
    72d4:	5a 01       	movw	r10, r20
    72d6:	79 01       	movw	r14, r18
    72d8:	48 01       	movw	r8, r16
    72da:	ec 01       	movw	r28, r24
    72dc:	8c 01       	movw	r16, r24
    72de:	00 5e       	subi	r16, 0xE0	; 224
    72e0:	1f 4f       	sbci	r17, 0xFF	; 255
    72e2:	f6 01       	movw	r30, r12
    72e4:	82 81       	ldd	r24, Z+2	; 0x02
    72e6:	93 81       	ldd	r25, Z+3	; 0x03
    72e8:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <get_interpolated_sine>
    72ec:	88 83       	st	Y, r24
    72ee:	99 83       	std	Y+1, r25	; 0x01
    72f0:	f7 01       	movw	r30, r14
    72f2:	82 81       	ldd	r24, Z+2	; 0x02
    72f4:	93 81       	ldd	r25, Z+3	; 0x03
    72f6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <get_interpolated_sine>
    72fa:	8a 83       	std	Y+2, r24	; 0x02
    72fc:	9b 83       	std	Y+3, r25	; 0x03
    72fe:	f6 01       	movw	r30, r12
    7300:	40 81       	ld	r20, Z
    7302:	51 81       	ldd	r21, Z+1	; 0x01
    7304:	62 81       	ldd	r22, Z+2	; 0x02
    7306:	73 81       	ldd	r23, Z+3	; 0x03
    7308:	f5 01       	movw	r30, r10
    730a:	80 81       	ld	r24, Z
    730c:	91 81       	ldd	r25, Z+1	; 0x01
    730e:	a2 81       	ldd	r26, Z+2	; 0x02
    7310:	b3 81       	ldd	r27, Z+3	; 0x03
    7312:	84 0f       	add	r24, r20
    7314:	95 1f       	adc	r25, r21
    7316:	a6 1f       	adc	r26, r22
    7318:	b7 1f       	adc	r27, r23
    731a:	f6 01       	movw	r30, r12
    731c:	80 83       	st	Z, r24
    731e:	91 83       	std	Z+1, r25	; 0x01
    7320:	a2 83       	std	Z+2, r26	; 0x02
    7322:	b3 83       	std	Z+3, r27	; 0x03
    7324:	f7 01       	movw	r30, r14
    7326:	40 81       	ld	r20, Z
    7328:	51 81       	ldd	r21, Z+1	; 0x01
    732a:	62 81       	ldd	r22, Z+2	; 0x02
    732c:	73 81       	ldd	r23, Z+3	; 0x03
    732e:	f4 01       	movw	r30, r8
    7330:	80 81       	ld	r24, Z
    7332:	91 81       	ldd	r25, Z+1	; 0x01
    7334:	a2 81       	ldd	r26, Z+2	; 0x02
    7336:	b3 81       	ldd	r27, Z+3	; 0x03
    7338:	84 0f       	add	r24, r20
    733a:	95 1f       	adc	r25, r21
    733c:	a6 1f       	adc	r26, r22
    733e:	b7 1f       	adc	r27, r23
    7340:	f7 01       	movw	r30, r14
    7342:	80 83       	st	Z, r24
    7344:	91 83       	std	Z+1, r25	; 0x01
    7346:	a2 83       	std	Z+2, r26	; 0x02
    7348:	b3 83       	std	Z+3, r27	; 0x03
    734a:	24 96       	adiw	r28, 0x04	; 4
    734c:	c0 17       	cp	r28, r16
    734e:	d1 07       	cpc	r29, r17
    7350:	41 f6       	brne	.-112    	; 0x72e2 <calc_next_frame+0x28>
    7352:	df 91       	pop	r29
    7354:	cf 91       	pop	r28
    7356:	1f 91       	pop	r17
    7358:	0f 91       	pop	r16
    735a:	ff 90       	pop	r15
    735c:	ef 90       	pop	r14
    735e:	df 90       	pop	r13
    7360:	cf 90       	pop	r12
    7362:	bf 90       	pop	r11
    7364:	af 90       	pop	r10
    7366:	9f 90       	pop	r9
    7368:	8f 90       	pop	r8
    736a:	08 95       	ret

0000736c <isr_dma_dac_ch0_B>:
    736c:	0f 93       	push	r16
    736e:	1f 93       	push	r17
    7370:	cf 93       	push	r28
    7372:	df 93       	push	r29
    7374:	1f 92       	push	r1
    7376:	cd b7       	in	r28, 0x3d	; 61
    7378:	de b7       	in	r29, 0x3e	; 62
    737a:	8f b7       	in	r24, 0x3f	; 63
    737c:	89 83       	std	Y+1, r24	; 0x01
    737e:	f8 94       	cli
    7380:	99 81       	ldd	r25, Y+1	; 0x01
    7382:	e0 e1       	ldi	r30, 0x10	; 16
    7384:	f1 e0       	ldi	r31, 0x01	; 1
    7386:	80 81       	ld	r24, Z
    7388:	80 68       	ori	r24, 0x80	; 128
    738a:	80 83       	st	Z, r24
    738c:	9f bf       	out	0x3f, r25	; 63
    738e:	78 94       	sei
    7390:	05 ed       	ldi	r16, 0xD5	; 213
    7392:	18 e2       	ldi	r17, 0x28	; 40
    7394:	27 e0       	ldi	r18, 0x07	; 7
    7396:	30 e2       	ldi	r19, 0x20	; 32
    7398:	4d ed       	ldi	r20, 0xDD	; 221
    739a:	58 e2       	ldi	r21, 0x28	; 40
    739c:	69 ed       	ldi	r22, 0xD9	; 217
    739e:	78 e2       	ldi	r23, 0x28	; 40
    73a0:	85 eb       	ldi	r24, 0xB5	; 181
    73a2:	98 e2       	ldi	r25, 0x28	; 40
    73a4:	8a df       	rcall	.-236    	; 0x72ba <calc_next_frame>
    73a6:	0f 90       	pop	r0
    73a8:	df 91       	pop	r29
    73aa:	cf 91       	pop	r28
    73ac:	1f 91       	pop	r17
    73ae:	0f 91       	pop	r16
    73b0:	08 95       	ret

000073b2 <isr_dma_dac_ch0_A>:
    73b2:	0f 93       	push	r16
    73b4:	1f 93       	push	r17
    73b6:	cf 93       	push	r28
    73b8:	df 93       	push	r29
    73ba:	1f 92       	push	r1
    73bc:	cd b7       	in	r28, 0x3d	; 61
    73be:	de b7       	in	r29, 0x3e	; 62
    73c0:	8f b7       	in	r24, 0x3f	; 63
    73c2:	89 83       	std	Y+1, r24	; 0x01
    73c4:	f8 94       	cli
    73c6:	99 81       	ldd	r25, Y+1	; 0x01
    73c8:	e0 e2       	ldi	r30, 0x20	; 32
    73ca:	f1 e0       	ldi	r31, 0x01	; 1
    73cc:	80 81       	ld	r24, Z
    73ce:	80 68       	ori	r24, 0x80	; 128
    73d0:	80 83       	st	Z, r24
    73d2:	9f bf       	out	0x3f, r25	; 63
    73d4:	78 94       	sei
    73d6:	05 ed       	ldi	r16, 0xD5	; 213
    73d8:	18 e2       	ldi	r17, 0x28	; 40
    73da:	27 e0       	ldi	r18, 0x07	; 7
    73dc:	30 e2       	ldi	r19, 0x20	; 32
    73de:	4d ed       	ldi	r20, 0xDD	; 221
    73e0:	58 e2       	ldi	r21, 0x28	; 40
    73e2:	69 ed       	ldi	r22, 0xD9	; 217
    73e4:	78 e2       	ldi	r23, 0x28	; 40
    73e6:	85 e9       	ldi	r24, 0x95	; 149
    73e8:	98 e2       	ldi	r25, 0x28	; 40
    73ea:	67 df       	rcall	.-306    	; 0x72ba <calc_next_frame>
    73ec:	0f 90       	pop	r0
    73ee:	df 91       	pop	r29
    73f0:	cf 91       	pop	r28
    73f2:	1f 91       	pop	r17
    73f4:	0f 91       	pop	r16
    73f6:	08 95       	ret

000073f8 <usb_callback_suspend_action>:
    73f8:	08 95       	ret

000073fa <usb_callback_resume_action>:
    73fa:	08 95       	ret

000073fc <usb_callback_remotewakeup_enable>:
    73fc:	08 95       	ret

000073fe <usb_callback_remotewakeup_disable>:
    73fe:	08 95       	ret

00007400 <usb_callback_cdc_enable>:

bool usb_callback_cdc_enable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = true;
    7400:	81 e0       	ldi	r24, 0x01	; 1
    7402:	80 93 b6 29 	sts	0x29B6, r24	; 0x8029b6 <usb_cdc_transfers_autorized>
	return true;
}
    7406:	08 95       	ret

00007408 <usb_callback_cdc_disable>:

void usb_callback_cdc_disable(void)
{
	/* USB CDC feature for serial communication */

	usb_cdc_transfers_autorized = false;
    7408:	10 92 b6 29 	sts	0x29B6, r1	; 0x8029b6 <usb_cdc_transfers_autorized>
    740c:	08 95       	ret

0000740e <usb_callback_config>:
}

void usb_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    740e:	08 95       	ret

00007410 <usb_callback_cdc_set_dtr>:

}

void usb_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
    7410:	08 95       	ret

00007412 <usb_callback_cdc_set_rts>:

}

void usb_callback_cdc_set_rts(uint8_t port, bool b_enable)
{
    7412:	08 95       	ret

00007414 <usb_callback_rx_notify>:

}

void usb_callback_rx_notify(uint8_t port)
{
    7414:	08 95       	ret

00007416 <usb_callback_tx_empty_notify>:

}

void usb_callback_tx_empty_notify(uint8_t port)
{
    7416:	08 95       	ret

00007418 <main>:
	}
}


int main(void)
{
    7418:	2f 92       	push	r2
    741a:	3f 92       	push	r3
    741c:	4f 92       	push	r4
    741e:	5f 92       	push	r5
    7420:	6f 92       	push	r6
    7422:	7f 92       	push	r7
    7424:	8f 92       	push	r8
    7426:	9f 92       	push	r9
    7428:	af 92       	push	r10
    742a:	bf 92       	push	r11
    742c:	cf 92       	push	r12
    742e:	df 92       	push	r13
    7430:	ef 92       	push	r14
    7432:	ff 92       	push	r15
    7434:	0f 93       	push	r16
    7436:	1f 93       	push	r17
    7438:	cf 93       	push	r28
    743a:	df 93       	push	r29
    743c:	cd b7       	in	r28, 0x3d	; 61
    743e:	de b7       	in	r29, 0x3e	; 62
    7440:	a9 97       	sbiw	r28, 0x29	; 41
    7442:	cd bf       	out	0x3d, r28	; 61
    7444:	de bf       	out	0x3e, r29	; 62
	uint8_t retcode = 0;

	/* Init of interrupt system */
	g_workmode = WORKMODE_INIT;
    7446:	22 24       	eor	r2, r2
    7448:	23 94       	inc	r2
    744a:	20 92 b7 29 	sts	0x29B7, r2	; 0x8029b7 <g_workmode>
	irq_initialize_vectors();
    744e:	e0 ea       	ldi	r30, 0xA0	; 160
    7450:	f0 e0       	ldi	r31, 0x00	; 0
    7452:	0f 2e       	mov	r0, r31
    7454:	f7 e0       	ldi	r31, 0x07	; 7
    7456:	df 2e       	mov	r13, r31
    7458:	f0 2d       	mov	r31, r0
    745a:	d2 82       	std	Z+2, r13	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    745c:	d2 82       	std	Z+2, r13	; 0x02
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    745e:	82 81       	ldd	r24, Z+2	; 0x02
    7460:	8f 77       	andi	r24, 0x7F	; 127
    7462:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);

	sysclk_init();		// Clock configuration set-up
    7464:	11 82       	std	Z+1, r1	; 0x01
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    7466:	40 d5       	rcall	.+2688   	; 0x7ee8 <sysclk_init>
    7468:	ef e0       	ldi	r30, 0x0F	; 15
    746a:	fb e2       	ldi	r31, 0x2B	; 43
    746c:	10 82       	st	Z, r1
    746e:	11 82       	std	Z+1, r1	; 0x01
    7470:	12 82       	std	Z+2, r1	; 0x02
    7472:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    7474:	14 82       	std	Z+4, r1	; 0x04

	sleepmgr_init();	// Unlocks all sleep mode levels

	rtc_init();
    7476:	25 82       	std	Z+5, r2	; 0x05
    7478:	0e 94 04 16 	call	0x2c08	; 0x2c08 <rtc_init>
}


static void rtc_start(void)
{
	rtc_set_callback(isr_rtc_alarm);
    747c:	80 ee       	ldi	r24, 0xE0	; 224
    747e:	96 e3       	ldi	r25, 0x36	; 54
    7480:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <rtc_set_callback>

/* INIT section */

static void evsys_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    7484:	62 e0       	ldi	r22, 0x02	; 2
    7486:	80 e0       	ldi	r24, 0x00	; 0

	/* ADC - event channels 0, 1, 2, 3 */
	EVSYS.CH0MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH0
    7488:	b0 d5       	rcall	.+2912   	; 0x7fea <sysclk_enable_module>
    748a:	e0 e8       	ldi	r30, 0x80	; 128
    748c:	f1 e0       	ldi	r31, 0x01	; 1
    748e:	86 ec       	ldi	r24, 0xC6	; 198
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH0 no digital filtering
    7490:	80 83       	st	Z, r24
	EVSYS.CH1MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH1
    7492:	10 86       	std	Z+8, r1	; 0x08
	EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH1 no digital filtering
    7494:	81 83       	std	Z+1, r24	; 0x01
	EVSYS.CH2MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH2
    7496:	11 86       	std	Z+9, r1	; 0x09
	EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH2 no digital filtering
    7498:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH3MUX  = EVSYS_CHMUX_TCC0_CCC_gc;									// TCC0 CC-C goes to EVSYS CH3
    749a:	12 86       	std	Z+10, r1	; 0x0a
	EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH3 no digital filtering
    749c:	83 83       	std	Z+3, r24	; 0x03

	/* DAC - event 4 */
	EVSYS.CH4MUX  = EVSYS_CHMUX_TCE1_OVF_gc;									// TCE1 overflow goes to EVSYS CH4
    749e:	13 86       	std	Z+11, r1	; 0x0b
    74a0:	88 ee       	ldi	r24, 0xE8	; 232
	EVSYS.CH4CTRL = EVSYS_DIGFILT_1SAMPLE_gc;									// EVSYS CH4 no digital filtering
    74a2:	84 83       	std	Z+4, r24	; 0x04

static void tc_init(void)
{
	/* TCC0: VCTCXO PWM signal generation and ADCA & ADCB */
	struct pwm_config pwm_vctcxo_cfg;
	pwm_init(&pwm_vctcxo_cfg, PWM_TCC0, PWM_CH_C, 2048);						// Init PWM structure and enable timer - running with 2048 Hz --> 2 Hz averaged data
    74a4:	14 86       	std	Z+12, r1	; 0x0c
    74a6:	20 e0       	ldi	r18, 0x00	; 0
    74a8:	38 e0       	ldi	r19, 0x08	; 8
    74aa:	43 e0       	ldi	r20, 0x03	; 3
    74ac:	60 e0       	ldi	r22, 0x00	; 0
    74ae:	ce 01       	movw	r24, r28
	pwm_start(&pwm_vctcxo_cfg, 45);												// Start PWM here. Percentage with 1% granularity is to coarse, use driver access instead
    74b0:	01 96       	adiw	r24, 0x01	; 1
    74b2:	61 db       	rcall	.-2366   	; 0x6b76 <pwm_init>
    74b4:	6d e2       	ldi	r22, 0x2D	; 45
    74b6:	ce 01       	movw	r24, r28
	tc_write_cc_buffer(&TCC0, TC_CCC, (uint16_t) (0.5f + pwm_vctcxo_cfg.period * C_VCTCXO_DEFAULT_VOLTS / C_VCTCXO_PWM_HI_VOLTS));	// Initial value for VCTCXO
    74b8:	01 96       	adiw	r24, 0x01	; 1
    74ba:	25 dc       	rcall	.-1974   	; 0x6d06 <pwm_start>
    74bc:	6e 81       	ldd	r22, Y+6	; 0x06
    74be:	7f 81       	ldd	r23, Y+7	; 0x07
    74c0:	80 e0       	ldi	r24, 0x00	; 0
    74c2:	90 e0       	ldi	r25, 0x00	; 0
    74c4:	0e 94 3b 4a 	call	0x9476	; 0x9476 <__floatunsisf>
    74c8:	20 e0       	ldi	r18, 0x00	; 0
    74ca:	30 e0       	ldi	r19, 0x00	; 0
    74cc:	40 ec       	ldi	r20, 0xC0	; 192
    74ce:	5f e3       	ldi	r21, 0x3F	; 63
    74d0:	0e 94 c9 4a 	call	0x9592	; 0x9592 <__mulsf3>
    74d4:	27 e2       	ldi	r18, 0x27	; 39
    74d6:	31 e3       	ldi	r19, 0x31	; 49
    74d8:	40 e5       	ldi	r20, 0x50	; 80
    74da:	50 e4       	ldi	r21, 0x40	; 64
    74dc:	0e 94 a2 49 	call	0x9344	; 0x9344 <__divsf3>
    74e0:	20 e0       	ldi	r18, 0x00	; 0
    74e2:	30 e0       	ldi	r19, 0x00	; 0
    74e4:	40 e0       	ldi	r20, 0x00	; 0
    74e6:	5f e3       	ldi	r21, 0x3F	; 63
    74e8:	0e 94 3e 49 	call	0x927c	; 0x927c <__addsf3>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    74ec:	0e 94 0f 4a 	call	0x941e	; 0x941e <__fixunssfsi>
    74f0:	00 e0       	ldi	r16, 0x00	; 0
    74f2:	18 e0       	ldi	r17, 0x08	; 8
    74f4:	d8 01       	movw	r26, r16
    74f6:	dc 96       	adiw	r26, 0x3c	; 60
    74f8:	6d 93       	st	X+, r22

	/* TCE1: DAC clock */
	tc_enable(&TCE1);
    74fa:	7c 93       	st	X, r23
    74fc:	dd 97       	sbiw	r26, 0x3d	; 61
    74fe:	80 e4       	ldi	r24, 0x40	; 64
    7500:	9a e0       	ldi	r25, 0x0A	; 10
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    7502:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <tc_enable>
    7506:	0f 2e       	mov	r0, r31
    7508:	f0 e4       	ldi	r31, 0x40	; 64
    750a:	ef 2e       	mov	r14, r31
    750c:	fa e0       	ldi	r31, 0x0A	; 10
    750e:	ff 2e       	mov	r15, r31
    7510:	f0 2d       	mov	r31, r0
    7512:	f7 01       	movw	r30, r14
    7514:	81 81       	ldd	r24, Z+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    7516:	88 7f       	andi	r24, 0xF8	; 248
    7518:	81 83       	std	Z+1, r24	; 0x01
    751a:	80 e7       	ldi	r24, 0x70	; 112
    751c:	92 e0       	ldi	r25, 0x02	; 2


static void adc_init(void)
{
	/* Disable digital circuits of ADC pins */
	PORTA_PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    751e:	86 a3       	std	Z+38, r24	; 0x26
    7520:	97 a3       	std	Z+39, r25	; 0x27
    7522:	e0 e1       	ldi	r30, 0x10	; 16
    7524:	f6 e0       	ldi	r31, 0x06	; 6
    7526:	80 81       	ld	r24, Z
	PORTA_PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7528:	87 60       	ori	r24, 0x07	; 7
    752a:	80 83       	st	Z, r24
    752c:	e1 e1       	ldi	r30, 0x11	; 17
    752e:	f6 e0       	ldi	r31, 0x06	; 6
    7530:	80 81       	ld	r24, Z
	PORTA_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7532:	87 60       	ori	r24, 0x07	; 7
    7534:	80 83       	st	Z, r24
    7536:	e2 e1       	ldi	r30, 0x12	; 18
    7538:	f6 e0       	ldi	r31, 0x06	; 6
    753a:	80 81       	ld	r24, Z
	PORTA_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    753c:	87 60       	ori	r24, 0x07	; 7
    753e:	80 83       	st	Z, r24
    7540:	e3 e1       	ldi	r30, 0x13	; 19
    7542:	f6 e0       	ldi	r31, 0x06	; 6
    7544:	80 81       	ld	r24, Z
	PORTA_PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7546:	87 60       	ori	r24, 0x07	; 7
    7548:	80 83       	st	Z, r24
    754a:	e4 e1       	ldi	r30, 0x14	; 20
    754c:	f6 e0       	ldi	r31, 0x06	; 6
    754e:	80 81       	ld	r24, Z
	PORTA_PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7550:	87 60       	ori	r24, 0x07	; 7
    7552:	80 83       	st	Z, r24
    7554:	e5 e1       	ldi	r30, 0x15	; 21
    7556:	f6 e0       	ldi	r31, 0x06	; 6
    7558:	80 81       	ld	r24, Z
	PORTB_PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    755a:	87 60       	ori	r24, 0x07	; 7
    755c:	80 83       	st	Z, r24
    755e:	e2 e3       	ldi	r30, 0x32	; 50
    7560:	f6 e0       	ldi	r31, 0x06	; 6
    7562:	80 81       	ld	r24, Z
	PORTB_PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    7564:	87 60       	ori	r24, 0x07	; 7
    7566:	80 83       	st	Z, r24
    7568:	e3 e3       	ldi	r30, 0x33	; 51
    756a:	f6 e0       	ldi	r31, 0x06	; 6
    756c:	80 81       	ld	r24, Z

	/* Prepare the structures */
	adc_read_configuration(&ADC_VCTCXO_5V0_VBAT,							&g_adc_a_conf);
    756e:	87 60       	ori	r24, 0x07	; 7
    7570:	80 83       	st	Z, r24
    7572:	6a e7       	ldi	r22, 0x7A	; 122
    7574:	79 e2       	ldi	r23, 0x29	; 41
    7576:	80 e0       	ldi	r24, 0x00	; 0
    7578:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_VCTCXO_5V0_VBAT, ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    757a:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <adc_read_configuration>
    757e:	46 e7       	ldi	r20, 0x76	; 118
    7580:	59 e2       	ldi	r21, 0x29	; 41
    7582:	61 e0       	ldi	r22, 0x01	; 1
    7584:	80 e0       	ldi	r24, 0x00	; 0
    7586:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC4, ADC_IO_ADC4_CH,					&g_adcch_io_adc4_conf);
    7588:	0e 94 ef 23 	call	0x47de	; 0x47de <adcch_read_configuration>
    758c:	42 e7       	ldi	r20, 0x72	; 114
    758e:	59 e2       	ldi	r21, 0x29	; 41
    7590:	62 e0       	ldi	r22, 0x02	; 2
    7592:	80 e0       	ldi	r24, 0x00	; 0
    7594:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_IO_ADC5, ADC_IO_ADC5_CH,					&g_adcch_io_adc5_conf);
    7596:	0e 94 ef 23 	call	0x47de	; 0x47de <adcch_read_configuration>
    759a:	4e e6       	ldi	r20, 0x6E	; 110
    759c:	59 e2       	ldi	r21, 0x29	; 41
    759e:	64 e0       	ldi	r22, 0x04	; 4
    75a0:	80 e0       	ldi	r24, 0x00	; 0
    75a2:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_SILENCE, ADC_SILENCE_CH,					&g_adcch_silence_conf);
    75a4:	0e 94 ef 23 	call	0x47de	; 0x47de <adcch_read_configuration>
    75a8:	4a e6       	ldi	r20, 0x6A	; 106
    75aa:	59 e2       	ldi	r21, 0x29	; 41
    75ac:	68 e0       	ldi	r22, 0x08	; 8
    75ae:	80 e0       	ldi	r24, 0x00	; 0
    75b0:	92 e0       	ldi	r25, 0x02	; 2
	adc_read_configuration(&ADC_TEMP,										&g_adc_b_conf);
    75b2:	0e 94 ef 23 	call	0x47de	; 0x47de <adcch_read_configuration>
    75b6:	63 e6       	ldi	r22, 0x63	; 99
    75b8:	79 e2       	ldi	r23, 0x29	; 41
    75ba:	80 e4       	ldi	r24, 0x40	; 64
    75bc:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_TEMP, ADC_TEMP_CH,						&g_adcch_temp_conf);
    75be:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <adc_read_configuration>
    75c2:	4f e5       	ldi	r20, 0x5F	; 95
    75c4:	59 e2       	ldi	r21, 0x29	; 41
    75c6:	61 e0       	ldi	r22, 0x01	; 1
    75c8:	80 e4       	ldi	r24, 0x40	; 64
    75ca:	92 e0       	ldi	r25, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    75cc:	0e 94 ef 23 	call	0x47de	; 0x47de <adcch_read_configuration>
    75d0:	aa e7       	ldi	r26, 0x7A	; 122
    75d2:	b9 e2       	ldi	r27, 0x29	; 41
    75d4:	83 e0       	ldi	r24, 0x03	; 3
    75d6:	14 96       	adiw	r26, 0x04	; 4
    75d8:	8c 93       	st	X, r24
    75da:	14 97       	sbiw	r26, 0x04	; 4
    75dc:	63 e6       	ldi	r22, 0x63	; 99
    75de:	79 e2       	ldi	r23, 0x29	; 41
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_disable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl &= ~int_inp;
    75e0:	fb 01       	movw	r30, r22
    75e2:	d4 82       	std	Z+4, r13	; 0x04
    75e4:	12 96       	adiw	r26, 0x02	; 2
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    75e6:	3c 91       	ld	r19, X
 * \note Not all device families feature this setting.
 */
static inline void adc_set_current_limit(struct adc_config *conf,
		enum adc_current_limit currlimit)
{
	conf->ctrlb &= ~ADC_CURRLIMIT_gm;
    75e8:	12 97       	sbiw	r26, 0x02	; 2
    75ea:	22 81       	ldd	r18, Z+2	; 0x02
    75ec:	11 96       	adiw	r26, 0x01	; 1
    75ee:	9c 91       	ld	r25, X
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    75f0:	11 97       	sbiw	r26, 0x01	; 1
    75f2:	81 81       	ldd	r24, Z+1	; 0x01
    75f4:	0f 2e       	mov	r0, r31
    75f6:	f6 e7       	ldi	r31, 0x76	; 118
    75f8:	cf 2e       	mov	r12, r31
    75fa:	f9 e2       	ldi	r31, 0x29	; 41
    75fc:	df 2e       	mov	r13, r31
    75fe:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    7600:	f6 01       	movw	r30, r12
    7602:	20 82       	st	Z, r2
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    7604:	48 e0       	ldi	r20, 0x08	; 8
    7606:	41 83       	std	Z+1, r20	; 0x01
    7608:	0f 2e       	mov	r0, r31
    760a:	f2 e7       	ldi	r31, 0x72	; 114
    760c:	8f 2e       	mov	r8, r31
    760e:	f9 e2       	ldi	r31, 0x29	; 41
    7610:	9f 2e       	mov	r9, r31
    7612:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    7614:	f4 01       	movw	r30, r8
    7616:	20 82       	st	Z, r2
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    7618:	50 e2       	ldi	r21, 0x20	; 32
    761a:	51 83       	std	Z+1, r21	; 0x01
    761c:	0f 2e       	mov	r0, r31
    761e:	fe e6       	ldi	r31, 0x6E	; 110
    7620:	af 2e       	mov	r10, r31
    7622:	f9 e2       	ldi	r31, 0x29	; 41
    7624:	bf 2e       	mov	r11, r31
    7626:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    7628:	f5 01       	movw	r30, r10
    762a:	20 82       	st	Z, r2
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    762c:	58 e2       	ldi	r21, 0x28	; 40
    762e:	51 83       	std	Z+1, r21	; 0x01
    7630:	0f 2e       	mov	r0, r31
    7632:	fa e6       	ldi	r31, 0x6A	; 106
    7634:	6f 2e       	mov	r6, r31
    7636:	f9 e2       	ldi	r31, 0x29	; 41
    7638:	7f 2e       	mov	r7, r31
    763a:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    763c:	f3 01       	movw	r30, r6
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    763e:	10 82       	st	Z, r1
    7640:	41 83       	std	Z+1, r20	; 0x01
    7642:	0f 2e       	mov	r0, r31
    7644:	ff e5       	ldi	r31, 0x5F	; 95
    7646:	4f 2e       	mov	r4, r31
    7648:	f9 e2       	ldi	r31, 0x29	; 41
    764a:	5f 2e       	mov	r5, r31
    764c:	f0 2d       	mov	r31, r0
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    764e:	f2 01       	movw	r30, r4
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    7650:	10 82       	st	Z, r1
    7652:	11 82       	std	Z+1, r1	; 0x01
    7654:	3e 78       	andi	r19, 0x8E	; 142
    7656:	32 62       	ori	r19, 0x22	; 34
    7658:	12 96       	adiw	r26, 0x02	; 2
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    765a:	3c 93       	st	X, r19
    765c:	12 97       	sbiw	r26, 0x02	; 2
    765e:	2f 78       	andi	r18, 0x8F	; 143
    7660:	23 60       	ori	r18, 0x03	; 3
{
	Assert(start_offset < 16);
	Assert(max_offset < 16);
	Assert(start_offset <= max_offset);

	ch_conf->scan = max_offset | (start_offset << ADC_CH_OFFSET_gp);
    7662:	fb 01       	movw	r30, r22
    7664:	22 83       	std	Z+2, r18	; 0x02
    7666:	22 e0       	ldi	r18, 0x02	; 2
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    7668:	f6 01       	movw	r30, r12
    766a:	23 83       	std	Z+3, r18	; 0x03
    766c:	91 70       	andi	r25, 0x01	; 1
    766e:	90 64       	ori	r25, 0x40	; 64
    7670:	11 96       	adiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    7672:	9c 93       	st	X, r25
    7674:	11 97       	sbiw	r26, 0x01	; 1
    7676:	0f 2e       	mov	r0, r31
    7678:	fc e0       	ldi	r31, 0x0C	; 12
    767a:	3f 2e       	mov	r3, r31
    767c:	f0 2d       	mov	r31, r0
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    767e:	13 96       	adiw	r26, 0x03	; 3
    7680:	3c 92       	st	X, r3
    7682:	81 70       	andi	r24, 0x01	; 1
    7684:	80 66       	ori	r24, 0x60	; 96
    7686:	db 01       	movw	r26, r22
    7688:	11 96       	adiw	r26, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    768a:	8c 93       	st	X, r24
    768c:	11 97       	sbiw	r26, 0x01	; 1
	/* Trigger */
	adc_set_conversion_trigger(&g_adc_a_conf, ADC_TRIG_EVENT_SINGLE, 4, 1);
	adc_set_conversion_trigger(&g_adc_b_conf, ADC_TRIG_EVENT_SINGLE, 1, 0);

	/* Interrupt service routine */
	adc_set_callback(&ADCA, isr_adc_a);
    768e:	13 96       	adiw	r26, 0x03	; 3
    7690:	2c 92       	st	X, r2
    7692:	69 ee       	ldi	r22, 0xE9	; 233
    7694:	76 e3       	ldi	r23, 0x36	; 54
    7696:	80 e0       	ldi	r24, 0x00	; 0
    7698:	92 e0       	ldi	r25, 0x02	; 2
	adc_set_callback(&ADCB, isr_adc_b);
    769a:	0e 94 e5 20 	call	0x41ca	; 0x41ca <adc_set_callback>
    769e:	6f e5       	ldi	r22, 0x5F	; 95
    76a0:	78 e3       	ldi	r23, 0x38	; 56
    76a2:	80 e4       	ldi	r24, 0x40	; 64
    76a4:	92 e0       	ldi	r25, 0x02	; 2
 * \param mode Interrupt mode to set.
 */
static inline void adcch_set_interrupt_mode(struct adc_channel_config *ch_conf,
		enum adcch_mode mode)
{
	ch_conf->intctrl &= ~ADC_CH_INTMODE_gm;
    76a6:	0e 94 e5 20 	call	0x41ca	; 0x41ca <adc_set_callback>
    76aa:	f4 01       	movw	r30, r8
    76ac:	32 81       	ldd	r19, Z+2	; 0x02
    76ae:	d5 01       	movw	r26, r10
    76b0:	12 96       	adiw	r26, 0x02	; 2
    76b2:	2c 91       	ld	r18, X
    76b4:	f3 01       	movw	r30, r6
    76b6:	92 81       	ldd	r25, Z+2	; 0x02
    76b8:	d2 01       	movw	r26, r4
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    76ba:	12 96       	adiw	r26, 0x02	; 2
    76bc:	8c 91       	ld	r24, X
    76be:	f6 01       	movw	r30, r12
    76c0:	42 81       	ldd	r20, Z+2	; 0x02
    76c2:	40 7f       	andi	r20, 0xF0	; 240
    76c4:	41 60       	ori	r20, 0x01	; 1
    76c6:	42 83       	std	Z+2, r20	; 0x02
    76c8:	30 7f       	andi	r19, 0xF0	; 240
    76ca:	31 60       	ori	r19, 0x01	; 1
    76cc:	d4 01       	movw	r26, r8
    76ce:	12 96       	adiw	r26, 0x02	; 2
    76d0:	3c 93       	st	X, r19
    76d2:	20 7f       	andi	r18, 0xF0	; 240
    76d4:	21 60       	ori	r18, 0x01	; 1
    76d6:	f5 01       	movw	r30, r10
    76d8:	22 83       	std	Z+2, r18	; 0x02
    76da:	90 7f       	andi	r25, 0xF0	; 240
    76dc:	91 60       	ori	r25, 0x01	; 1
    76de:	d3 01       	movw	r26, r6
    76e0:	12 96       	adiw	r26, 0x02	; 2
    76e2:	9c 93       	st	X, r25
    76e4:	80 7f       	andi	r24, 0xF0	; 240
    76e6:	81 60       	ori	r24, 0x01	; 1
	adcch_enable_interrupt(&g_adcch_io_adc5_conf);
	adcch_enable_interrupt(&g_adcch_silence_conf);
	adcch_enable_interrupt(&g_adcch_temp_conf);

	/* Execute the new settings */
	adc_write_configuration(&ADCA,											&g_adc_a_conf);
    76e8:	f2 01       	movw	r30, r4
    76ea:	82 83       	std	Z+2, r24	; 0x02
    76ec:	6a e7       	ldi	r22, 0x7A	; 122
    76ee:	79 e2       	ldi	r23, 0x29	; 41
    76f0:	80 e0       	ldi	r24, 0x00	; 0
    76f2:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_VCTCXO_5V0_VBAT,	ADC_VCTCXO_5V0_VBAT_CH,	&g_adcch_vctcxo_5v0_vbat_conf);
    76f4:	0e 94 01 23 	call	0x4602	; 0x4602 <adc_write_configuration>
    76f8:	a6 01       	movw	r20, r12
    76fa:	61 e0       	ldi	r22, 0x01	; 1
    76fc:	80 e0       	ldi	r24, 0x00	; 0
    76fe:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC4,			ADC_IO_ADC4_CH,			&g_adcch_io_adc4_conf);
    7700:	0e 94 a4 23 	call	0x4748	; 0x4748 <adcch_write_configuration>
    7704:	a4 01       	movw	r20, r8
    7706:	62 e0       	ldi	r22, 0x02	; 2
    7708:	80 e0       	ldi	r24, 0x00	; 0
    770a:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_IO_ADC5,			ADC_IO_ADC5_CH,			&g_adcch_io_adc5_conf);
    770c:	0e 94 a4 23 	call	0x4748	; 0x4748 <adcch_write_configuration>
    7710:	a5 01       	movw	r20, r10
    7712:	64 e0       	ldi	r22, 0x04	; 4
    7714:	80 e0       	ldi	r24, 0x00	; 0
    7716:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_SILENCE,			ADC_SILENCE_CH,			&g_adcch_silence_conf);
    7718:	0e 94 a4 23 	call	0x4748	; 0x4748 <adcch_write_configuration>
    771c:	a3 01       	movw	r20, r6
    771e:	68 e0       	ldi	r22, 0x08	; 8
    7720:	80 e0       	ldi	r24, 0x00	; 0
    7722:	92 e0       	ldi	r25, 0x02	; 2
	adc_write_configuration(&ADCB,											&g_adc_b_conf);
    7724:	0e 94 a4 23 	call	0x4748	; 0x4748 <adcch_write_configuration>
    7728:	63 e6       	ldi	r22, 0x63	; 99
    772a:	79 e2       	ldi	r23, 0x29	; 41
    772c:	80 e4       	ldi	r24, 0x40	; 64
    772e:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_TEMP,			ADC_TEMP_CH,			&g_adcch_temp_conf);
    7730:	0e 94 01 23 	call	0x4602	; 0x4602 <adc_write_configuration>
    7734:	a2 01       	movw	r20, r4
    7736:	61 e0       	ldi	r22, 0x01	; 1
    7738:	80 e4       	ldi	r24, 0x40	; 64
    773a:	92 e0       	ldi	r25, 0x02	; 2
    773c:	0e 94 a4 23 	call	0x4748	; 0x4748 <adcch_write_configuration>
    7740:	61 e2       	ldi	r22, 0x21	; 33
    7742:	70 e0       	ldi	r23, 0x00	; 0
    7744:	82 e0       	ldi	r24, 0x02	; 2
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    7746:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
		data <<= 8;
    774a:	c8 2e       	mov	r12, r24
    774c:	d1 2c       	mov	r13, r1
    774e:	dc 2c       	mov	r13, r12
    7750:	cc 24       	eor	r12, r12
    7752:	60 e2       	ldi	r22, 0x20	; 32
    7754:	70 e0       	ldi	r23, 0x00	; 0
    7756:	82 e0       	ldi	r24, 0x02	; 2
		data |= nvm_read_production_signature_row(ADCACAL0);
    7758:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>

	/* Get production signature for calibration */
	ADCA_CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    775c:	c8 2a       	or	r12, r24
    775e:	c0 92 0c 02 	sts	0x020C, r12	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    7762:	d0 92 0d 02 	sts	0x020D, r13	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    7766:	65 e2       	ldi	r22, 0x25	; 37
    7768:	70 e0       	ldi	r23, 0x00	; 0
    776a:	82 e0       	ldi	r24, 0x02	; 2
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    776c:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
		data <<= 8;
    7770:	c8 2e       	mov	r12, r24
    7772:	d1 2c       	mov	r13, r1
    7774:	dc 2c       	mov	r13, r12
    7776:	cc 24       	eor	r12, r12
    7778:	64 e2       	ldi	r22, 0x24	; 36
    777a:	70 e0       	ldi	r23, 0x00	; 0
    777c:	82 e0       	ldi	r24, 0x02	; 2
		data |= nvm_read_production_signature_row(ADCBCAL0);
    777e:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
	ADCB_CAL = adc_get_calibration_data(ADC_CAL_ADCB);
    7782:	c8 2a       	or	r12, r24
    7784:	c0 92 4c 02 	sts	0x024C, r12	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
static void isr_dma_dac_ch0_B(enum dma_channel_status status);
static void task_dac(uint32_t now);

static void dac_init(void)
{
	dac_read_configuration(&DAC_DAC, &dac_conf);
    7788:	d0 92 4d 02 	sts	0x024D, r13	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    778c:	67 ef       	ldi	r22, 0xF7	; 247
    778e:	78 e2       	ldi	r23, 0x28	; 40
    7790:	80 e2       	ldi	r24, 0x20	; 32
    7792:	93 e0       	ldi	r25, 0x03	; 3
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    7794:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <dac_read_configuration>
    7798:	e7 ef       	ldi	r30, 0xF7	; 247
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    779a:	f8 e2       	ldi	r31, 0x28	; 40
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
    779c:	22 82       	std	Z+2, r2	; 0x02
    779e:	30 82       	st	Z, r3
    77a0:	81 81       	ldd	r24, Z+1	; 0x01
    77a2:	8c 79       	andi	r24, 0x9C	; 156
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    77a4:	83 64       	ori	r24, 0x43	; 67
    77a6:	81 83       	std	Z+1, r24	; 0x01
	dac_set_conversion_parameters(&dac_conf, DAC_REF_BANDGAP, DAC_ADJ_LEFT);
	dac_set_active_channel(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 0);
	dac_set_conversion_trigger(&dac_conf, DAC_DAC1_CH | DAC_DAC0_CH, 4);
	dac_write_configuration(&DAC_DAC, &dac_conf);
    77a8:	84 e0       	ldi	r24, 0x04	; 4
    77aa:	83 83       	std	Z+3, r24	; 0x03
    77ac:	bf 01       	movw	r22, r30
    77ae:	80 e2       	ldi	r24, 0x20	; 32
    77b0:	93 e0       	ldi	r25, 0x03	; 3
    77b2:	0e 94 85 24 	call	0x490a	; 0x490a <dac_write_configuration>
    77b6:	62 e3       	ldi	r22, 0x32	; 50
    77b8:	70 e0       	ldi	r23, 0x00	; 0
    77ba:	82 e0       	ldi	r24, 0x02	; 2

	/* Get production signature for calibration */
	DACB_CH0OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB0_OFFSET);
    77bc:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
    77c0:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__TEXT_REGION_LENGTH__+0x700329>
    77c4:	63 e3       	ldi	r22, 0x33	; 51
    77c6:	70 e0       	ldi	r23, 0x00	; 0
    77c8:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH0GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB0_GAIN);
    77ca:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
    77ce:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__TEXT_REGION_LENGTH__+0x700328>
    77d2:	66 e3       	ldi	r22, 0x36	; 54
    77d4:	70 e0       	ldi	r23, 0x00	; 0
    77d6:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1OFFSETCAL	= dac_get_calibration_data(DAC_CAL_DACB1_OFFSET);
    77d8:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
    77dc:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__TEXT_REGION_LENGTH__+0x70032b>
    77e0:	67 e3       	ldi	r22, 0x37	; 55
    77e2:	70 e0       	ldi	r23, 0x00	; 0
    77e4:	82 e0       	ldi	r24, 0x02	; 2
	DACB_CH1GAINCAL		= dac_get_calibration_data(DAC_CAL_DACB1_GAIN);
    77e6:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
	}
}

static void dma_init(void)
{
	memset(&dmach_dma0_conf, 0, sizeof(dmach_dma0_conf));	// DACB channel 0 - linked with dma1
    77ea:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__TEXT_REGION_LENGTH__+0x70032a>
    77ee:	0f 2e       	mov	r0, r31
    77f0:	fc ee       	ldi	r31, 0xEC	; 236
    77f2:	af 2e       	mov	r10, r31
    77f4:	f8 e2       	ldi	r31, 0x28	; 40
    77f6:	bf 2e       	mov	r11, r31
    77f8:	f0 2d       	mov	r31, r0
    77fa:	8b e0       	ldi	r24, 0x0B	; 11
    77fc:	d5 01       	movw	r26, r10
    77fe:	e8 2f       	mov	r30, r24
    7800:	1d 92       	st	X+, r1
	memset(&dmach_dma1_conf, 0, sizeof(dmach_dma1_conf));	// DACB channel 0 - linked with dma0
    7802:	ea 95       	dec	r30
    7804:	e9 f7       	brne	.-6      	; 0x7800 <main+0x3e8>
    7806:	0f 2e       	mov	r0, r31
    7808:	f1 ee       	ldi	r31, 0xE1	; 225
    780a:	cf 2e       	mov	r12, r31
    780c:	f8 e2       	ldi	r31, 0x28	; 40
    780e:	df 2e       	mov	r13, r31
    7810:	f0 2d       	mov	r31, r0
    7812:	d6 01       	movw	r26, r12
    7814:	1d 92       	st	X+, r1
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    7816:	8a 95       	dec	r24
    7818:	e9 f7       	brne	.-6      	; 0x7814 <main+0x3fc>
    781a:	80 e2       	ldi	r24, 0x20	; 32
    781c:	90 e0       	ldi	r25, 0x00	; 0
    781e:	f5 01       	movw	r30, r10
    7820:	84 83       	std	Z+4, r24	; 0x04
    7822:	95 83       	std	Z+5, r25	; 0x05
    7824:	d6 01       	movw	r26, r12
    7826:	14 96       	adiw	r26, 0x04	; 4
    7828:	8d 93       	st	X+, r24
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    782a:	9c 93       	st	X, r25
    782c:	15 97       	sbiw	r26, 0x05	; 5
    782e:	85 e9       	ldi	r24, 0x95	; 149
    7830:	98 e2       	ldi	r25, 0x28	; 40
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    7832:	87 83       	std	Z+7, r24	; 0x07
    7834:	90 87       	std	Z+8, r25	; 0x08
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    7836:	29 ed       	ldi	r18, 0xD9	; 217
    7838:	22 83       	std	Z+2, r18	; 0x02
    783a:	88 e3       	ldi	r24, 0x38	; 56
    783c:	93 e0       	ldi	r25, 0x03	; 3
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    783e:	81 87       	std	Z+9, r24	; 0x09
    7840:	92 87       	std	Z+10, r25	; 0x0a
    7842:	45 eb       	ldi	r20, 0xB5	; 181
    7844:	58 e2       	ldi	r21, 0x28	; 40
    7846:	17 96       	adiw	r26, 0x07	; 7
    7848:	4d 93       	st	X+, r20
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    784a:	5c 93       	st	X, r21
    784c:	18 97       	sbiw	r26, 0x08	; 8
    784e:	12 96       	adiw	r26, 0x02	; 2
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    7850:	2c 93       	st	X, r18
    7852:	12 97       	sbiw	r26, 0x02	; 2
    7854:	19 96       	adiw	r26, 0x09	; 9
    7856:	8d 93       	st	X+, r24
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    7858:	9c 93       	st	X, r25
    785a:	1a 97       	sbiw	r26, 0x0a	; 10
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    785c:	95 e2       	ldi	r25, 0x25	; 37
    785e:	93 83       	std	Z+3, r25	; 0x03
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    7860:	86 e0       	ldi	r24, 0x06	; 6
    7862:	80 83       	st	Z, r24
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    7864:	13 96       	adiw	r26, 0x03	; 3
	dma_channel_set_single_shot(&dmach_dma0_conf);

	dma_channel_set_trigger_source(&dmach_dma1_conf, DMA_CH_TRIGSRC_DACB_CH0_gc);
	dma_channel_set_single_shot(&dmach_dma1_conf);

	task_dac(rtc_get_time());																		// Calculate DDS increments
    7866:	9c 93       	st	X, r25
    7868:	13 97       	sbiw	r26, 0x03	; 3
    786a:	8c 93       	st	X, r24
    786c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <rtc_get_time>
	tc_init();			// Timers
	adc_init();			// ADC
#ifdef USE_DAC
	dac_init();			// DAC
#endif
	twi_init();			// I2C / TWI
    7870:	64 dc       	rcall	.-1848   	; 0x713a <task_dac>

	board_init();		// Activates all in/out pins not already handled above - transitions from Z to dedicated states
    7872:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <twi_init>

	nvm_init(INT_FLASH);
    7876:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <board_init>
    787a:	80 e0       	ldi	r24, 0x00	; 0

	/* All interrupt sources & PMIC are prepared until here - IRQ activation follows */
	cpu_irq_enable();
    787c:	0e 94 6f 14 	call	0x28de	; 0x28de <nvm_init>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    7880:	78 94       	sei
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    7882:	f8 01       	movw	r30, r16
    7884:	80 81       	ld	r24, Z
    7886:	80 7f       	andi	r24, 0xF0	; 240

static void tc_start(void)
{
	/* ADC clock */
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);							// VCTCXO PWM start, output still is Z-state
	tc_set_overflow_interrupt_callback(&TCC0, isr_tcc0_ovfl);
    7888:	81 60       	ori	r24, 0x01	; 1
    788a:	80 83       	st	Z, r24
    788c:	6c ef       	ldi	r22, 0xFC	; 252
    788e:	78 e3       	ldi	r23, 0x38	; 56
    7890:	80 e0       	ldi	r24, 0x00	; 0
    7892:	98 e0       	ldi	r25, 0x08	; 8
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    7894:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <tc_set_overflow_interrupt_callback>
    7898:	d8 01       	movw	r26, r16
    789a:	16 96       	adiw	r26, 0x06	; 6
    789c:	8c 91       	ld	r24, X
    789e:	16 97       	sbiw	r26, 0x06	; 6
    78a0:	8c 7f       	andi	r24, 0xFC	; 252
    78a2:	16 96       	adiw	r26, 0x06	; 6
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    78a4:	8c 93       	st	X, r24
    78a6:	16 97       	sbiw	r26, 0x06	; 6
    78a8:	16 96       	adiw	r26, 0x06	; 6
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    78aa:	8c 91       	ld	r24, X
    78ac:	16 97       	sbiw	r26, 0x06	; 6
    78ae:	81 60       	ori	r24, 0x01	; 1
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    78b0:	16 96       	adiw	r26, 0x06	; 6
    78b2:	8c 93       	st	X, r24
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    78b4:	f7 01       	movw	r30, r14
    78b6:	80 81       	ld	r24, Z
    78b8:	80 7f       	andi	r24, 0xF0	; 240
	dma_init();
}

static void dac_start(void)
{
	dac_enable(&DACB);
    78ba:	81 60       	ori	r24, 0x01	; 1
    78bc:	80 83       	st	Z, r24
    78be:	80 e2       	ldi	r24, 0x20	; 32
    78c0:	93 e0       	ldi	r25, 0x03	; 3
	task_dac(rtc_get_time());																		// Calculate DDS increments
}

static void dma_start(void)
{
	dma_enable();
    78c2:	0e 94 59 24 	call	0x48b2	; 0x48b2 <dac_enable>

	dma_set_callback(DMA_CHANNEL_DACB_CH0_A, isr_dma_dac_ch0_A);
    78c6:	0e 94 d5 14 	call	0x29aa	; 0x29aa <dma_enable>
    78ca:	69 ed       	ldi	r22, 0xD9	; 217
    78cc:	79 e3       	ldi	r23, 0x39	; 57
    78ce:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
    78d0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <dma_set_callback>
    78d4:	d5 01       	movw	r26, r10
    78d6:	11 96       	adiw	r26, 0x01	; 1
    78d8:	8c 91       	ld	r24, X
    78da:	11 97       	sbiw	r26, 0x01	; 1
    78dc:	80 7f       	andi	r24, 0xF0	; 240
    78de:	8a 60       	ori	r24, 0x0A	; 10
	dma_channel_set_interrupt_level(&dmach_dma0_conf, DMA_INT_LVL_MED);

	dma_set_callback(DMA_CHANNEL_DACB_CH0_B, isr_dma_dac_ch0_B);
    78e0:	11 96       	adiw	r26, 0x01	; 1
    78e2:	8c 93       	st	X, r24
    78e4:	66 eb       	ldi	r22, 0xB6	; 182
    78e6:	79 e3       	ldi	r23, 0x39	; 57
    78e8:	81 e0       	ldi	r24, 0x01	; 1
    78ea:	0e 94 f7 14 	call	0x29ee	; 0x29ee <dma_set_callback>
    78ee:	f6 01       	movw	r30, r12
    78f0:	81 81       	ldd	r24, Z+1	; 0x01
    78f2:	80 7f       	andi	r24, 0xF0	; 240

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    78f4:	8a 60       	ori	r24, 0x0A	; 10
    78f6:	81 83       	std	Z+1, r24	; 0x01
	cpu_irq_disable();
    78f8:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    78fa:	8c 87       	std	Y+12, r24	; 0x0c
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_PRIMODE_gm) | primode;
    78fc:	f8 94       	cli
    78fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    7900:	e0 e0       	ldi	r30, 0x00	; 0
    7902:	f1 e0       	ldi	r31, 0x01	; 1
    7904:	80 81       	ld	r24, Z
    7906:	8c 7f       	andi	r24, 0xFC	; 252
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7908:	82 60       	ori	r24, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    790a:	80 83       	st	Z, r24
    790c:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_disable();
    790e:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    7910:	8b 87       	std	Y+11, r24	; 0x0b
#endif

	iflags = cpu_irq_save();

#if XMEGA_A || XMEGA_AU
	DMA.CTRL = (DMA.CTRL & ~DMA_DBUFMODE_gm) | dbufmode;
    7912:	f8 94       	cli
    7914:	9b 85       	ldd	r25, Y+11	; 0x0b
    7916:	80 81       	ld	r24, Z
    7918:	83 7f       	andi	r24, 0xF3	; 243
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    791a:	84 60       	ori	r24, 0x04	; 4
	dma_channel_set_interrupt_level(&dmach_dma1_conf, DMA_INT_LVL_MED);

	dma_set_priority_mode(DMA_PRIMODE_CH01RR23_gc);
	dma_set_double_buffer_mode(DMA_DBUFMODE_CH01_gc);

	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_A, &dmach_dma0_conf);
    791c:	80 83       	st	Z, r24
    791e:	9f bf       	out	0x3f, r25	; 63
    7920:	b5 01       	movw	r22, r10
    7922:	80 e0       	ldi	r24, 0x00	; 0
	dma_channel_write_config(DMA_CHANNEL_DACB_CH0_B, &dmach_dma1_conf);
    7924:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <dma_channel_write_config>
    7928:	b6 01       	movw	r22, r12
    792a:	81 e0       	ldi	r24, 0x01	; 1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    792c:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <dma_channel_write_config>
	cpu_irq_disable();
    7930:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    7932:	8e 87       	std	Y+14, r24	; 0x0e
	/* IRQ disabled section */
	{
		irqflags_t flags = cpu_irq_save();

		/* Prepare DMA blocks */
		calc_next_frame(&dac_io_dac0_buf[0][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    7934:	f8 94       	cli
    7936:	fe 84       	ldd	r15, Y+14	; 0x0e
    7938:	05 ed       	ldi	r16, 0xD5	; 213
    793a:	18 e2       	ldi	r17, 0x28	; 40
    793c:	27 e0       	ldi	r18, 0x07	; 7
    793e:	30 e2       	ldi	r19, 0x20	; 32
    7940:	4d ed       	ldi	r20, 0xDD	; 221
    7942:	58 e2       	ldi	r21, 0x28	; 40
    7944:	69 ed       	ldi	r22, 0xD9	; 217
    7946:	78 e2       	ldi	r23, 0x28	; 40
    7948:	85 e9       	ldi	r24, 0x95	; 149
		calc_next_frame(&dac_io_dac0_buf[1][0], &dds0_reg, &dds0_inc, &dds1_reg, &dds1_inc);
    794a:	98 e2       	ldi	r25, 0x28	; 40
    794c:	b6 dc       	rcall	.-1684   	; 0x72ba <calc_next_frame>
    794e:	27 e0       	ldi	r18, 0x07	; 7
    7950:	30 e2       	ldi	r19, 0x20	; 32
    7952:	4d ed       	ldi	r20, 0xDD	; 221
    7954:	58 e2       	ldi	r21, 0x28	; 40
    7956:	69 ed       	ldi	r22, 0xD9	; 217
    7958:	78 e2       	ldi	r23, 0x28	; 40
    795a:	85 eb       	ldi	r24, 0xB5	; 181

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    795c:	98 e2       	ldi	r25, 0x28	; 40
    795e:	ad dc       	rcall	.-1702   	; 0x72ba <calc_next_frame>
	cpu_irq_disable();
    7960:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    7962:	8d 87       	std	Y+13, r24	; 0x0d
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    7964:	f8 94       	cli
    7966:	9d 85       	ldd	r25, Y+13	; 0x0d
    7968:	e0 e1       	ldi	r30, 0x10	; 16
    796a:	f1 e0       	ldi	r31, 0x01	; 1
    796c:	80 81       	ld	r24, Z
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    796e:	80 68       	ori	r24, 0x80	; 128
    7970:	80 83       	st	Z, r24
}

static void adc_start(void)
{
	/* Power up after configurations are being set */
	adc_enable(&ADCA);
    7972:	9f bf       	out	0x3f, r25	; 63
    7974:	ff be       	out	0x3f, r15	; 63
    7976:	80 e0       	ldi	r24, 0x00	; 0
	adc_enable(&ADCB);
    7978:	92 e0       	ldi	r25, 0x02	; 2
    797a:	0e 94 45 21 	call	0x428a	; 0x428a <adc_enable>
    797e:	80 e4       	ldi	r24, 0x40	; 64
}


static void usb_init(void)
{
	udc_start();
    7980:	92 e0       	ldi	r25, 0x02	; 2

#if 1
	stdio_usb_init();	// Init and enable stdio_usb
    7982:	0e 94 45 21 	call	0x428a	; 0x428a <adc_enable>
	stdio_usb_enable();
    7986:	bd d7       	rcall	.+3962   	; 0x8902 <udc_start>
	delay_ms(140);
    7988:	0e 94 d5 47 	call	0x8faa	; 0x8faa <stdio_usb_init>
    798c:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <stdio_usb_enable>
    7990:	61 e6       	ldi	r22, 0x61	; 97
    7992:	7e ea       	ldi	r23, 0xAE	; 174

	printf("%c\r\n", 0x0c);
    7994:	8a e0       	ldi	r24, 0x0A	; 10
    7996:	90 e0       	ldi	r25, 0x00	; 0
    7998:	08 da       	rcall	.-3056   	; 0x6daa <__portable_avr_delay_cycles>
    799a:	1f 92       	push	r1
    799c:	3f 92       	push	r3
    799e:	89 e9       	ldi	r24, 0x99	; 153
    79a0:	95 e2       	ldi	r25, 0x25	; 37
    79a2:	9f 93       	push	r25
	printf("===============================\r\n");
    79a4:	8f 93       	push	r24
    79a6:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>
    79aa:	8e e9       	ldi	r24, 0x9E	; 158
	printf("FindMeSAT - USB logging started\r\n");
    79ac:	95 e2       	ldi	r25, 0x25	; 37
    79ae:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    79b2:	8f eb       	ldi	r24, 0xBF	; 191
	printf("===============================\r\n\r\n");
    79b4:	95 e2       	ldi	r25, 0x25	; 37
    79b6:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>
    79ba:	80 ee       	ldi	r24, 0xE0	; 224

	/* Init of USB system */
	usb_init();			// USB device stack start function to enable stack and start USB

	/* Start TWI channels */
	twi_start();		// Start TWI
    79bc:	95 e2       	ldi	r25, 0x25	; 37
    79be:	0e 94 92 4b 	call	0x9724	; 0x9724 <puts>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    79c2:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <twi_start>
	cpu_irq_disable();
	return flags;
    79c6:	8f b7       	in	r24, 0x3f	; 63

	/* The application code */
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode = WORKMODE_RUN;
    79c8:	88 8b       	std	Y+16, r24	; 0x10
    79ca:	f8 94       	cli
    79cc:	88 89       	ldd	r24, Y+16	; 0x10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    79ce:	f2 e0       	ldi	r31, 0x02	; 2
    79d0:	f0 93 b7 29 	sts	0x29B7, r31	; 0x8029b7 <g_workmode>
    79d4:	8f bf       	out	0x3f, r24	; 63
    79d6:	0f 90       	pop	r0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    79d8:	0f 90       	pop	r0
    79da:	0f 90       	pop	r0
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    79dc:	0f 90       	pop	r0
    79de:	0f e0       	ldi	r16, 0x0F	; 15
    79e0:	1b e2       	ldi	r17, 0x2B	; 43
    79e2:	0f 2e       	mov	r0, r31
    79e4:	f8 e4       	ldi	r31, 0x48	; 72

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    79e6:	2f 2e       	mov	r2, r31
    79e8:	31 2c       	mov	r3, r1
	cpu_irq_disable();
    79ea:	f0 2d       	mov	r31, r0
	return flags;
    79ec:	8f b7       	in	r24, 0x3f	; 63
}

static void task(void)
{
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode;
    79ee:	8a 87       	std	Y+10, r24	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    79f0:	f8 94       	cli
	cpu_irq_restore(flags);

	if (l_workmode == WORKMODE_RUN) {
    79f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    79f4:	80 91 b7 29 	lds	r24, 0x29B7	; 0x8029b7 <g_workmode>
		uint32_t now = rtc_get_time();
    79f8:	9f bf       	out	0x3f, r25	; 63
    79fa:	82 30       	cpi	r24, 0x02	; 2
    79fc:	09 f0       	breq	.+2      	; 0x7a00 <main+0x5e8>
    79fe:	0d c2       	rjmp	.+1050   	; 0x7e1a <main+0xa02>

		/* TASK when woken up and all ISRs are done */
		task_dac(now);
    7a00:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <rtc_get_time>

static void task_adc(uint32_t now)
{	/* Calculations of the ADC values for the presentation layer */
	static uint32_t adc_last = 0;

	if ((now - adc_last) >= 512 || (now < adc_last)) {
    7a04:	6b 01       	movw	r12, r22
    7a06:	7c 01       	movw	r14, r24
    7a08:	98 db       	rcall	.-2256   	; 0x713a <task_dac>
    7a0a:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <adc_last.7500>
    7a0e:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <adc_last.7500+0x1>
    7a12:	a0 91 83 28 	lds	r26, 0x2883	; 0x802883 <adc_last.7500+0x2>
    7a16:	b0 91 84 28 	lds	r27, 0x2884	; 0x802884 <adc_last.7500+0x3>
    7a1a:	b7 01       	movw	r22, r14
    7a1c:	a6 01       	movw	r20, r12
    7a1e:	48 1b       	sub	r20, r24
    7a20:	59 0b       	sbc	r21, r25
    7a22:	6a 0b       	sbc	r22, r26
    7a24:	7b 0b       	sbc	r23, r27
    7a26:	41 15       	cp	r20, r1
    7a28:	52 40       	sbci	r21, 0x02	; 2
    7a2a:	61 05       	cpc	r22, r1
    7a2c:	71 05       	cpc	r23, r1
    7a2e:	30 f4       	brcc	.+12     	; 0x7a3c <main+0x624>
    7a30:	c8 16       	cp	r12, r24
    7a32:	d9 06       	cpc	r13, r25
    7a34:	ea 06       	cpc	r14, r26
		adc_last = now;
    7a36:	fb 06       	cpc	r15, r27
    7a38:	08 f0       	brcs	.+2      	; 0x7a3c <main+0x624>
    7a3a:	12 c1       	rjmp	.+548    	; 0x7c60 <main+0x848>
    7a3c:	c0 92 81 28 	sts	0x2881, r12	; 0x802881 <adc_last.7500>
    7a40:	d0 92 82 28 	sts	0x2882, r13	; 0x802882 <adc_last.7500+0x1>
    7a44:	e0 92 83 28 	sts	0x2883, r14	; 0x802883 <adc_last.7500+0x2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7a48:	f0 92 84 28 	sts	0x2884, r15	; 0x802884 <adc_last.7500+0x3>
	cpu_irq_disable();
	return flags;
    7a4c:	8f b7       	in	r24, 0x3f	; 63

		irqflags_t flags = cpu_irq_save();
		uint32_t l_adc_vctcxo_cur	= g_adc_vctcxo_cur;
    7a4e:	88 87       	std	Y+8, r24	; 0x08
    7a50:	f8 94       	cli
    7a52:	68 85       	ldd	r22, Y+8	; 0x08
    7a54:	20 91 5b 29 	lds	r18, 0x295B	; 0x80295b <g_adc_vctcxo_cur>
    7a58:	30 91 5c 29 	lds	r19, 0x295C	; 0x80295c <g_adc_vctcxo_cur+0x1>
    7a5c:	40 91 5d 29 	lds	r20, 0x295D	; 0x80295d <g_adc_vctcxo_cur+0x2>
		uint32_t l_adc_5v0_cur		= g_adc_5v0_cur;
    7a60:	50 91 5e 29 	lds	r21, 0x295E	; 0x80295e <g_adc_vctcxo_cur+0x3>
    7a64:	40 90 51 29 	lds	r4, 0x2951	; 0x802951 <g_adc_5v0_cur>
    7a68:	50 90 52 29 	lds	r5, 0x2952	; 0x802952 <g_adc_5v0_cur+0x1>
    7a6c:	60 90 53 29 	lds	r6, 0x2953	; 0x802953 <g_adc_5v0_cur+0x2>
		uint32_t l_adc_vbat_cur		= g_adc_vbat_cur;
    7a70:	70 90 54 29 	lds	r7, 0x2954	; 0x802954 <g_adc_5v0_cur+0x3>
    7a74:	80 90 47 29 	lds	r8, 0x2947	; 0x802947 <g_adc_vbat_cur>
    7a78:	90 90 48 29 	lds	r9, 0x2948	; 0x802948 <g_adc_vbat_cur+0x1>
    7a7c:	a0 90 49 29 	lds	r10, 0x2949	; 0x802949 <g_adc_vbat_cur+0x2>
		uint32_t l_adc_io_adc4_cur	= g_adc_io_adc4_cur;
    7a80:	b0 90 4a 29 	lds	r11, 0x294A	; 0x80294a <g_adc_vbat_cur+0x3>
    7a84:	80 91 3d 29 	lds	r24, 0x293D	; 0x80293d <g_adc_io_adc4_cur>
    7a88:	90 91 3e 29 	lds	r25, 0x293E	; 0x80293e <g_adc_io_adc4_cur+0x1>
    7a8c:	a0 91 3f 29 	lds	r26, 0x293F	; 0x80293f <g_adc_io_adc4_cur+0x2>
    7a90:	b0 91 40 29 	lds	r27, 0x2940	; 0x802940 <g_adc_io_adc4_cur+0x3>
    7a94:	89 8b       	std	Y+17, r24	; 0x11
		uint32_t l_adc_io_adc5_cur	= g_adc_io_adc5_cur;
    7a96:	9a 8b       	std	Y+18, r25	; 0x12
    7a98:	ab 8b       	std	Y+19, r26	; 0x13
    7a9a:	bc 8b       	std	Y+20, r27	; 0x14
    7a9c:	80 91 33 29 	lds	r24, 0x2933	; 0x802933 <g_adc_io_adc5_cur>
    7aa0:	90 91 34 29 	lds	r25, 0x2934	; 0x802934 <g_adc_io_adc5_cur+0x1>
    7aa4:	a0 91 35 29 	lds	r26, 0x2935	; 0x802935 <g_adc_io_adc5_cur+0x2>
    7aa8:	b0 91 36 29 	lds	r27, 0x2936	; 0x802936 <g_adc_io_adc5_cur+0x3>
    7aac:	8d 8b       	std	Y+21, r24	; 0x15
		uint32_t l_adc_silence_cur	= g_adc_silence_cur;
    7aae:	9e 8b       	std	Y+22, r25	; 0x16
    7ab0:	af 8b       	std	Y+23, r26	; 0x17
    7ab2:	b8 8f       	std	Y+24, r27	; 0x18
    7ab4:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <g_adc_silence_cur>
    7ab8:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <g_adc_silence_cur+0x1>
    7abc:	a0 91 2b 29 	lds	r26, 0x292B	; 0x80292b <g_adc_silence_cur+0x2>
    7ac0:	b0 91 2c 29 	lds	r27, 0x292C	; 0x80292c <g_adc_silence_cur+0x3>
    7ac4:	89 8f       	std	Y+25, r24	; 0x19
		uint32_t l_adc_temp_cur		= g_adc_temp_cur;
    7ac6:	9a 8f       	std	Y+26, r25	; 0x1a
    7ac8:	ab 8f       	std	Y+27, r26	; 0x1b
    7aca:	bc 8f       	std	Y+28, r27	; 0x1c
    7acc:	80 91 1f 29 	lds	r24, 0x291F	; 0x80291f <g_adc_temp_cur>
    7ad0:	90 91 20 29 	lds	r25, 0x2920	; 0x802920 <g_adc_temp_cur+0x1>
    7ad4:	a0 91 21 29 	lds	r26, 0x2921	; 0x802921 <g_adc_temp_cur+0x2>
    7ad8:	b0 91 22 29 	lds	r27, 0x2922	; 0x802922 <g_adc_temp_cur+0x3>
    7adc:	8d 8f       	std	Y+29, r24	; 0x1d
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7ade:	9e 8f       	std	Y+30, r25	; 0x1e

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7ae0:	af 8f       	std	Y+31, r26	; 0x1f
    7ae2:	b8 a3       	std	Y+32, r27	; 0x20
	cpu_irq_disable();
    7ae4:	6f bf       	out	0x3f, r22	; 63
	return flags;
    7ae6:	8f b7       	in	r24, 0x3f	; 63
    7ae8:	89 83       	std	Y+1, r24	; 0x01
		int16_t l_adc_io_adc5_volt_1000	= (int16_t) (((  1000UL * l_adc_io_adc5_cur * C_VCC_3V0_AREF_VOLTS                   ) / C_ADC_STEPS));
		int16_t l_adc_silence_volt_1000	= (int16_t) (((  1000UL * l_adc_silence_cur * C_VCC_3V0_AREF_VOLTS                   ) / C_ADC_STEPS));
		int16_t l_adc_temp_deg_100		= (int16_t) ((((  100UL * l_adc_temp_cur                           * C_TEMPSENSE_MULT) / C_ADC_STEPS))  -  100 * C_0DEGC_K);

		flags = cpu_irq_save();
		g_adc_vctcxo_volt_1000	= l_adc_vctcxo_volt_1000;
    7aea:	f8 94       	cli
    7aec:	99 81       	ldd	r25, Y+1	; 0x01
    7aee:	99 a3       	std	Y+33, r25	; 0x21
    7af0:	a8 eb       	ldi	r26, 0xB8	; 184
    7af2:	bb e0       	ldi	r27, 0x0B	; 11
    7af4:	0e 94 99 48 	call	0x9132	; 0x9132 <__muluhisi3>
    7af8:	05 2e       	mov	r0, r21
    7afa:	54 e1       	ldi	r21, 0x14	; 20
    7afc:	96 95       	lsr	r25
    7afe:	87 95       	ror	r24
    7b00:	77 95       	ror	r23
    7b02:	67 95       	ror	r22
    7b04:	5a 95       	dec	r21
    7b06:	d1 f7       	brne	.-12     	; 0x7afc <main+0x6e4>
    7b08:	50 2d       	mov	r21, r0
    7b0a:	0e 94 3b 4a 	call	0x9476	; 0x9476 <__floatunsisf>
    7b0e:	20 e0       	ldi	r18, 0x00	; 0
    7b10:	30 e0       	ldi	r19, 0x00	; 0
    7b12:	4c e3       	ldi	r20, 0x3C	; 60
    7b14:	52 e4       	ldi	r21, 0x42	; 66
    7b16:	0e 94 3d 49 	call	0x927a	; 0x927a <__subsf3>
    7b1a:	0e 94 0a 4a 	call	0x9414	; 0x9414 <__fixsfsi>
    7b1e:	60 93 17 29 	sts	0x2917, r22	; 0x802917 <g_adc_vctcxo_volt_1000>
		g_adc_5v0_volt_1000		= l_adc_5v0_volt_1000;
    7b22:	70 93 18 29 	sts	0x2918, r23	; 0x802918 <g_adc_vctcxo_volt_1000+0x1>
    7b26:	a8 eb       	ldi	r26, 0xB8	; 184
    7b28:	bb e0       	ldi	r27, 0x0B	; 11
    7b2a:	a3 01       	movw	r20, r6
    7b2c:	92 01       	movw	r18, r4
    7b2e:	0e 94 99 48 	call	0x9132	; 0x9132 <__muluhisi3>
    7b32:	0e 94 3b 4a 	call	0x9476	; 0x9476 <__floatunsisf>
    7b36:	29 ed       	ldi	r18, 0xD9	; 217
    7b38:	38 ed       	ldi	r19, 0xD8	; 216
    7b3a:	4a e1       	ldi	r20, 0x1A	; 26
    7b3c:	50 e4       	ldi	r21, 0x40	; 64
    7b3e:	0e 94 c9 4a 	call	0x9592	; 0x9592 <__mulsf3>
    7b42:	20 e0       	ldi	r18, 0x00	; 0
    7b44:	30 e0       	ldi	r19, 0x00	; 0
    7b46:	40 e8       	ldi	r20, 0x80	; 128
    7b48:	55 e3       	ldi	r21, 0x35	; 53
    7b4a:	0e 94 c9 4a 	call	0x9592	; 0x9592 <__mulsf3>
    7b4e:	0e 94 0a 4a 	call	0x9414	; 0x9414 <__fixsfsi>
    7b52:	60 93 15 29 	sts	0x2915, r22	; 0x802915 <g_adc_5v0_volt_1000>
		g_adc_vbat_volt_1000	= l_adc_vbat_volt_1000;
    7b56:	70 93 16 29 	sts	0x2916, r23	; 0x802916 <g_adc_5v0_volt_1000+0x1>
    7b5a:	a8 eb       	ldi	r26, 0xB8	; 184
    7b5c:	bb e0       	ldi	r27, 0x0B	; 11
    7b5e:	a5 01       	movw	r20, r10
    7b60:	94 01       	movw	r18, r8
    7b62:	0e 94 99 48 	call	0x9132	; 0x9132 <__muluhisi3>
    7b66:	0e 94 3b 4a 	call	0x9476	; 0x9476 <__floatunsisf>
    7b6a:	23 ee       	ldi	r18, 0xE3	; 227
    7b6c:	35 e4       	ldi	r19, 0x45	; 69
    7b6e:	4b e1       	ldi	r20, 0x1B	; 27
    7b70:	50 e4       	ldi	r21, 0x40	; 64
    7b72:	0e 94 c9 4a 	call	0x9592	; 0x9592 <__mulsf3>
    7b76:	20 e0       	ldi	r18, 0x00	; 0
    7b78:	30 e0       	ldi	r19, 0x00	; 0
    7b7a:	40 e8       	ldi	r20, 0x80	; 128
    7b7c:	55 e3       	ldi	r21, 0x35	; 53
    7b7e:	0e 94 c9 4a 	call	0x9592	; 0x9592 <__mulsf3>
    7b82:	0e 94 0a 4a 	call	0x9414	; 0x9414 <__fixsfsi>
    7b86:	60 93 13 29 	sts	0x2913, r22	; 0x802913 <g_adc_vbat_volt_1000>
		g_adc_io_adc4_volt_1000	= l_adc_io_adc4_volt_1000;
    7b8a:	70 93 14 29 	sts	0x2914, r23	; 0x802914 <g_adc_vbat_volt_1000+0x1>
    7b8e:	a8 eb       	ldi	r26, 0xB8	; 184
    7b90:	bb e0       	ldi	r27, 0x0B	; 11
    7b92:	29 89       	ldd	r18, Y+17	; 0x11
    7b94:	3a 89       	ldd	r19, Y+18	; 0x12
    7b96:	4b 89       	ldd	r20, Y+19	; 0x13
    7b98:	5c 89       	ldd	r21, Y+20	; 0x14
    7b9a:	0e 94 99 48 	call	0x9132	; 0x9132 <__muluhisi3>
    7b9e:	dc 01       	movw	r26, r24
    7ba0:	cb 01       	movw	r24, r22
    7ba2:	07 2e       	mov	r0, r23
    7ba4:	74 e1       	ldi	r23, 0x14	; 20
    7ba6:	b6 95       	lsr	r27
    7ba8:	a7 95       	ror	r26
    7baa:	97 95       	ror	r25
    7bac:	87 95       	ror	r24
    7bae:	7a 95       	dec	r23
    7bb0:	d1 f7       	brne	.-12     	; 0x7ba6 <main+0x78e>
    7bb2:	70 2d       	mov	r23, r0
    7bb4:	80 93 11 29 	sts	0x2911, r24	; 0x802911 <g_adc_io_adc4_volt_1000>
		g_adc_io_adc5_volt_1000	= l_adc_io_adc5_volt_1000;
    7bb8:	90 93 12 29 	sts	0x2912, r25	; 0x802912 <g_adc_io_adc4_volt_1000+0x1>
    7bbc:	a8 eb       	ldi	r26, 0xB8	; 184
    7bbe:	bb e0       	ldi	r27, 0x0B	; 11
    7bc0:	2d 89       	ldd	r18, Y+21	; 0x15
    7bc2:	3e 89       	ldd	r19, Y+22	; 0x16
    7bc4:	4f 89       	ldd	r20, Y+23	; 0x17
    7bc6:	58 8d       	ldd	r21, Y+24	; 0x18
    7bc8:	0e 94 99 48 	call	0x9132	; 0x9132 <__muluhisi3>
    7bcc:	dc 01       	movw	r26, r24
    7bce:	cb 01       	movw	r24, r22
    7bd0:	07 2e       	mov	r0, r23
    7bd2:	74 e1       	ldi	r23, 0x14	; 20
    7bd4:	b6 95       	lsr	r27
    7bd6:	a7 95       	ror	r26
    7bd8:	97 95       	ror	r25
    7bda:	87 95       	ror	r24
    7bdc:	7a 95       	dec	r23
    7bde:	d1 f7       	brne	.-12     	; 0x7bd4 <main+0x7bc>
    7be0:	70 2d       	mov	r23, r0
    7be2:	80 93 0f 29 	sts	0x290F, r24	; 0x80290f <g_adc_io_adc5_volt_1000>
		g_adc_silence_volt_1000	= l_adc_silence_volt_1000;
    7be6:	90 93 10 29 	sts	0x2910, r25	; 0x802910 <g_adc_io_adc5_volt_1000+0x1>
    7bea:	a8 eb       	ldi	r26, 0xB8	; 184
    7bec:	bb e0       	ldi	r27, 0x0B	; 11
    7bee:	29 8d       	ldd	r18, Y+25	; 0x19
    7bf0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7bf2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    7bf4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    7bf6:	0e 94 99 48 	call	0x9132	; 0x9132 <__muluhisi3>
    7bfa:	dc 01       	movw	r26, r24
    7bfc:	cb 01       	movw	r24, r22
    7bfe:	07 2e       	mov	r0, r23
    7c00:	74 e1       	ldi	r23, 0x14	; 20
    7c02:	b6 95       	lsr	r27
    7c04:	a7 95       	ror	r26
    7c06:	97 95       	ror	r25
    7c08:	87 95       	ror	r24
    7c0a:	7a 95       	dec	r23
    7c0c:	d1 f7       	brne	.-12     	; 0x7c02 <main+0x7ea>
    7c0e:	70 2d       	mov	r23, r0
    7c10:	80 93 0d 29 	sts	0x290D, r24	; 0x80290d <g_adc_silence_volt_1000>
		g_adc_temp_deg_100		= l_adc_temp_deg_100;
    7c14:	90 93 0e 29 	sts	0x290E, r25	; 0x80290e <g_adc_silence_volt_1000+0x1>
    7c18:	a4 e6       	ldi	r26, 0x64	; 100
    7c1a:	b0 e0       	ldi	r27, 0x00	; 0
    7c1c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7c1e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    7c20:	4f 8d       	ldd	r20, Y+31	; 0x1f
    7c22:	58 a1       	ldd	r21, Y+32	; 0x20
    7c24:	0e 94 99 48 	call	0x9132	; 0x9132 <__muluhisi3>
    7c28:	0e 94 3b 4a 	call	0x9476	; 0x9476 <__floatunsisf>
    7c2c:	2d ec       	ldi	r18, 0xCD	; 205
    7c2e:	3c e4       	ldi	r19, 0x4C	; 76
    7c30:	4d e1       	ldi	r20, 0x1D	; 29
    7c32:	54 e4       	ldi	r21, 0x44	; 68
    7c34:	0e 94 c9 4a 	call	0x9592	; 0x9592 <__mulsf3>
    7c38:	20 e0       	ldi	r18, 0x00	; 0
    7c3a:	30 e0       	ldi	r19, 0x00	; 0
    7c3c:	40 e8       	ldi	r20, 0x80	; 128
    7c3e:	55 e3       	ldi	r21, 0x35	; 53
    7c40:	0e 94 c9 4a 	call	0x9592	; 0x9592 <__mulsf3>
    7c44:	20 e0       	ldi	r18, 0x00	; 0
    7c46:	36 e6       	ldi	r19, 0x66	; 102
    7c48:	45 ed       	ldi	r20, 0xD5	; 213
    7c4a:	56 e4       	ldi	r21, 0x46	; 70
    7c4c:	0e 94 3d 49 	call	0x927a	; 0x927a <__subsf3>
    7c50:	0e 94 0a 4a 	call	0x9414	; 0x9414 <__fixsfsi>
    7c54:	60 93 0b 29 	sts	0x290B, r22	; 0x80290b <g_adc_temp_deg_100>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7c58:	70 93 0c 29 	sts	0x290C, r23	; 0x80290c <g_adc_temp_deg_100+0x1>

static void task_twi(uint32_t now)
{	/* Calculations for the presentation layer and display */

	/* TWI1 - SIM808, Hygro, Gyro, Baro devices */
	task_twi1_onboard(now);
    7c5c:	a9 a1       	ldd	r26, Y+33	; 0x21
    7c5e:	af bf       	out	0x3f, r26	; 63
    7c60:	c7 01       	movw	r24, r14

	/* TWI2 - LCD Port */
	task_twi2_lcd(now);
    7c62:	b6 01       	movw	r22, r12
    7c64:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <task_twi1_onboard>
    7c68:	c7 01       	movw	r24, r14
}

static void task_usb(uint32_t now)
{
	if (usb_cdc_transfers_autorized) {
    7c6a:	b6 01       	movw	r22, r12
    7c6c:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <task_twi2_lcd>
    7c70:	80 91 b6 29 	lds	r24, 0x29B6	; 0x8029b6 <usb_cdc_transfers_autorized>
		// stdio_usb_init();
		// stdio_usb_enable();
#endif

		/* Monitoring at the USB serial terminal */
		if (((now - usb_last) >= 512) || (now < usb_last)) {
    7c74:	88 23       	and	r24, r24
    7c76:	09 f4       	brne	.+2      	; 0x7c7a <main+0x862>
    7c78:	d0 c0       	rjmp	.+416    	; 0x7e1a <main+0xa02>
    7c7a:	80 91 7d 28 	lds	r24, 0x287D	; 0x80287d <usb_last.7522>
    7c7e:	90 91 7e 28 	lds	r25, 0x287E	; 0x80287e <usb_last.7522+0x1>
    7c82:	a0 91 7f 28 	lds	r26, 0x287F	; 0x80287f <usb_last.7522+0x2>
    7c86:	b0 91 80 28 	lds	r27, 0x2880	; 0x802880 <usb_last.7522+0x3>
    7c8a:	b7 01       	movw	r22, r14
    7c8c:	a6 01       	movw	r20, r12
    7c8e:	48 1b       	sub	r20, r24
    7c90:	59 0b       	sbc	r21, r25
    7c92:	6a 0b       	sbc	r22, r26
    7c94:	7b 0b       	sbc	r23, r27
    7c96:	41 15       	cp	r20, r1
    7c98:	52 40       	sbci	r21, 0x02	; 2
    7c9a:	61 05       	cpc	r22, r1
    7c9c:	71 05       	cpc	r23, r1
    7c9e:	30 f4       	brcc	.+12     	; 0x7cac <main+0x894>
    7ca0:	c8 16       	cp	r12, r24
    7ca2:	d9 06       	cpc	r13, r25
    7ca4:	ea 06       	cpc	r14, r26
			usb_last = now;
    7ca6:	fb 06       	cpc	r15, r27
    7ca8:	08 f0       	brcs	.+2      	; 0x7cac <main+0x894>
    7caa:	b7 c0       	rjmp	.+366    	; 0x7e1a <main+0xa02>
    7cac:	c0 92 7d 28 	sts	0x287D, r12	; 0x80287d <usb_last.7522>
    7cb0:	d0 92 7e 28 	sts	0x287E, r13	; 0x80287e <usb_last.7522+0x1>
    7cb4:	e0 92 7f 28 	sts	0x287F, r14	; 0x80287f <usb_last.7522+0x2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7cb8:	f0 92 80 28 	sts	0x2880, r15	; 0x802880 <usb_last.7522+0x3>
	cpu_irq_disable();
	return flags;
    7cbc:	8f b7       	in	r24, 0x3f	; 63

			flags = cpu_irq_save();
			int16_t l_adc_vctcxo_volt_1000	= g_adc_vctcxo_volt_1000;
    7cbe:	89 87       	std	Y+9, r24	; 0x09
    7cc0:	f8 94       	cli
    7cc2:	49 85       	ldd	r20, Y+9	; 0x09
    7cc4:	f0 91 17 29 	lds	r31, 0x2917	; 0x802917 <g_adc_vctcxo_volt_1000>
    7cc8:	fd 8b       	std	Y+21, r31	; 0x15
			int16_t l_adc_5v0_volt_1000		= g_adc_5v0_volt_1000;
    7cca:	20 91 18 29 	lds	r18, 0x2918	; 0x802918 <g_adc_vctcxo_volt_1000+0x1>
    7cce:	29 8f       	std	Y+25, r18	; 0x19
    7cd0:	80 91 15 29 	lds	r24, 0x2915	; 0x802915 <g_adc_5v0_volt_1000>
    7cd4:	8d 8f       	std	Y+29, r24	; 0x1d
			int16_t l_adc_vbat_volt_1000	= g_adc_vbat_volt_1000;
    7cd6:	90 91 16 29 	lds	r25, 0x2916	; 0x802916 <g_adc_5v0_volt_1000+0x1>
    7cda:	99 a3       	std	Y+33, r25	; 0x21
    7cdc:	a0 91 13 29 	lds	r26, 0x2913	; 0x802913 <g_adc_vbat_volt_1000>
    7ce0:	aa a3       	std	Y+34, r26	; 0x22
			int16_t l_adc_io_adc4_volt_1000	= g_adc_io_adc4_volt_1000;
    7ce2:	b0 91 14 29 	lds	r27, 0x2914	; 0x802914 <g_adc_vbat_volt_1000+0x1>
    7ce6:	bb a3       	std	Y+35, r27	; 0x23
    7ce8:	e0 91 11 29 	lds	r30, 0x2911	; 0x802911 <g_adc_io_adc4_volt_1000>
    7cec:	ec a3       	std	Y+36, r30	; 0x24
			int16_t l_adc_io_adc5_volt_1000	= g_adc_io_adc5_volt_1000;
    7cee:	f0 91 12 29 	lds	r31, 0x2912	; 0x802912 <g_adc_io_adc4_volt_1000+0x1>
    7cf2:	fd a3       	std	Y+37, r31	; 0x25
    7cf4:	20 91 0f 29 	lds	r18, 0x290F	; 0x80290f <g_adc_io_adc5_volt_1000>
    7cf8:	2e a3       	std	Y+38, r18	; 0x26
			int16_t l_adc_silence_volt_1000	= g_adc_silence_volt_1000;
    7cfa:	80 91 10 29 	lds	r24, 0x2910	; 0x802910 <g_adc_io_adc5_volt_1000+0x1>
    7cfe:	8f a3       	std	Y+39, r24	; 0x27
    7d00:	90 91 0d 29 	lds	r25, 0x290D	; 0x80290d <g_adc_silence_volt_1000>
    7d04:	98 a7       	std	Y+40, r25	; 0x28
			int16_t l_adc_temp_deg_100		= g_adc_temp_deg_100;
    7d06:	a0 91 0e 29 	lds	r26, 0x290E	; 0x80290e <g_adc_silence_volt_1000+0x1>
    7d0a:	a9 a7       	std	Y+41, r26	; 0x29
    7d0c:	e0 91 0b 29 	lds	r30, 0x290B	; 0x80290b <g_adc_temp_deg_100>
    7d10:	f0 91 0c 29 	lds	r31, 0x290C	; 0x80290c <g_adc_temp_deg_100+0x1>
			int32_t l_twi1_baro_temp_100	= g_twi1_baro_temp_100;
    7d14:	e9 8b       	std	Y+17, r30	; 0x11
    7d16:	fa 8b       	std	Y+18, r31	; 0x12
    7d18:	80 90 90 29 	lds	r8, 0x2990	; 0x802990 <g_twi1_baro_temp_100>
    7d1c:	90 90 91 29 	lds	r9, 0x2991	; 0x802991 <g_twi1_baro_temp_100+0x1>
    7d20:	a0 90 92 29 	lds	r10, 0x2992	; 0x802992 <g_twi1_baro_temp_100+0x2>
			int32_t l_twi1_baro_p_100		= g_twi1_baro_p_100;
    7d24:	b0 90 93 29 	lds	r11, 0x2993	; 0x802993 <g_twi1_baro_temp_100+0x3>
    7d28:	40 90 8c 29 	lds	r4, 0x298C	; 0x80298c <g_twi1_baro_p_100>
    7d2c:	50 90 8d 29 	lds	r5, 0x298D	; 0x80298d <g_twi1_baro_p_100+0x1>
    7d30:	60 90 8e 29 	lds	r6, 0x298E	; 0x80298e <g_twi1_baro_p_100+0x2>
			int16_t l_twi1_hygro_T_100		= g_twi1_hygro_T_100;
    7d34:	70 90 8f 29 	lds	r7, 0x298F	; 0x80298f <g_twi1_baro_p_100+0x3>
    7d38:	20 91 84 29 	lds	r18, 0x2984	; 0x802984 <g_twi1_hygro_T_100>
			int16_t l_twi1_hygro_RH_100		= g_twi1_hygro_RH_100;
    7d3c:	30 91 85 29 	lds	r19, 0x2985	; 0x802985 <g_twi1_hygro_T_100+0x1>
    7d40:	80 91 82 29 	lds	r24, 0x2982	; 0x802982 <g_twi1_hygro_RH_100>
			cpu_irq_restore(flags);

			printf("Time = %5ld: U_vctcxo=%4d mV, U_5v0=%4d mV, U_vbat=%4d mV, U_io_adc4=%4d mV, U_io_adc5=%4d mV, U_silence=%4d mV, mP_Temp=%02d.%02dC,\tBaro_Temp=%02ld.%02ld C, Baro_P=%4ld.%02ld hPa,\tHygro_Temp=%02d.%02d C, Hygro_RelH=%02d.%02d %%\r\n",
    7d44:	90 91 83 29 	lds	r25, 0x2983	; 0x802983 <g_twi1_hygro_RH_100+0x1>
    7d48:	4f bf       	out	0x3f, r20	; 63
    7d4a:	64 e6       	ldi	r22, 0x64	; 100
    7d4c:	70 e0       	ldi	r23, 0x00	; 0
    7d4e:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>
    7d52:	9f 93       	push	r25
    7d54:	8f 93       	push	r24
    7d56:	7f 93       	push	r23
    7d58:	6f 93       	push	r22
    7d5a:	c9 01       	movw	r24, r18
    7d5c:	64 e6       	ldi	r22, 0x64	; 100
    7d5e:	70 e0       	ldi	r23, 0x00	; 0
    7d60:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>
    7d64:	9f 93       	push	r25
    7d66:	8f 93       	push	r24
    7d68:	7f 93       	push	r23
    7d6a:	6f 93       	push	r22
    7d6c:	c3 01       	movw	r24, r6
    7d6e:	b2 01       	movw	r22, r4
    7d70:	24 e6       	ldi	r18, 0x64	; 100
    7d72:	30 e0       	ldi	r19, 0x00	; 0
    7d74:	40 e0       	ldi	r20, 0x00	; 0
    7d76:	50 e0       	ldi	r21, 0x00	; 0
    7d78:	0e 94 66 48 	call	0x90cc	; 0x90cc <__divmodsi4>
    7d7c:	9f 93       	push	r25
    7d7e:	8f 93       	push	r24
    7d80:	7f 93       	push	r23
    7d82:	6f 93       	push	r22
    7d84:	5f 93       	push	r21
    7d86:	4f 93       	push	r20
    7d88:	3f 93       	push	r19
    7d8a:	2f 93       	push	r18
    7d8c:	c5 01       	movw	r24, r10
    7d8e:	b4 01       	movw	r22, r8
    7d90:	24 e6       	ldi	r18, 0x64	; 100
    7d92:	30 e0       	ldi	r19, 0x00	; 0
    7d94:	40 e0       	ldi	r20, 0x00	; 0
    7d96:	50 e0       	ldi	r21, 0x00	; 0
    7d98:	0e 94 66 48 	call	0x90cc	; 0x90cc <__divmodsi4>
    7d9c:	9f 93       	push	r25
    7d9e:	8f 93       	push	r24
    7da0:	7f 93       	push	r23
    7da2:	6f 93       	push	r22
    7da4:	5f 93       	push	r21
    7da6:	4f 93       	push	r20
    7da8:	3f 93       	push	r19
    7daa:	2f 93       	push	r18
    7dac:	89 89       	ldd	r24, Y+17	; 0x11
    7dae:	9a 89       	ldd	r25, Y+18	; 0x12
    7db0:	64 e6       	ldi	r22, 0x64	; 100
    7db2:	70 e0       	ldi	r23, 0x00	; 0
    7db4:	0e 94 31 48 	call	0x9062	; 0x9062 <__divmodhi4>
    7db8:	9f 93       	push	r25
    7dba:	8f 93       	push	r24
    7dbc:	7f 93       	push	r23
    7dbe:	6f 93       	push	r22
    7dc0:	f9 a5       	ldd	r31, Y+41	; 0x29
    7dc2:	ff 93       	push	r31
    7dc4:	28 a5       	ldd	r18, Y+40	; 0x28
    7dc6:	2f 93       	push	r18
    7dc8:	8f a1       	ldd	r24, Y+39	; 0x27
    7dca:	8f 93       	push	r24
    7dcc:	9e a1       	ldd	r25, Y+38	; 0x26
    7dce:	9f 93       	push	r25
    7dd0:	ad a1       	ldd	r26, Y+37	; 0x25
    7dd2:	af 93       	push	r26
    7dd4:	bc a1       	ldd	r27, Y+36	; 0x24
    7dd6:	bf 93       	push	r27
    7dd8:	eb a1       	ldd	r30, Y+35	; 0x23
    7dda:	ef 93       	push	r30
    7ddc:	fa a1       	ldd	r31, Y+34	; 0x22
    7dde:	ff 93       	push	r31
    7de0:	29 a1       	ldd	r18, Y+33	; 0x21
    7de2:	2f 93       	push	r18
    7de4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7de6:	8f 93       	push	r24
    7de8:	99 8d       	ldd	r25, Y+25	; 0x19
    7dea:	9f 93       	push	r25
    7dec:	ad 89       	ldd	r26, Y+21	; 0x15
    7dee:	af 93       	push	r26
    7df0:	0b 2e       	mov	r0, r27
    7df2:	ba e0       	ldi	r27, 0x0A	; 10
    7df4:	f6 94       	lsr	r15
    7df6:	e7 94       	ror	r14
    7df8:	d7 94       	ror	r13
    7dfa:	c7 94       	ror	r12
    7dfc:	ba 95       	dec	r27
    7dfe:	d1 f7       	brne	.-12     	; 0x7df4 <main+0x9dc>
    7e00:	b0 2d       	mov	r27, r0
    7e02:	ff 92       	push	r15
    7e04:	ef 92       	push	r14
    7e06:	df 92       	push	r13
    7e08:	cf 92       	push	r12
    7e0a:	e3 e0       	ldi	r30, 0x03	; 3
    7e0c:	f6 e2       	ldi	r31, 0x26	; 38
    7e0e:	ff 93       	push	r31
    7e10:	ef 93       	push	r30
    7e12:	0e 94 7f 4b 	call	0x96fe	; 0x96fe <printf>
    7e16:	cd bf       	out	0x3d, r28	; 61
    7e18:	de bf       	out	0x3e, r29	; 62
    7e1a:	f8 94       	cli
    7e1c:	d8 01       	movw	r26, r16
    7e1e:	8c 91       	ld	r24, X
    7e20:	81 11       	cpse	r24, r1
    7e22:	09 c0       	rjmp	.+18     	; 0x7e36 <main+0xa1e>
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    7e24:	a0 e1       	ldi	r26, 0x10	; 16

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    7e26:	bb e2       	ldi	r27, 0x2B	; 43
    7e28:	e0 e0       	ldi	r30, 0x00	; 0
    7e2a:	ef 5f       	subi	r30, 0xFF	; 255
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    7e2c:	8d 91       	ld	r24, X+
    7e2e:	88 23       	and	r24, r24
		cpu_irq_enable();
    7e30:	e1 f3       	breq	.-8      	; 0x7e2a <main+0xa12>
    7e32:	e1 11       	cpse	r30, r1
    7e34:	02 c0       	rjmp	.+4      	; 0x7e3a <main+0xa22>
    7e36:	78 94       	sei

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    7e38:	12 c0       	rjmp	.+36     	; 0x7e5e <main+0xa46>
    7e3a:	d1 01       	movw	r26, r2
    7e3c:	8c 91       	ld	r24, X
    7e3e:	f0 e0       	ldi	r31, 0x00	; 0
    7e40:	ee 5c       	subi	r30, 0xCE	; 206
    7e42:	ff 4d       	sbci	r31, 0xDF	; 223
    7e44:	81 7f       	andi	r24, 0xF1	; 241
	sleep_enable();
    7e46:	90 81       	ld	r25, Z
    7e48:	89 2b       	or	r24, r25
    7e4a:	8c 93       	st	X, r24

	cpu_irq_enable();
    7e4c:	8c 91       	ld	r24, X
	sleep_enter();
    7e4e:	81 60       	ori	r24, 0x01	; 1

	sleep_disable();
    7e50:	8c 93       	st	X, r24
    7e52:	78 94       	sei
    7e54:	88 95       	sleep
    7e56:	f1 01       	movw	r30, r2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7e58:	80 81       	ld	r24, Z
    7e5a:	8e 7f       	andi	r24, 0xFE	; 254
	cpu_irq_disable();
    7e5c:	80 83       	st	Z, r24
	return flags;
    7e5e:	8f b7       	in	r24, 0x3f	; 63
    while (l_workmode) {
		task();
		sleepmgr_enter_sleep();

		flags = cpu_irq_save();
		l_workmode = g_workmode;
    7e60:	8f 87       	std	Y+15, r24	; 0x0f
    7e62:	f8 94       	cli
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7e64:	9f 85       	ldd	r25, Y+15	; 0x0f
	/* The application code */
	irqflags_t flags = cpu_irq_save();
	WORKMODE_ENUM_t l_workmode = g_workmode = WORKMODE_RUN;
	cpu_irq_restore(flags);

    while (l_workmode) {
    7e66:	80 91 b7 29 	lds	r24, 0x29B7	; 0x8029b7 <g_workmode>
		flags = cpu_irq_save();
		l_workmode = g_workmode;
		cpu_irq_restore(flags);
    }

	cpu_irq_disable();
    7e6a:	9f bf       	out	0x3f, r25	; 63
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    7e6c:	81 11       	cpse	r24, r1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    7e6e:	be cd       	rjmp	.-1156   	; 0x79ec <main+0x5d4>
    7e70:	f8 94       	cli
    7e72:	f8 94       	cli
    7e74:	80 91 0f 2b 	lds	r24, 0x2B0F	; 0x802b0f <sleepmgr_locks>
    7e78:	81 11       	cpse	r24, r1
    7e7a:	09 c0       	rjmp	.+18     	; 0x7e8e <main+0xa76>
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    7e7c:	a0 e1       	ldi	r26, 0x10	; 16

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    7e7e:	bb e2       	ldi	r27, 0x2B	; 43
    7e80:	e0 e0       	ldi	r30, 0x00	; 0
    7e82:	ef 5f       	subi	r30, 0xFF	; 255
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    7e84:	8d 91       	ld	r24, X+
    7e86:	88 23       	and	r24, r24
		cpu_irq_enable();
    7e88:	e1 f3       	breq	.-8      	; 0x7e82 <main+0xa6a>
    7e8a:	e1 11       	cpse	r30, r1
    7e8c:	02 c0       	rjmp	.+4      	; 0x7e92 <main+0xa7a>
    7e8e:	78 94       	sei
    7e90:	13 c0       	rjmp	.+38     	; 0x7eb8 <main+0xaa0>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    7e92:	a8 e4       	ldi	r26, 0x48	; 72
    7e94:	b0 e0       	ldi	r27, 0x00	; 0
    7e96:	8c 91       	ld	r24, X
    7e98:	f0 e0       	ldi	r31, 0x00	; 0
    7e9a:	ee 5c       	subi	r30, 0xCE	; 206
    7e9c:	ff 4d       	sbci	r31, 0xDF	; 223
    7e9e:	98 2f       	mov	r25, r24
    7ea0:	91 7f       	andi	r25, 0xF1	; 241
	sleep_enable();
    7ea2:	80 81       	ld	r24, Z
    7ea4:	89 2b       	or	r24, r25
    7ea6:	8c 93       	st	X, r24

	cpu_irq_enable();
    7ea8:	8c 91       	ld	r24, X
	sleep_enter();
    7eaa:	81 60       	ori	r24, 0x01	; 1

	sleep_disable();
    7eac:	8c 93       	st	X, r24
    7eae:	78 94       	sei
    7eb0:	88 95       	sleep
	sleepmgr_enter_sleep();

	return retcode;
}
    7eb2:	8c 91       	ld	r24, X
    7eb4:	8e 7f       	andi	r24, 0xFE	; 254
    7eb6:	8c 93       	st	X, r24
    7eb8:	80 e0       	ldi	r24, 0x00	; 0
    7eba:	90 e0       	ldi	r25, 0x00	; 0
    7ebc:	a9 96       	adiw	r28, 0x29	; 41
    7ebe:	cd bf       	out	0x3d, r28	; 61
    7ec0:	de bf       	out	0x3e, r29	; 62
    7ec2:	df 91       	pop	r29
    7ec4:	cf 91       	pop	r28
    7ec6:	1f 91       	pop	r17
    7ec8:	0f 91       	pop	r16
    7eca:	ff 90       	pop	r15
    7ecc:	ef 90       	pop	r14
    7ece:	df 90       	pop	r13
    7ed0:	cf 90       	pop	r12
    7ed2:	bf 90       	pop	r11
    7ed4:	af 90       	pop	r10
    7ed6:	9f 90       	pop	r9
    7ed8:	8f 90       	pop	r8
    7eda:	7f 90       	pop	r7
    7edc:	6f 90       	pop	r6
    7ede:	5f 90       	pop	r5
    7ee0:	4f 90       	pop	r4
    7ee2:	3f 90       	pop	r3
    7ee4:	2f 90       	pop	r2
    7ee6:	08 95       	ret

00007ee8 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    7ee8:	cf 93       	push	r28
    7eea:	df 93       	push	r29
    7eec:	cd b7       	in	r28, 0x3d	; 61
    7eee:	de b7       	in	r29, 0x3e	; 62
    7ef0:	28 97       	sbiw	r28, 0x08	; 8
    7ef2:	cd bf       	out	0x3d, r28	; 61
    7ef4:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    7ef6:	8f ef       	ldi	r24, 0xFF	; 255
    7ef8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    7efc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    7f00:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    7f04:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    7f08:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    7f0c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    7f10:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    7f14:	61 e0       	ldi	r22, 0x01	; 1
    7f16:	81 e4       	ldi	r24, 0x41	; 65
    7f18:	90 e0       	ldi	r25, 0x00	; 0
    7f1a:	0e 94 08 48 	call	0x9010	; 0x9010 <ccp_write_io>
    7f1e:	6c e1       	ldi	r22, 0x1C	; 28
    7f20:	70 e0       	ldi	r23, 0x00	; 0
    7f22:	82 e0       	ldi	r24, 0x02	; 2
    7f24:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    7f28:	8a 83       	std	Y+2, r24	; 0x02
    7f2a:	6d e1       	ldi	r22, 0x1D	; 29
    7f2c:	70 e0       	ldi	r23, 0x00	; 0
    7f2e:	82 e0       	ldi	r24, 0x02	; 2
    7f30:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    7f34:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    7f36:	89 81       	ldd	r24, Y+1	; 0x01
    7f38:	9a 81       	ldd	r25, Y+2	; 0x02
    7f3a:	01 96       	adiw	r24, 0x01	; 1
    7f3c:	21 f4       	brne	.+8      	; 0x7f46 <sysclk_init+0x5e>
		cal = 0x2340;
    7f3e:	80 e4       	ldi	r24, 0x40	; 64
    7f40:	93 e2       	ldi	r25, 0x23	; 35
    7f42:	89 83       	std	Y+1, r24	; 0x01
    7f44:	9a 83       	std	Y+2, r25	; 0x02
    7f46:	89 81       	ldd	r24, Y+1	; 0x01
    7f48:	9a 81       	ldd	r25, Y+2	; 0x02
    7f4a:	8b 83       	std	Y+3, r24	; 0x03
    7f4c:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    7f4e:	e0 e6       	ldi	r30, 0x60	; 96
    7f50:	f0 e0       	ldi	r31, 0x00	; 0
    7f52:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    7f54:	8c 81       	ldd	r24, Y+4	; 0x04
    7f56:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    7f58:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    7f5c:	84 fd       	sbrc	r24, 4
    7f5e:	21 c0       	rjmp	.+66     	; 0x7fa2 <sysclk_init+0xba>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    7f60:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    7f64:	83 fd       	sbrc	r24, 3
    7f66:	0e c0       	rjmp	.+28     	; 0x7f84 <sysclk_init+0x9c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    7f68:	e0 e5       	ldi	r30, 0x50	; 80
    7f6a:	f0 e0       	ldi	r31, 0x00	; 0
    7f6c:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7f6e:	8f b7       	in	r24, 0x3f	; 63
    7f70:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    7f72:	f8 94       	cli
	return flags;
    7f74:	9d 81       	ldd	r25, Y+5	; 0x05
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    7f76:	80 81       	ld	r24, Z
    7f78:	88 60       	ori	r24, 0x08	; 8
    7f7a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7f7c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    7f7e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    7f80:	83 ff       	sbrs	r24, 3
    7f82:	fd cf       	rjmp	.-6      	; 0x7f7e <sysclk_init+0x96>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7f84:	8f b7       	in	r24, 0x3f	; 63
    7f86:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    7f88:	f8 94       	cli
	return flags;
    7f8a:	9e 81       	ldd	r25, Y+6	; 0x06
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    7f8c:	e0 e5       	ldi	r30, 0x50	; 80
    7f8e:	f0 e0       	ldi	r31, 0x00	; 0
    7f90:	83 ec       	ldi	r24, 0xC3	; 195
    7f92:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    7f94:	80 81       	ld	r24, Z
    7f96:	80 61       	ori	r24, 0x10	; 16
    7f98:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7f9a:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    7f9c:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    7f9e:	84 ff       	sbrs	r24, 4
    7fa0:	fd cf       	rjmp	.-6      	; 0x7f9c <sysclk_init+0xb4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    7fa2:	64 e0       	ldi	r22, 0x04	; 4
    7fa4:	80 e4       	ldi	r24, 0x40	; 64
    7fa6:	90 e0       	ldi	r25, 0x00	; 0
    7fa8:	0e 94 08 48 	call	0x9010	; 0x9010 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7fac:	8f b7       	in	r24, 0x3f	; 63
    7fae:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    7fb0:	f8 94       	cli
	return flags;
    7fb2:	98 85       	ldd	r25, Y+8	; 0x08
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    7fb4:	e0 e5       	ldi	r30, 0x50	; 80
    7fb6:	f0 e0       	ldi	r31, 0x00	; 0
    7fb8:	80 81       	ld	r24, Z
    7fba:	8e 7f       	andi	r24, 0xFE	; 254
    7fbc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7fbe:	9f bf       	out	0x3f, r25	; 63

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    7fc0:	12 82       	std	Z+2, r1	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7fc2:	8f b7       	in	r24, 0x3f	; 63
    7fc4:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    7fc6:	f8 94       	cli
	return flags;
    7fc8:	9f 81       	ldd	r25, Y+7	; 0x07
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    7fca:	80 81       	ld	r24, Z
    7fcc:	88 60       	ori	r24, 0x08	; 8
    7fce:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    7fd0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    7fd2:	81 81       	ldd	r24, Z+1	; 0x01
    7fd4:	83 ff       	sbrs	r24, 3
    7fd6:	fd cf       	rjmp	.-6      	; 0x7fd2 <sysclk_init+0xea>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    7fd8:	8b e0       	ldi	r24, 0x0B	; 11
    7fda:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    7fde:	28 96       	adiw	r28, 0x08	; 8
    7fe0:	cd bf       	out	0x3d, r28	; 61
    7fe2:	de bf       	out	0x3e, r29	; 62
    7fe4:	df 91       	pop	r29
    7fe6:	cf 91       	pop	r28
    7fe8:	08 95       	ret

00007fea <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    7fea:	cf 93       	push	r28
    7fec:	df 93       	push	r29
    7fee:	1f 92       	push	r1
    7ff0:	cd b7       	in	r28, 0x3d	; 61
    7ff2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    7ff4:	9f b7       	in	r25, 0x3f	; 63
    7ff6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    7ff8:	f8 94       	cli
	return flags;
    7ffa:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    7ffc:	e8 2f       	mov	r30, r24
    7ffe:	f0 e0       	ldi	r31, 0x00	; 0
    8000:	e0 59       	subi	r30, 0x90	; 144
    8002:	ff 4f       	sbci	r31, 0xFF	; 255
    8004:	60 95       	com	r22
    8006:	80 81       	ld	r24, Z
    8008:	68 23       	and	r22, r24
    800a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    800c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    800e:	0f 90       	pop	r0
    8010:	df 91       	pop	r29
    8012:	cf 91       	pop	r28
    8014:	08 95       	ret

00008016 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    8016:	cf 93       	push	r28
    8018:	df 93       	push	r29
    801a:	1f 92       	push	r1
    801c:	cd b7       	in	r28, 0x3d	; 61
    801e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8020:	9f b7       	in	r25, 0x3f	; 63
    8022:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    8024:	f8 94       	cli
	return flags;
    8026:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    8028:	e8 2f       	mov	r30, r24
    802a:	f0 e0       	ldi	r31, 0x00	; 0
    802c:	e0 59       	subi	r30, 0x90	; 144
    802e:	ff 4f       	sbci	r31, 0xFF	; 255
    8030:	80 81       	ld	r24, Z
    8032:	68 2b       	or	r22, r24
    8034:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8036:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    8038:	0f 90       	pop	r0
    803a:	df 91       	pop	r29
    803c:	cf 91       	pop	r28
    803e:	08 95       	ret

00008040 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    8040:	cf 93       	push	r28
    8042:	df 93       	push	r29
    8044:	1f 92       	push	r1
    8046:	1f 92       	push	r1
    8048:	cd b7       	in	r28, 0x3d	; 61
    804a:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    804c:	86 30       	cpi	r24, 0x06	; 6
    804e:	11 f0       	breq	.+4      	; 0x8054 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    8050:	60 e0       	ldi	r22, 0x00	; 0
    8052:	01 c0       	rjmp	.+2      	; 0x8056 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    8054:	68 e1       	ldi	r22, 0x18	; 24
    8056:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    805a:	81 fd       	sbrc	r24, 1
    805c:	2a c0       	rjmp	.+84     	; 0x80b2 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    805e:	8f b7       	in	r24, 0x3f	; 63
    8060:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    8062:	f8 94       	cli
	return flags;
    8064:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    8066:	e0 e5       	ldi	r30, 0x50	; 80
    8068:	f0 e0       	ldi	r31, 0x00	; 0
    806a:	80 81       	ld	r24, Z
    806c:	82 60       	ori	r24, 0x02	; 2
    806e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    8070:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    8072:	81 81       	ldd	r24, Z+1	; 0x01
    8074:	81 ff       	sbrs	r24, 1
    8076:	fd cf       	rjmp	.-6      	; 0x8072 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    8078:	8f b7       	in	r24, 0x3f	; 63
    807a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    807c:	f8 94       	cli
	return flags;
    807e:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    8080:	a0 e5       	ldi	r26, 0x50	; 80
    8082:	b0 e0       	ldi	r27, 0x00	; 0
    8084:	16 96       	adiw	r26, 0x06	; 6
    8086:	8c 91       	ld	r24, X
    8088:	16 97       	sbiw	r26, 0x06	; 6
    808a:	89 7f       	andi	r24, 0xF9	; 249
    808c:	16 96       	adiw	r26, 0x06	; 6
    808e:	8c 93       	st	X, r24
    8090:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    8092:	e0 e6       	ldi	r30, 0x60	; 96
    8094:	f0 e0       	ldi	r31, 0x00	; 0
    8096:	80 e8       	ldi	r24, 0x80	; 128
    8098:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    809a:	8b eb       	ldi	r24, 0xBB	; 187
    809c:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    809e:	16 96       	adiw	r26, 0x06	; 6
    80a0:	8c 91       	ld	r24, X
    80a2:	16 97       	sbiw	r26, 0x06	; 6
    80a4:	84 60       	ori	r24, 0x04	; 4
    80a6:	16 96       	adiw	r26, 0x06	; 6
    80a8:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    80aa:	80 81       	ld	r24, Z
    80ac:	81 60       	ori	r24, 0x01	; 1
    80ae:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    80b0:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    80b2:	63 60       	ori	r22, 0x03	; 3
    80b4:	84 e4       	ldi	r24, 0x44	; 68
    80b6:	90 e0       	ldi	r25, 0x00	; 0
    80b8:	ab d7       	rcall	.+3926   	; 0x9010 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    80ba:	60 e4       	ldi	r22, 0x40	; 64
    80bc:	80 e0       	ldi	r24, 0x00	; 0
    80be:	95 df       	rcall	.-214    	; 0x7fea <sysclk_enable_module>
}
    80c0:	0f 90       	pop	r0
    80c2:	0f 90       	pop	r0
    80c4:	df 91       	pop	r29
    80c6:	cf 91       	pop	r28
    80c8:	08 95       	ret

000080ca <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
    80ca:	80 91 ce 2a 	lds	r24, 0x2ACE	; 0x802ace <udi_cdc_nb_comm_enabled>
    80ce:	81 50       	subi	r24, 0x01	; 1
    80d0:	80 93 ce 2a 	sts	0x2ACE, r24	; 0x802ace <udi_cdc_nb_comm_enabled>
    80d4:	08 95       	ret

000080d6 <udi_cdc_data_setup>:
    80d6:	80 e0       	ldi	r24, 0x00	; 0
    80d8:	08 95       	ret

000080da <udi_cdc_getsetting>:
    80da:	80 e0       	ldi	r24, 0x00	; 0
    80dc:	08 95       	ret

000080de <udi_cdc_line_coding_received>:
    80de:	6c ed       	ldi	r22, 0xDC	; 220
    80e0:	7a e2       	ldi	r23, 0x2A	; 42
    80e2:	80 e0       	ldi	r24, 0x00	; 0
    80e4:	94 c9       	rjmp	.-3288   	; 0x740e <usb_callback_config>
    80e6:	08 95       	ret

000080e8 <udi_cdc_comm_enable>:
    80e8:	10 92 ce 2a 	sts	0x2ACE, r1	; 0x802ace <udi_cdc_nb_comm_enabled>
    80ec:	10 92 da 2a 	sts	0x2ADA, r1	; 0x802ada <udi_cdc_state>
    80f0:	10 92 db 2a 	sts	0x2ADB, r1	; 0x802adb <udi_cdc_state+0x1>
    80f4:	e0 ed       	ldi	r30, 0xD0	; 208
    80f6:	fa e2       	ldi	r31, 0x2A	; 42
    80f8:	81 ea       	ldi	r24, 0xA1	; 161
    80fa:	80 83       	st	Z, r24
    80fc:	80 e2       	ldi	r24, 0x20	; 32
    80fe:	81 83       	std	Z+1, r24	; 0x01
    8100:	12 82       	std	Z+2, r1	; 0x02
    8102:	13 82       	std	Z+3, r1	; 0x03
    8104:	14 82       	std	Z+4, r1	; 0x04
    8106:	15 82       	std	Z+5, r1	; 0x05
    8108:	82 e0       	ldi	r24, 0x02	; 2
    810a:	90 e0       	ldi	r25, 0x00	; 0
    810c:	86 83       	std	Z+6, r24	; 0x06
    810e:	97 83       	std	Z+7, r25	; 0x07
    8110:	10 86       	std	Z+8, r1	; 0x08
    8112:	11 86       	std	Z+9, r1	; 0x09
    8114:	ec ed       	ldi	r30, 0xDC	; 220
    8116:	fa e2       	ldi	r31, 0x2A	; 42
    8118:	80 e0       	ldi	r24, 0x00	; 0
    811a:	92 ec       	ldi	r25, 0xC2	; 194
    811c:	a1 e0       	ldi	r26, 0x01	; 1
    811e:	b0 e0       	ldi	r27, 0x00	; 0
    8120:	80 83       	st	Z, r24
    8122:	91 83       	std	Z+1, r25	; 0x01
    8124:	a2 83       	std	Z+2, r26	; 0x02
    8126:	b3 83       	std	Z+3, r27	; 0x03
    8128:	14 82       	std	Z+4, r1	; 0x04
    812a:	15 82       	std	Z+5, r1	; 0x05
    812c:	88 e0       	ldi	r24, 0x08	; 8
    812e:	86 83       	std	Z+6, r24	; 0x06
    8130:	bf 01       	movw	r22, r30
    8132:	80 e0       	ldi	r24, 0x00	; 0
    8134:	6c d9       	rcall	.-3368   	; 0x740e <usb_callback_config>
    8136:	64 d9       	rcall	.-3384   	; 0x7400 <usb_callback_cdc_enable>
    8138:	88 23       	and	r24, r24
    813a:	29 f0       	breq	.+10     	; 0x8146 <udi_cdc_comm_enable+0x5e>
    813c:	90 91 ce 2a 	lds	r25, 0x2ACE	; 0x802ace <udi_cdc_nb_comm_enabled>
    8140:	9f 5f       	subi	r25, 0xFF	; 255
    8142:	90 93 ce 2a 	sts	0x2ACE, r25	; 0x802ace <udi_cdc_nb_comm_enabled>
    8146:	08 95       	ret

00008148 <udi_cdc_tx_send>:
    8148:	ff 92       	push	r15
    814a:	0f 93       	push	r16
    814c:	1f 93       	push	r17
    814e:	cf 93       	push	r28
    8150:	df 93       	push	r29
    8152:	1f 92       	push	r1
    8154:	cd b7       	in	r28, 0x3d	; 61
    8156:	de b7       	in	r29, 0x3e	; 62
    8158:	80 91 bb 29 	lds	r24, 0x29BB	; 0x8029bb <udi_cdc_tx_trans_ongoing>
    815c:	81 11       	cpse	r24, r1
    815e:	9f c0       	rjmp	.+318    	; 0x829e <udi_cdc_tx_send+0x156>
    8160:	0e 94 58 31 	call	0x62b0	; 0x62b0 <udd_is_high_speed>
    8164:	88 23       	and	r24, r24
    8166:	51 f0       	breq	.+20     	; 0x817c <udi_cdc_tx_send+0x34>
    8168:	00 91 bc 29 	lds	r16, 0x29BC	; 0x8029bc <udi_cdc_tx_sof_num>
    816c:	10 91 bd 29 	lds	r17, 0x29BD	; 0x8029bd <udi_cdc_tx_sof_num+0x1>
    8170:	0e 94 65 31 	call	0x62ca	; 0x62ca <udd_get_micro_frame_number>
    8174:	08 17       	cp	r16, r24
    8176:	19 07       	cpc	r17, r25
    8178:	59 f4       	brne	.+22     	; 0x8190 <udi_cdc_tx_send+0x48>
    817a:	91 c0       	rjmp	.+290    	; 0x829e <udi_cdc_tx_send+0x156>
    817c:	00 91 bc 29 	lds	r16, 0x29BC	; 0x8029bc <udi_cdc_tx_sof_num>
    8180:	10 91 bd 29 	lds	r17, 0x29BD	; 0x8029bd <udi_cdc_tx_sof_num+0x1>
    8184:	0e 94 60 31 	call	0x62c0	; 0x62c0 <udd_get_frame_number>
    8188:	08 17       	cp	r16, r24
    818a:	19 07       	cpc	r17, r25
    818c:	09 f4       	brne	.+2      	; 0x8190 <udi_cdc_tx_send+0x48>
    818e:	87 c0       	rjmp	.+270    	; 0x829e <udi_cdc_tx_send+0x156>
    8190:	8f b7       	in	r24, 0x3f	; 63
    8192:	89 83       	std	Y+1, r24	; 0x01
    8194:	f8 94       	cli
    8196:	19 81       	ldd	r17, Y+1	; 0x01
    8198:	00 91 be 29 	lds	r16, 0x29BE	; 0x8029be <udi_cdc_tx_buf_sel>
    819c:	e0 2f       	mov	r30, r16
    819e:	f0 e0       	ldi	r31, 0x00	; 0
    81a0:	ee 0f       	add	r30, r30
    81a2:	ff 1f       	adc	r31, r31
    81a4:	e1 54       	subi	r30, 0x41	; 65
    81a6:	f6 4d       	sbci	r31, 0xD6	; 214
    81a8:	80 81       	ld	r24, Z
    81aa:	91 81       	ldd	r25, Z+1	; 0x01
    81ac:	89 2b       	or	r24, r25
    81ae:	09 f5       	brne	.+66     	; 0x81f2 <udi_cdc_tx_send+0xaa>
    81b0:	80 91 b8 29 	lds	r24, 0x29B8	; 0x8029b8 <sof_zlp_counter.5059>
    81b4:	90 91 b9 29 	lds	r25, 0x29B9	; 0x8029b9 <sof_zlp_counter.5059+0x1>
    81b8:	01 96       	adiw	r24, 0x01	; 1
    81ba:	80 93 b8 29 	sts	0x29B8, r24	; 0x8029b8 <sof_zlp_counter.5059>
    81be:	90 93 b9 29 	sts	0x29B9, r25	; 0x8029b9 <sof_zlp_counter.5059+0x1>
    81c2:	0e 94 58 31 	call	0x62b0	; 0x62b0 <udd_is_high_speed>
    81c6:	81 11       	cpse	r24, r1
    81c8:	07 c0       	rjmp	.+14     	; 0x81d8 <udi_cdc_tx_send+0x90>
    81ca:	80 91 b8 29 	lds	r24, 0x29B8	; 0x8029b8 <sof_zlp_counter.5059>
    81ce:	90 91 b9 29 	lds	r25, 0x29B9	; 0x8029b9 <sof_zlp_counter.5059+0x1>
    81d2:	84 36       	cpi	r24, 0x64	; 100
    81d4:	91 05       	cpc	r25, r1
    81d6:	58 f0       	brcs	.+22     	; 0x81ee <udi_cdc_tx_send+0xa6>
    81d8:	0e 94 58 31 	call	0x62b0	; 0x62b0 <udd_is_high_speed>
    81dc:	88 23       	and	r24, r24
    81de:	49 f0       	breq	.+18     	; 0x81f2 <udi_cdc_tx_send+0xaa>
    81e0:	80 91 b8 29 	lds	r24, 0x29B8	; 0x8029b8 <sof_zlp_counter.5059>
    81e4:	90 91 b9 29 	lds	r25, 0x29B9	; 0x8029b9 <sof_zlp_counter.5059+0x1>
    81e8:	80 32       	cpi	r24, 0x20	; 32
    81ea:	93 40       	sbci	r25, 0x03	; 3
    81ec:	10 f4       	brcc	.+4      	; 0x81f2 <udi_cdc_tx_send+0xaa>
    81ee:	1f bf       	out	0x3f, r17	; 63
    81f0:	56 c0       	rjmp	.+172    	; 0x829e <udi_cdc_tx_send+0x156>
    81f2:	10 92 b8 29 	sts	0x29B8, r1	; 0x8029b8 <sof_zlp_counter.5059>
    81f6:	10 92 b9 29 	sts	0x29B9, r1	; 0x8029b9 <sof_zlp_counter.5059+0x1>
    81fa:	80 91 ba 29 	lds	r24, 0x29BA	; 0x8029ba <udi_cdc_tx_both_buf_to_send>
    81fe:	81 11       	cpse	r24, r1
    8200:	06 c0       	rjmp	.+12     	; 0x820e <udi_cdc_tx_send+0xc6>
    8202:	81 e0       	ldi	r24, 0x01	; 1
    8204:	01 11       	cpse	r16, r1
    8206:	80 e0       	ldi	r24, 0x00	; 0
    8208:	80 93 be 29 	sts	0x29BE, r24	; 0x8029be <udi_cdc_tx_buf_sel>
    820c:	04 c0       	rjmp	.+8      	; 0x8216 <udi_cdc_tx_send+0xce>
    820e:	81 e0       	ldi	r24, 0x01	; 1
    8210:	01 11       	cpse	r16, r1
    8212:	80 e0       	ldi	r24, 0x00	; 0
    8214:	08 2f       	mov	r16, r24
    8216:	81 e0       	ldi	r24, 0x01	; 1
    8218:	80 93 bb 29 	sts	0x29BB, r24	; 0x8029bb <udi_cdc_tx_trans_ongoing>
    821c:	1f bf       	out	0x3f, r17	; 63
    821e:	10 e0       	ldi	r17, 0x00	; 0
    8220:	f8 01       	movw	r30, r16
    8222:	ee 0f       	add	r30, r30
    8224:	ff 1f       	adc	r31, r31
    8226:	e1 54       	subi	r30, 0x41	; 65
    8228:	f6 4d       	sbci	r31, 0xD6	; 214
    822a:	80 81       	ld	r24, Z
    822c:	91 81       	ldd	r25, Z+1	; 0x01
    822e:	ff 24       	eor	r15, r15
    8230:	f3 94       	inc	r15
    8232:	80 34       	cpi	r24, 0x40	; 64
    8234:	91 05       	cpc	r25, r1
    8236:	09 f4       	brne	.+2      	; 0x823a <udi_cdc_tx_send+0xf2>
    8238:	f1 2c       	mov	r15, r1
    823a:	80 34       	cpi	r24, 0x40	; 64
    823c:	91 05       	cpc	r25, r1
    823e:	91 f0       	breq	.+36     	; 0x8264 <udi_cdc_tx_send+0x11c>
    8240:	0e 94 58 31 	call	0x62b0	; 0x62b0 <udd_is_high_speed>
    8244:	88 23       	and	r24, r24
    8246:	39 f0       	breq	.+14     	; 0x8256 <udi_cdc_tx_send+0x10e>
    8248:	0e 94 65 31 	call	0x62ca	; 0x62ca <udd_get_micro_frame_number>
    824c:	80 93 bc 29 	sts	0x29BC, r24	; 0x8029bc <udi_cdc_tx_sof_num>
    8250:	90 93 bd 29 	sts	0x29BD, r25	; 0x8029bd <udi_cdc_tx_sof_num+0x1>
    8254:	0b c0       	rjmp	.+22     	; 0x826c <udi_cdc_tx_send+0x124>
    8256:	0e 94 60 31 	call	0x62c0	; 0x62c0 <udd_get_frame_number>
    825a:	80 93 bc 29 	sts	0x29BC, r24	; 0x8029bc <udi_cdc_tx_sof_num>
    825e:	90 93 bd 29 	sts	0x29BD, r25	; 0x8029bd <udi_cdc_tx_sof_num+0x1>
    8262:	04 c0       	rjmp	.+8      	; 0x826c <udi_cdc_tx_send+0x124>
    8264:	10 92 bc 29 	sts	0x29BC, r1	; 0x8029bc <udi_cdc_tx_sof_num>
    8268:	10 92 bd 29 	sts	0x29BD, r1	; 0x8029bd <udi_cdc_tx_sof_num+0x1>
    826c:	f8 01       	movw	r30, r16
    826e:	ee 0f       	add	r30, r30
    8270:	ff 1f       	adc	r31, r31
    8272:	e1 54       	subi	r30, 0x41	; 65
    8274:	f6 4d       	sbci	r31, 0xD6	; 214
    8276:	20 81       	ld	r18, Z
    8278:	31 81       	ldd	r19, Z+1	; 0x01
    827a:	a8 01       	movw	r20, r16
    827c:	00 24       	eor	r0, r0
    827e:	56 95       	lsr	r21
    8280:	47 95       	ror	r20
    8282:	07 94       	ror	r0
    8284:	56 95       	lsr	r21
    8286:	47 95       	ror	r20
    8288:	07 94       	ror	r0
    828a:	54 2f       	mov	r21, r20
    828c:	40 2d       	mov	r20, r0
    828e:	4c 53       	subi	r20, 0x3C	; 60
    8290:	56 4d       	sbci	r21, 0xD6	; 214
    8292:	09 e5       	ldi	r16, 0x59	; 89
    8294:	11 e4       	ldi	r17, 0x41	; 65
    8296:	6f 2d       	mov	r22, r15
    8298:	81 e8       	ldi	r24, 0x81	; 129
    829a:	0e 94 49 32 	call	0x6492	; 0x6492 <udd_ep_run>
    829e:	0f 90       	pop	r0
    82a0:	df 91       	pop	r29
    82a2:	cf 91       	pop	r28
    82a4:	1f 91       	pop	r17
    82a6:	0f 91       	pop	r16
    82a8:	ff 90       	pop	r15
    82aa:	08 95       	ret

000082ac <udi_cdc_data_sof_notify>:
    82ac:	80 e0       	ldi	r24, 0x00	; 0
    82ae:	4c cf       	rjmp	.-360    	; 0x8148 <udi_cdc_tx_send>
    82b0:	08 95       	ret

000082b2 <udi_cdc_data_sent>:
    82b2:	81 11       	cpse	r24, r1
    82b4:	19 c0       	rjmp	.+50     	; 0x82e8 <udi_cdc_data_sent+0x36>
    82b6:	20 91 be 29 	lds	r18, 0x29BE	; 0x8029be <udi_cdc_tx_buf_sel>
    82ba:	81 e0       	ldi	r24, 0x01	; 1
    82bc:	90 e0       	ldi	r25, 0x00	; 0
    82be:	22 23       	and	r18, r18
    82c0:	11 f0       	breq	.+4      	; 0x82c6 <udi_cdc_data_sent+0x14>
    82c2:	80 e0       	ldi	r24, 0x00	; 0
    82c4:	90 e0       	ldi	r25, 0x00	; 0
    82c6:	88 0f       	add	r24, r24
    82c8:	99 1f       	adc	r25, r25
    82ca:	fc 01       	movw	r30, r24
    82cc:	e1 54       	subi	r30, 0x41	; 65
    82ce:	f6 4d       	sbci	r31, 0xD6	; 214
    82d0:	10 82       	st	Z, r1
    82d2:	11 82       	std	Z+1, r1	; 0x01
    82d4:	10 92 ba 29 	sts	0x29BA, r1	; 0x8029ba <udi_cdc_tx_both_buf_to_send>
    82d8:	10 92 bb 29 	sts	0x29BB, r1	; 0x8029bb <udi_cdc_tx_trans_ongoing>
    82dc:	67 2b       	or	r22, r23
    82de:	11 f0       	breq	.+4      	; 0x82e4 <udi_cdc_data_sent+0x32>
    82e0:	80 e0       	ldi	r24, 0x00	; 0
    82e2:	99 d8       	rcall	.-3790   	; 0x7416 <usb_callback_tx_empty_notify>
    82e4:	80 e0       	ldi	r24, 0x00	; 0
    82e6:	30 cf       	rjmp	.-416    	; 0x8148 <udi_cdc_tx_send>
    82e8:	08 95       	ret

000082ea <udi_cdc_data_disable>:
    82ea:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udi_cdc_nb_data_enabled>
    82ee:	81 50       	subi	r24, 0x01	; 1
    82f0:	80 93 cd 2a 	sts	0x2ACD, r24	; 0x802acd <udi_cdc_nb_data_enabled>
    82f4:	80 91 cd 2a 	lds	r24, 0x2ACD	; 0x802acd <udi_cdc_nb_data_enabled>
    82f8:	87 d8       	rcall	.-3826   	; 0x7408 <usb_callback_cdc_disable>
    82fa:	10 92 cc 2a 	sts	0x2ACC, r1	; 0x802acc <udi_cdc_data_running>
    82fe:	08 95       	ret

00008300 <udi_cdc_comm_setup>:
    8300:	cf 93       	push	r28
    8302:	df 93       	push	r29
    8304:	80 91 ff 2a 	lds	r24, 0x2AFF	; 0x802aff <udd_g_ctrlreq>
    8308:	88 23       	and	r24, r24
    830a:	e4 f4       	brge	.+56     	; 0x8344 <udi_cdc_comm_setup+0x44>
    830c:	80 76       	andi	r24, 0x60	; 96
    830e:	80 32       	cpi	r24, 0x20	; 32
    8310:	09 f0       	breq	.+2      	; 0x8314 <udi_cdc_comm_setup+0x14>
    8312:	47 c0       	rjmp	.+142    	; 0x83a2 <udi_cdc_comm_setup+0xa2>
    8314:	80 91 00 2b 	lds	r24, 0x2B00	; 0x802b00 <udd_g_ctrlreq+0x1>
    8318:	81 32       	cpi	r24, 0x21	; 33
    831a:	09 f0       	breq	.+2      	; 0x831e <udi_cdc_comm_setup+0x1e>
    831c:	44 c0       	rjmp	.+136    	; 0x83a6 <udi_cdc_comm_setup+0xa6>
    831e:	80 91 05 2b 	lds	r24, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    8322:	90 91 06 2b 	lds	r25, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    8326:	07 97       	sbiw	r24, 0x07	; 7
    8328:	09 f0       	breq	.+2      	; 0x832c <udi_cdc_comm_setup+0x2c>
    832a:	3f c0       	rjmp	.+126    	; 0x83aa <udi_cdc_comm_setup+0xaa>
    832c:	ef ef       	ldi	r30, 0xFF	; 255
    832e:	fa e2       	ldi	r31, 0x2A	; 42
    8330:	8c ed       	ldi	r24, 0xDC	; 220
    8332:	9a e2       	ldi	r25, 0x2A	; 42
    8334:	80 87       	std	Z+8, r24	; 0x08
    8336:	91 87       	std	Z+9, r25	; 0x09
    8338:	87 e0       	ldi	r24, 0x07	; 7
    833a:	90 e0       	ldi	r25, 0x00	; 0
    833c:	82 87       	std	Z+10, r24	; 0x0a
    833e:	93 87       	std	Z+11, r25	; 0x0b
    8340:	81 e0       	ldi	r24, 0x01	; 1
    8342:	3a c0       	rjmp	.+116    	; 0x83b8 <udi_cdc_comm_setup+0xb8>
    8344:	80 76       	andi	r24, 0x60	; 96
    8346:	80 32       	cpi	r24, 0x20	; 32
    8348:	91 f5       	brne	.+100    	; 0x83ae <udi_cdc_comm_setup+0xae>
    834a:	80 91 00 2b 	lds	r24, 0x2B00	; 0x802b00 <udd_g_ctrlreq+0x1>
    834e:	80 32       	cpi	r24, 0x20	; 32
    8350:	19 f0       	breq	.+6      	; 0x8358 <udi_cdc_comm_setup+0x58>
    8352:	82 32       	cpi	r24, 0x22	; 34
    8354:	b9 f0       	breq	.+46     	; 0x8384 <udi_cdc_comm_setup+0x84>
    8356:	2d c0       	rjmp	.+90     	; 0x83b2 <udi_cdc_comm_setup+0xb2>
    8358:	80 91 05 2b 	lds	r24, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    835c:	90 91 06 2b 	lds	r25, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    8360:	07 97       	sbiw	r24, 0x07	; 7
    8362:	49 f5       	brne	.+82     	; 0x83b6 <udi_cdc_comm_setup+0xb6>
    8364:	ef ef       	ldi	r30, 0xFF	; 255
    8366:	fa e2       	ldi	r31, 0x2A	; 42
    8368:	8f e6       	ldi	r24, 0x6F	; 111
    836a:	90 e4       	ldi	r25, 0x40	; 64
    836c:	84 87       	std	Z+12, r24	; 0x0c
    836e:	95 87       	std	Z+13, r25	; 0x0d
    8370:	8c ed       	ldi	r24, 0xDC	; 220
    8372:	9a e2       	ldi	r25, 0x2A	; 42
    8374:	80 87       	std	Z+8, r24	; 0x08
    8376:	91 87       	std	Z+9, r25	; 0x09
    8378:	87 e0       	ldi	r24, 0x07	; 7
    837a:	90 e0       	ldi	r25, 0x00	; 0
    837c:	82 87       	std	Z+10, r24	; 0x0a
    837e:	93 87       	std	Z+11, r25	; 0x0b
    8380:	81 e0       	ldi	r24, 0x01	; 1
    8382:	1a c0       	rjmp	.+52     	; 0x83b8 <udi_cdc_comm_setup+0xb8>
    8384:	cf ef       	ldi	r28, 0xFF	; 255
    8386:	da e2       	ldi	r29, 0x2A	; 42
    8388:	6a 81       	ldd	r22, Y+2	; 0x02
    838a:	61 70       	andi	r22, 0x01	; 1
    838c:	80 e0       	ldi	r24, 0x00	; 0
    838e:	40 d8       	rcall	.-3968   	; 0x7410 <usb_callback_cdc_set_dtr>
    8390:	6a 81       	ldd	r22, Y+2	; 0x02
    8392:	7b 81       	ldd	r23, Y+3	; 0x03
    8394:	76 95       	lsr	r23
    8396:	67 95       	ror	r22
    8398:	61 70       	andi	r22, 0x01	; 1
    839a:	80 e0       	ldi	r24, 0x00	; 0
    839c:	3a d8       	rcall	.-3980   	; 0x7412 <usb_callback_cdc_set_rts>
    839e:	81 e0       	ldi	r24, 0x01	; 1
    83a0:	0b c0       	rjmp	.+22     	; 0x83b8 <udi_cdc_comm_setup+0xb8>
    83a2:	80 e0       	ldi	r24, 0x00	; 0
    83a4:	09 c0       	rjmp	.+18     	; 0x83b8 <udi_cdc_comm_setup+0xb8>
    83a6:	80 e0       	ldi	r24, 0x00	; 0
    83a8:	07 c0       	rjmp	.+14     	; 0x83b8 <udi_cdc_comm_setup+0xb8>
    83aa:	80 e0       	ldi	r24, 0x00	; 0
    83ac:	05 c0       	rjmp	.+10     	; 0x83b8 <udi_cdc_comm_setup+0xb8>
    83ae:	80 e0       	ldi	r24, 0x00	; 0
    83b0:	03 c0       	rjmp	.+6      	; 0x83b8 <udi_cdc_comm_setup+0xb8>
    83b2:	80 e0       	ldi	r24, 0x00	; 0
    83b4:	01 c0       	rjmp	.+2      	; 0x83b8 <udi_cdc_comm_setup+0xb8>
    83b6:	80 e0       	ldi	r24, 0x00	; 0
    83b8:	df 91       	pop	r29
    83ba:	cf 91       	pop	r28
    83bc:	08 95       	ret

000083be <udi_cdc_multi_get_nb_received_data>:
    83be:	cf 93       	push	r28
    83c0:	df 93       	push	r29
    83c2:	1f 92       	push	r1
    83c4:	cd b7       	in	r28, 0x3d	; 61
    83c6:	de b7       	in	r29, 0x3e	; 62
    83c8:	8f b7       	in	r24, 0x3f	; 63
    83ca:	89 83       	std	Y+1, r24	; 0x01
    83cc:	f8 94       	cli
    83ce:	49 81       	ldd	r20, Y+1	; 0x01
    83d0:	20 91 45 2a 	lds	r18, 0x2A45	; 0x802a45 <udi_cdc_rx_pos>
    83d4:	30 91 46 2a 	lds	r19, 0x2A46	; 0x802a46 <udi_cdc_rx_pos+0x1>
    83d8:	e0 91 47 2a 	lds	r30, 0x2A47	; 0x802a47 <udi_cdc_rx_buf_sel>
    83dc:	f0 e0       	ldi	r31, 0x00	; 0
    83de:	ee 0f       	add	r30, r30
    83e0:	ff 1f       	adc	r31, r31
    83e2:	e8 5b       	subi	r30, 0xB8	; 184
    83e4:	f5 4d       	sbci	r31, 0xD5	; 213
    83e6:	80 81       	ld	r24, Z
    83e8:	91 81       	ldd	r25, Z+1	; 0x01
    83ea:	4f bf       	out	0x3f, r20	; 63
    83ec:	82 1b       	sub	r24, r18
    83ee:	93 0b       	sbc	r25, r19
    83f0:	0f 90       	pop	r0
    83f2:	df 91       	pop	r29
    83f4:	cf 91       	pop	r28
    83f6:	08 95       	ret

000083f8 <udi_cdc_multi_is_rx_ready>:
    83f8:	e2 df       	rcall	.-60     	; 0x83be <udi_cdc_multi_get_nb_received_data>
    83fa:	21 e0       	ldi	r18, 0x01	; 1
    83fc:	89 2b       	or	r24, r25
    83fe:	09 f4       	brne	.+2      	; 0x8402 <udi_cdc_multi_is_rx_ready+0xa>
    8400:	20 e0       	ldi	r18, 0x00	; 0
    8402:	82 2f       	mov	r24, r18
    8404:	08 95       	ret

00008406 <udi_cdc_rx_start>:
    8406:	0f 93       	push	r16
    8408:	1f 93       	push	r17
    840a:	cf 93       	push	r28
    840c:	df 93       	push	r29
    840e:	1f 92       	push	r1
    8410:	cd b7       	in	r28, 0x3d	; 61
    8412:	de b7       	in	r29, 0x3e	; 62
    8414:	8f b7       	in	r24, 0x3f	; 63
    8416:	89 83       	std	Y+1, r24	; 0x01
    8418:	f8 94       	cli
    841a:	99 81       	ldd	r25, Y+1	; 0x01
    841c:	20 91 47 2a 	lds	r18, 0x2A47	; 0x802a47 <udi_cdc_rx_buf_sel>
    8420:	80 91 44 2a 	lds	r24, 0x2A44	; 0x802a44 <udi_cdc_rx_trans_ongoing>
    8424:	81 11       	cpse	r24, r1
    8426:	10 c0       	rjmp	.+32     	; 0x8448 <udi_cdc_rx_start+0x42>
    8428:	60 91 45 2a 	lds	r22, 0x2A45	; 0x802a45 <udi_cdc_rx_pos>
    842c:	70 91 46 2a 	lds	r23, 0x2A46	; 0x802a46 <udi_cdc_rx_pos+0x1>
    8430:	02 2f       	mov	r16, r18
    8432:	10 e0       	ldi	r17, 0x00	; 0
    8434:	f8 01       	movw	r30, r16
    8436:	ee 0f       	add	r30, r30
    8438:	ff 1f       	adc	r31, r31
    843a:	e8 5b       	subi	r30, 0xB8	; 184
    843c:	f5 4d       	sbci	r31, 0xD5	; 213
    843e:	40 81       	ld	r20, Z
    8440:	51 81       	ldd	r21, Z+1	; 0x01
    8442:	64 17       	cp	r22, r20
    8444:	75 07       	cpc	r23, r21
    8446:	18 f4       	brcc	.+6      	; 0x844e <udi_cdc_rx_start+0x48>
    8448:	9f bf       	out	0x3f, r25	; 63
    844a:	80 e0       	ldi	r24, 0x00	; 0
    844c:	28 c0       	rjmp	.+80     	; 0x849e <udi_cdc_rx_start+0x98>
    844e:	10 92 45 2a 	sts	0x2A45, r1	; 0x802a45 <udi_cdc_rx_pos>
    8452:	10 92 46 2a 	sts	0x2A46, r1	; 0x802a46 <udi_cdc_rx_pos+0x1>
    8456:	81 e0       	ldi	r24, 0x01	; 1
    8458:	21 11       	cpse	r18, r1
    845a:	80 e0       	ldi	r24, 0x00	; 0
    845c:	80 93 47 2a 	sts	0x2A47, r24	; 0x802a47 <udi_cdc_rx_buf_sel>
    8460:	81 e0       	ldi	r24, 0x01	; 1
    8462:	80 93 44 2a 	sts	0x2A44, r24	; 0x802a44 <udi_cdc_rx_trans_ongoing>
    8466:	9f bf       	out	0x3f, r25	; 63
    8468:	80 e0       	ldi	r24, 0x00	; 0
    846a:	c6 df       	rcall	.-116    	; 0x83f8 <udi_cdc_multi_is_rx_ready>
    846c:	88 23       	and	r24, r24
    846e:	19 f0       	breq	.+6      	; 0x8476 <udi_cdc_rx_start+0x70>
    8470:	80 e0       	ldi	r24, 0x00	; 0
    8472:	0e 94 0a 3a 	call	0x7414	; 0x7414 <usb_callback_rx_notify>
    8476:	a8 01       	movw	r20, r16
    8478:	00 24       	eor	r0, r0
    847a:	56 95       	lsr	r21
    847c:	47 95       	ror	r20
    847e:	07 94       	ror	r0
    8480:	56 95       	lsr	r21
    8482:	47 95       	ror	r20
    8484:	07 94       	ror	r0
    8486:	54 2f       	mov	r21, r20
    8488:	40 2d       	mov	r20, r0
    848a:	44 5b       	subi	r20, 0xB4	; 180
    848c:	55 4d       	sbci	r21, 0xD5	; 213
    848e:	07 e8       	ldi	r16, 0x87	; 135
    8490:	12 e4       	ldi	r17, 0x42	; 66
    8492:	20 e4       	ldi	r18, 0x40	; 64
    8494:	30 e0       	ldi	r19, 0x00	; 0
    8496:	61 e0       	ldi	r22, 0x01	; 1
    8498:	82 e0       	ldi	r24, 0x02	; 2
    849a:	0e 94 49 32 	call	0x6492	; 0x6492 <udd_ep_run>
    849e:	0f 90       	pop	r0
    84a0:	df 91       	pop	r29
    84a2:	cf 91       	pop	r28
    84a4:	1f 91       	pop	r17
    84a6:	0f 91       	pop	r16
    84a8:	08 95       	ret

000084aa <udi_cdc_data_enable>:
    84aa:	10 92 cd 2a 	sts	0x2ACD, r1	; 0x802acd <udi_cdc_nb_data_enabled>
    84ae:	10 92 bb 29 	sts	0x29BB, r1	; 0x8029bb <udi_cdc_tx_trans_ongoing>
    84b2:	10 92 ba 29 	sts	0x29BA, r1	; 0x8029ba <udi_cdc_tx_both_buf_to_send>
    84b6:	10 92 be 29 	sts	0x29BE, r1	; 0x8029be <udi_cdc_tx_buf_sel>
    84ba:	ef eb       	ldi	r30, 0xBF	; 191
    84bc:	f9 e2       	ldi	r31, 0x29	; 41
    84be:	10 82       	st	Z, r1
    84c0:	11 82       	std	Z+1, r1	; 0x01
    84c2:	12 82       	std	Z+2, r1	; 0x02
    84c4:	13 82       	std	Z+3, r1	; 0x03
    84c6:	10 92 bc 29 	sts	0x29BC, r1	; 0x8029bc <udi_cdc_tx_sof_num>
    84ca:	10 92 bd 29 	sts	0x29BD, r1	; 0x8029bd <udi_cdc_tx_sof_num+0x1>
    84ce:	80 e0       	ldi	r24, 0x00	; 0
    84d0:	3b de       	rcall	.-906    	; 0x8148 <udi_cdc_tx_send>
    84d2:	10 92 44 2a 	sts	0x2A44, r1	; 0x802a44 <udi_cdc_rx_trans_ongoing>
    84d6:	10 92 47 2a 	sts	0x2A47, r1	; 0x802a47 <udi_cdc_rx_buf_sel>
    84da:	e8 e4       	ldi	r30, 0x48	; 72
    84dc:	fa e2       	ldi	r31, 0x2A	; 42
    84de:	10 82       	st	Z, r1
    84e0:	11 82       	std	Z+1, r1	; 0x01
    84e2:	12 82       	std	Z+2, r1	; 0x02
    84e4:	13 82       	std	Z+3, r1	; 0x03
    84e6:	10 92 45 2a 	sts	0x2A45, r1	; 0x802a45 <udi_cdc_rx_pos>
    84ea:	10 92 46 2a 	sts	0x2A46, r1	; 0x802a46 <udi_cdc_rx_pos+0x1>
    84ee:	80 e0       	ldi	r24, 0x00	; 0
    84f0:	8a df       	rcall	.-236    	; 0x8406 <udi_cdc_rx_start>
    84f2:	88 23       	and	r24, r24
    84f4:	59 f0       	breq	.+22     	; 0x850c <udi_cdc_data_enable+0x62>
    84f6:	90 91 cd 2a 	lds	r25, 0x2ACD	; 0x802acd <udi_cdc_nb_data_enabled>
    84fa:	9f 5f       	subi	r25, 0xFF	; 255
    84fc:	90 93 cd 2a 	sts	0x2ACD, r25	; 0x802acd <udi_cdc_nb_data_enabled>
    8500:	90 91 cd 2a 	lds	r25, 0x2ACD	; 0x802acd <udi_cdc_nb_data_enabled>
    8504:	91 30       	cpi	r25, 0x01	; 1
    8506:	11 f4       	brne	.+4      	; 0x850c <udi_cdc_data_enable+0x62>
    8508:	90 93 cc 2a 	sts	0x2ACC, r25	; 0x802acc <udi_cdc_data_running>
    850c:	08 95       	ret

0000850e <udi_cdc_data_received>:
    850e:	0f 93       	push	r16
    8510:	1f 93       	push	r17
    8512:	81 11       	cpse	r24, r1
    8514:	29 c0       	rjmp	.+82     	; 0x8568 <udi_cdc_data_received+0x5a>
    8516:	80 91 47 2a 	lds	r24, 0x2A47	; 0x802a47 <udi_cdc_rx_buf_sel>
    851a:	e1 e0       	ldi	r30, 0x01	; 1
    851c:	81 11       	cpse	r24, r1
    851e:	e0 e0       	ldi	r30, 0x00	; 0
    8520:	84 2f       	mov	r24, r20
    8522:	61 15       	cp	r22, r1
    8524:	71 05       	cpc	r23, r1
    8526:	a9 f4       	brne	.+42     	; 0x8552 <udi_cdc_data_received+0x44>
    8528:	4e 2f       	mov	r20, r30
    852a:	50 e0       	ldi	r21, 0x00	; 0
    852c:	00 24       	eor	r0, r0
    852e:	56 95       	lsr	r21
    8530:	47 95       	ror	r20
    8532:	07 94       	ror	r0
    8534:	56 95       	lsr	r21
    8536:	47 95       	ror	r20
    8538:	07 94       	ror	r0
    853a:	54 2f       	mov	r21, r20
    853c:	40 2d       	mov	r20, r0
    853e:	44 5b       	subi	r20, 0xB4	; 180
    8540:	55 4d       	sbci	r21, 0xD5	; 213
    8542:	07 e8       	ldi	r16, 0x87	; 135
    8544:	12 e4       	ldi	r17, 0x42	; 66
    8546:	20 e4       	ldi	r18, 0x40	; 64
    8548:	30 e0       	ldi	r19, 0x00	; 0
    854a:	61 e0       	ldi	r22, 0x01	; 1
    854c:	0e 94 49 32 	call	0x6492	; 0x6492 <udd_ep_run>
    8550:	0b c0       	rjmp	.+22     	; 0x8568 <udi_cdc_data_received+0x5a>
    8552:	f0 e0       	ldi	r31, 0x00	; 0
    8554:	ee 0f       	add	r30, r30
    8556:	ff 1f       	adc	r31, r31
    8558:	e8 5b       	subi	r30, 0xB8	; 184
    855a:	f5 4d       	sbci	r31, 0xD5	; 213
    855c:	60 83       	st	Z, r22
    855e:	71 83       	std	Z+1, r23	; 0x01
    8560:	10 92 44 2a 	sts	0x2A44, r1	; 0x802a44 <udi_cdc_rx_trans_ongoing>
    8564:	80 e0       	ldi	r24, 0x00	; 0
    8566:	4f df       	rcall	.-354    	; 0x8406 <udi_cdc_rx_start>
    8568:	1f 91       	pop	r17
    856a:	0f 91       	pop	r16
    856c:	08 95       	ret

0000856e <udi_cdc_multi_getc>:
    856e:	ef 92       	push	r14
    8570:	ff 92       	push	r15
    8572:	1f 93       	push	r17
    8574:	cf 93       	push	r28
    8576:	df 93       	push	r29
    8578:	1f 92       	push	r1
    857a:	cd b7       	in	r28, 0x3d	; 61
    857c:	de b7       	in	r29, 0x3e	; 62
    857e:	11 e0       	ldi	r17, 0x01	; 1
    8580:	80 91 e2 2a 	lds	r24, 0x2AE2	; 0x802ae2 <udi_cdc_line_coding+0x6>
    8584:	89 30       	cpi	r24, 0x09	; 9
    8586:	09 f0       	breq	.+2      	; 0x858a <udi_cdc_multi_getc+0x1c>
    8588:	10 e0       	ldi	r17, 0x00	; 0
    858a:	40 e0       	ldi	r20, 0x00	; 0
    858c:	50 e0       	ldi	r21, 0x00	; 0
    858e:	8f b7       	in	r24, 0x3f	; 63
    8590:	89 83       	std	Y+1, r24	; 0x01
    8592:	f8 94       	cli
    8594:	a9 81       	ldd	r26, Y+1	; 0x01
    8596:	20 91 45 2a 	lds	r18, 0x2A45	; 0x802a45 <udi_cdc_rx_pos>
    859a:	30 91 46 2a 	lds	r19, 0x2A46	; 0x802a46 <udi_cdc_rx_pos+0x1>
    859e:	80 91 47 2a 	lds	r24, 0x2A47	; 0x802a47 <udi_cdc_rx_buf_sel>
    85a2:	90 e0       	ldi	r25, 0x00	; 0
    85a4:	fc 01       	movw	r30, r24
    85a6:	ee 0f       	add	r30, r30
    85a8:	ff 1f       	adc	r31, r31
    85aa:	e8 5b       	subi	r30, 0xB8	; 184
    85ac:	f5 4d       	sbci	r31, 0xD5	; 213
    85ae:	60 81       	ld	r22, Z
    85b0:	71 81       	ldd	r23, Z+1	; 0x01
    85b2:	af bf       	out	0x3f, r26	; 63
    85b4:	26 17       	cp	r18, r22
    85b6:	37 07       	cpc	r19, r23
    85b8:	30 f0       	brcs	.+12     	; 0x85c6 <udi_cdc_multi_getc+0x58>
    85ba:	80 91 cc 2a 	lds	r24, 0x2ACC	; 0x802acc <udi_cdc_data_running>
    85be:	81 11       	cpse	r24, r1
    85c0:	e6 cf       	rjmp	.-52     	; 0x858e <udi_cdc_multi_getc+0x20>
    85c2:	90 e0       	ldi	r25, 0x00	; 0
    85c4:	21 c0       	rjmp	.+66     	; 0x8608 <udi_cdc_multi_getc+0x9a>
    85c6:	fc 01       	movw	r30, r24
    85c8:	00 24       	eor	r0, r0
    85ca:	f6 95       	lsr	r31
    85cc:	e7 95       	ror	r30
    85ce:	07 94       	ror	r0
    85d0:	f6 95       	lsr	r31
    85d2:	e7 95       	ror	r30
    85d4:	07 94       	ror	r0
    85d6:	fe 2f       	mov	r31, r30
    85d8:	e0 2d       	mov	r30, r0
    85da:	e4 5b       	subi	r30, 0xB4	; 180
    85dc:	f5 4d       	sbci	r31, 0xD5	; 213
    85de:	e2 0f       	add	r30, r18
    85e0:	f3 1f       	adc	r31, r19
    85e2:	80 81       	ld	r24, Z
    85e4:	7a 01       	movw	r14, r20
    85e6:	e8 2a       	or	r14, r24
    85e8:	2f 5f       	subi	r18, 0xFF	; 255
    85ea:	3f 4f       	sbci	r19, 0xFF	; 255
    85ec:	20 93 45 2a 	sts	0x2A45, r18	; 0x802a45 <udi_cdc_rx_pos>
    85f0:	30 93 46 2a 	sts	0x2A46, r19	; 0x802a46 <udi_cdc_rx_pos+0x1>
    85f4:	80 e0       	ldi	r24, 0x00	; 0
    85f6:	07 df       	rcall	.-498    	; 0x8406 <udi_cdc_rx_start>
    85f8:	11 23       	and	r17, r17
    85fa:	21 f0       	breq	.+8      	; 0x8604 <udi_cdc_multi_getc+0x96>
    85fc:	5e 2d       	mov	r21, r14
    85fe:	44 27       	eor	r20, r20
    8600:	10 e0       	ldi	r17, 0x00	; 0
    8602:	c5 cf       	rjmp	.-118    	; 0x858e <udi_cdc_multi_getc+0x20>
    8604:	8e 2d       	mov	r24, r14
    8606:	9f 2d       	mov	r25, r15
    8608:	0f 90       	pop	r0
    860a:	df 91       	pop	r29
    860c:	cf 91       	pop	r28
    860e:	1f 91       	pop	r17
    8610:	ff 90       	pop	r15
    8612:	ef 90       	pop	r14
    8614:	08 95       	ret

00008616 <udi_cdc_getc>:
    8616:	80 e0       	ldi	r24, 0x00	; 0
    8618:	aa cf       	rjmp	.-172    	; 0x856e <udi_cdc_multi_getc>
    861a:	08 95       	ret

0000861c <udi_cdc_multi_get_free_tx_buffer>:
    861c:	cf 93       	push	r28
    861e:	df 93       	push	r29
    8620:	1f 92       	push	r1
    8622:	cd b7       	in	r28, 0x3d	; 61
    8624:	de b7       	in	r29, 0x3e	; 62
    8626:	8f b7       	in	r24, 0x3f	; 63
    8628:	89 83       	std	Y+1, r24	; 0x01
    862a:	f8 94       	cli
    862c:	99 81       	ldd	r25, Y+1	; 0x01
    862e:	80 91 be 29 	lds	r24, 0x29BE	; 0x8029be <udi_cdc_tx_buf_sel>
    8632:	e8 2f       	mov	r30, r24
    8634:	f0 e0       	ldi	r31, 0x00	; 0
    8636:	ee 0f       	add	r30, r30
    8638:	ff 1f       	adc	r31, r31
    863a:	e1 54       	subi	r30, 0x41	; 65
    863c:	f6 4d       	sbci	r31, 0xD6	; 214
    863e:	20 81       	ld	r18, Z
    8640:	31 81       	ldd	r19, Z+1	; 0x01
    8642:	20 34       	cpi	r18, 0x40	; 64
    8644:	31 05       	cpc	r19, r1
    8646:	89 f4       	brne	.+34     	; 0x866a <udi_cdc_multi_get_free_tx_buffer+0x4e>
    8648:	40 91 bb 29 	lds	r20, 0x29BB	; 0x8029bb <udi_cdc_tx_trans_ongoing>
    864c:	41 11       	cpse	r20, r1
    864e:	0d c0       	rjmp	.+26     	; 0x866a <udi_cdc_multi_get_free_tx_buffer+0x4e>
    8650:	40 91 ba 29 	lds	r20, 0x29BA	; 0x8029ba <udi_cdc_tx_both_buf_to_send>
    8654:	41 11       	cpse	r20, r1
    8656:	09 c0       	rjmp	.+18     	; 0x866a <udi_cdc_multi_get_free_tx_buffer+0x4e>
    8658:	21 e0       	ldi	r18, 0x01	; 1
    865a:	20 93 ba 29 	sts	0x29BA, r18	; 0x8029ba <udi_cdc_tx_both_buf_to_send>
    865e:	81 11       	cpse	r24, r1
    8660:	20 e0       	ldi	r18, 0x00	; 0
    8662:	20 93 be 29 	sts	0x29BE, r18	; 0x8029be <udi_cdc_tx_buf_sel>
    8666:	20 e0       	ldi	r18, 0x00	; 0
    8668:	30 e0       	ldi	r19, 0x00	; 0
    866a:	9f bf       	out	0x3f, r25	; 63
    866c:	80 e4       	ldi	r24, 0x40	; 64
    866e:	90 e0       	ldi	r25, 0x00	; 0
    8670:	82 1b       	sub	r24, r18
    8672:	93 0b       	sbc	r25, r19
    8674:	0f 90       	pop	r0
    8676:	df 91       	pop	r29
    8678:	cf 91       	pop	r28
    867a:	08 95       	ret

0000867c <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    867c:	cf df       	rcall	.-98     	; 0x861c <udi_cdc_multi_get_free_tx_buffer>
    867e:	21 e0       	ldi	r18, 0x01	; 1
    8680:	89 2b       	or	r24, r25
    8682:	09 f4       	brne	.+2      	; 0x8686 <udi_cdc_multi_is_tx_ready+0xa>
    8684:	20 e0       	ldi	r18, 0x00	; 0
    8686:	82 2f       	mov	r24, r18
    8688:	08 95       	ret

0000868a <udi_cdc_multi_putc>:
    868a:	ff 92       	push	r15
    868c:	0f 93       	push	r16
    868e:	1f 93       	push	r17
    8690:	cf 93       	push	r28
    8692:	df 93       	push	r29
    8694:	1f 92       	push	r1
    8696:	cd b7       	in	r28, 0x3d	; 61
    8698:	de b7       	in	r29, 0x3e	; 62
    869a:	f6 2e       	mov	r15, r22
    869c:	17 2f       	mov	r17, r23
    869e:	01 e0       	ldi	r16, 0x01	; 1
    86a0:	80 91 e2 2a 	lds	r24, 0x2AE2	; 0x802ae2 <udi_cdc_line_coding+0x6>
    86a4:	89 30       	cpi	r24, 0x09	; 9
    86a6:	09 f0       	breq	.+2      	; 0x86aa <udi_cdc_multi_putc+0x20>
    86a8:	00 e0       	ldi	r16, 0x00	; 0
    86aa:	80 e0       	ldi	r24, 0x00	; 0
    86ac:	e7 df       	rcall	.-50     	; 0x867c <udi_cdc_multi_is_tx_ready>
    86ae:	81 11       	cpse	r24, r1
    86b0:	07 c0       	rjmp	.+14     	; 0x86c0 <udi_cdc_multi_putc+0x36>
    86b2:	80 91 cc 2a 	lds	r24, 0x2ACC	; 0x802acc <udi_cdc_data_running>
    86b6:	81 11       	cpse	r24, r1
    86b8:	f8 cf       	rjmp	.-16     	; 0x86aa <udi_cdc_multi_putc+0x20>
    86ba:	80 e0       	ldi	r24, 0x00	; 0
    86bc:	90 e0       	ldi	r25, 0x00	; 0
    86be:	2c c0       	rjmp	.+88     	; 0x8718 <udi_cdc_multi_putc+0x8e>
    86c0:	8f b7       	in	r24, 0x3f	; 63
    86c2:	89 83       	std	Y+1, r24	; 0x01
    86c4:	f8 94       	cli
    86c6:	49 81       	ldd	r20, Y+1	; 0x01
    86c8:	80 91 be 29 	lds	r24, 0x29BE	; 0x8029be <udi_cdc_tx_buf_sel>
    86cc:	90 e0       	ldi	r25, 0x00	; 0
    86ce:	fc 01       	movw	r30, r24
    86d0:	ee 0f       	add	r30, r30
    86d2:	ff 1f       	adc	r31, r31
    86d4:	e1 54       	subi	r30, 0x41	; 65
    86d6:	f6 4d       	sbci	r31, 0xD6	; 214
    86d8:	20 81       	ld	r18, Z
    86da:	31 81       	ldd	r19, Z+1	; 0x01
    86dc:	b9 01       	movw	r22, r18
    86de:	6f 5f       	subi	r22, 0xFF	; 255
    86e0:	7f 4f       	sbci	r23, 0xFF	; 255
    86e2:	60 83       	st	Z, r22
    86e4:	71 83       	std	Z+1, r23	; 0x01
    86e6:	00 24       	eor	r0, r0
    86e8:	96 95       	lsr	r25
    86ea:	87 95       	ror	r24
    86ec:	07 94       	ror	r0
    86ee:	96 95       	lsr	r25
    86f0:	87 95       	ror	r24
    86f2:	07 94       	ror	r0
    86f4:	98 2f       	mov	r25, r24
    86f6:	80 2d       	mov	r24, r0
    86f8:	8c 53       	subi	r24, 0x3C	; 60
    86fa:	96 4d       	sbci	r25, 0xD6	; 214
    86fc:	fc 01       	movw	r30, r24
    86fe:	e2 0f       	add	r30, r18
    8700:	f3 1f       	adc	r31, r19
    8702:	f0 82       	st	Z, r15
    8704:	4f bf       	out	0x3f, r20	; 63
    8706:	00 23       	and	r16, r16
    8708:	29 f0       	breq	.+10     	; 0x8714 <udi_cdc_multi_putc+0x8a>
    870a:	f1 2e       	mov	r15, r17
    870c:	11 0f       	add	r17, r17
    870e:	11 0b       	sbc	r17, r17
    8710:	00 e0       	ldi	r16, 0x00	; 0
    8712:	cb cf       	rjmp	.-106    	; 0x86aa <udi_cdc_multi_putc+0x20>
    8714:	81 e0       	ldi	r24, 0x01	; 1
    8716:	90 e0       	ldi	r25, 0x00	; 0
    8718:	0f 90       	pop	r0
    871a:	df 91       	pop	r29
    871c:	cf 91       	pop	r28
    871e:	1f 91       	pop	r17
    8720:	0f 91       	pop	r16
    8722:	ff 90       	pop	r15
    8724:	08 95       	ret

00008726 <udi_cdc_putc>:
    8726:	bc 01       	movw	r22, r24
    8728:	80 e0       	ldi	r24, 0x00	; 0
    872a:	af cf       	rjmp	.-162    	; 0x868a <udi_cdc_multi_putc>
    872c:	08 95       	ret

0000872e <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    872e:	e0 91 e8 2a 	lds	r30, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    8732:	f0 91 e9 2a 	lds	r31, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    8736:	01 90       	ld	r0, Z+
    8738:	f0 81       	ld	r31, Z
    873a:	e0 2d       	mov	r30, r0
    873c:	22 81       	ldd	r18, Z+2	; 0x02
    873e:	33 81       	ldd	r19, Z+3	; 0x03
    8740:	2e 0f       	add	r18, r30
    8742:	3f 1f       	adc	r19, r31
    8744:	fc 01       	movw	r30, r24
    8746:	40 81       	ld	r20, Z
    8748:	e4 0f       	add	r30, r20
    874a:	f1 1d       	adc	r31, r1
    874c:	e2 17       	cp	r30, r18
    874e:	f3 07       	cpc	r31, r19
    8750:	a0 f4       	brcc	.+40     	; 0x877a <udc_next_desc_in_iface+0x4c>
    8752:	81 81       	ldd	r24, Z+1	; 0x01
    8754:	84 30       	cpi	r24, 0x04	; 4
    8756:	a1 f0       	breq	.+40     	; 0x8780 <udc_next_desc_in_iface+0x52>
    8758:	86 13       	cpse	r24, r22
    875a:	06 c0       	rjmp	.+12     	; 0x8768 <udc_next_desc_in_iface+0x3a>
    875c:	14 c0       	rjmp	.+40     	; 0x8786 <udc_next_desc_in_iface+0x58>
    875e:	81 81       	ldd	r24, Z+1	; 0x01
    8760:	84 30       	cpi	r24, 0x04	; 4
    8762:	a1 f0       	breq	.+40     	; 0x878c <udc_next_desc_in_iface+0x5e>
    8764:	86 17       	cp	r24, r22
    8766:	a9 f0       	breq	.+42     	; 0x8792 <udc_next_desc_in_iface+0x64>
    8768:	80 81       	ld	r24, Z
    876a:	e8 0f       	add	r30, r24
    876c:	f1 1d       	adc	r31, r1
    876e:	e2 17       	cp	r30, r18
    8770:	f3 07       	cpc	r31, r19
    8772:	a8 f3       	brcs	.-22     	; 0x875e <udc_next_desc_in_iface+0x30>
    8774:	80 e0       	ldi	r24, 0x00	; 0
    8776:	90 e0       	ldi	r25, 0x00	; 0
    8778:	08 95       	ret
    877a:	80 e0       	ldi	r24, 0x00	; 0
    877c:	90 e0       	ldi	r25, 0x00	; 0
    877e:	08 95       	ret
    8780:	80 e0       	ldi	r24, 0x00	; 0
    8782:	90 e0       	ldi	r25, 0x00	; 0
    8784:	08 95       	ret
    8786:	8e 2f       	mov	r24, r30
    8788:	9f 2f       	mov	r25, r31
    878a:	08 95       	ret
    878c:	80 e0       	ldi	r24, 0x00	; 0
    878e:	90 e0       	ldi	r25, 0x00	; 0
    8790:	08 95       	ret
    8792:	8e 2f       	mov	r24, r30
    8794:	9f 2f       	mov	r25, r31
    8796:	08 95       	ret

00008798 <udc_valid_address>:
    8798:	80 91 01 2b 	lds	r24, 0x2B01	; 0x802b01 <udd_g_ctrlreq+0x2>
    879c:	8f 77       	andi	r24, 0x7F	; 127
    879e:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <udd_set_address>
    87a2:	08 95       	ret

000087a4 <udc_update_iface_desc>:
    87a4:	90 91 ea 2a 	lds	r25, 0x2AEA	; 0x802aea <udc_num_configuration>
    87a8:	99 23       	and	r25, r25
    87aa:	81 f1       	breq	.+96     	; 0x880c <udc_update_iface_desc+0x68>
    87ac:	e0 91 e8 2a 	lds	r30, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    87b0:	f0 91 e9 2a 	lds	r31, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    87b4:	01 90       	ld	r0, Z+
    87b6:	f0 81       	ld	r31, Z
    87b8:	e0 2d       	mov	r30, r0
    87ba:	94 81       	ldd	r25, Z+4	; 0x04
    87bc:	89 17       	cp	r24, r25
    87be:	40 f5       	brcc	.+80     	; 0x8810 <udc_update_iface_desc+0x6c>
    87c0:	e0 93 e6 2a 	sts	0x2AE6, r30	; 0x802ae6 <udc_ptr_iface>
    87c4:	f0 93 e7 2a 	sts	0x2AE7, r31	; 0x802ae7 <udc_ptr_iface+0x1>
    87c8:	22 81       	ldd	r18, Z+2	; 0x02
    87ca:	33 81       	ldd	r19, Z+3	; 0x03
    87cc:	2e 0f       	add	r18, r30
    87ce:	3f 1f       	adc	r19, r31
    87d0:	e2 17       	cp	r30, r18
    87d2:	f3 07       	cpc	r31, r19
    87d4:	f8 f4       	brcc	.+62     	; 0x8814 <udc_update_iface_desc+0x70>
    87d6:	91 81       	ldd	r25, Z+1	; 0x01
    87d8:	94 30       	cpi	r25, 0x04	; 4
    87da:	61 f4       	brne	.+24     	; 0x87f4 <udc_update_iface_desc+0x50>
    87dc:	92 81       	ldd	r25, Z+2	; 0x02
    87de:	89 13       	cpse	r24, r25
    87e0:	09 c0       	rjmp	.+18     	; 0x87f4 <udc_update_iface_desc+0x50>
    87e2:	93 81       	ldd	r25, Z+3	; 0x03
    87e4:	96 13       	cpse	r25, r22
    87e6:	06 c0       	rjmp	.+12     	; 0x87f4 <udc_update_iface_desc+0x50>
    87e8:	e0 93 e6 2a 	sts	0x2AE6, r30	; 0x802ae6 <udc_ptr_iface>
    87ec:	f0 93 e7 2a 	sts	0x2AE7, r31	; 0x802ae7 <udc_ptr_iface+0x1>
    87f0:	81 e0       	ldi	r24, 0x01	; 1
    87f2:	08 95       	ret
    87f4:	90 81       	ld	r25, Z
    87f6:	e9 0f       	add	r30, r25
    87f8:	f1 1d       	adc	r31, r1
    87fa:	e2 17       	cp	r30, r18
    87fc:	f3 07       	cpc	r31, r19
    87fe:	58 f3       	brcs	.-42     	; 0x87d6 <udc_update_iface_desc+0x32>
    8800:	e0 93 e6 2a 	sts	0x2AE6, r30	; 0x802ae6 <udc_ptr_iface>
    8804:	f0 93 e7 2a 	sts	0x2AE7, r31	; 0x802ae7 <udc_ptr_iface+0x1>
    8808:	80 e0       	ldi	r24, 0x00	; 0
    880a:	08 95       	ret
    880c:	80 e0       	ldi	r24, 0x00	; 0
    880e:	08 95       	ret
    8810:	80 e0       	ldi	r24, 0x00	; 0
    8812:	08 95       	ret
    8814:	80 e0       	ldi	r24, 0x00	; 0
    8816:	08 95       	ret

00008818 <udc_iface_disable>:
    8818:	ef 92       	push	r14
    881a:	ff 92       	push	r15
    881c:	1f 93       	push	r17
    881e:	cf 93       	push	r28
    8820:	df 93       	push	r29
    8822:	c8 2f       	mov	r28, r24
    8824:	60 e0       	ldi	r22, 0x00	; 0
    8826:	be df       	rcall	.-132    	; 0x87a4 <udc_update_iface_desc>
    8828:	18 2f       	mov	r17, r24
    882a:	88 23       	and	r24, r24
    882c:	81 f1       	breq	.+96     	; 0x888e <udc_iface_disable+0x76>
    882e:	a0 91 e8 2a 	lds	r26, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    8832:	b0 91 e9 2a 	lds	r27, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    8836:	ec 2f       	mov	r30, r28
    8838:	f0 e0       	ldi	r31, 0x00	; 0
    883a:	ee 0f       	add	r30, r30
    883c:	ff 1f       	adc	r31, r31
    883e:	12 96       	adiw	r26, 0x02	; 2
    8840:	8d 91       	ld	r24, X+
    8842:	9c 91       	ld	r25, X
    8844:	13 97       	sbiw	r26, 0x03	; 3
    8846:	e8 0f       	add	r30, r24
    8848:	f9 1f       	adc	r31, r25
    884a:	e0 80       	ld	r14, Z
    884c:	f1 80       	ldd	r15, Z+1	; 0x01
    884e:	d7 01       	movw	r26, r14
    8850:	16 96       	adiw	r26, 0x06	; 6
    8852:	ed 91       	ld	r30, X+
    8854:	fc 91       	ld	r31, X
    8856:	17 97       	sbiw	r26, 0x07	; 7
    8858:	19 95       	eicall
    885a:	68 2f       	mov	r22, r24
    885c:	8c 2f       	mov	r24, r28
    885e:	a2 df       	rcall	.-188    	; 0x87a4 <udc_update_iface_desc>
    8860:	18 2f       	mov	r17, r24
    8862:	88 23       	and	r24, r24
    8864:	a1 f0       	breq	.+40     	; 0x888e <udc_iface_disable+0x76>
    8866:	c0 91 e6 2a 	lds	r28, 0x2AE6	; 0x802ae6 <udc_ptr_iface>
    886a:	d0 91 e7 2a 	lds	r29, 0x2AE7	; 0x802ae7 <udc_ptr_iface+0x1>
    886e:	65 e0       	ldi	r22, 0x05	; 5
    8870:	ce 01       	movw	r24, r28
    8872:	5d df       	rcall	.-326    	; 0x872e <udc_next_desc_in_iface>
    8874:	ec 01       	movw	r28, r24
    8876:	89 2b       	or	r24, r25
    8878:	21 f0       	breq	.+8      	; 0x8882 <udc_iface_disable+0x6a>
    887a:	8a 81       	ldd	r24, Y+2	; 0x02
    887c:	0e 94 63 33 	call	0x66c6	; 0x66c6 <udd_ep_free>
    8880:	f6 cf       	rjmp	.-20     	; 0x886e <udc_iface_disable+0x56>
    8882:	d7 01       	movw	r26, r14
    8884:	12 96       	adiw	r26, 0x02	; 2
    8886:	ed 91       	ld	r30, X+
    8888:	fc 91       	ld	r31, X
    888a:	13 97       	sbiw	r26, 0x03	; 3
    888c:	19 95       	eicall
    888e:	81 2f       	mov	r24, r17
    8890:	df 91       	pop	r29
    8892:	cf 91       	pop	r28
    8894:	1f 91       	pop	r17
    8896:	ff 90       	pop	r15
    8898:	ef 90       	pop	r14
    889a:	08 95       	ret

0000889c <udc_iface_enable>:
    889c:	1f 93       	push	r17
    889e:	cf 93       	push	r28
    88a0:	df 93       	push	r29
    88a2:	18 2f       	mov	r17, r24
    88a4:	7f df       	rcall	.-258    	; 0x87a4 <udc_update_iface_desc>
    88a6:	88 23       	and	r24, r24
    88a8:	41 f1       	breq	.+80     	; 0x88fa <udc_iface_enable+0x5e>
    88aa:	c0 91 e6 2a 	lds	r28, 0x2AE6	; 0x802ae6 <udc_ptr_iface>
    88ae:	d0 91 e7 2a 	lds	r29, 0x2AE7	; 0x802ae7 <udc_ptr_iface+0x1>
    88b2:	65 e0       	ldi	r22, 0x05	; 5
    88b4:	ce 01       	movw	r24, r28
    88b6:	3b df       	rcall	.-394    	; 0x872e <udc_next_desc_in_iface>
    88b8:	ec 01       	movw	r28, r24
    88ba:	89 2b       	or	r24, r25
    88bc:	49 f0       	breq	.+18     	; 0x88d0 <udc_iface_enable+0x34>
    88be:	4c 81       	ldd	r20, Y+4	; 0x04
    88c0:	5d 81       	ldd	r21, Y+5	; 0x05
    88c2:	6b 81       	ldd	r22, Y+3	; 0x03
    88c4:	8a 81       	ldd	r24, Y+2	; 0x02
    88c6:	0e 94 6f 31 	call	0x62de	; 0x62de <udd_ep_alloc>
    88ca:	81 11       	cpse	r24, r1
    88cc:	f2 cf       	rjmp	.-28     	; 0x88b2 <udc_iface_enable+0x16>
    88ce:	15 c0       	rjmp	.+42     	; 0x88fa <udc_iface_enable+0x5e>
    88d0:	a0 91 e8 2a 	lds	r26, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    88d4:	b0 91 e9 2a 	lds	r27, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    88d8:	e1 2f       	mov	r30, r17
    88da:	f0 e0       	ldi	r31, 0x00	; 0
    88dc:	ee 0f       	add	r30, r30
    88de:	ff 1f       	adc	r31, r31
    88e0:	12 96       	adiw	r26, 0x02	; 2
    88e2:	8d 91       	ld	r24, X+
    88e4:	9c 91       	ld	r25, X
    88e6:	13 97       	sbiw	r26, 0x03	; 3
    88e8:	e8 0f       	add	r30, r24
    88ea:	f9 1f       	adc	r31, r25
    88ec:	01 90       	ld	r0, Z+
    88ee:	f0 81       	ld	r31, Z
    88f0:	e0 2d       	mov	r30, r0
    88f2:	01 90       	ld	r0, Z+
    88f4:	f0 81       	ld	r31, Z
    88f6:	e0 2d       	mov	r30, r0
    88f8:	19 95       	eicall
    88fa:	df 91       	pop	r29
    88fc:	cf 91       	pop	r28
    88fe:	1f 91       	pop	r17
    8900:	08 95       	ret

00008902 <udc_start>:
    8902:	0c 94 d3 30 	jmp	0x61a6	; 0x61a6 <udd_enable>
    8906:	08 95       	ret

00008908 <udc_reset>:
    8908:	cf 93       	push	r28
    890a:	80 91 ea 2a 	lds	r24, 0x2AEA	; 0x802aea <udc_num_configuration>
    890e:	88 23       	and	r24, r24
    8910:	c1 f0       	breq	.+48     	; 0x8942 <udc_reset+0x3a>
    8912:	e0 91 e8 2a 	lds	r30, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    8916:	f0 91 e9 2a 	lds	r31, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    891a:	01 90       	ld	r0, Z+
    891c:	f0 81       	ld	r31, Z
    891e:	e0 2d       	mov	r30, r0
    8920:	84 81       	ldd	r24, Z+4	; 0x04
    8922:	88 23       	and	r24, r24
    8924:	71 f0       	breq	.+28     	; 0x8942 <udc_reset+0x3a>
    8926:	c0 e0       	ldi	r28, 0x00	; 0
    8928:	8c 2f       	mov	r24, r28
    892a:	76 df       	rcall	.-276    	; 0x8818 <udc_iface_disable>
    892c:	cf 5f       	subi	r28, 0xFF	; 255
    892e:	e0 91 e8 2a 	lds	r30, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    8932:	f0 91 e9 2a 	lds	r31, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    8936:	01 90       	ld	r0, Z+
    8938:	f0 81       	ld	r31, Z
    893a:	e0 2d       	mov	r30, r0
    893c:	84 81       	ldd	r24, Z+4	; 0x04
    893e:	c8 17       	cp	r28, r24
    8940:	98 f3       	brcs	.-26     	; 0x8928 <udc_reset+0x20>
    8942:	10 92 ea 2a 	sts	0x2AEA, r1	; 0x802aea <udc_num_configuration>
    8946:	80 91 ee 2a 	lds	r24, 0x2AEE	; 0x802aee <udc_device_status>
    894a:	81 fd       	sbrc	r24, 1
    894c:	0e 94 ff 39 	call	0x73fe	; 0x73fe <usb_callback_remotewakeup_disable>
    8950:	10 92 ee 2a 	sts	0x2AEE, r1	; 0x802aee <udc_device_status>
    8954:	10 92 ef 2a 	sts	0x2AEF, r1	; 0x802aef <udc_device_status+0x1>
    8958:	cf 91       	pop	r28
    895a:	08 95       	ret

0000895c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    895c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    895e:	80 91 ea 2a 	lds	r24, 0x2AEA	; 0x802aea <udc_num_configuration>
    8962:	88 23       	and	r24, r24
    8964:	49 f1       	breq	.+82     	; 0x89b8 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8966:	a0 91 e8 2a 	lds	r26, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    896a:	b0 91 e9 2a 	lds	r27, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    896e:	ed 91       	ld	r30, X+
    8970:	fc 91       	ld	r31, X
    8972:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    8974:	84 81       	ldd	r24, Z+4	; 0x04
    8976:	88 23       	and	r24, r24
    8978:	f9 f0       	breq	.+62     	; 0x89b8 <udc_sof_notify+0x5c>
    897a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    897c:	ec 2f       	mov	r30, r28
    897e:	f0 e0       	ldi	r31, 0x00	; 0
    8980:	ee 0f       	add	r30, r30
    8982:	ff 1f       	adc	r31, r31
    8984:	12 96       	adiw	r26, 0x02	; 2
    8986:	8d 91       	ld	r24, X+
    8988:	9c 91       	ld	r25, X
    898a:	13 97       	sbiw	r26, 0x03	; 3
    898c:	e8 0f       	add	r30, r24
    898e:	f9 1f       	adc	r31, r25
    8990:	01 90       	ld	r0, Z+
    8992:	f0 81       	ld	r31, Z
    8994:	e0 2d       	mov	r30, r0
    8996:	00 84       	ldd	r0, Z+8	; 0x08
    8998:	f1 85       	ldd	r31, Z+9	; 0x09
    899a:	e0 2d       	mov	r30, r0
    899c:	30 97       	sbiw	r30, 0x00	; 0
    899e:	09 f0       	breq	.+2      	; 0x89a2 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    89a0:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    89a2:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    89a4:	a0 91 e8 2a 	lds	r26, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    89a8:	b0 91 e9 2a 	lds	r27, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    89ac:	ed 91       	ld	r30, X+
    89ae:	fc 91       	ld	r31, X
    89b0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    89b2:	84 81       	ldd	r24, Z+4	; 0x04
    89b4:	c8 17       	cp	r28, r24
    89b6:	10 f3       	brcs	.-60     	; 0x897c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    89b8:	cf 91       	pop	r28
    89ba:	08 95       	ret

000089bc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    89bc:	0f 93       	push	r16
    89be:	1f 93       	push	r17
    89c0:	cf 93       	push	r28
    89c2:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    89c4:	ef ef       	ldi	r30, 0xFF	; 255
    89c6:	fa e2       	ldi	r31, 0x2A	; 42
    89c8:	12 86       	std	Z+10, r1	; 0x0a
    89ca:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    89cc:	14 86       	std	Z+12, r1	; 0x0c
    89ce:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    89d0:	16 86       	std	Z+14, r1	; 0x0e
    89d2:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    89d4:	80 81       	ld	r24, Z
    89d6:	88 23       	and	r24, r24
    89d8:	0c f0       	brlt	.+2      	; 0x89dc <udc_process_setup+0x20>
    89da:	95 c2       	rjmp	.+1322   	; 0x8f06 <udc_process_setup+0x54a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    89dc:	20 91 05 2b 	lds	r18, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    89e0:	30 91 06 2b 	lds	r19, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    89e4:	21 15       	cp	r18, r1
    89e6:	31 05       	cpc	r19, r1
    89e8:	09 f0       	breq	.+2      	; 0x89ec <udc_process_setup+0x30>
    89ea:	88 c2       	rjmp	.+1296   	; 0x8efc <udc_process_setup+0x540>
    89ec:	7f c2       	rjmp	.+1278   	; 0x8eec <udc_process_setup+0x530>
    89ee:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    89f0:	09 f0       	breq	.+2      	; 0x89f4 <udc_process_setup+0x38>
    89f2:	ab c0       	rjmp	.+342    	; 0x8b4a <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    89f4:	90 91 00 2b 	lds	r25, 0x2B00	; 0x802b00 <udd_g_ctrlreq+0x1>
    89f8:	96 30       	cpi	r25, 0x06	; 6
    89fa:	81 f0       	breq	.+32     	; 0x8a1c <udc_process_setup+0x60>
    89fc:	98 30       	cpi	r25, 0x08	; 8
    89fe:	09 f4       	brne	.+2      	; 0x8a02 <udc_process_setup+0x46>
    8a00:	99 c0       	rjmp	.+306    	; 0x8b34 <udc_process_setup+0x178>
    8a02:	91 11       	cpse	r25, r1
    8a04:	a2 c0       	rjmp	.+324    	; 0x8b4a <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    8a06:	22 30       	cpi	r18, 0x02	; 2
    8a08:	31 05       	cpc	r19, r1
    8a0a:	09 f0       	breq	.+2      	; 0x8a0e <udc_process_setup+0x52>
    8a0c:	2b c2       	rjmp	.+1110   	; 0x8e64 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    8a0e:	62 e0       	ldi	r22, 0x02	; 2
    8a10:	70 e0       	ldi	r23, 0x00	; 0
    8a12:	8e ee       	ldi	r24, 0xEE	; 238
    8a14:	9a e2       	ldi	r25, 0x2A	; 42
    8a16:	0e 94 68 31 	call	0x62d0	; 0x62d0 <udd_set_setup_payload>
    8a1a:	7e c2       	rjmp	.+1276   	; 0x8f18 <udc_process_setup+0x55c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    8a1c:	80 91 01 2b 	lds	r24, 0x2B01	; 0x802b01 <udd_g_ctrlreq+0x2>
    8a20:	90 91 02 2b 	lds	r25, 0x2B02	; 0x802b02 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    8a24:	29 2f       	mov	r18, r25
    8a26:	33 27       	eor	r19, r19
    8a28:	22 30       	cpi	r18, 0x02	; 2
    8a2a:	31 05       	cpc	r19, r1
    8a2c:	b1 f0       	breq	.+44     	; 0x8a5a <udc_process_setup+0x9e>
    8a2e:	20 f4       	brcc	.+8      	; 0x8a38 <udc_process_setup+0x7c>
    8a30:	21 30       	cpi	r18, 0x01	; 1
    8a32:	31 05       	cpc	r19, r1
    8a34:	41 f0       	breq	.+16     	; 0x8a46 <udc_process_setup+0x8a>
    8a36:	d8 c1       	rjmp	.+944    	; 0x8de8 <udc_process_setup+0x42c>
    8a38:	23 30       	cpi	r18, 0x03	; 3
    8a3a:	31 05       	cpc	r19, r1
    8a3c:	f1 f1       	breq	.+124    	; 0x8aba <udc_process_setup+0xfe>
    8a3e:	2f 30       	cpi	r18, 0x0F	; 15
    8a40:	31 05       	cpc	r19, r1
    8a42:	61 f1       	breq	.+88     	; 0x8a9c <udc_process_setup+0xe0>
    8a44:	d1 c1       	rjmp	.+930    	; 0x8de8 <udc_process_setup+0x42c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    8a46:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <udc_config>
    8a4a:	90 91 4e 20 	lds	r25, 0x204E	; 0x80204e <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    8a4e:	dc 01       	movw	r26, r24
    8a50:	6c 91       	ld	r22, X
    8a52:	70 e0       	ldi	r23, 0x00	; 0
    8a54:	0e 94 68 31 	call	0x62d0	; 0x62d0 <udd_set_setup_payload>
    8a58:	5e c0       	rjmp	.+188    	; 0x8b16 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    8a5a:	e0 91 4d 20 	lds	r30, 0x204D	; 0x80204d <udc_config>
    8a5e:	f0 91 4e 20 	lds	r31, 0x204E	; 0x80204e <udc_config+0x1>
    8a62:	21 89       	ldd	r18, Z+17	; 0x11
    8a64:	82 17       	cp	r24, r18
    8a66:	08 f0       	brcs	.+2      	; 0x8a6a <udc_process_setup+0xae>
    8a68:	fd c1       	rjmp	.+1018   	; 0x8e64 <udc_process_setup+0x4a8>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    8a6a:	99 27       	eor	r25, r25
    8a6c:	88 0f       	add	r24, r24
    8a6e:	99 1f       	adc	r25, r25
    8a70:	88 0f       	add	r24, r24
    8a72:	99 1f       	adc	r25, r25
    8a74:	e0 91 4f 20 	lds	r30, 0x204F	; 0x80204f <udc_config+0x2>
    8a78:	f0 91 50 20 	lds	r31, 0x2050	; 0x802050 <udc_config+0x3>
    8a7c:	e8 0f       	add	r30, r24
    8a7e:	f9 1f       	adc	r31, r25
    8a80:	80 81       	ld	r24, Z
    8a82:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    8a84:	fc 01       	movw	r30, r24
    8a86:	62 81       	ldd	r22, Z+2	; 0x02
    8a88:	73 81       	ldd	r23, Z+3	; 0x03
    8a8a:	0e 94 68 31 	call	0x62d0	; 0x62d0 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    8a8e:	e0 91 07 2b 	lds	r30, 0x2B07	; 0x802b07 <udd_g_ctrlreq+0x8>
    8a92:	f0 91 08 2b 	lds	r31, 0x2B08	; 0x802b08 <udd_g_ctrlreq+0x9>
    8a96:	82 e0       	ldi	r24, 0x02	; 2
    8a98:	81 83       	std	Z+1, r24	; 0x01
    8a9a:	3d c0       	rjmp	.+122    	; 0x8b16 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    8a9c:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <udc_config+0x4>
    8aa0:	90 91 52 20 	lds	r25, 0x2052	; 0x802052 <udc_config+0x5>
    8aa4:	00 97       	sbiw	r24, 0x00	; 0
    8aa6:	09 f4       	brne	.+2      	; 0x8aaa <udc_process_setup+0xee>
    8aa8:	dd c1       	rjmp	.+954    	; 0x8e64 <udc_process_setup+0x4a8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    8aaa:	dc 01       	movw	r26, r24
    8aac:	12 96       	adiw	r26, 0x02	; 2
    8aae:	6d 91       	ld	r22, X+
    8ab0:	7c 91       	ld	r23, X
    8ab2:	13 97       	sbiw	r26, 0x03	; 3
    8ab4:	0e 94 68 31 	call	0x62d0	; 0x62d0 <udd_set_setup_payload>
    8ab8:	2e c0       	rjmp	.+92     	; 0x8b16 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    8aba:	99 27       	eor	r25, r25
    8abc:	81 30       	cpi	r24, 0x01	; 1
    8abe:	91 05       	cpc	r25, r1
    8ac0:	99 f0       	breq	.+38     	; 0x8ae8 <udc_process_setup+0x12c>
    8ac2:	58 f0       	brcs	.+22     	; 0x8ada <udc_process_setup+0x11e>
    8ac4:	82 30       	cpi	r24, 0x02	; 2
    8ac6:	91 05       	cpc	r25, r1
    8ac8:	09 f4       	brne	.+2      	; 0x8acc <udc_process_setup+0x110>
    8aca:	22 c2       	rjmp	.+1092   	; 0x8f10 <udc_process_setup+0x554>
    8acc:	03 97       	sbiw	r24, 0x03	; 3
    8ace:	09 f0       	breq	.+2      	; 0x8ad2 <udc_process_setup+0x116>
    8ad0:	94 c1       	rjmp	.+808    	; 0x8dfa <udc_process_setup+0x43e>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    8ad2:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    8ad4:	ea ee       	ldi	r30, 0xEA	; 234
    8ad6:	f6 e2       	ldi	r31, 0x26	; 38
    8ad8:	0a c0       	rjmp	.+20     	; 0x8aee <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    8ada:	64 e0       	ldi	r22, 0x04	; 4
    8adc:	70 e0       	ldi	r23, 0x00	; 0
    8ade:	82 ef       	ldi	r24, 0xF2	; 242
    8ae0:	90 e2       	ldi	r25, 0x20	; 32
    8ae2:	0e 94 68 31 	call	0x62d0	; 0x62d0 <udd_set_setup_payload>
    8ae6:	17 c0       	rjmp	.+46     	; 0x8b16 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    8ae8:	e1 ee       	ldi	r30, 0xE1	; 225
    8aea:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    8aec:	30 e1       	ldi	r19, 0x10	; 16
    8aee:	a4 eb       	ldi	r26, 0xB4	; 180
    8af0:	b0 e2       	ldi	r27, 0x20	; 32
    8af2:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    8af4:	81 91       	ld	r24, Z+
    8af6:	90 e0       	ldi	r25, 0x00	; 0
    8af8:	8d 93       	st	X+, r24
    8afa:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    8afc:	2f 5f       	subi	r18, 0xFF	; 255
    8afe:	23 17       	cp	r18, r19
    8b00:	c8 f3       	brcs	.-14     	; 0x8af4 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    8b02:	63 2f       	mov	r22, r19
    8b04:	66 0f       	add	r22, r22
    8b06:	6e 5f       	subi	r22, 0xFE	; 254
    8b08:	60 93 b2 20 	sts	0x20B2, r22	; 0x8020b2 <udc_string_desc>
		udd_set_setup_payload(
    8b0c:	70 e0       	ldi	r23, 0x00	; 0
    8b0e:	82 eb       	ldi	r24, 0xB2	; 178
    8b10:	90 e2       	ldi	r25, 0x20	; 32
    8b12:	0e 94 68 31 	call	0x62d0	; 0x62d0 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    8b16:	ef ef       	ldi	r30, 0xFF	; 255
    8b18:	fa e2       	ldi	r31, 0x2A	; 42
    8b1a:	86 81       	ldd	r24, Z+6	; 0x06
    8b1c:	97 81       	ldd	r25, Z+7	; 0x07
    8b1e:	22 85       	ldd	r18, Z+10	; 0x0a
    8b20:	33 85       	ldd	r19, Z+11	; 0x0b
    8b22:	82 17       	cp	r24, r18
    8b24:	93 07       	cpc	r25, r19
    8b26:	08 f0       	brcs	.+2      	; 0x8b2a <udc_process_setup+0x16e>
    8b28:	f7 c1       	rjmp	.+1006   	; 0x8f18 <udc_process_setup+0x55c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    8b2a:	80 93 09 2b 	sts	0x2B09, r24	; 0x802b09 <udd_g_ctrlreq+0xa>
    8b2e:	90 93 0a 2b 	sts	0x2B0A, r25	; 0x802b0a <udd_g_ctrlreq+0xb>
    8b32:	f2 c1       	rjmp	.+996    	; 0x8f18 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    8b34:	21 30       	cpi	r18, 0x01	; 1
    8b36:	31 05       	cpc	r19, r1
    8b38:	09 f0       	breq	.+2      	; 0x8b3c <udc_process_setup+0x180>
    8b3a:	94 c1       	rjmp	.+808    	; 0x8e64 <udc_process_setup+0x4a8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    8b3c:	61 e0       	ldi	r22, 0x01	; 1
    8b3e:	70 e0       	ldi	r23, 0x00	; 0
    8b40:	8a ee       	ldi	r24, 0xEA	; 234
    8b42:	9a e2       	ldi	r25, 0x2A	; 42
    8b44:	0e 94 68 31 	call	0x62d0	; 0x62d0 <udd_set_setup_payload>
    8b48:	e7 c1       	rjmp	.+974    	; 0x8f18 <udc_process_setup+0x55c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    8b4a:	81 30       	cpi	r24, 0x01	; 1
    8b4c:	e9 f5       	brne	.+122    	; 0x8bc8 <udc_process_setup+0x20c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    8b4e:	90 91 00 2b 	lds	r25, 0x2B00	; 0x802b00 <udd_g_ctrlreq+0x1>
    8b52:	9a 30       	cpi	r25, 0x0A	; 10
    8b54:	c9 f5       	brne	.+114    	; 0x8bc8 <udc_process_setup+0x20c>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    8b56:	21 30       	cpi	r18, 0x01	; 1
    8b58:	31 05       	cpc	r19, r1
    8b5a:	09 f0       	breq	.+2      	; 0x8b5e <udc_process_setup+0x1a2>
    8b5c:	53 c1       	rjmp	.+678    	; 0x8e04 <udc_process_setup+0x448>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    8b5e:	80 91 ea 2a 	lds	r24, 0x2AEA	; 0x802aea <udc_num_configuration>
    8b62:	88 23       	and	r24, r24
    8b64:	09 f4       	brne	.+2      	; 0x8b68 <udc_process_setup+0x1ac>
    8b66:	4e c1       	rjmp	.+668    	; 0x8e04 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    8b68:	c0 91 03 2b 	lds	r28, 0x2B03	; 0x802b03 <udd_g_ctrlreq+0x4>
    8b6c:	d0 91 04 2b 	lds	r29, 0x2B04	; 0x802b04 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    8b70:	00 91 e8 2a 	lds	r16, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    8b74:	10 91 e9 2a 	lds	r17, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    8b78:	d8 01       	movw	r26, r16
    8b7a:	ed 91       	ld	r30, X+
    8b7c:	fc 91       	ld	r31, X
    8b7e:	84 81       	ldd	r24, Z+4	; 0x04
    8b80:	c8 17       	cp	r28, r24
    8b82:	08 f0       	brcs	.+2      	; 0x8b86 <udc_process_setup+0x1ca>
    8b84:	3f c1       	rjmp	.+638    	; 0x8e04 <udc_process_setup+0x448>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    8b86:	60 e0       	ldi	r22, 0x00	; 0
    8b88:	8c 2f       	mov	r24, r28
    8b8a:	0c de       	rcall	.-1000   	; 0x87a4 <udc_update_iface_desc>
    8b8c:	88 23       	and	r24, r24
    8b8e:	09 f4       	brne	.+2      	; 0x8b92 <udc_process_setup+0x1d6>
    8b90:	34 c1       	rjmp	.+616    	; 0x8dfa <udc_process_setup+0x43e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    8b92:	ce 01       	movw	r24, r28
    8b94:	99 27       	eor	r25, r25
    8b96:	88 0f       	add	r24, r24
    8b98:	99 1f       	adc	r25, r25
    8b9a:	d8 01       	movw	r26, r16
    8b9c:	12 96       	adiw	r26, 0x02	; 2
    8b9e:	ed 91       	ld	r30, X+
    8ba0:	fc 91       	ld	r31, X
    8ba2:	13 97       	sbiw	r26, 0x03	; 3
    8ba4:	e8 0f       	add	r30, r24
    8ba6:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    8ba8:	01 90       	ld	r0, Z+
    8baa:	f0 81       	ld	r31, Z
    8bac:	e0 2d       	mov	r30, r0
    8bae:	86 81       	ldd	r24, Z+6	; 0x06
    8bb0:	97 81       	ldd	r25, Z+7	; 0x07
    8bb2:	fc 01       	movw	r30, r24
    8bb4:	19 95       	eicall
    8bb6:	80 93 ec 2a 	sts	0x2AEC, r24	; 0x802aec <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    8bba:	61 e0       	ldi	r22, 0x01	; 1
    8bbc:	70 e0       	ldi	r23, 0x00	; 0
    8bbe:	8c ee       	ldi	r24, 0xEC	; 236
    8bc0:	9a e2       	ldi	r25, 0x2A	; 42
    8bc2:	0e 94 68 31 	call	0x62d0	; 0x62d0 <udd_set_setup_payload>
    8bc6:	a8 c1       	rjmp	.+848    	; 0x8f18 <udc_process_setup+0x55c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    8bc8:	82 30       	cpi	r24, 0x02	; 2
    8bca:	09 f0       	breq	.+2      	; 0x8bce <udc_process_setup+0x212>
    8bcc:	16 c1       	rjmp	.+556    	; 0x8dfa <udc_process_setup+0x43e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    8bce:	80 91 00 2b 	lds	r24, 0x2B00	; 0x802b00 <udd_g_ctrlreq+0x1>
    8bd2:	81 11       	cpse	r24, r1
    8bd4:	0b c1       	rjmp	.+534    	; 0x8dec <udc_process_setup+0x430>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    8bd6:	22 30       	cpi	r18, 0x02	; 2
    8bd8:	31 05       	cpc	r19, r1
    8bda:	09 f0       	breq	.+2      	; 0x8bde <udc_process_setup+0x222>
    8bdc:	43 c1       	rjmp	.+646    	; 0x8e64 <udc_process_setup+0x4a8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    8bde:	80 91 03 2b 	lds	r24, 0x2B03	; 0x802b03 <udd_g_ctrlreq+0x4>
    8be2:	0e 94 f7 31 	call	0x63ee	; 0x63ee <udd_ep_is_halted>
    8be6:	90 e0       	ldi	r25, 0x00	; 0
    8be8:	80 93 e4 2a 	sts	0x2AE4, r24	; 0x802ae4 <udc_ep_status.4757>
    8bec:	90 93 e5 2a 	sts	0x2AE5, r25	; 0x802ae5 <udc_ep_status.4757+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    8bf0:	62 e0       	ldi	r22, 0x02	; 2
    8bf2:	70 e0       	ldi	r23, 0x00	; 0
    8bf4:	84 ee       	ldi	r24, 0xE4	; 228
    8bf6:	9a e2       	ldi	r25, 0x2A	; 42
    8bf8:	0e 94 68 31 	call	0x62d0	; 0x62d0 <udd_set_setup_payload>
    8bfc:	8d c1       	rjmp	.+794    	; 0x8f18 <udc_process_setup+0x55c>
    8bfe:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    8c00:	09 f0       	breq	.+2      	; 0x8c04 <udc_process_setup+0x248>
    8c02:	a0 c0       	rjmp	.+320    	; 0x8d44 <udc_process_setup+0x388>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    8c04:	90 91 00 2b 	lds	r25, 0x2B00	; 0x802b00 <udd_g_ctrlreq+0x1>
    8c08:	93 30       	cpi	r25, 0x03	; 3
    8c0a:	91 f1       	breq	.+100    	; 0x8c70 <udc_process_setup+0x2b4>
    8c0c:	18 f4       	brcc	.+6      	; 0x8c14 <udc_process_setup+0x258>
    8c0e:	91 30       	cpi	r25, 0x01	; 1
    8c10:	a9 f0       	breq	.+42     	; 0x8c3c <udc_process_setup+0x280>
    8c12:	98 c0       	rjmp	.+304    	; 0x8d44 <udc_process_setup+0x388>
    8c14:	95 30       	cpi	r25, 0x05	; 5
    8c16:	21 f0       	breq	.+8      	; 0x8c20 <udc_process_setup+0x264>
    8c18:	99 30       	cpi	r25, 0x09	; 9
    8c1a:	09 f4       	brne	.+2      	; 0x8c1e <udc_process_setup+0x262>
    8c1c:	43 c0       	rjmp	.+134    	; 0x8ca4 <udc_process_setup+0x2e8>
    8c1e:	92 c0       	rjmp	.+292    	; 0x8d44 <udc_process_setup+0x388>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    8c20:	80 91 05 2b 	lds	r24, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    8c24:	90 91 06 2b 	lds	r25, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    8c28:	89 2b       	or	r24, r25
    8c2a:	09 f0       	breq	.+2      	; 0x8c2e <udc_process_setup+0x272>
    8c2c:	1b c1       	rjmp	.+566    	; 0x8e64 <udc_process_setup+0x4a8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    8c2e:	8c ec       	ldi	r24, 0xCC	; 204
    8c30:	93 e4       	ldi	r25, 0x43	; 67
    8c32:	80 93 0b 2b 	sts	0x2B0B, r24	; 0x802b0b <udd_g_ctrlreq+0xc>
    8c36:	90 93 0c 2b 	sts	0x2B0C, r25	; 0x802b0c <udd_g_ctrlreq+0xd>
    8c3a:	6e c1       	rjmp	.+732    	; 0x8f18 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    8c3c:	80 91 05 2b 	lds	r24, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    8c40:	90 91 06 2b 	lds	r25, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    8c44:	89 2b       	or	r24, r25
    8c46:	09 f0       	breq	.+2      	; 0x8c4a <udc_process_setup+0x28e>
    8c48:	0d c1       	rjmp	.+538    	; 0x8e64 <udc_process_setup+0x4a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    8c4a:	80 91 01 2b 	lds	r24, 0x2B01	; 0x802b01 <udd_g_ctrlreq+0x2>
    8c4e:	90 91 02 2b 	lds	r25, 0x2B02	; 0x802b02 <udd_g_ctrlreq+0x3>
    8c52:	01 97       	sbiw	r24, 0x01	; 1
    8c54:	09 f0       	breq	.+2      	; 0x8c58 <udc_process_setup+0x29c>
    8c56:	06 c1       	rjmp	.+524    	; 0x8e64 <udc_process_setup+0x4a8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    8c58:	80 91 ee 2a 	lds	r24, 0x2AEE	; 0x802aee <udc_device_status>
    8c5c:	90 91 ef 2a 	lds	r25, 0x2AEF	; 0x802aef <udc_device_status+0x1>
    8c60:	8d 7f       	andi	r24, 0xFD	; 253
    8c62:	80 93 ee 2a 	sts	0x2AEE, r24	; 0x802aee <udc_device_status>
    8c66:	90 93 ef 2a 	sts	0x2AEF, r25	; 0x802aef <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    8c6a:	0e 94 ff 39 	call	0x73fe	; 0x73fe <usb_callback_remotewakeup_disable>
    8c6e:	54 c1       	rjmp	.+680    	; 0x8f18 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    8c70:	80 91 05 2b 	lds	r24, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    8c74:	90 91 06 2b 	lds	r25, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    8c78:	89 2b       	or	r24, r25
    8c7a:	09 f0       	breq	.+2      	; 0x8c7e <udc_process_setup+0x2c2>
    8c7c:	f3 c0       	rjmp	.+486    	; 0x8e64 <udc_process_setup+0x4a8>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    8c7e:	80 91 01 2b 	lds	r24, 0x2B01	; 0x802b01 <udd_g_ctrlreq+0x2>
    8c82:	90 91 02 2b 	lds	r25, 0x2B02	; 0x802b02 <udd_g_ctrlreq+0x3>
    8c86:	01 97       	sbiw	r24, 0x01	; 1
    8c88:	09 f0       	breq	.+2      	; 0x8c8c <udc_process_setup+0x2d0>
    8c8a:	b2 c0       	rjmp	.+356    	; 0x8df0 <udc_process_setup+0x434>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    8c8c:	80 91 ee 2a 	lds	r24, 0x2AEE	; 0x802aee <udc_device_status>
    8c90:	90 91 ef 2a 	lds	r25, 0x2AEF	; 0x802aef <udc_device_status+0x1>
    8c94:	82 60       	ori	r24, 0x02	; 2
    8c96:	80 93 ee 2a 	sts	0x2AEE, r24	; 0x802aee <udc_device_status>
    8c9a:	90 93 ef 2a 	sts	0x2AEF, r25	; 0x802aef <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    8c9e:	0e 94 fe 39 	call	0x73fc	; 0x73fc <usb_callback_remotewakeup_enable>
    8ca2:	3a c1       	rjmp	.+628    	; 0x8f18 <udc_process_setup+0x55c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    8ca4:	80 91 05 2b 	lds	r24, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    8ca8:	90 91 06 2b 	lds	r25, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    8cac:	89 2b       	or	r24, r25
    8cae:	09 f0       	breq	.+2      	; 0x8cb2 <udc_process_setup+0x2f6>
    8cb0:	d9 c0       	rjmp	.+434    	; 0x8e64 <udc_process_setup+0x4a8>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    8cb2:	0e 94 5d 31 	call	0x62ba	; 0x62ba <udd_getaddress>
    8cb6:	88 23       	and	r24, r24
    8cb8:	09 f4       	brne	.+2      	; 0x8cbc <udc_process_setup+0x300>
    8cba:	9f c0       	rjmp	.+318    	; 0x8dfa <udc_process_setup+0x43e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    8cbc:	20 91 01 2b 	lds	r18, 0x2B01	; 0x802b01 <udd_g_ctrlreq+0x2>
    8cc0:	30 91 02 2b 	lds	r19, 0x2B02	; 0x802b02 <udd_g_ctrlreq+0x3>
    8cc4:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    8cc6:	e0 91 4d 20 	lds	r30, 0x204D	; 0x80204d <udc_config>
    8cca:	f0 91 4e 20 	lds	r31, 0x204E	; 0x80204e <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    8cce:	81 89       	ldd	r24, Z+17	; 0x11
    8cd0:	90 e0       	ldi	r25, 0x00	; 0
    8cd2:	82 17       	cp	r24, r18
    8cd4:	93 07       	cpc	r25, r19
    8cd6:	08 f4       	brcc	.+2      	; 0x8cda <udc_process_setup+0x31e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    8cd8:	90 c0       	rjmp	.+288    	; 0x8dfa <udc_process_setup+0x43e>
    8cda:	16 de       	rcall	.-980    	; 0x8908 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    8cdc:	80 91 01 2b 	lds	r24, 0x2B01	; 0x802b01 <udd_g_ctrlreq+0x2>
    8ce0:	90 91 02 2b 	lds	r25, 0x2B02	; 0x802b02 <udd_g_ctrlreq+0x3>
    8ce4:	80 93 ea 2a 	sts	0x2AEA, r24	; 0x802aea <udc_num_configuration>
	if (udc_num_configuration == 0) {
    8ce8:	88 23       	and	r24, r24
    8cea:	09 f4       	brne	.+2      	; 0x8cee <udc_process_setup+0x332>
    8cec:	15 c1       	rjmp	.+554    	; 0x8f18 <udc_process_setup+0x55c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    8cee:	99 27       	eor	r25, r25
    8cf0:	81 50       	subi	r24, 0x01	; 1
    8cf2:	90 4c       	sbci	r25, 0xC0	; 192
    8cf4:	88 0f       	add	r24, r24
    8cf6:	99 1f       	adc	r25, r25
    8cf8:	88 0f       	add	r24, r24
    8cfa:	99 1f       	adc	r25, r25
    8cfc:	e0 91 4f 20 	lds	r30, 0x204F	; 0x80204f <udc_config+0x2>
    8d00:	f0 91 50 20 	lds	r31, 0x2050	; 0x802050 <udc_config+0x3>
    8d04:	e8 0f       	add	r30, r24
    8d06:	f9 1f       	adc	r31, r25
    8d08:	e0 93 e8 2a 	sts	0x2AE8, r30	; 0x802ae8 <udc_ptr_conf>
    8d0c:	f0 93 e9 2a 	sts	0x2AE9, r31	; 0x802ae9 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8d10:	01 90       	ld	r0, Z+
    8d12:	f0 81       	ld	r31, Z
    8d14:	e0 2d       	mov	r30, r0
    8d16:	84 81       	ldd	r24, Z+4	; 0x04
    8d18:	88 23       	and	r24, r24
    8d1a:	09 f4       	brne	.+2      	; 0x8d1e <udc_process_setup+0x362>
    8d1c:	fd c0       	rjmp	.+506    	; 0x8f18 <udc_process_setup+0x55c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    8d1e:	c0 e0       	ldi	r28, 0x00	; 0
    8d20:	60 e0       	ldi	r22, 0x00	; 0
    8d22:	8c 2f       	mov	r24, r28
    8d24:	bb dd       	rcall	.-1162   	; 0x889c <udc_iface_enable>
    8d26:	88 23       	and	r24, r24
    8d28:	09 f4       	brne	.+2      	; 0x8d2c <udc_process_setup+0x370>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    8d2a:	67 c0       	rjmp	.+206    	; 0x8dfa <udc_process_setup+0x43e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8d2c:	cf 5f       	subi	r28, 0xFF	; 255
    8d2e:	e0 91 e8 2a 	lds	r30, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    8d32:	f0 91 e9 2a 	lds	r31, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    8d36:	01 90       	ld	r0, Z+
    8d38:	f0 81       	ld	r31, Z
    8d3a:	e0 2d       	mov	r30, r0
    8d3c:	84 81       	ldd	r24, Z+4	; 0x04
    8d3e:	c8 17       	cp	r28, r24
    8d40:	78 f3       	brcs	.-34     	; 0x8d20 <udc_process_setup+0x364>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    8d42:	ea c0       	rjmp	.+468    	; 0x8f18 <udc_process_setup+0x55c>
    8d44:	81 30       	cpi	r24, 0x01	; 1
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    8d46:	e9 f4       	brne	.+58     	; 0x8d82 <udc_process_setup+0x3c6>
    8d48:	90 91 00 2b 	lds	r25, 0x2B00	; 0x802b00 <udd_g_ctrlreq+0x1>
    8d4c:	9b 30       	cpi	r25, 0x0B	; 11
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    8d4e:	c9 f4       	brne	.+50     	; 0x8d82 <udc_process_setup+0x3c6>
    8d50:	80 91 05 2b 	lds	r24, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    8d54:	90 91 06 2b 	lds	r25, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    8d58:	89 2b       	or	r24, r25
    8d5a:	09 f0       	breq	.+2      	; 0x8d5e <udc_process_setup+0x3a2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    8d5c:	53 c0       	rjmp	.+166    	; 0x8e04 <udc_process_setup+0x448>
    8d5e:	80 91 ea 2a 	lds	r24, 0x2AEA	; 0x802aea <udc_num_configuration>
    8d62:	88 23       	and	r24, r24
    8d64:	09 f4       	brne	.+2      	; 0x8d68 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    8d66:	4e c0       	rjmp	.+156    	; 0x8e04 <udc_process_setup+0x448>
    8d68:	ef ef       	ldi	r30, 0xFF	; 255
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    8d6a:	fa e2       	ldi	r31, 0x2A	; 42

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    8d6c:	c4 81       	ldd	r28, Z+4	; 0x04
    8d6e:	d2 81       	ldd	r29, Z+2	; 0x02
    8d70:	8c 2f       	mov	r24, r28
    8d72:	52 dd       	rcall	.-1372   	; 0x8818 <udc_iface_disable>
    8d74:	88 23       	and	r24, r24
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    8d76:	09 f4       	brne	.+2      	; 0x8d7a <udc_process_setup+0x3be>
    8d78:	40 c0       	rjmp	.+128    	; 0x8dfa <udc_process_setup+0x43e>
    8d7a:	6d 2f       	mov	r22, r29
    8d7c:	8c 2f       	mov	r24, r28
    8d7e:	8e dd       	rcall	.-1252   	; 0x889c <udc_iface_enable>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    8d80:	3a c0       	rjmp	.+116    	; 0x8df6 <udc_process_setup+0x43a>
    8d82:	82 30       	cpi	r24, 0x02	; 2
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    8d84:	d1 f5       	brne	.+116    	; 0x8dfa <udc_process_setup+0x43e>
    8d86:	80 91 00 2b 	lds	r24, 0x2B00	; 0x802b00 <udd_g_ctrlreq+0x1>
    8d8a:	81 30       	cpi	r24, 0x01	; 1
    8d8c:	19 f0       	breq	.+6      	; 0x8d94 <udc_process_setup+0x3d8>
    8d8e:	83 30       	cpi	r24, 0x03	; 3
    8d90:	a1 f0       	breq	.+40     	; 0x8dba <udc_process_setup+0x3fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    8d92:	30 c0       	rjmp	.+96     	; 0x8df4 <udc_process_setup+0x438>
    8d94:	80 91 05 2b 	lds	r24, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    8d98:	90 91 06 2b 	lds	r25, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    8d9c:	89 2b       	or	r24, r25
    8d9e:	09 f0       	breq	.+2      	; 0x8da2 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    8da0:	61 c0       	rjmp	.+194    	; 0x8e64 <udc_process_setup+0x4a8>
    8da2:	80 91 01 2b 	lds	r24, 0x2B01	; 0x802b01 <udd_g_ctrlreq+0x2>
    8da6:	90 91 02 2b 	lds	r25, 0x2B02	; 0x802b02 <udd_g_ctrlreq+0x3>
    8daa:	89 2b       	or	r24, r25
    8dac:	09 f0       	breq	.+2      	; 0x8db0 <udc_process_setup+0x3f4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    8dae:	5a c0       	rjmp	.+180    	; 0x8e64 <udc_process_setup+0x4a8>
    8db0:	80 91 03 2b 	lds	r24, 0x2B03	; 0x802b03 <udd_g_ctrlreq+0x4>
    8db4:	0e 94 12 32 	call	0x6424	; 0x6424 <udd_ep_clear_halt>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    8db8:	1e c0       	rjmp	.+60     	; 0x8df6 <udc_process_setup+0x43a>
    8dba:	80 91 05 2b 	lds	r24, 0x2B05	; 0x802b05 <udd_g_ctrlreq+0x6>
    8dbe:	90 91 06 2b 	lds	r25, 0x2B06	; 0x802b06 <udd_g_ctrlreq+0x7>
    8dc2:	89 2b       	or	r24, r25
    8dc4:	09 f0       	breq	.+2      	; 0x8dc8 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    8dc6:	4e c0       	rjmp	.+156    	; 0x8e64 <udc_process_setup+0x4a8>
    8dc8:	80 91 01 2b 	lds	r24, 0x2B01	; 0x802b01 <udd_g_ctrlreq+0x2>
    8dcc:	90 91 02 2b 	lds	r25, 0x2B02	; 0x802b02 <udd_g_ctrlreq+0x3>
    8dd0:	89 2b       	or	r24, r25
    8dd2:	09 f0       	breq	.+2      	; 0x8dd6 <udc_process_setup+0x41a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    8dd4:	47 c0       	rjmp	.+142    	; 0x8e64 <udc_process_setup+0x4a8>
    8dd6:	cf ef       	ldi	r28, 0xFF	; 255
    8dd8:	da e2       	ldi	r29, 0x2A	; 42
    8dda:	8c 81       	ldd	r24, Y+4	; 0x04
    8ddc:	0e 94 14 33 	call	0x6628	; 0x6628 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    8de0:	8c 81       	ldd	r24, Y+4	; 0x04
    8de2:	0e 94 7f 33 	call	0x66fe	; 0x66fe <udd_ep_set_halt>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    8de6:	07 c0       	rjmp	.+14     	; 0x8df6 <udc_process_setup+0x43a>
    8de8:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    8dea:	05 c0       	rjmp	.+10     	; 0x8df6 <udc_process_setup+0x43a>
    8dec:	80 e0       	ldi	r24, 0x00	; 0
		break;
#endif
	default:
		break;
	}
	return false;
    8dee:	03 c0       	rjmp	.+6      	; 0x8df6 <udc_process_setup+0x43a>
    8df0:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    8df2:	01 c0       	rjmp	.+2      	; 0x8df6 <udc_process_setup+0x43a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    8df4:	80 e0       	ldi	r24, 0x00	; 0
    8df6:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    8df8:	90 c0       	rjmp	.+288    	; 0x8f1a <udc_process_setup+0x55e>
    8dfa:	80 91 ff 2a 	lds	r24, 0x2AFF	; 0x802aff <udd_g_ctrlreq>
    8dfe:	8f 71       	andi	r24, 0x1F	; 31
    8e00:	81 30       	cpi	r24, 0x01	; 1
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    8e02:	81 f5       	brne	.+96     	; 0x8e64 <udc_process_setup+0x4a8>
    8e04:	80 91 ea 2a 	lds	r24, 0x2AEA	; 0x802aea <udc_num_configuration>
    8e08:	88 23       	and	r24, r24
    8e0a:	09 f4       	brne	.+2      	; 0x8e0e <udc_process_setup+0x452>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    8e0c:	71 c0       	rjmp	.+226    	; 0x8ef0 <udc_process_setup+0x534>
    8e0e:	00 91 03 2b 	lds	r16, 0x2B03	; 0x802b03 <udd_g_ctrlreq+0x4>
    8e12:	10 91 04 2b 	lds	r17, 0x2B04	; 0x802b04 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    8e16:	c0 91 e8 2a 	lds	r28, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    8e1a:	d0 91 e9 2a 	lds	r29, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    8e1e:	e8 81       	ld	r30, Y
    8e20:	f9 81       	ldd	r31, Y+1	; 0x01
    8e22:	84 81       	ldd	r24, Z+4	; 0x04
    8e24:	08 17       	cp	r16, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    8e26:	08 f0       	brcs	.+2      	; 0x8e2a <udc_process_setup+0x46e>
    8e28:	65 c0       	rjmp	.+202    	; 0x8ef4 <udc_process_setup+0x538>
    8e2a:	60 e0       	ldi	r22, 0x00	; 0
    8e2c:	80 2f       	mov	r24, r16
    8e2e:	ba dc       	rcall	.-1676   	; 0x87a4 <udc_update_iface_desc>
    8e30:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    8e32:	c1 f0       	breq	.+48     	; 0x8e64 <udc_process_setup+0x4a8>
    8e34:	f8 01       	movw	r30, r16
    8e36:	ff 27       	eor	r31, r31
    8e38:	cf 01       	movw	r24, r30
    8e3a:	88 0f       	add	r24, r24
    8e3c:	99 1f       	adc	r25, r25
    8e3e:	ea 81       	ldd	r30, Y+2	; 0x02
    8e40:	fb 81       	ldd	r31, Y+3	; 0x03
    8e42:	e8 0f       	add	r30, r24
    8e44:	f9 1f       	adc	r31, r25
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    8e46:	c0 81       	ld	r28, Z
    8e48:	d1 81       	ldd	r29, Z+1	; 0x01
    8e4a:	ee 81       	ldd	r30, Y+6	; 0x06
    8e4c:	ff 81       	ldd	r31, Y+7	; 0x07
    8e4e:	19 95       	eicall
    8e50:	68 2f       	mov	r22, r24
    8e52:	80 2f       	mov	r24, r16
    8e54:	a7 dc       	rcall	.-1714   	; 0x87a4 <udc_update_iface_desc>
    8e56:	88 23       	and	r24, r24
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    8e58:	29 f0       	breq	.+10     	; 0x8e64 <udc_process_setup+0x4a8>
    8e5a:	ec 81       	ldd	r30, Y+4	; 0x04
    8e5c:	fd 81       	ldd	r31, Y+5	; 0x05
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    8e5e:	19 95       	eicall
    8e60:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    8e62:	5b c0       	rjmp	.+182    	; 0x8f1a <udc_process_setup+0x55e>
    8e64:	80 91 ff 2a 	lds	r24, 0x2AFF	; 0x802aff <udd_g_ctrlreq>
    8e68:	8f 71       	andi	r24, 0x1F	; 31
    8e6a:	82 30       	cpi	r24, 0x02	; 2
    8e6c:	09 f0       	breq	.+2      	; 0x8e70 <udc_process_setup+0x4b4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    8e6e:	44 c0       	rjmp	.+136    	; 0x8ef8 <udc_process_setup+0x53c>
    8e70:	80 91 ea 2a 	lds	r24, 0x2AEA	; 0x802aea <udc_num_configuration>
    8e74:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8e76:	b1 f1       	breq	.+108    	; 0x8ee4 <udc_process_setup+0x528>
    8e78:	a0 91 e8 2a 	lds	r26, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    8e7c:	b0 91 e9 2a 	lds	r27, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    8e80:	ed 91       	ld	r30, X+
    8e82:	fc 91       	ld	r31, X
    8e84:	11 97       	sbiw	r26, 0x01	; 1
    8e86:	84 81       	ldd	r24, Z+4	; 0x04
    8e88:	88 23       	and	r24, r24
    8e8a:	71 f1       	breq	.+92     	; 0x8ee8 <udc_process_setup+0x52c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    8e8c:	c0 e0       	ldi	r28, 0x00	; 0
    8e8e:	ec 2f       	mov	r30, r28
    8e90:	f0 e0       	ldi	r31, 0x00	; 0
    8e92:	ee 0f       	add	r30, r30
    8e94:	ff 1f       	adc	r31, r31
    8e96:	12 96       	adiw	r26, 0x02	; 2
    8e98:	8d 91       	ld	r24, X+
    8e9a:	9c 91       	ld	r25, X
    8e9c:	13 97       	sbiw	r26, 0x03	; 3
    8e9e:	e8 0f       	add	r30, r24
    8ea0:	f9 1f       	adc	r31, r25
    8ea2:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    8ea4:	11 81       	ldd	r17, Z+1	; 0x01
    8ea6:	d8 01       	movw	r26, r16
    8ea8:	16 96       	adiw	r26, 0x06	; 6
    8eaa:	ed 91       	ld	r30, X+
    8eac:	fc 91       	ld	r31, X
    8eae:	17 97       	sbiw	r26, 0x07	; 7
    8eb0:	19 95       	eicall
    8eb2:	68 2f       	mov	r22, r24
    8eb4:	8c 2f       	mov	r24, r28
    8eb6:	76 dc       	rcall	.-1812   	; 0x87a4 <udc_update_iface_desc>
    8eb8:	88 23       	and	r24, r24
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    8eba:	79 f1       	breq	.+94     	; 0x8f1a <udc_process_setup+0x55e>
    8ebc:	d8 01       	movw	r26, r16
    8ebe:	14 96       	adiw	r26, 0x04	; 4
    8ec0:	ed 91       	ld	r30, X+
    8ec2:	fc 91       	ld	r31, X
    8ec4:	15 97       	sbiw	r26, 0x05	; 5
    8ec6:	19 95       	eicall
    8ec8:	81 11       	cpse	r24, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    8eca:	27 c0       	rjmp	.+78     	; 0x8f1a <udc_process_setup+0x55e>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    8ecc:	cf 5f       	subi	r28, 0xFF	; 255
    8ece:	a0 91 e8 2a 	lds	r26, 0x2AE8	; 0x802ae8 <udc_ptr_conf>
    8ed2:	b0 91 e9 2a 	lds	r27, 0x2AE9	; 0x802ae9 <udc_ptr_conf+0x1>
    8ed6:	ed 91       	ld	r30, X+
    8ed8:	fc 91       	ld	r31, X
    8eda:	11 97       	sbiw	r26, 0x01	; 1
    8edc:	94 81       	ldd	r25, Z+4	; 0x04
    8ede:	c9 17       	cp	r28, r25
    8ee0:	b0 f2       	brcs	.-84     	; 0x8e8e <udc_process_setup+0x4d2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    8ee2:	1b c0       	rjmp	.+54     	; 0x8f1a <udc_process_setup+0x55e>
    8ee4:	80 e0       	ldi	r24, 0x00	; 0
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    8ee6:	19 c0       	rjmp	.+50     	; 0x8f1a <udc_process_setup+0x55e>
    8ee8:	80 e0       	ldi	r24, 0x00	; 0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    8eea:	17 c0       	rjmp	.+46     	; 0x8f1a <udc_process_setup+0x55e>
    8eec:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    8eee:	15 c0       	rjmp	.+42     	; 0x8f1a <udc_process_setup+0x55e>
    8ef0:	80 e0       	ldi	r24, 0x00	; 0
    8ef2:	13 c0       	rjmp	.+38     	; 0x8f1a <udc_process_setup+0x55e>
    8ef4:	80 e0       	ldi	r24, 0x00	; 0
    8ef6:	11 c0       	rjmp	.+34     	; 0x8f1a <udc_process_setup+0x55e>
    8ef8:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    8efa:	0f c0       	rjmp	.+30     	; 0x8f1a <udc_process_setup+0x55e>
    8efc:	98 2f       	mov	r25, r24
    8efe:	90 76       	andi	r25, 0x60	; 96
    8f00:	09 f0       	breq	.+2      	; 0x8f04 <udc_process_setup+0x548>
    8f02:	7b cf       	rjmp	.-266    	; 0x8dfa <udc_process_setup+0x43e>
    8f04:	74 cd       	rjmp	.-1304   	; 0x89ee <udc_process_setup+0x32>
    8f06:	98 2f       	mov	r25, r24
    8f08:	90 76       	andi	r25, 0x60	; 96
    8f0a:	09 f0       	breq	.+2      	; 0x8f0e <udc_process_setup+0x552>
    8f0c:	76 cf       	rjmp	.-276    	; 0x8dfa <udc_process_setup+0x43e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    8f0e:	77 ce       	rjmp	.-786    	; 0x8bfe <udc_process_setup+0x242>
		str = udc_string_product_name;
    8f10:	3c e0       	ldi	r19, 0x0C	; 12
    8f12:	e4 ed       	ldi	r30, 0xD4	; 212
    8f14:	f0 e2       	ldi	r31, 0x20	; 32
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    8f16:	eb cd       	rjmp	.-1066   	; 0x8aee <udc_process_setup+0x132>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    8f18:	81 e0       	ldi	r24, 0x01	; 1
    8f1a:	df 91       	pop	r29
    8f1c:	cf 91       	pop	r28
    8f1e:	1f 91       	pop	r17
    8f20:	0f 91       	pop	r16
    8f22:	08 95       	ret

00008f24 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    8f24:	cf 93       	push	r28
    8f26:	df 93       	push	r29
    8f28:	1f 92       	push	r1
    8f2a:	cd b7       	in	r28, 0x3d	; 61
    8f2c:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    8f2e:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <stdio_base>
    8f32:	90 91 1a 2b 	lds	r25, 0x2B1A	; 0x802b1a <stdio_base+0x1>
    8f36:	e0 91 15 2b 	lds	r30, 0x2B15	; 0x802b15 <ptr_get>
    8f3a:	f0 91 16 2b 	lds	r31, 0x2B16	; 0x802b16 <ptr_get+0x1>
    8f3e:	be 01       	movw	r22, r28
    8f40:	6f 5f       	subi	r22, 0xFF	; 255
    8f42:	7f 4f       	sbci	r23, 0xFF	; 255
    8f44:	19 95       	eicall
	return c;
    8f46:	89 81       	ldd	r24, Y+1	; 0x01
}
    8f48:	08 2e       	mov	r0, r24
    8f4a:	00 0c       	add	r0, r0
    8f4c:	99 0b       	sbc	r25, r25
    8f4e:	0f 90       	pop	r0
    8f50:	df 91       	pop	r29
    8f52:	cf 91       	pop	r28
    8f54:	08 95       	ret

00008f56 <stdio_usb_putchar>:
	return true;
}

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
    8f56:	80 91 f0 2a 	lds	r24, 0x2AF0	; 0x802af0 <stdio_usb_interface_enable>
    8f5a:	88 23       	and	r24, r24
    8f5c:	81 f0       	breq	.+32     	; 0x8f7e <stdio_usb_putchar+0x28>
    8f5e:	86 2f       	mov	r24, r22
    8f60:	08 2e       	mov	r0, r24
    8f62:	00 0c       	add	r0, r0
    8f64:	99 0b       	sbc	r25, r25
    8f66:	df db       	rcall	.-2114   	; 0x8726 <udi_cdc_putc>
    8f68:	21 e0       	ldi	r18, 0x01	; 1
    8f6a:	30 e0       	ldi	r19, 0x00	; 0
    8f6c:	89 2b       	or	r24, r25
    8f6e:	11 f0       	breq	.+4      	; 0x8f74 <stdio_usb_putchar+0x1e>
    8f70:	20 e0       	ldi	r18, 0x00	; 0
    8f72:	30 e0       	ldi	r19, 0x00	; 0
    8f74:	88 27       	eor	r24, r24
    8f76:	99 27       	eor	r25, r25
    8f78:	82 1b       	sub	r24, r18
    8f7a:	93 0b       	sbc	r25, r19
    8f7c:	08 95       	ret
    8f7e:	80 e0       	ldi	r24, 0x00	; 0
    8f80:	90 e0       	ldi	r25, 0x00	; 0
    8f82:	08 95       	ret

00008f84 <stdio_usb_getchar>:
    8f84:	cf 93       	push	r28
    8f86:	df 93       	push	r29
    8f88:	80 91 f0 2a 	lds	r24, 0x2AF0	; 0x802af0 <stdio_usb_interface_enable>
    8f8c:	81 11       	cpse	r24, r1
    8f8e:	03 c0       	rjmp	.+6      	; 0x8f96 <stdio_usb_getchar+0x12>
    8f90:	fb 01       	movw	r30, r22
    8f92:	10 82       	st	Z, r1
    8f94:	03 c0       	rjmp	.+6      	; 0x8f9c <stdio_usb_getchar+0x18>
    8f96:	eb 01       	movw	r28, r22
    8f98:	3e db       	rcall	.-2436   	; 0x8616 <udi_cdc_getc>
    8f9a:	88 83       	st	Y, r24
    8f9c:	df 91       	pop	r29
    8f9e:	cf 91       	pop	r28
    8fa0:	08 95       	ret

00008fa2 <stdio_usb_enable>:
    8fa2:	81 e0       	ldi	r24, 0x01	; 1
    8fa4:	80 93 f0 2a 	sts	0x2AF0, r24	; 0x802af0 <stdio_usb_interface_enable>
    8fa8:	08 95       	ret

00008faa <stdio_usb_init>:
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    8faa:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <stdio_base>
    8fae:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <stdio_base+0x1>
	ptr_put = stdio_usb_putchar;
    8fb2:	8b ea       	ldi	r24, 0xAB	; 171
    8fb4:	97 e4       	ldi	r25, 0x47	; 71
    8fb6:	80 93 17 2b 	sts	0x2B17, r24	; 0x802b17 <ptr_put>
    8fba:	90 93 18 2b 	sts	0x2B18, r25	; 0x802b18 <ptr_put+0x1>
	ptr_get = stdio_usb_getchar;
    8fbe:	82 ec       	ldi	r24, 0xC2	; 194
    8fc0:	97 e4       	ldi	r25, 0x47	; 71
    8fc2:	80 93 15 2b 	sts	0x2B15, r24	; 0x802b15 <ptr_get>
    8fc6:	90 93 16 2b 	sts	0x2B16, r25	; 0x802b16 <ptr_get+0x1>
	udc_start ();

#if defined(__GNUC__)
# if XMEGA
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    8fca:	9b dc       	rcall	.-1738   	; 0x8902 <udc_start>
    8fcc:	62 e9       	ldi	r22, 0x92	; 146
    8fce:	77 e4       	ldi	r23, 0x47	; 71
    8fd0:	8c ee       	ldi	r24, 0xEC	; 236
    8fd2:	97 e4       	ldi	r25, 0x47	; 71
    8fd4:	4a c3       	rjmp	.+1684   	; 0x966a <fdevopen>
    8fd6:	08 95       	ret

00008fd8 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    8fd8:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    8fda:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <stdio_base>
    8fde:	90 91 1a 2b 	lds	r25, 0x2B1A	; 0x802b1a <stdio_base+0x1>
    8fe2:	e0 91 17 2b 	lds	r30, 0x2B17	; 0x802b17 <ptr_put>
    8fe6:	f0 91 18 2b 	lds	r31, 0x2B18	; 0x802b18 <ptr_put+0x1>
    8fea:	19 95       	eicall
    8fec:	99 23       	and	r25, r25
    8fee:	1c f0       	brlt	.+6      	; 0x8ff6 <_write+0x1e>
		return -1;
	}
	return 1;
    8ff0:	81 e0       	ldi	r24, 0x01	; 1
    8ff2:	90 e0       	ldi	r25, 0x00	; 0
    8ff4:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    8ff6:	8f ef       	ldi	r24, 0xFF	; 255
    8ff8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    8ffa:	08 95       	ret

00008ffc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    8ffc:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    9000:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    9002:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    9004:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    9008:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    900a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    900e:	08 95       	ret

00009010 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    9010:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    9012:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    9014:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    9016:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    9018:	60 83       	st	Z, r22
	ret                             // Return to caller
    901a:	08 95       	ret

0000901c <__mulsi3>:
    901c:	db 01       	movw	r26, r22
    901e:	8f 93       	push	r24
    9020:	9f 93       	push	r25
    9022:	87 d0       	rcall	.+270    	; 0x9132 <__muluhisi3>
    9024:	bf 91       	pop	r27
    9026:	af 91       	pop	r26
    9028:	a2 9f       	mul	r26, r18
    902a:	80 0d       	add	r24, r0
    902c:	91 1d       	adc	r25, r1
    902e:	a3 9f       	mul	r26, r19
    9030:	90 0d       	add	r25, r0
    9032:	b2 9f       	mul	r27, r18
    9034:	90 0d       	add	r25, r0
    9036:	11 24       	eor	r1, r1
    9038:	08 95       	ret

0000903a <__udivmodhi4>:
    903a:	aa 1b       	sub	r26, r26
    903c:	bb 1b       	sub	r27, r27
    903e:	51 e1       	ldi	r21, 0x11	; 17
    9040:	07 c0       	rjmp	.+14     	; 0x9050 <__udivmodhi4_ep>

00009042 <__udivmodhi4_loop>:
    9042:	aa 1f       	adc	r26, r26
    9044:	bb 1f       	adc	r27, r27
    9046:	a6 17       	cp	r26, r22
    9048:	b7 07       	cpc	r27, r23
    904a:	10 f0       	brcs	.+4      	; 0x9050 <__udivmodhi4_ep>
    904c:	a6 1b       	sub	r26, r22
    904e:	b7 0b       	sbc	r27, r23

00009050 <__udivmodhi4_ep>:
    9050:	88 1f       	adc	r24, r24
    9052:	99 1f       	adc	r25, r25
    9054:	5a 95       	dec	r21
    9056:	a9 f7       	brne	.-22     	; 0x9042 <__udivmodhi4_loop>
    9058:	80 95       	com	r24
    905a:	90 95       	com	r25
    905c:	bc 01       	movw	r22, r24
    905e:	cd 01       	movw	r24, r26
    9060:	08 95       	ret

00009062 <__divmodhi4>:
    9062:	97 fb       	bst	r25, 7
    9064:	07 2e       	mov	r0, r23
    9066:	16 f4       	brtc	.+4      	; 0x906c <__divmodhi4+0xa>
    9068:	00 94       	com	r0
    906a:	06 d0       	rcall	.+12     	; 0x9078 <__divmodhi4_neg1>
    906c:	77 fd       	sbrc	r23, 7
    906e:	08 d0       	rcall	.+16     	; 0x9080 <__divmodhi4_neg2>
    9070:	e4 df       	rcall	.-56     	; 0x903a <__udivmodhi4>
    9072:	07 fc       	sbrc	r0, 7
    9074:	05 d0       	rcall	.+10     	; 0x9080 <__divmodhi4_neg2>
    9076:	3e f4       	brtc	.+14     	; 0x9086 <__divmodhi4_exit>

00009078 <__divmodhi4_neg1>:
    9078:	90 95       	com	r25
    907a:	81 95       	neg	r24
    907c:	9f 4f       	sbci	r25, 0xFF	; 255
    907e:	08 95       	ret

00009080 <__divmodhi4_neg2>:
    9080:	70 95       	com	r23
    9082:	61 95       	neg	r22
    9084:	7f 4f       	sbci	r23, 0xFF	; 255

00009086 <__divmodhi4_exit>:
    9086:	08 95       	ret

00009088 <__udivmodsi4>:
    9088:	a1 e2       	ldi	r26, 0x21	; 33
    908a:	1a 2e       	mov	r1, r26
    908c:	aa 1b       	sub	r26, r26
    908e:	bb 1b       	sub	r27, r27
    9090:	fd 01       	movw	r30, r26
    9092:	0d c0       	rjmp	.+26     	; 0x90ae <__udivmodsi4_ep>

00009094 <__udivmodsi4_loop>:
    9094:	aa 1f       	adc	r26, r26
    9096:	bb 1f       	adc	r27, r27
    9098:	ee 1f       	adc	r30, r30
    909a:	ff 1f       	adc	r31, r31
    909c:	a2 17       	cp	r26, r18
    909e:	b3 07       	cpc	r27, r19
    90a0:	e4 07       	cpc	r30, r20
    90a2:	f5 07       	cpc	r31, r21
    90a4:	20 f0       	brcs	.+8      	; 0x90ae <__udivmodsi4_ep>
    90a6:	a2 1b       	sub	r26, r18
    90a8:	b3 0b       	sbc	r27, r19
    90aa:	e4 0b       	sbc	r30, r20
    90ac:	f5 0b       	sbc	r31, r21

000090ae <__udivmodsi4_ep>:
    90ae:	66 1f       	adc	r22, r22
    90b0:	77 1f       	adc	r23, r23
    90b2:	88 1f       	adc	r24, r24
    90b4:	99 1f       	adc	r25, r25
    90b6:	1a 94       	dec	r1
    90b8:	69 f7       	brne	.-38     	; 0x9094 <__udivmodsi4_loop>
    90ba:	60 95       	com	r22
    90bc:	70 95       	com	r23
    90be:	80 95       	com	r24
    90c0:	90 95       	com	r25
    90c2:	9b 01       	movw	r18, r22
    90c4:	ac 01       	movw	r20, r24
    90c6:	bd 01       	movw	r22, r26
    90c8:	cf 01       	movw	r24, r30
    90ca:	08 95       	ret

000090cc <__divmodsi4>:
    90cc:	05 2e       	mov	r0, r21
    90ce:	97 fb       	bst	r25, 7
    90d0:	16 f4       	brtc	.+4      	; 0x90d6 <__divmodsi4+0xa>
    90d2:	00 94       	com	r0
    90d4:	0f d0       	rcall	.+30     	; 0x90f4 <__negsi2>
    90d6:	57 fd       	sbrc	r21, 7
    90d8:	05 d0       	rcall	.+10     	; 0x90e4 <__divmodsi4_neg2>
    90da:	d6 df       	rcall	.-84     	; 0x9088 <__udivmodsi4>
    90dc:	07 fc       	sbrc	r0, 7
    90de:	02 d0       	rcall	.+4      	; 0x90e4 <__divmodsi4_neg2>
    90e0:	46 f4       	brtc	.+16     	; 0x90f2 <__divmodsi4_exit>
    90e2:	08 c0       	rjmp	.+16     	; 0x90f4 <__negsi2>

000090e4 <__divmodsi4_neg2>:
    90e4:	50 95       	com	r21
    90e6:	40 95       	com	r20
    90e8:	30 95       	com	r19
    90ea:	21 95       	neg	r18
    90ec:	3f 4f       	sbci	r19, 0xFF	; 255
    90ee:	4f 4f       	sbci	r20, 0xFF	; 255
    90f0:	5f 4f       	sbci	r21, 0xFF	; 255

000090f2 <__divmodsi4_exit>:
    90f2:	08 95       	ret

000090f4 <__negsi2>:
    90f4:	90 95       	com	r25
    90f6:	80 95       	com	r24
    90f8:	70 95       	com	r23
    90fa:	61 95       	neg	r22
    90fc:	7f 4f       	sbci	r23, 0xFF	; 255
    90fe:	8f 4f       	sbci	r24, 0xFF	; 255
    9100:	9f 4f       	sbci	r25, 0xFF	; 255
    9102:	08 95       	ret

00009104 <__tablejump2__>:
    9104:	ee 0f       	add	r30, r30
    9106:	ff 1f       	adc	r31, r31
    9108:	88 1f       	adc	r24, r24
    910a:	8b bf       	out	0x3b, r24	; 59
    910c:	07 90       	elpm	r0, Z+
    910e:	f6 91       	elpm	r31, Z
    9110:	e0 2d       	mov	r30, r0
    9112:	19 94       	eijmp

00009114 <__umulhisi3>:
    9114:	a2 9f       	mul	r26, r18
    9116:	b0 01       	movw	r22, r0
    9118:	b3 9f       	mul	r27, r19
    911a:	c0 01       	movw	r24, r0
    911c:	a3 9f       	mul	r26, r19
    911e:	70 0d       	add	r23, r0
    9120:	81 1d       	adc	r24, r1
    9122:	11 24       	eor	r1, r1
    9124:	91 1d       	adc	r25, r1
    9126:	b2 9f       	mul	r27, r18
    9128:	70 0d       	add	r23, r0
    912a:	81 1d       	adc	r24, r1
    912c:	11 24       	eor	r1, r1
    912e:	91 1d       	adc	r25, r1
    9130:	08 95       	ret

00009132 <__muluhisi3>:
    9132:	f0 df       	rcall	.-32     	; 0x9114 <__umulhisi3>
    9134:	a5 9f       	mul	r26, r21
    9136:	90 0d       	add	r25, r0
    9138:	b4 9f       	mul	r27, r20
    913a:	90 0d       	add	r25, r0
    913c:	a4 9f       	mul	r26, r20
    913e:	80 0d       	add	r24, r0
    9140:	91 1d       	adc	r25, r1
    9142:	11 24       	eor	r1, r1
    9144:	08 95       	ret

00009146 <__muldi3>:
    9146:	df 93       	push	r29
    9148:	cf 93       	push	r28
    914a:	1f 93       	push	r17
    914c:	0f 93       	push	r16
    914e:	9a 9d       	mul	r25, r10
    9150:	f0 2d       	mov	r31, r0
    9152:	21 9f       	mul	r18, r17
    9154:	f0 0d       	add	r31, r0
    9156:	8b 9d       	mul	r24, r11
    9158:	f0 0d       	add	r31, r0
    915a:	8a 9d       	mul	r24, r10
    915c:	e0 2d       	mov	r30, r0
    915e:	f1 0d       	add	r31, r1
    9160:	03 9f       	mul	r16, r19
    9162:	f0 0d       	add	r31, r0
    9164:	02 9f       	mul	r16, r18
    9166:	e0 0d       	add	r30, r0
    9168:	f1 1d       	adc	r31, r1
    916a:	4e 9d       	mul	r20, r14
    916c:	e0 0d       	add	r30, r0
    916e:	f1 1d       	adc	r31, r1
    9170:	5e 9d       	mul	r21, r14
    9172:	f0 0d       	add	r31, r0
    9174:	4f 9d       	mul	r20, r15
    9176:	f0 0d       	add	r31, r0
    9178:	7f 93       	push	r23
    917a:	6f 93       	push	r22
    917c:	bf 92       	push	r11
    917e:	af 92       	push	r10
    9180:	5f 93       	push	r21
    9182:	4f 93       	push	r20
    9184:	d5 01       	movw	r26, r10
    9186:	c6 df       	rcall	.-116    	; 0x9114 <__umulhisi3>
    9188:	8b 01       	movw	r16, r22
    918a:	ac 01       	movw	r20, r24
    918c:	d7 01       	movw	r26, r14
    918e:	c2 df       	rcall	.-124    	; 0x9114 <__umulhisi3>
    9190:	eb 01       	movw	r28, r22
    9192:	e8 0f       	add	r30, r24
    9194:	f9 1f       	adc	r31, r25
    9196:	d6 01       	movw	r26, r12
    9198:	1f d0       	rcall	.+62     	; 0x91d8 <__muldi3_6>
    919a:	2f 91       	pop	r18
    919c:	3f 91       	pop	r19
    919e:	d6 01       	movw	r26, r12
    91a0:	b9 df       	rcall	.-142    	; 0x9114 <__umulhisi3>
    91a2:	c6 0f       	add	r28, r22
    91a4:	d7 1f       	adc	r29, r23
    91a6:	e8 1f       	adc	r30, r24
    91a8:	f9 1f       	adc	r31, r25
    91aa:	af 91       	pop	r26
    91ac:	bf 91       	pop	r27
    91ae:	14 d0       	rcall	.+40     	; 0x91d8 <__muldi3_6>
    91b0:	2f 91       	pop	r18
    91b2:	3f 91       	pop	r19
    91b4:	af df       	rcall	.-162    	; 0x9114 <__umulhisi3>
    91b6:	c6 0f       	add	r28, r22
    91b8:	d7 1f       	adc	r29, r23
    91ba:	e8 1f       	adc	r30, r24
    91bc:	f9 1f       	adc	r31, r25
    91be:	d6 01       	movw	r26, r12
    91c0:	a9 df       	rcall	.-174    	; 0x9114 <__umulhisi3>
    91c2:	e6 0f       	add	r30, r22
    91c4:	f7 1f       	adc	r31, r23
    91c6:	98 01       	movw	r18, r16
    91c8:	be 01       	movw	r22, r28
    91ca:	cf 01       	movw	r24, r30
    91cc:	11 24       	eor	r1, r1
    91ce:	0f 91       	pop	r16
    91d0:	1f 91       	pop	r17
    91d2:	cf 91       	pop	r28
    91d4:	df 91       	pop	r29
    91d6:	08 95       	ret

000091d8 <__muldi3_6>:
    91d8:	9d df       	rcall	.-198    	; 0x9114 <__umulhisi3>
    91da:	46 0f       	add	r20, r22
    91dc:	57 1f       	adc	r21, r23
    91de:	c8 1f       	adc	r28, r24
    91e0:	d9 1f       	adc	r29, r25
    91e2:	08 f4       	brcc	.+2      	; 0x91e6 <__muldi3_6+0xe>
    91e4:	31 96       	adiw	r30, 0x01	; 1
    91e6:	08 95       	ret

000091e8 <__ashldi3>:
    91e8:	0f 93       	push	r16
    91ea:	08 30       	cpi	r16, 0x08	; 8
    91ec:	90 f0       	brcs	.+36     	; 0x9212 <__ashldi3+0x2a>
    91ee:	98 2f       	mov	r25, r24
    91f0:	87 2f       	mov	r24, r23
    91f2:	76 2f       	mov	r23, r22
    91f4:	65 2f       	mov	r22, r21
    91f6:	54 2f       	mov	r21, r20
    91f8:	43 2f       	mov	r20, r19
    91fa:	32 2f       	mov	r19, r18
    91fc:	22 27       	eor	r18, r18
    91fe:	08 50       	subi	r16, 0x08	; 8
    9200:	f4 cf       	rjmp	.-24     	; 0x91ea <__ashldi3+0x2>
    9202:	22 0f       	add	r18, r18
    9204:	33 1f       	adc	r19, r19
    9206:	44 1f       	adc	r20, r20
    9208:	55 1f       	adc	r21, r21
    920a:	66 1f       	adc	r22, r22
    920c:	77 1f       	adc	r23, r23
    920e:	88 1f       	adc	r24, r24
    9210:	99 1f       	adc	r25, r25
    9212:	0a 95       	dec	r16
    9214:	b2 f7       	brpl	.-20     	; 0x9202 <__ashldi3+0x1a>
    9216:	0f 91       	pop	r16
    9218:	08 95       	ret

0000921a <__ashrdi3>:
    921a:	97 fb       	bst	r25, 7
    921c:	10 f8       	bld	r1, 0

0000921e <__lshrdi3>:
    921e:	16 94       	lsr	r1
    9220:	00 08       	sbc	r0, r0
    9222:	0f 93       	push	r16
    9224:	08 30       	cpi	r16, 0x08	; 8
    9226:	98 f0       	brcs	.+38     	; 0x924e <__lshrdi3+0x30>
    9228:	08 50       	subi	r16, 0x08	; 8
    922a:	23 2f       	mov	r18, r19
    922c:	34 2f       	mov	r19, r20
    922e:	45 2f       	mov	r20, r21
    9230:	56 2f       	mov	r21, r22
    9232:	67 2f       	mov	r22, r23
    9234:	78 2f       	mov	r23, r24
    9236:	89 2f       	mov	r24, r25
    9238:	90 2d       	mov	r25, r0
    923a:	f4 cf       	rjmp	.-24     	; 0x9224 <__lshrdi3+0x6>
    923c:	05 94       	asr	r0
    923e:	97 95       	ror	r25
    9240:	87 95       	ror	r24
    9242:	77 95       	ror	r23
    9244:	67 95       	ror	r22
    9246:	57 95       	ror	r21
    9248:	47 95       	ror	r20
    924a:	37 95       	ror	r19
    924c:	27 95       	ror	r18
    924e:	0a 95       	dec	r16
    9250:	aa f7       	brpl	.-22     	; 0x923c <__lshrdi3+0x1e>
    9252:	0f 91       	pop	r16
    9254:	08 95       	ret

00009256 <__adddi3>:
    9256:	2a 0d       	add	r18, r10
    9258:	3b 1d       	adc	r19, r11
    925a:	4c 1d       	adc	r20, r12
    925c:	5d 1d       	adc	r21, r13
    925e:	6e 1d       	adc	r22, r14
    9260:	7f 1d       	adc	r23, r15
    9262:	80 1f       	adc	r24, r16
    9264:	91 1f       	adc	r25, r17
    9266:	08 95       	ret

00009268 <__subdi3>:
    9268:	2a 19       	sub	r18, r10
    926a:	3b 09       	sbc	r19, r11
    926c:	4c 09       	sbc	r20, r12
    926e:	5d 09       	sbc	r21, r13
    9270:	6e 09       	sbc	r22, r14
    9272:	7f 09       	sbc	r23, r15
    9274:	80 0b       	sbc	r24, r16
    9276:	91 0b       	sbc	r25, r17
    9278:	08 95       	ret

0000927a <__subsf3>:
    927a:	50 58       	subi	r21, 0x80	; 128

0000927c <__addsf3>:
    927c:	bb 27       	eor	r27, r27
    927e:	aa 27       	eor	r26, r26
    9280:	0e d0       	rcall	.+28     	; 0x929e <__addsf3x>
    9282:	4d c1       	rjmp	.+666    	; 0x951e <__fp_round>
    9284:	3e d1       	rcall	.+636    	; 0x9502 <__fp_pscA>
    9286:	30 f0       	brcs	.+12     	; 0x9294 <__addsf3+0x18>
    9288:	43 d1       	rcall	.+646    	; 0x9510 <__fp_pscB>
    928a:	20 f0       	brcs	.+8      	; 0x9294 <__addsf3+0x18>
    928c:	31 f4       	brne	.+12     	; 0x929a <__addsf3+0x1e>
    928e:	9f 3f       	cpi	r25, 0xFF	; 255
    9290:	11 f4       	brne	.+4      	; 0x9296 <__addsf3+0x1a>
    9292:	1e f4       	brtc	.+6      	; 0x929a <__addsf3+0x1e>
    9294:	33 c1       	rjmp	.+614    	; 0x94fc <__fp_nan>
    9296:	0e f4       	brtc	.+2      	; 0x929a <__addsf3+0x1e>
    9298:	e0 95       	com	r30
    929a:	e7 fb       	bst	r30, 7
    929c:	29 c1       	rjmp	.+594    	; 0x94f0 <__fp_inf>

0000929e <__addsf3x>:
    929e:	e9 2f       	mov	r30, r25
    92a0:	4f d1       	rcall	.+670    	; 0x9540 <__fp_split3>
    92a2:	80 f3       	brcs	.-32     	; 0x9284 <__addsf3+0x8>
    92a4:	ba 17       	cp	r27, r26
    92a6:	62 07       	cpc	r22, r18
    92a8:	73 07       	cpc	r23, r19
    92aa:	84 07       	cpc	r24, r20
    92ac:	95 07       	cpc	r25, r21
    92ae:	18 f0       	brcs	.+6      	; 0x92b6 <__addsf3x+0x18>
    92b0:	71 f4       	brne	.+28     	; 0x92ce <__addsf3x+0x30>
    92b2:	9e f5       	brtc	.+102    	; 0x931a <__addsf3x+0x7c>
    92b4:	67 c1       	rjmp	.+718    	; 0x9584 <__fp_zero>
    92b6:	0e f4       	brtc	.+2      	; 0x92ba <__addsf3x+0x1c>
    92b8:	e0 95       	com	r30
    92ba:	0b 2e       	mov	r0, r27
    92bc:	ba 2f       	mov	r27, r26
    92be:	a0 2d       	mov	r26, r0
    92c0:	0b 01       	movw	r0, r22
    92c2:	b9 01       	movw	r22, r18
    92c4:	90 01       	movw	r18, r0
    92c6:	0c 01       	movw	r0, r24
    92c8:	ca 01       	movw	r24, r20
    92ca:	a0 01       	movw	r20, r0
    92cc:	11 24       	eor	r1, r1
    92ce:	ff 27       	eor	r31, r31
    92d0:	59 1b       	sub	r21, r25
    92d2:	99 f0       	breq	.+38     	; 0x92fa <__addsf3x+0x5c>
    92d4:	59 3f       	cpi	r21, 0xF9	; 249
    92d6:	50 f4       	brcc	.+20     	; 0x92ec <__addsf3x+0x4e>
    92d8:	50 3e       	cpi	r21, 0xE0	; 224
    92da:	68 f1       	brcs	.+90     	; 0x9336 <__addsf3x+0x98>
    92dc:	1a 16       	cp	r1, r26
    92de:	f0 40       	sbci	r31, 0x00	; 0
    92e0:	a2 2f       	mov	r26, r18
    92e2:	23 2f       	mov	r18, r19
    92e4:	34 2f       	mov	r19, r20
    92e6:	44 27       	eor	r20, r20
    92e8:	58 5f       	subi	r21, 0xF8	; 248
    92ea:	f3 cf       	rjmp	.-26     	; 0x92d2 <__addsf3x+0x34>
    92ec:	46 95       	lsr	r20
    92ee:	37 95       	ror	r19
    92f0:	27 95       	ror	r18
    92f2:	a7 95       	ror	r26
    92f4:	f0 40       	sbci	r31, 0x00	; 0
    92f6:	53 95       	inc	r21
    92f8:	c9 f7       	brne	.-14     	; 0x92ec <__addsf3x+0x4e>
    92fa:	7e f4       	brtc	.+30     	; 0x931a <__addsf3x+0x7c>
    92fc:	1f 16       	cp	r1, r31
    92fe:	ba 0b       	sbc	r27, r26
    9300:	62 0b       	sbc	r22, r18
    9302:	73 0b       	sbc	r23, r19
    9304:	84 0b       	sbc	r24, r20
    9306:	ba f0       	brmi	.+46     	; 0x9336 <__addsf3x+0x98>
    9308:	91 50       	subi	r25, 0x01	; 1
    930a:	a1 f0       	breq	.+40     	; 0x9334 <__addsf3x+0x96>
    930c:	ff 0f       	add	r31, r31
    930e:	bb 1f       	adc	r27, r27
    9310:	66 1f       	adc	r22, r22
    9312:	77 1f       	adc	r23, r23
    9314:	88 1f       	adc	r24, r24
    9316:	c2 f7       	brpl	.-16     	; 0x9308 <__addsf3x+0x6a>
    9318:	0e c0       	rjmp	.+28     	; 0x9336 <__addsf3x+0x98>
    931a:	ba 0f       	add	r27, r26
    931c:	62 1f       	adc	r22, r18
    931e:	73 1f       	adc	r23, r19
    9320:	84 1f       	adc	r24, r20
    9322:	48 f4       	brcc	.+18     	; 0x9336 <__addsf3x+0x98>
    9324:	87 95       	ror	r24
    9326:	77 95       	ror	r23
    9328:	67 95       	ror	r22
    932a:	b7 95       	ror	r27
    932c:	f7 95       	ror	r31
    932e:	9e 3f       	cpi	r25, 0xFE	; 254
    9330:	08 f0       	brcs	.+2      	; 0x9334 <__addsf3x+0x96>
    9332:	b3 cf       	rjmp	.-154    	; 0x929a <__addsf3+0x1e>
    9334:	93 95       	inc	r25
    9336:	88 0f       	add	r24, r24
    9338:	08 f0       	brcs	.+2      	; 0x933c <__addsf3x+0x9e>
    933a:	99 27       	eor	r25, r25
    933c:	ee 0f       	add	r30, r30
    933e:	97 95       	ror	r25
    9340:	87 95       	ror	r24
    9342:	08 95       	ret

00009344 <__divsf3>:
    9344:	0c d0       	rcall	.+24     	; 0x935e <__divsf3x>
    9346:	eb c0       	rjmp	.+470    	; 0x951e <__fp_round>
    9348:	e3 d0       	rcall	.+454    	; 0x9510 <__fp_pscB>
    934a:	40 f0       	brcs	.+16     	; 0x935c <__divsf3+0x18>
    934c:	da d0       	rcall	.+436    	; 0x9502 <__fp_pscA>
    934e:	30 f0       	brcs	.+12     	; 0x935c <__divsf3+0x18>
    9350:	21 f4       	brne	.+8      	; 0x935a <__divsf3+0x16>
    9352:	5f 3f       	cpi	r21, 0xFF	; 255
    9354:	19 f0       	breq	.+6      	; 0x935c <__divsf3+0x18>
    9356:	cc c0       	rjmp	.+408    	; 0x94f0 <__fp_inf>
    9358:	51 11       	cpse	r21, r1
    935a:	15 c1       	rjmp	.+554    	; 0x9586 <__fp_szero>
    935c:	cf c0       	rjmp	.+414    	; 0x94fc <__fp_nan>

0000935e <__divsf3x>:
    935e:	f0 d0       	rcall	.+480    	; 0x9540 <__fp_split3>
    9360:	98 f3       	brcs	.-26     	; 0x9348 <__divsf3+0x4>

00009362 <__divsf3_pse>:
    9362:	99 23       	and	r25, r25
    9364:	c9 f3       	breq	.-14     	; 0x9358 <__divsf3+0x14>
    9366:	55 23       	and	r21, r21
    9368:	b1 f3       	breq	.-20     	; 0x9356 <__divsf3+0x12>
    936a:	95 1b       	sub	r25, r21
    936c:	55 0b       	sbc	r21, r21
    936e:	bb 27       	eor	r27, r27
    9370:	aa 27       	eor	r26, r26
    9372:	62 17       	cp	r22, r18
    9374:	73 07       	cpc	r23, r19
    9376:	84 07       	cpc	r24, r20
    9378:	38 f0       	brcs	.+14     	; 0x9388 <__divsf3_pse+0x26>
    937a:	9f 5f       	subi	r25, 0xFF	; 255
    937c:	5f 4f       	sbci	r21, 0xFF	; 255
    937e:	22 0f       	add	r18, r18
    9380:	33 1f       	adc	r19, r19
    9382:	44 1f       	adc	r20, r20
    9384:	aa 1f       	adc	r26, r26
    9386:	a9 f3       	breq	.-22     	; 0x9372 <__divsf3_pse+0x10>
    9388:	33 d0       	rcall	.+102    	; 0x93f0 <__divsf3_pse+0x8e>
    938a:	0e 2e       	mov	r0, r30
    938c:	3a f0       	brmi	.+14     	; 0x939c <__divsf3_pse+0x3a>
    938e:	e0 e8       	ldi	r30, 0x80	; 128
    9390:	30 d0       	rcall	.+96     	; 0x93f2 <__divsf3_pse+0x90>
    9392:	91 50       	subi	r25, 0x01	; 1
    9394:	50 40       	sbci	r21, 0x00	; 0
    9396:	e6 95       	lsr	r30
    9398:	00 1c       	adc	r0, r0
    939a:	ca f7       	brpl	.-14     	; 0x938e <__divsf3_pse+0x2c>
    939c:	29 d0       	rcall	.+82     	; 0x93f0 <__divsf3_pse+0x8e>
    939e:	fe 2f       	mov	r31, r30
    93a0:	27 d0       	rcall	.+78     	; 0x93f0 <__divsf3_pse+0x8e>
    93a2:	66 0f       	add	r22, r22
    93a4:	77 1f       	adc	r23, r23
    93a6:	88 1f       	adc	r24, r24
    93a8:	bb 1f       	adc	r27, r27
    93aa:	26 17       	cp	r18, r22
    93ac:	37 07       	cpc	r19, r23
    93ae:	48 07       	cpc	r20, r24
    93b0:	ab 07       	cpc	r26, r27
    93b2:	b0 e8       	ldi	r27, 0x80	; 128
    93b4:	09 f0       	breq	.+2      	; 0x93b8 <__divsf3_pse+0x56>
    93b6:	bb 0b       	sbc	r27, r27
    93b8:	80 2d       	mov	r24, r0
    93ba:	bf 01       	movw	r22, r30
    93bc:	ff 27       	eor	r31, r31
    93be:	93 58       	subi	r25, 0x83	; 131
    93c0:	5f 4f       	sbci	r21, 0xFF	; 255
    93c2:	2a f0       	brmi	.+10     	; 0x93ce <__divsf3_pse+0x6c>
    93c4:	9e 3f       	cpi	r25, 0xFE	; 254
    93c6:	51 05       	cpc	r21, r1
    93c8:	68 f0       	brcs	.+26     	; 0x93e4 <__divsf3_pse+0x82>
    93ca:	92 c0       	rjmp	.+292    	; 0x94f0 <__fp_inf>
    93cc:	dc c0       	rjmp	.+440    	; 0x9586 <__fp_szero>
    93ce:	5f 3f       	cpi	r21, 0xFF	; 255
    93d0:	ec f3       	brlt	.-6      	; 0x93cc <__divsf3_pse+0x6a>
    93d2:	98 3e       	cpi	r25, 0xE8	; 232
    93d4:	dc f3       	brlt	.-10     	; 0x93cc <__divsf3_pse+0x6a>
    93d6:	86 95       	lsr	r24
    93d8:	77 95       	ror	r23
    93da:	67 95       	ror	r22
    93dc:	b7 95       	ror	r27
    93de:	f7 95       	ror	r31
    93e0:	9f 5f       	subi	r25, 0xFF	; 255
    93e2:	c9 f7       	brne	.-14     	; 0x93d6 <__divsf3_pse+0x74>
    93e4:	88 0f       	add	r24, r24
    93e6:	91 1d       	adc	r25, r1
    93e8:	96 95       	lsr	r25
    93ea:	87 95       	ror	r24
    93ec:	97 f9       	bld	r25, 7
    93ee:	08 95       	ret
    93f0:	e1 e0       	ldi	r30, 0x01	; 1
    93f2:	66 0f       	add	r22, r22
    93f4:	77 1f       	adc	r23, r23
    93f6:	88 1f       	adc	r24, r24
    93f8:	bb 1f       	adc	r27, r27
    93fa:	62 17       	cp	r22, r18
    93fc:	73 07       	cpc	r23, r19
    93fe:	84 07       	cpc	r24, r20
    9400:	ba 07       	cpc	r27, r26
    9402:	20 f0       	brcs	.+8      	; 0x940c <__divsf3_pse+0xaa>
    9404:	62 1b       	sub	r22, r18
    9406:	73 0b       	sbc	r23, r19
    9408:	84 0b       	sbc	r24, r20
    940a:	ba 0b       	sbc	r27, r26
    940c:	ee 1f       	adc	r30, r30
    940e:	88 f7       	brcc	.-30     	; 0x93f2 <__divsf3_pse+0x90>
    9410:	e0 95       	com	r30
    9412:	08 95       	ret

00009414 <__fixsfsi>:
    9414:	04 d0       	rcall	.+8      	; 0x941e <__fixunssfsi>
    9416:	68 94       	set
    9418:	b1 11       	cpse	r27, r1
    941a:	b5 c0       	rjmp	.+362    	; 0x9586 <__fp_szero>
    941c:	08 95       	ret

0000941e <__fixunssfsi>:
    941e:	98 d0       	rcall	.+304    	; 0x9550 <__fp_splitA>
    9420:	88 f0       	brcs	.+34     	; 0x9444 <__fixunssfsi+0x26>
    9422:	9f 57       	subi	r25, 0x7F	; 127
    9424:	90 f0       	brcs	.+36     	; 0x944a <__fixunssfsi+0x2c>
    9426:	b9 2f       	mov	r27, r25
    9428:	99 27       	eor	r25, r25
    942a:	b7 51       	subi	r27, 0x17	; 23
    942c:	a0 f0       	brcs	.+40     	; 0x9456 <__fixunssfsi+0x38>
    942e:	d1 f0       	breq	.+52     	; 0x9464 <__fixunssfsi+0x46>
    9430:	66 0f       	add	r22, r22
    9432:	77 1f       	adc	r23, r23
    9434:	88 1f       	adc	r24, r24
    9436:	99 1f       	adc	r25, r25
    9438:	1a f0       	brmi	.+6      	; 0x9440 <__fixunssfsi+0x22>
    943a:	ba 95       	dec	r27
    943c:	c9 f7       	brne	.-14     	; 0x9430 <__fixunssfsi+0x12>
    943e:	12 c0       	rjmp	.+36     	; 0x9464 <__fixunssfsi+0x46>
    9440:	b1 30       	cpi	r27, 0x01	; 1
    9442:	81 f0       	breq	.+32     	; 0x9464 <__fixunssfsi+0x46>
    9444:	9f d0       	rcall	.+318    	; 0x9584 <__fp_zero>
    9446:	b1 e0       	ldi	r27, 0x01	; 1
    9448:	08 95       	ret
    944a:	9c c0       	rjmp	.+312    	; 0x9584 <__fp_zero>
    944c:	67 2f       	mov	r22, r23
    944e:	78 2f       	mov	r23, r24
    9450:	88 27       	eor	r24, r24
    9452:	b8 5f       	subi	r27, 0xF8	; 248
    9454:	39 f0       	breq	.+14     	; 0x9464 <__fixunssfsi+0x46>
    9456:	b9 3f       	cpi	r27, 0xF9	; 249
    9458:	cc f3       	brlt	.-14     	; 0x944c <__fixunssfsi+0x2e>
    945a:	86 95       	lsr	r24
    945c:	77 95       	ror	r23
    945e:	67 95       	ror	r22
    9460:	b3 95       	inc	r27
    9462:	d9 f7       	brne	.-10     	; 0x945a <__fixunssfsi+0x3c>
    9464:	3e f4       	brtc	.+14     	; 0x9474 <__fixunssfsi+0x56>
    9466:	90 95       	com	r25
    9468:	80 95       	com	r24
    946a:	70 95       	com	r23
    946c:	61 95       	neg	r22
    946e:	7f 4f       	sbci	r23, 0xFF	; 255
    9470:	8f 4f       	sbci	r24, 0xFF	; 255
    9472:	9f 4f       	sbci	r25, 0xFF	; 255
    9474:	08 95       	ret

00009476 <__floatunsisf>:
    9476:	e8 94       	clt
    9478:	09 c0       	rjmp	.+18     	; 0x948c <__floatsisf+0x12>

0000947a <__floatsisf>:
    947a:	97 fb       	bst	r25, 7
    947c:	3e f4       	brtc	.+14     	; 0x948c <__floatsisf+0x12>
    947e:	90 95       	com	r25
    9480:	80 95       	com	r24
    9482:	70 95       	com	r23
    9484:	61 95       	neg	r22
    9486:	7f 4f       	sbci	r23, 0xFF	; 255
    9488:	8f 4f       	sbci	r24, 0xFF	; 255
    948a:	9f 4f       	sbci	r25, 0xFF	; 255
    948c:	99 23       	and	r25, r25
    948e:	a9 f0       	breq	.+42     	; 0x94ba <__floatsisf+0x40>
    9490:	f9 2f       	mov	r31, r25
    9492:	96 e9       	ldi	r25, 0x96	; 150
    9494:	bb 27       	eor	r27, r27
    9496:	93 95       	inc	r25
    9498:	f6 95       	lsr	r31
    949a:	87 95       	ror	r24
    949c:	77 95       	ror	r23
    949e:	67 95       	ror	r22
    94a0:	b7 95       	ror	r27
    94a2:	f1 11       	cpse	r31, r1
    94a4:	f8 cf       	rjmp	.-16     	; 0x9496 <__floatsisf+0x1c>
    94a6:	fa f4       	brpl	.+62     	; 0x94e6 <__floatsisf+0x6c>
    94a8:	bb 0f       	add	r27, r27
    94aa:	11 f4       	brne	.+4      	; 0x94b0 <__floatsisf+0x36>
    94ac:	60 ff       	sbrs	r22, 0
    94ae:	1b c0       	rjmp	.+54     	; 0x94e6 <__floatsisf+0x6c>
    94b0:	6f 5f       	subi	r22, 0xFF	; 255
    94b2:	7f 4f       	sbci	r23, 0xFF	; 255
    94b4:	8f 4f       	sbci	r24, 0xFF	; 255
    94b6:	9f 4f       	sbci	r25, 0xFF	; 255
    94b8:	16 c0       	rjmp	.+44     	; 0x94e6 <__floatsisf+0x6c>
    94ba:	88 23       	and	r24, r24
    94bc:	11 f0       	breq	.+4      	; 0x94c2 <__floatsisf+0x48>
    94be:	96 e9       	ldi	r25, 0x96	; 150
    94c0:	11 c0       	rjmp	.+34     	; 0x94e4 <__floatsisf+0x6a>
    94c2:	77 23       	and	r23, r23
    94c4:	21 f0       	breq	.+8      	; 0x94ce <__floatsisf+0x54>
    94c6:	9e e8       	ldi	r25, 0x8E	; 142
    94c8:	87 2f       	mov	r24, r23
    94ca:	76 2f       	mov	r23, r22
    94cc:	05 c0       	rjmp	.+10     	; 0x94d8 <__floatsisf+0x5e>
    94ce:	66 23       	and	r22, r22
    94d0:	71 f0       	breq	.+28     	; 0x94ee <__floatsisf+0x74>
    94d2:	96 e8       	ldi	r25, 0x86	; 134
    94d4:	86 2f       	mov	r24, r22
    94d6:	70 e0       	ldi	r23, 0x00	; 0
    94d8:	60 e0       	ldi	r22, 0x00	; 0
    94da:	2a f0       	brmi	.+10     	; 0x94e6 <__floatsisf+0x6c>
    94dc:	9a 95       	dec	r25
    94de:	66 0f       	add	r22, r22
    94e0:	77 1f       	adc	r23, r23
    94e2:	88 1f       	adc	r24, r24
    94e4:	da f7       	brpl	.-10     	; 0x94dc <__floatsisf+0x62>
    94e6:	88 0f       	add	r24, r24
    94e8:	96 95       	lsr	r25
    94ea:	87 95       	ror	r24
    94ec:	97 f9       	bld	r25, 7
    94ee:	08 95       	ret

000094f0 <__fp_inf>:
    94f0:	97 f9       	bld	r25, 7
    94f2:	9f 67       	ori	r25, 0x7F	; 127
    94f4:	80 e8       	ldi	r24, 0x80	; 128
    94f6:	70 e0       	ldi	r23, 0x00	; 0
    94f8:	60 e0       	ldi	r22, 0x00	; 0
    94fa:	08 95       	ret

000094fc <__fp_nan>:
    94fc:	9f ef       	ldi	r25, 0xFF	; 255
    94fe:	80 ec       	ldi	r24, 0xC0	; 192
    9500:	08 95       	ret

00009502 <__fp_pscA>:
    9502:	00 24       	eor	r0, r0
    9504:	0a 94       	dec	r0
    9506:	16 16       	cp	r1, r22
    9508:	17 06       	cpc	r1, r23
    950a:	18 06       	cpc	r1, r24
    950c:	09 06       	cpc	r0, r25
    950e:	08 95       	ret

00009510 <__fp_pscB>:
    9510:	00 24       	eor	r0, r0
    9512:	0a 94       	dec	r0
    9514:	12 16       	cp	r1, r18
    9516:	13 06       	cpc	r1, r19
    9518:	14 06       	cpc	r1, r20
    951a:	05 06       	cpc	r0, r21
    951c:	08 95       	ret

0000951e <__fp_round>:
    951e:	09 2e       	mov	r0, r25
    9520:	03 94       	inc	r0
    9522:	00 0c       	add	r0, r0
    9524:	11 f4       	brne	.+4      	; 0x952a <__fp_round+0xc>
    9526:	88 23       	and	r24, r24
    9528:	52 f0       	brmi	.+20     	; 0x953e <__fp_round+0x20>
    952a:	bb 0f       	add	r27, r27
    952c:	40 f4       	brcc	.+16     	; 0x953e <__fp_round+0x20>
    952e:	bf 2b       	or	r27, r31
    9530:	11 f4       	brne	.+4      	; 0x9536 <__fp_round+0x18>
    9532:	60 ff       	sbrs	r22, 0
    9534:	04 c0       	rjmp	.+8      	; 0x953e <__fp_round+0x20>
    9536:	6f 5f       	subi	r22, 0xFF	; 255
    9538:	7f 4f       	sbci	r23, 0xFF	; 255
    953a:	8f 4f       	sbci	r24, 0xFF	; 255
    953c:	9f 4f       	sbci	r25, 0xFF	; 255
    953e:	08 95       	ret

00009540 <__fp_split3>:
    9540:	57 fd       	sbrc	r21, 7
    9542:	90 58       	subi	r25, 0x80	; 128
    9544:	44 0f       	add	r20, r20
    9546:	55 1f       	adc	r21, r21
    9548:	59 f0       	breq	.+22     	; 0x9560 <__fp_splitA+0x10>
    954a:	5f 3f       	cpi	r21, 0xFF	; 255
    954c:	71 f0       	breq	.+28     	; 0x956a <__fp_splitA+0x1a>
    954e:	47 95       	ror	r20

00009550 <__fp_splitA>:
    9550:	88 0f       	add	r24, r24
    9552:	97 fb       	bst	r25, 7
    9554:	99 1f       	adc	r25, r25
    9556:	61 f0       	breq	.+24     	; 0x9570 <__fp_splitA+0x20>
    9558:	9f 3f       	cpi	r25, 0xFF	; 255
    955a:	79 f0       	breq	.+30     	; 0x957a <__fp_splitA+0x2a>
    955c:	87 95       	ror	r24
    955e:	08 95       	ret
    9560:	12 16       	cp	r1, r18
    9562:	13 06       	cpc	r1, r19
    9564:	14 06       	cpc	r1, r20
    9566:	55 1f       	adc	r21, r21
    9568:	f2 cf       	rjmp	.-28     	; 0x954e <__fp_split3+0xe>
    956a:	46 95       	lsr	r20
    956c:	f1 df       	rcall	.-30     	; 0x9550 <__fp_splitA>
    956e:	08 c0       	rjmp	.+16     	; 0x9580 <__fp_splitA+0x30>
    9570:	16 16       	cp	r1, r22
    9572:	17 06       	cpc	r1, r23
    9574:	18 06       	cpc	r1, r24
    9576:	99 1f       	adc	r25, r25
    9578:	f1 cf       	rjmp	.-30     	; 0x955c <__fp_splitA+0xc>
    957a:	86 95       	lsr	r24
    957c:	71 05       	cpc	r23, r1
    957e:	61 05       	cpc	r22, r1
    9580:	08 94       	sec
    9582:	08 95       	ret

00009584 <__fp_zero>:
    9584:	e8 94       	clt

00009586 <__fp_szero>:
    9586:	bb 27       	eor	r27, r27
    9588:	66 27       	eor	r22, r22
    958a:	77 27       	eor	r23, r23
    958c:	cb 01       	movw	r24, r22
    958e:	97 f9       	bld	r25, 7
    9590:	08 95       	ret

00009592 <__mulsf3>:
    9592:	0b d0       	rcall	.+22     	; 0x95aa <__mulsf3x>
    9594:	c4 cf       	rjmp	.-120    	; 0x951e <__fp_round>
    9596:	b5 df       	rcall	.-150    	; 0x9502 <__fp_pscA>
    9598:	28 f0       	brcs	.+10     	; 0x95a4 <__mulsf3+0x12>
    959a:	ba df       	rcall	.-140    	; 0x9510 <__fp_pscB>
    959c:	18 f0       	brcs	.+6      	; 0x95a4 <__mulsf3+0x12>
    959e:	95 23       	and	r25, r21
    95a0:	09 f0       	breq	.+2      	; 0x95a4 <__mulsf3+0x12>
    95a2:	a6 cf       	rjmp	.-180    	; 0x94f0 <__fp_inf>
    95a4:	ab cf       	rjmp	.-170    	; 0x94fc <__fp_nan>
    95a6:	11 24       	eor	r1, r1
    95a8:	ee cf       	rjmp	.-36     	; 0x9586 <__fp_szero>

000095aa <__mulsf3x>:
    95aa:	ca df       	rcall	.-108    	; 0x9540 <__fp_split3>
    95ac:	a0 f3       	brcs	.-24     	; 0x9596 <__mulsf3+0x4>

000095ae <__mulsf3_pse>:
    95ae:	95 9f       	mul	r25, r21
    95b0:	d1 f3       	breq	.-12     	; 0x95a6 <__mulsf3+0x14>
    95b2:	95 0f       	add	r25, r21
    95b4:	50 e0       	ldi	r21, 0x00	; 0
    95b6:	55 1f       	adc	r21, r21
    95b8:	62 9f       	mul	r22, r18
    95ba:	f0 01       	movw	r30, r0
    95bc:	72 9f       	mul	r23, r18
    95be:	bb 27       	eor	r27, r27
    95c0:	f0 0d       	add	r31, r0
    95c2:	b1 1d       	adc	r27, r1
    95c4:	63 9f       	mul	r22, r19
    95c6:	aa 27       	eor	r26, r26
    95c8:	f0 0d       	add	r31, r0
    95ca:	b1 1d       	adc	r27, r1
    95cc:	aa 1f       	adc	r26, r26
    95ce:	64 9f       	mul	r22, r20
    95d0:	66 27       	eor	r22, r22
    95d2:	b0 0d       	add	r27, r0
    95d4:	a1 1d       	adc	r26, r1
    95d6:	66 1f       	adc	r22, r22
    95d8:	82 9f       	mul	r24, r18
    95da:	22 27       	eor	r18, r18
    95dc:	b0 0d       	add	r27, r0
    95de:	a1 1d       	adc	r26, r1
    95e0:	62 1f       	adc	r22, r18
    95e2:	73 9f       	mul	r23, r19
    95e4:	b0 0d       	add	r27, r0
    95e6:	a1 1d       	adc	r26, r1
    95e8:	62 1f       	adc	r22, r18
    95ea:	83 9f       	mul	r24, r19
    95ec:	a0 0d       	add	r26, r0
    95ee:	61 1d       	adc	r22, r1
    95f0:	22 1f       	adc	r18, r18
    95f2:	74 9f       	mul	r23, r20
    95f4:	33 27       	eor	r19, r19
    95f6:	a0 0d       	add	r26, r0
    95f8:	61 1d       	adc	r22, r1
    95fa:	23 1f       	adc	r18, r19
    95fc:	84 9f       	mul	r24, r20
    95fe:	60 0d       	add	r22, r0
    9600:	21 1d       	adc	r18, r1
    9602:	82 2f       	mov	r24, r18
    9604:	76 2f       	mov	r23, r22
    9606:	6a 2f       	mov	r22, r26
    9608:	11 24       	eor	r1, r1
    960a:	9f 57       	subi	r25, 0x7F	; 127
    960c:	50 40       	sbci	r21, 0x00	; 0
    960e:	8a f0       	brmi	.+34     	; 0x9632 <__mulsf3_pse+0x84>
    9610:	e1 f0       	breq	.+56     	; 0x964a <__mulsf3_pse+0x9c>
    9612:	88 23       	and	r24, r24
    9614:	4a f0       	brmi	.+18     	; 0x9628 <__mulsf3_pse+0x7a>
    9616:	ee 0f       	add	r30, r30
    9618:	ff 1f       	adc	r31, r31
    961a:	bb 1f       	adc	r27, r27
    961c:	66 1f       	adc	r22, r22
    961e:	77 1f       	adc	r23, r23
    9620:	88 1f       	adc	r24, r24
    9622:	91 50       	subi	r25, 0x01	; 1
    9624:	50 40       	sbci	r21, 0x00	; 0
    9626:	a9 f7       	brne	.-22     	; 0x9612 <__mulsf3_pse+0x64>
    9628:	9e 3f       	cpi	r25, 0xFE	; 254
    962a:	51 05       	cpc	r21, r1
    962c:	70 f0       	brcs	.+28     	; 0x964a <__mulsf3_pse+0x9c>
    962e:	60 cf       	rjmp	.-320    	; 0x94f0 <__fp_inf>
    9630:	aa cf       	rjmp	.-172    	; 0x9586 <__fp_szero>
    9632:	5f 3f       	cpi	r21, 0xFF	; 255
    9634:	ec f3       	brlt	.-6      	; 0x9630 <__mulsf3_pse+0x82>
    9636:	98 3e       	cpi	r25, 0xE8	; 232
    9638:	dc f3       	brlt	.-10     	; 0x9630 <__mulsf3_pse+0x82>
    963a:	86 95       	lsr	r24
    963c:	77 95       	ror	r23
    963e:	67 95       	ror	r22
    9640:	b7 95       	ror	r27
    9642:	f7 95       	ror	r31
    9644:	e7 95       	ror	r30
    9646:	9f 5f       	subi	r25, 0xFF	; 255
    9648:	c1 f7       	brne	.-16     	; 0x963a <__mulsf3_pse+0x8c>
    964a:	fe 2b       	or	r31, r30
    964c:	88 0f       	add	r24, r24
    964e:	91 1d       	adc	r25, r1
    9650:	96 95       	lsr	r25
    9652:	87 95       	ror	r24
    9654:	97 f9       	bld	r25, 7
    9656:	08 95       	ret

00009658 <memcpy>:
    9658:	fb 01       	movw	r30, r22
    965a:	dc 01       	movw	r26, r24
    965c:	02 c0       	rjmp	.+4      	; 0x9662 <memcpy+0xa>
    965e:	01 90       	ld	r0, Z+
    9660:	0d 92       	st	X+, r0
    9662:	41 50       	subi	r20, 0x01	; 1
    9664:	50 40       	sbci	r21, 0x00	; 0
    9666:	d8 f7       	brcc	.-10     	; 0x965e <memcpy+0x6>
    9668:	08 95       	ret

0000966a <fdevopen>:
    966a:	0f 93       	push	r16
    966c:	1f 93       	push	r17
    966e:	cf 93       	push	r28
    9670:	df 93       	push	r29
    9672:	00 97       	sbiw	r24, 0x00	; 0
    9674:	31 f4       	brne	.+12     	; 0x9682 <fdevopen+0x18>
    9676:	61 15       	cp	r22, r1
    9678:	71 05       	cpc	r23, r1
    967a:	19 f4       	brne	.+6      	; 0x9682 <fdevopen+0x18>
    967c:	80 e0       	ldi	r24, 0x00	; 0
    967e:	90 e0       	ldi	r25, 0x00	; 0
    9680:	39 c0       	rjmp	.+114    	; 0x96f4 <fdevopen+0x8a>
    9682:	8b 01       	movw	r16, r22
    9684:	ec 01       	movw	r28, r24
    9686:	6e e0       	ldi	r22, 0x0E	; 14
    9688:	70 e0       	ldi	r23, 0x00	; 0
    968a:	81 e0       	ldi	r24, 0x01	; 1
    968c:	90 e0       	ldi	r25, 0x00	; 0
    968e:	99 d2       	rcall	.+1330   	; 0x9bc2 <calloc>
    9690:	fc 01       	movw	r30, r24
    9692:	89 2b       	or	r24, r25
    9694:	99 f3       	breq	.-26     	; 0x967c <fdevopen+0x12>
    9696:	80 e8       	ldi	r24, 0x80	; 128
    9698:	83 83       	std	Z+3, r24	; 0x03
    969a:	01 15       	cp	r16, r1
    969c:	11 05       	cpc	r17, r1
    969e:	71 f0       	breq	.+28     	; 0x96bc <fdevopen+0x52>
    96a0:	02 87       	std	Z+10, r16	; 0x0a
    96a2:	13 87       	std	Z+11, r17	; 0x0b
    96a4:	81 e8       	ldi	r24, 0x81	; 129
    96a6:	83 83       	std	Z+3, r24	; 0x03
    96a8:	80 91 1b 2b 	lds	r24, 0x2B1B	; 0x802b1b <__iob>
    96ac:	90 91 1c 2b 	lds	r25, 0x2B1C	; 0x802b1c <__iob+0x1>
    96b0:	89 2b       	or	r24, r25
    96b2:	21 f4       	brne	.+8      	; 0x96bc <fdevopen+0x52>
    96b4:	e0 93 1b 2b 	sts	0x2B1B, r30	; 0x802b1b <__iob>
    96b8:	f0 93 1c 2b 	sts	0x2B1C, r31	; 0x802b1c <__iob+0x1>
    96bc:	20 97       	sbiw	r28, 0x00	; 0
    96be:	c9 f0       	breq	.+50     	; 0x96f2 <fdevopen+0x88>
    96c0:	c0 87       	std	Z+8, r28	; 0x08
    96c2:	d1 87       	std	Z+9, r29	; 0x09
    96c4:	83 81       	ldd	r24, Z+3	; 0x03
    96c6:	82 60       	ori	r24, 0x02	; 2
    96c8:	83 83       	std	Z+3, r24	; 0x03
    96ca:	80 91 1d 2b 	lds	r24, 0x2B1D	; 0x802b1d <__iob+0x2>
    96ce:	90 91 1e 2b 	lds	r25, 0x2B1E	; 0x802b1e <__iob+0x3>
    96d2:	89 2b       	or	r24, r25
    96d4:	71 f4       	brne	.+28     	; 0x96f2 <fdevopen+0x88>
    96d6:	e0 93 1d 2b 	sts	0x2B1D, r30	; 0x802b1d <__iob+0x2>
    96da:	f0 93 1e 2b 	sts	0x2B1E, r31	; 0x802b1e <__iob+0x3>
    96de:	80 91 1f 2b 	lds	r24, 0x2B1F	; 0x802b1f <__iob+0x4>
    96e2:	90 91 20 2b 	lds	r25, 0x2B20	; 0x802b20 <__iob+0x5>
    96e6:	89 2b       	or	r24, r25
    96e8:	21 f4       	brne	.+8      	; 0x96f2 <fdevopen+0x88>
    96ea:	e0 93 1f 2b 	sts	0x2B1F, r30	; 0x802b1f <__iob+0x4>
    96ee:	f0 93 20 2b 	sts	0x2B20, r31	; 0x802b20 <__iob+0x5>
    96f2:	cf 01       	movw	r24, r30
    96f4:	df 91       	pop	r29
    96f6:	cf 91       	pop	r28
    96f8:	1f 91       	pop	r17
    96fa:	0f 91       	pop	r16
    96fc:	08 95       	ret

000096fe <printf>:
    96fe:	cf 93       	push	r28
    9700:	df 93       	push	r29
    9702:	cd b7       	in	r28, 0x3d	; 61
    9704:	de b7       	in	r29, 0x3e	; 62
    9706:	ae 01       	movw	r20, r28
    9708:	4a 5f       	subi	r20, 0xFA	; 250
    970a:	5f 4f       	sbci	r21, 0xFF	; 255
    970c:	fa 01       	movw	r30, r20
    970e:	61 91       	ld	r22, Z+
    9710:	71 91       	ld	r23, Z+
    9712:	af 01       	movw	r20, r30
    9714:	80 91 1d 2b 	lds	r24, 0x2B1D	; 0x802b1d <__iob+0x2>
    9718:	90 91 1e 2b 	lds	r25, 0x2B1E	; 0x802b1e <__iob+0x3>
    971c:	5b d0       	rcall	.+182    	; 0x97d4 <vfprintf>
    971e:	df 91       	pop	r29
    9720:	cf 91       	pop	r28
    9722:	08 95       	ret

00009724 <puts>:
    9724:	0f 93       	push	r16
    9726:	1f 93       	push	r17
    9728:	cf 93       	push	r28
    972a:	df 93       	push	r29
    972c:	e0 91 1d 2b 	lds	r30, 0x2B1D	; 0x802b1d <__iob+0x2>
    9730:	f0 91 1e 2b 	lds	r31, 0x2B1E	; 0x802b1e <__iob+0x3>
    9734:	23 81       	ldd	r18, Z+3	; 0x03
    9736:	21 ff       	sbrs	r18, 1
    9738:	1b c0       	rjmp	.+54     	; 0x9770 <puts+0x4c>
    973a:	8c 01       	movw	r16, r24
    973c:	d0 e0       	ldi	r29, 0x00	; 0
    973e:	c0 e0       	ldi	r28, 0x00	; 0
    9740:	f8 01       	movw	r30, r16
    9742:	81 91       	ld	r24, Z+
    9744:	8f 01       	movw	r16, r30
    9746:	60 91 1d 2b 	lds	r22, 0x2B1D	; 0x802b1d <__iob+0x2>
    974a:	70 91 1e 2b 	lds	r23, 0x2B1E	; 0x802b1e <__iob+0x3>
    974e:	db 01       	movw	r26, r22
    9750:	18 96       	adiw	r26, 0x08	; 8
    9752:	ed 91       	ld	r30, X+
    9754:	fc 91       	ld	r31, X
    9756:	19 97       	sbiw	r26, 0x09	; 9
    9758:	88 23       	and	r24, r24
    975a:	31 f0       	breq	.+12     	; 0x9768 <puts+0x44>
    975c:	19 95       	eicall
    975e:	89 2b       	or	r24, r25
    9760:	79 f3       	breq	.-34     	; 0x9740 <puts+0x1c>
    9762:	df ef       	ldi	r29, 0xFF	; 255
    9764:	cf ef       	ldi	r28, 0xFF	; 255
    9766:	ec cf       	rjmp	.-40     	; 0x9740 <puts+0x1c>
    9768:	8a e0       	ldi	r24, 0x0A	; 10
    976a:	19 95       	eicall
    976c:	89 2b       	or	r24, r25
    976e:	19 f0       	breq	.+6      	; 0x9776 <puts+0x52>
    9770:	8f ef       	ldi	r24, 0xFF	; 255
    9772:	9f ef       	ldi	r25, 0xFF	; 255
    9774:	02 c0       	rjmp	.+4      	; 0x977a <puts+0x56>
    9776:	8d 2f       	mov	r24, r29
    9778:	9c 2f       	mov	r25, r28
    977a:	df 91       	pop	r29
    977c:	cf 91       	pop	r28
    977e:	1f 91       	pop	r17
    9780:	0f 91       	pop	r16
    9782:	08 95       	ret

00009784 <sprintf>:
    9784:	0f 93       	push	r16
    9786:	1f 93       	push	r17
    9788:	cf 93       	push	r28
    978a:	df 93       	push	r29
    978c:	cd b7       	in	r28, 0x3d	; 61
    978e:	de b7       	in	r29, 0x3e	; 62
    9790:	2e 97       	sbiw	r28, 0x0e	; 14
    9792:	cd bf       	out	0x3d, r28	; 61
    9794:	de bf       	out	0x3e, r29	; 62
    9796:	0e 89       	ldd	r16, Y+22	; 0x16
    9798:	1f 89       	ldd	r17, Y+23	; 0x17
    979a:	86 e0       	ldi	r24, 0x06	; 6
    979c:	8c 83       	std	Y+4, r24	; 0x04
    979e:	09 83       	std	Y+1, r16	; 0x01
    97a0:	1a 83       	std	Y+2, r17	; 0x02
    97a2:	8f ef       	ldi	r24, 0xFF	; 255
    97a4:	9f e7       	ldi	r25, 0x7F	; 127
    97a6:	8d 83       	std	Y+5, r24	; 0x05
    97a8:	9e 83       	std	Y+6, r25	; 0x06
    97aa:	ae 01       	movw	r20, r28
    97ac:	46 5e       	subi	r20, 0xE6	; 230
    97ae:	5f 4f       	sbci	r21, 0xFF	; 255
    97b0:	68 8d       	ldd	r22, Y+24	; 0x18
    97b2:	79 8d       	ldd	r23, Y+25	; 0x19
    97b4:	ce 01       	movw	r24, r28
    97b6:	01 96       	adiw	r24, 0x01	; 1
    97b8:	0d d0       	rcall	.+26     	; 0x97d4 <vfprintf>
    97ba:	ef 81       	ldd	r30, Y+7	; 0x07
    97bc:	f8 85       	ldd	r31, Y+8	; 0x08
    97be:	e0 0f       	add	r30, r16
    97c0:	f1 1f       	adc	r31, r17
    97c2:	10 82       	st	Z, r1
    97c4:	2e 96       	adiw	r28, 0x0e	; 14
    97c6:	cd bf       	out	0x3d, r28	; 61
    97c8:	de bf       	out	0x3e, r29	; 62
    97ca:	df 91       	pop	r29
    97cc:	cf 91       	pop	r28
    97ce:	1f 91       	pop	r17
    97d0:	0f 91       	pop	r16
    97d2:	08 95       	ret

000097d4 <vfprintf>:
    97d4:	2f 92       	push	r2
    97d6:	3f 92       	push	r3
    97d8:	4f 92       	push	r4
    97da:	5f 92       	push	r5
    97dc:	6f 92       	push	r6
    97de:	7f 92       	push	r7
    97e0:	8f 92       	push	r8
    97e2:	9f 92       	push	r9
    97e4:	af 92       	push	r10
    97e6:	bf 92       	push	r11
    97e8:	cf 92       	push	r12
    97ea:	df 92       	push	r13
    97ec:	ef 92       	push	r14
    97ee:	ff 92       	push	r15
    97f0:	0f 93       	push	r16
    97f2:	1f 93       	push	r17
    97f4:	cf 93       	push	r28
    97f6:	df 93       	push	r29
    97f8:	cd b7       	in	r28, 0x3d	; 61
    97fa:	de b7       	in	r29, 0x3e	; 62
    97fc:	2b 97       	sbiw	r28, 0x0b	; 11
    97fe:	cd bf       	out	0x3d, r28	; 61
    9800:	de bf       	out	0x3e, r29	; 62
    9802:	6c 01       	movw	r12, r24
    9804:	7b 01       	movw	r14, r22
    9806:	8a 01       	movw	r16, r20
    9808:	fc 01       	movw	r30, r24
    980a:	16 82       	std	Z+6, r1	; 0x06
    980c:	17 82       	std	Z+7, r1	; 0x07
    980e:	83 81       	ldd	r24, Z+3	; 0x03
    9810:	81 ff       	sbrs	r24, 1
    9812:	bf c1       	rjmp	.+894    	; 0x9b92 <vfprintf+0x3be>
    9814:	ce 01       	movw	r24, r28
    9816:	01 96       	adiw	r24, 0x01	; 1
    9818:	3c 01       	movw	r6, r24
    981a:	f6 01       	movw	r30, r12
    981c:	93 81       	ldd	r25, Z+3	; 0x03
    981e:	f7 01       	movw	r30, r14
    9820:	93 fd       	sbrc	r25, 3
    9822:	85 91       	lpm	r24, Z+
    9824:	93 ff       	sbrs	r25, 3
    9826:	81 91       	ld	r24, Z+
    9828:	7f 01       	movw	r14, r30
    982a:	88 23       	and	r24, r24
    982c:	09 f4       	brne	.+2      	; 0x9830 <vfprintf+0x5c>
    982e:	ad c1       	rjmp	.+858    	; 0x9b8a <vfprintf+0x3b6>
    9830:	85 32       	cpi	r24, 0x25	; 37
    9832:	39 f4       	brne	.+14     	; 0x9842 <vfprintf+0x6e>
    9834:	93 fd       	sbrc	r25, 3
    9836:	85 91       	lpm	r24, Z+
    9838:	93 ff       	sbrs	r25, 3
    983a:	81 91       	ld	r24, Z+
    983c:	7f 01       	movw	r14, r30
    983e:	85 32       	cpi	r24, 0x25	; 37
    9840:	21 f4       	brne	.+8      	; 0x984a <vfprintf+0x76>
    9842:	b6 01       	movw	r22, r12
    9844:	90 e0       	ldi	r25, 0x00	; 0
    9846:	15 d3       	rcall	.+1578   	; 0x9e72 <fputc>
    9848:	e8 cf       	rjmp	.-48     	; 0x981a <vfprintf+0x46>
    984a:	91 2c       	mov	r9, r1
    984c:	21 2c       	mov	r2, r1
    984e:	31 2c       	mov	r3, r1
    9850:	ff e1       	ldi	r31, 0x1F	; 31
    9852:	f3 15       	cp	r31, r3
    9854:	d8 f0       	brcs	.+54     	; 0x988c <vfprintf+0xb8>
    9856:	8b 32       	cpi	r24, 0x2B	; 43
    9858:	79 f0       	breq	.+30     	; 0x9878 <vfprintf+0xa4>
    985a:	38 f4       	brcc	.+14     	; 0x986a <vfprintf+0x96>
    985c:	80 32       	cpi	r24, 0x20	; 32
    985e:	79 f0       	breq	.+30     	; 0x987e <vfprintf+0xaa>
    9860:	83 32       	cpi	r24, 0x23	; 35
    9862:	a1 f4       	brne	.+40     	; 0x988c <vfprintf+0xb8>
    9864:	23 2d       	mov	r18, r3
    9866:	20 61       	ori	r18, 0x10	; 16
    9868:	1d c0       	rjmp	.+58     	; 0x98a4 <vfprintf+0xd0>
    986a:	8d 32       	cpi	r24, 0x2D	; 45
    986c:	61 f0       	breq	.+24     	; 0x9886 <vfprintf+0xb2>
    986e:	80 33       	cpi	r24, 0x30	; 48
    9870:	69 f4       	brne	.+26     	; 0x988c <vfprintf+0xb8>
    9872:	23 2d       	mov	r18, r3
    9874:	21 60       	ori	r18, 0x01	; 1
    9876:	16 c0       	rjmp	.+44     	; 0x98a4 <vfprintf+0xd0>
    9878:	83 2d       	mov	r24, r3
    987a:	82 60       	ori	r24, 0x02	; 2
    987c:	38 2e       	mov	r3, r24
    987e:	e3 2d       	mov	r30, r3
    9880:	e4 60       	ori	r30, 0x04	; 4
    9882:	3e 2e       	mov	r3, r30
    9884:	2a c0       	rjmp	.+84     	; 0x98da <vfprintf+0x106>
    9886:	f3 2d       	mov	r31, r3
    9888:	f8 60       	ori	r31, 0x08	; 8
    988a:	1d c0       	rjmp	.+58     	; 0x98c6 <vfprintf+0xf2>
    988c:	37 fc       	sbrc	r3, 7
    988e:	2d c0       	rjmp	.+90     	; 0x98ea <vfprintf+0x116>
    9890:	20 ed       	ldi	r18, 0xD0	; 208
    9892:	28 0f       	add	r18, r24
    9894:	2a 30       	cpi	r18, 0x0A	; 10
    9896:	40 f0       	brcs	.+16     	; 0x98a8 <vfprintf+0xd4>
    9898:	8e 32       	cpi	r24, 0x2E	; 46
    989a:	b9 f4       	brne	.+46     	; 0x98ca <vfprintf+0xf6>
    989c:	36 fc       	sbrc	r3, 6
    989e:	75 c1       	rjmp	.+746    	; 0x9b8a <vfprintf+0x3b6>
    98a0:	23 2d       	mov	r18, r3
    98a2:	20 64       	ori	r18, 0x40	; 64
    98a4:	32 2e       	mov	r3, r18
    98a6:	19 c0       	rjmp	.+50     	; 0x98da <vfprintf+0x106>
    98a8:	36 fe       	sbrs	r3, 6
    98aa:	06 c0       	rjmp	.+12     	; 0x98b8 <vfprintf+0xe4>
    98ac:	8a e0       	ldi	r24, 0x0A	; 10
    98ae:	98 9e       	mul	r9, r24
    98b0:	20 0d       	add	r18, r0
    98b2:	11 24       	eor	r1, r1
    98b4:	92 2e       	mov	r9, r18
    98b6:	11 c0       	rjmp	.+34     	; 0x98da <vfprintf+0x106>
    98b8:	ea e0       	ldi	r30, 0x0A	; 10
    98ba:	2e 9e       	mul	r2, r30
    98bc:	20 0d       	add	r18, r0
    98be:	11 24       	eor	r1, r1
    98c0:	22 2e       	mov	r2, r18
    98c2:	f3 2d       	mov	r31, r3
    98c4:	f0 62       	ori	r31, 0x20	; 32
    98c6:	3f 2e       	mov	r3, r31
    98c8:	08 c0       	rjmp	.+16     	; 0x98da <vfprintf+0x106>
    98ca:	8c 36       	cpi	r24, 0x6C	; 108
    98cc:	21 f4       	brne	.+8      	; 0x98d6 <vfprintf+0x102>
    98ce:	83 2d       	mov	r24, r3
    98d0:	80 68       	ori	r24, 0x80	; 128
    98d2:	38 2e       	mov	r3, r24
    98d4:	02 c0       	rjmp	.+4      	; 0x98da <vfprintf+0x106>
    98d6:	88 36       	cpi	r24, 0x68	; 104
    98d8:	41 f4       	brne	.+16     	; 0x98ea <vfprintf+0x116>
    98da:	f7 01       	movw	r30, r14
    98dc:	93 fd       	sbrc	r25, 3
    98de:	85 91       	lpm	r24, Z+
    98e0:	93 ff       	sbrs	r25, 3
    98e2:	81 91       	ld	r24, Z+
    98e4:	7f 01       	movw	r14, r30
    98e6:	81 11       	cpse	r24, r1
    98e8:	b3 cf       	rjmp	.-154    	; 0x9850 <vfprintf+0x7c>
    98ea:	98 2f       	mov	r25, r24
    98ec:	9f 7d       	andi	r25, 0xDF	; 223
    98ee:	95 54       	subi	r25, 0x45	; 69
    98f0:	93 30       	cpi	r25, 0x03	; 3
    98f2:	28 f4       	brcc	.+10     	; 0x98fe <vfprintf+0x12a>
    98f4:	0c 5f       	subi	r16, 0xFC	; 252
    98f6:	1f 4f       	sbci	r17, 0xFF	; 255
    98f8:	9f e3       	ldi	r25, 0x3F	; 63
    98fa:	99 83       	std	Y+1, r25	; 0x01
    98fc:	0d c0       	rjmp	.+26     	; 0x9918 <vfprintf+0x144>
    98fe:	83 36       	cpi	r24, 0x63	; 99
    9900:	31 f0       	breq	.+12     	; 0x990e <vfprintf+0x13a>
    9902:	83 37       	cpi	r24, 0x73	; 115
    9904:	71 f0       	breq	.+28     	; 0x9922 <vfprintf+0x14e>
    9906:	83 35       	cpi	r24, 0x53	; 83
    9908:	09 f0       	breq	.+2      	; 0x990c <vfprintf+0x138>
    990a:	55 c0       	rjmp	.+170    	; 0x99b6 <vfprintf+0x1e2>
    990c:	20 c0       	rjmp	.+64     	; 0x994e <vfprintf+0x17a>
    990e:	f8 01       	movw	r30, r16
    9910:	80 81       	ld	r24, Z
    9912:	89 83       	std	Y+1, r24	; 0x01
    9914:	0e 5f       	subi	r16, 0xFE	; 254
    9916:	1f 4f       	sbci	r17, 0xFF	; 255
    9918:	88 24       	eor	r8, r8
    991a:	83 94       	inc	r8
    991c:	91 2c       	mov	r9, r1
    991e:	53 01       	movw	r10, r6
    9920:	12 c0       	rjmp	.+36     	; 0x9946 <vfprintf+0x172>
    9922:	28 01       	movw	r4, r16
    9924:	f2 e0       	ldi	r31, 0x02	; 2
    9926:	4f 0e       	add	r4, r31
    9928:	51 1c       	adc	r5, r1
    992a:	f8 01       	movw	r30, r16
    992c:	a0 80       	ld	r10, Z
    992e:	b1 80       	ldd	r11, Z+1	; 0x01
    9930:	36 fe       	sbrs	r3, 6
    9932:	03 c0       	rjmp	.+6      	; 0x993a <vfprintf+0x166>
    9934:	69 2d       	mov	r22, r9
    9936:	70 e0       	ldi	r23, 0x00	; 0
    9938:	02 c0       	rjmp	.+4      	; 0x993e <vfprintf+0x16a>
    993a:	6f ef       	ldi	r22, 0xFF	; 255
    993c:	7f ef       	ldi	r23, 0xFF	; 255
    993e:	c5 01       	movw	r24, r10
    9940:	8d d2       	rcall	.+1306   	; 0x9e5c <strnlen>
    9942:	4c 01       	movw	r8, r24
    9944:	82 01       	movw	r16, r4
    9946:	f3 2d       	mov	r31, r3
    9948:	ff 77       	andi	r31, 0x7F	; 127
    994a:	3f 2e       	mov	r3, r31
    994c:	15 c0       	rjmp	.+42     	; 0x9978 <vfprintf+0x1a4>
    994e:	28 01       	movw	r4, r16
    9950:	22 e0       	ldi	r18, 0x02	; 2
    9952:	42 0e       	add	r4, r18
    9954:	51 1c       	adc	r5, r1
    9956:	f8 01       	movw	r30, r16
    9958:	a0 80       	ld	r10, Z
    995a:	b1 80       	ldd	r11, Z+1	; 0x01
    995c:	36 fe       	sbrs	r3, 6
    995e:	03 c0       	rjmp	.+6      	; 0x9966 <vfprintf+0x192>
    9960:	69 2d       	mov	r22, r9
    9962:	70 e0       	ldi	r23, 0x00	; 0
    9964:	02 c0       	rjmp	.+4      	; 0x996a <vfprintf+0x196>
    9966:	6f ef       	ldi	r22, 0xFF	; 255
    9968:	7f ef       	ldi	r23, 0xFF	; 255
    996a:	c5 01       	movw	r24, r10
    996c:	65 d2       	rcall	.+1226   	; 0x9e38 <strnlen_P>
    996e:	4c 01       	movw	r8, r24
    9970:	f3 2d       	mov	r31, r3
    9972:	f0 68       	ori	r31, 0x80	; 128
    9974:	3f 2e       	mov	r3, r31
    9976:	82 01       	movw	r16, r4
    9978:	33 fc       	sbrc	r3, 3
    997a:	19 c0       	rjmp	.+50     	; 0x99ae <vfprintf+0x1da>
    997c:	82 2d       	mov	r24, r2
    997e:	90 e0       	ldi	r25, 0x00	; 0
    9980:	88 16       	cp	r8, r24
    9982:	99 06       	cpc	r9, r25
    9984:	a0 f4       	brcc	.+40     	; 0x99ae <vfprintf+0x1da>
    9986:	b6 01       	movw	r22, r12
    9988:	80 e2       	ldi	r24, 0x20	; 32
    998a:	90 e0       	ldi	r25, 0x00	; 0
    998c:	72 d2       	rcall	.+1252   	; 0x9e72 <fputc>
    998e:	2a 94       	dec	r2
    9990:	f5 cf       	rjmp	.-22     	; 0x997c <vfprintf+0x1a8>
    9992:	f5 01       	movw	r30, r10
    9994:	37 fc       	sbrc	r3, 7
    9996:	85 91       	lpm	r24, Z+
    9998:	37 fe       	sbrs	r3, 7
    999a:	81 91       	ld	r24, Z+
    999c:	5f 01       	movw	r10, r30
    999e:	b6 01       	movw	r22, r12
    99a0:	90 e0       	ldi	r25, 0x00	; 0
    99a2:	67 d2       	rcall	.+1230   	; 0x9e72 <fputc>
    99a4:	21 10       	cpse	r2, r1
    99a6:	2a 94       	dec	r2
    99a8:	21 e0       	ldi	r18, 0x01	; 1
    99aa:	82 1a       	sub	r8, r18
    99ac:	91 08       	sbc	r9, r1
    99ae:	81 14       	cp	r8, r1
    99b0:	91 04       	cpc	r9, r1
    99b2:	79 f7       	brne	.-34     	; 0x9992 <vfprintf+0x1be>
    99b4:	e1 c0       	rjmp	.+450    	; 0x9b78 <vfprintf+0x3a4>
    99b6:	84 36       	cpi	r24, 0x64	; 100
    99b8:	11 f0       	breq	.+4      	; 0x99be <vfprintf+0x1ea>
    99ba:	89 36       	cpi	r24, 0x69	; 105
    99bc:	39 f5       	brne	.+78     	; 0x9a0c <vfprintf+0x238>
    99be:	f8 01       	movw	r30, r16
    99c0:	37 fe       	sbrs	r3, 7
    99c2:	07 c0       	rjmp	.+14     	; 0x99d2 <vfprintf+0x1fe>
    99c4:	60 81       	ld	r22, Z
    99c6:	71 81       	ldd	r23, Z+1	; 0x01
    99c8:	82 81       	ldd	r24, Z+2	; 0x02
    99ca:	93 81       	ldd	r25, Z+3	; 0x03
    99cc:	0c 5f       	subi	r16, 0xFC	; 252
    99ce:	1f 4f       	sbci	r17, 0xFF	; 255
    99d0:	08 c0       	rjmp	.+16     	; 0x99e2 <vfprintf+0x20e>
    99d2:	60 81       	ld	r22, Z
    99d4:	71 81       	ldd	r23, Z+1	; 0x01
    99d6:	07 2e       	mov	r0, r23
    99d8:	00 0c       	add	r0, r0
    99da:	88 0b       	sbc	r24, r24
    99dc:	99 0b       	sbc	r25, r25
    99de:	0e 5f       	subi	r16, 0xFE	; 254
    99e0:	1f 4f       	sbci	r17, 0xFF	; 255
    99e2:	f3 2d       	mov	r31, r3
    99e4:	ff 76       	andi	r31, 0x6F	; 111
    99e6:	3f 2e       	mov	r3, r31
    99e8:	97 ff       	sbrs	r25, 7
    99ea:	09 c0       	rjmp	.+18     	; 0x99fe <vfprintf+0x22a>
    99ec:	90 95       	com	r25
    99ee:	80 95       	com	r24
    99f0:	70 95       	com	r23
    99f2:	61 95       	neg	r22
    99f4:	7f 4f       	sbci	r23, 0xFF	; 255
    99f6:	8f 4f       	sbci	r24, 0xFF	; 255
    99f8:	9f 4f       	sbci	r25, 0xFF	; 255
    99fa:	f0 68       	ori	r31, 0x80	; 128
    99fc:	3f 2e       	mov	r3, r31
    99fe:	2a e0       	ldi	r18, 0x0A	; 10
    9a00:	30 e0       	ldi	r19, 0x00	; 0
    9a02:	a3 01       	movw	r20, r6
    9a04:	72 d2       	rcall	.+1252   	; 0x9eea <__ultoa_invert>
    9a06:	88 2e       	mov	r8, r24
    9a08:	86 18       	sub	r8, r6
    9a0a:	44 c0       	rjmp	.+136    	; 0x9a94 <vfprintf+0x2c0>
    9a0c:	85 37       	cpi	r24, 0x75	; 117
    9a0e:	31 f4       	brne	.+12     	; 0x9a1c <vfprintf+0x248>
    9a10:	23 2d       	mov	r18, r3
    9a12:	2f 7e       	andi	r18, 0xEF	; 239
    9a14:	b2 2e       	mov	r11, r18
    9a16:	2a e0       	ldi	r18, 0x0A	; 10
    9a18:	30 e0       	ldi	r19, 0x00	; 0
    9a1a:	25 c0       	rjmp	.+74     	; 0x9a66 <vfprintf+0x292>
    9a1c:	93 2d       	mov	r25, r3
    9a1e:	99 7f       	andi	r25, 0xF9	; 249
    9a20:	b9 2e       	mov	r11, r25
    9a22:	8f 36       	cpi	r24, 0x6F	; 111
    9a24:	c1 f0       	breq	.+48     	; 0x9a56 <vfprintf+0x282>
    9a26:	18 f4       	brcc	.+6      	; 0x9a2e <vfprintf+0x25a>
    9a28:	88 35       	cpi	r24, 0x58	; 88
    9a2a:	79 f0       	breq	.+30     	; 0x9a4a <vfprintf+0x276>
    9a2c:	ae c0       	rjmp	.+348    	; 0x9b8a <vfprintf+0x3b6>
    9a2e:	80 37       	cpi	r24, 0x70	; 112
    9a30:	19 f0       	breq	.+6      	; 0x9a38 <vfprintf+0x264>
    9a32:	88 37       	cpi	r24, 0x78	; 120
    9a34:	21 f0       	breq	.+8      	; 0x9a3e <vfprintf+0x26a>
    9a36:	a9 c0       	rjmp	.+338    	; 0x9b8a <vfprintf+0x3b6>
    9a38:	e9 2f       	mov	r30, r25
    9a3a:	e0 61       	ori	r30, 0x10	; 16
    9a3c:	be 2e       	mov	r11, r30
    9a3e:	b4 fe       	sbrs	r11, 4
    9a40:	0d c0       	rjmp	.+26     	; 0x9a5c <vfprintf+0x288>
    9a42:	fb 2d       	mov	r31, r11
    9a44:	f4 60       	ori	r31, 0x04	; 4
    9a46:	bf 2e       	mov	r11, r31
    9a48:	09 c0       	rjmp	.+18     	; 0x9a5c <vfprintf+0x288>
    9a4a:	34 fe       	sbrs	r3, 4
    9a4c:	0a c0       	rjmp	.+20     	; 0x9a62 <vfprintf+0x28e>
    9a4e:	29 2f       	mov	r18, r25
    9a50:	26 60       	ori	r18, 0x06	; 6
    9a52:	b2 2e       	mov	r11, r18
    9a54:	06 c0       	rjmp	.+12     	; 0x9a62 <vfprintf+0x28e>
    9a56:	28 e0       	ldi	r18, 0x08	; 8
    9a58:	30 e0       	ldi	r19, 0x00	; 0
    9a5a:	05 c0       	rjmp	.+10     	; 0x9a66 <vfprintf+0x292>
    9a5c:	20 e1       	ldi	r18, 0x10	; 16
    9a5e:	30 e0       	ldi	r19, 0x00	; 0
    9a60:	02 c0       	rjmp	.+4      	; 0x9a66 <vfprintf+0x292>
    9a62:	20 e1       	ldi	r18, 0x10	; 16
    9a64:	32 e0       	ldi	r19, 0x02	; 2
    9a66:	f8 01       	movw	r30, r16
    9a68:	b7 fe       	sbrs	r11, 7
    9a6a:	07 c0       	rjmp	.+14     	; 0x9a7a <vfprintf+0x2a6>
    9a6c:	60 81       	ld	r22, Z
    9a6e:	71 81       	ldd	r23, Z+1	; 0x01
    9a70:	82 81       	ldd	r24, Z+2	; 0x02
    9a72:	93 81       	ldd	r25, Z+3	; 0x03
    9a74:	0c 5f       	subi	r16, 0xFC	; 252
    9a76:	1f 4f       	sbci	r17, 0xFF	; 255
    9a78:	06 c0       	rjmp	.+12     	; 0x9a86 <vfprintf+0x2b2>
    9a7a:	60 81       	ld	r22, Z
    9a7c:	71 81       	ldd	r23, Z+1	; 0x01
    9a7e:	80 e0       	ldi	r24, 0x00	; 0
    9a80:	90 e0       	ldi	r25, 0x00	; 0
    9a82:	0e 5f       	subi	r16, 0xFE	; 254
    9a84:	1f 4f       	sbci	r17, 0xFF	; 255
    9a86:	a3 01       	movw	r20, r6
    9a88:	30 d2       	rcall	.+1120   	; 0x9eea <__ultoa_invert>
    9a8a:	88 2e       	mov	r8, r24
    9a8c:	86 18       	sub	r8, r6
    9a8e:	fb 2d       	mov	r31, r11
    9a90:	ff 77       	andi	r31, 0x7F	; 127
    9a92:	3f 2e       	mov	r3, r31
    9a94:	36 fe       	sbrs	r3, 6
    9a96:	0d c0       	rjmp	.+26     	; 0x9ab2 <vfprintf+0x2de>
    9a98:	23 2d       	mov	r18, r3
    9a9a:	2e 7f       	andi	r18, 0xFE	; 254
    9a9c:	a2 2e       	mov	r10, r18
    9a9e:	89 14       	cp	r8, r9
    9aa0:	58 f4       	brcc	.+22     	; 0x9ab8 <vfprintf+0x2e4>
    9aa2:	34 fe       	sbrs	r3, 4
    9aa4:	0b c0       	rjmp	.+22     	; 0x9abc <vfprintf+0x2e8>
    9aa6:	32 fc       	sbrc	r3, 2
    9aa8:	09 c0       	rjmp	.+18     	; 0x9abc <vfprintf+0x2e8>
    9aaa:	83 2d       	mov	r24, r3
    9aac:	8e 7e       	andi	r24, 0xEE	; 238
    9aae:	a8 2e       	mov	r10, r24
    9ab0:	05 c0       	rjmp	.+10     	; 0x9abc <vfprintf+0x2e8>
    9ab2:	b8 2c       	mov	r11, r8
    9ab4:	a3 2c       	mov	r10, r3
    9ab6:	03 c0       	rjmp	.+6      	; 0x9abe <vfprintf+0x2ea>
    9ab8:	b8 2c       	mov	r11, r8
    9aba:	01 c0       	rjmp	.+2      	; 0x9abe <vfprintf+0x2ea>
    9abc:	b9 2c       	mov	r11, r9
    9abe:	a4 fe       	sbrs	r10, 4
    9ac0:	0f c0       	rjmp	.+30     	; 0x9ae0 <vfprintf+0x30c>
    9ac2:	fe 01       	movw	r30, r28
    9ac4:	e8 0d       	add	r30, r8
    9ac6:	f1 1d       	adc	r31, r1
    9ac8:	80 81       	ld	r24, Z
    9aca:	80 33       	cpi	r24, 0x30	; 48
    9acc:	21 f4       	brne	.+8      	; 0x9ad6 <vfprintf+0x302>
    9ace:	9a 2d       	mov	r25, r10
    9ad0:	99 7e       	andi	r25, 0xE9	; 233
    9ad2:	a9 2e       	mov	r10, r25
    9ad4:	09 c0       	rjmp	.+18     	; 0x9ae8 <vfprintf+0x314>
    9ad6:	a2 fe       	sbrs	r10, 2
    9ad8:	06 c0       	rjmp	.+12     	; 0x9ae6 <vfprintf+0x312>
    9ada:	b3 94       	inc	r11
    9adc:	b3 94       	inc	r11
    9ade:	04 c0       	rjmp	.+8      	; 0x9ae8 <vfprintf+0x314>
    9ae0:	8a 2d       	mov	r24, r10
    9ae2:	86 78       	andi	r24, 0x86	; 134
    9ae4:	09 f0       	breq	.+2      	; 0x9ae8 <vfprintf+0x314>
    9ae6:	b3 94       	inc	r11
    9ae8:	a3 fc       	sbrc	r10, 3
    9aea:	10 c0       	rjmp	.+32     	; 0x9b0c <vfprintf+0x338>
    9aec:	a0 fe       	sbrs	r10, 0
    9aee:	06 c0       	rjmp	.+12     	; 0x9afc <vfprintf+0x328>
    9af0:	b2 14       	cp	r11, r2
    9af2:	80 f4       	brcc	.+32     	; 0x9b14 <vfprintf+0x340>
    9af4:	28 0c       	add	r2, r8
    9af6:	92 2c       	mov	r9, r2
    9af8:	9b 18       	sub	r9, r11
    9afa:	0d c0       	rjmp	.+26     	; 0x9b16 <vfprintf+0x342>
    9afc:	b2 14       	cp	r11, r2
    9afe:	58 f4       	brcc	.+22     	; 0x9b16 <vfprintf+0x342>
    9b00:	b6 01       	movw	r22, r12
    9b02:	80 e2       	ldi	r24, 0x20	; 32
    9b04:	90 e0       	ldi	r25, 0x00	; 0
    9b06:	b5 d1       	rcall	.+874    	; 0x9e72 <fputc>
    9b08:	b3 94       	inc	r11
    9b0a:	f8 cf       	rjmp	.-16     	; 0x9afc <vfprintf+0x328>
    9b0c:	b2 14       	cp	r11, r2
    9b0e:	18 f4       	brcc	.+6      	; 0x9b16 <vfprintf+0x342>
    9b10:	2b 18       	sub	r2, r11
    9b12:	02 c0       	rjmp	.+4      	; 0x9b18 <vfprintf+0x344>
    9b14:	98 2c       	mov	r9, r8
    9b16:	21 2c       	mov	r2, r1
    9b18:	a4 fe       	sbrs	r10, 4
    9b1a:	0f c0       	rjmp	.+30     	; 0x9b3a <vfprintf+0x366>
    9b1c:	b6 01       	movw	r22, r12
    9b1e:	80 e3       	ldi	r24, 0x30	; 48
    9b20:	90 e0       	ldi	r25, 0x00	; 0
    9b22:	a7 d1       	rcall	.+846    	; 0x9e72 <fputc>
    9b24:	a2 fe       	sbrs	r10, 2
    9b26:	16 c0       	rjmp	.+44     	; 0x9b54 <vfprintf+0x380>
    9b28:	a1 fc       	sbrc	r10, 1
    9b2a:	03 c0       	rjmp	.+6      	; 0x9b32 <vfprintf+0x35e>
    9b2c:	88 e7       	ldi	r24, 0x78	; 120
    9b2e:	90 e0       	ldi	r25, 0x00	; 0
    9b30:	02 c0       	rjmp	.+4      	; 0x9b36 <vfprintf+0x362>
    9b32:	88 e5       	ldi	r24, 0x58	; 88
    9b34:	90 e0       	ldi	r25, 0x00	; 0
    9b36:	b6 01       	movw	r22, r12
    9b38:	0c c0       	rjmp	.+24     	; 0x9b52 <vfprintf+0x37e>
    9b3a:	8a 2d       	mov	r24, r10
    9b3c:	86 78       	andi	r24, 0x86	; 134
    9b3e:	51 f0       	breq	.+20     	; 0x9b54 <vfprintf+0x380>
    9b40:	a1 fe       	sbrs	r10, 1
    9b42:	02 c0       	rjmp	.+4      	; 0x9b48 <vfprintf+0x374>
    9b44:	8b e2       	ldi	r24, 0x2B	; 43
    9b46:	01 c0       	rjmp	.+2      	; 0x9b4a <vfprintf+0x376>
    9b48:	80 e2       	ldi	r24, 0x20	; 32
    9b4a:	a7 fc       	sbrc	r10, 7
    9b4c:	8d e2       	ldi	r24, 0x2D	; 45
    9b4e:	b6 01       	movw	r22, r12
    9b50:	90 e0       	ldi	r25, 0x00	; 0
    9b52:	8f d1       	rcall	.+798    	; 0x9e72 <fputc>
    9b54:	89 14       	cp	r8, r9
    9b56:	30 f4       	brcc	.+12     	; 0x9b64 <vfprintf+0x390>
    9b58:	b6 01       	movw	r22, r12
    9b5a:	80 e3       	ldi	r24, 0x30	; 48
    9b5c:	90 e0       	ldi	r25, 0x00	; 0
    9b5e:	89 d1       	rcall	.+786    	; 0x9e72 <fputc>
    9b60:	9a 94       	dec	r9
    9b62:	f8 cf       	rjmp	.-16     	; 0x9b54 <vfprintf+0x380>
    9b64:	8a 94       	dec	r8
    9b66:	f3 01       	movw	r30, r6
    9b68:	e8 0d       	add	r30, r8
    9b6a:	f1 1d       	adc	r31, r1
    9b6c:	80 81       	ld	r24, Z
    9b6e:	b6 01       	movw	r22, r12
    9b70:	90 e0       	ldi	r25, 0x00	; 0
    9b72:	7f d1       	rcall	.+766    	; 0x9e72 <fputc>
    9b74:	81 10       	cpse	r8, r1
    9b76:	f6 cf       	rjmp	.-20     	; 0x9b64 <vfprintf+0x390>
    9b78:	22 20       	and	r2, r2
    9b7a:	09 f4       	brne	.+2      	; 0x9b7e <vfprintf+0x3aa>
    9b7c:	4e ce       	rjmp	.-868    	; 0x981a <vfprintf+0x46>
    9b7e:	b6 01       	movw	r22, r12
    9b80:	80 e2       	ldi	r24, 0x20	; 32
    9b82:	90 e0       	ldi	r25, 0x00	; 0
    9b84:	76 d1       	rcall	.+748    	; 0x9e72 <fputc>
    9b86:	2a 94       	dec	r2
    9b88:	f7 cf       	rjmp	.-18     	; 0x9b78 <vfprintf+0x3a4>
    9b8a:	f6 01       	movw	r30, r12
    9b8c:	86 81       	ldd	r24, Z+6	; 0x06
    9b8e:	97 81       	ldd	r25, Z+7	; 0x07
    9b90:	02 c0       	rjmp	.+4      	; 0x9b96 <vfprintf+0x3c2>
    9b92:	8f ef       	ldi	r24, 0xFF	; 255
    9b94:	9f ef       	ldi	r25, 0xFF	; 255
    9b96:	2b 96       	adiw	r28, 0x0b	; 11
    9b98:	cd bf       	out	0x3d, r28	; 61
    9b9a:	de bf       	out	0x3e, r29	; 62
    9b9c:	df 91       	pop	r29
    9b9e:	cf 91       	pop	r28
    9ba0:	1f 91       	pop	r17
    9ba2:	0f 91       	pop	r16
    9ba4:	ff 90       	pop	r15
    9ba6:	ef 90       	pop	r14
    9ba8:	df 90       	pop	r13
    9baa:	cf 90       	pop	r12
    9bac:	bf 90       	pop	r11
    9bae:	af 90       	pop	r10
    9bb0:	9f 90       	pop	r9
    9bb2:	8f 90       	pop	r8
    9bb4:	7f 90       	pop	r7
    9bb6:	6f 90       	pop	r6
    9bb8:	5f 90       	pop	r5
    9bba:	4f 90       	pop	r4
    9bbc:	3f 90       	pop	r3
    9bbe:	2f 90       	pop	r2
    9bc0:	08 95       	ret

00009bc2 <calloc>:
    9bc2:	0f 93       	push	r16
    9bc4:	1f 93       	push	r17
    9bc6:	cf 93       	push	r28
    9bc8:	df 93       	push	r29
    9bca:	86 9f       	mul	r24, r22
    9bcc:	80 01       	movw	r16, r0
    9bce:	87 9f       	mul	r24, r23
    9bd0:	10 0d       	add	r17, r0
    9bd2:	96 9f       	mul	r25, r22
    9bd4:	10 0d       	add	r17, r0
    9bd6:	11 24       	eor	r1, r1
    9bd8:	c8 01       	movw	r24, r16
    9bda:	0d d0       	rcall	.+26     	; 0x9bf6 <malloc>
    9bdc:	ec 01       	movw	r28, r24
    9bde:	00 97       	sbiw	r24, 0x00	; 0
    9be0:	21 f0       	breq	.+8      	; 0x9bea <calloc+0x28>
    9be2:	a8 01       	movw	r20, r16
    9be4:	60 e0       	ldi	r22, 0x00	; 0
    9be6:	70 e0       	ldi	r23, 0x00	; 0
    9be8:	32 d1       	rcall	.+612    	; 0x9e4e <memset>
    9bea:	ce 01       	movw	r24, r28
    9bec:	df 91       	pop	r29
    9bee:	cf 91       	pop	r28
    9bf0:	1f 91       	pop	r17
    9bf2:	0f 91       	pop	r16
    9bf4:	08 95       	ret

00009bf6 <malloc>:
    9bf6:	0f 93       	push	r16
    9bf8:	1f 93       	push	r17
    9bfa:	cf 93       	push	r28
    9bfc:	df 93       	push	r29
    9bfe:	82 30       	cpi	r24, 0x02	; 2
    9c00:	91 05       	cpc	r25, r1
    9c02:	10 f4       	brcc	.+4      	; 0x9c08 <malloc+0x12>
    9c04:	82 e0       	ldi	r24, 0x02	; 2
    9c06:	90 e0       	ldi	r25, 0x00	; 0
    9c08:	e0 91 23 2b 	lds	r30, 0x2B23	; 0x802b23 <__flp>
    9c0c:	f0 91 24 2b 	lds	r31, 0x2B24	; 0x802b24 <__flp+0x1>
    9c10:	20 e0       	ldi	r18, 0x00	; 0
    9c12:	30 e0       	ldi	r19, 0x00	; 0
    9c14:	a0 e0       	ldi	r26, 0x00	; 0
    9c16:	b0 e0       	ldi	r27, 0x00	; 0
    9c18:	30 97       	sbiw	r30, 0x00	; 0
    9c1a:	19 f1       	breq	.+70     	; 0x9c62 <malloc+0x6c>
    9c1c:	40 81       	ld	r20, Z
    9c1e:	51 81       	ldd	r21, Z+1	; 0x01
    9c20:	02 81       	ldd	r16, Z+2	; 0x02
    9c22:	13 81       	ldd	r17, Z+3	; 0x03
    9c24:	48 17       	cp	r20, r24
    9c26:	59 07       	cpc	r21, r25
    9c28:	c8 f0       	brcs	.+50     	; 0x9c5c <malloc+0x66>
    9c2a:	84 17       	cp	r24, r20
    9c2c:	95 07       	cpc	r25, r21
    9c2e:	69 f4       	brne	.+26     	; 0x9c4a <malloc+0x54>
    9c30:	10 97       	sbiw	r26, 0x00	; 0
    9c32:	31 f0       	breq	.+12     	; 0x9c40 <malloc+0x4a>
    9c34:	12 96       	adiw	r26, 0x02	; 2
    9c36:	0c 93       	st	X, r16
    9c38:	12 97       	sbiw	r26, 0x02	; 2
    9c3a:	13 96       	adiw	r26, 0x03	; 3
    9c3c:	1c 93       	st	X, r17
    9c3e:	27 c0       	rjmp	.+78     	; 0x9c8e <malloc+0x98>
    9c40:	00 93 23 2b 	sts	0x2B23, r16	; 0x802b23 <__flp>
    9c44:	10 93 24 2b 	sts	0x2B24, r17	; 0x802b24 <__flp+0x1>
    9c48:	22 c0       	rjmp	.+68     	; 0x9c8e <malloc+0x98>
    9c4a:	21 15       	cp	r18, r1
    9c4c:	31 05       	cpc	r19, r1
    9c4e:	19 f0       	breq	.+6      	; 0x9c56 <malloc+0x60>
    9c50:	42 17       	cp	r20, r18
    9c52:	53 07       	cpc	r21, r19
    9c54:	18 f4       	brcc	.+6      	; 0x9c5c <malloc+0x66>
    9c56:	9a 01       	movw	r18, r20
    9c58:	bd 01       	movw	r22, r26
    9c5a:	ef 01       	movw	r28, r30
    9c5c:	df 01       	movw	r26, r30
    9c5e:	f8 01       	movw	r30, r16
    9c60:	db cf       	rjmp	.-74     	; 0x9c18 <malloc+0x22>
    9c62:	21 15       	cp	r18, r1
    9c64:	31 05       	cpc	r19, r1
    9c66:	f9 f0       	breq	.+62     	; 0x9ca6 <malloc+0xb0>
    9c68:	28 1b       	sub	r18, r24
    9c6a:	39 0b       	sbc	r19, r25
    9c6c:	24 30       	cpi	r18, 0x04	; 4
    9c6e:	31 05       	cpc	r19, r1
    9c70:	80 f4       	brcc	.+32     	; 0x9c92 <malloc+0x9c>
    9c72:	8a 81       	ldd	r24, Y+2	; 0x02
    9c74:	9b 81       	ldd	r25, Y+3	; 0x03
    9c76:	61 15       	cp	r22, r1
    9c78:	71 05       	cpc	r23, r1
    9c7a:	21 f0       	breq	.+8      	; 0x9c84 <malloc+0x8e>
    9c7c:	fb 01       	movw	r30, r22
    9c7e:	82 83       	std	Z+2, r24	; 0x02
    9c80:	93 83       	std	Z+3, r25	; 0x03
    9c82:	04 c0       	rjmp	.+8      	; 0x9c8c <malloc+0x96>
    9c84:	80 93 23 2b 	sts	0x2B23, r24	; 0x802b23 <__flp>
    9c88:	90 93 24 2b 	sts	0x2B24, r25	; 0x802b24 <__flp+0x1>
    9c8c:	fe 01       	movw	r30, r28
    9c8e:	32 96       	adiw	r30, 0x02	; 2
    9c90:	44 c0       	rjmp	.+136    	; 0x9d1a <malloc+0x124>
    9c92:	fe 01       	movw	r30, r28
    9c94:	e2 0f       	add	r30, r18
    9c96:	f3 1f       	adc	r31, r19
    9c98:	81 93       	st	Z+, r24
    9c9a:	91 93       	st	Z+, r25
    9c9c:	22 50       	subi	r18, 0x02	; 2
    9c9e:	31 09       	sbc	r19, r1
    9ca0:	28 83       	st	Y, r18
    9ca2:	39 83       	std	Y+1, r19	; 0x01
    9ca4:	3a c0       	rjmp	.+116    	; 0x9d1a <malloc+0x124>
    9ca6:	20 91 21 2b 	lds	r18, 0x2B21	; 0x802b21 <__brkval>
    9caa:	30 91 22 2b 	lds	r19, 0x2B22	; 0x802b22 <__brkval+0x1>
    9cae:	23 2b       	or	r18, r19
    9cb0:	41 f4       	brne	.+16     	; 0x9cc2 <malloc+0xcc>
    9cb2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    9cb6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    9cba:	20 93 21 2b 	sts	0x2B21, r18	; 0x802b21 <__brkval>
    9cbe:	30 93 22 2b 	sts	0x2B22, r19	; 0x802b22 <__brkval+0x1>
    9cc2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    9cc6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    9cca:	21 15       	cp	r18, r1
    9ccc:	31 05       	cpc	r19, r1
    9cce:	41 f4       	brne	.+16     	; 0x9ce0 <malloc+0xea>
    9cd0:	2d b7       	in	r18, 0x3d	; 61
    9cd2:	3e b7       	in	r19, 0x3e	; 62
    9cd4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    9cd8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    9cdc:	24 1b       	sub	r18, r20
    9cde:	35 0b       	sbc	r19, r21
    9ce0:	e0 91 21 2b 	lds	r30, 0x2B21	; 0x802b21 <__brkval>
    9ce4:	f0 91 22 2b 	lds	r31, 0x2B22	; 0x802b22 <__brkval+0x1>
    9ce8:	e2 17       	cp	r30, r18
    9cea:	f3 07       	cpc	r31, r19
    9cec:	a0 f4       	brcc	.+40     	; 0x9d16 <malloc+0x120>
    9cee:	2e 1b       	sub	r18, r30
    9cf0:	3f 0b       	sbc	r19, r31
    9cf2:	28 17       	cp	r18, r24
    9cf4:	39 07       	cpc	r19, r25
    9cf6:	78 f0       	brcs	.+30     	; 0x9d16 <malloc+0x120>
    9cf8:	ac 01       	movw	r20, r24
    9cfa:	4e 5f       	subi	r20, 0xFE	; 254
    9cfc:	5f 4f       	sbci	r21, 0xFF	; 255
    9cfe:	24 17       	cp	r18, r20
    9d00:	35 07       	cpc	r19, r21
    9d02:	48 f0       	brcs	.+18     	; 0x9d16 <malloc+0x120>
    9d04:	4e 0f       	add	r20, r30
    9d06:	5f 1f       	adc	r21, r31
    9d08:	40 93 21 2b 	sts	0x2B21, r20	; 0x802b21 <__brkval>
    9d0c:	50 93 22 2b 	sts	0x2B22, r21	; 0x802b22 <__brkval+0x1>
    9d10:	81 93       	st	Z+, r24
    9d12:	91 93       	st	Z+, r25
    9d14:	02 c0       	rjmp	.+4      	; 0x9d1a <malloc+0x124>
    9d16:	e0 e0       	ldi	r30, 0x00	; 0
    9d18:	f0 e0       	ldi	r31, 0x00	; 0
    9d1a:	cf 01       	movw	r24, r30
    9d1c:	df 91       	pop	r29
    9d1e:	cf 91       	pop	r28
    9d20:	1f 91       	pop	r17
    9d22:	0f 91       	pop	r16
    9d24:	08 95       	ret

00009d26 <free>:
    9d26:	cf 93       	push	r28
    9d28:	df 93       	push	r29
    9d2a:	00 97       	sbiw	r24, 0x00	; 0
    9d2c:	09 f4       	brne	.+2      	; 0x9d30 <free+0xa>
    9d2e:	81 c0       	rjmp	.+258    	; 0x9e32 <free+0x10c>
    9d30:	fc 01       	movw	r30, r24
    9d32:	32 97       	sbiw	r30, 0x02	; 2
    9d34:	12 82       	std	Z+2, r1	; 0x02
    9d36:	13 82       	std	Z+3, r1	; 0x03
    9d38:	a0 91 23 2b 	lds	r26, 0x2B23	; 0x802b23 <__flp>
    9d3c:	b0 91 24 2b 	lds	r27, 0x2B24	; 0x802b24 <__flp+0x1>
    9d40:	10 97       	sbiw	r26, 0x00	; 0
    9d42:	81 f4       	brne	.+32     	; 0x9d64 <free+0x3e>
    9d44:	20 81       	ld	r18, Z
    9d46:	31 81       	ldd	r19, Z+1	; 0x01
    9d48:	82 0f       	add	r24, r18
    9d4a:	93 1f       	adc	r25, r19
    9d4c:	20 91 21 2b 	lds	r18, 0x2B21	; 0x802b21 <__brkval>
    9d50:	30 91 22 2b 	lds	r19, 0x2B22	; 0x802b22 <__brkval+0x1>
    9d54:	28 17       	cp	r18, r24
    9d56:	39 07       	cpc	r19, r25
    9d58:	51 f5       	brne	.+84     	; 0x9dae <free+0x88>
    9d5a:	e0 93 21 2b 	sts	0x2B21, r30	; 0x802b21 <__brkval>
    9d5e:	f0 93 22 2b 	sts	0x2B22, r31	; 0x802b22 <__brkval+0x1>
    9d62:	67 c0       	rjmp	.+206    	; 0x9e32 <free+0x10c>
    9d64:	ed 01       	movw	r28, r26
    9d66:	20 e0       	ldi	r18, 0x00	; 0
    9d68:	30 e0       	ldi	r19, 0x00	; 0
    9d6a:	ce 17       	cp	r28, r30
    9d6c:	df 07       	cpc	r29, r31
    9d6e:	40 f4       	brcc	.+16     	; 0x9d80 <free+0x5a>
    9d70:	4a 81       	ldd	r20, Y+2	; 0x02
    9d72:	5b 81       	ldd	r21, Y+3	; 0x03
    9d74:	9e 01       	movw	r18, r28
    9d76:	41 15       	cp	r20, r1
    9d78:	51 05       	cpc	r21, r1
    9d7a:	f1 f0       	breq	.+60     	; 0x9db8 <free+0x92>
    9d7c:	ea 01       	movw	r28, r20
    9d7e:	f5 cf       	rjmp	.-22     	; 0x9d6a <free+0x44>
    9d80:	c2 83       	std	Z+2, r28	; 0x02
    9d82:	d3 83       	std	Z+3, r29	; 0x03
    9d84:	40 81       	ld	r20, Z
    9d86:	51 81       	ldd	r21, Z+1	; 0x01
    9d88:	84 0f       	add	r24, r20
    9d8a:	95 1f       	adc	r25, r21
    9d8c:	c8 17       	cp	r28, r24
    9d8e:	d9 07       	cpc	r29, r25
    9d90:	59 f4       	brne	.+22     	; 0x9da8 <free+0x82>
    9d92:	88 81       	ld	r24, Y
    9d94:	99 81       	ldd	r25, Y+1	; 0x01
    9d96:	84 0f       	add	r24, r20
    9d98:	95 1f       	adc	r25, r21
    9d9a:	02 96       	adiw	r24, 0x02	; 2
    9d9c:	80 83       	st	Z, r24
    9d9e:	91 83       	std	Z+1, r25	; 0x01
    9da0:	8a 81       	ldd	r24, Y+2	; 0x02
    9da2:	9b 81       	ldd	r25, Y+3	; 0x03
    9da4:	82 83       	std	Z+2, r24	; 0x02
    9da6:	93 83       	std	Z+3, r25	; 0x03
    9da8:	21 15       	cp	r18, r1
    9daa:	31 05       	cpc	r19, r1
    9dac:	29 f4       	brne	.+10     	; 0x9db8 <free+0x92>
    9dae:	e0 93 23 2b 	sts	0x2B23, r30	; 0x802b23 <__flp>
    9db2:	f0 93 24 2b 	sts	0x2B24, r31	; 0x802b24 <__flp+0x1>
    9db6:	3d c0       	rjmp	.+122    	; 0x9e32 <free+0x10c>
    9db8:	e9 01       	movw	r28, r18
    9dba:	ea 83       	std	Y+2, r30	; 0x02
    9dbc:	fb 83       	std	Y+3, r31	; 0x03
    9dbe:	49 91       	ld	r20, Y+
    9dc0:	59 91       	ld	r21, Y+
    9dc2:	c4 0f       	add	r28, r20
    9dc4:	d5 1f       	adc	r29, r21
    9dc6:	ec 17       	cp	r30, r28
    9dc8:	fd 07       	cpc	r31, r29
    9dca:	61 f4       	brne	.+24     	; 0x9de4 <free+0xbe>
    9dcc:	80 81       	ld	r24, Z
    9dce:	91 81       	ldd	r25, Z+1	; 0x01
    9dd0:	84 0f       	add	r24, r20
    9dd2:	95 1f       	adc	r25, r21
    9dd4:	02 96       	adiw	r24, 0x02	; 2
    9dd6:	e9 01       	movw	r28, r18
    9dd8:	88 83       	st	Y, r24
    9dda:	99 83       	std	Y+1, r25	; 0x01
    9ddc:	82 81       	ldd	r24, Z+2	; 0x02
    9dde:	93 81       	ldd	r25, Z+3	; 0x03
    9de0:	8a 83       	std	Y+2, r24	; 0x02
    9de2:	9b 83       	std	Y+3, r25	; 0x03
    9de4:	e0 e0       	ldi	r30, 0x00	; 0
    9de6:	f0 e0       	ldi	r31, 0x00	; 0
    9de8:	12 96       	adiw	r26, 0x02	; 2
    9dea:	8d 91       	ld	r24, X+
    9dec:	9c 91       	ld	r25, X
    9dee:	13 97       	sbiw	r26, 0x03	; 3
    9df0:	00 97       	sbiw	r24, 0x00	; 0
    9df2:	19 f0       	breq	.+6      	; 0x9dfa <free+0xd4>
    9df4:	fd 01       	movw	r30, r26
    9df6:	dc 01       	movw	r26, r24
    9df8:	f7 cf       	rjmp	.-18     	; 0x9de8 <free+0xc2>
    9dfa:	8d 91       	ld	r24, X+
    9dfc:	9c 91       	ld	r25, X
    9dfe:	11 97       	sbiw	r26, 0x01	; 1
    9e00:	9d 01       	movw	r18, r26
    9e02:	2e 5f       	subi	r18, 0xFE	; 254
    9e04:	3f 4f       	sbci	r19, 0xFF	; 255
    9e06:	82 0f       	add	r24, r18
    9e08:	93 1f       	adc	r25, r19
    9e0a:	20 91 21 2b 	lds	r18, 0x2B21	; 0x802b21 <__brkval>
    9e0e:	30 91 22 2b 	lds	r19, 0x2B22	; 0x802b22 <__brkval+0x1>
    9e12:	28 17       	cp	r18, r24
    9e14:	39 07       	cpc	r19, r25
    9e16:	69 f4       	brne	.+26     	; 0x9e32 <free+0x10c>
    9e18:	30 97       	sbiw	r30, 0x00	; 0
    9e1a:	29 f4       	brne	.+10     	; 0x9e26 <free+0x100>
    9e1c:	10 92 23 2b 	sts	0x2B23, r1	; 0x802b23 <__flp>
    9e20:	10 92 24 2b 	sts	0x2B24, r1	; 0x802b24 <__flp+0x1>
    9e24:	02 c0       	rjmp	.+4      	; 0x9e2a <free+0x104>
    9e26:	12 82       	std	Z+2, r1	; 0x02
    9e28:	13 82       	std	Z+3, r1	; 0x03
    9e2a:	a0 93 21 2b 	sts	0x2B21, r26	; 0x802b21 <__brkval>
    9e2e:	b0 93 22 2b 	sts	0x2B22, r27	; 0x802b22 <__brkval+0x1>
    9e32:	df 91       	pop	r29
    9e34:	cf 91       	pop	r28
    9e36:	08 95       	ret

00009e38 <strnlen_P>:
    9e38:	fc 01       	movw	r30, r24
    9e3a:	05 90       	lpm	r0, Z+
    9e3c:	61 50       	subi	r22, 0x01	; 1
    9e3e:	70 40       	sbci	r23, 0x00	; 0
    9e40:	01 10       	cpse	r0, r1
    9e42:	d8 f7       	brcc	.-10     	; 0x9e3a <strnlen_P+0x2>
    9e44:	80 95       	com	r24
    9e46:	90 95       	com	r25
    9e48:	8e 0f       	add	r24, r30
    9e4a:	9f 1f       	adc	r25, r31
    9e4c:	08 95       	ret

00009e4e <memset>:
    9e4e:	dc 01       	movw	r26, r24
    9e50:	01 c0       	rjmp	.+2      	; 0x9e54 <memset+0x6>
    9e52:	6d 93       	st	X+, r22
    9e54:	41 50       	subi	r20, 0x01	; 1
    9e56:	50 40       	sbci	r21, 0x00	; 0
    9e58:	e0 f7       	brcc	.-8      	; 0x9e52 <memset+0x4>
    9e5a:	08 95       	ret

00009e5c <strnlen>:
    9e5c:	fc 01       	movw	r30, r24
    9e5e:	61 50       	subi	r22, 0x01	; 1
    9e60:	70 40       	sbci	r23, 0x00	; 0
    9e62:	01 90       	ld	r0, Z+
    9e64:	01 10       	cpse	r0, r1
    9e66:	d8 f7       	brcc	.-10     	; 0x9e5e <strnlen+0x2>
    9e68:	80 95       	com	r24
    9e6a:	90 95       	com	r25
    9e6c:	8e 0f       	add	r24, r30
    9e6e:	9f 1f       	adc	r25, r31
    9e70:	08 95       	ret

00009e72 <fputc>:
    9e72:	0f 93       	push	r16
    9e74:	1f 93       	push	r17
    9e76:	cf 93       	push	r28
    9e78:	df 93       	push	r29
    9e7a:	fb 01       	movw	r30, r22
    9e7c:	23 81       	ldd	r18, Z+3	; 0x03
    9e7e:	21 fd       	sbrc	r18, 1
    9e80:	03 c0       	rjmp	.+6      	; 0x9e88 <fputc+0x16>
    9e82:	8f ef       	ldi	r24, 0xFF	; 255
    9e84:	9f ef       	ldi	r25, 0xFF	; 255
    9e86:	2c c0       	rjmp	.+88     	; 0x9ee0 <fputc+0x6e>
    9e88:	22 ff       	sbrs	r18, 2
    9e8a:	16 c0       	rjmp	.+44     	; 0x9eb8 <fputc+0x46>
    9e8c:	46 81       	ldd	r20, Z+6	; 0x06
    9e8e:	57 81       	ldd	r21, Z+7	; 0x07
    9e90:	24 81       	ldd	r18, Z+4	; 0x04
    9e92:	35 81       	ldd	r19, Z+5	; 0x05
    9e94:	42 17       	cp	r20, r18
    9e96:	53 07       	cpc	r21, r19
    9e98:	44 f4       	brge	.+16     	; 0x9eaa <fputc+0x38>
    9e9a:	a0 81       	ld	r26, Z
    9e9c:	b1 81       	ldd	r27, Z+1	; 0x01
    9e9e:	9d 01       	movw	r18, r26
    9ea0:	2f 5f       	subi	r18, 0xFF	; 255
    9ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    9ea4:	20 83       	st	Z, r18
    9ea6:	31 83       	std	Z+1, r19	; 0x01
    9ea8:	8c 93       	st	X, r24
    9eaa:	26 81       	ldd	r18, Z+6	; 0x06
    9eac:	37 81       	ldd	r19, Z+7	; 0x07
    9eae:	2f 5f       	subi	r18, 0xFF	; 255
    9eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    9eb2:	26 83       	std	Z+6, r18	; 0x06
    9eb4:	37 83       	std	Z+7, r19	; 0x07
    9eb6:	14 c0       	rjmp	.+40     	; 0x9ee0 <fputc+0x6e>
    9eb8:	8b 01       	movw	r16, r22
    9eba:	ec 01       	movw	r28, r24
    9ebc:	fb 01       	movw	r30, r22
    9ebe:	00 84       	ldd	r0, Z+8	; 0x08
    9ec0:	f1 85       	ldd	r31, Z+9	; 0x09
    9ec2:	e0 2d       	mov	r30, r0
    9ec4:	19 95       	eicall
    9ec6:	89 2b       	or	r24, r25
    9ec8:	e1 f6       	brne	.-72     	; 0x9e82 <fputc+0x10>
    9eca:	d8 01       	movw	r26, r16
    9ecc:	16 96       	adiw	r26, 0x06	; 6
    9ece:	8d 91       	ld	r24, X+
    9ed0:	9c 91       	ld	r25, X
    9ed2:	17 97       	sbiw	r26, 0x07	; 7
    9ed4:	01 96       	adiw	r24, 0x01	; 1
    9ed6:	16 96       	adiw	r26, 0x06	; 6
    9ed8:	8d 93       	st	X+, r24
    9eda:	9c 93       	st	X, r25
    9edc:	17 97       	sbiw	r26, 0x07	; 7
    9ede:	ce 01       	movw	r24, r28
    9ee0:	df 91       	pop	r29
    9ee2:	cf 91       	pop	r28
    9ee4:	1f 91       	pop	r17
    9ee6:	0f 91       	pop	r16
    9ee8:	08 95       	ret

00009eea <__ultoa_invert>:
    9eea:	fa 01       	movw	r30, r20
    9eec:	aa 27       	eor	r26, r26
    9eee:	28 30       	cpi	r18, 0x08	; 8
    9ef0:	51 f1       	breq	.+84     	; 0x9f46 <__ultoa_invert+0x5c>
    9ef2:	20 31       	cpi	r18, 0x10	; 16
    9ef4:	81 f1       	breq	.+96     	; 0x9f56 <__ultoa_invert+0x6c>
    9ef6:	e8 94       	clt
    9ef8:	6f 93       	push	r22
    9efa:	6e 7f       	andi	r22, 0xFE	; 254
    9efc:	6e 5f       	subi	r22, 0xFE	; 254
    9efe:	7f 4f       	sbci	r23, 0xFF	; 255
    9f00:	8f 4f       	sbci	r24, 0xFF	; 255
    9f02:	9f 4f       	sbci	r25, 0xFF	; 255
    9f04:	af 4f       	sbci	r26, 0xFF	; 255
    9f06:	b1 e0       	ldi	r27, 0x01	; 1
    9f08:	3e d0       	rcall	.+124    	; 0x9f86 <__ultoa_invert+0x9c>
    9f0a:	b4 e0       	ldi	r27, 0x04	; 4
    9f0c:	3c d0       	rcall	.+120    	; 0x9f86 <__ultoa_invert+0x9c>
    9f0e:	67 0f       	add	r22, r23
    9f10:	78 1f       	adc	r23, r24
    9f12:	89 1f       	adc	r24, r25
    9f14:	9a 1f       	adc	r25, r26
    9f16:	a1 1d       	adc	r26, r1
    9f18:	68 0f       	add	r22, r24
    9f1a:	79 1f       	adc	r23, r25
    9f1c:	8a 1f       	adc	r24, r26
    9f1e:	91 1d       	adc	r25, r1
    9f20:	a1 1d       	adc	r26, r1
    9f22:	6a 0f       	add	r22, r26
    9f24:	71 1d       	adc	r23, r1
    9f26:	81 1d       	adc	r24, r1
    9f28:	91 1d       	adc	r25, r1
    9f2a:	a1 1d       	adc	r26, r1
    9f2c:	20 d0       	rcall	.+64     	; 0x9f6e <__ultoa_invert+0x84>
    9f2e:	09 f4       	brne	.+2      	; 0x9f32 <__ultoa_invert+0x48>
    9f30:	68 94       	set
    9f32:	3f 91       	pop	r19
    9f34:	2a e0       	ldi	r18, 0x0A	; 10
    9f36:	26 9f       	mul	r18, r22
    9f38:	11 24       	eor	r1, r1
    9f3a:	30 19       	sub	r19, r0
    9f3c:	30 5d       	subi	r19, 0xD0	; 208
    9f3e:	31 93       	st	Z+, r19
    9f40:	de f6       	brtc	.-74     	; 0x9ef8 <__ultoa_invert+0xe>
    9f42:	cf 01       	movw	r24, r30
    9f44:	08 95       	ret
    9f46:	46 2f       	mov	r20, r22
    9f48:	47 70       	andi	r20, 0x07	; 7
    9f4a:	40 5d       	subi	r20, 0xD0	; 208
    9f4c:	41 93       	st	Z+, r20
    9f4e:	b3 e0       	ldi	r27, 0x03	; 3
    9f50:	0f d0       	rcall	.+30     	; 0x9f70 <__ultoa_invert+0x86>
    9f52:	c9 f7       	brne	.-14     	; 0x9f46 <__ultoa_invert+0x5c>
    9f54:	f6 cf       	rjmp	.-20     	; 0x9f42 <__ultoa_invert+0x58>
    9f56:	46 2f       	mov	r20, r22
    9f58:	4f 70       	andi	r20, 0x0F	; 15
    9f5a:	40 5d       	subi	r20, 0xD0	; 208
    9f5c:	4a 33       	cpi	r20, 0x3A	; 58
    9f5e:	18 f0       	brcs	.+6      	; 0x9f66 <__ultoa_invert+0x7c>
    9f60:	49 5d       	subi	r20, 0xD9	; 217
    9f62:	31 fd       	sbrc	r19, 1
    9f64:	40 52       	subi	r20, 0x20	; 32
    9f66:	41 93       	st	Z+, r20
    9f68:	02 d0       	rcall	.+4      	; 0x9f6e <__ultoa_invert+0x84>
    9f6a:	a9 f7       	brne	.-22     	; 0x9f56 <__ultoa_invert+0x6c>
    9f6c:	ea cf       	rjmp	.-44     	; 0x9f42 <__ultoa_invert+0x58>
    9f6e:	b4 e0       	ldi	r27, 0x04	; 4
    9f70:	a6 95       	lsr	r26
    9f72:	97 95       	ror	r25
    9f74:	87 95       	ror	r24
    9f76:	77 95       	ror	r23
    9f78:	67 95       	ror	r22
    9f7a:	ba 95       	dec	r27
    9f7c:	c9 f7       	brne	.-14     	; 0x9f70 <__ultoa_invert+0x86>
    9f7e:	00 97       	sbiw	r24, 0x00	; 0
    9f80:	61 05       	cpc	r22, r1
    9f82:	71 05       	cpc	r23, r1
    9f84:	08 95       	ret
    9f86:	9b 01       	movw	r18, r22
    9f88:	ac 01       	movw	r20, r24
    9f8a:	0a 2e       	mov	r0, r26
    9f8c:	06 94       	lsr	r0
    9f8e:	57 95       	ror	r21
    9f90:	47 95       	ror	r20
    9f92:	37 95       	ror	r19
    9f94:	27 95       	ror	r18
    9f96:	ba 95       	dec	r27
    9f98:	c9 f7       	brne	.-14     	; 0x9f8c <__ultoa_invert+0xa2>
    9f9a:	62 0f       	add	r22, r18
    9f9c:	73 1f       	adc	r23, r19
    9f9e:	84 1f       	adc	r24, r20
    9fa0:	95 1f       	adc	r25, r21
    9fa2:	a0 1d       	adc	r26, r0
    9fa4:	08 95       	ret

00009fa6 <_exit>:
    9fa6:	f8 94       	cli

00009fa8 <__stop_program>:
    9fa8:	ff cf       	rjmp	.-2      	; 0x9fa8 <__stop_program>
